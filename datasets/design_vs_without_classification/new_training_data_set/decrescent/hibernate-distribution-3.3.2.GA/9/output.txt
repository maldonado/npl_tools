test out the optimizer:	WITHOUT_CLASSIFICATION	0.9999553422349154	WITHOUT_CLASSIFICATION	4.4657765084511685E-5	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.999627030731016	WITHOUT_CLASSIFICATION	3.7296926898392813E-4	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.999627030731016	WITHOUT_CLASSIFICATION	3.7296926898392813E-4	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.999627030731016	WITHOUT_CLASSIFICATION	3.7296926898392813E-4	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.999627030731016	WITHOUT_CLASSIFICATION	3.7296926898392813E-4	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.999627030731016	WITHOUT_CLASSIFICATION	3.7296926898392813E-4	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.999627030731016	WITHOUT_CLASSIFICATION	3.7296926898392813E-4	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.999627030731016	WITHOUT_CLASSIFICATION	3.7296926898392813E-4	DESIGN
return	WITHOUT_CLASSIFICATION	0.9996808147877507	WITHOUT_CLASSIFICATION	3.1918521224933176E-4	DESIGN
return	WITHOUT_CLASSIFICATION	0.9996808147877507	WITHOUT_CLASSIFICATION	3.1918521224933176E-4	DESIGN
| this | bean | args | raw bean |	WITHOUT_CLASSIFICATION	0.9996872405878896	WITHOUT_CLASSIFICATION	3.127594121104062E-4	DESIGN
invokeinterface	WITHOUT_CLASSIFICATION	0.9995868833392739	WITHOUT_CLASSIFICATION	4.131166607260134E-4	DESIGN
astore 4 store the raw bean	WITHOUT_CLASSIFICATION	0.9998926608630323	WITHOUT_CLASSIFICATION	1.0733913696763997E-4	DESIGN
current stack len = 0	WITHOUT_CLASSIFICATION	0.9999907029029467	WITHOUT_CLASSIFICATION	9.297097053213023E-6	DESIGN
current stack len = 0	WITHOUT_CLASSIFICATION	0.9999907029029467	WITHOUT_CLASSIFICATION	9.297097053213023E-6	DESIGN
local variables | target obj | each oldvalue |	WITHOUT_CLASSIFICATION	0.999997862736077	WITHOUT_CLASSIFICATION	2.1372639230089785E-6	DESIGN
invokeinterface invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9998019863546093	WITHOUT_CLASSIFICATION	1.9801364539068838E-4	DESIGN
putfield new value of the field	WITHOUT_CLASSIFICATION	0.9999172393581288	WITHOUT_CLASSIFICATION	8.276064187116446E-5	DESIGN
reference type	WITHOUT_CLASSIFICATION	0.9994316730078304	WITHOUT_CLASSIFICATION	5.683269921695584E-4	DESIGN
double	WITHOUT_CLASSIFICATION	0.9999670868664599	WITHOUT_CLASSIFICATION	3.2913133540199116E-5	DESIGN
double	WITHOUT_CLASSIFICATION	0.9999670868664599	WITHOUT_CLASSIFICATION	3.2913133540199116E-5	DESIGN
long	WITHOUT_CLASSIFICATION	0.9996526760779286	WITHOUT_CLASSIFICATION	3.473239220713791E-4	DESIGN
just decrement the lock, don't recache (we don't know which transaction won)	WITHOUT_CLASSIFICATION	0.9998091916685101	WITHOUT_CLASSIFICATION	1.9080833148986737E-4	DESIGN
decode row selection...	WITHOUT_CLASSIFICATION	0.9996878850733256	WITHOUT_CLASSIFICATION	3.1211492667442757E-4	DESIGN
disassembled state gets put in a new array (we write to cache by value!)	WITHOUT_CLASSIFICATION	0.9955115304928484	WITHOUT_CLASSIFICATION	0.00448846950715155	DESIGN
again, CCS did not have such a concept; but a reasonable proximity is to clear the cache after transaction as long as the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999509483907802	WITHOUT_CLASSIFICATION	4.905160921980931E-5	DESIGN
CHECK	WITHOUT_CLASSIFICATION	0.999653062776008	WITHOUT_CLASSIFICATION	3.469372239919905E-4	DESIGN
ROW ID	WITHOUT_CLASSIFICATION	0.9996789689966625	WITHOUT_CLASSIFICATION	3.210310033374746E-4	DESIGN
COMPOSITE-ID	WITHOUT_CLASSIFICATION	0.9995868833392739	WITHOUT_CLASSIFICATION	4.131166607260134E-4	DESIGN
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9995868833392739	WITHOUT_CLASSIFICATION	4.131166607260134E-4	DESIGN
Property prop = new Property(); prop.setName("id"); prop.setPropertyAccessorName("embedded"); prop.setValue(id); entity.setIdentifierProperty(prop);	WITHOUT_CLASSIFICATION	0.9999447746302704	WITHOUT_CLASSIFICATION	5.52253697294189E-5	DESIGN
DYNAMIC INSERT	WITHOUT_CLASSIFICATION	0.999602017671461	WITHOUT_CLASSIFICATION	3.9798232853908424E-4	DESIGN
PERSISTER	WITHOUT_CLASSIFICATION	0.999627030731016	WITHOUT_CLASSIFICATION	3.7296926898392813E-4	DESIGN
get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9985937047313936	WITHOUT_CLASSIFICATION	0.0014062952686063818	DESIGN
PROPERTIES	WITHOUT_CLASSIFICATION	0.9996296621890747	WITHOUT_CLASSIFICATION	3.70337810925392E-4	DESIGN
PROPERTIES	WITHOUT_CLASSIFICATION	0.9996296621890747	WITHOUT_CLASSIFICATION	3.70337810925392E-4	DESIGN
generated properties can never be insertable...	WITHOUT_CLASSIFICATION	0.999802501574905	WITHOUT_CLASSIFICATION	1.9749842509504282E-4	DESIGN
TABLE	WITHOUT_CLASSIFICATION	0.9997478877943696	WITHOUT_CLASSIFICATION	2.521122056303878E-4	DESIGN
by default, natural-ids are "immutable" (constant)	WITHOUT_CLASSIFICATION	0.9999112465874882	WITHOUT_CLASSIFICATION	8.875341251188093E-5	DESIGN
( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9979386372204615	WITHOUT_CLASSIFICATION	0.002061362779538526	DESIGN
we found some extends attributes referencing entities which were not already processed. here we need to locate all entity-names and class-names contained in this document itself, making sure that these get removed from the extendz list such that only extends names which require us to delay processing (i.e. external to this document and not yet processed) are contained in the returned result	WITHOUT_CLASSIFICATION	0.6785639912067253	DESIGN	0.3214360087932748	WITHOUT_CLASSIFICATION
Build a ResultSetMappingDefinition given a containing element for the "return-XXX" elements @param resultSetElem The element containing the return definitions. @param path No clue... @param mappings The current processing state. @return The description of the mappings...	WITHOUT_CLASSIFICATION	0.9999816483354056	WITHOUT_CLASSIFICATION	1.8351664594448075E-5	DESIGN
private boolean showSql; private boolean formatSql;	WITHOUT_CLASSIFICATION	0.9990782184891644	WITHOUT_CLASSIFICATION	9.217815108356212E-4	DESIGN
public boolean isShowSqlEnabled() { return showSql; } public boolean isFormatSqlEnabled() { return formatSql; }	WITHOUT_CLASSIFICATION	0.9993738884334018	WITHOUT_CLASSIFICATION	6.261115665982242E-4	DESIGN
Set a custom entity resolver. This entity resolver must be set before addXXX(misc) call. Default value is {@link org.hibernate.util.DTDEntityResolver} @param entityResolver entity resolver to use	WITHOUT_CLASSIFICATION	0.9991135829036204	WITHOUT_CLASSIFICATION	8.864170963795617E-4	DESIGN
final List extendsQueue,	WITHOUT_CLASSIFICATION	0.9999467814403777	WITHOUT_CLASSIFICATION	5.321855962238533E-5	DESIGN
If close() is called, guarantee unbind()	WITHOUT_CLASSIFICATION	0.9999662272905195	WITHOUT_CLASSIFICATION	3.3772709480359995E-5	DESIGN
if a ThreadLocalSessionContext-bound session happens to get serialized, to be completely correct, we need to make sure that unbinding of that session occurs.	WITHOUT_CLASSIFICATION	0.9704695178711815	WITHOUT_CLASSIFICATION	0.029530482128818543	DESIGN
on the inverse, it makes sense that if a ThreadLocalSessionContext- bound session then gets deserialized to go ahead and re-bind it to the ThreadLocalSessionContext session map.	WITHOUT_CLASSIFICATION	0.9608443634831353	WITHOUT_CLASSIFICATION	0.03915563651686472	DESIGN
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9996777715456873	WITHOUT_CLASSIFICATION	3.2222845431268234E-4	DESIGN
60 second lock timeout	WITHOUT_CLASSIFICATION	0.9995360677427751	WITHOUT_CLASSIFICATION	4.6393225722482674E-4	DESIGN
OptimisticCache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999610254461945	WITHOUT_CLASSIFICATION	3.897455380550675E-4	DESIGN
Cache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997621528070976	WITHOUT_CLASSIFICATION	2.3784719290251806E-4	DESIGN
option.setDataVersion( NonLockingDataVersion.INSTANCE );	WITHOUT_CLASSIFICATION	0.9997045391190248	WITHOUT_CLASSIFICATION	2.954608809752574E-4	DESIGN
do the put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9989244886228807	WITHOUT_CLASSIFICATION	0.001075511377119256	DESIGN
ignore!	WITHOUT_CLASSIFICATION	0.999627030731016	WITHOUT_CLASSIFICATION	3.7296926898392813E-4	DESIGN
tree cache in optimistic mode seems to have as very difficult time with remove calls on non-existent nodes (NPEs)...	WITHOUT_CLASSIFICATION	0.8476356460244426	WITHOUT_CLASSIFICATION	0.1523643539755574	DESIGN
60 seconds	WITHOUT_CLASSIFICATION	0.9996758802279936	WITHOUT_CLASSIFICATION	3.2411977200643517E-4	DESIGN
ignore!	WITHOUT_CLASSIFICATION	0.999627030731016	WITHOUT_CLASSIFICATION	3.7296926898392813E-4	DESIGN
60 seconds	WITHOUT_CLASSIFICATION	0.9996758802279936	WITHOUT_CLASSIFICATION	3.2411977200643517E-4	DESIGN
do the failfast put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9989244886228807	WITHOUT_CLASSIFICATION	0.001075511377119256	DESIGN
NOTE : evict() operates locally only (i.e., does not propogate to any other nodes in the potential cluster). This is exactly what is needed when we destroy() here; destroy() is used as part of the process of shutting down a SessionFactory; thus these removals should not be propogated	WITHOUT_CLASSIFICATION	0.999064376602731	DESIGN	9.356233972690048E-4	WITHOUT_CLASSIFICATION
protected RegionRootListener listener;	WITHOUT_CLASSIFICATION	0.9984048377620389	WITHOUT_CLASSIFICATION	0.0015951622379611417	DESIGN
Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999499016717694	WITHOUT_CLASSIFICATION	5.009832823058444E-5	DESIGN
If we've been blocking for the mutex, perhaps another thread has already reestablished the root. In case the node was reestablised via replication, confirm it's marked "resident" (a status which doesn't replicate)	WITHOUT_CLASSIFICATION	0.9999974524170934	WITHOUT_CLASSIFICATION	2.5475829065674833E-6	DESIGN
For pessimistic locking, we just want to toss out our ref to any old invalid root node and get the latest (may be null)	WITHOUT_CLASSIFICATION	0.9999700157158763	WITHOUT_CLASSIFICATION	2.9984284123600243E-5	DESIGN
The rest only matters for optimistic locking, where we need to establish the proper data version on the region root	WITHOUT_CLASSIFICATION	0.9998561839449306	WITHOUT_CLASSIFICATION	1.4381605506944925E-4	DESIGN
Don't hold a transactional lock for this	WITHOUT_CLASSIFICATION	0.9882773740052577	WITHOUT_CLASSIFICATION	0.011722625994742388	DESIGN
Make sure the root node for the region exists and has a DataVersion that never complains	WITHOUT_CLASSIFICATION	0.9999725583186756	WITHOUT_CLASSIFICATION	2.744168132432015E-5	DESIGN
Never evict this node	WITHOUT_CLASSIFICATION	0.9987371145407863	WITHOUT_CLASSIFICATION	0.001262885459213797	DESIGN
Fix up the resident flag	WITHOUT_CLASSIFICATION	0.9954572659823389	WITHOUT_CLASSIFICATION	0.0045427340176612	DESIGN
60 seconds	WITHOUT_CLASSIFICATION	0.9996758802279936	WITHOUT_CLASSIFICATION	3.2411977200643517E-4	DESIGN
We ignore minimalPutOverride. JBossCache putForExternalRead is already about as minimal as we can get; it will promptly return if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999932910126668	WITHOUT_CLASSIFICATION	6.708987333151233E-6	DESIGN
no-op. We don't own the cache so we shouldn't stop it.	WITHOUT_CLASSIFICATION	0.9879461908809049	WITHOUT_CLASSIFICATION	0.01205380911909506	DESIGN
This should only be possible if the caches are constructor injected	WITHOUT_CLASSIFICATION	0.976345400697097	WITHOUT_CLASSIFICATION	0.023654599302903014	DESIGN
We only build caches if none were passed in. Passing in caches counts as a clear statement of exactly what is wanted	WITHOUT_CLASSIFICATION	0.9992818598163175	WITHOUT_CLASSIFICATION	7.181401836825877E-4	DESIGN
Set up the cache factory	WITHOUT_CLASSIFICATION	0.9981578450665434	WITHOUT_CLASSIFICATION	0.0018421549334566383	DESIGN
See if the user configured a multiplexer stack	WITHOUT_CLASSIFICATION	0.9999810203426018	WITHOUT_CLASSIFICATION	1.8979657398181433E-5	DESIGN
Default to collections sharing entity cache if there is one	WITHOUT_CLASSIFICATION	0.9998061149495797	WITHOUT_CLASSIFICATION	1.938850504202698E-4	DESIGN
Default to sharing the entity cache if there is one	WITHOUT_CLASSIFICATION	0.9998666855784324	WITHOUT_CLASSIFICATION	1.3331442156751122E-4	DESIGN
For Timestamps, we default to a separate config	WITHOUT_CLASSIFICATION	0.9987298311137206	WITHOUT_CLASSIFICATION	0.0012701688862793825	DESIGN
We can't change the TM on a running cache; just check if the cache has no TM and we're OK with that	WITHOUT_CLASSIFICATION	0.9999970501459253	WITHOUT_CLASSIFICATION	2.949854074553755E-6	DESIGN
Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9986653124961967	WITHOUT_CLASSIFICATION	0.0013346875038032406	DESIGN
Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9993210655243847	WITHOUT_CLASSIFICATION	6.78934475615235E-4	DESIGN
This method should be implemented assuming it's valid to do start/stop/start -- leave state appropriate for another start	WITHOUT_CLASSIFICATION	0.5699182312976736	WITHOUT_CLASSIFICATION	0.4300817687023264	DESIGN
Make sure we don't re-release the same cache	WITHOUT_CLASSIFICATION	0.9933948966786063	WITHOUT_CLASSIFICATION	0.006605103321393778	DESIGN
We use a different delegate than the non-optimistic superclass default	WITHOUT_CLASSIFICATION	0.9996084663340901	WITHOUT_CLASSIFICATION	3.915336659099338E-4	DESIGN
Following methods we don't delegate since they have so little logic it's clearer to just implement them here	WITHOUT_CLASSIFICATION	0.9524700980007763	WITHOUT_CLASSIFICATION	0.04752990199922364	DESIGN
If JBC is using INVALIDATION, we don't want to propagate changes. We use the Timestamps cache to manage invalidation	WITHOUT_CLASSIFICATION	0.9979807792537605	WITHOUT_CLASSIFICATION	0.002019220746239515	DESIGN
We don't want to waste effort setting an option if JBC is already in LOCAL mode. If JBC is REPL_(A)SYNC then check if they passed an config option to disable query replication	WITHOUT_CLASSIFICATION	0.999998695035585	WITHOUT_CLASSIFICATION	1.3049644150136571E-6	DESIGN
Don't hold the JBC node lock throughout the tx, as that prevents updates Add a zero (or low) timeout option so we don't block waiting for tx's that did a put to commit	WITHOUT_CLASSIFICATION	0.9999998547878785	WITHOUT_CLASSIFICATION	1.4521212148369658E-7	DESIGN
Double check the distributed cache	WITHOUT_CLASSIFICATION	0.9999819666726459	WITHOUT_CLASSIFICATION	1.803332735409917E-5	DESIGN
Get an exclusive right to update JBC for this key from this node.	WITHOUT_CLASSIFICATION	0.9996680784772946	WITHOUT_CLASSIFICATION	3.319215227054903E-4	DESIGN
We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9995752888959348	WITHOUT_CLASSIFICATION	4.247111040652373E-4	DESIGN
Initial load from JBC	WITHOUT_CLASSIFICATION	0.9979475466840407	WITHOUT_CLASSIFICATION	0.002052453315959158	DESIGN
See if we had a 2nd invalidation from the same initial preinvalidation timestamp. If so, only increment if the new current value is an increase	WITHOUT_CLASSIFICATION	0.9999997310254707	WITHOUT_CLASSIFICATION	2.6897452923295055E-7	DESIGN
We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9995752888959348	WITHOUT_CLASSIFICATION	4.247111040652373E-4	DESIGN
If the workspace node has null as well, OK; if not we've been modified in a non-comparable manner, which we have to treat as us being newer	WITHOUT_CLASSIFICATION	0.9999976497544183	WITHOUT_CLASSIFICATION	2.350245581743462E-6	DESIGN
The standard comparator types are not Serializable but are singletons	WITHOUT_CLASSIFICATION	0.9998571425914345	WITHOUT_CLASSIFICATION	1.42857408565513E-4	DESIGN
ignore!	WITHOUT_CLASSIFICATION	0.999627030731016	WITHOUT_CLASSIFICATION	3.7296926898392813E-4	DESIGN
ignore it	WITHOUT_CLASSIFICATION	0.9998666999599168	WITHOUT_CLASSIFICATION	1.3330004008314935E-4	DESIGN
construct the cache	WITHOUT_CLASSIFICATION	0.9995760048482137	WITHOUT_CLASSIFICATION	4.239951517863065E-4	DESIGN
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9990144442303278	WITHOUT_CLASSIFICATION	9.855557696721326E-4	DESIGN
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9990144442303278	WITHOUT_CLASSIFICATION	9.855557696721326E-4	DESIGN
ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9996409892359261	WITHOUT_CLASSIFICATION	3.5901076407379956E-4	DESIGN
swaldman 2006-08-28: define c3p0-style configuration parameters for initialPoolSize, which hibernate sensibly lets default to minPoolSize, but we'll let users override it with the c3p0-style property if they want.	WITHOUT_CLASSIFICATION	0.9998480799108862	WITHOUT_CLASSIFICATION	1.5192008911381975E-4	DESIGN
DataSource unpooled = DataSources.unpooledDataSource(jdbcUrl, props.getProperty(Environment.USER), props.getProperty(Environment.PASS));	WITHOUT_CLASSIFICATION	0.9998078433126535	WITHOUT_CLASSIFICATION	1.921566873464568E-4	DESIGN
TRUE if the pool is borrowed from the outside, FALSE if we used to create it	WITHOUT_CLASSIFICATION	0.516031702872924	DESIGN	0.483968297127076	WITHOUT_CLASSIFICATION
get a connection from the pool (thru DriverManager, cfr. Proxool doc)	WITHOUT_CLASSIFICATION	0.9988026424576967	WITHOUT_CLASSIFICATION	0.0011973575423034166	DESIGN
set the Transaction Isolation if defined	WITHOUT_CLASSIFICATION	0.9998867174845386	WITHOUT_CLASSIFICATION	1.1328251546146063E-4	DESIGN
toggle autoCommit to false if set	WITHOUT_CLASSIFICATION	0.9998235415946028	WITHOUT_CLASSIFICATION	1.7645840539714922E-4	DESIGN
return the connection	WITHOUT_CLASSIFICATION	0.999068359067961	WITHOUT_CLASSIFICATION	9.316409320390712E-4	DESIGN
Get the configurator files (if available)	WITHOUT_CLASSIFICATION	0.999987578151796	WITHOUT_CLASSIFICATION	1.2421848204065722E-5	DESIGN
Default the Proxool alias setting	WITHOUT_CLASSIFICATION	0.9999972971244862	WITHOUT_CLASSIFICATION	2.7028755139662414E-6	DESIGN
Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999701223467875	WITHOUT_CLASSIFICATION	2.9877653212434056E-5	DESIGN
Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999701223467875	WITHOUT_CLASSIFICATION	2.9877653212434056E-5	DESIGN
Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999855525667088	WITHOUT_CLASSIFICATION	1.4447433291078885E-5	DESIGN
Set the existing pool flag to true	WITHOUT_CLASSIFICATION	0.9998038789138747	WITHOUT_CLASSIFICATION	1.961210861254568E-4	DESIGN
Configured using the JAXP Configurator	WITHOUT_CLASSIFICATION	0.9998503239178239	WITHOUT_CLASSIFICATION	1.4967608217603348E-4	DESIGN
Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999701223467875	WITHOUT_CLASSIFICATION	2.9877653212434056E-5	DESIGN
Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999855525667088	WITHOUT_CLASSIFICATION	1.4447433291078885E-5	DESIGN
Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999855525667088	WITHOUT_CLASSIFICATION	1.4447433291078885E-5	DESIGN
Configured using the Properties File Configurator	WITHOUT_CLASSIFICATION	0.9999200605217141	WITHOUT_CLASSIFICATION	7.993947828578253E-5	DESIGN
Remember Isolation level	WITHOUT_CLASSIFICATION	0.9368354411554877	WITHOUT_CLASSIFICATION	0.06316455884451226	DESIGN
If the provider was leeching off an existing pool don't close it	WITHOUT_CLASSIFICATION	0.999999819984104	WITHOUT_CLASSIFICATION	1.8001589605470428E-7	DESIGN
We have created the pool ourselves, so shut it down	WITHOUT_CLASSIFICATION	0.9999879512089986	WITHOUT_CLASSIFICATION	1.2048791001307976E-5	DESIGN
not really a many-to-one association necessarily	WITHOUT_CLASSIFICATION	0.9875650345114436	WITHOUT_CLASSIFICATION	0.012434965488556512	DESIGN
not really a many-to-one association necessarily	WITHOUT_CLASSIFICATION	0.9875650345114436	WITHOUT_CLASSIFICATION	0.012434965488556512	DESIGN
always overwrite nonversioned data	WITHOUT_CLASSIFICATION	0.9999318434322829	WITHOUT_CLASSIFICATION	6.815656771701357E-5	DESIGN
public Currency getCurrency(int col) throws HibernateException;	WITHOUT_CLASSIFICATION	0.998969777305717	WITHOUT_CLASSIFICATION	0.0010302226942830088	DESIGN
default is POJO	WITHOUT_CLASSIFICATION	0.9997548519830669	WITHOUT_CLASSIFICATION	2.4514801693305163E-4	DESIGN
use setParameter for null values	WITHOUT_CLASSIFICATION	0.9995170687639117	WITHOUT_CLASSIFICATION	4.829312360882113E-4	DESIGN
use setParameter for null values	WITHOUT_CLASSIFICATION	0.9995170687639117	WITHOUT_CLASSIFICATION	4.829312360882113E-4	DESIGN
private CacheEntry cacheEntry;	WITHOUT_CLASSIFICATION	0.9935334450727898	WITHOUT_CLASSIFICATION	0.006466554927210228	DESIGN
Don't need to lock the cache here, since if someone else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9999949483864388	WITHOUT_CLASSIFICATION	5.05161356129831E-6	DESIGN
Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.998585981759605	WITHOUT_CLASSIFICATION	0.0014140182403950179	DESIGN
get the updated snapshot of the entity state by cloning current state; it is safe to copy in place, since by this time no-one else (should have) has a reference to the array	WITHOUT_CLASSIFICATION	0.9999911035060469	WITHOUT_CLASSIFICATION	8.896493953076645E-6	DESIGN
this entity defines proeprty generation, so process those generated values...	WITHOUT_CLASSIFICATION	0.9995943215379637	WITHOUT_CLASSIFICATION	4.056784620363352E-4	DESIGN
have the entity entry perform post-update processing, passing it the update state and the new version (if one).	WITHOUT_CLASSIFICATION	0.999872571346071	WITHOUT_CLASSIFICATION	1.2742865392908047E-4	DESIGN
!persister.isCacheInvalidationRequired()	WITHOUT_CLASSIFICATION	0.9994515852581775	WITHOUT_CLASSIFICATION	5.484147418224609E-4	DESIGN
need to look it up from the persistence-context	WITHOUT_CLASSIFICATION	0.9991484540956642	WITHOUT_CLASSIFICATION	8.515459043358486E-4	DESIGN
sort first by role name	WITHOUT_CLASSIFICATION	0.9990621636336459	WITHOUT_CLASSIFICATION	9.378363663540403E-4	DESIGN
Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.998585981759605	WITHOUT_CLASSIFICATION	0.0014140182403950179	DESIGN
then by fk	WITHOUT_CLASSIFICATION	0.9997297998292847	WITHOUT_CLASSIFICATION	2.702001707152481E-4	DESIGN
nothing to do	WITHOUT_CLASSIFICATION	0.9996094199404136	WITHOUT_CLASSIFICATION	3.905800595863351E-4	DESIGN
nothing to do	WITHOUT_CLASSIFICATION	0.9996094199404136	WITHOUT_CLASSIFICATION	3.905800595863351E-4	DESIGN
an existing collection that was either non-empty or uninitialized is replaced by null or a different collection (if the collection is uninitialized, hibernate has no way of knowing if the collection is actually empty without querying the db)	WITHOUT_CLASSIFICATION	0.9995719295772095	WITHOUT_CLASSIFICATION	4.2807042279051653E-4	DESIGN
this method is called when a new non-null collection is persisted or when an existing (non-null) collection is moved to a new owner	WITHOUT_CLASSIFICATION	0.9952173554018233	WITHOUT_CLASSIFICATION	0.004782644598176722	DESIGN
boolean put = persister.getCache().insert(ck, cacheEntry);	WITHOUT_CLASSIFICATION	0.9998563538492988	WITHOUT_CLASSIFICATION	1.436461507011381E-4	DESIGN
we need to grab the version value from the entity, otherwise we have issues with generated-version entities that may have multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9967363570763594	WITHOUT_CLASSIFICATION	0.003263642923640552	DESIGN
do nothing - we only need to notify the cache...	WITHOUT_CLASSIFICATION	0.9958004564180425	WITHOUT_CLASSIFICATION	0.004199543581957506	DESIGN
sort first by entity name	WITHOUT_CLASSIFICATION	0.9979816836135694	WITHOUT_CLASSIFICATION	0.0020183163864305074	DESIGN
then by id	WITHOUT_CLASSIFICATION	0.9995400189884949	WITHOUT_CLASSIFICATION	4.599810115051499E-4	DESIGN
to be safe...	WITHOUT_CLASSIFICATION	0.9991302428657266	WITHOUT_CLASSIFICATION	8.69757134273312E-4	DESIGN
no transformations took place, so handle it as we would a non-instrumented class	WITHOUT_CLASSIFICATION	0.9992919246071545	WITHOUT_CLASSIFICATION	7.080753928454766E-4	DESIGN
see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999460480057794	WITHOUT_CLASSIFICATION	5.395199422063848E-5	DESIGN
see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999460480057794	WITHOUT_CLASSIFICATION	5.395199422063848E-5	DESIGN
intentionally empty	WITHOUT_CLASSIFICATION	0.9996279301531421	WITHOUT_CLASSIFICATION	3.72069846857864E-4	DESIGN
test out the optimizer:	WITHOUT_CLASSIFICATION	0.9999553422349154	WITHOUT_CLASSIFICATION	4.4657765084511685E-5	DESIGN
set the name of bulk accessor.	WITHOUT_CLASSIFICATION	0.9991541460235779	WITHOUT_CLASSIFICATION	8.458539764220518E-4	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.999627030731016	WITHOUT_CLASSIFICATION	3.7296926898392813E-4	DESIGN
invokespecial	WITHOUT_CLASSIFICATION	0.9995868833392739	WITHOUT_CLASSIFICATION	4.131166607260134E-4	DESIGN
return	WITHOUT_CLASSIFICATION	0.9996808147877507	WITHOUT_CLASSIFICATION	3.1918521224933176E-4	DESIGN
aload_1 load bean	WITHOUT_CLASSIFICATION	0.9994646513480087	WITHOUT_CLASSIFICATION	5.353486519913719E-4	DESIGN
checkcast cast bean	WITHOUT_CLASSIFICATION	0.9979746688488477	WITHOUT_CLASSIFICATION	0.0020253311511523246	DESIGN
astore_3 store bean	WITHOUT_CLASSIFICATION	0.9998923109071156	WITHOUT_CLASSIFICATION	1.0768909288435944E-4	DESIGN
aload_2 args	WITHOUT_CLASSIFICATION	0.9994631354605834	WITHOUT_CLASSIFICATION	5.368645394166536E-4	DESIGN
iconst_i continue to aastore growing stack is 1	WITHOUT_CLASSIFICATION	0.9999013107961786	WITHOUT_CLASSIFICATION	9.868920382130862E-5	DESIGN
new	WITHOUT_CLASSIFICATION	0.9997532222016747	WITHOUT_CLASSIFICATION	2.467777983251979E-4	DESIGN
dup	WITHOUT_CLASSIFICATION	0.9996973788236303	WITHOUT_CLASSIFICATION	3.026211763697526E-4	DESIGN
aload_3 load the raw bean	WITHOUT_CLASSIFICATION	0.9996417126628415	WITHOUT_CLASSIFICATION	3.5828733715855145E-4	DESIGN
invokeinterface	WITHOUT_CLASSIFICATION	0.9995868833392739	WITHOUT_CLASSIFICATION	4.131166607260134E-4	DESIGN
invokevirtual	WITHOUT_CLASSIFICATION	0.9995868833392739	WITHOUT_CLASSIFICATION	4.131166607260134E-4	DESIGN
invokevirtual	WITHOUT_CLASSIFICATION	0.9995868833392739	WITHOUT_CLASSIFICATION	4.131166607260134E-4	DESIGN
aastore args	WITHOUT_CLASSIFICATION	0.9994631354605834	WITHOUT_CLASSIFICATION	5.368645394166536E-4	DESIGN
| this | bean | args | i | raw bean | exception |	WITHOUT_CLASSIFICATION	0.999045067240508	WITHOUT_CLASSIFICATION	9.549327594921387E-4	DESIGN
required to exception table iconst_0 i	WITHOUT_CLASSIFICATION	0.9996467788471803	WITHOUT_CLASSIFICATION	3.532211528195788E-4	DESIGN
istore_3 store i	WITHOUT_CLASSIFICATION	0.9998882792119854	WITHOUT_CLASSIFICATION	1.1172078801456577E-4	DESIGN
aload_1 load the bean	WITHOUT_CLASSIFICATION	0.999302650736058	WITHOUT_CLASSIFICATION	6.973492639420271E-4	DESIGN
checkcast cast the bean into a raw bean	WITHOUT_CLASSIFICATION	0.9963227779572353	WITHOUT_CLASSIFICATION	0.003677222042764712	DESIGN
current stack len = 0	WITHOUT_CLASSIFICATION	0.9999907029029467	WITHOUT_CLASSIFICATION	9.297097053213023E-6	DESIGN
start region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9969312269776881	WITHOUT_CLASSIFICATION	0.003068773022311814	DESIGN
iinc 3, 1	WITHOUT_CLASSIFICATION	0.9998392167970863	WITHOUT_CLASSIFICATION	1.60783202913733E-4	DESIGN
aload 4 load the raw bean	WITHOUT_CLASSIFICATION	0.9994663903222498	WITHOUT_CLASSIFICATION	5.3360967775018E-4	DESIGN
aload_2 load the args	WITHOUT_CLASSIFICATION	0.9994599428185406	WITHOUT_CLASSIFICATION	5.400571814594672E-4	DESIGN
iconst_i	WITHOUT_CLASSIFICATION	0.999627030731016	WITHOUT_CLASSIFICATION	3.7296926898392813E-4	DESIGN
aaload	WITHOUT_CLASSIFICATION	0.999627030731016	WITHOUT_CLASSIFICATION	3.7296926898392813E-4	DESIGN
checkcast	WITHOUT_CLASSIFICATION	0.9996272705189575	WITHOUT_CLASSIFICATION	3.727294810424302E-4	DESIGN
checkcast (case of primitive type) invokevirtual (case of primitive type)	WITHOUT_CLASSIFICATION	0.9996536433839754	WITHOUT_CLASSIFICATION	3.463566160245452E-4	DESIGN
checkcast (case of reference type)	WITHOUT_CLASSIFICATION	0.999680853748034	WITHOUT_CLASSIFICATION	3.191462519659912E-4	DESIGN
current stack len = 2	WITHOUT_CLASSIFICATION	0.9999863830992836	WITHOUT_CLASSIFICATION	1.3616900716370163E-5	DESIGN
end region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9958744058262066	WITHOUT_CLASSIFICATION	0.0041255941737934195	DESIGN
register in exception table	WITHOUT_CLASSIFICATION	0.9994722122822379	WITHOUT_CLASSIFICATION	5.277877177621349E-4	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.999627030731016	WITHOUT_CLASSIFICATION	3.7296926898392813E-4	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.999627030731016	WITHOUT_CLASSIFICATION	3.7296926898392813E-4	DESIGN
return	WITHOUT_CLASSIFICATION	0.9996808147877507	WITHOUT_CLASSIFICATION	3.1918521224933176E-4	DESIGN
return	WITHOUT_CLASSIFICATION	0.9996808147877507	WITHOUT_CLASSIFICATION	3.1918521224933176E-4	DESIGN
dup	WITHOUT_CLASSIFICATION	0.9996973788236303	WITHOUT_CLASSIFICATION	3.026211763697526E-4	DESIGN
invokevirtual	WITHOUT_CLASSIFICATION	0.9995868833392739	WITHOUT_CLASSIFICATION	4.131166607260134E-4	DESIGN
checkcast	WITHOUT_CLASSIFICATION	0.9996272705189575	WITHOUT_CLASSIFICATION	3.727294810424302E-4	DESIGN
local variables | target obj | each oldvalue |	WITHOUT_CLASSIFICATION	0.999997862736077	WITHOUT_CLASSIFICATION	2.1372639230089785E-6	DESIGN
astore 5 store exception	WITHOUT_CLASSIFICATION	0.9998780064230508	WITHOUT_CLASSIFICATION	1.2199357694915403E-4	DESIGN
new BulkAccessorException	WITHOUT_CLASSIFICATION	0.9993454551257969	WITHOUT_CLASSIFICATION	6.545448742030987E-4	DESIGN
aload 5 load exception	WITHOUT_CLASSIFICATION	0.9993935747340162	WITHOUT_CLASSIFICATION	6.064252659837049E-4	DESIGN
iload_3 i	WITHOUT_CLASSIFICATION	0.9993507054814806	WITHOUT_CLASSIFICATION	6.492945185194444E-4	DESIGN
invokespecial BulkAccessorException.<init>	WITHOUT_CLASSIFICATION	0.9994515852581775	WITHOUT_CLASSIFICATION	5.484147418224609E-4	DESIGN
athrow	WITHOUT_CLASSIFICATION	0.999627030731016	WITHOUT_CLASSIFICATION	3.7296926898392813E-4	DESIGN
WARNING: classfile only	WITHOUT_CLASSIFICATION	0.9997225313996922	WITHOUT_CLASSIFICATION	2.774686003077604E-4	DESIGN
swallow	WITHOUT_CLASSIFICATION	0.9996794827759753	WITHOUT_CLASSIFICATION	3.2051722402465135E-4	DESIGN
local variable | this |	WITHOUT_CLASSIFICATION	0.998666593143542	WITHOUT_CLASSIFICATION	0.0013334068564580452	DESIGN
aload_0 load this	WITHOUT_CLASSIFICATION	0.9982120984195032	WITHOUT_CLASSIFICATION	0.0017879015804967914	DESIGN
aload_0 load this	WITHOUT_CLASSIFICATION	0.9982120984195032	WITHOUT_CLASSIFICATION	0.0017879015804967914	DESIGN
getfield get field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9994519747059294	WITHOUT_CLASSIFICATION	5.480252940705902E-4	DESIGN
areturn return the value of the field	WITHOUT_CLASSIFICATION	0.9998929512911966	WITHOUT_CLASSIFICATION	1.0704870880331816E-4	DESIGN
local variables | this | callback |	WITHOUT_CLASSIFICATION	0.9994259634720972	WITHOUT_CLASSIFICATION	5.740365279027596E-4	DESIGN
aload_1 load callback	WITHOUT_CLASSIFICATION	0.9990085812134952	WITHOUT_CLASSIFICATION	9.914187865047593E-4	DESIGN
putfield put field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9991169531996547	WITHOUT_CLASSIFICATION	8.830468003453283E-4	DESIGN
case of non-static field	WITHOUT_CLASSIFICATION	0.9998554444195437	WITHOUT_CLASSIFICATION	1.4455558045623157E-4	DESIGN
getfield get each field	WITHOUT_CLASSIFICATION	0.9994372368842718	WITHOUT_CLASSIFICATION	5.627631157283249E-4	DESIGN
invokeinterface invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9998019863546093	WITHOUT_CLASSIFICATION	1.9801364539068838E-4	DESIGN
ifnonnull	WITHOUT_CLASSIFICATION	0.999627030731016	WITHOUT_CLASSIFICATION	3.7296926898392813E-4	DESIGN
return each type	WITHOUT_CLASSIFICATION	0.9996265765811538	WITHOUT_CLASSIFICATION	3.734234188460969E-4	DESIGN
return each type	WITHOUT_CLASSIFICATION	0.9996265765811538	WITHOUT_CLASSIFICATION	3.734234188460969E-4	DESIGN
store_1 each type	WITHOUT_CLASSIFICATION	0.9995636571466368	WITHOUT_CLASSIFICATION	4.3634285336315904E-4	DESIGN
ldc name of the field	WITHOUT_CLASSIFICATION	0.9993885778893201	WITHOUT_CLASSIFICATION	6.114221106798498E-4	DESIGN
load_1 each type	WITHOUT_CLASSIFICATION	0.9995636571466368	WITHOUT_CLASSIFICATION	4.3634285336315904E-4	DESIGN
invokeinterface invoke Callback.read() each type	WITHOUT_CLASSIFICATION	0.9997908511261022	WITHOUT_CLASSIFICATION	2.0914887389781523E-4	DESIGN
int	WITHOUT_CLASSIFICATION	0.9998205814054255	WITHOUT_CLASSIFICATION	1.7941859457451206E-4	DESIGN
return	WITHOUT_CLASSIFICATION	0.9996808147877507	WITHOUT_CLASSIFICATION	3.1918521224933176E-4	DESIGN
dup	WITHOUT_CLASSIFICATION	0.9996973788236303	WITHOUT_CLASSIFICATION	3.026211763697526E-4	DESIGN
invokeinterface	WITHOUT_CLASSIFICATION	0.9995868833392739	WITHOUT_CLASSIFICATION	4.131166607260134E-4	DESIGN
checkcast	WITHOUT_CLASSIFICATION	0.9996272705189575	WITHOUT_CLASSIFICATION	3.727294810424302E-4	DESIGN
checkcast	WITHOUT_CLASSIFICATION	0.9996272705189575	WITHOUT_CLASSIFICATION	3.727294810424302E-4	DESIGN
invokeinterface enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9994515852581775	WITHOUT_CLASSIFICATION	5.484147418224609E-4	DESIGN
invokeinterface enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9994515852581775	WITHOUT_CLASSIFICATION	5.484147418224609E-4	DESIGN
ifnonnull (label1)	WITHOUT_CLASSIFICATION	0.9995868833392739	WITHOUT_CLASSIFICATION	4.131166607260134E-4	DESIGN
load_1	WITHOUT_CLASSIFICATION	0.999627030731016	WITHOUT_CLASSIFICATION	3.7296926898392813E-4	DESIGN
load_1	WITHOUT_CLASSIFICATION	0.999627030731016	WITHOUT_CLASSIFICATION	3.7296926898392813E-4	DESIGN
putfield	WITHOUT_CLASSIFICATION	0.999627030731016	WITHOUT_CLASSIFICATION	3.7296926898392813E-4	DESIGN
return ;	WITHOUT_CLASSIFICATION	0.999693279078256	WITHOUT_CLASSIFICATION	3.06720921743994E-4	DESIGN
ldc field name	WITHOUT_CLASSIFICATION	0.9994431437578661	WITHOUT_CLASSIFICATION	5.56856242133886E-4	DESIGN
getfield old value of the field	WITHOUT_CLASSIFICATION	0.9999307041072305	WITHOUT_CLASSIFICATION	6.929589276945853E-5	DESIGN
invokeinterface callback.write(..)	WITHOUT_CLASSIFICATION	0.9994515852581775	WITHOUT_CLASSIFICATION	5.484147418224609E-4	DESIGN
reference type	WITHOUT_CLASSIFICATION	0.9994316730078304	WITHOUT_CLASSIFICATION	5.683269921695584E-4	DESIGN
reference type	WITHOUT_CLASSIFICATION	0.9994316730078304	WITHOUT_CLASSIFICATION	5.683269921695584E-4	DESIGN
not array	WITHOUT_CLASSIFICATION	0.9986927057437135	WITHOUT_CLASSIFICATION	0.0013072942562865014	DESIGN
array of reference type	WITHOUT_CLASSIFICATION	0.9990122616688528	WITHOUT_CLASSIFICATION	9.87738331147167E-4	DESIGN
boolean	WITHOUT_CLASSIFICATION	0.9998505655245908	WITHOUT_CLASSIFICATION	1.4943447540915876E-4	DESIGN
byte	WITHOUT_CLASSIFICATION	0.9997705895191875	WITHOUT_CLASSIFICATION	2.294104808125477E-4	DESIGN
char	WITHOUT_CLASSIFICATION	0.9998562420134068	WITHOUT_CLASSIFICATION	1.4375798659323509E-4	DESIGN
short	WITHOUT_CLASSIFICATION	0.9992677305848949	WITHOUT_CLASSIFICATION	7.322694151051426E-4	DESIGN
double	WITHOUT_CLASSIFICATION	0.9999670868664599	WITHOUT_CLASSIFICATION	3.2913133540199116E-5	DESIGN
float	WITHOUT_CLASSIFICATION	0.9996451750036801	WITHOUT_CLASSIFICATION	3.548249963200046E-4	DESIGN
float	WITHOUT_CLASSIFICATION	0.9996451750036801	WITHOUT_CLASSIFICATION	3.548249963200046E-4	DESIGN
long	WITHOUT_CLASSIFICATION	0.9996526760779286	WITHOUT_CLASSIFICATION	3.473239220713791E-4	DESIGN
long	WITHOUT_CLASSIFICATION	0.9996526760779286	WITHOUT_CLASSIFICATION	3.473239220713791E-4	DESIGN
bad type	WITHOUT_CLASSIFICATION	0.9983303676380252	WITHOUT_CLASSIFICATION	0.0016696323619748985	DESIGN
bad type	WITHOUT_CLASSIFICATION	0.9983303676380252	WITHOUT_CLASSIFICATION	0.0016696323619748985	DESIGN
boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9988683230995015	WITHOUT_CLASSIFICATION	0.0011316769004985593	DESIGN
boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9988683230995015	WITHOUT_CLASSIFICATION	0.0011316769004985593	DESIGN
reference type	WITHOUT_CLASSIFICATION	0.9994316730078304	WITHOUT_CLASSIFICATION	5.683269921695584E-4	DESIGN
double	WITHOUT_CLASSIFICATION	0.9999670868664599	WITHOUT_CLASSIFICATION	3.2913133540199116E-5	DESIGN
float	WITHOUT_CLASSIFICATION	0.9996451750036801	WITHOUT_CLASSIFICATION	3.548249963200046E-4	DESIGN
float	WITHOUT_CLASSIFICATION	0.9996451750036801	WITHOUT_CLASSIFICATION	3.548249963200046E-4	DESIGN
long	WITHOUT_CLASSIFICATION	0.9996526760779286	WITHOUT_CLASSIFICATION	3.473239220713791E-4	DESIGN
bad type	WITHOUT_CLASSIFICATION	0.9983303676380252	WITHOUT_CLASSIFICATION	0.0016696323619748985	DESIGN
bad type	WITHOUT_CLASSIFICATION	0.9983303676380252	WITHOUT_CLASSIFICATION	0.0016696323619748985	DESIGN
boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9988683230995015	WITHOUT_CLASSIFICATION	0.0011316769004985593	DESIGN
skip finalize methods	WITHOUT_CLASSIFICATION	0.9994766490723389	WITHOUT_CLASSIFICATION	5.233509276610652E-4	DESIGN
Mainly for OSCache	WITHOUT_CLASSIFICATION	0.9995989311664663	WITHOUT_CLASSIFICATION	4.010688335337357E-4	DESIGN
decrement the lock	WITHOUT_CLASSIFICATION	0.9998184985622839	WITHOUT_CLASSIFICATION	1.815014377161405E-4	DESIGN
create new lock that times out immediately	WITHOUT_CLASSIFICATION	0.999795968856985	WITHOUT_CLASSIFICATION	2.0403114301499332E-4	DESIGN
recache the updated state	WITHOUT_CLASSIFICATION	0.9997733686318182	WITHOUT_CLASSIFICATION	2.2663136818176224E-4	DESIGN
noop	WITHOUT_CLASSIFICATION	0.9998276569125725	WITHOUT_CLASSIFICATION	1.7234308742749063E-4	DESIGN
null clientLock is remotely possible but will never happen in practice	WITHOUT_CLASSIFICATION	0.9999782562130517	WITHOUT_CLASSIFICATION	2.174378694831159E-5	DESIGN
we really could refresh the item if it is not a lock, but it might be slower return freshTimestamp < txTimestamp	WITHOUT_CLASSIFICATION	0.9533638872197453	WITHOUT_CLASSIFICATION	0.046636112780254674	DESIGN
by requiring <, we rely on lock timeout in the case of an unsuccessful update!	WITHOUT_CLASSIFICATION	0.9999582699057276	WITHOUT_CLASSIFICATION	4.173009427252914E-5	DESIGN
the user provided resulttransformer, not the one used with "select new". Here to avoid mangling transformed/non-transformed results.	WITHOUT_CLASSIFICATION	0.9991071937169432	WITHOUT_CLASSIFICATION	8.928062830568179E-4	DESIGN
disassemble positional parameters	WITHOUT_CLASSIFICATION	0.999935782718576	WITHOUT_CLASSIFICATION	6.421728142407512E-5	DESIGN
disassemble named parameters	WITHOUT_CLASSIFICATION	0.9998963100925824	WITHOUT_CLASSIFICATION	1.0368990741759877E-4	DESIGN
ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9996409892359261	WITHOUT_CLASSIFICATION	3.5901076407379956E-4	DESIGN
noop	WITHOUT_CLASSIFICATION	0.9998276569125725	WITHOUT_CLASSIFICATION	1.7234308742749063E-4	DESIGN
noop	WITHOUT_CLASSIFICATION	0.9998276569125725	WITHOUT_CLASSIFICATION	1.7234308742749063E-4	DESIGN
noop	WITHOUT_CLASSIFICATION	0.9998276569125725	WITHOUT_CLASSIFICATION	1.7234308742749063E-4	DESIGN
this is called from SettingsFactory irregardless; trivial to simply disregard	WITHOUT_CLASSIFICATION	0.989012220747115	WITHOUT_CLASSIFICATION	0.010987779252885074	DESIGN
Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9989893726555639	WITHOUT_CLASSIFICATION	0.0010106273444361645	DESIGN
Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9989893726555639	WITHOUT_CLASSIFICATION	0.0010106273444361645	DESIGN
throw new UnsupportedOperationException("Can't write to a readonly object");	WITHOUT_CLASSIFICATION	0.9987144695899902	WITHOUT_CLASSIFICATION	0.0012855304100098063	DESIGN
assembled state gets put in a new array (we read from cache by value!)	WITHOUT_CLASSIFICATION	0.9969282866810459	WITHOUT_CLASSIFICATION	0.0030717133189540158	DESIGN
persister.setIdentifier(result, id); before calling interceptor, for consistency with normal load	WITHOUT_CLASSIFICATION	0.9993621821788785	WITHOUT_CLASSIFICATION	6.378178211214045E-4	DESIGN
no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9988789103994258	WITHOUT_CLASSIFICATION	0.001121089600574216	DESIGN
no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9988789103994258	WITHOUT_CLASSIFICATION	0.001121089600574216	DESIGN
again, CCS did not have such a concept; but a reasonable proximity is to clear the cache after transaction as long as the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999509483907802	WITHOUT_CLASSIFICATION	4.905160921980931E-5	DESIGN
again, CCS did not have such a concept; however a reasonable proximity is to clear the cache. For non-transaction aware caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999517108192018	WITHOUT_CLASSIFICATION	4.828918079826018E-5	DESIGN
again, CCS did not have such a concept; however a reasonable proximity is to clear the cache. For non-transaction aware caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999517108192018	WITHOUT_CLASSIFICATION	4.828918079826018E-5	DESIGN
classes mentioned in extends not available - so put it in queue	WITHOUT_CLASSIFICATION	0.9934920359520574	WITHOUT_CLASSIFICATION	0.006507964047942601	DESIGN
get meta's from <hibernate-mapping>	WITHOUT_CLASSIFICATION	0.9992200789651602	WITHOUT_CLASSIFICATION	7.799210348398297E-4	DESIGN
get meta's from <class>	WITHOUT_CLASSIFICATION	0.9985937047313936	WITHOUT_CLASSIFICATION	0.0014062952686063818	DESIGN
DB-OBJECTNAME	WITHOUT_CLASSIFICATION	0.9995868833392739	WITHOUT_CLASSIFICATION	4.131166607260134E-4	DESIGN
MUTABLE	WITHOUT_CLASSIFICATION	0.999627030731016	WITHOUT_CLASSIFICATION	3.7296926898392813E-4	DESIGN
WHERE	WITHOUT_CLASSIFICATION	0.999910096744912	WITHOUT_CLASSIFICATION	8.990325508793153E-5	DESIGN
CHECK	WITHOUT_CLASSIFICATION	0.999653062776008	WITHOUT_CLASSIFICATION	3.469372239919905E-4	DESIGN
POLYMORPHISM	WITHOUT_CLASSIFICATION	0.9995868833392739	WITHOUT_CLASSIFICATION	4.131166607260134E-4	DESIGN
TODO:	WITHOUT_CLASSIFICATION	0.5313962305063696	WITHOUT_CLASSIFICATION	0.46860376949363053	DESIGN
ID	WITHOUT_CLASSIFICATION	0.9996738280706134	WITHOUT_CLASSIFICATION	3.261719293866204E-4	DESIGN
VERSION / TIMESTAMP	WITHOUT_CLASSIFICATION	0.9997683935696933	WITHOUT_CLASSIFICATION	2.3160643030678438E-4	DESIGN
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9995868833392739	WITHOUT_CLASSIFICATION	4.131166607260134E-4	DESIGN
Primary key constraint	WITHOUT_CLASSIFICATION	0.9943721319485105	WITHOUT_CLASSIFICATION	0.005627868051489471	DESIGN
this is either a <version/> tag with no type attribute, or a <timestamp/> tag	WITHOUT_CLASSIFICATION	0.9997842175659158	WITHOUT_CLASSIFICATION	2.1578243408418779E-4	DESIGN
for version properties marked as being generated, make sure they are "always" generated; aka, "insert" is invalid; this is dis-allowed by the DTD, but just to make sure...	WITHOUT_CLASSIFICATION	0.9997120559872515	WITHOUT_CLASSIFICATION	2.8794401274845197E-4	DESIGN
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9995868833392739	WITHOUT_CLASSIFICATION	4.131166607260134E-4	DESIGN
( (Column) discrim.getColumnIterator().next() ).setType(type);	WITHOUT_CLASSIFICATION	0.9979386372204615	WITHOUT_CLASSIFICATION	0.002061362779538526	DESIGN
go ahead and set the lazy here, since pojo.proxy can override it.	WITHOUT_CLASSIFICATION	0.9999886372709851	WITHOUT_CLASSIFICATION	1.1362729014898296E-5	DESIGN
DYNAMIC UPDATE	WITHOUT_CLASSIFICATION	0.9995970358038428	WITHOUT_CLASSIFICATION	4.0296419615708364E-4	DESIGN
IMPORT	WITHOUT_CLASSIFICATION	0.999672287398475	WITHOUT_CLASSIFICATION	3.277126015250172E-4	DESIGN
BATCH SIZE	WITHOUT_CLASSIFICATION	0.9996293411084494	WITHOUT_CLASSIFICATION	3.706588915505894E-4	DESIGN
SELECT BEFORE UPDATE	WITHOUT_CLASSIFICATION	0.9996195513602858	WITHOUT_CLASSIFICATION	3.8044863971424216E-4	DESIGN
OPTIMISTIC LOCK MODE	WITHOUT_CLASSIFICATION	0.9995888264215035	WITHOUT_CLASSIFICATION	4.1117357849649114E-4	DESIGN
PERSISTER	WITHOUT_CLASSIFICATION	0.999627030731016	WITHOUT_CLASSIFICATION	3.7296926898392813E-4	DESIGN
CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9997003042839324	WITHOUT_CLASSIFICATION	2.9969571606762815E-4	DESIGN
get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9985937047313936	WITHOUT_CLASSIFICATION	0.0014062952686063818	DESIGN
properties	WITHOUT_CLASSIFICATION	0.9999186590250306	WITHOUT_CLASSIFICATION	8.13409749693505E-5	DESIGN
joined subclasses	WITHOUT_CLASSIFICATION	0.9998863417399712	WITHOUT_CLASSIFICATION	1.1365826002880974E-4	DESIGN
KEY	WITHOUT_CLASSIFICATION	0.9996823380975031	WITHOUT_CLASSIFICATION	3.176619024970004E-4	DESIGN
CHECK	WITHOUT_CLASSIFICATION	0.999653062776008	WITHOUT_CLASSIFICATION	3.469372239919905E-4	DESIGN
CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9997003042839324	WITHOUT_CLASSIFICATION	2.9969571606762815E-4	DESIGN
properties	WITHOUT_CLASSIFICATION	0.9999186590250306	WITHOUT_CLASSIFICATION	8.13409749693505E-5	DESIGN
KEY	WITHOUT_CLASSIFICATION	0.9996823380975031	WITHOUT_CLASSIFICATION	3.176619024970004E-4	DESIGN
model.getKey().setType( new Type( model.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9988298775315742	WITHOUT_CLASSIFICATION	0.0011701224684257958	DESIGN
TABLENAME	WITHOUT_CLASSIFICATION	0.9996293559181235	WITHOUT_CLASSIFICATION	3.706440818764143E-4	DESIGN
join.getKey().setType( new Type( lazz.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9988298775315742	WITHOUT_CLASSIFICATION	0.0011701224684257958	DESIGN
PROPERTIES	WITHOUT_CLASSIFICATION	0.9996296621890747	WITHOUT_CLASSIFICATION	3.70337810925392E-4	DESIGN
COLUMN(S)	WITHOUT_CLASSIFICATION	0.999627030731016	WITHOUT_CLASSIFICATION	3.7296926898392813E-4	DESIGN
column index	WITHOUT_CLASSIFICATION	0.9999910539415114	WITHOUT_CLASSIFICATION	8.946058488567847E-6	DESIGN
column unique-key	WITHOUT_CLASSIFICATION	0.9999020671935869	WITHOUT_CLASSIFICATION	9.793280641303696E-5	DESIGN
automatically makes a column with the default name if none is specifed by XML	WITHOUT_CLASSIFICATION	0.997368121239726	WITHOUT_CLASSIFICATION	0.002631878760273991	DESIGN
for an any	WITHOUT_CLASSIFICATION	0.9998608735733167	WITHOUT_CLASSIFICATION	1.3912642668334845E-4	DESIGN
insertable simply because that is the user did not specify anything; just override it	WITHOUT_CLASSIFICATION	0.9999913571097079	WITHOUT_CLASSIFICATION	8.642890292092816E-6	DESIGN
the user specifically supplied insert="true", which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999775000513927	WITHOUT_CLASSIFICATION	2.2499948607318906E-5	DESIGN
properties generated on update can never be updateable...	WITHOUT_CLASSIFICATION	0.9998796768456719	WITHOUT_CLASSIFICATION	1.2032315432805365E-4	DESIGN
updateable only because the user did not specify anything; just override it	WITHOUT_CLASSIFICATION	0.9999983032147806	WITHOUT_CLASSIFICATION	1.6967852194643204E-6	DESIGN
the user specifically supplied update="true", which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999775000513927	WITHOUT_CLASSIFICATION	2.2499948607318906E-5	DESIGN
ROLENAME	WITHOUT_CLASSIFICATION	0.999627030731016	WITHOUT_CLASSIFICATION	3.7296926898392813E-4	DESIGN
FETCH STRATEGY	WITHOUT_CLASSIFICATION	0.9995868833392739	WITHOUT_CLASSIFICATION	4.131166607260134E-4	DESIGN
TABLE	WITHOUT_CLASSIFICATION	0.9997478877943696	WITHOUT_CLASSIFICATION	2.521122056303878E-4	DESIGN
tableName = mappings.getNamingStrategy().propertyToTableName( className, path );	WITHOUT_CLASSIFICATION	0.9999719925434069	WITHOUT_CLASSIFICATION	2.8007456593219445E-5	DESIGN
SORT	WITHOUT_CLASSIFICATION	0.9996283096446662	WITHOUT_CLASSIFICATION	3.7169035533386025E-4	DESIGN
CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9997003042839324	WITHOUT_CLASSIFICATION	2.9969571606762815E-4	DESIGN
unsorted, natural, comparator.class.name	WITHOUT_CLASSIFICATION	0.9994515852581775	WITHOUT_CLASSIFICATION	5.484147418224609E-4	DESIGN
ORPHAN DELETE (used for programmer error detection)	WITHOUT_CLASSIFICATION	0.99914591754825	WITHOUT_CLASSIFICATION	8.540824517499288E-4	DESIGN
set up second pass	WITHOUT_CLASSIFICATION	0.999942053577139	WITHOUT_CLASSIFICATION	5.794642286105E-5	DESIGN
an "embedded" component (composite ids and unique) note that this does not handle nested components	WITHOUT_CLASSIFICATION	0.9964011528689074	WITHOUT_CLASSIFICATION	0.003598847131092613	DESIGN
a nested composite element	WITHOUT_CLASSIFICATION	0.9913833344599623	WITHOUT_CLASSIFICATION	0.008616665540037682	DESIGN
for an any we will have to use reflection	WITHOUT_CLASSIFICATION	0.9982978517023381	WITHOUT_CLASSIFICATION	0.0017021482976619351	DESIGN
NOTE SPECIAL CASE: one-to-one constrained=false cannot be proxied, so default to join and non-lazy	WITHOUT_CLASSIFICATION	0.9999760735990975	WITHOUT_CLASSIFICATION	2.392640090246131E-5	DESIGN
use old (HB 2.1) defaults if outer-join is specified	WITHOUT_CLASSIFICATION	0.9998200740968479	WITHOUT_CLASSIFICATION	1.7992590315219303E-4	DESIGN
lazy = !join;	WITHOUT_CLASSIFICATION	0.9998546972917313	WITHOUT_CLASSIFICATION	1.4530270826877058E-4	DESIGN
GENERATOR	WITHOUT_CLASSIFICATION	0.9996825461347868	WITHOUT_CLASSIFICATION	3.1745386521322196E-4	DESIGN
ID UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9996387162468162	WITHOUT_CLASSIFICATION	3.6128375318379046E-4	DESIGN
VERSION UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9990109555261806	WITHOUT_CLASSIFICATION	9.890444738194786E-4	DESIGN
not necessarily a unique property reference	WITHOUT_CLASSIFICATION	0.9878722074231056	WITHOUT_CLASSIFICATION	0.012127792576894522	DESIGN
( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9979386372204615	WITHOUT_CLASSIFICATION	0.002061362779538526	DESIGN
contained elements:	WITHOUT_CLASSIFICATION	0.9995556017671039	WITHOUT_CLASSIFICATION	4.4439823289611524E-4	DESIGN
for non-inverse one-to-many, with a not-null fk, add a backref!	WITHOUT_CLASSIFICATION	0.9989101435829613	WITHOUT_CLASSIFICATION	0.0010898564170387214	DESIGN
Bind the where	WITHOUT_CLASSIFICATION	0.9998453720034686	WITHOUT_CLASSIFICATION	1.5462799653142987E-4	DESIGN
Bind the order-by	WITHOUT_CLASSIFICATION	0.9997927059083879	WITHOUT_CLASSIFICATION	2.0729409161216798E-4	DESIGN
Bind the filters	WITHOUT_CLASSIFICATION	0.9997829524697336	WITHOUT_CLASSIFICATION	2.1704753026635502E-4	DESIGN
overriding inherited meta attribute. HBX-621 & HBX-793	WITHOUT_CLASSIFICATION	0.9994057988057949	WITHOUT_CLASSIFICATION	5.942011942051142E-4	DESIGN
first, iterate over all elements capable of defining an extends attribute collecting all found extends references if they cannot be resolved against the already processed mappings.	WITHOUT_CLASSIFICATION	0.9999998979588667	WITHOUT_CLASSIFICATION	1.020411332531967E-7	DESIGN
mappings might contain either the "raw" extends name (in the case of an entity-name mapping) or a FQN (in the case of a POJO mapping).	WITHOUT_CLASSIFICATION	0.9999108756318206	WITHOUT_CLASSIFICATION	8.912436817935558E-5	DESIGN
+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.5598617270189636	DESIGN	0.4401382729810364	WITHOUT_CLASSIFICATION
SessionFactory name:	WITHOUT_CLASSIFICATION	0.9997154782483356	WITHOUT_CLASSIFICATION	2.845217516644531E-4	DESIGN
JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9994385194710512	WITHOUT_CLASSIFICATION	5.614805289486413E-4	DESIGN
JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9994385194710512	WITHOUT_CLASSIFICATION	5.614805289486413E-4	DESIGN
Interrogate JDBC metadata	WITHOUT_CLASSIFICATION	0.9997168982097345	WITHOUT_CLASSIFICATION	2.831017902654108E-4	DESIGN
user supplied JDBC connections	WITHOUT_CLASSIFICATION	0.999866740041475	WITHOUT_CLASSIFICATION	1.3325995852500036E-4	DESIGN
use dialect default properties	WITHOUT_CLASSIFICATION	0.9989021173561456	WITHOUT_CLASSIFICATION	0.0010978826438544221	DESIGN
Transaction settings:	WITHOUT_CLASSIFICATION	0.9991185937386645	WITHOUT_CLASSIFICATION	8.814062613354388E-4	DESIGN
SQL Generation settings:	WITHOUT_CLASSIFICATION	0.9992314719472962	WITHOUT_CLASSIFICATION	7.685280527037327E-4	DESIGN
Query parser settings:	WITHOUT_CLASSIFICATION	0.9977471739870687	WITHOUT_CLASSIFICATION	0.0022528260129313113	DESIGN
Second-level / query cache:	WITHOUT_CLASSIFICATION	0.9996749430578887	WITHOUT_CLASSIFICATION	3.2505694211127295E-4	DESIGN
The cache provider is needed when we either have second-level cache enabled or query cache enabled. Note that useSecondLevelCache is enabled by default	WITHOUT_CLASSIFICATION	0.9999994431731648	WITHOUT_CLASSIFICATION	5.568268352013203E-7	DESIGN
SQL Exception converter:	WITHOUT_CLASSIFICATION	0.9984549784032716	WITHOUT_CLASSIFICATION	0.0015450215967283613	DESIGN
Statistics and logging:	WITHOUT_CLASSIFICATION	0.9991041355821819	WITHOUT_CLASSIFICATION	8.958644178180617E-4	DESIGN
settings.setShowSqlEnabled(showSql);	WITHOUT_CLASSIFICATION	0.9994515852581775	WITHOUT_CLASSIFICATION	5.484147418224609E-4	DESIGN
settings.setFormatSqlEnabled(formatSql);	WITHOUT_CLASSIFICATION	0.9994515852581775	WITHOUT_CLASSIFICATION	5.484147418224609E-4	DESIGN
Schema export:	WITHOUT_CLASSIFICATION	0.9992868977566044	WITHOUT_CLASSIFICATION	7.131022433956786E-4	DESIGN
String provider = properties.getProperty( Environment.BYTECODE_PROVIDER ); log.info( "Bytecode provider name : " + provider ); BytecodeProvider bytecodeProvider = buildBytecodeProvider( provider ); settings.setBytecodeProvider( bytecodeProvider );	WITHOUT_CLASSIFICATION	0.9999649059662512	WITHOUT_CLASSIFICATION	3.509403374878233E-5	DESIGN
legacy behavior, apply the bridge...	WITHOUT_CLASSIFICATION	0.9988592264501056	WITHOUT_CLASSIFICATION	0.0011407735498944356	DESIGN
maybe a concrete SQLpropertyresult type, but Map is exactly what is required at the moment	WITHOUT_CLASSIFICATION	0.9795279328524382	WITHOUT_CLASSIFICATION	0.020472067147561793	DESIGN
if dotted and not load-collection nor return-join regular property	WITHOUT_CLASSIFICATION	0.9917912553246367	WITHOUT_CLASSIFICATION	0.00820874467536318	DESIGN
private ComponentTuplizerFactory componentTuplizerFactory; todo : HHH-3517 and HHH-1907 private BytecodeProvider bytecodeProvider;	WITHOUT_CLASSIFICATION	0.9988419296113322	WITHOUT_CLASSIFICATION	0.0011580703886677369	DESIGN
public getters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997503126007578	WITHOUT_CLASSIFICATION	2.496873992422281E-4	DESIGN
public ComponentTuplizerFactory getComponentTuplizerFactory() { return componentTuplizerFactory; }	WITHOUT_CLASSIFICATION	0.99843841954624	WITHOUT_CLASSIFICATION	0.0015615804537599215	DESIGN
package protected setters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9872331797034851	WITHOUT_CLASSIFICATION	0.012766820296514948	DESIGN
void setShowSqlEnabled(boolean b) { showSql = b; } void setFormatSqlEnabled(boolean b) { formatSql = b; }	WITHOUT_CLASSIFICATION	0.9996610047002855	WITHOUT_CLASSIFICATION	3.38995299714429E-4	DESIGN
public BytecodeProvider getBytecodeProvider() { return bytecodeProvider; } void setBytecodeProvider(BytecodeProvider bytecodeProvider) { this.bytecodeProvider = bytecodeProvider; }	WITHOUT_CLASSIFICATION	0.9992031979657499	WITHOUT_CLASSIFICATION	7.968020342502403E-4	DESIGN
using local since the inheritedMetas at this point is not the correct map since it is always the empty map	WITHOUT_CLASSIFICATION	0.99795895492792	WITHOUT_CLASSIFICATION	0.002041045072080102	DESIGN
private ComponentTuplizerFactory componentTuplizerFactory; todo : HHH-3517 and HHH-1907	WITHOUT_CLASSIFICATION	0.9988419296113322	WITHOUT_CLASSIFICATION	0.0011580703886677369	DESIGN
protected List extendsQueue;	WITHOUT_CLASSIFICATION	0.9994264876756879	WITHOUT_CLASSIFICATION	5.735123243121071E-4	DESIGN
extendsQueue = new ArrayList();	WITHOUT_CLASSIFICATION	0.9998610002262487	WITHOUT_CLASSIFICATION	1.389997737513534E-4	DESIGN
componentTuplizerFactory = new ComponentTuplizerFactory();	WITHOUT_CLASSIFICATION	0.9998588355056022	WITHOUT_CLASSIFICATION	1.4116449439787493E-4	DESIGN
if doc is null, then for whatever reason, the cached file cannot be used...	WITHOUT_CLASSIFICATION	0.999983739432813	WITHOUT_CLASSIFICATION	1.6260567186956344E-5	DESIGN
drop them in reverse order in case db needs it done that way...	WITHOUT_CLASSIFICATION	0.9990092157491786	WITHOUT_CLASSIFICATION	9.907842508214953E-4	DESIGN
public ComponentTuplizerFactory getComponentTuplizerFactory() { return componentTuplizerFactory; }	WITHOUT_CLASSIFICATION	0.99843841954624	WITHOUT_CLASSIFICATION	0.0015615804537599215	DESIGN
This method may be called many times!!	WITHOUT_CLASSIFICATION	0.9621295332082728	WITHOUT_CLASSIFICATION	0.03787046679172728	DESIGN
Iterator iterator = extendsQueue.iterator();	WITHOUT_CLASSIFICATION	0.9996442331810629	WITHOUT_CLASSIFICATION	3.5576681893708984E-4	DESIGN
Iterator iter = extendsQueue.iterator();	WITHOUT_CLASSIFICATION	0.9994185749328595	WITHOUT_CLASSIFICATION	5.814250671405595E-4	DESIGN
found	WITHOUT_CLASSIFICATION	0.9998230647869442	WITHOUT_CLASSIFICATION	1.7693521305581217E-4	DESIGN
found	WITHOUT_CLASSIFICATION	0.9998230647869442	WITHOUT_CLASSIFICATION	1.7693521305581217E-4	DESIGN
settings.setComponentTuplizerFactory( this.getComponentTuplizerFactory() );	WITHOUT_CLASSIFICATION	0.9997045391190248	WITHOUT_CLASSIFICATION	2.954608809752574E-4	DESIGN
private final List extendsQueue;	WITHOUT_CLASSIFICATION	0.999876195981367	WITHOUT_CLASSIFICATION	1.2380401863300484E-4	DESIGN
<String, String>	WITHOUT_CLASSIFICATION	0.9996074218659772	WITHOUT_CLASSIFICATION	3.9257813402278797E-4	DESIGN
<String, String>	WITHOUT_CLASSIFICATION	0.9996074218659772	WITHOUT_CLASSIFICATION	3.9257813402278797E-4	DESIGN
+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.5598617270189636	DESIGN	0.4401382729810364	WITHOUT_CLASSIFICATION
Set USE_REFLECTION_OPTIMIZER to false to fix HHH-227	WITHOUT_CLASSIFICATION	0.9884818671551415	WITHOUT_CLASSIFICATION	0.01151813284485844	DESIGN
orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9986022235889702	WITHOUT_CLASSIFICATION	0.0013977764110297732	DESIGN
element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.999857916667023	WITHOUT_CLASSIFICATION	1.420833329770608E-4	DESIGN
intentionally empty	WITHOUT_CLASSIFICATION	0.9996279301531421	WITHOUT_CLASSIFICATION	3.72069846857864E-4	DESIGN
orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9986022235889702	WITHOUT_CLASSIFICATION	0.0013977764110297732	DESIGN
element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.999857916667023	WITHOUT_CLASSIFICATION	1.420833329770608E-4	DESIGN
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9984594315859747	WITHOUT_CLASSIFICATION	0.0015405684140251796	DESIGN
maintain correct duplication if loaded in a cartesian product	WITHOUT_CLASSIFICATION	0.9951814122414394	WITHOUT_CLASSIFICATION	0.004818587758560596	DESIGN
the element has been removed from the set	WITHOUT_CLASSIFICATION	0.9965603424188308	WITHOUT_CLASSIFICATION	0.0034396575811691033	DESIGN
the element has changed	WITHOUT_CLASSIFICATION	0.9999353935877863	WITHOUT_CLASSIFICATION	6.460641221375174E-5	DESIGN
Careful: these methods do not initialize the collection.	WITHOUT_CLASSIFICATION	0.9925600833564803	WITHOUT_CLASSIFICATION	0.007439916643519733	DESIGN
needed so that we remove this collection from the second-level cache	WITHOUT_CLASSIFICATION	0.9659619204961463	WITHOUT_CLASSIFICATION	0.03403807950385371	DESIGN
override on some subclasses	WITHOUT_CLASSIFICATION	0.9998851566160999	WITHOUT_CLASSIFICATION	1.1484338390006652E-4	DESIGN
override on some subclasses	WITHOUT_CLASSIFICATION	0.9998851566160999	WITHOUT_CLASSIFICATION	1.1484338390006652E-4	DESIGN
do this bit after setting initialized to true or it will recurse	WITHOUT_CLASSIFICATION	0.983361053606091	WITHOUT_CLASSIFICATION	0.016638946393909	DESIGN
short-circuit(s) no new elements, the old list contains only Orphans no old elements, so no Orphans neither	WITHOUT_CLASSIFICATION	0.9999990164324025	WITHOUT_CLASSIFICATION	9.83567597444719E-7	DESIGN
create the collection holding the Orphans	WITHOUT_CLASSIFICATION	0.9997126687429246	WITHOUT_CLASSIFICATION	2.8733125707538256E-4	DESIGN
collect EntityIdentifier(s) of the current elements - add them into a HashSet for fast access	WITHOUT_CLASSIFICATION	0.9998597908922715	WITHOUT_CLASSIFICATION	1.4020910772841733E-4	DESIGN
iterate over the old list	WITHOUT_CLASSIFICATION	0.9998165680703385	WITHOUT_CLASSIFICATION	1.8343192966151488E-4	DESIGN
(array==null) ? tempList.size() :	WITHOUT_CLASSIFICATION	0.9987142183291323	WITHOUT_CLASSIFICATION	0.0012857816708677604	DESIGN
intentionally empty	WITHOUT_CLASSIFICATION	0.9996279301531421	WITHOUT_CLASSIFICATION	3.72069846857864E-4	DESIGN
(array==null) ? tempList.get(i) :	WITHOUT_CLASSIFICATION	0.9987142183291323	WITHOUT_CLASSIFICATION	0.0012857816708677604	DESIGN
write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9992291593441363	WITHOUT_CLASSIFICATION	7.708406558638025E-4	DESIGN
write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9992291593441363	WITHOUT_CLASSIFICATION	7.708406558638025E-4	DESIGN
amazingly, these two will work because AbstractCollection uses iterator() to fill the array	WITHOUT_CLASSIFICATION	0.9982600538233799	WITHOUT_CLASSIFICATION	0.00173994617662009	DESIGN
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9984594315859747	WITHOUT_CLASSIFICATION	0.0015405684140251796	DESIGN
finally, what it's all about...	WITHOUT_CLASSIFICATION	0.9962541229551566	WITHOUT_CLASSIFICATION	0.0037458770448434526	DESIGN
note that if we load this collection from a cartesian product the multiplicity would be broken ... so use an idbag instead	WITHOUT_CLASSIFICATION	0.8142507186443304	DESIGN	0.1857492813556696	WITHOUT_CLASSIFICATION
Anyway, here we implement <set> semantics for a <one-to-many> <bag>!	WITHOUT_CLASSIFICATION	0.6162802087903273	WITHOUT_CLASSIFICATION	0.3837197912096727	DESIGN
a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9997596995056311	WITHOUT_CLASSIFICATION	2.4030049436893241E-4	DESIGN
search for it note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9881436386612946	WITHOUT_CLASSIFICATION	0.011856361338705287	DESIGN
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9984594315859747	WITHOUT_CLASSIFICATION	0.0015405684140251796	DESIGN
a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9997596995056311	WITHOUT_CLASSIFICATION	2.4030049436893241E-4	DESIGN
search for it note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9881436386612946	WITHOUT_CLASSIFICATION	0.011856361338705287	DESIGN
public boolean equals(Object other) {read();return bag.equals(other);}public int hashCode(Object other) {read();return bag.hashCode();}	WITHOUT_CLASSIFICATION	0.9997720038776959	WITHOUT_CLASSIFICATION	2.2799612230413237E-4	DESIGN
List OPERATIONS:	WITHOUT_CLASSIFICATION	0.9999177355991897	WITHOUT_CLASSIFICATION	8.226440081030584E-5	DESIGN
pad with nulls from the current last element up to the new index	WITHOUT_CLASSIFICATION	0.9999978028069391	WITHOUT_CLASSIFICATION	2.1971930609436325E-6	DESIGN
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9984594315859747	WITHOUT_CLASSIFICATION	0.0015405684140251796	DESIGN
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9984594315859747	WITHOUT_CLASSIFICATION	0.0015405684140251796	DESIGN
from Map	WITHOUT_CLASSIFICATION	0.9996411532855872	WITHOUT_CLASSIFICATION	3.5884671441280323E-4	DESIGN
from SortedMap	WITHOUT_CLASSIFICATION	0.9994364777869054	WITHOUT_CLASSIFICATION	5.635222130946143E-4	DESIGN
inject the data	WITHOUT_CLASSIFICATION	0.9999030104438309	WITHOUT_CLASSIFICATION	9.698955616902573E-5	DESIGN
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9996777715456873	WITHOUT_CLASSIFICATION	3.2222845431268234E-4	DESIGN
default pool size 20	WITHOUT_CLASSIFICATION	0.9998926927691854	WITHOUT_CLASSIFICATION	1.0730723081463437E-4	DESIGN
trying via forName() first to be as close to DriverManager's semantics	WITHOUT_CLASSIFICATION	0.9999957478401288	WITHOUT_CLASSIFICATION	4.25215987121163E-6	DESIGN
if debug level is enabled, then log the password, otherwise mask it	WITHOUT_CLASSIFICATION	0.9999926786306891	WITHOUT_CLASSIFICATION	7.321369310824556E-6	DESIGN
register a cleanup synch	WITHOUT_CLASSIFICATION	0.9998603050840241	WITHOUT_CLASSIFICATION	1.3969491597596665E-4	DESIGN
wrap the session in the transaction-protection proxy	WITHOUT_CLASSIFICATION	0.9997620944042577	WITHOUT_CLASSIFICATION	2.3790559574240406E-4	DESIGN
then bind it	WITHOUT_CLASSIFICATION	0.999648840997282	WITHOUT_CLASSIFICATION	3.511590027180207E-4	DESIGN
try to make sure we don't wrap and already wrapped session	WITHOUT_CLASSIFICATION	0.969587686028044	WITHOUT_CLASSIFICATION	0.030412313971955998	DESIGN
allow these to go through the the real session no matter what	WITHOUT_CLASSIFICATION	0.958274347663061	WITHOUT_CLASSIFICATION	0.041725652336939076	DESIGN
limit the methods available if no transaction is active	WITHOUT_CLASSIFICATION	0.9996396607756188	WITHOUT_CLASSIFICATION	3.6033922438110234E-4	DESIGN
allow these (deprecated) methods to pass through	WITHOUT_CLASSIFICATION	0.9970339351945914	WITHOUT_CLASSIFICATION	0.0029660648054086994	DESIGN
serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995762866080966	WITHOUT_CLASSIFICATION	4.237133919034216E-4	DESIGN
We could register the session against the transaction even though it is not started, but we'd have no guarentee of ever getting the map entries cleaned up (aside from spawning threads).	WITHOUT_CLASSIFICATION	0.9999939694173661	WITHOUT_CLASSIFICATION	6.030582633990951E-6	DESIGN
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9996777715456873	WITHOUT_CLASSIFICATION	3.2222845431268234E-4	DESIGN
private String propertyName;	WITHOUT_CLASSIFICATION	0.9957923661782935	WITHOUT_CLASSIFICATION	0.004207633821706541	DESIGN
public PropertyProjection project() {return Projections.property(getPropertyName());}	WITHOUT_CLASSIFICATION	0.9988405218368558	WITHOUT_CLASSIFICATION	0.0011594781631442282	DESIGN
String[] fk = StringHelper.qualify( "collection_", cp.getKeyColumnNames() );	WITHOUT_CLASSIFICATION	0.9999099051986161	WITHOUT_CLASSIFICATION	9.00948013838596E-5	DESIGN
" collection_ where " +	WITHOUT_CLASSIFICATION	0.9998186329757709	WITHOUT_CLASSIFICATION	1.8136702422903795E-4	DESIGN
unsupported	WITHOUT_CLASSIFICATION	0.9995876891150675	WITHOUT_CLASSIFICATION	4.1231088493252547E-4	DESIGN
unsupported	WITHOUT_CLASSIFICATION	0.9995876891150675	WITHOUT_CLASSIFICATION	4.1231088493252547E-4	DESIGN
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9996777715456873	WITHOUT_CLASSIFICATION	3.2222845431268234E-4	DESIGN
the following two lines were added to ensure that this.params is not null, which can happen with two-deep nested subqueries	WITHOUT_CLASSIFICATION	0.9999464222606437	WITHOUT_CLASSIFICATION	5.3577739356353477E-5	DESIGN
with two-deep subqueries, the same alias would get generated for both using the old method (criteriaQuery.generateSQLAlias()), so that is now used as a fallback if the main criteria alias isn't set	WITHOUT_CLASSIFICATION	0.9980475006323669	WITHOUT_CLASSIFICATION	0.0019524993676330767	DESIGN
implicit polymorphism not supported (would need a union)	WITHOUT_CLASSIFICATION	0.9889548118569945	WITHOUT_CLASSIFICATION	0.011045188143005506	DESIGN
pull off the last ", "	WITHOUT_CLASSIFICATION	0.999966617530861	WITHOUT_CLASSIFICATION	3.338246913894245E-5	DESIGN
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9996347628953852	WITHOUT_CLASSIFICATION	3.6523710461470804E-4	DESIGN
we have the form: trim(trimSource) so we trim leading and trailing spaces	WITHOUT_CLASSIFICATION	0.9998526913744765	WITHOUT_CLASSIFICATION	1.4730862552344757E-4	DESIGN
we have the form: trim(from trimSource). This is functionally equivalent to trim(trimSource)	WITHOUT_CLASSIFICATION	0.998574718396353	WITHOUT_CLASSIFICATION	0.0014252816036469148	DESIGN
NOT_SUPPORTED_SHOULD_USE_JDBC3_PreparedStatement.getGeneratedKeys_method	WITHOUT_CLASSIFICATION	0.9994515852581775	WITHOUT_CLASSIFICATION	5.484147418224609E-4	DESIGN
potentialTrimCharacterArgIndex = 1 assumes that a trim-specification has been specified. we handle the exception to that explicitly	WITHOUT_CLASSIFICATION	0.999883819867448	WITHOUT_CLASSIFICATION	1.1618013255196501E-4	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997532110406913	WITHOUT_CLASSIFICATION	2.4678895930873386E-4	DESIGN
Oracle did add support for ANSI CASE statements in 9i	WITHOUT_CLASSIFICATION	0.9999912774940328	WITHOUT_CLASSIFICATION	8.722505967260274E-6	DESIGN
the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999729131745557	WITHOUT_CLASSIFICATION	2.708682544431703E-5	DESIGN
Informix doesn't have a bit type	WITHOUT_CLASSIFICATION	0.9711338610853683	WITHOUT_CLASSIFICATION	0.02886613891463174	DESIGN
or BYTE or TEXT? or MONEY	WITHOUT_CLASSIFICATION	0.9995909323579607	WITHOUT_CLASSIFICATION	4.090676420393805E-4	DESIGN
strip table-owner because Informix always returns constraint names as "<table-owner>.<constraint-name>"	WITHOUT_CLASSIFICATION	0.9988712645063823	WITHOUT_CLASSIFICATION	0.001128735493617674	DESIGN
build the map of standard ANSI SQL aggregation functions ~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999723743184763	WITHOUT_CLASSIFICATION	2.7625681523720787E-5	DESIGN
pre H3.2 behavior: super.getReturnType(ct, m);	WITHOUT_CLASSIFICATION	0.9997840095727026	WITHOUT_CLASSIFICATION	2.1599042729736472E-4	DESIGN
finally use the sqltype if == on Hibernate types did not find a match.	WITHOUT_CLASSIFICATION	0.9978431316103599	WITHOUT_CLASSIFICATION	0.002156868389640149	DESIGN
because numeric can be anything	WITHOUT_CLASSIFICATION	0.9999545407243678	WITHOUT_CLASSIFICATION	4.54592756320638E-5	DESIGN
constructors and factory methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9927672159639885	WITHOUT_CLASSIFICATION	0.007232784036011449	DESIGN
standard sql92 functions (can be overridden by subclasses)	WITHOUT_CLASSIFICATION	0.9994449639911941	WITHOUT_CLASSIFICATION	5.550360088059603E-4	DESIGN
map second/minute/hour/day/month/year to ANSI extract(), override on subclasses	WITHOUT_CLASSIFICATION	0.9999733271472904	WITHOUT_CLASSIFICATION	2.6672852709587112E-5	DESIGN
register hibernate types for default use in scalar sqlquery type auto detection	WITHOUT_CLASSIFICATION	0.998867497250896	WITHOUT_CLASSIFICATION	0.0011325027491040328	DESIGN
database type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994894619619449	WITHOUT_CLASSIFICATION	5.105380380550812E-4	DESIGN
hibernate type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997043358569434	WITHOUT_CLASSIFICATION	2.956641430565475E-4	DESIGN
keyword support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996342835772571	WITHOUT_CLASSIFICATION	3.657164227428498E-4	DESIGN
native identifier generatiion ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997002314812383	WITHOUT_CLASSIFICATION	2.99768518761721E-4	DESIGN
IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9990828012106451	WITHOUT_CLASSIFICATION	9.171987893549786E-4	DESIGN
SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992434513079232	WITHOUT_CLASSIFICATION	7.56548692076843E-4	DESIGN
GUID support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9990828012106451	WITHOUT_CLASSIFICATION	9.171987893549786E-4	DESIGN
limit/offset support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9990828012106451	WITHOUT_CLASSIFICATION	9.171987893549786E-4	DESIGN
by default we report no support	WITHOUT_CLASSIFICATION	0.9311157071354985	WITHOUT_CLASSIFICATION	0.06888429286450148	DESIGN
by default we report no support for NOWAIT lock semantics	WITHOUT_CLASSIFICATION	0.6168215314378991	WITHOUT_CLASSIFICATION	0.3831784685621008	DESIGN
table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996964375519516	WITHOUT_CLASSIFICATION	3.035624480484371E-4	DESIGN
temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9950317101633942	WITHOUT_CLASSIFICATION	0.00496828983660578	DESIGN
callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9919851598641647	WITHOUT_CLASSIFICATION	0.008014840135835316	DESIGN
current timestamp support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998835437234965	WITHOUT_CLASSIFICATION	1.1645627650355283E-4	DESIGN
SQLException support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996116530667092	WITHOUT_CLASSIFICATION	3.8834693329077547E-4	DESIGN
miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9990828012106451	WITHOUT_CLASSIFICATION	9.171987893549786E-4	DESIGN
identifier quoting support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992603585969608	WITHOUT_CLASSIFICATION	7.396414030391822E-4	DESIGN
DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9990828012106451	WITHOUT_CLASSIFICATION	9.171987893549786E-4	DESIGN
grrr... for differentiation of mysql storage engines	WITHOUT_CLASSIFICATION	0.9998746964962274	WITHOUT_CLASSIFICATION	1.2530350377258732E-4	DESIGN
Informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994980766529048	WITHOUT_CLASSIFICATION	5.019233470952377E-4	DESIGN
return false here, as most databases do not properly support this construct...	WITHOUT_CLASSIFICATION	0.9982111421748482	WITHOUT_CLASSIFICATION	0.0017888578251517764	DESIGN
Mckoi has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9989670122292711	WITHOUT_CLASSIFICATION	0.00103298777072889	DESIGN
Oracle8 and previous define only a "DATE" type which is used to represent all aspects of date/time	WITHOUT_CLASSIFICATION	0.9910575394544993	WITHOUT_CLASSIFICATION	0.0089424605455008	DESIGN
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9994466096017112	WITHOUT_CLASSIFICATION	5.53390398288929E-4	DESIGN
" cascade";	WITHOUT_CLASSIFICATION	0.999881067194952	WITHOUT_CLASSIFICATION	1.1893280504799611E-4	DESIGN
trim off the length/precision/scale	WITHOUT_CLASSIFICATION	0.9997097646301781	WITHOUT_CLASSIFICATION	2.9023536982189366E-4	DESIGN
public boolean dropTemporaryTableAfterUse() {we have to, because postgres sets current txto rollback only after a failed create tablereturn true;}	WITHOUT_CLASSIFICATION	0.9999980717684278	WITHOUT_CLASSIFICATION	1.9282315722043257E-6	DESIGN
CHECK VIOLATION	WITHOUT_CLASSIFICATION	0.999615716464739	WITHOUT_CLASSIFICATION	3.8428353526108E-4	DESIGN
UNIQUE VIOLATION	WITHOUT_CLASSIFICATION	0.9996029267943978	WITHOUT_CLASSIFICATION	3.9707320560216036E-4	DESIGN
FOREIGN KEY VIOLATION	WITHOUT_CLASSIFICATION	0.9992165435165989	WITHOUT_CLASSIFICATION	7.83456483401112E-4	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997532110406913	WITHOUT_CLASSIFICATION	2.4678895930873386E-4	DESIGN
NOT NULL VIOLATION	WITHOUT_CLASSIFICATION	0.9948367974606712	WITHOUT_CLASSIFICATION	0.005163202539328825	DESIGN
ALL OTHER	WITHOUT_CLASSIFICATION	0.9996051095306995	WITHOUT_CLASSIFICATION	3.9489046930053903E-4	DESIGN
Register the type of the out param - PostgreSQL uses Types.OTHER	WITHOUT_CLASSIFICATION	0.997739712709687	WITHOUT_CLASSIFICATION	0.002260287290313069	DESIGN
seems to not really... public boolean supportsRowValueConstructorSyntax() { return true; }	WITHOUT_CLASSIFICATION	0.9962562040781082	WITHOUT_CLASSIFICATION	0.003743795921891883	DESIGN
seems to have spotty LOB suppport	WITHOUT_CLASSIFICATION	0.9988149922553242	WITHOUT_CLASSIFICATION	0.0011850077446757346	DESIGN
HHH-2300	WITHOUT_CLASSIFICATION	0.999627030731016	WITHOUT_CLASSIFICATION	3.7296926898392813E-4	DESIGN
ignore (probably H2 not in the classpath)	WITHOUT_CLASSIFICATION	0.9987829888202525	WITHOUT_CLASSIFICATION	0.001217011179747521	DESIGN
Numeric Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994855238860985	WITHOUT_CLASSIFICATION	5.144761139016416E-4	DESIGN
String Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994769002049336	WITHOUT_CLASSIFICATION	5.230997950663729E-4	DESIGN
Time and Date Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997223832826089	WITHOUT_CLASSIFICATION	2.7761671739122103E-4	DESIGN
System Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995753305682495	WITHOUT_CLASSIFICATION	4.2466943175047237E-4	DESIGN
not null is implicit	WITHOUT_CLASSIFICATION	0.9989265102154669	WITHOUT_CLASSIFICATION	0.00107348978453322	DESIGN
23000: Check constraint violation: {0} 23001: Unique index or primary key violation: {0}	WITHOUT_CLASSIFICATION	0.9999826570744216	WITHOUT_CLASSIFICATION	1.734292557844027E-5	DESIGN
Display the dialect version.	WITHOUT_CLASSIFICATION	0.999448892809169	WITHOUT_CLASSIFICATION	5.511071908309836E-4	DESIGN
The RDMS concat() function only supports 2 parameters	WITHOUT_CLASSIFICATION	0.999998820835386	WITHOUT_CLASSIFICATION	1.17916461395042E-6	DESIGN
Dialect method overrides ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999379232069195	WITHOUT_CLASSIFICATION	6.207679308049025E-4	DESIGN
Original Dialect.java returns " for update";	WITHOUT_CLASSIFICATION	0.9996115843184683	WITHOUT_CLASSIFICATION	3.884156815316213E-4	DESIGN
Verify the state of this new method in Hibernate 3.0 Dialect.java	WITHOUT_CLASSIFICATION	0.9988097038752982	WITHOUT_CLASSIFICATION	0.0011902961247018532	DESIGN
Origial Dialect.java returns true;	WITHOUT_CLASSIFICATION	0.9993977224734409	WITHOUT_CLASSIFICATION	6.022775265591596E-4	DESIGN
The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9172431376181183	WITHOUT_CLASSIFICATION	0.08275686238188172	DESIGN
Sequence methods - start. The RDMS dialect needs these	WITHOUT_CLASSIFICATION	0.9017738164671552	WITHOUT_CLASSIFICATION	0.09822618353284485	DESIGN
methods to make it possible to use the Native Id generator	WITHOUT_CLASSIFICATION	0.9936601835819294	WITHOUT_CLASSIFICATION	0.0063398164180705876	DESIGN
The where clause was added to eliminate this statement from Brute Force Searches.	WITHOUT_CLASSIFICATION	0.9966999304143864	WITHOUT_CLASSIFICATION	0.003300069585613637	DESIGN
Sequence methods - end	WITHOUT_CLASSIFICATION	0.9939849629381551	WITHOUT_CLASSIFICATION	0.006015037061844886	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997532110406913	WITHOUT_CLASSIFICATION	2.4678895930873386E-4	DESIGN
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9994466096017112	WITHOUT_CLASSIFICATION	5.53390398288929E-4	DESIGN
We must return a valid RDMS/RSA command from this method to prevent RDMS/RSA from issuing ERROR 400	WITHOUT_CLASSIFICATION	0.9972022951665701	WITHOUT_CLASSIFICATION	0.0027977048334297864	DESIGN
Used with DROP TABLE to delete all records in the table.	WITHOUT_CLASSIFICATION	0.9999361171860524	WITHOUT_CLASSIFICATION	6.388281394760589E-5	DESIGN
RDMS supports the UNION ALL clause.	WITHOUT_CLASSIFICATION	0.9996243198006656	WITHOUT_CLASSIFICATION	3.7568019933446005E-4	DESIGN
RDMS has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9989880391848323	WITHOUT_CLASSIFICATION	0.0010119608151677468	DESIGN
Multi-param dialect functions...	WITHOUT_CLASSIFICATION	0.9984401320622784	WITHOUT_CLASSIFICATION	0.001559867937721531	DESIGN
function templates	WITHOUT_CLASSIFICATION	0.999909589472373	WITHOUT_CLASSIFICATION	9.041052762694947E-5	DESIGN
not null is implicit	WITHOUT_CLASSIFICATION	0.9989265102154669	WITHOUT_CLASSIFICATION	0.00107348978453322	DESIGN
this assumes schema support, which is present in 1.8.0 and later...	WITHOUT_CLASSIFICATION	0.9998908988223567	WITHOUT_CLASSIFICATION	1.0910117764333578E-4	DESIGN
HSQLDB only supports READ_UNCOMMITTED transaction isolation	WITHOUT_CLASSIFICATION	0.9992618773680155	WITHOUT_CLASSIFICATION	7.381226319843784E-4	DESIGN
Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9991724813982652	WITHOUT_CLASSIFICATION	8.275186017348103E-4	DESIGN
Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9993149777642253	WITHOUT_CLASSIFICATION	6.850222357747218E-4	DESIGN
Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9990153207056736	WITHOUT_CLASSIFICATION	9.84679294326417E-4	DESIGN
simple nullability constraint	WITHOUT_CLASSIFICATION	0.9989334651714072	WITHOUT_CLASSIFICATION	0.0010665348285926661	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997532110406913	WITHOUT_CLASSIFICATION	2.4678895930873386E-4	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997532110406913	WITHOUT_CLASSIFICATION	2.4678895930873386E-4	DESIGN
not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9882728658225627	WITHOUT_CLASSIFICATION	0.011727134177437242	DESIGN
register the type of the out param - an Oracle specific type	WITHOUT_CLASSIFICATION	0.999751258368119	WITHOUT_CLASSIFICATION	2.4874163188113555E-4	DESIGN
TimesTen has no BLOB/CLOB support, but these types may be suitable for some applications. The length is limited to 4 million bytes.	WITHOUT_CLASSIFICATION	0.9977666412548237	WITHOUT_CLASSIFICATION	0.002233358745176259	DESIGN
new methods in dialect3	WITHOUT_CLASSIFICATION	0.9988832329730691	WITHOUT_CLASSIFICATION	0.0011167670269309753	DESIGN
public boolean supportsForUpdateNowait() {return false;}	WITHOUT_CLASSIFICATION	0.9995352224178085	WITHOUT_CLASSIFICATION	4.6477758219162904E-4	DESIGN
TimesTen has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9990500186324911	WITHOUT_CLASSIFICATION	9.499813675088914E-4	DESIGN
iterate entries ordered by capacity to find first fit	WITHOUT_CLASSIFICATION	0.999224116267779	WITHOUT_CLASSIFICATION	7.758837322210651E-4	DESIGN
add new ordered map	WITHOUT_CLASSIFICATION	0.9997710708815963	WITHOUT_CLASSIFICATION	2.2892911840369568E-4	DESIGN
registerColumnType( Types.VARCHAR, 16777215, "mediumtext" );	WITHOUT_CLASSIFICATION	0.9997107791996699	WITHOUT_CLASSIFICATION	2.892208003300943E-4	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997532110406913	WITHOUT_CLASSIFICATION	2.4678895930873386E-4	DESIGN
This assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.999868748649063	WITHOUT_CLASSIFICATION	1.3125135093694992E-4	DESIGN
sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9997161746677691	WITHOUT_CLASSIFICATION	2.838253322310297E-4	DESIGN
return "select CURRENT_TIMESTAMP from RDB$DATABASE";	WITHOUT_CLASSIFICATION	0.9986217170594682	WITHOUT_CLASSIFICATION	0.001378282940531811	DESIGN
registerColumnType data types	WITHOUT_CLASSIFICATION	0.999588867537724	WITHOUT_CLASSIFICATION	4.1113246227595583E-4	DESIGN
hibernate seems to ignore this type...	WITHOUT_CLASSIFICATION	0.9958147572629145	WITHOUT_CLASSIFICATION	0.004185242737085559	DESIGN
IBID for current_time and current_date	WITHOUT_CLASSIFICATION	0.9995072614850968	WITHOUT_CLASSIFICATION	4.927385149030878E-4	DESIGN
Tell hibernate to use getBytes instead of getBinaryStream	WITHOUT_CLASSIFICATION	0.9956677434603409	WITHOUT_CLASSIFICATION	0.0043322565396591295	DESIGN
No batch statements	WITHOUT_CLASSIFICATION	0.9999527077301172	WITHOUT_CLASSIFICATION	4.729226988272973E-5	DESIGN
We might want a special case for 19,2. This is very common for money types and here it is converted to 18,1	WITHOUT_CLASSIFICATION	0.7997073980184564	DESIGN	0.20029260198154364	WITHOUT_CLASSIFICATION
no pointbase BIT	WITHOUT_CLASSIFICATION	0.9997407345004227	WITHOUT_CLASSIFICATION	2.592654995773082E-4	DESIGN
no pointbase TINYINT	WITHOUT_CLASSIFICATION	0.9997586771989829	WITHOUT_CLASSIFICATION	2.4132280101696907E-4	DESIGN
Pointbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9971819705316579	WITHOUT_CLASSIFICATION	0.002818029468342022	DESIGN
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9994466096017112	WITHOUT_CLASSIFICATION	5.53390398288929E-4	DESIGN
The current_timestamp is more accurate, but only known to be supported in SQL Server 7.0 and later (i.e., Sybase not known to support it at all)	WITHOUT_CLASSIFICATION	0.9710321181967857	WITHOUT_CLASSIFICATION	0.02896788180321426	DESIGN
SQL Server (at least up through 2005) does not support defining cascade delete constraints which can circel back to the mutating table	WITHOUT_CLASSIFICATION	0.9999950097331065	WITHOUT_CLASSIFICATION	4.9902668935075375E-6	DESIGN
here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9842601690135805	WITHOUT_CLASSIFICATION	0.015739830986419363	DESIGN
registerColumnType( Types.BLOB, 16777215, "mediumblob" ); registerColumnType( Types.BLOB, 65535, "blob" );	WITHOUT_CLASSIFICATION	0.9997100555013311	WITHOUT_CLASSIFICATION	2.899444986689103E-4	DESIGN
registerColumnType( Types.CLOB, 16777215, "mediumtext" ); registerColumnType( Types.CLOB, 65535, "text" );	WITHOUT_CLASSIFICATION	0.9997221869042168	WITHOUT_CLASSIFICATION	2.778130957832288E-4	DESIGN
registerColumnType( Types.VARCHAR, 16777215, "mediumtext" ); registerColumnType( Types.VARCHAR, 65535, "text" );	WITHOUT_CLASSIFICATION	0.999728054368203	WITHOUT_CLASSIFICATION	2.719456317970281E-4	DESIGN
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9994466096017112	WITHOUT_CLASSIFICATION	5.53390398288929E-4	DESIGN
package-private	WITHOUT_CLASSIFICATION	0.9996932053039804	WITHOUT_CLASSIFICATION	3.067946960195699E-4	DESIGN
sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9997161746677691	WITHOUT_CLASSIFICATION	2.838253322310297E-4	DESIGN
Sybase BIT type does not support null values	WITHOUT_CLASSIFICATION	0.9990408764731313	WITHOUT_CLASSIFICATION	9.591235268687424E-4	DESIGN
This assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.999868748649063	WITHOUT_CLASSIFICATION	1.3125135093694992E-4	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997532110406913	WITHOUT_CLASSIFICATION	2.4678895930873386E-4	DESIGN
You may still have other ResultSets or update counts left to process here but you can't do it now or the ResultSet you just got will be closed	WITHOUT_CLASSIFICATION	0.9999990268199275	WITHOUT_CLASSIFICATION	9.731800724921797E-7	DESIGN
not null ... (start with 1) is implicit	WITHOUT_CLASSIFICATION	0.9894869954250458	WITHOUT_CLASSIFICATION	0.010513004574954224	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997532110406913	WITHOUT_CLASSIFICATION	2.4678895930873386E-4	DESIGN
Oracle driver reports to support getGeneratedKeys(), but they only support the version taking an array of the names of the columns to be returned (via its RETURNING clause). No other driver seems to support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999746135973931	WITHOUT_CLASSIFICATION	2.538640260682082E-5	DESIGN
Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9991724813982652	WITHOUT_CLASSIFICATION	8.275186017348103E-4	DESIGN
Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9993149777642253	WITHOUT_CLASSIFICATION	6.850222357747218E-4	DESIGN
Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9990153207056736	WITHOUT_CLASSIFICATION	9.84679294326417E-4	DESIGN
add another (inner) nested select add the main query close off the inner nested select	WITHOUT_CLASSIFICATION	0.999986430785567	WITHOUT_CLASSIFICATION	1.3569214432922756E-5	DESIGN
add the main query	WITHOUT_CLASSIFICATION	0.9998966533272614	WITHOUT_CLASSIFICATION	1.0334667273860996E-4	DESIGN
add the restriction to the outer select	WITHOUT_CLASSIFICATION	0.9999668752874575	WITHOUT_CLASSIFICATION	3.3124712542429E-5	DESIGN
This assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.999868748649063	WITHOUT_CLASSIFICATION	1.3125135093694992E-4	DESIGN
You may still have other ResultSets or update counts left to process here but you can't do it now or the ResultSet you just got will be closed	WITHOUT_CLASSIFICATION	0.9999990268199275	WITHOUT_CLASSIFICATION	9.731800724921797E-7	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997532110406913	WITHOUT_CLASSIFICATION	2.4678895930873386E-4	DESIGN
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9994466096017112	WITHOUT_CLASSIFICATION	5.53390398288929E-4	DESIGN
simple nullability constraint	WITHOUT_CLASSIFICATION	0.9989334651714072	WITHOUT_CLASSIFICATION	0.0010665348285926661	DESIGN
not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9882728658225627	WITHOUT_CLASSIFICATION	0.011727134177437242	DESIGN
register the type of the out param - an Oracle specific type	WITHOUT_CLASSIFICATION	0.999751258368119	WITHOUT_CLASSIFICATION	2.4874163188113555E-4	DESIGN
features which change between 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998675173852347	WITHOUT_CLASSIFICATION	1.3248261476533533E-4	DESIGN
features which remain constant across 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998843098035873	WITHOUT_CLASSIFICATION	1.1569019641262013E-4	DESIGN
binary %Stream character %Stream	WITHOUT_CLASSIFICATION	0.9999633593005022	WITHOUT_CLASSIFICATION	3.6640699497750984E-5	DESIGN
getDefaultProperties().setProperty(Environment.STATEMENT_BATCH_SIZE, NO_BATCH);	WITHOUT_CLASSIFICATION	0.9994515852581775	WITHOUT_CLASSIFICATION	5.484147418224609E-4	DESIGN
hibernate impelemnts cast in Dialect.java	WITHOUT_CLASSIFICATION	0.997533704369934	WITHOUT_CLASSIFICATION	0.002466295630066024	DESIGN
aggregate functions shouldn't be registered, right? registerFunction( "list", new StandardSQLFunction("list",Hibernate.STRING) ); stopped on $list	WITHOUT_CLASSIFICATION	0.6764704608795463	DESIGN	0.3235295391204537	WITHOUT_CLASSIFICATION
DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9990828012106451	WITHOUT_CLASSIFICATION	9.171987893549786E-4	DESIGN
below is for Cache' that don't have str in 2007.1 there is str and we register str directly	WITHOUT_CLASSIFICATION	0.9990423804111705	WITHOUT_CLASSIFICATION	9.576195888294141E-4	DESIGN
note that %string is deprecated	WITHOUT_CLASSIFICATION	0.981807282210875	WITHOUT_CLASSIFICATION	0.01819271778912496	DESIGN
%upper is deprecated	WITHOUT_CLASSIFICATION	0.9862770689441055	WITHOUT_CLASSIFICATION	0.013722931055894621	DESIGN
The syntax used to add a foreign key constraint to a table.	WITHOUT_CLASSIFICATION	0.9615360965067953	WITHOUT_CLASSIFICATION	0.03846390349320467	DESIGN
identifier-commalist	WITHOUT_CLASSIFICATION	0.9995868833392739	WITHOUT_CLASSIFICATION	4.131166607260134E-4	DESIGN
IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9990828012106451	WITHOUT_CLASSIFICATION	9.171987893549786E-4	DESIGN
SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992434513079232	WITHOUT_CLASSIFICATION	7.56548692076843E-4	DESIGN
temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9950317101633942	WITHOUT_CLASSIFICATION	0.00496828983660578	DESIGN
identifier-commalist	WITHOUT_CLASSIFICATION	0.9995868833392739	WITHOUT_CLASSIFICATION	4.131166607260134E-4	DESIGN
The syntax used to add a column to a table	WITHOUT_CLASSIFICATION	0.9974416262821735	WITHOUT_CLASSIFICATION	0.0025583737178265006	DESIGN
Completely optional cascading drop clause.	WITHOUT_CLASSIFICATION	0.9985073159277887	WITHOUT_CLASSIFICATION	0.0014926840722112738	DESIGN
lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9991976339520865	WITHOUT_CLASSIFICATION	8.023660479135528E-4	DESIGN
LIMIT support (ala TOP) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9990828012106451	WITHOUT_CLASSIFICATION	9.171987893549786E-4	DESIGN
InterSystems Cache' does not current support "SELECT ... FOR UPDATE" syntax... Set your transaction mode to READ_COMMITTED before using	WITHOUT_CLASSIFICATION	0.9964457090856775	WITHOUT_CLASSIFICATION	0.0035542909143223824	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997532110406913	WITHOUT_CLASSIFICATION	2.4678895930873386E-4	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997532110406913	WITHOUT_CLASSIFICATION	2.4678895930873386E-4	DESIGN
<String>	WITHOUT_CLASSIFICATION	0.9996293559181235	WITHOUT_CLASSIFICATION	3.706440818764143E-4	DESIGN
callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9919851598641647	WITHOUT_CLASSIFICATION	0.008014840135835316	DESIGN
miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9990828012106451	WITHOUT_CLASSIFICATION	9.171987893549786E-4	DESIGN
The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9172431376181183	WITHOUT_CLASSIFICATION	0.08275686238188172	DESIGN
Does the LIMIT clause come at the start of the SELECT statement, rather than at the end?	WITHOUT_CLASSIFICATION	0.9853261162082052	WITHOUT_CLASSIFICATION	0.01467388379179482	DESIGN
Does the LIMIT clause take a "maximum" row number instead of a total number of returned rows?	WITHOUT_CLASSIFICATION	0.9956454393236362	WITHOUT_CLASSIFICATION	0.004354560676363802	DESIGN
The name of the SQL function that transforms a string to lowercase	WITHOUT_CLASSIFICATION	0.9997032806861097	WITHOUT_CLASSIFICATION	2.9671931389038935E-4	DESIGN
Create an OuterJoinGenerator for this dialect.	WITHOUT_CLASSIFICATION	0.999205817843505	WITHOUT_CLASSIFICATION	7.941821564948835E-4	DESIGN
The keyword used to insert a row without specifying any column values	WITHOUT_CLASSIFICATION	0.999928699034623	WITHOUT_CLASSIFICATION	7.130096537703668E-5	DESIGN
registerFunction( "trim", new StandardSQLFunction( "trim", Hibernate.STRING ) );	WITHOUT_CLASSIFICATION	0.9988298775315742	WITHOUT_CLASSIFICATION	0.0011701224684257958	DESIGN
skip the FROM keyword in params	WITHOUT_CLASSIFICATION	0.9999184995066979	WITHOUT_CLASSIFICATION	8.150049330215504E-5	DESIGN
package	WITHOUT_CLASSIFICATION	0.9984867178818834	WITHOUT_CLASSIFICATION	0.0015132821181166305	DESIGN
potentialTrimCharacterArgIndex = 1 assumes that a trim-specification has been specified. we handle the exception to that explicitly	WITHOUT_CLASSIFICATION	0.999883819867448	WITHOUT_CLASSIFICATION	1.1618013255196501E-4	DESIGN
SQLFunction implementation	WITHOUT_CLASSIFICATION	0.9997024495735723	WITHOUT_CLASSIFICATION	2.97550426427645E-4	DESIGN
conceivable that the dialect ctor could throw HibernateExceptions, so don't re-wrap	WITHOUT_CLASSIFICATION	0.9778324095839688	WITHOUT_CLASSIFICATION	0.022167590416031172	DESIGN
register the standard dialect resolver	WITHOUT_CLASSIFICATION	0.9998955407456441	WITHOUT_CLASSIFICATION	1.0445925435588764E-4	DESIGN
register resolvers set via Environment property	WITHOUT_CLASSIFICATION	0.9998441950818133	WITHOUT_CLASSIFICATION	1.5580491818664423E-4	DESIGN
kept for backward compatibility until after the 3.1beta5 release of HA	WITHOUT_CLASSIFICATION	0.9999693228794737	WITHOUT_CLASSIFICATION	3.067712052620084E-5	DESIGN
cache the hashcode	WITHOUT_CLASSIFICATION	0.999499875682429	WITHOUT_CLASSIFICATION	5.001243175709713E-4	DESIGN
the CascadingAction contract ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997087674269539	WITHOUT_CLASSIFICATION	2.9123257304605407E-4	DESIGN
the CascadingAction implementations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997276529604684	WITHOUT_CLASSIFICATION	2.723470395315359E-4	DESIGN
delete does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999519298120985	WITHOUT_CLASSIFICATION	4.807018790143371E-5	DESIGN
orphans should be deleted during delete	WITHOUT_CLASSIFICATION	0.9974797274654742	WITHOUT_CLASSIFICATION	0.002520272534525842	DESIGN
(LockMode) anything	WITHOUT_CLASSIFICATION	0.9998764033359442	WITHOUT_CLASSIFICATION	1.2359666405577062E-4	DESIGN
lock doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9997485155069467	WITHOUT_CLASSIFICATION	2.514844930533406E-4	DESIGN
refresh doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9998489703950237	WITHOUT_CLASSIFICATION	1.5102960497630162E-4	DESIGN
evicts don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9997181103355679	WITHOUT_CLASSIFICATION	2.8188966443205106E-4	DESIGN
saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999101264728982	WITHOUT_CLASSIFICATION	8.987352710184925E-5	DESIGN
orphans should be deleted during save/update	WITHOUT_CLASSIFICATION	0.9963789961503728	WITHOUT_CLASSIFICATION	0.003621003849627055	DESIGN
for deprecated saveOrUpdateCopy()	WITHOUT_CLASSIFICATION	0.983979384359265	WITHOUT_CLASSIFICATION	0.01602061564073496	DESIGN
persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9997181103355679	WITHOUT_CLASSIFICATION	2.8188966443205106E-4	DESIGN
a proxy cannot be transient and it breaks ForeignKeys.isTransient	WITHOUT_CLASSIFICATION	0.9995830371068285	WITHOUT_CLASSIFICATION	4.169628931714724E-4	DESIGN
replicate does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999308602726217	WITHOUT_CLASSIFICATION	6.913972737831352E-5	DESIGN
static helper methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994682559175192	WITHOUT_CLASSIFICATION	5.317440824808822E-4	DESIGN
handles arrays and newly instantiated collections	WITHOUT_CLASSIFICATION	0.9996471943330535	WITHOUT_CLASSIFICATION	3.528056669465391E-4	DESIGN
Actually the semantics of the next three are really "Bag" Note that, unlike objects, collection insertions, updates, deletions are not really remembered between flushes. We just re-use the same Lists for convenience.	WITHOUT_CLASSIFICATION	0.8827251456514577	WITHOUT_CLASSIFICATION	0.11727485434854236	DESIGN
Add these directly to the executions queue	WITHOUT_CLASSIFICATION	0.9989974507318431	WITHOUT_CLASSIFICATION	0.0010025492681569358	DESIGN
continue loop	WITHOUT_CLASSIFICATION	0.9999571019439896	WITHOUT_CLASSIFICATION	4.289805601038497E-5	DESIGN
sort the updates by fk	WITHOUT_CLASSIFICATION	0.9997720144329333	WITHOUT_CLASSIFICATION	2.279855670668291E-4	DESIGN
sort the updates by pk	WITHOUT_CLASSIFICATION	0.9997720144329333	WITHOUT_CLASSIFICATION	2.279855670668291E-4	DESIGN
the mapping of entity names to their latest batch numbers.	WITHOUT_CLASSIFICATION	0.999979380668817	WITHOUT_CLASSIFICATION	2.061933118292528E-5	DESIGN
the map of batch numbers to EntityInsertAction lists	WITHOUT_CLASSIFICATION	0.9995298402343751	WITHOUT_CLASSIFICATION	4.7015976562487155E-4	DESIGN
optimize the hash size to eliminate a rehash.	WITHOUT_CLASSIFICATION	0.9994732910451027	WITHOUT_CLASSIFICATION	5.267089548971711E-4	DESIGN
the list of entity names that indicate the batch number	WITHOUT_CLASSIFICATION	0.9999481582266568	WITHOUT_CLASSIFICATION	5.1841773343197233E-5	DESIGN
remove the current element from insertions. It will be added back later.	WITHOUT_CLASSIFICATION	0.9996870705392299	WITHOUT_CLASSIFICATION	3.129294607700679E-4	DESIGN
the entity associated with the current action.	WITHOUT_CLASSIFICATION	0.9997639890246015	WITHOUT_CLASSIFICATION	2.3601097539848896E-4	DESIGN
There is already an existing batch for this type of entity. Check to see if the latest batch is acceptable.	WITHOUT_CLASSIFICATION	0.9994134237626012	WITHOUT_CLASSIFICATION	5.865762373988581E-4	DESIGN
now rebuild the insertions list. There is a batch for each entry in the name list.	WITHOUT_CLASSIFICATION	0.9996451668065098	WITHOUT_CLASSIFICATION	3.548331934901639E-4	DESIGN
the current batch number is the latest batch for this entity type.	WITHOUT_CLASSIFICATION	0.9968022230328573	WITHOUT_CLASSIFICATION	0.003197776967142792	DESIGN
loop through all the associations of the current entity and make sure that they are processed before the current batch number	WITHOUT_CLASSIFICATION	0.9999759181243733	WITHOUT_CLASSIFICATION	2.4081875626746134E-5	DESIGN
find the batch number associated with the current association, if any.	WITHOUT_CLASSIFICATION	0.9999564356770275	WITHOUT_CLASSIFICATION	4.3564322972520044E-5	DESIGN
create a new batch for this type. The batch number is the number of current batches.	WITHOUT_CLASSIFICATION	0.9995459239871078	WITHOUT_CLASSIFICATION	4.54076012892208E-4	DESIGN
loop through all the associated entities and make sure they have been processed before the latest batch associated with this entity type.	WITHOUT_CLASSIFICATION	0.9999202594445249	WITHOUT_CLASSIFICATION	7.974055547512617E-5	DESIGN
since this entity will now be processed in the latest possible batch, we can be assured that it will come after all other associations, there's not need to continue checking.	WITHOUT_CLASSIFICATION	0.9792555033951583	WITHOUT_CLASSIFICATION	0.02074449660484165	DESIGN
cascade to current collection elements	WITHOUT_CLASSIFICATION	0.9998924364073773	WITHOUT_CLASSIFICATION	1.0756359262271985E-4	DESIGN
not really necessary, but good for consistency...	WITHOUT_CLASSIFICATION	0.9334143526283174	WITHOUT_CLASSIFICATION	0.06658564737168267	DESIGN
we can't cascade to non-embedded elements	WITHOUT_CLASSIFICATION	0.9996734010242316	WITHOUT_CLASSIFICATION	3.2659897576831266E-4	DESIGN
a newly instantiated collection can't have orphans	WITHOUT_CLASSIFICATION	0.998623158774133	WITHOUT_CLASSIFICATION	0.0013768412258669913	DESIGN
handle orphaned entities!!	WITHOUT_CLASSIFICATION	0.9970975836709512	WITHOUT_CLASSIFICATION	0.0029024163290486803	DESIGN
Loaded entity instances, by EntityUniqueKey	WITHOUT_CLASSIFICATION	0.9992757376707607	WITHOUT_CLASSIFICATION	7.242623292393168E-4	DESIGN
Identity map of EntityEntry instances, by the entity instance	WITHOUT_CLASSIFICATION	0.9996086675678584	WITHOUT_CLASSIFICATION	3.913324321415245E-4	DESIGN
Entity proxies, by EntityKey	WITHOUT_CLASSIFICATION	0.9994619779071935	WITHOUT_CLASSIFICATION	5.380220928064912E-4	DESIGN
Snapshots of current database state for entities that have not been loaded	WITHOUT_CLASSIFICATION	0.9994479030658705	WITHOUT_CLASSIFICATION	5.520969341295614E-4	DESIGN
Identity map of array holder ArrayHolder instances, by the array instance	WITHOUT_CLASSIFICATION	0.9999487971471258	WITHOUT_CLASSIFICATION	5.1202852874220915E-5	DESIGN
Collection wrappers, by the CollectionKey key=CollectionKey, value=PersistentCollection	WITHOUT_CLASSIFICATION	0.9998055436310453	WITHOUT_CLASSIFICATION	1.9445636895461826E-4	DESIGN
Set of EntityKeys of deleted objects	WITHOUT_CLASSIFICATION	0.9998751870755692	WITHOUT_CLASSIFICATION	1.2481292443090912E-4	DESIGN
properties that we have tried to load, and not found in the database	WITHOUT_CLASSIFICATION	0.999644204454755	WITHOUT_CLASSIFICATION	3.5579554524502654E-4	DESIGN
A list of collection wrappers that were instantiating during result set processing, that we will need to initialize at the end of the query	WITHOUT_CLASSIFICATION	0.9998317261915999	WITHOUT_CLASSIFICATION	1.6827380840022453E-4	DESIGN
A container for collections we load up when the owning entity is not yet loaded ... for now, this is purely transient!	WITHOUT_CLASSIFICATION	0.758508283907971	WITHOUT_CLASSIFICATION	0.2414917160920291	DESIGN
Downgrade locks	WITHOUT_CLASSIFICATION	0.9996443622499526	WITHOUT_CLASSIFICATION	3.5563775004749705E-4	DESIGN
any earlier proxy takes precedence	WITHOUT_CLASSIFICATION	0.9999472250510344	WITHOUT_CLASSIFICATION	5.2774948965514445E-5	DESIGN
unwrap the object	WITHOUT_CLASSIFICATION	0.9997626708171218	WITHOUT_CLASSIFICATION	2.373291828781876E-4	DESIGN
initialize + unwrap the object	WITHOUT_CLASSIFICATION	0.999607879880765	WITHOUT_CLASSIFICATION	3.921201192349269E-4	DESIGN
return the proxied object	WITHOUT_CLASSIFICATION	0.9992916371293361	WITHOUT_CLASSIFICATION	7.083628706637623E-4	DESIGN
overwrite old proxy	WITHOUT_CLASSIFICATION	0.9999917735897953	WITHOUT_CLASSIFICATION	8.226410204704526E-6	DESIGN
early exit...	WITHOUT_CLASSIFICATION	0.9997790690418312	WITHOUT_CLASSIFICATION	2.2093095816873534E-4	DESIGN
or should it actually throw an exception?	WITHOUT_CLASSIFICATION	0.9959404754032215	WITHOUT_CLASSIFICATION	0.004059524596778432	DESIGN
treat it just like a new collection	WITHOUT_CLASSIFICATION	0.997745740721931	WITHOUT_CLASSIFICATION	0.0022542592780688954	DESIGN
do this work only at the very highest level of the load don't let this method be called recursively	WITHOUT_CLASSIFICATION	0.5080744308664058	WITHOUT_CLASSIFICATION	0.4919255691335942	DESIGN
note that each iteration of the loop may add new elements	WITHOUT_CLASSIFICATION	0.9999949631147707	WITHOUT_CLASSIFICATION	5.036885229413571E-6	DESIGN
it might be an unwrapped collection reference! try to find a wrapper (slowish)	WITHOUT_CLASSIFICATION	0.994477289598532	WITHOUT_CLASSIFICATION	0.005522710401468018	DESIGN
public boolean isNonExistant(EntityKey key) {return nonExistantEntityKeys.contains(key);}	WITHOUT_CLASSIFICATION	0.9995352224178085	WITHOUT_CLASSIFICATION	4.6477758219162904E-4	DESIGN
public boolean isNonExistant(EntityUniqueKey key) {return nonExistentEntityUniqueKeys.contains(key);}	WITHOUT_CLASSIFICATION	0.9995352224178085	WITHOUT_CLASSIFICATION	4.6477758219162904E-4	DESIGN
iterate all the entities currently associated with the persistence context.	WITHOUT_CLASSIFICATION	0.9951367259057584	WITHOUT_CLASSIFICATION	0.004863274094241677	DESIGN
does this entity entry pertain to the entity persister in which we are interested (owner)?	WITHOUT_CLASSIFICATION	0.9959206079156075	WITHOUT_CLASSIFICATION	0.004079392084392458	DESIGN
check if the managed object is the parent	WITHOUT_CLASSIFICATION	0.9993005070100541	WITHOUT_CLASSIFICATION	6.994929899459177E-4	DESIGN
otherwise, the proxy was pruned during the serialization process	WITHOUT_CLASSIFICATION	0.9999958047978316	WITHOUT_CLASSIFICATION	4.195202168518346E-6	DESIGN
adds remove as a sort-of alias for delete...	WITHOUT_CLASSIFICATION	0.9998769115953987	WITHOUT_CLASSIFICATION	1.2308840460131053E-4	DESIGN
bad cast	WITHOUT_CLASSIFICATION	0.9975087197718312	WITHOUT_CLASSIFICATION	0.0024912802281687363	DESIGN
return lhsPersister.getSubclassPropertyColumnNames(property);	WITHOUT_CLASSIFICATION	0.9995306575614306	WITHOUT_CLASSIFICATION	4.6934243856944186E-4	DESIGN
property-refs for associations defined on a component are not supported, so no need to slice	WITHOUT_CLASSIFICATION	0.9989312984172145	WITHOUT_CLASSIFICATION	0.0010687015827855512	DESIGN
if there is no property-ref, assume the join is to the subclass table (ie. the table of the subclass that the association belongs to)	WITHOUT_CLASSIFICATION	0.9999460796584488	WITHOUT_CLASSIFICATION	5.392034155123308E-5	DESIGN
handle a property-ref	WITHOUT_CLASSIFICATION	0.9943128585696548	WITHOUT_CLASSIFICATION	0.005687141430345299	DESIGN
NativeSQLQueryReturn	WITHOUT_CLASSIFICATION	0.9995868833392739	WITHOUT_CLASSIFICATION	4.131166607260134E-4	DESIGN
final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999406463564933	WITHOUT_CLASSIFICATION	5.935364350666911E-5	DESIGN
why is all others non final ?	WITHOUT_CLASSIFICATION	0.9530827524263725	WITHOUT_CLASSIFICATION	0.046917247573627495	DESIGN
this.forceCacheRefresh = forceCacheRefresh;	WITHOUT_CLASSIFICATION	0.9997866385756121	WITHOUT_CLASSIFICATION	2.1336142438781348E-4	DESIGN
HELLA IMPORTANT OPTIMIZATION!!!	WITHOUT_CLASSIFICATION	0.9994571781088003	WITHOUT_CLASSIFICATION	5.428218911997066E-4	DESIGN
return that.type.equals(type) && EqualsHelper.equals(that.value, value);	WITHOUT_CLASSIFICATION	0.9987153190172681	WITHOUT_CLASSIFICATION	0.001284680982731885	DESIGN
Must occur after resolving identifiers!	WITHOUT_CLASSIFICATION	0.9988201526701684	WITHOUT_CLASSIFICATION	0.0011798473298315927	DESIGN
take a snapshot	WITHOUT_CLASSIFICATION	0.9995182895376648	WITHOUT_CLASSIFICATION	4.8171046233530773E-4	DESIGN
do a check	WITHOUT_CLASSIFICATION	0.999675474038234	WITHOUT_CLASSIFICATION	3.2452596176594855E-4	DESIGN
the owning entity may have been deleted and its identifier unset due to identifier-rollback; in which case, try to look up its identifier from the persistence context	WITHOUT_CLASSIFICATION	0.998943603577851	WITHOUT_CLASSIFICATION	0.0010563964221491273	DESIGN
do the work	WITHOUT_CLASSIFICATION	0.999426520437222	WITHOUT_CLASSIFICATION	5.734795627780684E-4	DESIGN
We've been here before	WITHOUT_CLASSIFICATION	0.9968168365853287	WITHOUT_CLASSIFICATION	0.003183163414671268	DESIGN
it is or was referenced _somewhere_	WITHOUT_CLASSIFICATION	0.9997612869544569	WITHOUT_CLASSIFICATION	2.3871304554310725E-4	DESIGN
do the work	WITHOUT_CLASSIFICATION	0.999426520437222	WITHOUT_CLASSIFICATION	5.734795627780684E-4	DESIGN
if either its role changed,	WITHOUT_CLASSIFICATION	0.9999667734213835	WITHOUT_CLASSIFICATION	3.322657861637278E-5	DESIGN
or its key changed	WITHOUT_CLASSIFICATION	0.9999941419505566	WITHOUT_CLASSIFICATION	5.858049443424943E-6	DESIGN
we will need to create new entries	WITHOUT_CLASSIFICATION	0.9995021338189611	WITHOUT_CLASSIFICATION	4.978661810389733E-4	DESIGN
we will need to remove ye olde entries	WITHOUT_CLASSIFICATION	0.996179864680342	WITHOUT_CLASSIFICATION	0.0038201353196578485	DESIGN
force initialize!	WITHOUT_CLASSIFICATION	0.9990765805956863	WITHOUT_CLASSIFICATION	9.234194043136166E-4	DESIGN
else if it's elements changed	WITHOUT_CLASSIFICATION	0.9999939500728744	WITHOUT_CLASSIFICATION	6.0499271255390225E-6	DESIGN
ATTRIBUTES MAINTAINED BETWEEN FLUSH CYCLES	WITHOUT_CLASSIFICATION	0.9994701093678813	WITHOUT_CLASSIFICATION	5.298906321188328E-4	DESIGN
session-start/post-flush persistent state	WITHOUT_CLASSIFICATION	0.999593251858528	WITHOUT_CLASSIFICATION	4.0674814147209024E-4	DESIGN
allow the CollectionSnapshot to be serialized	WITHOUT_CLASSIFICATION	0.9980357279452171	WITHOUT_CLASSIFICATION	0.001964272054782832	DESIGN
ATTRIBUTES USED ONLY DURING FLUSH CYCLE	WITHOUT_CLASSIFICATION	0.9969752979352721	WITHOUT_CLASSIFICATION	0.003024702064727817	DESIGN
"current" means the reference that was found during flush()	WITHOUT_CLASSIFICATION	0.9999719340374603	WITHOUT_CLASSIFICATION	2.806596253967613E-5	DESIGN
"loaded" means the reference that is consistent with the current database state	WITHOUT_CLASSIFICATION	0.9998886378610616	WITHOUT_CLASSIFICATION	1.1136213893832534E-4	DESIGN
during flush, we navigate the object graph to collections and decide what to do with them	WITHOUT_CLASSIFICATION	0.9899472872280317	WITHOUT_CLASSIFICATION	0.010052712771968331	DESIGN
if we instantiate a collection during the flush() process, we must ignore it for the rest of the flush()	WITHOUT_CLASSIFICATION	0.9999358162857769	WITHOUT_CLASSIFICATION	6.418371422309694E-5	DESIGN
new collections that get found + wrapped during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.992712188075713	WITHOUT_CLASSIFICATION	0.007287811924286892	DESIGN
a newly wrapped collection is NOT dirty (or we get unnecessary version updates)	WITHOUT_CLASSIFICATION	0.5928285236580841	WITHOUT_CLASSIFICATION	0.40717147634191586	DESIGN
collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9990109555261806	WITHOUT_CLASSIFICATION	9.890444738194786E-4	DESIGN
collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9990109555261806	WITHOUT_CLASSIFICATION	9.890444738194786E-4	DESIGN
detached collections that get found + reattached during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9990541670392269	WITHOUT_CLASSIFICATION	9.458329607730568E-4	DESIGN
optimization	WITHOUT_CLASSIFICATION	0.9998401784760147	WITHOUT_CLASSIFICATION	1.5982152398533194E-4	DESIGN
optimization optimization	WITHOUT_CLASSIFICATION	0.9996172353458403	WITHOUT_CLASSIFICATION	3.8276465415973903E-4	DESIGN
re-snapshot	WITHOUT_CLASSIFICATION	0.9995868833392739	WITHOUT_CLASSIFICATION	4.131166607260134E-4	DESIGN
for convenience to save some lookups	WITHOUT_CLASSIFICATION	0.9995559149071837	WITHOUT_CLASSIFICATION	4.440850928164515E-4	DESIGN
NOTE: this is not updated when properties are fetched lazily!	WITHOUT_CLASSIFICATION	0.9995038137186476	WITHOUT_CLASSIFICATION	4.961862813523707E-4	DESIGN
memory optimization	WITHOUT_CLASSIFICATION	0.9999356177259393	WITHOUT_CLASSIFICATION	6.438227406073901E-5	DESIGN
use the id value of a newly instantiated instance as the unsaved-value	WITHOUT_CLASSIFICATION	0.9987567096463758	WITHOUT_CLASSIFICATION	0.001243290353624211	DESIGN
copied from Session:	WITHOUT_CLASSIFICATION	0.9928793405069967	WITHOUT_CLASSIFICATION	0.007120659493003285	DESIGN
this should not happen since the DTD prevents it	WITHOUT_CLASSIFICATION	0.9992452289482571	WITHOUT_CLASSIFICATION	7.54771051742984E-4	DESIGN
JoinProcessor needs to know if the where clause fragment came from a dynamic filter or not so it can put the where clause fragment in the right place in the SQL AST. 'hasFilterCondition' keeps track of that fact.	WITHOUT_CLASSIFICATION	0.9997270176860032	WITHOUT_CLASSIFICATION	2.7298231399664266E-4	DESIGN
the current join represents the join between a many-to-many association table and its "target" table. Here we need to apply any additional filters defined specifically on the many-to-many	WITHOUT_CLASSIFICATION	0.9999997976475961	WITHOUT_CLASSIFICATION	2.0235240386310793E-7	DESIGN
check basic level one nullablilty	WITHOUT_CLASSIFICATION	0.9998548595507768	WITHOUT_CLASSIFICATION	1.4514044922316286E-4	DESIGN
values is not null and is checkable, we'll look deeper	WITHOUT_CLASSIFICATION	0.9972775456207689	WITHOUT_CLASSIFICATION	0.0027224543792312476	DESIGN
for non null args, check for components and elements containing components	WITHOUT_CLASSIFICATION	0.9999533159354599	WITHOUT_CLASSIFICATION	4.668406454012869E-5	DESIGN
cache the hashcode	WITHOUT_CLASSIFICATION	0.999499875682429	WITHOUT_CLASSIFICATION	5.001243175709713E-4	DESIGN
persistent collections may have components	WITHOUT_CLASSIFICATION	0.999696130729982	WITHOUT_CLASSIFICATION	3.0386927001804315E-4	DESIGN
check for all components values in the collection	WITHOUT_CLASSIFICATION	0.99995390434264	WITHOUT_CLASSIFICATION	4.609565736006899E-5	DESIGN
will check current level if some of them are not null or sublevels if they exist	WITHOUT_CLASSIFICATION	0.9998668080019186	WITHOUT_CLASSIFICATION	1.3319199808127448E-4	DESIGN
do the test	WITHOUT_CLASSIFICATION	0.9999721544681852	WITHOUT_CLASSIFICATION	2.7845531814715616E-5	DESIGN
if its an uninitialized proxy it can't be transient	WITHOUT_CLASSIFICATION	0.9999729615280128	WITHOUT_CLASSIFICATION	2.7038471987178044E-5	DESIGN
unwrap it	WITHOUT_CLASSIFICATION	0.9997610416740109	WITHOUT_CLASSIFICATION	2.389583259890063E-4	DESIGN
See if the entity is already bound to this session, if not look at the entity identifier and assume that the entity is persistent if the id is not "unsaved" (that is, we rely on foreign keys to keep database integrity)	WITHOUT_CLASSIFICATION	0.9255931998880526	WITHOUT_CLASSIFICATION	0.07440680011194754	DESIGN
an unfetched association can only point to an entity that already exists in the db	WITHOUT_CLASSIFICATION	0.9999614132760571	WITHOUT_CLASSIFICATION	3.8586723942803856E-5	DESIGN
let the interceptor inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9955696906478669	WITHOUT_CLASSIFICATION	0.004430309352133066	DESIGN
let the persister inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9855748760498695	WITHOUT_CLASSIFICATION	0.014425123950130472	DESIGN
we use the assumed value, if there is one, to avoid hitting the database	WITHOUT_CLASSIFICATION	0.9997427231054979	WITHOUT_CLASSIFICATION	2.572768945020466E-4	DESIGN
hit the database, after checking the session cache for a snapshot	WITHOUT_CLASSIFICATION	0.7649275473656831	WITHOUT_CLASSIFICATION	0.23507245263431675	DESIGN
context-entity-identifier returns null explicitly if the entity is not associated with the persistence context; so make some deeper checks...	WITHOUT_CLASSIFICATION	0.9998324546883285	WITHOUT_CLASSIFICATION	1.6754531167142037E-4	DESIGN
int count = 0;	WITHOUT_CLASSIFICATION	0.9999785375611464	WITHOUT_CLASSIFICATION	2.146243885358216E-5	DESIGN
the first key found after the given key	WITHOUT_CLASSIFICATION	0.9999862461587157	WITHOUT_CLASSIFICATION	1.3753841284315053E-5	DESIGN
checkForEnd = false;	WITHOUT_CLASSIFICATION	0.9998125530990902	WITHOUT_CLASSIFICATION	1.8744690090987634E-4	DESIGN
count++;	WITHOUT_CLASSIFICATION	0.999627030731016	WITHOUT_CLASSIFICATION	3.7296926898392813E-4	DESIGN
end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999430757588085	WITHOUT_CLASSIFICATION	5.692424119157817E-5	DESIGN
we ran out of keys to try	WITHOUT_CLASSIFICATION	0.9991318329099673	WITHOUT_CLASSIFICATION	8.681670900325952E-4	DESIGN
first element of array is reserved for the actual instance we are loading!	WITHOUT_CLASSIFICATION	0.9975783201636986	WITHOUT_CLASSIFICATION	0.002421679836301318	DESIGN
the first id found after the given id	WITHOUT_CLASSIFICATION	0.9999543159679993	WITHOUT_CLASSIFICATION	4.568403200070948E-5	DESIGN
we ran out of ids to try	WITHOUT_CLASSIFICATION	0.9994483268413811	WITHOUT_CLASSIFICATION	5.516731586188759E-4	DESIGN
look for existing collection as part of the persistence context	WITHOUT_CLASSIFICATION	0.9990580639777535	WITHOUT_CLASSIFICATION	9.419360222464624E-4	DESIGN
ignore this row of results! Note the early exit	WITHOUT_CLASSIFICATION	0.999989011572343	WITHOUT_CLASSIFICATION	1.0988427657097632E-5	DESIGN
initialize this collection	WITHOUT_CLASSIFICATION	0.990313589857791	WITHOUT_CLASSIFICATION	0.009686410142208916	DESIGN
create one	WITHOUT_CLASSIFICATION	0.9996938454770595	WITHOUT_CLASSIFICATION	3.0615452294048133E-4	DESIGN
warning: can cause a recursive calls! (proxy initialization)	WITHOUT_CLASSIFICATION	0.9953998474014647	WITHOUT_CLASSIFICATION	0.004600152598535293	DESIGN
there were no queued additions and the role has a cache	WITHOUT_CLASSIFICATION	0.9999608390431531	WITHOUT_CLASSIFICATION	3.91609568469445E-5	DESIGN
and this is not a forced initialization during flush	WITHOUT_CLASSIFICATION	0.9808362282462013	WITHOUT_CLASSIFICATION	0.019163771753798693	DESIGN
some filters affecting the collection are enabled on the session, so do not do the put into the cache.	WITHOUT_CLASSIFICATION	0.9947308542456109	WITHOUT_CLASSIFICATION	0.005269145754389075	DESIGN
cleanup code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998385803194756	WITHOUT_CLASSIFICATION	1.6141968052432612E-4	DESIGN
loading collection xrefs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996478350685277	WITHOUT_CLASSIFICATION	3.521649314722974E-4	DESIGN
Collection load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995175593884327	WITHOUT_CLASSIFICATION	4.824406115673945E-4	DESIGN
simple cache of param metadata based on query string. Ideally, the original "user-supplied query" string should be used to retreive this metadata (i.e., not the para-list-expanded query string) to avoid unnecessary cache entries. Used solely for caching param metadata for native-sql queries, see getSQLParameterMetadata() for a discussion as to why...	WITHOUT_CLASSIFICATION	0.9892976332326047	WITHOUT_CLASSIFICATION	0.010702366767395211	DESIGN
the cache of the actual plans...	WITHOUT_CLASSIFICATION	0.99959393776277	WITHOUT_CLASSIFICATION	4.060622372299539E-4	DESIGN
package	WITHOUT_CLASSIFICATION	0.9984867178818834	WITHOUT_CLASSIFICATION	0.0015132821181166305	DESIGN
package	WITHOUT_CLASSIFICATION	0.9984867178818834	WITHOUT_CLASSIFICATION	0.0015132821181166305	DESIGN
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999942031671425	WITHOUT_CLASSIFICATION	5.7968328576020365E-6	DESIGN
for native-sql queries, the param metadata is determined outside any relation to a query plan, because query plan creation and/or retreival for a native-sql query depends on all of the return types having been set, which might not be the case up-front when param metadata would be most useful	WITHOUT_CLASSIFICATION	0.9999554924356423	WITHOUT_CLASSIFICATION	4.450756435772361E-5	DESIGN
don't care...	WITHOUT_CLASSIFICATION	0.9991877506482677	WITHOUT_CLASSIFICATION	8.122493517321753E-4	DESIGN
Recognition code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9991443056080278	WITHOUT_CLASSIFICATION	8.556943919721486E-4	DESIGN
don't care...	WITHOUT_CLASSIFICATION	0.9991877506482677	WITHOUT_CLASSIFICATION	8.122493517321753E-4	DESIGN
NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9989407302002729	WITHOUT_CLASSIFICATION	0.0010592697997271678	DESIGN
break the outer loop !!!	WITHOUT_CLASSIFICATION	0.9985355629912216	WITHOUT_CLASSIFICATION	0.0014644370087784418	DESIGN
named parameter	WITHOUT_CLASSIFICATION	0.9989791842545401	WITHOUT_CLASSIFICATION	0.0010208157454598807	DESIGN
could be either an ordinal or JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9947784128041393	WITHOUT_CLASSIFICATION	0.005221587195860773	DESIGN
a peek ahead showed this as an JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9942586253993683	WITHOUT_CLASSIFICATION	0.005741374600631709	DESIGN
make sure this "name" is an integral	WITHOUT_CLASSIFICATION	0.9988367427861027	WITHOUT_CLASSIFICATION	0.0011632572138973029	DESIGN
pre-determine and cache the hashcode	WITHOUT_CLASSIFICATION	0.9993986668418862	WITHOUT_CLASSIFICATION	6.013331581137565E-4	DESIGN
perform the actual work	WITHOUT_CLASSIFICATION	0.9990666103622252	WITHOUT_CLASSIFICATION	9.333896377748908E-4	DESIGN
if everything went ok, commit the transaction and close the obtained connection handle...	WITHOUT_CLASSIFICATION	0.9999856407421575	WITHOUT_CLASSIFICATION	1.435925784247031E-5	DESIGN
at some point the processing went bad, so we need to: 1) make sure the connection handle gets released 2) try to cleanup the JTA context as much as possible	WITHOUT_CLASSIFICATION	0.9989563094181402	WITHOUT_CLASSIFICATION	0.0010436905818598029	DESIGN
finally handle the exception	WITHOUT_CLASSIFICATION	0.9969585763432754	WITHOUT_CLASSIFICATION	0.003041423656724466	DESIGN
a "detached" collection that belonged to a different entity	WITHOUT_CLASSIFICATION	0.9851011340471303	WITHOUT_CLASSIFICATION	0.014898865952869659	DESIGN
saveOrUpdateCopy() is deprecated!	WITHOUT_CLASSIFICATION	0.9996666102344831	WITHOUT_CLASSIFICATION	3.333897655168785E-4	DESIGN
collectionPersister should not be null, but we don't want to throw an exception if it is null	WITHOUT_CLASSIFICATION	0.8079002761600522	WITHOUT_CLASSIFICATION	0.19209972383994778	DESIGN
otherwise a null or brand new collection this will also (inefficiently) handle arrays, which have no snapshot, so we can't do any better processArrayOrNewCollection(collection, type);	WITHOUT_CLASSIFICATION	0.9864651757042121	WITHOUT_CLASSIFICATION	0.013534824295787822	DESIGN
a "detached" collection that originally belonged to the same entity	WITHOUT_CLASSIFICATION	0.9963173184870514	WITHOUT_CLASSIFICATION	0.0036826815129485514	DESIGN
do nothing	WITHOUT_CLASSIFICATION	0.9997173369518194	WITHOUT_CLASSIFICATION	2.8266304818069446E-4	DESIGN
do nothing	WITHOUT_CLASSIFICATION	0.9997173369518194	WITHOUT_CLASSIFICATION	2.8266304818069446E-4	DESIGN
Force a substitution!	WITHOUT_CLASSIFICATION	0.9991166803182924	WITHOUT_CLASSIFICATION	8.833196817076359E-4	DESIGN
The user requested a "greater" (i.e. more restrictive) form of pessimistic lock	WITHOUT_CLASSIFICATION	0.9979559495440578	WITHOUT_CLASSIFICATION	0.0020440504559422574	DESIGN
the database now holds a lock + the object is flushed from the cache, so release the soft lock	WITHOUT_CLASSIFICATION	0.9993179740039488	WITHOUT_CLASSIFICATION	6.820259960511387E-4	DESIGN
now update the object .. has to be outside the main if block above (because of collections)	WITHOUT_CLASSIFICATION	0.9999646478587503	WITHOUT_CLASSIFICATION	3.5352141249735015E-5	DESIGN
Search for collections by reachability, updating their role. We don't want to touch collections reachable from a deleted object	WITHOUT_CLASSIFICATION	0.9996762489509897	WITHOUT_CLASSIFICATION	3.237510490102306E-4	DESIGN
this is a situation where the entity id is assigned by a post-insert generator and was saved outside the transaction forcing it to be delayed	WITHOUT_CLASSIFICATION	0.9533067238170921	WITHOUT_CLASSIFICATION	0.046693276182907854	DESIGN
NOTE: we need to do the wrap here even if its not "dirty", because collections need wrapping but changes to _them_ don't dirty the container. Also, for versioned data, we need to wrap before calling searchForDirtyCollections	WITHOUT_CLASSIFICATION	0.9760699243146012	WITHOUT_CLASSIFICATION	0.02393007568539884	DESIGN
grab its state saved at deletion	WITHOUT_CLASSIFICATION	0.99881065515419	WITHOUT_CLASSIFICATION	0.001189344845810095	DESIGN
grab its current state	WITHOUT_CLASSIFICATION	0.9998950417468067	WITHOUT_CLASSIFICATION	1.0495825319331054E-4	DESIGN
schedule the update note that we intentionally do _not_ pass in currentPersistentState!	WITHOUT_CLASSIFICATION	0.9998312665151797	WITHOUT_CLASSIFICATION	1.687334848202281E-4	DESIGN
substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9996370871832395	WITHOUT_CLASSIFICATION	3.629128167604499E-4	DESIGN
give the Interceptor a chance to process property values, if the properties were modified by the Interceptor, we need to set them back to the object	WITHOUT_CLASSIFICATION	0.999889277608473	WITHOUT_CLASSIFICATION	1.1072239152708375E-4	DESIGN
compare to cached state (ignoring collections unless versioned)	WITHOUT_CLASSIFICATION	0.9999109777742833	WITHOUT_CLASSIFICATION	8.902222571675829E-5	DESIGN
if it was dirtied by a collection only	WITHOUT_CLASSIFICATION	0.9998820690094182	WITHOUT_CLASSIFICATION	1.1793099058178494E-4	DESIGN
increment the version number (if necessary)	WITHOUT_CLASSIFICATION	0.999909520164442	WITHOUT_CLASSIFICATION	9.047983555801335E-5	DESIGN
check nullability but do not perform command execute we'll use scheduled updates for that.	WITHOUT_CLASSIFICATION	0.9992984011181693	WITHOUT_CLASSIFICATION	7.015988818307172E-4	DESIGN
give the Interceptor a chance to modify property values	WITHOUT_CLASSIFICATION	0.9942276516980898	WITHOUT_CLASSIFICATION	0.005772348301910227	DESIGN
now we might need to recalculate the dirtyProperties array	WITHOUT_CLASSIFICATION	0.9905188116451641	WITHOUT_CLASSIFICATION	0.009481188354835994	DESIGN
use the current version	WITHOUT_CLASSIFICATION	0.9997170820614587	WITHOUT_CLASSIFICATION	2.8291793854132115E-4	DESIGN
Interceptor returned null, so do the dirtycheck ourself, if possible	WITHOUT_CLASSIFICATION	0.999941984149964	WITHOUT_CLASSIFICATION	5.801585003603258E-5	DESIGN
object loaded by update()	WITHOUT_CLASSIFICATION	0.999163383580286	WITHOUT_CLASSIFICATION	8.366164197139221E-4	DESIGN
dirty check against the usual snapshot of the entity	WITHOUT_CLASSIFICATION	0.9999894101999536	WITHOUT_CLASSIFICATION	1.058980004629682E-5	DESIGN
dirty check against the database snapshot, if possible/necessary	WITHOUT_CLASSIFICATION	0.9999940758780942	WITHOUT_CLASSIFICATION	5.924121905847819E-6	DESIGN
the Interceptor handled the dirty checking	WITHOUT_CLASSIFICATION	0.9398039457622432	WITHOUT_CLASSIFICATION	0.06019605423775671	DESIGN
even process null collections	WITHOUT_CLASSIFICATION	0.9997581567540341	WITHOUT_CLASSIFICATION	2.418432459658402E-4	DESIGN
get the id from the object	WITHOUT_CLASSIFICATION	0.9979650858156821	WITHOUT_CLASSIFICATION	0.0020349141843178527	DESIGN
always do an INSERT, and let it fail by constraint violation	WITHOUT_CLASSIFICATION	0.9984088316765728	WITHOUT_CLASSIFICATION	0.0015911683234271735	DESIGN
what is the version on the database?	WITHOUT_CLASSIFICATION	0.998367094003336	WITHOUT_CLASSIFICATION	0.0016329059966640465	DESIGN
/ HHH-2378	WITHOUT_CLASSIFICATION	0.9997890064317186	WITHOUT_CLASSIFICATION	2.109935682814265E-4	DESIGN
will result in a SQL UPDATE:	WITHOUT_CLASSIFICATION	0.9994611041642097	WITHOUT_CLASSIFICATION	5.388958357902342E-4	DESIGN
else do nothing (don't even reassociate object!)	WITHOUT_CLASSIFICATION	0.999852693951901	WITHOUT_CLASSIFICATION	1.4730604809905606E-4	DESIGN
no existing row - do an insert	WITHOUT_CLASSIFICATION	0.9998067040859392	WITHOUT_CLASSIFICATION	1.9329591406072816E-4	DESIGN
refresh() does not pass an entityName	WITHOUT_CLASSIFICATION	0.9998609601578856	WITHOUT_CLASSIFICATION	1.390398421143394E-4	DESIGN
do not return a proxy! (this option indicates we are initializing a proxy)	WITHOUT_CLASSIFICATION	0.9472905966079046	WITHOUT_CLASSIFICATION	0.052709403392095476	DESIGN
return a proxy if appropriate	WITHOUT_CLASSIFICATION	0.9995819175115296	WITHOUT_CLASSIFICATION	4.1808248847041485E-4	DESIGN
return existing object or initialized proxy (unless deleted)	WITHOUT_CLASSIFICATION	0.999660172733687	WITHOUT_CLASSIFICATION	3.39827266312951E-4	DESIGN
return new uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999532671382495	WITHOUT_CLASSIFICATION	4.6732861750446635E-5	DESIGN
this object was already loaded	WITHOUT_CLASSIFICATION	0.992589087426702	WITHOUT_CLASSIFICATION	0.007410912573297965	DESIGN
Entity was found in second-level cache...	WITHOUT_CLASSIFICATION	0.9998027660103986	WITHOUT_CLASSIFICATION	1.9723398960138285E-4	DESIGN
make it circular-reference safe	WITHOUT_CLASSIFICATION	0.9999545821223194	WITHOUT_CLASSIFICATION	4.5417877680565326E-5	DESIGN
intializes result by side-effect	WITHOUT_CLASSIFICATION	0.9999127075226784	WITHOUT_CLASSIFICATION	8.729247732169674E-5	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Pre-flushing section ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995524180081163	WITHOUT_CLASSIFICATION	4.4758199188367156E-4	DESIGN
some statistics	WITHOUT_CLASSIFICATION	0.9995537830233033	WITHOUT_CLASSIFICATION	4.4621697669676344E-4	DESIGN
safe from concurrent modification because of how entryList() is implemented on IdentityMap	WITHOUT_CLASSIFICATION	0.9999283019781214	WITHOUT_CLASSIFICATION	7.169802187855972E-5	DESIGN
Initialize dirty flags for arrays + collections with composite elements and reset reached, doupdate, etc.	WITHOUT_CLASSIFICATION	0.9999559919190129	WITHOUT_CLASSIFICATION	4.40080809871256E-5	DESIGN
Among other things, updateReachables() will recursively load all collections that are moving roles. This might cause entities to be loaded.	WITHOUT_CLASSIFICATION	0.9751397298481986	WITHOUT_CLASSIFICATION	0.024860270151801415	DESIGN
So this needs to be safe from concurrent modification problems. It is safe because of how IdentityMap implements entrySet()	WITHOUT_CLASSIFICATION	0.9910291903237192	WITHOUT_CLASSIFICATION	0.008970809676280762	DESIGN
Update the status of the object and if necessary, schedule an update	WITHOUT_CLASSIFICATION	0.9999855218205509	WITHOUT_CLASSIFICATION	1.4478179449061521E-5	DESIGN
Schedule updates to collections:	WITHOUT_CLASSIFICATION	0.9997791797496325	WITHOUT_CLASSIFICATION	2.2082025036758833E-4	DESIGN
we need to lock the collection caches before executing entity inserts/updates in order to account for bidi associations	WITHOUT_CLASSIFICATION	0.9878499827281443	WITHOUT_CLASSIFICATION	0.012150017271855704	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Post-flushing section ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995524180081163	WITHOUT_CLASSIFICATION	4.4758199188367156E-4	DESIGN
the database has changed now, so the subselect results need to be invalidated	WITHOUT_CLASSIFICATION	0.9992406261699092	WITHOUT_CLASSIFICATION	7.593738300908453E-4	DESIGN
if the collection is dereferenced, remove from the session cache iter.remove(); does not work, since the entrySet is not backed by the set	WITHOUT_CLASSIFICATION	0.994549411338473	WITHOUT_CLASSIFICATION	0.005450588661527021	DESIGN
otherwise recreate the mapping between the collection and its key	WITHOUT_CLASSIFICATION	0.999950637950196	WITHOUT_CLASSIFICATION	4.936204980394362E-5	DESIGN
get a snapshot	WITHOUT_CLASSIFICATION	0.9993401533820094	WITHOUT_CLASSIFICATION	6.598466179906653E-4	DESIGN
package-private	WITHOUT_CLASSIFICATION	0.9996932053039804	WITHOUT_CLASSIFICATION	3.067946960195699E-4	DESIGN
package-private	WITHOUT_CLASSIFICATION	0.9996932053039804	WITHOUT_CLASSIFICATION	3.067946960195699E-4	DESIGN
key is an entity involved with the operation performed by the listener; value is a flag indicating if the listener explicitly operates on the entity	WITHOUT_CLASSIFICATION	0.9999987386148643	WITHOUT_CLASSIFICATION	1.2613851356759413E-6	DESIGN
EARLY EXIT!!!	WITHOUT_CLASSIFICATION	0.9995868833392739	WITHOUT_CLASSIFICATION	4.131166607260134E-4	DESIGN
ie. the entity came in from update()	WITHOUT_CLASSIFICATION	0.9994015528603101	WITHOUT_CLASSIFICATION	5.984471396899038E-4	DESIGN
before any callbacks, etc, so subdeletions see that this deletion happened first	WITHOUT_CLASSIFICATION	0.9999425388379819	WITHOUT_CLASSIFICATION	5.746116201808041E-5	DESIGN
Ensures that containing deletions happen before sub-deletions	WITHOUT_CLASSIFICATION	0.9999335480816617	WITHOUT_CLASSIFICATION	6.645191833826745E-5	DESIGN
TypeFactory.deepCopy( currentState, propTypes, persister.getPropertyUpdateability(), deletedState, session );	WITHOUT_CLASSIFICATION	0.999395025782546	WITHOUT_CLASSIFICATION	6.049742174540122E-4	DESIGN
cascade-delete to collections BEFORE the collection owner is deleted	WITHOUT_CLASSIFICATION	0.9998835614711984	WITHOUT_CLASSIFICATION	1.164385288016106E-4	DESIGN
cascade-delete to many-to-one AFTER the parent was deleted	WITHOUT_CLASSIFICATION	0.9993748997962174	WITHOUT_CLASSIFICATION	6.251002037826178E-4	DESIGN
if it is an initialized proxy, let cascade handle it later on	WITHOUT_CLASSIFICATION	0.986553264118746	WITHOUT_CLASSIFICATION	0.013446735881254137	DESIGN
assign the requested id to the proxy, before reassociating the proxy	WITHOUT_CLASSIFICATION	0.9999751346732797	WITHOUT_CLASSIFICATION	2.4865326720262078E-5	DESIGN
an uninitialized proxy, noop, don't even need to return an id, since it is never a save()	WITHOUT_CLASSIFICATION	0.9998922347760383	WITHOUT_CLASSIFICATION	1.0776522396171415E-4	DESIGN
initialize properties of the event:	WITHOUT_CLASSIFICATION	0.9999656539547789	WITHOUT_CLASSIFICATION	3.434604522111054E-5	DESIGN
return the id in the event object	WITHOUT_CLASSIFICATION	0.9989453227443869	WITHOUT_CLASSIFICATION	0.0010546772556131031	DESIGN
TRANSIENT or DELETED	WITHOUT_CLASSIFICATION	0.999829193173246	WITHOUT_CLASSIFICATION	1.7080682675400284E-4	DESIGN
use the id assigned to the instance	WITHOUT_CLASSIFICATION	0.9941745241157344	WITHOUT_CLASSIFICATION	0.005825475884265645	DESIGN
assume this is a newly instantiated transient object which should be saved rather than updated	WITHOUT_CLASSIFICATION	0.533264721026663	WITHOUT_CLASSIFICATION	0.46673527897333694	DESIGN
this is a transient object with existing persistent state not loaded by the session	WITHOUT_CLASSIFICATION	0.9350555441865717	WITHOUT_CLASSIFICATION	0.06494445581342818	DESIGN
a collection loaded in the current session can not possibly be the collection belonging to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9973704268787988	WITHOUT_CLASSIFICATION	0.0026295731212011533	DESIGN
cachedState,	WITHOUT_CLASSIFICATION	0.9995868833392739	WITHOUT_CLASSIFICATION	4.131166607260134E-4	DESIGN
assume true, since we don't really know, and it doesn't matter	WITHOUT_CLASSIFICATION	0.9990125878414492	WITHOUT_CLASSIFICATION	9.87412158550733E-4	DESIGN
a "detached" collection!	WITHOUT_CLASSIFICATION	0.9980584415473803	WITHOUT_CLASSIFICATION	0.0019415584526195951	DESIGN
if the collection belonged to a different entity, clean up the existing state of the collection	WITHOUT_CLASSIFICATION	0.9918737946924696	WITHOUT_CLASSIFICATION	0.008126205307530495	DESIGN
log.debug( "calling onLoad()" );	WITHOUT_CLASSIFICATION	0.9997045391190248	WITHOUT_CLASSIFICATION	2.954608809752574E-4	DESIGN
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9995868833392739	WITHOUT_CLASSIFICATION	4.131166607260134E-4	DESIGN
note: performExecutions() clears all collectionXxxxtion collections (the collection actions) in the session	WITHOUT_CLASSIFICATION	0.9994104413262225	WITHOUT_CLASSIFICATION	5.895586737774156E-4	DESIGN
if no array holder we found an unwrappered array (this can't occur, because we now always call wrap() before getting to here) return (ah==null) ? true : searchForDirtyCollections(ah, type);	WITHOUT_CLASSIFICATION	0.9999227719710692	WITHOUT_CLASSIFICATION	7.722802893087423E-5	DESIGN
if not wrappered yet, its dirty (this can't occur, because we now always call wrap() before getting to here) return ( ! (obj instanceof PersistentCollection) ) ? true : searchForDirtyCollections( (PersistentCollection) obj, type );	WITHOUT_CLASSIFICATION	0.8644278059757596	WITHOUT_CLASSIFICATION	0.13557219402424034	DESIGN
we need to check even if it was not initialized, because of delayed adds!	WITHOUT_CLASSIFICATION	0.9997753302032615	WITHOUT_CLASSIFICATION	2.2466979673855752E-4	DESIGN
NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.99984748820439	WITHOUT_CLASSIFICATION	1.5251179561008482E-4	DESIGN
find any entities that are still transient after retry	WITHOUT_CLASSIFICATION	0.9992115908857776	WITHOUT_CLASSIFICATION	7.884091142225036E-4	DESIGN
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9995868833392739	WITHOUT_CLASSIFICATION	4.131166607260134E-4	DESIGN
Check the persistence context for an entry relating to this entity to be merged...	WITHOUT_CLASSIFICATION	0.9784903002979053	WITHOUT_CLASSIFICATION	0.02150969970209475	DESIGN
we have specialized case of a detached entity from the perspective of the merge operation. Specifically, we have an incoming entity instance which has a corresponding entry in the current persistence context, but registered under a different entity instance	WITHOUT_CLASSIFICATION	0.9999890485688999	WITHOUT_CLASSIFICATION	1.0951431100169462E-5	DESIGN
DELETED	WITHOUT_CLASSIFICATION	0.999627030731016	WITHOUT_CLASSIFICATION	3.7296926898392813E-4	DESIGN
before cascade!	WITHOUT_CLASSIFICATION	0.9997174810505162	WITHOUT_CLASSIFICATION	2.8251894948385406E-4	DESIGN
cascade first, so that all unsaved objects get their copy created before we actually copy cascadeOnMerge(event, persister, entity, copyCache, Cascades.CASCADE_BEFORE_MERGE);	WITHOUT_CLASSIFICATION	0.9999789555516005	WITHOUT_CLASSIFICATION	2.10444483994776E-5	DESIGN
this bit is only really absolutely necessary for handling requestedId, but is also good if we merge multiple object graphs, since it helps ensure uniqueness	WITHOUT_CLASSIFICATION	0.5662039994303774	WITHOUT_CLASSIFICATION	0.43379600056962264	DESIGN
continue...; we'll find out if it ends up not getting saved later	WITHOUT_CLASSIFICATION	0.9586973104016349	WITHOUT_CLASSIFICATION	0.04130268959836523	DESIGN
cascade first, so that all unsaved objects get their copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999784599318601	WITHOUT_CLASSIFICATION	2.1540068139897987E-5	DESIGN
check that entity id = requestedId	WITHOUT_CLASSIFICATION	0.9997833541856523	WITHOUT_CLASSIFICATION	2.166458143477207E-4	DESIGN
before cascade!	WITHOUT_CLASSIFICATION	0.9997174810505162	WITHOUT_CLASSIFICATION	2.8251894948385406E-4	DESIGN
we got here because we assumed that an instance with an assigned id was detached, when it was really persistent	WITHOUT_CLASSIFICATION	0.9992399700525342	WITHOUT_CLASSIFICATION	7.600299474659296E-4	DESIGN
cascade first, so that all unsaved objects get their copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999784599318601	WITHOUT_CLASSIFICATION	2.1540068139897987E-5	DESIGN
copyValues works by reflection, so explicitly mark the entity instance dirty	WITHOUT_CLASSIFICATION	0.9979241401456123	WITHOUT_CLASSIFICATION	0.0020758598543877157	DESIGN
EARLY EXIT	WITHOUT_CLASSIFICATION	0.999627030731016	WITHOUT_CLASSIFICATION	3.7296926898392813E-4	DESIGN
source.getBatcher().executeBatch(); found another way to ensure that all batched joined inserts have been executed	WITHOUT_CLASSIFICATION	0.9998301516197309	WITHOUT_CLASSIFICATION	1.698483802692004E-4	DESIGN
substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9996370871832395	WITHOUT_CLASSIFICATION	3.629128167604499E-4	DESIGN
now done in EntityIdentityInsertAction persister.setIdentifier( entity, id, source.getEntityMode() );	WITHOUT_CLASSIFICATION	0.9997398986233567	WITHOUT_CLASSIFICATION	2.601013766432882E-4	DESIGN
source.getPersistenceContext().removeNonExist( new EntityKey( id, persister, source.getEntityMode() ) );	WITHOUT_CLASSIFICATION	0.9988298775315742	WITHOUT_CLASSIFICATION	0.0011701224684257958	DESIGN
keep the existing version number in the case of replicate!	WITHOUT_CLASSIFICATION	0.9999298850860222	WITHOUT_CLASSIFICATION	7.011491397781106E-5	DESIGN
cascade-save to many-to-one BEFORE the parent is saved	WITHOUT_CLASSIFICATION	0.992818645904923	WITHOUT_CLASSIFICATION	0.0071813540950769975	DESIGN
pass this as an argument only to avoid double looking	WITHOUT_CLASSIFICATION	0.9999937175143411	WITHOUT_CLASSIFICATION	6.282485658928745E-6	DESIGN
the object is persistent	WITHOUT_CLASSIFICATION	0.9993444221052513	WITHOUT_CLASSIFICATION	6.555778947487085E-4	DESIGN
the entity is associated with the session, so check its status	WITHOUT_CLASSIFICATION	0.9999636558918569	WITHOUT_CLASSIFICATION	3.634410814308503E-5	DESIGN
do nothing for persistent instances	WITHOUT_CLASSIFICATION	0.9998098445047005	WITHOUT_CLASSIFICATION	1.90155495299446E-4	DESIGN
ie. e.status==DELETED	WITHOUT_CLASSIFICATION	0.9990109555261806	WITHOUT_CLASSIFICATION	9.890444738194786E-4	DESIGN
the object is transient or detached	WITHOUT_CLASSIFICATION	0.9996723281430362	WITHOUT_CLASSIFICATION	3.2767185696383044E-4	DESIGN
NOTE EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9996840391003099	WITHOUT_CLASSIFICATION	3.1596089969010736E-4	DESIGN
Private constructor - stops checkstyle from complaining.	WITHOUT_CLASSIFICATION	0.9987335844020844	WITHOUT_CLASSIFICATION	0.0012664155979156611	DESIGN
First, try to find a matching constructor accepting a ViolatedConstraintNameExtracter param...	WITHOUT_CLASSIFICATION	0.9981920333772352	WITHOUT_CLASSIFICATION	0.0018079666227648339	DESIGN
eat it and try next	WITHOUT_CLASSIFICATION	0.997689863304278	WITHOUT_CLASSIFICATION	0.0023101366957219128	DESIGN
Otherwise, try to use the no-arg constructor	WITHOUT_CLASSIFICATION	0.9996643969930403	WITHOUT_CLASSIFICATION	3.3560300695971207E-4	DESIGN
oracle sql-state code for deadlock	WITHOUT_CLASSIFICATION	0.9994503983986136	WITHOUT_CLASSIFICATION	5.496016013863285E-4	DESIGN
CollectionPropertyMapping processes everything except 'index'.	WITHOUT_CLASSIFICATION	0.9985081288873525	WITHOUT_CLASSIFICATION	0.0014918711126475168	DESIGN
remove initial ", "	WITHOUT_CLASSIFICATION	0.9998860786718692	WITHOUT_CLASSIFICATION	1.1392132813090272E-4	DESIGN
remove initial " and "	WITHOUT_CLASSIFICATION	0.9997230335983552	WITHOUT_CLASSIFICATION	2.769664016448006E-4	DESIGN
beforeClassTokens.add("new"); DEFINITELY DON'T HAVE THIS!!	WITHOUT_CLASSIFICATION	0.9994671297466634	WITHOUT_CLASSIFICATION	5.32870253336501E-4	DESIGN
notAfterClassTokens.add(",");	WITHOUT_CLASSIFICATION	0.9990109555261806	WITHOUT_CLASSIFICATION	9.890444738194786E-4	DESIGN
just especially for the trivial collection filter	WITHOUT_CLASSIFICATION	0.9994881636702774	WITHOUT_CLASSIFICATION	5.118363297226912E-4	DESIGN
update last non-whitespace token, if necessary	WITHOUT_CLASSIFICATION	0.9997009999852077	WITHOUT_CLASSIFICATION	2.990000147923297E-4	DESIGN
select-range is terminated by declaration of "from"	WITHOUT_CLASSIFICATION	0.9989682119409615	WITHOUT_CLASSIFICATION	0.001031788059038438	DESIGN
scan for next non-whitespace token	WITHOUT_CLASSIFICATION	0.9998804123143117	WITHOUT_CLASSIFICATION	1.195876856883066E-4	DESIGN
Note this!!	WITHOUT_CLASSIFICATION	0.9998723046499065	WITHOUT_CLASSIFICATION	1.276953500934833E-4	DESIGN
Error message constants.	WITHOUT_CLASSIFICATION	0.9994043785682875	WITHOUT_CLASSIFICATION	5.956214317125435E-4	DESIGN
handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9972729383464353	WITHOUT_CLASSIFICATION	0.002727061653564813	DESIGN
semantic action handling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9980430379399557	WITHOUT_CLASSIFICATION	0.001956962060044346	DESIGN
Handle collection-fiter compilation. IMPORTANT NOTE: This is modifying the INPUT (HQL) tree, not the output tree!	WITHOUT_CLASSIFICATION	0.9926289622716998	WITHOUT_CLASSIFICATION	0.007371037728300121	DESIGN
Show the modified AST.	WITHOUT_CLASSIFICATION	0.9999200009549476	WITHOUT_CLASSIFICATION	7.999904505231624E-5	DESIGN
Create a parameter specification for the collection filter...	WITHOUT_CLASSIFICATION	0.9990294626201243	WITHOUT_CLASSIFICATION	9.705373798758036E-4	DESIGN
Use the delegate.	WITHOUT_CLASSIFICATION	0.9996592566352044	WITHOUT_CLASSIFICATION	3.407433647955207E-4	DESIGN
Use the delegate.	WITHOUT_CLASSIFICATION	0.9996592566352044	WITHOUT_CLASSIFICATION	3.407433647955207E-4	DESIGN
Get the names of the columns used to link between the collection owner and the collection elements.	WITHOUT_CLASSIFICATION	0.9948653062053482	WITHOUT_CLASSIFICATION	0.005134693794651806	DESIGN
The path AST should be a DotNode, and it should have been evaluated already.	WITHOUT_CLASSIFICATION	0.9995438010841889	WITHOUT_CLASSIFICATION	4.561989158110665E-4	DESIGN
Tell the dot node about the join type.	WITHOUT_CLASSIFICATION	0.9999909301375699	WITHOUT_CLASSIFICATION	9.06986243001347E-6	DESIGN
Re-arrange the tree so that the collection function is the root and the lhs is the path.	WITHOUT_CLASSIFICATION	0.9999532925048482	WITHOUT_CLASSIFICATION	4.670749515174257E-5	DESIGN
Don't forget to resolve the argument! Resolve the collection function now.	WITHOUT_CLASSIFICATION	0.9979716326928623	WITHOUT_CLASSIFICATION	0.0020283673071377823	DESIGN
Resolve everything up to this dot, but don't resolve the placeholders yet.	WITHOUT_CLASSIFICATION	0.978040760598057	WITHOUT_CLASSIFICATION	0.02195923940194304	DESIGN
Should mean that no such property was found	WITHOUT_CLASSIFICATION	0.9979529888743669	WITHOUT_CLASSIFICATION	0.0020470111256330557	DESIGN
Was there an explicit select expression?	WITHOUT_CLASSIFICATION	0.9999639641607547	WITHOUT_CLASSIFICATION	3.603583924527987E-5	DESIGN
Attach any mapping-defined "ORDER BY" fragments	WITHOUT_CLASSIFICATION	0.9997816362246496	WITHOUT_CLASSIFICATION	2.1836377535043895E-4	DESIGN
Use the explicitly declared select expression; determine the return types indicated by each select token	WITHOUT_CLASSIFICATION	0.9997656007740322	WITHOUT_CLASSIFICATION	2.3439922596775516E-4	DESIGN
After that, process the JOINs. Invoke a delegate to do the work, as this is farily complex.	WITHOUT_CLASSIFICATION	0.9992359660194083	WITHOUT_CLASSIFICATION	7.640339805917005E-4	DESIGN
Make #@%$^#^&# sure no alias is applied to the table name	WITHOUT_CLASSIFICATION	0.9999904076381739	WITHOUT_CLASSIFICATION	9.592361826039705E-6	DESIGN
We need to generate ids as part of this bulk insert. Note that this is only supported for sequence-style generators and post-insert-style generators; basically, only in-db generators	WITHOUT_CLASSIFICATION	0.9996925187631007	WITHOUT_CLASSIFICATION	3.07481236899247E-4	DESIGN
Use the delegate.	WITHOUT_CLASSIFICATION	0.9996592566352044	WITHOUT_CLASSIFICATION	3.407433647955207E-4	DESIGN
We need to seed the version value as part of this bulk insert	WITHOUT_CLASSIFICATION	0.999741865314194	WITHOUT_CLASSIFICATION	2.5813468580601005E-4	DESIGN
we need to wrtap the param in a cast()	WITHOUT_CLASSIFICATION	0.9963437589440822	WITHOUT_CLASSIFICATION	0.0036562410559179115	DESIGN
This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9492144270076002	WITHOUT_CLASSIFICATION	0.050785572992399844	DESIGN
Generate implicit joins, only if necessary.	WITHOUT_CLASSIFICATION	0.9994377270545032	WITHOUT_CLASSIFICATION	5.622729454968279E-4	DESIGN
Notify the FROM element that it is being referenced by the select.	WITHOUT_CLASSIFICATION	0.9996979133402428	WITHOUT_CLASSIFICATION	3.0208665975719443E-4	DESIGN
Turn off includeSubclasses on all FromElements.	WITHOUT_CLASSIFICATION	0.9996385092916997	WITHOUT_CLASSIFICATION	3.6149070830034026E-4	DESIGN
create the node initially with the param name so that it shows appropriately in the "original text" attribute	WITHOUT_CLASSIFICATION	0.9999410155051408	WITHOUT_CLASSIFICATION	5.898449485926014E-5	DESIGN
Use the delegate, resolve identifiers as FROM element aliases.	WITHOUT_CLASSIFICATION	0.9993703737989703	WITHOUT_CLASSIFICATION	6.296262010297214E-4	DESIGN
select clauses for insert statements should alwasy be treated as shallow	WITHOUT_CLASSIFICATION	0.9997975928842727	WITHOUT_CLASSIFICATION	2.0240711572720805E-4	DESIGN
no need to even collect this information if the persister is considered multi-table	WITHOUT_CLASSIFICATION	0.9931569448971247	WITHOUT_CLASSIFICATION	0.006843055102875336	DESIGN
Make sure that the persister is versioned	WITHOUT_CLASSIFICATION	0.9987867660661601	WITHOUT_CLASSIFICATION	0.0012132339338398726	DESIGN
handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9972729383464353	WITHOUT_CLASSIFICATION	0.002727061653564813	DESIGN
Use the delegate.	WITHOUT_CLASSIFICATION	0.9996592566352044	WITHOUT_CLASSIFICATION	3.407433647955207E-4	DESIGN
--Commented out by Inspection (12/11/04 10:56 AM): int getWarningCount();	WITHOUT_CLASSIFICATION	0.9998468100203426	WITHOUT_CLASSIFICATION	1.5318997965741246E-4	DESIGN
Alias references and identifiers use the same node class.	WITHOUT_CLASSIFICATION	0.9992039535492248	WITHOUT_CLASSIFICATION	7.96046450775152E-4	DESIGN
switch	WITHOUT_CLASSIFICATION	0.9997819502094567	WITHOUT_CLASSIFICATION	2.1804979054337647E-4	DESIGN
make a new one	WITHOUT_CLASSIFICATION	0.9994002635267102	WITHOUT_CLASSIFICATION	5.997364732898379E-4	DESIGN
just do the regular thing if you can't find the ctor Your AST must have default ctor to use this.	WITHOUT_CLASSIFICATION	0.9936890536199897	WITHOUT_CLASSIFICATION	0.006310946380010203	DESIGN
Initialize SQL nodes here.	WITHOUT_CLASSIFICATION	0.9995340363299023	WITHOUT_CLASSIFICATION	4.6596367009771913E-4	DESIGN
semantic action processing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9980847948434743	WITHOUT_CLASSIFICATION	0.0019152051565256502	DESIGN
if template is null we just write the function out as it appears in the hql statement	WITHOUT_CLASSIFICATION	0.9999461348377667	WITHOUT_CLASSIFICATION	5.386516223331657E-5	DESIGN
this function has a template -> redirect output and catch the arguments	WITHOUT_CLASSIFICATION	0.9999626494278525	WITHOUT_CLASSIFICATION	3.73505721474601E-5	DESIGN
--- Inner classes (moved here from sql-gen.g) ---	WITHOUT_CLASSIFICATION	0.9993094284830352	WITHOUT_CLASSIFICATION	6.905715169648633E-4	DESIGN
check two "adjecent" nodes at the top of the from-clause tree	WITHOUT_CLASSIFICATION	0.9998950345277995	WITHOUT_CLASSIFICATION	1.0496547220041807E-4	DESIGN
/	WITHOUT_CLASSIFICATION	0.9997890064317186	WITHOUT_CLASSIFICATION	2.109935682814265E-4	DESIGN
these are just two unrelated table references	WITHOUT_CLASSIFICATION	0.9981229252204303	WITHOUT_CLASSIFICATION	0.0018770747795696524	DESIGN
again, both should be FromElements	WITHOUT_CLASSIFICATION	0.9988105110160224	WITHOUT_CLASSIFICATION	0.0011894889839776522	DESIGN
NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9989407302002729	WITHOUT_CLASSIFICATION	0.0010592697997271678	DESIGN
right represents a joins originating from left; or both right and left reprersent joins originating from the same FromElement	WITHOUT_CLASSIFICATION	0.999912210987902	WITHOUT_CLASSIFICATION	8.778901209795931E-5	DESIGN
check a set of parent/child nodes in the from-clause tree to determine if a comma is required between them	WITHOUT_CLASSIFICATION	0.9998573935613556	WITHOUT_CLASSIFICATION	1.426064386443086E-4	DESIGN
right represents a joins originating from left...	WITHOUT_CLASSIFICATION	0.9994401736910231	WITHOUT_CLASSIFICATION	5.59826308976931E-4	DESIGN
all clear	WITHOUT_CLASSIFICATION	0.999887439343093	WITHOUT_CLASSIFICATION	1.1256065690705952E-4	DESIGN
Ignore the token class name parameter, and use a specific token class.	WITHOUT_CLASSIFICATION	0.9999260262398717	WITHOUT_CLASSIFICATION	7.397376012830064E-5	DESIGN
overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9984799375893023	WITHOUT_CLASSIFICATION	0.0015200624106976926	DESIGN
overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9984799375893023	WITHOUT_CLASSIFICATION	0.0015200624106976926	DESIGN
remember that ordinal parameters numbers are 1-based!!!	WITHOUT_CLASSIFICATION	0.9999650726481482	WITHOUT_CLASSIFICATION	3.492735185190493E-5	DESIGN
don't care about other param types here, just those explicitly user-defined...	WITHOUT_CLASSIFICATION	0.99954266767468	WITHOUT_CLASSIFICATION	4.573323253198609E-4	DESIGN
If the query is already compiled, skip the compilation.	WITHOUT_CLASSIFICATION	0.9999716806684305	WITHOUT_CLASSIFICATION	2.8319331569521298E-5	DESIGN
Remember the parameters for the compilation.	WITHOUT_CLASSIFICATION	0.9986050456662247	WITHOUT_CLASSIFICATION	0.0013949543337753389	DESIGN
PHASE 1 : Parse the HQL into an AST.	WITHOUT_CLASSIFICATION	0.9997854010305114	WITHOUT_CLASSIFICATION	2.145989694886381E-4	DESIGN
PHASE 2 : Analyze the HQL AST, and produce an SQL AST.	WITHOUT_CLASSIFICATION	0.9999899731255484	WITHOUT_CLASSIFICATION	1.0026874451555676E-5	DESIGN
PHASE 3 : Generate the SQL.	WITHOUT_CLASSIFICATION	0.999277110021688	WITHOUT_CLASSIFICATION	7.228899783120979E-4	DESIGN
we do not actually propogate ANTLRExceptions as a cause, so log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9997629515121518	WITHOUT_CLASSIFICATION	2.37048487848352E-4	DESIGN
we do not actually propogate ANTLRExceptions as a cause, so log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9997629515121518	WITHOUT_CLASSIFICATION	2.37048487848352E-4	DESIGN
only needed during compilation phase...	WITHOUT_CLASSIFICATION	0.9999363601332449	WITHOUT_CLASSIFICATION	6.36398667549893E-5	DESIGN
Transform the tree.	WITHOUT_CLASSIFICATION	0.9998053342552223	WITHOUT_CLASSIFICATION	1.9466574477774377E-4	DESIGN
Parse the query string into an HQL AST.	WITHOUT_CLASSIFICATION	0.9998869880412369	WITHOUT_CLASSIFICATION	1.1301195876322347E-4	DESIGN
Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.999380791546575	WITHOUT_CLASSIFICATION	6.192084534250324E-4	DESIGN
Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.999380791546575	WITHOUT_CLASSIFICATION	6.192084534250324E-4	DESIGN
Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.999380791546575	WITHOUT_CLASSIFICATION	6.192084534250324E-4	DESIGN
NOTE : ( max - 1 ) because first is zero-based while max is not...	WITHOUT_CLASSIFICATION	0.9990574173920707	WITHOUT_CLASSIFICATION	9.425826079292308E-4	DESIGN
-- Package local methods for the QueryLoader delegate --	WITHOUT_CLASSIFICATION	0.9997632134961842	WITHOUT_CLASSIFICATION	2.36786503815798E-4	DESIGN
If there are no collection fetches, then no further checks are needed	WITHOUT_CLASSIFICATION	0.9999786844021991	WITHOUT_CLASSIFICATION	2.1315597801015987E-5	DESIGN
A shallow query is ok (although technically there should be no fetching here...)	WITHOUT_CLASSIFICATION	0.9998201359135809	WITHOUT_CLASSIFICATION	1.7986408641906343E-4	DESIGN
should be the first, but just to be safe...	WITHOUT_CLASSIFICATION	0.9985392076129821	WITHOUT_CLASSIFICATION	0.0014607923870178523	DESIGN
Use the delegate.	WITHOUT_CLASSIFICATION	0.9996592566352044	WITHOUT_CLASSIFICATION	3.407433647955207E-4	DESIGN
Use the delegate.	WITHOUT_CLASSIFICATION	0.9996592566352044	WITHOUT_CLASSIFICATION	3.407433647955207E-4	DESIGN
Impl Note: allows multiple collection fetches as long as the entire fecthed graph still "points back" to a single root entity for return	WITHOUT_CLASSIFICATION	0.9269502327349239	WITHOUT_CLASSIFICATION	0.07304976726507606	DESIGN
Otherwise, we have a non-scalar select with defined collection fetch(es). Make sure that there is only a single root entity in the return (no tuples)	WITHOUT_CLASSIFICATION	0.9999521439481865	WITHOUT_CLASSIFICATION	4.785605181348303E-5	DESIGN
This is not strictly true. We actually just need to make sure that it is ordered by root-entity PK and that that order-by comes before any non-root-entity ordering...	WITHOUT_CLASSIFICATION	0.9854353871468888	WITHOUT_CLASSIFICATION	0.014564612853111142	DESIGN
paramTranslations = new ParameterTranslationsImpl( collectedParameterSpecifications );	WITHOUT_CLASSIFICATION	0.9999239612920083	WITHOUT_CLASSIFICATION	7.603870799175832E-5	DESIGN
we are already processing a dot-structure	WITHOUT_CLASSIFICATION	0.9892068769111285	WITHOUT_CLASSIFICATION	0.010793123088871577	DESIGN
igndore it...	WITHOUT_CLASSIFICATION	0.9986883817781079	WITHOUT_CLASSIFICATION	0.0013116182218921016	DESIGN
we are now at a new tree level	WITHOUT_CLASSIFICATION	0.9895053293001185	WITHOUT_CLASSIFICATION	0.010494670699881567	DESIGN
[jsd] The fix for HHH-558...	WITHOUT_CLASSIFICATION	0.9732641225763996	WITHOUT_CLASSIFICATION	0.026735877423600382	DESIGN
If the token can tell us if it could be an identifier...	WITHOUT_CLASSIFICATION	0.9991654410898136	WITHOUT_CLASSIFICATION	8.345589101864249E-4	DESIGN
... and the expected token type was an identifier, then:	WITHOUT_CLASSIFICATION	0.9999363689106138	WITHOUT_CLASSIFICATION	6.3631089386183E-5	DESIGN
Use the token as an identifier.	WITHOUT_CLASSIFICATION	0.9999832511142195	WITHOUT_CLASSIFICATION	1.6748885780504744E-5	DESIGN
Add the token to the AST.	WITHOUT_CLASSIFICATION	0.9998985615584015	WITHOUT_CLASSIFICATION	1.0143844159849348E-4	DESIGN
(NOT (EQ a b) ) => (NE a b)	WITHOUT_CLASSIFICATION	0.9975756873784924	WITHOUT_CLASSIFICATION	0.0024243126215074996	DESIGN
(NOT (NE a b) ) => (EQ a b)	WITHOUT_CLASSIFICATION	0.9975756873784924	WITHOUT_CLASSIFICATION	0.0024243126215074996	DESIGN
(NOT (LT a b) ) => (GE a b)	WITHOUT_CLASSIFICATION	0.9975756873784924	WITHOUT_CLASSIFICATION	0.0024243126215074996	DESIGN
(NOT (GE a b) ) => (LT a b)	WITHOUT_CLASSIFICATION	0.9975756873784924	WITHOUT_CLASSIFICATION	0.0024243126215074996	DESIGN
(NOT (LE a b) ) => (GT a b)	WITHOUT_CLASSIFICATION	0.9975756873784924	WITHOUT_CLASSIFICATION	0.0024243126215074996	DESIGN
(NOT (LIKE a b) ) => (NOT_LIKE a b)	WITHOUT_CLASSIFICATION	0.9986548832342494	WITHOUT_CLASSIFICATION	0.0013451167657506206	DESIGN
(NOT (NOT_LIKE a b) ) => (LIKE a b)	WITHOUT_CLASSIFICATION	0.9986548832342494	WITHOUT_CLASSIFICATION	0.0013451167657506206	DESIGN
(NOT (IS_NOT_NULL a b) ) => (IS_NULL a b)	WITHOUT_CLASSIFICATION	0.9986548832342494	WITHOUT_CLASSIFICATION	0.0013451167657506206	DESIGN
(NOT (BETWEEN a b) ) => (NOT_BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9986548832342494	WITHOUT_CLASSIFICATION	0.0013451167657506206	DESIGN
Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.998552254760858	WITHOUT_CLASSIFICATION	0.0014477452391420918	DESIGN
overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9984799375893023	WITHOUT_CLASSIFICATION	0.0015200624106976926	DESIGN
if if Otherwise, handle the error normally.	WITHOUT_CLASSIFICATION	0.9997007183516806	WITHOUT_CLASSIFICATION	2.9928164831935717E-4	DESIGN
(NOT (NOT_BETWEEN a b) ) => (BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9986548832342494	WITHOUT_CLASSIFICATION	0.0013451167657506206	DESIGN
This can never happen because this rule will always eliminate the child NOT.case NOT:return x.getFirstChild(); (NOT (NOT x) ) => (x)	WITHOUT_CLASSIFICATION	0.9999475393100861	WITHOUT_CLASSIFICATION	5.246068991399704E-5	DESIGN
Just add a 'not' parent.	WITHOUT_CLASSIFICATION	0.999120695268366	WITHOUT_CLASSIFICATION	8.793047316340833E-4	DESIGN
(EQ NULL b) => (IS_NULL b)	WITHOUT_CLASSIFICATION	0.9998555311779938	WITHOUT_CLASSIFICATION	1.4446882200620217E-4	DESIGN
(EQ a NULL) => (IS_NULL a)	WITHOUT_CLASSIFICATION	0.9995692801021339	WITHOUT_CLASSIFICATION	4.307198978660191E-4	DESIGN
NOTE: Because we're using ASTUtil.createParent(), the tree must be created from the bottom up. IS EMPTY x => (EXISTS (QUERY (SELECT_FROM (FROM x) ) ) )	WITHOUT_CLASSIFICATION	0.9949303858295443	WITHOUT_CLASSIFICATION	0.005069614170455697	DESIGN
Add NOT if it's negated.	WITHOUT_CLASSIFICATION	0.9912420857743126	WITHOUT_CLASSIFICATION	0.008757914225687394	DESIGN
Create nodes that track line and column number.	WITHOUT_CLASSIFICATION	0.99999938705175	WITHOUT_CLASSIFICATION	6.129482499976616E-7	DESIGN
Case 1: Multi token keywords GROUP BY and ORDER BY The next token ( LT(2) ) should be 'by'... otherwise, this is just an ident.	WITHOUT_CLASSIFICATION	0.9753670781339868	WITHOUT_CLASSIFICATION	0.024632921866013183	DESIGN
Case 2: The current token is after FROM and before '.'.	WITHOUT_CLASSIFICATION	0.9999954684092357	WITHOUT_CLASSIFICATION	4.53159076434366E-6	DESIGN
This handles HHH-354, where there is a strange property name in a where clause. If the lookahead contains a DOT then something that isn't an IDENT...	WITHOUT_CLASSIFICATION	0.9991940270691925	WITHOUT_CLASSIFICATION	8.059729308074887E-4	DESIGN
See if the second lookahed token can be an identifier.	WITHOUT_CLASSIFICATION	0.9999767651357155	WITHOUT_CLASSIFICATION	2.3234864284472117E-5	DESIGN
Set it!	WITHOUT_CLASSIFICATION	0.9999061484349657	WITHOUT_CLASSIFICATION	9.385156503430272E-5	DESIGN
ignore	WITHOUT_CLASSIFICATION	0.9998594496367232	WITHOUT_CLASSIFICATION	1.4055036327665423E-4	DESIGN
strip the " where "	WITHOUT_CLASSIFICATION	0.9999237323750825	WITHOUT_CLASSIFICATION	7.626762491759641E-5	DESIGN
Don't really know all the codes required to adequately decipher returned jdbc exceptions here. simply allow the failure to be eaten and the subsequent insert-selects/deletes should fail	WITHOUT_CLASSIFICATION	0.9049868541579024	WITHOUT_CLASSIFICATION	0.09501314584209768	DESIGN
at the very least cleanup the data :)	WITHOUT_CLASSIFICATION	0.9969850011945937	WITHOUT_CLASSIFICATION	0.003014998805406377	DESIGN
First, save off the pertinent ids, as the return value	WITHOUT_CLASSIFICATION	0.9999564586889079	WITHOUT_CLASSIFICATION	4.354131109195456E-5	DESIGN
jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9990086417940182	WITHOUT_CLASSIFICATION	9.91358205981883E-4	DESIGN
jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9990086417940182	WITHOUT_CLASSIFICATION	9.91358205981883E-4	DESIGN
Start performing the updates	WITHOUT_CLASSIFICATION	0.9998615960402424	WITHOUT_CLASSIFICATION	1.384039597575816E-4	DESIGN
First, save off the pertinent ids, saving the number of pertinent ids for return	WITHOUT_CLASSIFICATION	0.9996533095391972	WITHOUT_CLASSIFICATION	3.466904608028791E-4	DESIGN
Start performing the deletes	WITHOUT_CLASSIFICATION	0.9995903330989789	WITHOUT_CLASSIFICATION	4.0966690102111025E-4	DESIGN
otherwise, everything ok.	WITHOUT_CLASSIFICATION	0.9991337027782241	WITHOUT_CLASSIFICATION	8.662972217758614E-4	DESIGN
visit width-first, then depth	WITHOUT_CLASSIFICATION	0.9994227820291218	WITHOUT_CLASSIFICATION	5.772179708782554E-4	DESIGN
if the types report logical equivalence, return true...	WITHOUT_CLASSIFICATION	0.9558157040369386	WITHOUT_CLASSIFICATION	0.04418429596306143	DESIGN
otherwise, perform a "deep equivalence" check...	WITHOUT_CLASSIFICATION	0.9986375015890813	WITHOUT_CLASSIFICATION	0.0013624984109186728	DESIGN
If there is no WHERE node, make one.	WITHOUT_CLASSIFICATION	0.9999880649621381	WITHOUT_CLASSIFICATION	1.1935037861875571E-5	DESIGN
inject the WHERE after the parent	WITHOUT_CLASSIFICATION	0.9998159607057415	WITHOUT_CLASSIFICATION	1.8403929425858293E-4	DESIGN
Never include subclasses for implied from elements.	WITHOUT_CLASSIFICATION	0.9997054243695216	WITHOUT_CLASSIFICATION	2.9457563047829646E-4	DESIGN
Moved here from SelectClause [jsd]	WITHOUT_CLASSIFICATION	0.9983436395843688	WITHOUT_CLASSIFICATION	0.0016563604156312522	DESIGN
/	WITHOUT_CLASSIFICATION	0.9997890064317186	WITHOUT_CLASSIFICATION	2.109935682814265E-4	DESIGN
Use the table fromElement and the property name to get the array of column names.	WITHOUT_CLASSIFICATION	0.9998730244029187	WITHOUT_CLASSIFICATION	1.269755970813549E-4	DESIGN
Set the attributes of the property reference expression.	WITHOUT_CLASSIFICATION	0.9992714656378948	WITHOUT_CLASSIFICATION	7.285343621052705E-4	DESIGN
If the uresolved property path isn't set yet, just use the property name.	WITHOUT_CLASSIFICATION	0.999763960396511	WITHOUT_CLASSIFICATION	2.3603960348890304E-4	DESIGN
The 'from element' that the property is in.	WITHOUT_CLASSIFICATION	0.9998927062509338	WITHOUT_CLASSIFICATION	1.0729374906619342E-4	DESIGN
Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999986740177073	WITHOUT_CLASSIFICATION	1.325982292750616E-6	DESIGN
Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999986740177073	WITHOUT_CLASSIFICATION	1.325982292750616E-6	DESIGN
If this dot has already been resolved, stop now.	WITHOUT_CLASSIFICATION	0.9998255242580593	WITHOUT_CLASSIFICATION	1.744757419406319E-4	DESIGN
If there is no data type for this node, and we're at the end of the path (top most dot node), then this might be a Java constant.	WITHOUT_CLASSIFICATION	0.9955103693573418	WITHOUT_CLASSIFICATION	0.004489630642658182	DESIGN
The property is a collection...	WITHOUT_CLASSIFICATION	0.9992663129907078	WITHOUT_CLASSIFICATION	7.3368700929221E-4	DESIGN
The property is a component...	WITHOUT_CLASSIFICATION	0.9982772844561314	WITHOUT_CLASSIFICATION	0.0017227155438686347	DESIGN
The property is another class..	WITHOUT_CLASSIFICATION	0.998952696437773	WITHOUT_CLASSIFICATION	0.0010473035622271189	DESIGN
Otherwise, this is a primitive type.	WITHOUT_CLASSIFICATION	0.9977361568481611	WITHOUT_CLASSIFICATION	0.002263843151838913	DESIGN
foo.bars.size (also handles deprecated stuff like foo.bars.maxelement for backwardness)	WITHOUT_CLASSIFICATION	0.9908228857668805	WITHOUT_CLASSIFICATION	0.009177114233119415	DESIGN
This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9997502504074275	WITHOUT_CLASSIFICATION	2.4974959257253093E-4	DESIGN
Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9998847269425084	WITHOUT_CLASSIFICATION	1.152730574915081E-4	DESIGN
in non-select queries, the only time we should need to join is if we are in a subquery from clause	WITHOUT_CLASSIFICATION	0.998758948449632	WITHOUT_CLASSIFICATION	0.001241051550367965	DESIGN
this is the regression style determination which matches the logic of the classic translator	WITHOUT_CLASSIFICATION	0.999947833250603	WITHOUT_CLASSIFICATION	5.216674939690846E-5	DESIGN
This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9997502504074275	WITHOUT_CLASSIFICATION	2.4974959257253093E-4	DESIGN
even though we might find a pre-existing element by join path, we may not be able to reuse it...	WITHOUT_CLASSIFICATION	0.8443540240675712	WITHOUT_CLASSIFICATION	0.1556459759324288	DESIGN
NOTE : addDuplicateAlias() already performs nullness checks on the alias.	WITHOUT_CLASSIFICATION	0.9993650110254445	WITHOUT_CLASSIFICATION	6.349889745554011E-4	DESIGN
if the from-clauses are the same, we can be a little more aggressive in terms of what we reuse	WITHOUT_CLASSIFICATION	0.7659372771152421	WITHOUT_CLASSIFICATION	0.23406272288475807	DESIGN
again, null != null here	WITHOUT_CLASSIFICATION	0.9999334163684658	WITHOUT_CLASSIFICATION	6.658363153429367E-5	DESIGN
If this is an implied join in a from element, then use the impled join type which is part of the tree parser's state (set by the gramamar actions).	WITHOUT_CLASSIFICATION	0.9936389097936444	WITHOUT_CLASSIFICATION	0.006361090206355532	DESIGN
otherwise (subquery case) dont reuse the fromElement if we are processing the from-clause of the subquery	WITHOUT_CLASSIFICATION	0.9955427775615419	WITHOUT_CLASSIFICATION	0.00445722243845813	DESIGN
we know only the lhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9998547280156301	WITHOUT_CLASSIFICATION	1.4527198436986756E-4	DESIGN
the referenced node text is the special 'id'	WITHOUT_CLASSIFICATION	0.9999867024729765	WITHOUT_CLASSIFICATION	1.3297527023427605E-5	DESIGN
only the identifier property field name can be a reference to the associated entity's PK...	WITHOUT_CLASSIFICATION	0.9993114329213478	WITHOUT_CLASSIFICATION	6.885670786521468E-4	DESIGN
special shortcut for id properties, skip the join! this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9998637885399714	WITHOUT_CLASSIFICATION	1.3621146002860176E-4	DESIGN
Append the new property name onto the unresolved path.	WITHOUT_CLASSIFICATION	0.9998280724874977	WITHOUT_CLASSIFICATION	1.719275125022681E-4	DESIGN
If the lhs is a collection, use CollectionPropertyMapping	WITHOUT_CLASSIFICATION	0.9996103313423055	WITHOUT_CLASSIFICATION	3.8966865769454165E-4	DESIGN
Tell the destination fromElement to 'includeSubclasses'.	WITHOUT_CLASSIFICATION	0.9998351767353193	WITHOUT_CLASSIFICATION	1.6482326468082845E-4	DESIGN
Use theta style (for regression) Move the node up, after the origin node.	WITHOUT_CLASSIFICATION	0.9992220124460404	WITHOUT_CLASSIFICATION	7.77987553959636E-4	DESIGN
Don't resolve the node again.	WITHOUT_CLASSIFICATION	0.9997105185531243	WITHOUT_CLASSIFICATION	2.8948144687575647E-4	DESIGN
for expected parameter type injection, we expect that the lhs represents some form of property ref and that the children of the in-list represent one-or-more params.	WITHOUT_CLASSIFICATION	0.9994809207905646	WITHOUT_CLASSIFICATION	5.190792094353888E-4	DESIGN
we need to strip off the embedded parens so that sql-gen does not double these up	WITHOUT_CLASSIFICATION	0.997951008126978	WITHOUT_CLASSIFICATION	0.0020489918730220557	DESIGN
we have something like : "? [op] rhs"	WITHOUT_CLASSIFICATION	0.9971166666345513	WITHOUT_CLASSIFICATION	0.0028833333654486215	DESIGN
we have something like : "lhs [op] ?"	WITHOUT_CLASSIFICATION	0.9971166666345513	WITHOUT_CLASSIFICATION	0.0028833333654486215	DESIGN
we know only the rhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9998547280156301	WITHOUT_CLASSIFICATION	1.4527198436986756E-4	DESIGN
handle the (assumed) valid cases: #1 - the only valid datetime addition synatx is one or the other is a datetime (but not both)	WITHOUT_CLASSIFICATION	0.9980207440760869	WITHOUT_CLASSIFICATION	0.001979255923913079	DESIGN
one or the other needs to be a datetime for us to get into this method in the first place...	WITHOUT_CLASSIFICATION	0.8591875361896957	WITHOUT_CLASSIFICATION	0.14081246381030435	DESIGN
#3 - note that this is also true of "datetime - :param"...	WITHOUT_CLASSIFICATION	0.9958585536459522	WITHOUT_CLASSIFICATION	0.004141446354047847	DESIGN
#2	WITHOUT_CLASSIFICATION	0.9996324867015975	WITHOUT_CLASSIFICATION	3.675132984023858E-4	DESIGN
Generate the inner join -- The elements need to be joined to the collection they are in.	WITHOUT_CLASSIFICATION	0.9997358502254621	WITHOUT_CLASSIFICATION	2.641497745378692E-4	DESIGN
nothing to do	WITHOUT_CLASSIFICATION	0.9996094199404136	WITHOUT_CLASSIFICATION	3.905800595863351E-4	DESIGN
The 'from element' that represents the elements of the collection.	WITHOUT_CLASSIFICATION	0.9999946960566111	WITHOUT_CLASSIFICATION	5.303943389001289E-6	DESIGN
Add the condition to the join sequence that qualifies the indexed element.	WITHOUT_CLASSIFICATION	0.9999210852259952	WITHOUT_CLASSIFICATION	7.891477400473004E-5	DESIGN
Sometimes use the element table alias, sometimes use the... umm... collection table alias (many to many)	WITHOUT_CLASSIFICATION	0.9996723302082454	WITHOUT_CLASSIFICATION	3.276697917546332E-4	DESIGN
Now, set the text for this node. It should be the element columns.	WITHOUT_CLASSIFICATION	0.9832203697592855	WITHOUT_CLASSIFICATION	0.016779630240714518	DESIGN
Get the function return value type, based on the type of the first argument.	WITHOUT_CLASSIFICATION	0.9999971449125786	WITHOUT_CLASSIFICATION	2.855087421405432E-6	DESIGN
This will call initialize(tok)!	WITHOUT_CLASSIFICATION	0.9953188465943286	WITHOUT_CLASSIFICATION	0.004681153405671367	DESIGN
mutation depends on the types of nodes invloved...	WITHOUT_CLASSIFICATION	0.9994493375983323	WITHOUT_CLASSIFICATION	5.50662401667681E-4	DESIGN
"pass along" our initial embedded parameter node(s) to the first generated sql fragment so that it can be handled later for parameter binding...	WITHOUT_CLASSIFICATION	0.9959298324953993	WITHOUT_CLASSIFICATION	0.004070167504600604	DESIGN
logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9997735127237789	WITHOUT_CLASSIFICATION	2.2648727622107375E-4	DESIGN
Generated select expressions are already resolved, nothing to do.	WITHOUT_CLASSIFICATION	0.9991744540241895	WITHOUT_CLASSIFICATION	8.255459758106078E-4	DESIGN
The path may be a reference to an alias defined in the parent query.	WITHOUT_CLASSIFICATION	0.9999363272416659	WITHOUT_CLASSIFICATION	6.367275833408152E-5	DESIGN
The HQL class alias refers to the class name.	WITHOUT_CLASSIFICATION	0.9999886902773077	WITHOUT_CLASSIFICATION	1.1309722692348247E-5	DESIGN
Associate the table alias with the element.	WITHOUT_CLASSIFICATION	0.9999736624003615	WITHOUT_CLASSIFICATION	2.6337599638423922E-5	DESIGN
try the parent FromClause...	WITHOUT_CLASSIFICATION	0.9988915318819273	WITHOUT_CLASSIFICATION	0.0011084681180726988	DESIGN
Add the new node to the map so that we don't create it twice.	WITHOUT_CLASSIFICATION	0.9999737252487245	WITHOUT_CLASSIFICATION	2.6274751275506076E-5	DESIGN
Make sure that all from elements registered with this FROM clause are actually in the AST.	WITHOUT_CLASSIFICATION	0.9997370778568648	WITHOUT_CLASSIFICATION	2.629221431351684E-4	DESIGN
Invoke setScalarColumnText on each constructor argument.	WITHOUT_CLASSIFICATION	0.9995877294170086	WITHOUT_CLASSIFICATION	4.122705829914371E-4	DESIGN
Collect the select expressions, skip the first child because it is the class name.	WITHOUT_CLASSIFICATION	0.9999969722647707	WITHOUT_CLASSIFICATION	3.027735229166294E-6	DESIGN
return an empty Type array	WITHOUT_CLASSIFICATION	0.9983442782293407	WITHOUT_CLASSIFICATION	0.0016557217706591905	DESIGN
Constructors are always considered scalar results.	WITHOUT_CLASSIFICATION	0.9997181405226755	WITHOUT_CLASSIFICATION	2.818594773245195E-4	DESIGN
this is the exception returned by ReflectHelper.getConstructor() if it cannot locate an appropriate constructor	WITHOUT_CLASSIFICATION	0.9990274899996506	WITHOUT_CLASSIFICATION	9.725100003494759E-4	DESIGN
if there is no order by, make one	WITHOUT_CLASSIFICATION	0.9999384147806278	WITHOUT_CLASSIFICATION	6.158521937211456E-5	DESIGN
Find the WHERE; if there is no WHERE, find the FROM...	WITHOUT_CLASSIFICATION	0.9999548908924831	WITHOUT_CLASSIFICATION	4.510910751693597E-5	DESIGN
Now, inject the newly built ORDER BY into the tree	WITHOUT_CLASSIFICATION	0.9995482297518925	WITHOUT_CLASSIFICATION	4.517702481075516E-4	DESIGN
ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999610254461945	WITHOUT_CLASSIFICATION	3.897455380550675E-4	DESIGN
logic operators by definition resolve to boolean.	WITHOUT_CLASSIFICATION	0.9997701993703396	WITHOUT_CLASSIFICATION	2.2980062966022584E-4	DESIGN
Render the identifier select fragment using the table alias.	WITHOUT_CLASSIFICATION	0.9997185641028319	WITHOUT_CLASSIFICATION	2.8143589716805704E-4	DESIGN
Class names in the FROM clause result in a JoinSequence (the old FromParser does this).	WITHOUT_CLASSIFICATION	0.9999926066043552	WITHOUT_CLASSIFICATION	7.39339564477082E-6	DESIGN
For many-to-many joins, use the tablename from the queryable collection for the default text.	WITHOUT_CLASSIFICATION	0.9996415525750001	WITHOUT_CLASSIFICATION	3.584474249998583E-4	DESIGN
Otherwise, use the property mapping.	WITHOUT_CLASSIFICATION	0.999418673467942	WITHOUT_CLASSIFICATION	5.813265320580974E-4	DESIGN
should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9998422946149746	WITHOUT_CLASSIFICATION	1.577053850252509E-4	DESIGN
If the property is a special collection property name, return a CollectionPropertyMapping.	WITHOUT_CLASSIFICATION	0.9996909495684801	WITHOUT_CLASSIFICATION	3.09050431519903E-4	DESIGN
Collection of components.	WITHOUT_CLASSIFICATION	0.9995586397236917	WITHOUT_CLASSIFICATION	4.413602763083029E-4	DESIGN
make sure the lhs is "assignable"...	WITHOUT_CLASSIFICATION	0.9996728044494608	WITHOUT_CLASSIFICATION	3.2719555053922105E-4	DESIGN
false indicates to not generate parens around the assignment	WITHOUT_CLASSIFICATION	0.9975713279095719	WITHOUT_CLASSIFICATION	0.0024286720904281153	DESIGN
Register the FromElement with the FROM clause, now that we have the names and aliases.	WITHOUT_CLASSIFICATION	0.9997838272671881	WITHOUT_CLASSIFICATION	2.161727328119441E-4	DESIGN
currently allowed...	WITHOUT_CLASSIFICATION	0.9974277077495539	WITHOUT_CLASSIFICATION	0.002572292250446122	DESIGN
HHH-276 : implied joins in a subselect where clause - The destination needs to be added to the destination's from clause. Not sure if this is will fix everything, but it works.	WITHOUT_CLASSIFICATION	0.9388347887322159	DESIGN	0.06116521126778415	WITHOUT_CLASSIFICATION
return classAlias == null ? className : classAlias;	WITHOUT_CLASSIFICATION	0.9980095308252094	WITHOUT_CLASSIFICATION	0.0019904691747906914	DESIGN
This is an explicit FROM element.	WITHOUT_CLASSIFICATION	0.9982745446319884	WITHOUT_CLASSIFICATION	0.0017254553680116566	DESIGN
ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999610254461945	WITHOUT_CLASSIFICATION	3.897455380550675E-4	DESIGN
Fetch can't be used with scroll() or iterate().	WITHOUT_CLASSIFICATION	0.9460984876395592	WITHOUT_CLASSIFICATION	0.05390151236044076	DESIGN
If it's not implied or it is implied and it's a many to many join where the target wasn't found.	WITHOUT_CLASSIFICATION	0.9999925194571229	WITHOUT_CLASSIFICATION	7.48054287710994E-6	DESIGN
Since this is an explicit FROM element, it can't be implied in the FROM clause.	WITHOUT_CLASSIFICATION	0.9997118093545851	WITHOUT_CLASSIFICATION	2.881906454148594E-4	DESIGN
Do nothing, eplicit from elements are always in the projection list.	WITHOUT_CLASSIFICATION	0.9994639389572063	WITHOUT_CLASSIFICATION	5.360610427936049E-4	DESIGN
propertyName refers to something like collection.size...	WITHOUT_CLASSIFICATION	0.9987818237650338	WITHOUT_CLASSIFICATION	0.0012181762349662336	DESIGN
property name is a sub-path of a component...	WITHOUT_CLASSIFICATION	0.9964682635154726	WITHOUT_CLASSIFICATION	0.0035317364845274903	DESIGN
Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9998847269425084	WITHOUT_CLASSIFICATION	1.152730574915081E-4	DESIGN
nothing to do; even if the operand is a parameter, no way we could infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.8818803710724559	WITHOUT_CLASSIFICATION	0.1181196289275441	DESIGN
logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9997735127237789	WITHOUT_CLASSIFICATION	2.2648727622107375E-4	DESIGN
DotNode uses null here...	WITHOUT_CLASSIFICATION	0.998550660777981	WITHOUT_CLASSIFICATION	0.0014493392220189054	DESIGN
We represent a from-clause alias	WITHOUT_CLASSIFICATION	0.9999014581625806	WITHOUT_CLASSIFICATION	9.854183741944179E-5	DESIGN
we are the LHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9995330030577462	WITHOUT_CLASSIFICATION	4.6699694225381925E-4	DESIGN
we are the RHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9990973418309907	WITHOUT_CLASSIFICATION	9.026581690091481E-4	DESIGN
we represent a naked (simple) prop-ref	WITHOUT_CLASSIFICATION	0.9965178738541832	WITHOUT_CLASSIFICATION	0.003482126145816802	DESIGN
EARLY EXIT!!! return so the resolve call explicitly coming from DotNode can resolve this...	WITHOUT_CLASSIFICATION	0.9851662081646279	WITHOUT_CLASSIFICATION	0.014833791835372078	DESIGN
assume this ident's text does not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9950611185834949	WITHOUT_CLASSIFICATION	0.004938881416505138	DESIGN
just ignore it for now, it'll get resolved later...	WITHOUT_CLASSIFICATION	0.9995975954409569	WITHOUT_CLASSIFICATION	4.02404559043028E-4	DESIGN
This is not actually a constant, but a reference to FROM element.	WITHOUT_CLASSIFICATION	0.9793987202485371	WITHOUT_CLASSIFICATION	0.0206012797514628	DESIGN
check to see if our "propPath" actually represents a property on the persister	WITHOUT_CLASSIFICATION	0.9998719440827457	WITHOUT_CLASSIFICATION	1.2805591725420233E-4	DESIGN
these pieces are needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9989752975026778	WITHOUT_CLASSIFICATION	0.0010247024973222582	DESIGN
used to set the type of the parent dot node	WITHOUT_CLASSIFICATION	0.8975668979531226	WITHOUT_CLASSIFICATION	0.10243310204687749	DESIGN
assume we do not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.969020949206533	WITHOUT_CLASSIFICATION	0.030979050793466904	DESIGN
assume we do not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.969020949206533	WITHOUT_CLASSIFICATION	0.030979050793466904	DESIGN
naked property-refs cannot be used with an aliased from element	WITHOUT_CLASSIFICATION	0.9425394237086031	WITHOUT_CLASSIFICATION	0.05746057629139686	DESIGN
this piece is needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9959316432888444	WITHOUT_CLASSIFICATION	0.004068356711155547	DESIGN
do not over-write the column text, as that has already been "rendered" during resolve	WITHOUT_CLASSIFICATION	0.9979478182630538	WITHOUT_CLASSIFICATION	0.0020521817369462286	DESIGN
for some reason the antlr.CommonAST initialization routines force this method to get called twice. The first time with an empty string	WITHOUT_CLASSIFICATION	0.9999241906551661	WITHOUT_CLASSIFICATION	7.580934483385654E-5	DESIGN
Look up class name using the first identifier in the path.	WITHOUT_CLASSIFICATION	0.9999547474042624	WITHOUT_CLASSIFICATION	4.525259573771964E-5	DESIGN
Add to the query spaces.	WITHOUT_CLASSIFICATION	0.9997359575500985	WITHOUT_CLASSIFICATION	2.640424499014879E-4	DESIGN
If the from element isn't in the same clause, create a new from element.	WITHOUT_CLASSIFICATION	0.9992694313480304	WITHOUT_CLASSIFICATION	7.3056865196973E-4	DESIGN
This is the root level node. Generate an explicit from clause at the root.	WITHOUT_CLASSIFICATION	0.99920073379085	WITHOUT_CLASSIFICATION	7.992662091500698E-4	DESIGN
Correlated subqueries create 'special' implied from nodes because correlated subselects can't use an ANSI-style join	WITHOUT_CLASSIFICATION	0.9999610553704275	WITHOUT_CLASSIFICATION	3.894462957260836E-5	DESIGN
super-duper-classic-parser-regression-testing-mojo-magic...	WITHOUT_CLASSIFICATION	0.9994515852581775	WITHOUT_CLASSIFICATION	5.484147418224609E-4	DESIGN
A collection of entities...	WITHOUT_CLASSIFICATION	0.9981173320272148	WITHOUT_CLASSIFICATION	0.00188266797278524	DESIGN
A collection of components...	WITHOUT_CLASSIFICATION	0.9981173320272148	WITHOUT_CLASSIFICATION	0.00188266797278524	DESIGN
A collection of scalar elements...	WITHOUT_CLASSIFICATION	0.998955664260526	WITHOUT_CLASSIFICATION	0.0010443357394739662	DESIGN
according to both the ANSI-SQL and EJB3 specs, trim can either take exactly one parameter or a variable number of parameters between 1 and 4. from the SQL spec: <trim function> ::= TRIM <left paren> <trim operands> <right paren> <trim operands> ::= [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> <trim specification> ::= LEADING | TRAILING | BOTH If only <trim specification> is omitted, BOTH is assumed; if <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999999048505143	WITHOUT_CLASSIFICATION	9.514948570328648E-8	DESIGN
Don't include sub-classes for implied collection joins or subquery joins.	WITHOUT_CLASSIFICATION	0.9997191370213518	WITHOUT_CLASSIFICATION	2.80862978648117E-4	DESIGN
Treat explict from elements in sub-queries properly.	WITHOUT_CLASSIFICATION	0.9993842732083293	WITHOUT_CLASSIFICATION	6.157267916706681E-4	DESIGN
( implied && DotNode.useThetaStyleImplicitJoins ) ) {	WITHOUT_CLASSIFICATION	0.9580895308774787	WITHOUT_CLASSIFICATION	0.041910469122521346	DESIGN
the "root from-element" in correlated subqueries do need this piece	WITHOUT_CLASSIFICATION	0.9411646045680011	WITHOUT_CLASSIFICATION	0.0588353954319989	DESIGN
Create the FROM element for the target (the elements of the collection).	WITHOUT_CLASSIFICATION	0.9999987085670784	WITHOUT_CLASSIFICATION	1.2914329215371692E-6	DESIGN
If the join is implied, then don't include sub-classes on the element.	WITHOUT_CLASSIFICATION	0.9999703746759809	WITHOUT_CLASSIFICATION	2.96253240190776E-5	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997532110406913	WITHOUT_CLASSIFICATION	2.4678895930873386E-4	DESIGN
The associated entity is implied, but it must be included in the FROM. The collection alias is the role.	WITHOUT_CLASSIFICATION	0.9999446318976397	WITHOUT_CLASSIFICATION	5.5368102360160335E-5	DESIGN
Tag this node as a JOIN. Don't include subclasses in the join. This is a clollection join.	WITHOUT_CLASSIFICATION	0.9994413925308424	WITHOUT_CLASSIFICATION	5.586074691575973E-4	DESIGN
Get the class name of the associated entity.	WITHOUT_CLASSIFICATION	0.999936233384742	WITHOUT_CLASSIFICATION	6.376661525803313E-5	DESIGN
origin, path, implied, columns, classAlias,	WITHOUT_CLASSIFICATION	0.9999731986150411	WITHOUT_CLASSIFICATION	2.68013849588948E-5	DESIGN
implied	WITHOUT_CLASSIFICATION	0.9996479208070831	WITHOUT_CLASSIFICATION	3.5207919291693263E-4	DESIGN
For implied many-to-many, just add the end join.	WITHOUT_CLASSIFICATION	0.9999623920941891	WITHOUT_CLASSIFICATION	3.760790581086633E-5	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997532110406913	WITHOUT_CLASSIFICATION	2.4678895930873386E-4	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997532110406913	WITHOUT_CLASSIFICATION	2.4678895930873386E-4	DESIGN
the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999729131745557	WITHOUT_CLASSIFICATION	2.708682544431703E-5	DESIGN
This causes the factory to instantiate the desired class.	WITHOUT_CLASSIFICATION	0.997196036708121	WITHOUT_CLASSIFICATION	0.002803963291878911	DESIGN
private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9958614805723677	WITHOUT_CLASSIFICATION	0.004138519427632299	DESIGN
Frontbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9990462773234094	WITHOUT_CLASSIFICATION	9.537226765906729E-4	DESIGN
The types represented in the SQL result set. @return The types represented in the SQL result set.	WITHOUT_CLASSIFICATION	0.9999628239898554	WITHOUT_CLASSIFICATION	3.717601014461292E-5	DESIGN
public Type[] getSqlResultTypes() {return sqlResultTypes;}	WITHOUT_CLASSIFICATION	0.9988405218368558	WITHOUT_CLASSIFICATION	0.0011594781631442282	DESIGN
First, collect all of the select expressions. NOTE: This must be done before invoking setScalarColumnText() because setScalarColumnText() changes the AST!!!	WITHOUT_CLASSIFICATION	0.9992916720064211	WITHOUT_CLASSIFICATION	7.08327993578875E-4	DESIGN
First allow the actual type to control the return value. (the actual underlying sqltype could actually be different)	WITHOUT_CLASSIFICATION	0.956678825386472	WITHOUT_CLASSIFICATION	0.04332117461352803	DESIGN
sqlResultTypeList.addAll( constructorArgumentTypeList );	WITHOUT_CLASSIFICATION	0.9997045391190248	WITHOUT_CLASSIFICATION	2.954608809752574E-4	DESIGN
If the data type is not an association type, it could not have been in the FROM clause.	WITHOUT_CLASSIFICATION	0.9994490210956057	WITHOUT_CLASSIFICATION	5.50978904394211E-4	DESIGN
sqlResultTypeList.add( type );	WITHOUT_CLASSIFICATION	0.9989557787431698	WITHOUT_CLASSIFICATION	0.0010442212568302453	DESIGN
Always add the type to the return type list.	WITHOUT_CLASSIFICATION	0.9993084769962426	WITHOUT_CLASSIFICATION	6.915230037574443E-4	DESIGN
add the fetched entities	WITHOUT_CLASSIFICATION	0.9995140338447672	WITHOUT_CLASSIFICATION	4.859661552328046E-4	DESIGN
Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9998679039731991	WITHOUT_CLASSIFICATION	1.3209602680077214E-4	DESIGN
function support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997544551370772	WITHOUT_CLASSIFICATION	2.4554486292279436E-4	DESIGN
If there are any scalars (non-entities) selected, render the select column aliases.	WITHOUT_CLASSIFICATION	0.9999983229212911	WITHOUT_CLASSIFICATION	1.6770787089410014E-6	DESIGN
sqlResultTypeList,	WITHOUT_CLASSIFICATION	0.9995868833392739	WITHOUT_CLASSIFICATION	4.131166607260134E-4	DESIGN
ArrayList sqlResultTypeList,	WITHOUT_CLASSIFICATION	0.9991415100704016	WITHOUT_CLASSIFICATION	8.584899295984931E-4	DESIGN
sqlResultTypes = ( Type[] ) sqlResultTypeList.toArray( new Type[sqlResultTypeList.size()] );	WITHOUT_CLASSIFICATION	0.9982877783044493	WITHOUT_CLASSIFICATION	0.0017122216955507354	DESIGN
lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9991976339520865	WITHOUT_CLASSIFICATION	8.023660479135528E-4	DESIGN
TODO:	WITHOUT_CLASSIFICATION	0.5313962305063696	WITHOUT_CLASSIFICATION	0.46860376949363053	DESIGN
Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9998494748668455	WITHOUT_CLASSIFICATION	1.5052513315444674E-4	DESIGN
Generate an 2d array of column names, the first dimension is parallel with the return types array. The second dimension is the list of column names for each type.	WITHOUT_CLASSIFICATION	0.9999995934881316	WITHOUT_CLASSIFICATION	4.065118683634268E-7	DESIGN
Generate the select expression.	WITHOUT_CLASSIFICATION	0.9997986092799166	WITHOUT_CLASSIFICATION	2.0139072008339913E-4	DESIGN
union subclass support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9938293730876653	WITHOUT_CLASSIFICATION	0.006170626912334766	DESIGN
Skip 'DISTINCT' and 'ALL', so we return the first expression node.	WITHOUT_CLASSIFICATION	0.9999678809928018	WITHOUT_CLASSIFICATION	3.211900719823734E-5	DESIGN
Create SQL_TOKEN nodes for the columns.	WITHOUT_CLASSIFICATION	0.9999219263110608	WITHOUT_CLASSIFICATION	7.807368893923545E-5	DESIGN
Generate the property select tokens.	WITHOUT_CLASSIFICATION	0.999522481610835	WITHOUT_CLASSIFICATION	4.775183891650135E-4	DESIGN
Get the function name node.	WITHOUT_CLASSIFICATION	0.9999480984629849	WITHOUT_CLASSIFICATION	5.1901537015025435E-5	DESIGN
Method expressions in a SELECT should always be considered scalar.	WITHOUT_CLASSIFICATION	0.6108879403152425	WITHOUT_CLASSIFICATION	0.3891120596847575	DESIGN
If this is 'elements' then create a new FROM element.	WITHOUT_CLASSIFICATION	0.9989186901123291	WITHOUT_CLASSIFICATION	0.001081309887670815	DESIGN
Not elements(x)	WITHOUT_CLASSIFICATION	0.9851397293988713	WITHOUT_CLASSIFICATION	0.014860270601128808	DESIGN
Dialect function	WITHOUT_CLASSIFICATION	0.9998898105759229	WITHOUT_CLASSIFICATION	1.1018942407718962E-4	DESIGN
Collection 'property function'	WITHOUT_CLASSIFICATION	0.9989325973671563	WITHOUT_CLASSIFICATION	0.0010674026328436209	DESIGN
If the constant is an IDENT, figure out what it means...	WITHOUT_CLASSIFICATION	0.99904144223482	WITHOUT_CLASSIFICATION	9.585577651799387E-4	DESIGN
IDENT is a class alias in the FROM.	WITHOUT_CLASSIFICATION	0.9997867306120174	WITHOUT_CLASSIFICATION	2.1326938798255944E-4	DESIGN
Resolve to an identity column.	WITHOUT_CLASSIFICATION	0.9814757008468797	WITHOUT_CLASSIFICATION	0.01852429915312026	DESIGN
Otherwise, it's a literal.	WITHOUT_CLASSIFICATION	0.9991453239461762	WITHOUT_CLASSIFICATION	8.546760538238603E-4	DESIGN
the name of an entity class	WITHOUT_CLASSIFICATION	0.998628503993093	WITHOUT_CLASSIFICATION	0.0013714960069069698	DESIGN
the class discriminator value	WITHOUT_CLASSIFICATION	0.9995846954971436	WITHOUT_CLASSIFICATION	4.1530450285647897E-4	DESIGN
Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9996903435642581	WITHOUT_CLASSIFICATION	3.096564357418174E-4	DESIGN
Add a space before the display text.	WITHOUT_CLASSIFICATION	0.9999131113034253	WITHOUT_CLASSIFICATION	8.688869657469801E-5	DESIGN
Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999922225614996	WITHOUT_CLASSIFICATION	7.77743850040716E-6	DESIGN
child == parent.getFirstChild()	WITHOUT_CLASSIFICATION	0.9996324569120143	WITHOUT_CLASSIFICATION	3.6754308798569595E-4	DESIGN
Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999922225614996	WITHOUT_CLASSIFICATION	7.77743850040716E-6	DESIGN
Filter conditions need to be inserted before the HQL where condition and the theta join node. This is because org.hibernate.loader.Loader binds the filter parameters first, then it binds all the HQL query parameters, see org.hibernate.loader.Loader.processFilterParameters().	WITHOUT_CLASSIFICATION	0.9999960977755195	WITHOUT_CLASSIFICATION	3.9022244804885326E-6	DESIGN
Put the FILTERS node before the HQL condition and theta joins	WITHOUT_CLASSIFICATION	0.9999507214932188	WITHOUT_CLASSIFICATION	4.927850678111257E-5	DESIGN
add the current fragment to the FILTERS node	WITHOUT_CLASSIFICATION	0.9998552023998858	WITHOUT_CLASSIFICATION	1.4479760011412008E-4	DESIGN
Create a new THETA_JOINS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999378543673957	WITHOUT_CLASSIFICATION	6.214563260429154E-5	DESIGN
Put the THETA_JOINS node before the HQL condition, after the filters.	WITHOUT_CLASSIFICATION	0.9999881835655322	WITHOUT_CLASSIFICATION	1.1816434467878014E-5	DESIGN
add the current fragment to the THETA_JOINS node	WITHOUT_CLASSIFICATION	0.9998552023998858	WITHOUT_CLASSIFICATION	1.4479760011412008E-4	DESIGN
First, try to get the persister using the given name directly.	WITHOUT_CLASSIFICATION	0.9998041365217937	WITHOUT_CLASSIFICATION	1.9586347820634242E-4	DESIGN
unable to locate it using this name	WITHOUT_CLASSIFICATION	0.9986459456295392	WITHOUT_CLASSIFICATION	0.0013540543704608084	DESIGN
If that didn't work, try using the 'import' name.	WITHOUT_CLASSIFICATION	0.9998757165524331	WITHOUT_CLASSIFICATION	1.2428344756680172E-4	DESIGN
Implicit joins use theta style (WHERE pk = fk), explicit joins use JOIN (after from)	WITHOUT_CLASSIFICATION	0.9996366011599177	WITHOUT_CLASSIFICATION	3.6339884008223844E-4	DESIGN
locate the registered function by the given name	WITHOUT_CLASSIFICATION	0.9999884602777267	WITHOUT_CLASSIFICATION	1.153972227316471E-5	DESIGN
determine the type of the first argument...	WITHOUT_CLASSIFICATION	0.9996322086117624	WITHOUT_CLASSIFICATION	3.677913882375838E-4	DESIGN
Use the DOT node to emit the first column name. Create the column names, folled by the column aliases.	WITHOUT_CLASSIFICATION	0.9999963496025398	WITHOUT_CLASSIFICATION	3.6503974600699263E-6	DESIGN
Note: this simply constructs a "raw" SQL_TOKEN representing the where fragment and injects this into the tree. This "works"; however it is probably not the best long-term solution. At some point we probably want to apply an additional grammar to properly tokenize this where fragment into constituent parts focused on the operators embedded within the fragment.	WITHOUT_CLASSIFICATION	0.9985239005206165	DESIGN	0.0014760994793835485	WITHOUT_CLASSIFICATION
Append the text of the current node.	WITHOUT_CLASSIFICATION	0.999995543577003	WITHOUT_CLASSIFICATION	4.456422996862738E-6	DESIGN
If the node has a first child, recurse into the first child.	WITHOUT_CLASSIFICATION	0.999977778168034	WITHOUT_CLASSIFICATION	2.2221831965931016E-5	DESIGN
If there is a second child (RHS), recurse into that child.	WITHOUT_CLASSIFICATION	0.9999708259653882	WITHOUT_CLASSIFICATION	2.9174034611838903E-5	DESIGN
Iterate through the alias,JoinSequence pairs and generate SQL token nodes.	WITHOUT_CLASSIFICATION	0.9999762649026998	WITHOUT_CLASSIFICATION	2.3735097300195596E-5	DESIGN
If the from element represents a JOIN_FRAGMENT and it is a theta-style join, convert its type from JOIN_FRAGMENT to FROM_FRAGMENT	WITHOUT_CLASSIFICATION	0.999950047857004	WITHOUT_CLASSIFICATION	4.9952142995916634E-5	DESIGN
this is used during SqlGenerator processing	WITHOUT_CLASSIFICATION	0.6470353362576778	WITHOUT_CLASSIFICATION	0.352964663742322	DESIGN
If there is a FROM fragment and the FROM element is an explicit, then add the from part.	WITHOUT_CLASSIFICATION	0.9996848936519682	WITHOUT_CLASSIFICATION	3.151063480318218E-4	DESIGN
&& StringHelper.isNotEmpty( frag )	WITHOUT_CLASSIFICATION	0.990889902486237	WITHOUT_CLASSIFICATION	0.009110097513763078	DESIGN
The FROM fragment will probably begin with ', '. Remove this if it is present.	WITHOUT_CLASSIFICATION	0.7282887705113493	WITHOUT_CLASSIFICATION	0.2717112294886507	DESIGN
This uses a PathExpressionParser but notice that compound paths are not valid, only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9911690251206035	WITHOUT_CLASSIFICATION	0.008830974879396587	DESIGN
SELECT p FROM p IN CLASS eg.Person ORDER BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9990878346956625	WITHOUT_CLASSIFICATION	9.121653043374E-4	DESIGN
The reason for this is SQL doesn't let you sort by an expression you are not returning in the result set.	WITHOUT_CLASSIFICATION	0.9984033561786803	WITHOUT_CLASSIFICATION	0.0015966438213197713	DESIGN
named query parameter	WITHOUT_CLASSIFICATION	0.9985806263687026	WITHOUT_CLASSIFICATION	0.001419373631297395	DESIGN
default mode	WITHOUT_CLASSIFICATION	0.9995307747256607	WITHOUT_CLASSIFICATION	4.69225274339338E-4	DESIGN
QueryJoinFragment join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.999919073904351	WITHOUT_CLASSIFICATION	8.092609564896617E-5	DESIGN
reset the dotcount (but not the path) after reset!	WITHOUT_CLASSIFICATION	0.9996539404039732	WITHOUT_CLASSIFICATION	3.4605959602687045E-4	DESIGN
after reset!	WITHOUT_CLASSIFICATION	0.9997867156943491	WITHOUT_CLASSIFICATION	2.1328430565095734E-4	DESIGN
we don't need to worry about any condition in the ON clause here (toFromFragmentString), since anything in the ON condition is already applied to the whole query	WITHOUT_CLASSIFICATION	0.9998116601909718	WITHOUT_CLASSIFICATION	1.8833980902822938E-4	DESIGN
bit_length feels a bit broken to me. We have to cast to char in order to pass when a numeric value is supplied. But of course the answers given will be wildly different for these two datatypes. 1234.5678 will be 9 bytes as a char string but will be 8 or 16 bytes as a true numeric. Jay Nance 2006-09-22	WITHOUT_CLASSIFICATION	0.9995211113644238	WITHOUT_CLASSIFICATION	4.788886355761742E-4	DESIGN
dotcount>=2	WITHOUT_CLASSIFICATION	0.9995868833392739	WITHOUT_CLASSIFICATION	4.131166607260134E-4	DESIGN
Do the corresponding RHS	WITHOUT_CLASSIFICATION	0.9996077688302277	WITHOUT_CLASSIFICATION	3.922311697723876E-4	DESIGN
if its "id"	WITHOUT_CLASSIFICATION	0.9999025570873238	WITHOUT_CLASSIFICATION	9.744291267622365E-5	DESIGN
or its the id property name	WITHOUT_CLASSIFICATION	0.9993752044805855	WITHOUT_CLASSIFICATION	6.247955194145031E-4	DESIGN
join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.999919073904351	WITHOUT_CLASSIFICATION	8.092609564896617E-5	DESIGN
important!!	WITHOUT_CLASSIFICATION	0.9995868833392739	WITHOUT_CLASSIFICATION	4.131166607260134E-4	DESIGN
String[] keyCols = collPersister.getKeyColumnNames();	WITHOUT_CLASSIFICATION	0.9998327426346433	WITHOUT_CLASSIFICATION	1.6725736535671054E-4	DESIGN
an association	WITHOUT_CLASSIFICATION	0.9998072312254251	WITHOUT_CLASSIFICATION	1.9276877457478792E-4	DESIGN
allow index() function:	WITHOUT_CLASSIFICATION	0.9958537744824426	WITHOUT_CLASSIFICATION	0.0041462255175573025	DESIGN
here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9842601690135805	WITHOUT_CLASSIFICATION	0.015739830986419363	DESIGN
The reason for this is SQL doesn't let you sort by an expression you are not returning in the result set.	WITHOUT_CLASSIFICATION	0.9984033561786803	WITHOUT_CLASSIFICATION	0.0015966438213197713	DESIGN
many-to-many	WITHOUT_CLASSIFICATION	0.9995870625691251	WITHOUT_CLASSIFICATION	4.129374308748191E-4	DESIGN
collections of values	WITHOUT_CLASSIFICATION	0.9997102941264984	WITHOUT_CLASSIFICATION	2.897058735016745E-4	DESIGN
opening paren in new Foo ( ... )	WITHOUT_CLASSIFICATION	0.9604320263577671	WITHOUT_CLASSIFICATION	0.03956797364223279	DESIGN
if we are inside a new Result(), but not inside a nested function	WITHOUT_CLASSIFICATION	0.9984945102847229	WITHOUT_CLASSIFICATION	0.0015054897152770685	DESIGN
special case	WITHOUT_CLASSIFICATION	0.9999673692010587	WITHOUT_CLASSIFICATION	3.2630798941278014E-5	DESIGN
the name of an SQL function	WITHOUT_CLASSIFICATION	0.9999136408335991	WITHOUT_CLASSIFICATION	8.63591664008729E-5	DESIGN
null child could occur for no from clause in a filter	WITHOUT_CLASSIFICATION	0.9990067551379204	WITHOUT_CLASSIFICATION	9.932448620796504E-4	DESIGN
this is basically a copy/paste of OrderByParser ... might be worth refactoring	WITHOUT_CLASSIFICATION	0.9466987964367247	DESIGN	0.0533012035632753	WITHOUT_CLASSIFICATION
SELECT p FROM p IN CLASS eg.Person GROUP BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9984033455204507	WITHOUT_CLASSIFICATION	0.0015966544795492758	DESIGN
return aliases not supported in classic translator!	WITHOUT_CLASSIFICATION	0.9982574697465686	WITHOUT_CLASSIFICATION	0.0017425302534314006	DESIGN
register collection role	WITHOUT_CLASSIFICATION	0.9986484458840712	WITHOUT_CLASSIFICATION	0.001351554115928813	DESIGN
The keyword used to specify an identity column, if identity column key generation is supported.	WITHOUT_CLASSIFICATION	0.9965044495683018	WITHOUT_CLASSIFICATION	0.003495550431698264	DESIGN
.getElementPropertyMapping();	WITHOUT_CLASSIFICATION	0.9990109555261806	WITHOUT_CLASSIFICATION	9.890444738194786E-4	DESIGN
crossJoins.add(name);	WITHOUT_CLASSIFICATION	0.9990109555261806	WITHOUT_CLASSIFICATION	9.890444738194786E-4	DESIGN
ie no select clause in HQL	WITHOUT_CLASSIFICATION	0.9998503805754213	WITHOUT_CLASSIFICATION	1.4961942457867526E-4	DESIGN
initialize the Set of queried identifier spaces (ie. tables)	WITHOUT_CLASSIFICATION	0.9997176279831927	WITHOUT_CLASSIFICATION	2.8237201680727505E-4	DESIGN
ie. no select clause	WITHOUT_CLASSIFICATION	0.9999434071286069	WITHOUT_CLASSIFICATION	5.6592871393122376E-5	DESIGN
there _was_ a select clause	WITHOUT_CLASSIFICATION	0.999815662826688	WITHOUT_CLASSIFICATION	1.843371733120452E-4	DESIGN
return the concrete type, or the underlying type if a concrete type was not specified	WITHOUT_CLASSIFICATION	0.9998631170274433	WITHOUT_CLASSIFICATION	1.3688297255675234E-4	DESIGN
many-to-many	WITHOUT_CLASSIFICATION	0.9995870625691251	WITHOUT_CLASSIFICATION	4.129374308748191E-4	DESIGN
q.addCollection(collectionName, collectionRole);	WITHOUT_CLASSIFICATION	0.9994515852581775	WITHOUT_CLASSIFICATION	5.484147418224609E-4	DESIGN
classic parser does not support bulk manipulation statements	WITHOUT_CLASSIFICATION	0.9984089812910458	WITHOUT_CLASSIFICATION	0.001591018708954131	DESIGN
can't cache this stuff either (per-invocation)	WITHOUT_CLASSIFICATION	0.9982744896710476	WITHOUT_CLASSIFICATION	0.0017255103289524109	DESIGN
unfortunately this stuff can't be cached because it is per-invocation, not constant for the QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9962972293133534	WITHOUT_CLASSIFICATION	0.003702770686646721	DESIGN
This is the legacy behaviour for HQL queries...	WITHOUT_CLASSIFICATION	0.9980286310871505	WITHOUT_CLASSIFICATION	0.0019713689128495917	DESIGN
not known!	WITHOUT_CLASSIFICATION	0.9984822960510548	WITHOUT_CLASSIFICATION	0.0015177039489452633	DESIGN
not known!	WITHOUT_CLASSIFICATION	0.9984822960510548	WITHOUT_CLASSIFICATION	0.0015177039489452633	DESIGN
we have the form: trim(trimSource) so we trim leading and trailing spaces EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9998526913744765	WITHOUT_CLASSIFICATION	1.473086255234473E-4	DESIGN
not known!	WITHOUT_CLASSIFICATION	0.9984822960510548	WITHOUT_CLASSIFICATION	0.0015177039489452633	DESIGN
not known!	WITHOUT_CLASSIFICATION	0.9984822960510548	WITHOUT_CLASSIFICATION	0.0015177039489452633	DESIGN
Need this, since join condition can appear inside parens!	WITHOUT_CLASSIFICATION	0.9873127463103961	WITHOUT_CLASSIFICATION	0.012687253689603772	DESIGN
tokens that close a sub expression tokens that open a sub expression tokens that would indicate a sub expression is a boolean expression	WITHOUT_CLASSIFICATION	0.9999999436488604	WITHOUT_CLASSIFICATION	5.635113973165246E-8	DESIGN
expressionTerminators.add(","); deliberately excluded	WITHOUT_CLASSIFICATION	0.9997443863767667	WITHOUT_CLASSIFICATION	2.556136232332938E-4	DESIGN
expressionOpeners.add(","); deliberately excluded	WITHOUT_CLASSIFICATION	0.9997443863767667	WITHOUT_CLASSIFICATION	2.556136232332938E-4	DESIGN
we have the form: trim(from trimSource). This is functionally equivalent to trim(trimSource) EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.998574718396353	WITHOUT_CLASSIFICATION	0.0014252816036469148	DESIGN
otherwise, a trim-specification and/or a trim-character have been specified; we need to decide which options are present and "do the right thing" should leading trim-characters be trimmed? should trailing trim-characters be trimmed? the trim-character (what is to be trimmed off?) the trim-source (from where should it be trimmed?)	WITHOUT_CLASSIFICATION	0.9986623728491956	WITHOUT_CLASSIFICATION	0.0013376271508044155	DESIGN
Inside a BETWEEN ... AND ... expression	WITHOUT_CLASSIFICATION	0.9988012088520841	WITHOUT_CLASSIFICATION	0.001198791147915959	DESIGN
were an odd or even number of NOTs encountered the join string built up by compound paths inside this expression a flag indicating if the subexpression is known to be boolean	WITHOUT_CLASSIFICATION	0.9999725687143808	WITHOUT_CLASSIFICATION	2.7431285619259643E-5	DESIGN
ie. a many-to-many	WITHOUT_CLASSIFICATION	0.9991889265874959	WITHOUT_CLASSIFICATION	8.110734125039354E-4	DESIGN
Cope with [,]	WITHOUT_CLASSIFICATION	0.9993344886175208	WITHOUT_CLASSIFICATION	6.655113824791739E-4	DESIGN
Cope with a continued path expression (ie. ].baz)	WITHOUT_CLASSIFICATION	0.9998711406407021	WITHOUT_CLASSIFICATION	1.2885935929781106E-4	DESIGN
NOTE: early return	WITHOUT_CLASSIFICATION	0.9999302111429931	WITHOUT_CLASSIFICATION	6.978885700698028E-5	DESIGN
Cope with a subselect	WITHOUT_CLASSIFICATION	0.9968751604495047	WITHOUT_CLASSIFICATION	0.0031248395504951698	DESIGN
Cope with special cases of AND, NOT, ()	WITHOUT_CLASSIFICATION	0.9999979683665604	WITHOUT_CLASSIFICATION	2.0316334395565756E-6	DESIGN
Close extra brackets we opened	WITHOUT_CLASSIFICATION	0.9997567382174749	WITHOUT_CLASSIFICATION	2.4326178252511395E-4	DESIGN
take note when this is a boolean expression	WITHOUT_CLASSIFICATION	0.9991933121836837	WITHOUT_CLASSIFICATION	8.066878163163506E-4	DESIGN
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999942031671425	WITHOUT_CLASSIFICATION	5.7968328576020365E-6	DESIGN
process a token, mapping OO path expressions to SQL expressions	WITHOUT_CLASSIFICATION	0.9999754994317854	WITHOUT_CLASSIFICATION	2.4500568214533584E-5	DESIGN
Open any extra brackets we might need.	WITHOUT_CLASSIFICATION	0.9950910968739582	WITHOUT_CLASSIFICATION	0.004908903126041746	DESIGN
Cope with special cases of AND, NOT, )	WITHOUT_CLASSIFICATION	0.9922665795080151	WITHOUT_CLASSIFICATION	0.0077334204919848396	DESIGN
the next one up must also be	WITHOUT_CLASSIFICATION	0.9982986174376766	WITHOUT_CLASSIFICATION	0.001701382562323414	DESIGN
Add any joins	WITHOUT_CLASSIFICATION	0.9998431333360316	WITHOUT_CLASSIFICATION	1.568666639684953E-4	DESIGN
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999942031671425	WITHOUT_CLASSIFICATION	5.7968328576020365E-6	DESIGN
named query parameter	WITHOUT_CLASSIFICATION	0.9985806263687026	WITHOUT_CLASSIFICATION	0.001419373631297395	DESIGN
path expression	WITHOUT_CLASSIFICATION	0.9999681393133716	WITHOUT_CLASSIFICATION	3.18606866283695E-5	DESIGN
saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999101264728982	WITHOUT_CLASSIFICATION	8.987352710184925E-5	DESIGN
persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9997181103355679	WITHOUT_CLASSIFICATION	2.8188966443205106E-4	DESIGN
anything else	WITHOUT_CLASSIFICATION	0.9999754281913547	WITHOUT_CLASSIFICATION	2.4571808645440538E-5	DESIGN
the path expression continues after a ]	WITHOUT_CLASSIFICATION	0.9999820520437018	WITHOUT_CLASSIFICATION	1.7947956298154227E-5	DESIGN
careful with this!	WITHOUT_CLASSIFICATION	0.9989432704315897	WITHOUT_CLASSIFICATION	0.0010567295684102776	DESIGN
the path expression ends at the ]	WITHOUT_CLASSIFICATION	0.9999620940954175	WITHOUT_CLASSIFICATION	3.7905904582525324E-5	DESIGN
"finish off" the join	WITHOUT_CLASSIFICATION	0.9998717278274001	WITHOUT_CLASSIFICATION	1.2827217259993738E-4	DESIGN
NOTICE: no " or . since they are part of (compound) identifiers	WITHOUT_CLASSIFICATION	0.9999865900153857	WITHOUT_CLASSIFICATION	1.3409984614396065E-5	DESIGN
cannot instantiate	WITHOUT_CLASSIFICATION	0.9999272760077799	WITHOUT_CLASSIFICATION	7.272399222013306E-5	DESIGN
start by looking for HQL keywords...	WITHOUT_CLASSIFICATION	0.9997506855341839	WITHOUT_CLASSIFICATION	2.49314465816085E-4	DESIGN
inner joins can be abbreviated to 'join'	WITHOUT_CLASSIFICATION	0.9955205942194739	WITHOUT_CLASSIFICATION	0.004479405780526151	DESIGN
'outer' is optional and is ignored	WITHOUT_CLASSIFICATION	0.9998262815299043	WITHOUT_CLASSIFICATION	1.7371847009586147E-4	DESIGN
now anything that is not a HQL keyword	WITHOUT_CLASSIFICATION	0.9997148392944456	WITHOUT_CLASSIFICATION	2.851607055544751E-4	DESIGN
process the "old" HQL style where aliases appear _first_ ie. using the IN or IN CLASS constructions	WITHOUT_CLASSIFICATION	0.9999399123571802	WITHOUT_CLASSIFICATION	6.008764281973686E-5	DESIGN
treat it as a classname	WITHOUT_CLASSIFICATION	0.998688761503664	WITHOUT_CLASSIFICATION	0.0013112384963360132	DESIGN
treat it as a path expression	WITHOUT_CLASSIFICATION	0.9998930331962324	WITHOUT_CLASSIFICATION	1.0696680376761034E-4	DESIGN
starts with the name of a mapped class (new style)	WITHOUT_CLASSIFICATION	0.9981289848788284	WITHOUT_CLASSIFICATION	0.0018710151211715664	DESIGN
starts with a path expression (new style)	WITHOUT_CLASSIFICATION	0.9999488059198308	WITHOUT_CLASSIFICATION	5.11940801690498E-5	DESIGN
allow ODMG OQL style: from Person p, p.cars c	WITHOUT_CLASSIFICATION	0.9988944991533348	WITHOUT_CLASSIFICATION	0.00110550084666514	DESIGN
handle quoted strings	WITHOUT_CLASSIFICATION	0.996839883653821	WITHOUT_CLASSIFICATION	0.003160116346179	DESIGN
Object insertions, updates, and deletions have list semantics because they must happen in the right order so as to respect referential integrity	WITHOUT_CLASSIFICATION	0.9999942433488203	WITHOUT_CLASSIFICATION	5.756651179740211E-6	DESIGN
"finish off" the join	WITHOUT_CLASSIFICATION	0.9998717278274001	WITHOUT_CLASSIFICATION	1.2827217259993738E-4	DESIGN
ignore whitespace	WITHOUT_CLASSIFICATION	0.999914231282533	WITHOUT_CLASSIFICATION	8.576871746700983E-5	DESIGN
do replacements	WITHOUT_CLASSIFICATION	0.9994160755154722	WITHOUT_CLASSIFICATION	5.83924484527784E-4	DESIGN
handle HQL2 collection syntax	WITHOUT_CLASSIFICATION	0.9932420529627923	WITHOUT_CLASSIFICATION	0.006757947037207644	DESIGN
uuid.hex is deprecated	WITHOUT_CLASSIFICATION	0.967744623099554	WITHOUT_CLASSIFICATION	0.032255376900445956	DESIGN
AbstractSelectingDelegate impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999610254461945	WITHOUT_CLASSIFICATION	3.897455380550675E-4	DESIGN
hilo params	WITHOUT_CLASSIFICATION	0.9996136992505544	WITHOUT_CLASSIFICATION	3.8630074944556036E-4	DESIGN
sql = query;	WITHOUT_CLASSIFICATION	0.9999543832145745	WITHOUT_CLASSIFICATION	4.561678542535625E-5	DESIGN
performance opt	WITHOUT_CLASSIFICATION	0.9991186360042439	WITHOUT_CLASSIFICATION	8.813639957560416E-4	DESIGN
sql = update;	WITHOUT_CLASSIFICATION	0.9999541049199431	WITHOUT_CLASSIFICATION	4.5895080056905705E-5	DESIGN
hilo config	WITHOUT_CLASSIFICATION	0.9995156675751066	WITHOUT_CLASSIFICATION	4.843324248934907E-4	DESIGN
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999243610365753	WITHOUT_CLASSIFICATION	7.563896342460376E-5	DESIGN
don't allow comments on these insert statements as comments totally blow up the Oracle getGeneratedKeys "support" :(	WITHOUT_CLASSIFICATION	0.9986479255403791	WITHOUT_CLASSIFICATION	0.0013520744596210322	DESIGN
abort the save (the object is already saved by a circular cascade)	WITHOUT_CLASSIFICATION	0.9959857340032993	WITHOUT_CLASSIFICATION	0.004014265996700756	DESIGN
throw new IdentifierGenerationException("save associated object first, or disable cascade for inverse association");	WITHOUT_CLASSIFICATION	0.9999571994919321	WITHOUT_CLASSIFICATION	4.280050806793021E-5	DESIGN
intentionally empty	WITHOUT_CLASSIFICATION	0.9996279301531421	WITHOUT_CLASSIFICATION	3.72069846857864E-4	DESIGN
do nothing to avoid a lazy property initialization	WITHOUT_CLASSIFICATION	0.9991560214913849	WITHOUT_CLASSIFICATION	8.439785086150339E-4	DESIGN
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9996501703315998	WITHOUT_CLASSIFICATION	3.4982966840025297E-4	DESIGN
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999243610365753	WITHOUT_CLASSIFICATION	7.563896342460376E-5	DESIGN
do nothing until we hit the rsult set containing the generated id	WITHOUT_CLASSIFICATION	0.9980949133375077	WITHOUT_CLASSIFICATION	0.0019050866624924457	DESIGN
COLUMN and TABLE should be renamed but it would break the public API	WITHOUT_CLASSIFICATION	0.950459664687442	WITHOUT_CLASSIFICATION	0.049540335312558	DESIGN
Loaded entity instances, by EntityKey	WITHOUT_CLASSIFICATION	0.9992757376707607	WITHOUT_CLASSIFICATION	7.242623292393168E-4	DESIGN
if the given name is un-qualified we may neen to qualify it	WITHOUT_CLASSIFICATION	0.9989621064017102	WITHOUT_CLASSIFICATION	0.0010378935982897188	DESIGN
the default...	WITHOUT_CLASSIFICATION	0.9997788759761356	WITHOUT_CLASSIFICATION	2.2112402386444022E-4	DESIGN
unfortunately not really safe to normalize this to 1 as an initial value like we do the others because we would not be able to control this if we are using a sequence...	WITHOUT_CLASSIFICATION	0.9999552822359581	WITHOUT_CLASSIFICATION	4.471776404188118E-5	DESIGN
intentionally empty	WITHOUT_CLASSIFICATION	0.9996279301531421	WITHOUT_CLASSIFICATION	3.72069846857864E-4	DESIGN
Identity map of CollectionEntry instances, by the collection wrapper	WITHOUT_CLASSIFICATION	0.9999702698497415	WITHOUT_CLASSIFICATION	2.9730150258444808E-5	DESIGN
general purpose parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999859450109008	WITHOUT_CLASSIFICATION	1.4054989099279714E-5	DESIGN
table-specific parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999935334546328	WITHOUT_CLASSIFICATION	6.466545367204437E-5	DESIGN
Configurable implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998350622853547	WITHOUT_CLASSIFICATION	1.6493771464528938E-4	DESIGN
IdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998350622853547	WITHOUT_CLASSIFICATION	1.6493771464528938E-4	DESIGN
PersistentIdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998350622853547	WITHOUT_CLASSIFICATION	1.6493771464528938E-4	DESIGN
prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9998750384753599	WITHOUT_CLASSIFICATION	1.2496152464009876E-4	DESIGN
prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9998750384753599	WITHOUT_CLASSIFICATION	1.2496152464009876E-4	DESIGN
fetch the generated id in a separate query	WITHOUT_CLASSIFICATION	0.992929298893287	WITHOUT_CLASSIFICATION	0.007070701106713039	DESIGN
we just hit the last position	WITHOUT_CLASSIFICATION	0.9994859883522108	WITHOUT_CLASSIFICATION	5.140116477891997E-4	DESIGN
scroll ahead	WITHOUT_CLASSIFICATION	0.9968608745538978	WITHOUT_CLASSIFICATION	0.0031391254461022003	DESIGN
scroll backward	WITHOUT_CLASSIFICATION	0.9988246154421683	WITHOUT_CLASSIFICATION	0.0011753845578316503	DESIGN
we have not yet hit the last result...	WITHOUT_CLASSIFICATION	0.9982615166445543	WITHOUT_CLASSIFICATION	0.0017384833554456725	DESIGN
Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994985384115932	WITHOUT_CLASSIFICATION	5.014615884067296E-4	DESIGN
State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999676953420652	WITHOUT_CLASSIFICATION	3.230465793480462E-4	DESIGN
Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999610254461945	WITHOUT_CLASSIFICATION	3.897455380550675E-4	DESIGN
do this when all the properties are updateable since there is a certain likelihood that the information will already be snapshot-cached.	WITHOUT_CLASSIFICATION	0.9997344353787145	WITHOUT_CLASSIFICATION	2.65564621285377E-4	DESIGN
Inner classes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998175387226453	WITHOUT_CLASSIFICATION	1.8246127735471884E-4	DESIGN
Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994985384115932	WITHOUT_CLASSIFICATION	5.014615884067296E-4	DESIGN
State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999676953420652	WITHOUT_CLASSIFICATION	3.230465793480462E-4	DESIGN
Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999610254461945	WITHOUT_CLASSIFICATION	3.897455380550675E-4	DESIGN
Caches	WITHOUT_CLASSIFICATION	0.999627030731016	WITHOUT_CLASSIFICATION	3.7296926898392813E-4	DESIGN
Generators:	WITHOUT_CLASSIFICATION	0.9995868833392739	WITHOUT_CLASSIFICATION	4.131166607260134E-4	DESIGN
cache region is defined by the root-class in the hierarchy...	WITHOUT_CLASSIFICATION	0.9994878852988937	WITHOUT_CLASSIFICATION	5.12114701106416E-4	DESIGN
check if the detached object being merged is the parent	WITHOUT_CLASSIFICATION	0.9998406674355831	WITHOUT_CLASSIFICATION	1.593325644168969E-4	DESIGN
after all persisters and named queries are registered	WITHOUT_CLASSIFICATION	0.9998455670341998	WITHOUT_CLASSIFICATION	1.544329658002538E-4	DESIGN
if we get here, it is possible that we have a proxy 'in the way' of the merge map resolution... NOTE: decided to put this here rather than in the above loop as I was nervous about the performance of the loop-in-loop especially considering this is far more likely the 'edge case'	WITHOUT_CLASSIFICATION	0.9977819914992206	WITHOUT_CLASSIFICATION	0.002218008500779403	DESIGN
JNDI + Serialization:	WITHOUT_CLASSIFICATION	0.9991557116572941	WITHOUT_CLASSIFICATION	8.442883427059329E-4	DESIGN
checking for named queries	WITHOUT_CLASSIFICATION	0.9498552122576926	WITHOUT_CLASSIFICATION	0.050144787742307434	DESIGN
stats	WITHOUT_CLASSIFICATION	0.9996374592231051	WITHOUT_CLASSIFICATION	3.625407768949451E-4	DESIGN
EntityNotFoundDelegate	WITHOUT_CLASSIFICATION	0.9990109555261806	WITHOUT_CLASSIFICATION	9.890444738194786E-4	DESIGN
Check named HQL queries	WITHOUT_CLASSIFICATION	0.9991034361117178	WITHOUT_CLASSIFICATION	8.965638882823388E-4	DESIGN
this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.8716932538756049	DESIGN	0.12830674612439516	WITHOUT_CLASSIFICATION
prevents this session from adding things to cache	WITHOUT_CLASSIFICATION	0.9880067024380096	WITHOUT_CLASSIFICATION	0.01199329756199043	DESIGN
from javax.naming.Referenceable	WITHOUT_CLASSIFICATION	0.9992519578856336	WITHOUT_CLASSIFICATION	7.480421143664411E-4	DESIGN
look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9993130887887324	WITHOUT_CLASSIFICATION	6.86911211267724E-4	DESIGN
for a dynamic-class	WITHOUT_CLASSIFICATION	0.9991950876037933	WITHOUT_CLASSIFICATION	8.049123962067847E-4	DESIGN
test this entity to see if we must query it	WITHOUT_CLASSIFICATION	0.9995489941816966	WITHOUT_CLASSIFICATION	4.51005818303341E-4	DESIGN
NOTE EARLY EXIT	WITHOUT_CLASSIFICATION	0.9996840391003099	WITHOUT_CLASSIFICATION	3.1596089969010736E-4	DESIGN
for backward-compatability	WITHOUT_CLASSIFICATION	0.9990188926992524	WITHOUT_CLASSIFICATION	9.811073007476574E-4	DESIGN
ignore this error for now	WITHOUT_CLASSIFICATION	0.9973796044144544	WITHOUT_CLASSIFICATION	0.002620395585545629	DESIGN
to stop the class from being unloaded	WITHOUT_CLASSIFICATION	0.9995287708963111	WITHOUT_CLASSIFICATION	4.7122910368882487E-4	DESIGN
in case we were deserialized in a different JVM, look for an instance with the same name (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9483157131610561	WITHOUT_CLASSIFICATION	0.05168428683894388	DESIGN
must add to JNDI _after_ adding to HashMaps, because some JNDI servers use serialization	WITHOUT_CLASSIFICATION	0.9990748255337616	WITHOUT_CLASSIFICATION	9.251744662384512E-4	DESIGN
Make sure this is a defined parameter and check the incoming value type	WITHOUT_CLASSIFICATION	0.9989167695543184	WITHOUT_CLASSIFICATION	0.0010832304456816141	DESIGN
for each of the defined parameters, make sure its value has been set	WITHOUT_CLASSIFICATION	0.9999891317557232	WITHOUT_CLASSIFICATION	1.0868244276787747E-5	DESIGN
we never need to apply locks to the SQL	WITHOUT_CLASSIFICATION	0.998582018149527	WITHOUT_CLASSIFICATION	0.001417981850473056	DESIGN
inserts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994574509702328	WITHOUT_CLASSIFICATION	5.425490297672341E-4	DESIGN
deletes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994761142070349	WITHOUT_CLASSIFICATION	5.238857929650516E-4	DESIGN
during deserialization, we need to reconnect all proxies and collections to this session, as well as the EntityEntry and CollectionEntry instances; these associations are transient because serialization is used for different things.	WITHOUT_CLASSIFICATION	0.5479162259852179	WITHOUT_CLASSIFICATION	0.45208377401478206	DESIGN
updates ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998229943534556	WITHOUT_CLASSIFICATION	1.7700564654440982E-4	DESIGN
loading ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999838270108087	WITHOUT_CLASSIFICATION	1.6172989191295874E-4	DESIGN
final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999406463564933	WITHOUT_CLASSIFICATION	5.935364350666911E-5	DESIGN
final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999406463564933	WITHOUT_CLASSIFICATION	5.935364350666911E-5	DESIGN
first, try to load it from the temp PC associated to this SS	WITHOUT_CLASSIFICATION	0.9998929210043279	WITHOUT_CLASSIFICATION	1.0707899567204847E-4	DESIGN
if the metadata allowed proxy creation and caller did not request forceful eager loading, generate a proxy	WITHOUT_CLASSIFICATION	0.9999987719157165	WITHOUT_CLASSIFICATION	1.2280842835160745E-6	DESIGN
otherwise immediately materialize it	WITHOUT_CLASSIFICATION	0.9993668269437732	WITHOUT_CLASSIFICATION	6.331730562268303E-4	DESIGN
/	WITHOUT_CLASSIFICATION	0.9997890064317186	WITHOUT_CLASSIFICATION	2.109935682814265E-4	DESIGN
no auto-flushing to support in stateless session	WITHOUT_CLASSIFICATION	0.9979671001120968	WITHOUT_CLASSIFICATION	0.0020328998879031715	DESIGN
after setting values to object, entityMode	WITHOUT_CLASSIFICATION	0.9999793361094222	WITHOUT_CLASSIFICATION	2.0663890577692624E-5	DESIGN
for EJB3	WITHOUT_CLASSIFICATION	0.999630025674766	WITHOUT_CLASSIFICATION	3.699743252339855E-4	DESIGN
just ignore	WITHOUT_CLASSIFICATION	0.9999166638913448	WITHOUT_CLASSIFICATION	8.333610865519429E-5	DESIGN
do a check	WITHOUT_CLASSIFICATION	0.999675474038234	WITHOUT_CLASSIFICATION	3.2452596176594855E-4	DESIGN
saveOrUpdate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997489856280154	WITHOUT_CLASSIFICATION	2.5101437198450774E-4	DESIGN
update() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997597616974584	WITHOUT_CLASSIFICATION	2.402383025417182E-4	DESIGN
lock() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997489856280154	WITHOUT_CLASSIFICATION	2.5101437198450774E-4	DESIGN
persist() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997489856280154	WITHOUT_CLASSIFICATION	2.5101437198450774E-4	DESIGN
persistOnFlush() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997489856280154	WITHOUT_CLASSIFICATION	2.5101437198450774E-4	DESIGN
merge() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997496969348983	WITHOUT_CLASSIFICATION	2.5030306510173325E-4	DESIGN
saveOrUpdateCopy() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997489856280154	WITHOUT_CLASSIFICATION	2.5101437198450774E-4	DESIGN
delete() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997103943009263	WITHOUT_CLASSIFICATION	2.8960569907364355E-4	DESIGN
load()/get() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997489856280154	WITHOUT_CLASSIFICATION	2.5101437198450774E-4	DESIGN
refresh() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997489856280154	WITHOUT_CLASSIFICATION	2.5101437198450774E-4	DESIGN
replicate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997489856280154	WITHOUT_CLASSIFICATION	2.5101437198450774E-4	DESIGN
do not auto-flush while outside a transaction	WITHOUT_CLASSIFICATION	0.9874463672173694	WITHOUT_CLASSIFICATION	0.012553632782630463	DESIGN
this is an internal error of some sort...	WITHOUT_CLASSIFICATION	0.9936525662970149	WITHOUT_CLASSIFICATION	0.006347433702985017	DESIGN
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9853753628251065	WITHOUT_CLASSIFICATION	0.014624637174893445	DESIGN
only collections belonging to deleted entities are allowed to be dereferenced in the case of orphan delete	WITHOUT_CLASSIFICATION	0.9999983334364511	WITHOUT_CLASSIFICATION	1.6665635489628596E-6	DESIGN
if it was previously unreferenced, we need to flush in order to get its state into the database in order to execute query	WITHOUT_CLASSIFICATION	0.9974761426504388	WITHOUT_CLASSIFICATION	0.002523857349561215	DESIGN
not for internal use:	WITHOUT_CLASSIFICATION	0.9962347204617261	WITHOUT_CLASSIFICATION	0.0037652795382737215	DESIGN
otherwise, we only need to flush if there are in-memory changes to the queried tables	WITHOUT_CLASSIFICATION	0.9970555701874498	WITHOUT_CLASSIFICATION	0.0029444298125502334	DESIGN
might need to run a different filter entirely after the flush because the collection role may have changed	WITHOUT_CLASSIFICATION	0.960341517950407	WITHOUT_CLASSIFICATION	0.039658482049592936	DESIGN
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9853753628251065	WITHOUT_CLASSIFICATION	0.014624637174893445	DESIGN
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9853753628251065	WITHOUT_CLASSIFICATION	0.014624637174893445	DESIGN
if it is initialized, see if the underlying instance is contained, since we need to account for the fact that it might have been evicted	WITHOUT_CLASSIFICATION	0.9991133302300661	WITHOUT_CLASSIFICATION	8.866697699339631E-4	DESIGN
basically just an adapted copy of find(CriteriaImpl)	WITHOUT_CLASSIFICATION	0.9991638961132089	WITHOUT_CLASSIFICATION	8.361038867911755E-4	DESIGN
it is possible for this method to be called during flush processing, so make certain that we do not accidently initialize an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9938593039914981	WITHOUT_CLASSIFICATION	0.006140696008501927	DESIGN
nothing to do in a stateful session	WITHOUT_CLASSIFICATION	0.9969054764707539	WITHOUT_CLASSIFICATION	0.003094523529246041	DESIGN
ignore	WITHOUT_CLASSIFICATION	0.9998594496367232	WITHOUT_CLASSIFICATION	1.4055036327665423E-4	DESIGN
ignore this error for now	WITHOUT_CLASSIFICATION	0.9973796044144544	WITHOUT_CLASSIFICATION	0.002620395585545629	DESIGN
we need to writeObject() on this since interceptor is user defined	WITHOUT_CLASSIFICATION	0.9991538534100232	WITHOUT_CLASSIFICATION	8.461465899767903E-4	DESIGN
the old-time stand-by...	WITHOUT_CLASSIFICATION	0.9994618511503582	WITHOUT_CLASSIFICATION	5.381488496418563E-4	DESIGN
parameter bind values...	WITHOUT_CLASSIFICATION	0.9981864444191121	WITHOUT_CLASSIFICATION	0.0018135555808878622	DESIGN
Parameter handling code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9978389878813584	WITHOUT_CLASSIFICATION	0.0021610121186416446	DESIGN
prepend value and type list with null for any positions before the wanted position.	WITHOUT_CLASSIFICATION	0.9999624808220628	WITHOUT_CLASSIFICATION	3.751917793719657E-5	DESIGN
Execution methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993763135100686	WITHOUT_CLASSIFICATION	6.236864899312881E-4	DESIGN
we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.998292172115405	WITHOUT_CLASSIFICATION	0.0017078278845950579	DESIGN
we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.998292172115405	WITHOUT_CLASSIFICATION	0.0017078278845950579	DESIGN
we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.998292172115405	WITHOUT_CLASSIFICATION	0.0017078278845950579	DESIGN
we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.998292172115405	WITHOUT_CLASSIFICATION	0.0017078278845950579	DESIGN
FieldInterceptor impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999610254461945	WITHOUT_CLASSIFICATION	3.897455380550675E-4	DESIGN
subclass accesses ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9973655396377978	WITHOUT_CLASSIFICATION	0.002634460362202182	DESIGN
let's assume that there is only one lazy fetch group, for now!	WITHOUT_CLASSIFICATION	0.9999915272243665	WITHOUT_CLASSIFICATION	8.472775633574722E-6	DESIGN
FieldHandler impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999610254461945	WITHOUT_CLASSIFICATION	3.897455380550675E-4	DESIGN
should not need to grow beyond the size of the total number of columns in the rs	WITHOUT_CLASSIFICATION	0.917975229382238	WITHOUT_CLASSIFICATION	0.08202477061776209	DESIGN
should probably no-op commit/rollback here, at least in JTA scenarios	WITHOUT_CLASSIFICATION	0.9435967477440836	WITHOUT_CLASSIFICATION	0.05640325225591638	DESIGN
Base Expectation impls ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999658460230456	WITHOUT_CLASSIFICATION	3.415397695440306E-4	DESIGN
Various Expectation instances ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996052945953798	WITHOUT_CLASSIFICATION	3.9470540462012595E-4	DESIGN
explicitly perform no checking...	WITHOUT_CLASSIFICATION	0.6068731264437686	WITHOUT_CLASSIFICATION	0.3931268735562315	DESIGN
used from testsuite	WITHOUT_CLASSIFICATION	0.9453656589373427	WITHOUT_CLASSIFICATION	0.054634341062657375	DESIGN
assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9989078313410422	WITHOUT_CLASSIFICATION	0.0010921686589577834	DESIGN
package	WITHOUT_CLASSIFICATION	0.9984867178818834	WITHOUT_CLASSIFICATION	0.0015132821181166305	DESIGN
register synch; stats.connect()	WITHOUT_CLASSIFICATION	0.9996608999732253	WITHOUT_CLASSIFICATION	3.391000267746342E-4	DESIGN
noncritical, swallow and let the other propagate!	WITHOUT_CLASSIFICATION	0.9986002374173452	WITHOUT_CLASSIFICATION	0.0013997625826548514	DESIGN
calls executeBatch()	WITHOUT_CLASSIFICATION	0.9989224883587142	WITHOUT_CLASSIFICATION	0.0010775116412857569	DESIGN
no big deal	WITHOUT_CLASSIFICATION	0.9998970708496273	WITHOUT_CLASSIFICATION	1.0292915037274688E-4	DESIGN
no big deal	WITHOUT_CLASSIFICATION	0.9998970708496273	WITHOUT_CLASSIFICATION	1.0292915037274688E-4	DESIGN
no big deal	WITHOUT_CLASSIFICATION	0.9998970708496273	WITHOUT_CLASSIFICATION	1.0292915037274688E-4	DESIGN
sybase driver (jConnect) throwing NPE here in certain cases, but we'll just handle the general "unexpected" case	WITHOUT_CLASSIFICATION	0.993445847036084	WITHOUT_CLASSIFICATION	0.0065541529639160925	DESIGN
see explanation above...	WITHOUT_CLASSIFICATION	0.9996195040526424	WITHOUT_CLASSIFICATION	3.80495947357557E-4	DESIGN
If we are in the process of releasing, no sense checking for aggressive-release possibility.	WITHOUT_CLASSIFICATION	0.9736936895071349	WITHOUT_CLASSIFICATION	0.026306310492865165	DESIGN
EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9995868833392739	WITHOUT_CLASSIFICATION	4.131166607260134E-4	DESIGN
ResultSet impl ("overridden") ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996140978549226	WITHOUT_CLASSIFICATION	3.859021450773434E-4	DESIGN
ResultSet impl (delegated) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996140978549226	WITHOUT_CLASSIFICATION	3.859021450773434E-4	DESIGN
refer to comment in StatefulPersistenceContext.addCollection()	WITHOUT_CLASSIFICATION	0.9999693802056184	WITHOUT_CLASSIFICATION	3.061979438158198E-5	DESIGN
ConnectionManager.Callback implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998350622853547	WITHOUT_CLASSIFICATION	1.6493771464528938E-4	DESIGN
Note : success = false, because we don't know the outcome of the transaction	WITHOUT_CLASSIFICATION	0.9999585332655988	WITHOUT_CLASSIFICATION	4.1466734401157155E-5	DESIGN
we already have a callback registered; either a local (org.hibernate.Transaction) transaction has accepted callback responsibilities, or we have previously registered a transaction synch.	WITHOUT_CLASSIFICATION	0.9998237931167528	WITHOUT_CLASSIFICATION	1.76206883247274E-4	DESIGN
the configured transaction-factory says it only supports local callback mode, so no sense attempting to register a JTA Synchronization	WITHOUT_CLASSIFICATION	0.999488747993735	WITHOUT_CLASSIFICATION	5.112520062649352E-4	DESIGN
transactions marked for rollback-only cause some TM impls to throw exceptions	WITHOUT_CLASSIFICATION	0.9971603942514901	WITHOUT_CLASSIFICATION	0.0028396057485099223	DESIGN
serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995762866080966	WITHOUT_CLASSIFICATION	4.237133919034216E-4	DESIGN
postInitialize() will be called after initialization	WITHOUT_CLASSIFICATION	0.9998715169576791	WITHOUT_CLASSIFICATION	1.2848304232090268E-4	DESIGN
cannot handle single quotes	WITHOUT_CLASSIFICATION	0.9991598906719102	WITHOUT_CLASSIFICATION	8.401093280896885E-4	DESIGN
todo : for 4.0 private static final Logger log = LoggerFactory.getLogger( SQLStatementLogger.class ); this is the legacy logging 'category'...	WITHOUT_CLASSIFICATION	0.9999039592202775	WITHOUT_CLASSIFICATION	9.604077972240369E-5	DESIGN
note that for sequential scrolling, we make the assumption that the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9984046703489362	WITHOUT_CLASSIFICATION	0.0015953296510637241	DESIGN
don't even bother trying to read further	WITHOUT_CLASSIFICATION	0.9978356335407608	WITHOUT_CLASSIFICATION	0.002164366459239306	DESIGN
don't even bother trying to read any further	WITHOUT_CLASSIFICATION	0.9987682861142373	WITHOUT_CLASSIFICATION	0.0012317138857627218	DESIGN
position cursor to the last row	WITHOUT_CLASSIFICATION	0.9999586511353135	WITHOUT_CLASSIFICATION	4.134886468659873E-5	DESIGN
sequentially read the result set in reverse until we recognize a change in the key value. At that point, we are pointed at the last physical sequential row for the logical row in which we are interested in processing	WITHOUT_CLASSIFICATION	0.9999991941927452	WITHOUT_CLASSIFICATION	8.058072548129316E-7	DESIGN
Read backwards until we read past the first physical sequential row with the key we are interested in loading	WITHOUT_CLASSIFICATION	0.999999457020449	WITHOUT_CLASSIFICATION	5.429795509222763E-7	DESIGN
Finally, read ahead one row to position result set cursor at the first physical row we are interested in loading	WITHOUT_CLASSIFICATION	0.9999945660135158	WITHOUT_CLASSIFICATION	5.4339864841243805E-6	DESIGN
now get an existing proxy for each row element (if there is one)	WITHOUT_CLASSIFICATION	0.9999975667128248	WITHOUT_CLASSIFICATION	2.4332871751699366E-6	DESIGN
force the proxy to resolve itself	WITHOUT_CLASSIFICATION	0.9982839692873849	WITHOUT_CLASSIFICATION	0.001716030712615078	DESIGN
this is equivalent to the old behavior...	WITHOUT_CLASSIFICATION	0.9993818437554937	WITHOUT_CLASSIFICATION	6.181562445062893E-4	DESIGN
if null, owner will be retrieved from session	WITHOUT_CLASSIFICATION	0.9998798176691153	WITHOUT_CLASSIFICATION	1.2018233088462804E-4	DESIGN
final String queryString,	WITHOUT_CLASSIFICATION	0.9997282335998587	WITHOUT_CLASSIFICATION	2.717664001412531E-4	DESIGN
if it was a reference to self, don't need to nullify unless we are using native id generation, in which case we definitely need to nullify	WITHOUT_CLASSIFICATION	0.9999121921507571	WITHOUT_CLASSIFICATION	8.780784924292652E-5	DESIGN
end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999430757588085	WITHOUT_CLASSIFICATION	5.692424119157817E-5	DESIGN
in an effort to avoid concurrent-modification-exceptions (from potential recursive calls back through here as a result of the eventual call to PersistentCollection#endRead), we scan the internal loadingCollections map for matches and store those matches in a temp collection. the temp collection is then used to "drive" the #endRead processing.	WITHOUT_CLASSIFICATION	0.9974014448470168	WITHOUT_CLASSIFICATION	0.0025985551529832023	DESIGN
we can reuse it for each row	WITHOUT_CLASSIFICATION	0.9997529120827541	WITHOUT_CLASSIFICATION	2.4708791724587024E-4	DESIGN
can't reuse in this case	WITHOUT_CLASSIFICATION	0.9994652489139206	WITHOUT_CLASSIFICATION	5.347510860793069E-4	DESIGN
First we need to suspend any current JTA transaction and obtain a JDBC connection	WITHOUT_CLASSIFICATION	0.9974667618553147	WITHOUT_CLASSIFICATION	0.002533238144685357	DESIGN
getResultList(results);	WITHOUT_CLASSIFICATION	0.9990109555261806	WITHOUT_CLASSIFICATION	9.890444738194786E-4	DESIGN
if we only returned one entity, query by key is more efficient	WITHOUT_CLASSIFICATION	0.9992632084986159	WITHOUT_CLASSIFICATION	7.36791501384037E-4	DESIGN
a collection loaded in the current session can not possibly be the collection belonging to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9973704268787988	WITHOUT_CLASSIFICATION	0.0026295731212011533	DESIGN
handle empty collection	WITHOUT_CLASSIFICATION	0.9932640183602867	WITHOUT_CLASSIFICATION	0.006735981639713347	DESIGN
else no collection element, but also no owner	WITHOUT_CLASSIFICATION	0.9999766317886017	WITHOUT_CLASSIFICATION	2.3368211398255133E-5	DESIGN
handle empty collections	WITHOUT_CLASSIFICATION	0.9975429534440248	WITHOUT_CLASSIFICATION	0.0024570465559752806	DESIGN
else this is not a collection initializer (and empty collections will be detected by looking for the owner's identifier in the result set)	WITHOUT_CLASSIFICATION	0.9968588811905567	WITHOUT_CLASSIFICATION	0.0031411188094432703	DESIGN
validate() instances of Validatable	WITHOUT_CLASSIFICATION	0.9996920845912175	WITHOUT_CLASSIFICATION	3.0791540878253844E-4	DESIGN
if we know there is exactly 1 row, we can skip. it would be great if we could _always_ skip this; it is a problem for <key-many-to-one>	WITHOUT_CLASSIFICATION	0.6184821529951009	WITHOUT_CLASSIFICATION	0.381517847004899	DESIGN
remove all collections for the entity from the session-level cache	WITHOUT_CLASSIFICATION	0.9940335664884243	WITHOUT_CLASSIFICATION	0.005966433511575726	DESIGN
null version means the object is in the process of being loaded somewhere else in the ResultSet	WITHOUT_CLASSIFICATION	0.999982291870163	WITHOUT_CLASSIFICATION	1.7708129836948326E-5	DESIGN
problematic for <key-many-to-one>!	WITHOUT_CLASSIFICATION	0.994663270342576	WITHOUT_CLASSIFICATION	0.005336729657424103	DESIGN
use the id passed in	WITHOUT_CLASSIFICATION	0.9994843404779705	WITHOUT_CLASSIFICATION	5.156595220294888E-4	DESIGN
do nothing	WITHOUT_CLASSIFICATION	0.9997173369518194	WITHOUT_CLASSIFICATION	2.8266304818069446E-4	DESIGN
prefer re-generation of identity!	WITHOUT_CLASSIFICATION	0.9996276916051329	WITHOUT_CLASSIFICATION	3.723083948670992E-4	DESIGN
no point doing this if NONE was requested	WITHOUT_CLASSIFICATION	0.9999773925964401	WITHOUT_CLASSIFICATION	2.2607403559886594E-5	DESIGN
If the object is already loaded, return the loaded one	WITHOUT_CLASSIFICATION	0.9998831441181257	WITHOUT_CLASSIFICATION	1.1685588187421564E-4	DESIGN
its already loaded so don't need to hydrate it	WITHOUT_CLASSIFICATION	0.9986299361277425	WITHOUT_CLASSIFICATION	0.0013700638722574415	DESIGN
cascade the refresh prior to refreshing this entity	WITHOUT_CLASSIFICATION	0.9987285964018824	WITHOUT_CLASSIFICATION	0.0012714035981175966	DESIGN
the load() which takes an entity does not pass an entityName	WITHOUT_CLASSIFICATION	0.9999672126668128	WITHOUT_CLASSIFICATION	3.278733318723674E-5	DESIGN
we only check the version when _upgrading_ lock modes	WITHOUT_CLASSIFICATION	0.9999723622051473	WITHOUT_CLASSIFICATION	2.763779485275654E-5	DESIGN
look for a proxy	WITHOUT_CLASSIFICATION	0.9998268973117463	WITHOUT_CLASSIFICATION	1.7310268825372258E-4	DESIGN
we need to upgrade the lock mode to the mode requested	WITHOUT_CLASSIFICATION	0.9984800680000343	WITHOUT_CLASSIFICATION	0.00151993199996566	DESIGN
its the given optional object	WITHOUT_CLASSIFICATION	0.9997263566917677	WITHOUT_CLASSIFICATION	2.736433082323455E-4	DESIGN
instantiate a new instance	WITHOUT_CLASSIFICATION	0.9983955871714245	WITHOUT_CLASSIFICATION	0.0016044128285755156	DESIGN
need to hydrate it.	WITHOUT_CLASSIFICATION	0.9985481519550495	WITHOUT_CLASSIFICATION	0.00145184804495047	DESIGN
return a newly loaded object	WITHOUT_CLASSIFICATION	0.9956064146159487	WITHOUT_CLASSIFICATION	0.004393585384051369	DESIGN
will be ignored, using the existing Entry instead	WITHOUT_CLASSIFICATION	0.9991370826741248	WITHOUT_CLASSIFICATION	8.629173258750763E-4	DESIGN
key is an entity involved with the operation performed by the listener; value can be either a copy of the entity or the entity itself	WITHOUT_CLASSIFICATION	0.9999980890220567	WITHOUT_CLASSIFICATION	1.910977943279227E-6	DESIGN
materialize associations (and initialize the object) later	WITHOUT_CLASSIFICATION	0.988605341108063	WITHOUT_CLASSIFICATION	0.011394658891937012	DESIGN
Get the persister for the _subclass_	WITHOUT_CLASSIFICATION	0.9997150581873245	WITHOUT_CLASSIFICATION	2.849418126753992E-4	DESIGN
ok in normal Hibernate usage to delete a detached entity; JPA however forbids it, thus this is a hook for HEM to affect this behavior	WITHOUT_CLASSIFICATION	0.9976072828910468	WITHOUT_CLASSIFICATION	0.0023927171089531602	DESIGN
the entry will be removed after the flush, and will no longer override the stale snapshot This is now handled by removeEntity() in EntityDeleteAction persistenceContext.removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.99490860750907	WITHOUT_CLASSIFICATION	0.005091392490930143	DESIGN
addInitializedCollection(collection, persister, id);	WITHOUT_CLASSIFICATION	0.9994515852581775	WITHOUT_CLASSIFICATION	5.484147418224609E-4	DESIGN
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9995868833392739	WITHOUT_CLASSIFICATION	4.131166607260134E-4	DESIGN
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9995868833392739	WITHOUT_CLASSIFICATION	4.131166607260134E-4	DESIGN
|| oj.getJoinable().consumesCollectionAlias()	WITHOUT_CLASSIFICATION	0.99968894508321	WITHOUT_CLASSIFICATION	3.1105491679000405E-4	DESIGN
here we do not bother with the discriminator.	WITHOUT_CLASSIFICATION	0.9577065952933127	WITHOUT_CLASSIFICATION	0.042293404706687306	DESIGN
Code to handle subclasses of topClass	WITHOUT_CLASSIFICATION	0.9978400447706652	WITHOUT_CLASSIFICATION	0.002159955229334734	DESIGN
woops we got an instance of another class hierarchy branch	WITHOUT_CLASSIFICATION	0.9997396320138168	WITHOUT_CLASSIFICATION	2.6036798618327286E-4	DESIGN
we can go straight to the first required row	WITHOUT_CLASSIFICATION	0.9999107386851809	WITHOUT_CLASSIFICATION	8.92613148191868E-5	DESIGN
we need to step through the rows one row at a time (slow)	WITHOUT_CLASSIFICATION	0.9934189326311882	WITHOUT_CLASSIFICATION	0.006581067368811773	DESIGN
synchronized to avoid multi-thread access issues; defined as method synch to avoid potential deadlock issues due to nature of code.	WITHOUT_CLASSIFICATION	0.9961519305287433	WITHOUT_CLASSIFICATION	0.0038480694712567406	DESIGN
Allows various loaders (ok mainly the QueryLoader :) to check whether scrolling of their result set should be allowed. By default it is allowed.	WITHOUT_CLASSIFICATION	0.9998652336130774	WITHOUT_CLASSIFICATION	1.34766386922655E-4	DESIGN
before adding to collection!	WITHOUT_CLASSIFICATION	0.999165453521394	WITHOUT_CLASSIFICATION	8.345464786059452E-4	DESIGN
if the current depth is 0, the root thing being loaded is the many-to-many collection itself. Here, it is alright to use an inner join...	WITHOUT_CLASSIFICATION	0.9980150821349746	WITHOUT_CLASSIFICATION	0.001984917865025487	DESIGN
operations which cascade as far as the collection also cascade to collection elements	WITHOUT_CLASSIFICATION	0.9999968331739343	WITHOUT_CLASSIFICATION	3.166826065737661E-6	DESIGN
simple, because we can't have a one-to-one or a collection (or even a property-ref) in a composite-element:	WITHOUT_CLASSIFICATION	0.9993113143520244	WITHOUT_CLASSIFICATION	6.886856479756293E-4	DESIGN
a composite key	WITHOUT_CLASSIFICATION	0.999507966004716	WITHOUT_CLASSIFICATION	4.920339952839458E-4	DESIGN
if no batch, use "foo = ? and bar = ?"	WITHOUT_CLASSIFICATION	0.9995590951069548	WITHOUT_CLASSIFICATION	4.4090489304517914E-4	DESIGN
it must be a collection fetch	WITHOUT_CLASSIFICATION	0.959158079593291	WITHOUT_CLASSIFICATION	0.04084192040670906	DESIGN
needed later for many-to-many/filter application	WITHOUT_CLASSIFICATION	0.9987173333411475	WITHOUT_CLASSIFICATION	0.0012826666588525275	DESIGN
&& etype.isReferenceToPrimaryKey()	WITHOUT_CLASSIFICATION	0.9984678599759721	WITHOUT_CLASSIFICATION	0.0015321400240278621	DESIGN
it might still need to apply a collection ordering based on a many-to-many defined order-by...	WITHOUT_CLASSIFICATION	0.8599612436351434	WITHOUT_CLASSIFICATION	0.14003875636485671	DESIGN
if a composite key, use "( (foo = ? and bar = ?) or (foo = ? and bar = ?) )" for batching TODO: unnecessary for databases with ANSI-style joins	WITHOUT_CLASSIFICATION	0.8269143251816635	DESIGN	0.17308567481833648	WITHOUT_CLASSIFICATION
belong to other persister belong to other persister	WITHOUT_CLASSIFICATION	0.9900264600208162	WITHOUT_CLASSIFICATION	0.00997353997918382	DESIGN
we found it	WITHOUT_CLASSIFICATION	0.9996343740221898	WITHOUT_CLASSIFICATION	3.65625977810227E-4	DESIGN
we can use an inner join for the many-to-many	WITHOUT_CLASSIFICATION	0.9980519038250394	WITHOUT_CLASSIFICATION	0.001948096174960592	DESIGN
disable a join back to this same association	WITHOUT_CLASSIFICATION	0.9984683421321797	WITHOUT_CLASSIFICATION	0.001531657867820207	DESIGN
NOTE: unlike all other Loaders, this one is NOT multithreaded, or cacheable!!	WITHOUT_CLASSIFICATION	0.9892074734785282	WITHOUT_CLASSIFICATION	0.010792526521471713	DESIGN
the user visible aliases, which are unknown to the superclass, these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999381805481978	WITHOUT_CLASSIFICATION	6.181945180219899E-5	DESIGN
root entity comes last	WITHOUT_CLASSIFICATION	0.9993330647722523	WITHOUT_CLASSIFICATION	6.669352277478614E-4	DESIGN
deliberately ignore return value!	WITHOUT_CLASSIFICATION	0.9999231742351764	WITHOUT_CLASSIFICATION	7.682576482359989E-5	DESIGN
alias may be null EARLY EXIT	WITHOUT_CLASSIFICATION	0.9995723560755455	WITHOUT_CLASSIFICATION	4.2764392445446427E-4	DESIGN
if it is a compound path	WITHOUT_CLASSIFICATION	0.9996418291654879	WITHOUT_CLASSIFICATION	3.5817083451215035E-4	DESIGN
otherwise assume the parent is the the criteria that created us	WITHOUT_CLASSIFICATION	0.998546910194047	WITHOUT_CLASSIFICATION	0.001453089805953036	DESIGN
if its the root criteria, we are done	WITHOUT_CLASSIFICATION	0.9999036626742623	WITHOUT_CLASSIFICATION	9.633732573759656E-5	DESIGN
otherwise, recurse	WITHOUT_CLASSIFICATION	0.9995507410833631	WITHOUT_CLASSIFICATION	4.4925891663693065E-4	DESIGN
the criteria instance	WITHOUT_CLASSIFICATION	0.9990525173850541	WITHOUT_CLASSIFICATION	9.474826149459354E-4	DESIGN
the entity name	WITHOUT_CLASSIFICATION	0.9993456775048348	WITHOUT_CLASSIFICATION	6.543224951650428E-4	DESIGN
not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9997861427027637	WITHOUT_CLASSIFICATION	2.138572972363181E-4	DESIGN
not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9997861427027637	WITHOUT_CLASSIFICATION	2.138572972363181E-4	DESIGN
it refers to an alias of a projection	WITHOUT_CLASSIFICATION	0.9999541973457106	WITHOUT_CLASSIFICATION	4.580265428934954E-5	DESIGN
should never happen, i think	WITHOUT_CLASSIFICATION	0.992498458030088	WITHOUT_CLASSIFICATION	0.00750154196991213	DESIGN
Detect discriminator values...	WITHOUT_CLASSIFICATION	0.9990200518190241	WITHOUT_CLASSIFICATION	9.799481809758773E-4	DESIGN
Convert the string value into the proper type.	WITHOUT_CLASSIFICATION	0.997289360079305	WITHOUT_CLASSIFICATION	0.002710639920694994	DESIGN
and the qualifier is not the alias of this criteria -> check to see if we belong to some criteria other than the one that created us	WITHOUT_CLASSIFICATION	0.9998848428157234	WITHOUT_CLASSIFICATION	1.1515718427663864E-4	DESIGN
it does not refer to an alias of a projection, look for a property	WITHOUT_CLASSIFICATION	0.9996969781578503	WITHOUT_CLASSIFICATION	3.030218421497091E-4	DESIGN
Otherwise, this is an ordinary value.	WITHOUT_CLASSIFICATION	0.9997930251204551	WITHOUT_CLASSIFICATION	2.0697487954496907E-4	DESIGN
Currently not cachable if autodiscover types is in effect (e.g. "select ...")	WITHOUT_CLASSIFICATION	0.9996540313638058	WITHOUT_CLASSIFICATION	3.459686361941326E-4	DESIGN
private final String[] sqlAliases; private final String[] sqlAliasSuffixes;	WITHOUT_CLASSIFICATION	0.9995126616035971	WITHOUT_CLASSIFICATION	4.8733839640284287E-4	DESIGN
this is only needed (afaict) for ResultTransformer processing...	WITHOUT_CLASSIFICATION	0.9991375594804538	WITHOUT_CLASSIFICATION	8.624405195462111E-4	DESIGN
determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9998469202141289	WITHOUT_CLASSIFICATION	1.530797858711908E-4	DESIGN
build an array with indices equal to the total number of actual returns in the result Hibernate will return for this query (scalars + non-scalars)	WITHOUT_CLASSIFICATION	0.9999396220926585	WITHOUT_CLASSIFICATION	6.037790734143968E-5	DESIGN
replace {....} with corresponding column aliases	WITHOUT_CLASSIFICATION	0.9997831920211026	WITHOUT_CLASSIFICATION	2.16807978897538E-4	DESIGN
No additional open braces found in the string, append the rest of the string in its entirty and quit this loop	WITHOUT_CLASSIFICATION	0.9999956389352322	WITHOUT_CLASSIFICATION	4.361064767768629E-6	DESIGN
apend everything up until the next encountered open brace	WITHOUT_CLASSIFICATION	0.9998385033360928	WITHOUT_CLASSIFICATION	1.6149666390723847E-4	DESIGN
it is a simple table alias {foo}	WITHOUT_CLASSIFICATION	0.9999878198258854	WITHOUT_CLASSIFICATION	1.2180174114569735E-5	DESIGN
passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9875668708085248	WITHOUT_CLASSIFICATION	0.012433129191475215	DESIGN
passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9875668708085248	WITHOUT_CLASSIFICATION	0.012433129191475215	DESIGN
The current alias is referencing the collection to be eagerly fetched	WITHOUT_CLASSIFICATION	0.9999808043337858	WITHOUT_CLASSIFICATION	1.9195666214210773E-5	DESIGN
it is a property reference {foo.bar}	WITHOUT_CLASSIFICATION	0.9979022618549057	WITHOUT_CLASSIFICATION	0.002097738145094366	DESIGN
Possibly handle :something parameters for the query ?	WITHOUT_CLASSIFICATION	0.9998929105717281	WITHOUT_CLASSIFICATION	1.0708942827190406E-4	DESIGN
Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9995548450742496	WITHOUT_CLASSIFICATION	4.4515492575040327E-4	DESIGN
private final List persisters = new ArrayList();	WITHOUT_CLASSIFICATION	0.9998684894647544	WITHOUT_CLASSIFICATION	1.315105352456231E-4	DESIGN
package	WITHOUT_CLASSIFICATION	0.9984867178818834	WITHOUT_CLASSIFICATION	0.0015132821181166305	DESIGN
NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.99984748820439	WITHOUT_CLASSIFICATION	1.5251179561008482E-4	DESIGN
private final List scalarTypes = new ArrayList(); private final List scalarColumnAliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999686309046614	WITHOUT_CLASSIFICATION	3.13690953387068E-5	DESIGN
Now, process the returns	WITHOUT_CLASSIFICATION	0.9996746380005264	WITHOUT_CLASSIFICATION	3.2536199947367383E-4	DESIGN
private List collectionOwnerAliases = new ArrayList(); private List collectionAliases = new ArrayList(); private List collectionPersisters = new ArrayList(); private List collectionResults = new ArrayList();	WITHOUT_CLASSIFICATION	0.9998838497850576	WITHOUT_CLASSIFICATION	1.1615021494226446E-4	DESIGN
already been processed...	WITHOUT_CLASSIFICATION	0.9987297336234197	WITHOUT_CLASSIFICATION	0.0012702663765803569	DESIGN
already been processed...	WITHOUT_CLASSIFICATION	0.9987297336234197	WITHOUT_CLASSIFICATION	0.0012702663765803569	DESIGN
Make sure the owner alias is known...	WITHOUT_CLASSIFICATION	0.9999858520897669	WITHOUT_CLASSIFICATION	1.4147910233202749E-5	DESIGN
first, break down the returns into maps keyed by alias so that role returns can be more easily resolved to their owners	WITHOUT_CLASSIFICATION	0.9993548369313742	WITHOUT_CLASSIFICATION	6.451630686259597E-4	DESIGN
scalarColumnAliases.add( typeReturn.getColumnAlias() ); scalarTypes.add( typeReturn.getType() );	WITHOUT_CLASSIFICATION	0.9997045391190248	WITHOUT_CLASSIFICATION	2.954608809752574E-4	DESIGN
If this return's alias has not been processed yet, do so b4 further processing of this return	WITHOUT_CLASSIFICATION	0.9999565352167112	WITHOUT_CLASSIFICATION	4.346478328868792E-5	DESIGN
collectionOwnerAliases.add( ownerAlias );	WITHOUT_CLASSIFICATION	0.9997045391190248	WITHOUT_CLASSIFICATION	2.954608809752574E-4	DESIGN
for merging of versioned entities, we consider the version having been changed only when: 1) the two version values are different; AND 2) The target actually represents database state! This second condition is a special case which allows an entity to be merged during the same transaction (though during a seperate operation) in which it was originally persisted/saved	WITHOUT_CLASSIFICATION	0.9999991098432788	WITHOUT_CLASSIFICATION	8.901567211778386E-7	DESIGN
this is the second pass through on a merge op, so here we limit the replacement to associations types (value types were already replaced during the first pass)	WITHOUT_CLASSIFICATION	0.9586571469291001	WITHOUT_CLASSIFICATION	0.04134285307089988	DESIGN
EARLY EXIT	WITHOUT_CLASSIFICATION	0.999627030731016	WITHOUT_CLASSIFICATION	3.7296926898392813E-4	DESIGN
cascade-save to collections AFTER the collection owner was saved	WITHOUT_CLASSIFICATION	0.9997227756492059	WITHOUT_CLASSIFICATION	2.7722435079413746E-4	DESIGN
Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.998552254760858	WITHOUT_CLASSIFICATION	0.0014477452391420918	DESIGN
Use the delegate.	WITHOUT_CLASSIFICATION	0.9996592566352044	WITHOUT_CLASSIFICATION	3.407433647955207E-4	DESIGN
currently only the Hibernate-supplied DbTimestampType is supported here	WITHOUT_CLASSIFICATION	0.9978101279699206	WITHOUT_CLASSIFICATION	0.0021898720300792852	DESIGN
This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9492144270076002	WITHOUT_CLASSIFICATION	0.050785572992399844	DESIGN
make a new one	WITHOUT_CLASSIFICATION	0.9994002635267102	WITHOUT_CLASSIFICATION	5.997364732898379E-4	DESIGN
not so sure this is even valid subtree. but if it was, it'd represent two unrelated table references...	WITHOUT_CLASSIFICATION	0.9986451814496933	WITHOUT_CLASSIFICATION	0.0013548185503066625	DESIGN
(NOT (GT a b) ) => (LE a b)	WITHOUT_CLASSIFICATION	0.9975756873784924	WITHOUT_CLASSIFICATION	0.0024243126215074996	DESIGN
private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9958614805723677	WITHOUT_CLASSIFICATION	0.004138519427632299	DESIGN
include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9995151654379744	WITHOUT_CLASSIFICATION	4.848345620256676E-4	DESIGN
sqlResultTypes = selectClause.getSqlResultTypes();	WITHOUT_CLASSIFICATION	0.9997866385756121	WITHOUT_CLASSIFICATION	2.1336142438781348E-4	DESIGN
by default	WITHOUT_CLASSIFICATION	0.9998812479434704	WITHOUT_CLASSIFICATION	1.1875205652955079E-4	DESIGN
This is now handled earlier in this method.	WITHOUT_CLASSIFICATION	0.9741158526013155	WITHOUT_CLASSIFICATION	0.025884147398684484	DESIGN
-- Loader implementation --	WITHOUT_CLASSIFICATION	0.9997231356036693	WITHOUT_CLASSIFICATION	2.7686439633066624E-4	DESIGN
-- Loader overrides --	WITHOUT_CLASSIFICATION	0.9991613142072467	WITHOUT_CLASSIFICATION	8.386857927531432E-4	DESIGN
(NOT (IS_NULL a b) ) => (IS_NOT_NULL a b)	WITHOUT_CLASSIFICATION	0.9986548832342494	WITHOUT_CLASSIFICATION	0.0013451167657506206	DESIGN
NONE, because its the requested lock mode, not the actual!	WITHOUT_CLASSIFICATION	0.9999633662374434	WITHOUT_CLASSIFICATION	3.66337625564625E-5	DESIGN
meant to handle dynamic instantiation queries...	WITHOUT_CLASSIFICATION	0.99904190524015	WITHOUT_CLASSIFICATION	9.580947598500018E-4	DESIGN
--- Query translator methods ---	WITHOUT_CLASSIFICATION	0.9996398243212521	WITHOUT_CLASSIFICATION	3.601756787478336E-4	DESIGN
-- Implementation private methods --	WITHOUT_CLASSIFICATION	0.9970884205367374	WITHOUT_CLASSIFICATION	0.002911579463262492	DESIGN
deduplicate unique constraints sharing the same columns this is needed by Hibernate Annotations since it creates automagically unique constraints for the user	WITHOUT_CLASSIFICATION	0.9999924939559411	WITHOUT_CLASSIFICATION	7.506044058817879E-6	DESIGN
Try to find out the name of the primary key to create it as identity if the IdentityGenerator is used	WITHOUT_CLASSIFICATION	0.9970473805873107	WITHOUT_CLASSIFICATION	0.0029526194126893585	DESIGN
to support dialects that have their own identity data type	WITHOUT_CLASSIFICATION	0.9994334601018243	WITHOUT_CLASSIFICATION	5.665398981756362E-4	DESIGN
Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999986740177073	WITHOUT_CLASSIFICATION	1.325982292750616E-6	DESIGN
used also for generation of FK names!	WITHOUT_CLASSIFICATION	0.7727548452981424	WITHOUT_CLASSIFICATION	0.22724515470185763	DESIGN
usually useless	WITHOUT_CLASSIFICATION	0.999368078800945	WITHOUT_CLASSIFICATION	6.319211990550914E-4	DESIGN
added this caching as I noticed that getType() is being called multiple times...	WITHOUT_CLASSIFICATION	0.9882780141081556	WITHOUT_CLASSIFICATION	0.011721985891844278	DESIGN
do not add unique constraint on DB not supporting unique and nullable columns	WITHOUT_CLASSIFICATION	0.9977549340146717	WITHOUT_CLASSIFICATION	0.0022450659853282488	DESIGN
for backward compatibility, disable this:	WITHOUT_CLASSIFICATION	0.9999882552182585	WITHOUT_CLASSIFICATION	1.1744781741540562E-5	DESIGN
may be final may be final may be final	WITHOUT_CLASSIFICATION	0.9992240328515509	WITHOUT_CLASSIFICATION	7.759671484490756E-4	DESIGN
may be final	WITHOUT_CLASSIFICATION	0.999415437004506	WITHOUT_CLASSIFICATION	5.845629954939654E-4	DESIGN
may be final	WITHOUT_CLASSIFICATION	0.999415437004506	WITHOUT_CLASSIFICATION	5.845629954939654E-4	DESIGN
Custom SQL	WITHOUT_CLASSIFICATION	0.9996983795824518	WITHOUT_CLASSIFICATION	3.0162041754830886E-4	DESIGN
Primary key constraint	WITHOUT_CLASSIFICATION	0.9943721319485105	WITHOUT_CLASSIFICATION	0.005627868051489471	DESIGN
the root of the incoming property path matched one of the embedded composite identifier properties	WITHOUT_CLASSIFICATION	0.9999449378212985	WITHOUT_CLASSIFICATION	5.506217870159466E-5	DESIGN
ignore it...	WITHOUT_CLASSIFICATION	0.9995054382045752	WITHOUT_CLASSIFICATION	4.94561795424897E-4	DESIGN
flat recursive algorithm	WITHOUT_CLASSIFICATION	0.9936613326528576	WITHOUT_CLASSIFICATION	0.006338667347142318	DESIGN
an identifier mapper => getKey will be included in the getNonDuplicatedPropertyIterator() and checked later, so it needs to be excluded	WITHOUT_CLASSIFICATION	0.9997982247976231	WITHOUT_CLASSIFICATION	2.0177520237685883E-4	DESIGN
if the hibernate-mapping did not specify a schema/catalog, use the defaults specified by properties - but note that if the schema/catalog were specified in hibernate-mapping, or as params, they will already be initialized and will override the values set here (they are in identifierGeneratorProperties)	WITHOUT_CLASSIFICATION	0.9997710962441472	WITHOUT_CLASSIFICATION	2.2890375585286465E-4	DESIGN
pass the entity-name, if not a collection-id	WITHOUT_CLASSIFICATION	0.9997692704518499	WITHOUT_CLASSIFICATION	2.3072954815001523E-4	DESIGN
Custom SQL	WITHOUT_CLASSIFICATION	0.9996983795824518	WITHOUT_CLASSIFICATION	3.0162041754830886E-4	DESIGN
Primary key constraint	WITHOUT_CLASSIFICATION	0.9943721319485105	WITHOUT_CLASSIFICATION	0.005627868051489471	DESIGN
pass the column name (a generated id almost always has a single column)	WITHOUT_CLASSIFICATION	0.9999732636496332	WITHOUT_CLASSIFICATION	2.6736350366780367E-5	DESIGN
needed to satisfy KeyValue	WITHOUT_CLASSIFICATION	0.9993142070478263	WITHOUT_CLASSIFICATION	6.857929521736727E-4	DESIGN
empty means no scoping	WITHOUT_CLASSIFICATION	0.9997889862845409	WITHOUT_CLASSIFICATION	2.11013715458991E-4	DESIGN
index should be last column listed	WITHOUT_CLASSIFICATION	0.9999702035090982	WITHOUT_CLASSIFICATION	2.9796490901777555E-5	DESIGN
if it is a formula index, use the element columns in the PK	WITHOUT_CLASSIFICATION	0.9993264458206566	WITHOUT_CLASSIFICATION	6.735541793435312E-4	DESIGN
don't create a unique key, 'cos some databases don't like a UK on nullable columns	WITHOUT_CLASSIFICATION	0.9987907625494826	WITHOUT_CLASSIFICATION	0.0012092374505174597	DESIGN
ArrayList list = new ArrayList();list.addAll( getKey().getConstraintColumns() );list.addAll( getIndex().getConstraintColumns() );getCollectionTable().createUniqueKey(list);	WITHOUT_CLASSIFICATION	0.9999670483169987	WITHOUT_CLASSIFICATION	3.2951683001305656E-5	DESIGN
}	WITHOUT_CLASSIFICATION	0.9995699171636533	WITHOUT_CLASSIFICATION	4.300828363467246E-4	DESIGN
no foreign key element of for a one-to-many	WITHOUT_CLASSIFICATION	0.9996737556323492	WITHOUT_CLASSIFICATION	3.2624436765091335E-4	DESIGN
TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9574889382815538	DESIGN	0.04251106171844631	WITHOUT_CLASSIFICATION
the case of a foreign key to something other than the pk is handled in createPropertyRefConstraints	WITHOUT_CLASSIFICATION	0.9994370802274646	WITHOUT_CLASSIFICATION	5.62919772535478E-4	DESIGN
TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9574889382815538	DESIGN	0.04251106171844631	WITHOUT_CLASSIFICATION
if the property mapping consists of all formulas, make it non-updateable	WITHOUT_CLASSIFICATION	0.9999603315101179	WITHOUT_CLASSIFICATION	3.9668489882167736E-5	DESIGN
columnUpdateability.length==0 ||	WITHOUT_CLASSIFICATION	0.99968894508321	WITHOUT_CLASSIFICATION	3.1105491679000405E-4	DESIGN
if the property mapping consists of all formulas, make it insertable	WITHOUT_CLASSIFICATION	0.9999603315101179	WITHOUT_CLASSIFICATION	3.9668489882167736E-5	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995681419222306	WITHOUT_CLASSIFICATION	4.3185807776936487E-4	DESIGN
expected type is intrinsic here...	WITHOUT_CLASSIFICATION	0.999644648163085	WITHOUT_CLASSIFICATION	3.553518369150531E-4	DESIGN
}	WITHOUT_CLASSIFICATION	0.9995699171636533	WITHOUT_CLASSIFICATION	4.300828363467246E-4	DESIGN
}	WITHOUT_CLASSIFICATION	0.9995699171636533	WITHOUT_CLASSIFICATION	4.300828363467246E-4	DESIGN
return memberPersister.getPropertyType(propertyName);	WITHOUT_CLASSIFICATION	0.9995306575614306	WITHOUT_CLASSIFICATION	4.6934243856944186E-4	DESIGN
return memberPersister.toColumns(alias, propertyName);	WITHOUT_CLASSIFICATION	0.999531913023465	WITHOUT_CLASSIFICATION	4.680869765350625E-4	DESIGN
return memberPersister.getType();	WITHOUT_CLASSIFICATION	0.9995306575614306	WITHOUT_CLASSIFICATION	4.6934243856944186E-4	DESIGN
&& !indexIsFormula	WITHOUT_CLASSIFICATION	0.9988455702287518	WITHOUT_CLASSIFICATION	0.001154429771248185	DESIGN
return !isOneToMany();	WITHOUT_CLASSIFICATION	0.9991535055147029	WITHOUT_CLASSIFICATION	8.464944852970435E-4	DESIGN
instanceof AssociationType;	WITHOUT_CLASSIFICATION	0.9972020299881705	WITHOUT_CLASSIFICATION	0.0027979700118294726	DESIGN
we need to determine the best way to know that two joinables represent a single many-to-many...	WITHOUT_CLASSIFICATION	0.5870682259253223	WITHOUT_CLASSIFICATION	0.41293177407467774	DESIGN
strip leading ','	WITHOUT_CLASSIFICATION	0.9997626795967185	WITHOUT_CLASSIFICATION	2.3732040328138866E-4	DESIGN
public boolean isSubselectLoadable();	WITHOUT_CLASSIFICATION	0.9995260742593703	WITHOUT_CLASSIFICATION	4.7392574062955203E-4	DESIGN
KEY	WITHOUT_CLASSIFICATION	0.9996823380975031	WITHOUT_CLASSIFICATION	3.176619024970004E-4	DESIGN
columns	WITHOUT_CLASSIFICATION	0.9998145445708909	WITHOUT_CLASSIFICATION	1.8545542910900086E-4	DESIGN
SQL statements	WITHOUT_CLASSIFICATION	0.9998549193221449	WITHOUT_CLASSIFICATION	1.4508067785520663E-4	DESIGN
extra information about the element type	WITHOUT_CLASSIFICATION	0.999669169147342	WITHOUT_CLASSIFICATION	3.3083085265798084E-4	DESIGN
types	WITHOUT_CLASSIFICATION	0.9996432956314567	WITHOUT_CLASSIFICATION	3.5670436854326584E-4	DESIGN
custom sql	WITHOUT_CLASSIFICATION	0.9999824067360152	WITHOUT_CLASSIFICATION	1.7593263984829573E-5	DESIGN
private final String unquotedIdentifierColumnName;	WITHOUT_CLASSIFICATION	0.9993679644429164	WITHOUT_CLASSIFICATION	6.320355570835684E-4	DESIGN
dynamic filters specifically for many-to-many inside the collection	WITHOUT_CLASSIFICATION	0.9996479673090733	WITHOUT_CLASSIFICATION	3.5203269092669125E-4	DESIGN
dynamic filters for the collection	WITHOUT_CLASSIFICATION	0.9995099995293916	WITHOUT_CLASSIFICATION	4.900004706084247E-4	DESIGN
NativeSQL: collect key column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999526395398427	WITHOUT_CLASSIFICATION	4.736046015739507E-5	DESIGN
unquotedKeyColumnNames = StringHelper.unQuote(keyColumnAliases);	WITHOUT_CLASSIFICATION	0.9997866385756121	WITHOUT_CLASSIFICATION	2.1336142438781348E-4	DESIGN
ELEMENT	WITHOUT_CLASSIFICATION	0.999627030731016	WITHOUT_CLASSIFICATION	3.7296926898392813E-4	DESIGN
NativeSQL: collect element column and auto-aliases	WITHOUT_CLASSIFICATION	0.9998857858965029	WITHOUT_CLASSIFICATION	1.1421410349713663E-4	DESIGN
INDEX AND ROW SELECT	WITHOUT_CLASSIFICATION	0.999700683520214	WITHOUT_CLASSIFICATION	2.993164797859293E-4	DESIGN
NativeSQL: collect index column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999915605284759	WITHOUT_CLASSIFICATION	8.439471524059063E-6	DESIGN
unquotedIdentifierColumnName = identifierColumnAlias;	WITHOUT_CLASSIFICATION	0.9997866385756121	WITHOUT_CLASSIFICATION	2.1336142438781348E-4	DESIGN
unquotedIdentifierColumnName = null;	WITHOUT_CLASSIFICATION	0.9992166130318876	WITHOUT_CLASSIFICATION	7.833869681123446E-4	DESIGN
GENERATE THE SQL:	WITHOUT_CLASSIFICATION	0.9996606552072668	WITHOUT_CLASSIFICATION	3.393447927332236E-4	DESIGN
for non-arrays, we don't need to know the element class elementType.returnedClass();	WITHOUT_CLASSIFICATION	0.9860185675810773	WITHOUT_CLASSIFICATION	0.013981432418922789	DESIGN
not all classpersisters implement PropertyMapping!	WITHOUT_CLASSIFICATION	0.9796463779742295	WITHOUT_CLASSIFICATION	0.020353622025770474	DESIGN
Handle any filters applied to this collection	WITHOUT_CLASSIFICATION	0.9889440759240735	WITHOUT_CLASSIFICATION	0.011055924075926524	DESIGN
Handle any filters applied to this collection for many-to-many	WITHOUT_CLASSIFICATION	0.9890366220287204	WITHOUT_CLASSIFICATION	0.010963377971279513	DESIGN
if there is a user-specified loader, return that TODO: filters!?	WITHOUT_CLASSIFICATION	0.711550311572916	WITHOUT_CLASSIFICATION	0.2884496884270839	DESIGN
Take care of any entities that might have been evicted!	WITHOUT_CLASSIFICATION	0.996854172903287	WITHOUT_CLASSIFICATION	0.0031458270967128998	DESIGN
strip leading ','	WITHOUT_CLASSIFICATION	0.9997626795967185	WITHOUT_CLASSIFICATION	2.3732040328138866E-4	DESIGN
Run a subquery loader	WITHOUT_CLASSIFICATION	0.9990390488388134	WITHOUT_CLASSIFICATION	9.609511611865431E-4	DESIGN
needed by arrays	WITHOUT_CLASSIFICATION	0.9997505185997914	WITHOUT_CLASSIFICATION	2.4948140020867937E-4	DESIGN
TODO: something with formulas...	WITHOUT_CLASSIFICATION	0.8466605880740602	DESIGN	0.1533394119259398	WITHOUT_CLASSIFICATION
an assertion	WITHOUT_CLASSIFICATION	0.999648982374317	WITHOUT_CLASSIFICATION	3.510176256830267E-4	DESIGN
Remove all the old entries	WITHOUT_CLASSIFICATION	0.9998143423514483	WITHOUT_CLASSIFICATION	1.8565764855165285E-4	DESIGN
create all the new entries	WITHOUT_CLASSIFICATION	0.9999531245830797	WITHOUT_CLASSIFICATION	4.687541692028646E-5	DESIGN
&& !indexIsFormula	WITHOUT_CLASSIFICATION	0.9988455702287518	WITHOUT_CLASSIFICATION	0.001154429771248185	DESIGN
&& !indexIsFormula	WITHOUT_CLASSIFICATION	0.9988455702287518	WITHOUT_CLASSIFICATION	0.001154429771248185	DESIGN
delete all the deleted entries	WITHOUT_CLASSIFICATION	0.999964504907419	WITHOUT_CLASSIFICATION	3.549509258091857E-5	DESIGN
insert all the new entries	WITHOUT_CLASSIFICATION	0.9999802132218502	WITHOUT_CLASSIFICATION	1.9786778149884636E-5	DESIGN
==elementType ??	WITHOUT_CLASSIFICATION	0.9979583069059841	WITHOUT_CLASSIFICATION	0.002041693094015921	DESIGN
update all the modified entries	WITHOUT_CLASSIFICATION	0.9999939871885005	WITHOUT_CLASSIFICATION	6.012811499472897E-6	DESIGN
identifier collections not supported for 1-to-many	WITHOUT_CLASSIFICATION	0.9985441716637147	WITHOUT_CLASSIFICATION	0.00145582833628534	DESIGN
update removed rows fks to null	WITHOUT_CLASSIFICATION	0.984010997524851	WITHOUT_CLASSIFICATION	0.01598900247514903	DESIGN
will still be issued when it used to be null	WITHOUT_CLASSIFICATION	0.9446040309721095	WITHOUT_CLASSIFICATION	0.055395969027890506	DESIGN
now update all changed or added rows fks	WITHOUT_CLASSIFICATION	0.9999759254939863	WITHOUT_CLASSIFICATION	2.407450601379358E-5	DESIGN
buf.append( selectFragment( lhsAlias, "" ) )ignore suffix for collection columns!	WITHOUT_CLASSIFICATION	0.9947348722061913	WITHOUT_CLASSIFICATION	0.005265127793808759	DESIGN
use suffix for the entity columns	WITHOUT_CLASSIFICATION	0.9995104079508382	WITHOUT_CLASSIFICATION	4.895920491617873E-4	DESIGN
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9989099936575643	WITHOUT_CLASSIFICATION	0.00109000634243579	DESIGN
private final String rootTableName;	WITHOUT_CLASSIFICATION	0.9993679644429164	WITHOUT_CLASSIFICATION	6.320355570835684E-4	DESIGN
INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9995868833392739	WITHOUT_CLASSIFICATION	4.131166607260134E-4	DESIGN
Custom SQL	WITHOUT_CLASSIFICATION	0.9996983795824518	WITHOUT_CLASSIFICATION	3.0162041754830886E-4	DESIGN
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9989099936575643	WITHOUT_CLASSIFICATION	0.00109000634243579	DESIGN
Execute the SQL:	WITHOUT_CLASSIFICATION	0.9997786026405281	WITHOUT_CLASSIFICATION	2.2139735947193523E-4	DESIGN
This could also just be true all the time...	WITHOUT_CLASSIFICATION	0.9829510972902626	WITHOUT_CLASSIFICATION	0.017048902709737385	DESIGN
chop the last union (all)	WITHOUT_CLASSIFICATION	0.9998597646942615	WITHOUT_CLASSIFICATION	1.4023530573856796E-4	DESIGN
TODO: check this....	WITHOUT_CLASSIFICATION	0.7685237621814839	WITHOUT_CLASSIFICATION	0.23147623781851615	DESIGN
INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9995868833392739	WITHOUT_CLASSIFICATION	4.131166607260134E-4	DESIGN
properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9995183699077367	WITHOUT_CLASSIFICATION	4.816300922632081E-4	DESIGN
the closure of all properties in the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999495311394568	WITHOUT_CLASSIFICATION	5.046886054318278E-5	DESIGN
the closure of all columns used by the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.995232038408205	WITHOUT_CLASSIFICATION	0.004767961591795053	DESIGN
subclass discrimination works by assigning particular values to certain combinations of null primary key values in the outer join using an SQL CASE	WITHOUT_CLASSIFICATION	0.9998897468291187	WITHOUT_CLASSIFICATION	1.1025317088129615E-4	DESIGN
MULTITABLES	WITHOUT_CLASSIFICATION	0.9995868833392739	WITHOUT_CLASSIFICATION	4.131166607260134E-4	DESIGN
Custom sql	WITHOUT_CLASSIFICATION	0.9998931174621136	WITHOUT_CLASSIFICATION	1.0688253788646384E-4	DESIGN
subclass closure properties	WITHOUT_CLASSIFICATION	0.9986039510012771	WITHOUT_CLASSIFICATION	0.0013960489987228724	DESIGN
SUBCLASSES	WITHOUT_CLASSIFICATION	0.999627030731016	WITHOUT_CLASSIFICATION	3.7296926898392813E-4	DESIGN
( (Column) model.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9979386372204615	WITHOUT_CLASSIFICATION	0.002061362779538526	DESIGN
( (Column) sc.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9979386372204615	WITHOUT_CLASSIFICATION	0.002061362779538526	DESIGN
don't need subclass tables, because they can't appear in conditions	WITHOUT_CLASSIFICATION	0.9704204043768467	WITHOUT_CLASSIFICATION	0.02957959562315322	DESIGN
special case where we need to force incloude all subclass joins	WITHOUT_CLASSIFICATION	0.9976010383505164	WITHOUT_CLASSIFICATION	0.0023989616494837123	DESIGN
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9989099936575643	WITHOUT_CLASSIFICATION	0.00109000634243579	DESIGN
properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9995183699077367	WITHOUT_CLASSIFICATION	4.816300922632081E-4	DESIGN
the closure of all columns used by the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.995232038408205	WITHOUT_CLASSIFICATION	0.004767961591795053	DESIGN
get em on the second pass!	WITHOUT_CLASSIFICATION	0.9996158945560101	WITHOUT_CLASSIFICATION	3.8410544398992245E-4	DESIGN
now look up the object we are really interested in! (this lets us correctly handle proxies and multi-row or multi-column queries)	WITHOUT_CLASSIFICATION	0.9994705548193583	WITHOUT_CLASSIFICATION	5.294451806416678E-4	DESIGN
discriminator column	WITHOUT_CLASSIFICATION	0.9999021062690797	WITHOUT_CLASSIFICATION	9.789373092024145E-5	DESIGN
INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9995868833392739	WITHOUT_CLASSIFICATION	4.131166607260134E-4	DESIGN
private final Map propertyTableNumbersByName = new HashMap();	WITHOUT_CLASSIFICATION	0.9998352238131232	WITHOUT_CLASSIFICATION	1.6477618687691344E-4	DESIGN
CLASS + TABLE	WITHOUT_CLASSIFICATION	0.9997683318401854	WITHOUT_CLASSIFICATION	2.3166815981462167E-4	DESIGN
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9995868833392739	WITHOUT_CLASSIFICATION	4.131166607260134E-4	DESIGN
PROPERTIES	WITHOUT_CLASSIFICATION	0.9996296621890747	WITHOUT_CLASSIFICATION	3.70337810925392E-4	DESIGN
SUBCLASSES	WITHOUT_CLASSIFICATION	0.999627030731016	WITHOUT_CLASSIFICATION	3.7296926898392813E-4	DESIGN
Execute the SQL:	WITHOUT_CLASSIFICATION	0.9997786026405281	WITHOUT_CLASSIFICATION	2.2139735947193523E-4	DESIGN
JOINS	WITHOUT_CLASSIFICATION	0.999627030731016	WITHOUT_CLASSIFICATION	3.7296926898392813E-4	DESIGN
propertyTableNumbersByName.put( prop.getName(), join );	WITHOUT_CLASSIFICATION	0.9998879285963682	WITHOUT_CLASSIFICATION	1.1207140363175452E-4	DESIGN
Access cached SQL	WITHOUT_CLASSIFICATION	0.9999027457818482	WITHOUT_CLASSIFICATION	9.725421815179135E-5	DESIGN
figure out which tables need to be fetched	WITHOUT_CLASSIFICATION	0.9981574529134861	WITHOUT_CLASSIFICATION	0.0018425470865138054	DESIGN
figure out which columns are needed	WITHOUT_CLASSIFICATION	0.9998260061642074	WITHOUT_CLASSIFICATION	1.739938357925257E-4	DESIGN
figure out which formulas are needed	WITHOUT_CLASSIFICATION	0.9996500770764628	WITHOUT_CLASSIFICATION	3.499229235372377E-4	DESIGN
render the SQL	WITHOUT_CLASSIFICATION	0.9995953953442148	WITHOUT_CLASSIFICATION	4.046046557852184E-4	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995681419222306	WITHOUT_CLASSIFICATION	4.3185807776936487E-4	DESIGN
moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.989962754656624	WITHOUT_CLASSIFICATION	0.010037245343375991	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994515852581775	WITHOUT_CLASSIFICATION	5.484147418224609E-4	DESIGN
The optional SQL string defined in the where attribute	WITHOUT_CLASSIFICATION	0.9999884577447999	WITHOUT_CLASSIFICATION	1.1542255200154102E-5	DESIGN
information about lazy properties of this class	WITHOUT_CLASSIFICATION	0.9989588994956932	WITHOUT_CLASSIFICATION	0.0010411005043068113	DESIGN
information about all properties in class hierarchy	WITHOUT_CLASSIFICATION	0.9998757185902345	WITHOUT_CLASSIFICATION	1.242814097654368E-4	DESIGN
information about all columns/formulas in class hierarchy	WITHOUT_CLASSIFICATION	0.9994302255302238	WITHOUT_CLASSIFICATION	5.697744697762668E-4	DESIGN
dynamic filters attached to the class-level	WITHOUT_CLASSIFICATION	0.9997930085099729	WITHOUT_CLASSIFICATION	2.0699149002707202E-4	DESIGN
SQL strings	WITHOUT_CLASSIFICATION	0.999603131638218	WITHOUT_CLASSIFICATION	3.968683617820015E-4	DESIGN
for objects that came in via update()	WITHOUT_CLASSIFICATION	0.9999816266862427	WITHOUT_CLASSIFICATION	1.8373313757280097E-5	DESIGN
PROPERTIES	WITHOUT_CLASSIFICATION	0.9996296621890747	WITHOUT_CLASSIFICATION	3.70337810925392E-4	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994515852581775	WITHOUT_CLASSIFICATION	5.484147418224609E-4	DESIGN
IDENTIFIER	WITHOUT_CLASSIFICATION	0.999627030731016	WITHOUT_CLASSIFICATION	3.7296926898392813E-4	DESIGN
VERSION	WITHOUT_CLASSIFICATION	0.999627030731016	WITHOUT_CLASSIFICATION	3.7296926898392813E-4	DESIGN
WHERE STRING	WITHOUT_CLASSIFICATION	0.9999054151142039	WITHOUT_CLASSIFICATION	9.458488579607982E-5	DESIGN
SUBCLASS PROPERTY CLOSURE	WITHOUT_CLASSIFICATION	0.9990476041075537	WITHOUT_CLASSIFICATION	9.523958924463962E-4	DESIGN
before add :-)	WITHOUT_CLASSIFICATION	0.9927334442452479	WITHOUT_CLASSIFICATION	0.007266555754752201	DESIGN
Handle any filters applied to the class level	WITHOUT_CLASSIFICATION	0.9987428061338456	WITHOUT_CLASSIFICATION	0.0012571938661544364	DESIGN
only one-to-one is lazy fetched	WITHOUT_CLASSIFICATION	0.9998361480655831	WITHOUT_CLASSIFICATION	1.6385193441696886E-4	DESIGN
note early exit here:	WITHOUT_CLASSIFICATION	0.9998712085856744	WITHOUT_CLASSIFICATION	1.2879141432559337E-4	DESIGN
object have been loaded with setReadOnly(true); HHH-2236	WITHOUT_CLASSIFICATION	0.9994499013370586	WITHOUT_CLASSIFICATION	5.500986629415138E-4	DESIGN
NOTE: this assumes something about how propertySelectFragment is implemented by the subclass!	WITHOUT_CLASSIFICATION	0.9997200641274201	WITHOUT_CLASSIFICATION	2.7993587257997034E-4	DESIGN
strip leading ", "	WITHOUT_CLASSIFICATION	0.9999287068111322	WITHOUT_CLASSIFICATION	7.129318886774669E-5	DESIGN
if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999683034610837	WITHOUT_CLASSIFICATION	3.169653891632596E-5	DESIGN
otherwise return the "hydrated" state (ie. associations are not resolved)	WITHOUT_CLASSIFICATION	0.9964897892181829	WITHOUT_CLASSIFICATION	0.0035102107818171255	DESIGN
null owner ok??	WITHOUT_CLASSIFICATION	0.999939713384432	WITHOUT_CLASSIFICATION	6.028661556798447E-5	DESIGN
null sql means that the only lazy properties are shared PK one-to-one associations which are handled differently in the Type#nullSafeGet code...	WITHOUT_CLASSIFICATION	0.9999921611258585	WITHOUT_CLASSIFICATION	7.838874141475686E-6	DESIGN
Create a new FROM node for the referenced class.	WITHOUT_CLASSIFICATION	0.9999073723140072	WITHOUT_CLASSIFICATION	9.262768599290923E-5	DESIGN
the difficulty here is exactly what do we update in order to force the version to be incremented in the db...	WITHOUT_CLASSIFICATION	0.6780190304390564	DESIGN	0.32198096956094363	WITHOUT_CLASSIFICATION
performance op to avoid the array search	WITHOUT_CLASSIFICATION	0.9986957524473902	WITHOUT_CLASSIFICATION	0.001304247552609837	DESIGN
properly handle property-ref-based associations	WITHOUT_CLASSIFICATION	0.9965754834784049	WITHOUT_CLASSIFICATION	0.0034245165215950526	DESIGN
Enable for HHH-440, which we don't like:	WITHOUT_CLASSIFICATION	0.9996670895472085	WITHOUT_CLASSIFICATION	3.329104527914023E-4	DESIGN
ALIASES	WITHOUT_CLASSIFICATION	0.999627030731016	WITHOUT_CLASSIFICATION	3.7296926898392813E-4	DESIGN
aliases named identifier ( alias.idname )	WITHOUT_CLASSIFICATION	0.9936862456865146	WITHOUT_CLASSIFICATION	0.00631375431348527	DESIGN
aliases for composite-id's	WITHOUT_CLASSIFICATION	0.9993820831986854	WITHOUT_CLASSIFICATION	6.179168013146507E-4	DESIGN
Fetch embedded identifiers propertynames from the "virtual" identifier component	WITHOUT_CLASSIFICATION	0.9997612987889906	WITHOUT_CLASSIFICATION	2.3870121100941046E-4	DESIGN
embedded composite ids ( alias.idname1, alias.idname2 )	WITHOUT_CLASSIFICATION	0.9504787996945211	WITHOUT_CLASSIFICATION	0.049521200305478984	DESIGN
TODO: skip formulas?	WITHOUT_CLASSIFICATION	0.6786889827928733	WITHOUT_CLASSIFICATION	0.32131101720712674	DESIGN
don't need filters for the static loaders	WITHOUT_CLASSIFICATION	0.9948384795601113	WITHOUT_CLASSIFICATION	0.005161520439888721	DESIGN
do two passes, for collection property-ref!	WITHOUT_CLASSIFICATION	0.9959197874698957	WITHOUT_CLASSIFICATION	0.004080212530104258	DESIGN
select the correct row by either pk or rowid	WITHOUT_CLASSIFICATION	0.9999480085271268	WITHOUT_CLASSIFICATION	5.1991472873080236E-5	DESIGN
TODO: eventually, rowIdName[j]	WITHOUT_CLASSIFICATION	0.7076192923949362	DESIGN	0.29238070760506385	WITHOUT_CLASSIFICATION
this is a property of the table, which we are updating	WITHOUT_CLASSIFICATION	0.9867178564741463	WITHOUT_CLASSIFICATION	0.013282143525853645	DESIGN
special shortcut for id properties, skip the join! this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9998637885399714	WITHOUT_CLASSIFICATION	1.3621146002860176E-4	DESIGN
we are using "all" or "dirty" property-based optimistic locking	WITHOUT_CLASSIFICATION	0.9998188091726473	WITHOUT_CLASSIFICATION	1.811908273526314E-4	DESIGN
nothing to do; even if the operand is a parameter, no way we could infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.8818803710724559	WITHOUT_CLASSIFICATION	0.1181196289275441	DESIGN
this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9909833428245175	WITHOUT_CLASSIFICATION	0.00901665717548255	DESIGN
add normal properties	WITHOUT_CLASSIFICATION	0.9998916719169899	WITHOUT_CLASSIFICATION	1.083280830099807E-4	DESIGN
add the discriminator	WITHOUT_CLASSIFICATION	0.9996071862772493	WITHOUT_CLASSIFICATION	3.9281372275060925E-4	DESIGN
more specifically : "? [op] datetime" 1) if the operator is MINUS, the param needs to be of some datetime type 2) if the operator is PLUS, the param needs to be of some numeric type	WITHOUT_CLASSIFICATION	0.9863144358053306	WITHOUT_CLASSIFICATION	0.013685564194669285	DESIGN
add normal properties	WITHOUT_CLASSIFICATION	0.9998916719169899	WITHOUT_CLASSIFICATION	1.083280830099807E-4	DESIGN
this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9909833428245175	WITHOUT_CLASSIFICATION	0.00901665717548255	DESIGN
add the discriminator	WITHOUT_CLASSIFICATION	0.9996071862772493	WITHOUT_CLASSIFICATION	3.9281372275060925E-4	DESIGN
add the primary key	WITHOUT_CLASSIFICATION	0.9999284869684089	WITHOUT_CLASSIFICATION	7.151303159115099E-5	DESIGN
delegate already handles PK columns	WITHOUT_CLASSIFICATION	0.9996561073754655	WITHOUT_CLASSIFICATION	3.438926245344329E-4	DESIGN
we can't batch joined inserts, especially not if it is an identity insert; nor can we batch statements where the expectation is based on an output param	WITHOUT_CLASSIFICATION	0.9997954325541712	WITHOUT_CLASSIFICATION	2.0456744582869306E-4	DESIGN
Render the SQL query	WITHOUT_CLASSIFICATION	0.9998945695511336	WITHOUT_CLASSIFICATION	1.054304488663603E-4	DESIGN
Write the values of fields onto the prepared statement - we MUST use the state at the time the insert was issued (cos of foreign key constraints). Not necessarily the object's current state	WITHOUT_CLASSIFICATION	0.9988869147998376	WITHOUT_CLASSIFICATION	0.00111308520016238	DESIGN
TODO : shouldnt inserts be Expectations.NONE?	WITHOUT_CLASSIFICATION	0.5296091473199017	WITHOUT_CLASSIFICATION	0.4703908526800983	DESIGN
don't bother trying to update, we know there is no row there yet	WITHOUT_CLASSIFICATION	0.9981576886402318	WITHOUT_CLASSIFICATION	0.00184231135976824	DESIGN
if all fields are null, we might need to delete existing row	WITHOUT_CLASSIFICATION	0.9985224570315897	WITHOUT_CLASSIFICATION	0.0014775429684102345	DESIGN
there is probably a row there, so try to update if no rows were updated, we will find out	WITHOUT_CLASSIFICATION	0.9987775842982151	WITHOUT_CLASSIFICATION	0.0012224157017849985	DESIGN
note: updates to joined tables can't be batched...	WITHOUT_CLASSIFICATION	0.99979967384492	WITHOUT_CLASSIFICATION	2.0032615508002653E-4	DESIGN
starting index	WITHOUT_CLASSIFICATION	0.9999391866888713	WITHOUT_CLASSIFICATION	6.081331112885762E-5	DESIGN
Now write the values of fields onto the prepared statement	WITHOUT_CLASSIFICATION	0.9999154073886364	WITHOUT_CLASSIFICATION	8.459261136366125E-5	DESIGN
Write any appropriate versioning conditional parameters	WITHOUT_CLASSIFICATION	0.9997492933673953	WITHOUT_CLASSIFICATION	2.507066326047606E-4	DESIGN
Render the SQL query	WITHOUT_CLASSIFICATION	0.9998945695511336	WITHOUT_CLASSIFICATION	1.054304488663603E-4	DESIGN
Do the key. The key is immutable so we can use the _current_ object state - not necessarily the state at the time the delete was issued	WITHOUT_CLASSIFICATION	0.9989265587092113	WITHOUT_CLASSIFICATION	0.0010734412907887037	DESIGN
We should use the _current_ object state (ie. after any updates that occurred during flush)	WITHOUT_CLASSIFICATION	0.999516673573431	WITHOUT_CLASSIFICATION	4.83326426568982E-4	DESIGN
this property belongs to the table and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9909483595499617	WITHOUT_CLASSIFICATION	0.009051640450038268	DESIGN
note: dirtyFields==null means we had no snapshot, and we couldn't get one using select-before-update oldFields==null just means we had no snapshot to begin with (we might have used select-before-update to get the dirtyFields)	WITHOUT_CLASSIFICATION	0.9778100547280038	WITHOUT_CLASSIFICATION	0.02218994527199615	DESIGN
more specifically : "datetime [op] ?" 1) if the operator is MINUS, we really cannot determine the expected type as either another datetime or numeric would be valid 2) if the operator is PLUS, the param needs to be of some numeric type	WITHOUT_CLASSIFICATION	0.999716463412721	WITHOUT_CLASSIFICATION	2.835365872789245E-4	DESIGN
For the case of dynamic-update="true", we need to generate the UPDATE SQL	WITHOUT_CLASSIFICATION	0.9999465814466428	WITHOUT_CLASSIFICATION	5.341855335722297E-5	DESIGN
don't need to check laziness (dirty checking algorithm handles that)	WITHOUT_CLASSIFICATION	0.6830001385116622	WITHOUT_CLASSIFICATION	0.31699986148833786	DESIGN
For the case of dynamic-update="false", or no snapshot, we use the static SQL	WITHOUT_CLASSIFICATION	0.9999605920438688	WITHOUT_CLASSIFICATION	3.9407956131319955E-5	DESIGN
if not "get", then try "is"	WITHOUT_CLASSIFICATION	0.9990184117598844	WITHOUT_CLASSIFICATION	9.81588240115619E-4	DESIGN
Now update only the tables with dirty properties (and the table with the version number)	WITHOUT_CLASSIFICATION	0.9999940473569371	WITHOUT_CLASSIFICATION	5.9526430628345664E-6	DESIGN
For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.999947242091119	WITHOUT_CLASSIFICATION	5.275790888099684E-5	DESIGN
For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.999947242091119	WITHOUT_CLASSIFICATION	5.275790888099684E-5	DESIGN
For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.99991703512743	WITHOUT_CLASSIFICATION	8.296487256994844E-5	DESIGN
For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.99991703512743	WITHOUT_CLASSIFICATION	8.296487256994844E-5	DESIGN
not supported	WITHOUT_CLASSIFICATION	0.9984736632810881	WITHOUT_CLASSIFICATION	0.001526336718911935	DESIGN
this property belongs to the table and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9909483595499617	WITHOUT_CLASSIFICATION	0.009051640450038268	DESIGN
we need to utilize dynamic delete statements	WITHOUT_CLASSIFICATION	0.9990708345473374	WITHOUT_CLASSIFICATION	9.291654526626616E-4	DESIGN
otherwise, utilize the static delete statements	WITHOUT_CLASSIFICATION	0.9997942035199278	WITHOUT_CLASSIFICATION	2.0579648007214017E-4	DESIGN
just a performance opt!	WITHOUT_CLASSIFICATION	0.9980249175099238	WITHOUT_CLASSIFICATION	0.001975082490076234	DESIGN
just a performance opt!	WITHOUT_CLASSIFICATION	0.9980249175099238	WITHOUT_CLASSIFICATION	0.001975082490076234	DESIGN
all joins join to the pk of the driving table	WITHOUT_CLASSIFICATION	0.9999748163475077	WITHOUT_CLASSIFICATION	2.518365249234673E-5	DESIGN
notice that we skip the first table; it is the driving table!	WITHOUT_CLASSIFICATION	0.9998577012307256	WITHOUT_CLASSIFICATION	1.4229876927450031E-4	DESIGN
we can inner join to superclass tables (the row MUST be there) we can never inner join to subclass tables	WITHOUT_CLASSIFICATION	0.9996379762716927	WITHOUT_CLASSIFICATION	3.6202372830732574E-4	DESIGN
skip the driving table	WITHOUT_CLASSIFICATION	0.999913688825573	WITHOUT_CLASSIFICATION	8.63111744269975E-5	DESIGN
get 'em in the right order (not that it really matters)	WITHOUT_CLASSIFICATION	0.8869983300862053	WITHOUT_CLASSIFICATION	0.11300166991379468	DESIGN
here, we work under the following assumptions: ------------ valid cases -------------------------------------- 1) datetime + {something other than datetime} : always results in a datetime ( db will catch invalid conversions ) 2) datetime - datetime : always results in a DOUBLE 3) datetime - {something other than datetime} : always results in a datetime ( db will catch invalid conversions ) ------------ invalid cases ------------------------------------ 4) datetime + datetime 5) {something other than datetime} - datetime 6) datetime {any type} 7) datetime / {any type} 8) {any type} / datetime doing so allows us to properly handle parameters as either the left or right side here in the majority of cases	WITHOUT_CLASSIFICATION	0.9988078781428698	WITHOUT_CLASSIFICATION	0.0011921218571302272	DESIGN
render the where and from parts	WITHOUT_CLASSIFICATION	0.999229118096284	WITHOUT_CLASSIFICATION	7.708819037159374E-4	DESIGN
we could regerate this inside each called method!	WITHOUT_CLASSIFICATION	0.906079113490776	WITHOUT_CLASSIFICATION	0.09392088650922407	DESIGN
now render the joins	WITHOUT_CLASSIFICATION	0.9997265281091128	WITHOUT_CLASSIFICATION	2.7347189088717123E-4	DESIGN
This will add the new from element to the origin.	WITHOUT_CLASSIFICATION	0.9983836800760312	WITHOUT_CLASSIFICATION	0.0016163199239688185	DESIGN
now render the select clause	WITHOUT_CLASSIFICATION	0.9998442173080242	WITHOUT_CLASSIFICATION	1.5578269197591914E-4	DESIGN
now tie it all together	WITHOUT_CLASSIFICATION	0.9998580662617991	WITHOUT_CLASSIFICATION	1.4193373820088056E-4	DESIGN
insert/update/delete SQL	WITHOUT_CLASSIFICATION	0.9992008318827407	WITHOUT_CLASSIFICATION	7.991681172592398E-4	DESIGN
select SQL	WITHOUT_CLASSIFICATION	0.9998509494054953	WITHOUT_CLASSIFICATION	1.4905059450459648E-4	DESIGN
no need to check laziness, dirty checking handles that	WITHOUT_CLASSIFICATION	0.9758980564552489	WITHOUT_CLASSIFICATION	0.0241019435447511	DESIGN
Fully resolve the map reference, create implicit joins.	WITHOUT_CLASSIFICATION	0.9997637482935824	WITHOUT_CLASSIFICATION	2.3625170641768494E-4	DESIGN
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9910579619327213	WITHOUT_CLASSIFICATION	0.008942038067278637	DESIGN
The basic implementation is to simply use the node's text	WITHOUT_CLASSIFICATION	0.9998565301922874	WITHOUT_CLASSIFICATION	1.4346980771259363E-4	DESIGN
for dialects which are known to not support ANSI-SQL row-value-constructor syntax, we should mutate the tree.	WITHOUT_CLASSIFICATION	0.9886682124436237	WITHOUT_CLASSIFICATION	0.011331787556376358	DESIGN
Due to the complexity in initializing the SelectClause, do not generate one here. If it is not found; simply return null... Also, do not cache since it gets generated well after we are created.	WITHOUT_CLASSIFICATION	0.9849499606290737	WITHOUT_CLASSIFICATION	0.015050039370926251	DESIGN
check the version unsaved-value, if appropriate	WITHOUT_CLASSIFICATION	0.9999528300336152	WITHOUT_CLASSIFICATION	4.716996638475203E-5	DESIGN
let this take precedence if defined, since it works for assigned identifiers	WITHOUT_CLASSIFICATION	0.9977876178678218	WITHOUT_CLASSIFICATION	0.002212382132178221	DESIGN
check the id unsaved-value	WITHOUT_CLASSIFICATION	0.9997173852152892	WITHOUT_CLASSIFICATION	2.8261478471085927E-4	DESIGN
check to see if it is in the second-level cache	WITHOUT_CLASSIFICATION	0.9998697087620354	WITHOUT_CLASSIFICATION	1.3029123796456772E-4	DESIGN
/	WITHOUT_CLASSIFICATION	0.9997890064317186	WITHOUT_CLASSIFICATION	2.109935682814265E-4	DESIGN
For property references generate <tablealias>.<columnname> as <projectionalias>	WITHOUT_CLASSIFICATION	0.9998412433776173	WITHOUT_CLASSIFICATION	1.5875662238265298E-4	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994515852581775	WITHOUT_CLASSIFICATION	5.484147418224609E-4	DESIGN
if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999683034610837	WITHOUT_CLASSIFICATION	3.169653891632596E-5	DESIGN
force immediate execution of the insert	WITHOUT_CLASSIFICATION	0.9998405659492994	WITHOUT_CLASSIFICATION	1.5943405070054556E-4	DESIGN
If this from element is a collection and the path is a collection property (maxIndex, etc.) then generate a sub-query.	WITHOUT_CLASSIFICATION	0.9989714127775	WITHOUT_CLASSIFICATION	0.001028587222500012	DESIGN
entities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9991975587792558	WITHOUT_CLASSIFICATION	8.024412207442424E-4	DESIGN
collections ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995661465815623	WITHOUT_CLASSIFICATION	4.3385341843762157E-4	DESIGN
cannot occur	WITHOUT_CLASSIFICATION	0.9998351163271225	WITHOUT_CLASSIFICATION	1.6488367287762515E-4	DESIGN
cannot occur	WITHOUT_CLASSIFICATION	0.9998351163271225	WITHOUT_CLASSIFICATION	1.6488367287762515E-4	DESIGN
only carry on if the method has no parameters	WITHOUT_CLASSIFICATION	0.9999982920659809	WITHOUT_CLASSIFICATION	1.707934019117823E-6	DESIGN
try "get"	WITHOUT_CLASSIFICATION	0.999849758353995	WITHOUT_CLASSIFICATION	1.5024164600499685E-4	DESIGN
do nothing...	WITHOUT_CLASSIFICATION	0.9994068613730979	WITHOUT_CLASSIFICATION	5.931386269021183E-4	DESIGN
do nothing...	WITHOUT_CLASSIFICATION	0.9994068613730979	WITHOUT_CLASSIFICATION	5.931386269021183E-4	DESIGN
should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9998422946149746	WITHOUT_CLASSIFICATION	1.577053850252509E-4	DESIGN
this page intentionally left blank :)	WITHOUT_CLASSIFICATION	0.9991913853828885	WITHOUT_CLASSIFICATION	8.086146171114176E-4	DESIGN
do not do anything	WITHOUT_CLASSIFICATION	0.9992773635966141	WITHOUT_CLASSIFICATION	7.226364033858269E-4	DESIGN
ignore	WITHOUT_CLASSIFICATION	0.9998594496367232	WITHOUT_CLASSIFICATION	1.4055036327665423E-4	DESIGN
cant instantiate	WITHOUT_CLASSIFICATION	0.9997961082102773	WITHOUT_CLASSIFICATION	2.0389178972277482E-4	DESIGN
if it is a property of an embedded component, invoke on the "identifier"	WITHOUT_CLASSIFICATION	0.9993850754930362	WITHOUT_CLASSIFICATION	6.149245069638754E-4	DESIGN
otherwise:	WITHOUT_CLASSIFICATION	0.999627030731016	WITHOUT_CLASSIFICATION	3.7296926898392813E-4	DESIGN
skip finalize methods	WITHOUT_CLASSIFICATION	0.9994766490723389	WITHOUT_CLASSIFICATION	5.233509276610652E-4	DESIGN
note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9992597703755053	WITHOUT_CLASSIFICATION	7.402296244947104E-4	DESIGN
note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9992597703755053	WITHOUT_CLASSIFICATION	7.402296244947104E-4	DESIGN
HHH-2481 make sure the callback gets cleared, otherwise the instance stays in a static thread local.	WITHOUT_CLASSIFICATION	0.937819606066076	WITHOUT_CLASSIFICATION	0.062180393933924036	DESIGN
while constructor is running	WITHOUT_CLASSIFICATION	0.9986851043532482	WITHOUT_CLASSIFICATION	0.0013148956467518354	DESIGN
while constructor is running	WITHOUT_CLASSIFICATION	0.9986851043532482	WITHOUT_CLASSIFICATION	0.0013148956467518354	DESIGN
note: interface is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9994429884766838	WITHOUT_CLASSIFICATION	5.570115233161677E-4	DESIGN
interfaces arguments	WITHOUT_CLASSIFICATION	0.9996495657581619	WITHOUT_CLASSIFICATION	3.504342418380106E-4	DESIGN
TODO!	WITHOUT_CLASSIFICATION	0.999627030731016	WITHOUT_CLASSIFICATION	3.7296926898392813E-4	DESIGN
Get the caller	WITHOUT_CLASSIFICATION	0.9999448762215465	WITHOUT_CLASSIFICATION	5.5123778453574544E-5	DESIGN
Get the caller principals	WITHOUT_CLASSIFICATION	0.9998679619869316	WITHOUT_CLASSIFICATION	1.320380130683871E-4	DESIGN
private static final Alias DEFAULT_ALIAS = new Alias(10, null);	WITHOUT_CLASSIFICATION	0.9996777575890408	WITHOUT_CLASSIFICATION	3.222424109591472E-4	DESIGN
Needed to bump this up to DotNode, because that is the only thing which currently knows about the property-ref path in the correct format; it is either this, or recurse over the DotNodes constructing the property path just like DotNode does internally	WITHOUT_CLASSIFICATION	0.9748374978754806	WITHOUT_CLASSIFICATION	0.025162502124519426	DESIGN
if the identifier is quoted, remove the quotes	WITHOUT_CLASSIFICATION	0.9993415531285151	WITHOUT_CLASSIFICATION	6.584468714849116E-4	DESIGN
truncate the identifier to the max alias length, less the suffix length	WITHOUT_CLASSIFICATION	0.9999893729187128	WITHOUT_CLASSIFICATION	1.0627081287118506E-5	DESIGN
full joins are not supported.. yet!	WITHOUT_CLASSIFICATION	0.9919486936518481	WITHOUT_CLASSIFICATION	0.008051306348151798	DESIGN
null is not considered the same type as Integer. $NON-NLS-1 $NON-NLS-1	WITHOUT_CLASSIFICATION	0.9997067829040004	WITHOUT_CLASSIFICATION	2.9321709599968007E-4	DESIGN
the outerJoinsAfterWhere needs to come before where clause to properly handle dynamic filters	WITHOUT_CLASSIFICATION	0.9981101011231874	WITHOUT_CLASSIFICATION	0.0018898988768126282	DESIGN
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9996347628953852	WITHOUT_CLASSIFICATION	3.6523710461470804E-4	DESIGN
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9996347628953852	WITHOUT_CLASSIFICATION	3.6523710461470804E-4	DESIGN
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9996347628953852	WITHOUT_CLASSIFICATION	3.6523710461470804E-4	DESIGN
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9996347628953852	WITHOUT_CLASSIFICATION	3.6523710461470804E-4	DESIGN
strip off any leading 'and' token	WITHOUT_CLASSIFICATION	0.9999446622827776	WITHOUT_CLASSIFICATION	5.533771722246132E-5	DESIGN
if the condition is not already there...	WITHOUT_CLASSIFICATION	0.9971133475166585	WITHOUT_CLASSIFICATION	0.002886652483341571	DESIGN
dontSpace.add("'");	WITHOUT_CLASSIFICATION	0.9995868833392739	WITHOUT_CLASSIFICATION	4.131166607260134E-4	DESIGN
for MySQL	WITHOUT_CLASSIFICATION	0.9996863575200222	WITHOUT_CLASSIFICATION	3.136424799777352E-4	DESIGN
HashMap columnsUnique = new HashMap();	WITHOUT_CLASSIFICATION	0.9998760508930306	WITHOUT_CLASSIFICATION	1.239491069694648E-4	DESIGN
null caused some problems	WITHOUT_CLASSIFICATION	0.9993511051766528	WITHOUT_CLASSIFICATION	6.488948233471705E-4	DESIGN
package	WITHOUT_CLASSIFICATION	0.9984867178818834	WITHOUT_CLASSIFICATION	0.0015132821181166305	DESIGN
not sure if this would ever be null but wanted to be careful	WITHOUT_CLASSIFICATION	0.9995500368853547	WITHOUT_CLASSIFICATION	4.4996311464525125E-4	DESIGN
even on inverse="true"	WITHOUT_CLASSIFICATION	0.9981553364880824	WITHOUT_CLASSIFICATION	0.0018446635119176624	DESIGN
package	WITHOUT_CLASSIFICATION	0.9984867178818834	WITHOUT_CLASSIFICATION	0.0015132821181166305	DESIGN
package	WITHOUT_CLASSIFICATION	0.9984867178818834	WITHOUT_CLASSIFICATION	0.0015132821181166305	DESIGN
If true then execute db updates, otherwise just generate and display updates	WITHOUT_CLASSIFICATION	0.9999750527699355	WITHOUT_CLASSIFICATION	2.4947230064444282E-5	DESIGN
we only release the connection	WITHOUT_CLASSIFICATION	0.9975082130815229	WITHOUT_CLASSIFICATION	0.002491786918477127	DESIGN
deprecated option...	WITHOUT_CLASSIFICATION	0.9877886188879843	WITHOUT_CLASSIFICATION	0.012211381112015671	DESIGN
if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9997830697549995	WITHOUT_CLASSIFICATION	2.1693024500043777E-4	DESIGN
actually, this last test is probably unnecessary, since beforeCompletion() doesn't get called during rollback	WITHOUT_CLASSIFICATION	0.9997138132828919	WITHOUT_CLASSIFICATION	2.8618671710815385E-4	DESIGN
this one only really needed for badly-behaved applications! (if the TransactionManager has a Sychronization registered, its a noop) (actually we do need it for downgrading locks)	WITHOUT_CLASSIFICATION	0.9963658215261509	WITHOUT_CLASSIFICATION	0.0036341784738491397	DESIGN
Create an DotNode AST for the path and resolve it.	WITHOUT_CLASSIFICATION	0.999961338843102	WITHOUT_CLASSIFICATION	3.8661156898003746E-5	DESIGN
if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9997830697549995	WITHOUT_CLASSIFICATION	2.1693024500043777E-4	DESIGN
if we could not register a synchronization, do the before/after completion callbacks ourself (but we need to let jdbcContext know that this is what we are going to do, so it doesn't keep trying to register synchronizations)	WITHOUT_CLASSIFICATION	0.9846704359216989	DESIGN	0.015329564078301118	WITHOUT_CLASSIFICATION
swallow it, and continue to roll back JTA transaction	WITHOUT_CLASSIFICATION	0.9951560404206666	WITHOUT_CLASSIFICATION	0.004843959579333366	DESIGN
so the transaction is already rolled back, by JTA spec	WITHOUT_CLASSIFICATION	0.9996816630858334	WITHOUT_CLASSIFICATION	3.1833691416666794E-4	DESIGN
this method is a noop if there is a Synchronization!	WITHOUT_CLASSIFICATION	0.9992153542048963	WITHOUT_CLASSIFICATION	7.846457951036104E-4	DESIGN
two conditions where we need to transform this to a theta-join syntax: 1) 'elem' is the "root from-element" in correlated subqueries 2) The DotNode.useThetaStyleImplicitJoins has been set to true and 'elem' represents an implicit join	WITHOUT_CLASSIFICATION	0.9984176667388193	WITHOUT_CLASSIFICATION	0.001582333261180648	DESIGN
WebSphere, however, is not a sane JEE/JTA container...	WITHOUT_CLASSIFICATION	0.9814882164530397	WITHOUT_CLASSIFICATION	0.01851178354696023	DESIGN
for sane JEE/JTA containers, the transaction itself functions as its identifier...	WITHOUT_CLASSIFICATION	0.9995236554446437	WITHOUT_CLASSIFICATION	4.763445553563144E-4	DESIGN
swallow, the transaction was finished	WITHOUT_CLASSIFICATION	0.9997861580583098	WITHOUT_CLASSIFICATION	2.13841941690211E-4	DESIGN
all AliasToEntityMapResultTransformer are considered equal ~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999754540946791	WITHOUT_CLASSIFICATION	2.4545905320770474E-5	DESIGN
Create the join element under the from element.	WITHOUT_CLASSIFICATION	0.9999280855922167	WITHOUT_CLASSIFICATION	7.191440778332663E-5	DESIGN
all DistinctRootEntityResultTransformer are considered equal ~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999754540946791	WITHOUT_CLASSIFICATION	2.4545905320770474E-5	DESIGN
map of EntityMode -> Tuplizer	WITHOUT_CLASSIFICATION	0.9998849599475806	WITHOUT_CLASSIFICATION	1.1504005241933551E-4	DESIGN
this is a virtual id property...	WITHOUT_CLASSIFICATION	0.9943278450971752	WITHOUT_CLASSIFICATION	0.005672154902824802	DESIGN
this one needed only for guessEntityMode()	WITHOUT_CLASSIFICATION	0.9993234259834916	WITHOUT_CLASSIFICATION	6.765740165084627E-4	DESIGN
create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9996718851030163	WITHOUT_CLASSIFICATION	3.281148969836859E-4	DESIGN
todo : move this to SF per HHH-3517; also see HHH-1907 and ComponentMetamodel	WITHOUT_CLASSIFICATION	0.9199584294587931	WITHOUT_CLASSIFICATION	0.0800415705412068	DESIGN
then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999395814907813	WITHOUT_CLASSIFICATION	6.0418509218667514E-5	DESIGN
Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9998021632120093	WITHOUT_CLASSIFICATION	1.9783678799063822E-4	DESIGN
then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9996459401497012	WITHOUT_CLASSIFICATION	3.540598502987087E-4	DESIGN
Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9998021632120093	WITHOUT_CLASSIFICATION	1.9783678799063822E-4	DESIGN
put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9996885193490287	WITHOUT_CLASSIFICATION	3.114806509713862E-4	DESIGN
found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999610106051133	WITHOUT_CLASSIFICATION	3.8989394886708845E-5	DESIGN
private final SessionFactoryImplementor sessionFactory;	WITHOUT_CLASSIFICATION	0.9993783828925331	WITHOUT_CLASSIFICATION	6.216171074669494E-4	DESIGN
cached for efficiency...	WITHOUT_CLASSIFICATION	0.9996687277792945	WITHOUT_CLASSIFICATION	3.3127222070555417E-4	DESIGN
public ComponentMetamodel(Component component, SessionFactoryImplementor sessionFactory) {	WITHOUT_CLASSIFICATION	0.9984385345057089	WITHOUT_CLASSIFICATION	0.0015614654942911722	DESIGN
this.sessionFactory = sessionFactory;	WITHOUT_CLASSIFICATION	0.9997866385756121	WITHOUT_CLASSIFICATION	2.1336142438781348E-4	DESIGN
it was not embedded, so the argument is just an id	WITHOUT_CLASSIFICATION	0.9998283837664464	WITHOUT_CLASSIFICATION	1.716162335536073E-4	DESIGN
then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999395814907813	WITHOUT_CLASSIFICATION	6.0418509218667514E-5	DESIGN
then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9996459401497012	WITHOUT_CLASSIFICATION	3.540598502987087E-4	DESIGN
put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9996885193490287	WITHOUT_CLASSIFICATION	3.114806509713862E-4	DESIGN
then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9983643553057886	WITHOUT_CLASSIFICATION	0.0016356446942113714	DESIGN
return currentId;	WITHOUT_CLASSIFICATION	0.9996464548055445	WITHOUT_CLASSIFICATION	3.5354519445553336E-4	DESIGN
reset the id	WITHOUT_CLASSIFICATION	0.9997900949197318	WITHOUT_CLASSIFICATION	2.099050802681813E-4	DESIGN
origin.addDestination( destination ); This was the cause of HHH-242 origin.setType( FROM_FRAGMENT ); Set the parent node type so that the AST is properly formed. The destination node will have all the FROM text. The parent node is a collection join too (voodoo - see JoinProcessor)	WITHOUT_CLASSIFICATION	0.9997739430444985	WITHOUT_CLASSIFICATION	2.260569555015434E-4	DESIGN
reset the version	WITHOUT_CLASSIFICATION	0.9999362356464867	WITHOUT_CLASSIFICATION	6.376435351330256E-5	DESIGN
the default is to simply not lazy fetch properties for now...	WITHOUT_CLASSIFICATION	0.9944749992308917	WITHOUT_CLASSIFICATION	0.005525000769108275	DESIGN
Add the second join, the one that ends in the destination table.	WITHOUT_CLASSIFICATION	0.9998968877530257	WITHOUT_CLASSIFICATION	1.0311224697440299E-4	DESIGN
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9910579619327213	WITHOUT_CLASSIFICATION	0.008942038067278637	DESIGN
found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999610106051133	WITHOUT_CLASSIFICATION	3.8989394886708845E-5	DESIGN
determine the id getter and setter methods from the proxy interface (if any) determine all interfaces needed by the resulting proxy	WITHOUT_CLASSIFICATION	0.9999626984464646	WITHOUT_CLASSIFICATION	3.730155353547485E-5	DESIGN
return getFactory().getSettings().getBytecodeProvider().getProxyFactoryFactory().buildProxyFactory();	WITHOUT_CLASSIFICATION	0.9995306575614306	WITHOUT_CLASSIFICATION	4.6934243856944186E-4	DESIGN
not final because proxy factory creation can fail	WITHOUT_CLASSIFICATION	0.9999602457387121	WITHOUT_CLASSIFICATION	3.9754261287917036E-5	DESIGN
superclass entity-name	WITHOUT_CLASSIFICATION	0.9995374309234881	WITHOUT_CLASSIFICATION	4.625690765118172E-4	DESIGN
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9910579619327213	WITHOUT_CLASSIFICATION	0.008942038067278637	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994515852581775	WITHOUT_CLASSIFICATION	5.484147418224609E-4	DESIGN
init the aliases, after initing the constructornode	WITHOUT_CLASSIFICATION	0.999873270653829	WITHOUT_CLASSIFICATION	1.2672934617098837E-4	DESIGN
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9910579619327213	WITHOUT_CLASSIFICATION	0.008942038067278637	DESIGN
legacy behavior (with no abstract attribute specified)	WITHOUT_CLASSIFICATION	0.9995399821603557	WITHOUT_CLASSIFICATION	4.6001783964434945E-4	DESIGN
Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9998679039731991	WITHOUT_CLASSIFICATION	1.3209602680077214E-4	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994515852581775	WITHOUT_CLASSIFICATION	5.484147418224609E-4	DESIGN
note: this affects the return value!	WITHOUT_CLASSIFICATION	0.9992670763203618	WITHOUT_CLASSIFICATION	7.329236796382079E-4	DESIGN
Need to account for allowable '_' within the variant	WITHOUT_CLASSIFICATION	0.999780153649374	WITHOUT_CLASSIFICATION	2.1984635062594033E-4	DESIGN
Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9998494748668455	WITHOUT_CLASSIFICATION	1.5052513315444674E-4	DESIGN
Collection Types:	WITHOUT_CLASSIFICATION	0.999554133343564	WITHOUT_CLASSIFICATION	4.4586665643597475E-4	DESIGN
convenience methods relating to operations across arrays of types...	WITHOUT_CLASSIFICATION	0.9999133337464717	WITHOUT_CLASSIFICATION	8.666625352823966E-5	DESIGN
lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9995723932088986	WITHOUT_CLASSIFICATION	4.276067911015041E-4	DESIGN
Blobs are ignored by merge()	WITHOUT_CLASSIFICATION	0.9997964458321746	WITHOUT_CLASSIFICATION	2.0355416782530058E-4	DESIGN
value is the entity name	WITHOUT_CLASSIFICATION	0.9991334263380129	WITHOUT_CLASSIFICATION	8.66573661987058E-4	DESIGN
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9995868833392739	WITHOUT_CLASSIFICATION	4.131166607260134E-4	DESIGN
generate id select fragment and then property select fragment for each expression, just like generateSelectFragments().	WITHOUT_CLASSIFICATION	0.9984693741770215	WITHOUT_CLASSIFICATION	0.0015306258229783962	DESIGN
TODO!	WITHOUT_CLASSIFICATION	0.999627030731016	WITHOUT_CLASSIFICATION	3.7296926898392813E-4	DESIGN
xml is the entity name	WITHOUT_CLASSIFICATION	0.9955816196487351	WITHOUT_CLASSIFICATION	0.004418380351264798	DESIGN
special case ... this is the leaf of the containment graph, even though not immutable	WITHOUT_CLASSIFICATION	0.9557048789073503	WITHOUT_CLASSIFICATION	0.044295121092649714	DESIGN
tolerates nulls	WITHOUT_CLASSIFICATION	0.9997279322163523	WITHOUT_CLASSIFICATION	2.7206778364779213E-4	DESIGN
sqlResultTypeList,	WITHOUT_CLASSIFICATION	0.9995868833392739	WITHOUT_CLASSIFICATION	4.131166607260134E-4	DESIGN
metaType is assumed to be single-column type	WITHOUT_CLASSIFICATION	0.9982499734828875	WITHOUT_CLASSIFICATION	0.0017500265171124492	DESIGN
Get all the select expressions (that we just generated) and render the select.	WITHOUT_CLASSIFICATION	0.9998882943471559	WITHOUT_CLASSIFICATION	1.1170565284408335E-4	DESIGN
Look through the FromElement's children to find any collections of values that should be fetched...	WITHOUT_CLASSIFICATION	0.9994716968106772	WITHOUT_CLASSIFICATION	5.28303189322766E-4	DESIGN
return AssociationType.FOREIGN_KEY_TO_PARENT; this is better but causes a transient object exception...	WITHOUT_CLASSIFICATION	0.7023204170146955	DESIGN	0.29767958298530456	WITHOUT_CLASSIFICATION
Use the lower case function name. Remember whether we're in a SELECT clause or not.	WITHOUT_CLASSIFICATION	0.9996944658123631	WITHOUT_CLASSIFICATION	3.055341876368949E-4	DESIGN
IDENT might be the name of a class.	WITHOUT_CLASSIFICATION	0.9817273603296182	WITHOUT_CLASSIFICATION	0.018272639670381834	DESIGN
TODO!!!	WITHOUT_CLASSIFICATION	0.999627030731016	WITHOUT_CLASSIFICATION	3.7296926898392813E-4	DESIGN
st.setTimestamp( index, new Timestamp( cal.getTimeInMillis() ), cal ); JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9998711006298506	WITHOUT_CLASSIFICATION	1.2889937014944639E-4	DESIGN
st.setDate( index, new Date( cal.getTimeInMillis() ), cal ); JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9998711006298506	WITHOUT_CLASSIFICATION	1.2889937014944639E-4	DESIGN
both are Timestamps	WITHOUT_CLASSIFICATION	0.9992027998077914	WITHOUT_CLASSIFICATION	7.972001922087012E-4	DESIGN
at least one is a plain old Date	WITHOUT_CLASSIFICATION	0.9990593555846329	WITHOUT_CLASSIFICATION	9.406444153672435E-4	DESIGN
noop	WITHOUT_CLASSIFICATION	0.9998276569125725	WITHOUT_CLASSIFICATION	1.7234308742749063E-4	DESIGN
if the corresponding SQL value is NULL, the reader we got is NULL as well	WITHOUT_CLASSIFICATION	0.9999927437829154	WITHOUT_CLASSIFICATION	7.256217084601217E-6	DESIGN
Fetch Reader content up to the end - and put characters in a StringBuffer	WITHOUT_CLASSIFICATION	0.9991898988407483	WITHOUT_CLASSIFICATION	8.101011592518661E-4	DESIGN
Return StringBuffer content as a large String	WITHOUT_CLASSIFICATION	0.9998564404319307	WITHOUT_CLASSIFICATION	1.4355956806928356E-4	DESIGN
or Types.LONGVARCHAR?	WITHOUT_CLASSIFICATION	0.9995909323579607	WITHOUT_CLASSIFICATION	4.090676420393805E-4	DESIGN
Not called at runtime so doesn't matter if its slow :)	WITHOUT_CLASSIFICATION	0.9960609586951139	WITHOUT_CLASSIFICATION	0.003939041304886104	DESIGN
TODO	WITHOUT_CLASSIFICATION	0.7751561108957411	WITHOUT_CLASSIFICATION	0.22484388910425884	DESIGN
Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9996903435642581	WITHOUT_CLASSIFICATION	3.096564357418174E-4	DESIGN
different nullability rules for pk/fk	WITHOUT_CLASSIFICATION	0.999534952760707	WITHOUT_CLASSIFICATION	4.650472392929672E-4	DESIGN
cache this	WITHOUT_CLASSIFICATION	0.9941800300756246	WITHOUT_CLASSIFICATION	0.0058199699243753475	DESIGN
only really need new array during semiresolve!	WITHOUT_CLASSIFICATION	0.9992139565664144	WITHOUT_CLASSIFICATION	7.860434335855949E-4	DESIGN
Forcefully remove leading ands from where fragments; the grammar will handle adding them	WITHOUT_CLASSIFICATION	0.9995659635119375	WITHOUT_CLASSIFICATION	4.3403648806252833E-4	DESIGN
TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9995868833392739	WITHOUT_CLASSIFICATION	4.131166607260134E-4	DESIGN
Create a new FILTERS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999378543673957	WITHOUT_CLASSIFICATION	6.214563260429154E-5	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994515852581775	WITHOUT_CLASSIFICATION	5.484147418224609E-4	DESIGN
public Object instantiate(Object parent, SessionImplementor session) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9997050487345333	WITHOUT_CLASSIFICATION	2.9495126546684984E-4	DESIGN
nothing to do	WITHOUT_CLASSIFICATION	0.9996094199404136	WITHOUT_CLASSIFICATION	3.905800595863351E-4	DESIGN
nothing to do	WITHOUT_CLASSIFICATION	0.9996094199404136	WITHOUT_CLASSIFICATION	3.905800595863351E-4	DESIGN
VersionType impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Note : simply returns null for seed() and next() as the only known application of binary types for versioning is for use with the TIMESTAMP datatype supported by Sybase and SQL Server, which are completely db-generated values...	WITHOUT_CLASSIFICATION	0.9999948818501798	WITHOUT_CLASSIFICATION	5.118149820229502E-6	DESIGN
lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9995723932088986	WITHOUT_CLASSIFICATION	4.276067911015041E-4	DESIGN
not really necessary, I guess...	WITHOUT_CLASSIFICATION	0.9460997486541193	WITHOUT_CLASSIFICATION	0.053900251345880765	DESIGN
Clobs are ignored by merge() operation	WITHOUT_CLASSIFICATION	0.9999954284317126	WITHOUT_CLASSIFICATION	4.57156828729532E-6	DESIGN
we do not have to worry about queued additions to uninitialized collections, since they can only occur for inverse collections!	WITHOUT_CLASSIFICATION	0.999971111692806	WITHOUT_CLASSIFICATION	2.8888307194055243E-5	DESIGN
collections cannot be compared	WITHOUT_CLASSIFICATION	0.9996617268470789	WITHOUT_CLASSIFICATION	3.382731529210801E-4	DESIGN
remember the uk value	WITHOUT_CLASSIFICATION	0.9998696678925068	WITHOUT_CLASSIFICATION	1.3033210749317916E-4	DESIGN
NOOP	WITHOUT_CLASSIFICATION	0.9998175007830263	WITHOUT_CLASSIFICATION	1.824992169736855E-4	DESIGN
processCollectionProperty(token, q.getCollectionPersister(collectionRole), collectionName);	WITHOUT_CLASSIFICATION	0.9994515852581775	WITHOUT_CLASSIFICATION	5.484147418224609E-4	DESIGN
we must use the "remembered" uk value, since it is not available from the EntityEntry during assembly	WITHOUT_CLASSIFICATION	0.9978899988268222	WITHOUT_CLASSIFICATION	0.0021100011731778633	DESIGN
collections don't dirty an unversioned parent entity	WITHOUT_CLASSIFICATION	0.9928279264439538	WITHOUT_CLASSIFICATION	0.007172073556046198	DESIGN
return false;	WITHOUT_CLASSIFICATION	0.9995876502897125	WITHOUT_CLASSIFICATION	4.123497102874555E-4	DESIGN
This just handles a particular case of component projection, perhaps get rid of it and throw an exception	WITHOUT_CLASSIFICATION	0.9934599936050234	WITHOUT_CLASSIFICATION	0.006540006394976542	DESIGN
NOTE: we avoid joining to the next table if the named property is just the foreign key value	WITHOUT_CLASSIFICATION	0.9999567866189613	WITHOUT_CLASSIFICATION	4.321338103871781E-5	DESIGN
the key is the owning entity itself, so get the ID from the key	WITHOUT_CLASSIFICATION	0.9998314637091181	WITHOUT_CLASSIFICATION	1.685362908818237E-4	DESIGN
if the original is a PersistentCollection, and that original was not flagged as dirty, then reset the target's dirty flag here after the copy operation. </p> One thing to be careful of here is a "bare" original collection in which case we should never ever ever reset the dirty flag on the target because we simply do not know...	WITHOUT_CLASSIFICATION	0.9999760445360927	WITHOUT_CLASSIFICATION	2.3955463907348225E-5	DESIGN
ignore subselect keywords	WITHOUT_CLASSIFICATION	0.9997035427411863	WITHOUT_CLASSIFICATION	2.9645725881370004E-4	DESIGN
copy elements into newly empty target collection	WITHOUT_CLASSIFICATION	0.9998742173723223	WITHOUT_CLASSIFICATION	1.2578262767764498E-4	DESIGN
for a null target, or a target which is the same as the original, we need to put the merged elements in a new collection	WITHOUT_CLASSIFICATION	0.999985775671668	WITHOUT_CLASSIFICATION	1.4224328331959078E-5	DESIGN
by default just use an unanticipated capacity since we don't know how to extract the capacity to use from original here...	WITHOUT_CLASSIFICATION	0.9996830852990523	WITHOUT_CLASSIFICATION	3.169147009477576E-4	DESIGN
get the elements back into the target making sure to handle dirty flag	WITHOUT_CLASSIFICATION	0.9999295809707635	WITHOUT_CLASSIFICATION	7.041902923663945E-5	DESIGN
check if collection is currently being loaded	WITHOUT_CLASSIFICATION	0.9990888865282845	WITHOUT_CLASSIFICATION	9.111134717154124E-4	DESIGN
check if it is already completely loaded, but unowned	WITHOUT_CLASSIFICATION	0.9998702077735278	WITHOUT_CLASSIFICATION	1.2979222647229905E-4	DESIGN
cache the actual id of the object, not the value of the property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.953045034596284	WITHOUT_CLASSIFICATION	0.04695496540371612	DESIGN
TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9995868833392739	WITHOUT_CLASSIFICATION	4.131166607260134E-4	DESIGN
create a new collection wrapper, to be initialized later	WITHOUT_CLASSIFICATION	0.9451494359023331	WITHOUT_CLASSIFICATION	0.05485056409766681	DESIGN
Some JDBC drivers erroneously return an empty array here for a null DB value :/	WITHOUT_CLASSIFICATION	0.9999115788641463	WITHOUT_CLASSIFICATION	8.842113585381931E-5	DESIGN
our column span is the number of columns in the PK	WITHOUT_CLASSIFICATION	0.9999488848385265	WITHOUT_CLASSIFICATION	5.111516147346338E-5	DESIGN
cannot batch fetch by unique key (property-ref associations)	WITHOUT_CLASSIFICATION	0.9998034100509349	WITHOUT_CLASSIFICATION	1.9658994906516527E-4	DESIGN
we already know current is not null...	WITHOUT_CLASSIFICATION	0.9959771642144694	WITHOUT_CLASSIFICATION	0.004022835785530676	DESIGN
the ids are fully resolved, so compare them with isDirty(), not isModified()	WITHOUT_CLASSIFICATION	0.9936705562146535	WITHOUT_CLASSIFICATION	0.006329443785346536	DESIGN
the owner of the association is not the owner of the id	WITHOUT_CLASSIFICATION	0.9996609905835638	WITHOUT_CLASSIFICATION	3.390094164360973E-4	DESIGN
----------------------------------------------------------- Constructors	WITHOUT_CLASSIFICATION	0.9995011028173344	WITHOUT_CLASSIFICATION	4.988971826656532E-4	DESIGN
----------------------------------------------------- Instance Variables	WITHOUT_CLASSIFICATION	0.9999991264181359	WITHOUT_CLASSIFICATION	8.735818639350758E-7	DESIGN
public static JDBCException newJDBCException(String string, SQLException root, String sql) { string = string + " [" + sql + ']'; log.error(string, root); logExceptions(root); return new JDBCException(string, root, sql); } public static JDBCException newJDBCException(String string, SQLException root) { log.error(string, root); logExceptions(root); return new JDBCException(string, root); }	WITHOUT_CLASSIFICATION	0.9999883223663876	WITHOUT_CLASSIFICATION	1.1677633612362893E-5	DESIGN
--------------------------------------------------------- Public Methods	WITHOUT_CLASSIFICATION	0.9989277018727739	WITHOUT_CLASSIFICATION	0.001072298127226089	DESIGN
Compare the two maps for equality	WITHOUT_CLASSIFICATION	0.9987669716579396	WITHOUT_CLASSIFICATION	0.0012330283420604927	DESIGN
Simple tests that require no synchronization	WITHOUT_CLASSIFICATION	0.9995028577762113	WITHOUT_CLASSIFICATION	4.971422237887126E-4	DESIGN
Sybase fail if we don't do that, sigh...	WITHOUT_CLASSIFICATION	0.9994165937683762	WITHOUT_CLASSIFICATION	5.834062316238878E-4	DESIGN
Handles things like: a and b or c a and ( b or c ) not a and not b not ( a and b ) x between y and z (overloaded "and") x in ( a, b, c ) (overloaded brackets) not not a a is not null (overloaded "not") etc...... and expressions like foo = bar (maps to: foo.id = bar.id) foo.Bar = 'foo' (maps to: foo.bar = 'foo') foo.Bar.Baz = 1.0 (maps to: foo.bar = bar.id and bar.baz = 1.0) 1.0 = foo.Bar.Baz (maps to: bar.baz = 1.0 and foo.Bar = bar.id) foo.Bar.Baz = a.B.C (maps to: bar.Baz = b.C and foo.Bar = bar.id and a.B = b.id) foo.Bar.Baz + a.B.C (maps to: bar.Baz + b.C and foo.Bar = bar.id and a.B = b.id) ( foo.Bar.Baz + 1.0 ) < 2.0 (maps to: ( bar.Baz + 1.0 ) < 2.0 and foo.Bar = bar.id)	WITHOUT_CLASSIFICATION	0.9991263214194346	WITHOUT_CLASSIFICATION	8.7367858056543E-4	DESIGN
release the jdk internal caches everytime to ensure this plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9990916833583426	WITHOUT_CLASSIFICATION	9.083166416573986E-4	DESIGN
release the jdk internal caches everytime to ensure this plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9990916833583426	WITHOUT_CLASSIFICATION	9.083166416573986E-4	DESIGN
try to "pretty print" it	WITHOUT_CLASSIFICATION	0.9995165691953273	WITHOUT_CLASSIFICATION	4.834308046728136E-4	DESIGN
otherwise, just dump it	WITHOUT_CLASSIFICATION	0.9996692257941594	WITHOUT_CLASSIFICATION	3.3077420584061635E-4	DESIGN
its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9993521278591935	WITHOUT_CLASSIFICATION	6.478721408066225E-4	DESIGN
its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9993521278591935	WITHOUT_CLASSIFICATION	6.478721408066225E-4	DESIGN
use default behavior	WITHOUT_CLASSIFICATION	0.9989866507933924	WITHOUT_CLASSIFICATION	0.001013349206607497	DESIGN
NOTE: early return	WITHOUT_CLASSIFICATION	0.9999302111429931	WITHOUT_CLASSIFICATION	6.978885700698028E-5	DESIGN
the MRU cache used to keep hard references to the most recently used query plans; note : LRU here is a bit of a misnomer, it indicates that LRU entries are removed, the actual kept entries are the MRU entries	WITHOUT_CLASSIFICATION	0.5723068806634244	DESIGN	0.42769311933657556	WITHOUT_CLASSIFICATION
we want to be able to just use the defaults, if JNDI environment properties are not supplied so don't put null in anywhere	WITHOUT_CLASSIFICATION	0.9998053139611229	WITHOUT_CLASSIFICATION	1.9468603887701647E-4	DESIGN
Clone -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9985371512855983	WITHOUT_CLASSIFICATION	0.0014628487144017304	DESIGN
Serialize -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9995119595901315	WITHOUT_CLASSIFICATION	4.8804040986852884E-4	DESIGN
stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999281043040932	WITHOUT_CLASSIFICATION	7.189569590679832E-5	DESIGN
stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999281043040932	WITHOUT_CLASSIFICATION	7.189569590679832E-5	DESIGN
Deserialize -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9995119595901315	WITHOUT_CLASSIFICATION	4.8804040986852884E-4	DESIGN
static methods only - hide constructor	WITHOUT_CLASSIFICATION	0.9962576517988434	WITHOUT_CLASSIFICATION	0.0037423482011565163	DESIGN
&& !('_'==character)	WITHOUT_CLASSIFICATION	0.9988455702287518	WITHOUT_CLASSIFICATION	0.001154429771248185	DESIGN
returnign null!	WITHOUT_CLASSIFICATION	0.9995909274574233	WITHOUT_CLASSIFICATION	4.090725425767309E-4	DESIGN
returnign null!	WITHOUT_CLASSIFICATION	0.9995909274574233	WITHOUT_CLASSIFICATION	4.090725425767309E-4	DESIGN
includes last '.'	WITHOUT_CLASSIFICATION	0.9999626142156262	WITHOUT_CLASSIFICATION	3.7385784373725024E-5	DESIGN
+1 to include the following '.'	WITHOUT_CLASSIFICATION	0.9998797136602263	WITHOUT_CLASSIFICATION	1.2028633977364407E-4	DESIGN
Impl note: takes advantage of the fact that an escpaed single quote embedded within a quote-block can really be handled as two seperate quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9971686063684463	WITHOUT_CLASSIFICATION	0.0028313936315537713	DESIGN
first time we find match!	WITHOUT_CLASSIFICATION	0.999302784313873	WITHOUT_CLASSIFICATION	6.9721568612701E-4	DESIGN
entityNames may now include slashes for the representations classname may be an inner class	WITHOUT_CLASSIFICATION	0.999427467167225	WITHOUT_CLASSIFICATION	5.725328327749702E-4	DESIGN
wrapped iterators	WITHOUT_CLASSIFICATION	0.9969350979615921	WITHOUT_CLASSIFICATION	0.003064902038407878	DESIGN
index of current iterator in the wrapped iterators array	WITHOUT_CLASSIFICATION	0.9998982386805468	WITHOUT_CLASSIFICATION	1.017613194532635E-4	DESIGN
the current iterator	WITHOUT_CLASSIFICATION	0.9998954685942112	WITHOUT_CLASSIFICATION	1.045314057888435E-4	DESIGN
the last used iterator	WITHOUT_CLASSIFICATION	0.9713273304390827	WITHOUT_CLASSIFICATION	0.02867266956091723	DESIGN
it was a boolean expression	WITHOUT_CLASSIFICATION	0.9998927746818179	WITHOUT_CLASSIFICATION	1.0722531818207978E-4	DESIGN
public static Object[] clone(Class elementClass, Object[] array) {Object[] result = (Object[]) Array.newInstance( elementClass, array.length );System.arraycopy(array, 0, result, 0, array.length);return result;}	WITHOUT_CLASSIFICATION	0.9998578494052532	WITHOUT_CLASSIFICATION	1.42150594746842E-4	DESIGN
call this before any Iterator method to make sure that the current Iterator is not exhausted	WITHOUT_CLASSIFICATION	0.9977694018021289	WITHOUT_CLASSIFICATION	0.0022305981978710506	DESIGN
doable if needed	WITHOUT_CLASSIFICATION	0.9998520667154762	WITHOUT_CLASSIFICATION	1.4793328452369702E-4	DESIGN
set last used iterator here, in case the user calls remove before calling hasNext() or next() (although they shouldn't)	WITHOUT_CLASSIFICATION	0.9849836132441548	WITHOUT_CLASSIFICATION	0.015016386755845112	DESIGN
peek ahead	WITHOUT_CLASSIFICATION	0.9994607437329239	WITHOUT_CLASSIFICATION	5.392562670760966E-4	DESIGN
if we reach the end of the string w/o finding the matching end, that is an exception	WITHOUT_CLASSIFICATION	0.9998324422505207	WITHOUT_CLASSIFICATION	1.6755774947916418E-4	DESIGN
we have a placeholder, spin forward till we find the end	WITHOUT_CLASSIFICATION	0.9995750279933147	WITHOUT_CLASSIFICATION	4.249720066853103E-4	DESIGN
make sure spinning forward did not put us past the end of the buffer...	WITHOUT_CLASSIFICATION	0.9995510858422276	WITHOUT_CLASSIFICATION	4.4891415777242833E-4	DESIGN
First, try to locate this resource through the current context classloader.	WITHOUT_CLASSIFICATION	0.9997116832261226	WITHOUT_CLASSIFICATION	2.8831677387736307E-4	DESIGN
Next, try to locate this resource through this class's classloader	WITHOUT_CLASSIFICATION	0.9972389967283475	WITHOUT_CLASSIFICATION	0.0027610032716525713	DESIGN
Next, try to locate this resource through the system classloader	WITHOUT_CLASSIFICATION	0.9972133302333296	WITHOUT_CLASSIFICATION	0.0027866697666705056	DESIGN
Anywhere else we should look?	WITHOUT_CLASSIFICATION	0.9961605912552085	WITHOUT_CLASSIFICATION	0.0038394087447915694	DESIGN
would need an IdentitySet for this!	WITHOUT_CLASSIFICATION	0.9974879761833524	WITHOUT_CLASSIFICATION	0.0025120238166476327	DESIGN
Arrays.asList doesn't do primitive arrays	WITHOUT_CLASSIFICATION	0.998336878499379	WITHOUT_CLASSIFICATION	0.0016631215006209308	DESIGN
faster?	WITHOUT_CLASSIFICATION	0.999627030731016	WITHOUT_CLASSIFICATION	3.7296926898392813E-4	DESIGN
the name of a class	WITHOUT_CLASSIFICATION	0.9992217798274567	WITHOUT_CLASSIFICATION	7.782201725431369E-4	DESIGN
Its the listener class name	WITHOUT_CLASSIFICATION	0.9986781822721905	WITHOUT_CLASSIFICATION	0.0013218177278095558	DESIGN
allow 9,8,7,6,5,4,3,2,1	WITHOUT_CLASSIFICATION	0.9958035169159213	WITHOUT_CLASSIFICATION	0.004196483084078739	DESIGN
default to element set if no elements() specified	WITHOUT_CLASSIFICATION	0.9998630432645965	WITHOUT_CLASSIFICATION	1.3695673540356905E-4	DESIGN
look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9993130887887324	WITHOUT_CLASSIFICATION	6.86911211267724E-4	DESIGN
in case we were deserialized in a different JVM, look for an instance with the same name (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9483157131610561	WITHOUT_CLASSIFICATION	0.05168428683894388	DESIGN
first, lets determine whether to apply cglib or javassist based instrumentation...	WITHOUT_CLASSIFICATION	0.9998309822016872	WITHOUT_CLASSIFICATION	1.6901779831269575E-4	DESIGN
Make sure we don't override previous set values	WITHOUT_CLASSIFICATION	0.9996450050729109	WITHOUT_CLASSIFICATION	3.549949270891751E-4	DESIGN
entirely optional!!	WITHOUT_CLASSIFICATION	0.9993150648878248	WITHOUT_CLASSIFICATION	6.849351121752074E-4	DESIGN
Its the listener instance (or better be)	WITHOUT_CLASSIFICATION	0.978121084461636	WITHOUT_CLASSIFICATION	0.021878915538363977	DESIGN
context.unbind(boundName);	WITHOUT_CLASSIFICATION	0.9990109555261806	WITHOUT_CLASSIFICATION	9.890444738194786E-4	DESIGN
readResolveObject	WITHOUT_CLASSIFICATION	0.9995868833392739	WITHOUT_CLASSIFICATION	4.131166607260134E-4	DESIGN
cfg.setProperty("hibernate.show_sql", "true");	WITHOUT_CLASSIFICATION	0.9994515852581775	WITHOUT_CLASSIFICATION	5.484147418224609E-4	DESIGN
Defensive, convenience methods	WITHOUT_CLASSIFICATION	0.9995736565254264	WITHOUT_CLASSIFICATION	4.2634347457361216E-4	DESIGN
Create the SessionFactory from hibernate.cfg.xml	WITHOUT_CLASSIFICATION	0.999851337855007	WITHOUT_CLASSIFICATION	1.486621449928913E-4	DESIGN
Make sure you log the exception, as it might be swallowed	WITHOUT_CLASSIFICATION	0.9998363336284064	WITHOUT_CLASSIFICATION	1.6366637159357275E-4	DESIGN
Begin unit of work	WITHOUT_CLASSIFICATION	0.9997410406659576	WITHOUT_CLASSIFICATION	2.589593340423759E-4	DESIGN
Write HTML header	WITHOUT_CLASSIFICATION	0.999276103399819	WITHOUT_CLASSIFICATION	7.238966001810349E-4	DESIGN
Handle actions	WITHOUT_CLASSIFICATION	0.9994545299763308	WITHOUT_CLASSIFICATION	5.454700236692709E-4	DESIGN
Print page	WITHOUT_CLASSIFICATION	0.9997364694544103	WITHOUT_CLASSIFICATION	2.635305455896631E-4	DESIGN
Write HTML footer	WITHOUT_CLASSIFICATION	0.9997280757349436	WITHOUT_CLASSIFICATION	2.7192426505639696E-4	DESIGN
End unit of work	WITHOUT_CLASSIFICATION	0.9995274175865021	WITHOUT_CLASSIFICATION	4.7258241349792935E-4	DESIGN
Start the session to be used for this request	WITHOUT_CLASSIFICATION	0.8064335138391522	WITHOUT_CLASSIFICATION	0.1935664861608479	DESIGN
make the session available to the session factory's "current context"	WITHOUT_CLASSIFICATION	0.9977155207482895	WITHOUT_CLASSIFICATION	0.0022844792517104882	DESIGN
pass control along to the rest of the processing chain	WITHOUT_CLASSIFICATION	0.9999847117694696	WITHOUT_CLASSIFICATION	1.528823053044895E-5	DESIGN
remove session from "current context"	WITHOUT_CLASSIFICATION	0.992791303992168	WITHOUT_CLASSIFICATION	0.0072086960078320056	DESIGN
Eager fetch the collection so we can use it detached	WITHOUT_CLASSIFICATION	0.9953341404579956	WITHOUT_CLASSIFICATION	0.0046658595420043525	DESIGN
If we want to handle it bidirectional and detached, we also need to load this collection with an eager outer-join fetch, this time with Criteria and not HQL:	WITHOUT_CLASSIFICATION	0.9482391536429012	WITHOUT_CLASSIFICATION	0.05176084635709882	DESIGN
Event anEvent = (Event) session .createCriteria(Event.class).setFetchMode("participants", FetchMode.JOIN) .add( Expression.eq("id", eventId) ) .uniqueResult(); Eager fetch the colleciton so we can use it detached	WITHOUT_CLASSIFICATION	0.9793140929078437	WITHOUT_CLASSIFICATION	0.02068590709215634	DESIGN
End of first unit of work	WITHOUT_CLASSIFICATION	0.999395289115105	WITHOUT_CLASSIFICATION	6.047108848950346E-4	DESIGN
or bidirectional safety method, setting both sides: aPerson.addToEvent(anEvent);	WITHOUT_CLASSIFICATION	0.9999218199248794	WITHOUT_CLASSIFICATION	7.818007512067997E-5	DESIGN
Begin second unit of work	WITHOUT_CLASSIFICATION	0.9995850488245608	WITHOUT_CLASSIFICATION	4.1495117543915744E-4	DESIGN
Reattachment of aPerson	WITHOUT_CLASSIFICATION	0.9991662783784798	WITHOUT_CLASSIFICATION	8.337216215201543E-4	DESIGN
The getEmailAddresses() might trigger a lazy load of the collection	WITHOUT_CLASSIFICATION	0.9934405012996356	WITHOUT_CLASSIFICATION	0.006559498700364451	DESIGN
We need our tm, so get it now and avoid doing other work if there is a problem	WITHOUT_CLASSIFICATION	0.9989875229145723	WITHOUT_CLASSIFICATION	0.0010124770854277763	DESIGN
Don't hold the JBC node lock throughout the tx, as that prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999739223425889	WITHOUT_CLASSIFICATION	2.6077657411144072E-5	DESIGN
Don't hold the JBC node lock throughout the tx, as that prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999739223425889	WITHOUT_CLASSIFICATION	2.6077657411144072E-5	DESIGN
JBC put a version in the node when it created as part of some internal operation. We are always newer, but if the JBC version is > 1 something odd has happened	WITHOUT_CLASSIFICATION	0.999992912502696	WITHOUT_CLASSIFICATION	7.087497303958772E-6	DESIGN
swaldman 2006-08-28: define c3p0-style configuration parameters for properties with hibernate-specific overrides to detect and warn about conflicting declarations	WITHOUT_CLASSIFICATION	0.9999942522758696	WITHOUT_CLASSIFICATION	5.747724130434648E-6	DESIGN
Not null if the Isolation level has been specified in the configuration file. Otherwise, it is left to the Driver's default value.	WITHOUT_CLASSIFICATION	0.999972513990884	WITHOUT_CLASSIFICATION	2.7486009115909617E-5	DESIGN
Configured outside of Hibernate (i.e. Servlet container, or Java Bean Container already has Proxool pools running, and this provider is to just borrow one of these	WITHOUT_CLASSIFICATION	0.9943517050981505	WITHOUT_CLASSIFICATION	0.005648294901849476	DESIGN
If you're closing down the ConnectionProvider chances are an is not a real big deal, just warn	WITHOUT_CLASSIFICATION	0.9999612220686602	WITHOUT_CLASSIFICATION	3.87779313397328E-5	DESIGN
(AS is always optional, for consistency with SQL/OQL)	WITHOUT_CLASSIFICATION	0.997779321385528	WITHOUT_CLASSIFICATION	0.0022206786144719506	DESIGN
process the "new" HQL style where aliases are assigned _after_ the class name or path expression ie. using the AS construction	WITHOUT_CLASSIFICATION	0.9999997524739002	WITHOUT_CLASSIFICATION	2.4752609976770374E-7	DESIGN
the loaded owner will be set to null after the collection is removed, so capture its value as the affected owner so it is accessible to both pre- and post- events	WITHOUT_CLASSIFICATION	0.9999984997096407	WITHOUT_CLASSIFICATION	1.5002903593143959E-6	DESIGN
is a primitive type invokespecial	WITHOUT_CLASSIFICATION	0.9981911782726596	WITHOUT_CLASSIFICATION	0.001808821727340403	DESIGN
array of primitive type do nothing	WITHOUT_CLASSIFICATION	0.9995495158568865	WITHOUT_CLASSIFICATION	4.504841431135818E-4	DESIGN
handle a path expression or class name that appears at the start, in the "new" HQL style or an alias that appears at the start in the "old" HQL style	WITHOUT_CLASSIFICATION	0.9999787433935112	WITHOUT_CLASSIFICATION	2.1256606488752802E-5	DESIGN
handle <=, >=, !=, is not, not between, not in	WITHOUT_CLASSIFICATION	0.984469321171689	WITHOUT_CLASSIFICATION	0.015530678828311066	DESIGN
The loop ensures atomicity of the select + update even for no transaction or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999984357177607	WITHOUT_CLASSIFICATION	1.5642822393234993E-6	DESIGN
transfer an explicitly defined entity name handle the lazy attribute	WITHOUT_CLASSIFICATION	0.9988423020023248	WITHOUT_CLASSIFICATION	0.0011576979976751437	DESIGN
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9996501703315998	WITHOUT_CLASSIFICATION	3.4982966840025297E-4	DESIGN
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9996501703315998	WITHOUT_CLASSIFICATION	3.4982966840025297E-4	DESIGN
get meta's from <joined-subclass>	WITHOUT_CLASSIFICATION	0.9992200789651602	WITHOUT_CLASSIFICATION	7.799210348398297E-4	DESIGN
parameters on the property mapping should override parameters in the typedef	WITHOUT_CLASSIFICATION	0.9999346298607761	WITHOUT_CLASSIFICATION	6.537013922397242E-5	DESIGN
fetch="join" overrides default laziness fetch="join" overrides default laziness	WITHOUT_CLASSIFICATION	0.9994468338194283	WITHOUT_CLASSIFICATION	5.5316618057162E-4	DESIGN
NOTE SPECIAL CASE: default to join and non-lazy for the "second join" of the many-to-many	WITHOUT_CLASSIFICATION	0.9999576210375734	WITHOUT_CLASSIFICATION	4.2378962426710945E-5	DESIGN
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999243610365753	WITHOUT_CLASSIFICATION	7.563896342460376E-5	DESIGN
state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994125958052424	WITHOUT_CLASSIFICATION	5.874041947575896E-4	DESIGN
void setComponentTuplizerFactory(ComponentTuplizerFactory componentTuplizerFactory) { this.componentTuplizerFactory = componentTuplizerFactory; }	WITHOUT_CLASSIFICATION	0.9995682080464294	WITHOUT_CLASSIFICATION	4.3179195357065614E-4	DESIGN
element index -> id	WITHOUT_CLASSIFICATION	0.9999764862246329	WITHOUT_CLASSIFICATION	2.3513775367142785E-5	DESIGN
note that it might be better to iterate the snapshot but this is safe, assuming the user implements equals() properly, as required by the Set contract!	WITHOUT_CLASSIFICATION	0.951579399393677	WITHOUT_CLASSIFICATION	0.04842060060632292	DESIGN
collections detect changes made via their public interface and mark themselves as dirty as a performance optimization	WITHOUT_CLASSIFICATION	0.9999698385903912	WITHOUT_CLASSIFICATION	3.0161409608795417E-5	DESIGN
essentially, if the real session is closed allow any method call to pass through since the real session will complain by throwing an appropriate exception; NOTE that allowing close() above has the same basic effect, but we capture that there simply to perform the unbind...	WITHOUT_CLASSIFICATION	0.9999924050970653	WITHOUT_CLASSIFICATION	7.594902934590289E-6	DESIGN
The default SQLExceptionConverter for all dialects is based on SQLState since SQLErrorCode is extremely vendor-specific. Specific Dialects may override to return whatever is most appropriate for that vendor.	WITHOUT_CLASSIFICATION	0.9999495809623444	WITHOUT_CLASSIFICATION	5.0419037655582116E-5	DESIGN
only necessary for postgre < 7.4 http:anoncvs.postgresql.org/cvsweb.cgi/pgsql/doc/src/sgml/ref/create_sequence.sgml	WITHOUT_CLASSIFICATION	0.9994044954840198	WITHOUT_CLASSIFICATION	5.955045159801628E-4	DESIGN
select topic, syntax from information_schema.help where section like 'Function%' order by section, topic see also -> http:www.h2database.com/html/functions.html	WITHOUT_CLASSIFICATION	0.9999859182487775	WITHOUT_CLASSIFICATION	1.4081751222424608E-5	DESIGN
registerColumnType(Types.VARBINARY, "CHARACTER($l)"); registerColumnType(Types.BLOB, "CHARACTER($l)" ); For use prior to CP 11.0 registerColumnType(Types.CLOB, "CHARACTER($l)" );	WITHOUT_CLASSIFICATION	0.999776196555369	WITHOUT_CLASSIFICATION	2.238034446310124E-4	DESIGN
the BLOB type requires a size arguement - this defaults to bytes - no arg defaults to 1 whole byte! other argument mods include K - kilobyte, M - megabyte, G - gigabyte. refer to the PBdevelopers guide for more info.	WITHOUT_CLASSIFICATION	0.96569211334181	WITHOUT_CLASSIFICATION	0.03430788665818993	DESIGN
We must return a valid RDMS/RSA command from this method to prevent RDMS/RSA from issuing ERROR 400	WITHOUT_CLASSIFICATION	0.9972022951665701	WITHOUT_CLASSIFICATION	0.0027977048334297864	DESIGN
Oracle driver reports to support getGeneratedKeys(), but they only support the version taking an array of the names of the columns to be returned (via its RETURNING clause). No other driver seems to support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999746135973931	WITHOUT_CLASSIFICATION	2.538640260682082E-5	DESIGN
add the comment nest the main query in an outer select add the rownnumber bit into the outer query select list	WITHOUT_CLASSIFICATION	0.999990892809097	WITHOUT_CLASSIFICATION	9.107190902977614E-6	DESIGN
You may still have other ResultSets or update counts left to process here but you can't do it now or the ResultSet you just got will be closed	WITHOUT_CLASSIFICATION	0.9999990268199275	WITHOUT_CLASSIFICATION	9.731800724921797E-7	DESIGN
Note: For object <-> SQL datatype mappings see: Configuration Manager | Advanced | SQL | System DDL Datatype Mappings TBDregisterColumnType(Types.BINARY, "binary($1)"); changed 08-11-2005, jsl	WITHOUT_CLASSIFICATION	0.9999008113337653	WITHOUT_CLASSIFICATION	9.918866623474962E-5	DESIGN
TRIM(end_keyword string-expression-1 FROM string-expression-2) use Hibernate implementation "From" is one of the parameters they pass in position ?3 registerFunction( "trim", new SQLFunctionTemplate(Hibernate.STRING, "trim(?1 ?2 from ?3)") );	WITHOUT_CLASSIFICATION	0.9999916067342148	WITHOUT_CLASSIFICATION	8.393265785082139E-6	DESIGN
Whether this dialect has an Identity clause added to the data type or a completely seperate identity data type	WITHOUT_CLASSIFICATION	0.9997514239133114	WITHOUT_CLASSIFICATION	2.4857608668866864E-4	DESIGN
According to both the ANSI-SQL and JPA specs, trim takes a variable number of parameters between 1 and 4. at least one paramer (trimSource) is required. From the SQL spec: <trim function> ::= TRIM <left paren> <trim operands> <right paren> <trim operands> ::= [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> <trim specification> ::= LEADING | TRAILING | BOTH If <trim specification> is omitted, BOTH is assumed. If <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.999999944547198	WITHOUT_CLASSIFICATION	5.5452801958546006E-8	DESIGN
/ Prepare persisters and link them up with their cache region/access-strategy	WITHOUT_CLASSIFICATION	0.9995110176791667	WITHOUT_CLASSIFICATION	4.889823208331842E-4	DESIGN
Named Queries:	WITHOUT_CLASSIFICATION	0.9995868833392739	WITHOUT_CLASSIFICATION	4.131166607260134E-4	DESIGN
this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.8716932538756049	DESIGN	0.12830674612439516	WITHOUT_CLASSIFICATION
does not handle arrays (thats ok, cos they can't be lazy) or newly instantiated collections, so we can do the cast	WITHOUT_CLASSIFICATION	0.9874392340933543	WITHOUT_CLASSIFICATION	0.012560765906645678	DESIGN
collection deletions are a special case since update() can add deletions of collections not loaded by the session.	WITHOUT_CLASSIFICATION	0.9999673458941116	WITHOUT_CLASSIFICATION	3.265410588844175E-5	DESIGN
we can do the cast since orphan-delete does not apply to: 1. newly instantiated collections 2. arrays (we can't track orphans for detached arrays)	WITHOUT_CLASSIFICATION	0.9999908162226299	WITHOUT_CLASSIFICATION	9.183777370190155E-6	DESIGN
if the natural-id is marked as non-mutable, it is not retrieved during a normal database-snapshot operation...	WITHOUT_CLASSIFICATION	0.9999360540827267	WITHOUT_CLASSIFICATION	6.394591727326085E-5	DESIGN
watch out for a case where old is still referenced somewhere in the object graph! (which is a user error)	WITHOUT_CLASSIFICATION	0.9999348387262272	WITHOUT_CLASSIFICATION	6.516127377280921E-5	DESIGN
slice, to get the columns for this component property	WITHOUT_CLASSIFICATION	0.9994046215595631	WITHOUT_CLASSIFICATION	5.953784404369557E-4	DESIGN
int result = 17; result = 37 result + type.hashCode(); result = 37 result + ( value==null ? 0 : value.hashCode() ); return result;	WITHOUT_CLASSIFICATION	0.9999849459765403	WITHOUT_CLASSIFICATION	1.5054023459690379E-5	DESIGN
The CollectionEntry.isReached() stuff is just to detect any silly users who set up circular or shared references between/to collections.	WITHOUT_CLASSIFICATION	0.9998853972594104	WITHOUT_CLASSIFICATION	1.1460274058967228E-4	DESIGN
detached collection wrappers that get found + reattached during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9983802961484614	WITHOUT_CLASSIFICATION	0.0016197038515387168	DESIGN
The unique property value represented here may or may not be serializable, so we do an explicit check here in order to generate a better error message	WITHOUT_CLASSIFICATION	0.9653049666173305	WITHOUT_CLASSIFICATION	0.03469503338266957	DESIGN
if the version of a newly instantiated object is not the same as the version seed value, use that as the unsaved-value	WITHOUT_CLASSIFICATION	0.9992871565979141	WITHOUT_CLASSIFICATION	7.128434020858694E-4	DESIGN
ie. we never have to null out a reference to an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999803314234944	WITHOUT_CLASSIFICATION	1.9668576505490792E-5	DESIGN
ignore this row, the collection is in process of being loaded somewhere further "up" the stack	WITHOUT_CLASSIFICATION	0.9999103787734583	WITHOUT_CLASSIFICATION	8.962122654172455E-5	DESIGN
Entity load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ currently, not yet used...	WITHOUT_CLASSIFICATION	0.9900363428753383	WITHOUT_CLASSIFICATION	0.009963657124661757	DESIGN
should be ok performance-wise to generate new delegate instances for each request since these are locally stack-scoped. Besides, it makes the code much easier to read than the old TransactionHelper stuff...	WITHOUT_CLASSIFICATION	0.9994572537506041	WITHOUT_CLASSIFICATION	5.427462493958874E-4	DESIGN
this implementation is supposed to tolerate incorrect unsaved-value mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9927003013108346	WITHOUT_CLASSIFICATION	0.007299698689165309	DESIGN
this implementation is supposed to tolerate incorrect unsaved-value mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9927003013108346	WITHOUT_CLASSIFICATION	0.007299698689165309	DESIGN
wrap up any new collections directly referenced by the object or its components	WITHOUT_CLASSIFICATION	0.9999821832528312	WITHOUT_CLASSIFICATION	1.781674716877565E-5	DESIGN
remove any snapshot, not really for memory management purposes, but rather because it might now be stale, and there is no longer any EntityEntry to take precedence This is now handled by removeEntity() session.getPersistenceContext().removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.8074713241753282	WITHOUT_CLASSIFICATION	0.1925286758246717	DESIGN
skip this check for composite-ids relating to dom4j entity-mode; alternatively, we could add a check to make sure the incoming id value is an instance of Element...	WITHOUT_CLASSIFICATION	0.9777808873396471	WITHOUT_CLASSIFICATION	0.022219112660352962	DESIGN
upgrade the lock if necessary: lock(result, lockMode);	WITHOUT_CLASSIFICATION	0.9998741548545326	WITHOUT_CLASSIFICATION	1.2584514546736122E-4	DESIGN
now, any collections that are initialized inside this block do not get updated - they are ignored until the next flush	WITHOUT_CLASSIFICATION	0.8496869887360292	WITHOUT_CLASSIFICATION	0.1503130112639709	DESIGN
we must clone embedded composite identifiers, or we will get back the same instance that we pass in	WITHOUT_CLASSIFICATION	0.9989669190620429	WITHOUT_CLASSIFICATION	0.0010330809379570734	DESIGN
Sub-insertions should occur before containing insertion so Try to do the callback now	WITHOUT_CLASSIFICATION	0.9985801827602172	WITHOUT_CLASSIFICATION	0.0014198172397828042	DESIGN
the entity is not associated with the session, so try interceptor and unsaved-value	WITHOUT_CLASSIFICATION	0.9997432527658222	WITHOUT_CLASSIFICATION	2.5674723417776733E-4	DESIGN
scan the query string for class names appearing in the from clause and replace with all persistent implementors of the class/interface, returning multiple query strings (make sure we don't pick up a class in the select clause!)	WITHOUT_CLASSIFICATION	0.9987001758811487	WITHOUT_CLASSIFICATION	0.0012998241188513105	DESIGN
save() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997622679745353	WITHOUT_CLASSIFICATION	2.3773202546480715E-4	DESIGN
evict() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997489856280154	WITHOUT_CLASSIFICATION	2.5101437198450774E-4	DESIGN
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9853753628251065	WITHOUT_CLASSIFICATION	0.014624637174893445	DESIGN
if it is an uninitialized proxy, pointing with this session, then when it is accessed, the underlying instance will be "contained"	WITHOUT_CLASSIFICATION	0.999304797690424	WITHOUT_CLASSIFICATION	6.952023095758785E-4	DESIGN
Generate an explicit join for the root dot node. The implied joins will be collected and passed up to the root dot node.	WITHOUT_CLASSIFICATION	0.9999992081410026	WITHOUT_CLASSIFICATION	7.918589973221761E-7	DESIGN
A session is considered to contain an entity only if the entity has an entry in the session's persistence context and the entry reports that the entity has not been removed	WITHOUT_CLASSIFICATION	0.9970233325574971	WITHOUT_CLASSIFICATION	0.0029766674425029155	DESIGN
Does the collection referenced by this FromElement specify an order-by attribute? If so, attach it to the query's order-by	WITHOUT_CLASSIFICATION	0.9820010978405549	WITHOUT_CLASSIFICATION	0.01799890215944505	DESIGN
... and the token could be an identifer and the error is a mismatched token error ...	WITHOUT_CLASSIFICATION	0.951096030290973	WITHOUT_CLASSIFICATION	0.04890396970902704	DESIGN
If a where clause was specified in the update/delete query, use it to limit the returned ids here...	WITHOUT_CLASSIFICATION	0.9999501701904776	WITHOUT_CLASSIFICATION	4.982980952229753E-5	DESIGN
int parameterStart = getWalker().getNumberOfParametersInSetClause(); List allParams = getIdSelectParameterSpecifications(); Iterator whereParams = allParams.subList( parameterStart, allParams.size() ).iterator();	WITHOUT_CLASSIFICATION	0.999978053666856	WITHOUT_CLASSIFICATION	2.1946333143971753E-5	DESIGN
Default implementation: If this node has a data type, and that data type is not an association, then this is scalar.	WITHOUT_CLASSIFICATION	0.9999570396839893	WITHOUT_CLASSIFICATION	4.2960316010619584E-5	DESIGN
Resolve the LHS fully, generate implicit joins. Pass in the property name so that the resolver can discover foreign key (id) properties.	WITHOUT_CLASSIFICATION	0.9998370351122159	WITHOUT_CLASSIFICATION	1.6296488778410844E-4	DESIGN
If the propertyType is null and there isn't a parent, just stop now... there was a problem resolving the node anyway.	WITHOUT_CLASSIFICATION	0.99995001068997	WITHOUT_CLASSIFICATION	4.998931002993047E-5	DESIGN
We do not look for an existing join on the same path, because it makes sense to join twice on the same collection role	WITHOUT_CLASSIFICATION	0.9990235317871887	WITHOUT_CLASSIFICATION	9.764682128112515E-4	DESIGN
our parent is another dot node, meaning we are being further dereferenced. thus we need to generate a join unless the parent refers to the associated entity's PK (because 'our' table would know the FK).	WITHOUT_CLASSIFICATION	0.9999833225365394	WITHOUT_CLASSIFICATION	1.6677463460534944E-5	DESIGN
public final Currency getCurrency(int col) throws HibernateException {return (Currency) get(col);}	WITHOUT_CLASSIFICATION	0.9997269537488218	WITHOUT_CLASSIFICATION	2.7304625117813394E-4	DESIGN
here, we have two possibilities: 1) the property-name matches the explicitly identifier property name 2) the property-name matches the implicit 'id' property name	WITHOUT_CLASSIFICATION	0.9993529174703868	WITHOUT_CLASSIFICATION	6.470825296132737E-4	DESIGN
Set the unresolved path in this node and the parent. Set the text for the parent.	WITHOUT_CLASSIFICATION	0.9999338979164888	WITHOUT_CLASSIFICATION	6.610208351123769E-5	DESIGN
Get the first child to be considered. Sub-classes may do this differently in order to skip nodes that are not select expressions (e.g. DISTINCT).	WITHOUT_CLASSIFICATION	0.9998740540456462	WITHOUT_CLASSIFICATION	1.2594595435388886E-4	DESIGN
If this is an entity and the property is the identifier property, then use getIdentifierType(). Note that the propertyName.equals( propertyPath ) checks whether we have a component key reference, where the component class property name is the same as the entity id property name; if the two are not equal, this is the case and we'd need to "fall through" to using the property mapping.	WITHOUT_CLASSIFICATION	0.9989619898273941	WITHOUT_CLASSIFICATION	0.0010380101726059198	DESIGN
for a subquery, the alias to use depends on a few things (we already know this is not an overall SELECT): 1) if this FROM_ELEMENT represents a correlation to the outer-most query A) if the outer query represents a multi-table persister, we need to use the given alias in anticipation of one of the multi-table executors being used (as this subquery will actually be used in the "id select" phase of that multi-table executor) B) otherwise, we need to use the persister's table name as the column qualification 2) otherwise (not correlated), use the given alias	WITHOUT_CLASSIFICATION	0.7966274899016546	DESIGN	0.2033725100983455	WITHOUT_CLASSIFICATION
Not a collection? Return the entity property mapping.	WITHOUT_CLASSIFICATION	0.8171548908505483	WITHOUT_CLASSIFICATION	0.1828451091494517	DESIGN
collection of <many-to-any/> mappings... used to circumvent the component-collection check below...	WITHOUT_CLASSIFICATION	0.9766573957983806	WITHOUT_CLASSIFICATION	0.023342604201619432	DESIGN
Otherwise, the destination node was implied by the FROM clause and the FROM clause processor will automatically add it in the right place.	WITHOUT_CLASSIFICATION	0.9999777542296706	WITHOUT_CLASSIFICATION	2.2245770329356098E-5	DESIGN
If the first identifier in the path referrs to the class alias (not the class name), then this is a correlated subselect. If it's a correlated sub-select, use the existing table alias. Otherwise generate a new one.	WITHOUT_CLASSIFICATION	0.9978868051867962	WITHOUT_CLASSIFICATION	0.002113194813203805	DESIGN
check to see if our "propPath" actually represents a property on the persister	WITHOUT_CLASSIFICATION	0.9998719440827457	WITHOUT_CLASSIFICATION	1.2805591725420233E-4	DESIGN
An ident node can represent an index expression if the ident represents a naked property ref Note: this makes the assumption (which is currently the case in the hql-sql grammar) that the ident is first resolved itself (addrExpr -> resolve()). The other option, if that changes, is to call resolve from here; but it is currently un-needed overhead.	WITHOUT_CLASSIFICATION	0.9999547234042223	WITHOUT_CLASSIFICATION	4.527659577772559E-5	DESIGN
This uses a PathExpressionParser but notice that compound paths are not valid, only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9911690251206035	WITHOUT_CLASSIFICATION	0.008830974879396587	DESIGN
If this is an implied join in a FROM clause, then use ANSI-style joining, and set the flag on the FromElement that indicates that it was implied in the FROM clause itself.	WITHOUT_CLASSIFICATION	0.9998452112476914	WITHOUT_CLASSIFICATION	1.5478875230854223E-4	DESIGN
origin.addDestination(destination); Add the query spaces.	WITHOUT_CLASSIFICATION	0.9998826809690671	WITHOUT_CLASSIFICATION	1.173190309328679E-4	DESIGN
For an explicit many-to-many relationship, add a second join from the intermediate (many-to-many) table to the destination table. Also, make sure that the from element's idea of the destination is the destination table.	WITHOUT_CLASSIFICATION	0.9999982058068552	WITHOUT_CLASSIFICATION	1.794193144825169E-6	DESIGN
Reset the node type, because the rest of the system is expecting FROM_FRAGMENT, all we wanted was for the factory to create the right sub-class. This might get reset again later on anyway to make the SQL generation simpler.	WITHOUT_CLASSIFICATION	0.9861482746853677	WITHOUT_CLASSIFICATION	0.013851725314632319	DESIGN
explicit = true; This is an explict Select. ArrayList sqlResultTypeList = new ArrayList();	WITHOUT_CLASSIFICATION	0.9998744182542089	WITHOUT_CLASSIFICATION	1.255817457911031E-4	DESIGN
sqlResultTypeList.add( type ); Generate the select expression.	WITHOUT_CLASSIFICATION	0.9997873647477683	WITHOUT_CLASSIFICATION	2.126352522317835E-4	DESIGN
If the expression list has exactly one expression, and the type of the expression is a collection then this might be a collection function, such as index(c) or size(c).	WITHOUT_CLASSIFICATION	0.9983242919716259	WITHOUT_CLASSIFICATION	0.0016757080283740428	DESIGN
Need to parse off the column qualifiers; this is assuming (which is true as of now) that this is only used from update and delete HQL statement parsing	WITHOUT_CLASSIFICATION	0.9807213452056625	WITHOUT_CLASSIFICATION	0.01927865479433756	DESIGN
for regression testing against output from the old parser... found it easiest to simply reorder the FromElements here into ascending order in terms of injecting them into the resulting sql ast in orders relative to those expected by the old parser; this is definitely another of those "only needed for regression purposes". The SyntheticAndFactory, then, simply injects them as it encounters them.	WITHOUT_CLASSIFICATION	0.9999998142343979	WITHOUT_CLASSIFICATION	1.8576560217422518E-7	DESIGN
The uber-rule here is that we need to include subclass joins if the FromElement is in any way dereferenced by a property from the subclass table; otherwise we end up with column references qualified by a non-existent table reference in the resulting SQL...	WITHOUT_CLASSIFICATION	0.9971175153234894	WITHOUT_CLASSIFICATION	0.002882484676510641	DESIGN
classic translator does not support collection of ordinal param metadata	WITHOUT_CLASSIFICATION	0.9982407950343134	WITHOUT_CLASSIFICATION	0.001759204965686611	DESIGN
The following variables are stacks that keep information about each subexpression in the list of nested subexpressions we are currently processing.	WITHOUT_CLASSIFICATION	0.9965502950463273	WITHOUT_CLASSIFICATION	0.0034497049536727116	DESIGN
The loop ensures atomicity of the select + update even for no transaction or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999984357177607	WITHOUT_CLASSIFICATION	1.5642822393234993E-6	DESIGN
should not be able to reach last without maxPosition being set unless there are no results	WITHOUT_CLASSIFICATION	0.9997297970731462	WITHOUT_CLASSIFICATION	2.70202926853771E-4	DESIGN
we found it in the temp PC. Should indicate we are in the midst of processing a result set containing eager fetches via join fetch	WITHOUT_CLASSIFICATION	0.9997530512232856	WITHOUT_CLASSIFICATION	2.469487767144115E-4	DESIGN
do not use proxiesByKey, since not all proxies that point to this session's instances are in that collection!	WITHOUT_CLASSIFICATION	0.9990159612399169	WITHOUT_CLASSIFICATION	9.840387600831635E-4	DESIGN
if there is no TM configured, we will not be able to access the javax.transaction.Transaction object in order to register a synch anyway.	WITHOUT_CLASSIFICATION	0.9997565720095003	WITHOUT_CLASSIFICATION	2.4342799049957998E-4	DESIGN
Since the result set cursor is always left at the first physical row after the "last processed", we need to jump back one position to get the key value we are interested in skipping	WITHOUT_CLASSIFICATION	0.9999987090596562	WITHOUT_CLASSIFICATION	1.2909403438923095E-6	DESIGN
true if this is a query and we are loading multiple instances of the same collection role otherwise this is a CollectionInitializer and we are loading up a single collection or batch	WITHOUT_CLASSIFICATION	0.9987117171877851	WITHOUT_CLASSIFICATION	0.0012882828122149051	DESIGN
we don't need to worry about existing version being uninitialized because this block isn't called by a re-entrant load (re-entrant loads _always_ have lock mode NONE)	WITHOUT_CLASSIFICATION	0.9988107560259695	WITHOUT_CLASSIFICATION	0.0011892439740305626	DESIGN
add temp entry so that the next step is circular-reference safe - only needed because some types don't take proper advantage of two-phase-load (esp. components)	WITHOUT_CLASSIFICATION	0.9999851906079864	WITHOUT_CLASSIFICATION	1.4809392013641798E-5	DESIGN
assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9989078313410422	WITHOUT_CLASSIFICATION	0.0010921686589577834	DESIGN
log a message about potential connection leaks	WITHOUT_CLASSIFICATION	0.9998741428067727	WITHOUT_CLASSIFICATION	1.258571932272865E-4	DESIGN
ps.close(); just close it; do NOT try to return it to the pool! NOTE: early exit!	WITHOUT_CLASSIFICATION	0.9999974992107965	WITHOUT_CLASSIFICATION	2.5007892035018655E-6	DESIGN
this has been shown to happen occasionally in rare cases when using a transaction manager + transaction-timeout where the timeout calls back through Hibernate's registered transaction synchronization on a separate "reaping" thread. In cases where that reaping thread executes through this block at the same time the main application thread does we can get into situations where these CMEs occur. And though it is not "allowed" per-se, the end result without handling it specifically is infinite looping. So here, we simply break the loop	WITHOUT_CLASSIFICATION	0.9996760299896342	WITHOUT_CLASSIFICATION	3.23970010365739E-4	DESIGN
unfortunately this stuff can't be cached because it is per-invocation, not constant for the QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9962972293133534	WITHOUT_CLASSIFICATION	0.003702770686646721	DESIGN
can't cache this stuff either (per-invocation) we are given a map of user-alias -> lock mode create a new map of sql-alias -> lock mode	WITHOUT_CLASSIFICATION	0.9993244326036479	WITHOUT_CLASSIFICATION	6.755673963520599E-4	DESIGN
don't create a unique key, 'cos some databases don't like a UK on nullable columns getCollectionTable().createUniqueKey( getIdentifier().getConstraintColumns() );	WITHOUT_CLASSIFICATION	0.9993483192037143	WITHOUT_CLASSIFICATION	6.51680796285715E-4	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994624553598287	WITHOUT_CLASSIFICATION	5.375446401713291E-4	DESIGN
isSet = collection.isSet(); isSorted = collection.isSorted();	WITHOUT_CLASSIFICATION	0.9997866385756121	WITHOUT_CLASSIFICATION	2.1336142438781348E-4	DESIGN
lists, arrays sets, maps, bags	WITHOUT_CLASSIFICATION	0.9995358267373101	WITHOUT_CLASSIFICATION	4.641732626897897E-4	DESIGN
we finish all the "removes" first to take care of possible unique constraints and so that we can take better advantage of batching	WITHOUT_CLASSIFICATION	0.9985214056193273	WITHOUT_CLASSIFICATION	0.0014785943806726264	DESIGN
use a combination of foreign key columns and pk columns, since the ordering of removal and addition is not guaranteed when a child moves from one parent to another	WITHOUT_CLASSIFICATION	0.9998820637458088	WITHOUT_CLASSIFICATION	1.1793625419123706E-4	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994624553598287	WITHOUT_CLASSIFICATION	5.375446401713291E-4	DESIGN
information about properties of this class, including inherited properties (only really needed for updatable/insertable properties)	WITHOUT_CLASSIFICATION	0.9984068979589443	WITHOUT_CLASSIFICATION	0.0015931020410555924	DESIGN
all this only really needs to consider properties of this class, not its subclasses, but since we are reusing code used for sequential selects, we use the subclass closure	WITHOUT_CLASSIFICATION	0.9873817343182725	DESIGN	0.012618265681727546	WITHOUT_CLASSIFICATION
Here we render the select column list based on the properties defined as being generated. For partial component generation, we currently just re-select the whole component rather than trying to handle the individual generated portions.	WITHOUT_CLASSIFICATION	0.9999996524870394	WITHOUT_CLASSIFICATION	3.4751296073473137E-7	DESIGN
this is the root (versioned) table, and we are using version-based optimistic locking; if we are not updating the version, also don't check it (unless this is a "generated" version column)!	WITHOUT_CLASSIFICATION	0.9982157163042806	WITHOUT_CLASSIFICATION	0.0017842836957194142	DESIGN
optimistic-lock="all", include all updatable properties optimistic-lock="dirty", include all properties we are updating this time	WITHOUT_CLASSIFICATION	0.9998825356137583	WITHOUT_CLASSIFICATION	1.1746438624170317E-4	DESIGN
this property belongs to the table, and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9404407963275415	WITHOUT_CLASSIFICATION	0.05955920367245836	DESIGN
check to see if the connection is in auto-commit mode (no connection means aggressive connection release outside a JTA transaction context, so MUST be autocommit mode)	WITHOUT_CLASSIFICATION	0.9993753778515271	WITHOUT_CLASSIFICATION	6.246221484728951E-4	DESIGN
need to treat this as if it where optimistic-lock="all" (dirty does not make sense); first we need to locate the "loaded" state Note, it potentially could be a proxy, so perform the location the safe way...	WITHOUT_CLASSIFICATION	0.9974832412602659	WITHOUT_CLASSIFICATION	0.002516758739734152	DESIGN
we always assume an instance with a null identifier or no identifier property is unsaved!	WITHOUT_CLASSIFICATION	0.9961655260166078	WITHOUT_CLASSIFICATION	0.0038344739833922593	DESIGN
Need to use the identifier type of the collection owner since the incoming is value is actually the owner's id. Using the collection's key type causes problems with property-ref keys...	WITHOUT_CLASSIFICATION	0.9993519832200732	WITHOUT_CLASSIFICATION	6.480167799268516E-4	DESIGN
allow any identifier quoted with backtick only recognizes identifiers beginning with a letter	WITHOUT_CLASSIFICATION	0.9982138030787391	WITHOUT_CLASSIFICATION	0.0017861969212609884	DESIGN
following doesn't handle (null, not null) but unnecessary since this would mean all rows	WITHOUT_CLASSIFICATION	0.9947638736748134	WITHOUT_CLASSIFICATION	0.005236126325186584	DESIGN
IMPL NOTE : due to the delayed population of setters (setters cached for performance), we really cannot pro0perly define equality for this transformer	WITHOUT_CLASSIFICATION	0.999452264564498	WITHOUT_CLASSIFICATION	5.477354355020661E-4	DESIGN
we need to dirty check collections, since they can cause an owner version number increment	WITHOUT_CLASSIFICATION	0.9999387823942805	WITHOUT_CLASSIFICATION	6.121760571952405E-5	DESIGN
return the id, so we can use it to reset the proxy id return result;	WITHOUT_CLASSIFICATION	0.9998508036104514	WITHOUT_CLASSIFICATION	1.4919638954851257E-4	DESIGN
optimizer = getFactory().getSettings().getBytecodeProvider().getReflectionOptimizer( mappedClass, getterNames, setterNames, propTypes );	WITHOUT_CLASSIFICATION	0.9998850683552812	WITHOUT_CLASSIFICATION	1.1493164471875531E-4	DESIGN
cache the actual id of the object, not the value of the property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.953045034596284	WITHOUT_CLASSIFICATION	0.04695496540371612	DESIGN
We now have the value of the property-ref we reference. However, we need to dig a little deeper, as that property might also be an entity type, in which case we need to resolve its identitifier	WITHOUT_CLASSIFICATION	0.999960519737465	WITHOUT_CLASSIFICATION	3.9480262534952126E-5	DESIGN
Retrieve the value of the designated column in the current row of this ResultSet object as a java.io.Reader object	WITHOUT_CLASSIFICATION	0.9999797809724904	WITHOUT_CLASSIFICATION	2.021902750961893E-5	DESIGN
not absolutely necessary, but helps for some equals()/hashCode() implementations	WITHOUT_CLASSIFICATION	0.9991106936144059	WITHOUT_CLASSIFICATION	8.893063855940204E-4	DESIGN
this should be a call to resolve(), not resolveIdentifier(), 'cos it might be a property-ref, and we did not cache the referenced value	WITHOUT_CLASSIFICATION	0.7019857183985788	DESIGN	0.29801428160142124	WITHOUT_CLASSIFICATION
If we have <tt>not-found="ignore"</tt> association mapped to a formula, we always need to dirty check it, so we can update the second-level cache	WITHOUT_CLASSIFICATION	0.997814081849516	WITHOUT_CLASSIFICATION	0.0021859181504840174	DESIGN
can't just return null here, since that would cause an owning component to become null	WITHOUT_CLASSIFICATION	0.9999746515805105	WITHOUT_CLASSIFICATION	2.534841948951345E-5	DESIGN
for arrays, replaceElements() may return a different reference, since the array length might not match	WITHOUT_CLASSIFICATION	0.9940319044816194	WITHOUT_CLASSIFICATION	0.00596809551838069	DESIGN
actual cache of the entries. soft references are used for both the keys and the values here since the values pertaining to the MRU entries are kept in a seperate hard reference cache (to avoid their enqueuement/garbage-collection).	WITHOUT_CLASSIFICATION	0.9958148132292426	WITHOUT_CLASSIFICATION	0.0041851867707574444	DESIGN
as soon as we encounter our first letter, return the substring from that position	WITHOUT_CLASSIFICATION	0.9999574740577151	WITHOUT_CLASSIFICATION	4.252594228482536E-5	DESIGN
Note : expected in the syntax: type=listenerClass ({sep}type=listenerClass) where {sep} is any whitespace or comma	WITHOUT_CLASSIFICATION	0.9999945404453972	WITHOUT_CLASSIFICATION	5.459554602823231E-6	DESIGN
isTransactionCallbackRegistered denotes whether any Hibernate Transaction has registered as a callback against this JDBCContext; only one such callback is allowed. Directly serializing this value causes problems with JDBCTransaction, or really any Transaction impl where the callback is local to the Transaction instance itself, since that Transaction is not serialized along with the JDBCContext. Thus we handle that fact here explicitly...	WITHOUT_CLASSIFICATION	0.9998608023492421	WITHOUT_CLASSIFICATION	1.3919765075790492E-4	DESIGN
note that for sequential scrolling, we make the assumption that the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9984046703489362	WITHOUT_CLASSIFICATION	0.0015953296510637241	DESIGN
We call getKeyFromResultSet() here so that we can know the key value upon which to perform the breaking logic. However, it is also then called from getRowFromResultSet() which is certainly not the most efficient. But the call here is needed, and there currently is no other way without refactoring of the doQuery()/getRowFromResultSet() methods	WITHOUT_CLASSIFICATION	0.7923318645537532	WITHOUT_CLASSIFICATION	0.20766813544624677	DESIGN
This check is needed since processing leaves the cursor after the last physical row for the current logical row; thus if we are after the last physical row, this might be caused by either: 1) scrolling to the last logical row 2) scrolling past the last logical row In the latter scenario, the previous logical row really is the last logical row. In all other cases, we should process back two logical records (the current logic row, plus the previous logical row).	WITHOUT_CLASSIFICATION	0.9917051890941596	WITHOUT_CLASSIFICATION	0.008294810905840331	DESIGN
and perform the load	WITHOUT_CLASSIFICATION	0.9997345231146416	WITHOUT_CLASSIFICATION	2.654768853583882E-4	DESIGN
important: reuse the same event instances for performance!	WITHOUT_CLASSIFICATION	0.999854093915723	WITHOUT_CLASSIFICATION	1.4590608427696606E-4	DESIGN
this is a query and we are loading multiple instances of the same collection role	WITHOUT_CLASSIFICATION	0.9897080690250777	WITHOUT_CLASSIFICATION	0.010291930974922295	DESIGN
we found a collection element in the result set	WITHOUT_CLASSIFICATION	0.9990654799951558	WITHOUT_CLASSIFICATION	9.345200048441747E-4	DESIGN
we did not find a collection element in the result set, so we ensure that a collection is created with the owner's identifier, since what we have is an empty collection	WITHOUT_CLASSIFICATION	0.9999829145511463	WITHOUT_CLASSIFICATION	1.7085448853693274E-5	DESIGN
this is a collection initializer, so we must create a collection for each of the passed-in keys, to account for the possibility that the collection is empty and has no rows in the result set	WITHOUT_CLASSIFICATION	0.9686997290412735	WITHOUT_CLASSIFICATION	0.031300270958726506	DESIGN
grab its state from the ResultSet and keep it in the Session (but don't yet initialize the object itself) note that we acquire LockMode.READ even if it was not requested	WITHOUT_CLASSIFICATION	0.9995385312270475	WITHOUT_CLASSIFICATION	4.6146877295245734E-4	DESIGN
a many-to-many; decrement currentDepth here to allow join across the association table without exceeding MAX_FETCH_DEPTH (i.e. the "currentDepth - 1" bit)	WITHOUT_CLASSIFICATION	0.9978764739023411	WITHOUT_CLASSIFICATION	0.0021235260976588447	DESIGN
if not a composite key, use "foo in (?, ?, ?)" for batching if no batch, and not a composite key, use "foo = ?"	WITHOUT_CLASSIFICATION	0.998028945661041	WITHOUT_CLASSIFICATION	0.0019710543389590707	DESIGN
the user visible aliases, which are unknown to the superclass, these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999381805481978	WITHOUT_CLASSIFICATION	6.181945180219899E-5	DESIGN
first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9999413020459202	WITHOUT_CLASSIFICATION	5.8697954079798236E-5	DESIGN
first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9999413020459202	WITHOUT_CLASSIFICATION	5.8697954079798236E-5	DESIGN
it does not refer to an alias of a projection, look for a property	WITHOUT_CLASSIFICATION	0.9996969781578503	WITHOUT_CLASSIFICATION	3.030218421497091E-4	DESIGN
determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9998469202141289	WITHOUT_CLASSIFICATION	1.530797858711908E-4	DESIGN
Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9995548450742496	WITHOUT_CLASSIFICATION	4.4515492575040327E-4	DESIGN
Translates an AST join type (i.e., the token type) into a JoinFragment.XXX join type. @param astJoinType The AST join type (from HqlSqlTokenTypes or SqlTokenTypes) @return a JoinFragment.XXX join type. @see JoinFragment @see SqlTokenTypes	WITHOUT_CLASSIFICATION	0.99992193777992	WITHOUT_CLASSIFICATION	7.806222008004358E-5	DESIGN
ignore	WITHOUT_CLASSIFICATION	0.9998594496367232	WITHOUT_CLASSIFICATION	1.4055036327665423E-4	DESIGN
ignore	WITHOUT_CLASSIFICATION	0.9998594496367232	WITHOUT_CLASSIFICATION	1.4055036327665423E-4	DESIGN
}	WITHOUT_CLASSIFICATION	0.9995699171636533	WITHOUT_CLASSIFICATION	4.300828363467246E-4	DESIGN
public List getCollectionAliases() { return collectionAliases; } public List getCollectionOwners() { return collectionOwners; } public List getCollectionOwnerAliases() { return collectionOwnerAliases; } public List getCollectionPersisters() { return collectionPersisters; } public Map getAlias2Persister() { return alias2Persister; } public boolean isCollectionInitializer() { return isCollectionInitializer; } public List getPersisters() { return persisters; } public Map getAlias2OwnerAlias() { return alias2OwnerAlias; } public List getScalarTypes() { return scalarTypes; } public List getScalarColumnAliases() { return scalarColumnAliases; } public List getPropertyResults() { return propertyResults; } public List getCollectionPropertyResults() { return collectionResults; } public Map getAlias2Return() { return alias2Return; }	WITHOUT_CLASSIFICATION	0.9999120558113568	WITHOUT_CLASSIFICATION	8.794418864317973E-5	DESIGN
SQLQueryParser parser = new SQLQueryParser( sqlQuery, processor.getAlias2Persister(), processor.getAlias2Return(), aliases, collAliases, collPersisters, suffixes, collSuffixes ); sql = parser.process(); namedParameterBindPoints = parser.getNamedParameters();	WITHOUT_CLASSIFICATION	0.999926763227362	WITHOUT_CLASSIFICATION	7.323677263810069E-5	DESIGN
include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9995151654379744	WITHOUT_CLASSIFICATION	4.848345620256676E-4	DESIGN
sqlAliasSuffixes[i] = element.getColumnAliasSuffix();	WITHOUT_CLASSIFICATION	0.9997866385756121	WITHOUT_CLASSIFICATION	2.1336142438781348E-4	DESIGN
NONE, because its the requested lock mode, not the actual!	WITHOUT_CLASSIFICATION	0.9999633662374434	WITHOUT_CLASSIFICATION	3.66337625564625E-5	DESIGN
at this point we have (drivingSqlAlias) the SQL alias of the driving table corresponding to the given user alias. However, the driving table is not (necessarily) the table against which we want to apply locks. Mainly, the exception case here is joined-subclass hierarchies where we instead want to apply the lock against the root table (for all other strategies, it just happens that driving and root are the same).	WITHOUT_CLASSIFICATION	0.9999978228883504	WITHOUT_CLASSIFICATION	2.1771116495761998E-6	DESIGN
the column doesnt exist at all.	WITHOUT_CLASSIFICATION	0.9999367329839454	WITHOUT_CLASSIFICATION	6.326701605468139E-5	DESIGN
we have a mapped identifier property and the root of the incoming property path matched that identifier property	WITHOUT_CLASSIFICATION	0.9996501666770001	WITHOUT_CLASSIFICATION	3.498333229999671E-4	DESIGN
we have an embedded composite identifier	WITHOUT_CLASSIFICATION	0.9982685795830529	WITHOUT_CLASSIFICATION	0.0017314204169469674	DESIGN
both many-to-one and one-to-one are represented as a Property. EntityPersister is relying on this value to determine "lazy fetch groups" in terms of field-level interception. So we need to make sure that we return true here for the case of many-to-one and one-to-one with lazy="no-proxy" impl note - lazy="no-proxy" currently forces both lazy and unwrap to be set to true. The other case we are extremely interested in here is that of lazy="proxy" where lazy is set to true, but unwrap is set to false. thus we use both here under the assumption that this return is really only ever used during persister construction to determine the lazy property/field fetch groupings. If that assertion changes then this check needs to change as well. Partially, this is an issue with the overloading of the term "lazy" here...	WITHOUT_CLASSIFICATION	0.8056402577479584	DESIGN	0.1943597422520415	WITHOUT_CLASSIFICATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996358953228832	WITHOUT_CLASSIFICATION	3.641046771167544E-4	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996358953228832	WITHOUT_CLASSIFICATION	3.641046771167544E-4	DESIGN
rootTableName = persistentClass.getRootTable().getQualifiedName( factory.getDialect(), factory.getDefaultCatalog(), factory.getDefaultSchema() );	WITHOUT_CLASSIFICATION	0.9998850683552812	WITHOUT_CLASSIFICATION	1.1493164471875531E-4	DESIGN
SUBCLASSES	WITHOUT_CLASSIFICATION	0.999627030731016	WITHOUT_CLASSIFICATION	3.7296926898392813E-4	DESIGN
Custom sql	WITHOUT_CLASSIFICATION	0.9998931174621136	WITHOUT_CLASSIFICATION	1.0688253788646384E-4	DESIGN
protected void initPropertyPaths(final String path,final Type type,final String[] columns,final String[] formulaTemplates,final Mapping factory)throws MappingException {addFormulaPropertyPath(path, type, formulaTemplates);initPropertyPaths(path, type, columns, formulaTemplates, factory);}	WITHOUT_CLASSIFICATION	0.9998374531421326	WITHOUT_CLASSIFICATION	1.6254685786744585E-4	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994515852581775	WITHOUT_CLASSIFICATION	5.484147418224609E-4	DESIGN
Custom SQL (would be better if these were private)	WITHOUT_CLASSIFICATION	0.9822359242955857	WITHOUT_CLASSIFICATION	0.017764075704414302	DESIGN
moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.989962754656624	WITHOUT_CLASSIFICATION	0.010037245343375991	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994515852581775	WITHOUT_CLASSIFICATION	5.484147418224609E-4	DESIGN
aliases for identifier ( alias.id ); skip if the entity defines a non-id property named 'id'	WITHOUT_CLASSIFICATION	0.9989827527583436	WITHOUT_CLASSIFICATION	0.0010172472416565162	DESIGN
decide which ResultSet to get the property value from:	WITHOUT_CLASSIFICATION	0.9998273753672838	WITHOUT_CLASSIFICATION	1.7262463271607524E-4	DESIGN
note: it is conceptually possible that a UserType could map null to a non-null value, so the following is arguable:	WITHOUT_CLASSIFICATION	0.9997905025318665	WITHOUT_CLASSIFICATION	2.094974681333965E-4	DESIGN
the contract of EntityTuplizer.determineConcreteSubclassEntityName says that returning null is an indication that the specified entity-name (this.getEntityName) should be used.	WITHOUT_CLASSIFICATION	0.8913888715026366	WITHOUT_CLASSIFICATION	0.10861112849736344	DESIGN
Need to use the identifier type of the collection owner since the incoming is value is actually the owner's id. Using the collection's key type causes problems with property-ref keys...	WITHOUT_CLASSIFICATION	0.9993519832200732	WITHOUT_CLASSIFICATION	6.480167799268516E-4	DESIGN
cache these since they are stateless this one could even be static...	WITHOUT_CLASSIFICATION	0.5258813971037776	DESIGN	0.4741186028962225	WITHOUT_CLASSIFICATION
"as" is not in KEYWORDS	WITHOUT_CLASSIFICATION	0.9932960971801756	WITHOUT_CLASSIFICATION	0.0067039028198243545	DESIGN
--Commented out by Inspection (12/4/04 9:10 AM): public abstract void addCondition(String alias, String[] columns, String condition);	WITHOUT_CLASSIFICATION	0.999880486744095	WITHOUT_CLASSIFICATION	1.1951325590500592E-4	DESIGN
use the id column alias	WITHOUT_CLASSIFICATION	0.9998980247919205	WITHOUT_CLASSIFICATION	1.0197520807954583E-4	DESIGN
private List aliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999268702073941	WITHOUT_CLASSIFICATION	7.312979260591505E-5	DESIGN
columns.add(columnName); aliases.add(tableAlias);	WITHOUT_CLASSIFICATION	0.9994515852581775	WITHOUT_CLASSIFICATION	5.484147418224609E-4	DESIGN
where fragment must be empty!	WITHOUT_CLASSIFICATION	0.9790251144201821	WITHOUT_CLASSIFICATION	0.0209748855798178	DESIGN
revert to traditional hibernate behavior of setting initialPoolSize to minPoolSize unless otherwise specified with a c3p0.-style parameter.	WITHOUT_CLASSIFICATION	0.9998342739301069	WITHOUT_CLASSIFICATION	1.6572606989306127E-4	DESIGN
arbitrary on clause ignored!!	WITHOUT_CLASSIFICATION	0.9997322829123579	WITHOUT_CLASSIFICATION	2.677170876420328E-4	DESIGN
might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9922176514988466	WITHOUT_CLASSIFICATION	0.007782348501153378	DESIGN
might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9922176514988466	WITHOUT_CLASSIFICATION	0.007782348501153378	DESIGN
if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9997830697549995	WITHOUT_CLASSIFICATION	2.1693024500043777E-4	DESIGN
Essentially: 1) If we have a local (Hibernate) transaction in progress and it already has the UserTransaction cached, use that UserTransaction to determine the status. 2) If a transaction manager has been located, use that transaction manager to determine the status. 3) Finally, as the last resort, try to lookup the UserTransaction via JNDI and use that to determine the status.	WITHOUT_CLASSIFICATION	0.9999940118092356	WITHOUT_CLASSIFICATION	5.988190764441229E-6	DESIGN
package	WITHOUT_CLASSIFICATION	0.9984867178818834	WITHOUT_CLASSIFICATION	0.0015132821181166305	DESIGN
swallow it (the transaction _was_ successful or successfully rolled back)	WITHOUT_CLASSIFICATION	0.9991657010109688	WITHOUT_CLASSIFICATION	8.342989890311433E-4	DESIGN
ignore it	WITHOUT_CLASSIFICATION	0.9998666999599168	WITHOUT_CLASSIFICATION	1.3330004008314935E-4	DESIGN
we need to dirty check many-to-ones with not-found="ignore" in order to update the cache (not the database), since in this case a null entity reference can lose information	WITHOUT_CLASSIFICATION	0.8725495946692597	WITHOUT_CLASSIFICATION	0.12745040533074034	DESIGN
create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9996718851030163	WITHOUT_CLASSIFICATION	3.281148969836859E-4	DESIGN
Regions can get instantiated in the course of normal work (e.g. a named query region will be created the first time the query is executed), so suspend any ongoing tx	WITHOUT_CLASSIFICATION	0.9999885795710072	WITHOUT_CLASSIFICATION	1.1420428992850674E-5	DESIGN
then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9983643553057886	WITHOUT_CLASSIFICATION	0.0016356446942113714	DESIGN
Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999499016717694	WITHOUT_CLASSIFICATION	5.009832823058444E-5	DESIGN
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9910579619327213	WITHOUT_CLASSIFICATION	0.008942038067278637	DESIGN
NOTE : this is being used from the process of shutting down a SessionFactory. Specific things to consider: (1) this clearing of the region should not propagate to other nodes on the cluster (if any); this is the cache-mode-local option bit... (2) really just trying a best effort to cleanup after ourselves; lock failures, etc are not critical here; this is the fail-silently option bit...	WITHOUT_CLASSIFICATION	0.5461365997291199	WITHOUT_CLASSIFICATION	0.4538634002708801	DESIGN
need to extract the component values and check for subtype replacements...	WITHOUT_CLASSIFICATION	0.9999701813336536	WITHOUT_CLASSIFICATION	2.981866634634254E-5	DESIGN
We ignore minimalPutOverride. JBossCache putForExternalRead is already about as minimal as we can get; it will promptly return if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999932910126668	WITHOUT_CLASSIFICATION	6.708987333151233E-6	DESIGN
for now, just "re-flatten" the metamodel since this is temporary stuff anyway (HHH-1907)	WITHOUT_CLASSIFICATION	0.5574737428991984	WITHOUT_CLASSIFICATION	0.4425262571008015	DESIGN
Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9986653124961967	WITHOUT_CLASSIFICATION	0.0013346875038032406	DESIGN
This solution would allow us to eliminate the owner arg to disassemble(), but what if the collection was null, and then later had elements added? seems unsafe session.getPersistenceContext().getCollectionEntry( (PersistentCollection) value ).getKey();	WITHOUT_CLASSIFICATION	0.7562036903044492	WITHOUT_CLASSIFICATION	0.2437963096955509	DESIGN
Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9993210655243847	WITHOUT_CLASSIFICATION	6.78934475615235E-4	DESIGN
some collections are not lazy:	WITHOUT_CLASSIFICATION	0.9951882272942515	WITHOUT_CLASSIFICATION	0.004811772705748497	DESIGN
Here we don't want to suspend the tx. If we do: 1) We might be caching query results that reflect uncommitted changes. No tx == no WL on cache node, so other threads can prematurely see those query results 2) No tx == immediate replication. More overhead, plus we spread issue #1 above around the cluster	WITHOUT_CLASSIFICATION	0.996997374936526	WITHOUT_CLASSIFICATION	0.0030026250634740633	DESIGN
return the (fully resolved) identifier value, but do not resolve to the actual referenced entity instance NOTE: the owner of the association is not really the owner of the id!	WITHOUT_CLASSIFICATION	0.9978490122674402	WITHOUT_CLASSIFICATION	0.002150987732559956	DESIGN
Add a zero (or quite low) timeout option so we don't block. Ignore any TimeoutException. Basically we forego caching the query result in order to avoid blocking. Reads are done with suspended tx, so they should not hold the lock for long. Not caching the query result is OK, since any subsequent read will just see the old result with its out-of-date timestamp; that result will be discarded and the db query performed again.	WITHOUT_CLASSIFICATION	0.9999994478603396	WITHOUT_CLASSIFICATION	5.521396604049554E-7	DESIGN
Impl note: takes advantage of the fact that an escpaed single quote embedded within a quote-block can really be handled as two seperate quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9971686063684463	WITHOUT_CLASSIFICATION	0.0028313936315537713	DESIGN
We have the JBCWriteMutex, so no other local thread will be trying to write this key. It's possible here some remote thread has come in and changed the values again, but since we are reading the values to write to JBC right now, we know we are writing the latest values; i.e. we don't assume that what we cached in entry.update() above is what we should write to JBC now. Our write could be redundant, i.e. we are writing what some remote thread just came in an wrote. There is a chance that yet another remote thread will update us, and we'll then overwrite that later data in JBC. But, all remote nodes will ignore that change in their localCache; the only place it will live will be in JBC, where it can only effect the initial state transfer values on newly joined nodes (i.e. populateLocalCache()).	WITHOUT_CLASSIFICATION	0.9995523216334454	WITHOUT_CLASSIFICATION	4.476783665545122E-4	DESIGN
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9990144442303278	WITHOUT_CLASSIFICATION	9.855557696721326E-4	DESIGN
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9990144442303278	WITHOUT_CLASSIFICATION	9.855557696721326E-4	DESIGN
Don't need to lock the cache here, since if someone else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9999949483864388	WITHOUT_CLASSIFICATION	5.05161356129831E-6	DESIGN
we need to grab the version value from the entity, otherwise we have issues with generated-version entities that may have multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9967363570763594	WITHOUT_CLASSIFICATION	0.003263642923640552	DESIGN
we need to obtain the lock before any actions are executed, since this may be an inverse="true" bidirectional association and it is one of the earlier entity actions which actually updates the database (this action is resposible for second-level cache invalidation only)	WITHOUT_CLASSIFICATION	0.9961069901959043	WITHOUT_CLASSIFICATION	0.003893009804095808	DESIGN
postDelete: After actually deleting a row, record the fact that the instance no longer exists on the database (needed for identity-column key generation), and remove it from the session cache	WITHOUT_CLASSIFICATION	0.9962466394424334	WITHOUT_CLASSIFICATION	0.003753360557566542	DESIGN
intentionally empty	WITHOUT_CLASSIFICATION	0.9996279301531421	WITHOUT_CLASSIFICATION	3.72069846857864E-4	DESIGN
todo : what else to do here?	DESIGN	0.9842546864300075	WITHOUT_CLASSIFICATION	0.01574531356999254	DESIGN
put() has nowait semantics, is this really appropriate? note that it needs to be async replication, never local or sync	DESIGN	0.927461428360026	WITHOUT_CLASSIFICATION	0.072538571639974	DESIGN
'hibernate.temp.use_jdbc_metadata_defaults' is a temporary magic value. The need for it is intended to be alleviated with future developement, thus it is not defined as an Environment constant... it is used to control whether we should consult the JDBC metadata to determine certain Settings default values; it is useful to not do this when the database may not be available (mainly in tools usage).	DESIGN	0.9987169165777037	DESIGN	0.001283083422296383	WITHOUT_CLASSIFICATION
TODO: get SQL rendering out of this package!	DESIGN	0.8430000066431197	DESIGN	0.15699999335688028	WITHOUT_CLASSIFICATION
TODO: get SQL rendering out of this package!	DESIGN	0.8430000066431197	DESIGN	0.15699999335688028	WITHOUT_CLASSIFICATION
todo : eventually merge this with TreeCache and just add optional opt-lock support there.	DESIGN	0.9967156146710254	WITHOUT_CLASSIFICATION	0.003284385328974648	DESIGN
can happen because of the multiple ways Cache.remove() can be invoked :(	DESIGN	0.999968713269253	WITHOUT_CLASSIFICATION	3.12867307469475E-5	DESIGN
work around the "feature" where tree cache is validating the inserted node during the next transaction. no idea...	DESIGN	0.9712993190902374	WITHOUT_CLASSIFICATION	0.028700680909762657	DESIGN
FIXME Per the RegionFactory class Javadoc, this constructor version should not be necessary. @param props The configuration properties	DESIGN	0.9972810416271258	DESIGN	0.002718958372874143	WITHOUT_CLASSIFICATION
FIXME Per the RegionFactory class Javadoc, this constructor version should not be necessary. @param props The configuration properties	DESIGN	0.9972810416271258	DESIGN	0.002718958372874143	WITHOUT_CLASSIFICATION
FIXME Hacky workaround to JBCACHE-1202	DESIGN	0.9998276927825387	DESIGN	1.7230721746121946E-4	WITHOUT_CLASSIFICATION
FIXME Hacky workaround to JBCACHE-1202	DESIGN	0.9998276927825387	DESIGN	1.7230721746121946E-4	WITHOUT_CLASSIFICATION
TODO: I considered validating TS cache config here, but decided to defer unti getTimestampsCacheInstance() in case the cache is never actually used	DESIGN	0.9999231549307079	DESIGN	7.684506929201661E-5	WITHOUT_CLASSIFICATION
TODO Is this a valid operation on a timestamps cache?	DESIGN	0.7829167868383852	DESIGN	0.21708321316161483	WITHOUT_CLASSIFICATION
TODO Is this a valid operation on a timestamps cache?	DESIGN	0.7829167868383852	DESIGN	0.21708321316161483	WITHOUT_CLASSIFICATION
TODO Why not use the timestamp in a DataVersion?	DESIGN	0.9961536551304311	DESIGN	0.003846344869568905	WITHOUT_CLASSIFICATION
can happen because of the multiple ways Cache.remove() can be invoked :(	DESIGN	0.999968713269253	WITHOUT_CLASSIFICATION	3.12867307469475E-5	DESIGN
work around the "feature" where tree cache is validating the inserted node during the next transaction. no idea...	DESIGN	0.9712993190902374	WITHOUT_CLASSIFICATION	0.028700680909762657	DESIGN
swaldman 2004-02-07: modify to allow null values to signify fall through to c3p0 PoolConfig defaults	DESIGN	0.9997149678824551	WITHOUT_CLASSIFICATION	2.8503211754485845E-4	DESIGN
turn hibernate.c3p0. into c3p0., so c3p0 gets a chance to see all hibernate.c3p0.	DESIGN	0.9535132237019571	WITHOUT_CLASSIFICATION	0.046486776298043	DESIGN
TODO: this bit actually has to be called after all cascades! but since identity insert is called synchronously, instead of asynchronously as other actions, it isn't	DESIGN	0.9520726805663731	DESIGN	0.047927319433626984	WITHOUT_CLASSIFICATION
TODO: reenable if we also fix the above todo	DESIGN	0.9532435971969394	DESIGN	0.0467564028030606	WITHOUT_CLASSIFICATION
TODO: inefficient if that cache is just going to ignore the updated state!	DESIGN	0.9309804056392353	WITHOUT_CLASSIFICATION	0.06901959436076466	DESIGN
we may be screwed here since the collection action is about to execute and we do not know the final owner key value	DESIGN	0.9996252097337286	WITHOUT_CLASSIFICATION	3.7479026627144755E-4	DESIGN
Create an action that will evict collection and entity regions based on queryspaces (table names). TODO: cache the autodetected information and pass it in instead.	DESIGN	0.7934396202103902	DESIGN	0.20656037978960984	WITHOUT_CLASSIFICATION
todo : what else to do here?	DESIGN	0.9842546864300075	WITHOUT_CLASSIFICATION	0.01574531356999254	DESIGN
todo : modify the class definition if not already transformed...	DESIGN	0.9982674841546366	WITHOUT_CLASSIFICATION	0.001732515845363347	DESIGN
todo : what else to do here?	DESIGN	0.9842546864300075	WITHOUT_CLASSIFICATION	0.01574531356999254	DESIGN
this is called by SessionFactory irregardless; we just disregard here; could also add a check to SessionFactory to only conditionally call start	DESIGN	0.9892166795677431	WITHOUT_CLASSIFICATION	0.010783320432256872	DESIGN
this is called by SessionFactory irregardless; we just disregard here; could also add a check to SessionFactory to only conditionally call stop	DESIGN	0.9898902098820007	WITHOUT_CLASSIFICATION	0.01010979011799931	DESIGN
TODO: to handle concurrent writes correctly, this should return a Lock to the client	DESIGN	0.9964669778722526	DESIGN	0.0035330221277473832	WITHOUT_CLASSIFICATION
put() has nowait semantics, is this really appropriate? note that it needs to be async replication, never local or sync	DESIGN	0.927461428360026	WITHOUT_CLASSIFICATION	0.072538571639974	DESIGN
TODO: to handle concurrent writes correctly, the client should pass in a Lock	DESIGN	0.9445313233778597	DESIGN	0.05546867662214032	WITHOUT_CLASSIFICATION
TODO: assumes all collections disassemble to an array!	DESIGN	0.9699512059718882	WITHOUT_CLASSIFICATION	0.03004879402811176	DESIGN
TODO: reuse the PreLoadEvent	DESIGN	0.639976411123111	WITHOUT_CLASSIFICATION	0.3600235888768891	DESIGN
todo: this was added to support initializing an entity's EntityEntry snapshot during reattach; this should be refactored to instead expose a method to assemble a EntityEntry based on this state for return.	DESIGN	0.6150496378399154	DESIGN	0.38495036216008455	WITHOUT_CLASSIFICATION
todo : what is the implication of this?	DESIGN	0.9560786003726633	WITHOUT_CLASSIFICATION	0.043921399627336696	DESIGN
use COUNT as the default. This mimics the old behavior, although NONE might be a better option moving forward in the case of callable	DESIGN	0.9769234488670855	WITHOUT_CLASSIFICATION	0.023076551132914572	DESIGN
TODO: joinKeyColumnName & foreignKeyColumnName should be called either here or at a slightly higer level in the stack (to get all the information we need) Right now HbmBinder does not support the	DESIGN	0.9778736982527189	DESIGN	0.022126301747281085	WITHOUT_CLASSIFICATION
TODO: suck this into initLaziness!	DESIGN	0.9478232786506152	DESIGN	0.052176721349384704	WITHOUT_CLASSIFICATION
we have to set up the table later!! yuck	DESIGN	0.9998447917779381	WITHOUT_CLASSIFICATION	1.5520822206188407E-4	DESIGN
TODO: better to degrade to lazy="false" if uninstrumented	DESIGN	0.958041201683926	DESIGN	0.04195879831607406	WITHOUT_CLASSIFICATION
todo : again, how should this work for non-pojo entities?	DESIGN	0.9943870742497183	WITHOUT_CLASSIFICATION	0.00561292575028163	DESIGN
TODO: this is a bit of copy/paste from IndexedCollection.createPrimaryKey()	DESIGN	0.9963004054780699	DESIGN	0.00369959452193017	WITHOUT_CLASSIFICATION
This inner class implements a case statement....perhaps im being a bit over-clever here	DESIGN	0.6959942442871463	WITHOUT_CLASSIFICATION	0.3040057557128539	DESIGN
TODO: bad implementation, cos it depends upon ordering of mapping doc fixing this requires that Collection/PersistentClass gain access to the Mappings reference from Configuration (or the filterDefinitions map directly) sometime during Configuration.buildSessionFactory (after all the types/filter-defs are known and before building persisters).	DESIGN	0.9040746334004798	DESIGN	0.09592536659952011	WITHOUT_CLASSIFICATION
use of a stringbuffer to workaround a JDK bug	DESIGN	0.9951720253812627	DESIGN	0.0048279746187373076	WITHOUT_CLASSIFICATION
hack/workaround as sqlquery impl depend on having a key.	DESIGN	0.9997025292734465	WITHOUT_CLASSIFICATION	2.9747072655342396E-4	DESIGN
FIXME: get the PersistentClass	DESIGN	0.6162967267384901	DESIGN	0.3837032732615098	WITHOUT_CLASSIFICATION
FIXME: get the PersistentClass	DESIGN	0.6162967267384901	DESIGN	0.3837032732615098	WITHOUT_CLASSIFICATION
Icky workaround for MySQL bug:	DESIGN	0.970192277926482	DESIGN	0.02980772207351803	WITHOUT_CLASSIFICATION
TODO: Somehow add the newly created foreign keys to the internal collection	DESIGN	0.7209232630942786	DESIGN	0.2790767369057213	WITHOUT_CLASSIFICATION
TODO possibly relax that	DESIGN	0.6665326914987197	WITHOUT_CLASSIFICATION	0.33346730850128037	DESIGN
TODO possibly relax that	DESIGN	0.6665326914987197	WITHOUT_CLASSIFICATION	0.33346730850128037	DESIGN
TODO possibly relax that	DESIGN	0.6665326914987197	WITHOUT_CLASSIFICATION	0.33346730850128037	DESIGN
use of a stringbuffer to workaround a JDK bug	DESIGN	0.9951720253812627	DESIGN	0.0048279746187373076	WITHOUT_CLASSIFICATION
use a degenerated strategy for backward compatibility	DESIGN	0.9993707962822862	WITHOUT_CLASSIFICATION	6.292037177137881E-4	DESIGN
Sets can be just a view of a part of another collection. do we need to copy it to be sure it won't be changing underneath us? ie. this.set.addAll(set);	DESIGN	0.9637460115847987	WITHOUT_CLASSIFICATION	0.03625398841520134	DESIGN
note that i parameter is now unused (delete it?)	DESIGN	0.8357200016123915	DESIGN	0.16427999838760854	WITHOUT_CLASSIFICATION
just to help out during the load (ugly, i know)	DESIGN	0.9997393646321335	WITHOUT_CLASSIFICATION	2.6063536786639734E-4	DESIGN
TODO : safe to interpret "map.remove(key) == null" as non-dirty?	DESIGN	0.9606822109357857	WITHOUT_CLASSIFICATION	0.039317789064214334	DESIGN
yick! need this for proper serialization/deserialization handling...	DESIGN	0.954036067491	WITHOUT_CLASSIFICATION	0.045963932509000015	DESIGN
TODO: get SQL rendering out of this package!	DESIGN	0.8430000066431197	DESIGN	0.15699999335688028	WITHOUT_CLASSIFICATION
TODO: get SQL rendering out of this package!	DESIGN	0.8430000066431197	DESIGN	0.15699999335688028	WITHOUT_CLASSIFICATION
yuck!	DESIGN	0.999627030731016	WITHOUT_CLASSIFICATION	3.7296926898392813E-4	DESIGN
TODO: get SQL rendering out of this package!	DESIGN	0.8430000066431197	DESIGN	0.15699999335688028	WITHOUT_CLASSIFICATION
TODO : not sure this is correct, could not find docs on how to do this.	DESIGN	0.9996862377811653	DESIGN	3.137622188348293E-4	WITHOUT_CLASSIFICATION
HSQL has no Blob/Clob support .... but just put these here for now!	DESIGN	0.9981148309959732	WITHOUT_CLASSIFICATION	0.001885169004026765	DESIGN
does this need holdlock also? : return tableName + " with (updlock, rowlock, holdlock)";	DESIGN	0.9982305223144565	WITHOUT_CLASSIFICATION	0.0017694776855435178	DESIGN
sql-server, at least needed this dropped after use; strange!	DESIGN	0.999401184881616	WITHOUT_CLASSIFICATION	5.98815118384003E-4	DESIGN
todo : is there really any reason to kkeep trying if this fails once?	DESIGN	0.9992292012165779	WITHOUT_CLASSIFICATION	7.707987834220627E-4	DESIGN
TBD should this be varbinary($1)? registerColumnType(Types.VARBINARY, "binary($1)");	DESIGN	0.689434528361834	DESIGN	0.3105654716381661	WITHOUT_CLASSIFICATION
is it necessary to register %exact since it can only appear in a where clause?	DESIGN	0.9991956035438113	WITHOUT_CLASSIFICATION	8.043964561887674E-4	DESIGN
xmlforest requires a new kind of function constructor	DESIGN	0.9990704326030773	WITHOUT_CLASSIFICATION	9.295673969227869E-4	DESIGN
Does this dialect support the ALTER TABLE syntax?	DESIGN	0.9772629817664731	WITHOUT_CLASSIFICATION	0.022737018233526862	DESIGN
Do we need to qualify index names with the schema name?	DESIGN	0.9998137637622021	WITHOUT_CLASSIFICATION	1.86236237798009E-4	DESIGN
Does this dialect support the UNIQUE column syntax?	DESIGN	0.9916378600083139	WITHOUT_CLASSIFICATION	0.008362139991686175	DESIGN
Does this dialect support check constraints?	DESIGN	0.979441684677604	WITHOUT_CLASSIFICATION	0.02055831532239605	DESIGN
Do we need to drop constraints before dropping tables in this dialect?	DESIGN	0.9846673224329789	WITHOUT_CLASSIFICATION	0.015332677567021115	DESIGN
Does this dialect support the FOR UPDATE syntax?	DESIGN	0.9658328344636135	WITHOUT_CLASSIFICATION	0.034167165536386476	DESIGN
Does this dialect support the Oracle-style FOR UPDATE NOWAIT syntax?	DESIGN	0.9658328344636135	WITHOUT_CLASSIFICATION	0.034167165536386476	DESIGN
Does this dialect support FOR UPDATE OF, allowing particular rows to be locked?	DESIGN	0.5528671197056694	WITHOUT_CLASSIFICATION	0.44713288029433074	DESIGN
note there is a wierd implementation in the client side	DESIGN	0.9999719770867939	WITHOUT_CLASSIFICATION	2.8022913206142955E-5	DESIGN
TODO: never reached, since getTypeName() actually throws an exception!	DESIGN	0.9285866463592374	WITHOUT_CLASSIFICATION	0.07141335364076264	DESIGN
todo : should we additionally check the current isolation mode explicitly?	DESIGN	0.9993657518929475	WITHOUT_CLASSIFICATION	6.342481070524937E-4	DESIGN
todo : remove this and just have subclasses use Isolater/IsolatedWork directly...	DESIGN	0.9978184948986514	WITHOUT_CLASSIFICATION	0.0021815051013486255	DESIGN
TODO: should orphans really be deleted during lock???	DESIGN	0.971160334481499	DESIGN	0.028839665518500934	WITHOUT_CLASSIFICATION
orphans should not be deleted during merge??	DESIGN	0.9854107371174482	WITHOUT_CLASSIFICATION	0.014589262882551787	DESIGN
orphans should not be deleted during copy??	DESIGN	0.9854107371174482	WITHOUT_CLASSIFICATION	0.014589262882551787	DESIGN
I suppose?	DESIGN	0.9973975123731345	WITHOUT_CLASSIFICATION	0.002602487626865529	DESIGN
TODO: suck this logic into the collection!	DESIGN	0.8391646504856574	DESIGN	0.16083534951434272	WITHOUT_CLASSIFICATION
TODO: an alternative is to check if the owner has changed; if it hasn't then get the ID from collection.getOwner()	DESIGN	0.897744170618844	WITHOUT_CLASSIFICATION	0.10225582938115597	DESIGN
TODO:refactor + make this method private	DESIGN	0.982895763925957	WITHOUT_CLASSIFICATION	0.017104236074043013	DESIGN
todo : we can actually just determine this from the incoming EntityEntry-s	DESIGN	0.9975118368992171	WITHOUT_CLASSIFICATION	0.0024881631007829183	DESIGN
TODO: Should this be an InitializeEntityEventListener??? (watch out for performance!)	DESIGN	0.9889038551166824	DESIGN	0.011096144883317624	WITHOUT_CLASSIFICATION
TODO: better to pass the id in as an argument?	DESIGN	0.6067295045199903	WITHOUT_CLASSIFICATION	0.39327049548000975	DESIGN
todo : potentially look at optimizing these two arrays	DESIGN	0.9929230508854753	WITHOUT_CLASSIFICATION	0.007076949114524669	DESIGN
trim done to workaround stupid oracle bug that cant handle whitespaces before a { in a sp	DESIGN	0.9999444406367024	DESIGN	5.555936329752189E-5	WITHOUT_CLASSIFICATION
trim done to workaround stupid oracle bug that cant handle whitespaces before a { in a sp	DESIGN	0.9999444406367024	DESIGN	5.555936329752189E-5	WITHOUT_CLASSIFICATION
TODO: temporary	DESIGN	0.9413895747482768	DESIGN	0.058610425251723275	WITHOUT_CLASSIFICATION
TODO: not quite sure about the full implications of this!	DESIGN	0.9702787594702351	DESIGN	0.02972124052976491	WITHOUT_CLASSIFICATION
TODO: not quite sure about the full implications of this!	DESIGN	0.9702787594702351	DESIGN	0.02972124052976491	WITHOUT_CLASSIFICATION
TODO: ugly here:	DESIGN	0.9792174611305307	DESIGN	0.020782538869469375	WITHOUT_CLASSIFICATION
this is kinda the best we can do...	DESIGN	0.9714877685013593	WITHOUT_CLASSIFICATION	0.02851223149864077	DESIGN
TODO: this needn't exclude subclasses...	DESIGN	0.7107926464591428	DESIGN	0.2892073535408572	WITHOUT_CLASSIFICATION
todo : need map? the prob is a proper key, right?	DESIGN	0.6532110527078092	DESIGN	0.34678894729219084	WITHOUT_CLASSIFICATION
todo : i'd much rather have this done from #endLoadingCollection(CollectionPersister,LoadingCollectionEntry)...	DESIGN	0.9910916711183925	WITHOUT_CLASSIFICATION	0.00890832888160752	DESIGN
todo : hack!!! NOTE : here we cleanup the load context when we have no more local LCE entries. This "works" for the time being because really only the collection load contexts are implemented. Long term, this cleanup should become part of the "close result set" processing from the (sandbox/jdbc) jdbc-container code.	DESIGN	0.599410617690852	DESIGN	0.400589382309148	WITHOUT_CLASSIFICATION
todo : should really move this log statement to CollectionType, where this is used from...	DESIGN	0.9916538108948897	DESIGN	0.008346189105110296	WITHOUT_CLASSIFICATION
TODO : keep seperate notions of QT[] here for shallow/non-shallow queries...	DESIGN	0.7161085081584524	DESIGN	0.28389149184154766	WITHOUT_CLASSIFICATION
TODO : add this info to the translator and aggregate it here...	DESIGN	0.7089693489387845	DESIGN	0.29103065106121545	WITHOUT_CLASSIFICATION
TODO: move into collection type, so we can use polymorphism!	DESIGN	0.9946427177481197	DESIGN	0.0053572822518802125	WITHOUT_CLASSIFICATION
todo : should we check the current isolation mode explicitly?	DESIGN	0.9993657518929475	WITHOUT_CLASSIFICATION	6.342481070524937E-4	DESIGN
TODO: suck into event class	DESIGN	0.9055061669764218	DESIGN	0.09449383302357817	WITHOUT_CLASSIFICATION
do we even really need this? the update will fail anyway....	DESIGN	0.924447435280035	WITHOUT_CLASSIFICATION	0.07555256471996492	DESIGN
hum ... should we cascade anyway? throw an exception? fine like it is?	DESIGN	0.8168492518476124	WITHOUT_CLASSIFICATION	0.1831507481523877	DESIGN
TODO: would it be better to do a refresh from db?	DESIGN	0.9905599367275136	DESIGN	0.00944006327248644	WITHOUT_CLASSIFICATION
TODO: we use two visitors here, inefficient!	DESIGN	0.9122483433298744	DESIGN	0.08775165667012562	WITHOUT_CLASSIFICATION
this class has no proxies (so do a shortcut)	DESIGN	0.993933391694693	WITHOUT_CLASSIFICATION	0.006066608305307051	DESIGN
PostLoad is needed for EJB3 TODO: reuse the PostLoadEvent...	DESIGN	0.8009144524687003	WITHOUT_CLASSIFICATION	0.19908554753129962	DESIGN
TODO: put this stuff back in to read snapshot from the second-level cache (needs some extra work)	DESIGN	0.9270648592905966	DESIGN	0.07293514070940342	WITHOUT_CLASSIFICATION
null or brand new collection this will also (inefficiently) handle arrays, which have no snapshot, so we can't do any better	DESIGN	0.9950855292680659	WITHOUT_CLASSIFICATION	0.00491447073193404	DESIGN
TODO: is this 100% correct?	DESIGN	0.9975289317320725	DESIGN	0.0024710682679275524	WITHOUT_CLASSIFICATION
TODO: iteratively get transient entities and retry merge until one of the following conditions: 1) transientCopyCache.size() == 0 2) transientCopyCache.size() is not decreasing and copyCache.size() is not increasing TODO: find out if retrying can add entities to copyCache (don't think it can...) For now, just retry once; throw TransientObjectException if there are still any transient entities	DESIGN	0.9277204483313305	DESIGN	0.07227955166866945	WITHOUT_CLASSIFICATION
entity name will not be available for non-POJO entities TODO: cache the entity name somewhere so that it is available to this exception	DESIGN	0.9990437336768562	DESIGN	9.562663231438005E-4	WITHOUT_CLASSIFICATION
TODO: we should throw an exception if we really know for sure that this is a detached instance, rather than just assuming throw new StaleObjectStateException(entityName, id);	DESIGN	0.9968198904615947	DESIGN	0.0031801095384052466	WITHOUT_CLASSIFICATION
TODO : perhaps we should additionally require that the incoming entity version be equivalent to the defined unsaved-value?	DESIGN	0.9844095369535326	DESIGN	0.015590463046467329	WITHOUT_CLASSIFICATION
perhaps this should be an exception since it is only ever used in the above method?	DESIGN	0.9399598132682007	DESIGN	0.060040186731799394	WITHOUT_CLASSIFICATION
Put a placeholder in entries, so we don't recurse back and try to save() the same object again. QUESTION: should this be done before onSave() is called? likewise, should it be done before onUpdate()?	DESIGN	0.8979410999983846	WITHOUT_CLASSIFICATION	0.10205890000161537	DESIGN
TODO: merge into one method!	DESIGN	0.9426717163968058	DESIGN	0.057328283603194065	WITHOUT_CLASSIFICATION
TODO: refactor to .sql package	DESIGN	0.9756106579047732	DESIGN	0.024389342095226783	WITHOUT_CLASSIFICATION
Provides query splitting methods, which were originally in QueryTranslator. <br> TODO: This will need to be refactored at some point. @author josh	DESIGN	0.9770854498385302	DESIGN	0.022914550161469753	WITHOUT_CLASSIFICATION
TODO: this is one of the ugliest and most fragile pieces of code in Hibernate....	DESIGN	0.939475436766929	DESIGN	0.06052456323307107	WITHOUT_CLASSIFICATION
todo : temporary needed because currently persister is the one that creates and renders the join fragments for inheritence hierarchies...	DESIGN	0.9990222587001804	WITHOUT_CLASSIFICATION	9.777412998196377E-4	DESIGN
TODO : better way?!?	DESIGN	0.9192994582451897	DESIGN	0.08070054175481037	WITHOUT_CLASSIFICATION
Not possible to simply re-use the versionPropertyNode here as it causes OOM errors due to circularity :(	DESIGN	0.9681792315234143	WITHOUT_CLASSIFICATION	0.03182076847658564	DESIGN
TODO:this is only needed during compilation .. can we eliminate the instvar?	DESIGN	0.9993327280218766	WITHOUT_CLASSIFICATION	6.672719781235547E-4	DESIGN
TODO : this is a bit dodgy, come up with a better way to check this (plus see above comment)	DESIGN	0.999765702575308	DESIGN	2.3429742469201567E-4	WITHOUT_CLASSIFICATION
even here, if only properties mapped to the "base table" are referenced in the set and where clauses, this could be handled by the BasicDelegate. TODO : decide if it is better performance-wise to perform that check, or to simply use the MultiTableUpdateDelegate	DESIGN	0.9999988816585691	DESIGN	1.118341430901212E-6	WITHOUT_CLASSIFICATION
TODO: switch statements are always evil! We already had bugs because of forgotten token types. Use polymorphism for this!	DESIGN	0.8436686845312877	WITHOUT_CLASSIFICATION	0.15633131546871226	DESIGN
TODO : we really need to be able to deal with component paths here also; this is difficult because the hql-sql grammar expects all those node types to be FromReferenceNodes. One potential fix here would be to convert the IntoClause to just use a FromClause/FromElement combo (as a child of the InsertStatement) and move all this logic into the InsertStatement. That's probably the easiest approach (read: least amount of changes to the grammar and code), but just doesn't feel right as then an insert would contain 2 from-clauses	DESIGN	0.9992068105445251	DESIGN	7.93189455474767E-4	WITHOUT_CLASSIFICATION
really there are two situations where it should be ok to allow the insertion into properties defined on a superclass: 1) union-subclass with an abstract root entity 2) discrim-subclass #1 is handled already because of the fact that UnionSubclassPersister alreay always returns 0 for this call... we may want to disallow it for discrim-subclass just for consistency-sake (currently does not work anyway)...	DESIGN	0.8667635331029333	DESIGN	0.13323646689706664	WITHOUT_CLASSIFICATION
yuck!	DESIGN	0.999627030731016	WITHOUT_CLASSIFICATION	3.7296926898392813E-4	DESIGN
implicit joins are always(?) ok to reuse	DESIGN	0.9997978476440254	WITHOUT_CLASSIFICATION	2.0215235597461896E-4	DESIGN
TODO : we may also want to check that the types here map to exactly one column/JDBC-type can't think of a situation where arithmetic expression between multi-column mappings makes any sense.	DESIGN	0.853334500772579	DESIGN	0.14666549922742103	WITHOUT_CLASSIFICATION
we do not know either type BLIND GUESS!	DESIGN	0.994962981542568	WITHOUT_CLASSIFICATION	0.00503701845743208	DESIGN
TODO: used to be exprNoParens! was this needed?	DESIGN	0.999999848714881	DESIGN	1.5128511895183257E-7	WITHOUT_CLASSIFICATION
TODO: Replace this with a more elegant solution.	DESIGN	0.9990822529008933	DESIGN	9.177470991067557E-4	WITHOUT_CLASSIFICATION
TODO: Should this really return null? If not, figure out something better to do here.	DESIGN	0.9993120503291443	DESIGN	6.879496708557676E-4	WITHOUT_CLASSIFICATION
TODO: get SQL rendering out of this package!	DESIGN	0.8430000066431197	DESIGN	0.15699999335688028	WITHOUT_CLASSIFICATION
yuck!	DESIGN	0.999627030731016	WITHOUT_CLASSIFICATION	3.7296926898392813E-4	DESIGN
ignore it; the incoming property could not be found so we cannot be sure what to do here. At the very least, the safest is to simply not apply any dereference toggling...	DESIGN	0.8398344955640755	DESIGN	0.16016550443592442	WITHOUT_CLASSIFICATION
TODO : most of below was taken verbatim from DotNode; should either delegate this logic or super-type it	DESIGN	0.7252880956298218	DESIGN	0.2747119043701783	WITHOUT_CLASSIFICATION
otherwise, a trim-specification and/or a trim-character have been specified; we need to decide which options are present and "do the right thing" should leading trim-characters be trimmed? should trailing trim-characters be trimmed? the trim-character the trim-source	DESIGN	0.9982832861485221	WITHOUT_CLASSIFICATION	0.0017167138514778222	DESIGN
todo: we should really just collect these from the various SelectExpressions, rather than regenerating here	DESIGN	0.5008755653150097	WITHOUT_CLASSIFICATION	0.4991244346849904	DESIGN
TODO: is this a bit ugly?	DESIGN	0.9973343671746661	DESIGN	0.0026656328253338818	WITHOUT_CLASSIFICATION
Need a better way to define the suffixes here...	DESIGN	0.8899161280790004	WITHOUT_CLASSIFICATION	0.11008387192099958	DESIGN
TODO: something much better - look at the type of the other expression! TODO: Have comparisonExpression and/or arithmeticExpression rules complete the resolution of boolean nodes.	DESIGN	0.9923971240729409	DESIGN	0.007602875927058984	WITHOUT_CLASSIFICATION
TODO : what amount of significant digits need to be supported here? - from the DecimalFormat docs: [significant digits] = [minimum integer digits] + [maximum fraction digits]	DESIGN	0.9316312593177634	DESIGN	0.06836874068223657	WITHOUT_CLASSIFICATION
Needed the "clazz_" check to work around union-subclasses TODO : is there a way to tell whether a persister is truly discrim-column based inheritence?	DESIGN	0.9947640438338968	DESIGN	0.005235956166103132	WITHOUT_CLASSIFICATION
We should actually rework this class to not implement Parser and just process path expressions in the most convenient way.	DESIGN	0.777529216096111	DESIGN	0.2224707839038889	WITHOUT_CLASSIFICATION
The class is now way to complex!	DESIGN	0.9987391963860637	WITHOUT_CLASSIFICATION	0.0012608036139362831	DESIGN
TODO: get SQL rendering out of here	DESIGN	0.7938753959370887	DESIGN	0.20612460406291128	WITHOUT_CLASSIFICATION
TODO: is there a better way?	DESIGN	0.9948307499619187	DESIGN	0.005169250038081404	WITHOUT_CLASSIFICATION
Must be done here because of side-effect! yuck...	DESIGN	0.9970395241541643	WITHOUT_CLASSIFICATION	0.0029604758458356816	DESIGN
name from a super query (a bit inelegant that it shows up here)	DESIGN	0.9777509398510831	WITHOUT_CLASSIFICATION	0.02224906014891698	DESIGN
We should reengineer this class so that, rather than the current ad - hoc linear approach to processing a stream of tokens, we instead build up a tree of expressions.	DESIGN	0.665923435912336	WITHOUT_CLASSIFICATION	0.33407656408766406	DESIGN
this is ugly here, but needed because its a subquery	DESIGN	0.9836404908933587	WITHOUT_CLASSIFICATION	0.016359509106641256	DESIGN
unhappy about this being public ... is there a better way?	DESIGN	0.5183842563398339	DESIGN	0.4816157436601661	WITHOUT_CLASSIFICATION
Make sure this is a defined parameter and check the incoming value type TODO: what should be the actual exception type here?	DESIGN	0.9997200159546921	DESIGN	2.799840453078863E-4	WITHOUT_CLASSIFICATION
TODO : this constructor form is only used from constructor directly below us; can it go away?	DESIGN	0.9995752832634426	DESIGN	4.2471673655746016E-4	WITHOUT_CLASSIFICATION
TODO: COPY/PASTE FROM SessionImpl, pull up!	DESIGN	0.5217454329937394	WITHOUT_CLASSIFICATION	0.4782545670062605	DESIGN
TODO : should remove this exposure and have all references to the session's batcher use the ConnectionManager.	DESIGN	0.9925235043581193	DESIGN	0.00747649564188068	WITHOUT_CLASSIFICATION
todo : should this get moved to PersistentContext? logically, is PersistentContext the "thing" to which an interceptor gets attached?	DESIGN	0.6066695114715692	WITHOUT_CLASSIFICATION	0.39333048852843083	DESIGN
TODO: what type?	DESIGN	0.9312279214884754	DESIGN	0.06877207851152459	WITHOUT_CLASSIFICATION
todo : should seriously consider not allowing a txn to begin from a child session can always route the request to the root session...	DESIGN	0.9647741882250177	WITHOUT_CLASSIFICATION	0.035225811774982234	DESIGN
short-circuit for performance...	DESIGN	0.9994567707304912	WITHOUT_CLASSIFICATION	5.432292695086641E-4	DESIGN
not absolutely necessary, but does help with aggressive release	DESIGN	0.9940813945322728	WITHOUT_CLASSIFICATION	0.005918605467727138	DESIGN
TODO : remove these last two as batcher is no longer managing connections	DESIGN	0.9196299606252784	DESIGN	0.08037003937472166	WITHOUT_CLASSIFICATION
work around a bug in all known connection pools....	DESIGN	0.817702772742426	WITHOUT_CLASSIFICATION	0.18229722725757394	DESIGN
TODO : make this the factory for "entity mode related" sessions; also means making this the target of transaction-synch and the thing that knows how to cascade things between related sessions At that point, perhaps this thing is a "SessionContext", and ConnectionManager is a "JDBCContext"? A "SessionContext" should live in the impl package...	DESIGN	0.9999586039041448	DESIGN	4.1396095855239885E-5	WITHOUT_CLASSIFICATION
TODO: does this really need to be here? does the collection already have it's own up-to-date snapshot?	DESIGN	0.999861901361819	DESIGN	1.380986381810309E-4	WITHOUT_CLASSIFICATION
TODO: the i==entitySpan-1 bit depends upon subclass implementation (very bad)	DESIGN	0.9925424992358047	DESIGN	0.0074575007641952745	WITHOUT_CLASSIFICATION
This form used from annotations (?). Essentially the same as the above using a resultset-mapping reference, but without cacheMode, readOnly, and comment. FIXME: annotations do not use it, so it can be remove from my POV @deprecated @param query The sql query string @param resultSetRef The result-set-mapping name @param querySpaces Any specified query spaces (used for auto-flushing) @param cacheable Whether the query results are cacheable @param cacheRegion If cacheable, the region into which to store the results @param timeout A JDBC-level timeout to be applied @param fetchSize A JDBC-level fetch-size to be applied @param flushMode The flush mode to use for this query @param parameterTypes parameter type map @param callable Does the query string represent a callable object (i.e., proc)	DESIGN	0.9999967150084451	DESIGN	3.28499155478721E-6	WITHOUT_CLASSIFICATION
todo : add the notion of enabled filters to the CacheKey to differentiate filtered collections from non-filtered; but CacheKey is currently used for both collections and entities; would ideally need to define two seperate ones; currently this works in conjuction with the check on DefaultInitializeCollectionEventHandler.initializeCollectionFromCache() (which makes sure to not read from cache with enabled filters). EARLY EXIT!!!!!	DESIGN	0.85119657480341	DESIGN	0.14880342519659	WITHOUT_CLASSIFICATION
for sets, we should end the collection load after resolving the entities, since we might call hashCode() on the elements TODO: or we could do this polymorphically, and have two different operations implemented differently for arrays	DESIGN	0.9998465159747558	DESIGN	1.534840252441975E-4	WITHOUT_CLASSIFICATION
This is not very nice (and quite slow):	DESIGN	0.9932536745289907	DESIGN	0.006746325471009354	WITHOUT_CLASSIFICATION
use of trim() here is ugly?	DESIGN	0.9915046397148406	WITHOUT_CLASSIFICATION	0.00849536028515935	DESIGN
TODO: this is too conservative; if all preceding joins were also inner joins, we could use an inner join here	DESIGN	0.9990743034897803	DESIGN	9.256965102196977E-4	WITHOUT_CLASSIFICATION
TODO: look at the owning property and check that it isn't lazy (by instrumentation)	DESIGN	0.7244308660935777	DESIGN	0.27556913390642235	WITHOUT_CLASSIFICATION
TODO: inefficient	DESIGN	0.5106718146379726	WITHOUT_CLASSIFICATION	0.4893281853620275	DESIGN
why does this matter?	DESIGN	0.9693810322374207	WITHOUT_CLASSIFICATION	0.03061896776257928	DESIGN
from the collection of associations, locate OJA for the ManyToOne corresponding to this persister to fully define the many-to-many; we need that OJA so that we can use its alias here TODO : is there a better way here?	DESIGN	0.9999711796798899	DESIGN	2.88203201100259E-5	WITHOUT_CLASSIFICATION
TODO: this class depends directly upon CriteriaImpl, in the impl package ... add a CriteriaImplementor interface	DESIGN	0.9985811714764998	DESIGN	0.0014188285235002202	WITHOUT_CLASSIFICATION
TODO: add a CriteriaImplementor interface this class depends directly upon CriteriaImpl in the impl package...	DESIGN	0.9754850667280638	DESIGN	0.024514933271936133	WITHOUT_CLASSIFICATION
TODO : not so sure this is needed...	DESIGN	0.8241618074278055	DESIGN	0.1758381925721945	WITHOUT_CLASSIFICATION
meant to handle dynamic instantiation queries...(Copy from QueryLoader)	DESIGN	0.9986933460133318	WITHOUT_CLASSIFICATION	0.0013066539866681587	DESIGN
TODO: The order in which entities are saved may matter (e.g., a particular transient entity may need to be saved before other transient entities can be saved; Keep retrying the batch of transient entities until either: 1) there are no transient entities left in transientCopyCache or 2) no transient entities were saved in the last batch For now, just run through the transient entities and retry the merge	DESIGN	0.7116481287505881	WITHOUT_CLASSIFICATION	0.28835187124941175	DESIGN
todo: this might really even be moved into the cfg package and used as the basis for all things which are configurable.	DESIGN	0.9978654448830586	DESIGN	0.002134555116941408	WITHOUT_CLASSIFICATION
todo : currently expects that the individual with expressions apply to the same sql table join. This may not be the case for joined-subclass where the property values might be coming from different tables in the joined hierarchy. At some point we should expand this to support that capability. However, that has some difficulties: 1) the biggest is how to handle ORs when the individual comparisons are linked to different sql joins. 2) here we would need to track each comparison individually, along with the join alias to which it applies and then pass that information back to the FromElement so it can pass it along to the JoinSequence	DESIGN	0.9838488085792636	WITHOUT_CLASSIFICATION	0.01615119142073642	DESIGN
this function has a template -> restore output, apply the template and write the result out TODO: Downcast to avoid using an interface? Yuck.	DESIGN	0.8915467948475345	WITHOUT_CLASSIFICATION	0.10845320515246548	DESIGN
at some point the generate phase needs to be moved out of here, because a single object-level DML might spawn multiple SQL DML command executions. Possible to just move the sql generation for dml stuff, but for consistency-sake probably best to just move responsiblity for the generation phase completely into the delegates (QueryLoader/StatementExecutor) themselves. Also, not sure why QueryLoader currently even has a dependency on this at all; does it need it? Ideally like to see the walker itself given to the delegates directly...	DESIGN	0.999999605969186	DESIGN	3.9403081390162266E-7	WITHOUT_CLASSIFICATION
get the right object from the list ... would it be easier to just call getEntity() ??	DESIGN	0.9794234420863441	WITHOUT_CLASSIFICATION	0.020576557913655872	DESIGN
TODO should we just collect these like with the collections above?	DESIGN	0.9956830364600808	DESIGN	0.004316963539919124	WITHOUT_CLASSIFICATION
todo : better to handle dynamic filters through implicit DynamicFilterParameterSpecification see the discussion there in DynamicFilterParameterSpecification's javadocs as to why it is currently not done that way.	DESIGN	0.5504653912609532	WITHOUT_CLASSIFICATION	0.44953460873904677	DESIGN
/ USED ONLY FOR REGRESSION TESTING!!!! todo : obviously get rid of all this junk ;) /	DESIGN	0.9967740353135116	WITHOUT_CLASSIFICATION	0.003225964686488468	DESIGN
create an index on the key columns??	DESIGN	0.9999912110926429	WITHOUT_CLASSIFICATION	8.788907357091697E-6	DESIGN
TODO: deprecated, remove eventually	DESIGN	0.6531681357643064	DESIGN	0.3468318642356936	WITHOUT_CLASSIFICATION
create an index on the key columns??	DESIGN	0.9999912110926429	WITHOUT_CLASSIFICATION	8.788907357091697E-6	DESIGN
TODO: improve this hack!	DESIGN	0.9915631189173882	DESIGN	0.008436881082611699	WITHOUT_CLASSIFICATION
inheritance cycle detection (paranoid check)	DESIGN	0.9990957932078093	WITHOUT_CLASSIFICATION	9.042067921907769E-4	DESIGN
TODO: remove use of instanceof!	DESIGN	0.9461222128756219	DESIGN	0.05387778712437805	WITHOUT_CLASSIFICATION
shortcut	DESIGN	0.9997467659339031	WITHOUT_CLASSIFICATION	2.532340660968637E-4	DESIGN
TODO: handle the case of a foreign key to something other than the pk	DESIGN	0.5417399314344153	DESIGN	0.4582600685655848	WITHOUT_CLASSIFICATION
create an index on the key columns??	DESIGN	0.9999912110926429	WITHOUT_CLASSIFICATION	8.788907357091697E-6	DESIGN
todo : remove	DESIGN	0.9989134224307462	WITHOUT_CLASSIFICATION	0.0010865775692538214	DESIGN
todo : remove	DESIGN	0.9989134224307462	WITHOUT_CLASSIFICATION	0.0010865775692538214	DESIGN
todo : remove	DESIGN	0.9989134224307462	WITHOUT_CLASSIFICATION	0.0010865775692538214	DESIGN
todo : throw exception?	DESIGN	0.9988989455716006	WITHOUT_CLASSIFICATION	0.0011010544283993312	DESIGN
todo : throw exception? maybe warn if not the same?	DESIGN	0.9966905491166567	WITHOUT_CLASSIFICATION	0.003309450883343434	DESIGN
TODO: make EntityPersister not depend on SessionFactoryImplementor interface, if possible	DESIGN	0.9622624502425734	DESIGN	0.03773754975742652	WITHOUT_CLASSIFICATION
TODO: is there a more elegant way than downcasting?	DESIGN	0.984116374600579	DESIGN	0.01588362539942103	WITHOUT_CLASSIFICATION
TODO: encapsulate the protected instance variables!	DESIGN	0.831520636095588	DESIGN	0.168479363904412	WITHOUT_CLASSIFICATION
should indicate that we are processing an INSERT/UPDATE/DELETE query with a subquery implied via a collection property function. Here, we need to use the table name itself as the qualification alias. TODO : verify this works for all databases... TODO : is this also the case in non-"indexed" scenarios?	DESIGN	0.974036903711514	DESIGN	0.02596309628848604	WITHOUT_CLASSIFICATION
TODO: copy/paste from insertRows()	DESIGN	0.6664751769663847	DESIGN	0.33352482303361536	WITHOUT_CLASSIFICATION
TODO: copy/paste from recreate()	DESIGN	0.6664751769663847	DESIGN	0.33352482303361536	WITHOUT_CLASSIFICATION
should this interface extend PropertyMapping?	DESIGN	0.9417046378115188	WITHOUT_CLASSIFICATION	0.05829536218848111	DESIGN
ie. the subquery! yuck!	DESIGN	0.9994618511503582	WITHOUT_CLASSIFICATION	5.381488496418563E-4	DESIGN
TODO: move to .sql package!!	DESIGN	0.9814103600217897	DESIGN	0.018589639978210254	WITHOUT_CLASSIFICATION
TODO: code duplication with SingleTableEntityPersister	DESIGN	0.825044230307391	DESIGN	0.17495576969260893	WITHOUT_CLASSIFICATION
TODO: It would be really, really nice to use this to also model components!	DESIGN	0.9996640341871309	DESIGN	3.3596581286908636E-4	WITHOUT_CLASSIFICATION
TODO: two hashmap lookups here is one too many...	DESIGN	0.9711599160192436	DESIGN	0.028840083980756343	WITHOUT_CLASSIFICATION
TODO: code duplication with JoinedSubclassEntityPersister	DESIGN	0.825044230307391	DESIGN	0.17495576969260893	WITHOUT_CLASSIFICATION
perhaps not really necessary...	DESIGN	0.7417652121201894	WITHOUT_CLASSIFICATION	0.25823478787981063	DESIGN
NOTE: this assumes something about how propertySelectFragment is implemented by the subclass! was toUnqotedAliasStrings( getIdentiferColumnNames() ) before - now tried to remove that unqoting and missing aliases..	DESIGN	0.9985110341897472	WITHOUT_CLASSIFICATION	0.0014889658102527636	DESIGN
NOTE: this assumes something about how propertySelectFragment is implemented by the subclass! was toUnqotedAliasStrings( getdiscriminatorColumnName() ) before - now tried to remove that unqoting and missing aliases..	DESIGN	0.9985110341897472	WITHOUT_CLASSIFICATION	0.0014889658102527636	DESIGN
TODO: should we use SELECT .. FOR UPDATE?	DESIGN	0.9869984061479938	DESIGN	0.0130015938520061	WITHOUT_CLASSIFICATION
TODO: optimize this better!	DESIGN	0.7441470752523119	DESIGN	0.255852924747688	WITHOUT_CLASSIFICATION
TODO: should we allow suffixes on these ?	DESIGN	0.9991389169778435	DESIGN	8.61083022156438E-4	WITHOUT_CLASSIFICATION
This is really ugly, but necessary:	DESIGN	0.9885671177405299	WITHOUT_CLASSIFICATION	0.011432882259470136	DESIGN
ugly little workaround for fact that createUniqueKeyLoaders() does not handle component properties	DESIGN	0.9962546936230597	DESIGN	0.00374530637694026	WITHOUT_CLASSIFICATION
TODO: disable batch loading if lockMode > READ?	DESIGN	0.9770729387138974	WITHOUT_CLASSIFICATION	0.022927061286102498	DESIGN
append the SQL to return the generated identifier TODO: suck into Insert	DESIGN	0.6668461502959803	DESIGN	0.33315384970401973	WITHOUT_CLASSIFICATION
TODO: I am not so sure about the exception handling in this bit!	DESIGN	0.9967623036919946	DESIGN	0.003237696308005408	WITHOUT_CLASSIFICATION
TODO: is this really necessary????	DESIGN	0.9698061923151253	DESIGN	0.0301938076848747	WITHOUT_CLASSIFICATION
TODO: move to .sql package, and refactor with similar things!	DESIGN	0.9654388461587033	DESIGN	0.034561153841296696	WITHOUT_CLASSIFICATION
TODO: implement functionality this might be painful to do here, as the "join post processing" for the subquery has already been performed (meaning that for theta-join dialects, the join conditions have already been moved over to the where clause). A "simple" solution here might to perform "join post processing" once for the entire query (including any subqueries) at one fell swoop	DESIGN	0.9999614682061995	DESIGN	3.853179380047624E-5	WITHOUT_CLASSIFICATION
todo : this eventually needs to be removed	DESIGN	0.9016389125223019	WITHOUT_CLASSIFICATION	0.09836108747769812	DESIGN
kinda ugly, but needed for collections with a "." node mapping	DESIGN	0.9999734502260448	WITHOUT_CLASSIFICATION	2.654977395530123E-5	DESIGN
is this ok?	DESIGN	0.9979345890988426	WITHOUT_CLASSIFICATION	0.0020654109011573776	DESIGN
TODO: perhaps this should be some other RuntimeException...	DESIGN	0.9999293547513263	DESIGN	7.064524867366484E-5	WITHOUT_CLASSIFICATION
TODO: make this a bit nicer	DESIGN	0.9945079620264407	DESIGN	0.005492037973559326	WITHOUT_CLASSIFICATION
Yuck:	DESIGN	0.99858329998701	WITHOUT_CLASSIFICATION	0.00141670001298997	DESIGN
TODO: we should provide some way to get keys of collection of statistics to make it easier to retrieve from a GUI perspective	DESIGN	0.999993604393836	DESIGN	6.395606164041759E-6	WITHOUT_CLASSIFICATION
@return collection removal FIXME: even if isInverse="true"?	DESIGN	0.9594008750494732	DESIGN	0.04059912495052669	WITHOUT_CLASSIFICATION
TODO : will need reference to session factory to fully complete HHH-1907	DESIGN	0.9911110811629584	DESIGN	0.008888918837041689	WITHOUT_CLASSIFICATION
TODO: currently keeps Getters and Setters (instead of PropertyAccessors) because of the way getGetter() and getSetter() are implemented currently; yuck!	DESIGN	0.9473504460990471	DESIGN	0.05264955390095308	WITHOUT_CLASSIFICATION
TODO: redesign how PropertyAccessors are acquired...	DESIGN	0.7902207334231999	DESIGN	0.2097792665768001	WITHOUT_CLASSIFICATION
todo : YUCK!!!	DESIGN	0.999770355105662	WITHOUT_CLASSIFICATION	2.2964489433789152E-4	DESIGN
TODO : YUCK!!! fix after HHH-1907 is complete	DESIGN	0.9871269054647616	DESIGN	0.01287309453523846	WITHOUT_CLASSIFICATION
TODO: need to make the majority of this functionality into a top-level support class for custom impl support	DESIGN	0.95764785135339	DESIGN	0.042352148646609945	WITHOUT_CLASSIFICATION
TODO: design new lifecycle for ProxyFactory	DESIGN	0.5513390830065882	WITHOUT_CLASSIFICATION	0.448660916993412	DESIGN
TODO: would be nice to handle proxy classes elegantly!	DESIGN	0.933482824391012	DESIGN	0.06651717560898786	WITHOUT_CLASSIFICATION
TODO: copy/paste from ManyToOneType	DESIGN	0.6664751769663847	DESIGN	0.33352482303361536	WITHOUT_CLASSIFICATION
TODO: should this be Session.instantiate(Persister, ...)?	DESIGN	0.9919058938984214	DESIGN	0.008094106101578532	WITHOUT_CLASSIFICATION
TODO: this is a bit arbitrary, expose a switch to the user?	DESIGN	0.993083483775141	DESIGN	0.006916516224859009	WITHOUT_CLASSIFICATION
TODO: implement caching?! proxies?!	DESIGN	0.9489205983143053	DESIGN	0.05107940168569467	WITHOUT_CLASSIFICATION
TODO: is this right??	DESIGN	0.9366350398596608	DESIGN	0.0633649601403391	WITHOUT_CLASSIFICATION
is this really necessary?	DESIGN	0.8568264020861389	WITHOUT_CLASSIFICATION	0.143173597913861	DESIGN
TODO: move these to a new JoinableType abstract class, extended by EntityType and PersistentCollectionType:	DESIGN	0.9982537302543009	DESIGN	0.0017462697456991202	WITHOUT_CLASSIFICATION
TODO: this is very suboptimal for some subclasses (namely components), since it does not take advantage of two-phase-load	DESIGN	0.9398672853017309	DESIGN	0.0601327146982692	WITHOUT_CLASSIFICATION
worrying about proxies is perhaps a little bit of overkill here...	DESIGN	0.7292304540853406	DESIGN	0.27076954591465946	WITHOUT_CLASSIFICATION
NOTE VERY HACKISH WORKAROUND!! TODO: Fix this so it will work for non-POJO entity mode	DESIGN	0.9951082800545359	DESIGN	0.004891719945464218	WITHOUT_CLASSIFICATION
TODO: Fix this so it will work for non-POJO entity mode	DESIGN	0.9957925574740025	DESIGN	0.004207442525997493	WITHOUT_CLASSIFICATION
We would probably refactor to have LogicParser (builds a tree of simple expressions connected by and, or, not), ExpressionParser (translates from OO terms like foo, foo.Bar, foo.Bar.Baz to SQL terms like FOOS.ID, FOOS.BAR_ID, etc) and PathExpressionParser (which does much the same thing it does now)	DESIGN	0.9941368214821696	WITHOUT_CLASSIFICATION	0.00586317851783039	DESIGN
TODO: this is a little inefficient, don't need to do a whole deep replaceElements() call	DESIGN	0.9993269558371279	DESIGN	6.730441628719689E-4	WITHOUT_CLASSIFICATION
workaround for WebLogic	DESIGN	0.9474169368277726	DESIGN	0.052583063172227336	WITHOUT_CLASSIFICATION
TODO: this dependency is kinda Bad	DESIGN	0.9931556635388801	DESIGN	0.006844336461119995	WITHOUT_CLASSIFICATION
ick!	DESIGN	0.999627030731016	WITHOUT_CLASSIFICATION	3.7296926898392813E-4	DESIGN
short cut check...	DESIGN	0.9992751789912	WITHOUT_CLASSIFICATION	7.24821008800063E-4	DESIGN
todo : move to StringHelper?	DESIGN	0.9877376587294904	WITHOUT_CLASSIFICATION	0.012262341270509621	DESIGN
yukky! Don't you have subclasses for that! TODO race conditions can happen here	DESIGN	0.8254787747743885	DESIGN	0.17452122522561145	WITHOUT_CLASSIFICATION
TODO: We probably should have a StatisticsNotPublishedException, to make it clean	DESIGN	0.9990986835648092	DESIGN	9.013164351908228E-4	WITHOUT_CLASSIFICATION
FIXME hack to work around fact that calling Node added = root.addChild( fqn ); doesn't properly set the version on the node	DESIGN	0.9999309964828251	DESIGN	6.900351717483036E-5	WITHOUT_CLASSIFICATION
TODO: I considered validating the presence of the TS cache here, but decided to defer unti getQueryCacheInstance() in case the cache is never actually used	DESIGN	0.9998898087692591	DESIGN	1.1019123074085442E-4	WITHOUT_CLASSIFICATION
need to do that here rather than in the save event listener to let the post insert events to have a id-filled entity when IDENTITY is used (EJB3)	DESIGN	0.9195072747627362	DESIGN	0.08049272523726379	WITHOUT_CLASSIFICATION
TODO: simply remove this override if we fix the above todos	DESIGN	0.9990361179852578	DESIGN	9.638820147422101E-4	WITHOUT_CLASSIFICATION
This, is used by SessionFactoryImpl to hand to the generated SessionImpl; was the only reason I could see that we cannot just use null as Settings.cacheProvider	DESIGN	0.9253079232342104	WITHOUT_CLASSIFICATION	0.07469207676578962	DESIGN
this is done here 'cos we might only know the type here (ugly!) TODO: improve this a lot:	DESIGN	0.9998482832369144	DESIGN	1.5171676308552054E-4	WITHOUT_CLASSIFICATION
todo : would love to have this work on a notification basis where the successful binding of an entity/subclass would emit a notification which the extendsQueue entries could react to...	DESIGN	0.9919684867360178	WITHOUT_CLASSIFICATION	0.008031513263982123	DESIGN
TODO : not sure the best way to handle this. The non-performant way :	DESIGN	0.8913334387932363	DESIGN	0.10866656120676363	WITHOUT_CLASSIFICATION
would be better to use the element-type to determine whether the old and the new are equal here; the problem being we do not necessarily have access to the element type in all cases	DESIGN	0.5349817933801234	DESIGN	0.46501820661987653	WITHOUT_CLASSIFICATION
This next bit is to allow for both unsaved-value="negative" and for "older" behavior where version number did not get seeded if it was already set in the object TODO: shift it into unsaved-value strategy	DESIGN	0.9999216444873262	DESIGN	7.835551267375516E-5	WITHOUT_CLASSIFICATION
merges don't cascade to uninitialized collections TODO: perhaps this does need to cascade after all....	DESIGN	0.9915039013579973	DESIGN	0.008496098642002634	WITHOUT_CLASSIFICATION
TODO: an alternative is to check if the owner has changed; if it hasn't then return collection.getOwner()	DESIGN	0.9273353292412058	WITHOUT_CLASSIFICATION	0.07266467075879428	DESIGN
it is possible that the tree-walking in OuterJoinLoader can get to an association defined by a subclass, in which case the property-ref might refer to a property defined on a subclass of the current class in this case, the table name is not known - this temporary solution assumes that the property-ref refers to a property of the subclass table that the association belongs to (a reasonable guess) TODO: fix this, add: OuterJoinLoadable.getSubclassPropertyTableName(String propertyName)	DESIGN	0.9999988243062866	DESIGN	1.1756937133696625E-6	WITHOUT_CLASSIFICATION
this only works because collection entries are kept in a sequenced map by persistence context (maybe we should do like entities and keep a separate sequences set...) TODO: calling entrySet on an IdentityMap is SLOW!!	DESIGN	0.9993781456656332	DESIGN	6.21854334366725E-4	WITHOUT_CLASSIFICATION
important, to account for newly saved entities in query todo : some kind of check for new status...	DESIGN	0.9995746817179278	WITHOUT_CLASSIFICATION	4.253182820720737E-4	DESIGN
brand new collection TODO: or an array!! we can't lock objects with arrays now??	DESIGN	0.5038819760505336	DESIGN	0.49611802394946636	WITHOUT_CLASSIFICATION
TODO: if object was an uninitialized proxy, this is inefficient, resulting in two SQL selects	DESIGN	0.5077785819293209	DESIGN	0.49222141807067904	WITHOUT_CLASSIFICATION
before cascade! TODO: should this be Session.instantiate(Persister, ...)?	DESIGN	0.9882068949545442	DESIGN	0.011793105045455938	WITHOUT_CLASSIFICATION
TODO : absolutely no usages of this constructor form; can it go away?	DESIGN	0.7483866921601097	DESIGN	0.2516133078398904	WITHOUT_CLASSIFICATION
todo : need to find a clean way to handle the "event source" role a seperate classs responsible for generating/dispatching events just duplicates most of the Session methods... passing around seperate reto interceptor, factory, actionQueue, and persistentContext is not manageable...	DESIGN	0.9865133771101138	DESIGN	0.013486622889886214	WITHOUT_CLASSIFICATION
todo : remove	DESIGN	0.9989134224307462	WITHOUT_CLASSIFICATION	0.0010865775692538214	DESIGN
aliasRefNode.resolve( false, false, aliasRefNode.getText() ); TODO: is it kosher to do it here? TODO: is it kosher to do it here?	DESIGN	0.8598037154934793	DESIGN	0.1401962845065207	WITHOUT_CLASSIFICATION
No explicit select expression; render the id and properties projection lists for every persister in the from clause into a single 'token node'. TODO: the only reason we need this stuff now is collection filters, we should get rid of derived select clause completely!	DESIGN	0.9966996387516429	DESIGN	0.0033003612483570124	WITHOUT_CLASSIFICATION
TODO : an optimization here would be to consider cascade deletes and not gen those delete statements; the difficulty is the ordering of the tables here vs the cascade attributes on the persisters -> the table info gotten here should really be self-contained (i.e., a class representation defining all the needed attributes), then we could then get an array of those	DESIGN	0.9997274569727644	DESIGN	2.7254302723556307E-4	WITHOUT_CLASSIFICATION
TODO: get SQL rendering out of here, create an AST for the join expressions. Use the SQL generator grammar to generate the SQL text for the index expression.	DESIGN	0.9975328622234391	WITHOUT_CLASSIFICATION	0.0024671377765608333	DESIGN
TODO : this really needs to be delayed unitl after we definitively know all node types where this is currently a problem is parameters for which where we cannot unequivocally resolve an expected type	DESIGN	0.9667010542060436	DESIGN	0.033298945793956404	WITHOUT_CLASSIFICATION
TODO: Figure out a better way to get the FROM elements in a proper tree structure. If this is not the destination of a many-to-many, add it as a child of the origin.	DESIGN	0.9986082383557277	DESIGN	0.001391761644272342	WITHOUT_CLASSIFICATION
work around that crazy issue where the tree contains "empty" FromElements (no text); afaict, this is caused by FromElementFactory.createCollectionJoin()	DESIGN	0.8044598228918655	WITHOUT_CLASSIFICATION	0.19554017710813457	DESIGN
TODO: this class does too many things! we need a different kind of path expression parser for each of the diffferent ways in which path expressions can occur	DESIGN	0.9904209607996461	DESIGN	0.009579039200353901	WITHOUT_CLASSIFICATION
real hacky... used to count the nesting of parentheses	DESIGN	0.9840883499010646	WITHOUT_CLASSIFICATION	0.015911650098935415	DESIGN
TODO : would be really nice to cache the spec on the query-def so as to not have to re-calc the hash; currently not doable though because of the resultset-ref stuff...	DESIGN	0.9017011171691507	DESIGN	0.09829888283084927	WITHOUT_CLASSIFICATION
for arrays, we should end the collection load before resolving the entities, since the actual array instances are not instantiated during loading TODO: or we could do this polymorphically, and have two different operations implemented differently for arrays	DESIGN	0.9943501921952508	DESIGN	0.005649807804749233	WITHOUT_CLASSIFICATION
polymorphism not really handled completely correctly, perhaps...well, actually its ok, assuming that the entity name used in the lookup is the same as the the one used here, which it will be	DESIGN	0.7248198063914315	WITHOUT_CLASSIFICATION	0.2751801936085686	DESIGN
TODO: should "record" how many properties we have reffered to - and if we don't get'em'all we throw an exception! Way better than trial and error ;)	DESIGN	0.9994735016221308	DESIGN	5.264983778691721E-4	WITHOUT_CLASSIFICATION
VERY IMPORTANT!!!! - This class needs to be free of any static references to any CGLIB or Javassist classes. Otherwise, users will always need both on their classpaths no matter which (if either) they use. Another option here would be to remove the Hibernate.isPropertyInitialized() method and have the users go through the SessionFactory to get this information.	DESIGN	0.9892079729319306	WITHOUT_CLASSIFICATION	0.010792027068069364	DESIGN
TODO: is it really neceassry to provide Configuration to CollectionPersisters ? Should it not be enough with associated class ? or why does EntityPersister's not get access to configuration ? The only reason I could see that Configuration gets passed to collection persisters is so that they can look up the dom4j node name of the entity element in case no explicit node name was applied at the collection element level. Are you kidding me? Trivial to fix then. Just store and expose the node name on the entity persister (which the collection persister looks up anyway via other means...).	DESIGN	0.9999999708636634	DESIGN	2.91363364804687E-8	WITHOUT_CLASSIFICATION
for backward compatibility, allow a set with no not-null element columns, using all columns in the row locater SQL TODO: create an implicit not null constraint on all cols?	DESIGN	0.8627493131778415	WITHOUT_CLASSIFICATION	0.13725068682215846	DESIGN
SPACES TODO: i'm not sure, but perhaps we should exclude abstract denormalized tables?	DESIGN	0.998999712809179	DESIGN	0.001000287190821053	WITHOUT_CLASSIFICATION
workaround, for backward compatibility of sets with no not-null columns, assume all columns are used in the row locator SQL	DESIGN	0.9999234976027199	WITHOUT_CLASSIFICATION	7.65023972800238E-5	DESIGN
note that this method could easily be moved up to BasicEntityPersister, if we ever needed to reuse it from other subclasses	DESIGN	0.8836607250416167	WITHOUT_CLASSIFICATION	0.1163392749583833	DESIGN
index += getPropertyColumnSpan( i ); TODO: this is kinda slow...	DESIGN	0.5625590028832982	DESIGN	0.4374409971167018	WITHOUT_CLASSIFICATION
TODO: need some caching scheme? really comes down to decision regarding amount of state (if any) kept on PropertyAccessors	DESIGN	0.8198878082152837	DESIGN	0.18011219178471627	WITHOUT_CLASSIFICATION
TODO: here is why we need to make bytecode provider global :( TODO : again, fix this after HHH-1907 is complete	DESIGN	0.9999998294617004	DESIGN	1.7053829957178378E-7	WITHOUT_CLASSIFICATION
TODO: Yuck! This is not quite good enough, it's a quick hack around the problem of having a to-one association that refers to an embedded component:	DESIGN	0.9999999999335215	DESIGN	6.647850715923627E-11	WITHOUT_CLASSIFICATION
for DOM4J "collections" only TODO: it would be better if this was done at the higher level by Printer	DESIGN	0.9608236918235785	DESIGN	0.03917630817642137	WITHOUT_CLASSIFICATION
would be great to move all this below here into another method that could also be used from the new scrolling stuff. Would need to change the way the max-row stuff is handled (i.e. behind an interface) so that I could do the control breaking at the means to know when to stop	DESIGN	0.9999999741685657	DESIGN	2.583143430428462E-8	WITHOUT_CLASSIFICATION
TODO: can we always use the "null property" approach for everything?	DESIGN	0.9838846269788959	DESIGN	0.016115373021104013	WITHOUT_CLASSIFICATION
polymorphism comment above	DESIGN	0.9999513163444417	WITHOUT_CLASSIFICATION	4.868365555824196E-5	DESIGN
some messy, complex stuff here, since createCriteria() can take an aliased path, or a path rooted at the creating criteria instance	DESIGN	0.9999992087213903	WITHOUT_CLASSIFICATION	7.912786098676291E-7	DESIGN
TODO: really bad, evil hack to fix!!!	DESIGN	0.9999997347489934	DESIGN	2.65251006670289E-7	WITHOUT_CLASSIFICATION
ugly hack for cases like "elements(foo.bar.collection)" (multi-part path expression ending in elements or indices)	DESIGN	0.9782168031641808	DESIGN	0.02178319683581919	WITHOUT_CLASSIFICATION
try block is a hack around fact that currently tuplizers are not given the opportunity to resolve a subclass entity name. this allows the (we assume custom) interceptor the ability to influence this decision if we were not able to based on the given entityName	DESIGN	0.9999922937355551	DESIGN	7.706264444862642E-6	WITHOUT_CLASSIFICATION
/ HACK ALERT !!!!!!!!!!!!!!!!!!!!!!!!!!!! Attempt to work around "ghost" ImpliedFromElements that occasionally show up between the actual things being joined. This consistently occurs from index nodes (at least against many-to-many). Not sure if there are other conditions Essentially, look-ahead to the next FromElement that actually writes something to the SQL	DESIGN	0.6273686435516175	DESIGN	0.37263135644838236	WITHOUT_CLASSIFICATION
init the table here instead of earlier, so that we can get a quoted table name TODO: would it be better to simply pass the qualified table name, instead of splitting it up into schema/catalog/table names	DESIGN	0.9891979610184589	DESIGN	0.010802038981541104	WITHOUT_CLASSIFICATION
TODO : would be great to have a Mapping#hasNonIdentifierPropertyNamedId method I don't believe that Mapping#getReferencedPropertyType accounts for the identifier property; so if it returns for a property named 'id', then we should have a non-id field named id	DESIGN	0.9954153511118887	DESIGN	0.004584648888111349	WITHOUT_CLASSIFICATION
TODO: is this really necessary????	DESIGN	0.9698061923151253	DESIGN	0.0301938076848747	WITHOUT_CLASSIFICATION
TODO: ideally we need the construction of PropertyAccessor to take the following: 1) EntityMode 2) EntityMode-specific data (i.e., the classname for pojo entities) 3) Property-specific data based on the EntityMode (i.e., property-name or dom4j-node-name) The easiest way, with the introduction of the new runtime-metamodel classes, would be the the following predicates: 1) PropertyAccessorFactory.getPropertyAccessor() takes references to both a org.hibernate.metadata.EntityModeMetadata and org.hibernate.metadata.Property 2) What is now termed a "PropertyAccessor" stores any values needed from those two pieces of information 3) Code can then simply call PropertyAccess.getGetter() with no parameters; likewise with PropertyAccessor.getSetter()	DESIGN	0.964843054365298	DESIGN	0.03515694563470188	WITHOUT_CLASSIFICATION
TODO: this is temporary in that the end result will probably not take a Property reference per-se.	DESIGN	0.9987301686982707	DESIGN	0.0012698313017293235	WITHOUT_CLASSIFICATION
todo : this eventually needs to be removed	DESIGN	0.9016389125223019	WITHOUT_CLASSIFICATION	0.09836108747769812	DESIGN
TODO: make this a bit nicer	DESIGN	0.9945079620264407	DESIGN	0.005492037973559326	WITHOUT_CLASSIFICATION
todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.7715264212094783	WITHOUT_CLASSIFICATION	0.22847357879052155	DESIGN
todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.7715264212094783	WITHOUT_CLASSIFICATION	0.22847357879052155	DESIGN
todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.7715264212094783	WITHOUT_CLASSIFICATION	0.22847357879052155	DESIGN
todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.7715264212094783	WITHOUT_CLASSIFICATION	0.22847357879052155	DESIGN
todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.7715264212094783	WITHOUT_CLASSIFICATION	0.22847357879052155	DESIGN
todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.7715264212094783	WITHOUT_CLASSIFICATION	0.22847357879052155	DESIGN
todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.7715264212094783	WITHOUT_CLASSIFICATION	0.22847357879052155	DESIGN
todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.7715264212094783	WITHOUT_CLASSIFICATION	0.22847357879052155	DESIGN
FIXME Per the RegionFactory class Javadoc, this constructor version should not be necessary. @param props The configuration properties	DESIGN	0.9972810416271258	DESIGN	0.002718958372874143	WITHOUT_CLASSIFICATION
FIXME Per the RegionFactory class Javadoc, this constructor version should not be necessary. @param props The configuration properties	DESIGN	0.9972810416271258	DESIGN	0.002718958372874143	WITHOUT_CLASSIFICATION
FIXME Per the RegionFactory class Javadoc, this constructor version should not be necessary. @param props The configuration properties	DESIGN	0.9972810416271258	DESIGN	0.002718958372874143	WITHOUT_CLASSIFICATION
TODO : probably better to calculate these and pass them in, as it'll be more performant	DESIGN	0.9990468386291333	DESIGN	9.531613708667246E-4	WITHOUT_CLASSIFICATION
