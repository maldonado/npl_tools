test out the optimizer:	WITHOUT_CLASSIFICATION	0.9999968618510112	WITHOUT_CLASSIFICATION	3.13814898885411E-6	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9999113734108903	WITHOUT_CLASSIFICATION	8.862658910963415E-5	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9999113734108903	WITHOUT_CLASSIFICATION	8.862658910963415E-5	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9999113734108903	WITHOUT_CLASSIFICATION	8.862658910963415E-5	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9999113734108903	WITHOUT_CLASSIFICATION	8.862658910963415E-5	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9999113734108903	WITHOUT_CLASSIFICATION	8.862658910963415E-5	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9999113734108903	WITHOUT_CLASSIFICATION	8.862658910963415E-5	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9999113734108903	WITHOUT_CLASSIFICATION	8.862658910963415E-5	DESIGN
return	WITHOUT_CLASSIFICATION	0.9999326546623389	WITHOUT_CLASSIFICATION	6.734533766110252E-5	DESIGN
return	WITHOUT_CLASSIFICATION	0.9999326546623389	WITHOUT_CLASSIFICATION	6.734533766110252E-5	DESIGN
| this | bean | args | raw bean |	WITHOUT_CLASSIFICATION	0.9989382400052749	WITHOUT_CLASSIFICATION	0.001061759994725175	DESIGN
invokeinterface	WITHOUT_CLASSIFICATION	0.9999530626110165	WITHOUT_CLASSIFICATION	4.693738898349722E-5	DESIGN
astore 4 store the raw bean	WITHOUT_CLASSIFICATION	0.9999723893552637	WITHOUT_CLASSIFICATION	2.7610644736320564E-5	DESIGN
current stack len = 0	WITHOUT_CLASSIFICATION	0.9999972506291964	WITHOUT_CLASSIFICATION	2.7493708035105842E-6	DESIGN
current stack len = 0	WITHOUT_CLASSIFICATION	0.9999972506291964	WITHOUT_CLASSIFICATION	2.7493708035105842E-6	DESIGN
local variables | target obj | each oldvalue |	WITHOUT_CLASSIFICATION	0.9993019489247589	WITHOUT_CLASSIFICATION	6.980510752410202E-4	DESIGN
invokeinterface invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9994482197480207	WITHOUT_CLASSIFICATION	5.517802519792751E-4	DESIGN
putfield new value of the field	WITHOUT_CLASSIFICATION	0.9998555464065007	WITHOUT_CLASSIFICATION	1.4445359349938054E-4	DESIGN
reference type	WITHOUT_CLASSIFICATION	0.9999281187292245	WITHOUT_CLASSIFICATION	7.188127077551429E-5	DESIGN
double	WITHOUT_CLASSIFICATION	0.9999707034567491	WITHOUT_CLASSIFICATION	2.9296543250818308E-5	DESIGN
double	WITHOUT_CLASSIFICATION	0.9999707034567491	WITHOUT_CLASSIFICATION	2.9296543250818308E-5	DESIGN
long	WITHOUT_CLASSIFICATION	0.9999005646293352	WITHOUT_CLASSIFICATION	9.943537066481556E-5	DESIGN
just decrement the lock, don't recache (we don't know which transaction won)	WITHOUT_CLASSIFICATION	0.9998879583826542	WITHOUT_CLASSIFICATION	1.1204161734572713E-4	DESIGN
decode row selection...	WITHOUT_CLASSIFICATION	0.9999646219116847	WITHOUT_CLASSIFICATION	3.537808831540394E-5	DESIGN
disassembled state gets put in a new array (we write to cache by value!)	WITHOUT_CLASSIFICATION	0.9973202833653663	WITHOUT_CLASSIFICATION	0.0026797166346337587	DESIGN
again, CCS did not have such a concept; but a reasonable proximity is to clear the cache after transaction as long as the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999102338106904	WITHOUT_CLASSIFICATION	8.976618930956624E-5	DESIGN
CHECK	WITHOUT_CLASSIFICATION	0.9999113734108903	WITHOUT_CLASSIFICATION	8.862658910963415E-5	DESIGN
ROW ID	WITHOUT_CLASSIFICATION	0.9998894813088255	WITHOUT_CLASSIFICATION	1.1051869117454865E-4	DESIGN
COMPOSITE-ID	WITHOUT_CLASSIFICATION	0.9999530626110165	WITHOUT_CLASSIFICATION	4.693738898349722E-5	DESIGN
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999530626110165	WITHOUT_CLASSIFICATION	4.693738898349722E-5	DESIGN
Property prop = new Property(); prop.setName("id"); prop.setPropertyAccessorName("embedded"); prop.setValue(id); entity.setIdentifierProperty(prop);	WITHOUT_CLASSIFICATION	0.999930254736828	WITHOUT_CLASSIFICATION	6.974526317200047E-5	DESIGN
DYNAMIC INSERT	WITHOUT_CLASSIFICATION	0.9999530626110165	WITHOUT_CLASSIFICATION	4.693738898349722E-5	DESIGN
PERSISTER	WITHOUT_CLASSIFICATION	0.9999113734108903	WITHOUT_CLASSIFICATION	8.862658910963415E-5	DESIGN
get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999616844569924	WITHOUT_CLASSIFICATION	3.8315543007672614E-5	DESIGN
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999113734108903	WITHOUT_CLASSIFICATION	8.862658910963415E-5	DESIGN
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999113734108903	WITHOUT_CLASSIFICATION	8.862658910963415E-5	DESIGN
generated properties can never be insertable...	WITHOUT_CLASSIFICATION	0.9997253592977388	WITHOUT_CLASSIFICATION	2.7464070226121515E-4	DESIGN
TABLE	WITHOUT_CLASSIFICATION	0.9999113734108903	WITHOUT_CLASSIFICATION	8.862658910963415E-5	DESIGN
by default, natural-ids are "immutable" (constant)	WITHOUT_CLASSIFICATION	0.9987547200774848	WITHOUT_CLASSIFICATION	0.0012452799225152033	DESIGN
( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9993303083605471	WITHOUT_CLASSIFICATION	6.696916394529558E-4	DESIGN
we found some extends attributes referencing entities which were not already processed. here we need to locate all entity-names and class-names contained in this document itself, making sure that these get removed from the extendz list such that only extends names which require us to delay processing (i.e. external to this document and not yet processed) are contained in the returned result	WITHOUT_CLASSIFICATION	0.980822950367826	WITHOUT_CLASSIFICATION	0.019177049632174026	DESIGN
Build a ResultSetMappingDefinition given a containing element for the "return-XXX" elements @param resultSetElem The element containing the return definitions. @param path No clue... @param mappings The current processing state. @return The description of the mappings...	WITHOUT_CLASSIFICATION	0.999322353462272	WITHOUT_CLASSIFICATION	6.77646537728006E-4	DESIGN
private boolean showSql; private boolean formatSql;	WITHOUT_CLASSIFICATION	0.9996576916188453	WITHOUT_CLASSIFICATION	3.423083811546544E-4	DESIGN
public boolean isShowSqlEnabled() { return showSql; } public boolean isFormatSqlEnabled() { return formatSql; }	WITHOUT_CLASSIFICATION	0.9997353430863137	WITHOUT_CLASSIFICATION	2.6465691368630516E-4	DESIGN
Set a custom entity resolver. This entity resolver must be set before addXXX(misc) call. Default value is {@link org.hibernate.util.DTDEntityResolver} @param entityResolver entity resolver to use	WITHOUT_CLASSIFICATION	0.899984043202898	WITHOUT_CLASSIFICATION	0.10001595679710204	DESIGN
final List extendsQueue,	WITHOUT_CLASSIFICATION	0.9999554305760388	WITHOUT_CLASSIFICATION	4.456942396124136E-5	DESIGN
If close() is called, guarantee unbind()	WITHOUT_CLASSIFICATION	0.9996991280203599	WITHOUT_CLASSIFICATION	3.0087197964022064E-4	DESIGN
if a ThreadLocalSessionContext-bound session happens to get serialized, to be completely correct, we need to make sure that unbinding of that session occurs.	WITHOUT_CLASSIFICATION	0.9240972906405251	WITHOUT_CLASSIFICATION	0.07590270935947481	DESIGN
on the inverse, it makes sense that if a ThreadLocalSessionContext- bound session then gets deserialized to go ahead and re-bind it to the ThreadLocalSessionContext session map.	WITHOUT_CLASSIFICATION	0.9952590186230169	WITHOUT_CLASSIFICATION	0.004740981376983105	DESIGN
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999567356535347	WITHOUT_CLASSIFICATION	4.32643464652935E-5	DESIGN
60 second lock timeout	WITHOUT_CLASSIFICATION	0.9999565626201701	WITHOUT_CLASSIFICATION	4.343737982983548E-5	DESIGN
OptimisticCache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994226996701397	WITHOUT_CLASSIFICATION	5.773003298601926E-4	DESIGN
Cache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994226996701397	WITHOUT_CLASSIFICATION	5.773003298601926E-4	DESIGN
option.setDataVersion( NonLockingDataVersion.INSTANCE );	WITHOUT_CLASSIFICATION	0.9994226996701397	WITHOUT_CLASSIFICATION	5.773003298601926E-4	DESIGN
do the put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9987856999965361	WITHOUT_CLASSIFICATION	0.0012143000034638548	DESIGN
ignore!	WITHOUT_CLASSIFICATION	0.9999113734108903	WITHOUT_CLASSIFICATION	8.862658910963415E-5	DESIGN
tree cache in optimistic mode seems to have as very difficult time with remove calls on non-existent nodes (NPEs)...	WITHOUT_CLASSIFICATION	0.9998975617976311	WITHOUT_CLASSIFICATION	1.0243820236881364E-4	DESIGN
60 seconds	WITHOUT_CLASSIFICATION	0.9999113734108903	WITHOUT_CLASSIFICATION	8.862658910963415E-5	DESIGN
ignore!	WITHOUT_CLASSIFICATION	0.9999113734108903	WITHOUT_CLASSIFICATION	8.862658910963415E-5	DESIGN
60 seconds	WITHOUT_CLASSIFICATION	0.9999113734108903	WITHOUT_CLASSIFICATION	8.862658910963415E-5	DESIGN
do the failfast put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9987856999965361	WITHOUT_CLASSIFICATION	0.0012143000034638548	DESIGN
NOTE : evict() operates locally only (i.e., does not propogate to any other nodes in the potential cluster). This is exactly what is needed when we destroy() here; destroy() is used as part of the process of shutting down a SessionFactory; thus these removals should not be propogated	WITHOUT_CLASSIFICATION	0.7767399638245653	WITHOUT_CLASSIFICATION	0.2232600361754347	DESIGN
protected RegionRootListener listener;	WITHOUT_CLASSIFICATION	0.9991419168135849	WITHOUT_CLASSIFICATION	8.58083186415037E-4	DESIGN
Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.999192568978416	WITHOUT_CLASSIFICATION	8.074310215839652E-4	DESIGN
If we've been blocking for the mutex, perhaps another thread has already reestablished the root. In case the node was reestablised via replication, confirm it's marked "resident" (a status which doesn't replicate)	WITHOUT_CLASSIFICATION	0.9999899646272394	WITHOUT_CLASSIFICATION	1.0035372760610698E-5	DESIGN
For pessimistic locking, we just want to toss out our ref to any old invalid root node and get the latest (may be null)	WITHOUT_CLASSIFICATION	0.9995170296578862	WITHOUT_CLASSIFICATION	4.8297034211381183E-4	DESIGN
The rest only matters for optimistic locking, where we need to establish the proper data version on the region root	WITHOUT_CLASSIFICATION	0.9764283108169565	WITHOUT_CLASSIFICATION	0.02357168918304349	DESIGN
Don't hold a transactional lock for this	WITHOUT_CLASSIFICATION	0.9740591220053402	WITHOUT_CLASSIFICATION	0.025940877994659762	DESIGN
Make sure the root node for the region exists and has a DataVersion that never complains	WITHOUT_CLASSIFICATION	0.9995254780147403	WITHOUT_CLASSIFICATION	4.745219852597226E-4	DESIGN
Never evict this node	WITHOUT_CLASSIFICATION	0.9999225051613143	WITHOUT_CLASSIFICATION	7.749483868572443E-5	DESIGN
Fix up the resident flag	WITHOUT_CLASSIFICATION	0.9999890314059546	WITHOUT_CLASSIFICATION	1.0968594045368332E-5	DESIGN
60 seconds	WITHOUT_CLASSIFICATION	0.9999113734108903	WITHOUT_CLASSIFICATION	8.862658910963415E-5	DESIGN
We ignore minimalPutOverride. JBossCache putForExternalRead is already about as minimal as we can get; it will promptly return if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9980537860968228	WITHOUT_CLASSIFICATION	0.0019462139031772225	DESIGN
no-op. We don't own the cache so we shouldn't stop it.	WITHOUT_CLASSIFICATION	0.9969263915964486	WITHOUT_CLASSIFICATION	0.0030736084035514546	DESIGN
This should only be possible if the caches are constructor injected	WITHOUT_CLASSIFICATION	0.9974721958803612	WITHOUT_CLASSIFICATION	0.002527804119638947	DESIGN
We only build caches if none were passed in. Passing in caches counts as a clear statement of exactly what is wanted	WITHOUT_CLASSIFICATION	0.9984152724295408	WITHOUT_CLASSIFICATION	0.0015847275704592347	DESIGN
Set up the cache factory	WITHOUT_CLASSIFICATION	0.9999483656666349	WITHOUT_CLASSIFICATION	5.1634333365010605E-5	DESIGN
See if the user configured a multiplexer stack	WITHOUT_CLASSIFICATION	0.999632506885334	WITHOUT_CLASSIFICATION	3.6749311466595657E-4	DESIGN
Default to collections sharing entity cache if there is one	WITHOUT_CLASSIFICATION	0.9995001835487904	WITHOUT_CLASSIFICATION	4.998164512096069E-4	DESIGN
Default to sharing the entity cache if there is one	WITHOUT_CLASSIFICATION	0.9998096466693258	WITHOUT_CLASSIFICATION	1.903533306741592E-4	DESIGN
For Timestamps, we default to a separate config	WITHOUT_CLASSIFICATION	0.9926944913817898	WITHOUT_CLASSIFICATION	0.007305508618210245	DESIGN
We can't change the TM on a running cache; just check if the cache has no TM and we're OK with that	WITHOUT_CLASSIFICATION	0.9998057804820101	WITHOUT_CLASSIFICATION	1.9421951798995183E-4	DESIGN
Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9993747270124658	WITHOUT_CLASSIFICATION	6.252729875341347E-4	DESIGN
Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9998953863821066	WITHOUT_CLASSIFICATION	1.0461361789334804E-4	DESIGN
This method should be implemented assuming it's valid to do start/stop/start -- leave state appropriate for another start	WITHOUT_CLASSIFICATION	0.5740268212836014	WITHOUT_CLASSIFICATION	0.4259731787163987	DESIGN
Make sure we don't re-release the same cache	WITHOUT_CLASSIFICATION	0.9991481262791783	WITHOUT_CLASSIFICATION	8.518737208217488E-4	DESIGN
We use a different delegate than the non-optimistic superclass default	WITHOUT_CLASSIFICATION	0.9985962035192302	WITHOUT_CLASSIFICATION	0.0014037964807698188	DESIGN
Following methods we don't delegate since they have so little logic it's clearer to just implement them here	WITHOUT_CLASSIFICATION	0.9510617974217335	WITHOUT_CLASSIFICATION	0.048938202578266476	DESIGN
If JBC is using INVALIDATION, we don't want to propagate changes. We use the Timestamps cache to manage invalidation	WITHOUT_CLASSIFICATION	0.9985889853918998	WITHOUT_CLASSIFICATION	0.0014110146081002671	DESIGN
We don't want to waste effort setting an option if JBC is already in LOCAL mode. If JBC is REPL_(A)SYNC then check if they passed an config option to disable query replication	WITHOUT_CLASSIFICATION	0.9985909187247792	WITHOUT_CLASSIFICATION	0.001409081275220789	DESIGN
Don't hold the JBC node lock throughout the tx, as that prevents updates Add a zero (or low) timeout option so we don't block waiting for tx's that did a put to commit	WITHOUT_CLASSIFICATION	0.9995077932724896	WITHOUT_CLASSIFICATION	4.922067275104664E-4	DESIGN
Double check the distributed cache	WITHOUT_CLASSIFICATION	0.9999710469831325	WITHOUT_CLASSIFICATION	2.8953016867395998E-5	DESIGN
Get an exclusive right to update JBC for this key from this node.	WITHOUT_CLASSIFICATION	0.9948833500247322	WITHOUT_CLASSIFICATION	0.00511664997526784	DESIGN
We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9985777385359605	WITHOUT_CLASSIFICATION	0.00142226146403947	DESIGN
Initial load from JBC	WITHOUT_CLASSIFICATION	0.9999243937341565	WITHOUT_CLASSIFICATION	7.560626584344156E-5	DESIGN
See if we had a 2nd invalidation from the same initial preinvalidation timestamp. If so, only increment if the new current value is an increase	WITHOUT_CLASSIFICATION	0.9999035100720435	WITHOUT_CLASSIFICATION	9.648992795654825E-5	DESIGN
We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9985777385359605	WITHOUT_CLASSIFICATION	0.00142226146403947	DESIGN
If the workspace node has null as well, OK; if not we've been modified in a non-comparable manner, which we have to treat as us being newer	WITHOUT_CLASSIFICATION	0.9997767486195518	WITHOUT_CLASSIFICATION	2.232513804481301E-4	DESIGN
The standard comparator types are not Serializable but are singletons	WITHOUT_CLASSIFICATION	0.999362963777385	WITHOUT_CLASSIFICATION	6.370362226149618E-4	DESIGN
ignore!	WITHOUT_CLASSIFICATION	0.9999113734108903	WITHOUT_CLASSIFICATION	8.862658910963415E-5	DESIGN
ignore it	WITHOUT_CLASSIFICATION	0.9998552426026608	WITHOUT_CLASSIFICATION	1.4475739733930618E-4	DESIGN
construct the cache	WITHOUT_CLASSIFICATION	0.9999796973370894	WITHOUT_CLASSIFICATION	2.0302662910650875E-5	DESIGN
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9902814203416096	WITHOUT_CLASSIFICATION	0.009718579658390377	DESIGN
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9902814203416096	WITHOUT_CLASSIFICATION	0.009718579658390377	DESIGN
ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999530626110165	WITHOUT_CLASSIFICATION	4.693738898349722E-5	DESIGN
swaldman 2006-08-28: define c3p0-style configuration parameters for initialPoolSize, which hibernate sensibly lets default to minPoolSize, but we'll let users override it with the c3p0-style property if they want.	WITHOUT_CLASSIFICATION	0.9953283072958069	WITHOUT_CLASSIFICATION	0.004671692704193009	DESIGN
DataSource unpooled = DataSources.unpooledDataSource(jdbcUrl, props.getProperty(Environment.USER), props.getProperty(Environment.PASS));	WITHOUT_CLASSIFICATION	0.999921261100112	WITHOUT_CLASSIFICATION	7.873889988796204E-5	DESIGN
TRUE if the pool is borrowed from the outside, FALSE if we used to create it	WITHOUT_CLASSIFICATION	0.9947901678118974	WITHOUT_CLASSIFICATION	0.00520983218810254	DESIGN
get a connection from the pool (thru DriverManager, cfr. Proxool doc)	WITHOUT_CLASSIFICATION	0.9993114826153577	WITHOUT_CLASSIFICATION	6.885173846423026E-4	DESIGN
set the Transaction Isolation if defined	WITHOUT_CLASSIFICATION	0.9998323116138254	WITHOUT_CLASSIFICATION	1.6768838617471995E-4	DESIGN
toggle autoCommit to false if set	WITHOUT_CLASSIFICATION	0.9963457535778805	WITHOUT_CLASSIFICATION	0.003654246422119507	DESIGN
return the connection	WITHOUT_CLASSIFICATION	0.9999884720915885	WITHOUT_CLASSIFICATION	1.152790841156628E-5	DESIGN
Get the configurator files (if available)	WITHOUT_CLASSIFICATION	0.9999114288503279	WITHOUT_CLASSIFICATION	8.857114967202983E-5	DESIGN
Default the Proxool alias setting	WITHOUT_CLASSIFICATION	0.999867227359821	WITHOUT_CLASSIFICATION	1.3277264017895376E-4	DESIGN
Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9939599123933963	WITHOUT_CLASSIFICATION	0.006040087606603741	DESIGN
Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9939599123933963	WITHOUT_CLASSIFICATION	0.006040087606603741	DESIGN
Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9992700838476464	WITHOUT_CLASSIFICATION	7.299161523535915E-4	DESIGN
Set the existing pool flag to true	WITHOUT_CLASSIFICATION	0.9987391480061822	WITHOUT_CLASSIFICATION	0.001260851993817821	DESIGN
Configured using the JAXP Configurator	WITHOUT_CLASSIFICATION	0.999907104962601	WITHOUT_CLASSIFICATION	9.289503739902742E-5	DESIGN
Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9939599123933963	WITHOUT_CLASSIFICATION	0.006040087606603741	DESIGN
Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9992700838476464	WITHOUT_CLASSIFICATION	7.299161523535915E-4	DESIGN
Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9992700838476464	WITHOUT_CLASSIFICATION	7.299161523535915E-4	DESIGN
Configured using the Properties File Configurator	WITHOUT_CLASSIFICATION	0.9996751154505137	WITHOUT_CLASSIFICATION	3.24884549486306E-4	DESIGN
Remember Isolation level	WITHOUT_CLASSIFICATION	0.9999625877241866	WITHOUT_CLASSIFICATION	3.7412275813448625E-5	DESIGN
If the provider was leeching off an existing pool don't close it	WITHOUT_CLASSIFICATION	0.9999793273769838	WITHOUT_CLASSIFICATION	2.0672623016202706E-5	DESIGN
We have created the pool ourselves, so shut it down	WITHOUT_CLASSIFICATION	0.9999669202025161	WITHOUT_CLASSIFICATION	3.307979748393613E-5	DESIGN
not really a many-to-one association necessarily	WITHOUT_CLASSIFICATION	0.9994188462654132	WITHOUT_CLASSIFICATION	5.811537345867899E-4	DESIGN
not really a many-to-one association necessarily	WITHOUT_CLASSIFICATION	0.9994188462654132	WITHOUT_CLASSIFICATION	5.811537345867899E-4	DESIGN
always overwrite nonversioned data	WITHOUT_CLASSIFICATION	0.9997211142702982	WITHOUT_CLASSIFICATION	2.7888572970172595E-4	DESIGN
public Currency getCurrency(int col) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9992026414458764	WITHOUT_CLASSIFICATION	7.973585541235195E-4	DESIGN
default is POJO	WITHOUT_CLASSIFICATION	0.9999376225394547	WITHOUT_CLASSIFICATION	6.237746054531379E-5	DESIGN
use setParameter for null values	WITHOUT_CLASSIFICATION	0.9991725805102759	WITHOUT_CLASSIFICATION	8.274194897240668E-4	DESIGN
use setParameter for null values	WITHOUT_CLASSIFICATION	0.9991725805102759	WITHOUT_CLASSIFICATION	8.274194897240668E-4	DESIGN
private CacheEntry cacheEntry;	WITHOUT_CLASSIFICATION	0.999952715576476	WITHOUT_CLASSIFICATION	4.728442352394048E-5	DESIGN
Don't need to lock the cache here, since if someone else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9995866799904906	WITHOUT_CLASSIFICATION	4.133200095095136E-4	DESIGN
Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9994107073159807	WITHOUT_CLASSIFICATION	5.892926840193317E-4	DESIGN
get the updated snapshot of the entity state by cloning current state; it is safe to copy in place, since by this time no-one else (should have) has a reference to the array	WITHOUT_CLASSIFICATION	0.9998718340062492	WITHOUT_CLASSIFICATION	1.2816599375066202E-4	DESIGN
this entity defines proeprty generation, so process those generated values...	WITHOUT_CLASSIFICATION	0.999224229686191	WITHOUT_CLASSIFICATION	7.757703138089847E-4	DESIGN
have the entity entry perform post-update processing, passing it the update state and the new version (if one).	WITHOUT_CLASSIFICATION	0.9999241060143121	WITHOUT_CLASSIFICATION	7.589398568778809E-5	DESIGN
!persister.isCacheInvalidationRequired()	WITHOUT_CLASSIFICATION	0.9994226996701397	WITHOUT_CLASSIFICATION	5.773003298601926E-4	DESIGN
need to look it up from the persistence-context	WITHOUT_CLASSIFICATION	0.9989078313797526	WITHOUT_CLASSIFICATION	0.0010921686202474525	DESIGN
sort first by role name	WITHOUT_CLASSIFICATION	0.999860978415132	WITHOUT_CLASSIFICATION	1.390215848680202E-4	DESIGN
Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9994107073159807	WITHOUT_CLASSIFICATION	5.892926840193317E-4	DESIGN
then by fk	WITHOUT_CLASSIFICATION	0.9998511775832486	WITHOUT_CLASSIFICATION	1.4882241675143724E-4	DESIGN
nothing to do	WITHOUT_CLASSIFICATION	0.9999876587160922	WITHOUT_CLASSIFICATION	1.2341283907898168E-5	DESIGN
nothing to do	WITHOUT_CLASSIFICATION	0.9999876587160922	WITHOUT_CLASSIFICATION	1.2341283907898168E-5	DESIGN
an existing collection that was either non-empty or uninitialized is replaced by null or a different collection (if the collection is uninitialized, hibernate has no way of knowing if the collection is actually empty without querying the db)	WITHOUT_CLASSIFICATION	0.7532169928463476	WITHOUT_CLASSIFICATION	0.2467830071536525	DESIGN
this method is called when a new non-null collection is persisted or when an existing (non-null) collection is moved to a new owner	WITHOUT_CLASSIFICATION	0.8530983380266144	WITHOUT_CLASSIFICATION	0.14690166197338567	DESIGN
boolean put = persister.getCache().insert(ck, cacheEntry);	WITHOUT_CLASSIFICATION	0.9999723833435379	WITHOUT_CLASSIFICATION	2.761665646206818E-5	DESIGN
we need to grab the version value from the entity, otherwise we have issues with generated-version entities that may have multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9550858597509173	WITHOUT_CLASSIFICATION	0.04491414024908264	DESIGN
do nothing - we only need to notify the cache...	WITHOUT_CLASSIFICATION	0.9989551601145708	WITHOUT_CLASSIFICATION	0.0010448398854292493	DESIGN
sort first by entity name	WITHOUT_CLASSIFICATION	0.999872391187969	WITHOUT_CLASSIFICATION	1.2760881203095585E-4	DESIGN
then by id	WITHOUT_CLASSIFICATION	0.9998576233782617	WITHOUT_CLASSIFICATION	1.423766217383018E-4	DESIGN
to be safe...	WITHOUT_CLASSIFICATION	0.9998844401665095	WITHOUT_CLASSIFICATION	1.1555983349050151E-4	DESIGN
no transformations took place, so handle it as we would a non-instrumented class	WITHOUT_CLASSIFICATION	0.9984794760240935	WITHOUT_CLASSIFICATION	0.0015205239759065274	DESIGN
see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9997077443420117	WITHOUT_CLASSIFICATION	2.922556579882853E-4	DESIGN
see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9997077443420117	WITHOUT_CLASSIFICATION	2.922556579882853E-4	DESIGN
intentionally empty	WITHOUT_CLASSIFICATION	0.9999247457090813	WITHOUT_CLASSIFICATION	7.52542909186233E-5	DESIGN
test out the optimizer:	WITHOUT_CLASSIFICATION	0.9999968618510112	WITHOUT_CLASSIFICATION	3.13814898885411E-6	DESIGN
set the name of bulk accessor.	WITHOUT_CLASSIFICATION	0.9999611155755509	WITHOUT_CLASSIFICATION	3.888442444911763E-5	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9999113734108903	WITHOUT_CLASSIFICATION	8.862658910963415E-5	DESIGN
invokespecial	WITHOUT_CLASSIFICATION	0.9999530626110165	WITHOUT_CLASSIFICATION	4.693738898349722E-5	DESIGN
return	WITHOUT_CLASSIFICATION	0.9999326546623389	WITHOUT_CLASSIFICATION	6.734533766110252E-5	DESIGN
aload_1 load bean	WITHOUT_CLASSIFICATION	0.9999449285344515	WITHOUT_CLASSIFICATION	5.507146554852122E-5	DESIGN
checkcast cast bean	WITHOUT_CLASSIFICATION	0.9999530883398282	WITHOUT_CLASSIFICATION	4.691166017174802E-5	DESIGN
astore_3 store bean	WITHOUT_CLASSIFICATION	0.9999594082103404	WITHOUT_CLASSIFICATION	4.059178965966591E-5	DESIGN
aload_2 args	WITHOUT_CLASSIFICATION	0.9999425730855608	WITHOUT_CLASSIFICATION	5.7426914439207544E-5	DESIGN
iconst_i continue to aastore growing stack is 1	WITHOUT_CLASSIFICATION	0.9985607819245653	WITHOUT_CLASSIFICATION	0.0014392180754345656	DESIGN
new	WITHOUT_CLASSIFICATION	0.9999193070724576	WITHOUT_CLASSIFICATION	8.069292754245367E-5	DESIGN
dup	WITHOUT_CLASSIFICATION	0.9999113734108903	WITHOUT_CLASSIFICATION	8.862658910963415E-5	DESIGN
aload_3 load the raw bean	WITHOUT_CLASSIFICATION	0.9999825543397617	WITHOUT_CLASSIFICATION	1.7445660238361636E-5	DESIGN
invokeinterface	WITHOUT_CLASSIFICATION	0.9999530626110165	WITHOUT_CLASSIFICATION	4.693738898349722E-5	DESIGN
invokevirtual	WITHOUT_CLASSIFICATION	0.9999530626110165	WITHOUT_CLASSIFICATION	4.693738898349722E-5	DESIGN
invokevirtual	WITHOUT_CLASSIFICATION	0.9999530626110165	WITHOUT_CLASSIFICATION	4.693738898349722E-5	DESIGN
aastore args	WITHOUT_CLASSIFICATION	0.9999425730855608	WITHOUT_CLASSIFICATION	5.7426914439207544E-5	DESIGN
| this | bean | args | i | raw bean | exception |	WITHOUT_CLASSIFICATION	0.9993479475643654	WITHOUT_CLASSIFICATION	6.520524356345677E-4	DESIGN
required to exception table iconst_0 i	WITHOUT_CLASSIFICATION	0.9998567823078975	WITHOUT_CLASSIFICATION	1.4321769210253114E-4	DESIGN
istore_3 store i	WITHOUT_CLASSIFICATION	0.9999594529101257	WITHOUT_CLASSIFICATION	4.054708987426296E-5	DESIGN
aload_1 load the bean	WITHOUT_CLASSIFICATION	0.9999825543397617	WITHOUT_CLASSIFICATION	1.7445660238361636E-5	DESIGN
checkcast cast the bean into a raw bean	WITHOUT_CLASSIFICATION	0.9971934926352221	WITHOUT_CLASSIFICATION	0.0028065073647778635	DESIGN
current stack len = 0	WITHOUT_CLASSIFICATION	0.9999972506291964	WITHOUT_CLASSIFICATION	2.7493708035105842E-6	DESIGN
start region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9985563243966216	WITHOUT_CLASSIFICATION	0.001443675603378376	DESIGN
iinc 3, 1	WITHOUT_CLASSIFICATION	0.9998881053885053	WITHOUT_CLASSIFICATION	1.1189461149476549E-4	DESIGN
aload 4 load the raw bean	WITHOUT_CLASSIFICATION	0.9999625400672285	WITHOUT_CLASSIFICATION	3.745993277153391E-5	DESIGN
aload_2 load the args	WITHOUT_CLASSIFICATION	0.9999786554586253	WITHOUT_CLASSIFICATION	2.1344541374690216E-5	DESIGN
iconst_i	WITHOUT_CLASSIFICATION	0.9999113734108903	WITHOUT_CLASSIFICATION	8.862658910963415E-5	DESIGN
aaload	WITHOUT_CLASSIFICATION	0.9999113734108903	WITHOUT_CLASSIFICATION	8.862658910963415E-5	DESIGN
checkcast	WITHOUT_CLASSIFICATION	0.9999113734108903	WITHOUT_CLASSIFICATION	8.862658910963415E-5	DESIGN
checkcast (case of primitive type) invokevirtual (case of primitive type)	WITHOUT_CLASSIFICATION	0.9995740750781497	WITHOUT_CLASSIFICATION	4.259249218503453E-4	DESIGN
checkcast (case of reference type)	WITHOUT_CLASSIFICATION	0.9998078317808146	WITHOUT_CLASSIFICATION	1.9216821918542601E-4	DESIGN
current stack len = 2	WITHOUT_CLASSIFICATION	0.9999953511164815	WITHOUT_CLASSIFICATION	4.648883518523861E-6	DESIGN
end region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9991695751121608	WITHOUT_CLASSIFICATION	8.304248878392702E-4	DESIGN
register in exception table	WITHOUT_CLASSIFICATION	0.9999784017760626	WITHOUT_CLASSIFICATION	2.159822393745743E-5	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9999113734108903	WITHOUT_CLASSIFICATION	8.862658910963415E-5	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9999113734108903	WITHOUT_CLASSIFICATION	8.862658910963415E-5	DESIGN
return	WITHOUT_CLASSIFICATION	0.9999326546623389	WITHOUT_CLASSIFICATION	6.734533766110252E-5	DESIGN
return	WITHOUT_CLASSIFICATION	0.9999326546623389	WITHOUT_CLASSIFICATION	6.734533766110252E-5	DESIGN
dup	WITHOUT_CLASSIFICATION	0.9999113734108903	WITHOUT_CLASSIFICATION	8.862658910963415E-5	DESIGN
invokevirtual	WITHOUT_CLASSIFICATION	0.9999530626110165	WITHOUT_CLASSIFICATION	4.693738898349722E-5	DESIGN
checkcast	WITHOUT_CLASSIFICATION	0.9999113734108903	WITHOUT_CLASSIFICATION	8.862658910963415E-5	DESIGN
local variables | target obj | each oldvalue |	WITHOUT_CLASSIFICATION	0.9993019489247589	WITHOUT_CLASSIFICATION	6.980510752410202E-4	DESIGN
astore 5 store exception	WITHOUT_CLASSIFICATION	0.9999857213501879	WITHOUT_CLASSIFICATION	1.4278649812105659E-5	DESIGN
new BulkAccessorException	WITHOUT_CLASSIFICATION	0.9999643972176772	WITHOUT_CLASSIFICATION	3.560278232285799E-5	DESIGN
aload 5 load exception	WITHOUT_CLASSIFICATION	0.9999806277683484	WITHOUT_CLASSIFICATION	1.937223165154369E-5	DESIGN
iload_3 i	WITHOUT_CLASSIFICATION	0.9999114710020401	WITHOUT_CLASSIFICATION	8.852899795991943E-5	DESIGN
invokespecial BulkAccessorException.<init>	WITHOUT_CLASSIFICATION	0.9994226996701397	WITHOUT_CLASSIFICATION	5.773003298601926E-4	DESIGN
athrow	WITHOUT_CLASSIFICATION	0.9999113734108903	WITHOUT_CLASSIFICATION	8.862658910963415E-5	DESIGN
WARNING: classfile only	WITHOUT_CLASSIFICATION	0.9999741896758786	WITHOUT_CLASSIFICATION	2.5810324121462863E-5	DESIGN
swallow	WITHOUT_CLASSIFICATION	0.9999113734108903	WITHOUT_CLASSIFICATION	8.862658910963415E-5	DESIGN
local variable | this |	WITHOUT_CLASSIFICATION	0.9995053776001491	WITHOUT_CLASSIFICATION	4.946223998509731E-4	DESIGN
aload_0 load this	WITHOUT_CLASSIFICATION	0.9998694020676628	WITHOUT_CLASSIFICATION	1.3059793233709404E-4	DESIGN
aload_0 load this	WITHOUT_CLASSIFICATION	0.9998694020676628	WITHOUT_CLASSIFICATION	1.3059793233709404E-4	DESIGN
getfield get field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999277329668085	WITHOUT_CLASSIFICATION	7.226703319148987E-5	DESIGN
areturn return the value of the field	WITHOUT_CLASSIFICATION	0.9998794395129996	WITHOUT_CLASSIFICATION	1.2056048700038468E-4	DESIGN
local variables | this | callback |	WITHOUT_CLASSIFICATION	0.9772503718452387	WITHOUT_CLASSIFICATION	0.02274962815476137	DESIGN
aload_1 load callback	WITHOUT_CLASSIFICATION	0.9999541200723595	WITHOUT_CLASSIFICATION	4.587992764060013E-5	DESIGN
putfield put field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999214481281238	WITHOUT_CLASSIFICATION	7.855187187616411E-5	DESIGN
case of non-static field	WITHOUT_CLASSIFICATION	0.9999924312945936	WITHOUT_CLASSIFICATION	7.568705406462309E-6	DESIGN
getfield get each field	WITHOUT_CLASSIFICATION	0.999988463157217	WITHOUT_CLASSIFICATION	1.1536842783039641E-5	DESIGN
invokeinterface invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9994482197480207	WITHOUT_CLASSIFICATION	5.517802519792751E-4	DESIGN
ifnonnull	WITHOUT_CLASSIFICATION	0.9999113734108903	WITHOUT_CLASSIFICATION	8.862658910963415E-5	DESIGN
return each type	WITHOUT_CLASSIFICATION	0.9999209932406382	WITHOUT_CLASSIFICATION	7.900675936171136E-5	DESIGN
return each type	WITHOUT_CLASSIFICATION	0.9999209932406382	WITHOUT_CLASSIFICATION	7.900675936171136E-5	DESIGN
store_1 each type	WITHOUT_CLASSIFICATION	0.9998960273414994	WITHOUT_CLASSIFICATION	1.0397265850049448E-4	DESIGN
ldc name of the field	WITHOUT_CLASSIFICATION	0.9999841624380725	WITHOUT_CLASSIFICATION	1.58375619274062E-5	DESIGN
load_1 each type	WITHOUT_CLASSIFICATION	0.9998960273414994	WITHOUT_CLASSIFICATION	1.0397265850049448E-4	DESIGN
invokeinterface invoke Callback.read() each type	WITHOUT_CLASSIFICATION	0.9987784815670395	WITHOUT_CLASSIFICATION	0.0012215184329604954	DESIGN
int	WITHOUT_CLASSIFICATION	0.9999130236037586	WITHOUT_CLASSIFICATION	8.697639624151009E-5	DESIGN
return	WITHOUT_CLASSIFICATION	0.9999326546623389	WITHOUT_CLASSIFICATION	6.734533766110252E-5	DESIGN
dup	WITHOUT_CLASSIFICATION	0.9999113734108903	WITHOUT_CLASSIFICATION	8.862658910963415E-5	DESIGN
invokeinterface	WITHOUT_CLASSIFICATION	0.9999530626110165	WITHOUT_CLASSIFICATION	4.693738898349722E-5	DESIGN
checkcast	WITHOUT_CLASSIFICATION	0.9999113734108903	WITHOUT_CLASSIFICATION	8.862658910963415E-5	DESIGN
checkcast	WITHOUT_CLASSIFICATION	0.9999113734108903	WITHOUT_CLASSIFICATION	8.862658910963415E-5	DESIGN
invokeinterface enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9994226996701397	WITHOUT_CLASSIFICATION	5.773003298601926E-4	DESIGN
invokeinterface enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9994226996701397	WITHOUT_CLASSIFICATION	5.773003298601926E-4	DESIGN
ifnonnull (label1)	WITHOUT_CLASSIFICATION	0.9999530626110165	WITHOUT_CLASSIFICATION	4.693738898349722E-5	DESIGN
load_1	WITHOUT_CLASSIFICATION	0.9999113734108903	WITHOUT_CLASSIFICATION	8.862658910963415E-5	DESIGN
load_1	WITHOUT_CLASSIFICATION	0.9999113734108903	WITHOUT_CLASSIFICATION	8.862658910963415E-5	DESIGN
putfield	WITHOUT_CLASSIFICATION	0.9999113734108903	WITHOUT_CLASSIFICATION	8.862658910963415E-5	DESIGN
return ;	WITHOUT_CLASSIFICATION	0.9999326546623389	WITHOUT_CLASSIFICATION	6.734533766110252E-5	DESIGN
ldc field name	WITHOUT_CLASSIFICATION	0.9999396242278472	WITHOUT_CLASSIFICATION	6.037577215273992E-5	DESIGN
getfield old value of the field	WITHOUT_CLASSIFICATION	0.9998467614933719	WITHOUT_CLASSIFICATION	1.5323850662800814E-4	DESIGN
invokeinterface callback.write(..)	WITHOUT_CLASSIFICATION	0.9994226996701397	WITHOUT_CLASSIFICATION	5.773003298601926E-4	DESIGN
reference type	WITHOUT_CLASSIFICATION	0.9999281187292245	WITHOUT_CLASSIFICATION	7.188127077551429E-5	DESIGN
reference type	WITHOUT_CLASSIFICATION	0.9999281187292245	WITHOUT_CLASSIFICATION	7.188127077551429E-5	DESIGN
not array	WITHOUT_CLASSIFICATION	0.9999452703265909	WITHOUT_CLASSIFICATION	5.472967340908588E-5	DESIGN
array of reference type	WITHOUT_CLASSIFICATION	0.9999580406369522	WITHOUT_CLASSIFICATION	4.195936304782101E-5	DESIGN
boolean	WITHOUT_CLASSIFICATION	0.9999565499723692	WITHOUT_CLASSIFICATION	4.3450027630934696E-5	DESIGN
byte	WITHOUT_CLASSIFICATION	0.9999056198344399	WITHOUT_CLASSIFICATION	9.438016556001863E-5	DESIGN
char	WITHOUT_CLASSIFICATION	0.9999130791323511	WITHOUT_CLASSIFICATION	8.692086764890741E-5	DESIGN
short	WITHOUT_CLASSIFICATION	0.9999184387522826	WITHOUT_CLASSIFICATION	8.156124771737966E-5	DESIGN
double	WITHOUT_CLASSIFICATION	0.9999707034567491	WITHOUT_CLASSIFICATION	2.9296543250818308E-5	DESIGN
float	WITHOUT_CLASSIFICATION	0.9999113734108903	WITHOUT_CLASSIFICATION	8.862658910963415E-5	DESIGN
float	WITHOUT_CLASSIFICATION	0.9999113734108903	WITHOUT_CLASSIFICATION	8.862658910963415E-5	DESIGN
long	WITHOUT_CLASSIFICATION	0.9999005646293352	WITHOUT_CLASSIFICATION	9.943537066481556E-5	DESIGN
long	WITHOUT_CLASSIFICATION	0.9999005646293352	WITHOUT_CLASSIFICATION	9.943537066481556E-5	DESIGN
bad type	WITHOUT_CLASSIFICATION	0.9995778763538847	WITHOUT_CLASSIFICATION	4.2212364611521076E-4	DESIGN
bad type	WITHOUT_CLASSIFICATION	0.9995778763538847	WITHOUT_CLASSIFICATION	4.2212364611521076E-4	DESIGN
boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9995209380835385	WITHOUT_CLASSIFICATION	4.7906191646154427E-4	DESIGN
boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9995209380835385	WITHOUT_CLASSIFICATION	4.7906191646154427E-4	DESIGN
reference type	WITHOUT_CLASSIFICATION	0.9999281187292245	WITHOUT_CLASSIFICATION	7.188127077551429E-5	DESIGN
double	WITHOUT_CLASSIFICATION	0.9999707034567491	WITHOUT_CLASSIFICATION	2.9296543250818308E-5	DESIGN
float	WITHOUT_CLASSIFICATION	0.9999113734108903	WITHOUT_CLASSIFICATION	8.862658910963415E-5	DESIGN
float	WITHOUT_CLASSIFICATION	0.9999113734108903	WITHOUT_CLASSIFICATION	8.862658910963415E-5	DESIGN
long	WITHOUT_CLASSIFICATION	0.9999005646293352	WITHOUT_CLASSIFICATION	9.943537066481556E-5	DESIGN
bad type	WITHOUT_CLASSIFICATION	0.9995778763538847	WITHOUT_CLASSIFICATION	4.2212364611521076E-4	DESIGN
bad type	WITHOUT_CLASSIFICATION	0.9995778763538847	WITHOUT_CLASSIFICATION	4.2212364611521076E-4	DESIGN
boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9995209380835385	WITHOUT_CLASSIFICATION	4.7906191646154427E-4	DESIGN
skip finalize methods	WITHOUT_CLASSIFICATION	0.999950658153628	WITHOUT_CLASSIFICATION	4.934184637194954E-5	DESIGN
Mainly for OSCache	WITHOUT_CLASSIFICATION	0.9999049586952599	WITHOUT_CLASSIFICATION	9.504130474019903E-5	DESIGN
decrement the lock	WITHOUT_CLASSIFICATION	0.9999716740586335	WITHOUT_CLASSIFICATION	2.8325941366422717E-5	DESIGN
create new lock that times out immediately	WITHOUT_CLASSIFICATION	0.9996480382201918	WITHOUT_CLASSIFICATION	3.519617798081471E-4	DESIGN
recache the updated state	WITHOUT_CLASSIFICATION	0.9999863448921112	WITHOUT_CLASSIFICATION	1.3655107888847847E-5	DESIGN
noop	WITHOUT_CLASSIFICATION	0.9999121901886008	WITHOUT_CLASSIFICATION	8.780981139921503E-5	DESIGN
null clientLock is remotely possible but will never happen in practice	WITHOUT_CLASSIFICATION	0.9999228086354086	WITHOUT_CLASSIFICATION	7.719136459139257E-5	DESIGN
we really could refresh the item if it is not a lock, but it might be slower return freshTimestamp < txTimestamp	WITHOUT_CLASSIFICATION	0.9999511024887003	WITHOUT_CLASSIFICATION	4.8897511299733085E-5	DESIGN
by requiring <, we rely on lock timeout in the case of an unsuccessful update!	WITHOUT_CLASSIFICATION	0.999347191340379	WITHOUT_CLASSIFICATION	6.528086596211483E-4	DESIGN
the user provided resulttransformer, not the one used with "select new". Here to avoid mangling transformed/non-transformed results.	WITHOUT_CLASSIFICATION	0.9998076947175071	WITHOUT_CLASSIFICATION	1.9230528249299849E-4	DESIGN
disassemble positional parameters	WITHOUT_CLASSIFICATION	0.9995884560307184	WITHOUT_CLASSIFICATION	4.115439692816846E-4	DESIGN
disassemble named parameters	WITHOUT_CLASSIFICATION	0.9999794915349289	WITHOUT_CLASSIFICATION	2.050846507106026E-5	DESIGN
ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999530626110165	WITHOUT_CLASSIFICATION	4.693738898349722E-5	DESIGN
noop	WITHOUT_CLASSIFICATION	0.9999121901886008	WITHOUT_CLASSIFICATION	8.780981139921503E-5	DESIGN
noop	WITHOUT_CLASSIFICATION	0.9999121901886008	WITHOUT_CLASSIFICATION	8.780981139921503E-5	DESIGN
noop	WITHOUT_CLASSIFICATION	0.9999121901886008	WITHOUT_CLASSIFICATION	8.780981139921503E-5	DESIGN
this is called from SettingsFactory irregardless; trivial to simply disregard	WITHOUT_CLASSIFICATION	0.9960590667022968	WITHOUT_CLASSIFICATION	0.003940933297703203	DESIGN
Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.999621702824983	WITHOUT_CLASSIFICATION	3.7829717501695057E-4	DESIGN
Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.999621702824983	WITHOUT_CLASSIFICATION	3.7829717501695057E-4	DESIGN
throw new UnsupportedOperationException("Can't write to a readonly object");	WITHOUT_CLASSIFICATION	0.9908250405816975	WITHOUT_CLASSIFICATION	0.009174959418302462	DESIGN
assembled state gets put in a new array (we read from cache by value!)	WITHOUT_CLASSIFICATION	0.9977879424281092	WITHOUT_CLASSIFICATION	0.002212057571890884	DESIGN
persister.setIdentifier(result, id); before calling interceptor, for consistency with normal load	WITHOUT_CLASSIFICATION	0.9989574032570181	WITHOUT_CLASSIFICATION	0.0010425967429818729	DESIGN
no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9992273205998979	WITHOUT_CLASSIFICATION	7.726794001021762E-4	DESIGN
no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9992273205998979	WITHOUT_CLASSIFICATION	7.726794001021762E-4	DESIGN
again, CCS did not have such a concept; but a reasonable proximity is to clear the cache after transaction as long as the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999102338106904	WITHOUT_CLASSIFICATION	8.976618930956624E-5	DESIGN
again, CCS did not have such a concept; however a reasonable proximity is to clear the cache. For non-transaction aware caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999036877710888	WITHOUT_CLASSIFICATION	9.631222891111051E-5	DESIGN
again, CCS did not have such a concept; however a reasonable proximity is to clear the cache. For non-transaction aware caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999036877710888	WITHOUT_CLASSIFICATION	9.631222891111051E-5	DESIGN
classes mentioned in extends not available - so put it in queue	WITHOUT_CLASSIFICATION	0.9984939332738227	WITHOUT_CLASSIFICATION	0.0015060667261772823	DESIGN
get meta's from <hibernate-mapping>	WITHOUT_CLASSIFICATION	0.9994343248872992	WITHOUT_CLASSIFICATION	5.656751127008635E-4	DESIGN
get meta's from <class>	WITHOUT_CLASSIFICATION	0.9999616844569924	WITHOUT_CLASSIFICATION	3.8315543007672614E-5	DESIGN
DB-OBJECTNAME	WITHOUT_CLASSIFICATION	0.9999530626110165	WITHOUT_CLASSIFICATION	4.693738898349722E-5	DESIGN
MUTABLE	WITHOUT_CLASSIFICATION	0.9999113734108903	WITHOUT_CLASSIFICATION	8.862658910963415E-5	DESIGN
WHERE	WITHOUT_CLASSIFICATION	0.9999113734108903	WITHOUT_CLASSIFICATION	8.862658910963415E-5	DESIGN
CHECK	WITHOUT_CLASSIFICATION	0.9999113734108903	WITHOUT_CLASSIFICATION	8.862658910963415E-5	DESIGN
POLYMORPHISM	WITHOUT_CLASSIFICATION	0.9999530626110165	WITHOUT_CLASSIFICATION	4.693738898349722E-5	DESIGN
TODO:	WITHOUT_CLASSIFICATION	0.8396633629172874	WITHOUT_CLASSIFICATION	0.1603366370827127	DESIGN
ID	WITHOUT_CLASSIFICATION	0.9998894813088255	WITHOUT_CLASSIFICATION	1.1051869117454865E-4	DESIGN
VERSION / TIMESTAMP	WITHOUT_CLASSIFICATION	0.9999701470167383	WITHOUT_CLASSIFICATION	2.9852983261667584E-5	DESIGN
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999530626110165	WITHOUT_CLASSIFICATION	4.693738898349722E-5	DESIGN
Primary key constraint	WITHOUT_CLASSIFICATION	0.999964897288462	WITHOUT_CLASSIFICATION	3.510271153796045E-5	DESIGN
this is either a <version/> tag with no type attribute, or a <timestamp/> tag	WITHOUT_CLASSIFICATION	0.9983848544299153	WITHOUT_CLASSIFICATION	0.0016151455700846448	DESIGN
for version properties marked as being generated, make sure they are "always" generated; aka, "insert" is invalid; this is dis-allowed by the DTD, but just to make sure...	WITHOUT_CLASSIFICATION	0.978911317102026	WITHOUT_CLASSIFICATION	0.02108868289797407	DESIGN
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999530626110165	WITHOUT_CLASSIFICATION	4.693738898349722E-5	DESIGN
( (Column) discrim.getColumnIterator().next() ).setType(type);	WITHOUT_CLASSIFICATION	0.9993303083605471	WITHOUT_CLASSIFICATION	6.696916394529558E-4	DESIGN
go ahead and set the lazy here, since pojo.proxy can override it.	WITHOUT_CLASSIFICATION	0.9999086293078496	WITHOUT_CLASSIFICATION	9.137069215031871E-5	DESIGN
DYNAMIC UPDATE	WITHOUT_CLASSIFICATION	0.9999530626110165	WITHOUT_CLASSIFICATION	4.693738898349722E-5	DESIGN
IMPORT	WITHOUT_CLASSIFICATION	0.9999113734108903	WITHOUT_CLASSIFICATION	8.862658910963415E-5	DESIGN
BATCH SIZE	WITHOUT_CLASSIFICATION	0.9999113734108903	WITHOUT_CLASSIFICATION	8.862658910963415E-5	DESIGN
SELECT BEFORE UPDATE	WITHOUT_CLASSIFICATION	0.9999530626110165	WITHOUT_CLASSIFICATION	4.693738898349722E-5	DESIGN
OPTIMISTIC LOCK MODE	WITHOUT_CLASSIFICATION	0.9999530626110165	WITHOUT_CLASSIFICATION	4.693738898349722E-5	DESIGN
PERSISTER	WITHOUT_CLASSIFICATION	0.9999113734108903	WITHOUT_CLASSIFICATION	8.862658910963415E-5	DESIGN
CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999114453261749	WITHOUT_CLASSIFICATION	8.855467382515063E-5	DESIGN
get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999616844569924	WITHOUT_CLASSIFICATION	3.8315543007672614E-5	DESIGN
properties	WITHOUT_CLASSIFICATION	0.9999308806832979	WITHOUT_CLASSIFICATION	6.911931670199151E-5	DESIGN
joined subclasses	WITHOUT_CLASSIFICATION	0.9999505665211732	WITHOUT_CLASSIFICATION	4.9433478826775646E-5	DESIGN
KEY	WITHOUT_CLASSIFICATION	0.9999113734108903	WITHOUT_CLASSIFICATION	8.862658910963415E-5	DESIGN
CHECK	WITHOUT_CLASSIFICATION	0.9999113734108903	WITHOUT_CLASSIFICATION	8.862658910963415E-5	DESIGN
CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999114453261749	WITHOUT_CLASSIFICATION	8.855467382515063E-5	DESIGN
properties	WITHOUT_CLASSIFICATION	0.9999308806832979	WITHOUT_CLASSIFICATION	6.911931670199151E-5	DESIGN
KEY	WITHOUT_CLASSIFICATION	0.9999113734108903	WITHOUT_CLASSIFICATION	8.862658910963415E-5	DESIGN
model.getKey().setType( new Type( model.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9992834119241285	WITHOUT_CLASSIFICATION	7.165880758714476E-4	DESIGN
TABLENAME	WITHOUT_CLASSIFICATION	0.9999113734108903	WITHOUT_CLASSIFICATION	8.862658910963415E-5	DESIGN
join.getKey().setType( new Type( lazz.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9992834119241285	WITHOUT_CLASSIFICATION	7.165880758714476E-4	DESIGN
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999113734108903	WITHOUT_CLASSIFICATION	8.862658910963415E-5	DESIGN
COLUMN(S)	WITHOUT_CLASSIFICATION	0.9999113734108903	WITHOUT_CLASSIFICATION	8.862658910963415E-5	DESIGN
column index	WITHOUT_CLASSIFICATION	0.9999759773003405	WITHOUT_CLASSIFICATION	2.4022699659508093E-5	DESIGN
column unique-key	WITHOUT_CLASSIFICATION	0.9999649186201365	WITHOUT_CLASSIFICATION	3.5081379863487364E-5	DESIGN
automatically makes a column with the default name if none is specifed by XML	WITHOUT_CLASSIFICATION	0.9991023093411112	WITHOUT_CLASSIFICATION	8.976906588888478E-4	DESIGN
for an any	WITHOUT_CLASSIFICATION	0.9998807075307997	WITHOUT_CLASSIFICATION	1.1929246920025118E-4	DESIGN
insertable simply because that is the user did not specify anything; just override it	WITHOUT_CLASSIFICATION	0.9998088085837458	WITHOUT_CLASSIFICATION	1.911914162543039E-4	DESIGN
the user specifically supplied insert="true", which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9997463014594913	WITHOUT_CLASSIFICATION	2.53698540508738E-4	DESIGN
properties generated on update can never be updateable...	WITHOUT_CLASSIFICATION	0.9999067984924777	WITHOUT_CLASSIFICATION	9.32015075223939E-5	DESIGN
updateable only because the user did not specify anything; just override it	WITHOUT_CLASSIFICATION	0.9999513932537059	WITHOUT_CLASSIFICATION	4.860674629416226E-5	DESIGN
the user specifically supplied update="true", which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9997463014594913	WITHOUT_CLASSIFICATION	2.53698540508738E-4	DESIGN
ROLENAME	WITHOUT_CLASSIFICATION	0.9999113734108903	WITHOUT_CLASSIFICATION	8.862658910963415E-5	DESIGN
FETCH STRATEGY	WITHOUT_CLASSIFICATION	0.9999530626110165	WITHOUT_CLASSIFICATION	4.693738898349722E-5	DESIGN
TABLE	WITHOUT_CLASSIFICATION	0.9999113734108903	WITHOUT_CLASSIFICATION	8.862658910963415E-5	DESIGN
tableName = mappings.getNamingStrategy().propertyToTableName( className, path );	WITHOUT_CLASSIFICATION	0.9999564908816664	WITHOUT_CLASSIFICATION	4.350911833366485E-5	DESIGN
SORT	WITHOUT_CLASSIFICATION	0.9999113734108903	WITHOUT_CLASSIFICATION	8.862658910963415E-5	DESIGN
CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999114453261749	WITHOUT_CLASSIFICATION	8.855467382515063E-5	DESIGN
unsorted, natural, comparator.class.name	WITHOUT_CLASSIFICATION	0.9994226996701397	WITHOUT_CLASSIFICATION	5.773003298601926E-4	DESIGN
ORPHAN DELETE (used for programmer error detection)	WITHOUT_CLASSIFICATION	0.9983491381063574	WITHOUT_CLASSIFICATION	0.0016508618936426187	DESIGN
set up second pass	WITHOUT_CLASSIFICATION	0.9999802412111845	WITHOUT_CLASSIFICATION	1.975878881556718E-5	DESIGN
an "embedded" component (composite ids and unique) note that this does not handle nested components	WITHOUT_CLASSIFICATION	0.9919635506151564	WITHOUT_CLASSIFICATION	0.008036449384843592	DESIGN
a nested composite element	WITHOUT_CLASSIFICATION	0.9997157798260491	WITHOUT_CLASSIFICATION	2.842201739509625E-4	DESIGN
for an any we will have to use reflection	WITHOUT_CLASSIFICATION	0.9982523608666908	WITHOUT_CLASSIFICATION	0.0017476391333092634	DESIGN
NOTE SPECIAL CASE: one-to-one constrained=false cannot be proxied, so default to join and non-lazy	WITHOUT_CLASSIFICATION	0.9992582733363484	WITHOUT_CLASSIFICATION	7.417266636516462E-4	DESIGN
use old (HB 2.1) defaults if outer-join is specified	WITHOUT_CLASSIFICATION	0.9990593154052753	WITHOUT_CLASSIFICATION	9.406845947247995E-4	DESIGN
lazy = !join;	WITHOUT_CLASSIFICATION	0.9999939246171917	WITHOUT_CLASSIFICATION	6.075382808265718E-6	DESIGN
GENERATOR	WITHOUT_CLASSIFICATION	0.9999113734108903	WITHOUT_CLASSIFICATION	8.862658910963415E-5	DESIGN
ID UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.999941467766336	WITHOUT_CLASSIFICATION	5.85322336641001E-5	DESIGN
VERSION UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999608966083426	WITHOUT_CLASSIFICATION	3.910339165735296E-5	DESIGN
not necessarily a unique property reference	WITHOUT_CLASSIFICATION	0.9996377587839399	WITHOUT_CLASSIFICATION	3.622412160600893E-4	DESIGN
( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9993303083605471	WITHOUT_CLASSIFICATION	6.696916394529558E-4	DESIGN
contained elements:	WITHOUT_CLASSIFICATION	0.9999385831225646	WITHOUT_CLASSIFICATION	6.141687743545353E-5	DESIGN
for non-inverse one-to-many, with a not-null fk, add a backref!	WITHOUT_CLASSIFICATION	0.9992908478642505	WITHOUT_CLASSIFICATION	7.091521357494513E-4	DESIGN
Bind the where	WITHOUT_CLASSIFICATION	0.9999434118731575	WITHOUT_CLASSIFICATION	5.658812684255214E-5	DESIGN
Bind the order-by	WITHOUT_CLASSIFICATION	0.9999821522325891	WITHOUT_CLASSIFICATION	1.7847767410841688E-5	DESIGN
Bind the filters	WITHOUT_CLASSIFICATION	0.9999821522325891	WITHOUT_CLASSIFICATION	1.7847767410841688E-5	DESIGN
overriding inherited meta attribute. HBX-621 & HBX-793	WITHOUT_CLASSIFICATION	0.9996105498942772	WITHOUT_CLASSIFICATION	3.8945010572275467E-4	DESIGN
first, iterate over all elements capable of defining an extends attribute collecting all found extends references if they cannot be resolved against the already processed mappings.	WITHOUT_CLASSIFICATION	0.9999416296033489	WITHOUT_CLASSIFICATION	5.8370396651158416E-5	DESIGN
mappings might contain either the "raw" extends name (in the case of an entity-name mapping) or a FQN (in the case of a POJO mapping).	WITHOUT_CLASSIFICATION	0.9996420660139368	WITHOUT_CLASSIFICATION	3.579339860632391E-4	DESIGN
+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9996535175805616	WITHOUT_CLASSIFICATION	3.4648241943831417E-4	DESIGN
SessionFactory name:	WITHOUT_CLASSIFICATION	0.9999531431481311	WITHOUT_CLASSIFICATION	4.685685186901927E-5	DESIGN
JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9999531716280161	WITHOUT_CLASSIFICATION	4.682837198391183E-5	DESIGN
JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9999531716280161	WITHOUT_CLASSIFICATION	4.682837198391183E-5	DESIGN
Interrogate JDBC metadata	WITHOUT_CLASSIFICATION	0.9999608966083426	WITHOUT_CLASSIFICATION	3.910339165735296E-5	DESIGN
user supplied JDBC connections	WITHOUT_CLASSIFICATION	0.9999823999205257	WITHOUT_CLASSIFICATION	1.7600079474217362E-5	DESIGN
use dialect default properties	WITHOUT_CLASSIFICATION	0.9999615274427516	WITHOUT_CLASSIFICATION	3.8472557248407344E-5	DESIGN
Transaction settings:	WITHOUT_CLASSIFICATION	0.9999610534886931	WITHOUT_CLASSIFICATION	3.8946511306936064E-5	DESIGN
SQL Generation settings:	WITHOUT_CLASSIFICATION	0.9999610894731574	WITHOUT_CLASSIFICATION	3.891052684254255E-5	DESIGN
Query parser settings:	WITHOUT_CLASSIFICATION	0.9999609877939353	WITHOUT_CLASSIFICATION	3.9012206064662226E-5	DESIGN
Second-level / query cache:	WITHOUT_CLASSIFICATION	0.9999799960402581	WITHOUT_CLASSIFICATION	2.000395974186808E-5	DESIGN
The cache provider is needed when we either have second-level cache enabled or query cache enabled. Note that useSecondLevelCache is enabled by default	WITHOUT_CLASSIFICATION	0.9997563789553839	WITHOUT_CLASSIFICATION	2.4362104461611445E-4	DESIGN
SQL Exception converter:	WITHOUT_CLASSIFICATION	0.9999710863697352	WITHOUT_CLASSIFICATION	2.8913630264709786E-5	DESIGN
Statistics and logging:	WITHOUT_CLASSIFICATION	0.9999539194346407	WITHOUT_CLASSIFICATION	4.608056535932696E-5	DESIGN
settings.setShowSqlEnabled(showSql);	WITHOUT_CLASSIFICATION	0.9994226996701397	WITHOUT_CLASSIFICATION	5.773003298601926E-4	DESIGN
settings.setFormatSqlEnabled(formatSql);	WITHOUT_CLASSIFICATION	0.9994226996701397	WITHOUT_CLASSIFICATION	5.773003298601926E-4	DESIGN
Schema export:	WITHOUT_CLASSIFICATION	0.9999530626110165	WITHOUT_CLASSIFICATION	4.693738898349722E-5	DESIGN
String provider = properties.getProperty( Environment.BYTECODE_PROVIDER ); log.info( "Bytecode provider name : " + provider ); BytecodeProvider bytecodeProvider = buildBytecodeProvider( provider ); settings.setBytecodeProvider( bytecodeProvider );	WITHOUT_CLASSIFICATION	0.9998057665301152	WITHOUT_CLASSIFICATION	1.9423346988475557E-4	DESIGN
legacy behavior, apply the bridge...	WITHOUT_CLASSIFICATION	0.9987014135345654	WITHOUT_CLASSIFICATION	0.001298586465434584	DESIGN
maybe a concrete SQLpropertyresult type, but Map is exactly what is required at the moment	WITHOUT_CLASSIFICATION	0.9945195757844305	WITHOUT_CLASSIFICATION	0.005480424215569425	DESIGN
if dotted and not load-collection nor return-join regular property	WITHOUT_CLASSIFICATION	0.9996672662454732	WITHOUT_CLASSIFICATION	3.327337545268227E-4	DESIGN
private ComponentTuplizerFactory componentTuplizerFactory; todo : HHH-3517 and HHH-1907 private BytecodeProvider bytecodeProvider;	WITHOUT_CLASSIFICATION	0.9993554185333967	WITHOUT_CLASSIFICATION	6.445814666033329E-4	DESIGN
public getters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995582595501269	WITHOUT_CLASSIFICATION	4.417404498730885E-4	DESIGN
public ComponentTuplizerFactory getComponentTuplizerFactory() { return componentTuplizerFactory; }	WITHOUT_CLASSIFICATION	0.9994602938799468	WITHOUT_CLASSIFICATION	5.397061200530553E-4	DESIGN
package protected setters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.997402379401027	WITHOUT_CLASSIFICATION	0.0025976205989729174	DESIGN
void setShowSqlEnabled(boolean b) { showSql = b; } void setFormatSqlEnabled(boolean b) { formatSql = b; }	WITHOUT_CLASSIFICATION	0.9999094159140238	WITHOUT_CLASSIFICATION	9.058408597622377E-5	DESIGN
public BytecodeProvider getBytecodeProvider() { return bytecodeProvider; } void setBytecodeProvider(BytecodeProvider bytecodeProvider) { this.bytecodeProvider = bytecodeProvider; }	WITHOUT_CLASSIFICATION	0.9999165260333255	WITHOUT_CLASSIFICATION	8.347396667456348E-5	DESIGN
using local since the inheritedMetas at this point is not the correct map since it is always the empty map	WITHOUT_CLASSIFICATION	0.9980313635344715	WITHOUT_CLASSIFICATION	0.001968636465528602	DESIGN
private ComponentTuplizerFactory componentTuplizerFactory; todo : HHH-3517 and HHH-1907	WITHOUT_CLASSIFICATION	0.9993554185333967	WITHOUT_CLASSIFICATION	6.445814666033329E-4	DESIGN
protected List extendsQueue;	WITHOUT_CLASSIFICATION	0.9999470462639015	WITHOUT_CLASSIFICATION	5.29537360984681E-5	DESIGN
extendsQueue = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999283097004751	WITHOUT_CLASSIFICATION	7.169029952497149E-5	DESIGN
componentTuplizerFactory = new ComponentTuplizerFactory();	WITHOUT_CLASSIFICATION	0.9999283097004751	WITHOUT_CLASSIFICATION	7.169029952497149E-5	DESIGN
if doc is null, then for whatever reason, the cached file cannot be used...	WITHOUT_CLASSIFICATION	0.9996812596917666	WITHOUT_CLASSIFICATION	3.187403082333923E-4	DESIGN
drop them in reverse order in case db needs it done that way...	WITHOUT_CLASSIFICATION	0.9910279521965083	WITHOUT_CLASSIFICATION	0.008972047803491692	DESIGN
public ComponentTuplizerFactory getComponentTuplizerFactory() { return componentTuplizerFactory; }	WITHOUT_CLASSIFICATION	0.9994602938799468	WITHOUT_CLASSIFICATION	5.397061200530553E-4	DESIGN
This method may be called many times!!	WITHOUT_CLASSIFICATION	0.9947781431062135	WITHOUT_CLASSIFICATION	0.00522185689378649	DESIGN
Iterator iterator = extendsQueue.iterator();	WITHOUT_CLASSIFICATION	0.9998808075366499	WITHOUT_CLASSIFICATION	1.1919246335009853E-4	DESIGN
Iterator iter = extendsQueue.iterator();	WITHOUT_CLASSIFICATION	0.9998727147565772	WITHOUT_CLASSIFICATION	1.2728524342283743E-4	DESIGN
found	WITHOUT_CLASSIFICATION	0.999921976251458	WITHOUT_CLASSIFICATION	7.802374854205681E-5	DESIGN
found	WITHOUT_CLASSIFICATION	0.999921976251458	WITHOUT_CLASSIFICATION	7.802374854205681E-5	DESIGN
settings.setComponentTuplizerFactory( this.getComponentTuplizerFactory() );	WITHOUT_CLASSIFICATION	0.9994226996701397	WITHOUT_CLASSIFICATION	5.773003298601926E-4	DESIGN
private final List extendsQueue;	WITHOUT_CLASSIFICATION	0.9992045018580861	WITHOUT_CLASSIFICATION	7.954981419139637E-4	DESIGN
<String, String>	WITHOUT_CLASSIFICATION	0.9999531736399662	WITHOUT_CLASSIFICATION	4.682636003381862E-5	DESIGN
<String, String>	WITHOUT_CLASSIFICATION	0.9999531736399662	WITHOUT_CLASSIFICATION	4.682636003381862E-5	DESIGN
+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9996535175805616	WITHOUT_CLASSIFICATION	3.4648241943831417E-4	DESIGN
Set USE_REFLECTION_OPTIMIZER to false to fix HHH-227	WITHOUT_CLASSIFICATION	0.9807681869359627	WITHOUT_CLASSIFICATION	0.019231813064037314	DESIGN
orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9997021292685845	WITHOUT_CLASSIFICATION	2.978707314155204E-4	DESIGN
element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9999053369500712	WITHOUT_CLASSIFICATION	9.466304992878356E-5	DESIGN
intentionally empty	WITHOUT_CLASSIFICATION	0.9999247457090813	WITHOUT_CLASSIFICATION	7.52542909186233E-5	DESIGN
orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9997021292685845	WITHOUT_CLASSIFICATION	2.978707314155204E-4	DESIGN
element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9999053369500712	WITHOUT_CLASSIFICATION	9.466304992878356E-5	DESIGN
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9998612187409033	WITHOUT_CLASSIFICATION	1.3878125909671168E-4	DESIGN
maintain correct duplication if loaded in a cartesian product	WITHOUT_CLASSIFICATION	0.9960651829801384	WITHOUT_CLASSIFICATION	0.003934817019861694	DESIGN
the element has been removed from the set	WITHOUT_CLASSIFICATION	0.9991250225101492	WITHOUT_CLASSIFICATION	8.749774898508272E-4	DESIGN
the element has changed	WITHOUT_CLASSIFICATION	0.9999946135629256	WITHOUT_CLASSIFICATION	5.386437074416877E-6	DESIGN
Careful: these methods do not initialize the collection.	WITHOUT_CLASSIFICATION	0.9990564645973221	WITHOUT_CLASSIFICATION	9.435354026778112E-4	DESIGN
needed so that we remove this collection from the second-level cache	WITHOUT_CLASSIFICATION	0.995244568851609	WITHOUT_CLASSIFICATION	0.004755431148391035	DESIGN
override on some subclasses	WITHOUT_CLASSIFICATION	0.9999478590961584	WITHOUT_CLASSIFICATION	5.214090384171734E-5	DESIGN
override on some subclasses	WITHOUT_CLASSIFICATION	0.9999478590961584	WITHOUT_CLASSIFICATION	5.214090384171734E-5	DESIGN
do this bit after setting initialized to true or it will recurse	WITHOUT_CLASSIFICATION	0.9991815038545452	WITHOUT_CLASSIFICATION	8.184961454548482E-4	DESIGN
short-circuit(s) no new elements, the old list contains only Orphans no old elements, so no Orphans neither	WITHOUT_CLASSIFICATION	0.9999842633191904	WITHOUT_CLASSIFICATION	1.573668080964401E-5	DESIGN
create the collection holding the Orphans	WITHOUT_CLASSIFICATION	0.9990891195163438	WITHOUT_CLASSIFICATION	9.108804836560307E-4	DESIGN
collect EntityIdentifier(s) of the current elements - add them into a HashSet for fast access	WITHOUT_CLASSIFICATION	0.9986440389665993	WITHOUT_CLASSIFICATION	0.001355961033400847	DESIGN
iterate over the old list	WITHOUT_CLASSIFICATION	0.9999714926295239	WITHOUT_CLASSIFICATION	2.8507370476093447E-5	DESIGN
(array==null) ? tempList.size() :	WITHOUT_CLASSIFICATION	0.9954056053935976	WITHOUT_CLASSIFICATION	0.004594394606402465	DESIGN
intentionally empty	WITHOUT_CLASSIFICATION	0.9999247457090813	WITHOUT_CLASSIFICATION	7.52542909186233E-5	DESIGN
(array==null) ? tempList.get(i) :	WITHOUT_CLASSIFICATION	0.9954056053935976	WITHOUT_CLASSIFICATION	0.004594394606402465	DESIGN
write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9999815105307129	WITHOUT_CLASSIFICATION	1.84894692870781E-5	DESIGN
write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9999815105307129	WITHOUT_CLASSIFICATION	1.84894692870781E-5	DESIGN
amazingly, these two will work because AbstractCollection uses iterator() to fill the array	WITHOUT_CLASSIFICATION	0.999674877477887	WITHOUT_CLASSIFICATION	3.251225221129628E-4	DESIGN
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9998612187409033	WITHOUT_CLASSIFICATION	1.3878125909671168E-4	DESIGN
finally, what it's all about...	WITHOUT_CLASSIFICATION	0.998390768701984	WITHOUT_CLASSIFICATION	0.0016092312980160032	DESIGN
note that if we load this collection from a cartesian product the multiplicity would be broken ... so use an idbag instead	WITHOUT_CLASSIFICATION	0.8733214991286151	WITHOUT_CLASSIFICATION	0.12667850087138488	DESIGN
Anyway, here we implement <set> semantics for a <one-to-many> <bag>!	WITHOUT_CLASSIFICATION	0.7486580767099786	WITHOUT_CLASSIFICATION	0.2513419232900213	DESIGN
a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9986740171414578	WITHOUT_CLASSIFICATION	0.0013259828585421905	DESIGN
search for it note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9003768564524282	WITHOUT_CLASSIFICATION	0.0996231435475718	DESIGN
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9998612187409033	WITHOUT_CLASSIFICATION	1.3878125909671168E-4	DESIGN
a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9986740171414578	WITHOUT_CLASSIFICATION	0.0013259828585421905	DESIGN
search for it note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9003768564524282	WITHOUT_CLASSIFICATION	0.0996231435475718	DESIGN
public boolean equals(Object other) {read();return bag.equals(other);}public int hashCode(Object other) {read();return bag.hashCode();}	WITHOUT_CLASSIFICATION	0.9996624441716184	WITHOUT_CLASSIFICATION	3.3755582838159944E-4	DESIGN
List OPERATIONS:	WITHOUT_CLASSIFICATION	0.9999572477159064	WITHOUT_CLASSIFICATION	4.2752284093416354E-5	DESIGN
pad with nulls from the current last element up to the new index	WITHOUT_CLASSIFICATION	0.9997317590923309	WITHOUT_CLASSIFICATION	2.6824090766906615E-4	DESIGN
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9998612187409033	WITHOUT_CLASSIFICATION	1.3878125909671168E-4	DESIGN
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9998612187409033	WITHOUT_CLASSIFICATION	1.3878125909671168E-4	DESIGN
from Map	WITHOUT_CLASSIFICATION	0.999819906245976	WITHOUT_CLASSIFICATION	1.8009375402390547E-4	DESIGN
from SortedMap	WITHOUT_CLASSIFICATION	0.9999301228682683	WITHOUT_CLASSIFICATION	6.987713173169197E-5	DESIGN
inject the data	WITHOUT_CLASSIFICATION	0.9999767163821067	WITHOUT_CLASSIFICATION	2.3283617893189238E-5	DESIGN
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999567356535347	WITHOUT_CLASSIFICATION	4.32643464652935E-5	DESIGN
default pool size 20	WITHOUT_CLASSIFICATION	0.9999744356530393	WITHOUT_CLASSIFICATION	2.5564346960648086E-5	DESIGN
trying via forName() first to be as close to DriverManager's semantics	WITHOUT_CLASSIFICATION	0.998570320993644	WITHOUT_CLASSIFICATION	0.001429679006356103	DESIGN
if debug level is enabled, then log the password, otherwise mask it	WITHOUT_CLASSIFICATION	0.9993978632643632	WITHOUT_CLASSIFICATION	6.021367356367582E-4	DESIGN
register a cleanup synch	WITHOUT_CLASSIFICATION	0.9998910449561466	WITHOUT_CLASSIFICATION	1.0895504385339236E-4	DESIGN
wrap the session in the transaction-protection proxy	WITHOUT_CLASSIFICATION	0.9998841278530377	WITHOUT_CLASSIFICATION	1.1587214696231269E-4	DESIGN
then bind it	WITHOUT_CLASSIFICATION	0.9999580722183058	WITHOUT_CLASSIFICATION	4.192778169425469E-5	DESIGN
try to make sure we don't wrap and already wrapped session	WITHOUT_CLASSIFICATION	0.9931054826902271	WITHOUT_CLASSIFICATION	0.006894517309772956	DESIGN
allow these to go through the the real session no matter what	WITHOUT_CLASSIFICATION	0.9981001241781874	WITHOUT_CLASSIFICATION	0.0018998758218126217	DESIGN
limit the methods available if no transaction is active	WITHOUT_CLASSIFICATION	0.9994594886271948	WITHOUT_CLASSIFICATION	5.405113728053012E-4	DESIGN
allow these (deprecated) methods to pass through	WITHOUT_CLASSIFICATION	0.9920881654282758	WITHOUT_CLASSIFICATION	0.007911834571724126	DESIGN
serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999422325611317	WITHOUT_CLASSIFICATION	5.776743886829917E-4	DESIGN
We could register the session against the transaction even though it is not started, but we'd have no guarentee of ever getting the map entries cleaned up (aside from spawning threads).	WITHOUT_CLASSIFICATION	0.999999495148479	WITHOUT_CLASSIFICATION	5.048515210424088E-7	DESIGN
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999567356535347	WITHOUT_CLASSIFICATION	4.32643464652935E-5	DESIGN
private String propertyName;	WITHOUT_CLASSIFICATION	0.9999099591916654	WITHOUT_CLASSIFICATION	9.004080833457815E-5	DESIGN
public PropertyProjection project() {return Projections.property(getPropertyName());}	WITHOUT_CLASSIFICATION	0.9992986343844054	WITHOUT_CLASSIFICATION	7.013656155945736E-4	DESIGN
String[] fk = StringHelper.qualify( "collection_", cp.getKeyColumnNames() );	WITHOUT_CLASSIFICATION	0.9999397247005894	WITHOUT_CLASSIFICATION	6.027529941052895E-5	DESIGN
" collection_ where " +	WITHOUT_CLASSIFICATION	0.9999516382491898	WITHOUT_CLASSIFICATION	4.836175081014894E-5	DESIGN
unsupported	WITHOUT_CLASSIFICATION	0.9999530626110165	WITHOUT_CLASSIFICATION	4.693738898349722E-5	DESIGN
unsupported	WITHOUT_CLASSIFICATION	0.9999530626110165	WITHOUT_CLASSIFICATION	4.693738898349722E-5	DESIGN
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999567356535347	WITHOUT_CLASSIFICATION	4.32643464652935E-5	DESIGN
the following two lines were added to ensure that this.params is not null, which can happen with two-deep nested subqueries	WITHOUT_CLASSIFICATION	0.9999665180180968	WITHOUT_CLASSIFICATION	3.348198190319828E-5	DESIGN
with two-deep subqueries, the same alias would get generated for both using the old method (criteriaQuery.generateSQLAlias()), so that is now used as a fallback if the main criteria alias isn't set	WITHOUT_CLASSIFICATION	0.9476772805044283	WITHOUT_CLASSIFICATION	0.05232271949557163	DESIGN
implicit polymorphism not supported (would need a union)	WITHOUT_CLASSIFICATION	0.9986944403680021	WITHOUT_CLASSIFICATION	0.0013055596319978583	DESIGN
pull off the last ", "	WITHOUT_CLASSIFICATION	0.9999950193774938	WITHOUT_CLASSIFICATION	4.980622506252847E-6	DESIGN
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999113734108903	WITHOUT_CLASSIFICATION	8.862658910963415E-5	DESIGN
we have the form: trim(trimSource) so we trim leading and trailing spaces	WITHOUT_CLASSIFICATION	0.9998295741885923	WITHOUT_CLASSIFICATION	1.704258114077309E-4	DESIGN
we have the form: trim(from trimSource). This is functionally equivalent to trim(trimSource)	WITHOUT_CLASSIFICATION	0.9977584667524233	WITHOUT_CLASSIFICATION	0.002241533247576644	DESIGN
NOT_SUPPORTED_SHOULD_USE_JDBC3_PreparedStatement.getGeneratedKeys_method	WITHOUT_CLASSIFICATION	0.9994226996701397	WITHOUT_CLASSIFICATION	5.773003298601926E-4	DESIGN
potentialTrimCharacterArgIndex = 1 assumes that a trim-specification has been specified. we handle the exception to that explicitly	WITHOUT_CLASSIFICATION	0.9997302193994004	WITHOUT_CLASSIFICATION	2.6978060059950856E-4	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996055295154423	WITHOUT_CLASSIFICATION	3.9447048455769953E-4	DESIGN
Oracle did add support for ANSI CASE statements in 9i	WITHOUT_CLASSIFICATION	0.997577828308472	WITHOUT_CLASSIFICATION	0.002422171691527938	DESIGN
the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.999367685065941	WITHOUT_CLASSIFICATION	6.32314934058972E-4	DESIGN
Informix doesn't have a bit type	WITHOUT_CLASSIFICATION	0.9993653181034947	WITHOUT_CLASSIFICATION	6.346818965052801E-4	DESIGN
or BYTE or TEXT? or MONEY	WITHOUT_CLASSIFICATION	0.9999639620378499	WITHOUT_CLASSIFICATION	3.603796215006164E-5	DESIGN
strip table-owner because Informix always returns constraint names as "<table-owner>.<constraint-name>"	WITHOUT_CLASSIFICATION	0.9993836777864442	WITHOUT_CLASSIFICATION	6.163222135558225E-4	DESIGN
build the map of standard ANSI SQL aggregation functions ~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9989864929989206	WITHOUT_CLASSIFICATION	0.0010135070010793472	DESIGN
pre H3.2 behavior: super.getReturnType(ct, m);	WITHOUT_CLASSIFICATION	0.9994226996701397	WITHOUT_CLASSIFICATION	5.773003298601926E-4	DESIGN
finally use the sqltype if == on Hibernate types did not find a match.	WITHOUT_CLASSIFICATION	0.9997293575873059	WITHOUT_CLASSIFICATION	2.7064241269423125E-4	DESIGN
because numeric can be anything	WITHOUT_CLASSIFICATION	0.9998025125297041	WITHOUT_CLASSIFICATION	1.974874702959241E-4	DESIGN
constructors and factory methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9922226156141883	WITHOUT_CLASSIFICATION	0.007777384385811644	DESIGN
standard sql92 functions (can be overridden by subclasses)	WITHOUT_CLASSIFICATION	0.9938834147250374	WITHOUT_CLASSIFICATION	0.006116585274962685	DESIGN
map second/minute/hour/day/month/year to ANSI extract(), override on subclasses	WITHOUT_CLASSIFICATION	0.9987049349752971	WITHOUT_CLASSIFICATION	0.0012950650247028266	DESIGN
register hibernate types for default use in scalar sqlquery type auto detection	WITHOUT_CLASSIFICATION	0.9781436949430694	WITHOUT_CLASSIFICATION	0.02185630505693056	DESIGN
database type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.988672739214328	WITHOUT_CLASSIFICATION	0.011327260785672	DESIGN
hibernate type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.988672739214328	WITHOUT_CLASSIFICATION	0.011327260785672	DESIGN
keyword support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9977910129486526	WITHOUT_CLASSIFICATION	0.002208987051347415	DESIGN
native identifier generatiion ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99947077888682	WITHOUT_CLASSIFICATION	5.292211131799272E-4	DESIGN
IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.997002828029891	WITHOUT_CLASSIFICATION	0.0029971719701089505	DESIGN
SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.997002828029891	WITHOUT_CLASSIFICATION	0.0029971719701089505	DESIGN
GUID support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.997002828029891	WITHOUT_CLASSIFICATION	0.0029971719701089505	DESIGN
limit/offset support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.997002828029891	WITHOUT_CLASSIFICATION	0.0029971719701089505	DESIGN
by default we report no support	WITHOUT_CLASSIFICATION	0.996126626482244	WITHOUT_CLASSIFICATION	0.003873373517755939	DESIGN
by default we report no support for NOWAIT lock semantics	WITHOUT_CLASSIFICATION	0.9436015332891562	WITHOUT_CLASSIFICATION	0.056398466710843934	DESIGN
table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9986750986749142	WITHOUT_CLASSIFICATION	0.001324901325085822	DESIGN
temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9678289460376182	WITHOUT_CLASSIFICATION	0.03217105396238193	DESIGN
callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9971337306905744	WITHOUT_CLASSIFICATION	0.0028662693094256026	DESIGN
current timestamp support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9973782814656839	WITHOUT_CLASSIFICATION	0.0026217185343160895	DESIGN
SQLException support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.997002828029891	WITHOUT_CLASSIFICATION	0.0029971719701089505	DESIGN
miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.997002828029891	WITHOUT_CLASSIFICATION	0.0029971719701089505	DESIGN
identifier quoting support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.997002828029891	WITHOUT_CLASSIFICATION	0.0029971719701089505	DESIGN
DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.997002828029891	WITHOUT_CLASSIFICATION	0.0029971719701089505	DESIGN
grrr... for differentiation of mysql storage engines	WITHOUT_CLASSIFICATION	0.9994171180963733	WITHOUT_CLASSIFICATION	5.828819036267441E-4	DESIGN
Informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994226996701397	WITHOUT_CLASSIFICATION	5.773003298601926E-4	DESIGN
return false here, as most databases do not properly support this construct...	WITHOUT_CLASSIFICATION	0.999501370504646	WITHOUT_CLASSIFICATION	4.986294953540397E-4	DESIGN
Mckoi has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9985700325315909	WITHOUT_CLASSIFICATION	0.0014299674684091002	DESIGN
Oracle8 and previous define only a "DATE" type which is used to represent all aspects of date/time	WITHOUT_CLASSIFICATION	0.9686794254704734	WITHOUT_CLASSIFICATION	0.03132057452952672	DESIGN
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999607083848806	WITHOUT_CLASSIFICATION	3.929161511946166E-5	DESIGN
" cascade";	WITHOUT_CLASSIFICATION	0.9999623986536439	WITHOUT_CLASSIFICATION	3.760134635620162E-5	DESIGN
trim off the length/precision/scale	WITHOUT_CLASSIFICATION	0.9999161828498849	WITHOUT_CLASSIFICATION	8.381715011508512E-5	DESIGN
public boolean dropTemporaryTableAfterUse() {we have to, because postgres sets current txto rollback only after a failed create tablereturn true;}	WITHOUT_CLASSIFICATION	0.9998870794517869	WITHOUT_CLASSIFICATION	1.1292054821302822E-4	DESIGN
CHECK VIOLATION	WITHOUT_CLASSIFICATION	0.9999530626110165	WITHOUT_CLASSIFICATION	4.693738898349722E-5	DESIGN
UNIQUE VIOLATION	WITHOUT_CLASSIFICATION	0.9999530626110165	WITHOUT_CLASSIFICATION	4.693738898349722E-5	DESIGN
FOREIGN KEY VIOLATION	WITHOUT_CLASSIFICATION	0.9999608966083426	WITHOUT_CLASSIFICATION	3.910339165735296E-5	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996055295154423	WITHOUT_CLASSIFICATION	3.9447048455769953E-4	DESIGN
NOT NULL VIOLATION	WITHOUT_CLASSIFICATION	0.9998728114545756	WITHOUT_CLASSIFICATION	1.2718854542426256E-4	DESIGN
ALL OTHER	WITHOUT_CLASSIFICATION	0.9999110576836945	WITHOUT_CLASSIFICATION	8.894231630541466E-5	DESIGN
Register the type of the out param - PostgreSQL uses Types.OTHER	WITHOUT_CLASSIFICATION	0.9931503579352047	WITHOUT_CLASSIFICATION	0.006849642064795411	DESIGN
seems to not really... public boolean supportsRowValueConstructorSyntax() { return true; }	WITHOUT_CLASSIFICATION	0.9998059199234284	WITHOUT_CLASSIFICATION	1.9408007657160562E-4	DESIGN
seems to have spotty LOB suppport	WITHOUT_CLASSIFICATION	0.9996506461993402	WITHOUT_CLASSIFICATION	3.4935380065974076E-4	DESIGN
HHH-2300	WITHOUT_CLASSIFICATION	0.9999113734108903	WITHOUT_CLASSIFICATION	8.862658910963415E-5	DESIGN
ignore (probably H2 not in the classpath)	WITHOUT_CLASSIFICATION	0.999592130953464	WITHOUT_CLASSIFICATION	4.078690465360034E-4	DESIGN
Numeric Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994226996701397	WITHOUT_CLASSIFICATION	5.773003298601926E-4	DESIGN
String Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.998901209256958	WITHOUT_CLASSIFICATION	0.0010987907430419284	DESIGN
Time and Date Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993197579549421	WITHOUT_CLASSIFICATION	6.802420450578828E-4	DESIGN
System Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994327531876227	WITHOUT_CLASSIFICATION	5.672468123773648E-4	DESIGN
not null is implicit	WITHOUT_CLASSIFICATION	0.9998766411914719	WITHOUT_CLASSIFICATION	1.2335880852817394E-4	DESIGN
23000: Check constraint violation: {0} 23001: Unique index or primary key violation: {0}	WITHOUT_CLASSIFICATION	0.9993915982239686	WITHOUT_CLASSIFICATION	6.084017760314023E-4	DESIGN
Display the dialect version.	WITHOUT_CLASSIFICATION	0.9999864140682939	WITHOUT_CLASSIFICATION	1.3585931706165222E-5	DESIGN
The RDMS concat() function only supports 2 parameters	WITHOUT_CLASSIFICATION	0.9998249376972562	WITHOUT_CLASSIFICATION	1.7506230274377758E-4	DESIGN
Dialect method overrides ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9978807406628233	WITHOUT_CLASSIFICATION	0.002119259337176722	DESIGN
Original Dialect.java returns " for update";	WITHOUT_CLASSIFICATION	0.9986109447495414	WITHOUT_CLASSIFICATION	0.0013890552504586442	DESIGN
Verify the state of this new method in Hibernate 3.0 Dialect.java	WITHOUT_CLASSIFICATION	0.998451980329198	WITHOUT_CLASSIFICATION	0.0015480196708019455	DESIGN
Origial Dialect.java returns true;	WITHOUT_CLASSIFICATION	0.9993305338386473	WITHOUT_CLASSIFICATION	6.694661613526716E-4	DESIGN
The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9972866234035832	WITHOUT_CLASSIFICATION	0.0027133765964167636	DESIGN
Sequence methods - start. The RDMS dialect needs these	WITHOUT_CLASSIFICATION	0.975058575422216	WITHOUT_CLASSIFICATION	0.024941424577783977	DESIGN
methods to make it possible to use the Native Id generator	WITHOUT_CLASSIFICATION	0.9969120276235292	WITHOUT_CLASSIFICATION	0.0030879723764709022	DESIGN
The where clause was added to eliminate this statement from Brute Force Searches.	WITHOUT_CLASSIFICATION	0.996953895189633	WITHOUT_CLASSIFICATION	0.0030461048103671076	DESIGN
Sequence methods - end	WITHOUT_CLASSIFICATION	0.9996797616472208	WITHOUT_CLASSIFICATION	3.202383527791279E-4	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996055295154423	WITHOUT_CLASSIFICATION	3.9447048455769953E-4	DESIGN
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999607083848806	WITHOUT_CLASSIFICATION	3.929161511946166E-5	DESIGN
We must return a valid RDMS/RSA command from this method to prevent RDMS/RSA from issuing ERROR 400	WITHOUT_CLASSIFICATION	0.965629191907723	WITHOUT_CLASSIFICATION	0.034370808092277015	DESIGN
Used with DROP TABLE to delete all records in the table.	WITHOUT_CLASSIFICATION	0.9998087588935912	WITHOUT_CLASSIFICATION	1.912411064088131E-4	DESIGN
RDMS supports the UNION ALL clause.	WITHOUT_CLASSIFICATION	0.9997398302423348	WITHOUT_CLASSIFICATION	2.6016975766508706E-4	DESIGN
RDMS has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9985700325315909	WITHOUT_CLASSIFICATION	0.0014299674684091002	DESIGN
Multi-param dialect functions...	WITHOUT_CLASSIFICATION	0.9994226996701397	WITHOUT_CLASSIFICATION	5.773003298601926E-4	DESIGN
function templates	WITHOUT_CLASSIFICATION	0.999971339539393	WITHOUT_CLASSIFICATION	2.8660460607106564E-5	DESIGN
not null is implicit	WITHOUT_CLASSIFICATION	0.9998766411914719	WITHOUT_CLASSIFICATION	1.2335880852817394E-4	DESIGN
this assumes schema support, which is present in 1.8.0 and later...	WITHOUT_CLASSIFICATION	0.9979372420503289	WITHOUT_CLASSIFICATION	0.002062757949671108	DESIGN
HSQLDB only supports READ_UNCOMMITTED transaction isolation	WITHOUT_CLASSIFICATION	0.9996516940719252	WITHOUT_CLASSIFICATION	3.483059280747794E-4	DESIGN
Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9995194634504537	WITHOUT_CLASSIFICATION	4.805365495463206E-4	DESIGN
Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9994226996701397	WITHOUT_CLASSIFICATION	5.773003298601926E-4	DESIGN
Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9994226996701397	WITHOUT_CLASSIFICATION	5.773003298601926E-4	DESIGN
simple nullability constraint	WITHOUT_CLASSIFICATION	0.999960677031912	WITHOUT_CLASSIFICATION	3.932296808782239E-5	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996055295154423	WITHOUT_CLASSIFICATION	3.9447048455769953E-4	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996055295154423	WITHOUT_CLASSIFICATION	3.9447048455769953E-4	DESIGN
not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9998512441670779	WITHOUT_CLASSIFICATION	1.4875583292206455E-4	DESIGN
register the type of the out param - an Oracle specific type	WITHOUT_CLASSIFICATION	0.9948321607210866	WITHOUT_CLASSIFICATION	0.005167839278913414	DESIGN
TimesTen has no BLOB/CLOB support, but these types may be suitable for some applications. The length is limited to 4 million bytes.	WITHOUT_CLASSIFICATION	0.9988326327838752	WITHOUT_CLASSIFICATION	0.0011673672161248258	DESIGN
new methods in dialect3	WITHOUT_CLASSIFICATION	0.9998601163808017	WITHOUT_CLASSIFICATION	1.3988361919823518E-4	DESIGN
public boolean supportsForUpdateNowait() {return false;}	WITHOUT_CLASSIFICATION	0.9996560414002472	WITHOUT_CLASSIFICATION	3.43958599752806E-4	DESIGN
TimesTen has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9985700325315909	WITHOUT_CLASSIFICATION	0.0014299674684091002	DESIGN
iterate entries ordered by capacity to find first fit	WITHOUT_CLASSIFICATION	0.9852851069684243	WITHOUT_CLASSIFICATION	0.01471489303157576	DESIGN
add new ordered map	WITHOUT_CLASSIFICATION	0.9999810477872058	WITHOUT_CLASSIFICATION	1.8952212794232292E-5	DESIGN
registerColumnType( Types.VARCHAR, 16777215, "mediumtext" );	WITHOUT_CLASSIFICATION	0.9994226996701397	WITHOUT_CLASSIFICATION	5.773003298601926E-4	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996055295154423	WITHOUT_CLASSIFICATION	3.9447048455769953E-4	DESIGN
This assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.9982880554901181	WITHOUT_CLASSIFICATION	0.0017119445098818656	DESIGN
sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9991856541180766	WITHOUT_CLASSIFICATION	8.143458819234923E-4	DESIGN
return "select CURRENT_TIMESTAMP from RDB$DATABASE";	WITHOUT_CLASSIFICATION	0.9993469758216443	WITHOUT_CLASSIFICATION	6.530241783556924E-4	DESIGN
registerColumnType data types	WITHOUT_CLASSIFICATION	0.9999000752620025	WITHOUT_CLASSIFICATION	9.992473799748394E-5	DESIGN
hibernate seems to ignore this type...	WITHOUT_CLASSIFICATION	0.9971673699236213	WITHOUT_CLASSIFICATION	0.002832630076378762	DESIGN
IBID for current_time and current_date	WITHOUT_CLASSIFICATION	0.9986235034214013	WITHOUT_CLASSIFICATION	0.001376496578598713	DESIGN
Tell hibernate to use getBytes instead of getBinaryStream	WITHOUT_CLASSIFICATION	0.9979549341618669	WITHOUT_CLASSIFICATION	0.0020450658381330916	DESIGN
No batch statements	WITHOUT_CLASSIFICATION	0.9999771596561192	WITHOUT_CLASSIFICATION	2.2840343880793397E-5	DESIGN
We might want a special case for 19,2. This is very common for money types and here it is converted to 18,1	WITHOUT_CLASSIFICATION	0.5694451489585242	WITHOUT_CLASSIFICATION	0.43055485104147573	DESIGN
no pointbase BIT	WITHOUT_CLASSIFICATION	0.9999796777616381	WITHOUT_CLASSIFICATION	2.0322238361903355E-5	DESIGN
no pointbase TINYINT	WITHOUT_CLASSIFICATION	0.9999796777616381	WITHOUT_CLASSIFICATION	2.0322238361903355E-5	DESIGN
Pointbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9985700325315909	WITHOUT_CLASSIFICATION	0.0014299674684091002	DESIGN
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999607083848806	WITHOUT_CLASSIFICATION	3.929161511946166E-5	DESIGN
The current_timestamp is more accurate, but only known to be supported in SQL Server 7.0 and later (i.e., Sybase not known to support it at all)	WITHOUT_CLASSIFICATION	0.988622383953252	WITHOUT_CLASSIFICATION	0.011377616046748026	DESIGN
SQL Server (at least up through 2005) does not support defining cascade delete constraints which can circel back to the mutating table	WITHOUT_CLASSIFICATION	0.9998295678799481	WITHOUT_CLASSIFICATION	1.704321200518729E-4	DESIGN
here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9987668517487156	WITHOUT_CLASSIFICATION	0.001233148251284404	DESIGN
registerColumnType( Types.BLOB, 16777215, "mediumblob" ); registerColumnType( Types.BLOB, 65535, "blob" );	WITHOUT_CLASSIFICATION	0.9994226996701397	WITHOUT_CLASSIFICATION	5.773003298601926E-4	DESIGN
registerColumnType( Types.CLOB, 16777215, "mediumtext" ); registerColumnType( Types.CLOB, 65535, "text" );	WITHOUT_CLASSIFICATION	0.9994226996701397	WITHOUT_CLASSIFICATION	5.773003298601926E-4	DESIGN
registerColumnType( Types.VARCHAR, 16777215, "mediumtext" ); registerColumnType( Types.VARCHAR, 65535, "text" );	WITHOUT_CLASSIFICATION	0.9994226996701397	WITHOUT_CLASSIFICATION	5.773003298601926E-4	DESIGN
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999607083848806	WITHOUT_CLASSIFICATION	3.929161511946166E-5	DESIGN
package-private	WITHOUT_CLASSIFICATION	0.9999530626110165	WITHOUT_CLASSIFICATION	4.693738898349722E-5	DESIGN
sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9991856541180766	WITHOUT_CLASSIFICATION	8.143458819234923E-4	DESIGN
Sybase BIT type does not support null values	WITHOUT_CLASSIFICATION	0.9948313337416953	WITHOUT_CLASSIFICATION	0.005168666258304694	DESIGN
This assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.9982880554901181	WITHOUT_CLASSIFICATION	0.0017119445098818656	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996055295154423	WITHOUT_CLASSIFICATION	3.9447048455769953E-4	DESIGN
You may still have other ResultSets or update counts left to process here but you can't do it now or the ResultSet you just got will be closed	WITHOUT_CLASSIFICATION	0.9999962022840315	WITHOUT_CLASSIFICATION	3.797715968329022E-6	DESIGN
not null ... (start with 1) is implicit	WITHOUT_CLASSIFICATION	0.9950732623511429	WITHOUT_CLASSIFICATION	0.004926737648857109	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996055295154423	WITHOUT_CLASSIFICATION	3.9447048455769953E-4	DESIGN
Oracle driver reports to support getGeneratedKeys(), but they only support the version taking an array of the names of the columns to be returned (via its RETURNING clause). No other driver seems to support this overloaded version.	WITHOUT_CLASSIFICATION	0.9986367446133679	WITHOUT_CLASSIFICATION	0.001363255386632152	DESIGN
Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9995194634504537	WITHOUT_CLASSIFICATION	4.805365495463206E-4	DESIGN
Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9994226996701397	WITHOUT_CLASSIFICATION	5.773003298601926E-4	DESIGN
Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9994226996701397	WITHOUT_CLASSIFICATION	5.773003298601926E-4	DESIGN
add another (inner) nested select add the main query close off the inner nested select	WITHOUT_CLASSIFICATION	0.9999781304132684	WITHOUT_CLASSIFICATION	2.18695867315832E-5	DESIGN
add the main query	WITHOUT_CLASSIFICATION	0.9999956460574699	WITHOUT_CLASSIFICATION	4.353942530090113E-6	DESIGN
add the restriction to the outer select	WITHOUT_CLASSIFICATION	0.9999067851635819	WITHOUT_CLASSIFICATION	9.321483641806731E-5	DESIGN
This assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.9982880554901181	WITHOUT_CLASSIFICATION	0.0017119445098818656	DESIGN
You may still have other ResultSets or update counts left to process here but you can't do it now or the ResultSet you just got will be closed	WITHOUT_CLASSIFICATION	0.9999962022840315	WITHOUT_CLASSIFICATION	3.797715968329022E-6	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996055295154423	WITHOUT_CLASSIFICATION	3.9447048455769953E-4	DESIGN
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999607083848806	WITHOUT_CLASSIFICATION	3.929161511946166E-5	DESIGN
simple nullability constraint	WITHOUT_CLASSIFICATION	0.999960677031912	WITHOUT_CLASSIFICATION	3.932296808782239E-5	DESIGN
not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9998512441670779	WITHOUT_CLASSIFICATION	1.4875583292206455E-4	DESIGN
register the type of the out param - an Oracle specific type	WITHOUT_CLASSIFICATION	0.9948321607210866	WITHOUT_CLASSIFICATION	0.005167839278913414	DESIGN
features which change between 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9983241952580881	WITHOUT_CLASSIFICATION	0.001675804741911904	DESIGN
features which remain constant across 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992041778513001	WITHOUT_CLASSIFICATION	7.958221486998921E-4	DESIGN
binary %Stream character %Stream	WITHOUT_CLASSIFICATION	0.9997485116211946	WITHOUT_CLASSIFICATION	2.514883788053985E-4	DESIGN
getDefaultProperties().setProperty(Environment.STATEMENT_BATCH_SIZE, NO_BATCH);	WITHOUT_CLASSIFICATION	0.9994226996701397	WITHOUT_CLASSIFICATION	5.773003298601926E-4	DESIGN
hibernate impelemnts cast in Dialect.java	WITHOUT_CLASSIFICATION	0.9990893211853136	WITHOUT_CLASSIFICATION	9.106788146863286E-4	DESIGN
aggregate functions shouldn't be registered, right? registerFunction( "list", new StandardSQLFunction("list",Hibernate.STRING) ); stopped on $list	WITHOUT_CLASSIFICATION	0.9987206761978668	WITHOUT_CLASSIFICATION	0.0012793238021332183	DESIGN
DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.997002828029891	WITHOUT_CLASSIFICATION	0.0029971719701089505	DESIGN
below is for Cache' that don't have str in 2007.1 there is str and we register str directly	WITHOUT_CLASSIFICATION	0.9922894276156552	WITHOUT_CLASSIFICATION	0.007710572384344867	DESIGN
note that %string is deprecated	WITHOUT_CLASSIFICATION	0.994739504541349	WITHOUT_CLASSIFICATION	0.005260495458651101	DESIGN
%upper is deprecated	WITHOUT_CLASSIFICATION	0.9997333463733615	WITHOUT_CLASSIFICATION	2.6665362663852763E-4	DESIGN
The syntax used to add a foreign key constraint to a table.	WITHOUT_CLASSIFICATION	0.9995007245185685	WITHOUT_CLASSIFICATION	4.992754814315696E-4	DESIGN
identifier-commalist	WITHOUT_CLASSIFICATION	0.9999530626110165	WITHOUT_CLASSIFICATION	4.693738898349722E-5	DESIGN
IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.997002828029891	WITHOUT_CLASSIFICATION	0.0029971719701089505	DESIGN
SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.997002828029891	WITHOUT_CLASSIFICATION	0.0029971719701089505	DESIGN
temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9678289460376182	WITHOUT_CLASSIFICATION	0.03217105396238193	DESIGN
identifier-commalist	WITHOUT_CLASSIFICATION	0.9999530626110165	WITHOUT_CLASSIFICATION	4.693738898349722E-5	DESIGN
The syntax used to add a column to a table	WITHOUT_CLASSIFICATION	0.9996715948409829	WITHOUT_CLASSIFICATION	3.284051590170423E-4	DESIGN
Completely optional cascading drop clause.	WITHOUT_CLASSIFICATION	0.9996410071686337	WITHOUT_CLASSIFICATION	3.5899283136628217E-4	DESIGN
lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9951469465028842	WITHOUT_CLASSIFICATION	0.004853053497115848	DESIGN
LIMIT support (ala TOP) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.997002828029891	WITHOUT_CLASSIFICATION	0.0029971719701089505	DESIGN
InterSystems Cache' does not current support "SELECT ... FOR UPDATE" syntax... Set your transaction mode to READ_COMMITTED before using	WITHOUT_CLASSIFICATION	0.9935176760639981	WITHOUT_CLASSIFICATION	0.006482323936001904	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996055295154423	WITHOUT_CLASSIFICATION	3.9447048455769953E-4	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996055295154423	WITHOUT_CLASSIFICATION	3.9447048455769953E-4	DESIGN
<String>	WITHOUT_CLASSIFICATION	0.9999113734108903	WITHOUT_CLASSIFICATION	8.862658910963415E-5	DESIGN
callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9971337306905744	WITHOUT_CLASSIFICATION	0.0028662693094256026	DESIGN
miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.997002828029891	WITHOUT_CLASSIFICATION	0.0029971719701089505	DESIGN
The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9972866234035832	WITHOUT_CLASSIFICATION	0.0027133765964167636	DESIGN
Does the LIMIT clause come at the start of the SELECT statement, rather than at the end?	WITHOUT_CLASSIFICATION	0.9990108773501513	WITHOUT_CLASSIFICATION	9.89122649848718E-4	DESIGN
Does the LIMIT clause take a "maximum" row number instead of a total number of returned rows?	WITHOUT_CLASSIFICATION	0.9992366258420077	WITHOUT_CLASSIFICATION	7.633741579923557E-4	DESIGN
The name of the SQL function that transforms a string to lowercase	WITHOUT_CLASSIFICATION	0.9993001407325224	WITHOUT_CLASSIFICATION	6.998592674776536E-4	DESIGN
Create an OuterJoinGenerator for this dialect.	WITHOUT_CLASSIFICATION	0.9986749354384545	WITHOUT_CLASSIFICATION	0.001325064561545433	DESIGN
The keyword used to insert a row without specifying any column values	WITHOUT_CLASSIFICATION	0.9998152077231977	WITHOUT_CLASSIFICATION	1.84792276802387E-4	DESIGN
registerFunction( "trim", new StandardSQLFunction( "trim", Hibernate.STRING ) );	WITHOUT_CLASSIFICATION	0.9992834119241285	WITHOUT_CLASSIFICATION	7.165880758714476E-4	DESIGN
skip the FROM keyword in params	WITHOUT_CLASSIFICATION	0.9998752407947352	WITHOUT_CLASSIFICATION	1.2475920526479166E-4	DESIGN
package	WITHOUT_CLASSIFICATION	0.9997312868516849	WITHOUT_CLASSIFICATION	2.6871314831509904E-4	DESIGN
potentialTrimCharacterArgIndex = 1 assumes that a trim-specification has been specified. we handle the exception to that explicitly	WITHOUT_CLASSIFICATION	0.9997302193994004	WITHOUT_CLASSIFICATION	2.6978060059950856E-4	DESIGN
SQLFunction implementation	WITHOUT_CLASSIFICATION	0.9999352108724393	WITHOUT_CLASSIFICATION	6.478912756079777E-5	DESIGN
conceivable that the dialect ctor could throw HibernateExceptions, so don't re-wrap	WITHOUT_CLASSIFICATION	0.9993065310773098	WITHOUT_CLASSIFICATION	6.934689226901003E-4	DESIGN
register the standard dialect resolver	WITHOUT_CLASSIFICATION	0.9994431541475931	WITHOUT_CLASSIFICATION	5.568458524069945E-4	DESIGN
register resolvers set via Environment property	WITHOUT_CLASSIFICATION	0.9991463850981119	WITHOUT_CLASSIFICATION	8.536149018880719E-4	DESIGN
kept for backward compatibility until after the 3.1beta5 release of HA	WITHOUT_CLASSIFICATION	0.9998983226880407	WITHOUT_CLASSIFICATION	1.0167731195930697E-4	DESIGN
cache the hashcode	WITHOUT_CLASSIFICATION	0.9999821522325891	WITHOUT_CLASSIFICATION	1.7847767410841688E-5	DESIGN
the CascadingAction contract ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997789379979892	WITHOUT_CLASSIFICATION	2.2106200201078938E-4	DESIGN
the CascadingAction implementations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997813485626988	WITHOUT_CLASSIFICATION	2.1865143730122758E-4	DESIGN
delete does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9991337966072076	WITHOUT_CLASSIFICATION	8.662033927924592E-4	DESIGN
orphans should be deleted during delete	WITHOUT_CLASSIFICATION	0.9957527911636449	WITHOUT_CLASSIFICATION	0.004247208836355073	DESIGN
(LockMode) anything	WITHOUT_CLASSIFICATION	0.9999866035032511	WITHOUT_CLASSIFICATION	1.3396496748914735E-5	DESIGN
lock doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9993634757445194	WITHOUT_CLASSIFICATION	6.365242554806586E-4	DESIGN
refresh doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9996464491326313	WITHOUT_CLASSIFICATION	3.5355086736866924E-4	DESIGN
evicts don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.998455384131108	WITHOUT_CLASSIFICATION	0.0015446158688919504	DESIGN
saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.999003228738001	WITHOUT_CLASSIFICATION	9.967712619990002E-4	DESIGN
orphans should be deleted during save/update	WITHOUT_CLASSIFICATION	0.9942682933239366	WITHOUT_CLASSIFICATION	0.0057317066760633325	DESIGN
for deprecated saveOrUpdateCopy()	WITHOUT_CLASSIFICATION	0.9954000213195984	WITHOUT_CLASSIFICATION	0.004599978680401579	DESIGN
persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.998455384131108	WITHOUT_CLASSIFICATION	0.0015446158688919504	DESIGN
a proxy cannot be transient and it breaks ForeignKeys.isTransient	WITHOUT_CLASSIFICATION	0.9994056573061283	WITHOUT_CLASSIFICATION	5.943426938717535E-4	DESIGN
replicate does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9988296495142198	WITHOUT_CLASSIFICATION	0.0011703504857802703	DESIGN
static helper methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9963850386967286	WITHOUT_CLASSIFICATION	0.0036149613032714066	DESIGN
handles arrays and newly instantiated collections	WITHOUT_CLASSIFICATION	0.9997812420557187	WITHOUT_CLASSIFICATION	2.1875794428126075E-4	DESIGN
Actually the semantics of the next three are really "Bag" Note that, unlike objects, collection insertions, updates, deletions are not really remembered between flushes. We just re-use the same Lists for convenience.	WITHOUT_CLASSIFICATION	0.9712492760049105	WITHOUT_CLASSIFICATION	0.028750723995089503	DESIGN
Add these directly to the executions queue	WITHOUT_CLASSIFICATION	0.9993662200279425	WITHOUT_CLASSIFICATION	6.337799720574559E-4	DESIGN
continue loop	WITHOUT_CLASSIFICATION	0.9999464532276292	WITHOUT_CLASSIFICATION	5.354677237081815E-5	DESIGN
sort the updates by fk	WITHOUT_CLASSIFICATION	0.9999729784540424	WITHOUT_CLASSIFICATION	2.702154595753793E-5	DESIGN
sort the updates by pk	WITHOUT_CLASSIFICATION	0.9999729784540424	WITHOUT_CLASSIFICATION	2.702154595753793E-5	DESIGN
the mapping of entity names to their latest batch numbers.	WITHOUT_CLASSIFICATION	0.9996788035324483	WITHOUT_CLASSIFICATION	3.2119646755170345E-4	DESIGN
the map of batch numbers to EntityInsertAction lists	WITHOUT_CLASSIFICATION	0.9995931227286162	WITHOUT_CLASSIFICATION	4.0687727138377427E-4	DESIGN
optimize the hash size to eliminate a rehash.	WITHOUT_CLASSIFICATION	0.9996747960356304	WITHOUT_CLASSIFICATION	3.2520396436962597E-4	DESIGN
the list of entity names that indicate the batch number	WITHOUT_CLASSIFICATION	0.9998931678961972	WITHOUT_CLASSIFICATION	1.0683210380272006E-4	DESIGN
remove the current element from insertions. It will be added back later.	WITHOUT_CLASSIFICATION	0.9999509903224563	WITHOUT_CLASSIFICATION	4.9009677543770334E-5	DESIGN
the entity associated with the current action.	WITHOUT_CLASSIFICATION	0.9989572196992623	WITHOUT_CLASSIFICATION	0.0010427803007377414	DESIGN
There is already an existing batch for this type of entity. Check to see if the latest batch is acceptable.	WITHOUT_CLASSIFICATION	0.9732146981984289	WITHOUT_CLASSIFICATION	0.026785301801571144	DESIGN
now rebuild the insertions list. There is a batch for each entry in the name list.	WITHOUT_CLASSIFICATION	0.9982507894361364	WITHOUT_CLASSIFICATION	0.0017492105638636218	DESIGN
the current batch number is the latest batch for this entity type.	WITHOUT_CLASSIFICATION	0.9990292948039562	WITHOUT_CLASSIFICATION	9.70705196043703E-4	DESIGN
loop through all the associations of the current entity and make sure that they are processed before the current batch number	WITHOUT_CLASSIFICATION	0.9912596646879005	WITHOUT_CLASSIFICATION	0.008740335312099527	DESIGN
find the batch number associated with the current association, if any.	WITHOUT_CLASSIFICATION	0.999887238654005	WITHOUT_CLASSIFICATION	1.1276134599495396E-4	DESIGN
create a new batch for this type. The batch number is the number of current batches.	WITHOUT_CLASSIFICATION	0.9988841310517979	WITHOUT_CLASSIFICATION	0.0011158689482020946	DESIGN
loop through all the associated entities and make sure they have been processed before the latest batch associated with this entity type.	WITHOUT_CLASSIFICATION	0.9915701592616615	WITHOUT_CLASSIFICATION	0.00842984073833841	DESIGN
since this entity will now be processed in the latest possible batch, we can be assured that it will come after all other associations, there's not need to continue checking.	WITHOUT_CLASSIFICATION	0.9997323104426855	WITHOUT_CLASSIFICATION	2.6768955731448475E-4	DESIGN
cascade to current collection elements	WITHOUT_CLASSIFICATION	0.9990518948420093	WITHOUT_CLASSIFICATION	9.481051579907432E-4	DESIGN
not really necessary, but good for consistency...	WITHOUT_CLASSIFICATION	0.9996287637827468	WITHOUT_CLASSIFICATION	3.7123621725315844E-4	DESIGN
we can't cascade to non-embedded elements	WITHOUT_CLASSIFICATION	0.9993901452073141	WITHOUT_CLASSIFICATION	6.098547926859881E-4	DESIGN
a newly instantiated collection can't have orphans	WITHOUT_CLASSIFICATION	0.9949372461278022	WITHOUT_CLASSIFICATION	0.005062753872197774	DESIGN
handle orphaned entities!!	WITHOUT_CLASSIFICATION	0.9999194982327473	WITHOUT_CLASSIFICATION	8.050176725263074E-5	DESIGN
Loaded entity instances, by EntityUniqueKey	WITHOUT_CLASSIFICATION	0.9989626598602802	WITHOUT_CLASSIFICATION	0.001037340139719853	DESIGN
Identity map of EntityEntry instances, by the entity instance	WITHOUT_CLASSIFICATION	0.9996384591633232	WITHOUT_CLASSIFICATION	3.6154083667683305E-4	DESIGN
Entity proxies, by EntityKey	WITHOUT_CLASSIFICATION	0.9999300766414869	WITHOUT_CLASSIFICATION	6.99233585131212E-5	DESIGN
Snapshots of current database state for entities that have not been loaded	WITHOUT_CLASSIFICATION	0.9995733184434843	WITHOUT_CLASSIFICATION	4.2668155651567826E-4	DESIGN
Identity map of array holder ArrayHolder instances, by the array instance	WITHOUT_CLASSIFICATION	0.9998060491937761	WITHOUT_CLASSIFICATION	1.9395080622389474E-4	DESIGN
Collection wrappers, by the CollectionKey key=CollectionKey, value=PersistentCollection	WITHOUT_CLASSIFICATION	0.9997243084037978	WITHOUT_CLASSIFICATION	2.7569159620214294E-4	DESIGN
Set of EntityKeys of deleted objects	WITHOUT_CLASSIFICATION	0.9993271475066849	WITHOUT_CLASSIFICATION	6.72852493315063E-4	DESIGN
properties that we have tried to load, and not found in the database	WITHOUT_CLASSIFICATION	0.9995064981199676	WITHOUT_CLASSIFICATION	4.935018800324399E-4	DESIGN
A list of collection wrappers that were instantiating during result set processing, that we will need to initialize at the end of the query	WITHOUT_CLASSIFICATION	0.9959006187254124	WITHOUT_CLASSIFICATION	0.0040993812745876695	DESIGN
A container for collections we load up when the owning entity is not yet loaded ... for now, this is purely transient!	WITHOUT_CLASSIFICATION	0.9973344782563485	WITHOUT_CLASSIFICATION	0.0026655217436516135	DESIGN
Downgrade locks	WITHOUT_CLASSIFICATION	0.9999530626110165	WITHOUT_CLASSIFICATION	4.693738898349722E-5	DESIGN
any earlier proxy takes precedence	WITHOUT_CLASSIFICATION	0.9997656625127291	WITHOUT_CLASSIFICATION	2.3433748727092542E-4	DESIGN
unwrap the object	WITHOUT_CLASSIFICATION	0.9999540118774997	WITHOUT_CLASSIFICATION	4.598812250037157E-5	DESIGN
initialize + unwrap the object	WITHOUT_CLASSIFICATION	0.9999789385728424	WITHOUT_CLASSIFICATION	2.106142715756365E-5	DESIGN
return the proxied object	WITHOUT_CLASSIFICATION	0.9999708875092567	WITHOUT_CLASSIFICATION	2.9112490743287944E-5	DESIGN
overwrite old proxy	WITHOUT_CLASSIFICATION	0.9999948661580315	WITHOUT_CLASSIFICATION	5.133841968587202E-6	DESIGN
early exit...	WITHOUT_CLASSIFICATION	0.9999539460586926	WITHOUT_CLASSIFICATION	4.605394130729852E-5	DESIGN
or should it actually throw an exception?	WITHOUT_CLASSIFICATION	0.9703452077690938	WITHOUT_CLASSIFICATION	0.029654792230906255	DESIGN
treat it just like a new collection	WITHOUT_CLASSIFICATION	0.9940782582432413	WITHOUT_CLASSIFICATION	0.005921741756758669	DESIGN
do this work only at the very highest level of the load don't let this method be called recursively	WITHOUT_CLASSIFICATION	0.9952717142852785	WITHOUT_CLASSIFICATION	0.004728285714721484	DESIGN
note that each iteration of the loop may add new elements	WITHOUT_CLASSIFICATION	0.9999943462866308	WITHOUT_CLASSIFICATION	5.65371336930832E-6	DESIGN
it might be an unwrapped collection reference! try to find a wrapper (slowish)	WITHOUT_CLASSIFICATION	0.9948974054938873	WITHOUT_CLASSIFICATION	0.005102594506112705	DESIGN
public boolean isNonExistant(EntityKey key) {return nonExistantEntityKeys.contains(key);}	WITHOUT_CLASSIFICATION	0.9996560414002472	WITHOUT_CLASSIFICATION	3.43958599752806E-4	DESIGN
public boolean isNonExistant(EntityUniqueKey key) {return nonExistentEntityUniqueKeys.contains(key);}	WITHOUT_CLASSIFICATION	0.9996560414002472	WITHOUT_CLASSIFICATION	3.43958599752806E-4	DESIGN
iterate all the entities currently associated with the persistence context.	WITHOUT_CLASSIFICATION	0.9993606319559372	WITHOUT_CLASSIFICATION	6.393680440628114E-4	DESIGN
does this entity entry pertain to the entity persister in which we are interested (owner)?	WITHOUT_CLASSIFICATION	0.9975433247395668	WITHOUT_CLASSIFICATION	0.0024566752604331626	DESIGN
check if the managed object is the parent	WITHOUT_CLASSIFICATION	0.999186883215343	WITHOUT_CLASSIFICATION	8.13116784656902E-4	DESIGN
otherwise, the proxy was pruned during the serialization process	WITHOUT_CLASSIFICATION	0.9998622589837244	WITHOUT_CLASSIFICATION	1.3774101627572478E-4	DESIGN
adds remove as a sort-of alias for delete...	WITHOUT_CLASSIFICATION	0.9986873203381669	WITHOUT_CLASSIFICATION	0.001312679661833017	DESIGN
bad cast	WITHOUT_CLASSIFICATION	0.9998892663161002	WITHOUT_CLASSIFICATION	1.1073368389970073E-4	DESIGN
return lhsPersister.getSubclassPropertyColumnNames(property);	WITHOUT_CLASSIFICATION	0.9995612710695313	WITHOUT_CLASSIFICATION	4.387289304686594E-4	DESIGN
property-refs for associations defined on a component are not supported, so no need to slice	WITHOUT_CLASSIFICATION	0.9988947290130293	WITHOUT_CLASSIFICATION	0.0011052709869706701	DESIGN
if there is no property-ref, assume the join is to the subclass table (ie. the table of the subclass that the association belongs to)	WITHOUT_CLASSIFICATION	0.9998570948920151	WITHOUT_CLASSIFICATION	1.429051079848905E-4	DESIGN
handle a property-ref	WITHOUT_CLASSIFICATION	0.999826026246161	WITHOUT_CLASSIFICATION	1.7397375383907199E-4	DESIGN
NativeSQLQueryReturn	WITHOUT_CLASSIFICATION	0.9999530626110165	WITHOUT_CLASSIFICATION	4.693738898349722E-5	DESIGN
final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9996457649611611	WITHOUT_CLASSIFICATION	3.542350388388865E-4	DESIGN
why is all others non final ?	WITHOUT_CLASSIFICATION	0.995168405374925	WITHOUT_CLASSIFICATION	0.0048315946250749395	DESIGN
this.forceCacheRefresh = forceCacheRefresh;	WITHOUT_CLASSIFICATION	0.999921261100112	WITHOUT_CLASSIFICATION	7.873889988796204E-5	DESIGN
HELLA IMPORTANT OPTIMIZATION!!!	WITHOUT_CLASSIFICATION	0.9994653837692012	WITHOUT_CLASSIFICATION	5.346162307986695E-4	DESIGN
return that.type.equals(type) && EqualsHelper.equals(that.value, value);	WITHOUT_CLASSIFICATION	0.9995836393250297	WITHOUT_CLASSIFICATION	4.163606749702728E-4	DESIGN
Must occur after resolving identifiers!	WITHOUT_CLASSIFICATION	0.9976168831411263	WITHOUT_CLASSIFICATION	0.0023831168588737423	DESIGN
take a snapshot	WITHOUT_CLASSIFICATION	0.9998279174921606	WITHOUT_CLASSIFICATION	1.7208250783939645E-4	DESIGN
do a check	WITHOUT_CLASSIFICATION	0.9998928855765343	WITHOUT_CLASSIFICATION	1.0711442346574917E-4	DESIGN
the owning entity may have been deleted and its identifier unset due to identifier-rollback; in which case, try to look up its identifier from the persistence context	WITHOUT_CLASSIFICATION	0.999887530465854	WITHOUT_CLASSIFICATION	1.1246953414594346E-4	DESIGN
do the work	WITHOUT_CLASSIFICATION	0.9999738131822888	WITHOUT_CLASSIFICATION	2.618681771105684E-5	DESIGN
We've been here before	WITHOUT_CLASSIFICATION	0.9998610370609429	WITHOUT_CLASSIFICATION	1.3896293905705587E-4	DESIGN
it is or was referenced _somewhere_	WITHOUT_CLASSIFICATION	0.9993410810979769	WITHOUT_CLASSIFICATION	6.589189020231552E-4	DESIGN
do the work	WITHOUT_CLASSIFICATION	0.9999738131822888	WITHOUT_CLASSIFICATION	2.618681771105684E-5	DESIGN
if either its role changed,	WITHOUT_CLASSIFICATION	0.9999731669836786	WITHOUT_CLASSIFICATION	2.683301632143305E-5	DESIGN
or its key changed	WITHOUT_CLASSIFICATION	0.9999904549778925	WITHOUT_CLASSIFICATION	9.545022107418954E-6	DESIGN
we will need to create new entries	WITHOUT_CLASSIFICATION	0.997818803844748	WITHOUT_CLASSIFICATION	0.0021811961552519305	DESIGN
we will need to remove ye olde entries	WITHOUT_CLASSIFICATION	0.9978437543178147	WITHOUT_CLASSIFICATION	0.0021562456821852677	DESIGN
force initialize!	WITHOUT_CLASSIFICATION	0.9999737757691466	WITHOUT_CLASSIFICATION	2.622423085339623E-5	DESIGN
else if it's elements changed	WITHOUT_CLASSIFICATION	0.9999962984558446	WITHOUT_CLASSIFICATION	3.7015441553332997E-6	DESIGN
ATTRIBUTES MAINTAINED BETWEEN FLUSH CYCLES	WITHOUT_CLASSIFICATION	0.9994226996701397	WITHOUT_CLASSIFICATION	5.773003298601926E-4	DESIGN
session-start/post-flush persistent state	WITHOUT_CLASSIFICATION	0.9993970445637628	WITHOUT_CLASSIFICATION	6.029554362373193E-4	DESIGN
allow the CollectionSnapshot to be serialized	WITHOUT_CLASSIFICATION	0.9979391961416665	WITHOUT_CLASSIFICATION	0.0020608038583334663	DESIGN
ATTRIBUTES USED ONLY DURING FLUSH CYCLE	WITHOUT_CLASSIFICATION	0.9994175263639605	WITHOUT_CLASSIFICATION	5.824736360395201E-4	DESIGN
"current" means the reference that was found during flush()	WITHOUT_CLASSIFICATION	0.9997554051174077	WITHOUT_CLASSIFICATION	2.445948825923068E-4	DESIGN
"loaded" means the reference that is consistent with the current database state	WITHOUT_CLASSIFICATION	0.999702252703532	WITHOUT_CLASSIFICATION	2.977472964680069E-4	DESIGN
during flush, we navigate the object graph to collections and decide what to do with them	WITHOUT_CLASSIFICATION	0.9939588074950096	WITHOUT_CLASSIFICATION	0.006041192504990349	DESIGN
if we instantiate a collection during the flush() process, we must ignore it for the rest of the flush()	WITHOUT_CLASSIFICATION	0.9726125655519565	WITHOUT_CLASSIFICATION	0.02738743444804348	DESIGN
new collections that get found + wrapped during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9995448293827573	WITHOUT_CLASSIFICATION	4.5517061724271253E-4	DESIGN
a newly wrapped collection is NOT dirty (or we get unnecessary version updates)	WITHOUT_CLASSIFICATION	0.9802443569319832	WITHOUT_CLASSIFICATION	0.01975564306801681	DESIGN
collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9999608966083426	WITHOUT_CLASSIFICATION	3.910339165735296E-5	DESIGN
collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9999608966083426	WITHOUT_CLASSIFICATION	3.910339165735296E-5	DESIGN
detached collections that get found + reattached during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9994855877131115	WITHOUT_CLASSIFICATION	5.144122868886022E-4	DESIGN
optimization	WITHOUT_CLASSIFICATION	0.9999530626110165	WITHOUT_CLASSIFICATION	4.693738898349722E-5	DESIGN
optimization optimization	WITHOUT_CLASSIFICATION	0.9999608966083426	WITHOUT_CLASSIFICATION	3.910339165735296E-5	DESIGN
re-snapshot	WITHOUT_CLASSIFICATION	0.9999530626110165	WITHOUT_CLASSIFICATION	4.693738898349722E-5	DESIGN
for convenience to save some lookups	WITHOUT_CLASSIFICATION	0.9985564677815417	WITHOUT_CLASSIFICATION	0.0014435322184582805	DESIGN
NOTE: this is not updated when properties are fetched lazily!	WITHOUT_CLASSIFICATION	0.9995019205105355	WITHOUT_CLASSIFICATION	4.980794894644259E-4	DESIGN
memory optimization	WITHOUT_CLASSIFICATION	0.9999545590893384	WITHOUT_CLASSIFICATION	4.544091066155839E-5	DESIGN
use the id value of a newly instantiated instance as the unsaved-value	WITHOUT_CLASSIFICATION	0.9991699748290983	WITHOUT_CLASSIFICATION	8.300251709017763E-4	DESIGN
copied from Session:	WITHOUT_CLASSIFICATION	0.9994713585528712	WITHOUT_CLASSIFICATION	5.286414471289122E-4	DESIGN
this should not happen since the DTD prevents it	WITHOUT_CLASSIFICATION	0.9997409688248838	WITHOUT_CLASSIFICATION	2.5903117511617347E-4	DESIGN
JoinProcessor needs to know if the where clause fragment came from a dynamic filter or not so it can put the where clause fragment in the right place in the SQL AST. 'hasFilterCondition' keeps track of that fact.	WITHOUT_CLASSIFICATION	0.9472602825172449	WITHOUT_CLASSIFICATION	0.05273971748275504	DESIGN
the current join represents the join between a many-to-many association table and its "target" table. Here we need to apply any additional filters defined specifically on the many-to-many	WITHOUT_CLASSIFICATION	0.9992306432499255	WITHOUT_CLASSIFICATION	7.693567500743921E-4	DESIGN
check basic level one nullablilty	WITHOUT_CLASSIFICATION	0.9996843751272838	WITHOUT_CLASSIFICATION	3.1562487271614997E-4	DESIGN
values is not null and is checkable, we'll look deeper	WITHOUT_CLASSIFICATION	0.9992933045317577	WITHOUT_CLASSIFICATION	7.06695468242422E-4	DESIGN
for non null args, check for components and elements containing components	WITHOUT_CLASSIFICATION	0.9992961210991763	WITHOUT_CLASSIFICATION	7.038789008236612E-4	DESIGN
cache the hashcode	WITHOUT_CLASSIFICATION	0.9999821522325891	WITHOUT_CLASSIFICATION	1.7847767410841688E-5	DESIGN
persistent collections may have components	WITHOUT_CLASSIFICATION	0.9998784891912585	WITHOUT_CLASSIFICATION	1.2151080874146874E-4	DESIGN
check for all components values in the collection	WITHOUT_CLASSIFICATION	0.9997010379528329	WITHOUT_CLASSIFICATION	2.989620471671213E-4	DESIGN
will check current level if some of them are not null or sublevels if they exist	WITHOUT_CLASSIFICATION	0.9988677105280258	WITHOUT_CLASSIFICATION	0.0011322894719741953	DESIGN
do the test	WITHOUT_CLASSIFICATION	0.9999870134034579	WITHOUT_CLASSIFICATION	1.2986596542079056E-5	DESIGN
if its an uninitialized proxy it can't be transient	WITHOUT_CLASSIFICATION	0.9996585840924643	WITHOUT_CLASSIFICATION	3.4141590753564865E-4	DESIGN
unwrap it	WITHOUT_CLASSIFICATION	0.9999102124722052	WITHOUT_CLASSIFICATION	8.978752779481256E-5	DESIGN
See if the entity is already bound to this session, if not look at the entity identifier and assume that the entity is persistent if the id is not "unsaved" (that is, we rely on foreign keys to keep database integrity)	WITHOUT_CLASSIFICATION	0.9932921101145037	WITHOUT_CLASSIFICATION	0.00670788988549625	DESIGN
an unfetched association can only point to an entity that already exists in the db	WITHOUT_CLASSIFICATION	0.999792430102741	WITHOUT_CLASSIFICATION	2.075698972590274E-4	DESIGN
let the interceptor inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9990190805751865	WITHOUT_CLASSIFICATION	9.809194248135615E-4	DESIGN
let the persister inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9987113294485439	WITHOUT_CLASSIFICATION	0.0012886705514561332	DESIGN
we use the assumed value, if there is one, to avoid hitting the database	WITHOUT_CLASSIFICATION	0.9997251512284747	WITHOUT_CLASSIFICATION	2.74848771525269E-4	DESIGN
hit the database, after checking the session cache for a snapshot	WITHOUT_CLASSIFICATION	0.9986712300699725	WITHOUT_CLASSIFICATION	0.0013287699300274514	DESIGN
context-entity-identifier returns null explicitly if the entity is not associated with the persistence context; so make some deeper checks...	WITHOUT_CLASSIFICATION	0.9919575383367139	WITHOUT_CLASSIFICATION	0.00804246166328621	DESIGN
int count = 0;	WITHOUT_CLASSIFICATION	0.9999926623346073	WITHOUT_CLASSIFICATION	7.337665392762759E-6	DESIGN
the first key found after the given key	WITHOUT_CLASSIFICATION	0.999856021018048	WITHOUT_CLASSIFICATION	1.4397898195189784E-4	DESIGN
checkForEnd = false;	WITHOUT_CLASSIFICATION	0.999991198379201	WITHOUT_CLASSIFICATION	8.801620798953641E-6	DESIGN
count++;	WITHOUT_CLASSIFICATION	0.9999113734108903	WITHOUT_CLASSIFICATION	8.862658910963415E-5	DESIGN
end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9996181746927243	WITHOUT_CLASSIFICATION	3.818253072756614E-4	DESIGN
we ran out of keys to try	WITHOUT_CLASSIFICATION	0.9999721886405564	WITHOUT_CLASSIFICATION	2.7811359443642292E-5	DESIGN
first element of array is reserved for the actual instance we are loading!	WITHOUT_CLASSIFICATION	0.9981605277509713	WITHOUT_CLASSIFICATION	0.0018394722490286633	DESIGN
the first id found after the given id	WITHOUT_CLASSIFICATION	0.999869240717275	WITHOUT_CLASSIFICATION	1.3075928272493663E-4	DESIGN
we ran out of ids to try	WITHOUT_CLASSIFICATION	0.9999713701197127	WITHOUT_CLASSIFICATION	2.86298802872863E-5	DESIGN
look for existing collection as part of the persistence context	WITHOUT_CLASSIFICATION	0.9993712202444756	WITHOUT_CLASSIFICATION	6.287797555243511E-4	DESIGN
ignore this row of results! Note the early exit	WITHOUT_CLASSIFICATION	0.999526956062442	WITHOUT_CLASSIFICATION	4.7304393755796717E-4	DESIGN
initialize this collection	WITHOUT_CLASSIFICATION	0.9995429999985842	WITHOUT_CLASSIFICATION	4.570000014157684E-4	DESIGN
create one	WITHOUT_CLASSIFICATION	0.9998754218205012	WITHOUT_CLASSIFICATION	1.2457817949893972E-4	DESIGN
warning: can cause a recursive calls! (proxy initialization)	WITHOUT_CLASSIFICATION	0.997605755602171	WITHOUT_CLASSIFICATION	0.0023942443978290104	DESIGN
there were no queued additions and the role has a cache	WITHOUT_CLASSIFICATION	0.9999771892288297	WITHOUT_CLASSIFICATION	2.2810771170274614E-5	DESIGN
and this is not a forced initialization during flush	WITHOUT_CLASSIFICATION	0.998005316137864	WITHOUT_CLASSIFICATION	0.001994683862135942	DESIGN
some filters affecting the collection are enabled on the session, so do not do the put into the cache.	WITHOUT_CLASSIFICATION	0.9958410083322353	WITHOUT_CLASSIFICATION	0.004158991667764695	DESIGN
cleanup code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9941765958558916	WITHOUT_CLASSIFICATION	0.005823404144108431	DESIGN
loading collection xrefs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9964887482434887	WITHOUT_CLASSIFICATION	0.0035112517565113253	DESIGN
Collection load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994539087734169	WITHOUT_CLASSIFICATION	5.460912265830376E-4	DESIGN
simple cache of param metadata based on query string. Ideally, the original "user-supplied query" string should be used to retreive this metadata (i.e., not the para-list-expanded query string) to avoid unnecessary cache entries. Used solely for caching param metadata for native-sql queries, see getSQLParameterMetadata() for a discussion as to why...	WITHOUT_CLASSIFICATION	0.975225517043362	WITHOUT_CLASSIFICATION	0.024774482956637946	DESIGN
the cache of the actual plans...	WITHOUT_CLASSIFICATION	0.9998373222636249	WITHOUT_CLASSIFICATION	1.6267773637505974E-4	DESIGN
package	WITHOUT_CLASSIFICATION	0.9997312868516849	WITHOUT_CLASSIFICATION	2.6871314831509904E-4	DESIGN
package	WITHOUT_CLASSIFICATION	0.9997312868516849	WITHOUT_CLASSIFICATION	2.6871314831509904E-4	DESIGN
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9994262234457947	WITHOUT_CLASSIFICATION	5.737765542053613E-4	DESIGN
for native-sql queries, the param metadata is determined outside any relation to a query plan, because query plan creation and/or retreival for a native-sql query depends on all of the return types having been set, which might not be the case up-front when param metadata would be most useful	WITHOUT_CLASSIFICATION	0.9909487024268302	WITHOUT_CLASSIFICATION	0.009051297573169833	DESIGN
don't care...	WITHOUT_CLASSIFICATION	0.9999257422782926	WITHOUT_CLASSIFICATION	7.425772170742001E-5	DESIGN
Recognition code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9941738680762728	WITHOUT_CLASSIFICATION	0.005826131923727173	DESIGN
don't care...	WITHOUT_CLASSIFICATION	0.9999257422782926	WITHOUT_CLASSIFICATION	7.425772170742001E-5	DESIGN
NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9998918364440158	WITHOUT_CLASSIFICATION	1.0816355598422052E-4	DESIGN
break the outer loop !!!	WITHOUT_CLASSIFICATION	0.9999837346778679	WITHOUT_CLASSIFICATION	1.6265322131992722E-5	DESIGN
named parameter	WITHOUT_CLASSIFICATION	0.9997078429670486	WITHOUT_CLASSIFICATION	2.921570329513983E-4	DESIGN
could be either an ordinal or JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9987838506004548	WITHOUT_CLASSIFICATION	0.0012161493995451766	DESIGN
a peek ahead showed this as an JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9889535862971778	WITHOUT_CLASSIFICATION	0.011046413702822316	DESIGN
make sure this "name" is an integral	WITHOUT_CLASSIFICATION	0.9897679891592754	WITHOUT_CLASSIFICATION	0.010232010840724582	DESIGN
pre-determine and cache the hashcode	WITHOUT_CLASSIFICATION	0.9997412389282848	WITHOUT_CLASSIFICATION	2.587610717152368E-4	DESIGN
perform the actual work	WITHOUT_CLASSIFICATION	0.9999873963301731	WITHOUT_CLASSIFICATION	1.2603669826986542E-5	DESIGN
if everything went ok, commit the transaction and close the obtained connection handle...	WITHOUT_CLASSIFICATION	0.999885662008923	WITHOUT_CLASSIFICATION	1.1433799107694902E-4	DESIGN
at some point the processing went bad, so we need to: 1) make sure the connection handle gets released 2) try to cleanup the JTA context as much as possible	WITHOUT_CLASSIFICATION	0.9847355801375367	WITHOUT_CLASSIFICATION	0.015264419862463284	DESIGN
finally handle the exception	WITHOUT_CLASSIFICATION	0.9999812112558034	WITHOUT_CLASSIFICATION	1.8788744196591887E-5	DESIGN
a "detached" collection that belonged to a different entity	WITHOUT_CLASSIFICATION	0.9830999568500711	WITHOUT_CLASSIFICATION	0.016900043149928785	DESIGN
saveOrUpdateCopy() is deprecated!	WITHOUT_CLASSIFICATION	0.9991699108711877	WITHOUT_CLASSIFICATION	8.300891288122481E-4	DESIGN
collectionPersister should not be null, but we don't want to throw an exception if it is null	WITHOUT_CLASSIFICATION	0.848211774889732	WITHOUT_CLASSIFICATION	0.151788225110268	DESIGN
otherwise a null or brand new collection this will also (inefficiently) handle arrays, which have no snapshot, so we can't do any better processArrayOrNewCollection(collection, type);	WITHOUT_CLASSIFICATION	0.9584498662383653	WITHOUT_CLASSIFICATION	0.041550133761634724	DESIGN
a "detached" collection that originally belonged to the same entity	WITHOUT_CLASSIFICATION	0.984340021514803	WITHOUT_CLASSIFICATION	0.015659978485197033	DESIGN
do nothing	WITHOUT_CLASSIFICATION	0.9999869850596852	WITHOUT_CLASSIFICATION	1.301494031487855E-5	DESIGN
do nothing	WITHOUT_CLASSIFICATION	0.9999869850596852	WITHOUT_CLASSIFICATION	1.301494031487855E-5	DESIGN
Force a substitution!	WITHOUT_CLASSIFICATION	0.9998923076144719	WITHOUT_CLASSIFICATION	1.0769238552811202E-4	DESIGN
The user requested a "greater" (i.e. more restrictive) form of pessimistic lock	WITHOUT_CLASSIFICATION	0.9935560541174059	WITHOUT_CLASSIFICATION	0.006443945882594131	DESIGN
the database now holds a lock + the object is flushed from the cache, so release the soft lock	WITHOUT_CLASSIFICATION	0.9990824012412335	WITHOUT_CLASSIFICATION	9.175987587664895E-4	DESIGN
now update the object .. has to be outside the main if block above (because of collections)	WITHOUT_CLASSIFICATION	0.9997030144388172	WITHOUT_CLASSIFICATION	2.9698556118285663E-4	DESIGN
Search for collections by reachability, updating their role. We don't want to touch collections reachable from a deleted object	WITHOUT_CLASSIFICATION	0.8617536547905283	WITHOUT_CLASSIFICATION	0.13824634520947157	DESIGN
this is a situation where the entity id is assigned by a post-insert generator and was saved outside the transaction forcing it to be delayed	WITHOUT_CLASSIFICATION	0.9687118629875772	WITHOUT_CLASSIFICATION	0.03128813701242279	DESIGN
NOTE: we need to do the wrap here even if its not "dirty", because collections need wrapping but changes to _them_ don't dirty the container. Also, for versioned data, we need to wrap before calling searchForDirtyCollections	WITHOUT_CLASSIFICATION	0.9991532809794144	WITHOUT_CLASSIFICATION	8.467190205856116E-4	DESIGN
grab its state saved at deletion	WITHOUT_CLASSIFICATION	0.9997043765779082	WITHOUT_CLASSIFICATION	2.9562342209168833E-4	DESIGN
grab its current state	WITHOUT_CLASSIFICATION	0.9999734078164577	WITHOUT_CLASSIFICATION	2.659218354236717E-5	DESIGN
schedule the update note that we intentionally do _not_ pass in currentPersistentState!	WITHOUT_CLASSIFICATION	0.9997779145846	WITHOUT_CLASSIFICATION	2.2208541540002074E-4	DESIGN
substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9987260360577676	WITHOUT_CLASSIFICATION	0.0012739639422323916	DESIGN
give the Interceptor a chance to process property values, if the properties were modified by the Interceptor, we need to set them back to the object	WITHOUT_CLASSIFICATION	0.9985601256477438	WITHOUT_CLASSIFICATION	0.0014398743522562782	DESIGN
compare to cached state (ignoring collections unless versioned)	WITHOUT_CLASSIFICATION	0.9989994843060716	WITHOUT_CLASSIFICATION	0.0010005156939284741	DESIGN
if it was dirtied by a collection only	WITHOUT_CLASSIFICATION	0.9928930547278271	WITHOUT_CLASSIFICATION	0.007106945272172946	DESIGN
increment the version number (if necessary)	WITHOUT_CLASSIFICATION	0.9998122727069358	WITHOUT_CLASSIFICATION	1.8772729306428112E-4	DESIGN
check nullability but do not perform command execute we'll use scheduled updates for that.	WITHOUT_CLASSIFICATION	0.9990476447863704	WITHOUT_CLASSIFICATION	9.523552136296145E-4	DESIGN
give the Interceptor a chance to modify property values	WITHOUT_CLASSIFICATION	0.999926590522948	WITHOUT_CLASSIFICATION	7.340947705199563E-5	DESIGN
now we might need to recalculate the dirtyProperties array	WITHOUT_CLASSIFICATION	0.9983946638544366	WITHOUT_CLASSIFICATION	0.0016053361455633974	DESIGN
use the current version	WITHOUT_CLASSIFICATION	0.9999831988537546	WITHOUT_CLASSIFICATION	1.6801146245370388E-5	DESIGN
Interceptor returned null, so do the dirtycheck ourself, if possible	WITHOUT_CLASSIFICATION	0.9999483994508355	WITHOUT_CLASSIFICATION	5.160054916447975E-5	DESIGN
object loaded by update()	WITHOUT_CLASSIFICATION	0.9998517387738121	WITHOUT_CLASSIFICATION	1.4826122618796398E-4	DESIGN
dirty check against the usual snapshot of the entity	WITHOUT_CLASSIFICATION	0.9999774524380486	WITHOUT_CLASSIFICATION	2.25475619514069E-5	DESIGN
dirty check against the database snapshot, if possible/necessary	WITHOUT_CLASSIFICATION	0.9999674038689513	WITHOUT_CLASSIFICATION	3.2596131048630184E-5	DESIGN
the Interceptor handled the dirty checking	WITHOUT_CLASSIFICATION	0.9997540437132939	WITHOUT_CLASSIFICATION	2.459562867061709E-4	DESIGN
even process null collections	WITHOUT_CLASSIFICATION	0.9999406885464835	WITHOUT_CLASSIFICATION	5.9311453516380925E-5	DESIGN
get the id from the object	WITHOUT_CLASSIFICATION	0.9999640854938482	WITHOUT_CLASSIFICATION	3.591450615181735E-5	DESIGN
always do an INSERT, and let it fail by constraint violation	WITHOUT_CLASSIFICATION	0.9977035017265329	WITHOUT_CLASSIFICATION	0.002296498273467153	DESIGN
what is the version on the database?	WITHOUT_CLASSIFICATION	0.9993296336564785	WITHOUT_CLASSIFICATION	6.703663435215241E-4	DESIGN
/ HHH-2378	WITHOUT_CLASSIFICATION	0.9999436311160822	WITHOUT_CLASSIFICATION	5.6368883917833465E-5	DESIGN
will result in a SQL UPDATE:	WITHOUT_CLASSIFICATION	0.9999544660331096	WITHOUT_CLASSIFICATION	4.553396689046537E-5	DESIGN
else do nothing (don't even reassociate object!)	WITHOUT_CLASSIFICATION	0.9999621832537445	WITHOUT_CLASSIFICATION	3.781674625548462E-5	DESIGN
no existing row - do an insert	WITHOUT_CLASSIFICATION	0.9998987795453786	WITHOUT_CLASSIFICATION	1.0122045462137066E-4	DESIGN
refresh() does not pass an entityName	WITHOUT_CLASSIFICATION	0.999796417165346	WITHOUT_CLASSIFICATION	2.0358283465400417E-4	DESIGN
do not return a proxy! (this option indicates we are initializing a proxy)	WITHOUT_CLASSIFICATION	0.9990491227537286	WITHOUT_CLASSIFICATION	9.508772462713302E-4	DESIGN
return a proxy if appropriate	WITHOUT_CLASSIFICATION	0.9998894875779604	WITHOUT_CLASSIFICATION	1.105124220396229E-4	DESIGN
return existing object or initialized proxy (unless deleted)	WITHOUT_CLASSIFICATION	0.999477779111283	WITHOUT_CLASSIFICATION	5.222208887170392E-4	DESIGN
return new uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999870611094247	WITHOUT_CLASSIFICATION	1.293889057540685E-5	DESIGN
this object was already loaded	WITHOUT_CLASSIFICATION	0.9998694192662273	WITHOUT_CLASSIFICATION	1.3058073377267374E-4	DESIGN
Entity was found in second-level cache...	WITHOUT_CLASSIFICATION	0.9992679919839993	WITHOUT_CLASSIFICATION	7.320080160007383E-4	DESIGN
make it circular-reference safe	WITHOUT_CLASSIFICATION	0.9959226350726762	WITHOUT_CLASSIFICATION	0.004077364927323815	DESIGN
intializes result by side-effect	WITHOUT_CLASSIFICATION	0.9992912311044737	WITHOUT_CLASSIFICATION	7.087688955263425E-4	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Pre-flushing section ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994162688462519	WITHOUT_CLASSIFICATION	5.83731153748096E-4	DESIGN
some statistics	WITHOUT_CLASSIFICATION	0.9999622976380221	WITHOUT_CLASSIFICATION	3.77023619778502E-5	DESIGN
safe from concurrent modification because of how entryList() is implemented on IdentityMap	WITHOUT_CLASSIFICATION	0.99958521750205	WITHOUT_CLASSIFICATION	4.147824979500415E-4	DESIGN
Initialize dirty flags for arrays + collections with composite elements and reset reached, doupdate, etc.	WITHOUT_CLASSIFICATION	0.9998172352732942	WITHOUT_CLASSIFICATION	1.827647267056951E-4	DESIGN
Among other things, updateReachables() will recursively load all collections that are moving roles. This might cause entities to be loaded.	WITHOUT_CLASSIFICATION	0.942164573187236	WITHOUT_CLASSIFICATION	0.05783542681276405	DESIGN
So this needs to be safe from concurrent modification problems. It is safe because of how IdentityMap implements entrySet()	WITHOUT_CLASSIFICATION	0.9657293825301813	WITHOUT_CLASSIFICATION	0.034270617469818715	DESIGN
Update the status of the object and if necessary, schedule an update	WITHOUT_CLASSIFICATION	0.9999478183043817	WITHOUT_CLASSIFICATION	5.218169561816983E-5	DESIGN
Schedule updates to collections:	WITHOUT_CLASSIFICATION	0.9989314650545819	WITHOUT_CLASSIFICATION	0.0010685349454181584	DESIGN
we need to lock the collection caches before executing entity inserts/updates in order to account for bidi associations	WITHOUT_CLASSIFICATION	0.9289590169935896	WITHOUT_CLASSIFICATION	0.07104098300641042	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Post-flushing section ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994162688462519	WITHOUT_CLASSIFICATION	5.83731153748096E-4	DESIGN
the database has changed now, so the subselect results need to be invalidated	WITHOUT_CLASSIFICATION	0.9997751417719487	WITHOUT_CLASSIFICATION	2.2485822805134575E-4	DESIGN
if the collection is dereferenced, remove from the session cache iter.remove(); does not work, since the entrySet is not backed by the set	WITHOUT_CLASSIFICATION	0.998646280173138	WITHOUT_CLASSIFICATION	0.0013537198268620415	DESIGN
otherwise recreate the mapping between the collection and its key	WITHOUT_CLASSIFICATION	0.9962069642710247	WITHOUT_CLASSIFICATION	0.0037930357289752584	DESIGN
get a snapshot	WITHOUT_CLASSIFICATION	0.9999332327724823	WITHOUT_CLASSIFICATION	6.676722751775143E-5	DESIGN
package-private	WITHOUT_CLASSIFICATION	0.9999530626110165	WITHOUT_CLASSIFICATION	4.693738898349722E-5	DESIGN
package-private	WITHOUT_CLASSIFICATION	0.9999530626110165	WITHOUT_CLASSIFICATION	4.693738898349722E-5	DESIGN
key is an entity involved with the operation performed by the listener; value is a flag indicating if the listener explicitly operates on the entity	WITHOUT_CLASSIFICATION	0.9983081149555608	WITHOUT_CLASSIFICATION	0.0016918850444392526	DESIGN
EARLY EXIT!!!	WITHOUT_CLASSIFICATION	0.9999530626110165	WITHOUT_CLASSIFICATION	4.693738898349722E-5	DESIGN
ie. the entity came in from update()	WITHOUT_CLASSIFICATION	0.99948399567786	WITHOUT_CLASSIFICATION	5.160043221400697E-4	DESIGN
before any callbacks, etc, so subdeletions see that this deletion happened first	WITHOUT_CLASSIFICATION	0.9990379287684416	WITHOUT_CLASSIFICATION	9.620712315585566E-4	DESIGN
Ensures that containing deletions happen before sub-deletions	WITHOUT_CLASSIFICATION	0.9993942073382474	WITHOUT_CLASSIFICATION	6.05792661752691E-4	DESIGN
TypeFactory.deepCopy( currentState, propTypes, persister.getPropertyUpdateability(), deletedState, session );	WITHOUT_CLASSIFICATION	0.9995059010225349	WITHOUT_CLASSIFICATION	4.940989774650672E-4	DESIGN
cascade-delete to collections BEFORE the collection owner is deleted	WITHOUT_CLASSIFICATION	0.998483601368333	WITHOUT_CLASSIFICATION	0.0015163986316669253	DESIGN
cascade-delete to many-to-one AFTER the parent was deleted	WITHOUT_CLASSIFICATION	0.9995666907345405	WITHOUT_CLASSIFICATION	4.3330926545952523E-4	DESIGN
if it is an initialized proxy, let cascade handle it later on	WITHOUT_CLASSIFICATION	0.9973581503973553	WITHOUT_CLASSIFICATION	0.0026418496026446264	DESIGN
assign the requested id to the proxy, before reassociating the proxy	WITHOUT_CLASSIFICATION	0.9999419532704795	WITHOUT_CLASSIFICATION	5.804672952042684E-5	DESIGN
an uninitialized proxy, noop, don't even need to return an id, since it is never a save()	WITHOUT_CLASSIFICATION	0.9992186998149059	WITHOUT_CLASSIFICATION	7.813001850942542E-4	DESIGN
initialize properties of the event:	WITHOUT_CLASSIFICATION	0.999843360820835	WITHOUT_CLASSIFICATION	1.5663917916496114E-4	DESIGN
return the id in the event object	WITHOUT_CLASSIFICATION	0.9992591083657248	WITHOUT_CLASSIFICATION	7.40891634275176E-4	DESIGN
TRANSIENT or DELETED	WITHOUT_CLASSIFICATION	0.9999567421439732	WITHOUT_CLASSIFICATION	4.3257856026695996E-5	DESIGN
use the id assigned to the instance	WITHOUT_CLASSIFICATION	0.999264779159305	WITHOUT_CLASSIFICATION	7.352208406951222E-4	DESIGN
assume this is a newly instantiated transient object which should be saved rather than updated	WITHOUT_CLASSIFICATION	0.8452969920906174	WITHOUT_CLASSIFICATION	0.1547030079093826	DESIGN
this is a transient object with existing persistent state not loaded by the session	WITHOUT_CLASSIFICATION	0.9953895470772914	WITHOUT_CLASSIFICATION	0.004610452922708501	DESIGN
a collection loaded in the current session can not possibly be the collection belonging to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9960817153075703	WITHOUT_CLASSIFICATION	0.003918284692429772	DESIGN
cachedState,	WITHOUT_CLASSIFICATION	0.9999530626110165	WITHOUT_CLASSIFICATION	4.693738898349722E-5	DESIGN
assume true, since we don't really know, and it doesn't matter	WITHOUT_CLASSIFICATION	0.9997401730767826	WITHOUT_CLASSIFICATION	2.598269232173725E-4	DESIGN
a "detached" collection!	WITHOUT_CLASSIFICATION	0.9999154889250751	WITHOUT_CLASSIFICATION	8.451107492488963E-5	DESIGN
if the collection belonged to a different entity, clean up the existing state of the collection	WITHOUT_CLASSIFICATION	0.9957203858155125	WITHOUT_CLASSIFICATION	0.0042796141844875695	DESIGN
log.debug( "calling onLoad()" );	WITHOUT_CLASSIFICATION	0.9994226996701397	WITHOUT_CLASSIFICATION	5.773003298601926E-4	DESIGN
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999530626110165	WITHOUT_CLASSIFICATION	4.693738898349722E-5	DESIGN
note: performExecutions() clears all collectionXxxxtion collections (the collection actions) in the session	WITHOUT_CLASSIFICATION	0.9958605189628106	WITHOUT_CLASSIFICATION	0.004139481037189404	DESIGN
if no array holder we found an unwrappered array (this can't occur, because we now always call wrap() before getting to here) return (ah==null) ? true : searchForDirtyCollections(ah, type);	WITHOUT_CLASSIFICATION	0.9988789483410718	WITHOUT_CLASSIFICATION	0.0011210516589281203	DESIGN
if not wrappered yet, its dirty (this can't occur, because we now always call wrap() before getting to here) return ( ! (obj instanceof PersistentCollection) ) ? true : searchForDirtyCollections( (PersistentCollection) obj, type );	WITHOUT_CLASSIFICATION	0.9763618745517234	WITHOUT_CLASSIFICATION	0.023638125448276617	DESIGN
we need to check even if it was not initialized, because of delayed adds!	WITHOUT_CLASSIFICATION	0.9993329560652116	WITHOUT_CLASSIFICATION	6.670439347884475E-4	DESIGN
NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999803016396185	WITHOUT_CLASSIFICATION	1.969836038149817E-5	DESIGN
find any entities that are still transient after retry	WITHOUT_CLASSIFICATION	0.9992423325897478	WITHOUT_CLASSIFICATION	7.576674102522138E-4	DESIGN
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999530626110165	WITHOUT_CLASSIFICATION	4.693738898349722E-5	DESIGN
Check the persistence context for an entry relating to this entity to be merged...	WITHOUT_CLASSIFICATION	0.99716934283406	WITHOUT_CLASSIFICATION	0.0028306571659400645	DESIGN
we have specialized case of a detached entity from the perspective of the merge operation. Specifically, we have an incoming entity instance which has a corresponding entry in the current persistence context, but registered under a different entity instance	WITHOUT_CLASSIFICATION	0.9999524303018265	WITHOUT_CLASSIFICATION	4.7569698173578654E-5	DESIGN
DELETED	WITHOUT_CLASSIFICATION	0.9999113734108903	WITHOUT_CLASSIFICATION	8.862658910963415E-5	DESIGN
before cascade!	WITHOUT_CLASSIFICATION	0.9999704189621904	WITHOUT_CLASSIFICATION	2.9581037809668984E-5	DESIGN
cascade first, so that all unsaved objects get their copy created before we actually copy cascadeOnMerge(event, persister, entity, copyCache, Cascades.CASCADE_BEFORE_MERGE);	WITHOUT_CLASSIFICATION	0.9999327303009752	WITHOUT_CLASSIFICATION	6.726969902482738E-5	DESIGN
this bit is only really absolutely necessary for handling requestedId, but is also good if we merge multiple object graphs, since it helps ensure uniqueness	WITHOUT_CLASSIFICATION	0.9789523883107949	WITHOUT_CLASSIFICATION	0.02104761168920506	DESIGN
continue...; we'll find out if it ends up not getting saved later	WITHOUT_CLASSIFICATION	0.9998507867538653	WITHOUT_CLASSIFICATION	1.4921324613472071E-4	DESIGN
cascade first, so that all unsaved objects get their copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999327303009752	WITHOUT_CLASSIFICATION	6.726969902482738E-5	DESIGN
check that entity id = requestedId	WITHOUT_CLASSIFICATION	0.9999560210134677	WITHOUT_CLASSIFICATION	4.3978986532315615E-5	DESIGN
before cascade!	WITHOUT_CLASSIFICATION	0.9999704189621904	WITHOUT_CLASSIFICATION	2.9581037809668984E-5	DESIGN
we got here because we assumed that an instance with an assigned id was detached, when it was really persistent	WITHOUT_CLASSIFICATION	0.9987909703198226	WITHOUT_CLASSIFICATION	0.0012090296801774204	DESIGN
cascade first, so that all unsaved objects get their copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999327303009752	WITHOUT_CLASSIFICATION	6.726969902482738E-5	DESIGN
copyValues works by reflection, so explicitly mark the entity instance dirty	WITHOUT_CLASSIFICATION	0.9992767324759313	WITHOUT_CLASSIFICATION	7.23267524068657E-4	DESIGN
EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999113734108903	WITHOUT_CLASSIFICATION	8.862658910963415E-5	DESIGN
source.getBatcher().executeBatch(); found another way to ensure that all batched joined inserts have been executed	WITHOUT_CLASSIFICATION	0.9988221986931519	WITHOUT_CLASSIFICATION	0.0011778013068481405	DESIGN
substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9987260360577676	WITHOUT_CLASSIFICATION	0.0012739639422323916	DESIGN
now done in EntityIdentityInsertAction persister.setIdentifier( entity, id, source.getEntityMode() );	WITHOUT_CLASSIFICATION	0.9992148408570356	WITHOUT_CLASSIFICATION	7.851591429643538E-4	DESIGN
source.getPersistenceContext().removeNonExist( new EntityKey( id, persister, source.getEntityMode() ) );	WITHOUT_CLASSIFICATION	0.9992834119241285	WITHOUT_CLASSIFICATION	7.165880758714476E-4	DESIGN
keep the existing version number in the case of replicate!	WITHOUT_CLASSIFICATION	0.9999271307927851	WITHOUT_CLASSIFICATION	7.286920721490135E-5	DESIGN
cascade-save to many-to-one BEFORE the parent is saved	WITHOUT_CLASSIFICATION	0.9996313164705701	WITHOUT_CLASSIFICATION	3.6868352942995373E-4	DESIGN
pass this as an argument only to avoid double looking	WITHOUT_CLASSIFICATION	0.9999528998846279	WITHOUT_CLASSIFICATION	4.710011537208031E-5	DESIGN
the object is persistent	WITHOUT_CLASSIFICATION	0.9999464341967326	WITHOUT_CLASSIFICATION	5.3565803267442646E-5	DESIGN
the entity is associated with the session, so check its status	WITHOUT_CLASSIFICATION	0.9999457457915932	WITHOUT_CLASSIFICATION	5.42542084068433E-5	DESIGN
do nothing for persistent instances	WITHOUT_CLASSIFICATION	0.9999162354745564	WITHOUT_CLASSIFICATION	8.37645254435993E-5	DESIGN
ie. e.status==DELETED	WITHOUT_CLASSIFICATION	0.9999608966083426	WITHOUT_CLASSIFICATION	3.910339165735296E-5	DESIGN
the object is transient or detached	WITHOUT_CLASSIFICATION	0.9992705601415394	WITHOUT_CLASSIFICATION	7.294398584605905E-4	DESIGN
NOTE EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999537720019139	WITHOUT_CLASSIFICATION	4.6227998085955236E-5	DESIGN
Private constructor - stops checkstyle from complaining.	WITHOUT_CLASSIFICATION	0.9984473800118965	WITHOUT_CLASSIFICATION	0.0015526199881034642	DESIGN
First, try to find a matching constructor accepting a ViolatedConstraintNameExtracter param...	WITHOUT_CLASSIFICATION	0.9992982140834558	WITHOUT_CLASSIFICATION	7.017859165441905E-4	DESIGN
eat it and try next	WITHOUT_CLASSIFICATION	0.9999533802074192	WITHOUT_CLASSIFICATION	4.6619792580755335E-5	DESIGN
Otherwise, try to use the no-arg constructor	WITHOUT_CLASSIFICATION	0.9998070850871354	WITHOUT_CLASSIFICATION	1.92914912864583E-4	DESIGN
oracle sql-state code for deadlock	WITHOUT_CLASSIFICATION	0.988853662114533	WITHOUT_CLASSIFICATION	0.011146337885467093	DESIGN
CollectionPropertyMapping processes everything except 'index'.	WITHOUT_CLASSIFICATION	0.998874965776697	WITHOUT_CLASSIFICATION	0.0011250342233030627	DESIGN
remove initial ", "	WITHOUT_CLASSIFICATION	0.999986488045042	WITHOUT_CLASSIFICATION	1.3511954957977724E-5	DESIGN
remove initial " and "	WITHOUT_CLASSIFICATION	0.9999866055121509	WITHOUT_CLASSIFICATION	1.3394487849108378E-5	DESIGN
beforeClassTokens.add("new"); DEFINITELY DON'T HAVE THIS!!	WITHOUT_CLASSIFICATION	0.9994226996701397	WITHOUT_CLASSIFICATION	5.773003298601926E-4	DESIGN
notAfterClassTokens.add(",");	WITHOUT_CLASSIFICATION	0.9999608966083426	WITHOUT_CLASSIFICATION	3.910339165735296E-5	DESIGN
just especially for the trivial collection filter	WITHOUT_CLASSIFICATION	0.9978982573636193	WITHOUT_CLASSIFICATION	0.002101742636380694	DESIGN
update last non-whitespace token, if necessary	WITHOUT_CLASSIFICATION	0.9985554127694205	WITHOUT_CLASSIFICATION	0.0014445872305794767	DESIGN
select-range is terminated by declaration of "from"	WITHOUT_CLASSIFICATION	0.9994884746054877	WITHOUT_CLASSIFICATION	5.11525394512192E-4	DESIGN
scan for next non-whitespace token	WITHOUT_CLASSIFICATION	0.9984550999105827	WITHOUT_CLASSIFICATION	0.0015449000894173321	DESIGN
Note this!!	WITHOUT_CLASSIFICATION	0.9999651374219223	WITHOUT_CLASSIFICATION	3.486257807768549E-5	DESIGN
Error message constants.	WITHOUT_CLASSIFICATION	0.9999524098390142	WITHOUT_CLASSIFICATION	4.759016098588719E-5	DESIGN
handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9988479202550842	WITHOUT_CLASSIFICATION	0.0011520797449158045	DESIGN
semantic action handling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992443574940998	WITHOUT_CLASSIFICATION	7.556425059002408E-4	DESIGN
Handle collection-fiter compilation. IMPORTANT NOTE: This is modifying the INPUT (HQL) tree, not the output tree!	WITHOUT_CLASSIFICATION	0.9986952945819817	WITHOUT_CLASSIFICATION	0.0013047054180183608	DESIGN
Show the modified AST.	WITHOUT_CLASSIFICATION	0.9999963316127403	WITHOUT_CLASSIFICATION	3.668387259586995E-6	DESIGN
Create a parameter specification for the collection filter...	WITHOUT_CLASSIFICATION	0.9804291686674915	WITHOUT_CLASSIFICATION	0.019570831332508462	DESIGN
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999818602049838	WITHOUT_CLASSIFICATION	1.8139795016161024E-5	DESIGN
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999818602049838	WITHOUT_CLASSIFICATION	1.8139795016161024E-5	DESIGN
Get the names of the columns used to link between the collection owner and the collection elements.	WITHOUT_CLASSIFICATION	0.9984682284623877	WITHOUT_CLASSIFICATION	0.0015317715376122524	DESIGN
The path AST should be a DotNode, and it should have been evaluated already.	WITHOUT_CLASSIFICATION	0.9981812710354349	WITHOUT_CLASSIFICATION	0.0018187289645651718	DESIGN
Tell the dot node about the join type.	WITHOUT_CLASSIFICATION	0.9997622523126988	WITHOUT_CLASSIFICATION	2.3774768730116226E-4	DESIGN
Re-arrange the tree so that the collection function is the root and the lhs is the path.	WITHOUT_CLASSIFICATION	0.9986971286207497	WITHOUT_CLASSIFICATION	0.001302871379250408	DESIGN
Don't forget to resolve the argument! Resolve the collection function now.	WITHOUT_CLASSIFICATION	0.9982914217648349	WITHOUT_CLASSIFICATION	0.0017085782351651524	DESIGN
Resolve everything up to this dot, but don't resolve the placeholders yet.	WITHOUT_CLASSIFICATION	0.9997082697388787	WITHOUT_CLASSIFICATION	2.9173026112134197E-4	DESIGN
Should mean that no such property was found	WITHOUT_CLASSIFICATION	0.9998497477679631	WITHOUT_CLASSIFICATION	1.5025223203689227E-4	DESIGN
Was there an explicit select expression?	WITHOUT_CLASSIFICATION	0.999854825700613	WITHOUT_CLASSIFICATION	1.451742993870259E-4	DESIGN
Attach any mapping-defined "ORDER BY" fragments	WITHOUT_CLASSIFICATION	0.9995096070605148	WITHOUT_CLASSIFICATION	4.903929394852092E-4	DESIGN
Use the explicitly declared select expression; determine the return types indicated by each select token	WITHOUT_CLASSIFICATION	0.9985773412539374	WITHOUT_CLASSIFICATION	0.0014226587460626282	DESIGN
After that, process the JOINs. Invoke a delegate to do the work, as this is farily complex.	WITHOUT_CLASSIFICATION	0.9978540800372884	WITHOUT_CLASSIFICATION	0.002145919962711556	DESIGN
Make #@%$^#^&# sure no alias is applied to the table name	WITHOUT_CLASSIFICATION	0.9998229943549783	WITHOUT_CLASSIFICATION	1.770056450216242E-4	DESIGN
We need to generate ids as part of this bulk insert. Note that this is only supported for sequence-style generators and post-insert-style generators; basically, only in-db generators	WITHOUT_CLASSIFICATION	0.9982434642596446	WITHOUT_CLASSIFICATION	0.0017565357403554107	DESIGN
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999818602049838	WITHOUT_CLASSIFICATION	1.8139795016161024E-5	DESIGN
We need to seed the version value as part of this bulk insert	WITHOUT_CLASSIFICATION	0.9992693962181491	WITHOUT_CLASSIFICATION	7.306037818508214E-4	DESIGN
we need to wrtap the param in a cast()	WITHOUT_CLASSIFICATION	0.9926664710066421	WITHOUT_CLASSIFICATION	0.007333528993357966	DESIGN
This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9916359108925075	WITHOUT_CLASSIFICATION	0.008364089107492563	DESIGN
Generate implicit joins, only if necessary.	WITHOUT_CLASSIFICATION	0.9995136651195036	WITHOUT_CLASSIFICATION	4.8633488049643433E-4	DESIGN
Notify the FROM element that it is being referenced by the select.	WITHOUT_CLASSIFICATION	0.9990809205241292	WITHOUT_CLASSIFICATION	9.190794758707861E-4	DESIGN
Turn off includeSubclasses on all FromElements.	WITHOUT_CLASSIFICATION	0.9996766306959741	WITHOUT_CLASSIFICATION	3.2336930402581163E-4	DESIGN
create the node initially with the param name so that it shows appropriately in the "original text" attribute	WITHOUT_CLASSIFICATION	0.9996137707828859	WITHOUT_CLASSIFICATION	3.862292171141382E-4	DESIGN
Use the delegate, resolve identifiers as FROM element aliases.	WITHOUT_CLASSIFICATION	0.9999065529466001	WITHOUT_CLASSIFICATION	9.34470533998059E-5	DESIGN
select clauses for insert statements should alwasy be treated as shallow	WITHOUT_CLASSIFICATION	0.9909926646077626	WITHOUT_CLASSIFICATION	0.00900733539223738	DESIGN
no need to even collect this information if the persister is considered multi-table	WITHOUT_CLASSIFICATION	0.9973750350092888	WITHOUT_CLASSIFICATION	0.0026249649907111837	DESIGN
Make sure that the persister is versioned	WITHOUT_CLASSIFICATION	0.9996625184058842	WITHOUT_CLASSIFICATION	3.3748159411578905E-4	DESIGN
handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9988479202550842	WITHOUT_CLASSIFICATION	0.0011520797449158045	DESIGN
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999818602049838	WITHOUT_CLASSIFICATION	1.8139795016161024E-5	DESIGN
--Commented out by Inspection (12/11/04 10:56 AM): int getWarningCount();	WITHOUT_CLASSIFICATION	0.9995430088525428	WITHOUT_CLASSIFICATION	4.5699114745715745E-4	DESIGN
Alias references and identifiers use the same node class.	WITHOUT_CLASSIFICATION	0.9992897477395101	WITHOUT_CLASSIFICATION	7.102522604899646E-4	DESIGN
switch	WITHOUT_CLASSIFICATION	0.9999163396226415	WITHOUT_CLASSIFICATION	8.366037735860225E-5	DESIGN
make a new one	WITHOUT_CLASSIFICATION	0.9991074921249345	WITHOUT_CLASSIFICATION	8.925078750653431E-4	DESIGN
just do the regular thing if you can't find the ctor Your AST must have default ctor to use this.	WITHOUT_CLASSIFICATION	0.9986246361930167	WITHOUT_CLASSIFICATION	0.0013753638069833186	DESIGN
Initialize SQL nodes here.	WITHOUT_CLASSIFICATION	0.9999474987078713	WITHOUT_CLASSIFICATION	5.2501292128783794E-5	DESIGN
semantic action processing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9991715222286188	WITHOUT_CLASSIFICATION	8.284777713812867E-4	DESIGN
if template is null we just write the function out as it appears in the hql statement	WITHOUT_CLASSIFICATION	0.9996207728388495	WITHOUT_CLASSIFICATION	3.792271611504861E-4	DESIGN
this function has a template -> redirect output and catch the arguments	WITHOUT_CLASSIFICATION	0.9999235567040565	WITHOUT_CLASSIFICATION	7.64432959435533E-5	DESIGN
--- Inner classes (moved here from sql-gen.g) ---	WITHOUT_CLASSIFICATION	0.9988884319376644	WITHOUT_CLASSIFICATION	0.0011115680623355801	DESIGN
check two "adjecent" nodes at the top of the from-clause tree	WITHOUT_CLASSIFICATION	0.9999684406944407	WITHOUT_CLASSIFICATION	3.1559305559284364E-5	DESIGN
/	WITHOUT_CLASSIFICATION	0.9999436311160822	WITHOUT_CLASSIFICATION	5.6368883917833465E-5	DESIGN
these are just two unrelated table references	WITHOUT_CLASSIFICATION	0.9998877887315692	WITHOUT_CLASSIFICATION	1.1221126843085941E-4	DESIGN
again, both should be FromElements	WITHOUT_CLASSIFICATION	0.9930340646560745	WITHOUT_CLASSIFICATION	0.006965935343925491	DESIGN
NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9998918364440158	WITHOUT_CLASSIFICATION	1.0816355598422052E-4	DESIGN
right represents a joins originating from left; or both right and left reprersent joins originating from the same FromElement	WITHOUT_CLASSIFICATION	0.9778463426171187	WITHOUT_CLASSIFICATION	0.022153657382881362	DESIGN
check a set of parent/child nodes in the from-clause tree to determine if a comma is required between them	WITHOUT_CLASSIFICATION	0.9991963378296401	WITHOUT_CLASSIFICATION	8.036621703599379E-4	DESIGN
right represents a joins originating from left...	WITHOUT_CLASSIFICATION	0.9882559921777454	WITHOUT_CLASSIFICATION	0.011744007822254605	DESIGN
all clear	WITHOUT_CLASSIFICATION	0.9999138693608056	WITHOUT_CLASSIFICATION	8.613063919428098E-5	DESIGN
Ignore the token class name parameter, and use a specific token class.	WITHOUT_CLASSIFICATION	0.9983756101929211	WITHOUT_CLASSIFICATION	0.0016243898070789774	DESIGN
overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999364042134482	WITHOUT_CLASSIFICATION	6.359578655184643E-5	DESIGN
overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999364042134482	WITHOUT_CLASSIFICATION	6.359578655184643E-5	DESIGN
remember that ordinal parameters numbers are 1-based!!!	WITHOUT_CLASSIFICATION	0.9984394703524803	WITHOUT_CLASSIFICATION	0.001560529647519754	DESIGN
don't care about other param types here, just those explicitly user-defined...	WITHOUT_CLASSIFICATION	0.9982766202748736	WITHOUT_CLASSIFICATION	0.0017233797251263244	DESIGN
If the query is already compiled, skip the compilation.	WITHOUT_CLASSIFICATION	0.9999658532390235	WITHOUT_CLASSIFICATION	3.414676097643645E-5	DESIGN
Remember the parameters for the compilation.	WITHOUT_CLASSIFICATION	0.9997181382456094	WITHOUT_CLASSIFICATION	2.818617543905851E-4	DESIGN
PHASE 1 : Parse the HQL into an AST.	WITHOUT_CLASSIFICATION	0.99771978674489	WITHOUT_CLASSIFICATION	0.002280213255109907	DESIGN
PHASE 2 : Analyze the HQL AST, and produce an SQL AST.	WITHOUT_CLASSIFICATION	0.9998206713462723	WITHOUT_CLASSIFICATION	1.7932865372777984E-4	DESIGN
PHASE 3 : Generate the SQL.	WITHOUT_CLASSIFICATION	0.9999390817135073	WITHOUT_CLASSIFICATION	6.091828649273586E-5	DESIGN
we do not actually propogate ANTLRExceptions as a cause, so log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.979175592455488	WITHOUT_CLASSIFICATION	0.020824407544511873	DESIGN
we do not actually propogate ANTLRExceptions as a cause, so log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.979175592455488	WITHOUT_CLASSIFICATION	0.020824407544511873	DESIGN
only needed during compilation phase...	WITHOUT_CLASSIFICATION	0.9996047995102305	WITHOUT_CLASSIFICATION	3.9520048976951543E-4	DESIGN
Transform the tree.	WITHOUT_CLASSIFICATION	0.9999832756224266	WITHOUT_CLASSIFICATION	1.6724377573389568E-5	DESIGN
Parse the query string into an HQL AST.	WITHOUT_CLASSIFICATION	0.9993798756569712	WITHOUT_CLASSIFICATION	6.201243430287568E-4	DESIGN
Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999733772282003	WITHOUT_CLASSIFICATION	2.662277179969547E-5	DESIGN
Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999733772282003	WITHOUT_CLASSIFICATION	2.662277179969547E-5	DESIGN
Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999733772282003	WITHOUT_CLASSIFICATION	2.662277179969547E-5	DESIGN
NOTE : ( max - 1 ) because first is zero-based while max is not...	WITHOUT_CLASSIFICATION	0.9907729307180957	WITHOUT_CLASSIFICATION	0.009227069281904332	DESIGN
-- Package local methods for the QueryLoader delegate --	WITHOUT_CLASSIFICATION	0.9907334773936023	WITHOUT_CLASSIFICATION	0.009266522606397768	DESIGN
If there are no collection fetches, then no further checks are needed	WITHOUT_CLASSIFICATION	0.9998964894240481	WITHOUT_CLASSIFICATION	1.0351057595191698E-4	DESIGN
A shallow query is ok (although technically there should be no fetching here...)	WITHOUT_CLASSIFICATION	0.9995548008946548	WITHOUT_CLASSIFICATION	4.45199105345244E-4	DESIGN
should be the first, but just to be safe...	WITHOUT_CLASSIFICATION	0.9994487612390595	WITHOUT_CLASSIFICATION	5.512387609405974E-4	DESIGN
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999818602049838	WITHOUT_CLASSIFICATION	1.8139795016161024E-5	DESIGN
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999818602049838	WITHOUT_CLASSIFICATION	1.8139795016161024E-5	DESIGN
Impl Note: allows multiple collection fetches as long as the entire fecthed graph still "points back" to a single root entity for return	WITHOUT_CLASSIFICATION	0.973056148149692	WITHOUT_CLASSIFICATION	0.026943851850308027	DESIGN
Otherwise, we have a non-scalar select with defined collection fetch(es). Make sure that there is only a single root entity in the return (no tuples)	WITHOUT_CLASSIFICATION	0.9996766294731932	WITHOUT_CLASSIFICATION	3.233705268067167E-4	DESIGN
This is not strictly true. We actually just need to make sure that it is ordered by root-entity PK and that that order-by comes before any non-root-entity ordering...	WITHOUT_CLASSIFICATION	0.5185716657346897	WITHOUT_CLASSIFICATION	0.48142833426531023	DESIGN
paramTranslations = new ParameterTranslationsImpl( collectedParameterSpecifications );	WITHOUT_CLASSIFICATION	0.9999283097004751	WITHOUT_CLASSIFICATION	7.169029952497149E-5	DESIGN
we are already processing a dot-structure	WITHOUT_CLASSIFICATION	0.9963818380807372	WITHOUT_CLASSIFICATION	0.0036181619192628173	DESIGN
igndore it...	WITHOUT_CLASSIFICATION	0.9999530626110165	WITHOUT_CLASSIFICATION	4.693738898349722E-5	DESIGN
we are now at a new tree level	WITHOUT_CLASSIFICATION	0.999939862287819	WITHOUT_CLASSIFICATION	6.0137712181046955E-5	DESIGN
[jsd] The fix for HHH-558...	WITHOUT_CLASSIFICATION	0.9992728215181129	WITHOUT_CLASSIFICATION	7.271784818871376E-4	DESIGN
If the token can tell us if it could be an identifier...	WITHOUT_CLASSIFICATION	0.9999505946822507	WITHOUT_CLASSIFICATION	4.940531774928938E-5	DESIGN
... and the expected token type was an identifier, then:	WITHOUT_CLASSIFICATION	0.9980655214816088	WITHOUT_CLASSIFICATION	0.0019344785183913124	DESIGN
Use the token as an identifier.	WITHOUT_CLASSIFICATION	0.999888082540664	WITHOUT_CLASSIFICATION	1.1191745933602238E-4	DESIGN
Add the token to the AST.	WITHOUT_CLASSIFICATION	0.9999874335407252	WITHOUT_CLASSIFICATION	1.2566459274769228E-5	DESIGN
(NOT (EQ a b) ) => (NE a b)	WITHOUT_CLASSIFICATION	0.9999218442766663	WITHOUT_CLASSIFICATION	7.815572333359797E-5	DESIGN
(NOT (NE a b) ) => (EQ a b)	WITHOUT_CLASSIFICATION	0.9999218442766663	WITHOUT_CLASSIFICATION	7.815572333359797E-5	DESIGN
(NOT (LT a b) ) => (GE a b)	WITHOUT_CLASSIFICATION	0.9999218442766663	WITHOUT_CLASSIFICATION	7.815572333359797E-5	DESIGN
(NOT (GE a b) ) => (LT a b)	WITHOUT_CLASSIFICATION	0.9999218442766663	WITHOUT_CLASSIFICATION	7.815572333359797E-5	DESIGN
(NOT (LE a b) ) => (GT a b)	WITHOUT_CLASSIFICATION	0.9999218442766663	WITHOUT_CLASSIFICATION	7.815572333359797E-5	DESIGN
(NOT (LIKE a b) ) => (NOT_LIKE a b)	WITHOUT_CLASSIFICATION	0.9988467730379419	WITHOUT_CLASSIFICATION	0.0011532269620582111	DESIGN
(NOT (NOT_LIKE a b) ) => (LIKE a b)	WITHOUT_CLASSIFICATION	0.9988467730379419	WITHOUT_CLASSIFICATION	0.0011532269620582111	DESIGN
(NOT (IS_NOT_NULL a b) ) => (IS_NULL a b)	WITHOUT_CLASSIFICATION	0.9988467730379419	WITHOUT_CLASSIFICATION	0.0011532269620582111	DESIGN
(NOT (BETWEEN a b) ) => (NOT_BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9988467730379419	WITHOUT_CLASSIFICATION	0.0011532269620582111	DESIGN
Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9991811833075067	WITHOUT_CLASSIFICATION	8.188166924932326E-4	DESIGN
overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999364042134482	WITHOUT_CLASSIFICATION	6.359578655184643E-5	DESIGN
if if Otherwise, handle the error normally.	WITHOUT_CLASSIFICATION	0.9992353270919343	WITHOUT_CLASSIFICATION	7.646729080657463E-4	DESIGN
(NOT (NOT_BETWEEN a b) ) => (BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9988467730379419	WITHOUT_CLASSIFICATION	0.0011532269620582111	DESIGN
This can never happen because this rule will always eliminate the child NOT.case NOT:return x.getFirstChild(); (NOT (NOT x) ) => (x)	WITHOUT_CLASSIFICATION	0.9998738452656135	WITHOUT_CLASSIFICATION	1.2615473438646525E-4	DESIGN
Just add a 'not' parent.	WITHOUT_CLASSIFICATION	0.9999828128894805	WITHOUT_CLASSIFICATION	1.71871105194046E-5	DESIGN
(EQ NULL b) => (IS_NULL b)	WITHOUT_CLASSIFICATION	0.99997347813982	WITHOUT_CLASSIFICATION	2.652186017999525E-5	DESIGN
(EQ a NULL) => (IS_NULL a)	WITHOUT_CLASSIFICATION	0.999942679558827	WITHOUT_CLASSIFICATION	5.7320441173106693E-5	DESIGN
NOTE: Because we're using ASTUtil.createParent(), the tree must be created from the bottom up. IS EMPTY x => (EXISTS (QUERY (SELECT_FROM (FROM x) ) ) )	WITHOUT_CLASSIFICATION	0.9999748137993418	WITHOUT_CLASSIFICATION	2.5186200658151616E-5	DESIGN
Add NOT if it's negated.	WITHOUT_CLASSIFICATION	0.9999095245849341	WITHOUT_CLASSIFICATION	9.047541506597397E-5	DESIGN
Create nodes that track line and column number.	WITHOUT_CLASSIFICATION	0.9999160275917331	WITHOUT_CLASSIFICATION	8.39724082667884E-5	DESIGN
Case 1: Multi token keywords GROUP BY and ORDER BY The next token ( LT(2) ) should be 'by'... otherwise, this is just an ident.	WITHOUT_CLASSIFICATION	0.9872252440598126	WITHOUT_CLASSIFICATION	0.012774755940187423	DESIGN
Case 2: The current token is after FROM and before '.'.	WITHOUT_CLASSIFICATION	0.9995810153042493	WITHOUT_CLASSIFICATION	4.1898469575072126E-4	DESIGN
This handles HHH-354, where there is a strange property name in a where clause. If the lookahead contains a DOT then something that isn't an IDENT...	WITHOUT_CLASSIFICATION	0.9995407361084718	WITHOUT_CLASSIFICATION	4.5926389152819855E-4	DESIGN
See if the second lookahed token can be an identifier.	WITHOUT_CLASSIFICATION	0.9998053203094399	WITHOUT_CLASSIFICATION	1.9467969056017473E-4	DESIGN
Set it!	WITHOUT_CLASSIFICATION	0.9999004899614135	WITHOUT_CLASSIFICATION	9.95100385865754E-5	DESIGN
ignore	WITHOUT_CLASSIFICATION	0.9998571141915925	WITHOUT_CLASSIFICATION	1.4288580840761378E-4	DESIGN
strip the " where "	WITHOUT_CLASSIFICATION	0.9999548219787595	WITHOUT_CLASSIFICATION	4.517802124049291E-5	DESIGN
Don't really know all the codes required to adequately decipher returned jdbc exceptions here. simply allow the failure to be eaten and the subsequent insert-selects/deletes should fail	WITHOUT_CLASSIFICATION	0.9975157588245358	WITHOUT_CLASSIFICATION	0.0024842411754642086	DESIGN
at the very least cleanup the data :)	WITHOUT_CLASSIFICATION	0.9997246481046426	WITHOUT_CLASSIFICATION	2.7535189535743984E-4	DESIGN
First, save off the pertinent ids, as the return value	WITHOUT_CLASSIFICATION	0.9999643621850514	WITHOUT_CLASSIFICATION	3.5637814948627086E-5	DESIGN
jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999539279863412	WITHOUT_CLASSIFICATION	4.607201365882981E-5	DESIGN
jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999539279863412	WITHOUT_CLASSIFICATION	4.607201365882981E-5	DESIGN
Start performing the updates	WITHOUT_CLASSIFICATION	0.9999852120341314	WITHOUT_CLASSIFICATION	1.4787965868734549E-5	DESIGN
First, save off the pertinent ids, saving the number of pertinent ids for return	WITHOUT_CLASSIFICATION	0.9999498410412176	WITHOUT_CLASSIFICATION	5.015895878226306E-5	DESIGN
Start performing the deletes	WITHOUT_CLASSIFICATION	0.9999852617068341	WITHOUT_CLASSIFICATION	1.47382931658176E-5	DESIGN
otherwise, everything ok.	WITHOUT_CLASSIFICATION	0.9999414043679612	WITHOUT_CLASSIFICATION	5.8595632038759346E-5	DESIGN
visit width-first, then depth	WITHOUT_CLASSIFICATION	0.9999640174441007	WITHOUT_CLASSIFICATION	3.5982555899258987E-5	DESIGN
if the types report logical equivalence, return true...	WITHOUT_CLASSIFICATION	0.9995982423147376	WITHOUT_CLASSIFICATION	4.0175768526240583E-4	DESIGN
otherwise, perform a "deep equivalence" check...	WITHOUT_CLASSIFICATION	0.9987545380497885	WITHOUT_CLASSIFICATION	0.0012454619502114354	DESIGN
If there is no WHERE node, make one.	WITHOUT_CLASSIFICATION	0.9997816993142127	WITHOUT_CLASSIFICATION	2.1830068578738006E-4	DESIGN
inject the WHERE after the parent	WITHOUT_CLASSIFICATION	0.9997182471912694	WITHOUT_CLASSIFICATION	2.817528087305812E-4	DESIGN
Never include subclasses for implied from elements.	WITHOUT_CLASSIFICATION	0.9981937513662003	WITHOUT_CLASSIFICATION	0.0018062486337997407	DESIGN
Moved here from SelectClause [jsd]	WITHOUT_CLASSIFICATION	0.9957171460869932	WITHOUT_CLASSIFICATION	0.004282853913006812	DESIGN
/	WITHOUT_CLASSIFICATION	0.9999436311160822	WITHOUT_CLASSIFICATION	5.6368883917833465E-5	DESIGN
Use the table fromElement and the property name to get the array of column names.	WITHOUT_CLASSIFICATION	0.9999043865791211	WITHOUT_CLASSIFICATION	9.561342087900603E-5	DESIGN
Set the attributes of the property reference expression.	WITHOUT_CLASSIFICATION	0.9999350505086958	WITHOUT_CLASSIFICATION	6.494949130421898E-5	DESIGN
If the uresolved property path isn't set yet, just use the property name.	WITHOUT_CLASSIFICATION	0.9999009398646502	WITHOUT_CLASSIFICATION	9.906013534973003E-5	DESIGN
The 'from element' that the property is in.	WITHOUT_CLASSIFICATION	0.9998168330542462	WITHOUT_CLASSIFICATION	1.8316694575388971E-4	DESIGN
Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999511273368501	WITHOUT_CLASSIFICATION	4.8872663149809184E-5	DESIGN
Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999511273368501	WITHOUT_CLASSIFICATION	4.8872663149809184E-5	DESIGN
If this dot has already been resolved, stop now.	WITHOUT_CLASSIFICATION	0.9993998931469603	WITHOUT_CLASSIFICATION	6.001068530397124E-4	DESIGN
If there is no data type for this node, and we're at the end of the path (top most dot node), then this might be a Java constant.	WITHOUT_CLASSIFICATION	0.9995283911834494	WITHOUT_CLASSIFICATION	4.7160881655063363E-4	DESIGN
The property is a collection...	WITHOUT_CLASSIFICATION	0.9991923598333875	WITHOUT_CLASSIFICATION	8.076401666124206E-4	DESIGN
The property is a component...	WITHOUT_CLASSIFICATION	0.9999452828012908	WITHOUT_CLASSIFICATION	5.4717198709135516E-5	DESIGN
The property is another class..	WITHOUT_CLASSIFICATION	0.9996430008085291	WITHOUT_CLASSIFICATION	3.569991914709565E-4	DESIGN
Otherwise, this is a primitive type.	WITHOUT_CLASSIFICATION	0.9966129287407929	WITHOUT_CLASSIFICATION	0.0033870712592069968	DESIGN
foo.bars.size (also handles deprecated stuff like foo.bars.maxelement for backwardness)	WITHOUT_CLASSIFICATION	0.9952927589495253	WITHOUT_CLASSIFICATION	0.004707241050474705	DESIGN
This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9987440099462874	WITHOUT_CLASSIFICATION	0.001255990053712581	DESIGN
Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999524025032982	WITHOUT_CLASSIFICATION	4.759749670187283E-5	DESIGN
in non-select queries, the only time we should need to join is if we are in a subquery from clause	WITHOUT_CLASSIFICATION	0.9200328959156351	WITHOUT_CLASSIFICATION	0.07996710408436498	DESIGN
this is the regression style determination which matches the logic of the classic translator	WITHOUT_CLASSIFICATION	0.999443580237163	WITHOUT_CLASSIFICATION	5.564197628370615E-4	DESIGN
This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9987440099462874	WITHOUT_CLASSIFICATION	0.001255990053712581	DESIGN
even though we might find a pre-existing element by join path, we may not be able to reuse it...	WITHOUT_CLASSIFICATION	0.995230369005342	WITHOUT_CLASSIFICATION	0.0047696309946580326	DESIGN
NOTE : addDuplicateAlias() already performs nullness checks on the alias.	WITHOUT_CLASSIFICATION	0.9995255781171583	WITHOUT_CLASSIFICATION	4.744218828417297E-4	DESIGN
if the from-clauses are the same, we can be a little more aggressive in terms of what we reuse	WITHOUT_CLASSIFICATION	0.9806740063381351	WITHOUT_CLASSIFICATION	0.01932599366186496	DESIGN
again, null != null here	WITHOUT_CLASSIFICATION	0.9998741949698622	WITHOUT_CLASSIFICATION	1.2580503013779728E-4	DESIGN
If this is an implied join in a from element, then use the impled join type which is part of the tree parser's state (set by the gramamar actions).	WITHOUT_CLASSIFICATION	0.9909923629585526	WITHOUT_CLASSIFICATION	0.00900763704144745	DESIGN
otherwise (subquery case) dont reuse the fromElement if we are processing the from-clause of the subquery	WITHOUT_CLASSIFICATION	0.9989717780436864	WITHOUT_CLASSIFICATION	0.0010282219563135311	DESIGN
we know only the lhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9998096862002356	WITHOUT_CLASSIFICATION	1.903137997644402E-4	DESIGN
the referenced node text is the special 'id'	WITHOUT_CLASSIFICATION	0.9999381519560935	WITHOUT_CLASSIFICATION	6.184804390652556E-5	DESIGN
only the identifier property field name can be a reference to the associated entity's PK...	WITHOUT_CLASSIFICATION	0.9997650729435181	WITHOUT_CLASSIFICATION	2.3492705648198568E-4	DESIGN
special shortcut for id properties, skip the join! this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9997780111800703	WITHOUT_CLASSIFICATION	2.2198881992968868E-4	DESIGN
Append the new property name onto the unresolved path.	WITHOUT_CLASSIFICATION	0.9998406037205109	WITHOUT_CLASSIFICATION	1.5939627948914574E-4	DESIGN
If the lhs is a collection, use CollectionPropertyMapping	WITHOUT_CLASSIFICATION	0.9996493737039345	WITHOUT_CLASSIFICATION	3.5062629606552625E-4	DESIGN
Tell the destination fromElement to 'includeSubclasses'.	WITHOUT_CLASSIFICATION	0.9995768788476233	WITHOUT_CLASSIFICATION	4.2312115237669534E-4	DESIGN
Use theta style (for regression) Move the node up, after the origin node.	WITHOUT_CLASSIFICATION	0.9938896132648721	WITHOUT_CLASSIFICATION	0.006110386735127911	DESIGN
Don't resolve the node again.	WITHOUT_CLASSIFICATION	0.9999910493389953	WITHOUT_CLASSIFICATION	8.950661004671624E-6	DESIGN
for expected parameter type injection, we expect that the lhs represents some form of property ref and that the children of the in-list represent one-or-more params.	WITHOUT_CLASSIFICATION	0.9624231130217192	WITHOUT_CLASSIFICATION	0.03757688697828071	DESIGN
we need to strip off the embedded parens so that sql-gen does not double these up	WITHOUT_CLASSIFICATION	0.9997373363246025	WITHOUT_CLASSIFICATION	2.626636753974901E-4	DESIGN
we have something like : "? [op] rhs"	WITHOUT_CLASSIFICATION	0.9994657717899073	WITHOUT_CLASSIFICATION	5.342282100926862E-4	DESIGN
we have something like : "lhs [op] ?"	WITHOUT_CLASSIFICATION	0.9994657717899073	WITHOUT_CLASSIFICATION	5.342282100926862E-4	DESIGN
we know only the rhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9998096862002356	WITHOUT_CLASSIFICATION	1.903137997644402E-4	DESIGN
handle the (assumed) valid cases: #1 - the only valid datetime addition synatx is one or the other is a datetime (but not both)	WITHOUT_CLASSIFICATION	0.9979207557292883	WITHOUT_CLASSIFICATION	0.002079244270711608	DESIGN
one or the other needs to be a datetime for us to get into this method in the first place...	WITHOUT_CLASSIFICATION	0.6342005857942681	DESIGN	0.3657994142057318	WITHOUT_CLASSIFICATION
#3 - note that this is also true of "datetime - :param"...	WITHOUT_CLASSIFICATION	0.9932129195359802	WITHOUT_CLASSIFICATION	0.006787080464019736	DESIGN
#2	WITHOUT_CLASSIFICATION	0.9999153312139337	WITHOUT_CLASSIFICATION	8.466878606622185E-5	DESIGN
Generate the inner join -- The elements need to be joined to the collection they are in.	WITHOUT_CLASSIFICATION	0.9938421009605954	WITHOUT_CLASSIFICATION	0.00615789903940449	DESIGN
nothing to do	WITHOUT_CLASSIFICATION	0.9999876587160922	WITHOUT_CLASSIFICATION	1.2341283907898168E-5	DESIGN
The 'from element' that represents the elements of the collection.	WITHOUT_CLASSIFICATION	0.9999588290607786	WITHOUT_CLASSIFICATION	4.117093922139041E-5	DESIGN
Add the condition to the join sequence that qualifies the indexed element.	WITHOUT_CLASSIFICATION	0.999664735781942	WITHOUT_CLASSIFICATION	3.352642180578968E-4	DESIGN
Sometimes use the element table alias, sometimes use the... umm... collection table alias (many to many)	WITHOUT_CLASSIFICATION	0.9977006587818769	WITHOUT_CLASSIFICATION	0.002299341218123102	DESIGN
Now, set the text for this node. It should be the element columns.	WITHOUT_CLASSIFICATION	0.9929904859120099	WITHOUT_CLASSIFICATION	0.0070095140879900516	DESIGN
Get the function return value type, based on the type of the first argument.	WITHOUT_CLASSIFICATION	0.9996286599943595	WITHOUT_CLASSIFICATION	3.7134000564064545E-4	DESIGN
This will call initialize(tok)!	WITHOUT_CLASSIFICATION	0.997653102180353	WITHOUT_CLASSIFICATION	0.0023468978196470387	DESIGN
mutation depends on the types of nodes invloved...	WITHOUT_CLASSIFICATION	0.9997651075570068	WITHOUT_CLASSIFICATION	2.348924429933369E-4	DESIGN
"pass along" our initial embedded parameter node(s) to the first generated sql fragment so that it can be handled later for parameter binding...	WITHOUT_CLASSIFICATION	0.992231598782267	WITHOUT_CLASSIFICATION	0.007768401217732974	DESIGN
logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9989410621988425	WITHOUT_CLASSIFICATION	0.0010589378011574798	DESIGN
Generated select expressions are already resolved, nothing to do.	WITHOUT_CLASSIFICATION	0.9998123458068136	WITHOUT_CLASSIFICATION	1.8765419318646586E-4	DESIGN
The path may be a reference to an alias defined in the parent query.	WITHOUT_CLASSIFICATION	0.9999502945511464	WITHOUT_CLASSIFICATION	4.970544885358902E-5	DESIGN
The HQL class alias refers to the class name.	WITHOUT_CLASSIFICATION	0.999809489967539	WITHOUT_CLASSIFICATION	1.9051003246098943E-4	DESIGN
Associate the table alias with the element.	WITHOUT_CLASSIFICATION	0.9998306068967255	WITHOUT_CLASSIFICATION	1.6939310327444436E-4	DESIGN
try the parent FromClause...	WITHOUT_CLASSIFICATION	0.9999896029676808	WITHOUT_CLASSIFICATION	1.0397032319243165E-5	DESIGN
Add the new node to the map so that we don't create it twice.	WITHOUT_CLASSIFICATION	0.9996169851536868	WITHOUT_CLASSIFICATION	3.83014846313203E-4	DESIGN
Make sure that all from elements registered with this FROM clause are actually in the AST.	WITHOUT_CLASSIFICATION	0.9992041269246941	WITHOUT_CLASSIFICATION	7.958730753057925E-4	DESIGN
Invoke setScalarColumnText on each constructor argument.	WITHOUT_CLASSIFICATION	0.999774731668513	WITHOUT_CLASSIFICATION	2.2526833148694313E-4	DESIGN
Collect the select expressions, skip the first child because it is the class name.	WITHOUT_CLASSIFICATION	0.9999855310063442	WITHOUT_CLASSIFICATION	1.4468993655761211E-5	DESIGN
return an empty Type array	WITHOUT_CLASSIFICATION	0.9999684524149813	WITHOUT_CLASSIFICATION	3.154758501864633E-5	DESIGN
Constructors are always considered scalar results.	WITHOUT_CLASSIFICATION	0.9987588015060304	WITHOUT_CLASSIFICATION	0.0012411984939696185	DESIGN
this is the exception returned by ReflectHelper.getConstructor() if it cannot locate an appropriate constructor	WITHOUT_CLASSIFICATION	0.9993872447239731	WITHOUT_CLASSIFICATION	6.127552760268213E-4	DESIGN
if there is no order by, make one	WITHOUT_CLASSIFICATION	0.9973911744428328	WITHOUT_CLASSIFICATION	0.0026088255571671297	DESIGN
Find the WHERE; if there is no WHERE, find the FROM...	WITHOUT_CLASSIFICATION	0.9999413981353815	WITHOUT_CLASSIFICATION	5.8601864618479965E-5	DESIGN
Now, inject the newly built ORDER BY into the tree	WITHOUT_CLASSIFICATION	0.9986764811290992	WITHOUT_CLASSIFICATION	0.001323518870900779	DESIGN
ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994226996701397	WITHOUT_CLASSIFICATION	5.773003298601926E-4	DESIGN
logic operators by definition resolve to boolean.	WITHOUT_CLASSIFICATION	0.9989410621988425	WITHOUT_CLASSIFICATION	0.0010589378011574798	DESIGN
Render the identifier select fragment using the table alias.	WITHOUT_CLASSIFICATION	0.9999488175316725	WITHOUT_CLASSIFICATION	5.118246832752911E-5	DESIGN
Class names in the FROM clause result in a JoinSequence (the old FromParser does this).	WITHOUT_CLASSIFICATION	0.9980809774307164	WITHOUT_CLASSIFICATION	0.0019190225692836376	DESIGN
For many-to-many joins, use the tablename from the queryable collection for the default text.	WITHOUT_CLASSIFICATION	0.9990679345389953	WITHOUT_CLASSIFICATION	9.320654610046048E-4	DESIGN
Otherwise, use the property mapping.	WITHOUT_CLASSIFICATION	0.999818056211923	WITHOUT_CLASSIFICATION	1.819437880770681E-4	DESIGN
should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9882574398828582	WITHOUT_CLASSIFICATION	0.011742560117141832	DESIGN
If the property is a special collection property name, return a CollectionPropertyMapping.	WITHOUT_CLASSIFICATION	0.9996434627944133	WITHOUT_CLASSIFICATION	3.565372055866598E-4	DESIGN
Collection of components.	WITHOUT_CLASSIFICATION	0.9999777563427424	WITHOUT_CLASSIFICATION	2.2243657257649073E-5	DESIGN
make sure the lhs is "assignable"...	WITHOUT_CLASSIFICATION	0.9979268797585896	WITHOUT_CLASSIFICATION	0.002073120241410412	DESIGN
false indicates to not generate parens around the assignment	WITHOUT_CLASSIFICATION	0.9998840624495837	WITHOUT_CLASSIFICATION	1.1593755041625237E-4	DESIGN
Register the FromElement with the FROM clause, now that we have the names and aliases.	WITHOUT_CLASSIFICATION	0.9998653088941704	WITHOUT_CLASSIFICATION	1.3469110582960852E-4	DESIGN
currently allowed...	WITHOUT_CLASSIFICATION	0.9999255662110575	WITHOUT_CLASSIFICATION	7.44337889424021E-5	DESIGN
HHH-276 : implied joins in a subselect where clause - The destination needs to be added to the destination's from clause. Not sure if this is will fix everything, but it works.	WITHOUT_CLASSIFICATION	0.6539432093361851	WITHOUT_CLASSIFICATION	0.34605679066381484	DESIGN
return classAlias == null ? className : classAlias;	WITHOUT_CLASSIFICATION	0.9974484791129385	WITHOUT_CLASSIFICATION	0.002551520887061458	DESIGN
This is an explicit FROM element.	WITHOUT_CLASSIFICATION	0.9936141366449286	WITHOUT_CLASSIFICATION	0.006385863355071329	DESIGN
ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994226996701397	WITHOUT_CLASSIFICATION	5.773003298601926E-4	DESIGN
Fetch can't be used with scroll() or iterate().	WITHOUT_CLASSIFICATION	0.9979848421165424	WITHOUT_CLASSIFICATION	0.002015157883457595	DESIGN
If it's not implied or it is implied and it's a many to many join where the target wasn't found.	WITHOUT_CLASSIFICATION	0.9997633225786243	WITHOUT_CLASSIFICATION	2.3667742137579577E-4	DESIGN
Since this is an explicit FROM element, it can't be implied in the FROM clause.	WITHOUT_CLASSIFICATION	0.9984199484644192	WITHOUT_CLASSIFICATION	0.0015800515355807866	DESIGN
Do nothing, eplicit from elements are always in the projection list.	WITHOUT_CLASSIFICATION	0.9996707886778593	WITHOUT_CLASSIFICATION	3.2921132214065333E-4	DESIGN
propertyName refers to something like collection.size...	WITHOUT_CLASSIFICATION	0.9994033391195879	WITHOUT_CLASSIFICATION	5.966608804120255E-4	DESIGN
property name is a sub-path of a component...	WITHOUT_CLASSIFICATION	0.9984972433047348	WITHOUT_CLASSIFICATION	0.0015027566952652296	DESIGN
Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999524025032982	WITHOUT_CLASSIFICATION	4.759749670187283E-5	DESIGN
nothing to do; even if the operand is a parameter, no way we could infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9987767594707325	WITHOUT_CLASSIFICATION	0.0012232405292674103	DESIGN
logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9989410621988425	WITHOUT_CLASSIFICATION	0.0010589378011574798	DESIGN
DotNode uses null here...	WITHOUT_CLASSIFICATION	0.9996251107423341	WITHOUT_CLASSIFICATION	3.7488925766600533E-4	DESIGN
We represent a from-clause alias	WITHOUT_CLASSIFICATION	0.9980191908131615	WITHOUT_CLASSIFICATION	0.0019808091868384697	DESIGN
we are the LHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9989868212872034	WITHOUT_CLASSIFICATION	0.0010131787127966125	DESIGN
we are the RHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9989868212872034	WITHOUT_CLASSIFICATION	0.0010131787127966125	DESIGN
we represent a naked (simple) prop-ref	WITHOUT_CLASSIFICATION	0.9964413212954857	WITHOUT_CLASSIFICATION	0.0035586787045144043	DESIGN
EARLY EXIT!!! return so the resolve call explicitly coming from DotNode can resolve this...	WITHOUT_CLASSIFICATION	0.9998507615325393	WITHOUT_CLASSIFICATION	1.4923846746070038E-4	DESIGN
assume this ident's text does not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9993033730902604	WITHOUT_CLASSIFICATION	6.966269097396765E-4	DESIGN
just ignore it for now, it'll get resolved later...	WITHOUT_CLASSIFICATION	0.9987515805935986	WITHOUT_CLASSIFICATION	0.001248419406401371	DESIGN
This is not actually a constant, but a reference to FROM element.	WITHOUT_CLASSIFICATION	0.9879851110818239	WITHOUT_CLASSIFICATION	0.012014888918176158	DESIGN
check to see if our "propPath" actually represents a property on the persister	WITHOUT_CLASSIFICATION	0.9990206683397139	WITHOUT_CLASSIFICATION	9.793316602860708E-4	DESIGN
these pieces are needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9985107465701534	WITHOUT_CLASSIFICATION	0.0014892534298465343	DESIGN
used to set the type of the parent dot node	WITHOUT_CLASSIFICATION	0.9953793944830023	WITHOUT_CLASSIFICATION	0.004620605516997725	DESIGN
assume we do not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9984503928382087	WITHOUT_CLASSIFICATION	0.0015496071617913444	DESIGN
assume we do not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9984503928382087	WITHOUT_CLASSIFICATION	0.0015496071617913444	DESIGN
naked property-refs cannot be used with an aliased from element	WITHOUT_CLASSIFICATION	0.9985664010117307	WITHOUT_CLASSIFICATION	0.001433598988269364	DESIGN
this piece is needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9835312309900168	WITHOUT_CLASSIFICATION	0.016468769009983224	DESIGN
do not over-write the column text, as that has already been "rendered" during resolve	WITHOUT_CLASSIFICATION	0.9998901870319662	WITHOUT_CLASSIFICATION	1.0981296803378354E-4	DESIGN
for some reason the antlr.CommonAST initialization routines force this method to get called twice. The first time with an empty string	WITHOUT_CLASSIFICATION	0.999733678981987	WITHOUT_CLASSIFICATION	2.66321018013036E-4	DESIGN
Look up class name using the first identifier in the path.	WITHOUT_CLASSIFICATION	0.9999651187488952	WITHOUT_CLASSIFICATION	3.48812511048781E-5	DESIGN
Add to the query spaces.	WITHOUT_CLASSIFICATION	0.9999895815559035	WITHOUT_CLASSIFICATION	1.0418444096574974E-5	DESIGN
If the from element isn't in the same clause, create a new from element.	WITHOUT_CLASSIFICATION	0.996211582465583	WITHOUT_CLASSIFICATION	0.0037884175344171326	DESIGN
This is the root level node. Generate an explicit from clause at the root.	WITHOUT_CLASSIFICATION	0.9951760386139735	WITHOUT_CLASSIFICATION	0.004823961386026445	DESIGN
Correlated subqueries create 'special' implied from nodes because correlated subselects can't use an ANSI-style join	WITHOUT_CLASSIFICATION	0.9995083348220914	WITHOUT_CLASSIFICATION	4.916651779084964E-4	DESIGN
super-duper-classic-parser-regression-testing-mojo-magic...	WITHOUT_CLASSIFICATION	0.9994226996701397	WITHOUT_CLASSIFICATION	5.773003298601926E-4	DESIGN
A collection of entities...	WITHOUT_CLASSIFICATION	0.9998030748945996	WITHOUT_CLASSIFICATION	1.9692510540025894E-4	DESIGN
A collection of components...	WITHOUT_CLASSIFICATION	0.9998030748945996	WITHOUT_CLASSIFICATION	1.9692510540025894E-4	DESIGN
A collection of scalar elements...	WITHOUT_CLASSIFICATION	0.9970990109481727	WITHOUT_CLASSIFICATION	0.002900989051827303	DESIGN
according to both the ANSI-SQL and EJB3 specs, trim can either take exactly one parameter or a variable number of parameters between 1 and 4. from the SQL spec: <trim function> ::= TRIM <left paren> <trim operands> <right paren> <trim operands> ::= [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> <trim specification> ::= LEADING | TRAILING | BOTH If only <trim specification> is omitted, BOTH is assumed; if <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9861423694178207	WITHOUT_CLASSIFICATION	0.013857630582179325	DESIGN
Don't include sub-classes for implied collection joins or subquery joins.	WITHOUT_CLASSIFICATION	0.9903429399048802	WITHOUT_CLASSIFICATION	0.009657060095119772	DESIGN
Treat explict from elements in sub-queries properly.	WITHOUT_CLASSIFICATION	0.9996181874057612	WITHOUT_CLASSIFICATION	3.8181259423877584E-4	DESIGN
( implied && DotNode.useThetaStyleImplicitJoins ) ) {	WITHOUT_CLASSIFICATION	0.9990168566157795	WITHOUT_CLASSIFICATION	9.831433842204225E-4	DESIGN
the "root from-element" in correlated subqueries do need this piece	WITHOUT_CLASSIFICATION	0.9796553841298037	WITHOUT_CLASSIFICATION	0.020344615870196394	DESIGN
Create the FROM element for the target (the elements of the collection).	WITHOUT_CLASSIFICATION	0.9999778295386105	WITHOUT_CLASSIFICATION	2.2170461389565967E-5	DESIGN
If the join is implied, then don't include sub-classes on the element.	WITHOUT_CLASSIFICATION	0.9996441664867608	WITHOUT_CLASSIFICATION	3.5583351323917485E-4	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996055295154423	WITHOUT_CLASSIFICATION	3.9447048455769953E-4	DESIGN
The associated entity is implied, but it must be included in the FROM. The collection alias is the role.	WITHOUT_CLASSIFICATION	0.9988236315738986	WITHOUT_CLASSIFICATION	0.0011763684261014162	DESIGN
Tag this node as a JOIN. Don't include subclasses in the join. This is a clollection join.	WITHOUT_CLASSIFICATION	0.9778805904872663	WITHOUT_CLASSIFICATION	0.022119409512733754	DESIGN
Get the class name of the associated entity.	WITHOUT_CLASSIFICATION	0.9999380868901953	WITHOUT_CLASSIFICATION	6.191310980479556E-5	DESIGN
origin, path, implied, columns, classAlias,	WITHOUT_CLASSIFICATION	0.9994602571598686	WITHOUT_CLASSIFICATION	5.397428401313606E-4	DESIGN
implied	WITHOUT_CLASSIFICATION	0.9999113734108903	WITHOUT_CLASSIFICATION	8.862658910963415E-5	DESIGN
For implied many-to-many, just add the end join.	WITHOUT_CLASSIFICATION	0.9999883279828454	WITHOUT_CLASSIFICATION	1.167201715450347E-5	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996055295154423	WITHOUT_CLASSIFICATION	3.9447048455769953E-4	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996055295154423	WITHOUT_CLASSIFICATION	3.9447048455769953E-4	DESIGN
the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.999367685065941	WITHOUT_CLASSIFICATION	6.32314934058972E-4	DESIGN
This causes the factory to instantiate the desired class.	WITHOUT_CLASSIFICATION	0.9776484867130621	WITHOUT_CLASSIFICATION	0.022351513286937956	DESIGN
private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.999952715576476	WITHOUT_CLASSIFICATION	4.728442352394048E-5	DESIGN
Frontbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9985700325315909	WITHOUT_CLASSIFICATION	0.0014299674684091002	DESIGN
The types represented in the SQL result set. @return The types represented in the SQL result set.	WITHOUT_CLASSIFICATION	0.9990052755513075	WITHOUT_CLASSIFICATION	9.947244486925263E-4	DESIGN
public Type[] getSqlResultTypes() {return sqlResultTypes;}	WITHOUT_CLASSIFICATION	0.9992986343844054	WITHOUT_CLASSIFICATION	7.013656155945736E-4	DESIGN
First, collect all of the select expressions. NOTE: This must be done before invoking setScalarColumnText() because setScalarColumnText() changes the AST!!!	WITHOUT_CLASSIFICATION	0.9988657701963002	WITHOUT_CLASSIFICATION	0.0011342298036997932	DESIGN
First allow the actual type to control the return value. (the actual underlying sqltype could actually be different)	WITHOUT_CLASSIFICATION	0.9816103955071218	WITHOUT_CLASSIFICATION	0.01838960449287818	DESIGN
sqlResultTypeList.addAll( constructorArgumentTypeList );	WITHOUT_CLASSIFICATION	0.9994226996701397	WITHOUT_CLASSIFICATION	5.773003298601926E-4	DESIGN
If the data type is not an association type, it could not have been in the FROM clause.	WITHOUT_CLASSIFICATION	0.99995060180507	WITHOUT_CLASSIFICATION	4.939819493003464E-5	DESIGN
sqlResultTypeList.add( type );	WITHOUT_CLASSIFICATION	0.999850987137342	WITHOUT_CLASSIFICATION	1.490128626579738E-4	DESIGN
Always add the type to the return type list.	WITHOUT_CLASSIFICATION	0.9996927692399508	WITHOUT_CLASSIFICATION	3.072307600492519E-4	DESIGN
add the fetched entities	WITHOUT_CLASSIFICATION	0.9999958119876218	WITHOUT_CLASSIFICATION	4.188012378222031E-6	DESIGN
Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9994814241013098	WITHOUT_CLASSIFICATION	5.185758986902982E-4	DESIGN
function support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9981677905255647	WITHOUT_CLASSIFICATION	0.0018322094744353556	DESIGN
If there are any scalars (non-entities) selected, render the select column aliases.	WITHOUT_CLASSIFICATION	0.9999808937031951	WITHOUT_CLASSIFICATION	1.9106296804991046E-5	DESIGN
sqlResultTypeList,	WITHOUT_CLASSIFICATION	0.9999530626110165	WITHOUT_CLASSIFICATION	4.693738898349722E-5	DESIGN
ArrayList sqlResultTypeList,	WITHOUT_CLASSIFICATION	0.9999608966083426	WITHOUT_CLASSIFICATION	3.910339165735296E-5	DESIGN
sqlResultTypes = ( Type[] ) sqlResultTypeList.toArray( new Type[sqlResultTypeList.size()] );	WITHOUT_CLASSIFICATION	0.9998865992800015	WITHOUT_CLASSIFICATION	1.1340071999856388E-4	DESIGN
lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9951469465028842	WITHOUT_CLASSIFICATION	0.004853053497115848	DESIGN
TODO:	WITHOUT_CLASSIFICATION	0.8396633629172874	WITHOUT_CLASSIFICATION	0.1603366370827127	DESIGN
Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9997175800286535	WITHOUT_CLASSIFICATION	2.8241997134643325E-4	DESIGN
Generate an 2d array of column names, the first dimension is parallel with the return types array. The second dimension is the list of column names for each type.	WITHOUT_CLASSIFICATION	0.9999596950155015	WITHOUT_CLASSIFICATION	4.030498449845003E-5	DESIGN
Generate the select expression.	WITHOUT_CLASSIFICATION	0.9997345993605956	WITHOUT_CLASSIFICATION	2.6540063940437884E-4	DESIGN
union subclass support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9960014689603703	WITHOUT_CLASSIFICATION	0.003998531039629701	DESIGN
Skip 'DISTINCT' and 'ALL', so we return the first expression node.	WITHOUT_CLASSIFICATION	0.9998182894706358	WITHOUT_CLASSIFICATION	1.8171052936421175E-4	DESIGN
Create SQL_TOKEN nodes for the columns.	WITHOUT_CLASSIFICATION	0.9998566338178886	WITHOUT_CLASSIFICATION	1.4336618211142012E-4	DESIGN
Generate the property select tokens.	WITHOUT_CLASSIFICATION	0.9998507162966407	WITHOUT_CLASSIFICATION	1.492837033592722E-4	DESIGN
Get the function name node.	WITHOUT_CLASSIFICATION	0.9999946512535429	WITHOUT_CLASSIFICATION	5.34874645715712E-6	DESIGN
Method expressions in a SELECT should always be considered scalar.	WITHOUT_CLASSIFICATION	0.9620225185046627	WITHOUT_CLASSIFICATION	0.03797748149533729	DESIGN
If this is 'elements' then create a new FROM element.	WITHOUT_CLASSIFICATION	0.9982921726393278	WITHOUT_CLASSIFICATION	0.0017078273606722543	DESIGN
Not elements(x)	WITHOUT_CLASSIFICATION	0.9999586814100097	WITHOUT_CLASSIFICATION	4.1318589990265105E-5	DESIGN
Dialect function	WITHOUT_CLASSIFICATION	0.999971339539393	WITHOUT_CLASSIFICATION	2.8660460607106564E-5	DESIGN
Collection 'property function'	WITHOUT_CLASSIFICATION	0.9999726889397496	WITHOUT_CLASSIFICATION	2.7311060250486254E-5	DESIGN
If the constant is an IDENT, figure out what it means...	WITHOUT_CLASSIFICATION	0.9999651990898454	WITHOUT_CLASSIFICATION	3.480091015457701E-5	DESIGN
IDENT is a class alias in the FROM.	WITHOUT_CLASSIFICATION	0.9991429357647305	WITHOUT_CLASSIFICATION	8.570642352695958E-4	DESIGN
Resolve to an identity column.	WITHOUT_CLASSIFICATION	0.9999542561658508	WITHOUT_CLASSIFICATION	4.5743834149190726E-5	DESIGN
Otherwise, it's a literal.	WITHOUT_CLASSIFICATION	0.9998761966924267	WITHOUT_CLASSIFICATION	1.2380330757327451E-4	DESIGN
the name of an entity class	WITHOUT_CLASSIFICATION	0.999990003529834	WITHOUT_CLASSIFICATION	9.996470165975736E-6	DESIGN
the class discriminator value	WITHOUT_CLASSIFICATION	0.9999895462723887	WITHOUT_CLASSIFICATION	1.0453727611305457E-5	DESIGN
Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999946761372501	WITHOUT_CLASSIFICATION	5.323862749814296E-6	DESIGN
Add a space before the display text.	WITHOUT_CLASSIFICATION	0.9999735455277309	WITHOUT_CLASSIFICATION	2.6454472269152246E-5	DESIGN
Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9996768969384715	WITHOUT_CLASSIFICATION	3.231030615284521E-4	DESIGN
child == parent.getFirstChild()	WITHOUT_CLASSIFICATION	0.9999593329745284	WITHOUT_CLASSIFICATION	4.066702547151362E-5	DESIGN
Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9996768969384715	WITHOUT_CLASSIFICATION	3.231030615284521E-4	DESIGN
Filter conditions need to be inserted before the HQL where condition and the theta join node. This is because org.hibernate.loader.Loader binds the filter parameters first, then it binds all the HQL query parameters, see org.hibernate.loader.Loader.processFilterParameters().	WITHOUT_CLASSIFICATION	0.975547918853445	WITHOUT_CLASSIFICATION	0.02445208114655493	DESIGN
Put the FILTERS node before the HQL condition and theta joins	WITHOUT_CLASSIFICATION	0.999864694426661	WITHOUT_CLASSIFICATION	1.3530557333886497E-4	DESIGN
add the current fragment to the FILTERS node	WITHOUT_CLASSIFICATION	0.9999190679883445	WITHOUT_CLASSIFICATION	8.093201165546024E-5	DESIGN
Create a new THETA_JOINS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9995635531128215	WITHOUT_CLASSIFICATION	4.364468871785706E-4	DESIGN
Put the THETA_JOINS node before the HQL condition, after the filters.	WITHOUT_CLASSIFICATION	0.9998754241320185	WITHOUT_CLASSIFICATION	1.2457586798146655E-4	DESIGN
add the current fragment to the THETA_JOINS node	WITHOUT_CLASSIFICATION	0.9999190679883445	WITHOUT_CLASSIFICATION	8.093201165546024E-5	DESIGN
First, try to get the persister using the given name directly.	WITHOUT_CLASSIFICATION	0.999920739292516	WITHOUT_CLASSIFICATION	7.92607074839991E-5	DESIGN
unable to locate it using this name	WITHOUT_CLASSIFICATION	0.998615293474944	WITHOUT_CLASSIFICATION	0.001384706525056008	DESIGN
If that didn't work, try using the 'import' name.	WITHOUT_CLASSIFICATION	0.9999629599765625	WITHOUT_CLASSIFICATION	3.7040023437432975E-5	DESIGN
Implicit joins use theta style (WHERE pk = fk), explicit joins use JOIN (after from)	WITHOUT_CLASSIFICATION	0.9998917646803883	WITHOUT_CLASSIFICATION	1.0823531961167833E-4	DESIGN
locate the registered function by the given name	WITHOUT_CLASSIFICATION	0.9998279621426363	WITHOUT_CLASSIFICATION	1.7203785736380885E-4	DESIGN
determine the type of the first argument...	WITHOUT_CLASSIFICATION	0.999031147485668	WITHOUT_CLASSIFICATION	9.68852514331944E-4	DESIGN
Use the DOT node to emit the first column name. Create the column names, folled by the column aliases.	WITHOUT_CLASSIFICATION	0.9997640158201233	WITHOUT_CLASSIFICATION	2.3598417987665072E-4	DESIGN
Note: this simply constructs a "raw" SQL_TOKEN representing the where fragment and injects this into the tree. This "works"; however it is probably not the best long-term solution. At some point we probably want to apply an additional grammar to properly tokenize this where fragment into constituent parts focused on the operators embedded within the fragment.	WITHOUT_CLASSIFICATION	0.948279330105584	DESIGN	0.05172066989441603	WITHOUT_CLASSIFICATION
Append the text of the current node.	WITHOUT_CLASSIFICATION	0.9999325975756567	WITHOUT_CLASSIFICATION	6.740242434330406E-5	DESIGN
If the node has a first child, recurse into the first child.	WITHOUT_CLASSIFICATION	0.999014038814422	WITHOUT_CLASSIFICATION	9.8596118557804E-4	DESIGN
If there is a second child (RHS), recurse into that child.	WITHOUT_CLASSIFICATION	0.9997309394671581	WITHOUT_CLASSIFICATION	2.690605328419584E-4	DESIGN
Iterate through the alias,JoinSequence pairs and generate SQL token nodes.	WITHOUT_CLASSIFICATION	0.9997570001132898	WITHOUT_CLASSIFICATION	2.429998867101202E-4	DESIGN
If the from element represents a JOIN_FRAGMENT and it is a theta-style join, convert its type from JOIN_FRAGMENT to FROM_FRAGMENT	WITHOUT_CLASSIFICATION	0.9981585120621429	WITHOUT_CLASSIFICATION	0.001841487937857188	DESIGN
this is used during SqlGenerator processing	WITHOUT_CLASSIFICATION	0.989678231004434	WITHOUT_CLASSIFICATION	0.010321768995565911	DESIGN
If there is a FROM fragment and the FROM element is an explicit, then add the from part.	WITHOUT_CLASSIFICATION	0.9999720557639726	WITHOUT_CLASSIFICATION	2.79442360273879E-5	DESIGN
&& StringHelper.isNotEmpty( frag )	WITHOUT_CLASSIFICATION	0.9992476666655402	WITHOUT_CLASSIFICATION	7.523333344598037E-4	DESIGN
The FROM fragment will probably begin with ', '. Remove this if it is present.	WITHOUT_CLASSIFICATION	0.9946775917938415	WITHOUT_CLASSIFICATION	0.005322408206158521	DESIGN
This uses a PathExpressionParser but notice that compound paths are not valid, only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9734343542522023	WITHOUT_CLASSIFICATION	0.026565645747797694	DESIGN
SELECT p FROM p IN CLASS eg.Person ORDER BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9994387077720125	WITHOUT_CLASSIFICATION	5.612922279874772E-4	DESIGN
The reason for this is SQL doesn't let you sort by an expression you are not returning in the result set.	WITHOUT_CLASSIFICATION	0.9991152181923254	WITHOUT_CLASSIFICATION	8.84781807674571E-4	DESIGN
named query parameter	WITHOUT_CLASSIFICATION	0.9998042137601092	WITHOUT_CLASSIFICATION	1.9578623989074742E-4	DESIGN
default mode	WITHOUT_CLASSIFICATION	0.9999474186664588	WITHOUT_CLASSIFICATION	5.258133354124403E-5	DESIGN
QueryJoinFragment join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.999921261100112	WITHOUT_CLASSIFICATION	7.873889988796204E-5	DESIGN
reset the dotcount (but not the path) after reset!	WITHOUT_CLASSIFICATION	0.9998722625530025	WITHOUT_CLASSIFICATION	1.2773744699750802E-4	DESIGN
after reset!	WITHOUT_CLASSIFICATION	0.9999480179409004	WITHOUT_CLASSIFICATION	5.198205909960373E-5	DESIGN
we don't need to worry about any condition in the ON clause here (toFromFragmentString), since anything in the ON condition is already applied to the whole query	WITHOUT_CLASSIFICATION	0.9877983133199437	WITHOUT_CLASSIFICATION	0.012201686680056365	DESIGN
bit_length feels a bit broken to me. We have to cast to char in order to pass when a numeric value is supplied. But of course the answers given will be wildly different for these two datatypes. 1234.5678 will be 9 bytes as a char string but will be 8 or 16 bytes as a true numeric. Jay Nance 2006-09-22	WITHOUT_CLASSIFICATION	0.9999077724630524	WITHOUT_CLASSIFICATION	9.222753694756995E-5	DESIGN
dotcount>=2	WITHOUT_CLASSIFICATION	0.9999530626110165	WITHOUT_CLASSIFICATION	4.693738898349722E-5	DESIGN
Do the corresponding RHS	WITHOUT_CLASSIFICATION	0.9999792028503539	WITHOUT_CLASSIFICATION	2.079714964603934E-5	DESIGN
if its "id"	WITHOUT_CLASSIFICATION	0.9999593272651337	WITHOUT_CLASSIFICATION	4.0672734866292526E-5	DESIGN
or its the id property name	WITHOUT_CLASSIFICATION	0.9999903945818992	WITHOUT_CLASSIFICATION	9.605418100850542E-6	DESIGN
join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.999921261100112	WITHOUT_CLASSIFICATION	7.873889988796204E-5	DESIGN
important!!	WITHOUT_CLASSIFICATION	0.9999530626110165	WITHOUT_CLASSIFICATION	4.693738898349722E-5	DESIGN
String[] keyCols = collPersister.getKeyColumnNames();	WITHOUT_CLASSIFICATION	0.9999397247005894	WITHOUT_CLASSIFICATION	6.027529941052895E-5	DESIGN
an association	WITHOUT_CLASSIFICATION	0.9999679660644174	WITHOUT_CLASSIFICATION	3.2033935582613175E-5	DESIGN
allow index() function:	WITHOUT_CLASSIFICATION	0.9998506942879486	WITHOUT_CLASSIFICATION	1.493057120514557E-4	DESIGN
here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9987668517487156	WITHOUT_CLASSIFICATION	0.001233148251284404	DESIGN
The reason for this is SQL doesn't let you sort by an expression you are not returning in the result set.	WITHOUT_CLASSIFICATION	0.9991152181923254	WITHOUT_CLASSIFICATION	8.84781807674571E-4	DESIGN
many-to-many	WITHOUT_CLASSIFICATION	0.9999530626110165	WITHOUT_CLASSIFICATION	4.693738898349722E-5	DESIGN
collections of values	WITHOUT_CLASSIFICATION	0.9999933032358834	WITHOUT_CLASSIFICATION	6.69676411659979E-6	DESIGN
opening paren in new Foo ( ... )	WITHOUT_CLASSIFICATION	0.9960010503402568	WITHOUT_CLASSIFICATION	0.003998949659743228	DESIGN
if we are inside a new Result(), but not inside a nested function	WITHOUT_CLASSIFICATION	0.9978368728423161	WITHOUT_CLASSIFICATION	0.002163127157683853	DESIGN
special case	WITHOUT_CLASSIFICATION	0.9999918339147076	WITHOUT_CLASSIFICATION	8.166085292374937E-6	DESIGN
the name of an SQL function	WITHOUT_CLASSIFICATION	0.9999901863171112	WITHOUT_CLASSIFICATION	9.813682888729208E-6	DESIGN
null child could occur for no from clause in a filter	WITHOUT_CLASSIFICATION	0.9992983157582058	WITHOUT_CLASSIFICATION	7.016842417941373E-4	DESIGN
this is basically a copy/paste of OrderByParser ... might be worth refactoring	WITHOUT_CLASSIFICATION	0.9465872866149205	WITHOUT_CLASSIFICATION	0.0534127133850795	DESIGN
SELECT p FROM p IN CLASS eg.Person GROUP BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9994306508644121	WITHOUT_CLASSIFICATION	5.693491355878856E-4	DESIGN
return aliases not supported in classic translator!	WITHOUT_CLASSIFICATION	0.9997614671214727	WITHOUT_CLASSIFICATION	2.3853287852735095E-4	DESIGN
register collection role	WITHOUT_CLASSIFICATION	0.999760096140191	WITHOUT_CLASSIFICATION	2.3990385980903194E-4	DESIGN
The keyword used to specify an identity column, if identity column key generation is supported.	WITHOUT_CLASSIFICATION	0.9903853718614439	WITHOUT_CLASSIFICATION	0.009614628138556115	DESIGN
.getElementPropertyMapping();	WITHOUT_CLASSIFICATION	0.9999608966083426	WITHOUT_CLASSIFICATION	3.910339165735296E-5	DESIGN
crossJoins.add(name);	WITHOUT_CLASSIFICATION	0.9999608966083426	WITHOUT_CLASSIFICATION	3.910339165735296E-5	DESIGN
ie no select clause in HQL	WITHOUT_CLASSIFICATION	0.9999666618199089	WITHOUT_CLASSIFICATION	3.333818009104314E-5	DESIGN
initialize the Set of queried identifier spaces (ie. tables)	WITHOUT_CLASSIFICATION	0.999673116723703	WITHOUT_CLASSIFICATION	3.2688327629710995E-4	DESIGN
ie. no select clause	WITHOUT_CLASSIFICATION	0.9999746541532158	WITHOUT_CLASSIFICATION	2.534584678417769E-5	DESIGN
there _was_ a select clause	WITHOUT_CLASSIFICATION	0.9999724510259023	WITHOUT_CLASSIFICATION	2.7548974097814896E-5	DESIGN
return the concrete type, or the underlying type if a concrete type was not specified	WITHOUT_CLASSIFICATION	0.9991152061724814	WITHOUT_CLASSIFICATION	8.847938275185777E-4	DESIGN
many-to-many	WITHOUT_CLASSIFICATION	0.9999530626110165	WITHOUT_CLASSIFICATION	4.693738898349722E-5	DESIGN
q.addCollection(collectionName, collectionRole);	WITHOUT_CLASSIFICATION	0.9994226996701397	WITHOUT_CLASSIFICATION	5.773003298601926E-4	DESIGN
classic parser does not support bulk manipulation statements	WITHOUT_CLASSIFICATION	0.997363602297685	WITHOUT_CLASSIFICATION	0.0026363977023150945	DESIGN
can't cache this stuff either (per-invocation)	WITHOUT_CLASSIFICATION	0.9965169045573903	WITHOUT_CLASSIFICATION	0.0034830954426098163	DESIGN
unfortunately this stuff can't be cached because it is per-invocation, not constant for the QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9936192249301466	WITHOUT_CLASSIFICATION	0.006380775069853416	DESIGN
This is the legacy behaviour for HQL queries...	WITHOUT_CLASSIFICATION	0.9927456494152074	WITHOUT_CLASSIFICATION	0.007254350584792563	DESIGN
not known!	WITHOUT_CLASSIFICATION	0.9999353196534977	WITHOUT_CLASSIFICATION	6.468034650222411E-5	DESIGN
not known!	WITHOUT_CLASSIFICATION	0.9999353196534977	WITHOUT_CLASSIFICATION	6.468034650222411E-5	DESIGN
we have the form: trim(trimSource) so we trim leading and trailing spaces EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9998295741885923	WITHOUT_CLASSIFICATION	1.704258114077309E-4	DESIGN
not known!	WITHOUT_CLASSIFICATION	0.9999353196534977	WITHOUT_CLASSIFICATION	6.468034650222411E-5	DESIGN
not known!	WITHOUT_CLASSIFICATION	0.9999353196534977	WITHOUT_CLASSIFICATION	6.468034650222411E-5	DESIGN
Need this, since join condition can appear inside parens!	WITHOUT_CLASSIFICATION	0.999922513307163	WITHOUT_CLASSIFICATION	7.748669283695892E-5	DESIGN
tokens that close a sub expression tokens that open a sub expression tokens that would indicate a sub expression is a boolean expression	WITHOUT_CLASSIFICATION	0.9995290133513801	WITHOUT_CLASSIFICATION	4.70986648619898E-4	DESIGN
expressionTerminators.add(","); deliberately excluded	WITHOUT_CLASSIFICATION	0.9994226996701397	WITHOUT_CLASSIFICATION	5.773003298601926E-4	DESIGN
expressionOpeners.add(","); deliberately excluded	WITHOUT_CLASSIFICATION	0.9994226996701397	WITHOUT_CLASSIFICATION	5.773003298601926E-4	DESIGN
we have the form: trim(from trimSource). This is functionally equivalent to trim(trimSource) EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9977584667524233	WITHOUT_CLASSIFICATION	0.002241533247576644	DESIGN
otherwise, a trim-specification and/or a trim-character have been specified; we need to decide which options are present and "do the right thing" should leading trim-characters be trimmed? should trailing trim-characters be trimmed? the trim-character (what is to be trimmed off?) the trim-source (from where should it be trimmed?)	WITHOUT_CLASSIFICATION	0.6931656685498788	DESIGN	0.30683433145012107	WITHOUT_CLASSIFICATION
Inside a BETWEEN ... AND ... expression	WITHOUT_CLASSIFICATION	0.9970398607369559	WITHOUT_CLASSIFICATION	0.002960139263044091	DESIGN
were an odd or even number of NOTs encountered the join string built up by compound paths inside this expression a flag indicating if the subexpression is known to be boolean	WITHOUT_CLASSIFICATION	0.9995927855620641	WITHOUT_CLASSIFICATION	4.0721443793590356E-4	DESIGN
ie. a many-to-many	WITHOUT_CLASSIFICATION	0.9998985588476444	WITHOUT_CLASSIFICATION	1.0144115235556789E-4	DESIGN
Cope with [,]	WITHOUT_CLASSIFICATION	0.9999532206048961	WITHOUT_CLASSIFICATION	4.6779395103918137E-5	DESIGN
Cope with a continued path expression (ie. ].baz)	WITHOUT_CLASSIFICATION	0.9994782840075528	WITHOUT_CLASSIFICATION	5.217159924471377E-4	DESIGN
NOTE: early return	WITHOUT_CLASSIFICATION	0.9999853136456022	WITHOUT_CLASSIFICATION	1.4686354397843938E-5	DESIGN
Cope with a subselect	WITHOUT_CLASSIFICATION	0.9999157733834325	WITHOUT_CLASSIFICATION	8.422661656756435E-5	DESIGN
Cope with special cases of AND, NOT, ()	WITHOUT_CLASSIFICATION	0.9999029682162818	WITHOUT_CLASSIFICATION	9.703178371825064E-5	DESIGN
Close extra brackets we opened	WITHOUT_CLASSIFICATION	0.9999336930261731	WITHOUT_CLASSIFICATION	6.630697382684159E-5	DESIGN
take note when this is a boolean expression	WITHOUT_CLASSIFICATION	0.9972889497296163	WITHOUT_CLASSIFICATION	0.0027110502703837154	DESIGN
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9994262234457947	WITHOUT_CLASSIFICATION	5.737765542053613E-4	DESIGN
process a token, mapping OO path expressions to SQL expressions	WITHOUT_CLASSIFICATION	0.9979015812538956	WITHOUT_CLASSIFICATION	0.0020984187461044234	DESIGN
Open any extra brackets we might need.	WITHOUT_CLASSIFICATION	0.9969176802609562	WITHOUT_CLASSIFICATION	0.0030823197390438643	DESIGN
Cope with special cases of AND, NOT, )	WITHOUT_CLASSIFICATION	0.9993465078124414	WITHOUT_CLASSIFICATION	6.5349218755859E-4	DESIGN
the next one up must also be	WITHOUT_CLASSIFICATION	0.999977893110339	WITHOUT_CLASSIFICATION	2.2106889660982238E-5	DESIGN
Add any joins	WITHOUT_CLASSIFICATION	0.9999806024791473	WITHOUT_CLASSIFICATION	1.939752085266134E-5	DESIGN
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9994262234457947	WITHOUT_CLASSIFICATION	5.737765542053613E-4	DESIGN
named query parameter	WITHOUT_CLASSIFICATION	0.9998042137601092	WITHOUT_CLASSIFICATION	1.9578623989074742E-4	DESIGN
path expression	WITHOUT_CLASSIFICATION	0.9999803082449179	WITHOUT_CLASSIFICATION	1.9691755082164788E-5	DESIGN
saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.999003228738001	WITHOUT_CLASSIFICATION	9.967712619990002E-4	DESIGN
persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.998455384131108	WITHOUT_CLASSIFICATION	0.0015446158688919504	DESIGN
anything else	WITHOUT_CLASSIFICATION	0.9999901632619904	WITHOUT_CLASSIFICATION	9.836738009619703E-6	DESIGN
the path expression continues after a ]	WITHOUT_CLASSIFICATION	0.999780002778355	WITHOUT_CLASSIFICATION	2.1999722164495533E-4	DESIGN
careful with this!	WITHOUT_CLASSIFICATION	0.9999042131870934	WITHOUT_CLASSIFICATION	9.578681290655357E-5	DESIGN
the path expression ends at the ]	WITHOUT_CLASSIFICATION	0.9998981119649236	WITHOUT_CLASSIFICATION	1.0188803507630977E-4	DESIGN
"finish off" the join	WITHOUT_CLASSIFICATION	0.9999886907883728	WITHOUT_CLASSIFICATION	1.1309211627126059E-5	DESIGN
NOTICE: no " or . since they are part of (compound) identifiers	WITHOUT_CLASSIFICATION	0.9998484691247722	WITHOUT_CLASSIFICATION	1.5153087522776164E-4	DESIGN
cannot instantiate	WITHOUT_CLASSIFICATION	0.9999720122910813	WITHOUT_CLASSIFICATION	2.7987708918595334E-5	DESIGN
start by looking for HQL keywords...	WITHOUT_CLASSIFICATION	0.9924181758636679	WITHOUT_CLASSIFICATION	0.007581824136332115	DESIGN
inner joins can be abbreviated to 'join'	WITHOUT_CLASSIFICATION	0.9984437424853723	WITHOUT_CLASSIFICATION	0.001556257514627805	DESIGN
'outer' is optional and is ignored	WITHOUT_CLASSIFICATION	0.999432692466956	WITHOUT_CLASSIFICATION	5.673075330440175E-4	DESIGN
now anything that is not a HQL keyword	WITHOUT_CLASSIFICATION	0.9998727138780911	WITHOUT_CLASSIFICATION	1.2728612190894564E-4	DESIGN
process the "old" HQL style where aliases appear _first_ ie. using the IN or IN CLASS constructions	WITHOUT_CLASSIFICATION	0.9998907654828311	WITHOUT_CLASSIFICATION	1.0923451716893134E-4	DESIGN
treat it as a classname	WITHOUT_CLASSIFICATION	0.9999433622701438	WITHOUT_CLASSIFICATION	5.663772985618892E-5	DESIGN
treat it as a path expression	WITHOUT_CLASSIFICATION	0.9999762031365699	WITHOUT_CLASSIFICATION	2.379686343003112E-5	DESIGN
starts with the name of a mapped class (new style)	WITHOUT_CLASSIFICATION	0.9996237444002178	WITHOUT_CLASSIFICATION	3.762555997821753E-4	DESIGN
starts with a path expression (new style)	WITHOUT_CLASSIFICATION	0.9995117061525112	WITHOUT_CLASSIFICATION	4.882938474888593E-4	DESIGN
allow ODMG OQL style: from Person p, p.cars c	WITHOUT_CLASSIFICATION	0.9980112868335667	WITHOUT_CLASSIFICATION	0.0019887131664332544	DESIGN
handle quoted strings	WITHOUT_CLASSIFICATION	0.9999306877885743	WITHOUT_CLASSIFICATION	6.931221142567057E-5	DESIGN
Object insertions, updates, and deletions have list semantics because they must happen in the right order so as to respect referential integrity	WITHOUT_CLASSIFICATION	0.9593967639657031	WITHOUT_CLASSIFICATION	0.04060323603429702	DESIGN
"finish off" the join	WITHOUT_CLASSIFICATION	0.9999886907883728	WITHOUT_CLASSIFICATION	1.1309211627126059E-5	DESIGN
ignore whitespace	WITHOUT_CLASSIFICATION	0.9999374835491469	WITHOUT_CLASSIFICATION	6.251645085310604E-5	DESIGN
do replacements	WITHOUT_CLASSIFICATION	0.9999278109175102	WITHOUT_CLASSIFICATION	7.218908248993992E-5	DESIGN
handle HQL2 collection syntax	WITHOUT_CLASSIFICATION	0.9996370463704413	WITHOUT_CLASSIFICATION	3.629536295588232E-4	DESIGN
uuid.hex is deprecated	WITHOUT_CLASSIFICATION	0.9997778435522026	WITHOUT_CLASSIFICATION	2.2215644779744555E-4	DESIGN
AbstractSelectingDelegate impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994226996701397	WITHOUT_CLASSIFICATION	5.773003298601926E-4	DESIGN
hilo params	WITHOUT_CLASSIFICATION	0.999954769322091	WITHOUT_CLASSIFICATION	4.52306779089907E-5	DESIGN
sql = query;	WITHOUT_CLASSIFICATION	0.9999936010682694	WITHOUT_CLASSIFICATION	6.3989317306382575E-6	DESIGN
performance opt	WITHOUT_CLASSIFICATION	0.9999322879337511	WITHOUT_CLASSIFICATION	6.771206624887374E-5	DESIGN
sql = update;	WITHOUT_CLASSIFICATION	0.9999936010682694	WITHOUT_CLASSIFICATION	6.3989317306382575E-6	DESIGN
hilo config	WITHOUT_CLASSIFICATION	0.9999533075953831	WITHOUT_CLASSIFICATION	4.6692404616952003E-5	DESIGN
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9994315597422329	WITHOUT_CLASSIFICATION	5.684402577671216E-4	DESIGN
don't allow comments on these insert statements as comments totally blow up the Oracle getGeneratedKeys "support" :(	WITHOUT_CLASSIFICATION	0.999328988819068	WITHOUT_CLASSIFICATION	6.710111809319878E-4	DESIGN
abort the save (the object is already saved by a circular cascade)	WITHOUT_CLASSIFICATION	0.9971948808198426	WITHOUT_CLASSIFICATION	0.002805119180157318	DESIGN
throw new IdentifierGenerationException("save associated object first, or disable cascade for inverse association");	WITHOUT_CLASSIFICATION	0.99427962355909	WITHOUT_CLASSIFICATION	0.005720376440909898	DESIGN
intentionally empty	WITHOUT_CLASSIFICATION	0.9999247457090813	WITHOUT_CLASSIFICATION	7.52542909186233E-5	DESIGN
do nothing to avoid a lazy property initialization	WITHOUT_CLASSIFICATION	0.9999348130415647	WITHOUT_CLASSIFICATION	6.518695843519428E-5	DESIGN
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9997105988464778	WITHOUT_CLASSIFICATION	2.8940115352204767E-4	DESIGN
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9994315597422329	WITHOUT_CLASSIFICATION	5.684402577671216E-4	DESIGN
do nothing until we hit the rsult set containing the generated id	WITHOUT_CLASSIFICATION	0.9998998979926134	WITHOUT_CLASSIFICATION	1.0010200738662525E-4	DESIGN
COLUMN and TABLE should be renamed but it would break the public API	WITHOUT_CLASSIFICATION	0.9977908354073044	WITHOUT_CLASSIFICATION	0.002209164592695599	DESIGN
Loaded entity instances, by EntityKey	WITHOUT_CLASSIFICATION	0.9989626598602802	WITHOUT_CLASSIFICATION	0.001037340139719853	DESIGN
if the given name is un-qualified we may neen to qualify it	WITHOUT_CLASSIFICATION	0.9994996560188029	WITHOUT_CLASSIFICATION	5.003439811971181E-4	DESIGN
the default...	WITHOUT_CLASSIFICATION	0.9999821522325891	WITHOUT_CLASSIFICATION	1.7847767410841688E-5	DESIGN
unfortunately not really safe to normalize this to 1 as an initial value like we do the others because we would not be able to control this if we are using a sequence...	WITHOUT_CLASSIFICATION	0.9837750359160002	WITHOUT_CLASSIFICATION	0.01622496408399977	DESIGN
intentionally empty	WITHOUT_CLASSIFICATION	0.9999247457090813	WITHOUT_CLASSIFICATION	7.52542909186233E-5	DESIGN
Identity map of CollectionEntry instances, by the collection wrapper	WITHOUT_CLASSIFICATION	0.9996698741967381	WITHOUT_CLASSIFICATION	3.30125803261838E-4	DESIGN
general purpose parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994298128620261	WITHOUT_CLASSIFICATION	5.701871379738007E-4	DESIGN
table-specific parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995884560307184	WITHOUT_CLASSIFICATION	4.115439692816846E-4	DESIGN
Configurable implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9990438280541786	WITHOUT_CLASSIFICATION	9.561719458214388E-4	DESIGN
IdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9990438280541786	WITHOUT_CLASSIFICATION	9.561719458214388E-4	DESIGN
PersistentIdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9990438280541786	WITHOUT_CLASSIFICATION	9.561719458214388E-4	DESIGN
prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999825695024113	WITHOUT_CLASSIFICATION	1.743049758875311E-5	DESIGN
prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999825695024113	WITHOUT_CLASSIFICATION	1.743049758875311E-5	DESIGN
fetch the generated id in a separate query	WITHOUT_CLASSIFICATION	0.9966625188846109	WITHOUT_CLASSIFICATION	0.0033374811153890605	DESIGN
we just hit the last position	WITHOUT_CLASSIFICATION	0.9999686848959889	WITHOUT_CLASSIFICATION	3.131510401106436E-5	DESIGN
scroll ahead	WITHOUT_CLASSIFICATION	0.9999600375091559	WITHOUT_CLASSIFICATION	3.996249084411563E-5	DESIGN
scroll backward	WITHOUT_CLASSIFICATION	0.9999676017634135	WITHOUT_CLASSIFICATION	3.239823658652409E-5	DESIGN
we have not yet hit the last result...	WITHOUT_CLASSIFICATION	0.9998799236019036	WITHOUT_CLASSIFICATION	1.2007639809640223E-4	DESIGN
Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994231486745722	WITHOUT_CLASSIFICATION	5.768513254278396E-4	DESIGN
State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995389218983857	WITHOUT_CLASSIFICATION	4.6107810161432846E-4	DESIGN
Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994226996701397	WITHOUT_CLASSIFICATION	5.773003298601926E-4	DESIGN
do this when all the properties are updateable since there is a certain likelihood that the information will already be snapshot-cached.	WITHOUT_CLASSIFICATION	0.9997420497290632	WITHOUT_CLASSIFICATION	2.5795027093671003E-4	DESIGN
Inner classes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997791729447687	WITHOUT_CLASSIFICATION	2.2082705523124605E-4	DESIGN
Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994231486745722	WITHOUT_CLASSIFICATION	5.768513254278396E-4	DESIGN
State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995389218983857	WITHOUT_CLASSIFICATION	4.6107810161432846E-4	DESIGN
Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994226996701397	WITHOUT_CLASSIFICATION	5.773003298601926E-4	DESIGN
Caches	WITHOUT_CLASSIFICATION	0.9999113734108903	WITHOUT_CLASSIFICATION	8.862658910963415E-5	DESIGN
Generators:	WITHOUT_CLASSIFICATION	0.9999530626110165	WITHOUT_CLASSIFICATION	4.693738898349722E-5	DESIGN
cache region is defined by the root-class in the hierarchy...	WITHOUT_CLASSIFICATION	0.9996632515082154	WITHOUT_CLASSIFICATION	3.3674849178461146E-4	DESIGN
check if the detached object being merged is the parent	WITHOUT_CLASSIFICATION	0.9996195713795015	WITHOUT_CLASSIFICATION	3.8042862049856365E-4	DESIGN
after all persisters and named queries are registered	WITHOUT_CLASSIFICATION	0.9979346668055296	WITHOUT_CLASSIFICATION	0.002065333194470426	DESIGN
if we get here, it is possible that we have a proxy 'in the way' of the merge map resolution... NOTE: decided to put this here rather than in the above loop as I was nervous about the performance of the loop-in-loop especially considering this is far more likely the 'edge case'	WITHOUT_CLASSIFICATION	0.9900759619751615	WITHOUT_CLASSIFICATION	0.009924038024838603	DESIGN
JNDI + Serialization:	WITHOUT_CLASSIFICATION	0.9999809595990347	WITHOUT_CLASSIFICATION	1.9040400965386596E-5	DESIGN
checking for named queries	WITHOUT_CLASSIFICATION	0.9999548211308468	WITHOUT_CLASSIFICATION	4.5178869153297524E-5	DESIGN
stats	WITHOUT_CLASSIFICATION	0.9999117980076927	WITHOUT_CLASSIFICATION	8.820199230740369E-5	DESIGN
EntityNotFoundDelegate	WITHOUT_CLASSIFICATION	0.9999608966083426	WITHOUT_CLASSIFICATION	3.910339165735296E-5	DESIGN
Check named HQL queries	WITHOUT_CLASSIFICATION	0.9999613978090099	WITHOUT_CLASSIFICATION	3.860219099010563E-5	DESIGN
this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9976658653625365	WITHOUT_CLASSIFICATION	0.002334134637463422	DESIGN
prevents this session from adding things to cache	WITHOUT_CLASSIFICATION	0.9954763344977023	WITHOUT_CLASSIFICATION	0.004523665502297696	DESIGN
from javax.naming.Referenceable	WITHOUT_CLASSIFICATION	0.9991407780033853	WITHOUT_CLASSIFICATION	8.592219966147967E-4	DESIGN
look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999237789276141	WITHOUT_CLASSIFICATION	7.62210723859075E-5	DESIGN
for a dynamic-class	WITHOUT_CLASSIFICATION	0.9997946080693444	WITHOUT_CLASSIFICATION	2.0539193065560233E-4	DESIGN
test this entity to see if we must query it	WITHOUT_CLASSIFICATION	0.9967281219355403	WITHOUT_CLASSIFICATION	0.003271878064459759	DESIGN
NOTE EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999537720019139	WITHOUT_CLASSIFICATION	4.6227998085955236E-5	DESIGN
for backward-compatability	WITHOUT_CLASSIFICATION	0.9999208207511506	WITHOUT_CLASSIFICATION	7.917924884931637E-5	DESIGN
ignore this error for now	WITHOUT_CLASSIFICATION	0.9998774912857396	WITHOUT_CLASSIFICATION	1.225087142603483E-4	DESIGN
to stop the class from being unloaded	WITHOUT_CLASSIFICATION	0.9997235154126863	WITHOUT_CLASSIFICATION	2.764845873137322E-4	DESIGN
in case we were deserialized in a different JVM, look for an instance with the same name (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9992252638201132	WITHOUT_CLASSIFICATION	7.747361798868198E-4	DESIGN
must add to JNDI _after_ adding to HashMaps, because some JNDI servers use serialization	WITHOUT_CLASSIFICATION	0.999609930197796	WITHOUT_CLASSIFICATION	3.900698022039541E-4	DESIGN
Make sure this is a defined parameter and check the incoming value type	WITHOUT_CLASSIFICATION	0.9951547737188936	WITHOUT_CLASSIFICATION	0.004845226281106414	DESIGN
for each of the defined parameters, make sure its value has been set	WITHOUT_CLASSIFICATION	0.9992972876864669	WITHOUT_CLASSIFICATION	7.027123135332144E-4	DESIGN
we never need to apply locks to the SQL	WITHOUT_CLASSIFICATION	0.99578462045124	WITHOUT_CLASSIFICATION	0.0042153795487599585	DESIGN
inserts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994226996701397	WITHOUT_CLASSIFICATION	5.773003298601926E-4	DESIGN
deletes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994049517544914	WITHOUT_CLASSIFICATION	5.950482455085637E-4	DESIGN
during deserialization, we need to reconnect all proxies and collections to this session, as well as the EntityEntry and CollectionEntry instances; these associations are transient because serialization is used for different things.	WITHOUT_CLASSIFICATION	0.9855356870011311	WITHOUT_CLASSIFICATION	0.014464312998868804	DESIGN
updates ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999402947421713	WITHOUT_CLASSIFICATION	5.970525782869358E-4	DESIGN
loading ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9991937222535318	WITHOUT_CLASSIFICATION	8.062777464682113E-4	DESIGN
final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9996457649611611	WITHOUT_CLASSIFICATION	3.542350388388865E-4	DESIGN
final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9996457649611611	WITHOUT_CLASSIFICATION	3.542350388388865E-4	DESIGN
first, try to load it from the temp PC associated to this SS	WITHOUT_CLASSIFICATION	0.9996153216004473	WITHOUT_CLASSIFICATION	3.846783995526636E-4	DESIGN
if the metadata allowed proxy creation and caller did not request forceful eager loading, generate a proxy	WITHOUT_CLASSIFICATION	0.999854157273368	WITHOUT_CLASSIFICATION	1.4584272663205013E-4	DESIGN
otherwise immediately materialize it	WITHOUT_CLASSIFICATION	0.9996377021648124	WITHOUT_CLASSIFICATION	3.622978351875709E-4	DESIGN
/	WITHOUT_CLASSIFICATION	0.9999436311160822	WITHOUT_CLASSIFICATION	5.6368883917833465E-5	DESIGN
no auto-flushing to support in stateless session	WITHOUT_CLASSIFICATION	0.9968609772794726	WITHOUT_CLASSIFICATION	0.003139022720527322	DESIGN
after setting values to object, entityMode	WITHOUT_CLASSIFICATION	0.9998503152296261	WITHOUT_CLASSIFICATION	1.4968477037382005E-4	DESIGN
for EJB3	WITHOUT_CLASSIFICATION	0.9998205518678943	WITHOUT_CLASSIFICATION	1.7944813210566982E-4	DESIGN
just ignore	WITHOUT_CLASSIFICATION	0.9999461392310623	WITHOUT_CLASSIFICATION	5.386076893776679E-5	DESIGN
do a check	WITHOUT_CLASSIFICATION	0.9998928855765343	WITHOUT_CLASSIFICATION	1.0711442346574917E-4	DESIGN
saveOrUpdate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994397642752887	WITHOUT_CLASSIFICATION	5.602357247113082E-4	DESIGN
update() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994397642752887	WITHOUT_CLASSIFICATION	5.602357247113082E-4	DESIGN
lock() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994397642752887	WITHOUT_CLASSIFICATION	5.602357247113082E-4	DESIGN
persist() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994397642752887	WITHOUT_CLASSIFICATION	5.602357247113082E-4	DESIGN
persistOnFlush() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994397642752887	WITHOUT_CLASSIFICATION	5.602357247113082E-4	DESIGN
merge() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994397642752887	WITHOUT_CLASSIFICATION	5.602357247113082E-4	DESIGN
saveOrUpdateCopy() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994397642752887	WITHOUT_CLASSIFICATION	5.602357247113082E-4	DESIGN
delete() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994225406728375	WITHOUT_CLASSIFICATION	5.774593271624271E-4	DESIGN
load()/get() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994397642752887	WITHOUT_CLASSIFICATION	5.602357247113082E-4	DESIGN
refresh() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994397642752887	WITHOUT_CLASSIFICATION	5.602357247113082E-4	DESIGN
replicate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994397642752887	WITHOUT_CLASSIFICATION	5.602357247113082E-4	DESIGN
do not auto-flush while outside a transaction	WITHOUT_CLASSIFICATION	0.9965601557241035	WITHOUT_CLASSIFICATION	0.003439844275896553	DESIGN
this is an internal error of some sort...	WITHOUT_CLASSIFICATION	0.9967390204288323	WITHOUT_CLASSIFICATION	0.003260979571167617	DESIGN
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9724089056896512	WITHOUT_CLASSIFICATION	0.02759109431034878	DESIGN
only collections belonging to deleted entities are allowed to be dereferenced in the case of orphan delete	WITHOUT_CLASSIFICATION	0.999900988802199	WITHOUT_CLASSIFICATION	9.901119780104604E-5	DESIGN
if it was previously unreferenced, we need to flush in order to get its state into the database in order to execute query	WITHOUT_CLASSIFICATION	0.9783577576257143	WITHOUT_CLASSIFICATION	0.02164224237428566	DESIGN
not for internal use:	WITHOUT_CLASSIFICATION	0.9998696191894133	WITHOUT_CLASSIFICATION	1.3038081058665374E-4	DESIGN
otherwise, we only need to flush if there are in-memory changes to the queried tables	WITHOUT_CLASSIFICATION	0.9997288909056442	WITHOUT_CLASSIFICATION	2.711090943558791E-4	DESIGN
might need to run a different filter entirely after the flush because the collection role may have changed	WITHOUT_CLASSIFICATION	0.996435592939951	WITHOUT_CLASSIFICATION	0.0035644070600489726	DESIGN
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9724089056896512	WITHOUT_CLASSIFICATION	0.02759109431034878	DESIGN
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9724089056896512	WITHOUT_CLASSIFICATION	0.02759109431034878	DESIGN
if it is initialized, see if the underlying instance is contained, since we need to account for the fact that it might have been evicted	WITHOUT_CLASSIFICATION	0.9889707963289998	WITHOUT_CLASSIFICATION	0.01102920367100017	DESIGN
basically just an adapted copy of find(CriteriaImpl)	WITHOUT_CLASSIFICATION	0.9999435697010508	WITHOUT_CLASSIFICATION	5.64302989491928E-5	DESIGN
it is possible for this method to be called during flush processing, so make certain that we do not accidently initialize an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9035770805327202	WITHOUT_CLASSIFICATION	0.09642291946727974	DESIGN
nothing to do in a stateful session	WITHOUT_CLASSIFICATION	0.9995566693272495	WITHOUT_CLASSIFICATION	4.4333067275050366E-4	DESIGN
ignore	WITHOUT_CLASSIFICATION	0.9998571141915925	WITHOUT_CLASSIFICATION	1.4288580840761378E-4	DESIGN
ignore this error for now	WITHOUT_CLASSIFICATION	0.9998774912857396	WITHOUT_CLASSIFICATION	1.225087142603483E-4	DESIGN
we need to writeObject() on this since interceptor is user defined	WITHOUT_CLASSIFICATION	0.9985411697293661	WITHOUT_CLASSIFICATION	0.0014588302706339024	DESIGN
the old-time stand-by...	WITHOUT_CLASSIFICATION	0.9999851311530998	WITHOUT_CLASSIFICATION	1.4868846900064337E-5	DESIGN
parameter bind values...	WITHOUT_CLASSIFICATION	0.9996877886697771	WITHOUT_CLASSIFICATION	3.1221133022287553E-4	DESIGN
Parameter handling code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9905569151041278	WITHOUT_CLASSIFICATION	0.00944308489587208	DESIGN
prepend value and type list with null for any positions before the wanted position.	WITHOUT_CLASSIFICATION	0.9968099694619222	WITHOUT_CLASSIFICATION	0.0031900305380778947	DESIGN
Execution methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9985644759718378	WITHOUT_CLASSIFICATION	0.0014355240281621901	DESIGN
we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9992635005793536	WITHOUT_CLASSIFICATION	7.364994206464679E-4	DESIGN
we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9992635005793536	WITHOUT_CLASSIFICATION	7.364994206464679E-4	DESIGN
we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9992635005793536	WITHOUT_CLASSIFICATION	7.364994206464679E-4	DESIGN
we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9992635005793536	WITHOUT_CLASSIFICATION	7.364994206464679E-4	DESIGN
FieldInterceptor impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994226996701397	WITHOUT_CLASSIFICATION	5.773003298601926E-4	DESIGN
subclass accesses ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99934257225796	WITHOUT_CLASSIFICATION	6.574277420400733E-4	DESIGN
let's assume that there is only one lazy fetch group, for now!	WITHOUT_CLASSIFICATION	0.9997186197519524	WITHOUT_CLASSIFICATION	2.813802480475544E-4	DESIGN
FieldHandler impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994226996701397	WITHOUT_CLASSIFICATION	5.773003298601926E-4	DESIGN
should not need to grow beyond the size of the total number of columns in the rs	WITHOUT_CLASSIFICATION	0.9988029573075223	WITHOUT_CLASSIFICATION	0.0011970426924776834	DESIGN
should probably no-op commit/rollback here, at least in JTA scenarios	WITHOUT_CLASSIFICATION	0.9968352588060438	WITHOUT_CLASSIFICATION	0.003164741193956166	DESIGN
Base Expectation impls ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994332285651214	WITHOUT_CLASSIFICATION	5.667714348785821E-4	DESIGN
Various Expectation instances ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997102718770192	WITHOUT_CLASSIFICATION	2.897281229807271E-4	DESIGN
explicitly perform no checking...	WITHOUT_CLASSIFICATION	0.9994472415324809	WITHOUT_CLASSIFICATION	5.527584675191518E-4	DESIGN
used from testsuite	WITHOUT_CLASSIFICATION	0.9998557265677009	WITHOUT_CLASSIFICATION	1.4427343229897292E-4	DESIGN
assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9976499525251158	WITHOUT_CLASSIFICATION	0.002350047474884223	DESIGN
package	WITHOUT_CLASSIFICATION	0.9997312868516849	WITHOUT_CLASSIFICATION	2.6871314831509904E-4	DESIGN
register synch; stats.connect()	WITHOUT_CLASSIFICATION	0.9992554771354853	WITHOUT_CLASSIFICATION	7.445228645147207E-4	DESIGN
noncritical, swallow and let the other propagate!	WITHOUT_CLASSIFICATION	0.999382232249695	WITHOUT_CLASSIFICATION	6.177677503049319E-4	DESIGN
calls executeBatch()	WITHOUT_CLASSIFICATION	0.9999691572155801	WITHOUT_CLASSIFICATION	3.0842784419872604E-5	DESIGN
no big deal	WITHOUT_CLASSIFICATION	0.9999841840960482	WITHOUT_CLASSIFICATION	1.58159039517729E-5	DESIGN
no big deal	WITHOUT_CLASSIFICATION	0.9999841840960482	WITHOUT_CLASSIFICATION	1.58159039517729E-5	DESIGN
no big deal	WITHOUT_CLASSIFICATION	0.9999841840960482	WITHOUT_CLASSIFICATION	1.58159039517729E-5	DESIGN
sybase driver (jConnect) throwing NPE here in certain cases, but we'll just handle the general "unexpected" case	WITHOUT_CLASSIFICATION	0.9991281644149661	WITHOUT_CLASSIFICATION	8.718355850338661E-4	DESIGN
see explanation above...	WITHOUT_CLASSIFICATION	0.9999516307051386	WITHOUT_CLASSIFICATION	4.836929486139831E-5	DESIGN
If we are in the process of releasing, no sense checking for aggressive-release possibility.	WITHOUT_CLASSIFICATION	0.9993578306356984	WITHOUT_CLASSIFICATION	6.421693643016266E-4	DESIGN
EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999530626110165	WITHOUT_CLASSIFICATION	4.693738898349722E-5	DESIGN
ResultSet impl ("overridden") ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994226996701397	WITHOUT_CLASSIFICATION	5.773003298601926E-4	DESIGN
ResultSet impl (delegated) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994226996701397	WITHOUT_CLASSIFICATION	5.773003298601926E-4	DESIGN
refer to comment in StatefulPersistenceContext.addCollection()	WITHOUT_CLASSIFICATION	0.9996850755137956	WITHOUT_CLASSIFICATION	3.1492448620446537E-4	DESIGN
ConnectionManager.Callback implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9990438280541786	WITHOUT_CLASSIFICATION	9.561719458214388E-4	DESIGN
Note : success = false, because we don't know the outcome of the transaction	WITHOUT_CLASSIFICATION	0.9999640142200483	WITHOUT_CLASSIFICATION	3.5985779951729336E-5	DESIGN
we already have a callback registered; either a local (org.hibernate.Transaction) transaction has accepted callback responsibilities, or we have previously registered a transaction synch.	WITHOUT_CLASSIFICATION	0.9970689403664268	WITHOUT_CLASSIFICATION	0.002931059633573128	DESIGN
the configured transaction-factory says it only supports local callback mode, so no sense attempting to register a JTA Synchronization	WITHOUT_CLASSIFICATION	0.9844425705171269	WITHOUT_CLASSIFICATION	0.015557429482873062	DESIGN
transactions marked for rollback-only cause some TM impls to throw exceptions	WITHOUT_CLASSIFICATION	0.9947853783477493	WITHOUT_CLASSIFICATION	0.00521462165225072	DESIGN
serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999422325611317	WITHOUT_CLASSIFICATION	5.776743886829917E-4	DESIGN
postInitialize() will be called after initialization	WITHOUT_CLASSIFICATION	0.9998876396944477	WITHOUT_CLASSIFICATION	1.1236030555236165E-4	DESIGN
cannot handle single quotes	WITHOUT_CLASSIFICATION	0.9999390373128128	WITHOUT_CLASSIFICATION	6.096268718724534E-5	DESIGN
todo : for 4.0 private static final Logger log = LoggerFactory.getLogger( SQLStatementLogger.class ); this is the legacy logging 'category'...	WITHOUT_CLASSIFICATION	0.9995265551736375	WITHOUT_CLASSIFICATION	4.7344482636243665E-4	DESIGN
note that for sequential scrolling, we make the assumption that the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9775206452960126	WITHOUT_CLASSIFICATION	0.022479354703987455	DESIGN
don't even bother trying to read further	WITHOUT_CLASSIFICATION	0.9992569164510983	WITHOUT_CLASSIFICATION	7.43083548901669E-4	DESIGN
don't even bother trying to read any further	WITHOUT_CLASSIFICATION	0.999368765256264	WITHOUT_CLASSIFICATION	6.312347437361399E-4	DESIGN
position cursor to the last row	WITHOUT_CLASSIFICATION	0.9997404556026426	WITHOUT_CLASSIFICATION	2.595443973574127E-4	DESIGN
sequentially read the result set in reverse until we recognize a change in the key value. At that point, we are pointed at the last physical sequential row for the logical row in which we are interested in processing	WITHOUT_CLASSIFICATION	0.9964099025992172	WITHOUT_CLASSIFICATION	0.00359009740078269	DESIGN
Read backwards until we read past the first physical sequential row with the key we are interested in loading	WITHOUT_CLASSIFICATION	0.9999199131176278	WITHOUT_CLASSIFICATION	8.008688237221016E-5	DESIGN
Finally, read ahead one row to position result set cursor at the first physical row we are interested in loading	WITHOUT_CLASSIFICATION	0.9990026871896379	WITHOUT_CLASSIFICATION	9.973128103620001E-4	DESIGN
now get an existing proxy for each row element (if there is one)	WITHOUT_CLASSIFICATION	0.9999699441082536	WITHOUT_CLASSIFICATION	3.0055891746439128E-5	DESIGN
force the proxy to resolve itself	WITHOUT_CLASSIFICATION	0.9999734528769035	WITHOUT_CLASSIFICATION	2.6547123096473815E-5	DESIGN
this is equivalent to the old behavior...	WITHOUT_CLASSIFICATION	0.9991800092937145	WITHOUT_CLASSIFICATION	8.199907062853912E-4	DESIGN
if null, owner will be retrieved from session	WITHOUT_CLASSIFICATION	0.9997591420678383	WITHOUT_CLASSIFICATION	2.4085793216171517E-4	DESIGN
final String queryString,	WITHOUT_CLASSIFICATION	0.9999068211839458	WITHOUT_CLASSIFICATION	9.317881605420867E-5	DESIGN
if it was a reference to self, don't need to nullify unless we are using native id generation, in which case we definitely need to nullify	WITHOUT_CLASSIFICATION	0.9987828454068153	WITHOUT_CLASSIFICATION	0.001217154593184698	DESIGN
end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9996181746927243	WITHOUT_CLASSIFICATION	3.818253072756614E-4	DESIGN
in an effort to avoid concurrent-modification-exceptions (from potential recursive calls back through here as a result of the eventual call to PersistentCollection#endRead), we scan the internal loadingCollections map for matches and store those matches in a temp collection. the temp collection is then used to "drive" the #endRead processing.	WITHOUT_CLASSIFICATION	0.87395921195202	WITHOUT_CLASSIFICATION	0.12604078804798005	DESIGN
we can reuse it for each row	WITHOUT_CLASSIFICATION	0.9999322632985032	WITHOUT_CLASSIFICATION	6.773670149681748E-5	DESIGN
can't reuse in this case	WITHOUT_CLASSIFICATION	0.9999513440692228	WITHOUT_CLASSIFICATION	4.865593077710994E-5	DESIGN
First we need to suspend any current JTA transaction and obtain a JDBC connection	WITHOUT_CLASSIFICATION	0.9925042929723995	WITHOUT_CLASSIFICATION	0.007495707027600455	DESIGN
getResultList(results);	WITHOUT_CLASSIFICATION	0.9999608966083426	WITHOUT_CLASSIFICATION	3.910339165735296E-5	DESIGN
if we only returned one entity, query by key is more efficient	WITHOUT_CLASSIFICATION	0.98927045624345	WITHOUT_CLASSIFICATION	0.010729543756549999	DESIGN
a collection loaded in the current session can not possibly be the collection belonging to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9960817153075703	WITHOUT_CLASSIFICATION	0.003918284692429772	DESIGN
handle empty collection	WITHOUT_CLASSIFICATION	0.9994366544296925	WITHOUT_CLASSIFICATION	5.633455703074292E-4	DESIGN
else no collection element, but also no owner	WITHOUT_CLASSIFICATION	0.9997382279622515	WITHOUT_CLASSIFICATION	2.6177203774850003E-4	DESIGN
handle empty collections	WITHOUT_CLASSIFICATION	0.9998711020883508	WITHOUT_CLASSIFICATION	1.2889791164920293E-4	DESIGN
else this is not a collection initializer (and empty collections will be detected by looking for the owner's identifier in the result set)	WITHOUT_CLASSIFICATION	0.9244161425874198	WITHOUT_CLASSIFICATION	0.07558385741258017	DESIGN
validate() instances of Validatable	WITHOUT_CLASSIFICATION	0.9997600757544749	WITHOUT_CLASSIFICATION	2.399242455251417E-4	DESIGN
if we know there is exactly 1 row, we can skip. it would be great if we could _always_ skip this; it is a problem for <key-many-to-one>	WITHOUT_CLASSIFICATION	0.9988373202269433	WITHOUT_CLASSIFICATION	0.0011626797730567681	DESIGN
remove all collections for the entity from the session-level cache	WITHOUT_CLASSIFICATION	0.9993305521994579	WITHOUT_CLASSIFICATION	6.694478005421653E-4	DESIGN
null version means the object is in the process of being loaded somewhere else in the ResultSet	WITHOUT_CLASSIFICATION	0.9979016582224005	WITHOUT_CLASSIFICATION	0.002098341777599469	DESIGN
problematic for <key-many-to-one>!	WITHOUT_CLASSIFICATION	0.9988316868548457	WITHOUT_CLASSIFICATION	0.0011683131451543701	DESIGN
use the id passed in	WITHOUT_CLASSIFICATION	0.9999634054435457	WITHOUT_CLASSIFICATION	3.659455645434501E-5	DESIGN
do nothing	WITHOUT_CLASSIFICATION	0.9999869850596852	WITHOUT_CLASSIFICATION	1.301494031487855E-5	DESIGN
prefer re-generation of identity!	WITHOUT_CLASSIFICATION	0.9995219131857043	WITHOUT_CLASSIFICATION	4.780868142957678E-4	DESIGN
no point doing this if NONE was requested	WITHOUT_CLASSIFICATION	0.9999055733012743	WITHOUT_CLASSIFICATION	9.442669872570287E-5	DESIGN
If the object is already loaded, return the loaded one	WITHOUT_CLASSIFICATION	0.9998023220698695	WITHOUT_CLASSIFICATION	1.976779301303701E-4	DESIGN
its already loaded so don't need to hydrate it	WITHOUT_CLASSIFICATION	0.998306189068076	WITHOUT_CLASSIFICATION	0.0016938109319239228	DESIGN
cascade the refresh prior to refreshing this entity	WITHOUT_CLASSIFICATION	0.9992060690225986	WITHOUT_CLASSIFICATION	7.939309774013659E-4	DESIGN
the load() which takes an entity does not pass an entityName	WITHOUT_CLASSIFICATION	0.9999216080589111	WITHOUT_CLASSIFICATION	7.83919410889331E-5	DESIGN
we only check the version when _upgrading_ lock modes	WITHOUT_CLASSIFICATION	0.9998610362456823	WITHOUT_CLASSIFICATION	1.389637543175577E-4	DESIGN
look for a proxy	WITHOUT_CLASSIFICATION	0.9999055374800151	WITHOUT_CLASSIFICATION	9.446251998492834E-5	DESIGN
we need to upgrade the lock mode to the mode requested	WITHOUT_CLASSIFICATION	0.9974207055556655	WITHOUT_CLASSIFICATION	0.0025792944443344015	DESIGN
its the given optional object	WITHOUT_CLASSIFICATION	0.9999848424121872	WITHOUT_CLASSIFICATION	1.5157587812883111E-5	DESIGN
instantiate a new instance	WITHOUT_CLASSIFICATION	0.999892831046757	WITHOUT_CLASSIFICATION	1.0716895324313208E-4	DESIGN
need to hydrate it.	WITHOUT_CLASSIFICATION	0.9996585833323894	WITHOUT_CLASSIFICATION	3.4141666761051205E-4	DESIGN
return a newly loaded object	WITHOUT_CLASSIFICATION	0.9998444317475547	WITHOUT_CLASSIFICATION	1.5556825244532208E-4	DESIGN
will be ignored, using the existing Entry instead	WITHOUT_CLASSIFICATION	0.9998644719485335	WITHOUT_CLASSIFICATION	1.3552805146657535E-4	DESIGN
key is an entity involved with the operation performed by the listener; value can be either a copy of the entity or the entity itself	WITHOUT_CLASSIFICATION	0.9999376418865996	WITHOUT_CLASSIFICATION	6.235811340042862E-5	DESIGN
materialize associations (and initialize the object) later	WITHOUT_CLASSIFICATION	0.9997110318051169	WITHOUT_CLASSIFICATION	2.889681948831326E-4	DESIGN
Get the persister for the _subclass_	WITHOUT_CLASSIFICATION	0.9997829018590018	WITHOUT_CLASSIFICATION	2.1709814099825952E-4	DESIGN
ok in normal Hibernate usage to delete a detached entity; JPA however forbids it, thus this is a hook for HEM to affect this behavior	WITHOUT_CLASSIFICATION	0.9900349297442095	WITHOUT_CLASSIFICATION	0.009965070255790597	DESIGN
the entry will be removed after the flush, and will no longer override the stale snapshot This is now handled by removeEntity() in EntityDeleteAction persistenceContext.removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9977534310549263	WITHOUT_CLASSIFICATION	0.002246568945073703	DESIGN
addInitializedCollection(collection, persister, id);	WITHOUT_CLASSIFICATION	0.9994226996701397	WITHOUT_CLASSIFICATION	5.773003298601926E-4	DESIGN
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999530626110165	WITHOUT_CLASSIFICATION	4.693738898349722E-5	DESIGN
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999530626110165	WITHOUT_CLASSIFICATION	4.693738898349722E-5	DESIGN
|| oj.getJoinable().consumesCollectionAlias()	WITHOUT_CLASSIFICATION	0.999321758525581	WITHOUT_CLASSIFICATION	6.78241474418993E-4	DESIGN
here we do not bother with the discriminator.	WITHOUT_CLASSIFICATION	0.99847851719618	WITHOUT_CLASSIFICATION	0.0015214828038200537	DESIGN
Code to handle subclasses of topClass	WITHOUT_CLASSIFICATION	0.9982063411506793	WITHOUT_CLASSIFICATION	0.001793658849320738	DESIGN
woops we got an instance of another class hierarchy branch	WITHOUT_CLASSIFICATION	0.999792152273548	WITHOUT_CLASSIFICATION	2.0784772645202358E-4	DESIGN
we can go straight to the first required row	WITHOUT_CLASSIFICATION	0.9994498941368897	WITHOUT_CLASSIFICATION	5.501058631102662E-4	DESIGN
we need to step through the rows one row at a time (slow)	WITHOUT_CLASSIFICATION	0.9902515107435039	WITHOUT_CLASSIFICATION	0.009748489256496023	DESIGN
synchronized to avoid multi-thread access issues; defined as method synch to avoid potential deadlock issues due to nature of code.	WITHOUT_CLASSIFICATION	0.9989186053704292	WITHOUT_CLASSIFICATION	0.001081394629570793	DESIGN
Allows various loaders (ok mainly the QueryLoader :) to check whether scrolling of their result set should be allowed. By default it is allowed.	WITHOUT_CLASSIFICATION	0.998659802650819	WITHOUT_CLASSIFICATION	0.0013401973491810426	DESIGN
before adding to collection!	WITHOUT_CLASSIFICATION	0.9999540564057277	WITHOUT_CLASSIFICATION	4.5943594272295866E-5	DESIGN
if the current depth is 0, the root thing being loaded is the many-to-many collection itself. Here, it is alright to use an inner join...	WITHOUT_CLASSIFICATION	0.9920721053643065	WITHOUT_CLASSIFICATION	0.007927894635693582	DESIGN
operations which cascade as far as the collection also cascade to collection elements	WITHOUT_CLASSIFICATION	0.9999530573201852	WITHOUT_CLASSIFICATION	4.694267981463785E-5	DESIGN
simple, because we can't have a one-to-one or a collection (or even a property-ref) in a composite-element:	WITHOUT_CLASSIFICATION	0.9969275243721514	WITHOUT_CLASSIFICATION	0.0030724756278485916	DESIGN
a composite key	WITHOUT_CLASSIFICATION	0.9998881591744374	WITHOUT_CLASSIFICATION	1.1184082556266096E-4	DESIGN
if no batch, use "foo = ? and bar = ?"	WITHOUT_CLASSIFICATION	0.9997303783947917	WITHOUT_CLASSIFICATION	2.696216052082623E-4	DESIGN
it must be a collection fetch	WITHOUT_CLASSIFICATION	0.9989658676907666	WITHOUT_CLASSIFICATION	0.001034132309233379	DESIGN
needed later for many-to-many/filter application	WITHOUT_CLASSIFICATION	0.9988604415847827	WITHOUT_CLASSIFICATION	0.0011395584152172477	DESIGN
&& etype.isReferenceToPrimaryKey()	WITHOUT_CLASSIFICATION	0.9994481295885426	WITHOUT_CLASSIFICATION	5.51870411457409E-4	DESIGN
it might still need to apply a collection ordering based on a many-to-many defined order-by...	WITHOUT_CLASSIFICATION	0.7058160208145755	WITHOUT_CLASSIFICATION	0.2941839791854246	DESIGN
if a composite key, use "( (foo = ? and bar = ?) or (foo = ? and bar = ?) )" for batching TODO: unnecessary for databases with ANSI-style joins	WITHOUT_CLASSIFICATION	0.8588447044576316	DESIGN	0.14115529554236841	WITHOUT_CLASSIFICATION
belong to other persister belong to other persister	WITHOUT_CLASSIFICATION	0.9981760834979688	WITHOUT_CLASSIFICATION	0.0018239165020310865	DESIGN
we found it	WITHOUT_CLASSIFICATION	0.9999236523788213	WITHOUT_CLASSIFICATION	7.634762117865854E-5	DESIGN
we can use an inner join for the many-to-many	WITHOUT_CLASSIFICATION	0.999051050267862	WITHOUT_CLASSIFICATION	9.489497321381316E-4	DESIGN
disable a join back to this same association	WITHOUT_CLASSIFICATION	0.9896070805308028	WITHOUT_CLASSIFICATION	0.010392919469197183	DESIGN
NOTE: unlike all other Loaders, this one is NOT multithreaded, or cacheable!!	WITHOUT_CLASSIFICATION	0.9949934633802883	WITHOUT_CLASSIFICATION	0.005006536619711738	DESIGN
the user visible aliases, which are unknown to the superclass, these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999427309126792	WITHOUT_CLASSIFICATION	5.726908732083782E-5	DESIGN
root entity comes last	WITHOUT_CLASSIFICATION	0.9999370747769524	WITHOUT_CLASSIFICATION	6.292522304761678E-5	DESIGN
deliberately ignore return value!	WITHOUT_CLASSIFICATION	0.9992928228017697	WITHOUT_CLASSIFICATION	7.071771982303523E-4	DESIGN
alias may be null EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999279145994763	WITHOUT_CLASSIFICATION	7.208540052370556E-5	DESIGN
if it is a compound path	WITHOUT_CLASSIFICATION	0.9999185467272957	WITHOUT_CLASSIFICATION	8.145327270429382E-5	DESIGN
otherwise assume the parent is the the criteria that created us	WITHOUT_CLASSIFICATION	0.9994022276285441	WITHOUT_CLASSIFICATION	5.977723714558816E-4	DESIGN
if its the root criteria, we are done	WITHOUT_CLASSIFICATION	0.998131599956447	WITHOUT_CLASSIFICATION	0.001868400043553109	DESIGN
otherwise, recurse	WITHOUT_CLASSIFICATION	0.9999530626110165	WITHOUT_CLASSIFICATION	4.693738898349722E-5	DESIGN
the criteria instance	WITHOUT_CLASSIFICATION	0.9999786399638315	WITHOUT_CLASSIFICATION	2.136003616850168E-5	DESIGN
the entity name	WITHOUT_CLASSIFICATION	0.9999702306201425	WITHOUT_CLASSIFICATION	2.9769379857592083E-5	DESIGN
not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9999297909597218	WITHOUT_CLASSIFICATION	7.020904027824311E-5	DESIGN
not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9999297909597218	WITHOUT_CLASSIFICATION	7.020904027824311E-5	DESIGN
it refers to an alias of a projection	WITHOUT_CLASSIFICATION	0.9981484183253424	WITHOUT_CLASSIFICATION	0.0018515816746575173	DESIGN
should never happen, i think	WITHOUT_CLASSIFICATION	0.999791363739948	WITHOUT_CLASSIFICATION	2.0863626005192718E-4	DESIGN
Detect discriminator values...	WITHOUT_CLASSIFICATION	0.9999475348405671	WITHOUT_CLASSIFICATION	5.246515943280553E-5	DESIGN
Convert the string value into the proper type.	WITHOUT_CLASSIFICATION	0.998229240371428	WITHOUT_CLASSIFICATION	0.0017707596285720171	DESIGN
and the qualifier is not the alias of this criteria -> check to see if we belong to some criteria other than the one that created us	WITHOUT_CLASSIFICATION	0.9987742977025639	WITHOUT_CLASSIFICATION	0.0012257022974361369	DESIGN
it does not refer to an alias of a projection, look for a property	WITHOUT_CLASSIFICATION	0.997801209631337	WITHOUT_CLASSIFICATION	0.0021987903686629794	DESIGN
Otherwise, this is an ordinary value.	WITHOUT_CLASSIFICATION	0.9980315731304583	WITHOUT_CLASSIFICATION	0.0019684268695416584	DESIGN
Currently not cachable if autodiscover types is in effect (e.g. "select ...")	WITHOUT_CLASSIFICATION	0.9979877210799925	WITHOUT_CLASSIFICATION	0.0020122789200074788	DESIGN
private final String[] sqlAliases; private final String[] sqlAliasSuffixes;	WITHOUT_CLASSIFICATION	0.9993313517119543	WITHOUT_CLASSIFICATION	6.686482880456122E-4	DESIGN
this is only needed (afaict) for ResultTransformer processing...	WITHOUT_CLASSIFICATION	0.9981047706512821	WITHOUT_CLASSIFICATION	0.0018952293487179378	DESIGN
determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.99955243850067	WITHOUT_CLASSIFICATION	4.4756149933003193E-4	DESIGN
build an array with indices equal to the total number of actual returns in the result Hibernate will return for this query (scalars + non-scalars)	WITHOUT_CLASSIFICATION	0.9992445781697181	WITHOUT_CLASSIFICATION	7.554218302818447E-4	DESIGN
replace {....} with corresponding column aliases	WITHOUT_CLASSIFICATION	0.9993813352807812	WITHOUT_CLASSIFICATION	6.18664719218698E-4	DESIGN
No additional open braces found in the string, append the rest of the string in its entirty and quit this loop	WITHOUT_CLASSIFICATION	0.9998496716417812	WITHOUT_CLASSIFICATION	1.5032835821876983E-4	DESIGN
apend everything up until the next encountered open brace	WITHOUT_CLASSIFICATION	0.999925364261035	WITHOUT_CLASSIFICATION	7.463573896501191E-5	DESIGN
it is a simple table alias {foo}	WITHOUT_CLASSIFICATION	0.9987894194783328	WITHOUT_CLASSIFICATION	0.0012105805216672276	DESIGN
passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9928318047751805	WITHOUT_CLASSIFICATION	0.007168195224819449	DESIGN
passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9928318047751805	WITHOUT_CLASSIFICATION	0.007168195224819449	DESIGN
The current alias is referencing the collection to be eagerly fetched	WITHOUT_CLASSIFICATION	0.9968850843090884	WITHOUT_CLASSIFICATION	0.0031149156909116055	DESIGN
it is a property reference {foo.bar}	WITHOUT_CLASSIFICATION	0.9995565962707406	WITHOUT_CLASSIFICATION	4.434037292593746E-4	DESIGN
Possibly handle :something parameters for the query ?	WITHOUT_CLASSIFICATION	0.9978567715687506	WITHOUT_CLASSIFICATION	0.0021432284312493015	DESIGN
Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.999234302444079	WITHOUT_CLASSIFICATION	7.656975559210926E-4	DESIGN
private final List persisters = new ArrayList();	WITHOUT_CLASSIFICATION	0.9996599004236425	WITHOUT_CLASSIFICATION	3.400995763575486E-4	DESIGN
package	WITHOUT_CLASSIFICATION	0.9997312868516849	WITHOUT_CLASSIFICATION	2.6871314831509904E-4	DESIGN
NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999803016396185	WITHOUT_CLASSIFICATION	1.969836038149817E-5	DESIGN
private final List scalarTypes = new ArrayList(); private final List scalarColumnAliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999011945707925	WITHOUT_CLASSIFICATION	9.880542920751275E-5	DESIGN
Now, process the returns	WITHOUT_CLASSIFICATION	0.9999781590023998	WITHOUT_CLASSIFICATION	2.1840997600110173E-5	DESIGN
private List collectionOwnerAliases = new ArrayList(); private List collectionAliases = new ArrayList(); private List collectionPersisters = new ArrayList(); private List collectionResults = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999210407454906	WITHOUT_CLASSIFICATION	7.895925450940963E-5	DESIGN
already been processed...	WITHOUT_CLASSIFICATION	0.9999704219051316	WITHOUT_CLASSIFICATION	2.9578094868488957E-5	DESIGN
already been processed...	WITHOUT_CLASSIFICATION	0.9999704219051316	WITHOUT_CLASSIFICATION	2.9578094868488957E-5	DESIGN
Make sure the owner alias is known...	WITHOUT_CLASSIFICATION	0.9998798329875993	WITHOUT_CLASSIFICATION	1.2016701240069136E-4	DESIGN
first, break down the returns into maps keyed by alias so that role returns can be more easily resolved to their owners	WITHOUT_CLASSIFICATION	0.9006136232597942	WITHOUT_CLASSIFICATION	0.09938637674020574	DESIGN
scalarColumnAliases.add( typeReturn.getColumnAlias() ); scalarTypes.add( typeReturn.getType() );	WITHOUT_CLASSIFICATION	0.9994226996701397	WITHOUT_CLASSIFICATION	5.773003298601926E-4	DESIGN
If this return's alias has not been processed yet, do so b4 further processing of this return	WITHOUT_CLASSIFICATION	0.9993876246317185	WITHOUT_CLASSIFICATION	6.123753682815315E-4	DESIGN
collectionOwnerAliases.add( ownerAlias );	WITHOUT_CLASSIFICATION	0.9994226996701397	WITHOUT_CLASSIFICATION	5.773003298601926E-4	DESIGN
for merging of versioned entities, we consider the version having been changed only when: 1) the two version values are different; AND 2) The target actually represents database state! This second condition is a special case which allows an entity to be merged during the same transaction (though during a seperate operation) in which it was originally persisted/saved	WITHOUT_CLASSIFICATION	0.9998969712586396	WITHOUT_CLASSIFICATION	1.0302874136039083E-4	DESIGN
this is the second pass through on a merge op, so here we limit the replacement to associations types (value types were already replaced during the first pass)	WITHOUT_CLASSIFICATION	0.9822552358355443	WITHOUT_CLASSIFICATION	0.017744764164455744	DESIGN
EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999113734108903	WITHOUT_CLASSIFICATION	8.862658910963415E-5	DESIGN
cascade-save to collections AFTER the collection owner was saved	WITHOUT_CLASSIFICATION	0.9994802888045096	WITHOUT_CLASSIFICATION	5.19711195490501E-4	DESIGN
Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9991811833075067	WITHOUT_CLASSIFICATION	8.188166924932326E-4	DESIGN
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999818602049838	WITHOUT_CLASSIFICATION	1.8139795016161024E-5	DESIGN
currently only the Hibernate-supplied DbTimestampType is supported here	WITHOUT_CLASSIFICATION	0.999472393257921	WITHOUT_CLASSIFICATION	5.27606742078985E-4	DESIGN
This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9916359108925075	WITHOUT_CLASSIFICATION	0.008364089107492563	DESIGN
make a new one	WITHOUT_CLASSIFICATION	0.9991074921249345	WITHOUT_CLASSIFICATION	8.925078750653431E-4	DESIGN
not so sure this is even valid subtree. but if it was, it'd represent two unrelated table references...	WITHOUT_CLASSIFICATION	0.9999164111346603	WITHOUT_CLASSIFICATION	8.35888653395951E-5	DESIGN
(NOT (GT a b) ) => (LE a b)	WITHOUT_CLASSIFICATION	0.9999218442766663	WITHOUT_CLASSIFICATION	7.815572333359797E-5	DESIGN
private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.999952715576476	WITHOUT_CLASSIFICATION	4.728442352394048E-5	DESIGN
include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9998960151568158	WITHOUT_CLASSIFICATION	1.039848431842777E-4	DESIGN
sqlResultTypes = selectClause.getSqlResultTypes();	WITHOUT_CLASSIFICATION	0.999921261100112	WITHOUT_CLASSIFICATION	7.873889988796204E-5	DESIGN
by default	WITHOUT_CLASSIFICATION	0.9998527888832149	WITHOUT_CLASSIFICATION	1.4721111678507002E-4	DESIGN
This is now handled earlier in this method.	WITHOUT_CLASSIFICATION	0.9909258965908012	WITHOUT_CLASSIFICATION	0.009074103409198838	DESIGN
-- Loader implementation --	WITHOUT_CLASSIFICATION	0.9999364414169495	WITHOUT_CLASSIFICATION	6.355858305052437E-5	DESIGN
-- Loader overrides --	WITHOUT_CLASSIFICATION	0.9999616393205586	WITHOUT_CLASSIFICATION	3.8360679441428215E-5	DESIGN
(NOT (IS_NULL a b) ) => (IS_NOT_NULL a b)	WITHOUT_CLASSIFICATION	0.9988467730379419	WITHOUT_CLASSIFICATION	0.0011532269620582111	DESIGN
NONE, because its the requested lock mode, not the actual!	WITHOUT_CLASSIFICATION	0.9999091893848056	WITHOUT_CLASSIFICATION	9.081061519444104E-5	DESIGN
meant to handle dynamic instantiation queries...	WITHOUT_CLASSIFICATION	0.9979071760281393	WITHOUT_CLASSIFICATION	0.0020928239718607487	DESIGN
--- Query translator methods ---	WITHOUT_CLASSIFICATION	0.9985698953818101	WITHOUT_CLASSIFICATION	0.001430104618189975	DESIGN
-- Implementation private methods --	WITHOUT_CLASSIFICATION	0.9980713505433285	WITHOUT_CLASSIFICATION	0.0019286494566714085	DESIGN
deduplicate unique constraints sharing the same columns this is needed by Hibernate Annotations since it creates automagically unique constraints for the user	WITHOUT_CLASSIFICATION	0.999657743368018	WITHOUT_CLASSIFICATION	3.422566319819268E-4	DESIGN
Try to find out the name of the primary key to create it as identity if the IdentityGenerator is used	WITHOUT_CLASSIFICATION	0.9984752656664585	WITHOUT_CLASSIFICATION	0.001524734333541482	DESIGN
to support dialects that have their own identity data type	WITHOUT_CLASSIFICATION	0.9327774785951194	WITHOUT_CLASSIFICATION	0.06722252140488065	DESIGN
Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999511273368501	WITHOUT_CLASSIFICATION	4.8872663149809184E-5	DESIGN
used also for generation of FK names!	WITHOUT_CLASSIFICATION	0.9988712474233972	WITHOUT_CLASSIFICATION	0.0011287525766027235	DESIGN
usually useless	WITHOUT_CLASSIFICATION	0.9999532391803541	WITHOUT_CLASSIFICATION	4.676081964582059E-5	DESIGN
added this caching as I noticed that getType() is being called multiple times...	WITHOUT_CLASSIFICATION	0.9960684823193935	WITHOUT_CLASSIFICATION	0.003931517680606551	DESIGN
do not add unique constraint on DB not supporting unique and nullable columns	WITHOUT_CLASSIFICATION	0.9996162695212886	WITHOUT_CLASSIFICATION	3.8373047871139614E-4	DESIGN
for backward compatibility, disable this:	WITHOUT_CLASSIFICATION	0.999076661303226	WITHOUT_CLASSIFICATION	9.233386967740679E-4	DESIGN
may be final may be final may be final	WITHOUT_CLASSIFICATION	0.9995842423704442	WITHOUT_CLASSIFICATION	4.157576295558357E-4	DESIGN
may be final	WITHOUT_CLASSIFICATION	0.9999662018550818	WITHOUT_CLASSIFICATION	3.37981449182349E-5	DESIGN
may be final	WITHOUT_CLASSIFICATION	0.9999662018550818	WITHOUT_CLASSIFICATION	3.37981449182349E-5	DESIGN
Custom SQL	WITHOUT_CLASSIFICATION	0.9999114854582417	WITHOUT_CLASSIFICATION	8.851454175820687E-5	DESIGN
Primary key constraint	WITHOUT_CLASSIFICATION	0.999964897288462	WITHOUT_CLASSIFICATION	3.510271153796045E-5	DESIGN
the root of the incoming property path matched one of the embedded composite identifier properties	WITHOUT_CLASSIFICATION	0.9998705835789004	WITHOUT_CLASSIFICATION	1.2941642109961824E-4	DESIGN
ignore it...	WITHOUT_CLASSIFICATION	0.9999243245392645	WITHOUT_CLASSIFICATION	7.567546073551755E-5	DESIGN
flat recursive algorithm	WITHOUT_CLASSIFICATION	0.9999226384852682	WITHOUT_CLASSIFICATION	7.736151473184805E-5	DESIGN
an identifier mapper => getKey will be included in the getNonDuplicatedPropertyIterator() and checked later, so it needs to be excluded	WITHOUT_CLASSIFICATION	0.9993728397146308	WITHOUT_CLASSIFICATION	6.271602853692185E-4	DESIGN
if the hibernate-mapping did not specify a schema/catalog, use the defaults specified by properties - but note that if the schema/catalog were specified in hibernate-mapping, or as params, they will already be initialized and will override the values set here (they are in identifierGeneratorProperties)	WITHOUT_CLASSIFICATION	0.9968916657619034	WITHOUT_CLASSIFICATION	0.003108334238096707	DESIGN
pass the entity-name, if not a collection-id	WITHOUT_CLASSIFICATION	0.9997864349431602	WITHOUT_CLASSIFICATION	2.1356505683977378E-4	DESIGN
Custom SQL	WITHOUT_CLASSIFICATION	0.9999114854582417	WITHOUT_CLASSIFICATION	8.851454175820687E-5	DESIGN
Primary key constraint	WITHOUT_CLASSIFICATION	0.999964897288462	WITHOUT_CLASSIFICATION	3.510271153796045E-5	DESIGN
pass the column name (a generated id almost always has a single column)	WITHOUT_CLASSIFICATION	0.9996431348664043	WITHOUT_CLASSIFICATION	3.568651335957389E-4	DESIGN
needed to satisfy KeyValue	WITHOUT_CLASSIFICATION	0.9999495151873955	WITHOUT_CLASSIFICATION	5.048481260442217E-5	DESIGN
empty means no scoping	WITHOUT_CLASSIFICATION	0.9999570286422572	WITHOUT_CLASSIFICATION	4.2971357742895466E-5	DESIGN
index should be last column listed	WITHOUT_CLASSIFICATION	0.9981801253458852	WITHOUT_CLASSIFICATION	0.0018198746541148575	DESIGN
if it is a formula index, use the element columns in the PK	WITHOUT_CLASSIFICATION	0.9979049487658801	WITHOUT_CLASSIFICATION	0.0020950512341199067	DESIGN
don't create a unique key, 'cos some databases don't like a UK on nullable columns	WITHOUT_CLASSIFICATION	0.9948468551270766	WITHOUT_CLASSIFICATION	0.005153144872923372	DESIGN
ArrayList list = new ArrayList();list.addAll( getKey().getConstraintColumns() );list.addAll( getIndex().getConstraintColumns() );getCollectionTable().createUniqueKey(list);	WITHOUT_CLASSIFICATION	0.9999519392637939	WITHOUT_CLASSIFICATION	4.80607362060697E-5	DESIGN
}	WITHOUT_CLASSIFICATION	0.999920350576358	WITHOUT_CLASSIFICATION	7.964942364203387E-5	DESIGN
no foreign key element of for a one-to-many	WITHOUT_CLASSIFICATION	0.9988534619736995	WITHOUT_CLASSIFICATION	0.0011465380263005348	DESIGN
TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.6881630023352809	WITHOUT_CLASSIFICATION	0.31183699766471906	DESIGN
the case of a foreign key to something other than the pk is handled in createPropertyRefConstraints	WITHOUT_CLASSIFICATION	0.9994345741574551	WITHOUT_CLASSIFICATION	5.654258425449414E-4	DESIGN
TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.6881630023352809	WITHOUT_CLASSIFICATION	0.31183699766471906	DESIGN
if the property mapping consists of all formulas, make it non-updateable	WITHOUT_CLASSIFICATION	0.9989645447708818	WITHOUT_CLASSIFICATION	0.0010354552291181663	DESIGN
columnUpdateability.length==0 ||	WITHOUT_CLASSIFICATION	0.999321758525581	WITHOUT_CLASSIFICATION	6.78241474418993E-4	DESIGN
if the property mapping consists of all formulas, make it insertable	WITHOUT_CLASSIFICATION	0.9989645447708818	WITHOUT_CLASSIFICATION	0.0010354552291181663	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9968519706110394	WITHOUT_CLASSIFICATION	0.003148029388960662	DESIGN
expected type is intrinsic here...	WITHOUT_CLASSIFICATION	0.9971409446402235	WITHOUT_CLASSIFICATION	0.0028590553597765025	DESIGN
}	WITHOUT_CLASSIFICATION	0.999920350576358	WITHOUT_CLASSIFICATION	7.964942364203387E-5	DESIGN
}	WITHOUT_CLASSIFICATION	0.999920350576358	WITHOUT_CLASSIFICATION	7.964942364203387E-5	DESIGN
return memberPersister.getPropertyType(propertyName);	WITHOUT_CLASSIFICATION	0.9995612710695313	WITHOUT_CLASSIFICATION	4.387289304686594E-4	DESIGN
return memberPersister.toColumns(alias, propertyName);	WITHOUT_CLASSIFICATION	0.9995618826401801	WITHOUT_CLASSIFICATION	4.381173598198447E-4	DESIGN
return memberPersister.getType();	WITHOUT_CLASSIFICATION	0.9995612710695313	WITHOUT_CLASSIFICATION	4.387289304686594E-4	DESIGN
&& !indexIsFormula	WITHOUT_CLASSIFICATION	0.9999551312387455	WITHOUT_CLASSIFICATION	4.486876125451365E-5	DESIGN
return !isOneToMany();	WITHOUT_CLASSIFICATION	0.9999702865717491	WITHOUT_CLASSIFICATION	2.971342825096718E-5	DESIGN
instanceof AssociationType;	WITHOUT_CLASSIFICATION	0.9999577922285272	WITHOUT_CLASSIFICATION	4.220777147287737E-5	DESIGN
we need to determine the best way to know that two joinables represent a single many-to-many...	WITHOUT_CLASSIFICATION	0.9857259340492642	WITHOUT_CLASSIFICATION	0.01427406595073587	DESIGN
strip leading ','	WITHOUT_CLASSIFICATION	0.999953260437479	WITHOUT_CLASSIFICATION	4.673956252102736E-5	DESIGN
public boolean isSubselectLoadable();	WITHOUT_CLASSIFICATION	0.9996560414002472	WITHOUT_CLASSIFICATION	3.43958599752806E-4	DESIGN
KEY	WITHOUT_CLASSIFICATION	0.9999113734108903	WITHOUT_CLASSIFICATION	8.862658910963415E-5	DESIGN
columns	WITHOUT_CLASSIFICATION	0.9999113734108903	WITHOUT_CLASSIFICATION	8.862658910963415E-5	DESIGN
SQL statements	WITHOUT_CLASSIFICATION	0.9999530626110165	WITHOUT_CLASSIFICATION	4.693738898349722E-5	DESIGN
extra information about the element type	WITHOUT_CLASSIFICATION	0.9976453074777175	WITHOUT_CLASSIFICATION	0.0023546925222824294	DESIGN
types	WITHOUT_CLASSIFICATION	0.9998264026033087	WITHOUT_CLASSIFICATION	1.7359739669129122E-4	DESIGN
custom sql	WITHOUT_CLASSIFICATION	0.9999136001415014	WITHOUT_CLASSIFICATION	8.639985849849894E-5	DESIGN
private final String unquotedIdentifierColumnName;	WITHOUT_CLASSIFICATION	0.9983382572960265	WITHOUT_CLASSIFICATION	0.001661742703973475	DESIGN
dynamic filters specifically for many-to-many inside the collection	WITHOUT_CLASSIFICATION	0.9962557211398753	WITHOUT_CLASSIFICATION	0.0037442788601248396	DESIGN
dynamic filters for the collection	WITHOUT_CLASSIFICATION	0.9980616542237256	WITHOUT_CLASSIFICATION	0.00193834577627438	DESIGN
NativeSQL: collect key column and auto-aliases	WITHOUT_CLASSIFICATION	0.9995109118713692	WITHOUT_CLASSIFICATION	4.890881286309017E-4	DESIGN
unquotedKeyColumnNames = StringHelper.unQuote(keyColumnAliases);	WITHOUT_CLASSIFICATION	0.999921261100112	WITHOUT_CLASSIFICATION	7.873889988796204E-5	DESIGN
ELEMENT	WITHOUT_CLASSIFICATION	0.9999113734108903	WITHOUT_CLASSIFICATION	8.862658910963415E-5	DESIGN
NativeSQL: collect element column and auto-aliases	WITHOUT_CLASSIFICATION	0.9994418443381655	WITHOUT_CLASSIFICATION	5.581556618344788E-4	DESIGN
INDEX AND ROW SELECT	WITHOUT_CLASSIFICATION	0.9999530626110165	WITHOUT_CLASSIFICATION	4.693738898349722E-5	DESIGN
NativeSQL: collect index column and auto-aliases	WITHOUT_CLASSIFICATION	0.9996820184210344	WITHOUT_CLASSIFICATION	3.1798157896566665E-4	DESIGN
unquotedIdentifierColumnName = identifierColumnAlias;	WITHOUT_CLASSIFICATION	0.999921261100112	WITHOUT_CLASSIFICATION	7.873889988796204E-5	DESIGN
unquotedIdentifierColumnName = null;	WITHOUT_CLASSIFICATION	0.99992179219852	WITHOUT_CLASSIFICATION	7.820780148007409E-5	DESIGN
GENERATE THE SQL:	WITHOUT_CLASSIFICATION	0.9999531593299137	WITHOUT_CLASSIFICATION	4.684067008628163E-5	DESIGN
for non-arrays, we don't need to know the element class elementType.returnedClass();	WITHOUT_CLASSIFICATION	0.9969485657052806	WITHOUT_CLASSIFICATION	0.003051434294719473	DESIGN
not all classpersisters implement PropertyMapping!	WITHOUT_CLASSIFICATION	0.9977114782155242	WITHOUT_CLASSIFICATION	0.0022885217844758714	DESIGN
Handle any filters applied to this collection	WITHOUT_CLASSIFICATION	0.9567313262128694	WITHOUT_CLASSIFICATION	0.04326867378713062	DESIGN
Handle any filters applied to this collection for many-to-many	WITHOUT_CLASSIFICATION	0.9161037399484507	WITHOUT_CLASSIFICATION	0.08389626005154928	DESIGN
if there is a user-specified loader, return that TODO: filters!?	WITHOUT_CLASSIFICATION	0.5975941164401062	DESIGN	0.40240588355989376	WITHOUT_CLASSIFICATION
Take care of any entities that might have been evicted!	WITHOUT_CLASSIFICATION	0.9990055222997971	WITHOUT_CLASSIFICATION	9.944777002028006E-4	DESIGN
strip leading ','	WITHOUT_CLASSIFICATION	0.999953260437479	WITHOUT_CLASSIFICATION	4.673956252102736E-5	DESIGN
Run a subquery loader	WITHOUT_CLASSIFICATION	0.9999118421944053	WITHOUT_CLASSIFICATION	8.815780559473747E-5	DESIGN
needed by arrays	WITHOUT_CLASSIFICATION	0.9999491343680277	WITHOUT_CLASSIFICATION	5.086563197239571E-5	DESIGN
TODO: something with formulas...	WITHOUT_CLASSIFICATION	0.7084508170523744	WITHOUT_CLASSIFICATION	0.2915491829476255	DESIGN
an assertion	WITHOUT_CLASSIFICATION	0.9999660933089416	WITHOUT_CLASSIFICATION	3.390669105849637E-5	DESIGN
Remove all the old entries	WITHOUT_CLASSIFICATION	0.9999458808401924	WITHOUT_CLASSIFICATION	5.411915980743845E-5	DESIGN
create all the new entries	WITHOUT_CLASSIFICATION	0.9999865809701388	WITHOUT_CLASSIFICATION	1.3419029861195234E-5	DESIGN
&& !indexIsFormula	WITHOUT_CLASSIFICATION	0.9999551312387455	WITHOUT_CLASSIFICATION	4.486876125451365E-5	DESIGN
&& !indexIsFormula	WITHOUT_CLASSIFICATION	0.9999551312387455	WITHOUT_CLASSIFICATION	4.486876125451365E-5	DESIGN
delete all the deleted entries	WITHOUT_CLASSIFICATION	0.9999880452692171	WITHOUT_CLASSIFICATION	1.1954730782839274E-5	DESIGN
insert all the new entries	WITHOUT_CLASSIFICATION	0.999985892159099	WITHOUT_CLASSIFICATION	1.4107840900844093E-5	DESIGN
==elementType ??	WITHOUT_CLASSIFICATION	0.9999355623276599	WITHOUT_CLASSIFICATION	6.443767234008072E-5	DESIGN
update all the modified entries	WITHOUT_CLASSIFICATION	0.9999810166274459	WITHOUT_CLASSIFICATION	1.898337255408575E-5	DESIGN
identifier collections not supported for 1-to-many	WITHOUT_CLASSIFICATION	0.9995979799480286	WITHOUT_CLASSIFICATION	4.020200519714889E-4	DESIGN
update removed rows fks to null	WITHOUT_CLASSIFICATION	0.9992541249096382	WITHOUT_CLASSIFICATION	7.458750903618474E-4	DESIGN
will still be issued when it used to be null	WITHOUT_CLASSIFICATION	0.9966470210914565	WITHOUT_CLASSIFICATION	0.0033529789085436214	DESIGN
now update all changed or added rows fks	WITHOUT_CLASSIFICATION	0.9999969076794916	WITHOUT_CLASSIFICATION	3.0923205085138626E-6	DESIGN
buf.append( selectFragment( lhsAlias, "" ) )ignore suffix for collection columns!	WITHOUT_CLASSIFICATION	0.9789565096327175	WITHOUT_CLASSIFICATION	0.02104349036728244	DESIGN
use suffix for the entity columns	WITHOUT_CLASSIFICATION	0.9994546683270499	WITHOUT_CLASSIFICATION	5.453316729502081E-4	DESIGN
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999880255629224	WITHOUT_CLASSIFICATION	1.1974437077651117E-5	DESIGN
private final String rootTableName;	WITHOUT_CLASSIFICATION	0.9983382572960265	WITHOUT_CLASSIFICATION	0.001661742703973475	DESIGN
INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9999530626110165	WITHOUT_CLASSIFICATION	4.693738898349722E-5	DESIGN
Custom SQL	WITHOUT_CLASSIFICATION	0.9999114854582417	WITHOUT_CLASSIFICATION	8.851454175820687E-5	DESIGN
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999880255629224	WITHOUT_CLASSIFICATION	1.1974437077651117E-5	DESIGN
Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999793684479203	WITHOUT_CLASSIFICATION	2.0631552079661615E-5	DESIGN
This could also just be true all the time...	WITHOUT_CLASSIFICATION	0.9996587175357948	WITHOUT_CLASSIFICATION	3.4128246420517353E-4	DESIGN
chop the last union (all)	WITHOUT_CLASSIFICATION	0.9999813575607637	WITHOUT_CLASSIFICATION	1.86424392363524E-5	DESIGN
TODO: check this....	WITHOUT_CLASSIFICATION	0.9647282900685572	WITHOUT_CLASSIFICATION	0.035271709931442664	DESIGN
INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9999530626110165	WITHOUT_CLASSIFICATION	4.693738898349722E-5	DESIGN
properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9994976885393532	WITHOUT_CLASSIFICATION	5.023114606468132E-4	DESIGN
the closure of all properties in the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9991589955738277	WITHOUT_CLASSIFICATION	8.410044261722982E-4	DESIGN
the closure of all columns used by the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9974689971191357	WITHOUT_CLASSIFICATION	0.0025310028808642705	DESIGN
subclass discrimination works by assigning particular values to certain combinations of null primary key values in the outer join using an SQL CASE	WITHOUT_CLASSIFICATION	0.9998557745794047	WITHOUT_CLASSIFICATION	1.442254205954075E-4	DESIGN
MULTITABLES	WITHOUT_CLASSIFICATION	0.9999530626110165	WITHOUT_CLASSIFICATION	4.693738898349722E-5	DESIGN
Custom sql	WITHOUT_CLASSIFICATION	0.9999114854582417	WITHOUT_CLASSIFICATION	8.851454175820687E-5	DESIGN
subclass closure properties	WITHOUT_CLASSIFICATION	0.9999638464794872	WITHOUT_CLASSIFICATION	3.6153520512734725E-5	DESIGN
SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999113734108903	WITHOUT_CLASSIFICATION	8.862658910963415E-5	DESIGN
( (Column) model.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9993303083605471	WITHOUT_CLASSIFICATION	6.696916394529558E-4	DESIGN
( (Column) sc.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9993303083605471	WITHOUT_CLASSIFICATION	6.696916394529558E-4	DESIGN
don't need subclass tables, because they can't appear in conditions	WITHOUT_CLASSIFICATION	0.9888173684465644	WITHOUT_CLASSIFICATION	0.011182631553435475	DESIGN
special case where we need to force incloude all subclass joins	WITHOUT_CLASSIFICATION	0.9975258038863145	WITHOUT_CLASSIFICATION	0.0024741961136855364	DESIGN
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999880255629224	WITHOUT_CLASSIFICATION	1.1974437077651117E-5	DESIGN
properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9994976885393532	WITHOUT_CLASSIFICATION	5.023114606468132E-4	DESIGN
the closure of all columns used by the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9974689971191357	WITHOUT_CLASSIFICATION	0.0025310028808642705	DESIGN
get em on the second pass!	WITHOUT_CLASSIFICATION	0.9999916905815193	WITHOUT_CLASSIFICATION	8.30941848081466E-6	DESIGN
now look up the object we are really interested in! (this lets us correctly handle proxies and multi-row or multi-column queries)	WITHOUT_CLASSIFICATION	0.9998649369888576	WITHOUT_CLASSIFICATION	1.3506301114250458E-4	DESIGN
discriminator column	WITHOUT_CLASSIFICATION	0.9999649490460414	WITHOUT_CLASSIFICATION	3.505095395852842E-5	DESIGN
INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9999530626110165	WITHOUT_CLASSIFICATION	4.693738898349722E-5	DESIGN
private final Map propertyTableNumbersByName = new HashMap();	WITHOUT_CLASSIFICATION	0.9998519293196864	WITHOUT_CLASSIFICATION	1.4807068031362237E-4	DESIGN
CLASS + TABLE	WITHOUT_CLASSIFICATION	0.9999771449416283	WITHOUT_CLASSIFICATION	2.2855058371748984E-5	DESIGN
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999530626110165	WITHOUT_CLASSIFICATION	4.693738898349722E-5	DESIGN
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999113734108903	WITHOUT_CLASSIFICATION	8.862658910963415E-5	DESIGN
SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999113734108903	WITHOUT_CLASSIFICATION	8.862658910963415E-5	DESIGN
Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999793684479203	WITHOUT_CLASSIFICATION	2.0631552079661615E-5	DESIGN
JOINS	WITHOUT_CLASSIFICATION	0.9999113734108903	WITHOUT_CLASSIFICATION	8.862658910963415E-5	DESIGN
propertyTableNumbersByName.put( prop.getName(), join );	WITHOUT_CLASSIFICATION	0.9994226996701397	WITHOUT_CLASSIFICATION	5.773003298601926E-4	DESIGN
Access cached SQL	WITHOUT_CLASSIFICATION	0.9999537792168078	WITHOUT_CLASSIFICATION	4.622078319210194E-5	DESIGN
figure out which tables need to be fetched	WITHOUT_CLASSIFICATION	0.9991615262700403	WITHOUT_CLASSIFICATION	8.384737299597262E-4	DESIGN
figure out which columns are needed	WITHOUT_CLASSIFICATION	0.9999012125915722	WITHOUT_CLASSIFICATION	9.878740842785614E-5	DESIGN
figure out which formulas are needed	WITHOUT_CLASSIFICATION	0.9999012125915722	WITHOUT_CLASSIFICATION	9.878740842785614E-5	DESIGN
render the SQL	WITHOUT_CLASSIFICATION	0.9999822870364876	WITHOUT_CLASSIFICATION	1.771296351235662E-5	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9968519706110394	WITHOUT_CLASSIFICATION	0.003148029388960662	DESIGN
moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9965718973719071	WITHOUT_CLASSIFICATION	0.0034281026280929194	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994226996701397	WITHOUT_CLASSIFICATION	5.773003298601926E-4	DESIGN
The optional SQL string defined in the where attribute	WITHOUT_CLASSIFICATION	0.9998197104872714	WITHOUT_CLASSIFICATION	1.8028951272854084E-4	DESIGN
information about lazy properties of this class	WITHOUT_CLASSIFICATION	0.9988255849950456	WITHOUT_CLASSIFICATION	0.001174415004954358	DESIGN
information about all properties in class hierarchy	WITHOUT_CLASSIFICATION	0.9988122116479361	WITHOUT_CLASSIFICATION	0.0011877883520639333	DESIGN
information about all columns/formulas in class hierarchy	WITHOUT_CLASSIFICATION	0.9984774675449278	WITHOUT_CLASSIFICATION	0.0015225324550722018	DESIGN
dynamic filters attached to the class-level	WITHOUT_CLASSIFICATION	0.9996182747463378	WITHOUT_CLASSIFICATION	3.817252536622741E-4	DESIGN
SQL strings	WITHOUT_CLASSIFICATION	0.9999595869859649	WITHOUT_CLASSIFICATION	4.0413014035161767E-5	DESIGN
for objects that came in via update()	WITHOUT_CLASSIFICATION	0.9974933133768119	WITHOUT_CLASSIFICATION	0.0025066866231880794	DESIGN
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999113734108903	WITHOUT_CLASSIFICATION	8.862658910963415E-5	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994226996701397	WITHOUT_CLASSIFICATION	5.773003298601926E-4	DESIGN
IDENTIFIER	WITHOUT_CLASSIFICATION	0.9999113734108903	WITHOUT_CLASSIFICATION	8.862658910963415E-5	DESIGN
VERSION	WITHOUT_CLASSIFICATION	0.9999113734108903	WITHOUT_CLASSIFICATION	8.862658910963415E-5	DESIGN
WHERE STRING	WITHOUT_CLASSIFICATION	0.9999530626110165	WITHOUT_CLASSIFICATION	4.693738898349722E-5	DESIGN
SUBCLASS PROPERTY CLOSURE	WITHOUT_CLASSIFICATION	0.9999608966083426	WITHOUT_CLASSIFICATION	3.910339165735296E-5	DESIGN
before add :-)	WITHOUT_CLASSIFICATION	0.9999916680114715	WITHOUT_CLASSIFICATION	8.331988528475827E-6	DESIGN
Handle any filters applied to the class level	WITHOUT_CLASSIFICATION	0.9988902382483116	WITHOUT_CLASSIFICATION	0.0011097617516883647	DESIGN
only one-to-one is lazy fetched	WITHOUT_CLASSIFICATION	0.9994796463306894	WITHOUT_CLASSIFICATION	5.20353669310642E-4	DESIGN
note early exit here:	WITHOUT_CLASSIFICATION	0.9999613191039716	WITHOUT_CLASSIFICATION	3.8680896028392904E-5	DESIGN
object have been loaded with setReadOnly(true); HHH-2236	WITHOUT_CLASSIFICATION	0.999409843557294	WITHOUT_CLASSIFICATION	5.901564427058611E-4	DESIGN
NOTE: this assumes something about how propertySelectFragment is implemented by the subclass!	WITHOUT_CLASSIFICATION	0.9999834557138864	WITHOUT_CLASSIFICATION	1.6544286113586256E-5	DESIGN
strip leading ", "	WITHOUT_CLASSIFICATION	0.9999629182793359	WITHOUT_CLASSIFICATION	3.7081720664119376E-5	DESIGN
if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9997874158314909	WITHOUT_CLASSIFICATION	2.1258416850913103E-4	DESIGN
otherwise return the "hydrated" state (ie. associations are not resolved)	WITHOUT_CLASSIFICATION	0.999808156428588	WITHOUT_CLASSIFICATION	1.9184357141196438E-4	DESIGN
null owner ok??	WITHOUT_CLASSIFICATION	0.9999306014273944	WITHOUT_CLASSIFICATION	6.93985726055825E-5	DESIGN
null sql means that the only lazy properties are shared PK one-to-one associations which are handled differently in the Type#nullSafeGet code...	WITHOUT_CLASSIFICATION	0.9967981543103062	WITHOUT_CLASSIFICATION	0.00320184568969395	DESIGN
Create a new FROM node for the referenced class.	WITHOUT_CLASSIFICATION	0.999290860642699	WITHOUT_CLASSIFICATION	7.091393573011106E-4	DESIGN
the difficulty here is exactly what do we update in order to force the version to be incremented in the db...	WITHOUT_CLASSIFICATION	0.9906684017347203	WITHOUT_CLASSIFICATION	0.00933159826527985	DESIGN
performance op to avoid the array search	WITHOUT_CLASSIFICATION	0.9996777418771058	WITHOUT_CLASSIFICATION	3.222581228942551E-4	DESIGN
properly handle property-ref-based associations	WITHOUT_CLASSIFICATION	0.9991211359472854	WITHOUT_CLASSIFICATION	8.78864052714772E-4	DESIGN
Enable for HHH-440, which we don't like:	WITHOUT_CLASSIFICATION	0.9978851010967391	WITHOUT_CLASSIFICATION	0.0021148989032608754	DESIGN
ALIASES	WITHOUT_CLASSIFICATION	0.9999113734108903	WITHOUT_CLASSIFICATION	8.862658910963415E-5	DESIGN
aliases named identifier ( alias.idname )	WITHOUT_CLASSIFICATION	0.9993281033578563	WITHOUT_CLASSIFICATION	6.718966421436893E-4	DESIGN
aliases for composite-id's	WITHOUT_CLASSIFICATION	0.9999208207511506	WITHOUT_CLASSIFICATION	7.917924884931637E-5	DESIGN
Fetch embedded identifiers propertynames from the "virtual" identifier component	WITHOUT_CLASSIFICATION	0.99974580768817	WITHOUT_CLASSIFICATION	2.541923118300044E-4	DESIGN
embedded composite ids ( alias.idname1, alias.idname2 )	WITHOUT_CLASSIFICATION	0.9990067441319826	WITHOUT_CLASSIFICATION	9.932558680173936E-4	DESIGN
TODO: skip formulas?	WITHOUT_CLASSIFICATION	0.9512277789000682	WITHOUT_CLASSIFICATION	0.04877222109993171	DESIGN
don't need filters for the static loaders	WITHOUT_CLASSIFICATION	0.9965704666129972	WITHOUT_CLASSIFICATION	0.0034295333870028965	DESIGN
do two passes, for collection property-ref!	WITHOUT_CLASSIFICATION	0.9943647811334597	WITHOUT_CLASSIFICATION	0.005635218866540233	DESIGN
select the correct row by either pk or rowid	WITHOUT_CLASSIFICATION	0.9994193955616442	WITHOUT_CLASSIFICATION	5.806044383557873E-4	DESIGN
TODO: eventually, rowIdName[j]	WITHOUT_CLASSIFICATION	0.9222987393621973	WITHOUT_CLASSIFICATION	0.07770126063780262	DESIGN
this is a property of the table, which we are updating	WITHOUT_CLASSIFICATION	0.9985217866647969	WITHOUT_CLASSIFICATION	0.00147821333520305	DESIGN
special shortcut for id properties, skip the join! this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9997780111800703	WITHOUT_CLASSIFICATION	2.2198881992968868E-4	DESIGN
we are using "all" or "dirty" property-based optimistic locking	WITHOUT_CLASSIFICATION	0.9995502055251708	WITHOUT_CLASSIFICATION	4.4979447482909515E-4	DESIGN
nothing to do; even if the operand is a parameter, no way we could infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9987767594707325	WITHOUT_CLASSIFICATION	0.0012232405292674103	DESIGN
this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9979772717071345	WITHOUT_CLASSIFICATION	0.002022728292865539	DESIGN
add normal properties	WITHOUT_CLASSIFICATION	0.9999925876910899	WITHOUT_CLASSIFICATION	7.412308910189599E-6	DESIGN
add the discriminator	WITHOUT_CLASSIFICATION	0.999995815619976	WITHOUT_CLASSIFICATION	4.184380023954189E-6	DESIGN
more specifically : "? [op] datetime" 1) if the operator is MINUS, the param needs to be of some datetime type 2) if the operator is PLUS, the param needs to be of some numeric type	WITHOUT_CLASSIFICATION	0.8516365617420666	WITHOUT_CLASSIFICATION	0.14836343825793344	DESIGN
add normal properties	WITHOUT_CLASSIFICATION	0.9999925876910899	WITHOUT_CLASSIFICATION	7.412308910189599E-6	DESIGN
this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9979772717071345	WITHOUT_CLASSIFICATION	0.002022728292865539	DESIGN
add the discriminator	WITHOUT_CLASSIFICATION	0.999995815619976	WITHOUT_CLASSIFICATION	4.184380023954189E-6	DESIGN
add the primary key	WITHOUT_CLASSIFICATION	0.9999926569220849	WITHOUT_CLASSIFICATION	7.343077915144429E-6	DESIGN
delegate already handles PK columns	WITHOUT_CLASSIFICATION	0.9998853626596323	WITHOUT_CLASSIFICATION	1.1463734036759059E-4	DESIGN
we can't batch joined inserts, especially not if it is an identity insert; nor can we batch statements where the expectation is based on an output param	WITHOUT_CLASSIFICATION	0.9964788684290521	WITHOUT_CLASSIFICATION	0.0035211315709478145	DESIGN
Render the SQL query	WITHOUT_CLASSIFICATION	0.9999856445347237	WITHOUT_CLASSIFICATION	1.4355465276218871E-5	DESIGN
Write the values of fields onto the prepared statement - we MUST use the state at the time the insert was issued (cos of foreign key constraints). Not necessarily the object's current state	WITHOUT_CLASSIFICATION	0.9996476673837659	WITHOUT_CLASSIFICATION	3.523326162341585E-4	DESIGN
TODO : shouldnt inserts be Expectations.NONE?	WITHOUT_CLASSIFICATION	0.680785468113825	DESIGN	0.31921453188617505	WITHOUT_CLASSIFICATION
don't bother trying to update, we know there is no row there yet	WITHOUT_CLASSIFICATION	0.9999069524688783	WITHOUT_CLASSIFICATION	9.304753112174843E-5	DESIGN
if all fields are null, we might need to delete existing row	WITHOUT_CLASSIFICATION	0.9846298204613435	WITHOUT_CLASSIFICATION	0.015370179538656421	DESIGN
there is probably a row there, so try to update if no rows were updated, we will find out	WITHOUT_CLASSIFICATION	0.9999908071861973	WITHOUT_CLASSIFICATION	9.192813802802442E-6	DESIGN
note: updates to joined tables can't be batched...	WITHOUT_CLASSIFICATION	0.9980237571565851	WITHOUT_CLASSIFICATION	0.0019762428434148384	DESIGN
starting index	WITHOUT_CLASSIFICATION	0.99996910131054	WITHOUT_CLASSIFICATION	3.089868946014623E-5	DESIGN
Now write the values of fields onto the prepared statement	WITHOUT_CLASSIFICATION	0.9999806827081642	WITHOUT_CLASSIFICATION	1.9317291835739163E-5	DESIGN
Write any appropriate versioning conditional parameters	WITHOUT_CLASSIFICATION	0.9983593804672395	WITHOUT_CLASSIFICATION	0.0016406195327604456	DESIGN
Render the SQL query	WITHOUT_CLASSIFICATION	0.9999856445347237	WITHOUT_CLASSIFICATION	1.4355465276218871E-5	DESIGN
Do the key. The key is immutable so we can use the _current_ object state - not necessarily the state at the time the delete was issued	WITHOUT_CLASSIFICATION	0.9925976431268075	WITHOUT_CLASSIFICATION	0.007402356873192478	DESIGN
We should use the _current_ object state (ie. after any updates that occurred during flush)	WITHOUT_CLASSIFICATION	0.9929424566620507	WITHOUT_CLASSIFICATION	0.007057543337949278	DESIGN
this property belongs to the table and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9976126657881251	WITHOUT_CLASSIFICATION	0.0023873342118747878	DESIGN
note: dirtyFields==null means we had no snapshot, and we couldn't get one using select-before-update oldFields==null just means we had no snapshot to begin with (we might have used select-before-update to get the dirtyFields)	WITHOUT_CLASSIFICATION	0.999539989743036	WITHOUT_CLASSIFICATION	4.600102569640395E-4	DESIGN
more specifically : "datetime [op] ?" 1) if the operator is MINUS, we really cannot determine the expected type as either another datetime or numeric would be valid 2) if the operator is PLUS, the param needs to be of some numeric type	WITHOUT_CLASSIFICATION	0.9209535905443156	WITHOUT_CLASSIFICATION	0.07904640945568442	DESIGN
For the case of dynamic-update="true", we need to generate the UPDATE SQL	WITHOUT_CLASSIFICATION	0.9998434532536801	WITHOUT_CLASSIFICATION	1.5654674632002512E-4	DESIGN
don't need to check laziness (dirty checking algorithm handles that)	WITHOUT_CLASSIFICATION	0.9996326554187003	WITHOUT_CLASSIFICATION	3.6734458129976134E-4	DESIGN
For the case of dynamic-update="false", or no snapshot, we use the static SQL	WITHOUT_CLASSIFICATION	0.9999670574835733	WITHOUT_CLASSIFICATION	3.294251642671389E-5	DESIGN
if not "get", then try "is"	WITHOUT_CLASSIFICATION	0.9999807404576753	WITHOUT_CLASSIFICATION	1.9259542324794915E-5	DESIGN
Now update only the tables with dirty properties (and the table with the version number)	WITHOUT_CLASSIFICATION	0.9999850750567604	WITHOUT_CLASSIFICATION	1.4924943239735431E-5	DESIGN
For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9998434532536801	WITHOUT_CLASSIFICATION	1.5654674632002512E-4	DESIGN
For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9998434532536801	WITHOUT_CLASSIFICATION	1.5654674632002512E-4	DESIGN
For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999547324285651	WITHOUT_CLASSIFICATION	4.5267571434744865E-5	DESIGN
For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999547324285651	WITHOUT_CLASSIFICATION	4.5267571434744865E-5	DESIGN
not supported	WITHOUT_CLASSIFICATION	0.9999838396471086	WITHOUT_CLASSIFICATION	1.6160352891428018E-5	DESIGN
this property belongs to the table and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9976126657881251	WITHOUT_CLASSIFICATION	0.0023873342118747878	DESIGN
we need to utilize dynamic delete statements	WITHOUT_CLASSIFICATION	0.9957731335749616	WITHOUT_CLASSIFICATION	0.004226866425038412	DESIGN
otherwise, utilize the static delete statements	WITHOUT_CLASSIFICATION	0.9997387463721922	WITHOUT_CLASSIFICATION	2.6125362780778577E-4	DESIGN
just a performance opt!	WITHOUT_CLASSIFICATION	0.999913228559529	WITHOUT_CLASSIFICATION	8.677144047089814E-5	DESIGN
just a performance opt!	WITHOUT_CLASSIFICATION	0.999913228559529	WITHOUT_CLASSIFICATION	8.677144047089814E-5	DESIGN
all joins join to the pk of the driving table	WITHOUT_CLASSIFICATION	0.9998299712139866	WITHOUT_CLASSIFICATION	1.7002878601332517E-4	DESIGN
notice that we skip the first table; it is the driving table!	WITHOUT_CLASSIFICATION	0.9994681705163121	WITHOUT_CLASSIFICATION	5.318294836878964E-4	DESIGN
we can inner join to superclass tables (the row MUST be there) we can never inner join to subclass tables	WITHOUT_CLASSIFICATION	0.9939489278533629	WITHOUT_CLASSIFICATION	0.006051072146637139	DESIGN
skip the driving table	WITHOUT_CLASSIFICATION	0.9999966730214478	WITHOUT_CLASSIFICATION	3.326978552165855E-6	DESIGN
get 'em in the right order (not that it really matters)	WITHOUT_CLASSIFICATION	0.9957472369204912	WITHOUT_CLASSIFICATION	0.0042527630795088315	DESIGN
here, we work under the following assumptions: ------------ valid cases -------------------------------------- 1) datetime + {something other than datetime} : always results in a datetime ( db will catch invalid conversions ) 2) datetime - datetime : always results in a DOUBLE 3) datetime - {something other than datetime} : always results in a datetime ( db will catch invalid conversions ) ------------ invalid cases ------------------------------------ 4) datetime + datetime 5) {something other than datetime} - datetime 6) datetime {any type} 7) datetime / {any type} 8) {any type} / datetime doing so allows us to properly handle parameters as either the left or right side here in the majority of cases	WITHOUT_CLASSIFICATION	0.9995634290817446	WITHOUT_CLASSIFICATION	4.3657091825538476E-4	DESIGN
render the where and from parts	WITHOUT_CLASSIFICATION	0.9985886327513772	WITHOUT_CLASSIFICATION	0.001411367248622808	DESIGN
we could regerate this inside each called method!	WITHOUT_CLASSIFICATION	0.9994346227027122	WITHOUT_CLASSIFICATION	5.653772972877601E-4	DESIGN
now render the joins	WITHOUT_CLASSIFICATION	0.9999949298746109	WITHOUT_CLASSIFICATION	5.070125389027291E-6	DESIGN
This will add the new from element to the origin.	WITHOUT_CLASSIFICATION	0.9993398014090565	WITHOUT_CLASSIFICATION	6.601985909434299E-4	DESIGN
now render the select clause	WITHOUT_CLASSIFICATION	0.999994731970984	WITHOUT_CLASSIFICATION	5.268029015944774E-6	DESIGN
now tie it all together	WITHOUT_CLASSIFICATION	0.9999881880745797	WITHOUT_CLASSIFICATION	1.1811925420387845E-5	DESIGN
insert/update/delete SQL	WITHOUT_CLASSIFICATION	0.9999608966083426	WITHOUT_CLASSIFICATION	3.910339165735296E-5	DESIGN
select SQL	WITHOUT_CLASSIFICATION	0.9998893577426997	WITHOUT_CLASSIFICATION	1.1064225730034497E-4	DESIGN
no need to check laziness, dirty checking handles that	WITHOUT_CLASSIFICATION	0.9998385621824364	WITHOUT_CLASSIFICATION	1.6143781756355213E-4	DESIGN
Fully resolve the map reference, create implicit joins.	WITHOUT_CLASSIFICATION	0.9999171663204183	WITHOUT_CLASSIFICATION	8.283367958169479E-5	DESIGN
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9857334339160307	WITHOUT_CLASSIFICATION	0.014266566083969222	DESIGN
The basic implementation is to simply use the node's text	WITHOUT_CLASSIFICATION	0.9995726336918103	WITHOUT_CLASSIFICATION	4.273663081897275E-4	DESIGN
for dialects which are known to not support ANSI-SQL row-value-constructor syntax, we should mutate the tree.	WITHOUT_CLASSIFICATION	0.968976203536811	WITHOUT_CLASSIFICATION	0.031023796463188872	DESIGN
Due to the complexity in initializing the SelectClause, do not generate one here. If it is not found; simply return null... Also, do not cache since it gets generated well after we are created.	WITHOUT_CLASSIFICATION	0.9998869224437471	WITHOUT_CLASSIFICATION	1.1307755625286364E-4	DESIGN
check the version unsaved-value, if appropriate	WITHOUT_CLASSIFICATION	0.9997296197370248	WITHOUT_CLASSIFICATION	2.7038026297520603E-4	DESIGN
let this take precedence if defined, since it works for assigned identifiers	WITHOUT_CLASSIFICATION	0.9974303962991798	WITHOUT_CLASSIFICATION	0.002569603700820235	DESIGN
check the id unsaved-value	WITHOUT_CLASSIFICATION	0.9999948571223383	WITHOUT_CLASSIFICATION	5.142877661769662E-6	DESIGN
check to see if it is in the second-level cache	WITHOUT_CLASSIFICATION	0.9995768826318284	WITHOUT_CLASSIFICATION	4.2311736817158657E-4	DESIGN
/	WITHOUT_CLASSIFICATION	0.9999436311160822	WITHOUT_CLASSIFICATION	5.6368883917833465E-5	DESIGN
For property references generate <tablealias>.<columnname> as <projectionalias>	WITHOUT_CLASSIFICATION	0.9999654934027412	WITHOUT_CLASSIFICATION	3.4506597258765426E-5	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994226996701397	WITHOUT_CLASSIFICATION	5.773003298601926E-4	DESIGN
if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9997874158314909	WITHOUT_CLASSIFICATION	2.1258416850913103E-4	DESIGN
force immediate execution of the insert	WITHOUT_CLASSIFICATION	0.9998917080435371	WITHOUT_CLASSIFICATION	1.082919564629599E-4	DESIGN
If this from element is a collection and the path is a collection property (maxIndex, etc.) then generate a sub-query.	WITHOUT_CLASSIFICATION	0.998707833705615	WITHOUT_CLASSIFICATION	0.0012921662943849899	DESIGN
entities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994226996701397	WITHOUT_CLASSIFICATION	5.773003298601926E-4	DESIGN
collections ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999423447342721	WITHOUT_CLASSIFICATION	5.76552657278931E-4	DESIGN
cannot occur	WITHOUT_CLASSIFICATION	0.9999720490067763	WITHOUT_CLASSIFICATION	2.7950993223743568E-5	DESIGN
cannot occur	WITHOUT_CLASSIFICATION	0.9999720490067763	WITHOUT_CLASSIFICATION	2.7950993223743568E-5	DESIGN
only carry on if the method has no parameters	WITHOUT_CLASSIFICATION	0.9997456826840325	WITHOUT_CLASSIFICATION	2.543173159674741E-4	DESIGN
try "get"	WITHOUT_CLASSIFICATION	0.9999465114901008	WITHOUT_CLASSIFICATION	5.3488509899147204E-5	DESIGN
do nothing...	WITHOUT_CLASSIFICATION	0.9999274021659729	WITHOUT_CLASSIFICATION	7.25978340270634E-5	DESIGN
do nothing...	WITHOUT_CLASSIFICATION	0.9999274021659729	WITHOUT_CLASSIFICATION	7.25978340270634E-5	DESIGN
should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9882574398828582	WITHOUT_CLASSIFICATION	0.011742560117141832	DESIGN
this page intentionally left blank :)	WITHOUT_CLASSIFICATION	0.9981884888806354	WITHOUT_CLASSIFICATION	0.0018115111193646165	DESIGN
do not do anything	WITHOUT_CLASSIFICATION	0.9999848781725904	WITHOUT_CLASSIFICATION	1.5121827409471243E-5	DESIGN
ignore	WITHOUT_CLASSIFICATION	0.9998571141915925	WITHOUT_CLASSIFICATION	1.4288580840761378E-4	DESIGN
cant instantiate	WITHOUT_CLASSIFICATION	0.999955363988483	WITHOUT_CLASSIFICATION	4.4636011517120886E-5	DESIGN
if it is a property of an embedded component, invoke on the "identifier"	WITHOUT_CLASSIFICATION	0.9996075790641895	WITHOUT_CLASSIFICATION	3.924209358105117E-4	DESIGN
otherwise:	WITHOUT_CLASSIFICATION	0.9999113734108903	WITHOUT_CLASSIFICATION	8.862658910963415E-5	DESIGN
skip finalize methods	WITHOUT_CLASSIFICATION	0.999950658153628	WITHOUT_CLASSIFICATION	4.934184637194954E-5	DESIGN
note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9993325686821594	WITHOUT_CLASSIFICATION	6.674313178406222E-4	DESIGN
note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9993325686821594	WITHOUT_CLASSIFICATION	6.674313178406222E-4	DESIGN
HHH-2481 make sure the callback gets cleared, otherwise the instance stays in a static thread local.	WITHOUT_CLASSIFICATION	0.9911319231227408	WITHOUT_CLASSIFICATION	0.008868076877259202	DESIGN
while constructor is running	WITHOUT_CLASSIFICATION	0.9999768701309673	WITHOUT_CLASSIFICATION	2.312986903280808E-5	DESIGN
while constructor is running	WITHOUT_CLASSIFICATION	0.9999768701309673	WITHOUT_CLASSIFICATION	2.312986903280808E-5	DESIGN
note: interface is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9992555360488167	WITHOUT_CLASSIFICATION	7.444639511832848E-4	DESIGN
interfaces arguments	WITHOUT_CLASSIFICATION	0.9999613844151765	WITHOUT_CLASSIFICATION	3.861558482356136E-5	DESIGN
TODO!	WITHOUT_CLASSIFICATION	0.9999113734108903	WITHOUT_CLASSIFICATION	8.862658910963415E-5	DESIGN
Get the caller	WITHOUT_CLASSIFICATION	0.9999937029417479	WITHOUT_CLASSIFICATION	6.297058252001671E-6	DESIGN
Get the caller principals	WITHOUT_CLASSIFICATION	0.999994753976091	WITHOUT_CLASSIFICATION	5.24602390891372E-6	DESIGN
private static final Alias DEFAULT_ALIAS = new Alias(10, null);	WITHOUT_CLASSIFICATION	0.9998290718043175	WITHOUT_CLASSIFICATION	1.7092819568259062E-4	DESIGN
Needed to bump this up to DotNode, because that is the only thing which currently knows about the property-ref path in the correct format; it is either this, or recurse over the DotNodes constructing the property path just like DotNode does internally	WITHOUT_CLASSIFICATION	0.9873306444404243	WITHOUT_CLASSIFICATION	0.012669355559575683	DESIGN
if the identifier is quoted, remove the quotes	WITHOUT_CLASSIFICATION	0.9996763685349852	WITHOUT_CLASSIFICATION	3.2363146501481523E-4	DESIGN
truncate the identifier to the max alias length, less the suffix length	WITHOUT_CLASSIFICATION	0.998306658623964	WITHOUT_CLASSIFICATION	0.0016933413760361492	DESIGN
full joins are not supported.. yet!	WITHOUT_CLASSIFICATION	0.9994929059476221	WITHOUT_CLASSIFICATION	5.070940523778755E-4	DESIGN
null is not considered the same type as Integer. $NON-NLS-1 $NON-NLS-1	WITHOUT_CLASSIFICATION	0.9956278959693912	WITHOUT_CLASSIFICATION	0.0043721040306088955	DESIGN
the outerJoinsAfterWhere needs to come before where clause to properly handle dynamic filters	WITHOUT_CLASSIFICATION	0.9940457484658631	WITHOUT_CLASSIFICATION	0.005954251534136865	DESIGN
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999113734108903	WITHOUT_CLASSIFICATION	8.862658910963415E-5	DESIGN
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999113734108903	WITHOUT_CLASSIFICATION	8.862658910963415E-5	DESIGN
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999113734108903	WITHOUT_CLASSIFICATION	8.862658910963415E-5	DESIGN
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999113734108903	WITHOUT_CLASSIFICATION	8.862658910963415E-5	DESIGN
strip off any leading 'and' token	WITHOUT_CLASSIFICATION	0.9998191362527142	WITHOUT_CLASSIFICATION	1.8086374728573274E-4	DESIGN
if the condition is not already there...	WITHOUT_CLASSIFICATION	0.99979166219815	WITHOUT_CLASSIFICATION	2.0833780185000293E-4	DESIGN
dontSpace.add("'");	WITHOUT_CLASSIFICATION	0.9999530626110165	WITHOUT_CLASSIFICATION	4.693738898349722E-5	DESIGN
for MySQL	WITHOUT_CLASSIFICATION	0.9998205518678943	WITHOUT_CLASSIFICATION	1.7944813210566982E-4	DESIGN
HashMap columnsUnique = new HashMap();	WITHOUT_CLASSIFICATION	0.9999304313794752	WITHOUT_CLASSIFICATION	6.956862052476792E-5	DESIGN
null caused some problems	WITHOUT_CLASSIFICATION	0.9999302757806536	WITHOUT_CLASSIFICATION	6.972421934643828E-5	DESIGN
package	WITHOUT_CLASSIFICATION	0.9997312868516849	WITHOUT_CLASSIFICATION	2.6871314831509904E-4	DESIGN
not sure if this would ever be null but wanted to be careful	WITHOUT_CLASSIFICATION	0.9923439487709784	WITHOUT_CLASSIFICATION	0.007656051229021541	DESIGN
even on inverse="true"	WITHOUT_CLASSIFICATION	0.9999705570792375	WITHOUT_CLASSIFICATION	2.9442920762389382E-5	DESIGN
package	WITHOUT_CLASSIFICATION	0.9997312868516849	WITHOUT_CLASSIFICATION	2.6871314831509904E-4	DESIGN
package	WITHOUT_CLASSIFICATION	0.9997312868516849	WITHOUT_CLASSIFICATION	2.6871314831509904E-4	DESIGN
If true then execute db updates, otherwise just generate and display updates	WITHOUT_CLASSIFICATION	0.9998887531468954	WITHOUT_CLASSIFICATION	1.11246853104552E-4	DESIGN
we only release the connection	WITHOUT_CLASSIFICATION	0.999963437526977	WITHOUT_CLASSIFICATION	3.6562473023065385E-5	DESIGN
deprecated option...	WITHOUT_CLASSIFICATION	0.9998145828076412	WITHOUT_CLASSIFICATION	1.8541719235888067E-4	DESIGN
if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9993817546134767	WITHOUT_CLASSIFICATION	6.182453865234283E-4	DESIGN
actually, this last test is probably unnecessary, since beforeCompletion() doesn't get called during rollback	WITHOUT_CLASSIFICATION	0.9998788876698378	WITHOUT_CLASSIFICATION	1.2111233016222E-4	DESIGN
this one only really needed for badly-behaved applications! (if the TransactionManager has a Sychronization registered, its a noop) (actually we do need it for downgrading locks)	WITHOUT_CLASSIFICATION	0.9899436998576225	WITHOUT_CLASSIFICATION	0.010056300142377359	DESIGN
Create an DotNode AST for the path and resolve it.	WITHOUT_CLASSIFICATION	0.9999027292709668	WITHOUT_CLASSIFICATION	9.727072903329586E-5	DESIGN
if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9993817546134767	WITHOUT_CLASSIFICATION	6.182453865234283E-4	DESIGN
if we could not register a synchronization, do the before/after completion callbacks ourself (but we need to let jdbcContext know that this is what we are going to do, so it doesn't keep trying to register synchronizations)	WITHOUT_CLASSIFICATION	0.9954601183489621	WITHOUT_CLASSIFICATION	0.004539881651037999	DESIGN
swallow it, and continue to roll back JTA transaction	WITHOUT_CLASSIFICATION	0.9992302107989464	WITHOUT_CLASSIFICATION	7.697892010537177E-4	DESIGN
so the transaction is already rolled back, by JTA spec	WITHOUT_CLASSIFICATION	0.9998530861038953	WITHOUT_CLASSIFICATION	1.4691389610462874E-4	DESIGN
this method is a noop if there is a Synchronization!	WITHOUT_CLASSIFICATION	0.9951701025320351	WITHOUT_CLASSIFICATION	0.00482989746796499	DESIGN
two conditions where we need to transform this to a theta-join syntax: 1) 'elem' is the "root from-element" in correlated subqueries 2) The DotNode.useThetaStyleImplicitJoins has been set to true and 'elem' represents an implicit join	WITHOUT_CLASSIFICATION	0.9174580522957068	WITHOUT_CLASSIFICATION	0.08254194770429332	DESIGN
WebSphere, however, is not a sane JEE/JTA container...	WITHOUT_CLASSIFICATION	0.9986913199689275	WITHOUT_CLASSIFICATION	0.0013086800310726245	DESIGN
for sane JEE/JTA containers, the transaction itself functions as its identifier...	WITHOUT_CLASSIFICATION	0.9999206601214979	WITHOUT_CLASSIFICATION	7.933987850207924E-5	DESIGN
swallow, the transaction was finished	WITHOUT_CLASSIFICATION	0.9998513343927393	WITHOUT_CLASSIFICATION	1.4866560726058348E-4	DESIGN
all AliasToEntityMapResultTransformer are considered equal ~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992901842586683	WITHOUT_CLASSIFICATION	7.098157413315801E-4	DESIGN
Create the join element under the from element.	WITHOUT_CLASSIFICATION	0.999694322198748	WITHOUT_CLASSIFICATION	3.056778012520079E-4	DESIGN
all DistinctRootEntityResultTransformer are considered equal ~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992901842586683	WITHOUT_CLASSIFICATION	7.098157413315801E-4	DESIGN
map of EntityMode -> Tuplizer	WITHOUT_CLASSIFICATION	0.9999861592403104	WITHOUT_CLASSIFICATION	1.3840759689633337E-5	DESIGN
this is a virtual id property...	WITHOUT_CLASSIFICATION	0.9959425926971679	WITHOUT_CLASSIFICATION	0.004057407302832185	DESIGN
this one needed only for guessEntityMode()	WITHOUT_CLASSIFICATION	0.9980526697382371	WITHOUT_CLASSIFICATION	0.0019473302617628303	DESIGN
create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.999843278660869	WITHOUT_CLASSIFICATION	1.5672133913098533E-4	DESIGN
todo : move this to SF per HHH-3517; also see HHH-1907 and ComponentMetamodel	WITHOUT_CLASSIFICATION	0.9952668275961926	WITHOUT_CLASSIFICATION	0.004733172403807415	DESIGN
then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9998665213583673	WITHOUT_CLASSIFICATION	1.33478641632724E-4	DESIGN
Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.999792061410397	WITHOUT_CLASSIFICATION	2.0793858960294976E-4	DESIGN
then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9980865521178801	WITHOUT_CLASSIFICATION	0.0019134478821199114	DESIGN
Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.999792061410397	WITHOUT_CLASSIFICATION	2.0793858960294976E-4	DESIGN
put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9992167324569913	WITHOUT_CLASSIFICATION	7.832675430087855E-4	DESIGN
found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9997380495779428	WITHOUT_CLASSIFICATION	2.619504220572454E-4	DESIGN
private final SessionFactoryImplementor sessionFactory;	WITHOUT_CLASSIFICATION	0.9991266933404611	WITHOUT_CLASSIFICATION	8.733066595389304E-4	DESIGN
cached for efficiency...	WITHOUT_CLASSIFICATION	0.9999223152013313	WITHOUT_CLASSIFICATION	7.768479866873599E-5	DESIGN
public ComponentMetamodel(Component component, SessionFactoryImplementor sessionFactory) {	WITHOUT_CLASSIFICATION	0.9992268724715025	WITHOUT_CLASSIFICATION	7.731275284974347E-4	DESIGN
this.sessionFactory = sessionFactory;	WITHOUT_CLASSIFICATION	0.999921261100112	WITHOUT_CLASSIFICATION	7.873889988796204E-5	DESIGN
it was not embedded, so the argument is just an id	WITHOUT_CLASSIFICATION	0.999988957918571	WITHOUT_CLASSIFICATION	1.1042081429015244E-5	DESIGN
then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9998665213583673	WITHOUT_CLASSIFICATION	1.33478641632724E-4	DESIGN
then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9980865521178801	WITHOUT_CLASSIFICATION	0.0019134478821199114	DESIGN
put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9992167324569913	WITHOUT_CLASSIFICATION	7.832675430087855E-4	DESIGN
then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.999057312524043	WITHOUT_CLASSIFICATION	9.426874759571569E-4	DESIGN
return currentId;	WITHOUT_CLASSIFICATION	0.999964333698319	WITHOUT_CLASSIFICATION	3.566630168092332E-5	DESIGN
reset the id	WITHOUT_CLASSIFICATION	0.9999849811467152	WITHOUT_CLASSIFICATION	1.5018853284661054E-5	DESIGN
origin.addDestination( destination ); This was the cause of HHH-242 origin.setType( FROM_FRAGMENT ); Set the parent node type so that the AST is properly formed. The destination node will have all the FROM text. The parent node is a collection join too (voodoo - see JoinProcessor)	WITHOUT_CLASSIFICATION	0.932923720224821	WITHOUT_CLASSIFICATION	0.06707627977517897	DESIGN
reset the version	WITHOUT_CLASSIFICATION	0.9999851408436963	WITHOUT_CLASSIFICATION	1.4859156303676788E-5	DESIGN
the default is to simply not lazy fetch properties for now...	WITHOUT_CLASSIFICATION	0.9991304382895566	WITHOUT_CLASSIFICATION	8.695617104434323E-4	DESIGN
Add the second join, the one that ends in the destination table.	WITHOUT_CLASSIFICATION	0.9998608944082598	WITHOUT_CLASSIFICATION	1.3910559174026764E-4	DESIGN
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9857334339160307	WITHOUT_CLASSIFICATION	0.014266566083969222	DESIGN
found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9997380495779428	WITHOUT_CLASSIFICATION	2.619504220572454E-4	DESIGN
determine the id getter and setter methods from the proxy interface (if any) determine all interfaces needed by the resulting proxy	WITHOUT_CLASSIFICATION	0.9989659113332614	WITHOUT_CLASSIFICATION	0.0010340886667385486	DESIGN
return getFactory().getSettings().getBytecodeProvider().getProxyFactoryFactory().buildProxyFactory();	WITHOUT_CLASSIFICATION	0.9995612710695313	WITHOUT_CLASSIFICATION	4.387289304686594E-4	DESIGN
not final because proxy factory creation can fail	WITHOUT_CLASSIFICATION	0.9992840137080348	WITHOUT_CLASSIFICATION	7.159862919653399E-4	DESIGN
superclass entity-name	WITHOUT_CLASSIFICATION	0.9999373104044711	WITHOUT_CLASSIFICATION	6.268959552893005E-5	DESIGN
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9857334339160307	WITHOUT_CLASSIFICATION	0.014266566083969222	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994226996701397	WITHOUT_CLASSIFICATION	5.773003298601926E-4	DESIGN
init the aliases, after initing the constructornode	WITHOUT_CLASSIFICATION	0.9997535776583313	WITHOUT_CLASSIFICATION	2.464223416686261E-4	DESIGN
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9857334339160307	WITHOUT_CLASSIFICATION	0.014266566083969222	DESIGN
legacy behavior (with no abstract attribute specified)	WITHOUT_CLASSIFICATION	0.9990062336249763	WITHOUT_CLASSIFICATION	9.937663750236288E-4	DESIGN
Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9994814241013098	WITHOUT_CLASSIFICATION	5.185758986902982E-4	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994226996701397	WITHOUT_CLASSIFICATION	5.773003298601926E-4	DESIGN
note: this affects the return value!	WITHOUT_CLASSIFICATION	0.9996362965775533	WITHOUT_CLASSIFICATION	3.637034224468115E-4	DESIGN
Need to account for allowable '_' within the variant	WITHOUT_CLASSIFICATION	0.9992723919717893	WITHOUT_CLASSIFICATION	7.276080282107477E-4	DESIGN
Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9997175800286535	WITHOUT_CLASSIFICATION	2.8241997134643325E-4	DESIGN
Collection Types:	WITHOUT_CLASSIFICATION	0.9999672173478357	WITHOUT_CLASSIFICATION	3.2782652164225014E-5	DESIGN
convenience methods relating to operations across arrays of types...	WITHOUT_CLASSIFICATION	0.9985386023210158	WITHOUT_CLASSIFICATION	0.0014613976789842143	DESIGN
lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999662846086407	WITHOUT_CLASSIFICATION	3.371539135940711E-5	DESIGN
Blobs are ignored by merge()	WITHOUT_CLASSIFICATION	0.9999477301920869	WITHOUT_CLASSIFICATION	5.226980791295878E-5	DESIGN
value is the entity name	WITHOUT_CLASSIFICATION	0.9999596458830496	WITHOUT_CLASSIFICATION	4.035411695042454E-5	DESIGN
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999530626110165	WITHOUT_CLASSIFICATION	4.693738898349722E-5	DESIGN
generate id select fragment and then property select fragment for each expression, just like generateSelectFragments().	WITHOUT_CLASSIFICATION	0.999511398605416	WITHOUT_CLASSIFICATION	4.88601394583859E-4	DESIGN
TODO!	WITHOUT_CLASSIFICATION	0.9999113734108903	WITHOUT_CLASSIFICATION	8.862658910963415E-5	DESIGN
xml is the entity name	WITHOUT_CLASSIFICATION	0.9999417100801637	WITHOUT_CLASSIFICATION	5.828991983621109E-5	DESIGN
special case ... this is the leaf of the containment graph, even though not immutable	WITHOUT_CLASSIFICATION	0.9998283961824456	WITHOUT_CLASSIFICATION	1.7160381755447344E-4	DESIGN
tolerates nulls	WITHOUT_CLASSIFICATION	0.9999530626110165	WITHOUT_CLASSIFICATION	4.693738898349722E-5	DESIGN
sqlResultTypeList,	WITHOUT_CLASSIFICATION	0.9999530626110165	WITHOUT_CLASSIFICATION	4.693738898349722E-5	DESIGN
metaType is assumed to be single-column type	WITHOUT_CLASSIFICATION	0.9924306117752298	WITHOUT_CLASSIFICATION	0.007569388224770196	DESIGN
Get all the select expressions (that we just generated) and render the select.	WITHOUT_CLASSIFICATION	0.9996885434345055	WITHOUT_CLASSIFICATION	3.114565654944983E-4	DESIGN
Look through the FromElement's children to find any collections of values that should be fetched...	WITHOUT_CLASSIFICATION	0.9998037880900448	WITHOUT_CLASSIFICATION	1.9621190995525073E-4	DESIGN
return AssociationType.FOREIGN_KEY_TO_PARENT; this is better but causes a transient object exception...	WITHOUT_CLASSIFICATION	0.9837181328017751	WITHOUT_CLASSIFICATION	0.016281867198224872	DESIGN
Use the lower case function name. Remember whether we're in a SELECT clause or not.	WITHOUT_CLASSIFICATION	0.9998886557483928	WITHOUT_CLASSIFICATION	1.1134425160715844E-4	DESIGN
IDENT might be the name of a class.	WITHOUT_CLASSIFICATION	0.9951092325440045	WITHOUT_CLASSIFICATION	0.004890767455995538	DESIGN
TODO!!!	WITHOUT_CLASSIFICATION	0.9999113734108903	WITHOUT_CLASSIFICATION	8.862658910963415E-5	DESIGN
st.setTimestamp( index, new Timestamp( cal.getTimeInMillis() ), cal ); JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9996575929535393	WITHOUT_CLASSIFICATION	3.4240704646064905E-4	DESIGN
st.setDate( index, new Date( cal.getTimeInMillis() ), cal ); JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9996575929535393	WITHOUT_CLASSIFICATION	3.4240704646064905E-4	DESIGN
both are Timestamps	WITHOUT_CLASSIFICATION	0.9998742435106748	WITHOUT_CLASSIFICATION	1.257564893252146E-4	DESIGN
at least one is a plain old Date	WITHOUT_CLASSIFICATION	0.9966307906962667	WITHOUT_CLASSIFICATION	0.003369209303733319	DESIGN
noop	WITHOUT_CLASSIFICATION	0.9999121901886008	WITHOUT_CLASSIFICATION	8.780981139921503E-5	DESIGN
if the corresponding SQL value is NULL, the reader we got is NULL as well	WITHOUT_CLASSIFICATION	0.9999471101439757	WITHOUT_CLASSIFICATION	5.288985602430009E-5	DESIGN
Fetch Reader content up to the end - and put characters in a StringBuffer	WITHOUT_CLASSIFICATION	0.997849088194201	WITHOUT_CLASSIFICATION	0.002150911805798889	DESIGN
Return StringBuffer content as a large String	WITHOUT_CLASSIFICATION	0.9996158680323133	WITHOUT_CLASSIFICATION	3.8413196768674894E-4	DESIGN
or Types.LONGVARCHAR?	WITHOUT_CLASSIFICATION	0.9999639620378499	WITHOUT_CLASSIFICATION	3.603796215006164E-5	DESIGN
Not called at runtime so doesn't matter if its slow :)	WITHOUT_CLASSIFICATION	0.999830788870749	WITHOUT_CLASSIFICATION	1.692111292509481E-4	DESIGN
TODO	WITHOUT_CLASSIFICATION	0.8913764215721758	WITHOUT_CLASSIFICATION	0.1086235784278242	DESIGN
Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999946761372501	WITHOUT_CLASSIFICATION	5.323862749814296E-6	DESIGN
different nullability rules for pk/fk	WITHOUT_CLASSIFICATION	0.9987295733653627	WITHOUT_CLASSIFICATION	0.00127042663463724	DESIGN
cache this	WITHOUT_CLASSIFICATION	0.9997898382305566	WITHOUT_CLASSIFICATION	2.1016176944338173E-4	DESIGN
only really need new array during semiresolve!	WITHOUT_CLASSIFICATION	0.9990332357237852	WITHOUT_CLASSIFICATION	9.66764276214703E-4	DESIGN
Forcefully remove leading ands from where fragments; the grammar will handle adding them	WITHOUT_CLASSIFICATION	0.9993005416234688	WITHOUT_CLASSIFICATION	6.994583765311624E-4	DESIGN
TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9999530626110165	WITHOUT_CLASSIFICATION	4.693738898349722E-5	DESIGN
Create a new FILTERS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9995635531128215	WITHOUT_CLASSIFICATION	4.364468871785706E-4	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994226996701397	WITHOUT_CLASSIFICATION	5.773003298601926E-4	DESIGN
public Object instantiate(Object parent, SessionImplementor session) throws HibernateException;	WITHOUT_CLASSIFICATION	0.999164510262134	WITHOUT_CLASSIFICATION	8.354897378658235E-4	DESIGN
nothing to do	WITHOUT_CLASSIFICATION	0.9999876587160922	WITHOUT_CLASSIFICATION	1.2341283907898168E-5	DESIGN
nothing to do	WITHOUT_CLASSIFICATION	0.9999876587160922	WITHOUT_CLASSIFICATION	1.2341283907898168E-5	DESIGN
VersionType impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Note : simply returns null for seed() and next() as the only known application of binary types for versioning is for use with the TIMESTAMP datatype supported by Sybase and SQL Server, which are completely db-generated values...	WITHOUT_CLASSIFICATION	0.9919599526073362	WITHOUT_CLASSIFICATION	0.008040047392663846	DESIGN
lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999662846086407	WITHOUT_CLASSIFICATION	3.371539135940711E-5	DESIGN
not really necessary, I guess...	WITHOUT_CLASSIFICATION	0.9989136022276195	WITHOUT_CLASSIFICATION	0.0010863977723804263	DESIGN
Clobs are ignored by merge() operation	WITHOUT_CLASSIFICATION	0.9995925101408899	WITHOUT_CLASSIFICATION	4.0748985911011457E-4	DESIGN
we do not have to worry about queued additions to uninitialized collections, since they can only occur for inverse collections!	WITHOUT_CLASSIFICATION	0.9969245376946196	WITHOUT_CLASSIFICATION	0.0030754623053803583	DESIGN
collections cannot be compared	WITHOUT_CLASSIFICATION	0.9999663282978007	WITHOUT_CLASSIFICATION	3.3671702199260954E-5	DESIGN
remember the uk value	WITHOUT_CLASSIFICATION	0.9999848337510506	WITHOUT_CLASSIFICATION	1.5166248949439978E-5	DESIGN
NOOP	WITHOUT_CLASSIFICATION	0.9999113734108903	WITHOUT_CLASSIFICATION	8.862658910963415E-5	DESIGN
processCollectionProperty(token, q.getCollectionPersister(collectionRole), collectionName);	WITHOUT_CLASSIFICATION	0.9994226996701397	WITHOUT_CLASSIFICATION	5.773003298601926E-4	DESIGN
we must use the "remembered" uk value, since it is not available from the EntityEntry during assembly	WITHOUT_CLASSIFICATION	0.999222446004005	WITHOUT_CLASSIFICATION	7.775539959950937E-4	DESIGN
collections don't dirty an unversioned parent entity	WITHOUT_CLASSIFICATION	0.9991709284623321	WITHOUT_CLASSIFICATION	8.290715376679211E-4	DESIGN
return false;	WITHOUT_CLASSIFICATION	0.9999509421531403	WITHOUT_CLASSIFICATION	4.9057846859739494E-5	DESIGN
This just handles a particular case of component projection, perhaps get rid of it and throw an exception	WITHOUT_CLASSIFICATION	0.9973275792658715	WITHOUT_CLASSIFICATION	0.0026724207341285076	DESIGN
NOTE: we avoid joining to the next table if the named property is just the foreign key value	WITHOUT_CLASSIFICATION	0.9998915475066361	WITHOUT_CLASSIFICATION	1.0845249336382584E-4	DESIGN
the key is the owning entity itself, so get the ID from the key	WITHOUT_CLASSIFICATION	0.9996126868357446	WITHOUT_CLASSIFICATION	3.8731316425541317E-4	DESIGN
if the original is a PersistentCollection, and that original was not flagged as dirty, then reset the target's dirty flag here after the copy operation. </p> One thing to be careful of here is a "bare" original collection in which case we should never ever ever reset the dirty flag on the target because we simply do not know...	WITHOUT_CLASSIFICATION	0.9994811341818501	WITHOUT_CLASSIFICATION	5.188658181498565E-4	DESIGN
ignore subselect keywords	WITHOUT_CLASSIFICATION	0.9999374527018317	WITHOUT_CLASSIFICATION	6.254729816835398E-5	DESIGN
copy elements into newly empty target collection	WITHOUT_CLASSIFICATION	0.9998073684162897	WITHOUT_CLASSIFICATION	1.9263158371022313E-4	DESIGN
for a null target, or a target which is the same as the original, we need to put the merged elements in a new collection	WITHOUT_CLASSIFICATION	0.9920026327368152	WITHOUT_CLASSIFICATION	0.007997367263184868	DESIGN
by default just use an unanticipated capacity since we don't know how to extract the capacity to use from original here...	WITHOUT_CLASSIFICATION	0.9997875259053036	WITHOUT_CLASSIFICATION	2.1247409469634334E-4	DESIGN
get the elements back into the target making sure to handle dirty flag	WITHOUT_CLASSIFICATION	0.999891341189834	WITHOUT_CLASSIFICATION	1.0865881016594521E-4	DESIGN
check if collection is currently being loaded	WITHOUT_CLASSIFICATION	0.998115788117528	WITHOUT_CLASSIFICATION	0.0018842118824719774	DESIGN
check if it is already completely loaded, but unowned	WITHOUT_CLASSIFICATION	0.9998416500109131	WITHOUT_CLASSIFICATION	1.5834998908688494E-4	DESIGN
cache the actual id of the object, not the value of the property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9994877076794536	WITHOUT_CLASSIFICATION	5.122923205464036E-4	DESIGN
TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9999530626110165	WITHOUT_CLASSIFICATION	4.693738898349722E-5	DESIGN
create a new collection wrapper, to be initialized later	WITHOUT_CLASSIFICATION	0.9906393767403887	WITHOUT_CLASSIFICATION	0.009360623259611392	DESIGN
Some JDBC drivers erroneously return an empty array here for a null DB value :/	WITHOUT_CLASSIFICATION	0.9785975574564887	WITHOUT_CLASSIFICATION	0.021402442543511417	DESIGN
our column span is the number of columns in the PK	WITHOUT_CLASSIFICATION	0.9997059943097262	WITHOUT_CLASSIFICATION	2.940056902737552E-4	DESIGN
cannot batch fetch by unique key (property-ref associations)	WITHOUT_CLASSIFICATION	0.9984352988096629	WITHOUT_CLASSIFICATION	0.0015647011903371017	DESIGN
we already know current is not null...	WITHOUT_CLASSIFICATION	0.9995857986372296	WITHOUT_CLASSIFICATION	4.142013627703942E-4	DESIGN
the ids are fully resolved, so compare them with isDirty(), not isModified()	WITHOUT_CLASSIFICATION	0.9998438887919036	WITHOUT_CLASSIFICATION	1.5611120809642134E-4	DESIGN
the owner of the association is not the owner of the id	WITHOUT_CLASSIFICATION	0.999905972830741	WITHOUT_CLASSIFICATION	9.40271692590417E-5	DESIGN
----------------------------------------------------------- Constructors	WITHOUT_CLASSIFICATION	0.9994231486745722	WITHOUT_CLASSIFICATION	5.768513254278396E-4	DESIGN
----------------------------------------------------- Instance Variables	WITHOUT_CLASSIFICATION	0.9994446353639578	WITHOUT_CLASSIFICATION	5.553646360422374E-4	DESIGN
public static JDBCException newJDBCException(String string, SQLException root, String sql) { string = string + " [" + sql + ']'; log.error(string, root); logExceptions(root); return new JDBCException(string, root, sql); } public static JDBCException newJDBCException(String string, SQLException root) { log.error(string, root); logExceptions(root); return new JDBCException(string, root); }	WITHOUT_CLASSIFICATION	0.9999377274391061	WITHOUT_CLASSIFICATION	6.227256089381741E-5	DESIGN
--------------------------------------------------------- Public Methods	WITHOUT_CLASSIFICATION	0.9993659577218088	WITHOUT_CLASSIFICATION	6.340422781911648E-4	DESIGN
Compare the two maps for equality	WITHOUT_CLASSIFICATION	0.9997027534310253	WITHOUT_CLASSIFICATION	2.972465689746265E-4	DESIGN
Simple tests that require no synchronization	WITHOUT_CLASSIFICATION	0.9992854175451308	WITHOUT_CLASSIFICATION	7.145824548692439E-4	DESIGN
Sybase fail if we don't do that, sigh...	WITHOUT_CLASSIFICATION	0.9979494627033427	WITHOUT_CLASSIFICATION	0.002050537296657221	DESIGN
Handles things like: a and b or c a and ( b or c ) not a and not b not ( a and b ) x between y and z (overloaded "and") x in ( a, b, c ) (overloaded brackets) not not a a is not null (overloaded "not") etc...... and expressions like foo = bar (maps to: foo.id = bar.id) foo.Bar = 'foo' (maps to: foo.bar = 'foo') foo.Bar.Baz = 1.0 (maps to: foo.bar = bar.id and bar.baz = 1.0) 1.0 = foo.Bar.Baz (maps to: bar.baz = 1.0 and foo.Bar = bar.id) foo.Bar.Baz = a.B.C (maps to: bar.Baz = b.C and foo.Bar = bar.id and a.B = b.id) foo.Bar.Baz + a.B.C (maps to: bar.Baz + b.C and foo.Bar = bar.id and a.B = b.id) ( foo.Bar.Baz + 1.0 ) < 2.0 (maps to: ( bar.Baz + 1.0 ) < 2.0 and foo.Bar = bar.id)	WITHOUT_CLASSIFICATION	0.9982547649461123	WITHOUT_CLASSIFICATION	0.0017452350538876976	DESIGN
release the jdk internal caches everytime to ensure this plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9972837766178737	WITHOUT_CLASSIFICATION	0.0027162233821262623	DESIGN
release the jdk internal caches everytime to ensure this plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9972837766178737	WITHOUT_CLASSIFICATION	0.0027162233821262623	DESIGN
try to "pretty print" it	WITHOUT_CLASSIFICATION	0.9999571917387029	WITHOUT_CLASSIFICATION	4.280826129701314E-5	DESIGN
otherwise, just dump it	WITHOUT_CLASSIFICATION	0.9999718045098388	WITHOUT_CLASSIFICATION	2.8195490161258472E-5	DESIGN
its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9995854177430251	WITHOUT_CLASSIFICATION	4.1458225697485197E-4	DESIGN
its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9995854177430251	WITHOUT_CLASSIFICATION	4.1458225697485197E-4	DESIGN
use default behavior	WITHOUT_CLASSIFICATION	0.9999199854102587	WITHOUT_CLASSIFICATION	8.001458974126024E-5	DESIGN
NOTE: early return	WITHOUT_CLASSIFICATION	0.9999853136456022	WITHOUT_CLASSIFICATION	1.4686354397843938E-5	DESIGN
the MRU cache used to keep hard references to the most recently used query plans; note : LRU here is a bit of a misnomer, it indicates that LRU entries are removed, the actual kept entries are the MRU entries	WITHOUT_CLASSIFICATION	0.9974798697540437	WITHOUT_CLASSIFICATION	0.002520130245956361	DESIGN
we want to be able to just use the defaults, if JNDI environment properties are not supplied so don't put null in anywhere	WITHOUT_CLASSIFICATION	0.9923253418066382	WITHOUT_CLASSIFICATION	0.007674658193361837	DESIGN
Clone -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.999545798615594	WITHOUT_CLASSIFICATION	4.5420138440602686E-4	DESIGN
Serialize -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9994226996701397	WITHOUT_CLASSIFICATION	5.773003298601926E-4	DESIGN
stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999757838887603	WITHOUT_CLASSIFICATION	2.4216111239690653E-5	DESIGN
stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999757838887603	WITHOUT_CLASSIFICATION	2.4216111239690653E-5	DESIGN
Deserialize -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9994226996701397	WITHOUT_CLASSIFICATION	5.773003298601926E-4	DESIGN
static methods only - hide constructor	WITHOUT_CLASSIFICATION	0.9922498272969346	WITHOUT_CLASSIFICATION	0.007750172703065363	DESIGN
&& !('_'==character)	WITHOUT_CLASSIFICATION	0.9999551312387455	WITHOUT_CLASSIFICATION	4.486876125451365E-5	DESIGN
returnign null!	WITHOUT_CLASSIFICATION	0.9999530626110165	WITHOUT_CLASSIFICATION	4.693738898349722E-5	DESIGN
returnign null!	WITHOUT_CLASSIFICATION	0.9999530626110165	WITHOUT_CLASSIFICATION	4.693738898349722E-5	DESIGN
includes last '.'	WITHOUT_CLASSIFICATION	0.9999318328915616	WITHOUT_CLASSIFICATION	6.816710843836609E-5	DESIGN
+1 to include the following '.'	WITHOUT_CLASSIFICATION	0.9997457528660195	WITHOUT_CLASSIFICATION	2.542471339804531E-4	DESIGN
Impl note: takes advantage of the fact that an escpaed single quote embedded within a quote-block can really be handled as two seperate quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9987515072372957	WITHOUT_CLASSIFICATION	0.0012484927627043456	DESIGN
first time we find match!	WITHOUT_CLASSIFICATION	0.9999244386899722	WITHOUT_CLASSIFICATION	7.556131002788785E-5	DESIGN
entityNames may now include slashes for the representations classname may be an inner class	WITHOUT_CLASSIFICATION	0.9999544065096854	WITHOUT_CLASSIFICATION	4.55934903145817E-5	DESIGN
wrapped iterators	WITHOUT_CLASSIFICATION	0.9999543382748453	WITHOUT_CLASSIFICATION	4.566172515468789E-5	DESIGN
index of current iterator in the wrapped iterators array	WITHOUT_CLASSIFICATION	0.9998674886230364	WITHOUT_CLASSIFICATION	1.3251137696356332E-4	DESIGN
the current iterator	WITHOUT_CLASSIFICATION	0.999985386191559	WITHOUT_CLASSIFICATION	1.4613808441041498E-5	DESIGN
the last used iterator	WITHOUT_CLASSIFICATION	0.9999680014350568	WITHOUT_CLASSIFICATION	3.199856494322829E-5	DESIGN
it was a boolean expression	WITHOUT_CLASSIFICATION	0.9999709228894171	WITHOUT_CLASSIFICATION	2.9077110582781982E-5	DESIGN
public static Object[] clone(Class elementClass, Object[] array) {Object[] result = (Object[]) Array.newInstance( elementClass, array.length );System.arraycopy(array, 0, result, 0, array.length);return result;}	WITHOUT_CLASSIFICATION	0.9998773807389105	WITHOUT_CLASSIFICATION	1.2261926108941227E-4	DESIGN
call this before any Iterator method to make sure that the current Iterator is not exhausted	WITHOUT_CLASSIFICATION	0.9688199809062812	WITHOUT_CLASSIFICATION	0.031180019093718866	DESIGN
doable if needed	WITHOUT_CLASSIFICATION	0.9999594841853743	WITHOUT_CLASSIFICATION	4.051581462562647E-5	DESIGN
set last used iterator here, in case the user calls remove before calling hasNext() or next() (although they shouldn't)	WITHOUT_CLASSIFICATION	0.9997890928371306	WITHOUT_CLASSIFICATION	2.1090716286942019E-4	DESIGN
peek ahead	WITHOUT_CLASSIFICATION	0.999923783632362	WITHOUT_CLASSIFICATION	7.6216367638044E-5	DESIGN
if we reach the end of the string w/o finding the matching end, that is an exception	WITHOUT_CLASSIFICATION	0.9997103860792552	WITHOUT_CLASSIFICATION	2.896139207447536E-4	DESIGN
we have a placeholder, spin forward till we find the end	WITHOUT_CLASSIFICATION	0.9997514301015133	WITHOUT_CLASSIFICATION	2.485698984866585E-4	DESIGN
make sure spinning forward did not put us past the end of the buffer...	WITHOUT_CLASSIFICATION	0.9992662977766285	WITHOUT_CLASSIFICATION	7.337022233715073E-4	DESIGN
First, try to locate this resource through the current context classloader.	WITHOUT_CLASSIFICATION	0.9994807833710249	WITHOUT_CLASSIFICATION	5.192166289751803E-4	DESIGN
Next, try to locate this resource through this class's classloader	WITHOUT_CLASSIFICATION	0.9983381134220519	WITHOUT_CLASSIFICATION	0.001661886577948073	DESIGN
Next, try to locate this resource through the system classloader	WITHOUT_CLASSIFICATION	0.9994818826358135	WITHOUT_CLASSIFICATION	5.181173641865238E-4	DESIGN
Anywhere else we should look?	WITHOUT_CLASSIFICATION	0.9997466145074457	WITHOUT_CLASSIFICATION	2.533854925543134E-4	DESIGN
would need an IdentitySet for this!	WITHOUT_CLASSIFICATION	0.982970489478227	WITHOUT_CLASSIFICATION	0.017029510521773063	DESIGN
Arrays.asList doesn't do primitive arrays	WITHOUT_CLASSIFICATION	0.9997328867603704	WITHOUT_CLASSIFICATION	2.671132396294846E-4	DESIGN
faster?	WITHOUT_CLASSIFICATION	0.9999113734108903	WITHOUT_CLASSIFICATION	8.862658910963415E-5	DESIGN
the name of a class	WITHOUT_CLASSIFICATION	0.9999668624704668	WITHOUT_CLASSIFICATION	3.313752953313316E-5	DESIGN
Its the listener class name	WITHOUT_CLASSIFICATION	0.9999900940721137	WITHOUT_CLASSIFICATION	9.905927886299818E-6	DESIGN
allow 9,8,7,6,5,4,3,2,1	WITHOUT_CLASSIFICATION	0.9998506942879486	WITHOUT_CLASSIFICATION	1.493057120514557E-4	DESIGN
default to element set if no elements() specified	WITHOUT_CLASSIFICATION	0.9988482878441398	WITHOUT_CLASSIFICATION	0.001151712155860184	DESIGN
look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999237789276141	WITHOUT_CLASSIFICATION	7.62210723859075E-5	DESIGN
in case we were deserialized in a different JVM, look for an instance with the same name (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9992252638201132	WITHOUT_CLASSIFICATION	7.747361798868198E-4	DESIGN
first, lets determine whether to apply cglib or javassist based instrumentation...	WITHOUT_CLASSIFICATION	0.9931647738608722	WITHOUT_CLASSIFICATION	0.006835226139127855	DESIGN
Make sure we don't override previous set values	WITHOUT_CLASSIFICATION	0.9995345044360758	WITHOUT_CLASSIFICATION	4.6549556392421176E-4	DESIGN
entirely optional!!	WITHOUT_CLASSIFICATION	0.9999514677605178	WITHOUT_CLASSIFICATION	4.8532239482219126E-5	DESIGN
Its the listener instance (or better be)	WITHOUT_CLASSIFICATION	0.9995082533809726	WITHOUT_CLASSIFICATION	4.917466190275153E-4	DESIGN
context.unbind(boundName);	WITHOUT_CLASSIFICATION	0.9999608966083426	WITHOUT_CLASSIFICATION	3.910339165735296E-5	DESIGN
readResolveObject	WITHOUT_CLASSIFICATION	0.9999530626110165	WITHOUT_CLASSIFICATION	4.693738898349722E-5	DESIGN
cfg.setProperty("hibernate.show_sql", "true");	WITHOUT_CLASSIFICATION	0.9994226996701397	WITHOUT_CLASSIFICATION	5.773003298601926E-4	DESIGN
Defensive, convenience methods	WITHOUT_CLASSIFICATION	0.9999176384762841	WITHOUT_CLASSIFICATION	8.236152371588444E-5	DESIGN
Create the SessionFactory from hibernate.cfg.xml	WITHOUT_CLASSIFICATION	0.999800195895453	WITHOUT_CLASSIFICATION	1.9980410454698423E-4	DESIGN
Make sure you log the exception, as it might be swallowed	WITHOUT_CLASSIFICATION	0.9997982300662542	WITHOUT_CLASSIFICATION	2.0176993374571145E-4	DESIGN
Begin unit of work	WITHOUT_CLASSIFICATION	0.9999653087072525	WITHOUT_CLASSIFICATION	3.4691292747399093E-5	DESIGN
Write HTML header	WITHOUT_CLASSIFICATION	0.999960641802296	WITHOUT_CLASSIFICATION	3.935819770396426E-5	DESIGN
Handle actions	WITHOUT_CLASSIFICATION	0.9996703042083134	WITHOUT_CLASSIFICATION	3.2969579168656696E-4	DESIGN
Print page	WITHOUT_CLASSIFICATION	0.9998527830802023	WITHOUT_CLASSIFICATION	1.4721691979768217E-4	DESIGN
Write HTML footer	WITHOUT_CLASSIFICATION	0.999955098884147	WITHOUT_CLASSIFICATION	4.490111585293393E-5	DESIGN
End unit of work	WITHOUT_CLASSIFICATION	0.9999382068384417	WITHOUT_CLASSIFICATION	6.179316155829934E-5	DESIGN
Start the session to be used for this request	WITHOUT_CLASSIFICATION	0.9963982000338565	WITHOUT_CLASSIFICATION	0.0036017999661434818	DESIGN
make the session available to the session factory's "current context"	WITHOUT_CLASSIFICATION	0.996171390530296	WITHOUT_CLASSIFICATION	0.0038286094697039673	DESIGN
pass control along to the rest of the processing chain	WITHOUT_CLASSIFICATION	0.9996762917152232	WITHOUT_CLASSIFICATION	3.2370828477678443E-4	DESIGN
remove session from "current context"	WITHOUT_CLASSIFICATION	0.9993703458432647	WITHOUT_CLASSIFICATION	6.296541567352963E-4	DESIGN
Eager fetch the collection so we can use it detached	WITHOUT_CLASSIFICATION	0.9971947982619188	WITHOUT_CLASSIFICATION	0.00280520173808124	DESIGN
If we want to handle it bidirectional and detached, we also need to load this collection with an eager outer-join fetch, this time with Criteria and not HQL:	WITHOUT_CLASSIFICATION	0.9039109168854733	WITHOUT_CLASSIFICATION	0.09608908311452666	DESIGN
Event anEvent = (Event) session .createCriteria(Event.class).setFetchMode("participants", FetchMode.JOIN) .add( Expression.eq("id", eventId) ) .uniqueResult(); Eager fetch the colleciton so we can use it detached	WITHOUT_CLASSIFICATION	0.9998241740723507	WITHOUT_CLASSIFICATION	1.7582592764935073E-4	DESIGN
End of first unit of work	WITHOUT_CLASSIFICATION	0.9999426769563817	WITHOUT_CLASSIFICATION	5.7323043618232066E-5	DESIGN
or bidirectional safety method, setting both sides: aPerson.addToEvent(anEvent);	WITHOUT_CLASSIFICATION	0.9982084200999531	WITHOUT_CLASSIFICATION	0.0017915799000469109	DESIGN
Begin second unit of work	WITHOUT_CLASSIFICATION	0.9999802094649085	WITHOUT_CLASSIFICATION	1.9790535091506235E-5	DESIGN
Reattachment of aPerson	WITHOUT_CLASSIFICATION	0.9999676198245611	WITHOUT_CLASSIFICATION	3.2380175438834106E-5	DESIGN
The getEmailAddresses() might trigger a lazy load of the collection	WITHOUT_CLASSIFICATION	0.9966955662268997	WITHOUT_CLASSIFICATION	0.0033044337731003392	DESIGN
We need our tm, so get it now and avoid doing other work if there is a problem	WITHOUT_CLASSIFICATION	0.9998965472659567	WITHOUT_CLASSIFICATION	1.0345273404328808E-4	DESIGN
Don't hold the JBC node lock throughout the tx, as that prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9983546432832189	WITHOUT_CLASSIFICATION	0.0016453567167810587	DESIGN
Don't hold the JBC node lock throughout the tx, as that prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9983546432832189	WITHOUT_CLASSIFICATION	0.0016453567167810587	DESIGN
JBC put a version in the node when it created as part of some internal operation. We are always newer, but if the JBC version is > 1 something odd has happened	WITHOUT_CLASSIFICATION	0.9999889770161392	WITHOUT_CLASSIFICATION	1.1022983860726759E-5	DESIGN
swaldman 2006-08-28: define c3p0-style configuration parameters for properties with hibernate-specific overrides to detect and warn about conflicting declarations	WITHOUT_CLASSIFICATION	0.9978946531298298	WITHOUT_CLASSIFICATION	0.002105346870170196	DESIGN
Not null if the Isolation level has been specified in the configuration file. Otherwise, it is left to the Driver's default value.	WITHOUT_CLASSIFICATION	0.9981724275707335	WITHOUT_CLASSIFICATION	0.0018275724292663633	DESIGN
Configured outside of Hibernate (i.e. Servlet container, or Java Bean Container already has Proxool pools running, and this provider is to just borrow one of these	WITHOUT_CLASSIFICATION	0.9934969042116071	WITHOUT_CLASSIFICATION	0.006503095788392872	DESIGN
If you're closing down the ConnectionProvider chances are an is not a real big deal, just warn	WITHOUT_CLASSIFICATION	0.9999094350846875	WITHOUT_CLASSIFICATION	9.05649153125357E-5	DESIGN
(AS is always optional, for consistency with SQL/OQL)	WITHOUT_CLASSIFICATION	0.997326471594901	WITHOUT_CLASSIFICATION	0.002673528405098981	DESIGN
process the "new" HQL style where aliases are assigned _after_ the class name or path expression ie. using the AS construction	WITHOUT_CLASSIFICATION	0.9998944265897406	WITHOUT_CLASSIFICATION	1.0557341025951757E-4	DESIGN
the loaded owner will be set to null after the collection is removed, so capture its value as the affected owner so it is accessible to both pre- and post- events	WITHOUT_CLASSIFICATION	0.9935491465133839	WITHOUT_CLASSIFICATION	0.006450853486616185	DESIGN
is a primitive type invokespecial	WITHOUT_CLASSIFICATION	0.9939406582875597	WITHOUT_CLASSIFICATION	0.006059341712440289	DESIGN
array of primitive type do nothing	WITHOUT_CLASSIFICATION	0.9997982660377405	WITHOUT_CLASSIFICATION	2.01733962259501E-4	DESIGN
handle a path expression or class name that appears at the start, in the "new" HQL style or an alias that appears at the start in the "old" HQL style	WITHOUT_CLASSIFICATION	0.9976067670589288	WITHOUT_CLASSIFICATION	0.002393232941071164	DESIGN
handle <=, >=, !=, is not, not between, not in	WITHOUT_CLASSIFICATION	0.9983864533406434	WITHOUT_CLASSIFICATION	0.0016135466593566914	DESIGN
The loop ensures atomicity of the select + update even for no transaction or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999900578769435	WITHOUT_CLASSIFICATION	9.94212305647104E-6	DESIGN
transfer an explicitly defined entity name handle the lazy attribute	WITHOUT_CLASSIFICATION	0.9996544110723214	WITHOUT_CLASSIFICATION	3.4558892767852956E-4	DESIGN
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9997105988464778	WITHOUT_CLASSIFICATION	2.8940115352204767E-4	DESIGN
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9997105988464778	WITHOUT_CLASSIFICATION	2.8940115352204767E-4	DESIGN
get meta's from <joined-subclass>	WITHOUT_CLASSIFICATION	0.9994343248872992	WITHOUT_CLASSIFICATION	5.656751127008635E-4	DESIGN
parameters on the property mapping should override parameters in the typedef	WITHOUT_CLASSIFICATION	0.9988570533953759	WITHOUT_CLASSIFICATION	0.0011429466046241061	DESIGN
fetch="join" overrides default laziness fetch="join" overrides default laziness	WITHOUT_CLASSIFICATION	0.9994665379356524	WITHOUT_CLASSIFICATION	5.334620643475821E-4	DESIGN
NOTE SPECIAL CASE: default to join and non-lazy for the "second join" of the many-to-many	WITHOUT_CLASSIFICATION	0.9992933080558525	WITHOUT_CLASSIFICATION	7.066919441475396E-4	DESIGN
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9994315597422329	WITHOUT_CLASSIFICATION	5.684402577671216E-4	DESIGN
state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993797634534545	WITHOUT_CLASSIFICATION	6.202365465455509E-4	DESIGN
void setComponentTuplizerFactory(ComponentTuplizerFactory componentTuplizerFactory) { this.componentTuplizerFactory = componentTuplizerFactory; }	WITHOUT_CLASSIFICATION	0.9999095898474277	WITHOUT_CLASSIFICATION	9.041015257228288E-5	DESIGN
element index -> id	WITHOUT_CLASSIFICATION	0.9999790775607585	WITHOUT_CLASSIFICATION	2.092243924145656E-5	DESIGN
note that it might be better to iterate the snapshot but this is safe, assuming the user implements equals() properly, as required by the Set contract!	WITHOUT_CLASSIFICATION	0.9770829923673039	WITHOUT_CLASSIFICATION	0.0229170076326961	DESIGN
collections detect changes made via their public interface and mark themselves as dirty as a performance optimization	WITHOUT_CLASSIFICATION	0.9976007048798792	WITHOUT_CLASSIFICATION	0.0023992951201208847	DESIGN
essentially, if the real session is closed allow any method call to pass through since the real session will complain by throwing an appropriate exception; NOTE that allowing close() above has the same basic effect, but we capture that there simply to perform the unbind...	WITHOUT_CLASSIFICATION	0.9963881755612938	WITHOUT_CLASSIFICATION	0.00361182443870616	DESIGN
The default SQLExceptionConverter for all dialects is based on SQLState since SQLErrorCode is extremely vendor-specific. Specific Dialects may override to return whatever is most appropriate for that vendor.	WITHOUT_CLASSIFICATION	0.9979012311197212	WITHOUT_CLASSIFICATION	0.0020987688802787874	DESIGN
only necessary for postgre < 7.4 http:anoncvs.postgresql.org/cvsweb.cgi/pgsql/doc/src/sgml/ref/create_sequence.sgml	WITHOUT_CLASSIFICATION	0.994679606295685	WITHOUT_CLASSIFICATION	0.0053203937043150035	DESIGN
select topic, syntax from information_schema.help where section like 'Function%' order by section, topic see also -> http:www.h2database.com/html/functions.html	WITHOUT_CLASSIFICATION	0.9911754329100244	WITHOUT_CLASSIFICATION	0.008824567089975692	DESIGN
registerColumnType(Types.VARBINARY, "CHARACTER($l)"); registerColumnType(Types.BLOB, "CHARACTER($l)" ); For use prior to CP 11.0 registerColumnType(Types.CLOB, "CHARACTER($l)" );	WITHOUT_CLASSIFICATION	0.9994811978817172	WITHOUT_CLASSIFICATION	5.188021182827503E-4	DESIGN
the BLOB type requires a size arguement - this defaults to bytes - no arg defaults to 1 whole byte! other argument mods include K - kilobyte, M - megabyte, G - gigabyte. refer to the PBdevelopers guide for more info.	WITHOUT_CLASSIFICATION	0.9524909379525636	WITHOUT_CLASSIFICATION	0.04750906204743637	DESIGN
We must return a valid RDMS/RSA command from this method to prevent RDMS/RSA from issuing ERROR 400	WITHOUT_CLASSIFICATION	0.965629191907723	WITHOUT_CLASSIFICATION	0.034370808092277015	DESIGN
Oracle driver reports to support getGeneratedKeys(), but they only support the version taking an array of the names of the columns to be returned (via its RETURNING clause). No other driver seems to support this overloaded version.	WITHOUT_CLASSIFICATION	0.9986367446133679	WITHOUT_CLASSIFICATION	0.001363255386632152	DESIGN
add the comment nest the main query in an outer select add the rownnumber bit into the outer query select list	WITHOUT_CLASSIFICATION	0.9999734066106207	WITHOUT_CLASSIFICATION	2.659338937921249E-5	DESIGN
You may still have other ResultSets or update counts left to process here but you can't do it now or the ResultSet you just got will be closed	WITHOUT_CLASSIFICATION	0.9999962022840315	WITHOUT_CLASSIFICATION	3.797715968329022E-6	DESIGN
Note: For object <-> SQL datatype mappings see: Configuration Manager | Advanced | SQL | System DDL Datatype Mappings TBDregisterColumnType(Types.BINARY, "binary($1)"); changed 08-11-2005, jsl	WITHOUT_CLASSIFICATION	0.9999128181242581	WITHOUT_CLASSIFICATION	8.718187574186268E-5	DESIGN
TRIM(end_keyword string-expression-1 FROM string-expression-2) use Hibernate implementation "From" is one of the parameters they pass in position ?3 registerFunction( "trim", new SQLFunctionTemplate(Hibernate.STRING, "trim(?1 ?2 from ?3)") );	WITHOUT_CLASSIFICATION	0.9971616147855478	WITHOUT_CLASSIFICATION	0.0028383852144521914	DESIGN
Whether this dialect has an Identity clause added to the data type or a completely seperate identity data type	WITHOUT_CLASSIFICATION	0.9987814228844494	WITHOUT_CLASSIFICATION	0.0012185771155505882	DESIGN
According to both the ANSI-SQL and JPA specs, trim takes a variable number of parameters between 1 and 4. at least one paramer (trimSource) is required. From the SQL spec: <trim function> ::= TRIM <left paren> <trim operands> <right paren> <trim operands> ::= [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> <trim specification> ::= LEADING | TRAILING | BOTH If <trim specification> is omitted, BOTH is assumed. If <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9987664958705689	WITHOUT_CLASSIFICATION	0.0012335041294311785	DESIGN
/ Prepare persisters and link them up with their cache region/access-strategy	WITHOUT_CLASSIFICATION	0.9994510215053305	WITHOUT_CLASSIFICATION	5.489784946695621E-4	DESIGN
Named Queries:	WITHOUT_CLASSIFICATION	0.9999530626110165	WITHOUT_CLASSIFICATION	4.693738898349722E-5	DESIGN
this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9976658653625365	WITHOUT_CLASSIFICATION	0.002334134637463422	DESIGN
does not handle arrays (thats ok, cos they can't be lazy) or newly instantiated collections, so we can do the cast	WITHOUT_CLASSIFICATION	0.9910925654833711	WITHOUT_CLASSIFICATION	0.008907434516628928	DESIGN
collection deletions are a special case since update() can add deletions of collections not loaded by the session.	WITHOUT_CLASSIFICATION	0.9999668386294063	WITHOUT_CLASSIFICATION	3.316137059373073E-5	DESIGN
we can do the cast since orphan-delete does not apply to: 1. newly instantiated collections 2. arrays (we can't track orphans for detached arrays)	WITHOUT_CLASSIFICATION	0.9992006710841388	WITHOUT_CLASSIFICATION	7.993289158611563E-4	DESIGN
if the natural-id is marked as non-mutable, it is not retrieved during a normal database-snapshot operation...	WITHOUT_CLASSIFICATION	0.9995798890075943	WITHOUT_CLASSIFICATION	4.201109924057785E-4	DESIGN
watch out for a case where old is still referenced somewhere in the object graph! (which is a user error)	WITHOUT_CLASSIFICATION	0.9989326548168626	WITHOUT_CLASSIFICATION	0.0010673451831374596	DESIGN
slice, to get the columns for this component property	WITHOUT_CLASSIFICATION	0.9994336836343187	WITHOUT_CLASSIFICATION	5.663163656812139E-4	DESIGN
int result = 17; result = 37 result + type.hashCode(); result = 37 result + ( value==null ? 0 : value.hashCode() ); return result;	WITHOUT_CLASSIFICATION	0.9998710122329678	WITHOUT_CLASSIFICATION	1.289877670322663E-4	DESIGN
The CollectionEntry.isReached() stuff is just to detect any silly users who set up circular or shared references between/to collections.	WITHOUT_CLASSIFICATION	0.9985194111635423	WITHOUT_CLASSIFICATION	0.0014805888364577543	DESIGN
detached collection wrappers that get found + reattached during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9977546899452625	WITHOUT_CLASSIFICATION	0.002245310054737412	DESIGN
The unique property value represented here may or may not be serializable, so we do an explicit check here in order to generate a better error message	WITHOUT_CLASSIFICATION	0.9881830686711292	WITHOUT_CLASSIFICATION	0.01181693132887089	DESIGN
if the version of a newly instantiated object is not the same as the version seed value, use that as the unsaved-value	WITHOUT_CLASSIFICATION	0.9939044600229827	WITHOUT_CLASSIFICATION	0.006095539977017207	DESIGN
ie. we never have to null out a reference to an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9998363089726472	WITHOUT_CLASSIFICATION	1.6369102735282458E-4	DESIGN
ignore this row, the collection is in process of being loaded somewhere further "up" the stack	WITHOUT_CLASSIFICATION	0.9960217082059573	WITHOUT_CLASSIFICATION	0.003978291794042716	DESIGN
Entity load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ currently, not yet used...	WITHOUT_CLASSIFICATION	0.9998438888813013	WITHOUT_CLASSIFICATION	1.5611111869864944E-4	DESIGN
should be ok performance-wise to generate new delegate instances for each request since these are locally stack-scoped. Besides, it makes the code much easier to read than the old TransactionHelper stuff...	WITHOUT_CLASSIFICATION	0.9895278181588444	WITHOUT_CLASSIFICATION	0.010472181841155639	DESIGN
this implementation is supposed to tolerate incorrect unsaved-value mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9946937765810023	WITHOUT_CLASSIFICATION	0.005306223418997713	DESIGN
this implementation is supposed to tolerate incorrect unsaved-value mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9946937765810023	WITHOUT_CLASSIFICATION	0.005306223418997713	DESIGN
wrap up any new collections directly referenced by the object or its components	WITHOUT_CLASSIFICATION	0.9992850262613107	WITHOUT_CLASSIFICATION	7.149737386892768E-4	DESIGN
remove any snapshot, not really for memory management purposes, but rather because it might now be stale, and there is no longer any EntityEntry to take precedence This is now handled by removeEntity() session.getPersistenceContext().removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9953287210991588	WITHOUT_CLASSIFICATION	0.004671278900841172	DESIGN
skip this check for composite-ids relating to dom4j entity-mode; alternatively, we could add a check to make sure the incoming id value is an instance of Element...	WITHOUT_CLASSIFICATION	0.9986731723095681	WITHOUT_CLASSIFICATION	0.0013268276904319389	DESIGN
upgrade the lock if necessary: lock(result, lockMode);	WITHOUT_CLASSIFICATION	0.9995781982258375	WITHOUT_CLASSIFICATION	4.21801774162509E-4	DESIGN
now, any collections that are initialized inside this block do not get updated - they are ignored until the next flush	WITHOUT_CLASSIFICATION	0.9982718096399755	WITHOUT_CLASSIFICATION	0.0017281903600245823	DESIGN
we must clone embedded composite identifiers, or we will get back the same instance that we pass in	WITHOUT_CLASSIFICATION	0.9998558970820165	WITHOUT_CLASSIFICATION	1.4410291798340369E-4	DESIGN
Sub-insertions should occur before containing insertion so Try to do the callback now	WITHOUT_CLASSIFICATION	0.9978001532352441	WITHOUT_CLASSIFICATION	0.002199846764755962	DESIGN
the entity is not associated with the session, so try interceptor and unsaved-value	WITHOUT_CLASSIFICATION	0.9998879922301365	WITHOUT_CLASSIFICATION	1.1200776986352338E-4	DESIGN
scan the query string for class names appearing in the from clause and replace with all persistent implementors of the class/interface, returning multiple query strings (make sure we don't pick up a class in the select clause!)	WITHOUT_CLASSIFICATION	0.9826338250379824	WITHOUT_CLASSIFICATION	0.017366174962017696	DESIGN
save() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994397642752887	WITHOUT_CLASSIFICATION	5.602357247113082E-4	DESIGN
evict() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994397642752887	WITHOUT_CLASSIFICATION	5.602357247113082E-4	DESIGN
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9724089056896512	WITHOUT_CLASSIFICATION	0.02759109431034878	DESIGN
if it is an uninitialized proxy, pointing with this session, then when it is accessed, the underlying instance will be "contained"	WITHOUT_CLASSIFICATION	0.999458825218924	WITHOUT_CLASSIFICATION	5.411747810758681E-4	DESIGN
Generate an explicit join for the root dot node. The implied joins will be collected and passed up to the root dot node.	WITHOUT_CLASSIFICATION	0.9997570803247551	WITHOUT_CLASSIFICATION	2.429196752448666E-4	DESIGN
A session is considered to contain an entity only if the entity has an entry in the session's persistence context and the entry reports that the entity has not been removed	WITHOUT_CLASSIFICATION	0.9991990482922187	WITHOUT_CLASSIFICATION	8.009517077814006E-4	DESIGN
Does the collection referenced by this FromElement specify an order-by attribute? If so, attach it to the query's order-by	WITHOUT_CLASSIFICATION	0.9963148010904168	WITHOUT_CLASSIFICATION	0.003685198909583149	DESIGN
... and the token could be an identifer and the error is a mismatched token error ...	WITHOUT_CLASSIFICATION	0.9988408838080034	WITHOUT_CLASSIFICATION	0.0011591161919965417	DESIGN
If a where clause was specified in the update/delete query, use it to limit the returned ids here...	WITHOUT_CLASSIFICATION	0.9983853000676739	WITHOUT_CLASSIFICATION	0.0016146999323259845	DESIGN
int parameterStart = getWalker().getNumberOfParametersInSetClause(); List allParams = getIdSelectParameterSpecifications(); Iterator whereParams = allParams.subList( parameterStart, allParams.size() ).iterator();	WITHOUT_CLASSIFICATION	0.9998862217737676	WITHOUT_CLASSIFICATION	1.1377822623236937E-4	DESIGN
Default implementation: If this node has a data type, and that data type is not an association, then this is scalar.	WITHOUT_CLASSIFICATION	0.9965694775752194	WITHOUT_CLASSIFICATION	0.0034305224247804726	DESIGN
Resolve the LHS fully, generate implicit joins. Pass in the property name so that the resolver can discover foreign key (id) properties.	WITHOUT_CLASSIFICATION	0.9997551775912414	WITHOUT_CLASSIFICATION	2.4482240875855663E-4	DESIGN
If the propertyType is null and there isn't a parent, just stop now... there was a problem resolving the node anyway.	WITHOUT_CLASSIFICATION	0.9997830091158028	WITHOUT_CLASSIFICATION	2.1699088419723978E-4	DESIGN
We do not look for an existing join on the same path, because it makes sense to join twice on the same collection role	WITHOUT_CLASSIFICATION	0.9820314209479707	WITHOUT_CLASSIFICATION	0.01796857905202928	DESIGN
our parent is another dot node, meaning we are being further dereferenced. thus we need to generate a join unless the parent refers to the associated entity's PK (because 'our' table would know the FK).	WITHOUT_CLASSIFICATION	0.9976285276267108	WITHOUT_CLASSIFICATION	0.002371472373289162	DESIGN
public final Currency getCurrency(int col) throws HibernateException {return (Currency) get(col);}	WITHOUT_CLASSIFICATION	0.9990024078825077	WITHOUT_CLASSIFICATION	9.975921174921948E-4	DESIGN
here, we have two possibilities: 1) the property-name matches the explicitly identifier property name 2) the property-name matches the implicit 'id' property name	WITHOUT_CLASSIFICATION	0.9999272104128483	WITHOUT_CLASSIFICATION	7.278958715173894E-5	DESIGN
Set the unresolved path in this node and the parent. Set the text for the parent.	WITHOUT_CLASSIFICATION	0.9992949011106231	WITHOUT_CLASSIFICATION	7.050988893767616E-4	DESIGN
Get the first child to be considered. Sub-classes may do this differently in order to skip nodes that are not select expressions (e.g. DISTINCT).	WITHOUT_CLASSIFICATION	0.9995899548211856	WITHOUT_CLASSIFICATION	4.10045178814465E-4	DESIGN
If this is an entity and the property is the identifier property, then use getIdentifierType(). Note that the propertyName.equals( propertyPath ) checks whether we have a component key reference, where the component class property name is the same as the entity id property name; if the two are not equal, this is the case and we'd need to "fall through" to using the property mapping.	WITHOUT_CLASSIFICATION	0.998392378886379	WITHOUT_CLASSIFICATION	0.0016076211136209614	DESIGN
for a subquery, the alias to use depends on a few things (we already know this is not an overall SELECT): 1) if this FROM_ELEMENT represents a correlation to the outer-most query A) if the outer query represents a multi-table persister, we need to use the given alias in anticipation of one of the multi-table executors being used (as this subquery will actually be used in the "id select" phase of that multi-table executor) B) otherwise, we need to use the persister's table name as the column qualification 2) otherwise (not correlated), use the given alias	WITHOUT_CLASSIFICATION	0.961485728237661	WITHOUT_CLASSIFICATION	0.038514271762339125	DESIGN
Not a collection? Return the entity property mapping.	WITHOUT_CLASSIFICATION	0.9998919789884485	WITHOUT_CLASSIFICATION	1.0802101155148763E-4	DESIGN
collection of <many-to-any/> mappings... used to circumvent the component-collection check below...	WITHOUT_CLASSIFICATION	0.9989545472187393	WITHOUT_CLASSIFICATION	0.0010454527812606982	DESIGN
Otherwise, the destination node was implied by the FROM clause and the FROM clause processor will automatically add it in the right place.	WITHOUT_CLASSIFICATION	0.9974450727291911	WITHOUT_CLASSIFICATION	0.0025549272708089593	DESIGN
If the first identifier in the path referrs to the class alias (not the class name), then this is a correlated subselect. If it's a correlated sub-select, use the existing table alias. Otherwise generate a new one.	WITHOUT_CLASSIFICATION	0.9996045991925477	WITHOUT_CLASSIFICATION	3.954008074522402E-4	DESIGN
check to see if our "propPath" actually represents a property on the persister	WITHOUT_CLASSIFICATION	0.9990206683397139	WITHOUT_CLASSIFICATION	9.793316602860708E-4	DESIGN
An ident node can represent an index expression if the ident represents a naked property ref Note: this makes the assumption (which is currently the case in the hql-sql grammar) that the ident is first resolved itself (addrExpr -> resolve()). The other option, if that changes, is to call resolve from here; but it is currently un-needed overhead.	WITHOUT_CLASSIFICATION	0.9998798874710606	WITHOUT_CLASSIFICATION	1.2011252893928856E-4	DESIGN
This uses a PathExpressionParser but notice that compound paths are not valid, only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9734343542522023	WITHOUT_CLASSIFICATION	0.026565645747797694	DESIGN
If this is an implied join in a FROM clause, then use ANSI-style joining, and set the flag on the FromElement that indicates that it was implied in the FROM clause itself.	WITHOUT_CLASSIFICATION	0.9960106819172198	WITHOUT_CLASSIFICATION	0.003989318082780169	DESIGN
origin.addDestination(destination); Add the query spaces.	WITHOUT_CLASSIFICATION	0.9999140570680766	WITHOUT_CLASSIFICATION	8.594293192339777E-5	DESIGN
For an explicit many-to-many relationship, add a second join from the intermediate (many-to-many) table to the destination table. Also, make sure that the from element's idea of the destination is the destination table.	WITHOUT_CLASSIFICATION	0.9998376728517459	WITHOUT_CLASSIFICATION	1.6232714825420097E-4	DESIGN
Reset the node type, because the rest of the system is expecting FROM_FRAGMENT, all we wanted was for the factory to create the right sub-class. This might get reset again later on anyway to make the SQL generation simpler.	WITHOUT_CLASSIFICATION	0.7994499363341536	DESIGN	0.20055006366584632	WITHOUT_CLASSIFICATION
explicit = true; This is an explict Select. ArrayList sqlResultTypeList = new ArrayList();	WITHOUT_CLASSIFICATION	0.9995455759091817	WITHOUT_CLASSIFICATION	4.5442409081826836E-4	DESIGN
sqlResultTypeList.add( type ); Generate the select expression.	WITHOUT_CLASSIFICATION	0.9989892700535061	WITHOUT_CLASSIFICATION	0.001010729946493772	DESIGN
If the expression list has exactly one expression, and the type of the expression is a collection then this might be a collection function, such as index(c) or size(c).	WITHOUT_CLASSIFICATION	0.9776945310790497	WITHOUT_CLASSIFICATION	0.022305468920950297	DESIGN
Need to parse off the column qualifiers; this is assuming (which is true as of now) that this is only used from update and delete HQL statement parsing	WITHOUT_CLASSIFICATION	0.9995979538767479	WITHOUT_CLASSIFICATION	4.0204612325206814E-4	DESIGN
for regression testing against output from the old parser... found it easiest to simply reorder the FromElements here into ascending order in terms of injecting them into the resulting sql ast in orders relative to those expected by the old parser; this is definitely another of those "only needed for regression purposes". The SyntheticAndFactory, then, simply injects them as it encounters them.	WITHOUT_CLASSIFICATION	0.993899182141404	WITHOUT_CLASSIFICATION	0.006100817858595969	DESIGN
The uber-rule here is that we need to include subclass joins if the FromElement is in any way dereferenced by a property from the subclass table; otherwise we end up with column references qualified by a non-existent table reference in the resulting SQL...	WITHOUT_CLASSIFICATION	0.9854458160726544	WITHOUT_CLASSIFICATION	0.014554183927345676	DESIGN
classic translator does not support collection of ordinal param metadata	WITHOUT_CLASSIFICATION	0.9906540292406967	WITHOUT_CLASSIFICATION	0.009345970759303296	DESIGN
The following variables are stacks that keep information about each subexpression in the list of nested subexpressions we are currently processing.	WITHOUT_CLASSIFICATION	0.994544502883525	WITHOUT_CLASSIFICATION	0.005455497116474985	DESIGN
The loop ensures atomicity of the select + update even for no transaction or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999900578769435	WITHOUT_CLASSIFICATION	9.94212305647104E-6	DESIGN
should not be able to reach last without maxPosition being set unless there are no results	WITHOUT_CLASSIFICATION	0.9992037378839699	WITHOUT_CLASSIFICATION	7.962621160300217E-4	DESIGN
we found it in the temp PC. Should indicate we are in the midst of processing a result set containing eager fetches via join fetch	WITHOUT_CLASSIFICATION	0.9976478313011704	WITHOUT_CLASSIFICATION	0.0023521686988296243	DESIGN
do not use proxiesByKey, since not all proxies that point to this session's instances are in that collection!	WITHOUT_CLASSIFICATION	0.998458602649809	WITHOUT_CLASSIFICATION	0.0015413973501909864	DESIGN
if there is no TM configured, we will not be able to access the javax.transaction.Transaction object in order to register a synch anyway.	WITHOUT_CLASSIFICATION	0.9950966986044285	WITHOUT_CLASSIFICATION	0.004903301395571498	DESIGN
Since the result set cursor is always left at the first physical row after the "last processed", we need to jump back one position to get the key value we are interested in skipping	WITHOUT_CLASSIFICATION	0.9980125826969116	WITHOUT_CLASSIFICATION	0.0019874173030884623	DESIGN
true if this is a query and we are loading multiple instances of the same collection role otherwise this is a CollectionInitializer and we are loading up a single collection or batch	WITHOUT_CLASSIFICATION	0.8923235071857417	WITHOUT_CLASSIFICATION	0.10767649281425827	DESIGN
we don't need to worry about existing version being uninitialized because this block isn't called by a re-entrant load (re-entrant loads _always_ have lock mode NONE)	WITHOUT_CLASSIFICATION	0.9332883335493108	WITHOUT_CLASSIFICATION	0.06671166645068924	DESIGN
add temp entry so that the next step is circular-reference safe - only needed because some types don't take proper advantage of two-phase-load (esp. components)	WITHOUT_CLASSIFICATION	0.9992580191143697	WITHOUT_CLASSIFICATION	7.419808856302896E-4	DESIGN
assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9976499525251158	WITHOUT_CLASSIFICATION	0.002350047474884223	DESIGN
log a message about potential connection leaks	WITHOUT_CLASSIFICATION	0.9972312827819866	WITHOUT_CLASSIFICATION	0.0027687172180134913	DESIGN
ps.close(); just close it; do NOT try to return it to the pool! NOTE: early exit!	WITHOUT_CLASSIFICATION	0.9999244522401937	WITHOUT_CLASSIFICATION	7.554775980631605E-5	DESIGN
this has been shown to happen occasionally in rare cases when using a transaction manager + transaction-timeout where the timeout calls back through Hibernate's registered transaction synchronization on a separate "reaping" thread. In cases where that reaping thread executes through this block at the same time the main application thread does we can get into situations where these CMEs occur. And though it is not "allowed" per-se, the end result without handling it specifically is infinite looping. So here, we simply break the loop	WITHOUT_CLASSIFICATION	0.9203195001274018	WITHOUT_CLASSIFICATION	0.07968049987259813	DESIGN
unfortunately this stuff can't be cached because it is per-invocation, not constant for the QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9936192249301466	WITHOUT_CLASSIFICATION	0.006380775069853416	DESIGN
can't cache this stuff either (per-invocation) we are given a map of user-alias -> lock mode create a new map of sql-alias -> lock mode	WITHOUT_CLASSIFICATION	0.9942117861516708	WITHOUT_CLASSIFICATION	0.005788213848329181	DESIGN
don't create a unique key, 'cos some databases don't like a UK on nullable columns getCollectionTable().createUniqueKey( getIdentifier().getConstraintColumns() );	WITHOUT_CLASSIFICATION	0.9948468551270766	WITHOUT_CLASSIFICATION	0.005153144872923372	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9968710422582444	WITHOUT_CLASSIFICATION	0.003128957741755498	DESIGN
isSet = collection.isSet(); isSorted = collection.isSorted();	WITHOUT_CLASSIFICATION	0.999921261100112	WITHOUT_CLASSIFICATION	7.873889988796204E-5	DESIGN
lists, arrays sets, maps, bags	WITHOUT_CLASSIFICATION	0.9999801683063972	WITHOUT_CLASSIFICATION	1.9831693602658788E-5	DESIGN
we finish all the "removes" first to take care of possible unique constraints and so that we can take better advantage of batching	WITHOUT_CLASSIFICATION	0.9985840326752475	WITHOUT_CLASSIFICATION	0.0014159673247524298	DESIGN
use a combination of foreign key columns and pk columns, since the ordering of removal and addition is not guaranteed when a child moves from one parent to another	WITHOUT_CLASSIFICATION	0.9997813357128829	WITHOUT_CLASSIFICATION	2.1866428711713603E-4	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9968710422582444	WITHOUT_CLASSIFICATION	0.003128957741755498	DESIGN
information about properties of this class, including inherited properties (only really needed for updatable/insertable properties)	WITHOUT_CLASSIFICATION	0.9987953225111413	WITHOUT_CLASSIFICATION	0.0012046774888586989	DESIGN
all this only really needs to consider properties of this class, not its subclasses, but since we are reusing code used for sequential selects, we use the subclass closure	WITHOUT_CLASSIFICATION	0.9818874759585252	WITHOUT_CLASSIFICATION	0.01811252404147475	DESIGN
Here we render the select column list based on the properties defined as being generated. For partial component generation, we currently just re-select the whole component rather than trying to handle the individual generated portions.	WITHOUT_CLASSIFICATION	0.9994933756901382	WITHOUT_CLASSIFICATION	5.066243098619049E-4	DESIGN
this is the root (versioned) table, and we are using version-based optimistic locking; if we are not updating the version, also don't check it (unless this is a "generated" version column)!	WITHOUT_CLASSIFICATION	0.9990728111577764	WITHOUT_CLASSIFICATION	9.271888422235377E-4	DESIGN
optimistic-lock="all", include all updatable properties optimistic-lock="dirty", include all properties we are updating this time	WITHOUT_CLASSIFICATION	0.9960948266224862	WITHOUT_CLASSIFICATION	0.0039051733775138995	DESIGN
this property belongs to the table, and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9956626896542363	WITHOUT_CLASSIFICATION	0.004337310345763673	DESIGN
check to see if the connection is in auto-commit mode (no connection means aggressive connection release outside a JTA transaction context, so MUST be autocommit mode)	WITHOUT_CLASSIFICATION	0.9894187627389555	WITHOUT_CLASSIFICATION	0.01058123726104456	DESIGN
need to treat this as if it where optimistic-lock="all" (dirty does not make sense); first we need to locate the "loaded" state Note, it potentially could be a proxy, so perform the location the safe way...	WITHOUT_CLASSIFICATION	0.9513354975680332	WITHOUT_CLASSIFICATION	0.048664502431966794	DESIGN
we always assume an instance with a null identifier or no identifier property is unsaved!	WITHOUT_CLASSIFICATION	0.9954463472316368	WITHOUT_CLASSIFICATION	0.0045536527683631665	DESIGN
Need to use the identifier type of the collection owner since the incoming is value is actually the owner's id. Using the collection's key type causes problems with property-ref keys...	WITHOUT_CLASSIFICATION	0.9930314085763609	WITHOUT_CLASSIFICATION	0.006968591423639163	DESIGN
allow any identifier quoted with backtick only recognizes identifiers beginning with a letter	WITHOUT_CLASSIFICATION	0.9973433180762259	WITHOUT_CLASSIFICATION	0.0026566819237741094	DESIGN
following doesn't handle (null, not null) but unnecessary since this would mean all rows	WITHOUT_CLASSIFICATION	0.999849849131825	WITHOUT_CLASSIFICATION	1.501508681751456E-4	DESIGN
IMPL NOTE : due to the delayed population of setters (setters cached for performance), we really cannot pro0perly define equality for this transformer	WITHOUT_CLASSIFICATION	0.9979694482720283	WITHOUT_CLASSIFICATION	0.002030551727971696	DESIGN
we need to dirty check collections, since they can cause an owner version number increment	WITHOUT_CLASSIFICATION	0.9992282910541564	WITHOUT_CLASSIFICATION	7.717089458435534E-4	DESIGN
return the id, so we can use it to reset the proxy id return result;	WITHOUT_CLASSIFICATION	0.9997411929922919	WITHOUT_CLASSIFICATION	2.588070077081344E-4	DESIGN
optimizer = getFactory().getSettings().getBytecodeProvider().getReflectionOptimizer( mappedClass, getterNames, setterNames, propTypes );	WITHOUT_CLASSIFICATION	0.999921261100112	WITHOUT_CLASSIFICATION	7.873889988796204E-5	DESIGN
cache the actual id of the object, not the value of the property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9994877076794536	WITHOUT_CLASSIFICATION	5.122923205464036E-4	DESIGN
We now have the value of the property-ref we reference. However, we need to dig a little deeper, as that property might also be an entity type, in which case we need to resolve its identitifier	WITHOUT_CLASSIFICATION	0.9999317476212335	WITHOUT_CLASSIFICATION	6.825237876653425E-5	DESIGN
Retrieve the value of the designated column in the current row of this ResultSet object as a java.io.Reader object	WITHOUT_CLASSIFICATION	0.9984265410967784	WITHOUT_CLASSIFICATION	0.0015734589032215418	DESIGN
not absolutely necessary, but helps for some equals()/hashCode() implementations	WITHOUT_CLASSIFICATION	0.9997164100271466	WITHOUT_CLASSIFICATION	2.835899728534257E-4	DESIGN
this should be a call to resolve(), not resolveIdentifier(), 'cos it might be a property-ref, and we did not cache the referenced value	WITHOUT_CLASSIFICATION	0.9330605748918638	WITHOUT_CLASSIFICATION	0.0669394251081361	DESIGN
If we have <tt>not-found="ignore"</tt> association mapped to a formula, we always need to dirty check it, so we can update the second-level cache	WITHOUT_CLASSIFICATION	0.9999241480885427	WITHOUT_CLASSIFICATION	7.585191145733211E-5	DESIGN
can't just return null here, since that would cause an owning component to become null	WITHOUT_CLASSIFICATION	0.9982098046723156	WITHOUT_CLASSIFICATION	0.001790195327684396	DESIGN
for arrays, replaceElements() may return a different reference, since the array length might not match	WITHOUT_CLASSIFICATION	0.9998595948116438	WITHOUT_CLASSIFICATION	1.4040518835624956E-4	DESIGN
actual cache of the entries. soft references are used for both the keys and the values here since the values pertaining to the MRU entries are kept in a seperate hard reference cache (to avoid their enqueuement/garbage-collection).	WITHOUT_CLASSIFICATION	0.9997630702448015	WITHOUT_CLASSIFICATION	2.3692975519852994E-4	DESIGN
as soon as we encounter our first letter, return the substring from that position	WITHOUT_CLASSIFICATION	0.9992530005945272	WITHOUT_CLASSIFICATION	7.469994054729566E-4	DESIGN
Note : expected in the syntax: type=listenerClass ({sep}type=listenerClass) where {sep} is any whitespace or comma	WITHOUT_CLASSIFICATION	0.9986769042757214	WITHOUT_CLASSIFICATION	0.001323095724278605	DESIGN
isTransactionCallbackRegistered denotes whether any Hibernate Transaction has registered as a callback against this JDBCContext; only one such callback is allowed. Directly serializing this value causes problems with JDBCTransaction, or really any Transaction impl where the callback is local to the Transaction instance itself, since that Transaction is not serialized along with the JDBCContext. Thus we handle that fact here explicitly...	WITHOUT_CLASSIFICATION	0.9214939281883793	WITHOUT_CLASSIFICATION	0.07850607181162067	DESIGN
note that for sequential scrolling, we make the assumption that the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9775206452960126	WITHOUT_CLASSIFICATION	0.022479354703987455	DESIGN
We call getKeyFromResultSet() here so that we can know the key value upon which to perform the breaking logic. However, it is also then called from getRowFromResultSet() which is certainly not the most efficient. But the call here is needed, and there currently is no other way without refactoring of the doQuery()/getRowFromResultSet() methods	WITHOUT_CLASSIFICATION	0.9993635067975379	WITHOUT_CLASSIFICATION	6.364932024620161E-4	DESIGN
This check is needed since processing leaves the cursor after the last physical row for the current logical row; thus if we are after the last physical row, this might be caused by either: 1) scrolling to the last logical row 2) scrolling past the last logical row In the latter scenario, the previous logical row really is the last logical row. In all other cases, we should process back two logical records (the current logic row, plus the previous logical row).	WITHOUT_CLASSIFICATION	0.6820901920545753	DESIGN	0.31790980794542456	WITHOUT_CLASSIFICATION
and perform the load	WITHOUT_CLASSIFICATION	0.9999753510305055	WITHOUT_CLASSIFICATION	2.4648969494421384E-5	DESIGN
important: reuse the same event instances for performance!	WITHOUT_CLASSIFICATION	0.999455745274714	WITHOUT_CLASSIFICATION	5.442547252859751E-4	DESIGN
this is a query and we are loading multiple instances of the same collection role	WITHOUT_CLASSIFICATION	0.9143124199294439	WITHOUT_CLASSIFICATION	0.08568758007055605	DESIGN
we found a collection element in the result set	WITHOUT_CLASSIFICATION	0.9918955725740752	WITHOUT_CLASSIFICATION	0.00810442742592474	DESIGN
we did not find a collection element in the result set, so we ensure that a collection is created with the owner's identifier, since what we have is an empty collection	WITHOUT_CLASSIFICATION	0.9997149339902633	WITHOUT_CLASSIFICATION	2.8506600973669067E-4	DESIGN
this is a collection initializer, so we must create a collection for each of the passed-in keys, to account for the possibility that the collection is empty and has no rows in the result set	WITHOUT_CLASSIFICATION	0.9302748825306292	WITHOUT_CLASSIFICATION	0.06972511746937084	DESIGN
grab its state from the ResultSet and keep it in the Session (but don't yet initialize the object itself) note that we acquire LockMode.READ even if it was not requested	WITHOUT_CLASSIFICATION	0.9994199692677371	WITHOUT_CLASSIFICATION	5.800307322628937E-4	DESIGN
a many-to-many; decrement currentDepth here to allow join across the association table without exceeding MAX_FETCH_DEPTH (i.e. the "currentDepth - 1" bit)	WITHOUT_CLASSIFICATION	0.9798887375639009	WITHOUT_CLASSIFICATION	0.020111262436099092	DESIGN
if not a composite key, use "foo in (?, ?, ?)" for batching if no batch, and not a composite key, use "foo = ?"	WITHOUT_CLASSIFICATION	0.9996567503087166	WITHOUT_CLASSIFICATION	3.432496912834237E-4	DESIGN
the user visible aliases, which are unknown to the superclass, these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999427309126792	WITHOUT_CLASSIFICATION	5.726908732083782E-5	DESIGN
first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9975145664074739	WITHOUT_CLASSIFICATION	0.0024854335925261067	DESIGN
first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9975145664074739	WITHOUT_CLASSIFICATION	0.0024854335925261067	DESIGN
it does not refer to an alias of a projection, look for a property	WITHOUT_CLASSIFICATION	0.997801209631337	WITHOUT_CLASSIFICATION	0.0021987903686629794	DESIGN
determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.99955243850067	WITHOUT_CLASSIFICATION	4.4756149933003193E-4	DESIGN
Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.999234302444079	WITHOUT_CLASSIFICATION	7.656975559210926E-4	DESIGN
Translates an AST join type (i.e., the token type) into a JoinFragment.XXX join type. @param astJoinType The AST join type (from HqlSqlTokenTypes or SqlTokenTypes) @return a JoinFragment.XXX join type. @see JoinFragment @see SqlTokenTypes	WITHOUT_CLASSIFICATION	0.9926873666798616	WITHOUT_CLASSIFICATION	0.007312633320138459	DESIGN
ignore	WITHOUT_CLASSIFICATION	0.9998571141915925	WITHOUT_CLASSIFICATION	1.4288580840761378E-4	DESIGN
ignore	WITHOUT_CLASSIFICATION	0.9998571141915925	WITHOUT_CLASSIFICATION	1.4288580840761378E-4	DESIGN
}	WITHOUT_CLASSIFICATION	0.999920350576358	WITHOUT_CLASSIFICATION	7.964942364203387E-5	DESIGN
public List getCollectionAliases() { return collectionAliases; } public List getCollectionOwners() { return collectionOwners; } public List getCollectionOwnerAliases() { return collectionOwnerAliases; } public List getCollectionPersisters() { return collectionPersisters; } public Map getAlias2Persister() { return alias2Persister; } public boolean isCollectionInitializer() { return isCollectionInitializer; } public List getPersisters() { return persisters; } public Map getAlias2OwnerAlias() { return alias2OwnerAlias; } public List getScalarTypes() { return scalarTypes; } public List getScalarColumnAliases() { return scalarColumnAliases; } public List getPropertyResults() { return propertyResults; } public List getCollectionPropertyResults() { return collectionResults; } public Map getAlias2Return() { return alias2Return; }	WITHOUT_CLASSIFICATION	0.9996709650034676	WITHOUT_CLASSIFICATION	3.2903499653241125E-4	DESIGN
SQLQueryParser parser = new SQLQueryParser( sqlQuery, processor.getAlias2Persister(), processor.getAlias2Return(), aliases, collAliases, collPersisters, suffixes, collSuffixes ); sql = parser.process(); namedParameterBindPoints = parser.getNamedParameters();	WITHOUT_CLASSIFICATION	0.999927916276019	WITHOUT_CLASSIFICATION	7.208372398111046E-5	DESIGN
include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9998960151568158	WITHOUT_CLASSIFICATION	1.039848431842777E-4	DESIGN
sqlAliasSuffixes[i] = element.getColumnAliasSuffix();	WITHOUT_CLASSIFICATION	0.999921261100112	WITHOUT_CLASSIFICATION	7.873889988796204E-5	DESIGN
NONE, because its the requested lock mode, not the actual!	WITHOUT_CLASSIFICATION	0.9999091893848056	WITHOUT_CLASSIFICATION	9.081061519444104E-5	DESIGN
at this point we have (drivingSqlAlias) the SQL alias of the driving table corresponding to the given user alias. However, the driving table is not (necessarily) the table against which we want to apply locks. Mainly, the exception case here is joined-subclass hierarchies where we instead want to apply the lock against the root table (for all other strategies, it just happens that driving and root are the same).	WITHOUT_CLASSIFICATION	0.986344062980952	WITHOUT_CLASSIFICATION	0.013655937019047923	DESIGN
the column doesnt exist at all.	WITHOUT_CLASSIFICATION	0.9996313596947763	WITHOUT_CLASSIFICATION	3.6864030522365234E-4	DESIGN
we have a mapped identifier property and the root of the incoming property path matched that identifier property	WITHOUT_CLASSIFICATION	0.9996397538414225	WITHOUT_CLASSIFICATION	3.602461585775086E-4	DESIGN
we have an embedded composite identifier	WITHOUT_CLASSIFICATION	0.9995781631817116	WITHOUT_CLASSIFICATION	4.2183681828837763E-4	DESIGN
both many-to-one and one-to-one are represented as a Property. EntityPersister is relying on this value to determine "lazy fetch groups" in terms of field-level interception. So we need to make sure that we return true here for the case of many-to-one and one-to-one with lazy="no-proxy" impl note - lazy="no-proxy" currently forces both lazy and unwrap to be set to true. The other case we are extremely interested in here is that of lazy="proxy" where lazy is set to true, but unwrap is set to false. thus we use both here under the assumption that this return is really only ever used during persister construction to determine the lazy property/field fetch groupings. If that assertion changes then this check needs to change as well. Partially, this is an issue with the overloading of the term "lazy" here...	WITHOUT_CLASSIFICATION	0.9785754694667836	DESIGN	0.021424530533216298	WITHOUT_CLASSIFICATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9974221071535454	WITHOUT_CLASSIFICATION	0.0025778928464546217	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9974221071535454	WITHOUT_CLASSIFICATION	0.0025778928464546217	DESIGN
rootTableName = persistentClass.getRootTable().getQualifiedName( factory.getDialect(), factory.getDefaultCatalog(), factory.getDefaultSchema() );	WITHOUT_CLASSIFICATION	0.999921261100112	WITHOUT_CLASSIFICATION	7.873889988796204E-5	DESIGN
SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999113734108903	WITHOUT_CLASSIFICATION	8.862658910963415E-5	DESIGN
Custom sql	WITHOUT_CLASSIFICATION	0.9999114854582417	WITHOUT_CLASSIFICATION	8.851454175820687E-5	DESIGN
protected void initPropertyPaths(final String path,final Type type,final String[] columns,final String[] formulaTemplates,final Mapping factory)throws MappingException {addFormulaPropertyPath(path, type, formulaTemplates);initPropertyPaths(path, type, columns, formulaTemplates, factory);}	WITHOUT_CLASSIFICATION	0.9989811774037418	WITHOUT_CLASSIFICATION	0.00101882259625822	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994226996701397	WITHOUT_CLASSIFICATION	5.773003298601926E-4	DESIGN
Custom SQL (would be better if these were private)	WITHOUT_CLASSIFICATION	0.9985354748822914	WITHOUT_CLASSIFICATION	0.001464525117708656	DESIGN
moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9965718973719071	WITHOUT_CLASSIFICATION	0.0034281026280929194	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994226996701397	WITHOUT_CLASSIFICATION	5.773003298601926E-4	DESIGN
aliases for identifier ( alias.id ); skip if the entity defines a non-id property named 'id'	WITHOUT_CLASSIFICATION	0.9996930714852571	WITHOUT_CLASSIFICATION	3.0692851474286334E-4	DESIGN
decide which ResultSet to get the property value from:	WITHOUT_CLASSIFICATION	0.9998130167319081	WITHOUT_CLASSIFICATION	1.86983268091918E-4	DESIGN
note: it is conceptually possible that a UserType could map null to a non-null value, so the following is arguable:	WITHOUT_CLASSIFICATION	0.999877804270579	WITHOUT_CLASSIFICATION	1.221957294209242E-4	DESIGN
the contract of EntityTuplizer.determineConcreteSubclassEntityName says that returning null is an indication that the specified entity-name (this.getEntityName) should be used.	WITHOUT_CLASSIFICATION	0.9853631403945363	WITHOUT_CLASSIFICATION	0.014636859605463614	DESIGN
Need to use the identifier type of the collection owner since the incoming is value is actually the owner's id. Using the collection's key type causes problems with property-ref keys...	WITHOUT_CLASSIFICATION	0.9930314085763609	WITHOUT_CLASSIFICATION	0.006968591423639163	DESIGN
cache these since they are stateless this one could even be static...	WITHOUT_CLASSIFICATION	0.9987425924509888	WITHOUT_CLASSIFICATION	0.0012574075490111513	DESIGN
"as" is not in KEYWORDS	WITHOUT_CLASSIFICATION	0.9999351991940247	WITHOUT_CLASSIFICATION	6.480080597521416E-5	DESIGN
--Commented out by Inspection (12/4/04 9:10 AM): public abstract void addCondition(String alias, String[] columns, String condition);	WITHOUT_CLASSIFICATION	0.997843699474636	WITHOUT_CLASSIFICATION	0.002156300525363938	DESIGN
use the id column alias	WITHOUT_CLASSIFICATION	0.9999814290479797	WITHOUT_CLASSIFICATION	1.857095202027061E-5	DESIGN
private List aliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999210407454906	WITHOUT_CLASSIFICATION	7.895925450940963E-5	DESIGN
columns.add(columnName); aliases.add(tableAlias);	WITHOUT_CLASSIFICATION	0.9994226996701397	WITHOUT_CLASSIFICATION	5.773003298601926E-4	DESIGN
where fragment must be empty!	WITHOUT_CLASSIFICATION	0.9997478640197628	WITHOUT_CLASSIFICATION	2.52135980237171E-4	DESIGN
revert to traditional hibernate behavior of setting initialPoolSize to minPoolSize unless otherwise specified with a c3p0.-style parameter.	WITHOUT_CLASSIFICATION	0.9984899779409333	WITHOUT_CLASSIFICATION	0.001510022059066723	DESIGN
arbitrary on clause ignored!!	WITHOUT_CLASSIFICATION	0.9999539452814511	WITHOUT_CLASSIFICATION	4.605471854890349E-5	DESIGN
might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9958987645563493	WITHOUT_CLASSIFICATION	0.004101235443650765	DESIGN
might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9958987645563493	WITHOUT_CLASSIFICATION	0.004101235443650765	DESIGN
if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9993817546134767	WITHOUT_CLASSIFICATION	6.182453865234283E-4	DESIGN
Essentially: 1) If we have a local (Hibernate) transaction in progress and it already has the UserTransaction cached, use that UserTransaction to determine the status. 2) If a transaction manager has been located, use that transaction manager to determine the status. 3) Finally, as the last resort, try to lookup the UserTransaction via JNDI and use that to determine the status.	WITHOUT_CLASSIFICATION	0.9705629169913487	WITHOUT_CLASSIFICATION	0.029437083008651332	DESIGN
package	WITHOUT_CLASSIFICATION	0.9997312868516849	WITHOUT_CLASSIFICATION	2.6871314831509904E-4	DESIGN
swallow it (the transaction _was_ successful or successfully rolled back)	WITHOUT_CLASSIFICATION	0.998823210266093	WITHOUT_CLASSIFICATION	0.0011767897339069959	DESIGN
ignore it	WITHOUT_CLASSIFICATION	0.9998552426026608	WITHOUT_CLASSIFICATION	1.4475739733930618E-4	DESIGN
we need to dirty check many-to-ones with not-found="ignore" in order to update the cache (not the database), since in this case a null entity reference can lose information	WITHOUT_CLASSIFICATION	0.9995710857844581	WITHOUT_CLASSIFICATION	4.289142155418856E-4	DESIGN
create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.999843278660869	WITHOUT_CLASSIFICATION	1.5672133913098533E-4	DESIGN
Regions can get instantiated in the course of normal work (e.g. a named query region will be created the first time the query is executed), so suspend any ongoing tx	WITHOUT_CLASSIFICATION	0.9999279279673459	WITHOUT_CLASSIFICATION	7.207203265406458E-5	DESIGN
then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.999057312524043	WITHOUT_CLASSIFICATION	9.426874759571569E-4	DESIGN
Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.999192568978416	WITHOUT_CLASSIFICATION	8.074310215839652E-4	DESIGN
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9857334339160307	WITHOUT_CLASSIFICATION	0.014266566083969222	DESIGN
NOTE : this is being used from the process of shutting down a SessionFactory. Specific things to consider: (1) this clearing of the region should not propagate to other nodes on the cluster (if any); this is the cache-mode-local option bit... (2) really just trying a best effort to cleanup after ourselves; lock failures, etc are not critical here; this is the fail-silently option bit...	WITHOUT_CLASSIFICATION	0.8447259207380229	WITHOUT_CLASSIFICATION	0.15527407926197706	DESIGN
need to extract the component values and check for subtype replacements...	WITHOUT_CLASSIFICATION	0.9998302513145776	WITHOUT_CLASSIFICATION	1.6974868542240089E-4	DESIGN
We ignore minimalPutOverride. JBossCache putForExternalRead is already about as minimal as we can get; it will promptly return if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9980537860968228	WITHOUT_CLASSIFICATION	0.0019462139031772225	DESIGN
for now, just "re-flatten" the metamodel since this is temporary stuff anyway (HHH-1907)	WITHOUT_CLASSIFICATION	0.9270128035478369	WITHOUT_CLASSIFICATION	0.07298719645216308	DESIGN
Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9993747270124658	WITHOUT_CLASSIFICATION	6.252729875341347E-4	DESIGN
This solution would allow us to eliminate the owner arg to disassemble(), but what if the collection was null, and then later had elements added? seems unsafe session.getPersistenceContext().getCollectionEntry( (PersistentCollection) value ).getKey();	WITHOUT_CLASSIFICATION	0.9404009882777519	WITHOUT_CLASSIFICATION	0.05959901172224814	DESIGN
Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9998953863821066	WITHOUT_CLASSIFICATION	1.0461361789334804E-4	DESIGN
some collections are not lazy:	WITHOUT_CLASSIFICATION	0.9999720094141186	WITHOUT_CLASSIFICATION	2.7990585881321744E-5	DESIGN
Here we don't want to suspend the tx. If we do: 1) We might be caching query results that reflect uncommitted changes. No tx == no WL on cache node, so other threads can prematurely see those query results 2) No tx == immediate replication. More overhead, plus we spread issue #1 above around the cluster	WITHOUT_CLASSIFICATION	0.9957629215516853	WITHOUT_CLASSIFICATION	0.004237078448314733	DESIGN
return the (fully resolved) identifier value, but do not resolve to the actual referenced entity instance NOTE: the owner of the association is not really the owner of the id!	WITHOUT_CLASSIFICATION	0.9999834697979706	WITHOUT_CLASSIFICATION	1.6530202029492425E-5	DESIGN
Add a zero (or quite low) timeout option so we don't block. Ignore any TimeoutException. Basically we forego caching the query result in order to avoid blocking. Reads are done with suspended tx, so they should not hold the lock for long. Not caching the query result is OK, since any subsequent read will just see the old result with its out-of-date timestamp; that result will be discarded and the db query performed again.	WITHOUT_CLASSIFICATION	0.9862955383180201	WITHOUT_CLASSIFICATION	0.013704461681979899	DESIGN
Impl note: takes advantage of the fact that an escpaed single quote embedded within a quote-block can really be handled as two seperate quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9987515072372957	WITHOUT_CLASSIFICATION	0.0012484927627043456	DESIGN
We have the JBCWriteMutex, so no other local thread will be trying to write this key. It's possible here some remote thread has come in and changed the values again, but since we are reading the values to write to JBC right now, we know we are writing the latest values; i.e. we don't assume that what we cached in entry.update() above is what we should write to JBC now. Our write could be redundant, i.e. we are writing what some remote thread just came in an wrote. There is a chance that yet another remote thread will update us, and we'll then overwrite that later data in JBC. But, all remote nodes will ignore that change in their localCache; the only place it will live will be in JBC, where it can only effect the initial state transfer values on newly joined nodes (i.e. populateLocalCache()).	WITHOUT_CLASSIFICATION	0.9855951350634897	WITHOUT_CLASSIFICATION	0.014404864936510236	DESIGN
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9902814203416096	WITHOUT_CLASSIFICATION	0.009718579658390377	DESIGN
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9902814203416096	WITHOUT_CLASSIFICATION	0.009718579658390377	DESIGN
Don't need to lock the cache here, since if someone else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9995866799904906	WITHOUT_CLASSIFICATION	4.133200095095136E-4	DESIGN
we need to grab the version value from the entity, otherwise we have issues with generated-version entities that may have multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9550858597509173	WITHOUT_CLASSIFICATION	0.04491414024908264	DESIGN
we need to obtain the lock before any actions are executed, since this may be an inverse="true" bidirectional association and it is one of the earlier entity actions which actually updates the database (this action is resposible for second-level cache invalidation only)	WITHOUT_CLASSIFICATION	0.9857438884289987	WITHOUT_CLASSIFICATION	0.01425611157100126	DESIGN
postDelete: After actually deleting a row, record the fact that the instance no longer exists on the database (needed for identity-column key generation), and remove it from the session cache	WITHOUT_CLASSIFICATION	0.993859866078231	WITHOUT_CLASSIFICATION	0.006140133921769013	DESIGN
intentionally empty	WITHOUT_CLASSIFICATION	0.9999247457090813	WITHOUT_CLASSIFICATION	7.52542909186233E-5	DESIGN
todo : what else to do here?	DESIGN	0.9997731776886934	WITHOUT_CLASSIFICATION	2.2682231130656603E-4	DESIGN
put() has nowait semantics, is this really appropriate? note that it needs to be async replication, never local or sync	DESIGN	0.9130237748178653	WITHOUT_CLASSIFICATION	0.08697622518213466	DESIGN
'hibernate.temp.use_jdbc_metadata_defaults' is a temporary magic value. The need for it is intended to be alleviated with future developement, thus it is not defined as an Environment constant... it is used to control whether we should consult the JDBC metadata to determine certain Settings default values; it is useful to not do this when the database may not be available (mainly in tools usage).	DESIGN	0.8936703181460348	DESIGN	0.10632968185396517	WITHOUT_CLASSIFICATION
TODO: get SQL rendering out of this package!	DESIGN	0.5049744376667692	DESIGN	0.49502556233323086	WITHOUT_CLASSIFICATION
TODO: get SQL rendering out of this package!	DESIGN	0.5049744376667692	DESIGN	0.49502556233323086	WITHOUT_CLASSIFICATION
todo : eventually merge this with TreeCache and just add optional opt-lock support there.	DESIGN	0.9986206873381946	WITHOUT_CLASSIFICATION	0.0013793126618053435	DESIGN
can happen because of the multiple ways Cache.remove() can be invoked :(	DESIGN	0.9996924117584505	WITHOUT_CLASSIFICATION	3.0758824154960803E-4	DESIGN
work around the "feature" where tree cache is validating the inserted node during the next transaction. no idea...	DESIGN	0.9993694892050742	WITHOUT_CLASSIFICATION	6.305107949258333E-4	DESIGN
FIXME Per the RegionFactory class Javadoc, this constructor version should not be necessary. @param props The configuration properties	DESIGN	0.9989345864264997	WITHOUT_CLASSIFICATION	0.0010654135735003	DESIGN
FIXME Per the RegionFactory class Javadoc, this constructor version should not be necessary. @param props The configuration properties	DESIGN	0.9989345864264997	WITHOUT_CLASSIFICATION	0.0010654135735003	DESIGN
FIXME Hacky workaround to JBCACHE-1202	DESIGN	0.9644216543187891	WITHOUT_CLASSIFICATION	0.035578345681210766	DESIGN
FIXME Hacky workaround to JBCACHE-1202	DESIGN	0.9644216543187891	WITHOUT_CLASSIFICATION	0.035578345681210766	DESIGN
TODO: I considered validating TS cache config here, but decided to defer unti getTimestampsCacheInstance() in case the cache is never actually used	DESIGN	0.5164651804429635	DESIGN	0.48353481955703653	WITHOUT_CLASSIFICATION
TODO Is this a valid operation on a timestamps cache?	DESIGN	0.9808555702618416	DESIGN	0.0191444297381584	WITHOUT_CLASSIFICATION
TODO Is this a valid operation on a timestamps cache?	DESIGN	0.9808555702618416	DESIGN	0.0191444297381584	WITHOUT_CLASSIFICATION
TODO Why not use the timestamp in a DataVersion?	DESIGN	0.793325192918092	DESIGN	0.20667480708190814	WITHOUT_CLASSIFICATION
can happen because of the multiple ways Cache.remove() can be invoked :(	DESIGN	0.9996924117584505	WITHOUT_CLASSIFICATION	3.0758824154960803E-4	DESIGN
work around the "feature" where tree cache is validating the inserted node during the next transaction. no idea...	DESIGN	0.9993694892050742	WITHOUT_CLASSIFICATION	6.305107949258333E-4	DESIGN
swaldman 2004-02-07: modify to allow null values to signify fall through to c3p0 PoolConfig defaults	DESIGN	0.998122615217727	WITHOUT_CLASSIFICATION	0.0018773847822728762	DESIGN
turn hibernate.c3p0. into c3p0., so c3p0 gets a chance to see all hibernate.c3p0.	DESIGN	0.9895920565773305	WITHOUT_CLASSIFICATION	0.010407943422669527	DESIGN
TODO: this bit actually has to be called after all cascades! but since identity insert is called synchronously, instead of asynchronously as other actions, it isn't	DESIGN	0.8878307035817019	DESIGN	0.11216929641829818	WITHOUT_CLASSIFICATION
TODO: reenable if we also fix the above todo	DESIGN	0.8572285371007533	DESIGN	0.1427714628992467	WITHOUT_CLASSIFICATION
TODO: inefficient if that cache is just going to ignore the updated state!	DESIGN	0.6515682206903229	DESIGN	0.348431779309677	WITHOUT_CLASSIFICATION
we may be screwed here since the collection action is about to execute and we do not know the final owner key value	DESIGN	0.9980347163153231	WITHOUT_CLASSIFICATION	0.0019652836846769297	DESIGN
Create an action that will evict collection and entity regions based on queryspaces (table names). TODO: cache the autodetected information and pass it in instead.	DESIGN	0.8621003206116425	DESIGN	0.13789967938835745	WITHOUT_CLASSIFICATION
todo : what else to do here?	DESIGN	0.9997731776886934	WITHOUT_CLASSIFICATION	2.2682231130656603E-4	DESIGN
todo : modify the class definition if not already transformed...	DESIGN	0.9999409759084106	WITHOUT_CLASSIFICATION	5.902409158942622E-5	DESIGN
todo : what else to do here?	DESIGN	0.9997731776886934	WITHOUT_CLASSIFICATION	2.2682231130656603E-4	DESIGN
this is called by SessionFactory irregardless; we just disregard here; could also add a check to SessionFactory to only conditionally call start	DESIGN	0.9998002754671134	WITHOUT_CLASSIFICATION	1.9972453288667267E-4	DESIGN
this is called by SessionFactory irregardless; we just disregard here; could also add a check to SessionFactory to only conditionally call stop	DESIGN	0.999869443211533	WITHOUT_CLASSIFICATION	1.3055678846703522E-4	DESIGN
TODO: to handle concurrent writes correctly, this should return a Lock to the client	DESIGN	0.9832442790579147	DESIGN	0.016755720942085335	WITHOUT_CLASSIFICATION
put() has nowait semantics, is this really appropriate? note that it needs to be async replication, never local or sync	DESIGN	0.9130237748178653	WITHOUT_CLASSIFICATION	0.08697622518213466	DESIGN
TODO: to handle concurrent writes correctly, the client should pass in a Lock	DESIGN	0.9636113981371692	DESIGN	0.03638860186283077	WITHOUT_CLASSIFICATION
TODO: assumes all collections disassemble to an array!	DESIGN	0.700244859107366	WITHOUT_CLASSIFICATION	0.2997551408926341	DESIGN
TODO: reuse the PreLoadEvent	DESIGN	0.9750026493714592	WITHOUT_CLASSIFICATION	0.024997350628540842	DESIGN
todo: this was added to support initializing an entity's EntityEntry snapshot during reattach; this should be refactored to instead expose a method to assemble a EntityEntry based on this state for return.	DESIGN	0.8012982581466793	DESIGN	0.19870174185332062	WITHOUT_CLASSIFICATION
todo : what is the implication of this?	DESIGN	0.9976454171709667	WITHOUT_CLASSIFICATION	0.0023545828290332466	DESIGN
use COUNT as the default. This mimics the old behavior, although NONE might be a better option moving forward in the case of callable	DESIGN	0.9861247712341433	WITHOUT_CLASSIFICATION	0.013875228765856723	DESIGN
TODO: joinKeyColumnName & foreignKeyColumnName should be called either here or at a slightly higer level in the stack (to get all the information we need) Right now HbmBinder does not support the	DESIGN	0.9829418484270586	DESIGN	0.017058151572941382	WITHOUT_CLASSIFICATION
TODO: suck this into initLaziness!	DESIGN	0.9459674984333845	DESIGN	0.05403250156661557	WITHOUT_CLASSIFICATION
we have to set up the table later!! yuck	DESIGN	0.9998223191227767	WITHOUT_CLASSIFICATION	1.776808772231711E-4	DESIGN
TODO: better to degrade to lazy="false" if uninstrumented	DESIGN	0.9008793112486514	DESIGN	0.0991206887513486	WITHOUT_CLASSIFICATION
todo : again, how should this work for non-pojo entities?	DESIGN	0.9943189476581705	WITHOUT_CLASSIFICATION	0.005681052341829418	DESIGN
TODO: this is a bit of copy/paste from IndexedCollection.createPrimaryKey()	DESIGN	0.890808522222335	DESIGN	0.10919147777766507	WITHOUT_CLASSIFICATION
This inner class implements a case statement....perhaps im being a bit over-clever here	DESIGN	0.9937441828019593	WITHOUT_CLASSIFICATION	0.006255817198040777	DESIGN
TODO: bad implementation, cos it depends upon ordering of mapping doc fixing this requires that Collection/PersistentClass gain access to the Mappings reference from Configuration (or the filterDefinitions map directly) sometime during Configuration.buildSessionFactory (after all the types/filter-defs are known and before building persisters).	DESIGN	0.6484334608649387	DESIGN	0.35156653913506114	WITHOUT_CLASSIFICATION
use of a stringbuffer to workaround a JDK bug	DESIGN	0.9453893263512263	WITHOUT_CLASSIFICATION	0.05461067364877381	DESIGN
hack/workaround as sqlquery impl depend on having a key.	DESIGN	0.9979937109004954	WITHOUT_CLASSIFICATION	0.0020062890995045175	DESIGN
FIXME: get the PersistentClass	DESIGN	0.9999789903985021	WITHOUT_CLASSIFICATION	2.1009601497818816E-5	DESIGN
FIXME: get the PersistentClass	DESIGN	0.9999789903985021	WITHOUT_CLASSIFICATION	2.1009601497818816E-5	DESIGN
Icky workaround for MySQL bug:	DESIGN	0.9971835245072304	WITHOUT_CLASSIFICATION	0.002816475492769634	DESIGN
TODO: Somehow add the newly created foreign keys to the internal collection	DESIGN	0.5585132363180099	WITHOUT_CLASSIFICATION	0.44148676368199014	DESIGN
TODO possibly relax that	DESIGN	0.9201915329085655	WITHOUT_CLASSIFICATION	0.07980846709143452	DESIGN
TODO possibly relax that	DESIGN	0.9201915329085655	WITHOUT_CLASSIFICATION	0.07980846709143452	DESIGN
TODO possibly relax that	DESIGN	0.9201915329085655	WITHOUT_CLASSIFICATION	0.07980846709143452	DESIGN
use of a stringbuffer to workaround a JDK bug	DESIGN	0.9453893263512263	WITHOUT_CLASSIFICATION	0.05461067364877381	DESIGN
use a degenerated strategy for backward compatibility	DESIGN	0.9983955360657725	WITHOUT_CLASSIFICATION	0.0016044639342275863	DESIGN
Sets can be just a view of a part of another collection. do we need to copy it to be sure it won't be changing underneath us? ie. this.set.addAll(set);	DESIGN	0.9988164472077494	WITHOUT_CLASSIFICATION	0.0011835527922504857	DESIGN
note that i parameter is now unused (delete it?)	DESIGN	0.9968378083547478	WITHOUT_CLASSIFICATION	0.0031621916452523103	DESIGN
just to help out during the load (ugly, i know)	DESIGN	0.9999005265150764	WITHOUT_CLASSIFICATION	9.947348492345458E-5	DESIGN
TODO : safe to interpret "map.remove(key) == null" as non-dirty?	DESIGN	0.622364913800569	WITHOUT_CLASSIFICATION	0.37763508619943087	DESIGN
yick! need this for proper serialization/deserialization handling...	DESIGN	0.9902984993610348	WITHOUT_CLASSIFICATION	0.00970150063896524	DESIGN
TODO: get SQL rendering out of this package!	DESIGN	0.5049744376667692	DESIGN	0.49502556233323086	WITHOUT_CLASSIFICATION
TODO: get SQL rendering out of this package!	DESIGN	0.5049744376667692	DESIGN	0.49502556233323086	WITHOUT_CLASSIFICATION
yuck!	DESIGN	0.9999113734108903	WITHOUT_CLASSIFICATION	8.862658910963415E-5	DESIGN
TODO: get SQL rendering out of this package!	DESIGN	0.5049744376667692	DESIGN	0.49502556233323086	WITHOUT_CLASSIFICATION
TODO : not sure this is correct, could not find docs on how to do this.	DESIGN	0.6876266012132428	DESIGN	0.31237339878675724	WITHOUT_CLASSIFICATION
HSQL has no Blob/Clob support .... but just put these here for now!	DESIGN	0.998828595692295	WITHOUT_CLASSIFICATION	0.0011714043077049449	DESIGN
does this need holdlock also? : return tableName + " with (updlock, rowlock, holdlock)";	DESIGN	0.9971281060261891	WITHOUT_CLASSIFICATION	0.0028718939738109424	DESIGN
sql-server, at least needed this dropped after use; strange!	DESIGN	0.99854319603583	WITHOUT_CLASSIFICATION	0.0014568039641699336	DESIGN
todo : is there really any reason to kkeep trying if this fails once?	DESIGN	0.999857616219615	WITHOUT_CLASSIFICATION	1.4238378038505017E-4	DESIGN
TBD should this be varbinary($1)? registerColumnType(Types.VARBINARY, "binary($1)");	DESIGN	0.9909653030091296	WITHOUT_CLASSIFICATION	0.009034696990870466	DESIGN
is it necessary to register %exact since it can only appear in a where clause?	DESIGN	0.9891548220239266	WITHOUT_CLASSIFICATION	0.010845177976073402	DESIGN
xmlforest requires a new kind of function constructor	DESIGN	0.9995098484001567	WITHOUT_CLASSIFICATION	4.901515998433696E-4	DESIGN
Does this dialect support the ALTER TABLE syntax?	DESIGN	0.9965993829636696	WITHOUT_CLASSIFICATION	0.0034006170363304385	DESIGN
Do we need to qualify index names with the schema name?	DESIGN	0.9983881812922897	WITHOUT_CLASSIFICATION	0.001611818707710315	DESIGN
Does this dialect support the UNIQUE column syntax?	DESIGN	0.9974561966446603	WITHOUT_CLASSIFICATION	0.002543803355339792	DESIGN
Does this dialect support check constraints?	DESIGN	0.996766036190172	WITHOUT_CLASSIFICATION	0.0032339638098279728	DESIGN
Do we need to drop constraints before dropping tables in this dialect?	DESIGN	0.996293287247939	WITHOUT_CLASSIFICATION	0.0037067127520611573	DESIGN
Does this dialect support the FOR UPDATE syntax?	DESIGN	0.9965993829636696	WITHOUT_CLASSIFICATION	0.0034006170363304385	DESIGN
Does this dialect support the Oracle-style FOR UPDATE NOWAIT syntax?	DESIGN	0.9965993829636696	WITHOUT_CLASSIFICATION	0.0034006170363304385	DESIGN
Does this dialect support FOR UPDATE OF, allowing particular rows to be locked?	DESIGN	0.9788781878087338	WITHOUT_CLASSIFICATION	0.02112181219126618	DESIGN
note there is a wierd implementation in the client side	DESIGN	0.9997990356164586	WITHOUT_CLASSIFICATION	2.0096438354145704E-4	DESIGN
TODO: never reached, since getTypeName() actually throws an exception!	DESIGN	0.691171823357236	WITHOUT_CLASSIFICATION	0.30882817664276385	DESIGN
todo : should we additionally check the current isolation mode explicitly?	DESIGN	0.9994181027411329	WITHOUT_CLASSIFICATION	5.818972588670798E-4	DESIGN
todo : remove this and just have subclasses use Isolater/IsolatedWork directly...	DESIGN	0.9994789106111259	WITHOUT_CLASSIFICATION	5.210893888741353E-4	DESIGN
TODO: should orphans really be deleted during lock???	DESIGN	0.9034273116970446	DESIGN	0.09657268830295544	WITHOUT_CLASSIFICATION
orphans should not be deleted during merge??	DESIGN	0.9958105694026179	WITHOUT_CLASSIFICATION	0.004189430597382061	DESIGN
orphans should not be deleted during copy??	DESIGN	0.9958105694026179	WITHOUT_CLASSIFICATION	0.004189430597382061	DESIGN
I suppose?	DESIGN	0.9996749426978022	WITHOUT_CLASSIFICATION	3.2505730219778943E-4	DESIGN
TODO: suck this logic into the collection!	DESIGN	0.8830419044297196	DESIGN	0.11695809557028042	WITHOUT_CLASSIFICATION
TODO: an alternative is to check if the owner has changed; if it hasn't then get the ID from collection.getOwner()	DESIGN	0.7741940584036806	WITHOUT_CLASSIFICATION	0.22580594159631928	DESIGN
TODO:refactor + make this method private	DESIGN	0.9809628903314603	WITHOUT_CLASSIFICATION	0.019037109668539637	DESIGN
todo : we can actually just determine this from the incoming EntityEntry-s	DESIGN	0.9963847369529837	WITHOUT_CLASSIFICATION	0.0036152630470163705	DESIGN
TODO: Should this be an InitializeEntityEventListener??? (watch out for performance!)	DESIGN	0.6723807308919704	DESIGN	0.3276192691080296	WITHOUT_CLASSIFICATION
TODO: better to pass the id in as an argument?	DESIGN	0.5379891598809046	DESIGN	0.4620108401190954	WITHOUT_CLASSIFICATION
todo : potentially look at optimizing these two arrays	DESIGN	0.9996590552680998	WITHOUT_CLASSIFICATION	3.4094473190012913E-4	DESIGN
trim done to workaround stupid oracle bug that cant handle whitespaces before a { in a sp	DESIGN	0.63564603535399	WITHOUT_CLASSIFICATION	0.36435396464600994	DESIGN
trim done to workaround stupid oracle bug that cant handle whitespaces before a { in a sp	DESIGN	0.63564603535399	WITHOUT_CLASSIFICATION	0.36435396464600994	DESIGN
TODO: temporary	DESIGN	0.7170182214013204	DESIGN	0.2829817785986795	WITHOUT_CLASSIFICATION
TODO: not quite sure about the full implications of this!	DESIGN	0.5272694361324414	DESIGN	0.4727305638675586	WITHOUT_CLASSIFICATION
TODO: not quite sure about the full implications of this!	DESIGN	0.5272694361324414	DESIGN	0.4727305638675586	WITHOUT_CLASSIFICATION
TODO: ugly here:	DESIGN	0.9098693266488281	WITHOUT_CLASSIFICATION	0.09013067335117196	DESIGN
this is kinda the best we can do...	DESIGN	0.9987110689059255	WITHOUT_CLASSIFICATION	0.0012889310940744504	DESIGN
TODO: this needn't exclude subclasses...	DESIGN	0.7430724621491325	DESIGN	0.2569275378508675	WITHOUT_CLASSIFICATION
todo : need map? the prob is a proper key, right?	DESIGN	0.9981316432989402	WITHOUT_CLASSIFICATION	0.0018683567010597585	DESIGN
todo : i'd much rather have this done from #endLoadingCollection(CollectionPersister,LoadingCollectionEntry)...	DESIGN	0.9878063028337185	WITHOUT_CLASSIFICATION	0.012193697166281476	DESIGN
todo : hack!!! NOTE : here we cleanup the load context when we have no more local LCE entries. This "works" for the time being because really only the collection load contexts are implemented. Long term, this cleanup should become part of the "close result set" processing from the (sandbox/jdbc) jdbc-container code.	DESIGN	0.8482253589577067	DESIGN	0.15177464104229327	WITHOUT_CLASSIFICATION
todo : should really move this log statement to CollectionType, where this is used from...	DESIGN	0.9011687837451319	WITHOUT_CLASSIFICATION	0.09883121625486804	DESIGN
TODO : keep seperate notions of QT[] here for shallow/non-shallow queries...	DESIGN	0.8349985154897802	DESIGN	0.16500148451021973	WITHOUT_CLASSIFICATION
TODO : add this info to the translator and aggregate it here...	DESIGN	0.6227665191545284	WITHOUT_CLASSIFICATION	0.3772334808454717	DESIGN
TODO: move into collection type, so we can use polymorphism!	DESIGN	0.9908053798863277	DESIGN	0.00919462011367227	WITHOUT_CLASSIFICATION
todo : should we check the current isolation mode explicitly?	DESIGN	0.9994181027411329	WITHOUT_CLASSIFICATION	5.818972588670798E-4	DESIGN
TODO: suck into event class	DESIGN	0.7381188634021657	WITHOUT_CLASSIFICATION	0.26188113659783435	DESIGN
do we even really need this? the update will fail anyway....	DESIGN	0.9994954878616579	WITHOUT_CLASSIFICATION	5.045121383421298E-4	DESIGN
hum ... should we cascade anyway? throw an exception? fine like it is?	DESIGN	0.8865447116993572	WITHOUT_CLASSIFICATION	0.11345528830064289	DESIGN
TODO: would it be better to do a refresh from db?	DESIGN	0.9910606346314939	DESIGN	0.008939365368506206	WITHOUT_CLASSIFICATION
TODO: we use two visitors here, inefficient!	DESIGN	0.5803802068458976	WITHOUT_CLASSIFICATION	0.4196197931541023	DESIGN
this class has no proxies (so do a shortcut)	DESIGN	0.9987174972202595	WITHOUT_CLASSIFICATION	0.0012825027797404324	DESIGN
PostLoad is needed for EJB3 TODO: reuse the PostLoadEvent...	DESIGN	0.5571547231597496	WITHOUT_CLASSIFICATION	0.4428452768402505	DESIGN
TODO: put this stuff back in to read snapshot from the second-level cache (needs some extra work)	DESIGN	0.8620836546425195	DESIGN	0.13791634535748057	WITHOUT_CLASSIFICATION
null or brand new collection this will also (inefficiently) handle arrays, which have no snapshot, so we can't do any better	DESIGN	0.9866815725310265	WITHOUT_CLASSIFICATION	0.013318427468973477	DESIGN
TODO: is this 100% correct?	DESIGN	0.7767813435643085	WITHOUT_CLASSIFICATION	0.2232186564356915	DESIGN
TODO: iteratively get transient entities and retry merge until one of the following conditions: 1) transientCopyCache.size() == 0 2) transientCopyCache.size() is not decreasing and copyCache.size() is not increasing TODO: find out if retrying can add entities to copyCache (don't think it can...) For now, just retry once; throw TransientObjectException if there are still any transient entities	DESIGN	0.9950764505103588	WITHOUT_CLASSIFICATION	0.0049235494896412236	DESIGN
entity name will not be available for non-POJO entities TODO: cache the entity name somewhere so that it is available to this exception	DESIGN	0.8632195387855511	DESIGN	0.13678046121444892	WITHOUT_CLASSIFICATION
TODO: we should throw an exception if we really know for sure that this is a detached instance, rather than just assuming throw new StaleObjectStateException(entityName, id);	DESIGN	0.9981508098343846	DESIGN	0.001849190165615258	WITHOUT_CLASSIFICATION
TODO : perhaps we should additionally require that the incoming entity version be equivalent to the defined unsaved-value?	DESIGN	0.9632845234207907	DESIGN	0.036715476579209386	WITHOUT_CLASSIFICATION
perhaps this should be an exception since it is only ever used in the above method?	DESIGN	0.989830016783443	WITHOUT_CLASSIFICATION	0.010169983216557169	DESIGN
Put a placeholder in entries, so we don't recurse back and try to save() the same object again. QUESTION: should this be done before onSave() is called? likewise, should it be done before onUpdate()?	DESIGN	0.6474786988486524	WITHOUT_CLASSIFICATION	0.35252130115134755	DESIGN
TODO: merge into one method!	DESIGN	0.5071372746413588	DESIGN	0.49286272535864123	WITHOUT_CLASSIFICATION
TODO: refactor to .sql package	DESIGN	0.6857289262358751	WITHOUT_CLASSIFICATION	0.3142710737641248	DESIGN
Provides query splitting methods, which were originally in QueryTranslator. <br> TODO: This will need to be refactored at some point. @author josh	DESIGN	0.9668694318740558	DESIGN	0.03313056812594417	WITHOUT_CLASSIFICATION
TODO: this is one of the ugliest and most fragile pieces of code in Hibernate....	DESIGN	0.9414819886581697	DESIGN	0.058518011341830344	WITHOUT_CLASSIFICATION
todo : temporary needed because currently persister is the one that creates and renders the join fragments for inheritence hierarchies...	DESIGN	0.9741815500191973	WITHOUT_CLASSIFICATION	0.025818449980802752	DESIGN
TODO : better way?!?	DESIGN	0.6995814113405602	WITHOUT_CLASSIFICATION	0.30041858865943977	DESIGN
Not possible to simply re-use the versionPropertyNode here as it causes OOM errors due to circularity :(	DESIGN	0.9995058481078708	WITHOUT_CLASSIFICATION	4.941518921293236E-4	DESIGN
TODO:this is only needed during compilation .. can we eliminate the instvar?	DESIGN	0.9993839703223871	WITHOUT_CLASSIFICATION	6.160296776128979E-4	DESIGN
TODO : this is a bit dodgy, come up with a better way to check this (plus see above comment)	DESIGN	0.9828021989071964	DESIGN	0.017197801092803534	WITHOUT_CLASSIFICATION
even here, if only properties mapped to the "base table" are referenced in the set and where clauses, this could be handled by the BasicDelegate. TODO : decide if it is better performance-wise to perform that check, or to simply use the MultiTableUpdateDelegate	DESIGN	0.9795433506883637	DESIGN	0.020456649311636252	WITHOUT_CLASSIFICATION
TODO: switch statements are always evil! We already had bugs because of forgotten token types. Use polymorphism for this!	DESIGN	0.69702608542429	DESIGN	0.30297391457571	WITHOUT_CLASSIFICATION
TODO : we really need to be able to deal with component paths here also; this is difficult because the hql-sql grammar expects all those node types to be FromReferenceNodes. One potential fix here would be to convert the IntoClause to just use a FromClause/FromElement combo (as a child of the InsertStatement) and move all this logic into the InsertStatement. That's probably the easiest approach (read: least amount of changes to the grammar and code), but just doesn't feel right as then an insert would contain 2 from-clauses	DESIGN	0.9998888852340408	DESIGN	1.1111476595915143E-4	WITHOUT_CLASSIFICATION
really there are two situations where it should be ok to allow the insertion into properties defined on a superclass: 1) union-subclass with an abstract root entity 2) discrim-subclass #1 is handled already because of the fact that UnionSubclassPersister alreay always returns 0 for this call... we may want to disallow it for discrim-subclass just for consistency-sake (currently does not work anyway)...	DESIGN	0.6101418856759402	WITHOUT_CLASSIFICATION	0.38985811432405976	DESIGN
yuck!	DESIGN	0.9999113734108903	WITHOUT_CLASSIFICATION	8.862658910963415E-5	DESIGN
implicit joins are always(?) ok to reuse	DESIGN	0.9992858199922008	WITHOUT_CLASSIFICATION	7.141800077992054E-4	DESIGN
TODO : we may also want to check that the types here map to exactly one column/JDBC-type can't think of a situation where arithmetic expression between multi-column mappings makes any sense.	DESIGN	0.9958935308801372	DESIGN	0.004106469119862852	WITHOUT_CLASSIFICATION
we do not know either type BLIND GUESS!	DESIGN	0.9978673538917877	WITHOUT_CLASSIFICATION	0.0021326461082123464	DESIGN
TODO: used to be exprNoParens! was this needed?	DESIGN	0.9999974187461838	DESIGN	2.5812538161673525E-6	WITHOUT_CLASSIFICATION
TODO: Replace this with a more elegant solution.	DESIGN	0.9957316814150646	DESIGN	0.0042683185849354	WITHOUT_CLASSIFICATION
TODO: Should this really return null? If not, figure out something better to do here.	DESIGN	0.9018625179419056	WITHOUT_CLASSIFICATION	0.09813748205809437	DESIGN
TODO: get SQL rendering out of this package!	DESIGN	0.5049744376667692	DESIGN	0.49502556233323086	WITHOUT_CLASSIFICATION
yuck!	DESIGN	0.9999113734108903	WITHOUT_CLASSIFICATION	8.862658910963415E-5	DESIGN
ignore it; the incoming property could not be found so we cannot be sure what to do here. At the very least, the safest is to simply not apply any dereference toggling...	DESIGN	0.9977998459552351	WITHOUT_CLASSIFICATION	0.0022001540447649033	DESIGN
TODO : most of below was taken verbatim from DotNode; should either delegate this logic or super-type it	DESIGN	0.901969121673523	DESIGN	0.09803087832647701	WITHOUT_CLASSIFICATION
otherwise, a trim-specification and/or a trim-character have been specified; we need to decide which options are present and "do the right thing" should leading trim-characters be trimmed? should trailing trim-characters be trimmed? the trim-character the trim-source	DESIGN	0.6716014619103245	WITHOUT_CLASSIFICATION	0.32839853808967545	DESIGN
todo: we should really just collect these from the various SelectExpressions, rather than regenerating here	DESIGN	0.9858652579247923	WITHOUT_CLASSIFICATION	0.01413474207520771	DESIGN
TODO: is this a bit ugly?	DESIGN	0.694985014487125	WITHOUT_CLASSIFICATION	0.30501498551287504	DESIGN
Need a better way to define the suffixes here...	DESIGN	0.99619348640154	WITHOUT_CLASSIFICATION	0.003806513598460004	DESIGN
TODO: something much better - look at the type of the other expression! TODO: Have comparisonExpression and/or arithmeticExpression rules complete the resolution of boolean nodes.	DESIGN	0.9742826900342584	DESIGN	0.025717309965741585	WITHOUT_CLASSIFICATION
TODO : what amount of significant digits need to be supported here? - from the DecimalFormat docs: [significant digits] = [minimum integer digits] + [maximum fraction digits]	DESIGN	0.739280466534206	DESIGN	0.2607195334657939	WITHOUT_CLASSIFICATION
Needed the "clazz_" check to work around union-subclasses TODO : is there a way to tell whether a persister is truly discrim-column based inheritence?	DESIGN	0.6468825967046561	DESIGN	0.3531174032953439	WITHOUT_CLASSIFICATION
We should actually rework this class to not implement Parser and just process path expressions in the most convenient way.	DESIGN	0.9898871862487196	WITHOUT_CLASSIFICATION	0.01011281375128036	DESIGN
The class is now way to complex!	DESIGN	0.9995706209708729	WITHOUT_CLASSIFICATION	4.293790291270071E-4	DESIGN
TODO: get SQL rendering out of here	DESIGN	0.6122337243439304	DESIGN	0.38776627565606947	WITHOUT_CLASSIFICATION
TODO: is there a better way?	DESIGN	0.5597222790188995	WITHOUT_CLASSIFICATION	0.44027772098110063	DESIGN
Must be done here because of side-effect! yuck...	DESIGN	0.9795482177614415	WITHOUT_CLASSIFICATION	0.02045178223855847	DESIGN
name from a super query (a bit inelegant that it shows up here)	DESIGN	0.9978672844725739	WITHOUT_CLASSIFICATION	0.002132715527426078	DESIGN
We should reengineer this class so that, rather than the current ad - hoc linear approach to processing a stream of tokens, we instead build up a tree of expressions.	DESIGN	0.7456309517977275	WITHOUT_CLASSIFICATION	0.2543690482022725	DESIGN
this is ugly here, but needed because its a subquery	DESIGN	0.9997450790403971	WITHOUT_CLASSIFICATION	2.549209596028911E-4	DESIGN
unhappy about this being public ... is there a better way?	DESIGN	0.9372166193397644	WITHOUT_CLASSIFICATION	0.06278338066023562	DESIGN
Make sure this is a defined parameter and check the incoming value type TODO: what should be the actual exception type here?	DESIGN	0.9928944133289446	DESIGN	0.007105586671055311	WITHOUT_CLASSIFICATION
TODO : this constructor form is only used from constructor directly below us; can it go away?	DESIGN	0.9857304396288052	DESIGN	0.01426956037119467	WITHOUT_CLASSIFICATION
TODO: COPY/PASTE FROM SessionImpl, pull up!	DESIGN	0.5529526713407723	DESIGN	0.4470473286592275	WITHOUT_CLASSIFICATION
TODO : should remove this exposure and have all references to the session's batcher use the ConnectionManager.	DESIGN	0.8308910729424651	DESIGN	0.16910892705753477	WITHOUT_CLASSIFICATION
todo : should this get moved to PersistentContext? logically, is PersistentContext the "thing" to which an interceptor gets attached?	DESIGN	0.9856020136603797	WITHOUT_CLASSIFICATION	0.014397986339620339	DESIGN
TODO: what type?	DESIGN	0.8282224597361106	WITHOUT_CLASSIFICATION	0.17177754026388942	DESIGN
todo : should seriously consider not allowing a txn to begin from a child session can always route the request to the root session...	DESIGN	0.9961001213647666	WITHOUT_CLASSIFICATION	0.003899878635233409	DESIGN
short-circuit for performance...	DESIGN	0.9988316868548457	WITHOUT_CLASSIFICATION	0.0011683131451543701	DESIGN
not absolutely necessary, but does help with aggressive release	DESIGN	0.9998031931238573	WITHOUT_CLASSIFICATION	1.9680687614275153E-4	DESIGN
TODO : remove these last two as batcher is no longer managing connections	DESIGN	0.5139103424396718	DESIGN	0.48608965756032824	WITHOUT_CLASSIFICATION
work around a bug in all known connection pools....	DESIGN	0.9988773655860893	WITHOUT_CLASSIFICATION	0.0011226344139107145	DESIGN
TODO : make this the factory for "entity mode related" sessions; also means making this the target of transaction-synch and the thing that knows how to cascade things between related sessions At that point, perhaps this thing is a "SessionContext", and ConnectionManager is a "JDBCContext"? A "SessionContext" should live in the impl package...	DESIGN	0.9999711361230726	DESIGN	2.8863876927283336E-5	WITHOUT_CLASSIFICATION
TODO: does this really need to be here? does the collection already have it's own up-to-date snapshot?	DESIGN	0.9933474620699642	DESIGN	0.0066525379300359086	WITHOUT_CLASSIFICATION
TODO: the i==entitySpan-1 bit depends upon subclass implementation (very bad)	DESIGN	0.5054181543013981	DESIGN	0.4945818456986019	WITHOUT_CLASSIFICATION
This form used from annotations (?). Essentially the same as the above using a resultset-mapping reference, but without cacheMode, readOnly, and comment. FIXME: annotations do not use it, so it can be remove from my POV @deprecated @param query The sql query string @param resultSetRef The result-set-mapping name @param querySpaces Any specified query spaces (used for auto-flushing) @param cacheable Whether the query results are cacheable @param cacheRegion If cacheable, the region into which to store the results @param timeout A JDBC-level timeout to be applied @param fetchSize A JDBC-level fetch-size to be applied @param flushMode The flush mode to use for this query @param parameterTypes parameter type map @param callable Does the query string represent a callable object (i.e., proc)	DESIGN	0.9968390264226926	DESIGN	0.003160973577307388	WITHOUT_CLASSIFICATION
todo : add the notion of enabled filters to the CacheKey to differentiate filtered collections from non-filtered; but CacheKey is currently used for both collections and entities; would ideally need to define two seperate ones; currently this works in conjuction with the check on DefaultInitializeCollectionEventHandler.initializeCollectionFromCache() (which makes sure to not read from cache with enabled filters). EARLY EXIT!!!!!	DESIGN	0.9984075652045934	WITHOUT_CLASSIFICATION	0.0015924347954065744	DESIGN
for sets, we should end the collection load after resolving the entities, since we might call hashCode() on the elements TODO: or we could do this polymorphically, and have two different operations implemented differently for arrays	DESIGN	0.7314431181208912	DESIGN	0.26855688187910876	WITHOUT_CLASSIFICATION
This is not very nice (and quite slow):	DESIGN	0.9911085008715695	WITHOUT_CLASSIFICATION	0.008891499128430493	DESIGN
use of trim() here is ugly?	DESIGN	0.9997848684455197	WITHOUT_CLASSIFICATION	2.1513155448021467E-4	DESIGN
TODO: this is too conservative; if all preceding joins were also inner joins, we could use an inner join here	DESIGN	0.6886301978217652	DESIGN	0.3113698021782349	WITHOUT_CLASSIFICATION
TODO: look at the owning property and check that it isn't lazy (by instrumentation)	DESIGN	0.5635717997055062	WITHOUT_CLASSIFICATION	0.4364282002944939	DESIGN
TODO: inefficient	DESIGN	0.9081609898088744	WITHOUT_CLASSIFICATION	0.09183901019112561	DESIGN
why does this matter?	DESIGN	0.9994609970057755	WITHOUT_CLASSIFICATION	5.390029942244567E-4	DESIGN
from the collection of associations, locate OJA for the ManyToOne corresponding to this persister to fully define the many-to-many; we need that OJA so that we can use its alias here TODO : is there a better way here?	DESIGN	0.9998965411020574	DESIGN	1.0345889794264266E-4	WITHOUT_CLASSIFICATION
TODO: this class depends directly upon CriteriaImpl, in the impl package ... add a CriteriaImplementor interface	DESIGN	0.922484173006195	DESIGN	0.07751582699380502	WITHOUT_CLASSIFICATION
TODO: add a CriteriaImplementor interface this class depends directly upon CriteriaImpl in the impl package...	DESIGN	0.5561270569953835	DESIGN	0.44387294300461666	WITHOUT_CLASSIFICATION
TODO : not so sure this is needed...	DESIGN	0.750705926162359	DESIGN	0.24929407383764102	WITHOUT_CLASSIFICATION
meant to handle dynamic instantiation queries...(Copy from QueryLoader)	DESIGN	0.9968874610485661	WITHOUT_CLASSIFICATION	0.003112538951433945	DESIGN
TODO: The order in which entities are saved may matter (e.g., a particular transient entity may need to be saved before other transient entities can be saved; Keep retrying the batch of transient entities until either: 1) there are no transient entities left in transientCopyCache or 2) no transient entities were saved in the last batch For now, just run through the transient entities and retry the merge	DESIGN	0.9831845586120618	WITHOUT_CLASSIFICATION	0.016815441387938196	DESIGN
todo: this might really even be moved into the cfg package and used as the basis for all things which are configurable.	DESIGN	0.5385267782381921	DESIGN	0.461473221761808	WITHOUT_CLASSIFICATION
todo : currently expects that the individual with expressions apply to the same sql table join. This may not be the case for joined-subclass where the property values might be coming from different tables in the joined hierarchy. At some point we should expand this to support that capability. However, that has some difficulties: 1) the biggest is how to handle ORs when the individual comparisons are linked to different sql joins. 2) here we would need to track each comparison individually, along with the join alias to which it applies and then pass that information back to the FromElement so it can pass it along to the JoinSequence	DESIGN	0.941205980182365	DESIGN	0.05879401981763498	WITHOUT_CLASSIFICATION
this function has a template -> restore output, apply the template and write the result out TODO: Downcast to avoid using an interface? Yuck.	DESIGN	0.6415999828841092	WITHOUT_CLASSIFICATION	0.3584000171158907	DESIGN
at some point the generate phase needs to be moved out of here, because a single object-level DML might spawn multiple SQL DML command executions. Possible to just move the sql generation for dml stuff, but for consistency-sake probably best to just move responsiblity for the generation phase completely into the delegates (QueryLoader/StatementExecutor) themselves. Also, not sure why QueryLoader currently even has a dependency on this at all; does it need it? Ideally like to see the walker itself given to the delegates directly...	DESIGN	0.9950777655734643	DESIGN	0.0049222344265357825	WITHOUT_CLASSIFICATION
get the right object from the list ... would it be easier to just call getEntity() ??	DESIGN	0.9394504450853532	WITHOUT_CLASSIFICATION	0.06054955491464664	DESIGN
TODO should we just collect these like with the collections above?	DESIGN	0.7928509231153267	DESIGN	0.20714907688467338	WITHOUT_CLASSIFICATION
todo : better to handle dynamic filters through implicit DynamicFilterParameterSpecification see the discussion there in DynamicFilterParameterSpecification's javadocs as to why it is currently not done that way.	DESIGN	0.9744848299246189	WITHOUT_CLASSIFICATION	0.025515170075381056	DESIGN
/ USED ONLY FOR REGRESSION TESTING!!!! todo : obviously get rid of all this junk ;) /	DESIGN	0.999273584421518	WITHOUT_CLASSIFICATION	7.264155784819526E-4	DESIGN
create an index on the key columns??	DESIGN	0.9998537812403613	WITHOUT_CLASSIFICATION	1.4621875963871298E-4	DESIGN
TODO: deprecated, remove eventually	DESIGN	0.5330677906111263	DESIGN	0.46693220938887364	WITHOUT_CLASSIFICATION
create an index on the key columns??	DESIGN	0.9998537812403613	WITHOUT_CLASSIFICATION	1.4621875963871298E-4	DESIGN
TODO: improve this hack!	DESIGN	0.8583208667562685	WITHOUT_CLASSIFICATION	0.14167913324373146	DESIGN
inheritance cycle detection (paranoid check)	DESIGN	0.9984718343222226	WITHOUT_CLASSIFICATION	0.0015281656777773498	DESIGN
TODO: remove use of instanceof!	DESIGN	0.5463711779675231	DESIGN	0.45362882203247684	WITHOUT_CLASSIFICATION
shortcut	DESIGN	0.9999269075807882	WITHOUT_CLASSIFICATION	7.309241921190707E-5	DESIGN
TODO: handle the case of a foreign key to something other than the pk	DESIGN	0.5659322171276003	WITHOUT_CLASSIFICATION	0.4340677828723997	DESIGN
create an index on the key columns??	DESIGN	0.9998537812403613	WITHOUT_CLASSIFICATION	1.4621875963871298E-4	DESIGN
todo : remove	DESIGN	0.9999685125003354	WITHOUT_CLASSIFICATION	3.1487499664643494E-5	DESIGN
todo : remove	DESIGN	0.9999685125003354	WITHOUT_CLASSIFICATION	3.1487499664643494E-5	DESIGN
todo : remove	DESIGN	0.9999685125003354	WITHOUT_CLASSIFICATION	3.1487499664643494E-5	DESIGN
todo : throw exception?	DESIGN	0.9998430587129025	WITHOUT_CLASSIFICATION	1.5694128709758007E-4	DESIGN
todo : throw exception? maybe warn if not the same?	DESIGN	0.9945624019932023	WITHOUT_CLASSIFICATION	0.0054375980067976806	DESIGN
TODO: make EntityPersister not depend on SessionFactoryImplementor interface, if possible	DESIGN	0.9010343353744061	DESIGN	0.09896566462559382	WITHOUT_CLASSIFICATION
TODO: is there a more elegant way than downcasting?	DESIGN	0.989392028565064	DESIGN	0.010607971434935914	WITHOUT_CLASSIFICATION
TODO: encapsulate the protected instance variables!	DESIGN	0.5074893739525289	DESIGN	0.49251062604747115	WITHOUT_CLASSIFICATION
should indicate that we are processing an INSERT/UPDATE/DELETE query with a subquery implied via a collection property function. Here, we need to use the table name itself as the qualification alias. TODO : verify this works for all databases... TODO : is this also the case in non-"indexed" scenarios?	DESIGN	0.9915777361339136	DESIGN	0.008422263866086457	WITHOUT_CLASSIFICATION
TODO: copy/paste from insertRows()	DESIGN	0.6541265146465216	DESIGN	0.3458734853534785	WITHOUT_CLASSIFICATION
TODO: copy/paste from recreate()	DESIGN	0.6541265146465216	DESIGN	0.3458734853534785	WITHOUT_CLASSIFICATION
should this interface extend PropertyMapping?	DESIGN	0.9789366001677418	WITHOUT_CLASSIFICATION	0.021063399832258273	DESIGN
ie. the subquery! yuck!	DESIGN	0.9999851311530998	WITHOUT_CLASSIFICATION	1.4868846900064337E-5	DESIGN
TODO: move to .sql package!!	DESIGN	0.7516574435322011	WITHOUT_CLASSIFICATION	0.24834255646779888	DESIGN
TODO: code duplication with SingleTableEntityPersister	DESIGN	0.9263776850777085	DESIGN	0.07362231492229154	WITHOUT_CLASSIFICATION
TODO: It would be really, really nice to use this to also model components!	DESIGN	0.9871338282163454	DESIGN	0.012866171783654555	WITHOUT_CLASSIFICATION
TODO: two hashmap lookups here is one too many...	DESIGN	0.8904833634377488	DESIGN	0.10951663656225116	WITHOUT_CLASSIFICATION
TODO: code duplication with JoinedSubclassEntityPersister	DESIGN	0.9263776850777085	DESIGN	0.07362231492229154	WITHOUT_CLASSIFICATION
perhaps not really necessary...	DESIGN	0.9991458292289151	WITHOUT_CLASSIFICATION	8.541707710847914E-4	DESIGN
NOTE: this assumes something about how propertySelectFragment is implemented by the subclass! was toUnqotedAliasStrings( getIdentiferColumnNames() ) before - now tried to remove that unqoting and missing aliases..	DESIGN	0.9997426188405077	WITHOUT_CLASSIFICATION	2.573811594922889E-4	DESIGN
NOTE: this assumes something about how propertySelectFragment is implemented by the subclass! was toUnqotedAliasStrings( getdiscriminatorColumnName() ) before - now tried to remove that unqoting and missing aliases..	DESIGN	0.9997426188405077	WITHOUT_CLASSIFICATION	2.573811594922889E-4	DESIGN
TODO: should we use SELECT .. FOR UPDATE?	DESIGN	0.93735926090331	DESIGN	0.06264073909669007	WITHOUT_CLASSIFICATION
TODO: optimize this better!	DESIGN	0.8331061577812511	WITHOUT_CLASSIFICATION	0.166893842218749	DESIGN
TODO: should we allow suffixes on these ?	DESIGN	0.996489496993271	DESIGN	0.0035105030067288713	WITHOUT_CLASSIFICATION
This is really ugly, but necessary:	DESIGN	0.9979641020844362	WITHOUT_CLASSIFICATION	0.0020358979155637703	DESIGN
ugly little workaround for fact that createUniqueKeyLoaders() does not handle component properties	DESIGN	0.9445499875069806	WITHOUT_CLASSIFICATION	0.05545001249301928	DESIGN
TODO: disable batch loading if lockMode > READ?	DESIGN	0.6104842949166684	DESIGN	0.38951570508333144	WITHOUT_CLASSIFICATION
append the SQL to return the generated identifier TODO: suck into Insert	DESIGN	0.7530466740132388	DESIGN	0.24695332598676126	WITHOUT_CLASSIFICATION
TODO: I am not so sure about the exception handling in this bit!	DESIGN	0.831317038881885	DESIGN	0.16868296111811493	WITHOUT_CLASSIFICATION
TODO: is this really necessary????	DESIGN	0.7617528517509823	DESIGN	0.2382471482490178	WITHOUT_CLASSIFICATION
TODO: move to .sql package, and refactor with similar things!	DESIGN	0.8130982024631632	DESIGN	0.18690179753683686	WITHOUT_CLASSIFICATION
TODO: implement functionality this might be painful to do here, as the "join post processing" for the subquery has already been performed (meaning that for theta-join dialects, the join conditions have already been moved over to the where clause). A "simple" solution here might to perform "join post processing" once for the entire query (including any subqueries) at one fell swoop	DESIGN	0.999923400715984	DESIGN	7.659928401598555E-5	WITHOUT_CLASSIFICATION
todo : this eventually needs to be removed	DESIGN	0.988205998528599	WITHOUT_CLASSIFICATION	0.011794001471401092	DESIGN
kinda ugly, but needed for collections with a "." node mapping	DESIGN	0.999325703417079	WITHOUT_CLASSIFICATION	6.742965829208957E-4	DESIGN
is this ok?	DESIGN	0.9998399170653759	WITHOUT_CLASSIFICATION	1.6008293462418978E-4	DESIGN
TODO: perhaps this should be some other RuntimeException...	DESIGN	0.9834227387614269	DESIGN	0.01657726123857298	WITHOUT_CLASSIFICATION
TODO: make this a bit nicer	DESIGN	0.666320310902472	DESIGN	0.33367968909752793	WITHOUT_CLASSIFICATION
Yuck:	DESIGN	0.9999113734108903	WITHOUT_CLASSIFICATION	8.862658910963415E-5	DESIGN
TODO: we should provide some way to get keys of collection of statistics to make it easier to retrieve from a GUI perspective	DESIGN	0.9980068731295589	DESIGN	0.001993126870440981	WITHOUT_CLASSIFICATION
@return collection removal FIXME: even if isInverse="true"?	DESIGN	0.980471082190043	WITHOUT_CLASSIFICATION	0.019528917809957008	DESIGN
TODO : will need reference to session factory to fully complete HHH-1907	DESIGN	0.8859841473402477	DESIGN	0.11401585265975231	WITHOUT_CLASSIFICATION
TODO: currently keeps Getters and Setters (instead of PropertyAccessors) because of the way getGetter() and getSetter() are implemented currently; yuck!	DESIGN	0.6605320928617163	WITHOUT_CLASSIFICATION	0.3394679071382836	DESIGN
TODO: redesign how PropertyAccessors are acquired...	DESIGN	0.5112881255174572	DESIGN	0.48871187448254283	WITHOUT_CLASSIFICATION
todo : YUCK!!!	DESIGN	0.9999632197260492	WITHOUT_CLASSIFICATION	3.6780273950842436E-5	DESIGN
TODO : YUCK!!! fix after HHH-1907 is complete	DESIGN	0.9798478126685642	DESIGN	0.020152187331435676	WITHOUT_CLASSIFICATION
TODO: need to make the majority of this functionality into a top-level support class for custom impl support	DESIGN	0.9993485968630306	DESIGN	6.514031369694451E-4	WITHOUT_CLASSIFICATION
TODO: design new lifecycle for ProxyFactory	DESIGN	0.6842558158374811	DESIGN	0.31574418416251887	WITHOUT_CLASSIFICATION
TODO: would be nice to handle proxy classes elegantly!	DESIGN	0.8268458391702633	DESIGN	0.17315416082973673	WITHOUT_CLASSIFICATION
TODO: copy/paste from ManyToOneType	DESIGN	0.6541265146465216	DESIGN	0.3458734853534785	WITHOUT_CLASSIFICATION
TODO: should this be Session.instantiate(Persister, ...)?	DESIGN	0.9515544954816821	DESIGN	0.04844550451831775	WITHOUT_CLASSIFICATION
TODO: this is a bit arbitrary, expose a switch to the user?	DESIGN	0.8053257076348097	DESIGN	0.1946742923651903	WITHOUT_CLASSIFICATION
TODO: implement caching?! proxies?!	DESIGN	0.8512420328281877	DESIGN	0.14875796717181236	WITHOUT_CLASSIFICATION
TODO: is this right??	DESIGN	0.7767813435643085	WITHOUT_CLASSIFICATION	0.2232186564356915	DESIGN
is this really necessary?	DESIGN	0.9998989814307376	WITHOUT_CLASSIFICATION	1.0101856926240918E-4	DESIGN
TODO: move these to a new JoinableType abstract class, extended by EntityType and PersistentCollectionType:	DESIGN	0.956948665699306	DESIGN	0.043051334300693994	WITHOUT_CLASSIFICATION
TODO: this is very suboptimal for some subclasses (namely components), since it does not take advantage of two-phase-load	DESIGN	0.6434359523658534	DESIGN	0.35656404763414656	WITHOUT_CLASSIFICATION
worrying about proxies is perhaps a little bit of overkill here...	DESIGN	0.9951968033263806	WITHOUT_CLASSIFICATION	0.00480319667361942	DESIGN
NOTE VERY HACKISH WORKAROUND!! TODO: Fix this so it will work for non-POJO entity mode	DESIGN	0.7348149735080036	DESIGN	0.2651850264919964	WITHOUT_CLASSIFICATION
TODO: Fix this so it will work for non-POJO entity mode	DESIGN	0.737772018547608	DESIGN	0.26222798145239196	WITHOUT_CLASSIFICATION
We would probably refactor to have LogicParser (builds a tree of simple expressions connected by and, or, not), ExpressionParser (translates from OO terms like foo, foo.Bar, foo.Bar.Baz to SQL terms like FOOS.ID, FOOS.BAR_ID, etc) and PathExpressionParser (which does much the same thing it does now)	DESIGN	0.9095165341770038	WITHOUT_CLASSIFICATION	0.09048346582299623	DESIGN
TODO: this is a little inefficient, don't need to do a whole deep replaceElements() call	DESIGN	0.9979439141807155	DESIGN	0.0020560858192844684	WITHOUT_CLASSIFICATION
workaround for WebLogic	DESIGN	0.9971835245072304	WITHOUT_CLASSIFICATION	0.002816475492769634	DESIGN
TODO: this dependency is kinda Bad	DESIGN	0.9821287430611437	DESIGN	0.017871256938856293	WITHOUT_CLASSIFICATION
ick!	DESIGN	0.9999113734108903	WITHOUT_CLASSIFICATION	8.862658910963415E-5	DESIGN
short cut check...	DESIGN	0.9999400375060352	WITHOUT_CLASSIFICATION	5.996249396490367E-5	DESIGN
todo : move to StringHelper?	DESIGN	0.9998798439672733	WITHOUT_CLASSIFICATION	1.2015603272682145E-4	DESIGN
yukky! Don't you have subclasses for that! TODO race conditions can happen here	DESIGN	0.763202218257106	DESIGN	0.23679778174289406	WITHOUT_CLASSIFICATION
TODO: We probably should have a StatisticsNotPublishedException, to make it clean	DESIGN	0.9922431776450878	DESIGN	0.00775682235491212	WITHOUT_CLASSIFICATION
FIXME hack to work around fact that calling Node added = root.addChild( fqn ); doesn't properly set the version on the node	DESIGN	0.9992292138282293	WITHOUT_CLASSIFICATION	7.707861717707417E-4	DESIGN
TODO: I considered validating the presence of the TS cache here, but decided to defer unti getQueryCacheInstance() in case the cache is never actually used	DESIGN	0.5276740849075269	WITHOUT_CLASSIFICATION	0.4723259150924733	DESIGN
need to do that here rather than in the save event listener to let the post insert events to have a id-filled entity when IDENTITY is used (EJB3)	DESIGN	0.8671888630922893	WITHOUT_CLASSIFICATION	0.1328111369077107	DESIGN
TODO: simply remove this override if we fix the above todos	DESIGN	0.986988310014056	DESIGN	0.013011689985944097	WITHOUT_CLASSIFICATION
This, is used by SessionFactoryImpl to hand to the generated SessionImpl; was the only reason I could see that we cannot just use null as Settings.cacheProvider	DESIGN	0.9981216518263902	WITHOUT_CLASSIFICATION	0.0018783481736098227	DESIGN
this is done here 'cos we might only know the type here (ugly!) TODO: improve this a lot:	DESIGN	0.995586991728779	DESIGN	0.0044130082712211345	WITHOUT_CLASSIFICATION
todo : would love to have this work on a notification basis where the successful binding of an entity/subclass would emit a notification which the extendsQueue entries could react to...	DESIGN	0.9985491445431174	WITHOUT_CLASSIFICATION	0.0014508554568826168	DESIGN
TODO : not sure the best way to handle this. The non-performant way :	DESIGN	0.7065575300876503	DESIGN	0.2934424699123498	WITHOUT_CLASSIFICATION
would be better to use the element-type to determine whether the old and the new are equal here; the problem being we do not necessarily have access to the element type in all cases	DESIGN	0.8900592760487726	WITHOUT_CLASSIFICATION	0.10994072395122739	DESIGN
This next bit is to allow for both unsaved-value="negative" and for "older" behavior where version number did not get seeded if it was already set in the object TODO: shift it into unsaved-value strategy	DESIGN	0.999905494907078	DESIGN	9.45050929220292E-5	WITHOUT_CLASSIFICATION
merges don't cascade to uninitialized collections TODO: perhaps this does need to cascade after all....	DESIGN	0.9884918920546835	DESIGN	0.011508107945316402	WITHOUT_CLASSIFICATION
TODO: an alternative is to check if the owner has changed; if it hasn't then return collection.getOwner()	DESIGN	0.846470991262333	WITHOUT_CLASSIFICATION	0.15352900873766695	DESIGN
it is possible that the tree-walking in OuterJoinLoader can get to an association defined by a subclass, in which case the property-ref might refer to a property defined on a subclass of the current class in this case, the table name is not known - this temporary solution assumes that the property-ref refers to a property of the subclass table that the association belongs to (a reasonable guess) TODO: fix this, add: OuterJoinLoadable.getSubclassPropertyTableName(String propertyName)	DESIGN	0.9996139937082134	DESIGN	3.8600629178663553E-4	WITHOUT_CLASSIFICATION
this only works because collection entries are kept in a sequenced map by persistence context (maybe we should do like entities and keep a separate sequences set...) TODO: calling entrySet on an IdentityMap is SLOW!!	DESIGN	0.9998423988352546	DESIGN	1.576011647453083E-4	WITHOUT_CLASSIFICATION
important, to account for newly saved entities in query todo : some kind of check for new status...	DESIGN	0.9994927835130386	WITHOUT_CLASSIFICATION	5.072164869613779E-4	DESIGN
brand new collection TODO: or an array!! we can't lock objects with arrays now??	DESIGN	0.9090931876801502	DESIGN	0.09090681231984979	WITHOUT_CLASSIFICATION
TODO: if object was an uninitialized proxy, this is inefficient, resulting in two SQL selects	DESIGN	0.9134566078026113	DESIGN	0.0865433921973887	WITHOUT_CLASSIFICATION
before cascade! TODO: should this be Session.instantiate(Persister, ...)?	DESIGN	0.9252530618654254	DESIGN	0.07474693813457449	WITHOUT_CLASSIFICATION
TODO : absolutely no usages of this constructor form; can it go away?	DESIGN	0.545967306497272	DESIGN	0.4540326935027281	WITHOUT_CLASSIFICATION
todo : need to find a clean way to handle the "event source" role a seperate classs responsible for generating/dispatching events just duplicates most of the Session methods... passing around seperate reto interceptor, factory, actionQueue, and persistentContext is not manageable...	DESIGN	0.9702811365575853	WITHOUT_CLASSIFICATION	0.029718863442414725	DESIGN
todo : remove	DESIGN	0.9999685125003354	WITHOUT_CLASSIFICATION	3.1487499664643494E-5	DESIGN
aliasRefNode.resolve( false, false, aliasRefNode.getText() ); TODO: is it kosher to do it here? TODO: is it kosher to do it here?	DESIGN	0.9056100299349871	DESIGN	0.09438997006501303	WITHOUT_CLASSIFICATION
No explicit select expression; render the id and properties projection lists for every persister in the from clause into a single 'token node'. TODO: the only reason we need this stuff now is collection filters, we should get rid of derived select clause completely!	DESIGN	0.9995731866285579	DESIGN	4.2681337144206917E-4	WITHOUT_CLASSIFICATION
TODO : an optimization here would be to consider cascade deletes and not gen those delete statements; the difficulty is the ordering of the tables here vs the cascade attributes on the persisters -> the table info gotten here should really be self-contained (i.e., a class representation defining all the needed attributes), then we could then get an array of those	DESIGN	0.9553092226812839	DESIGN	0.04469077731871611	WITHOUT_CLASSIFICATION
TODO: get SQL rendering out of here, create an AST for the join expressions. Use the SQL generator grammar to generate the SQL text for the index expression.	DESIGN	0.9672294036603787	WITHOUT_CLASSIFICATION	0.03277059633962128	DESIGN
TODO : this really needs to be delayed unitl after we definitively know all node types where this is currently a problem is parameters for which where we cannot unequivocally resolve an expected type	DESIGN	0.9992551187347586	DESIGN	7.448812652413302E-4	WITHOUT_CLASSIFICATION
TODO: Figure out a better way to get the FROM elements in a proper tree structure. If this is not the destination of a many-to-many, add it as a child of the origin.	DESIGN	0.8805900789818301	WITHOUT_CLASSIFICATION	0.11940992101817	DESIGN
work around that crazy issue where the tree contains "empty" FromElements (no text); afaict, this is caused by FromElementFactory.createCollectionJoin()	DESIGN	0.9293389581909479	WITHOUT_CLASSIFICATION	0.07066104180905217	DESIGN
TODO: this class does too many things! we need a different kind of path expression parser for each of the diffferent ways in which path expressions can occur	DESIGN	0.9359837002329014	DESIGN	0.06401629976709854	WITHOUT_CLASSIFICATION
real hacky... used to count the nesting of parentheses	DESIGN	0.9995172729978221	WITHOUT_CLASSIFICATION	4.8272700217790924E-4	DESIGN
TODO : would be really nice to cache the spec on the query-def so as to not have to re-calc the hash; currently not doable though because of the resultset-ref stuff...	DESIGN	0.7490465845271065	WITHOUT_CLASSIFICATION	0.25095341547289346	DESIGN
for arrays, we should end the collection load before resolving the entities, since the actual array instances are not instantiated during loading TODO: or we could do this polymorphically, and have two different operations implemented differently for arrays	DESIGN	0.5471841235111151	DESIGN	0.4528158764888849	WITHOUT_CLASSIFICATION
polymorphism not really handled completely correctly, perhaps...well, actually its ok, assuming that the entity name used in the lookup is the same as the the one used here, which it will be	DESIGN	0.9955377215213019	WITHOUT_CLASSIFICATION	0.004462278478698046	DESIGN
TODO: should "record" how many properties we have reffered to - and if we don't get'em'all we throw an exception! Way better than trial and error ;)	DESIGN	0.9988420415377642	DESIGN	0.0011579584622357548	WITHOUT_CLASSIFICATION
VERY IMPORTANT!!!! - This class needs to be free of any static references to any CGLIB or Javassist classes. Otherwise, users will always need both on their classpaths no matter which (if either) they use. Another option here would be to remove the Hibernate.isPropertyInitialized() method and have the users go through the SessionFactory to get this information.	DESIGN	0.8897351216367817	DESIGN	0.1102648783632183	WITHOUT_CLASSIFICATION
TODO: is it really neceassry to provide Configuration to CollectionPersisters ? Should it not be enough with associated class ? or why does EntityPersister's not get access to configuration ? The only reason I could see that Configuration gets passed to collection persisters is so that they can look up the dom4j node name of the entity element in case no explicit node name was applied at the collection element level. Are you kidding me? Trivial to fix then. Just store and expose the node name on the entity persister (which the collection persister looks up anyway via other means...).	DESIGN	0.9993254964505104	DESIGN	6.745035494895715E-4	WITHOUT_CLASSIFICATION
for backward compatibility, allow a set with no not-null element columns, using all columns in the row locater SQL TODO: create an implicit not null constraint on all cols?	DESIGN	0.847779667673335	DESIGN	0.15222033232666501	WITHOUT_CLASSIFICATION
SPACES TODO: i'm not sure, but perhaps we should exclude abstract denormalized tables?	DESIGN	0.9519676534821686	DESIGN	0.04803234651783143	WITHOUT_CLASSIFICATION
workaround, for backward compatibility of sets with no not-null columns, assume all columns are used in the row locator SQL	DESIGN	0.9997305912848469	WITHOUT_CLASSIFICATION	2.694087151530595E-4	DESIGN
note that this method could easily be moved up to BasicEntityPersister, if we ever needed to reuse it from other subclasses	DESIGN	0.9124420540502493	WITHOUT_CLASSIFICATION	0.08755794594975083	DESIGN
index += getPropertyColumnSpan( i ); TODO: this is kinda slow...	DESIGN	0.6940887997334617	DESIGN	0.30591120026653834	WITHOUT_CLASSIFICATION
TODO: need some caching scheme? really comes down to decision regarding amount of state (if any) kept on PropertyAccessors	DESIGN	0.8533195555335731	DESIGN	0.14668044446642703	WITHOUT_CLASSIFICATION
TODO: here is why we need to make bytecode provider global :( TODO : again, fix this after HHH-1907 is complete	DESIGN	0.9999999952015064	DESIGN	4.798493688038681E-9	WITHOUT_CLASSIFICATION
TODO: Yuck! This is not quite good enough, it's a quick hack around the problem of having a to-one association that refers to an embedded component:	DESIGN	0.9987959497363293	DESIGN	0.0012040502636706742	WITHOUT_CLASSIFICATION
for DOM4J "collections" only TODO: it would be better if this was done at the higher level by Printer	DESIGN	0.9937265337858083	DESIGN	0.006273466214191661	WITHOUT_CLASSIFICATION
would be great to move all this below here into another method that could also be used from the new scrolling stuff. Would need to change the way the max-row stuff is handled (i.e. behind an interface) so that I could do the control breaking at the means to know when to stop	DESIGN	0.9958370958287195	DESIGN	0.004162904171280547	WITHOUT_CLASSIFICATION
TODO: can we always use the "null property" approach for everything?	DESIGN	0.8040433394692594	DESIGN	0.19595666053074057	WITHOUT_CLASSIFICATION
polymorphism comment above	DESIGN	0.9999863580983055	WITHOUT_CLASSIFICATION	1.364190169462996E-5	DESIGN
some messy, complex stuff here, since createCriteria() can take an aliased path, or a path rooted at the creating criteria instance	DESIGN	0.9999516119345989	WITHOUT_CLASSIFICATION	4.838806540102992E-5	DESIGN
TODO: really bad, evil hack to fix!!!	DESIGN	0.9897451852108118	DESIGN	0.010254814789188337	WITHOUT_CLASSIFICATION
ugly hack for cases like "elements(foo.bar.collection)" (multi-part path expression ending in elements or indices)	DESIGN	0.9690544929396911	WITHOUT_CLASSIFICATION	0.030945507060308828	DESIGN
try block is a hack around fact that currently tuplizers are not given the opportunity to resolve a subclass entity name. this allows the (we assume custom) interceptor the ability to influence this decision if we were not able to based on the given entityName	DESIGN	0.661445844441808	WITHOUT_CLASSIFICATION	0.33855415555819207	DESIGN
/ HACK ALERT !!!!!!!!!!!!!!!!!!!!!!!!!!!! Attempt to work around "ghost" ImpliedFromElements that occasionally show up between the actual things being joined. This consistently occurs from index nodes (at least against many-to-many). Not sure if there are other conditions Essentially, look-ahead to the next FromElement that actually writes something to the SQL	DESIGN	0.9995920183050305	WITHOUT_CLASSIFICATION	4.079816949694693E-4	DESIGN
init the table here instead of earlier, so that we can get a quoted table name TODO: would it be better to simply pass the qualified table name, instead of splitting it up into schema/catalog/table names	DESIGN	0.9980082313870519	DESIGN	0.0019917686129482	WITHOUT_CLASSIFICATION
TODO : would be great to have a Mapping#hasNonIdentifierPropertyNamedId method I don't believe that Mapping#getReferencedPropertyType accounts for the identifier property; so if it returns for a property named 'id', then we should have a non-id field named id	DESIGN	0.9987614776213289	DESIGN	0.0012385223786710903	WITHOUT_CLASSIFICATION
TODO: is this really necessary????	DESIGN	0.7617528517509823	DESIGN	0.2382471482490178	WITHOUT_CLASSIFICATION
TODO: ideally we need the construction of PropertyAccessor to take the following: 1) EntityMode 2) EntityMode-specific data (i.e., the classname for pojo entities) 3) Property-specific data based on the EntityMode (i.e., property-name or dom4j-node-name) The easiest way, with the introduction of the new runtime-metamodel classes, would be the the following predicates: 1) PropertyAccessorFactory.getPropertyAccessor() takes references to both a org.hibernate.metadata.EntityModeMetadata and org.hibernate.metadata.Property 2) What is now termed a "PropertyAccessor" stores any values needed from those two pieces of information 3) Code can then simply call PropertyAccess.getGetter() with no parameters; likewise with PropertyAccessor.getSetter()	DESIGN	0.9876243685334537	DESIGN	0.012375631466546284	WITHOUT_CLASSIFICATION
TODO: this is temporary in that the end result will probably not take a Property reference per-se.	DESIGN	0.9775319975639838	DESIGN	0.022468002436016193	WITHOUT_CLASSIFICATION
todo : this eventually needs to be removed	DESIGN	0.988205998528599	WITHOUT_CLASSIFICATION	0.011794001471401092	DESIGN
TODO: make this a bit nicer	DESIGN	0.666320310902472	DESIGN	0.33367968909752793	WITHOUT_CLASSIFICATION
todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.9917564856435753	WITHOUT_CLASSIFICATION	0.00824351435642474	DESIGN
todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.9917564856435753	WITHOUT_CLASSIFICATION	0.00824351435642474	DESIGN
todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.9917564856435753	WITHOUT_CLASSIFICATION	0.00824351435642474	DESIGN
todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.9917564856435753	WITHOUT_CLASSIFICATION	0.00824351435642474	DESIGN
todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.9917564856435753	WITHOUT_CLASSIFICATION	0.00824351435642474	DESIGN
todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.9917564856435753	WITHOUT_CLASSIFICATION	0.00824351435642474	DESIGN
todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.9917564856435753	WITHOUT_CLASSIFICATION	0.00824351435642474	DESIGN
todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.9917564856435753	WITHOUT_CLASSIFICATION	0.00824351435642474	DESIGN
FIXME Per the RegionFactory class Javadoc, this constructor version should not be necessary. @param props The configuration properties	DESIGN	0.9989345864264997	WITHOUT_CLASSIFICATION	0.0010654135735003	DESIGN
FIXME Per the RegionFactory class Javadoc, this constructor version should not be necessary. @param props The configuration properties	DESIGN	0.9989345864264997	WITHOUT_CLASSIFICATION	0.0010654135735003	DESIGN
FIXME Per the RegionFactory class Javadoc, this constructor version should not be necessary. @param props The configuration properties	DESIGN	0.9989345864264997	WITHOUT_CLASSIFICATION	0.0010654135735003	DESIGN
TODO : probably better to calculate these and pass them in, as it'll be more performant	DESIGN	0.9818028868893492	DESIGN	0.018197113110650753	WITHOUT_CLASSIFICATION
