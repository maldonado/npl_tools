test out the optimizer:	WITHOUT_CLASSIFICATION	0.9999082868721131	WITHOUT_CLASSIFICATION	9.171312788690864E-5	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9991288176721137	WITHOUT_CLASSIFICATION	8.711823278862698E-4	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9991288176721137	WITHOUT_CLASSIFICATION	8.711823278862698E-4	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9991288176721137	WITHOUT_CLASSIFICATION	8.711823278862698E-4	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9991288176721137	WITHOUT_CLASSIFICATION	8.711823278862698E-4	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9991288176721137	WITHOUT_CLASSIFICATION	8.711823278862698E-4	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9991288176721137	WITHOUT_CLASSIFICATION	8.711823278862698E-4	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9991288176721137	WITHOUT_CLASSIFICATION	8.711823278862698E-4	DESIGN
return	WITHOUT_CLASSIFICATION	0.9990440770325145	WITHOUT_CLASSIFICATION	9.559229674855302E-4	DESIGN
return	WITHOUT_CLASSIFICATION	0.9990440770325145	WITHOUT_CLASSIFICATION	9.559229674855302E-4	DESIGN
| this | bean | args | raw bean |	WITHOUT_CLASSIFICATION	0.9990507089807729	WITHOUT_CLASSIFICATION	9.492910192270134E-4	DESIGN
invokeinterface	WITHOUT_CLASSIFICATION	0.9998192731054069	WITHOUT_CLASSIFICATION	1.8072689459315214E-4	DESIGN
astore 4 store the raw bean	WITHOUT_CLASSIFICATION	0.9999510206752072	WITHOUT_CLASSIFICATION	4.89793247927398E-5	DESIGN
current stack len = 0	WITHOUT_CLASSIFICATION	0.9999868687561213	WITHOUT_CLASSIFICATION	1.3131243878825688E-5	DESIGN
current stack len = 0	WITHOUT_CLASSIFICATION	0.9999868687561213	WITHOUT_CLASSIFICATION	1.3131243878825688E-5	DESIGN
local variables | target obj | each oldvalue |	WITHOUT_CLASSIFICATION	0.9998662892193775	WITHOUT_CLASSIFICATION	1.337107806224269E-4	DESIGN
invokeinterface invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9995182742572101	WITHOUT_CLASSIFICATION	4.8172574278998627E-4	DESIGN
putfield new value of the field	WITHOUT_CLASSIFICATION	0.9998473967534665	WITHOUT_CLASSIFICATION	1.5260324653348939E-4	DESIGN
reference type	WITHOUT_CLASSIFICATION	0.9992605657246938	WITHOUT_CLASSIFICATION	7.394342753062819E-4	DESIGN
double	WITHOUT_CLASSIFICATION	0.9999007148636744	WITHOUT_CLASSIFICATION	9.92851363256458E-5	DESIGN
double	WITHOUT_CLASSIFICATION	0.9999007148636744	WITHOUT_CLASSIFICATION	9.92851363256458E-5	DESIGN
long	WITHOUT_CLASSIFICATION	0.9991005394068276	WITHOUT_CLASSIFICATION	8.994605931724193E-4	DESIGN
just decrement the lock, don't recache (we don't know which transaction won)	WITHOUT_CLASSIFICATION	0.9998206162565998	WITHOUT_CLASSIFICATION	1.7938374340010688E-4	DESIGN
decode row selection...	WITHOUT_CLASSIFICATION	0.999778070982266	WITHOUT_CLASSIFICATION	2.219290177339553E-4	DESIGN
disassembled state gets put in a new array (we write to cache by value!)	WITHOUT_CLASSIFICATION	0.999725186415193	WITHOUT_CLASSIFICATION	2.748135848069652E-4	DESIGN
again, CCS did not have such a concept; but a reasonable proximity is to clear the cache after transaction as long as the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9994227327194648	WITHOUT_CLASSIFICATION	5.772672805351624E-4	DESIGN
CHECK	WITHOUT_CLASSIFICATION	0.9991288176721137	WITHOUT_CLASSIFICATION	8.711823278862698E-4	DESIGN
ROW ID	WITHOUT_CLASSIFICATION	0.9990296182232871	WITHOUT_CLASSIFICATION	9.703817767128757E-4	DESIGN
COMPOSITE-ID	WITHOUT_CLASSIFICATION	0.9998192731054069	WITHOUT_CLASSIFICATION	1.8072689459315214E-4	DESIGN
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9998192731054069	WITHOUT_CLASSIFICATION	1.8072689459315214E-4	DESIGN
Property prop = new Property(); prop.setName("id"); prop.setPropertyAccessorName("embedded"); prop.setValue(id); entity.setIdentifierProperty(prop);	WITHOUT_CLASSIFICATION	0.999795227707542	WITHOUT_CLASSIFICATION	2.047722924578623E-4	DESIGN
DYNAMIC INSERT	WITHOUT_CLASSIFICATION	0.9998192731054069	WITHOUT_CLASSIFICATION	1.8072689459315214E-4	DESIGN
PERSISTER	WITHOUT_CLASSIFICATION	0.9991288176721137	WITHOUT_CLASSIFICATION	8.711823278862698E-4	DESIGN
get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.999107327002244	WITHOUT_CLASSIFICATION	8.926729977559937E-4	DESIGN
PROPERTIES	WITHOUT_CLASSIFICATION	0.9991315044382222	WITHOUT_CLASSIFICATION	8.684955617778119E-4	DESIGN
PROPERTIES	WITHOUT_CLASSIFICATION	0.9991315044382222	WITHOUT_CLASSIFICATION	8.684955617778119E-4	DESIGN
generated properties can never be insertable...	WITHOUT_CLASSIFICATION	0.9992410107252553	WITHOUT_CLASSIFICATION	7.589892747447429E-4	DESIGN
TABLE	WITHOUT_CLASSIFICATION	0.9991373280923079	WITHOUT_CLASSIFICATION	8.626719076920847E-4	DESIGN
by default, natural-ids are "immutable" (constant)	WITHOUT_CLASSIFICATION	0.999803287928581	WITHOUT_CLASSIFICATION	1.9671207141908572E-4	DESIGN
( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9994356187070618	WITHOUT_CLASSIFICATION	5.643812929381081E-4	DESIGN
we found some extends attributes referencing entities which were not already processed. here we need to locate all entity-names and class-names contained in this document itself, making sure that these get removed from the extendz list such that only extends names which require us to delay processing (i.e. external to this document and not yet processed) are contained in the returned result	WITHOUT_CLASSIFICATION	0.8502831346645069	DESIGN	0.14971686533549314	WITHOUT_CLASSIFICATION
Build a ResultSetMappingDefinition given a containing element for the "return-XXX" elements @param resultSetElem The element containing the return definitions. @param path No clue... @param mappings The current processing state. @return The description of the mappings...	WITHOUT_CLASSIFICATION	0.999936506440846	WITHOUT_CLASSIFICATION	6.349355915405696E-5	DESIGN
private boolean showSql; private boolean formatSql;	WITHOUT_CLASSIFICATION	0.9967067343719371	WITHOUT_CLASSIFICATION	0.0032932656280628826	DESIGN
public boolean isShowSqlEnabled() { return showSql; } public boolean isFormatSqlEnabled() { return formatSql; }	WITHOUT_CLASSIFICATION	0.9989129450669569	WITHOUT_CLASSIFICATION	0.0010870549330429544	DESIGN
Set a custom entity resolver. This entity resolver must be set before addXXX(misc) call. Default value is {@link org.hibernate.util.DTDEntityResolver} @param entityResolver entity resolver to use	WITHOUT_CLASSIFICATION	0.957585497260286	WITHOUT_CLASSIFICATION	0.042414502739714074	DESIGN
final List extendsQueue,	WITHOUT_CLASSIFICATION	0.9998426759839935	WITHOUT_CLASSIFICATION	1.5732401600648284E-4	DESIGN
If close() is called, guarantee unbind()	WITHOUT_CLASSIFICATION	0.999956154011613	WITHOUT_CLASSIFICATION	4.3845988387090974E-5	DESIGN
if a ThreadLocalSessionContext-bound session happens to get serialized, to be completely correct, we need to make sure that unbinding of that session occurs.	WITHOUT_CLASSIFICATION	0.9809411684639109	WITHOUT_CLASSIFICATION	0.01905883153608917	DESIGN
on the inverse, it makes sense that if a ThreadLocalSessionContext- bound session then gets deserialized to go ahead and re-bind it to the ThreadLocalSessionContext session map.	WITHOUT_CLASSIFICATION	0.9988638411603947	WITHOUT_CLASSIFICATION	0.0011361588396051974	DESIGN
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9996901168399774	WITHOUT_CLASSIFICATION	3.0988316002245644E-4	DESIGN
60 second lock timeout	WITHOUT_CLASSIFICATION	0.9997370599874333	WITHOUT_CLASSIFICATION	2.6294001256670134E-4	DESIGN
OptimisticCache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994306095977239	WITHOUT_CLASSIFICATION	5.693904022761369E-4	DESIGN
Cache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996625764054333	WITHOUT_CLASSIFICATION	3.374235945666888E-4	DESIGN
option.setDataVersion( NonLockingDataVersion.INSTANCE );	WITHOUT_CLASSIFICATION	0.999367392379193	WITHOUT_CLASSIFICATION	6.326076208069893E-4	DESIGN
do the put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9991715156288823	WITHOUT_CLASSIFICATION	8.28484371117603E-4	DESIGN
ignore!	WITHOUT_CLASSIFICATION	0.9991288176721137	WITHOUT_CLASSIFICATION	8.711823278862698E-4	DESIGN
tree cache in optimistic mode seems to have as very difficult time with remove calls on non-existent nodes (NPEs)...	WITHOUT_CLASSIFICATION	0.8692073596284163	WITHOUT_CLASSIFICATION	0.13079264037158372	DESIGN
60 seconds	WITHOUT_CLASSIFICATION	0.9992112281174913	WITHOUT_CLASSIFICATION	7.887718825087339E-4	DESIGN
ignore!	WITHOUT_CLASSIFICATION	0.9991288176721137	WITHOUT_CLASSIFICATION	8.711823278862698E-4	DESIGN
60 seconds	WITHOUT_CLASSIFICATION	0.9992112281174913	WITHOUT_CLASSIFICATION	7.887718825087339E-4	DESIGN
do the failfast put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9991715156288823	WITHOUT_CLASSIFICATION	8.28484371117603E-4	DESIGN
NOTE : evict() operates locally only (i.e., does not propogate to any other nodes in the potential cluster). This is exactly what is needed when we destroy() here; destroy() is used as part of the process of shutting down a SessionFactory; thus these removals should not be propogated	WITHOUT_CLASSIFICATION	0.9917611209737605	DESIGN	0.008238879026239532	WITHOUT_CLASSIFICATION
protected RegionRootListener listener;	WITHOUT_CLASSIFICATION	0.9926561755528139	WITHOUT_CLASSIFICATION	0.007343824447186129	DESIGN
Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9989473288426368	WITHOUT_CLASSIFICATION	0.001052671157363194	DESIGN
If we've been blocking for the mutex, perhaps another thread has already reestablished the root. In case the node was reestablised via replication, confirm it's marked "resident" (a status which doesn't replicate)	WITHOUT_CLASSIFICATION	0.9999404770145347	WITHOUT_CLASSIFICATION	5.952298546533819E-5	DESIGN
For pessimistic locking, we just want to toss out our ref to any old invalid root node and get the latest (may be null)	WITHOUT_CLASSIFICATION	0.9996490264633846	WITHOUT_CLASSIFICATION	3.509735366153673E-4	DESIGN
The rest only matters for optimistic locking, where we need to establish the proper data version on the region root	WITHOUT_CLASSIFICATION	0.9982240432599455	WITHOUT_CLASSIFICATION	0.0017759567400545385	DESIGN
Don't hold a transactional lock for this	WITHOUT_CLASSIFICATION	0.9897056289911146	WITHOUT_CLASSIFICATION	0.01029437100888545	DESIGN
Make sure the root node for the region exists and has a DataVersion that never complains	WITHOUT_CLASSIFICATION	0.999749607080011	WITHOUT_CLASSIFICATION	2.5039291998902284E-4	DESIGN
Never evict this node	WITHOUT_CLASSIFICATION	0.9983586792783371	WITHOUT_CLASSIFICATION	0.00164132072166292	DESIGN
Fix up the resident flag	WITHOUT_CLASSIFICATION	0.9994831772388991	WITHOUT_CLASSIFICATION	5.168227611009243E-4	DESIGN
60 seconds	WITHOUT_CLASSIFICATION	0.9992112281174913	WITHOUT_CLASSIFICATION	7.887718825087339E-4	DESIGN
We ignore minimalPutOverride. JBossCache putForExternalRead is already about as minimal as we can get; it will promptly return if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9995932907062994	WITHOUT_CLASSIFICATION	4.0670929370048515E-4	DESIGN
no-op. We don't own the cache so we shouldn't stop it.	WITHOUT_CLASSIFICATION	0.9981058778948425	WITHOUT_CLASSIFICATION	0.0018941221051574743	DESIGN
This should only be possible if the caches are constructor injected	WITHOUT_CLASSIFICATION	0.9991583988133287	WITHOUT_CLASSIFICATION	8.416011866713922E-4	DESIGN
We only build caches if none were passed in. Passing in caches counts as a clear statement of exactly what is wanted	WITHOUT_CLASSIFICATION	0.9996764300439314	WITHOUT_CLASSIFICATION	3.2356995606861767E-4	DESIGN
Set up the cache factory	WITHOUT_CLASSIFICATION	0.9980373960415958	WITHOUT_CLASSIFICATION	0.0019626039584042148	DESIGN
See if the user configured a multiplexer stack	WITHOUT_CLASSIFICATION	0.9999277289162029	WITHOUT_CLASSIFICATION	7.227108379715799E-5	DESIGN
Default to collections sharing entity cache if there is one	WITHOUT_CLASSIFICATION	0.9998916691305654	WITHOUT_CLASSIFICATION	1.083308694347119E-4	DESIGN
Default to sharing the entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999191916198578	WITHOUT_CLASSIFICATION	8.08083801422266E-5	DESIGN
For Timestamps, we default to a separate config	WITHOUT_CLASSIFICATION	0.998281965395047	WITHOUT_CLASSIFICATION	0.0017180346049529972	DESIGN
We can't change the TM on a running cache; just check if the cache has no TM and we're OK with that	WITHOUT_CLASSIFICATION	0.9998259445120673	WITHOUT_CLASSIFICATION	1.7405548793274868E-4	DESIGN
Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9988236496782404	WITHOUT_CLASSIFICATION	0.001176350321759612	DESIGN
Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9998492275421773	WITHOUT_CLASSIFICATION	1.507724578225829E-4	DESIGN
This method should be implemented assuming it's valid to do start/stop/start -- leave state appropriate for another start	WITHOUT_CLASSIFICATION	0.9933068971812739	WITHOUT_CLASSIFICATION	0.006693102818726203	DESIGN
Make sure we don't re-release the same cache	WITHOUT_CLASSIFICATION	0.9984681948994362	WITHOUT_CLASSIFICATION	0.0015318051005638541	DESIGN
We use a different delegate than the non-optimistic superclass default	WITHOUT_CLASSIFICATION	0.999049601041872	WITHOUT_CLASSIFICATION	9.503989581280437E-4	DESIGN
Following methods we don't delegate since they have so little logic it's clearer to just implement them here	WITHOUT_CLASSIFICATION	0.9852094381671253	WITHOUT_CLASSIFICATION	0.014790561832874815	DESIGN
If JBC is using INVALIDATION, we don't want to propagate changes. We use the Timestamps cache to manage invalidation	WITHOUT_CLASSIFICATION	0.9997552424561685	WITHOUT_CLASSIFICATION	2.4475754383143113E-4	DESIGN
We don't want to waste effort setting an option if JBC is already in LOCAL mode. If JBC is REPL_(A)SYNC then check if they passed an config option to disable query replication	WITHOUT_CLASSIFICATION	0.9999950630063136	WITHOUT_CLASSIFICATION	4.936993686415552E-6	DESIGN
Don't hold the JBC node lock throughout the tx, as that prevents updates Add a zero (or low) timeout option so we don't block waiting for tx's that did a put to commit	WITHOUT_CLASSIFICATION	0.999996510589326	WITHOUT_CLASSIFICATION	3.489410674063221E-6	DESIGN
Double check the distributed cache	WITHOUT_CLASSIFICATION	0.9999734089980422	WITHOUT_CLASSIFICATION	2.6591001957775186E-5	DESIGN
Get an exclusive right to update JBC for this key from this node.	WITHOUT_CLASSIFICATION	0.9998246877285953	WITHOUT_CLASSIFICATION	1.7531227140455178E-4	DESIGN
We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9993489319409612	WITHOUT_CLASSIFICATION	6.510680590387641E-4	DESIGN
Initial load from JBC	WITHOUT_CLASSIFICATION	0.9995171397392119	WITHOUT_CLASSIFICATION	4.8286026078807906E-4	DESIGN
See if we had a 2nd invalidation from the same initial preinvalidation timestamp. If so, only increment if the new current value is an increase	WITHOUT_CLASSIFICATION	0.9999975517828187	WITHOUT_CLASSIFICATION	2.448217181280726E-6	DESIGN
We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9993489319409612	WITHOUT_CLASSIFICATION	6.510680590387641E-4	DESIGN
If the workspace node has null as well, OK; if not we've been modified in a non-comparable manner, which we have to treat as us being newer	WITHOUT_CLASSIFICATION	0.9999647252865588	WITHOUT_CLASSIFICATION	3.527471344120416E-5	DESIGN
The standard comparator types are not Serializable but are singletons	WITHOUT_CLASSIFICATION	0.9992478184558993	WITHOUT_CLASSIFICATION	7.521815441008061E-4	DESIGN
ignore!	WITHOUT_CLASSIFICATION	0.9991288176721137	WITHOUT_CLASSIFICATION	8.711823278862698E-4	DESIGN
ignore it	WITHOUT_CLASSIFICATION	0.998741122804289	WITHOUT_CLASSIFICATION	0.0012588771957110566	DESIGN
construct the cache	WITHOUT_CLASSIFICATION	0.9997815727125798	WITHOUT_CLASSIFICATION	2.1842728742017242E-4	DESIGN
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9990605069182611	WITHOUT_CLASSIFICATION	9.394930817388501E-4	DESIGN
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9990605069182611	WITHOUT_CLASSIFICATION	9.394930817388501E-4	DESIGN
ie. 60 seconds	WITHOUT_CLASSIFICATION	0.999836379859783	WITHOUT_CLASSIFICATION	1.6362014021697872E-4	DESIGN
swaldman 2006-08-28: define c3p0-style configuration parameters for initialPoolSize, which hibernate sensibly lets default to minPoolSize, but we'll let users override it with the c3p0-style property if they want.	WITHOUT_CLASSIFICATION	0.999833510757017	WITHOUT_CLASSIFICATION	1.6648924298310418E-4	DESIGN
DataSource unpooled = DataSources.unpooledDataSource(jdbcUrl, props.getProperty(Environment.USER), props.getProperty(Environment.PASS));	WITHOUT_CLASSIFICATION	0.9997196871830589	WITHOUT_CLASSIFICATION	2.8031281694111286E-4	DESIGN
TRUE if the pool is borrowed from the outside, FALSE if we used to create it	WITHOUT_CLASSIFICATION	0.9187571814738489	WITHOUT_CLASSIFICATION	0.08124281852615114	DESIGN
get a connection from the pool (thru DriverManager, cfr. Proxool doc)	WITHOUT_CLASSIFICATION	0.9987045191984648	WITHOUT_CLASSIFICATION	0.0012954808015351246	DESIGN
set the Transaction Isolation if defined	WITHOUT_CLASSIFICATION	0.9998634986636935	WITHOUT_CLASSIFICATION	1.3650133630650906E-4	DESIGN
toggle autoCommit to false if set	WITHOUT_CLASSIFICATION	0.9996036710651199	WITHOUT_CLASSIFICATION	3.963289348801246E-4	DESIGN
return the connection	WITHOUT_CLASSIFICATION	0.9996179683181937	WITHOUT_CLASSIFICATION	3.820316818062742E-4	DESIGN
Get the configurator files (if available)	WITHOUT_CLASSIFICATION	0.9999346442237836	WITHOUT_CLASSIFICATION	6.535577621645372E-5	DESIGN
Default the Proxool alias setting	WITHOUT_CLASSIFICATION	0.9999533305428415	WITHOUT_CLASSIFICATION	4.666945715847933E-5	DESIGN
Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9997564394801027	WITHOUT_CLASSIFICATION	2.4356051989714363E-4	DESIGN
Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9997564394801027	WITHOUT_CLASSIFICATION	2.4356051989714363E-4	DESIGN
Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9995063005145264	WITHOUT_CLASSIFICATION	4.936994854736005E-4	DESIGN
Set the existing pool flag to true	WITHOUT_CLASSIFICATION	0.999336919668023	WITHOUT_CLASSIFICATION	6.630803319770474E-4	DESIGN
Configured using the JAXP Configurator	WITHOUT_CLASSIFICATION	0.9997276151031168	WITHOUT_CLASSIFICATION	2.72384896883192E-4	DESIGN
Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9997564394801027	WITHOUT_CLASSIFICATION	2.4356051989714363E-4	DESIGN
Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9995063005145264	WITHOUT_CLASSIFICATION	4.936994854736005E-4	DESIGN
Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9995063005145264	WITHOUT_CLASSIFICATION	4.936994854736005E-4	DESIGN
Configured using the Properties File Configurator	WITHOUT_CLASSIFICATION	0.999170297370171	WITHOUT_CLASSIFICATION	8.297026298289029E-4	DESIGN
Remember Isolation level	WITHOUT_CLASSIFICATION	0.9727048940685811	WITHOUT_CLASSIFICATION	0.02729510593141889	DESIGN
If the provider was leeching off an existing pool don't close it	WITHOUT_CLASSIFICATION	0.9999997708593319	WITHOUT_CLASSIFICATION	2.291406680420581E-7	DESIGN
We have created the pool ourselves, so shut it down	WITHOUT_CLASSIFICATION	0.9999794389556688	WITHOUT_CLASSIFICATION	2.0561044331282303E-5	DESIGN
not really a many-to-one association necessarily	WITHOUT_CLASSIFICATION	0.9960325185273082	WITHOUT_CLASSIFICATION	0.0039674814726918415	DESIGN
not really a many-to-one association necessarily	WITHOUT_CLASSIFICATION	0.9960325185273082	WITHOUT_CLASSIFICATION	0.0039674814726918415	DESIGN
always overwrite nonversioned data	WITHOUT_CLASSIFICATION	0.9993395700394656	WITHOUT_CLASSIFICATION	6.604299605342834E-4	DESIGN
public Currency getCurrency(int col) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9987428890185301	WITHOUT_CLASSIFICATION	0.0012571109814698241	DESIGN
default is POJO	WITHOUT_CLASSIFICATION	0.9998855118465582	WITHOUT_CLASSIFICATION	1.1448815344175742E-4	DESIGN
use setParameter for null values	WITHOUT_CLASSIFICATION	0.9993056646777982	WITHOUT_CLASSIFICATION	6.943353222016964E-4	DESIGN
use setParameter for null values	WITHOUT_CLASSIFICATION	0.9993056646777982	WITHOUT_CLASSIFICATION	6.943353222016964E-4	DESIGN
private CacheEntry cacheEntry;	WITHOUT_CLASSIFICATION	0.9934049195829696	WITHOUT_CLASSIFICATION	0.006595080417030387	DESIGN
Don't need to lock the cache here, since if someone else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9995687988222316	WITHOUT_CLASSIFICATION	4.312011777683647E-4	DESIGN
Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9981549220364081	WITHOUT_CLASSIFICATION	0.001845077963591876	DESIGN
get the updated snapshot of the entity state by cloning current state; it is safe to copy in place, since by this time no-one else (should have) has a reference to the array	WITHOUT_CLASSIFICATION	0.9999956607883603	WITHOUT_CLASSIFICATION	4.339211639710637E-6	DESIGN
this entity defines proeprty generation, so process those generated values...	WITHOUT_CLASSIFICATION	0.9994253282038902	WITHOUT_CLASSIFICATION	5.746717961097516E-4	DESIGN
have the entity entry perform post-update processing, passing it the update state and the new version (if one).	WITHOUT_CLASSIFICATION	0.9997982067484842	WITHOUT_CLASSIFICATION	2.017932515157661E-4	DESIGN
!persister.isCacheInvalidationRequired()	WITHOUT_CLASSIFICATION	0.999356419707268	WITHOUT_CLASSIFICATION	6.435802927320741E-4	DESIGN
need to look it up from the persistence-context	WITHOUT_CLASSIFICATION	0.9986874769927123	WITHOUT_CLASSIFICATION	0.0013125230072877536	DESIGN
sort first by role name	WITHOUT_CLASSIFICATION	0.9998571964312434	WITHOUT_CLASSIFICATION	1.4280356875656194E-4	DESIGN
Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9981549220364081	WITHOUT_CLASSIFICATION	0.001845077963591876	DESIGN
then by fk	WITHOUT_CLASSIFICATION	0.999622180129031	WITHOUT_CLASSIFICATION	3.778198709689218E-4	DESIGN
nothing to do	WITHOUT_CLASSIFICATION	0.9997828052058866	WITHOUT_CLASSIFICATION	2.1719479411333028E-4	DESIGN
nothing to do	WITHOUT_CLASSIFICATION	0.9997828052058866	WITHOUT_CLASSIFICATION	2.1719479411333028E-4	DESIGN
an existing collection that was either non-empty or uninitialized is replaced by null or a different collection (if the collection is uninitialized, hibernate has no way of knowing if the collection is actually empty without querying the db)	WITHOUT_CLASSIFICATION	0.8324164108607063	WITHOUT_CLASSIFICATION	0.16758358913929378	DESIGN
this method is called when a new non-null collection is persisted or when an existing (non-null) collection is moved to a new owner	WITHOUT_CLASSIFICATION	0.9924474785731473	WITHOUT_CLASSIFICATION	0.007552521426852624	DESIGN
boolean put = persister.getCache().insert(ck, cacheEntry);	WITHOUT_CLASSIFICATION	0.9998338028742585	WITHOUT_CLASSIFICATION	1.6619712574145548E-4	DESIGN
we need to grab the version value from the entity, otherwise we have issues with generated-version entities that may have multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.998392201976833	WITHOUT_CLASSIFICATION	0.001607798023167033	DESIGN
do nothing - we only need to notify the cache...	WITHOUT_CLASSIFICATION	0.9933608278094194	WITHOUT_CLASSIFICATION	0.006639172190580667	DESIGN
sort first by entity name	WITHOUT_CLASSIFICATION	0.9998961946011267	WITHOUT_CLASSIFICATION	1.0380539887330526E-4	DESIGN
then by id	WITHOUT_CLASSIFICATION	0.9996935182365057	WITHOUT_CLASSIFICATION	3.0648176349438875E-4	DESIGN
to be safe...	WITHOUT_CLASSIFICATION	0.9995755243411475	WITHOUT_CLASSIFICATION	4.2447565885253075E-4	DESIGN
no transformations took place, so handle it as we would a non-instrumented class	WITHOUT_CLASSIFICATION	0.9994354515109246	WITHOUT_CLASSIFICATION	5.645484890753331E-4	DESIGN
see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999560213065098	WITHOUT_CLASSIFICATION	4.397869349009648E-5	DESIGN
see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999560213065098	WITHOUT_CLASSIFICATION	4.397869349009648E-5	DESIGN
intentionally empty	WITHOUT_CLASSIFICATION	0.9997307046981381	WITHOUT_CLASSIFICATION	2.692953018619612E-4	DESIGN
test out the optimizer:	WITHOUT_CLASSIFICATION	0.9999082868721131	WITHOUT_CLASSIFICATION	9.171312788690864E-5	DESIGN
set the name of bulk accessor.	WITHOUT_CLASSIFICATION	0.9996588839952077	WITHOUT_CLASSIFICATION	3.4111600479227945E-4	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9991288176721137	WITHOUT_CLASSIFICATION	8.711823278862698E-4	DESIGN
invokespecial	WITHOUT_CLASSIFICATION	0.9998192731054069	WITHOUT_CLASSIFICATION	1.8072689459315214E-4	DESIGN
return	WITHOUT_CLASSIFICATION	0.9990440770325145	WITHOUT_CLASSIFICATION	9.559229674855302E-4	DESIGN
aload_1 load bean	WITHOUT_CLASSIFICATION	0.9998855993048619	WITHOUT_CLASSIFICATION	1.1440069513805344E-4	DESIGN
checkcast cast bean	WITHOUT_CLASSIFICATION	0.9998059778969453	WITHOUT_CLASSIFICATION	1.9402210305481888E-4	DESIGN
astore_3 store bean	WITHOUT_CLASSIFICATION	0.9999518289358952	WITHOUT_CLASSIFICATION	4.817106410495128E-5	DESIGN
aload_2 args	WITHOUT_CLASSIFICATION	0.9996926297979365	WITHOUT_CLASSIFICATION	3.0737020206346075E-4	DESIGN
iconst_i continue to aastore growing stack is 1	WITHOUT_CLASSIFICATION	0.9999308851544852	WITHOUT_CLASSIFICATION	6.911484551468493E-5	DESIGN
new	WITHOUT_CLASSIFICATION	0.9994358220653654	WITHOUT_CLASSIFICATION	5.641779346346003E-4	DESIGN
dup	WITHOUT_CLASSIFICATION	0.9992319179832061	WITHOUT_CLASSIFICATION	7.680820167938865E-4	DESIGN
aload_3 load the raw bean	WITHOUT_CLASSIFICATION	0.99986320898572	WITHOUT_CLASSIFICATION	1.367910142798839E-4	DESIGN
invokeinterface	WITHOUT_CLASSIFICATION	0.9998192731054069	WITHOUT_CLASSIFICATION	1.8072689459315214E-4	DESIGN
invokevirtual	WITHOUT_CLASSIFICATION	0.9998192731054069	WITHOUT_CLASSIFICATION	1.8072689459315214E-4	DESIGN
invokevirtual	WITHOUT_CLASSIFICATION	0.9998192731054069	WITHOUT_CLASSIFICATION	1.8072689459315214E-4	DESIGN
aastore args	WITHOUT_CLASSIFICATION	0.9996926297979365	WITHOUT_CLASSIFICATION	3.0737020206346075E-4	DESIGN
| this | bean | args | i | raw bean | exception |	WITHOUT_CLASSIFICATION	0.9985632035159745	WITHOUT_CLASSIFICATION	0.0014367964840254171	DESIGN
required to exception table iconst_0 i	WITHOUT_CLASSIFICATION	0.9996102700741174	WITHOUT_CLASSIFICATION	3.8972992588255564E-4	DESIGN
istore_3 store i	WITHOUT_CLASSIFICATION	0.9999775882312711	WITHOUT_CLASSIFICATION	2.241176872881093E-5	DESIGN
aload_1 load the bean	WITHOUT_CLASSIFICATION	0.9997611104828724	WITHOUT_CLASSIFICATION	2.3888951712756085E-4	DESIGN
checkcast cast the bean into a raw bean	WITHOUT_CLASSIFICATION	0.9982031776440121	WITHOUT_CLASSIFICATION	0.0017968223559878434	DESIGN
current stack len = 0	WITHOUT_CLASSIFICATION	0.9999868687561213	WITHOUT_CLASSIFICATION	1.3131243878825688E-5	DESIGN
start region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9925186052819869	WITHOUT_CLASSIFICATION	0.007481394718013163	DESIGN
iinc 3, 1	WITHOUT_CLASSIFICATION	0.9995236352698426	WITHOUT_CLASSIFICATION	4.763647301573514E-4	DESIGN
aload 4 load the raw bean	WITHOUT_CLASSIFICATION	0.9998836799086592	WITHOUT_CLASSIFICATION	1.1632009134084416E-4	DESIGN
aload_2 load the args	WITHOUT_CLASSIFICATION	0.9995935116199555	WITHOUT_CLASSIFICATION	4.0648838004462423E-4	DESIGN
iconst_i	WITHOUT_CLASSIFICATION	0.9991288176721137	WITHOUT_CLASSIFICATION	8.711823278862698E-4	DESIGN
aaload	WITHOUT_CLASSIFICATION	0.9991288176721137	WITHOUT_CLASSIFICATION	8.711823278862698E-4	DESIGN
checkcast	WITHOUT_CLASSIFICATION	0.9991302249013405	WITHOUT_CLASSIFICATION	8.697750986595751E-4	DESIGN
checkcast (case of primitive type) invokevirtual (case of primitive type)	WITHOUT_CLASSIFICATION	0.9998829404821147	WITHOUT_CLASSIFICATION	1.1705951788529139E-4	DESIGN
checkcast (case of reference type)	WITHOUT_CLASSIFICATION	0.9995695386693674	WITHOUT_CLASSIFICATION	4.30461330632596E-4	DESIGN
current stack len = 2	WITHOUT_CLASSIFICATION	0.9999770597261525	WITHOUT_CLASSIFICATION	2.2940273847520043E-5	DESIGN
end region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9805220678675133	WITHOUT_CLASSIFICATION	0.019477932132486643	DESIGN
register in exception table	WITHOUT_CLASSIFICATION	0.9989181826438429	WITHOUT_CLASSIFICATION	0.0010818173561570985	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9991288176721137	WITHOUT_CLASSIFICATION	8.711823278862698E-4	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9991288176721137	WITHOUT_CLASSIFICATION	8.711823278862698E-4	DESIGN
return	WITHOUT_CLASSIFICATION	0.9990440770325145	WITHOUT_CLASSIFICATION	9.559229674855302E-4	DESIGN
return	WITHOUT_CLASSIFICATION	0.9990440770325145	WITHOUT_CLASSIFICATION	9.559229674855302E-4	DESIGN
dup	WITHOUT_CLASSIFICATION	0.9992319179832061	WITHOUT_CLASSIFICATION	7.680820167938865E-4	DESIGN
invokevirtual	WITHOUT_CLASSIFICATION	0.9998192731054069	WITHOUT_CLASSIFICATION	1.8072689459315214E-4	DESIGN
checkcast	WITHOUT_CLASSIFICATION	0.9991302249013405	WITHOUT_CLASSIFICATION	8.697750986595751E-4	DESIGN
local variables | target obj | each oldvalue |	WITHOUT_CLASSIFICATION	0.9998662892193775	WITHOUT_CLASSIFICATION	1.337107806224269E-4	DESIGN
astore 5 store exception	WITHOUT_CLASSIFICATION	0.9998305343942684	WITHOUT_CLASSIFICATION	1.6946560573167247E-4	DESIGN
new BulkAccessorException	WITHOUT_CLASSIFICATION	0.9996721311090149	WITHOUT_CLASSIFICATION	3.2786889098516893E-4	DESIGN
aload 5 load exception	WITHOUT_CLASSIFICATION	0.9995976059330888	WITHOUT_CLASSIFICATION	4.0239406691129685E-4	DESIGN
iload_3 i	WITHOUT_CLASSIFICATION	0.9995947151547177	WITHOUT_CLASSIFICATION	4.05284845282297E-4	DESIGN
invokespecial BulkAccessorException.<init>	WITHOUT_CLASSIFICATION	0.999356419707268	WITHOUT_CLASSIFICATION	6.435802927320741E-4	DESIGN
athrow	WITHOUT_CLASSIFICATION	0.9991288176721137	WITHOUT_CLASSIFICATION	8.711823278862698E-4	DESIGN
WARNING: classfile only	WITHOUT_CLASSIFICATION	0.9997978530835638	WITHOUT_CLASSIFICATION	2.0214691643617713E-4	DESIGN
swallow	WITHOUT_CLASSIFICATION	0.9991468119051933	WITHOUT_CLASSIFICATION	8.531880948068088E-4	DESIGN
local variable | this |	WITHOUT_CLASSIFICATION	0.9980046746063101	WITHOUT_CLASSIFICATION	0.0019953253936898603	DESIGN
aload_0 load this	WITHOUT_CLASSIFICATION	0.9995731300069568	WITHOUT_CLASSIFICATION	4.268699930432391E-4	DESIGN
aload_0 load this	WITHOUT_CLASSIFICATION	0.9995731300069568	WITHOUT_CLASSIFICATION	4.268699930432391E-4	DESIGN
getfield get field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.99928108973558	WITHOUT_CLASSIFICATION	7.189102644198661E-4	DESIGN
areturn return the value of the field	WITHOUT_CLASSIFICATION	0.9997413605462023	WITHOUT_CLASSIFICATION	2.5863945379766233E-4	DESIGN
local variables | this | callback |	WITHOUT_CLASSIFICATION	0.9949671384096689	WITHOUT_CLASSIFICATION	0.005032861590331081	DESIGN
aload_1 load callback	WITHOUT_CLASSIFICATION	0.9996260966046616	WITHOUT_CLASSIFICATION	3.7390339533840684E-4	DESIGN
putfield put field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9995770553722159	WITHOUT_CLASSIFICATION	4.229446277840586E-4	DESIGN
case of non-static field	WITHOUT_CLASSIFICATION	0.9999426804299235	WITHOUT_CLASSIFICATION	5.731957007639085E-5	DESIGN
getfield get each field	WITHOUT_CLASSIFICATION	0.9992673776817015	WITHOUT_CLASSIFICATION	7.326223182984766E-4	DESIGN
invokeinterface invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9995182742572101	WITHOUT_CLASSIFICATION	4.8172574278998627E-4	DESIGN
ifnonnull	WITHOUT_CLASSIFICATION	0.9991288176721137	WITHOUT_CLASSIFICATION	8.711823278862698E-4	DESIGN
return each type	WITHOUT_CLASSIFICATION	0.9994477398492894	WITHOUT_CLASSIFICATION	5.522601507106403E-4	DESIGN
return each type	WITHOUT_CLASSIFICATION	0.9994477398492894	WITHOUT_CLASSIFICATION	5.522601507106403E-4	DESIGN
store_1 each type	WITHOUT_CLASSIFICATION	0.9994967146225356	WITHOUT_CLASSIFICATION	5.032853774644628E-4	DESIGN
ldc name of the field	WITHOUT_CLASSIFICATION	0.999688168936891	WITHOUT_CLASSIFICATION	3.1183106310887077E-4	DESIGN
load_1 each type	WITHOUT_CLASSIFICATION	0.9994967146225356	WITHOUT_CLASSIFICATION	5.032853774644628E-4	DESIGN
invokeinterface invoke Callback.read() each type	WITHOUT_CLASSIFICATION	0.9986592182465789	WITHOUT_CLASSIFICATION	0.001340781753421093	DESIGN
int	WITHOUT_CLASSIFICATION	0.9995608326302677	WITHOUT_CLASSIFICATION	4.391673697322058E-4	DESIGN
return	WITHOUT_CLASSIFICATION	0.9990440770325145	WITHOUT_CLASSIFICATION	9.559229674855302E-4	DESIGN
dup	WITHOUT_CLASSIFICATION	0.9992319179832061	WITHOUT_CLASSIFICATION	7.680820167938865E-4	DESIGN
invokeinterface	WITHOUT_CLASSIFICATION	0.9998192731054069	WITHOUT_CLASSIFICATION	1.8072689459315214E-4	DESIGN
checkcast	WITHOUT_CLASSIFICATION	0.9991302249013405	WITHOUT_CLASSIFICATION	8.697750986595751E-4	DESIGN
checkcast	WITHOUT_CLASSIFICATION	0.9991302249013405	WITHOUT_CLASSIFICATION	8.697750986595751E-4	DESIGN
invokeinterface enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.999356419707268	WITHOUT_CLASSIFICATION	6.435802927320741E-4	DESIGN
invokeinterface enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.999356419707268	WITHOUT_CLASSIFICATION	6.435802927320741E-4	DESIGN
ifnonnull (label1)	WITHOUT_CLASSIFICATION	0.9998192731054069	WITHOUT_CLASSIFICATION	1.8072689459315214E-4	DESIGN
load_1	WITHOUT_CLASSIFICATION	0.9991288176721137	WITHOUT_CLASSIFICATION	8.711823278862698E-4	DESIGN
load_1	WITHOUT_CLASSIFICATION	0.9991288176721137	WITHOUT_CLASSIFICATION	8.711823278862698E-4	DESIGN
putfield	WITHOUT_CLASSIFICATION	0.9991288176721137	WITHOUT_CLASSIFICATION	8.711823278862698E-4	DESIGN
return ;	WITHOUT_CLASSIFICATION	0.9990440770325145	WITHOUT_CLASSIFICATION	9.559229674855302E-4	DESIGN
ldc field name	WITHOUT_CLASSIFICATION	0.9997520794981627	WITHOUT_CLASSIFICATION	2.479205018372837E-4	DESIGN
getfield old value of the field	WITHOUT_CLASSIFICATION	0.9998058841209535	WITHOUT_CLASSIFICATION	1.9411587904648016E-4	DESIGN
invokeinterface callback.write(..)	WITHOUT_CLASSIFICATION	0.999356419707268	WITHOUT_CLASSIFICATION	6.435802927320741E-4	DESIGN
reference type	WITHOUT_CLASSIFICATION	0.9992605657246938	WITHOUT_CLASSIFICATION	7.394342753062819E-4	DESIGN
reference type	WITHOUT_CLASSIFICATION	0.9992605657246938	WITHOUT_CLASSIFICATION	7.394342753062819E-4	DESIGN
not array	WITHOUT_CLASSIFICATION	0.9974313408538643	WITHOUT_CLASSIFICATION	0.00256865914613567	DESIGN
array of reference type	WITHOUT_CLASSIFICATION	0.9991966323016113	WITHOUT_CLASSIFICATION	8.033676983887398E-4	DESIGN
boolean	WITHOUT_CLASSIFICATION	0.9995833406837918	WITHOUT_CLASSIFICATION	4.166593162082653E-4	DESIGN
byte	WITHOUT_CLASSIFICATION	0.9993170368466199	WITHOUT_CLASSIFICATION	6.829631533800581E-4	DESIGN
char	WITHOUT_CLASSIFICATION	0.9994849707866968	WITHOUT_CLASSIFICATION	5.150292133031549E-4	DESIGN
short	WITHOUT_CLASSIFICATION	0.9980294669195461	WITHOUT_CLASSIFICATION	0.0019705330804538224	DESIGN
double	WITHOUT_CLASSIFICATION	0.9999007148636744	WITHOUT_CLASSIFICATION	9.92851363256458E-5	DESIGN
float	WITHOUT_CLASSIFICATION	0.999142047535944	WITHOUT_CLASSIFICATION	8.579524640560522E-4	DESIGN
float	WITHOUT_CLASSIFICATION	0.999142047535944	WITHOUT_CLASSIFICATION	8.579524640560522E-4	DESIGN
long	WITHOUT_CLASSIFICATION	0.9991005394068276	WITHOUT_CLASSIFICATION	8.994605931724193E-4	DESIGN
long	WITHOUT_CLASSIFICATION	0.9991005394068276	WITHOUT_CLASSIFICATION	8.994605931724193E-4	DESIGN
bad type	WITHOUT_CLASSIFICATION	0.9967923694579566	WITHOUT_CLASSIFICATION	0.003207630542043459	DESIGN
bad type	WITHOUT_CLASSIFICATION	0.9967923694579566	WITHOUT_CLASSIFICATION	0.003207630542043459	DESIGN
boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9987114658992199	WITHOUT_CLASSIFICATION	0.0012885341007800673	DESIGN
boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9987114658992199	WITHOUT_CLASSIFICATION	0.0012885341007800673	DESIGN
reference type	WITHOUT_CLASSIFICATION	0.9992605657246938	WITHOUT_CLASSIFICATION	7.394342753062819E-4	DESIGN
double	WITHOUT_CLASSIFICATION	0.9999007148636744	WITHOUT_CLASSIFICATION	9.92851363256458E-5	DESIGN
float	WITHOUT_CLASSIFICATION	0.999142047535944	WITHOUT_CLASSIFICATION	8.579524640560522E-4	DESIGN
float	WITHOUT_CLASSIFICATION	0.999142047535944	WITHOUT_CLASSIFICATION	8.579524640560522E-4	DESIGN
long	WITHOUT_CLASSIFICATION	0.9991005394068276	WITHOUT_CLASSIFICATION	8.994605931724193E-4	DESIGN
bad type	WITHOUT_CLASSIFICATION	0.9967923694579566	WITHOUT_CLASSIFICATION	0.003207630542043459	DESIGN
bad type	WITHOUT_CLASSIFICATION	0.9967923694579566	WITHOUT_CLASSIFICATION	0.003207630542043459	DESIGN
boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9987114658992199	WITHOUT_CLASSIFICATION	0.0012885341007800673	DESIGN
skip finalize methods	WITHOUT_CLASSIFICATION	0.9984326212598127	WITHOUT_CLASSIFICATION	0.001567378740187303	DESIGN
Mainly for OSCache	WITHOUT_CLASSIFICATION	0.9997967089153381	WITHOUT_CLASSIFICATION	2.03291084661896E-4	DESIGN
decrement the lock	WITHOUT_CLASSIFICATION	0.9998752293171481	WITHOUT_CLASSIFICATION	1.2477068285185222E-4	DESIGN
create new lock that times out immediately	WITHOUT_CLASSIFICATION	0.9997119536997766	WITHOUT_CLASSIFICATION	2.8804630022342926E-4	DESIGN
recache the updated state	WITHOUT_CLASSIFICATION	0.9997860453756767	WITHOUT_CLASSIFICATION	2.1395462432325608E-4	DESIGN
noop	WITHOUT_CLASSIFICATION	0.9991865460439513	WITHOUT_CLASSIFICATION	8.134539560488254E-4	DESIGN
null clientLock is remotely possible but will never happen in practice	WITHOUT_CLASSIFICATION	0.9999679802371695	WITHOUT_CLASSIFICATION	3.201976283044067E-5	DESIGN
we really could refresh the item if it is not a lock, but it might be slower return freshTimestamp < txTimestamp	WITHOUT_CLASSIFICATION	0.9945496820498836	WITHOUT_CLASSIFICATION	0.005450317950116416	DESIGN
by requiring <, we rely on lock timeout in the case of an unsuccessful update!	WITHOUT_CLASSIFICATION	0.999969213558735	WITHOUT_CLASSIFICATION	3.0786441264957685E-5	DESIGN
the user provided resulttransformer, not the one used with "select new". Here to avoid mangling transformed/non-transformed results.	WITHOUT_CLASSIFICATION	0.9936083034824614	WITHOUT_CLASSIFICATION	0.006391696517538573	DESIGN
disassemble positional parameters	WITHOUT_CLASSIFICATION	0.9998855086517585	WITHOUT_CLASSIFICATION	1.144913482414947E-4	DESIGN
disassemble named parameters	WITHOUT_CLASSIFICATION	0.9998880178737568	WITHOUT_CLASSIFICATION	1.1198212624315787E-4	DESIGN
ie. 60 seconds	WITHOUT_CLASSIFICATION	0.999836379859783	WITHOUT_CLASSIFICATION	1.6362014021697872E-4	DESIGN
noop	WITHOUT_CLASSIFICATION	0.9991865460439513	WITHOUT_CLASSIFICATION	8.134539560488254E-4	DESIGN
noop	WITHOUT_CLASSIFICATION	0.9991865460439513	WITHOUT_CLASSIFICATION	8.134539560488254E-4	DESIGN
noop	WITHOUT_CLASSIFICATION	0.9991865460439513	WITHOUT_CLASSIFICATION	8.134539560488254E-4	DESIGN
this is called from SettingsFactory irregardless; trivial to simply disregard	WITHOUT_CLASSIFICATION	0.9941676520588975	WITHOUT_CLASSIFICATION	0.0058323479411026054	DESIGN
Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9992333718631211	WITHOUT_CLASSIFICATION	7.6662813687895E-4	DESIGN
Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9992333718631211	WITHOUT_CLASSIFICATION	7.6662813687895E-4	DESIGN
throw new UnsupportedOperationException("Can't write to a readonly object");	WITHOUT_CLASSIFICATION	0.9979246203371991	WITHOUT_CLASSIFICATION	0.0020753796628010224	DESIGN
assembled state gets put in a new array (we read from cache by value!)	WITHOUT_CLASSIFICATION	0.9998833986742346	WITHOUT_CLASSIFICATION	1.1660132576532507E-4	DESIGN
persister.setIdentifier(result, id); before calling interceptor, for consistency with normal load	WITHOUT_CLASSIFICATION	0.9982841944017586	WITHOUT_CLASSIFICATION	0.0017158055982413644	DESIGN
no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9993357701232133	WITHOUT_CLASSIFICATION	6.642298767867676E-4	DESIGN
no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9993357701232133	WITHOUT_CLASSIFICATION	6.642298767867676E-4	DESIGN
again, CCS did not have such a concept; but a reasonable proximity is to clear the cache after transaction as long as the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9994227327194648	WITHOUT_CLASSIFICATION	5.772672805351624E-4	DESIGN
again, CCS did not have such a concept; however a reasonable proximity is to clear the cache. For non-transaction aware caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9998009161251528	WITHOUT_CLASSIFICATION	1.990838748473429E-4	DESIGN
again, CCS did not have such a concept; however a reasonable proximity is to clear the cache. For non-transaction aware caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9998009161251528	WITHOUT_CLASSIFICATION	1.990838748473429E-4	DESIGN
classes mentioned in extends not available - so put it in queue	WITHOUT_CLASSIFICATION	0.9967077514571692	WITHOUT_CLASSIFICATION	0.003292248542830849	DESIGN
get meta's from <hibernate-mapping>	WITHOUT_CLASSIFICATION	0.9988655102173075	WITHOUT_CLASSIFICATION	0.001134489782692494	DESIGN
get meta's from <class>	WITHOUT_CLASSIFICATION	0.999107327002244	WITHOUT_CLASSIFICATION	8.926729977559937E-4	DESIGN
DB-OBJECTNAME	WITHOUT_CLASSIFICATION	0.9998192731054069	WITHOUT_CLASSIFICATION	1.8072689459315214E-4	DESIGN
MUTABLE	WITHOUT_CLASSIFICATION	0.9991288176721137	WITHOUT_CLASSIFICATION	8.711823278862698E-4	DESIGN
WHERE	WITHOUT_CLASSIFICATION	0.9991288176721137	WITHOUT_CLASSIFICATION	8.711823278862698E-4	DESIGN
CHECK	WITHOUT_CLASSIFICATION	0.9991288176721137	WITHOUT_CLASSIFICATION	8.711823278862698E-4	DESIGN
POLYMORPHISM	WITHOUT_CLASSIFICATION	0.9998192731054069	WITHOUT_CLASSIFICATION	1.8072689459315214E-4	DESIGN
TODO:	WITHOUT_CLASSIFICATION	0.5811661798477947	DESIGN	0.41883382015220516	WITHOUT_CLASSIFICATION
ID	WITHOUT_CLASSIFICATION	0.9990296182232871	WITHOUT_CLASSIFICATION	9.703817767128757E-4	DESIGN
VERSION / TIMESTAMP	WITHOUT_CLASSIFICATION	0.9999137860461969	WITHOUT_CLASSIFICATION	8.62139538031566E-5	DESIGN
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9998192731054069	WITHOUT_CLASSIFICATION	1.8072689459315214E-4	DESIGN
Primary key constraint	WITHOUT_CLASSIFICATION	0.999791117231619	WITHOUT_CLASSIFICATION	2.0888276838112343E-4	DESIGN
this is either a <version/> tag with no type attribute, or a <timestamp/> tag	WITHOUT_CLASSIFICATION	0.9987278246586898	WITHOUT_CLASSIFICATION	0.0012721753413102305	DESIGN
for version properties marked as being generated, make sure they are "always" generated; aka, "insert" is invalid; this is dis-allowed by the DTD, but just to make sure...	WITHOUT_CLASSIFICATION	0.9963427745276309	WITHOUT_CLASSIFICATION	0.003657225472369071	DESIGN
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9998192731054069	WITHOUT_CLASSIFICATION	1.8072689459315214E-4	DESIGN
( (Column) discrim.getColumnIterator().next() ).setType(type);	WITHOUT_CLASSIFICATION	0.9994356187070618	WITHOUT_CLASSIFICATION	5.643812929381081E-4	DESIGN
go ahead and set the lazy here, since pojo.proxy can override it.	WITHOUT_CLASSIFICATION	0.9998852684182655	WITHOUT_CLASSIFICATION	1.1473158173451362E-4	DESIGN
DYNAMIC UPDATE	WITHOUT_CLASSIFICATION	0.9998192731054069	WITHOUT_CLASSIFICATION	1.8072689459315214E-4	DESIGN
IMPORT	WITHOUT_CLASSIFICATION	0.9991288176721137	WITHOUT_CLASSIFICATION	8.711823278862698E-4	DESIGN
BATCH SIZE	WITHOUT_CLASSIFICATION	0.9991288176721137	WITHOUT_CLASSIFICATION	8.711823278862698E-4	DESIGN
SELECT BEFORE UPDATE	WITHOUT_CLASSIFICATION	0.9998192731054069	WITHOUT_CLASSIFICATION	1.8072689459315214E-4	DESIGN
OPTIMISTIC LOCK MODE	WITHOUT_CLASSIFICATION	0.9998192731054069	WITHOUT_CLASSIFICATION	1.8072689459315214E-4	DESIGN
PERSISTER	WITHOUT_CLASSIFICATION	0.9991288176721137	WITHOUT_CLASSIFICATION	8.711823278862698E-4	DESIGN
CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9991337260246764	WITHOUT_CLASSIFICATION	8.662739753234502E-4	DESIGN
get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.999107327002244	WITHOUT_CLASSIFICATION	8.926729977559937E-4	DESIGN
properties	WITHOUT_CLASSIFICATION	0.9996600360694483	WITHOUT_CLASSIFICATION	3.3996393055166197E-4	DESIGN
joined subclasses	WITHOUT_CLASSIFICATION	0.999881452010039	WITHOUT_CLASSIFICATION	1.1854798996106634E-4	DESIGN
KEY	WITHOUT_CLASSIFICATION	0.9991337539224657	WITHOUT_CLASSIFICATION	8.662460775343205E-4	DESIGN
CHECK	WITHOUT_CLASSIFICATION	0.9991288176721137	WITHOUT_CLASSIFICATION	8.711823278862698E-4	DESIGN
CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9991337260246764	WITHOUT_CLASSIFICATION	8.662739753234502E-4	DESIGN
properties	WITHOUT_CLASSIFICATION	0.9996600360694483	WITHOUT_CLASSIFICATION	3.3996393055166197E-4	DESIGN
KEY	WITHOUT_CLASSIFICATION	0.9991337539224657	WITHOUT_CLASSIFICATION	8.662460775343205E-4	DESIGN
model.getKey().setType( new Type( model.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9992676165809667	WITHOUT_CLASSIFICATION	7.323834190331715E-4	DESIGN
TABLENAME	WITHOUT_CLASSIFICATION	0.9991288176721137	WITHOUT_CLASSIFICATION	8.711823278862698E-4	DESIGN
join.getKey().setType( new Type( lazz.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9992676165809667	WITHOUT_CLASSIFICATION	7.323834190331715E-4	DESIGN
PROPERTIES	WITHOUT_CLASSIFICATION	0.9991315044382222	WITHOUT_CLASSIFICATION	8.684955617778119E-4	DESIGN
COLUMN(S)	WITHOUT_CLASSIFICATION	0.9991288176721137	WITHOUT_CLASSIFICATION	8.711823278862698E-4	DESIGN
column index	WITHOUT_CLASSIFICATION	0.9999274482191955	WITHOUT_CLASSIFICATION	7.25517808044541E-5	DESIGN
column unique-key	WITHOUT_CLASSIFICATION	0.9998922352410339	WITHOUT_CLASSIFICATION	1.0776475896608081E-4	DESIGN
automatically makes a column with the default name if none is specifed by XML	WITHOUT_CLASSIFICATION	0.9994251576413133	WITHOUT_CLASSIFICATION	5.748423586867194E-4	DESIGN
for an any	WITHOUT_CLASSIFICATION	0.9994096259924905	WITHOUT_CLASSIFICATION	5.903740075095072E-4	DESIGN
insertable simply because that is the user did not specify anything; just override it	WITHOUT_CLASSIFICATION	0.9999674521814738	WITHOUT_CLASSIFICATION	3.25478185263036E-5	DESIGN
the user specifically supplied insert="true", which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9998831035228175	WITHOUT_CLASSIFICATION	1.1689647718256625E-4	DESIGN
properties generated on update can never be updateable...	WITHOUT_CLASSIFICATION	0.999829408639489	WITHOUT_CLASSIFICATION	1.7059136051102803E-4	DESIGN
updateable only because the user did not specify anything; just override it	WITHOUT_CLASSIFICATION	0.9999908301043371	WITHOUT_CLASSIFICATION	9.169895662889058E-6	DESIGN
the user specifically supplied update="true", which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9998831035228175	WITHOUT_CLASSIFICATION	1.1689647718256625E-4	DESIGN
ROLENAME	WITHOUT_CLASSIFICATION	0.9991288176721137	WITHOUT_CLASSIFICATION	8.711823278862698E-4	DESIGN
FETCH STRATEGY	WITHOUT_CLASSIFICATION	0.9998192731054069	WITHOUT_CLASSIFICATION	1.8072689459315214E-4	DESIGN
TABLE	WITHOUT_CLASSIFICATION	0.9991373280923079	WITHOUT_CLASSIFICATION	8.626719076920847E-4	DESIGN
tableName = mappings.getNamingStrategy().propertyToTableName( className, path );	WITHOUT_CLASSIFICATION	0.9998463321633473	WITHOUT_CLASSIFICATION	1.5366783665273152E-4	DESIGN
SORT	WITHOUT_CLASSIFICATION	0.9991288176721137	WITHOUT_CLASSIFICATION	8.711823278862698E-4	DESIGN
CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9991337260246764	WITHOUT_CLASSIFICATION	8.662739753234502E-4	DESIGN
unsorted, natural, comparator.class.name	WITHOUT_CLASSIFICATION	0.999356419707268	WITHOUT_CLASSIFICATION	6.435802927320741E-4	DESIGN
ORPHAN DELETE (used for programmer error detection)	WITHOUT_CLASSIFICATION	0.999541371458572	WITHOUT_CLASSIFICATION	4.5862854142808025E-4	DESIGN
set up second pass	WITHOUT_CLASSIFICATION	0.9999800454092321	WITHOUT_CLASSIFICATION	1.9954590767854692E-5	DESIGN
an "embedded" component (composite ids and unique) note that this does not handle nested components	WITHOUT_CLASSIFICATION	0.9437212716952184	WITHOUT_CLASSIFICATION	0.05627872830478155	DESIGN
a nested composite element	WITHOUT_CLASSIFICATION	0.9915260181415655	WITHOUT_CLASSIFICATION	0.00847398185843446	DESIGN
for an any we will have to use reflection	WITHOUT_CLASSIFICATION	0.999025498286407	WITHOUT_CLASSIFICATION	9.745017135931093E-4	DESIGN
NOTE SPECIAL CASE: one-to-one constrained=false cannot be proxied, so default to join and non-lazy	WITHOUT_CLASSIFICATION	0.9998155837229664	WITHOUT_CLASSIFICATION	1.8441627703353234E-4	DESIGN
use old (HB 2.1) defaults if outer-join is specified	WITHOUT_CLASSIFICATION	0.9998310132780619	WITHOUT_CLASSIFICATION	1.6898672193807848E-4	DESIGN
lazy = !join;	WITHOUT_CLASSIFICATION	0.9998959267662109	WITHOUT_CLASSIFICATION	1.0407323378914972E-4	DESIGN
GENERATOR	WITHOUT_CLASSIFICATION	0.9991288176721137	WITHOUT_CLASSIFICATION	8.711823278862698E-4	DESIGN
ID UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9997986783241932	WITHOUT_CLASSIFICATION	2.0132167580681296E-4	DESIGN
VERSION UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9994936520530547	WITHOUT_CLASSIFICATION	5.063479469452313E-4	DESIGN
not necessarily a unique property reference	WITHOUT_CLASSIFICATION	0.9961334217628185	WITHOUT_CLASSIFICATION	0.0038665782371816275	DESIGN
( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9994356187070618	WITHOUT_CLASSIFICATION	5.643812929381081E-4	DESIGN
contained elements:	WITHOUT_CLASSIFICATION	0.9997630498804582	WITHOUT_CLASSIFICATION	2.3695011954172853E-4	DESIGN
for non-inverse one-to-many, with a not-null fk, add a backref!	WITHOUT_CLASSIFICATION	0.9978034315900856	WITHOUT_CLASSIFICATION	0.0021965684099144976	DESIGN
Bind the where	WITHOUT_CLASSIFICATION	0.9999245761705194	WITHOUT_CLASSIFICATION	7.542382948059996E-5	DESIGN
Bind the order-by	WITHOUT_CLASSIFICATION	0.9998732912323852	WITHOUT_CLASSIFICATION	1.2670876761482683E-4	DESIGN
Bind the filters	WITHOUT_CLASSIFICATION	0.9998759690189991	WITHOUT_CLASSIFICATION	1.2403098100091303E-4	DESIGN
overriding inherited meta attribute. HBX-621 & HBX-793	WITHOUT_CLASSIFICATION	0.9991145358025707	WITHOUT_CLASSIFICATION	8.854641974294132E-4	DESIGN
first, iterate over all elements capable of defining an extends attribute collecting all found extends references if they cannot be resolved against the already processed mappings.	WITHOUT_CLASSIFICATION	0.9999820990157898	WITHOUT_CLASSIFICATION	1.790098421015348E-5	DESIGN
mappings might contain either the "raw" extends name (in the case of an entity-name mapping) or a FQN (in the case of a POJO mapping).	WITHOUT_CLASSIFICATION	0.9997535513371478	WITHOUT_CLASSIFICATION	2.464486628521328E-4	DESIGN
+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.6354890119831248	DESIGN	0.3645109880168752	WITHOUT_CLASSIFICATION
SessionFactory name:	WITHOUT_CLASSIFICATION	0.999909150826334	WITHOUT_CLASSIFICATION	9.084917366600733E-5	DESIGN
JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.999609111318835	WITHOUT_CLASSIFICATION	3.908886811650031E-4	DESIGN
JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.999609111318835	WITHOUT_CLASSIFICATION	3.908886811650031E-4	DESIGN
Interrogate JDBC metadata	WITHOUT_CLASSIFICATION	0.9995477899028018	WITHOUT_CLASSIFICATION	4.522100971981736E-4	DESIGN
user supplied JDBC connections	WITHOUT_CLASSIFICATION	0.9998261624674558	WITHOUT_CLASSIFICATION	1.7383753254421457E-4	DESIGN
use dialect default properties	WITHOUT_CLASSIFICATION	0.9997469908319176	WITHOUT_CLASSIFICATION	2.5300916808231126E-4	DESIGN
Transaction settings:	WITHOUT_CLASSIFICATION	0.9995313193022894	WITHOUT_CLASSIFICATION	4.686806977105475E-4	DESIGN
SQL Generation settings:	WITHOUT_CLASSIFICATION	0.9995034302985358	WITHOUT_CLASSIFICATION	4.965697014642376E-4	DESIGN
Query parser settings:	WITHOUT_CLASSIFICATION	0.9986774168978768	WITHOUT_CLASSIFICATION	0.001322583102123146	DESIGN
Second-level / query cache:	WITHOUT_CLASSIFICATION	0.9997285224574745	WITHOUT_CLASSIFICATION	2.714775425255342E-4	DESIGN
The cache provider is needed when we either have second-level cache enabled or query cache enabled. Note that useSecondLevelCache is enabled by default	WITHOUT_CLASSIFICATION	0.9999926203230488	WITHOUT_CLASSIFICATION	7.379676951182073E-6	DESIGN
SQL Exception converter:	WITHOUT_CLASSIFICATION	0.9995819017681313	WITHOUT_CLASSIFICATION	4.180982318686809E-4	DESIGN
Statistics and logging:	WITHOUT_CLASSIFICATION	0.9995204460289276	WITHOUT_CLASSIFICATION	4.795539710724375E-4	DESIGN
settings.setShowSqlEnabled(showSql);	WITHOUT_CLASSIFICATION	0.999356419707268	WITHOUT_CLASSIFICATION	6.435802927320741E-4	DESIGN
settings.setFormatSqlEnabled(formatSql);	WITHOUT_CLASSIFICATION	0.999356419707268	WITHOUT_CLASSIFICATION	6.435802927320741E-4	DESIGN
Schema export:	WITHOUT_CLASSIFICATION	0.9998192731054069	WITHOUT_CLASSIFICATION	1.8072689459315214E-4	DESIGN
String provider = properties.getProperty( Environment.BYTECODE_PROVIDER ); log.info( "Bytecode provider name : " + provider ); BytecodeProvider bytecodeProvider = buildBytecodeProvider( provider ); settings.setBytecodeProvider( bytecodeProvider );	WITHOUT_CLASSIFICATION	0.9998583200102509	WITHOUT_CLASSIFICATION	1.4167998974906498E-4	DESIGN
legacy behavior, apply the bridge...	WITHOUT_CLASSIFICATION	0.9967222821578855	WITHOUT_CLASSIFICATION	0.003277717842114459	DESIGN
maybe a concrete SQLpropertyresult type, but Map is exactly what is required at the moment	WITHOUT_CLASSIFICATION	0.9802711664526041	WITHOUT_CLASSIFICATION	0.019728833547395956	DESIGN
if dotted and not load-collection nor return-join regular property	WITHOUT_CLASSIFICATION	0.9996830632523299	WITHOUT_CLASSIFICATION	3.169367476699897E-4	DESIGN
private ComponentTuplizerFactory componentTuplizerFactory; todo : HHH-3517 and HHH-1907 private BytecodeProvider bytecodeProvider;	WITHOUT_CLASSIFICATION	0.9950940770335972	WITHOUT_CLASSIFICATION	0.004905922966402741	DESIGN
public getters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995576964045404	WITHOUT_CLASSIFICATION	4.423035954596867E-4	DESIGN
public ComponentTuplizerFactory getComponentTuplizerFactory() { return componentTuplizerFactory; }	WITHOUT_CLASSIFICATION	0.9977287662758093	WITHOUT_CLASSIFICATION	0.0022712337241906637	DESIGN
package protected setters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9648222742526975	WITHOUT_CLASSIFICATION	0.035177725747302525	DESIGN
void setShowSqlEnabled(boolean b) { showSql = b; } void setFormatSqlEnabled(boolean b) { formatSql = b; }	WITHOUT_CLASSIFICATION	0.9990217204260745	WITHOUT_CLASSIFICATION	9.782795739255493E-4	DESIGN
public BytecodeProvider getBytecodeProvider() { return bytecodeProvider; } void setBytecodeProvider(BytecodeProvider bytecodeProvider) { this.bytecodeProvider = bytecodeProvider; }	WITHOUT_CLASSIFICATION	0.9981437066339788	WITHOUT_CLASSIFICATION	0.0018562933660211337	DESIGN
using local since the inheritedMetas at this point is not the correct map since it is always the empty map	WITHOUT_CLASSIFICATION	0.9586785659788672	WITHOUT_CLASSIFICATION	0.0413214340211328	DESIGN
private ComponentTuplizerFactory componentTuplizerFactory; todo : HHH-3517 and HHH-1907	WITHOUT_CLASSIFICATION	0.9950940770335972	WITHOUT_CLASSIFICATION	0.004905922966402741	DESIGN
protected List extendsQueue;	WITHOUT_CLASSIFICATION	0.9973364048150071	WITHOUT_CLASSIFICATION	0.0026635951849929614	DESIGN
extendsQueue = new ArrayList();	WITHOUT_CLASSIFICATION	0.9997453742787877	WITHOUT_CLASSIFICATION	2.546257212123223E-4	DESIGN
componentTuplizerFactory = new ComponentTuplizerFactory();	WITHOUT_CLASSIFICATION	0.9997453742787877	WITHOUT_CLASSIFICATION	2.546257212123223E-4	DESIGN
if doc is null, then for whatever reason, the cached file cannot be used...	WITHOUT_CLASSIFICATION	0.9999237730273963	WITHOUT_CLASSIFICATION	7.622697260371141E-5	DESIGN
drop them in reverse order in case db needs it done that way...	WITHOUT_CLASSIFICATION	0.9917786001641503	WITHOUT_CLASSIFICATION	0.00822139983584965	DESIGN
public ComponentTuplizerFactory getComponentTuplizerFactory() { return componentTuplizerFactory; }	WITHOUT_CLASSIFICATION	0.9977287662758093	WITHOUT_CLASSIFICATION	0.0022712337241906637	DESIGN
This method may be called many times!!	WITHOUT_CLASSIFICATION	0.9934273856424858	WITHOUT_CLASSIFICATION	0.006572614357514257	DESIGN
Iterator iterator = extendsQueue.iterator();	WITHOUT_CLASSIFICATION	0.9996595183731503	WITHOUT_CLASSIFICATION	3.4048162684973375E-4	DESIGN
Iterator iter = extendsQueue.iterator();	WITHOUT_CLASSIFICATION	0.9987550940053793	WITHOUT_CLASSIFICATION	0.001244905994620667	DESIGN
found	WITHOUT_CLASSIFICATION	0.9992466579426765	WITHOUT_CLASSIFICATION	7.533420573234677E-4	DESIGN
found	WITHOUT_CLASSIFICATION	0.9992466579426765	WITHOUT_CLASSIFICATION	7.533420573234677E-4	DESIGN
settings.setComponentTuplizerFactory( this.getComponentTuplizerFactory() );	WITHOUT_CLASSIFICATION	0.999367392379193	WITHOUT_CLASSIFICATION	6.326076208069893E-4	DESIGN
private final List extendsQueue;	WITHOUT_CLASSIFICATION	0.997857859871785	WITHOUT_CLASSIFICATION	0.0021421401282151146	DESIGN
<String, String>	WITHOUT_CLASSIFICATION	0.9998423570864622	WITHOUT_CLASSIFICATION	1.5764291353785834E-4	DESIGN
<String, String>	WITHOUT_CLASSIFICATION	0.9998423570864622	WITHOUT_CLASSIFICATION	1.5764291353785834E-4	DESIGN
+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.6354890119831248	DESIGN	0.3645109880168752	WITHOUT_CLASSIFICATION
Set USE_REFLECTION_OPTIMIZER to false to fix HHH-227	WITHOUT_CLASSIFICATION	0.9493853380242858	WITHOUT_CLASSIFICATION	0.050614661975714195	DESIGN
orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9987809688194024	WITHOUT_CLASSIFICATION	0.0012190311805976171	DESIGN
element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9991070433391184	WITHOUT_CLASSIFICATION	8.929566608815932E-4	DESIGN
intentionally empty	WITHOUT_CLASSIFICATION	0.9997307046981381	WITHOUT_CLASSIFICATION	2.692953018619612E-4	DESIGN
orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9987809688194024	WITHOUT_CLASSIFICATION	0.0012190311805976171	DESIGN
element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9991070433391184	WITHOUT_CLASSIFICATION	8.929566608815932E-4	DESIGN
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9987729697063953	WITHOUT_CLASSIFICATION	0.0012270302936047686	DESIGN
maintain correct duplication if loaded in a cartesian product	WITHOUT_CLASSIFICATION	0.9982476709877652	WITHOUT_CLASSIFICATION	0.0017523290122348344	DESIGN
the element has been removed from the set	WITHOUT_CLASSIFICATION	0.9971227177181815	WITHOUT_CLASSIFICATION	0.002877282281818546	DESIGN
the element has changed	WITHOUT_CLASSIFICATION	0.9995237390264552	WITHOUT_CLASSIFICATION	4.762609735448362E-4	DESIGN
Careful: these methods do not initialize the collection.	WITHOUT_CLASSIFICATION	0.9889734986880102	WITHOUT_CLASSIFICATION	0.011026501311989751	DESIGN
needed so that we remove this collection from the second-level cache	WITHOUT_CLASSIFICATION	0.957564301611093	WITHOUT_CLASSIFICATION	0.04243569838890712	DESIGN
override on some subclasses	WITHOUT_CLASSIFICATION	0.9996138932531123	WITHOUT_CLASSIFICATION	3.861067468875555E-4	DESIGN
override on some subclasses	WITHOUT_CLASSIFICATION	0.9996138932531123	WITHOUT_CLASSIFICATION	3.861067468875555E-4	DESIGN
do this bit after setting initialized to true or it will recurse	WITHOUT_CLASSIFICATION	0.999188719773654	WITHOUT_CLASSIFICATION	8.112802263460641E-4	DESIGN
short-circuit(s) no new elements, the old list contains only Orphans no old elements, so no Orphans neither	WITHOUT_CLASSIFICATION	0.9999929308288237	WITHOUT_CLASSIFICATION	7.0691711763232825E-6	DESIGN
create the collection holding the Orphans	WITHOUT_CLASSIFICATION	0.9982260813827275	WITHOUT_CLASSIFICATION	0.0017739186172725824	DESIGN
collect EntityIdentifier(s) of the current elements - add them into a HashSet for fast access	WITHOUT_CLASSIFICATION	0.9995638625639748	WITHOUT_CLASSIFICATION	4.361374360251672E-4	DESIGN
iterate over the old list	WITHOUT_CLASSIFICATION	0.9996119253325152	WITHOUT_CLASSIFICATION	3.880746674847874E-4	DESIGN
(array==null) ? tempList.size() :	WITHOUT_CLASSIFICATION	0.9975819273628621	WITHOUT_CLASSIFICATION	0.002418072637137914	DESIGN
intentionally empty	WITHOUT_CLASSIFICATION	0.9997307046981381	WITHOUT_CLASSIFICATION	2.692953018619612E-4	DESIGN
(array==null) ? tempList.get(i) :	WITHOUT_CLASSIFICATION	0.9975819273628621	WITHOUT_CLASSIFICATION	0.002418072637137914	DESIGN
write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9998978166513443	WITHOUT_CLASSIFICATION	1.0218334865576407E-4	DESIGN
write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9998978166513443	WITHOUT_CLASSIFICATION	1.0218334865576407E-4	DESIGN
amazingly, these two will work because AbstractCollection uses iterator() to fill the array	WITHOUT_CLASSIFICATION	0.9999308990803581	WITHOUT_CLASSIFICATION	6.910091964186343E-5	DESIGN
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9987729697063953	WITHOUT_CLASSIFICATION	0.0012270302936047686	DESIGN
finally, what it's all about...	WITHOUT_CLASSIFICATION	0.9960483532079941	WITHOUT_CLASSIFICATION	0.003951646792005877	DESIGN
note that if we load this collection from a cartesian product the multiplicity would be broken ... so use an idbag instead	WITHOUT_CLASSIFICATION	0.5836299801051108	DESIGN	0.4163700198948892	WITHOUT_CLASSIFICATION
Anyway, here we implement <set> semantics for a <one-to-many> <bag>!	WITHOUT_CLASSIFICATION	0.6804664277288204	WITHOUT_CLASSIFICATION	0.31953357227117957	DESIGN
a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9991578117389823	WITHOUT_CLASSIFICATION	8.421882610176646E-4	DESIGN
search for it note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.8579708261488835	WITHOUT_CLASSIFICATION	0.14202917385111657	DESIGN
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9987729697063953	WITHOUT_CLASSIFICATION	0.0012270302936047686	DESIGN
a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9991578117389823	WITHOUT_CLASSIFICATION	8.421882610176646E-4	DESIGN
search for it note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.8579708261488835	WITHOUT_CLASSIFICATION	0.14202917385111657	DESIGN
public boolean equals(Object other) {read();return bag.equals(other);}public int hashCode(Object other) {read();return bag.hashCode();}	WITHOUT_CLASSIFICATION	0.9997449887072066	WITHOUT_CLASSIFICATION	2.5501129279333344E-4	DESIGN
List OPERATIONS:	WITHOUT_CLASSIFICATION	0.9999170566280309	WITHOUT_CLASSIFICATION	8.294337196911093E-5	DESIGN
pad with nulls from the current last element up to the new index	WITHOUT_CLASSIFICATION	0.9998596215553984	WITHOUT_CLASSIFICATION	1.4037844460158426E-4	DESIGN
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9987729697063953	WITHOUT_CLASSIFICATION	0.0012270302936047686	DESIGN
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9987729697063953	WITHOUT_CLASSIFICATION	0.0012270302936047686	DESIGN
from Map	WITHOUT_CLASSIFICATION	0.9990882046102165	WITHOUT_CLASSIFICATION	9.11795389783334E-4	DESIGN
from SortedMap	WITHOUT_CLASSIFICATION	0.9997879107283472	WITHOUT_CLASSIFICATION	2.1208927165283217E-4	DESIGN
inject the data	WITHOUT_CLASSIFICATION	0.9997856612407704	WITHOUT_CLASSIFICATION	2.1433875922966862E-4	DESIGN
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9996901168399774	WITHOUT_CLASSIFICATION	3.0988316002245644E-4	DESIGN
default pool size 20	WITHOUT_CLASSIFICATION	0.9999584393166991	WITHOUT_CLASSIFICATION	4.156068330087794E-5	DESIGN
trying via forName() first to be as close to DriverManager's semantics	WITHOUT_CLASSIFICATION	0.9999762710871088	WITHOUT_CLASSIFICATION	2.372891289125783E-5	DESIGN
if debug level is enabled, then log the password, otherwise mask it	WITHOUT_CLASSIFICATION	0.99997359214432	WITHOUT_CLASSIFICATION	2.6407855680000105E-5	DESIGN
register a cleanup synch	WITHOUT_CLASSIFICATION	0.999112093551684	WITHOUT_CLASSIFICATION	8.879064483161603E-4	DESIGN
wrap the session in the transaction-protection proxy	WITHOUT_CLASSIFICATION	0.9997761588811173	WITHOUT_CLASSIFICATION	2.238411188827587E-4	DESIGN
then bind it	WITHOUT_CLASSIFICATION	0.9998742803525588	WITHOUT_CLASSIFICATION	1.257196474412684E-4	DESIGN
try to make sure we don't wrap and already wrapped session	WITHOUT_CLASSIFICATION	0.9807717928325731	WITHOUT_CLASSIFICATION	0.019228207167426927	DESIGN
allow these to go through the the real session no matter what	WITHOUT_CLASSIFICATION	0.9819276542529443	WITHOUT_CLASSIFICATION	0.018072345747055678	DESIGN
limit the methods available if no transaction is active	WITHOUT_CLASSIFICATION	0.9996276879542209	WITHOUT_CLASSIFICATION	3.723120457791192E-4	DESIGN
allow these (deprecated) methods to pass through	WITHOUT_CLASSIFICATION	0.9975458929732268	WITHOUT_CLASSIFICATION	0.00245410702677321	DESIGN
serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993574960845476	WITHOUT_CLASSIFICATION	6.425039154525157E-4	DESIGN
We could register the session against the transaction even though it is not started, but we'd have no guarentee of ever getting the map entries cleaned up (aside from spawning threads).	WITHOUT_CLASSIFICATION	0.9999810899680945	WITHOUT_CLASSIFICATION	1.8910031905544352E-5	DESIGN
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9996901168399774	WITHOUT_CLASSIFICATION	3.0988316002245644E-4	DESIGN
private String propertyName;	WITHOUT_CLASSIFICATION	0.9949785185958959	WITHOUT_CLASSIFICATION	0.005021481404104097	DESIGN
public PropertyProjection project() {return Projections.property(getPropertyName());}	WITHOUT_CLASSIFICATION	0.9989422019556532	WITHOUT_CLASSIFICATION	0.0010577980443468075	DESIGN
String[] fk = StringHelper.qualify( "collection_", cp.getKeyColumnNames() );	WITHOUT_CLASSIFICATION	0.9996782647447644	WITHOUT_CLASSIFICATION	3.21735255235647E-4	DESIGN
" collection_ where " +	WITHOUT_CLASSIFICATION	0.9999226145916634	WITHOUT_CLASSIFICATION	7.738540833663671E-5	DESIGN
unsupported	WITHOUT_CLASSIFICATION	0.9998198252100738	WITHOUT_CLASSIFICATION	1.801747899261199E-4	DESIGN
unsupported	WITHOUT_CLASSIFICATION	0.9998198252100738	WITHOUT_CLASSIFICATION	1.801747899261199E-4	DESIGN
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9996901168399774	WITHOUT_CLASSIFICATION	3.0988316002245644E-4	DESIGN
the following two lines were added to ensure that this.params is not null, which can happen with two-deep nested subqueries	WITHOUT_CLASSIFICATION	0.9999326822641532	WITHOUT_CLASSIFICATION	6.731773584684622E-5	DESIGN
with two-deep subqueries, the same alias would get generated for both using the old method (criteriaQuery.generateSQLAlias()), so that is now used as a fallback if the main criteria alias isn't set	WITHOUT_CLASSIFICATION	0.795021988453876	WITHOUT_CLASSIFICATION	0.20497801154612413	DESIGN
implicit polymorphism not supported (would need a union)	WITHOUT_CLASSIFICATION	0.9910120387634587	WITHOUT_CLASSIFICATION	0.008987961236541261	DESIGN
pull off the last ", "	WITHOUT_CLASSIFICATION	0.9999724462633656	WITHOUT_CLASSIFICATION	2.7553736634441076E-5	DESIGN
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9991590740788332	WITHOUT_CLASSIFICATION	8.409259211668746E-4	DESIGN
we have the form: trim(trimSource) so we trim leading and trailing spaces	WITHOUT_CLASSIFICATION	0.9998675221665753	WITHOUT_CLASSIFICATION	1.3247783342469524E-4	DESIGN
we have the form: trim(from trimSource). This is functionally equivalent to trim(trimSource)	WITHOUT_CLASSIFICATION	0.9974781829678147	WITHOUT_CLASSIFICATION	0.0025218170321854292	DESIGN
NOT_SUPPORTED_SHOULD_USE_JDBC3_PreparedStatement.getGeneratedKeys_method	WITHOUT_CLASSIFICATION	0.999356419707268	WITHOUT_CLASSIFICATION	6.435802927320741E-4	DESIGN
potentialTrimCharacterArgIndex = 1 assumes that a trim-specification has been specified. we handle the exception to that explicitly	WITHOUT_CLASSIFICATION	0.9981228683493899	WITHOUT_CLASSIFICATION	0.0018771316506100766	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995123236311457	WITHOUT_CLASSIFICATION	4.8767636885424113E-4	DESIGN
Oracle did add support for ANSI CASE statements in 9i	WITHOUT_CLASSIFICATION	0.9995200538432498	WITHOUT_CLASSIFICATION	4.7994615675011574E-4	DESIGN
the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9998488992602471	WITHOUT_CLASSIFICATION	1.5110073975284474E-4	DESIGN
Informix doesn't have a bit type	WITHOUT_CLASSIFICATION	0.9927813373494968	WITHOUT_CLASSIFICATION	0.007218662650503127	DESIGN
or BYTE or TEXT? or MONEY	WITHOUT_CLASSIFICATION	0.999666955655921	WITHOUT_CLASSIFICATION	3.330443440790526E-4	DESIGN
strip table-owner because Informix always returns constraint names as "<table-owner>.<constraint-name>"	WITHOUT_CLASSIFICATION	0.9998608280502914	WITHOUT_CLASSIFICATION	1.391719497085293E-4	DESIGN
build the map of standard ANSI SQL aggregation functions ~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9984566640313298	WITHOUT_CLASSIFICATION	0.0015433359686701828	DESIGN
pre H3.2 behavior: super.getReturnType(ct, m);	WITHOUT_CLASSIFICATION	0.9996438537296541	WITHOUT_CLASSIFICATION	3.5614627034585963E-4	DESIGN
finally use the sqltype if == on Hibernate types did not find a match.	WITHOUT_CLASSIFICATION	0.9991557259874213	WITHOUT_CLASSIFICATION	8.442740125787102E-4	DESIGN
because numeric can be anything	WITHOUT_CLASSIFICATION	0.9998402842102638	WITHOUT_CLASSIFICATION	1.597157897361255E-4	DESIGN
constructors and factory methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9947280594404925	WITHOUT_CLASSIFICATION	0.00527194055950758	DESIGN
standard sql92 functions (can be overridden by subclasses)	WITHOUT_CLASSIFICATION	0.9890460548690266	WITHOUT_CLASSIFICATION	0.010953945130973355	DESIGN
map second/minute/hour/day/month/year to ANSI extract(), override on subclasses	WITHOUT_CLASSIFICATION	0.9996558617570728	WITHOUT_CLASSIFICATION	3.4413824292712364E-4	DESIGN
register hibernate types for default use in scalar sqlquery type auto detection	WITHOUT_CLASSIFICATION	0.9952603967938661	WITHOUT_CLASSIFICATION	0.004739603206133818	DESIGN
database type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9926854694093713	WITHOUT_CLASSIFICATION	0.007314530590628738	DESIGN
hibernate type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9926854694093713	WITHOUT_CLASSIFICATION	0.007314530590628738	DESIGN
keyword support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9987381188365955	WITHOUT_CLASSIFICATION	0.0012618811634045233	DESIGN
native identifier generatiion ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999679208021978	WITHOUT_CLASSIFICATION	3.2079197802202503E-4	DESIGN
IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9979976858327498	WITHOUT_CLASSIFICATION	0.00200231416725023	DESIGN
SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9979976858327498	WITHOUT_CLASSIFICATION	0.00200231416725023	DESIGN
GUID support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9979976858327498	WITHOUT_CLASSIFICATION	0.00200231416725023	DESIGN
limit/offset support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9979976858327498	WITHOUT_CLASSIFICATION	0.00200231416725023	DESIGN
by default we report no support	WITHOUT_CLASSIFICATION	0.9934675258121409	WITHOUT_CLASSIFICATION	0.006532474187859157	DESIGN
by default we report no support for NOWAIT lock semantics	WITHOUT_CLASSIFICATION	0.9563593268350928	WITHOUT_CLASSIFICATION	0.04364067316490727	DESIGN
table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9991290626914778	WITHOUT_CLASSIFICATION	8.70937308522198E-4	DESIGN
temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9818460212818763	WITHOUT_CLASSIFICATION	0.018153978718123756	DESIGN
callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.998092069290593	WITHOUT_CLASSIFICATION	0.0019079307094069617	DESIGN
current timestamp support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992091629026792	WITHOUT_CLASSIFICATION	7.908370973208172E-4	DESIGN
SQLException support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9979976858327498	WITHOUT_CLASSIFICATION	0.00200231416725023	DESIGN
miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9979976858327498	WITHOUT_CLASSIFICATION	0.00200231416725023	DESIGN
identifier quoting support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9980880113394153	WITHOUT_CLASSIFICATION	0.0019119886605846884	DESIGN
DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9979976858327498	WITHOUT_CLASSIFICATION	0.00200231416725023	DESIGN
grrr... for differentiation of mysql storage engines	WITHOUT_CLASSIFICATION	0.9998508451067847	WITHOUT_CLASSIFICATION	1.491548932153199E-4	DESIGN
Informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999356419707268	WITHOUT_CLASSIFICATION	6.435802927320741E-4	DESIGN
return false here, as most databases do not properly support this construct...	WITHOUT_CLASSIFICATION	0.9962552636426754	WITHOUT_CLASSIFICATION	0.0037447363573247456	DESIGN
Mckoi has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9988795597966786	WITHOUT_CLASSIFICATION	0.0011204402033213943	DESIGN
Oracle8 and previous define only a "DATE" type which is used to represent all aspects of date/time	WITHOUT_CLASSIFICATION	0.8325911550706308	WITHOUT_CLASSIFICATION	0.16740884492936928	DESIGN
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9993833301031305	WITHOUT_CLASSIFICATION	6.166698968694111E-4	DESIGN
" cascade";	WITHOUT_CLASSIFICATION	0.9998636117705517	WITHOUT_CLASSIFICATION	1.363882294483382E-4	DESIGN
trim off the length/precision/scale	WITHOUT_CLASSIFICATION	0.9998759684528014	WITHOUT_CLASSIFICATION	1.2403154719865358E-4	DESIGN
public boolean dropTemporaryTableAfterUse() {we have to, because postgres sets current txto rollback only after a failed create tablereturn true;}	WITHOUT_CLASSIFICATION	0.9999830589739448	WITHOUT_CLASSIFICATION	1.694102605522536E-5	DESIGN
CHECK VIOLATION	WITHOUT_CLASSIFICATION	0.9998192731054069	WITHOUT_CLASSIFICATION	1.8072689459315214E-4	DESIGN
UNIQUE VIOLATION	WITHOUT_CLASSIFICATION	0.9998192731054069	WITHOUT_CLASSIFICATION	1.8072689459315214E-4	DESIGN
FOREIGN KEY VIOLATION	WITHOUT_CLASSIFICATION	0.999496522138526	WITHOUT_CLASSIFICATION	5.034778614738687E-4	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995123236311457	WITHOUT_CLASSIFICATION	4.8767636885424113E-4	DESIGN
NOT NULL VIOLATION	WITHOUT_CLASSIFICATION	0.9993705353701895	WITHOUT_CLASSIFICATION	6.294646298105096E-4	DESIGN
ALL OTHER	WITHOUT_CLASSIFICATION	0.9991382906510542	WITHOUT_CLASSIFICATION	8.617093489458057E-4	DESIGN
Register the type of the out param - PostgreSQL uses Types.OTHER	WITHOUT_CLASSIFICATION	0.9840802465066593	WITHOUT_CLASSIFICATION	0.015919753493340665	DESIGN
seems to not really... public boolean supportsRowValueConstructorSyntax() { return true; }	WITHOUT_CLASSIFICATION	0.9917758023642143	WITHOUT_CLASSIFICATION	0.00822419763578565	DESIGN
seems to have spotty LOB suppport	WITHOUT_CLASSIFICATION	0.9989679476781484	WITHOUT_CLASSIFICATION	0.0010320523218514993	DESIGN
HHH-2300	WITHOUT_CLASSIFICATION	0.9991288176721137	WITHOUT_CLASSIFICATION	8.711823278862698E-4	DESIGN
ignore (probably H2 not in the classpath)	WITHOUT_CLASSIFICATION	0.9952892883547568	WITHOUT_CLASSIFICATION	0.004710711645243101	DESIGN
Numeric Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993976129785365	WITHOUT_CLASSIFICATION	6.023870214635772E-4	DESIGN
String Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994408336786159	WITHOUT_CLASSIFICATION	5.591663213840476E-4	DESIGN
Time and Date Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994565675863006	WITHOUT_CLASSIFICATION	5.434324136993651E-4	DESIGN
System Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994107444318986	WITHOUT_CLASSIFICATION	5.892555681014394E-4	DESIGN
not null is implicit	WITHOUT_CLASSIFICATION	0.9984872255329619	WITHOUT_CLASSIFICATION	0.0015127744670381479	DESIGN
23000: Check constraint violation: {0} 23001: Unique index or primary key violation: {0}	WITHOUT_CLASSIFICATION	0.9999266586214941	WITHOUT_CLASSIFICATION	7.334137850588568E-5	DESIGN
Display the dialect version.	WITHOUT_CLASSIFICATION	0.9998220762415458	WITHOUT_CLASSIFICATION	1.7792375845421447E-4	DESIGN
The RDMS concat() function only supports 2 parameters	WITHOUT_CLASSIFICATION	0.9999987813578076	WITHOUT_CLASSIFICATION	1.2186421923975967E-6	DESIGN
Dialect method overrides ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9990959951776305	WITHOUT_CLASSIFICATION	9.040048223695712E-4	DESIGN
Original Dialect.java returns " for update";	WITHOUT_CLASSIFICATION	0.999197898013899	WITHOUT_CLASSIFICATION	8.021019861010006E-4	DESIGN
Verify the state of this new method in Hibernate 3.0 Dialect.java	WITHOUT_CLASSIFICATION	0.9988459632641368	WITHOUT_CLASSIFICATION	0.0011540367358633095	DESIGN
Origial Dialect.java returns true;	WITHOUT_CLASSIFICATION	0.9991912247560306	WITHOUT_CLASSIFICATION	8.087752439693286E-4	DESIGN
The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9566928053272102	WITHOUT_CLASSIFICATION	0.04330719467278975	DESIGN
Sequence methods - start. The RDMS dialect needs these	WITHOUT_CLASSIFICATION	0.9954721775205949	WITHOUT_CLASSIFICATION	0.0045278224794051075	DESIGN
methods to make it possible to use the Native Id generator	WITHOUT_CLASSIFICATION	0.9972658911128951	WITHOUT_CLASSIFICATION	0.0027341088871048057	DESIGN
The where clause was added to eliminate this statement from Brute Force Searches.	WITHOUT_CLASSIFICATION	0.9999006813059533	WITHOUT_CLASSIFICATION	9.931869404661986E-5	DESIGN
Sequence methods - end	WITHOUT_CLASSIFICATION	0.9972848273936998	WITHOUT_CLASSIFICATION	0.002715172606300218	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995123236311457	WITHOUT_CLASSIFICATION	4.8767636885424113E-4	DESIGN
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9993833301031305	WITHOUT_CLASSIFICATION	6.166698968694111E-4	DESIGN
We must return a valid RDMS/RSA command from this method to prevent RDMS/RSA from issuing ERROR 400	WITHOUT_CLASSIFICATION	0.9915989847187279	WITHOUT_CLASSIFICATION	0.00840101528127218	DESIGN
Used with DROP TABLE to delete all records in the table.	WITHOUT_CLASSIFICATION	0.9996945208284939	WITHOUT_CLASSIFICATION	3.05479171506205E-4	DESIGN
RDMS supports the UNION ALL clause.	WITHOUT_CLASSIFICATION	0.9992430655596569	WITHOUT_CLASSIFICATION	7.569344403431057E-4	DESIGN
RDMS has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9988795597966786	WITHOUT_CLASSIFICATION	0.0011204402033213943	DESIGN
Multi-param dialect functions...	WITHOUT_CLASSIFICATION	0.999356419707268	WITHOUT_CLASSIFICATION	6.435802927320741E-4	DESIGN
function templates	WITHOUT_CLASSIFICATION	0.9999708412258852	WITHOUT_CLASSIFICATION	2.9158774114777072E-5	DESIGN
not null is implicit	WITHOUT_CLASSIFICATION	0.9984872255329619	WITHOUT_CLASSIFICATION	0.0015127744670381479	DESIGN
this assumes schema support, which is present in 1.8.0 and later...	WITHOUT_CLASSIFICATION	0.9998676523901062	WITHOUT_CLASSIFICATION	1.323476098937921E-4	DESIGN
HSQLDB only supports READ_UNCOMMITTED transaction isolation	WITHOUT_CLASSIFICATION	0.9993342058145226	WITHOUT_CLASSIFICATION	6.657941854774179E-4	DESIGN
Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9997361524686516	WITHOUT_CLASSIFICATION	2.638475313484441E-4	DESIGN
Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9993381160500533	WITHOUT_CLASSIFICATION	6.618839499467701E-4	DESIGN
Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.999374587599786	WITHOUT_CLASSIFICATION	6.254124002139289E-4	DESIGN
simple nullability constraint	WITHOUT_CLASSIFICATION	0.999749279554525	WITHOUT_CLASSIFICATION	2.5072044547501236E-4	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995123236311457	WITHOUT_CLASSIFICATION	4.8767636885424113E-4	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995123236311457	WITHOUT_CLASSIFICATION	4.8767636885424113E-4	DESIGN
not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9969226637266405	WITHOUT_CLASSIFICATION	0.0030773362733594587	DESIGN
register the type of the out param - an Oracle specific type	WITHOUT_CLASSIFICATION	0.9936856960657561	WITHOUT_CLASSIFICATION	0.006314303934243922	DESIGN
TimesTen has no BLOB/CLOB support, but these types may be suitable for some applications. The length is limited to 4 million bytes.	WITHOUT_CLASSIFICATION	0.9998550787327426	WITHOUT_CLASSIFICATION	1.4492126725732597E-4	DESIGN
new methods in dialect3	WITHOUT_CLASSIFICATION	0.9993732194165054	WITHOUT_CLASSIFICATION	6.267805834946218E-4	DESIGN
public boolean supportsForUpdateNowait() {return false;}	WITHOUT_CLASSIFICATION	0.9994940389062651	WITHOUT_CLASSIFICATION	5.059610937349528E-4	DESIGN
TimesTen has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9988795597966786	WITHOUT_CLASSIFICATION	0.0011204402033213943	DESIGN
iterate entries ordered by capacity to find first fit	WITHOUT_CLASSIFICATION	0.9960811251195348	WITHOUT_CLASSIFICATION	0.003918874880465283	DESIGN
add new ordered map	WITHOUT_CLASSIFICATION	0.9998010704585589	WITHOUT_CLASSIFICATION	1.98929541441191E-4	DESIGN
registerColumnType( Types.VARCHAR, 16777215, "mediumtext" );	WITHOUT_CLASSIFICATION	0.999367392379193	WITHOUT_CLASSIFICATION	6.326076208069893E-4	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995123236311457	WITHOUT_CLASSIFICATION	4.8767636885424113E-4	DESIGN
This assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.9998064584878146	WITHOUT_CLASSIFICATION	1.9354151218542174E-4	DESIGN
sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9995381521008982	WITHOUT_CLASSIFICATION	4.6184789910176275E-4	DESIGN
return "select CURRENT_TIMESTAMP from RDB$DATABASE";	WITHOUT_CLASSIFICATION	0.9991713283019481	WITHOUT_CLASSIFICATION	8.286716980518349E-4	DESIGN
registerColumnType data types	WITHOUT_CLASSIFICATION	0.9992442611413587	WITHOUT_CLASSIFICATION	7.55738858641308E-4	DESIGN
hibernate seems to ignore this type...	WITHOUT_CLASSIFICATION	0.9916621478097002	WITHOUT_CLASSIFICATION	0.008337852190299819	DESIGN
IBID for current_time and current_date	WITHOUT_CLASSIFICATION	0.9992992449852202	WITHOUT_CLASSIFICATION	7.007550147798251E-4	DESIGN
Tell hibernate to use getBytes instead of getBinaryStream	WITHOUT_CLASSIFICATION	0.9974513158212511	WITHOUT_CLASSIFICATION	0.002548684178748793	DESIGN
No batch statements	WITHOUT_CLASSIFICATION	0.9999643460152667	WITHOUT_CLASSIFICATION	3.565398473322726E-5	DESIGN
We might want a special case for 19,2. This is very common for money types and here it is converted to 18,1	WITHOUT_CLASSIFICATION	0.6469189586990354	WITHOUT_CLASSIFICATION	0.3530810413009646	DESIGN
no pointbase BIT	WITHOUT_CLASSIFICATION	0.9998825892963742	WITHOUT_CLASSIFICATION	1.1741070362576139E-4	DESIGN
no pointbase TINYINT	WITHOUT_CLASSIFICATION	0.9998825892963742	WITHOUT_CLASSIFICATION	1.1741070362576139E-4	DESIGN
Pointbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9988795597966786	WITHOUT_CLASSIFICATION	0.0011204402033213943	DESIGN
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9993833301031305	WITHOUT_CLASSIFICATION	6.166698968694111E-4	DESIGN
The current_timestamp is more accurate, but only known to be supported in SQL Server 7.0 and later (i.e., Sybase not known to support it at all)	WITHOUT_CLASSIFICATION	0.9749965635757214	WITHOUT_CLASSIFICATION	0.025003436424278633	DESIGN
SQL Server (at least up through 2005) does not support defining cascade delete constraints which can circel back to the mutating table	WITHOUT_CLASSIFICATION	0.9997660146860758	WITHOUT_CLASSIFICATION	2.3398531392413935E-4	DESIGN
here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9555109336249373	WITHOUT_CLASSIFICATION	0.04448906637506265	DESIGN
registerColumnType( Types.BLOB, 16777215, "mediumblob" ); registerColumnType( Types.BLOB, 65535, "blob" );	WITHOUT_CLASSIFICATION	0.999367392379193	WITHOUT_CLASSIFICATION	6.326076208069893E-4	DESIGN
registerColumnType( Types.CLOB, 16777215, "mediumtext" ); registerColumnType( Types.CLOB, 65535, "text" );	WITHOUT_CLASSIFICATION	0.999367392379193	WITHOUT_CLASSIFICATION	6.326076208069893E-4	DESIGN
registerColumnType( Types.VARCHAR, 16777215, "mediumtext" ); registerColumnType( Types.VARCHAR, 65535, "text" );	WITHOUT_CLASSIFICATION	0.999367392379193	WITHOUT_CLASSIFICATION	6.326076208069893E-4	DESIGN
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9993833301031305	WITHOUT_CLASSIFICATION	6.166698968694111E-4	DESIGN
package-private	WITHOUT_CLASSIFICATION	0.9998198323663554	WITHOUT_CLASSIFICATION	1.8016763364467063E-4	DESIGN
sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9995381521008982	WITHOUT_CLASSIFICATION	4.6184789910176275E-4	DESIGN
Sybase BIT type does not support null values	WITHOUT_CLASSIFICATION	0.9810532071702924	WITHOUT_CLASSIFICATION	0.018946792829707616	DESIGN
This assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.9998064584878146	WITHOUT_CLASSIFICATION	1.9354151218542174E-4	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995123236311457	WITHOUT_CLASSIFICATION	4.8767636885424113E-4	DESIGN
You may still have other ResultSets or update counts left to process here but you can't do it now or the ResultSet you just got will be closed	WITHOUT_CLASSIFICATION	0.9999661182020815	WITHOUT_CLASSIFICATION	3.388179791861379E-5	DESIGN
not null ... (start with 1) is implicit	WITHOUT_CLASSIFICATION	0.9818287869791523	WITHOUT_CLASSIFICATION	0.01817121302084773	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995123236311457	WITHOUT_CLASSIFICATION	4.8767636885424113E-4	DESIGN
Oracle driver reports to support getGeneratedKeys(), but they only support the version taking an array of the names of the columns to be returned (via its RETURNING clause). No other driver seems to support this overloaded version.	WITHOUT_CLASSIFICATION	0.9991036095381975	WITHOUT_CLASSIFICATION	8.963904618024017E-4	DESIGN
Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9997361524686516	WITHOUT_CLASSIFICATION	2.638475313484441E-4	DESIGN
Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9993381160500533	WITHOUT_CLASSIFICATION	6.618839499467701E-4	DESIGN
Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.999374587599786	WITHOUT_CLASSIFICATION	6.254124002139289E-4	DESIGN
add another (inner) nested select add the main query close off the inner nested select	WITHOUT_CLASSIFICATION	0.9999882612661698	WITHOUT_CLASSIFICATION	1.1738733830160097E-5	DESIGN
add the main query	WITHOUT_CLASSIFICATION	0.9997045085043496	WITHOUT_CLASSIFICATION	2.954914956504608E-4	DESIGN
add the restriction to the outer select	WITHOUT_CLASSIFICATION	0.9995714381753988	WITHOUT_CLASSIFICATION	4.2856182460115927E-4	DESIGN
This assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.9998064584878146	WITHOUT_CLASSIFICATION	1.9354151218542174E-4	DESIGN
You may still have other ResultSets or update counts left to process here but you can't do it now or the ResultSet you just got will be closed	WITHOUT_CLASSIFICATION	0.9999661182020815	WITHOUT_CLASSIFICATION	3.388179791861379E-5	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995123236311457	WITHOUT_CLASSIFICATION	4.8767636885424113E-4	DESIGN
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9993833301031305	WITHOUT_CLASSIFICATION	6.166698968694111E-4	DESIGN
simple nullability constraint	WITHOUT_CLASSIFICATION	0.999749279554525	WITHOUT_CLASSIFICATION	2.5072044547501236E-4	DESIGN
not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9969226637266405	WITHOUT_CLASSIFICATION	0.0030773362733594587	DESIGN
register the type of the out param - an Oracle specific type	WITHOUT_CLASSIFICATION	0.9936856960657561	WITHOUT_CLASSIFICATION	0.006314303934243922	DESIGN
features which change between 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9990756964129831	WITHOUT_CLASSIFICATION	9.24303587016816E-4	DESIGN
features which remain constant across 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99967029048753	WITHOUT_CLASSIFICATION	3.297095124700015E-4	DESIGN
binary %Stream character %Stream	WITHOUT_CLASSIFICATION	0.9997637762707948	WITHOUT_CLASSIFICATION	2.362237292052211E-4	DESIGN
getDefaultProperties().setProperty(Environment.STATEMENT_BATCH_SIZE, NO_BATCH);	WITHOUT_CLASSIFICATION	0.999356419707268	WITHOUT_CLASSIFICATION	6.435802927320741E-4	DESIGN
hibernate impelemnts cast in Dialect.java	WITHOUT_CLASSIFICATION	0.999160998720814	WITHOUT_CLASSIFICATION	8.390012791859817E-4	DESIGN
aggregate functions shouldn't be registered, right? registerFunction( "list", new StandardSQLFunction("list",Hibernate.STRING) ); stopped on $list	WITHOUT_CLASSIFICATION	0.9930171068358208	WITHOUT_CLASSIFICATION	0.0069828931641792115	DESIGN
DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9979976858327498	WITHOUT_CLASSIFICATION	0.00200231416725023	DESIGN
below is for Cache' that don't have str in 2007.1 there is str and we register str directly	WITHOUT_CLASSIFICATION	0.9962294440063285	WITHOUT_CLASSIFICATION	0.0037705559936715193	DESIGN
note that %string is deprecated	WITHOUT_CLASSIFICATION	0.9855713668589674	WITHOUT_CLASSIFICATION	0.014428633141032574	DESIGN
%upper is deprecated	WITHOUT_CLASSIFICATION	0.9990026016331929	WITHOUT_CLASSIFICATION	9.973983668072003E-4	DESIGN
The syntax used to add a foreign key constraint to a table.	WITHOUT_CLASSIFICATION	0.9860701397745578	WITHOUT_CLASSIFICATION	0.013929860225442264	DESIGN
identifier-commalist	WITHOUT_CLASSIFICATION	0.9998192731054069	WITHOUT_CLASSIFICATION	1.8072689459315214E-4	DESIGN
IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9979976858327498	WITHOUT_CLASSIFICATION	0.00200231416725023	DESIGN
SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9979976858327498	WITHOUT_CLASSIFICATION	0.00200231416725023	DESIGN
temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9818460212818763	WITHOUT_CLASSIFICATION	0.018153978718123756	DESIGN
identifier-commalist	WITHOUT_CLASSIFICATION	0.9998192731054069	WITHOUT_CLASSIFICATION	1.8072689459315214E-4	DESIGN
The syntax used to add a column to a table	WITHOUT_CLASSIFICATION	0.9838075253285781	WITHOUT_CLASSIFICATION	0.016192474671421923	DESIGN
Completely optional cascading drop clause.	WITHOUT_CLASSIFICATION	0.996507925202566	WITHOUT_CLASSIFICATION	0.003492074797434018	DESIGN
lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9978754264713089	WITHOUT_CLASSIFICATION	0.002124573528691015	DESIGN
LIMIT support (ala TOP) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9979976858327498	WITHOUT_CLASSIFICATION	0.00200231416725023	DESIGN
InterSystems Cache' does not current support "SELECT ... FOR UPDATE" syntax... Set your transaction mode to READ_COMMITTED before using	WITHOUT_CLASSIFICATION	0.9483180789957375	WITHOUT_CLASSIFICATION	0.05168192100426253	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995123236311457	WITHOUT_CLASSIFICATION	4.8767636885424113E-4	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995123236311457	WITHOUT_CLASSIFICATION	4.8767636885424113E-4	DESIGN
<String>	WITHOUT_CLASSIFICATION	0.9991288176721137	WITHOUT_CLASSIFICATION	8.711823278862698E-4	DESIGN
callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.998092069290593	WITHOUT_CLASSIFICATION	0.0019079307094069617	DESIGN
miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9979976858327498	WITHOUT_CLASSIFICATION	0.00200231416725023	DESIGN
The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9566928053272102	WITHOUT_CLASSIFICATION	0.04330719467278975	DESIGN
Does the LIMIT clause come at the start of the SELECT statement, rather than at the end?	WITHOUT_CLASSIFICATION	0.9741779249015582	WITHOUT_CLASSIFICATION	0.02582207509844181	DESIGN
Does the LIMIT clause take a "maximum" row number instead of a total number of returned rows?	WITHOUT_CLASSIFICATION	0.9980805699362463	WITHOUT_CLASSIFICATION	0.0019194300637536293	DESIGN
The name of the SQL function that transforms a string to lowercase	WITHOUT_CLASSIFICATION	0.9999038076857782	WITHOUT_CLASSIFICATION	9.61923142217987E-5	DESIGN
Create an OuterJoinGenerator for this dialect.	WITHOUT_CLASSIFICATION	0.9985551912729718	WITHOUT_CLASSIFICATION	0.0014448087270282546	DESIGN
The keyword used to insert a row without specifying any column values	WITHOUT_CLASSIFICATION	0.9981186750486258	WITHOUT_CLASSIFICATION	0.0018813249513742	DESIGN
registerFunction( "trim", new StandardSQLFunction( "trim", Hibernate.STRING ) );	WITHOUT_CLASSIFICATION	0.9992676165809667	WITHOUT_CLASSIFICATION	7.323834190331715E-4	DESIGN
skip the FROM keyword in params	WITHOUT_CLASSIFICATION	0.9992662728919327	WITHOUT_CLASSIFICATION	7.337271080674206E-4	DESIGN
package	WITHOUT_CLASSIFICATION	0.9957153436513405	WITHOUT_CLASSIFICATION	0.0042846563486594776	DESIGN
potentialTrimCharacterArgIndex = 1 assumes that a trim-specification has been specified. we handle the exception to that explicitly	WITHOUT_CLASSIFICATION	0.9981228683493899	WITHOUT_CLASSIFICATION	0.0018771316506100766	DESIGN
SQLFunction implementation	WITHOUT_CLASSIFICATION	0.9995034171100462	WITHOUT_CLASSIFICATION	4.965828899537914E-4	DESIGN
conceivable that the dialect ctor could throw HibernateExceptions, so don't re-wrap	WITHOUT_CLASSIFICATION	0.9984495666735071	WITHOUT_CLASSIFICATION	0.0015504333264929001	DESIGN
register the standard dialect resolver	WITHOUT_CLASSIFICATION	0.9987666165858063	WITHOUT_CLASSIFICATION	0.0012333834141936536	DESIGN
register resolvers set via Environment property	WITHOUT_CLASSIFICATION	0.9999244170750067	WITHOUT_CLASSIFICATION	7.558292499334942E-5	DESIGN
kept for backward compatibility until after the 3.1beta5 release of HA	WITHOUT_CLASSIFICATION	0.9998071614047169	WITHOUT_CLASSIFICATION	1.928385952831866E-4	DESIGN
cache the hashcode	WITHOUT_CLASSIFICATION	0.9998334106796913	WITHOUT_CLASSIFICATION	1.6658932030869374E-4	DESIGN
the CascadingAction contract ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995503155920655	WITHOUT_CLASSIFICATION	4.4968440793436863E-4	DESIGN
the CascadingAction implementations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999450104581878	WITHOUT_CLASSIFICATION	5.498954181220155E-4	DESIGN
delete does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9992667897070643	WITHOUT_CLASSIFICATION	7.332102929356728E-4	DESIGN
orphans should be deleted during delete	WITHOUT_CLASSIFICATION	0.9931663274081096	WITHOUT_CLASSIFICATION	0.006833672591890396	DESIGN
(LockMode) anything	WITHOUT_CLASSIFICATION	0.999926075769133	WITHOUT_CLASSIFICATION	7.392423086696944E-5	DESIGN
lock doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9992705570328939	WITHOUT_CLASSIFICATION	7.294429671060574E-4	DESIGN
refresh doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9994848410331806	WITHOUT_CLASSIFICATION	5.151589668194959E-4	DESIGN
evicts don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9992588889170456	WITHOUT_CLASSIFICATION	7.41111082954485E-4	DESIGN
saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9995938973477233	WITHOUT_CLASSIFICATION	4.0610265227669813E-4	DESIGN
orphans should be deleted during save/update	WITHOUT_CLASSIFICATION	0.9931068266009054	WITHOUT_CLASSIFICATION	0.00689317339909464	DESIGN
for deprecated saveOrUpdateCopy()	WITHOUT_CLASSIFICATION	0.9953175902553026	WITHOUT_CLASSIFICATION	0.004682409744697329	DESIGN
persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9992588889170456	WITHOUT_CLASSIFICATION	7.41111082954485E-4	DESIGN
a proxy cannot be transient and it breaks ForeignKeys.isTransient	WITHOUT_CLASSIFICATION	0.9993255383618097	WITHOUT_CLASSIFICATION	6.744616381902956E-4	DESIGN
replicate does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9992603660856376	WITHOUT_CLASSIFICATION	7.396339143623946E-4	DESIGN
static helper methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996508979356012	WITHOUT_CLASSIFICATION	3.491020643987039E-4	DESIGN
handles arrays and newly instantiated collections	WITHOUT_CLASSIFICATION	0.999718917452576	WITHOUT_CLASSIFICATION	2.8108254742395007E-4	DESIGN
Actually the semantics of the next three are really "Bag" Note that, unlike objects, collection insertions, updates, deletions are not really remembered between flushes. We just re-use the same Lists for convenience.	WITHOUT_CLASSIFICATION	0.9432503754937251	WITHOUT_CLASSIFICATION	0.056749624506274784	DESIGN
Add these directly to the executions queue	WITHOUT_CLASSIFICATION	0.9983681157485605	WITHOUT_CLASSIFICATION	0.0016318842514394518	DESIGN
continue loop	WITHOUT_CLASSIFICATION	0.9999667619124181	WITHOUT_CLASSIFICATION	3.323808758198685E-5	DESIGN
sort the updates by fk	WITHOUT_CLASSIFICATION	0.9999420616631611	WITHOUT_CLASSIFICATION	5.793833683897556E-5	DESIGN
sort the updates by pk	WITHOUT_CLASSIFICATION	0.9999420616631611	WITHOUT_CLASSIFICATION	5.793833683897556E-5	DESIGN
the mapping of entity names to their latest batch numbers.	WITHOUT_CLASSIFICATION	0.9998694766099692	WITHOUT_CLASSIFICATION	1.3052339003079137E-4	DESIGN
the map of batch numbers to EntityInsertAction lists	WITHOUT_CLASSIFICATION	0.9997681937776269	WITHOUT_CLASSIFICATION	2.318062223730694E-4	DESIGN
optimize the hash size to eliminate a rehash.	WITHOUT_CLASSIFICATION	0.9994948833340521	WITHOUT_CLASSIFICATION	5.051166659478062E-4	DESIGN
the list of entity names that indicate the batch number	WITHOUT_CLASSIFICATION	0.9999896290037817	WITHOUT_CLASSIFICATION	1.0370996218177371E-5	DESIGN
remove the current element from insertions. It will be added back later.	WITHOUT_CLASSIFICATION	0.9998529393213313	WITHOUT_CLASSIFICATION	1.470606786686629E-4	DESIGN
the entity associated with the current action.	WITHOUT_CLASSIFICATION	0.9993515728429069	WITHOUT_CLASSIFICATION	6.484271570931684E-4	DESIGN
There is already an existing batch for this type of entity. Check to see if the latest batch is acceptable.	WITHOUT_CLASSIFICATION	0.9988617124232531	WITHOUT_CLASSIFICATION	0.001138287576747019	DESIGN
now rebuild the insertions list. There is a batch for each entry in the name list.	WITHOUT_CLASSIFICATION	0.9995990743843381	WITHOUT_CLASSIFICATION	4.0092561566188394E-4	DESIGN
the current batch number is the latest batch for this entity type.	WITHOUT_CLASSIFICATION	0.99972673494419	WITHOUT_CLASSIFICATION	2.732650558101171E-4	DESIGN
loop through all the associations of the current entity and make sure that they are processed before the current batch number	WITHOUT_CLASSIFICATION	0.999885739301665	WITHOUT_CLASSIFICATION	1.1426069833500004E-4	DESIGN
find the batch number associated with the current association, if any.	WITHOUT_CLASSIFICATION	0.9999740024317353	WITHOUT_CLASSIFICATION	2.5997568264746767E-5	DESIGN
create a new batch for this type. The batch number is the number of current batches.	WITHOUT_CLASSIFICATION	0.9999614510807545	WITHOUT_CLASSIFICATION	3.8548919245412074E-5	DESIGN
loop through all the associated entities and make sure they have been processed before the latest batch associated with this entity type.	WITHOUT_CLASSIFICATION	0.9989556643618561	WITHOUT_CLASSIFICATION	0.0010443356381438583	DESIGN
since this entity will now be processed in the latest possible batch, we can be assured that it will come after all other associations, there's not need to continue checking.	WITHOUT_CLASSIFICATION	0.9965166611518018	WITHOUT_CLASSIFICATION	0.0034833388481982984	DESIGN
cascade to current collection elements	WITHOUT_CLASSIFICATION	0.9993691213033811	WITHOUT_CLASSIFICATION	6.308786966190144E-4	DESIGN
not really necessary, but good for consistency...	WITHOUT_CLASSIFICATION	0.9975124075613324	WITHOUT_CLASSIFICATION	0.0024875924386675613	DESIGN
we can't cascade to non-embedded elements	WITHOUT_CLASSIFICATION	0.9988209978360469	WITHOUT_CLASSIFICATION	0.001179002163953123	DESIGN
a newly instantiated collection can't have orphans	WITHOUT_CLASSIFICATION	0.9946989099126174	WITHOUT_CLASSIFICATION	0.005301090087382498	DESIGN
handle orphaned entities!!	WITHOUT_CLASSIFICATION	0.9984920038746551	WITHOUT_CLASSIFICATION	0.0015079961253448718	DESIGN
Loaded entity instances, by EntityUniqueKey	WITHOUT_CLASSIFICATION	0.9997309021729822	WITHOUT_CLASSIFICATION	2.690978270178683E-4	DESIGN
Identity map of EntityEntry instances, by the entity instance	WITHOUT_CLASSIFICATION	0.9999323769430637	WITHOUT_CLASSIFICATION	6.762305693621667E-5	DESIGN
Entity proxies, by EntityKey	WITHOUT_CLASSIFICATION	0.9997870505381572	WITHOUT_CLASSIFICATION	2.1294946184288236E-4	DESIGN
Snapshots of current database state for entities that have not been loaded	WITHOUT_CLASSIFICATION	0.9997223528829385	WITHOUT_CLASSIFICATION	2.7764711706142284E-4	DESIGN
Identity map of array holder ArrayHolder instances, by the array instance	WITHOUT_CLASSIFICATION	0.9999742254081616	WITHOUT_CLASSIFICATION	2.577459183836146E-5	DESIGN
Collection wrappers, by the CollectionKey key=CollectionKey, value=PersistentCollection	WITHOUT_CLASSIFICATION	0.999814227017483	WITHOUT_CLASSIFICATION	1.8577298251701014E-4	DESIGN
Set of EntityKeys of deleted objects	WITHOUT_CLASSIFICATION	0.9995044196346367	WITHOUT_CLASSIFICATION	4.955803653633092E-4	DESIGN
properties that we have tried to load, and not found in the database	WITHOUT_CLASSIFICATION	0.998389907925991	WITHOUT_CLASSIFICATION	0.0016100920740090101	DESIGN
A list of collection wrappers that were instantiating during result set processing, that we will need to initialize at the end of the query	WITHOUT_CLASSIFICATION	0.9990713712042413	WITHOUT_CLASSIFICATION	9.286287957587523E-4	DESIGN
A container for collections we load up when the owning entity is not yet loaded ... for now, this is purely transient!	WITHOUT_CLASSIFICATION	0.9903310764619376	WITHOUT_CLASSIFICATION	0.00966892353806234	DESIGN
Downgrade locks	WITHOUT_CLASSIFICATION	0.9998269218059228	WITHOUT_CLASSIFICATION	1.7307819407720676E-4	DESIGN
any earlier proxy takes precedence	WITHOUT_CLASSIFICATION	0.9999227281227432	WITHOUT_CLASSIFICATION	7.727187725680973E-5	DESIGN
unwrap the object	WITHOUT_CLASSIFICATION	0.9999397251308815	WITHOUT_CLASSIFICATION	6.0274869118532655E-5	DESIGN
initialize + unwrap the object	WITHOUT_CLASSIFICATION	0.9999379356757109	WITHOUT_CLASSIFICATION	6.206432428915854E-5	DESIGN
return the proxied object	WITHOUT_CLASSIFICATION	0.9996673508442183	WITHOUT_CLASSIFICATION	3.3264915578157207E-4	DESIGN
overwrite old proxy	WITHOUT_CLASSIFICATION	0.9999896773832909	WITHOUT_CLASSIFICATION	1.0322616709220469E-5	DESIGN
early exit...	WITHOUT_CLASSIFICATION	0.9998466993635169	WITHOUT_CLASSIFICATION	1.5330063648309416E-4	DESIGN
or should it actually throw an exception?	WITHOUT_CLASSIFICATION	0.9938140335913914	WITHOUT_CLASSIFICATION	0.006185966408608534	DESIGN
treat it just like a new collection	WITHOUT_CLASSIFICATION	0.9957388767146991	WITHOUT_CLASSIFICATION	0.004261123285300963	DESIGN
do this work only at the very highest level of the load don't let this method be called recursively	WITHOUT_CLASSIFICATION	0.9699444311236977	WITHOUT_CLASSIFICATION	0.030055568876302334	DESIGN
note that each iteration of the loop may add new elements	WITHOUT_CLASSIFICATION	0.9998831554758554	WITHOUT_CLASSIFICATION	1.1684452414464844E-4	DESIGN
it might be an unwrapped collection reference! try to find a wrapper (slowish)	WITHOUT_CLASSIFICATION	0.9977411972100431	WITHOUT_CLASSIFICATION	0.0022588027899569135	DESIGN
public boolean isNonExistant(EntityKey key) {return nonExistantEntityKeys.contains(key);}	WITHOUT_CLASSIFICATION	0.9994940389062651	WITHOUT_CLASSIFICATION	5.059610937349528E-4	DESIGN
public boolean isNonExistant(EntityUniqueKey key) {return nonExistentEntityUniqueKeys.contains(key);}	WITHOUT_CLASSIFICATION	0.9994940389062651	WITHOUT_CLASSIFICATION	5.059610937349528E-4	DESIGN
iterate all the entities currently associated with the persistence context.	WITHOUT_CLASSIFICATION	0.9976967214251934	WITHOUT_CLASSIFICATION	0.0023032785748065606	DESIGN
does this entity entry pertain to the entity persister in which we are interested (owner)?	WITHOUT_CLASSIFICATION	0.9973805947652307	WITHOUT_CLASSIFICATION	0.002619405234769392	DESIGN
check if the managed object is the parent	WITHOUT_CLASSIFICATION	0.9998219649577303	WITHOUT_CLASSIFICATION	1.7803504226970174E-4	DESIGN
otherwise, the proxy was pruned during the serialization process	WITHOUT_CLASSIFICATION	0.9999842462436276	WITHOUT_CLASSIFICATION	1.5753756372434313E-5	DESIGN
adds remove as a sort-of alias for delete...	WITHOUT_CLASSIFICATION	0.9982117052388628	WITHOUT_CLASSIFICATION	0.0017882947611370722	DESIGN
bad cast	WITHOUT_CLASSIFICATION	0.9990603894288587	WITHOUT_CLASSIFICATION	9.396105711413244E-4	DESIGN
return lhsPersister.getSubclassPropertyColumnNames(property);	WITHOUT_CLASSIFICATION	0.999293802461369	WITHOUT_CLASSIFICATION	7.061975386310989E-4	DESIGN
property-refs for associations defined on a component are not supported, so no need to slice	WITHOUT_CLASSIFICATION	0.9969554759975714	WITHOUT_CLASSIFICATION	0.0030445240024287315	DESIGN
if there is no property-ref, assume the join is to the subclass table (ie. the table of the subclass that the association belongs to)	WITHOUT_CLASSIFICATION	0.9998391227272551	WITHOUT_CLASSIFICATION	1.6087727274493934E-4	DESIGN
handle a property-ref	WITHOUT_CLASSIFICATION	0.9969920054143392	WITHOUT_CLASSIFICATION	0.00300799458566095	DESIGN
NativeSQLQueryReturn	WITHOUT_CLASSIFICATION	0.9998192731054069	WITHOUT_CLASSIFICATION	1.8072689459315214E-4	DESIGN
final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9997916736166709	WITHOUT_CLASSIFICATION	2.0832638332903518E-4	DESIGN
why is all others non final ?	WITHOUT_CLASSIFICATION	0.8850867097083198	WITHOUT_CLASSIFICATION	0.11491329029168014	DESIGN
this.forceCacheRefresh = forceCacheRefresh;	WITHOUT_CLASSIFICATION	0.9996067502678262	WITHOUT_CLASSIFICATION	3.9324973217382545E-4	DESIGN
HELLA IMPORTANT OPTIMIZATION!!!	WITHOUT_CLASSIFICATION	0.9993589166071585	WITHOUT_CLASSIFICATION	6.410833928415386E-4	DESIGN
return that.type.equals(type) && EqualsHelper.equals(that.value, value);	WITHOUT_CLASSIFICATION	0.9992744499476823	WITHOUT_CLASSIFICATION	7.255500523177392E-4	DESIGN
Must occur after resolving identifiers!	WITHOUT_CLASSIFICATION	0.9918022286520523	WITHOUT_CLASSIFICATION	0.008197771347947642	DESIGN
take a snapshot	WITHOUT_CLASSIFICATION	0.9996593380439623	WITHOUT_CLASSIFICATION	3.406619560376482E-4	DESIGN
do a check	WITHOUT_CLASSIFICATION	0.9990388211550648	WITHOUT_CLASSIFICATION	9.611788449350827E-4	DESIGN
the owning entity may have been deleted and its identifier unset due to identifier-rollback; in which case, try to look up its identifier from the persistence context	WITHOUT_CLASSIFICATION	0.999701710389318	WITHOUT_CLASSIFICATION	2.982896106819742E-4	DESIGN
do the work	WITHOUT_CLASSIFICATION	0.9999264315035448	WITHOUT_CLASSIFICATION	7.356849645521886E-5	DESIGN
We've been here before	WITHOUT_CLASSIFICATION	0.9973897307001676	WITHOUT_CLASSIFICATION	0.002610269299832567	DESIGN
it is or was referenced _somewhere_	WITHOUT_CLASSIFICATION	0.9999053996034497	WITHOUT_CLASSIFICATION	9.460039655033343E-5	DESIGN
do the work	WITHOUT_CLASSIFICATION	0.9999264315035448	WITHOUT_CLASSIFICATION	7.356849645521886E-5	DESIGN
if either its role changed,	WITHOUT_CLASSIFICATION	0.9997284394999413	WITHOUT_CLASSIFICATION	2.715605000587503E-4	DESIGN
or its key changed	WITHOUT_CLASSIFICATION	0.9999652822688777	WITHOUT_CLASSIFICATION	3.471773112235632E-5	DESIGN
we will need to create new entries	WITHOUT_CLASSIFICATION	0.9984529891212806	WITHOUT_CLASSIFICATION	0.0015470108787194075	DESIGN
we will need to remove ye olde entries	WITHOUT_CLASSIFICATION	0.9850244845876907	WITHOUT_CLASSIFICATION	0.014975515412309372	DESIGN
force initialize!	WITHOUT_CLASSIFICATION	0.9990695590394396	WITHOUT_CLASSIFICATION	9.304409605604133E-4	DESIGN
else if it's elements changed	WITHOUT_CLASSIFICATION	0.9999507114873452	WITHOUT_CLASSIFICATION	4.928851265486662E-5	DESIGN
ATTRIBUTES MAINTAINED BETWEEN FLUSH CYCLES	WITHOUT_CLASSIFICATION	0.999356419707268	WITHOUT_CLASSIFICATION	6.435802927320741E-4	DESIGN
session-start/post-flush persistent state	WITHOUT_CLASSIFICATION	0.999314618139687	WITHOUT_CLASSIFICATION	6.853818603129371E-4	DESIGN
allow the CollectionSnapshot to be serialized	WITHOUT_CLASSIFICATION	0.9965557931549969	WITHOUT_CLASSIFICATION	0.003444206845003176	DESIGN
ATTRIBUTES USED ONLY DURING FLUSH CYCLE	WITHOUT_CLASSIFICATION	0.9962051277688746	WITHOUT_CLASSIFICATION	0.0037948722311254746	DESIGN
"current" means the reference that was found during flush()	WITHOUT_CLASSIFICATION	0.9998641209623961	WITHOUT_CLASSIFICATION	1.3587903760399792E-4	DESIGN
"loaded" means the reference that is consistent with the current database state	WITHOUT_CLASSIFICATION	0.9998344326586996	WITHOUT_CLASSIFICATION	1.655673413003213E-4	DESIGN
during flush, we navigate the object graph to collections and decide what to do with them	WITHOUT_CLASSIFICATION	0.9978438464189231	WITHOUT_CLASSIFICATION	0.0021561535810768473	DESIGN
if we instantiate a collection during the flush() process, we must ignore it for the rest of the flush()	WITHOUT_CLASSIFICATION	0.9979462243433251	WITHOUT_CLASSIFICATION	0.002053775656674921	DESIGN
new collections that get found + wrapped during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9973658441503499	WITHOUT_CLASSIFICATION	0.0026341558496502083	DESIGN
a newly wrapped collection is NOT dirty (or we get unnecessary version updates)	WITHOUT_CLASSIFICATION	0.8259024580626889	WITHOUT_CLASSIFICATION	0.1740975419373111	DESIGN
collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9994936520530547	WITHOUT_CLASSIFICATION	5.063479469452313E-4	DESIGN
collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9994936520530547	WITHOUT_CLASSIFICATION	5.063479469452313E-4	DESIGN
detached collections that get found + reattached during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9997610498452347	WITHOUT_CLASSIFICATION	2.3895015476530307E-4	DESIGN
optimization	WITHOUT_CLASSIFICATION	0.9999057790562321	WITHOUT_CLASSIFICATION	9.422094376796013E-5	DESIGN
optimization optimization	WITHOUT_CLASSIFICATION	0.9997359772051422	WITHOUT_CLASSIFICATION	2.640227948578343E-4	DESIGN
re-snapshot	WITHOUT_CLASSIFICATION	0.9998192731054069	WITHOUT_CLASSIFICATION	1.8072689459315214E-4	DESIGN
for convenience to save some lookups	WITHOUT_CLASSIFICATION	0.997124441051127	WITHOUT_CLASSIFICATION	0.002875558948873063	DESIGN
NOTE: this is not updated when properties are fetched lazily!	WITHOUT_CLASSIFICATION	0.9974161687639161	WITHOUT_CLASSIFICATION	0.0025838312360838634	DESIGN
memory optimization	WITHOUT_CLASSIFICATION	0.9999353421580286	WITHOUT_CLASSIFICATION	6.465784197142092E-5	DESIGN
use the id value of a newly instantiated instance as the unsaved-value	WITHOUT_CLASSIFICATION	0.9998356528289983	WITHOUT_CLASSIFICATION	1.6434717100154836E-4	DESIGN
copied from Session:	WITHOUT_CLASSIFICATION	0.9977153089437282	WITHOUT_CLASSIFICATION	0.0022846910562719256	DESIGN
this should not happen since the DTD prevents it	WITHOUT_CLASSIFICATION	0.9957068789975171	WITHOUT_CLASSIFICATION	0.004293121002482839	DESIGN
JoinProcessor needs to know if the where clause fragment came from a dynamic filter or not so it can put the where clause fragment in the right place in the SQL AST. 'hasFilterCondition' keeps track of that fact.	WITHOUT_CLASSIFICATION	0.9978807523586447	WITHOUT_CLASSIFICATION	0.0021192476413553	DESIGN
the current join represents the join between a many-to-many association table and its "target" table. Here we need to apply any additional filters defined specifically on the many-to-many	WITHOUT_CLASSIFICATION	0.9999328045420743	WITHOUT_CLASSIFICATION	6.719545792556912E-5	DESIGN
check basic level one nullablilty	WITHOUT_CLASSIFICATION	0.9997964186424386	WITHOUT_CLASSIFICATION	2.035813575613929E-4	DESIGN
values is not null and is checkable, we'll look deeper	WITHOUT_CLASSIFICATION	0.998543129616936	WITHOUT_CLASSIFICATION	0.0014568703830639572	DESIGN
for non null args, check for components and elements containing components	WITHOUT_CLASSIFICATION	0.9988269418238386	WITHOUT_CLASSIFICATION	0.001173058176161396	DESIGN
cache the hashcode	WITHOUT_CLASSIFICATION	0.9998334106796913	WITHOUT_CLASSIFICATION	1.6658932030869374E-4	DESIGN
persistent collections may have components	WITHOUT_CLASSIFICATION	0.99967447170282	WITHOUT_CLASSIFICATION	3.2552829718005634E-4	DESIGN
check for all components values in the collection	WITHOUT_CLASSIFICATION	0.9998626527484743	WITHOUT_CLASSIFICATION	1.373472515257971E-4	DESIGN
will check current level if some of them are not null or sublevels if they exist	WITHOUT_CLASSIFICATION	0.9989443366954579	WITHOUT_CLASSIFICATION	0.0010556633045421147	DESIGN
do the test	WITHOUT_CLASSIFICATION	0.9999689865109812	WITHOUT_CLASSIFICATION	3.1013489018676846E-5	DESIGN
if its an uninitialized proxy it can't be transient	WITHOUT_CLASSIFICATION	0.9997407231968635	WITHOUT_CLASSIFICATION	2.5927680313654275E-4	DESIGN
unwrap it	WITHOUT_CLASSIFICATION	0.9996127642891265	WITHOUT_CLASSIFICATION	3.872357108734375E-4	DESIGN
See if the entity is already bound to this session, if not look at the entity identifier and assume that the entity is persistent if the id is not "unsaved" (that is, we rely on foreign keys to keep database integrity)	WITHOUT_CLASSIFICATION	0.953458369074739	WITHOUT_CLASSIFICATION	0.04654163092526102	DESIGN
an unfetched association can only point to an entity that already exists in the db	WITHOUT_CLASSIFICATION	0.9998098563497269	WITHOUT_CLASSIFICATION	1.9014365027321788E-4	DESIGN
let the interceptor inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9978153344581051	WITHOUT_CLASSIFICATION	0.0021846655418949353	DESIGN
let the persister inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9946704708017842	WITHOUT_CLASSIFICATION	0.005329529198215902	DESIGN
we use the assumed value, if there is one, to avoid hitting the database	WITHOUT_CLASSIFICATION	0.9998056701272674	WITHOUT_CLASSIFICATION	1.9432987273254715E-4	DESIGN
hit the database, after checking the session cache for a snapshot	WITHOUT_CLASSIFICATION	0.9839499524539085	WITHOUT_CLASSIFICATION	0.01605004754609153	DESIGN
context-entity-identifier returns null explicitly if the entity is not associated with the persistence context; so make some deeper checks...	WITHOUT_CLASSIFICATION	0.9916413329575606	WITHOUT_CLASSIFICATION	0.008358667042439281	DESIGN
int count = 0;	WITHOUT_CLASSIFICATION	0.9999441811695029	WITHOUT_CLASSIFICATION	5.5818830497041085E-5	DESIGN
the first key found after the given key	WITHOUT_CLASSIFICATION	0.99989418574358	WITHOUT_CLASSIFICATION	1.0581425641992186E-4	DESIGN
checkForEnd = false;	WITHOUT_CLASSIFICATION	0.9998370798869222	WITHOUT_CLASSIFICATION	1.6292011307790318E-4	DESIGN
count++;	WITHOUT_CLASSIFICATION	0.9991288176721137	WITHOUT_CLASSIFICATION	8.711823278862698E-4	DESIGN
end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9998484901302093	WITHOUT_CLASSIFICATION	1.5150986979071702E-4	DESIGN
we ran out of keys to try	WITHOUT_CLASSIFICATION	0.9987955226635259	WITHOUT_CLASSIFICATION	0.0012044773364741342	DESIGN
first element of array is reserved for the actual instance we are loading!	WITHOUT_CLASSIFICATION	0.9994405962079744	WITHOUT_CLASSIFICATION	5.594037920255724E-4	DESIGN
the first id found after the given id	WITHOUT_CLASSIFICATION	0.999800935150967	WITHOUT_CLASSIFICATION	1.990648490329799E-4	DESIGN
we ran out of ids to try	WITHOUT_CLASSIFICATION	0.9997410191074471	WITHOUT_CLASSIFICATION	2.589808925529571E-4	DESIGN
look for existing collection as part of the persistence context	WITHOUT_CLASSIFICATION	0.9995214718930424	WITHOUT_CLASSIFICATION	4.785281069575157E-4	DESIGN
ignore this row of results! Note the early exit	WITHOUT_CLASSIFICATION	0.9998111341374928	WITHOUT_CLASSIFICATION	1.8886586250714101E-4	DESIGN
initialize this collection	WITHOUT_CLASSIFICATION	0.9931186349147372	WITHOUT_CLASSIFICATION	0.006881365085262805	DESIGN
create one	WITHOUT_CLASSIFICATION	0.9992455902411191	WITHOUT_CLASSIFICATION	7.544097588808724E-4	DESIGN
warning: can cause a recursive calls! (proxy initialization)	WITHOUT_CLASSIFICATION	0.9960670758342569	WITHOUT_CLASSIFICATION	0.003932924165743127	DESIGN
there were no queued additions and the role has a cache	WITHOUT_CLASSIFICATION	0.9997314213230757	WITHOUT_CLASSIFICATION	2.6857867692426605E-4	DESIGN
and this is not a forced initialization during flush	WITHOUT_CLASSIFICATION	0.9941141034287531	WITHOUT_CLASSIFICATION	0.005885896571246896	DESIGN
some filters affecting the collection are enabled on the session, so do not do the put into the cache.	WITHOUT_CLASSIFICATION	0.9802097912822764	WITHOUT_CLASSIFICATION	0.0197902087177237	DESIGN
cleanup code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9981919818355609	WITHOUT_CLASSIFICATION	0.0018080181644392125	DESIGN
loading collection xrefs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993003234186574	WITHOUT_CLASSIFICATION	6.996765813427027E-4	DESIGN
Collection load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994281785914351	WITHOUT_CLASSIFICATION	5.718214085649741E-4	DESIGN
simple cache of param metadata based on query string. Ideally, the original "user-supplied query" string should be used to retreive this metadata (i.e., not the para-list-expanded query string) to avoid unnecessary cache entries. Used solely for caching param metadata for native-sql queries, see getSQLParameterMetadata() for a discussion as to why...	WITHOUT_CLASSIFICATION	0.6498782919070358	WITHOUT_CLASSIFICATION	0.3501217080929642	DESIGN
the cache of the actual plans...	WITHOUT_CLASSIFICATION	0.9998605631640958	WITHOUT_CLASSIFICATION	1.3943683590419626E-4	DESIGN
package	WITHOUT_CLASSIFICATION	0.9957153436513405	WITHOUT_CLASSIFICATION	0.0042846563486594776	DESIGN
package	WITHOUT_CLASSIFICATION	0.9957153436513405	WITHOUT_CLASSIFICATION	0.0042846563486594776	DESIGN
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999722441845003	WITHOUT_CLASSIFICATION	2.7755815499824483E-5	DESIGN
for native-sql queries, the param metadata is determined outside any relation to a query plan, because query plan creation and/or retreival for a native-sql query depends on all of the return types having been set, which might not be the case up-front when param metadata would be most useful	WITHOUT_CLASSIFICATION	0.9930211175777783	WITHOUT_CLASSIFICATION	0.006978882422221625	DESIGN
don't care...	WITHOUT_CLASSIFICATION	0.9998066934992261	WITHOUT_CLASSIFICATION	1.933065007739071E-4	DESIGN
Recognition code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9981792262786718	WITHOUT_CLASSIFICATION	0.0018207737213281772	DESIGN
don't care...	WITHOUT_CLASSIFICATION	0.9998066934992261	WITHOUT_CLASSIFICATION	1.933065007739071E-4	DESIGN
NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9993770936125423	WITHOUT_CLASSIFICATION	6.229063874575916E-4	DESIGN
break the outer loop !!!	WITHOUT_CLASSIFICATION	0.9998600618367506	WITHOUT_CLASSIFICATION	1.3993816324936288E-4	DESIGN
named parameter	WITHOUT_CLASSIFICATION	0.9993203830763416	WITHOUT_CLASSIFICATION	6.796169236583543E-4	DESIGN
could be either an ordinal or JPA-positional parameter	WITHOUT_CLASSIFICATION	0.994872880383974	WITHOUT_CLASSIFICATION	0.005127119616025926	DESIGN
a peek ahead showed this as an JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9971065840006575	WITHOUT_CLASSIFICATION	0.002893415999342476	DESIGN
make sure this "name" is an integral	WITHOUT_CLASSIFICATION	0.9989230861536833	WITHOUT_CLASSIFICATION	0.0010769138463166844	DESIGN
pre-determine and cache the hashcode	WITHOUT_CLASSIFICATION	0.9994381333289939	WITHOUT_CLASSIFICATION	5.618666710061452E-4	DESIGN
perform the actual work	WITHOUT_CLASSIFICATION	0.9998557888881462	WITHOUT_CLASSIFICATION	1.4421111185368264E-4	DESIGN
if everything went ok, commit the transaction and close the obtained connection handle...	WITHOUT_CLASSIFICATION	0.9999641550463962	WITHOUT_CLASSIFICATION	3.584495360378251E-5	DESIGN
at some point the processing went bad, so we need to: 1) make sure the connection handle gets released 2) try to cleanup the JTA context as much as possible	WITHOUT_CLASSIFICATION	0.9959938627632335	WITHOUT_CLASSIFICATION	0.004006137236766434	DESIGN
finally handle the exception	WITHOUT_CLASSIFICATION	0.9963584217622113	WITHOUT_CLASSIFICATION	0.0036415782377885774	DESIGN
a "detached" collection that belonged to a different entity	WITHOUT_CLASSIFICATION	0.9880007337463848	WITHOUT_CLASSIFICATION	0.011999266253615307	DESIGN
saveOrUpdateCopy() is deprecated!	WITHOUT_CLASSIFICATION	0.9994404664463673	WITHOUT_CLASSIFICATION	5.595335536327028E-4	DESIGN
collectionPersister should not be null, but we don't want to throw an exception if it is null	WITHOUT_CLASSIFICATION	0.6967500022605728	WITHOUT_CLASSIFICATION	0.3032499977394273	DESIGN
otherwise a null or brand new collection this will also (inefficiently) handle arrays, which have no snapshot, so we can't do any better processArrayOrNewCollection(collection, type);	WITHOUT_CLASSIFICATION	0.9824647544549516	WITHOUT_CLASSIFICATION	0.017535245545048365	DESIGN
a "detached" collection that originally belonged to the same entity	WITHOUT_CLASSIFICATION	0.9903608990137001	WITHOUT_CLASSIFICATION	0.009639100986299944	DESIGN
do nothing	WITHOUT_CLASSIFICATION	0.9993422446069458	WITHOUT_CLASSIFICATION	6.57755393054222E-4	DESIGN
do nothing	WITHOUT_CLASSIFICATION	0.9993422446069458	WITHOUT_CLASSIFICATION	6.57755393054222E-4	DESIGN
Force a substitution!	WITHOUT_CLASSIFICATION	0.999110743228735	WITHOUT_CLASSIFICATION	8.892567712649752E-4	DESIGN
The user requested a "greater" (i.e. more restrictive) form of pessimistic lock	WITHOUT_CLASSIFICATION	0.998264888226242	WITHOUT_CLASSIFICATION	0.0017351117737579686	DESIGN
the database now holds a lock + the object is flushed from the cache, so release the soft lock	WITHOUT_CLASSIFICATION	0.9998765900402695	WITHOUT_CLASSIFICATION	1.2340995973048757E-4	DESIGN
now update the object .. has to be outside the main if block above (because of collections)	WITHOUT_CLASSIFICATION	0.9999665156583162	WITHOUT_CLASSIFICATION	3.3484341683780295E-5	DESIGN
Search for collections by reachability, updating their role. We don't want to touch collections reachable from a deleted object	WITHOUT_CLASSIFICATION	0.9986799988130408	WITHOUT_CLASSIFICATION	0.0013200011869592145	DESIGN
this is a situation where the entity id is assigned by a post-insert generator and was saved outside the transaction forcing it to be delayed	WITHOUT_CLASSIFICATION	0.9873168009545976	WITHOUT_CLASSIFICATION	0.012683199045402434	DESIGN
NOTE: we need to do the wrap here even if its not "dirty", because collections need wrapping but changes to _them_ don't dirty the container. Also, for versioned data, we need to wrap before calling searchForDirtyCollections	WITHOUT_CLASSIFICATION	0.7265252068704154	DESIGN	0.2734747931295847	WITHOUT_CLASSIFICATION
grab its state saved at deletion	WITHOUT_CLASSIFICATION	0.9965741251414814	WITHOUT_CLASSIFICATION	0.0034258748585186925	DESIGN
grab its current state	WITHOUT_CLASSIFICATION	0.9997746490301918	WITHOUT_CLASSIFICATION	2.2535096980811007E-4	DESIGN
schedule the update note that we intentionally do _not_ pass in currentPersistentState!	WITHOUT_CLASSIFICATION	0.9997746043905515	WITHOUT_CLASSIFICATION	2.2539560944831498E-4	DESIGN
substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9997985643900498	WITHOUT_CLASSIFICATION	2.014356099503016E-4	DESIGN
give the Interceptor a chance to process property values, if the properties were modified by the Interceptor, we need to set them back to the object	WITHOUT_CLASSIFICATION	0.9999983875978116	WITHOUT_CLASSIFICATION	1.612402188489417E-6	DESIGN
compare to cached state (ignoring collections unless versioned)	WITHOUT_CLASSIFICATION	0.9989066604661129	WITHOUT_CLASSIFICATION	0.00109333953388717	DESIGN
if it was dirtied by a collection only	WITHOUT_CLASSIFICATION	0.9997566249233321	WITHOUT_CLASSIFICATION	2.4337507666779114E-4	DESIGN
increment the version number (if necessary)	WITHOUT_CLASSIFICATION	0.9998919257706337	WITHOUT_CLASSIFICATION	1.080742293662819E-4	DESIGN
check nullability but do not perform command execute we'll use scheduled updates for that.	WITHOUT_CLASSIFICATION	0.9969496313991044	WITHOUT_CLASSIFICATION	0.0030503686008956227	DESIGN
give the Interceptor a chance to modify property values	WITHOUT_CLASSIFICATION	0.9997229786657271	WITHOUT_CLASSIFICATION	2.770213342728483E-4	DESIGN
now we might need to recalculate the dirtyProperties array	WITHOUT_CLASSIFICATION	0.9892480146412665	WITHOUT_CLASSIFICATION	0.010751985358733517	DESIGN
use the current version	WITHOUT_CLASSIFICATION	0.9998391450636155	WITHOUT_CLASSIFICATION	1.6085493638453677E-4	DESIGN
Interceptor returned null, so do the dirtycheck ourself, if possible	WITHOUT_CLASSIFICATION	0.9999521786628499	WITHOUT_CLASSIFICATION	4.782133715015924E-5	DESIGN
object loaded by update()	WITHOUT_CLASSIFICATION	0.9999264996664462	WITHOUT_CLASSIFICATION	7.350033355381182E-5	DESIGN
dirty check against the usual snapshot of the entity	WITHOUT_CLASSIFICATION	0.9999381118606205	WITHOUT_CLASSIFICATION	6.188813937948269E-5	DESIGN
dirty check against the database snapshot, if possible/necessary	WITHOUT_CLASSIFICATION	0.9999613777953086	WITHOUT_CLASSIFICATION	3.862220469132863E-5	DESIGN
the Interceptor handled the dirty checking	WITHOUT_CLASSIFICATION	0.9990531247499371	WITHOUT_CLASSIFICATION	9.468752500629838E-4	DESIGN
even process null collections	WITHOUT_CLASSIFICATION	0.9997109455465372	WITHOUT_CLASSIFICATION	2.8905445346276843E-4	DESIGN
get the id from the object	WITHOUT_CLASSIFICATION	0.9995575465920121	WITHOUT_CLASSIFICATION	4.4245340798781935E-4	DESIGN
always do an INSERT, and let it fail by constraint violation	WITHOUT_CLASSIFICATION	0.9996085002671079	WITHOUT_CLASSIFICATION	3.9149973289213924E-4	DESIGN
what is the version on the database?	WITHOUT_CLASSIFICATION	0.9987111423436889	WITHOUT_CLASSIFICATION	0.0012888576563111417	DESIGN
/ HHH-2378	WITHOUT_CLASSIFICATION	0.9995842610591597	WITHOUT_CLASSIFICATION	4.157389408404177E-4	DESIGN
will result in a SQL UPDATE:	WITHOUT_CLASSIFICATION	0.9999147376075778	WITHOUT_CLASSIFICATION	8.526239242228087E-5	DESIGN
else do nothing (don't even reassociate object!)	WITHOUT_CLASSIFICATION	0.9998666843449637	WITHOUT_CLASSIFICATION	1.3331565503629697E-4	DESIGN
no existing row - do an insert	WITHOUT_CLASSIFICATION	0.9997137149168841	WITHOUT_CLASSIFICATION	2.8628508311585464E-4	DESIGN
refresh() does not pass an entityName	WITHOUT_CLASSIFICATION	0.9995920226582399	WITHOUT_CLASSIFICATION	4.0797734176013805E-4	DESIGN
do not return a proxy! (this option indicates we are initializing a proxy)	WITHOUT_CLASSIFICATION	0.9960259047310471	WITHOUT_CLASSIFICATION	0.0039740952689529185	DESIGN
return a proxy if appropriate	WITHOUT_CLASSIFICATION	0.9995807842997255	WITHOUT_CLASSIFICATION	4.1921570027447606E-4	DESIGN
return existing object or initialized proxy (unless deleted)	WITHOUT_CLASSIFICATION	0.9999007935683143	WITHOUT_CLASSIFICATION	9.920643168569043E-5	DESIGN
return new uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999229859770481	WITHOUT_CLASSIFICATION	7.701402295186105E-5	DESIGN
this object was already loaded	WITHOUT_CLASSIFICATION	0.9993007966899953	WITHOUT_CLASSIFICATION	6.992033100046327E-4	DESIGN
Entity was found in second-level cache...	WITHOUT_CLASSIFICATION	0.9994769416922178	WITHOUT_CLASSIFICATION	5.23058307782119E-4	DESIGN
make it circular-reference safe	WITHOUT_CLASSIFICATION	0.9988292030149244	WITHOUT_CLASSIFICATION	0.001170796985075665	DESIGN
intializes result by side-effect	WITHOUT_CLASSIFICATION	0.9999607605585653	WITHOUT_CLASSIFICATION	3.9239441434809335E-5	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Pre-flushing section ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993008324798176	WITHOUT_CLASSIFICATION	6.99167520182358E-4	DESIGN
some statistics	WITHOUT_CLASSIFICATION	0.9997308507563866	WITHOUT_CLASSIFICATION	2.6914924361348436E-4	DESIGN
safe from concurrent modification because of how entryList() is implemented on IdentityMap	WITHOUT_CLASSIFICATION	0.9999395445093426	WITHOUT_CLASSIFICATION	6.045549065743987E-5	DESIGN
Initialize dirty flags for arrays + collections with composite elements and reset reached, doupdate, etc.	WITHOUT_CLASSIFICATION	0.9998923891465524	WITHOUT_CLASSIFICATION	1.0761085344754809E-4	DESIGN
Among other things, updateReachables() will recursively load all collections that are moving roles. This might cause entities to be loaded.	WITHOUT_CLASSIFICATION	0.9780727766364653	WITHOUT_CLASSIFICATION	0.021927223363534615	DESIGN
So this needs to be safe from concurrent modification problems. It is safe because of how IdentityMap implements entrySet()	WITHOUT_CLASSIFICATION	0.9945117119106205	WITHOUT_CLASSIFICATION	0.005488288089379566	DESIGN
Update the status of the object and if necessary, schedule an update	WITHOUT_CLASSIFICATION	0.999998190761072	WITHOUT_CLASSIFICATION	1.809238928027288E-6	DESIGN
Schedule updates to collections:	WITHOUT_CLASSIFICATION	0.9993654153512735	WITHOUT_CLASSIFICATION	6.345846487263497E-4	DESIGN
we need to lock the collection caches before executing entity inserts/updates in order to account for bidi associations	WITHOUT_CLASSIFICATION	0.9692698070056591	WITHOUT_CLASSIFICATION	0.030730192994340932	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Post-flushing section ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993008324798176	WITHOUT_CLASSIFICATION	6.99167520182358E-4	DESIGN
the database has changed now, so the subselect results need to be invalidated	WITHOUT_CLASSIFICATION	0.9994095144445801	WITHOUT_CLASSIFICATION	5.904855554198857E-4	DESIGN
if the collection is dereferenced, remove from the session cache iter.remove(); does not work, since the entrySet is not backed by the set	WITHOUT_CLASSIFICATION	0.9939992628113107	WITHOUT_CLASSIFICATION	0.006000737188689209	DESIGN
otherwise recreate the mapping between the collection and its key	WITHOUT_CLASSIFICATION	0.9992305419644345	WITHOUT_CLASSIFICATION	7.694580355654444E-4	DESIGN
get a snapshot	WITHOUT_CLASSIFICATION	0.9995124270319661	WITHOUT_CLASSIFICATION	4.875729680339134E-4	DESIGN
package-private	WITHOUT_CLASSIFICATION	0.9998198323663554	WITHOUT_CLASSIFICATION	1.8016763364467063E-4	DESIGN
package-private	WITHOUT_CLASSIFICATION	0.9998198323663554	WITHOUT_CLASSIFICATION	1.8016763364467063E-4	DESIGN
key is an entity involved with the operation performed by the listener; value is a flag indicating if the listener explicitly operates on the entity	WITHOUT_CLASSIFICATION	0.9999910479091692	WITHOUT_CLASSIFICATION	8.952090830825505E-6	DESIGN
EARLY EXIT!!!	WITHOUT_CLASSIFICATION	0.9998192731054069	WITHOUT_CLASSIFICATION	1.8072689459315214E-4	DESIGN
ie. the entity came in from update()	WITHOUT_CLASSIFICATION	0.9994237284899099	WITHOUT_CLASSIFICATION	5.762715100900263E-4	DESIGN
before any callbacks, etc, so subdeletions see that this deletion happened first	WITHOUT_CLASSIFICATION	0.9996369011578503	WITHOUT_CLASSIFICATION	3.630988421496983E-4	DESIGN
Ensures that containing deletions happen before sub-deletions	WITHOUT_CLASSIFICATION	0.9997225180553415	WITHOUT_CLASSIFICATION	2.7748194465846717E-4	DESIGN
TypeFactory.deepCopy( currentState, propTypes, persister.getPropertyUpdateability(), deletedState, session );	WITHOUT_CLASSIFICATION	0.9994059971976764	WITHOUT_CLASSIFICATION	5.940028023235311E-4	DESIGN
cascade-delete to collections BEFORE the collection owner is deleted	WITHOUT_CLASSIFICATION	0.9986246595808677	WITHOUT_CLASSIFICATION	0.0013753404191323394	DESIGN
cascade-delete to many-to-one AFTER the parent was deleted	WITHOUT_CLASSIFICATION	0.9991101649813237	WITHOUT_CLASSIFICATION	8.898350186763004E-4	DESIGN
if it is an initialized proxy, let cascade handle it later on	WITHOUT_CLASSIFICATION	0.9937182224553542	WITHOUT_CLASSIFICATION	0.0062817775446457605	DESIGN
assign the requested id to the proxy, before reassociating the proxy	WITHOUT_CLASSIFICATION	0.999938931222505	WITHOUT_CLASSIFICATION	6.106877749491499E-5	DESIGN
an uninitialized proxy, noop, don't even need to return an id, since it is never a save()	WITHOUT_CLASSIFICATION	0.9994805346763362	WITHOUT_CLASSIFICATION	5.194653236636675E-4	DESIGN
initialize properties of the event:	WITHOUT_CLASSIFICATION	0.9998963910590605	WITHOUT_CLASSIFICATION	1.0360894093951226E-4	DESIGN
return the id in the event object	WITHOUT_CLASSIFICATION	0.9996246795374607	WITHOUT_CLASSIFICATION	3.7532046253933437E-4	DESIGN
TRANSIENT or DELETED	WITHOUT_CLASSIFICATION	0.9998811422861753	WITHOUT_CLASSIFICATION	1.1885771382478775E-4	DESIGN
use the id assigned to the instance	WITHOUT_CLASSIFICATION	0.998557071746136	WITHOUT_CLASSIFICATION	0.0014429282538641224	DESIGN
assume this is a newly instantiated transient object which should be saved rather than updated	WITHOUT_CLASSIFICATION	0.5289573121859048	DESIGN	0.47104268781409514	WITHOUT_CLASSIFICATION
this is a transient object with existing persistent state not loaded by the session	WITHOUT_CLASSIFICATION	0.9923467339334487	WITHOUT_CLASSIFICATION	0.007653266066551352	DESIGN
a collection loaded in the current session can not possibly be the collection belonging to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9947302997255101	WITHOUT_CLASSIFICATION	0.00526970027448985	DESIGN
cachedState,	WITHOUT_CLASSIFICATION	0.9998192731054069	WITHOUT_CLASSIFICATION	1.8072689459315214E-4	DESIGN
assume true, since we don't really know, and it doesn't matter	WITHOUT_CLASSIFICATION	0.9995526352422826	WITHOUT_CLASSIFICATION	4.473647577174732E-4	DESIGN
a "detached" collection!	WITHOUT_CLASSIFICATION	0.9989889806888017	WITHOUT_CLASSIFICATION	0.0010110193111983353	DESIGN
if the collection belonged to a different entity, clean up the existing state of the collection	WITHOUT_CLASSIFICATION	0.9972161859993766	WITHOUT_CLASSIFICATION	0.002783814000623343	DESIGN
log.debug( "calling onLoad()" );	WITHOUT_CLASSIFICATION	0.999367392379193	WITHOUT_CLASSIFICATION	6.326076208069893E-4	DESIGN
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9998192731054069	WITHOUT_CLASSIFICATION	1.8072689459315214E-4	DESIGN
note: performExecutions() clears all collectionXxxxtion collections (the collection actions) in the session	WITHOUT_CLASSIFICATION	0.9983465552441474	WITHOUT_CLASSIFICATION	0.0016534447558526988	DESIGN
if no array holder we found an unwrappered array (this can't occur, because we now always call wrap() before getting to here) return (ah==null) ? true : searchForDirtyCollections(ah, type);	WITHOUT_CLASSIFICATION	0.9997680727957847	WITHOUT_CLASSIFICATION	2.319272042153585E-4	DESIGN
if not wrappered yet, its dirty (this can't occur, because we now always call wrap() before getting to here) return ( ! (obj instanceof PersistentCollection) ) ? true : searchForDirtyCollections( (PersistentCollection) obj, type );	WITHOUT_CLASSIFICATION	0.9774218000184628	WITHOUT_CLASSIFICATION	0.022578199981537147	DESIGN
we need to check even if it was not initialized, because of delayed adds!	WITHOUT_CLASSIFICATION	0.9992682885270456	WITHOUT_CLASSIFICATION	7.317114729543264E-4	DESIGN
NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9998353189921266	WITHOUT_CLASSIFICATION	1.6468100787339588E-4	DESIGN
find any entities that are still transient after retry	WITHOUT_CLASSIFICATION	0.966544611249799	WITHOUT_CLASSIFICATION	0.03345538875020098	DESIGN
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9998192731054069	WITHOUT_CLASSIFICATION	1.8072689459315214E-4	DESIGN
Check the persistence context for an entry relating to this entity to be merged...	WITHOUT_CLASSIFICATION	0.994154717162742	WITHOUT_CLASSIFICATION	0.005845282837258055	DESIGN
we have specialized case of a detached entity from the perspective of the merge operation. Specifically, we have an incoming entity instance which has a corresponding entry in the current persistence context, but registered under a different entity instance	WITHOUT_CLASSIFICATION	0.9999952553485281	WITHOUT_CLASSIFICATION	4.7446514719144656E-6	DESIGN
DELETED	WITHOUT_CLASSIFICATION	0.9991288176721137	WITHOUT_CLASSIFICATION	8.711823278862698E-4	DESIGN
before cascade!	WITHOUT_CLASSIFICATION	0.9998400581115754	WITHOUT_CLASSIFICATION	1.5994188842463164E-4	DESIGN
cascade first, so that all unsaved objects get their copy created before we actually copy cascadeOnMerge(event, persister, entity, copyCache, Cascades.CASCADE_BEFORE_MERGE);	WITHOUT_CLASSIFICATION	0.9999281711287166	WITHOUT_CLASSIFICATION	7.182887128338698E-5	DESIGN
this bit is only really absolutely necessary for handling requestedId, but is also good if we merge multiple object graphs, since it helps ensure uniqueness	WITHOUT_CLASSIFICATION	0.9877020580390848	WITHOUT_CLASSIFICATION	0.012297941960915054	DESIGN
continue...; we'll find out if it ends up not getting saved later	WITHOUT_CLASSIFICATION	0.7028887088022172	WITHOUT_CLASSIFICATION	0.2971112911977829	DESIGN
cascade first, so that all unsaved objects get their copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999281711287166	WITHOUT_CLASSIFICATION	7.182887128338698E-5	DESIGN
check that entity id = requestedId	WITHOUT_CLASSIFICATION	0.999843505258149	WITHOUT_CLASSIFICATION	1.5649474185093728E-4	DESIGN
before cascade!	WITHOUT_CLASSIFICATION	0.9998400581115754	WITHOUT_CLASSIFICATION	1.5994188842463164E-4	DESIGN
we got here because we assumed that an instance with an assigned id was detached, when it was really persistent	WITHOUT_CLASSIFICATION	0.9997524714167616	WITHOUT_CLASSIFICATION	2.4752858323838517E-4	DESIGN
cascade first, so that all unsaved objects get their copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999281711287166	WITHOUT_CLASSIFICATION	7.182887128338698E-5	DESIGN
copyValues works by reflection, so explicitly mark the entity instance dirty	WITHOUT_CLASSIFICATION	0.9998875950059017	WITHOUT_CLASSIFICATION	1.1240499409815932E-4	DESIGN
EARLY EXIT	WITHOUT_CLASSIFICATION	0.9991288176721137	WITHOUT_CLASSIFICATION	8.711823278862698E-4	DESIGN
source.getBatcher().executeBatch(); found another way to ensure that all batched joined inserts have been executed	WITHOUT_CLASSIFICATION	0.9996435716398401	WITHOUT_CLASSIFICATION	3.564283601600212E-4	DESIGN
substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9997985643900498	WITHOUT_CLASSIFICATION	2.014356099503016E-4	DESIGN
now done in EntityIdentityInsertAction persister.setIdentifier( entity, id, source.getEntityMode() );	WITHOUT_CLASSIFICATION	0.99884797135568	WITHOUT_CLASSIFICATION	0.001152028644319949	DESIGN
source.getPersistenceContext().removeNonExist( new EntityKey( id, persister, source.getEntityMode() ) );	WITHOUT_CLASSIFICATION	0.9992676165809667	WITHOUT_CLASSIFICATION	7.323834190331715E-4	DESIGN
keep the existing version number in the case of replicate!	WITHOUT_CLASSIFICATION	0.9999874020578443	WITHOUT_CLASSIFICATION	1.259794215574957E-5	DESIGN
cascade-save to many-to-one BEFORE the parent is saved	WITHOUT_CLASSIFICATION	0.9979329313569184	WITHOUT_CLASSIFICATION	0.002067068643081618	DESIGN
pass this as an argument only to avoid double looking	WITHOUT_CLASSIFICATION	0.9999984890546855	WITHOUT_CLASSIFICATION	1.5109453146399612E-6	DESIGN
the object is persistent	WITHOUT_CLASSIFICATION	0.9997392577754107	WITHOUT_CLASSIFICATION	2.607422245892519E-4	DESIGN
the entity is associated with the session, so check its status	WITHOUT_CLASSIFICATION	0.9999580379455907	WITHOUT_CLASSIFICATION	4.196205440943949E-5	DESIGN
do nothing for persistent instances	WITHOUT_CLASSIFICATION	0.9996095915834389	WITHOUT_CLASSIFICATION	3.904084165612114E-4	DESIGN
ie. e.status==DELETED	WITHOUT_CLASSIFICATION	0.9994936520530547	WITHOUT_CLASSIFICATION	5.063479469452313E-4	DESIGN
the object is transient or detached	WITHOUT_CLASSIFICATION	0.9996842159702802	WITHOUT_CLASSIFICATION	3.1578402971971996E-4	DESIGN
NOTE EARLY EXIT!	WITHOUT_CLASSIFICATION	0.999836732714024	WITHOUT_CLASSIFICATION	1.6326728597607443E-4	DESIGN
Private constructor - stops checkstyle from complaining.	WITHOUT_CLASSIFICATION	0.9996164050398689	WITHOUT_CLASSIFICATION	3.835949601310551E-4	DESIGN
First, try to find a matching constructor accepting a ViolatedConstraintNameExtracter param...	WITHOUT_CLASSIFICATION	0.9994005169887958	WITHOUT_CLASSIFICATION	5.994830112040594E-4	DESIGN
eat it and try next	WITHOUT_CLASSIFICATION	0.9997143496264287	WITHOUT_CLASSIFICATION	2.8565037357135254E-4	DESIGN
Otherwise, try to use the no-arg constructor	WITHOUT_CLASSIFICATION	0.9998885790651223	WITHOUT_CLASSIFICATION	1.1142093487773741E-4	DESIGN
oracle sql-state code for deadlock	WITHOUT_CLASSIFICATION	0.997985790852708	WITHOUT_CLASSIFICATION	0.0020142091472919745	DESIGN
CollectionPropertyMapping processes everything except 'index'.	WITHOUT_CLASSIFICATION	0.997961909320514	WITHOUT_CLASSIFICATION	0.002038090679485938	DESIGN
remove initial ", "	WITHOUT_CLASSIFICATION	0.9996908475148374	WITHOUT_CLASSIFICATION	3.091524851625762E-4	DESIGN
remove initial " and "	WITHOUT_CLASSIFICATION	0.9991658191902852	WITHOUT_CLASSIFICATION	8.341808097147374E-4	DESIGN
beforeClassTokens.add("new"); DEFINITELY DON'T HAVE THIS!!	WITHOUT_CLASSIFICATION	0.999356419707268	WITHOUT_CLASSIFICATION	6.435802927320741E-4	DESIGN
notAfterClassTokens.add(",");	WITHOUT_CLASSIFICATION	0.9994936520530547	WITHOUT_CLASSIFICATION	5.063479469452313E-4	DESIGN
just especially for the trivial collection filter	WITHOUT_CLASSIFICATION	0.9984076553008094	WITHOUT_CLASSIFICATION	0.0015923446991905545	DESIGN
update last non-whitespace token, if necessary	WITHOUT_CLASSIFICATION	0.9996075278396156	WITHOUT_CLASSIFICATION	3.9247216038433645E-4	DESIGN
select-range is terminated by declaration of "from"	WITHOUT_CLASSIFICATION	0.999926662653506	WITHOUT_CLASSIFICATION	7.333734649403669E-5	DESIGN
scan for next non-whitespace token	WITHOUT_CLASSIFICATION	0.9990773529968762	WITHOUT_CLASSIFICATION	9.226470031238243E-4	DESIGN
Note this!!	WITHOUT_CLASSIFICATION	0.9999430902612054	WITHOUT_CLASSIFICATION	5.690973879453077E-5	DESIGN
Error message constants.	WITHOUT_CLASSIFICATION	0.9990109897605521	WITHOUT_CLASSIFICATION	9.890102394477982E-4	DESIGN
handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9981275209138212	WITHOUT_CLASSIFICATION	0.001872479086178852	DESIGN
semantic action handling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9981344862307597	WITHOUT_CLASSIFICATION	0.0018655137692401911	DESIGN
Handle collection-fiter compilation. IMPORTANT NOTE: This is modifying the INPUT (HQL) tree, not the output tree!	WITHOUT_CLASSIFICATION	0.9893739548189513	WITHOUT_CLASSIFICATION	0.01062604518104864	DESIGN
Show the modified AST.	WITHOUT_CLASSIFICATION	0.9999523288359431	WITHOUT_CLASSIFICATION	4.767116405695112E-5	DESIGN
Create a parameter specification for the collection filter...	WITHOUT_CLASSIFICATION	0.9903208131487545	WITHOUT_CLASSIFICATION	0.009679186851245447	DESIGN
Use the delegate.	WITHOUT_CLASSIFICATION	0.9998523300799953	WITHOUT_CLASSIFICATION	1.4766992000462114E-4	DESIGN
Use the delegate.	WITHOUT_CLASSIFICATION	0.9998523300799953	WITHOUT_CLASSIFICATION	1.4766992000462114E-4	DESIGN
Get the names of the columns used to link between the collection owner and the collection elements.	WITHOUT_CLASSIFICATION	0.9866901140709764	WITHOUT_CLASSIFICATION	0.013309885929023515	DESIGN
The path AST should be a DotNode, and it should have been evaluated already.	WITHOUT_CLASSIFICATION	0.9996445907448588	WITHOUT_CLASSIFICATION	3.5540925514125393E-4	DESIGN
Tell the dot node about the join type.	WITHOUT_CLASSIFICATION	0.9995974658657633	WITHOUT_CLASSIFICATION	4.025341342367624E-4	DESIGN
Re-arrange the tree so that the collection function is the root and the lhs is the path.	WITHOUT_CLASSIFICATION	0.9997965638932554	WITHOUT_CLASSIFICATION	2.0343610674452694E-4	DESIGN
Don't forget to resolve the argument! Resolve the collection function now.	WITHOUT_CLASSIFICATION	0.9990862842520399	WITHOUT_CLASSIFICATION	9.137157479600381E-4	DESIGN
Resolve everything up to this dot, but don't resolve the placeholders yet.	WITHOUT_CLASSIFICATION	0.9955667529553786	WITHOUT_CLASSIFICATION	0.004433247044621373	DESIGN
Should mean that no such property was found	WITHOUT_CLASSIFICATION	0.9994852013735617	WITHOUT_CLASSIFICATION	5.147986264383626E-4	DESIGN
Was there an explicit select expression?	WITHOUT_CLASSIFICATION	0.9998339740981571	WITHOUT_CLASSIFICATION	1.660259018429965E-4	DESIGN
Attach any mapping-defined "ORDER BY" fragments	WITHOUT_CLASSIFICATION	0.9993335117605996	WITHOUT_CLASSIFICATION	6.664882394003996E-4	DESIGN
Use the explicitly declared select expression; determine the return types indicated by each select token	WITHOUT_CLASSIFICATION	0.9996125098993475	WITHOUT_CLASSIFICATION	3.874901006525413E-4	DESIGN
After that, process the JOINs. Invoke a delegate to do the work, as this is farily complex.	WITHOUT_CLASSIFICATION	0.9996577181494093	WITHOUT_CLASSIFICATION	3.4228185059071776E-4	DESIGN
Make #@%$^#^&# sure no alias is applied to the table name	WITHOUT_CLASSIFICATION	0.9999181236644861	WITHOUT_CLASSIFICATION	8.18763355138901E-5	DESIGN
We need to generate ids as part of this bulk insert. Note that this is only supported for sequence-style generators and post-insert-style generators; basically, only in-db generators	WITHOUT_CLASSIFICATION	0.9999634967304012	WITHOUT_CLASSIFICATION	3.650326959884637E-5	DESIGN
Use the delegate.	WITHOUT_CLASSIFICATION	0.9998523300799953	WITHOUT_CLASSIFICATION	1.4766992000462114E-4	DESIGN
We need to seed the version value as part of this bulk insert	WITHOUT_CLASSIFICATION	0.9996559967870802	WITHOUT_CLASSIFICATION	3.4400321291981216E-4	DESIGN
we need to wrtap the param in a cast()	WITHOUT_CLASSIFICATION	0.9862006138270928	WITHOUT_CLASSIFICATION	0.013799386172907236	DESIGN
This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9928012059786888	WITHOUT_CLASSIFICATION	0.00719879402131109	DESIGN
Generate implicit joins, only if necessary.	WITHOUT_CLASSIFICATION	0.9997665561782458	WITHOUT_CLASSIFICATION	2.3344382175421622E-4	DESIGN
Notify the FROM element that it is being referenced by the select.	WITHOUT_CLASSIFICATION	0.9999045036335176	WITHOUT_CLASSIFICATION	9.549636648245506E-5	DESIGN
Turn off includeSubclasses on all FromElements.	WITHOUT_CLASSIFICATION	0.9998089419190417	WITHOUT_CLASSIFICATION	1.9105808095825724E-4	DESIGN
create the node initially with the param name so that it shows appropriately in the "original text" attribute	WITHOUT_CLASSIFICATION	0.9994866406592635	WITHOUT_CLASSIFICATION	5.133593407364469E-4	DESIGN
Use the delegate, resolve identifiers as FROM element aliases.	WITHOUT_CLASSIFICATION	0.999285880071596	WITHOUT_CLASSIFICATION	7.141199284039398E-4	DESIGN
select clauses for insert statements should alwasy be treated as shallow	WITHOUT_CLASSIFICATION	0.9940617983623327	WITHOUT_CLASSIFICATION	0.005938201637667298	DESIGN
no need to even collect this information if the persister is considered multi-table	WITHOUT_CLASSIFICATION	0.9853759269755237	WITHOUT_CLASSIFICATION	0.014624073024476311	DESIGN
Make sure that the persister is versioned	WITHOUT_CLASSIFICATION	0.9991000781743996	WITHOUT_CLASSIFICATION	8.99921825600447E-4	DESIGN
handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9981275209138212	WITHOUT_CLASSIFICATION	0.001872479086178852	DESIGN
Use the delegate.	WITHOUT_CLASSIFICATION	0.9998523300799953	WITHOUT_CLASSIFICATION	1.4766992000462114E-4	DESIGN
--Commented out by Inspection (12/11/04 10:56 AM): int getWarningCount();	WITHOUT_CLASSIFICATION	0.9998081439063226	WITHOUT_CLASSIFICATION	1.9185609367751823E-4	DESIGN
Alias references and identifiers use the same node class.	WITHOUT_CLASSIFICATION	0.9986647620300196	WITHOUT_CLASSIFICATION	0.0013352379699803926	DESIGN
switch	WITHOUT_CLASSIFICATION	0.999641486615255	WITHOUT_CLASSIFICATION	3.585133847449937E-4	DESIGN
make a new one	WITHOUT_CLASSIFICATION	0.9991923886859757	WITHOUT_CLASSIFICATION	8.076113140242658E-4	DESIGN
just do the regular thing if you can't find the ctor Your AST must have default ctor to use this.	WITHOUT_CLASSIFICATION	0.9983575024316858	WITHOUT_CLASSIFICATION	0.001642497568314262	DESIGN
Initialize SQL nodes here.	WITHOUT_CLASSIFICATION	0.9995897213397477	WITHOUT_CLASSIFICATION	4.102786602523861E-4	DESIGN
semantic action processing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992092423201642	WITHOUT_CLASSIFICATION	7.907576798359507E-4	DESIGN
if template is null we just write the function out as it appears in the hql statement	WITHOUT_CLASSIFICATION	0.9999255619133149	WITHOUT_CLASSIFICATION	7.443808668498598E-5	DESIGN
this function has a template -> redirect output and catch the arguments	WITHOUT_CLASSIFICATION	0.999936203578096	WITHOUT_CLASSIFICATION	6.37964219040409E-5	DESIGN
--- Inner classes (moved here from sql-gen.g) ---	WITHOUT_CLASSIFICATION	0.9987760529735964	WITHOUT_CLASSIFICATION	0.0012239470264036442	DESIGN
check two "adjecent" nodes at the top of the from-clause tree	WITHOUT_CLASSIFICATION	0.9998711151407873	WITHOUT_CLASSIFICATION	1.2888485921265286E-4	DESIGN
/	WITHOUT_CLASSIFICATION	0.9995842610591597	WITHOUT_CLASSIFICATION	4.157389408404177E-4	DESIGN
these are just two unrelated table references	WITHOUT_CLASSIFICATION	0.9997566608819561	WITHOUT_CLASSIFICATION	2.4333911804385426E-4	DESIGN
again, both should be FromElements	WITHOUT_CLASSIFICATION	0.9891917560289105	WITHOUT_CLASSIFICATION	0.010808243971089359	DESIGN
NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9993770936125423	WITHOUT_CLASSIFICATION	6.229063874575916E-4	DESIGN
right represents a joins originating from left; or both right and left reprersent joins originating from the same FromElement	WITHOUT_CLASSIFICATION	0.9981849440083744	WITHOUT_CLASSIFICATION	0.0018150559916255732	DESIGN
check a set of parent/child nodes in the from-clause tree to determine if a comma is required between them	WITHOUT_CLASSIFICATION	0.9997851369150795	WITHOUT_CLASSIFICATION	2.1486308492038676E-4	DESIGN
right represents a joins originating from left...	WITHOUT_CLASSIFICATION	0.9982961274049483	WITHOUT_CLASSIFICATION	0.0017038725950516405	DESIGN
all clear	WITHOUT_CLASSIFICATION	0.9993925796980957	WITHOUT_CLASSIFICATION	6.074203019041899E-4	DESIGN
Ignore the token class name parameter, and use a specific token class.	WITHOUT_CLASSIFICATION	0.9992473086544563	WITHOUT_CLASSIFICATION	7.526913455436319E-4	DESIGN
overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9992035973989248	WITHOUT_CLASSIFICATION	7.964026010752247E-4	DESIGN
overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9992035973989248	WITHOUT_CLASSIFICATION	7.964026010752247E-4	DESIGN
remember that ordinal parameters numbers are 1-based!!!	WITHOUT_CLASSIFICATION	0.9997726238135669	WITHOUT_CLASSIFICATION	2.2737618643313426E-4	DESIGN
don't care about other param types here, just those explicitly user-defined...	WITHOUT_CLASSIFICATION	0.9966080917383632	WITHOUT_CLASSIFICATION	0.003391908261636798	DESIGN
If the query is already compiled, skip the compilation.	WITHOUT_CLASSIFICATION	0.999762378834932	WITHOUT_CLASSIFICATION	2.376211650678817E-4	DESIGN
Remember the parameters for the compilation.	WITHOUT_CLASSIFICATION	0.9954127805040434	WITHOUT_CLASSIFICATION	0.0045872194959565935	DESIGN
PHASE 1 : Parse the HQL into an AST.	WITHOUT_CLASSIFICATION	0.9993281611192187	WITHOUT_CLASSIFICATION	6.718388807812087E-4	DESIGN
PHASE 2 : Analyze the HQL AST, and produce an SQL AST.	WITHOUT_CLASSIFICATION	0.9999686499967301	WITHOUT_CLASSIFICATION	3.135000326999794E-5	DESIGN
PHASE 3 : Generate the SQL.	WITHOUT_CLASSIFICATION	0.9987564649601526	WITHOUT_CLASSIFICATION	0.0012435350398473965	DESIGN
we do not actually propogate ANTLRExceptions as a cause, so log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9963542317642113	WITHOUT_CLASSIFICATION	0.003645768235788579	DESIGN
we do not actually propogate ANTLRExceptions as a cause, so log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9963542317642113	WITHOUT_CLASSIFICATION	0.003645768235788579	DESIGN
only needed during compilation phase...	WITHOUT_CLASSIFICATION	0.9998818779192831	WITHOUT_CLASSIFICATION	1.1812208071702355E-4	DESIGN
Transform the tree.	WITHOUT_CLASSIFICATION	0.9998674534317272	WITHOUT_CLASSIFICATION	1.325465682728625E-4	DESIGN
Parse the query string into an HQL AST.	WITHOUT_CLASSIFICATION	0.9996651963249095	WITHOUT_CLASSIFICATION	3.34803675090502E-4	DESIGN
Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9994018399549351	WITHOUT_CLASSIFICATION	5.981600450648132E-4	DESIGN
Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9994018399549351	WITHOUT_CLASSIFICATION	5.981600450648132E-4	DESIGN
Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9994018399549351	WITHOUT_CLASSIFICATION	5.981600450648132E-4	DESIGN
NOTE : ( max - 1 ) because first is zero-based while max is not...	WITHOUT_CLASSIFICATION	0.9999610954484818	WITHOUT_CLASSIFICATION	3.890455151820427E-5	DESIGN
-- Package local methods for the QueryLoader delegate --	WITHOUT_CLASSIFICATION	0.9992150556677158	WITHOUT_CLASSIFICATION	7.849443322840499E-4	DESIGN
If there are no collection fetches, then no further checks are needed	WITHOUT_CLASSIFICATION	0.9999088754787909	WITHOUT_CLASSIFICATION	9.112452120901898E-5	DESIGN
A shallow query is ok (although technically there should be no fetching here...)	WITHOUT_CLASSIFICATION	0.999250913526428	WITHOUT_CLASSIFICATION	7.490864735719526E-4	DESIGN
should be the first, but just to be safe...	WITHOUT_CLASSIFICATION	0.9974293359217888	WITHOUT_CLASSIFICATION	0.0025706640782112173	DESIGN
Use the delegate.	WITHOUT_CLASSIFICATION	0.9998523300799953	WITHOUT_CLASSIFICATION	1.4766992000462114E-4	DESIGN
Use the delegate.	WITHOUT_CLASSIFICATION	0.9998523300799953	WITHOUT_CLASSIFICATION	1.4766992000462114E-4	DESIGN
Impl Note: allows multiple collection fetches as long as the entire fecthed graph still "points back" to a single root entity for return	WITHOUT_CLASSIFICATION	0.9917819452437036	WITHOUT_CLASSIFICATION	0.008218054756296476	DESIGN
Otherwise, we have a non-scalar select with defined collection fetch(es). Make sure that there is only a single root entity in the return (no tuples)	WITHOUT_CLASSIFICATION	0.9997956226210745	WITHOUT_CLASSIFICATION	2.043773789256062E-4	DESIGN
This is not strictly true. We actually just need to make sure that it is ordered by root-entity PK and that that order-by comes before any non-root-entity ordering...	WITHOUT_CLASSIFICATION	0.7609350752267925	WITHOUT_CLASSIFICATION	0.23906492477320754	DESIGN
paramTranslations = new ParameterTranslationsImpl( collectedParameterSpecifications );	WITHOUT_CLASSIFICATION	0.9997497171609375	WITHOUT_CLASSIFICATION	2.502828390624788E-4	DESIGN
we are already processing a dot-structure	WITHOUT_CLASSIFICATION	0.9941953081558996	WITHOUT_CLASSIFICATION	0.0058046918441003684	DESIGN
igndore it...	WITHOUT_CLASSIFICATION	0.9993648325846813	WITHOUT_CLASSIFICATION	6.351674153187412E-4	DESIGN
we are now at a new tree level	WITHOUT_CLASSIFICATION	0.9965288217008622	WITHOUT_CLASSIFICATION	0.003471178299137891	DESIGN
[jsd] The fix for HHH-558...	WITHOUT_CLASSIFICATION	0.9877696931895305	WITHOUT_CLASSIFICATION	0.012230306810469516	DESIGN
If the token can tell us if it could be an identifier...	WITHOUT_CLASSIFICATION	0.9998190101995915	WITHOUT_CLASSIFICATION	1.8098980040851973E-4	DESIGN
... and the expected token type was an identifier, then:	WITHOUT_CLASSIFICATION	0.9990331369717501	WITHOUT_CLASSIFICATION	9.668630282500465E-4	DESIGN
Use the token as an identifier.	WITHOUT_CLASSIFICATION	0.99991408216789	WITHOUT_CLASSIFICATION	8.591783210998578E-5	DESIGN
Add the token to the AST.	WITHOUT_CLASSIFICATION	0.999647254547147	WITHOUT_CLASSIFICATION	3.527454528529837E-4	DESIGN
(NOT (EQ a b) ) => (NE a b)	WITHOUT_CLASSIFICATION	0.9994269291421992	WITHOUT_CLASSIFICATION	5.730708578008297E-4	DESIGN
(NOT (NE a b) ) => (EQ a b)	WITHOUT_CLASSIFICATION	0.9994269291421992	WITHOUT_CLASSIFICATION	5.730708578008297E-4	DESIGN
(NOT (LT a b) ) => (GE a b)	WITHOUT_CLASSIFICATION	0.9994269291421992	WITHOUT_CLASSIFICATION	5.730708578008297E-4	DESIGN
(NOT (GE a b) ) => (LT a b)	WITHOUT_CLASSIFICATION	0.9994269291421992	WITHOUT_CLASSIFICATION	5.730708578008297E-4	DESIGN
(NOT (LE a b) ) => (GT a b)	WITHOUT_CLASSIFICATION	0.9994269291421992	WITHOUT_CLASSIFICATION	5.730708578008297E-4	DESIGN
(NOT (LIKE a b) ) => (NOT_LIKE a b)	WITHOUT_CLASSIFICATION	0.9992716264776355	WITHOUT_CLASSIFICATION	7.283735223644387E-4	DESIGN
(NOT (NOT_LIKE a b) ) => (LIKE a b)	WITHOUT_CLASSIFICATION	0.9992716264776355	WITHOUT_CLASSIFICATION	7.283735223644387E-4	DESIGN
(NOT (IS_NOT_NULL a b) ) => (IS_NULL a b)	WITHOUT_CLASSIFICATION	0.9992716264776355	WITHOUT_CLASSIFICATION	7.283735223644387E-4	DESIGN
(NOT (BETWEEN a b) ) => (NOT_BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9992716264776355	WITHOUT_CLASSIFICATION	7.283735223644387E-4	DESIGN
Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9984950546517741	WITHOUT_CLASSIFICATION	0.0015049453482258994	DESIGN
overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9992035973989248	WITHOUT_CLASSIFICATION	7.964026010752247E-4	DESIGN
if if Otherwise, handle the error normally.	WITHOUT_CLASSIFICATION	0.9993960011535801	WITHOUT_CLASSIFICATION	6.039988464199074E-4	DESIGN
(NOT (NOT_BETWEEN a b) ) => (BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9992716264776355	WITHOUT_CLASSIFICATION	7.283735223644387E-4	DESIGN
This can never happen because this rule will always eliminate the child NOT.case NOT:return x.getFirstChild(); (NOT (NOT x) ) => (x)	WITHOUT_CLASSIFICATION	0.9999375114264172	WITHOUT_CLASSIFICATION	6.248857358284153E-5	DESIGN
Just add a 'not' parent.	WITHOUT_CLASSIFICATION	0.9992490795171155	WITHOUT_CLASSIFICATION	7.50920482884573E-4	DESIGN
(EQ NULL b) => (IS_NULL b)	WITHOUT_CLASSIFICATION	0.9998395336370072	WITHOUT_CLASSIFICATION	1.604663629927622E-4	DESIGN
(EQ a NULL) => (IS_NULL a)	WITHOUT_CLASSIFICATION	0.9996575327925709	WITHOUT_CLASSIFICATION	3.424672074291887E-4	DESIGN
NOTE: Because we're using ASTUtil.createParent(), the tree must be created from the bottom up. IS EMPTY x => (EXISTS (QUERY (SELECT_FROM (FROM x) ) ) )	WITHOUT_CLASSIFICATION	0.99899733869833	WITHOUT_CLASSIFICATION	0.001002661301670095	DESIGN
Add NOT if it's negated.	WITHOUT_CLASSIFICATION	0.9985438446683986	WITHOUT_CLASSIFICATION	0.0014561553316014076	DESIGN
Create nodes that track line and column number.	WITHOUT_CLASSIFICATION	0.9999903361384048	WITHOUT_CLASSIFICATION	9.663861595113667E-6	DESIGN
Case 1: Multi token keywords GROUP BY and ORDER BY The next token ( LT(2) ) should be 'by'... otherwise, this is just an ident.	WITHOUT_CLASSIFICATION	0.9978859354215169	WITHOUT_CLASSIFICATION	0.002114064578483032	DESIGN
Case 2: The current token is after FROM and before '.'.	WITHOUT_CLASSIFICATION	0.999960907279683	WITHOUT_CLASSIFICATION	3.909272031697323E-5	DESIGN
This handles HHH-354, where there is a strange property name in a where clause. If the lookahead contains a DOT then something that isn't an IDENT...	WITHOUT_CLASSIFICATION	0.9999963823200753	WITHOUT_CLASSIFICATION	3.617679924635203E-6	DESIGN
See if the second lookahed token can be an identifier.	WITHOUT_CLASSIFICATION	0.9998459145042818	WITHOUT_CLASSIFICATION	1.540854957180892E-4	DESIGN
Set it!	WITHOUT_CLASSIFICATION	0.9995129874911823	WITHOUT_CLASSIFICATION	4.870125088176081E-4	DESIGN
ignore	WITHOUT_CLASSIFICATION	0.9984534187512447	WITHOUT_CLASSIFICATION	0.0015465812487552983	DESIGN
strip the " where "	WITHOUT_CLASSIFICATION	0.9999457122764628	WITHOUT_CLASSIFICATION	5.428772353713286E-5	DESIGN
Don't really know all the codes required to adequately decipher returned jdbc exceptions here. simply allow the failure to be eaten and the subsequent insert-selects/deletes should fail	WITHOUT_CLASSIFICATION	0.9870643678703406	WITHOUT_CLASSIFICATION	0.012935632129659355	DESIGN
at the very least cleanup the data :)	WITHOUT_CLASSIFICATION	0.982719284602567	WITHOUT_CLASSIFICATION	0.01728071539743307	DESIGN
First, save off the pertinent ids, as the return value	WITHOUT_CLASSIFICATION	0.999958791687011	WITHOUT_CLASSIFICATION	4.120831298894289E-5	DESIGN
jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9994529540317281	WITHOUT_CLASSIFICATION	5.470459682719261E-4	DESIGN
jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9994529540317281	WITHOUT_CLASSIFICATION	5.470459682719261E-4	DESIGN
Start performing the updates	WITHOUT_CLASSIFICATION	0.9998009284672411	WITHOUT_CLASSIFICATION	1.990715327589567E-4	DESIGN
First, save off the pertinent ids, saving the number of pertinent ids for return	WITHOUT_CLASSIFICATION	0.9999660933530627	WITHOUT_CLASSIFICATION	3.3906646937254734E-5	DESIGN
Start performing the deletes	WITHOUT_CLASSIFICATION	0.9996326776421582	WITHOUT_CLASSIFICATION	3.6732235784180177E-4	DESIGN
otherwise, everything ok.	WITHOUT_CLASSIFICATION	0.9993939870957008	WITHOUT_CLASSIFICATION	6.06012904299133E-4	DESIGN
visit width-first, then depth	WITHOUT_CLASSIFICATION	0.9996111892293782	WITHOUT_CLASSIFICATION	3.8881077062185004E-4	DESIGN
if the types report logical equivalence, return true...	WITHOUT_CLASSIFICATION	0.997291848314902	WITHOUT_CLASSIFICATION	0.0027081516850979855	DESIGN
otherwise, perform a "deep equivalence" check...	WITHOUT_CLASSIFICATION	0.9968513881761494	WITHOUT_CLASSIFICATION	0.003148611823850655	DESIGN
If there is no WHERE node, make one.	WITHOUT_CLASSIFICATION	0.9998498454275974	WITHOUT_CLASSIFICATION	1.5015457240258965E-4	DESIGN
inject the WHERE after the parent	WITHOUT_CLASSIFICATION	0.9991986985912469	WITHOUT_CLASSIFICATION	8.013014087532143E-4	DESIGN
Never include subclasses for implied from elements.	WITHOUT_CLASSIFICATION	0.9997594054578272	WITHOUT_CLASSIFICATION	2.4059454217281373E-4	DESIGN
Moved here from SelectClause [jsd]	WITHOUT_CLASSIFICATION	0.9965959225995202	WITHOUT_CLASSIFICATION	0.003404077400479759	DESIGN
/	WITHOUT_CLASSIFICATION	0.9995842610591597	WITHOUT_CLASSIFICATION	4.157389408404177E-4	DESIGN
Use the table fromElement and the property name to get the array of column names.	WITHOUT_CLASSIFICATION	0.9998272713118858	WITHOUT_CLASSIFICATION	1.7272868811424167E-4	DESIGN
Set the attributes of the property reference expression.	WITHOUT_CLASSIFICATION	0.9998342263403405	WITHOUT_CLASSIFICATION	1.6577365965958192E-4	DESIGN
If the uresolved property path isn't set yet, just use the property name.	WITHOUT_CLASSIFICATION	0.9999266923240037	WITHOUT_CLASSIFICATION	7.330767599627696E-5	DESIGN
The 'from element' that the property is in.	WITHOUT_CLASSIFICATION	0.9999783604710165	WITHOUT_CLASSIFICATION	2.1639528983468818E-5	DESIGN
Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9998004428357707	WITHOUT_CLASSIFICATION	1.995571642294092E-4	DESIGN
Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9998004428357707	WITHOUT_CLASSIFICATION	1.995571642294092E-4	DESIGN
If this dot has already been resolved, stop now.	WITHOUT_CLASSIFICATION	0.9998323592682011	WITHOUT_CLASSIFICATION	1.6764073179882755E-4	DESIGN
If there is no data type for this node, and we're at the end of the path (top most dot node), then this might be a Java constant.	WITHOUT_CLASSIFICATION	0.9697760745248477	WITHOUT_CLASSIFICATION	0.03022392547515227	DESIGN
The property is a collection...	WITHOUT_CLASSIFICATION	0.9999319258948991	WITHOUT_CLASSIFICATION	6.807410510096363E-5	DESIGN
The property is a component...	WITHOUT_CLASSIFICATION	0.9999464480942042	WITHOUT_CLASSIFICATION	5.3551905795810004E-5	DESIGN
The property is another class..	WITHOUT_CLASSIFICATION	0.9999701568710327	WITHOUT_CLASSIFICATION	2.984312896721337E-5	DESIGN
Otherwise, this is a primitive type.	WITHOUT_CLASSIFICATION	0.9986566699526321	WITHOUT_CLASSIFICATION	0.0013433300473678113	DESIGN
foo.bars.size (also handles deprecated stuff like foo.bars.maxelement for backwardness)	WITHOUT_CLASSIFICATION	0.9987998072603316	WITHOUT_CLASSIFICATION	0.0012001927396683499	DESIGN
This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9986962119000318	WITHOUT_CLASSIFICATION	0.0013037880999682851	DESIGN
Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9994204446736452	WITHOUT_CLASSIFICATION	5.795553263546978E-4	DESIGN
in non-select queries, the only time we should need to join is if we are in a subquery from clause	WITHOUT_CLASSIFICATION	0.9959587834389125	WITHOUT_CLASSIFICATION	0.00404121656108747	DESIGN
this is the regression style determination which matches the logic of the classic translator	WITHOUT_CLASSIFICATION	0.9998948978295894	WITHOUT_CLASSIFICATION	1.0510217041058323E-4	DESIGN
This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9986962119000318	WITHOUT_CLASSIFICATION	0.0013037880999682851	DESIGN
even though we might find a pre-existing element by join path, we may not be able to reuse it...	WITHOUT_CLASSIFICATION	0.959084637097878	WITHOUT_CLASSIFICATION	0.0409153629021221	DESIGN
NOTE : addDuplicateAlias() already performs nullness checks on the alias.	WITHOUT_CLASSIFICATION	0.999004230349983	WITHOUT_CLASSIFICATION	9.957696500170188E-4	DESIGN
if the from-clauses are the same, we can be a little more aggressive in terms of what we reuse	WITHOUT_CLASSIFICATION	0.9825118608672626	WITHOUT_CLASSIFICATION	0.017488139132737397	DESIGN
again, null != null here	WITHOUT_CLASSIFICATION	0.9987312200565607	WITHOUT_CLASSIFICATION	0.0012687799434392788	DESIGN
If this is an implied join in a from element, then use the impled join type which is part of the tree parser's state (set by the gramamar actions).	WITHOUT_CLASSIFICATION	0.9986950650904834	WITHOUT_CLASSIFICATION	0.0013049349095165812	DESIGN
otherwise (subquery case) dont reuse the fromElement if we are processing the from-clause of the subquery	WITHOUT_CLASSIFICATION	0.9997870269487934	WITHOUT_CLASSIFICATION	2.1297305120672992E-4	DESIGN
we know only the lhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9998679990446558	WITHOUT_CLASSIFICATION	1.320009553441265E-4	DESIGN
the referenced node text is the special 'id'	WITHOUT_CLASSIFICATION	0.9999597942977957	WITHOUT_CLASSIFICATION	4.0205702204280575E-5	DESIGN
only the identifier property field name can be a reference to the associated entity's PK...	WITHOUT_CLASSIFICATION	0.9995104239648354	WITHOUT_CLASSIFICATION	4.89576035164617E-4	DESIGN
special shortcut for id properties, skip the join! this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.999507288948448	WITHOUT_CLASSIFICATION	4.927110515519847E-4	DESIGN
Append the new property name onto the unresolved path.	WITHOUT_CLASSIFICATION	0.999859511494854	WITHOUT_CLASSIFICATION	1.4048850514593547E-4	DESIGN
If the lhs is a collection, use CollectionPropertyMapping	WITHOUT_CLASSIFICATION	0.9997668132677032	WITHOUT_CLASSIFICATION	2.3318673229682428E-4	DESIGN
Tell the destination fromElement to 'includeSubclasses'.	WITHOUT_CLASSIFICATION	0.9993174698414652	WITHOUT_CLASSIFICATION	6.825301585347833E-4	DESIGN
Use theta style (for regression) Move the node up, after the origin node.	WITHOUT_CLASSIFICATION	0.9739868465549986	WITHOUT_CLASSIFICATION	0.026013153445001373	DESIGN
Don't resolve the node again.	WITHOUT_CLASSIFICATION	0.9993670398297754	WITHOUT_CLASSIFICATION	6.329601702246112E-4	DESIGN
for expected parameter type injection, we expect that the lhs represents some form of property ref and that the children of the in-list represent one-or-more params.	WITHOUT_CLASSIFICATION	0.9976039569194968	WITHOUT_CLASSIFICATION	0.002396043080503167	DESIGN
we need to strip off the embedded parens so that sql-gen does not double these up	WITHOUT_CLASSIFICATION	0.9996127966415977	WITHOUT_CLASSIFICATION	3.872033584023046E-4	DESIGN
we have something like : "? [op] rhs"	WITHOUT_CLASSIFICATION	0.999477547514256	WITHOUT_CLASSIFICATION	5.224524857439497E-4	DESIGN
we have something like : "lhs [op] ?"	WITHOUT_CLASSIFICATION	0.999477547514256	WITHOUT_CLASSIFICATION	5.224524857439497E-4	DESIGN
we know only the rhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9998679990446558	WITHOUT_CLASSIFICATION	1.320009553441265E-4	DESIGN
handle the (assumed) valid cases: #1 - the only valid datetime addition synatx is one or the other is a datetime (but not both)	WITHOUT_CLASSIFICATION	0.9947082257439732	WITHOUT_CLASSIFICATION	0.005291774256026817	DESIGN
one or the other needs to be a datetime for us to get into this method in the first place...	WITHOUT_CLASSIFICATION	0.6189321719368464	WITHOUT_CLASSIFICATION	0.38106782806315376	DESIGN
#3 - note that this is also true of "datetime - :param"...	WITHOUT_CLASSIFICATION	0.992252260500806	WITHOUT_CLASSIFICATION	0.007747739499193989	DESIGN
#2	WITHOUT_CLASSIFICATION	0.999144820050922	WITHOUT_CLASSIFICATION	8.551799490780781E-4	DESIGN
Generate the inner join -- The elements need to be joined to the collection they are in.	WITHOUT_CLASSIFICATION	0.9981128980488059	WITHOUT_CLASSIFICATION	0.001887101951194007	DESIGN
nothing to do	WITHOUT_CLASSIFICATION	0.9997828052058866	WITHOUT_CLASSIFICATION	2.1719479411333028E-4	DESIGN
The 'from element' that represents the elements of the collection.	WITHOUT_CLASSIFICATION	0.9999855533397443	WITHOUT_CLASSIFICATION	1.4446660255726732E-5	DESIGN
Add the condition to the join sequence that qualifies the indexed element.	WITHOUT_CLASSIFICATION	0.9996576346329825	WITHOUT_CLASSIFICATION	3.423653670174696E-4	DESIGN
Sometimes use the element table alias, sometimes use the... umm... collection table alias (many to many)	WITHOUT_CLASSIFICATION	0.9959846982479705	WITHOUT_CLASSIFICATION	0.004015301752029398	DESIGN
Now, set the text for this node. It should be the element columns.	WITHOUT_CLASSIFICATION	0.9837432156805945	WITHOUT_CLASSIFICATION	0.01625678431940548	DESIGN
Get the function return value type, based on the type of the first argument.	WITHOUT_CLASSIFICATION	0.9999441889264705	WITHOUT_CLASSIFICATION	5.581107352947524E-5	DESIGN
This will call initialize(tok)!	WITHOUT_CLASSIFICATION	0.9988609127346723	WITHOUT_CLASSIFICATION	0.001139087265327753	DESIGN
mutation depends on the types of nodes invloved...	WITHOUT_CLASSIFICATION	0.9998819659930236	WITHOUT_CLASSIFICATION	1.1803400697640364E-4	DESIGN
"pass along" our initial embedded parameter node(s) to the first generated sql fragment so that it can be handled later for parameter binding...	WITHOUT_CLASSIFICATION	0.9474939615233756	WITHOUT_CLASSIFICATION	0.052506038476624356	DESIGN
logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999269131688567	WITHOUT_CLASSIFICATION	7.308683114328427E-5	DESIGN
Generated select expressions are already resolved, nothing to do.	WITHOUT_CLASSIFICATION	0.9983932858519358	WITHOUT_CLASSIFICATION	0.0016067141480642611	DESIGN
The path may be a reference to an alias defined in the parent query.	WITHOUT_CLASSIFICATION	0.9999701022654944	WITHOUT_CLASSIFICATION	2.9897734505570734E-5	DESIGN
The HQL class alias refers to the class name.	WITHOUT_CLASSIFICATION	0.999859609869417	WITHOUT_CLASSIFICATION	1.4039013058301307E-4	DESIGN
Associate the table alias with the element.	WITHOUT_CLASSIFICATION	0.999592485386751	WITHOUT_CLASSIFICATION	4.075146132488994E-4	DESIGN
try the parent FromClause...	WITHOUT_CLASSIFICATION	0.9999221313040871	WITHOUT_CLASSIFICATION	7.786869591282602E-5	DESIGN
Add the new node to the map so that we don't create it twice.	WITHOUT_CLASSIFICATION	0.999826687874781	WITHOUT_CLASSIFICATION	1.7331212521898027E-4	DESIGN
Make sure that all from elements registered with this FROM clause are actually in the AST.	WITHOUT_CLASSIFICATION	0.9965034300525846	WITHOUT_CLASSIFICATION	0.0034965699474155164	DESIGN
Invoke setScalarColumnText on each constructor argument.	WITHOUT_CLASSIFICATION	0.9997759509295067	WITHOUT_CLASSIFICATION	2.2404907049336018E-4	DESIGN
Collect the select expressions, skip the first child because it is the class name.	WITHOUT_CLASSIFICATION	0.9999606397859446	WITHOUT_CLASSIFICATION	3.9360214055373784E-5	DESIGN
return an empty Type array	WITHOUT_CLASSIFICATION	0.9996861791584256	WITHOUT_CLASSIFICATION	3.138208415743415E-4	DESIGN
Constructors are always considered scalar results.	WITHOUT_CLASSIFICATION	0.9975815392853485	WITHOUT_CLASSIFICATION	0.00241846071465155	DESIGN
this is the exception returned by ReflectHelper.getConstructor() if it cannot locate an appropriate constructor	WITHOUT_CLASSIFICATION	0.9997069867076884	WITHOUT_CLASSIFICATION	2.9301329231159226E-4	DESIGN
if there is no order by, make one	WITHOUT_CLASSIFICATION	0.9997132380577942	WITHOUT_CLASSIFICATION	2.8676194220570393E-4	DESIGN
Find the WHERE; if there is no WHERE, find the FROM...	WITHOUT_CLASSIFICATION	0.9998194868712459	WITHOUT_CLASSIFICATION	1.8051312875401923E-4	DESIGN
Now, inject the newly built ORDER BY into the tree	WITHOUT_CLASSIFICATION	0.9977745794792917	WITHOUT_CLASSIFICATION	0.0022254205207082865	DESIGN
ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994306095977239	WITHOUT_CLASSIFICATION	5.693904022761369E-4	DESIGN
logic operators by definition resolve to boolean.	WITHOUT_CLASSIFICATION	0.9999269131688567	WITHOUT_CLASSIFICATION	7.308683114328427E-5	DESIGN
Render the identifier select fragment using the table alias.	WITHOUT_CLASSIFICATION	0.9991521982101504	WITHOUT_CLASSIFICATION	8.478017898494505E-4	DESIGN
Class names in the FROM clause result in a JoinSequence (the old FromParser does this).	WITHOUT_CLASSIFICATION	0.9999343884670956	WITHOUT_CLASSIFICATION	6.56115329043539E-5	DESIGN
For many-to-many joins, use the tablename from the queryable collection for the default text.	WITHOUT_CLASSIFICATION	0.999058876696025	WITHOUT_CLASSIFICATION	9.411233039750917E-4	DESIGN
Otherwise, use the property mapping.	WITHOUT_CLASSIFICATION	0.9996928716956163	WITHOUT_CLASSIFICATION	3.07128304383735E-4	DESIGN
should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.997495454643592	WITHOUT_CLASSIFICATION	0.0025045453564079946	DESIGN
If the property is a special collection property name, return a CollectionPropertyMapping.	WITHOUT_CLASSIFICATION	0.9999211045910692	WITHOUT_CLASSIFICATION	7.889540893077269E-5	DESIGN
Collection of components.	WITHOUT_CLASSIFICATION	0.9997985701057535	WITHOUT_CLASSIFICATION	2.0142989424662416E-4	DESIGN
make sure the lhs is "assignable"...	WITHOUT_CLASSIFICATION	0.9988247345393252	WITHOUT_CLASSIFICATION	0.0011752654606747733	DESIGN
false indicates to not generate parens around the assignment	WITHOUT_CLASSIFICATION	0.9996449612263765	WITHOUT_CLASSIFICATION	3.550387736235121E-4	DESIGN
Register the FromElement with the FROM clause, now that we have the names and aliases.	WITHOUT_CLASSIFICATION	0.9995579118303032	WITHOUT_CLASSIFICATION	4.420881696967912E-4	DESIGN
currently allowed...	WITHOUT_CLASSIFICATION	0.998932976439095	WITHOUT_CLASSIFICATION	0.001067023560904998	DESIGN
HHH-276 : implied joins in a subselect where clause - The destination needs to be added to the destination's from clause. Not sure if this is will fix everything, but it works.	WITHOUT_CLASSIFICATION	0.5358253633419955	WITHOUT_CLASSIFICATION	0.46417463665800457	DESIGN
return classAlias == null ? className : classAlias;	WITHOUT_CLASSIFICATION	0.996388702406689	WITHOUT_CLASSIFICATION	0.003611297593311106	DESIGN
This is an explicit FROM element.	WITHOUT_CLASSIFICATION	0.9959846524679337	WITHOUT_CLASSIFICATION	0.004015347532066335	DESIGN
ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994306095977239	WITHOUT_CLASSIFICATION	5.693904022761369E-4	DESIGN
Fetch can't be used with scroll() or iterate().	WITHOUT_CLASSIFICATION	0.846455362363829	WITHOUT_CLASSIFICATION	0.15354463763617096	DESIGN
If it's not implied or it is implied and it's a many to many join where the target wasn't found.	WITHOUT_CLASSIFICATION	0.9999087188074558	WITHOUT_CLASSIFICATION	9.128119254415851E-5	DESIGN
Since this is an explicit FROM element, it can't be implied in the FROM clause.	WITHOUT_CLASSIFICATION	0.9986072333983512	WITHOUT_CLASSIFICATION	0.0013927666016487017	DESIGN
Do nothing, eplicit from elements are always in the projection list.	WITHOUT_CLASSIFICATION	0.9992852973637157	WITHOUT_CLASSIFICATION	7.147026362842433E-4	DESIGN
propertyName refers to something like collection.size...	WITHOUT_CLASSIFICATION	0.9995792765723759	WITHOUT_CLASSIFICATION	4.2072342762407023E-4	DESIGN
property name is a sub-path of a component...	WITHOUT_CLASSIFICATION	0.9997281484319586	WITHOUT_CLASSIFICATION	2.7185156804143717E-4	DESIGN
Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9994204446736452	WITHOUT_CLASSIFICATION	5.795553263546978E-4	DESIGN
nothing to do; even if the operand is a parameter, no way we could infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9448765924780491	WITHOUT_CLASSIFICATION	0.055123407521951016	DESIGN
logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999269131688567	WITHOUT_CLASSIFICATION	7.308683114328427E-5	DESIGN
DotNode uses null here...	WITHOUT_CLASSIFICATION	0.996907104207837	WITHOUT_CLASSIFICATION	0.003092895792162993	DESIGN
We represent a from-clause alias	WITHOUT_CLASSIFICATION	0.9991296575041753	WITHOUT_CLASSIFICATION	8.703424958247078E-4	DESIGN
we are the LHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.998888574817839	WITHOUT_CLASSIFICATION	0.0011114251821609902	DESIGN
we are the RHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9987098400926153	WITHOUT_CLASSIFICATION	0.001290159907384618	DESIGN
we represent a naked (simple) prop-ref	WITHOUT_CLASSIFICATION	0.9959468533224156	WITHOUT_CLASSIFICATION	0.004053146677584371	DESIGN
EARLY EXIT!!! return so the resolve call explicitly coming from DotNode can resolve this...	WITHOUT_CLASSIFICATION	0.9995418220976972	WITHOUT_CLASSIFICATION	4.581779023029226E-4	DESIGN
assume this ident's text does not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9924314099900069	WITHOUT_CLASSIFICATION	0.007568590009993081	DESIGN
just ignore it for now, it'll get resolved later...	WITHOUT_CLASSIFICATION	0.9974998196113491	WITHOUT_CLASSIFICATION	0.0025001803886508718	DESIGN
This is not actually a constant, but a reference to FROM element.	WITHOUT_CLASSIFICATION	0.8570402727096632	WITHOUT_CLASSIFICATION	0.1429597272903369	DESIGN
check to see if our "propPath" actually represents a property on the persister	WITHOUT_CLASSIFICATION	0.9997384710249506	WITHOUT_CLASSIFICATION	2.6152897504941655E-4	DESIGN
these pieces are needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9987648351738377	WITHOUT_CLASSIFICATION	0.001235164826162321	DESIGN
used to set the type of the parent dot node	WITHOUT_CLASSIFICATION	0.7531461047295758	WITHOUT_CLASSIFICATION	0.24685389527042417	DESIGN
assume we do not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.989646636473557	WITHOUT_CLASSIFICATION	0.010353363526442977	DESIGN
assume we do not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.989646636473557	WITHOUT_CLASSIFICATION	0.010353363526442977	DESIGN
naked property-refs cannot be used with an aliased from element	WITHOUT_CLASSIFICATION	0.8358778692333709	WITHOUT_CLASSIFICATION	0.16412213076662904	DESIGN
this piece is needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9938776392757084	WITHOUT_CLASSIFICATION	0.006122360724291555	DESIGN
do not over-write the column text, as that has already been "rendered" during resolve	WITHOUT_CLASSIFICATION	0.9947970859497729	WITHOUT_CLASSIFICATION	0.00520291405022714	DESIGN
for some reason the antlr.CommonAST initialization routines force this method to get called twice. The first time with an empty string	WITHOUT_CLASSIFICATION	0.9997421964062465	WITHOUT_CLASSIFICATION	2.578035937534923E-4	DESIGN
Look up class name using the first identifier in the path.	WITHOUT_CLASSIFICATION	0.9999425630763568	WITHOUT_CLASSIFICATION	5.7436923643248016E-5	DESIGN
Add to the query spaces.	WITHOUT_CLASSIFICATION	0.9994507407717453	WITHOUT_CLASSIFICATION	5.492592282546375E-4	DESIGN
If the from element isn't in the same clause, create a new from element.	WITHOUT_CLASSIFICATION	0.9978974683979545	WITHOUT_CLASSIFICATION	0.002102531602045555	DESIGN
This is the root level node. Generate an explicit from clause at the root.	WITHOUT_CLASSIFICATION	0.9969018810770107	WITHOUT_CLASSIFICATION	0.003098118922989207	DESIGN
Correlated subqueries create 'special' implied from nodes because correlated subselects can't use an ANSI-style join	WITHOUT_CLASSIFICATION	0.9999007929311978	WITHOUT_CLASSIFICATION	9.920706880226854E-5	DESIGN
super-duper-classic-parser-regression-testing-mojo-magic...	WITHOUT_CLASSIFICATION	0.999356419707268	WITHOUT_CLASSIFICATION	6.435802927320741E-4	DESIGN
A collection of entities...	WITHOUT_CLASSIFICATION	0.9990413195351231	WITHOUT_CLASSIFICATION	9.586804648769068E-4	DESIGN
A collection of components...	WITHOUT_CLASSIFICATION	0.9990413195351231	WITHOUT_CLASSIFICATION	9.586804648769068E-4	DESIGN
A collection of scalar elements...	WITHOUT_CLASSIFICATION	0.9987816437479626	WITHOUT_CLASSIFICATION	0.0012183562520373724	DESIGN
according to both the ANSI-SQL and EJB3 specs, trim can either take exactly one parameter or a variable number of parameters between 1 and 4. from the SQL spec: <trim function> ::= TRIM <left paren> <trim operands> <right paren> <trim operands> ::= [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> <trim specification> ::= LEADING | TRAILING | BOTH If only <trim specification> is omitted, BOTH is assumed; if <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999972250405497	WITHOUT_CLASSIFICATION	2.7749594503305637E-6	DESIGN
Don't include sub-classes for implied collection joins or subquery joins.	WITHOUT_CLASSIFICATION	0.9966787481491245	WITHOUT_CLASSIFICATION	0.003321251850875435	DESIGN
Treat explict from elements in sub-queries properly.	WITHOUT_CLASSIFICATION	0.9993577152136051	WITHOUT_CLASSIFICATION	6.42284786394999E-4	DESIGN
( implied && DotNode.useThetaStyleImplicitJoins ) ) {	WITHOUT_CLASSIFICATION	0.9983105923978501	WITHOUT_CLASSIFICATION	0.001689407602149939	DESIGN
the "root from-element" in correlated subqueries do need this piece	WITHOUT_CLASSIFICATION	0.9413860008721037	WITHOUT_CLASSIFICATION	0.05861399912789635	DESIGN
Create the FROM element for the target (the elements of the collection).	WITHOUT_CLASSIFICATION	0.9999155520179228	WITHOUT_CLASSIFICATION	8.444798207727028E-5	DESIGN
If the join is implied, then don't include sub-classes on the element.	WITHOUT_CLASSIFICATION	0.999791820322213	WITHOUT_CLASSIFICATION	2.0817967778684728E-4	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995123236311457	WITHOUT_CLASSIFICATION	4.8767636885424113E-4	DESIGN
The associated entity is implied, but it must be included in the FROM. The collection alias is the role.	WITHOUT_CLASSIFICATION	0.999569106737705	WITHOUT_CLASSIFICATION	4.308932622949957E-4	DESIGN
Tag this node as a JOIN. Don't include subclasses in the join. This is a clollection join.	WITHOUT_CLASSIFICATION	0.9946600130225303	WITHOUT_CLASSIFICATION	0.005339986977469744	DESIGN
Get the class name of the associated entity.	WITHOUT_CLASSIFICATION	0.9999334673435001	WITHOUT_CLASSIFICATION	6.653265649990113E-5	DESIGN
origin, path, implied, columns, classAlias,	WITHOUT_CLASSIFICATION	0.999503448253759	WITHOUT_CLASSIFICATION	4.965517462409421E-4	DESIGN
implied	WITHOUT_CLASSIFICATION	0.9991288176721137	WITHOUT_CLASSIFICATION	8.711823278862698E-4	DESIGN
For implied many-to-many, just add the end join.	WITHOUT_CLASSIFICATION	0.9997447101337846	WITHOUT_CLASSIFICATION	2.5528986621535033E-4	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995123236311457	WITHOUT_CLASSIFICATION	4.8767636885424113E-4	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995123236311457	WITHOUT_CLASSIFICATION	4.8767636885424113E-4	DESIGN
the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9998488992602471	WITHOUT_CLASSIFICATION	1.5110073975284474E-4	DESIGN
This causes the factory to instantiate the desired class.	WITHOUT_CLASSIFICATION	0.9929246846483621	WITHOUT_CLASSIFICATION	0.007075315351637805	DESIGN
private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9945922499892523	WITHOUT_CLASSIFICATION	0.005407750010747589	DESIGN
Frontbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9988795597966786	WITHOUT_CLASSIFICATION	0.0011204402033213943	DESIGN
The types represented in the SQL result set. @return The types represented in the SQL result set.	WITHOUT_CLASSIFICATION	0.9999725235391436	WITHOUT_CLASSIFICATION	2.747646085641245E-5	DESIGN
public Type[] getSqlResultTypes() {return sqlResultTypes;}	WITHOUT_CLASSIFICATION	0.9989422019556532	WITHOUT_CLASSIFICATION	0.0010577980443468075	DESIGN
First, collect all of the select expressions. NOTE: This must be done before invoking setScalarColumnText() because setScalarColumnText() changes the AST!!!	WITHOUT_CLASSIFICATION	0.9863825853629896	WITHOUT_CLASSIFICATION	0.013617414637010281	DESIGN
First allow the actual type to control the return value. (the actual underlying sqltype could actually be different)	WITHOUT_CLASSIFICATION	0.8793136392745736	WITHOUT_CLASSIFICATION	0.12068636072542632	DESIGN
sqlResultTypeList.addAll( constructorArgumentTypeList );	WITHOUT_CLASSIFICATION	0.999367392379193	WITHOUT_CLASSIFICATION	6.326076208069893E-4	DESIGN
If the data type is not an association type, it could not have been in the FROM clause.	WITHOUT_CLASSIFICATION	0.9951579815057577	WITHOUT_CLASSIFICATION	0.004842018494242211	DESIGN
sqlResultTypeList.add( type );	WITHOUT_CLASSIFICATION	0.9981702540647788	WITHOUT_CLASSIFICATION	0.0018297459352212516	DESIGN
Always add the type to the return type list.	WITHOUT_CLASSIFICATION	0.9969758587339926	WITHOUT_CLASSIFICATION	0.0030241412660073175	DESIGN
add the fetched entities	WITHOUT_CLASSIFICATION	0.999599664188801	WITHOUT_CLASSIFICATION	4.0033581119901414E-4	DESIGN
Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9998228240532743	WITHOUT_CLASSIFICATION	1.7717594672580754E-4	DESIGN
function support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996734911988496	WITHOUT_CLASSIFICATION	3.265088011504382E-4	DESIGN
If there are any scalars (non-entities) selected, render the select column aliases.	WITHOUT_CLASSIFICATION	0.999952308419356	WITHOUT_CLASSIFICATION	4.7691580643955004E-5	DESIGN
sqlResultTypeList,	WITHOUT_CLASSIFICATION	0.9998192731054069	WITHOUT_CLASSIFICATION	1.8072689459315214E-4	DESIGN
ArrayList sqlResultTypeList,	WITHOUT_CLASSIFICATION	0.9995538961290097	WITHOUT_CLASSIFICATION	4.4610387099029106E-4	DESIGN
sqlResultTypes = ( Type[] ) sqlResultTypeList.toArray( new Type[sqlResultTypeList.size()] );	WITHOUT_CLASSIFICATION	0.9996075551794905	WITHOUT_CLASSIFICATION	3.924448205095038E-4	DESIGN
lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9978754264713089	WITHOUT_CLASSIFICATION	0.002124573528691015	DESIGN
TODO:	WITHOUT_CLASSIFICATION	0.5811661798477947	DESIGN	0.41883382015220516	WITHOUT_CLASSIFICATION
Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9992104205980915	WITHOUT_CLASSIFICATION	7.895794019083497E-4	DESIGN
Generate an 2d array of column names, the first dimension is parallel with the return types array. The second dimension is the list of column names for each type.	WITHOUT_CLASSIFICATION	0.9999982007544546	WITHOUT_CLASSIFICATION	1.7992455455084036E-6	DESIGN
Generate the select expression.	WITHOUT_CLASSIFICATION	0.9987929575458403	WITHOUT_CLASSIFICATION	0.0012070424541597903	DESIGN
union subclass support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9965590213299439	WITHOUT_CLASSIFICATION	0.0034409786700560223	DESIGN
Skip 'DISTINCT' and 'ALL', so we return the first expression node.	WITHOUT_CLASSIFICATION	0.9999523800416668	WITHOUT_CLASSIFICATION	4.7619958333250923E-5	DESIGN
Create SQL_TOKEN nodes for the columns.	WITHOUT_CLASSIFICATION	0.9998196062572735	WITHOUT_CLASSIFICATION	1.803937427265146E-4	DESIGN
Generate the property select tokens.	WITHOUT_CLASSIFICATION	0.9997922579742009	WITHOUT_CLASSIFICATION	2.0774202579909126E-4	DESIGN
Get the function name node.	WITHOUT_CLASSIFICATION	0.9999782483496212	WITHOUT_CLASSIFICATION	2.1751650378832935E-5	DESIGN
Method expressions in a SELECT should always be considered scalar.	WITHOUT_CLASSIFICATION	0.7249063738065179	DESIGN	0.27509362619348227	WITHOUT_CLASSIFICATION
If this is 'elements' then create a new FROM element.	WITHOUT_CLASSIFICATION	0.9988864852084711	WITHOUT_CLASSIFICATION	0.0011135147915289332	DESIGN
Not elements(x)	WITHOUT_CLASSIFICATION	0.9953791267410651	WITHOUT_CLASSIFICATION	0.004620873258934834	DESIGN
Dialect function	WITHOUT_CLASSIFICATION	0.9999705745893083	WITHOUT_CLASSIFICATION	2.9425410691781984E-5	DESIGN
Collection 'property function'	WITHOUT_CLASSIFICATION	0.9995399083359808	WITHOUT_CLASSIFICATION	4.600916640192165E-4	DESIGN
If the constant is an IDENT, figure out what it means...	WITHOUT_CLASSIFICATION	0.9997741729935647	WITHOUT_CLASSIFICATION	2.2582700643512072E-4	DESIGN
IDENT is a class alias in the FROM.	WITHOUT_CLASSIFICATION	0.9991325511444392	WITHOUT_CLASSIFICATION	8.674488555608067E-4	DESIGN
Resolve to an identity column.	WITHOUT_CLASSIFICATION	0.9993066892328627	WITHOUT_CLASSIFICATION	6.933107671372202E-4	DESIGN
Otherwise, it's a literal.	WITHOUT_CLASSIFICATION	0.9980808726255687	WITHOUT_CLASSIFICATION	0.0019191273744312831	DESIGN
the name of an entity class	WITHOUT_CLASSIFICATION	0.9998493057058643	WITHOUT_CLASSIFICATION	1.5069429413574212E-4	DESIGN
the class discriminator value	WITHOUT_CLASSIFICATION	0.9997337847196922	WITHOUT_CLASSIFICATION	2.6621528030774103E-4	DESIGN
Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999274544623329	WITHOUT_CLASSIFICATION	7.254553766714913E-5	DESIGN
Add a space before the display text.	WITHOUT_CLASSIFICATION	0.9998644029970266	WITHOUT_CLASSIFICATION	1.3559700297332902E-4	DESIGN
Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9995076558049941	WITHOUT_CLASSIFICATION	4.923441950058902E-4	DESIGN
child == parent.getFirstChild()	WITHOUT_CLASSIFICATION	0.9999063705344945	WITHOUT_CLASSIFICATION	9.362946550545396E-5	DESIGN
Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9995076558049941	WITHOUT_CLASSIFICATION	4.923441950058902E-4	DESIGN
Filter conditions need to be inserted before the HQL where condition and the theta join node. This is because org.hibernate.loader.Loader binds the filter parameters first, then it binds all the HQL query parameters, see org.hibernate.loader.Loader.processFilterParameters().	WITHOUT_CLASSIFICATION	0.9999364460488372	WITHOUT_CLASSIFICATION	6.355395116276615E-5	DESIGN
Put the FILTERS node before the HQL condition and theta joins	WITHOUT_CLASSIFICATION	0.9997849078329555	WITHOUT_CLASSIFICATION	2.150921670446351E-4	DESIGN
add the current fragment to the FILTERS node	WITHOUT_CLASSIFICATION	0.99749712436435	WITHOUT_CLASSIFICATION	0.0025028756356499887	DESIGN
Create a new THETA_JOINS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9998842543400038	WITHOUT_CLASSIFICATION	1.1574565999624305E-4	DESIGN
Put the THETA_JOINS node before the HQL condition, after the filters.	WITHOUT_CLASSIFICATION	0.9993768302198235	WITHOUT_CLASSIFICATION	6.231697801765489E-4	DESIGN
add the current fragment to the THETA_JOINS node	WITHOUT_CLASSIFICATION	0.99749712436435	WITHOUT_CLASSIFICATION	0.0025028756356499887	DESIGN
First, try to get the persister using the given name directly.	WITHOUT_CLASSIFICATION	0.999900333538737	WITHOUT_CLASSIFICATION	9.966646126307296E-5	DESIGN
unable to locate it using this name	WITHOUT_CLASSIFICATION	0.9985605345919818	WITHOUT_CLASSIFICATION	0.0014394654080181644	DESIGN
If that didn't work, try using the 'import' name.	WITHOUT_CLASSIFICATION	0.999968874599998	WITHOUT_CLASSIFICATION	3.112540000215935E-5	DESIGN
Implicit joins use theta style (WHERE pk = fk), explicit joins use JOIN (after from)	WITHOUT_CLASSIFICATION	0.998947966172326	WITHOUT_CLASSIFICATION	0.0010520338276740298	DESIGN
locate the registered function by the given name	WITHOUT_CLASSIFICATION	0.9999879821873113	WITHOUT_CLASSIFICATION	1.2017812688656038E-5	DESIGN
determine the type of the first argument...	WITHOUT_CLASSIFICATION	0.9990358857102605	WITHOUT_CLASSIFICATION	9.641142897393853E-4	DESIGN
Use the DOT node to emit the first column name. Create the column names, folled by the column aliases.	WITHOUT_CLASSIFICATION	0.9997622190909151	WITHOUT_CLASSIFICATION	2.3778090908478186E-4	DESIGN
Note: this simply constructs a "raw" SQL_TOKEN representing the where fragment and injects this into the tree. This "works"; however it is probably not the best long-term solution. At some point we probably want to apply an additional grammar to properly tokenize this where fragment into constituent parts focused on the operators embedded within the fragment.	WITHOUT_CLASSIFICATION	0.9666669513344318	DESIGN	0.0333330486655682	WITHOUT_CLASSIFICATION
Append the text of the current node.	WITHOUT_CLASSIFICATION	0.9999498473501891	WITHOUT_CLASSIFICATION	5.015264981095131E-5	DESIGN
If the node has a first child, recurse into the first child.	WITHOUT_CLASSIFICATION	0.9996256993741056	WITHOUT_CLASSIFICATION	3.743006258944582E-4	DESIGN
If there is a second child (RHS), recurse into that child.	WITHOUT_CLASSIFICATION	0.9999605167428118	WITHOUT_CLASSIFICATION	3.948325718813847E-5	DESIGN
Iterate through the alias,JoinSequence pairs and generate SQL token nodes.	WITHOUT_CLASSIFICATION	0.9998005371411901	WITHOUT_CLASSIFICATION	1.994628588098902E-4	DESIGN
If the from element represents a JOIN_FRAGMENT and it is a theta-style join, convert its type from JOIN_FRAGMENT to FROM_FRAGMENT	WITHOUT_CLASSIFICATION	0.9988998182587034	WITHOUT_CLASSIFICATION	0.0011001817412965719	DESIGN
this is used during SqlGenerator processing	WITHOUT_CLASSIFICATION	0.702471637355401	WITHOUT_CLASSIFICATION	0.2975283626445991	DESIGN
If there is a FROM fragment and the FROM element is an explicit, then add the from part.	WITHOUT_CLASSIFICATION	0.9991329363530039	WITHOUT_CLASSIFICATION	8.670636469960863E-4	DESIGN
&& StringHelper.isNotEmpty( frag )	WITHOUT_CLASSIFICATION	0.9988166581526443	WITHOUT_CLASSIFICATION	0.0011833418473556423	DESIGN
The FROM fragment will probably begin with ', '. Remove this if it is present.	WITHOUT_CLASSIFICATION	0.9913140232069776	WITHOUT_CLASSIFICATION	0.00868597679302245	DESIGN
This uses a PathExpressionParser but notice that compound paths are not valid, only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9675002889629725	WITHOUT_CLASSIFICATION	0.03249971103702742	DESIGN
SELECT p FROM p IN CLASS eg.Person ORDER BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9986202815900151	WITHOUT_CLASSIFICATION	0.0013797184099848306	DESIGN
The reason for this is SQL doesn't let you sort by an expression you are not returning in the result set.	WITHOUT_CLASSIFICATION	0.9999307718671244	WITHOUT_CLASSIFICATION	6.922813287562189E-5	DESIGN
named query parameter	WITHOUT_CLASSIFICATION	0.9978626923261622	WITHOUT_CLASSIFICATION	0.002137307673837899	DESIGN
default mode	WITHOUT_CLASSIFICATION	0.9996234278598555	WITHOUT_CLASSIFICATION	3.765721401445554E-4	DESIGN
QueryJoinFragment join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9996529068097939	WITHOUT_CLASSIFICATION	3.470931902060737E-4	DESIGN
reset the dotcount (but not the path) after reset!	WITHOUT_CLASSIFICATION	0.9985321719705291	WITHOUT_CLASSIFICATION	0.0014678280294709272	DESIGN
after reset!	WITHOUT_CLASSIFICATION	0.9996585512658174	WITHOUT_CLASSIFICATION	3.4144873418256853E-4	DESIGN
we don't need to worry about any condition in the ON clause here (toFromFragmentString), since anything in the ON condition is already applied to the whole query	WITHOUT_CLASSIFICATION	0.9905850175697546	WITHOUT_CLASSIFICATION	0.009414982430245399	DESIGN
bit_length feels a bit broken to me. We have to cast to char in order to pass when a numeric value is supplied. But of course the answers given will be wildly different for these two datatypes. 1234.5678 will be 9 bytes as a char string but will be 8 or 16 bytes as a true numeric. Jay Nance 2006-09-22	WITHOUT_CLASSIFICATION	0.9999921652573734	WITHOUT_CLASSIFICATION	7.834742626617044E-6	DESIGN
dotcount>=2	WITHOUT_CLASSIFICATION	0.9998192731054069	WITHOUT_CLASSIFICATION	1.8072689459315214E-4	DESIGN
Do the corresponding RHS	WITHOUT_CLASSIFICATION	0.9996747637880843	WITHOUT_CLASSIFICATION	3.252362119157342E-4	DESIGN
if its "id"	WITHOUT_CLASSIFICATION	0.9998844917162631	WITHOUT_CLASSIFICATION	1.1550828373683613E-4	DESIGN
or its the id property name	WITHOUT_CLASSIFICATION	0.999899288286263	WITHOUT_CLASSIFICATION	1.0071171373709497E-4	DESIGN
join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9996529068097939	WITHOUT_CLASSIFICATION	3.470931902060737E-4	DESIGN
important!!	WITHOUT_CLASSIFICATION	0.9998192731054069	WITHOUT_CLASSIFICATION	1.8072689459315214E-4	DESIGN
String[] keyCols = collPersister.getKeyColumnNames();	WITHOUT_CLASSIFICATION	0.9996726824335399	WITHOUT_CLASSIFICATION	3.2731756646009697E-4	DESIGN
an association	WITHOUT_CLASSIFICATION	0.999888049420992	WITHOUT_CLASSIFICATION	1.119505790080475E-4	DESIGN
allow index() function:	WITHOUT_CLASSIFICATION	0.9984493646968761	WITHOUT_CLASSIFICATION	0.001550635303123933	DESIGN
here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9555109336249373	WITHOUT_CLASSIFICATION	0.04448906637506265	DESIGN
The reason for this is SQL doesn't let you sort by an expression you are not returning in the result set.	WITHOUT_CLASSIFICATION	0.9999307718671244	WITHOUT_CLASSIFICATION	6.922813287562189E-5	DESIGN
many-to-many	WITHOUT_CLASSIFICATION	0.9998192731054069	WITHOUT_CLASSIFICATION	1.8072689459315214E-4	DESIGN
collections of values	WITHOUT_CLASSIFICATION	0.999926745653033	WITHOUT_CLASSIFICATION	7.3254346967019E-5	DESIGN
opening paren in new Foo ( ... )	WITHOUT_CLASSIFICATION	0.998333902349973	WITHOUT_CLASSIFICATION	0.0016660976500269382	DESIGN
if we are inside a new Result(), but not inside a nested function	WITHOUT_CLASSIFICATION	0.9982345108523295	WITHOUT_CLASSIFICATION	0.0017654891476703983	DESIGN
special case	WITHOUT_CLASSIFICATION	0.9999824570894497	WITHOUT_CLASSIFICATION	1.7542910550304785E-5	DESIGN
the name of an SQL function	WITHOUT_CLASSIFICATION	0.9999772972960612	WITHOUT_CLASSIFICATION	2.2702703938783546E-5	DESIGN
null child could occur for no from clause in a filter	WITHOUT_CLASSIFICATION	0.9930653542216359	WITHOUT_CLASSIFICATION	0.006934645778364072	DESIGN
this is basically a copy/paste of OrderByParser ... might be worth refactoring	WITHOUT_CLASSIFICATION	0.6217960629544634	WITHOUT_CLASSIFICATION	0.37820393704553656	DESIGN
SELECT p FROM p IN CLASS eg.Person GROUP BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9980885280760622	WITHOUT_CLASSIFICATION	0.0019114719239378796	DESIGN
return aliases not supported in classic translator!	WITHOUT_CLASSIFICATION	0.998851127820007	WITHOUT_CLASSIFICATION	0.0011488721799930892	DESIGN
register collection role	WITHOUT_CLASSIFICATION	0.9971159560203745	WITHOUT_CLASSIFICATION	0.0028840439796254357	DESIGN
The keyword used to specify an identity column, if identity column key generation is supported.	WITHOUT_CLASSIFICATION	0.990706692623268	WITHOUT_CLASSIFICATION	0.009293307376731978	DESIGN
.getElementPropertyMapping();	WITHOUT_CLASSIFICATION	0.9994936520530547	WITHOUT_CLASSIFICATION	5.063479469452313E-4	DESIGN
crossJoins.add(name);	WITHOUT_CLASSIFICATION	0.9994936520530547	WITHOUT_CLASSIFICATION	5.063479469452313E-4	DESIGN
ie no select clause in HQL	WITHOUT_CLASSIFICATION	0.999655539976904	WITHOUT_CLASSIFICATION	3.444600230959738E-4	DESIGN
initialize the Set of queried identifier spaces (ie. tables)	WITHOUT_CLASSIFICATION	0.9997472856729738	WITHOUT_CLASSIFICATION	2.5271432702628E-4	DESIGN
ie. no select clause	WITHOUT_CLASSIFICATION	0.999898562484979	WITHOUT_CLASSIFICATION	1.0143751502095801E-4	DESIGN
there _was_ a select clause	WITHOUT_CLASSIFICATION	0.9996359358101257	WITHOUT_CLASSIFICATION	3.6406418987436616E-4	DESIGN
return the concrete type, or the underlying type if a concrete type was not specified	WITHOUT_CLASSIFICATION	0.9968091101316972	WITHOUT_CLASSIFICATION	0.0031908898683027493	DESIGN
many-to-many	WITHOUT_CLASSIFICATION	0.9998192731054069	WITHOUT_CLASSIFICATION	1.8072689459315214E-4	DESIGN
q.addCollection(collectionName, collectionRole);	WITHOUT_CLASSIFICATION	0.999356419707268	WITHOUT_CLASSIFICATION	6.435802927320741E-4	DESIGN
classic parser does not support bulk manipulation statements	WITHOUT_CLASSIFICATION	0.9704361259573243	WITHOUT_CLASSIFICATION	0.029563874042675783	DESIGN
can't cache this stuff either (per-invocation)	WITHOUT_CLASSIFICATION	0.9975566025848427	WITHOUT_CLASSIFICATION	0.0024433974151574197	DESIGN
unfortunately this stuff can't be cached because it is per-invocation, not constant for the QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9971252121984842	WITHOUT_CLASSIFICATION	0.00287478780151584	DESIGN
This is the legacy behaviour for HQL queries...	WITHOUT_CLASSIFICATION	0.9962883518751082	WITHOUT_CLASSIFICATION	0.003711648124891866	DESIGN
not known!	WITHOUT_CLASSIFICATION	0.9960150148933486	WITHOUT_CLASSIFICATION	0.00398498510665137	DESIGN
not known!	WITHOUT_CLASSIFICATION	0.9960150148933486	WITHOUT_CLASSIFICATION	0.00398498510665137	DESIGN
we have the form: trim(trimSource) so we trim leading and trailing spaces EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9998675221665753	WITHOUT_CLASSIFICATION	1.3247783342469513E-4	DESIGN
not known!	WITHOUT_CLASSIFICATION	0.9960150148933486	WITHOUT_CLASSIFICATION	0.00398498510665137	DESIGN
not known!	WITHOUT_CLASSIFICATION	0.9960150148933486	WITHOUT_CLASSIFICATION	0.00398498510665137	DESIGN
Need this, since join condition can appear inside parens!	WITHOUT_CLASSIFICATION	0.99948917342961	WITHOUT_CLASSIFICATION	5.108265703899932E-4	DESIGN
tokens that close a sub expression tokens that open a sub expression tokens that would indicate a sub expression is a boolean expression	WITHOUT_CLASSIFICATION	0.9999991839835163	WITHOUT_CLASSIFICATION	8.160164836529987E-7	DESIGN
expressionTerminators.add(","); deliberately excluded	WITHOUT_CLASSIFICATION	0.9997396213538284	WITHOUT_CLASSIFICATION	2.603786461714598E-4	DESIGN
expressionOpeners.add(","); deliberately excluded	WITHOUT_CLASSIFICATION	0.9997396213538284	WITHOUT_CLASSIFICATION	2.603786461714598E-4	DESIGN
we have the form: trim(from trimSource). This is functionally equivalent to trim(trimSource) EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9974781829678147	WITHOUT_CLASSIFICATION	0.0025218170321854292	DESIGN
otherwise, a trim-specification and/or a trim-character have been specified; we need to decide which options are present and "do the right thing" should leading trim-characters be trimmed? should trailing trim-characters be trimmed? the trim-character (what is to be trimmed off?) the trim-source (from where should it be trimmed?)	WITHOUT_CLASSIFICATION	0.9945192340452661	WITHOUT_CLASSIFICATION	0.005480765954733839	DESIGN
Inside a BETWEEN ... AND ... expression	WITHOUT_CLASSIFICATION	0.9990586078286271	WITHOUT_CLASSIFICATION	9.413921713729709E-4	DESIGN
were an odd or even number of NOTs encountered the join string built up by compound paths inside this expression a flag indicating if the subexpression is known to be boolean	WITHOUT_CLASSIFICATION	0.9999619603092605	WITHOUT_CLASSIFICATION	3.803969073937389E-5	DESIGN
ie. a many-to-many	WITHOUT_CLASSIFICATION	0.9996390274102	WITHOUT_CLASSIFICATION	3.609725897998894E-4	DESIGN
Cope with [,]	WITHOUT_CLASSIFICATION	0.9997738032005586	WITHOUT_CLASSIFICATION	2.2619679944150612E-4	DESIGN
Cope with a continued path expression (ie. ].baz)	WITHOUT_CLASSIFICATION	0.999810736166013	WITHOUT_CLASSIFICATION	1.8926383398711185E-4	DESIGN
NOTE: early return	WITHOUT_CLASSIFICATION	0.9998467119149196	WITHOUT_CLASSIFICATION	1.5328808508040245E-4	DESIGN
Cope with a subselect	WITHOUT_CLASSIFICATION	0.9987348780506766	WITHOUT_CLASSIFICATION	0.0012651219493234288	DESIGN
Cope with special cases of AND, NOT, ()	WITHOUT_CLASSIFICATION	0.9999935583687866	WITHOUT_CLASSIFICATION	6.4416312134408086E-6	DESIGN
Close extra brackets we opened	WITHOUT_CLASSIFICATION	0.999232729411185	WITHOUT_CLASSIFICATION	7.672705888150107E-4	DESIGN
take note when this is a boolean expression	WITHOUT_CLASSIFICATION	0.9968242316338212	WITHOUT_CLASSIFICATION	0.003175768366178865	DESIGN
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999722441845003	WITHOUT_CLASSIFICATION	2.7755815499824483E-5	DESIGN
process a token, mapping OO path expressions to SQL expressions	WITHOUT_CLASSIFICATION	0.9996719120520197	WITHOUT_CLASSIFICATION	3.2808794798037326E-4	DESIGN
Open any extra brackets we might need.	WITHOUT_CLASSIFICATION	0.9881921409534635	WITHOUT_CLASSIFICATION	0.011807859046536617	DESIGN
Cope with special cases of AND, NOT, )	WITHOUT_CLASSIFICATION	0.9991232409115729	WITHOUT_CLASSIFICATION	8.767590884270993E-4	DESIGN
the next one up must also be	WITHOUT_CLASSIFICATION	0.9994814977513837	WITHOUT_CLASSIFICATION	5.185022486162486E-4	DESIGN
Add any joins	WITHOUT_CLASSIFICATION	0.9998477076553853	WITHOUT_CLASSIFICATION	1.5229234461477088E-4	DESIGN
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999722441845003	WITHOUT_CLASSIFICATION	2.7755815499824483E-5	DESIGN
named query parameter	WITHOUT_CLASSIFICATION	0.9978626923261622	WITHOUT_CLASSIFICATION	0.002137307673837899	DESIGN
path expression	WITHOUT_CLASSIFICATION	0.999978750613302	WITHOUT_CLASSIFICATION	2.1249386697964908E-5	DESIGN
saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9995938973477233	WITHOUT_CLASSIFICATION	4.0610265227669813E-4	DESIGN
persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9992588889170456	WITHOUT_CLASSIFICATION	7.41111082954485E-4	DESIGN
anything else	WITHOUT_CLASSIFICATION	0.9999758224897348	WITHOUT_CLASSIFICATION	2.417751026513412E-5	DESIGN
the path expression continues after a ]	WITHOUT_CLASSIFICATION	0.999789347507301	WITHOUT_CLASSIFICATION	2.1065249269901703E-4	DESIGN
careful with this!	WITHOUT_CLASSIFICATION	0.9996537333330394	WITHOUT_CLASSIFICATION	3.4626666696056004E-4	DESIGN
the path expression ends at the ]	WITHOUT_CLASSIFICATION	0.999820637925729	WITHOUT_CLASSIFICATION	1.7936207427102674E-4	DESIGN
"finish off" the join	WITHOUT_CLASSIFICATION	0.9997747017401339	WITHOUT_CLASSIFICATION	2.252982598660455E-4	DESIGN
NOTICE: no " or . since they are part of (compound) identifiers	WITHOUT_CLASSIFICATION	0.9998387759319599	WITHOUT_CLASSIFICATION	1.6122406804003632E-4	DESIGN
cannot instantiate	WITHOUT_CLASSIFICATION	0.9999294448121498	WITHOUT_CLASSIFICATION	7.055518785017318E-5	DESIGN
start by looking for HQL keywords...	WITHOUT_CLASSIFICATION	0.9997856093874139	WITHOUT_CLASSIFICATION	2.1439061258600323E-4	DESIGN
inner joins can be abbreviated to 'join'	WITHOUT_CLASSIFICATION	0.998608911740252	WITHOUT_CLASSIFICATION	0.0013910882597479753	DESIGN
'outer' is optional and is ignored	WITHOUT_CLASSIFICATION	0.9997315810991005	WITHOUT_CLASSIFICATION	2.684189008995148E-4	DESIGN
now anything that is not a HQL keyword	WITHOUT_CLASSIFICATION	0.9991857019083346	WITHOUT_CLASSIFICATION	8.142980916654083E-4	DESIGN
process the "old" HQL style where aliases appear _first_ ie. using the IN or IN CLASS constructions	WITHOUT_CLASSIFICATION	0.9997182980645942	WITHOUT_CLASSIFICATION	2.81701935405828E-4	DESIGN
treat it as a classname	WITHOUT_CLASSIFICATION	0.9997881218364705	WITHOUT_CLASSIFICATION	2.1187816352943815E-4	DESIGN
treat it as a path expression	WITHOUT_CLASSIFICATION	0.9999716325601404	WITHOUT_CLASSIFICATION	2.836743985964392E-5	DESIGN
starts with the name of a mapped class (new style)	WITHOUT_CLASSIFICATION	0.9991381416849385	WITHOUT_CLASSIFICATION	8.618583150614424E-4	DESIGN
starts with a path expression (new style)	WITHOUT_CLASSIFICATION	0.9998090335297279	WITHOUT_CLASSIFICATION	1.909664702721445E-4	DESIGN
allow ODMG OQL style: from Person p, p.cars c	WITHOUT_CLASSIFICATION	0.9988834420918362	WITHOUT_CLASSIFICATION	0.0011165579081638406	DESIGN
handle quoted strings	WITHOUT_CLASSIFICATION	0.997393634339024	WITHOUT_CLASSIFICATION	0.002606365660975975	DESIGN
Object insertions, updates, and deletions have list semantics because they must happen in the right order so as to respect referential integrity	WITHOUT_CLASSIFICATION	0.9996447709143382	WITHOUT_CLASSIFICATION	3.5522908566174515E-4	DESIGN
"finish off" the join	WITHOUT_CLASSIFICATION	0.9997747017401339	WITHOUT_CLASSIFICATION	2.252982598660455E-4	DESIGN
ignore whitespace	WITHOUT_CLASSIFICATION	0.9997453608975446	WITHOUT_CLASSIFICATION	2.54639102455336E-4	DESIGN
do replacements	WITHOUT_CLASSIFICATION	0.9997626723161868	WITHOUT_CLASSIFICATION	2.3732768381324023E-4	DESIGN
handle HQL2 collection syntax	WITHOUT_CLASSIFICATION	0.995408106279302	WITHOUT_CLASSIFICATION	0.004591893720698021	DESIGN
uuid.hex is deprecated	WITHOUT_CLASSIFICATION	0.9972096656588723	WITHOUT_CLASSIFICATION	0.0027903343411277205	DESIGN
AbstractSelectingDelegate impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994306095977239	WITHOUT_CLASSIFICATION	5.693904022761369E-4	DESIGN
hilo params	WITHOUT_CLASSIFICATION	0.9998224911989568	WITHOUT_CLASSIFICATION	1.775088010431483E-4	DESIGN
sql = query;	WITHOUT_CLASSIFICATION	0.9998895895312501	WITHOUT_CLASSIFICATION	1.1041046874990179E-4	DESIGN
performance opt	WITHOUT_CLASSIFICATION	0.9991655707295863	WITHOUT_CLASSIFICATION	8.344292704137078E-4	DESIGN
sql = update;	WITHOUT_CLASSIFICATION	0.9998895895312501	WITHOUT_CLASSIFICATION	1.1041046874990179E-4	DESIGN
hilo config	WITHOUT_CLASSIFICATION	0.9998708336980271	WITHOUT_CLASSIFICATION	1.2916630197300208E-4	DESIGN
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9995654529753717	WITHOUT_CLASSIFICATION	4.345470246282638E-4	DESIGN
don't allow comments on these insert statements as comments totally blow up the Oracle getGeneratedKeys "support" :(	WITHOUT_CLASSIFICATION	0.9994034896284147	WITHOUT_CLASSIFICATION	5.96510371585232E-4	DESIGN
abort the save (the object is already saved by a circular cascade)	WITHOUT_CLASSIFICATION	0.9964995862829943	WITHOUT_CLASSIFICATION	0.0035004137170056336	DESIGN
throw new IdentifierGenerationException("save associated object first, or disable cascade for inverse association");	WITHOUT_CLASSIFICATION	0.9999483522410134	WITHOUT_CLASSIFICATION	5.164775898664926E-5	DESIGN
intentionally empty	WITHOUT_CLASSIFICATION	0.9997307046981381	WITHOUT_CLASSIFICATION	2.692953018619612E-4	DESIGN
do nothing to avoid a lazy property initialization	WITHOUT_CLASSIFICATION	0.9998307784405679	WITHOUT_CLASSIFICATION	1.6922155943211305E-4	DESIGN
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9992440154121346	WITHOUT_CLASSIFICATION	7.559845878654819E-4	DESIGN
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9995654529753717	WITHOUT_CLASSIFICATION	4.345470246282638E-4	DESIGN
do nothing until we hit the rsult set containing the generated id	WITHOUT_CLASSIFICATION	0.9974448040935104	WITHOUT_CLASSIFICATION	0.002555195906489428	DESIGN
COLUMN and TABLE should be renamed but it would break the public API	WITHOUT_CLASSIFICATION	0.9934399882329901	WITHOUT_CLASSIFICATION	0.006560011767009872	DESIGN
Loaded entity instances, by EntityKey	WITHOUT_CLASSIFICATION	0.9997309021729822	WITHOUT_CLASSIFICATION	2.690978270178683E-4	DESIGN
if the given name is un-qualified we may neen to qualify it	WITHOUT_CLASSIFICATION	0.9998079432379123	WITHOUT_CLASSIFICATION	1.9205676208768445E-4	DESIGN
the default...	WITHOUT_CLASSIFICATION	0.999865321720277	WITHOUT_CLASSIFICATION	1.3467827972304624E-4	DESIGN
unfortunately not really safe to normalize this to 1 as an initial value like we do the others because we would not be able to control this if we are using a sequence...	WITHOUT_CLASSIFICATION	0.99579739082938	WITHOUT_CLASSIFICATION	0.004202609170619918	DESIGN
intentionally empty	WITHOUT_CLASSIFICATION	0.9997307046981381	WITHOUT_CLASSIFICATION	2.692953018619612E-4	DESIGN
Identity map of CollectionEntry instances, by the collection wrapper	WITHOUT_CLASSIFICATION	0.9999536047157049	WITHOUT_CLASSIFICATION	4.639528429508638E-5	DESIGN
general purpose parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998170726416218	WITHOUT_CLASSIFICATION	1.8292735837833378E-4	DESIGN
table-specific parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998855086517585	WITHOUT_CLASSIFICATION	1.144913482414947E-4	DESIGN
Configurable implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999368829655855	WITHOUT_CLASSIFICATION	6.311703441449494E-4	DESIGN
IdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999368829655855	WITHOUT_CLASSIFICATION	6.311703441449494E-4	DESIGN
PersistentIdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999368829655855	WITHOUT_CLASSIFICATION	6.311703441449494E-4	DESIGN
prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9997864263777889	WITHOUT_CLASSIFICATION	2.1357362221111208E-4	DESIGN
prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9997864263777889	WITHOUT_CLASSIFICATION	2.1357362221111208E-4	DESIGN
fetch the generated id in a separate query	WITHOUT_CLASSIFICATION	0.9894758070679038	WITHOUT_CLASSIFICATION	0.010524192932096086	DESIGN
we just hit the last position	WITHOUT_CLASSIFICATION	0.996894105469953	WITHOUT_CLASSIFICATION	0.003105894530046998	DESIGN
scroll ahead	WITHOUT_CLASSIFICATION	0.9998310912877048	WITHOUT_CLASSIFICATION	1.6890871229534432E-4	DESIGN
scroll backward	WITHOUT_CLASSIFICATION	0.9998488905846739	WITHOUT_CLASSIFICATION	1.5110941532622057E-4	DESIGN
we have not yet hit the last result...	WITHOUT_CLASSIFICATION	0.9954553772452205	WITHOUT_CLASSIFICATION	0.0045446227547794645	DESIGN
Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993743261269415	WITHOUT_CLASSIFICATION	6.256738730584896E-4	DESIGN
State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999460446474395	WITHOUT_CLASSIFICATION	5.395535256050881E-4	DESIGN
Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994306095977239	WITHOUT_CLASSIFICATION	5.693904022761369E-4	DESIGN
do this when all the properties are updateable since there is a certain likelihood that the information will already be snapshot-cached.	WITHOUT_CLASSIFICATION	0.9994591506485444	WITHOUT_CLASSIFICATION	5.408493514555201E-4	DESIGN
Inner classes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997406192759973	WITHOUT_CLASSIFICATION	2.593807240026725E-4	DESIGN
Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993743261269415	WITHOUT_CLASSIFICATION	6.256738730584896E-4	DESIGN
State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999460446474395	WITHOUT_CLASSIFICATION	5.395535256050881E-4	DESIGN
Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994306095977239	WITHOUT_CLASSIFICATION	5.693904022761369E-4	DESIGN
Caches	WITHOUT_CLASSIFICATION	0.9991288176721137	WITHOUT_CLASSIFICATION	8.711823278862698E-4	DESIGN
Generators:	WITHOUT_CLASSIFICATION	0.9998192731054069	WITHOUT_CLASSIFICATION	1.8072689459315214E-4	DESIGN
cache region is defined by the root-class in the hierarchy...	WITHOUT_CLASSIFICATION	0.9998339780666193	WITHOUT_CLASSIFICATION	1.660219333806405E-4	DESIGN
check if the detached object being merged is the parent	WITHOUT_CLASSIFICATION	0.9999813021033848	WITHOUT_CLASSIFICATION	1.8697896615176338E-5	DESIGN
after all persisters and named queries are registered	WITHOUT_CLASSIFICATION	0.9963364289973	WITHOUT_CLASSIFICATION	0.003663571002699841	DESIGN
if we get here, it is possible that we have a proxy 'in the way' of the merge map resolution... NOTE: decided to put this here rather than in the above loop as I was nervous about the performance of the loop-in-loop especially considering this is far more likely the 'edge case'	WITHOUT_CLASSIFICATION	0.9705135174429048	WITHOUT_CLASSIFICATION	0.02948648255709513	DESIGN
JNDI + Serialization:	WITHOUT_CLASSIFICATION	0.9998277324872076	WITHOUT_CLASSIFICATION	1.722675127924009E-4	DESIGN
checking for named queries	WITHOUT_CLASSIFICATION	0.9985783955466605	WITHOUT_CLASSIFICATION	0.0014216044533394182	DESIGN
stats	WITHOUT_CLASSIFICATION	0.9991654706635289	WITHOUT_CLASSIFICATION	8.345293364709976E-4	DESIGN
EntityNotFoundDelegate	WITHOUT_CLASSIFICATION	0.9994936520530547	WITHOUT_CLASSIFICATION	5.063479469452313E-4	DESIGN
Check named HQL queries	WITHOUT_CLASSIFICATION	0.9994561826474746	WITHOUT_CLASSIFICATION	5.438173525255166E-4	DESIGN
this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9705203111288978	WITHOUT_CLASSIFICATION	0.02947968887110226	DESIGN
prevents this session from adding things to cache	WITHOUT_CLASSIFICATION	0.9927414012338522	WITHOUT_CLASSIFICATION	0.007258598766147726	DESIGN
from javax.naming.Referenceable	WITHOUT_CLASSIFICATION	0.999244796900898	WITHOUT_CLASSIFICATION	7.552030991019558E-4	DESIGN
look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999031245862592	WITHOUT_CLASSIFICATION	9.687541374081991E-5	DESIGN
for a dynamic-class	WITHOUT_CLASSIFICATION	0.9995849864511304	WITHOUT_CLASSIFICATION	4.1501354886965946E-4	DESIGN
test this entity to see if we must query it	WITHOUT_CLASSIFICATION	0.9995186862846737	WITHOUT_CLASSIFICATION	4.813137153264251E-4	DESIGN
NOTE EARLY EXIT	WITHOUT_CLASSIFICATION	0.999836732714024	WITHOUT_CLASSIFICATION	1.6326728597607443E-4	DESIGN
for backward-compatability	WITHOUT_CLASSIFICATION	0.9994178597231846	WITHOUT_CLASSIFICATION	5.821402768153891E-4	DESIGN
ignore this error for now	WITHOUT_CLASSIFICATION	0.9983195371755709	WITHOUT_CLASSIFICATION	0.0016804628244291042	DESIGN
to stop the class from being unloaded	WITHOUT_CLASSIFICATION	0.9996000842452288	WITHOUT_CLASSIFICATION	3.9991575477112183E-4	DESIGN
in case we were deserialized in a different JVM, look for an instance with the same name (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9990407796309179	WITHOUT_CLASSIFICATION	9.592203690820242E-4	DESIGN
must add to JNDI _after_ adding to HashMaps, because some JNDI servers use serialization	WITHOUT_CLASSIFICATION	0.9983938380820716	WITHOUT_CLASSIFICATION	0.0016061619179283553	DESIGN
Make sure this is a defined parameter and check the incoming value type	WITHOUT_CLASSIFICATION	0.9976306165915501	WITHOUT_CLASSIFICATION	0.002369383408449937	DESIGN
for each of the defined parameters, make sure its value has been set	WITHOUT_CLASSIFICATION	0.9997838816013673	WITHOUT_CLASSIFICATION	2.1611839863258905E-4	DESIGN
we never need to apply locks to the SQL	WITHOUT_CLASSIFICATION	0.9933275899131245	WITHOUT_CLASSIFICATION	0.006672410086875464	DESIGN
inserts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999356419707268	WITHOUT_CLASSIFICATION	6.435802927320741E-4	DESIGN
deletes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992645093835346	WITHOUT_CLASSIFICATION	7.354906164653371E-4	DESIGN
during deserialization, we need to reconnect all proxies and collections to this session, as well as the EntityEntry and CollectionEntry instances; these associations are transient because serialization is used for different things.	WITHOUT_CLASSIFICATION	0.5807052764510954	DESIGN	0.41929472354890457	WITHOUT_CLASSIFICATION
updates ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996013312403127	WITHOUT_CLASSIFICATION	3.9866875968736756E-4	DESIGN
loading ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997937425140138	WITHOUT_CLASSIFICATION	2.062574859863783E-4	DESIGN
final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9997916736166709	WITHOUT_CLASSIFICATION	2.0832638332903518E-4	DESIGN
final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9997916736166709	WITHOUT_CLASSIFICATION	2.0832638332903518E-4	DESIGN
first, try to load it from the temp PC associated to this SS	WITHOUT_CLASSIFICATION	0.9999190700250401	WITHOUT_CLASSIFICATION	8.092997495995126E-5	DESIGN
if the metadata allowed proxy creation and caller did not request forceful eager loading, generate a proxy	WITHOUT_CLASSIFICATION	0.9999837873719509	WITHOUT_CLASSIFICATION	1.6212628049049955E-5	DESIGN
otherwise immediately materialize it	WITHOUT_CLASSIFICATION	0.9999069775846204	WITHOUT_CLASSIFICATION	9.302241537957742E-5	DESIGN
/	WITHOUT_CLASSIFICATION	0.9995842610591597	WITHOUT_CLASSIFICATION	4.157389408404177E-4	DESIGN
no auto-flushing to support in stateless session	WITHOUT_CLASSIFICATION	0.9976442401611356	WITHOUT_CLASSIFICATION	0.002355759838864321	DESIGN
after setting values to object, entityMode	WITHOUT_CLASSIFICATION	0.9999165513325929	WITHOUT_CLASSIFICATION	8.344866740701695E-5	DESIGN
for EJB3	WITHOUT_CLASSIFICATION	0.9989984700903999	WITHOUT_CLASSIFICATION	0.00100152990960007	DESIGN
just ignore	WITHOUT_CLASSIFICATION	0.9996406312098153	WITHOUT_CLASSIFICATION	3.5936879018465625E-4	DESIGN
do a check	WITHOUT_CLASSIFICATION	0.9990388211550648	WITHOUT_CLASSIFICATION	9.611788449350827E-4	DESIGN
saveOrUpdate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992949576336095	WITHOUT_CLASSIFICATION	7.050423663904948E-4	DESIGN
update() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992949576336095	WITHOUT_CLASSIFICATION	7.050423663904948E-4	DESIGN
lock() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992949576336095	WITHOUT_CLASSIFICATION	7.050423663904948E-4	DESIGN
persist() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992949576336095	WITHOUT_CLASSIFICATION	7.050423663904948E-4	DESIGN
persistOnFlush() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992949576336095	WITHOUT_CLASSIFICATION	7.050423663904948E-4	DESIGN
merge() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992949576336095	WITHOUT_CLASSIFICATION	7.050423663904948E-4	DESIGN
saveOrUpdateCopy() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992949576336095	WITHOUT_CLASSIFICATION	7.050423663904948E-4	DESIGN
delete() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9991942769284787	WITHOUT_CLASSIFICATION	8.057230715213073E-4	DESIGN
load()/get() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992949576336095	WITHOUT_CLASSIFICATION	7.050423663904948E-4	DESIGN
refresh() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992949576336095	WITHOUT_CLASSIFICATION	7.050423663904948E-4	DESIGN
replicate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992949576336095	WITHOUT_CLASSIFICATION	7.050423663904948E-4	DESIGN
do not auto-flush while outside a transaction	WITHOUT_CLASSIFICATION	0.9923924617936575	WITHOUT_CLASSIFICATION	0.007607538206342455	DESIGN
this is an internal error of some sort...	WITHOUT_CLASSIFICATION	0.9988606885990454	WITHOUT_CLASSIFICATION	0.001139311400954541	DESIGN
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.997730145618426	WITHOUT_CLASSIFICATION	0.0022698543815740887	DESIGN
only collections belonging to deleted entities are allowed to be dereferenced in the case of orphan delete	WITHOUT_CLASSIFICATION	0.9999680870374067	WITHOUT_CLASSIFICATION	3.191296259331168E-5	DESIGN
if it was previously unreferenced, we need to flush in order to get its state into the database in order to execute query	WITHOUT_CLASSIFICATION	0.9797886992683161	WITHOUT_CLASSIFICATION	0.0202113007316838	DESIGN
not for internal use:	WITHOUT_CLASSIFICATION	0.9966932206331279	WITHOUT_CLASSIFICATION	0.0033067793668720624	DESIGN
otherwise, we only need to flush if there are in-memory changes to the queried tables	WITHOUT_CLASSIFICATION	0.9913907366757365	WITHOUT_CLASSIFICATION	0.008609263324263493	DESIGN
might need to run a different filter entirely after the flush because the collection role may have changed	WITHOUT_CLASSIFICATION	0.9111274989004119	WITHOUT_CLASSIFICATION	0.08887250109958808	DESIGN
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.997730145618426	WITHOUT_CLASSIFICATION	0.0022698543815740887	DESIGN
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.997730145618426	WITHOUT_CLASSIFICATION	0.0022698543815740887	DESIGN
if it is initialized, see if the underlying instance is contained, since we need to account for the fact that it might have been evicted	WITHOUT_CLASSIFICATION	0.9970407519659809	WITHOUT_CLASSIFICATION	0.0029592480340191766	DESIGN
basically just an adapted copy of find(CriteriaImpl)	WITHOUT_CLASSIFICATION	0.9997073751451637	WITHOUT_CLASSIFICATION	2.9262485483625317E-4	DESIGN
it is possible for this method to be called during flush processing, so make certain that we do not accidently initialize an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9916555141489617	WITHOUT_CLASSIFICATION	0.008344485851038228	DESIGN
nothing to do in a stateful session	WITHOUT_CLASSIFICATION	0.9982436686242422	WITHOUT_CLASSIFICATION	0.0017563313757578255	DESIGN
ignore	WITHOUT_CLASSIFICATION	0.9984534187512447	WITHOUT_CLASSIFICATION	0.0015465812487552983	DESIGN
ignore this error for now	WITHOUT_CLASSIFICATION	0.9983195371755709	WITHOUT_CLASSIFICATION	0.0016804628244291042	DESIGN
we need to writeObject() on this since interceptor is user defined	WITHOUT_CLASSIFICATION	0.9980036271004249	WITHOUT_CLASSIFICATION	0.001996372899574986	DESIGN
the old-time stand-by...	WITHOUT_CLASSIFICATION	0.9996226365204217	WITHOUT_CLASSIFICATION	3.7736347957826287E-4	DESIGN
parameter bind values...	WITHOUT_CLASSIFICATION	0.9987681656226282	WITHOUT_CLASSIFICATION	0.001231834377371826	DESIGN
Parameter handling code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9933723838672022	WITHOUT_CLASSIFICATION	0.006627616132797841	DESIGN
prepend value and type list with null for any positions before the wanted position.	WITHOUT_CLASSIFICATION	0.9955065142859242	WITHOUT_CLASSIFICATION	0.004493485714075771	DESIGN
Execution methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9989849010130837	WITHOUT_CLASSIFICATION	0.0010150989869162754	DESIGN
we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9988780032601413	WITHOUT_CLASSIFICATION	0.001121996739858584	DESIGN
we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9988780032601413	WITHOUT_CLASSIFICATION	0.001121996739858584	DESIGN
we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9988780032601413	WITHOUT_CLASSIFICATION	0.001121996739858584	DESIGN
we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9988780032601413	WITHOUT_CLASSIFICATION	0.001121996739858584	DESIGN
FieldInterceptor impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994306095977239	WITHOUT_CLASSIFICATION	5.693904022761369E-4	DESIGN
subclass accesses ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9990218961733172	WITHOUT_CLASSIFICATION	9.781038266828638E-4	DESIGN
let's assume that there is only one lazy fetch group, for now!	WITHOUT_CLASSIFICATION	0.9999774762562028	WITHOUT_CLASSIFICATION	2.2523743797207485E-5	DESIGN
FieldHandler impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994306095977239	WITHOUT_CLASSIFICATION	5.693904022761369E-4	DESIGN
should not need to grow beyond the size of the total number of columns in the rs	WITHOUT_CLASSIFICATION	0.9873017229141327	WITHOUT_CLASSIFICATION	0.0126982770858674	DESIGN
should probably no-op commit/rollback here, at least in JTA scenarios	WITHOUT_CLASSIFICATION	0.9943814418062102	WITHOUT_CLASSIFICATION	0.005618558193789777	DESIGN
Base Expectation impls ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993733843939162	WITHOUT_CLASSIFICATION	6.266156060837339E-4	DESIGN
Various Expectation instances ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995360886331022	WITHOUT_CLASSIFICATION	4.6391136689783504E-4	DESIGN
explicitly perform no checking...	WITHOUT_CLASSIFICATION	0.997677156501096	WITHOUT_CLASSIFICATION	0.0023228434989040494	DESIGN
used from testsuite	WITHOUT_CLASSIFICATION	0.9635514772857029	WITHOUT_CLASSIFICATION	0.03644852271429717	DESIGN
assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9990729155246666	WITHOUT_CLASSIFICATION	9.270844753335397E-4	DESIGN
package	WITHOUT_CLASSIFICATION	0.9957153436513405	WITHOUT_CLASSIFICATION	0.0042846563486594776	DESIGN
register synch; stats.connect()	WITHOUT_CLASSIFICATION	0.9991977880754803	WITHOUT_CLASSIFICATION	8.022119245196742E-4	DESIGN
noncritical, swallow and let the other propagate!	WITHOUT_CLASSIFICATION	0.997394199710196	WITHOUT_CLASSIFICATION	0.0026058002898039765	DESIGN
calls executeBatch()	WITHOUT_CLASSIFICATION	0.9996309814302177	WITHOUT_CLASSIFICATION	3.6901856978236873E-4	DESIGN
no big deal	WITHOUT_CLASSIFICATION	0.9999555436666531	WITHOUT_CLASSIFICATION	4.445633334703471E-5	DESIGN
no big deal	WITHOUT_CLASSIFICATION	0.9999555436666531	WITHOUT_CLASSIFICATION	4.445633334703471E-5	DESIGN
no big deal	WITHOUT_CLASSIFICATION	0.9999555436666531	WITHOUT_CLASSIFICATION	4.445633334703471E-5	DESIGN
sybase driver (jConnect) throwing NPE here in certain cases, but we'll just handle the general "unexpected" case	WITHOUT_CLASSIFICATION	0.9971989425338909	WITHOUT_CLASSIFICATION	0.0028010574661091	DESIGN
see explanation above...	WITHOUT_CLASSIFICATION	0.9997933893734118	WITHOUT_CLASSIFICATION	2.0661062658812752E-4	DESIGN
If we are in the process of releasing, no sense checking for aggressive-release possibility.	WITHOUT_CLASSIFICATION	0.999819460283129	WITHOUT_CLASSIFICATION	1.8053971687106353E-4	DESIGN
EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9998192731054069	WITHOUT_CLASSIFICATION	1.8072689459315214E-4	DESIGN
ResultSet impl ("overridden") ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994306095977239	WITHOUT_CLASSIFICATION	5.693904022761369E-4	DESIGN
ResultSet impl (delegated) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994306095977239	WITHOUT_CLASSIFICATION	5.693904022761369E-4	DESIGN
refer to comment in StatefulPersistenceContext.addCollection()	WITHOUT_CLASSIFICATION	0.9997732714165135	WITHOUT_CLASSIFICATION	2.2672858348643258E-4	DESIGN
ConnectionManager.Callback implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999368829655855	WITHOUT_CLASSIFICATION	6.311703441449494E-4	DESIGN
Note : success = false, because we don't know the outcome of the transaction	WITHOUT_CLASSIFICATION	0.999977547053332	WITHOUT_CLASSIFICATION	2.2452946667972136E-5	DESIGN
we already have a callback registered; either a local (org.hibernate.Transaction) transaction has accepted callback responsibilities, or we have previously registered a transaction synch.	WITHOUT_CLASSIFICATION	0.9983057338909826	WITHOUT_CLASSIFICATION	0.00169426610901739	DESIGN
the configured transaction-factory says it only supports local callback mode, so no sense attempting to register a JTA Synchronization	WITHOUT_CLASSIFICATION	0.9986727475090911	WITHOUT_CLASSIFICATION	0.001327252490908885	DESIGN
transactions marked for rollback-only cause some TM impls to throw exceptions	WITHOUT_CLASSIFICATION	0.9936806933692698	WITHOUT_CLASSIFICATION	0.0063193066307301775	DESIGN
serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993574960845476	WITHOUT_CLASSIFICATION	6.425039154525157E-4	DESIGN
postInitialize() will be called after initialization	WITHOUT_CLASSIFICATION	0.9997012611569108	WITHOUT_CLASSIFICATION	2.987388430891775E-4	DESIGN
cannot handle single quotes	WITHOUT_CLASSIFICATION	0.9994630222585165	WITHOUT_CLASSIFICATION	5.369777414834697E-4	DESIGN
todo : for 4.0 private static final Logger log = LoggerFactory.getLogger( SQLStatementLogger.class ); this is the legacy logging 'category'...	WITHOUT_CLASSIFICATION	0.9990171540416246	WITHOUT_CLASSIFICATION	9.828459583753517E-4	DESIGN
note that for sequential scrolling, we make the assumption that the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9324947514695417	WITHOUT_CLASSIFICATION	0.06750524853045824	DESIGN
don't even bother trying to read further	WITHOUT_CLASSIFICATION	0.9864046393142429	WITHOUT_CLASSIFICATION	0.013595360685757039	DESIGN
don't even bother trying to read any further	WITHOUT_CLASSIFICATION	0.9859272105709725	WITHOUT_CLASSIFICATION	0.014072789429027436	DESIGN
position cursor to the last row	WITHOUT_CLASSIFICATION	0.99958563014326	WITHOUT_CLASSIFICATION	4.1436985674007536E-4	DESIGN
sequentially read the result set in reverse until we recognize a change in the key value. At that point, we are pointed at the last physical sequential row for the logical row in which we are interested in processing	WITHOUT_CLASSIFICATION	0.9999957457128535	WITHOUT_CLASSIFICATION	4.254287146414933E-6	DESIGN
Read backwards until we read past the first physical sequential row with the key we are interested in loading	WITHOUT_CLASSIFICATION	0.9999940359704163	WITHOUT_CLASSIFICATION	5.964029583846749E-6	DESIGN
Finally, read ahead one row to position result set cursor at the first physical row we are interested in loading	WITHOUT_CLASSIFICATION	0.9999834023750983	WITHOUT_CLASSIFICATION	1.6597624901679167E-5	DESIGN
now get an existing proxy for each row element (if there is one)	WITHOUT_CLASSIFICATION	0.9999783558765053	WITHOUT_CLASSIFICATION	2.1644123494646145E-5	DESIGN
force the proxy to resolve itself	WITHOUT_CLASSIFICATION	0.9988633618654552	WITHOUT_CLASSIFICATION	0.0011366381345447713	DESIGN
this is equivalent to the old behavior...	WITHOUT_CLASSIFICATION	0.9988762876288295	WITHOUT_CLASSIFICATION	0.0011237123711705461	DESIGN
if null, owner will be retrieved from session	WITHOUT_CLASSIFICATION	0.9999244120517514	WITHOUT_CLASSIFICATION	7.558794824852456E-5	DESIGN
final String queryString,	WITHOUT_CLASSIFICATION	0.9996818328454773	WITHOUT_CLASSIFICATION	3.181671545226768E-4	DESIGN
if it was a reference to self, don't need to nullify unless we are using native id generation, in which case we definitely need to nullify	WITHOUT_CLASSIFICATION	0.9998480255048208	WITHOUT_CLASSIFICATION	1.519744951792134E-4	DESIGN
end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9998484901302093	WITHOUT_CLASSIFICATION	1.5150986979071702E-4	DESIGN
in an effort to avoid concurrent-modification-exceptions (from potential recursive calls back through here as a result of the eventual call to PersistentCollection#endRead), we scan the internal loadingCollections map for matches and store those matches in a temp collection. the temp collection is then used to "drive" the #endRead processing.	WITHOUT_CLASSIFICATION	0.9362351457993859	WITHOUT_CLASSIFICATION	0.06376485420061409	DESIGN
we can reuse it for each row	WITHOUT_CLASSIFICATION	0.9997539136020481	WITHOUT_CLASSIFICATION	2.46086397951945E-4	DESIGN
can't reuse in this case	WITHOUT_CLASSIFICATION	0.9997061342202018	WITHOUT_CLASSIFICATION	2.938657797982246E-4	DESIGN
First we need to suspend any current JTA transaction and obtain a JDBC connection	WITHOUT_CLASSIFICATION	0.9912561787512001	WITHOUT_CLASSIFICATION	0.008743821248799894	DESIGN
getResultList(results);	WITHOUT_CLASSIFICATION	0.9994936520530547	WITHOUT_CLASSIFICATION	5.063479469452313E-4	DESIGN
if we only returned one entity, query by key is more efficient	WITHOUT_CLASSIFICATION	0.9995541112837443	WITHOUT_CLASSIFICATION	4.45888716255693E-4	DESIGN
a collection loaded in the current session can not possibly be the collection belonging to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9947302997255101	WITHOUT_CLASSIFICATION	0.00526970027448985	DESIGN
handle empty collection	WITHOUT_CLASSIFICATION	0.9912428086060697	WITHOUT_CLASSIFICATION	0.008757191393930296	DESIGN
else no collection element, but also no owner	WITHOUT_CLASSIFICATION	0.9998719313394819	WITHOUT_CLASSIFICATION	1.2806866051798745E-4	DESIGN
handle empty collections	WITHOUT_CLASSIFICATION	0.997406313661089	WITHOUT_CLASSIFICATION	0.0025936863389109835	DESIGN
else this is not a collection initializer (and empty collections will be detected by looking for the owner's identifier in the result set)	WITHOUT_CLASSIFICATION	0.9813963660898205	WITHOUT_CLASSIFICATION	0.018603633910179457	DESIGN
validate() instances of Validatable	WITHOUT_CLASSIFICATION	0.999720535054033	WITHOUT_CLASSIFICATION	2.794649459670302E-4	DESIGN
if we know there is exactly 1 row, we can skip. it would be great if we could _always_ skip this; it is a problem for <key-many-to-one>	WITHOUT_CLASSIFICATION	0.9640066117099886	WITHOUT_CLASSIFICATION	0.03599338829001142	DESIGN
remove all collections for the entity from the session-level cache	WITHOUT_CLASSIFICATION	0.9944718965011294	WITHOUT_CLASSIFICATION	0.005528103498870627	DESIGN
null version means the object is in the process of being loaded somewhere else in the ResultSet	WITHOUT_CLASSIFICATION	0.9999798144849263	WITHOUT_CLASSIFICATION	2.0185515073691862E-5	DESIGN
problematic for <key-many-to-one>!	WITHOUT_CLASSIFICATION	0.999260101058336	WITHOUT_CLASSIFICATION	7.398989416640659E-4	DESIGN
use the id passed in	WITHOUT_CLASSIFICATION	0.9998937428056129	WITHOUT_CLASSIFICATION	1.0625719438718484E-4	DESIGN
do nothing	WITHOUT_CLASSIFICATION	0.9993422446069458	WITHOUT_CLASSIFICATION	6.57755393054222E-4	DESIGN
prefer re-generation of identity!	WITHOUT_CLASSIFICATION	0.9995989871329202	WITHOUT_CLASSIFICATION	4.0101286707978906E-4	DESIGN
no point doing this if NONE was requested	WITHOUT_CLASSIFICATION	0.9999518621894649	WITHOUT_CLASSIFICATION	4.813781053510976E-5	DESIGN
If the object is already loaded, return the loaded one	WITHOUT_CLASSIFICATION	0.9999680471717762	WITHOUT_CLASSIFICATION	3.19528282238101E-5	DESIGN
its already loaded so don't need to hydrate it	WITHOUT_CLASSIFICATION	0.9989349281480464	WITHOUT_CLASSIFICATION	0.0010650718519535339	DESIGN
cascade the refresh prior to refreshing this entity	WITHOUT_CLASSIFICATION	0.9983750974541281	WITHOUT_CLASSIFICATION	0.0016249025458719335	DESIGN
the load() which takes an entity does not pass an entityName	WITHOUT_CLASSIFICATION	0.999921337399939	WITHOUT_CLASSIFICATION	7.866260006093856E-5	DESIGN
we only check the version when _upgrading_ lock modes	WITHOUT_CLASSIFICATION	0.9998833294507308	WITHOUT_CLASSIFICATION	1.1667054926919574E-4	DESIGN
look for a proxy	WITHOUT_CLASSIFICATION	0.9999304740819968	WITHOUT_CLASSIFICATION	6.952591800325255E-5	DESIGN
we need to upgrade the lock mode to the mode requested	WITHOUT_CLASSIFICATION	0.9923665491589022	WITHOUT_CLASSIFICATION	0.007633450841097802	DESIGN
its the given optional object	WITHOUT_CLASSIFICATION	0.999809905596695	WITHOUT_CLASSIFICATION	1.9009440330500932E-4	DESIGN
instantiate a new instance	WITHOUT_CLASSIFICATION	0.9996446292693402	WITHOUT_CLASSIFICATION	3.553707306598498E-4	DESIGN
need to hydrate it.	WITHOUT_CLASSIFICATION	0.996630986000644	WITHOUT_CLASSIFICATION	0.003369013999355933	DESIGN
return a newly loaded object	WITHOUT_CLASSIFICATION	0.9994490437825915	WITHOUT_CLASSIFICATION	5.509562174085408E-4	DESIGN
will be ignored, using the existing Entry instead	WITHOUT_CLASSIFICATION	0.9993922478083773	WITHOUT_CLASSIFICATION	6.077521916226879E-4	DESIGN
key is an entity involved with the operation performed by the listener; value can be either a copy of the entity or the entity itself	WITHOUT_CLASSIFICATION	0.9999991149617159	WITHOUT_CLASSIFICATION	8.850382839952441E-7	DESIGN
materialize associations (and initialize the object) later	WITHOUT_CLASSIFICATION	0.9737456322244268	WITHOUT_CLASSIFICATION	0.026254367775573287	DESIGN
Get the persister for the _subclass_	WITHOUT_CLASSIFICATION	0.9995788829551676	WITHOUT_CLASSIFICATION	4.2111704483232696E-4	DESIGN
ok in normal Hibernate usage to delete a detached entity; JPA however forbids it, thus this is a hook for HEM to affect this behavior	WITHOUT_CLASSIFICATION	0.9893032416343965	WITHOUT_CLASSIFICATION	0.01069675836560339	DESIGN
the entry will be removed after the flush, and will no longer override the stale snapshot This is now handled by removeEntity() in EntityDeleteAction persistenceContext.removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9976280502152163	WITHOUT_CLASSIFICATION	0.0023719497847836477	DESIGN
addInitializedCollection(collection, persister, id);	WITHOUT_CLASSIFICATION	0.999356419707268	WITHOUT_CLASSIFICATION	6.435802927320741E-4	DESIGN
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9998192731054069	WITHOUT_CLASSIFICATION	1.8072689459315214E-4	DESIGN
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9998192731054069	WITHOUT_CLASSIFICATION	1.8072689459315214E-4	DESIGN
|| oj.getJoinable().consumesCollectionAlias()	WITHOUT_CLASSIFICATION	0.9994971709126775	WITHOUT_CLASSIFICATION	5.028290873223845E-4	DESIGN
here we do not bother with the discriminator.	WITHOUT_CLASSIFICATION	0.748479746514641	WITHOUT_CLASSIFICATION	0.25152025348535906	DESIGN
Code to handle subclasses of topClass	WITHOUT_CLASSIFICATION	0.9957900571136412	WITHOUT_CLASSIFICATION	0.004209942886358826	DESIGN
woops we got an instance of another class hierarchy branch	WITHOUT_CLASSIFICATION	0.9999438292153353	WITHOUT_CLASSIFICATION	5.617078466483365E-5	DESIGN
we can go straight to the first required row	WITHOUT_CLASSIFICATION	0.999590142730865	WITHOUT_CLASSIFICATION	4.0985726913502337E-4	DESIGN
we need to step through the rows one row at a time (slow)	WITHOUT_CLASSIFICATION	0.9985946688365864	WITHOUT_CLASSIFICATION	0.0014053311634135122	DESIGN
synchronized to avoid multi-thread access issues; defined as method synch to avoid potential deadlock issues due to nature of code.	WITHOUT_CLASSIFICATION	0.9999874663544609	WITHOUT_CLASSIFICATION	1.2533645539114234E-5	DESIGN
Allows various loaders (ok mainly the QueryLoader :) to check whether scrolling of their result set should be allowed. By default it is allowed.	WITHOUT_CLASSIFICATION	0.9998926714919301	WITHOUT_CLASSIFICATION	1.0732850806997501E-4	DESIGN
before adding to collection!	WITHOUT_CLASSIFICATION	0.9990454289916699	WITHOUT_CLASSIFICATION	9.54571008330045E-4	DESIGN
if the current depth is 0, the root thing being loaded is the many-to-many collection itself. Here, it is alright to use an inner join...	WITHOUT_CLASSIFICATION	0.9997168094944707	WITHOUT_CLASSIFICATION	2.8319050552917197E-4	DESIGN
operations which cascade as far as the collection also cascade to collection elements	WITHOUT_CLASSIFICATION	0.9999470061613551	WITHOUT_CLASSIFICATION	5.2993838644940215E-5	DESIGN
simple, because we can't have a one-to-one or a collection (or even a property-ref) in a composite-element:	WITHOUT_CLASSIFICATION	0.9979507209983096	WITHOUT_CLASSIFICATION	0.002049279001690394	DESIGN
a composite key	WITHOUT_CLASSIFICATION	0.999782419654151	WITHOUT_CLASSIFICATION	2.1758034584903885E-4	DESIGN
if no batch, use "foo = ? and bar = ?"	WITHOUT_CLASSIFICATION	0.9996046526763046	WITHOUT_CLASSIFICATION	3.953473236953249E-4	DESIGN
it must be a collection fetch	WITHOUT_CLASSIFICATION	0.989617759339978	WITHOUT_CLASSIFICATION	0.010382240660022093	DESIGN
needed later for many-to-many/filter application	WITHOUT_CLASSIFICATION	0.994621429123057	WITHOUT_CLASSIFICATION	0.005378570876942994	DESIGN
&& etype.isReferenceToPrimaryKey()	WITHOUT_CLASSIFICATION	0.9993379923432805	WITHOUT_CLASSIFICATION	6.62007656719587E-4	DESIGN
it might still need to apply a collection ordering based on a many-to-many defined order-by...	WITHOUT_CLASSIFICATION	0.6587778485068253	DESIGN	0.34122215149317475	WITHOUT_CLASSIFICATION
if a composite key, use "( (foo = ? and bar = ?) or (foo = ? and bar = ?) )" for batching TODO: unnecessary for databases with ANSI-style joins	WITHOUT_CLASSIFICATION	0.6706448969216675	DESIGN	0.3293551030783325	WITHOUT_CLASSIFICATION
belong to other persister belong to other persister	WITHOUT_CLASSIFICATION	0.995695790948324	WITHOUT_CLASSIFICATION	0.0043042090516759385	DESIGN
we found it	WITHOUT_CLASSIFICATION	0.9997822380035019	WITHOUT_CLASSIFICATION	2.1776199649806887E-4	DESIGN
we can use an inner join for the many-to-many	WITHOUT_CLASSIFICATION	0.999232605329512	WITHOUT_CLASSIFICATION	7.673946704879386E-4	DESIGN
disable a join back to this same association	WITHOUT_CLASSIFICATION	0.9966284972419672	WITHOUT_CLASSIFICATION	0.0033715027580328346	DESIGN
NOTE: unlike all other Loaders, this one is NOT multithreaded, or cacheable!!	WITHOUT_CLASSIFICATION	0.9931934428817162	WITHOUT_CLASSIFICATION	0.006806557118283717	DESIGN
the user visible aliases, which are unknown to the superclass, these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.999925646974233	WITHOUT_CLASSIFICATION	7.435302576697662E-5	DESIGN
root entity comes last	WITHOUT_CLASSIFICATION	0.9997980611953301	WITHOUT_CLASSIFICATION	2.019388046700232E-4	DESIGN
deliberately ignore return value!	WITHOUT_CLASSIFICATION	0.9995008655823577	WITHOUT_CLASSIFICATION	4.991344176422121E-4	DESIGN
alias may be null EARLY EXIT	WITHOUT_CLASSIFICATION	0.9987938846689626	WITHOUT_CLASSIFICATION	0.0012061153310374269	DESIGN
if it is a compound path	WITHOUT_CLASSIFICATION	0.9998506132237077	WITHOUT_CLASSIFICATION	1.4938677629219567E-4	DESIGN
otherwise assume the parent is the the criteria that created us	WITHOUT_CLASSIFICATION	0.9996560316499474	WITHOUT_CLASSIFICATION	3.4396835005255953E-4	DESIGN
if its the root criteria, we are done	WITHOUT_CLASSIFICATION	0.9986859253195146	WITHOUT_CLASSIFICATION	0.0013140746804853791	DESIGN
otherwise, recurse	WITHOUT_CLASSIFICATION	0.9998399417467513	WITHOUT_CLASSIFICATION	1.6005825324882185E-4	DESIGN
the criteria instance	WITHOUT_CLASSIFICATION	0.999686668497247	WITHOUT_CLASSIFICATION	3.1333150275304343E-4	DESIGN
the entity name	WITHOUT_CLASSIFICATION	0.9998575965313272	WITHOUT_CLASSIFICATION	1.4240346867273746E-4	DESIGN
not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9997246223661722	WITHOUT_CLASSIFICATION	2.7537763382783293E-4	DESIGN
not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9997246223661722	WITHOUT_CLASSIFICATION	2.7537763382783293E-4	DESIGN
it refers to an alias of a projection	WITHOUT_CLASSIFICATION	0.9995718201191368	WITHOUT_CLASSIFICATION	4.281798808630933E-4	DESIGN
should never happen, i think	WITHOUT_CLASSIFICATION	0.9988043929598992	WITHOUT_CLASSIFICATION	0.0011956070401007526	DESIGN
Detect discriminator values...	WITHOUT_CLASSIFICATION	0.9994861313468737	WITHOUT_CLASSIFICATION	5.13868653126345E-4	DESIGN
Convert the string value into the proper type.	WITHOUT_CLASSIFICATION	0.9973318193388028	WITHOUT_CLASSIFICATION	0.002668180661197296	DESIGN
and the qualifier is not the alias of this criteria -> check to see if we belong to some criteria other than the one that created us	WITHOUT_CLASSIFICATION	0.9981970227722966	WITHOUT_CLASSIFICATION	0.0018029772277033012	DESIGN
it does not refer to an alias of a projection, look for a property	WITHOUT_CLASSIFICATION	0.9991735547774654	WITHOUT_CLASSIFICATION	8.264452225345088E-4	DESIGN
Otherwise, this is an ordinary value.	WITHOUT_CLASSIFICATION	0.9995335518770218	WITHOUT_CLASSIFICATION	4.664481229782194E-4	DESIGN
Currently not cachable if autodiscover types is in effect (e.g. "select ...")	WITHOUT_CLASSIFICATION	0.9995821809519434	WITHOUT_CLASSIFICATION	4.1781904805655114E-4	DESIGN
private final String[] sqlAliases; private final String[] sqlAliasSuffixes;	WITHOUT_CLASSIFICATION	0.9961216466220709	WITHOUT_CLASSIFICATION	0.003878353377929087	DESIGN
this is only needed (afaict) for ResultTransformer processing...	WITHOUT_CLASSIFICATION	0.9992080166970427	WITHOUT_CLASSIFICATION	7.919833029572005E-4	DESIGN
determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9994206988592239	WITHOUT_CLASSIFICATION	5.793011407761254E-4	DESIGN
build an array with indices equal to the total number of actual returns in the result Hibernate will return for this query (scalars + non-scalars)	WITHOUT_CLASSIFICATION	0.9999907618920982	WITHOUT_CLASSIFICATION	9.238107901723604E-6	DESIGN
replace {....} with corresponding column aliases	WITHOUT_CLASSIFICATION	0.9988576660667414	WITHOUT_CLASSIFICATION	0.0011423339332585433	DESIGN
No additional open braces found in the string, append the rest of the string in its entirty and quit this loop	WITHOUT_CLASSIFICATION	0.9999615189037165	WITHOUT_CLASSIFICATION	3.848109628341278E-5	DESIGN
apend everything up until the next encountered open brace	WITHOUT_CLASSIFICATION	0.999765539335754	WITHOUT_CLASSIFICATION	2.3446066424611477E-4	DESIGN
it is a simple table alias {foo}	WITHOUT_CLASSIFICATION	0.9998403918846696	WITHOUT_CLASSIFICATION	1.5960811533042874E-4	DESIGN
passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9620947904153454	WITHOUT_CLASSIFICATION	0.03790520958465466	DESIGN
passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9620947904153454	WITHOUT_CLASSIFICATION	0.03790520958465466	DESIGN
The current alias is referencing the collection to be eagerly fetched	WITHOUT_CLASSIFICATION	0.999655702951214	WITHOUT_CLASSIFICATION	3.4429704878607433E-4	DESIGN
it is a property reference {foo.bar}	WITHOUT_CLASSIFICATION	0.9996211603440349	WITHOUT_CLASSIFICATION	3.7883965596507616E-4	DESIGN
Possibly handle :something parameters for the query ?	WITHOUT_CLASSIFICATION	0.9992110102607338	WITHOUT_CLASSIFICATION	7.889897392661617E-4	DESIGN
Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9992104796055125	WITHOUT_CLASSIFICATION	7.895203944875027E-4	DESIGN
private final List persisters = new ArrayList();	WITHOUT_CLASSIFICATION	0.9973449513708205	WITHOUT_CLASSIFICATION	0.002655048629179435	DESIGN
package	WITHOUT_CLASSIFICATION	0.9957153436513405	WITHOUT_CLASSIFICATION	0.0042846563486594776	DESIGN
NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9998353189921266	WITHOUT_CLASSIFICATION	1.6468100787339588E-4	DESIGN
private final List scalarTypes = new ArrayList(); private final List scalarColumnAliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9991517162034256	WITHOUT_CLASSIFICATION	8.482837965744963E-4	DESIGN
Now, process the returns	WITHOUT_CLASSIFICATION	0.9998968928906035	WITHOUT_CLASSIFICATION	1.0310710939660027E-4	DESIGN
private List collectionOwnerAliases = new ArrayList(); private List collectionAliases = new ArrayList(); private List collectionPersisters = new ArrayList(); private List collectionResults = new ArrayList();	WITHOUT_CLASSIFICATION	0.9987471837216652	WITHOUT_CLASSIFICATION	0.001252816278334891	DESIGN
already been processed...	WITHOUT_CLASSIFICATION	0.999457424169002	WITHOUT_CLASSIFICATION	5.425758309981232E-4	DESIGN
already been processed...	WITHOUT_CLASSIFICATION	0.999457424169002	WITHOUT_CLASSIFICATION	5.425758309981232E-4	DESIGN
Make sure the owner alias is known...	WITHOUT_CLASSIFICATION	0.9999132353452943	WITHOUT_CLASSIFICATION	8.676465470572247E-5	DESIGN
first, break down the returns into maps keyed by alias so that role returns can be more easily resolved to their owners	WITHOUT_CLASSIFICATION	0.996484202724981	WITHOUT_CLASSIFICATION	0.0035157972750191765	DESIGN
scalarColumnAliases.add( typeReturn.getColumnAlias() ); scalarTypes.add( typeReturn.getType() );	WITHOUT_CLASSIFICATION	0.999367392379193	WITHOUT_CLASSIFICATION	6.326076208069893E-4	DESIGN
If this return's alias has not been processed yet, do so b4 further processing of this return	WITHOUT_CLASSIFICATION	0.9996461244323325	WITHOUT_CLASSIFICATION	3.538755676674261E-4	DESIGN
collectionOwnerAliases.add( ownerAlias );	WITHOUT_CLASSIFICATION	0.999367392379193	WITHOUT_CLASSIFICATION	6.326076208069893E-4	DESIGN
for merging of versioned entities, we consider the version having been changed only when: 1) the two version values are different; AND 2) The target actually represents database state! This second condition is a special case which allows an entity to be merged during the same transaction (though during a seperate operation) in which it was originally persisted/saved	WITHOUT_CLASSIFICATION	0.9999997125343909	WITHOUT_CLASSIFICATION	2.874656091920336E-7	DESIGN
this is the second pass through on a merge op, so here we limit the replacement to associations types (value types were already replaced during the first pass)	WITHOUT_CLASSIFICATION	0.8035830177243969	WITHOUT_CLASSIFICATION	0.19641698227560322	DESIGN
EARLY EXIT	WITHOUT_CLASSIFICATION	0.9991288176721137	WITHOUT_CLASSIFICATION	8.711823278862698E-4	DESIGN
cascade-save to collections AFTER the collection owner was saved	WITHOUT_CLASSIFICATION	0.9974575290159508	WITHOUT_CLASSIFICATION	0.002542470984049294	DESIGN
Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9984950546517741	WITHOUT_CLASSIFICATION	0.0015049453482258994	DESIGN
Use the delegate.	WITHOUT_CLASSIFICATION	0.9998523300799953	WITHOUT_CLASSIFICATION	1.4766992000462114E-4	DESIGN
currently only the Hibernate-supplied DbTimestampType is supported here	WITHOUT_CLASSIFICATION	0.9985568378063504	WITHOUT_CLASSIFICATION	0.0014431621936495343	DESIGN
This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9928012059786888	WITHOUT_CLASSIFICATION	0.00719879402131109	DESIGN
make a new one	WITHOUT_CLASSIFICATION	0.9991923886859757	WITHOUT_CLASSIFICATION	8.076113140242658E-4	DESIGN
not so sure this is even valid subtree. but if it was, it'd represent two unrelated table references...	WITHOUT_CLASSIFICATION	0.9998763091878073	WITHOUT_CLASSIFICATION	1.2369081219254068E-4	DESIGN
(NOT (GT a b) ) => (LE a b)	WITHOUT_CLASSIFICATION	0.9994269291421992	WITHOUT_CLASSIFICATION	5.730708578008297E-4	DESIGN
private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9945922499892523	WITHOUT_CLASSIFICATION	0.005407750010747589	DESIGN
include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.998915796349135	WITHOUT_CLASSIFICATION	0.0010842036508651174	DESIGN
sqlResultTypes = selectClause.getSqlResultTypes();	WITHOUT_CLASSIFICATION	0.9996067502678262	WITHOUT_CLASSIFICATION	3.9324973217382545E-4	DESIGN
by default	WITHOUT_CLASSIFICATION	0.9997293281767398	WITHOUT_CLASSIFICATION	2.7067182326018696E-4	DESIGN
This is now handled earlier in this method.	WITHOUT_CLASSIFICATION	0.9962580575566529	WITHOUT_CLASSIFICATION	0.0037419424433471527	DESIGN
-- Loader implementation --	WITHOUT_CLASSIFICATION	0.9997169465818669	WITHOUT_CLASSIFICATION	2.8305341813296506E-4	DESIGN
-- Loader overrides --	WITHOUT_CLASSIFICATION	0.9997196893554159	WITHOUT_CLASSIFICATION	2.8031064458421183E-4	DESIGN
(NOT (IS_NULL a b) ) => (IS_NOT_NULL a b)	WITHOUT_CLASSIFICATION	0.9992716264776355	WITHOUT_CLASSIFICATION	7.283735223644387E-4	DESIGN
NONE, because its the requested lock mode, not the actual!	WITHOUT_CLASSIFICATION	0.9997135113976665	WITHOUT_CLASSIFICATION	2.8648860233343676E-4	DESIGN
meant to handle dynamic instantiation queries...	WITHOUT_CLASSIFICATION	0.9981497528297739	WITHOUT_CLASSIFICATION	0.0018502471702261292	DESIGN
--- Query translator methods ---	WITHOUT_CLASSIFICATION	0.999148559995659	WITHOUT_CLASSIFICATION	8.514400043410686E-4	DESIGN
-- Implementation private methods --	WITHOUT_CLASSIFICATION	0.993439030142361	WITHOUT_CLASSIFICATION	0.006560969857639005	DESIGN
deduplicate unique constraints sharing the same columns this is needed by Hibernate Annotations since it creates automagically unique constraints for the user	WITHOUT_CLASSIFICATION	0.9999731651528032	WITHOUT_CLASSIFICATION	2.683484719675761E-5	DESIGN
Try to find out the name of the primary key to create it as identity if the IdentityGenerator is used	WITHOUT_CLASSIFICATION	0.9765391929850634	WITHOUT_CLASSIFICATION	0.02346080701493659	DESIGN
to support dialects that have their own identity data type	WITHOUT_CLASSIFICATION	0.9714814219536705	WITHOUT_CLASSIFICATION	0.02851857804632955	DESIGN
Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9998004428357707	WITHOUT_CLASSIFICATION	1.995571642294092E-4	DESIGN
used also for generation of FK names!	WITHOUT_CLASSIFICATION	0.970335993893771	WITHOUT_CLASSIFICATION	0.029664006106228973	DESIGN
usually useless	WITHOUT_CLASSIFICATION	0.9997937075594072	WITHOUT_CLASSIFICATION	2.0629244059284894E-4	DESIGN
added this caching as I noticed that getType() is being called multiple times...	WITHOUT_CLASSIFICATION	0.9996435031672343	WITHOUT_CLASSIFICATION	3.564968327656385E-4	DESIGN
do not add unique constraint on DB not supporting unique and nullable columns	WITHOUT_CLASSIFICATION	0.9925963567904322	WITHOUT_CLASSIFICATION	0.007403643209567823	DESIGN
for backward compatibility, disable this:	WITHOUT_CLASSIFICATION	0.9999200504880831	WITHOUT_CLASSIFICATION	7.994951191697482E-5	DESIGN
may be final may be final may be final	WITHOUT_CLASSIFICATION	0.9994007936536576	WITHOUT_CLASSIFICATION	5.992063463423735E-4	DESIGN
may be final	WITHOUT_CLASSIFICATION	0.9998317393410758	WITHOUT_CLASSIFICATION	1.6826065892413722E-4	DESIGN
may be final	WITHOUT_CLASSIFICATION	0.9998317393410758	WITHOUT_CLASSIFICATION	1.6826065892413722E-4	DESIGN
Custom SQL	WITHOUT_CLASSIFICATION	0.998934135695455	WITHOUT_CLASSIFICATION	0.0010658643045450215	DESIGN
Primary key constraint	WITHOUT_CLASSIFICATION	0.999791117231619	WITHOUT_CLASSIFICATION	2.0888276838112343E-4	DESIGN
the root of the incoming property path matched one of the embedded composite identifier properties	WITHOUT_CLASSIFICATION	0.9999881780103699	WITHOUT_CLASSIFICATION	1.1821989630082254E-5	DESIGN
ignore it...	WITHOUT_CLASSIFICATION	0.998872201701686	WITHOUT_CLASSIFICATION	0.0011277982983140021	DESIGN
flat recursive algorithm	WITHOUT_CLASSIFICATION	0.9968031895198991	WITHOUT_CLASSIFICATION	0.0031968104801008445	DESIGN
an identifier mapper => getKey will be included in the getNonDuplicatedPropertyIterator() and checked later, so it needs to be excluded	WITHOUT_CLASSIFICATION	0.9997437620291143	WITHOUT_CLASSIFICATION	2.562379708857284E-4	DESIGN
if the hibernate-mapping did not specify a schema/catalog, use the defaults specified by properties - but note that if the schema/catalog were specified in hibernate-mapping, or as params, they will already be initialized and will override the values set here (they are in identifierGeneratorProperties)	WITHOUT_CLASSIFICATION	0.9996134488015873	WITHOUT_CLASSIFICATION	3.8655119841261203E-4	DESIGN
pass the entity-name, if not a collection-id	WITHOUT_CLASSIFICATION	0.9994843033866782	WITHOUT_CLASSIFICATION	5.15696613321899E-4	DESIGN
Custom SQL	WITHOUT_CLASSIFICATION	0.998934135695455	WITHOUT_CLASSIFICATION	0.0010658643045450215	DESIGN
Primary key constraint	WITHOUT_CLASSIFICATION	0.999791117231619	WITHOUT_CLASSIFICATION	2.0888276838112343E-4	DESIGN
pass the column name (a generated id almost always has a single column)	WITHOUT_CLASSIFICATION	0.9995465819790377	WITHOUT_CLASSIFICATION	4.534180209624084E-4	DESIGN
needed to satisfy KeyValue	WITHOUT_CLASSIFICATION	0.9993704593358025	WITHOUT_CLASSIFICATION	6.295406641975492E-4	DESIGN
empty means no scoping	WITHOUT_CLASSIFICATION	0.9997922223382814	WITHOUT_CLASSIFICATION	2.0777766171866679E-4	DESIGN
index should be last column listed	WITHOUT_CLASSIFICATION	0.9986797297708795	WITHOUT_CLASSIFICATION	0.0013202702291204736	DESIGN
if it is a formula index, use the element columns in the PK	WITHOUT_CLASSIFICATION	0.99889601023707	WITHOUT_CLASSIFICATION	0.0011039897629299897	DESIGN
don't create a unique key, 'cos some databases don't like a UK on nullable columns	WITHOUT_CLASSIFICATION	0.9915397664565229	WITHOUT_CLASSIFICATION	0.008460233543477164	DESIGN
ArrayList list = new ArrayList();list.addAll( getKey().getConstraintColumns() );list.addAll( getIndex().getConstraintColumns() );getCollectionTable().createUniqueKey(list);	WITHOUT_CLASSIFICATION	0.9998645963251617	WITHOUT_CLASSIFICATION	1.3540367483840196E-4	DESIGN
}	WITHOUT_CLASSIFICATION	0.9989524860823941	WITHOUT_CLASSIFICATION	0.001047513917605972	DESIGN
no foreign key element of for a one-to-many	WITHOUT_CLASSIFICATION	0.999423641163758	WITHOUT_CLASSIFICATION	5.763588362420578E-4	DESIGN
TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9228158692575978	DESIGN	0.07718413074240221	WITHOUT_CLASSIFICATION
the case of a foreign key to something other than the pk is handled in createPropertyRefConstraints	WITHOUT_CLASSIFICATION	0.9999490465452936	WITHOUT_CLASSIFICATION	5.0953454706451384E-5	DESIGN
TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9228158692575978	DESIGN	0.07718413074240221	WITHOUT_CLASSIFICATION
if the property mapping consists of all formulas, make it non-updateable	WITHOUT_CLASSIFICATION	0.9998281271920668	WITHOUT_CLASSIFICATION	1.7187280793319856E-4	DESIGN
columnUpdateability.length==0 ||	WITHOUT_CLASSIFICATION	0.9994971709126775	WITHOUT_CLASSIFICATION	5.028290873223845E-4	DESIGN
if the property mapping consists of all formulas, make it insertable	WITHOUT_CLASSIFICATION	0.9998281271920668	WITHOUT_CLASSIFICATION	1.7187280793319856E-4	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99958121736608	WITHOUT_CLASSIFICATION	4.1878263392003666E-4	DESIGN
expected type is intrinsic here...	WITHOUT_CLASSIFICATION	0.9987320044062773	WITHOUT_CLASSIFICATION	0.00126799559372277	DESIGN
}	WITHOUT_CLASSIFICATION	0.9989524860823941	WITHOUT_CLASSIFICATION	0.001047513917605972	DESIGN
}	WITHOUT_CLASSIFICATION	0.9989524860823941	WITHOUT_CLASSIFICATION	0.001047513917605972	DESIGN
return memberPersister.getPropertyType(propertyName);	WITHOUT_CLASSIFICATION	0.999293802461369	WITHOUT_CLASSIFICATION	7.061975386310989E-4	DESIGN
return memberPersister.toColumns(alias, propertyName);	WITHOUT_CLASSIFICATION	0.9992969101485942	WITHOUT_CLASSIFICATION	7.030898514058705E-4	DESIGN
return memberPersister.getType();	WITHOUT_CLASSIFICATION	0.999293802461369	WITHOUT_CLASSIFICATION	7.061975386310989E-4	DESIGN
&& !indexIsFormula	WITHOUT_CLASSIFICATION	0.9998140959628894	WITHOUT_CLASSIFICATION	1.8590403711060054E-4	DESIGN
return !isOneToMany();	WITHOUT_CLASSIFICATION	0.9994443794263962	WITHOUT_CLASSIFICATION	5.556205736038915E-4	DESIGN
instanceof AssociationType;	WITHOUT_CLASSIFICATION	0.9993924880395101	WITHOUT_CLASSIFICATION	6.075119604899601E-4	DESIGN
we need to determine the best way to know that two joinables represent a single many-to-many...	WITHOUT_CLASSIFICATION	0.9596888945334127	WITHOUT_CLASSIFICATION	0.04031110546658735	DESIGN
strip leading ','	WITHOUT_CLASSIFICATION	0.9998908301040139	WITHOUT_CLASSIFICATION	1.0916989598613131E-4	DESIGN
public boolean isSubselectLoadable();	WITHOUT_CLASSIFICATION	0.9994940389062651	WITHOUT_CLASSIFICATION	5.059610937349528E-4	DESIGN
KEY	WITHOUT_CLASSIFICATION	0.9991337539224657	WITHOUT_CLASSIFICATION	8.662460775343205E-4	DESIGN
columns	WITHOUT_CLASSIFICATION	0.9993953424513642	WITHOUT_CLASSIFICATION	6.046575486357601E-4	DESIGN
SQL statements	WITHOUT_CLASSIFICATION	0.9998192731054069	WITHOUT_CLASSIFICATION	1.8072689459315214E-4	DESIGN
extra information about the element type	WITHOUT_CLASSIFICATION	0.9842059012892856	WITHOUT_CLASSIFICATION	0.015794098710714362	DESIGN
types	WITHOUT_CLASSIFICATION	0.9991828047256163	WITHOUT_CLASSIFICATION	8.17195274383672E-4	DESIGN
custom sql	WITHOUT_CLASSIFICATION	0.9992368428286503	WITHOUT_CLASSIFICATION	7.631571713497654E-4	DESIGN
private final String unquotedIdentifierColumnName;	WITHOUT_CLASSIFICATION	0.995676577534939	WITHOUT_CLASSIFICATION	0.004323422465060996	DESIGN
dynamic filters specifically for many-to-many inside the collection	WITHOUT_CLASSIFICATION	0.9970953242131266	WITHOUT_CLASSIFICATION	0.0029046757868733787	DESIGN
dynamic filters for the collection	WITHOUT_CLASSIFICATION	0.9984911520591723	WITHOUT_CLASSIFICATION	0.0015088479408276968	DESIGN
NativeSQL: collect key column and auto-aliases	WITHOUT_CLASSIFICATION	0.9998890560056443	WITHOUT_CLASSIFICATION	1.1094399435576334E-4	DESIGN
unquotedKeyColumnNames = StringHelper.unQuote(keyColumnAliases);	WITHOUT_CLASSIFICATION	0.9996067502678262	WITHOUT_CLASSIFICATION	3.9324973217382545E-4	DESIGN
ELEMENT	WITHOUT_CLASSIFICATION	0.9991288176721137	WITHOUT_CLASSIFICATION	8.711823278862698E-4	DESIGN
NativeSQL: collect element column and auto-aliases	WITHOUT_CLASSIFICATION	0.9994055053367755	WITHOUT_CLASSIFICATION	5.944946632244996E-4	DESIGN
INDEX AND ROW SELECT	WITHOUT_CLASSIFICATION	0.9998275968347712	WITHOUT_CLASSIFICATION	1.724031652287464E-4	DESIGN
NativeSQL: collect index column and auto-aliases	WITHOUT_CLASSIFICATION	0.9998267653308663	WITHOUT_CLASSIFICATION	1.7323466913374082E-4	DESIGN
unquotedIdentifierColumnName = identifierColumnAlias;	WITHOUT_CLASSIFICATION	0.9996067502678262	WITHOUT_CLASSIFICATION	3.9324973217382545E-4	DESIGN
unquotedIdentifierColumnName = null;	WITHOUT_CLASSIFICATION	0.998875796619074	WITHOUT_CLASSIFICATION	0.001124203380926075	DESIGN
GENERATE THE SQL:	WITHOUT_CLASSIFICATION	0.9998203108793133	WITHOUT_CLASSIFICATION	1.7968912068674195E-4	DESIGN
for non-arrays, we don't need to know the element class elementType.returnedClass();	WITHOUT_CLASSIFICATION	0.9903131219181565	WITHOUT_CLASSIFICATION	0.009686878081843564	DESIGN
not all classpersisters implement PropertyMapping!	WITHOUT_CLASSIFICATION	0.9838647347643922	WITHOUT_CLASSIFICATION	0.01613526523560778	DESIGN
Handle any filters applied to this collection	WITHOUT_CLASSIFICATION	0.9776273123722807	WITHOUT_CLASSIFICATION	0.02237268762771924	DESIGN
Handle any filters applied to this collection for many-to-many	WITHOUT_CLASSIFICATION	0.9743624281431421	WITHOUT_CLASSIFICATION	0.025637571856857853	DESIGN
if there is a user-specified loader, return that TODO: filters!?	WITHOUT_CLASSIFICATION	0.6671554678310848	WITHOUT_CLASSIFICATION	0.3328445321689153	DESIGN
Take care of any entities that might have been evicted!	WITHOUT_CLASSIFICATION	0.9942976955962433	WITHOUT_CLASSIFICATION	0.005702304403756699	DESIGN
strip leading ','	WITHOUT_CLASSIFICATION	0.9998908301040139	WITHOUT_CLASSIFICATION	1.0916989598613131E-4	DESIGN
Run a subquery loader	WITHOUT_CLASSIFICATION	0.9991373493395607	WITHOUT_CLASSIFICATION	8.626506604393918E-4	DESIGN
needed by arrays	WITHOUT_CLASSIFICATION	0.9999030220364302	WITHOUT_CLASSIFICATION	9.697796356975712E-5	DESIGN
TODO: something with formulas...	WITHOUT_CLASSIFICATION	0.8152222500303252	WITHOUT_CLASSIFICATION	0.18477774996967472	DESIGN
an assertion	WITHOUT_CLASSIFICATION	0.999885940385927	WITHOUT_CLASSIFICATION	1.1405961407289579E-4	DESIGN
Remove all the old entries	WITHOUT_CLASSIFICATION	0.999508967857988	WITHOUT_CLASSIFICATION	4.910321420120412E-4	DESIGN
create all the new entries	WITHOUT_CLASSIFICATION	0.9998667308214044	WITHOUT_CLASSIFICATION	1.3326917859564802E-4	DESIGN
&& !indexIsFormula	WITHOUT_CLASSIFICATION	0.9998140959628894	WITHOUT_CLASSIFICATION	1.8590403711060054E-4	DESIGN
&& !indexIsFormula	WITHOUT_CLASSIFICATION	0.9998140959628894	WITHOUT_CLASSIFICATION	1.8590403711060054E-4	DESIGN
delete all the deleted entries	WITHOUT_CLASSIFICATION	0.9996825709315125	WITHOUT_CLASSIFICATION	3.174290684874537E-4	DESIGN
insert all the new entries	WITHOUT_CLASSIFICATION	0.9998965451101989	WITHOUT_CLASSIFICATION	1.0345488980106497E-4	DESIGN
==elementType ??	WITHOUT_CLASSIFICATION	0.9999879709811932	WITHOUT_CLASSIFICATION	1.2029018806860328E-5	DESIGN
update all the modified entries	WITHOUT_CLASSIFICATION	0.9999934251414238	WITHOUT_CLASSIFICATION	6.574858576254452E-6	DESIGN
identifier collections not supported for 1-to-many	WITHOUT_CLASSIFICATION	0.9987921863093885	WITHOUT_CLASSIFICATION	0.001207813690611484	DESIGN
update removed rows fks to null	WITHOUT_CLASSIFICATION	0.9992305734690777	WITHOUT_CLASSIFICATION	7.694265309222842E-4	DESIGN
will still be issued when it used to be null	WITHOUT_CLASSIFICATION	0.5805333457494798	DESIGN	0.41946665425052015	WITHOUT_CLASSIFICATION
now update all changed or added rows fks	WITHOUT_CLASSIFICATION	0.9999977057101702	WITHOUT_CLASSIFICATION	2.294289829696031E-6	DESIGN
buf.append( selectFragment( lhsAlias, "" ) )ignore suffix for collection columns!	WITHOUT_CLASSIFICATION	0.9875700400476729	WITHOUT_CLASSIFICATION	0.012429959952327067	DESIGN
use suffix for the entity columns	WITHOUT_CLASSIFICATION	0.999387672827016	WITHOUT_CLASSIFICATION	6.123271729840356E-4	DESIGN
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9997890543766288	WITHOUT_CLASSIFICATION	2.1094562337127456E-4	DESIGN
private final String rootTableName;	WITHOUT_CLASSIFICATION	0.995676577534939	WITHOUT_CLASSIFICATION	0.004323422465060996	DESIGN
INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9998192731054069	WITHOUT_CLASSIFICATION	1.8072689459315214E-4	DESIGN
Custom SQL	WITHOUT_CLASSIFICATION	0.998934135695455	WITHOUT_CLASSIFICATION	0.0010658643045450215	DESIGN
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9997890543766288	WITHOUT_CLASSIFICATION	2.1094562337127456E-4	DESIGN
Execute the SQL:	WITHOUT_CLASSIFICATION	0.9998322182289174	WITHOUT_CLASSIFICATION	1.677817710826395E-4	DESIGN
This could also just be true all the time...	WITHOUT_CLASSIFICATION	0.9883333593118508	WITHOUT_CLASSIFICATION	0.011666640688149188	DESIGN
chop the last union (all)	WITHOUT_CLASSIFICATION	0.9997996841087258	WITHOUT_CLASSIFICATION	2.003158912742285E-4	DESIGN
TODO: check this....	WITHOUT_CLASSIFICATION	0.8922072222439937	WITHOUT_CLASSIFICATION	0.10779277775600621	DESIGN
INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9998192731054069	WITHOUT_CLASSIFICATION	1.8072689459315214E-4	DESIGN
properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9994227620352523	WITHOUT_CLASSIFICATION	5.772379647477725E-4	DESIGN
the closure of all properties in the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9984432396880428	WITHOUT_CLASSIFICATION	0.0015567603119571495	DESIGN
the closure of all columns used by the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.8518446113259746	WITHOUT_CLASSIFICATION	0.1481553886740255	DESIGN
subclass discrimination works by assigning particular values to certain combinations of null primary key values in the outer join using an SQL CASE	WITHOUT_CLASSIFICATION	0.999941155476688	WITHOUT_CLASSIFICATION	5.884452331200754E-5	DESIGN
MULTITABLES	WITHOUT_CLASSIFICATION	0.9998192731054069	WITHOUT_CLASSIFICATION	1.8072689459315214E-4	DESIGN
Custom sql	WITHOUT_CLASSIFICATION	0.998934135695455	WITHOUT_CLASSIFICATION	0.0010658643045450215	DESIGN
subclass closure properties	WITHOUT_CLASSIFICATION	0.9996250063365326	WITHOUT_CLASSIFICATION	3.749936634673449E-4	DESIGN
SUBCLASSES	WITHOUT_CLASSIFICATION	0.9991288176721137	WITHOUT_CLASSIFICATION	8.711823278862698E-4	DESIGN
( (Column) model.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9994356187070618	WITHOUT_CLASSIFICATION	5.643812929381081E-4	DESIGN
( (Column) sc.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9994356187070618	WITHOUT_CLASSIFICATION	5.643812929381081E-4	DESIGN
don't need subclass tables, because they can't appear in conditions	WITHOUT_CLASSIFICATION	0.9682207411466197	WITHOUT_CLASSIFICATION	0.03177925885338028	DESIGN
special case where we need to force incloude all subclass joins	WITHOUT_CLASSIFICATION	0.9965452505593021	WITHOUT_CLASSIFICATION	0.0034547494406980007	DESIGN
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9997890543766288	WITHOUT_CLASSIFICATION	2.1094562337127456E-4	DESIGN
properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9994227620352523	WITHOUT_CLASSIFICATION	5.772379647477725E-4	DESIGN
the closure of all columns used by the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.8518446113259746	WITHOUT_CLASSIFICATION	0.1481553886740255	DESIGN
get em on the second pass!	WITHOUT_CLASSIFICATION	0.9996079153352592	WITHOUT_CLASSIFICATION	3.920846647408156E-4	DESIGN
now look up the object we are really interested in! (this lets us correctly handle proxies and multi-row or multi-column queries)	WITHOUT_CLASSIFICATION	0.9997198212994028	WITHOUT_CLASSIFICATION	2.801787005971581E-4	DESIGN
discriminator column	WITHOUT_CLASSIFICATION	0.9998923619623025	WITHOUT_CLASSIFICATION	1.076380376975606E-4	DESIGN
INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9998192731054069	WITHOUT_CLASSIFICATION	1.8072689459315214E-4	DESIGN
private final Map propertyTableNumbersByName = new HashMap();	WITHOUT_CLASSIFICATION	0.9983526960097757	WITHOUT_CLASSIFICATION	0.001647303990224339	DESIGN
CLASS + TABLE	WITHOUT_CLASSIFICATION	0.9999451986743562	WITHOUT_CLASSIFICATION	5.480132564387382E-5	DESIGN
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9998192731054069	WITHOUT_CLASSIFICATION	1.8072689459315214E-4	DESIGN
PROPERTIES	WITHOUT_CLASSIFICATION	0.9991315044382222	WITHOUT_CLASSIFICATION	8.684955617778119E-4	DESIGN
SUBCLASSES	WITHOUT_CLASSIFICATION	0.9991288176721137	WITHOUT_CLASSIFICATION	8.711823278862698E-4	DESIGN
Execute the SQL:	WITHOUT_CLASSIFICATION	0.9998322182289174	WITHOUT_CLASSIFICATION	1.677817710826395E-4	DESIGN
JOINS	WITHOUT_CLASSIFICATION	0.9991288176721137	WITHOUT_CLASSIFICATION	8.711823278862698E-4	DESIGN
propertyTableNumbersByName.put( prop.getName(), join );	WITHOUT_CLASSIFICATION	0.9994416271631439	WITHOUT_CLASSIFICATION	5.583728368561105E-4	DESIGN
Access cached SQL	WITHOUT_CLASSIFICATION	0.9998743644702888	WITHOUT_CLASSIFICATION	1.2563552971129433E-4	DESIGN
figure out which tables need to be fetched	WITHOUT_CLASSIFICATION	0.9977834087872453	WITHOUT_CLASSIFICATION	0.0022165912127547773	DESIGN
figure out which columns are needed	WITHOUT_CLASSIFICATION	0.9998342754908098	WITHOUT_CLASSIFICATION	1.6572450919010988E-4	DESIGN
figure out which formulas are needed	WITHOUT_CLASSIFICATION	0.9997611801595165	WITHOUT_CLASSIFICATION	2.388198404836005E-4	DESIGN
render the SQL	WITHOUT_CLASSIFICATION	0.9997001876999192	WITHOUT_CLASSIFICATION	2.9981230008079555E-4	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99958121736608	WITHOUT_CLASSIFICATION	4.1878263392003666E-4	DESIGN
moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9962589449221025	WITHOUT_CLASSIFICATION	0.0037410550778975912	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999356419707268	WITHOUT_CLASSIFICATION	6.435802927320741E-4	DESIGN
The optional SQL string defined in the where attribute	WITHOUT_CLASSIFICATION	0.9999919657635222	WITHOUT_CLASSIFICATION	8.034236477748985E-6	DESIGN
information about lazy properties of this class	WITHOUT_CLASSIFICATION	0.9989636634094995	WITHOUT_CLASSIFICATION	0.001036336590500452	DESIGN
information about all properties in class hierarchy	WITHOUT_CLASSIFICATION	0.9996700141884955	WITHOUT_CLASSIFICATION	3.2998581150444186E-4	DESIGN
information about all columns/formulas in class hierarchy	WITHOUT_CLASSIFICATION	0.9991543741396781	WITHOUT_CLASSIFICATION	8.456258603219206E-4	DESIGN
dynamic filters attached to the class-level	WITHOUT_CLASSIFICATION	0.9994310247474609	WITHOUT_CLASSIFICATION	5.689752525390208E-4	DESIGN
SQL strings	WITHOUT_CLASSIFICATION	0.9996827341210969	WITHOUT_CLASSIFICATION	3.1726587890310563E-4	DESIGN
for objects that came in via update()	WITHOUT_CLASSIFICATION	0.9998764820797934	WITHOUT_CLASSIFICATION	1.2351792020665872E-4	DESIGN
PROPERTIES	WITHOUT_CLASSIFICATION	0.9991315044382222	WITHOUT_CLASSIFICATION	8.684955617778119E-4	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999356419707268	WITHOUT_CLASSIFICATION	6.435802927320741E-4	DESIGN
IDENTIFIER	WITHOUT_CLASSIFICATION	0.9991288176721137	WITHOUT_CLASSIFICATION	8.711823278862698E-4	DESIGN
VERSION	WITHOUT_CLASSIFICATION	0.9991288176721137	WITHOUT_CLASSIFICATION	8.711823278862698E-4	DESIGN
WHERE STRING	WITHOUT_CLASSIFICATION	0.9998192731054069	WITHOUT_CLASSIFICATION	1.8072689459315214E-4	DESIGN
SUBCLASS PROPERTY CLOSURE	WITHOUT_CLASSIFICATION	0.9994985344877528	WITHOUT_CLASSIFICATION	5.014655122470678E-4	DESIGN
before add :-)	WITHOUT_CLASSIFICATION	0.9998098300861693	WITHOUT_CLASSIFICATION	1.9016991383070036E-4	DESIGN
Handle any filters applied to the class level	WITHOUT_CLASSIFICATION	0.9983260109465824	WITHOUT_CLASSIFICATION	0.001673989053417623	DESIGN
only one-to-one is lazy fetched	WITHOUT_CLASSIFICATION	0.9998107770604807	WITHOUT_CLASSIFICATION	1.8922293951925776E-4	DESIGN
note early exit here:	WITHOUT_CLASSIFICATION	0.9988425860712254	WITHOUT_CLASSIFICATION	0.001157413928774534	DESIGN
object have been loaded with setReadOnly(true); HHH-2236	WITHOUT_CLASSIFICATION	0.999829222437238	WITHOUT_CLASSIFICATION	1.707775627619831E-4	DESIGN
NOTE: this assumes something about how propertySelectFragment is implemented by the subclass!	WITHOUT_CLASSIFICATION	0.9999873454038467	WITHOUT_CLASSIFICATION	1.2654596153441475E-5	DESIGN
strip leading ", "	WITHOUT_CLASSIFICATION	0.9999163929204835	WITHOUT_CLASSIFICATION	8.36070795164848E-5	DESIGN
if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9998115561051987	WITHOUT_CLASSIFICATION	1.8844389480137262E-4	DESIGN
otherwise return the "hydrated" state (ie. associations are not resolved)	WITHOUT_CLASSIFICATION	0.9981566005637545	WITHOUT_CLASSIFICATION	0.0018433994362455244	DESIGN
null owner ok??	WITHOUT_CLASSIFICATION	0.9998555519013329	WITHOUT_CLASSIFICATION	1.4444809866712556E-4	DESIGN
null sql means that the only lazy properties are shared PK one-to-one associations which are handled differently in the Type#nullSafeGet code...	WITHOUT_CLASSIFICATION	0.9999234486041082	WITHOUT_CLASSIFICATION	7.655139589177899E-5	DESIGN
Create a new FROM node for the referenced class.	WITHOUT_CLASSIFICATION	0.9994821193844415	WITHOUT_CLASSIFICATION	5.17880615558453E-4	DESIGN
the difficulty here is exactly what do we update in order to force the version to be incremented in the db...	WITHOUT_CLASSIFICATION	0.9490252256792723	WITHOUT_CLASSIFICATION	0.050974774320727716	DESIGN
performance op to avoid the array search	WITHOUT_CLASSIFICATION	0.9958545389943173	WITHOUT_CLASSIFICATION	0.004145461005682694	DESIGN
properly handle property-ref-based associations	WITHOUT_CLASSIFICATION	0.9986596565315439	WITHOUT_CLASSIFICATION	0.0013403434684561878	DESIGN
Enable for HHH-440, which we don't like:	WITHOUT_CLASSIFICATION	0.9997390513520578	WITHOUT_CLASSIFICATION	2.609486479421917E-4	DESIGN
ALIASES	WITHOUT_CLASSIFICATION	0.9991288176721137	WITHOUT_CLASSIFICATION	8.711823278862698E-4	DESIGN
aliases named identifier ( alias.idname )	WITHOUT_CLASSIFICATION	0.9990039254165134	WITHOUT_CLASSIFICATION	9.960745834865993E-4	DESIGN
aliases for composite-id's	WITHOUT_CLASSIFICATION	0.999529787236133	WITHOUT_CLASSIFICATION	4.702127638670168E-4	DESIGN
Fetch embedded identifiers propertynames from the "virtual" identifier component	WITHOUT_CLASSIFICATION	0.9998324619793317	WITHOUT_CLASSIFICATION	1.6753802066818999E-4	DESIGN
embedded composite ids ( alias.idname1, alias.idname2 )	WITHOUT_CLASSIFICATION	0.9986584720374556	WITHOUT_CLASSIFICATION	0.0013415279625442747	DESIGN
TODO: skip formulas?	WITHOUT_CLASSIFICATION	0.6300593360797007	WITHOUT_CLASSIFICATION	0.3699406639202994	DESIGN
don't need filters for the static loaders	WITHOUT_CLASSIFICATION	0.9989114901389287	WITHOUT_CLASSIFICATION	0.0010885098610713604	DESIGN
do two passes, for collection property-ref!	WITHOUT_CLASSIFICATION	0.9979726863769438	WITHOUT_CLASSIFICATION	0.0020273136230562704	DESIGN
select the correct row by either pk or rowid	WITHOUT_CLASSIFICATION	0.9997270368956691	WITHOUT_CLASSIFICATION	2.7296310433093423E-4	DESIGN
TODO: eventually, rowIdName[j]	WITHOUT_CLASSIFICATION	0.553650115562719	WITHOUT_CLASSIFICATION	0.4463498844372811	DESIGN
this is a property of the table, which we are updating	WITHOUT_CLASSIFICATION	0.9996910939630297	WITHOUT_CLASSIFICATION	3.08906036970389E-4	DESIGN
special shortcut for id properties, skip the join! this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.999507288948448	WITHOUT_CLASSIFICATION	4.927110515519847E-4	DESIGN
we are using "all" or "dirty" property-based optimistic locking	WITHOUT_CLASSIFICATION	0.9996632428827004	WITHOUT_CLASSIFICATION	3.367571172996603E-4	DESIGN
nothing to do; even if the operand is a parameter, no way we could infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9448765924780491	WITHOUT_CLASSIFICATION	0.055123407521951016	DESIGN
this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9958264941324421	WITHOUT_CLASSIFICATION	0.004173505867557982	DESIGN
add normal properties	WITHOUT_CLASSIFICATION	0.9997179909295313	WITHOUT_CLASSIFICATION	2.820090704686746E-4	DESIGN
add the discriminator	WITHOUT_CLASSIFICATION	0.9995518630089577	WITHOUT_CLASSIFICATION	4.4813699104219505E-4	DESIGN
more specifically : "? [op] datetime" 1) if the operator is MINUS, the param needs to be of some datetime type 2) if the operator is PLUS, the param needs to be of some numeric type	WITHOUT_CLASSIFICATION	0.8760308002281894	WITHOUT_CLASSIFICATION	0.12396919977181074	DESIGN
add normal properties	WITHOUT_CLASSIFICATION	0.9997179909295313	WITHOUT_CLASSIFICATION	2.820090704686746E-4	DESIGN
this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9958264941324421	WITHOUT_CLASSIFICATION	0.004173505867557982	DESIGN
add the discriminator	WITHOUT_CLASSIFICATION	0.9995518630089577	WITHOUT_CLASSIFICATION	4.4813699104219505E-4	DESIGN
add the primary key	WITHOUT_CLASSIFICATION	0.9999418515261284	WITHOUT_CLASSIFICATION	5.814847387165178E-5	DESIGN
delegate already handles PK columns	WITHOUT_CLASSIFICATION	0.9998425858956991	WITHOUT_CLASSIFICATION	1.5741410430079812E-4	DESIGN
we can't batch joined inserts, especially not if it is an identity insert; nor can we batch statements where the expectation is based on an output param	WITHOUT_CLASSIFICATION	0.9996068552913878	WITHOUT_CLASSIFICATION	3.931447086122285E-4	DESIGN
Render the SQL query	WITHOUT_CLASSIFICATION	0.9998486580200732	WITHOUT_CLASSIFICATION	1.5134197992687187E-4	DESIGN
Write the values of fields onto the prepared statement - we MUST use the state at the time the insert was issued (cos of foreign key constraints). Not necessarily the object's current state	WITHOUT_CLASSIFICATION	0.999970195253536	WITHOUT_CLASSIFICATION	2.980474646403572E-5	DESIGN
TODO : shouldnt inserts be Expectations.NONE?	WITHOUT_CLASSIFICATION	0.861778528088914	DESIGN	0.13822147191108602	WITHOUT_CLASSIFICATION
don't bother trying to update, we know there is no row there yet	WITHOUT_CLASSIFICATION	0.9980783394335446	WITHOUT_CLASSIFICATION	0.0019216605664554194	DESIGN
if all fields are null, we might need to delete existing row	WITHOUT_CLASSIFICATION	0.9945070754782844	WITHOUT_CLASSIFICATION	0.005492924521715633	DESIGN
there is probably a row there, so try to update if no rows were updated, we will find out	WITHOUT_CLASSIFICATION	0.9999877835160312	WITHOUT_CLASSIFICATION	1.2216483968649286E-5	DESIGN
note: updates to joined tables can't be batched...	WITHOUT_CLASSIFICATION	0.9992201241152452	WITHOUT_CLASSIFICATION	7.79875884754734E-4	DESIGN
starting index	WITHOUT_CLASSIFICATION	0.9998874215886813	WITHOUT_CLASSIFICATION	1.1257841131877119E-4	DESIGN
Now write the values of fields onto the prepared statement	WITHOUT_CLASSIFICATION	0.9999873963427475	WITHOUT_CLASSIFICATION	1.2603657252437453E-5	DESIGN
Write any appropriate versioning conditional parameters	WITHOUT_CLASSIFICATION	0.9992691402971238	WITHOUT_CLASSIFICATION	7.308597028763098E-4	DESIGN
Render the SQL query	WITHOUT_CLASSIFICATION	0.9998486580200732	WITHOUT_CLASSIFICATION	1.5134197992687187E-4	DESIGN
Do the key. The key is immutable so we can use the _current_ object state - not necessarily the state at the time the delete was issued	WITHOUT_CLASSIFICATION	0.9999175050333893	WITHOUT_CLASSIFICATION	8.249496661064118E-5	DESIGN
We should use the _current_ object state (ie. after any updates that occurred during flush)	WITHOUT_CLASSIFICATION	0.9978474573357964	WITHOUT_CLASSIFICATION	0.0021525426642036403	DESIGN
this property belongs to the table and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9977133624775847	WITHOUT_CLASSIFICATION	0.0022866375224152636	DESIGN
note: dirtyFields==null means we had no snapshot, and we couldn't get one using select-before-update oldFields==null just means we had no snapshot to begin with (we might have used select-before-update to get the dirtyFields)	WITHOUT_CLASSIFICATION	0.9088730428400965	WITHOUT_CLASSIFICATION	0.09112695715990349	DESIGN
more specifically : "datetime [op] ?" 1) if the operator is MINUS, we really cannot determine the expected type as either another datetime or numeric would be valid 2) if the operator is PLUS, the param needs to be of some numeric type	WITHOUT_CLASSIFICATION	0.9946324969608499	WITHOUT_CLASSIFICATION	0.005367503039150123	DESIGN
For the case of dynamic-update="true", we need to generate the UPDATE SQL	WITHOUT_CLASSIFICATION	0.9999036456149644	WITHOUT_CLASSIFICATION	9.63543850356873E-5	DESIGN
don't need to check laziness (dirty checking algorithm handles that)	WITHOUT_CLASSIFICATION	0.9936736361800352	WITHOUT_CLASSIFICATION	0.00632636381996471	DESIGN
For the case of dynamic-update="false", or no snapshot, we use the static SQL	WITHOUT_CLASSIFICATION	0.9999918225695316	WITHOUT_CLASSIFICATION	8.177430468417424E-6	DESIGN
if not "get", then try "is"	WITHOUT_CLASSIFICATION	0.9997155963977157	WITHOUT_CLASSIFICATION	2.844036022843106E-4	DESIGN
Now update only the tables with dirty properties (and the table with the version number)	WITHOUT_CLASSIFICATION	0.9999866929274076	WITHOUT_CLASSIFICATION	1.3307072592537472E-5	DESIGN
For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999036456149644	WITHOUT_CLASSIFICATION	9.63543850356873E-5	DESIGN
For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999036456149644	WITHOUT_CLASSIFICATION	9.63543850356873E-5	DESIGN
For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999888230710212	WITHOUT_CLASSIFICATION	1.1176928978753675E-5	DESIGN
For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999888230710212	WITHOUT_CLASSIFICATION	1.1176928978753675E-5	DESIGN
not supported	WITHOUT_CLASSIFICATION	0.9996995221116731	WITHOUT_CLASSIFICATION	3.00477888326823E-4	DESIGN
this property belongs to the table and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9977133624775847	WITHOUT_CLASSIFICATION	0.0022866375224152636	DESIGN
we need to utilize dynamic delete statements	WITHOUT_CLASSIFICATION	0.993609647103508	WITHOUT_CLASSIFICATION	0.00639035289649202	DESIGN
otherwise, utilize the static delete statements	WITHOUT_CLASSIFICATION	0.9998219599754016	WITHOUT_CLASSIFICATION	1.780400245983391E-4	DESIGN
just a performance opt!	WITHOUT_CLASSIFICATION	0.9939274092278385	WITHOUT_CLASSIFICATION	0.00607259077216151	DESIGN
just a performance opt!	WITHOUT_CLASSIFICATION	0.9939274092278385	WITHOUT_CLASSIFICATION	0.00607259077216151	DESIGN
all joins join to the pk of the driving table	WITHOUT_CLASSIFICATION	0.9998461620099733	WITHOUT_CLASSIFICATION	1.5383799002664553E-4	DESIGN
notice that we skip the first table; it is the driving table!	WITHOUT_CLASSIFICATION	0.9988962629939488	WITHOUT_CLASSIFICATION	0.0011037370060511032	DESIGN
we can inner join to superclass tables (the row MUST be there) we can never inner join to subclass tables	WITHOUT_CLASSIFICATION	0.999809257327536	WITHOUT_CLASSIFICATION	1.907426724640687E-4	DESIGN
skip the driving table	WITHOUT_CLASSIFICATION	0.9996653280208897	WITHOUT_CLASSIFICATION	3.3467197911031364E-4	DESIGN
get 'em in the right order (not that it really matters)	WITHOUT_CLASSIFICATION	0.8610512881617516	WITHOUT_CLASSIFICATION	0.13894871183824847	DESIGN
here, we work under the following assumptions: ------------ valid cases -------------------------------------- 1) datetime + {something other than datetime} : always results in a datetime ( db will catch invalid conversions ) 2) datetime - datetime : always results in a DOUBLE 3) datetime - {something other than datetime} : always results in a datetime ( db will catch invalid conversions ) ------------ invalid cases ------------------------------------ 4) datetime + datetime 5) {something other than datetime} - datetime 6) datetime {any type} 7) datetime / {any type} 8) {any type} / datetime doing so allows us to properly handle parameters as either the left or right side here in the majority of cases	WITHOUT_CLASSIFICATION	0.9999951913082518	WITHOUT_CLASSIFICATION	4.808691748286898E-6	DESIGN
render the where and from parts	WITHOUT_CLASSIFICATION	0.9990337863981109	WITHOUT_CLASSIFICATION	9.66213601889177E-4	DESIGN
we could regerate this inside each called method!	WITHOUT_CLASSIFICATION	0.9472911280873443	WITHOUT_CLASSIFICATION	0.05270887191265577	DESIGN
now render the joins	WITHOUT_CLASSIFICATION	0.999844725086753	WITHOUT_CLASSIFICATION	1.5527491324697214E-4	DESIGN
This will add the new from element to the origin.	WITHOUT_CLASSIFICATION	0.9961717938130092	WITHOUT_CLASSIFICATION	0.003828206186990751	DESIGN
now render the select clause	WITHOUT_CLASSIFICATION	0.9996241131233851	WITHOUT_CLASSIFICATION	3.758868766149906E-4	DESIGN
now tie it all together	WITHOUT_CLASSIFICATION	0.9998729260927128	WITHOUT_CLASSIFICATION	1.2707390728720436E-4	DESIGN
insert/update/delete SQL	WITHOUT_CLASSIFICATION	0.9994936520530547	WITHOUT_CLASSIFICATION	5.063479469452313E-4	DESIGN
select SQL	WITHOUT_CLASSIFICATION	0.9991731668189647	WITHOUT_CLASSIFICATION	8.268331810352093E-4	DESIGN
no need to check laziness, dirty checking handles that	WITHOUT_CLASSIFICATION	0.9991232463312464	WITHOUT_CLASSIFICATION	8.767536687537001E-4	DESIGN
Fully resolve the map reference, create implicit joins.	WITHOUT_CLASSIFICATION	0.9993455735406925	WITHOUT_CLASSIFICATION	6.544264593074173E-4	DESIGN
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9865242412900427	WITHOUT_CLASSIFICATION	0.013475758709957257	DESIGN
The basic implementation is to simply use the node's text	WITHOUT_CLASSIFICATION	0.9999242426099907	WITHOUT_CLASSIFICATION	7.575739000941415E-5	DESIGN
for dialects which are known to not support ANSI-SQL row-value-constructor syntax, we should mutate the tree.	WITHOUT_CLASSIFICATION	0.9400762791099194	WITHOUT_CLASSIFICATION	0.059923720890080606	DESIGN
Due to the complexity in initializing the SelectClause, do not generate one here. If it is not found; simply return null... Also, do not cache since it gets generated well after we are created.	WITHOUT_CLASSIFICATION	0.9986455942591751	WITHOUT_CLASSIFICATION	0.0013544057408248092	DESIGN
check the version unsaved-value, if appropriate	WITHOUT_CLASSIFICATION	0.9998275737384629	WITHOUT_CLASSIFICATION	1.724262615371234E-4	DESIGN
let this take precedence if defined, since it works for assigned identifiers	WITHOUT_CLASSIFICATION	0.9963909620952941	WITHOUT_CLASSIFICATION	0.0036090379047058	DESIGN
check the id unsaved-value	WITHOUT_CLASSIFICATION	0.9998714096392567	WITHOUT_CLASSIFICATION	1.2859036074332466E-4	DESIGN
check to see if it is in the second-level cache	WITHOUT_CLASSIFICATION	0.9998824823023688	WITHOUT_CLASSIFICATION	1.1751769763135066E-4	DESIGN
/	WITHOUT_CLASSIFICATION	0.9995842610591597	WITHOUT_CLASSIFICATION	4.157389408404177E-4	DESIGN
For property references generate <tablealias>.<columnname> as <projectionalias>	WITHOUT_CLASSIFICATION	0.9999914435963696	WITHOUT_CLASSIFICATION	8.556403630501639E-6	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999356419707268	WITHOUT_CLASSIFICATION	6.435802927320741E-4	DESIGN
if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9998115561051987	WITHOUT_CLASSIFICATION	1.8844389480137262E-4	DESIGN
force immediate execution of the insert	WITHOUT_CLASSIFICATION	0.9995101056444231	WITHOUT_CLASSIFICATION	4.898943555770043E-4	DESIGN
If this from element is a collection and the path is a collection property (maxIndex, etc.) then generate a sub-query.	WITHOUT_CLASSIFICATION	0.9996639517976637	WITHOUT_CLASSIFICATION	3.360482023363952E-4	DESIGN
entities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999356419707268	WITHOUT_CLASSIFICATION	6.435802927320741E-4	DESIGN
collections ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993570672149708	WITHOUT_CLASSIFICATION	6.42932785029233E-4	DESIGN
cannot occur	WITHOUT_CLASSIFICATION	0.9997675397779254	WITHOUT_CLASSIFICATION	2.3246022207446703E-4	DESIGN
cannot occur	WITHOUT_CLASSIFICATION	0.9997675397779254	WITHOUT_CLASSIFICATION	2.3246022207446703E-4	DESIGN
only carry on if the method has no parameters	WITHOUT_CLASSIFICATION	0.9999785494980764	WITHOUT_CLASSIFICATION	2.145050192367935E-5	DESIGN
try "get"	WITHOUT_CLASSIFICATION	0.9997966529945815	WITHOUT_CLASSIFICATION	2.0334700541846552E-4	DESIGN
do nothing...	WITHOUT_CLASSIFICATION	0.9997623428113518	WITHOUT_CLASSIFICATION	2.3765718864807785E-4	DESIGN
do nothing...	WITHOUT_CLASSIFICATION	0.9997623428113518	WITHOUT_CLASSIFICATION	2.3765718864807785E-4	DESIGN
should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.997495454643592	WITHOUT_CLASSIFICATION	0.0025045453564079946	DESIGN
this page intentionally left blank :)	WITHOUT_CLASSIFICATION	0.9982613573791089	WITHOUT_CLASSIFICATION	0.0017386426208910709	DESIGN
do not do anything	WITHOUT_CLASSIFICATION	0.9995540857371361	WITHOUT_CLASSIFICATION	4.459142628638812E-4	DESIGN
ignore	WITHOUT_CLASSIFICATION	0.9984534187512447	WITHOUT_CLASSIFICATION	0.0015465812487552983	DESIGN
cant instantiate	WITHOUT_CLASSIFICATION	0.9998823893136668	WITHOUT_CLASSIFICATION	1.1761068633311166E-4	DESIGN
if it is a property of an embedded component, invoke on the "identifier"	WITHOUT_CLASSIFICATION	0.9999573337966405	WITHOUT_CLASSIFICATION	4.2666203359510344E-5	DESIGN
otherwise:	WITHOUT_CLASSIFICATION	0.9991288176721137	WITHOUT_CLASSIFICATION	8.711823278862698E-4	DESIGN
skip finalize methods	WITHOUT_CLASSIFICATION	0.9984326212598127	WITHOUT_CLASSIFICATION	0.001567378740187303	DESIGN
note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9996375250364936	WITHOUT_CLASSIFICATION	3.6247496350643224E-4	DESIGN
note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9996375250364936	WITHOUT_CLASSIFICATION	3.6247496350643224E-4	DESIGN
HHH-2481 make sure the callback gets cleared, otherwise the instance stays in a static thread local.	WITHOUT_CLASSIFICATION	0.9995606166142352	WITHOUT_CLASSIFICATION	4.3938338576475586E-4	DESIGN
while constructor is running	WITHOUT_CLASSIFICATION	0.9999622736171194	WITHOUT_CLASSIFICATION	3.7726382880633697E-5	DESIGN
while constructor is running	WITHOUT_CLASSIFICATION	0.9999622736171194	WITHOUT_CLASSIFICATION	3.7726382880633697E-5	DESIGN
note: interface is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9996652134372302	WITHOUT_CLASSIFICATION	3.3478656276972487E-4	DESIGN
interfaces arguments	WITHOUT_CLASSIFICATION	0.9998456991947962	WITHOUT_CLASSIFICATION	1.5430080520383038E-4	DESIGN
TODO!	WITHOUT_CLASSIFICATION	0.9991288176721137	WITHOUT_CLASSIFICATION	8.711823278862698E-4	DESIGN
Get the caller	WITHOUT_CLASSIFICATION	0.9999688587805219	WITHOUT_CLASSIFICATION	3.114121947808943E-5	DESIGN
Get the caller principals	WITHOUT_CLASSIFICATION	0.9999127271884051	WITHOUT_CLASSIFICATION	8.727281159500068E-5	DESIGN
private static final Alias DEFAULT_ALIAS = new Alias(10, null);	WITHOUT_CLASSIFICATION	0.9993628044203892	WITHOUT_CLASSIFICATION	6.371955796109405E-4	DESIGN
Needed to bump this up to DotNode, because that is the only thing which currently knows about the property-ref path in the correct format; it is either this, or recurse over the DotNodes constructing the property path just like DotNode does internally	WITHOUT_CLASSIFICATION	0.9959549772736863	WITHOUT_CLASSIFICATION	0.004045022726313736	DESIGN
if the identifier is quoted, remove the quotes	WITHOUT_CLASSIFICATION	0.9987577016666214	WITHOUT_CLASSIFICATION	0.001242298333378626	DESIGN
truncate the identifier to the max alias length, less the suffix length	WITHOUT_CLASSIFICATION	0.9996844162833752	WITHOUT_CLASSIFICATION	3.1558371662468237E-4	DESIGN
full joins are not supported.. yet!	WITHOUT_CLASSIFICATION	0.9901582531292585	WITHOUT_CLASSIFICATION	0.009841746870741457	DESIGN
null is not considered the same type as Integer. $NON-NLS-1 $NON-NLS-1	WITHOUT_CLASSIFICATION	0.9847693764678679	WITHOUT_CLASSIFICATION	0.01523062353213214	DESIGN
the outerJoinsAfterWhere needs to come before where clause to properly handle dynamic filters	WITHOUT_CLASSIFICATION	0.9976088412247791	WITHOUT_CLASSIFICATION	0.002391158775220956	DESIGN
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9991590740788332	WITHOUT_CLASSIFICATION	8.409259211668746E-4	DESIGN
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9991590740788332	WITHOUT_CLASSIFICATION	8.409259211668746E-4	DESIGN
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9991590740788332	WITHOUT_CLASSIFICATION	8.409259211668746E-4	DESIGN
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9991590740788332	WITHOUT_CLASSIFICATION	8.409259211668746E-4	DESIGN
strip off any leading 'and' token	WITHOUT_CLASSIFICATION	0.9999161336495335	WITHOUT_CLASSIFICATION	8.386635046663218E-5	DESIGN
if the condition is not already there...	WITHOUT_CLASSIFICATION	0.9990356290583127	WITHOUT_CLASSIFICATION	9.643709416872967E-4	DESIGN
dontSpace.add("'");	WITHOUT_CLASSIFICATION	0.9998192731054069	WITHOUT_CLASSIFICATION	1.8072689459315214E-4	DESIGN
for MySQL	WITHOUT_CLASSIFICATION	0.9989984700903999	WITHOUT_CLASSIFICATION	0.00100152990960007	DESIGN
HashMap columnsUnique = new HashMap();	WITHOUT_CLASSIFICATION	0.9998331606497055	WITHOUT_CLASSIFICATION	1.6683935029455994E-4	DESIGN
null caused some problems	WITHOUT_CLASSIFICATION	0.9970666781625325	WITHOUT_CLASSIFICATION	0.002933321837467454	DESIGN
package	WITHOUT_CLASSIFICATION	0.9957153436513405	WITHOUT_CLASSIFICATION	0.0042846563486594776	DESIGN
not sure if this would ever be null but wanted to be careful	WITHOUT_CLASSIFICATION	0.9974745727489335	WITHOUT_CLASSIFICATION	0.002525427251066495	DESIGN
even on inverse="true"	WITHOUT_CLASSIFICATION	0.9993729501948533	WITHOUT_CLASSIFICATION	6.270498051466941E-4	DESIGN
package	WITHOUT_CLASSIFICATION	0.9957153436513405	WITHOUT_CLASSIFICATION	0.0042846563486594776	DESIGN
package	WITHOUT_CLASSIFICATION	0.9957153436513405	WITHOUT_CLASSIFICATION	0.0042846563486594776	DESIGN
If true then execute db updates, otherwise just generate and display updates	WITHOUT_CLASSIFICATION	0.9999858905132745	WITHOUT_CLASSIFICATION	1.4109486725457118E-5	DESIGN
we only release the connection	WITHOUT_CLASSIFICATION	0.999481830026716	WITHOUT_CLASSIFICATION	5.18169973283937E-4	DESIGN
deprecated option...	WITHOUT_CLASSIFICATION	0.998852859334299	WITHOUT_CLASSIFICATION	0.0011471406657009816	DESIGN
if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9997743010124027	WITHOUT_CLASSIFICATION	2.256989875972356E-4	DESIGN
actually, this last test is probably unnecessary, since beforeCompletion() doesn't get called during rollback	WITHOUT_CLASSIFICATION	0.9996084573057145	WITHOUT_CLASSIFICATION	3.9154269428550993E-4	DESIGN
this one only really needed for badly-behaved applications! (if the TransactionManager has a Sychronization registered, its a noop) (actually we do need it for downgrading locks)	WITHOUT_CLASSIFICATION	0.9928742070913344	WITHOUT_CLASSIFICATION	0.007125792908665543	DESIGN
Create an DotNode AST for the path and resolve it.	WITHOUT_CLASSIFICATION	0.9995969646970458	WITHOUT_CLASSIFICATION	4.0303530295416945E-4	DESIGN
if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9997743010124027	WITHOUT_CLASSIFICATION	2.256989875972356E-4	DESIGN
if we could not register a synchronization, do the before/after completion callbacks ourself (but we need to let jdbcContext know that this is what we are going to do, so it doesn't keep trying to register synchronizations)	WITHOUT_CLASSIFICATION	0.7752464923394737	DESIGN	0.22475350766052626	WITHOUT_CLASSIFICATION
swallow it, and continue to roll back JTA transaction	WITHOUT_CLASSIFICATION	0.9996860398208567	WITHOUT_CLASSIFICATION	3.139601791433815E-4	DESIGN
so the transaction is already rolled back, by JTA spec	WITHOUT_CLASSIFICATION	0.9999315053297376	WITHOUT_CLASSIFICATION	6.849467026237373E-5	DESIGN
this method is a noop if there is a Synchronization!	WITHOUT_CLASSIFICATION	0.9987906872158953	WITHOUT_CLASSIFICATION	0.001209312784104813	DESIGN
two conditions where we need to transform this to a theta-join syntax: 1) 'elem' is the "root from-element" in correlated subqueries 2) The DotNode.useThetaStyleImplicitJoins has been set to true and 'elem' represents an implicit join	WITHOUT_CLASSIFICATION	0.9992673982809017	WITHOUT_CLASSIFICATION	7.326017190982702E-4	DESIGN
WebSphere, however, is not a sane JEE/JTA container...	WITHOUT_CLASSIFICATION	0.9948943720417844	WITHOUT_CLASSIFICATION	0.0051056279582156056	DESIGN
for sane JEE/JTA containers, the transaction itself functions as its identifier...	WITHOUT_CLASSIFICATION	0.998669381224366	WITHOUT_CLASSIFICATION	0.001330618775634057	DESIGN
swallow, the transaction was finished	WITHOUT_CLASSIFICATION	0.9995766068382562	WITHOUT_CLASSIFICATION	4.2339316174372984E-4	DESIGN
all AliasToEntityMapResultTransformer are considered equal ~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993306711938926	WITHOUT_CLASSIFICATION	6.693288061073178E-4	DESIGN
Create the join element under the from element.	WITHOUT_CLASSIFICATION	0.9971006173706799	WITHOUT_CLASSIFICATION	0.0028993826293201	DESIGN
all DistinctRootEntityResultTransformer are considered equal ~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993306711938926	WITHOUT_CLASSIFICATION	6.693288061073178E-4	DESIGN
map of EntityMode -> Tuplizer	WITHOUT_CLASSIFICATION	0.9999469512275455	WITHOUT_CLASSIFICATION	5.3048772454587515E-5	DESIGN
this is a virtual id property...	WITHOUT_CLASSIFICATION	0.9966859604970932	WITHOUT_CLASSIFICATION	0.0033140395029067813	DESIGN
this one needed only for guessEntityMode()	WITHOUT_CLASSIFICATION	0.9992778807942322	WITHOUT_CLASSIFICATION	7.221192057678483E-4	DESIGN
create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999081933089746	WITHOUT_CLASSIFICATION	9.180669102545376E-5	DESIGN
todo : move this to SF per HHH-3517; also see HHH-1907 and ComponentMetamodel	WITHOUT_CLASSIFICATION	0.9891048941634774	WITHOUT_CLASSIFICATION	0.010895105836522735	DESIGN
then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.999838700082514	WITHOUT_CLASSIFICATION	1.612999174860586E-4	DESIGN
Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.999652872865396	WITHOUT_CLASSIFICATION	3.471271346041109E-4	DESIGN
then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9994133582795325	WITHOUT_CLASSIFICATION	5.866417204675573E-4	DESIGN
Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.999652872865396	WITHOUT_CLASSIFICATION	3.471271346041109E-4	DESIGN
put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9993202314166654	WITHOUT_CLASSIFICATION	6.797685833346688E-4	DESIGN
found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9997995054692085	WITHOUT_CLASSIFICATION	2.004945307915623E-4	DESIGN
private final SessionFactoryImplementor sessionFactory;	WITHOUT_CLASSIFICATION	0.9953437545938202	WITHOUT_CLASSIFICATION	0.004656245406179841	DESIGN
cached for efficiency...	WITHOUT_CLASSIFICATION	0.9995563709563225	WITHOUT_CLASSIFICATION	4.436290436774164E-4	DESIGN
public ComponentMetamodel(Component component, SessionFactoryImplementor sessionFactory) {	WITHOUT_CLASSIFICATION	0.9982850226370376	WITHOUT_CLASSIFICATION	0.0017149773629623636	DESIGN
this.sessionFactory = sessionFactory;	WITHOUT_CLASSIFICATION	0.9996067502678262	WITHOUT_CLASSIFICATION	3.9324973217382545E-4	DESIGN
it was not embedded, so the argument is just an id	WITHOUT_CLASSIFICATION	0.9999728626538993	WITHOUT_CLASSIFICATION	2.7137346100711707E-5	DESIGN
then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.999838700082514	WITHOUT_CLASSIFICATION	1.612999174860586E-4	DESIGN
then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9994133582795325	WITHOUT_CLASSIFICATION	5.866417204675573E-4	DESIGN
put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9993202314166654	WITHOUT_CLASSIFICATION	6.797685833346688E-4	DESIGN
then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9979372240268443	WITHOUT_CLASSIFICATION	0.0020627759731557402	DESIGN
return currentId;	WITHOUT_CLASSIFICATION	0.9998016803169859	WITHOUT_CLASSIFICATION	1.9831968301408718E-4	DESIGN
reset the id	WITHOUT_CLASSIFICATION	0.9999576191243631	WITHOUT_CLASSIFICATION	4.2380875636860754E-5	DESIGN
origin.addDestination( destination ); This was the cause of HHH-242 origin.setType( FROM_FRAGMENT ); Set the parent node type so that the AST is properly formed. The destination node will have all the FROM text. The parent node is a collection join too (voodoo - see JoinProcessor)	WITHOUT_CLASSIFICATION	0.9998531829574492	WITHOUT_CLASSIFICATION	1.4681704255081033E-4	DESIGN
reset the version	WITHOUT_CLASSIFICATION	0.9999684399869061	WITHOUT_CLASSIFICATION	3.156001309391115E-5	DESIGN
the default is to simply not lazy fetch properties for now...	WITHOUT_CLASSIFICATION	0.9979297459374258	WITHOUT_CLASSIFICATION	0.0020702540625742428	DESIGN
Add the second join, the one that ends in the destination table.	WITHOUT_CLASSIFICATION	0.9997227688797395	WITHOUT_CLASSIFICATION	2.772311202604137E-4	DESIGN
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9865242412900427	WITHOUT_CLASSIFICATION	0.013475758709957257	DESIGN
found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9997995054692085	WITHOUT_CLASSIFICATION	2.004945307915623E-4	DESIGN
determine the id getter and setter methods from the proxy interface (if any) determine all interfaces needed by the resulting proxy	WITHOUT_CLASSIFICATION	0.9999517999778577	WITHOUT_CLASSIFICATION	4.820002214231026E-5	DESIGN
return getFactory().getSettings().getBytecodeProvider().getProxyFactoryFactory().buildProxyFactory();	WITHOUT_CLASSIFICATION	0.999293802461369	WITHOUT_CLASSIFICATION	7.061975386310989E-4	DESIGN
not final because proxy factory creation can fail	WITHOUT_CLASSIFICATION	0.9991759812991321	WITHOUT_CLASSIFICATION	8.240187008679858E-4	DESIGN
superclass entity-name	WITHOUT_CLASSIFICATION	0.999667816608744	WITHOUT_CLASSIFICATION	3.321833912559476E-4	DESIGN
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9865242412900427	WITHOUT_CLASSIFICATION	0.013475758709957257	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999356419707268	WITHOUT_CLASSIFICATION	6.435802927320741E-4	DESIGN
init the aliases, after initing the constructornode	WITHOUT_CLASSIFICATION	0.9992345471031985	WITHOUT_CLASSIFICATION	7.654528968015047E-4	DESIGN
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9865242412900427	WITHOUT_CLASSIFICATION	0.013475758709957257	DESIGN
legacy behavior (with no abstract attribute specified)	WITHOUT_CLASSIFICATION	0.9971858132137925	WITHOUT_CLASSIFICATION	0.0028141867862074414	DESIGN
Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9998228240532743	WITHOUT_CLASSIFICATION	1.7717594672580754E-4	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999356419707268	WITHOUT_CLASSIFICATION	6.435802927320741E-4	DESIGN
note: this affects the return value!	WITHOUT_CLASSIFICATION	0.9988450515975699	WITHOUT_CLASSIFICATION	0.0011549484024302086	DESIGN
Need to account for allowable '_' within the variant	WITHOUT_CLASSIFICATION	0.9998485349835176	WITHOUT_CLASSIFICATION	1.5146501648246753E-4	DESIGN
Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9992104205980915	WITHOUT_CLASSIFICATION	7.895794019083497E-4	DESIGN
Collection Types:	WITHOUT_CLASSIFICATION	0.9998357878933862	WITHOUT_CLASSIFICATION	1.642121066137322E-4	DESIGN
convenience methods relating to operations across arrays of types...	WITHOUT_CLASSIFICATION	0.9979834510631241	WITHOUT_CLASSIFICATION	0.0020165489368758616	DESIGN
lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9995711673535069	WITHOUT_CLASSIFICATION	4.2883264649309563E-4	DESIGN
Blobs are ignored by merge()	WITHOUT_CLASSIFICATION	0.9999020418906114	WITHOUT_CLASSIFICATION	9.79581093886984E-5	DESIGN
value is the entity name	WITHOUT_CLASSIFICATION	0.9997776376339376	WITHOUT_CLASSIFICATION	2.2236236606248605E-4	DESIGN
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9998192731054069	WITHOUT_CLASSIFICATION	1.8072689459315214E-4	DESIGN
generate id select fragment and then property select fragment for each expression, just like generateSelectFragments().	WITHOUT_CLASSIFICATION	0.9987035970556711	WITHOUT_CLASSIFICATION	0.0012964029443288485	DESIGN
TODO!	WITHOUT_CLASSIFICATION	0.9991288176721137	WITHOUT_CLASSIFICATION	8.711823278862698E-4	DESIGN
xml is the entity name	WITHOUT_CLASSIFICATION	0.9995352145478283	WITHOUT_CLASSIFICATION	4.6478545217173436E-4	DESIGN
special case ... this is the leaf of the containment graph, even though not immutable	WITHOUT_CLASSIFICATION	0.9992430522226502	WITHOUT_CLASSIFICATION	7.569477773496848E-4	DESIGN
tolerates nulls	WITHOUT_CLASSIFICATION	0.9998192731054069	WITHOUT_CLASSIFICATION	1.8072689459315214E-4	DESIGN
sqlResultTypeList,	WITHOUT_CLASSIFICATION	0.9998192731054069	WITHOUT_CLASSIFICATION	1.8072689459315214E-4	DESIGN
metaType is assumed to be single-column type	WITHOUT_CLASSIFICATION	0.9953942699880404	WITHOUT_CLASSIFICATION	0.004605730011959596	DESIGN
Get all the select expressions (that we just generated) and render the select.	WITHOUT_CLASSIFICATION	0.9992600326301185	WITHOUT_CLASSIFICATION	7.399673698814729E-4	DESIGN
Look through the FromElement's children to find any collections of values that should be fetched...	WITHOUT_CLASSIFICATION	0.9997945532180923	WITHOUT_CLASSIFICATION	2.054467819076345E-4	DESIGN
return AssociationType.FOREIGN_KEY_TO_PARENT; this is better but causes a transient object exception...	WITHOUT_CLASSIFICATION	0.9595154219153886	WITHOUT_CLASSIFICATION	0.040484578084611485	DESIGN
Use the lower case function name. Remember whether we're in a SELECT clause or not.	WITHOUT_CLASSIFICATION	0.9984476057905685	WITHOUT_CLASSIFICATION	0.0015523942094315204	DESIGN
IDENT might be the name of a class.	WITHOUT_CLASSIFICATION	0.9877256638343125	WITHOUT_CLASSIFICATION	0.012274336165687487	DESIGN
TODO!!!	WITHOUT_CLASSIFICATION	0.9991288176721137	WITHOUT_CLASSIFICATION	8.711823278862698E-4	DESIGN
st.setTimestamp( index, new Timestamp( cal.getTimeInMillis() ), cal ); JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9996511490199572	WITHOUT_CLASSIFICATION	3.48850980042795E-4	DESIGN
st.setDate( index, new Date( cal.getTimeInMillis() ), cal ); JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9996511490199572	WITHOUT_CLASSIFICATION	3.48850980042795E-4	DESIGN
both are Timestamps	WITHOUT_CLASSIFICATION	0.9995211391113824	WITHOUT_CLASSIFICATION	4.788608886176567E-4	DESIGN
at least one is a plain old Date	WITHOUT_CLASSIFICATION	0.9990415945810882	WITHOUT_CLASSIFICATION	9.584054189117876E-4	DESIGN
noop	WITHOUT_CLASSIFICATION	0.9991865460439513	WITHOUT_CLASSIFICATION	8.134539560488254E-4	DESIGN
if the corresponding SQL value is NULL, the reader we got is NULL as well	WITHOUT_CLASSIFICATION	0.9999796863158367	WITHOUT_CLASSIFICATION	2.0313684163339165E-5	DESIGN
Fetch Reader content up to the end - and put characters in a StringBuffer	WITHOUT_CLASSIFICATION	0.9994516118433514	WITHOUT_CLASSIFICATION	5.48388156648557E-4	DESIGN
Return StringBuffer content as a large String	WITHOUT_CLASSIFICATION	0.9999360884923175	WITHOUT_CLASSIFICATION	6.39115076825117E-5	DESIGN
or Types.LONGVARCHAR?	WITHOUT_CLASSIFICATION	0.999666955655921	WITHOUT_CLASSIFICATION	3.330443440790526E-4	DESIGN
Not called at runtime so doesn't matter if its slow :)	WITHOUT_CLASSIFICATION	0.9861412360221247	WITHOUT_CLASSIFICATION	0.013858763977875247	DESIGN
TODO	WITHOUT_CLASSIFICATION	0.7850269959366386	DESIGN	0.2149730040633613	WITHOUT_CLASSIFICATION
Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999274544623329	WITHOUT_CLASSIFICATION	7.254553766714913E-5	DESIGN
different nullability rules for pk/fk	WITHOUT_CLASSIFICATION	0.9990480636181519	WITHOUT_CLASSIFICATION	9.519363818480812E-4	DESIGN
cache this	WITHOUT_CLASSIFICATION	0.995312221256416	WITHOUT_CLASSIFICATION	0.004687778743583942	DESIGN
only really need new array during semiresolve!	WITHOUT_CLASSIFICATION	0.9997476046367451	WITHOUT_CLASSIFICATION	2.523953632549468E-4	DESIGN
Forcefully remove leading ands from where fragments; the grammar will handle adding them	WITHOUT_CLASSIFICATION	0.9984067435374505	WITHOUT_CLASSIFICATION	0.0015932564625494219	DESIGN
TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9998192731054069	WITHOUT_CLASSIFICATION	1.8072689459315214E-4	DESIGN
Create a new FILTERS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9998842543400038	WITHOUT_CLASSIFICATION	1.1574565999624305E-4	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999356419707268	WITHOUT_CLASSIFICATION	6.435802927320741E-4	DESIGN
public Object instantiate(Object parent, SessionImplementor session) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9991283949548232	WITHOUT_CLASSIFICATION	8.716050451768053E-4	DESIGN
nothing to do	WITHOUT_CLASSIFICATION	0.9997828052058866	WITHOUT_CLASSIFICATION	2.1719479411333028E-4	DESIGN
nothing to do	WITHOUT_CLASSIFICATION	0.9997828052058866	WITHOUT_CLASSIFICATION	2.1719479411333028E-4	DESIGN
VersionType impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Note : simply returns null for seed() and next() as the only known application of binary types for versioning is for use with the TIMESTAMP datatype supported by Sybase and SQL Server, which are completely db-generated values...	WITHOUT_CLASSIFICATION	0.9999917607094875	WITHOUT_CLASSIFICATION	8.23929051256837E-6	DESIGN
lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9995711673535069	WITHOUT_CLASSIFICATION	4.2883264649309563E-4	DESIGN
not really necessary, I guess...	WITHOUT_CLASSIFICATION	0.9939859616044855	WITHOUT_CLASSIFICATION	0.006014038395514549	DESIGN
Clobs are ignored by merge() operation	WITHOUT_CLASSIFICATION	0.9999758507326675	WITHOUT_CLASSIFICATION	2.4149267332504195E-5	DESIGN
we do not have to worry about queued additions to uninitialized collections, since they can only occur for inverse collections!	WITHOUT_CLASSIFICATION	0.982971070728678	WITHOUT_CLASSIFICATION	0.017028929271322095	DESIGN
collections cannot be compared	WITHOUT_CLASSIFICATION	0.999571598895698	WITHOUT_CLASSIFICATION	4.28401104301966E-4	DESIGN
remember the uk value	WITHOUT_CLASSIFICATION	0.9997854182456303	WITHOUT_CLASSIFICATION	2.1458175436963619E-4	DESIGN
NOOP	WITHOUT_CLASSIFICATION	0.9994701155265793	WITHOUT_CLASSIFICATION	5.298844734207308E-4	DESIGN
processCollectionProperty(token, q.getCollectionPersister(collectionRole), collectionName);	WITHOUT_CLASSIFICATION	0.999356419707268	WITHOUT_CLASSIFICATION	6.435802927320741E-4	DESIGN
we must use the "remembered" uk value, since it is not available from the EntityEntry during assembly	WITHOUT_CLASSIFICATION	0.9978995715524434	WITHOUT_CLASSIFICATION	0.0021004284475565865	DESIGN
collections don't dirty an unversioned parent entity	WITHOUT_CLASSIFICATION	0.9996600573385558	WITHOUT_CLASSIFICATION	3.3994266144415355E-4	DESIGN
return false;	WITHOUT_CLASSIFICATION	0.9997073745396077	WITHOUT_CLASSIFICATION	2.9262546039235827E-4	DESIGN
This just handles a particular case of component projection, perhaps get rid of it and throw an exception	WITHOUT_CLASSIFICATION	0.9055333858469014	WITHOUT_CLASSIFICATION	0.09446661415309875	DESIGN
NOTE: we avoid joining to the next table if the named property is just the foreign key value	WITHOUT_CLASSIFICATION	0.9999422726412956	WITHOUT_CLASSIFICATION	5.772735870446045E-5	DESIGN
the key is the owning entity itself, so get the ID from the key	WITHOUT_CLASSIFICATION	0.9998215638385521	WITHOUT_CLASSIFICATION	1.784361614479732E-4	DESIGN
if the original is a PersistentCollection, and that original was not flagged as dirty, then reset the target's dirty flag here after the copy operation. </p> One thing to be careful of here is a "bare" original collection in which case we should never ever ever reset the dirty flag on the target because we simply do not know...	WITHOUT_CLASSIFICATION	0.9999911134614689	WITHOUT_CLASSIFICATION	8.886538531263352E-6	DESIGN
ignore subselect keywords	WITHOUT_CLASSIFICATION	0.999103944903765	WITHOUT_CLASSIFICATION	8.960550962350529E-4	DESIGN
copy elements into newly empty target collection	WITHOUT_CLASSIFICATION	0.9996651802968742	WITHOUT_CLASSIFICATION	3.3481970312569637E-4	DESIGN
for a null target, or a target which is the same as the original, we need to put the merged elements in a new collection	WITHOUT_CLASSIFICATION	0.9992159457700865	WITHOUT_CLASSIFICATION	7.840542299134574E-4	DESIGN
by default just use an unanticipated capacity since we don't know how to extract the capacity to use from original here...	WITHOUT_CLASSIFICATION	0.9998834458288749	WITHOUT_CLASSIFICATION	1.1655417112508777E-4	DESIGN
get the elements back into the target making sure to handle dirty flag	WITHOUT_CLASSIFICATION	0.9991811184444755	WITHOUT_CLASSIFICATION	8.188815555245157E-4	DESIGN
check if collection is currently being loaded	WITHOUT_CLASSIFICATION	0.9993600011393868	WITHOUT_CLASSIFICATION	6.399988606131122E-4	DESIGN
check if it is already completely loaded, but unowned	WITHOUT_CLASSIFICATION	0.9998905601883528	WITHOUT_CLASSIFICATION	1.0943981164724875E-4	DESIGN
cache the actual id of the object, not the value of the property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9986321932914356	WITHOUT_CLASSIFICATION	0.001367806708564448	DESIGN
TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9998192731054069	WITHOUT_CLASSIFICATION	1.8072689459315214E-4	DESIGN
create a new collection wrapper, to be initialized later	WITHOUT_CLASSIFICATION	0.94953517650122	WITHOUT_CLASSIFICATION	0.050464823498779905	DESIGN
Some JDBC drivers erroneously return an empty array here for a null DB value :/	WITHOUT_CLASSIFICATION	0.9938195481366568	WITHOUT_CLASSIFICATION	0.006180451863343207	DESIGN
our column span is the number of columns in the PK	WITHOUT_CLASSIFICATION	0.999935635794119	WITHOUT_CLASSIFICATION	6.43642058809866E-5	DESIGN
cannot batch fetch by unique key (property-ref associations)	WITHOUT_CLASSIFICATION	0.9998755251740717	WITHOUT_CLASSIFICATION	1.2447482592825416E-4	DESIGN
we already know current is not null...	WITHOUT_CLASSIFICATION	0.9986831054256632	WITHOUT_CLASSIFICATION	0.0013168945743367885	DESIGN
the ids are fully resolved, so compare them with isDirty(), not isModified()	WITHOUT_CLASSIFICATION	0.9990146296550814	WITHOUT_CLASSIFICATION	9.85370344918569E-4	DESIGN
the owner of the association is not the owner of the id	WITHOUT_CLASSIFICATION	0.9996338089140777	WITHOUT_CLASSIFICATION	3.661910859222652E-4	DESIGN
----------------------------------------------------------- Constructors	WITHOUT_CLASSIFICATION	0.9993743261269415	WITHOUT_CLASSIFICATION	6.256738730584896E-4	DESIGN
----------------------------------------------------- Instance Variables	WITHOUT_CLASSIFICATION	0.9995969083072339	WITHOUT_CLASSIFICATION	4.030916927660701E-4	DESIGN
public static JDBCException newJDBCException(String string, SQLException root, String sql) { string = string + " [" + sql + ']'; log.error(string, root); logExceptions(root); return new JDBCException(string, root, sql); } public static JDBCException newJDBCException(String string, SQLException root) { log.error(string, root); logExceptions(root); return new JDBCException(string, root); }	WITHOUT_CLASSIFICATION	0.9999611898562205	WITHOUT_CLASSIFICATION	3.88101437796008E-5	DESIGN
--------------------------------------------------------- Public Methods	WITHOUT_CLASSIFICATION	0.9997461275840308	WITHOUT_CLASSIFICATION	2.538724159692539E-4	DESIGN
Compare the two maps for equality	WITHOUT_CLASSIFICATION	0.9996134172457616	WITHOUT_CLASSIFICATION	3.865827542384086E-4	DESIGN
Simple tests that require no synchronization	WITHOUT_CLASSIFICATION	0.9994846904384836	WITHOUT_CLASSIFICATION	5.153095615163774E-4	DESIGN
Sybase fail if we don't do that, sigh...	WITHOUT_CLASSIFICATION	0.9996825207328174	WITHOUT_CLASSIFICATION	3.1747926718252314E-4	DESIGN
Handles things like: a and b or c a and ( b or c ) not a and not b not ( a and b ) x between y and z (overloaded "and") x in ( a, b, c ) (overloaded brackets) not not a a is not null (overloaded "not") etc...... and expressions like foo = bar (maps to: foo.id = bar.id) foo.Bar = 'foo' (maps to: foo.bar = 'foo') foo.Bar.Baz = 1.0 (maps to: foo.bar = bar.id and bar.baz = 1.0) 1.0 = foo.Bar.Baz (maps to: bar.baz = 1.0 and foo.Bar = bar.id) foo.Bar.Baz = a.B.C (maps to: bar.Baz = b.C and foo.Bar = bar.id and a.B = b.id) foo.Bar.Baz + a.B.C (maps to: bar.Baz + b.C and foo.Bar = bar.id and a.B = b.id) ( foo.Bar.Baz + 1.0 ) < 2.0 (maps to: ( bar.Baz + 1.0 ) < 2.0 and foo.Bar = bar.id)	WITHOUT_CLASSIFICATION	0.9988195219101337	WITHOUT_CLASSIFICATION	0.001180478089866327	DESIGN
release the jdk internal caches everytime to ensure this plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9967409303299222	WITHOUT_CLASSIFICATION	0.0032590696700778208	DESIGN
release the jdk internal caches everytime to ensure this plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9967409303299222	WITHOUT_CLASSIFICATION	0.0032590696700778208	DESIGN
try to "pretty print" it	WITHOUT_CLASSIFICATION	0.999846924238618	WITHOUT_CLASSIFICATION	1.5307576138201822E-4	DESIGN
otherwise, just dump it	WITHOUT_CLASSIFICATION	0.9996165996682735	WITHOUT_CLASSIFICATION	3.8340033172647755E-4	DESIGN
its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9998775470098039	WITHOUT_CLASSIFICATION	1.224529901960851E-4	DESIGN
its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9998775470098039	WITHOUT_CLASSIFICATION	1.224529901960851E-4	DESIGN
use default behavior	WITHOUT_CLASSIFICATION	0.9993061792618619	WITHOUT_CLASSIFICATION	6.93820738138081E-4	DESIGN
NOTE: early return	WITHOUT_CLASSIFICATION	0.9998467119149196	WITHOUT_CLASSIFICATION	1.5328808508040245E-4	DESIGN
the MRU cache used to keep hard references to the most recently used query plans; note : LRU here is a bit of a misnomer, it indicates that LRU entries are removed, the actual kept entries are the MRU entries	WITHOUT_CLASSIFICATION	0.5288429689596096	DESIGN	0.47115703104039036	WITHOUT_CLASSIFICATION
we want to be able to just use the defaults, if JNDI environment properties are not supplied so don't put null in anywhere	WITHOUT_CLASSIFICATION	0.9989660293498073	WITHOUT_CLASSIFICATION	0.0010339706501927086	DESIGN
Clone -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9995142145736464	WITHOUT_CLASSIFICATION	4.857854263535873E-4	DESIGN
Serialize -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9993638675671045	WITHOUT_CLASSIFICATION	6.361324328954921E-4	DESIGN
stream closed in the finally	WITHOUT_CLASSIFICATION	0.9997968079263104	WITHOUT_CLASSIFICATION	2.03192073689508E-4	DESIGN
stream closed in the finally	WITHOUT_CLASSIFICATION	0.9997968079263104	WITHOUT_CLASSIFICATION	2.03192073689508E-4	DESIGN
Deserialize -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9993638675671045	WITHOUT_CLASSIFICATION	6.361324328954921E-4	DESIGN
static methods only - hide constructor	WITHOUT_CLASSIFICATION	0.9996487677120789	WITHOUT_CLASSIFICATION	3.5123228792108665E-4	DESIGN
&& !('_'==character)	WITHOUT_CLASSIFICATION	0.9998140959628894	WITHOUT_CLASSIFICATION	1.8590403711060054E-4	DESIGN
returnign null!	WITHOUT_CLASSIFICATION	0.9998206420675227	WITHOUT_CLASSIFICATION	1.793579324771565E-4	DESIGN
returnign null!	WITHOUT_CLASSIFICATION	0.9998206420675227	WITHOUT_CLASSIFICATION	1.793579324771565E-4	DESIGN
includes last '.'	WITHOUT_CLASSIFICATION	0.9999207923744462	WITHOUT_CLASSIFICATION	7.920762555379505E-5	DESIGN
+1 to include the following '.'	WITHOUT_CLASSIFICATION	0.9998069488925283	WITHOUT_CLASSIFICATION	1.9305110747159807E-4	DESIGN
Impl note: takes advantage of the fact that an escpaed single quote embedded within a quote-block can really be handled as two seperate quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9999624884390188	WITHOUT_CLASSIFICATION	3.751156098113987E-5	DESIGN
first time we find match!	WITHOUT_CLASSIFICATION	0.9996844803943589	WITHOUT_CLASSIFICATION	3.1551960564110926E-4	DESIGN
entityNames may now include slashes for the representations classname may be an inner class	WITHOUT_CLASSIFICATION	0.9999124569381206	WITHOUT_CLASSIFICATION	8.754306187947093E-5	DESIGN
wrapped iterators	WITHOUT_CLASSIFICATION	0.9985066322905062	WITHOUT_CLASSIFICATION	0.0014933677094938855	DESIGN
index of current iterator in the wrapped iterators array	WITHOUT_CLASSIFICATION	0.9996584831777593	WITHOUT_CLASSIFICATION	3.4151682224068286E-4	DESIGN
the current iterator	WITHOUT_CLASSIFICATION	0.9999633613014717	WITHOUT_CLASSIFICATION	3.663869852837752E-5	DESIGN
the last used iterator	WITHOUT_CLASSIFICATION	0.9752761286994684	WITHOUT_CLASSIFICATION	0.024723871300531535	DESIGN
it was a boolean expression	WITHOUT_CLASSIFICATION	0.9999097025789628	WITHOUT_CLASSIFICATION	9.029742103720359E-5	DESIGN
public static Object[] clone(Class elementClass, Object[] array) {Object[] result = (Object[]) Array.newInstance( elementClass, array.length );System.arraycopy(array, 0, result, 0, array.length);return result;}	WITHOUT_CLASSIFICATION	0.9999668639671655	WITHOUT_CLASSIFICATION	3.313603283452702E-5	DESIGN
call this before any Iterator method to make sure that the current Iterator is not exhausted	WITHOUT_CLASSIFICATION	0.9812737907869823	WITHOUT_CLASSIFICATION	0.01872620921301777	DESIGN
doable if needed	WITHOUT_CLASSIFICATION	0.9999234468426903	WITHOUT_CLASSIFICATION	7.655315730969912E-5	DESIGN
set last used iterator here, in case the user calls remove before calling hasNext() or next() (although they shouldn't)	WITHOUT_CLASSIFICATION	0.9283428842351896	WITHOUT_CLASSIFICATION	0.07165711576481036	DESIGN
peek ahead	WITHOUT_CLASSIFICATION	0.9991747331521907	WITHOUT_CLASSIFICATION	8.252668478092183E-4	DESIGN
if we reach the end of the string w/o finding the matching end, that is an exception	WITHOUT_CLASSIFICATION	0.9996857472214957	WITHOUT_CLASSIFICATION	3.1425277850435056E-4	DESIGN
we have a placeholder, spin forward till we find the end	WITHOUT_CLASSIFICATION	0.9977118874733457	WITHOUT_CLASSIFICATION	0.0022881125266543756	DESIGN
make sure spinning forward did not put us past the end of the buffer...	WITHOUT_CLASSIFICATION	0.9974402022747121	WITHOUT_CLASSIFICATION	0.002559797725287851	DESIGN
First, try to locate this resource through the current context classloader.	WITHOUT_CLASSIFICATION	0.9997364363368331	WITHOUT_CLASSIFICATION	2.6356366316689864E-4	DESIGN
Next, try to locate this resource through this class's classloader	WITHOUT_CLASSIFICATION	0.9997322112726762	WITHOUT_CLASSIFICATION	2.677887273238265E-4	DESIGN
Next, try to locate this resource through the system classloader	WITHOUT_CLASSIFICATION	0.9996564945352565	WITHOUT_CLASSIFICATION	3.4350546474352543E-4	DESIGN
Anywhere else we should look?	WITHOUT_CLASSIFICATION	0.998177672432365	WITHOUT_CLASSIFICATION	0.001822327567635029	DESIGN
would need an IdentitySet for this!	WITHOUT_CLASSIFICATION	0.9955408823585291	WITHOUT_CLASSIFICATION	0.004459117641470857	DESIGN
Arrays.asList doesn't do primitive arrays	WITHOUT_CLASSIFICATION	0.9996106801637039	WITHOUT_CLASSIFICATION	3.8931983629609054E-4	DESIGN
faster?	WITHOUT_CLASSIFICATION	0.9991288176721137	WITHOUT_CLASSIFICATION	8.711823278862698E-4	DESIGN
the name of a class	WITHOUT_CLASSIFICATION	0.9998075304804548	WITHOUT_CLASSIFICATION	1.9246951954507153E-4	DESIGN
Its the listener class name	WITHOUT_CLASSIFICATION	0.9996924715380239	WITHOUT_CLASSIFICATION	3.0752846197610006E-4	DESIGN
allow 9,8,7,6,5,4,3,2,1	WITHOUT_CLASSIFICATION	0.9984493646968761	WITHOUT_CLASSIFICATION	0.001550635303123933	DESIGN
default to element set if no elements() specified	WITHOUT_CLASSIFICATION	0.9994280922239042	WITHOUT_CLASSIFICATION	5.719077760957553E-4	DESIGN
look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999031245862592	WITHOUT_CLASSIFICATION	9.687541374081991E-5	DESIGN
in case we were deserialized in a different JVM, look for an instance with the same name (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9990407796309179	WITHOUT_CLASSIFICATION	9.592203690820242E-4	DESIGN
first, lets determine whether to apply cglib or javassist based instrumentation...	WITHOUT_CLASSIFICATION	0.9989468667733985	WITHOUT_CLASSIFICATION	0.0010531332266015036	DESIGN
Make sure we don't override previous set values	WITHOUT_CLASSIFICATION	0.9996401152263412	WITHOUT_CLASSIFICATION	3.598847736587547E-4	DESIGN
entirely optional!!	WITHOUT_CLASSIFICATION	0.999763655019638	WITHOUT_CLASSIFICATION	2.3634498036210545E-4	DESIGN
Its the listener instance (or better be)	WITHOUT_CLASSIFICATION	0.9980496627565613	WITHOUT_CLASSIFICATION	0.0019503372434387432	DESIGN
context.unbind(boundName);	WITHOUT_CLASSIFICATION	0.9994936520530547	WITHOUT_CLASSIFICATION	5.063479469452313E-4	DESIGN
readResolveObject	WITHOUT_CLASSIFICATION	0.9998192731054069	WITHOUT_CLASSIFICATION	1.8072689459315214E-4	DESIGN
cfg.setProperty("hibernate.show_sql", "true");	WITHOUT_CLASSIFICATION	0.999356419707268	WITHOUT_CLASSIFICATION	6.435802927320741E-4	DESIGN
Defensive, convenience methods	WITHOUT_CLASSIFICATION	0.9992523901979229	WITHOUT_CLASSIFICATION	7.476098020771757E-4	DESIGN
Create the SessionFactory from hibernate.cfg.xml	WITHOUT_CLASSIFICATION	0.9994817871042677	WITHOUT_CLASSIFICATION	5.182128957324043E-4	DESIGN
Make sure you log the exception, as it might be swallowed	WITHOUT_CLASSIFICATION	0.9998813364905802	WITHOUT_CLASSIFICATION	1.1866350941988145E-4	DESIGN
Begin unit of work	WITHOUT_CLASSIFICATION	0.9999589352184203	WITHOUT_CLASSIFICATION	4.106478157976644E-5	DESIGN
Write HTML header	WITHOUT_CLASSIFICATION	0.999430867765158	WITHOUT_CLASSIFICATION	5.691322348420114E-4	DESIGN
Handle actions	WITHOUT_CLASSIFICATION	0.9995190526242104	WITHOUT_CLASSIFICATION	4.809473757897492E-4	DESIGN
Print page	WITHOUT_CLASSIFICATION	0.9986205710959563	WITHOUT_CLASSIFICATION	0.0013794289040437522	DESIGN
Write HTML footer	WITHOUT_CLASSIFICATION	0.9998846188139083	WITHOUT_CLASSIFICATION	1.1538118609165334E-4	DESIGN
End unit of work	WITHOUT_CLASSIFICATION	0.9999366341570762	WITHOUT_CLASSIFICATION	6.336584292372636E-5	DESIGN
Start the session to be used for this request	WITHOUT_CLASSIFICATION	0.6109546779976348	WITHOUT_CLASSIFICATION	0.3890453220023651	DESIGN
make the session available to the session factory's "current context"	WITHOUT_CLASSIFICATION	0.994041108559145	WITHOUT_CLASSIFICATION	0.005958891440854965	DESIGN
pass control along to the rest of the processing chain	WITHOUT_CLASSIFICATION	0.9997445630160223	WITHOUT_CLASSIFICATION	2.5543698397761016E-4	DESIGN
remove session from "current context"	WITHOUT_CLASSIFICATION	0.9950995448510106	WITHOUT_CLASSIFICATION	0.004900455148989478	DESIGN
Eager fetch the collection so we can use it detached	WITHOUT_CLASSIFICATION	0.9982268143046088	WITHOUT_CLASSIFICATION	0.0017731856953913038	DESIGN
If we want to handle it bidirectional and detached, we also need to load this collection with an eager outer-join fetch, this time with Criteria and not HQL:	WITHOUT_CLASSIFICATION	0.9609492969557926	WITHOUT_CLASSIFICATION	0.039050703044207415	DESIGN
Event anEvent = (Event) session .createCriteria(Event.class).setFetchMode("participants", FetchMode.JOIN) .add( Expression.eq("id", eventId) ) .uniqueResult(); Eager fetch the colleciton so we can use it detached	WITHOUT_CLASSIFICATION	0.9990714040467927	WITHOUT_CLASSIFICATION	9.285959532071556E-4	DESIGN
End of first unit of work	WITHOUT_CLASSIFICATION	0.999861134151571	WITHOUT_CLASSIFICATION	1.3886584842896305E-4	DESIGN
or bidirectional safety method, setting both sides: aPerson.addToEvent(anEvent);	WITHOUT_CLASSIFICATION	0.9997703897209158	WITHOUT_CLASSIFICATION	2.296102790841173E-4	DESIGN
Begin second unit of work	WITHOUT_CLASSIFICATION	0.9999382843317781	WITHOUT_CLASSIFICATION	6.171566822181087E-5	DESIGN
Reattachment of aPerson	WITHOUT_CLASSIFICATION	0.999694965675716	WITHOUT_CLASSIFICATION	3.050343242839892E-4	DESIGN
The getEmailAddresses() might trigger a lazy load of the collection	WITHOUT_CLASSIFICATION	0.9986545833176954	WITHOUT_CLASSIFICATION	0.001345416682304501	DESIGN
We need our tm, so get it now and avoid doing other work if there is a problem	WITHOUT_CLASSIFICATION	0.999887015630722	WITHOUT_CLASSIFICATION	1.1298436927788465E-4	DESIGN
Don't hold the JBC node lock throughout the tx, as that prevents reads and other updates	WITHOUT_CLASSIFICATION	0.999578024824892	WITHOUT_CLASSIFICATION	4.219751751079629E-4	DESIGN
Don't hold the JBC node lock throughout the tx, as that prevents reads and other updates	WITHOUT_CLASSIFICATION	0.999578024824892	WITHOUT_CLASSIFICATION	4.219751751079629E-4	DESIGN
JBC put a version in the node when it created as part of some internal operation. We are always newer, but if the JBC version is > 1 something odd has happened	WITHOUT_CLASSIFICATION	0.9999984836768574	WITHOUT_CLASSIFICATION	1.51632314257891E-6	DESIGN
swaldman 2006-08-28: define c3p0-style configuration parameters for properties with hibernate-specific overrides to detect and warn about conflicting declarations	WITHOUT_CLASSIFICATION	0.9998721271756582	WITHOUT_CLASSIFICATION	1.2787282434174868E-4	DESIGN
Not null if the Isolation level has been specified in the configuration file. Otherwise, it is left to the Driver's default value.	WITHOUT_CLASSIFICATION	0.9980924143538551	WITHOUT_CLASSIFICATION	0.0019075856461449822	DESIGN
Configured outside of Hibernate (i.e. Servlet container, or Java Bean Container already has Proxool pools running, and this provider is to just borrow one of these	WITHOUT_CLASSIFICATION	0.981040377622907	WITHOUT_CLASSIFICATION	0.01895962237709302	DESIGN
If you're closing down the ConnectionProvider chances are an is not a real big deal, just warn	WITHOUT_CLASSIFICATION	0.9998632893955788	WITHOUT_CLASSIFICATION	1.367106044212087E-4	DESIGN
(AS is always optional, for consistency with SQL/OQL)	WITHOUT_CLASSIFICATION	0.9979770192977576	WITHOUT_CLASSIFICATION	0.0020229807022423057	DESIGN
process the "new" HQL style where aliases are assigned _after_ the class name or path expression ie. using the AS construction	WITHOUT_CLASSIFICATION	0.9999963337497283	WITHOUT_CLASSIFICATION	3.666250271644453E-6	DESIGN
the loaded owner will be set to null after the collection is removed, so capture its value as the affected owner so it is accessible to both pre- and post- events	WITHOUT_CLASSIFICATION	0.9995300928513093	WITHOUT_CLASSIFICATION	4.699071486905804E-4	DESIGN
is a primitive type invokespecial	WITHOUT_CLASSIFICATION	0.998756875243533	WITHOUT_CLASSIFICATION	0.0012431247564669906	DESIGN
array of primitive type do nothing	WITHOUT_CLASSIFICATION	0.9997903066374904	WITHOUT_CLASSIFICATION	2.096933625097174E-4	DESIGN
handle a path expression or class name that appears at the start, in the "new" HQL style or an alias that appears at the start in the "old" HQL style	WITHOUT_CLASSIFICATION	0.9998604088130356	WITHOUT_CLASSIFICATION	1.395911869644684E-4	DESIGN
handle <=, >=, !=, is not, not between, not in	WITHOUT_CLASSIFICATION	0.9827141240406527	WITHOUT_CLASSIFICATION	0.017285875959347344	DESIGN
The loop ensures atomicity of the select + update even for no transaction or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999994247615029	WITHOUT_CLASSIFICATION	5.752384971352723E-7	DESIGN
transfer an explicitly defined entity name handle the lazy attribute	WITHOUT_CLASSIFICATION	0.999553792464626	WITHOUT_CLASSIFICATION	4.4620753537408676E-4	DESIGN
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9992440154121346	WITHOUT_CLASSIFICATION	7.559845878654819E-4	DESIGN
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9992440154121346	WITHOUT_CLASSIFICATION	7.559845878654819E-4	DESIGN
get meta's from <joined-subclass>	WITHOUT_CLASSIFICATION	0.9988655102173075	WITHOUT_CLASSIFICATION	0.001134489782692494	DESIGN
parameters on the property mapping should override parameters in the typedef	WITHOUT_CLASSIFICATION	0.9998105204804819	WITHOUT_CLASSIFICATION	1.894795195179722E-4	DESIGN
fetch="join" overrides default laziness fetch="join" overrides default laziness	WITHOUT_CLASSIFICATION	0.9991420669699974	WITHOUT_CLASSIFICATION	8.579330300026984E-4	DESIGN
NOTE SPECIAL CASE: default to join and non-lazy for the "second join" of the many-to-many	WITHOUT_CLASSIFICATION	0.9997089687652837	WITHOUT_CLASSIFICATION	2.9103123471623617E-4	DESIGN
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9995654529753717	WITHOUT_CLASSIFICATION	4.345470246282638E-4	DESIGN
state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992931208544404	WITHOUT_CLASSIFICATION	7.068791455596534E-4	DESIGN
void setComponentTuplizerFactory(ComponentTuplizerFactory componentTuplizerFactory) { this.componentTuplizerFactory = componentTuplizerFactory; }	WITHOUT_CLASSIFICATION	0.9989703837007812	WITHOUT_CLASSIFICATION	0.0010296162992188215	DESIGN
element index -> id	WITHOUT_CLASSIFICATION	0.9999409218621955	WITHOUT_CLASSIFICATION	5.9078137804568333E-5	DESIGN
note that it might be better to iterate the snapshot but this is safe, assuming the user implements equals() properly, as required by the Set contract!	WITHOUT_CLASSIFICATION	0.9925161926062003	WITHOUT_CLASSIFICATION	0.0074838073937998325	DESIGN
collections detect changes made via their public interface and mark themselves as dirty as a performance optimization	WITHOUT_CLASSIFICATION	0.9986038027775638	WITHOUT_CLASSIFICATION	0.0013961972224363099	DESIGN
essentially, if the real session is closed allow any method call to pass through since the real session will complain by throwing an appropriate exception; NOTE that allowing close() above has the same basic effect, but we capture that there simply to perform the unbind...	WITHOUT_CLASSIFICATION	0.9999849135620266	WITHOUT_CLASSIFICATION	1.5086437973463234E-5	DESIGN
The default SQLExceptionConverter for all dialects is based on SQLState since SQLErrorCode is extremely vendor-specific. Specific Dialects may override to return whatever is most appropriate for that vendor.	WITHOUT_CLASSIFICATION	0.9991754597704106	WITHOUT_CLASSIFICATION	8.245402295894778E-4	DESIGN
only necessary for postgre < 7.4 http:anoncvs.postgresql.org/cvsweb.cgi/pgsql/doc/src/sgml/ref/create_sequence.sgml	WITHOUT_CLASSIFICATION	0.9964532041702701	WITHOUT_CLASSIFICATION	0.003546795829730009	DESIGN
select topic, syntax from information_schema.help where section like 'Function%' order by section, topic see also -> http:www.h2database.com/html/functions.html	WITHOUT_CLASSIFICATION	0.999961149966439	WITHOUT_CLASSIFICATION	3.8850033560911905E-5	DESIGN
registerColumnType(Types.VARBINARY, "CHARACTER($l)"); registerColumnType(Types.BLOB, "CHARACTER($l)" ); For use prior to CP 11.0 registerColumnType(Types.CLOB, "CHARACTER($l)" );	WITHOUT_CLASSIFICATION	0.9994356301220836	WITHOUT_CLASSIFICATION	5.64369877916399E-4	DESIGN
the BLOB type requires a size arguement - this defaults to bytes - no arg defaults to 1 whole byte! other argument mods include K - kilobyte, M - megabyte, G - gigabyte. refer to the PBdevelopers guide for more info.	WITHOUT_CLASSIFICATION	0.9877832995581824	WITHOUT_CLASSIFICATION	0.012216700441817602	DESIGN
We must return a valid RDMS/RSA command from this method to prevent RDMS/RSA from issuing ERROR 400	WITHOUT_CLASSIFICATION	0.9915989847187279	WITHOUT_CLASSIFICATION	0.00840101528127218	DESIGN
Oracle driver reports to support getGeneratedKeys(), but they only support the version taking an array of the names of the columns to be returned (via its RETURNING clause). No other driver seems to support this overloaded version.	WITHOUT_CLASSIFICATION	0.9991036095381975	WITHOUT_CLASSIFICATION	8.963904618024017E-4	DESIGN
add the comment nest the main query in an outer select add the rownnumber bit into the outer query select list	WITHOUT_CLASSIFICATION	0.9997530365137368	WITHOUT_CLASSIFICATION	2.469634862631799E-4	DESIGN
You may still have other ResultSets or update counts left to process here but you can't do it now or the ResultSet you just got will be closed	WITHOUT_CLASSIFICATION	0.9999661182020815	WITHOUT_CLASSIFICATION	3.388179791861379E-5	DESIGN
Note: For object <-> SQL datatype mappings see: Configuration Manager | Advanced | SQL | System DDL Datatype Mappings TBDregisterColumnType(Types.BINARY, "binary($1)"); changed 08-11-2005, jsl	WITHOUT_CLASSIFICATION	0.9999534914042497	WITHOUT_CLASSIFICATION	4.6508595750332864E-5	DESIGN
TRIM(end_keyword string-expression-1 FROM string-expression-2) use Hibernate implementation "From" is one of the parameters they pass in position ?3 registerFunction( "trim", new SQLFunctionTemplate(Hibernate.STRING, "trim(?1 ?2 from ?3)") );	WITHOUT_CLASSIFICATION	0.9998693113682177	WITHOUT_CLASSIFICATION	1.306886317823231E-4	DESIGN
Whether this dialect has an Identity clause added to the data type or a completely seperate identity data type	WITHOUT_CLASSIFICATION	0.9991194869825715	WITHOUT_CLASSIFICATION	8.805130174284799E-4	DESIGN
According to both the ANSI-SQL and JPA specs, trim takes a variable number of parameters between 1 and 4. at least one paramer (trimSource) is required. From the SQL spec: <trim function> ::= TRIM <left paren> <trim operands> <right paren> <trim operands> ::= [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> <trim specification> ::= LEADING | TRAILING | BOTH If <trim specification> is omitted, BOTH is assumed. If <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999965818051849	WITHOUT_CLASSIFICATION	3.4181948151521382E-6	DESIGN
/ Prepare persisters and link them up with their cache region/access-strategy	WITHOUT_CLASSIFICATION	0.9995577925110585	WITHOUT_CLASSIFICATION	4.4220748894153794E-4	DESIGN
Named Queries:	WITHOUT_CLASSIFICATION	0.9998192731054069	WITHOUT_CLASSIFICATION	1.8072689459315214E-4	DESIGN
this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9705203111288978	WITHOUT_CLASSIFICATION	0.02947968887110226	DESIGN
does not handle arrays (thats ok, cos they can't be lazy) or newly instantiated collections, so we can do the cast	WITHOUT_CLASSIFICATION	0.9214710849672738	WITHOUT_CLASSIFICATION	0.0785289150327261	DESIGN
collection deletions are a special case since update() can add deletions of collections not loaded by the session.	WITHOUT_CLASSIFICATION	0.9998895878958313	WITHOUT_CLASSIFICATION	1.104121041687667E-4	DESIGN
we can do the cast since orphan-delete does not apply to: 1. newly instantiated collections 2. arrays (we can't track orphans for detached arrays)	WITHOUT_CLASSIFICATION	0.9994526031279125	WITHOUT_CLASSIFICATION	5.473968720874886E-4	DESIGN
if the natural-id is marked as non-mutable, it is not retrieved during a normal database-snapshot operation...	WITHOUT_CLASSIFICATION	0.9996669260143989	WITHOUT_CLASSIFICATION	3.33073985601199E-4	DESIGN
watch out for a case where old is still referenced somewhere in the object graph! (which is a user error)	WITHOUT_CLASSIFICATION	0.9998572723859428	WITHOUT_CLASSIFICATION	1.4272761405725135E-4	DESIGN
slice, to get the columns for this component property	WITHOUT_CLASSIFICATION	0.999433002711212	WITHOUT_CLASSIFICATION	5.66997288787978E-4	DESIGN
int result = 17; result = 37 result + type.hashCode(); result = 37 result + ( value==null ? 0 : value.hashCode() ); return result;	WITHOUT_CLASSIFICATION	0.9999888302525604	WITHOUT_CLASSIFICATION	1.1169747439561727E-5	DESIGN
The CollectionEntry.isReached() stuff is just to detect any silly users who set up circular or shared references between/to collections.	WITHOUT_CLASSIFICATION	0.9999661234604004	WITHOUT_CLASSIFICATION	3.3876539599597784E-5	DESIGN
detached collection wrappers that get found + reattached during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9991822693726977	WITHOUT_CLASSIFICATION	8.177306273022694E-4	DESIGN
The unique property value represented here may or may not be serializable, so we do an explicit check here in order to generate a better error message	WITHOUT_CLASSIFICATION	0.9994528845825164	WITHOUT_CLASSIFICATION	5.47115417483603E-4	DESIGN
if the version of a newly instantiated object is not the same as the version seed value, use that as the unsaved-value	WITHOUT_CLASSIFICATION	0.9995969455015681	WITHOUT_CLASSIFICATION	4.030544984318601E-4	DESIGN
ie. we never have to null out a reference to an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9993140232779227	WITHOUT_CLASSIFICATION	6.859767220772805E-4	DESIGN
ignore this row, the collection is in process of being loaded somewhere further "up" the stack	WITHOUT_CLASSIFICATION	0.9992806335427978	WITHOUT_CLASSIFICATION	7.193664572021833E-4	DESIGN
Entity load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ currently, not yet used...	WITHOUT_CLASSIFICATION	0.9919949905432989	WITHOUT_CLASSIFICATION	0.00800500945670116	DESIGN
should be ok performance-wise to generate new delegate instances for each request since these are locally stack-scoped. Besides, it makes the code much easier to read than the old TransactionHelper stuff...	WITHOUT_CLASSIFICATION	0.9860917143893205	WITHOUT_CLASSIFICATION	0.013908285610679519	DESIGN
this implementation is supposed to tolerate incorrect unsaved-value mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9965662865746621	WITHOUT_CLASSIFICATION	0.003433713425337965	DESIGN
this implementation is supposed to tolerate incorrect unsaved-value mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9965662865746621	WITHOUT_CLASSIFICATION	0.003433713425337965	DESIGN
wrap up any new collections directly referenced by the object or its components	WITHOUT_CLASSIFICATION	0.9999589777169011	WITHOUT_CLASSIFICATION	4.1022283098807595E-5	DESIGN
remove any snapshot, not really for memory management purposes, but rather because it might now be stale, and there is no longer any EntityEntry to take precedence This is now handled by removeEntity() session.getPersistenceContext().removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.8137823078556243	WITHOUT_CLASSIFICATION	0.18621769214437575	DESIGN
skip this check for composite-ids relating to dom4j entity-mode; alternatively, we could add a check to make sure the incoming id value is an instance of Element...	WITHOUT_CLASSIFICATION	0.977453117390022	WITHOUT_CLASSIFICATION	0.02254688260997795	DESIGN
upgrade the lock if necessary: lock(result, lockMode);	WITHOUT_CLASSIFICATION	0.999741730997863	WITHOUT_CLASSIFICATION	2.5826900213700584E-4	DESIGN
now, any collections that are initialized inside this block do not get updated - they are ignored until the next flush	WITHOUT_CLASSIFICATION	0.9539713205982547	WITHOUT_CLASSIFICATION	0.04602867940174525	DESIGN
we must clone embedded composite identifiers, or we will get back the same instance that we pass in	WITHOUT_CLASSIFICATION	0.9999754534539582	WITHOUT_CLASSIFICATION	2.454654604186812E-5	DESIGN
Sub-insertions should occur before containing insertion so Try to do the callback now	WITHOUT_CLASSIFICATION	0.9924530693930342	WITHOUT_CLASSIFICATION	0.007546930606965817	DESIGN
the entity is not associated with the session, so try interceptor and unsaved-value	WITHOUT_CLASSIFICATION	0.9998808986334928	WITHOUT_CLASSIFICATION	1.1910136650729112E-4	DESIGN
scan the query string for class names appearing in the from clause and replace with all persistent implementors of the class/interface, returning multiple query strings (make sure we don't pick up a class in the select clause!)	WITHOUT_CLASSIFICATION	0.996176469478583	WITHOUT_CLASSIFICATION	0.00382353052141708	DESIGN
save() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992949576336095	WITHOUT_CLASSIFICATION	7.050423663904948E-4	DESIGN
evict() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992949576336095	WITHOUT_CLASSIFICATION	7.050423663904948E-4	DESIGN
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.997730145618426	WITHOUT_CLASSIFICATION	0.0022698543815740887	DESIGN
if it is an uninitialized proxy, pointing with this session, then when it is accessed, the underlying instance will be "contained"	WITHOUT_CLASSIFICATION	0.9998015678728305	WITHOUT_CLASSIFICATION	1.9843212716957323E-4	DESIGN
Generate an explicit join for the root dot node. The implied joins will be collected and passed up to the root dot node.	WITHOUT_CLASSIFICATION	0.9999834715821871	WITHOUT_CLASSIFICATION	1.6528417812901625E-5	DESIGN
A session is considered to contain an entity only if the entity has an entry in the session's persistence context and the entry reports that the entity has not been removed	WITHOUT_CLASSIFICATION	0.9986619135050382	WITHOUT_CLASSIFICATION	0.001338086494961828	DESIGN
Does the collection referenced by this FromElement specify an order-by attribute? If so, attach it to the query's order-by	WITHOUT_CLASSIFICATION	0.9968216676280682	WITHOUT_CLASSIFICATION	0.0031783323719317474	DESIGN
... and the token could be an identifer and the error is a mismatched token error ...	WITHOUT_CLASSIFICATION	0.993082197686161	WITHOUT_CLASSIFICATION	0.00691780231383896	DESIGN
If a where clause was specified in the update/delete query, use it to limit the returned ids here...	WITHOUT_CLASSIFICATION	0.9998821152659082	WITHOUT_CLASSIFICATION	1.1788473409175559E-4	DESIGN
int parameterStart = getWalker().getNumberOfParametersInSetClause(); List allParams = getIdSelectParameterSpecifications(); Iterator whereParams = allParams.subList( parameterStart, allParams.size() ).iterator();	WITHOUT_CLASSIFICATION	0.9998837995279342	WITHOUT_CLASSIFICATION	1.1620047206589712E-4	DESIGN
Default implementation: If this node has a data type, and that data type is not an association, then this is scalar.	WITHOUT_CLASSIFICATION	0.9949436670759042	WITHOUT_CLASSIFICATION	0.00505633292409584	DESIGN
Resolve the LHS fully, generate implicit joins. Pass in the property name so that the resolver can discover foreign key (id) properties.	WITHOUT_CLASSIFICATION	0.9999714673085096	WITHOUT_CLASSIFICATION	2.8532691490376685E-5	DESIGN
If the propertyType is null and there isn't a parent, just stop now... there was a problem resolving the node anyway.	WITHOUT_CLASSIFICATION	0.9996086236441667	WITHOUT_CLASSIFICATION	3.9137635583333695E-4	DESIGN
We do not look for an existing join on the same path, because it makes sense to join twice on the same collection role	WITHOUT_CLASSIFICATION	0.99744032432272	WITHOUT_CLASSIFICATION	0.0025596756772800077	DESIGN
our parent is another dot node, meaning we are being further dereferenced. thus we need to generate a join unless the parent refers to the associated entity's PK (because 'our' table would know the FK).	WITHOUT_CLASSIFICATION	0.9996477340667931	WITHOUT_CLASSIFICATION	3.522659332069071E-4	DESIGN
public final Currency getCurrency(int col) throws HibernateException {return (Currency) get(col);}	WITHOUT_CLASSIFICATION	0.9991488070715632	WITHOUT_CLASSIFICATION	8.511929284367723E-4	DESIGN
here, we have two possibilities: 1) the property-name matches the explicitly identifier property name 2) the property-name matches the implicit 'id' property name	WITHOUT_CLASSIFICATION	0.9999598683438963	WITHOUT_CLASSIFICATION	4.013165610367775E-5	DESIGN
Set the unresolved path in this node and the parent. Set the text for the parent.	WITHOUT_CLASSIFICATION	0.9994586444660979	WITHOUT_CLASSIFICATION	5.413555339020034E-4	DESIGN
Get the first child to be considered. Sub-classes may do this differently in order to skip nodes that are not select expressions (e.g. DISTINCT).	WITHOUT_CLASSIFICATION	0.9978606364488626	WITHOUT_CLASSIFICATION	0.002139363551137488	DESIGN
If this is an entity and the property is the identifier property, then use getIdentifierType(). Note that the propertyName.equals( propertyPath ) checks whether we have a component key reference, where the component class property name is the same as the entity id property name; if the two are not equal, this is the case and we'd need to "fall through" to using the property mapping.	WITHOUT_CLASSIFICATION	0.9999920504665581	WITHOUT_CLASSIFICATION	7.949533441947056E-6	DESIGN
for a subquery, the alias to use depends on a few things (we already know this is not an overall SELECT): 1) if this FROM_ELEMENT represents a correlation to the outer-most query A) if the outer query represents a multi-table persister, we need to use the given alias in anticipation of one of the multi-table executors being used (as this subquery will actually be used in the "id select" phase of that multi-table executor) B) otherwise, we need to use the persister's table name as the column qualification 2) otherwise (not correlated), use the given alias	WITHOUT_CLASSIFICATION	0.8480772075964976	DESIGN	0.15192279240350237	WITHOUT_CLASSIFICATION
Not a collection? Return the entity property mapping.	WITHOUT_CLASSIFICATION	0.991742647707808	WITHOUT_CLASSIFICATION	0.00825735229219209	DESIGN
collection of <many-to-any/> mappings... used to circumvent the component-collection check below...	WITHOUT_CLASSIFICATION	0.8962058938810474	WITHOUT_CLASSIFICATION	0.10379410611895248	DESIGN
Otherwise, the destination node was implied by the FROM clause and the FROM clause processor will automatically add it in the right place.	WITHOUT_CLASSIFICATION	0.9997239282339673	WITHOUT_CLASSIFICATION	2.760717660328258E-4	DESIGN
If the first identifier in the path referrs to the class alias (not the class name), then this is a correlated subselect. If it's a correlated sub-select, use the existing table alias. Otherwise generate a new one.	WITHOUT_CLASSIFICATION	0.9904392606145547	WITHOUT_CLASSIFICATION	0.009560739385445409	DESIGN
check to see if our "propPath" actually represents a property on the persister	WITHOUT_CLASSIFICATION	0.9997384710249506	WITHOUT_CLASSIFICATION	2.6152897504941655E-4	DESIGN
An ident node can represent an index expression if the ident represents a naked property ref Note: this makes the assumption (which is currently the case in the hql-sql grammar) that the ident is first resolved itself (addrExpr -> resolve()). The other option, if that changes, is to call resolve from here; but it is currently un-needed overhead.	WITHOUT_CLASSIFICATION	0.9999993596509972	WITHOUT_CLASSIFICATION	6.403490027716349E-7	DESIGN
This uses a PathExpressionParser but notice that compound paths are not valid, only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9675002889629725	WITHOUT_CLASSIFICATION	0.03249971103702742	DESIGN
If this is an implied join in a FROM clause, then use ANSI-style joining, and set the flag on the FromElement that indicates that it was implied in the FROM clause itself.	WITHOUT_CLASSIFICATION	0.9985838785978692	WITHOUT_CLASSIFICATION	0.0014161214021308002	DESIGN
origin.addDestination(destination); Add the query spaces.	WITHOUT_CLASSIFICATION	0.9995614098243001	WITHOUT_CLASSIFICATION	4.3859017569991115E-4	DESIGN
For an explicit many-to-many relationship, add a second join from the intermediate (many-to-many) table to the destination table. Also, make sure that the from element's idea of the destination is the destination table.	WITHOUT_CLASSIFICATION	0.9999572628546304	WITHOUT_CLASSIFICATION	4.273714536970581E-5	DESIGN
Reset the node type, because the rest of the system is expecting FROM_FRAGMENT, all we wanted was for the factory to create the right sub-class. This might get reset again later on anyway to make the SQL generation simpler.	WITHOUT_CLASSIFICATION	0.9790334263190001	DESIGN	0.02096657368099983	WITHOUT_CLASSIFICATION
explicit = true; This is an explict Select. ArrayList sqlResultTypeList = new ArrayList();	WITHOUT_CLASSIFICATION	0.9994109401365625	WITHOUT_CLASSIFICATION	5.890598634374064E-4	DESIGN
sqlResultTypeList.add( type ); Generate the select expression.	WITHOUT_CLASSIFICATION	0.9956461920778817	WITHOUT_CLASSIFICATION	0.004353807922118202	DESIGN
If the expression list has exactly one expression, and the type of the expression is a collection then this might be a collection function, such as index(c) or size(c).	WITHOUT_CLASSIFICATION	0.9986319961198684	WITHOUT_CLASSIFICATION	0.0013680038801315172	DESIGN
Need to parse off the column qualifiers; this is assuming (which is true as of now) that this is only used from update and delete HQL statement parsing	WITHOUT_CLASSIFICATION	0.9998447503579051	WITHOUT_CLASSIFICATION	1.5524964209486205E-4	DESIGN
for regression testing against output from the old parser... found it easiest to simply reorder the FromElements here into ascending order in terms of injecting them into the resulting sql ast in orders relative to those expected by the old parser; this is definitely another of those "only needed for regression purposes". The SyntheticAndFactory, then, simply injects them as it encounters them.	WITHOUT_CLASSIFICATION	0.9999914780026593	WITHOUT_CLASSIFICATION	8.52199734076118E-6	DESIGN
The uber-rule here is that we need to include subclass joins if the FromElement is in any way dereferenced by a property from the subclass table; otherwise we end up with column references qualified by a non-existent table reference in the resulting SQL...	WITHOUT_CLASSIFICATION	0.9996966986712903	WITHOUT_CLASSIFICATION	3.0330132870969294E-4	DESIGN
classic translator does not support collection of ordinal param metadata	WITHOUT_CLASSIFICATION	0.9805867497939662	WITHOUT_CLASSIFICATION	0.019413250206033798	DESIGN
The following variables are stacks that keep information about each subexpression in the list of nested subexpressions we are currently processing.	WITHOUT_CLASSIFICATION	0.998871042054752	WITHOUT_CLASSIFICATION	0.0011289579452481177	DESIGN
The loop ensures atomicity of the select + update even for no transaction or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999994247615029	WITHOUT_CLASSIFICATION	5.752384971352723E-7	DESIGN
should not be able to reach last without maxPosition being set unless there are no results	WITHOUT_CLASSIFICATION	0.9993219868282516	WITHOUT_CLASSIFICATION	6.780131717485172E-4	DESIGN
we found it in the temp PC. Should indicate we are in the midst of processing a result set containing eager fetches via join fetch	WITHOUT_CLASSIFICATION	0.9998348129410218	WITHOUT_CLASSIFICATION	1.6518705897822805E-4	DESIGN
do not use proxiesByKey, since not all proxies that point to this session's instances are in that collection!	WITHOUT_CLASSIFICATION	0.9883782867920079	WITHOUT_CLASSIFICATION	0.01162171320799209	DESIGN
if there is no TM configured, we will not be able to access the javax.transaction.Transaction object in order to register a synch anyway.	WITHOUT_CLASSIFICATION	0.999781769958698	WITHOUT_CLASSIFICATION	2.1823004130200156E-4	DESIGN
Since the result set cursor is always left at the first physical row after the "last processed", we need to jump back one position to get the key value we are interested in skipping	WITHOUT_CLASSIFICATION	0.9999584140972952	WITHOUT_CLASSIFICATION	4.158590270479508E-5	DESIGN
true if this is a query and we are loading multiple instances of the same collection role otherwise this is a CollectionInitializer and we are loading up a single collection or batch	WITHOUT_CLASSIFICATION	0.9997115518324037	WITHOUT_CLASSIFICATION	2.8844816759636166E-4	DESIGN
we don't need to worry about existing version being uninitialized because this block isn't called by a re-entrant load (re-entrant loads _always_ have lock mode NONE)	WITHOUT_CLASSIFICATION	0.9961482312200133	WITHOUT_CLASSIFICATION	0.00385176877998665	DESIGN
add temp entry so that the next step is circular-reference safe - only needed because some types don't take proper advantage of two-phase-load (esp. components)	WITHOUT_CLASSIFICATION	0.9997959245293894	WITHOUT_CLASSIFICATION	2.0407547061061638E-4	DESIGN
assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9990729155246666	WITHOUT_CLASSIFICATION	9.270844753335397E-4	DESIGN
log a message about potential connection leaks	WITHOUT_CLASSIFICATION	0.9995607019422926	WITHOUT_CLASSIFICATION	4.392980577074708E-4	DESIGN
ps.close(); just close it; do NOT try to return it to the pool! NOTE: early exit!	WITHOUT_CLASSIFICATION	0.9999794509982552	WITHOUT_CLASSIFICATION	2.0549001744786755E-5	DESIGN
this has been shown to happen occasionally in rare cases when using a transaction manager + transaction-timeout where the timeout calls back through Hibernate's registered transaction synchronization on a separate "reaping" thread. In cases where that reaping thread executes through this block at the same time the main application thread does we can get into situations where these CMEs occur. And though it is not "allowed" per-se, the end result without handling it specifically is infinite looping. So here, we simply break the loop	WITHOUT_CLASSIFICATION	0.9993573496930336	WITHOUT_CLASSIFICATION	6.426503069663766E-4	DESIGN
unfortunately this stuff can't be cached because it is per-invocation, not constant for the QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9971252121984842	WITHOUT_CLASSIFICATION	0.00287478780151584	DESIGN
can't cache this stuff either (per-invocation) we are given a map of user-alias -> lock mode create a new map of sql-alias -> lock mode	WITHOUT_CLASSIFICATION	0.9991635499702134	WITHOUT_CLASSIFICATION	8.364500297866232E-4	DESIGN
don't create a unique key, 'cos some databases don't like a UK on nullable columns getCollectionTable().createUniqueKey( getIdentifier().getConstraintColumns() );	WITHOUT_CLASSIFICATION	0.9916828994184418	WITHOUT_CLASSIFICATION	0.008317100581558224	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993854699153492	WITHOUT_CLASSIFICATION	6.145300846508145E-4	DESIGN
isSet = collection.isSet(); isSorted = collection.isSorted();	WITHOUT_CLASSIFICATION	0.9996067502678262	WITHOUT_CLASSIFICATION	3.9324973217382545E-4	DESIGN
lists, arrays sets, maps, bags	WITHOUT_CLASSIFICATION	0.9995892464351799	WITHOUT_CLASSIFICATION	4.1075356482009453E-4	DESIGN
we finish all the "removes" first to take care of possible unique constraints and so that we can take better advantage of batching	WITHOUT_CLASSIFICATION	0.9979565938740788	WITHOUT_CLASSIFICATION	0.002043406125921186	DESIGN
use a combination of foreign key columns and pk columns, since the ordering of removal and addition is not guaranteed when a child moves from one parent to another	WITHOUT_CLASSIFICATION	0.9993885860541248	WITHOUT_CLASSIFICATION	6.114139458751714E-4	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993854699153492	WITHOUT_CLASSIFICATION	6.145300846508145E-4	DESIGN
information about properties of this class, including inherited properties (only really needed for updatable/insertable properties)	WITHOUT_CLASSIFICATION	0.9993845322680182	WITHOUT_CLASSIFICATION	6.154677319818382E-4	DESIGN
all this only really needs to consider properties of this class, not its subclasses, but since we are reusing code used for sequential selects, we use the subclass closure	WITHOUT_CLASSIFICATION	0.941993713883208	DESIGN	0.05800628611679199	WITHOUT_CLASSIFICATION
Here we render the select column list based on the properties defined as being generated. For partial component generation, we currently just re-select the whole component rather than trying to handle the individual generated portions.	WITHOUT_CLASSIFICATION	0.9977392212304381	WITHOUT_CLASSIFICATION	0.002260778769561935	DESIGN
this is the root (versioned) table, and we are using version-based optimistic locking; if we are not updating the version, also don't check it (unless this is a "generated" version column)!	WITHOUT_CLASSIFICATION	0.9994306566395197	WITHOUT_CLASSIFICATION	5.693433604804325E-4	DESIGN
optimistic-lock="all", include all updatable properties optimistic-lock="dirty", include all properties we are updating this time	WITHOUT_CLASSIFICATION	0.9997852123947478	WITHOUT_CLASSIFICATION	2.1478760525224042E-4	DESIGN
this property belongs to the table, and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.996979009941902	WITHOUT_CLASSIFICATION	0.003020990058098033	DESIGN
check to see if the connection is in auto-commit mode (no connection means aggressive connection release outside a JTA transaction context, so MUST be autocommit mode)	WITHOUT_CLASSIFICATION	0.9997472930686878	WITHOUT_CLASSIFICATION	2.527069313121376E-4	DESIGN
need to treat this as if it where optimistic-lock="all" (dirty does not make sense); first we need to locate the "loaded" state Note, it potentially could be a proxy, so perform the location the safe way...	WITHOUT_CLASSIFICATION	0.8330234861388727	WITHOUT_CLASSIFICATION	0.16697651386112736	DESIGN
we always assume an instance with a null identifier or no identifier property is unsaved!	WITHOUT_CLASSIFICATION	0.9990542068997368	WITHOUT_CLASSIFICATION	9.45793100263105E-4	DESIGN
Need to use the identifier type of the collection owner since the incoming is value is actually the owner's id. Using the collection's key type causes problems with property-ref keys...	WITHOUT_CLASSIFICATION	0.9975289823905775	WITHOUT_CLASSIFICATION	0.0024710176094225275	DESIGN
allow any identifier quoted with backtick only recognizes identifiers beginning with a letter	WITHOUT_CLASSIFICATION	0.9983611232979503	WITHOUT_CLASSIFICATION	0.0016388767020497285	DESIGN
following doesn't handle (null, not null) but unnecessary since this would mean all rows	WITHOUT_CLASSIFICATION	0.9982247332924776	WITHOUT_CLASSIFICATION	0.001775266707522328	DESIGN
IMPL NOTE : due to the delayed population of setters (setters cached for performance), we really cannot pro0perly define equality for this transformer	WITHOUT_CLASSIFICATION	0.9992000715699088	WITHOUT_CLASSIFICATION	7.999284300912261E-4	DESIGN
we need to dirty check collections, since they can cause an owner version number increment	WITHOUT_CLASSIFICATION	0.9996900877994298	WITHOUT_CLASSIFICATION	3.0991220057010346E-4	DESIGN
return the id, so we can use it to reset the proxy id return result;	WITHOUT_CLASSIFICATION	0.9999105024946107	WITHOUT_CLASSIFICATION	8.949750538926611E-5	DESIGN
optimizer = getFactory().getSettings().getBytecodeProvider().getReflectionOptimizer( mappedClass, getterNames, setterNames, propTypes );	WITHOUT_CLASSIFICATION	0.999613456599241	WITHOUT_CLASSIFICATION	3.865434007590797E-4	DESIGN
cache the actual id of the object, not the value of the property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9986321932914356	WITHOUT_CLASSIFICATION	0.001367806708564448	DESIGN
We now have the value of the property-ref we reference. However, we need to dig a little deeper, as that property might also be an entity type, in which case we need to resolve its identitifier	WITHOUT_CLASSIFICATION	0.9999549867820238	WITHOUT_CLASSIFICATION	4.501321797629721E-5	DESIGN
Retrieve the value of the designated column in the current row of this ResultSet object as a java.io.Reader object	WITHOUT_CLASSIFICATION	0.9999691755250419	WITHOUT_CLASSIFICATION	3.082447495817138E-5	DESIGN
not absolutely necessary, but helps for some equals()/hashCode() implementations	WITHOUT_CLASSIFICATION	0.9969553257376463	WITHOUT_CLASSIFICATION	0.0030446742623536356	DESIGN
this should be a call to resolve(), not resolveIdentifier(), 'cos it might be a property-ref, and we did not cache the referenced value	WITHOUT_CLASSIFICATION	0.9234447355686065	WITHOUT_CLASSIFICATION	0.07655526443139343	DESIGN
If we have <tt>not-found="ignore"</tt> association mapped to a formula, we always need to dirty check it, so we can update the second-level cache	WITHOUT_CLASSIFICATION	0.9997540782156064	WITHOUT_CLASSIFICATION	2.459217843935885E-4	DESIGN
can't just return null here, since that would cause an owning component to become null	WITHOUT_CLASSIFICATION	0.9995611791498418	WITHOUT_CLASSIFICATION	4.3882085015822944E-4	DESIGN
for arrays, replaceElements() may return a different reference, since the array length might not match	WITHOUT_CLASSIFICATION	0.9954519223827072	WITHOUT_CLASSIFICATION	0.004548077617292779	DESIGN
actual cache of the entries. soft references are used for both the keys and the values here since the values pertaining to the MRU entries are kept in a seperate hard reference cache (to avoid their enqueuement/garbage-collection).	WITHOUT_CLASSIFICATION	0.9272738275696084	WITHOUT_CLASSIFICATION	0.07272617243039158	DESIGN
as soon as we encounter our first letter, return the substring from that position	WITHOUT_CLASSIFICATION	0.9988803737115681	WITHOUT_CLASSIFICATION	0.0011196262884319349	DESIGN
Note : expected in the syntax: type=listenerClass ({sep}type=listenerClass) where {sep} is any whitespace or comma	WITHOUT_CLASSIFICATION	0.9999480083536771	WITHOUT_CLASSIFICATION	5.1991646322860314E-5	DESIGN
isTransactionCallbackRegistered denotes whether any Hibernate Transaction has registered as a callback against this JDBCContext; only one such callback is allowed. Directly serializing this value causes problems with JDBCTransaction, or really any Transaction impl where the callback is local to the Transaction instance itself, since that Transaction is not serialized along with the JDBCContext. Thus we handle that fact here explicitly...	WITHOUT_CLASSIFICATION	0.9947790426927459	WITHOUT_CLASSIFICATION	0.005220957307254121	DESIGN
note that for sequential scrolling, we make the assumption that the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9324947514695417	WITHOUT_CLASSIFICATION	0.06750524853045824	DESIGN
We call getKeyFromResultSet() here so that we can know the key value upon which to perform the breaking logic. However, it is also then called from getRowFromResultSet() which is certainly not the most efficient. But the call here is needed, and there currently is no other way without refactoring of the doQuery()/getRowFromResultSet() methods	WITHOUT_CLASSIFICATION	0.9879540232731732	WITHOUT_CLASSIFICATION	0.01204597672682689	DESIGN
This check is needed since processing leaves the cursor after the last physical row for the current logical row; thus if we are after the last physical row, this might be caused by either: 1) scrolling to the last logical row 2) scrolling past the last logical row In the latter scenario, the previous logical row really is the last logical row. In all other cases, we should process back two logical records (the current logic row, plus the previous logical row).	WITHOUT_CLASSIFICATION	0.9934820031015219	WITHOUT_CLASSIFICATION	0.006517996898478138	DESIGN
and perform the load	WITHOUT_CLASSIFICATION	0.999777041410463	WITHOUT_CLASSIFICATION	2.22958589537064E-4	DESIGN
important: reuse the same event instances for performance!	WITHOUT_CLASSIFICATION	0.9996739618023339	WITHOUT_CLASSIFICATION	3.2603819766608707E-4	DESIGN
this is a query and we are loading multiple instances of the same collection role	WITHOUT_CLASSIFICATION	0.9929852863428472	WITHOUT_CLASSIFICATION	0.00701471365715279	DESIGN
we found a collection element in the result set	WITHOUT_CLASSIFICATION	0.9972768454300628	WITHOUT_CLASSIFICATION	0.0027231545699372478	DESIGN
we did not find a collection element in the result set, so we ensure that a collection is created with the owner's identifier, since what we have is an empty collection	WITHOUT_CLASSIFICATION	0.9997207357156875	WITHOUT_CLASSIFICATION	2.7926428431236774E-4	DESIGN
this is a collection initializer, so we must create a collection for each of the passed-in keys, to account for the possibility that the collection is empty and has no rows in the result set	WITHOUT_CLASSIFICATION	0.9970404231239939	WITHOUT_CLASSIFICATION	0.0029595768760060847	DESIGN
grab its state from the ResultSet and keep it in the Session (but don't yet initialize the object itself) note that we acquire LockMode.READ even if it was not requested	WITHOUT_CLASSIFICATION	0.9986682041264142	WITHOUT_CLASSIFICATION	0.001331795873585698	DESIGN
a many-to-many; decrement currentDepth here to allow join across the association table without exceeding MAX_FETCH_DEPTH (i.e. the "currentDepth - 1" bit)	WITHOUT_CLASSIFICATION	0.9088909826927412	WITHOUT_CLASSIFICATION	0.09110901730725883	DESIGN
if not a composite key, use "foo in (?, ?, ?)" for batching if no batch, and not a composite key, use "foo = ?"	WITHOUT_CLASSIFICATION	0.9961048010802602	WITHOUT_CLASSIFICATION	0.0038951989197397504	DESIGN
the user visible aliases, which are unknown to the superclass, these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.999925646974233	WITHOUT_CLASSIFICATION	7.435302576697662E-5	DESIGN
first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9989972823079268	WITHOUT_CLASSIFICATION	0.001002717692073207	DESIGN
first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9989972823079268	WITHOUT_CLASSIFICATION	0.001002717692073207	DESIGN
it does not refer to an alias of a projection, look for a property	WITHOUT_CLASSIFICATION	0.9991735547774654	WITHOUT_CLASSIFICATION	8.264452225345088E-4	DESIGN
determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9994206988592239	WITHOUT_CLASSIFICATION	5.793011407761254E-4	DESIGN
Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9992104796055125	WITHOUT_CLASSIFICATION	7.895203944875027E-4	DESIGN
Translates an AST join type (i.e., the token type) into a JoinFragment.XXX join type. @param astJoinType The AST join type (from HqlSqlTokenTypes or SqlTokenTypes) @return a JoinFragment.XXX join type. @see JoinFragment @see SqlTokenTypes	WITHOUT_CLASSIFICATION	0.9990414155683345	WITHOUT_CLASSIFICATION	9.585844316655577E-4	DESIGN
ignore	WITHOUT_CLASSIFICATION	0.9984534187512447	WITHOUT_CLASSIFICATION	0.0015465812487552983	DESIGN
ignore	WITHOUT_CLASSIFICATION	0.9984534187512447	WITHOUT_CLASSIFICATION	0.0015465812487552983	DESIGN
}	WITHOUT_CLASSIFICATION	0.9989524860823941	WITHOUT_CLASSIFICATION	0.001047513917605972	DESIGN
public List getCollectionAliases() { return collectionAliases; } public List getCollectionOwners() { return collectionOwners; } public List getCollectionOwnerAliases() { return collectionOwnerAliases; } public List getCollectionPersisters() { return collectionPersisters; } public Map getAlias2Persister() { return alias2Persister; } public boolean isCollectionInitializer() { return isCollectionInitializer; } public List getPersisters() { return persisters; } public Map getAlias2OwnerAlias() { return alias2OwnerAlias; } public List getScalarTypes() { return scalarTypes; } public List getScalarColumnAliases() { return scalarColumnAliases; } public List getPropertyResults() { return propertyResults; } public List getCollectionPropertyResults() { return collectionResults; } public Map getAlias2Return() { return alias2Return; }	WITHOUT_CLASSIFICATION	0.9995548121083361	WITHOUT_CLASSIFICATION	4.451878916639625E-4	DESIGN
SQLQueryParser parser = new SQLQueryParser( sqlQuery, processor.getAlias2Persister(), processor.getAlias2Return(), aliases, collAliases, collPersisters, suffixes, collSuffixes ); sql = parser.process(); namedParameterBindPoints = parser.getNamedParameters();	WITHOUT_CLASSIFICATION	0.9992118061952695	WITHOUT_CLASSIFICATION	7.881938047305583E-4	DESIGN
include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.998915796349135	WITHOUT_CLASSIFICATION	0.0010842036508651174	DESIGN
sqlAliasSuffixes[i] = element.getColumnAliasSuffix();	WITHOUT_CLASSIFICATION	0.9996067502678262	WITHOUT_CLASSIFICATION	3.9324973217382545E-4	DESIGN
NONE, because its the requested lock mode, not the actual!	WITHOUT_CLASSIFICATION	0.9997135113976665	WITHOUT_CLASSIFICATION	2.8648860233343676E-4	DESIGN
at this point we have (drivingSqlAlias) the SQL alias of the driving table corresponding to the given user alias. However, the driving table is not (necessarily) the table against which we want to apply locks. Mainly, the exception case here is joined-subclass hierarchies where we instead want to apply the lock against the root table (for all other strategies, it just happens that driving and root are the same).	WITHOUT_CLASSIFICATION	0.9989734533619113	WITHOUT_CLASSIFICATION	0.0010265466380886996	DESIGN
the column doesnt exist at all.	WITHOUT_CLASSIFICATION	0.9994745224011734	WITHOUT_CLASSIFICATION	5.254775988265434E-4	DESIGN
we have a mapped identifier property and the root of the incoming property path matched that identifier property	WITHOUT_CLASSIFICATION	0.999913480582956	WITHOUT_CLASSIFICATION	8.651941704402421E-5	DESIGN
we have an embedded composite identifier	WITHOUT_CLASSIFICATION	0.9993057738087174	WITHOUT_CLASSIFICATION	6.94226191282635E-4	DESIGN
both many-to-one and one-to-one are represented as a Property. EntityPersister is relying on this value to determine "lazy fetch groups" in terms of field-level interception. So we need to make sure that we return true here for the case of many-to-one and one-to-one with lazy="no-proxy" impl note - lazy="no-proxy" currently forces both lazy and unwrap to be set to true. The other case we are extremely interested in here is that of lazy="proxy" where lazy is set to true, but unwrap is set to false. thus we use both here under the assumption that this return is really only ever used during persister construction to determine the lazy property/field fetch groupings. If that assertion changes then this check needs to change as well. Partially, this is an issue with the overloading of the term "lazy" here...	WITHOUT_CLASSIFICATION	0.9581430211402997	DESIGN	0.04185697885970023	WITHOUT_CLASSIFICATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997313456854445	WITHOUT_CLASSIFICATION	2.6865431455546225E-4	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997313456854445	WITHOUT_CLASSIFICATION	2.6865431455546225E-4	DESIGN
rootTableName = persistentClass.getRootTable().getQualifiedName( factory.getDialect(), factory.getDefaultCatalog(), factory.getDefaultSchema() );	WITHOUT_CLASSIFICATION	0.999613456599241	WITHOUT_CLASSIFICATION	3.865434007590797E-4	DESIGN
SUBCLASSES	WITHOUT_CLASSIFICATION	0.9991288176721137	WITHOUT_CLASSIFICATION	8.711823278862698E-4	DESIGN
Custom sql	WITHOUT_CLASSIFICATION	0.998934135695455	WITHOUT_CLASSIFICATION	0.0010658643045450215	DESIGN
protected void initPropertyPaths(final String path,final Type type,final String[] columns,final String[] formulaTemplates,final Mapping factory)throws MappingException {addFormulaPropertyPath(path, type, formulaTemplates);initPropertyPaths(path, type, columns, formulaTemplates, factory);}	WITHOUT_CLASSIFICATION	0.9934554329220187	WITHOUT_CLASSIFICATION	0.006544567077981394	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999356419707268	WITHOUT_CLASSIFICATION	6.435802927320741E-4	DESIGN
Custom SQL (would be better if these were private)	WITHOUT_CLASSIFICATION	0.9946730900686181	WITHOUT_CLASSIFICATION	0.005326909931381814	DESIGN
moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9962589449221025	WITHOUT_CLASSIFICATION	0.0037410550778975912	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999356419707268	WITHOUT_CLASSIFICATION	6.435802927320741E-4	DESIGN
aliases for identifier ( alias.id ); skip if the entity defines a non-id property named 'id'	WITHOUT_CLASSIFICATION	0.9996284272465464	WITHOUT_CLASSIFICATION	3.7157275345352513E-4	DESIGN
decide which ResultSet to get the property value from:	WITHOUT_CLASSIFICATION	0.9998694233333766	WITHOUT_CLASSIFICATION	1.3057666662339855E-4	DESIGN
note: it is conceptually possible that a UserType could map null to a non-null value, so the following is arguable:	WITHOUT_CLASSIFICATION	0.9999368554435571	WITHOUT_CLASSIFICATION	6.314455644278264E-5	DESIGN
the contract of EntityTuplizer.determineConcreteSubclassEntityName says that returning null is an indication that the specified entity-name (this.getEntityName) should be used.	WITHOUT_CLASSIFICATION	0.9940467373219944	WITHOUT_CLASSIFICATION	0.005953262678005483	DESIGN
Need to use the identifier type of the collection owner since the incoming is value is actually the owner's id. Using the collection's key type causes problems with property-ref keys...	WITHOUT_CLASSIFICATION	0.9975289823905775	WITHOUT_CLASSIFICATION	0.0024710176094225275	DESIGN
cache these since they are stateless this one could even be static...	WITHOUT_CLASSIFICATION	0.9188923573887053	WITHOUT_CLASSIFICATION	0.08110764261129466	DESIGN
"as" is not in KEYWORDS	WITHOUT_CLASSIFICATION	0.9975568796429347	WITHOUT_CLASSIFICATION	0.0024431203570652667	DESIGN
--Commented out by Inspection (12/4/04 9:10 AM): public abstract void addCondition(String alias, String[] columns, String condition);	WITHOUT_CLASSIFICATION	0.9985240157429864	WITHOUT_CLASSIFICATION	0.0014759842570134967	DESIGN
use the id column alias	WITHOUT_CLASSIFICATION	0.9997496991931127	WITHOUT_CLASSIFICATION	2.5030080688730454E-4	DESIGN
private List aliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9989879308378676	WITHOUT_CLASSIFICATION	0.0010120691621322811	DESIGN
columns.add(columnName); aliases.add(tableAlias);	WITHOUT_CLASSIFICATION	0.999356419707268	WITHOUT_CLASSIFICATION	6.435802927320741E-4	DESIGN
where fragment must be empty!	WITHOUT_CLASSIFICATION	0.9946062447431795	WITHOUT_CLASSIFICATION	0.0053937552568206265	DESIGN
revert to traditional hibernate behavior of setting initialPoolSize to minPoolSize unless otherwise specified with a c3p0.-style parameter.	WITHOUT_CLASSIFICATION	0.9996683437505722	WITHOUT_CLASSIFICATION	3.3165624942777303E-4	DESIGN
arbitrary on clause ignored!!	WITHOUT_CLASSIFICATION	0.9994163984972746	WITHOUT_CLASSIFICATION	5.836015027253274E-4	DESIGN
might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9933643293124296	WITHOUT_CLASSIFICATION	0.00663567068757042	DESIGN
might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9933643293124296	WITHOUT_CLASSIFICATION	0.00663567068757042	DESIGN
if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9997743010124027	WITHOUT_CLASSIFICATION	2.256989875972356E-4	DESIGN
Essentially: 1) If we have a local (Hibernate) transaction in progress and it already has the UserTransaction cached, use that UserTransaction to determine the status. 2) If a transaction manager has been located, use that transaction manager to determine the status. 3) Finally, as the last resort, try to lookup the UserTransaction via JNDI and use that to determine the status.	WITHOUT_CLASSIFICATION	0.9999728592932549	WITHOUT_CLASSIFICATION	2.7140706745229947E-5	DESIGN
package	WITHOUT_CLASSIFICATION	0.9957153436513405	WITHOUT_CLASSIFICATION	0.0042846563486594776	DESIGN
swallow it (the transaction _was_ successful or successfully rolled back)	WITHOUT_CLASSIFICATION	0.9991441802790745	WITHOUT_CLASSIFICATION	8.558197209255991E-4	DESIGN
ignore it	WITHOUT_CLASSIFICATION	0.998741122804289	WITHOUT_CLASSIFICATION	0.0012588771957110566	DESIGN
we need to dirty check many-to-ones with not-found="ignore" in order to update the cache (not the database), since in this case a null entity reference can lose information	WITHOUT_CLASSIFICATION	0.8364451714161024	WITHOUT_CLASSIFICATION	0.16355482858389755	DESIGN
create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999081933089746	WITHOUT_CLASSIFICATION	9.180669102545376E-5	DESIGN
Regions can get instantiated in the course of normal work (e.g. a named query region will be created the first time the query is executed), so suspend any ongoing tx	WITHOUT_CLASSIFICATION	0.999982562669016	WITHOUT_CLASSIFICATION	1.7437330984010547E-5	DESIGN
then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9979372240268443	WITHOUT_CLASSIFICATION	0.0020627759731557402	DESIGN
Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9989473288426368	WITHOUT_CLASSIFICATION	0.001052671157363194	DESIGN
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9865242412900427	WITHOUT_CLASSIFICATION	0.013475758709957257	DESIGN
NOTE : this is being used from the process of shutting down a SessionFactory. Specific things to consider: (1) this clearing of the region should not propagate to other nodes on the cluster (if any); this is the cache-mode-local option bit... (2) really just trying a best effort to cleanup after ourselves; lock failures, etc are not critical here; this is the fail-silently option bit...	WITHOUT_CLASSIFICATION	0.9891953570131397	DESIGN	0.010804642986860331	WITHOUT_CLASSIFICATION
need to extract the component values and check for subtype replacements...	WITHOUT_CLASSIFICATION	0.9998837243332255	WITHOUT_CLASSIFICATION	1.1627566677452521E-4	DESIGN
We ignore minimalPutOverride. JBossCache putForExternalRead is already about as minimal as we can get; it will promptly return if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9995932907062994	WITHOUT_CLASSIFICATION	4.0670929370048515E-4	DESIGN
for now, just "re-flatten" the metamodel since this is temporary stuff anyway (HHH-1907)	WITHOUT_CLASSIFICATION	0.5855465654850035	WITHOUT_CLASSIFICATION	0.41445343451499655	DESIGN
Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9988236496782404	WITHOUT_CLASSIFICATION	0.001176350321759612	DESIGN
This solution would allow us to eliminate the owner arg to disassemble(), but what if the collection was null, and then later had elements added? seems unsafe session.getPersistenceContext().getCollectionEntry( (PersistentCollection) value ).getKey();	WITHOUT_CLASSIFICATION	0.5705956885670227	WITHOUT_CLASSIFICATION	0.4294043114329772	DESIGN
Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9998492275421773	WITHOUT_CLASSIFICATION	1.507724578225829E-4	DESIGN
some collections are not lazy:	WITHOUT_CLASSIFICATION	0.9960854486395696	WITHOUT_CLASSIFICATION	0.003914551360430375	DESIGN
Here we don't want to suspend the tx. If we do: 1) We might be caching query results that reflect uncommitted changes. No tx == no WL on cache node, so other threads can prematurely see those query results 2) No tx == immediate replication. More overhead, plus we spread issue #1 above around the cluster	WITHOUT_CLASSIFICATION	0.9998533388439047	WITHOUT_CLASSIFICATION	1.46661156095321E-4	DESIGN
return the (fully resolved) identifier value, but do not resolve to the actual referenced entity instance NOTE: the owner of the association is not really the owner of the id!	WITHOUT_CLASSIFICATION	0.9999551857120142	WITHOUT_CLASSIFICATION	4.481428798575109E-5	DESIGN
Add a zero (or quite low) timeout option so we don't block. Ignore any TimeoutException. Basically we forego caching the query result in order to avoid blocking. Reads are done with suspended tx, so they should not hold the lock for long. Not caching the query result is OK, since any subsequent read will just see the old result with its out-of-date timestamp; that result will be discarded and the db query performed again.	WITHOUT_CLASSIFICATION	0.9991614900004115	WITHOUT_CLASSIFICATION	8.385099995883787E-4	DESIGN
Impl note: takes advantage of the fact that an escpaed single quote embedded within a quote-block can really be handled as two seperate quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9999624884390188	WITHOUT_CLASSIFICATION	3.751156098113987E-5	DESIGN
We have the JBCWriteMutex, so no other local thread will be trying to write this key. It's possible here some remote thread has come in and changed the values again, but since we are reading the values to write to JBC right now, we know we are writing the latest values; i.e. we don't assume that what we cached in entry.update() above is what we should write to JBC now. Our write could be redundant, i.e. we are writing what some remote thread just came in an wrote. There is a chance that yet another remote thread will update us, and we'll then overwrite that later data in JBC. But, all remote nodes will ignore that change in their localCache; the only place it will live will be in JBC, where it can only effect the initial state transfer values on newly joined nodes (i.e. populateLocalCache()).	WITHOUT_CLASSIFICATION	0.9787009421910472	WITHOUT_CLASSIFICATION	0.02129905780895282	DESIGN
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9990605069182611	WITHOUT_CLASSIFICATION	9.394930817388501E-4	DESIGN
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9990605069182611	WITHOUT_CLASSIFICATION	9.394930817388501E-4	DESIGN
Don't need to lock the cache here, since if someone else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9995687988222316	WITHOUT_CLASSIFICATION	4.312011777683647E-4	DESIGN
we need to grab the version value from the entity, otherwise we have issues with generated-version entities that may have multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.998392201976833	WITHOUT_CLASSIFICATION	0.001607798023167033	DESIGN
we need to obtain the lock before any actions are executed, since this may be an inverse="true" bidirectional association and it is one of the earlier entity actions which actually updates the database (this action is resposible for second-level cache invalidation only)	WITHOUT_CLASSIFICATION	0.9970564582766279	WITHOUT_CLASSIFICATION	0.002943541723372175	DESIGN
postDelete: After actually deleting a row, record the fact that the instance no longer exists on the database (needed for identity-column key generation), and remove it from the session cache	WITHOUT_CLASSIFICATION	0.9649789896454278	WITHOUT_CLASSIFICATION	0.03502101035457214	DESIGN
intentionally empty	WITHOUT_CLASSIFICATION	0.9997307046981381	WITHOUT_CLASSIFICATION	2.692953018619612E-4	DESIGN
todo : what else to do here?	DESIGN	0.9941985995585274	WITHOUT_CLASSIFICATION	0.005801400441472639	DESIGN
put() has nowait semantics, is this really appropriate? note that it needs to be async replication, never local or sync	DESIGN	0.9151336966709852	WITHOUT_CLASSIFICATION	0.08486630332901478	DESIGN
'hibernate.temp.use_jdbc_metadata_defaults' is a temporary magic value. The need for it is intended to be alleviated with future developement, thus it is not defined as an Environment constant... it is used to control whether we should consult the JDBC metadata to determine certain Settings default values; it is useful to not do this when the database may not be available (mainly in tools usage).	DESIGN	0.9989992011329553	DESIGN	0.0010007988670447528	WITHOUT_CLASSIFICATION
TODO: get SQL rendering out of this package!	DESIGN	0.8613103884837576	DESIGN	0.13868961151624223	WITHOUT_CLASSIFICATION
TODO: get SQL rendering out of this package!	DESIGN	0.8613103884837576	DESIGN	0.13868961151624223	WITHOUT_CLASSIFICATION
todo : eventually merge this with TreeCache and just add optional opt-lock support there.	DESIGN	0.9872569574434883	WITHOUT_CLASSIFICATION	0.0127430425565117	DESIGN
can happen because of the multiple ways Cache.remove() can be invoked :(	DESIGN	0.9999808743329173	WITHOUT_CLASSIFICATION	1.9125667082701443E-5	DESIGN
work around the "feature" where tree cache is validating the inserted node during the next transaction. no idea...	DESIGN	0.9989809616562679	WITHOUT_CLASSIFICATION	0.0010190383437320971	DESIGN
FIXME Per the RegionFactory class Javadoc, this constructor version should not be necessary. @param props The configuration properties	DESIGN	0.6327515404445319	DESIGN	0.36724845955546814	WITHOUT_CLASSIFICATION
FIXME Per the RegionFactory class Javadoc, this constructor version should not be necessary. @param props The configuration properties	DESIGN	0.6327515404445319	DESIGN	0.36724845955546814	WITHOUT_CLASSIFICATION
FIXME Hacky workaround to JBCACHE-1202	DESIGN	0.9245667614769992	DESIGN	0.07543323852300084	WITHOUT_CLASSIFICATION
FIXME Hacky workaround to JBCACHE-1202	DESIGN	0.9245667614769992	DESIGN	0.07543323852300084	WITHOUT_CLASSIFICATION
TODO: I considered validating TS cache config here, but decided to defer unti getTimestampsCacheInstance() in case the cache is never actually used	DESIGN	0.9815716974485852	DESIGN	0.01842830255141487	WITHOUT_CLASSIFICATION
TODO Is this a valid operation on a timestamps cache?	DESIGN	0.9990938779980229	DESIGN	9.061220019771745E-4	WITHOUT_CLASSIFICATION
TODO Is this a valid operation on a timestamps cache?	DESIGN	0.9990938779980229	DESIGN	9.061220019771745E-4	WITHOUT_CLASSIFICATION
TODO Why not use the timestamp in a DataVersion?	DESIGN	0.9974708838611445	DESIGN	0.0025291161388555096	WITHOUT_CLASSIFICATION
can happen because of the multiple ways Cache.remove() can be invoked :(	DESIGN	0.9999808743329173	WITHOUT_CLASSIFICATION	1.9125667082701443E-5	DESIGN
work around the "feature" where tree cache is validating the inserted node during the next transaction. no idea...	DESIGN	0.9989809616562679	WITHOUT_CLASSIFICATION	0.0010190383437320971	DESIGN
swaldman 2004-02-07: modify to allow null values to signify fall through to c3p0 PoolConfig defaults	DESIGN	0.9960131180690766	WITHOUT_CLASSIFICATION	0.0039868819309234445	DESIGN
turn hibernate.c3p0. into c3p0., so c3p0 gets a chance to see all hibernate.c3p0.	DESIGN	0.997586490520228	WITHOUT_CLASSIFICATION	0.002413509479771926	DESIGN
TODO: this bit actually has to be called after all cascades! but since identity insert is called synchronously, instead of asynchronously as other actions, it isn't	DESIGN	0.9784958016975076	DESIGN	0.0215041983024924	WITHOUT_CLASSIFICATION
TODO: reenable if we also fix the above todo	DESIGN	0.9552599357559075	DESIGN	0.044740064244092395	WITHOUT_CLASSIFICATION
TODO: inefficient if that cache is just going to ignore the updated state!	DESIGN	0.5680751806472003	DESIGN	0.43192481935279964	WITHOUT_CLASSIFICATION
we may be screwed here since the collection action is about to execute and we do not know the final owner key value	DESIGN	0.9988568810891798	WITHOUT_CLASSIFICATION	0.0011431189108202287	DESIGN
Create an action that will evict collection and entity regions based on queryspaces (table names). TODO: cache the autodetected information and pass it in instead.	DESIGN	0.5221269552862545	WITHOUT_CLASSIFICATION	0.4778730447137455	DESIGN
todo : what else to do here?	DESIGN	0.9941985995585274	WITHOUT_CLASSIFICATION	0.005801400441472639	DESIGN
todo : modify the class definition if not already transformed...	DESIGN	0.9979403596229628	WITHOUT_CLASSIFICATION	0.002059640377037282	DESIGN
todo : what else to do here?	DESIGN	0.9941985995585274	WITHOUT_CLASSIFICATION	0.005801400441472639	DESIGN
this is called by SessionFactory irregardless; we just disregard here; could also add a check to SessionFactory to only conditionally call start	DESIGN	0.9983549375664726	WITHOUT_CLASSIFICATION	0.001645062433527405	DESIGN
this is called by SessionFactory irregardless; we just disregard here; could also add a check to SessionFactory to only conditionally call stop	DESIGN	0.9976098797120447	WITHOUT_CLASSIFICATION	0.002390120287955326	DESIGN
TODO: to handle concurrent writes correctly, this should return a Lock to the client	DESIGN	0.9935756146851588	DESIGN	0.006424385314841268	WITHOUT_CLASSIFICATION
put() has nowait semantics, is this really appropriate? note that it needs to be async replication, never local or sync	DESIGN	0.9151336966709852	WITHOUT_CLASSIFICATION	0.08486630332901478	DESIGN
TODO: to handle concurrent writes correctly, the client should pass in a Lock	DESIGN	0.9123730364339051	DESIGN	0.08762696356609492	WITHOUT_CLASSIFICATION
TODO: assumes all collections disassemble to an array!	DESIGN	0.9008907781093444	WITHOUT_CLASSIFICATION	0.09910922189065563	DESIGN
TODO: reuse the PreLoadEvent	DESIGN	0.7449787724602425	WITHOUT_CLASSIFICATION	0.2550212275397574	DESIGN
todo: this was added to support initializing an entity's EntityEntry snapshot during reattach; this should be refactored to instead expose a method to assemble a EntityEntry based on this state for return.	DESIGN	0.8736939824916133	WITHOUT_CLASSIFICATION	0.12630601750838663	DESIGN
todo : what is the implication of this?	DESIGN	0.9973912759066786	WITHOUT_CLASSIFICATION	0.0026087240933213547	DESIGN
use COUNT as the default. This mimics the old behavior, although NONE might be a better option moving forward in the case of callable	DESIGN	0.9804814325853904	WITHOUT_CLASSIFICATION	0.01951856741460953	DESIGN
TODO: joinKeyColumnName & foreignKeyColumnName should be called either here or at a slightly higer level in the stack (to get all the information we need) Right now HbmBinder does not support the	DESIGN	0.9967566710750287	DESIGN	0.0032433289249713714	WITHOUT_CLASSIFICATION
TODO: suck this into initLaziness!	DESIGN	0.9211276798958794	DESIGN	0.0788723201041206	WITHOUT_CLASSIFICATION
we have to set up the table later!! yuck	DESIGN	0.999581092882611	WITHOUT_CLASSIFICATION	4.1890711738900633E-4	DESIGN
TODO: better to degrade to lazy="false" if uninstrumented	DESIGN	0.8390530806177806	DESIGN	0.16094691938221933	WITHOUT_CLASSIFICATION
todo : again, how should this work for non-pojo entities?	DESIGN	0.9913498555247369	WITHOUT_CLASSIFICATION	0.008650144475263171	DESIGN
TODO: this is a bit of copy/paste from IndexedCollection.createPrimaryKey()	DESIGN	0.9279824868697438	DESIGN	0.07201751313025609	WITHOUT_CLASSIFICATION
This inner class implements a case statement....perhaps im being a bit over-clever here	DESIGN	0.9910818432468044	WITHOUT_CLASSIFICATION	0.008918156753195582	DESIGN
TODO: bad implementation, cos it depends upon ordering of mapping doc fixing this requires that Collection/PersistentClass gain access to the Mappings reference from Configuration (or the filterDefinitions map directly) sometime during Configuration.buildSessionFactory (after all the types/filter-defs are known and before building persisters).	DESIGN	0.6346684964781485	DESIGN	0.36533150352185134	WITHOUT_CLASSIFICATION
use of a stringbuffer to workaround a JDK bug	DESIGN	0.6686385710183538	WITHOUT_CLASSIFICATION	0.3313614289816463	DESIGN
hack/workaround as sqlquery impl depend on having a key.	DESIGN	0.9997011554239432	WITHOUT_CLASSIFICATION	2.988445760567973E-4	DESIGN
FIXME: get the PersistentClass	DESIGN	0.7240190235512673	DESIGN	0.2759809764487327	WITHOUT_CLASSIFICATION
FIXME: get the PersistentClass	DESIGN	0.7240190235512673	DESIGN	0.2759809764487327	WITHOUT_CLASSIFICATION
Icky workaround for MySQL bug:	DESIGN	0.9343915337455069	WITHOUT_CLASSIFICATION	0.06560846625449321	DESIGN
TODO: Somehow add the newly created foreign keys to the internal collection	DESIGN	0.9668084314431346	DESIGN	0.03319156855686543	WITHOUT_CLASSIFICATION
TODO possibly relax that	DESIGN	0.7433061525051905	DESIGN	0.2566938474948095	WITHOUT_CLASSIFICATION
TODO possibly relax that	DESIGN	0.7433061525051905	DESIGN	0.2566938474948095	WITHOUT_CLASSIFICATION
TODO possibly relax that	DESIGN	0.7433061525051905	DESIGN	0.2566938474948095	WITHOUT_CLASSIFICATION
use of a stringbuffer to workaround a JDK bug	DESIGN	0.6686385710183538	WITHOUT_CLASSIFICATION	0.3313614289816463	DESIGN
use a degenerated strategy for backward compatibility	DESIGN	0.9986983390307393	WITHOUT_CLASSIFICATION	0.0013016609692606531	DESIGN
Sets can be just a view of a part of another collection. do we need to copy it to be sure it won't be changing underneath us? ie. this.set.addAll(set);	DESIGN	0.9897596604789247	WITHOUT_CLASSIFICATION	0.010240339521075194	DESIGN
note that i parameter is now unused (delete it?)	DESIGN	0.9971970483327252	WITHOUT_CLASSIFICATION	0.0028029516672748926	DESIGN
just to help out during the load (ugly, i know)	DESIGN	0.9995120060200515	WITHOUT_CLASSIFICATION	4.8799397994856055E-4	DESIGN
TODO : safe to interpret "map.remove(key) == null" as non-dirty?	DESIGN	0.5590098215958925	WITHOUT_CLASSIFICATION	0.4409901784041075	DESIGN
yick! need this for proper serialization/deserialization handling...	DESIGN	0.9445098597951228	WITHOUT_CLASSIFICATION	0.05549014020487714	DESIGN
TODO: get SQL rendering out of this package!	DESIGN	0.8613103884837576	DESIGN	0.13868961151624223	WITHOUT_CLASSIFICATION
TODO: get SQL rendering out of this package!	DESIGN	0.8613103884837576	DESIGN	0.13868961151624223	WITHOUT_CLASSIFICATION
yuck!	DESIGN	0.9991288176721137	WITHOUT_CLASSIFICATION	8.711823278862698E-4	DESIGN
TODO: get SQL rendering out of this package!	DESIGN	0.8613103884837576	DESIGN	0.13868961151624223	WITHOUT_CLASSIFICATION
TODO : not sure this is correct, could not find docs on how to do this.	DESIGN	0.9989919854679467	DESIGN	0.0010080145320532855	WITHOUT_CLASSIFICATION
HSQL has no Blob/Clob support .... but just put these here for now!	DESIGN	0.9954795522299497	WITHOUT_CLASSIFICATION	0.004520447770050436	DESIGN
does this need holdlock also? : return tableName + " with (updlock, rowlock, holdlock)";	DESIGN	0.9936923492672378	WITHOUT_CLASSIFICATION	0.00630765073276225	DESIGN
sql-server, at least needed this dropped after use; strange!	DESIGN	0.9929192481556581	WITHOUT_CLASSIFICATION	0.007080751844341879	DESIGN
todo : is there really any reason to kkeep trying if this fails once?	DESIGN	0.9994394710247092	WITHOUT_CLASSIFICATION	5.605289752907167E-4	DESIGN
TBD should this be varbinary($1)? registerColumnType(Types.VARBINARY, "binary($1)");	DESIGN	0.9776999785977406	WITHOUT_CLASSIFICATION	0.02230002140225944	DESIGN
is it necessary to register %exact since it can only appear in a where clause?	DESIGN	0.9891965583474338	WITHOUT_CLASSIFICATION	0.010803441652566186	DESIGN
xmlforest requires a new kind of function constructor	DESIGN	0.999963384914862	WITHOUT_CLASSIFICATION	3.661508513798544E-5	DESIGN
Does this dialect support the ALTER TABLE syntax?	DESIGN	0.9781170242830197	WITHOUT_CLASSIFICATION	0.021882975716980328	DESIGN
Do we need to qualify index names with the schema name?	DESIGN	0.9914858805201523	WITHOUT_CLASSIFICATION	0.008514119479847758	DESIGN
Does this dialect support the UNIQUE column syntax?	DESIGN	0.9867079014950096	WITHOUT_CLASSIFICATION	0.013292098504990408	DESIGN
Does this dialect support check constraints?	DESIGN	0.9874256963930191	WITHOUT_CLASSIFICATION	0.012574303606980792	DESIGN
Do we need to drop constraints before dropping tables in this dialect?	DESIGN	0.9584872660328803	WITHOUT_CLASSIFICATION	0.04151273396711977	DESIGN
Does this dialect support the FOR UPDATE syntax?	DESIGN	0.9779057302504638	WITHOUT_CLASSIFICATION	0.022094269749536145	DESIGN
Does this dialect support the Oracle-style FOR UPDATE NOWAIT syntax?	DESIGN	0.9779057302504638	WITHOUT_CLASSIFICATION	0.022094269749536145	DESIGN
Does this dialect support FOR UPDATE OF, allowing particular rows to be locked?	DESIGN	0.956064687708631	WITHOUT_CLASSIFICATION	0.04393531229136911	DESIGN
note there is a wierd implementation in the client side	DESIGN	0.9991623886068763	WITHOUT_CLASSIFICATION	8.376113931236703E-4	DESIGN
TODO: never reached, since getTypeName() actually throws an exception!	DESIGN	0.6817949266691107	WITHOUT_CLASSIFICATION	0.31820507333088927	DESIGN
todo : should we additionally check the current isolation mode explicitly?	DESIGN	0.998148157548689	WITHOUT_CLASSIFICATION	0.001851842451311015	DESIGN
todo : remove this and just have subclasses use Isolater/IsolatedWork directly...	DESIGN	0.9876545507044368	WITHOUT_CLASSIFICATION	0.012345449295563218	DESIGN
TODO: should orphans really be deleted during lock???	DESIGN	0.8962196716646883	DESIGN	0.10378032833531176	WITHOUT_CLASSIFICATION
orphans should not be deleted during merge??	DESIGN	0.9691340027587377	WITHOUT_CLASSIFICATION	0.030865997241262245	DESIGN
orphans should not be deleted during copy??	DESIGN	0.9691340027587377	WITHOUT_CLASSIFICATION	0.030865997241262245	DESIGN
I suppose?	DESIGN	0.9966614661153921	WITHOUT_CLASSIFICATION	0.0033385338846078174	DESIGN
TODO: suck this logic into the collection!	DESIGN	0.7760468597634241	DESIGN	0.22395314023657592	WITHOUT_CLASSIFICATION
TODO: an alternative is to check if the owner has changed; if it hasn't then get the ID from collection.getOwner()	DESIGN	0.9319273794287779	WITHOUT_CLASSIFICATION	0.0680726205712221	DESIGN
TODO:refactor + make this method private	DESIGN	0.9475619528476016	WITHOUT_CLASSIFICATION	0.052438047152398484	DESIGN
todo : we can actually just determine this from the incoming EntityEntry-s	DESIGN	0.9845035622595827	WITHOUT_CLASSIFICATION	0.015496437740417405	DESIGN
TODO: Should this be an InitializeEntityEventListener??? (watch out for performance!)	DESIGN	0.9776434277644899	DESIGN	0.022356572235510058	WITHOUT_CLASSIFICATION
TODO: better to pass the id in as an argument?	DESIGN	0.9029145150105876	WITHOUT_CLASSIFICATION	0.0970854849894124	DESIGN
todo : potentially look at optimizing these two arrays	DESIGN	0.999324674955288	WITHOUT_CLASSIFICATION	6.753250447120467E-4	DESIGN
trim done to workaround stupid oracle bug that cant handle whitespaces before a { in a sp	DESIGN	0.7804356951714532	DESIGN	0.2195643048285467	WITHOUT_CLASSIFICATION
trim done to workaround stupid oracle bug that cant handle whitespaces before a { in a sp	DESIGN	0.7804356951714532	DESIGN	0.2195643048285467	WITHOUT_CLASSIFICATION
TODO: temporary	DESIGN	0.8591843503915603	DESIGN	0.14081564960843967	WITHOUT_CLASSIFICATION
TODO: not quite sure about the full implications of this!	DESIGN	0.9220590168546795	DESIGN	0.07794098314532052	WITHOUT_CLASSIFICATION
TODO: not quite sure about the full implications of this!	DESIGN	0.9220590168546795	DESIGN	0.07794098314532052	WITHOUT_CLASSIFICATION
TODO: ugly here:	DESIGN	0.9337441327272733	DESIGN	0.06625586727272674	WITHOUT_CLASSIFICATION
this is kinda the best we can do...	DESIGN	0.9710656053299445	WITHOUT_CLASSIFICATION	0.02893439467005558	DESIGN
TODO: this needn't exclude subclasses...	DESIGN	0.8174198231222968	DESIGN	0.1825801768777033	WITHOUT_CLASSIFICATION
todo : need map? the prob is a proper key, right?	DESIGN	0.9828442315703658	WITHOUT_CLASSIFICATION	0.01715576842963415	DESIGN
todo : i'd much rather have this done from #endLoadingCollection(CollectionPersister,LoadingCollectionEntry)...	DESIGN	0.9182630826043752	WITHOUT_CLASSIFICATION	0.08173691739562489	DESIGN
todo : hack!!! NOTE : here we cleanup the load context when we have no more local LCE entries. This "works" for the time being because really only the collection load contexts are implemented. Long term, this cleanup should become part of the "close result set" processing from the (sandbox/jdbc) jdbc-container code.	DESIGN	0.9954971269260618	WITHOUT_CLASSIFICATION	0.004502873073938103	DESIGN
todo : should really move this log statement to CollectionType, where this is used from...	DESIGN	0.7137085707556892	DESIGN	0.2862914292443109	WITHOUT_CLASSIFICATION
TODO : keep seperate notions of QT[] here for shallow/non-shallow queries...	DESIGN	0.8598573292287143	DESIGN	0.14014267077128564	WITHOUT_CLASSIFICATION
TODO : add this info to the translator and aggregate it here...	DESIGN	0.9272297276104066	DESIGN	0.07277027238959345	WITHOUT_CLASSIFICATION
TODO: move into collection type, so we can use polymorphism!	DESIGN	0.9920092034423215	DESIGN	0.00799079655767846	WITHOUT_CLASSIFICATION
todo : should we check the current isolation mode explicitly?	DESIGN	0.998148157548689	WITHOUT_CLASSIFICATION	0.001851842451311015	DESIGN
TODO: suck into event class	DESIGN	0.7059720082246517	DESIGN	0.2940279917753484	WITHOUT_CLASSIFICATION
do we even really need this? the update will fail anyway....	DESIGN	0.9995662403056863	WITHOUT_CLASSIFICATION	4.33759694313717E-4	DESIGN
hum ... should we cascade anyway? throw an exception? fine like it is?	DESIGN	0.9740077105609407	WITHOUT_CLASSIFICATION	0.025992289439059377	DESIGN
TODO: would it be better to do a refresh from db?	DESIGN	0.9682591028667851	DESIGN	0.031740897133214964	WITHOUT_CLASSIFICATION
TODO: we use two visitors here, inefficient!	DESIGN	0.6883785883449601	WITHOUT_CLASSIFICATION	0.31162141165503976	DESIGN
this class has no proxies (so do a shortcut)	DESIGN	0.9941524728897442	WITHOUT_CLASSIFICATION	0.005847527110255877	DESIGN
PostLoad is needed for EJB3 TODO: reuse the PostLoadEvent...	DESIGN	0.737549112544893	WITHOUT_CLASSIFICATION	0.2624508874551069	DESIGN
TODO: put this stuff back in to read snapshot from the second-level cache (needs some extra work)	DESIGN	0.8108965649385761	DESIGN	0.18910343506142394	WITHOUT_CLASSIFICATION
null or brand new collection this will also (inefficiently) handle arrays, which have no snapshot, so we can't do any better	DESIGN	0.9852424897526058	WITHOUT_CLASSIFICATION	0.014757510247394202	DESIGN
TODO: is this 100% correct?	DESIGN	0.922138766762869	DESIGN	0.07786123323713107	WITHOUT_CLASSIFICATION
TODO: iteratively get transient entities and retry merge until one of the following conditions: 1) transientCopyCache.size() == 0 2) transientCopyCache.size() is not decreasing and copyCache.size() is not increasing TODO: find out if retrying can add entities to copyCache (don't think it can...) For now, just retry once; throw TransientObjectException if there are still any transient entities	DESIGN	0.8711244147490643	DESIGN	0.12887558525093565	WITHOUT_CLASSIFICATION
entity name will not be available for non-POJO entities TODO: cache the entity name somewhere so that it is available to this exception	DESIGN	0.9957130105431798	DESIGN	0.004286989456820186	WITHOUT_CLASSIFICATION
TODO: we should throw an exception if we really know for sure that this is a detached instance, rather than just assuming throw new StaleObjectStateException(entityName, id);	DESIGN	0.9792988965291466	DESIGN	0.020701103470853403	WITHOUT_CLASSIFICATION
TODO : perhaps we should additionally require that the incoming entity version be equivalent to the defined unsaved-value?	DESIGN	0.9990193513807767	DESIGN	9.806486192232686E-4	WITHOUT_CLASSIFICATION
perhaps this should be an exception since it is only ever used in the above method?	DESIGN	0.9358409105611928	DESIGN	0.06415908943880719	WITHOUT_CLASSIFICATION
Put a placeholder in entries, so we don't recurse back and try to save() the same object again. QUESTION: should this be done before onSave() is called? likewise, should it be done before onUpdate()?	DESIGN	0.9921978435163653	WITHOUT_CLASSIFICATION	0.0078021564836347375	DESIGN
TODO: merge into one method!	DESIGN	0.8853955534379674	DESIGN	0.1146044465620325	WITHOUT_CLASSIFICATION
TODO: refactor to .sql package	DESIGN	0.8796671533211075	DESIGN	0.12033284667889259	WITHOUT_CLASSIFICATION
Provides query splitting methods, which were originally in QueryTranslator. <br> TODO: This will need to be refactored at some point. @author josh	DESIGN	0.9879952730185495	DESIGN	0.012004726981450461	WITHOUT_CLASSIFICATION
TODO: this is one of the ugliest and most fragile pieces of code in Hibernate....	DESIGN	0.9561124539752689	DESIGN	0.04388754602473102	WITHOUT_CLASSIFICATION
todo : temporary needed because currently persister is the one that creates and renders the join fragments for inheritence hierarchies...	DESIGN	0.9904696627686463	WITHOUT_CLASSIFICATION	0.00953033723135367	DESIGN
TODO : better way?!?	DESIGN	0.8801914197547254	DESIGN	0.1198085802452746	WITHOUT_CLASSIFICATION
Not possible to simply re-use the versionPropertyNode here as it causes OOM errors due to circularity :(	DESIGN	0.9939253145575961	WITHOUT_CLASSIFICATION	0.0060746854424038365	DESIGN
TODO:this is only needed during compilation .. can we eliminate the instvar?	DESIGN	0.9994178830089527	WITHOUT_CLASSIFICATION	5.821169910471565E-4	DESIGN
TODO : this is a bit dodgy, come up with a better way to check this (plus see above comment)	DESIGN	0.9919280763935061	DESIGN	0.008071923606493898	WITHOUT_CLASSIFICATION
even here, if only properties mapped to the "base table" are referenced in the set and where clauses, this could be handled by the BasicDelegate. TODO : decide if it is better performance-wise to perform that check, or to simply use the MultiTableUpdateDelegate	DESIGN	0.9986559179554607	DESIGN	0.0013440820445392654	WITHOUT_CLASSIFICATION
TODO: switch statements are always evil! We already had bugs because of forgotten token types. Use polymorphism for this!	DESIGN	0.9034080742522127	WITHOUT_CLASSIFICATION	0.09659192574778726	DESIGN
TODO : we really need to be able to deal with component paths here also; this is difficult because the hql-sql grammar expects all those node types to be FromReferenceNodes. One potential fix here would be to convert the IntoClause to just use a FromClause/FromElement combo (as a child of the InsertStatement) and move all this logic into the InsertStatement. That's probably the easiest approach (read: least amount of changes to the grammar and code), but just doesn't feel right as then an insert would contain 2 from-clauses	DESIGN	0.9999957276467151	DESIGN	4.272353284896326E-6	WITHOUT_CLASSIFICATION
really there are two situations where it should be ok to allow the insertion into properties defined on a superclass: 1) union-subclass with an abstract root entity 2) discrim-subclass #1 is handled already because of the fact that UnionSubclassPersister alreay always returns 0 for this call... we may want to disallow it for discrim-subclass just for consistency-sake (currently does not work anyway)...	DESIGN	0.9705153707027006	WITHOUT_CLASSIFICATION	0.029484629297299492	DESIGN
yuck!	DESIGN	0.9991288176721137	WITHOUT_CLASSIFICATION	8.711823278862698E-4	DESIGN
implicit joins are always(?) ok to reuse	DESIGN	0.9993897215734945	WITHOUT_CLASSIFICATION	6.102784265055586E-4	DESIGN
TODO : we may also want to check that the types here map to exactly one column/JDBC-type can't think of a situation where arithmetic expression between multi-column mappings makes any sense.	DESIGN	0.9614042847319147	DESIGN	0.03859571526808523	WITHOUT_CLASSIFICATION
we do not know either type BLIND GUESS!	DESIGN	0.9902677134719227	WITHOUT_CLASSIFICATION	0.009732286528077387	DESIGN
TODO: used to be exprNoParens! was this needed?	DESIGN	0.9999997891445102	DESIGN	2.108554897766541E-7	WITHOUT_CLASSIFICATION
TODO: Replace this with a more elegant solution.	DESIGN	0.9981333446958714	DESIGN	0.001866655304128498	WITHOUT_CLASSIFICATION
TODO: Should this really return null? If not, figure out something better to do here.	DESIGN	0.6453760730473694	DESIGN	0.3546239269526306	WITHOUT_CLASSIFICATION
TODO: get SQL rendering out of this package!	DESIGN	0.8613103884837576	DESIGN	0.13868961151624223	WITHOUT_CLASSIFICATION
yuck!	DESIGN	0.9991288176721137	WITHOUT_CLASSIFICATION	8.711823278862698E-4	DESIGN
ignore it; the incoming property could not be found so we cannot be sure what to do here. At the very least, the safest is to simply not apply any dereference toggling...	DESIGN	0.7393546976294728	DESIGN	0.26064530237052713	WITHOUT_CLASSIFICATION
TODO : most of below was taken verbatim from DotNode; should either delegate this logic or super-type it	DESIGN	0.9890658961610651	DESIGN	0.010934103838934884	WITHOUT_CLASSIFICATION
otherwise, a trim-specification and/or a trim-character have been specified; we need to decide which options are present and "do the right thing" should leading trim-characters be trimmed? should trailing trim-characters be trimmed? the trim-character the trim-source	DESIGN	0.9867740179940367	WITHOUT_CLASSIFICATION	0.01322598200596329	DESIGN
todo: we should really just collect these from the various SelectExpressions, rather than regenerating here	DESIGN	0.6163199881107742	WITHOUT_CLASSIFICATION	0.38368001188922585	DESIGN
TODO: is this a bit ugly?	DESIGN	0.9084803264540272	DESIGN	0.09151967354597275	WITHOUT_CLASSIFICATION
Need a better way to define the suffixes here...	DESIGN	0.9950919263731204	WITHOUT_CLASSIFICATION	0.00490807362687964	DESIGN
TODO: something much better - look at the type of the other expression! TODO: Have comparisonExpression and/or arithmeticExpression rules complete the resolution of boolean nodes.	DESIGN	0.9543269369825848	DESIGN	0.045673063017415215	WITHOUT_CLASSIFICATION
TODO : what amount of significant digits need to be supported here? - from the DecimalFormat docs: [significant digits] = [minimum integer digits] + [maximum fraction digits]	DESIGN	0.9851172170522378	DESIGN	0.014882782947762149	WITHOUT_CLASSIFICATION
Needed the "clazz_" check to work around union-subclasses TODO : is there a way to tell whether a persister is truly discrim-column based inheritence?	DESIGN	0.6941918487306827	DESIGN	0.30580815126931743	WITHOUT_CLASSIFICATION
We should actually rework this class to not implement Parser and just process path expressions in the most convenient way.	DESIGN	0.6871051818645972	WITHOUT_CLASSIFICATION	0.31289481813540276	DESIGN
The class is now way to complex!	DESIGN	0.9998299793295635	WITHOUT_CLASSIFICATION	1.7002067043654051E-4	DESIGN
TODO: get SQL rendering out of here	DESIGN	0.8812928465102414	DESIGN	0.11870715348975854	WITHOUT_CLASSIFICATION
TODO: is there a better way?	DESIGN	0.9106824826709172	DESIGN	0.08931751732908272	WITHOUT_CLASSIFICATION
Must be done here because of side-effect! yuck...	DESIGN	0.9945428581704855	WITHOUT_CLASSIFICATION	0.005457141829514475	DESIGN
name from a super query (a bit inelegant that it shows up here)	DESIGN	0.9970081579003564	WITHOUT_CLASSIFICATION	0.002991842099643514	DESIGN
We should reengineer this class so that, rather than the current ad - hoc linear approach to processing a stream of tokens, we instead build up a tree of expressions.	DESIGN	0.6377444511473108	WITHOUT_CLASSIFICATION	0.36225554885268907	DESIGN
this is ugly here, but needed because its a subquery	DESIGN	0.9903399306987942	WITHOUT_CLASSIFICATION	0.009660069301205665	DESIGN
unhappy about this being public ... is there a better way?	DESIGN	0.906702548743855	WITHOUT_CLASSIFICATION	0.09329745125614496	DESIGN
Make sure this is a defined parameter and check the incoming value type TODO: what should be the actual exception type here?	DESIGN	0.9988514245604675	DESIGN	0.001148575439532515	WITHOUT_CLASSIFICATION
TODO : this constructor form is only used from constructor directly below us; can it go away?	DESIGN	0.9998555533607996	DESIGN	1.4444663920041098E-4	WITHOUT_CLASSIFICATION
TODO: COPY/PASTE FROM SessionImpl, pull up!	DESIGN	0.5926370376384568	WITHOUT_CLASSIFICATION	0.4073629623615433	DESIGN
TODO : should remove this exposure and have all references to the session's batcher use the ConnectionManager.	DESIGN	0.9980963236595204	DESIGN	0.0019036763404795501	WITHOUT_CLASSIFICATION
todo : should this get moved to PersistentContext? logically, is PersistentContext the "thing" to which an interceptor gets attached?	DESIGN	0.9782262352430112	WITHOUT_CLASSIFICATION	0.021773764756988858	DESIGN
TODO: what type?	DESIGN	0.6123739405682926	DESIGN	0.38762605943170747	WITHOUT_CLASSIFICATION
todo : should seriously consider not allowing a txn to begin from a child session can always route the request to the root session...	DESIGN	0.9371539630761404	WITHOUT_CLASSIFICATION	0.06284603692385948	DESIGN
short-circuit for performance...	DESIGN	0.9992631167485749	WITHOUT_CLASSIFICATION	7.368832514250811E-4	DESIGN
not absolutely necessary, but does help with aggressive release	DESIGN	0.9909666094455761	WITHOUT_CLASSIFICATION	0.00903339055442389	DESIGN
TODO : remove these last two as batcher is no longer managing connections	DESIGN	0.9753511014997825	DESIGN	0.024648898500217394	WITHOUT_CLASSIFICATION
work around a bug in all known connection pools....	DESIGN	0.9983238945729592	WITHOUT_CLASSIFICATION	0.0016761054270408747	DESIGN
TODO : make this the factory for "entity mode related" sessions; also means making this the target of transaction-synch and the thing that knows how to cascade things between related sessions At that point, perhaps this thing is a "SessionContext", and ConnectionManager is a "JDBCContext"? A "SessionContext" should live in the impl package...	DESIGN	0.9999993277888393	DESIGN	6.72211160687236E-7	WITHOUT_CLASSIFICATION
TODO: does this really need to be here? does the collection already have it's own up-to-date snapshot?	DESIGN	0.999584357015733	DESIGN	4.156429842669372E-4	WITHOUT_CLASSIFICATION
TODO: the i==entitySpan-1 bit depends upon subclass implementation (very bad)	DESIGN	0.717340878962292	DESIGN	0.28265912103770796	WITHOUT_CLASSIFICATION
This form used from annotations (?). Essentially the same as the above using a resultset-mapping reference, but without cacheMode, readOnly, and comment. FIXME: annotations do not use it, so it can be remove from my POV @deprecated @param query The sql query string @param resultSetRef The result-set-mapping name @param querySpaces Any specified query spaces (used for auto-flushing) @param cacheable Whether the query results are cacheable @param cacheRegion If cacheable, the region into which to store the results @param timeout A JDBC-level timeout to be applied @param fetchSize A JDBC-level fetch-size to be applied @param flushMode The flush mode to use for this query @param parameterTypes parameter type map @param callable Does the query string represent a callable object (i.e., proc)	DESIGN	0.9999989163772219	DESIGN	1.0836227780215438E-6	WITHOUT_CLASSIFICATION
todo : add the notion of enabled filters to the CacheKey to differentiate filtered collections from non-filtered; but CacheKey is currently used for both collections and entities; would ideally need to define two seperate ones; currently this works in conjuction with the check on DefaultInitializeCollectionEventHandler.initializeCollectionFromCache() (which makes sure to not read from cache with enabled filters). EARLY EXIT!!!!!	DESIGN	0.7255835277678886	DESIGN	0.27441647223211146	WITHOUT_CLASSIFICATION
for sets, we should end the collection load after resolving the entities, since we might call hashCode() on the elements TODO: or we could do this polymorphically, and have two different operations implemented differently for arrays	DESIGN	0.9987266565779522	DESIGN	0.0012733434220476814	WITHOUT_CLASSIFICATION
This is not very nice (and quite slow):	DESIGN	0.871781103612299	DESIGN	0.12821889638770098	WITHOUT_CLASSIFICATION
use of trim() here is ugly?	DESIGN	0.998126944932221	WITHOUT_CLASSIFICATION	0.0018730550677790309	DESIGN
TODO: this is too conservative; if all preceding joins were also inner joins, we could use an inner join here	DESIGN	0.8522158671101759	DESIGN	0.1477841328898241	WITHOUT_CLASSIFICATION
TODO: look at the owning property and check that it isn't lazy (by instrumentation)	DESIGN	0.7562215258245272	WITHOUT_CLASSIFICATION	0.24377847417547285	DESIGN
TODO: inefficient	DESIGN	0.7793041473441781	WITHOUT_CLASSIFICATION	0.22069585265582184	DESIGN
why does this matter?	DESIGN	0.9908980227362367	WITHOUT_CLASSIFICATION	0.009101977263763297	DESIGN
from the collection of associations, locate OJA for the ManyToOne corresponding to this persister to fully define the many-to-many; we need that OJA so that we can use its alias here TODO : is there a better way here?	DESIGN	0.9999799473800681	DESIGN	2.005261993189716E-5	WITHOUT_CLASSIFICATION
TODO: this class depends directly upon CriteriaImpl, in the impl package ... add a CriteriaImplementor interface	DESIGN	0.9870429118772189	DESIGN	0.012957088122780963	WITHOUT_CLASSIFICATION
TODO: add a CriteriaImplementor interface this class depends directly upon CriteriaImpl in the impl package...	DESIGN	0.8560414928124688	DESIGN	0.1439585071875312	WITHOUT_CLASSIFICATION
TODO : not so sure this is needed...	DESIGN	0.9311760179702064	DESIGN	0.06882398202979362	WITHOUT_CLASSIFICATION
meant to handle dynamic instantiation queries...(Copy from QueryLoader)	DESIGN	0.9978292998564504	WITHOUT_CLASSIFICATION	0.0021707001435496832	DESIGN
TODO: The order in which entities are saved may matter (e.g., a particular transient entity may need to be saved before other transient entities can be saved; Keep retrying the batch of transient entities until either: 1) there are no transient entities left in transientCopyCache or 2) no transient entities were saved in the last batch For now, just run through the transient entities and retry the merge	DESIGN	0.7638674337383022	WITHOUT_CLASSIFICATION	0.23613256626169782	DESIGN
todo: this might really even be moved into the cfg package and used as the basis for all things which are configurable.	DESIGN	0.9867624939906349	DESIGN	0.013237506009365208	WITHOUT_CLASSIFICATION
todo : currently expects that the individual with expressions apply to the same sql table join. This may not be the case for joined-subclass where the property values might be coming from different tables in the joined hierarchy. At some point we should expand this to support that capability. However, that has some difficulties: 1) the biggest is how to handle ORs when the individual comparisons are linked to different sql joins. 2) here we would need to track each comparison individually, along with the join alias to which it applies and then pass that information back to the FromElement so it can pass it along to the JoinSequence	DESIGN	0.5408053366514524	WITHOUT_CLASSIFICATION	0.4591946633485477	DESIGN
this function has a template -> restore output, apply the template and write the result out TODO: Downcast to avoid using an interface? Yuck.	DESIGN	0.9773345182114218	WITHOUT_CLASSIFICATION	0.022665481788578124	DESIGN
at some point the generate phase needs to be moved out of here, because a single object-level DML might spawn multiple SQL DML command executions. Possible to just move the sql generation for dml stuff, but for consistency-sake probably best to just move responsiblity for the generation phase completely into the delegates (QueryLoader/StatementExecutor) themselves. Also, not sure why QueryLoader currently even has a dependency on this at all; does it need it? Ideally like to see the walker itself given to the delegates directly...	DESIGN	0.9999531139061951	DESIGN	4.688609380493355E-5	WITHOUT_CLASSIFICATION
get the right object from the list ... would it be easier to just call getEntity() ??	DESIGN	0.9988956833197468	WITHOUT_CLASSIFICATION	0.0011043166802531654	DESIGN
TODO should we just collect these like with the collections above?	DESIGN	0.9899050144791046	DESIGN	0.01009498552089539	WITHOUT_CLASSIFICATION
todo : better to handle dynamic filters through implicit DynamicFilterParameterSpecification see the discussion there in DynamicFilterParameterSpecification's javadocs as to why it is currently not done that way.	DESIGN	0.8380482523132872	WITHOUT_CLASSIFICATION	0.16195174768671275	DESIGN
/ USED ONLY FOR REGRESSION TESTING!!!! todo : obviously get rid of all this junk ;) /	DESIGN	0.9837146040948547	WITHOUT_CLASSIFICATION	0.01628539590514542	DESIGN
create an index on the key columns??	DESIGN	0.9998883951357139	WITHOUT_CLASSIFICATION	1.1160486428612974E-4	DESIGN
TODO: deprecated, remove eventually	DESIGN	0.735298612563138	DESIGN	0.2647013874368619	WITHOUT_CLASSIFICATION
create an index on the key columns??	DESIGN	0.9998883951357139	WITHOUT_CLASSIFICATION	1.1160486428612974E-4	DESIGN
TODO: improve this hack!	DESIGN	0.9463313601592678	DESIGN	0.053668639840732245	WITHOUT_CLASSIFICATION
inheritance cycle detection (paranoid check)	DESIGN	0.9982821251531055	WITHOUT_CLASSIFICATION	0.001717874846894395	DESIGN
TODO: remove use of instanceof!	DESIGN	0.8827603604919461	DESIGN	0.11723963950805401	WITHOUT_CLASSIFICATION
shortcut	DESIGN	0.9993901546274354	WITHOUT_CLASSIFICATION	6.098453725645299E-4	DESIGN
TODO: handle the case of a foreign key to something other than the pk	DESIGN	0.8138860280291812	WITHOUT_CLASSIFICATION	0.1861139719708188	DESIGN
create an index on the key columns??	DESIGN	0.9998883951357139	WITHOUT_CLASSIFICATION	1.1160486428612974E-4	DESIGN
todo : remove	DESIGN	0.9990560981959563	WITHOUT_CLASSIFICATION	9.439018040436183E-4	DESIGN
todo : remove	DESIGN	0.9990560981959563	WITHOUT_CLASSIFICATION	9.439018040436183E-4	DESIGN
todo : remove	DESIGN	0.9990560981959563	WITHOUT_CLASSIFICATION	9.439018040436183E-4	DESIGN
todo : throw exception?	DESIGN	0.9994316007323464	WITHOUT_CLASSIFICATION	5.683992676535858E-4	DESIGN
todo : throw exception? maybe warn if not the same?	DESIGN	0.9917683375214399	WITHOUT_CLASSIFICATION	0.008231662478560182	DESIGN
TODO: make EntityPersister not depend on SessionFactoryImplementor interface, if possible	DESIGN	0.8638804092086964	DESIGN	0.13611959079130367	WITHOUT_CLASSIFICATION
TODO: is there a more elegant way than downcasting?	DESIGN	0.9907881051033435	DESIGN	0.009211894896656568	WITHOUT_CLASSIFICATION
TODO: encapsulate the protected instance variables!	DESIGN	0.8797358970469736	DESIGN	0.12026410295302635	WITHOUT_CLASSIFICATION
should indicate that we are processing an INSERT/UPDATE/DELETE query with a subquery implied via a collection property function. Here, we need to use the table name itself as the qualification alias. TODO : verify this works for all databases... TODO : is this also the case in non-"indexed" scenarios?	DESIGN	0.7341156575284999	DESIGN	0.26588434247150006	WITHOUT_CLASSIFICATION
TODO: copy/paste from insertRows()	DESIGN	0.6347051291528799	DESIGN	0.3652948708471201	WITHOUT_CLASSIFICATION
TODO: copy/paste from recreate()	DESIGN	0.6347051291528799	DESIGN	0.3652948708471201	WITHOUT_CLASSIFICATION
should this interface extend PropertyMapping?	DESIGN	0.9667984250161342	WITHOUT_CLASSIFICATION	0.03320157498386578	DESIGN
ie. the subquery! yuck!	DESIGN	0.9996226365204217	WITHOUT_CLASSIFICATION	3.7736347957826287E-4	DESIGN
TODO: move to .sql package!!	DESIGN	0.8995984269051175	DESIGN	0.10040157309488258	WITHOUT_CLASSIFICATION
TODO: code duplication with SingleTableEntityPersister	DESIGN	0.8125802575529979	DESIGN	0.1874197424470021	WITHOUT_CLASSIFICATION
TODO: It would be really, really nice to use this to also model components!	DESIGN	0.9856769583736505	DESIGN	0.014323041626349385	WITHOUT_CLASSIFICATION
TODO: two hashmap lookups here is one too many...	DESIGN	0.5209680369561085	WITHOUT_CLASSIFICATION	0.47903196304389156	DESIGN
TODO: code duplication with JoinedSubclassEntityPersister	DESIGN	0.8125802575529979	DESIGN	0.1874197424470021	WITHOUT_CLASSIFICATION
perhaps not really necessary...	DESIGN	0.8464454744690879	WITHOUT_CLASSIFICATION	0.15355452553091214	DESIGN
NOTE: this assumes something about how propertySelectFragment is implemented by the subclass! was toUnqotedAliasStrings( getIdentiferColumnNames() ) before - now tried to remove that unqoting and missing aliases..	DESIGN	0.9994091045162707	WITHOUT_CLASSIFICATION	5.90895483729274E-4	DESIGN
NOTE: this assumes something about how propertySelectFragment is implemented by the subclass! was toUnqotedAliasStrings( getdiscriminatorColumnName() ) before - now tried to remove that unqoting and missing aliases..	DESIGN	0.9994091045162707	WITHOUT_CLASSIFICATION	5.90895483729274E-4	DESIGN
TODO: should we use SELECT .. FOR UPDATE?	DESIGN	0.9529186523766857	DESIGN	0.04708134762331418	WITHOUT_CLASSIFICATION
TODO: optimize this better!	DESIGN	0.639587715243414	DESIGN	0.3604122847565861	WITHOUT_CLASSIFICATION
TODO: should we allow suffixes on these ?	DESIGN	0.995559149331277	DESIGN	0.00444085066872301	WITHOUT_CLASSIFICATION
This is really ugly, but necessary:	DESIGN	0.9983784589344343	WITHOUT_CLASSIFICATION	0.0016215410655657477	DESIGN
ugly little workaround for fact that createUniqueKeyLoaders() does not handle component properties	DESIGN	0.8420022439293421	DESIGN	0.15799775607065794	WITHOUT_CLASSIFICATION
TODO: disable batch loading if lockMode > READ?	DESIGN	0.9580322079763938	WITHOUT_CLASSIFICATION	0.04196779202360621	DESIGN
append the SQL to return the generated identifier TODO: suck into Insert	DESIGN	0.8406435012442899	DESIGN	0.1593564987557101	WITHOUT_CLASSIFICATION
TODO: I am not so sure about the exception handling in this bit!	DESIGN	0.9954423736645643	DESIGN	0.004557626335435578	WITHOUT_CLASSIFICATION
TODO: is this really necessary????	DESIGN	0.7221043636355107	DESIGN	0.2778956363644892	WITHOUT_CLASSIFICATION
TODO: move to .sql package, and refactor with similar things!	DESIGN	0.9458368962862403	DESIGN	0.05416310371375972	WITHOUT_CLASSIFICATION
TODO: implement functionality this might be painful to do here, as the "join post processing" for the subquery has already been performed (meaning that for theta-join dialects, the join conditions have already been moved over to the where clause). A "simple" solution here might to perform "join post processing" once for the entire query (including any subqueries) at one fell swoop	DESIGN	0.9999802390709671	DESIGN	1.976092903291539E-5	WITHOUT_CLASSIFICATION
todo : this eventually needs to be removed	DESIGN	0.9854158089953655	WITHOUT_CLASSIFICATION	0.014584191004634388	DESIGN
kinda ugly, but needed for collections with a "." node mapping	DESIGN	0.9979435868030694	WITHOUT_CLASSIFICATION	0.0020564131969305	DESIGN
is this ok?	DESIGN	0.9996903802979674	WITHOUT_CLASSIFICATION	3.096197020326273E-4	DESIGN
TODO: perhaps this should be some other RuntimeException...	DESIGN	0.9998988990800438	DESIGN	1.0110091995613843E-4	WITHOUT_CLASSIFICATION
TODO: make this a bit nicer	DESIGN	0.9718752701940784	DESIGN	0.028124729805921563	WITHOUT_CLASSIFICATION
Yuck:	DESIGN	0.9964111984802502	WITHOUT_CLASSIFICATION	0.0035888015197497822	DESIGN
TODO: we should provide some way to get keys of collection of statistics to make it easier to retrieve from a GUI perspective	DESIGN	0.9999739960926566	DESIGN	2.6003907343456108E-5	WITHOUT_CLASSIFICATION
@return collection removal FIXME: even if isInverse="true"?	DESIGN	0.9505659909846007	DESIGN	0.04943400901539932	WITHOUT_CLASSIFICATION
TODO : will need reference to session factory to fully complete HHH-1907	DESIGN	0.9917042823071055	DESIGN	0.008295717692894522	WITHOUT_CLASSIFICATION
TODO: currently keeps Getters and Setters (instead of PropertyAccessors) because of the way getGetter() and getSetter() are implemented currently; yuck!	DESIGN	0.7329357890656577	WITHOUT_CLASSIFICATION	0.2670642109343424	DESIGN
TODO: redesign how PropertyAccessors are acquired...	DESIGN	0.7046100217994232	DESIGN	0.29538997820057683	WITHOUT_CLASSIFICATION
todo : YUCK!!!	DESIGN	0.9998638752503781	WITHOUT_CLASSIFICATION	1.3612474962189364E-4	DESIGN
TODO : YUCK!!! fix after HHH-1907 is complete	DESIGN	0.9992698691095607	DESIGN	7.301308904393598E-4	WITHOUT_CLASSIFICATION
TODO: need to make the majority of this functionality into a top-level support class for custom impl support	DESIGN	0.997457878372992	DESIGN	0.0025421216270079443	WITHOUT_CLASSIFICATION
TODO: design new lifecycle for ProxyFactory	DESIGN	0.5322923248427031	WITHOUT_CLASSIFICATION	0.467707675157297	DESIGN
TODO: would be nice to handle proxy classes elegantly!	DESIGN	0.7962790438936111	DESIGN	0.2037209561063888	WITHOUT_CLASSIFICATION
TODO: copy/paste from ManyToOneType	DESIGN	0.6347051291528799	DESIGN	0.3652948708471201	WITHOUT_CLASSIFICATION
TODO: should this be Session.instantiate(Persister, ...)?	DESIGN	0.9731881897531276	DESIGN	0.02681181024687247	WITHOUT_CLASSIFICATION
TODO: this is a bit arbitrary, expose a switch to the user?	DESIGN	0.8609032254183014	DESIGN	0.1390967745816985	WITHOUT_CLASSIFICATION
TODO: implement caching?! proxies?!	DESIGN	0.8670769806590303	DESIGN	0.13292301934096976	WITHOUT_CLASSIFICATION
TODO: is this right??	DESIGN	0.723341676605898	DESIGN	0.2766583233941021	WITHOUT_CLASSIFICATION
is this really necessary?	DESIGN	0.9960030892143292	WITHOUT_CLASSIFICATION	0.003996910785670756	DESIGN
TODO: move these to a new JoinableType abstract class, extended by EntityType and PersistentCollectionType:	DESIGN	0.9026623314625316	DESIGN	0.09733766853746838	WITHOUT_CLASSIFICATION
TODO: this is very suboptimal for some subclasses (namely components), since it does not take advantage of two-phase-load	DESIGN	0.981425416614174	DESIGN	0.018574583385825957	WITHOUT_CLASSIFICATION
worrying about proxies is perhaps a little bit of overkill here...	DESIGN	0.8535639235983462	WITHOUT_CLASSIFICATION	0.14643607640165376	DESIGN
NOTE VERY HACKISH WORKAROUND!! TODO: Fix this so it will work for non-POJO entity mode	DESIGN	0.5838429695086093	DESIGN	0.41615703049139074	WITHOUT_CLASSIFICATION
TODO: Fix this so it will work for non-POJO entity mode	DESIGN	0.5629840990614693	DESIGN	0.43701590093853077	WITHOUT_CLASSIFICATION
We would probably refactor to have LogicParser (builds a tree of simple expressions connected by and, or, not), ExpressionParser (translates from OO terms like foo, foo.Bar, foo.Bar.Baz to SQL terms like FOOS.ID, FOOS.BAR_ID, etc) and PathExpressionParser (which does much the same thing it does now)	DESIGN	0.9916568926833117	WITHOUT_CLASSIFICATION	0.008343107316688208	DESIGN
TODO: this is a little inefficient, don't need to do a whole deep replaceElements() call	DESIGN	0.9902021899347342	DESIGN	0.009797810065265729	WITHOUT_CLASSIFICATION
workaround for WebLogic	DESIGN	0.9725708601920818	WITHOUT_CLASSIFICATION	0.02742913980791812	DESIGN
TODO: this dependency is kinda Bad	DESIGN	0.9884784409634347	DESIGN	0.011521559036565265	WITHOUT_CLASSIFICATION
ick!	DESIGN	0.9991288176721137	WITHOUT_CLASSIFICATION	8.711823278862698E-4	DESIGN
short cut check...	DESIGN	0.9994342754795958	WITHOUT_CLASSIFICATION	5.657245204042521E-4	DESIGN
todo : move to StringHelper?	DESIGN	0.9957772605057819	WITHOUT_CLASSIFICATION	0.004222739494218054	DESIGN
yukky! Don't you have subclasses for that! TODO race conditions can happen here	DESIGN	0.7879269464012417	DESIGN	0.21207305359875814	WITHOUT_CLASSIFICATION
TODO: We probably should have a StatisticsNotPublishedException, to make it clean	DESIGN	0.9957139654911676	DESIGN	0.004286034508832434	WITHOUT_CLASSIFICATION
FIXME hack to work around fact that calling Node added = root.addChild( fqn ); doesn't properly set the version on the node	DESIGN	0.9965415383258841	DESIGN	0.0034584616741159435	WITHOUT_CLASSIFICATION
TODO: I considered validating the presence of the TS cache here, but decided to defer unti getQueryCacheInstance() in case the cache is never actually used	DESIGN	0.9784073882368884	DESIGN	0.021592611763111596	WITHOUT_CLASSIFICATION
need to do that here rather than in the save event listener to let the post insert events to have a id-filled entity when IDENTITY is used (EJB3)	DESIGN	0.9980872643867572	DESIGN	0.0019127356132429124	WITHOUT_CLASSIFICATION
TODO: simply remove this override if we fix the above todos	DESIGN	0.9992958599593178	DESIGN	7.041400406821205E-4	WITHOUT_CLASSIFICATION
This, is used by SessionFactoryImpl to hand to the generated SessionImpl; was the only reason I could see that we cannot just use null as Settings.cacheProvider	DESIGN	0.5649565495527847	DESIGN	0.43504345044721515	WITHOUT_CLASSIFICATION
this is done here 'cos we might only know the type here (ugly!) TODO: improve this a lot:	DESIGN	0.9996040402250685	DESIGN	3.959597749315142E-4	WITHOUT_CLASSIFICATION
todo : would love to have this work on a notification basis where the successful binding of an entity/subclass would emit a notification which the extendsQueue entries could react to...	DESIGN	0.9993374427333696	WITHOUT_CLASSIFICATION	6.625572666304217E-4	DESIGN
TODO : not sure the best way to handle this. The non-performant way :	DESIGN	0.9455853832562763	DESIGN	0.054414616743723644	WITHOUT_CLASSIFICATION
would be better to use the element-type to determine whether the old and the new are equal here; the problem being we do not necessarily have access to the element type in all cases	DESIGN	0.5533110236018711	WITHOUT_CLASSIFICATION	0.44668897639812893	DESIGN
This next bit is to allow for both unsaved-value="negative" and for "older" behavior where version number did not get seeded if it was already set in the object TODO: shift it into unsaved-value strategy	DESIGN	0.9952768444771662	DESIGN	0.004723155522833772	WITHOUT_CLASSIFICATION
merges don't cascade to uninitialized collections TODO: perhaps this does need to cascade after all....	DESIGN	0.9996801673293523	DESIGN	3.198326706477579E-4	WITHOUT_CLASSIFICATION
TODO: an alternative is to check if the owner has changed; if it hasn't then return collection.getOwner()	DESIGN	0.960799994468138	WITHOUT_CLASSIFICATION	0.039200005531861926	DESIGN
it is possible that the tree-walking in OuterJoinLoader can get to an association defined by a subclass, in which case the property-ref might refer to a property defined on a subclass of the current class in this case, the table name is not known - this temporary solution assumes that the property-ref refers to a property of the subclass table that the association belongs to (a reasonable guess) TODO: fix this, add: OuterJoinLoadable.getSubclassPropertyTableName(String propertyName)	DESIGN	0.9998210039766112	DESIGN	1.789960233888082E-4	WITHOUT_CLASSIFICATION
this only works because collection entries are kept in a sequenced map by persistence context (maybe we should do like entities and keep a separate sequences set...) TODO: calling entrySet on an IdentityMap is SLOW!!	DESIGN	0.9942051095454227	DESIGN	0.005794890454577224	WITHOUT_CLASSIFICATION
important, to account for newly saved entities in query todo : some kind of check for new status...	DESIGN	0.9983486836279364	WITHOUT_CLASSIFICATION	0.0016513163720637228	DESIGN
brand new collection TODO: or an array!! we can't lock objects with arrays now??	DESIGN	0.7674604053989201	DESIGN	0.23253959460107984	WITHOUT_CLASSIFICATION
TODO: if object was an uninitialized proxy, this is inefficient, resulting in two SQL selects	DESIGN	0.7735563865949271	WITHOUT_CLASSIFICATION	0.22644361340507296	DESIGN
before cascade! TODO: should this be Session.instantiate(Persister, ...)?	DESIGN	0.9698084866420972	DESIGN	0.030191513357902783	WITHOUT_CLASSIFICATION
TODO : absolutely no usages of this constructor form; can it go away?	DESIGN	0.7448519562459248	DESIGN	0.2551480437540751	WITHOUT_CLASSIFICATION
todo : need to find a clean way to handle the "event source" role a seperate classs responsible for generating/dispatching events just duplicates most of the Session methods... passing around seperate reto interceptor, factory, actionQueue, and persistentContext is not manageable...	DESIGN	0.9748118734229239	DESIGN	0.02518812657707614	WITHOUT_CLASSIFICATION
todo : remove	DESIGN	0.9990560981959563	WITHOUT_CLASSIFICATION	9.439018040436183E-4	DESIGN
aliasRefNode.resolve( false, false, aliasRefNode.getText() ); TODO: is it kosher to do it here? TODO: is it kosher to do it here?	DESIGN	0.8657125328996491	DESIGN	0.13428746710035092	WITHOUT_CLASSIFICATION
No explicit select expression; render the id and properties projection lists for every persister in the from clause into a single 'token node'. TODO: the only reason we need this stuff now is collection filters, we should get rid of derived select clause completely!	DESIGN	0.9991429304945835	DESIGN	8.570695054165461E-4	WITHOUT_CLASSIFICATION
TODO : an optimization here would be to consider cascade deletes and not gen those delete statements; the difficulty is the ordering of the tables here vs the cascade attributes on the persisters -> the table info gotten here should really be self-contained (i.e., a class representation defining all the needed attributes), then we could then get an array of those	DESIGN	0.9998072138266666	DESIGN	1.9278617333340437E-4	WITHOUT_CLASSIFICATION
TODO: get SQL rendering out of here, create an AST for the join expressions. Use the SQL generator grammar to generate the SQL text for the index expression.	DESIGN	0.9240436941677258	WITHOUT_CLASSIFICATION	0.0759563058322741	DESIGN
TODO : this really needs to be delayed unitl after we definitively know all node types where this is currently a problem is parameters for which where we cannot unequivocally resolve an expected type	DESIGN	0.9981209228721506	DESIGN	0.0018790771278495014	WITHOUT_CLASSIFICATION
TODO: Figure out a better way to get the FROM elements in a proper tree structure. If this is not the destination of a many-to-many, add it as a child of the origin.	DESIGN	0.9955204952641021	DESIGN	0.004479504735897884	WITHOUT_CLASSIFICATION
work around that crazy issue where the tree contains "empty" FromElements (no text); afaict, this is caused by FromElementFactory.createCollectionJoin()	DESIGN	0.9962702409862605	WITHOUT_CLASSIFICATION	0.003729759013739477	DESIGN
TODO: this class does too many things! we need a different kind of path expression parser for each of the diffferent ways in which path expressions can occur	DESIGN	0.9516208098100722	DESIGN	0.04837919018992785	WITHOUT_CLASSIFICATION
real hacky... used to count the nesting of parentheses	DESIGN	0.9603740626342216	WITHOUT_CLASSIFICATION	0.03962593736577843	DESIGN
TODO : would be really nice to cache the spec on the query-def so as to not have to re-calc the hash; currently not doable though because of the resultset-ref stuff...	DESIGN	0.786238675888038	DESIGN	0.213761324111962	WITHOUT_CLASSIFICATION
for arrays, we should end the collection load before resolving the entities, since the actual array instances are not instantiated during loading TODO: or we could do this polymorphically, and have two different operations implemented differently for arrays	DESIGN	0.9302141536380416	DESIGN	0.06978584636195845	WITHOUT_CLASSIFICATION
polymorphism not really handled completely correctly, perhaps...well, actually its ok, assuming that the entity name used in the lookup is the same as the the one used here, which it will be	DESIGN	0.9797035296559954	WITHOUT_CLASSIFICATION	0.020296470344004617	DESIGN
TODO: should "record" how many properties we have reffered to - and if we don't get'em'all we throw an exception! Way better than trial and error ;)	DESIGN	0.9920322864320266	DESIGN	0.007967713567973449	WITHOUT_CLASSIFICATION
VERY IMPORTANT!!!! - This class needs to be free of any static references to any CGLIB or Javassist classes. Otherwise, users will always need both on their classpaths no matter which (if either) they use. Another option here would be to remove the Hibernate.isPropertyInitialized() method and have the users go through the SessionFactory to get this information.	DESIGN	0.9207015935737094	DESIGN	0.07929840642629057	WITHOUT_CLASSIFICATION
TODO: is it really neceassry to provide Configuration to CollectionPersisters ? Should it not be enough with associated class ? or why does EntityPersister's not get access to configuration ? The only reason I could see that Configuration gets passed to collection persisters is so that they can look up the dom4j node name of the entity element in case no explicit node name was applied at the collection element level. Are you kidding me? Trivial to fix then. Just store and expose the node name on the entity persister (which the collection persister looks up anyway via other means...).	DESIGN	0.999985881574798	DESIGN	1.4118425202074524E-5	WITHOUT_CLASSIFICATION
for backward compatibility, allow a set with no not-null element columns, using all columns in the row locater SQL TODO: create an implicit not null constraint on all cols?	DESIGN	0.9386423276862745	DESIGN	0.0613576723137255	WITHOUT_CLASSIFICATION
SPACES TODO: i'm not sure, but perhaps we should exclude abstract denormalized tables?	DESIGN	0.9997903587131458	DESIGN	2.0964128685419819E-4	WITHOUT_CLASSIFICATION
workaround, for backward compatibility of sets with no not-null columns, assume all columns are used in the row locator SQL	DESIGN	0.9953511682006563	WITHOUT_CLASSIFICATION	0.0046488317993437864	DESIGN
note that this method could easily be moved up to BasicEntityPersister, if we ever needed to reuse it from other subclasses	DESIGN	0.8442090981527803	WITHOUT_CLASSIFICATION	0.1557909018472197	DESIGN
index += getPropertyColumnSpan( i ); TODO: this is kinda slow...	DESIGN	0.6473331789506441	DESIGN	0.3526668210493559	WITHOUT_CLASSIFICATION
TODO: need some caching scheme? really comes down to decision regarding amount of state (if any) kept on PropertyAccessors	DESIGN	0.7774673313669261	DESIGN	0.22253266863307372	WITHOUT_CLASSIFICATION
TODO: here is why we need to make bytecode provider global :( TODO : again, fix this after HHH-1907 is complete	DESIGN	0.9999999994967474	DESIGN	5.032524840462861E-10	WITHOUT_CLASSIFICATION
TODO: Yuck! This is not quite good enough, it's a quick hack around the problem of having a to-one association that refers to an embedded component:	DESIGN	0.999999729007292	DESIGN	2.7099270810873203E-7	WITHOUT_CLASSIFICATION
for DOM4J "collections" only TODO: it would be better if this was done at the higher level by Printer	DESIGN	0.9094385544664839	DESIGN	0.09056144553351612	WITHOUT_CLASSIFICATION
would be great to move all this below here into another method that could also be used from the new scrolling stuff. Would need to change the way the max-row stuff is handled (i.e. behind an interface) so that I could do the control breaking at the means to know when to stop	DESIGN	0.9999963550142362	DESIGN	3.6449857636781777E-6	WITHOUT_CLASSIFICATION
TODO: can we always use the "null property" approach for everything?	DESIGN	0.9582098162757362	DESIGN	0.04179018372426381	WITHOUT_CLASSIFICATION
polymorphism comment above	DESIGN	0.9999496945742548	WITHOUT_CLASSIFICATION	5.030542574522253E-5	DESIGN
some messy, complex stuff here, since createCriteria() can take an aliased path, or a path rooted at the creating criteria instance	DESIGN	0.9999956382825	WITHOUT_CLASSIFICATION	4.361717499981922E-6	DESIGN
TODO: really bad, evil hack to fix!!!	DESIGN	0.999913428822964	DESIGN	8.65711770360422E-5	WITHOUT_CLASSIFICATION
ugly hack for cases like "elements(foo.bar.collection)" (multi-part path expression ending in elements or indices)	DESIGN	0.9782402770974276	DESIGN	0.021759722902572363	WITHOUT_CLASSIFICATION
try block is a hack around fact that currently tuplizers are not given the opportunity to resolve a subclass entity name. this allows the (we assume custom) interceptor the ability to influence this decision if we were not able to based on the given entityName	DESIGN	0.9996340122501012	DESIGN	3.6598774989883104E-4	WITHOUT_CLASSIFICATION
/ HACK ALERT !!!!!!!!!!!!!!!!!!!!!!!!!!!! Attempt to work around "ghost" ImpliedFromElements that occasionally show up between the actual things being joined. This consistently occurs from index nodes (at least against many-to-many). Not sure if there are other conditions Essentially, look-ahead to the next FromElement that actually writes something to the SQL	DESIGN	0.8312077364143654	WITHOUT_CLASSIFICATION	0.1687922635856346	DESIGN
init the table here instead of earlier, so that we can get a quoted table name TODO: would it be better to simply pass the qualified table name, instead of splitting it up into schema/catalog/table names	DESIGN	0.9782760549442749	DESIGN	0.021723945055724968	WITHOUT_CLASSIFICATION
TODO : would be great to have a Mapping#hasNonIdentifierPropertyNamedId method I don't believe that Mapping#getReferencedPropertyType accounts for the identifier property; so if it returns for a property named 'id', then we should have a non-id field named id	DESIGN	0.9873891080801798	DESIGN	0.0126108919198203	WITHOUT_CLASSIFICATION
TODO: is this really necessary????	DESIGN	0.7221043636355107	DESIGN	0.2778956363644892	WITHOUT_CLASSIFICATION
TODO: ideally we need the construction of PropertyAccessor to take the following: 1) EntityMode 2) EntityMode-specific data (i.e., the classname for pojo entities) 3) Property-specific data based on the EntityMode (i.e., property-name or dom4j-node-name) The easiest way, with the introduction of the new runtime-metamodel classes, would be the the following predicates: 1) PropertyAccessorFactory.getPropertyAccessor() takes references to both a org.hibernate.metadata.EntityModeMetadata and org.hibernate.metadata.Property 2) What is now termed a "PropertyAccessor" stores any values needed from those two pieces of information 3) Code can then simply call PropertyAccess.getGetter() with no parameters; likewise with PropertyAccessor.getSetter()	DESIGN	0.9657138083100796	DESIGN	0.0342861916899204	WITHOUT_CLASSIFICATION
TODO: this is temporary in that the end result will probably not take a Property reference per-se.	DESIGN	0.9961394465299596	DESIGN	0.0038605534700403158	WITHOUT_CLASSIFICATION
todo : this eventually needs to be removed	DESIGN	0.9854158089953655	WITHOUT_CLASSIFICATION	0.014584191004634388	DESIGN
TODO: make this a bit nicer	DESIGN	0.9718752701940784	DESIGN	0.028124729805921563	WITHOUT_CLASSIFICATION
todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.8377720819339619	WITHOUT_CLASSIFICATION	0.16222791806603815	DESIGN
todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.8377720819339619	WITHOUT_CLASSIFICATION	0.16222791806603815	DESIGN
todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.8377720819339619	WITHOUT_CLASSIFICATION	0.16222791806603815	DESIGN
todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.8377720819339619	WITHOUT_CLASSIFICATION	0.16222791806603815	DESIGN
todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.8377720819339619	WITHOUT_CLASSIFICATION	0.16222791806603815	DESIGN
todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.8377720819339619	WITHOUT_CLASSIFICATION	0.16222791806603815	DESIGN
todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.8377720819339619	WITHOUT_CLASSIFICATION	0.16222791806603815	DESIGN
todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.8377720819339619	WITHOUT_CLASSIFICATION	0.16222791806603815	DESIGN
FIXME Per the RegionFactory class Javadoc, this constructor version should not be necessary. @param props The configuration properties	DESIGN	0.6327515404445319	DESIGN	0.36724845955546814	WITHOUT_CLASSIFICATION
FIXME Per the RegionFactory class Javadoc, this constructor version should not be necessary. @param props The configuration properties	DESIGN	0.6327515404445319	DESIGN	0.36724845955546814	WITHOUT_CLASSIFICATION
FIXME Per the RegionFactory class Javadoc, this constructor version should not be necessary. @param props The configuration properties	DESIGN	0.6327515404445319	DESIGN	0.36724845955546814	WITHOUT_CLASSIFICATION
TODO : probably better to calculate these and pass them in, as it'll be more performant	DESIGN	0.9985590483351654	DESIGN	0.0014409516648345372	WITHOUT_CLASSIFICATION
