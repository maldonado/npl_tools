test out the optimizer:	WITHOUT_CLASSIFICATION	0.9999654002944757	WITHOUT_CLASSIFICATION	3.459970552437554E-5	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9998680402420813	WITHOUT_CLASSIFICATION	1.3195975791871172E-4	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9998680402420813	WITHOUT_CLASSIFICATION	1.3195975791871172E-4	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9998680402420813	WITHOUT_CLASSIFICATION	1.3195975791871172E-4	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9998680402420813	WITHOUT_CLASSIFICATION	1.3195975791871172E-4	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9998680402420813	WITHOUT_CLASSIFICATION	1.3195975791871172E-4	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9998680402420813	WITHOUT_CLASSIFICATION	1.3195975791871172E-4	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9998680402420813	WITHOUT_CLASSIFICATION	1.3195975791871172E-4	DESIGN
return	WITHOUT_CLASSIFICATION	0.9998864940018818	WITHOUT_CLASSIFICATION	1.1350599811830039E-4	DESIGN
return	WITHOUT_CLASSIFICATION	0.9998864940018818	WITHOUT_CLASSIFICATION	1.1350599811830039E-4	DESIGN
| this | bean | args | raw bean |	WITHOUT_CLASSIFICATION	0.9975169270757025	WITHOUT_CLASSIFICATION	0.0024830729242975463	DESIGN
invokeinterface	WITHOUT_CLASSIFICATION	0.9998740958691271	WITHOUT_CLASSIFICATION	1.259041308727615E-4	DESIGN
astore 4 store the raw bean	WITHOUT_CLASSIFICATION	0.999920124497751	WITHOUT_CLASSIFICATION	7.987550224897158E-5	DESIGN
current stack len = 0	WITHOUT_CLASSIFICATION	0.9999920662465677	WITHOUT_CLASSIFICATION	7.933753432292179E-6	DESIGN
current stack len = 0	WITHOUT_CLASSIFICATION	0.9999920662465677	WITHOUT_CLASSIFICATION	7.933753432292179E-6	DESIGN
local variables | target obj | each oldvalue |	WITHOUT_CLASSIFICATION	0.9999037226043023	WITHOUT_CLASSIFICATION	9.627739569770839E-5	DESIGN
invokeinterface invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9993034094468191	WITHOUT_CLASSIFICATION	6.965905531809017E-4	DESIGN
putfield new value of the field	WITHOUT_CLASSIFICATION	0.9998505676251711	WITHOUT_CLASSIFICATION	1.4943237482882492E-4	DESIGN
reference type	WITHOUT_CLASSIFICATION	0.9996458428973074	WITHOUT_CLASSIFICATION	3.541571026925632E-4	DESIGN
double	WITHOUT_CLASSIFICATION	0.9999768519224742	WITHOUT_CLASSIFICATION	2.3148077525744216E-5	DESIGN
double	WITHOUT_CLASSIFICATION	0.9999768519224742	WITHOUT_CLASSIFICATION	2.3148077525744216E-5	DESIGN
long	WITHOUT_CLASSIFICATION	0.9998638323144445	WITHOUT_CLASSIFICATION	1.3616768555549928E-4	DESIGN
just decrement the lock, don't recache (we don't know which transaction won)	WITHOUT_CLASSIFICATION	0.9999505219387359	WITHOUT_CLASSIFICATION	4.9478061264077005E-5	DESIGN
decode row selection...	WITHOUT_CLASSIFICATION	0.9998847527386474	WITHOUT_CLASSIFICATION	1.1524726135266571E-4	DESIGN
disassembled state gets put in a new array (we write to cache by value!)	WITHOUT_CLASSIFICATION	0.9992079993705238	WITHOUT_CLASSIFICATION	7.920006294762738E-4	DESIGN
again, CCS did not have such a concept; but a reasonable proximity is to clear the cache after transaction as long as the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999573432274792	WITHOUT_CLASSIFICATION	4.265677252077495E-5	DESIGN
CHECK	WITHOUT_CLASSIFICATION	0.9998680402420813	WITHOUT_CLASSIFICATION	1.3195975791871172E-4	DESIGN
ROW ID	WITHOUT_CLASSIFICATION	0.9998081813804607	WITHOUT_CLASSIFICATION	1.9181861953934218E-4	DESIGN
COMPOSITE-ID	WITHOUT_CLASSIFICATION	0.9998740958691271	WITHOUT_CLASSIFICATION	1.259041308727615E-4	DESIGN
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9998740958691271	WITHOUT_CLASSIFICATION	1.259041308727615E-4	DESIGN
Property prop = new Property(); prop.setName("id"); prop.setPropertyAccessorName("embedded"); prop.setValue(id); entity.setIdentifierProperty(prop);	WITHOUT_CLASSIFICATION	0.9998997453050176	WITHOUT_CLASSIFICATION	1.0025469498246456E-4	DESIGN
DYNAMIC INSERT	WITHOUT_CLASSIFICATION	0.9998740958691271	WITHOUT_CLASSIFICATION	1.259041308727615E-4	DESIGN
PERSISTER	WITHOUT_CLASSIFICATION	0.9998680402420813	WITHOUT_CLASSIFICATION	1.3195975791871172E-4	DESIGN
get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9996915614530038	WITHOUT_CLASSIFICATION	3.084385469963108E-4	DESIGN
PROPERTIES	WITHOUT_CLASSIFICATION	0.9998680402420813	WITHOUT_CLASSIFICATION	1.3195975791871172E-4	DESIGN
PROPERTIES	WITHOUT_CLASSIFICATION	0.9998680402420813	WITHOUT_CLASSIFICATION	1.3195975791871172E-4	DESIGN
generated properties can never be insertable...	WITHOUT_CLASSIFICATION	0.9997458002413244	WITHOUT_CLASSIFICATION	2.5419975867566535E-4	DESIGN
TABLE	WITHOUT_CLASSIFICATION	0.9998715917412823	WITHOUT_CLASSIFICATION	1.2840825871765016E-4	DESIGN
by default, natural-ids are "immutable" (constant)	WITHOUT_CLASSIFICATION	0.998541194811708	WITHOUT_CLASSIFICATION	0.001458805188292052	DESIGN
( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9991534854389535	WITHOUT_CLASSIFICATION	8.46514561046412E-4	DESIGN
we found some extends attributes referencing entities which were not already processed. here we need to locate all entity-names and class-names contained in this document itself, making sure that these get removed from the extendz list such that only extends names which require us to delay processing (i.e. external to this document and not yet processed) are contained in the returned result	WITHOUT_CLASSIFICATION	0.6617417398601848	WITHOUT_CLASSIFICATION	0.33825826013981514	DESIGN
Build a ResultSetMappingDefinition given a containing element for the "return-XXX" elements @param resultSetElem The element containing the return definitions. @param path No clue... @param mappings The current processing state. @return The description of the mappings...	WITHOUT_CLASSIFICATION	0.9999639908640677	WITHOUT_CLASSIFICATION	3.6009135932237756E-5	DESIGN
private boolean showSql; private boolean formatSql;	WITHOUT_CLASSIFICATION	0.9997383574579075	WITHOUT_CLASSIFICATION	2.6164254209252335E-4	DESIGN
public boolean isShowSqlEnabled() { return showSql; } public boolean isFormatSqlEnabled() { return formatSql; }	WITHOUT_CLASSIFICATION	0.9996975919573722	WITHOUT_CLASSIFICATION	3.0240804262774963E-4	DESIGN
Set a custom entity resolver. This entity resolver must be set before addXXX(misc) call. Default value is {@link org.hibernate.util.DTDEntityResolver} @param entityResolver entity resolver to use	WITHOUT_CLASSIFICATION	0.8505398415073301	WITHOUT_CLASSIFICATION	0.1494601584926698	DESIGN
final List extendsQueue,	WITHOUT_CLASSIFICATION	0.9995490098790657	WITHOUT_CLASSIFICATION	4.509901209344299E-4	DESIGN
If close() is called, guarantee unbind()	WITHOUT_CLASSIFICATION	0.9996525120567894	WITHOUT_CLASSIFICATION	3.4748794321062625E-4	DESIGN
if a ThreadLocalSessionContext-bound session happens to get serialized, to be completely correct, we need to make sure that unbinding of that session occurs.	WITHOUT_CLASSIFICATION	0.9504549356662019	WITHOUT_CLASSIFICATION	0.04954506433379809	DESIGN
on the inverse, it makes sense that if a ThreadLocalSessionContext- bound session then gets deserialized to go ahead and re-bind it to the ThreadLocalSessionContext session map.	WITHOUT_CLASSIFICATION	0.9975111672367893	WITHOUT_CLASSIFICATION	0.002488832763210641	DESIGN
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9998492372346258	WITHOUT_CLASSIFICATION	1.5076276537416238E-4	DESIGN
60 second lock timeout	WITHOUT_CLASSIFICATION	0.9999091579801653	WITHOUT_CLASSIFICATION	9.084201983469738E-5	DESIGN
OptimisticCache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994002999657632	WITHOUT_CLASSIFICATION	5.997000342368315E-4	DESIGN
Cache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994002999657632	WITHOUT_CLASSIFICATION	5.997000342368315E-4	DESIGN
option.setDataVersion( NonLockingDataVersion.INSTANCE );	WITHOUT_CLASSIFICATION	0.9992564144695602	WITHOUT_CLASSIFICATION	7.435855304398626E-4	DESIGN
do the put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9995091199852414	WITHOUT_CLASSIFICATION	4.908800147585905E-4	DESIGN
ignore!	WITHOUT_CLASSIFICATION	0.9998680402420813	WITHOUT_CLASSIFICATION	1.3195975791871172E-4	DESIGN
tree cache in optimistic mode seems to have as very difficult time with remove calls on non-existent nodes (NPEs)...	WITHOUT_CLASSIFICATION	0.9745893945149172	WITHOUT_CLASSIFICATION	0.025410605485082748	DESIGN
60 seconds	WITHOUT_CLASSIFICATION	0.9998682605089845	WITHOUT_CLASSIFICATION	1.3173949101543281E-4	DESIGN
ignore!	WITHOUT_CLASSIFICATION	0.9998680402420813	WITHOUT_CLASSIFICATION	1.3195975791871172E-4	DESIGN
60 seconds	WITHOUT_CLASSIFICATION	0.9998682605089845	WITHOUT_CLASSIFICATION	1.3173949101543281E-4	DESIGN
do the failfast put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9995091199852414	WITHOUT_CLASSIFICATION	4.908800147585905E-4	DESIGN
NOTE : evict() operates locally only (i.e., does not propogate to any other nodes in the potential cluster). This is exactly what is needed when we destroy() here; destroy() is used as part of the process of shutting down a SessionFactory; thus these removals should not be propogated	WITHOUT_CLASSIFICATION	0.839135295235565	WITHOUT_CLASSIFICATION	0.160864704764435	DESIGN
protected RegionRootListener listener;	WITHOUT_CLASSIFICATION	0.997606803402409	WITHOUT_CLASSIFICATION	0.002393196597591024	DESIGN
Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9997295031731305	WITHOUT_CLASSIFICATION	2.7049682686957076E-4	DESIGN
If we've been blocking for the mutex, perhaps another thread has already reestablished the root. In case the node was reestablised via replication, confirm it's marked "resident" (a status which doesn't replicate)	WITHOUT_CLASSIFICATION	0.9999895942595363	WITHOUT_CLASSIFICATION	1.0405740463767678E-5	DESIGN
For pessimistic locking, we just want to toss out our ref to any old invalid root node and get the latest (may be null)	WITHOUT_CLASSIFICATION	0.998986930255722	WITHOUT_CLASSIFICATION	0.0010130697442779692	DESIGN
The rest only matters for optimistic locking, where we need to establish the proper data version on the region root	WITHOUT_CLASSIFICATION	0.9952303517909735	WITHOUT_CLASSIFICATION	0.004769648209026507	DESIGN
Don't hold a transactional lock for this	WITHOUT_CLASSIFICATION	0.963473882055234	WITHOUT_CLASSIFICATION	0.03652611794476602	DESIGN
Make sure the root node for the region exists and has a DataVersion that never complains	WITHOUT_CLASSIFICATION	0.9998722215285204	WITHOUT_CLASSIFICATION	1.277784714796064E-4	DESIGN
Never evict this node	WITHOUT_CLASSIFICATION	0.9997188239905043	WITHOUT_CLASSIFICATION	2.811760094956527E-4	DESIGN
Fix up the resident flag	WITHOUT_CLASSIFICATION	0.999966942024063	WITHOUT_CLASSIFICATION	3.3057975937097967E-5	DESIGN
60 seconds	WITHOUT_CLASSIFICATION	0.9998682605089845	WITHOUT_CLASSIFICATION	1.3173949101543281E-4	DESIGN
We ignore minimalPutOverride. JBossCache putForExternalRead is already about as minimal as we can get; it will promptly return if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.999101806669411	WITHOUT_CLASSIFICATION	8.981933305890576E-4	DESIGN
no-op. We don't own the cache so we shouldn't stop it.	WITHOUT_CLASSIFICATION	0.9993989913807386	WITHOUT_CLASSIFICATION	6.010086192614752E-4	DESIGN
This should only be possible if the caches are constructor injected	WITHOUT_CLASSIFICATION	0.9967450643755739	WITHOUT_CLASSIFICATION	0.0032549356244261935	DESIGN
We only build caches if none were passed in. Passing in caches counts as a clear statement of exactly what is wanted	WITHOUT_CLASSIFICATION	0.9998156682028748	WITHOUT_CLASSIFICATION	1.8433179712507063E-4	DESIGN
Set up the cache factory	WITHOUT_CLASSIFICATION	0.9997755622093054	WITHOUT_CLASSIFICATION	2.2443779069466262E-4	DESIGN
See if the user configured a multiplexer stack	WITHOUT_CLASSIFICATION	0.9996807860794569	WITHOUT_CLASSIFICATION	3.192139205430865E-4	DESIGN
Default to collections sharing entity cache if there is one	WITHOUT_CLASSIFICATION	0.9997562459874051	WITHOUT_CLASSIFICATION	2.437540125950412E-4	DESIGN
Default to sharing the entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999117834131084	WITHOUT_CLASSIFICATION	8.821658689154134E-5	DESIGN
For Timestamps, we default to a separate config	WITHOUT_CLASSIFICATION	0.9942926467547529	WITHOUT_CLASSIFICATION	0.005707353245247096	DESIGN
We can't change the TM on a running cache; just check if the cache has no TM and we're OK with that	WITHOUT_CLASSIFICATION	0.9999756862502618	WITHOUT_CLASSIFICATION	2.4313749738126263E-5	DESIGN
Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9995619753281301	WITHOUT_CLASSIFICATION	4.380246718698722E-4	DESIGN
Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9998877176090093	WITHOUT_CLASSIFICATION	1.1228239099068204E-4	DESIGN
This method should be implemented assuming it's valid to do start/stop/start -- leave state appropriate for another start	WITHOUT_CLASSIFICATION	0.9452417447118503	WITHOUT_CLASSIFICATION	0.05475825528814976	DESIGN
Make sure we don't re-release the same cache	WITHOUT_CLASSIFICATION	0.9993284585816086	WITHOUT_CLASSIFICATION	6.715414183915146E-4	DESIGN
We use a different delegate than the non-optimistic superclass default	WITHOUT_CLASSIFICATION	0.9994374957417901	WITHOUT_CLASSIFICATION	5.62504258210017E-4	DESIGN
Following methods we don't delegate since they have so little logic it's clearer to just implement them here	WITHOUT_CLASSIFICATION	0.9657173644668875	WITHOUT_CLASSIFICATION	0.034282635533112414	DESIGN
If JBC is using INVALIDATION, we don't want to propagate changes. We use the Timestamps cache to manage invalidation	WITHOUT_CLASSIFICATION	0.9991230690817708	WITHOUT_CLASSIFICATION	8.769309182290532E-4	DESIGN
We don't want to waste effort setting an option if JBC is already in LOCAL mode. If JBC is REPL_(A)SYNC then check if they passed an config option to disable query replication	WITHOUT_CLASSIFICATION	0.9997477193572583	WITHOUT_CLASSIFICATION	2.522806427417715E-4	DESIGN
Don't hold the JBC node lock throughout the tx, as that prevents updates Add a zero (or low) timeout option so we don't block waiting for tx's that did a put to commit	WITHOUT_CLASSIFICATION	0.9999708599031016	WITHOUT_CLASSIFICATION	2.9140096898350894E-5	DESIGN
Double check the distributed cache	WITHOUT_CLASSIFICATION	0.9999831246851153	WITHOUT_CLASSIFICATION	1.6875314884751893E-5	DESIGN
Get an exclusive right to update JBC for this key from this node.	WITHOUT_CLASSIFICATION	0.997006587697321	WITHOUT_CLASSIFICATION	0.00299341230267897	DESIGN
We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9986447260599872	WITHOUT_CLASSIFICATION	0.001355273940012698	DESIGN
Initial load from JBC	WITHOUT_CLASSIFICATION	0.9998538594203237	WITHOUT_CLASSIFICATION	1.4614057967621315E-4	DESIGN
See if we had a 2nd invalidation from the same initial preinvalidation timestamp. If so, only increment if the new current value is an increase	WITHOUT_CLASSIFICATION	0.999963075770752	WITHOUT_CLASSIFICATION	3.692422924790628E-5	DESIGN
We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9986447260599872	WITHOUT_CLASSIFICATION	0.001355273940012698	DESIGN
If the workspace node has null as well, OK; if not we've been modified in a non-comparable manner, which we have to treat as us being newer	WITHOUT_CLASSIFICATION	0.9999807970784517	WITHOUT_CLASSIFICATION	1.9202921548362702E-5	DESIGN
The standard comparator types are not Serializable but are singletons	WITHOUT_CLASSIFICATION	0.9980398972999812	WITHOUT_CLASSIFICATION	0.00196010270001881	DESIGN
ignore!	WITHOUT_CLASSIFICATION	0.9998680402420813	WITHOUT_CLASSIFICATION	1.3195975791871172E-4	DESIGN
ignore it	WITHOUT_CLASSIFICATION	0.999787027345425	WITHOUT_CLASSIFICATION	2.1297265457498218E-4	DESIGN
construct the cache	WITHOUT_CLASSIFICATION	0.9999658645266882	WITHOUT_CLASSIFICATION	3.413547331180615E-5	DESIGN
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9979225623520557	WITHOUT_CLASSIFICATION	0.0020774376479444218	DESIGN
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9979225623520557	WITHOUT_CLASSIFICATION	0.0020774376479444218	DESIGN
ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9998743060292634	WITHOUT_CLASSIFICATION	1.2569397073656304E-4	DESIGN
swaldman 2006-08-28: define c3p0-style configuration parameters for initialPoolSize, which hibernate sensibly lets default to minPoolSize, but we'll let users override it with the c3p0-style property if they want.	WITHOUT_CLASSIFICATION	0.9902871651967163	WITHOUT_CLASSIFICATION	0.009712834803283596	DESIGN
DataSource unpooled = DataSources.unpooledDataSource(jdbcUrl, props.getProperty(Environment.USER), props.getProperty(Environment.PASS));	WITHOUT_CLASSIFICATION	0.9998907403978173	WITHOUT_CLASSIFICATION	1.092596021825539E-4	DESIGN
TRUE if the pool is borrowed from the outside, FALSE if we used to create it	WITHOUT_CLASSIFICATION	0.9975325599658996	WITHOUT_CLASSIFICATION	0.0024674400341003567	DESIGN
get a connection from the pool (thru DriverManager, cfr. Proxool doc)	WITHOUT_CLASSIFICATION	0.9987437195717525	WITHOUT_CLASSIFICATION	0.0012562804282474842	DESIGN
set the Transaction Isolation if defined	WITHOUT_CLASSIFICATION	0.9997795627154855	WITHOUT_CLASSIFICATION	2.2043728451441076E-4	DESIGN
toggle autoCommit to false if set	WITHOUT_CLASSIFICATION	0.9977636471969656	WITHOUT_CLASSIFICATION	0.0022363528030343036	DESIGN
return the connection	WITHOUT_CLASSIFICATION	0.9999519233290594	WITHOUT_CLASSIFICATION	4.807667094070828E-5	DESIGN
Get the configurator files (if available)	WITHOUT_CLASSIFICATION	0.9999358505935783	WITHOUT_CLASSIFICATION	6.41494064217233E-5	DESIGN
Default the Proxool alias setting	WITHOUT_CLASSIFICATION	0.9999220174747563	WITHOUT_CLASSIFICATION	7.798252524362413E-5	DESIGN
Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9989120588397551	WITHOUT_CLASSIFICATION	0.0010879411602449504	DESIGN
Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9989120588397551	WITHOUT_CLASSIFICATION	0.0010879411602449504	DESIGN
Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9991590630564178	WITHOUT_CLASSIFICATION	8.409369435822164E-4	DESIGN
Set the existing pool flag to true	WITHOUT_CLASSIFICATION	0.9980524090111885	WITHOUT_CLASSIFICATION	0.0019475909888115226	DESIGN
Configured using the JAXP Configurator	WITHOUT_CLASSIFICATION	0.999692315348382	WITHOUT_CLASSIFICATION	3.0768465161797726E-4	DESIGN
Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9989120588397551	WITHOUT_CLASSIFICATION	0.0010879411602449504	DESIGN
Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9991590630564178	WITHOUT_CLASSIFICATION	8.409369435822164E-4	DESIGN
Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9991590630564178	WITHOUT_CLASSIFICATION	8.409369435822164E-4	DESIGN
Configured using the Properties File Configurator	WITHOUT_CLASSIFICATION	0.9991328390105658	WITHOUT_CLASSIFICATION	8.671609894341432E-4	DESIGN
Remember Isolation level	WITHOUT_CLASSIFICATION	0.9998381450716827	WITHOUT_CLASSIFICATION	1.6185492831728314E-4	DESIGN
If the provider was leeching off an existing pool don't close it	WITHOUT_CLASSIFICATION	0.9999901091374215	WITHOUT_CLASSIFICATION	9.890862578638276E-6	DESIGN
We have created the pool ourselves, so shut it down	WITHOUT_CLASSIFICATION	0.999959419400806	WITHOUT_CLASSIFICATION	4.058059919393421E-5	DESIGN
not really a many-to-one association necessarily	WITHOUT_CLASSIFICATION	0.9993455299757719	WITHOUT_CLASSIFICATION	6.544700242281191E-4	DESIGN
not really a many-to-one association necessarily	WITHOUT_CLASSIFICATION	0.9993455299757719	WITHOUT_CLASSIFICATION	6.544700242281191E-4	DESIGN
always overwrite nonversioned data	WITHOUT_CLASSIFICATION	0.9996666620082092	WITHOUT_CLASSIFICATION	3.3333799179087264E-4	DESIGN
public Currency getCurrency(int col) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9987146578032314	WITHOUT_CLASSIFICATION	0.0012853421967685564	DESIGN
default is POJO	WITHOUT_CLASSIFICATION	0.9998467437390848	WITHOUT_CLASSIFICATION	1.5325626091527064E-4	DESIGN
use setParameter for null values	WITHOUT_CLASSIFICATION	0.9995780727292417	WITHOUT_CLASSIFICATION	4.219272707583241E-4	DESIGN
use setParameter for null values	WITHOUT_CLASSIFICATION	0.9995780727292417	WITHOUT_CLASSIFICATION	4.219272707583241E-4	DESIGN
private CacheEntry cacheEntry;	WITHOUT_CLASSIFICATION	0.9998024799703193	WITHOUT_CLASSIFICATION	1.975200296805678E-4	DESIGN
Don't need to lock the cache here, since if someone else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9957380106789253	WITHOUT_CLASSIFICATION	0.004261989321074677	DESIGN
Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9993319276285032	WITHOUT_CLASSIFICATION	6.680723714967488E-4	DESIGN
get the updated snapshot of the entity state by cloning current state; it is safe to copy in place, since by this time no-one else (should have) has a reference to the array	WITHOUT_CLASSIFICATION	0.999611934467385	WITHOUT_CLASSIFICATION	3.880655326149824E-4	DESIGN
this entity defines proeprty generation, so process those generated values...	WITHOUT_CLASSIFICATION	0.9997584134069811	WITHOUT_CLASSIFICATION	2.415865930189386E-4	DESIGN
have the entity entry perform post-update processing, passing it the update state and the new version (if one).	WITHOUT_CLASSIFICATION	0.9996842827477134	WITHOUT_CLASSIFICATION	3.157172522865699E-4	DESIGN
!persister.isCacheInvalidationRequired()	WITHOUT_CLASSIFICATION	0.9992564144695602	WITHOUT_CLASSIFICATION	7.435855304398626E-4	DESIGN
need to look it up from the persistence-context	WITHOUT_CLASSIFICATION	0.9977302253217643	WITHOUT_CLASSIFICATION	0.002269774678235788	DESIGN
sort first by role name	WITHOUT_CLASSIFICATION	0.9997501255777007	WITHOUT_CLASSIFICATION	2.498744222992181E-4	DESIGN
Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9993319276285032	WITHOUT_CLASSIFICATION	6.680723714967488E-4	DESIGN
then by fk	WITHOUT_CLASSIFICATION	0.999761124977077	WITHOUT_CLASSIFICATION	2.3887502292296972E-4	DESIGN
nothing to do	WITHOUT_CLASSIFICATION	0.9999729030225306	WITHOUT_CLASSIFICATION	2.7096977469433014E-5	DESIGN
nothing to do	WITHOUT_CLASSIFICATION	0.9999729030225306	WITHOUT_CLASSIFICATION	2.7096977469433014E-5	DESIGN
an existing collection that was either non-empty or uninitialized is replaced by null or a different collection (if the collection is uninitialized, hibernate has no way of knowing if the collection is actually empty without querying the db)	WITHOUT_CLASSIFICATION	0.9694719214483047	WITHOUT_CLASSIFICATION	0.030528078551695266	DESIGN
this method is called when a new non-null collection is persisted or when an existing (non-null) collection is moved to a new owner	WITHOUT_CLASSIFICATION	0.9095938873956596	WITHOUT_CLASSIFICATION	0.09040611260434032	DESIGN
boolean put = persister.getCache().insert(ck, cacheEntry);	WITHOUT_CLASSIFICATION	0.9999777284160203	WITHOUT_CLASSIFICATION	2.2271583979800194E-5	DESIGN
we need to grab the version value from the entity, otherwise we have issues with generated-version entities that may have multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9546884767726614	WITHOUT_CLASSIFICATION	0.04531152322733857	DESIGN
do nothing - we only need to notify the cache...	WITHOUT_CLASSIFICATION	0.9989388272317051	WITHOUT_CLASSIFICATION	0.0010611727682949374	DESIGN
sort first by entity name	WITHOUT_CLASSIFICATION	0.999804679420395	WITHOUT_CLASSIFICATION	1.9532057960509547E-4	DESIGN
then by id	WITHOUT_CLASSIFICATION	0.9997262765472302	WITHOUT_CLASSIFICATION	2.7372345276977986E-4	DESIGN
to be safe...	WITHOUT_CLASSIFICATION	0.9996783125562553	WITHOUT_CLASSIFICATION	3.216874437447408E-4	DESIGN
no transformations took place, so handle it as we would a non-instrumented class	WITHOUT_CLASSIFICATION	0.9995943510209319	WITHOUT_CLASSIFICATION	4.056489790681591E-4	DESIGN
see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9998709876153119	WITHOUT_CLASSIFICATION	1.2901238468815665E-4	DESIGN
see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9998709876153119	WITHOUT_CLASSIFICATION	1.2901238468815665E-4	DESIGN
intentionally empty	WITHOUT_CLASSIFICATION	0.9997913774010797	WITHOUT_CLASSIFICATION	2.0862259892043326E-4	DESIGN
test out the optimizer:	WITHOUT_CLASSIFICATION	0.9999654002944757	WITHOUT_CLASSIFICATION	3.459970552437554E-5	DESIGN
set the name of bulk accessor.	WITHOUT_CLASSIFICATION	0.9999279911931465	WITHOUT_CLASSIFICATION	7.200880685356801E-5	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9998680402420813	WITHOUT_CLASSIFICATION	1.3195975791871172E-4	DESIGN
invokespecial	WITHOUT_CLASSIFICATION	0.9998740958691271	WITHOUT_CLASSIFICATION	1.259041308727615E-4	DESIGN
return	WITHOUT_CLASSIFICATION	0.9998864940018818	WITHOUT_CLASSIFICATION	1.1350599811830039E-4	DESIGN
aload_1 load bean	WITHOUT_CLASSIFICATION	0.9999498654062117	WITHOUT_CLASSIFICATION	5.013459378825529E-5	DESIGN
checkcast cast bean	WITHOUT_CLASSIFICATION	0.9997986743501532	WITHOUT_CLASSIFICATION	2.0132564984676196E-4	DESIGN
astore_3 store bean	WITHOUT_CLASSIFICATION	0.9998906993216236	WITHOUT_CLASSIFICATION	1.0930067837646455E-4	DESIGN
aload_2 args	WITHOUT_CLASSIFICATION	0.9997721836028024	WITHOUT_CLASSIFICATION	2.278163971974964E-4	DESIGN
iconst_i continue to aastore growing stack is 1	WITHOUT_CLASSIFICATION	0.9988280638662178	WITHOUT_CLASSIFICATION	0.001171936133782118	DESIGN
new	WITHOUT_CLASSIFICATION	0.9998699346970294	WITHOUT_CLASSIFICATION	1.3006530297046643E-4	DESIGN
dup	WITHOUT_CLASSIFICATION	0.9999000177690317	WITHOUT_CLASSIFICATION	9.998223096827072E-5	DESIGN
aload_3 load the raw bean	WITHOUT_CLASSIFICATION	0.9999778523729803	WITHOUT_CLASSIFICATION	2.214762701964729E-5	DESIGN
invokeinterface	WITHOUT_CLASSIFICATION	0.9998740958691271	WITHOUT_CLASSIFICATION	1.259041308727615E-4	DESIGN
invokevirtual	WITHOUT_CLASSIFICATION	0.9998740958691271	WITHOUT_CLASSIFICATION	1.259041308727615E-4	DESIGN
invokevirtual	WITHOUT_CLASSIFICATION	0.9998740958691271	WITHOUT_CLASSIFICATION	1.259041308727615E-4	DESIGN
aastore args	WITHOUT_CLASSIFICATION	0.9997721836028024	WITHOUT_CLASSIFICATION	2.278163971974964E-4	DESIGN
| this | bean | args | i | raw bean | exception |	WITHOUT_CLASSIFICATION	0.9974218315224046	WITHOUT_CLASSIFICATION	0.0025781684775953535	DESIGN
required to exception table iconst_0 i	WITHOUT_CLASSIFICATION	0.9996527485222386	WITHOUT_CLASSIFICATION	3.4725147776137E-4	DESIGN
istore_3 store i	WITHOUT_CLASSIFICATION	0.9998907901850314	WITHOUT_CLASSIFICATION	1.0920981496862064E-4	DESIGN
aload_1 load the bean	WITHOUT_CLASSIFICATION	0.9999776398836671	WITHOUT_CLASSIFICATION	2.2360116332919585E-5	DESIGN
checkcast cast the bean into a raw bean	WITHOUT_CLASSIFICATION	0.9979532114614929	WITHOUT_CLASSIFICATION	0.002046788538507152	DESIGN
current stack len = 0	WITHOUT_CLASSIFICATION	0.9999920662465677	WITHOUT_CLASSIFICATION	7.933753432292179E-6	DESIGN
start region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9945989104602987	WITHOUT_CLASSIFICATION	0.005401089539701287	DESIGN
iinc 3, 1	WITHOUT_CLASSIFICATION	0.9998611646394313	WITHOUT_CLASSIFICATION	1.3883536056873635E-4	DESIGN
aload 4 load the raw bean	WITHOUT_CLASSIFICATION	0.9999633628800189	WITHOUT_CLASSIFICATION	3.663711998111459E-5	DESIGN
aload_2 load the args	WITHOUT_CLASSIFICATION	0.9999595372436016	WITHOUT_CLASSIFICATION	4.046275639833261E-5	DESIGN
iconst_i	WITHOUT_CLASSIFICATION	0.9998680402420813	WITHOUT_CLASSIFICATION	1.3195975791871172E-4	DESIGN
aaload	WITHOUT_CLASSIFICATION	0.9998680402420813	WITHOUT_CLASSIFICATION	1.3195975791871172E-4	DESIGN
checkcast	WITHOUT_CLASSIFICATION	0.9998685910325452	WITHOUT_CLASSIFICATION	1.3140896745482205E-4	DESIGN
checkcast (case of primitive type) invokevirtual (case of primitive type)	WITHOUT_CLASSIFICATION	0.9998677995384018	WITHOUT_CLASSIFICATION	1.3220046159829625E-4	DESIGN
checkcast (case of reference type)	WITHOUT_CLASSIFICATION	0.9993944921740517	WITHOUT_CLASSIFICATION	6.05507825948195E-4	DESIGN
current stack len = 2	WITHOUT_CLASSIFICATION	0.9999901105718558	WITHOUT_CLASSIFICATION	9.889428144168142E-6	DESIGN
end region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9644127454830782	WITHOUT_CLASSIFICATION	0.035587254516921865	DESIGN
register in exception table	WITHOUT_CLASSIFICATION	0.9998548021601892	WITHOUT_CLASSIFICATION	1.45197839810834E-4	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9998680402420813	WITHOUT_CLASSIFICATION	1.3195975791871172E-4	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9998680402420813	WITHOUT_CLASSIFICATION	1.3195975791871172E-4	DESIGN
return	WITHOUT_CLASSIFICATION	0.9998864940018818	WITHOUT_CLASSIFICATION	1.1350599811830039E-4	DESIGN
return	WITHOUT_CLASSIFICATION	0.9998864940018818	WITHOUT_CLASSIFICATION	1.1350599811830039E-4	DESIGN
dup	WITHOUT_CLASSIFICATION	0.9999000177690317	WITHOUT_CLASSIFICATION	9.998223096827072E-5	DESIGN
invokevirtual	WITHOUT_CLASSIFICATION	0.9998740958691271	WITHOUT_CLASSIFICATION	1.259041308727615E-4	DESIGN
checkcast	WITHOUT_CLASSIFICATION	0.9998685910325452	WITHOUT_CLASSIFICATION	1.3140896745482205E-4	DESIGN
local variables | target obj | each oldvalue |	WITHOUT_CLASSIFICATION	0.9999037226043023	WITHOUT_CLASSIFICATION	9.627739569770839E-5	DESIGN
astore 5 store exception	WITHOUT_CLASSIFICATION	0.9999064603180909	WITHOUT_CLASSIFICATION	9.353968190903685E-5	DESIGN
new BulkAccessorException	WITHOUT_CLASSIFICATION	0.999846565219475	WITHOUT_CLASSIFICATION	1.5343478052500878E-4	DESIGN
aload 5 load exception	WITHOUT_CLASSIFICATION	0.9999570951067152	WITHOUT_CLASSIFICATION	4.290489328481271E-5	DESIGN
iload_3 i	WITHOUT_CLASSIFICATION	0.9998681499398617	WITHOUT_CLASSIFICATION	1.318500601383541E-4	DESIGN
invokespecial BulkAccessorException.<init>	WITHOUT_CLASSIFICATION	0.9992564144695602	WITHOUT_CLASSIFICATION	7.435855304398626E-4	DESIGN
athrow	WITHOUT_CLASSIFICATION	0.9998680402420813	WITHOUT_CLASSIFICATION	1.3195975791871172E-4	DESIGN
WARNING: classfile only	WITHOUT_CLASSIFICATION	0.9999110595626391	WITHOUT_CLASSIFICATION	8.89404373607844E-5	DESIGN
swallow	WITHOUT_CLASSIFICATION	0.9998686589894996	WITHOUT_CLASSIFICATION	1.313410105004771E-4	DESIGN
local variable | this |	WITHOUT_CLASSIFICATION	0.9995785594149229	WITHOUT_CLASSIFICATION	4.214405850770699E-4	DESIGN
aload_0 load this	WITHOUT_CLASSIFICATION	0.9998252332813	WITHOUT_CLASSIFICATION	1.7476671870007572E-4	DESIGN
aload_0 load this	WITHOUT_CLASSIFICATION	0.9998252332813	WITHOUT_CLASSIFICATION	1.7476671870007572E-4	DESIGN
getfield get field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9996406777683292	WITHOUT_CLASSIFICATION	3.593222316707959E-4	DESIGN
areturn return the value of the field	WITHOUT_CLASSIFICATION	0.9998695923332616	WITHOUT_CLASSIFICATION	1.304076667383653E-4	DESIGN
local variables | this | callback |	WITHOUT_CLASSIFICATION	0.9895273357367317	WITHOUT_CLASSIFICATION	0.010472664263268412	DESIGN
aload_1 load callback	WITHOUT_CLASSIFICATION	0.9999358576158817	WITHOUT_CLASSIFICATION	6.414238411832703E-5	DESIGN
putfield put field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9997924489739188	WITHOUT_CLASSIFICATION	2.0755102608127266E-4	DESIGN
case of non-static field	WITHOUT_CLASSIFICATION	0.9999789649212529	WITHOUT_CLASSIFICATION	2.103507874709709E-5	DESIGN
getfield get each field	WITHOUT_CLASSIFICATION	0.9999531201008576	WITHOUT_CLASSIFICATION	4.6879899142380366E-5	DESIGN
invokeinterface invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9993034094468191	WITHOUT_CLASSIFICATION	6.965905531809017E-4	DESIGN
ifnonnull	WITHOUT_CLASSIFICATION	0.9998680402420813	WITHOUT_CLASSIFICATION	1.3195975791871172E-4	DESIGN
return each type	WITHOUT_CLASSIFICATION	0.9999069964745064	WITHOUT_CLASSIFICATION	9.300352549365093E-5	DESIGN
return each type	WITHOUT_CLASSIFICATION	0.9999069964745064	WITHOUT_CLASSIFICATION	9.300352549365093E-5	DESIGN
store_1 each type	WITHOUT_CLASSIFICATION	0.9998918756380593	WITHOUT_CLASSIFICATION	1.0812436194064257E-4	DESIGN
ldc name of the field	WITHOUT_CLASSIFICATION	0.9999624073183278	WITHOUT_CLASSIFICATION	3.7592681672156495E-5	DESIGN
load_1 each type	WITHOUT_CLASSIFICATION	0.9998918756380593	WITHOUT_CLASSIFICATION	1.0812436194064257E-4	DESIGN
invokeinterface invoke Callback.read() each type	WITHOUT_CLASSIFICATION	0.9994017314620747	WITHOUT_CLASSIFICATION	5.982685379253355E-4	DESIGN
int	WITHOUT_CLASSIFICATION	0.9999016634077567	WITHOUT_CLASSIFICATION	9.833659224334955E-5	DESIGN
return	WITHOUT_CLASSIFICATION	0.9998864940018818	WITHOUT_CLASSIFICATION	1.1350599811830039E-4	DESIGN
dup	WITHOUT_CLASSIFICATION	0.9999000177690317	WITHOUT_CLASSIFICATION	9.998223096827072E-5	DESIGN
invokeinterface	WITHOUT_CLASSIFICATION	0.9998740958691271	WITHOUT_CLASSIFICATION	1.259041308727615E-4	DESIGN
checkcast	WITHOUT_CLASSIFICATION	0.9998685910325452	WITHOUT_CLASSIFICATION	1.3140896745482205E-4	DESIGN
checkcast	WITHOUT_CLASSIFICATION	0.9998685910325452	WITHOUT_CLASSIFICATION	1.3140896745482205E-4	DESIGN
invokeinterface enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9992564144695602	WITHOUT_CLASSIFICATION	7.435855304398626E-4	DESIGN
invokeinterface enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9992564144695602	WITHOUT_CLASSIFICATION	7.435855304398626E-4	DESIGN
ifnonnull (label1)	WITHOUT_CLASSIFICATION	0.9998740958691271	WITHOUT_CLASSIFICATION	1.259041308727615E-4	DESIGN
load_1	WITHOUT_CLASSIFICATION	0.9998680402420813	WITHOUT_CLASSIFICATION	1.3195975791871172E-4	DESIGN
load_1	WITHOUT_CLASSIFICATION	0.9998680402420813	WITHOUT_CLASSIFICATION	1.3195975791871172E-4	DESIGN
putfield	WITHOUT_CLASSIFICATION	0.9998680402420813	WITHOUT_CLASSIFICATION	1.3195975791871172E-4	DESIGN
return ;	WITHOUT_CLASSIFICATION	0.9998864940018818	WITHOUT_CLASSIFICATION	1.1350599811830039E-4	DESIGN
ldc field name	WITHOUT_CLASSIFICATION	0.9998876043652246	WITHOUT_CLASSIFICATION	1.1239563477537277E-4	DESIGN
getfield old value of the field	WITHOUT_CLASSIFICATION	0.9998900970531494	WITHOUT_CLASSIFICATION	1.0990294685059751E-4	DESIGN
invokeinterface callback.write(..)	WITHOUT_CLASSIFICATION	0.9992564144695602	WITHOUT_CLASSIFICATION	7.435855304398626E-4	DESIGN
reference type	WITHOUT_CLASSIFICATION	0.9996458428973074	WITHOUT_CLASSIFICATION	3.541571026925632E-4	DESIGN
reference type	WITHOUT_CLASSIFICATION	0.9996458428973074	WITHOUT_CLASSIFICATION	3.541571026925632E-4	DESIGN
not array	WITHOUT_CLASSIFICATION	0.9999257253605658	WITHOUT_CLASSIFICATION	7.427463943421234E-5	DESIGN
array of reference type	WITHOUT_CLASSIFICATION	0.9997980240264649	WITHOUT_CLASSIFICATION	2.019759735351003E-4	DESIGN
boolean	WITHOUT_CLASSIFICATION	0.9999524985059912	WITHOUT_CLASSIFICATION	4.750149400872262E-5	DESIGN
byte	WITHOUT_CLASSIFICATION	0.9998961569857231	WITHOUT_CLASSIFICATION	1.0384301427685757E-4	DESIGN
char	WITHOUT_CLASSIFICATION	0.9999228168518123	WITHOUT_CLASSIFICATION	7.718314818774519E-5	DESIGN
short	WITHOUT_CLASSIFICATION	0.9998723424914899	WITHOUT_CLASSIFICATION	1.276575085101175E-4	DESIGN
double	WITHOUT_CLASSIFICATION	0.9999768519224742	WITHOUT_CLASSIFICATION	2.3148077525744216E-5	DESIGN
float	WITHOUT_CLASSIFICATION	0.9998722347866249	WITHOUT_CLASSIFICATION	1.2776521337502068E-4	DESIGN
float	WITHOUT_CLASSIFICATION	0.9998722347866249	WITHOUT_CLASSIFICATION	1.2776521337502068E-4	DESIGN
long	WITHOUT_CLASSIFICATION	0.9998638323144445	WITHOUT_CLASSIFICATION	1.3616768555549928E-4	DESIGN
long	WITHOUT_CLASSIFICATION	0.9998638323144445	WITHOUT_CLASSIFICATION	1.3616768555549928E-4	DESIGN
bad type	WITHOUT_CLASSIFICATION	0.9996330825663261	WITHOUT_CLASSIFICATION	3.669174336738213E-4	DESIGN
bad type	WITHOUT_CLASSIFICATION	0.9996330825663261	WITHOUT_CLASSIFICATION	3.669174336738213E-4	DESIGN
boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9993591955432864	WITHOUT_CLASSIFICATION	6.408044567136343E-4	DESIGN
boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9993591955432864	WITHOUT_CLASSIFICATION	6.408044567136343E-4	DESIGN
reference type	WITHOUT_CLASSIFICATION	0.9996458428973074	WITHOUT_CLASSIFICATION	3.541571026925632E-4	DESIGN
double	WITHOUT_CLASSIFICATION	0.9999768519224742	WITHOUT_CLASSIFICATION	2.3148077525744216E-5	DESIGN
float	WITHOUT_CLASSIFICATION	0.9998722347866249	WITHOUT_CLASSIFICATION	1.2776521337502068E-4	DESIGN
float	WITHOUT_CLASSIFICATION	0.9998722347866249	WITHOUT_CLASSIFICATION	1.2776521337502068E-4	DESIGN
long	WITHOUT_CLASSIFICATION	0.9998638323144445	WITHOUT_CLASSIFICATION	1.3616768555549928E-4	DESIGN
bad type	WITHOUT_CLASSIFICATION	0.9996330825663261	WITHOUT_CLASSIFICATION	3.669174336738213E-4	DESIGN
bad type	WITHOUT_CLASSIFICATION	0.9996330825663261	WITHOUT_CLASSIFICATION	3.669174336738213E-4	DESIGN
boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9993591955432864	WITHOUT_CLASSIFICATION	6.408044567136343E-4	DESIGN
skip finalize methods	WITHOUT_CLASSIFICATION	0.9998870354134658	WITHOUT_CLASSIFICATION	1.1296458653418034E-4	DESIGN
Mainly for OSCache	WITHOUT_CLASSIFICATION	0.9997625739961415	WITHOUT_CLASSIFICATION	2.374260038584581E-4	DESIGN
decrement the lock	WITHOUT_CLASSIFICATION	0.9999470457084819	WITHOUT_CLASSIFICATION	5.2954291518161724E-5	DESIGN
create new lock that times out immediately	WITHOUT_CLASSIFICATION	0.9984753224056505	WITHOUT_CLASSIFICATION	0.0015246775943494326	DESIGN
recache the updated state	WITHOUT_CLASSIFICATION	0.9999555085341542	WITHOUT_CLASSIFICATION	4.4491465845872895E-5	DESIGN
noop	WITHOUT_CLASSIFICATION	0.9998718500700163	WITHOUT_CLASSIFICATION	1.281499299837027E-4	DESIGN
null clientLock is remotely possible but will never happen in practice	WITHOUT_CLASSIFICATION	0.9996247143140011	WITHOUT_CLASSIFICATION	3.752856859988099E-4	DESIGN
we really could refresh the item if it is not a lock, but it might be slower return freshTimestamp < txTimestamp	WITHOUT_CLASSIFICATION	0.9993491941758749	WITHOUT_CLASSIFICATION	6.508058241250515E-4	DESIGN
by requiring <, we rely on lock timeout in the case of an unsuccessful update!	WITHOUT_CLASSIFICATION	0.9997907593480581	WITHOUT_CLASSIFICATION	2.0924065194194937E-4	DESIGN
the user provided resulttransformer, not the one used with "select new". Here to avoid mangling transformed/non-transformed results.	WITHOUT_CLASSIFICATION	0.9999183690379803	WITHOUT_CLASSIFICATION	8.163096201971183E-5	DESIGN
disassemble positional parameters	WITHOUT_CLASSIFICATION	0.9994441572171698	WITHOUT_CLASSIFICATION	5.558427828302044E-4	DESIGN
disassemble named parameters	WITHOUT_CLASSIFICATION	0.9998976965184306	WITHOUT_CLASSIFICATION	1.023034815693614E-4	DESIGN
ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9998743060292634	WITHOUT_CLASSIFICATION	1.2569397073656304E-4	DESIGN
noop	WITHOUT_CLASSIFICATION	0.9998718500700163	WITHOUT_CLASSIFICATION	1.281499299837027E-4	DESIGN
noop	WITHOUT_CLASSIFICATION	0.9998718500700163	WITHOUT_CLASSIFICATION	1.281499299837027E-4	DESIGN
noop	WITHOUT_CLASSIFICATION	0.9998718500700163	WITHOUT_CLASSIFICATION	1.281499299837027E-4	DESIGN
this is called from SettingsFactory irregardless; trivial to simply disregard	WITHOUT_CLASSIFICATION	0.992784238063626	WITHOUT_CLASSIFICATION	0.0072157619363739205	DESIGN
Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9969911761141349	WITHOUT_CLASSIFICATION	0.0030088238858650695	DESIGN
Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9969911761141349	WITHOUT_CLASSIFICATION	0.0030088238858650695	DESIGN
throw new UnsupportedOperationException("Can't write to a readonly object");	WITHOUT_CLASSIFICATION	0.9937323933756065	WITHOUT_CLASSIFICATION	0.0062676066243935276	DESIGN
assembled state gets put in a new array (we read from cache by value!)	WITHOUT_CLASSIFICATION	0.9994023151766828	WITHOUT_CLASSIFICATION	5.976848233172669E-4	DESIGN
persister.setIdentifier(result, id); before calling interceptor, for consistency with normal load	WITHOUT_CLASSIFICATION	0.9985279411033594	WITHOUT_CLASSIFICATION	0.0014720588966405514	DESIGN
no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9992256993972298	WITHOUT_CLASSIFICATION	7.743006027701532E-4	DESIGN
no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9992256993972298	WITHOUT_CLASSIFICATION	7.743006027701532E-4	DESIGN
again, CCS did not have such a concept; but a reasonable proximity is to clear the cache after transaction as long as the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999573432274792	WITHOUT_CLASSIFICATION	4.265677252077495E-5	DESIGN
again, CCS did not have such a concept; however a reasonable proximity is to clear the cache. For non-transaction aware caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.998894233400135	WITHOUT_CLASSIFICATION	0.0011057665998649806	DESIGN
again, CCS did not have such a concept; however a reasonable proximity is to clear the cache. For non-transaction aware caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.998894233400135	WITHOUT_CLASSIFICATION	0.0011057665998649806	DESIGN
classes mentioned in extends not available - so put it in queue	WITHOUT_CLASSIFICATION	0.9990445310923781	WITHOUT_CLASSIFICATION	9.554689076219807E-4	DESIGN
get meta's from <hibernate-mapping>	WITHOUT_CLASSIFICATION	0.9985275338523384	WITHOUT_CLASSIFICATION	0.0014724661476616353	DESIGN
get meta's from <class>	WITHOUT_CLASSIFICATION	0.9996915614530038	WITHOUT_CLASSIFICATION	3.084385469963108E-4	DESIGN
DB-OBJECTNAME	WITHOUT_CLASSIFICATION	0.9998740958691271	WITHOUT_CLASSIFICATION	1.259041308727615E-4	DESIGN
MUTABLE	WITHOUT_CLASSIFICATION	0.9998680402420813	WITHOUT_CLASSIFICATION	1.3195975791871172E-4	DESIGN
WHERE	WITHOUT_CLASSIFICATION	0.9998680402420813	WITHOUT_CLASSIFICATION	1.3195975791871172E-4	DESIGN
CHECK	WITHOUT_CLASSIFICATION	0.9998680402420813	WITHOUT_CLASSIFICATION	1.3195975791871172E-4	DESIGN
POLYMORPHISM	WITHOUT_CLASSIFICATION	0.9998740958691271	WITHOUT_CLASSIFICATION	1.259041308727615E-4	DESIGN
TODO:	WITHOUT_CLASSIFICATION	0.774086667349533	WITHOUT_CLASSIFICATION	0.22591333265046692	DESIGN
ID	WITHOUT_CLASSIFICATION	0.9998081813804607	WITHOUT_CLASSIFICATION	1.9181861953934218E-4	DESIGN
VERSION / TIMESTAMP	WITHOUT_CLASSIFICATION	0.9999328546934171	WITHOUT_CLASSIFICATION	6.714530658293324E-5	DESIGN
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9998740958691271	WITHOUT_CLASSIFICATION	1.259041308727615E-4	DESIGN
Primary key constraint	WITHOUT_CLASSIFICATION	0.9999207415277533	WITHOUT_CLASSIFICATION	7.925847224657306E-5	DESIGN
this is either a <version/> tag with no type attribute, or a <timestamp/> tag	WITHOUT_CLASSIFICATION	0.9980147695384012	WITHOUT_CLASSIFICATION	0.0019852304615989203	DESIGN
for version properties marked as being generated, make sure they are "always" generated; aka, "insert" is invalid; this is dis-allowed by the DTD, but just to make sure...	WITHOUT_CLASSIFICATION	0.8008879873748801	WITHOUT_CLASSIFICATION	0.1991120126251199	DESIGN
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9998740958691271	WITHOUT_CLASSIFICATION	1.259041308727615E-4	DESIGN
( (Column) discrim.getColumnIterator().next() ).setType(type);	WITHOUT_CLASSIFICATION	0.9991534854389535	WITHOUT_CLASSIFICATION	8.46514561046412E-4	DESIGN
go ahead and set the lazy here, since pojo.proxy can override it.	WITHOUT_CLASSIFICATION	0.9999229885951995	WITHOUT_CLASSIFICATION	7.70114048005003E-5	DESIGN
DYNAMIC UPDATE	WITHOUT_CLASSIFICATION	0.9998740958691271	WITHOUT_CLASSIFICATION	1.259041308727615E-4	DESIGN
IMPORT	WITHOUT_CLASSIFICATION	0.9998680402420813	WITHOUT_CLASSIFICATION	1.3195975791871172E-4	DESIGN
BATCH SIZE	WITHOUT_CLASSIFICATION	0.9998680402420813	WITHOUT_CLASSIFICATION	1.3195975791871172E-4	DESIGN
SELECT BEFORE UPDATE	WITHOUT_CLASSIFICATION	0.9998740958691271	WITHOUT_CLASSIFICATION	1.259041308727615E-4	DESIGN
OPTIMISTIC LOCK MODE	WITHOUT_CLASSIFICATION	0.9998740958691271	WITHOUT_CLASSIFICATION	1.259041308727615E-4	DESIGN
PERSISTER	WITHOUT_CLASSIFICATION	0.9998680402420813	WITHOUT_CLASSIFICATION	1.3195975791871172E-4	DESIGN
CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9998683134245859	WITHOUT_CLASSIFICATION	1.3168657541410547E-4	DESIGN
get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9996915614530038	WITHOUT_CLASSIFICATION	3.084385469963108E-4	DESIGN
properties	WITHOUT_CLASSIFICATION	0.9998915048139969	WITHOUT_CLASSIFICATION	1.0849518600309948E-4	DESIGN
joined subclasses	WITHOUT_CLASSIFICATION	0.9998932331564734	WITHOUT_CLASSIFICATION	1.067668435265831E-4	DESIGN
KEY	WITHOUT_CLASSIFICATION	0.9998682443201133	WITHOUT_CLASSIFICATION	1.3175567988672212E-4	DESIGN
CHECK	WITHOUT_CLASSIFICATION	0.9998680402420813	WITHOUT_CLASSIFICATION	1.3195975791871172E-4	DESIGN
CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9998683134245859	WITHOUT_CLASSIFICATION	1.3168657541410547E-4	DESIGN
properties	WITHOUT_CLASSIFICATION	0.9998915048139969	WITHOUT_CLASSIFICATION	1.0849518600309948E-4	DESIGN
KEY	WITHOUT_CLASSIFICATION	0.9998682443201133	WITHOUT_CLASSIFICATION	1.3175567988672212E-4	DESIGN
model.getKey().setType( new Type( model.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9989808786505324	WITHOUT_CLASSIFICATION	0.001019121349467579	DESIGN
TABLENAME	WITHOUT_CLASSIFICATION	0.9998680402420813	WITHOUT_CLASSIFICATION	1.3195975791871172E-4	DESIGN
join.getKey().setType( new Type( lazz.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9989808786505324	WITHOUT_CLASSIFICATION	0.001019121349467579	DESIGN
PROPERTIES	WITHOUT_CLASSIFICATION	0.9998680402420813	WITHOUT_CLASSIFICATION	1.3195975791871172E-4	DESIGN
COLUMN(S)	WITHOUT_CLASSIFICATION	0.9998680402420813	WITHOUT_CLASSIFICATION	1.3195975791871172E-4	DESIGN
column index	WITHOUT_CLASSIFICATION	0.9998956694377141	WITHOUT_CLASSIFICATION	1.0433056228581574E-4	DESIGN
column unique-key	WITHOUT_CLASSIFICATION	0.9999098991615739	WITHOUT_CLASSIFICATION	9.010083842607894E-5	DESIGN
automatically makes a column with the default name if none is specifed by XML	WITHOUT_CLASSIFICATION	0.9997256496831913	WITHOUT_CLASSIFICATION	2.7435031680863605E-4	DESIGN
for an any	WITHOUT_CLASSIFICATION	0.9998478350726238	WITHOUT_CLASSIFICATION	1.5216492737618565E-4	DESIGN
insertable simply because that is the user did not specify anything; just override it	WITHOUT_CLASSIFICATION	0.9999781874141469	WITHOUT_CLASSIFICATION	2.1812585853053912E-5	DESIGN
the user specifically supplied insert="true", which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999074905495565	WITHOUT_CLASSIFICATION	9.250945044355745E-5	DESIGN
properties generated on update can never be updateable...	WITHOUT_CLASSIFICATION	0.9999243537067779	WITHOUT_CLASSIFICATION	7.564629322202153E-5	DESIGN
updateable only because the user did not specify anything; just override it	WITHOUT_CLASSIFICATION	0.9999942186887993	WITHOUT_CLASSIFICATION	5.781311200615117E-6	DESIGN
the user specifically supplied update="true", which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999074905495565	WITHOUT_CLASSIFICATION	9.250945044355745E-5	DESIGN
ROLENAME	WITHOUT_CLASSIFICATION	0.9998680402420813	WITHOUT_CLASSIFICATION	1.3195975791871172E-4	DESIGN
FETCH STRATEGY	WITHOUT_CLASSIFICATION	0.9998740958691271	WITHOUT_CLASSIFICATION	1.259041308727615E-4	DESIGN
TABLE	WITHOUT_CLASSIFICATION	0.9998715917412823	WITHOUT_CLASSIFICATION	1.2840825871765016E-4	DESIGN
tableName = mappings.getNamingStrategy().propertyToTableName( className, path );	WITHOUT_CLASSIFICATION	0.9999429890923393	WITHOUT_CLASSIFICATION	5.7010907660825384E-5	DESIGN
SORT	WITHOUT_CLASSIFICATION	0.9998680402420813	WITHOUT_CLASSIFICATION	1.3195975791871172E-4	DESIGN
CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9998683134245859	WITHOUT_CLASSIFICATION	1.3168657541410547E-4	DESIGN
unsorted, natural, comparator.class.name	WITHOUT_CLASSIFICATION	0.9992564144695602	WITHOUT_CLASSIFICATION	7.435855304398626E-4	DESIGN
ORPHAN DELETE (used for programmer error detection)	WITHOUT_CLASSIFICATION	0.9984108353558312	WITHOUT_CLASSIFICATION	0.0015891646441687404	DESIGN
set up second pass	WITHOUT_CLASSIFICATION	0.9999815135049005	WITHOUT_CLASSIFICATION	1.8486495099455335E-5	DESIGN
an "embedded" component (composite ids and unique) note that this does not handle nested components	WITHOUT_CLASSIFICATION	0.9386574867570915	WITHOUT_CLASSIFICATION	0.06134251324290856	DESIGN
a nested composite element	WITHOUT_CLASSIFICATION	0.9994544070645847	WITHOUT_CLASSIFICATION	5.455929354154063E-4	DESIGN
for an any we will have to use reflection	WITHOUT_CLASSIFICATION	0.9978796521737524	WITHOUT_CLASSIFICATION	0.0021203478262476487	DESIGN
NOTE SPECIAL CASE: one-to-one constrained=false cannot be proxied, so default to join and non-lazy	WITHOUT_CLASSIFICATION	0.9995427852177278	WITHOUT_CLASSIFICATION	4.572147822722771E-4	DESIGN
use old (HB 2.1) defaults if outer-join is specified	WITHOUT_CLASSIFICATION	0.9991423264397371	WITHOUT_CLASSIFICATION	8.576735602629444E-4	DESIGN
lazy = !join;	WITHOUT_CLASSIFICATION	0.9999843913000024	WITHOUT_CLASSIFICATION	1.5608699997639108E-5	DESIGN
GENERATOR	WITHOUT_CLASSIFICATION	0.9998680402420813	WITHOUT_CLASSIFICATION	1.3195975791871172E-4	DESIGN
ID UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9998169834250353	WITHOUT_CLASSIFICATION	1.8301657496471552E-4	DESIGN
VERSION UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9998443304314125	WITHOUT_CLASSIFICATION	1.5566956858758022E-4	DESIGN
not necessarily a unique property reference	WITHOUT_CLASSIFICATION	0.99906451545968	WITHOUT_CLASSIFICATION	9.354845403201116E-4	DESIGN
( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9991534854389535	WITHOUT_CLASSIFICATION	8.46514561046412E-4	DESIGN
contained elements:	WITHOUT_CLASSIFICATION	0.9998115314628755	WITHOUT_CLASSIFICATION	1.8846853712459639E-4	DESIGN
for non-inverse one-to-many, with a not-null fk, add a backref!	WITHOUT_CLASSIFICATION	0.9994594011967931	WITHOUT_CLASSIFICATION	5.405988032068667E-4	DESIGN
Bind the where	WITHOUT_CLASSIFICATION	0.9999561755081652	WITHOUT_CLASSIFICATION	4.3824491834817366E-5	DESIGN
Bind the order-by	WITHOUT_CLASSIFICATION	0.9999590893340384	WITHOUT_CLASSIFICATION	4.09106659616087E-5	DESIGN
Bind the filters	WITHOUT_CLASSIFICATION	0.9999590893340384	WITHOUT_CLASSIFICATION	4.09106659616087E-5	DESIGN
overriding inherited meta attribute. HBX-621 & HBX-793	WITHOUT_CLASSIFICATION	0.9991743603586114	WITHOUT_CLASSIFICATION	8.256396413887279E-4	DESIGN
first, iterate over all elements capable of defining an extends attribute collecting all found extends references if they cannot be resolved against the already processed mappings.	WITHOUT_CLASSIFICATION	0.9999630168197652	WITHOUT_CLASSIFICATION	3.698318023488517E-5	DESIGN
mappings might contain either the "raw" extends name (in the case of an entity-name mapping) or a FQN (in the case of a POJO mapping).	WITHOUT_CLASSIFICATION	0.9998114046673339	WITHOUT_CLASSIFICATION	1.8859533266600448E-4	DESIGN
+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9997719905220313	WITHOUT_CLASSIFICATION	2.2800947796879415E-4	DESIGN
SessionFactory name:	WITHOUT_CLASSIFICATION	0.999900575501963	WITHOUT_CLASSIFICATION	9.94244980371171E-5	DESIGN
JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.999826664728789	WITHOUT_CLASSIFICATION	1.7333527121104705E-4	DESIGN
JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.999826664728789	WITHOUT_CLASSIFICATION	1.7333527121104705E-4	DESIGN
Interrogate JDBC metadata	WITHOUT_CLASSIFICATION	0.9998443304314125	WITHOUT_CLASSIFICATION	1.5566956858758022E-4	DESIGN
user supplied JDBC connections	WITHOUT_CLASSIFICATION	0.9999437113191473	WITHOUT_CLASSIFICATION	5.628868085281949E-5	DESIGN
use dialect default properties	WITHOUT_CLASSIFICATION	0.999872345784743	WITHOUT_CLASSIFICATION	1.2765421525699473E-4	DESIGN
Transaction settings:	WITHOUT_CLASSIFICATION	0.9998454598265089	WITHOUT_CLASSIFICATION	1.5454017349114058E-4	DESIGN
SQL Generation settings:	WITHOUT_CLASSIFICATION	0.9998458962866036	WITHOUT_CLASSIFICATION	1.5410371339648395E-4	DESIGN
Query parser settings:	WITHOUT_CLASSIFICATION	0.9993930295494976	WITHOUT_CLASSIFICATION	6.06970450502432E-4	DESIGN
Second-level / query cache:	WITHOUT_CLASSIFICATION	0.9999214827858445	WITHOUT_CLASSIFICATION	7.851721415551772E-5	DESIGN
The cache provider is needed when we either have second-level cache enabled or query cache enabled. Note that useSecondLevelCache is enabled by default	WITHOUT_CLASSIFICATION	0.9999428394855512	WITHOUT_CLASSIFICATION	5.716051444875456E-5	DESIGN
SQL Exception converter:	WITHOUT_CLASSIFICATION	0.9998806676200492	WITHOUT_CLASSIFICATION	1.193323799508645E-4	DESIGN
Statistics and logging:	WITHOUT_CLASSIFICATION	0.9998245788183043	WITHOUT_CLASSIFICATION	1.7542118169573684E-4	DESIGN
settings.setShowSqlEnabled(showSql);	WITHOUT_CLASSIFICATION	0.9992564144695602	WITHOUT_CLASSIFICATION	7.435855304398626E-4	DESIGN
settings.setFormatSqlEnabled(formatSql);	WITHOUT_CLASSIFICATION	0.9992564144695602	WITHOUT_CLASSIFICATION	7.435855304398626E-4	DESIGN
Schema export:	WITHOUT_CLASSIFICATION	0.9998740958691271	WITHOUT_CLASSIFICATION	1.259041308727615E-4	DESIGN
String provider = properties.getProperty( Environment.BYTECODE_PROVIDER ); log.info( "Bytecode provider name : " + provider ); BytecodeProvider bytecodeProvider = buildBytecodeProvider( provider ); settings.setBytecodeProvider( bytecodeProvider );	WITHOUT_CLASSIFICATION	0.9999485057846409	WITHOUT_CLASSIFICATION	5.149421535908998E-5	DESIGN
legacy behavior, apply the bridge...	WITHOUT_CLASSIFICATION	0.9975497053365286	WITHOUT_CLASSIFICATION	0.002450294663471284	DESIGN
maybe a concrete SQLpropertyresult type, but Map is exactly what is required at the moment	WITHOUT_CLASSIFICATION	0.9807804573271329	WITHOUT_CLASSIFICATION	0.01921954267286713	DESIGN
if dotted and not load-collection nor return-join regular property	WITHOUT_CLASSIFICATION	0.9995428321840816	WITHOUT_CLASSIFICATION	4.571678159184432E-4	DESIGN
private ComponentTuplizerFactory componentTuplizerFactory; todo : HHH-3517 and HHH-1907 private BytecodeProvider bytecodeProvider;	WITHOUT_CLASSIFICATION	0.9995336556720602	WITHOUT_CLASSIFICATION	4.663443279398287E-4	DESIGN
public getters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9990795215524776	WITHOUT_CLASSIFICATION	9.204784475223712E-4	DESIGN
public ComponentTuplizerFactory getComponentTuplizerFactory() { return componentTuplizerFactory; }	WITHOUT_CLASSIFICATION	0.999160287188349	WITHOUT_CLASSIFICATION	8.397128116510622E-4	DESIGN
package protected setters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9884963115790184	WITHOUT_CLASSIFICATION	0.011503688420981628	DESIGN
void setShowSqlEnabled(boolean b) { showSql = b; } void setFormatSqlEnabled(boolean b) { formatSql = b; }	WITHOUT_CLASSIFICATION	0.9999587669839844	WITHOUT_CLASSIFICATION	4.12330160155984E-5	DESIGN
public BytecodeProvider getBytecodeProvider() { return bytecodeProvider; } void setBytecodeProvider(BytecodeProvider bytecodeProvider) { this.bytecodeProvider = bytecodeProvider; }	WITHOUT_CLASSIFICATION	0.9999171206755395	WITHOUT_CLASSIFICATION	8.28793244605366E-5	DESIGN
using local since the inheritedMetas at this point is not the correct map since it is always the empty map	WITHOUT_CLASSIFICATION	0.9973147313694714	WITHOUT_CLASSIFICATION	0.0026852686305287527	DESIGN
private ComponentTuplizerFactory componentTuplizerFactory; todo : HHH-3517 and HHH-1907	WITHOUT_CLASSIFICATION	0.9995336556720602	WITHOUT_CLASSIFICATION	4.663443279398287E-4	DESIGN
protected List extendsQueue;	WITHOUT_CLASSIFICATION	0.9995470800083811	WITHOUT_CLASSIFICATION	4.5291999161886447E-4	DESIGN
extendsQueue = new ArrayList();	WITHOUT_CLASSIFICATION	0.999892308997435	WITHOUT_CLASSIFICATION	1.0769100256503921E-4	DESIGN
componentTuplizerFactory = new ComponentTuplizerFactory();	WITHOUT_CLASSIFICATION	0.999892308997435	WITHOUT_CLASSIFICATION	1.0769100256503921E-4	DESIGN
if doc is null, then for whatever reason, the cached file cannot be used...	WITHOUT_CLASSIFICATION	0.9992407023533216	WITHOUT_CLASSIFICATION	7.592976466783173E-4	DESIGN
drop them in reverse order in case db needs it done that way...	WITHOUT_CLASSIFICATION	0.9986014602926101	WITHOUT_CLASSIFICATION	0.001398539707389901	DESIGN
public ComponentTuplizerFactory getComponentTuplizerFactory() { return componentTuplizerFactory; }	WITHOUT_CLASSIFICATION	0.999160287188349	WITHOUT_CLASSIFICATION	8.397128116510622E-4	DESIGN
This method may be called many times!!	WITHOUT_CLASSIFICATION	0.9922487518871674	WITHOUT_CLASSIFICATION	0.0077512481128325225	DESIGN
Iterator iterator = extendsQueue.iterator();	WITHOUT_CLASSIFICATION	0.999857254846781	WITHOUT_CLASSIFICATION	1.4274515321891526E-4	DESIGN
Iterator iter = extendsQueue.iterator();	WITHOUT_CLASSIFICATION	0.9997475527718865	WITHOUT_CLASSIFICATION	2.524472281134407E-4	DESIGN
found	WITHOUT_CLASSIFICATION	0.9998379455478462	WITHOUT_CLASSIFICATION	1.620544521537581E-4	DESIGN
found	WITHOUT_CLASSIFICATION	0.9998379455478462	WITHOUT_CLASSIFICATION	1.620544521537581E-4	DESIGN
settings.setComponentTuplizerFactory( this.getComponentTuplizerFactory() );	WITHOUT_CLASSIFICATION	0.9992564144695602	WITHOUT_CLASSIFICATION	7.435855304398626E-4	DESIGN
private final List extendsQueue;	WITHOUT_CLASSIFICATION	0.9978973335132209	WITHOUT_CLASSIFICATION	0.0021026664867790645	DESIGN
<String, String>	WITHOUT_CLASSIFICATION	0.9998744222985704	WITHOUT_CLASSIFICATION	1.2557770142962538E-4	DESIGN
<String, String>	WITHOUT_CLASSIFICATION	0.9998744222985704	WITHOUT_CLASSIFICATION	1.2557770142962538E-4	DESIGN
+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9997719905220313	WITHOUT_CLASSIFICATION	2.2800947796879415E-4	DESIGN
Set USE_REFLECTION_OPTIMIZER to false to fix HHH-227	WITHOUT_CLASSIFICATION	0.9804797223671404	WITHOUT_CLASSIFICATION	0.019520277632859687	DESIGN
orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9993085880023249	WITHOUT_CLASSIFICATION	6.914119976751715E-4	DESIGN
element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9998799448559786	WITHOUT_CLASSIFICATION	1.200551440213011E-4	DESIGN
intentionally empty	WITHOUT_CLASSIFICATION	0.9997913774010797	WITHOUT_CLASSIFICATION	2.0862259892043326E-4	DESIGN
orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9993085880023249	WITHOUT_CLASSIFICATION	6.914119976751715E-4	DESIGN
element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9998799448559786	WITHOUT_CLASSIFICATION	1.200551440213011E-4	DESIGN
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9995415641685016	WITHOUT_CLASSIFICATION	4.584358314984428E-4	DESIGN
maintain correct duplication if loaded in a cartesian product	WITHOUT_CLASSIFICATION	0.9974547180327776	WITHOUT_CLASSIFICATION	0.002545281967222366	DESIGN
the element has been removed from the set	WITHOUT_CLASSIFICATION	0.9991779429607253	WITHOUT_CLASSIFICATION	8.22057039274694E-4	DESIGN
the element has changed	WITHOUT_CLASSIFICATION	0.9999843959311948	WITHOUT_CLASSIFICATION	1.5604068805235237E-5	DESIGN
Careful: these methods do not initialize the collection.	WITHOUT_CLASSIFICATION	0.9988458305456716	WITHOUT_CLASSIFICATION	0.0011541694543284631	DESIGN
needed so that we remove this collection from the second-level cache	WITHOUT_CLASSIFICATION	0.9722769678610101	WITHOUT_CLASSIFICATION	0.027723032138989818	DESIGN
override on some subclasses	WITHOUT_CLASSIFICATION	0.9998308766740801	WITHOUT_CLASSIFICATION	1.6912332591985913E-4	DESIGN
override on some subclasses	WITHOUT_CLASSIFICATION	0.9998308766740801	WITHOUT_CLASSIFICATION	1.6912332591985913E-4	DESIGN
do this bit after setting initialized to true or it will recurse	WITHOUT_CLASSIFICATION	0.9985783576532075	WITHOUT_CLASSIFICATION	0.0014216423467925598	DESIGN
short-circuit(s) no new elements, the old list contains only Orphans no old elements, so no Orphans neither	WITHOUT_CLASSIFICATION	0.9999876985428003	WITHOUT_CLASSIFICATION	1.2301457199519125E-5	DESIGN
create the collection holding the Orphans	WITHOUT_CLASSIFICATION	0.9989911583127277	WITHOUT_CLASSIFICATION	0.0010088416872723318	DESIGN
collect EntityIdentifier(s) of the current elements - add them into a HashSet for fast access	WITHOUT_CLASSIFICATION	0.9997102054043627	WITHOUT_CLASSIFICATION	2.8979459563729584E-4	DESIGN
iterate over the old list	WITHOUT_CLASSIFICATION	0.9999432573186461	WITHOUT_CLASSIFICATION	5.674268135392967E-5	DESIGN
(array==null) ? tempList.size() :	WITHOUT_CLASSIFICATION	0.9944949231590466	WITHOUT_CLASSIFICATION	0.005505076840953316	DESIGN
intentionally empty	WITHOUT_CLASSIFICATION	0.9997913774010797	WITHOUT_CLASSIFICATION	2.0862259892043326E-4	DESIGN
(array==null) ? tempList.get(i) :	WITHOUT_CLASSIFICATION	0.9944949231590466	WITHOUT_CLASSIFICATION	0.005505076840953316	DESIGN
write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9999656723421071	WITHOUT_CLASSIFICATION	3.432765789288769E-5	DESIGN
write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9999656723421071	WITHOUT_CLASSIFICATION	3.432765789288769E-5	DESIGN
amazingly, these two will work because AbstractCollection uses iterator() to fill the array	WITHOUT_CLASSIFICATION	0.9994823116873538	WITHOUT_CLASSIFICATION	5.176883126462352E-4	DESIGN
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9995415641685016	WITHOUT_CLASSIFICATION	4.584358314984428E-4	DESIGN
finally, what it's all about...	WITHOUT_CLASSIFICATION	0.9971167540598151	WITHOUT_CLASSIFICATION	0.002883245940184827	DESIGN
note that if we load this collection from a cartesian product the multiplicity would be broken ... so use an idbag instead	WITHOUT_CLASSIFICATION	0.9668521941124197	WITHOUT_CLASSIFICATION	0.03314780588758024	DESIGN
Anyway, here we implement <set> semantics for a <one-to-many> <bag>!	WITHOUT_CLASSIFICATION	0.7160515836876241	WITHOUT_CLASSIFICATION	0.28394841631237594	DESIGN
a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9989749283170465	WITHOUT_CLASSIFICATION	0.0010250716829534664	DESIGN
search for it note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.8246220837597523	WITHOUT_CLASSIFICATION	0.1753779162402478	DESIGN
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9995415641685016	WITHOUT_CLASSIFICATION	4.584358314984428E-4	DESIGN
a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9989749283170465	WITHOUT_CLASSIFICATION	0.0010250716829534664	DESIGN
search for it note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.8246220837597523	WITHOUT_CLASSIFICATION	0.1753779162402478	DESIGN
public boolean equals(Object other) {read();return bag.equals(other);}public int hashCode(Object other) {read();return bag.hashCode();}	WITHOUT_CLASSIFICATION	0.9995771174540328	WITHOUT_CLASSIFICATION	4.228825459672507E-4	DESIGN
List OPERATIONS:	WITHOUT_CLASSIFICATION	0.9998863348816273	WITHOUT_CLASSIFICATION	1.1366511837267733E-4	DESIGN
pad with nulls from the current last element up to the new index	WITHOUT_CLASSIFICATION	0.9992759951432176	WITHOUT_CLASSIFICATION	7.240048567824267E-4	DESIGN
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9995415641685016	WITHOUT_CLASSIFICATION	4.584358314984428E-4	DESIGN
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9995415641685016	WITHOUT_CLASSIFICATION	4.584358314984428E-4	DESIGN
from Map	WITHOUT_CLASSIFICATION	0.9997242707628142	WITHOUT_CLASSIFICATION	2.7572923718576875E-4	DESIGN
from SortedMap	WITHOUT_CLASSIFICATION	0.9997455715508428	WITHOUT_CLASSIFICATION	2.5442844915723377E-4	DESIGN
inject the data	WITHOUT_CLASSIFICATION	0.9999535450273226	WITHOUT_CLASSIFICATION	4.645497267737883E-5	DESIGN
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9998492372346258	WITHOUT_CLASSIFICATION	1.5076276537416238E-4	DESIGN
default pool size 20	WITHOUT_CLASSIFICATION	0.9999529835104063	WITHOUT_CLASSIFICATION	4.701648959377745E-5	DESIGN
trying via forName() first to be as close to DriverManager's semantics	WITHOUT_CLASSIFICATION	0.9988438349794395	WITHOUT_CLASSIFICATION	0.001156165020560505	DESIGN
if debug level is enabled, then log the password, otherwise mask it	WITHOUT_CLASSIFICATION	0.9997260864348235	WITHOUT_CLASSIFICATION	2.7391356517658054E-4	DESIGN
register a cleanup synch	WITHOUT_CLASSIFICATION	0.9996614436159886	WITHOUT_CLASSIFICATION	3.3855638401136763E-4	DESIGN
wrap the session in the transaction-protection proxy	WITHOUT_CLASSIFICATION	0.9998654762553777	WITHOUT_CLASSIFICATION	1.3452374462229332E-4	DESIGN
then bind it	WITHOUT_CLASSIFICATION	0.9999101246896814	WITHOUT_CLASSIFICATION	8.987531031864013E-5	DESIGN
try to make sure we don't wrap and already wrapped session	WITHOUT_CLASSIFICATION	0.9964706471889135	WITHOUT_CLASSIFICATION	0.003529352811086559	DESIGN
allow these to go through the the real session no matter what	WITHOUT_CLASSIFICATION	0.9982827924055355	WITHOUT_CLASSIFICATION	0.001717207594464422	DESIGN
limit the methods available if no transaction is active	WITHOUT_CLASSIFICATION	0.9996792900098889	WITHOUT_CLASSIFICATION	3.2070999011121884E-4	DESIGN
allow these (deprecated) methods to pass through	WITHOUT_CLASSIFICATION	0.997970423362159	WITHOUT_CLASSIFICATION	0.0020295766378409796	DESIGN
serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992610044726176	WITHOUT_CLASSIFICATION	7.389955273823031E-4	DESIGN
We could register the session against the transaction even though it is not started, but we'd have no guarentee of ever getting the map entries cleaned up (aside from spawning threads).	WITHOUT_CLASSIFICATION	0.9999990425643165	WITHOUT_CLASSIFICATION	9.57435683565761E-7	DESIGN
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9998492372346258	WITHOUT_CLASSIFICATION	1.5076276537416238E-4	DESIGN
private String propertyName;	WITHOUT_CLASSIFICATION	0.9998065820480863	WITHOUT_CLASSIFICATION	1.9341795191371084E-4	DESIGN
public PropertyProjection project() {return Projections.property(getPropertyName());}	WITHOUT_CLASSIFICATION	0.9984251802080728	WITHOUT_CLASSIFICATION	0.0015748197919272509	DESIGN
String[] fk = StringHelper.qualify( "collection_", cp.getKeyColumnNames() );	WITHOUT_CLASSIFICATION	0.9999144572124471	WITHOUT_CLASSIFICATION	8.554278755301712E-5	DESIGN
" collection_ where " +	WITHOUT_CLASSIFICATION	0.999948205105252	WITHOUT_CLASSIFICATION	5.1794894747986415E-5	DESIGN
unsupported	WITHOUT_CLASSIFICATION	0.9998753027329806	WITHOUT_CLASSIFICATION	1.246972670193362E-4	DESIGN
unsupported	WITHOUT_CLASSIFICATION	0.9998753027329806	WITHOUT_CLASSIFICATION	1.246972670193362E-4	DESIGN
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9998492372346258	WITHOUT_CLASSIFICATION	1.5076276537416238E-4	DESIGN
the following two lines were added to ensure that this.params is not null, which can happen with two-deep nested subqueries	WITHOUT_CLASSIFICATION	0.9998796913608832	WITHOUT_CLASSIFICATION	1.203086391168515E-4	DESIGN
with two-deep subqueries, the same alias would get generated for both using the old method (criteriaQuery.generateSQLAlias()), so that is now used as a fallback if the main criteria alias isn't set	WITHOUT_CLASSIFICATION	0.997351326734764	WITHOUT_CLASSIFICATION	0.0026486732652359784	DESIGN
implicit polymorphism not supported (would need a union)	WITHOUT_CLASSIFICATION	0.9966985366124618	WITHOUT_CLASSIFICATION	0.0033014633875383483	DESIGN
pull off the last ", "	WITHOUT_CLASSIFICATION	0.9999860776062963	WITHOUT_CLASSIFICATION	1.3922393703693266E-5	DESIGN
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9998680402420813	WITHOUT_CLASSIFICATION	1.3195975791871172E-4	DESIGN
we have the form: trim(trimSource) so we trim leading and trailing spaces	WITHOUT_CLASSIFICATION	0.9998949572945731	WITHOUT_CLASSIFICATION	1.0504270542689752E-4	DESIGN
we have the form: trim(from trimSource). This is functionally equivalent to trim(trimSource)	WITHOUT_CLASSIFICATION	0.998295841090142	WITHOUT_CLASSIFICATION	0.0017041589098579191	DESIGN
NOT_SUPPORTED_SHOULD_USE_JDBC3_PreparedStatement.getGeneratedKeys_method	WITHOUT_CLASSIFICATION	0.9992564144695602	WITHOUT_CLASSIFICATION	7.435855304398626E-4	DESIGN
potentialTrimCharacterArgIndex = 1 assumes that a trim-specification has been specified. we handle the exception to that explicitly	WITHOUT_CLASSIFICATION	0.9998863131354465	WITHOUT_CLASSIFICATION	1.1368686455356803E-4	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994296671094893	WITHOUT_CLASSIFICATION	5.703328905106488E-4	DESIGN
Oracle did add support for ANSI CASE statements in 9i	WITHOUT_CLASSIFICATION	0.9995357725552637	WITHOUT_CLASSIFICATION	4.642274447362252E-4	DESIGN
the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.999694058636679	WITHOUT_CLASSIFICATION	3.059413633208886E-4	DESIGN
Informix doesn't have a bit type	WITHOUT_CLASSIFICATION	0.9979552462534389	WITHOUT_CLASSIFICATION	0.0020447537465610424	DESIGN
or BYTE or TEXT? or MONEY	WITHOUT_CLASSIFICATION	0.9998741546282947	WITHOUT_CLASSIFICATION	1.2584537170530477E-4	DESIGN
strip table-owner because Informix always returns constraint names as "<table-owner>.<constraint-name>"	WITHOUT_CLASSIFICATION	0.9998458134360881	WITHOUT_CLASSIFICATION	1.5418656391181967E-4	DESIGN
build the map of standard ANSI SQL aggregation functions ~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995423490697871	WITHOUT_CLASSIFICATION	4.57650930212871E-4	DESIGN
pre H3.2 behavior: super.getReturnType(ct, m);	WITHOUT_CLASSIFICATION	0.999589442763266	WITHOUT_CLASSIFICATION	4.1055723673407953E-4	DESIGN
finally use the sqltype if == on Hibernate types did not find a match.	WITHOUT_CLASSIFICATION	0.9997358686428672	WITHOUT_CLASSIFICATION	2.6413135713282084E-4	DESIGN
because numeric can be anything	WITHOUT_CLASSIFICATION	0.9998034165360634	WITHOUT_CLASSIFICATION	1.965834639365714E-4	DESIGN
constructors and factory methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.995294180340035	WITHOUT_CLASSIFICATION	0.0047058196599649394	DESIGN
standard sql92 functions (can be overridden by subclasses)	WITHOUT_CLASSIFICATION	0.9966130314211881	WITHOUT_CLASSIFICATION	0.0033869685788118766	DESIGN
map second/minute/hour/day/month/year to ANSI extract(), override on subclasses	WITHOUT_CLASSIFICATION	0.9990897282182559	WITHOUT_CLASSIFICATION	9.102717817439957E-4	DESIGN
register hibernate types for default use in scalar sqlquery type auto detection	WITHOUT_CLASSIFICATION	0.991016916007006	WITHOUT_CLASSIFICATION	0.008983083992993994	DESIGN
database type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.992989374689588	WITHOUT_CLASSIFICATION	0.007010625310411961	DESIGN
hibernate type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.992989374689588	WITHOUT_CLASSIFICATION	0.007010625310411961	DESIGN
keyword support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9980165067907989	WITHOUT_CLASSIFICATION	0.001983493209201066	DESIGN
native identifier generatiion ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995225826412723	WITHOUT_CLASSIFICATION	4.7741735872778765E-4	DESIGN
IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9972715302796386	WITHOUT_CLASSIFICATION	0.0027284697203613685	DESIGN
SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9972715302796386	WITHOUT_CLASSIFICATION	0.0027284697203613685	DESIGN
GUID support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9972715302796386	WITHOUT_CLASSIFICATION	0.0027284697203613685	DESIGN
limit/offset support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9972715302796386	WITHOUT_CLASSIFICATION	0.0027284697203613685	DESIGN
by default we report no support	WITHOUT_CLASSIFICATION	0.9887208632562536	WITHOUT_CLASSIFICATION	0.011279136743746433	DESIGN
by default we report no support for NOWAIT lock semantics	WITHOUT_CLASSIFICATION	0.8486760543265311	WITHOUT_CLASSIFICATION	0.15132394567346882	DESIGN
table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9986347992483496	WITHOUT_CLASSIFICATION	0.0013652007516504066	DESIGN
temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9727246733330309	WITHOUT_CLASSIFICATION	0.027275326666969118	DESIGN
callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9975375857450084	WITHOUT_CLASSIFICATION	0.0024624142549916276	DESIGN
current timestamp support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9972057907891391	WITHOUT_CLASSIFICATION	0.0027942092108609175	DESIGN
SQLException support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9972715302796386	WITHOUT_CLASSIFICATION	0.0027284697203613685	DESIGN
miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9972715302796386	WITHOUT_CLASSIFICATION	0.0027284697203613685	DESIGN
identifier quoting support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9973166926987908	WITHOUT_CLASSIFICATION	0.0026833073012093125	DESIGN
DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9972715302796386	WITHOUT_CLASSIFICATION	0.0027284697203613685	DESIGN
grrr... for differentiation of mysql storage engines	WITHOUT_CLASSIFICATION	0.9993711787599255	WITHOUT_CLASSIFICATION	6.288212400744354E-4	DESIGN
Informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992564144695602	WITHOUT_CLASSIFICATION	7.435855304398626E-4	DESIGN
return false here, as most databases do not properly support this construct...	WITHOUT_CLASSIFICATION	0.9976412869633654	WITHOUT_CLASSIFICATION	0.002358713036634627	DESIGN
Mckoi has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9988569914053403	WITHOUT_CLASSIFICATION	0.0011430085946596133	DESIGN
Oracle8 and previous define only a "DATE" type which is used to represent all aspects of date/time	WITHOUT_CLASSIFICATION	0.9895673443842594	WITHOUT_CLASSIFICATION	0.010432655615740598	DESIGN
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9998479413381407	WITHOUT_CLASSIFICATION	1.5205866185930415E-4	DESIGN
" cascade";	WITHOUT_CLASSIFICATION	0.9999033271300063	WITHOUT_CLASSIFICATION	9.667286999370857E-5	DESIGN
trim off the length/precision/scale	WITHOUT_CLASSIFICATION	0.9998835525892661	WITHOUT_CLASSIFICATION	1.1644741073391261E-4	DESIGN
public boolean dropTemporaryTableAfterUse() {we have to, because postgres sets current txto rollback only after a failed create tablereturn true;}	WITHOUT_CLASSIFICATION	0.9999597453471923	WITHOUT_CLASSIFICATION	4.0254652807654306E-5	DESIGN
CHECK VIOLATION	WITHOUT_CLASSIFICATION	0.9998740958691271	WITHOUT_CLASSIFICATION	1.259041308727615E-4	DESIGN
UNIQUE VIOLATION	WITHOUT_CLASSIFICATION	0.9998740958691271	WITHOUT_CLASSIFICATION	1.259041308727615E-4	DESIGN
FOREIGN KEY VIOLATION	WITHOUT_CLASSIFICATION	0.9998445711713739	WITHOUT_CLASSIFICATION	1.5542882862614135E-4	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994296671094893	WITHOUT_CLASSIFICATION	5.703328905106488E-4	DESIGN
NOT NULL VIOLATION	WITHOUT_CLASSIFICATION	0.9996954341035157	WITHOUT_CLASSIFICATION	3.0456589648424645E-4	DESIGN
ALL OTHER	WITHOUT_CLASSIFICATION	0.9998672978270902	WITHOUT_CLASSIFICATION	1.3270217290975537E-4	DESIGN
Register the type of the out param - PostgreSQL uses Types.OTHER	WITHOUT_CLASSIFICATION	0.9808972901145349	WITHOUT_CLASSIFICATION	0.01910270988546506	DESIGN
seems to not really... public boolean supportsRowValueConstructorSyntax() { return true; }	WITHOUT_CLASSIFICATION	0.9996439448016231	WITHOUT_CLASSIFICATION	3.56055198376907E-4	DESIGN
seems to have spotty LOB suppport	WITHOUT_CLASSIFICATION	0.9992767139036898	WITHOUT_CLASSIFICATION	7.232860963102403E-4	DESIGN
HHH-2300	WITHOUT_CLASSIFICATION	0.9998680402420813	WITHOUT_CLASSIFICATION	1.3195975791871172E-4	DESIGN
ignore (probably H2 not in the classpath)	WITHOUT_CLASSIFICATION	0.9992456210169152	WITHOUT_CLASSIFICATION	7.543789830848634E-4	DESIGN
Numeric Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992564144695602	WITHOUT_CLASSIFICATION	7.435855304398626E-4	DESIGN
String Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9990546040821633	WITHOUT_CLASSIFICATION	9.453959178366663E-4	DESIGN
Time and Date Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999187546650311	WITHOUT_CLASSIFICATION	8.124533496890441E-4	DESIGN
System Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992666829524646	WITHOUT_CLASSIFICATION	7.333170475354781E-4	DESIGN
not null is implicit	WITHOUT_CLASSIFICATION	0.9996993968199489	WITHOUT_CLASSIFICATION	3.006031800510454E-4	DESIGN
23000: Check constraint violation: {0} 23001: Unique index or primary key violation: {0}	WITHOUT_CLASSIFICATION	0.9996540447033562	WITHOUT_CLASSIFICATION	3.459552966438582E-4	DESIGN
Display the dialect version.	WITHOUT_CLASSIFICATION	0.9999494827785043	WITHOUT_CLASSIFICATION	5.051722149577354E-5	DESIGN
The RDMS concat() function only supports 2 parameters	WITHOUT_CLASSIFICATION	0.9999188432724684	WITHOUT_CLASSIFICATION	8.115672753156647E-5	DESIGN
Dialect method overrides ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9988117735212034	WITHOUT_CLASSIFICATION	0.0011882264787964746	DESIGN
Original Dialect.java returns " for update";	WITHOUT_CLASSIFICATION	0.9984541036129791	WITHOUT_CLASSIFICATION	0.0015458963870209471	DESIGN
Verify the state of this new method in Hibernate 3.0 Dialect.java	WITHOUT_CLASSIFICATION	0.9984429689678344	WITHOUT_CLASSIFICATION	0.001557031032165607	DESIGN
Origial Dialect.java returns true;	WITHOUT_CLASSIFICATION	0.9990703065016583	WITHOUT_CLASSIFICATION	9.296934983416381E-4	DESIGN
The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9986332253743582	WITHOUT_CLASSIFICATION	0.001366774625641887	DESIGN
Sequence methods - start. The RDMS dialect needs these	WITHOUT_CLASSIFICATION	0.9830570253088445	WITHOUT_CLASSIFICATION	0.016942974691155462	DESIGN
methods to make it possible to use the Native Id generator	WITHOUT_CLASSIFICATION	0.9990656423669014	WITHOUT_CLASSIFICATION	9.343576330984812E-4	DESIGN
The where clause was added to eliminate this statement from Brute Force Searches.	WITHOUT_CLASSIFICATION	0.9974658114500178	WITHOUT_CLASSIFICATION	0.0025341885499823415	DESIGN
Sequence methods - end	WITHOUT_CLASSIFICATION	0.9952797673641831	WITHOUT_CLASSIFICATION	0.004720232635816859	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994296671094893	WITHOUT_CLASSIFICATION	5.703328905106488E-4	DESIGN
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9998479413381407	WITHOUT_CLASSIFICATION	1.5205866185930415E-4	DESIGN
We must return a valid RDMS/RSA command from this method to prevent RDMS/RSA from issuing ERROR 400	WITHOUT_CLASSIFICATION	0.9543221235284943	WITHOUT_CLASSIFICATION	0.04567787647150575	DESIGN
Used with DROP TABLE to delete all records in the table.	WITHOUT_CLASSIFICATION	0.9998089036618579	WITHOUT_CLASSIFICATION	1.9109633814210026E-4	DESIGN
RDMS supports the UNION ALL clause.	WITHOUT_CLASSIFICATION	0.9995440198428541	WITHOUT_CLASSIFICATION	4.559801571458383E-4	DESIGN
RDMS has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9988569914053403	WITHOUT_CLASSIFICATION	0.0011430085946596133	DESIGN
Multi-param dialect functions...	WITHOUT_CLASSIFICATION	0.9992564144695602	WITHOUT_CLASSIFICATION	7.435855304398626E-4	DESIGN
function templates	WITHOUT_CLASSIFICATION	0.9999519375756228	WITHOUT_CLASSIFICATION	4.8062424377189655E-5	DESIGN
not null is implicit	WITHOUT_CLASSIFICATION	0.9996993968199489	WITHOUT_CLASSIFICATION	3.006031800510454E-4	DESIGN
this assumes schema support, which is present in 1.8.0 and later...	WITHOUT_CLASSIFICATION	0.9991316105311053	WITHOUT_CLASSIFICATION	8.683894688947713E-4	DESIGN
HSQLDB only supports READ_UNCOMMITTED transaction isolation	WITHOUT_CLASSIFICATION	0.999468120195048	WITHOUT_CLASSIFICATION	5.318798049519223E-4	DESIGN
Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9993427574595992	WITHOUT_CLASSIFICATION	6.572425404006797E-4	DESIGN
Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9992665479208599	WITHOUT_CLASSIFICATION	7.334520791400461E-4	DESIGN
Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9992564144695602	WITHOUT_CLASSIFICATION	7.435855304398626E-4	DESIGN
simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999227546502305	WITHOUT_CLASSIFICATION	7.724534976951113E-5	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994296671094893	WITHOUT_CLASSIFICATION	5.703328905106488E-4	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994296671094893	WITHOUT_CLASSIFICATION	5.703328905106488E-4	DESIGN
not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9984608351786914	WITHOUT_CLASSIFICATION	0.0015391648213085014	DESIGN
register the type of the out param - an Oracle specific type	WITHOUT_CLASSIFICATION	0.9838529368719648	WITHOUT_CLASSIFICATION	0.01614706312803521	DESIGN
TimesTen has no BLOB/CLOB support, but these types may be suitable for some applications. The length is limited to 4 million bytes.	WITHOUT_CLASSIFICATION	0.9819231446806298	WITHOUT_CLASSIFICATION	0.018076855319370224	DESIGN
new methods in dialect3	WITHOUT_CLASSIFICATION	0.9997089273717544	WITHOUT_CLASSIFICATION	2.910726282455962E-4	DESIGN
public boolean supportsForUpdateNowait() {return false;}	WITHOUT_CLASSIFICATION	0.9994325887772606	WITHOUT_CLASSIFICATION	5.674112227393259E-4	DESIGN
TimesTen has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9988569914053403	WITHOUT_CLASSIFICATION	0.0011430085946596133	DESIGN
iterate entries ordered by capacity to find first fit	WITHOUT_CLASSIFICATION	0.9369682026961145	WITHOUT_CLASSIFICATION	0.06303179730388557	DESIGN
add new ordered map	WITHOUT_CLASSIFICATION	0.9999627473942747	WITHOUT_CLASSIFICATION	3.725260572535558E-5	DESIGN
registerColumnType( Types.VARCHAR, 16777215, "mediumtext" );	WITHOUT_CLASSIFICATION	0.9992564144695602	WITHOUT_CLASSIFICATION	7.435855304398626E-4	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994296671094893	WITHOUT_CLASSIFICATION	5.703328905106488E-4	DESIGN
This assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.9991968713015403	WITHOUT_CLASSIFICATION	8.031286984596025E-4	DESIGN
sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9991112802158257	WITHOUT_CLASSIFICATION	8.887197841742277E-4	DESIGN
return "select CURRENT_TIMESTAMP from RDB$DATABASE";	WITHOUT_CLASSIFICATION	0.9987080570249502	WITHOUT_CLASSIFICATION	0.0012919429750498186	DESIGN
registerColumnType data types	WITHOUT_CLASSIFICATION	0.9997764196533939	WITHOUT_CLASSIFICATION	2.2358034660617247E-4	DESIGN
hibernate seems to ignore this type...	WITHOUT_CLASSIFICATION	0.9916050026892526	WITHOUT_CLASSIFICATION	0.008394997310747528	DESIGN
IBID for current_time and current_date	WITHOUT_CLASSIFICATION	0.9984209666108835	WITHOUT_CLASSIFICATION	0.001579033389116391	DESIGN
Tell hibernate to use getBytes instead of getBinaryStream	WITHOUT_CLASSIFICATION	0.9977220122572995	WITHOUT_CLASSIFICATION	0.0022779877427005733	DESIGN
No batch statements	WITHOUT_CLASSIFICATION	0.9999383100121871	WITHOUT_CLASSIFICATION	6.168998781281595E-5	DESIGN
We might want a special case for 19,2. This is very common for money types and here it is converted to 18,1	WITHOUT_CLASSIFICATION	0.6169213167084368	DESIGN	0.3830786832915632	WITHOUT_CLASSIFICATION
no pointbase BIT	WITHOUT_CLASSIFICATION	0.9999268507388305	WITHOUT_CLASSIFICATION	7.31492611695832E-5	DESIGN
no pointbase TINYINT	WITHOUT_CLASSIFICATION	0.9999268507388305	WITHOUT_CLASSIFICATION	7.31492611695832E-5	DESIGN
Pointbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9988569914053403	WITHOUT_CLASSIFICATION	0.0011430085946596133	DESIGN
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9998479413381407	WITHOUT_CLASSIFICATION	1.5205866185930415E-4	DESIGN
The current_timestamp is more accurate, but only known to be supported in SQL Server 7.0 and later (i.e., Sybase not known to support it at all)	WITHOUT_CLASSIFICATION	0.9863052366762909	WITHOUT_CLASSIFICATION	0.013694763323709112	DESIGN
SQL Server (at least up through 2005) does not support defining cascade delete constraints which can circel back to the mutating table	WITHOUT_CLASSIFICATION	0.9998773097044998	WITHOUT_CLASSIFICATION	1.2269029550020474E-4	DESIGN
here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9829441539556318	WITHOUT_CLASSIFICATION	0.017055846044368175	DESIGN
registerColumnType( Types.BLOB, 16777215, "mediumblob" ); registerColumnType( Types.BLOB, 65535, "blob" );	WITHOUT_CLASSIFICATION	0.9992564144695602	WITHOUT_CLASSIFICATION	7.435855304398626E-4	DESIGN
registerColumnType( Types.CLOB, 16777215, "mediumtext" ); registerColumnType( Types.CLOB, 65535, "text" );	WITHOUT_CLASSIFICATION	0.9992564144695602	WITHOUT_CLASSIFICATION	7.435855304398626E-4	DESIGN
registerColumnType( Types.VARCHAR, 16777215, "mediumtext" ); registerColumnType( Types.VARCHAR, 65535, "text" );	WITHOUT_CLASSIFICATION	0.9992564144695602	WITHOUT_CLASSIFICATION	7.435855304398626E-4	DESIGN
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9998479413381407	WITHOUT_CLASSIFICATION	1.5205866185930415E-4	DESIGN
package-private	WITHOUT_CLASSIFICATION	0.9998743822553942	WITHOUT_CLASSIFICATION	1.2561774460581796E-4	DESIGN
sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9991112802158257	WITHOUT_CLASSIFICATION	8.887197841742277E-4	DESIGN
Sybase BIT type does not support null values	WITHOUT_CLASSIFICATION	0.9961499160144335	WITHOUT_CLASSIFICATION	0.003850083985566459	DESIGN
This assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.9991968713015403	WITHOUT_CLASSIFICATION	8.031286984596025E-4	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994296671094893	WITHOUT_CLASSIFICATION	5.703328905106488E-4	DESIGN
You may still have other ResultSets or update counts left to process here but you can't do it now or the ResultSet you just got will be closed	WITHOUT_CLASSIFICATION	0.9998655410522099	WITHOUT_CLASSIFICATION	1.3445894779002282E-4	DESIGN
not null ... (start with 1) is implicit	WITHOUT_CLASSIFICATION	0.9955250875074334	WITHOUT_CLASSIFICATION	0.004474912492566619	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994296671094893	WITHOUT_CLASSIFICATION	5.703328905106488E-4	DESIGN
Oracle driver reports to support getGeneratedKeys(), but they only support the version taking an array of the names of the columns to be returned (via its RETURNING clause). No other driver seems to support this overloaded version.	WITHOUT_CLASSIFICATION	0.9964422311265684	WITHOUT_CLASSIFICATION	0.003557768873431532	DESIGN
Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9993427574595992	WITHOUT_CLASSIFICATION	6.572425404006797E-4	DESIGN
Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9992665479208599	WITHOUT_CLASSIFICATION	7.334520791400461E-4	DESIGN
Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9992564144695602	WITHOUT_CLASSIFICATION	7.435855304398626E-4	DESIGN
add another (inner) nested select add the main query close off the inner nested select	WITHOUT_CLASSIFICATION	0.9999920135906558	WITHOUT_CLASSIFICATION	7.986409344146696E-6	DESIGN
add the main query	WITHOUT_CLASSIFICATION	0.9999825533116811	WITHOUT_CLASSIFICATION	1.744668831893094E-5	DESIGN
add the restriction to the outer select	WITHOUT_CLASSIFICATION	0.9999453764700986	WITHOUT_CLASSIFICATION	5.462352990136298E-5	DESIGN
This assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.9991968713015403	WITHOUT_CLASSIFICATION	8.031286984596025E-4	DESIGN
You may still have other ResultSets or update counts left to process here but you can't do it now or the ResultSet you just got will be closed	WITHOUT_CLASSIFICATION	0.9998655410522099	WITHOUT_CLASSIFICATION	1.3445894779002282E-4	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994296671094893	WITHOUT_CLASSIFICATION	5.703328905106488E-4	DESIGN
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9998479413381407	WITHOUT_CLASSIFICATION	1.5205866185930415E-4	DESIGN
simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999227546502305	WITHOUT_CLASSIFICATION	7.724534976951113E-5	DESIGN
not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9984608351786914	WITHOUT_CLASSIFICATION	0.0015391648213085014	DESIGN
register the type of the out param - an Oracle specific type	WITHOUT_CLASSIFICATION	0.9838529368719648	WITHOUT_CLASSIFICATION	0.01614706312803521	DESIGN
features which change between 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9989985445763381	WITHOUT_CLASSIFICATION	0.0010014554236619543	DESIGN
features which remain constant across 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9984815381673054	WITHOUT_CLASSIFICATION	0.0015184618326944893	DESIGN
binary %Stream character %Stream	WITHOUT_CLASSIFICATION	0.9996809724029542	WITHOUT_CLASSIFICATION	3.1902759704587156E-4	DESIGN
getDefaultProperties().setProperty(Environment.STATEMENT_BATCH_SIZE, NO_BATCH);	WITHOUT_CLASSIFICATION	0.9992564144695602	WITHOUT_CLASSIFICATION	7.435855304398626E-4	DESIGN
hibernate impelemnts cast in Dialect.java	WITHOUT_CLASSIFICATION	0.9983390709819355	WITHOUT_CLASSIFICATION	0.0016609290180644046	DESIGN
aggregate functions shouldn't be registered, right? registerFunction( "list", new StandardSQLFunction("list",Hibernate.STRING) ); stopped on $list	WITHOUT_CLASSIFICATION	0.9981734372377414	WITHOUT_CLASSIFICATION	0.0018265627622586235	DESIGN
DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9972715302796386	WITHOUT_CLASSIFICATION	0.0027284697203613685	DESIGN
below is for Cache' that don't have str in 2007.1 there is str and we register str directly	WITHOUT_CLASSIFICATION	0.9737229685877072	WITHOUT_CLASSIFICATION	0.026277031412292734	DESIGN
note that %string is deprecated	WITHOUT_CLASSIFICATION	0.9799895029216033	WITHOUT_CLASSIFICATION	0.020010497078396697	DESIGN
%upper is deprecated	WITHOUT_CLASSIFICATION	0.9991832939025965	WITHOUT_CLASSIFICATION	8.167060974035573E-4	DESIGN
The syntax used to add a foreign key constraint to a table.	WITHOUT_CLASSIFICATION	0.9999152282397301	WITHOUT_CLASSIFICATION	8.477176026983495E-5	DESIGN
identifier-commalist	WITHOUT_CLASSIFICATION	0.9998740958691271	WITHOUT_CLASSIFICATION	1.259041308727615E-4	DESIGN
IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9972715302796386	WITHOUT_CLASSIFICATION	0.0027284697203613685	DESIGN
SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9972715302796386	WITHOUT_CLASSIFICATION	0.0027284697203613685	DESIGN
temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9727246733330309	WITHOUT_CLASSIFICATION	0.027275326666969118	DESIGN
identifier-commalist	WITHOUT_CLASSIFICATION	0.9998740958691271	WITHOUT_CLASSIFICATION	1.259041308727615E-4	DESIGN
The syntax used to add a column to a table	WITHOUT_CLASSIFICATION	0.9998856538758503	WITHOUT_CLASSIFICATION	1.1434612414976385E-4	DESIGN
Completely optional cascading drop clause.	WITHOUT_CLASSIFICATION	0.9990185153040406	WITHOUT_CLASSIFICATION	9.814846959594293E-4	DESIGN
lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9962786522480384	WITHOUT_CLASSIFICATION	0.003721347751961752	DESIGN
LIMIT support (ala TOP) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9972715302796386	WITHOUT_CLASSIFICATION	0.0027284697203613685	DESIGN
InterSystems Cache' does not current support "SELECT ... FOR UPDATE" syntax... Set your transaction mode to READ_COMMITTED before using	WITHOUT_CLASSIFICATION	0.9216468072256441	WITHOUT_CLASSIFICATION	0.07835319277435591	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994296671094893	WITHOUT_CLASSIFICATION	5.703328905106488E-4	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994296671094893	WITHOUT_CLASSIFICATION	5.703328905106488E-4	DESIGN
<String>	WITHOUT_CLASSIFICATION	0.9998680402420813	WITHOUT_CLASSIFICATION	1.3195975791871172E-4	DESIGN
callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9975375857450084	WITHOUT_CLASSIFICATION	0.0024624142549916276	DESIGN
miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9972715302796386	WITHOUT_CLASSIFICATION	0.0027284697203613685	DESIGN
The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9986332253743582	WITHOUT_CLASSIFICATION	0.001366774625641887	DESIGN
Does the LIMIT clause come at the start of the SELECT statement, rather than at the end?	WITHOUT_CLASSIFICATION	0.996920556782484	WITHOUT_CLASSIFICATION	0.003079443217515999	DESIGN
Does the LIMIT clause take a "maximum" row number instead of a total number of returned rows?	WITHOUT_CLASSIFICATION	0.9996732643750189	WITHOUT_CLASSIFICATION	3.2673562498117525E-4	DESIGN
The name of the SQL function that transforms a string to lowercase	WITHOUT_CLASSIFICATION	0.999856750834337	WITHOUT_CLASSIFICATION	1.4324916566291567E-4	DESIGN
Create an OuterJoinGenerator for this dialect.	WITHOUT_CLASSIFICATION	0.9962772917927386	WITHOUT_CLASSIFICATION	0.003722708207261403	DESIGN
The keyword used to insert a row without specifying any column values	WITHOUT_CLASSIFICATION	0.999968234983236	WITHOUT_CLASSIFICATION	3.176501676413084E-5	DESIGN
registerFunction( "trim", new StandardSQLFunction( "trim", Hibernate.STRING ) );	WITHOUT_CLASSIFICATION	0.9989808786505324	WITHOUT_CLASSIFICATION	0.001019121349467579	DESIGN
skip the FROM keyword in params	WITHOUT_CLASSIFICATION	0.9998590270163971	WITHOUT_CLASSIFICATION	1.4097298360287954E-4	DESIGN
package	WITHOUT_CLASSIFICATION	0.9993601709670066	WITHOUT_CLASSIFICATION	6.398290329934237E-4	DESIGN
potentialTrimCharacterArgIndex = 1 assumes that a trim-specification has been specified. we handle the exception to that explicitly	WITHOUT_CLASSIFICATION	0.9998863131354465	WITHOUT_CLASSIFICATION	1.1368686455356803E-4	DESIGN
SQLFunction implementation	WITHOUT_CLASSIFICATION	0.9997703904168613	WITHOUT_CLASSIFICATION	2.2960958313876062E-4	DESIGN
conceivable that the dialect ctor could throw HibernateExceptions, so don't re-wrap	WITHOUT_CLASSIFICATION	0.997986516606786	WITHOUT_CLASSIFICATION	0.0020134833932140645	DESIGN
register the standard dialect resolver	WITHOUT_CLASSIFICATION	0.9992736064926243	WITHOUT_CLASSIFICATION	7.263935073755807E-4	DESIGN
register resolvers set via Environment property	WITHOUT_CLASSIFICATION	0.9996354155944437	WITHOUT_CLASSIFICATION	3.6458440555633417E-4	DESIGN
kept for backward compatibility until after the 3.1beta5 release of HA	WITHOUT_CLASSIFICATION	0.9999173676225067	WITHOUT_CLASSIFICATION	8.263237749327387E-5	DESIGN
cache the hashcode	WITHOUT_CLASSIFICATION	0.9999713655766783	WITHOUT_CLASSIFICATION	2.8634423321623785E-5	DESIGN
the CascadingAction contract ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997431898728589	WITHOUT_CLASSIFICATION	2.568101271411219E-4	DESIGN
the CascadingAction implementations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997463197024739	WITHOUT_CLASSIFICATION	2.536802975261702E-4	DESIGN
delete does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.997565750090952	WITHOUT_CLASSIFICATION	0.0024342499090478915	DESIGN
orphans should be deleted during delete	WITHOUT_CLASSIFICATION	0.9962444850294746	WITHOUT_CLASSIFICATION	0.0037555149705255073	DESIGN
(LockMode) anything	WITHOUT_CLASSIFICATION	0.9999433192117304	WITHOUT_CLASSIFICATION	5.668078826958269E-5	DESIGN
lock doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9993428826233297	WITHOUT_CLASSIFICATION	6.571173766703542E-4	DESIGN
refresh doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9995723289168569	WITHOUT_CLASSIFICATION	4.276710831430529E-4	DESIGN
evicts don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9980054199432414	WITHOUT_CLASSIFICATION	0.001994580056758488	DESIGN
saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9990010694297814	WITHOUT_CLASSIFICATION	9.98930570218568E-4	DESIGN
orphans should be deleted during save/update	WITHOUT_CLASSIFICATION	0.9962494543064461	WITHOUT_CLASSIFICATION	0.003750545693553965	DESIGN
for deprecated saveOrUpdateCopy()	WITHOUT_CLASSIFICATION	0.9938448622385667	WITHOUT_CLASSIFICATION	0.006155137761433299	DESIGN
persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9980054199432414	WITHOUT_CLASSIFICATION	0.001994580056758488	DESIGN
a proxy cannot be transient and it breaks ForeignKeys.isTransient	WITHOUT_CLASSIFICATION	0.999694809881881	WITHOUT_CLASSIFICATION	3.0519011811901283E-4	DESIGN
replicate does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.997568975343344	WITHOUT_CLASSIFICATION	0.002431024656655872	DESIGN
static helper methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9983693615410258	WITHOUT_CLASSIFICATION	0.0016306384589741714	DESIGN
handles arrays and newly instantiated collections	WITHOUT_CLASSIFICATION	0.9994955676872698	WITHOUT_CLASSIFICATION	5.044323127301898E-4	DESIGN
Actually the semantics of the next three are really "Bag" Note that, unlike objects, collection insertions, updates, deletions are not really remembered between flushes. We just re-use the same Lists for convenience.	WITHOUT_CLASSIFICATION	0.9361524939386499	WITHOUT_CLASSIFICATION	0.06384750606135008	DESIGN
Add these directly to the executions queue	WITHOUT_CLASSIFICATION	0.9993570376348384	WITHOUT_CLASSIFICATION	6.429623651616043E-4	DESIGN
continue loop	WITHOUT_CLASSIFICATION	0.9999372011408764	WITHOUT_CLASSIFICATION	6.279885912355743E-5	DESIGN
sort the updates by fk	WITHOUT_CLASSIFICATION	0.9999457088122424	WITHOUT_CLASSIFICATION	5.429118775747244E-5	DESIGN
sort the updates by pk	WITHOUT_CLASSIFICATION	0.9999457088122424	WITHOUT_CLASSIFICATION	5.429118775747244E-5	DESIGN
the mapping of entity names to their latest batch numbers.	WITHOUT_CLASSIFICATION	0.9997834214546509	WITHOUT_CLASSIFICATION	2.165785453490771E-4	DESIGN
the map of batch numbers to EntityInsertAction lists	WITHOUT_CLASSIFICATION	0.9996191810094456	WITHOUT_CLASSIFICATION	3.808189905544157E-4	DESIGN
optimize the hash size to eliminate a rehash.	WITHOUT_CLASSIFICATION	0.9994475200438928	WITHOUT_CLASSIFICATION	5.524799561071101E-4	DESIGN
the list of entity names that indicate the batch number	WITHOUT_CLASSIFICATION	0.9999364726103109	WITHOUT_CLASSIFICATION	6.352738968911566E-5	DESIGN
remove the current element from insertions. It will be added back later.	WITHOUT_CLASSIFICATION	0.9997599468694819	WITHOUT_CLASSIFICATION	2.4005313051821356E-4	DESIGN
the entity associated with the current action.	WITHOUT_CLASSIFICATION	0.9986762609754445	WITHOUT_CLASSIFICATION	0.001323739024555465	DESIGN
There is already an existing batch for this type of entity. Check to see if the latest batch is acceptable.	WITHOUT_CLASSIFICATION	0.9709679563791125	WITHOUT_CLASSIFICATION	0.029032043620887432	DESIGN
now rebuild the insertions list. There is a batch for each entry in the name list.	WITHOUT_CLASSIFICATION	0.9997464534624191	WITHOUT_CLASSIFICATION	2.5354653758087706E-4	DESIGN
the current batch number is the latest batch for this entity type.	WITHOUT_CLASSIFICATION	0.998241072802979	WITHOUT_CLASSIFICATION	0.0017589271970209867	DESIGN
loop through all the associations of the current entity and make sure that they are processed before the current batch number	WITHOUT_CLASSIFICATION	0.9990705564758492	WITHOUT_CLASSIFICATION	9.294435241506653E-4	DESIGN
find the batch number associated with the current association, if any.	WITHOUT_CLASSIFICATION	0.9997107491773031	WITHOUT_CLASSIFICATION	2.8925082269697983E-4	DESIGN
create a new batch for this type. The batch number is the number of current batches.	WITHOUT_CLASSIFICATION	0.9989799617898226	WITHOUT_CLASSIFICATION	0.0010200382101772736	DESIGN
loop through all the associated entities and make sure they have been processed before the latest batch associated with this entity type.	WITHOUT_CLASSIFICATION	0.9985636799302101	WITHOUT_CLASSIFICATION	0.0014363200697898814	DESIGN
since this entity will now be processed in the latest possible batch, we can be assured that it will come after all other associations, there's not need to continue checking.	WITHOUT_CLASSIFICATION	0.9996722814260225	WITHOUT_CLASSIFICATION	3.277185739774138E-4	DESIGN
cascade to current collection elements	WITHOUT_CLASSIFICATION	0.9987310231125207	WITHOUT_CLASSIFICATION	0.001268976887479257	DESIGN
not really necessary, but good for consistency...	WITHOUT_CLASSIFICATION	0.99833795205935	WITHOUT_CLASSIFICATION	0.0016620479406499568	DESIGN
we can't cascade to non-embedded elements	WITHOUT_CLASSIFICATION	0.9992540860317941	WITHOUT_CLASSIFICATION	7.459139682058486E-4	DESIGN
a newly instantiated collection can't have orphans	WITHOUT_CLASSIFICATION	0.9912470676669495	WITHOUT_CLASSIFICATION	0.008752932333050533	DESIGN
handle orphaned entities!!	WITHOUT_CLASSIFICATION	0.9996434031578969	WITHOUT_CLASSIFICATION	3.565968421031225E-4	DESIGN
Loaded entity instances, by EntityUniqueKey	WITHOUT_CLASSIFICATION	0.9987544433437502	WITHOUT_CLASSIFICATION	0.00124555665624983	DESIGN
Identity map of EntityEntry instances, by the entity instance	WITHOUT_CLASSIFICATION	0.9996808609558895	WITHOUT_CLASSIFICATION	3.191390441104751E-4	DESIGN
Entity proxies, by EntityKey	WITHOUT_CLASSIFICATION	0.9997432650143958	WITHOUT_CLASSIFICATION	2.5673498560418887E-4	DESIGN
Snapshots of current database state for entities that have not been loaded	WITHOUT_CLASSIFICATION	0.9995008341085838	WITHOUT_CLASSIFICATION	4.991658914161376E-4	DESIGN
Identity map of array holder ArrayHolder instances, by the array instance	WITHOUT_CLASSIFICATION	0.9998821560813089	WITHOUT_CLASSIFICATION	1.1784391869116073E-4	DESIGN
Collection wrappers, by the CollectionKey key=CollectionKey, value=PersistentCollection	WITHOUT_CLASSIFICATION	0.9995823577074135	WITHOUT_CLASSIFICATION	4.176422925863961E-4	DESIGN
Set of EntityKeys of deleted objects	WITHOUT_CLASSIFICATION	0.9991852339885079	WITHOUT_CLASSIFICATION	8.147660114920001E-4	DESIGN
properties that we have tried to load, and not found in the database	WITHOUT_CLASSIFICATION	0.9991309994093757	WITHOUT_CLASSIFICATION	8.690005906242779E-4	DESIGN
A list of collection wrappers that were instantiating during result set processing, that we will need to initialize at the end of the query	WITHOUT_CLASSIFICATION	0.9783150074423342	WITHOUT_CLASSIFICATION	0.02168499255766577	DESIGN
A container for collections we load up when the owning entity is not yet loaded ... for now, this is purely transient!	WITHOUT_CLASSIFICATION	0.9994742984743273	WITHOUT_CLASSIFICATION	5.257015256726721E-4	DESIGN
Downgrade locks	WITHOUT_CLASSIFICATION	0.9998800506930601	WITHOUT_CLASSIFICATION	1.1994930693985351E-4	DESIGN
any earlier proxy takes precedence	WITHOUT_CLASSIFICATION	0.9998136760647504	WITHOUT_CLASSIFICATION	1.8632393524953825E-4	DESIGN
unwrap the object	WITHOUT_CLASSIFICATION	0.9999488704941678	WITHOUT_CLASSIFICATION	5.112950583215629E-5	DESIGN
initialize + unwrap the object	WITHOUT_CLASSIFICATION	0.9999739455475416	WITHOUT_CLASSIFICATION	2.6054452458452755E-5	DESIGN
return the proxied object	WITHOUT_CLASSIFICATION	0.9999276205978025	WITHOUT_CLASSIFICATION	7.23794021974134E-5	DESIGN
overwrite old proxy	WITHOUT_CLASSIFICATION	0.9999896250628096	WITHOUT_CLASSIFICATION	1.0374937190413605E-5	DESIGN
early exit...	WITHOUT_CLASSIFICATION	0.9999087140982778	WITHOUT_CLASSIFICATION	9.128590172227366E-5	DESIGN
or should it actually throw an exception?	WITHOUT_CLASSIFICATION	0.9868805704366037	WITHOUT_CLASSIFICATION	0.013119429563396286	DESIGN
treat it just like a new collection	WITHOUT_CLASSIFICATION	0.9950720487227849	WITHOUT_CLASSIFICATION	0.00492795127721513	DESIGN
do this work only at the very highest level of the load don't let this method be called recursively	WITHOUT_CLASSIFICATION	0.9854088632842717	WITHOUT_CLASSIFICATION	0.014591136715728197	DESIGN
note that each iteration of the loop may add new elements	WITHOUT_CLASSIFICATION	0.9999879595971728	WITHOUT_CLASSIFICATION	1.2040402827207705E-5	DESIGN
it might be an unwrapped collection reference! try to find a wrapper (slowish)	WITHOUT_CLASSIFICATION	0.9949363353314115	WITHOUT_CLASSIFICATION	0.005063664668588481	DESIGN
public boolean isNonExistant(EntityKey key) {return nonExistantEntityKeys.contains(key);}	WITHOUT_CLASSIFICATION	0.9994325887772606	WITHOUT_CLASSIFICATION	5.674112227393259E-4	DESIGN
public boolean isNonExistant(EntityUniqueKey key) {return nonExistentEntityUniqueKeys.contains(key);}	WITHOUT_CLASSIFICATION	0.9994325887772606	WITHOUT_CLASSIFICATION	5.674112227393259E-4	DESIGN
iterate all the entities currently associated with the persistence context.	WITHOUT_CLASSIFICATION	0.9996793068364545	WITHOUT_CLASSIFICATION	3.206931635455385E-4	DESIGN
does this entity entry pertain to the entity persister in which we are interested (owner)?	WITHOUT_CLASSIFICATION	0.9964338075287238	WITHOUT_CLASSIFICATION	0.003566192471276312	DESIGN
check if the managed object is the parent	WITHOUT_CLASSIFICATION	0.9995207175459487	WITHOUT_CLASSIFICATION	4.7928245405125816E-4	DESIGN
otherwise, the proxy was pruned during the serialization process	WITHOUT_CLASSIFICATION	0.9999854821371614	WITHOUT_CLASSIFICATION	1.4517862838445583E-5	DESIGN
adds remove as a sort-of alias for delete...	WITHOUT_CLASSIFICATION	0.9932090249987775	WITHOUT_CLASSIFICATION	0.006790975001222425	DESIGN
bad cast	WITHOUT_CLASSIFICATION	0.9997716343722466	WITHOUT_CLASSIFICATION	2.2836562775340862E-4	DESIGN
return lhsPersister.getSubclassPropertyColumnNames(property);	WITHOUT_CLASSIFICATION	0.9993603456102749	WITHOUT_CLASSIFICATION	6.396543897250504E-4	DESIGN
property-refs for associations defined on a component are not supported, so no need to slice	WITHOUT_CLASSIFICATION	0.9957336361105686	WITHOUT_CLASSIFICATION	0.004266363889431387	DESIGN
if there is no property-ref, assume the join is to the subclass table (ie. the table of the subclass that the association belongs to)	WITHOUT_CLASSIFICATION	0.9998874776151205	WITHOUT_CLASSIFICATION	1.1252238487948399E-4	DESIGN
handle a property-ref	WITHOUT_CLASSIFICATION	0.9993973015758597	WITHOUT_CLASSIFICATION	6.026984241402823E-4	DESIGN
NativeSQLQueryReturn	WITHOUT_CLASSIFICATION	0.9998740958691271	WITHOUT_CLASSIFICATION	1.259041308727615E-4	DESIGN
final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9991409478916191	WITHOUT_CLASSIFICATION	8.590521083809904E-4	DESIGN
why is all others non final ?	WITHOUT_CLASSIFICATION	0.9837756583758571	WITHOUT_CLASSIFICATION	0.016224341624142987	DESIGN
this.forceCacheRefresh = forceCacheRefresh;	WITHOUT_CLASSIFICATION	0.9998907403978173	WITHOUT_CLASSIFICATION	1.092596021825539E-4	DESIGN
HELLA IMPORTANT OPTIMIZATION!!!	WITHOUT_CLASSIFICATION	0.9992854763684849	WITHOUT_CLASSIFICATION	7.145236315150034E-4	DESIGN
return that.type.equals(type) && EqualsHelper.equals(that.value, value);	WITHOUT_CLASSIFICATION	0.9993653509348922	WITHOUT_CLASSIFICATION	6.34649065107753E-4	DESIGN
Must occur after resolving identifiers!	WITHOUT_CLASSIFICATION	0.9944981905050737	WITHOUT_CLASSIFICATION	0.00550180949492623	DESIGN
take a snapshot	WITHOUT_CLASSIFICATION	0.9997374773051161	WITHOUT_CLASSIFICATION	2.625226948839915E-4	DESIGN
do a check	WITHOUT_CLASSIFICATION	0.9998439855252055	WITHOUT_CLASSIFICATION	1.5601447479453073E-4	DESIGN
the owning entity may have been deleted and its identifier unset due to identifier-rollback; in which case, try to look up its identifier from the persistence context	WITHOUT_CLASSIFICATION	0.9993684219309716	WITHOUT_CLASSIFICATION	6.315780690283913E-4	DESIGN
do the work	WITHOUT_CLASSIFICATION	0.9999036620229423	WITHOUT_CLASSIFICATION	9.63379770576912E-5	DESIGN
We've been here before	WITHOUT_CLASSIFICATION	0.9992444359479065	WITHOUT_CLASSIFICATION	7.555640520934504E-4	DESIGN
it is or was referenced _somewhere_	WITHOUT_CLASSIFICATION	0.9995609848769985	WITHOUT_CLASSIFICATION	4.390151230015352E-4	DESIGN
do the work	WITHOUT_CLASSIFICATION	0.9999036620229423	WITHOUT_CLASSIFICATION	9.63379770576912E-5	DESIGN
if either its role changed,	WITHOUT_CLASSIFICATION	0.9998645400737143	WITHOUT_CLASSIFICATION	1.354599262857797E-4	DESIGN
or its key changed	WITHOUT_CLASSIFICATION	0.9999854825044268	WITHOUT_CLASSIFICATION	1.4517495573282194E-5	DESIGN
we will need to create new entries	WITHOUT_CLASSIFICATION	0.9951340505297172	WITHOUT_CLASSIFICATION	0.004865949470282847	DESIGN
we will need to remove ye olde entries	WITHOUT_CLASSIFICATION	0.9629574222572262	WITHOUT_CLASSIFICATION	0.03704257774277384	DESIGN
force initialize!	WITHOUT_CLASSIFICATION	0.9996536487577791	WITHOUT_CLASSIFICATION	3.463512422209849E-4	DESIGN
else if it's elements changed	WITHOUT_CLASSIFICATION	0.9999915037472288	WITHOUT_CLASSIFICATION	8.496252771223662E-6	DESIGN
ATTRIBUTES MAINTAINED BETWEEN FLUSH CYCLES	WITHOUT_CLASSIFICATION	0.9992564144695602	WITHOUT_CLASSIFICATION	7.435855304398626E-4	DESIGN
session-start/post-flush persistent state	WITHOUT_CLASSIFICATION	0.9992725077309385	WITHOUT_CLASSIFICATION	7.27492269061517E-4	DESIGN
allow the CollectionSnapshot to be serialized	WITHOUT_CLASSIFICATION	0.9985664382007927	WITHOUT_CLASSIFICATION	0.0014335617992072356	DESIGN
ATTRIBUTES USED ONLY DURING FLUSH CYCLE	WITHOUT_CLASSIFICATION	0.9992535413759799	WITHOUT_CLASSIFICATION	7.464586240200039E-4	DESIGN
"current" means the reference that was found during flush()	WITHOUT_CLASSIFICATION	0.9993803763990026	WITHOUT_CLASSIFICATION	6.19623600997528E-4	DESIGN
"loaded" means the reference that is consistent with the current database state	WITHOUT_CLASSIFICATION	0.9987750622374741	WITHOUT_CLASSIFICATION	0.0012249377625258779	DESIGN
during flush, we navigate the object graph to collections and decide what to do with them	WITHOUT_CLASSIFICATION	0.9973283277465285	WITHOUT_CLASSIFICATION	0.0026716722534715666	DESIGN
if we instantiate a collection during the flush() process, we must ignore it for the rest of the flush()	WITHOUT_CLASSIFICATION	0.9859982303668715	WITHOUT_CLASSIFICATION	0.014001769633128486	DESIGN
new collections that get found + wrapped during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9992551947398363	WITHOUT_CLASSIFICATION	7.448052601637266E-4	DESIGN
a newly wrapped collection is NOT dirty (or we get unnecessary version updates)	WITHOUT_CLASSIFICATION	0.9733055766981739	WITHOUT_CLASSIFICATION	0.02669442330182621	DESIGN
collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9998443304314125	WITHOUT_CLASSIFICATION	1.5566956858758022E-4	DESIGN
collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9998443304314125	WITHOUT_CLASSIFICATION	1.5566956858758022E-4	DESIGN
detached collections that get found + reattached during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9993103135801029	WITHOUT_CLASSIFICATION	6.896864198971661E-4	DESIGN
optimization	WITHOUT_CLASSIFICATION	0.9999241947142601	WITHOUT_CLASSIFICATION	7.580528573990252E-5	DESIGN
optimization optimization	WITHOUT_CLASSIFICATION	0.9999062722101985	WITHOUT_CLASSIFICATION	9.372778980152517E-5	DESIGN
re-snapshot	WITHOUT_CLASSIFICATION	0.9998740958691271	WITHOUT_CLASSIFICATION	1.259041308727615E-4	DESIGN
for convenience to save some lookups	WITHOUT_CLASSIFICATION	0.9968015987726945	WITHOUT_CLASSIFICATION	0.003198401227305526	DESIGN
NOTE: this is not updated when properties are fetched lazily!	WITHOUT_CLASSIFICATION	0.9987815238668896	WITHOUT_CLASSIFICATION	0.0012184761331103615	DESIGN
memory optimization	WITHOUT_CLASSIFICATION	0.9999330096105179	WITHOUT_CLASSIFICATION	6.699038948208464E-5	DESIGN
use the id value of a newly instantiated instance as the unsaved-value	WITHOUT_CLASSIFICATION	0.9996502427914739	WITHOUT_CLASSIFICATION	3.497572085261466E-4	DESIGN
copied from Session:	WITHOUT_CLASSIFICATION	0.9976356737400542	WITHOUT_CLASSIFICATION	0.002364326259945836	DESIGN
this should not happen since the DTD prevents it	WITHOUT_CLASSIFICATION	0.9989876920750975	WITHOUT_CLASSIFICATION	0.0010123079249024169	DESIGN
JoinProcessor needs to know if the where clause fragment came from a dynamic filter or not so it can put the where clause fragment in the right place in the SQL AST. 'hasFilterCondition' keeps track of that fact.	WITHOUT_CLASSIFICATION	0.9993425071900801	WITHOUT_CLASSIFICATION	6.574928099199485E-4	DESIGN
the current join represents the join between a many-to-many association table and its "target" table. Here we need to apply any additional filters defined specifically on the many-to-many	WITHOUT_CLASSIFICATION	0.9990711426251798	WITHOUT_CLASSIFICATION	9.288573748201881E-4	DESIGN
check basic level one nullablilty	WITHOUT_CLASSIFICATION	0.9996905567931154	WITHOUT_CLASSIFICATION	3.094432068845918E-4	DESIGN
values is not null and is checkable, we'll look deeper	WITHOUT_CLASSIFICATION	0.9993147272546287	WITHOUT_CLASSIFICATION	6.852727453713314E-4	DESIGN
for non null args, check for components and elements containing components	WITHOUT_CLASSIFICATION	0.9993027933095199	WITHOUT_CLASSIFICATION	6.972066904802227E-4	DESIGN
cache the hashcode	WITHOUT_CLASSIFICATION	0.9999713655766783	WITHOUT_CLASSIFICATION	2.8634423321623785E-5	DESIGN
persistent collections may have components	WITHOUT_CLASSIFICATION	0.9989006709548646	WITHOUT_CLASSIFICATION	0.0010993290451353924	DESIGN
check for all components values in the collection	WITHOUT_CLASSIFICATION	0.9998449585125355	WITHOUT_CLASSIFICATION	1.550414874645529E-4	DESIGN
will check current level if some of them are not null or sublevels if they exist	WITHOUT_CLASSIFICATION	0.9968038821795826	WITHOUT_CLASSIFICATION	0.003196117820417277	DESIGN
do the test	WITHOUT_CLASSIFICATION	0.9999815849004613	WITHOUT_CLASSIFICATION	1.841509953873164E-5	DESIGN
if its an uninitialized proxy it can't be transient	WITHOUT_CLASSIFICATION	0.9997536318776634	WITHOUT_CLASSIFICATION	2.4636812233660494E-4	DESIGN
unwrap it	WITHOUT_CLASSIFICATION	0.9999275091899714	WITHOUT_CLASSIFICATION	7.24908100284947E-5	DESIGN
See if the entity is already bound to this session, if not look at the entity identifier and assume that the entity is persistent if the id is not "unsaved" (that is, we rely on foreign keys to keep database integrity)	WITHOUT_CLASSIFICATION	0.9761807092964925	WITHOUT_CLASSIFICATION	0.023819290703507533	DESIGN
an unfetched association can only point to an entity that already exists in the db	WITHOUT_CLASSIFICATION	0.9998253300129272	WITHOUT_CLASSIFICATION	1.7466998707280863E-4	DESIGN
let the interceptor inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9965052461431984	WITHOUT_CLASSIFICATION	0.003494753856801597	DESIGN
let the persister inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9945247735953315	WITHOUT_CLASSIFICATION	0.005475226404668428	DESIGN
we use the assumed value, if there is one, to avoid hitting the database	WITHOUT_CLASSIFICATION	0.9998753690177828	WITHOUT_CLASSIFICATION	1.2463098221709727E-4	DESIGN
hit the database, after checking the session cache for a snapshot	WITHOUT_CLASSIFICATION	0.9989840924935939	WITHOUT_CLASSIFICATION	0.0010159075064061997	DESIGN
context-entity-identifier returns null explicitly if the entity is not associated with the persistence context; so make some deeper checks...	WITHOUT_CLASSIFICATION	0.9954430690873968	WITHOUT_CLASSIFICATION	0.004556930912603241	DESIGN
int count = 0;	WITHOUT_CLASSIFICATION	0.9999875871148246	WITHOUT_CLASSIFICATION	1.2412885175332132E-5	DESIGN
the first key found after the given key	WITHOUT_CLASSIFICATION	0.9999387403110868	WITHOUT_CLASSIFICATION	6.125968891321336E-5	DESIGN
checkForEnd = false;	WITHOUT_CLASSIFICATION	0.9999810106546232	WITHOUT_CLASSIFICATION	1.8989345376824614E-5	DESIGN
count++;	WITHOUT_CLASSIFICATION	0.9998680402420813	WITHOUT_CLASSIFICATION	1.3195975791871172E-4	DESIGN
end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9976403075017722	WITHOUT_CLASSIFICATION	0.00235969249822776	DESIGN
we ran out of keys to try	WITHOUT_CLASSIFICATION	0.999685582091382	WITHOUT_CLASSIFICATION	3.144179086179629E-4	DESIGN
first element of array is reserved for the actual instance we are loading!	WITHOUT_CLASSIFICATION	0.9976742574522345	WITHOUT_CLASSIFICATION	0.002325742547765435	DESIGN
the first id found after the given id	WITHOUT_CLASSIFICATION	0.9998898388701986	WITHOUT_CLASSIFICATION	1.1016112980144033E-4	DESIGN
we ran out of ids to try	WITHOUT_CLASSIFICATION	0.9997945348215865	WITHOUT_CLASSIFICATION	2.0546517841348597E-4	DESIGN
look for existing collection as part of the persistence context	WITHOUT_CLASSIFICATION	0.9987208691549014	WITHOUT_CLASSIFICATION	0.0012791308450986359	DESIGN
ignore this row of results! Note the early exit	WITHOUT_CLASSIFICATION	0.9994562036476523	WITHOUT_CLASSIFICATION	5.437963523476772E-4	DESIGN
initialize this collection	WITHOUT_CLASSIFICATION	0.9977338373749061	WITHOUT_CLASSIFICATION	0.0022661626250938434	DESIGN
create one	WITHOUT_CLASSIFICATION	0.9998813127381568	WITHOUT_CLASSIFICATION	1.1868726184328353E-4	DESIGN
warning: can cause a recursive calls! (proxy initialization)	WITHOUT_CLASSIFICATION	0.9979136011099597	WITHOUT_CLASSIFICATION	0.0020863988900403714	DESIGN
there were no queued additions and the role has a cache	WITHOUT_CLASSIFICATION	0.9999567074371039	WITHOUT_CLASSIFICATION	4.329256289608389E-5	DESIGN
and this is not a forced initialization during flush	WITHOUT_CLASSIFICATION	0.9967445721328761	WITHOUT_CLASSIFICATION	0.0032554278671238918	DESIGN
some filters affecting the collection are enabled on the session, so do not do the put into the cache.	WITHOUT_CLASSIFICATION	0.9983032879777579	WITHOUT_CLASSIFICATION	0.0016967120222420658	DESIGN
cleanup code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9973318456395821	WITHOUT_CLASSIFICATION	0.002668154360417951	DESIGN
loading collection xrefs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9968361224377368	WITHOUT_CLASSIFICATION	0.0031638775622631755	DESIGN
Collection load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999640987914642	WITHOUT_CLASSIFICATION	3.590120853581116E-4	DESIGN
simple cache of param metadata based on query string. Ideally, the original "user-supplied query" string should be used to retreive this metadata (i.e., not the para-list-expanded query string) to avoid unnecessary cache entries. Used solely for caching param metadata for native-sql queries, see getSQLParameterMetadata() for a discussion as to why...	WITHOUT_CLASSIFICATION	0.9977642429347161	WITHOUT_CLASSIFICATION	0.002235757065283856	DESIGN
the cache of the actual plans...	WITHOUT_CLASSIFICATION	0.9998872031253616	WITHOUT_CLASSIFICATION	1.1279687463846736E-4	DESIGN
package	WITHOUT_CLASSIFICATION	0.9993601709670066	WITHOUT_CLASSIFICATION	6.398290329934237E-4	DESIGN
package	WITHOUT_CLASSIFICATION	0.9993601709670066	WITHOUT_CLASSIFICATION	6.398290329934237E-4	DESIGN
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9998695887195158	WITHOUT_CLASSIFICATION	1.3041128048415577E-4	DESIGN
for native-sql queries, the param metadata is determined outside any relation to a query plan, because query plan creation and/or retreival for a native-sql query depends on all of the return types having been set, which might not be the case up-front when param metadata would be most useful	WITHOUT_CLASSIFICATION	0.9980634167644086	WITHOUT_CLASSIFICATION	0.0019365832355913678	DESIGN
don't care...	WITHOUT_CLASSIFICATION	0.9997525311591664	WITHOUT_CLASSIFICATION	2.4746884083353803E-4	DESIGN
Recognition code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9973247549212985	WITHOUT_CLASSIFICATION	0.002675245078701553	DESIGN
don't care...	WITHOUT_CLASSIFICATION	0.9997525311591664	WITHOUT_CLASSIFICATION	2.4746884083353803E-4	DESIGN
NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9996918064938826	WITHOUT_CLASSIFICATION	3.081935061174587E-4	DESIGN
break the outer loop !!!	WITHOUT_CLASSIFICATION	0.9999807107996864	WITHOUT_CLASSIFICATION	1.9289200313496663E-5	DESIGN
named parameter	WITHOUT_CLASSIFICATION	0.9994204321372682	WITHOUT_CLASSIFICATION	5.795678627319064E-4	DESIGN
could be either an ordinal or JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9953833948344412	WITHOUT_CLASSIFICATION	0.004616605165558904	DESIGN
a peek ahead showed this as an JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9921009155178273	WITHOUT_CLASSIFICATION	0.007899084482172667	DESIGN
make sure this "name" is an integral	WITHOUT_CLASSIFICATION	0.998038103370269	WITHOUT_CLASSIFICATION	0.001961896629730907	DESIGN
pre-determine and cache the hashcode	WITHOUT_CLASSIFICATION	0.9998093379410588	WITHOUT_CLASSIFICATION	1.906620589411822E-4	DESIGN
perform the actual work	WITHOUT_CLASSIFICATION	0.9997343132176026	WITHOUT_CLASSIFICATION	2.656867823972953E-4	DESIGN
if everything went ok, commit the transaction and close the obtained connection handle...	WITHOUT_CLASSIFICATION	0.9999535691578235	WITHOUT_CLASSIFICATION	4.6430842176544805E-5	DESIGN
at some point the processing went bad, so we need to: 1) make sure the connection handle gets released 2) try to cleanup the JTA context as much as possible	WITHOUT_CLASSIFICATION	0.9897171347291916	WITHOUT_CLASSIFICATION	0.01028286527080839	DESIGN
finally handle the exception	WITHOUT_CLASSIFICATION	0.9998728502095174	WITHOUT_CLASSIFICATION	1.2714979048259953E-4	DESIGN
a "detached" collection that belonged to a different entity	WITHOUT_CLASSIFICATION	0.988144601694513	WITHOUT_CLASSIFICATION	0.011855398305487019	DESIGN
saveOrUpdateCopy() is deprecated!	WITHOUT_CLASSIFICATION	0.9989066067388584	WITHOUT_CLASSIFICATION	0.0010933932611415572	DESIGN
collectionPersister should not be null, but we don't want to throw an exception if it is null	WITHOUT_CLASSIFICATION	0.5474349785497545	WITHOUT_CLASSIFICATION	0.4525650214502453	DESIGN
otherwise a null or brand new collection this will also (inefficiently) handle arrays, which have no snapshot, so we can't do any better processArrayOrNewCollection(collection, type);	WITHOUT_CLASSIFICATION	0.7914527799101562	WITHOUT_CLASSIFICATION	0.20854722008984372	DESIGN
a "detached" collection that originally belonged to the same entity	WITHOUT_CLASSIFICATION	0.9898452136214151	WITHOUT_CLASSIFICATION	0.010154786378584857	DESIGN
do nothing	WITHOUT_CLASSIFICATION	0.9999850762040801	WITHOUT_CLASSIFICATION	1.4923795919982432E-5	DESIGN
do nothing	WITHOUT_CLASSIFICATION	0.9999850762040801	WITHOUT_CLASSIFICATION	1.4923795919982432E-5	DESIGN
Force a substitution!	WITHOUT_CLASSIFICATION	0.9997691565761947	WITHOUT_CLASSIFICATION	2.308434238052752E-4	DESIGN
The user requested a "greater" (i.e. more restrictive) form of pessimistic lock	WITHOUT_CLASSIFICATION	0.9909278365657151	WITHOUT_CLASSIFICATION	0.009072163434284797	DESIGN
the database now holds a lock + the object is flushed from the cache, so release the soft lock	WITHOUT_CLASSIFICATION	0.9997674676573733	WITHOUT_CLASSIFICATION	2.3253234262655013E-4	DESIGN
now update the object .. has to be outside the main if block above (because of collections)	WITHOUT_CLASSIFICATION	0.9999369298723788	WITHOUT_CLASSIFICATION	6.307012762122052E-5	DESIGN
Search for collections by reachability, updating their role. We don't want to touch collections reachable from a deleted object	WITHOUT_CLASSIFICATION	0.9575595642385775	WITHOUT_CLASSIFICATION	0.04244043576142258	DESIGN
this is a situation where the entity id is assigned by a post-insert generator and was saved outside the transaction forcing it to be delayed	WITHOUT_CLASSIFICATION	0.9933655644681867	WITHOUT_CLASSIFICATION	0.0066344355318132655	DESIGN
NOTE: we need to do the wrap here even if its not "dirty", because collections need wrapping but changes to _them_ don't dirty the container. Also, for versioned data, we need to wrap before calling searchForDirtyCollections	WITHOUT_CLASSIFICATION	0.9586502821907731	WITHOUT_CLASSIFICATION	0.041349717809226826	DESIGN
grab its state saved at deletion	WITHOUT_CLASSIFICATION	0.9995562549909155	WITHOUT_CLASSIFICATION	4.4374500908448653E-4	DESIGN
grab its current state	WITHOUT_CLASSIFICATION	0.9998666025962493	WITHOUT_CLASSIFICATION	1.3339740375063224E-4	DESIGN
schedule the update note that we intentionally do _not_ pass in currentPersistentState!	WITHOUT_CLASSIFICATION	0.999766916027787	WITHOUT_CLASSIFICATION	2.3308397221299162E-4	DESIGN
substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9994996036624983	WITHOUT_CLASSIFICATION	5.003963375015716E-4	DESIGN
give the Interceptor a chance to process property values, if the properties were modified by the Interceptor, we need to set them back to the object	WITHOUT_CLASSIFICATION	0.9999278529637701	WITHOUT_CLASSIFICATION	7.214703622999261E-5	DESIGN
compare to cached state (ignoring collections unless versioned)	WITHOUT_CLASSIFICATION	0.9983527641237788	WITHOUT_CLASSIFICATION	0.0016472358762212008	DESIGN
if it was dirtied by a collection only	WITHOUT_CLASSIFICATION	0.9974050803260098	WITHOUT_CLASSIFICATION	0.002594919673990146	DESIGN
increment the version number (if necessary)	WITHOUT_CLASSIFICATION	0.9998667126472295	WITHOUT_CLASSIFICATION	1.3328735277062592E-4	DESIGN
check nullability but do not perform command execute we'll use scheduled updates for that.	WITHOUT_CLASSIFICATION	0.9918829927837948	WITHOUT_CLASSIFICATION	0.008117007216205169	DESIGN
give the Interceptor a chance to modify property values	WITHOUT_CLASSIFICATION	0.9999336579183095	WITHOUT_CLASSIFICATION	6.634208169046945E-5	DESIGN
now we might need to recalculate the dirtyProperties array	WITHOUT_CLASSIFICATION	0.9980639417244136	WITHOUT_CLASSIFICATION	0.0019360582755864025	DESIGN
use the current version	WITHOUT_CLASSIFICATION	0.9999461713580822	WITHOUT_CLASSIFICATION	5.3828641917900576E-5	DESIGN
Interceptor returned null, so do the dirtycheck ourself, if possible	WITHOUT_CLASSIFICATION	0.999841220979596	WITHOUT_CLASSIFICATION	1.5877902040401626E-4	DESIGN
object loaded by update()	WITHOUT_CLASSIFICATION	0.9996949061166239	WITHOUT_CLASSIFICATION	3.0509388337606564E-4	DESIGN
dirty check against the usual snapshot of the entity	WITHOUT_CLASSIFICATION	0.9997738148109943	WITHOUT_CLASSIFICATION	2.261851890057159E-4	DESIGN
dirty check against the database snapshot, if possible/necessary	WITHOUT_CLASSIFICATION	0.9999537365344773	WITHOUT_CLASSIFICATION	4.6263465522663645E-5	DESIGN
the Interceptor handled the dirty checking	WITHOUT_CLASSIFICATION	0.9997452853407537	WITHOUT_CLASSIFICATION	2.5471465924626756E-4	DESIGN
even process null collections	WITHOUT_CLASSIFICATION	0.999918446586076	WITHOUT_CLASSIFICATION	8.155341392398632E-5	DESIGN
get the id from the object	WITHOUT_CLASSIFICATION	0.999808934687516	WITHOUT_CLASSIFICATION	1.910653124840864E-4	DESIGN
always do an INSERT, and let it fail by constraint violation	WITHOUT_CLASSIFICATION	0.9965535692844726	WITHOUT_CLASSIFICATION	0.0034464307155273833	DESIGN
what is the version on the database?	WITHOUT_CLASSIFICATION	0.9988091612654081	WITHOUT_CLASSIFICATION	0.0011908387345919388	DESIGN
/ HHH-2378	WITHOUT_CLASSIFICATION	0.9999296249981258	WITHOUT_CLASSIFICATION	7.03750018743201E-5	DESIGN
will result in a SQL UPDATE:	WITHOUT_CLASSIFICATION	0.999875105714292	WITHOUT_CLASSIFICATION	1.2489428570803423E-4	DESIGN
else do nothing (don't even reassociate object!)	WITHOUT_CLASSIFICATION	0.9999562350074258	WITHOUT_CLASSIFICATION	4.3764992574293634E-5	DESIGN
no existing row - do an insert	WITHOUT_CLASSIFICATION	0.9996047656437466	WITHOUT_CLASSIFICATION	3.952343562533771E-4	DESIGN
refresh() does not pass an entityName	WITHOUT_CLASSIFICATION	0.9996707672776581	WITHOUT_CLASSIFICATION	3.292327223418689E-4	DESIGN
do not return a proxy! (this option indicates we are initializing a proxy)	WITHOUT_CLASSIFICATION	0.9977904946649612	WITHOUT_CLASSIFICATION	0.002209505335038828	DESIGN
return a proxy if appropriate	WITHOUT_CLASSIFICATION	0.9997935904712459	WITHOUT_CLASSIFICATION	2.0640952875411814E-4	DESIGN
return existing object or initialized proxy (unless deleted)	WITHOUT_CLASSIFICATION	0.9997098479499796	WITHOUT_CLASSIFICATION	2.9015205002033326E-4	DESIGN
return new uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999600919249978	WITHOUT_CLASSIFICATION	3.990807500214499E-5	DESIGN
this object was already loaded	WITHOUT_CLASSIFICATION	0.9994840363653017	WITHOUT_CLASSIFICATION	5.159636346983139E-4	DESIGN
Entity was found in second-level cache...	WITHOUT_CLASSIFICATION	0.9990616122016183	WITHOUT_CLASSIFICATION	9.38387798381694E-4	DESIGN
make it circular-reference safe	WITHOUT_CLASSIFICATION	0.9988512684241894	WITHOUT_CLASSIFICATION	0.0011487315758106473	DESIGN
intializes result by side-effect	WITHOUT_CLASSIFICATION	0.9994119819819259	WITHOUT_CLASSIFICATION	5.880180180740783E-4	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Pre-flushing section ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992412339143251	WITHOUT_CLASSIFICATION	7.58766085674836E-4	DESIGN
some statistics	WITHOUT_CLASSIFICATION	0.9998488322852718	WITHOUT_CLASSIFICATION	1.5116771472826898E-4	DESIGN
safe from concurrent modification because of how entryList() is implemented on IdentityMap	WITHOUT_CLASSIFICATION	0.9996406435101632	WITHOUT_CLASSIFICATION	3.5935648983680726E-4	DESIGN
Initialize dirty flags for arrays + collections with composite elements and reset reached, doupdate, etc.	WITHOUT_CLASSIFICATION	0.9996212414028454	WITHOUT_CLASSIFICATION	3.787585971546441E-4	DESIGN
Among other things, updateReachables() will recursively load all collections that are moving roles. This might cause entities to be loaded.	WITHOUT_CLASSIFICATION	0.9775386479373895	WITHOUT_CLASSIFICATION	0.02246135206261041	DESIGN
So this needs to be safe from concurrent modification problems. It is safe because of how IdentityMap implements entrySet()	WITHOUT_CLASSIFICATION	0.9896761909258226	WITHOUT_CLASSIFICATION	0.010323809074177384	DESIGN
Update the status of the object and if necessary, schedule an update	WITHOUT_CLASSIFICATION	0.9999849384907391	WITHOUT_CLASSIFICATION	1.5061509260980227E-5	DESIGN
Schedule updates to collections:	WITHOUT_CLASSIFICATION	0.9986570119284741	WITHOUT_CLASSIFICATION	0.0013429880715259146	DESIGN
we need to lock the collection caches before executing entity inserts/updates in order to account for bidi associations	WITHOUT_CLASSIFICATION	0.9487508907768631	WITHOUT_CLASSIFICATION	0.0512491092231368	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Post-flushing section ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992412339143251	WITHOUT_CLASSIFICATION	7.58766085674836E-4	DESIGN
the database has changed now, so the subselect results need to be invalidated	WITHOUT_CLASSIFICATION	0.9997085074133796	WITHOUT_CLASSIFICATION	2.914925866204032E-4	DESIGN
if the collection is dereferenced, remove from the session cache iter.remove(); does not work, since the entrySet is not backed by the set	WITHOUT_CLASSIFICATION	0.9612037131432838	WITHOUT_CLASSIFICATION	0.038796286856716225	DESIGN
otherwise recreate the mapping between the collection and its key	WITHOUT_CLASSIFICATION	0.9973358390197353	WITHOUT_CLASSIFICATION	0.0026641609802646143	DESIGN
get a snapshot	WITHOUT_CLASSIFICATION	0.9997981729389662	WITHOUT_CLASSIFICATION	2.0182706103368008E-4	DESIGN
package-private	WITHOUT_CLASSIFICATION	0.9998743822553942	WITHOUT_CLASSIFICATION	1.2561774460581796E-4	DESIGN
package-private	WITHOUT_CLASSIFICATION	0.9998743822553942	WITHOUT_CLASSIFICATION	1.2561774460581796E-4	DESIGN
key is an entity involved with the operation performed by the listener; value is a flag indicating if the listener explicitly operates on the entity	WITHOUT_CLASSIFICATION	0.9992967924584835	WITHOUT_CLASSIFICATION	7.032075415166144E-4	DESIGN
EARLY EXIT!!!	WITHOUT_CLASSIFICATION	0.9998740958691271	WITHOUT_CLASSIFICATION	1.259041308727615E-4	DESIGN
ie. the entity came in from update()	WITHOUT_CLASSIFICATION	0.9993955962210886	WITHOUT_CLASSIFICATION	6.044037789112695E-4	DESIGN
before any callbacks, etc, so subdeletions see that this deletion happened first	WITHOUT_CLASSIFICATION	0.9990061553224778	WITHOUT_CLASSIFICATION	9.93844677522104E-4	DESIGN
Ensures that containing deletions happen before sub-deletions	WITHOUT_CLASSIFICATION	0.9995285248023204	WITHOUT_CLASSIFICATION	4.714751976795914E-4	DESIGN
TypeFactory.deepCopy( currentState, propTypes, persister.getPropertyUpdateability(), deletedState, session );	WITHOUT_CLASSIFICATION	0.9993327215548833	WITHOUT_CLASSIFICATION	6.672784451167077E-4	DESIGN
cascade-delete to collections BEFORE the collection owner is deleted	WITHOUT_CLASSIFICATION	0.998559854688973	WITHOUT_CLASSIFICATION	0.001440145311027055	DESIGN
cascade-delete to many-to-one AFTER the parent was deleted	WITHOUT_CLASSIFICATION	0.9997125147952443	WITHOUT_CLASSIFICATION	2.874852047556838E-4	DESIGN
if it is an initialized proxy, let cascade handle it later on	WITHOUT_CLASSIFICATION	0.9956115402612581	WITHOUT_CLASSIFICATION	0.00438845973874187	DESIGN
assign the requested id to the proxy, before reassociating the proxy	WITHOUT_CLASSIFICATION	0.9999415924986695	WITHOUT_CLASSIFICATION	5.840750133052417E-5	DESIGN
an uninitialized proxy, noop, don't even need to return an id, since it is never a save()	WITHOUT_CLASSIFICATION	0.9972265431164274	WITHOUT_CLASSIFICATION	0.0027734568835725126	DESIGN
initialize properties of the event:	WITHOUT_CLASSIFICATION	0.9998371789835101	WITHOUT_CLASSIFICATION	1.6282101648988748E-4	DESIGN
return the id in the event object	WITHOUT_CLASSIFICATION	0.999458339974889	WITHOUT_CLASSIFICATION	5.416600251110652E-4	DESIGN
TRANSIENT or DELETED	WITHOUT_CLASSIFICATION	0.9998982179887589	WITHOUT_CLASSIFICATION	1.0178201124108218E-4	DESIGN
use the id assigned to the instance	WITHOUT_CLASSIFICATION	0.9986047299892269	WITHOUT_CLASSIFICATION	0.0013952700107730171	DESIGN
assume this is a newly instantiated transient object which should be saved rather than updated	WITHOUT_CLASSIFICATION	0.865289893401929	WITHOUT_CLASSIFICATION	0.13471010659807098	DESIGN
this is a transient object with existing persistent state not loaded by the session	WITHOUT_CLASSIFICATION	0.9954425100760067	WITHOUT_CLASSIFICATION	0.0045574899239933615	DESIGN
a collection loaded in the current session can not possibly be the collection belonging to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9978811637055857	WITHOUT_CLASSIFICATION	0.0021188362944144115	DESIGN
cachedState,	WITHOUT_CLASSIFICATION	0.9998740958691271	WITHOUT_CLASSIFICATION	1.259041308727615E-4	DESIGN
assume true, since we don't really know, and it doesn't matter	WITHOUT_CLASSIFICATION	0.9997092170982171	WITHOUT_CLASSIFICATION	2.9078290178287494E-4	DESIGN
a "detached" collection!	WITHOUT_CLASSIFICATION	0.9997368602042688	WITHOUT_CLASSIFICATION	2.631397957311883E-4	DESIGN
if the collection belonged to a different entity, clean up the existing state of the collection	WITHOUT_CLASSIFICATION	0.9975937270665234	WITHOUT_CLASSIFICATION	0.002406272933476611	DESIGN
log.debug( "calling onLoad()" );	WITHOUT_CLASSIFICATION	0.9992564144695602	WITHOUT_CLASSIFICATION	7.435855304398626E-4	DESIGN
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9998740958691271	WITHOUT_CLASSIFICATION	1.259041308727615E-4	DESIGN
note: performExecutions() clears all collectionXxxxtion collections (the collection actions) in the session	WITHOUT_CLASSIFICATION	0.99727265896466	WITHOUT_CLASSIFICATION	0.0027273410353399535	DESIGN
if no array holder we found an unwrappered array (this can't occur, because we now always call wrap() before getting to here) return (ah==null) ? true : searchForDirtyCollections(ah, type);	WITHOUT_CLASSIFICATION	0.9996939099301044	WITHOUT_CLASSIFICATION	3.0609006989560506E-4	DESIGN
if not wrappered yet, its dirty (this can't occur, because we now always call wrap() before getting to here) return ( ! (obj instanceof PersistentCollection) ) ? true : searchForDirtyCollections( (PersistentCollection) obj, type );	WITHOUT_CLASSIFICATION	0.9943657730159107	WITHOUT_CLASSIFICATION	0.00563422698408941	DESIGN
we need to check even if it was not initialized, because of delayed adds!	WITHOUT_CLASSIFICATION	0.9993590775080122	WITHOUT_CLASSIFICATION	6.409224919878536E-4	DESIGN
NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999553831107805	WITHOUT_CLASSIFICATION	4.461688921949927E-5	DESIGN
find any entities that are still transient after retry	WITHOUT_CLASSIFICATION	0.9920090163533546	WITHOUT_CLASSIFICATION	0.007990983646645453	DESIGN
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9998740958691271	WITHOUT_CLASSIFICATION	1.259041308727615E-4	DESIGN
Check the persistence context for an entry relating to this entity to be merged...	WITHOUT_CLASSIFICATION	0.988336955556284	WITHOUT_CLASSIFICATION	0.011663044443715947	DESIGN
we have specialized case of a detached entity from the perspective of the merge operation. Specifically, we have an incoming entity instance which has a corresponding entry in the current persistence context, but registered under a different entity instance	WITHOUT_CLASSIFICATION	0.9999511891757524	WITHOUT_CLASSIFICATION	4.881082424756349E-5	DESIGN
DELETED	WITHOUT_CLASSIFICATION	0.9998680402420813	WITHOUT_CLASSIFICATION	1.3195975791871172E-4	DESIGN
before cascade!	WITHOUT_CLASSIFICATION	0.999923249792515	WITHOUT_CLASSIFICATION	7.675020748503396E-5	DESIGN
cascade first, so that all unsaved objects get their copy created before we actually copy cascadeOnMerge(event, persister, entity, copyCache, Cascades.CASCADE_BEFORE_MERGE);	WITHOUT_CLASSIFICATION	0.9999290379969938	WITHOUT_CLASSIFICATION	7.096200300608265E-5	DESIGN
this bit is only really absolutely necessary for handling requestedId, but is also good if we merge multiple object graphs, since it helps ensure uniqueness	WITHOUT_CLASSIFICATION	0.5744631789145535	WITHOUT_CLASSIFICATION	0.42553682108544655	DESIGN
continue...; we'll find out if it ends up not getting saved later	WITHOUT_CLASSIFICATION	0.9970634544765139	WITHOUT_CLASSIFICATION	0.0029365455234861815	DESIGN
cascade first, so that all unsaved objects get their copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999290379969938	WITHOUT_CLASSIFICATION	7.096200300608265E-5	DESIGN
check that entity id = requestedId	WITHOUT_CLASSIFICATION	0.9999172714524283	WITHOUT_CLASSIFICATION	8.272854757173048E-5	DESIGN
before cascade!	WITHOUT_CLASSIFICATION	0.999923249792515	WITHOUT_CLASSIFICATION	7.675020748503396E-5	DESIGN
we got here because we assumed that an instance with an assigned id was detached, when it was really persistent	WITHOUT_CLASSIFICATION	0.9993306183340234	WITHOUT_CLASSIFICATION	6.693816659766228E-4	DESIGN
cascade first, so that all unsaved objects get their copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999290379969938	WITHOUT_CLASSIFICATION	7.096200300608265E-5	DESIGN
copyValues works by reflection, so explicitly mark the entity instance dirty	WITHOUT_CLASSIFICATION	0.9989619586482438	WITHOUT_CLASSIFICATION	0.0010380413517561973	DESIGN
EARLY EXIT	WITHOUT_CLASSIFICATION	0.9998680402420813	WITHOUT_CLASSIFICATION	1.3195975791871172E-4	DESIGN
source.getBatcher().executeBatch(); found another way to ensure that all batched joined inserts have been executed	WITHOUT_CLASSIFICATION	0.9995243470267743	WITHOUT_CLASSIFICATION	4.756529732257869E-4	DESIGN
substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9994996036624983	WITHOUT_CLASSIFICATION	5.003963375015716E-4	DESIGN
now done in EntityIdentityInsertAction persister.setIdentifier( entity, id, source.getEntityMode() );	WITHOUT_CLASSIFICATION	0.9992598723260061	WITHOUT_CLASSIFICATION	7.401276739939179E-4	DESIGN
source.getPersistenceContext().removeNonExist( new EntityKey( id, persister, source.getEntityMode() ) );	WITHOUT_CLASSIFICATION	0.9989808786505324	WITHOUT_CLASSIFICATION	0.001019121349467579	DESIGN
keep the existing version number in the case of replicate!	WITHOUT_CLASSIFICATION	0.9999790654363319	WITHOUT_CLASSIFICATION	2.093456366813327E-5	DESIGN
cascade-save to many-to-one BEFORE the parent is saved	WITHOUT_CLASSIFICATION	0.999621644907234	WITHOUT_CLASSIFICATION	3.783550927658786E-4	DESIGN
pass this as an argument only to avoid double looking	WITHOUT_CLASSIFICATION	0.9999784197082784	WITHOUT_CLASSIFICATION	2.158029172165301E-5	DESIGN
the object is persistent	WITHOUT_CLASSIFICATION	0.9998787637025958	WITHOUT_CLASSIFICATION	1.2123629740417335E-4	DESIGN
the entity is associated with the session, so check its status	WITHOUT_CLASSIFICATION	0.9999123363878333	WITHOUT_CLASSIFICATION	8.766361216675344E-5	DESIGN
do nothing for persistent instances	WITHOUT_CLASSIFICATION	0.9998936386559958	WITHOUT_CLASSIFICATION	1.0636134400428325E-4	DESIGN
ie. e.status==DELETED	WITHOUT_CLASSIFICATION	0.9998443304314125	WITHOUT_CLASSIFICATION	1.5566956858758022E-4	DESIGN
the object is transient or detached	WITHOUT_CLASSIFICATION	0.9996429977358089	WITHOUT_CLASSIFICATION	3.5700226419112116E-4	DESIGN
NOTE EARLY EXIT!	WITHOUT_CLASSIFICATION	0.99987564617863	WITHOUT_CLASSIFICATION	1.2435382137009467E-4	DESIGN
Private constructor - stops checkstyle from complaining.	WITHOUT_CLASSIFICATION	0.9975640736430735	WITHOUT_CLASSIFICATION	0.0024359263569265106	DESIGN
First, try to find a matching constructor accepting a ViolatedConstraintNameExtracter param...	WITHOUT_CLASSIFICATION	0.9989245208601394	WITHOUT_CLASSIFICATION	0.001075479139860675	DESIGN
eat it and try next	WITHOUT_CLASSIFICATION	0.9995731126830494	WITHOUT_CLASSIFICATION	4.2688731695059455E-4	DESIGN
Otherwise, try to use the no-arg constructor	WITHOUT_CLASSIFICATION	0.9998718363663829	WITHOUT_CLASSIFICATION	1.2816363361718532E-4	DESIGN
oracle sql-state code for deadlock	WITHOUT_CLASSIFICATION	0.995247330022782	WITHOUT_CLASSIFICATION	0.004752669977218058	DESIGN
CollectionPropertyMapping processes everything except 'index'.	WITHOUT_CLASSIFICATION	0.999071345592232	WITHOUT_CLASSIFICATION	9.28654407768128E-4	DESIGN
remove initial ", "	WITHOUT_CLASSIFICATION	0.9997966362630328	WITHOUT_CLASSIFICATION	2.0336373696705636E-4	DESIGN
remove initial " and "	WITHOUT_CLASSIFICATION	0.9997082925685129	WITHOUT_CLASSIFICATION	2.917074314871063E-4	DESIGN
beforeClassTokens.add("new"); DEFINITELY DON'T HAVE THIS!!	WITHOUT_CLASSIFICATION	0.9992564144695602	WITHOUT_CLASSIFICATION	7.435855304398626E-4	DESIGN
notAfterClassTokens.add(",");	WITHOUT_CLASSIFICATION	0.9998443304314125	WITHOUT_CLASSIFICATION	1.5566956858758022E-4	DESIGN
just especially for the trivial collection filter	WITHOUT_CLASSIFICATION	0.9984494645857688	WITHOUT_CLASSIFICATION	0.0015505354142312142	DESIGN
update last non-whitespace token, if necessary	WITHOUT_CLASSIFICATION	0.9988175908455574	WITHOUT_CLASSIFICATION	0.0011824091544425748	DESIGN
select-range is terminated by declaration of "from"	WITHOUT_CLASSIFICATION	0.9994632463763845	WITHOUT_CLASSIFICATION	5.367536236153627E-4	DESIGN
scan for next non-whitespace token	WITHOUT_CLASSIFICATION	0.9969475272060327	WITHOUT_CLASSIFICATION	0.0030524727939673572	DESIGN
Note this!!	WITHOUT_CLASSIFICATION	0.9999228806695103	WITHOUT_CLASSIFICATION	7.711933048973812E-5	DESIGN
Error message constants.	WITHOUT_CLASSIFICATION	0.9997792376118357	WITHOUT_CLASSIFICATION	2.2076238816426378E-4	DESIGN
handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9983219079851806	WITHOUT_CLASSIFICATION	0.0016780920148194137	DESIGN
semantic action handling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9974560660709256	WITHOUT_CLASSIFICATION	0.0025439339290743283	DESIGN
Handle collection-fiter compilation. IMPORTANT NOTE: This is modifying the INPUT (HQL) tree, not the output tree!	WITHOUT_CLASSIFICATION	0.998754405840063	WITHOUT_CLASSIFICATION	0.0012455941599369908	DESIGN
Show the modified AST.	WITHOUT_CLASSIFICATION	0.9999881050455001	WITHOUT_CLASSIFICATION	1.1894954499890148E-5	DESIGN
Create a parameter specification for the collection filter...	WITHOUT_CLASSIFICATION	0.9830294649721311	WITHOUT_CLASSIFICATION	0.016970535027868966	DESIGN
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999494290652662	WITHOUT_CLASSIFICATION	5.057093473380132E-5	DESIGN
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999494290652662	WITHOUT_CLASSIFICATION	5.057093473380132E-5	DESIGN
Get the names of the columns used to link between the collection owner and the collection elements.	WITHOUT_CLASSIFICATION	0.9992516627073076	WITHOUT_CLASSIFICATION	7.483372926923837E-4	DESIGN
The path AST should be a DotNode, and it should have been evaluated already.	WITHOUT_CLASSIFICATION	0.9993429217816522	WITHOUT_CLASSIFICATION	6.570782183477642E-4	DESIGN
Tell the dot node about the join type.	WITHOUT_CLASSIFICATION	0.9998227777906203	WITHOUT_CLASSIFICATION	1.7722220937970568E-4	DESIGN
Re-arrange the tree so that the collection function is the root and the lhs is the path.	WITHOUT_CLASSIFICATION	0.9996508574079349	WITHOUT_CLASSIFICATION	3.491425920651137E-4	DESIGN
Don't forget to resolve the argument! Resolve the collection function now.	WITHOUT_CLASSIFICATION	0.998170092007406	WITHOUT_CLASSIFICATION	0.0018299079925939519	DESIGN
Resolve everything up to this dot, but don't resolve the placeholders yet.	WITHOUT_CLASSIFICATION	0.9967544242433929	WITHOUT_CLASSIFICATION	0.003245575756607047	DESIGN
Should mean that no such property was found	WITHOUT_CLASSIFICATION	0.9997660839528848	WITHOUT_CLASSIFICATION	2.339160471152821E-4	DESIGN
Was there an explicit select expression?	WITHOUT_CLASSIFICATION	0.9997403856924733	WITHOUT_CLASSIFICATION	2.5961430752677035E-4	DESIGN
Attach any mapping-defined "ORDER BY" fragments	WITHOUT_CLASSIFICATION	0.9994226548452777	WITHOUT_CLASSIFICATION	5.773451547222875E-4	DESIGN
Use the explicitly declared select expression; determine the return types indicated by each select token	WITHOUT_CLASSIFICATION	0.9994141235323905	WITHOUT_CLASSIFICATION	5.858764676095988E-4	DESIGN
After that, process the JOINs. Invoke a delegate to do the work, as this is farily complex.	WITHOUT_CLASSIFICATION	0.9994502370258648	WITHOUT_CLASSIFICATION	5.497629741351542E-4	DESIGN
Make #@%$^#^&# sure no alias is applied to the table name	WITHOUT_CLASSIFICATION	0.9998951038796908	WITHOUT_CLASSIFICATION	1.0489612030907854E-4	DESIGN
We need to generate ids as part of this bulk insert. Note that this is only supported for sequence-style generators and post-insert-style generators; basically, only in-db generators	WITHOUT_CLASSIFICATION	0.9989551035317683	WITHOUT_CLASSIFICATION	0.0010448964682316314	DESIGN
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999494290652662	WITHOUT_CLASSIFICATION	5.057093473380132E-5	DESIGN
We need to seed the version value as part of this bulk insert	WITHOUT_CLASSIFICATION	0.9994960972511446	WITHOUT_CLASSIFICATION	5.039027488553124E-4	DESIGN
we need to wrtap the param in a cast()	WITHOUT_CLASSIFICATION	0.9916310830074835	WITHOUT_CLASSIFICATION	0.008368916992516394	DESIGN
This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9944370726457495	WITHOUT_CLASSIFICATION	0.005562927354250521	DESIGN
Generate implicit joins, only if necessary.	WITHOUT_CLASSIFICATION	0.9995384010203975	WITHOUT_CLASSIFICATION	4.6159897960256104E-4	DESIGN
Notify the FROM element that it is being referenced by the select.	WITHOUT_CLASSIFICATION	0.9993288158258086	WITHOUT_CLASSIFICATION	6.711841741914587E-4	DESIGN
Turn off includeSubclasses on all FromElements.	WITHOUT_CLASSIFICATION	0.9996944168168536	WITHOUT_CLASSIFICATION	3.055831831464928E-4	DESIGN
create the node initially with the param name so that it shows appropriately in the "original text" attribute	WITHOUT_CLASSIFICATION	0.9997895472643228	WITHOUT_CLASSIFICATION	2.1045273567723866E-4	DESIGN
Use the delegate, resolve identifiers as FROM element aliases.	WITHOUT_CLASSIFICATION	0.9999176800866852	WITHOUT_CLASSIFICATION	8.23199133146966E-5	DESIGN
select clauses for insert statements should alwasy be treated as shallow	WITHOUT_CLASSIFICATION	0.9891597187239537	WITHOUT_CLASSIFICATION	0.010840281276046262	DESIGN
no need to even collect this information if the persister is considered multi-table	WITHOUT_CLASSIFICATION	0.9743323749137137	WITHOUT_CLASSIFICATION	0.025667625086286346	DESIGN
Make sure that the persister is versioned	WITHOUT_CLASSIFICATION	0.9995054757948469	WITHOUT_CLASSIFICATION	4.945242051530814E-4	DESIGN
handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9983219079851806	WITHOUT_CLASSIFICATION	0.0016780920148194137	DESIGN
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999494290652662	WITHOUT_CLASSIFICATION	5.057093473380132E-5	DESIGN
--Commented out by Inspection (12/11/04 10:56 AM): int getWarningCount();	WITHOUT_CLASSIFICATION	0.9979324018742499	WITHOUT_CLASSIFICATION	0.002067598125750002	DESIGN
Alias references and identifiers use the same node class.	WITHOUT_CLASSIFICATION	0.9996435599796651	WITHOUT_CLASSIFICATION	3.5644002033487156E-4	DESIGN
switch	WITHOUT_CLASSIFICATION	0.999919476785243	WITHOUT_CLASSIFICATION	8.052321475706876E-5	DESIGN
make a new one	WITHOUT_CLASSIFICATION	0.9992679564412841	WITHOUT_CLASSIFICATION	7.320435587159625E-4	DESIGN
just do the regular thing if you can't find the ctor Your AST must have default ctor to use this.	WITHOUT_CLASSIFICATION	0.9955472428091344	WITHOUT_CLASSIFICATION	0.004452757190865476	DESIGN
Initialize SQL nodes here.	WITHOUT_CLASSIFICATION	0.9997818082168427	WITHOUT_CLASSIFICATION	2.1819178315719587E-4	DESIGN
semantic action processing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994885337868423	WITHOUT_CLASSIFICATION	5.114662131576527E-4	DESIGN
if template is null we just write the function out as it appears in the hql statement	WITHOUT_CLASSIFICATION	0.999778413098883	WITHOUT_CLASSIFICATION	2.2158690111702002E-4	DESIGN
this function has a template -> redirect output and catch the arguments	WITHOUT_CLASSIFICATION	0.9999128042174227	WITHOUT_CLASSIFICATION	8.71957825773987E-5	DESIGN
--- Inner classes (moved here from sql-gen.g) ---	WITHOUT_CLASSIFICATION	0.9953236679697332	WITHOUT_CLASSIFICATION	0.00467633203026693	DESIGN
check two "adjecent" nodes at the top of the from-clause tree	WITHOUT_CLASSIFICATION	0.9999585607513063	WITHOUT_CLASSIFICATION	4.143924869359712E-5	DESIGN
/	WITHOUT_CLASSIFICATION	0.9999296249981258	WITHOUT_CLASSIFICATION	7.03750018743201E-5	DESIGN
these are just two unrelated table references	WITHOUT_CLASSIFICATION	0.9995629784011485	WITHOUT_CLASSIFICATION	4.3702159885147546E-4	DESIGN
again, both should be FromElements	WITHOUT_CLASSIFICATION	0.9956788458736434	WITHOUT_CLASSIFICATION	0.004321154126356609	DESIGN
NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9996918064938826	WITHOUT_CLASSIFICATION	3.081935061174587E-4	DESIGN
right represents a joins originating from left; or both right and left reprersent joins originating from the same FromElement	WITHOUT_CLASSIFICATION	0.9958386973814061	WITHOUT_CLASSIFICATION	0.0041613026185939464	DESIGN
check a set of parent/child nodes in the from-clause tree to determine if a comma is required between them	WITHOUT_CLASSIFICATION	0.9996367602343674	WITHOUT_CLASSIFICATION	3.63239765632559E-4	DESIGN
right represents a joins originating from left...	WITHOUT_CLASSIFICATION	0.9924894405361078	WITHOUT_CLASSIFICATION	0.007510559463892268	DESIGN
all clear	WITHOUT_CLASSIFICATION	0.9999421018623211	WITHOUT_CLASSIFICATION	5.7898137678896435E-5	DESIGN
Ignore the token class name parameter, and use a specific token class.	WITHOUT_CLASSIFICATION	0.9993829570543546	WITHOUT_CLASSIFICATION	6.170429456453508E-4	DESIGN
overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9997536037525361	WITHOUT_CLASSIFICATION	2.4639624746386333E-4	DESIGN
overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9997536037525361	WITHOUT_CLASSIFICATION	2.4639624746386333E-4	DESIGN
remember that ordinal parameters numbers are 1-based!!!	WITHOUT_CLASSIFICATION	0.9979771969288853	WITHOUT_CLASSIFICATION	0.0020228030711147323	DESIGN
don't care about other param types here, just those explicitly user-defined...	WITHOUT_CLASSIFICATION	0.996115961683983	WITHOUT_CLASSIFICATION	0.003884038316017038	DESIGN
If the query is already compiled, skip the compilation.	WITHOUT_CLASSIFICATION	0.999936665556137	WITHOUT_CLASSIFICATION	6.333444386297124E-5	DESIGN
Remember the parameters for the compilation.	WITHOUT_CLASSIFICATION	0.9997064751732327	WITHOUT_CLASSIFICATION	2.93524826767233E-4	DESIGN
PHASE 1 : Parse the HQL into an AST.	WITHOUT_CLASSIFICATION	0.9989876137595384	WITHOUT_CLASSIFICATION	0.0010123862404616637	DESIGN
PHASE 2 : Analyze the HQL AST, and produce an SQL AST.	WITHOUT_CLASSIFICATION	0.9999680583991152	WITHOUT_CLASSIFICATION	3.1941600884818625E-5	DESIGN
PHASE 3 : Generate the SQL.	WITHOUT_CLASSIFICATION	0.9998681024876872	WITHOUT_CLASSIFICATION	1.3189751231281488E-4	DESIGN
we do not actually propogate ANTLRExceptions as a cause, so log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9915235550466619	WITHOUT_CLASSIFICATION	0.008476444953338089	DESIGN
we do not actually propogate ANTLRExceptions as a cause, so log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9915235550466619	WITHOUT_CLASSIFICATION	0.008476444953338089	DESIGN
only needed during compilation phase...	WITHOUT_CLASSIFICATION	0.9997351780267917	WITHOUT_CLASSIFICATION	2.6482197320829937E-4	DESIGN
Transform the tree.	WITHOUT_CLASSIFICATION	0.9999566267195652	WITHOUT_CLASSIFICATION	4.3373280434788475E-5	DESIGN
Parse the query string into an HQL AST.	WITHOUT_CLASSIFICATION	0.999526845052215	WITHOUT_CLASSIFICATION	4.731549477849676E-4	DESIGN
Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9998931378906843	WITHOUT_CLASSIFICATION	1.0686210931564495E-4	DESIGN
Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9998931378906843	WITHOUT_CLASSIFICATION	1.0686210931564495E-4	DESIGN
Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9998931378906843	WITHOUT_CLASSIFICATION	1.0686210931564495E-4	DESIGN
NOTE : ( max - 1 ) because first is zero-based while max is not...	WITHOUT_CLASSIFICATION	0.9976911666303934	WITHOUT_CLASSIFICATION	0.0023088333696065326	DESIGN
-- Package local methods for the QueryLoader delegate --	WITHOUT_CLASSIFICATION	0.9985674441288687	WITHOUT_CLASSIFICATION	0.0014325558711312848	DESIGN
If there are no collection fetches, then no further checks are needed	WITHOUT_CLASSIFICATION	0.9998756062424182	WITHOUT_CLASSIFICATION	1.2439375758183595E-4	DESIGN
A shallow query is ok (although technically there should be no fetching here...)	WITHOUT_CLASSIFICATION	0.9991015190334711	WITHOUT_CLASSIFICATION	8.984809665289107E-4	DESIGN
should be the first, but just to be safe...	WITHOUT_CLASSIFICATION	0.9980432994231754	WITHOUT_CLASSIFICATION	0.001956700576824684	DESIGN
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999494290652662	WITHOUT_CLASSIFICATION	5.057093473380132E-5	DESIGN
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999494290652662	WITHOUT_CLASSIFICATION	5.057093473380132E-5	DESIGN
Impl Note: allows multiple collection fetches as long as the entire fecthed graph still "points back" to a single root entity for return	WITHOUT_CLASSIFICATION	0.979694366136862	WITHOUT_CLASSIFICATION	0.02030563386313801	DESIGN
Otherwise, we have a non-scalar select with defined collection fetch(es). Make sure that there is only a single root entity in the return (no tuples)	WITHOUT_CLASSIFICATION	0.9996696037635892	WITHOUT_CLASSIFICATION	3.3039623641089374E-4	DESIGN
This is not strictly true. We actually just need to make sure that it is ordered by root-entity PK and that that order-by comes before any non-root-entity ordering...	WITHOUT_CLASSIFICATION	0.8267516358262877	WITHOUT_CLASSIFICATION	0.1732483641737123	DESIGN
paramTranslations = new ParameterTranslationsImpl( collectedParameterSpecifications );	WITHOUT_CLASSIFICATION	0.999892308997435	WITHOUT_CLASSIFICATION	1.0769100256503921E-4	DESIGN
we are already processing a dot-structure	WITHOUT_CLASSIFICATION	0.9976048208292712	WITHOUT_CLASSIFICATION	0.0023951791707288593	DESIGN
igndore it...	WITHOUT_CLASSIFICATION	0.9994984057750107	WITHOUT_CLASSIFICATION	5.015942249893526E-4	DESIGN
we are now at a new tree level	WITHOUT_CLASSIFICATION	0.9998519074760778	WITHOUT_CLASSIFICATION	1.480925239222117E-4	DESIGN
[jsd] The fix for HHH-558...	WITHOUT_CLASSIFICATION	0.9982910934962996	WITHOUT_CLASSIFICATION	0.0017089065037003148	DESIGN
If the token can tell us if it could be an identifier...	WITHOUT_CLASSIFICATION	0.9998474481197672	WITHOUT_CLASSIFICATION	1.5255188023273808E-4	DESIGN
... and the expected token type was an identifier, then:	WITHOUT_CLASSIFICATION	0.9984066399644468	WITHOUT_CLASSIFICATION	0.0015933600355532934	DESIGN
Use the token as an identifier.	WITHOUT_CLASSIFICATION	0.9998924659090828	WITHOUT_CLASSIFICATION	1.0753409091725939E-4	DESIGN
Add the token to the AST.	WITHOUT_CLASSIFICATION	0.9999624430412738	WITHOUT_CLASSIFICATION	3.75569587261425E-5	DESIGN
(NOT (EQ a b) ) => (NE a b)	WITHOUT_CLASSIFICATION	0.9998241012588092	WITHOUT_CLASSIFICATION	1.758987411907715E-4	DESIGN
(NOT (NE a b) ) => (EQ a b)	WITHOUT_CLASSIFICATION	0.9998241012588092	WITHOUT_CLASSIFICATION	1.758987411907715E-4	DESIGN
(NOT (LT a b) ) => (GE a b)	WITHOUT_CLASSIFICATION	0.9998241012588092	WITHOUT_CLASSIFICATION	1.758987411907715E-4	DESIGN
(NOT (GE a b) ) => (LT a b)	WITHOUT_CLASSIFICATION	0.9998241012588092	WITHOUT_CLASSIFICATION	1.758987411907715E-4	DESIGN
(NOT (LE a b) ) => (GT a b)	WITHOUT_CLASSIFICATION	0.9998241012588092	WITHOUT_CLASSIFICATION	1.758987411907715E-4	DESIGN
(NOT (LIKE a b) ) => (NOT_LIKE a b)	WITHOUT_CLASSIFICATION	0.9991598501463332	WITHOUT_CLASSIFICATION	8.401498536667946E-4	DESIGN
(NOT (NOT_LIKE a b) ) => (LIKE a b)	WITHOUT_CLASSIFICATION	0.9991598501463332	WITHOUT_CLASSIFICATION	8.401498536667946E-4	DESIGN
(NOT (IS_NOT_NULL a b) ) => (IS_NULL a b)	WITHOUT_CLASSIFICATION	0.9991598501463332	WITHOUT_CLASSIFICATION	8.401498536667946E-4	DESIGN
(NOT (BETWEEN a b) ) => (NOT_BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9991598501463332	WITHOUT_CLASSIFICATION	8.401498536667946E-4	DESIGN
Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.997831923288197	WITHOUT_CLASSIFICATION	0.002168076711802961	DESIGN
overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9997536037525361	WITHOUT_CLASSIFICATION	2.4639624746386333E-4	DESIGN
if if Otherwise, handle the error normally.	WITHOUT_CLASSIFICATION	0.999265959711964	WITHOUT_CLASSIFICATION	7.340402880361471E-4	DESIGN
(NOT (NOT_BETWEEN a b) ) => (BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9991598501463332	WITHOUT_CLASSIFICATION	8.401498536667946E-4	DESIGN
This can never happen because this rule will always eliminate the child NOT.case NOT:return x.getFirstChild(); (NOT (NOT x) ) => (x)	WITHOUT_CLASSIFICATION	0.9997524931614427	WITHOUT_CLASSIFICATION	2.475068385573398E-4	DESIGN
Just add a 'not' parent.	WITHOUT_CLASSIFICATION	0.9999622010249098	WITHOUT_CLASSIFICATION	3.779897509016571E-5	DESIGN
(EQ NULL b) => (IS_NULL b)	WITHOUT_CLASSIFICATION	0.9999251862321179	WITHOUT_CLASSIFICATION	7.48137678821454E-5	DESIGN
(EQ a NULL) => (IS_NULL a)	WITHOUT_CLASSIFICATION	0.9998602873344932	WITHOUT_CLASSIFICATION	1.3971266550692467E-4	DESIGN
NOTE: Because we're using ASTUtil.createParent(), the tree must be created from the bottom up. IS EMPTY x => (EXISTS (QUERY (SELECT_FROM (FROM x) ) ) )	WITHOUT_CLASSIFICATION	0.9995730422889573	WITHOUT_CLASSIFICATION	4.2695771104269835E-4	DESIGN
Add NOT if it's negated.	WITHOUT_CLASSIFICATION	0.9997021668627394	WITHOUT_CLASSIFICATION	2.978331372606227E-4	DESIGN
Create nodes that track line and column number.	WITHOUT_CLASSIFICATION	0.9999457201915538	WITHOUT_CLASSIFICATION	5.4279808446137705E-5	DESIGN
Case 1: Multi token keywords GROUP BY and ORDER BY The next token ( LT(2) ) should be 'by'... otherwise, this is just an ident.	WITHOUT_CLASSIFICATION	0.9845039809423191	WITHOUT_CLASSIFICATION	0.015496019057681061	DESIGN
Case 2: The current token is after FROM and before '.'.	WITHOUT_CLASSIFICATION	0.9997534114465556	WITHOUT_CLASSIFICATION	2.4658855344432987E-4	DESIGN
This handles HHH-354, where there is a strange property name in a where clause. If the lookahead contains a DOT then something that isn't an IDENT...	WITHOUT_CLASSIFICATION	0.9999869882196963	WITHOUT_CLASSIFICATION	1.3011780303711783E-5	DESIGN
See if the second lookahed token can be an identifier.	WITHOUT_CLASSIFICATION	0.9997318006414981	WITHOUT_CLASSIFICATION	2.681993585018572E-4	DESIGN
Set it!	WITHOUT_CLASSIFICATION	0.9998325456686581	WITHOUT_CLASSIFICATION	1.6745433134198053E-4	DESIGN
ignore	WITHOUT_CLASSIFICATION	0.9997087489104198	WITHOUT_CLASSIFICATION	2.912510895801591E-4	DESIGN
strip the " where "	WITHOUT_CLASSIFICATION	0.999965404049983	WITHOUT_CLASSIFICATION	3.4595950016980966E-5	DESIGN
Don't really know all the codes required to adequately decipher returned jdbc exceptions here. simply allow the failure to be eaten and the subsequent insert-selects/deletes should fail	WITHOUT_CLASSIFICATION	0.9984017596515435	WITHOUT_CLASSIFICATION	0.0015982403484564147	DESIGN
at the very least cleanup the data :)	WITHOUT_CLASSIFICATION	0.9990274648036962	WITHOUT_CLASSIFICATION	9.72535196303725E-4	DESIGN
First, save off the pertinent ids, as the return value	WITHOUT_CLASSIFICATION	0.9999697886421897	WITHOUT_CLASSIFICATION	3.0211357810315945E-5	DESIGN
jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9997740956179337	WITHOUT_CLASSIFICATION	2.2590438206634628E-4	DESIGN
jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9997740956179337	WITHOUT_CLASSIFICATION	2.2590438206634628E-4	DESIGN
Start performing the updates	WITHOUT_CLASSIFICATION	0.9999523721677973	WITHOUT_CLASSIFICATION	4.762783220272689E-5	DESIGN
First, save off the pertinent ids, saving the number of pertinent ids for return	WITHOUT_CLASSIFICATION	0.9999475805738011	WITHOUT_CLASSIFICATION	5.241942619901634E-5	DESIGN
Start performing the deletes	WITHOUT_CLASSIFICATION	0.999946174220427	WITHOUT_CLASSIFICATION	5.382577957303927E-5	DESIGN
otherwise, everything ok.	WITHOUT_CLASSIFICATION	0.9998518920247821	WITHOUT_CLASSIFICATION	1.481079752179163E-4	DESIGN
visit width-first, then depth	WITHOUT_CLASSIFICATION	0.9999125230207815	WITHOUT_CLASSIFICATION	8.74769792184412E-5	DESIGN
if the types report logical equivalence, return true...	WITHOUT_CLASSIFICATION	0.9987566186571974	WITHOUT_CLASSIFICATION	0.0012433813428025502	DESIGN
otherwise, perform a "deep equivalence" check...	WITHOUT_CLASSIFICATION	0.9958488418462248	WITHOUT_CLASSIFICATION	0.004151158153775155	DESIGN
If there is no WHERE node, make one.	WITHOUT_CLASSIFICATION	0.9996582759659202	WITHOUT_CLASSIFICATION	3.4172403407982816E-4	DESIGN
inject the WHERE after the parent	WITHOUT_CLASSIFICATION	0.9998291874669987	WITHOUT_CLASSIFICATION	1.708125330012503E-4	DESIGN
Never include subclasses for implied from elements.	WITHOUT_CLASSIFICATION	0.9989086400749004	WITHOUT_CLASSIFICATION	0.0010913599250995435	DESIGN
Moved here from SelectClause [jsd]	WITHOUT_CLASSIFICATION	0.9874767209636822	WITHOUT_CLASSIFICATION	0.012523279036317895	DESIGN
/	WITHOUT_CLASSIFICATION	0.9999296249981258	WITHOUT_CLASSIFICATION	7.03750018743201E-5	DESIGN
Use the table fromElement and the property name to get the array of column names.	WITHOUT_CLASSIFICATION	0.9999113108944444	WITHOUT_CLASSIFICATION	8.868910555552887E-5	DESIGN
Set the attributes of the property reference expression.	WITHOUT_CLASSIFICATION	0.9998731942912544	WITHOUT_CLASSIFICATION	1.2680570874558494E-4	DESIGN
If the uresolved property path isn't set yet, just use the property name.	WITHOUT_CLASSIFICATION	0.9999554620492188	WITHOUT_CLASSIFICATION	4.453795078112539E-5	DESIGN
The 'from element' that the property is in.	WITHOUT_CLASSIFICATION	0.9999243174486531	WITHOUT_CLASSIFICATION	7.56825513469101E-5	DESIGN
Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999521990504825	WITHOUT_CLASSIFICATION	4.7800949517458274E-5	DESIGN
Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999521990504825	WITHOUT_CLASSIFICATION	4.7800949517458274E-5	DESIGN
If this dot has already been resolved, stop now.	WITHOUT_CLASSIFICATION	0.9992461531690454	WITHOUT_CLASSIFICATION	7.538468309545965E-4	DESIGN
If there is no data type for this node, and we're at the end of the path (top most dot node), then this might be a Java constant.	WITHOUT_CLASSIFICATION	0.9412620256488314	WITHOUT_CLASSIFICATION	0.05873797435116852	DESIGN
The property is a collection...	WITHOUT_CLASSIFICATION	0.9996831740884831	WITHOUT_CLASSIFICATION	3.1682591151687453E-4	DESIGN
The property is a component...	WITHOUT_CLASSIFICATION	0.9999336949110778	WITHOUT_CLASSIFICATION	6.63050889222324E-5	DESIGN
The property is another class..	WITHOUT_CLASSIFICATION	0.9998588852566359	WITHOUT_CLASSIFICATION	1.411147433640247E-4	DESIGN
Otherwise, this is a primitive type.	WITHOUT_CLASSIFICATION	0.9985852347782702	WITHOUT_CLASSIFICATION	0.0014147652217297389	DESIGN
foo.bars.size (also handles deprecated stuff like foo.bars.maxelement for backwardness)	WITHOUT_CLASSIFICATION	0.9985108800691482	WITHOUT_CLASSIFICATION	0.001489119930851817	DESIGN
This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9985520516482329	WITHOUT_CLASSIFICATION	0.0014479483517670423	DESIGN
Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999535893072532	WITHOUT_CLASSIFICATION	4.641069274674562E-5	DESIGN
in non-select queries, the only time we should need to join is if we are in a subquery from clause	WITHOUT_CLASSIFICATION	0.9420311291800039	WITHOUT_CLASSIFICATION	0.057968870819996146	DESIGN
this is the regression style determination which matches the logic of the classic translator	WITHOUT_CLASSIFICATION	0.9998334384007367	WITHOUT_CLASSIFICATION	1.6656159926326674E-4	DESIGN
This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9985520516482329	WITHOUT_CLASSIFICATION	0.0014479483517670423	DESIGN
even though we might find a pre-existing element by join path, we may not be able to reuse it...	WITHOUT_CLASSIFICATION	0.9204727803233839	WITHOUT_CLASSIFICATION	0.07952721967661606	DESIGN
NOTE : addDuplicateAlias() already performs nullness checks on the alias.	WITHOUT_CLASSIFICATION	0.9997304028841223	WITHOUT_CLASSIFICATION	2.695971158777772E-4	DESIGN
if the from-clauses are the same, we can be a little more aggressive in terms of what we reuse	WITHOUT_CLASSIFICATION	0.9830211274177397	WITHOUT_CLASSIFICATION	0.01697887258226027	DESIGN
again, null != null here	WITHOUT_CLASSIFICATION	0.9993607660554406	WITHOUT_CLASSIFICATION	6.392339445595009E-4	DESIGN
If this is an implied join in a from element, then use the impled join type which is part of the tree parser's state (set by the gramamar actions).	WITHOUT_CLASSIFICATION	0.9964157140518557	WITHOUT_CLASSIFICATION	0.0035842859481442324	DESIGN
otherwise (subquery case) dont reuse the fromElement if we are processing the from-clause of the subquery	WITHOUT_CLASSIFICATION	0.9997131842986572	WITHOUT_CLASSIFICATION	2.868157013428262E-4	DESIGN
we know only the lhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999253465880424	WITHOUT_CLASSIFICATION	7.46534119575967E-5	DESIGN
the referenced node text is the special 'id'	WITHOUT_CLASSIFICATION	0.9999703139722308	WITHOUT_CLASSIFICATION	2.9686027769186514E-5	DESIGN
only the identifier property field name can be a reference to the associated entity's PK...	WITHOUT_CLASSIFICATION	0.999756152074979	WITHOUT_CLASSIFICATION	2.4384792502097654E-4	DESIGN
special shortcut for id properties, skip the join! this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9995689130196083	WITHOUT_CLASSIFICATION	4.310869803917553E-4	DESIGN
Append the new property name onto the unresolved path.	WITHOUT_CLASSIFICATION	0.9999387493306306	WITHOUT_CLASSIFICATION	6.125066936932079E-5	DESIGN
If the lhs is a collection, use CollectionPropertyMapping	WITHOUT_CLASSIFICATION	0.9997239648477863	WITHOUT_CLASSIFICATION	2.760351522137605E-4	DESIGN
Tell the destination fromElement to 'includeSubclasses'.	WITHOUT_CLASSIFICATION	0.9995139389781097	WITHOUT_CLASSIFICATION	4.860610218902789E-4	DESIGN
Use theta style (for regression) Move the node up, after the origin node.	WITHOUT_CLASSIFICATION	0.9972165886799578	WITHOUT_CLASSIFICATION	0.002783411320042258	DESIGN
Don't resolve the node again.	WITHOUT_CLASSIFICATION	0.9999763125471324	WITHOUT_CLASSIFICATION	2.3687452867626648E-5	DESIGN
for expected parameter type injection, we expect that the lhs represents some form of property ref and that the children of the in-list represent one-or-more params.	WITHOUT_CLASSIFICATION	0.918487899005435	WITHOUT_CLASSIFICATION	0.0815121009945649	DESIGN
we need to strip off the embedded parens so that sql-gen does not double these up	WITHOUT_CLASSIFICATION	0.9994172958088244	WITHOUT_CLASSIFICATION	5.827041911755445E-4	DESIGN
we have something like : "? [op] rhs"	WITHOUT_CLASSIFICATION	0.9997547630109226	WITHOUT_CLASSIFICATION	2.4523698907739385E-4	DESIGN
we have something like : "lhs [op] ?"	WITHOUT_CLASSIFICATION	0.9997547630109226	WITHOUT_CLASSIFICATION	2.4523698907739385E-4	DESIGN
we know only the rhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999253465880424	WITHOUT_CLASSIFICATION	7.46534119575967E-5	DESIGN
handle the (assumed) valid cases: #1 - the only valid datetime addition synatx is one or the other is a datetime (but not both)	WITHOUT_CLASSIFICATION	0.9973202017742363	WITHOUT_CLASSIFICATION	0.002679798225763721	DESIGN
one or the other needs to be a datetime for us to get into this method in the first place...	WITHOUT_CLASSIFICATION	0.7489115395905538	WITHOUT_CLASSIFICATION	0.2510884604094462	DESIGN
#3 - note that this is also true of "datetime - :param"...	WITHOUT_CLASSIFICATION	0.9322702106752468	WITHOUT_CLASSIFICATION	0.06772978932475324	DESIGN
#2	WITHOUT_CLASSIFICATION	0.9998752764512897	WITHOUT_CLASSIFICATION	1.2472354871031918E-4	DESIGN
Generate the inner join -- The elements need to be joined to the collection they are in.	WITHOUT_CLASSIFICATION	0.9968435373570794	WITHOUT_CLASSIFICATION	0.0031564626429206027	DESIGN
nothing to do	WITHOUT_CLASSIFICATION	0.9999729030225306	WITHOUT_CLASSIFICATION	2.7096977469433014E-5	DESIGN
The 'from element' that represents the elements of the collection.	WITHOUT_CLASSIFICATION	0.9999774258256076	WITHOUT_CLASSIFICATION	2.2574174392395653E-5	DESIGN
Add the condition to the join sequence that qualifies the indexed element.	WITHOUT_CLASSIFICATION	0.9997885709723352	WITHOUT_CLASSIFICATION	2.1142902766472306E-4	DESIGN
Sometimes use the element table alias, sometimes use the... umm... collection table alias (many to many)	WITHOUT_CLASSIFICATION	0.997399603621029	WITHOUT_CLASSIFICATION	0.0026003963789710096	DESIGN
Now, set the text for this node. It should be the element columns.	WITHOUT_CLASSIFICATION	0.9962982982471419	WITHOUT_CLASSIFICATION	0.003701701752858017	DESIGN
Get the function return value type, based on the type of the first argument.	WITHOUT_CLASSIFICATION	0.9998990988823877	WITHOUT_CLASSIFICATION	1.0090111761238914E-4	DESIGN
This will call initialize(tok)!	WITHOUT_CLASSIFICATION	0.9966687473162013	WITHOUT_CLASSIFICATION	0.003331252683798774	DESIGN
mutation depends on the types of nodes invloved...	WITHOUT_CLASSIFICATION	0.999844184816401	WITHOUT_CLASSIFICATION	1.5581518359902583E-4	DESIGN
"pass along" our initial embedded parameter node(s) to the first generated sql fragment so that it can be handled later for parameter binding...	WITHOUT_CLASSIFICATION	0.9992966998445898	WITHOUT_CLASSIFICATION	7.033001554102419E-4	DESIGN
logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9997348533884113	WITHOUT_CLASSIFICATION	2.651466115888146E-4	DESIGN
Generated select expressions are already resolved, nothing to do.	WITHOUT_CLASSIFICATION	0.9997233165182537	WITHOUT_CLASSIFICATION	2.7668348174633326E-4	DESIGN
The path may be a reference to an alias defined in the parent query.	WITHOUT_CLASSIFICATION	0.9996314610007503	WITHOUT_CLASSIFICATION	3.685389992496879E-4	DESIGN
The HQL class alias refers to the class name.	WITHOUT_CLASSIFICATION	0.9997824734061912	WITHOUT_CLASSIFICATION	2.1752659380872455E-4	DESIGN
Associate the table alias with the element.	WITHOUT_CLASSIFICATION	0.9997138136923392	WITHOUT_CLASSIFICATION	2.861863076607663E-4	DESIGN
try the parent FromClause...	WITHOUT_CLASSIFICATION	0.9999830786499181	WITHOUT_CLASSIFICATION	1.692135008182358E-5	DESIGN
Add the new node to the map so that we don't create it twice.	WITHOUT_CLASSIFICATION	0.9999107172980143	WITHOUT_CLASSIFICATION	8.928270198560996E-5	DESIGN
Make sure that all from elements registered with this FROM clause are actually in the AST.	WITHOUT_CLASSIFICATION	0.998576340321729	WITHOUT_CLASSIFICATION	0.0014236596782709384	DESIGN
Invoke setScalarColumnText on each constructor argument.	WITHOUT_CLASSIFICATION	0.9998372110759377	WITHOUT_CLASSIFICATION	1.627889240623678E-4	DESIGN
Collect the select expressions, skip the first child because it is the class name.	WITHOUT_CLASSIFICATION	0.9999921443855116	WITHOUT_CLASSIFICATION	7.855614488444153E-6	DESIGN
return an empty Type array	WITHOUT_CLASSIFICATION	0.9999063251759606	WITHOUT_CLASSIFICATION	9.367482403941246E-5	DESIGN
Constructors are always considered scalar results.	WITHOUT_CLASSIFICATION	0.9977294581113233	WITHOUT_CLASSIFICATION	0.002270541888676827	DESIGN
this is the exception returned by ReflectHelper.getConstructor() if it cannot locate an appropriate constructor	WITHOUT_CLASSIFICATION	0.9989134602042437	WITHOUT_CLASSIFICATION	0.0010865397957563713	DESIGN
if there is no order by, make one	WITHOUT_CLASSIFICATION	0.9989612102380642	WITHOUT_CLASSIFICATION	0.0010387897619357359	DESIGN
Find the WHERE; if there is no WHERE, find the FROM...	WITHOUT_CLASSIFICATION	0.9998109948914496	WITHOUT_CLASSIFICATION	1.89005108550378E-4	DESIGN
Now, inject the newly built ORDER BY into the tree	WITHOUT_CLASSIFICATION	0.9994367917064925	WITHOUT_CLASSIFICATION	5.632082935074518E-4	DESIGN
ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994002999657632	WITHOUT_CLASSIFICATION	5.997000342368315E-4	DESIGN
logic operators by definition resolve to boolean.	WITHOUT_CLASSIFICATION	0.9997348533884113	WITHOUT_CLASSIFICATION	2.651466115888146E-4	DESIGN
Render the identifier select fragment using the table alias.	WITHOUT_CLASSIFICATION	0.9998563022900935	WITHOUT_CLASSIFICATION	1.4369770990655265E-4	DESIGN
Class names in the FROM clause result in a JoinSequence (the old FromParser does this).	WITHOUT_CLASSIFICATION	0.9987176556147874	WITHOUT_CLASSIFICATION	0.0012823443852126614	DESIGN
For many-to-many joins, use the tablename from the queryable collection for the default text.	WITHOUT_CLASSIFICATION	0.9981785985302191	WITHOUT_CLASSIFICATION	0.0018214014697809386	DESIGN
Otherwise, use the property mapping.	WITHOUT_CLASSIFICATION	0.999890539266295	WITHOUT_CLASSIFICATION	1.0946073370491746E-4	DESIGN
should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9971895388714648	WITHOUT_CLASSIFICATION	0.0028104611285352226	DESIGN
If the property is a special collection property name, return a CollectionPropertyMapping.	WITHOUT_CLASSIFICATION	0.9998661367499494	WITHOUT_CLASSIFICATION	1.3386325005058559E-4	DESIGN
Collection of components.	WITHOUT_CLASSIFICATION	0.9998946617277621	WITHOUT_CLASSIFICATION	1.0533827223793738E-4	DESIGN
make sure the lhs is "assignable"...	WITHOUT_CLASSIFICATION	0.9990319783396808	WITHOUT_CLASSIFICATION	9.680216603190425E-4	DESIGN
false indicates to not generate parens around the assignment	WITHOUT_CLASSIFICATION	0.9997288041078336	WITHOUT_CLASSIFICATION	2.7119589216638613E-4	DESIGN
Register the FromElement with the FROM clause, now that we have the names and aliases.	WITHOUT_CLASSIFICATION	0.9999163501229413	WITHOUT_CLASSIFICATION	8.364987705862615E-5	DESIGN
currently allowed...	WITHOUT_CLASSIFICATION	0.9998734655309628	WITHOUT_CLASSIFICATION	1.265344690372706E-4	DESIGN
HHH-276 : implied joins in a subselect where clause - The destination needs to be added to the destination's from clause. Not sure if this is will fix everything, but it works.	WITHOUT_CLASSIFICATION	0.9284362329024929	WITHOUT_CLASSIFICATION	0.07156376709750713	DESIGN
return classAlias == null ? className : classAlias;	WITHOUT_CLASSIFICATION	0.9962299329816353	WITHOUT_CLASSIFICATION	0.003770067018364829	DESIGN
This is an explicit FROM element.	WITHOUT_CLASSIFICATION	0.986382884235967	WITHOUT_CLASSIFICATION	0.013617115764032923	DESIGN
ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994002999657632	WITHOUT_CLASSIFICATION	5.997000342368315E-4	DESIGN
Fetch can't be used with scroll() or iterate().	WITHOUT_CLASSIFICATION	0.9976146702847567	WITHOUT_CLASSIFICATION	0.0023853297152433917	DESIGN
If it's not implied or it is implied and it's a many to many join where the target wasn't found.	WITHOUT_CLASSIFICATION	0.9999674835568385	WITHOUT_CLASSIFICATION	3.2516443161393045E-5	DESIGN
Since this is an explicit FROM element, it can't be implied in the FROM clause.	WITHOUT_CLASSIFICATION	0.9955112481227504	WITHOUT_CLASSIFICATION	0.004488751877249555	DESIGN
Do nothing, eplicit from elements are always in the projection list.	WITHOUT_CLASSIFICATION	0.999580463851511	WITHOUT_CLASSIFICATION	4.195361484890673E-4	DESIGN
propertyName refers to something like collection.size...	WITHOUT_CLASSIFICATION	0.99960462570707	WITHOUT_CLASSIFICATION	3.9537429293008203E-4	DESIGN
property name is a sub-path of a component...	WITHOUT_CLASSIFICATION	0.9995459497470788	WITHOUT_CLASSIFICATION	4.5405025292111103E-4	DESIGN
Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999535893072532	WITHOUT_CLASSIFICATION	4.641069274674562E-5	DESIGN
nothing to do; even if the operand is a parameter, no way we could infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9905185345916154	WITHOUT_CLASSIFICATION	0.009481465408384607	DESIGN
logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9997348533884113	WITHOUT_CLASSIFICATION	2.651466115888146E-4	DESIGN
DotNode uses null here...	WITHOUT_CLASSIFICATION	0.9991983900856007	WITHOUT_CLASSIFICATION	8.016099143993051E-4	DESIGN
We represent a from-clause alias	WITHOUT_CLASSIFICATION	0.9977784807732472	WITHOUT_CLASSIFICATION	0.00222151922675279	DESIGN
we are the LHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9993944285741059	WITHOUT_CLASSIFICATION	6.055714258941322E-4	DESIGN
we are the RHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9992438570466563	WITHOUT_CLASSIFICATION	7.56142953343773E-4	DESIGN
we represent a naked (simple) prop-ref	WITHOUT_CLASSIFICATION	0.9945697959399962	WITHOUT_CLASSIFICATION	0.00543020406000377	DESIGN
EARLY EXIT!!! return so the resolve call explicitly coming from DotNode can resolve this...	WITHOUT_CLASSIFICATION	0.9998466602597031	WITHOUT_CLASSIFICATION	1.5333974029678503E-4	DESIGN
assume this ident's text does not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9991021185937795	WITHOUT_CLASSIFICATION	8.978814062204165E-4	DESIGN
just ignore it for now, it'll get resolved later...	WITHOUT_CLASSIFICATION	0.9975078912508617	WITHOUT_CLASSIFICATION	0.002492108749138202	DESIGN
This is not actually a constant, but a reference to FROM element.	WITHOUT_CLASSIFICATION	0.889914021660127	WITHOUT_CLASSIFICATION	0.11008597833987298	DESIGN
check to see if our "propPath" actually represents a property on the persister	WITHOUT_CLASSIFICATION	0.9995360932233698	WITHOUT_CLASSIFICATION	4.6390677663016414E-4	DESIGN
these pieces are needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9974075870236467	WITHOUT_CLASSIFICATION	0.0025924129763531855	DESIGN
used to set the type of the parent dot node	WITHOUT_CLASSIFICATION	0.9989839970305701	WITHOUT_CLASSIFICATION	0.0010160029694299439	DESIGN
assume we do not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9993459953334313	WITHOUT_CLASSIFICATION	6.54004666568819E-4	DESIGN
assume we do not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9993459953334313	WITHOUT_CLASSIFICATION	6.54004666568819E-4	DESIGN
naked property-refs cannot be used with an aliased from element	WITHOUT_CLASSIFICATION	0.9980983428439933	WITHOUT_CLASSIFICATION	0.001901657156006684	DESIGN
this piece is needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9841798818758534	WITHOUT_CLASSIFICATION	0.01582011812414655	DESIGN
do not over-write the column text, as that has already been "rendered" during resolve	WITHOUT_CLASSIFICATION	0.9999308965116562	WITHOUT_CLASSIFICATION	6.910348834383938E-5	DESIGN
for some reason the antlr.CommonAST initialization routines force this method to get called twice. The first time with an empty string	WITHOUT_CLASSIFICATION	0.9989136677029897	WITHOUT_CLASSIFICATION	0.001086332297010286	DESIGN
Look up class name using the first identifier in the path.	WITHOUT_CLASSIFICATION	0.9999429194352684	WITHOUT_CLASSIFICATION	5.7080564731673204E-5	DESIGN
Add to the query spaces.	WITHOUT_CLASSIFICATION	0.9999616275382454	WITHOUT_CLASSIFICATION	3.837246175472205E-5	DESIGN
If the from element isn't in the same clause, create a new from element.	WITHOUT_CLASSIFICATION	0.9979236099342846	WITHOUT_CLASSIFICATION	0.002076390065715368	DESIGN
This is the root level node. Generate an explicit from clause at the root.	WITHOUT_CLASSIFICATION	0.9905751185730253	WITHOUT_CLASSIFICATION	0.009424881426974663	DESIGN
Correlated subqueries create 'special' implied from nodes because correlated subselects can't use an ANSI-style join	WITHOUT_CLASSIFICATION	0.9997109438689439	WITHOUT_CLASSIFICATION	2.8905613105605137E-4	DESIGN
super-duper-classic-parser-regression-testing-mojo-magic...	WITHOUT_CLASSIFICATION	0.9992564144695602	WITHOUT_CLASSIFICATION	7.435855304398626E-4	DESIGN
A collection of entities...	WITHOUT_CLASSIFICATION	0.999501626387451	WITHOUT_CLASSIFICATION	4.983736125489038E-4	DESIGN
A collection of components...	WITHOUT_CLASSIFICATION	0.999501626387451	WITHOUT_CLASSIFICATION	4.983736125489038E-4	DESIGN
A collection of scalar elements...	WITHOUT_CLASSIFICATION	0.9976225005668342	WITHOUT_CLASSIFICATION	0.002377499433165701	DESIGN
according to both the ANSI-SQL and EJB3 specs, trim can either take exactly one parameter or a variable number of parameters between 1 and 4. from the SQL spec: <trim function> ::= TRIM <left paren> <trim operands> <right paren> <trim operands> ::= [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> <trim specification> ::= LEADING | TRAILING | BOTH If only <trim specification> is omitted, BOTH is assumed; if <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.999180016942898	WITHOUT_CLASSIFICATION	8.199830571019403E-4	DESIGN
Don't include sub-classes for implied collection joins or subquery joins.	WITHOUT_CLASSIFICATION	0.9937039209821449	WITHOUT_CLASSIFICATION	0.006296079017855183	DESIGN
Treat explict from elements in sub-queries properly.	WITHOUT_CLASSIFICATION	0.9994536562032654	WITHOUT_CLASSIFICATION	5.463437967346018E-4	DESIGN
( implied && DotNode.useThetaStyleImplicitJoins ) ) {	WITHOUT_CLASSIFICATION	0.9989448270407173	WITHOUT_CLASSIFICATION	0.0010551729592826425	DESIGN
the "root from-element" in correlated subqueries do need this piece	WITHOUT_CLASSIFICATION	0.9463581104107113	WITHOUT_CLASSIFICATION	0.05364188958928876	DESIGN
Create the FROM element for the target (the elements of the collection).	WITHOUT_CLASSIFICATION	0.9999726850731536	WITHOUT_CLASSIFICATION	2.7314926846391357E-5	DESIGN
If the join is implied, then don't include sub-classes on the element.	WITHOUT_CLASSIFICATION	0.9997244305679674	WITHOUT_CLASSIFICATION	2.755694320325554E-4	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994296671094893	WITHOUT_CLASSIFICATION	5.703328905106488E-4	DESIGN
The associated entity is implied, but it must be included in the FROM. The collection alias is the role.	WITHOUT_CLASSIFICATION	0.9886041971999714	WITHOUT_CLASSIFICATION	0.011395802800028545	DESIGN
Tag this node as a JOIN. Don't include subclasses in the join. This is a clollection join.	WITHOUT_CLASSIFICATION	0.9948538844449499	WITHOUT_CLASSIFICATION	0.005146115555050052	DESIGN
Get the class name of the associated entity.	WITHOUT_CLASSIFICATION	0.9999617752063298	WITHOUT_CLASSIFICATION	3.8224793670166655E-5	DESIGN
origin, path, implied, columns, classAlias,	WITHOUT_CLASSIFICATION	0.9993350898312736	WITHOUT_CLASSIFICATION	6.649101687264861E-4	DESIGN
implied	WITHOUT_CLASSIFICATION	0.9998680402420813	WITHOUT_CLASSIFICATION	1.3195975791871172E-4	DESIGN
For implied many-to-many, just add the end join.	WITHOUT_CLASSIFICATION	0.9999013139722107	WITHOUT_CLASSIFICATION	9.868602778925183E-5	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994296671094893	WITHOUT_CLASSIFICATION	5.703328905106488E-4	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994296671094893	WITHOUT_CLASSIFICATION	5.703328905106488E-4	DESIGN
the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.999694058636679	WITHOUT_CLASSIFICATION	3.059413633208886E-4	DESIGN
This causes the factory to instantiate the desired class.	WITHOUT_CLASSIFICATION	0.9913020606362778	WITHOUT_CLASSIFICATION	0.008697939363722153	DESIGN
private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.999847894746759	WITHOUT_CLASSIFICATION	1.5210525324100654E-4	DESIGN
Frontbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9988569914053403	WITHOUT_CLASSIFICATION	0.0011430085946596133	DESIGN
The types represented in the SQL result set. @return The types represented in the SQL result set.	WITHOUT_CLASSIFICATION	0.9996501501810237	WITHOUT_CLASSIFICATION	3.4984981897633825E-4	DESIGN
public Type[] getSqlResultTypes() {return sqlResultTypes;}	WITHOUT_CLASSIFICATION	0.9984251802080728	WITHOUT_CLASSIFICATION	0.0015748197919272509	DESIGN
First, collect all of the select expressions. NOTE: This must be done before invoking setScalarColumnText() because setScalarColumnText() changes the AST!!!	WITHOUT_CLASSIFICATION	0.9987279672294734	WITHOUT_CLASSIFICATION	0.0012720327705265872	DESIGN
First allow the actual type to control the return value. (the actual underlying sqltype could actually be different)	WITHOUT_CLASSIFICATION	0.9700326529237496	WITHOUT_CLASSIFICATION	0.029967347076250317	DESIGN
sqlResultTypeList.addAll( constructorArgumentTypeList );	WITHOUT_CLASSIFICATION	0.9992564144695602	WITHOUT_CLASSIFICATION	7.435855304398626E-4	DESIGN
If the data type is not an association type, it could not have been in the FROM clause.	WITHOUT_CLASSIFICATION	0.9998338586585109	WITHOUT_CLASSIFICATION	1.661413414891284E-4	DESIGN
sqlResultTypeList.add( type );	WITHOUT_CLASSIFICATION	0.9995983911082575	WITHOUT_CLASSIFICATION	4.016088917424822E-4	DESIGN
Always add the type to the return type list.	WITHOUT_CLASSIFICATION	0.9997962624668918	WITHOUT_CLASSIFICATION	2.0373753310823866E-4	DESIGN
add the fetched entities	WITHOUT_CLASSIFICATION	0.9999894023629776	WITHOUT_CLASSIFICATION	1.0597637022423169E-5	DESIGN
Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9995191116234572	WITHOUT_CLASSIFICATION	4.808883765427257E-4	DESIGN
function support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9989567598506002	WITHOUT_CLASSIFICATION	0.001043240149399808	DESIGN
If there are any scalars (non-entities) selected, render the select column aliases.	WITHOUT_CLASSIFICATION	0.9999786036902527	WITHOUT_CLASSIFICATION	2.1396309747290862E-5	DESIGN
sqlResultTypeList,	WITHOUT_CLASSIFICATION	0.9998740958691271	WITHOUT_CLASSIFICATION	1.259041308727615E-4	DESIGN
ArrayList sqlResultTypeList,	WITHOUT_CLASSIFICATION	0.999860677517679	WITHOUT_CLASSIFICATION	1.3932248232086794E-4	DESIGN
sqlResultTypes = ( Type[] ) sqlResultTypeList.toArray( new Type[sqlResultTypeList.size()] );	WITHOUT_CLASSIFICATION	0.9998294718890406	WITHOUT_CLASSIFICATION	1.7052811095933664E-4	DESIGN
lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9962786522480384	WITHOUT_CLASSIFICATION	0.003721347751961752	DESIGN
TODO:	WITHOUT_CLASSIFICATION	0.774086667349533	WITHOUT_CLASSIFICATION	0.22591333265046692	DESIGN
Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.999816046316911	WITHOUT_CLASSIFICATION	1.839536830888872E-4	DESIGN
Generate an 2d array of column names, the first dimension is parallel with the return types array. The second dimension is the list of column names for each type.	WITHOUT_CLASSIFICATION	0.9999941010343948	WITHOUT_CLASSIFICATION	5.898965605186284E-6	DESIGN
Generate the select expression.	WITHOUT_CLASSIFICATION	0.9997425710279126	WITHOUT_CLASSIFICATION	2.574289720873868E-4	DESIGN
union subclass support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9977694786563995	WITHOUT_CLASSIFICATION	0.0022305213436005426	DESIGN
Skip 'DISTINCT' and 'ALL', so we return the first expression node.	WITHOUT_CLASSIFICATION	0.999876817299958	WITHOUT_CLASSIFICATION	1.2318270004186744E-4	DESIGN
Create SQL_TOKEN nodes for the columns.	WITHOUT_CLASSIFICATION	0.9997755745458924	WITHOUT_CLASSIFICATION	2.244254541076079E-4	DESIGN
Generate the property select tokens.	WITHOUT_CLASSIFICATION	0.9999203613855769	WITHOUT_CLASSIFICATION	7.963861442309308E-5	DESIGN
Get the function name node.	WITHOUT_CLASSIFICATION	0.9999930069581608	WITHOUT_CLASSIFICATION	6.993041839150571E-6	DESIGN
Method expressions in a SELECT should always be considered scalar.	WITHOUT_CLASSIFICATION	0.9701328391635674	WITHOUT_CLASSIFICATION	0.029867160836432677	DESIGN
If this is 'elements' then create a new FROM element.	WITHOUT_CLASSIFICATION	0.9968817414888534	WITHOUT_CLASSIFICATION	0.0031182585111465388	DESIGN
Not elements(x)	WITHOUT_CLASSIFICATION	0.999908276983982	WITHOUT_CLASSIFICATION	9.172301601792396E-5	DESIGN
Dialect function	WITHOUT_CLASSIFICATION	0.9999519375756228	WITHOUT_CLASSIFICATION	4.8062424377189655E-5	DESIGN
Collection 'property function'	WITHOUT_CLASSIFICATION	0.999855408808752	WITHOUT_CLASSIFICATION	1.4459119124794287E-4	DESIGN
If the constant is an IDENT, figure out what it means...	WITHOUT_CLASSIFICATION	0.9995703602612953	WITHOUT_CLASSIFICATION	4.2963973870466596E-4	DESIGN
IDENT is a class alias in the FROM.	WITHOUT_CLASSIFICATION	0.9992879789505926	WITHOUT_CLASSIFICATION	7.12021049407268E-4	DESIGN
Resolve to an identity column.	WITHOUT_CLASSIFICATION	0.9997081614028069	WITHOUT_CLASSIFICATION	2.9183859719306794E-4	DESIGN
Otherwise, it's a literal.	WITHOUT_CLASSIFICATION	0.9994317747575763	WITHOUT_CLASSIFICATION	5.682252424237632E-4	DESIGN
the name of an entity class	WITHOUT_CLASSIFICATION	0.9999790155867978	WITHOUT_CLASSIFICATION	2.0984413202247718E-5	DESIGN
the class discriminator value	WITHOUT_CLASSIFICATION	0.9999700371995455	WITHOUT_CLASSIFICATION	2.9962800454564955E-5	DESIGN
Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999805860050509	WITHOUT_CLASSIFICATION	1.9413994949062953E-5	DESIGN
Add a space before the display text.	WITHOUT_CLASSIFICATION	0.9999786199402202	WITHOUT_CLASSIFICATION	2.1380059779844325E-5	DESIGN
Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9996994668706958	WITHOUT_CLASSIFICATION	3.005331293042498E-4	DESIGN
child == parent.getFirstChild()	WITHOUT_CLASSIFICATION	0.9999256394843343	WITHOUT_CLASSIFICATION	7.436051566567382E-5	DESIGN
Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9996994668706958	WITHOUT_CLASSIFICATION	3.005331293042498E-4	DESIGN
Filter conditions need to be inserted before the HQL where condition and the theta join node. This is because org.hibernate.loader.Loader binds the filter parameters first, then it binds all the HQL query parameters, see org.hibernate.loader.Loader.processFilterParameters().	WITHOUT_CLASSIFICATION	0.9975386706425017	WITHOUT_CLASSIFICATION	0.0024613293574982506	DESIGN
Put the FILTERS node before the HQL condition and theta joins	WITHOUT_CLASSIFICATION	0.9998991783828588	WITHOUT_CLASSIFICATION	1.0082161714122655E-4	DESIGN
add the current fragment to the FILTERS node	WITHOUT_CLASSIFICATION	0.9999492151963499	WITHOUT_CLASSIFICATION	5.078480365017007E-5	DESIGN
Create a new THETA_JOINS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9998615894638632	WITHOUT_CLASSIFICATION	1.3841053613686046E-4	DESIGN
Put the THETA_JOINS node before the HQL condition, after the filters.	WITHOUT_CLASSIFICATION	0.999939899088904	WITHOUT_CLASSIFICATION	6.010091109592501E-5	DESIGN
add the current fragment to the THETA_JOINS node	WITHOUT_CLASSIFICATION	0.9999492151963499	WITHOUT_CLASSIFICATION	5.078480365017007E-5	DESIGN
First, try to get the persister using the given name directly.	WITHOUT_CLASSIFICATION	0.9999285516356734	WITHOUT_CLASSIFICATION	7.144836432667398E-5	DESIGN
unable to locate it using this name	WITHOUT_CLASSIFICATION	0.9969679118256345	WITHOUT_CLASSIFICATION	0.003032088174365628	DESIGN
If that didn't work, try using the 'import' name.	WITHOUT_CLASSIFICATION	0.9999320678657043	WITHOUT_CLASSIFICATION	6.793213429575075E-5	DESIGN
Implicit joins use theta style (WHERE pk = fk), explicit joins use JOIN (after from)	WITHOUT_CLASSIFICATION	0.999756573028875	WITHOUT_CLASSIFICATION	2.4342697112499187E-4	DESIGN
locate the registered function by the given name	WITHOUT_CLASSIFICATION	0.9999569920699517	WITHOUT_CLASSIFICATION	4.300793004833827E-5	DESIGN
determine the type of the first argument...	WITHOUT_CLASSIFICATION	0.9992928159762018	WITHOUT_CLASSIFICATION	7.071840237981961E-4	DESIGN
Use the DOT node to emit the first column name. Create the column names, folled by the column aliases.	WITHOUT_CLASSIFICATION	0.9995597897330224	WITHOUT_CLASSIFICATION	4.4021026697759424E-4	DESIGN
Note: this simply constructs a "raw" SQL_TOKEN representing the where fragment and injects this into the tree. This "works"; however it is probably not the best long-term solution. At some point we probably want to apply an additional grammar to properly tokenize this where fragment into constituent parts focused on the operators embedded within the fragment.	WITHOUT_CLASSIFICATION	0.819612785112102	DESIGN	0.1803872148878981	WITHOUT_CLASSIFICATION
Append the text of the current node.	WITHOUT_CLASSIFICATION	0.9999344078667372	WITHOUT_CLASSIFICATION	6.559213326277787E-5	DESIGN
If the node has a first child, recurse into the first child.	WITHOUT_CLASSIFICATION	0.9996992741160993	WITHOUT_CLASSIFICATION	3.007258839006667E-4	DESIGN
If there is a second child (RHS), recurse into that child.	WITHOUT_CLASSIFICATION	0.9999150639971507	WITHOUT_CLASSIFICATION	8.49360028492526E-5	DESIGN
Iterate through the alias,JoinSequence pairs and generate SQL token nodes.	WITHOUT_CLASSIFICATION	0.999836036029393	WITHOUT_CLASSIFICATION	1.6396397060693872E-4	DESIGN
If the from element represents a JOIN_FRAGMENT and it is a theta-style join, convert its type from JOIN_FRAGMENT to FROM_FRAGMENT	WITHOUT_CLASSIFICATION	0.997662965583284	WITHOUT_CLASSIFICATION	0.0023370344167159955	DESIGN
this is used during SqlGenerator processing	WITHOUT_CLASSIFICATION	0.9958523934280464	WITHOUT_CLASSIFICATION	0.00414760657195355	DESIGN
If there is a FROM fragment and the FROM element is an explicit, then add the from part.	WITHOUT_CLASSIFICATION	0.9999718717640105	WITHOUT_CLASSIFICATION	2.8128235989612006E-5	DESIGN
&& StringHelper.isNotEmpty( frag )	WITHOUT_CLASSIFICATION	0.9989552620964224	WITHOUT_CLASSIFICATION	0.0010447379035775323	DESIGN
The FROM fragment will probably begin with ', '. Remove this if it is present.	WITHOUT_CLASSIFICATION	0.9764279025816035	WITHOUT_CLASSIFICATION	0.023572097418396474	DESIGN
This uses a PathExpressionParser but notice that compound paths are not valid, only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9416921459156671	WITHOUT_CLASSIFICATION	0.05830785408433293	DESIGN
SELECT p FROM p IN CLASS eg.Person ORDER BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9981450111570244	WITHOUT_CLASSIFICATION	0.0018549888429756384	DESIGN
The reason for this is SQL doesn't let you sort by an expression you are not returning in the result set.	WITHOUT_CLASSIFICATION	0.9988749437669735	WITHOUT_CLASSIFICATION	0.0011250562330265548	DESIGN
named query parameter	WITHOUT_CLASSIFICATION	0.9993223337991161	WITHOUT_CLASSIFICATION	6.776662008840304E-4	DESIGN
default mode	WITHOUT_CLASSIFICATION	0.9997157085553057	WITHOUT_CLASSIFICATION	2.8429144469433983E-4	DESIGN
QueryJoinFragment join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999165109036752	WITHOUT_CLASSIFICATION	8.348909632473253E-5	DESIGN
reset the dotcount (but not the path) after reset!	WITHOUT_CLASSIFICATION	0.9998617222969379	WITHOUT_CLASSIFICATION	1.382777030620748E-4	DESIGN
after reset!	WITHOUT_CLASSIFICATION	0.9999075908835976	WITHOUT_CLASSIFICATION	9.240911640234221E-5	DESIGN
we don't need to worry about any condition in the ON clause here (toFromFragmentString), since anything in the ON condition is already applied to the whole query	WITHOUT_CLASSIFICATION	0.9206245791435462	WITHOUT_CLASSIFICATION	0.07937542085645374	DESIGN
bit_length feels a bit broken to me. We have to cast to char in order to pass when a numeric value is supplied. But of course the answers given will be wildly different for these two datatypes. 1234.5678 will be 9 bytes as a char string but will be 8 or 16 bytes as a true numeric. Jay Nance 2006-09-22	WITHOUT_CLASSIFICATION	0.9999776951882925	WITHOUT_CLASSIFICATION	2.2304811707474414E-5	DESIGN
dotcount>=2	WITHOUT_CLASSIFICATION	0.9998740958691271	WITHOUT_CLASSIFICATION	1.259041308727615E-4	DESIGN
Do the corresponding RHS	WITHOUT_CLASSIFICATION	0.9998982543819857	WITHOUT_CLASSIFICATION	1.0174561801432645E-4	DESIGN
if its "id"	WITHOUT_CLASSIFICATION	0.9998856118808712	WITHOUT_CLASSIFICATION	1.1438811912870854E-4	DESIGN
or its the id property name	WITHOUT_CLASSIFICATION	0.9999837614755165	WITHOUT_CLASSIFICATION	1.623852448352984E-5	DESIGN
join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999165109036752	WITHOUT_CLASSIFICATION	8.348909632473253E-5	DESIGN
important!!	WITHOUT_CLASSIFICATION	0.9998740958691271	WITHOUT_CLASSIFICATION	1.259041308727615E-4	DESIGN
String[] keyCols = collPersister.getKeyColumnNames();	WITHOUT_CLASSIFICATION	0.9999144572124471	WITHOUT_CLASSIFICATION	8.554278755301712E-5	DESIGN
an association	WITHOUT_CLASSIFICATION	0.9999173081027865	WITHOUT_CLASSIFICATION	8.269189721349272E-5	DESIGN
allow index() function:	WITHOUT_CLASSIFICATION	0.9996742470888867	WITHOUT_CLASSIFICATION	3.25752911113283E-4	DESIGN
here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9829441539556318	WITHOUT_CLASSIFICATION	0.017055846044368175	DESIGN
The reason for this is SQL doesn't let you sort by an expression you are not returning in the result set.	WITHOUT_CLASSIFICATION	0.9988749437669735	WITHOUT_CLASSIFICATION	0.0011250562330265548	DESIGN
many-to-many	WITHOUT_CLASSIFICATION	0.9998740958691271	WITHOUT_CLASSIFICATION	1.259041308727615E-4	DESIGN
collections of values	WITHOUT_CLASSIFICATION	0.9999836273796573	WITHOUT_CLASSIFICATION	1.6372620342632065E-5	DESIGN
opening paren in new Foo ( ... )	WITHOUT_CLASSIFICATION	0.9965195010089171	WITHOUT_CLASSIFICATION	0.0034804989910828315	DESIGN
if we are inside a new Result(), but not inside a nested function	WITHOUT_CLASSIFICATION	0.9971723477183597	WITHOUT_CLASSIFICATION	0.002827652281640328	DESIGN
special case	WITHOUT_CLASSIFICATION	0.9999879253588275	WITHOUT_CLASSIFICATION	1.207464117237407E-5	DESIGN
the name of an SQL function	WITHOUT_CLASSIFICATION	0.9999877526416419	WITHOUT_CLASSIFICATION	1.2247358358235742E-5	DESIGN
null child could occur for no from clause in a filter	WITHOUT_CLASSIFICATION	0.9974431256437012	WITHOUT_CLASSIFICATION	0.002556874356298727	DESIGN
this is basically a copy/paste of OrderByParser ... might be worth refactoring	WITHOUT_CLASSIFICATION	0.6623985090990936	WITHOUT_CLASSIFICATION	0.3376014909009063	DESIGN
SELECT p FROM p IN CLASS eg.Person GROUP BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9976430564342424	WITHOUT_CLASSIFICATION	0.0023569435657575743	DESIGN
return aliases not supported in classic translator!	WITHOUT_CLASSIFICATION	0.9996186096029513	WITHOUT_CLASSIFICATION	3.813903970485983E-4	DESIGN
register collection role	WITHOUT_CLASSIFICATION	0.9989457220522291	WITHOUT_CLASSIFICATION	0.0010542779477708218	DESIGN
The keyword used to specify an identity column, if identity column key generation is supported.	WITHOUT_CLASSIFICATION	0.9965312226503601	WITHOUT_CLASSIFICATION	0.0034687773496397825	DESIGN
.getElementPropertyMapping();	WITHOUT_CLASSIFICATION	0.9998443304314125	WITHOUT_CLASSIFICATION	1.5566956858758022E-4	DESIGN
crossJoins.add(name);	WITHOUT_CLASSIFICATION	0.9998443304314125	WITHOUT_CLASSIFICATION	1.5566956858758022E-4	DESIGN
ie no select clause in HQL	WITHOUT_CLASSIFICATION	0.9998799576839434	WITHOUT_CLASSIFICATION	1.2004231605647624E-4	DESIGN
initialize the Set of queried identifier spaces (ie. tables)	WITHOUT_CLASSIFICATION	0.9996067302083813	WITHOUT_CLASSIFICATION	3.932697916186353E-4	DESIGN
ie. no select clause	WITHOUT_CLASSIFICATION	0.9999302620524358	WITHOUT_CLASSIFICATION	6.973794756411829E-5	DESIGN
there _was_ a select clause	WITHOUT_CLASSIFICATION	0.9999190003393621	WITHOUT_CLASSIFICATION	8.099966063790402E-5	DESIGN
return the concrete type, or the underlying type if a concrete type was not specified	WITHOUT_CLASSIFICATION	0.9994066355892912	WITHOUT_CLASSIFICATION	5.933644107087668E-4	DESIGN
many-to-many	WITHOUT_CLASSIFICATION	0.9998740958691271	WITHOUT_CLASSIFICATION	1.259041308727615E-4	DESIGN
q.addCollection(collectionName, collectionRole);	WITHOUT_CLASSIFICATION	0.9992564144695602	WITHOUT_CLASSIFICATION	7.435855304398626E-4	DESIGN
classic parser does not support bulk manipulation statements	WITHOUT_CLASSIFICATION	0.9770008954780224	WITHOUT_CLASSIFICATION	0.022999104521977592	DESIGN
can't cache this stuff either (per-invocation)	WITHOUT_CLASSIFICATION	0.9981368922245014	WITHOUT_CLASSIFICATION	0.0018631077754986518	DESIGN
unfortunately this stuff can't be cached because it is per-invocation, not constant for the QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9983040498901695	WITHOUT_CLASSIFICATION	0.001695950109830468	DESIGN
This is the legacy behaviour for HQL queries...	WITHOUT_CLASSIFICATION	0.9901580776132601	WITHOUT_CLASSIFICATION	0.009841922386739909	DESIGN
not known!	WITHOUT_CLASSIFICATION	0.9998792307794983	WITHOUT_CLASSIFICATION	1.2076922050172033E-4	DESIGN
not known!	WITHOUT_CLASSIFICATION	0.9998792307794983	WITHOUT_CLASSIFICATION	1.2076922050172033E-4	DESIGN
we have the form: trim(trimSource) so we trim leading and trailing spaces EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9998949572945731	WITHOUT_CLASSIFICATION	1.0504270542689752E-4	DESIGN
not known!	WITHOUT_CLASSIFICATION	0.9998792307794983	WITHOUT_CLASSIFICATION	1.2076922050172033E-4	DESIGN
not known!	WITHOUT_CLASSIFICATION	0.9998792307794983	WITHOUT_CLASSIFICATION	1.2076922050172033E-4	DESIGN
Need this, since join condition can appear inside parens!	WITHOUT_CLASSIFICATION	0.9998710473538227	WITHOUT_CLASSIFICATION	1.2895264617723633E-4	DESIGN
tokens that close a sub expression tokens that open a sub expression tokens that would indicate a sub expression is a boolean expression	WITHOUT_CLASSIFICATION	0.9999227503173556	WITHOUT_CLASSIFICATION	7.724968264444704E-5	DESIGN
expressionTerminators.add(","); deliberately excluded	WITHOUT_CLASSIFICATION	0.9992672094103887	WITHOUT_CLASSIFICATION	7.327905896112779E-4	DESIGN
expressionOpeners.add(","); deliberately excluded	WITHOUT_CLASSIFICATION	0.9992672094103887	WITHOUT_CLASSIFICATION	7.327905896112779E-4	DESIGN
we have the form: trim(from trimSource). This is functionally equivalent to trim(trimSource) EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.998295841090142	WITHOUT_CLASSIFICATION	0.0017041589098579191	DESIGN
otherwise, a trim-specification and/or a trim-character have been specified; we need to decide which options are present and "do the right thing" should leading trim-characters be trimmed? should trailing trim-characters be trimmed? the trim-character (what is to be trimmed off?) the trim-source (from where should it be trimmed?)	WITHOUT_CLASSIFICATION	0.9618291912141883	WITHOUT_CLASSIFICATION	0.038170808785811715	DESIGN
Inside a BETWEEN ... AND ... expression	WITHOUT_CLASSIFICATION	0.9982306665538021	WITHOUT_CLASSIFICATION	0.0017693334461978223	DESIGN
were an odd or even number of NOTs encountered the join string built up by compound paths inside this expression a flag indicating if the subexpression is known to be boolean	WITHOUT_CLASSIFICATION	0.9985868138661919	WITHOUT_CLASSIFICATION	0.0014131861338081409	DESIGN
ie. a many-to-many	WITHOUT_CLASSIFICATION	0.999787170552948	WITHOUT_CLASSIFICATION	2.1282944705212903E-4	DESIGN
Cope with [,]	WITHOUT_CLASSIFICATION	0.9998479018914606	WITHOUT_CLASSIFICATION	1.5209810853933454E-4	DESIGN
Cope with a continued path expression (ie. ].baz)	WITHOUT_CLASSIFICATION	0.9994484900881405	WITHOUT_CLASSIFICATION	5.515099118594245E-4	DESIGN
NOTE: early return	WITHOUT_CLASSIFICATION	0.9999721756798876	WITHOUT_CLASSIFICATION	2.7824320112367742E-5	DESIGN
Cope with a subselect	WITHOUT_CLASSIFICATION	0.9996821238341734	WITHOUT_CLASSIFICATION	3.1787616582657993E-4	DESIGN
Cope with special cases of AND, NOT, ()	WITHOUT_CLASSIFICATION	0.9999560752941828	WITHOUT_CLASSIFICATION	4.392470581718144E-5	DESIGN
Close extra brackets we opened	WITHOUT_CLASSIFICATION	0.9998689123567752	WITHOUT_CLASSIFICATION	1.310876432248157E-4	DESIGN
take note when this is a boolean expression	WITHOUT_CLASSIFICATION	0.993732801716272	WITHOUT_CLASSIFICATION	0.0062671982837279264	DESIGN
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9998695887195158	WITHOUT_CLASSIFICATION	1.3041128048415577E-4	DESIGN
process a token, mapping OO path expressions to SQL expressions	WITHOUT_CLASSIFICATION	0.9995117093745323	WITHOUT_CLASSIFICATION	4.882906254676812E-4	DESIGN
Open any extra brackets we might need.	WITHOUT_CLASSIFICATION	0.995750777085568	WITHOUT_CLASSIFICATION	0.004249222914432012	DESIGN
Cope with special cases of AND, NOT, )	WITHOUT_CLASSIFICATION	0.9993749130763843	WITHOUT_CLASSIFICATION	6.250869236157977E-4	DESIGN
the next one up must also be	WITHOUT_CLASSIFICATION	0.9994598144776927	WITHOUT_CLASSIFICATION	5.401855223073207E-4	DESIGN
Add any joins	WITHOUT_CLASSIFICATION	0.9999628892630136	WITHOUT_CLASSIFICATION	3.7110736986426776E-5	DESIGN
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9998695887195158	WITHOUT_CLASSIFICATION	1.3041128048415577E-4	DESIGN
named query parameter	WITHOUT_CLASSIFICATION	0.9993223337991161	WITHOUT_CLASSIFICATION	6.776662008840304E-4	DESIGN
path expression	WITHOUT_CLASSIFICATION	0.9999542818107643	WITHOUT_CLASSIFICATION	4.571818923569458E-5	DESIGN
saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9990010694297814	WITHOUT_CLASSIFICATION	9.98930570218568E-4	DESIGN
persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9980054199432414	WITHOUT_CLASSIFICATION	0.001994580056758488	DESIGN
anything else	WITHOUT_CLASSIFICATION	0.9999725620877785	WITHOUT_CLASSIFICATION	2.743791222151911E-5	DESIGN
the path expression continues after a ]	WITHOUT_CLASSIFICATION	0.9998802068318832	WITHOUT_CLASSIFICATION	1.1979316811692688E-4	DESIGN
careful with this!	WITHOUT_CLASSIFICATION	0.9996918791984458	WITHOUT_CLASSIFICATION	3.0812080155420343E-4	DESIGN
the path expression ends at the ]	WITHOUT_CLASSIFICATION	0.9997814156982452	WITHOUT_CLASSIFICATION	2.1858430175480687E-4	DESIGN
"finish off" the join	WITHOUT_CLASSIFICATION	0.999968709368696	WITHOUT_CLASSIFICATION	3.129063130410433E-5	DESIGN
NOTICE: no " or . since they are part of (compound) identifiers	WITHOUT_CLASSIFICATION	0.9995790534957664	WITHOUT_CLASSIFICATION	4.2094650423368275E-4	DESIGN
cannot instantiate	WITHOUT_CLASSIFICATION	0.999927153476786	WITHOUT_CLASSIFICATION	7.28465232140552E-5	DESIGN
start by looking for HQL keywords...	WITHOUT_CLASSIFICATION	0.9946947955355945	WITHOUT_CLASSIFICATION	0.005305204464405506	DESIGN
inner joins can be abbreviated to 'join'	WITHOUT_CLASSIFICATION	0.9984077529015813	WITHOUT_CLASSIFICATION	0.0015922470984186796	DESIGN
'outer' is optional and is ignored	WITHOUT_CLASSIFICATION	0.9986020400297511	WITHOUT_CLASSIFICATION	0.0013979599702490131	DESIGN
now anything that is not a HQL keyword	WITHOUT_CLASSIFICATION	0.9998514925611104	WITHOUT_CLASSIFICATION	1.4850743888961582E-4	DESIGN
process the "old" HQL style where aliases appear _first_ ie. using the IN or IN CLASS constructions	WITHOUT_CLASSIFICATION	0.9999001158559383	WITHOUT_CLASSIFICATION	9.988414406170425E-5	DESIGN
treat it as a classname	WITHOUT_CLASSIFICATION	0.9999144997344073	WITHOUT_CLASSIFICATION	8.550026559268324E-5	DESIGN
treat it as a path expression	WITHOUT_CLASSIFICATION	0.9999686739016806	WITHOUT_CLASSIFICATION	3.132609831947142E-5	DESIGN
starts with the name of a mapped class (new style)	WITHOUT_CLASSIFICATION	0.9997741174913931	WITHOUT_CLASSIFICATION	2.258825086068843E-4	DESIGN
starts with a path expression (new style)	WITHOUT_CLASSIFICATION	0.9995151549755588	WITHOUT_CLASSIFICATION	4.848450244412838E-4	DESIGN
allow ODMG OQL style: from Person p, p.cars c	WITHOUT_CLASSIFICATION	0.9983112506138518	WITHOUT_CLASSIFICATION	0.0016887493861480396	DESIGN
handle quoted strings	WITHOUT_CLASSIFICATION	0.9992756945929292	WITHOUT_CLASSIFICATION	7.243054070707787E-4	DESIGN
Object insertions, updates, and deletions have list semantics because they must happen in the right order so as to respect referential integrity	WITHOUT_CLASSIFICATION	0.992325787399843	WITHOUT_CLASSIFICATION	0.007674212600156963	DESIGN
"finish off" the join	WITHOUT_CLASSIFICATION	0.999968709368696	WITHOUT_CLASSIFICATION	3.129063130410433E-5	DESIGN
ignore whitespace	WITHOUT_CLASSIFICATION	0.9997804209115553	WITHOUT_CLASSIFICATION	2.1957908844477228E-4	DESIGN
do replacements	WITHOUT_CLASSIFICATION	0.9998164069264093	WITHOUT_CLASSIFICATION	1.8359307359071394E-4	DESIGN
handle HQL2 collection syntax	WITHOUT_CLASSIFICATION	0.9984904622027838	WITHOUT_CLASSIFICATION	0.0015095377972161599	DESIGN
uuid.hex is deprecated	WITHOUT_CLASSIFICATION	0.9989903784531211	WITHOUT_CLASSIFICATION	0.001009621546878902	DESIGN
AbstractSelectingDelegate impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994002999657632	WITHOUT_CLASSIFICATION	5.997000342368315E-4	DESIGN
hilo params	WITHOUT_CLASSIFICATION	0.9998777788593268	WITHOUT_CLASSIFICATION	1.222211406732285E-4	DESIGN
sql = query;	WITHOUT_CLASSIFICATION	0.9999815098806254	WITHOUT_CLASSIFICATION	1.8490119374615726E-5	DESIGN
performance opt	WITHOUT_CLASSIFICATION	0.9990980802496756	WITHOUT_CLASSIFICATION	9.019197503244459E-4	DESIGN
sql = update;	WITHOUT_CLASSIFICATION	0.9999815098806254	WITHOUT_CLASSIFICATION	1.8490119374615726E-5	DESIGN
hilo config	WITHOUT_CLASSIFICATION	0.9998782204156668	WITHOUT_CLASSIFICATION	1.2177958433329211E-4	DESIGN
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9996210219455726	WITHOUT_CLASSIFICATION	3.7897805442746175E-4	DESIGN
don't allow comments on these insert statements as comments totally blow up the Oracle getGeneratedKeys "support" :(	WITHOUT_CLASSIFICATION	0.9994994063896662	WITHOUT_CLASSIFICATION	5.005936103338277E-4	DESIGN
abort the save (the object is already saved by a circular cascade)	WITHOUT_CLASSIFICATION	0.9969801203249044	WITHOUT_CLASSIFICATION	0.0030198796750955906	DESIGN
throw new IdentifierGenerationException("save associated object first, or disable cascade for inverse association");	WITHOUT_CLASSIFICATION	0.9984845089467351	WITHOUT_CLASSIFICATION	0.001515491053264857	DESIGN
intentionally empty	WITHOUT_CLASSIFICATION	0.9997913774010797	WITHOUT_CLASSIFICATION	2.0862259892043326E-4	DESIGN
do nothing to avoid a lazy property initialization	WITHOUT_CLASSIFICATION	0.9999788251563712	WITHOUT_CLASSIFICATION	2.1174843628761498E-5	DESIGN
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9995548333844277	WITHOUT_CLASSIFICATION	4.4516661557216923E-4	DESIGN
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9996210219455726	WITHOUT_CLASSIFICATION	3.7897805442746175E-4	DESIGN
do nothing until we hit the rsult set containing the generated id	WITHOUT_CLASSIFICATION	0.9999392310596156	WITHOUT_CLASSIFICATION	6.076894038438529E-5	DESIGN
COLUMN and TABLE should be renamed but it would break the public API	WITHOUT_CLASSIFICATION	0.9932316356094629	WITHOUT_CLASSIFICATION	0.006768364390537041	DESIGN
Loaded entity instances, by EntityKey	WITHOUT_CLASSIFICATION	0.9987544433437502	WITHOUT_CLASSIFICATION	0.00124555665624983	DESIGN
if the given name is un-qualified we may neen to qualify it	WITHOUT_CLASSIFICATION	0.9995635609313877	WITHOUT_CLASSIFICATION	4.3643906861236427E-4	DESIGN
the default...	WITHOUT_CLASSIFICATION	0.999954582548445	WITHOUT_CLASSIFICATION	4.541745155500426E-5	DESIGN
unfortunately not really safe to normalize this to 1 as an initial value like we do the others because we would not be able to control this if we are using a sequence...	WITHOUT_CLASSIFICATION	0.99875362872965	WITHOUT_CLASSIFICATION	0.0012463712703500406	DESIGN
intentionally empty	WITHOUT_CLASSIFICATION	0.9997913774010797	WITHOUT_CLASSIFICATION	2.0862259892043326E-4	DESIGN
Identity map of CollectionEntry instances, by the collection wrapper	WITHOUT_CLASSIFICATION	0.9997697945050315	WITHOUT_CLASSIFICATION	2.3020549496853747E-4	DESIGN
general purpose parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992288990042628	WITHOUT_CLASSIFICATION	7.711009957371002E-4	DESIGN
table-specific parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994441572171698	WITHOUT_CLASSIFICATION	5.558427828302044E-4	DESIGN
Configurable implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9989035320533491	WITHOUT_CLASSIFICATION	0.0010964679466508207	DESIGN
IdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9989035320533491	WITHOUT_CLASSIFICATION	0.0010964679466508207	DESIGN
PersistentIdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9989035320533491	WITHOUT_CLASSIFICATION	0.0010964679466508207	DESIGN
prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999665306449691	WITHOUT_CLASSIFICATION	3.346935503092788E-5	DESIGN
prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999665306449691	WITHOUT_CLASSIFICATION	3.346935503092788E-5	DESIGN
fetch the generated id in a separate query	WITHOUT_CLASSIFICATION	0.9979469055223142	WITHOUT_CLASSIFICATION	0.0020530944776856797	DESIGN
we just hit the last position	WITHOUT_CLASSIFICATION	0.9997818747581672	WITHOUT_CLASSIFICATION	2.1812524183288182E-4	DESIGN
scroll ahead	WITHOUT_CLASSIFICATION	0.9998865104906989	WITHOUT_CLASSIFICATION	1.1348950930104751E-4	DESIGN
scroll backward	WITHOUT_CLASSIFICATION	0.9999183224792214	WITHOUT_CLASSIFICATION	8.167752077850726E-5	DESIGN
we have not yet hit the last result...	WITHOUT_CLASSIFICATION	0.9998635494474883	WITHOUT_CLASSIFICATION	1.3645055251172882E-4	DESIGN
Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992573729341824	WITHOUT_CLASSIFICATION	7.426270658175987E-4	DESIGN
State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994587324282512	WITHOUT_CLASSIFICATION	5.412675717487686E-4	DESIGN
Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994002999657632	WITHOUT_CLASSIFICATION	5.997000342368315E-4	DESIGN
do this when all the properties are updateable since there is a certain likelihood that the information will already be snapshot-cached.	WITHOUT_CLASSIFICATION	0.9991528049924635	WITHOUT_CLASSIFICATION	8.471950075365318E-4	DESIGN
Inner classes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996386139904226	WITHOUT_CLASSIFICATION	3.613860095774573E-4	DESIGN
Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992573729341824	WITHOUT_CLASSIFICATION	7.426270658175987E-4	DESIGN
State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994587324282512	WITHOUT_CLASSIFICATION	5.412675717487686E-4	DESIGN
Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994002999657632	WITHOUT_CLASSIFICATION	5.997000342368315E-4	DESIGN
Caches	WITHOUT_CLASSIFICATION	0.9998680402420813	WITHOUT_CLASSIFICATION	1.3195975791871172E-4	DESIGN
Generators:	WITHOUT_CLASSIFICATION	0.9998740958691271	WITHOUT_CLASSIFICATION	1.259041308727615E-4	DESIGN
cache region is defined by the root-class in the hierarchy...	WITHOUT_CLASSIFICATION	0.9995800517352581	WITHOUT_CLASSIFICATION	4.1994826474183437E-4	DESIGN
check if the detached object being merged is the parent	WITHOUT_CLASSIFICATION	0.9997548004524246	WITHOUT_CLASSIFICATION	2.4519954757544813E-4	DESIGN
after all persisters and named queries are registered	WITHOUT_CLASSIFICATION	0.9983128209878332	WITHOUT_CLASSIFICATION	0.0016871790121666757	DESIGN
if we get here, it is possible that we have a proxy 'in the way' of the merge map resolution... NOTE: decided to put this here rather than in the above loop as I was nervous about the performance of the loop-in-loop especially considering this is far more likely the 'edge case'	WITHOUT_CLASSIFICATION	0.9744496367472644	WITHOUT_CLASSIFICATION	0.025550363252735644	DESIGN
JNDI + Serialization:	WITHOUT_CLASSIFICATION	0.9999370278445421	WITHOUT_CLASSIFICATION	6.297215545789698E-5	DESIGN
checking for named queries	WITHOUT_CLASSIFICATION	0.9997233460916942	WITHOUT_CLASSIFICATION	2.76653908305774E-4	DESIGN
stats	WITHOUT_CLASSIFICATION	0.9998699446822216	WITHOUT_CLASSIFICATION	1.3005531777842623E-4	DESIGN
EntityNotFoundDelegate	WITHOUT_CLASSIFICATION	0.9998443304314125	WITHOUT_CLASSIFICATION	1.5566956858758022E-4	DESIGN
Check named HQL queries	WITHOUT_CLASSIFICATION	0.9998348651117509	WITHOUT_CLASSIFICATION	1.651348882489687E-4	DESIGN
this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.998988046372788	WITHOUT_CLASSIFICATION	0.0010119536272119403	DESIGN
prevents this session from adding things to cache	WITHOUT_CLASSIFICATION	0.9893276919305323	WITHOUT_CLASSIFICATION	0.01067230806946767	DESIGN
from javax.naming.Referenceable	WITHOUT_CLASSIFICATION	0.9984983011953698	WITHOUT_CLASSIFICATION	0.001501698804630169	DESIGN
look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9997961561671779	WITHOUT_CLASSIFICATION	2.0384383282204082E-4	DESIGN
for a dynamic-class	WITHOUT_CLASSIFICATION	0.9995986839042619	WITHOUT_CLASSIFICATION	4.0131609573811305E-4	DESIGN
test this entity to see if we must query it	WITHOUT_CLASSIFICATION	0.9964962250944831	WITHOUT_CLASSIFICATION	0.0035037749055169885	DESIGN
NOTE EARLY EXIT	WITHOUT_CLASSIFICATION	0.99987564617863	WITHOUT_CLASSIFICATION	1.2435382137009467E-4	DESIGN
for backward-compatability	WITHOUT_CLASSIFICATION	0.9997064510212798	WITHOUT_CLASSIFICATION	2.9354897872023E-4	DESIGN
ignore this error for now	WITHOUT_CLASSIFICATION	0.9994521173419515	WITHOUT_CLASSIFICATION	5.478826580484656E-4	DESIGN
to stop the class from being unloaded	WITHOUT_CLASSIFICATION	0.9994824488705344	WITHOUT_CLASSIFICATION	5.175511294655685E-4	DESIGN
in case we were deserialized in a different JVM, look for an instance with the same name (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.998965771594226	WITHOUT_CLASSIFICATION	0.001034228405774025	DESIGN
must add to JNDI _after_ adding to HashMaps, because some JNDI servers use serialization	WITHOUT_CLASSIFICATION	0.9995000662368118	WITHOUT_CLASSIFICATION	4.999337631883167E-4	DESIGN
Make sure this is a defined parameter and check the incoming value type	WITHOUT_CLASSIFICATION	0.996392032212707	WITHOUT_CLASSIFICATION	0.0036079677872929298	DESIGN
for each of the defined parameters, make sure its value has been set	WITHOUT_CLASSIFICATION	0.9998547344134737	WITHOUT_CLASSIFICATION	1.4526558652622174E-4	DESIGN
we never need to apply locks to the SQL	WITHOUT_CLASSIFICATION	0.9947383885614896	WITHOUT_CLASSIFICATION	0.005261611438510431	DESIGN
inserts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992564144695602	WITHOUT_CLASSIFICATION	7.435855304398626E-4	DESIGN
deletes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992020231115558	WITHOUT_CLASSIFICATION	7.979768884442076E-4	DESIGN
during deserialization, we need to reconnect all proxies and collections to this session, as well as the EntityEntry and CollectionEntry instances; these associations are transient because serialization is used for different things.	WITHOUT_CLASSIFICATION	0.9909940677086697	WITHOUT_CLASSIFICATION	0.009005932291330232	DESIGN
updates ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992938482871803	WITHOUT_CLASSIFICATION	7.061517128198256E-4	DESIGN
loading ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992277659603788	WITHOUT_CLASSIFICATION	7.72234039621245E-4	DESIGN
final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9991409478916191	WITHOUT_CLASSIFICATION	8.590521083809904E-4	DESIGN
final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9991409478916191	WITHOUT_CLASSIFICATION	8.590521083809904E-4	DESIGN
first, try to load it from the temp PC associated to this SS	WITHOUT_CLASSIFICATION	0.9998942610161937	WITHOUT_CLASSIFICATION	1.0573898380626334E-4	DESIGN
if the metadata allowed proxy creation and caller did not request forceful eager loading, generate a proxy	WITHOUT_CLASSIFICATION	0.9999831796653147	WITHOUT_CLASSIFICATION	1.682033468534048E-5	DESIGN
otherwise immediately materialize it	WITHOUT_CLASSIFICATION	0.9997739097814401	WITHOUT_CLASSIFICATION	2.2609021855980347E-4	DESIGN
/	WITHOUT_CLASSIFICATION	0.9999296249981258	WITHOUT_CLASSIFICATION	7.03750018743201E-5	DESIGN
no auto-flushing to support in stateless session	WITHOUT_CLASSIFICATION	0.9962353975652675	WITHOUT_CLASSIFICATION	0.00376460243473263	DESIGN
after setting values to object, entityMode	WITHOUT_CLASSIFICATION	0.9999485402488251	WITHOUT_CLASSIFICATION	5.14597511749478E-5	DESIGN
for EJB3	WITHOUT_CLASSIFICATION	0.999751155822281	WITHOUT_CLASSIFICATION	2.488441777189984E-4	DESIGN
just ignore	WITHOUT_CLASSIFICATION	0.9997816028557894	WITHOUT_CLASSIFICATION	2.183971442104942E-4	DESIGN
do a check	WITHOUT_CLASSIFICATION	0.9998439855252055	WITHOUT_CLASSIFICATION	1.5601447479453073E-4	DESIGN
saveOrUpdate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993217010476709	WITHOUT_CLASSIFICATION	6.782989523290342E-4	DESIGN
update() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993217010476709	WITHOUT_CLASSIFICATION	6.782989523290342E-4	DESIGN
lock() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993217010476709	WITHOUT_CLASSIFICATION	6.782989523290342E-4	DESIGN
persist() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993217010476709	WITHOUT_CLASSIFICATION	6.782989523290342E-4	DESIGN
persistOnFlush() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993217010476709	WITHOUT_CLASSIFICATION	6.782989523290342E-4	DESIGN
merge() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993217010476709	WITHOUT_CLASSIFICATION	6.782989523290342E-4	DESIGN
saveOrUpdateCopy() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993217010476709	WITHOUT_CLASSIFICATION	6.782989523290342E-4	DESIGN
delete() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999272081755176	WITHOUT_CLASSIFICATION	7.279182448240352E-4	DESIGN
load()/get() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993217010476709	WITHOUT_CLASSIFICATION	6.782989523290342E-4	DESIGN
refresh() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993217010476709	WITHOUT_CLASSIFICATION	6.782989523290342E-4	DESIGN
replicate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993217010476709	WITHOUT_CLASSIFICATION	6.782989523290342E-4	DESIGN
do not auto-flush while outside a transaction	WITHOUT_CLASSIFICATION	0.9986181223027726	WITHOUT_CLASSIFICATION	0.001381877697227359	DESIGN
this is an internal error of some sort...	WITHOUT_CLASSIFICATION	0.9911004038740192	WITHOUT_CLASSIFICATION	0.008899596125980753	DESIGN
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9861090027896543	WITHOUT_CLASSIFICATION	0.013890997210345627	DESIGN
only collections belonging to deleted entities are allowed to be dereferenced in the case of orphan delete	WITHOUT_CLASSIFICATION	0.9999446317880379	WITHOUT_CLASSIFICATION	5.53682119620059E-5	DESIGN
if it was previously unreferenced, we need to flush in order to get its state into the database in order to execute query	WITHOUT_CLASSIFICATION	0.982090143043196	WITHOUT_CLASSIFICATION	0.017909856956804086	DESIGN
not for internal use:	WITHOUT_CLASSIFICATION	0.9992892430761606	WITHOUT_CLASSIFICATION	7.107569238394057E-4	DESIGN
otherwise, we only need to flush if there are in-memory changes to the queried tables	WITHOUT_CLASSIFICATION	0.9980762269190036	WITHOUT_CLASSIFICATION	0.0019237730809963842	DESIGN
might need to run a different filter entirely after the flush because the collection role may have changed	WITHOUT_CLASSIFICATION	0.9917910460551468	WITHOUT_CLASSIFICATION	0.008208953944853228	DESIGN
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9861090027896543	WITHOUT_CLASSIFICATION	0.013890997210345627	DESIGN
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9861090027896543	WITHOUT_CLASSIFICATION	0.013890997210345627	DESIGN
if it is initialized, see if the underlying instance is contained, since we need to account for the fact that it might have been evicted	WITHOUT_CLASSIFICATION	0.9846836590566334	WITHOUT_CLASSIFICATION	0.015316340943366605	DESIGN
basically just an adapted copy of find(CriteriaImpl)	WITHOUT_CLASSIFICATION	0.9998074758286642	WITHOUT_CLASSIFICATION	1.9252417133563165E-4	DESIGN
it is possible for this method to be called during flush processing, so make certain that we do not accidently initialize an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9936012465720532	WITHOUT_CLASSIFICATION	0.0063987534279468464	DESIGN
nothing to do in a stateful session	WITHOUT_CLASSIFICATION	0.9996619133926159	WITHOUT_CLASSIFICATION	3.3808660738412604E-4	DESIGN
ignore	WITHOUT_CLASSIFICATION	0.9997087489104198	WITHOUT_CLASSIFICATION	2.912510895801591E-4	DESIGN
ignore this error for now	WITHOUT_CLASSIFICATION	0.9994521173419515	WITHOUT_CLASSIFICATION	5.478826580484656E-4	DESIGN
we need to writeObject() on this since interceptor is user defined	WITHOUT_CLASSIFICATION	0.990660176602106	WITHOUT_CLASSIFICATION	0.009339823397894017	DESIGN
the old-time stand-by...	WITHOUT_CLASSIFICATION	0.999943844180556	WITHOUT_CLASSIFICATION	5.615581944400138E-5	DESIGN
parameter bind values...	WITHOUT_CLASSIFICATION	0.9992635787035047	WITHOUT_CLASSIFICATION	7.364212964954175E-4	DESIGN
Parameter handling code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9888865267730041	WITHOUT_CLASSIFICATION	0.011113473226995872	DESIGN
prepend value and type list with null for any positions before the wanted position.	WITHOUT_CLASSIFICATION	0.9980311812409051	WITHOUT_CLASSIFICATION	0.0019688187590949854	DESIGN
Execution methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9989869269837292	WITHOUT_CLASSIFICATION	0.0010130730162708356	DESIGN
we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9992791589855188	WITHOUT_CLASSIFICATION	7.208410144812686E-4	DESIGN
we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9992791589855188	WITHOUT_CLASSIFICATION	7.208410144812686E-4	DESIGN
we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9992791589855188	WITHOUT_CLASSIFICATION	7.208410144812686E-4	DESIGN
we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9992791589855188	WITHOUT_CLASSIFICATION	7.208410144812686E-4	DESIGN
FieldInterceptor impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994002999657632	WITHOUT_CLASSIFICATION	5.997000342368315E-4	DESIGN
subclass accesses ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995431245354491	WITHOUT_CLASSIFICATION	4.5687546455081446E-4	DESIGN
let's assume that there is only one lazy fetch group, for now!	WITHOUT_CLASSIFICATION	0.9998567996207317	WITHOUT_CLASSIFICATION	1.4320037926827093E-4	DESIGN
FieldHandler impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994002999657632	WITHOUT_CLASSIFICATION	5.997000342368315E-4	DESIGN
should not need to grow beyond the size of the total number of columns in the rs	WITHOUT_CLASSIFICATION	0.9975837588455708	WITHOUT_CLASSIFICATION	0.002416241154429089	DESIGN
should probably no-op commit/rollback here, at least in JTA scenarios	WITHOUT_CLASSIFICATION	0.994831100685615	WITHOUT_CLASSIFICATION	0.005168899314385027	DESIGN
Base Expectation impls ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999318665690027	WITHOUT_CLASSIFICATION	6.813343099730057E-4	DESIGN
Various Expectation instances ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994910506567334	WITHOUT_CLASSIFICATION	5.089493432665316E-4	DESIGN
explicitly perform no checking...	WITHOUT_CLASSIFICATION	0.9954308225545913	WITHOUT_CLASSIFICATION	0.004569177445408767	DESIGN
used from testsuite	WITHOUT_CLASSIFICATION	0.9996551630562999	WITHOUT_CLASSIFICATION	3.4483694370008477E-4	DESIGN
assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9976550072424505	WITHOUT_CLASSIFICATION	0.0023449927575495614	DESIGN
package	WITHOUT_CLASSIFICATION	0.9993601709670066	WITHOUT_CLASSIFICATION	6.398290329934237E-4	DESIGN
register synch; stats.connect()	WITHOUT_CLASSIFICATION	0.999040886077747	WITHOUT_CLASSIFICATION	9.591139222530201E-4	DESIGN
noncritical, swallow and let the other propagate!	WITHOUT_CLASSIFICATION	0.9982098933982639	WITHOUT_CLASSIFICATION	0.0017901066017360517	DESIGN
calls executeBatch()	WITHOUT_CLASSIFICATION	0.9997125499079249	WITHOUT_CLASSIFICATION	2.8745009207507914E-4	DESIGN
no big deal	WITHOUT_CLASSIFICATION	0.9999640593820607	WITHOUT_CLASSIFICATION	3.594061793919316E-5	DESIGN
no big deal	WITHOUT_CLASSIFICATION	0.9999640593820607	WITHOUT_CLASSIFICATION	3.594061793919316E-5	DESIGN
no big deal	WITHOUT_CLASSIFICATION	0.9999640593820607	WITHOUT_CLASSIFICATION	3.594061793919316E-5	DESIGN
sybase driver (jConnect) throwing NPE here in certain cases, but we'll just handle the general "unexpected" case	WITHOUT_CLASSIFICATION	0.9973756235762029	WITHOUT_CLASSIFICATION	0.0026243764237971414	DESIGN
see explanation above...	WITHOUT_CLASSIFICATION	0.9998687907265487	WITHOUT_CLASSIFICATION	1.3120927345125583E-4	DESIGN
If we are in the process of releasing, no sense checking for aggressive-release possibility.	WITHOUT_CLASSIFICATION	0.9996683444121646	WITHOUT_CLASSIFICATION	3.316555878354049E-4	DESIGN
EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9998740958691271	WITHOUT_CLASSIFICATION	1.259041308727615E-4	DESIGN
ResultSet impl ("overridden") ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994002999657632	WITHOUT_CLASSIFICATION	5.997000342368315E-4	DESIGN
ResultSet impl (delegated) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994002999657632	WITHOUT_CLASSIFICATION	5.997000342368315E-4	DESIGN
refer to comment in StatefulPersistenceContext.addCollection()	WITHOUT_CLASSIFICATION	0.9997271528225827	WITHOUT_CLASSIFICATION	2.728471774172097E-4	DESIGN
ConnectionManager.Callback implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9989035320533491	WITHOUT_CLASSIFICATION	0.0010964679466508207	DESIGN
Note : success = false, because we don't know the outcome of the transaction	WITHOUT_CLASSIFICATION	0.9999947028018711	WITHOUT_CLASSIFICATION	5.297198128950325E-6	DESIGN
we already have a callback registered; either a local (org.hibernate.Transaction) transaction has accepted callback responsibilities, or we have previously registered a transaction synch.	WITHOUT_CLASSIFICATION	0.9972116679470167	WITHOUT_CLASSIFICATION	0.0027883320529832785	DESIGN
the configured transaction-factory says it only supports local callback mode, so no sense attempting to register a JTA Synchronization	WITHOUT_CLASSIFICATION	0.9960525682017807	WITHOUT_CLASSIFICATION	0.0039474317982193235	DESIGN
transactions marked for rollback-only cause some TM impls to throw exceptions	WITHOUT_CLASSIFICATION	0.98631024507734	WITHOUT_CLASSIFICATION	0.01368975492266003	DESIGN
serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992610044726176	WITHOUT_CLASSIFICATION	7.389955273823031E-4	DESIGN
postInitialize() will be called after initialization	WITHOUT_CLASSIFICATION	0.9999201153076421	WITHOUT_CLASSIFICATION	7.988469235790225E-5	DESIGN
cannot handle single quotes	WITHOUT_CLASSIFICATION	0.999680137469229	WITHOUT_CLASSIFICATION	3.198625307709953E-4	DESIGN
todo : for 4.0 private static final Logger log = LoggerFactory.getLogger( SQLStatementLogger.class ); this is the legacy logging 'category'...	WITHOUT_CLASSIFICATION	0.9989390953114455	WITHOUT_CLASSIFICATION	0.0010609046885544885	DESIGN
note that for sequential scrolling, we make the assumption that the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9636304314765064	WITHOUT_CLASSIFICATION	0.036369568523493524	DESIGN
don't even bother trying to read further	WITHOUT_CLASSIFICATION	0.9712278189247379	WITHOUT_CLASSIFICATION	0.028772181075262165	DESIGN
don't even bother trying to read any further	WITHOUT_CLASSIFICATION	0.9775193236621346	WITHOUT_CLASSIFICATION	0.022480676337865442	DESIGN
position cursor to the last row	WITHOUT_CLASSIFICATION	0.9994507007657204	WITHOUT_CLASSIFICATION	5.492992342796368E-4	DESIGN
sequentially read the result set in reverse until we recognize a change in the key value. At that point, we are pointed at the last physical sequential row for the logical row in which we are interested in processing	WITHOUT_CLASSIFICATION	0.9999502532745116	WITHOUT_CLASSIFICATION	4.974672548835443E-5	DESIGN
Read backwards until we read past the first physical sequential row with the key we are interested in loading	WITHOUT_CLASSIFICATION	0.9998895103444767	WITHOUT_CLASSIFICATION	1.1048965552339225E-4	DESIGN
Finally, read ahead one row to position result set cursor at the first physical row we are interested in loading	WITHOUT_CLASSIFICATION	0.9994509430244846	WITHOUT_CLASSIFICATION	5.490569755153932E-4	DESIGN
now get an existing proxy for each row element (if there is one)	WITHOUT_CLASSIFICATION	0.9999842301710739	WITHOUT_CLASSIFICATION	1.5769828926143835E-5	DESIGN
force the proxy to resolve itself	WITHOUT_CLASSIFICATION	0.9997905699872365	WITHOUT_CLASSIFICATION	2.0943001276354346E-4	DESIGN
this is equivalent to the old behavior...	WITHOUT_CLASSIFICATION	0.9993064252536891	WITHOUT_CLASSIFICATION	6.935747463109571E-4	DESIGN
if null, owner will be retrieved from session	WITHOUT_CLASSIFICATION	0.9987302806772521	WITHOUT_CLASSIFICATION	0.001269719322747886	DESIGN
final String queryString,	WITHOUT_CLASSIFICATION	0.9993648510205841	WITHOUT_CLASSIFICATION	6.351489794158368E-4	DESIGN
if it was a reference to self, don't need to nullify unless we are using native id generation, in which case we definitely need to nullify	WITHOUT_CLASSIFICATION	0.9956004374773723	WITHOUT_CLASSIFICATION	0.004399562522627771	DESIGN
end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9976403075017722	WITHOUT_CLASSIFICATION	0.00235969249822776	DESIGN
in an effort to avoid concurrent-modification-exceptions (from potential recursive calls back through here as a result of the eventual call to PersistentCollection#endRead), we scan the internal loadingCollections map for matches and store those matches in a temp collection. the temp collection is then used to "drive" the #endRead processing.	WITHOUT_CLASSIFICATION	0.9495936004087564	WITHOUT_CLASSIFICATION	0.050406399591243455	DESIGN
we can reuse it for each row	WITHOUT_CLASSIFICATION	0.9999262680968412	WITHOUT_CLASSIFICATION	7.37319031588719E-5	DESIGN
can't reuse in this case	WITHOUT_CLASSIFICATION	0.9997915017497208	WITHOUT_CLASSIFICATION	2.084982502791622E-4	DESIGN
First we need to suspend any current JTA transaction and obtain a JDBC connection	WITHOUT_CLASSIFICATION	0.9855771885717836	WITHOUT_CLASSIFICATION	0.01442281142821642	DESIGN
getResultList(results);	WITHOUT_CLASSIFICATION	0.9998443304314125	WITHOUT_CLASSIFICATION	1.5566956858758022E-4	DESIGN
if we only returned one entity, query by key is more efficient	WITHOUT_CLASSIFICATION	0.962733017799527	WITHOUT_CLASSIFICATION	0.03726698220047288	DESIGN
a collection loaded in the current session can not possibly be the collection belonging to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9978811637055857	WITHOUT_CLASSIFICATION	0.0021188362944144115	DESIGN
handle empty collection	WITHOUT_CLASSIFICATION	0.9978885926812443	WITHOUT_CLASSIFICATION	0.002111407318755693	DESIGN
else no collection element, but also no owner	WITHOUT_CLASSIFICATION	0.9979013320468807	WITHOUT_CLASSIFICATION	0.002098667953119272	DESIGN
handle empty collections	WITHOUT_CLASSIFICATION	0.9994866986138825	WITHOUT_CLASSIFICATION	5.133013861174798E-4	DESIGN
else this is not a collection initializer (and empty collections will be detected by looking for the owner's identifier in the result set)	WITHOUT_CLASSIFICATION	0.904968455248361	WITHOUT_CLASSIFICATION	0.09503154475163904	DESIGN
validate() instances of Validatable	WITHOUT_CLASSIFICATION	0.999618295989383	WITHOUT_CLASSIFICATION	3.81704010616989E-4	DESIGN
if we know there is exactly 1 row, we can skip. it would be great if we could _always_ skip this; it is a problem for <key-many-to-one>	WITHOUT_CLASSIFICATION	0.9983245852138427	WITHOUT_CLASSIFICATION	0.0016754147861572867	DESIGN
remove all collections for the entity from the session-level cache	WITHOUT_CLASSIFICATION	0.99600452517729	WITHOUT_CLASSIFICATION	0.003995474822710018	DESIGN
null version means the object is in the process of being loaded somewhere else in the ResultSet	WITHOUT_CLASSIFICATION	0.9994604682651705	WITHOUT_CLASSIFICATION	5.395317348294836E-4	DESIGN
problematic for <key-many-to-one>!	WITHOUT_CLASSIFICATION	0.998598536935401	WITHOUT_CLASSIFICATION	0.0014014630645990006	DESIGN
use the id passed in	WITHOUT_CLASSIFICATION	0.9999689525444649	WITHOUT_CLASSIFICATION	3.1047455535118886E-5	DESIGN
do nothing	WITHOUT_CLASSIFICATION	0.9999850762040801	WITHOUT_CLASSIFICATION	1.4923795919982432E-5	DESIGN
prefer re-generation of identity!	WITHOUT_CLASSIFICATION	0.9994422898022441	WITHOUT_CLASSIFICATION	5.577101977557836E-4	DESIGN
no point doing this if NONE was requested	WITHOUT_CLASSIFICATION	0.999945903596655	WITHOUT_CLASSIFICATION	5.409640334490256E-5	DESIGN
If the object is already loaded, return the loaded one	WITHOUT_CLASSIFICATION	0.9998589595063888	WITHOUT_CLASSIFICATION	1.410404936112472E-4	DESIGN
its already loaded so don't need to hydrate it	WITHOUT_CLASSIFICATION	0.9954396339773268	WITHOUT_CLASSIFICATION	0.004560366022673184	DESIGN
cascade the refresh prior to refreshing this entity	WITHOUT_CLASSIFICATION	0.9985428077826376	WITHOUT_CLASSIFICATION	0.001457192217362328	DESIGN
the load() which takes an entity does not pass an entityName	WITHOUT_CLASSIFICATION	0.9999477640765254	WITHOUT_CLASSIFICATION	5.22359234745891E-5	DESIGN
we only check the version when _upgrading_ lock modes	WITHOUT_CLASSIFICATION	0.9999078745598239	WITHOUT_CLASSIFICATION	9.212544017613334E-5	DESIGN
look for a proxy	WITHOUT_CLASSIFICATION	0.9998654426792593	WITHOUT_CLASSIFICATION	1.3455732074075293E-4	DESIGN
we need to upgrade the lock mode to the mode requested	WITHOUT_CLASSIFICATION	0.9933152444971763	WITHOUT_CLASSIFICATION	0.006684755502823751	DESIGN
its the given optional object	WITHOUT_CLASSIFICATION	0.9999496214410551	WITHOUT_CLASSIFICATION	5.037855894492797E-5	DESIGN
instantiate a new instance	WITHOUT_CLASSIFICATION	0.9996999839368923	WITHOUT_CLASSIFICATION	3.000160631077592E-4	DESIGN
need to hydrate it.	WITHOUT_CLASSIFICATION	0.9980262152720312	WITHOUT_CLASSIFICATION	0.0019737847279688242	DESIGN
return a newly loaded object	WITHOUT_CLASSIFICATION	0.999652550321112	WITHOUT_CLASSIFICATION	3.474496788879623E-4	DESIGN
will be ignored, using the existing Entry instead	WITHOUT_CLASSIFICATION	0.9994165133539679	WITHOUT_CLASSIFICATION	5.834866460321447E-4	DESIGN
key is an entity involved with the operation performed by the listener; value can be either a copy of the entity or the entity itself	WITHOUT_CLASSIFICATION	0.9999746530891782	WITHOUT_CLASSIFICATION	2.5346910821869418E-5	DESIGN
materialize associations (and initialize the object) later	WITHOUT_CLASSIFICATION	0.999430808907992	WITHOUT_CLASSIFICATION	5.691910920080356E-4	DESIGN
Get the persister for the _subclass_	WITHOUT_CLASSIFICATION	0.9997253968934826	WITHOUT_CLASSIFICATION	2.7460310651744097E-4	DESIGN
ok in normal Hibernate usage to delete a detached entity; JPA however forbids it, thus this is a hook for HEM to affect this behavior	WITHOUT_CLASSIFICATION	0.9559404014558102	WITHOUT_CLASSIFICATION	0.04405959854418979	DESIGN
the entry will be removed after the flush, and will no longer override the stale snapshot This is now handled by removeEntity() in EntityDeleteAction persistenceContext.removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9995127376968185	WITHOUT_CLASSIFICATION	4.872623031814967E-4	DESIGN
addInitializedCollection(collection, persister, id);	WITHOUT_CLASSIFICATION	0.9992564144695602	WITHOUT_CLASSIFICATION	7.435855304398626E-4	DESIGN
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9998740958691271	WITHOUT_CLASSIFICATION	1.259041308727615E-4	DESIGN
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9998740958691271	WITHOUT_CLASSIFICATION	1.259041308727615E-4	DESIGN
|| oj.getJoinable().consumesCollectionAlias()	WITHOUT_CLASSIFICATION	0.999292518390458	WITHOUT_CLASSIFICATION	7.074816095421642E-4	DESIGN
here we do not bother with the discriminator.	WITHOUT_CLASSIFICATION	0.9612353497636408	WITHOUT_CLASSIFICATION	0.03876465023635926	DESIGN
Code to handle subclasses of topClass	WITHOUT_CLASSIFICATION	0.9979725943752172	WITHOUT_CLASSIFICATION	0.0020274056247827654	DESIGN
woops we got an instance of another class hierarchy branch	WITHOUT_CLASSIFICATION	0.999844093165285	WITHOUT_CLASSIFICATION	1.559068347150299E-4	DESIGN
we can go straight to the first required row	WITHOUT_CLASSIFICATION	0.9996814487441731	WITHOUT_CLASSIFICATION	3.185512558268776E-4	DESIGN
we need to step through the rows one row at a time (slow)	WITHOUT_CLASSIFICATION	0.9956777788278661	WITHOUT_CLASSIFICATION	0.0043222211721338465	DESIGN
synchronized to avoid multi-thread access issues; defined as method synch to avoid potential deadlock issues due to nature of code.	WITHOUT_CLASSIFICATION	0.9994950055506611	WITHOUT_CLASSIFICATION	5.049944493389141E-4	DESIGN
Allows various loaders (ok mainly the QueryLoader :) to check whether scrolling of their result set should be allowed. By default it is allowed.	WITHOUT_CLASSIFICATION	0.998819574586808	WITHOUT_CLASSIFICATION	0.0011804254131918812	DESIGN
before adding to collection!	WITHOUT_CLASSIFICATION	0.9997692141823586	WITHOUT_CLASSIFICATION	2.3078581764144246E-4	DESIGN
if the current depth is 0, the root thing being loaded is the many-to-many collection itself. Here, it is alright to use an inner join...	WITHOUT_CLASSIFICATION	0.9943845296135566	WITHOUT_CLASSIFICATION	0.005615470386443423	DESIGN
operations which cascade as far as the collection also cascade to collection elements	WITHOUT_CLASSIFICATION	0.9999540623941024	WITHOUT_CLASSIFICATION	4.593760589762031E-5	DESIGN
simple, because we can't have a one-to-one or a collection (or even a property-ref) in a composite-element:	WITHOUT_CLASSIFICATION	0.9961905660295064	WITHOUT_CLASSIFICATION	0.0038094339704936656	DESIGN
a composite key	WITHOUT_CLASSIFICATION	0.9998646266459724	WITHOUT_CLASSIFICATION	1.3537335402756794E-4	DESIGN
if no batch, use "foo = ? and bar = ?"	WITHOUT_CLASSIFICATION	0.9995371034805903	WITHOUT_CLASSIFICATION	4.6289651940969865E-4	DESIGN
it must be a collection fetch	WITHOUT_CLASSIFICATION	0.9961527985112086	WITHOUT_CLASSIFICATION	0.0038472014887913977	DESIGN
needed later for many-to-many/filter application	WITHOUT_CLASSIFICATION	0.9988579480807428	WITHOUT_CLASSIFICATION	0.001142051919257192	DESIGN
&& etype.isReferenceToPrimaryKey()	WITHOUT_CLASSIFICATION	0.9992486552258533	WITHOUT_CLASSIFICATION	7.51344774146636E-4	DESIGN
it might still need to apply a collection ordering based on a many-to-many defined order-by...	WITHOUT_CLASSIFICATION	0.8238952683251278	DESIGN	0.1761047316748721	WITHOUT_CLASSIFICATION
if a composite key, use "( (foo = ? and bar = ?) or (foo = ? and bar = ?) )" for batching TODO: unnecessary for databases with ANSI-style joins	WITHOUT_CLASSIFICATION	0.8623350027497368	DESIGN	0.13766499725026315	WITHOUT_CLASSIFICATION
belong to other persister belong to other persister	WITHOUT_CLASSIFICATION	0.9976838222006991	WITHOUT_CLASSIFICATION	0.0023161777993009006	DESIGN
we found it	WITHOUT_CLASSIFICATION	0.9998470597547052	WITHOUT_CLASSIFICATION	1.5294024529486884E-4	DESIGN
we can use an inner join for the many-to-many	WITHOUT_CLASSIFICATION	0.9995836051407497	WITHOUT_CLASSIFICATION	4.1639485925021395E-4	DESIGN
disable a join back to this same association	WITHOUT_CLASSIFICATION	0.9946341451951027	WITHOUT_CLASSIFICATION	0.005365854804897177	DESIGN
NOTE: unlike all other Loaders, this one is NOT multithreaded, or cacheable!!	WITHOUT_CLASSIFICATION	0.9971798150201256	WITHOUT_CLASSIFICATION	0.002820184979874306	DESIGN
the user visible aliases, which are unknown to the superclass, these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999507353650009	WITHOUT_CLASSIFICATION	4.9264634999186115E-5	DESIGN
root entity comes last	WITHOUT_CLASSIFICATION	0.9998997347293704	WITHOUT_CLASSIFICATION	1.0026527062958664E-4	DESIGN
deliberately ignore return value!	WITHOUT_CLASSIFICATION	0.998661481124093	WITHOUT_CLASSIFICATION	0.0013385188759069532	DESIGN
alias may be null EARLY EXIT	WITHOUT_CLASSIFICATION	0.9991122553704024	WITHOUT_CLASSIFICATION	8.877446295976364E-4	DESIGN
if it is a compound path	WITHOUT_CLASSIFICATION	0.9998534493338387	WITHOUT_CLASSIFICATION	1.4655066616137393E-4	DESIGN
otherwise assume the parent is the the criteria that created us	WITHOUT_CLASSIFICATION	0.9988026185096213	WITHOUT_CLASSIFICATION	0.0011973814903787473	DESIGN
if its the root criteria, we are done	WITHOUT_CLASSIFICATION	0.9981988899913298	WITHOUT_CLASSIFICATION	0.001801110008670191	DESIGN
otherwise, recurse	WITHOUT_CLASSIFICATION	0.9999091666287411	WITHOUT_CLASSIFICATION	9.083337125887926E-5	DESIGN
the criteria instance	WITHOUT_CLASSIFICATION	0.9999261439850486	WITHOUT_CLASSIFICATION	7.385601495138126E-5	DESIGN
the entity name	WITHOUT_CLASSIFICATION	0.9999560650136976	WITHOUT_CLASSIFICATION	4.393498630236778E-5	DESIGN
not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9999434559278423	WITHOUT_CLASSIFICATION	5.65440721576069E-5	DESIGN
not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9999434559278423	WITHOUT_CLASSIFICATION	5.65440721576069E-5	DESIGN
it refers to an alias of a projection	WITHOUT_CLASSIFICATION	0.998795342931971	WITHOUT_CLASSIFICATION	0.0012046570680288781	DESIGN
should never happen, i think	WITHOUT_CLASSIFICATION	0.9991824211144192	WITHOUT_CLASSIFICATION	8.175788855807115E-4	DESIGN
Detect discriminator values...	WITHOUT_CLASSIFICATION	0.9997959163585881	WITHOUT_CLASSIFICATION	2.040836414119392E-4	DESIGN
Convert the string value into the proper type.	WITHOUT_CLASSIFICATION	0.9987613544859818	WITHOUT_CLASSIFICATION	0.0012386455140182193	DESIGN
and the qualifier is not the alias of this criteria -> check to see if we belong to some criteria other than the one that created us	WITHOUT_CLASSIFICATION	0.9969816378300387	WITHOUT_CLASSIFICATION	0.003018362169961222	DESIGN
it does not refer to an alias of a projection, look for a property	WITHOUT_CLASSIFICATION	0.9980175215960473	WITHOUT_CLASSIFICATION	0.001982478403952606	DESIGN
Otherwise, this is an ordinary value.	WITHOUT_CLASSIFICATION	0.9975781364713102	WITHOUT_CLASSIFICATION	0.002421863528689679	DESIGN
Currently not cachable if autodiscover types is in effect (e.g. "select ...")	WITHOUT_CLASSIFICATION	0.9991909919823319	WITHOUT_CLASSIFICATION	8.090080176681591E-4	DESIGN
private final String[] sqlAliases; private final String[] sqlAliasSuffixes;	WITHOUT_CLASSIFICATION	0.9981760067521576	WITHOUT_CLASSIFICATION	0.0018239932478424962	DESIGN
this is only needed (afaict) for ResultTransformer processing...	WITHOUT_CLASSIFICATION	0.9971174837428078	WITHOUT_CLASSIFICATION	0.0028825162571920826	DESIGN
determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9996100313501156	WITHOUT_CLASSIFICATION	3.899686498843312E-4	DESIGN
build an array with indices equal to the total number of actual returns in the result Hibernate will return for this query (scalars + non-scalars)	WITHOUT_CLASSIFICATION	0.99960170041613	WITHOUT_CLASSIFICATION	3.9829958387007063E-4	DESIGN
replace {....} with corresponding column aliases	WITHOUT_CLASSIFICATION	0.9980556715859311	WITHOUT_CLASSIFICATION	0.0019443284140689347	DESIGN
No additional open braces found in the string, append the rest of the string in its entirty and quit this loop	WITHOUT_CLASSIFICATION	0.9998937057106252	WITHOUT_CLASSIFICATION	1.0629428937484563E-4	DESIGN
apend everything up until the next encountered open brace	WITHOUT_CLASSIFICATION	0.9998224674160311	WITHOUT_CLASSIFICATION	1.7753258396894787E-4	DESIGN
it is a simple table alias {foo}	WITHOUT_CLASSIFICATION	0.9995080127004976	WITHOUT_CLASSIFICATION	4.919872995022979E-4	DESIGN
passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9949983793014032	WITHOUT_CLASSIFICATION	0.005001620698596714	DESIGN
passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9949983793014032	WITHOUT_CLASSIFICATION	0.005001620698596714	DESIGN
The current alias is referencing the collection to be eagerly fetched	WITHOUT_CLASSIFICATION	0.9951503985008051	WITHOUT_CLASSIFICATION	0.00484960149919487	DESIGN
it is a property reference {foo.bar}	WITHOUT_CLASSIFICATION	0.9995010334750405	WITHOUT_CLASSIFICATION	4.989665249594179E-4	DESIGN
Possibly handle :something parameters for the query ?	WITHOUT_CLASSIFICATION	0.9955453415322023	WITHOUT_CLASSIFICATION	0.004454658467797621	DESIGN
Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9994681644590894	WITHOUT_CLASSIFICATION	5.318355409106533E-4	DESIGN
private final List persisters = new ArrayList();	WITHOUT_CLASSIFICATION	0.9989352219881387	WITHOUT_CLASSIFICATION	0.001064778011861352	DESIGN
package	WITHOUT_CLASSIFICATION	0.9993601709670066	WITHOUT_CLASSIFICATION	6.398290329934237E-4	DESIGN
NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999553831107805	WITHOUT_CLASSIFICATION	4.461688921949927E-5	DESIGN
private final List scalarTypes = new ArrayList(); private final List scalarColumnAliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9996951232466212	WITHOUT_CLASSIFICATION	3.0487675337884546E-4	DESIGN
Now, process the returns	WITHOUT_CLASSIFICATION	0.9999784660393618	WITHOUT_CLASSIFICATION	2.1533960638140248E-5	DESIGN
private List collectionOwnerAliases = new ArrayList(); private List collectionAliases = new ArrayList(); private List collectionPersisters = new ArrayList(); private List collectionResults = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999050038968004	WITHOUT_CLASSIFICATION	9.499610319974576E-5	DESIGN
already been processed...	WITHOUT_CLASSIFICATION	0.9998779047677063	WITHOUT_CLASSIFICATION	1.220952322936914E-4	DESIGN
already been processed...	WITHOUT_CLASSIFICATION	0.9998779047677063	WITHOUT_CLASSIFICATION	1.220952322936914E-4	DESIGN
Make sure the owner alias is known...	WITHOUT_CLASSIFICATION	0.9998578787601381	WITHOUT_CLASSIFICATION	1.4212123986186246E-4	DESIGN
first, break down the returns into maps keyed by alias so that role returns can be more easily resolved to their owners	WITHOUT_CLASSIFICATION	0.9852036002346449	WITHOUT_CLASSIFICATION	0.01479639976535501	DESIGN
scalarColumnAliases.add( typeReturn.getColumnAlias() ); scalarTypes.add( typeReturn.getType() );	WITHOUT_CLASSIFICATION	0.9992564144695602	WITHOUT_CLASSIFICATION	7.435855304398626E-4	DESIGN
If this return's alias has not been processed yet, do so b4 further processing of this return	WITHOUT_CLASSIFICATION	0.9997114248781783	WITHOUT_CLASSIFICATION	2.8857512182172974E-4	DESIGN
collectionOwnerAliases.add( ownerAlias );	WITHOUT_CLASSIFICATION	0.9992564144695602	WITHOUT_CLASSIFICATION	7.435855304398626E-4	DESIGN
for merging of versioned entities, we consider the version having been changed only when: 1) the two version values are different; AND 2) The target actually represents database state! This second condition is a special case which allows an entity to be merged during the same transaction (though during a seperate operation) in which it was originally persisted/saved	WITHOUT_CLASSIFICATION	0.9999994356121619	WITHOUT_CLASSIFICATION	5.643878380611706E-7	DESIGN
this is the second pass through on a merge op, so here we limit the replacement to associations types (value types were already replaced during the first pass)	WITHOUT_CLASSIFICATION	0.9911990725102402	WITHOUT_CLASSIFICATION	0.008800927489759788	DESIGN
EARLY EXIT	WITHOUT_CLASSIFICATION	0.9998680402420813	WITHOUT_CLASSIFICATION	1.3195975791871172E-4	DESIGN
cascade-save to collections AFTER the collection owner was saved	WITHOUT_CLASSIFICATION	0.9995220972835817	WITHOUT_CLASSIFICATION	4.779027164184466E-4	DESIGN
Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.997831923288197	WITHOUT_CLASSIFICATION	0.002168076711802961	DESIGN
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999494290652662	WITHOUT_CLASSIFICATION	5.057093473380132E-5	DESIGN
currently only the Hibernate-supplied DbTimestampType is supported here	WITHOUT_CLASSIFICATION	0.9991986902928085	WITHOUT_CLASSIFICATION	8.013097071914872E-4	DESIGN
This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9944370726457495	WITHOUT_CLASSIFICATION	0.005562927354250521	DESIGN
make a new one	WITHOUT_CLASSIFICATION	0.9992679564412841	WITHOUT_CLASSIFICATION	7.320435587159625E-4	DESIGN
not so sure this is even valid subtree. but if it was, it'd represent two unrelated table references...	WITHOUT_CLASSIFICATION	0.9991905204477654	WITHOUT_CLASSIFICATION	8.094795522345457E-4	DESIGN
(NOT (GT a b) ) => (LE a b)	WITHOUT_CLASSIFICATION	0.9998241012588092	WITHOUT_CLASSIFICATION	1.758987411907715E-4	DESIGN
private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.999847894746759	WITHOUT_CLASSIFICATION	1.5210525324100654E-4	DESIGN
include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9998117053995428	WITHOUT_CLASSIFICATION	1.8829460045714726E-4	DESIGN
sqlResultTypes = selectClause.getSqlResultTypes();	WITHOUT_CLASSIFICATION	0.9998907403978173	WITHOUT_CLASSIFICATION	1.092596021825539E-4	DESIGN
by default	WITHOUT_CLASSIFICATION	0.9998169950992828	WITHOUT_CLASSIFICATION	1.830049007171914E-4	DESIGN
This is now handled earlier in this method.	WITHOUT_CLASSIFICATION	0.9946659088427598	WITHOUT_CLASSIFICATION	0.00533409115724014	DESIGN
-- Loader implementation --	WITHOUT_CLASSIFICATION	0.9998678499680237	WITHOUT_CLASSIFICATION	1.321500319763452E-4	DESIGN
-- Loader overrides --	WITHOUT_CLASSIFICATION	0.999910408387901	WITHOUT_CLASSIFICATION	8.959161209896092E-5	DESIGN
(NOT (IS_NULL a b) ) => (IS_NOT_NULL a b)	WITHOUT_CLASSIFICATION	0.9991598501463332	WITHOUT_CLASSIFICATION	8.401498536667946E-4	DESIGN
NONE, because its the requested lock mode, not the actual!	WITHOUT_CLASSIFICATION	0.9999537459054668	WITHOUT_CLASSIFICATION	4.625409453317844E-5	DESIGN
meant to handle dynamic instantiation queries...	WITHOUT_CLASSIFICATION	0.9975516318975404	WITHOUT_CLASSIFICATION	0.0024483681024595563	DESIGN
--- Query translator methods ---	WITHOUT_CLASSIFICATION	0.9989913900876961	WITHOUT_CLASSIFICATION	0.0010086099123038361	DESIGN
-- Implementation private methods --	WITHOUT_CLASSIFICATION	0.9993109265346254	WITHOUT_CLASSIFICATION	6.890734653746941E-4	DESIGN
deduplicate unique constraints sharing the same columns this is needed by Hibernate Annotations since it creates automagically unique constraints for the user	WITHOUT_CLASSIFICATION	0.9994651038525675	WITHOUT_CLASSIFICATION	5.348961474324742E-4	DESIGN
Try to find out the name of the primary key to create it as identity if the IdentityGenerator is used	WITHOUT_CLASSIFICATION	0.9989865849950887	WITHOUT_CLASSIFICATION	0.0010134150049112174	DESIGN
to support dialects that have their own identity data type	WITHOUT_CLASSIFICATION	0.9770038739288743	WITHOUT_CLASSIFICATION	0.022996126071125673	DESIGN
Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999521990504825	WITHOUT_CLASSIFICATION	4.7800949517458274E-5	DESIGN
used also for generation of FK names!	WITHOUT_CLASSIFICATION	0.9982759361592702	WITHOUT_CLASSIFICATION	0.001724063840729652	DESIGN
usually useless	WITHOUT_CLASSIFICATION	0.9998783996076845	WITHOUT_CLASSIFICATION	1.2160039231546504E-4	DESIGN
added this caching as I noticed that getType() is being called multiple times...	WITHOUT_CLASSIFICATION	0.9982777445920348	WITHOUT_CLASSIFICATION	0.001722255407965201	DESIGN
do not add unique constraint on DB not supporting unique and nullable columns	WITHOUT_CLASSIFICATION	0.9995244790838532	WITHOUT_CLASSIFICATION	4.755209161468385E-4	DESIGN
for backward compatibility, disable this:	WITHOUT_CLASSIFICATION	0.9997512548148407	WITHOUT_CLASSIFICATION	2.487451851592674E-4	DESIGN
may be final may be final may be final	WITHOUT_CLASSIFICATION	0.9934877109889427	WITHOUT_CLASSIFICATION	0.006512289011057328	DESIGN
may be final	WITHOUT_CLASSIFICATION	0.9988920239091097	WITHOUT_CLASSIFICATION	0.0011079760908902392	DESIGN
may be final	WITHOUT_CLASSIFICATION	0.9988920239091097	WITHOUT_CLASSIFICATION	0.0011079760908902392	DESIGN
Custom SQL	WITHOUT_CLASSIFICATION	0.9998684476940457	WITHOUT_CLASSIFICATION	1.3155230595427987E-4	DESIGN
Primary key constraint	WITHOUT_CLASSIFICATION	0.9999207415277533	WITHOUT_CLASSIFICATION	7.925847224657306E-5	DESIGN
the root of the incoming property path matched one of the embedded composite identifier properties	WITHOUT_CLASSIFICATION	0.999971822931998	WITHOUT_CLASSIFICATION	2.8177068001932205E-5	DESIGN
ignore it...	WITHOUT_CLASSIFICATION	0.998893414909144	WITHOUT_CLASSIFICATION	0.0011065850908561056	DESIGN
flat recursive algorithm	WITHOUT_CLASSIFICATION	0.9993076787283901	WITHOUT_CLASSIFICATION	6.923212716099947E-4	DESIGN
an identifier mapper => getKey will be included in the getNonDuplicatedPropertyIterator() and checked later, so it needs to be excluded	WITHOUT_CLASSIFICATION	0.999017127106197	WITHOUT_CLASSIFICATION	9.828728938031236E-4	DESIGN
if the hibernate-mapping did not specify a schema/catalog, use the defaults specified by properties - but note that if the schema/catalog were specified in hibernate-mapping, or as params, they will already be initialized and will override the values set here (they are in identifierGeneratorProperties)	WITHOUT_CLASSIFICATION	0.977083790204534	WITHOUT_CLASSIFICATION	0.0229162097954661	DESIGN
pass the entity-name, if not a collection-id	WITHOUT_CLASSIFICATION	0.999898653886673	WITHOUT_CLASSIFICATION	1.0134611332702882E-4	DESIGN
Custom SQL	WITHOUT_CLASSIFICATION	0.9998684476940457	WITHOUT_CLASSIFICATION	1.3155230595427987E-4	DESIGN
Primary key constraint	WITHOUT_CLASSIFICATION	0.9999207415277533	WITHOUT_CLASSIFICATION	7.925847224657306E-5	DESIGN
pass the column name (a generated id almost always has a single column)	WITHOUT_CLASSIFICATION	0.999909853738614	WITHOUT_CLASSIFICATION	9.014626138598016E-5	DESIGN
needed to satisfy KeyValue	WITHOUT_CLASSIFICATION	0.9997965494790572	WITHOUT_CLASSIFICATION	2.0345052094281047E-4	DESIGN
empty means no scoping	WITHOUT_CLASSIFICATION	0.9998581338078883	WITHOUT_CLASSIFICATION	1.4186619211170321E-4	DESIGN
index should be last column listed	WITHOUT_CLASSIFICATION	0.997489095039988	WITHOUT_CLASSIFICATION	0.002510904960012094	DESIGN
if it is a formula index, use the element columns in the PK	WITHOUT_CLASSIFICATION	0.999245287483067	WITHOUT_CLASSIFICATION	7.547125169331245E-4	DESIGN
don't create a unique key, 'cos some databases don't like a UK on nullable columns	WITHOUT_CLASSIFICATION	0.9863793236215411	WITHOUT_CLASSIFICATION	0.013620676378458778	DESIGN
ArrayList list = new ArrayList();list.addAll( getKey().getConstraintColumns() );list.addAll( getIndex().getConstraintColumns() );getCollectionTable().createUniqueKey(list);	WITHOUT_CLASSIFICATION	0.9999436805892956	WITHOUT_CLASSIFICATION	5.631941070443756E-5	DESIGN
}	WITHOUT_CLASSIFICATION	0.9999078496068791	WITHOUT_CLASSIFICATION	9.215039312096722E-5	DESIGN
no foreign key element of for a one-to-many	WITHOUT_CLASSIFICATION	0.9992768017270546	WITHOUT_CLASSIFICATION	7.231982729453801E-4	DESIGN
TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.6557903681540603	DESIGN	0.3442096318459397	WITHOUT_CLASSIFICATION
the case of a foreign key to something other than the pk is handled in createPropertyRefConstraints	WITHOUT_CLASSIFICATION	0.9999278522936198	WITHOUT_CLASSIFICATION	7.214770638021078E-5	DESIGN
TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.6557903681540603	DESIGN	0.3442096318459397	WITHOUT_CLASSIFICATION
if the property mapping consists of all formulas, make it non-updateable	WITHOUT_CLASSIFICATION	0.9998803056071618	WITHOUT_CLASSIFICATION	1.1969439283811171E-4	DESIGN
columnUpdateability.length==0 ||	WITHOUT_CLASSIFICATION	0.999292518390458	WITHOUT_CLASSIFICATION	7.074816095421642E-4	DESIGN
if the property mapping consists of all formulas, make it insertable	WITHOUT_CLASSIFICATION	0.9998803056071618	WITHOUT_CLASSIFICATION	1.1969439283811171E-4	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9990189212298354	WITHOUT_CLASSIFICATION	9.810787701646007E-4	DESIGN
expected type is intrinsic here...	WITHOUT_CLASSIFICATION	0.9951647630453174	WITHOUT_CLASSIFICATION	0.004835236954682482	DESIGN
}	WITHOUT_CLASSIFICATION	0.9999078496068791	WITHOUT_CLASSIFICATION	9.215039312096722E-5	DESIGN
}	WITHOUT_CLASSIFICATION	0.9999078496068791	WITHOUT_CLASSIFICATION	9.215039312096722E-5	DESIGN
return memberPersister.getPropertyType(propertyName);	WITHOUT_CLASSIFICATION	0.9993603456102749	WITHOUT_CLASSIFICATION	6.396543897250504E-4	DESIGN
return memberPersister.toColumns(alias, propertyName);	WITHOUT_CLASSIFICATION	0.9993616178821987	WITHOUT_CLASSIFICATION	6.383821178013457E-4	DESIGN
return memberPersister.getType();	WITHOUT_CLASSIFICATION	0.9993603456102749	WITHOUT_CLASSIFICATION	6.396543897250504E-4	DESIGN
&& !indexIsFormula	WITHOUT_CLASSIFICATION	0.999872781251003	WITHOUT_CLASSIFICATION	1.2721874899709006E-4	DESIGN
return !isOneToMany();	WITHOUT_CLASSIFICATION	0.9998660994182484	WITHOUT_CLASSIFICATION	1.339005817516455E-4	DESIGN
instanceof AssociationType;	WITHOUT_CLASSIFICATION	0.999808726268052	WITHOUT_CLASSIFICATION	1.9127373194803546E-4	DESIGN
we need to determine the best way to know that two joinables represent a single many-to-many...	WITHOUT_CLASSIFICATION	0.9683829790776612	WITHOUT_CLASSIFICATION	0.03161702092233877	DESIGN
strip leading ','	WITHOUT_CLASSIFICATION	0.999893803290287	WITHOUT_CLASSIFICATION	1.061967097129901E-4	DESIGN
public boolean isSubselectLoadable();	WITHOUT_CLASSIFICATION	0.9994325887772606	WITHOUT_CLASSIFICATION	5.674112227393259E-4	DESIGN
KEY	WITHOUT_CLASSIFICATION	0.9998682443201133	WITHOUT_CLASSIFICATION	1.3175567988672212E-4	DESIGN
columns	WITHOUT_CLASSIFICATION	0.9998680402420813	WITHOUT_CLASSIFICATION	1.3195975791871172E-4	DESIGN
SQL statements	WITHOUT_CLASSIFICATION	0.9998740958691271	WITHOUT_CLASSIFICATION	1.259041308727615E-4	DESIGN
extra information about the element type	WITHOUT_CLASSIFICATION	0.9965717402588878	WITHOUT_CLASSIFICATION	0.0034282597411121707	DESIGN
types	WITHOUT_CLASSIFICATION	0.9998147032309945	WITHOUT_CLASSIFICATION	1.8529676900545683E-4	DESIGN
custom sql	WITHOUT_CLASSIFICATION	0.9998876096111278	WITHOUT_CLASSIFICATION	1.1239038887219458E-4	DESIGN
private final String unquotedIdentifierColumnName;	WITHOUT_CLASSIFICATION	0.9970407202321026	WITHOUT_CLASSIFICATION	0.0029592797678974045	DESIGN
dynamic filters specifically for many-to-many inside the collection	WITHOUT_CLASSIFICATION	0.9973456392055293	WITHOUT_CLASSIFICATION	0.002654360794470589	DESIGN
dynamic filters for the collection	WITHOUT_CLASSIFICATION	0.9983875644530371	WITHOUT_CLASSIFICATION	0.0016124355469629703	DESIGN
NativeSQL: collect key column and auto-aliases	WITHOUT_CLASSIFICATION	0.9996962271348022	WITHOUT_CLASSIFICATION	3.037728651978278E-4	DESIGN
unquotedKeyColumnNames = StringHelper.unQuote(keyColumnAliases);	WITHOUT_CLASSIFICATION	0.9998907403978173	WITHOUT_CLASSIFICATION	1.092596021825539E-4	DESIGN
ELEMENT	WITHOUT_CLASSIFICATION	0.9998680402420813	WITHOUT_CLASSIFICATION	1.3195975791871172E-4	DESIGN
NativeSQL: collect element column and auto-aliases	WITHOUT_CLASSIFICATION	0.9994762817698201	WITHOUT_CLASSIFICATION	5.237182301800025E-4	DESIGN
INDEX AND ROW SELECT	WITHOUT_CLASSIFICATION	0.9998756699362745	WITHOUT_CLASSIFICATION	1.243300637254564E-4	DESIGN
NativeSQL: collect index column and auto-aliases	WITHOUT_CLASSIFICATION	0.9994481151129208	WITHOUT_CLASSIFICATION	5.518848870791539E-4	DESIGN
unquotedIdentifierColumnName = identifierColumnAlias;	WITHOUT_CLASSIFICATION	0.9998907403978173	WITHOUT_CLASSIFICATION	1.092596021825539E-4	DESIGN
unquotedIdentifierColumnName = null;	WITHOUT_CLASSIFICATION	0.9998920504383229	WITHOUT_CLASSIFICATION	1.0794956167710891E-4	DESIGN
GENERATE THE SQL:	WITHOUT_CLASSIFICATION	0.9998746463747002	WITHOUT_CLASSIFICATION	1.2535362529968264E-4	DESIGN
for non-arrays, we don't need to know the element class elementType.returnedClass();	WITHOUT_CLASSIFICATION	0.9957419987820407	WITHOUT_CLASSIFICATION	0.004258001217959248	DESIGN
not all classpersisters implement PropertyMapping!	WITHOUT_CLASSIFICATION	0.9984736861102048	WITHOUT_CLASSIFICATION	0.0015263138897951324	DESIGN
Handle any filters applied to this collection	WITHOUT_CLASSIFICATION	0.9667352295629275	WITHOUT_CLASSIFICATION	0.03326477043707249	DESIGN
Handle any filters applied to this collection for many-to-many	WITHOUT_CLASSIFICATION	0.9390593908407523	WITHOUT_CLASSIFICATION	0.060940609159247865	DESIGN
if there is a user-specified loader, return that TODO: filters!?	WITHOUT_CLASSIFICATION	0.600093975879229	DESIGN	0.3999060241207709	WITHOUT_CLASSIFICATION
Take care of any entities that might have been evicted!	WITHOUT_CLASSIFICATION	0.9987575903048639	WITHOUT_CLASSIFICATION	0.0012424096951361443	DESIGN
strip leading ','	WITHOUT_CLASSIFICATION	0.999893803290287	WITHOUT_CLASSIFICATION	1.061967097129901E-4	DESIGN
Run a subquery loader	WITHOUT_CLASSIFICATION	0.999723584404982	WITHOUT_CLASSIFICATION	2.764155950179572E-4	DESIGN
needed by arrays	WITHOUT_CLASSIFICATION	0.9997196274689002	WITHOUT_CLASSIFICATION	2.80372531099816E-4	DESIGN
TODO: something with formulas...	WITHOUT_CLASSIFICATION	0.7710389183612377	WITHOUT_CLASSIFICATION	0.22896108163876228	DESIGN
an assertion	WITHOUT_CLASSIFICATION	0.9999034647197017	WITHOUT_CLASSIFICATION	9.653528029830855E-5	DESIGN
Remove all the old entries	WITHOUT_CLASSIFICATION	0.9999320982817012	WITHOUT_CLASSIFICATION	6.790171829878891E-5	DESIGN
create all the new entries	WITHOUT_CLASSIFICATION	0.9999736932407326	WITHOUT_CLASSIFICATION	2.630675926750252E-5	DESIGN
&& !indexIsFormula	WITHOUT_CLASSIFICATION	0.999872781251003	WITHOUT_CLASSIFICATION	1.2721874899709006E-4	DESIGN
&& !indexIsFormula	WITHOUT_CLASSIFICATION	0.999872781251003	WITHOUT_CLASSIFICATION	1.2721874899709006E-4	DESIGN
delete all the deleted entries	WITHOUT_CLASSIFICATION	0.9999743535264674	WITHOUT_CLASSIFICATION	2.5646473532726497E-5	DESIGN
insert all the new entries	WITHOUT_CLASSIFICATION	0.9999749062945367	WITHOUT_CLASSIFICATION	2.5093705463289756E-5	DESIGN
==elementType ??	WITHOUT_CLASSIFICATION	0.9998176032549984	WITHOUT_CLASSIFICATION	1.8239674500161292E-4	DESIGN
update all the modified entries	WITHOUT_CLASSIFICATION	0.9999914422332155	WITHOUT_CLASSIFICATION	8.557766784579295E-6	DESIGN
identifier collections not supported for 1-to-many	WITHOUT_CLASSIFICATION	0.9993231155515783	WITHOUT_CLASSIFICATION	6.76884448421756E-4	DESIGN
update removed rows fks to null	WITHOUT_CLASSIFICATION	0.999441427942246	WITHOUT_CLASSIFICATION	5.585720577540688E-4	DESIGN
will still be issued when it used to be null	WITHOUT_CLASSIFICATION	0.9843969148621033	WITHOUT_CLASSIFICATION	0.015603085137896747	DESIGN
now update all changed or added rows fks	WITHOUT_CLASSIFICATION	0.9999994531783815	WITHOUT_CLASSIFICATION	5.468216185042387E-7	DESIGN
buf.append( selectFragment( lhsAlias, "" ) )ignore suffix for collection columns!	WITHOUT_CLASSIFICATION	0.9798694528449027	WITHOUT_CLASSIFICATION	0.020130547155097364	DESIGN
use suffix for the entity columns	WITHOUT_CLASSIFICATION	0.9994656379587984	WITHOUT_CLASSIFICATION	5.343620412016271E-4	DESIGN
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999415633424811	WITHOUT_CLASSIFICATION	5.8436657518986036E-5	DESIGN
private final String rootTableName;	WITHOUT_CLASSIFICATION	0.9970407202321026	WITHOUT_CLASSIFICATION	0.0029592797678974045	DESIGN
INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9998740958691271	WITHOUT_CLASSIFICATION	1.259041308727615E-4	DESIGN
Custom SQL	WITHOUT_CLASSIFICATION	0.9998684476940457	WITHOUT_CLASSIFICATION	1.3155230595427987E-4	DESIGN
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999415633424811	WITHOUT_CLASSIFICATION	5.8436657518986036E-5	DESIGN
Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999470423958983	WITHOUT_CLASSIFICATION	5.295760410167519E-5	DESIGN
This could also just be true all the time...	WITHOUT_CLASSIFICATION	0.9966410649237213	WITHOUT_CLASSIFICATION	0.003358935076278579	DESIGN
chop the last union (all)	WITHOUT_CLASSIFICATION	0.9999501567766773	WITHOUT_CLASSIFICATION	4.984322332276281E-5	DESIGN
TODO: check this....	WITHOUT_CLASSIFICATION	0.882820331882272	WITHOUT_CLASSIFICATION	0.11717966811772791	DESIGN
INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9998740958691271	WITHOUT_CLASSIFICATION	1.259041308727615E-4	DESIGN
properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9989229427233176	WITHOUT_CLASSIFICATION	0.0010770572766823142	DESIGN
the closure of all properties in the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.998981530158631	WITHOUT_CLASSIFICATION	0.0010184698413689425	DESIGN
the closure of all columns used by the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9979807880126504	WITHOUT_CLASSIFICATION	0.0020192119873495753	DESIGN
subclass discrimination works by assigning particular values to certain combinations of null primary key values in the outer join using an SQL CASE	WITHOUT_CLASSIFICATION	0.9998776892856732	WITHOUT_CLASSIFICATION	1.22310714326756E-4	DESIGN
MULTITABLES	WITHOUT_CLASSIFICATION	0.9998740958691271	WITHOUT_CLASSIFICATION	1.259041308727615E-4	DESIGN
Custom sql	WITHOUT_CLASSIFICATION	0.9998684476940457	WITHOUT_CLASSIFICATION	1.3155230595427987E-4	DESIGN
subclass closure properties	WITHOUT_CLASSIFICATION	0.9998959051869966	WITHOUT_CLASSIFICATION	1.0409481300342677E-4	DESIGN
SUBCLASSES	WITHOUT_CLASSIFICATION	0.9998680402420813	WITHOUT_CLASSIFICATION	1.3195975791871172E-4	DESIGN
( (Column) model.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9991534854389535	WITHOUT_CLASSIFICATION	8.46514561046412E-4	DESIGN
( (Column) sc.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9991534854389535	WITHOUT_CLASSIFICATION	8.46514561046412E-4	DESIGN
don't need subclass tables, because they can't appear in conditions	WITHOUT_CLASSIFICATION	0.9898363311872174	WITHOUT_CLASSIFICATION	0.010163668812782535	DESIGN
special case where we need to force incloude all subclass joins	WITHOUT_CLASSIFICATION	0.998464742804249	WITHOUT_CLASSIFICATION	0.001535257195751038	DESIGN
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999415633424811	WITHOUT_CLASSIFICATION	5.8436657518986036E-5	DESIGN
properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9989229427233176	WITHOUT_CLASSIFICATION	0.0010770572766823142	DESIGN
the closure of all columns used by the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9979807880126504	WITHOUT_CLASSIFICATION	0.0020192119873495753	DESIGN
get em on the second pass!	WITHOUT_CLASSIFICATION	0.9999643606516733	WITHOUT_CLASSIFICATION	3.5639348326760456E-5	DESIGN
now look up the object we are really interested in! (this lets us correctly handle proxies and multi-row or multi-column queries)	WITHOUT_CLASSIFICATION	0.99992058034524	WITHOUT_CLASSIFICATION	7.941965475995331E-5	DESIGN
discriminator column	WITHOUT_CLASSIFICATION	0.9999099591159314	WITHOUT_CLASSIFICATION	9.004088406865362E-5	DESIGN
INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9998740958691271	WITHOUT_CLASSIFICATION	1.259041308727615E-4	DESIGN
private final Map propertyTableNumbersByName = new HashMap();	WITHOUT_CLASSIFICATION	0.9996508231899545	WITHOUT_CLASSIFICATION	3.491768100455633E-4	DESIGN
CLASS + TABLE	WITHOUT_CLASSIFICATION	0.999953757682979	WITHOUT_CLASSIFICATION	4.624231702108753E-5	DESIGN
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9998740958691271	WITHOUT_CLASSIFICATION	1.259041308727615E-4	DESIGN
PROPERTIES	WITHOUT_CLASSIFICATION	0.9998680402420813	WITHOUT_CLASSIFICATION	1.3195975791871172E-4	DESIGN
SUBCLASSES	WITHOUT_CLASSIFICATION	0.9998680402420813	WITHOUT_CLASSIFICATION	1.3195975791871172E-4	DESIGN
Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999470423958983	WITHOUT_CLASSIFICATION	5.295760410167519E-5	DESIGN
JOINS	WITHOUT_CLASSIFICATION	0.9998680402420813	WITHOUT_CLASSIFICATION	1.3195975791871172E-4	DESIGN
propertyTableNumbersByName.put( prop.getName(), join );	WITHOUT_CLASSIFICATION	0.9994317151678506	WITHOUT_CLASSIFICATION	5.682848321493862E-4	DESIGN
Access cached SQL	WITHOUT_CLASSIFICATION	0.9998957328770074	WITHOUT_CLASSIFICATION	1.0426712299261925E-4	DESIGN
figure out which tables need to be fetched	WITHOUT_CLASSIFICATION	0.9927262442765993	WITHOUT_CLASSIFICATION	0.007273755723400653	DESIGN
figure out which columns are needed	WITHOUT_CLASSIFICATION	0.9994450348967584	WITHOUT_CLASSIFICATION	5.549651032415134E-4	DESIGN
figure out which formulas are needed	WITHOUT_CLASSIFICATION	0.9994450348967584	WITHOUT_CLASSIFICATION	5.549651032415134E-4	DESIGN
render the SQL	WITHOUT_CLASSIFICATION	0.9999557901282221	WITHOUT_CLASSIFICATION	4.420987177791031E-5	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9990189212298354	WITHOUT_CLASSIFICATION	9.810787701646007E-4	DESIGN
moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9909335318105137	WITHOUT_CLASSIFICATION	0.009066468189486263	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992564144695602	WITHOUT_CLASSIFICATION	7.435855304398626E-4	DESIGN
The optional SQL string defined in the where attribute	WITHOUT_CLASSIFICATION	0.9998451159970825	WITHOUT_CLASSIFICATION	1.5488400291760606E-4	DESIGN
information about lazy properties of this class	WITHOUT_CLASSIFICATION	0.9968208818084828	WITHOUT_CLASSIFICATION	0.0031791181915172342	DESIGN
information about all properties in class hierarchy	WITHOUT_CLASSIFICATION	0.9980351189658044	WITHOUT_CLASSIFICATION	0.0019648810341955964	DESIGN
information about all columns/formulas in class hierarchy	WITHOUT_CLASSIFICATION	0.9976111275876803	WITHOUT_CLASSIFICATION	0.002388872412319659	DESIGN
dynamic filters attached to the class-level	WITHOUT_CLASSIFICATION	0.99964095086763	WITHOUT_CLASSIFICATION	3.5904913237000754E-4	DESIGN
SQL strings	WITHOUT_CLASSIFICATION	0.9997442076372853	WITHOUT_CLASSIFICATION	2.5579236271469706E-4	DESIGN
for objects that came in via update()	WITHOUT_CLASSIFICATION	0.9988997992307734	WITHOUT_CLASSIFICATION	0.0011002007692265609	DESIGN
PROPERTIES	WITHOUT_CLASSIFICATION	0.9998680402420813	WITHOUT_CLASSIFICATION	1.3195975791871172E-4	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992564144695602	WITHOUT_CLASSIFICATION	7.435855304398626E-4	DESIGN
IDENTIFIER	WITHOUT_CLASSIFICATION	0.9998680402420813	WITHOUT_CLASSIFICATION	1.3195975791871172E-4	DESIGN
VERSION	WITHOUT_CLASSIFICATION	0.9998680402420813	WITHOUT_CLASSIFICATION	1.3195975791871172E-4	DESIGN
WHERE STRING	WITHOUT_CLASSIFICATION	0.9998740958691271	WITHOUT_CLASSIFICATION	1.259041308727615E-4	DESIGN
SUBCLASS PROPERTY CLOSURE	WITHOUT_CLASSIFICATION	0.9998443304314125	WITHOUT_CLASSIFICATION	1.5566956858758022E-4	DESIGN
before add :-)	WITHOUT_CLASSIFICATION	0.9999855155807706	WITHOUT_CLASSIFICATION	1.44844192292426E-5	DESIGN
Handle any filters applied to the class level	WITHOUT_CLASSIFICATION	0.9993374467394601	WITHOUT_CLASSIFICATION	6.625532605399486E-4	DESIGN
only one-to-one is lazy fetched	WITHOUT_CLASSIFICATION	0.9994604492261098	WITHOUT_CLASSIFICATION	5.395507738902404E-4	DESIGN
note early exit here:	WITHOUT_CLASSIFICATION	0.999659075615663	WITHOUT_CLASSIFICATION	3.409243843369735E-4	DESIGN
object have been loaded with setReadOnly(true); HHH-2236	WITHOUT_CLASSIFICATION	0.9995076054036834	WITHOUT_CLASSIFICATION	4.923945963165319E-4	DESIGN
NOTE: this assumes something about how propertySelectFragment is implemented by the subclass!	WITHOUT_CLASSIFICATION	0.9999891039683535	WITHOUT_CLASSIFICATION	1.0896031646460714E-5	DESIGN
strip leading ", "	WITHOUT_CLASSIFICATION	0.9999207998639055	WITHOUT_CLASSIFICATION	7.920013609443467E-5	DESIGN
if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9997035448264883	WITHOUT_CLASSIFICATION	2.964551735117586E-4	DESIGN
otherwise return the "hydrated" state (ie. associations are not resolved)	WITHOUT_CLASSIFICATION	0.9997023258610118	WITHOUT_CLASSIFICATION	2.976741389882456E-4	DESIGN
null owner ok??	WITHOUT_CLASSIFICATION	0.9998809152987705	WITHOUT_CLASSIFICATION	1.1908470122944146E-4	DESIGN
null sql means that the only lazy properties are shared PK one-to-one associations which are handled differently in the Type#nullSafeGet code...	WITHOUT_CLASSIFICATION	0.9989236477893373	WITHOUT_CLASSIFICATION	0.0010763522106626384	DESIGN
Create a new FROM node for the referenced class.	WITHOUT_CLASSIFICATION	0.9992729712626501	WITHOUT_CLASSIFICATION	7.27028737349957E-4	DESIGN
the difficulty here is exactly what do we update in order to force the version to be incremented in the db...	WITHOUT_CLASSIFICATION	0.9382040271511547	WITHOUT_CLASSIFICATION	0.06179597284884536	DESIGN
performance op to avoid the array search	WITHOUT_CLASSIFICATION	0.9981319065025873	WITHOUT_CLASSIFICATION	0.0018680934974126247	DESIGN
properly handle property-ref-based associations	WITHOUT_CLASSIFICATION	0.9985945029248816	WITHOUT_CLASSIFICATION	0.0014054970751184368	DESIGN
Enable for HHH-440, which we don't like:	WITHOUT_CLASSIFICATION	0.9989053178443432	WITHOUT_CLASSIFICATION	0.0010946821556567915	DESIGN
ALIASES	WITHOUT_CLASSIFICATION	0.9998680402420813	WITHOUT_CLASSIFICATION	1.3195975791871172E-4	DESIGN
aliases named identifier ( alias.idname )	WITHOUT_CLASSIFICATION	0.9991146780014453	WITHOUT_CLASSIFICATION	8.853219985546724E-4	DESIGN
aliases for composite-id's	WITHOUT_CLASSIFICATION	0.9997447124681286	WITHOUT_CLASSIFICATION	2.552875318714124E-4	DESIGN
Fetch embedded identifiers propertynames from the "virtual" identifier component	WITHOUT_CLASSIFICATION	0.9996785169792615	WITHOUT_CLASSIFICATION	3.2148302073857336E-4	DESIGN
embedded composite ids ( alias.idname1, alias.idname2 )	WITHOUT_CLASSIFICATION	0.9988906988578201	WITHOUT_CLASSIFICATION	0.0011093011421799762	DESIGN
TODO: skip formulas?	WITHOUT_CLASSIFICATION	0.870333779647591	WITHOUT_CLASSIFICATION	0.12966622035240896	DESIGN
don't need filters for the static loaders	WITHOUT_CLASSIFICATION	0.9935801853057629	WITHOUT_CLASSIFICATION	0.006419814694237224	DESIGN
do two passes, for collection property-ref!	WITHOUT_CLASSIFICATION	0.9934758142867789	WITHOUT_CLASSIFICATION	0.0065241857132210665	DESIGN
select the correct row by either pk or rowid	WITHOUT_CLASSIFICATION	0.9997129984504088	WITHOUT_CLASSIFICATION	2.87001549591124E-4	DESIGN
TODO: eventually, rowIdName[j]	WITHOUT_CLASSIFICATION	0.7438869425473015	WITHOUT_CLASSIFICATION	0.2561130574526985	DESIGN
this is a property of the table, which we are updating	WITHOUT_CLASSIFICATION	0.9995307793871979	WITHOUT_CLASSIFICATION	4.692206128020865E-4	DESIGN
special shortcut for id properties, skip the join! this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9995689130196083	WITHOUT_CLASSIFICATION	4.310869803917553E-4	DESIGN
we are using "all" or "dirty" property-based optimistic locking	WITHOUT_CLASSIFICATION	0.9989532079508084	WITHOUT_CLASSIFICATION	0.001046792049191485	DESIGN
nothing to do; even if the operand is a parameter, no way we could infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9905185345916154	WITHOUT_CLASSIFICATION	0.009481465408384607	DESIGN
this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9972124669256278	WITHOUT_CLASSIFICATION	0.0027875330743722185	DESIGN
add normal properties	WITHOUT_CLASSIFICATION	0.999968138895246	WITHOUT_CLASSIFICATION	3.1861104753965456E-5	DESIGN
add the discriminator	WITHOUT_CLASSIFICATION	0.9999894094153537	WITHOUT_CLASSIFICATION	1.0590584646282755E-5	DESIGN
more specifically : "? [op] datetime" 1) if the operator is MINUS, the param needs to be of some datetime type 2) if the operator is PLUS, the param needs to be of some numeric type	WITHOUT_CLASSIFICATION	0.9411648410219444	WITHOUT_CLASSIFICATION	0.05883515897805554	DESIGN
add normal properties	WITHOUT_CLASSIFICATION	0.999968138895246	WITHOUT_CLASSIFICATION	3.1861104753965456E-5	DESIGN
this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9972124669256278	WITHOUT_CLASSIFICATION	0.0027875330743722185	DESIGN
add the discriminator	WITHOUT_CLASSIFICATION	0.9999894094153537	WITHOUT_CLASSIFICATION	1.0590584646282755E-5	DESIGN
add the primary key	WITHOUT_CLASSIFICATION	0.9999952132862638	WITHOUT_CLASSIFICATION	4.786713736129694E-6	DESIGN
delegate already handles PK columns	WITHOUT_CLASSIFICATION	0.9997942281966127	WITHOUT_CLASSIFICATION	2.0577180338728985E-4	DESIGN
we can't batch joined inserts, especially not if it is an identity insert; nor can we batch statements where the expectation is based on an output param	WITHOUT_CLASSIFICATION	0.9994174019018162	WITHOUT_CLASSIFICATION	5.82598098183803E-4	DESIGN
Render the SQL query	WITHOUT_CLASSIFICATION	0.9999570462267188	WITHOUT_CLASSIFICATION	4.2953773281231176E-5	DESIGN
Write the values of fields onto the prepared statement - we MUST use the state at the time the insert was issued (cos of foreign key constraints). Not necessarily the object's current state	WITHOUT_CLASSIFICATION	0.9999901660007408	WITHOUT_CLASSIFICATION	9.833999259212341E-6	DESIGN
TODO : shouldnt inserts be Expectations.NONE?	WITHOUT_CLASSIFICATION	0.6149908952435215	DESIGN	0.3850091047564786	WITHOUT_CLASSIFICATION
don't bother trying to update, we know there is no row there yet	WITHOUT_CLASSIFICATION	0.9982998684768172	WITHOUT_CLASSIFICATION	0.0017001315231828273	DESIGN
if all fields are null, we might need to delete existing row	WITHOUT_CLASSIFICATION	0.9404581232346156	WITHOUT_CLASSIFICATION	0.059541876765384326	DESIGN
there is probably a row there, so try to update if no rows were updated, we will find out	WITHOUT_CLASSIFICATION	0.9997929444094615	WITHOUT_CLASSIFICATION	2.0705559053849716E-4	DESIGN
note: updates to joined tables can't be batched...	WITHOUT_CLASSIFICATION	0.9970423073954457	WITHOUT_CLASSIFICATION	0.0029576926045542383	DESIGN
starting index	WITHOUT_CLASSIFICATION	0.999853174317215	WITHOUT_CLASSIFICATION	1.4682568278505468E-4	DESIGN
Now write the values of fields onto the prepared statement	WITHOUT_CLASSIFICATION	0.9999911704616753	WITHOUT_CLASSIFICATION	8.82953832469158E-6	DESIGN
Write any appropriate versioning conditional parameters	WITHOUT_CLASSIFICATION	0.9968976555319176	WITHOUT_CLASSIFICATION	0.0031023444680824868	DESIGN
Render the SQL query	WITHOUT_CLASSIFICATION	0.9999570462267188	WITHOUT_CLASSIFICATION	4.2953773281231176E-5	DESIGN
Do the key. The key is immutable so we can use the _current_ object state - not necessarily the state at the time the delete was issued	WITHOUT_CLASSIFICATION	0.9991858457393045	WITHOUT_CLASSIFICATION	8.141542606955213E-4	DESIGN
We should use the _current_ object state (ie. after any updates that occurred during flush)	WITHOUT_CLASSIFICATION	0.9992973848188006	WITHOUT_CLASSIFICATION	7.026151811994647E-4	DESIGN
this property belongs to the table and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.997618841178545	WITHOUT_CLASSIFICATION	0.002381158821454869	DESIGN
note: dirtyFields==null means we had no snapshot, and we couldn't get one using select-before-update oldFields==null just means we had no snapshot to begin with (we might have used select-before-update to get the dirtyFields)	WITHOUT_CLASSIFICATION	0.9976569665820784	WITHOUT_CLASSIFICATION	0.002343033417921609	DESIGN
more specifically : "datetime [op] ?" 1) if the operator is MINUS, we really cannot determine the expected type as either another datetime or numeric would be valid 2) if the operator is PLUS, the param needs to be of some numeric type	WITHOUT_CLASSIFICATION	0.988911787208728	WITHOUT_CLASSIFICATION	0.011088212791271942	DESIGN
For the case of dynamic-update="true", we need to generate the UPDATE SQL	WITHOUT_CLASSIFICATION	0.9998437807892261	WITHOUT_CLASSIFICATION	1.5621921077389297E-4	DESIGN
don't need to check laziness (dirty checking algorithm handles that)	WITHOUT_CLASSIFICATION	0.9933825831003151	WITHOUT_CLASSIFICATION	0.006617416899684863	DESIGN
For the case of dynamic-update="false", or no snapshot, we use the static SQL	WITHOUT_CLASSIFICATION	0.9999812686895135	WITHOUT_CLASSIFICATION	1.8731310486461564E-5	DESIGN
if not "get", then try "is"	WITHOUT_CLASSIFICATION	0.999949046138113	WITHOUT_CLASSIFICATION	5.0953861887015755E-5	DESIGN
Now update only the tables with dirty properties (and the table with the version number)	WITHOUT_CLASSIFICATION	0.9999730059382425	WITHOUT_CLASSIFICATION	2.6994061757445447E-5	DESIGN
For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9998437807892261	WITHOUT_CLASSIFICATION	1.5621921077389297E-4	DESIGN
For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9998437807892261	WITHOUT_CLASSIFICATION	1.5621921077389297E-4	DESIGN
For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.999970517986947	WITHOUT_CLASSIFICATION	2.9482013052864162E-5	DESIGN
For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.999970517986947	WITHOUT_CLASSIFICATION	2.9482013052864162E-5	DESIGN
not supported	WITHOUT_CLASSIFICATION	0.9999380077932518	WITHOUT_CLASSIFICATION	6.19922067482276E-5	DESIGN
this property belongs to the table and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.997618841178545	WITHOUT_CLASSIFICATION	0.002381158821454869	DESIGN
we need to utilize dynamic delete statements	WITHOUT_CLASSIFICATION	0.9920932783986317	WITHOUT_CLASSIFICATION	0.007906721601368273	DESIGN
otherwise, utilize the static delete statements	WITHOUT_CLASSIFICATION	0.999762862111114	WITHOUT_CLASSIFICATION	2.3713788888604618E-4	DESIGN
just a performance opt!	WITHOUT_CLASSIFICATION	0.9981931983767299	WITHOUT_CLASSIFICATION	0.0018068016232700233	DESIGN
just a performance opt!	WITHOUT_CLASSIFICATION	0.9981931983767299	WITHOUT_CLASSIFICATION	0.0018068016232700233	DESIGN
all joins join to the pk of the driving table	WITHOUT_CLASSIFICATION	0.9998962951327814	WITHOUT_CLASSIFICATION	1.0370486721853778E-4	DESIGN
notice that we skip the first table; it is the driving table!	WITHOUT_CLASSIFICATION	0.9996311238994611	WITHOUT_CLASSIFICATION	3.688761005389079E-4	DESIGN
we can inner join to superclass tables (the row MUST be there) we can never inner join to subclass tables	WITHOUT_CLASSIFICATION	0.9994846955082952	WITHOUT_CLASSIFICATION	5.153044917047417E-4	DESIGN
skip the driving table	WITHOUT_CLASSIFICATION	0.9999849862340607	WITHOUT_CLASSIFICATION	1.5013765939150234E-5	DESIGN
get 'em in the right order (not that it really matters)	WITHOUT_CLASSIFICATION	0.9922511017169394	WITHOUT_CLASSIFICATION	0.007748898283060669	DESIGN
here, we work under the following assumptions: ------------ valid cases -------------------------------------- 1) datetime + {something other than datetime} : always results in a datetime ( db will catch invalid conversions ) 2) datetime - datetime : always results in a DOUBLE 3) datetime - {something other than datetime} : always results in a datetime ( db will catch invalid conversions ) ------------ invalid cases ------------------------------------ 4) datetime + datetime 5) {something other than datetime} - datetime 6) datetime {any type} 7) datetime / {any type} 8) {any type} / datetime doing so allows us to properly handle parameters as either the left or right side here in the majority of cases	WITHOUT_CLASSIFICATION	0.9997035498002823	WITHOUT_CLASSIFICATION	2.964501997177152E-4	DESIGN
render the where and from parts	WITHOUT_CLASSIFICATION	0.9991821979102297	WITHOUT_CLASSIFICATION	8.178020897702307E-4	DESIGN
we could regerate this inside each called method!	WITHOUT_CLASSIFICATION	0.9981844382199734	WITHOUT_CLASSIFICATION	0.00181556178002667	DESIGN
now render the joins	WITHOUT_CLASSIFICATION	0.9999914452482588	WITHOUT_CLASSIFICATION	8.554751741203818E-6	DESIGN
This will add the new from element to the origin.	WITHOUT_CLASSIFICATION	0.9989356811544108	WITHOUT_CLASSIFICATION	0.0010643188455891695	DESIGN
now render the select clause	WITHOUT_CLASSIFICATION	0.9999899158068865	WITHOUT_CLASSIFICATION	1.0084193113618389E-5	DESIGN
now tie it all together	WITHOUT_CLASSIFICATION	0.9999864066777141	WITHOUT_CLASSIFICATION	1.359332228592049E-5	DESIGN
insert/update/delete SQL	WITHOUT_CLASSIFICATION	0.9998443304314125	WITHOUT_CLASSIFICATION	1.5566956858758022E-4	DESIGN
select SQL	WITHOUT_CLASSIFICATION	0.999873696729173	WITHOUT_CLASSIFICATION	1.2630327082694816E-4	DESIGN
no need to check laziness, dirty checking handles that	WITHOUT_CLASSIFICATION	0.9993150684261848	WITHOUT_CLASSIFICATION	6.849315738153579E-4	DESIGN
Fully resolve the map reference, create implicit joins.	WITHOUT_CLASSIFICATION	0.9999113537899617	WITHOUT_CLASSIFICATION	8.864621003832707E-5	DESIGN
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9849663108013471	WITHOUT_CLASSIFICATION	0.015033689198652838	DESIGN
The basic implementation is to simply use the node's text	WITHOUT_CLASSIFICATION	0.9998281524256732	WITHOUT_CLASSIFICATION	1.7184757432680477E-4	DESIGN
for dialects which are known to not support ANSI-SQL row-value-constructor syntax, we should mutate the tree.	WITHOUT_CLASSIFICATION	0.9843753531647297	WITHOUT_CLASSIFICATION	0.01562464683527022	DESIGN
Due to the complexity in initializing the SelectClause, do not generate one here. If it is not found; simply return null... Also, do not cache since it gets generated well after we are created.	WITHOUT_CLASSIFICATION	0.9999360027785842	WITHOUT_CLASSIFICATION	6.399722141581554E-5	DESIGN
check the version unsaved-value, if appropriate	WITHOUT_CLASSIFICATION	0.999766786100815	WITHOUT_CLASSIFICATION	2.33213899185055E-4	DESIGN
let this take precedence if defined, since it works for assigned identifiers	WITHOUT_CLASSIFICATION	0.9718806962676587	WITHOUT_CLASSIFICATION	0.02811930373234126	DESIGN
check the id unsaved-value	WITHOUT_CLASSIFICATION	0.9999693243294684	WITHOUT_CLASSIFICATION	3.067567053160258E-5	DESIGN
check to see if it is in the second-level cache	WITHOUT_CLASSIFICATION	0.9997334724517623	WITHOUT_CLASSIFICATION	2.665275482377813E-4	DESIGN
/	WITHOUT_CLASSIFICATION	0.9999296249981258	WITHOUT_CLASSIFICATION	7.03750018743201E-5	DESIGN
For property references generate <tablealias>.<columnname> as <projectionalias>	WITHOUT_CLASSIFICATION	0.9999833348099528	WITHOUT_CLASSIFICATION	1.6665190047111854E-5	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992564144695602	WITHOUT_CLASSIFICATION	7.435855304398626E-4	DESIGN
if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9997035448264883	WITHOUT_CLASSIFICATION	2.964551735117586E-4	DESIGN
force immediate execution of the insert	WITHOUT_CLASSIFICATION	0.9996094314996429	WITHOUT_CLASSIFICATION	3.9056850035706686E-4	DESIGN
If this from element is a collection and the path is a collection property (maxIndex, etc.) then generate a sub-query.	WITHOUT_CLASSIFICATION	0.9991534635237059	WITHOUT_CLASSIFICATION	8.465364762941302E-4	DESIGN
entities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992564144695602	WITHOUT_CLASSIFICATION	7.435855304398626E-4	DESIGN
collections ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992587770385972	WITHOUT_CLASSIFICATION	7.412229614027622E-4	DESIGN
cannot occur	WITHOUT_CLASSIFICATION	0.9999207437642171	WITHOUT_CLASSIFICATION	7.925623578294948E-5	DESIGN
cannot occur	WITHOUT_CLASSIFICATION	0.9999207437642171	WITHOUT_CLASSIFICATION	7.925623578294948E-5	DESIGN
only carry on if the method has no parameters	WITHOUT_CLASSIFICATION	0.999853225914495	WITHOUT_CLASSIFICATION	1.46774085505021E-4	DESIGN
try "get"	WITHOUT_CLASSIFICATION	0.999954146732583	WITHOUT_CLASSIFICATION	4.585326741700319E-5	DESIGN
do nothing...	WITHOUT_CLASSIFICATION	0.9998152914705671	WITHOUT_CLASSIFICATION	1.8470852943279953E-4	DESIGN
do nothing...	WITHOUT_CLASSIFICATION	0.9998152914705671	WITHOUT_CLASSIFICATION	1.8470852943279953E-4	DESIGN
should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9971895388714648	WITHOUT_CLASSIFICATION	0.0028104611285352226	DESIGN
this page intentionally left blank :)	WITHOUT_CLASSIFICATION	0.9970090936925748	WITHOUT_CLASSIFICATION	0.002990906307425056	DESIGN
do not do anything	WITHOUT_CLASSIFICATION	0.9999238955851046	WITHOUT_CLASSIFICATION	7.610441489532695E-5	DESIGN
ignore	WITHOUT_CLASSIFICATION	0.9997087489104198	WITHOUT_CLASSIFICATION	2.912510895801591E-4	DESIGN
cant instantiate	WITHOUT_CLASSIFICATION	0.9998905744034831	WITHOUT_CLASSIFICATION	1.0942559651693703E-4	DESIGN
if it is a property of an embedded component, invoke on the "identifier"	WITHOUT_CLASSIFICATION	0.9998795574359644	WITHOUT_CLASSIFICATION	1.2044256403563886E-4	DESIGN
otherwise:	WITHOUT_CLASSIFICATION	0.9998680402420813	WITHOUT_CLASSIFICATION	1.3195975791871172E-4	DESIGN
skip finalize methods	WITHOUT_CLASSIFICATION	0.9998870354134658	WITHOUT_CLASSIFICATION	1.1296458653418034E-4	DESIGN
note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.999223830605175	WITHOUT_CLASSIFICATION	7.761693948250036E-4	DESIGN
note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.999223830605175	WITHOUT_CLASSIFICATION	7.761693948250036E-4	DESIGN
HHH-2481 make sure the callback gets cleared, otherwise the instance stays in a static thread local.	WITHOUT_CLASSIFICATION	0.9984604074127006	WITHOUT_CLASSIFICATION	0.0015395925872994268	DESIGN
while constructor is running	WITHOUT_CLASSIFICATION	0.9999862538636559	WITHOUT_CLASSIFICATION	1.3746136344201934E-5	DESIGN
while constructor is running	WITHOUT_CLASSIFICATION	0.9999862538636559	WITHOUT_CLASSIFICATION	1.3746136344201934E-5	DESIGN
note: interface is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9990961650316544	WITHOUT_CLASSIFICATION	9.038349683454549E-4	DESIGN
interfaces arguments	WITHOUT_CLASSIFICATION	0.9999520767852528	WITHOUT_CLASSIFICATION	4.792321474716172E-5	DESIGN
TODO!	WITHOUT_CLASSIFICATION	0.9998680402420813	WITHOUT_CLASSIFICATION	1.3195975791871172E-4	DESIGN
Get the caller	WITHOUT_CLASSIFICATION	0.9999860000883394	WITHOUT_CLASSIFICATION	1.3999911660580092E-5	DESIGN
Get the caller principals	WITHOUT_CLASSIFICATION	0.9999826898620515	WITHOUT_CLASSIFICATION	1.731013794843928E-5	DESIGN
private static final Alias DEFAULT_ALIAS = new Alias(10, null);	WITHOUT_CLASSIFICATION	0.9996008442788512	WITHOUT_CLASSIFICATION	3.9915572114878825E-4	DESIGN
Needed to bump this up to DotNode, because that is the only thing which currently knows about the property-ref path in the correct format; it is either this, or recurse over the DotNodes constructing the property path just like DotNode does internally	WITHOUT_CLASSIFICATION	0.9980998353762798	WITHOUT_CLASSIFICATION	0.0019001646237202063	DESIGN
if the identifier is quoted, remove the quotes	WITHOUT_CLASSIFICATION	0.9973783153974686	WITHOUT_CLASSIFICATION	0.0026216846025313998	DESIGN
truncate the identifier to the max alias length, less the suffix length	WITHOUT_CLASSIFICATION	0.9992282992742817	WITHOUT_CLASSIFICATION	7.717007257183202E-4	DESIGN
full joins are not supported.. yet!	WITHOUT_CLASSIFICATION	0.9990093544062794	WITHOUT_CLASSIFICATION	9.906455937206367E-4	DESIGN
null is not considered the same type as Integer. $NON-NLS-1 $NON-NLS-1	WITHOUT_CLASSIFICATION	0.9977365892944517	WITHOUT_CLASSIFICATION	0.0022634107055482704	DESIGN
the outerJoinsAfterWhere needs to come before where clause to properly handle dynamic filters	WITHOUT_CLASSIFICATION	0.9980344644211497	WITHOUT_CLASSIFICATION	0.0019655355788503032	DESIGN
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9998680402420813	WITHOUT_CLASSIFICATION	1.3195975791871172E-4	DESIGN
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9998680402420813	WITHOUT_CLASSIFICATION	1.3195975791871172E-4	DESIGN
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9998680402420813	WITHOUT_CLASSIFICATION	1.3195975791871172E-4	DESIGN
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9998680402420813	WITHOUT_CLASSIFICATION	1.3195975791871172E-4	DESIGN
strip off any leading 'and' token	WITHOUT_CLASSIFICATION	0.9997979714790505	WITHOUT_CLASSIFICATION	2.0202852094965105E-4	DESIGN
if the condition is not already there...	WITHOUT_CLASSIFICATION	0.9995806901340393	WITHOUT_CLASSIFICATION	4.193098659607488E-4	DESIGN
dontSpace.add("'");	WITHOUT_CLASSIFICATION	0.9998740958691271	WITHOUT_CLASSIFICATION	1.259041308727615E-4	DESIGN
for MySQL	WITHOUT_CLASSIFICATION	0.999751155822281	WITHOUT_CLASSIFICATION	2.488441777189984E-4	DESIGN
HashMap columnsUnique = new HashMap();	WITHOUT_CLASSIFICATION	0.9998959143741912	WITHOUT_CLASSIFICATION	1.0408562580872142E-4	DESIGN
null caused some problems	WITHOUT_CLASSIFICATION	0.9996009604280562	WITHOUT_CLASSIFICATION	3.990395719436506E-4	DESIGN
package	WITHOUT_CLASSIFICATION	0.9993601709670066	WITHOUT_CLASSIFICATION	6.398290329934237E-4	DESIGN
not sure if this would ever be null but wanted to be careful	WITHOUT_CLASSIFICATION	0.9987476385725135	WITHOUT_CLASSIFICATION	0.001252361427486579	DESIGN
even on inverse="true"	WITHOUT_CLASSIFICATION	0.9997805989796278	WITHOUT_CLASSIFICATION	2.1940102037214658E-4	DESIGN
package	WITHOUT_CLASSIFICATION	0.9993601709670066	WITHOUT_CLASSIFICATION	6.398290329934237E-4	DESIGN
package	WITHOUT_CLASSIFICATION	0.9993601709670066	WITHOUT_CLASSIFICATION	6.398290329934237E-4	DESIGN
If true then execute db updates, otherwise just generate and display updates	WITHOUT_CLASSIFICATION	0.9999520740603605	WITHOUT_CLASSIFICATION	4.792593963958044E-5	DESIGN
we only release the connection	WITHOUT_CLASSIFICATION	0.999916634148656	WITHOUT_CLASSIFICATION	8.336585134402306E-5	DESIGN
deprecated option...	WITHOUT_CLASSIFICATION	0.9994446307228175	WITHOUT_CLASSIFICATION	5.553692771824621E-4	DESIGN
if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9988844719825818	WITHOUT_CLASSIFICATION	0.0011155280174181574	DESIGN
actually, this last test is probably unnecessary, since beforeCompletion() doesn't get called during rollback	WITHOUT_CLASSIFICATION	0.9995713809366156	WITHOUT_CLASSIFICATION	4.28619063384471E-4	DESIGN
this one only really needed for badly-behaved applications! (if the TransactionManager has a Sychronization registered, its a noop) (actually we do need it for downgrading locks)	WITHOUT_CLASSIFICATION	0.9927573772107015	WITHOUT_CLASSIFICATION	0.007242622789298628	DESIGN
Create an DotNode AST for the path and resolve it.	WITHOUT_CLASSIFICATION	0.9998267894620886	WITHOUT_CLASSIFICATION	1.732105379112759E-4	DESIGN
if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9988844719825818	WITHOUT_CLASSIFICATION	0.0011155280174181574	DESIGN
if we could not register a synchronization, do the before/after completion callbacks ourself (but we need to let jdbcContext know that this is what we are going to do, so it doesn't keep trying to register synchronizations)	WITHOUT_CLASSIFICATION	0.862385894296624	WITHOUT_CLASSIFICATION	0.13761410570337593	DESIGN
swallow it, and continue to roll back JTA transaction	WITHOUT_CLASSIFICATION	0.9995504286245593	WITHOUT_CLASSIFICATION	4.495713754406216E-4	DESIGN
so the transaction is already rolled back, by JTA spec	WITHOUT_CLASSIFICATION	0.9998528797080178	WITHOUT_CLASSIFICATION	1.471202919822212E-4	DESIGN
this method is a noop if there is a Synchronization!	WITHOUT_CLASSIFICATION	0.9969287241779378	WITHOUT_CLASSIFICATION	0.0030712758220621484	DESIGN
two conditions where we need to transform this to a theta-join syntax: 1) 'elem' is the "root from-element" in correlated subqueries 2) The DotNode.useThetaStyleImplicitJoins has been set to true and 'elem' represents an implicit join	WITHOUT_CLASSIFICATION	0.9859158504713625	WITHOUT_CLASSIFICATION	0.014084149528637522	DESIGN
WebSphere, however, is not a sane JEE/JTA container...	WITHOUT_CLASSIFICATION	0.9983093409664049	WITHOUT_CLASSIFICATION	0.0016906590335950572	DESIGN
for sane JEE/JTA containers, the transaction itself functions as its identifier...	WITHOUT_CLASSIFICATION	0.9998728307114855	WITHOUT_CLASSIFICATION	1.2716928851464832E-4	DESIGN
swallow, the transaction was finished	WITHOUT_CLASSIFICATION	0.9998781491771664	WITHOUT_CLASSIFICATION	1.2185082283349492E-4	DESIGN
all AliasToEntityMapResultTransformer are considered equal ~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9990581296737672	WITHOUT_CLASSIFICATION	9.418703262327759E-4	DESIGN
Create the join element under the from element.	WITHOUT_CLASSIFICATION	0.9990376568250499	WITHOUT_CLASSIFICATION	9.623431749500038E-4	DESIGN
all DistinctRootEntityResultTransformer are considered equal ~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9990581296737672	WITHOUT_CLASSIFICATION	9.418703262327759E-4	DESIGN
map of EntityMode -> Tuplizer	WITHOUT_CLASSIFICATION	0.9999713665825994	WITHOUT_CLASSIFICATION	2.863341740063944E-5	DESIGN
this is a virtual id property...	WITHOUT_CLASSIFICATION	0.9927374325745737	WITHOUT_CLASSIFICATION	0.0072625674254263185	DESIGN
this one needed only for guessEntityMode()	WITHOUT_CLASSIFICATION	0.9980747497022695	WITHOUT_CLASSIFICATION	0.0019252502977305222	DESIGN
create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999308958801291	WITHOUT_CLASSIFICATION	6.910411987086174E-5	DESIGN
todo : move this to SF per HHH-3517; also see HHH-1907 and ComponentMetamodel	WITHOUT_CLASSIFICATION	0.9564603485647757	WITHOUT_CLASSIFICATION	0.04353965143522435	DESIGN
then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9994868018516347	WITHOUT_CLASSIFICATION	5.131981483652109E-4	DESIGN
Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9998276710051381	WITHOUT_CLASSIFICATION	1.7232899486194846E-4	DESIGN
then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9978676993600705	WITHOUT_CLASSIFICATION	0.0021323006399295327	DESIGN
Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9998276710051381	WITHOUT_CLASSIFICATION	1.7232899486194846E-4	DESIGN
put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9996072466731083	WITHOUT_CLASSIFICATION	3.9275332689161726E-4	DESIGN
found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9996541900693927	WITHOUT_CLASSIFICATION	3.4580993060733943E-4	DESIGN
private final SessionFactoryImplementor sessionFactory;	WITHOUT_CLASSIFICATION	0.9976714254256098	WITHOUT_CLASSIFICATION	0.0023285745743900433	DESIGN
cached for efficiency...	WITHOUT_CLASSIFICATION	0.9997496075242911	WITHOUT_CLASSIFICATION	2.5039247570885615E-4	DESIGN
public ComponentMetamodel(Component component, SessionFactoryImplementor sessionFactory) {	WITHOUT_CLASSIFICATION	0.9986222640131832	WITHOUT_CLASSIFICATION	0.0013777359868167892	DESIGN
this.sessionFactory = sessionFactory;	WITHOUT_CLASSIFICATION	0.9998907403978173	WITHOUT_CLASSIFICATION	1.092596021825539E-4	DESIGN
it was not embedded, so the argument is just an id	WITHOUT_CLASSIFICATION	0.9999880644159453	WITHOUT_CLASSIFICATION	1.19355840545988E-5	DESIGN
then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9994868018516347	WITHOUT_CLASSIFICATION	5.131981483652109E-4	DESIGN
then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9978676993600705	WITHOUT_CLASSIFICATION	0.0021323006399295327	DESIGN
put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9996072466731083	WITHOUT_CLASSIFICATION	3.9275332689161726E-4	DESIGN
then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.998608582967878	WITHOUT_CLASSIFICATION	0.0013914170321220672	DESIGN
return currentId;	WITHOUT_CLASSIFICATION	0.9998917028784864	WITHOUT_CLASSIFICATION	1.0829712151360236E-4	DESIGN
reset the id	WITHOUT_CLASSIFICATION	0.9999582386946192	WITHOUT_CLASSIFICATION	4.176130538083007E-5	DESIGN
origin.addDestination( destination ); This was the cause of HHH-242 origin.setType( FROM_FRAGMENT ); Set the parent node type so that the AST is properly formed. The destination node will have all the FROM text. The parent node is a collection join too (voodoo - see JoinProcessor)	WITHOUT_CLASSIFICATION	0.9968479994664018	WITHOUT_CLASSIFICATION	0.003152000533598132	DESIGN
reset the version	WITHOUT_CLASSIFICATION	0.9999716988007283	WITHOUT_CLASSIFICATION	2.8301199271641288E-5	DESIGN
the default is to simply not lazy fetch properties for now...	WITHOUT_CLASSIFICATION	0.9990045508766704	WITHOUT_CLASSIFICATION	9.954491233295326E-4	DESIGN
Add the second join, the one that ends in the destination table.	WITHOUT_CLASSIFICATION	0.999920784027317	WITHOUT_CLASSIFICATION	7.921597268293967E-5	DESIGN
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9849663108013471	WITHOUT_CLASSIFICATION	0.015033689198652838	DESIGN
found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9996541900693927	WITHOUT_CLASSIFICATION	3.4580993060733943E-4	DESIGN
determine the id getter and setter methods from the proxy interface (if any) determine all interfaces needed by the resulting proxy	WITHOUT_CLASSIFICATION	0.9996560083810648	WITHOUT_CLASSIFICATION	3.439916189351328E-4	DESIGN
return getFactory().getSettings().getBytecodeProvider().getProxyFactoryFactory().buildProxyFactory();	WITHOUT_CLASSIFICATION	0.9993603456102749	WITHOUT_CLASSIFICATION	6.396543897250504E-4	DESIGN
not final because proxy factory creation can fail	WITHOUT_CLASSIFICATION	0.9988733453227142	WITHOUT_CLASSIFICATION	0.0011266546772857025	DESIGN
superclass entity-name	WITHOUT_CLASSIFICATION	0.999807008694839	WITHOUT_CLASSIFICATION	1.9299130516103145E-4	DESIGN
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9849663108013471	WITHOUT_CLASSIFICATION	0.015033689198652838	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992564144695602	WITHOUT_CLASSIFICATION	7.435855304398626E-4	DESIGN
init the aliases, after initing the constructornode	WITHOUT_CLASSIFICATION	0.9998058597308167	WITHOUT_CLASSIFICATION	1.9414026918333614E-4	DESIGN
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9849663108013471	WITHOUT_CLASSIFICATION	0.015033689198652838	DESIGN
legacy behavior (with no abstract attribute specified)	WITHOUT_CLASSIFICATION	0.9960175207887212	WITHOUT_CLASSIFICATION	0.003982479211278887	DESIGN
Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9995191116234572	WITHOUT_CLASSIFICATION	4.808883765427257E-4	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992564144695602	WITHOUT_CLASSIFICATION	7.435855304398626E-4	DESIGN
note: this affects the return value!	WITHOUT_CLASSIFICATION	0.9993781144718573	WITHOUT_CLASSIFICATION	6.218855281425759E-4	DESIGN
Need to account for allowable '_' within the variant	WITHOUT_CLASSIFICATION	0.9997031944291188	WITHOUT_CLASSIFICATION	2.96805570881101E-4	DESIGN
Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.999816046316911	WITHOUT_CLASSIFICATION	1.839536830888872E-4	DESIGN
Collection Types:	WITHOUT_CLASSIFICATION	0.9998830562076932	WITHOUT_CLASSIFICATION	1.169437923067564E-4	DESIGN
convenience methods relating to operations across arrays of types...	WITHOUT_CLASSIFICATION	0.9957094031062163	WITHOUT_CLASSIFICATION	0.0042905968937836875	DESIGN
lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9998608404255925	WITHOUT_CLASSIFICATION	1.3915957440745034E-4	DESIGN
Blobs are ignored by merge()	WITHOUT_CLASSIFICATION	0.9997784144813833	WITHOUT_CLASSIFICATION	2.215855186168578E-4	DESIGN
value is the entity name	WITHOUT_CLASSIFICATION	0.9999347694979988	WITHOUT_CLASSIFICATION	6.523050200119071E-5	DESIGN
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9998740958691271	WITHOUT_CLASSIFICATION	1.259041308727615E-4	DESIGN
generate id select fragment and then property select fragment for each expression, just like generateSelectFragments().	WITHOUT_CLASSIFICATION	0.9998427695944624	WITHOUT_CLASSIFICATION	1.5723040553765555E-4	DESIGN
TODO!	WITHOUT_CLASSIFICATION	0.9998680402420813	WITHOUT_CLASSIFICATION	1.3195975791871172E-4	DESIGN
xml is the entity name	WITHOUT_CLASSIFICATION	0.9998487758563366	WITHOUT_CLASSIFICATION	1.5122414366336017E-4	DESIGN
special case ... this is the leaf of the containment graph, even though not immutable	WITHOUT_CLASSIFICATION	0.9997773824564096	WITHOUT_CLASSIFICATION	2.2261754359051154E-4	DESIGN
tolerates nulls	WITHOUT_CLASSIFICATION	0.9998740958691271	WITHOUT_CLASSIFICATION	1.259041308727615E-4	DESIGN
sqlResultTypeList,	WITHOUT_CLASSIFICATION	0.9998740958691271	WITHOUT_CLASSIFICATION	1.259041308727615E-4	DESIGN
metaType is assumed to be single-column type	WITHOUT_CLASSIFICATION	0.9947288196547798	WITHOUT_CLASSIFICATION	0.005271180345220275	DESIGN
Get all the select expressions (that we just generated) and render the select.	WITHOUT_CLASSIFICATION	0.999896126320434	WITHOUT_CLASSIFICATION	1.0387367956604549E-4	DESIGN
Look through the FromElement's children to find any collections of values that should be fetched...	WITHOUT_CLASSIFICATION	0.9998512538417667	WITHOUT_CLASSIFICATION	1.4874615823330645E-4	DESIGN
return AssociationType.FOREIGN_KEY_TO_PARENT; this is better but causes a transient object exception...	WITHOUT_CLASSIFICATION	0.8889360054301672	WITHOUT_CLASSIFICATION	0.11106399456983292	DESIGN
Use the lower case function name. Remember whether we're in a SELECT clause or not.	WITHOUT_CLASSIFICATION	0.999960241333115	WITHOUT_CLASSIFICATION	3.9758666885065204E-5	DESIGN
IDENT might be the name of a class.	WITHOUT_CLASSIFICATION	0.99616184215381	WITHOUT_CLASSIFICATION	0.0038381578461900664	DESIGN
TODO!!!	WITHOUT_CLASSIFICATION	0.9998680402420813	WITHOUT_CLASSIFICATION	1.3195975791871172E-4	DESIGN
st.setTimestamp( index, new Timestamp( cal.getTimeInMillis() ), cal ); JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9992903225192573	WITHOUT_CLASSIFICATION	7.096774807427142E-4	DESIGN
st.setDate( index, new Date( cal.getTimeInMillis() ), cal ); JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9992903225192573	WITHOUT_CLASSIFICATION	7.096774807427142E-4	DESIGN
both are Timestamps	WITHOUT_CLASSIFICATION	0.9997471319139882	WITHOUT_CLASSIFICATION	2.528680860118513E-4	DESIGN
at least one is a plain old Date	WITHOUT_CLASSIFICATION	0.9987368225280249	WITHOUT_CLASSIFICATION	0.0012631774719750923	DESIGN
noop	WITHOUT_CLASSIFICATION	0.9998718500700163	WITHOUT_CLASSIFICATION	1.281499299837027E-4	DESIGN
if the corresponding SQL value is NULL, the reader we got is NULL as well	WITHOUT_CLASSIFICATION	0.9999574625555935	WITHOUT_CLASSIFICATION	4.253744440640951E-5	DESIGN
Fetch Reader content up to the end - and put characters in a StringBuffer	WITHOUT_CLASSIFICATION	0.9905727993266592	WITHOUT_CLASSIFICATION	0.009427200673340746	DESIGN
Return StringBuffer content as a large String	WITHOUT_CLASSIFICATION	0.9996447195966314	WITHOUT_CLASSIFICATION	3.5528040336861154E-4	DESIGN
or Types.LONGVARCHAR?	WITHOUT_CLASSIFICATION	0.9998741546282947	WITHOUT_CLASSIFICATION	1.2584537170530477E-4	DESIGN
Not called at runtime so doesn't matter if its slow :)	WITHOUT_CLASSIFICATION	0.9999233312334	WITHOUT_CLASSIFICATION	7.666876659993702E-5	DESIGN
TODO	WITHOUT_CLASSIFICATION	0.8659579302644206	WITHOUT_CLASSIFICATION	0.13404206973557953	DESIGN
Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999805860050509	WITHOUT_CLASSIFICATION	1.9413994949062953E-5	DESIGN
different nullability rules for pk/fk	WITHOUT_CLASSIFICATION	0.9988274724870134	WITHOUT_CLASSIFICATION	0.0011725275129866263	DESIGN
cache this	WITHOUT_CLASSIFICATION	0.9996409548647148	WITHOUT_CLASSIFICATION	3.590451352852702E-4	DESIGN
only really need new array during semiresolve!	WITHOUT_CLASSIFICATION	0.9991183554345238	WITHOUT_CLASSIFICATION	8.816445654762831E-4	DESIGN
Forcefully remove leading ands from where fragments; the grammar will handle adding them	WITHOUT_CLASSIFICATION	0.9967149392569644	WITHOUT_CLASSIFICATION	0.003285060743035543	DESIGN
TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9998740958691271	WITHOUT_CLASSIFICATION	1.259041308727615E-4	DESIGN
Create a new FILTERS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9998615894638632	WITHOUT_CLASSIFICATION	1.3841053613686046E-4	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992564144695602	WITHOUT_CLASSIFICATION	7.435855304398626E-4	DESIGN
public Object instantiate(Object parent, SessionImplementor session) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9991625188695116	WITHOUT_CLASSIFICATION	8.374811304883413E-4	DESIGN
nothing to do	WITHOUT_CLASSIFICATION	0.9999729030225306	WITHOUT_CLASSIFICATION	2.7096977469433014E-5	DESIGN
nothing to do	WITHOUT_CLASSIFICATION	0.9999729030225306	WITHOUT_CLASSIFICATION	2.7096977469433014E-5	DESIGN
VersionType impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Note : simply returns null for seed() and next() as the only known application of binary types for versioning is for use with the TIMESTAMP datatype supported by Sybase and SQL Server, which are completely db-generated values...	WITHOUT_CLASSIFICATION	0.9990342421867577	WITHOUT_CLASSIFICATION	9.657578132421716E-4	DESIGN
lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9998608404255925	WITHOUT_CLASSIFICATION	1.3915957440745034E-4	DESIGN
not really necessary, I guess...	WITHOUT_CLASSIFICATION	0.9981813706031439	WITHOUT_CLASSIFICATION	0.0018186293968560936	DESIGN
Clobs are ignored by merge() operation	WITHOUT_CLASSIFICATION	0.9994623887154938	WITHOUT_CLASSIFICATION	5.376112845062165E-4	DESIGN
we do not have to worry about queued additions to uninitialized collections, since they can only occur for inverse collections!	WITHOUT_CLASSIFICATION	0.9929245509922675	WITHOUT_CLASSIFICATION	0.007075449007732494	DESIGN
collections cannot be compared	WITHOUT_CLASSIFICATION	0.999861282839173	WITHOUT_CLASSIFICATION	1.3871716082692207E-4	DESIGN
remember the uk value	WITHOUT_CLASSIFICATION	0.9999572590742614	WITHOUT_CLASSIFICATION	4.2740925738614496E-5	DESIGN
NOOP	WITHOUT_CLASSIFICATION	0.9998680402420813	WITHOUT_CLASSIFICATION	1.3195975791871172E-4	DESIGN
processCollectionProperty(token, q.getCollectionPersister(collectionRole), collectionName);	WITHOUT_CLASSIFICATION	0.9992564144695602	WITHOUT_CLASSIFICATION	7.435855304398626E-4	DESIGN
we must use the "remembered" uk value, since it is not available from the EntityEntry during assembly	WITHOUT_CLASSIFICATION	0.998604438274645	WITHOUT_CLASSIFICATION	0.0013955617253550204	DESIGN
collections don't dirty an unversioned parent entity	WITHOUT_CLASSIFICATION	0.9990035487450802	WITHOUT_CLASSIFICATION	9.964512549197804E-4	DESIGN
return false;	WITHOUT_CLASSIFICATION	0.9998887791681867	WITHOUT_CLASSIFICATION	1.1122083181329085E-4	DESIGN
This just handles a particular case of component projection, perhaps get rid of it and throw an exception	WITHOUT_CLASSIFICATION	0.9920002066466534	WITHOUT_CLASSIFICATION	0.007999793353346451	DESIGN
NOTE: we avoid joining to the next table if the named property is just the foreign key value	WITHOUT_CLASSIFICATION	0.999958963500517	WITHOUT_CLASSIFICATION	4.103649948305485E-5	DESIGN
the key is the owning entity itself, so get the ID from the key	WITHOUT_CLASSIFICATION	0.9995797959443057	WITHOUT_CLASSIFICATION	4.2020405569430613E-4	DESIGN
if the original is a PersistentCollection, and that original was not flagged as dirty, then reset the target's dirty flag here after the copy operation. </p> One thing to be careful of here is a "bare" original collection in which case we should never ever ever reset the dirty flag on the target because we simply do not know...	WITHOUT_CLASSIFICATION	0.9999986089925268	WITHOUT_CLASSIFICATION	1.391007473169703E-6	DESIGN
ignore subselect keywords	WITHOUT_CLASSIFICATION	0.9996582559821486	WITHOUT_CLASSIFICATION	3.4174401785140406E-4	DESIGN
copy elements into newly empty target collection	WITHOUT_CLASSIFICATION	0.9999214300957301	WITHOUT_CLASSIFICATION	7.856990426991235E-5	DESIGN
for a null target, or a target which is the same as the original, we need to put the merged elements in a new collection	WITHOUT_CLASSIFICATION	0.9989643793144501	WITHOUT_CLASSIFICATION	0.0010356206855498904	DESIGN
by default just use an unanticipated capacity since we don't know how to extract the capacity to use from original here...	WITHOUT_CLASSIFICATION	0.999668231905842	WITHOUT_CLASSIFICATION	3.3176809415793614E-4	DESIGN
get the elements back into the target making sure to handle dirty flag	WITHOUT_CLASSIFICATION	0.9998889045549415	WITHOUT_CLASSIFICATION	1.1109544505852289E-4	DESIGN
check if collection is currently being loaded	WITHOUT_CLASSIFICATION	0.9981640589179677	WITHOUT_CLASSIFICATION	0.0018359410820323308	DESIGN
check if it is already completely loaded, but unowned	WITHOUT_CLASSIFICATION	0.9992226441179164	WITHOUT_CLASSIFICATION	7.773558820835937E-4	DESIGN
cache the actual id of the object, not the value of the property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9997253864142737	WITHOUT_CLASSIFICATION	2.746135857263413E-4	DESIGN
TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9998740958691271	WITHOUT_CLASSIFICATION	1.259041308727615E-4	DESIGN
create a new collection wrapper, to be initialized later	WITHOUT_CLASSIFICATION	0.990942568864264	WITHOUT_CLASSIFICATION	0.009057431135735991	DESIGN
Some JDBC drivers erroneously return an empty array here for a null DB value :/	WITHOUT_CLASSIFICATION	0.9868882222446922	WITHOUT_CLASSIFICATION	0.013111777755307858	DESIGN
our column span is the number of columns in the PK	WITHOUT_CLASSIFICATION	0.9998069013094621	WITHOUT_CLASSIFICATION	1.9309869053786666E-4	DESIGN
cannot batch fetch by unique key (property-ref associations)	WITHOUT_CLASSIFICATION	0.9986035725901821	WITHOUT_CLASSIFICATION	0.0013964274098179634	DESIGN
we already know current is not null...	WITHOUT_CLASSIFICATION	0.999336514704862	WITHOUT_CLASSIFICATION	6.634852951379825E-4	DESIGN
the ids are fully resolved, so compare them with isDirty(), not isModified()	WITHOUT_CLASSIFICATION	0.9998548955915927	WITHOUT_CLASSIFICATION	1.4510440840718157E-4	DESIGN
the owner of the association is not the owner of the id	WITHOUT_CLASSIFICATION	0.9998619663417676	WITHOUT_CLASSIFICATION	1.3803365823230983E-4	DESIGN
----------------------------------------------------------- Constructors	WITHOUT_CLASSIFICATION	0.9992573729341824	WITHOUT_CLASSIFICATION	7.426270658175987E-4	DESIGN
----------------------------------------------------- Instance Variables	WITHOUT_CLASSIFICATION	0.9993930052242097	WITHOUT_CLASSIFICATION	6.069947757903977E-4	DESIGN
public static JDBCException newJDBCException(String string, SQLException root, String sql) { string = string + " [" + sql + ']'; log.error(string, root); logExceptions(root); return new JDBCException(string, root, sql); } public static JDBCException newJDBCException(String string, SQLException root) { log.error(string, root); logExceptions(root); return new JDBCException(string, root); }	WITHOUT_CLASSIFICATION	0.9999473709221585	WITHOUT_CLASSIFICATION	5.262907784150565E-5	DESIGN
--------------------------------------------------------- Public Methods	WITHOUT_CLASSIFICATION	0.9993350906693117	WITHOUT_CLASSIFICATION	6.649093306884213E-4	DESIGN
Compare the two maps for equality	WITHOUT_CLASSIFICATION	0.9994737696034232	WITHOUT_CLASSIFICATION	5.262303965768953E-4	DESIGN
Simple tests that require no synchronization	WITHOUT_CLASSIFICATION	0.9996274559844054	WITHOUT_CLASSIFICATION	3.72544015594676E-4	DESIGN
Sybase fail if we don't do that, sigh...	WITHOUT_CLASSIFICATION	0.998268230681354	WITHOUT_CLASSIFICATION	0.0017317693186460622	DESIGN
Handles things like: a and b or c a and ( b or c ) not a and not b not ( a and b ) x between y and z (overloaded "and") x in ( a, b, c ) (overloaded brackets) not not a a is not null (overloaded "not") etc...... and expressions like foo = bar (maps to: foo.id = bar.id) foo.Bar = 'foo' (maps to: foo.bar = 'foo') foo.Bar.Baz = 1.0 (maps to: foo.bar = bar.id and bar.baz = 1.0) 1.0 = foo.Bar.Baz (maps to: bar.baz = 1.0 and foo.Bar = bar.id) foo.Bar.Baz = a.B.C (maps to: bar.Baz = b.C and foo.Bar = bar.id and a.B = b.id) foo.Bar.Baz + a.B.C (maps to: bar.Baz + b.C and foo.Bar = bar.id and a.B = b.id) ( foo.Bar.Baz + 1.0 ) < 2.0 (maps to: ( bar.Baz + 1.0 ) < 2.0 and foo.Bar = bar.id)	WITHOUT_CLASSIFICATION	0.9993128413217142	WITHOUT_CLASSIFICATION	6.871586782858925E-4	DESIGN
release the jdk internal caches everytime to ensure this plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9929903873967584	WITHOUT_CLASSIFICATION	0.007009612603241567	DESIGN
release the jdk internal caches everytime to ensure this plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9929903873967584	WITHOUT_CLASSIFICATION	0.007009612603241567	DESIGN
try to "pretty print" it	WITHOUT_CLASSIFICATION	0.9999247332262167	WITHOUT_CLASSIFICATION	7.526677378327332E-5	DESIGN
otherwise, just dump it	WITHOUT_CLASSIFICATION	0.9999409255168403	WITHOUT_CLASSIFICATION	5.907448315959339E-5	DESIGN
its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.999652245203691	WITHOUT_CLASSIFICATION	3.477547963090317E-4	DESIGN
its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.999652245203691	WITHOUT_CLASSIFICATION	3.477547963090317E-4	DESIGN
use default behavior	WITHOUT_CLASSIFICATION	0.9997657567163198	WITHOUT_CLASSIFICATION	2.3424328368018844E-4	DESIGN
NOTE: early return	WITHOUT_CLASSIFICATION	0.9999721756798876	WITHOUT_CLASSIFICATION	2.7824320112367742E-5	DESIGN
the MRU cache used to keep hard references to the most recently used query plans; note : LRU here is a bit of a misnomer, it indicates that LRU entries are removed, the actual kept entries are the MRU entries	WITHOUT_CLASSIFICATION	0.9683590079908118	WITHOUT_CLASSIFICATION	0.031640992009188296	DESIGN
we want to be able to just use the defaults, if JNDI environment properties are not supplied so don't put null in anywhere	WITHOUT_CLASSIFICATION	0.999112766462409	WITHOUT_CLASSIFICATION	8.872335375910351E-4	DESIGN
Clone -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9995021407518969	WITHOUT_CLASSIFICATION	4.978592481031499E-4	DESIGN
Serialize -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9992564144695602	WITHOUT_CLASSIFICATION	7.435855304398626E-4	DESIGN
stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999607292108834	WITHOUT_CLASSIFICATION	3.927078911655481E-5	DESIGN
stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999607292108834	WITHOUT_CLASSIFICATION	3.927078911655481E-5	DESIGN
Deserialize -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9992564144695602	WITHOUT_CLASSIFICATION	7.435855304398626E-4	DESIGN
static methods only - hide constructor	WITHOUT_CLASSIFICATION	0.9962521966493892	WITHOUT_CLASSIFICATION	0.0037478033506106786	DESIGN
&& !('_'==character)	WITHOUT_CLASSIFICATION	0.999872781251003	WITHOUT_CLASSIFICATION	1.2721874899709006E-4	DESIGN
returnign null!	WITHOUT_CLASSIFICATION	0.9998744261519045	WITHOUT_CLASSIFICATION	1.2557384809562072E-4	DESIGN
returnign null!	WITHOUT_CLASSIFICATION	0.9998744261519045	WITHOUT_CLASSIFICATION	1.2557384809562072E-4	DESIGN
includes last '.'	WITHOUT_CLASSIFICATION	0.9999238847225937	WITHOUT_CLASSIFICATION	7.611527740628143E-5	DESIGN
+1 to include the following '.'	WITHOUT_CLASSIFICATION	0.9998748991048133	WITHOUT_CLASSIFICATION	1.2510089518674535E-4	DESIGN
Impl note: takes advantage of the fact that an escpaed single quote embedded within a quote-block can really be handled as two seperate quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9997310813382888	WITHOUT_CLASSIFICATION	2.689186617111943E-4	DESIGN
first time we find match!	WITHOUT_CLASSIFICATION	0.9996097635060278	WITHOUT_CLASSIFICATION	3.902364939721395E-4	DESIGN
entityNames may now include slashes for the representations classname may be an inner class	WITHOUT_CLASSIFICATION	0.9999543011959297	WITHOUT_CLASSIFICATION	4.569880407030524E-5	DESIGN
wrapped iterators	WITHOUT_CLASSIFICATION	0.9998792978482077	WITHOUT_CLASSIFICATION	1.2070215179231977E-4	DESIGN
index of current iterator in the wrapped iterators array	WITHOUT_CLASSIFICATION	0.9998026128386341	WITHOUT_CLASSIFICATION	1.9738716136583949E-4	DESIGN
the current iterator	WITHOUT_CLASSIFICATION	0.999953130326259	WITHOUT_CLASSIFICATION	4.686967374097014E-5	DESIGN
the last used iterator	WITHOUT_CLASSIFICATION	0.999937620271947	WITHOUT_CLASSIFICATION	6.237972805298274E-5	DESIGN
it was a boolean expression	WITHOUT_CLASSIFICATION	0.9999644148761639	WITHOUT_CLASSIFICATION	3.5585123836035406E-5	DESIGN
public static Object[] clone(Class elementClass, Object[] array) {Object[] result = (Object[]) Array.newInstance( elementClass, array.length );System.arraycopy(array, 0, result, 0, array.length);return result;}	WITHOUT_CLASSIFICATION	0.9998757088141632	WITHOUT_CLASSIFICATION	1.242911858367961E-4	DESIGN
call this before any Iterator method to make sure that the current Iterator is not exhausted	WITHOUT_CLASSIFICATION	0.9927652697412486	WITHOUT_CLASSIFICATION	0.007234730258751505	DESIGN
doable if needed	WITHOUT_CLASSIFICATION	0.9999175229803184	WITHOUT_CLASSIFICATION	8.247701968155409E-5	DESIGN
set last used iterator here, in case the user calls remove before calling hasNext() or next() (although they shouldn't)	WITHOUT_CLASSIFICATION	0.9966847725125497	WITHOUT_CLASSIFICATION	0.0033152274874503045	DESIGN
peek ahead	WITHOUT_CLASSIFICATION	0.9998794782118305	WITHOUT_CLASSIFICATION	1.2052178816942662E-4	DESIGN
if we reach the end of the string w/o finding the matching end, that is an exception	WITHOUT_CLASSIFICATION	0.9975771562337294	WITHOUT_CLASSIFICATION	0.002422843766270458	DESIGN
we have a placeholder, spin forward till we find the end	WITHOUT_CLASSIFICATION	0.9970644549245165	WITHOUT_CLASSIFICATION	0.0029355450754836184	DESIGN
make sure spinning forward did not put us past the end of the buffer...	WITHOUT_CLASSIFICATION	0.9986185538070457	WITHOUT_CLASSIFICATION	0.0013814461929543065	DESIGN
First, try to locate this resource through the current context classloader.	WITHOUT_CLASSIFICATION	0.9987011027347521	WITHOUT_CLASSIFICATION	0.0012988972652478272	DESIGN
Next, try to locate this resource through this class's classloader	WITHOUT_CLASSIFICATION	0.9989882585597732	WITHOUT_CLASSIFICATION	0.0010117414402268305	DESIGN
Next, try to locate this resource through the system classloader	WITHOUT_CLASSIFICATION	0.9996625350510391	WITHOUT_CLASSIFICATION	3.3746494896085683E-4	DESIGN
Anywhere else we should look?	WITHOUT_CLASSIFICATION	0.9995389699376823	WITHOUT_CLASSIFICATION	4.6103006231772506E-4	DESIGN
would need an IdentitySet for this!	WITHOUT_CLASSIFICATION	0.9771391217137997	WITHOUT_CLASSIFICATION	0.02286087828620026	DESIGN
Arrays.asList doesn't do primitive arrays	WITHOUT_CLASSIFICATION	0.9997621799934354	WITHOUT_CLASSIFICATION	2.3782000656456074E-4	DESIGN
faster?	WITHOUT_CLASSIFICATION	0.9998680402420813	WITHOUT_CLASSIFICATION	1.3195975791871172E-4	DESIGN
the name of a class	WITHOUT_CLASSIFICATION	0.9999635724290563	WITHOUT_CLASSIFICATION	3.6427570943650134E-5	DESIGN
Its the listener class name	WITHOUT_CLASSIFICATION	0.9999728391478042	WITHOUT_CLASSIFICATION	2.71608521958767E-5	DESIGN
allow 9,8,7,6,5,4,3,2,1	WITHOUT_CLASSIFICATION	0.9996742470888867	WITHOUT_CLASSIFICATION	3.25752911113283E-4	DESIGN
default to element set if no elements() specified	WITHOUT_CLASSIFICATION	0.998604049248174	WITHOUT_CLASSIFICATION	0.0013959507518259587	DESIGN
look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9997961561671779	WITHOUT_CLASSIFICATION	2.0384383282204082E-4	DESIGN
in case we were deserialized in a different JVM, look for an instance with the same name (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.998965771594226	WITHOUT_CLASSIFICATION	0.001034228405774025	DESIGN
first, lets determine whether to apply cglib or javassist based instrumentation...	WITHOUT_CLASSIFICATION	0.9950459321456893	WITHOUT_CLASSIFICATION	0.0049540678543107544	DESIGN
Make sure we don't override previous set values	WITHOUT_CLASSIFICATION	0.9994800990526527	WITHOUT_CLASSIFICATION	5.199009473472733E-4	DESIGN
entirely optional!!	WITHOUT_CLASSIFICATION	0.9998616030562493	WITHOUT_CLASSIFICATION	1.3839694375075766E-4	DESIGN
Its the listener instance (or better be)	WITHOUT_CLASSIFICATION	0.996518524278502	WITHOUT_CLASSIFICATION	0.0034814757214979967	DESIGN
context.unbind(boundName);	WITHOUT_CLASSIFICATION	0.9998443304314125	WITHOUT_CLASSIFICATION	1.5566956858758022E-4	DESIGN
readResolveObject	WITHOUT_CLASSIFICATION	0.9998740958691271	WITHOUT_CLASSIFICATION	1.259041308727615E-4	DESIGN
cfg.setProperty("hibernate.show_sql", "true");	WITHOUT_CLASSIFICATION	0.9992564144695602	WITHOUT_CLASSIFICATION	7.435855304398626E-4	DESIGN
Defensive, convenience methods	WITHOUT_CLASSIFICATION	0.9998050604902783	WITHOUT_CLASSIFICATION	1.9493950972180395E-4	DESIGN
Create the SessionFactory from hibernate.cfg.xml	WITHOUT_CLASSIFICATION	0.9994742795300163	WITHOUT_CLASSIFICATION	5.257204699837984E-4	DESIGN
Make sure you log the exception, as it might be swallowed	WITHOUT_CLASSIFICATION	0.9998765461470616	WITHOUT_CLASSIFICATION	1.2345385293852E-4	DESIGN
Begin unit of work	WITHOUT_CLASSIFICATION	0.9998705881214741	WITHOUT_CLASSIFICATION	1.29411878525937E-4	DESIGN
Write HTML header	WITHOUT_CLASSIFICATION	0.9999126227080871	WITHOUT_CLASSIFICATION	8.73772919129457E-5	DESIGN
Handle actions	WITHOUT_CLASSIFICATION	0.9996133291486174	WITHOUT_CLASSIFICATION	3.8667085138250636E-4	DESIGN
Print page	WITHOUT_CLASSIFICATION	0.9997827582297608	WITHOUT_CLASSIFICATION	2.172417702391282E-4	DESIGN
Write HTML footer	WITHOUT_CLASSIFICATION	0.9998790114602614	WITHOUT_CLASSIFICATION	1.2098853973863152E-4	DESIGN
End unit of work	WITHOUT_CLASSIFICATION	0.9998107907294499	WITHOUT_CLASSIFICATION	1.892092705501226E-4	DESIGN
Start the session to be used for this request	WITHOUT_CLASSIFICATION	0.9962779806578522	WITHOUT_CLASSIFICATION	0.0037220193421478483	DESIGN
make the session available to the session factory's "current context"	WITHOUT_CLASSIFICATION	0.9970734059599513	WITHOUT_CLASSIFICATION	0.002926594040048739	DESIGN
pass control along to the rest of the processing chain	WITHOUT_CLASSIFICATION	0.999934595051525	WITHOUT_CLASSIFICATION	6.540494847494856E-5	DESIGN
remove session from "current context"	WITHOUT_CLASSIFICATION	0.9905022264097089	WITHOUT_CLASSIFICATION	0.009497773590291152	DESIGN
Eager fetch the collection so we can use it detached	WITHOUT_CLASSIFICATION	0.9990660628186913	WITHOUT_CLASSIFICATION	9.339371813086877E-4	DESIGN
If we want to handle it bidirectional and detached, we also need to load this collection with an eager outer-join fetch, this time with Criteria and not HQL:	WITHOUT_CLASSIFICATION	0.8618396875410296	WITHOUT_CLASSIFICATION	0.1381603124589705	DESIGN
Event anEvent = (Event) session .createCriteria(Event.class).setFetchMode("participants", FetchMode.JOIN) .add( Expression.eq("id", eventId) ) .uniqueResult(); Eager fetch the colleciton so we can use it detached	WITHOUT_CLASSIFICATION	0.9999299065684497	WITHOUT_CLASSIFICATION	7.009343155028498E-5	DESIGN
End of first unit of work	WITHOUT_CLASSIFICATION	0.9997019677378933	WITHOUT_CLASSIFICATION	2.980322621067713E-4	DESIGN
or bidirectional safety method, setting both sides: aPerson.addToEvent(anEvent);	WITHOUT_CLASSIFICATION	0.9979472448972452	WITHOUT_CLASSIFICATION	0.0020527551027547746	DESIGN
Begin second unit of work	WITHOUT_CLASSIFICATION	0.999921043321756	WITHOUT_CLASSIFICATION	7.895667824398599E-5	DESIGN
Reattachment of aPerson	WITHOUT_CLASSIFICATION	0.9998832605858241	WITHOUT_CLASSIFICATION	1.1673941417590612E-4	DESIGN
The getEmailAddresses() might trigger a lazy load of the collection	WITHOUT_CLASSIFICATION	0.998989946914969	WITHOUT_CLASSIFICATION	0.0010100530850310997	DESIGN
We need our tm, so get it now and avoid doing other work if there is a problem	WITHOUT_CLASSIFICATION	0.9999725083826269	WITHOUT_CLASSIFICATION	2.749161737319894E-5	DESIGN
Don't hold the JBC node lock throughout the tx, as that prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9992674443324362	WITHOUT_CLASSIFICATION	7.325556675638248E-4	DESIGN
Don't hold the JBC node lock throughout the tx, as that prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9992674443324362	WITHOUT_CLASSIFICATION	7.325556675638248E-4	DESIGN
JBC put a version in the node when it created as part of some internal operation. We are always newer, but if the JBC version is > 1 something odd has happened	WITHOUT_CLASSIFICATION	0.9999927250484147	WITHOUT_CLASSIFICATION	7.274951585268579E-6	DESIGN
swaldman 2006-08-28: define c3p0-style configuration parameters for properties with hibernate-specific overrides to detect and warn about conflicting declarations	WITHOUT_CLASSIFICATION	0.9961504209226804	WITHOUT_CLASSIFICATION	0.003849579077319619	DESIGN
Not null if the Isolation level has been specified in the configuration file. Otherwise, it is left to the Driver's default value.	WITHOUT_CLASSIFICATION	0.9996930182208038	WITHOUT_CLASSIFICATION	3.069817791961598E-4	DESIGN
Configured outside of Hibernate (i.e. Servlet container, or Java Bean Container already has Proxool pools running, and this provider is to just borrow one of these	WITHOUT_CLASSIFICATION	0.9110948577903766	WITHOUT_CLASSIFICATION	0.08890514220962349	DESIGN
If you're closing down the ConnectionProvider chances are an is not a real big deal, just warn	WITHOUT_CLASSIFICATION	0.9999479670897391	WITHOUT_CLASSIFICATION	5.2032910260949345E-5	DESIGN
(AS is always optional, for consistency with SQL/OQL)	WITHOUT_CLASSIFICATION	0.9962324100207867	WITHOUT_CLASSIFICATION	0.0037675899792133493	DESIGN
process the "new" HQL style where aliases are assigned _after_ the class name or path expression ie. using the AS construction	WITHOUT_CLASSIFICATION	0.9999741630089962	WITHOUT_CLASSIFICATION	2.5836991003787632E-5	DESIGN
the loaded owner will be set to null after the collection is removed, so capture its value as the affected owner so it is accessible to both pre- and post- events	WITHOUT_CLASSIFICATION	0.9989300961506703	WITHOUT_CLASSIFICATION	0.0010699038493297219	DESIGN
is a primitive type invokespecial	WITHOUT_CLASSIFICATION	0.9988651183880944	WITHOUT_CLASSIFICATION	0.0011348816119056116	DESIGN
array of primitive type do nothing	WITHOUT_CLASSIFICATION	0.9999761738275904	WITHOUT_CLASSIFICATION	2.382617240964734E-5	DESIGN
handle a path expression or class name that appears at the start, in the "new" HQL style or an alias that appears at the start in the "old" HQL style	WITHOUT_CLASSIFICATION	0.9996206620014724	WITHOUT_CLASSIFICATION	3.79337998527645E-4	DESIGN
handle <=, >=, !=, is not, not between, not in	WITHOUT_CLASSIFICATION	0.9973862079553516	WITHOUT_CLASSIFICATION	0.002613792044648487	DESIGN
The loop ensures atomicity of the select + update even for no transaction or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999970883152087	WITHOUT_CLASSIFICATION	2.9116847913171846E-6	DESIGN
transfer an explicitly defined entity name handle the lazy attribute	WITHOUT_CLASSIFICATION	0.9994373754751132	WITHOUT_CLASSIFICATION	5.626245248867863E-4	DESIGN
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9995548333844277	WITHOUT_CLASSIFICATION	4.4516661557216923E-4	DESIGN
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9995548333844277	WITHOUT_CLASSIFICATION	4.4516661557216923E-4	DESIGN
get meta's from <joined-subclass>	WITHOUT_CLASSIFICATION	0.9985275338523384	WITHOUT_CLASSIFICATION	0.0014724661476616353	DESIGN
parameters on the property mapping should override parameters in the typedef	WITHOUT_CLASSIFICATION	0.9995439691974523	WITHOUT_CLASSIFICATION	4.560308025477945E-4	DESIGN
fetch="join" overrides default laziness fetch="join" overrides default laziness	WITHOUT_CLASSIFICATION	0.9990844356712448	WITHOUT_CLASSIFICATION	9.155643287552002E-4	DESIGN
NOTE SPECIAL CASE: default to join and non-lazy for the "second join" of the many-to-many	WITHOUT_CLASSIFICATION	0.9994918141110547	WITHOUT_CLASSIFICATION	5.081858889451822E-4	DESIGN
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9996210219455726	WITHOUT_CLASSIFICATION	3.7897805442746175E-4	DESIGN
state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992573039446697	WITHOUT_CLASSIFICATION	7.426960553303479E-4	DESIGN
void setComponentTuplizerFactory(ComponentTuplizerFactory componentTuplizerFactory) { this.componentTuplizerFactory = componentTuplizerFactory; }	WITHOUT_CLASSIFICATION	0.9999545397505517	WITHOUT_CLASSIFICATION	4.5460249448276015E-5	DESIGN
element index -> id	WITHOUT_CLASSIFICATION	0.9999366758010555	WITHOUT_CLASSIFICATION	6.332419894447425E-5	DESIGN
note that it might be better to iterate the snapshot but this is safe, assuming the user implements equals() properly, as required by the Set contract!	WITHOUT_CLASSIFICATION	0.7120026703728466	WITHOUT_CLASSIFICATION	0.2879973296271535	DESIGN
collections detect changes made via their public interface and mark themselves as dirty as a performance optimization	WITHOUT_CLASSIFICATION	0.9866625039654485	WITHOUT_CLASSIFICATION	0.013337496034551491	DESIGN
essentially, if the real session is closed allow any method call to pass through since the real session will complain by throwing an appropriate exception; NOTE that allowing close() above has the same basic effect, but we capture that there simply to perform the unbind...	WITHOUT_CLASSIFICATION	0.9993012924218717	WITHOUT_CLASSIFICATION	6.987075781282817E-4	DESIGN
The default SQLExceptionConverter for all dialects is based on SQLState since SQLErrorCode is extremely vendor-specific. Specific Dialects may override to return whatever is most appropriate for that vendor.	WITHOUT_CLASSIFICATION	0.9850497685463567	WITHOUT_CLASSIFICATION	0.014950231453643156	DESIGN
only necessary for postgre < 7.4 http:anoncvs.postgresql.org/cvsweb.cgi/pgsql/doc/src/sgml/ref/create_sequence.sgml	WITHOUT_CLASSIFICATION	0.993070124355633	WITHOUT_CLASSIFICATION	0.006929875644366936	DESIGN
select topic, syntax from information_schema.help where section like 'Function%' order by section, topic see also -> http:www.h2database.com/html/functions.html	WITHOUT_CLASSIFICATION	0.9959267983251828	WITHOUT_CLASSIFICATION	0.004073201674817244	DESIGN
registerColumnType(Types.VARBINARY, "CHARACTER($l)"); registerColumnType(Types.BLOB, "CHARACTER($l)" ); For use prior to CP 11.0 registerColumnType(Types.CLOB, "CHARACTER($l)" );	WITHOUT_CLASSIFICATION	0.9991406307398036	WITHOUT_CLASSIFICATION	8.593692601963815E-4	DESIGN
the BLOB type requires a size arguement - this defaults to bytes - no arg defaults to 1 whole byte! other argument mods include K - kilobyte, M - megabyte, G - gigabyte. refer to the PBdevelopers guide for more info.	WITHOUT_CLASSIFICATION	0.9779468289945341	WITHOUT_CLASSIFICATION	0.022053171005465954	DESIGN
We must return a valid RDMS/RSA command from this method to prevent RDMS/RSA from issuing ERROR 400	WITHOUT_CLASSIFICATION	0.9543221235284943	WITHOUT_CLASSIFICATION	0.04567787647150575	DESIGN
Oracle driver reports to support getGeneratedKeys(), but they only support the version taking an array of the names of the columns to be returned (via its RETURNING clause). No other driver seems to support this overloaded version.	WITHOUT_CLASSIFICATION	0.9964422311265684	WITHOUT_CLASSIFICATION	0.003557768873431532	DESIGN
add the comment nest the main query in an outer select add the rownnumber bit into the outer query select list	WITHOUT_CLASSIFICATION	0.9999761318388064	WITHOUT_CLASSIFICATION	2.3868161193574147E-5	DESIGN
You may still have other ResultSets or update counts left to process here but you can't do it now or the ResultSet you just got will be closed	WITHOUT_CLASSIFICATION	0.9998655410522099	WITHOUT_CLASSIFICATION	1.3445894779002282E-4	DESIGN
Note: For object <-> SQL datatype mappings see: Configuration Manager | Advanced | SQL | System DDL Datatype Mappings TBDregisterColumnType(Types.BINARY, "binary($1)"); changed 08-11-2005, jsl	WITHOUT_CLASSIFICATION	0.9999598921895059	WITHOUT_CLASSIFICATION	4.010781049423499E-5	DESIGN
TRIM(end_keyword string-expression-1 FROM string-expression-2) use Hibernate implementation "From" is one of the parameters they pass in position ?3 registerFunction( "trim", new SQLFunctionTemplate(Hibernate.STRING, "trim(?1 ?2 from ?3)") );	WITHOUT_CLASSIFICATION	0.9969094054441503	WITHOUT_CLASSIFICATION	0.0030905945558497784	DESIGN
Whether this dialect has an Identity clause added to the data type or a completely seperate identity data type	WITHOUT_CLASSIFICATION	0.999325968304514	WITHOUT_CLASSIFICATION	6.740316954859461E-4	DESIGN
According to both the ANSI-SQL and JPA specs, trim takes a variable number of parameters between 1 and 4. at least one paramer (trimSource) is required. From the SQL spec: <trim function> ::= TRIM <left paren> <trim operands> <right paren> <trim operands> ::= [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> <trim specification> ::= LEADING | TRAILING | BOTH If <trim specification> is omitted, BOTH is assumed. If <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999317846838767	WITHOUT_CLASSIFICATION	6.821531612332763E-5	DESIGN
/ Prepare persisters and link them up with their cache region/access-strategy	WITHOUT_CLASSIFICATION	0.9997383693678487	WITHOUT_CLASSIFICATION	2.616306321513524E-4	DESIGN
Named Queries:	WITHOUT_CLASSIFICATION	0.9998740958691271	WITHOUT_CLASSIFICATION	1.259041308727615E-4	DESIGN
this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.998988046372788	WITHOUT_CLASSIFICATION	0.0010119536272119403	DESIGN
does not handle arrays (thats ok, cos they can't be lazy) or newly instantiated collections, so we can do the cast	WITHOUT_CLASSIFICATION	0.9284788387479441	WITHOUT_CLASSIFICATION	0.07152116125205588	DESIGN
collection deletions are a special case since update() can add deletions of collections not loaded by the session.	WITHOUT_CLASSIFICATION	0.9999728485323757	WITHOUT_CLASSIFICATION	2.715146762436981E-5	DESIGN
we can do the cast since orphan-delete does not apply to: 1. newly instantiated collections 2. arrays (we can't track orphans for detached arrays)	WITHOUT_CLASSIFICATION	0.9949077402381504	WITHOUT_CLASSIFICATION	0.0050922597618496416	DESIGN
if the natural-id is marked as non-mutable, it is not retrieved during a normal database-snapshot operation...	WITHOUT_CLASSIFICATION	0.9997914245851668	WITHOUT_CLASSIFICATION	2.085754148330938E-4	DESIGN
watch out for a case where old is still referenced somewhere in the object graph! (which is a user error)	WITHOUT_CLASSIFICATION	0.9927521571591313	WITHOUT_CLASSIFICATION	0.007247842840868679	DESIGN
slice, to get the columns for this component property	WITHOUT_CLASSIFICATION	0.9992088792819003	WITHOUT_CLASSIFICATION	7.911207180996612E-4	DESIGN
int result = 17; result = 37 result + type.hashCode(); result = 37 result + ( value==null ? 0 : value.hashCode() ); return result;	WITHOUT_CLASSIFICATION	0.9999347890879928	WITHOUT_CLASSIFICATION	6.521091200716034E-5	DESIGN
The CollectionEntry.isReached() stuff is just to detect any silly users who set up circular or shared references between/to collections.	WITHOUT_CLASSIFICATION	0.9996059423476382	WITHOUT_CLASSIFICATION	3.9405765236175496E-4	DESIGN
detached collection wrappers that get found + reattached during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9971646106198538	WITHOUT_CLASSIFICATION	0.002835389380146247	DESIGN
The unique property value represented here may or may not be serializable, so we do an explicit check here in order to generate a better error message	WITHOUT_CLASSIFICATION	0.9396511113032125	WITHOUT_CLASSIFICATION	0.06034888869678754	DESIGN
if the version of a newly instantiated object is not the same as the version seed value, use that as the unsaved-value	WITHOUT_CLASSIFICATION	0.9991653967643896	WITHOUT_CLASSIFICATION	8.346032356103044E-4	DESIGN
ie. we never have to null out a reference to an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9990457058050355	WITHOUT_CLASSIFICATION	9.542941949645125E-4	DESIGN
ignore this row, the collection is in process of being loaded somewhere further "up" the stack	WITHOUT_CLASSIFICATION	0.9941172451321215	WITHOUT_CLASSIFICATION	0.005882754867878594	DESIGN
Entity load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ currently, not yet used...	WITHOUT_CLASSIFICATION	0.9997249510013402	WITHOUT_CLASSIFICATION	2.750489986598711E-4	DESIGN
should be ok performance-wise to generate new delegate instances for each request since these are locally stack-scoped. Besides, it makes the code much easier to read than the old TransactionHelper stuff...	WITHOUT_CLASSIFICATION	0.9877929663055233	WITHOUT_CLASSIFICATION	0.012207033694476769	DESIGN
this implementation is supposed to tolerate incorrect unsaved-value mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9917230137421061	WITHOUT_CLASSIFICATION	0.00827698625789386	DESIGN
this implementation is supposed to tolerate incorrect unsaved-value mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9917230137421061	WITHOUT_CLASSIFICATION	0.00827698625789386	DESIGN
wrap up any new collections directly referenced by the object or its components	WITHOUT_CLASSIFICATION	0.9995317986611767	WITHOUT_CLASSIFICATION	4.6820133882338906E-4	DESIGN
remove any snapshot, not really for memory management purposes, but rather because it might now be stale, and there is no longer any EntityEntry to take precedence This is now handled by removeEntity() session.getPersistenceContext().removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9606502734124771	WITHOUT_CLASSIFICATION	0.03934972658752301	DESIGN
skip this check for composite-ids relating to dom4j entity-mode; alternatively, we could add a check to make sure the incoming id value is an instance of Element...	WITHOUT_CLASSIFICATION	0.9983546394212087	WITHOUT_CLASSIFICATION	0.0016453605787913087	DESIGN
upgrade the lock if necessary: lock(result, lockMode);	WITHOUT_CLASSIFICATION	0.9996533849894753	WITHOUT_CLASSIFICATION	3.466150105247266E-4	DESIGN
now, any collections that are initialized inside this block do not get updated - they are ignored until the next flush	WITHOUT_CLASSIFICATION	0.976575991447161	WITHOUT_CLASSIFICATION	0.023424008552838983	DESIGN
we must clone embedded composite identifiers, or we will get back the same instance that we pass in	WITHOUT_CLASSIFICATION	0.9999334357965171	WITHOUT_CLASSIFICATION	6.656420348291226E-5	DESIGN
Sub-insertions should occur before containing insertion so Try to do the callback now	WITHOUT_CLASSIFICATION	0.9993721374950488	WITHOUT_CLASSIFICATION	6.278625049512481E-4	DESIGN
the entity is not associated with the session, so try interceptor and unsaved-value	WITHOUT_CLASSIFICATION	0.9999238002457496	WITHOUT_CLASSIFICATION	7.619975425052561E-5	DESIGN
scan the query string for class names appearing in the from clause and replace with all persistent implementors of the class/interface, returning multiple query strings (make sure we don't pick up a class in the select clause!)	WITHOUT_CLASSIFICATION	0.9821495612490305	WITHOUT_CLASSIFICATION	0.017850438750969484	DESIGN
save() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993217010476709	WITHOUT_CLASSIFICATION	6.782989523290342E-4	DESIGN
evict() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993217010476709	WITHOUT_CLASSIFICATION	6.782989523290342E-4	DESIGN
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9861090027896543	WITHOUT_CLASSIFICATION	0.013890997210345627	DESIGN
if it is an uninitialized proxy, pointing with this session, then when it is accessed, the underlying instance will be "contained"	WITHOUT_CLASSIFICATION	0.9994188137797562	WITHOUT_CLASSIFICATION	5.811862202438269E-4	DESIGN
Generate an explicit join for the root dot node. The implied joins will be collected and passed up to the root dot node.	WITHOUT_CLASSIFICATION	0.9999306182083184	WITHOUT_CLASSIFICATION	6.938179168161983E-5	DESIGN
A session is considered to contain an entity only if the entity has an entry in the session's persistence context and the entry reports that the entity has not been removed	WITHOUT_CLASSIFICATION	0.9990151644989822	WITHOUT_CLASSIFICATION	9.8483550101776E-4	DESIGN
Does the collection referenced by this FromElement specify an order-by attribute? If so, attach it to the query's order-by	WITHOUT_CLASSIFICATION	0.9978529220328481	WITHOUT_CLASSIFICATION	0.002147077967151868	DESIGN
... and the token could be an identifer and the error is a mismatched token error ...	WITHOUT_CLASSIFICATION	0.9967580776485528	WITHOUT_CLASSIFICATION	0.0032419223514471556	DESIGN
If a where clause was specified in the update/delete query, use it to limit the returned ids here...	WITHOUT_CLASSIFICATION	0.9997843749654045	WITHOUT_CLASSIFICATION	2.1562503459543488E-4	DESIGN
int parameterStart = getWalker().getNumberOfParametersInSetClause(); List allParams = getIdSelectParameterSpecifications(); Iterator whereParams = allParams.subList( parameterStart, allParams.size() ).iterator();	WITHOUT_CLASSIFICATION	0.9999046937151828	WITHOUT_CLASSIFICATION	9.530628481726894E-5	DESIGN
Default implementation: If this node has a data type, and that data type is not an association, then this is scalar.	WITHOUT_CLASSIFICATION	0.9978379738185775	WITHOUT_CLASSIFICATION	0.002162026181422452	DESIGN
Resolve the LHS fully, generate implicit joins. Pass in the property name so that the resolver can discover foreign key (id) properties.	WITHOUT_CLASSIFICATION	0.9999645285923405	WITHOUT_CLASSIFICATION	3.547140765953388E-5	DESIGN
If the propertyType is null and there isn't a parent, just stop now... there was a problem resolving the node anyway.	WITHOUT_CLASSIFICATION	0.99996956592289	WITHOUT_CLASSIFICATION	3.0434077109998647E-5	DESIGN
We do not look for an existing join on the same path, because it makes sense to join twice on the same collection role	WITHOUT_CLASSIFICATION	0.9967812955025175	WITHOUT_CLASSIFICATION	0.0032187044974824725	DESIGN
our parent is another dot node, meaning we are being further dereferenced. thus we need to generate a join unless the parent refers to the associated entity's PK (because 'our' table would know the FK).	WITHOUT_CLASSIFICATION	0.9976973386344967	WITHOUT_CLASSIFICATION	0.002302661365503215	DESIGN
public final Currency getCurrency(int col) throws HibernateException {return (Currency) get(col);}	WITHOUT_CLASSIFICATION	0.995885694616086	WITHOUT_CLASSIFICATION	0.004114305383913996	DESIGN
here, we have two possibilities: 1) the property-name matches the explicitly identifier property name 2) the property-name matches the implicit 'id' property name	WITHOUT_CLASSIFICATION	0.9999726244952731	WITHOUT_CLASSIFICATION	2.737550472692685E-5	DESIGN
Set the unresolved path in this node and the parent. Set the text for the parent.	WITHOUT_CLASSIFICATION	0.999421821661408	WITHOUT_CLASSIFICATION	5.781783385920189E-4	DESIGN
Get the first child to be considered. Sub-classes may do this differently in order to skip nodes that are not select expressions (e.g. DISTINCT).	WITHOUT_CLASSIFICATION	0.9986641068904034	WITHOUT_CLASSIFICATION	0.001335893109596564	DESIGN
If this is an entity and the property is the identifier property, then use getIdentifierType(). Note that the propertyName.equals( propertyPath ) checks whether we have a component key reference, where the component class property name is the same as the entity id property name; if the two are not equal, this is the case and we'd need to "fall through" to using the property mapping.	WITHOUT_CLASSIFICATION	0.9998525678438885	WITHOUT_CLASSIFICATION	1.4743215611146557E-4	DESIGN
for a subquery, the alias to use depends on a few things (we already know this is not an overall SELECT): 1) if this FROM_ELEMENT represents a correlation to the outer-most query A) if the outer query represents a multi-table persister, we need to use the given alias in anticipation of one of the multi-table executors being used (as this subquery will actually be used in the "id select" phase of that multi-table executor) B) otherwise, we need to use the persister's table name as the column qualification 2) otherwise (not correlated), use the given alias	WITHOUT_CLASSIFICATION	0.9913111292856227	WITHOUT_CLASSIFICATION	0.008688870714377335	DESIGN
Not a collection? Return the entity property mapping.	WITHOUT_CLASSIFICATION	0.9999285082315557	WITHOUT_CLASSIFICATION	7.149176844434311E-5	DESIGN
collection of <many-to-any/> mappings... used to circumvent the component-collection check below...	WITHOUT_CLASSIFICATION	0.9989946940986335	WITHOUT_CLASSIFICATION	0.0010053059013665868	DESIGN
Otherwise, the destination node was implied by the FROM clause and the FROM clause processor will automatically add it in the right place.	WITHOUT_CLASSIFICATION	0.9997570179421403	WITHOUT_CLASSIFICATION	2.4298205785965062E-4	DESIGN
If the first identifier in the path referrs to the class alias (not the class name), then this is a correlated subselect. If it's a correlated sub-select, use the existing table alias. Otherwise generate a new one.	WITHOUT_CLASSIFICATION	0.9940859135297943	WITHOUT_CLASSIFICATION	0.005914086470205664	DESIGN
check to see if our "propPath" actually represents a property on the persister	WITHOUT_CLASSIFICATION	0.9995360932233698	WITHOUT_CLASSIFICATION	4.6390677663016414E-4	DESIGN
An ident node can represent an index expression if the ident represents a naked property ref Note: this makes the assumption (which is currently the case in the hql-sql grammar) that the ident is first resolved itself (addrExpr -> resolve()). The other option, if that changes, is to call resolve from here; but it is currently un-needed overhead.	WITHOUT_CLASSIFICATION	0.9999717365374181	WITHOUT_CLASSIFICATION	2.8263462581926157E-5	DESIGN
This uses a PathExpressionParser but notice that compound paths are not valid, only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9416921459156671	WITHOUT_CLASSIFICATION	0.05830785408433293	DESIGN
If this is an implied join in a FROM clause, then use ANSI-style joining, and set the flag on the FromElement that indicates that it was implied in the FROM clause itself.	WITHOUT_CLASSIFICATION	0.991624267815234	WITHOUT_CLASSIFICATION	0.008375732184765988	DESIGN
origin.addDestination(destination); Add the query spaces.	WITHOUT_CLASSIFICATION	0.9999036334904273	WITHOUT_CLASSIFICATION	9.636650957268185E-5	DESIGN
For an explicit many-to-many relationship, add a second join from the intermediate (many-to-many) table to the destination table. Also, make sure that the from element's idea of the destination is the destination table.	WITHOUT_CLASSIFICATION	0.9999501518629875	WITHOUT_CLASSIFICATION	4.984813701250166E-5	DESIGN
Reset the node type, because the rest of the system is expecting FROM_FRAGMENT, all we wanted was for the factory to create the right sub-class. This might get reset again later on anyway to make the SQL generation simpler.	WITHOUT_CLASSIFICATION	0.8018322751467768	WITHOUT_CLASSIFICATION	0.19816772485322315	DESIGN
explicit = true; This is an explict Select. ArrayList sqlResultTypeList = new ArrayList();	WITHOUT_CLASSIFICATION	0.9989683439950519	WITHOUT_CLASSIFICATION	0.001031656004948115	DESIGN
sqlResultTypeList.add( type ); Generate the select expression.	WITHOUT_CLASSIFICATION	0.9993359707737786	WITHOUT_CLASSIFICATION	6.640292262213689E-4	DESIGN
If the expression list has exactly one expression, and the type of the expression is a collection then this might be a collection function, such as index(c) or size(c).	WITHOUT_CLASSIFICATION	0.9845841128553829	WITHOUT_CLASSIFICATION	0.01541588714461717	DESIGN
Need to parse off the column qualifiers; this is assuming (which is true as of now) that this is only used from update and delete HQL statement parsing	WITHOUT_CLASSIFICATION	0.9998327634885945	WITHOUT_CLASSIFICATION	1.672365114055682E-4	DESIGN
for regression testing against output from the old parser... found it easiest to simply reorder the FromElements here into ascending order in terms of injecting them into the resulting sql ast in orders relative to those expected by the old parser; this is definitely another of those "only needed for regression purposes". The SyntheticAndFactory, then, simply injects them as it encounters them.	WITHOUT_CLASSIFICATION	0.9977114027098597	WITHOUT_CLASSIFICATION	0.002288597290140298	DESIGN
The uber-rule here is that we need to include subclass joins if the FromElement is in any way dereferenced by a property from the subclass table; otherwise we end up with column references qualified by a non-existent table reference in the resulting SQL...	WITHOUT_CLASSIFICATION	0.9770765593124237	WITHOUT_CLASSIFICATION	0.022923440687576332	DESIGN
classic translator does not support collection of ordinal param metadata	WITHOUT_CLASSIFICATION	0.9823817281559807	WITHOUT_CLASSIFICATION	0.01761827184401933	DESIGN
The following variables are stacks that keep information about each subexpression in the list of nested subexpressions we are currently processing.	WITHOUT_CLASSIFICATION	0.9995399130968432	WITHOUT_CLASSIFICATION	4.60086903156725E-4	DESIGN
The loop ensures atomicity of the select + update even for no transaction or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999970883152087	WITHOUT_CLASSIFICATION	2.9116847913171846E-6	DESIGN
should not be able to reach last without maxPosition being set unless there are no results	WITHOUT_CLASSIFICATION	0.999125061410411	WITHOUT_CLASSIFICATION	8.749385895889215E-4	DESIGN
we found it in the temp PC. Should indicate we are in the midst of processing a result set containing eager fetches via join fetch	WITHOUT_CLASSIFICATION	0.9998279105784592	WITHOUT_CLASSIFICATION	1.7208942154076806E-4	DESIGN
do not use proxiesByKey, since not all proxies that point to this session's instances are in that collection!	WITHOUT_CLASSIFICATION	0.99655391725435	WITHOUT_CLASSIFICATION	0.0034460827456500014	DESIGN
if there is no TM configured, we will not be able to access the javax.transaction.Transaction object in order to register a synch anyway.	WITHOUT_CLASSIFICATION	0.9986222605935245	WITHOUT_CLASSIFICATION	0.0013777394064754403	DESIGN
Since the result set cursor is always left at the first physical row after the "last processed", we need to jump back one position to get the key value we are interested in skipping	WITHOUT_CLASSIFICATION	0.9994665429335897	WITHOUT_CLASSIFICATION	5.334570664103611E-4	DESIGN
true if this is a query and we are loading multiple instances of the same collection role otherwise this is a CollectionInitializer and we are loading up a single collection or batch	WITHOUT_CLASSIFICATION	0.9646069476587246	WITHOUT_CLASSIFICATION	0.03539305234127543	DESIGN
we don't need to worry about existing version being uninitialized because this block isn't called by a re-entrant load (re-entrant loads _always_ have lock mode NONE)	WITHOUT_CLASSIFICATION	0.9633583090385271	WITHOUT_CLASSIFICATION	0.03664169096147287	DESIGN
add temp entry so that the next step is circular-reference safe - only needed because some types don't take proper advantage of two-phase-load (esp. components)	WITHOUT_CLASSIFICATION	0.999864903740238	WITHOUT_CLASSIFICATION	1.350962597620117E-4	DESIGN
assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9976550072424505	WITHOUT_CLASSIFICATION	0.0023449927575495614	DESIGN
log a message about potential connection leaks	WITHOUT_CLASSIFICATION	0.9960207140496509	WITHOUT_CLASSIFICATION	0.003979285950349097	DESIGN
ps.close(); just close it; do NOT try to return it to the pool! NOTE: early exit!	WITHOUT_CLASSIFICATION	0.999984315582123	WITHOUT_CLASSIFICATION	1.5684417877045596E-5	DESIGN
this has been shown to happen occasionally in rare cases when using a transaction manager + transaction-timeout where the timeout calls back through Hibernate's registered transaction synchronization on a separate "reaping" thread. In cases where that reaping thread executes through this block at the same time the main application thread does we can get into situations where these CMEs occur. And though it is not "allowed" per-se, the end result without handling it specifically is infinite looping. So here, we simply break the loop	WITHOUT_CLASSIFICATION	0.7472893727315224	WITHOUT_CLASSIFICATION	0.25271062726847754	DESIGN
unfortunately this stuff can't be cached because it is per-invocation, not constant for the QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9983040498901695	WITHOUT_CLASSIFICATION	0.001695950109830468	DESIGN
can't cache this stuff either (per-invocation) we are given a map of user-alias -> lock mode create a new map of sql-alias -> lock mode	WITHOUT_CLASSIFICATION	0.9987600821254249	WITHOUT_CLASSIFICATION	0.0012399178745750574	DESIGN
don't create a unique key, 'cos some databases don't like a UK on nullable columns getCollectionTable().createUniqueKey( getIdentifier().getConstraintColumns() );	WITHOUT_CLASSIFICATION	0.9863793236215411	WITHOUT_CLASSIFICATION	0.013620676378458778	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999022180902976	WITHOUT_CLASSIFICATION	9.778190970239733E-4	DESIGN
isSet = collection.isSet(); isSorted = collection.isSorted();	WITHOUT_CLASSIFICATION	0.9998907403978173	WITHOUT_CLASSIFICATION	1.092596021825539E-4	DESIGN
lists, arrays sets, maps, bags	WITHOUT_CLASSIFICATION	0.9998303844458127	WITHOUT_CLASSIFICATION	1.6961555418727292E-4	DESIGN
we finish all the "removes" first to take care of possible unique constraints and so that we can take better advantage of batching	WITHOUT_CLASSIFICATION	0.9974306561252121	WITHOUT_CLASSIFICATION	0.0025693438747878116	DESIGN
use a combination of foreign key columns and pk columns, since the ordering of removal and addition is not guaranteed when a child moves from one parent to another	WITHOUT_CLASSIFICATION	0.9997870508863742	WITHOUT_CLASSIFICATION	2.1294911362573502E-4	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999022180902976	WITHOUT_CLASSIFICATION	9.778190970239733E-4	DESIGN
information about properties of this class, including inherited properties (only really needed for updatable/insertable properties)	WITHOUT_CLASSIFICATION	0.9971989381593728	WITHOUT_CLASSIFICATION	0.0028010618406272025	DESIGN
all this only really needs to consider properties of this class, not its subclasses, but since we are reusing code used for sequential selects, we use the subclass closure	WITHOUT_CLASSIFICATION	0.9853373229902206	WITHOUT_CLASSIFICATION	0.014662677009779445	DESIGN
Here we render the select column list based on the properties defined as being generated. For partial component generation, we currently just re-select the whole component rather than trying to handle the individual generated portions.	WITHOUT_CLASSIFICATION	0.9997512034370051	WITHOUT_CLASSIFICATION	2.487965629949505E-4	DESIGN
this is the root (versioned) table, and we are using version-based optimistic locking; if we are not updating the version, also don't check it (unless this is a "generated" version column)!	WITHOUT_CLASSIFICATION	0.9959302531178585	WITHOUT_CLASSIFICATION	0.0040697468821414805	DESIGN
optimistic-lock="all", include all updatable properties optimistic-lock="dirty", include all properties we are updating this time	WITHOUT_CLASSIFICATION	0.9987866646397626	WITHOUT_CLASSIFICATION	0.0012133353602374066	DESIGN
this property belongs to the table, and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9965157164099812	WITHOUT_CLASSIFICATION	0.003484283590018915	DESIGN
check to see if the connection is in auto-commit mode (no connection means aggressive connection release outside a JTA transaction context, so MUST be autocommit mode)	WITHOUT_CLASSIFICATION	0.9973396985372336	WITHOUT_CLASSIFICATION	0.0026603014627663755	DESIGN
need to treat this as if it where optimistic-lock="all" (dirty does not make sense); first we need to locate the "loaded" state Note, it potentially could be a proxy, so perform the location the safe way...	WITHOUT_CLASSIFICATION	0.8325893987310857	WITHOUT_CLASSIFICATION	0.1674106012689143	DESIGN
we always assume an instance with a null identifier or no identifier property is unsaved!	WITHOUT_CLASSIFICATION	0.9982672963757933	WITHOUT_CLASSIFICATION	0.0017327036242066472	DESIGN
Need to use the identifier type of the collection owner since the incoming is value is actually the owner's id. Using the collection's key type causes problems with property-ref keys...	WITHOUT_CLASSIFICATION	0.9959538836036077	WITHOUT_CLASSIFICATION	0.004046116396392298	DESIGN
allow any identifier quoted with backtick only recognizes identifiers beginning with a letter	WITHOUT_CLASSIFICATION	0.9988154572014767	WITHOUT_CLASSIFICATION	0.001184542798523278	DESIGN
following doesn't handle (null, not null) but unnecessary since this would mean all rows	WITHOUT_CLASSIFICATION	0.9989769958160274	WITHOUT_CLASSIFICATION	0.0010230041839726322	DESIGN
IMPL NOTE : due to the delayed population of setters (setters cached for performance), we really cannot pro0perly define equality for this transformer	WITHOUT_CLASSIFICATION	0.9989549430852294	WITHOUT_CLASSIFICATION	0.0010450569147706066	DESIGN
we need to dirty check collections, since they can cause an owner version number increment	WITHOUT_CLASSIFICATION	0.9979478993048959	WITHOUT_CLASSIFICATION	0.0020521006951040592	DESIGN
return the id, so we can use it to reset the proxy id return result;	WITHOUT_CLASSIFICATION	0.999884634296556	WITHOUT_CLASSIFICATION	1.1536570344393563E-4	DESIGN
optimizer = getFactory().getSettings().getBytecodeProvider().getReflectionOptimizer( mappedClass, getterNames, setterNames, propTypes );	WITHOUT_CLASSIFICATION	0.9998907403978173	WITHOUT_CLASSIFICATION	1.092596021825539E-4	DESIGN
cache the actual id of the object, not the value of the property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9997253864142737	WITHOUT_CLASSIFICATION	2.746135857263413E-4	DESIGN
We now have the value of the property-ref we reference. However, we need to dig a little deeper, as that property might also be an entity type, in which case we need to resolve its identitifier	WITHOUT_CLASSIFICATION	0.9999742727885597	WITHOUT_CLASSIFICATION	2.5727211440346622E-5	DESIGN
Retrieve the value of the designated column in the current row of this ResultSet object as a java.io.Reader object	WITHOUT_CLASSIFICATION	0.9994568827018987	WITHOUT_CLASSIFICATION	5.431172981012478E-4	DESIGN
not absolutely necessary, but helps for some equals()/hashCode() implementations	WITHOUT_CLASSIFICATION	0.9984280791322425	WITHOUT_CLASSIFICATION	0.0015719208677574825	DESIGN
this should be a call to resolve(), not resolveIdentifier(), 'cos it might be a property-ref, and we did not cache the referenced value	WITHOUT_CLASSIFICATION	0.9843990647268531	WITHOUT_CLASSIFICATION	0.015600935273146937	DESIGN
If we have <tt>not-found="ignore"</tt> association mapped to a formula, we always need to dirty check it, so we can update the second-level cache	WITHOUT_CLASSIFICATION	0.9999417549078228	WITHOUT_CLASSIFICATION	5.824509217710141E-5	DESIGN
can't just return null here, since that would cause an owning component to become null	WITHOUT_CLASSIFICATION	0.9979249067105223	WITHOUT_CLASSIFICATION	0.0020750932894776663	DESIGN
for arrays, replaceElements() may return a different reference, since the array length might not match	WITHOUT_CLASSIFICATION	0.9992320556288843	WITHOUT_CLASSIFICATION	7.679443711157226E-4	DESIGN
actual cache of the entries. soft references are used for both the keys and the values here since the values pertaining to the MRU entries are kept in a seperate hard reference cache (to avoid their enqueuement/garbage-collection).	WITHOUT_CLASSIFICATION	0.9997069878263467	WITHOUT_CLASSIFICATION	2.9301217365326553E-4	DESIGN
as soon as we encounter our first letter, return the substring from that position	WITHOUT_CLASSIFICATION	0.9985979432516845	WITHOUT_CLASSIFICATION	0.0014020567483154743	DESIGN
Note : expected in the syntax: type=listenerClass ({sep}type=listenerClass) where {sep} is any whitespace or comma	WITHOUT_CLASSIFICATION	0.9995571906808931	WITHOUT_CLASSIFICATION	4.4280931910692216E-4	DESIGN
isTransactionCallbackRegistered denotes whether any Hibernate Transaction has registered as a callback against this JDBCContext; only one such callback is allowed. Directly serializing this value causes problems with JDBCTransaction, or really any Transaction impl where the callback is local to the Transaction instance itself, since that Transaction is not serialized along with the JDBCContext. Thus we handle that fact here explicitly...	WITHOUT_CLASSIFICATION	0.9834740076493624	WITHOUT_CLASSIFICATION	0.016525992350637522	DESIGN
note that for sequential scrolling, we make the assumption that the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9636304314765064	WITHOUT_CLASSIFICATION	0.036369568523493524	DESIGN
We call getKeyFromResultSet() here so that we can know the key value upon which to perform the breaking logic. However, it is also then called from getRowFromResultSet() which is certainly not the most efficient. But the call here is needed, and there currently is no other way without refactoring of the doQuery()/getRowFromResultSet() methods	WITHOUT_CLASSIFICATION	0.9987399441463304	WITHOUT_CLASSIFICATION	0.0012600558536696416	DESIGN
This check is needed since processing leaves the cursor after the last physical row for the current logical row; thus if we are after the last physical row, this might be caused by either: 1) scrolling to the last logical row 2) scrolling past the last logical row In the latter scenario, the previous logical row really is the last logical row. In all other cases, we should process back two logical records (the current logic row, plus the previous logical row).	WITHOUT_CLASSIFICATION	0.6390790058221185	WITHOUT_CLASSIFICATION	0.3609209941778814	DESIGN
and perform the load	WITHOUT_CLASSIFICATION	0.999907107869593	WITHOUT_CLASSIFICATION	9.289213040702771E-5	DESIGN
important: reuse the same event instances for performance!	WITHOUT_CLASSIFICATION	0.9994573424839408	WITHOUT_CLASSIFICATION	5.426575160591866E-4	DESIGN
this is a query and we are loading multiple instances of the same collection role	WITHOUT_CLASSIFICATION	0.9424040929626577	WITHOUT_CLASSIFICATION	0.05759590703734239	DESIGN
we found a collection element in the result set	WITHOUT_CLASSIFICATION	0.996040999340197	WITHOUT_CLASSIFICATION	0.0039590006598030775	DESIGN
we did not find a collection element in the result set, so we ensure that a collection is created with the owner's identifier, since what we have is an empty collection	WITHOUT_CLASSIFICATION	0.9990237229027562	WITHOUT_CLASSIFICATION	9.7627709724376E-4	DESIGN
this is a collection initializer, so we must create a collection for each of the passed-in keys, to account for the possibility that the collection is empty and has no rows in the result set	WITHOUT_CLASSIFICATION	0.9731981342640618	WITHOUT_CLASSIFICATION	0.026801865735938225	DESIGN
grab its state from the ResultSet and keep it in the Session (but don't yet initialize the object itself) note that we acquire LockMode.READ even if it was not requested	WITHOUT_CLASSIFICATION	0.999441912820414	WITHOUT_CLASSIFICATION	5.580871795861054E-4	DESIGN
a many-to-many; decrement currentDepth here to allow join across the association table without exceeding MAX_FETCH_DEPTH (i.e. the "currentDepth - 1" bit)	WITHOUT_CLASSIFICATION	0.9313359193660217	WITHOUT_CLASSIFICATION	0.06866408063397825	DESIGN
if not a composite key, use "foo in (?, ?, ?)" for batching if no batch, and not a composite key, use "foo = ?"	WITHOUT_CLASSIFICATION	0.9996684710259375	WITHOUT_CLASSIFICATION	3.31528974062423E-4	DESIGN
the user visible aliases, which are unknown to the superclass, these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999507353650009	WITHOUT_CLASSIFICATION	4.9264634999186115E-5	DESIGN
first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9936942985010966	WITHOUT_CLASSIFICATION	0.006305701498903421	DESIGN
first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9936942985010966	WITHOUT_CLASSIFICATION	0.006305701498903421	DESIGN
it does not refer to an alias of a projection, look for a property	WITHOUT_CLASSIFICATION	0.9980175215960473	WITHOUT_CLASSIFICATION	0.001982478403952606	DESIGN
determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9996100313501156	WITHOUT_CLASSIFICATION	3.899686498843312E-4	DESIGN
Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9994681644590894	WITHOUT_CLASSIFICATION	5.318355409106533E-4	DESIGN
Translates an AST join type (i.e., the token type) into a JoinFragment.XXX join type. @param astJoinType The AST join type (from HqlSqlTokenTypes or SqlTokenTypes) @return a JoinFragment.XXX join type. @see JoinFragment @see SqlTokenTypes	WITHOUT_CLASSIFICATION	0.9990959219551515	WITHOUT_CLASSIFICATION	9.040780448486404E-4	DESIGN
ignore	WITHOUT_CLASSIFICATION	0.9997087489104198	WITHOUT_CLASSIFICATION	2.912510895801591E-4	DESIGN
ignore	WITHOUT_CLASSIFICATION	0.9997087489104198	WITHOUT_CLASSIFICATION	2.912510895801591E-4	DESIGN
}	WITHOUT_CLASSIFICATION	0.9999078496068791	WITHOUT_CLASSIFICATION	9.215039312096722E-5	DESIGN
public List getCollectionAliases() { return collectionAliases; } public List getCollectionOwners() { return collectionOwners; } public List getCollectionOwnerAliases() { return collectionOwnerAliases; } public List getCollectionPersisters() { return collectionPersisters; } public Map getAlias2Persister() { return alias2Persister; } public boolean isCollectionInitializer() { return isCollectionInitializer; } public List getPersisters() { return persisters; } public Map getAlias2OwnerAlias() { return alias2OwnerAlias; } public List getScalarTypes() { return scalarTypes; } public List getScalarColumnAliases() { return scalarColumnAliases; } public List getPropertyResults() { return propertyResults; } public List getCollectionPropertyResults() { return collectionResults; } public Map getAlias2Return() { return alias2Return; }	WITHOUT_CLASSIFICATION	0.9997177030227562	WITHOUT_CLASSIFICATION	2.822969772437731E-4	DESIGN
SQLQueryParser parser = new SQLQueryParser( sqlQuery, processor.getAlias2Persister(), processor.getAlias2Return(), aliases, collAliases, collPersisters, suffixes, collSuffixes ); sql = parser.process(); namedParameterBindPoints = parser.getNamedParameters();	WITHOUT_CLASSIFICATION	0.9995751028729252	WITHOUT_CLASSIFICATION	4.2489712707486255E-4	DESIGN
include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9998117053995428	WITHOUT_CLASSIFICATION	1.8829460045714726E-4	DESIGN
sqlAliasSuffixes[i] = element.getColumnAliasSuffix();	WITHOUT_CLASSIFICATION	0.9998907403978173	WITHOUT_CLASSIFICATION	1.092596021825539E-4	DESIGN
NONE, because its the requested lock mode, not the actual!	WITHOUT_CLASSIFICATION	0.9999537459054668	WITHOUT_CLASSIFICATION	4.625409453317844E-5	DESIGN
at this point we have (drivingSqlAlias) the SQL alias of the driving table corresponding to the given user alias. However, the driving table is not (necessarily) the table against which we want to apply locks. Mainly, the exception case here is joined-subclass hierarchies where we instead want to apply the lock against the root table (for all other strategies, it just happens that driving and root are the same).	WITHOUT_CLASSIFICATION	0.9986908937091076	WITHOUT_CLASSIFICATION	0.0013091062908924113	DESIGN
the column doesnt exist at all.	WITHOUT_CLASSIFICATION	0.999559143731585	WITHOUT_CLASSIFICATION	4.408562684149013E-4	DESIGN
we have a mapped identifier property and the root of the incoming property path matched that identifier property	WITHOUT_CLASSIFICATION	0.9999240396243206	WITHOUT_CLASSIFICATION	7.596037567933825E-5	DESIGN
we have an embedded composite identifier	WITHOUT_CLASSIFICATION	0.999452519013453	WITHOUT_CLASSIFICATION	5.474809865470397E-4	DESIGN
both many-to-one and one-to-one are represented as a Property. EntityPersister is relying on this value to determine "lazy fetch groups" in terms of field-level interception. So we need to make sure that we return true here for the case of many-to-one and one-to-one with lazy="no-proxy" impl note - lazy="no-proxy" currently forces both lazy and unwrap to be set to true. The other case we are extremely interested in here is that of lazy="proxy" where lazy is set to true, but unwrap is set to false. thus we use both here under the assumption that this return is really only ever used during persister construction to determine the lazy property/field fetch groupings. If that assertion changes then this check needs to change as well. Partially, this is an issue with the overloading of the term "lazy" here...	WITHOUT_CLASSIFICATION	0.8736419174648129	WITHOUT_CLASSIFICATION	0.126358082535187	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993120683007597	WITHOUT_CLASSIFICATION	6.879316992403083E-4	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993120683007597	WITHOUT_CLASSIFICATION	6.879316992403083E-4	DESIGN
rootTableName = persistentClass.getRootTable().getQualifiedName( factory.getDialect(), factory.getDefaultCatalog(), factory.getDefaultSchema() );	WITHOUT_CLASSIFICATION	0.9998907403978173	WITHOUT_CLASSIFICATION	1.092596021825539E-4	DESIGN
SUBCLASSES	WITHOUT_CLASSIFICATION	0.9998680402420813	WITHOUT_CLASSIFICATION	1.3195975791871172E-4	DESIGN
Custom sql	WITHOUT_CLASSIFICATION	0.9998684476940457	WITHOUT_CLASSIFICATION	1.3155230595427987E-4	DESIGN
protected void initPropertyPaths(final String path,final Type type,final String[] columns,final String[] formulaTemplates,final Mapping factory)throws MappingException {addFormulaPropertyPath(path, type, formulaTemplates);initPropertyPaths(path, type, columns, formulaTemplates, factory);}	WITHOUT_CLASSIFICATION	0.9984990415998994	WITHOUT_CLASSIFICATION	0.0015009584001004614	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992564144695602	WITHOUT_CLASSIFICATION	7.435855304398626E-4	DESIGN
Custom SQL (would be better if these were private)	WITHOUT_CLASSIFICATION	0.9861406994400702	WITHOUT_CLASSIFICATION	0.013859300559929835	DESIGN
moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9909335318105137	WITHOUT_CLASSIFICATION	0.009066468189486263	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992564144695602	WITHOUT_CLASSIFICATION	7.435855304398626E-4	DESIGN
aliases for identifier ( alias.id ); skip if the entity defines a non-id property named 'id'	WITHOUT_CLASSIFICATION	0.9998682512860958	WITHOUT_CLASSIFICATION	1.3174871390410158E-4	DESIGN
decide which ResultSet to get the property value from:	WITHOUT_CLASSIFICATION	0.9999195207571702	WITHOUT_CLASSIFICATION	8.047924282977692E-5	DESIGN
note: it is conceptually possible that a UserType could map null to a non-null value, so the following is arguable:	WITHOUT_CLASSIFICATION	0.9997677680730183	WITHOUT_CLASSIFICATION	2.322319269816688E-4	DESIGN
the contract of EntityTuplizer.determineConcreteSubclassEntityName says that returning null is an indication that the specified entity-name (this.getEntityName) should be used.	WITHOUT_CLASSIFICATION	0.9930375093789595	WITHOUT_CLASSIFICATION	0.006962490621040481	DESIGN
Need to use the identifier type of the collection owner since the incoming is value is actually the owner's id. Using the collection's key type causes problems with property-ref keys...	WITHOUT_CLASSIFICATION	0.9959538836036077	WITHOUT_CLASSIFICATION	0.004046116396392298	DESIGN
cache these since they are stateless this one could even be static...	WITHOUT_CLASSIFICATION	0.9561384875150735	WITHOUT_CLASSIFICATION	0.04386151248492655	DESIGN
"as" is not in KEYWORDS	WITHOUT_CLASSIFICATION	0.999708282542181	WITHOUT_CLASSIFICATION	2.9171745781899093E-4	DESIGN
--Commented out by Inspection (12/4/04 9:10 AM): public abstract void addCondition(String alias, String[] columns, String condition);	WITHOUT_CLASSIFICATION	0.9882025231858991	WITHOUT_CLASSIFICATION	0.01179747681410087	DESIGN
use the id column alias	WITHOUT_CLASSIFICATION	0.9999349329102386	WITHOUT_CLASSIFICATION	6.506708976141543E-5	DESIGN
private List aliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999173879158181	WITHOUT_CLASSIFICATION	8.261208418195172E-5	DESIGN
columns.add(columnName); aliases.add(tableAlias);	WITHOUT_CLASSIFICATION	0.9992564144695602	WITHOUT_CLASSIFICATION	7.435855304398626E-4	DESIGN
where fragment must be empty!	WITHOUT_CLASSIFICATION	0.9993464993396088	WITHOUT_CLASSIFICATION	6.535006603910701E-4	DESIGN
revert to traditional hibernate behavior of setting initialPoolSize to minPoolSize unless otherwise specified with a c3p0.-style parameter.	WITHOUT_CLASSIFICATION	0.9984800211345364	WITHOUT_CLASSIFICATION	0.0015199788654635387	DESIGN
arbitrary on clause ignored!!	WITHOUT_CLASSIFICATION	0.9998051054987596	WITHOUT_CLASSIFICATION	1.948945012403543E-4	DESIGN
might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9913548102381204	WITHOUT_CLASSIFICATION	0.008645189761879642	DESIGN
might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9913548102381204	WITHOUT_CLASSIFICATION	0.008645189761879642	DESIGN
if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9988844719825818	WITHOUT_CLASSIFICATION	0.0011155280174181574	DESIGN
Essentially: 1) If we have a local (Hibernate) transaction in progress and it already has the UserTransaction cached, use that UserTransaction to determine the status. 2) If a transaction manager has been located, use that transaction manager to determine the status. 3) Finally, as the last resort, try to lookup the UserTransaction via JNDI and use that to determine the status.	WITHOUT_CLASSIFICATION	0.9988843812912058	WITHOUT_CLASSIFICATION	0.001115618708794163	DESIGN
package	WITHOUT_CLASSIFICATION	0.9993601709670066	WITHOUT_CLASSIFICATION	6.398290329934237E-4	DESIGN
swallow it (the transaction _was_ successful or successfully rolled back)	WITHOUT_CLASSIFICATION	0.9989487897249854	WITHOUT_CLASSIFICATION	0.0010512102750146672	DESIGN
ignore it	WITHOUT_CLASSIFICATION	0.999787027345425	WITHOUT_CLASSIFICATION	2.1297265457498218E-4	DESIGN
we need to dirty check many-to-ones with not-found="ignore" in order to update the cache (not the database), since in this case a null entity reference can lose information	WITHOUT_CLASSIFICATION	0.9892618680128274	WITHOUT_CLASSIFICATION	0.010738131987172585	DESIGN
create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999308958801291	WITHOUT_CLASSIFICATION	6.910411987086174E-5	DESIGN
Regions can get instantiated in the course of normal work (e.g. a named query region will be created the first time the query is executed), so suspend any ongoing tx	WITHOUT_CLASSIFICATION	0.999293155703527	WITHOUT_CLASSIFICATION	7.068442964730145E-4	DESIGN
then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.998608582967878	WITHOUT_CLASSIFICATION	0.0013914170321220672	DESIGN
Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9997295031731305	WITHOUT_CLASSIFICATION	2.7049682686957076E-4	DESIGN
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9849663108013471	WITHOUT_CLASSIFICATION	0.015033689198652838	DESIGN
NOTE : this is being used from the process of shutting down a SessionFactory. Specific things to consider: (1) this clearing of the region should not propagate to other nodes on the cluster (if any); this is the cache-mode-local option bit... (2) really just trying a best effort to cleanup after ourselves; lock failures, etc are not critical here; this is the fail-silently option bit...	WITHOUT_CLASSIFICATION	0.9534397150085403	WITHOUT_CLASSIFICATION	0.04656028499145969	DESIGN
need to extract the component values and check for subtype replacements...	WITHOUT_CLASSIFICATION	0.9997134449485935	WITHOUT_CLASSIFICATION	2.865550514064303E-4	DESIGN
We ignore minimalPutOverride. JBossCache putForExternalRead is already about as minimal as we can get; it will promptly return if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.999101806669411	WITHOUT_CLASSIFICATION	8.981933305890576E-4	DESIGN
for now, just "re-flatten" the metamodel since this is temporary stuff anyway (HHH-1907)	WITHOUT_CLASSIFICATION	0.9366702123735369	WITHOUT_CLASSIFICATION	0.06332978762646307	DESIGN
Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9995619753281301	WITHOUT_CLASSIFICATION	4.380246718698722E-4	DESIGN
This solution would allow us to eliminate the owner arg to disassemble(), but what if the collection was null, and then later had elements added? seems unsafe session.getPersistenceContext().getCollectionEntry( (PersistentCollection) value ).getKey();	WITHOUT_CLASSIFICATION	0.6972808012030429	WITHOUT_CLASSIFICATION	0.3027191987969571	DESIGN
Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9998877176090093	WITHOUT_CLASSIFICATION	1.1228239099068204E-4	DESIGN
some collections are not lazy:	WITHOUT_CLASSIFICATION	0.999743143369476	WITHOUT_CLASSIFICATION	2.568566305239961E-4	DESIGN
Here we don't want to suspend the tx. If we do: 1) We might be caching query results that reflect uncommitted changes. No tx == no WL on cache node, so other threads can prematurely see those query results 2) No tx == immediate replication. More overhead, plus we spread issue #1 above around the cluster	WITHOUT_CLASSIFICATION	0.9954936815224106	WITHOUT_CLASSIFICATION	0.004506318477589379	DESIGN
return the (fully resolved) identifier value, but do not resolve to the actual referenced entity instance NOTE: the owner of the association is not really the owner of the id!	WITHOUT_CLASSIFICATION	0.9999734542873411	WITHOUT_CLASSIFICATION	2.6545712658941518E-5	DESIGN
Add a zero (or quite low) timeout option so we don't block. Ignore any TimeoutException. Basically we forego caching the query result in order to avoid blocking. Reads are done with suspended tx, so they should not hold the lock for long. Not caching the query result is OK, since any subsequent read will just see the old result with its out-of-date timestamp; that result will be discarded and the db query performed again.	WITHOUT_CLASSIFICATION	0.9978109129418391	WITHOUT_CLASSIFICATION	0.002189087058160951	DESIGN
Impl note: takes advantage of the fact that an escpaed single quote embedded within a quote-block can really be handled as two seperate quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9997310813382888	WITHOUT_CLASSIFICATION	2.689186617111943E-4	DESIGN
We have the JBCWriteMutex, so no other local thread will be trying to write this key. It's possible here some remote thread has come in and changed the values again, but since we are reading the values to write to JBC right now, we know we are writing the latest values; i.e. we don't assume that what we cached in entry.update() above is what we should write to JBC now. Our write could be redundant, i.e. we are writing what some remote thread just came in an wrote. There is a chance that yet another remote thread will update us, and we'll then overwrite that later data in JBC. But, all remote nodes will ignore that change in their localCache; the only place it will live will be in JBC, where it can only effect the initial state transfer values on newly joined nodes (i.e. populateLocalCache()).	WITHOUT_CLASSIFICATION	0.9893715769519564	WITHOUT_CLASSIFICATION	0.010628423048043682	DESIGN
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9979225623520557	WITHOUT_CLASSIFICATION	0.0020774376479444218	DESIGN
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9979225623520557	WITHOUT_CLASSIFICATION	0.0020774376479444218	DESIGN
Don't need to lock the cache here, since if someone else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9957380106789253	WITHOUT_CLASSIFICATION	0.004261989321074677	DESIGN
we need to grab the version value from the entity, otherwise we have issues with generated-version entities that may have multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9546884767726614	WITHOUT_CLASSIFICATION	0.04531152322733857	DESIGN
we need to obtain the lock before any actions are executed, since this may be an inverse="true" bidirectional association and it is one of the earlier entity actions which actually updates the database (this action is resposible for second-level cache invalidation only)	WITHOUT_CLASSIFICATION	0.9686068544793817	WITHOUT_CLASSIFICATION	0.03139314552061826	DESIGN
postDelete: After actually deleting a row, record the fact that the instance no longer exists on the database (needed for identity-column key generation), and remove it from the session cache	WITHOUT_CLASSIFICATION	0.9848611338309481	WITHOUT_CLASSIFICATION	0.015138866169051893	DESIGN
intentionally empty	WITHOUT_CLASSIFICATION	0.9997913774010797	WITHOUT_CLASSIFICATION	2.0862259892043326E-4	DESIGN
todo : what else to do here?	DESIGN	0.9988532818984536	WITHOUT_CLASSIFICATION	0.0011467181015464081	DESIGN
put() has nowait semantics, is this really appropriate? note that it needs to be async replication, never local or sync	DESIGN	0.7555475141295274	WITHOUT_CLASSIFICATION	0.24445248587047252	DESIGN
'hibernate.temp.use_jdbc_metadata_defaults' is a temporary magic value. The need for it is intended to be alleviated with future developement, thus it is not defined as an Environment constant... it is used to control whether we should consult the JDBC metadata to determine certain Settings default values; it is useful to not do this when the database may not be available (mainly in tools usage).	DESIGN	0.9565604747127734	DESIGN	0.04343952528722658	WITHOUT_CLASSIFICATION
TODO: get SQL rendering out of this package!	DESIGN	0.9174074786393687	DESIGN	0.08259252136063129	WITHOUT_CLASSIFICATION
TODO: get SQL rendering out of this package!	DESIGN	0.9174074786393687	DESIGN	0.08259252136063129	WITHOUT_CLASSIFICATION
todo : eventually merge this with TreeCache and just add optional opt-lock support there.	DESIGN	0.9973175982173943	WITHOUT_CLASSIFICATION	0.0026824017826056735	DESIGN
can happen because of the multiple ways Cache.remove() can be invoked :(	DESIGN	0.9998289752003453	WITHOUT_CLASSIFICATION	1.710247996547615E-4	DESIGN
work around the "feature" where tree cache is validating the inserted node during the next transaction. no idea...	DESIGN	0.9988243928936569	WITHOUT_CLASSIFICATION	0.0011756071063430188	DESIGN
FIXME Per the RegionFactory class Javadoc, this constructor version should not be necessary. @param props The configuration properties	DESIGN	0.9351815077072232	WITHOUT_CLASSIFICATION	0.06481849229277693	DESIGN
FIXME Per the RegionFactory class Javadoc, this constructor version should not be necessary. @param props The configuration properties	DESIGN	0.9351815077072232	WITHOUT_CLASSIFICATION	0.06481849229277693	DESIGN
FIXME Hacky workaround to JBCACHE-1202	DESIGN	0.7190050057504945	DESIGN	0.28099499424950536	WITHOUT_CLASSIFICATION
FIXME Hacky workaround to JBCACHE-1202	DESIGN	0.7190050057504945	DESIGN	0.28099499424950536	WITHOUT_CLASSIFICATION
TODO: I considered validating TS cache config here, but decided to defer unti getTimestampsCacheInstance() in case the cache is never actually used	DESIGN	0.5091148021606207	WITHOUT_CLASSIFICATION	0.49088519783937945	DESIGN
TODO Is this a valid operation on a timestamps cache?	DESIGN	0.9995327209687492	DESIGN	4.6727903125069097E-4	WITHOUT_CLASSIFICATION
TODO Is this a valid operation on a timestamps cache?	DESIGN	0.9995327209687492	DESIGN	4.6727903125069097E-4	WITHOUT_CLASSIFICATION
TODO Why not use the timestamp in a DataVersion?	DESIGN	0.7971108375926567	DESIGN	0.2028891624073433	WITHOUT_CLASSIFICATION
can happen because of the multiple ways Cache.remove() can be invoked :(	DESIGN	0.9998289752003453	WITHOUT_CLASSIFICATION	1.710247996547615E-4	DESIGN
work around the "feature" where tree cache is validating the inserted node during the next transaction. no idea...	DESIGN	0.9988243928936569	WITHOUT_CLASSIFICATION	0.0011756071063430188	DESIGN
swaldman 2004-02-07: modify to allow null values to signify fall through to c3p0 PoolConfig defaults	DESIGN	0.9988450160957749	WITHOUT_CLASSIFICATION	0.0011549839042250358	DESIGN
turn hibernate.c3p0. into c3p0., so c3p0 gets a chance to see all hibernate.c3p0.	DESIGN	0.9955802613807055	WITHOUT_CLASSIFICATION	0.004419738619294404	DESIGN
TODO: this bit actually has to be called after all cascades! but since identity insert is called synchronously, instead of asynchronously as other actions, it isn't	DESIGN	0.9494351042023524	DESIGN	0.050564895797647516	WITHOUT_CLASSIFICATION
TODO: reenable if we also fix the above todo	DESIGN	0.8495028808897666	DESIGN	0.15049711911023345	WITHOUT_CLASSIFICATION
TODO: inefficient if that cache is just going to ignore the updated state!	DESIGN	0.7766627145900661	DESIGN	0.22333728540993392	WITHOUT_CLASSIFICATION
we may be screwed here since the collection action is about to execute and we do not know the final owner key value	DESIGN	0.9760496168290997	WITHOUT_CLASSIFICATION	0.023950383170900327	DESIGN
Create an action that will evict collection and entity regions based on queryspaces (table names). TODO: cache the autodetected information and pass it in instead.	DESIGN	0.7253275224512253	DESIGN	0.27467247754877455	WITHOUT_CLASSIFICATION
todo : what else to do here?	DESIGN	0.9988532818984536	WITHOUT_CLASSIFICATION	0.0011467181015464081	DESIGN
todo : modify the class definition if not already transformed...	DESIGN	0.9998764592535725	WITHOUT_CLASSIFICATION	1.2354074642755892E-4	DESIGN
todo : what else to do here?	DESIGN	0.9988532818984536	WITHOUT_CLASSIFICATION	0.0011467181015464081	DESIGN
this is called by SessionFactory irregardless; we just disregard here; could also add a check to SessionFactory to only conditionally call start	DESIGN	0.9989759381268689	WITHOUT_CLASSIFICATION	0.0010240618731310464	DESIGN
this is called by SessionFactory irregardless; we just disregard here; could also add a check to SessionFactory to only conditionally call stop	DESIGN	0.9990532674781639	WITHOUT_CLASSIFICATION	9.46732521836204E-4	DESIGN
TODO: to handle concurrent writes correctly, this should return a Lock to the client	DESIGN	0.9933997594336333	DESIGN	0.006600240566366584	WITHOUT_CLASSIFICATION
put() has nowait semantics, is this really appropriate? note that it needs to be async replication, never local or sync	DESIGN	0.7555475141295274	WITHOUT_CLASSIFICATION	0.24445248587047252	DESIGN
TODO: to handle concurrent writes correctly, the client should pass in a Lock	DESIGN	0.9470882356892054	DESIGN	0.05291176431079454	WITHOUT_CLASSIFICATION
TODO: assumes all collections disassemble to an array!	DESIGN	0.862294913420539	WITHOUT_CLASSIFICATION	0.13770508657946096	DESIGN
TODO: reuse the PreLoadEvent	DESIGN	0.9135222170764365	WITHOUT_CLASSIFICATION	0.08647778292356348	DESIGN
todo: this was added to support initializing an entity's EntityEntry snapshot during reattach; this should be refactored to instead expose a method to assemble a EntityEntry based on this state for return.	DESIGN	0.8160405332316377	WITHOUT_CLASSIFICATION	0.1839594667683623	DESIGN
todo : what is the implication of this?	DESIGN	0.9975699899463623	WITHOUT_CLASSIFICATION	0.002430010053637701	DESIGN
use COUNT as the default. This mimics the old behavior, although NONE might be a better option moving forward in the case of callable	DESIGN	0.9879348549720804	WITHOUT_CLASSIFICATION	0.01206514502791958	DESIGN
TODO: joinKeyColumnName & foreignKeyColumnName should be called either here or at a slightly higer level in the stack (to get all the information we need) Right now HbmBinder does not support the	DESIGN	0.9796390269890242	DESIGN	0.020360973010975798	WITHOUT_CLASSIFICATION
TODO: suck this into initLaziness!	DESIGN	0.9424320587766329	DESIGN	0.057567941223367065	WITHOUT_CLASSIFICATION
we have to set up the table later!! yuck	DESIGN	0.9997361738852719	WITHOUT_CLASSIFICATION	2.638261147280766E-4	DESIGN
TODO: better to degrade to lazy="false" if uninstrumented	DESIGN	0.9723047731557756	DESIGN	0.02769522684422451	WITHOUT_CLASSIFICATION
todo : again, how should this work for non-pojo entities?	DESIGN	0.9867849401781447	WITHOUT_CLASSIFICATION	0.013215059821855342	DESIGN
TODO: this is a bit of copy/paste from IndexedCollection.createPrimaryKey()	DESIGN	0.9782829645466316	DESIGN	0.021717035453368498	WITHOUT_CLASSIFICATION
This inner class implements a case statement....perhaps im being a bit over-clever here	DESIGN	0.980627371948181	WITHOUT_CLASSIFICATION	0.019372628051818965	DESIGN
TODO: bad implementation, cos it depends upon ordering of mapping doc fixing this requires that Collection/PersistentClass gain access to the Mappings reference from Configuration (or the filterDefinitions map directly) sometime during Configuration.buildSessionFactory (after all the types/filter-defs are known and before building persisters).	DESIGN	0.9158316959244893	DESIGN	0.08416830407551072	WITHOUT_CLASSIFICATION
use of a stringbuffer to workaround a JDK bug	DESIGN	0.7783545782311505	WITHOUT_CLASSIFICATION	0.22164542176884963	DESIGN
hack/workaround as sqlquery impl depend on having a key.	DESIGN	0.999650097182054	WITHOUT_CLASSIFICATION	3.499028179460007E-4	DESIGN
FIXME: get the PersistentClass	DESIGN	0.7411035280318352	WITHOUT_CLASSIFICATION	0.2588964719681648	DESIGN
FIXME: get the PersistentClass	DESIGN	0.7411035280318352	WITHOUT_CLASSIFICATION	0.2588964719681648	DESIGN
Icky workaround for MySQL bug:	DESIGN	0.9872621558148374	WITHOUT_CLASSIFICATION	0.012737844185162427	DESIGN
TODO: Somehow add the newly created foreign keys to the internal collection	DESIGN	0.8283919366909317	DESIGN	0.17160806330906833	WITHOUT_CLASSIFICATION
TODO possibly relax that	DESIGN	0.7865484659932598	WITHOUT_CLASSIFICATION	0.21345153400674016	DESIGN
TODO possibly relax that	DESIGN	0.7865484659932598	WITHOUT_CLASSIFICATION	0.21345153400674016	DESIGN
TODO possibly relax that	DESIGN	0.7865484659932598	WITHOUT_CLASSIFICATION	0.21345153400674016	DESIGN
use of a stringbuffer to workaround a JDK bug	DESIGN	0.7783545782311505	WITHOUT_CLASSIFICATION	0.22164542176884963	DESIGN
use a degenerated strategy for backward compatibility	DESIGN	0.9988710493574883	WITHOUT_CLASSIFICATION	0.0011289506425116388	DESIGN
Sets can be just a view of a part of another collection. do we need to copy it to be sure it won't be changing underneath us? ie. this.set.addAll(set);	DESIGN	0.9986244324958851	WITHOUT_CLASSIFICATION	0.0013755675041149163	DESIGN
note that i parameter is now unused (delete it?)	DESIGN	0.9955594881409748	WITHOUT_CLASSIFICATION	0.004440511859025248	DESIGN
just to help out during the load (ugly, i know)	DESIGN	0.9998275627390013	WITHOUT_CLASSIFICATION	1.7243726099872185E-4	DESIGN
TODO : safe to interpret "map.remove(key) == null" as non-dirty?	DESIGN	0.76496857985711	WITHOUT_CLASSIFICATION	0.2350314201428901	DESIGN
yick! need this for proper serialization/deserialization handling...	DESIGN	0.9576486760583309	WITHOUT_CLASSIFICATION	0.04235132394166904	DESIGN
TODO: get SQL rendering out of this package!	DESIGN	0.9174074786393687	DESIGN	0.08259252136063129	WITHOUT_CLASSIFICATION
TODO: get SQL rendering out of this package!	DESIGN	0.9174074786393687	DESIGN	0.08259252136063129	WITHOUT_CLASSIFICATION
yuck!	DESIGN	0.9998680402420813	WITHOUT_CLASSIFICATION	1.3195975791871172E-4	DESIGN
TODO: get SQL rendering out of this package!	DESIGN	0.9174074786393687	DESIGN	0.08259252136063129	WITHOUT_CLASSIFICATION
TODO : not sure this is correct, could not find docs on how to do this.	DESIGN	0.9529117889483816	DESIGN	0.04708821105161829	WITHOUT_CLASSIFICATION
HSQL has no Blob/Clob support .... but just put these here for now!	DESIGN	0.9890376598171211	WITHOUT_CLASSIFICATION	0.010962340182878888	DESIGN
does this need holdlock also? : return tableName + " with (updlock, rowlock, holdlock)";	DESIGN	0.9855833366428843	WITHOUT_CLASSIFICATION	0.014416663357115769	DESIGN
sql-server, at least needed this dropped after use; strange!	DESIGN	0.9986664357622405	WITHOUT_CLASSIFICATION	0.0013335642377595208	DESIGN
todo : is there really any reason to kkeep trying if this fails once?	DESIGN	0.9996903966131748	WITHOUT_CLASSIFICATION	3.0960338682523367E-4	DESIGN
TBD should this be varbinary($1)? registerColumnType(Types.VARBINARY, "binary($1)");	DESIGN	0.9844838809144175	WITHOUT_CLASSIFICATION	0.015516119085582508	DESIGN
is it necessary to register %exact since it can only appear in a where clause?	DESIGN	0.9943958602397609	WITHOUT_CLASSIFICATION	0.005604139760238991	DESIGN
xmlforest requires a new kind of function constructor	DESIGN	0.9996184876389268	WITHOUT_CLASSIFICATION	3.815123610731521E-4	DESIGN
Does this dialect support the ALTER TABLE syntax?	DESIGN	0.9974240189155223	WITHOUT_CLASSIFICATION	0.0025759810844776083	DESIGN
Do we need to qualify index names with the schema name?	DESIGN	0.9923785707132919	WITHOUT_CLASSIFICATION	0.0076214292867080565	DESIGN
Does this dialect support the UNIQUE column syntax?	DESIGN	0.9981043324051776	WITHOUT_CLASSIFICATION	0.0018956675948224048	DESIGN
Does this dialect support check constraints?	DESIGN	0.9965047654706575	WITHOUT_CLASSIFICATION	0.0034952345293425263	DESIGN
Do we need to drop constraints before dropping tables in this dialect?	DESIGN	0.9897217850937311	WITHOUT_CLASSIFICATION	0.010278214906269009	DESIGN
Does this dialect support the FOR UPDATE syntax?	DESIGN	0.997352951974077	WITHOUT_CLASSIFICATION	0.0026470480259229157	DESIGN
Does this dialect support the Oracle-style FOR UPDATE NOWAIT syntax?	DESIGN	0.997352951974077	WITHOUT_CLASSIFICATION	0.0026470480259229157	DESIGN
Does this dialect support FOR UPDATE OF, allowing particular rows to be locked?	DESIGN	0.9841264204630631	WITHOUT_CLASSIFICATION	0.01587357953693686	DESIGN
note there is a wierd implementation in the client side	DESIGN	0.9991874809702995	WITHOUT_CLASSIFICATION	8.125190297005045E-4	DESIGN
TODO: never reached, since getTypeName() actually throws an exception!	DESIGN	0.6246821889477363	WITHOUT_CLASSIFICATION	0.37531781105226364	DESIGN
todo : should we additionally check the current isolation mode explicitly?	DESIGN	0.9987553526204996	WITHOUT_CLASSIFICATION	0.0012446473795003912	DESIGN
todo : remove this and just have subclasses use Isolater/IsolatedWork directly...	DESIGN	0.9937877601533316	WITHOUT_CLASSIFICATION	0.0062122398466683635	DESIGN
TODO: should orphans really be deleted during lock???	DESIGN	0.8462475177870965	DESIGN	0.1537524822129035	WITHOUT_CLASSIFICATION
orphans should not be deleted during merge??	DESIGN	0.9965664567517197	WITHOUT_CLASSIFICATION	0.003433543248280318	DESIGN
orphans should not be deleted during copy??	DESIGN	0.9965664567517197	WITHOUT_CLASSIFICATION	0.003433543248280318	DESIGN
I suppose?	DESIGN	0.9993576285100173	WITHOUT_CLASSIFICATION	6.423714899825742E-4	DESIGN
TODO: suck this logic into the collection!	DESIGN	0.7028176413195393	DESIGN	0.29718235868046067	WITHOUT_CLASSIFICATION
TODO: an alternative is to check if the owner has changed; if it hasn't then get the ID from collection.getOwner()	DESIGN	0.5885367111293003	WITHOUT_CLASSIFICATION	0.41146328887069983	DESIGN
TODO:refactor + make this method private	DESIGN	0.9942027121791198	WITHOUT_CLASSIFICATION	0.005797287820880196	DESIGN
todo : we can actually just determine this from the incoming EntityEntry-s	DESIGN	0.9959249530062936	WITHOUT_CLASSIFICATION	0.004075046993706485	DESIGN
TODO: Should this be an InitializeEntityEventListener??? (watch out for performance!)	DESIGN	0.9619824597570822	DESIGN	0.03801754024291783	WITHOUT_CLASSIFICATION
TODO: better to pass the id in as an argument?	DESIGN	0.5869905748553744	WITHOUT_CLASSIFICATION	0.4130094251446255	DESIGN
todo : potentially look at optimizing these two arrays	DESIGN	0.9976080975484575	WITHOUT_CLASSIFICATION	0.0023919024515425876	DESIGN
trim done to workaround stupid oracle bug that cant handle whitespaces before a { in a sp	DESIGN	0.5855006880314781	DESIGN	0.41449931196852186	WITHOUT_CLASSIFICATION
trim done to workaround stupid oracle bug that cant handle whitespaces before a { in a sp	DESIGN	0.5855006880314781	DESIGN	0.41449931196852186	WITHOUT_CLASSIFICATION
TODO: temporary	DESIGN	0.8509985483399602	DESIGN	0.1490014516600397	WITHOUT_CLASSIFICATION
TODO: not quite sure about the full implications of this!	DESIGN	0.6327236896081359	DESIGN	0.36727631039186426	WITHOUT_CLASSIFICATION
TODO: not quite sure about the full implications of this!	DESIGN	0.6327236896081359	DESIGN	0.36727631039186426	WITHOUT_CLASSIFICATION
TODO: ugly here:	DESIGN	0.942595968778851	DESIGN	0.057404031221149066	WITHOUT_CLASSIFICATION
this is kinda the best we can do...	DESIGN	0.988501674253632	WITHOUT_CLASSIFICATION	0.01149832574636791	DESIGN
TODO: this needn't exclude subclasses...	DESIGN	0.8666686904014181	DESIGN	0.1333313095985819	WITHOUT_CLASSIFICATION
todo : need map? the prob is a proper key, right?	DESIGN	0.9951225850528878	WITHOUT_CLASSIFICATION	0.004877414947112183	DESIGN
todo : i'd much rather have this done from #endLoadingCollection(CollectionPersister,LoadingCollectionEntry)...	DESIGN	0.8948457741546366	WITHOUT_CLASSIFICATION	0.10515422584536332	DESIGN
todo : hack!!! NOTE : here we cleanup the load context when we have no more local LCE entries. This "works" for the time being because really only the collection load contexts are implemented. Long term, this cleanup should become part of the "close result set" processing from the (sandbox/jdbc) jdbc-container code.	DESIGN	0.6647371063619645	WITHOUT_CLASSIFICATION	0.3352628936380355	DESIGN
todo : should really move this log statement to CollectionType, where this is used from...	DESIGN	0.9601727468285643	WITHOUT_CLASSIFICATION	0.03982725317143569	DESIGN
TODO : keep seperate notions of QT[] here for shallow/non-shallow queries...	DESIGN	0.8343271193319989	DESIGN	0.1656728806680011	WITHOUT_CLASSIFICATION
TODO : add this info to the translator and aggregate it here...	DESIGN	0.8121402214128743	WITHOUT_CLASSIFICATION	0.18785977858712577	DESIGN
TODO: move into collection type, so we can use polymorphism!	DESIGN	0.9860206519848647	DESIGN	0.01397934801513534	WITHOUT_CLASSIFICATION
todo : should we check the current isolation mode explicitly?	DESIGN	0.9987553526204996	WITHOUT_CLASSIFICATION	0.0012446473795003912	DESIGN
TODO: suck into event class	DESIGN	0.6131544931984544	WITHOUT_CLASSIFICATION	0.3868455068015455	DESIGN
do we even really need this? the update will fail anyway....	DESIGN	0.9989833216898638	WITHOUT_CLASSIFICATION	0.0010166783101361854	DESIGN
hum ... should we cascade anyway? throw an exception? fine like it is?	DESIGN	0.9706661088206846	WITHOUT_CLASSIFICATION	0.029333891179315463	DESIGN
TODO: would it be better to do a refresh from db?	DESIGN	0.9957524797519278	DESIGN	0.004247520248072135	WITHOUT_CLASSIFICATION
TODO: we use two visitors here, inefficient!	DESIGN	0.5677906802940575	WITHOUT_CLASSIFICATION	0.43220931970594234	DESIGN
this class has no proxies (so do a shortcut)	DESIGN	0.9970184963823768	WITHOUT_CLASSIFICATION	0.0029815036176232264	DESIGN
PostLoad is needed for EJB3 TODO: reuse the PostLoadEvent...	DESIGN	0.5384789831412399	WITHOUT_CLASSIFICATION	0.4615210168587601	DESIGN
TODO: put this stuff back in to read snapshot from the second-level cache (needs some extra work)	DESIGN	0.6992977745426279	DESIGN	0.300702225457372	WITHOUT_CLASSIFICATION
null or brand new collection this will also (inefficiently) handle arrays, which have no snapshot, so we can't do any better	DESIGN	0.8711930733673718	WITHOUT_CLASSIFICATION	0.12880692663262808	DESIGN
TODO: is this 100% correct?	DESIGN	0.6961750794023673	DESIGN	0.3038249205976326	WITHOUT_CLASSIFICATION
TODO: iteratively get transient entities and retry merge until one of the following conditions: 1) transientCopyCache.size() == 0 2) transientCopyCache.size() is not decreasing and copyCache.size() is not increasing TODO: find out if retrying can add entities to copyCache (don't think it can...) For now, just retry once; throw TransientObjectException if there are still any transient entities	DESIGN	0.5269632807945861	WITHOUT_CLASSIFICATION	0.47303671920541396	DESIGN
entity name will not be available for non-POJO entities TODO: cache the entity name somewhere so that it is available to this exception	DESIGN	0.9538598918947612	DESIGN	0.046140108105238914	WITHOUT_CLASSIFICATION
TODO: we should throw an exception if we really know for sure that this is a detached instance, rather than just assuming throw new StaleObjectStateException(entityName, id);	DESIGN	0.9953187300770214	DESIGN	0.004681269922978528	WITHOUT_CLASSIFICATION
TODO : perhaps we should additionally require that the incoming entity version be equivalent to the defined unsaved-value?	DESIGN	0.914256729363179	DESIGN	0.08574327063682094	WITHOUT_CLASSIFICATION
perhaps this should be an exception since it is only ever used in the above method?	DESIGN	0.9973469517065936	WITHOUT_CLASSIFICATION	0.002653048293406438	DESIGN
Put a placeholder in entries, so we don't recurse back and try to save() the same object again. QUESTION: should this be done before onSave() is called? likewise, should it be done before onUpdate()?	DESIGN	0.9410880779348674	WITHOUT_CLASSIFICATION	0.058911922065132565	DESIGN
TODO: merge into one method!	DESIGN	0.5837203983617173	DESIGN	0.41627960163828265	WITHOUT_CLASSIFICATION
TODO: refactor to .sql package	DESIGN	0.7701072050619575	DESIGN	0.2298927949380425	WITHOUT_CLASSIFICATION
Provides query splitting methods, which were originally in QueryTranslator. <br> TODO: This will need to be refactored at some point. @author josh	DESIGN	0.9943911918580275	DESIGN	0.005608808141972515	WITHOUT_CLASSIFICATION
TODO: this is one of the ugliest and most fragile pieces of code in Hibernate....	DESIGN	0.9778061691456535	DESIGN	0.022193830854346435	WITHOUT_CLASSIFICATION
todo : temporary needed because currently persister is the one that creates and renders the join fragments for inheritence hierarchies...	DESIGN	0.9972535386335418	WITHOUT_CLASSIFICATION	0.0027464613664581693	DESIGN
TODO : better way?!?	DESIGN	0.7031195174415027	DESIGN	0.29688048255849736	WITHOUT_CLASSIFICATION
Not possible to simply re-use the versionPropertyNode here as it causes OOM errors due to circularity :(	DESIGN	0.9996668025791319	WITHOUT_CLASSIFICATION	3.3319742086815665E-4	DESIGN
TODO:this is only needed during compilation .. can we eliminate the instvar?	DESIGN	0.9984655252647969	WITHOUT_CLASSIFICATION	0.001534474735202967	DESIGN
TODO : this is a bit dodgy, come up with a better way to check this (plus see above comment)	DESIGN	0.99587829196917	DESIGN	0.004121708030830027	WITHOUT_CLASSIFICATION
even here, if only properties mapped to the "base table" are referenced in the set and where clauses, this could be handled by the BasicDelegate. TODO : decide if it is better performance-wise to perform that check, or to simply use the MultiTableUpdateDelegate	DESIGN	0.9977855052168617	DESIGN	0.002214494783138322	WITHOUT_CLASSIFICATION
TODO: switch statements are always evil! We already had bugs because of forgotten token types. Use polymorphism for this!	DESIGN	0.5430706515392827	WITHOUT_CLASSIFICATION	0.4569293484607172	DESIGN
TODO : we really need to be able to deal with component paths here also; this is difficult because the hql-sql grammar expects all those node types to be FromReferenceNodes. One potential fix here would be to convert the IntoClause to just use a FromClause/FromElement combo (as a child of the InsertStatement) and move all this logic into the InsertStatement. That's probably the easiest approach (read: least amount of changes to the grammar and code), but just doesn't feel right as then an insert would contain 2 from-clauses	DESIGN	0.9997852592841566	DESIGN	2.147407158433353E-4	WITHOUT_CLASSIFICATION
really there are two situations where it should be ok to allow the insertion into properties defined on a superclass: 1) union-subclass with an abstract root entity 2) discrim-subclass #1 is handled already because of the fact that UnionSubclassPersister alreay always returns 0 for this call... we may want to disallow it for discrim-subclass just for consistency-sake (currently does not work anyway)...	DESIGN	0.6669755246562814	WITHOUT_CLASSIFICATION	0.33302447534371854	DESIGN
yuck!	DESIGN	0.9998680402420813	WITHOUT_CLASSIFICATION	1.3195975791871172E-4	DESIGN
implicit joins are always(?) ok to reuse	DESIGN	0.9983653428396034	WITHOUT_CLASSIFICATION	0.0016346571603965956	DESIGN
TODO : we may also want to check that the types here map to exactly one column/JDBC-type can't think of a situation where arithmetic expression between multi-column mappings makes any sense.	DESIGN	0.9981143281217421	DESIGN	0.0018856718782580037	WITHOUT_CLASSIFICATION
we do not know either type BLIND GUESS!	DESIGN	0.9988204486135343	WITHOUT_CLASSIFICATION	0.001179551386465759	DESIGN
TODO: used to be exprNoParens! was this needed?	DESIGN	0.9999966441020081	DESIGN	3.355897992036472E-6	WITHOUT_CLASSIFICATION
TODO: Replace this with a more elegant solution.	DESIGN	0.997573882694819	DESIGN	0.002426117305180939	WITHOUT_CLASSIFICATION
TODO: Should this really return null? If not, figure out something better to do here.	DESIGN	0.7242162370341276	WITHOUT_CLASSIFICATION	0.2757837629658724	DESIGN
TODO: get SQL rendering out of this package!	DESIGN	0.9174074786393687	DESIGN	0.08259252136063129	WITHOUT_CLASSIFICATION
yuck!	DESIGN	0.9998680402420813	WITHOUT_CLASSIFICATION	1.3195975791871172E-4	DESIGN
ignore it; the incoming property could not be found so we cannot be sure what to do here. At the very least, the safest is to simply not apply any dereference toggling...	DESIGN	0.9549321919717242	WITHOUT_CLASSIFICATION	0.04506780802827595	DESIGN
TODO : most of below was taken verbatim from DotNode; should either delegate this logic or super-type it	DESIGN	0.9824514293508559	DESIGN	0.01754857064914409	WITHOUT_CLASSIFICATION
otherwise, a trim-specification and/or a trim-character have been specified; we need to decide which options are present and "do the right thing" should leading trim-characters be trimmed? should trailing trim-characters be trimmed? the trim-character the trim-source	DESIGN	0.9667015205640397	WITHOUT_CLASSIFICATION	0.03329847943596043	DESIGN
todo: we should really just collect these from the various SelectExpressions, rather than regenerating here	DESIGN	0.8079707288205047	WITHOUT_CLASSIFICATION	0.1920292711794954	DESIGN
TODO: is this a bit ugly?	DESIGN	0.8580352477811617	DESIGN	0.14196475221883825	WITHOUT_CLASSIFICATION
Need a better way to define the suffixes here...	DESIGN	0.995241263018975	WITHOUT_CLASSIFICATION	0.004758736981025085	DESIGN
TODO: something much better - look at the type of the other expression! TODO: Have comparisonExpression and/or arithmeticExpression rules complete the resolution of boolean nodes.	DESIGN	0.9759503415431513	DESIGN	0.02404965845684862	WITHOUT_CLASSIFICATION
TODO : what amount of significant digits need to be supported here? - from the DecimalFormat docs: [significant digits] = [minimum integer digits] + [maximum fraction digits]	DESIGN	0.8921455466382489	DESIGN	0.10785445336175116	WITHOUT_CLASSIFICATION
Needed the "clazz_" check to work around union-subclasses TODO : is there a way to tell whether a persister is truly discrim-column based inheritence?	DESIGN	0.7677765658195604	DESIGN	0.2322234341804396	WITHOUT_CLASSIFICATION
We should actually rework this class to not implement Parser and just process path expressions in the most convenient way.	DESIGN	0.9883299828441446	WITHOUT_CLASSIFICATION	0.01167001715585529	DESIGN
The class is now way to complex!	DESIGN	0.9998383946618027	WITHOUT_CLASSIFICATION	1.6160533819732423E-4	DESIGN
TODO: get SQL rendering out of here	DESIGN	0.9596539100613348	DESIGN	0.04034608993866505	WITHOUT_CLASSIFICATION
TODO: is there a better way?	DESIGN	0.8967593535666172	DESIGN	0.10324064643338292	WITHOUT_CLASSIFICATION
Must be done here because of side-effect! yuck...	DESIGN	0.9380545065154275	WITHOUT_CLASSIFICATION	0.06194549348457248	DESIGN
name from a super query (a bit inelegant that it shows up here)	DESIGN	0.9962460642900428	WITHOUT_CLASSIFICATION	0.003753935709957187	DESIGN
We should reengineer this class so that, rather than the current ad - hoc linear approach to processing a stream of tokens, we instead build up a tree of expressions.	DESIGN	0.9471903803159296	WITHOUT_CLASSIFICATION	0.052809619684070344	DESIGN
this is ugly here, but needed because its a subquery	DESIGN	0.9653319054910837	WITHOUT_CLASSIFICATION	0.03466809450891623	DESIGN
unhappy about this being public ... is there a better way?	DESIGN	0.6134447658890024	WITHOUT_CLASSIFICATION	0.3865552341109976	DESIGN
Make sure this is a defined parameter and check the incoming value type TODO: what should be the actual exception type here?	DESIGN	0.9971328340443724	DESIGN	0.0028671659556277116	WITHOUT_CLASSIFICATION
TODO : this constructor form is only used from constructor directly below us; can it go away?	DESIGN	0.9900239839778282	DESIGN	0.009976016022171819	WITHOUT_CLASSIFICATION
TODO: COPY/PASTE FROM SessionImpl, pull up!	DESIGN	0.6036717747887498	DESIGN	0.39632822521125016	WITHOUT_CLASSIFICATION
TODO : should remove this exposure and have all references to the session's batcher use the ConnectionManager.	DESIGN	0.9655168206374748	DESIGN	0.03448317936252525	WITHOUT_CLASSIFICATION
todo : should this get moved to PersistentContext? logically, is PersistentContext the "thing" to which an interceptor gets attached?	DESIGN	0.97792707822927	WITHOUT_CLASSIFICATION	0.022072921770729875	DESIGN
TODO: what type?	DESIGN	0.5036229169596769	DESIGN	0.49637708304032313	WITHOUT_CLASSIFICATION
todo : should seriously consider not allowing a txn to begin from a child session can always route the request to the root session...	DESIGN	0.9952581966178761	WITHOUT_CLASSIFICATION	0.004741803382124022	DESIGN
short-circuit for performance...	DESIGN	0.998598536935401	WITHOUT_CLASSIFICATION	0.0014014630645990006	DESIGN
not absolutely necessary, but does help with aggressive release	DESIGN	0.9979485599059876	WITHOUT_CLASSIFICATION	0.0020514400940123884	DESIGN
TODO : remove these last two as batcher is no longer managing connections	DESIGN	0.9104187276138107	DESIGN	0.08958127238618918	WITHOUT_CLASSIFICATION
work around a bug in all known connection pools....	DESIGN	0.9928369954336268	WITHOUT_CLASSIFICATION	0.007163004566373105	DESIGN
TODO : make this the factory for "entity mode related" sessions; also means making this the target of transaction-synch and the thing that knows how to cascade things between related sessions At that point, perhaps this thing is a "SessionContext", and ConnectionManager is a "JDBCContext"? A "SessionContext" should live in the impl package...	DESIGN	0.9999950827162511	DESIGN	4.917283748858408E-6	WITHOUT_CLASSIFICATION
TODO: does this really need to be here? does the collection already have it's own up-to-date snapshot?	DESIGN	0.999668041036251	DESIGN	3.3195896374895E-4	WITHOUT_CLASSIFICATION
TODO: the i==entitySpan-1 bit depends upon subclass implementation (very bad)	DESIGN	0.6721822548916516	DESIGN	0.3278177451083484	WITHOUT_CLASSIFICATION
This form used from annotations (?). Essentially the same as the above using a resultset-mapping reference, but without cacheMode, readOnly, and comment. FIXME: annotations do not use it, so it can be remove from my POV @deprecated @param query The sql query string @param resultSetRef The result-set-mapping name @param querySpaces Any specified query spaces (used for auto-flushing) @param cacheable Whether the query results are cacheable @param cacheRegion If cacheable, the region into which to store the results @param timeout A JDBC-level timeout to be applied @param fetchSize A JDBC-level fetch-size to be applied @param flushMode The flush mode to use for this query @param parameterTypes parameter type map @param callable Does the query string represent a callable object (i.e., proc)	DESIGN	0.9999972365462182	DESIGN	2.7634537819078773E-6	WITHOUT_CLASSIFICATION
todo : add the notion of enabled filters to the CacheKey to differentiate filtered collections from non-filtered; but CacheKey is currently used for both collections and entities; would ideally need to define two seperate ones; currently this works in conjuction with the check on DefaultInitializeCollectionEventHandler.initializeCollectionFromCache() (which makes sure to not read from cache with enabled filters). EARLY EXIT!!!!!	DESIGN	0.9989614164955113	WITHOUT_CLASSIFICATION	0.0010385835044887316	DESIGN
for sets, we should end the collection load after resolving the entities, since we might call hashCode() on the elements TODO: or we could do this polymorphically, and have two different operations implemented differently for arrays	DESIGN	0.9950035679651489	DESIGN	0.004996432034851125	WITHOUT_CLASSIFICATION
This is not very nice (and quite slow):	DESIGN	0.8080912530024937	WITHOUT_CLASSIFICATION	0.1919087469975062	DESIGN
use of trim() here is ugly?	DESIGN	0.9986708096954259	WITHOUT_CLASSIFICATION	0.0013291903045740301	DESIGN
TODO: this is too conservative; if all preceding joins were also inner joins, we could use an inner join here	DESIGN	0.948704948469797	DESIGN	0.051295051530203	WITHOUT_CLASSIFICATION
TODO: look at the owning property and check that it isn't lazy (by instrumentation)	DESIGN	0.8173969635893352	WITHOUT_CLASSIFICATION	0.1826030364106648	DESIGN
TODO: inefficient	DESIGN	0.7930726087015058	WITHOUT_CLASSIFICATION	0.2069273912984942	DESIGN
why does this matter?	DESIGN	0.9973628278746499	WITHOUT_CLASSIFICATION	0.002637172125350183	DESIGN
from the collection of associations, locate OJA for the ManyToOne corresponding to this persister to fully define the many-to-many; we need that OJA so that we can use its alias here TODO : is there a better way here?	DESIGN	0.9999753501441775	DESIGN	2.464985582245772E-5	WITHOUT_CLASSIFICATION
TODO: this class depends directly upon CriteriaImpl, in the impl package ... add a CriteriaImplementor interface	DESIGN	0.850505684629865	DESIGN	0.14949431537013497	WITHOUT_CLASSIFICATION
TODO: add a CriteriaImplementor interface this class depends directly upon CriteriaImpl in the impl package...	DESIGN	0.6361364772356576	WITHOUT_CLASSIFICATION	0.3638635227643424	DESIGN
TODO : not so sure this is needed...	DESIGN	0.6641382464841932	DESIGN	0.33586175351580677	WITHOUT_CLASSIFICATION
meant to handle dynamic instantiation queries...(Copy from QueryLoader)	DESIGN	0.9950640145652551	WITHOUT_CLASSIFICATION	0.004935985434744858	DESIGN
TODO: The order in which entities are saved may matter (e.g., a particular transient entity may need to be saved before other transient entities can be saved; Keep retrying the batch of transient entities until either: 1) there are no transient entities left in transientCopyCache or 2) no transient entities were saved in the last batch For now, just run through the transient entities and retry the merge	DESIGN	0.9635318282735156	WITHOUT_CLASSIFICATION	0.036468171726484394	DESIGN
todo: this might really even be moved into the cfg package and used as the basis for all things which are configurable.	DESIGN	0.6205626822169891	WITHOUT_CLASSIFICATION	0.37943731778301104	DESIGN
todo : currently expects that the individual with expressions apply to the same sql table join. This may not be the case for joined-subclass where the property values might be coming from different tables in the joined hierarchy. At some point we should expand this to support that capability. However, that has some difficulties: 1) the biggest is how to handle ORs when the individual comparisons are linked to different sql joins. 2) here we would need to track each comparison individually, along with the join alias to which it applies and then pass that information back to the FromElement so it can pass it along to the JoinSequence	DESIGN	0.5407304145797517	WITHOUT_CLASSIFICATION	0.4592695854202483	DESIGN
this function has a template -> restore output, apply the template and write the result out TODO: Downcast to avoid using an interface? Yuck.	DESIGN	0.7039063449829299	DESIGN	0.2960936550170701	WITHOUT_CLASSIFICATION
at some point the generate phase needs to be moved out of here, because a single object-level DML might spawn multiple SQL DML command executions. Possible to just move the sql generation for dml stuff, but for consistency-sake probably best to just move responsiblity for the generation phase completely into the delegates (QueryLoader/StatementExecutor) themselves. Also, not sure why QueryLoader currently even has a dependency on this at all; does it need it? Ideally like to see the walker itself given to the delegates directly...	DESIGN	0.999696741140589	DESIGN	3.0325885941094626E-4	WITHOUT_CLASSIFICATION
get the right object from the list ... would it be easier to just call getEntity() ??	DESIGN	0.9886597581592073	WITHOUT_CLASSIFICATION	0.01134024184079277	DESIGN
TODO should we just collect these like with the collections above?	DESIGN	0.8568958137551962	DESIGN	0.1431041862448038	WITHOUT_CLASSIFICATION
todo : better to handle dynamic filters through implicit DynamicFilterParameterSpecification see the discussion there in DynamicFilterParameterSpecification's javadocs as to why it is currently not done that way.	DESIGN	0.9916761815102261	WITHOUT_CLASSIFICATION	0.008323818489773966	DESIGN
/ USED ONLY FOR REGRESSION TESTING!!!! todo : obviously get rid of all this junk ;) /	DESIGN	0.998571623159707	WITHOUT_CLASSIFICATION	0.0014283768402929935	DESIGN
create an index on the key columns??	DESIGN	0.9998125331989606	WITHOUT_CLASSIFICATION	1.8746680103934814E-4	DESIGN
TODO: deprecated, remove eventually	DESIGN	0.923200079858688	DESIGN	0.07679992014131194	WITHOUT_CLASSIFICATION
create an index on the key columns??	DESIGN	0.9998125331989606	WITHOUT_CLASSIFICATION	1.8746680103934814E-4	DESIGN
TODO: improve this hack!	DESIGN	0.5672847358458514	WITHOUT_CLASSIFICATION	0.4327152641541486	DESIGN
inheritance cycle detection (paranoid check)	DESIGN	0.9984954892737777	WITHOUT_CLASSIFICATION	0.001504510726222201	DESIGN
TODO: remove use of instanceof!	DESIGN	0.9135486793870494	DESIGN	0.08645132061295054	WITHOUT_CLASSIFICATION
shortcut	DESIGN	0.9998941269112185	WITHOUT_CLASSIFICATION	1.0587308878144446E-4	DESIGN
TODO: handle the case of a foreign key to something other than the pk	DESIGN	0.8320396441051474	WITHOUT_CLASSIFICATION	0.16796035589485264	DESIGN
create an index on the key columns??	DESIGN	0.9998125331989606	WITHOUT_CLASSIFICATION	1.8746680103934814E-4	DESIGN
todo : remove	DESIGN	0.9994907972163547	WITHOUT_CLASSIFICATION	5.092027836451867E-4	DESIGN
todo : remove	DESIGN	0.9994907972163547	WITHOUT_CLASSIFICATION	5.092027836451867E-4	DESIGN
todo : remove	DESIGN	0.9994907972163547	WITHOUT_CLASSIFICATION	5.092027836451867E-4	DESIGN
todo : throw exception?	DESIGN	0.9997291984983318	WITHOUT_CLASSIFICATION	2.708015016682603E-4	DESIGN
todo : throw exception? maybe warn if not the same?	DESIGN	0.9980827847173801	WITHOUT_CLASSIFICATION	0.0019172152826199234	DESIGN
TODO: make EntityPersister not depend on SessionFactoryImplementor interface, if possible	DESIGN	0.8871957346057496	DESIGN	0.11280426539425033	WITHOUT_CLASSIFICATION
TODO: is there a more elegant way than downcasting?	DESIGN	0.9888221396471983	DESIGN	0.011177860352801619	WITHOUT_CLASSIFICATION
TODO: encapsulate the protected instance variables!	DESIGN	0.7180596715554342	DESIGN	0.2819403284445659	WITHOUT_CLASSIFICATION
should indicate that we are processing an INSERT/UPDATE/DELETE query with a subquery implied via a collection property function. Here, we need to use the table name itself as the qualification alias. TODO : verify this works for all databases... TODO : is this also the case in non-"indexed" scenarios?	DESIGN	0.9708010946791418	DESIGN	0.02919890532085831	WITHOUT_CLASSIFICATION
TODO: copy/paste from insertRows()	DESIGN	0.773852845935997	DESIGN	0.2261471540640029	WITHOUT_CLASSIFICATION
TODO: copy/paste from recreate()	DESIGN	0.773852845935997	DESIGN	0.2261471540640029	WITHOUT_CLASSIFICATION
should this interface extend PropertyMapping?	DESIGN	0.953273211307183	WITHOUT_CLASSIFICATION	0.04672678869281699	DESIGN
ie. the subquery! yuck!	DESIGN	0.999943844180556	WITHOUT_CLASSIFICATION	5.615581944400138E-5	DESIGN
TODO: move to .sql package!!	DESIGN	0.7030536140730403	DESIGN	0.29694638592695954	WITHOUT_CLASSIFICATION
TODO: code duplication with SingleTableEntityPersister	DESIGN	0.8850847542978469	DESIGN	0.11491524570215307	WITHOUT_CLASSIFICATION
TODO: It would be really, really nice to use this to also model components!	DESIGN	0.9952637311078597	DESIGN	0.004736268892140256	WITHOUT_CLASSIFICATION
TODO: two hashmap lookups here is one too many...	DESIGN	0.9071538012407953	DESIGN	0.09284619875920473	WITHOUT_CLASSIFICATION
TODO: code duplication with JoinedSubclassEntityPersister	DESIGN	0.8850847542978469	DESIGN	0.11491524570215307	WITHOUT_CLASSIFICATION
perhaps not really necessary...	DESIGN	0.9961551963502654	WITHOUT_CLASSIFICATION	0.003844803649734586	DESIGN
NOTE: this assumes something about how propertySelectFragment is implemented by the subclass! was toUnqotedAliasStrings( getIdentiferColumnNames() ) before - now tried to remove that unqoting and missing aliases..	DESIGN	0.9995721497973798	WITHOUT_CLASSIFICATION	4.2785020262017576E-4	DESIGN
NOTE: this assumes something about how propertySelectFragment is implemented by the subclass! was toUnqotedAliasStrings( getdiscriminatorColumnName() ) before - now tried to remove that unqoting and missing aliases..	DESIGN	0.9995721497973798	WITHOUT_CLASSIFICATION	4.2785020262017576E-4	DESIGN
TODO: should we use SELECT .. FOR UPDATE?	DESIGN	0.925788317973457	DESIGN	0.0742116820265431	WITHOUT_CLASSIFICATION
TODO: optimize this better!	DESIGN	0.5761679068899759	WITHOUT_CLASSIFICATION	0.4238320931100242	DESIGN
TODO: should we allow suffixes on these ?	DESIGN	0.9970917815640082	DESIGN	0.002908218435991685	WITHOUT_CLASSIFICATION
This is really ugly, but necessary:	DESIGN	0.9934687465551713	WITHOUT_CLASSIFICATION	0.006531253444828705	DESIGN
ugly little workaround for fact that createUniqueKeyLoaders() does not handle component properties	DESIGN	0.9159920247192763	DESIGN	0.08400797528072378	WITHOUT_CLASSIFICATION
TODO: disable batch loading if lockMode > READ?	DESIGN	0.5770135950485287	WITHOUT_CLASSIFICATION	0.4229864049514712	DESIGN
append the SQL to return the generated identifier TODO: suck into Insert	DESIGN	0.5140787078883535	DESIGN	0.4859212921116465	WITHOUT_CLASSIFICATION
TODO: I am not so sure about the exception handling in this bit!	DESIGN	0.9789521305027059	DESIGN	0.02104786949729413	WITHOUT_CLASSIFICATION
TODO: is this really necessary????	DESIGN	0.8480069791548671	DESIGN	0.15199302084513297	WITHOUT_CLASSIFICATION
TODO: move to .sql package, and refactor with similar things!	DESIGN	0.9405169062987647	DESIGN	0.05948309370123519	WITHOUT_CLASSIFICATION
TODO: implement functionality this might be painful to do here, as the "join post processing" for the subquery has already been performed (meaning that for theta-join dialects, the join conditions have already been moved over to the where clause). A "simple" solution here might to perform "join post processing" once for the entire query (including any subqueries) at one fell swoop	DESIGN	0.9999707679350598	DESIGN	2.9232064940127048E-5	WITHOUT_CLASSIFICATION
todo : this eventually needs to be removed	DESIGN	0.9884073324294875	WITHOUT_CLASSIFICATION	0.011592667570512546	DESIGN
kinda ugly, but needed for collections with a "." node mapping	DESIGN	0.9962618215432054	WITHOUT_CLASSIFICATION	0.0037381784567945913	DESIGN
is this ok?	DESIGN	0.999753519969063	WITHOUT_CLASSIFICATION	2.4648003093705477E-4	DESIGN
TODO: perhaps this should be some other RuntimeException...	DESIGN	0.9981929926974763	DESIGN	0.0018070073025236906	WITHOUT_CLASSIFICATION
TODO: make this a bit nicer	DESIGN	0.9197982955661982	DESIGN	0.0802017044338019	WITHOUT_CLASSIFICATION
Yuck:	DESIGN	0.9998680402420813	WITHOUT_CLASSIFICATION	1.3195975791871172E-4	DESIGN
TODO: we should provide some way to get keys of collection of statistics to make it easier to retrieve from a GUI perspective	DESIGN	0.99810803742695	DESIGN	0.0018919625730500422	WITHOUT_CLASSIFICATION
@return collection removal FIXME: even if isInverse="true"?	DESIGN	0.990103018733072	DESIGN	0.009896981266927878	WITHOUT_CLASSIFICATION
TODO : will need reference to session factory to fully complete HHH-1907	DESIGN	0.9751110602451796	DESIGN	0.024888939754820497	WITHOUT_CLASSIFICATION
TODO: currently keeps Getters and Setters (instead of PropertyAccessors) because of the way getGetter() and getSetter() are implemented currently; yuck!	DESIGN	0.893411737514584	WITHOUT_CLASSIFICATION	0.1065882624854159	DESIGN
TODO: redesign how PropertyAccessors are acquired...	DESIGN	0.7167253346958716	DESIGN	0.2832746653041283	WITHOUT_CLASSIFICATION
todo : YUCK!!!	DESIGN	0.9999283043209568	WITHOUT_CLASSIFICATION	7.169567904315331E-5	DESIGN
TODO : YUCK!!! fix after HHH-1907 is complete	DESIGN	0.9496192261416515	DESIGN	0.050380773858348486	WITHOUT_CLASSIFICATION
TODO: need to make the majority of this functionality into a top-level support class for custom impl support	DESIGN	0.9959310504742168	DESIGN	0.004068949525783181	WITHOUT_CLASSIFICATION
TODO: design new lifecycle for ProxyFactory	DESIGN	0.7614348610962298	DESIGN	0.23856513890377012	WITHOUT_CLASSIFICATION
TODO: would be nice to handle proxy classes elegantly!	DESIGN	0.9027223074854382	DESIGN	0.0972776925145618	WITHOUT_CLASSIFICATION
TODO: copy/paste from ManyToOneType	DESIGN	0.773852845935997	DESIGN	0.2261471540640029	WITHOUT_CLASSIFICATION
TODO: should this be Session.instantiate(Persister, ...)?	DESIGN	0.9721075682959145	DESIGN	0.027892431704085546	WITHOUT_CLASSIFICATION
TODO: this is a bit arbitrary, expose a switch to the user?	DESIGN	0.9234704385623344	DESIGN	0.07652956143766564	WITHOUT_CLASSIFICATION
TODO: implement caching?! proxies?!	DESIGN	0.8389263557016983	DESIGN	0.16107364429830168	WITHOUT_CLASSIFICATION
TODO: is this right??	DESIGN	0.6384176552392994	DESIGN	0.3615823447607007	WITHOUT_CLASSIFICATION
is this really necessary?	DESIGN	0.9994703121988179	WITHOUT_CLASSIFICATION	5.296878011821903E-4	DESIGN
TODO: move these to a new JoinableType abstract class, extended by EntityType and PersistentCollectionType:	DESIGN	0.9873038641875042	DESIGN	0.012696135812495903	WITHOUT_CLASSIFICATION
TODO: this is very suboptimal for some subclasses (namely components), since it does not take advantage of two-phase-load	DESIGN	0.9753951927207196	DESIGN	0.02460480727928042	WITHOUT_CLASSIFICATION
worrying about proxies is perhaps a little bit of overkill here...	DESIGN	0.9415300117492085	WITHOUT_CLASSIFICATION	0.05846998825079148	DESIGN
NOTE VERY HACKISH WORKAROUND!! TODO: Fix this so it will work for non-POJO entity mode	DESIGN	0.8885762419406396	DESIGN	0.11142375805936042	WITHOUT_CLASSIFICATION
TODO: Fix this so it will work for non-POJO entity mode	DESIGN	0.8897972014924933	DESIGN	0.11020279850750675	WITHOUT_CLASSIFICATION
We would probably refactor to have LogicParser (builds a tree of simple expressions connected by and, or, not), ExpressionParser (translates from OO terms like foo, foo.Bar, foo.Bar.Baz to SQL terms like FOOS.ID, FOOS.BAR_ID, etc) and PathExpressionParser (which does much the same thing it does now)	DESIGN	0.8987413582251775	WITHOUT_CLASSIFICATION	0.10125864177482248	DESIGN
TODO: this is a little inefficient, don't need to do a whole deep replaceElements() call	DESIGN	0.9989486320418257	DESIGN	0.001051367958174265	WITHOUT_CLASSIFICATION
workaround for WebLogic	DESIGN	0.9874577322841407	WITHOUT_CLASSIFICATION	0.01254226771585933	DESIGN
TODO: this dependency is kinda Bad	DESIGN	0.9966047290555119	DESIGN	0.003395270944487986	WITHOUT_CLASSIFICATION
ick!	DESIGN	0.9998680402420813	WITHOUT_CLASSIFICATION	1.3195975791871172E-4	DESIGN
short cut check...	DESIGN	0.9998253471120567	WITHOUT_CLASSIFICATION	1.7465288794326624E-4	DESIGN
todo : move to StringHelper?	DESIGN	0.9993907132730967	WITHOUT_CLASSIFICATION	6.092867269033493E-4	DESIGN
yukky! Don't you have subclasses for that! TODO race conditions can happen here	DESIGN	0.8903664544391043	DESIGN	0.1096335455608957	WITHOUT_CLASSIFICATION
TODO: We probably should have a StatisticsNotPublishedException, to make it clean	DESIGN	0.992923131490045	DESIGN	0.007076868509955052	WITHOUT_CLASSIFICATION
FIXME hack to work around fact that calling Node added = root.addChild( fqn ); doesn't properly set the version on the node	DESIGN	0.9318129186674058	DESIGN	0.06818708133259417	WITHOUT_CLASSIFICATION
TODO: I considered validating the presence of the TS cache here, but decided to defer unti getQueryCacheInstance() in case the cache is never actually used	DESIGN	0.5668389025152023	WITHOUT_CLASSIFICATION	0.4331610974847978	DESIGN
need to do that here rather than in the save event listener to let the post insert events to have a id-filled entity when IDENTITY is used (EJB3)	DESIGN	0.6510670132035409	DESIGN	0.3489329867964593	WITHOUT_CLASSIFICATION
TODO: simply remove this override if we fix the above todos	DESIGN	0.9945931892418074	DESIGN	0.005406810758192536	WITHOUT_CLASSIFICATION
This, is used by SessionFactoryImpl to hand to the generated SessionImpl; was the only reason I could see that we cannot just use null as Settings.cacheProvider	DESIGN	0.9977100149581117	WITHOUT_CLASSIFICATION	0.0022899850418883123	DESIGN
this is done here 'cos we might only know the type here (ugly!) TODO: improve this a lot:	DESIGN	0.9968204333646811	DESIGN	0.0031795666353189858	WITHOUT_CLASSIFICATION
todo : would love to have this work on a notification basis where the successful binding of an entity/subclass would emit a notification which the extendsQueue entries could react to...	DESIGN	0.9982168304403912	WITHOUT_CLASSIFICATION	0.0017831695596087769	DESIGN
TODO : not sure the best way to handle this. The non-performant way :	DESIGN	0.6140310805174154	WITHOUT_CLASSIFICATION	0.3859689194825846	DESIGN
would be better to use the element-type to determine whether the old and the new are equal here; the problem being we do not necessarily have access to the element type in all cases	DESIGN	0.883883873277607	WITHOUT_CLASSIFICATION	0.11611612672239298	DESIGN
This next bit is to allow for both unsaved-value="negative" and for "older" behavior where version number did not get seeded if it was already set in the object TODO: shift it into unsaved-value strategy	DESIGN	0.9987315432088472	DESIGN	0.0012684567911528239	WITHOUT_CLASSIFICATION
merges don't cascade to uninitialized collections TODO: perhaps this does need to cascade after all....	DESIGN	0.9991959110230706	DESIGN	8.040889769293612E-4	WITHOUT_CLASSIFICATION
TODO: an alternative is to check if the owner has changed; if it hasn't then return collection.getOwner()	DESIGN	0.8273029713531928	WITHOUT_CLASSIFICATION	0.17269702864680722	DESIGN
it is possible that the tree-walking in OuterJoinLoader can get to an association defined by a subclass, in which case the property-ref might refer to a property defined on a subclass of the current class in this case, the table name is not known - this temporary solution assumes that the property-ref refers to a property of the subclass table that the association belongs to (a reasonable guess) TODO: fix this, add: OuterJoinLoadable.getSubclassPropertyTableName(String propertyName)	DESIGN	0.9949988784408483	DESIGN	0.005001121559151674	WITHOUT_CLASSIFICATION
this only works because collection entries are kept in a sequenced map by persistence context (maybe we should do like entities and keep a separate sequences set...) TODO: calling entrySet on an IdentityMap is SLOW!!	DESIGN	0.9999278068086301	DESIGN	7.219319136977378E-5	WITHOUT_CLASSIFICATION
important, to account for newly saved entities in query todo : some kind of check for new status...	DESIGN	0.9987796185376603	WITHOUT_CLASSIFICATION	0.001220381462339646	DESIGN
brand new collection TODO: or an array!! we can't lock objects with arrays now??	DESIGN	0.9641414048400336	DESIGN	0.03585859515996644	WITHOUT_CLASSIFICATION
TODO: if object was an uninitialized proxy, this is inefficient, resulting in two SQL selects	DESIGN	0.8588074041642351	DESIGN	0.14119259583576488	WITHOUT_CLASSIFICATION
before cascade! TODO: should this be Session.instantiate(Persister, ...)?	DESIGN	0.9550450338193246	DESIGN	0.044954966180675286	WITHOUT_CLASSIFICATION
TODO : absolutely no usages of this constructor form; can it go away?	DESIGN	0.5528723810673802	WITHOUT_CLASSIFICATION	0.44712761893261965	DESIGN
todo : need to find a clean way to handle the "event source" role a seperate classs responsible for generating/dispatching events just duplicates most of the Session methods... passing around seperate reto interceptor, factory, actionQueue, and persistentContext is not manageable...	DESIGN	0.726680446628636	DESIGN	0.2733195533713641	WITHOUT_CLASSIFICATION
todo : remove	DESIGN	0.9994907972163547	WITHOUT_CLASSIFICATION	5.092027836451867E-4	DESIGN
aliasRefNode.resolve( false, false, aliasRefNode.getText() ); TODO: is it kosher to do it here? TODO: is it kosher to do it here?	DESIGN	0.9312454056523102	DESIGN	0.06875459434768981	WITHOUT_CLASSIFICATION
No explicit select expression; render the id and properties projection lists for every persister in the from clause into a single 'token node'. TODO: the only reason we need this stuff now is collection filters, we should get rid of derived select clause completely!	DESIGN	0.9996072739248845	DESIGN	3.9272607511553443E-4	WITHOUT_CLASSIFICATION
TODO : an optimization here would be to consider cascade deletes and not gen those delete statements; the difficulty is the ordering of the tables here vs the cascade attributes on the persisters -> the table info gotten here should really be self-contained (i.e., a class representation defining all the needed attributes), then we could then get an array of those	DESIGN	0.9558577302029784	DESIGN	0.04414226979702167	WITHOUT_CLASSIFICATION
TODO: get SQL rendering out of here, create an AST for the join expressions. Use the SQL generator grammar to generate the SQL text for the index expression.	DESIGN	0.8855984982407276	WITHOUT_CLASSIFICATION	0.11440150175927238	DESIGN
TODO : this really needs to be delayed unitl after we definitively know all node types where this is currently a problem is parameters for which where we cannot unequivocally resolve an expected type	DESIGN	0.9098793694921049	DESIGN	0.09012063050789512	WITHOUT_CLASSIFICATION
TODO: Figure out a better way to get the FROM elements in a proper tree structure. If this is not the destination of a many-to-many, add it as a child of the origin.	DESIGN	0.5328881821034145	WITHOUT_CLASSIFICATION	0.46711181789658557	DESIGN
work around that crazy issue where the tree contains "empty" FromElements (no text); afaict, this is caused by FromElementFactory.createCollectionJoin()	DESIGN	0.8725834306604394	WITHOUT_CLASSIFICATION	0.12741656933956066	DESIGN
TODO: this class does too many things! we need a different kind of path expression parser for each of the diffferent ways in which path expressions can occur	DESIGN	0.9641154845299267	DESIGN	0.03588451547007327	WITHOUT_CLASSIFICATION
real hacky... used to count the nesting of parentheses	DESIGN	0.9997987203304662	WITHOUT_CLASSIFICATION	2.012796695338678E-4	DESIGN
TODO : would be really nice to cache the spec on the query-def so as to not have to re-calc the hash; currently not doable though because of the resultset-ref stuff...	DESIGN	0.9694353781591455	WITHOUT_CLASSIFICATION	0.030564621840854532	DESIGN
for arrays, we should end the collection load before resolving the entities, since the actual array instances are not instantiated during loading TODO: or we could do this polymorphically, and have two different operations implemented differently for arrays	DESIGN	0.9827924706363096	DESIGN	0.017207529363690365	WITHOUT_CLASSIFICATION
polymorphism not really handled completely correctly, perhaps...well, actually its ok, assuming that the entity name used in the lookup is the same as the the one used here, which it will be	DESIGN	0.9997790784620362	WITHOUT_CLASSIFICATION	2.2092153796390753E-4	DESIGN
TODO: should "record" how many properties we have reffered to - and if we don't get'em'all we throw an exception! Way better than trial and error ;)	DESIGN	0.9996848401028164	DESIGN	3.1515989718354785E-4	WITHOUT_CLASSIFICATION
VERY IMPORTANT!!!! - This class needs to be free of any static references to any CGLIB or Javassist classes. Otherwise, users will always need both on their classpaths no matter which (if either) they use. Another option here would be to remove the Hibernate.isPropertyInitialized() method and have the users go through the SessionFactory to get this information.	DESIGN	0.9598403005774144	DESIGN	0.04015969942258552	WITHOUT_CLASSIFICATION
TODO: is it really neceassry to provide Configuration to CollectionPersisters ? Should it not be enough with associated class ? or why does EntityPersister's not get access to configuration ? The only reason I could see that Configuration gets passed to collection persisters is so that they can look up the dom4j node name of the entity element in case no explicit node name was applied at the collection element level. Are you kidding me? Trivial to fix then. Just store and expose the node name on the entity persister (which the collection persister looks up anyway via other means...).	DESIGN	0.9988130969418357	DESIGN	0.0011869030581641966	WITHOUT_CLASSIFICATION
for backward compatibility, allow a set with no not-null element columns, using all columns in the row locater SQL TODO: create an implicit not null constraint on all cols?	DESIGN	0.7910516532511866	DESIGN	0.20894834674881332	WITHOUT_CLASSIFICATION
SPACES TODO: i'm not sure, but perhaps we should exclude abstract denormalized tables?	DESIGN	0.9968950260674403	DESIGN	0.0031049739325596615	WITHOUT_CLASSIFICATION
workaround, for backward compatibility of sets with no not-null columns, assume all columns are used in the row locator SQL	DESIGN	0.9998615739844273	WITHOUT_CLASSIFICATION	1.3842601557259896E-4	DESIGN
note that this method could easily be moved up to BasicEntityPersister, if we ever needed to reuse it from other subclasses	DESIGN	0.9024663725680432	WITHOUT_CLASSIFICATION	0.09753362743195687	DESIGN
index += getPropertyColumnSpan( i ); TODO: this is kinda slow...	DESIGN	0.9566930306812675	DESIGN	0.04330696931873247	WITHOUT_CLASSIFICATION
TODO: need some caching scheme? really comes down to decision regarding amount of state (if any) kept on PropertyAccessors	DESIGN	0.9025323071397231	DESIGN	0.09746769286027683	WITHOUT_CLASSIFICATION
TODO: here is why we need to make bytecode provider global :( TODO : again, fix this after HHH-1907 is complete	DESIGN	0.9999999704767896	DESIGN	2.9523210378687533E-8	WITHOUT_CLASSIFICATION
TODO: Yuck! This is not quite good enough, it's a quick hack around the problem of having a to-one association that refers to an embedded component:	DESIGN	0.9999971115470598	DESIGN	2.888452940207869E-6	WITHOUT_CLASSIFICATION
for DOM4J "collections" only TODO: it would be better if this was done at the higher level by Printer	DESIGN	0.9964123976388694	DESIGN	0.003587602361130567	WITHOUT_CLASSIFICATION
would be great to move all this below here into another method that could also be used from the new scrolling stuff. Would need to change the way the max-row stuff is handled (i.e. behind an interface) so that I could do the control breaking at the means to know when to stop	DESIGN	0.9986162133753284	DESIGN	0.0013837866246716698	WITHOUT_CLASSIFICATION
TODO: can we always use the "null property" approach for everything?	DESIGN	0.8028539128385223	DESIGN	0.19714608716147766	WITHOUT_CLASSIFICATION
polymorphism comment above	DESIGN	0.9999847763370151	WITHOUT_CLASSIFICATION	1.522366298481714E-5	DESIGN
some messy, complex stuff here, since createCriteria() can take an aliased path, or a path rooted at the creating criteria instance	DESIGN	0.999987350326195	WITHOUT_CLASSIFICATION	1.2649673804950178E-5	DESIGN
TODO: really bad, evil hack to fix!!!	DESIGN	0.9999242384826793	DESIGN	7.57615173206492E-5	WITHOUT_CLASSIFICATION
ugly hack for cases like "elements(foo.bar.collection)" (multi-part path expression ending in elements or indices)	DESIGN	0.9891434869533025	DESIGN	0.010856513046697483	WITHOUT_CLASSIFICATION
try block is a hack around fact that currently tuplizers are not given the opportunity to resolve a subclass entity name. this allows the (we assume custom) interceptor the ability to influence this decision if we were not able to based on the given entityName	DESIGN	0.8543636693443675	DESIGN	0.14563633065563242	WITHOUT_CLASSIFICATION
/ HACK ALERT !!!!!!!!!!!!!!!!!!!!!!!!!!!! Attempt to work around "ghost" ImpliedFromElements that occasionally show up between the actual things being joined. This consistently occurs from index nodes (at least against many-to-many). Not sure if there are other conditions Essentially, look-ahead to the next FromElement that actually writes something to the SQL	DESIGN	0.9985692223071471	WITHOUT_CLASSIFICATION	0.0014307776928529773	DESIGN
init the table here instead of earlier, so that we can get a quoted table name TODO: would it be better to simply pass the qualified table name, instead of splitting it up into schema/catalog/table names	DESIGN	0.9904547580615777	DESIGN	0.009545241938422398	WITHOUT_CLASSIFICATION
TODO : would be great to have a Mapping#hasNonIdentifierPropertyNamedId method I don't believe that Mapping#getReferencedPropertyType accounts for the identifier property; so if it returns for a property named 'id', then we should have a non-id field named id	DESIGN	0.9837150931702662	DESIGN	0.016284906829733773	WITHOUT_CLASSIFICATION
TODO: is this really necessary????	DESIGN	0.8480069791548671	DESIGN	0.15199302084513297	WITHOUT_CLASSIFICATION
TODO: ideally we need the construction of PropertyAccessor to take the following: 1) EntityMode 2) EntityMode-specific data (i.e., the classname for pojo entities) 3) Property-specific data based on the EntityMode (i.e., property-name or dom4j-node-name) The easiest way, with the introduction of the new runtime-metamodel classes, would be the the following predicates: 1) PropertyAccessorFactory.getPropertyAccessor() takes references to both a org.hibernate.metadata.EntityModeMetadata and org.hibernate.metadata.Property 2) What is now termed a "PropertyAccessor" stores any values needed from those two pieces of information 3) Code can then simply call PropertyAccess.getGetter() with no parameters; likewise with PropertyAccessor.getSetter()	DESIGN	0.991767367175071	DESIGN	0.008232632824928938	WITHOUT_CLASSIFICATION
TODO: this is temporary in that the end result will probably not take a Property reference per-se.	DESIGN	0.9994931585911793	DESIGN	5.068414088207498E-4	WITHOUT_CLASSIFICATION
todo : this eventually needs to be removed	DESIGN	0.9884073324294875	WITHOUT_CLASSIFICATION	0.011592667570512546	DESIGN
TODO: make this a bit nicer	DESIGN	0.9197982955661982	DESIGN	0.0802017044338019	WITHOUT_CLASSIFICATION
todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.8326025452989303	WITHOUT_CLASSIFICATION	0.16739745470106968	DESIGN
todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.8326025452989303	WITHOUT_CLASSIFICATION	0.16739745470106968	DESIGN
todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.8326025452989303	WITHOUT_CLASSIFICATION	0.16739745470106968	DESIGN
todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.8326025452989303	WITHOUT_CLASSIFICATION	0.16739745470106968	DESIGN
todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.8326025452989303	WITHOUT_CLASSIFICATION	0.16739745470106968	DESIGN
todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.8326025452989303	WITHOUT_CLASSIFICATION	0.16739745470106968	DESIGN
todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.8326025452989303	WITHOUT_CLASSIFICATION	0.16739745470106968	DESIGN
todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.8326025452989303	WITHOUT_CLASSIFICATION	0.16739745470106968	DESIGN
FIXME Per the RegionFactory class Javadoc, this constructor version should not be necessary. @param props The configuration properties	DESIGN	0.9351815077072232	WITHOUT_CLASSIFICATION	0.06481849229277693	DESIGN
FIXME Per the RegionFactory class Javadoc, this constructor version should not be necessary. @param props The configuration properties	DESIGN	0.9351815077072232	WITHOUT_CLASSIFICATION	0.06481849229277693	DESIGN
FIXME Per the RegionFactory class Javadoc, this constructor version should not be necessary. @param props The configuration properties	DESIGN	0.9351815077072232	WITHOUT_CLASSIFICATION	0.06481849229277693	DESIGN
TODO : probably better to calculate these and pass them in, as it'll be more performant	DESIGN	0.9977200679355492	DESIGN	0.002279932064450815	WITHOUT_CLASSIFICATION
