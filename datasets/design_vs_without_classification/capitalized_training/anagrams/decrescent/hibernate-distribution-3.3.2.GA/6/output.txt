test out the optimizer:	WITHOUT_CLASSIFICATION	0.9999994937242559	WITHOUT_CLASSIFICATION	5.06275744221521E-7	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9999955941427219	WITHOUT_CLASSIFICATION	4.405857278076151E-6	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9999955941427219	WITHOUT_CLASSIFICATION	4.405857278076151E-6	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9999955941427219	WITHOUT_CLASSIFICATION	4.405857278076151E-6	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9999955941427219	WITHOUT_CLASSIFICATION	4.405857278076151E-6	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9999955941427219	WITHOUT_CLASSIFICATION	4.405857278076151E-6	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9999955941427219	WITHOUT_CLASSIFICATION	4.405857278076151E-6	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9999955941427219	WITHOUT_CLASSIFICATION	4.405857278076151E-6	DESIGN
return	WITHOUT_CLASSIFICATION	0.9999187972592835	WITHOUT_CLASSIFICATION	8.120274071661737E-5	DESIGN
return	WITHOUT_CLASSIFICATION	0.9999187972592835	WITHOUT_CLASSIFICATION	8.120274071661737E-5	DESIGN
| this | bean | args | raw bean |	WITHOUT_CLASSIFICATION	0.9982326060307545	WITHOUT_CLASSIFICATION	0.0017673939692454406	DESIGN
invokeinterface	WITHOUT_CLASSIFICATION	0.9999856695321124	WITHOUT_CLASSIFICATION	1.43304678875429E-5	DESIGN
astore 4 store the raw bean	WITHOUT_CLASSIFICATION	0.9999925585283423	WITHOUT_CLASSIFICATION	7.441471657686636E-6	DESIGN
current stack len = 0	WITHOUT_CLASSIFICATION	0.9999986112399508	WITHOUT_CLASSIFICATION	1.3887600492098975E-6	DESIGN
current stack len = 0	WITHOUT_CLASSIFICATION	0.9999986112399508	WITHOUT_CLASSIFICATION	1.3887600492098975E-6	DESIGN
local variables | target obj | each oldvalue |	WITHOUT_CLASSIFICATION	0.9999988154037178	WITHOUT_CLASSIFICATION	1.1845962821628782E-6	DESIGN
invokeinterface invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999998078318888	WITHOUT_CLASSIFICATION	1.9216811123821678E-7	DESIGN
putfield new value of the field	WITHOUT_CLASSIFICATION	0.999999743972582	WITHOUT_CLASSIFICATION	2.560274179781387E-7	DESIGN
reference type	WITHOUT_CLASSIFICATION	0.9999846532214978	WITHOUT_CLASSIFICATION	1.5346778502248067E-5	DESIGN
double	WITHOUT_CLASSIFICATION	0.9999754970012982	WITHOUT_CLASSIFICATION	2.4502998701814776E-5	DESIGN
double	WITHOUT_CLASSIFICATION	0.9999754970012982	WITHOUT_CLASSIFICATION	2.4502998701814776E-5	DESIGN
long	WITHOUT_CLASSIFICATION	0.9998681140428641	WITHOUT_CLASSIFICATION	1.3188595713582802E-4	DESIGN
just decrement the lock, don't recache (we don't know which transaction won)	WITHOUT_CLASSIFICATION	0.9997621652242495	WITHOUT_CLASSIFICATION	2.3783477575034124E-4	DESIGN
decode row selection...	WITHOUT_CLASSIFICATION	0.9994101424098484	WITHOUT_CLASSIFICATION	5.898575901516891E-4	DESIGN
disassembled state gets put in a new array (we write to cache by value!)	WITHOUT_CLASSIFICATION	0.9999930825502797	WITHOUT_CLASSIFICATION	6.917449720238182E-6	DESIGN
again, CCS did not have such a concept; but a reasonable proximity is to clear the cache after transaction as long as the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999999032965925	WITHOUT_CLASSIFICATION	9.670340760101908E-8	DESIGN
CHECK	WITHOUT_CLASSIFICATION	0.9995324768686177	WITHOUT_CLASSIFICATION	4.675231313824119E-4	DESIGN
ROW ID	WITHOUT_CLASSIFICATION	0.9999234978951493	WITHOUT_CLASSIFICATION	7.650210485066121E-5	DESIGN
COMPOSITE-ID	WITHOUT_CLASSIFICATION	0.9999976661095564	WITHOUT_CLASSIFICATION	2.333890443539212E-6	DESIGN
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999882734200052	WITHOUT_CLASSIFICATION	1.1726579994882075E-5	DESIGN
Property prop = new Property(); prop.setName("id"); prop.setPropertyAccessorName("embedded"); prop.setValue(id); entity.setIdentifierProperty(prop);	WITHOUT_CLASSIFICATION	0.9999986081137795	WITHOUT_CLASSIFICATION	1.3918862205672052E-6	DESIGN
DYNAMIC INSERT	WITHOUT_CLASSIFICATION	0.999989971096105	WITHOUT_CLASSIFICATION	1.0028903895017751E-5	DESIGN
PERSISTER	WITHOUT_CLASSIFICATION	0.9999878549829919	WITHOUT_CLASSIFICATION	1.2145017008093869E-5	DESIGN
get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.999978396347634	WITHOUT_CLASSIFICATION	2.1603652366079776E-5	DESIGN
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999891731932398	WITHOUT_CLASSIFICATION	1.0826806760347576E-5	DESIGN
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999891731932398	WITHOUT_CLASSIFICATION	1.0826806760347576E-5	DESIGN
generated properties can never be insertable...	WITHOUT_CLASSIFICATION	0.9999116248278606	WITHOUT_CLASSIFICATION	8.837517213944669E-5	DESIGN
TABLE	WITHOUT_CLASSIFICATION	0.999987823392559	WITHOUT_CLASSIFICATION	1.2176607441027022E-5	DESIGN
by default, natural-ids are "immutable" (constant)	WITHOUT_CLASSIFICATION	0.9999990266904628	WITHOUT_CLASSIFICATION	9.733095372396854E-7	DESIGN
( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999772981653771	WITHOUT_CLASSIFICATION	2.2701834622951207E-5	DESIGN
we found some extends attributes referencing entities which were not already processed. here we need to locate all entity-names and class-names contained in this document itself, making sure that these get removed from the extendz list such that only extends names which require us to delay processing (i.e. external to this document and not yet processed) are contained in the returned result	WITHOUT_CLASSIFICATION	0.9995198799546006	DESIGN	4.801200453993154E-4	WITHOUT_CLASSIFICATION
Build a ResultSetMappingDefinition given a containing element for the "return-XXX" elements @param resultSetElem The element containing the return definitions. @param path No clue... @param mappings The current processing state. @return The description of the mappings...	WITHOUT_CLASSIFICATION	0.9999853352651252	WITHOUT_CLASSIFICATION	1.4664734874667936E-5	DESIGN
private boolean showSql; private boolean formatSql;	WITHOUT_CLASSIFICATION	0.9999956207663162	WITHOUT_CLASSIFICATION	4.3792336837768536E-6	DESIGN
public boolean isShowSqlEnabled() { return showSql; } public boolean isFormatSqlEnabled() { return formatSql; }	WITHOUT_CLASSIFICATION	0.9999996806577415	WITHOUT_CLASSIFICATION	3.1934225849914507E-7	DESIGN
Set a custom entity resolver. This entity resolver must be set before addXXX(misc) call. Default value is {@link org.hibernate.util.DTDEntityResolver} @param entityResolver entity resolver to use	WITHOUT_CLASSIFICATION	0.998130204653063	WITHOUT_CLASSIFICATION	0.0018697953469370143	DESIGN
final List extendsQueue,	WITHOUT_CLASSIFICATION	0.9999989539088607	WITHOUT_CLASSIFICATION	1.046091139189718E-6	DESIGN
If close() is called, guarantee unbind()	WITHOUT_CLASSIFICATION	0.9999999995811344	WITHOUT_CLASSIFICATION	4.1886566919661207E-10	DESIGN
if a ThreadLocalSessionContext-bound session happens to get serialized, to be completely correct, we need to make sure that unbinding of that session occurs.	WITHOUT_CLASSIFICATION	0.9999999622416657	WITHOUT_CLASSIFICATION	3.775833439694592E-8	DESIGN
on the inverse, it makes sense that if a ThreadLocalSessionContext- bound session then gets deserialized to go ahead and re-bind it to the ThreadLocalSessionContext session map.	WITHOUT_CLASSIFICATION	0.9999997721646635	WITHOUT_CLASSIFICATION	2.2783533641959495E-7	DESIGN
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9998559896335153	WITHOUT_CLASSIFICATION	1.4401036648468158E-4	DESIGN
60 second lock timeout	WITHOUT_CLASSIFICATION	0.9999032611380366	WITHOUT_CLASSIFICATION	9.673886196335324E-5	DESIGN
OptimisticCache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999956391923414	WITHOUT_CLASSIFICATION	4.360807658683166E-6	DESIGN
Cache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999919044431411	WITHOUT_CLASSIFICATION	8.095556858809365E-6	DESIGN
option.setDataVersion( NonLockingDataVersion.INSTANCE );	WITHOUT_CLASSIFICATION	0.9999999537955662	WITHOUT_CLASSIFICATION	4.6204433971749136E-8	DESIGN
do the put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999654914440635	WITHOUT_CLASSIFICATION	3.4508555936443753E-5	DESIGN
ignore!	WITHOUT_CLASSIFICATION	0.9999954269057314	WITHOUT_CLASSIFICATION	4.573094268597907E-6	DESIGN
tree cache in optimistic mode seems to have as very difficult time with remove calls on non-existent nodes (NPEs)...	WITHOUT_CLASSIFICATION	0.9999365624604897	WITHOUT_CLASSIFICATION	6.343753951029357E-5	DESIGN
60 seconds	WITHOUT_CLASSIFICATION	0.9999750229536121	WITHOUT_CLASSIFICATION	2.497704638787502E-5	DESIGN
ignore!	WITHOUT_CLASSIFICATION	0.9999954269057314	WITHOUT_CLASSIFICATION	4.573094268597907E-6	DESIGN
60 seconds	WITHOUT_CLASSIFICATION	0.9999750229536121	WITHOUT_CLASSIFICATION	2.497704638787502E-5	DESIGN
do the failfast put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.999999644004006	WITHOUT_CLASSIFICATION	3.5599599407131386E-7	DESIGN
NOTE : evict() operates locally only (i.e., does not propogate to any other nodes in the potential cluster). This is exactly what is needed when we destroy() here; destroy() is used as part of the process of shutting down a SessionFactory; thus these removals should not be propogated	WITHOUT_CLASSIFICATION	0.8783157851854256	WITHOUT_CLASSIFICATION	0.12168421481457434	DESIGN
protected RegionRootListener listener;	WITHOUT_CLASSIFICATION	0.9999981885389566	WITHOUT_CLASSIFICATION	1.8114610433507415E-6	DESIGN
Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9997904603411293	WITHOUT_CLASSIFICATION	2.0953965887074997E-4	DESIGN
If we've been blocking for the mutex, perhaps another thread has already reestablished the root. In case the node was reestablised via replication, confirm it's marked "resident" (a status which doesn't replicate)	WITHOUT_CLASSIFICATION	0.9989686310710189	WITHOUT_CLASSIFICATION	0.0010313689289811212	DESIGN
For pessimistic locking, we just want to toss out our ref to any old invalid root node and get the latest (may be null)	WITHOUT_CLASSIFICATION	0.9999985192984637	WITHOUT_CLASSIFICATION	1.4807015363496935E-6	DESIGN
The rest only matters for optimistic locking, where we need to establish the proper data version on the region root	WITHOUT_CLASSIFICATION	0.9986254548545997	WITHOUT_CLASSIFICATION	0.001374545145400212	DESIGN
Don't hold a transactional lock for this	WITHOUT_CLASSIFICATION	0.5966107793716243	WITHOUT_CLASSIFICATION	0.40338922062837573	DESIGN
Make sure the root node for the region exists and has a DataVersion that never complains	WITHOUT_CLASSIFICATION	0.9999999231609844	WITHOUT_CLASSIFICATION	7.683901560535622E-8	DESIGN
Never evict this node	WITHOUT_CLASSIFICATION	0.9969981376865014	WITHOUT_CLASSIFICATION	0.003001862313498671	DESIGN
Fix up the resident flag	WITHOUT_CLASSIFICATION	0.9999408208322411	WITHOUT_CLASSIFICATION	5.917916775878881E-5	DESIGN
60 seconds	WITHOUT_CLASSIFICATION	0.9999750229536121	WITHOUT_CLASSIFICATION	2.497704638787502E-5	DESIGN
We ignore minimalPutOverride. JBossCache putForExternalRead is already about as minimal as we can get; it will promptly return if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999999998216857	WITHOUT_CLASSIFICATION	1.7831428050847903E-10	DESIGN
no-op. We don't own the cache so we shouldn't stop it.	WITHOUT_CLASSIFICATION	0.9999985059380772	WITHOUT_CLASSIFICATION	1.494061922900736E-6	DESIGN
This should only be possible if the caches are constructor injected	WITHOUT_CLASSIFICATION	0.9667431654208958	WITHOUT_CLASSIFICATION	0.033256834579104236	DESIGN
We only build caches if none were passed in. Passing in caches counts as a clear statement of exactly what is wanted	WITHOUT_CLASSIFICATION	0.9998631047226961	WITHOUT_CLASSIFICATION	1.368952773039339E-4	DESIGN
Set up the cache factory	WITHOUT_CLASSIFICATION	0.9995026871479974	WITHOUT_CLASSIFICATION	4.973128520025854E-4	DESIGN
See if the user configured a multiplexer stack	WITHOUT_CLASSIFICATION	0.9999905870788511	WITHOUT_CLASSIFICATION	9.412921148955172E-6	DESIGN
Default to collections sharing entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999164477121055	WITHOUT_CLASSIFICATION	8.355228789441376E-5	DESIGN
Default to sharing the entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999977597307095	WITHOUT_CLASSIFICATION	2.240269290458871E-6	DESIGN
For Timestamps, we default to a separate config	WITHOUT_CLASSIFICATION	0.9999810885540809	WITHOUT_CLASSIFICATION	1.8911445919241005E-5	DESIGN
We can't change the TM on a running cache; just check if the cache has no TM and we're OK with that	WITHOUT_CLASSIFICATION	0.9999999227979675	WITHOUT_CLASSIFICATION	7.720203257182099E-8	DESIGN
Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9998846616926336	WITHOUT_CLASSIFICATION	1.1533830736635001E-4	DESIGN
Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999962901070965	WITHOUT_CLASSIFICATION	3.7098929036282283E-6	DESIGN
This method should be implemented assuming it's valid to do start/stop/start -- leave state appropriate for another start	WITHOUT_CLASSIFICATION	0.9781171307807932	WITHOUT_CLASSIFICATION	0.021882869219206763	DESIGN
Make sure we don't re-release the same cache	WITHOUT_CLASSIFICATION	0.9999946065215193	WITHOUT_CLASSIFICATION	5.393478480729373E-6	DESIGN
We use a different delegate than the non-optimistic superclass default	WITHOUT_CLASSIFICATION	0.9999999789469906	WITHOUT_CLASSIFICATION	2.105300943062006E-8	DESIGN
Following methods we don't delegate since they have so little logic it's clearer to just implement them here	WITHOUT_CLASSIFICATION	0.8890569438784054	DESIGN	0.11094305612159461	WITHOUT_CLASSIFICATION
If JBC is using INVALIDATION, we don't want to propagate changes. We use the Timestamps cache to manage invalidation	WITHOUT_CLASSIFICATION	0.9999999987261119	WITHOUT_CLASSIFICATION	1.2738881013643687E-9	DESIGN
We don't want to waste effort setting an option if JBC is already in LOCAL mode. If JBC is REPL_(A)SYNC then check if they passed an config option to disable query replication	WITHOUT_CLASSIFICATION	0.999999996265157	WITHOUT_CLASSIFICATION	3.734843025952056E-9	DESIGN
Don't hold the JBC node lock throughout the tx, as that prevents updates Add a zero (or low) timeout option so we don't block waiting for tx's that did a put to commit	WITHOUT_CLASSIFICATION	0.9999999957563225	WITHOUT_CLASSIFICATION	4.243677452887339E-9	DESIGN
Double check the distributed cache	WITHOUT_CLASSIFICATION	0.9999996621088344	WITHOUT_CLASSIFICATION	3.3789116551850355E-7	DESIGN
Get an exclusive right to update JBC for this key from this node.	WITHOUT_CLASSIFICATION	0.9998827349212446	WITHOUT_CLASSIFICATION	1.1726507875540505E-4	DESIGN
We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999624206520854	WITHOUT_CLASSIFICATION	3.757934791447839E-5	DESIGN
Initial load from JBC	WITHOUT_CLASSIFICATION	0.9999997400786551	WITHOUT_CLASSIFICATION	2.599213449336987E-7	DESIGN
See if we had a 2nd invalidation from the same initial preinvalidation timestamp. If so, only increment if the new current value is an increase	WITHOUT_CLASSIFICATION	0.9999999999929755	WITHOUT_CLASSIFICATION	7.024478015210947E-12	DESIGN
We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999624206520854	WITHOUT_CLASSIFICATION	3.757934791447839E-5	DESIGN
If the workspace node has null as well, OK; if not we've been modified in a non-comparable manner, which we have to treat as us being newer	WITHOUT_CLASSIFICATION	0.9999999649970138	WITHOUT_CLASSIFICATION	3.500298622270177E-8	DESIGN
The standard comparator types are not Serializable but are singletons	WITHOUT_CLASSIFICATION	0.999999709484314	WITHOUT_CLASSIFICATION	2.9051568590225145E-7	DESIGN
ignore!	WITHOUT_CLASSIFICATION	0.9999954269057314	WITHOUT_CLASSIFICATION	4.573094268597907E-6	DESIGN
ignore it	WITHOUT_CLASSIFICATION	0.9999983901491265	WITHOUT_CLASSIFICATION	1.6098508734975796E-6	DESIGN
construct the cache	WITHOUT_CLASSIFICATION	0.9999242663173874	WITHOUT_CLASSIFICATION	7.573368261260921E-5	DESIGN
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999922816269999	WITHOUT_CLASSIFICATION	7.718373000134775E-6	DESIGN
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999922816269999	WITHOUT_CLASSIFICATION	7.718373000134775E-6	DESIGN
ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999867171220586	WITHOUT_CLASSIFICATION	1.3282877941374931E-5	DESIGN
swaldman 2006-08-28: define c3p0-style configuration parameters for initialPoolSize, which hibernate sensibly lets default to minPoolSize, but we'll let users override it with the c3p0-style property if they want.	WITHOUT_CLASSIFICATION	0.9996943384541469	WITHOUT_CLASSIFICATION	3.0566154585312587E-4	DESIGN
DataSource unpooled = DataSources.unpooledDataSource(jdbcUrl, props.getProperty(Environment.USER), props.getProperty(Environment.PASS));	WITHOUT_CLASSIFICATION	0.9999999904243816	WITHOUT_CLASSIFICATION	9.575618444042332E-9	DESIGN
TRUE if the pool is borrowed from the outside, FALSE if we used to create it	WITHOUT_CLASSIFICATION	0.9999999976314059	WITHOUT_CLASSIFICATION	2.368594173162764E-9	DESIGN
get a connection from the pool (thru DriverManager, cfr. Proxool doc)	WITHOUT_CLASSIFICATION	0.9999999572523034	WITHOUT_CLASSIFICATION	4.274769653647826E-8	DESIGN
set the Transaction Isolation if defined	WITHOUT_CLASSIFICATION	0.9999811396967204	WITHOUT_CLASSIFICATION	1.8860303279649087E-5	DESIGN
toggle autoCommit to false if set	WITHOUT_CLASSIFICATION	0.9999999661339478	WITHOUT_CLASSIFICATION	3.3866052167519596E-8	DESIGN
return the connection	WITHOUT_CLASSIFICATION	0.9999928069328624	WITHOUT_CLASSIFICATION	7.1930671376314575E-6	DESIGN
Get the configurator files (if available)	WITHOUT_CLASSIFICATION	0.9999895535915246	WITHOUT_CLASSIFICATION	1.0446408475334894E-5	DESIGN
Default the Proxool alias setting	WITHOUT_CLASSIFICATION	0.9999996251392396	WITHOUT_CLASSIFICATION	3.748607604925344E-7	DESIGN
Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999791320036043	WITHOUT_CLASSIFICATION	2.0867996395727698E-5	DESIGN
Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999791320036043	WITHOUT_CLASSIFICATION	2.0867996395727698E-5	DESIGN
Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999998958245151	WITHOUT_CLASSIFICATION	1.0417548485162283E-7	DESIGN
Set the existing pool flag to true	WITHOUT_CLASSIFICATION	0.9999999726415595	WITHOUT_CLASSIFICATION	2.735844059337522E-8	DESIGN
Configured using the JAXP Configurator	WITHOUT_CLASSIFICATION	0.9996437689910682	WITHOUT_CLASSIFICATION	3.5623100893181285E-4	DESIGN
Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999791320036043	WITHOUT_CLASSIFICATION	2.0867996395727698E-5	DESIGN
Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999998958245151	WITHOUT_CLASSIFICATION	1.0417548485162283E-7	DESIGN
Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999998958245151	WITHOUT_CLASSIFICATION	1.0417548485162283E-7	DESIGN
Configured using the Properties File Configurator	WITHOUT_CLASSIFICATION	0.9998277876691691	WITHOUT_CLASSIFICATION	1.722123308307846E-4	DESIGN
Remember Isolation level	WITHOUT_CLASSIFICATION	0.9990486887122766	WITHOUT_CLASSIFICATION	9.513112877233978E-4	DESIGN
If the provider was leeching off an existing pool don't close it	WITHOUT_CLASSIFICATION	0.9999999999948559	WITHOUT_CLASSIFICATION	5.1440213766488045E-12	DESIGN
We have created the pool ourselves, so shut it down	WITHOUT_CLASSIFICATION	0.9999998107529944	WITHOUT_CLASSIFICATION	1.8924700554912674E-7	DESIGN
not really a many-to-one association necessarily	WITHOUT_CLASSIFICATION	0.9975641666378722	WITHOUT_CLASSIFICATION	0.00243583336212779	DESIGN
not really a many-to-one association necessarily	WITHOUT_CLASSIFICATION	0.9975641666378722	WITHOUT_CLASSIFICATION	0.00243583336212779	DESIGN
always overwrite nonversioned data	WITHOUT_CLASSIFICATION	0.9999996915838699	WITHOUT_CLASSIFICATION	3.0841613006655624E-7	DESIGN
public Currency getCurrency(int col) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9999428535763597	WITHOUT_CLASSIFICATION	5.714642364036226E-5	DESIGN
default is POJO	WITHOUT_CLASSIFICATION	0.9999901906633155	WITHOUT_CLASSIFICATION	9.8093366844959E-6	DESIGN
use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999709361014497	WITHOUT_CLASSIFICATION	2.90638985503752E-5	DESIGN
use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999709361014497	WITHOUT_CLASSIFICATION	2.90638985503752E-5	DESIGN
private CacheEntry cacheEntry;	WITHOUT_CLASSIFICATION	0.9999846063738872	WITHOUT_CLASSIFICATION	1.539362611271116E-5	DESIGN
Don't need to lock the cache here, since if someone else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9976120477395222	WITHOUT_CLASSIFICATION	0.002387952260477925	DESIGN
Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9999163752542293	WITHOUT_CLASSIFICATION	8.362474577072746E-5	DESIGN
get the updated snapshot of the entity state by cloning current state; it is safe to copy in place, since by this time no-one else (should have) has a reference to the array	WITHOUT_CLASSIFICATION	0.9999998921947145	WITHOUT_CLASSIFICATION	1.078052854340887E-7	DESIGN
this entity defines proeprty generation, so process those generated values...	WITHOUT_CLASSIFICATION	0.9960749674272426	WITHOUT_CLASSIFICATION	0.003925032572757457	DESIGN
have the entity entry perform post-update processing, passing it the update state and the new version (if one).	WITHOUT_CLASSIFICATION	0.9999993575983945	WITHOUT_CLASSIFICATION	6.424016054296114E-7	DESIGN
!persister.isCacheInvalidationRequired()	WITHOUT_CLASSIFICATION	0.9999997024967476	WITHOUT_CLASSIFICATION	2.975032523679223E-7	DESIGN
need to look it up from the persistence-context	WITHOUT_CLASSIFICATION	0.9999455546521029	WITHOUT_CLASSIFICATION	5.444534789720626E-5	DESIGN
sort first by role name	WITHOUT_CLASSIFICATION	0.999997276478512	WITHOUT_CLASSIFICATION	2.7235214878755623E-6	DESIGN
Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9999163752542293	WITHOUT_CLASSIFICATION	8.362474577072746E-5	DESIGN
then by fk	WITHOUT_CLASSIFICATION	0.9995654928311188	WITHOUT_CLASSIFICATION	4.3450716888115656E-4	DESIGN
nothing to do	WITHOUT_CLASSIFICATION	0.9999391881217902	WITHOUT_CLASSIFICATION	6.0811878209889566E-5	DESIGN
nothing to do	WITHOUT_CLASSIFICATION	0.9999391881217902	WITHOUT_CLASSIFICATION	6.0811878209889566E-5	DESIGN
an existing collection that was either non-empty or uninitialized is replaced by null or a different collection (if the collection is uninitialized, hibernate has no way of knowing if the collection is actually empty without querying the db)	WITHOUT_CLASSIFICATION	0.999912941432033	WITHOUT_CLASSIFICATION	8.705856796688269E-5	DESIGN
this method is called when a new non-null collection is persisted or when an existing (non-null) collection is moved to a new owner	WITHOUT_CLASSIFICATION	0.9886186467116981	WITHOUT_CLASSIFICATION	0.011381353288301858	DESIGN
boolean put = persister.getCache().insert(ck, cacheEntry);	WITHOUT_CLASSIFICATION	0.9999994201272612	WITHOUT_CLASSIFICATION	5.7987273887449E-7	DESIGN
we need to grab the version value from the entity, otherwise we have issues with generated-version entities that may have multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9381554193903521	WITHOUT_CLASSIFICATION	0.06184458060964786	DESIGN
do nothing - we only need to notify the cache...	WITHOUT_CLASSIFICATION	0.9999186285930364	WITHOUT_CLASSIFICATION	8.137140696360639E-5	DESIGN
sort first by entity name	WITHOUT_CLASSIFICATION	0.9999458216848355	WITHOUT_CLASSIFICATION	5.417831516456912E-5	DESIGN
then by id	WITHOUT_CLASSIFICATION	0.9994342316661764	WITHOUT_CLASSIFICATION	5.657683338236925E-4	DESIGN
to be safe...	WITHOUT_CLASSIFICATION	0.9998870058936998	WITHOUT_CLASSIFICATION	1.1299410630027671E-4	DESIGN
no transformations took place, so handle it as we would a non-instrumented class	WITHOUT_CLASSIFICATION	0.9997861366012091	WITHOUT_CLASSIFICATION	2.1386339879098158E-4	DESIGN
see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999999981152005	WITHOUT_CLASSIFICATION	1.884799429550729E-9	DESIGN
see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999999981152005	WITHOUT_CLASSIFICATION	1.884799429550729E-9	DESIGN
intentionally empty	WITHOUT_CLASSIFICATION	0.9999115717395681	WITHOUT_CLASSIFICATION	8.84282604319078E-5	DESIGN
test out the optimizer:	WITHOUT_CLASSIFICATION	0.9999994937242559	WITHOUT_CLASSIFICATION	5.06275744221521E-7	DESIGN
set the name of bulk accessor.	WITHOUT_CLASSIFICATION	0.9999976746073833	WITHOUT_CLASSIFICATION	2.325392616706685E-6	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9999955941427219	WITHOUT_CLASSIFICATION	4.405857278076151E-6	DESIGN
invokespecial	WITHOUT_CLASSIFICATION	0.999999430595208	WITHOUT_CLASSIFICATION	5.694047920484196E-7	DESIGN
return	WITHOUT_CLASSIFICATION	0.9999187972592835	WITHOUT_CLASSIFICATION	8.120274071661737E-5	DESIGN
aload_1 load bean	WITHOUT_CLASSIFICATION	0.9999882115624589	WITHOUT_CLASSIFICATION	1.1788437541108604E-5	DESIGN
checkcast cast bean	WITHOUT_CLASSIFICATION	0.9999449730794837	WITHOUT_CLASSIFICATION	5.5026920516437236E-5	DESIGN
astore_3 store bean	WITHOUT_CLASSIFICATION	0.9999886316897614	WITHOUT_CLASSIFICATION	1.1368310238702963E-5	DESIGN
aload_2 args	WITHOUT_CLASSIFICATION	0.9999972749211417	WITHOUT_CLASSIFICATION	2.725078858306515E-6	DESIGN
iconst_i continue to aastore growing stack is 1	WITHOUT_CLASSIFICATION	0.9999845203490012	WITHOUT_CLASSIFICATION	1.5479650998832056E-5	DESIGN
new	WITHOUT_CLASSIFICATION	0.9997716925764757	WITHOUT_CLASSIFICATION	2.2830742352444806E-4	DESIGN
dup	WITHOUT_CLASSIFICATION	0.9989874996149907	WITHOUT_CLASSIFICATION	0.0010125003850093644	DESIGN
aload_3 load the raw bean	WITHOUT_CLASSIFICATION	0.999995215843643	WITHOUT_CLASSIFICATION	4.784156356895251E-6	DESIGN
invokeinterface	WITHOUT_CLASSIFICATION	0.9999856695321124	WITHOUT_CLASSIFICATION	1.43304678875429E-5	DESIGN
invokevirtual	WITHOUT_CLASSIFICATION	0.9999990120298502	WITHOUT_CLASSIFICATION	9.879701498814815E-7	DESIGN
invokevirtual	WITHOUT_CLASSIFICATION	0.9999990120298502	WITHOUT_CLASSIFICATION	9.879701498814815E-7	DESIGN
aastore args	WITHOUT_CLASSIFICATION	0.9999922151724302	WITHOUT_CLASSIFICATION	7.784827569894053E-6	DESIGN
| this | bean | args | i | raw bean | exception |	WITHOUT_CLASSIFICATION	0.9955605105892382	WITHOUT_CLASSIFICATION	0.004439489410761767	DESIGN
required to exception table iconst_0 i	WITHOUT_CLASSIFICATION	0.9999766589602278	WITHOUT_CLASSIFICATION	2.3341039772222376E-5	DESIGN
istore_3 store i	WITHOUT_CLASSIFICATION	0.9999978734328415	WITHOUT_CLASSIFICATION	2.1265671583680585E-6	DESIGN
aload_1 load the bean	WITHOUT_CLASSIFICATION	0.9999890266099252	WITHOUT_CLASSIFICATION	1.0973390074765543E-5	DESIGN
checkcast cast the bean into a raw bean	WITHOUT_CLASSIFICATION	0.997614888264904	WITHOUT_CLASSIFICATION	0.00238511173509605	DESIGN
current stack len = 0	WITHOUT_CLASSIFICATION	0.9999986112399508	WITHOUT_CLASSIFICATION	1.3887600492098975E-6	DESIGN
start region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9997874353888075	WITHOUT_CLASSIFICATION	2.125646111925342E-4	DESIGN
iinc 3, 1	WITHOUT_CLASSIFICATION	0.9999966432033718	WITHOUT_CLASSIFICATION	3.356796628162272E-6	DESIGN
aload 4 load the raw bean	WITHOUT_CLASSIFICATION	0.999977210340365	WITHOUT_CLASSIFICATION	2.2789659635064244E-5	DESIGN
aload_2 load the args	WITHOUT_CLASSIFICATION	0.9999973949938815	WITHOUT_CLASSIFICATION	2.605006118514969E-6	DESIGN
iconst_i	WITHOUT_CLASSIFICATION	0.9997507418019791	WITHOUT_CLASSIFICATION	2.492581980209799E-4	DESIGN
aaload	WITHOUT_CLASSIFICATION	0.9999826493516131	WITHOUT_CLASSIFICATION	1.735064838695338E-5	DESIGN
checkcast	WITHOUT_CLASSIFICATION	0.9999361786641393	WITHOUT_CLASSIFICATION	6.382133586067325E-5	DESIGN
checkcast (case of primitive type) invokevirtual (case of primitive type)	WITHOUT_CLASSIFICATION	0.9999997067701094	WITHOUT_CLASSIFICATION	2.932298906005607E-7	DESIGN
checkcast (case of reference type)	WITHOUT_CLASSIFICATION	0.9999938124421774	WITHOUT_CLASSIFICATION	6.1875578225145255E-6	DESIGN
current stack len = 2	WITHOUT_CLASSIFICATION	0.9999992529032098	WITHOUT_CLASSIFICATION	7.470967901088941E-7	DESIGN
end region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.993841989761313	WITHOUT_CLASSIFICATION	0.006158010238687015	DESIGN
register in exception table	WITHOUT_CLASSIFICATION	0.9999780902386175	WITHOUT_CLASSIFICATION	2.190976138255942E-5	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9999955941427219	WITHOUT_CLASSIFICATION	4.405857278076151E-6	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9999955941427219	WITHOUT_CLASSIFICATION	4.405857278076151E-6	DESIGN
return	WITHOUT_CLASSIFICATION	0.9999187972592835	WITHOUT_CLASSIFICATION	8.120274071661737E-5	DESIGN
return	WITHOUT_CLASSIFICATION	0.9999187972592835	WITHOUT_CLASSIFICATION	8.120274071661737E-5	DESIGN
dup	WITHOUT_CLASSIFICATION	0.9989874996149907	WITHOUT_CLASSIFICATION	0.0010125003850093644	DESIGN
invokevirtual	WITHOUT_CLASSIFICATION	0.9999990120298502	WITHOUT_CLASSIFICATION	9.879701498814815E-7	DESIGN
checkcast	WITHOUT_CLASSIFICATION	0.9999361786641393	WITHOUT_CLASSIFICATION	6.382133586067325E-5	DESIGN
local variables | target obj | each oldvalue |	WITHOUT_CLASSIFICATION	0.9999988154037178	WITHOUT_CLASSIFICATION	1.1845962821628782E-6	DESIGN
astore 5 store exception	WITHOUT_CLASSIFICATION	0.9999968874646432	WITHOUT_CLASSIFICATION	3.1125353566884995E-6	DESIGN
new BulkAccessorException	WITHOUT_CLASSIFICATION	0.9999758434206181	WITHOUT_CLASSIFICATION	2.4156579381867153E-5	DESIGN
aload 5 load exception	WITHOUT_CLASSIFICATION	0.9999879050435453	WITHOUT_CLASSIFICATION	1.2094956454754544E-5	DESIGN
iload_3 i	WITHOUT_CLASSIFICATION	0.9999977057168282	WITHOUT_CLASSIFICATION	2.294283171734013E-6	DESIGN
invokespecial BulkAccessorException.<init>	WITHOUT_CLASSIFICATION	0.9999998991276411	WITHOUT_CLASSIFICATION	1.0087235883500453E-7	DESIGN
athrow	WITHOUT_CLASSIFICATION	0.9998781848253125	WITHOUT_CLASSIFICATION	1.2181517468746584E-4	DESIGN
WARNING: classfile only	WITHOUT_CLASSIFICATION	0.9999993665935872	WITHOUT_CLASSIFICATION	6.334064127154965E-7	DESIGN
swallow	WITHOUT_CLASSIFICATION	0.9999791675415387	WITHOUT_CLASSIFICATION	2.083245846126419E-5	DESIGN
local variable | this |	WITHOUT_CLASSIFICATION	0.9999468164064492	WITHOUT_CLASSIFICATION	5.318359355089131E-5	DESIGN
aload_0 load this	WITHOUT_CLASSIFICATION	0.9999924220446015	WITHOUT_CLASSIFICATION	7.577955398543694E-6	DESIGN
aload_0 load this	WITHOUT_CLASSIFICATION	0.9999924220446015	WITHOUT_CLASSIFICATION	7.577955398543694E-6	DESIGN
getfield get field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999127753257679	WITHOUT_CLASSIFICATION	8.722467423196026E-5	DESIGN
areturn return the value of the field	WITHOUT_CLASSIFICATION	0.9999986216483002	WITHOUT_CLASSIFICATION	1.3783516997270819E-6	DESIGN
local variables | this | callback |	WITHOUT_CLASSIFICATION	0.9983942292881276	WITHOUT_CLASSIFICATION	0.001605770711872393	DESIGN
aload_1 load callback	WITHOUT_CLASSIFICATION	0.999987172853068	WITHOUT_CLASSIFICATION	1.2827146931884658E-5	DESIGN
putfield put field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999369539524134	WITHOUT_CLASSIFICATION	6.304604758654681E-5	DESIGN
case of non-static field	WITHOUT_CLASSIFICATION	0.9999830314572087	WITHOUT_CLASSIFICATION	1.696854279133898E-5	DESIGN
getfield get each field	WITHOUT_CLASSIFICATION	0.9998322842925174	WITHOUT_CLASSIFICATION	1.6771570748257375E-4	DESIGN
invokeinterface invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999998078318888	WITHOUT_CLASSIFICATION	1.9216811123821678E-7	DESIGN
ifnonnull	WITHOUT_CLASSIFICATION	0.9999934172315164	WITHOUT_CLASSIFICATION	6.582768483733744E-6	DESIGN
return each type	WITHOUT_CLASSIFICATION	0.9999817721603556	WITHOUT_CLASSIFICATION	1.8227839644425108E-5	DESIGN
return each type	WITHOUT_CLASSIFICATION	0.9999817721603556	WITHOUT_CLASSIFICATION	1.8227839644425108E-5	DESIGN
store_1 each type	WITHOUT_CLASSIFICATION	0.9999993042110357	WITHOUT_CLASSIFICATION	6.957889643134601E-7	DESIGN
ldc name of the field	WITHOUT_CLASSIFICATION	0.9999920495562338	WITHOUT_CLASSIFICATION	7.950443766325726E-6	DESIGN
load_1 each type	WITHOUT_CLASSIFICATION	0.9999992861372906	WITHOUT_CLASSIFICATION	7.138627094142562E-7	DESIGN
invokeinterface invoke Callback.read() each type	WITHOUT_CLASSIFICATION	0.9999999387260778	WITHOUT_CLASSIFICATION	6.12739221637347E-8	DESIGN
int	WITHOUT_CLASSIFICATION	0.9999697770581166	WITHOUT_CLASSIFICATION	3.0222941883348933E-5	DESIGN
return	WITHOUT_CLASSIFICATION	0.9999187972592835	WITHOUT_CLASSIFICATION	8.120274071661737E-5	DESIGN
dup	WITHOUT_CLASSIFICATION	0.9989874996149907	WITHOUT_CLASSIFICATION	0.0010125003850093644	DESIGN
invokeinterface	WITHOUT_CLASSIFICATION	0.9999856695321124	WITHOUT_CLASSIFICATION	1.43304678875429E-5	DESIGN
checkcast	WITHOUT_CLASSIFICATION	0.9999361786641393	WITHOUT_CLASSIFICATION	6.382133586067325E-5	DESIGN
checkcast	WITHOUT_CLASSIFICATION	0.9999361786641393	WITHOUT_CLASSIFICATION	6.382133586067325E-5	DESIGN
invokeinterface enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999997847820286	WITHOUT_CLASSIFICATION	2.1521797135063605E-7	DESIGN
invokeinterface enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999997847820286	WITHOUT_CLASSIFICATION	2.1521797135063605E-7	DESIGN
ifnonnull (label1)	WITHOUT_CLASSIFICATION	0.9999990947445088	WITHOUT_CLASSIFICATION	9.05255491210609E-7	DESIGN
load_1	WITHOUT_CLASSIFICATION	0.9999969763357074	WITHOUT_CLASSIFICATION	3.023664292527171E-6	DESIGN
load_1	WITHOUT_CLASSIFICATION	0.9999969763357074	WITHOUT_CLASSIFICATION	3.023664292527171E-6	DESIGN
putfield	WITHOUT_CLASSIFICATION	0.9997173231955884	WITHOUT_CLASSIFICATION	2.82676804411541E-4	DESIGN
return ;	WITHOUT_CLASSIFICATION	0.9999642210810016	WITHOUT_CLASSIFICATION	3.5778918998385856E-5	DESIGN
ldc field name	WITHOUT_CLASSIFICATION	0.9999976301679899	WITHOUT_CLASSIFICATION	2.369832010070707E-6	DESIGN
getfield old value of the field	WITHOUT_CLASSIFICATION	0.9999950700458421	WITHOUT_CLASSIFICATION	4.929954157865357E-6	DESIGN
invokeinterface callback.write(..)	WITHOUT_CLASSIFICATION	0.9999997608323441	WITHOUT_CLASSIFICATION	2.3916765579914076E-7	DESIGN
reference type	WITHOUT_CLASSIFICATION	0.9999846532214978	WITHOUT_CLASSIFICATION	1.5346778502248067E-5	DESIGN
reference type	WITHOUT_CLASSIFICATION	0.9999846532214978	WITHOUT_CLASSIFICATION	1.5346778502248067E-5	DESIGN
not array	WITHOUT_CLASSIFICATION	0.9997720871788665	WITHOUT_CLASSIFICATION	2.279128211336881E-4	DESIGN
array of reference type	WITHOUT_CLASSIFICATION	0.999997266052145	WITHOUT_CLASSIFICATION	2.733947854935852E-6	DESIGN
boolean	WITHOUT_CLASSIFICATION	0.9999926769223823	WITHOUT_CLASSIFICATION	7.3230776177679995E-6	DESIGN
byte	WITHOUT_CLASSIFICATION	0.9998379424651969	WITHOUT_CLASSIFICATION	1.6205753480318403E-4	DESIGN
char	WITHOUT_CLASSIFICATION	0.9999920007895787	WITHOUT_CLASSIFICATION	7.99921042131145E-6	DESIGN
short	WITHOUT_CLASSIFICATION	0.9995353436637779	WITHOUT_CLASSIFICATION	4.6465633622198556E-4	DESIGN
double	WITHOUT_CLASSIFICATION	0.9999754970012982	WITHOUT_CLASSIFICATION	2.4502998701814776E-5	DESIGN
float	WITHOUT_CLASSIFICATION	0.9999914019054649	WITHOUT_CLASSIFICATION	8.598094535146883E-6	DESIGN
float	WITHOUT_CLASSIFICATION	0.9999914019054649	WITHOUT_CLASSIFICATION	8.598094535146883E-6	DESIGN
long	WITHOUT_CLASSIFICATION	0.9998681140428641	WITHOUT_CLASSIFICATION	1.3188595713582802E-4	DESIGN
long	WITHOUT_CLASSIFICATION	0.9998681140428641	WITHOUT_CLASSIFICATION	1.3188595713582802E-4	DESIGN
bad type	WITHOUT_CLASSIFICATION	0.9999400426804568	WITHOUT_CLASSIFICATION	5.995731954323153E-5	DESIGN
bad type	WITHOUT_CLASSIFICATION	0.9999400426804568	WITHOUT_CLASSIFICATION	5.995731954323153E-5	DESIGN
boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.999999828570127	WITHOUT_CLASSIFICATION	1.7142987296864367E-7	DESIGN
boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.999999828570127	WITHOUT_CLASSIFICATION	1.7142987296864367E-7	DESIGN
reference type	WITHOUT_CLASSIFICATION	0.9999846532214978	WITHOUT_CLASSIFICATION	1.5346778502248067E-5	DESIGN
double	WITHOUT_CLASSIFICATION	0.9999754970012982	WITHOUT_CLASSIFICATION	2.4502998701814776E-5	DESIGN
float	WITHOUT_CLASSIFICATION	0.9999914019054649	WITHOUT_CLASSIFICATION	8.598094535146883E-6	DESIGN
float	WITHOUT_CLASSIFICATION	0.9999914019054649	WITHOUT_CLASSIFICATION	8.598094535146883E-6	DESIGN
long	WITHOUT_CLASSIFICATION	0.9998681140428641	WITHOUT_CLASSIFICATION	1.3188595713582802E-4	DESIGN
bad type	WITHOUT_CLASSIFICATION	0.9999400426804568	WITHOUT_CLASSIFICATION	5.995731954323153E-5	DESIGN
bad type	WITHOUT_CLASSIFICATION	0.9999400426804568	WITHOUT_CLASSIFICATION	5.995731954323153E-5	DESIGN
boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.999999828570127	WITHOUT_CLASSIFICATION	1.7142987296864367E-7	DESIGN
skip finalize methods	WITHOUT_CLASSIFICATION	0.9999573935274285	WITHOUT_CLASSIFICATION	4.260647257146431E-5	DESIGN
Mainly for OSCache	WITHOUT_CLASSIFICATION	0.9999990502006494	WITHOUT_CLASSIFICATION	9.497993505758969E-7	DESIGN
decrement the lock	WITHOUT_CLASSIFICATION	0.9999578520427987	WITHOUT_CLASSIFICATION	4.21479572012259E-5	DESIGN
create new lock that times out immediately	WITHOUT_CLASSIFICATION	0.9999936938851438	WITHOUT_CLASSIFICATION	6.306114856174971E-6	DESIGN
recache the updated state	WITHOUT_CLASSIFICATION	0.9999783159150687	WITHOUT_CLASSIFICATION	2.1684084931383274E-5	DESIGN
noop	WITHOUT_CLASSIFICATION	0.9999142757433312	WITHOUT_CLASSIFICATION	8.572425666873394E-5	DESIGN
null clientLock is remotely possible but will never happen in practice	WITHOUT_CLASSIFICATION	0.9931572170149785	WITHOUT_CLASSIFICATION	0.0068427829850215074	DESIGN
we really could refresh the item if it is not a lock, but it might be slower return freshTimestamp < txTimestamp	WITHOUT_CLASSIFICATION	0.9611212208732169	WITHOUT_CLASSIFICATION	0.03887877912678313	DESIGN
by requiring <, we rely on lock timeout in the case of an unsuccessful update!	WITHOUT_CLASSIFICATION	0.9998826508476729	WITHOUT_CLASSIFICATION	1.1734915232707659E-4	DESIGN
the user provided resulttransformer, not the one used with "select new". Here to avoid mangling transformed/non-transformed results.	WITHOUT_CLASSIFICATION	0.9999999999681792	WITHOUT_CLASSIFICATION	3.182073771129665E-11	DESIGN
disassemble positional parameters	WITHOUT_CLASSIFICATION	0.9999999187140683	WITHOUT_CLASSIFICATION	8.128593156212465E-8	DESIGN
disassemble named parameters	WITHOUT_CLASSIFICATION	0.9999997901510133	WITHOUT_CLASSIFICATION	2.098489867400874E-7	DESIGN
ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999867171220586	WITHOUT_CLASSIFICATION	1.3282877941374931E-5	DESIGN
noop	WITHOUT_CLASSIFICATION	0.9999142757433312	WITHOUT_CLASSIFICATION	8.572425666873394E-5	DESIGN
noop	WITHOUT_CLASSIFICATION	0.9999142757433312	WITHOUT_CLASSIFICATION	8.572425666873394E-5	DESIGN
noop	WITHOUT_CLASSIFICATION	0.9999142757433312	WITHOUT_CLASSIFICATION	8.572425666873394E-5	DESIGN
this is called from SettingsFactory irregardless; trivial to simply disregard	WITHOUT_CLASSIFICATION	0.9999060330162285	WITHOUT_CLASSIFICATION	9.396698377143984E-5	DESIGN
Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999991368416805	WITHOUT_CLASSIFICATION	8.631583196217253E-7	DESIGN
Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999991368416805	WITHOUT_CLASSIFICATION	8.631583196217253E-7	DESIGN
throw new UnsupportedOperationException("Can't write to a readonly object");	WITHOUT_CLASSIFICATION	0.9999967905487059	WITHOUT_CLASSIFICATION	3.2094512940047515E-6	DESIGN
assembled state gets put in a new array (we read from cache by value!)	WITHOUT_CLASSIFICATION	0.9999823937542518	WITHOUT_CLASSIFICATION	1.7606245748255283E-5	DESIGN
persister.setIdentifier(result, id); before calling interceptor, for consistency with normal load	WITHOUT_CLASSIFICATION	0.9999999726469911	WITHOUT_CLASSIFICATION	2.7353008897455554E-8	DESIGN
no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9999965198876156	WITHOUT_CLASSIFICATION	3.48011238439837E-6	DESIGN
no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9999965198876156	WITHOUT_CLASSIFICATION	3.48011238439837E-6	DESIGN
again, CCS did not have such a concept; but a reasonable proximity is to clear the cache after transaction as long as the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999999032965925	WITHOUT_CLASSIFICATION	9.670340760101908E-8	DESIGN
again, CCS did not have such a concept; however a reasonable proximity is to clear the cache. For non-transaction aware caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999854810302131	WITHOUT_CLASSIFICATION	1.4518969786813693E-5	DESIGN
again, CCS did not have such a concept; however a reasonable proximity is to clear the cache. For non-transaction aware caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999854810302131	WITHOUT_CLASSIFICATION	1.4518969786813693E-5	DESIGN
classes mentioned in extends not available - so put it in queue	WITHOUT_CLASSIFICATION	0.9997427173126319	WITHOUT_CLASSIFICATION	2.5728268736816375E-4	DESIGN
get meta's from <hibernate-mapping>	WITHOUT_CLASSIFICATION	0.9999919620290434	WITHOUT_CLASSIFICATION	8.03797095670866E-6	DESIGN
get meta's from <class>	WITHOUT_CLASSIFICATION	0.9999914265783749	WITHOUT_CLASSIFICATION	8.573421625158915E-6	DESIGN
DB-OBJECTNAME	WITHOUT_CLASSIFICATION	0.9999929569374462	WITHOUT_CLASSIFICATION	7.043062553782476E-6	DESIGN
MUTABLE	WITHOUT_CLASSIFICATION	0.999981563379702	WITHOUT_CLASSIFICATION	1.8436620297946526E-5	DESIGN
WHERE	WITHOUT_CLASSIFICATION	0.9999310762028609	WITHOUT_CLASSIFICATION	6.892379713905162E-5	DESIGN
CHECK	WITHOUT_CLASSIFICATION	0.9995324768686177	WITHOUT_CLASSIFICATION	4.675231313824119E-4	DESIGN
POLYMORPHISM	WITHOUT_CLASSIFICATION	0.9999254971807241	WITHOUT_CLASSIFICATION	7.450281927599954E-5	DESIGN
TODO:	WITHOUT_CLASSIFICATION	0.9850881466337967	WITHOUT_CLASSIFICATION	0.014911853366203157	DESIGN
ID	WITHOUT_CLASSIFICATION	0.9998835878208259	WITHOUT_CLASSIFICATION	1.1641217917416091E-4	DESIGN
VERSION / TIMESTAMP	WITHOUT_CLASSIFICATION	0.9999995190754131	WITHOUT_CLASSIFICATION	4.809245868074205E-7	DESIGN
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999882734200052	WITHOUT_CLASSIFICATION	1.1726579994882075E-5	DESIGN
Primary key constraint	WITHOUT_CLASSIFICATION	0.9999990164816558	WITHOUT_CLASSIFICATION	9.83518344228155E-7	DESIGN
this is either a <version/> tag with no type attribute, or a <timestamp/> tag	WITHOUT_CLASSIFICATION	0.999996133907485	WITHOUT_CLASSIFICATION	3.866092515028247E-6	DESIGN
for version properties marked as being generated, make sure they are "always" generated; aka, "insert" is invalid; this is dis-allowed by the DTD, but just to make sure...	WITHOUT_CLASSIFICATION	0.9999996141983349	WITHOUT_CLASSIFICATION	3.8580166506065177E-7	DESIGN
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999882734200052	WITHOUT_CLASSIFICATION	1.1726579994882075E-5	DESIGN
( (Column) discrim.getColumnIterator().next() ).setType(type);	WITHOUT_CLASSIFICATION	0.9999992135975927	WITHOUT_CLASSIFICATION	7.864024071878096E-7	DESIGN
go ahead and set the lazy here, since pojo.proxy can override it.	WITHOUT_CLASSIFICATION	0.9999999573164549	WITHOUT_CLASSIFICATION	4.268354514881778E-8	DESIGN
DYNAMIC UPDATE	WITHOUT_CLASSIFICATION	0.9999942029384064	WITHOUT_CLASSIFICATION	5.797061593692367E-6	DESIGN
IMPORT	WITHOUT_CLASSIFICATION	0.9999824460912042	WITHOUT_CLASSIFICATION	1.755390879566852E-5	DESIGN
BATCH SIZE	WITHOUT_CLASSIFICATION	0.9999808049798314	WITHOUT_CLASSIFICATION	1.9195020168583524E-5	DESIGN
SELECT BEFORE UPDATE	WITHOUT_CLASSIFICATION	0.9999988361288171	WITHOUT_CLASSIFICATION	1.1638711827669367E-6	DESIGN
OPTIMISTIC LOCK MODE	WITHOUT_CLASSIFICATION	0.999993603620093	WITHOUT_CLASSIFICATION	6.396379907050597E-6	DESIGN
PERSISTER	WITHOUT_CLASSIFICATION	0.9999878549829919	WITHOUT_CLASSIFICATION	1.2145017008093869E-5	DESIGN
CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999830304759891	WITHOUT_CLASSIFICATION	1.696952401080587E-5	DESIGN
get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.999978396347634	WITHOUT_CLASSIFICATION	2.1603652366079776E-5	DESIGN
properties	WITHOUT_CLASSIFICATION	0.9999565823636226	WITHOUT_CLASSIFICATION	4.3417636377308415E-5	DESIGN
joined subclasses	WITHOUT_CLASSIFICATION	0.9999989577816086	WITHOUT_CLASSIFICATION	1.042218391371713E-6	DESIGN
KEY	WITHOUT_CLASSIFICATION	0.9995467977791189	WITHOUT_CLASSIFICATION	4.532022208811E-4	DESIGN
CHECK	WITHOUT_CLASSIFICATION	0.9995324768686177	WITHOUT_CLASSIFICATION	4.675231313824119E-4	DESIGN
CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999830304759891	WITHOUT_CLASSIFICATION	1.696952401080587E-5	DESIGN
properties	WITHOUT_CLASSIFICATION	0.9999565823636226	WITHOUT_CLASSIFICATION	4.3417636377308415E-5	DESIGN
KEY	WITHOUT_CLASSIFICATION	0.9995467977791189	WITHOUT_CLASSIFICATION	4.532022208811E-4	DESIGN
model.getKey().setType( new Type( model.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999998273960827	WITHOUT_CLASSIFICATION	1.726039172985366E-7	DESIGN
TABLENAME	WITHOUT_CLASSIFICATION	0.9999555385404462	WITHOUT_CLASSIFICATION	4.44614595539394E-5	DESIGN
join.getKey().setType( new Type( lazz.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999999794943203	WITHOUT_CLASSIFICATION	2.050567973924947E-8	DESIGN
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999891731932398	WITHOUT_CLASSIFICATION	1.0826806760347576E-5	DESIGN
COLUMN(S)	WITHOUT_CLASSIFICATION	0.999968652854098	WITHOUT_CLASSIFICATION	3.1347145901998216E-5	DESIGN
column index	WITHOUT_CLASSIFICATION	0.9999961910948305	WITHOUT_CLASSIFICATION	3.8089051694845372E-6	DESIGN
column unique-key	WITHOUT_CLASSIFICATION	0.9999896748848415	WITHOUT_CLASSIFICATION	1.0325115158511386E-5	DESIGN
automatically makes a column with the default name if none is specifed by XML	WITHOUT_CLASSIFICATION	0.9870464438539057	WITHOUT_CLASSIFICATION	0.012953556146094211	DESIGN
for an any	WITHOUT_CLASSIFICATION	0.9999927185253586	WITHOUT_CLASSIFICATION	7.2814746413651105E-6	DESIGN
insertable simply because that is the user did not specify anything; just override it	WITHOUT_CLASSIFICATION	0.999999999883003	WITHOUT_CLASSIFICATION	1.1699694563224518E-10	DESIGN
the user specifically supplied insert="true", which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999963484601322	WITHOUT_CLASSIFICATION	3.6515398678927854E-6	DESIGN
properties generated on update can never be updateable...	WITHOUT_CLASSIFICATION	0.9998739858948247	WITHOUT_CLASSIFICATION	1.2601410517520107E-4	DESIGN
updateable only because the user did not specify anything; just override it	WITHOUT_CLASSIFICATION	0.9999999999920863	WITHOUT_CLASSIFICATION	7.913653125104026E-12	DESIGN
the user specifically supplied update="true", which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999994955297227	WITHOUT_CLASSIFICATION	5.044702773120522E-7	DESIGN
ROLENAME	WITHOUT_CLASSIFICATION	0.9999347488171448	WITHOUT_CLASSIFICATION	6.525118285516638E-5	DESIGN
FETCH STRATEGY	WITHOUT_CLASSIFICATION	0.9999802391171947	WITHOUT_CLASSIFICATION	1.9760882805343148E-5	DESIGN
TABLE	WITHOUT_CLASSIFICATION	0.999987823392559	WITHOUT_CLASSIFICATION	1.2176607441027022E-5	DESIGN
tableName = mappings.getNamingStrategy().propertyToTableName( className, path );	WITHOUT_CLASSIFICATION	0.9999992654507254	WITHOUT_CLASSIFICATION	7.345492747155394E-7	DESIGN
SORT	WITHOUT_CLASSIFICATION	0.9999630153790894	WITHOUT_CLASSIFICATION	3.698462091060876E-5	DESIGN
CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999830304759891	WITHOUT_CLASSIFICATION	1.696952401080587E-5	DESIGN
unsorted, natural, comparator.class.name	WITHOUT_CLASSIFICATION	0.9999970694429635	WITHOUT_CLASSIFICATION	2.9305570365390746E-6	DESIGN
ORPHAN DELETE (used for programmer error detection)	WITHOUT_CLASSIFICATION	0.9999897414382284	WITHOUT_CLASSIFICATION	1.0258561771554772E-5	DESIGN
set up second pass	WITHOUT_CLASSIFICATION	0.9999983394606083	WITHOUT_CLASSIFICATION	1.660539391560712E-6	DESIGN
an "embedded" component (composite ids and unique) note that this does not handle nested components	WITHOUT_CLASSIFICATION	0.999948862496436	WITHOUT_CLASSIFICATION	5.113750356410887E-5	DESIGN
a nested composite element	WITHOUT_CLASSIFICATION	0.9999974935092094	WITHOUT_CLASSIFICATION	2.506490790579765E-6	DESIGN
for an any we will have to use reflection	WITHOUT_CLASSIFICATION	0.9997816593476748	WITHOUT_CLASSIFICATION	2.1834065232518752E-4	DESIGN
NOTE SPECIAL CASE: one-to-one constrained=false cannot be proxied, so default to join and non-lazy	WITHOUT_CLASSIFICATION	0.9999999688882489	WITHOUT_CLASSIFICATION	3.111175110425374E-8	DESIGN
use old (HB 2.1) defaults if outer-join is specified	WITHOUT_CLASSIFICATION	0.9999999022471614	WITHOUT_CLASSIFICATION	9.775283868941896E-8	DESIGN
lazy = !join;	WITHOUT_CLASSIFICATION	0.9999988968344677	WITHOUT_CLASSIFICATION	1.1031655322026024E-6	DESIGN
GENERATOR	WITHOUT_CLASSIFICATION	0.9999011673913599	WITHOUT_CLASSIFICATION	9.883260864005768E-5	DESIGN
ID UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999218924412808	WITHOUT_CLASSIFICATION	7.810755871913274E-5	DESIGN
VERSION UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999876835873988	WITHOUT_CLASSIFICATION	1.2316412601194503E-5	DESIGN
not necessarily a unique property reference	WITHOUT_CLASSIFICATION	0.9980574682595552	WITHOUT_CLASSIFICATION	0.0019425317404446975	DESIGN
( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999772981653771	WITHOUT_CLASSIFICATION	2.2701834622951207E-5	DESIGN
contained elements:	WITHOUT_CLASSIFICATION	0.9999835974907954	WITHOUT_CLASSIFICATION	1.640250920470559E-5	DESIGN
for non-inverse one-to-many, with a not-null fk, add a backref!	WITHOUT_CLASSIFICATION	0.999987244186364	WITHOUT_CLASSIFICATION	1.275581363594745E-5	DESIGN
Bind the where	WITHOUT_CLASSIFICATION	0.9999794318091497	WITHOUT_CLASSIFICATION	2.056819085029593E-5	DESIGN
Bind the order-by	WITHOUT_CLASSIFICATION	0.9999978722318568	WITHOUT_CLASSIFICATION	2.1277681432337967E-6	DESIGN
Bind the filters	WITHOUT_CLASSIFICATION	0.9999989908718924	WITHOUT_CLASSIFICATION	1.0091281076756583E-6	DESIGN
overriding inherited meta attribute. HBX-621 & HBX-793	WITHOUT_CLASSIFICATION	0.9999941978782911	WITHOUT_CLASSIFICATION	5.8021217088292295E-6	DESIGN
first, iterate over all elements capable of defining an extends attribute collecting all found extends references if they cannot be resolved against the already processed mappings.	WITHOUT_CLASSIFICATION	0.9999999885962602	WITHOUT_CLASSIFICATION	1.1403739923563115E-8	DESIGN
mappings might contain either the "raw" extends name (in the case of an entity-name mapping) or a FQN (in the case of a POJO mapping).	WITHOUT_CLASSIFICATION	0.9987518193788187	WITHOUT_CLASSIFICATION	0.001248180621181198	DESIGN
+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9215798695859636	WITHOUT_CLASSIFICATION	0.07842013041403646	DESIGN
SessionFactory name:	WITHOUT_CLASSIFICATION	0.9999415545799674	WITHOUT_CLASSIFICATION	5.844542003264265E-5	DESIGN
JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9999658820172475	WITHOUT_CLASSIFICATION	3.4117982752444444E-5	DESIGN
JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9999658820172475	WITHOUT_CLASSIFICATION	3.4117982752444444E-5	DESIGN
Interrogate JDBC metadata	WITHOUT_CLASSIFICATION	0.9999941889032407	WITHOUT_CLASSIFICATION	5.811096759322306E-6	DESIGN
user supplied JDBC connections	WITHOUT_CLASSIFICATION	0.999960635324904	WITHOUT_CLASSIFICATION	3.9364675095965564E-5	DESIGN
use dialect default properties	WITHOUT_CLASSIFICATION	0.9999470984790538	WITHOUT_CLASSIFICATION	5.290152094619617E-5	DESIGN
Transaction settings:	WITHOUT_CLASSIFICATION	0.9999410232189623	WITHOUT_CLASSIFICATION	5.897678103761567E-5	DESIGN
SQL Generation settings:	WITHOUT_CLASSIFICATION	0.9998613454312362	WITHOUT_CLASSIFICATION	1.386545687638536E-4	DESIGN
Query parser settings:	WITHOUT_CLASSIFICATION	0.998870224220297	WITHOUT_CLASSIFICATION	0.0011297757797029497	DESIGN
Second-level / query cache:	WITHOUT_CLASSIFICATION	0.999885071528316	WITHOUT_CLASSIFICATION	1.1492847168414376E-4	DESIGN
The cache provider is needed when we either have second-level cache enabled or query cache enabled. Note that useSecondLevelCache is enabled by default	WITHOUT_CLASSIFICATION	0.9999976015010703	WITHOUT_CLASSIFICATION	2.3984989297303023E-6	DESIGN
SQL Exception converter:	WITHOUT_CLASSIFICATION	0.9999842792202359	WITHOUT_CLASSIFICATION	1.5720779764114154E-5	DESIGN
Statistics and logging:	WITHOUT_CLASSIFICATION	0.9999970804129271	WITHOUT_CLASSIFICATION	2.9195870728020382E-6	DESIGN
settings.setShowSqlEnabled(showSql);	WITHOUT_CLASSIFICATION	0.999997115008824	WITHOUT_CLASSIFICATION	2.884991175875627E-6	DESIGN
settings.setFormatSqlEnabled(formatSql);	WITHOUT_CLASSIFICATION	0.9999966015082197	WITHOUT_CLASSIFICATION	3.3984917803960654E-6	DESIGN
Schema export:	WITHOUT_CLASSIFICATION	0.9999890810442643	WITHOUT_CLASSIFICATION	1.0918955735782419E-5	DESIGN
String provider = properties.getProperty( Environment.BYTECODE_PROVIDER ); log.info( "Bytecode provider name : " + provider ); BytecodeProvider bytecodeProvider = buildBytecodeProvider( provider ); settings.setBytecodeProvider( bytecodeProvider );	WITHOUT_CLASSIFICATION	0.9999999362821138	WITHOUT_CLASSIFICATION	6.371788614928081E-8	DESIGN
legacy behavior, apply the bridge...	WITHOUT_CLASSIFICATION	0.9993172988015245	WITHOUT_CLASSIFICATION	6.82701198475409E-4	DESIGN
maybe a concrete SQLpropertyresult type, but Map is exactly what is required at the moment	WITHOUT_CLASSIFICATION	0.9971894694245812	WITHOUT_CLASSIFICATION	0.0028105305754188435	DESIGN
if dotted and not load-collection nor return-join regular property	WITHOUT_CLASSIFICATION	0.9999996337920978	WITHOUT_CLASSIFICATION	3.662079022371827E-7	DESIGN
private ComponentTuplizerFactory componentTuplizerFactory; todo : HHH-3517 and HHH-1907 private BytecodeProvider bytecodeProvider;	WITHOUT_CLASSIFICATION	0.9999848354574896	WITHOUT_CLASSIFICATION	1.516454251049466E-5	DESIGN
public getters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999440190018044	WITHOUT_CLASSIFICATION	5.598099819560077E-5	DESIGN
public ComponentTuplizerFactory getComponentTuplizerFactory() { return componentTuplizerFactory; }	WITHOUT_CLASSIFICATION	0.9999874725269909	WITHOUT_CLASSIFICATION	1.2527473008972074E-5	DESIGN
package protected setters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9972697168333462	WITHOUT_CLASSIFICATION	0.002730283166653768	DESIGN
void setShowSqlEnabled(boolean b) { showSql = b; } void setFormatSqlEnabled(boolean b) { formatSql = b; }	WITHOUT_CLASSIFICATION	0.9999999981176363	WITHOUT_CLASSIFICATION	1.8823636632073166E-9	DESIGN
public BytecodeProvider getBytecodeProvider() { return bytecodeProvider; } void setBytecodeProvider(BytecodeProvider bytecodeProvider) { this.bytecodeProvider = bytecodeProvider; }	WITHOUT_CLASSIFICATION	0.9999970284488442	WITHOUT_CLASSIFICATION	2.9715511557132225E-6	DESIGN
using local since the inheritedMetas at this point is not the correct map since it is always the empty map	WITHOUT_CLASSIFICATION	0.9999256423619811	WITHOUT_CLASSIFICATION	7.435763801893031E-5	DESIGN
private ComponentTuplizerFactory componentTuplizerFactory; todo : HHH-3517 and HHH-1907	WITHOUT_CLASSIFICATION	0.9999643600848105	WITHOUT_CLASSIFICATION	3.563991518948517E-5	DESIGN
protected List extendsQueue;	WITHOUT_CLASSIFICATION	0.9999744574009768	WITHOUT_CLASSIFICATION	2.5542599023199245E-5	DESIGN
extendsQueue = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999999630917514	WITHOUT_CLASSIFICATION	3.690824855948061E-8	DESIGN
componentTuplizerFactory = new ComponentTuplizerFactory();	WITHOUT_CLASSIFICATION	0.9999996444839836	WITHOUT_CLASSIFICATION	3.555160163334183E-7	DESIGN
if doc is null, then for whatever reason, the cached file cannot be used...	WITHOUT_CLASSIFICATION	0.999999279816614	WITHOUT_CLASSIFICATION	7.201833861435888E-7	DESIGN
drop them in reverse order in case db needs it done that way...	WITHOUT_CLASSIFICATION	0.9959741973168489	WITHOUT_CLASSIFICATION	0.004025802683151116	DESIGN
public ComponentTuplizerFactory getComponentTuplizerFactory() { return componentTuplizerFactory; }	WITHOUT_CLASSIFICATION	0.9999874725269909	WITHOUT_CLASSIFICATION	1.2527473008972074E-5	DESIGN
This method may be called many times!!	WITHOUT_CLASSIFICATION	0.9986894704592348	WITHOUT_CLASSIFICATION	0.0013105295407651488	DESIGN
Iterator iterator = extendsQueue.iterator();	WITHOUT_CLASSIFICATION	0.9999979791165633	WITHOUT_CLASSIFICATION	2.020883436601877E-6	DESIGN
Iterator iter = extendsQueue.iterator();	WITHOUT_CLASSIFICATION	0.9999982693991238	WITHOUT_CLASSIFICATION	1.7306008760732084E-6	DESIGN
found	WITHOUT_CLASSIFICATION	0.9994930160717274	WITHOUT_CLASSIFICATION	5.069839282726219E-4	DESIGN
found	WITHOUT_CLASSIFICATION	0.9994930160717274	WITHOUT_CLASSIFICATION	5.069839282726219E-4	DESIGN
settings.setComponentTuplizerFactory( this.getComponentTuplizerFactory() );	WITHOUT_CLASSIFICATION	0.9999199320144055	WITHOUT_CLASSIFICATION	8.006798559445545E-5	DESIGN
private final List extendsQueue;	WITHOUT_CLASSIFICATION	0.9999989686329789	WITHOUT_CLASSIFICATION	1.0313670211033896E-6	DESIGN
<String, String>	WITHOUT_CLASSIFICATION	0.9999882249995773	WITHOUT_CLASSIFICATION	1.1775000422610357E-5	DESIGN
<String, String>	WITHOUT_CLASSIFICATION	0.9999882249995773	WITHOUT_CLASSIFICATION	1.1775000422610357E-5	DESIGN
+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9215798695859636	WITHOUT_CLASSIFICATION	0.07842013041403646	DESIGN
Set USE_REFLECTION_OPTIMIZER to false to fix HHH-227	WITHOUT_CLASSIFICATION	0.9999999867250718	WITHOUT_CLASSIFICATION	1.3274928119371609E-8	DESIGN
orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9998927695760703	WITHOUT_CLASSIFICATION	1.072304239297281E-4	DESIGN
element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9999998619201776	WITHOUT_CLASSIFICATION	1.380798223144079E-7	DESIGN
intentionally empty	WITHOUT_CLASSIFICATION	0.9999115717395681	WITHOUT_CLASSIFICATION	8.84282604319078E-5	DESIGN
orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9998927695760703	WITHOUT_CLASSIFICATION	1.072304239297281E-4	DESIGN
element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9999998619201776	WITHOUT_CLASSIFICATION	1.380798223144079E-7	DESIGN
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999976258489687	WITHOUT_CLASSIFICATION	2.3741510313009313E-6	DESIGN
maintain correct duplication if loaded in a cartesian product	WITHOUT_CLASSIFICATION	0.9999443294876095	WITHOUT_CLASSIFICATION	5.567051239056205E-5	DESIGN
the element has been removed from the set	WITHOUT_CLASSIFICATION	0.9999791083842086	WITHOUT_CLASSIFICATION	2.089161579132719E-5	DESIGN
the element has changed	WITHOUT_CLASSIFICATION	0.9999881967911123	WITHOUT_CLASSIFICATION	1.1803208887842291E-5	DESIGN
Careful: these methods do not initialize the collection.	WITHOUT_CLASSIFICATION	0.9996574066151319	WITHOUT_CLASSIFICATION	3.425933848681814E-4	DESIGN
needed so that we remove this collection from the second-level cache	WITHOUT_CLASSIFICATION	0.5046361916005029	DESIGN	0.4953638083994973	WITHOUT_CLASSIFICATION
override on some subclasses	WITHOUT_CLASSIFICATION	0.9999864824436656	WITHOUT_CLASSIFICATION	1.3517556334470023E-5	DESIGN
override on some subclasses	WITHOUT_CLASSIFICATION	0.9999864824436656	WITHOUT_CLASSIFICATION	1.3517556334470023E-5	DESIGN
do this bit after setting initialized to true or it will recurse	WITHOUT_CLASSIFICATION	0.9999200812590187	WITHOUT_CLASSIFICATION	7.991874098128226E-5	DESIGN
short-circuit(s) no new elements, the old list contains only Orphans no old elements, so no Orphans neither	WITHOUT_CLASSIFICATION	0.9999999998608942	WITHOUT_CLASSIFICATION	1.391057827278662E-10	DESIGN
create the collection holding the Orphans	WITHOUT_CLASSIFICATION	0.9999978069416663	WITHOUT_CLASSIFICATION	2.193058333715835E-6	DESIGN
collect EntityIdentifier(s) of the current elements - add them into a HashSet for fast access	WITHOUT_CLASSIFICATION	0.999933685677636	WITHOUT_CLASSIFICATION	6.63143223640347E-5	DESIGN
iterate over the old list	WITHOUT_CLASSIFICATION	0.9999970898902238	WITHOUT_CLASSIFICATION	2.910109776212431E-6	DESIGN
(array==null) ? tempList.size() :	WITHOUT_CLASSIFICATION	0.9999999300455905	WITHOUT_CLASSIFICATION	6.995440943577359E-8	DESIGN
intentionally empty	WITHOUT_CLASSIFICATION	0.9999115717395681	WITHOUT_CLASSIFICATION	8.84282604319078E-5	DESIGN
(array==null) ? tempList.get(i) :	WITHOUT_CLASSIFICATION	0.9999996394278144	WITHOUT_CLASSIFICATION	3.6057218565530994E-7	DESIGN
write(); -- doesn't	WITHOUT_CLASSIFICATION	0.999999049249037	WITHOUT_CLASSIFICATION	9.507509629943958E-7	DESIGN
write(); -- doesn't	WITHOUT_CLASSIFICATION	0.999999049249037	WITHOUT_CLASSIFICATION	9.507509629943958E-7	DESIGN
amazingly, these two will work because AbstractCollection uses iterator() to fill the array	WITHOUT_CLASSIFICATION	0.9999201869256356	WITHOUT_CLASSIFICATION	7.981307436436203E-5	DESIGN
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999976258489687	WITHOUT_CLASSIFICATION	2.3741510313009313E-6	DESIGN
finally, what it's all about...	WITHOUT_CLASSIFICATION	0.9997409659447473	WITHOUT_CLASSIFICATION	2.590340552526411E-4	DESIGN
note that if we load this collection from a cartesian product the multiplicity would be broken ... so use an idbag instead	WITHOUT_CLASSIFICATION	0.999894956628273	DESIGN	1.050433717269612E-4	WITHOUT_CLASSIFICATION
Anyway, here we implement <set> semantics for a <one-to-many> <bag>!	WITHOUT_CLASSIFICATION	0.5134367119413592	DESIGN	0.4865632880586407	WITHOUT_CLASSIFICATION
a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999993667666395	WITHOUT_CLASSIFICATION	6.332333605095723E-7	DESIGN
search for it note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9965070443005561	WITHOUT_CLASSIFICATION	0.0034929556994439137	DESIGN
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999976258489687	WITHOUT_CLASSIFICATION	2.3741510313009313E-6	DESIGN
a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999993667666395	WITHOUT_CLASSIFICATION	6.332333605095723E-7	DESIGN
search for it note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9965070443005561	WITHOUT_CLASSIFICATION	0.0034929556994439137	DESIGN
public boolean equals(Object other) {read();return bag.equals(other);}public int hashCode(Object other) {read();return bag.hashCode();}	WITHOUT_CLASSIFICATION	0.9999990313721812	WITHOUT_CLASSIFICATION	9.686278188093608E-7	DESIGN
List OPERATIONS:	WITHOUT_CLASSIFICATION	0.9999999828345669	WITHOUT_CLASSIFICATION	1.716543305333575E-8	DESIGN
pad with nulls from the current last element up to the new index	WITHOUT_CLASSIFICATION	0.9999999116802739	WITHOUT_CLASSIFICATION	8.831972610892719E-8	DESIGN
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999976258489687	WITHOUT_CLASSIFICATION	2.3741510313009313E-6	DESIGN
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999976258489687	WITHOUT_CLASSIFICATION	2.3741510313009313E-6	DESIGN
from Map	WITHOUT_CLASSIFICATION	0.9999621079244849	WITHOUT_CLASSIFICATION	3.789207551501227E-5	DESIGN
from SortedMap	WITHOUT_CLASSIFICATION	0.999857805652303	WITHOUT_CLASSIFICATION	1.4219434769695033E-4	DESIGN
inject the data	WITHOUT_CLASSIFICATION	0.9999828008686965	WITHOUT_CLASSIFICATION	1.7199131303479156E-5	DESIGN
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9998559896335153	WITHOUT_CLASSIFICATION	1.4401036648468158E-4	DESIGN
default pool size 20	WITHOUT_CLASSIFICATION	0.9999987742733736	WITHOUT_CLASSIFICATION	1.2257266264075205E-6	DESIGN
trying via forName() first to be as close to DriverManager's semantics	WITHOUT_CLASSIFICATION	0.9999999777803006	WITHOUT_CLASSIFICATION	2.2219699351836138E-8	DESIGN
if debug level is enabled, then log the password, otherwise mask it	WITHOUT_CLASSIFICATION	0.9999999527211487	WITHOUT_CLASSIFICATION	4.727885120828388E-8	DESIGN
register a cleanup synch	WITHOUT_CLASSIFICATION	0.9998719436013926	WITHOUT_CLASSIFICATION	1.2805639860741266E-4	DESIGN
wrap the session in the transaction-protection proxy	WITHOUT_CLASSIFICATION	0.9998816202018376	WITHOUT_CLASSIFICATION	1.1837979816238993E-4	DESIGN
then bind it	WITHOUT_CLASSIFICATION	0.9999893246050542	WITHOUT_CLASSIFICATION	1.067539494576764E-5	DESIGN
try to make sure we don't wrap and already wrapped session	WITHOUT_CLASSIFICATION	0.9999912834303147	WITHOUT_CLASSIFICATION	8.716569685184815E-6	DESIGN
allow these to go through the the real session no matter what	WITHOUT_CLASSIFICATION	0.9999703501987285	WITHOUT_CLASSIFICATION	2.9649801271454125E-5	DESIGN
limit the methods available if no transaction is active	WITHOUT_CLASSIFICATION	0.9999219647083133	WITHOUT_CLASSIFICATION	7.803529168663514E-5	DESIGN
allow these (deprecated) methods to pass through	WITHOUT_CLASSIFICATION	0.9966814470242799	WITHOUT_CLASSIFICATION	0.003318552975720174	DESIGN
serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998119060579	WITHOUT_CLASSIFICATION	1.88093942161665E-7	DESIGN
We could register the session against the transaction even though it is not started, but we'd have no guarentee of ever getting the map entries cleaned up (aside from spawning threads).	WITHOUT_CLASSIFICATION	0.9999982117048801	WITHOUT_CLASSIFICATION	1.7882951198169733E-6	DESIGN
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9998559896335153	WITHOUT_CLASSIFICATION	1.4401036648468158E-4	DESIGN
private String propertyName;	WITHOUT_CLASSIFICATION	0.9963705125758773	WITHOUT_CLASSIFICATION	0.0036294874241228577	DESIGN
public PropertyProjection project() {return Projections.property(getPropertyName());}	WITHOUT_CLASSIFICATION	0.9999971485247269	WITHOUT_CLASSIFICATION	2.851475273129813E-6	DESIGN
String[] fk = StringHelper.qualify( "collection_", cp.getKeyColumnNames() );	WITHOUT_CLASSIFICATION	0.9999999801419438	WITHOUT_CLASSIFICATION	1.9858056250245723E-8	DESIGN
" collection_ where " +	WITHOUT_CLASSIFICATION	0.9999979157789987	WITHOUT_CLASSIFICATION	2.0842210014155672E-6	DESIGN
unsupported	WITHOUT_CLASSIFICATION	0.9997586739411856	WITHOUT_CLASSIFICATION	2.413260588144284E-4	DESIGN
unsupported	WITHOUT_CLASSIFICATION	0.9997586739411856	WITHOUT_CLASSIFICATION	2.413260588144284E-4	DESIGN
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9998559896335153	WITHOUT_CLASSIFICATION	1.4401036648468158E-4	DESIGN
the following two lines were added to ensure that this.params is not null, which can happen with two-deep nested subqueries	WITHOUT_CLASSIFICATION	0.9999987145781918	WITHOUT_CLASSIFICATION	1.2854218081472509E-6	DESIGN
with two-deep subqueries, the same alias would get generated for both using the old method (criteriaQuery.generateSQLAlias()), so that is now used as a fallback if the main criteria alias isn't set	WITHOUT_CLASSIFICATION	0.9999836697708547	WITHOUT_CLASSIFICATION	1.6330229145311363E-5	DESIGN
implicit polymorphism not supported (would need a union)	WITHOUT_CLASSIFICATION	0.5247010306547666	DESIGN	0.4752989693452336	WITHOUT_CLASSIFICATION
pull off the last ", "	WITHOUT_CLASSIFICATION	0.9999998318611665	WITHOUT_CLASSIFICATION	1.681388335925897E-7	DESIGN
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999877952799998	WITHOUT_CLASSIFICATION	1.220472000026521E-5	DESIGN
we have the form: trim(trimSource) so we trim leading and trailing spaces	WITHOUT_CLASSIFICATION	0.999997283162376	WITHOUT_CLASSIFICATION	2.71683762411484E-6	DESIGN
we have the form: trim(from trimSource). This is functionally equivalent to trim(trimSource)	WITHOUT_CLASSIFICATION	0.9997517915495903	WITHOUT_CLASSIFICATION	2.482084504097764E-4	DESIGN
NOT_SUPPORTED_SHOULD_USE_JDBC3_PreparedStatement.getGeneratedKeys_method	WITHOUT_CLASSIFICATION	0.999810279609127	WITHOUT_CLASSIFICATION	1.8972039087305467E-4	DESIGN
potentialTrimCharacterArgIndex = 1 assumes that a trim-specification has been specified. we handle the exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999999637062584	WITHOUT_CLASSIFICATION	3.629374150428004E-8	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999690877630492	WITHOUT_CLASSIFICATION	3.0912236950757394E-5	DESIGN
Oracle did add support for ANSI CASE statements in 9i	WITHOUT_CLASSIFICATION	0.9999995007456421	WITHOUT_CLASSIFICATION	4.992543578078475E-7	DESIGN
the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999997211307323	WITHOUT_CLASSIFICATION	2.788692676406487E-7	DESIGN
Informix doesn't have a bit type	WITHOUT_CLASSIFICATION	0.9998350287773046	WITHOUT_CLASSIFICATION	1.6497122269535524E-4	DESIGN
or BYTE or TEXT? or MONEY	WITHOUT_CLASSIFICATION	0.9996026773488867	WITHOUT_CLASSIFICATION	3.9732265111321204E-4	DESIGN
strip table-owner because Informix always returns constraint names as "<table-owner>.<constraint-name>"	WITHOUT_CLASSIFICATION	0.9999999966235793	WITHOUT_CLASSIFICATION	3.376420745030913E-9	DESIGN
build the map of standard ANSI SQL aggregation functions ~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998475215751	WITHOUT_CLASSIFICATION	1.5247842489207602E-7	DESIGN
pre H3.2 behavior: super.getReturnType(ct, m);	WITHOUT_CLASSIFICATION	0.9999191288976925	WITHOUT_CLASSIFICATION	8.087110230749194E-5	DESIGN
finally use the sqltype if == on Hibernate types did not find a match.	WITHOUT_CLASSIFICATION	0.9999928145253633	WITHOUT_CLASSIFICATION	7.185474636728043E-6	DESIGN
because numeric can be anything	WITHOUT_CLASSIFICATION	0.9999945842895376	WITHOUT_CLASSIFICATION	5.415710462389049E-6	DESIGN
constructors and factory methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9991031348958255	WITHOUT_CLASSIFICATION	8.968651041745152E-4	DESIGN
standard sql92 functions (can be overridden by subclasses)	WITHOUT_CLASSIFICATION	0.9999918368436319	WITHOUT_CLASSIFICATION	8.163156368015253E-6	DESIGN
map second/minute/hour/day/month/year to ANSI extract(), override on subclasses	WITHOUT_CLASSIFICATION	0.9999020165196008	WITHOUT_CLASSIFICATION	9.798348039925022E-5	DESIGN
register hibernate types for default use in scalar sqlquery type auto detection	WITHOUT_CLASSIFICATION	0.9967480596430118	WITHOUT_CLASSIFICATION	0.003251940356988084	DESIGN
database type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999366980842214	WITHOUT_CLASSIFICATION	6.33019157785538E-5	DESIGN
hibernate type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998813700728025	WITHOUT_CLASSIFICATION	1.186299271974485E-4	DESIGN
keyword support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995940298752681	WITHOUT_CLASSIFICATION	4.0597012473187947E-4	DESIGN
native identifier generatiion ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998832639768136	WITHOUT_CLASSIFICATION	1.167360231863333E-4	DESIGN
IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999279607666256	WITHOUT_CLASSIFICATION	7.203923337444742E-5	DESIGN
SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994919890542201	WITHOUT_CLASSIFICATION	5.080109457799313E-4	DESIGN
GUID support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993932581597385	WITHOUT_CLASSIFICATION	6.067418402616651E-4	DESIGN
limit/offset support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999781829745583	WITHOUT_CLASSIFICATION	2.1817025441605157E-5	DESIGN
by default we report no support	WITHOUT_CLASSIFICATION	0.9990958409066931	WITHOUT_CLASSIFICATION	9.041590933067635E-4	DESIGN
by default we report no support for NOWAIT lock semantics	WITHOUT_CLASSIFICATION	0.9780574489078011	WITHOUT_CLASSIFICATION	0.021942551092198916	DESIGN
table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999944244753665	WITHOUT_CLASSIFICATION	5.575524633553226E-6	DESIGN
temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993024484797312	WITHOUT_CLASSIFICATION	6.975515202689744E-4	DESIGN
callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999756549655722	WITHOUT_CLASSIFICATION	2.434503442778806E-4	DESIGN
current timestamp support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999989756137875	WITHOUT_CLASSIFICATION	1.0243862124991758E-6	DESIGN
SQLException support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997809526666466	WITHOUT_CLASSIFICATION	2.1904733335354786E-4	DESIGN
miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999963349465196	WITHOUT_CLASSIFICATION	3.665053480391318E-5	DESIGN
identifier quoting support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998596232739002	WITHOUT_CLASSIFICATION	1.4037672609969702E-4	DESIGN
DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998905908652265	WITHOUT_CLASSIFICATION	1.0940913477344656E-4	DESIGN
grrr... for differentiation of mysql storage engines	WITHOUT_CLASSIFICATION	0.9999987055857011	WITHOUT_CLASSIFICATION	1.294414298899823E-6	DESIGN
Informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999873372338743	WITHOUT_CLASSIFICATION	1.2662766125721992E-5	DESIGN
return false here, as most databases do not properly support this construct...	WITHOUT_CLASSIFICATION	0.998784605351858	WITHOUT_CLASSIFICATION	0.0012153946481420052	DESIGN
Mckoi has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999486428628528	WITHOUT_CLASSIFICATION	5.13571371473078E-5	DESIGN
Oracle8 and previous define only a "DATE" type which is used to represent all aspects of date/time	WITHOUT_CLASSIFICATION	0.9999997557816994	WITHOUT_CLASSIFICATION	2.44218300486726E-7	DESIGN
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999902512414175	WITHOUT_CLASSIFICATION	9.748758582389204E-6	DESIGN
" cascade";	WITHOUT_CLASSIFICATION	0.9999859663336259	WITHOUT_CLASSIFICATION	1.4033666374049305E-5	DESIGN
trim off the length/precision/scale	WITHOUT_CLASSIFICATION	0.9999999210600614	WITHOUT_CLASSIFICATION	7.893993860409474E-8	DESIGN
public boolean dropTemporaryTableAfterUse() {we have to, because postgres sets current txto rollback only after a failed create tablereturn true;}	WITHOUT_CLASSIFICATION	0.9999834174543909	WITHOUT_CLASSIFICATION	1.6582545609058755E-5	DESIGN
CHECK VIOLATION	WITHOUT_CLASSIFICATION	0.999996440118531	WITHOUT_CLASSIFICATION	3.5598814689950216E-6	DESIGN
UNIQUE VIOLATION	WITHOUT_CLASSIFICATION	0.9999980968396347	WITHOUT_CLASSIFICATION	1.903160365306844E-6	DESIGN
FOREIGN KEY VIOLATION	WITHOUT_CLASSIFICATION	0.999991152116719	WITHOUT_CLASSIFICATION	8.847883281095821E-6	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999690877630492	WITHOUT_CLASSIFICATION	3.0912236950757394E-5	DESIGN
NOT NULL VIOLATION	WITHOUT_CLASSIFICATION	0.9999405583777483	WITHOUT_CLASSIFICATION	5.944162225178225E-5	DESIGN
ALL OTHER	WITHOUT_CLASSIFICATION	0.9999794074867565	WITHOUT_CLASSIFICATION	2.0592513243414E-5	DESIGN
Register the type of the out param - PostgreSQL uses Types.OTHER	WITHOUT_CLASSIFICATION	0.9998368873958169	WITHOUT_CLASSIFICATION	1.6311260418313303E-4	DESIGN
seems to not really... public boolean supportsRowValueConstructorSyntax() { return true; }	WITHOUT_CLASSIFICATION	0.9999843600028518	WITHOUT_CLASSIFICATION	1.5639997148140246E-5	DESIGN
seems to have spotty LOB suppport	WITHOUT_CLASSIFICATION	0.9993463993730164	WITHOUT_CLASSIFICATION	6.536006269835877E-4	DESIGN
HHH-2300	WITHOUT_CLASSIFICATION	0.999846718945357	WITHOUT_CLASSIFICATION	1.5328105464309765E-4	DESIGN
ignore (probably H2 not in the classpath)	WITHOUT_CLASSIFICATION	0.9998508756334293	WITHOUT_CLASSIFICATION	1.4912436657067883E-4	DESIGN
Numeric Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999900373626075	WITHOUT_CLASSIFICATION	9.962637392425516E-6	DESIGN
String Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999928460095162	WITHOUT_CLASSIFICATION	7.153990483750873E-6	DESIGN
Time and Date Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999928975064497	WITHOUT_CLASSIFICATION	7.102493550248263E-6	DESIGN
System Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999842747081832	WITHOUT_CLASSIFICATION	1.5725291816771247E-5	DESIGN
not null is implicit	WITHOUT_CLASSIFICATION	0.9940813148099581	WITHOUT_CLASSIFICATION	0.00591868519004186	DESIGN
23000: Check constraint violation: {0} 23001: Unique index or primary key violation: {0}	WITHOUT_CLASSIFICATION	0.9999999981972179	WITHOUT_CLASSIFICATION	1.8027821270934133E-9	DESIGN
Display the dialect version.	WITHOUT_CLASSIFICATION	0.9999745942262198	WITHOUT_CLASSIFICATION	2.5405773780274892E-5	DESIGN
The RDMS concat() function only supports 2 parameters	WITHOUT_CLASSIFICATION	0.9999999946153836	WITHOUT_CLASSIFICATION	5.384616356335028E-9	DESIGN
Dialect method overrides ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999944962136182	WITHOUT_CLASSIFICATION	5.503786381650343E-6	DESIGN
Original Dialect.java returns " for update";	WITHOUT_CLASSIFICATION	0.9999891911623615	WITHOUT_CLASSIFICATION	1.0808837638486424E-5	DESIGN
Verify the state of this new method in Hibernate 3.0 Dialect.java	WITHOUT_CLASSIFICATION	0.975220017341773	WITHOUT_CLASSIFICATION	0.02477998265822709	DESIGN
Origial Dialect.java returns true;	WITHOUT_CLASSIFICATION	0.9999735901851481	WITHOUT_CLASSIFICATION	2.640981485181468E-5	DESIGN
The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999989350951022	WITHOUT_CLASSIFICATION	1.064904897920985E-6	DESIGN
Sequence methods - start. The RDMS dialect needs these	WITHOUT_CLASSIFICATION	0.9999976948561685	WITHOUT_CLASSIFICATION	2.30514383141E-6	DESIGN
methods to make it possible to use the Native Id generator	WITHOUT_CLASSIFICATION	0.9899937042780215	WITHOUT_CLASSIFICATION	0.010006295721978585	DESIGN
The where clause was added to eliminate this statement from Brute Force Searches.	WITHOUT_CLASSIFICATION	0.9988829542850828	WITHOUT_CLASSIFICATION	0.001117045714917213	DESIGN
Sequence methods - end	WITHOUT_CLASSIFICATION	0.9993847485042167	WITHOUT_CLASSIFICATION	6.152514957833067E-4	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999690877630492	WITHOUT_CLASSIFICATION	3.0912236950757394E-5	DESIGN
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999902512414175	WITHOUT_CLASSIFICATION	9.748758582389204E-6	DESIGN
We must return a valid RDMS/RSA command from this method to prevent RDMS/RSA from issuing ERROR 400	WITHOUT_CLASSIFICATION	0.9998876244389902	WITHOUT_CLASSIFICATION	1.1237556100986722E-4	DESIGN
Used with DROP TABLE to delete all records in the table.	WITHOUT_CLASSIFICATION	0.9999999309540458	WITHOUT_CLASSIFICATION	6.904595412412298E-8	DESIGN
RDMS supports the UNION ALL clause.	WITHOUT_CLASSIFICATION	0.9999999866446774	WITHOUT_CLASSIFICATION	1.3355322612107914E-8	DESIGN
RDMS has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999909732682117	WITHOUT_CLASSIFICATION	9.026731788196532E-6	DESIGN
Multi-param dialect functions...	WITHOUT_CLASSIFICATION	0.9999966304464326	WITHOUT_CLASSIFICATION	3.369553567369943E-6	DESIGN
function templates	WITHOUT_CLASSIFICATION	0.999999185114808	WITHOUT_CLASSIFICATION	8.148851921099187E-7	DESIGN
not null is implicit	WITHOUT_CLASSIFICATION	0.9940813148099581	WITHOUT_CLASSIFICATION	0.00591868519004186	DESIGN
this assumes schema support, which is present in 1.8.0 and later...	WITHOUT_CLASSIFICATION	0.9995785506387876	WITHOUT_CLASSIFICATION	4.2144936121233853E-4	DESIGN
HSQLDB only supports READ_UNCOMMITTED transaction isolation	WITHOUT_CLASSIFICATION	0.9999998817022666	WITHOUT_CLASSIFICATION	1.1829773327603622E-7	DESIGN
Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999974359279498	WITHOUT_CLASSIFICATION	2.564072050205141E-6	DESIGN
Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9999904748689409	WITHOUT_CLASSIFICATION	9.525131059128876E-6	DESIGN
Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.99999304499497	WITHOUT_CLASSIFICATION	6.955005029949371E-6	DESIGN
simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999978635644432	WITHOUT_CLASSIFICATION	2.136435556757705E-6	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999690877630492	WITHOUT_CLASSIFICATION	3.0912236950757394E-5	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999690877630492	WITHOUT_CLASSIFICATION	3.0912236950757394E-5	DESIGN
not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9942575318363963	WITHOUT_CLASSIFICATION	0.005742468163603596	DESIGN
register the type of the out param - an Oracle specific type	WITHOUT_CLASSIFICATION	0.9999977016183592	WITHOUT_CLASSIFICATION	2.2983816407654287E-6	DESIGN
TimesTen has no BLOB/CLOB support, but these types may be suitable for some applications. The length is limited to 4 million bytes.	WITHOUT_CLASSIFICATION	0.9999825713472276	WITHOUT_CLASSIFICATION	1.742865277246735E-5	DESIGN
new methods in dialect3	WITHOUT_CLASSIFICATION	0.9999777366248002	WITHOUT_CLASSIFICATION	2.226337519980404E-5	DESIGN
public boolean supportsForUpdateNowait() {return false;}	WITHOUT_CLASSIFICATION	0.9999997402006643	WITHOUT_CLASSIFICATION	2.5979933564384775E-7	DESIGN
TimesTen has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999918444934408	WITHOUT_CLASSIFICATION	8.155506559253535E-6	DESIGN
iterate entries ordered by capacity to find first fit	WITHOUT_CLASSIFICATION	0.9999997698014582	WITHOUT_CLASSIFICATION	2.3019854172074275E-7	DESIGN
add new ordered map	WITHOUT_CLASSIFICATION	0.9999996888816188	WITHOUT_CLASSIFICATION	3.111183811048566E-7	DESIGN
registerColumnType( Types.VARCHAR, 16777215, "mediumtext" );	WITHOUT_CLASSIFICATION	0.9999990380943107	WITHOUT_CLASSIFICATION	9.619056893417965E-7	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999690877630492	WITHOUT_CLASSIFICATION	3.0912236950757394E-5	DESIGN
This assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.9999997764761771	WITHOUT_CLASSIFICATION	2.2352382282203237E-7	DESIGN
sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999985009635959	WITHOUT_CLASSIFICATION	1.4990364041342455E-6	DESIGN
return "select CURRENT_TIMESTAMP from RDB$DATABASE";	WITHOUT_CLASSIFICATION	0.9999998126195668	WITHOUT_CLASSIFICATION	1.873804331670848E-7	DESIGN
registerColumnType data types	WITHOUT_CLASSIFICATION	0.9999782212349473	WITHOUT_CLASSIFICATION	2.177876505265177E-5	DESIGN
hibernate seems to ignore this type...	WITHOUT_CLASSIFICATION	0.9999625729608684	WITHOUT_CLASSIFICATION	3.742703913166629E-5	DESIGN
IBID for current_time and current_date	WITHOUT_CLASSIFICATION	0.9999949017197477	WITHOUT_CLASSIFICATION	5.098280252298925E-6	DESIGN
Tell hibernate to use getBytes instead of getBinaryStream	WITHOUT_CLASSIFICATION	0.9991342205797938	WITHOUT_CLASSIFICATION	8.65779420206171E-4	DESIGN
No batch statements	WITHOUT_CLASSIFICATION	0.9999987178719228	WITHOUT_CLASSIFICATION	1.2821280771347454E-6	DESIGN
We might want a special case for 19,2. This is very common for money types and here it is converted to 18,1	WITHOUT_CLASSIFICATION	0.9722952049238116	WITHOUT_CLASSIFICATION	0.027704795076188306	DESIGN
no pointbase BIT	WITHOUT_CLASSIFICATION	0.9999997170774327	WITHOUT_CLASSIFICATION	2.829225672411528E-7	DESIGN
no pointbase TINYINT	WITHOUT_CLASSIFICATION	0.9999995928654624	WITHOUT_CLASSIFICATION	4.071345375196584E-7	DESIGN
Pointbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999828758072301	WITHOUT_CLASSIFICATION	1.7124192769909668E-5	DESIGN
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999902512414175	WITHOUT_CLASSIFICATION	9.748758582389204E-6	DESIGN
The current_timestamp is more accurate, but only known to be supported in SQL Server 7.0 and later (i.e., Sybase not known to support it at all)	WITHOUT_CLASSIFICATION	0.99930102365715	WITHOUT_CLASSIFICATION	6.989763428499711E-4	DESIGN
SQL Server (at least up through 2005) does not support defining cascade delete constraints which can circel back to the mutating table	WITHOUT_CLASSIFICATION	0.9999991387543544	WITHOUT_CLASSIFICATION	8.612456454895141E-7	DESIGN
here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9999395334275067	WITHOUT_CLASSIFICATION	6.046657249338134E-5	DESIGN
registerColumnType( Types.BLOB, 16777215, "mediumblob" ); registerColumnType( Types.BLOB, 65535, "blob" );	WITHOUT_CLASSIFICATION	0.9999999436037149	WITHOUT_CLASSIFICATION	5.639628514321957E-8	DESIGN
registerColumnType( Types.CLOB, 16777215, "mediumtext" ); registerColumnType( Types.CLOB, 65535, "text" );	WITHOUT_CLASSIFICATION	0.9999999756326388	WITHOUT_CLASSIFICATION	2.4367361351481326E-8	DESIGN
registerColumnType( Types.VARCHAR, 16777215, "mediumtext" ); registerColumnType( Types.VARCHAR, 65535, "text" );	WITHOUT_CLASSIFICATION	0.999999282833066	WITHOUT_CLASSIFICATION	7.171669339442695E-7	DESIGN
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999902512414175	WITHOUT_CLASSIFICATION	9.748758582389204E-6	DESIGN
package-private	WITHOUT_CLASSIFICATION	0.999927502259892	WITHOUT_CLASSIFICATION	7.249774010795098E-5	DESIGN
sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999985009635959	WITHOUT_CLASSIFICATION	1.4990364041342455E-6	DESIGN
Sybase BIT type does not support null values	WITHOUT_CLASSIFICATION	0.9977958588992158	WITHOUT_CLASSIFICATION	0.0022041411007841794	DESIGN
This assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.9999997764761771	WITHOUT_CLASSIFICATION	2.2352382282203237E-7	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999690877630492	WITHOUT_CLASSIFICATION	3.0912236950757394E-5	DESIGN
You may still have other ResultSets or update counts left to process here but you can't do it now or the ResultSet you just got will be closed	WITHOUT_CLASSIFICATION	0.9999999916106872	WITHOUT_CLASSIFICATION	8.389312846728487E-9	DESIGN
not null ... (start with 1) is implicit	WITHOUT_CLASSIFICATION	0.9803834479481541	WITHOUT_CLASSIFICATION	0.019616552051845856	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999690877630492	WITHOUT_CLASSIFICATION	3.0912236950757394E-5	DESIGN
Oracle driver reports to support getGeneratedKeys(), but they only support the version taking an array of the names of the columns to be returned (via its RETURNING clause). No other driver seems to support this overloaded version.	WITHOUT_CLASSIFICATION	0.9753796069342282	WITHOUT_CLASSIFICATION	0.024620393065771757	DESIGN
Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999974359279498	WITHOUT_CLASSIFICATION	2.564072050205141E-6	DESIGN
Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9999904748689409	WITHOUT_CLASSIFICATION	9.525131059128876E-6	DESIGN
Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.99999304499497	WITHOUT_CLASSIFICATION	6.955005029949371E-6	DESIGN
add another (inner) nested select add the main query close off the inner nested select	WITHOUT_CLASSIFICATION	0.9999999899066622	WITHOUT_CLASSIFICATION	1.0093337906785738E-8	DESIGN
add the main query	WITHOUT_CLASSIFICATION	0.9999961165684454	WITHOUT_CLASSIFICATION	3.883431554547328E-6	DESIGN
add the restriction to the outer select	WITHOUT_CLASSIFICATION	0.9999999385261349	WITHOUT_CLASSIFICATION	6.147386511056643E-8	DESIGN
This assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.9999997764761771	WITHOUT_CLASSIFICATION	2.2352382282203237E-7	DESIGN
You may still have other ResultSets or update counts left to process here but you can't do it now or the ResultSet you just got will be closed	WITHOUT_CLASSIFICATION	0.9999999916106872	WITHOUT_CLASSIFICATION	8.389312846728487E-9	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999690877630492	WITHOUT_CLASSIFICATION	3.0912236950757394E-5	DESIGN
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999902512414175	WITHOUT_CLASSIFICATION	9.748758582389204E-6	DESIGN
simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999978635644432	WITHOUT_CLASSIFICATION	2.136435556757705E-6	DESIGN
not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9942575318363963	WITHOUT_CLASSIFICATION	0.005742468163603596	DESIGN
register the type of the out param - an Oracle specific type	WITHOUT_CLASSIFICATION	0.9999977016183592	WITHOUT_CLASSIFICATION	2.2983816407654287E-6	DESIGN
features which change between 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995408284486186	WITHOUT_CLASSIFICATION	4.591715513813709E-4	DESIGN
features which remain constant across 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999871437992	WITHOUT_CLASSIFICATION	1.2856200807263007E-7	DESIGN
binary %Stream character %Stream	WITHOUT_CLASSIFICATION	0.9999983688279898	WITHOUT_CLASSIFICATION	1.6311720102302704E-6	DESIGN
getDefaultProperties().setProperty(Environment.STATEMENT_BATCH_SIZE, NO_BATCH);	WITHOUT_CLASSIFICATION	0.9999999965793406	WITHOUT_CLASSIFICATION	3.420659483371236E-9	DESIGN
hibernate impelemnts cast in Dialect.java	WITHOUT_CLASSIFICATION	0.9999157345828165	WITHOUT_CLASSIFICATION	8.42654171835622E-5	DESIGN
aggregate functions shouldn't be registered, right? registerFunction( "list", new StandardSQLFunction("list",Hibernate.STRING) ); stopped on $list	WITHOUT_CLASSIFICATION	0.9979722023306049	WITHOUT_CLASSIFICATION	0.002027797669395148	DESIGN
DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998905908652265	WITHOUT_CLASSIFICATION	1.0940913477344656E-4	DESIGN
below is for Cache' that don't have str in 2007.1 there is str and we register str directly	WITHOUT_CLASSIFICATION	0.9992692491318901	WITHOUT_CLASSIFICATION	7.30750868109855E-4	DESIGN
note that %string is deprecated	WITHOUT_CLASSIFICATION	0.9995030099974209	WITHOUT_CLASSIFICATION	4.969900025791263E-4	DESIGN
%upper is deprecated	WITHOUT_CLASSIFICATION	0.9998038203278602	WITHOUT_CLASSIFICATION	1.9617967213993048E-4	DESIGN
The syntax used to add a foreign key constraint to a table.	WITHOUT_CLASSIFICATION	0.9999907231410465	WITHOUT_CLASSIFICATION	9.276858953551976E-6	DESIGN
identifier-commalist	WITHOUT_CLASSIFICATION	0.999998340072478	WITHOUT_CLASSIFICATION	1.6599275219408221E-6	DESIGN
IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999279607666256	WITHOUT_CLASSIFICATION	7.203923337444742E-5	DESIGN
SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994919890542201	WITHOUT_CLASSIFICATION	5.080109457799313E-4	DESIGN
temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993024484797312	WITHOUT_CLASSIFICATION	6.975515202689744E-4	DESIGN
identifier-commalist	WITHOUT_CLASSIFICATION	0.999998340072478	WITHOUT_CLASSIFICATION	1.6599275219408221E-6	DESIGN
The syntax used to add a column to a table	WITHOUT_CLASSIFICATION	0.999744254515708	WITHOUT_CLASSIFICATION	2.5574548429197283E-4	DESIGN
Completely optional cascading drop clause.	WITHOUT_CLASSIFICATION	0.9999966615963072	WITHOUT_CLASSIFICATION	3.338403692817123E-6	DESIGN
lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999158869459362	WITHOUT_CLASSIFICATION	8.411305406378277E-5	DESIGN
LIMIT support (ala TOP) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999945999855745	WITHOUT_CLASSIFICATION	5.400014425562026E-6	DESIGN
InterSystems Cache' does not current support "SELECT ... FOR UPDATE" syntax... Set your transaction mode to READ_COMMITTED before using	WITHOUT_CLASSIFICATION	0.9999665115901384	WITHOUT_CLASSIFICATION	3.3488409861642654E-5	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999690877630492	WITHOUT_CLASSIFICATION	3.0912236950757394E-5	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999690877630492	WITHOUT_CLASSIFICATION	3.0912236950757394E-5	DESIGN
<String>	WITHOUT_CLASSIFICATION	0.9999278644776364	WITHOUT_CLASSIFICATION	7.213552236358434E-5	DESIGN
callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999756549655722	WITHOUT_CLASSIFICATION	2.434503442778806E-4	DESIGN
miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999963349465196	WITHOUT_CLASSIFICATION	3.665053480391318E-5	DESIGN
The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999989350951022	WITHOUT_CLASSIFICATION	1.064904897920985E-6	DESIGN
Does the LIMIT clause come at the start of the SELECT statement, rather than at the end?	WITHOUT_CLASSIFICATION	0.9998888894391027	WITHOUT_CLASSIFICATION	1.1111056089736809E-4	DESIGN
Does the LIMIT clause take a "maximum" row number instead of a total number of returned rows?	WITHOUT_CLASSIFICATION	0.9997950968059892	WITHOUT_CLASSIFICATION	2.0490319401080865E-4	DESIGN
The name of the SQL function that transforms a string to lowercase	WITHOUT_CLASSIFICATION	0.999999973165479	WITHOUT_CLASSIFICATION	2.6834521074078975E-8	DESIGN
Create an OuterJoinGenerator for this dialect.	WITHOUT_CLASSIFICATION	0.9999962459203119	WITHOUT_CLASSIFICATION	3.754079687993214E-6	DESIGN
The keyword used to insert a row without specifying any column values	WITHOUT_CLASSIFICATION	0.9999983166150364	WITHOUT_CLASSIFICATION	1.6833849637238638E-6	DESIGN
registerFunction( "trim", new StandardSQLFunction( "trim", Hibernate.STRING ) );	WITHOUT_CLASSIFICATION	0.9999999985760977	WITHOUT_CLASSIFICATION	1.4239022849341092E-9	DESIGN
skip the FROM keyword in params	WITHOUT_CLASSIFICATION	0.9999437979859216	WITHOUT_CLASSIFICATION	5.620201407849325E-5	DESIGN
package	WITHOUT_CLASSIFICATION	0.9996923634291219	WITHOUT_CLASSIFICATION	3.0763657087807996E-4	DESIGN
potentialTrimCharacterArgIndex = 1 assumes that a trim-specification has been specified. we handle the exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999999637062584	WITHOUT_CLASSIFICATION	3.629374150428004E-8	DESIGN
SQLFunction implementation	WITHOUT_CLASSIFICATION	0.9999960175830511	WITHOUT_CLASSIFICATION	3.982416948800871E-6	DESIGN
conceivable that the dialect ctor could throw HibernateExceptions, so don't re-wrap	WITHOUT_CLASSIFICATION	0.999980276399724	WITHOUT_CLASSIFICATION	1.972360027605937E-5	DESIGN
register the standard dialect resolver	WITHOUT_CLASSIFICATION	0.9999964117596963	WITHOUT_CLASSIFICATION	3.5882403037595078E-6	DESIGN
register resolvers set via Environment property	WITHOUT_CLASSIFICATION	0.9999835509098234	WITHOUT_CLASSIFICATION	1.644909017657434E-5	DESIGN
kept for backward compatibility until after the 3.1beta5 release of HA	WITHOUT_CLASSIFICATION	0.9999932932043435	WITHOUT_CLASSIFICATION	6.706795656557836E-6	DESIGN
cache the hashcode	WITHOUT_CLASSIFICATION	0.9998279722475852	WITHOUT_CLASSIFICATION	1.7202775241473338E-4	DESIGN
the CascadingAction contract ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999866389046537	WITHOUT_CLASSIFICATION	1.3361095346251127E-5	DESIGN
the CascadingAction implementations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999887504762768	WITHOUT_CLASSIFICATION	1.1249523723219218E-5	DESIGN
delete does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999963730047605	WITHOUT_CLASSIFICATION	3.6269952394207238E-6	DESIGN
orphans should be deleted during delete	WITHOUT_CLASSIFICATION	0.9989467343494025	WITHOUT_CLASSIFICATION	0.0010532656505974761	DESIGN
(LockMode) anything	WITHOUT_CLASSIFICATION	0.9999571442412504	WITHOUT_CLASSIFICATION	4.285575874966316E-5	DESIGN
lock doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999848733874949	WITHOUT_CLASSIFICATION	1.5126612505175262E-5	DESIGN
refresh doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999976016756698	WITHOUT_CLASSIFICATION	2.39832433022403E-6	DESIGN
evicts don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999980286994442	WITHOUT_CLASSIFICATION	1.971300555870479E-6	DESIGN
saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999999788764803	WITHOUT_CLASSIFICATION	2.1123519633039063E-8	DESIGN
orphans should be deleted during save/update	WITHOUT_CLASSIFICATION	0.9998531598434485	WITHOUT_CLASSIFICATION	1.468401565515235E-4	DESIGN
for deprecated saveOrUpdateCopy()	WITHOUT_CLASSIFICATION	0.9999776696573509	WITHOUT_CLASSIFICATION	2.2330342649068246E-5	DESIGN
persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999997864420826	WITHOUT_CLASSIFICATION	2.135579173952018E-7	DESIGN
a proxy cannot be transient and it breaks ForeignKeys.isTransient	WITHOUT_CLASSIFICATION	0.9996994892781208	WITHOUT_CLASSIFICATION	3.005107218792493E-4	DESIGN
replicate does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999745502631034	WITHOUT_CLASSIFICATION	2.544973689660797E-5	DESIGN
static helper methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999918738776176	WITHOUT_CLASSIFICATION	8.126122382400207E-6	DESIGN
handles arrays and newly instantiated collections	WITHOUT_CLASSIFICATION	0.9998471544152966	WITHOUT_CLASSIFICATION	1.5284558470334898E-4	DESIGN
Actually the semantics of the next three are really "Bag" Note that, unlike objects, collection insertions, updates, deletions are not really remembered between flushes. We just re-use the same Lists for convenience.	WITHOUT_CLASSIFICATION	0.9999999665185666	WITHOUT_CLASSIFICATION	3.348143335549687E-8	DESIGN
Add these directly to the executions queue	WITHOUT_CLASSIFICATION	0.999980762123037	WITHOUT_CLASSIFICATION	1.9237876962893626E-5	DESIGN
continue loop	WITHOUT_CLASSIFICATION	0.9999947255036202	WITHOUT_CLASSIFICATION	5.274496379777626E-6	DESIGN
sort the updates by fk	WITHOUT_CLASSIFICATION	0.9998477965881087	WITHOUT_CLASSIFICATION	1.5220341189128495E-4	DESIGN
sort the updates by pk	WITHOUT_CLASSIFICATION	0.9994948934678828	WITHOUT_CLASSIFICATION	5.051065321173127E-4	DESIGN
the mapping of entity names to their latest batch numbers.	WITHOUT_CLASSIFICATION	0.9999995979831918	WITHOUT_CLASSIFICATION	4.020168081870382E-7	DESIGN
the map of batch numbers to EntityInsertAction lists	WITHOUT_CLASSIFICATION	0.9999998384403229	WITHOUT_CLASSIFICATION	1.6155967703701197E-7	DESIGN
optimize the hash size to eliminate a rehash.	WITHOUT_CLASSIFICATION	0.999963369632031	WITHOUT_CLASSIFICATION	3.663036796893253E-5	DESIGN
the list of entity names that indicate the batch number	WITHOUT_CLASSIFICATION	0.9999879183113816	WITHOUT_CLASSIFICATION	1.2081688618515637E-5	DESIGN
remove the current element from insertions. It will be added back later.	WITHOUT_CLASSIFICATION	0.9996502613197024	WITHOUT_CLASSIFICATION	3.4973868029759586E-4	DESIGN
the entity associated with the current action.	WITHOUT_CLASSIFICATION	0.9973864954783387	WITHOUT_CLASSIFICATION	0.0026135045216612455	DESIGN
There is already an existing batch for this type of entity. Check to see if the latest batch is acceptable.	WITHOUT_CLASSIFICATION	0.9999984847741652	WITHOUT_CLASSIFICATION	1.515225834853395E-6	DESIGN
now rebuild the insertions list. There is a batch for each entry in the name list.	WITHOUT_CLASSIFICATION	0.9999994026869156	WITHOUT_CLASSIFICATION	5.973130845589697E-7	DESIGN
the current batch number is the latest batch for this entity type.	WITHOUT_CLASSIFICATION	0.9999960626156844	WITHOUT_CLASSIFICATION	3.9373843156245815E-6	DESIGN
loop through all the associations of the current entity and make sure that they are processed before the current batch number	WITHOUT_CLASSIFICATION	0.9999990473924161	WITHOUT_CLASSIFICATION	9.526075839012087E-7	DESIGN
find the batch number associated with the current association, if any.	WITHOUT_CLASSIFICATION	0.9996546013499292	WITHOUT_CLASSIFICATION	3.4539865007074573E-4	DESIGN
create a new batch for this type. The batch number is the number of current batches.	WITHOUT_CLASSIFICATION	0.9999997655414369	WITHOUT_CLASSIFICATION	2.3445856321464254E-7	DESIGN
loop through all the associated entities and make sure they have been processed before the latest batch associated with this entity type.	WITHOUT_CLASSIFICATION	0.9999900430790123	WITHOUT_CLASSIFICATION	9.956920987759918E-6	DESIGN
since this entity will now be processed in the latest possible batch, we can be assured that it will come after all other associations, there's not need to continue checking.	WITHOUT_CLASSIFICATION	0.9495506737188382	WITHOUT_CLASSIFICATION	0.0504493262811619	DESIGN
cascade to current collection elements	WITHOUT_CLASSIFICATION	0.9999899525544603	WITHOUT_CLASSIFICATION	1.0047445539737864E-5	DESIGN
not really necessary, but good for consistency...	WITHOUT_CLASSIFICATION	0.9613261874462663	WITHOUT_CLASSIFICATION	0.03867381255373375	DESIGN
we can't cascade to non-embedded elements	WITHOUT_CLASSIFICATION	0.9999999667096293	WITHOUT_CLASSIFICATION	3.3290370730282056E-8	DESIGN
a newly instantiated collection can't have orphans	WITHOUT_CLASSIFICATION	0.9998205867954917	WITHOUT_CLASSIFICATION	1.794132045083558E-4	DESIGN
handle orphaned entities!!	WITHOUT_CLASSIFICATION	0.9999082756623041	WITHOUT_CLASSIFICATION	9.172433769590316E-5	DESIGN
Loaded entity instances, by EntityUniqueKey	WITHOUT_CLASSIFICATION	0.9999789900403531	WITHOUT_CLASSIFICATION	2.1009959646976445E-5	DESIGN
Identity map of EntityEntry instances, by the entity instance	WITHOUT_CLASSIFICATION	0.9999998416856005	WITHOUT_CLASSIFICATION	1.583143994357094E-7	DESIGN
Entity proxies, by EntityKey	WITHOUT_CLASSIFICATION	0.999987384409057	WITHOUT_CLASSIFICATION	1.2615590943082817E-5	DESIGN
Snapshots of current database state for entities that have not been loaded	WITHOUT_CLASSIFICATION	0.9999994765257978	WITHOUT_CLASSIFICATION	5.234742021700679E-7	DESIGN
Identity map of array holder ArrayHolder instances, by the array instance	WITHOUT_CLASSIFICATION	0.9999808658259067	WITHOUT_CLASSIFICATION	1.913417409330986E-5	DESIGN
Collection wrappers, by the CollectionKey key=CollectionKey, value=PersistentCollection	WITHOUT_CLASSIFICATION	0.9999998074040415	WITHOUT_CLASSIFICATION	1.9259595847547212E-7	DESIGN
Set of EntityKeys of deleted objects	WITHOUT_CLASSIFICATION	0.9999654161515175	WITHOUT_CLASSIFICATION	3.458384848247078E-5	DESIGN
properties that we have tried to load, and not found in the database	WITHOUT_CLASSIFICATION	0.9999999737605956	WITHOUT_CLASSIFICATION	2.6239404457253767E-8	DESIGN
A list of collection wrappers that were instantiating during result set processing, that we will need to initialize at the end of the query	WITHOUT_CLASSIFICATION	0.9999998581276925	WITHOUT_CLASSIFICATION	1.4187230750668673E-7	DESIGN
A container for collections we load up when the owning entity is not yet loaded ... for now, this is purely transient!	WITHOUT_CLASSIFICATION	0.9174297317331699	WITHOUT_CLASSIFICATION	0.08257026826683005	DESIGN
Downgrade locks	WITHOUT_CLASSIFICATION	0.9999494024683984	WITHOUT_CLASSIFICATION	5.0597531601716596E-5	DESIGN
any earlier proxy takes precedence	WITHOUT_CLASSIFICATION	0.9999945990617487	WITHOUT_CLASSIFICATION	5.400938251308445E-6	DESIGN
unwrap the object	WITHOUT_CLASSIFICATION	0.9999960226534779	WITHOUT_CLASSIFICATION	3.977346522136725E-6	DESIGN
initialize + unwrap the object	WITHOUT_CLASSIFICATION	0.9999999538532839	WITHOUT_CLASSIFICATION	4.614671615575474E-8	DESIGN
return the proxied object	WITHOUT_CLASSIFICATION	0.9997508156013625	WITHOUT_CLASSIFICATION	2.491843986375389E-4	DESIGN
overwrite old proxy	WITHOUT_CLASSIFICATION	0.999998752087635	WITHOUT_CLASSIFICATION	1.2479123649390554E-6	DESIGN
early exit...	WITHOUT_CLASSIFICATION	0.999837909238172	WITHOUT_CLASSIFICATION	1.620907618280307E-4	DESIGN
or should it actually throw an exception?	WITHOUT_CLASSIFICATION	0.9122617754664136	WITHOUT_CLASSIFICATION	0.08773822453358632	DESIGN
treat it just like a new collection	WITHOUT_CLASSIFICATION	0.9999952532748396	WITHOUT_CLASSIFICATION	4.746725160460255E-6	DESIGN
do this work only at the very highest level of the load don't let this method be called recursively	WITHOUT_CLASSIFICATION	0.8229897106604559	WITHOUT_CLASSIFICATION	0.1770102893395441	DESIGN
note that each iteration of the loop may add new elements	WITHOUT_CLASSIFICATION	0.9999999662256175	WITHOUT_CLASSIFICATION	3.377438251717009E-8	DESIGN
it might be an unwrapped collection reference! try to find a wrapper (slowish)	WITHOUT_CLASSIFICATION	0.9929392833172972	WITHOUT_CLASSIFICATION	0.0070607166827028	DESIGN
public boolean isNonExistant(EntityKey key) {return nonExistantEntityKeys.contains(key);}	WITHOUT_CLASSIFICATION	0.9999987368216752	WITHOUT_CLASSIFICATION	1.2631783249085228E-6	DESIGN
public boolean isNonExistant(EntityUniqueKey key) {return nonExistentEntityUniqueKeys.contains(key);}	WITHOUT_CLASSIFICATION	0.9999963896749473	WITHOUT_CLASSIFICATION	3.6103250525855685E-6	DESIGN
iterate all the entities currently associated with the persistence context.	WITHOUT_CLASSIFICATION	0.9978018280368293	WITHOUT_CLASSIFICATION	0.0021981719631706618	DESIGN
does this entity entry pertain to the entity persister in which we are interested (owner)?	WITHOUT_CLASSIFICATION	0.9955806968222787	WITHOUT_CLASSIFICATION	0.004419303177721379	DESIGN
check if the managed object is the parent	WITHOUT_CLASSIFICATION	0.9999315961192569	WITHOUT_CLASSIFICATION	6.840388074321637E-5	DESIGN
otherwise, the proxy was pruned during the serialization process	WITHOUT_CLASSIFICATION	0.9999997170481225	WITHOUT_CLASSIFICATION	2.829518774232022E-7	DESIGN
adds remove as a sort-of alias for delete...	WITHOUT_CLASSIFICATION	0.9999987132918634	WITHOUT_CLASSIFICATION	1.2867081365388654E-6	DESIGN
bad cast	WITHOUT_CLASSIFICATION	0.99989546072885	WITHOUT_CLASSIFICATION	1.0453927114990886E-4	DESIGN
return lhsPersister.getSubclassPropertyColumnNames(property);	WITHOUT_CLASSIFICATION	0.9999976451325117	WITHOUT_CLASSIFICATION	2.354867488223499E-6	DESIGN
property-refs for associations defined on a component are not supported, so no need to slice	WITHOUT_CLASSIFICATION	0.9999991172687467	WITHOUT_CLASSIFICATION	8.827312532767328E-7	DESIGN
if there is no property-ref, assume the join is to the subclass table (ie. the table of the subclass that the association belongs to)	WITHOUT_CLASSIFICATION	0.9999997753644391	WITHOUT_CLASSIFICATION	2.2463556101342182E-7	DESIGN
handle a property-ref	WITHOUT_CLASSIFICATION	0.9999129134883238	WITHOUT_CLASSIFICATION	8.708651167612587E-5	DESIGN
NativeSQLQueryReturn	WITHOUT_CLASSIFICATION	0.9995488213056162	WITHOUT_CLASSIFICATION	4.511786943838096E-4	DESIGN
final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999989273562674	WITHOUT_CLASSIFICATION	1.072643732546699E-6	DESIGN
why is all others non final ?	WITHOUT_CLASSIFICATION	0.991073168627994	WITHOUT_CLASSIFICATION	0.00892683137200602	DESIGN
this.forceCacheRefresh = forceCacheRefresh;	WITHOUT_CLASSIFICATION	0.9999961283039456	WITHOUT_CLASSIFICATION	3.871696054501062E-6	DESIGN
HELLA IMPORTANT OPTIMIZATION!!!	WITHOUT_CLASSIFICATION	0.999994141766744	WITHOUT_CLASSIFICATION	5.85823325599751E-6	DESIGN
return that.type.equals(type) && EqualsHelper.equals(that.value, value);	WITHOUT_CLASSIFICATION	0.9999999665903431	WITHOUT_CLASSIFICATION	3.340965701328026E-8	DESIGN
Must occur after resolving identifiers!	WITHOUT_CLASSIFICATION	0.99996893260364	WITHOUT_CLASSIFICATION	3.106739636009211E-5	DESIGN
take a snapshot	WITHOUT_CLASSIFICATION	0.9999599413200487	WITHOUT_CLASSIFICATION	4.0058679951213906E-5	DESIGN
do a check	WITHOUT_CLASSIFICATION	0.9995713855010432	WITHOUT_CLASSIFICATION	4.286144989567939E-4	DESIGN
the owning entity may have been deleted and its identifier unset due to identifier-rollback; in which case, try to look up its identifier from the persistence context	WITHOUT_CLASSIFICATION	0.9999999422548583	WITHOUT_CLASSIFICATION	5.774514175978942E-8	DESIGN
do the work	WITHOUT_CLASSIFICATION	0.9995383317443569	WITHOUT_CLASSIFICATION	4.6166825564305706E-4	DESIGN
We've been here before	WITHOUT_CLASSIFICATION	0.9997753178715346	WITHOUT_CLASSIFICATION	2.2468212846542713E-4	DESIGN
it is or was referenced _somewhere_	WITHOUT_CLASSIFICATION	0.9999927881381121	WITHOUT_CLASSIFICATION	7.2118618878808404E-6	DESIGN
do the work	WITHOUT_CLASSIFICATION	0.9995383317443569	WITHOUT_CLASSIFICATION	4.6166825564305706E-4	DESIGN
if either its role changed,	WITHOUT_CLASSIFICATION	0.9999914855657709	WITHOUT_CLASSIFICATION	8.514434229053764E-6	DESIGN
or its key changed	WITHOUT_CLASSIFICATION	0.9999911536138955	WITHOUT_CLASSIFICATION	8.846386104569816E-6	DESIGN
we will need to create new entries	WITHOUT_CLASSIFICATION	0.9999892252254672	WITHOUT_CLASSIFICATION	1.0774774532907192E-5	DESIGN
we will need to remove ye olde entries	WITHOUT_CLASSIFICATION	0.9999675554149786	WITHOUT_CLASSIFICATION	3.2444585021355506E-5	DESIGN
force initialize!	WITHOUT_CLASSIFICATION	0.9999999150826039	WITHOUT_CLASSIFICATION	8.491739620434138E-8	DESIGN
else if it's elements changed	WITHOUT_CLASSIFICATION	0.9999978033650966	WITHOUT_CLASSIFICATION	2.1966349033360827E-6	DESIGN
ATTRIBUTES MAINTAINED BETWEEN FLUSH CYCLES	WITHOUT_CLASSIFICATION	0.9999035438663546	WITHOUT_CLASSIFICATION	9.645613364545767E-5	DESIGN
session-start/post-flush persistent state	WITHOUT_CLASSIFICATION	0.9999978844895894	WITHOUT_CLASSIFICATION	2.1155104107517703E-6	DESIGN
allow the CollectionSnapshot to be serialized	WITHOUT_CLASSIFICATION	0.9998729792002534	WITHOUT_CLASSIFICATION	1.270207997466206E-4	DESIGN
ATTRIBUTES USED ONLY DURING FLUSH CYCLE	WITHOUT_CLASSIFICATION	0.9998354702870352	WITHOUT_CLASSIFICATION	1.6452971296483123E-4	DESIGN
"current" means the reference that was found during flush()	WITHOUT_CLASSIFICATION	0.9999993615815742	WITHOUT_CLASSIFICATION	6.384184257177508E-7	DESIGN
"loaded" means the reference that is consistent with the current database state	WITHOUT_CLASSIFICATION	0.9999986959642322	WITHOUT_CLASSIFICATION	1.3040357677987306E-6	DESIGN
during flush, we navigate the object graph to collections and decide what to do with them	WITHOUT_CLASSIFICATION	0.9898639146823546	WITHOUT_CLASSIFICATION	0.010136085317645442	DESIGN
if we instantiate a collection during the flush() process, we must ignore it for the rest of the flush()	WITHOUT_CLASSIFICATION	0.9999999882158391	WITHOUT_CLASSIFICATION	1.1784160896885602E-8	DESIGN
new collections that get found + wrapped during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999991104851192	WITHOUT_CLASSIFICATION	8.895148807571796E-7	DESIGN
a newly wrapped collection is NOT dirty (or we get unnecessary version updates)	WITHOUT_CLASSIFICATION	0.8371684108332771	WITHOUT_CLASSIFICATION	0.16283158916672288	DESIGN
collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9999269769546824	WITHOUT_CLASSIFICATION	7.302304531765349E-5	DESIGN
collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9999269769546824	WITHOUT_CLASSIFICATION	7.302304531765349E-5	DESIGN
detached collections that get found + reattached during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999996509650065	WITHOUT_CLASSIFICATION	3.490349934643943E-7	DESIGN
optimization	WITHOUT_CLASSIFICATION	0.9999963622686889	WITHOUT_CLASSIFICATION	3.6377313110349398E-6	DESIGN
optimization optimization	WITHOUT_CLASSIFICATION	0.9999993937527059	WITHOUT_CLASSIFICATION	6.062472940985026E-7	DESIGN
re-snapshot	WITHOUT_CLASSIFICATION	0.9998806925997794	WITHOUT_CLASSIFICATION	1.1930740022054315E-4	DESIGN
for convenience to save some lookups	WITHOUT_CLASSIFICATION	0.9999991193085	WITHOUT_CLASSIFICATION	8.80691499832238E-7	DESIGN
NOTE: this is not updated when properties are fetched lazily!	WITHOUT_CLASSIFICATION	0.8422877577674662	WITHOUT_CLASSIFICATION	0.15771224223253383	DESIGN
memory optimization	WITHOUT_CLASSIFICATION	0.9999995927727311	WITHOUT_CLASSIFICATION	4.072272688331826E-7	DESIGN
use the id value of a newly instantiated instance as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999336372109776	WITHOUT_CLASSIFICATION	6.636278902237212E-5	DESIGN
copied from Session:	WITHOUT_CLASSIFICATION	0.9994919199638521	WITHOUT_CLASSIFICATION	5.080800361478153E-4	DESIGN
this should not happen since the DTD prevents it	WITHOUT_CLASSIFICATION	0.9999500309174464	WITHOUT_CLASSIFICATION	4.9969082553576173E-5	DESIGN
JoinProcessor needs to know if the where clause fragment came from a dynamic filter or not so it can put the where clause fragment in the right place in the SQL AST. 'hasFilterCondition' keeps track of that fact.	WITHOUT_CLASSIFICATION	0.9995263484794654	WITHOUT_CLASSIFICATION	4.736515205345405E-4	DESIGN
the current join represents the join between a many-to-many association table and its "target" table. Here we need to apply any additional filters defined specifically on the many-to-many	WITHOUT_CLASSIFICATION	0.9999998815255283	WITHOUT_CLASSIFICATION	1.1847447169541889E-7	DESIGN
check basic level one nullablilty	WITHOUT_CLASSIFICATION	0.9999942434646611	WITHOUT_CLASSIFICATION	5.75653533882956E-6	DESIGN
values is not null and is checkable, we'll look deeper	WITHOUT_CLASSIFICATION	0.9996339897084178	WITHOUT_CLASSIFICATION	3.6601029158220554E-4	DESIGN
for non null args, check for components and elements containing components	WITHOUT_CLASSIFICATION	0.9999645600958681	WITHOUT_CLASSIFICATION	3.543990413202292E-5	DESIGN
cache the hashcode	WITHOUT_CLASSIFICATION	0.9998279722475852	WITHOUT_CLASSIFICATION	1.7202775241473338E-4	DESIGN
persistent collections may have components	WITHOUT_CLASSIFICATION	0.9999979367064331	WITHOUT_CLASSIFICATION	2.0632935668300694E-6	DESIGN
check for all components values in the collection	WITHOUT_CLASSIFICATION	0.9999998891682491	WITHOUT_CLASSIFICATION	1.108317508701678E-7	DESIGN
will check current level if some of them are not null or sublevels if they exist	WITHOUT_CLASSIFICATION	0.9999984389330794	WITHOUT_CLASSIFICATION	1.5610669206134008E-6	DESIGN
do the test	WITHOUT_CLASSIFICATION	0.9999968830890472	WITHOUT_CLASSIFICATION	3.116910952814577E-6	DESIGN
if its an uninitialized proxy it can't be transient	WITHOUT_CLASSIFICATION	0.9999996395938612	WITHOUT_CLASSIFICATION	3.604061388060911E-7	DESIGN
unwrap it	WITHOUT_CLASSIFICATION	0.9999960296947881	WITHOUT_CLASSIFICATION	3.970305211929593E-6	DESIGN
See if the entity is already bound to this session, if not look at the entity identifier and assume that the entity is persistent if the id is not "unsaved" (that is, we rely on foreign keys to keep database integrity)	WITHOUT_CLASSIFICATION	0.9993614983307997	WITHOUT_CLASSIFICATION	6.385016692003076E-4	DESIGN
an unfetched association can only point to an entity that already exists in the db	WITHOUT_CLASSIFICATION	0.9999978262985922	WITHOUT_CLASSIFICATION	2.17370140769677E-6	DESIGN
let the interceptor inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999974797174861	WITHOUT_CLASSIFICATION	2.5202825138461235E-6	DESIGN
let the persister inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999441124737731	WITHOUT_CLASSIFICATION	5.5887526226790016E-5	DESIGN
we use the assumed value, if there is one, to avoid hitting the database	WITHOUT_CLASSIFICATION	0.9999999451549036	WITHOUT_CLASSIFICATION	5.484509632478766E-8	DESIGN
hit the database, after checking the session cache for a snapshot	WITHOUT_CLASSIFICATION	0.9263345373452573	WITHOUT_CLASSIFICATION	0.07366546265474275	DESIGN
context-entity-identifier returns null explicitly if the entity is not associated with the persistence context; so make some deeper checks...	WITHOUT_CLASSIFICATION	0.9999885376610435	WITHOUT_CLASSIFICATION	1.1462338956626677E-5	DESIGN
int count = 0;	WITHOUT_CLASSIFICATION	0.9999957319180871	WITHOUT_CLASSIFICATION	4.268081912849821E-6	DESIGN
the first key found after the given key	WITHOUT_CLASSIFICATION	0.999996481409711	WITHOUT_CLASSIFICATION	3.5185902889233277E-6	DESIGN
checkForEnd = false;	WITHOUT_CLASSIFICATION	0.9999997329517901	WITHOUT_CLASSIFICATION	2.6704820993745156E-7	DESIGN
count++;	WITHOUT_CLASSIFICATION	0.9999093742094499	WITHOUT_CLASSIFICATION	9.062579055001257E-5	DESIGN
end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999991208749432	WITHOUT_CLASSIFICATION	8.791250566856743E-7	DESIGN
we ran out of keys to try	WITHOUT_CLASSIFICATION	0.9999702108974745	WITHOUT_CLASSIFICATION	2.978910252545318E-5	DESIGN
first element of array is reserved for the actual instance we are loading!	WITHOUT_CLASSIFICATION	0.999999692918304	WITHOUT_CLASSIFICATION	3.0708169593113414E-7	DESIGN
the first id found after the given id	WITHOUT_CLASSIFICATION	0.9999990051288464	WITHOUT_CLASSIFICATION	9.948711536113832E-7	DESIGN
we ran out of ids to try	WITHOUT_CLASSIFICATION	0.9999467610053101	WITHOUT_CLASSIFICATION	5.323899468981363E-5	DESIGN
look for existing collection as part of the persistence context	WITHOUT_CLASSIFICATION	0.9999999970701571	WITHOUT_CLASSIFICATION	2.9298429330817097E-9	DESIGN
ignore this row of results! Note the early exit	WITHOUT_CLASSIFICATION	0.9999854064060687	WITHOUT_CLASSIFICATION	1.459359393138992E-5	DESIGN
initialize this collection	WITHOUT_CLASSIFICATION	0.9998972301828419	WITHOUT_CLASSIFICATION	1.0276981715806206E-4	DESIGN
create one	WITHOUT_CLASSIFICATION	0.9999907024587859	WITHOUT_CLASSIFICATION	9.297541214077798E-6	DESIGN
warning: can cause a recursive calls! (proxy initialization)	WITHOUT_CLASSIFICATION	0.9999991833811553	WITHOUT_CLASSIFICATION	8.16618844744744E-7	DESIGN
there were no queued additions and the role has a cache	WITHOUT_CLASSIFICATION	0.9999838022411784	WITHOUT_CLASSIFICATION	1.619775882152118E-5	DESIGN
and this is not a forced initialization during flush	WITHOUT_CLASSIFICATION	0.9999985270861098	WITHOUT_CLASSIFICATION	1.4729138902082838E-6	DESIGN
some filters affecting the collection are enabled on the session, so do not do the put into the cache.	WITHOUT_CLASSIFICATION	0.999998945880176	WITHOUT_CLASSIFICATION	1.0541198239800144E-6	DESIGN
cleanup code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997092272812964	WITHOUT_CLASSIFICATION	2.907727187035593E-4	DESIGN
loading collection xrefs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997853927632	WITHOUT_CLASSIFICATION	2.1460723670736787E-7	DESIGN
Collection load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999940934974579	WITHOUT_CLASSIFICATION	5.906502542078603E-6	DESIGN
simple cache of param metadata based on query string. Ideally, the original "user-supplied query" string should be used to retreive this metadata (i.e., not the para-list-expanded query string) to avoid unnecessary cache entries. Used solely for caching param metadata for native-sql queries, see getSQLParameterMetadata() for a discussion as to why...	WITHOUT_CLASSIFICATION	0.730811039500536	DESIGN	0.26918896049946395	WITHOUT_CLASSIFICATION
the cache of the actual plans...	WITHOUT_CLASSIFICATION	0.9999989596012365	WITHOUT_CLASSIFICATION	1.0403987634932445E-6	DESIGN
package	WITHOUT_CLASSIFICATION	0.9996923634291219	WITHOUT_CLASSIFICATION	3.0763657087807996E-4	DESIGN
package	WITHOUT_CLASSIFICATION	0.9996923634291219	WITHOUT_CLASSIFICATION	3.0763657087807996E-4	DESIGN
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999999357761018	WITHOUT_CLASSIFICATION	6.422389827374978E-8	DESIGN
for native-sql queries, the param metadata is determined outside any relation to a query plan, because query plan creation and/or retreival for a native-sql query depends on all of the return types having been set, which might not be the case up-front when param metadata would be most useful	WITHOUT_CLASSIFICATION	0.984415805366462	WITHOUT_CLASSIFICATION	0.015584194633537893	DESIGN
don't care...	WITHOUT_CLASSIFICATION	0.999690717813593	WITHOUT_CLASSIFICATION	3.0928218640707405E-4	DESIGN
Recognition code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999657272602498	WITHOUT_CLASSIFICATION	3.4272739750209974E-5	DESIGN
don't care...	WITHOUT_CLASSIFICATION	0.999690717813593	WITHOUT_CLASSIFICATION	3.0928218640707405E-4	DESIGN
NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9999157664694376	WITHOUT_CLASSIFICATION	8.423353056240181E-5	DESIGN
break the outer loop !!!	WITHOUT_CLASSIFICATION	0.9994221386982944	WITHOUT_CLASSIFICATION	5.778613017055258E-4	DESIGN
named parameter	WITHOUT_CLASSIFICATION	0.9999779436328612	WITHOUT_CLASSIFICATION	2.2056367138834024E-5	DESIGN
could be either an ordinal or JPA-positional parameter	WITHOUT_CLASSIFICATION	0.99966200369122	WITHOUT_CLASSIFICATION	3.3799630877992944E-4	DESIGN
a peek ahead showed this as an JPA-positional parameter	WITHOUT_CLASSIFICATION	0.999994316184904	WITHOUT_CLASSIFICATION	5.683815095962551E-6	DESIGN
make sure this "name" is an integral	WITHOUT_CLASSIFICATION	0.9999971259472489	WITHOUT_CLASSIFICATION	2.8740527511528615E-6	DESIGN
pre-determine and cache the hashcode	WITHOUT_CLASSIFICATION	0.9998184676282179	WITHOUT_CLASSIFICATION	1.815323717821315E-4	DESIGN
perform the actual work	WITHOUT_CLASSIFICATION	0.9999940012821019	WITHOUT_CLASSIFICATION	5.998717898064043E-6	DESIGN
if everything went ok, commit the transaction and close the obtained connection handle...	WITHOUT_CLASSIFICATION	0.9999805368099413	WITHOUT_CLASSIFICATION	1.9463190058820502E-5	DESIGN
at some point the processing went bad, so we need to: 1) make sure the connection handle gets released 2) try to cleanup the JTA context as much as possible	WITHOUT_CLASSIFICATION	0.9994682172569894	WITHOUT_CLASSIFICATION	5.317827430106014E-4	DESIGN
finally handle the exception	WITHOUT_CLASSIFICATION	0.9997943390339485	WITHOUT_CLASSIFICATION	2.0566096605140451E-4	DESIGN
a "detached" collection that belonged to a different entity	WITHOUT_CLASSIFICATION	0.9980568552007967	WITHOUT_CLASSIFICATION	0.0019431447992034126	DESIGN
saveOrUpdateCopy() is deprecated!	WITHOUT_CLASSIFICATION	0.9999986672238288	WITHOUT_CLASSIFICATION	1.3327761712744567E-6	DESIGN
collectionPersister should not be null, but we don't want to throw an exception if it is null	WITHOUT_CLASSIFICATION	0.9996127028779386	WITHOUT_CLASSIFICATION	3.8729712206139283E-4	DESIGN
otherwise a null or brand new collection this will also (inefficiently) handle arrays, which have no snapshot, so we can't do any better processArrayOrNewCollection(collection, type);	WITHOUT_CLASSIFICATION	0.9974814407601575	WITHOUT_CLASSIFICATION	0.0025185592398423292	DESIGN
a "detached" collection that originally belonged to the same entity	WITHOUT_CLASSIFICATION	0.9975699631395867	WITHOUT_CLASSIFICATION	0.002430036860413255	DESIGN
do nothing	WITHOUT_CLASSIFICATION	0.9999914833051887	WITHOUT_CLASSIFICATION	8.516694811271192E-6	DESIGN
do nothing	WITHOUT_CLASSIFICATION	0.9999914833051887	WITHOUT_CLASSIFICATION	8.516694811271192E-6	DESIGN
Force a substitution!	WITHOUT_CLASSIFICATION	0.9999259675094123	WITHOUT_CLASSIFICATION	7.403249058770483E-5	DESIGN
The user requested a "greater" (i.e. more restrictive) form of pessimistic lock	WITHOUT_CLASSIFICATION	0.9999976656734816	WITHOUT_CLASSIFICATION	2.334326518496913E-6	DESIGN
the database now holds a lock + the object is flushed from the cache, so release the soft lock	WITHOUT_CLASSIFICATION	0.9999993066315809	WITHOUT_CLASSIFICATION	6.933684191309174E-7	DESIGN
now update the object .. has to be outside the main if block above (because of collections)	WITHOUT_CLASSIFICATION	0.9999976224727103	WITHOUT_CLASSIFICATION	2.377527289820996E-6	DESIGN
Search for collections by reachability, updating their role. We don't want to touch collections reachable from a deleted object	WITHOUT_CLASSIFICATION	0.9984594417443511	WITHOUT_CLASSIFICATION	0.0015405582556489495	DESIGN
this is a situation where the entity id is assigned by a post-insert generator and was saved outside the transaction forcing it to be delayed	WITHOUT_CLASSIFICATION	0.9999015235787859	WITHOUT_CLASSIFICATION	9.847642121409065E-5	DESIGN
NOTE: we need to do the wrap here even if its not "dirty", because collections need wrapping but changes to _them_ don't dirty the container. Also, for versioned data, we need to wrap before calling searchForDirtyCollections	WITHOUT_CLASSIFICATION	0.9999397782758729	WITHOUT_CLASSIFICATION	6.022172412704715E-5	DESIGN
grab its state saved at deletion	WITHOUT_CLASSIFICATION	0.9999935637189288	WITHOUT_CLASSIFICATION	6.436281071197736E-6	DESIGN
grab its current state	WITHOUT_CLASSIFICATION	0.9999960396763091	WITHOUT_CLASSIFICATION	3.960323690824243E-6	DESIGN
schedule the update note that we intentionally do _not_ pass in currentPersistentState!	WITHOUT_CLASSIFICATION	0.9999999982006204	WITHOUT_CLASSIFICATION	1.7993796252650331E-9	DESIGN
substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.999990072189007	WITHOUT_CLASSIFICATION	9.92781099303146E-6	DESIGN
give the Interceptor a chance to process property values, if the properties were modified by the Interceptor, we need to set them back to the object	WITHOUT_CLASSIFICATION	0.9997853879315126	WITHOUT_CLASSIFICATION	2.146120684874487E-4	DESIGN
compare to cached state (ignoring collections unless versioned)	WITHOUT_CLASSIFICATION	0.9999998430123946	WITHOUT_CLASSIFICATION	1.5698760527827055E-7	DESIGN
if it was dirtied by a collection only	WITHOUT_CLASSIFICATION	0.9999991604336723	WITHOUT_CLASSIFICATION	8.39566327642457E-7	DESIGN
increment the version number (if necessary)	WITHOUT_CLASSIFICATION	0.9976040219069598	WITHOUT_CLASSIFICATION	0.0023959780930400817	DESIGN
check nullability but do not perform command execute we'll use scheduled updates for that.	WITHOUT_CLASSIFICATION	0.9999909791466014	WITHOUT_CLASSIFICATION	9.020853398544787E-6	DESIGN
give the Interceptor a chance to modify property values	WITHOUT_CLASSIFICATION	0.9979554136018846	WITHOUT_CLASSIFICATION	0.002044586398115355	DESIGN
now we might need to recalculate the dirtyProperties array	WITHOUT_CLASSIFICATION	0.9953945764484945	WITHOUT_CLASSIFICATION	0.00460542355150551	DESIGN
use the current version	WITHOUT_CLASSIFICATION	0.9999573930995231	WITHOUT_CLASSIFICATION	4.260690047688086E-5	DESIGN
Interceptor returned null, so do the dirtycheck ourself, if possible	WITHOUT_CLASSIFICATION	0.9999991418677857	WITHOUT_CLASSIFICATION	8.581322143221536E-7	DESIGN
object loaded by update()	WITHOUT_CLASSIFICATION	0.9999974243754013	WITHOUT_CLASSIFICATION	2.5756245986293222E-6	DESIGN
dirty check against the usual snapshot of the entity	WITHOUT_CLASSIFICATION	0.9999990395897222	WITHOUT_CLASSIFICATION	9.604102777860848E-7	DESIGN
dirty check against the database snapshot, if possible/necessary	WITHOUT_CLASSIFICATION	0.9999218176527765	WITHOUT_CLASSIFICATION	7.818234722354918E-5	DESIGN
the Interceptor handled the dirty checking	WITHOUT_CLASSIFICATION	0.9989467865235884	WITHOUT_CLASSIFICATION	0.0010532134764116954	DESIGN
even process null collections	WITHOUT_CLASSIFICATION	0.9999845744263963	WITHOUT_CLASSIFICATION	1.542557360373112E-5	DESIGN
get the id from the object	WITHOUT_CLASSIFICATION	0.9999897904437067	WITHOUT_CLASSIFICATION	1.0209556293347274E-5	DESIGN
always do an INSERT, and let it fail by constraint violation	WITHOUT_CLASSIFICATION	0.9999998820121666	WITHOUT_CLASSIFICATION	1.1798783330686557E-7	DESIGN
what is the version on the database?	WITHOUT_CLASSIFICATION	0.9992311140247292	WITHOUT_CLASSIFICATION	7.688859752708448E-4	DESIGN
/ HHH-2378	WITHOUT_CLASSIFICATION	0.9999896226704587	WITHOUT_CLASSIFICATION	1.0377329541341681E-5	DESIGN
will result in a SQL UPDATE:	WITHOUT_CLASSIFICATION	0.999986210523339	WITHOUT_CLASSIFICATION	1.3789476660970385E-5	DESIGN
else do nothing (don't even reassociate object!)	WITHOUT_CLASSIFICATION	0.9999472597387244	WITHOUT_CLASSIFICATION	5.274026127556284E-5	DESIGN
no existing row - do an insert	WITHOUT_CLASSIFICATION	0.9999623328476489	WITHOUT_CLASSIFICATION	3.766715235107308E-5	DESIGN
refresh() does not pass an entityName	WITHOUT_CLASSIFICATION	0.9999821382600329	WITHOUT_CLASSIFICATION	1.7861739966999273E-5	DESIGN
do not return a proxy! (this option indicates we are initializing a proxy)	WITHOUT_CLASSIFICATION	0.9999696499404392	WITHOUT_CLASSIFICATION	3.0350059560830842E-5	DESIGN
return a proxy if appropriate	WITHOUT_CLASSIFICATION	0.9993291886314434	WITHOUT_CLASSIFICATION	6.708113685566786E-4	DESIGN
return existing object or initialized proxy (unless deleted)	WITHOUT_CLASSIFICATION	0.9999999294833212	WITHOUT_CLASSIFICATION	7.051667886881427E-8	DESIGN
return new uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999988675166052	WITHOUT_CLASSIFICATION	1.1324833948554623E-6	DESIGN
this object was already loaded	WITHOUT_CLASSIFICATION	0.9793177588511719	WITHOUT_CLASSIFICATION	0.020682241148828127	DESIGN
Entity was found in second-level cache...	WITHOUT_CLASSIFICATION	0.9959964176143353	WITHOUT_CLASSIFICATION	0.0040035823856646585	DESIGN
make it circular-reference safe	WITHOUT_CLASSIFICATION	0.9999999756395356	WITHOUT_CLASSIFICATION	2.436046442260795E-8	DESIGN
intializes result by side-effect	WITHOUT_CLASSIFICATION	0.9999999377562433	WITHOUT_CLASSIFICATION	6.224375671587725E-8	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Pre-flushing section ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999960095887803	WITHOUT_CLASSIFICATION	3.990411219660032E-6	DESIGN
some statistics	WITHOUT_CLASSIFICATION	0.9999838088074307	WITHOUT_CLASSIFICATION	1.6191192569312213E-5	DESIGN
safe from concurrent modification because of how entryList() is implemented on IdentityMap	WITHOUT_CLASSIFICATION	0.9999571797784157	WITHOUT_CLASSIFICATION	4.282022158441302E-5	DESIGN
Initialize dirty flags for arrays + collections with composite elements and reset reached, doupdate, etc.	WITHOUT_CLASSIFICATION	0.9999999993452803	WITHOUT_CLASSIFICATION	6.547198148347689E-10	DESIGN
Among other things, updateReachables() will recursively load all collections that are moving roles. This might cause entities to be loaded.	WITHOUT_CLASSIFICATION	0.9999428168063509	WITHOUT_CLASSIFICATION	5.718319364910275E-5	DESIGN
So this needs to be safe from concurrent modification problems. It is safe because of how IdentityMap implements entrySet()	WITHOUT_CLASSIFICATION	0.9902493867009485	DESIGN	0.00975061329905141	WITHOUT_CLASSIFICATION
Update the status of the object and if necessary, schedule an update	WITHOUT_CLASSIFICATION	0.9999848294776262	WITHOUT_CLASSIFICATION	1.5170522373884903E-5	DESIGN
Schedule updates to collections:	WITHOUT_CLASSIFICATION	0.9999996404905285	WITHOUT_CLASSIFICATION	3.5950947155294857E-7	DESIGN
we need to lock the collection caches before executing entity inserts/updates in order to account for bidi associations	WITHOUT_CLASSIFICATION	0.9989789622644326	WITHOUT_CLASSIFICATION	0.0010210377355673991	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Post-flushing section ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999997979212601	WITHOUT_CLASSIFICATION	2.020787399090765E-6	DESIGN
the database has changed now, so the subselect results need to be invalidated	WITHOUT_CLASSIFICATION	0.9999997907157635	WITHOUT_CLASSIFICATION	2.0928423646159713E-7	DESIGN
if the collection is dereferenced, remove from the session cache iter.remove(); does not work, since the entrySet is not backed by the set	WITHOUT_CLASSIFICATION	0.999999996389708	WITHOUT_CLASSIFICATION	3.6102918329308453E-9	DESIGN
otherwise recreate the mapping between the collection and its key	WITHOUT_CLASSIFICATION	0.9999868148166363	WITHOUT_CLASSIFICATION	1.3185183363712726E-5	DESIGN
get a snapshot	WITHOUT_CLASSIFICATION	0.999978564113705	WITHOUT_CLASSIFICATION	2.1435886294941207E-5	DESIGN
package-private	WITHOUT_CLASSIFICATION	0.999927502259892	WITHOUT_CLASSIFICATION	7.249774010795098E-5	DESIGN
package-private	WITHOUT_CLASSIFICATION	0.999927502259892	WITHOUT_CLASSIFICATION	7.249774010795098E-5	DESIGN
key is an entity involved with the operation performed by the listener; value is a flag indicating if the listener explicitly operates on the entity	WITHOUT_CLASSIFICATION	0.999999962875599	WITHOUT_CLASSIFICATION	3.712440103618962E-8	DESIGN
EARLY EXIT!!!	WITHOUT_CLASSIFICATION	0.9999807382771	WITHOUT_CLASSIFICATION	1.9261722899956026E-5	DESIGN
ie. the entity came in from update()	WITHOUT_CLASSIFICATION	0.9999296320661375	WITHOUT_CLASSIFICATION	7.036793386248298E-5	DESIGN
before any callbacks, etc, so subdeletions see that this deletion happened first	WITHOUT_CLASSIFICATION	0.9999987761108888	WITHOUT_CLASSIFICATION	1.2238891111904967E-6	DESIGN
Ensures that containing deletions happen before sub-deletions	WITHOUT_CLASSIFICATION	0.9999999807468342	WITHOUT_CLASSIFICATION	1.9253165797162205E-8	DESIGN
TypeFactory.deepCopy( currentState, propTypes, persister.getPropertyUpdateability(), deletedState, session );	WITHOUT_CLASSIFICATION	0.9999998954952899	WITHOUT_CLASSIFICATION	1.0450471019790369E-7	DESIGN
cascade-delete to collections BEFORE the collection owner is deleted	WITHOUT_CLASSIFICATION	0.9999996490096781	WITHOUT_CLASSIFICATION	3.5099032190671515E-7	DESIGN
cascade-delete to many-to-one AFTER the parent was deleted	WITHOUT_CLASSIFICATION	0.9998879891685456	WITHOUT_CLASSIFICATION	1.1201083145447354E-4	DESIGN
if it is an initialized proxy, let cascade handle it later on	WITHOUT_CLASSIFICATION	0.9999968309943935	WITHOUT_CLASSIFICATION	3.16900560659029E-6	DESIGN
assign the requested id to the proxy, before reassociating the proxy	WITHOUT_CLASSIFICATION	0.9999608942667628	WITHOUT_CLASSIFICATION	3.910573323712184E-5	DESIGN
an uninitialized proxy, noop, don't even need to return an id, since it is never a save()	WITHOUT_CLASSIFICATION	0.9999999846139594	WITHOUT_CLASSIFICATION	1.538604051625226E-8	DESIGN
initialize properties of the event:	WITHOUT_CLASSIFICATION	0.9999997625531084	WITHOUT_CLASSIFICATION	2.3744689161926353E-7	DESIGN
return the id in the event object	WITHOUT_CLASSIFICATION	0.999882731283356	WITHOUT_CLASSIFICATION	1.1726871664400739E-4	DESIGN
TRANSIENT or DELETED	WITHOUT_CLASSIFICATION	0.9999990311959549	WITHOUT_CLASSIFICATION	9.688040451367076E-7	DESIGN
use the id assigned to the instance	WITHOUT_CLASSIFICATION	0.9999931022843607	WITHOUT_CLASSIFICATION	6.8977156393621436E-6	DESIGN
assume this is a newly instantiated transient object which should be saved rather than updated	WITHOUT_CLASSIFICATION	0.9954845707629164	DESIGN	0.0045154292370836145	WITHOUT_CLASSIFICATION
this is a transient object with existing persistent state not loaded by the session	WITHOUT_CLASSIFICATION	0.9994416495260725	WITHOUT_CLASSIFICATION	5.583504739275873E-4	DESIGN
a collection loaded in the current session can not possibly be the collection belonging to the entity passed to update()	WITHOUT_CLASSIFICATION	0.999997741684934	WITHOUT_CLASSIFICATION	2.258315065877352E-6	DESIGN
cachedState,	WITHOUT_CLASSIFICATION	0.9999732393187196	WITHOUT_CLASSIFICATION	2.676068128043809E-5	DESIGN
assume true, since we don't really know, and it doesn't matter	WITHOUT_CLASSIFICATION	0.9999939310445821	WITHOUT_CLASSIFICATION	6.0689554177903616E-6	DESIGN
a "detached" collection!	WITHOUT_CLASSIFICATION	0.9997842349575975	WITHOUT_CLASSIFICATION	2.1576504240255773E-4	DESIGN
if the collection belonged to a different entity, clean up the existing state of the collection	WITHOUT_CLASSIFICATION	0.9999471928313106	WITHOUT_CLASSIFICATION	5.280716868941401E-5	DESIGN
log.debug( "calling onLoad()" );	WITHOUT_CLASSIFICATION	0.9999999023471648	WITHOUT_CLASSIFICATION	9.765283522653388E-8	DESIGN
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.999995451139886	WITHOUT_CLASSIFICATION	4.548860114026596E-6	DESIGN
note: performExecutions() clears all collectionXxxxtion collections (the collection actions) in the session	WITHOUT_CLASSIFICATION	0.9993634177726964	WITHOUT_CLASSIFICATION	6.365822273035541E-4	DESIGN
if no array holder we found an unwrappered array (this can't occur, because we now always call wrap() before getting to here) return (ah==null) ? true : searchForDirtyCollections(ah, type);	WITHOUT_CLASSIFICATION	0.9997772633961048	WITHOUT_CLASSIFICATION	2.2273660389524446E-4	DESIGN
if not wrappered yet, its dirty (this can't occur, because we now always call wrap() before getting to here) return ( ! (obj instanceof PersistentCollection) ) ? true : searchForDirtyCollections( (PersistentCollection) obj, type );	WITHOUT_CLASSIFICATION	0.8816382131572166	DESIGN	0.11836178684278335	WITHOUT_CLASSIFICATION
we need to check even if it was not initialized, because of delayed adds!	WITHOUT_CLASSIFICATION	0.9999943751340205	WITHOUT_CLASSIFICATION	5.624865979567903E-6	DESIGN
NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.99994203353622	WITHOUT_CLASSIFICATION	5.796646377987851E-5	DESIGN
find any entities that are still transient after retry	WITHOUT_CLASSIFICATION	0.9999253299456213	WITHOUT_CLASSIFICATION	7.467005437861815E-5	DESIGN
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.999995451139886	WITHOUT_CLASSIFICATION	4.548860114026596E-6	DESIGN
Check the persistence context for an entry relating to this entity to be merged...	WITHOUT_CLASSIFICATION	0.9996361895857522	WITHOUT_CLASSIFICATION	3.6381041424782837E-4	DESIGN
we have specialized case of a detached entity from the perspective of the merge operation. Specifically, we have an incoming entity instance which has a corresponding entry in the current persistence context, but registered under a different entity instance	WITHOUT_CLASSIFICATION	0.9998170813787722	WITHOUT_CLASSIFICATION	1.829186212276986E-4	DESIGN
DELETED	WITHOUT_CLASSIFICATION	0.9999653323898354	WITHOUT_CLASSIFICATION	3.466761016464779E-5	DESIGN
before cascade!	WITHOUT_CLASSIFICATION	0.9999773015931558	WITHOUT_CLASSIFICATION	2.2698406844298738E-5	DESIGN
cascade first, so that all unsaved objects get their copy created before we actually copy cascadeOnMerge(event, persister, entity, copyCache, Cascades.CASCADE_BEFORE_MERGE);	WITHOUT_CLASSIFICATION	0.9999999352857397	WITHOUT_CLASSIFICATION	6.471426025510653E-8	DESIGN
this bit is only really absolutely necessary for handling requestedId, but is also good if we merge multiple object graphs, since it helps ensure uniqueness	WITHOUT_CLASSIFICATION	0.5799224359740712	WITHOUT_CLASSIFICATION	0.42007756402592883	DESIGN
continue...; we'll find out if it ends up not getting saved later	WITHOUT_CLASSIFICATION	0.9993734821972197	WITHOUT_CLASSIFICATION	6.265178027803987E-4	DESIGN
cascade first, so that all unsaved objects get their copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999965330420066	WITHOUT_CLASSIFICATION	3.466957993351873E-6	DESIGN
check that entity id = requestedId	WITHOUT_CLASSIFICATION	0.9999832531462939	WITHOUT_CLASSIFICATION	1.674685370620263E-5	DESIGN
before cascade!	WITHOUT_CLASSIFICATION	0.9999773015931558	WITHOUT_CLASSIFICATION	2.2698406844298738E-5	DESIGN
we got here because we assumed that an instance with an assigned id was detached, when it was really persistent	WITHOUT_CLASSIFICATION	0.9999978444368474	WITHOUT_CLASSIFICATION	2.1555631526286428E-6	DESIGN
cascade first, so that all unsaved objects get their copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999965330420066	WITHOUT_CLASSIFICATION	3.466957993351873E-6	DESIGN
copyValues works by reflection, so explicitly mark the entity instance dirty	WITHOUT_CLASSIFICATION	0.999624448560878	WITHOUT_CLASSIFICATION	3.7555143912205335E-4	DESIGN
EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999948601367111	WITHOUT_CLASSIFICATION	5.139863288838421E-6	DESIGN
source.getBatcher().executeBatch(); found another way to ensure that all batched joined inserts have been executed	WITHOUT_CLASSIFICATION	0.9999991067238911	WITHOUT_CLASSIFICATION	8.932761089974042E-7	DESIGN
substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.999990072189007	WITHOUT_CLASSIFICATION	9.92781099303146E-6	DESIGN
now done in EntityIdentityInsertAction persister.setIdentifier( entity, id, source.getEntityMode() );	WITHOUT_CLASSIFICATION	0.9999997987362188	WITHOUT_CLASSIFICATION	2.012637810998993E-7	DESIGN
source.getPersistenceContext().removeNonExist( new EntityKey( id, persister, source.getEntityMode() ) );	WITHOUT_CLASSIFICATION	0.9999982348330774	WITHOUT_CLASSIFICATION	1.7651669226133515E-6	DESIGN
keep the existing version number in the case of replicate!	WITHOUT_CLASSIFICATION	0.9999909214015025	WITHOUT_CLASSIFICATION	9.078598497450154E-6	DESIGN
cascade-save to many-to-one BEFORE the parent is saved	WITHOUT_CLASSIFICATION	0.9958791617866259	WITHOUT_CLASSIFICATION	0.004120838213373998	DESIGN
pass this as an argument only to avoid double looking	WITHOUT_CLASSIFICATION	0.9999996429705686	WITHOUT_CLASSIFICATION	3.570294313590245E-7	DESIGN
the object is persistent	WITHOUT_CLASSIFICATION	0.9998577273449206	WITHOUT_CLASSIFICATION	1.4227265507948825E-4	DESIGN
the entity is associated with the session, so check its status	WITHOUT_CLASSIFICATION	0.9998324798943252	WITHOUT_CLASSIFICATION	1.6752010567471805E-4	DESIGN
do nothing for persistent instances	WITHOUT_CLASSIFICATION	0.9999987004257664	WITHOUT_CLASSIFICATION	1.2995742335455634E-6	DESIGN
ie. e.status==DELETED	WITHOUT_CLASSIFICATION	0.9999856721075758	WITHOUT_CLASSIFICATION	1.4327892424054665E-5	DESIGN
the object is transient or detached	WITHOUT_CLASSIFICATION	0.9999388437880715	WITHOUT_CLASSIFICATION	6.115621192852228E-5	DESIGN
NOTE EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999944900147979	WITHOUT_CLASSIFICATION	5.5099852020842765E-6	DESIGN
Private constructor - stops checkstyle from complaining.	WITHOUT_CLASSIFICATION	0.9999786724261042	WITHOUT_CLASSIFICATION	2.132757389579766E-5	DESIGN
First, try to find a matching constructor accepting a ViolatedConstraintNameExtracter param...	WITHOUT_CLASSIFICATION	0.9999768385806052	WITHOUT_CLASSIFICATION	2.3161419394846394E-5	DESIGN
eat it and try next	WITHOUT_CLASSIFICATION	0.9992395186867091	WITHOUT_CLASSIFICATION	7.604813132908509E-4	DESIGN
Otherwise, try to use the no-arg constructor	WITHOUT_CLASSIFICATION	0.9999971895815996	WITHOUT_CLASSIFICATION	2.8104184004097514E-6	DESIGN
oracle sql-state code for deadlock	WITHOUT_CLASSIFICATION	0.9997434907538663	WITHOUT_CLASSIFICATION	2.5650924613372254E-4	DESIGN
CollectionPropertyMapping processes everything except 'index'.	WITHOUT_CLASSIFICATION	0.9999964367070338	WITHOUT_CLASSIFICATION	3.5632929663115467E-6	DESIGN
remove initial ", "	WITHOUT_CLASSIFICATION	0.9999986639613234	WITHOUT_CLASSIFICATION	1.3360386766264225E-6	DESIGN
remove initial " and "	WITHOUT_CLASSIFICATION	0.9999897240851334	WITHOUT_CLASSIFICATION	1.0275914866641742E-5	DESIGN
beforeClassTokens.add("new"); DEFINITELY DON'T HAVE THIS!!	WITHOUT_CLASSIFICATION	0.9999924373456088	WITHOUT_CLASSIFICATION	7.5626543912587684E-6	DESIGN
notAfterClassTokens.add(",");	WITHOUT_CLASSIFICATION	0.9999980905364354	WITHOUT_CLASSIFICATION	1.9094635645252977E-6	DESIGN
just especially for the trivial collection filter	WITHOUT_CLASSIFICATION	0.9999995665082836	WITHOUT_CLASSIFICATION	4.3349171644724973E-7	DESIGN
update last non-whitespace token, if necessary	WITHOUT_CLASSIFICATION	0.99999972063127	WITHOUT_CLASSIFICATION	2.793687300814921E-7	DESIGN
select-range is terminated by declaration of "from"	WITHOUT_CLASSIFICATION	0.9999875908995502	WITHOUT_CLASSIFICATION	1.240910044972497E-5	DESIGN
scan for next non-whitespace token	WITHOUT_CLASSIFICATION	0.999999616150092	WITHOUT_CLASSIFICATION	3.8384990797632773E-7	DESIGN
Note this!!	WITHOUT_CLASSIFICATION	0.996947635574661	WITHOUT_CLASSIFICATION	0.0030523644253388996	DESIGN
Error message constants.	WITHOUT_CLASSIFICATION	0.9999983092215216	WITHOUT_CLASSIFICATION	1.6907784784325868E-6	DESIGN
handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998478231085	WITHOUT_CLASSIFICATION	1.52176891497258E-7	DESIGN
semantic action handling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9978612135748155	WITHOUT_CLASSIFICATION	0.002138786425184456	DESIGN
Handle collection-fiter compilation. IMPORTANT NOTE: This is modifying the INPUT (HQL) tree, not the output tree!	WITHOUT_CLASSIFICATION	0.870161317466296	WITHOUT_CLASSIFICATION	0.12983868253370393	DESIGN
Show the modified AST.	WITHOUT_CLASSIFICATION	0.9999370265780715	WITHOUT_CLASSIFICATION	6.297342192849312E-5	DESIGN
Create a parameter specification for the collection filter...	WITHOUT_CLASSIFICATION	0.9999902941410961	WITHOUT_CLASSIFICATION	9.70585890390361E-6	DESIGN
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999993520086513	WITHOUT_CLASSIFICATION	6.479913486537026E-7	DESIGN
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999993520086513	WITHOUT_CLASSIFICATION	6.479913486537026E-7	DESIGN
Get the names of the columns used to link between the collection owner and the collection elements.	WITHOUT_CLASSIFICATION	0.9999382600885789	WITHOUT_CLASSIFICATION	6.173991142113081E-5	DESIGN
The path AST should be a DotNode, and it should have been evaluated already.	WITHOUT_CLASSIFICATION	0.9998399459995071	WITHOUT_CLASSIFICATION	1.600540004928287E-4	DESIGN
Tell the dot node about the join type.	WITHOUT_CLASSIFICATION	0.9999998271301986	WITHOUT_CLASSIFICATION	1.7286980125760557E-7	DESIGN
Re-arrange the tree so that the collection function is the root and the lhs is the path.	WITHOUT_CLASSIFICATION	0.9999987193414013	WITHOUT_CLASSIFICATION	1.280658598703296E-6	DESIGN
Don't forget to resolve the argument! Resolve the collection function now.	WITHOUT_CLASSIFICATION	0.9999550289545295	WITHOUT_CLASSIFICATION	4.4971045470550644E-5	DESIGN
Resolve everything up to this dot, but don't resolve the placeholders yet.	WITHOUT_CLASSIFICATION	0.9122646629058708	WITHOUT_CLASSIFICATION	0.08773533709412921	DESIGN
Should mean that no such property was found	WITHOUT_CLASSIFICATION	0.9975152231623586	WITHOUT_CLASSIFICATION	0.0024847768376412495	DESIGN
Was there an explicit select expression?	WITHOUT_CLASSIFICATION	0.9999359583663089	WITHOUT_CLASSIFICATION	6.404163369115443E-5	DESIGN
Attach any mapping-defined "ORDER BY" fragments	WITHOUT_CLASSIFICATION	0.9999961737630347	WITHOUT_CLASSIFICATION	3.826236965343946E-6	DESIGN
Use the explicitly declared select expression; determine the return types indicated by each select token	WITHOUT_CLASSIFICATION	0.9999993252260667	WITHOUT_CLASSIFICATION	6.747739332762571E-7	DESIGN
After that, process the JOINs. Invoke a delegate to do the work, as this is farily complex.	WITHOUT_CLASSIFICATION	0.9999999056182772	WITHOUT_CLASSIFICATION	9.438172270018752E-8	DESIGN
Make #@%$^#^&# sure no alias is applied to the table name	WITHOUT_CLASSIFICATION	0.9999995926524999	WITHOUT_CLASSIFICATION	4.0734750012308753E-7	DESIGN
We need to generate ids as part of this bulk insert. Note that this is only supported for sequence-style generators and post-insert-style generators; basically, only in-db generators	WITHOUT_CLASSIFICATION	0.9999825607755524	WITHOUT_CLASSIFICATION	1.743922444759245E-5	DESIGN
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999993520086513	WITHOUT_CLASSIFICATION	6.479913486537026E-7	DESIGN
We need to seed the version value as part of this bulk insert	WITHOUT_CLASSIFICATION	0.9999555413410662	WITHOUT_CLASSIFICATION	4.445865893373022E-5	DESIGN
we need to wrtap the param in a cast()	WITHOUT_CLASSIFICATION	0.9991783123886313	WITHOUT_CLASSIFICATION	8.216876113686608E-4	DESIGN
This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.999179966035094	WITHOUT_CLASSIFICATION	8.200339649059539E-4	DESIGN
Generate implicit joins, only if necessary.	WITHOUT_CLASSIFICATION	0.9999633933054394	WITHOUT_CLASSIFICATION	3.660669456060676E-5	DESIGN
Notify the FROM element that it is being referenced by the select.	WITHOUT_CLASSIFICATION	0.9999923889068204	WITHOUT_CLASSIFICATION	7.611093179573436E-6	DESIGN
Turn off includeSubclasses on all FromElements.	WITHOUT_CLASSIFICATION	0.9999854807003679	WITHOUT_CLASSIFICATION	1.4519299632037507E-5	DESIGN
create the node initially with the param name so that it shows appropriately in the "original text" attribute	WITHOUT_CLASSIFICATION	0.9997379099873952	WITHOUT_CLASSIFICATION	2.6209001260478633E-4	DESIGN
Use the delegate, resolve identifiers as FROM element aliases.	WITHOUT_CLASSIFICATION	0.9999959914882355	WITHOUT_CLASSIFICATION	4.0085117644106404E-6	DESIGN
select clauses for insert statements should alwasy be treated as shallow	WITHOUT_CLASSIFICATION	0.997815287945838	WITHOUT_CLASSIFICATION	0.0021847120541619485	DESIGN
no need to even collect this information if the persister is considered multi-table	WITHOUT_CLASSIFICATION	0.9995561565849865	WITHOUT_CLASSIFICATION	4.438434150134478E-4	DESIGN
Make sure that the persister is versioned	WITHOUT_CLASSIFICATION	0.999920108499946	WITHOUT_CLASSIFICATION	7.989150005402722E-5	DESIGN
handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998478231085	WITHOUT_CLASSIFICATION	1.52176891497258E-7	DESIGN
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999993520086513	WITHOUT_CLASSIFICATION	6.479913486537026E-7	DESIGN
--Commented out by Inspection (12/11/04 10:56 AM): int getWarningCount();	WITHOUT_CLASSIFICATION	0.9999999683488435	WITHOUT_CLASSIFICATION	3.165115651674344E-8	DESIGN
Alias references and identifiers use the same node class.	WITHOUT_CLASSIFICATION	0.9999996129500189	WITHOUT_CLASSIFICATION	3.8704998102310515E-7	DESIGN
switch	WITHOUT_CLASSIFICATION	0.9999346577693577	WITHOUT_CLASSIFICATION	6.53422306422514E-5	DESIGN
make a new one	WITHOUT_CLASSIFICATION	0.9999851399230407	WITHOUT_CLASSIFICATION	1.4860076959293557E-5	DESIGN
just do the regular thing if you can't find the ctor Your AST must have default ctor to use this.	WITHOUT_CLASSIFICATION	0.9924136779653877	WITHOUT_CLASSIFICATION	0.0075863220346122995	DESIGN
Initialize SQL nodes here.	WITHOUT_CLASSIFICATION	0.9999997567411402	WITHOUT_CLASSIFICATION	2.432588598116934E-7	DESIGN
semantic action processing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998818437863793	WITHOUT_CLASSIFICATION	1.1815621362068424E-4	DESIGN
if template is null we just write the function out as it appears in the hql statement	WITHOUT_CLASSIFICATION	0.9999999816081058	WITHOUT_CLASSIFICATION	1.8391894282550232E-8	DESIGN
this function has a template -> redirect output and catch the arguments	WITHOUT_CLASSIFICATION	0.9999977338914303	WITHOUT_CLASSIFICATION	2.2661085697786167E-6	DESIGN
--- Inner classes (moved here from sql-gen.g) ---	WITHOUT_CLASSIFICATION	0.9999925098545202	WITHOUT_CLASSIFICATION	7.4901454798781224E-6	DESIGN
check two "adjecent" nodes at the top of the from-clause tree	WITHOUT_CLASSIFICATION	0.9999978838576298	WITHOUT_CLASSIFICATION	2.1161423702508858E-6	DESIGN
/	WITHOUT_CLASSIFICATION	0.9999087176347056	WITHOUT_CLASSIFICATION	9.128236529439574E-5	DESIGN
these are just two unrelated table references	WITHOUT_CLASSIFICATION	0.9999892826845455	WITHOUT_CLASSIFICATION	1.071731545460636E-5	DESIGN
again, both should be FromElements	WITHOUT_CLASSIFICATION	0.9999244857897235	WITHOUT_CLASSIFICATION	7.551421027652846E-5	DESIGN
NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9999157664694376	WITHOUT_CLASSIFICATION	8.423353056240181E-5	DESIGN
right represents a joins originating from left; or both right and left reprersent joins originating from the same FromElement	WITHOUT_CLASSIFICATION	0.9999995973601492	WITHOUT_CLASSIFICATION	4.0263985080797377E-7	DESIGN
check a set of parent/child nodes in the from-clause tree to determine if a comma is required between them	WITHOUT_CLASSIFICATION	0.999998828184544	WITHOUT_CLASSIFICATION	1.1718154560073771E-6	DESIGN
right represents a joins originating from left...	WITHOUT_CLASSIFICATION	0.9999996320875524	WITHOUT_CLASSIFICATION	3.6791244751966864E-7	DESIGN
all clear	WITHOUT_CLASSIFICATION	0.9999983933921831	WITHOUT_CLASSIFICATION	1.6066078169014592E-6	DESIGN
Ignore the token class name parameter, and use a specific token class.	WITHOUT_CLASSIFICATION	0.9999999510247694	WITHOUT_CLASSIFICATION	4.897523060661044E-8	DESIGN
overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9998059785990703	WITHOUT_CLASSIFICATION	1.9402140092975934E-4	DESIGN
overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9998059785990703	WITHOUT_CLASSIFICATION	1.9402140092975934E-4	DESIGN
remember that ordinal parameters numbers are 1-based!!!	WITHOUT_CLASSIFICATION	0.9965045907301022	WITHOUT_CLASSIFICATION	0.0034954092698977223	DESIGN
don't care about other param types here, just those explicitly user-defined...	WITHOUT_CLASSIFICATION	0.9997401388515375	WITHOUT_CLASSIFICATION	2.598611484626363E-4	DESIGN
If the query is already compiled, skip the compilation.	WITHOUT_CLASSIFICATION	0.9999997273626866	WITHOUT_CLASSIFICATION	2.7263731339945823E-7	DESIGN
Remember the parameters for the compilation.	WITHOUT_CLASSIFICATION	0.9999592911769803	WITHOUT_CLASSIFICATION	4.070882301967353E-5	DESIGN
PHASE 1 : Parse the HQL into an AST.	WITHOUT_CLASSIFICATION	0.9999793074894621	WITHOUT_CLASSIFICATION	2.0692510537924932E-5	DESIGN
PHASE 2 : Analyze the HQL AST, and produce an SQL AST.	WITHOUT_CLASSIFICATION	0.9999991756745947	WITHOUT_CLASSIFICATION	8.243254051648201E-7	DESIGN
PHASE 3 : Generate the SQL.	WITHOUT_CLASSIFICATION	0.9968124305862782	WITHOUT_CLASSIFICATION	0.003187569413721661	DESIGN
we do not actually propogate ANTLRExceptions as a cause, so log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9999999972287543	WITHOUT_CLASSIFICATION	2.7712455648111285E-9	DESIGN
we do not actually propogate ANTLRExceptions as a cause, so log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9999999972287543	WITHOUT_CLASSIFICATION	2.7712455648111285E-9	DESIGN
only needed during compilation phase...	WITHOUT_CLASSIFICATION	0.9999976769419084	WITHOUT_CLASSIFICATION	2.3230580915134535E-6	DESIGN
Transform the tree.	WITHOUT_CLASSIFICATION	0.9999980200569177	WITHOUT_CLASSIFICATION	1.979943082247002E-6	DESIGN
Parse the query string into an HQL AST.	WITHOUT_CLASSIFICATION	0.9999888485678667	WITHOUT_CLASSIFICATION	1.1151432133392572E-5	DESIGN
Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999176386945853	WITHOUT_CLASSIFICATION	8.236130541466356E-5	DESIGN
Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999176386945853	WITHOUT_CLASSIFICATION	8.236130541466356E-5	DESIGN
Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999176386945853	WITHOUT_CLASSIFICATION	8.236130541466356E-5	DESIGN
NOTE : ( max - 1 ) because first is zero-based while max is not...	WITHOUT_CLASSIFICATION	0.9999978868744395	WITHOUT_CLASSIFICATION	2.1131255605458536E-6	DESIGN
-- Package local methods for the QueryLoader delegate --	WITHOUT_CLASSIFICATION	0.9994996574299392	WITHOUT_CLASSIFICATION	5.003425700608695E-4	DESIGN
If there are no collection fetches, then no further checks are needed	WITHOUT_CLASSIFICATION	0.9999998575343096	WITHOUT_CLASSIFICATION	1.4246569039254528E-7	DESIGN
A shallow query is ok (although technically there should be no fetching here...)	WITHOUT_CLASSIFICATION	0.9989286087532954	WITHOUT_CLASSIFICATION	0.0010713912467046557	DESIGN
should be the first, but just to be safe...	WITHOUT_CLASSIFICATION	0.9999539042492852	WITHOUT_CLASSIFICATION	4.609575071475698E-5	DESIGN
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999993520086513	WITHOUT_CLASSIFICATION	6.479913486537026E-7	DESIGN
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999993520086513	WITHOUT_CLASSIFICATION	6.479913486537026E-7	DESIGN
Impl Note: allows multiple collection fetches as long as the entire fecthed graph still "points back" to a single root entity for return	WITHOUT_CLASSIFICATION	0.9967217261951259	WITHOUT_CLASSIFICATION	0.0032782738048742167	DESIGN
Otherwise, we have a non-scalar select with defined collection fetch(es). Make sure that there is only a single root entity in the return (no tuples)	WITHOUT_CLASSIFICATION	0.9964229552625549	WITHOUT_CLASSIFICATION	0.003577044737445146	DESIGN
This is not strictly true. We actually just need to make sure that it is ordered by root-entity PK and that that order-by comes before any non-root-entity ordering...	WITHOUT_CLASSIFICATION	0.9985112189245372	WITHOUT_CLASSIFICATION	0.0014887810754627697	DESIGN
paramTranslations = new ParameterTranslationsImpl( collectedParameterSpecifications );	WITHOUT_CLASSIFICATION	0.9999992673305319	WITHOUT_CLASSIFICATION	7.326694681440083E-7	DESIGN
we are already processing a dot-structure	WITHOUT_CLASSIFICATION	0.9999463161049797	WITHOUT_CLASSIFICATION	5.368389502029684E-5	DESIGN
igndore it...	WITHOUT_CLASSIFICATION	0.999763585725685	WITHOUT_CLASSIFICATION	2.3641427431486054E-4	DESIGN
we are now at a new tree level	WITHOUT_CLASSIFICATION	0.9999897532759866	WITHOUT_CLASSIFICATION	1.02467240133755E-5	DESIGN
[jsd] The fix for HHH-558...	WITHOUT_CLASSIFICATION	0.9973758149213292	WITHOUT_CLASSIFICATION	0.002624185078670822	DESIGN
If the token can tell us if it could be an identifier...	WITHOUT_CLASSIFICATION	0.9997215196957079	WITHOUT_CLASSIFICATION	2.7848030429204073E-4	DESIGN
... and the expected token type was an identifier, then:	WITHOUT_CLASSIFICATION	0.9999952406512971	WITHOUT_CLASSIFICATION	4.759348702860237E-6	DESIGN
Use the token as an identifier.	WITHOUT_CLASSIFICATION	0.9999998019026568	WITHOUT_CLASSIFICATION	1.98097343122406E-7	DESIGN
Add the token to the AST.	WITHOUT_CLASSIFICATION	0.9999901808295527	WITHOUT_CLASSIFICATION	9.819170447292157E-6	DESIGN
(NOT (EQ a b) ) => (NE a b)	WITHOUT_CLASSIFICATION	0.9999723845037881	WITHOUT_CLASSIFICATION	2.761549621179794E-5	DESIGN
(NOT (NE a b) ) => (EQ a b)	WITHOUT_CLASSIFICATION	0.9999723845037881	WITHOUT_CLASSIFICATION	2.761549621179794E-5	DESIGN
(NOT (LT a b) ) => (GE a b)	WITHOUT_CLASSIFICATION	0.9999663833363373	WITHOUT_CLASSIFICATION	3.361666366273044E-5	DESIGN
(NOT (GE a b) ) => (LT a b)	WITHOUT_CLASSIFICATION	0.9999663833363373	WITHOUT_CLASSIFICATION	3.361666366273044E-5	DESIGN
(NOT (LE a b) ) => (GT a b)	WITHOUT_CLASSIFICATION	0.9999842389286654	WITHOUT_CLASSIFICATION	1.5761071334647747E-5	DESIGN
(NOT (LIKE a b) ) => (NOT_LIKE a b)	WITHOUT_CLASSIFICATION	0.9999946780109858	WITHOUT_CLASSIFICATION	5.321989014120815E-6	DESIGN
(NOT (NOT_LIKE a b) ) => (LIKE a b)	WITHOUT_CLASSIFICATION	0.9999946780109858	WITHOUT_CLASSIFICATION	5.321989014120815E-6	DESIGN
(NOT (IS_NOT_NULL a b) ) => (IS_NULL a b)	WITHOUT_CLASSIFICATION	0.9999955132424897	WITHOUT_CLASSIFICATION	4.4867575102848955E-6	DESIGN
(NOT (BETWEEN a b) ) => (NOT_BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999791189963338	WITHOUT_CLASSIFICATION	2.08810036661252E-5	DESIGN
Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999996337759258	WITHOUT_CLASSIFICATION	3.662240742032815E-7	DESIGN
overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9998059785990703	WITHOUT_CLASSIFICATION	1.9402140092975934E-4	DESIGN
if if Otherwise, handle the error normally.	WITHOUT_CLASSIFICATION	0.9999984629795369	WITHOUT_CLASSIFICATION	1.5370204630878355E-6	DESIGN
(NOT (NOT_BETWEEN a b) ) => (BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999791189963338	WITHOUT_CLASSIFICATION	2.0881003666125165E-5	DESIGN
This can never happen because this rule will always eliminate the child NOT.case NOT:return x.getFirstChild(); (NOT (NOT x) ) => (x)	WITHOUT_CLASSIFICATION	0.9999927767925699	WITHOUT_CLASSIFICATION	7.2232074300972646E-6	DESIGN
Just add a 'not' parent.	WITHOUT_CLASSIFICATION	0.9978647870189984	WITHOUT_CLASSIFICATION	0.002135212981001728	DESIGN
(EQ NULL b) => (IS_NULL b)	WITHOUT_CLASSIFICATION	0.999999577762571	WITHOUT_CLASSIFICATION	4.222374290975912E-7	DESIGN
(EQ a NULL) => (IS_NULL a)	WITHOUT_CLASSIFICATION	0.9999990473450044	WITHOUT_CLASSIFICATION	9.526549955435009E-7	DESIGN
NOTE: Because we're using ASTUtil.createParent(), the tree must be created from the bottom up. IS EMPTY x => (EXISTS (QUERY (SELECT_FROM (FROM x) ) ) )	WITHOUT_CLASSIFICATION	0.9999996586201899	WITHOUT_CLASSIFICATION	3.413798100667539E-7	DESIGN
Add NOT if it's negated.	WITHOUT_CLASSIFICATION	0.9996865501168649	WITHOUT_CLASSIFICATION	3.1344988313505666E-4	DESIGN
Create nodes that track line and column number.	WITHOUT_CLASSIFICATION	0.9999904116969626	WITHOUT_CLASSIFICATION	9.588303037349119E-6	DESIGN
Case 1: Multi token keywords GROUP BY and ORDER BY The next token ( LT(2) ) should be 'by'... otherwise, this is just an ident.	WITHOUT_CLASSIFICATION	0.9809642551194102	WITHOUT_CLASSIFICATION	0.019035744880589688	DESIGN
Case 2: The current token is after FROM and before '.'.	WITHOUT_CLASSIFICATION	0.9999998218495143	WITHOUT_CLASSIFICATION	1.781504856904848E-7	DESIGN
This handles HHH-354, where there is a strange property name in a where clause. If the lookahead contains a DOT then something that isn't an IDENT...	WITHOUT_CLASSIFICATION	0.996719459017407	WITHOUT_CLASSIFICATION	0.003280540982593149	DESIGN
See if the second lookahed token can be an identifier.	WITHOUT_CLASSIFICATION	0.9999999594402654	WITHOUT_CLASSIFICATION	4.0559734610637316E-8	DESIGN
Set it!	WITHOUT_CLASSIFICATION	0.9999654905221049	WITHOUT_CLASSIFICATION	3.4509477894975706E-5	DESIGN
ignore	WITHOUT_CLASSIFICATION	0.9999951416255058	WITHOUT_CLASSIFICATION	4.858374494054211E-6	DESIGN
strip the " where "	WITHOUT_CLASSIFICATION	0.9999972045697172	WITHOUT_CLASSIFICATION	2.795430282734037E-6	DESIGN
Don't really know all the codes required to adequately decipher returned jdbc exceptions here. simply allow the failure to be eaten and the subsequent insert-selects/deletes should fail	WITHOUT_CLASSIFICATION	0.9998566785837906	WITHOUT_CLASSIFICATION	1.4332141620944497E-4	DESIGN
at the very least cleanup the data :)	WITHOUT_CLASSIFICATION	0.9996319890561622	WITHOUT_CLASSIFICATION	3.680109438377459E-4	DESIGN
First, save off the pertinent ids, as the return value	WITHOUT_CLASSIFICATION	0.9999999569628385	WITHOUT_CLASSIFICATION	4.303716154109679E-8	DESIGN
jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9998222536442576	WITHOUT_CLASSIFICATION	1.7774635574232349E-4	DESIGN
jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9998222536442576	WITHOUT_CLASSIFICATION	1.7774635574232349E-4	DESIGN
Start performing the updates	WITHOUT_CLASSIFICATION	0.9999031900568505	WITHOUT_CLASSIFICATION	9.680994314954146E-5	DESIGN
First, save off the pertinent ids, saving the number of pertinent ids for return	WITHOUT_CLASSIFICATION	0.9999998475834818	WITHOUT_CLASSIFICATION	1.524165182795659E-7	DESIGN
Start performing the deletes	WITHOUT_CLASSIFICATION	0.9999702661742866	WITHOUT_CLASSIFICATION	2.9733825713334524E-5	DESIGN
otherwise, everything ok.	WITHOUT_CLASSIFICATION	0.9994710532989665	WITHOUT_CLASSIFICATION	5.289467010335576E-4	DESIGN
visit width-first, then depth	WITHOUT_CLASSIFICATION	0.9997875102594747	WITHOUT_CLASSIFICATION	2.1248974052527611E-4	DESIGN
if the types report logical equivalence, return true...	WITHOUT_CLASSIFICATION	0.9999652487330845	WITHOUT_CLASSIFICATION	3.4751266915582864E-5	DESIGN
otherwise, perform a "deep equivalence" check...	WITHOUT_CLASSIFICATION	0.9933736033018057	WITHOUT_CLASSIFICATION	0.006626396698194301	DESIGN
If there is no WHERE node, make one.	WITHOUT_CLASSIFICATION	0.9999999649206361	WITHOUT_CLASSIFICATION	3.507936390028658E-8	DESIGN
inject the WHERE after the parent	WITHOUT_CLASSIFICATION	0.9999482222992611	WITHOUT_CLASSIFICATION	5.1777700738830455E-5	DESIGN
Never include subclasses for implied from elements.	WITHOUT_CLASSIFICATION	0.9998298785157989	WITHOUT_CLASSIFICATION	1.70121484201138E-4	DESIGN
Moved here from SelectClause [jsd]	WITHOUT_CLASSIFICATION	0.9998060438721323	WITHOUT_CLASSIFICATION	1.9395612786763614E-4	DESIGN
/	WITHOUT_CLASSIFICATION	0.9999087176347056	WITHOUT_CLASSIFICATION	9.128236529439574E-5	DESIGN
Use the table fromElement and the property name to get the array of column names.	WITHOUT_CLASSIFICATION	0.9999921012759372	WITHOUT_CLASSIFICATION	7.89872406277548E-6	DESIGN
Set the attributes of the property reference expression.	WITHOUT_CLASSIFICATION	0.9999992402754964	WITHOUT_CLASSIFICATION	7.597245036188828E-7	DESIGN
If the uresolved property path isn't set yet, just use the property name.	WITHOUT_CLASSIFICATION	0.999981160899454	WITHOUT_CLASSIFICATION	1.8839100545965444E-5	DESIGN
The 'from element' that the property is in.	WITHOUT_CLASSIFICATION	0.9999988809168997	WITHOUT_CLASSIFICATION	1.1190831003213534E-6	DESIGN
Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999997728732729	WITHOUT_CLASSIFICATION	2.2712672710652626E-7	DESIGN
Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999997728732729	WITHOUT_CLASSIFICATION	2.2712672710652626E-7	DESIGN
If this dot has already been resolved, stop now.	WITHOUT_CLASSIFICATION	0.9998347696547768	WITHOUT_CLASSIFICATION	1.6523034522315826E-4	DESIGN
If there is no data type for this node, and we're at the end of the path (top most dot node), then this might be a Java constant.	WITHOUT_CLASSIFICATION	0.9976537490374044	WITHOUT_CLASSIFICATION	0.002346250962595458	DESIGN
The property is a collection...	WITHOUT_CLASSIFICATION	0.9999964815990658	WITHOUT_CLASSIFICATION	3.518400934100643E-6	DESIGN
The property is a component...	WITHOUT_CLASSIFICATION	0.9999841852970016	WITHOUT_CLASSIFICATION	1.5814702998377784E-5	DESIGN
The property is another class..	WITHOUT_CLASSIFICATION	0.9999930678387317	WITHOUT_CLASSIFICATION	6.932161268254566E-6	DESIGN
Otherwise, this is a primitive type.	WITHOUT_CLASSIFICATION	0.9999929125155558	WITHOUT_CLASSIFICATION	7.0874844442947135E-6	DESIGN
foo.bars.size (also handles deprecated stuff like foo.bars.maxelement for backwardness)	WITHOUT_CLASSIFICATION	0.9999424885777723	WITHOUT_CLASSIFICATION	5.7511422227593816E-5	DESIGN
This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999915775674111	WITHOUT_CLASSIFICATION	8.422432588884452E-6	DESIGN
Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.999986293644168	WITHOUT_CLASSIFICATION	1.370635583203382E-5	DESIGN
in non-select queries, the only time we should need to join is if we are in a subquery from clause	WITHOUT_CLASSIFICATION	0.9999998949254806	WITHOUT_CLASSIFICATION	1.0507451939009992E-7	DESIGN
this is the regression style determination which matches the logic of the classic translator	WITHOUT_CLASSIFICATION	0.9993338471702159	WITHOUT_CLASSIFICATION	6.661528297841373E-4	DESIGN
This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999915775674111	WITHOUT_CLASSIFICATION	8.422432588884452E-6	DESIGN
even though we might find a pre-existing element by join path, we may not be able to reuse it...	WITHOUT_CLASSIFICATION	0.7185925606029548	WITHOUT_CLASSIFICATION	0.2814074393970452	DESIGN
NOTE : addDuplicateAlias() already performs nullness checks on the alias.	WITHOUT_CLASSIFICATION	0.9766552994987036	WITHOUT_CLASSIFICATION	0.02334470050129649	DESIGN
if the from-clauses are the same, we can be a little more aggressive in terms of what we reuse	WITHOUT_CLASSIFICATION	0.9992571910961741	WITHOUT_CLASSIFICATION	7.428089038259397E-4	DESIGN
again, null != null here	WITHOUT_CLASSIFICATION	0.9999989215591019	WITHOUT_CLASSIFICATION	1.0784408981371595E-6	DESIGN
If this is an implied join in a from element, then use the impled join type which is part of the tree parser's state (set by the gramamar actions).	WITHOUT_CLASSIFICATION	0.9999923114235836	WITHOUT_CLASSIFICATION	7.688576416520185E-6	DESIGN
otherwise (subquery case) dont reuse the fromElement if we are processing the from-clause of the subquery	WITHOUT_CLASSIFICATION	0.999999699985366	WITHOUT_CLASSIFICATION	3.0001463409589675E-7	DESIGN
we know only the lhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999980337777372	WITHOUT_CLASSIFICATION	1.9662222626894962E-6	DESIGN
the referenced node text is the special 'id'	WITHOUT_CLASSIFICATION	0.9999999921750634	WITHOUT_CLASSIFICATION	7.824936599363516E-9	DESIGN
only the identifier property field name can be a reference to the associated entity's PK...	WITHOUT_CLASSIFICATION	0.9984840885273831	WITHOUT_CLASSIFICATION	0.001515911472616795	DESIGN
special shortcut for id properties, skip the join! this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9977669610280081	WITHOUT_CLASSIFICATION	0.0022330389719918894	DESIGN
Append the new property name onto the unresolved path.	WITHOUT_CLASSIFICATION	0.9999315456134493	WITHOUT_CLASSIFICATION	6.845438655065217E-5	DESIGN
If the lhs is a collection, use CollectionPropertyMapping	WITHOUT_CLASSIFICATION	0.9999999391284334	WITHOUT_CLASSIFICATION	6.08715665258277E-8	DESIGN
Tell the destination fromElement to 'includeSubclasses'.	WITHOUT_CLASSIFICATION	0.9999975812935518	WITHOUT_CLASSIFICATION	2.418706448256649E-6	DESIGN
Use theta style (for regression) Move the node up, after the origin node.	WITHOUT_CLASSIFICATION	0.9999992526870994	WITHOUT_CLASSIFICATION	7.473129005262396E-7	DESIGN
Don't resolve the node again.	WITHOUT_CLASSIFICATION	0.9999699839473274	WITHOUT_CLASSIFICATION	3.001605267261889E-5	DESIGN
for expected parameter type injection, we expect that the lhs represents some form of property ref and that the children of the in-list represent one-or-more params.	WITHOUT_CLASSIFICATION	0.9999975185773178	WITHOUT_CLASSIFICATION	2.4814226822540997E-6	DESIGN
we need to strip off the embedded parens so that sql-gen does not double these up	WITHOUT_CLASSIFICATION	0.9999709094429934	WITHOUT_CLASSIFICATION	2.9090557006607363E-5	DESIGN
we have something like : "? [op] rhs"	WITHOUT_CLASSIFICATION	0.9975855410981118	WITHOUT_CLASSIFICATION	0.0024144589018882203	DESIGN
we have something like : "lhs [op] ?"	WITHOUT_CLASSIFICATION	0.9996799844700518	WITHOUT_CLASSIFICATION	3.2001552994809847E-4	DESIGN
we know only the rhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999977337002623	WITHOUT_CLASSIFICATION	2.266299737675552E-6	DESIGN
handle the (assumed) valid cases: #1 - the only valid datetime addition synatx is one or the other is a datetime (but not both)	WITHOUT_CLASSIFICATION	0.9999976845241489	WITHOUT_CLASSIFICATION	2.3154758509991393E-6	DESIGN
one or the other needs to be a datetime for us to get into this method in the first place...	WITHOUT_CLASSIFICATION	0.9494501640552524	DESIGN	0.05054983594474758	WITHOUT_CLASSIFICATION
#3 - note that this is also true of "datetime - :param"...	WITHOUT_CLASSIFICATION	0.9997605766779212	WITHOUT_CLASSIFICATION	2.3942332207878365E-4	DESIGN
#2	WITHOUT_CLASSIFICATION	0.9999351967549943	WITHOUT_CLASSIFICATION	6.48032450057201E-5	DESIGN
Generate the inner join -- The elements need to be joined to the collection they are in.	WITHOUT_CLASSIFICATION	0.9999999416993297	WITHOUT_CLASSIFICATION	5.830067040434052E-8	DESIGN
nothing to do	WITHOUT_CLASSIFICATION	0.9999391881217902	WITHOUT_CLASSIFICATION	6.0811878209889566E-5	DESIGN
The 'from element' that represents the elements of the collection.	WITHOUT_CLASSIFICATION	0.9999998471937619	WITHOUT_CLASSIFICATION	1.5280623806837876E-7	DESIGN
Add the condition to the join sequence that qualifies the indexed element.	WITHOUT_CLASSIFICATION	0.9999999964923442	WITHOUT_CLASSIFICATION	3.507655819929407E-9	DESIGN
Sometimes use the element table alias, sometimes use the... umm... collection table alias (many to many)	WITHOUT_CLASSIFICATION	0.9999990015343123	WITHOUT_CLASSIFICATION	9.98465687595767E-7	DESIGN
Now, set the text for this node. It should be the element columns.	WITHOUT_CLASSIFICATION	0.9818223163516107	WITHOUT_CLASSIFICATION	0.01817768364838927	DESIGN
Get the function return value type, based on the type of the first argument.	WITHOUT_CLASSIFICATION	0.9999999908993027	WITHOUT_CLASSIFICATION	9.100697294857876E-9	DESIGN
This will call initialize(tok)!	WITHOUT_CLASSIFICATION	0.9999923390105278	WITHOUT_CLASSIFICATION	7.660989472194505E-6	DESIGN
mutation depends on the types of nodes invloved...	WITHOUT_CLASSIFICATION	0.9999874262650658	WITHOUT_CLASSIFICATION	1.25737349342305E-5	DESIGN
"pass along" our initial embedded parameter node(s) to the first generated sql fragment so that it can be handled later for parameter binding...	WITHOUT_CLASSIFICATION	0.9999488380043038	WITHOUT_CLASSIFICATION	5.116199569622013E-5	DESIGN
logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9998823158046125	WITHOUT_CLASSIFICATION	1.1768419538739252E-4	DESIGN
Generated select expressions are already resolved, nothing to do.	WITHOUT_CLASSIFICATION	0.9999941200218972	WITHOUT_CLASSIFICATION	5.8799781028232965E-6	DESIGN
The path may be a reference to an alias defined in the parent query.	WITHOUT_CLASSIFICATION	0.9999585425226241	WITHOUT_CLASSIFICATION	4.145747737582698E-5	DESIGN
The HQL class alias refers to the class name.	WITHOUT_CLASSIFICATION	0.9999999799088324	WITHOUT_CLASSIFICATION	2.0091167692995765E-8	DESIGN
Associate the table alias with the element.	WITHOUT_CLASSIFICATION	0.9999997967830663	WITHOUT_CLASSIFICATION	2.0321693365681048E-7	DESIGN
try the parent FromClause...	WITHOUT_CLASSIFICATION	0.9999097874224001	WITHOUT_CLASSIFICATION	9.021257759990319E-5	DESIGN
Add the new node to the map so that we don't create it twice.	WITHOUT_CLASSIFICATION	0.999999888015827	WITHOUT_CLASSIFICATION	1.1198417301589322E-7	DESIGN
Make sure that all from elements registered with this FROM clause are actually in the AST.	WITHOUT_CLASSIFICATION	0.999998933706769	WITHOUT_CLASSIFICATION	1.0662932311066164E-6	DESIGN
Invoke setScalarColumnText on each constructor argument.	WITHOUT_CLASSIFICATION	0.9998665465082234	WITHOUT_CLASSIFICATION	1.3345349177659252E-4	DESIGN
Collect the select expressions, skip the first child because it is the class name.	WITHOUT_CLASSIFICATION	0.9999998459036477	WITHOUT_CLASSIFICATION	1.5409635232146273E-7	DESIGN
return an empty Type array	WITHOUT_CLASSIFICATION	0.9999639918257752	WITHOUT_CLASSIFICATION	3.600817422483652E-5	DESIGN
Constructors are always considered scalar results.	WITHOUT_CLASSIFICATION	0.9995158017255363	WITHOUT_CLASSIFICATION	4.8419827446365745E-4	DESIGN
this is the exception returned by ReflectHelper.getConstructor() if it cannot locate an appropriate constructor	WITHOUT_CLASSIFICATION	0.9999998445691711	WITHOUT_CLASSIFICATION	1.554308287814899E-7	DESIGN
if there is no order by, make one	WITHOUT_CLASSIFICATION	0.9999995067297309	WITHOUT_CLASSIFICATION	4.932702690847189E-7	DESIGN
Find the WHERE; if there is no WHERE, find the FROM...	WITHOUT_CLASSIFICATION	0.9999996505876572	WITHOUT_CLASSIFICATION	3.4941234291989697E-7	DESIGN
Now, inject the newly built ORDER BY into the tree	WITHOUT_CLASSIFICATION	0.9998805637064688	WITHOUT_CLASSIFICATION	1.1943629353118517E-4	DESIGN
ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999669192149049	WITHOUT_CLASSIFICATION	3.308078509508185E-5	DESIGN
logic operators by definition resolve to boolean.	WITHOUT_CLASSIFICATION	0.9999578565012535	WITHOUT_CLASSIFICATION	4.214349874664562E-5	DESIGN
Render the identifier select fragment using the table alias.	WITHOUT_CLASSIFICATION	0.9999200891480111	WITHOUT_CLASSIFICATION	7.991085198892329E-5	DESIGN
Class names in the FROM clause result in a JoinSequence (the old FromParser does this).	WITHOUT_CLASSIFICATION	0.9999999303558292	WITHOUT_CLASSIFICATION	6.964417073062387E-8	DESIGN
For many-to-many joins, use the tablename from the queryable collection for the default text.	WITHOUT_CLASSIFICATION	0.9999999131769841	WITHOUT_CLASSIFICATION	8.682301588420107E-8	DESIGN
Otherwise, use the property mapping.	WITHOUT_CLASSIFICATION	0.999980435787217	WITHOUT_CLASSIFICATION	1.9564212783072945E-5	DESIGN
should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9999305214555819	WITHOUT_CLASSIFICATION	6.947854441817172E-5	DESIGN
If the property is a special collection property name, return a CollectionPropertyMapping.	WITHOUT_CLASSIFICATION	0.9999997048253483	WITHOUT_CLASSIFICATION	2.9517465180602183E-7	DESIGN
Collection of components.	WITHOUT_CLASSIFICATION	0.9999959007927629	WITHOUT_CLASSIFICATION	4.099207237081323E-6	DESIGN
make sure the lhs is "assignable"...	WITHOUT_CLASSIFICATION	0.9999995758598335	WITHOUT_CLASSIFICATION	4.241401665497056E-7	DESIGN
false indicates to not generate parens around the assignment	WITHOUT_CLASSIFICATION	0.9998823573999936	WITHOUT_CLASSIFICATION	1.1764260000636463E-4	DESIGN
Register the FromElement with the FROM clause, now that we have the names and aliases.	WITHOUT_CLASSIFICATION	0.9999997600108979	WITHOUT_CLASSIFICATION	2.3998910222492763E-7	DESIGN
currently allowed...	WITHOUT_CLASSIFICATION	0.9999296086916284	WITHOUT_CLASSIFICATION	7.039130837154072E-5	DESIGN
HHH-276 : implied joins in a subselect where clause - The destination needs to be added to the destination's from clause. Not sure if this is will fix everything, but it works.	WITHOUT_CLASSIFICATION	0.9929978883563626	WITHOUT_CLASSIFICATION	0.007002111643637411	DESIGN
return classAlias == null ? className : classAlias;	WITHOUT_CLASSIFICATION	0.9993633918706887	WITHOUT_CLASSIFICATION	6.366081293113414E-4	DESIGN
This is an explicit FROM element.	WITHOUT_CLASSIFICATION	0.9999852824372509	WITHOUT_CLASSIFICATION	1.4717562748983773E-5	DESIGN
ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999669192149049	WITHOUT_CLASSIFICATION	3.308078509508185E-5	DESIGN
Fetch can't be used with scroll() or iterate().	WITHOUT_CLASSIFICATION	0.9999499075464179	WITHOUT_CLASSIFICATION	5.00924535822333E-5	DESIGN
If it's not implied or it is implied and it's a many to many join where the target wasn't found.	WITHOUT_CLASSIFICATION	0.9999999956133769	WITHOUT_CLASSIFICATION	4.386623035877167E-9	DESIGN
Since this is an explicit FROM element, it can't be implied in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999933726741556	WITHOUT_CLASSIFICATION	6.6273258444884595E-6	DESIGN
Do nothing, eplicit from elements are always in the projection list.	WITHOUT_CLASSIFICATION	0.9999996347772104	WITHOUT_CLASSIFICATION	3.652227895669832E-7	DESIGN
propertyName refers to something like collection.size...	WITHOUT_CLASSIFICATION	0.9999844088050324	WITHOUT_CLASSIFICATION	1.5591194967690654E-5	DESIGN
property name is a sub-path of a component...	WITHOUT_CLASSIFICATION	0.9996905986133985	WITHOUT_CLASSIFICATION	3.0940138660152586E-4	DESIGN
Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.999986293644168	WITHOUT_CLASSIFICATION	1.370635583203382E-5	DESIGN
nothing to do; even if the operand is a parameter, no way we could infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9990337439155375	WITHOUT_CLASSIFICATION	9.662560844626129E-4	DESIGN
logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9998823158046125	WITHOUT_CLASSIFICATION	1.1768419538739252E-4	DESIGN
DotNode uses null here...	WITHOUT_CLASSIFICATION	0.9734037652998523	WITHOUT_CLASSIFICATION	0.0265962347001477	DESIGN
We represent a from-clause alias	WITHOUT_CLASSIFICATION	0.9999993862066825	WITHOUT_CLASSIFICATION	6.137933174936781E-7	DESIGN
we are the LHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.999998365429904	WITHOUT_CLASSIFICATION	1.63457009607819E-6	DESIGN
we are the RHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999929737436862	WITHOUT_CLASSIFICATION	7.026256313791432E-6	DESIGN
we represent a naked (simple) prop-ref	WITHOUT_CLASSIFICATION	0.9998000924902851	WITHOUT_CLASSIFICATION	1.9990750971483518E-4	DESIGN
EARLY EXIT!!! return so the resolve call explicitly coming from DotNode can resolve this...	WITHOUT_CLASSIFICATION	0.7334552426899786	WITHOUT_CLASSIFICATION	0.2665447573100213	DESIGN
assume this ident's text does not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.98418315767399	WITHOUT_CLASSIFICATION	0.015816842326009887	DESIGN
just ignore it for now, it'll get resolved later...	WITHOUT_CLASSIFICATION	0.9978406977388983	WITHOUT_CLASSIFICATION	0.0021593022611016807	DESIGN
This is not actually a constant, but a reference to FROM element.	WITHOUT_CLASSIFICATION	0.9999872962184482	WITHOUT_CLASSIFICATION	1.2703781551887327E-5	DESIGN
check to see if our "propPath" actually represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999046553990886	WITHOUT_CLASSIFICATION	9.534460091153783E-5	DESIGN
these pieces are needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9998974375608849	WITHOUT_CLASSIFICATION	1.0256243911513066E-4	DESIGN
used to set the type of the parent dot node	WITHOUT_CLASSIFICATION	0.9929671231580991	WITHOUT_CLASSIFICATION	0.007032876841900879	DESIGN
assume we do not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9982752300909102	WITHOUT_CLASSIFICATION	0.0017247699090897925	DESIGN
assume we do not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9982752300909102	WITHOUT_CLASSIFICATION	0.0017247699090897925	DESIGN
naked property-refs cannot be used with an aliased from element	WITHOUT_CLASSIFICATION	0.9997824387627026	WITHOUT_CLASSIFICATION	2.1756123729754575E-4	DESIGN
this piece is needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9999750153054697	WITHOUT_CLASSIFICATION	2.498469453025185E-5	DESIGN
do not over-write the column text, as that has already been "rendered" during resolve	WITHOUT_CLASSIFICATION	0.9999983007123202	WITHOUT_CLASSIFICATION	1.6992876797330414E-6	DESIGN
for some reason the antlr.CommonAST initialization routines force this method to get called twice. The first time with an empty string	WITHOUT_CLASSIFICATION	0.9999983232432395	WITHOUT_CLASSIFICATION	1.676756760557477E-6	DESIGN
Look up class name using the first identifier in the path.	WITHOUT_CLASSIFICATION	0.9999893887109315	WITHOUT_CLASSIFICATION	1.0611289068517848E-5	DESIGN
Add to the query spaces.	WITHOUT_CLASSIFICATION	0.9999250762172948	WITHOUT_CLASSIFICATION	7.492378270522488E-5	DESIGN
If the from element isn't in the same clause, create a new from element.	WITHOUT_CLASSIFICATION	0.9999993998698847	WITHOUT_CLASSIFICATION	6.001301153302107E-7	DESIGN
This is the root level node. Generate an explicit from clause at the root.	WITHOUT_CLASSIFICATION	0.9998374513342708	WITHOUT_CLASSIFICATION	1.6254866572919423E-4	DESIGN
Correlated subqueries create 'special' implied from nodes because correlated subselects can't use an ANSI-style join	WITHOUT_CLASSIFICATION	0.9999991419062675	WITHOUT_CLASSIFICATION	8.580937325251329E-7	DESIGN
super-duper-classic-parser-regression-testing-mojo-magic...	WITHOUT_CLASSIFICATION	0.9996176830962671	WITHOUT_CLASSIFICATION	3.82316903732874E-4	DESIGN
A collection of entities...	WITHOUT_CLASSIFICATION	0.999961886948911	WITHOUT_CLASSIFICATION	3.811305108900428E-5	DESIGN
A collection of components...	WITHOUT_CLASSIFICATION	0.9999971747905392	WITHOUT_CLASSIFICATION	2.8252094608368115E-6	DESIGN
A collection of scalar elements...	WITHOUT_CLASSIFICATION	0.9999981525163308	WITHOUT_CLASSIFICATION	1.8474836692227132E-6	DESIGN
according to both the ANSI-SQL and EJB3 specs, trim can either take exactly one parameter or a variable number of parameters between 1 and 4. from the SQL spec: <trim function> ::= TRIM <left paren> <trim operands> <right paren> <trim operands> ::= [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> <trim specification> ::= LEADING | TRAILING | BOTH If only <trim specification> is omitted, BOTH is assumed; if <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999999991707456	WITHOUT_CLASSIFICATION	8.292545530041301E-10	DESIGN
Don't include sub-classes for implied collection joins or subquery joins.	WITHOUT_CLASSIFICATION	0.9975517453723873	WITHOUT_CLASSIFICATION	0.002448254627612754	DESIGN
Treat explict from elements in sub-queries properly.	WITHOUT_CLASSIFICATION	0.9999860375760816	WITHOUT_CLASSIFICATION	1.3962423918336123E-5	DESIGN
( implied && DotNode.useThetaStyleImplicitJoins ) ) {	WITHOUT_CLASSIFICATION	0.999928963173811	WITHOUT_CLASSIFICATION	7.103682618900148E-5	DESIGN
the "root from-element" in correlated subqueries do need this piece	WITHOUT_CLASSIFICATION	0.9963862713466367	WITHOUT_CLASSIFICATION	0.0036137286533632395	DESIGN
Create the FROM element for the target (the elements of the collection).	WITHOUT_CLASSIFICATION	0.9999999997370494	WITHOUT_CLASSIFICATION	2.629505561849103E-10	DESIGN
If the join is implied, then don't include sub-classes on the element.	WITHOUT_CLASSIFICATION	0.9999999685809252	WITHOUT_CLASSIFICATION	3.141907470993414E-8	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999690877630492	WITHOUT_CLASSIFICATION	3.0912236950757394E-5	DESIGN
The associated entity is implied, but it must be included in the FROM. The collection alias is the role.	WITHOUT_CLASSIFICATION	0.999770819809241	WITHOUT_CLASSIFICATION	2.2918019075906935E-4	DESIGN
Tag this node as a JOIN. Don't include subclasses in the join. This is a clollection join.	WITHOUT_CLASSIFICATION	0.9999998147692262	WITHOUT_CLASSIFICATION	1.852307739487943E-7	DESIGN
Get the class name of the associated entity.	WITHOUT_CLASSIFICATION	0.9999523088629341	WITHOUT_CLASSIFICATION	4.769113706597668E-5	DESIGN
origin, path, implied, columns, classAlias,	WITHOUT_CLASSIFICATION	0.9999896202281668	WITHOUT_CLASSIFICATION	1.037977183316586E-5	DESIGN
implied	WITHOUT_CLASSIFICATION	0.9992278299181336	WITHOUT_CLASSIFICATION	7.72170081866301E-4	DESIGN
For implied many-to-many, just add the end join.	WITHOUT_CLASSIFICATION	0.9999996981712267	WITHOUT_CLASSIFICATION	3.018287733040819E-7	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999690877630492	WITHOUT_CLASSIFICATION	3.0912236950757394E-5	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999690877630492	WITHOUT_CLASSIFICATION	3.0912236950757394E-5	DESIGN
the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999997211307323	WITHOUT_CLASSIFICATION	2.788692676406487E-7	DESIGN
This causes the factory to instantiate the desired class.	WITHOUT_CLASSIFICATION	0.9999955380466543	WITHOUT_CLASSIFICATION	4.461953345693074E-6	DESIGN
private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9994899488239531	WITHOUT_CLASSIFICATION	5.100511760468088E-4	DESIGN
Frontbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999077975932419	WITHOUT_CLASSIFICATION	9.220240675810763E-5	DESIGN
The types represented in the SQL result set. @return The types represented in the SQL result set.	WITHOUT_CLASSIFICATION	0.9999821283000497	WITHOUT_CLASSIFICATION	1.7871699950212335E-5	DESIGN
public Type[] getSqlResultTypes() {return sqlResultTypes;}	WITHOUT_CLASSIFICATION	0.9989805031251497	WITHOUT_CLASSIFICATION	0.0010194968748502213	DESIGN
First, collect all of the select expressions. NOTE: This must be done before invoking setScalarColumnText() because setScalarColumnText() changes the AST!!!	WITHOUT_CLASSIFICATION	0.9999659596044087	WITHOUT_CLASSIFICATION	3.404039559130099E-5	DESIGN
First allow the actual type to control the return value. (the actual underlying sqltype could actually be different)	WITHOUT_CLASSIFICATION	0.998576771427836	WITHOUT_CLASSIFICATION	0.0014232285721640496	DESIGN
sqlResultTypeList.addAll( constructorArgumentTypeList );	WITHOUT_CLASSIFICATION	0.9999997405722012	WITHOUT_CLASSIFICATION	2.594277987695974E-7	DESIGN
If the data type is not an association type, it could not have been in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999999031612415	WITHOUT_CLASSIFICATION	9.683875848775885E-8	DESIGN
sqlResultTypeList.add( type );	WITHOUT_CLASSIFICATION	0.9999996364802624	WITHOUT_CLASSIFICATION	3.6351973765536073E-7	DESIGN
Always add the type to the return type list.	WITHOUT_CLASSIFICATION	0.9999901480158947	WITHOUT_CLASSIFICATION	9.851984105336215E-6	DESIGN
add the fetched entities	WITHOUT_CLASSIFICATION	0.9999970952943807	WITHOUT_CLASSIFICATION	2.9047056192320244E-6	DESIGN
Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999995658392643	WITHOUT_CLASSIFICATION	4.341607357523062E-7	DESIGN
function support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999167181309729	WITHOUT_CLASSIFICATION	8.328186902705796E-5	DESIGN
If there are any scalars (non-entities) selected, render the select column aliases.	WITHOUT_CLASSIFICATION	0.9999999884811696	WITHOUT_CLASSIFICATION	1.1518830328559575E-8	DESIGN
sqlResultTypeList,	WITHOUT_CLASSIFICATION	0.9999990033509543	WITHOUT_CLASSIFICATION	9.96649045746358E-7	DESIGN
ArrayList sqlResultTypeList,	WITHOUT_CLASSIFICATION	0.9999999702409705	WITHOUT_CLASSIFICATION	2.9759029423747784E-8	DESIGN
sqlResultTypes = ( Type[] ) sqlResultTypeList.toArray( new Type[sqlResultTypeList.size()] );	WITHOUT_CLASSIFICATION	0.9999999948356787	WITHOUT_CLASSIFICATION	5.164321215462347E-9	DESIGN
lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999158869459362	WITHOUT_CLASSIFICATION	8.411305406378277E-5	DESIGN
TODO:	WITHOUT_CLASSIFICATION	0.9850881466337967	WITHOUT_CLASSIFICATION	0.014911853366203157	DESIGN
Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999992894928048	WITHOUT_CLASSIFICATION	7.1050719518632E-7	DESIGN
Generate an 2d array of column names, the first dimension is parallel with the return types array. The second dimension is the list of column names for each type.	WITHOUT_CLASSIFICATION	0.9999999997664606	WITHOUT_CLASSIFICATION	2.335394007223209E-10	DESIGN
Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999996789616209	WITHOUT_CLASSIFICATION	3.2103837921372374E-7	DESIGN
union subclass support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998176327914154	WITHOUT_CLASSIFICATION	1.8236720858457454E-4	DESIGN
Skip 'DISTINCT' and 'ALL', so we return the first expression node.	WITHOUT_CLASSIFICATION	0.999999962662719	WITHOUT_CLASSIFICATION	3.7337281156142105E-8	DESIGN
Create SQL_TOKEN nodes for the columns.	WITHOUT_CLASSIFICATION	0.9999976583782622	WITHOUT_CLASSIFICATION	2.3416217377911937E-6	DESIGN
Generate the property select tokens.	WITHOUT_CLASSIFICATION	0.9999765839242873	WITHOUT_CLASSIFICATION	2.3416075712723455E-5	DESIGN
Get the function name node.	WITHOUT_CLASSIFICATION	0.9999987634621945	WITHOUT_CLASSIFICATION	1.2365378054260751E-6	DESIGN
Method expressions in a SELECT should always be considered scalar.	WITHOUT_CLASSIFICATION	0.9873731304237715	WITHOUT_CLASSIFICATION	0.012626869576228536	DESIGN
If this is 'elements' then create a new FROM element.	WITHOUT_CLASSIFICATION	0.9999999331940336	WITHOUT_CLASSIFICATION	6.680596638824077E-8	DESIGN
Not elements(x)	WITHOUT_CLASSIFICATION	0.9999565830655235	WITHOUT_CLASSIFICATION	4.341693447646847E-5	DESIGN
Dialect function	WITHOUT_CLASSIFICATION	0.9999988991592573	WITHOUT_CLASSIFICATION	1.1008407426298724E-6	DESIGN
Collection 'property function'	WITHOUT_CLASSIFICATION	0.9999728602811232	WITHOUT_CLASSIFICATION	2.713971887681351E-5	DESIGN
If the constant is an IDENT, figure out what it means...	WITHOUT_CLASSIFICATION	0.9999910264321296	WITHOUT_CLASSIFICATION	8.9735678703927E-6	DESIGN
IDENT is a class alias in the FROM.	WITHOUT_CLASSIFICATION	0.9999992986199622	WITHOUT_CLASSIFICATION	7.013800378908336E-7	DESIGN
Resolve to an identity column.	WITHOUT_CLASSIFICATION	0.9720911566944066	WITHOUT_CLASSIFICATION	0.027908843305593328	DESIGN
Otherwise, it's a literal.	WITHOUT_CLASSIFICATION	0.9999670646781976	WITHOUT_CLASSIFICATION	3.293532180238596E-5	DESIGN
the name of an entity class	WITHOUT_CLASSIFICATION	0.9999732248138589	WITHOUT_CLASSIFICATION	2.677518614114606E-5	DESIGN
the class discriminator value	WITHOUT_CLASSIFICATION	0.9999586892273016	WITHOUT_CLASSIFICATION	4.131077269844091E-5	DESIGN
Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999996142138554	WITHOUT_CLASSIFICATION	3.857861446555648E-7	DESIGN
Add a space before the display text.	WITHOUT_CLASSIFICATION	0.9999998002127717	WITHOUT_CLASSIFICATION	1.9978722823126617E-7	DESIGN
Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999999757748422	WITHOUT_CLASSIFICATION	2.422515776645039E-8	DESIGN
child == parent.getFirstChild()	WITHOUT_CLASSIFICATION	0.9999993009027568	WITHOUT_CLASSIFICATION	6.99097243321746E-7	DESIGN
Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999999757748422	WITHOUT_CLASSIFICATION	2.422515776645039E-8	DESIGN
Filter conditions need to be inserted before the HQL where condition and the theta join node. This is because org.hibernate.loader.Loader binds the filter parameters first, then it binds all the HQL query parameters, see org.hibernate.loader.Loader.processFilterParameters().	WITHOUT_CLASSIFICATION	0.9999999990423648	WITHOUT_CLASSIFICATION	9.576351420553878E-10	DESIGN
Put the FILTERS node before the HQL condition and theta joins	WITHOUT_CLASSIFICATION	0.999999190223873	WITHOUT_CLASSIFICATION	8.097761271083939E-7	DESIGN
add the current fragment to the FILTERS node	WITHOUT_CLASSIFICATION	0.9999974574679914	WITHOUT_CLASSIFICATION	2.542532008575141E-6	DESIGN
Create a new THETA_JOINS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999999606248088	WITHOUT_CLASSIFICATION	3.937519130816737E-8	DESIGN
Put the THETA_JOINS node before the HQL condition, after the filters.	WITHOUT_CLASSIFICATION	0.9999999533971968	WITHOUT_CLASSIFICATION	4.660280329953322E-8	DESIGN
add the current fragment to the THETA_JOINS node	WITHOUT_CLASSIFICATION	0.9999958923294031	WITHOUT_CLASSIFICATION	4.107670596862155E-6	DESIGN
First, try to get the persister using the given name directly.	WITHOUT_CLASSIFICATION	0.9999980784337111	WITHOUT_CLASSIFICATION	1.9215662888391094E-6	DESIGN
unable to locate it using this name	WITHOUT_CLASSIFICATION	0.9999352900012956	WITHOUT_CLASSIFICATION	6.470999870444126E-5	DESIGN
If that didn't work, try using the 'import' name.	WITHOUT_CLASSIFICATION	0.9999837782555433	WITHOUT_CLASSIFICATION	1.6221744456680674E-5	DESIGN
Implicit joins use theta style (WHERE pk = fk), explicit joins use JOIN (after from)	WITHOUT_CLASSIFICATION	0.9999982170592072	WITHOUT_CLASSIFICATION	1.7829407927766732E-6	DESIGN
locate the registered function by the given name	WITHOUT_CLASSIFICATION	0.9999999952169154	WITHOUT_CLASSIFICATION	4.783084557823862E-9	DESIGN
determine the type of the first argument...	WITHOUT_CLASSIFICATION	0.9999266239280132	WITHOUT_CLASSIFICATION	7.33760719867824E-5	DESIGN
Use the DOT node to emit the first column name. Create the column names, folled by the column aliases.	WITHOUT_CLASSIFICATION	0.9999999722118572	WITHOUT_CLASSIFICATION	2.7788142777609785E-8	DESIGN
Note: this simply constructs a "raw" SQL_TOKEN representing the where fragment and injects this into the tree. This "works"; however it is probably not the best long-term solution. At some point we probably want to apply an additional grammar to properly tokenize this where fragment into constituent parts focused on the operators embedded within the fragment.	WITHOUT_CLASSIFICATION	0.9999999998297283	DESIGN	1.7027167547357252E-10	WITHOUT_CLASSIFICATION
Append the text of the current node.	WITHOUT_CLASSIFICATION	0.9999998655554226	WITHOUT_CLASSIFICATION	1.3444457740912545E-7	DESIGN
If the node has a first child, recurse into the first child.	WITHOUT_CLASSIFICATION	0.999999998120329	WITHOUT_CLASSIFICATION	1.87967095823181E-9	DESIGN
If there is a second child (RHS), recurse into that child.	WITHOUT_CLASSIFICATION	0.9999991812356273	WITHOUT_CLASSIFICATION	8.187643726576716E-7	DESIGN
Iterate through the alias,JoinSequence pairs and generate SQL token nodes.	WITHOUT_CLASSIFICATION	0.9999993033096292	WITHOUT_CLASSIFICATION	6.966903707498109E-7	DESIGN
If the from element represents a JOIN_FRAGMENT and it is a theta-style join, convert its type from JOIN_FRAGMENT to FROM_FRAGMENT	WITHOUT_CLASSIFICATION	0.9999999896784166	WITHOUT_CLASSIFICATION	1.0321583290748196E-8	DESIGN
this is used during SqlGenerator processing	WITHOUT_CLASSIFICATION	0.9929204324858042	WITHOUT_CLASSIFICATION	0.007079567514195782	DESIGN
If there is a FROM fragment and the FROM element is an explicit, then add the from part.	WITHOUT_CLASSIFICATION	0.9999947542139191	WITHOUT_CLASSIFICATION	5.245786080801311E-6	DESIGN
&& StringHelper.isNotEmpty( frag )	WITHOUT_CLASSIFICATION	0.9999909883217241	WITHOUT_CLASSIFICATION	9.01167827591711E-6	DESIGN
The FROM fragment will probably begin with ', '. Remove this if it is present.	WITHOUT_CLASSIFICATION	0.9927926076718483	WITHOUT_CLASSIFICATION	0.007207392328151623	DESIGN
This uses a PathExpressionParser but notice that compound paths are not valid, only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9999978110086631	WITHOUT_CLASSIFICATION	2.1889913369239605E-6	DESIGN
SELECT p FROM p IN CLASS eg.Person ORDER BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.999999815446237	WITHOUT_CLASSIFICATION	1.8455376305161727E-7	DESIGN
The reason for this is SQL doesn't let you sort by an expression you are not returning in the result set.	WITHOUT_CLASSIFICATION	0.9999981809703429	WITHOUT_CLASSIFICATION	1.8190296571719362E-6	DESIGN
named query parameter	WITHOUT_CLASSIFICATION	0.9984981752760372	WITHOUT_CLASSIFICATION	0.001501824723962706	DESIGN
default mode	WITHOUT_CLASSIFICATION	0.9999429530731666	WITHOUT_CLASSIFICATION	5.704692683331888E-5	DESIGN
QueryJoinFragment join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.999999956916032	WITHOUT_CLASSIFICATION	4.3083967945201826E-8	DESIGN
reset the dotcount (but not the path) after reset!	WITHOUT_CLASSIFICATION	0.999999893503374	WITHOUT_CLASSIFICATION	1.0649662602688158E-7	DESIGN
after reset!	WITHOUT_CLASSIFICATION	0.9999981662886898	WITHOUT_CLASSIFICATION	1.833711310199605E-6	DESIGN
we don't need to worry about any condition in the ON clause here (toFromFragmentString), since anything in the ON condition is already applied to the whole query	WITHOUT_CLASSIFICATION	0.9999712133241051	WITHOUT_CLASSIFICATION	2.878667589498249E-5	DESIGN
bit_length feels a bit broken to me. We have to cast to char in order to pass when a numeric value is supplied. But of course the answers given will be wildly different for these two datatypes. 1234.5678 will be 9 bytes as a char string but will be 8 or 16 bytes as a true numeric. Jay Nance 2006-09-22	WITHOUT_CLASSIFICATION	0.9630168977875682	WITHOUT_CLASSIFICATION	0.036983102212431895	DESIGN
dotcount>=2	WITHOUT_CLASSIFICATION	0.9998516541656174	WITHOUT_CLASSIFICATION	1.483458343826414E-4	DESIGN
Do the corresponding RHS	WITHOUT_CLASSIFICATION	0.9999818733321364	WITHOUT_CLASSIFICATION	1.8126667863564984E-5	DESIGN
if its "id"	WITHOUT_CLASSIFICATION	0.999995638876208	WITHOUT_CLASSIFICATION	4.361123791907516E-6	DESIGN
or its the id property name	WITHOUT_CLASSIFICATION	0.999948157084186	WITHOUT_CLASSIFICATION	5.184291581380738E-5	DESIGN
join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999999692414145	WITHOUT_CLASSIFICATION	3.075858548161252E-8	DESIGN
important!!	WITHOUT_CLASSIFICATION	0.999956085699398	WITHOUT_CLASSIFICATION	4.391430060190273E-5	DESIGN
String[] keyCols = collPersister.getKeyColumnNames();	WITHOUT_CLASSIFICATION	0.9999997312127142	WITHOUT_CLASSIFICATION	2.687872858402628E-7	DESIGN
an association	WITHOUT_CLASSIFICATION	0.9999942319942723	WITHOUT_CLASSIFICATION	5.768005727820406E-6	DESIGN
allow index() function:	WITHOUT_CLASSIFICATION	0.9999989199382036	WITHOUT_CLASSIFICATION	1.0800617965317615E-6	DESIGN
here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9999395334275067	WITHOUT_CLASSIFICATION	6.046657249338134E-5	DESIGN
The reason for this is SQL doesn't let you sort by an expression you are not returning in the result set.	WITHOUT_CLASSIFICATION	0.9999981809703429	WITHOUT_CLASSIFICATION	1.8190296571719362E-6	DESIGN
many-to-many	WITHOUT_CLASSIFICATION	0.9999656156795416	WITHOUT_CLASSIFICATION	3.4384320458389007E-5	DESIGN
collections of values	WITHOUT_CLASSIFICATION	0.9999841525712421	WITHOUT_CLASSIFICATION	1.5847428757914094E-5	DESIGN
opening paren in new Foo ( ... )	WITHOUT_CLASSIFICATION	0.9958349400641169	WITHOUT_CLASSIFICATION	0.0041650599358831995	DESIGN
if we are inside a new Result(), but not inside a nested function	WITHOUT_CLASSIFICATION	0.9999999377713087	WITHOUT_CLASSIFICATION	6.222869137838317E-8	DESIGN
special case	WITHOUT_CLASSIFICATION	0.9999994079372588	WITHOUT_CLASSIFICATION	5.920627412114477E-7	DESIGN
the name of an SQL function	WITHOUT_CLASSIFICATION	0.9999994687338849	WITHOUT_CLASSIFICATION	5.312661150740878E-7	DESIGN
null child could occur for no from clause in a filter	WITHOUT_CLASSIFICATION	0.9993822131602046	WITHOUT_CLASSIFICATION	6.177868397953871E-4	DESIGN
this is basically a copy/paste of OrderByParser ... might be worth refactoring	WITHOUT_CLASSIFICATION	0.9987974573037696	DESIGN	0.001202542696230423	WITHOUT_CLASSIFICATION
SELECT p FROM p IN CLASS eg.Person GROUP BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.999994723054564	WITHOUT_CLASSIFICATION	5.276945436032636E-6	DESIGN
return aliases not supported in classic translator!	WITHOUT_CLASSIFICATION	0.9992566514569523	WITHOUT_CLASSIFICATION	7.433485430475997E-4	DESIGN
register collection role	WITHOUT_CLASSIFICATION	0.9999817843575395	WITHOUT_CLASSIFICATION	1.8215642460541026E-5	DESIGN
The keyword used to specify an identity column, if identity column key generation is supported.	WITHOUT_CLASSIFICATION	0.9999796114926907	WITHOUT_CLASSIFICATION	2.038850730928282E-5	DESIGN
.getElementPropertyMapping();	WITHOUT_CLASSIFICATION	0.999995282622827	WITHOUT_CLASSIFICATION	4.717377172895567E-6	DESIGN
crossJoins.add(name);	WITHOUT_CLASSIFICATION	0.9998542525468844	WITHOUT_CLASSIFICATION	1.457474531155222E-4	DESIGN
ie no select clause in HQL	WITHOUT_CLASSIFICATION	0.9999988762377157	WITHOUT_CLASSIFICATION	1.1237622843764497E-6	DESIGN
initialize the Set of queried identifier spaces (ie. tables)	WITHOUT_CLASSIFICATION	0.9999941257604007	WITHOUT_CLASSIFICATION	5.8742395992806286E-6	DESIGN
ie. no select clause	WITHOUT_CLASSIFICATION	0.9999999190166274	WITHOUT_CLASSIFICATION	8.0983372554664E-8	DESIGN
there _was_ a select clause	WITHOUT_CLASSIFICATION	0.9999997616117359	WITHOUT_CLASSIFICATION	2.3838826403602204E-7	DESIGN
return the concrete type, or the underlying type if a concrete type was not specified	WITHOUT_CLASSIFICATION	0.9999886934313705	WITHOUT_CLASSIFICATION	1.1306568629440497E-5	DESIGN
many-to-many	WITHOUT_CLASSIFICATION	0.9999656156795416	WITHOUT_CLASSIFICATION	3.4384320458389007E-5	DESIGN
q.addCollection(collectionName, collectionRole);	WITHOUT_CLASSIFICATION	0.9999998578790157	WITHOUT_CLASSIFICATION	1.421209843340188E-7	DESIGN
classic parser does not support bulk manipulation statements	WITHOUT_CLASSIFICATION	0.9947041388171821	WITHOUT_CLASSIFICATION	0.005295861182817886	DESIGN
can't cache this stuff either (per-invocation)	WITHOUT_CLASSIFICATION	0.9999936662613692	WITHOUT_CLASSIFICATION	6.333738630809865E-6	DESIGN
unfortunately this stuff can't be cached because it is per-invocation, not constant for the QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9993780719751045	WITHOUT_CLASSIFICATION	6.219280248955912E-4	DESIGN
This is the legacy behaviour for HQL queries...	WITHOUT_CLASSIFICATION	0.999973785544552	WITHOUT_CLASSIFICATION	2.6214455448034674E-5	DESIGN
not known!	WITHOUT_CLASSIFICATION	0.9961296924207654	WITHOUT_CLASSIFICATION	0.0038703075792346385	DESIGN
not known!	WITHOUT_CLASSIFICATION	0.9961296924207654	WITHOUT_CLASSIFICATION	0.0038703075792346385	DESIGN
we have the form: trim(trimSource) so we trim leading and trailing spaces EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999960982265196	WITHOUT_CLASSIFICATION	3.901773480463162E-6	DESIGN
not known!	WITHOUT_CLASSIFICATION	0.9961296924207654	WITHOUT_CLASSIFICATION	0.0038703075792346385	DESIGN
not known!	WITHOUT_CLASSIFICATION	0.9961296924207654	WITHOUT_CLASSIFICATION	0.0038703075792346385	DESIGN
Need this, since join condition can appear inside parens!	WITHOUT_CLASSIFICATION	0.9818196093953103	WITHOUT_CLASSIFICATION	0.01818039060468968	DESIGN
tokens that close a sub expression tokens that open a sub expression tokens that would indicate a sub expression is a boolean expression	WITHOUT_CLASSIFICATION	0.9999998897686168	WITHOUT_CLASSIFICATION	1.1023138315454241E-7	DESIGN
expressionTerminators.add(","); deliberately excluded	WITHOUT_CLASSIFICATION	0.999925681428233	WITHOUT_CLASSIFICATION	7.431857176698344E-5	DESIGN
expressionOpeners.add(","); deliberately excluded	WITHOUT_CLASSIFICATION	0.9999948635892624	WITHOUT_CLASSIFICATION	5.136410737645515E-6	DESIGN
we have the form: trim(from trimSource). This is functionally equivalent to trim(trimSource) EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9996533956543562	WITHOUT_CLASSIFICATION	3.4660434564387103E-4	DESIGN
otherwise, a trim-specification and/or a trim-character have been specified; we need to decide which options are present and "do the right thing" should leading trim-characters be trimmed? should trailing trim-characters be trimmed? the trim-character (what is to be trimmed off?) the trim-source (from where should it be trimmed?)	WITHOUT_CLASSIFICATION	0.9954310709199974	WITHOUT_CLASSIFICATION	0.004568929080002587	DESIGN
Inside a BETWEEN ... AND ... expression	WITHOUT_CLASSIFICATION	0.9986309688900195	WITHOUT_CLASSIFICATION	0.0013690311099805203	DESIGN
were an odd or even number of NOTs encountered the join string built up by compound paths inside this expression a flag indicating if the subexpression is known to be boolean	WITHOUT_CLASSIFICATION	0.9999999851059218	WITHOUT_CLASSIFICATION	1.4894078323152125E-8	DESIGN
ie. a many-to-many	WITHOUT_CLASSIFICATION	0.9999757180607763	WITHOUT_CLASSIFICATION	2.4281939223676402E-5	DESIGN
Cope with [,]	WITHOUT_CLASSIFICATION	0.9999555829000226	WITHOUT_CLASSIFICATION	4.4417099977424755E-5	DESIGN
Cope with a continued path expression (ie. ].baz)	WITHOUT_CLASSIFICATION	0.999893459738205	WITHOUT_CLASSIFICATION	1.0654026179500631E-4	DESIGN
NOTE: early return	WITHOUT_CLASSIFICATION	0.9999744689282589	WITHOUT_CLASSIFICATION	2.553107174097844E-5	DESIGN
Cope with a subselect	WITHOUT_CLASSIFICATION	0.9999376372246531	WITHOUT_CLASSIFICATION	6.236277534686103E-5	DESIGN
Cope with special cases of AND, NOT, ()	WITHOUT_CLASSIFICATION	0.9999970329398374	WITHOUT_CLASSIFICATION	2.9670601626376473E-6	DESIGN
Close extra brackets we opened	WITHOUT_CLASSIFICATION	0.9999922545160018	WITHOUT_CLASSIFICATION	7.745483998156238E-6	DESIGN
take note when this is a boolean expression	WITHOUT_CLASSIFICATION	0.999952891235837	WITHOUT_CLASSIFICATION	4.710876416309402E-5	DESIGN
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999999357761018	WITHOUT_CLASSIFICATION	6.422389827374978E-8	DESIGN
process a token, mapping OO path expressions to SQL expressions	WITHOUT_CLASSIFICATION	0.9999989851082336	WITHOUT_CLASSIFICATION	1.0148917663728696E-6	DESIGN
Open any extra brackets we might need.	WITHOUT_CLASSIFICATION	0.9062999335584547	WITHOUT_CLASSIFICATION	0.09370006644154523	DESIGN
Cope with special cases of AND, NOT, )	WITHOUT_CLASSIFICATION	0.9999755170143825	WITHOUT_CLASSIFICATION	2.4482985617510686E-5	DESIGN
the next one up must also be	WITHOUT_CLASSIFICATION	0.9998805316809691	WITHOUT_CLASSIFICATION	1.1946831903084332E-4	DESIGN
Add any joins	WITHOUT_CLASSIFICATION	0.9999975590241481	WITHOUT_CLASSIFICATION	2.4409758518522835E-6	DESIGN
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999999357761018	WITHOUT_CLASSIFICATION	6.422389827374978E-8	DESIGN
named query parameter	WITHOUT_CLASSIFICATION	0.9984981752760372	WITHOUT_CLASSIFICATION	0.001501824723962706	DESIGN
path expression	WITHOUT_CLASSIFICATION	0.9999930866220589	WITHOUT_CLASSIFICATION	6.913377941173245E-6	DESIGN
saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999999788764803	WITHOUT_CLASSIFICATION	2.1123519633039063E-8	DESIGN
persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999997864420826	WITHOUT_CLASSIFICATION	2.135579173952018E-7	DESIGN
anything else	WITHOUT_CLASSIFICATION	0.9999988105299834	WITHOUT_CLASSIFICATION	1.1894700166122685E-6	DESIGN
the path expression continues after a ]	WITHOUT_CLASSIFICATION	0.9999518438982964	WITHOUT_CLASSIFICATION	4.815610170362008E-5	DESIGN
careful with this!	WITHOUT_CLASSIFICATION	0.9998738765883344	WITHOUT_CLASSIFICATION	1.2612341166567788E-4	DESIGN
the path expression ends at the ]	WITHOUT_CLASSIFICATION	0.9999228630287212	WITHOUT_CLASSIFICATION	7.713697127868126E-5	DESIGN
"finish off" the join	WITHOUT_CLASSIFICATION	0.9999972024167691	WITHOUT_CLASSIFICATION	2.7975832308701176E-6	DESIGN
NOTICE: no " or . since they are part of (compound) identifiers	WITHOUT_CLASSIFICATION	0.9971777185965437	WITHOUT_CLASSIFICATION	0.002822281403456271	DESIGN
cannot instantiate	WITHOUT_CLASSIFICATION	0.9999773589777867	WITHOUT_CLASSIFICATION	2.2641022213296864E-5	DESIGN
start by looking for HQL keywords...	WITHOUT_CLASSIFICATION	0.9999995121724534	WITHOUT_CLASSIFICATION	4.878275465394378E-7	DESIGN
inner joins can be abbreviated to 'join'	WITHOUT_CLASSIFICATION	0.9998610945302714	WITHOUT_CLASSIFICATION	1.3890546972867863E-4	DESIGN
'outer' is optional and is ignored	WITHOUT_CLASSIFICATION	0.9999999974866053	WITHOUT_CLASSIFICATION	2.51339476867404E-9	DESIGN
now anything that is not a HQL keyword	WITHOUT_CLASSIFICATION	0.9999943530047423	WITHOUT_CLASSIFICATION	5.646995257631674E-6	DESIGN
process the "old" HQL style where aliases appear _first_ ie. using the IN or IN CLASS constructions	WITHOUT_CLASSIFICATION	0.9999952840649041	WITHOUT_CLASSIFICATION	4.715935095844173E-6	DESIGN
treat it as a classname	WITHOUT_CLASSIFICATION	0.9999905333885074	WITHOUT_CLASSIFICATION	9.466611492542024E-6	DESIGN
treat it as a path expression	WITHOUT_CLASSIFICATION	0.9999784956701087	WITHOUT_CLASSIFICATION	2.150432989131587E-5	DESIGN
starts with the name of a mapped class (new style)	WITHOUT_CLASSIFICATION	0.9999856238057814	WITHOUT_CLASSIFICATION	1.4376194218722911E-5	DESIGN
starts with a path expression (new style)	WITHOUT_CLASSIFICATION	0.9999961936407973	WITHOUT_CLASSIFICATION	3.8063592026238505E-6	DESIGN
allow ODMG OQL style: from Person p, p.cars c	WITHOUT_CLASSIFICATION	0.9998014832903634	WITHOUT_CLASSIFICATION	1.9851670963650077E-4	DESIGN
handle quoted strings	WITHOUT_CLASSIFICATION	0.9997874932622642	WITHOUT_CLASSIFICATION	2.1250673773584342E-4	DESIGN
Object insertions, updates, and deletions have list semantics because they must happen in the right order so as to respect referential integrity	WITHOUT_CLASSIFICATION	0.9999992132860259	WITHOUT_CLASSIFICATION	7.867139740325846E-7	DESIGN
"finish off" the join	WITHOUT_CLASSIFICATION	0.9999972024167691	WITHOUT_CLASSIFICATION	2.7975832308701176E-6	DESIGN
ignore whitespace	WITHOUT_CLASSIFICATION	0.9999998226924804	WITHOUT_CLASSIFICATION	1.7730751960673927E-7	DESIGN
do replacements	WITHOUT_CLASSIFICATION	0.999708202719981	WITHOUT_CLASSIFICATION	2.917972800190583E-4	DESIGN
handle HQL2 collection syntax	WITHOUT_CLASSIFICATION	0.9997930486917358	WITHOUT_CLASSIFICATION	2.069513082643257E-4	DESIGN
uuid.hex is deprecated	WITHOUT_CLASSIFICATION	0.999901226244943	WITHOUT_CLASSIFICATION	9.877375505693512E-5	DESIGN
AbstractSelectingDelegate impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999846577458283	WITHOUT_CLASSIFICATION	1.53422541715606E-5	DESIGN
hilo params	WITHOUT_CLASSIFICATION	0.9999936292389029	WITHOUT_CLASSIFICATION	6.370761097195556E-6	DESIGN
sql = query;	WITHOUT_CLASSIFICATION	0.9999952238353154	WITHOUT_CLASSIFICATION	4.776164684611032E-6	DESIGN
performance opt	WITHOUT_CLASSIFICATION	0.9999812093245335	WITHOUT_CLASSIFICATION	1.8790675466523834E-5	DESIGN
sql = update;	WITHOUT_CLASSIFICATION	0.9999991695572474	WITHOUT_CLASSIFICATION	8.3044275245601E-7	DESIGN
hilo config	WITHOUT_CLASSIFICATION	0.9999812571373431	WITHOUT_CLASSIFICATION	1.874286265681232E-5	DESIGN
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999994730226083	WITHOUT_CLASSIFICATION	5.269773916981625E-7	DESIGN
don't allow comments on these insert statements as comments totally blow up the Oracle getGeneratedKeys "support" :(	WITHOUT_CLASSIFICATION	0.9999963923970372	WITHOUT_CLASSIFICATION	3.6076029628556684E-6	DESIGN
abort the save (the object is already saved by a circular cascade)	WITHOUT_CLASSIFICATION	0.993359370240401	WITHOUT_CLASSIFICATION	0.006640629759598939	DESIGN
throw new IdentifierGenerationException("save associated object first, or disable cascade for inverse association");	WITHOUT_CLASSIFICATION	0.9999999891794175	WITHOUT_CLASSIFICATION	1.082058251259947E-8	DESIGN
intentionally empty	WITHOUT_CLASSIFICATION	0.9999115717395681	WITHOUT_CLASSIFICATION	8.84282604319078E-5	DESIGN
do nothing to avoid a lazy property initialization	WITHOUT_CLASSIFICATION	0.9999987642950255	WITHOUT_CLASSIFICATION	1.2357049744569107E-6	DESIGN
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999988529391373	WITHOUT_CLASSIFICATION	1.1470608626947613E-6	DESIGN
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999994730226083	WITHOUT_CLASSIFICATION	5.269773916981625E-7	DESIGN
do nothing until we hit the rsult set containing the generated id	WITHOUT_CLASSIFICATION	0.9999974261470769	WITHOUT_CLASSIFICATION	2.5738529230883617E-6	DESIGN
COLUMN and TABLE should be renamed but it would break the public API	WITHOUT_CLASSIFICATION	0.8835807378809508	WITHOUT_CLASSIFICATION	0.11641926211904911	DESIGN
Loaded entity instances, by EntityKey	WITHOUT_CLASSIFICATION	0.9999956007913917	WITHOUT_CLASSIFICATION	4.399208608263828E-6	DESIGN
if the given name is un-qualified we may neen to qualify it	WITHOUT_CLASSIFICATION	0.9999845871454989	WITHOUT_CLASSIFICATION	1.5412854501185323E-5	DESIGN
the default...	WITHOUT_CLASSIFICATION	0.9999869731233229	WITHOUT_CLASSIFICATION	1.3026876677242369E-5	DESIGN
unfortunately not really safe to normalize this to 1 as an initial value like we do the others because we would not be able to control this if we are using a sequence...	WITHOUT_CLASSIFICATION	0.9999999877513525	WITHOUT_CLASSIFICATION	1.2248647618366817E-8	DESIGN
intentionally empty	WITHOUT_CLASSIFICATION	0.9999115717395681	WITHOUT_CLASSIFICATION	8.84282604319078E-5	DESIGN
Identity map of CollectionEntry instances, by the collection wrapper	WITHOUT_CLASSIFICATION	0.9999998482183449	WITHOUT_CLASSIFICATION	1.517816550744387E-7	DESIGN
general purpose parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999980735702542	WITHOUT_CLASSIFICATION	1.9264297457526897E-6	DESIGN
table-specific parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999982675581435	WITHOUT_CLASSIFICATION	1.7324418565614693E-6	DESIGN
Configurable implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999960732449744	WITHOUT_CLASSIFICATION	3.92675502558248E-6	DESIGN
IdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999820998575168	WITHOUT_CLASSIFICATION	1.7900142483203927E-5	DESIGN
PersistentIdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999947658894492	WITHOUT_CLASSIFICATION	5.23411055080262E-6	DESIGN
prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999932885694034	WITHOUT_CLASSIFICATION	6.711430596609534E-6	DESIGN
prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999932885694034	WITHOUT_CLASSIFICATION	6.711430596609534E-6	DESIGN
fetch the generated id in a separate query	WITHOUT_CLASSIFICATION	0.9987187320793465	WITHOUT_CLASSIFICATION	0.0012812679206535324	DESIGN
we just hit the last position	WITHOUT_CLASSIFICATION	0.9999996700361018	WITHOUT_CLASSIFICATION	3.2996389823340594E-7	DESIGN
scroll ahead	WITHOUT_CLASSIFICATION	0.9999087733867157	WITHOUT_CLASSIFICATION	9.122661328431005E-5	DESIGN
scroll backward	WITHOUT_CLASSIFICATION	0.9999780935477898	WITHOUT_CLASSIFICATION	2.1906452210157297E-5	DESIGN
we have not yet hit the last result...	WITHOUT_CLASSIFICATION	0.9999994839142201	WITHOUT_CLASSIFICATION	5.160857798193085E-7	DESIGN
Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999472401886241	WITHOUT_CLASSIFICATION	5.275981137581018E-5	DESIGN
State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999946253733921	WITHOUT_CLASSIFICATION	5.374626607843044E-6	DESIGN
Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999942835206136	WITHOUT_CLASSIFICATION	5.7164793863519555E-6	DESIGN
do this when all the properties are updateable since there is a certain likelihood that the information will already be snapshot-cached.	WITHOUT_CLASSIFICATION	0.9777876718200283	WITHOUT_CLASSIFICATION	0.022212328179971732	DESIGN
Inner classes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998724148764	WITHOUT_CLASSIFICATION	1.275851234630222E-7	DESIGN
Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999472401886241	WITHOUT_CLASSIFICATION	5.275981137581018E-5	DESIGN
State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999946253733921	WITHOUT_CLASSIFICATION	5.374626607843044E-6	DESIGN
Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999942835206136	WITHOUT_CLASSIFICATION	5.7164793863519555E-6	DESIGN
Caches	WITHOUT_CLASSIFICATION	0.9999687516751428	WITHOUT_CLASSIFICATION	3.1248324857250376E-5	DESIGN
Generators:	WITHOUT_CLASSIFICATION	0.9995459762746896	WITHOUT_CLASSIFICATION	4.540237253103683E-4	DESIGN
cache region is defined by the root-class in the hierarchy...	WITHOUT_CLASSIFICATION	0.9999917556768083	WITHOUT_CLASSIFICATION	8.244323191667979E-6	DESIGN
check if the detached object being merged is the parent	WITHOUT_CLASSIFICATION	0.9996824976602727	WITHOUT_CLASSIFICATION	3.1750233972724584E-4	DESIGN
after all persisters and named queries are registered	WITHOUT_CLASSIFICATION	0.9999964943056402	WITHOUT_CLASSIFICATION	3.5056943598433104E-6	DESIGN
if we get here, it is possible that we have a proxy 'in the way' of the merge map resolution... NOTE: decided to put this here rather than in the above loop as I was nervous about the performance of the loop-in-loop especially considering this is far more likely the 'edge case'	WITHOUT_CLASSIFICATION	0.9999120436545911	DESIGN	8.795634540899764E-5	WITHOUT_CLASSIFICATION
JNDI + Serialization:	WITHOUT_CLASSIFICATION	0.9999998233192606	WITHOUT_CLASSIFICATION	1.766807393386326E-7	DESIGN
checking for named queries	WITHOUT_CLASSIFICATION	0.9800461625382657	WITHOUT_CLASSIFICATION	0.01995383746173432	DESIGN
stats	WITHOUT_CLASSIFICATION	0.9999373680621262	WITHOUT_CLASSIFICATION	6.26319378738664E-5	DESIGN
EntityNotFoundDelegate	WITHOUT_CLASSIFICATION	0.9983254623533717	WITHOUT_CLASSIFICATION	0.001674537646628298	DESIGN
Check named HQL queries	WITHOUT_CLASSIFICATION	0.9999852827092258	WITHOUT_CLASSIFICATION	1.4717290774266318E-5	DESIGN
this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.962142934472673	WITHOUT_CLASSIFICATION	0.03785706552732718	DESIGN
prevents this session from adding things to cache	WITHOUT_CLASSIFICATION	0.9973373132796229	WITHOUT_CLASSIFICATION	0.0026626867203770285	DESIGN
from javax.naming.Referenceable	WITHOUT_CLASSIFICATION	0.9995699532628475	WITHOUT_CLASSIFICATION	4.300467371524719E-4	DESIGN
look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999415276897338	WITHOUT_CLASSIFICATION	5.847231026618406E-5	DESIGN
for a dynamic-class	WITHOUT_CLASSIFICATION	0.9999800019225041	WITHOUT_CLASSIFICATION	1.9998077495769097E-5	DESIGN
test this entity to see if we must query it	WITHOUT_CLASSIFICATION	0.9997601988324796	WITHOUT_CLASSIFICATION	2.398011675204713E-4	DESIGN
NOTE EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999957700686432	WITHOUT_CLASSIFICATION	4.229931356778122E-6	DESIGN
for backward-compatability	WITHOUT_CLASSIFICATION	0.9999892223420012	WITHOUT_CLASSIFICATION	1.0777657998868263E-5	DESIGN
ignore this error for now	WITHOUT_CLASSIFICATION	0.9999895390230299	WITHOUT_CLASSIFICATION	1.0460976969998705E-5	DESIGN
to stop the class from being unloaded	WITHOUT_CLASSIFICATION	0.9999990443183069	WITHOUT_CLASSIFICATION	9.556816931599073E-7	DESIGN
in case we were deserialized in a different JVM, look for an instance with the same name (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.7086753801334494	WITHOUT_CLASSIFICATION	0.2913246198665506	DESIGN
must add to JNDI _after_ adding to HashMaps, because some JNDI servers use serialization	WITHOUT_CLASSIFICATION	0.9999999980227395	WITHOUT_CLASSIFICATION	1.97726042876105E-9	DESIGN
Make sure this is a defined parameter and check the incoming value type	WITHOUT_CLASSIFICATION	0.9998910349834572	WITHOUT_CLASSIFICATION	1.089650165428082E-4	DESIGN
for each of the defined parameters, make sure its value has been set	WITHOUT_CLASSIFICATION	0.9999990813444104	WITHOUT_CLASSIFICATION	9.186555896650091E-7	DESIGN
we never need to apply locks to the SQL	WITHOUT_CLASSIFICATION	0.9997036053825873	WITHOUT_CLASSIFICATION	2.963946174126412E-4	DESIGN
inserts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999960193710484	WITHOUT_CLASSIFICATION	3.980628951576515E-6	DESIGN
deletes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999865963649582	WITHOUT_CLASSIFICATION	1.3403635041639654E-5	DESIGN
during deserialization, we need to reconnect all proxies and collections to this session, as well as the EntityEntry and CollectionEntry instances; these associations are transient because serialization is used for different things.	WITHOUT_CLASSIFICATION	0.9988595094579393	WITHOUT_CLASSIFICATION	0.0011404905420607568	DESIGN
updates ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999914240071406	WITHOUT_CLASSIFICATION	8.575992859523565E-6	DESIGN
loading ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995784919301	WITHOUT_CLASSIFICATION	4.215080699426731E-7	DESIGN
final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999989273562674	WITHOUT_CLASSIFICATION	1.072643732546699E-6	DESIGN
final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999989273562674	WITHOUT_CLASSIFICATION	1.072643732546699E-6	DESIGN
first, try to load it from the temp PC associated to this SS	WITHOUT_CLASSIFICATION	0.9999945506178676	WITHOUT_CLASSIFICATION	5.449382132477419E-6	DESIGN
if the metadata allowed proxy creation and caller did not request forceful eager loading, generate a proxy	WITHOUT_CLASSIFICATION	0.9999999998566765	WITHOUT_CLASSIFICATION	1.4332346935750902E-10	DESIGN
otherwise immediately materialize it	WITHOUT_CLASSIFICATION	0.9999722229437875	WITHOUT_CLASSIFICATION	2.777705621252247E-5	DESIGN
/	WITHOUT_CLASSIFICATION	0.9999087176347056	WITHOUT_CLASSIFICATION	9.128236529439574E-5	DESIGN
no auto-flushing to support in stateless session	WITHOUT_CLASSIFICATION	0.999356498071657	WITHOUT_CLASSIFICATION	6.435019283428253E-4	DESIGN
after setting values to object, entityMode	WITHOUT_CLASSIFICATION	0.9998028688557797	WITHOUT_CLASSIFICATION	1.9713114422022842E-4	DESIGN
for EJB3	WITHOUT_CLASSIFICATION	0.9999437748863292	WITHOUT_CLASSIFICATION	5.622511367075118E-5	DESIGN
just ignore	WITHOUT_CLASSIFICATION	0.9999967881691891	WITHOUT_CLASSIFICATION	3.211830810919728E-6	DESIGN
do a check	WITHOUT_CLASSIFICATION	0.9995713855010432	WITHOUT_CLASSIFICATION	4.286144989567939E-4	DESIGN
saveOrUpdate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999385184386	WITHOUT_CLASSIFICATION	6.148156144715133E-8	DESIGN
update() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999382415993	WITHOUT_CLASSIFICATION	6.175840070830137E-7	DESIGN
lock() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998710097847	WITHOUT_CLASSIFICATION	1.2899021524529873E-7	DESIGN
persist() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999742381806	WITHOUT_CLASSIFICATION	2.576181941017591E-7	DESIGN
persistOnFlush() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998416042524	WITHOUT_CLASSIFICATION	1.5839574766787915E-7	DESIGN
merge() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996988783308	WITHOUT_CLASSIFICATION	3.0112166919782947E-7	DESIGN
saveOrUpdateCopy() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999118535148	WITHOUT_CLASSIFICATION	8.81464852562688E-8	DESIGN
delete() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997288071311	WITHOUT_CLASSIFICATION	2.7119286897316135E-7	DESIGN
load()/get() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999945640781	WITHOUT_CLASSIFICATION	5.435921897332797E-8	DESIGN
refresh() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995669712202	WITHOUT_CLASSIFICATION	4.3302877984114255E-7	DESIGN
replicate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999988204314382	WITHOUT_CLASSIFICATION	1.179568561827375E-6	DESIGN
do not auto-flush while outside a transaction	WITHOUT_CLASSIFICATION	0.9997300494897892	WITHOUT_CLASSIFICATION	2.699505102108522E-4	DESIGN
this is an internal error of some sort...	WITHOUT_CLASSIFICATION	0.9999628487122332	WITHOUT_CLASSIFICATION	3.71512877668304E-5	DESIGN
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9998613258010471	WITHOUT_CLASSIFICATION	1.38674198952738E-4	DESIGN
only collections belonging to deleted entities are allowed to be dereferenced in the case of orphan delete	WITHOUT_CLASSIFICATION	0.9999967129492312	WITHOUT_CLASSIFICATION	3.287050768866773E-6	DESIGN
if it was previously unreferenced, we need to flush in order to get its state into the database in order to execute query	WITHOUT_CLASSIFICATION	0.9999233723698256	WITHOUT_CLASSIFICATION	7.662763017446823E-5	DESIGN
not for internal use:	WITHOUT_CLASSIFICATION	0.99665271723545	WITHOUT_CLASSIFICATION	0.0033472827645500774	DESIGN
otherwise, we only need to flush if there are in-memory changes to the queried tables	WITHOUT_CLASSIFICATION	0.9999992288319531	WITHOUT_CLASSIFICATION	7.711680468231165E-7	DESIGN
might need to run a different filter entirely after the flush because the collection role may have changed	WITHOUT_CLASSIFICATION	0.9993736276692116	WITHOUT_CLASSIFICATION	6.263723307884825E-4	DESIGN
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9998613258010471	WITHOUT_CLASSIFICATION	1.38674198952738E-4	DESIGN
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9998613258010471	WITHOUT_CLASSIFICATION	1.38674198952738E-4	DESIGN
if it is initialized, see if the underlying instance is contained, since we need to account for the fact that it might have been evicted	WITHOUT_CLASSIFICATION	0.847484708073615	WITHOUT_CLASSIFICATION	0.15251529192638513	DESIGN
basically just an adapted copy of find(CriteriaImpl)	WITHOUT_CLASSIFICATION	0.999998024524249	WITHOUT_CLASSIFICATION	1.97547575104135E-6	DESIGN
it is possible for this method to be called during flush processing, so make certain that we do not accidently initialize an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9985470987708139	WITHOUT_CLASSIFICATION	0.0014529012291860754	DESIGN
nothing to do in a stateful session	WITHOUT_CLASSIFICATION	0.9999059914646572	WITHOUT_CLASSIFICATION	9.400853534279621E-5	DESIGN
ignore	WITHOUT_CLASSIFICATION	0.9999951416255058	WITHOUT_CLASSIFICATION	4.858374494054211E-6	DESIGN
ignore this error for now	WITHOUT_CLASSIFICATION	0.9999895390230299	WITHOUT_CLASSIFICATION	1.0460976969998705E-5	DESIGN
we need to writeObject() on this since interceptor is user defined	WITHOUT_CLASSIFICATION	0.999986144322305	WITHOUT_CLASSIFICATION	1.3855677695032032E-5	DESIGN
the old-time stand-by...	WITHOUT_CLASSIFICATION	0.9999997288704916	WITHOUT_CLASSIFICATION	2.7112950847919924E-7	DESIGN
parameter bind values...	WITHOUT_CLASSIFICATION	0.9999938114454555	WITHOUT_CLASSIFICATION	6.188554544501804E-6	DESIGN
Parameter handling code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998452927829197	WITHOUT_CLASSIFICATION	1.54707217080433E-4	DESIGN
prepend value and type list with null for any positions before the wanted position.	WITHOUT_CLASSIFICATION	0.9999697367520554	WITHOUT_CLASSIFICATION	3.0263247944622002E-5	DESIGN
Execution methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999311867545261	WITHOUT_CLASSIFICATION	6.881324547390541E-5	DESIGN
we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9999463193306404	WITHOUT_CLASSIFICATION	5.368066935956027E-5	DESIGN
we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9999463193306404	WITHOUT_CLASSIFICATION	5.368066935956027E-5	DESIGN
we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.999960978560777	WITHOUT_CLASSIFICATION	3.9021439222952115E-5	DESIGN
we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.999960978560777	WITHOUT_CLASSIFICATION	3.9021439222952115E-5	DESIGN
FieldInterceptor impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998396048365644	WITHOUT_CLASSIFICATION	1.6039516343560576E-4	DESIGN
subclass accesses ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999959227367061	WITHOUT_CLASSIFICATION	4.07726329391033E-6	DESIGN
let's assume that there is only one lazy fetch group, for now!	WITHOUT_CLASSIFICATION	0.9999999545574004	WITHOUT_CLASSIFICATION	4.544259953072111E-8	DESIGN
FieldHandler impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9979270041509491	WITHOUT_CLASSIFICATION	0.0020729958490508103	DESIGN
should not need to grow beyond the size of the total number of columns in the rs	WITHOUT_CLASSIFICATION	0.9999958586360089	WITHOUT_CLASSIFICATION	4.141363991051397E-6	DESIGN
should probably no-op commit/rollback here, at least in JTA scenarios	WITHOUT_CLASSIFICATION	0.7197411866499211	DESIGN	0.2802588133500789	WITHOUT_CLASSIFICATION
Base Expectation impls ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999983605024962	WITHOUT_CLASSIFICATION	1.639497503710848E-6	DESIGN
Various Expectation instances ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999879068786844	WITHOUT_CLASSIFICATION	1.2093121315595901E-5	DESIGN
explicitly perform no checking...	WITHOUT_CLASSIFICATION	0.837193356297203	DESIGN	0.1628066437027969	WITHOUT_CLASSIFICATION
used from testsuite	WITHOUT_CLASSIFICATION	0.99998289166451	WITHOUT_CLASSIFICATION	1.710833548993153E-5	DESIGN
assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999989651009096	WITHOUT_CLASSIFICATION	1.0348990904860458E-6	DESIGN
package	WITHOUT_CLASSIFICATION	0.9996923634291219	WITHOUT_CLASSIFICATION	3.0763657087807996E-4	DESIGN
register synch; stats.connect()	WITHOUT_CLASSIFICATION	0.999996665679685	WITHOUT_CLASSIFICATION	3.3343203149325483E-6	DESIGN
noncritical, swallow and let the other propagate!	WITHOUT_CLASSIFICATION	0.9997442194065439	WITHOUT_CLASSIFICATION	2.557805934561179E-4	DESIGN
calls executeBatch()	WITHOUT_CLASSIFICATION	0.9999893274889904	WITHOUT_CLASSIFICATION	1.067251100956374E-5	DESIGN
no big deal	WITHOUT_CLASSIFICATION	0.9999992229847592	WITHOUT_CLASSIFICATION	7.770152408924443E-7	DESIGN
no big deal	WITHOUT_CLASSIFICATION	0.9999992229847592	WITHOUT_CLASSIFICATION	7.770152408924443E-7	DESIGN
no big deal	WITHOUT_CLASSIFICATION	0.9999992229847592	WITHOUT_CLASSIFICATION	7.770152408924443E-7	DESIGN
sybase driver (jConnect) throwing NPE here in certain cases, but we'll just handle the general "unexpected" case	WITHOUT_CLASSIFICATION	0.9999770486514399	WITHOUT_CLASSIFICATION	2.2951348560095654E-5	DESIGN
see explanation above...	WITHOUT_CLASSIFICATION	0.9999991907103102	WITHOUT_CLASSIFICATION	8.092896898101992E-7	DESIGN
If we are in the process of releasing, no sense checking for aggressive-release possibility.	WITHOUT_CLASSIFICATION	0.9999983765132848	WITHOUT_CLASSIFICATION	1.6234867152446881E-6	DESIGN
EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.999978940465405	WITHOUT_CLASSIFICATION	2.1059534594959822E-5	DESIGN
ResultSet impl ("overridden") ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999736660448459	WITHOUT_CLASSIFICATION	2.633395515407636E-5	DESIGN
ResultSet impl (delegated) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999972067986459	WITHOUT_CLASSIFICATION	2.7932013541127264E-5	DESIGN
refer to comment in StatefulPersistenceContext.addCollection()	WITHOUT_CLASSIFICATION	0.9999996641643071	WITHOUT_CLASSIFICATION	3.358356928121646E-7	DESIGN
ConnectionManager.Callback implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999902367171278	WITHOUT_CLASSIFICATION	9.76328287219896E-6	DESIGN
Note : success = false, because we don't know the outcome of the transaction	WITHOUT_CLASSIFICATION	0.9999995451913095	WITHOUT_CLASSIFICATION	4.548086904035297E-7	DESIGN
we already have a callback registered; either a local (org.hibernate.Transaction) transaction has accepted callback responsibilities, or we have previously registered a transaction synch.	WITHOUT_CLASSIFICATION	0.9999345171837118	WITHOUT_CLASSIFICATION	6.548281628822052E-5	DESIGN
the configured transaction-factory says it only supports local callback mode, so no sense attempting to register a JTA Synchronization	WITHOUT_CLASSIFICATION	0.9998937218731571	WITHOUT_CLASSIFICATION	1.0627812684286904E-4	DESIGN
transactions marked for rollback-only cause some TM impls to throw exceptions	WITHOUT_CLASSIFICATION	0.9997048603299328	WITHOUT_CLASSIFICATION	2.9513967006720743E-4	DESIGN
serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998119060579	WITHOUT_CLASSIFICATION	1.88093942161665E-7	DESIGN
postInitialize() will be called after initialization	WITHOUT_CLASSIFICATION	0.9999999624581043	WITHOUT_CLASSIFICATION	3.754189574665399E-8	DESIGN
cannot handle single quotes	WITHOUT_CLASSIFICATION	0.9999456130012291	WITHOUT_CLASSIFICATION	5.4386998770899824E-5	DESIGN
todo : for 4.0 private static final Logger log = LoggerFactory.getLogger( SQLStatementLogger.class ); this is the legacy logging 'category'...	WITHOUT_CLASSIFICATION	0.9992203678857903	WITHOUT_CLASSIFICATION	7.796321142096882E-4	DESIGN
note that for sequential scrolling, we make the assumption that the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999794291990246	WITHOUT_CLASSIFICATION	2.057080097544333E-5	DESIGN
don't even bother trying to read further	WITHOUT_CLASSIFICATION	0.9995229911073162	WITHOUT_CLASSIFICATION	4.7700889268388944E-4	DESIGN
don't even bother trying to read any further	WITHOUT_CLASSIFICATION	0.9994495300063322	WITHOUT_CLASSIFICATION	5.504699936678083E-4	DESIGN
position cursor to the last row	WITHOUT_CLASSIFICATION	0.9999999676301666	WITHOUT_CLASSIFICATION	3.236983342147617E-8	DESIGN
sequentially read the result set in reverse until we recognize a change in the key value. At that point, we are pointed at the last physical sequential row for the logical row in which we are interested in processing	WITHOUT_CLASSIFICATION	0.9999999297264867	WITHOUT_CLASSIFICATION	7.027351333437889E-8	DESIGN
Read backwards until we read past the first physical sequential row with the key we are interested in loading	WITHOUT_CLASSIFICATION	0.9999999834467576	WITHOUT_CLASSIFICATION	1.6553242378660068E-8	DESIGN
Finally, read ahead one row to position result set cursor at the first physical row we are interested in loading	WITHOUT_CLASSIFICATION	0.9999158827996087	WITHOUT_CLASSIFICATION	8.411720039119189E-5	DESIGN
now get an existing proxy for each row element (if there is one)	WITHOUT_CLASSIFICATION	0.999999707151807	WITHOUT_CLASSIFICATION	2.9284819310859946E-7	DESIGN
force the proxy to resolve itself	WITHOUT_CLASSIFICATION	0.9999694587179124	WITHOUT_CLASSIFICATION	3.0541282087621956E-5	DESIGN
this is equivalent to the old behavior...	WITHOUT_CLASSIFICATION	0.9999312240001628	WITHOUT_CLASSIFICATION	6.877599983728337E-5	DESIGN
if null, owner will be retrieved from session	WITHOUT_CLASSIFICATION	0.9999924267788233	WITHOUT_CLASSIFICATION	7.573221176815579E-6	DESIGN
final String queryString,	WITHOUT_CLASSIFICATION	0.9999638208603564	WITHOUT_CLASSIFICATION	3.617913964363973E-5	DESIGN
if it was a reference to self, don't need to nullify unless we are using native id generation, in which case we definitely need to nullify	WITHOUT_CLASSIFICATION	0.9999999504086288	WITHOUT_CLASSIFICATION	4.959137126032196E-8	DESIGN
end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999991208749432	WITHOUT_CLASSIFICATION	8.791250566856743E-7	DESIGN
in an effort to avoid concurrent-modification-exceptions (from potential recursive calls back through here as a result of the eventual call to PersistentCollection#endRead), we scan the internal loadingCollections map for matches and store those matches in a temp collection. the temp collection is then used to "drive" the #endRead processing.	WITHOUT_CLASSIFICATION	0.9990284022958541	WITHOUT_CLASSIFICATION	9.715977041459625E-4	DESIGN
we can reuse it for each row	WITHOUT_CLASSIFICATION	0.9999978783504306	WITHOUT_CLASSIFICATION	2.1216495693712883E-6	DESIGN
can't reuse in this case	WITHOUT_CLASSIFICATION	0.9999427343564705	WITHOUT_CLASSIFICATION	5.726564352951143E-5	DESIGN
First we need to suspend any current JTA transaction and obtain a JDBC connection	WITHOUT_CLASSIFICATION	0.999776466338384	WITHOUT_CLASSIFICATION	2.2353366161594588E-4	DESIGN
getResultList(results);	WITHOUT_CLASSIFICATION	0.9999997467855096	WITHOUT_CLASSIFICATION	2.5321449032961515E-7	DESIGN
if we only returned one entity, query by key is more efficient	WITHOUT_CLASSIFICATION	0.9998620752384475	WITHOUT_CLASSIFICATION	1.3792476155253977E-4	DESIGN
a collection loaded in the current session can not possibly be the collection belonging to the entity passed to update()	WITHOUT_CLASSIFICATION	0.999997741684934	WITHOUT_CLASSIFICATION	2.258315065877352E-6	DESIGN
handle empty collection	WITHOUT_CLASSIFICATION	0.9999435468080379	WITHOUT_CLASSIFICATION	5.645319196216997E-5	DESIGN
else no collection element, but also no owner	WITHOUT_CLASSIFICATION	0.9999998817008641	WITHOUT_CLASSIFICATION	1.1829913586145336E-7	DESIGN
handle empty collections	WITHOUT_CLASSIFICATION	0.9999647801506262	WITHOUT_CLASSIFICATION	3.5219849373854415E-5	DESIGN
else this is not a collection initializer (and empty collections will be detected by looking for the owner's identifier in the result set)	WITHOUT_CLASSIFICATION	0.9999856388586752	WITHOUT_CLASSIFICATION	1.4361141324826374E-5	DESIGN
validate() instances of Validatable	WITHOUT_CLASSIFICATION	0.9999339097770266	WITHOUT_CLASSIFICATION	6.609022297335053E-5	DESIGN
if we know there is exactly 1 row, we can skip. it would be great if we could _always_ skip this; it is a problem for <key-many-to-one>	WITHOUT_CLASSIFICATION	0.9659347584308937	DESIGN	0.034065241569106265	WITHOUT_CLASSIFICATION
remove all collections for the entity from the session-level cache	WITHOUT_CLASSIFICATION	0.99956715329258	WITHOUT_CLASSIFICATION	4.328467074201046E-4	DESIGN
null version means the object is in the process of being loaded somewhere else in the ResultSet	WITHOUT_CLASSIFICATION	0.9998283996538057	WITHOUT_CLASSIFICATION	1.7160034619426032E-4	DESIGN
problematic for <key-many-to-one>!	WITHOUT_CLASSIFICATION	0.9997859954825737	WITHOUT_CLASSIFICATION	2.140045174262891E-4	DESIGN
use the id passed in	WITHOUT_CLASSIFICATION	0.9999990948742807	WITHOUT_CLASSIFICATION	9.051257193729062E-7	DESIGN
do nothing	WITHOUT_CLASSIFICATION	0.9999914833051887	WITHOUT_CLASSIFICATION	8.516694811271192E-6	DESIGN
prefer re-generation of identity!	WITHOUT_CLASSIFICATION	0.9998713788998214	WITHOUT_CLASSIFICATION	1.286211001786516E-4	DESIGN
no point doing this if NONE was requested	WITHOUT_CLASSIFICATION	0.9999903405129492	WITHOUT_CLASSIFICATION	9.659487050828766E-6	DESIGN
If the object is already loaded, return the loaded one	WITHOUT_CLASSIFICATION	0.9999966493205207	WITHOUT_CLASSIFICATION	3.350679479395469E-6	DESIGN
its already loaded so don't need to hydrate it	WITHOUT_CLASSIFICATION	0.9999848837449605	WITHOUT_CLASSIFICATION	1.5116255039332153E-5	DESIGN
cascade the refresh prior to refreshing this entity	WITHOUT_CLASSIFICATION	0.9994195611884759	WITHOUT_CLASSIFICATION	5.804388115240995E-4	DESIGN
the load() which takes an entity does not pass an entityName	WITHOUT_CLASSIFICATION	0.9999992723835046	WITHOUT_CLASSIFICATION	7.276164952554552E-7	DESIGN
we only check the version when _upgrading_ lock modes	WITHOUT_CLASSIFICATION	0.9999995184209389	WITHOUT_CLASSIFICATION	4.815790610179472E-7	DESIGN
look for a proxy	WITHOUT_CLASSIFICATION	0.9999831120846754	WITHOUT_CLASSIFICATION	1.688791532469883E-5	DESIGN
we need to upgrade the lock mode to the mode requested	WITHOUT_CLASSIFICATION	0.9985032543467389	WITHOUT_CLASSIFICATION	0.0014967456532610538	DESIGN
its the given optional object	WITHOUT_CLASSIFICATION	0.9999996261825544	WITHOUT_CLASSIFICATION	3.738174455493452E-7	DESIGN
instantiate a new instance	WITHOUT_CLASSIFICATION	0.9999209217008649	WITHOUT_CLASSIFICATION	7.907829913517794E-5	DESIGN
need to hydrate it.	WITHOUT_CLASSIFICATION	0.9954302015425642	WITHOUT_CLASSIFICATION	0.004569798457435812	DESIGN
return a newly loaded object	WITHOUT_CLASSIFICATION	0.9996866788806938	WITHOUT_CLASSIFICATION	3.133211193061008E-4	DESIGN
will be ignored, using the existing Entry instead	WITHOUT_CLASSIFICATION	0.9999999752106978	WITHOUT_CLASSIFICATION	2.4789302164739565E-8	DESIGN
key is an entity involved with the operation performed by the listener; value can be either a copy of the entity or the entity itself	WITHOUT_CLASSIFICATION	0.9999946733725469	WITHOUT_CLASSIFICATION	5.326627453112413E-6	DESIGN
materialize associations (and initialize the object) later	WITHOUT_CLASSIFICATION	0.9999563920541363	WITHOUT_CLASSIFICATION	4.360794586367363E-5	DESIGN
Get the persister for the _subclass_	WITHOUT_CLASSIFICATION	0.9999987870225553	WITHOUT_CLASSIFICATION	1.2129774447961163E-6	DESIGN
ok in normal Hibernate usage to delete a detached entity; JPA however forbids it, thus this is a hook for HEM to affect this behavior	WITHOUT_CLASSIFICATION	0.9998696455282555	WITHOUT_CLASSIFICATION	1.3035447174460335E-4	DESIGN
the entry will be removed after the flush, and will no longer override the stale snapshot This is now handled by removeEntity() in EntityDeleteAction persistenceContext.removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.999998112171873	WITHOUT_CLASSIFICATION	1.8878281270589186E-6	DESIGN
addInitializedCollection(collection, persister, id);	WITHOUT_CLASSIFICATION	0.9999999656178981	WITHOUT_CLASSIFICATION	3.43821019991595E-8	DESIGN
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.999995451139886	WITHOUT_CLASSIFICATION	4.548860114026596E-6	DESIGN
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.999995451139886	WITHOUT_CLASSIFICATION	4.548860114026596E-6	DESIGN
|| oj.getJoinable().consumesCollectionAlias()	WITHOUT_CLASSIFICATION	0.999999813730999	WITHOUT_CLASSIFICATION	1.8626900096479582E-7	DESIGN
here we do not bother with the discriminator.	WITHOUT_CLASSIFICATION	0.9998854920775315	WITHOUT_CLASSIFICATION	1.1450792246838101E-4	DESIGN
Code to handle subclasses of topClass	WITHOUT_CLASSIFICATION	0.9998615301158645	WITHOUT_CLASSIFICATION	1.3846988413536654E-4	DESIGN
woops we got an instance of another class hierarchy branch	WITHOUT_CLASSIFICATION	0.9975024578800255	WITHOUT_CLASSIFICATION	0.002497542119974556	DESIGN
we can go straight to the first required row	WITHOUT_CLASSIFICATION	0.9999926306093365	WITHOUT_CLASSIFICATION	7.369390663470921E-6	DESIGN
we need to step through the rows one row at a time (slow)	WITHOUT_CLASSIFICATION	0.9998126402509542	WITHOUT_CLASSIFICATION	1.8735974904592607E-4	DESIGN
synchronized to avoid multi-thread access issues; defined as method synch to avoid potential deadlock issues due to nature of code.	WITHOUT_CLASSIFICATION	0.9999996147452511	WITHOUT_CLASSIFICATION	3.852547489558371E-7	DESIGN
Allows various loaders (ok mainly the QueryLoader :) to check whether scrolling of their result set should be allowed. By default it is allowed.	WITHOUT_CLASSIFICATION	0.9999951939787216	WITHOUT_CLASSIFICATION	4.8060212783799135E-6	DESIGN
before adding to collection!	WITHOUT_CLASSIFICATION	0.9999613869789882	WITHOUT_CLASSIFICATION	3.8613021011820326E-5	DESIGN
if the current depth is 0, the root thing being loaded is the many-to-many collection itself. Here, it is alright to use an inner join...	WITHOUT_CLASSIFICATION	0.9999995360925885	WITHOUT_CLASSIFICATION	4.639074115016692E-7	DESIGN
operations which cascade as far as the collection also cascade to collection elements	WITHOUT_CLASSIFICATION	0.999999308415923	WITHOUT_CLASSIFICATION	6.915840769343399E-7	DESIGN
simple, because we can't have a one-to-one or a collection (or even a property-ref) in a composite-element:	WITHOUT_CLASSIFICATION	0.9999999540116038	WITHOUT_CLASSIFICATION	4.598839615007257E-8	DESIGN
a composite key	WITHOUT_CLASSIFICATION	0.9999957642990863	WITHOUT_CLASSIFICATION	4.235700913642525E-6	DESIGN
if no batch, use "foo = ? and bar = ?"	WITHOUT_CLASSIFICATION	0.9999572899264746	WITHOUT_CLASSIFICATION	4.271007352530433E-5	DESIGN
it must be a collection fetch	WITHOUT_CLASSIFICATION	0.9999453066830086	WITHOUT_CLASSIFICATION	5.469331699141345E-5	DESIGN
needed later for many-to-many/filter application	WITHOUT_CLASSIFICATION	0.989388272555734	WITHOUT_CLASSIFICATION	0.010611727444265952	DESIGN
&& etype.isReferenceToPrimaryKey()	WITHOUT_CLASSIFICATION	0.9999984822568555	WITHOUT_CLASSIFICATION	1.5177431445807913E-6	DESIGN
it might still need to apply a collection ordering based on a many-to-many defined order-by...	WITHOUT_CLASSIFICATION	0.9827367781315545	WITHOUT_CLASSIFICATION	0.01726322186844546	DESIGN
if a composite key, use "( (foo = ? and bar = ?) or (foo = ? and bar = ?) )" for batching TODO: unnecessary for databases with ANSI-style joins	WITHOUT_CLASSIFICATION	0.5138159994718345	WITHOUT_CLASSIFICATION	0.48618400052816535	DESIGN
belong to other persister belong to other persister	WITHOUT_CLASSIFICATION	0.9999563613534351	WITHOUT_CLASSIFICATION	4.3638646564893135E-5	DESIGN
we found it	WITHOUT_CLASSIFICATION	0.9999928614942953	WITHOUT_CLASSIFICATION	7.138505704590662E-6	DESIGN
we can use an inner join for the many-to-many	WITHOUT_CLASSIFICATION	0.9999956639931306	WITHOUT_CLASSIFICATION	4.336006869456988E-6	DESIGN
disable a join back to this same association	WITHOUT_CLASSIFICATION	0.998949436131286	WITHOUT_CLASSIFICATION	0.0010505638687139567	DESIGN
NOTE: unlike all other Loaders, this one is NOT multithreaded, or cacheable!!	WITHOUT_CLASSIFICATION	0.9994293465705801	WITHOUT_CLASSIFICATION	5.70653429419962E-4	DESIGN
the user visible aliases, which are unknown to the superclass, these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999999996903249	WITHOUT_CLASSIFICATION	3.0967508184318894E-10	DESIGN
root entity comes last	WITHOUT_CLASSIFICATION	0.999955292528695	WITHOUT_CLASSIFICATION	4.470747130501707E-5	DESIGN
deliberately ignore return value!	WITHOUT_CLASSIFICATION	0.9999968442133577	WITHOUT_CLASSIFICATION	3.1557866424281243E-6	DESIGN
alias may be null EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999636718767684	WITHOUT_CLASSIFICATION	3.6328123231567E-5	DESIGN
if it is a compound path	WITHOUT_CLASSIFICATION	0.9999181077717708	WITHOUT_CLASSIFICATION	8.189222822921886E-5	DESIGN
otherwise assume the parent is the the criteria that created us	WITHOUT_CLASSIFICATION	0.9997390048952272	WITHOUT_CLASSIFICATION	2.6099510477288734E-4	DESIGN
if its the root criteria, we are done	WITHOUT_CLASSIFICATION	0.9999965212236718	WITHOUT_CLASSIFICATION	3.4787763282636146E-6	DESIGN
otherwise, recurse	WITHOUT_CLASSIFICATION	0.9999456286178361	WITHOUT_CLASSIFICATION	5.437138216397851E-5	DESIGN
the criteria instance	WITHOUT_CLASSIFICATION	0.9999757420870201	WITHOUT_CLASSIFICATION	2.4257912979918488E-5	DESIGN
the entity name	WITHOUT_CLASSIFICATION	0.9999860389496734	WITHOUT_CLASSIFICATION	1.396105032642887E-5	DESIGN
not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9958655313120413	WITHOUT_CLASSIFICATION	0.004134468687958766	DESIGN
not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9958655313120413	WITHOUT_CLASSIFICATION	0.004134468687958766	DESIGN
it refers to an alias of a projection	WITHOUT_CLASSIFICATION	0.999999562409415	WITHOUT_CLASSIFICATION	4.3759058495263603E-7	DESIGN
should never happen, i think	WITHOUT_CLASSIFICATION	0.9999697803740311	WITHOUT_CLASSIFICATION	3.0219625968872812E-5	DESIGN
Detect discriminator values...	WITHOUT_CLASSIFICATION	0.9996778424513645	WITHOUT_CLASSIFICATION	3.221575486355198E-4	DESIGN
Convert the string value into the proper type.	WITHOUT_CLASSIFICATION	0.9999365994873669	WITHOUT_CLASSIFICATION	6.340051263310404E-5	DESIGN
and the qualifier is not the alias of this criteria -> check to see if we belong to some criteria other than the one that created us	WITHOUT_CLASSIFICATION	0.9999328153026896	WITHOUT_CLASSIFICATION	6.718469731038065E-5	DESIGN
it does not refer to an alias of a projection, look for a property	WITHOUT_CLASSIFICATION	0.9999860567880584	WITHOUT_CLASSIFICATION	1.3943211941625937E-5	DESIGN
Otherwise, this is an ordinary value.	WITHOUT_CLASSIFICATION	0.9999987294512729	WITHOUT_CLASSIFICATION	1.2705487270367047E-6	DESIGN
Currently not cachable if autodiscover types is in effect (e.g. "select ...")	WITHOUT_CLASSIFICATION	0.999969736784608	WITHOUT_CLASSIFICATION	3.026321539203142E-5	DESIGN
private final String[] sqlAliases; private final String[] sqlAliasSuffixes;	WITHOUT_CLASSIFICATION	0.9996728585056178	WITHOUT_CLASSIFICATION	3.27141494382181E-4	DESIGN
this is only needed (afaict) for ResultTransformer processing...	WITHOUT_CLASSIFICATION	0.9855379818614421	WITHOUT_CLASSIFICATION	0.014462018138557827	DESIGN
determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999992743179025	WITHOUT_CLASSIFICATION	7.256820974992435E-7	DESIGN
build an array with indices equal to the total number of actual returns in the result Hibernate will return for this query (scalars + non-scalars)	WITHOUT_CLASSIFICATION	0.9999999189208965	WITHOUT_CLASSIFICATION	8.10791035116759E-8	DESIGN
replace {....} with corresponding column aliases	WITHOUT_CLASSIFICATION	0.9994027080440019	WITHOUT_CLASSIFICATION	5.972919559981464E-4	DESIGN
No additional open braces found in the string, append the rest of the string in its entirty and quit this loop	WITHOUT_CLASSIFICATION	0.9999960352690663	WITHOUT_CLASSIFICATION	3.9647309336706026E-6	DESIGN
apend everything up until the next encountered open brace	WITHOUT_CLASSIFICATION	0.9999926928857671	WITHOUT_CLASSIFICATION	7.30711423298033E-6	DESIGN
it is a simple table alias {foo}	WITHOUT_CLASSIFICATION	0.9999998371509164	WITHOUT_CLASSIFICATION	1.6284908357177134E-7	DESIGN
passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9995547558081272	WITHOUT_CLASSIFICATION	4.4524419187278526E-4	DESIGN
passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9995547558081272	WITHOUT_CLASSIFICATION	4.4524419187278526E-4	DESIGN
The current alias is referencing the collection to be eagerly fetched	WITHOUT_CLASSIFICATION	0.9999994644382173	WITHOUT_CLASSIFICATION	5.355617826716964E-7	DESIGN
it is a property reference {foo.bar}	WITHOUT_CLASSIFICATION	0.9999942845207752	WITHOUT_CLASSIFICATION	5.715479224741587E-6	DESIGN
Possibly handle :something parameters for the query ?	WITHOUT_CLASSIFICATION	0.9951421760650937	WITHOUT_CLASSIFICATION	0.004857823934906302	DESIGN
Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999998713598056	WITHOUT_CLASSIFICATION	1.2864019445482454E-7	DESIGN
private final List persisters = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999999746341874	WITHOUT_CLASSIFICATION	2.536581262179315E-8	DESIGN
package	WITHOUT_CLASSIFICATION	0.9996923634291219	WITHOUT_CLASSIFICATION	3.0763657087807996E-4	DESIGN
NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.99994203353622	WITHOUT_CLASSIFICATION	5.796646377987851E-5	DESIGN
private final List scalarTypes = new ArrayList(); private final List scalarColumnAliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999999952964475	WITHOUT_CLASSIFICATION	4.703552485728577E-9	DESIGN
Now, process the returns	WITHOUT_CLASSIFICATION	0.9999979873820903	WITHOUT_CLASSIFICATION	2.0126179097416545E-6	DESIGN
private List collectionOwnerAliases = new ArrayList(); private List collectionAliases = new ArrayList(); private List collectionPersisters = new ArrayList(); private List collectionResults = new ArrayList();	WITHOUT_CLASSIFICATION	0.999999999941957	WITHOUT_CLASSIFICATION	5.8043042410162857E-11	DESIGN
already been processed...	WITHOUT_CLASSIFICATION	0.9999283722258984	WITHOUT_CLASSIFICATION	7.162777410168439E-5	DESIGN
already been processed...	WITHOUT_CLASSIFICATION	0.9999283722258984	WITHOUT_CLASSIFICATION	7.162777410168439E-5	DESIGN
Make sure the owner alias is known...	WITHOUT_CLASSIFICATION	0.9999995266920877	WITHOUT_CLASSIFICATION	4.7330791221939794E-7	DESIGN
first, break down the returns into maps keyed by alias so that role returns can be more easily resolved to their owners	WITHOUT_CLASSIFICATION	0.9672433732278178	WITHOUT_CLASSIFICATION	0.032756626772182156	DESIGN
scalarColumnAliases.add( typeReturn.getColumnAlias() ); scalarTypes.add( typeReturn.getType() );	WITHOUT_CLASSIFICATION	0.9999994660433482	WITHOUT_CLASSIFICATION	5.339566517728155E-7	DESIGN
If this return's alias has not been processed yet, do so b4 further processing of this return	WITHOUT_CLASSIFICATION	0.999996200680185	WITHOUT_CLASSIFICATION	3.7993198150376123E-6	DESIGN
collectionOwnerAliases.add( ownerAlias );	WITHOUT_CLASSIFICATION	0.9999998568259827	WITHOUT_CLASSIFICATION	1.4317401739106224E-7	DESIGN
for merging of versioned entities, we consider the version having been changed only when: 1) the two version values are different; AND 2) The target actually represents database state! This second condition is a special case which allows an entity to be merged during the same transaction (though during a seperate operation) in which it was originally persisted/saved	WITHOUT_CLASSIFICATION	0.9999444700874819	WITHOUT_CLASSIFICATION	5.552991251814275E-5	DESIGN
this is the second pass through on a merge op, so here we limit the replacement to associations types (value types were already replaced during the first pass)	WITHOUT_CLASSIFICATION	0.5537410806799599	DESIGN	0.44625891932004	WITHOUT_CLASSIFICATION
EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999948601367111	WITHOUT_CLASSIFICATION	5.139863288838421E-6	DESIGN
cascade-save to collections AFTER the collection owner was saved	WITHOUT_CLASSIFICATION	0.9999850532731892	WITHOUT_CLASSIFICATION	1.4946726810789197E-5	DESIGN
Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999996337759258	WITHOUT_CLASSIFICATION	3.662240742032815E-7	DESIGN
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999993520086513	WITHOUT_CLASSIFICATION	6.479913486537026E-7	DESIGN
currently only the Hibernate-supplied DbTimestampType is supported here	WITHOUT_CLASSIFICATION	0.9994996949840608	WITHOUT_CLASSIFICATION	5.003050159392088E-4	DESIGN
This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.999179966035094	WITHOUT_CLASSIFICATION	8.200339649059539E-4	DESIGN
make a new one	WITHOUT_CLASSIFICATION	0.9999851399230407	WITHOUT_CLASSIFICATION	1.4860076959293557E-5	DESIGN
not so sure this is even valid subtree. but if it was, it'd represent two unrelated table references...	WITHOUT_CLASSIFICATION	0.9999618754392448	WITHOUT_CLASSIFICATION	3.812456075519888E-5	DESIGN
(NOT (GT a b) ) => (LE a b)	WITHOUT_CLASSIFICATION	0.9999842389286654	WITHOUT_CLASSIFICATION	1.5761071334647747E-5	DESIGN
private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9994899488239531	WITHOUT_CLASSIFICATION	5.100511760468088E-4	DESIGN
include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9999991210347051	WITHOUT_CLASSIFICATION	8.78965294778689E-7	DESIGN
sqlResultTypes = selectClause.getSqlResultTypes();	WITHOUT_CLASSIFICATION	0.9999999908030917	WITHOUT_CLASSIFICATION	9.19690828074641E-9	DESIGN
by default	WITHOUT_CLASSIFICATION	0.9999887754560866	WITHOUT_CLASSIFICATION	1.1224543913384143E-5	DESIGN
This is now handled earlier in this method.	WITHOUT_CLASSIFICATION	0.9997987423929721	WITHOUT_CLASSIFICATION	2.012576070280519E-4	DESIGN
-- Loader implementation --	WITHOUT_CLASSIFICATION	0.9999871496081436	WITHOUT_CLASSIFICATION	1.285039185641802E-5	DESIGN
-- Loader overrides --	WITHOUT_CLASSIFICATION	0.9999991575823146	WITHOUT_CLASSIFICATION	8.424176855205346E-7	DESIGN
(NOT (IS_NULL a b) ) => (IS_NOT_NULL a b)	WITHOUT_CLASSIFICATION	0.9999955132424897	WITHOUT_CLASSIFICATION	4.4867575102848955E-6	DESIGN
NONE, because its the requested lock mode, not the actual!	WITHOUT_CLASSIFICATION	0.9999996209154162	WITHOUT_CLASSIFICATION	3.7908458383993733E-7	DESIGN
meant to handle dynamic instantiation queries...	WITHOUT_CLASSIFICATION	0.9997743573406637	WITHOUT_CLASSIFICATION	2.256426593362002E-4	DESIGN
--- Query translator methods ---	WITHOUT_CLASSIFICATION	0.9994277180067322	WITHOUT_CLASSIFICATION	5.722819932678493E-4	DESIGN
-- Implementation private methods --	WITHOUT_CLASSIFICATION	0.9997632542840285	WITHOUT_CLASSIFICATION	2.3674571597148255E-4	DESIGN
deduplicate unique constraints sharing the same columns this is needed by Hibernate Annotations since it creates automagically unique constraints for the user	WITHOUT_CLASSIFICATION	0.9999317147493785	WITHOUT_CLASSIFICATION	6.828525062159746E-5	DESIGN
Try to find out the name of the primary key to create it as identity if the IdentityGenerator is used	WITHOUT_CLASSIFICATION	0.999926459181202	WITHOUT_CLASSIFICATION	7.354081879805719E-5	DESIGN
to support dialects that have their own identity data type	WITHOUT_CLASSIFICATION	0.9996416571021433	WITHOUT_CLASSIFICATION	3.583428978567266E-4	DESIGN
Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999997728732729	WITHOUT_CLASSIFICATION	2.2712672710652626E-7	DESIGN
used also for generation of FK names!	WITHOUT_CLASSIFICATION	0.9977694494166063	WITHOUT_CLASSIFICATION	0.0022305505833937864	DESIGN
usually useless	WITHOUT_CLASSIFICATION	0.9998679788716688	WITHOUT_CLASSIFICATION	1.3202112833118556E-4	DESIGN
added this caching as I noticed that getType() is being called multiple times...	WITHOUT_CLASSIFICATION	0.999933739065699	WITHOUT_CLASSIFICATION	6.626093430101487E-5	DESIGN
do not add unique constraint on DB not supporting unique and nullable columns	WITHOUT_CLASSIFICATION	0.9999999652411838	WITHOUT_CLASSIFICATION	3.475881616432355E-8	DESIGN
for backward compatibility, disable this:	WITHOUT_CLASSIFICATION	0.9999972136529336	WITHOUT_CLASSIFICATION	2.7863470663480913E-6	DESIGN
may be final may be final may be final	WITHOUT_CLASSIFICATION	0.9998031222234266	WITHOUT_CLASSIFICATION	1.96877776573266E-4	DESIGN
may be final	WITHOUT_CLASSIFICATION	0.9999453229430666	WITHOUT_CLASSIFICATION	5.4677056933506695E-5	DESIGN
may be final	WITHOUT_CLASSIFICATION	0.9999453229430666	WITHOUT_CLASSIFICATION	5.4677056933506695E-5	DESIGN
Custom SQL	WITHOUT_CLASSIFICATION	0.9999343092028989	WITHOUT_CLASSIFICATION	6.569079710105532E-5	DESIGN
Primary key constraint	WITHOUT_CLASSIFICATION	0.9999990164816558	WITHOUT_CLASSIFICATION	9.83518344228155E-7	DESIGN
the root of the incoming property path matched one of the embedded composite identifier properties	WITHOUT_CLASSIFICATION	0.9999985811240906	WITHOUT_CLASSIFICATION	1.4188759094403547E-6	DESIGN
ignore it...	WITHOUT_CLASSIFICATION	0.9999691449137839	WITHOUT_CLASSIFICATION	3.0855086216237005E-5	DESIGN
flat recursive algorithm	WITHOUT_CLASSIFICATION	0.9999978876178816	WITHOUT_CLASSIFICATION	2.1123821184476955E-6	DESIGN
an identifier mapper => getKey will be included in the getNonDuplicatedPropertyIterator() and checked later, so it needs to be excluded	WITHOUT_CLASSIFICATION	0.9999435826989406	WITHOUT_CLASSIFICATION	5.64173010594919E-5	DESIGN
if the hibernate-mapping did not specify a schema/catalog, use the defaults specified by properties - but note that if the schema/catalog were specified in hibernate-mapping, or as params, they will already be initialized and will override the values set here (they are in identifierGeneratorProperties)	WITHOUT_CLASSIFICATION	0.9999999987676371	WITHOUT_CLASSIFICATION	1.2323629459003202E-9	DESIGN
pass the entity-name, if not a collection-id	WITHOUT_CLASSIFICATION	0.999999294809274	WITHOUT_CLASSIFICATION	7.051907259441738E-7	DESIGN
Custom SQL	WITHOUT_CLASSIFICATION	0.9999343092028989	WITHOUT_CLASSIFICATION	6.569079710105532E-5	DESIGN
Primary key constraint	WITHOUT_CLASSIFICATION	0.9999990164816558	WITHOUT_CLASSIFICATION	9.83518344228155E-7	DESIGN
pass the column name (a generated id almost always has a single column)	WITHOUT_CLASSIFICATION	0.9999785933962282	WITHOUT_CLASSIFICATION	2.140660377184656E-5	DESIGN
needed to satisfy KeyValue	WITHOUT_CLASSIFICATION	0.9973817944710733	WITHOUT_CLASSIFICATION	0.002618205528926609	DESIGN
empty means no scoping	WITHOUT_CLASSIFICATION	0.9998629419681838	WITHOUT_CLASSIFICATION	1.3705803181614348E-4	DESIGN
index should be last column listed	WITHOUT_CLASSIFICATION	0.9999884048376722	WITHOUT_CLASSIFICATION	1.1595162327774235E-5	DESIGN
if it is a formula index, use the element columns in the PK	WITHOUT_CLASSIFICATION	0.9999990724399903	WITHOUT_CLASSIFICATION	9.275600096712425E-7	DESIGN
don't create a unique key, 'cos some databases don't like a UK on nullable columns	WITHOUT_CLASSIFICATION	0.9999853899055776	WITHOUT_CLASSIFICATION	1.4610094422280832E-5	DESIGN
ArrayList list = new ArrayList();list.addAll( getKey().getConstraintColumns() );list.addAll( getIndex().getConstraintColumns() );getCollectionTable().createUniqueKey(list);	WITHOUT_CLASSIFICATION	0.9999999999126904	WITHOUT_CLASSIFICATION	8.730962843794338E-11	DESIGN
}	WITHOUT_CLASSIFICATION	0.9999229981082406	WITHOUT_CLASSIFICATION	7.700189175949038E-5	DESIGN
no foreign key element of for a one-to-many	WITHOUT_CLASSIFICATION	0.999997324546903	WITHOUT_CLASSIFICATION	2.675453096968478E-6	DESIGN
TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.7422693453408449	DESIGN	0.25773065465915507	WITHOUT_CLASSIFICATION
the case of a foreign key to something other than the pk is handled in createPropertyRefConstraints	WITHOUT_CLASSIFICATION	0.9999999946697461	WITHOUT_CLASSIFICATION	5.330253938238171E-9	DESIGN
TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.7422693453408449	DESIGN	0.25773065465915507	WITHOUT_CLASSIFICATION
if the property mapping consists of all formulas, make it non-updateable	WITHOUT_CLASSIFICATION	0.9999999980350996	WITHOUT_CLASSIFICATION	1.9649003717549773E-9	DESIGN
columnUpdateability.length==0 ||	WITHOUT_CLASSIFICATION	0.9999989201465893	WITHOUT_CLASSIFICATION	1.0798534106382177E-6	DESIGN
if the property mapping consists of all formulas, make it insertable	WITHOUT_CLASSIFICATION	0.9999999697702798	WITHOUT_CLASSIFICATION	3.0229720148085893E-8	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996591544783	WITHOUT_CLASSIFICATION	3.408455217205251E-7	DESIGN
expected type is intrinsic here...	WITHOUT_CLASSIFICATION	0.9999066488975138	WITHOUT_CLASSIFICATION	9.335110248619249E-5	DESIGN
}	WITHOUT_CLASSIFICATION	0.9999229981082406	WITHOUT_CLASSIFICATION	7.700189175949038E-5	DESIGN
}	WITHOUT_CLASSIFICATION	0.9999229981082406	WITHOUT_CLASSIFICATION	7.700189175949038E-5	DESIGN
return memberPersister.getPropertyType(propertyName);	WITHOUT_CLASSIFICATION	0.9999922228778775	WITHOUT_CLASSIFICATION	7.777122122465347E-6	DESIGN
return memberPersister.toColumns(alias, propertyName);	WITHOUT_CLASSIFICATION	0.9999895975999714	WITHOUT_CLASSIFICATION	1.0402400028562277E-5	DESIGN
return memberPersister.getType();	WITHOUT_CLASSIFICATION	0.9999985285586114	WITHOUT_CLASSIFICATION	1.4714413886579636E-6	DESIGN
&& !indexIsFormula	WITHOUT_CLASSIFICATION	0.9999974486005178	WITHOUT_CLASSIFICATION	2.551399482279013E-6	DESIGN
return !isOneToMany();	WITHOUT_CLASSIFICATION	0.9999988920174089	WITHOUT_CLASSIFICATION	1.1079825911235267E-6	DESIGN
instanceof AssociationType;	WITHOUT_CLASSIFICATION	0.9998825372488256	WITHOUT_CLASSIFICATION	1.1746275117435158E-4	DESIGN
we need to determine the best way to know that two joinables represent a single many-to-many...	WITHOUT_CLASSIFICATION	0.6729975532347112	WITHOUT_CLASSIFICATION	0.3270024467652888	DESIGN
strip leading ','	WITHOUT_CLASSIFICATION	0.9999995741479807	WITHOUT_CLASSIFICATION	4.258520193614887E-7	DESIGN
public boolean isSubselectLoadable();	WITHOUT_CLASSIFICATION	0.9999984263960768	WITHOUT_CLASSIFICATION	1.5736039230861837E-6	DESIGN
KEY	WITHOUT_CLASSIFICATION	0.9995467977791189	WITHOUT_CLASSIFICATION	4.532022208811E-4	DESIGN
columns	WITHOUT_CLASSIFICATION	0.9999437940764461	WITHOUT_CLASSIFICATION	5.620592355384318E-5	DESIGN
SQL statements	WITHOUT_CLASSIFICATION	0.9999859674665487	WITHOUT_CLASSIFICATION	1.4032533451438422E-5	DESIGN
extra information about the element type	WITHOUT_CLASSIFICATION	0.9999998206141861	WITHOUT_CLASSIFICATION	1.7938581390814936E-7	DESIGN
types	WITHOUT_CLASSIFICATION	0.999894933223961	WITHOUT_CLASSIFICATION	1.0506677603901613E-4	DESIGN
custom sql	WITHOUT_CLASSIFICATION	0.9999874619835343	WITHOUT_CLASSIFICATION	1.2538016465666129E-5	DESIGN
private final String unquotedIdentifierColumnName;	WITHOUT_CLASSIFICATION	0.999990117772793	WITHOUT_CLASSIFICATION	9.882227206913106E-6	DESIGN
dynamic filters specifically for many-to-many inside the collection	WITHOUT_CLASSIFICATION	0.9999929133512385	WITHOUT_CLASSIFICATION	7.086648761492532E-6	DESIGN
dynamic filters for the collection	WITHOUT_CLASSIFICATION	0.9999991361229343	WITHOUT_CLASSIFICATION	8.638770657259102E-7	DESIGN
NativeSQL: collect key column and auto-aliases	WITHOUT_CLASSIFICATION	0.9998441397119742	WITHOUT_CLASSIFICATION	1.558602880258428E-4	DESIGN
unquotedKeyColumnNames = StringHelper.unQuote(keyColumnAliases);	WITHOUT_CLASSIFICATION	0.9999996809076613	WITHOUT_CLASSIFICATION	3.190923387595542E-7	DESIGN
ELEMENT	WITHOUT_CLASSIFICATION	0.9999712006968996	WITHOUT_CLASSIFICATION	2.8799303100430117E-5	DESIGN
NativeSQL: collect element column and auto-aliases	WITHOUT_CLASSIFICATION	0.9995203807748156	WITHOUT_CLASSIFICATION	4.79619225184374E-4	DESIGN
INDEX AND ROW SELECT	WITHOUT_CLASSIFICATION	0.9999982401737455	WITHOUT_CLASSIFICATION	1.7598262544434182E-6	DESIGN
NativeSQL: collect index column and auto-aliases	WITHOUT_CLASSIFICATION	0.9997718436879492	WITHOUT_CLASSIFICATION	2.2815631205069426E-4	DESIGN
unquotedIdentifierColumnName = identifierColumnAlias;	WITHOUT_CLASSIFICATION	0.9999986906953465	WITHOUT_CLASSIFICATION	1.309304653547494E-6	DESIGN
unquotedIdentifierColumnName = null;	WITHOUT_CLASSIFICATION	0.9999976347406152	WITHOUT_CLASSIFICATION	2.3652593847754532E-6	DESIGN
GENERATE THE SQL:	WITHOUT_CLASSIFICATION	0.9999274443829085	WITHOUT_CLASSIFICATION	7.255561709145168E-5	DESIGN
for non-arrays, we don't need to know the element class elementType.returnedClass();	WITHOUT_CLASSIFICATION	0.9999260360041149	WITHOUT_CLASSIFICATION	7.39639958851497E-5	DESIGN
not all classpersisters implement PropertyMapping!	WITHOUT_CLASSIFICATION	0.9902126098175703	WITHOUT_CLASSIFICATION	0.009787390182429644	DESIGN
Handle any filters applied to this collection	WITHOUT_CLASSIFICATION	0.9950515070118724	WITHOUT_CLASSIFICATION	0.004948492988127634	DESIGN
Handle any filters applied to this collection for many-to-many	WITHOUT_CLASSIFICATION	0.9920295932051	WITHOUT_CLASSIFICATION	0.007970406794900027	DESIGN
if there is a user-specified loader, return that TODO: filters!?	WITHOUT_CLASSIFICATION	0.7164189811726808	DESIGN	0.2835810188273193	WITHOUT_CLASSIFICATION
Take care of any entities that might have been evicted!	WITHOUT_CLASSIFICATION	0.9411837623037193	WITHOUT_CLASSIFICATION	0.058816237696280735	DESIGN
strip leading ','	WITHOUT_CLASSIFICATION	0.9999995741479807	WITHOUT_CLASSIFICATION	4.258520193614887E-7	DESIGN
Run a subquery loader	WITHOUT_CLASSIFICATION	0.9995776543461363	WITHOUT_CLASSIFICATION	4.2234565386372713E-4	DESIGN
needed by arrays	WITHOUT_CLASSIFICATION	0.9999332194204615	WITHOUT_CLASSIFICATION	6.67805795385181E-5	DESIGN
TODO: something with formulas...	WITHOUT_CLASSIFICATION	0.9639739143874994	WITHOUT_CLASSIFICATION	0.036026085612500695	DESIGN
an assertion	WITHOUT_CLASSIFICATION	0.9999999641982027	WITHOUT_CLASSIFICATION	3.580179719930764E-8	DESIGN
Remove all the old entries	WITHOUT_CLASSIFICATION	0.9999987357000454	WITHOUT_CLASSIFICATION	1.264299954628522E-6	DESIGN
create all the new entries	WITHOUT_CLASSIFICATION	0.9999998389124152	WITHOUT_CLASSIFICATION	1.6108758482791472E-7	DESIGN
&& !indexIsFormula	WITHOUT_CLASSIFICATION	0.9999974486005178	WITHOUT_CLASSIFICATION	2.551399482279013E-6	DESIGN
&& !indexIsFormula	WITHOUT_CLASSIFICATION	0.9999974486005178	WITHOUT_CLASSIFICATION	2.551399482279013E-6	DESIGN
delete all the deleted entries	WITHOUT_CLASSIFICATION	0.9999994135020015	WITHOUT_CLASSIFICATION	5.864979985701263E-7	DESIGN
insert all the new entries	WITHOUT_CLASSIFICATION	0.9999992923138861	WITHOUT_CLASSIFICATION	7.076861139474324E-7	DESIGN
==elementType ??	WITHOUT_CLASSIFICATION	0.9999530873364472	WITHOUT_CLASSIFICATION	4.6912663552865047E-5	DESIGN
update all the modified entries	WITHOUT_CLASSIFICATION	0.9999994050302098	WITHOUT_CLASSIFICATION	5.949697902480197E-7	DESIGN
identifier collections not supported for 1-to-many	WITHOUT_CLASSIFICATION	0.9999964737879959	WITHOUT_CLASSIFICATION	3.526212003992469E-6	DESIGN
update removed rows fks to null	WITHOUT_CLASSIFICATION	0.999771394305304	WITHOUT_CLASSIFICATION	2.2860569469603442E-4	DESIGN
will still be issued when it used to be null	WITHOUT_CLASSIFICATION	0.9860216686766802	WITHOUT_CLASSIFICATION	0.013978331323319743	DESIGN
now update all changed or added rows fks	WITHOUT_CLASSIFICATION	0.9999938210594602	WITHOUT_CLASSIFICATION	6.1789405397636875E-6	DESIGN
buf.append( selectFragment( lhsAlias, "" ) )ignore suffix for collection columns!	WITHOUT_CLASSIFICATION	0.9999999958948232	WITHOUT_CLASSIFICATION	4.105176716410964E-9	DESIGN
use suffix for the entity columns	WITHOUT_CLASSIFICATION	0.9999405374557306	WITHOUT_CLASSIFICATION	5.946254426931244E-5	DESIGN
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999940858770693	WITHOUT_CLASSIFICATION	5.914122930696615E-6	DESIGN
private final String rootTableName;	WITHOUT_CLASSIFICATION	0.9999663455498973	WITHOUT_CLASSIFICATION	3.365445010282695E-5	DESIGN
INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9999980684892511	WITHOUT_CLASSIFICATION	1.931510748894482E-6	DESIGN
Custom SQL	WITHOUT_CLASSIFICATION	0.9999343092028989	WITHOUT_CLASSIFICATION	6.569079710105532E-5	DESIGN
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999940858770693	WITHOUT_CLASSIFICATION	5.914122930696615E-6	DESIGN
Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999839803577082	WITHOUT_CLASSIFICATION	1.6019642291758903E-5	DESIGN
This could also just be true all the time...	WITHOUT_CLASSIFICATION	0.9746250837412723	WITHOUT_CLASSIFICATION	0.025374916258727752	DESIGN
chop the last union (all)	WITHOUT_CLASSIFICATION	0.9999997736229814	WITHOUT_CLASSIFICATION	2.263770186895058E-7	DESIGN
TODO: check this....	WITHOUT_CLASSIFICATION	0.9079079338021688	DESIGN	0.09209206619783121	WITHOUT_CLASSIFICATION
INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9999980684892511	WITHOUT_CLASSIFICATION	1.931510748894482E-6	DESIGN
properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9999385858939661	WITHOUT_CLASSIFICATION	6.141410603387984E-5	DESIGN
the closure of all properties in the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999984187995055	WITHOUT_CLASSIFICATION	1.581200494569692E-6	DESIGN
the closure of all columns used by the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999990770108123	WITHOUT_CLASSIFICATION	9.229891877829519E-7	DESIGN
subclass discrimination works by assigning particular values to certain combinations of null primary key values in the outer join using an SQL CASE	WITHOUT_CLASSIFICATION	0.9999973958140436	WITHOUT_CLASSIFICATION	2.6041859563454517E-6	DESIGN
MULTITABLES	WITHOUT_CLASSIFICATION	0.9999973832076821	WITHOUT_CLASSIFICATION	2.6167923180087384E-6	DESIGN
Custom sql	WITHOUT_CLASSIFICATION	0.9999869886899379	WITHOUT_CLASSIFICATION	1.3011310062095788E-5	DESIGN
subclass closure properties	WITHOUT_CLASSIFICATION	0.9999979629317477	WITHOUT_CLASSIFICATION	2.0370682522898208E-6	DESIGN
SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999724183152443	WITHOUT_CLASSIFICATION	2.7581684755682643E-5	DESIGN
( (Column) model.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9998515764471684	WITHOUT_CLASSIFICATION	1.4842355283162337E-4	DESIGN
( (Column) sc.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999756820302892	WITHOUT_CLASSIFICATION	2.4317969710905288E-5	DESIGN
don't need subclass tables, because they can't appear in conditions	WITHOUT_CLASSIFICATION	0.9928322727435421	WITHOUT_CLASSIFICATION	0.007167727256457814	DESIGN
special case where we need to force incloude all subclass joins	WITHOUT_CLASSIFICATION	0.999953424922615	WITHOUT_CLASSIFICATION	4.6575077384989754E-5	DESIGN
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999940858770693	WITHOUT_CLASSIFICATION	5.914122930696615E-6	DESIGN
properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9999385858939661	WITHOUT_CLASSIFICATION	6.141410603387984E-5	DESIGN
the closure of all columns used by the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999990770108123	WITHOUT_CLASSIFICATION	9.229891877829519E-7	DESIGN
get em on the second pass!	WITHOUT_CLASSIFICATION	0.999993912251681	WITHOUT_CLASSIFICATION	6.08774831906082E-6	DESIGN
now look up the object we are really interested in! (this lets us correctly handle proxies and multi-row or multi-column queries)	WITHOUT_CLASSIFICATION	0.9983763060827822	WITHOUT_CLASSIFICATION	0.001623693917217839	DESIGN
discriminator column	WITHOUT_CLASSIFICATION	0.9999226245068964	WITHOUT_CLASSIFICATION	7.737549310353387E-5	DESIGN
INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9999980684892511	WITHOUT_CLASSIFICATION	1.931510748894482E-6	DESIGN
private final Map propertyTableNumbersByName = new HashMap();	WITHOUT_CLASSIFICATION	0.99983624284153	WITHOUT_CLASSIFICATION	1.6375715846996864E-4	DESIGN
CLASS + TABLE	WITHOUT_CLASSIFICATION	0.9999999101258744	WITHOUT_CLASSIFICATION	8.987412557932168E-8	DESIGN
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999882734200052	WITHOUT_CLASSIFICATION	1.1726579994882075E-5	DESIGN
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999891731932398	WITHOUT_CLASSIFICATION	1.0826806760347576E-5	DESIGN
SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999724183152443	WITHOUT_CLASSIFICATION	2.7581684755682643E-5	DESIGN
Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999839803577082	WITHOUT_CLASSIFICATION	1.6019642291758903E-5	DESIGN
JOINS	WITHOUT_CLASSIFICATION	0.9999833223101084	WITHOUT_CLASSIFICATION	1.6677689891494548E-5	DESIGN
propertyTableNumbersByName.put( prop.getName(), join );	WITHOUT_CLASSIFICATION	0.9999999429257522	WITHOUT_CLASSIFICATION	5.70742478394599E-8	DESIGN
Access cached SQL	WITHOUT_CLASSIFICATION	0.9999137895988846	WITHOUT_CLASSIFICATION	8.621040111550826E-5	DESIGN
figure out which tables need to be fetched	WITHOUT_CLASSIFICATION	0.9999459768006709	WITHOUT_CLASSIFICATION	5.402319932908099E-5	DESIGN
figure out which columns are needed	WITHOUT_CLASSIFICATION	0.9996124331619165	WITHOUT_CLASSIFICATION	3.87566838083465E-4	DESIGN
figure out which formulas are needed	WITHOUT_CLASSIFICATION	0.9999853041216282	WITHOUT_CLASSIFICATION	1.4695878371880206E-5	DESIGN
render the SQL	WITHOUT_CLASSIFICATION	0.9999540560210285	WITHOUT_CLASSIFICATION	4.594397897150001E-5	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996591544783	WITHOUT_CLASSIFICATION	3.408455217205251E-7	DESIGN
moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992194846654209	WITHOUT_CLASSIFICATION	7.805153345791066E-4	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999194935928871	WITHOUT_CLASSIFICATION	8.050640711293835E-5	DESIGN
The optional SQL string defined in the where attribute	WITHOUT_CLASSIFICATION	0.9999998869514769	WITHOUT_CLASSIFICATION	1.1304852312464112E-7	DESIGN
information about lazy properties of this class	WITHOUT_CLASSIFICATION	0.9999599218116866	WITHOUT_CLASSIFICATION	4.007818831353545E-5	DESIGN
information about all properties in class hierarchy	WITHOUT_CLASSIFICATION	0.9999999284001622	WITHOUT_CLASSIFICATION	7.159983776429167E-8	DESIGN
information about all columns/formulas in class hierarchy	WITHOUT_CLASSIFICATION	0.9999997360689993	WITHOUT_CLASSIFICATION	2.6393100074045734E-7	DESIGN
dynamic filters attached to the class-level	WITHOUT_CLASSIFICATION	0.999999549867804	WITHOUT_CLASSIFICATION	4.5013219601583136E-7	DESIGN
SQL strings	WITHOUT_CLASSIFICATION	0.9999882554480133	WITHOUT_CLASSIFICATION	1.1744551986604106E-5	DESIGN
for objects that came in via update()	WITHOUT_CLASSIFICATION	0.9999991239328014	WITHOUT_CLASSIFICATION	8.760671986148818E-7	DESIGN
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999891731932398	WITHOUT_CLASSIFICATION	1.0826806760347576E-5	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999194935928871	WITHOUT_CLASSIFICATION	8.050640711293835E-5	DESIGN
IDENTIFIER	WITHOUT_CLASSIFICATION	0.9999340313209688	WITHOUT_CLASSIFICATION	6.596867903111542E-5	DESIGN
VERSION	WITHOUT_CLASSIFICATION	0.9999840864588395	WITHOUT_CLASSIFICATION	1.591354116046089E-5	DESIGN
WHERE STRING	WITHOUT_CLASSIFICATION	0.9999974385053428	WITHOUT_CLASSIFICATION	2.561494657100673E-6	DESIGN
SUBCLASS PROPERTY CLOSURE	WITHOUT_CLASSIFICATION	0.9999988160757937	WITHOUT_CLASSIFICATION	1.1839242063949312E-6	DESIGN
before add :-)	WITHOUT_CLASSIFICATION	0.9999881114466826	WITHOUT_CLASSIFICATION	1.1888553317403603E-5	DESIGN
Handle any filters applied to the class level	WITHOUT_CLASSIFICATION	0.9999317657223307	WITHOUT_CLASSIFICATION	6.823427766927162E-5	DESIGN
only one-to-one is lazy fetched	WITHOUT_CLASSIFICATION	0.999998894575949	WITHOUT_CLASSIFICATION	1.1054240510110154E-6	DESIGN
note early exit here:	WITHOUT_CLASSIFICATION	0.9978717240064359	WITHOUT_CLASSIFICATION	0.0021282759935640798	DESIGN
object have been loaded with setReadOnly(true); HHH-2236	WITHOUT_CLASSIFICATION	0.9999943555518348	WITHOUT_CLASSIFICATION	5.6444481653085485E-6	DESIGN
NOTE: this assumes something about how propertySelectFragment is implemented by the subclass!	WITHOUT_CLASSIFICATION	0.9611711015667551	WITHOUT_CLASSIFICATION	0.03882889843324481	DESIGN
strip leading ", "	WITHOUT_CLASSIFICATION	0.9999997458217016	WITHOUT_CLASSIFICATION	2.541782984921913E-7	DESIGN
if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999999058283877	WITHOUT_CLASSIFICATION	9.417161225692677E-8	DESIGN
otherwise return the "hydrated" state (ie. associations are not resolved)	WITHOUT_CLASSIFICATION	0.9925401016841564	WITHOUT_CLASSIFICATION	0.007459898315843654	DESIGN
null owner ok??	WITHOUT_CLASSIFICATION	0.9999199869476839	WITHOUT_CLASSIFICATION	8.001305231615149E-5	DESIGN
null sql means that the only lazy properties are shared PK one-to-one associations which are handled differently in the Type#nullSafeGet code...	WITHOUT_CLASSIFICATION	0.9982988277116149	WITHOUT_CLASSIFICATION	0.0017011722883849669	DESIGN
Create a new FROM node for the referenced class.	WITHOUT_CLASSIFICATION	0.9999997826924469	WITHOUT_CLASSIFICATION	2.1730755309081352E-7	DESIGN
the difficulty here is exactly what do we update in order to force the version to be incremented in the db...	WITHOUT_CLASSIFICATION	0.9964494469665781	WITHOUT_CLASSIFICATION	0.003550553033421919	DESIGN
performance op to avoid the array search	WITHOUT_CLASSIFICATION	0.9999664101255162	WITHOUT_CLASSIFICATION	3.358987448374203E-5	DESIGN
properly handle property-ref-based associations	WITHOUT_CLASSIFICATION	0.9991100137111469	WITHOUT_CLASSIFICATION	8.899862888529868E-4	DESIGN
Enable for HHH-440, which we don't like:	WITHOUT_CLASSIFICATION	0.9999436719944635	WITHOUT_CLASSIFICATION	5.6328005536397844E-5	DESIGN
ALIASES	WITHOUT_CLASSIFICATION	0.9999837508207021	WITHOUT_CLASSIFICATION	1.624917929782037E-5	DESIGN
aliases named identifier ( alias.idname )	WITHOUT_CLASSIFICATION	0.9999756897558978	WITHOUT_CLASSIFICATION	2.4310244102275363E-5	DESIGN
aliases for composite-id's	WITHOUT_CLASSIFICATION	0.9999996021114218	WITHOUT_CLASSIFICATION	3.978885782525687E-7	DESIGN
Fetch embedded identifiers propertynames from the "virtual" identifier component	WITHOUT_CLASSIFICATION	0.99999853478083	WITHOUT_CLASSIFICATION	1.4652191700991067E-6	DESIGN
embedded composite ids ( alias.idname1, alias.idname2 )	WITHOUT_CLASSIFICATION	0.9999996235425096	WITHOUT_CLASSIFICATION	3.7645749036163936E-7	DESIGN
TODO: skip formulas?	WITHOUT_CLASSIFICATION	0.7708204222640828	DESIGN	0.22917957773591727	WITHOUT_CLASSIFICATION
don't need filters for the static loaders	WITHOUT_CLASSIFICATION	0.99999510717574	WITHOUT_CLASSIFICATION	4.892824259977924E-6	DESIGN
do two passes, for collection property-ref!	WITHOUT_CLASSIFICATION	0.999999317248248	WITHOUT_CLASSIFICATION	6.827517519572997E-7	DESIGN
select the correct row by either pk or rowid	WITHOUT_CLASSIFICATION	0.9999428645665116	WITHOUT_CLASSIFICATION	5.713543348836147E-5	DESIGN
TODO: eventually, rowIdName[j]	WITHOUT_CLASSIFICATION	0.7455745093053583	DESIGN	0.2544254906946417	WITHOUT_CLASSIFICATION
this is a property of the table, which we are updating	WITHOUT_CLASSIFICATION	0.999643132112803	WITHOUT_CLASSIFICATION	3.5686788719704513E-4	DESIGN
special shortcut for id properties, skip the join! this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9977669610280081	WITHOUT_CLASSIFICATION	0.0022330389719918894	DESIGN
we are using "all" or "dirty" property-based optimistic locking	WITHOUT_CLASSIFICATION	0.9999573498441368	WITHOUT_CLASSIFICATION	4.265015586326704E-5	DESIGN
nothing to do; even if the operand is a parameter, no way we could infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9990337439155375	WITHOUT_CLASSIFICATION	9.662560844626129E-4	DESIGN
this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9957020473651025	WITHOUT_CLASSIFICATION	0.004297952634897537	DESIGN
add normal properties	WITHOUT_CLASSIFICATION	0.9999999235494407	WITHOUT_CLASSIFICATION	7.64505593731436E-8	DESIGN
add the discriminator	WITHOUT_CLASSIFICATION	0.9999743012479833	WITHOUT_CLASSIFICATION	2.569875201672353E-5	DESIGN
more specifically : "? [op] datetime" 1) if the operator is MINUS, the param needs to be of some datetime type 2) if the operator is PLUS, the param needs to be of some numeric type	WITHOUT_CLASSIFICATION	0.8811499627942988	WITHOUT_CLASSIFICATION	0.11885003720570125	DESIGN
add normal properties	WITHOUT_CLASSIFICATION	0.9999999235494407	WITHOUT_CLASSIFICATION	7.64505593731436E-8	DESIGN
this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9957020473651025	WITHOUT_CLASSIFICATION	0.004297952634897537	DESIGN
add the discriminator	WITHOUT_CLASSIFICATION	0.9999743012479833	WITHOUT_CLASSIFICATION	2.569875201672353E-5	DESIGN
add the primary key	WITHOUT_CLASSIFICATION	0.9999963251186446	WITHOUT_CLASSIFICATION	3.6748813555063935E-6	DESIGN
delegate already handles PK columns	WITHOUT_CLASSIFICATION	0.9998863668552768	WITHOUT_CLASSIFICATION	1.1363314472323375E-4	DESIGN
we can't batch joined inserts, especially not if it is an identity insert; nor can we batch statements where the expectation is based on an output param	WITHOUT_CLASSIFICATION	0.9999999889733516	WITHOUT_CLASSIFICATION	1.102664835654103E-8	DESIGN
Render the SQL query	WITHOUT_CLASSIFICATION	0.999766477157416	WITHOUT_CLASSIFICATION	2.3352284258405654E-4	DESIGN
Write the values of fields onto the prepared statement - we MUST use the state at the time the insert was issued (cos of foreign key constraints). Not necessarily the object's current state	WITHOUT_CLASSIFICATION	0.9999652147913124	WITHOUT_CLASSIFICATION	3.478520868758132E-5	DESIGN
TODO : shouldnt inserts be Expectations.NONE?	WITHOUT_CLASSIFICATION	0.9986785713873609	DESIGN	0.0013214286126390538	WITHOUT_CLASSIFICATION
don't bother trying to update, we know there is no row there yet	WITHOUT_CLASSIFICATION	0.9115334604263727	WITHOUT_CLASSIFICATION	0.08846653957362728	DESIGN
if all fields are null, we might need to delete existing row	WITHOUT_CLASSIFICATION	0.9999093342220149	WITHOUT_CLASSIFICATION	9.066577798512523E-5	DESIGN
there is probably a row there, so try to update if no rows were updated, we will find out	WITHOUT_CLASSIFICATION	0.997746771570592	WITHOUT_CLASSIFICATION	0.002253228429407976	DESIGN
note: updates to joined tables can't be batched...	WITHOUT_CLASSIFICATION	0.9999989276516689	WITHOUT_CLASSIFICATION	1.0723483310729664E-6	DESIGN
starting index	WITHOUT_CLASSIFICATION	0.999999643893927	WITHOUT_CLASSIFICATION	3.5610607294812725E-7	DESIGN
Now write the values of fields onto the prepared statement	WITHOUT_CLASSIFICATION	0.9998868185604637	WITHOUT_CLASSIFICATION	1.1318143953636115E-4	DESIGN
Write any appropriate versioning conditional parameters	WITHOUT_CLASSIFICATION	0.9999097963113251	WITHOUT_CLASSIFICATION	9.020368867484898E-5	DESIGN
Render the SQL query	WITHOUT_CLASSIFICATION	0.999766477157416	WITHOUT_CLASSIFICATION	2.3352284258405654E-4	DESIGN
Do the key. The key is immutable so we can use the _current_ object state - not necessarily the state at the time the delete was issued	WITHOUT_CLASSIFICATION	0.9999993629693626	WITHOUT_CLASSIFICATION	6.370306372504321E-7	DESIGN
We should use the _current_ object state (ie. after any updates that occurred during flush)	WITHOUT_CLASSIFICATION	0.9999999233692347	WITHOUT_CLASSIFICATION	7.663076524991004E-8	DESIGN
this property belongs to the table and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9534744229571174	WITHOUT_CLASSIFICATION	0.04652557704288263	DESIGN
note: dirtyFields==null means we had no snapshot, and we couldn't get one using select-before-update oldFields==null just means we had no snapshot to begin with (we might have used select-before-update to get the dirtyFields)	WITHOUT_CLASSIFICATION	0.9995591985305282	WITHOUT_CLASSIFICATION	4.4080146947183385E-4	DESIGN
more specifically : "datetime [op] ?" 1) if the operator is MINUS, we really cannot determine the expected type as either another datetime or numeric would be valid 2) if the operator is PLUS, the param needs to be of some numeric type	WITHOUT_CLASSIFICATION	0.9997571327904536	WITHOUT_CLASSIFICATION	2.428672095463356E-4	DESIGN
For the case of dynamic-update="true", we need to generate the UPDATE SQL	WITHOUT_CLASSIFICATION	0.9999972504155156	WITHOUT_CLASSIFICATION	2.749584484288658E-6	DESIGN
don't need to check laziness (dirty checking algorithm handles that)	WITHOUT_CLASSIFICATION	0.8042471625313355	WITHOUT_CLASSIFICATION	0.19575283746866443	DESIGN
For the case of dynamic-update="false", or no snapshot, we use the static SQL	WITHOUT_CLASSIFICATION	0.9999997351631298	WITHOUT_CLASSIFICATION	2.6483687017770106E-7	DESIGN
if not "get", then try "is"	WITHOUT_CLASSIFICATION	0.9999288928211751	WITHOUT_CLASSIFICATION	7.110717882491943E-5	DESIGN
Now update only the tables with dirty properties (and the table with the version number)	WITHOUT_CLASSIFICATION	0.9999867597616254	WITHOUT_CLASSIFICATION	1.3240238374533745E-5	DESIGN
For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999877809468024	WITHOUT_CLASSIFICATION	1.2219053197632047E-5	DESIGN
For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999877809468024	WITHOUT_CLASSIFICATION	1.2219053197632047E-5	DESIGN
For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999999622970162	WITHOUT_CLASSIFICATION	3.770298385090069E-8	DESIGN
For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999999622970162	WITHOUT_CLASSIFICATION	3.770298385090069E-8	DESIGN
not supported	WITHOUT_CLASSIFICATION	0.9929198558744081	WITHOUT_CLASSIFICATION	0.0070801441255917575	DESIGN
this property belongs to the table and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9534744229571174	WITHOUT_CLASSIFICATION	0.04652557704288263	DESIGN
we need to utilize dynamic delete statements	WITHOUT_CLASSIFICATION	0.9999390566511722	WITHOUT_CLASSIFICATION	6.094334882769272E-5	DESIGN
otherwise, utilize the static delete statements	WITHOUT_CLASSIFICATION	0.9999951484093468	WITHOUT_CLASSIFICATION	4.8515906532514995E-6	DESIGN
just a performance opt!	WITHOUT_CLASSIFICATION	0.9997924423368248	WITHOUT_CLASSIFICATION	2.075576631751081E-4	DESIGN
just a performance opt!	WITHOUT_CLASSIFICATION	0.9997924423368248	WITHOUT_CLASSIFICATION	2.075576631751081E-4	DESIGN
all joins join to the pk of the driving table	WITHOUT_CLASSIFICATION	0.9999999475481325	WITHOUT_CLASSIFICATION	5.24518674147382E-8	DESIGN
notice that we skip the first table; it is the driving table!	WITHOUT_CLASSIFICATION	0.999996455393495	WITHOUT_CLASSIFICATION	3.5446065050053055E-6	DESIGN
we can inner join to superclass tables (the row MUST be there) we can never inner join to subclass tables	WITHOUT_CLASSIFICATION	0.9998352486761827	WITHOUT_CLASSIFICATION	1.647513238174221E-4	DESIGN
skip the driving table	WITHOUT_CLASSIFICATION	0.999999467905116	WITHOUT_CLASSIFICATION	5.320948840709678E-7	DESIGN
get 'em in the right order (not that it really matters)	WITHOUT_CLASSIFICATION	0.9737067298493687	WITHOUT_CLASSIFICATION	0.026293270150631348	DESIGN
here, we work under the following assumptions: ------------ valid cases -------------------------------------- 1) datetime + {something other than datetime} : always results in a datetime ( db will catch invalid conversions ) 2) datetime - datetime : always results in a DOUBLE 3) datetime - {something other than datetime} : always results in a datetime ( db will catch invalid conversions ) ------------ invalid cases ------------------------------------ 4) datetime + datetime 5) {something other than datetime} - datetime 6) datetime {any type} 7) datetime / {any type} 8) {any type} / datetime doing so allows us to properly handle parameters as either the left or right side here in the majority of cases	WITHOUT_CLASSIFICATION	0.9999995719462991	WITHOUT_CLASSIFICATION	4.280537010208453E-7	DESIGN
render the where and from parts	WITHOUT_CLASSIFICATION	0.999891421446374	WITHOUT_CLASSIFICATION	1.0857855362602885E-4	DESIGN
we could regerate this inside each called method!	WITHOUT_CLASSIFICATION	0.8974236614413721	WITHOUT_CLASSIFICATION	0.10257633855862781	DESIGN
now render the joins	WITHOUT_CLASSIFICATION	0.9999860028019917	WITHOUT_CLASSIFICATION	1.399719800828704E-5	DESIGN
This will add the new from element to the origin.	WITHOUT_CLASSIFICATION	0.9999979250262602	WITHOUT_CLASSIFICATION	2.0749737398196346E-6	DESIGN
now render the select clause	WITHOUT_CLASSIFICATION	0.9999975368415258	WITHOUT_CLASSIFICATION	2.4631584742070033E-6	DESIGN
now tie it all together	WITHOUT_CLASSIFICATION	0.9999867879541969	WITHOUT_CLASSIFICATION	1.321204580294923E-5	DESIGN
insert/update/delete SQL	WITHOUT_CLASSIFICATION	0.9999966745077827	WITHOUT_CLASSIFICATION	3.325492217331529E-6	DESIGN
select SQL	WITHOUT_CLASSIFICATION	0.9999812081419603	WITHOUT_CLASSIFICATION	1.8791858039657324E-5	DESIGN
no need to check laziness, dirty checking handles that	WITHOUT_CLASSIFICATION	0.999655617868956	WITHOUT_CLASSIFICATION	3.44382131044052E-4	DESIGN
Fully resolve the map reference, create implicit joins.	WITHOUT_CLASSIFICATION	0.9999325312767195	WITHOUT_CLASSIFICATION	6.746872328053422E-5	DESIGN
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9946842654399551	WITHOUT_CLASSIFICATION	0.005315734560044892	DESIGN
The basic implementation is to simply use the node's text	WITHOUT_CLASSIFICATION	0.9999994560678028	WITHOUT_CLASSIFICATION	5.439321970996918E-7	DESIGN
for dialects which are known to not support ANSI-SQL row-value-constructor syntax, we should mutate the tree.	WITHOUT_CLASSIFICATION	0.9998266922126149	WITHOUT_CLASSIFICATION	1.7330778738502641E-4	DESIGN
Due to the complexity in initializing the SelectClause, do not generate one here. If it is not found; simply return null... Also, do not cache since it gets generated well after we are created.	WITHOUT_CLASSIFICATION	0.9999961458393382	WITHOUT_CLASSIFICATION	3.8541606618045E-6	DESIGN
check the version unsaved-value, if appropriate	WITHOUT_CLASSIFICATION	0.9999821646778667	WITHOUT_CLASSIFICATION	1.7835322133287755E-5	DESIGN
let this take precedence if defined, since it works for assigned identifiers	WITHOUT_CLASSIFICATION	0.9999996937186796	WITHOUT_CLASSIFICATION	3.0628132037650835E-7	DESIGN
check the id unsaved-value	WITHOUT_CLASSIFICATION	0.999990417194718	WITHOUT_CLASSIFICATION	9.58280528199772E-6	DESIGN
check to see if it is in the second-level cache	WITHOUT_CLASSIFICATION	0.99991379299042	WITHOUT_CLASSIFICATION	8.620700957993221E-5	DESIGN
/	WITHOUT_CLASSIFICATION	0.9999087176347056	WITHOUT_CLASSIFICATION	9.128236529439574E-5	DESIGN
For property references generate <tablealias>.<columnname> as <projectionalias>	WITHOUT_CLASSIFICATION	0.9999990576358109	WITHOUT_CLASSIFICATION	9.423641891312633E-7	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999194935928871	WITHOUT_CLASSIFICATION	8.050640711293835E-5	DESIGN
if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999999058283877	WITHOUT_CLASSIFICATION	9.417161225692677E-8	DESIGN
force immediate execution of the insert	WITHOUT_CLASSIFICATION	0.9999999911054459	WITHOUT_CLASSIFICATION	8.894554082311392E-9	DESIGN
If this from element is a collection and the path is a collection property (maxIndex, etc.) then generate a sub-query.	WITHOUT_CLASSIFICATION	0.999973861662119	WITHOUT_CLASSIFICATION	2.613833788102606E-5	DESIGN
entities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999237177852317	WITHOUT_CLASSIFICATION	7.628221476834799E-5	DESIGN
collections ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999890538961344	WITHOUT_CLASSIFICATION	1.0946103865546407E-5	DESIGN
cannot occur	WITHOUT_CLASSIFICATION	0.9999973238728627	WITHOUT_CLASSIFICATION	2.676127137464479E-6	DESIGN
cannot occur	WITHOUT_CLASSIFICATION	0.9999973238728627	WITHOUT_CLASSIFICATION	2.676127137464479E-6	DESIGN
only carry on if the method has no parameters	WITHOUT_CLASSIFICATION	0.999994542881052	WITHOUT_CLASSIFICATION	5.45711894803556E-6	DESIGN
try "get"	WITHOUT_CLASSIFICATION	0.9999771895267572	WITHOUT_CLASSIFICATION	2.281047324289943E-5	DESIGN
do nothing...	WITHOUT_CLASSIFICATION	0.9999349305612528	WITHOUT_CLASSIFICATION	6.506943874723208E-5	DESIGN
do nothing...	WITHOUT_CLASSIFICATION	0.9999349305612528	WITHOUT_CLASSIFICATION	6.506943874723208E-5	DESIGN
should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9999305214555819	WITHOUT_CLASSIFICATION	6.947854441817172E-5	DESIGN
this page intentionally left blank :)	WITHOUT_CLASSIFICATION	0.9987458022264454	WITHOUT_CLASSIFICATION	0.0012541977735546085	DESIGN
do not do anything	WITHOUT_CLASSIFICATION	0.9999949512036775	WITHOUT_CLASSIFICATION	5.048796322444234E-6	DESIGN
ignore	WITHOUT_CLASSIFICATION	0.9999951416255058	WITHOUT_CLASSIFICATION	4.858374494054211E-6	DESIGN
cant instantiate	WITHOUT_CLASSIFICATION	0.9999030673675355	WITHOUT_CLASSIFICATION	9.693263246452879E-5	DESIGN
if it is a property of an embedded component, invoke on the "identifier"	WITHOUT_CLASSIFICATION	0.9999026909116087	WITHOUT_CLASSIFICATION	9.730908839137675E-5	DESIGN
otherwise:	WITHOUT_CLASSIFICATION	0.9949607838866555	WITHOUT_CLASSIFICATION	0.005039216113344426	DESIGN
skip finalize methods	WITHOUT_CLASSIFICATION	0.9999573935274285	WITHOUT_CLASSIFICATION	4.260647257146431E-5	DESIGN
note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9963291513151082	WITHOUT_CLASSIFICATION	0.003670848684891879	DESIGN
note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9963291513151082	WITHOUT_CLASSIFICATION	0.003670848684891879	DESIGN
HHH-2481 make sure the callback gets cleared, otherwise the instance stays in a static thread local.	WITHOUT_CLASSIFICATION	0.9538460133453888	WITHOUT_CLASSIFICATION	0.046153986654611276	DESIGN
while constructor is running	WITHOUT_CLASSIFICATION	0.9999360898439126	WITHOUT_CLASSIFICATION	6.391015608740545E-5	DESIGN
while constructor is running	WITHOUT_CLASSIFICATION	0.9999360898439126	WITHOUT_CLASSIFICATION	6.391015608740545E-5	DESIGN
note: interface is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9951116518345693	WITHOUT_CLASSIFICATION	0.00488834816543072	DESIGN
interfaces arguments	WITHOUT_CLASSIFICATION	0.999641271851446	WITHOUT_CLASSIFICATION	3.587281485539712E-4	DESIGN
TODO!	WITHOUT_CLASSIFICATION	0.9955769474168141	WITHOUT_CLASSIFICATION	0.004423052583185802	DESIGN
Get the caller	WITHOUT_CLASSIFICATION	0.9999988779070047	WITHOUT_CLASSIFICATION	1.1220929953156571E-6	DESIGN
Get the caller principals	WITHOUT_CLASSIFICATION	0.9999980928415907	WITHOUT_CLASSIFICATION	1.9071584093021836E-6	DESIGN
private static final Alias DEFAULT_ALIAS = new Alias(10, null);	WITHOUT_CLASSIFICATION	0.9999999992499533	WITHOUT_CLASSIFICATION	7.500467131039686E-10	DESIGN
Needed to bump this up to DotNode, because that is the only thing which currently knows about the property-ref path in the correct format; it is either this, or recurse over the DotNodes constructing the property path just like DotNode does internally	WITHOUT_CLASSIFICATION	0.9999995483405899	WITHOUT_CLASSIFICATION	4.5165941009063235E-7	DESIGN
if the identifier is quoted, remove the quotes	WITHOUT_CLASSIFICATION	0.9997412252356319	WITHOUT_CLASSIFICATION	2.587747643681349E-4	DESIGN
truncate the identifier to the max alias length, less the suffix length	WITHOUT_CLASSIFICATION	0.9999977214783851	WITHOUT_CLASSIFICATION	2.2785216149135345E-6	DESIGN
full joins are not supported.. yet!	WITHOUT_CLASSIFICATION	0.999893986873299	WITHOUT_CLASSIFICATION	1.0601312670095221E-4	DESIGN
null is not considered the same type as Integer. $NON-NLS-1 $NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999996435063155	WITHOUT_CLASSIFICATION	3.56493684553337E-7	DESIGN
the outerJoinsAfterWhere needs to come before where clause to properly handle dynamic filters	WITHOUT_CLASSIFICATION	0.9999797251267779	WITHOUT_CLASSIFICATION	2.0274873222125596E-5	DESIGN
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999877952799998	WITHOUT_CLASSIFICATION	1.220472000026521E-5	DESIGN
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999877952799998	WITHOUT_CLASSIFICATION	1.220472000026521E-5	DESIGN
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999877952799998	WITHOUT_CLASSIFICATION	1.220472000026521E-5	DESIGN
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999877952799998	WITHOUT_CLASSIFICATION	1.220472000026521E-5	DESIGN
strip off any leading 'and' token	WITHOUT_CLASSIFICATION	0.9999995829065074	WITHOUT_CLASSIFICATION	4.1709349261875116E-7	DESIGN
if the condition is not already there...	WITHOUT_CLASSIFICATION	0.9999715441376706	WITHOUT_CLASSIFICATION	2.8455862329454772E-5	DESIGN
dontSpace.add("'");	WITHOUT_CLASSIFICATION	0.9999969624754174	WITHOUT_CLASSIFICATION	3.037524582709041E-6	DESIGN
for MySQL	WITHOUT_CLASSIFICATION	0.9998425264121763	WITHOUT_CLASSIFICATION	1.5747358782369514E-4	DESIGN
HashMap columnsUnique = new HashMap();	WITHOUT_CLASSIFICATION	0.9999983018295036	WITHOUT_CLASSIFICATION	1.6981704964580377E-6	DESIGN
null caused some problems	WITHOUT_CLASSIFICATION	0.9938331292253417	WITHOUT_CLASSIFICATION	0.006166870774658299	DESIGN
package	WITHOUT_CLASSIFICATION	0.9996923634291219	WITHOUT_CLASSIFICATION	3.0763657087807996E-4	DESIGN
not sure if this would ever be null but wanted to be careful	WITHOUT_CLASSIFICATION	0.995762916484138	WITHOUT_CLASSIFICATION	0.0042370835158621134	DESIGN
even on inverse="true"	WITHOUT_CLASSIFICATION	0.9999911778470557	WITHOUT_CLASSIFICATION	8.822152944319916E-6	DESIGN
package	WITHOUT_CLASSIFICATION	0.9996923634291219	WITHOUT_CLASSIFICATION	3.0763657087807996E-4	DESIGN
package	WITHOUT_CLASSIFICATION	0.9996923634291219	WITHOUT_CLASSIFICATION	3.0763657087807996E-4	DESIGN
If true then execute db updates, otherwise just generate and display updates	WITHOUT_CLASSIFICATION	0.9999988860758875	WITHOUT_CLASSIFICATION	1.1139241125066346E-6	DESIGN
we only release the connection	WITHOUT_CLASSIFICATION	0.9999999015559673	WITHOUT_CLASSIFICATION	9.844403266193321E-8	DESIGN
deprecated option...	WITHOUT_CLASSIFICATION	0.9999426769781878	WITHOUT_CLASSIFICATION	5.732302181219803E-5	DESIGN
if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.999999790574837	WITHOUT_CLASSIFICATION	2.0942516308036624E-7	DESIGN
actually, this last test is probably unnecessary, since beforeCompletion() doesn't get called during rollback	WITHOUT_CLASSIFICATION	0.999208708947445	WITHOUT_CLASSIFICATION	7.912910525549498E-4	DESIGN
this one only really needed for badly-behaved applications! (if the TransactionManager has a Sychronization registered, its a noop) (actually we do need it for downgrading locks)	WITHOUT_CLASSIFICATION	0.9999997074517795	WITHOUT_CLASSIFICATION	2.9254822054721956E-7	DESIGN
Create an DotNode AST for the path and resolve it.	WITHOUT_CLASSIFICATION	0.9999365193101927	WITHOUT_CLASSIFICATION	6.348068980732746E-5	DESIGN
if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.999999790574837	WITHOUT_CLASSIFICATION	2.0942516308036624E-7	DESIGN
if we could not register a synchronization, do the before/after completion callbacks ourself (but we need to let jdbcContext know that this is what we are going to do, so it doesn't keep trying to register synchronizations)	WITHOUT_CLASSIFICATION	0.9999996065511543	WITHOUT_CLASSIFICATION	3.9344884565223296E-7	DESIGN
swallow it, and continue to roll back JTA transaction	WITHOUT_CLASSIFICATION	0.9998955773963232	WITHOUT_CLASSIFICATION	1.0442260367680283E-4	DESIGN
so the transaction is already rolled back, by JTA spec	WITHOUT_CLASSIFICATION	0.9999991447901544	WITHOUT_CLASSIFICATION	8.552098456514466E-7	DESIGN
this method is a noop if there is a Synchronization!	WITHOUT_CLASSIFICATION	0.9994069581162675	WITHOUT_CLASSIFICATION	5.930418837325971E-4	DESIGN
two conditions where we need to transform this to a theta-join syntax: 1) 'elem' is the "root from-element" in correlated subqueries 2) The DotNode.useThetaStyleImplicitJoins has been set to true and 'elem' represents an implicit join	WITHOUT_CLASSIFICATION	0.9858574506807928	WITHOUT_CLASSIFICATION	0.014142549319207281	DESIGN
WebSphere, however, is not a sane JEE/JTA container...	WITHOUT_CLASSIFICATION	0.9999821343962813	WITHOUT_CLASSIFICATION	1.7865603718791338E-5	DESIGN
for sane JEE/JTA containers, the transaction itself functions as its identifier...	WITHOUT_CLASSIFICATION	0.9999951366187779	WITHOUT_CLASSIFICATION	4.8633812221333405E-6	DESIGN
swallow, the transaction was finished	WITHOUT_CLASSIFICATION	0.9999974735110684	WITHOUT_CLASSIFICATION	2.5264889316735247E-6	DESIGN
all AliasToEntityMapResultTransformer are considered equal ~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993970522457	WITHOUT_CLASSIFICATION	6.029477542663026E-7	DESIGN
Create the join element under the from element.	WITHOUT_CLASSIFICATION	0.9999995752646558	WITHOUT_CLASSIFICATION	4.2473534420749457E-7	DESIGN
all DistinctRootEntityResultTransformer are considered equal ~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999493693495	WITHOUT_CLASSIFICATION	5.063065049464817E-7	DESIGN
map of EntityMode -> Tuplizer	WITHOUT_CLASSIFICATION	0.9999863749458996	WITHOUT_CLASSIFICATION	1.362505410037087E-5	DESIGN
this is a virtual id property...	WITHOUT_CLASSIFICATION	0.9986401361836226	WITHOUT_CLASSIFICATION	0.0013598638163773355	DESIGN
this one needed only for guessEntityMode()	WITHOUT_CLASSIFICATION	0.9413326574390025	WITHOUT_CLASSIFICATION	0.0586673425609974	DESIGN
create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999949090635033	WITHOUT_CLASSIFICATION	5.090936496733001E-6	DESIGN
todo : move this to SF per HHH-3517; also see HHH-1907 and ComponentMetamodel	WITHOUT_CLASSIFICATION	0.9254536138735951	WITHOUT_CLASSIFICATION	0.07454638612640489	DESIGN
then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9998871485382723	WITHOUT_CLASSIFICATION	1.1285146172769492E-4	DESIGN
Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.999987767023714	WITHOUT_CLASSIFICATION	1.22329762861073E-5	DESIGN
then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9996282930564561	WITHOUT_CLASSIFICATION	3.7170694354389386E-4	DESIGN
Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.999987767023714	WITHOUT_CLASSIFICATION	1.22329762861073E-5	DESIGN
put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999974374743574	WITHOUT_CLASSIFICATION	2.562525642539477E-6	DESIGN
found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999559152688142	WITHOUT_CLASSIFICATION	4.408473118580295E-5	DESIGN
private final SessionFactoryImplementor sessionFactory;	WITHOUT_CLASSIFICATION	0.9987336281593614	WITHOUT_CLASSIFICATION	0.001266371840638592	DESIGN
cached for efficiency...	WITHOUT_CLASSIFICATION	0.9968488036430954	WITHOUT_CLASSIFICATION	0.003151196356904751	DESIGN
public ComponentMetamodel(Component component, SessionFactoryImplementor sessionFactory) {	WITHOUT_CLASSIFICATION	0.992928035732737	WITHOUT_CLASSIFICATION	0.007071964267262884	DESIGN
this.sessionFactory = sessionFactory;	WITHOUT_CLASSIFICATION	0.999799964512869	WITHOUT_CLASSIFICATION	2.0003548713095693E-4	DESIGN
it was not embedded, so the argument is just an id	WITHOUT_CLASSIFICATION	0.9999310496302369	WITHOUT_CLASSIFICATION	6.895036976302153E-5	DESIGN
then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9998871485382723	WITHOUT_CLASSIFICATION	1.1285146172769492E-4	DESIGN
then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9996282930564561	WITHOUT_CLASSIFICATION	3.7170694354389386E-4	DESIGN
put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999974374743574	WITHOUT_CLASSIFICATION	2.562525642539477E-6	DESIGN
then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9935161457610261	WITHOUT_CLASSIFICATION	0.006483854238973924	DESIGN
return currentId;	WITHOUT_CLASSIFICATION	0.9999920772886315	WITHOUT_CLASSIFICATION	7.922711368433579E-6	DESIGN
reset the id	WITHOUT_CLASSIFICATION	0.9999927818546239	WITHOUT_CLASSIFICATION	7.21814537603418E-6	DESIGN
origin.addDestination( destination ); This was the cause of HHH-242 origin.setType( FROM_FRAGMENT ); Set the parent node type so that the AST is properly formed. The destination node will have all the FROM text. The parent node is a collection join too (voodoo - see JoinProcessor)	WITHOUT_CLASSIFICATION	0.9999999928754267	WITHOUT_CLASSIFICATION	7.124573245426034E-9	DESIGN
reset the version	WITHOUT_CLASSIFICATION	0.9999974297878029	WITHOUT_CLASSIFICATION	2.5702121970417634E-6	DESIGN
the default is to simply not lazy fetch properties for now...	WITHOUT_CLASSIFICATION	0.9964969743162367	WITHOUT_CLASSIFICATION	0.003503025683763189	DESIGN
Add the second join, the one that ends in the destination table.	WITHOUT_CLASSIFICATION	0.999999995239225	WITHOUT_CLASSIFICATION	4.760774988555946E-9	DESIGN
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9946842654399551	WITHOUT_CLASSIFICATION	0.005315734560044892	DESIGN
found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999559152688142	WITHOUT_CLASSIFICATION	4.408473118580295E-5	DESIGN
determine the id getter and setter methods from the proxy interface (if any) determine all interfaces needed by the resulting proxy	WITHOUT_CLASSIFICATION	0.9998852211790293	WITHOUT_CLASSIFICATION	1.1477882097067923E-4	DESIGN
return getFactory().getSettings().getBytecodeProvider().getProxyFactoryFactory().buildProxyFactory();	WITHOUT_CLASSIFICATION	0.9999678742049481	WITHOUT_CLASSIFICATION	3.2125795051883603E-5	DESIGN
not final because proxy factory creation can fail	WITHOUT_CLASSIFICATION	0.9999189678956191	WITHOUT_CLASSIFICATION	8.103210438087945E-5	DESIGN
superclass entity-name	WITHOUT_CLASSIFICATION	0.9999935601942195	WITHOUT_CLASSIFICATION	6.4398057805694805E-6	DESIGN
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9946842654399551	WITHOUT_CLASSIFICATION	0.005315734560044892	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999194935928871	WITHOUT_CLASSIFICATION	8.050640711293835E-5	DESIGN
init the aliases, after initing the constructornode	WITHOUT_CLASSIFICATION	0.9999841871701995	WITHOUT_CLASSIFICATION	1.581282980046803E-5	DESIGN
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9946842654399551	WITHOUT_CLASSIFICATION	0.005315734560044892	DESIGN
legacy behavior (with no abstract attribute specified)	WITHOUT_CLASSIFICATION	0.999981722379594	WITHOUT_CLASSIFICATION	1.8277620405949882E-5	DESIGN
Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999995658392643	WITHOUT_CLASSIFICATION	4.341607357523062E-7	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999194935928871	WITHOUT_CLASSIFICATION	8.050640711293835E-5	DESIGN
note: this affects the return value!	WITHOUT_CLASSIFICATION	0.9995978384290183	WITHOUT_CLASSIFICATION	4.021615709816795E-4	DESIGN
Need to account for allowable '_' within the variant	WITHOUT_CLASSIFICATION	0.9999971771556498	WITHOUT_CLASSIFICATION	2.822844350058658E-6	DESIGN
Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999992894928048	WITHOUT_CLASSIFICATION	7.1050719518632E-7	DESIGN
Collection Types:	WITHOUT_CLASSIFICATION	0.9999906832236396	WITHOUT_CLASSIFICATION	9.316776360448738E-6	DESIGN
convenience methods relating to operations across arrays of types...	WITHOUT_CLASSIFICATION	0.9999796926194404	WITHOUT_CLASSIFICATION	2.030738055953312E-5	DESIGN
lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999858229696186	WITHOUT_CLASSIFICATION	1.417703038141359E-5	DESIGN
Blobs are ignored by merge()	WITHOUT_CLASSIFICATION	0.9999997186945916	WITHOUT_CLASSIFICATION	2.813054084104332E-7	DESIGN
value is the entity name	WITHOUT_CLASSIFICATION	0.9999884556924457	WITHOUT_CLASSIFICATION	1.1544307554360263E-5	DESIGN
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.999995451139886	WITHOUT_CLASSIFICATION	4.548860114026596E-6	DESIGN
generate id select fragment and then property select fragment for each expression, just like generateSelectFragments().	WITHOUT_CLASSIFICATION	0.9955613831661206	WITHOUT_CLASSIFICATION	0.0044386168338794	DESIGN
TODO!	WITHOUT_CLASSIFICATION	0.9955769474168141	WITHOUT_CLASSIFICATION	0.004423052583185802	DESIGN
xml is the entity name	WITHOUT_CLASSIFICATION	0.9999930810655026	WITHOUT_CLASSIFICATION	6.918934497408754E-6	DESIGN
special case ... this is the leaf of the containment graph, even though not immutable	WITHOUT_CLASSIFICATION	0.999865534322831	WITHOUT_CLASSIFICATION	1.3446567716905998E-4	DESIGN
tolerates nulls	WITHOUT_CLASSIFICATION	0.9999926605043299	WITHOUT_CLASSIFICATION	7.339495670148215E-6	DESIGN
sqlResultTypeList,	WITHOUT_CLASSIFICATION	0.9999990033509543	WITHOUT_CLASSIFICATION	9.96649045746358E-7	DESIGN
metaType is assumed to be single-column type	WITHOUT_CLASSIFICATION	0.999991380861818	WITHOUT_CLASSIFICATION	8.619138181949026E-6	DESIGN
Get all the select expressions (that we just generated) and render the select.	WITHOUT_CLASSIFICATION	0.9999654151509333	WITHOUT_CLASSIFICATION	3.4584849066693635E-5	DESIGN
Look through the FromElement's children to find any collections of values that should be fetched...	WITHOUT_CLASSIFICATION	0.9997576701706893	WITHOUT_CLASSIFICATION	2.423298293107658E-4	DESIGN
return AssociationType.FOREIGN_KEY_TO_PARENT; this is better but causes a transient object exception...	WITHOUT_CLASSIFICATION	0.956585461401772	WITHOUT_CLASSIFICATION	0.04341453859822792	DESIGN
Use the lower case function name. Remember whether we're in a SELECT clause or not.	WITHOUT_CLASSIFICATION	0.9999999951424192	WITHOUT_CLASSIFICATION	4.857580715454745E-9	DESIGN
IDENT might be the name of a class.	WITHOUT_CLASSIFICATION	0.9997791367921376	WITHOUT_CLASSIFICATION	2.2086320786234744E-4	DESIGN
TODO!!!	WITHOUT_CLASSIFICATION	0.9815348878270636	WITHOUT_CLASSIFICATION	0.018465112172936435	DESIGN
st.setTimestamp( index, new Timestamp( cal.getTimeInMillis() ), cal ); JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9999999987282547	WITHOUT_CLASSIFICATION	1.2717452509185355E-9	DESIGN
st.setDate( index, new Date( cal.getTimeInMillis() ), cal ); JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9999999964276061	WITHOUT_CLASSIFICATION	3.5723940310981454E-9	DESIGN
both are Timestamps	WITHOUT_CLASSIFICATION	0.9999981316318608	WITHOUT_CLASSIFICATION	1.8683681391804347E-6	DESIGN
at least one is a plain old Date	WITHOUT_CLASSIFICATION	0.9999786696949231	WITHOUT_CLASSIFICATION	2.1330305076860188E-5	DESIGN
noop	WITHOUT_CLASSIFICATION	0.9999142757433312	WITHOUT_CLASSIFICATION	8.572425666873394E-5	DESIGN
if the corresponding SQL value is NULL, the reader we got is NULL as well	WITHOUT_CLASSIFICATION	0.9999998544692015	WITHOUT_CLASSIFICATION	1.4553079850156658E-7	DESIGN
Fetch Reader content up to the end - and put characters in a StringBuffer	WITHOUT_CLASSIFICATION	0.9997691111158199	WITHOUT_CLASSIFICATION	2.3088888418005624E-4	DESIGN
Return StringBuffer content as a large String	WITHOUT_CLASSIFICATION	0.9999893208890857	WITHOUT_CLASSIFICATION	1.0679110914319147E-5	DESIGN
or Types.LONGVARCHAR?	WITHOUT_CLASSIFICATION	0.9963398397408588	WITHOUT_CLASSIFICATION	0.003660160259141156	DESIGN
Not called at runtime so doesn't matter if its slow :)	WITHOUT_CLASSIFICATION	0.9999927531329685	WITHOUT_CLASSIFICATION	7.2468670314445555E-6	DESIGN
TODO	WITHOUT_CLASSIFICATION	0.9948042674405423	WITHOUT_CLASSIFICATION	0.005195732559457701	DESIGN
Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999996142138554	WITHOUT_CLASSIFICATION	3.857861446555648E-7	DESIGN
different nullability rules for pk/fk	WITHOUT_CLASSIFICATION	0.9999852887648837	WITHOUT_CLASSIFICATION	1.4711235116389604E-5	DESIGN
cache this	WITHOUT_CLASSIFICATION	0.9998467520544994	WITHOUT_CLASSIFICATION	1.5324794550060334E-4	DESIGN
only really need new array during semiresolve!	WITHOUT_CLASSIFICATION	0.9999367842618229	WITHOUT_CLASSIFICATION	6.321573817704205E-5	DESIGN
Forcefully remove leading ands from where fragments; the grammar will handle adding them	WITHOUT_CLASSIFICATION	0.9974258939479299	WITHOUT_CLASSIFICATION	0.002574106052070139	DESIGN
TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9862181753695592	WITHOUT_CLASSIFICATION	0.013781824630440651	DESIGN
Create a new FILTERS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999999679591293	WITHOUT_CLASSIFICATION	3.2040870782823886E-8	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999194935928871	WITHOUT_CLASSIFICATION	8.050640711293835E-5	DESIGN
public Object instantiate(Object parent, SessionImplementor session) throws HibernateException;	WITHOUT_CLASSIFICATION	0.7602937894018518	WITHOUT_CLASSIFICATION	0.2397062105981483	DESIGN
nothing to do	WITHOUT_CLASSIFICATION	0.9999391881217902	WITHOUT_CLASSIFICATION	6.0811878209889566E-5	DESIGN
nothing to do	WITHOUT_CLASSIFICATION	0.9999391881217902	WITHOUT_CLASSIFICATION	6.0811878209889566E-5	DESIGN
VersionType impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Note : simply returns null for seed() and next() as the only known application of binary types for versioning is for use with the TIMESTAMP datatype supported by Sybase and SQL Server, which are completely db-generated values...	WITHOUT_CLASSIFICATION	0.9999999824196085	WITHOUT_CLASSIFICATION	1.758039158744047E-8	DESIGN
lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999858229696186	WITHOUT_CLASSIFICATION	1.417703038141359E-5	DESIGN
not really necessary, I guess...	WITHOUT_CLASSIFICATION	0.9616425329271333	WITHOUT_CLASSIFICATION	0.03835746707286659	DESIGN
Clobs are ignored by merge() operation	WITHOUT_CLASSIFICATION	0.9999999831212929	WITHOUT_CLASSIFICATION	1.6878707088795345E-8	DESIGN
we do not have to worry about queued additions to uninitialized collections, since they can only occur for inverse collections!	WITHOUT_CLASSIFICATION	0.9999999918490625	WITHOUT_CLASSIFICATION	8.150937381042095E-9	DESIGN
collections cannot be compared	WITHOUT_CLASSIFICATION	0.9999900621655065	WITHOUT_CLASSIFICATION	9.937834493524083E-6	DESIGN
remember the uk value	WITHOUT_CLASSIFICATION	0.9999821537226887	WITHOUT_CLASSIFICATION	1.7846277311278028E-5	DESIGN
NOOP	WITHOUT_CLASSIFICATION	0.9999548662596272	WITHOUT_CLASSIFICATION	4.513374037288713E-5	DESIGN
processCollectionProperty(token, q.getCollectionPersister(collectionRole), collectionName);	WITHOUT_CLASSIFICATION	0.9999999870766042	WITHOUT_CLASSIFICATION	1.2923395896529995E-8	DESIGN
we must use the "remembered" uk value, since it is not available from the EntityEntry during assembly	WITHOUT_CLASSIFICATION	0.9995406253177298	WITHOUT_CLASSIFICATION	4.5937468227017257E-4	DESIGN
collections don't dirty an unversioned parent entity	WITHOUT_CLASSIFICATION	0.9997181067824482	WITHOUT_CLASSIFICATION	2.8189321755171305E-4	DESIGN
return false;	WITHOUT_CLASSIFICATION	0.9999974497896049	WITHOUT_CLASSIFICATION	2.550210394998002E-6	DESIGN
This just handles a particular case of component projection, perhaps get rid of it and throw an exception	WITHOUT_CLASSIFICATION	0.9661276660292245	WITHOUT_CLASSIFICATION	0.033872333970775506	DESIGN
NOTE: we avoid joining to the next table if the named property is just the foreign key value	WITHOUT_CLASSIFICATION	0.9999995582085985	WITHOUT_CLASSIFICATION	4.417914013850086E-7	DESIGN
the key is the owning entity itself, so get the ID from the key	WITHOUT_CLASSIFICATION	0.999965345373568	WITHOUT_CLASSIFICATION	3.4654626432121776E-5	DESIGN
if the original is a PersistentCollection, and that original was not flagged as dirty, then reset the target's dirty flag here after the copy operation. </p> One thing to be careful of here is a "bare" original collection in which case we should never ever ever reset the dirty flag on the target because we simply do not know...	WITHOUT_CLASSIFICATION	0.9999999949803688	WITHOUT_CLASSIFICATION	5.019631196368913E-9	DESIGN
ignore subselect keywords	WITHOUT_CLASSIFICATION	0.9999997275113698	WITHOUT_CLASSIFICATION	2.7248863013542297E-7	DESIGN
copy elements into newly empty target collection	WITHOUT_CLASSIFICATION	0.9999996678246948	WITHOUT_CLASSIFICATION	3.3217530513623166E-7	DESIGN
for a null target, or a target which is the same as the original, we need to put the merged elements in a new collection	WITHOUT_CLASSIFICATION	0.9999985263710183	WITHOUT_CLASSIFICATION	1.473628981744896E-6	DESIGN
by default just use an unanticipated capacity since we don't know how to extract the capacity to use from original here...	WITHOUT_CLASSIFICATION	0.9576076679501714	WITHOUT_CLASSIFICATION	0.04239233204982864	DESIGN
get the elements back into the target making sure to handle dirty flag	WITHOUT_CLASSIFICATION	0.9999976334790611	WITHOUT_CLASSIFICATION	2.366520938919181E-6	DESIGN
check if collection is currently being loaded	WITHOUT_CLASSIFICATION	0.999175406297405	WITHOUT_CLASSIFICATION	8.245937025950695E-4	DESIGN
check if it is already completely loaded, but unowned	WITHOUT_CLASSIFICATION	0.9999936130775675	WITHOUT_CLASSIFICATION	6.386922432412624E-6	DESIGN
cache the actual id of the object, not the value of the property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999929350801045	WITHOUT_CLASSIFICATION	7.0649198955584714E-6	DESIGN
TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9862181753695592	WITHOUT_CLASSIFICATION	0.013781824630440651	DESIGN
create a new collection wrapper, to be initialized later	WITHOUT_CLASSIFICATION	0.9999945527632352	WITHOUT_CLASSIFICATION	5.447236764877601E-6	DESIGN
Some JDBC drivers erroneously return an empty array here for a null DB value :/	WITHOUT_CLASSIFICATION	0.9999739743194157	WITHOUT_CLASSIFICATION	2.6025680584264387E-5	DESIGN
our column span is the number of columns in the PK	WITHOUT_CLASSIFICATION	0.9999996628819744	WITHOUT_CLASSIFICATION	3.3711802557839504E-7	DESIGN
cannot batch fetch by unique key (property-ref associations)	WITHOUT_CLASSIFICATION	0.9999993350048734	WITHOUT_CLASSIFICATION	6.649951265922084E-7	DESIGN
we already know current is not null...	WITHOUT_CLASSIFICATION	0.9998643454906342	WITHOUT_CLASSIFICATION	1.3565450936581626E-4	DESIGN
the ids are fully resolved, so compare them with isDirty(), not isModified()	WITHOUT_CLASSIFICATION	0.9999971827292422	WITHOUT_CLASSIFICATION	2.8172707578942904E-6	DESIGN
the owner of the association is not the owner of the id	WITHOUT_CLASSIFICATION	0.9999988599669491	WITHOUT_CLASSIFICATION	1.1400330509095547E-6	DESIGN
----------------------------------------------------------- Constructors	WITHOUT_CLASSIFICATION	0.9999815574381521	WITHOUT_CLASSIFICATION	1.8442561847932498E-5	DESIGN
----------------------------------------------------- Instance Variables	WITHOUT_CLASSIFICATION	0.9999993501627406	WITHOUT_CLASSIFICATION	6.498372593762454E-7	DESIGN
public static JDBCException newJDBCException(String string, SQLException root, String sql) { string = string + " [" + sql + ']'; log.error(string, root); logExceptions(root); return new JDBCException(string, root, sql); } public static JDBCException newJDBCException(String string, SQLException root) { log.error(string, root); logExceptions(root); return new JDBCException(string, root); }	WITHOUT_CLASSIFICATION	0.9999999961085606	WITHOUT_CLASSIFICATION	3.891439442532115E-9	DESIGN
--------------------------------------------------------- Public Methods	WITHOUT_CLASSIFICATION	0.9998576447276284	WITHOUT_CLASSIFICATION	1.423552723715545E-4	DESIGN
Compare the two maps for equality	WITHOUT_CLASSIFICATION	0.9999995228297948	WITHOUT_CLASSIFICATION	4.771702053391589E-7	DESIGN
Simple tests that require no synchronization	WITHOUT_CLASSIFICATION	0.9999999471907528	WITHOUT_CLASSIFICATION	5.280924719757288E-8	DESIGN
Sybase fail if we don't do that, sigh...	WITHOUT_CLASSIFICATION	0.9999582713479693	WITHOUT_CLASSIFICATION	4.1728652030679575E-5	DESIGN
Handles things like: a and b or c a and ( b or c ) not a and not b not ( a and b ) x between y and z (overloaded "and") x in ( a, b, c ) (overloaded brackets) not not a a is not null (overloaded "not") etc...... and expressions like foo = bar (maps to: foo.id = bar.id) foo.Bar = 'foo' (maps to: foo.bar = 'foo') foo.Bar.Baz = 1.0 (maps to: foo.bar = bar.id and bar.baz = 1.0) 1.0 = foo.Bar.Baz (maps to: bar.baz = 1.0 and foo.Bar = bar.id) foo.Bar.Baz = a.B.C (maps to: bar.Baz = b.C and foo.Bar = bar.id and a.B = b.id) foo.Bar.Baz + a.B.C (maps to: bar.Baz + b.C and foo.Bar = bar.id and a.B = b.id) ( foo.Bar.Baz + 1.0 ) < 2.0 (maps to: ( bar.Baz + 1.0 ) < 2.0 and foo.Bar = bar.id)	WITHOUT_CLASSIFICATION	0.9999960042747611	WITHOUT_CLASSIFICATION	3.99572523892854E-6	DESIGN
release the jdk internal caches everytime to ensure this plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9998320801941737	WITHOUT_CLASSIFICATION	1.6791980582635932E-4	DESIGN
release the jdk internal caches everytime to ensure this plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9998320801941737	WITHOUT_CLASSIFICATION	1.6791980582635932E-4	DESIGN
try to "pretty print" it	WITHOUT_CLASSIFICATION	0.9999836856805968	WITHOUT_CLASSIFICATION	1.6314319403161516E-5	DESIGN
otherwise, just dump it	WITHOUT_CLASSIFICATION	0.9997693399843142	WITHOUT_CLASSIFICATION	2.3066001568589715E-4	DESIGN
its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9999894326526017	WITHOUT_CLASSIFICATION	1.0567347398342376E-5	DESIGN
its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9999894326526017	WITHOUT_CLASSIFICATION	1.0567347398342376E-5	DESIGN
use default behavior	WITHOUT_CLASSIFICATION	0.9999603732258615	WITHOUT_CLASSIFICATION	3.962677413850313E-5	DESIGN
NOTE: early return	WITHOUT_CLASSIFICATION	0.9999744689282589	WITHOUT_CLASSIFICATION	2.553107174097844E-5	DESIGN
the MRU cache used to keep hard references to the most recently used query plans; note : LRU here is a bit of a misnomer, it indicates that LRU entries are removed, the actual kept entries are the MRU entries	WITHOUT_CLASSIFICATION	0.5099252794429967	WITHOUT_CLASSIFICATION	0.49007472055700324	DESIGN
we want to be able to just use the defaults, if JNDI environment properties are not supplied so don't put null in anywhere	WITHOUT_CLASSIFICATION	0.9999763453049086	WITHOUT_CLASSIFICATION	2.3654695091437822E-5	DESIGN
Clone -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.999993168139442	WITHOUT_CLASSIFICATION	6.831860558027089E-6	DESIGN
Serialize -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999999001075711	WITHOUT_CLASSIFICATION	9.989242888015811E-8	DESIGN
stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999977368350003	WITHOUT_CLASSIFICATION	2.263164999710064E-6	DESIGN
stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999977368350003	WITHOUT_CLASSIFICATION	2.263164999710064E-6	DESIGN
Deserialize -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999997833315655	WITHOUT_CLASSIFICATION	2.1666843456665838E-7	DESIGN
static methods only - hide constructor	WITHOUT_CLASSIFICATION	0.9944533552877678	WITHOUT_CLASSIFICATION	0.005546644712232228	DESIGN
&& !('_'==character)	WITHOUT_CLASSIFICATION	0.9999988603009944	WITHOUT_CLASSIFICATION	1.13969900555499E-6	DESIGN
returnign null!	WITHOUT_CLASSIFICATION	0.9999961315385645	WITHOUT_CLASSIFICATION	3.868461435486898E-6	DESIGN
returnign null!	WITHOUT_CLASSIFICATION	0.9999961315385645	WITHOUT_CLASSIFICATION	3.868461435486898E-6	DESIGN
includes last '.'	WITHOUT_CLASSIFICATION	0.9999992319360793	WITHOUT_CLASSIFICATION	7.680639207152679E-7	DESIGN
+1 to include the following '.'	WITHOUT_CLASSIFICATION	0.9999987765380594	WITHOUT_CLASSIFICATION	1.223461940658807E-6	DESIGN
Impl note: takes advantage of the fact that an escpaed single quote embedded within a quote-block can really be handled as two seperate quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9482935802862247	WITHOUT_CLASSIFICATION	0.05170641971377518	DESIGN
first time we find match!	WITHOUT_CLASSIFICATION	0.999990628388317	WITHOUT_CLASSIFICATION	9.371611682949015E-6	DESIGN
entityNames may now include slashes for the representations classname may be an inner class	WITHOUT_CLASSIFICATION	0.9907520900002664	WITHOUT_CLASSIFICATION	0.009247909999733616	DESIGN
wrapped iterators	WITHOUT_CLASSIFICATION	0.9999707326716487	WITHOUT_CLASSIFICATION	2.9267328351232566E-5	DESIGN
index of current iterator in the wrapped iterators array	WITHOUT_CLASSIFICATION	0.9999275051280664	WITHOUT_CLASSIFICATION	7.249487193362478E-5	DESIGN
the current iterator	WITHOUT_CLASSIFICATION	0.9999614660236381	WITHOUT_CLASSIFICATION	3.85339763619478E-5	DESIGN
the last used iterator	WITHOUT_CLASSIFICATION	0.9986716753250992	WITHOUT_CLASSIFICATION	0.0013283246749008876	DESIGN
it was a boolean expression	WITHOUT_CLASSIFICATION	0.999983624672801	WITHOUT_CLASSIFICATION	1.63753271989621E-5	DESIGN
public static Object[] clone(Class elementClass, Object[] array) {Object[] result = (Object[]) Array.newInstance( elementClass, array.length );System.arraycopy(array, 0, result, 0, array.length);return result;}	WITHOUT_CLASSIFICATION	0.9999993746990691	WITHOUT_CLASSIFICATION	6.253009309195211E-7	DESIGN
call this before any Iterator method to make sure that the current Iterator is not exhausted	WITHOUT_CLASSIFICATION	0.99833599865159	WITHOUT_CLASSIFICATION	0.0016640013484100517	DESIGN
doable if needed	WITHOUT_CLASSIFICATION	0.9999817000096913	WITHOUT_CLASSIFICATION	1.829999030868345E-5	DESIGN
set last used iterator here, in case the user calls remove before calling hasNext() or next() (although they shouldn't)	WITHOUT_CLASSIFICATION	0.9997426082866949	WITHOUT_CLASSIFICATION	2.5739171330506285E-4	DESIGN
peek ahead	WITHOUT_CLASSIFICATION	0.999529475920214	WITHOUT_CLASSIFICATION	4.7052407978599617E-4	DESIGN
if we reach the end of the string w/o finding the matching end, that is an exception	WITHOUT_CLASSIFICATION	0.9999999831575339	WITHOUT_CLASSIFICATION	1.6842466084706986E-8	DESIGN
we have a placeholder, spin forward till we find the end	WITHOUT_CLASSIFICATION	0.9999423181025906	WITHOUT_CLASSIFICATION	5.7681897409329254E-5	DESIGN
make sure spinning forward did not put us past the end of the buffer...	WITHOUT_CLASSIFICATION	0.9999999904274985	WITHOUT_CLASSIFICATION	9.572501513318297E-9	DESIGN
First, try to locate this resource through the current context classloader.	WITHOUT_CLASSIFICATION	0.9999914655954628	WITHOUT_CLASSIFICATION	8.534404537179225E-6	DESIGN
Next, try to locate this resource through this class's classloader	WITHOUT_CLASSIFICATION	0.9999782483560671	WITHOUT_CLASSIFICATION	2.1751643932941314E-5	DESIGN
Next, try to locate this resource through the system classloader	WITHOUT_CLASSIFICATION	0.9999850652427272	WITHOUT_CLASSIFICATION	1.4934757272859889E-5	DESIGN
Anywhere else we should look?	WITHOUT_CLASSIFICATION	0.9866359473734779	WITHOUT_CLASSIFICATION	0.013364052626522028	DESIGN
would need an IdentitySet for this!	WITHOUT_CLASSIFICATION	0.9975175841045966	WITHOUT_CLASSIFICATION	0.0024824158954034744	DESIGN
Arrays.asList doesn't do primitive arrays	WITHOUT_CLASSIFICATION	0.9999998697710946	WITHOUT_CLASSIFICATION	1.302289054608573E-7	DESIGN
faster?	WITHOUT_CLASSIFICATION	0.9982599422641083	WITHOUT_CLASSIFICATION	0.0017400577358916143	DESIGN
the name of a class	WITHOUT_CLASSIFICATION	0.9999814274149239	WITHOUT_CLASSIFICATION	1.8572585076105403E-5	DESIGN
Its the listener class name	WITHOUT_CLASSIFICATION	0.9999978700503983	WITHOUT_CLASSIFICATION	2.1299496017035735E-6	DESIGN
allow 9,8,7,6,5,4,3,2,1	WITHOUT_CLASSIFICATION	0.9999985286848755	WITHOUT_CLASSIFICATION	1.4713151244936036E-6	DESIGN
default to element set if no elements() specified	WITHOUT_CLASSIFICATION	0.9999993166278717	WITHOUT_CLASSIFICATION	6.833721283354226E-7	DESIGN
look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999415276897338	WITHOUT_CLASSIFICATION	5.847231026618406E-5	DESIGN
in case we were deserialized in a different JVM, look for an instance with the same name (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.7086753801334494	WITHOUT_CLASSIFICATION	0.2913246198665506	DESIGN
first, lets determine whether to apply cglib or javassist based instrumentation...	WITHOUT_CLASSIFICATION	0.9999934390413272	WITHOUT_CLASSIFICATION	6.560958672789087E-6	DESIGN
Make sure we don't override previous set values	WITHOUT_CLASSIFICATION	0.9999973887368829	WITHOUT_CLASSIFICATION	2.6112631170082465E-6	DESIGN
entirely optional!!	WITHOUT_CLASSIFICATION	0.9999637979315186	WITHOUT_CLASSIFICATION	3.62020684814101E-5	DESIGN
Its the listener instance (or better be)	WITHOUT_CLASSIFICATION	0.9999650756760434	WITHOUT_CLASSIFICATION	3.492432395666346E-5	DESIGN
context.unbind(boundName);	WITHOUT_CLASSIFICATION	0.9999297259427129	WITHOUT_CLASSIFICATION	7.02740572871309E-5	DESIGN
readResolveObject	WITHOUT_CLASSIFICATION	0.999126287733078	WITHOUT_CLASSIFICATION	8.737122669220416E-4	DESIGN
cfg.setProperty("hibernate.show_sql", "true");	WITHOUT_CLASSIFICATION	0.9999999519926057	WITHOUT_CLASSIFICATION	4.8007394283127566E-8	DESIGN
Defensive, convenience methods	WITHOUT_CLASSIFICATION	0.9999491707870501	WITHOUT_CLASSIFICATION	5.082921294991261E-5	DESIGN
Create the SessionFactory from hibernate.cfg.xml	WITHOUT_CLASSIFICATION	0.9999881528954945	WITHOUT_CLASSIFICATION	1.1847104505595626E-5	DESIGN
Make sure you log the exception, as it might be swallowed	WITHOUT_CLASSIFICATION	0.9999862594345942	WITHOUT_CLASSIFICATION	1.3740565405875257E-5	DESIGN
Begin unit of work	WITHOUT_CLASSIFICATION	0.9999545760606755	WITHOUT_CLASSIFICATION	4.542393932440802E-5	DESIGN
Write HTML header	WITHOUT_CLASSIFICATION	0.9999772629799105	WITHOUT_CLASSIFICATION	2.273702008956547E-5	DESIGN
Handle actions	WITHOUT_CLASSIFICATION	0.9999754520111851	WITHOUT_CLASSIFICATION	2.4547988814930636E-5	DESIGN
Print page	WITHOUT_CLASSIFICATION	0.9999977346594692	WITHOUT_CLASSIFICATION	2.2653405308156732E-6	DESIGN
Write HTML footer	WITHOUT_CLASSIFICATION	0.9999972837222343	WITHOUT_CLASSIFICATION	2.716277765741904E-6	DESIGN
End unit of work	WITHOUT_CLASSIFICATION	0.9999379105915012	WITHOUT_CLASSIFICATION	6.208940849893315E-5	DESIGN
Start the session to be used for this request	WITHOUT_CLASSIFICATION	0.9698786338759305	WITHOUT_CLASSIFICATION	0.030121366124069498	DESIGN
make the session available to the session factory's "current context"	WITHOUT_CLASSIFICATION	0.999967854262684	WITHOUT_CLASSIFICATION	3.214573731603015E-5	DESIGN
pass control along to the rest of the processing chain	WITHOUT_CLASSIFICATION	0.9999999663406627	WITHOUT_CLASSIFICATION	3.365933723393678E-8	DESIGN
remove session from "current context"	WITHOUT_CLASSIFICATION	0.998464550146251	WITHOUT_CLASSIFICATION	0.001535449853749056	DESIGN
Eager fetch the collection so we can use it detached	WITHOUT_CLASSIFICATION	0.9999281973375392	WITHOUT_CLASSIFICATION	7.180266246077626E-5	DESIGN
If we want to handle it bidirectional and detached, we also need to load this collection with an eager outer-join fetch, this time with Criteria and not HQL:	WITHOUT_CLASSIFICATION	0.9999999531816902	WITHOUT_CLASSIFICATION	4.681830976890349E-8	DESIGN
Event anEvent = (Event) session .createCriteria(Event.class).setFetchMode("participants", FetchMode.JOIN) .add( Expression.eq("id", eventId) ) .uniqueResult(); Eager fetch the colleciton so we can use it detached	WITHOUT_CLASSIFICATION	0.9999999913411246	WITHOUT_CLASSIFICATION	8.658875355653587E-9	DESIGN
End of first unit of work	WITHOUT_CLASSIFICATION	0.9999762660533172	WITHOUT_CLASSIFICATION	2.3733946682793132E-5	DESIGN
or bidirectional safety method, setting both sides: aPerson.addToEvent(anEvent);	WITHOUT_CLASSIFICATION	0.9999864208993846	WITHOUT_CLASSIFICATION	1.3579100615452063E-5	DESIGN
Begin second unit of work	WITHOUT_CLASSIFICATION	0.9996186397756289	WITHOUT_CLASSIFICATION	3.8136022437101793E-4	DESIGN
Reattachment of aPerson	WITHOUT_CLASSIFICATION	0.9999811398396798	WITHOUT_CLASSIFICATION	1.8860160320091277E-5	DESIGN
The getEmailAddresses() might trigger a lazy load of the collection	WITHOUT_CLASSIFICATION	0.9998408398823546	WITHOUT_CLASSIFICATION	1.5916011764528117E-4	DESIGN
We need our tm, so get it now and avoid doing other work if there is a problem	WITHOUT_CLASSIFICATION	0.9999704201215109	WITHOUT_CLASSIFICATION	2.9579878489075493E-5	DESIGN
Don't hold the JBC node lock throughout the tx, as that prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999975775089712	WITHOUT_CLASSIFICATION	2.422491028761377E-6	DESIGN
Don't hold the JBC node lock throughout the tx, as that prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999975775089712	WITHOUT_CLASSIFICATION	2.422491028761377E-6	DESIGN
JBC put a version in the node when it created as part of some internal operation. We are always newer, but if the JBC version is > 1 something odd has happened	WITHOUT_CLASSIFICATION	0.9999999999714166	WITHOUT_CLASSIFICATION	2.858329371794423E-11	DESIGN
swaldman 2006-08-28: define c3p0-style configuration parameters for properties with hibernate-specific overrides to detect and warn about conflicting declarations	WITHOUT_CLASSIFICATION	0.9995022569069787	WITHOUT_CLASSIFICATION	4.977430930213571E-4	DESIGN
Not null if the Isolation level has been specified in the configuration file. Otherwise, it is left to the Driver's default value.	WITHOUT_CLASSIFICATION	0.9999989942555468	WITHOUT_CLASSIFICATION	1.005744453161418E-6	DESIGN
Configured outside of Hibernate (i.e. Servlet container, or Java Bean Container already has Proxool pools running, and this provider is to just borrow one of these	WITHOUT_CLASSIFICATION	0.9930922064541178	WITHOUT_CLASSIFICATION	0.006907793545882243	DESIGN
If you're closing down the ConnectionProvider chances are an is not a real big deal, just warn	WITHOUT_CLASSIFICATION	0.9999999941482607	WITHOUT_CLASSIFICATION	5.851739196342219E-9	DESIGN
(AS is always optional, for consistency with SQL/OQL)	WITHOUT_CLASSIFICATION	0.9999993919581703	WITHOUT_CLASSIFICATION	6.080418295797081E-7	DESIGN
process the "new" HQL style where aliases are assigned _after_ the class name or path expression ie. using the AS construction	WITHOUT_CLASSIFICATION	0.9999960648783954	WITHOUT_CLASSIFICATION	3.935121604557671E-6	DESIGN
the loaded owner will be set to null after the collection is removed, so capture its value as the affected owner so it is accessible to both pre- and post- events	WITHOUT_CLASSIFICATION	0.9999999952900521	WITHOUT_CLASSIFICATION	4.709947934952823E-9	DESIGN
is a primitive type invokespecial	WITHOUT_CLASSIFICATION	0.999999070815641	WITHOUT_CLASSIFICATION	9.291843591087013E-7	DESIGN
array of primitive type do nothing	WITHOUT_CLASSIFICATION	0.999998185947042	WITHOUT_CLASSIFICATION	1.8140529579685045E-6	DESIGN
handle a path expression or class name that appears at the start, in the "new" HQL style or an alias that appears at the start in the "old" HQL style	WITHOUT_CLASSIFICATION	0.9999510993077394	WITHOUT_CLASSIFICATION	4.890069226046637E-5	DESIGN
handle <=, >=, !=, is not, not between, not in	WITHOUT_CLASSIFICATION	0.9999631304932901	WITHOUT_CLASSIFICATION	3.6869506709980915E-5	DESIGN
The loop ensures atomicity of the select + update even for no transaction or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999999740916165	WITHOUT_CLASSIFICATION	2.5908383613589763E-8	DESIGN
transfer an explicitly defined entity name handle the lazy attribute	WITHOUT_CLASSIFICATION	0.9957398823004806	WITHOUT_CLASSIFICATION	0.0042601176995193685	DESIGN
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999988529391373	WITHOUT_CLASSIFICATION	1.1470608626947613E-6	DESIGN
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999988529391373	WITHOUT_CLASSIFICATION	1.1470608626947613E-6	DESIGN
get meta's from <joined-subclass>	WITHOUT_CLASSIFICATION	0.9999968650577614	WITHOUT_CLASSIFICATION	3.1349422386001702E-6	DESIGN
parameters on the property mapping should override parameters in the typedef	WITHOUT_CLASSIFICATION	0.9995924669153264	WITHOUT_CLASSIFICATION	4.075330846735464E-4	DESIGN
fetch="join" overrides default laziness fetch="join" overrides default laziness	WITHOUT_CLASSIFICATION	0.9999999987027027	WITHOUT_CLASSIFICATION	1.2972972125218936E-9	DESIGN
NOTE SPECIAL CASE: default to join and non-lazy for the "second join" of the many-to-many	WITHOUT_CLASSIFICATION	0.9999999588384512	WITHOUT_CLASSIFICATION	4.11615489145937E-8	DESIGN
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999994730226083	WITHOUT_CLASSIFICATION	5.269773916981625E-7	DESIGN
state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999861442486848	WITHOUT_CLASSIFICATION	1.3855751315058714E-5	DESIGN
void setComponentTuplizerFactory(ComponentTuplizerFactory componentTuplizerFactory) { this.componentTuplizerFactory = componentTuplizerFactory; }	WITHOUT_CLASSIFICATION	0.9999940374735595	WITHOUT_CLASSIFICATION	5.962526440474252E-6	DESIGN
element index -> id	WITHOUT_CLASSIFICATION	0.9999995217193819	WITHOUT_CLASSIFICATION	4.782806181294792E-7	DESIGN
note that it might be better to iterate the snapshot but this is safe, assuming the user implements equals() properly, as required by the Set contract!	WITHOUT_CLASSIFICATION	0.8180755356301765	WITHOUT_CLASSIFICATION	0.18192446436982343	DESIGN
collections detect changes made via their public interface and mark themselves as dirty as a performance optimization	WITHOUT_CLASSIFICATION	0.9990719388271518	WITHOUT_CLASSIFICATION	9.280611728481966E-4	DESIGN
essentially, if the real session is closed allow any method call to pass through since the real session will complain by throwing an appropriate exception; NOTE that allowing close() above has the same basic effect, but we capture that there simply to perform the unbind...	WITHOUT_CLASSIFICATION	0.9999999997854074	WITHOUT_CLASSIFICATION	2.1459267489915263E-10	DESIGN
The default SQLExceptionConverter for all dialects is based on SQLState since SQLErrorCode is extremely vendor-specific. Specific Dialects may override to return whatever is most appropriate for that vendor.	WITHOUT_CLASSIFICATION	0.9999999965266767	WITHOUT_CLASSIFICATION	3.4733231921593013E-9	DESIGN
only necessary for postgre < 7.4 http:anoncvs.postgresql.org/cvsweb.cgi/pgsql/doc/src/sgml/ref/create_sequence.sgml	WITHOUT_CLASSIFICATION	0.9999991896664703	WITHOUT_CLASSIFICATION	8.103335296336637E-7	DESIGN
select topic, syntax from information_schema.help where section like 'Function%' order by section, topic see also -> http:www.h2database.com/html/functions.html	WITHOUT_CLASSIFICATION	0.9999999995583085	WITHOUT_CLASSIFICATION	4.416913586996668E-10	DESIGN
registerColumnType(Types.VARBINARY, "CHARACTER($l)"); registerColumnType(Types.BLOB, "CHARACTER($l)" ); For use prior to CP 11.0 registerColumnType(Types.CLOB, "CHARACTER($l)" );	WITHOUT_CLASSIFICATION	0.9999998677765428	WITHOUT_CLASSIFICATION	1.322234571796247E-7	DESIGN
the BLOB type requires a size arguement - this defaults to bytes - no arg defaults to 1 whole byte! other argument mods include K - kilobyte, M - megabyte, G - gigabyte. refer to the PBdevelopers guide for more info.	WITHOUT_CLASSIFICATION	0.9848746349693562	DESIGN	0.015125365030643722	WITHOUT_CLASSIFICATION
We must return a valid RDMS/RSA command from this method to prevent RDMS/RSA from issuing ERROR 400	WITHOUT_CLASSIFICATION	0.9998876244389902	WITHOUT_CLASSIFICATION	1.1237556100986722E-4	DESIGN
Oracle driver reports to support getGeneratedKeys(), but they only support the version taking an array of the names of the columns to be returned (via its RETURNING clause). No other driver seems to support this overloaded version.	WITHOUT_CLASSIFICATION	0.9753796069342282	WITHOUT_CLASSIFICATION	0.024620393065771757	DESIGN
add the comment nest the main query in an outer select add the rownnumber bit into the outer query select list	WITHOUT_CLASSIFICATION	0.9999982925308807	WITHOUT_CLASSIFICATION	1.707469119399142E-6	DESIGN
You may still have other ResultSets or update counts left to process here but you can't do it now or the ResultSet you just got will be closed	WITHOUT_CLASSIFICATION	0.9999999916106872	WITHOUT_CLASSIFICATION	8.389312846728487E-9	DESIGN
Note: For object <-> SQL datatype mappings see: Configuration Manager | Advanced | SQL | System DDL Datatype Mappings TBDregisterColumnType(Types.BINARY, "binary($1)"); changed 08-11-2005, jsl	WITHOUT_CLASSIFICATION	0.9999992942666621	WITHOUT_CLASSIFICATION	7.057333378531255E-7	DESIGN
TRIM(end_keyword string-expression-1 FROM string-expression-2) use Hibernate implementation "From" is one of the parameters they pass in position ?3 registerFunction( "trim", new SQLFunctionTemplate(Hibernate.STRING, "trim(?1 ?2 from ?3)") );	WITHOUT_CLASSIFICATION	0.9999999983083762	WITHOUT_CLASSIFICATION	1.6916239347385285E-9	DESIGN
Whether this dialect has an Identity clause added to the data type or a completely seperate identity data type	WITHOUT_CLASSIFICATION	0.9999878933611647	WITHOUT_CLASSIFICATION	1.2106638835245504E-5	DESIGN
According to both the ANSI-SQL and JPA specs, trim takes a variable number of parameters between 1 and 4. at least one paramer (trimSource) is required. From the SQL spec: <trim function> ::= TRIM <left paren> <trim operands> <right paren> <trim operands> ::= [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> <trim specification> ::= LEADING | TRAILING | BOTH If <trim specification> is omitted, BOTH is assumed. If <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999999085916855	WITHOUT_CLASSIFICATION	9.14083144960807E-8	DESIGN
/ Prepare persisters and link them up with their cache region/access-strategy	WITHOUT_CLASSIFICATION	0.984786913454421	WITHOUT_CLASSIFICATION	0.01521308654557895	DESIGN
Named Queries:	WITHOUT_CLASSIFICATION	0.9999245804178596	WITHOUT_CLASSIFICATION	7.541958214045516E-5	DESIGN
this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.962142934472673	WITHOUT_CLASSIFICATION	0.03785706552732718	DESIGN
does not handle arrays (thats ok, cos they can't be lazy) or newly instantiated collections, so we can do the cast	WITHOUT_CLASSIFICATION	0.9982439864885803	WITHOUT_CLASSIFICATION	0.0017560135114196899	DESIGN
collection deletions are a special case since update() can add deletions of collections not loaded by the session.	WITHOUT_CLASSIFICATION	0.9999999997452876	WITHOUT_CLASSIFICATION	2.5471243976431355E-10	DESIGN
we can do the cast since orphan-delete does not apply to: 1. newly instantiated collections 2. arrays (we can't track orphans for detached arrays)	WITHOUT_CLASSIFICATION	0.9948260777563365	WITHOUT_CLASSIFICATION	0.005173922243663546	DESIGN
if the natural-id is marked as non-mutable, it is not retrieved during a normal database-snapshot operation...	WITHOUT_CLASSIFICATION	0.9999975753620823	WITHOUT_CLASSIFICATION	2.4246379176354118E-6	DESIGN
watch out for a case where old is still referenced somewhere in the object graph! (which is a user error)	WITHOUT_CLASSIFICATION	0.998605068884653	WITHOUT_CLASSIFICATION	0.0013949311153469766	DESIGN
slice, to get the columns for this component property	WITHOUT_CLASSIFICATION	0.9996516700369931	WITHOUT_CLASSIFICATION	3.4832996300682877E-4	DESIGN
int result = 17; result = 37 result + type.hashCode(); result = 37 result + ( value==null ? 0 : value.hashCode() ); return result;	WITHOUT_CLASSIFICATION	0.9999999949271022	WITHOUT_CLASSIFICATION	5.072897681999404E-9	DESIGN
The CollectionEntry.isReached() stuff is just to detect any silly users who set up circular or shared references between/to collections.	WITHOUT_CLASSIFICATION	0.9999998666018529	WITHOUT_CLASSIFICATION	1.3339814717440905E-7	DESIGN
detached collection wrappers that get found + reattached during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999990985889681	WITHOUT_CLASSIFICATION	9.014110319189751E-7	DESIGN
The unique property value represented here may or may not be serializable, so we do an explicit check here in order to generate a better error message	WITHOUT_CLASSIFICATION	0.6658278448377669	DESIGN	0.3341721551622331	WITHOUT_CLASSIFICATION
if the version of a newly instantiated object is not the same as the version seed value, use that as the unsaved-value	WITHOUT_CLASSIFICATION	0.9995866496524953	WITHOUT_CLASSIFICATION	4.133503475047344E-4	DESIGN
ie. we never have to null out a reference to an uninitialized proxy	WITHOUT_CLASSIFICATION	0.999998469524478	WITHOUT_CLASSIFICATION	1.5304755219094009E-6	DESIGN
ignore this row, the collection is in process of being loaded somewhere further "up" the stack	WITHOUT_CLASSIFICATION	0.9999894751653784	WITHOUT_CLASSIFICATION	1.0524834621627088E-5	DESIGN
Entity load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ currently, not yet used...	WITHOUT_CLASSIFICATION	0.9915834111309632	WITHOUT_CLASSIFICATION	0.008416588869036798	DESIGN
should be ok performance-wise to generate new delegate instances for each request since these are locally stack-scoped. Besides, it makes the code much easier to read than the old TransactionHelper stuff...	WITHOUT_CLASSIFICATION	0.6869055436148166	DESIGN	0.3130944563851835	WITHOUT_CLASSIFICATION
this implementation is supposed to tolerate incorrect unsaved-value mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9995479218876584	WITHOUT_CLASSIFICATION	4.520781123416349E-4	DESIGN
this implementation is supposed to tolerate incorrect unsaved-value mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9995479218876584	WITHOUT_CLASSIFICATION	4.520781123416349E-4	DESIGN
wrap up any new collections directly referenced by the object or its components	WITHOUT_CLASSIFICATION	0.9999999851645852	WITHOUT_CLASSIFICATION	1.4835414802859687E-8	DESIGN
remove any snapshot, not really for memory management purposes, but rather because it might now be stale, and there is no longer any EntityEntry to take precedence This is now handled by removeEntity() session.getPersistenceContext().removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999998774054427	WITHOUT_CLASSIFICATION	1.2259455732201482E-7	DESIGN
skip this check for composite-ids relating to dom4j entity-mode; alternatively, we could add a check to make sure the incoming id value is an instance of Element...	WITHOUT_CLASSIFICATION	0.7670359525550376	WITHOUT_CLASSIFICATION	0.23296404744496238	DESIGN
upgrade the lock if necessary: lock(result, lockMode);	WITHOUT_CLASSIFICATION	0.9758679578294392	WITHOUT_CLASSIFICATION	0.02413204217056072	DESIGN
now, any collections that are initialized inside this block do not get updated - they are ignored until the next flush	WITHOUT_CLASSIFICATION	0.9999915555106774	WITHOUT_CLASSIFICATION	8.444489322593858E-6	DESIGN
we must clone embedded composite identifiers, or we will get back the same instance that we pass in	WITHOUT_CLASSIFICATION	0.9999970336584618	WITHOUT_CLASSIFICATION	2.9663415382675904E-6	DESIGN
Sub-insertions should occur before containing insertion so Try to do the callback now	WITHOUT_CLASSIFICATION	0.9998647776718083	WITHOUT_CLASSIFICATION	1.3522232819183444E-4	DESIGN
the entity is not associated with the session, so try interceptor and unsaved-value	WITHOUT_CLASSIFICATION	0.9999811424697469	WITHOUT_CLASSIFICATION	1.885753025310269E-5	DESIGN
scan the query string for class names appearing in the from clause and replace with all persistent implementors of the class/interface, returning multiple query strings (make sure we don't pick up a class in the select clause!)	WITHOUT_CLASSIFICATION	0.9867963455405455	DESIGN	0.013203654459454432	WITHOUT_CLASSIFICATION
save() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998152755332	WITHOUT_CLASSIFICATION	1.8472446691137103E-7	DESIGN
evict() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999983788801164	WITHOUT_CLASSIFICATION	1.6211198834810216E-6	DESIGN
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9998613258010471	WITHOUT_CLASSIFICATION	1.38674198952738E-4	DESIGN
if it is an uninitialized proxy, pointing with this session, then when it is accessed, the underlying instance will be "contained"	WITHOUT_CLASSIFICATION	0.9999988517997814	WITHOUT_CLASSIFICATION	1.1482002186023722E-6	DESIGN
Generate an explicit join for the root dot node. The implied joins will be collected and passed up to the root dot node.	WITHOUT_CLASSIFICATION	0.999999995213431	WITHOUT_CLASSIFICATION	4.786569069537592E-9	DESIGN
A session is considered to contain an entity only if the entity has an entry in the session's persistence context and the entry reports that the entity has not been removed	WITHOUT_CLASSIFICATION	0.999973283919077	WITHOUT_CLASSIFICATION	2.67160809230148E-5	DESIGN
Does the collection referenced by this FromElement specify an order-by attribute? If so, attach it to the query's order-by	WITHOUT_CLASSIFICATION	0.9999737023526054	WITHOUT_CLASSIFICATION	2.6297647394607092E-5	DESIGN
... and the token could be an identifer and the error is a mismatched token error ...	WITHOUT_CLASSIFICATION	0.9456886138703531	WITHOUT_CLASSIFICATION	0.05431138612964688	DESIGN
If a where clause was specified in the update/delete query, use it to limit the returned ids here...	WITHOUT_CLASSIFICATION	0.9999998118366129	WITHOUT_CLASSIFICATION	1.8816338716681492E-7	DESIGN
int parameterStart = getWalker().getNumberOfParametersInSetClause(); List allParams = getIdSelectParameterSpecifications(); Iterator whereParams = allParams.subList( parameterStart, allParams.size() ).iterator();	WITHOUT_CLASSIFICATION	0.9999999894831371	WITHOUT_CLASSIFICATION	1.0516862943613905E-8	DESIGN
Default implementation: If this node has a data type, and that data type is not an association, then this is scalar.	WITHOUT_CLASSIFICATION	0.9999119094189345	WITHOUT_CLASSIFICATION	8.809058106557794E-5	DESIGN
Resolve the LHS fully, generate implicit joins. Pass in the property name so that the resolver can discover foreign key (id) properties.	WITHOUT_CLASSIFICATION	0.9998194952247136	WITHOUT_CLASSIFICATION	1.8050477528632286E-4	DESIGN
If the propertyType is null and there isn't a parent, just stop now... there was a problem resolving the node anyway.	WITHOUT_CLASSIFICATION	0.639276264377372	WITHOUT_CLASSIFICATION	0.360723735622628	DESIGN
We do not look for an existing join on the same path, because it makes sense to join twice on the same collection role	WITHOUT_CLASSIFICATION	0.9999997671106667	WITHOUT_CLASSIFICATION	2.328893333154319E-7	DESIGN
our parent is another dot node, meaning we are being further dereferenced. thus we need to generate a join unless the parent refers to the associated entity's PK (because 'our' table would know the FK).	WITHOUT_CLASSIFICATION	0.7933561165888845	WITHOUT_CLASSIFICATION	0.20664388341111545	DESIGN
public final Currency getCurrency(int col) throws HibernateException {return (Currency) get(col);}	WITHOUT_CLASSIFICATION	0.9999864350722879	WITHOUT_CLASSIFICATION	1.356492771212872E-5	DESIGN
here, we have two possibilities: 1) the property-name matches the explicitly identifier property name 2) the property-name matches the implicit 'id' property name	WITHOUT_CLASSIFICATION	0.9993646910224669	WITHOUT_CLASSIFICATION	6.353089775329654E-4	DESIGN
Set the unresolved path in this node and the parent. Set the text for the parent.	WITHOUT_CLASSIFICATION	0.9997982330071634	WITHOUT_CLASSIFICATION	2.0176699283667066E-4	DESIGN
Get the first child to be considered. Sub-classes may do this differently in order to skip nodes that are not select expressions (e.g. DISTINCT).	WITHOUT_CLASSIFICATION	0.9999973950585085	WITHOUT_CLASSIFICATION	2.604941491569376E-6	DESIGN
If this is an entity and the property is the identifier property, then use getIdentifierType(). Note that the propertyName.equals( propertyPath ) checks whether we have a component key reference, where the component class property name is the same as the entity id property name; if the two are not equal, this is the case and we'd need to "fall through" to using the property mapping.	WITHOUT_CLASSIFICATION	0.9999999997728094	WITHOUT_CLASSIFICATION	2.2719046303726253E-10	DESIGN
for a subquery, the alias to use depends on a few things (we already know this is not an overall SELECT): 1) if this FROM_ELEMENT represents a correlation to the outer-most query A) if the outer query represents a multi-table persister, we need to use the given alias in anticipation of one of the multi-table executors being used (as this subquery will actually be used in the "id select" phase of that multi-table executor) B) otherwise, we need to use the persister's table name as the column qualification 2) otherwise (not correlated), use the given alias	WITHOUT_CLASSIFICATION	0.9783994013709195	WITHOUT_CLASSIFICATION	0.021600598629080425	DESIGN
Not a collection? Return the entity property mapping.	WITHOUT_CLASSIFICATION	0.9771298142700003	WITHOUT_CLASSIFICATION	0.022870185729999746	DESIGN
collection of <many-to-any/> mappings... used to circumvent the component-collection check below...	WITHOUT_CLASSIFICATION	0.9988976698095354	WITHOUT_CLASSIFICATION	0.0011023301904645093	DESIGN
Otherwise, the destination node was implied by the FROM clause and the FROM clause processor will automatically add it in the right place.	WITHOUT_CLASSIFICATION	0.9999939907760893	WITHOUT_CLASSIFICATION	6.009223910719764E-6	DESIGN
If the first identifier in the path referrs to the class alias (not the class name), then this is a correlated subselect. If it's a correlated sub-select, use the existing table alias. Otherwise generate a new one.	WITHOUT_CLASSIFICATION	0.9994456497268738	WITHOUT_CLASSIFICATION	5.543502731262393E-4	DESIGN
check to see if our "propPath" actually represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999046553990886	WITHOUT_CLASSIFICATION	9.534460091153783E-5	DESIGN
An ident node can represent an index expression if the ident represents a naked property ref Note: this makes the assumption (which is currently the case in the hql-sql grammar) that the ident is first resolved itself (addrExpr -> resolve()). The other option, if that changes, is to call resolve from here; but it is currently un-needed overhead.	WITHOUT_CLASSIFICATION	0.9999772578209077	WITHOUT_CLASSIFICATION	2.274217909216703E-5	DESIGN
This uses a PathExpressionParser but notice that compound paths are not valid, only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9999978110086631	WITHOUT_CLASSIFICATION	2.1889913369239605E-6	DESIGN
If this is an implied join in a FROM clause, then use ANSI-style joining, and set the flag on the FromElement that indicates that it was implied in the FROM clause itself.	WITHOUT_CLASSIFICATION	0.9999930096297763	WITHOUT_CLASSIFICATION	6.99037022370815E-6	DESIGN
origin.addDestination(destination); Add the query spaces.	WITHOUT_CLASSIFICATION	0.9999972122066056	WITHOUT_CLASSIFICATION	2.787793394369245E-6	DESIGN
For an explicit many-to-many relationship, add a second join from the intermediate (many-to-many) table to the destination table. Also, make sure that the from element's idea of the destination is the destination table.	WITHOUT_CLASSIFICATION	0.9999999999482434	WITHOUT_CLASSIFICATION	5.175672350063585E-11	DESIGN
Reset the node type, because the rest of the system is expecting FROM_FRAGMENT, all we wanted was for the factory to create the right sub-class. This might get reset again later on anyway to make the SQL generation simpler.	WITHOUT_CLASSIFICATION	0.9999863467574666	WITHOUT_CLASSIFICATION	1.3653242533532894E-5	DESIGN
explicit = true; This is an explict Select. ArrayList sqlResultTypeList = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999999950642385	WITHOUT_CLASSIFICATION	4.935761478997503E-9	DESIGN
sqlResultTypeList.add( type ); Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999998552698697	WITHOUT_CLASSIFICATION	1.447301303145324E-7	DESIGN
If the expression list has exactly one expression, and the type of the expression is a collection then this might be a collection function, such as index(c) or size(c).	WITHOUT_CLASSIFICATION	0.9999451371367674	WITHOUT_CLASSIFICATION	5.486286323262233E-5	DESIGN
Need to parse off the column qualifiers; this is assuming (which is true as of now) that this is only used from update and delete HQL statement parsing	WITHOUT_CLASSIFICATION	0.99999553510822	WITHOUT_CLASSIFICATION	4.464891779954664E-6	DESIGN
for regression testing against output from the old parser... found it easiest to simply reorder the FromElements here into ascending order in terms of injecting them into the resulting sql ast in orders relative to those expected by the old parser; this is definitely another of those "only needed for regression purposes". The SyntheticAndFactory, then, simply injects them as it encounters them.	WITHOUT_CLASSIFICATION	0.999999999924074	WITHOUT_CLASSIFICATION	7.592607487618782E-11	DESIGN
The uber-rule here is that we need to include subclass joins if the FromElement is in any way dereferenced by a property from the subclass table; otherwise we end up with column references qualified by a non-existent table reference in the resulting SQL...	WITHOUT_CLASSIFICATION	0.9995656360293421	WITHOUT_CLASSIFICATION	4.343639706578684E-4	DESIGN
classic translator does not support collection of ordinal param metadata	WITHOUT_CLASSIFICATION	0.9919646843637359	WITHOUT_CLASSIFICATION	0.008035315636264136	DESIGN
The following variables are stacks that keep information about each subexpression in the list of nested subexpressions we are currently processing.	WITHOUT_CLASSIFICATION	0.9997703265091551	WITHOUT_CLASSIFICATION	2.2967349084487693E-4	DESIGN
The loop ensures atomicity of the select + update even for no transaction or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999999740916165	WITHOUT_CLASSIFICATION	2.5908383613589763E-8	DESIGN
should not be able to reach last without maxPosition being set unless there are no results	WITHOUT_CLASSIFICATION	0.9999999961841765	WITHOUT_CLASSIFICATION	3.815823582305769E-9	DESIGN
we found it in the temp PC. Should indicate we are in the midst of processing a result set containing eager fetches via join fetch	WITHOUT_CLASSIFICATION	0.9999989318257604	WITHOUT_CLASSIFICATION	1.0681742396192343E-6	DESIGN
do not use proxiesByKey, since not all proxies that point to this session's instances are in that collection!	WITHOUT_CLASSIFICATION	0.9630644847720711	WITHOUT_CLASSIFICATION	0.03693551522792889	DESIGN
if there is no TM configured, we will not be able to access the javax.transaction.Transaction object in order to register a synch anyway.	WITHOUT_CLASSIFICATION	0.994819735734727	WITHOUT_CLASSIFICATION	0.005180264265272936	DESIGN
Since the result set cursor is always left at the first physical row after the "last processed", we need to jump back one position to get the key value we are interested in skipping	WITHOUT_CLASSIFICATION	0.9999999639014105	WITHOUT_CLASSIFICATION	3.609858943677092E-8	DESIGN
true if this is a query and we are loading multiple instances of the same collection role otherwise this is a CollectionInitializer and we are loading up a single collection or batch	WITHOUT_CLASSIFICATION	0.9996962987470671	WITHOUT_CLASSIFICATION	3.037012529328657E-4	DESIGN
we don't need to worry about existing version being uninitialized because this block isn't called by a re-entrant load (re-entrant loads _always_ have lock mode NONE)	WITHOUT_CLASSIFICATION	0.9999998216727787	WITHOUT_CLASSIFICATION	1.7832722119855788E-7	DESIGN
add temp entry so that the next step is circular-reference safe - only needed because some types don't take proper advantage of two-phase-load (esp. components)	WITHOUT_CLASSIFICATION	0.9999999868002573	WITHOUT_CLASSIFICATION	1.319974276192551E-8	DESIGN
assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999989651009096	WITHOUT_CLASSIFICATION	1.0348990904860458E-6	DESIGN
log a message about potential connection leaks	WITHOUT_CLASSIFICATION	0.9999931283157851	WITHOUT_CLASSIFICATION	6.871684214868107E-6	DESIGN
ps.close(); just close it; do NOT try to return it to the pool! NOTE: early exit!	WITHOUT_CLASSIFICATION	0.9999991941037304	WITHOUT_CLASSIFICATION	8.058962695596536E-7	DESIGN
this has been shown to happen occasionally in rare cases when using a transaction manager + transaction-timeout where the timeout calls back through Hibernate's registered transaction synchronization on a separate "reaping" thread. In cases where that reaping thread executes through this block at the same time the main application thread does we can get into situations where these CMEs occur. And though it is not "allowed" per-se, the end result without handling it specifically is infinite looping. So here, we simply break the loop	WITHOUT_CLASSIFICATION	0.9999979125925963	WITHOUT_CLASSIFICATION	2.0874074037478153E-6	DESIGN
unfortunately this stuff can't be cached because it is per-invocation, not constant for the QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9993780719751045	WITHOUT_CLASSIFICATION	6.219280248955912E-4	DESIGN
can't cache this stuff either (per-invocation) we are given a map of user-alias -> lock mode create a new map of sql-alias -> lock mode	WITHOUT_CLASSIFICATION	0.9999942903256647	WITHOUT_CLASSIFICATION	5.709674335263708E-6	DESIGN
don't create a unique key, 'cos some databases don't like a UK on nullable columns getCollectionTable().createUniqueKey( getIdentifier().getConstraintColumns() );	WITHOUT_CLASSIFICATION	0.999999492362628	WITHOUT_CLASSIFICATION	5.076373720161278E-7	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999991940510438	WITHOUT_CLASSIFICATION	8.059489562474588E-7	DESIGN
isSet = collection.isSet(); isSorted = collection.isSorted();	WITHOUT_CLASSIFICATION	0.9999999165671646	WITHOUT_CLASSIFICATION	8.343283542752858E-8	DESIGN
lists, arrays sets, maps, bags	WITHOUT_CLASSIFICATION	0.9999998841376198	WITHOUT_CLASSIFICATION	1.1586238017614516E-7	DESIGN
we finish all the "removes" first to take care of possible unique constraints and so that we can take better advantage of batching	WITHOUT_CLASSIFICATION	0.999936989116954	WITHOUT_CLASSIFICATION	6.301088304602097E-5	DESIGN
use a combination of foreign key columns and pk columns, since the ordering of removal and addition is not guaranteed when a child moves from one parent to another	WITHOUT_CLASSIFICATION	0.9998191674329382	WITHOUT_CLASSIFICATION	1.8083256706186366E-4	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999991940510438	WITHOUT_CLASSIFICATION	8.059489562474588E-7	DESIGN
information about properties of this class, including inherited properties (only really needed for updatable/insertable properties)	WITHOUT_CLASSIFICATION	0.9999994079708401	WITHOUT_CLASSIFICATION	5.920291598422584E-7	DESIGN
all this only really needs to consider properties of this class, not its subclasses, but since we are reusing code used for sequential selects, we use the subclass closure	WITHOUT_CLASSIFICATION	0.999999769835423	WITHOUT_CLASSIFICATION	2.3016457690580265E-7	DESIGN
Here we render the select column list based on the properties defined as being generated. For partial component generation, we currently just re-select the whole component rather than trying to handle the individual generated portions.	WITHOUT_CLASSIFICATION	0.9999811622689624	WITHOUT_CLASSIFICATION	1.883773103764408E-5	DESIGN
this is the root (versioned) table, and we are using version-based optimistic locking; if we are not updating the version, also don't check it (unless this is a "generated" version column)!	WITHOUT_CLASSIFICATION	0.9999982504144588	WITHOUT_CLASSIFICATION	1.7495855411939203E-6	DESIGN
optimistic-lock="all", include all updatable properties optimistic-lock="dirty", include all properties we are updating this time	WITHOUT_CLASSIFICATION	0.9999944037884477	WITHOUT_CLASSIFICATION	5.5962115522338746E-6	DESIGN
this property belongs to the table, and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.8656763134518799	WITHOUT_CLASSIFICATION	0.13432368654812007	DESIGN
check to see if the connection is in auto-commit mode (no connection means aggressive connection release outside a JTA transaction context, so MUST be autocommit mode)	WITHOUT_CLASSIFICATION	0.9999987927777876	WITHOUT_CLASSIFICATION	1.2072222124310148E-6	DESIGN
need to treat this as if it where optimistic-lock="all" (dirty does not make sense); first we need to locate the "loaded" state Note, it potentially could be a proxy, so perform the location the safe way...	WITHOUT_CLASSIFICATION	0.8380492916446944	DESIGN	0.16195070835530548	WITHOUT_CLASSIFICATION
we always assume an instance with a null identifier or no identifier property is unsaved!	WITHOUT_CLASSIFICATION	0.999981729291853	WITHOUT_CLASSIFICATION	1.827070814700684E-5	DESIGN
Need to use the identifier type of the collection owner since the incoming is value is actually the owner's id. Using the collection's key type causes problems with property-ref keys...	WITHOUT_CLASSIFICATION	0.9999663309276398	WITHOUT_CLASSIFICATION	3.3669072360212907E-5	DESIGN
allow any identifier quoted with backtick only recognizes identifiers beginning with a letter	WITHOUT_CLASSIFICATION	0.9999913458735624	WITHOUT_CLASSIFICATION	8.654126437614561E-6	DESIGN
following doesn't handle (null, not null) but unnecessary since this would mean all rows	WITHOUT_CLASSIFICATION	0.9343373302428701	WITHOUT_CLASSIFICATION	0.0656626697571298	DESIGN
IMPL NOTE : due to the delayed population of setters (setters cached for performance), we really cannot pro0perly define equality for this transformer	WITHOUT_CLASSIFICATION	0.9989331276367647	WITHOUT_CLASSIFICATION	0.0010668723632353025	DESIGN
we need to dirty check collections, since they can cause an owner version number increment	WITHOUT_CLASSIFICATION	0.9999371673980784	WITHOUT_CLASSIFICATION	6.283260192163903E-5	DESIGN
return the id, so we can use it to reset the proxy id return result;	WITHOUT_CLASSIFICATION	0.999996664485646	WITHOUT_CLASSIFICATION	3.3355143539228466E-6	DESIGN
optimizer = getFactory().getSettings().getBytecodeProvider().getReflectionOptimizer( mappedClass, getterNames, setterNames, propTypes );	WITHOUT_CLASSIFICATION	0.9999264178761488	WITHOUT_CLASSIFICATION	7.358212385121862E-5	DESIGN
cache the actual id of the object, not the value of the property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999929350801045	WITHOUT_CLASSIFICATION	7.0649198955584714E-6	DESIGN
We now have the value of the property-ref we reference. However, we need to dig a little deeper, as that property might also be an entity type, in which case we need to resolve its identitifier	WITHOUT_CLASSIFICATION	0.9999672775349359	WITHOUT_CLASSIFICATION	3.272246506416631E-5	DESIGN
Retrieve the value of the designated column in the current row of this ResultSet object as a java.io.Reader object	WITHOUT_CLASSIFICATION	0.9999989508417068	WITHOUT_CLASSIFICATION	1.0491582932497522E-6	DESIGN
not absolutely necessary, but helps for some equals()/hashCode() implementations	WITHOUT_CLASSIFICATION	0.9995227000139826	WITHOUT_CLASSIFICATION	4.772999860174399E-4	DESIGN
this should be a call to resolve(), not resolveIdentifier(), 'cos it might be a property-ref, and we did not cache the referenced value	WITHOUT_CLASSIFICATION	0.9699477715492346	WITHOUT_CLASSIFICATION	0.030052228450765304	DESIGN
If we have <tt>not-found="ignore"</tt> association mapped to a formula, we always need to dirty check it, so we can update the second-level cache	WITHOUT_CLASSIFICATION	0.9999512223909259	WITHOUT_CLASSIFICATION	4.877760907413086E-5	DESIGN
can't just return null here, since that would cause an owning component to become null	WITHOUT_CLASSIFICATION	0.9999999207069987	WITHOUT_CLASSIFICATION	7.929300119956476E-8	DESIGN
for arrays, replaceElements() may return a different reference, since the array length might not match	WITHOUT_CLASSIFICATION	0.9999951897411136	WITHOUT_CLASSIFICATION	4.810258886425671E-6	DESIGN
actual cache of the entries. soft references are used for both the keys and the values here since the values pertaining to the MRU entries are kept in a seperate hard reference cache (to avoid their enqueuement/garbage-collection).	WITHOUT_CLASSIFICATION	0.9999944472486535	WITHOUT_CLASSIFICATION	5.552751346503802E-6	DESIGN
as soon as we encounter our first letter, return the substring from that position	WITHOUT_CLASSIFICATION	0.9999999997993865	WITHOUT_CLASSIFICATION	2.0061346853600945E-10	DESIGN
Note : expected in the syntax: type=listenerClass ({sep}type=listenerClass) where {sep} is any whitespace or comma	WITHOUT_CLASSIFICATION	0.9999999583264203	WITHOUT_CLASSIFICATION	4.167357962090244E-8	DESIGN
isTransactionCallbackRegistered denotes whether any Hibernate Transaction has registered as a callback against this JDBCContext; only one such callback is allowed. Directly serializing this value causes problems with JDBCTransaction, or really any Transaction impl where the callback is local to the Transaction instance itself, since that Transaction is not serialized along with the JDBCContext. Thus we handle that fact here explicitly...	WITHOUT_CLASSIFICATION	0.9994668370624634	WITHOUT_CLASSIFICATION	5.331629375365823E-4	DESIGN
note that for sequential scrolling, we make the assumption that the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999794291990246	WITHOUT_CLASSIFICATION	2.057080097544333E-5	DESIGN
We call getKeyFromResultSet() here so that we can know the key value upon which to perform the breaking logic. However, it is also then called from getRowFromResultSet() which is certainly not the most efficient. But the call here is needed, and there currently is no other way without refactoring of the doQuery()/getRowFromResultSet() methods	WITHOUT_CLASSIFICATION	0.7978957957659394	WITHOUT_CLASSIFICATION	0.20210420423406064	DESIGN
This check is needed since processing leaves the cursor after the last physical row for the current logical row; thus if we are after the last physical row, this might be caused by either: 1) scrolling to the last logical row 2) scrolling past the last logical row In the latter scenario, the previous logical row really is the last logical row. In all other cases, we should process back two logical records (the current logic row, plus the previous logical row).	WITHOUT_CLASSIFICATION	0.9750478757724114	WITHOUT_CLASSIFICATION	0.024952124227588638	DESIGN
and perform the load	WITHOUT_CLASSIFICATION	0.9999972050730548	WITHOUT_CLASSIFICATION	2.7949269451618772E-6	DESIGN
important: reuse the same event instances for performance!	WITHOUT_CLASSIFICATION	0.7325836372344591	WITHOUT_CLASSIFICATION	0.2674163627655409	DESIGN
this is a query and we are loading multiple instances of the same collection role	WITHOUT_CLASSIFICATION	0.9894766348016992	WITHOUT_CLASSIFICATION	0.010523365198300676	DESIGN
we found a collection element in the result set	WITHOUT_CLASSIFICATION	0.9999841209905769	WITHOUT_CLASSIFICATION	1.5879009423130294E-5	DESIGN
we did not find a collection element in the result set, so we ensure that a collection is created with the owner's identifier, since what we have is an empty collection	WITHOUT_CLASSIFICATION	0.9999999995173667	WITHOUT_CLASSIFICATION	4.826332577779882E-10	DESIGN
this is a collection initializer, so we must create a collection for each of the passed-in keys, to account for the possibility that the collection is empty and has no rows in the result set	WITHOUT_CLASSIFICATION	0.9999997017396974	WITHOUT_CLASSIFICATION	2.9826030254630285E-7	DESIGN
grab its state from the ResultSet and keep it in the Session (but don't yet initialize the object itself) note that we acquire LockMode.READ even if it was not requested	WITHOUT_CLASSIFICATION	0.9999997141485087	WITHOUT_CLASSIFICATION	2.8585149125977414E-7	DESIGN
a many-to-many; decrement currentDepth here to allow join across the association table without exceeding MAX_FETCH_DEPTH (i.e. the "currentDepth - 1" bit)	WITHOUT_CLASSIFICATION	0.9909946145963283	WITHOUT_CLASSIFICATION	0.00900538540367164	DESIGN
if not a composite key, use "foo in (?, ?, ?)" for batching if no batch, and not a composite key, use "foo = ?"	WITHOUT_CLASSIFICATION	0.9999955523357918	WITHOUT_CLASSIFICATION	4.447664208061846E-6	DESIGN
the user visible aliases, which are unknown to the superclass, these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999999996903249	WITHOUT_CLASSIFICATION	3.0967508184318894E-10	DESIGN
first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9999995628107872	WITHOUT_CLASSIFICATION	4.3718921285615355E-7	DESIGN
first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9999995628107872	WITHOUT_CLASSIFICATION	4.3718921285615355E-7	DESIGN
it does not refer to an alias of a projection, look for a property	WITHOUT_CLASSIFICATION	0.9999860567880584	WITHOUT_CLASSIFICATION	1.3943211941625937E-5	DESIGN
determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999992743179025	WITHOUT_CLASSIFICATION	7.256820974992435E-7	DESIGN
Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999998713598056	WITHOUT_CLASSIFICATION	1.2864019445482454E-7	DESIGN
Translates an AST join type (i.e., the token type) into a JoinFragment.XXX join type. @param astJoinType The AST join type (from HqlSqlTokenTypes or SqlTokenTypes) @return a JoinFragment.XXX join type. @see JoinFragment @see SqlTokenTypes	WITHOUT_CLASSIFICATION	0.845453357487086	WITHOUT_CLASSIFICATION	0.15454664251291395	DESIGN
ignore	WITHOUT_CLASSIFICATION	0.9999951416255058	WITHOUT_CLASSIFICATION	4.858374494054211E-6	DESIGN
ignore	WITHOUT_CLASSIFICATION	0.9999951416255058	WITHOUT_CLASSIFICATION	4.858374494054211E-6	DESIGN
}	WITHOUT_CLASSIFICATION	0.9999229981082406	WITHOUT_CLASSIFICATION	7.700189175949038E-5	DESIGN
public List getCollectionAliases() { return collectionAliases; } public List getCollectionOwners() { return collectionOwners; } public List getCollectionOwnerAliases() { return collectionOwnerAliases; } public List getCollectionPersisters() { return collectionPersisters; } public Map getAlias2Persister() { return alias2Persister; } public boolean isCollectionInitializer() { return isCollectionInitializer; } public List getPersisters() { return persisters; } public Map getAlias2OwnerAlias() { return alias2OwnerAlias; } public List getScalarTypes() { return scalarTypes; } public List getScalarColumnAliases() { return scalarColumnAliases; } public List getPropertyResults() { return propertyResults; } public List getCollectionPropertyResults() { return collectionResults; } public Map getAlias2Return() { return alias2Return; }	WITHOUT_CLASSIFICATION	0.9999958295737041	WITHOUT_CLASSIFICATION	4.170426295851749E-6	DESIGN
SQLQueryParser parser = new SQLQueryParser( sqlQuery, processor.getAlias2Persister(), processor.getAlias2Return(), aliases, collAliases, collPersisters, suffixes, collSuffixes ); sql = parser.process(); namedParameterBindPoints = parser.getNamedParameters();	WITHOUT_CLASSIFICATION	0.9999999940387652	WITHOUT_CLASSIFICATION	5.9612349169105E-9	DESIGN
include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9999991210347051	WITHOUT_CLASSIFICATION	8.78965294778689E-7	DESIGN
sqlAliasSuffixes[i] = element.getColumnAliasSuffix();	WITHOUT_CLASSIFICATION	0.9999998191796807	WITHOUT_CLASSIFICATION	1.8082031930832412E-7	DESIGN
NONE, because its the requested lock mode, not the actual!	WITHOUT_CLASSIFICATION	0.9999996209154162	WITHOUT_CLASSIFICATION	3.7908458383993733E-7	DESIGN
at this point we have (drivingSqlAlias) the SQL alias of the driving table corresponding to the given user alias. However, the driving table is not (necessarily) the table against which we want to apply locks. Mainly, the exception case here is joined-subclass hierarchies where we instead want to apply the lock against the root table (for all other strategies, it just happens that driving and root are the same).	WITHOUT_CLASSIFICATION	0.999999583856889	WITHOUT_CLASSIFICATION	4.161431109743335E-7	DESIGN
the column doesnt exist at all.	WITHOUT_CLASSIFICATION	0.9999968303528397	WITHOUT_CLASSIFICATION	3.169647160292321E-6	DESIGN
we have a mapped identifier property and the root of the incoming property path matched that identifier property	WITHOUT_CLASSIFICATION	0.999994945483451	WITHOUT_CLASSIFICATION	5.054516549027084E-6	DESIGN
we have an embedded composite identifier	WITHOUT_CLASSIFICATION	0.9999974133267894	WITHOUT_CLASSIFICATION	2.586673210664301E-6	DESIGN
both many-to-one and one-to-one are represented as a Property. EntityPersister is relying on this value to determine "lazy fetch groups" in terms of field-level interception. So we need to make sure that we return true here for the case of many-to-one and one-to-one with lazy="no-proxy" impl note - lazy="no-proxy" currently forces both lazy and unwrap to be set to true. The other case we are extremely interested in here is that of lazy="proxy" where lazy is set to true, but unwrap is set to false. thus we use both here under the assumption that this return is really only ever used during persister construction to determine the lazy property/field fetch groupings. If that assertion changes then this check needs to change as well. Partially, this is an issue with the overloading of the term "lazy" here...	WITHOUT_CLASSIFICATION	0.8638273623919266	WITHOUT_CLASSIFICATION	0.1361726376080735	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997628263313	WITHOUT_CLASSIFICATION	2.3717366866719916E-7	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997628263313	WITHOUT_CLASSIFICATION	2.3717366866719916E-7	DESIGN
rootTableName = persistentClass.getRootTable().getQualifiedName( factory.getDialect(), factory.getDefaultCatalog(), factory.getDefaultSchema() );	WITHOUT_CLASSIFICATION	0.9999997729993575	WITHOUT_CLASSIFICATION	2.2700064238429666E-7	DESIGN
SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999724183152443	WITHOUT_CLASSIFICATION	2.7581684755682643E-5	DESIGN
Custom sql	WITHOUT_CLASSIFICATION	0.9999869886899379	WITHOUT_CLASSIFICATION	1.3011310062095788E-5	DESIGN
protected void initPropertyPaths(final String path,final Type type,final String[] columns,final String[] formulaTemplates,final Mapping factory)throws MappingException {addFormulaPropertyPath(path, type, formulaTemplates);initPropertyPaths(path, type, columns, formulaTemplates, factory);}	WITHOUT_CLASSIFICATION	0.9998999345266837	WITHOUT_CLASSIFICATION	1.0006547331628276E-4	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999194935928871	WITHOUT_CLASSIFICATION	8.050640711293835E-5	DESIGN
Custom SQL (would be better if these were private)	WITHOUT_CLASSIFICATION	0.8296471027461808	WITHOUT_CLASSIFICATION	0.17035289725381925	DESIGN
moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992194846654209	WITHOUT_CLASSIFICATION	7.805153345791066E-4	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999194935928871	WITHOUT_CLASSIFICATION	8.050640711293835E-5	DESIGN
aliases for identifier ( alias.id ); skip if the entity defines a non-id property named 'id'	WITHOUT_CLASSIFICATION	0.9999986492296498	WITHOUT_CLASSIFICATION	1.350770350237529E-6	DESIGN
decide which ResultSet to get the property value from:	WITHOUT_CLASSIFICATION	0.9998278332956465	WITHOUT_CLASSIFICATION	1.7216670435342565E-4	DESIGN
note: it is conceptually possible that a UserType could map null to a non-null value, so the following is arguable:	WITHOUT_CLASSIFICATION	0.6984276702246419	WITHOUT_CLASSIFICATION	0.3015723297753579	DESIGN
the contract of EntityTuplizer.determineConcreteSubclassEntityName says that returning null is an indication that the specified entity-name (this.getEntityName) should be used.	WITHOUT_CLASSIFICATION	0.758283670355929	DESIGN	0.24171632964407092	WITHOUT_CLASSIFICATION
Need to use the identifier type of the collection owner since the incoming is value is actually the owner's id. Using the collection's key type causes problems with property-ref keys...	WITHOUT_CLASSIFICATION	0.9999663309276398	WITHOUT_CLASSIFICATION	3.3669072360212907E-5	DESIGN
cache these since they are stateless this one could even be static...	WITHOUT_CLASSIFICATION	0.9990235171824012	DESIGN	9.764828175987267E-4	WITHOUT_CLASSIFICATION
"as" is not in KEYWORDS	WITHOUT_CLASSIFICATION	0.9999495211013708	WITHOUT_CLASSIFICATION	5.0478898629143625E-5	DESIGN
--Commented out by Inspection (12/4/04 9:10 AM): public abstract void addCondition(String alias, String[] columns, String condition);	WITHOUT_CLASSIFICATION	0.9999999539781775	WITHOUT_CLASSIFICATION	4.602182248242306E-8	DESIGN
use the id column alias	WITHOUT_CLASSIFICATION	0.9999903642825861	WITHOUT_CLASSIFICATION	9.635717413756003E-6	DESIGN
private List aliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999999987090061	WITHOUT_CLASSIFICATION	1.2909938921691613E-9	DESIGN
columns.add(columnName); aliases.add(tableAlias);	WITHOUT_CLASSIFICATION	0.9999950261738837	WITHOUT_CLASSIFICATION	4.9738261163667526E-6	DESIGN
where fragment must be empty!	WITHOUT_CLASSIFICATION	0.991699984024111	WITHOUT_CLASSIFICATION	0.008300015975889027	DESIGN
revert to traditional hibernate behavior of setting initialPoolSize to minPoolSize unless otherwise specified with a c3p0.-style parameter.	WITHOUT_CLASSIFICATION	0.9997029323517806	WITHOUT_CLASSIFICATION	2.9706764821929755E-4	DESIGN
arbitrary on clause ignored!!	WITHOUT_CLASSIFICATION	0.9999997550193723	WITHOUT_CLASSIFICATION	2.4498062770580996E-7	DESIGN
might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9989981649643447	WITHOUT_CLASSIFICATION	0.0010018350356553096	DESIGN
might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9989981649643447	WITHOUT_CLASSIFICATION	0.0010018350356553096	DESIGN
if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.999999790574837	WITHOUT_CLASSIFICATION	2.0942516308036624E-7	DESIGN
Essentially: 1) If we have a local (Hibernate) transaction in progress and it already has the UserTransaction cached, use that UserTransaction to determine the status. 2) If a transaction manager has been located, use that transaction manager to determine the status. 3) Finally, as the last resort, try to lookup the UserTransaction via JNDI and use that to determine the status.	WITHOUT_CLASSIFICATION	0.9999998383296812	WITHOUT_CLASSIFICATION	1.6167031878799732E-7	DESIGN
package	WITHOUT_CLASSIFICATION	0.9996923634291219	WITHOUT_CLASSIFICATION	3.0763657087807996E-4	DESIGN
swallow it (the transaction _was_ successful or successfully rolled back)	WITHOUT_CLASSIFICATION	0.9999983587272876	WITHOUT_CLASSIFICATION	1.64127271231434E-6	DESIGN
ignore it	WITHOUT_CLASSIFICATION	0.9999983901491265	WITHOUT_CLASSIFICATION	1.6098508734975796E-6	DESIGN
we need to dirty check many-to-ones with not-found="ignore" in order to update the cache (not the database), since in this case a null entity reference can lose information	WITHOUT_CLASSIFICATION	0.9999945791992966	WITHOUT_CLASSIFICATION	5.420800703315289E-6	DESIGN
create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999949090635033	WITHOUT_CLASSIFICATION	5.090936496733001E-6	DESIGN
Regions can get instantiated in the course of normal work (e.g. a named query region will be created the first time the query is executed), so suspend any ongoing tx	WITHOUT_CLASSIFICATION	0.9999143528908523	WITHOUT_CLASSIFICATION	8.564710914776342E-5	DESIGN
then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9935161457610261	WITHOUT_CLASSIFICATION	0.006483854238973924	DESIGN
Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9997904603411293	WITHOUT_CLASSIFICATION	2.0953965887074997E-4	DESIGN
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9946842654399551	WITHOUT_CLASSIFICATION	0.005315734560044892	DESIGN
NOTE : this is being used from the process of shutting down a SessionFactory. Specific things to consider: (1) this clearing of the region should not propagate to other nodes on the cluster (if any); this is the cache-mode-local option bit... (2) really just trying a best effort to cleanup after ourselves; lock failures, etc are not critical here; this is the fail-silently option bit...	WITHOUT_CLASSIFICATION	0.9972093937223158	DESIGN	0.0027906062776842408	WITHOUT_CLASSIFICATION
need to extract the component values and check for subtype replacements...	WITHOUT_CLASSIFICATION	0.5212479343490923	WITHOUT_CLASSIFICATION	0.47875206565090767	DESIGN
We ignore minimalPutOverride. JBossCache putForExternalRead is already about as minimal as we can get; it will promptly return if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999999998216857	WITHOUT_CLASSIFICATION	1.7831428050847903E-10	DESIGN
for now, just "re-flatten" the metamodel since this is temporary stuff anyway (HHH-1907)	WITHOUT_CLASSIFICATION	0.5942966427148044	WITHOUT_CLASSIFICATION	0.40570335728519547	DESIGN
Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9998846616926336	WITHOUT_CLASSIFICATION	1.1533830736635001E-4	DESIGN
This solution would allow us to eliminate the owner arg to disassemble(), but what if the collection was null, and then later had elements added? seems unsafe session.getPersistenceContext().getCollectionEntry( (PersistentCollection) value ).getKey();	WITHOUT_CLASSIFICATION	0.9600199064816901	WITHOUT_CLASSIFICATION	0.039980093518309945	DESIGN
Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999962901070965	WITHOUT_CLASSIFICATION	3.7098929036282283E-6	DESIGN
some collections are not lazy:	WITHOUT_CLASSIFICATION	0.9999747867249678	WITHOUT_CLASSIFICATION	2.5213275032205503E-5	DESIGN
Here we don't want to suspend the tx. If we do: 1) We might be caching query results that reflect uncommitted changes. No tx == no WL on cache node, so other threads can prematurely see those query results 2) No tx == immediate replication. More overhead, plus we spread issue #1 above around the cluster	WITHOUT_CLASSIFICATION	0.9999942614627845	WITHOUT_CLASSIFICATION	5.738537215567129E-6	DESIGN
return the (fully resolved) identifier value, but do not resolve to the actual referenced entity instance NOTE: the owner of the association is not really the owner of the id!	WITHOUT_CLASSIFICATION	0.9999962296343236	WITHOUT_CLASSIFICATION	3.770365676379446E-6	DESIGN
Add a zero (or quite low) timeout option so we don't block. Ignore any TimeoutException. Basically we forego caching the query result in order to avoid blocking. Reads are done with suspended tx, so they should not hold the lock for long. Not caching the query result is OK, since any subsequent read will just see the old result with its out-of-date timestamp; that result will be discarded and the db query performed again.	WITHOUT_CLASSIFICATION	0.9999841601308784	WITHOUT_CLASSIFICATION	1.583986912159533E-5	DESIGN
Impl note: takes advantage of the fact that an escpaed single quote embedded within a quote-block can really be handled as two seperate quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9482935802862247	WITHOUT_CLASSIFICATION	0.05170641971377518	DESIGN
We have the JBCWriteMutex, so no other local thread will be trying to write this key. It's possible here some remote thread has come in and changed the values again, but since we are reading the values to write to JBC right now, we know we are writing the latest values; i.e. we don't assume that what we cached in entry.update() above is what we should write to JBC now. Our write could be redundant, i.e. we are writing what some remote thread just came in an wrote. There is a chance that yet another remote thread will update us, and we'll then overwrite that later data in JBC. But, all remote nodes will ignore that change in their localCache; the only place it will live will be in JBC, where it can only effect the initial state transfer values on newly joined nodes (i.e. populateLocalCache()).	WITHOUT_CLASSIFICATION	0.9999768381772185	WITHOUT_CLASSIFICATION	2.3161822781571794E-5	DESIGN
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999922816269999	WITHOUT_CLASSIFICATION	7.718373000134775E-6	DESIGN
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999922816269999	WITHOUT_CLASSIFICATION	7.718373000134775E-6	DESIGN
Don't need to lock the cache here, since if someone else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9976120477395222	WITHOUT_CLASSIFICATION	0.002387952260477925	DESIGN
we need to grab the version value from the entity, otherwise we have issues with generated-version entities that may have multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9381554193903521	WITHOUT_CLASSIFICATION	0.06184458060964786	DESIGN
we need to obtain the lock before any actions are executed, since this may be an inverse="true" bidirectional association and it is one of the earlier entity actions which actually updates the database (this action is resposible for second-level cache invalidation only)	WITHOUT_CLASSIFICATION	0.9998969115444586	WITHOUT_CLASSIFICATION	1.030884555414721E-4	DESIGN
postDelete: After actually deleting a row, record the fact that the instance no longer exists on the database (needed for identity-column key generation), and remove it from the session cache	WITHOUT_CLASSIFICATION	0.941668341892743	WITHOUT_CLASSIFICATION	0.058331658107257024	DESIGN
intentionally empty	WITHOUT_CLASSIFICATION	0.9999115717395681	WITHOUT_CLASSIFICATION	8.84282604319078E-5	DESIGN
todo : what else to do here?	DESIGN	0.9910257558584441	WITHOUT_CLASSIFICATION	0.00897424414155599	DESIGN
put() has nowait semantics, is this really appropriate? note that it needs to be async replication, never local or sync	DESIGN	0.5651455323100903	WITHOUT_CLASSIFICATION	0.43485446768990965	DESIGN
'hibernate.temp.use_jdbc_metadata_defaults' is a temporary magic value. The need for it is intended to be alleviated with future developement, thus it is not defined as an Environment constant... it is used to control whether we should consult the JDBC metadata to determine certain Settings default values; it is useful to not do this when the database may not be available (mainly in tools usage).	DESIGN	0.7873418982215146	WITHOUT_CLASSIFICATION	0.21265810177848551	DESIGN
TODO: get SQL rendering out of this package!	DESIGN	0.9574772140103504	DESIGN	0.04252278598964976	WITHOUT_CLASSIFICATION
TODO: get SQL rendering out of this package!	DESIGN	0.9574772140103504	DESIGN	0.04252278598964976	WITHOUT_CLASSIFICATION
todo : eventually merge this with TreeCache and just add optional opt-lock support there.	DESIGN	0.9899776833614374	WITHOUT_CLASSIFICATION	0.010022316638562494	DESIGN
can happen because of the multiple ways Cache.remove() can be invoked :(	DESIGN	0.9999768343389396	WITHOUT_CLASSIFICATION	2.316566106050041E-5	DESIGN
work around the "feature" where tree cache is validating the inserted node during the next transaction. no idea...	DESIGN	0.7021053933716587	WITHOUT_CLASSIFICATION	0.2978946066283414	DESIGN
FIXME Per the RegionFactory class Javadoc, this constructor version should not be necessary. @param props The configuration properties	DESIGN	0.9976976343575156	DESIGN	0.0023023656424845285	WITHOUT_CLASSIFICATION
FIXME Per the RegionFactory class Javadoc, this constructor version should not be necessary. @param props The configuration properties	DESIGN	0.9976976343575156	DESIGN	0.0023023656424845285	WITHOUT_CLASSIFICATION
FIXME Hacky workaround to JBCACHE-1202	DESIGN	0.9999999911107899	DESIGN	8.889210200260402E-9	WITHOUT_CLASSIFICATION
FIXME Hacky workaround to JBCACHE-1202	DESIGN	0.9999999911107899	DESIGN	8.889210200260402E-9	WITHOUT_CLASSIFICATION
TODO: I considered validating TS cache config here, but decided to defer unti getTimestampsCacheInstance() in case the cache is never actually used	DESIGN	0.974488899940306	DESIGN	0.025511100059694095	WITHOUT_CLASSIFICATION
TODO Is this a valid operation on a timestamps cache?	DESIGN	0.9651137381191037	DESIGN	0.034886261880896205	WITHOUT_CLASSIFICATION
TODO Is this a valid operation on a timestamps cache?	DESIGN	0.9651137381191037	DESIGN	0.034886261880896205	WITHOUT_CLASSIFICATION
TODO Why not use the timestamp in a DataVersion?	DESIGN	0.9999975608926449	DESIGN	2.4391073549852178E-6	WITHOUT_CLASSIFICATION
can happen because of the multiple ways Cache.remove() can be invoked :(	DESIGN	0.9999768343389396	WITHOUT_CLASSIFICATION	2.316566106050041E-5	DESIGN
work around the "feature" where tree cache is validating the inserted node during the next transaction. no idea...	DESIGN	0.7021053933716587	WITHOUT_CLASSIFICATION	0.2978946066283414	DESIGN
swaldman 2004-02-07: modify to allow null values to signify fall through to c3p0 PoolConfig defaults	DESIGN	0.9999817277935478	WITHOUT_CLASSIFICATION	1.827220645225555E-5	DESIGN
turn hibernate.c3p0. into c3p0., so c3p0 gets a chance to see all hibernate.c3p0.	DESIGN	0.9999355519745515	WITHOUT_CLASSIFICATION	6.4448025448481E-5	DESIGN
TODO: this bit actually has to be called after all cascades! but since identity insert is called synchronously, instead of asynchronously as other actions, it isn't	DESIGN	0.9988217826806712	DESIGN	0.0011782173193287246	WITHOUT_CLASSIFICATION
TODO: reenable if we also fix the above todo	DESIGN	0.9655078580064392	DESIGN	0.03449214199356086	WITHOUT_CLASSIFICATION
TODO: inefficient if that cache is just going to ignore the updated state!	DESIGN	0.9549448760502833	WITHOUT_CLASSIFICATION	0.04505512394971661	DESIGN
we may be screwed here since the collection action is about to execute and we do not know the final owner key value	DESIGN	0.9934581906102438	WITHOUT_CLASSIFICATION	0.00654180938975615	DESIGN
Create an action that will evict collection and entity regions based on queryspaces (table names). TODO: cache the autodetected information and pass it in instead.	DESIGN	0.9269523476420692	DESIGN	0.07304765235793086	WITHOUT_CLASSIFICATION
todo : what else to do here?	DESIGN	0.9910257558584441	WITHOUT_CLASSIFICATION	0.00897424414155599	DESIGN
todo : modify the class definition if not already transformed...	DESIGN	0.9900257884266243	WITHOUT_CLASSIFICATION	0.009974211573375795	DESIGN
todo : what else to do here?	DESIGN	0.9910257558584441	WITHOUT_CLASSIFICATION	0.00897424414155599	DESIGN
this is called by SessionFactory irregardless; we just disregard here; could also add a check to SessionFactory to only conditionally call start	DESIGN	0.897298026666651	WITHOUT_CLASSIFICATION	0.10270197333334896	DESIGN
this is called by SessionFactory irregardless; we just disregard here; could also add a check to SessionFactory to only conditionally call stop	DESIGN	0.7530288464255205	WITHOUT_CLASSIFICATION	0.24697115357447946	DESIGN
TODO: to handle concurrent writes correctly, this should return a Lock to the client	DESIGN	0.9999959998010914	DESIGN	4.000198908548526E-6	WITHOUT_CLASSIFICATION
put() has nowait semantics, is this really appropriate? note that it needs to be async replication, never local or sync	DESIGN	0.5651455323100903	WITHOUT_CLASSIFICATION	0.43485446768990965	DESIGN
TODO: to handle concurrent writes correctly, the client should pass in a Lock	DESIGN	0.9556771467251856	DESIGN	0.04432285327481457	WITHOUT_CLASSIFICATION
TODO: assumes all collections disassemble to an array!	DESIGN	0.9999342020575178	WITHOUT_CLASSIFICATION	6.579794248229192E-5	DESIGN
TODO: reuse the PreLoadEvent	DESIGN	0.6229220002458109	WITHOUT_CLASSIFICATION	0.37707799975418915	DESIGN
todo: this was added to support initializing an entity's EntityEntry snapshot during reattach; this should be refactored to instead expose a method to assemble a EntityEntry based on this state for return.	DESIGN	0.7477402624426935	DESIGN	0.25225973755730635	WITHOUT_CLASSIFICATION
todo : what is the implication of this?	DESIGN	0.7265036802186454	WITHOUT_CLASSIFICATION	0.2734963197813546	DESIGN
use COUNT as the default. This mimics the old behavior, although NONE might be a better option moving forward in the case of callable	DESIGN	0.9977485860261109	WITHOUT_CLASSIFICATION	0.0022514139738890678	DESIGN
TODO: joinKeyColumnName & foreignKeyColumnName should be called either here or at a slightly higer level in the stack (to get all the information we need) Right now HbmBinder does not support the	DESIGN	0.9999999028001835	DESIGN	9.719981661300699E-8	WITHOUT_CLASSIFICATION
TODO: suck this into initLaziness!	DESIGN	0.999961969026071	DESIGN	3.8030973928953476E-5	WITHOUT_CLASSIFICATION
we have to set up the table later!! yuck	DESIGN	0.995594629976508	WITHOUT_CLASSIFICATION	0.004405370023491995	DESIGN
TODO: better to degrade to lazy="false" if uninstrumented	DESIGN	0.8465040439776111	WITHOUT_CLASSIFICATION	0.15349595602238877	DESIGN
todo : again, how should this work for non-pojo entities?	DESIGN	0.9534553296868847	DESIGN	0.04654467031311527	WITHOUT_CLASSIFICATION
TODO: this is a bit of copy/paste from IndexedCollection.createPrimaryKey()	DESIGN	0.9641787452948208	DESIGN	0.03582125470517923	WITHOUT_CLASSIFICATION
This inner class implements a case statement....perhaps im being a bit over-clever here	DESIGN	0.9816398567210424	DESIGN	0.01836014327895766	WITHOUT_CLASSIFICATION
TODO: bad implementation, cos it depends upon ordering of mapping doc fixing this requires that Collection/PersistentClass gain access to the Mappings reference from Configuration (or the filterDefinitions map directly) sometime during Configuration.buildSessionFactory (after all the types/filter-defs are known and before building persisters).	DESIGN	0.9999734976814537	DESIGN	2.6502318546342344E-5	WITHOUT_CLASSIFICATION
use of a stringbuffer to workaround a JDK bug	DESIGN	0.9997123927160544	DESIGN	2.876072839456428E-4	WITHOUT_CLASSIFICATION
hack/workaround as sqlquery impl depend on having a key.	DESIGN	0.9999999472929996	DESIGN	5.270700054087119E-8	WITHOUT_CLASSIFICATION
FIXME: get the PersistentClass	DESIGN	0.7924581728604934	WITHOUT_CLASSIFICATION	0.20754182713950675	DESIGN
FIXME: get the PersistentClass	DESIGN	0.7924581728604934	WITHOUT_CLASSIFICATION	0.20754182713950675	DESIGN
Icky workaround for MySQL bug:	DESIGN	0.9974114853062788	DESIGN	0.002588514693721249	WITHOUT_CLASSIFICATION
TODO: Somehow add the newly created foreign keys to the internal collection	DESIGN	0.9476388917722549	WITHOUT_CLASSIFICATION	0.052361108227745146	DESIGN
TODO possibly relax that	DESIGN	0.6233606357742024	WITHOUT_CLASSIFICATION	0.37663936422579747	DESIGN
TODO possibly relax that	DESIGN	0.6233606357742024	WITHOUT_CLASSIFICATION	0.37663936422579747	DESIGN
TODO possibly relax that	DESIGN	0.6233606357742024	WITHOUT_CLASSIFICATION	0.37663936422579747	DESIGN
use of a stringbuffer to workaround a JDK bug	DESIGN	0.9997123927160544	DESIGN	2.876072839456428E-4	WITHOUT_CLASSIFICATION
use a degenerated strategy for backward compatibility	DESIGN	0.996943499396281	WITHOUT_CLASSIFICATION	0.0030565006037190294	DESIGN
Sets can be just a view of a part of another collection. do we need to copy it to be sure it won't be changing underneath us? ie. this.set.addAll(set);	DESIGN	0.6998683179132723	WITHOUT_CLASSIFICATION	0.3001316820867276	DESIGN
note that i parameter is now unused (delete it?)	DESIGN	0.9313428865417254	DESIGN	0.0686571134582746	WITHOUT_CLASSIFICATION
just to help out during the load (ugly, i know)	DESIGN	0.9999960204243852	WITHOUT_CLASSIFICATION	3.979575614853789E-6	DESIGN
TODO : safe to interpret "map.remove(key) == null" as non-dirty?	DESIGN	0.7390783706561209	WITHOUT_CLASSIFICATION	0.26092162934387897	DESIGN
yick! need this for proper serialization/deserialization handling...	DESIGN	0.7516309800474642	WITHOUT_CLASSIFICATION	0.24836901995253582	DESIGN
TODO: get SQL rendering out of this package!	DESIGN	0.9574772140103504	DESIGN	0.04252278598964976	WITHOUT_CLASSIFICATION
TODO: get SQL rendering out of this package!	DESIGN	0.9574772140103504	DESIGN	0.04252278598964976	WITHOUT_CLASSIFICATION
yuck!	DESIGN	0.9742263683952601	WITHOUT_CLASSIFICATION	0.02577363160473993	DESIGN
TODO: get SQL rendering out of this package!	DESIGN	0.9574772140103504	DESIGN	0.04252278598964976	WITHOUT_CLASSIFICATION
TODO : not sure this is correct, could not find docs on how to do this.	DESIGN	0.9999995538227368	DESIGN	4.461772631958717E-7	WITHOUT_CLASSIFICATION
HSQL has no Blob/Clob support .... but just put these here for now!	DESIGN	0.9432858283060905	WITHOUT_CLASSIFICATION	0.056714171693909445	DESIGN
does this need holdlock also? : return tableName + " with (updlock, rowlock, holdlock)";	DESIGN	0.8891376728822494	DESIGN	0.11086232711775054	WITHOUT_CLASSIFICATION
sql-server, at least needed this dropped after use; strange!	DESIGN	0.9999700592601092	WITHOUT_CLASSIFICATION	2.994073989081771E-5	DESIGN
todo : is there really any reason to kkeep trying if this fails once?	DESIGN	0.9973729088315928	WITHOUT_CLASSIFICATION	0.0026270911684071825	DESIGN
TBD should this be varbinary($1)? registerColumnType(Types.VARBINARY, "binary($1)");	DESIGN	0.9997176438482311	WITHOUT_CLASSIFICATION	2.8235615176877164E-4	DESIGN
is it necessary to register %exact since it can only appear in a where clause?	DESIGN	0.9887800807861791	WITHOUT_CLASSIFICATION	0.011219919213820907	DESIGN
xmlforest requires a new kind of function constructor	DESIGN	0.999995313330279	WITHOUT_CLASSIFICATION	4.686669720922449E-6	DESIGN
Does this dialect support the ALTER TABLE syntax?	DESIGN	0.9990717540580768	WITHOUT_CLASSIFICATION	9.282459419233391E-4	DESIGN
Do we need to qualify index names with the schema name?	DESIGN	0.9991891164342498	WITHOUT_CLASSIFICATION	8.108835657502988E-4	DESIGN
Does this dialect support the UNIQUE column syntax?	DESIGN	0.9979571869824104	WITHOUT_CLASSIFICATION	0.0020428130175895263	DESIGN
Does this dialect support check constraints?	DESIGN	0.9988393837180338	WITHOUT_CLASSIFICATION	0.0011606162819661377	DESIGN
Do we need to drop constraints before dropping tables in this dialect?	DESIGN	0.9986474288149594	WITHOUT_CLASSIFICATION	0.0013525711850405691	DESIGN
Does this dialect support the FOR UPDATE syntax?	DESIGN	0.9971503165036015	WITHOUT_CLASSIFICATION	0.00284968349639857	DESIGN
Does this dialect support the Oracle-style FOR UPDATE NOWAIT syntax?	DESIGN	0.9981853845828658	WITHOUT_CLASSIFICATION	0.0018146154171342077	DESIGN
Does this dialect support FOR UPDATE OF, allowing particular rows to be locked?	DESIGN	0.9581885077096564	DESIGN	0.041811492290343685	WITHOUT_CLASSIFICATION
note there is a wierd implementation in the client side	DESIGN	0.9995508033322442	WITHOUT_CLASSIFICATION	4.4919666775578216E-4	DESIGN
TODO: never reached, since getTypeName() actually throws an exception!	DESIGN	0.5542412361101599	DESIGN	0.4457587638898401	WITHOUT_CLASSIFICATION
todo : should we additionally check the current isolation mode explicitly?	DESIGN	0.9933171229846295	DESIGN	0.00668287701537057	WITHOUT_CLASSIFICATION
todo : remove this and just have subclasses use Isolater/IsolatedWork directly...	DESIGN	0.9707280473620495	DESIGN	0.02927195263795043	WITHOUT_CLASSIFICATION
TODO: should orphans really be deleted during lock???	DESIGN	0.9989783376808082	DESIGN	0.0010216623191917277	WITHOUT_CLASSIFICATION
orphans should not be deleted during merge??	DESIGN	0.9883017228048325	WITHOUT_CLASSIFICATION	0.011698277195167457	DESIGN
orphans should not be deleted during copy??	DESIGN	0.9942708068430193	WITHOUT_CLASSIFICATION	0.005729193156980675	DESIGN
I suppose?	DESIGN	0.9972009248310758	WITHOUT_CLASSIFICATION	0.002799075168924125	DESIGN
TODO: suck this logic into the collection!	DESIGN	0.9999650238467178	DESIGN	3.497615328214882E-5	WITHOUT_CLASSIFICATION
TODO: an alternative is to check if the owner has changed; if it hasn't then get the ID from collection.getOwner()	DESIGN	0.7840408804178638	WITHOUT_CLASSIFICATION	0.21595911958213615	DESIGN
TODO:refactor + make this method private	DESIGN	0.9251431715825732	DESIGN	0.07485682841742675	WITHOUT_CLASSIFICATION
todo : we can actually just determine this from the incoming EntityEntry-s	DESIGN	0.9980585008608488	WITHOUT_CLASSIFICATION	0.0019414991391511146	DESIGN
TODO: Should this be an InitializeEntityEventListener??? (watch out for performance!)	DESIGN	0.9999514300348814	DESIGN	4.8569965118597564E-5	WITHOUT_CLASSIFICATION
TODO: better to pass the id in as an argument?	DESIGN	0.9875359886631101	DESIGN	0.01246401133689	WITHOUT_CLASSIFICATION
todo : potentially look at optimizing these two arrays	DESIGN	0.9458999302140398	WITHOUT_CLASSIFICATION	0.0541000697859601	DESIGN
trim done to workaround stupid oracle bug that cant handle whitespaces before a { in a sp	DESIGN	0.99967849216432	DESIGN	3.215078356799499E-4	WITHOUT_CLASSIFICATION
trim done to workaround stupid oracle bug that cant handle whitespaces before a { in a sp	DESIGN	0.99967849216432	DESIGN	3.215078356799499E-4	WITHOUT_CLASSIFICATION
TODO: temporary	DESIGN	0.9973147917038401	DESIGN	0.002685208296159957	WITHOUT_CLASSIFICATION
TODO: not quite sure about the full implications of this!	DESIGN	0.8078055768373912	DESIGN	0.19219442316260882	WITHOUT_CLASSIFICATION
TODO: not quite sure about the full implications of this!	DESIGN	0.8078055768373912	DESIGN	0.19219442316260882	WITHOUT_CLASSIFICATION
TODO: ugly here:	DESIGN	0.9933198041077373	DESIGN	0.006680195892262591	WITHOUT_CLASSIFICATION
this is kinda the best we can do...	DESIGN	0.964012882751244	WITHOUT_CLASSIFICATION	0.03598711724875603	DESIGN
TODO: this needn't exclude subclasses...	DESIGN	0.9916374083103192	DESIGN	0.008362591689680758	WITHOUT_CLASSIFICATION
todo : need map? the prob is a proper key, right?	DESIGN	0.9886469546345383	DESIGN	0.011353045365461592	WITHOUT_CLASSIFICATION
todo : i'd much rather have this done from #endLoadingCollection(CollectionPersister,LoadingCollectionEntry)...	DESIGN	0.999755604718412	WITHOUT_CLASSIFICATION	2.443952815880162E-4	DESIGN
todo : hack!!! NOTE : here we cleanup the load context when we have no more local LCE entries. This "works" for the time being because really only the collection load contexts are implemented. Long term, this cleanup should become part of the "close result set" processing from the (sandbox/jdbc) jdbc-container code.	DESIGN	0.9993430406060868	DESIGN	6.569593939130954E-4	WITHOUT_CLASSIFICATION
todo : should really move this log statement to CollectionType, where this is used from...	DESIGN	0.6141074438670224	DESIGN	0.3858925561329775	WITHOUT_CLASSIFICATION
TODO : keep seperate notions of QT[] here for shallow/non-shallow queries...	DESIGN	0.9912883786368863	DESIGN	0.008711621363113558	WITHOUT_CLASSIFICATION
TODO : add this info to the translator and aggregate it here...	DESIGN	0.9966017199115871	DESIGN	0.0033982800884130057	WITHOUT_CLASSIFICATION
TODO: move into collection type, so we can use polymorphism!	DESIGN	0.9987030613220403	DESIGN	0.0012969386779596638	WITHOUT_CLASSIFICATION
todo : should we check the current isolation mode explicitly?	DESIGN	0.788542462356992	DESIGN	0.21145753764300795	WITHOUT_CLASSIFICATION
TODO: suck into event class	DESIGN	0.9999372890697688	DESIGN	6.271093023125372E-5	WITHOUT_CLASSIFICATION
do we even really need this? the update will fail anyway....	DESIGN	0.7686888026456615	DESIGN	0.2313111973543386	WITHOUT_CLASSIFICATION
hum ... should we cascade anyway? throw an exception? fine like it is?	DESIGN	0.9999981332311615	DESIGN	1.8667688385353876E-6	WITHOUT_CLASSIFICATION
TODO: would it be better to do a refresh from db?	DESIGN	0.9999488963812677	DESIGN	5.110361873227445E-5	WITHOUT_CLASSIFICATION
TODO: we use two visitors here, inefficient!	DESIGN	0.9778231668559031	DESIGN	0.02217683314409699	WITHOUT_CLASSIFICATION
this class has no proxies (so do a shortcut)	DESIGN	0.9997126367088411	WITHOUT_CLASSIFICATION	2.873632911587761E-4	DESIGN
PostLoad is needed for EJB3 TODO: reuse the PostLoadEvent...	DESIGN	0.5546216671812628	DESIGN	0.44537833281873707	WITHOUT_CLASSIFICATION
TODO: put this stuff back in to read snapshot from the second-level cache (needs some extra work)	DESIGN	0.9999846802866811	DESIGN	1.5319713318930172E-5	WITHOUT_CLASSIFICATION
null or brand new collection this will also (inefficiently) handle arrays, which have no snapshot, so we can't do any better	DESIGN	0.9805363958010639	WITHOUT_CLASSIFICATION	0.0194636041989362	DESIGN
TODO: is this 100% correct?	DESIGN	0.9977792736563393	DESIGN	0.0022207263436606565	WITHOUT_CLASSIFICATION
TODO: iteratively get transient entities and retry merge until one of the following conditions: 1) transientCopyCache.size() == 0 2) transientCopyCache.size() is not decreasing and copyCache.size() is not increasing TODO: find out if retrying can add entities to copyCache (don't think it can...) For now, just retry once; throw TransientObjectException if there are still any transient entities	DESIGN	0.8111355007848339	WITHOUT_CLASSIFICATION	0.18886449921516613	DESIGN
entity name will not be available for non-POJO entities TODO: cache the entity name somewhere so that it is available to this exception	DESIGN	0.9999276600612527	DESIGN	7.233993874736936E-5	WITHOUT_CLASSIFICATION
TODO: we should throw an exception if we really know for sure that this is a detached instance, rather than just assuming throw new StaleObjectStateException(entityName, id);	DESIGN	0.999991075230877	DESIGN	8.924769122902122E-6	WITHOUT_CLASSIFICATION
TODO : perhaps we should additionally require that the incoming entity version be equivalent to the defined unsaved-value?	DESIGN	0.9999992296272494	DESIGN	7.70372750610203E-7	WITHOUT_CLASSIFICATION
perhaps this should be an exception since it is only ever used in the above method?	DESIGN	0.990799749998596	DESIGN	0.009200250001403919	WITHOUT_CLASSIFICATION
Put a placeholder in entries, so we don't recurse back and try to save() the same object again. QUESTION: should this be done before onSave() is called? likewise, should it be done before onUpdate()?	DESIGN	0.5929775105742305	DESIGN	0.4070224894257693	WITHOUT_CLASSIFICATION
TODO: merge into one method!	DESIGN	0.9818288249238772	DESIGN	0.018171175076122707	WITHOUT_CLASSIFICATION
TODO: refactor to .sql package	DESIGN	0.9986190164596125	DESIGN	0.0013809835403874816	WITHOUT_CLASSIFICATION
Provides query splitting methods, which were originally in QueryTranslator. <br> TODO: This will need to be refactored at some point. @author josh	DESIGN	0.9999612474152225	DESIGN	3.8752584777528766E-5	WITHOUT_CLASSIFICATION
TODO: this is one of the ugliest and most fragile pieces of code in Hibernate....	DESIGN	0.9998793808099041	DESIGN	1.2061919009586206E-4	WITHOUT_CLASSIFICATION
todo : temporary needed because currently persister is the one that creates and renders the join fragments for inheritence hierarchies...	DESIGN	0.9984917340373372	WITHOUT_CLASSIFICATION	0.0015082659626629302	DESIGN
TODO : better way?!?	DESIGN	0.9999987514821875	DESIGN	1.2485178124858632E-6	WITHOUT_CLASSIFICATION
Not possible to simply re-use the versionPropertyNode here as it causes OOM errors due to circularity :(	DESIGN	0.9999996159260245	WITHOUT_CLASSIFICATION	3.8407397558950935E-7	DESIGN
TODO:this is only needed during compilation .. can we eliminate the instvar?	DESIGN	0.9948542104225438	DESIGN	0.005145789577456112	WITHOUT_CLASSIFICATION
TODO : this is a bit dodgy, come up with a better way to check this (plus see above comment)	DESIGN	0.9999999723285495	DESIGN	2.7671450467777755E-8	WITHOUT_CLASSIFICATION
even here, if only properties mapped to the "base table" are referenced in the set and where clauses, this could be handled by the BasicDelegate. TODO : decide if it is better performance-wise to perform that check, or to simply use the MultiTableUpdateDelegate	DESIGN	0.9999999998715726	DESIGN	1.2842730347554269E-10	WITHOUT_CLASSIFICATION
TODO: switch statements are always evil! We already had bugs because of forgotten token types. Use polymorphism for this!	DESIGN	0.9998179737270992	DESIGN	1.8202627290078623E-4	WITHOUT_CLASSIFICATION
TODO : we really need to be able to deal with component paths here also; this is difficult because the hql-sql grammar expects all those node types to be FromReferenceNodes. One potential fix here would be to convert the IntoClause to just use a FromClause/FromElement combo (as a child of the InsertStatement) and move all this logic into the InsertStatement. That's probably the easiest approach (read: least amount of changes to the grammar and code), but just doesn't feel right as then an insert would contain 2 from-clauses	DESIGN	0.9999881677769242	DESIGN	1.1832223075782789E-5	WITHOUT_CLASSIFICATION
really there are two situations where it should be ok to allow the insertion into properties defined on a superclass: 1) union-subclass with an abstract root entity 2) discrim-subclass #1 is handled already because of the fact that UnionSubclassPersister alreay always returns 0 for this call... we may want to disallow it for discrim-subclass just for consistency-sake (currently does not work anyway)...	DESIGN	0.9995965828088208	WITHOUT_CLASSIFICATION	4.034171911791489E-4	DESIGN
yuck!	DESIGN	0.9742263683952601	WITHOUT_CLASSIFICATION	0.02577363160473993	DESIGN
implicit joins are always(?) ok to reuse	DESIGN	0.9908619865151428	WITHOUT_CLASSIFICATION	0.009138013484857165	DESIGN
TODO : we may also want to check that the types here map to exactly one column/JDBC-type can't think of a situation where arithmetic expression between multi-column mappings makes any sense.	DESIGN	0.9994985716876618	DESIGN	5.014283123382029E-4	WITHOUT_CLASSIFICATION
we do not know either type BLIND GUESS!	DESIGN	0.9995829365739984	WITHOUT_CLASSIFICATION	4.170634260015154E-4	DESIGN
TODO: used to be exprNoParens! was this needed?	DESIGN	0.9999999666559842	DESIGN	3.334401576319051E-8	WITHOUT_CLASSIFICATION
TODO: Replace this with a more elegant solution.	DESIGN	0.9999534570043493	DESIGN	4.6542995650649474E-5	WITHOUT_CLASSIFICATION
TODO: Should this really return null? If not, figure out something better to do here.	DESIGN	0.9990147749573399	DESIGN	9.852250426600996E-4	WITHOUT_CLASSIFICATION
TODO: get SQL rendering out of this package!	DESIGN	0.9574772140103504	DESIGN	0.04252278598964976	WITHOUT_CLASSIFICATION
yuck!	DESIGN	0.9742263683952601	WITHOUT_CLASSIFICATION	0.02577363160473993	DESIGN
ignore it; the incoming property could not be found so we cannot be sure what to do here. At the very least, the safest is to simply not apply any dereference toggling...	DESIGN	0.9983043177267698	WITHOUT_CLASSIFICATION	0.0016956822732302006	DESIGN
TODO : most of below was taken verbatim from DotNode; should either delegate this logic or super-type it	DESIGN	0.9993726307446802	DESIGN	6.273692553197338E-4	WITHOUT_CLASSIFICATION
otherwise, a trim-specification and/or a trim-character have been specified; we need to decide which options are present and "do the right thing" should leading trim-characters be trimmed? should trailing trim-characters be trimmed? the trim-character the trim-source	DESIGN	0.9727183490793448	WITHOUT_CLASSIFICATION	0.027281650920655095	DESIGN
todo: we should really just collect these from the various SelectExpressions, rather than regenerating here	DESIGN	0.931797098489496	DESIGN	0.068202901510504	WITHOUT_CLASSIFICATION
TODO: is this a bit ugly?	DESIGN	0.9999845613712067	DESIGN	1.5438628793305344E-5	WITHOUT_CLASSIFICATION
Need a better way to define the suffixes here...	DESIGN	0.6806259295963991	DESIGN	0.3193740704036008	WITHOUT_CLASSIFICATION
TODO: something much better - look at the type of the other expression! TODO: Have comparisonExpression and/or arithmeticExpression rules complete the resolution of boolean nodes.	DESIGN	0.9999803974495485	DESIGN	1.9602550451504388E-5	WITHOUT_CLASSIFICATION
TODO : what amount of significant digits need to be supported here? - from the DecimalFormat docs: [significant digits] = [minimum integer digits] + [maximum fraction digits]	DESIGN	0.9712818768055343	DESIGN	0.028718123194465664	WITHOUT_CLASSIFICATION
Needed the "clazz_" check to work around union-subclasses TODO : is there a way to tell whether a persister is truly discrim-column based inheritence?	DESIGN	0.9992482366999652	DESIGN	7.517633000349051E-4	WITHOUT_CLASSIFICATION
We should actually rework this class to not implement Parser and just process path expressions in the most convenient way.	DESIGN	0.983291099389957	DESIGN	0.016708900610042994	WITHOUT_CLASSIFICATION
The class is now way to complex!	DESIGN	0.9999904987300637	WITHOUT_CLASSIFICATION	9.501269936247509E-6	DESIGN
TODO: get SQL rendering out of here	DESIGN	0.9203171518990436	DESIGN	0.07968284810095633	WITHOUT_CLASSIFICATION
TODO: is there a better way?	DESIGN	0.9999892196709108	DESIGN	1.0780329089202383E-5	WITHOUT_CLASSIFICATION
Must be done here because of side-effect! yuck...	DESIGN	0.9341214202046584	WITHOUT_CLASSIFICATION	0.0658785797953416	DESIGN
name from a super query (a bit inelegant that it shows up here)	DESIGN	0.9640098742196498	WITHOUT_CLASSIFICATION	0.035990125780350206	DESIGN
We should reengineer this class so that, rather than the current ad - hoc linear approach to processing a stream of tokens, we instead build up a tree of expressions.	DESIGN	0.9983904104580876	DESIGN	0.0016095895419124444	WITHOUT_CLASSIFICATION
this is ugly here, but needed because its a subquery	DESIGN	0.9991663263343741	WITHOUT_CLASSIFICATION	8.336736656259237E-4	DESIGN
unhappy about this being public ... is there a better way?	DESIGN	0.9999788308747194	DESIGN	2.116912528063177E-5	WITHOUT_CLASSIFICATION
Make sure this is a defined parameter and check the incoming value type TODO: what should be the actual exception type here?	DESIGN	0.9999945698205704	DESIGN	5.430179429622048E-6	WITHOUT_CLASSIFICATION
TODO : this constructor form is only used from constructor directly below us; can it go away?	DESIGN	0.9999999735031425	DESIGN	2.6496857415314385E-8	WITHOUT_CLASSIFICATION
TODO: COPY/PASTE FROM SessionImpl, pull up!	DESIGN	0.7073851003552145	WITHOUT_CLASSIFICATION	0.29261489964478554	DESIGN
TODO : should remove this exposure and have all references to the session's batcher use the ConnectionManager.	DESIGN	0.9899766029359954	DESIGN	0.010023397064004645	WITHOUT_CLASSIFICATION
todo : should this get moved to PersistentContext? logically, is PersistentContext the "thing" to which an interceptor gets attached?	DESIGN	0.9161852931372113	DESIGN	0.08381470686278868	WITHOUT_CLASSIFICATION
TODO: what type?	DESIGN	0.9648494634432735	DESIGN	0.035150536556726585	WITHOUT_CLASSIFICATION
todo : should seriously consider not allowing a txn to begin from a child session can always route the request to the root session...	DESIGN	0.9982958093213381	WITHOUT_CLASSIFICATION	0.001704190678661979	DESIGN
short-circuit for performance...	DESIGN	0.9981615360399274	WITHOUT_CLASSIFICATION	0.0018384639600724925	DESIGN
not absolutely necessary, but does help with aggressive release	DESIGN	0.9994065427844004	WITHOUT_CLASSIFICATION	5.93457215599585E-4	DESIGN
TODO : remove these last two as batcher is no longer managing connections	DESIGN	0.9862020721778155	DESIGN	0.013797927822184496	WITHOUT_CLASSIFICATION
work around a bug in all known connection pools....	DESIGN	0.9259567471254964	WITHOUT_CLASSIFICATION	0.07404325287450368	DESIGN
TODO : make this the factory for "entity mode related" sessions; also means making this the target of transaction-synch and the thing that knows how to cascade things between related sessions At that point, perhaps this thing is a "SessionContext", and ConnectionManager is a "JDBCContext"? A "SessionContext" should live in the impl package...	DESIGN	0.9999999999999448	DESIGN	5.518878848956735E-14	WITHOUT_CLASSIFICATION
TODO: does this really need to be here? does the collection already have it's own up-to-date snapshot?	DESIGN	0.9998266929698428	DESIGN	1.7330703015729795E-4	WITHOUT_CLASSIFICATION
TODO: the i==entitySpan-1 bit depends upon subclass implementation (very bad)	DESIGN	0.9997026471359104	DESIGN	2.973528640895589E-4	WITHOUT_CLASSIFICATION
This form used from annotations (?). Essentially the same as the above using a resultset-mapping reference, but without cacheMode, readOnly, and comment. FIXME: annotations do not use it, so it can be remove from my POV @deprecated @param query The sql query string @param resultSetRef The result-set-mapping name @param querySpaces Any specified query spaces (used for auto-flushing) @param cacheable Whether the query results are cacheable @param cacheRegion If cacheable, the region into which to store the results @param timeout A JDBC-level timeout to be applied @param fetchSize A JDBC-level fetch-size to be applied @param flushMode The flush mode to use for this query @param parameterTypes parameter type map @param callable Does the query string represent a callable object (i.e., proc)	DESIGN	0.995985079883166	DESIGN	0.004014920116834016	WITHOUT_CLASSIFICATION
todo : add the notion of enabled filters to the CacheKey to differentiate filtered collections from non-filtered; but CacheKey is currently used for both collections and entities; would ideally need to define two seperate ones; currently this works in conjuction with the check on DefaultInitializeCollectionEventHandler.initializeCollectionFromCache() (which makes sure to not read from cache with enabled filters). EARLY EXIT!!!!!	DESIGN	0.7205861846329609	DESIGN	0.2794138153670392	WITHOUT_CLASSIFICATION
for sets, we should end the collection load after resolving the entities, since we might call hashCode() on the elements TODO: or we could do this polymorphically, and have two different operations implemented differently for arrays	DESIGN	0.9999563485818268	DESIGN	4.365141817311018E-5	WITHOUT_CLASSIFICATION
This is not very nice (and quite slow):	DESIGN	0.9957588753527633	WITHOUT_CLASSIFICATION	0.004241124647236639	DESIGN
use of trim() here is ugly?	DESIGN	0.9958470556353598	WITHOUT_CLASSIFICATION	0.004152944364640289	DESIGN
TODO: this is too conservative; if all preceding joins were also inner joins, we could use an inner join here	DESIGN	0.9989822220248626	DESIGN	0.0010177779751373505	WITHOUT_CLASSIFICATION
TODO: look at the owning property and check that it isn't lazy (by instrumentation)	DESIGN	0.8467189998651699	WITHOUT_CLASSIFICATION	0.15328100013483015	DESIGN
TODO: inefficient	DESIGN	0.9690280249051386	DESIGN	0.030971975094861496	WITHOUT_CLASSIFICATION
why does this matter?	DESIGN	0.7160281281255074	WITHOUT_CLASSIFICATION	0.28397187187449247	DESIGN
from the collection of associations, locate OJA for the ManyToOne corresponding to this persister to fully define the many-to-many; we need that OJA so that we can use its alias here TODO : is there a better way here?	DESIGN	0.9999888981810044	DESIGN	1.1101818995543771E-5	WITHOUT_CLASSIFICATION
TODO: this class depends directly upon CriteriaImpl, in the impl package ... add a CriteriaImplementor interface	DESIGN	0.9999999799935783	DESIGN	2.0006421667202846E-8	WITHOUT_CLASSIFICATION
TODO: add a CriteriaImplementor interface this class depends directly upon CriteriaImpl in the impl package...	DESIGN	0.9999937991884359	DESIGN	6.2008115642018005E-6	WITHOUT_CLASSIFICATION
TODO : not so sure this is needed...	DESIGN	0.9997767967722009	DESIGN	2.2320322779907122E-4	WITHOUT_CLASSIFICATION
meant to handle dynamic instantiation queries...(Copy from QueryLoader)	DESIGN	0.9994445602785781	WITHOUT_CLASSIFICATION	5.554397214219658E-4	DESIGN
TODO: The order in which entities are saved may matter (e.g., a particular transient entity may need to be saved before other transient entities can be saved; Keep retrying the batch of transient entities until either: 1) there are no transient entities left in transientCopyCache or 2) no transient entities were saved in the last batch For now, just run through the transient entities and retry the merge	DESIGN	0.9986866172289188	DESIGN	0.001313382771081147	WITHOUT_CLASSIFICATION
todo: this might really even be moved into the cfg package and used as the basis for all things which are configurable.	DESIGN	0.9998903984005673	DESIGN	1.096015994326884E-4	WITHOUT_CLASSIFICATION
todo : currently expects that the individual with expressions apply to the same sql table join. This may not be the case for joined-subclass where the property values might be coming from different tables in the joined hierarchy. At some point we should expand this to support that capability. However, that has some difficulties: 1) the biggest is how to handle ORs when the individual comparisons are linked to different sql joins. 2) here we would need to track each comparison individually, along with the join alias to which it applies and then pass that information back to the FromElement so it can pass it along to the JoinSequence	DESIGN	0.8778022028611778	DESIGN	0.12219779713882216	WITHOUT_CLASSIFICATION
this function has a template -> restore output, apply the template and write the result out TODO: Downcast to avoid using an interface? Yuck.	DESIGN	0.9983915074795396	DESIGN	0.0016084925204603742	WITHOUT_CLASSIFICATION
at some point the generate phase needs to be moved out of here, because a single object-level DML might spawn multiple SQL DML command executions. Possible to just move the sql generation for dml stuff, but for consistency-sake probably best to just move responsiblity for the generation phase completely into the delegates (QueryLoader/StatementExecutor) themselves. Also, not sure why QueryLoader currently even has a dependency on this at all; does it need it? Ideally like to see the walker itself given to the delegates directly...	DESIGN	0.9999999999965304	DESIGN	3.4695896920233865E-12	WITHOUT_CLASSIFICATION
get the right object from the list ... would it be easier to just call getEntity() ??	DESIGN	0.6269167567520878	WITHOUT_CLASSIFICATION	0.37308324324791203	DESIGN
TODO should we just collect these like with the collections above?	DESIGN	0.999990976888117	DESIGN	9.023111882968393E-6	WITHOUT_CLASSIFICATION
todo : better to handle dynamic filters through implicit DynamicFilterParameterSpecification see the discussion there in DynamicFilterParameterSpecification's javadocs as to why it is currently not done that way.	DESIGN	0.840555657439529	DESIGN	0.15944434256047102	WITHOUT_CLASSIFICATION
/ USED ONLY FOR REGRESSION TESTING!!!! todo : obviously get rid of all this junk ;) /	DESIGN	0.9606484367738106	WITHOUT_CLASSIFICATION	0.03935156322618942	DESIGN
create an index on the key columns??	DESIGN	0.9999888093389564	WITHOUT_CLASSIFICATION	1.1190661043672501E-5	DESIGN
TODO: deprecated, remove eventually	DESIGN	0.9524871603102437	DESIGN	0.04751283968975625	WITHOUT_CLASSIFICATION
create an index on the key columns??	DESIGN	0.9999888093389564	WITHOUT_CLASSIFICATION	1.1190661043672501E-5	DESIGN
TODO: improve this hack!	DESIGN	0.9999998355315518	DESIGN	1.6446844828116179E-7	WITHOUT_CLASSIFICATION
inheritance cycle detection (paranoid check)	DESIGN	0.9999968467472597	WITHOUT_CLASSIFICATION	3.1532527401582406E-6	DESIGN
TODO: remove use of instanceof!	DESIGN	0.9864932165602376	DESIGN	0.013506783439762308	WITHOUT_CLASSIFICATION
shortcut	DESIGN	0.9997999609740577	WITHOUT_CLASSIFICATION	2.0003902594239255E-4	DESIGN
TODO: handle the case of a foreign key to something other than the pk	DESIGN	0.84113360189039	WITHOUT_CLASSIFICATION	0.15886639810960992	DESIGN
create an index on the key columns??	DESIGN	0.9999888093389564	WITHOUT_CLASSIFICATION	1.1190661043672501E-5	DESIGN
todo : remove	DESIGN	0.9748405181442068	WITHOUT_CLASSIFICATION	0.02515948185579321	DESIGN
todo : remove	DESIGN	0.9748405181442068	WITHOUT_CLASSIFICATION	0.02515948185579321	DESIGN
todo : remove	DESIGN	0.9748405181442068	WITHOUT_CLASSIFICATION	0.02515948185579321	DESIGN
todo : throw exception?	DESIGN	0.6459664316040499	WITHOUT_CLASSIFICATION	0.35403356839595007	DESIGN
todo : throw exception? maybe warn if not the same?	DESIGN	0.9902612401811557	DESIGN	0.009738759818844355	WITHOUT_CLASSIFICATION
TODO: make EntityPersister not depend on SessionFactoryImplementor interface, if possible	DESIGN	0.9999930631538104	DESIGN	6.936846189513195E-6	WITHOUT_CLASSIFICATION
TODO: is there a more elegant way than downcasting?	DESIGN	0.9999315798339977	DESIGN	6.842016600222072E-5	WITHOUT_CLASSIFICATION
TODO: encapsulate the protected instance variables!	DESIGN	0.7470652412102238	WITHOUT_CLASSIFICATION	0.2529347587897763	DESIGN
should indicate that we are processing an INSERT/UPDATE/DELETE query with a subquery implied via a collection property function. Here, we need to use the table name itself as the qualification alias. TODO : verify this works for all databases... TODO : is this also the case in non-"indexed" scenarios?	DESIGN	0.9999999454444589	DESIGN	5.4555541102944386E-8	WITHOUT_CLASSIFICATION
TODO: copy/paste from insertRows()	DESIGN	0.8864531352227988	WITHOUT_CLASSIFICATION	0.11354686477720134	DESIGN
TODO: copy/paste from recreate()	DESIGN	0.8646140670027352	WITHOUT_CLASSIFICATION	0.1353859329972647	DESIGN
should this interface extend PropertyMapping?	DESIGN	0.9656775697247605	DESIGN	0.03432243027523951	WITHOUT_CLASSIFICATION
ie. the subquery! yuck!	DESIGN	0.9710617492355034	WITHOUT_CLASSIFICATION	0.028938250764496624	DESIGN
TODO: move to .sql package!!	DESIGN	0.9962745949736397	DESIGN	0.003725405026360314	WITHOUT_CLASSIFICATION
TODO: code duplication with SingleTableEntityPersister	DESIGN	0.9975304685576283	DESIGN	0.0024695314423716537	WITHOUT_CLASSIFICATION
TODO: It would be really, really nice to use this to also model components!	DESIGN	0.9999997881610059	DESIGN	2.118389941576594E-7	WITHOUT_CLASSIFICATION
TODO: two hashmap lookups here is one too many...	DESIGN	0.7088664543081122	DESIGN	0.2911335456918878	WITHOUT_CLASSIFICATION
TODO: code duplication with JoinedSubclassEntityPersister	DESIGN	0.9931373485699864	DESIGN	0.006862651430013722	WITHOUT_CLASSIFICATION
perhaps not really necessary...	DESIGN	0.9558898455405991	WITHOUT_CLASSIFICATION	0.04411015445940093	DESIGN
NOTE: this assumes something about how propertySelectFragment is implemented by the subclass! was toUnqotedAliasStrings( getIdentiferColumnNames() ) before - now tried to remove that unqoting and missing aliases..	DESIGN	0.8059172848086839	DESIGN	0.19408271519131606	WITHOUT_CLASSIFICATION
NOTE: this assumes something about how propertySelectFragment is implemented by the subclass! was toUnqotedAliasStrings( getdiscriminatorColumnName() ) before - now tried to remove that unqoting and missing aliases..	DESIGN	0.9837704356366491	DESIGN	0.0162295643633509	WITHOUT_CLASSIFICATION
TODO: should we use SELECT .. FOR UPDATE?	DESIGN	0.9998961854377397	DESIGN	1.0381456226023988E-4	WITHOUT_CLASSIFICATION
TODO: optimize this better!	DESIGN	0.9950962204403773	DESIGN	0.004903779559622699	WITHOUT_CLASSIFICATION
TODO: should we allow suffixes on these ?	DESIGN	0.9999948719064023	DESIGN	5.128093597652247E-6	WITHOUT_CLASSIFICATION
This is really ugly, but necessary:	DESIGN	0.9265831632696943	WITHOUT_CLASSIFICATION	0.07341683673030566	DESIGN
ugly little workaround for fact that createUniqueKeyLoaders() does not handle component properties	DESIGN	0.9999695793367804	DESIGN	3.0420663219510977E-5	WITHOUT_CLASSIFICATION
TODO: disable batch loading if lockMode > READ?	DESIGN	0.9958863905444394	WITHOUT_CLASSIFICATION	0.004113609455560646	DESIGN
append the SQL to return the generated identifier TODO: suck into Insert	DESIGN	0.9992046387258919	DESIGN	7.953612741080201E-4	WITHOUT_CLASSIFICATION
TODO: I am not so sure about the exception handling in this bit!	DESIGN	0.9980861597708433	DESIGN	0.0019138402291567506	WITHOUT_CLASSIFICATION
TODO: is this really necessary????	DESIGN	0.9995029478430862	DESIGN	4.970521569136454E-4	WITHOUT_CLASSIFICATION
TODO: move to .sql package, and refactor with similar things!	DESIGN	0.9993819806126232	DESIGN	6.180193873768533E-4	WITHOUT_CLASSIFICATION
TODO: implement functionality this might be painful to do here, as the "join post processing" for the subquery has already been performed (meaning that for theta-join dialects, the join conditions have already been moved over to the where clause). A "simple" solution here might to perform "join post processing" once for the entire query (including any subqueries) at one fell swoop	DESIGN	0.9999999991260727	DESIGN	8.739273807935174E-10	WITHOUT_CLASSIFICATION
todo : this eventually needs to be removed	DESIGN	0.7995567275453913	WITHOUT_CLASSIFICATION	0.20044327245460877	DESIGN
kinda ugly, but needed for collections with a "." node mapping	DESIGN	0.9998080108223262	WITHOUT_CLASSIFICATION	1.9198917767384023E-4	DESIGN
is this ok?	DESIGN	0.9943858069855206	WITHOUT_CLASSIFICATION	0.00561419301447942	DESIGN
TODO: perhaps this should be some other RuntimeException...	DESIGN	0.9999996737074667	DESIGN	3.262925333047681E-7	WITHOUT_CLASSIFICATION
TODO: make this a bit nicer	DESIGN	0.9989197894608621	DESIGN	0.0010802105391378065	WITHOUT_CLASSIFICATION
Yuck:	DESIGN	0.9506760169969236	WITHOUT_CLASSIFICATION	0.049323983003076305	DESIGN
TODO: we should provide some way to get keys of collection of statistics to make it easier to retrieve from a GUI perspective	DESIGN	0.9999864144686222	DESIGN	1.3585531377801679E-5	WITHOUT_CLASSIFICATION
@return collection removal FIXME: even if isInverse="true"?	DESIGN	0.5495066022111278	WITHOUT_CLASSIFICATION	0.45049339778887204	DESIGN
TODO : will need reference to session factory to fully complete HHH-1907	DESIGN	0.9970460794886841	DESIGN	0.002953920511315915	WITHOUT_CLASSIFICATION
TODO: currently keeps Getters and Setters (instead of PropertyAccessors) because of the way getGetter() and getSetter() are implemented currently; yuck!	DESIGN	0.9999998465152391	DESIGN	1.534847608212378E-7	WITHOUT_CLASSIFICATION
TODO: redesign how PropertyAccessors are acquired...	DESIGN	0.9963122000414218	DESIGN	0.003687799958578038	WITHOUT_CLASSIFICATION
todo : YUCK!!!	DESIGN	0.9527778309958972	WITHOUT_CLASSIFICATION	0.047222169004102754	DESIGN
TODO : YUCK!!! fix after HHH-1907 is complete	DESIGN	0.9998349938866153	DESIGN	1.6500611338467522E-4	WITHOUT_CLASSIFICATION
TODO: need to make the majority of this functionality into a top-level support class for custom impl support	DESIGN	0.9999584964710023	DESIGN	4.150352899764448E-5	WITHOUT_CLASSIFICATION
TODO: design new lifecycle for ProxyFactory	DESIGN	0.6491311954996467	WITHOUT_CLASSIFICATION	0.3508688045003533	DESIGN
TODO: would be nice to handle proxy classes elegantly!	DESIGN	0.9977618549058992	DESIGN	0.00223814509410086	WITHOUT_CLASSIFICATION
TODO: copy/paste from ManyToOneType	DESIGN	0.5326265609881061	WITHOUT_CLASSIFICATION	0.46737343901189393	DESIGN
TODO: should this be Session.instantiate(Persister, ...)?	DESIGN	0.9979629641065538	DESIGN	0.0020370358934461283	WITHOUT_CLASSIFICATION
TODO: this is a bit arbitrary, expose a switch to the user?	DESIGN	0.9643964797063727	DESIGN	0.03560352029362746	WITHOUT_CLASSIFICATION
TODO: implement caching?! proxies?!	DESIGN	0.9997384416311977	DESIGN	2.6155836880224493E-4	WITHOUT_CLASSIFICATION
TODO: is this right??	DESIGN	0.9999889908087325	DESIGN	1.1009191267505197E-5	WITHOUT_CLASSIFICATION
is this really necessary?	DESIGN	0.7512951792530385	WITHOUT_CLASSIFICATION	0.2487048207469615	DESIGN
TODO: move these to a new JoinableType abstract class, extended by EntityType and PersistentCollectionType:	DESIGN	0.9998987557760921	DESIGN	1.0124422390791593E-4	WITHOUT_CLASSIFICATION
TODO: this is very suboptimal for some subclasses (namely components), since it does not take advantage of two-phase-load	DESIGN	0.6599625484732712	WITHOUT_CLASSIFICATION	0.34003745152672876	DESIGN
worrying about proxies is perhaps a little bit of overkill here...	DESIGN	0.9668449698751539	DESIGN	0.03315503012484621	WITHOUT_CLASSIFICATION
NOTE VERY HACKISH WORKAROUND!! TODO: Fix this so it will work for non-POJO entity mode	DESIGN	0.9999999999989749	DESIGN	1.0251380843158118E-12	WITHOUT_CLASSIFICATION
TODO: Fix this so it will work for non-POJO entity mode	DESIGN	0.9999980045659086	DESIGN	1.9954340913888056E-6	WITHOUT_CLASSIFICATION
We would probably refactor to have LogicParser (builds a tree of simple expressions connected by and, or, not), ExpressionParser (translates from OO terms like foo, foo.Bar, foo.Bar.Baz to SQL terms like FOOS.ID, FOOS.BAR_ID, etc) and PathExpressionParser (which does much the same thing it does now)	DESIGN	0.999446018727148	WITHOUT_CLASSIFICATION	5.539812728519886E-4	DESIGN
TODO: this is a little inefficient, don't need to do a whole deep replaceElements() call	DESIGN	0.9999996769380909	DESIGN	3.2306190909970846E-7	WITHOUT_CLASSIFICATION
workaround for WebLogic	DESIGN	0.9533085236198711	DESIGN	0.04669147638012904	WITHOUT_CLASSIFICATION
TODO: this dependency is kinda Bad	DESIGN	0.9999206634025987	DESIGN	7.933659740132891E-5	WITHOUT_CLASSIFICATION
ick!	DESIGN	0.9998585961381115	WITHOUT_CLASSIFICATION	1.4140386188852714E-4	DESIGN
short cut check...	DESIGN	0.995415729744841	WITHOUT_CLASSIFICATION	0.004584270255158881	DESIGN
todo : move to StringHelper?	DESIGN	0.8704324278793143	WITHOUT_CLASSIFICATION	0.1295675721206857	DESIGN
yukky! Don't you have subclasses for that! TODO race conditions can happen here	DESIGN	0.9969661824120857	DESIGN	0.0030338175879143486	WITHOUT_CLASSIFICATION
TODO: We probably should have a StatisticsNotPublishedException, to make it clean	DESIGN	0.997702400817284	DESIGN	0.002297599182715945	WITHOUT_CLASSIFICATION
FIXME hack to work around fact that calling Node added = root.addChild( fqn ); doesn't properly set the version on the node	DESIGN	0.999999979317359	DESIGN	2.0682641109301097E-8	WITHOUT_CLASSIFICATION
TODO: I considered validating the presence of the TS cache here, but decided to defer unti getQueryCacheInstance() in case the cache is never actually used	DESIGN	0.9967021831127418	DESIGN	0.003297816887258163	WITHOUT_CLASSIFICATION
need to do that here rather than in the save event listener to let the post insert events to have a id-filled entity when IDENTITY is used (EJB3)	DESIGN	0.5115203534150639	DESIGN	0.48847964658493603	WITHOUT_CLASSIFICATION
TODO: simply remove this override if we fix the above todos	DESIGN	0.8120205409794231	DESIGN	0.18797945902057697	WITHOUT_CLASSIFICATION
This, is used by SessionFactoryImpl to hand to the generated SessionImpl; was the only reason I could see that we cannot just use null as Settings.cacheProvider	DESIGN	0.5544775243878916	DESIGN	0.44552247561210856	WITHOUT_CLASSIFICATION
this is done here 'cos we might only know the type here (ugly!) TODO: improve this a lot:	DESIGN	0.9999999810673134	DESIGN	1.89326866367054E-8	WITHOUT_CLASSIFICATION
todo : would love to have this work on a notification basis where the successful binding of an entity/subclass would emit a notification which the extendsQueue entries could react to...	DESIGN	0.7945739586768986	WITHOUT_CLASSIFICATION	0.20542604132310144	DESIGN
TODO : not sure the best way to handle this. The non-performant way :	DESIGN	0.9998551264492226	DESIGN	1.4487355077741254E-4	WITHOUT_CLASSIFICATION
would be better to use the element-type to determine whether the old and the new are equal here; the problem being we do not necessarily have access to the element type in all cases	DESIGN	0.9955516686817456	WITHOUT_CLASSIFICATION	0.004448331318254414	DESIGN
This next bit is to allow for both unsaved-value="negative" and for "older" behavior where version number did not get seeded if it was already set in the object TODO: shift it into unsaved-value strategy	DESIGN	0.9999990730860765	DESIGN	9.26913923423773E-7	WITHOUT_CLASSIFICATION
merges don't cascade to uninitialized collections TODO: perhaps this does need to cascade after all....	DESIGN	0.9999634604222513	DESIGN	3.653957774875639E-5	WITHOUT_CLASSIFICATION
TODO: an alternative is to check if the owner has changed; if it hasn't then return collection.getOwner()	DESIGN	0.9879390804755641	WITHOUT_CLASSIFICATION	0.012060919524435899	DESIGN
it is possible that the tree-walking in OuterJoinLoader can get to an association defined by a subclass, in which case the property-ref might refer to a property defined on a subclass of the current class in this case, the table name is not known - this temporary solution assumes that the property-ref refers to a property of the subclass table that the association belongs to (a reasonable guess) TODO: fix this, add: OuterJoinLoadable.getSubclassPropertyTableName(String propertyName)	DESIGN	0.9999999980270968	DESIGN	1.972903100736839E-9	WITHOUT_CLASSIFICATION
this only works because collection entries are kept in a sequenced map by persistence context (maybe we should do like entities and keep a separate sequences set...) TODO: calling entrySet on an IdentityMap is SLOW!!	DESIGN	0.999999791052676	DESIGN	2.0894732397720598E-7	WITHOUT_CLASSIFICATION
important, to account for newly saved entities in query todo : some kind of check for new status...	DESIGN	0.8427116320559566	WITHOUT_CLASSIFICATION	0.15728836794404344	DESIGN
brand new collection TODO: or an array!! we can't lock objects with arrays now??	DESIGN	0.8093253877100633	DESIGN	0.1906746122899367	WITHOUT_CLASSIFICATION
TODO: if object was an uninitialized proxy, this is inefficient, resulting in two SQL selects	DESIGN	0.5520336204098886	WITHOUT_CLASSIFICATION	0.4479663795901113	DESIGN
before cascade! TODO: should this be Session.instantiate(Persister, ...)?	DESIGN	0.9991162843828807	DESIGN	8.837156171193183E-4	WITHOUT_CLASSIFICATION
TODO : absolutely no usages of this constructor form; can it go away?	DESIGN	0.9998599874423302	DESIGN	1.4001255766988427E-4	WITHOUT_CLASSIFICATION
todo : need to find a clean way to handle the "event source" role a seperate classs responsible for generating/dispatching events just duplicates most of the Session methods... passing around seperate reto interceptor, factory, actionQueue, and persistentContext is not manageable...	DESIGN	0.9894038717767206	DESIGN	0.010596128223279296	WITHOUT_CLASSIFICATION
todo : remove	DESIGN	0.9748405181442068	WITHOUT_CLASSIFICATION	0.02515948185579321	DESIGN
aliasRefNode.resolve( false, false, aliasRefNode.getText() ); TODO: is it kosher to do it here? TODO: is it kosher to do it here?	DESIGN	0.9805858459352802	DESIGN	0.01941415406471988	WITHOUT_CLASSIFICATION
No explicit select expression; render the id and properties projection lists for every persister in the from clause into a single 'token node'. TODO: the only reason we need this stuff now is collection filters, we should get rid of derived select clause completely!	DESIGN	0.9999999957154508	DESIGN	4.284549183747084E-9	WITHOUT_CLASSIFICATION
TODO : an optimization here would be to consider cascade deletes and not gen those delete statements; the difficulty is the ordering of the tables here vs the cascade attributes on the persisters -> the table info gotten here should really be self-contained (i.e., a class representation defining all the needed attributes), then we could then get an array of those	DESIGN	0.9999319883595246	DESIGN	6.801164047539856E-5	WITHOUT_CLASSIFICATION
TODO: get SQL rendering out of here, create an AST for the join expressions. Use the SQL generator grammar to generate the SQL text for the index expression.	DESIGN	0.9931743945789567	WITHOUT_CLASSIFICATION	0.006825605421043232	DESIGN
TODO : this really needs to be delayed unitl after we definitively know all node types where this is currently a problem is parameters for which where we cannot unequivocally resolve an expected type	DESIGN	0.9999976126064448	DESIGN	2.387393555239597E-6	WITHOUT_CLASSIFICATION
TODO: Figure out a better way to get the FROM elements in a proper tree structure. If this is not the destination of a many-to-many, add it as a child of the origin.	DESIGN	0.961950101018736	WITHOUT_CLASSIFICATION	0.038049898981264034	DESIGN
work around that crazy issue where the tree contains "empty" FromElements (no text); afaict, this is caused by FromElementFactory.createCollectionJoin()	DESIGN	0.7313793630378564	DESIGN	0.26862063696214356	WITHOUT_CLASSIFICATION
TODO: this class does too many things! we need a different kind of path expression parser for each of the diffferent ways in which path expressions can occur	DESIGN	0.9999536859262004	DESIGN	4.631407379950949E-5	WITHOUT_CLASSIFICATION
real hacky... used to count the nesting of parentheses	DESIGN	0.9999861435876175	DESIGN	1.3856412382447037E-5	WITHOUT_CLASSIFICATION
TODO : would be really nice to cache the spec on the query-def so as to not have to re-calc the hash; currently not doable though because of the resultset-ref stuff...	DESIGN	0.8421068091305707	DESIGN	0.15789319086942924	WITHOUT_CLASSIFICATION
for arrays, we should end the collection load before resolving the entities, since the actual array instances are not instantiated during loading TODO: or we could do this polymorphically, and have two different operations implemented differently for arrays	DESIGN	0.9999990232460064	DESIGN	9.76753993561431E-7	WITHOUT_CLASSIFICATION
polymorphism not really handled completely correctly, perhaps...well, actually its ok, assuming that the entity name used in the lookup is the same as the the one used here, which it will be	DESIGN	0.5858678622996402	DESIGN	0.41413213770035984	WITHOUT_CLASSIFICATION
TODO: should "record" how many properties we have reffered to - and if we don't get'em'all we throw an exception! Way better than trial and error ;)	DESIGN	0.9964308816316448	DESIGN	0.0035691183683550657	WITHOUT_CLASSIFICATION
VERY IMPORTANT!!!! - This class needs to be free of any static references to any CGLIB or Javassist classes. Otherwise, users will always need both on their classpaths no matter which (if either) they use. Another option here would be to remove the Hibernate.isPropertyInitialized() method and have the users go through the SessionFactory to get this information.	DESIGN	0.999998964673671	WITHOUT_CLASSIFICATION	1.0353263289737284E-6	DESIGN
TODO: is it really neceassry to provide Configuration to CollectionPersisters ? Should it not be enough with associated class ? or why does EntityPersister's not get access to configuration ? The only reason I could see that Configuration gets passed to collection persisters is so that they can look up the dom4j node name of the entity element in case no explicit node name was applied at the collection element level. Are you kidding me? Trivial to fix then. Just store and expose the node name on the entity persister (which the collection persister looks up anyway via other means...).	DESIGN	0.999991965529848	DESIGN	8.034470151942629E-6	WITHOUT_CLASSIFICATION
for backward compatibility, allow a set with no not-null element columns, using all columns in the row locater SQL TODO: create an implicit not null constraint on all cols?	DESIGN	0.9111660509470926	DESIGN	0.08883394905290747	WITHOUT_CLASSIFICATION
SPACES TODO: i'm not sure, but perhaps we should exclude abstract denormalized tables?	DESIGN	0.9999931729185916	DESIGN	6.827081408485766E-6	WITHOUT_CLASSIFICATION
workaround, for backward compatibility of sets with no not-null columns, assume all columns are used in the row locator SQL	DESIGN	0.931204218335545	WITHOUT_CLASSIFICATION	0.06879578166445495	DESIGN
note that this method could easily be moved up to BasicEntityPersister, if we ever needed to reuse it from other subclasses	DESIGN	0.9991091235830885	DESIGN	8.908764169115978E-4	WITHOUT_CLASSIFICATION
index += getPropertyColumnSpan( i ); TODO: this is kinda slow...	DESIGN	0.9968510167989642	DESIGN	0.0031489832010358374	WITHOUT_CLASSIFICATION
TODO: need some caching scheme? really comes down to decision regarding amount of state (if any) kept on PropertyAccessors	DESIGN	0.9997282905227497	DESIGN	2.7170947725024927E-4	WITHOUT_CLASSIFICATION
TODO: here is why we need to make bytecode provider global :( TODO : again, fix this after HHH-1907 is complete	DESIGN	0.9999999999420521	DESIGN	5.794792808170106E-11	WITHOUT_CLASSIFICATION
TODO: Yuck! This is not quite good enough, it's a quick hack around the problem of having a to-one association that refers to an embedded component:	DESIGN	0.9999999999998838	DESIGN	1.162783025535465E-13	WITHOUT_CLASSIFICATION
for DOM4J "collections" only TODO: it would be better if this was done at the higher level by Printer	DESIGN	0.9990040341678144	DESIGN	9.95965832185621E-4	WITHOUT_CLASSIFICATION
would be great to move all this below here into another method that could also be used from the new scrolling stuff. Would need to change the way the max-row stuff is handled (i.e. behind an interface) so that I could do the control breaking at the means to know when to stop	DESIGN	0.9999999996639833	DESIGN	3.360166761743317E-10	WITHOUT_CLASSIFICATION
TODO: can we always use the "null property" approach for everything?	DESIGN	0.999279769431591	DESIGN	7.202305684091093E-4	WITHOUT_CLASSIFICATION
polymorphism comment above	DESIGN	0.9999919337775962	WITHOUT_CLASSIFICATION	8.06622240388419E-6	DESIGN
some messy, complex stuff here, since createCriteria() can take an aliased path, or a path rooted at the creating criteria instance	DESIGN	0.9999999722798932	WITHOUT_CLASSIFICATION	2.7720106877825034E-8	DESIGN
TODO: really bad, evil hack to fix!!!	DESIGN	0.9999999999716026	DESIGN	2.83974441922901E-11	WITHOUT_CLASSIFICATION
ugly hack for cases like "elements(foo.bar.collection)" (multi-part path expression ending in elements or indices)	DESIGN	0.9991680961599222	DESIGN	8.3190384007782E-4	WITHOUT_CLASSIFICATION
try block is a hack around fact that currently tuplizers are not given the opportunity to resolve a subclass entity name. this allows the (we assume custom) interceptor the ability to influence this decision if we were not able to based on the given entityName	DESIGN	0.9999999855001498	DESIGN	1.4499850145140918E-8	WITHOUT_CLASSIFICATION
/ HACK ALERT !!!!!!!!!!!!!!!!!!!!!!!!!!!! Attempt to work around "ghost" ImpliedFromElements that occasionally show up between the actual things being joined. This consistently occurs from index nodes (at least against many-to-many). Not sure if there are other conditions Essentially, look-ahead to the next FromElement that actually writes something to the SQL	DESIGN	0.9999794211917323	DESIGN	2.0578808267621593E-5	WITHOUT_CLASSIFICATION
init the table here instead of earlier, so that we can get a quoted table name TODO: would it be better to simply pass the qualified table name, instead of splitting it up into schema/catalog/table names	DESIGN	0.9999983436100645	DESIGN	1.6563899355456389E-6	WITHOUT_CLASSIFICATION
TODO : would be great to have a Mapping#hasNonIdentifierPropertyNamedId method I don't believe that Mapping#getReferencedPropertyType accounts for the identifier property; so if it returns for a property named 'id', then we should have a non-id field named id	DESIGN	0.9025336972022249	DESIGN	0.0974663027977751	WITHOUT_CLASSIFICATION
TODO: is this really necessary????	DESIGN	0.9995029478430862	DESIGN	4.970521569136454E-4	WITHOUT_CLASSIFICATION
TODO: ideally we need the construction of PropertyAccessor to take the following: 1) EntityMode 2) EntityMode-specific data (i.e., the classname for pojo entities) 3) Property-specific data based on the EntityMode (i.e., property-name or dom4j-node-name) The easiest way, with the introduction of the new runtime-metamodel classes, would be the the following predicates: 1) PropertyAccessorFactory.getPropertyAccessor() takes references to both a org.hibernate.metadata.EntityModeMetadata and org.hibernate.metadata.Property 2) What is now termed a "PropertyAccessor" stores any values needed from those two pieces of information 3) Code can then simply call PropertyAccess.getGetter() with no parameters; likewise with PropertyAccessor.getSetter()	DESIGN	0.9792858718522947	DESIGN	0.020714128147705305	WITHOUT_CLASSIFICATION
TODO: this is temporary in that the end result will probably not take a Property reference per-se.	DESIGN	0.9999839176832341	DESIGN	1.6082316765853764E-5	WITHOUT_CLASSIFICATION
todo : this eventually needs to be removed	DESIGN	0.7995567275453913	WITHOUT_CLASSIFICATION	0.20044327245460877	DESIGN
TODO: make this a bit nicer	DESIGN	0.9989197894608621	DESIGN	0.0010802105391378065	WITHOUT_CLASSIFICATION
todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.9945977658548993	DESIGN	0.00540223414510063	WITHOUT_CLASSIFICATION
todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.9945977658548993	DESIGN	0.00540223414510063	WITHOUT_CLASSIFICATION
todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.9945977658548993	DESIGN	0.00540223414510063	WITHOUT_CLASSIFICATION
todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.9945977658548993	DESIGN	0.00540223414510063	WITHOUT_CLASSIFICATION
todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.9945977658548993	DESIGN	0.00540223414510063	WITHOUT_CLASSIFICATION
todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.9945977658548993	DESIGN	0.00540223414510063	WITHOUT_CLASSIFICATION
todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.9945977658548993	DESIGN	0.00540223414510063	WITHOUT_CLASSIFICATION
todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.9945977658548993	DESIGN	0.00540223414510063	WITHOUT_CLASSIFICATION
FIXME Per the RegionFactory class Javadoc, this constructor version should not be necessary. @param props The configuration properties	DESIGN	0.9976976343575156	DESIGN	0.0023023656424845285	WITHOUT_CLASSIFICATION
FIXME Per the RegionFactory class Javadoc, this constructor version should not be necessary. @param props The configuration properties	DESIGN	0.9976976343575156	DESIGN	0.0023023656424845285	WITHOUT_CLASSIFICATION
FIXME Per the RegionFactory class Javadoc, this constructor version should not be necessary. @param props The configuration properties	DESIGN	0.9976976343575156	DESIGN	0.0023023656424845285	WITHOUT_CLASSIFICATION
TODO : probably better to calculate these and pass them in, as it'll be more performant	DESIGN	0.9999981362492798	DESIGN	1.8637507202351357E-6	WITHOUT_CLASSIFICATION
