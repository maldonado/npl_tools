test out the optimizer:	WITHOUT_CLASSIFICATION	0.9999984450358012	WITHOUT_CLASSIFICATION	1.5549641989127198E-6	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9999861210671953	WITHOUT_CLASSIFICATION	1.3878932804684149E-5	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9999861210671953	WITHOUT_CLASSIFICATION	1.3878932804684149E-5	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9999861210671953	WITHOUT_CLASSIFICATION	1.3878932804684149E-5	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9999861210671953	WITHOUT_CLASSIFICATION	1.3878932804684149E-5	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9999861210671953	WITHOUT_CLASSIFICATION	1.3878932804684149E-5	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9999861210671953	WITHOUT_CLASSIFICATION	1.3878932804684149E-5	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9999861210671953	WITHOUT_CLASSIFICATION	1.3878932804684149E-5	DESIGN
return	WITHOUT_CLASSIFICATION	0.9998378742955486	WITHOUT_CLASSIFICATION	1.6212570445143582E-4	DESIGN
return	WITHOUT_CLASSIFICATION	0.9998378742955486	WITHOUT_CLASSIFICATION	1.6212570445143582E-4	DESIGN
| this | bean | args | raw bean |	WITHOUT_CLASSIFICATION	0.9998432442040672	WITHOUT_CLASSIFICATION	1.5675579593273878E-4	DESIGN
invokeinterface	WITHOUT_CLASSIFICATION	0.9999962073777677	WITHOUT_CLASSIFICATION	3.792622232286938E-6	DESIGN
astore 4 store the raw bean	WITHOUT_CLASSIFICATION	0.9999623169493967	WITHOUT_CLASSIFICATION	3.7683050603177984E-5	DESIGN
current stack len = 0	WITHOUT_CLASSIFICATION	0.9999865202341095	WITHOUT_CLASSIFICATION	1.3479765890557388E-5	DESIGN
current stack len = 0	WITHOUT_CLASSIFICATION	0.9999865202341095	WITHOUT_CLASSIFICATION	1.3479765890557388E-5	DESIGN
local variables | target obj | each oldvalue |	WITHOUT_CLASSIFICATION	0.9999992078223856	WITHOUT_CLASSIFICATION	7.921776142811927E-7	DESIGN
invokeinterface invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999991302633273	WITHOUT_CLASSIFICATION	8.697366726699291E-7	DESIGN
putfield new value of the field	WITHOUT_CLASSIFICATION	0.9999997596731266	WITHOUT_CLASSIFICATION	2.4032687342747357E-7	DESIGN
reference type	WITHOUT_CLASSIFICATION	0.9999984238885086	WITHOUT_CLASSIFICATION	1.5761114913753088E-6	DESIGN
double	WITHOUT_CLASSIFICATION	0.9999422218211439	WITHOUT_CLASSIFICATION	5.777817885605058E-5	DESIGN
double	WITHOUT_CLASSIFICATION	0.9999422218211439	WITHOUT_CLASSIFICATION	5.777817885605058E-5	DESIGN
long	WITHOUT_CLASSIFICATION	0.9996475309677861	WITHOUT_CLASSIFICATION	3.5246903221388765E-4	DESIGN
just decrement the lock, don't recache (we don't know which transaction won)	WITHOUT_CLASSIFICATION	0.9998201538758905	WITHOUT_CLASSIFICATION	1.798461241093481E-4	DESIGN
decode row selection...	WITHOUT_CLASSIFICATION	0.9992777358964525	WITHOUT_CLASSIFICATION	7.222641035475574E-4	DESIGN
disassembled state gets put in a new array (we write to cache by value!)	WITHOUT_CLASSIFICATION	0.9999956256085558	WITHOUT_CLASSIFICATION	4.374391444183524E-6	DESIGN
again, CCS did not have such a concept; but a reasonable proximity is to clear the cache after transaction as long as the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999993777878032	WITHOUT_CLASSIFICATION	6.222121966762772E-7	DESIGN
CHECK	WITHOUT_CLASSIFICATION	0.9990728185529049	WITHOUT_CLASSIFICATION	9.271814470951105E-4	DESIGN
ROW ID	WITHOUT_CLASSIFICATION	0.999903978066689	WITHOUT_CLASSIFICATION	9.602193331103372E-5	DESIGN
COMPOSITE-ID	WITHOUT_CLASSIFICATION	0.9999825858738789	WITHOUT_CLASSIFICATION	1.741412612113898E-5	DESIGN
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999345704441233	WITHOUT_CLASSIFICATION	6.542955587676046E-5	DESIGN
Property prop = new Property(); prop.setName("id"); prop.setPropertyAccessorName("embedded"); prop.setValue(id); entity.setIdentifierProperty(prop);	WITHOUT_CLASSIFICATION	0.9999990353969065	WITHOUT_CLASSIFICATION	9.646030935074794E-7	DESIGN
DYNAMIC INSERT	WITHOUT_CLASSIFICATION	0.9999357680071526	WITHOUT_CLASSIFICATION	6.423199284741815E-5	DESIGN
PERSISTER	WITHOUT_CLASSIFICATION	0.999949180844938	WITHOUT_CLASSIFICATION	5.081915506204626E-5	DESIGN
get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999781126516318	WITHOUT_CLASSIFICATION	2.18873483682697E-5	DESIGN
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999592704856262	WITHOUT_CLASSIFICATION	4.072951437382013E-5	DESIGN
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999592704856262	WITHOUT_CLASSIFICATION	4.072951437382013E-5	DESIGN
generated properties can never be insertable...	WITHOUT_CLASSIFICATION	0.9999892504395264	WITHOUT_CLASSIFICATION	1.0749560473538237E-5	DESIGN
TABLE	WITHOUT_CLASSIFICATION	0.9999738478243327	WITHOUT_CLASSIFICATION	2.6152175667189375E-5	DESIGN
by default, natural-ids are "immutable" (constant)	WITHOUT_CLASSIFICATION	0.9999880515481527	WITHOUT_CLASSIFICATION	1.1948451847188932E-5	DESIGN
( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999909769972701	WITHOUT_CLASSIFICATION	9.023002729932425E-6	DESIGN
we found some extends attributes referencing entities which were not already processed. here we need to locate all entity-names and class-names contained in this document itself, making sure that these get removed from the extendz list such that only extends names which require us to delay processing (i.e. external to this document and not yet processed) are contained in the returned result	WITHOUT_CLASSIFICATION	0.6501935506595268	WITHOUT_CLASSIFICATION	0.3498064493404732	DESIGN
Build a ResultSetMappingDefinition given a containing element for the "return-XXX" elements @param resultSetElem The element containing the return definitions. @param path No clue... @param mappings The current processing state. @return The description of the mappings...	WITHOUT_CLASSIFICATION	0.9999870335754363	WITHOUT_CLASSIFICATION	1.2966424563815585E-5	DESIGN
private boolean showSql; private boolean formatSql;	WITHOUT_CLASSIFICATION	0.9997029674871221	WITHOUT_CLASSIFICATION	2.9703251287786005E-4	DESIGN
public boolean isShowSqlEnabled() { return showSql; } public boolean isFormatSqlEnabled() { return formatSql; }	WITHOUT_CLASSIFICATION	0.9999908678040677	WITHOUT_CLASSIFICATION	9.132195932387219E-6	DESIGN
Set a custom entity resolver. This entity resolver must be set before addXXX(misc) call. Default value is {@link org.hibernate.util.DTDEntityResolver} @param entityResolver entity resolver to use	WITHOUT_CLASSIFICATION	0.9999916623230742	WITHOUT_CLASSIFICATION	8.33767692584905E-6	DESIGN
final List extendsQueue,	WITHOUT_CLASSIFICATION	0.9999985979421064	WITHOUT_CLASSIFICATION	1.402057893545326E-6	DESIGN
If close() is called, guarantee unbind()	WITHOUT_CLASSIFICATION	0.9999999978595798	WITHOUT_CLASSIFICATION	2.140420194928902E-9	DESIGN
if a ThreadLocalSessionContext-bound session happens to get serialized, to be completely correct, we need to make sure that unbinding of that session occurs.	WITHOUT_CLASSIFICATION	0.9998950991924935	WITHOUT_CLASSIFICATION	1.0490080750637099E-4	DESIGN
on the inverse, it makes sense that if a ThreadLocalSessionContext- bound session then gets deserialized to go ahead and re-bind it to the ThreadLocalSessionContext session map.	WITHOUT_CLASSIFICATION	0.9999829911230056	WITHOUT_CLASSIFICATION	1.700887699437517E-5	DESIGN
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9998996452207961	WITHOUT_CLASSIFICATION	1.0035477920393565E-4	DESIGN
60 second lock timeout	WITHOUT_CLASSIFICATION	0.9999057775043458	WITHOUT_CLASSIFICATION	9.422249565422373E-5	DESIGN
OptimisticCache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999954909806402	WITHOUT_CLASSIFICATION	4.509019359694192E-6	DESIGN
Cache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999932874733061	WITHOUT_CLASSIFICATION	6.712526693963311E-6	DESIGN
option.setDataVersion( NonLockingDataVersion.INSTANCE );	WITHOUT_CLASSIFICATION	0.999999975432833	WITHOUT_CLASSIFICATION	2.4567166977676746E-8	DESIGN
do the put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999870006328816	WITHOUT_CLASSIFICATION	1.2999367118436115E-5	DESIGN
ignore!	WITHOUT_CLASSIFICATION	0.9999838754401501	WITHOUT_CLASSIFICATION	1.6124559849909145E-5	DESIGN
tree cache in optimistic mode seems to have as very difficult time with remove calls on non-existent nodes (NPEs)...	WITHOUT_CLASSIFICATION	0.9957130434548539	WITHOUT_CLASSIFICATION	0.004286956545146161	DESIGN
60 seconds	WITHOUT_CLASSIFICATION	0.9998833494143152	WITHOUT_CLASSIFICATION	1.1665058568479506E-4	DESIGN
ignore!	WITHOUT_CLASSIFICATION	0.9999838754401501	WITHOUT_CLASSIFICATION	1.6124559849909145E-5	DESIGN
60 seconds	WITHOUT_CLASSIFICATION	0.9998833494143152	WITHOUT_CLASSIFICATION	1.1665058568479506E-4	DESIGN
do the failfast put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999990217657809	WITHOUT_CLASSIFICATION	9.782342190617323E-7	DESIGN
NOTE : evict() operates locally only (i.e., does not propogate to any other nodes in the potential cluster). This is exactly what is needed when we destroy() here; destroy() is used as part of the process of shutting down a SessionFactory; thus these removals should not be propogated	WITHOUT_CLASSIFICATION	0.9903259934932944	WITHOUT_CLASSIFICATION	0.009674006506705628	DESIGN
protected RegionRootListener listener;	WITHOUT_CLASSIFICATION	0.9999941759540582	WITHOUT_CLASSIFICATION	5.824045941867659E-6	DESIGN
Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999858704723623	WITHOUT_CLASSIFICATION	1.4129527637668762E-5	DESIGN
If we've been blocking for the mutex, perhaps another thread has already reestablished the root. In case the node was reestablised via replication, confirm it's marked "resident" (a status which doesn't replicate)	WITHOUT_CLASSIFICATION	0.9825037387704298	WITHOUT_CLASSIFICATION	0.01749626122957024	DESIGN
For pessimistic locking, we just want to toss out our ref to any old invalid root node and get the latest (may be null)	WITHOUT_CLASSIFICATION	0.9999992553257121	WITHOUT_CLASSIFICATION	7.446742879253958E-7	DESIGN
The rest only matters for optimistic locking, where we need to establish the proper data version on the region root	WITHOUT_CLASSIFICATION	0.9999956842993653	WITHOUT_CLASSIFICATION	4.315700634772933E-6	DESIGN
Don't hold a transactional lock for this	WITHOUT_CLASSIFICATION	0.9556718878259554	WITHOUT_CLASSIFICATION	0.04432811217404454	DESIGN
Make sure the root node for the region exists and has a DataVersion that never complains	WITHOUT_CLASSIFICATION	0.9999995917056517	WITHOUT_CLASSIFICATION	4.082943483609898E-7	DESIGN
Never evict this node	WITHOUT_CLASSIFICATION	0.9996611164309069	WITHOUT_CLASSIFICATION	3.388835690930276E-4	DESIGN
Fix up the resident flag	WITHOUT_CLASSIFICATION	0.9999764558169983	WITHOUT_CLASSIFICATION	2.3544183001683157E-5	DESIGN
60 seconds	WITHOUT_CLASSIFICATION	0.9998833494143152	WITHOUT_CLASSIFICATION	1.1665058568479506E-4	DESIGN
We ignore minimalPutOverride. JBossCache putForExternalRead is already about as minimal as we can get; it will promptly return if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.999999989642904	WITHOUT_CLASSIFICATION	1.0357095884242524E-8	DESIGN
no-op. We don't own the cache so we shouldn't stop it.	WITHOUT_CLASSIFICATION	0.9999951065061997	WITHOUT_CLASSIFICATION	4.893493800271092E-6	DESIGN
This should only be possible if the caches are constructor injected	WITHOUT_CLASSIFICATION	0.9980319885203662	WITHOUT_CLASSIFICATION	0.0019680114796338205	DESIGN
We only build caches if none were passed in. Passing in caches counts as a clear statement of exactly what is wanted	WITHOUT_CLASSIFICATION	0.9999956505957686	WITHOUT_CLASSIFICATION	4.349404231458202E-6	DESIGN
Set up the cache factory	WITHOUT_CLASSIFICATION	0.9998825480157247	WITHOUT_CLASSIFICATION	1.1745198427535694E-4	DESIGN
See if the user configured a multiplexer stack	WITHOUT_CLASSIFICATION	0.9999764948486439	WITHOUT_CLASSIFICATION	2.350515135608295E-5	DESIGN
Default to collections sharing entity cache if there is one	WITHOUT_CLASSIFICATION	0.9997913194554344	WITHOUT_CLASSIFICATION	2.086805445655115E-4	DESIGN
Default to sharing the entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999932059510911	WITHOUT_CLASSIFICATION	6.794048908835027E-6	DESIGN
For Timestamps, we default to a separate config	WITHOUT_CLASSIFICATION	0.9998107768197625	WITHOUT_CLASSIFICATION	1.8922318023744696E-4	DESIGN
We can't change the TM on a running cache; just check if the cache has no TM and we're OK with that	WITHOUT_CLASSIFICATION	0.999999973446622	WITHOUT_CLASSIFICATION	2.6553378082018502E-8	DESIGN
Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9998897630446263	WITHOUT_CLASSIFICATION	1.1023695537360655E-4	DESIGN
Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999895567030946	WITHOUT_CLASSIFICATION	1.0443296905362443E-5	DESIGN
This method should be implemented assuming it's valid to do start/stop/start -- leave state appropriate for another start	WITHOUT_CLASSIFICATION	0.9998017002985283	WITHOUT_CLASSIFICATION	1.9829970147170126E-4	DESIGN
Make sure we don't re-release the same cache	WITHOUT_CLASSIFICATION	0.9999598683303702	WITHOUT_CLASSIFICATION	4.013166962970204E-5	DESIGN
We use a different delegate than the non-optimistic superclass default	WITHOUT_CLASSIFICATION	0.9999981922902659	WITHOUT_CLASSIFICATION	1.8077097342096726E-6	DESIGN
Following methods we don't delegate since they have so little logic it's clearer to just implement them here	WITHOUT_CLASSIFICATION	0.643345910563414	WITHOUT_CLASSIFICATION	0.3566540894365861	DESIGN
If JBC is using INVALIDATION, we don't want to propagate changes. We use the Timestamps cache to manage invalidation	WITHOUT_CLASSIFICATION	0.9999999328401592	WITHOUT_CLASSIFICATION	6.71598408299641E-8	DESIGN
We don't want to waste effort setting an option if JBC is already in LOCAL mode. If JBC is REPL_(A)SYNC then check if they passed an config option to disable query replication	WITHOUT_CLASSIFICATION	0.9999999747980783	WITHOUT_CLASSIFICATION	2.52019216323745E-8	DESIGN
Don't hold the JBC node lock throughout the tx, as that prevents updates Add a zero (or low) timeout option so we don't block waiting for tx's that did a put to commit	WITHOUT_CLASSIFICATION	0.9999999977553491	WITHOUT_CLASSIFICATION	2.2446508536967586E-9	DESIGN
Double check the distributed cache	WITHOUT_CLASSIFICATION	0.9999999726535372	WITHOUT_CLASSIFICATION	2.734646276914246E-8	DESIGN
Get an exclusive right to update JBC for this key from this node.	WITHOUT_CLASSIFICATION	0.9999919634877386	WITHOUT_CLASSIFICATION	8.036512261476541E-6	DESIGN
We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9987105292369081	WITHOUT_CLASSIFICATION	0.0012894707630920319	DESIGN
Initial load from JBC	WITHOUT_CLASSIFICATION	0.9999997596250398	WITHOUT_CLASSIFICATION	2.403749601961374E-7	DESIGN
See if we had a 2nd invalidation from the same initial preinvalidation timestamp. If so, only increment if the new current value is an increase	WITHOUT_CLASSIFICATION	0.9999999986571194	WITHOUT_CLASSIFICATION	1.3428806982160972E-9	DESIGN
We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9987105292369081	WITHOUT_CLASSIFICATION	0.0012894707630920319	DESIGN
If the workspace node has null as well, OK; if not we've been modified in a non-comparable manner, which we have to treat as us being newer	WITHOUT_CLASSIFICATION	0.9999997825613598	WITHOUT_CLASSIFICATION	2.1743864015201143E-7	DESIGN
The standard comparator types are not Serializable but are singletons	WITHOUT_CLASSIFICATION	0.9999976795188082	WITHOUT_CLASSIFICATION	2.3204811917392587E-6	DESIGN
ignore!	WITHOUT_CLASSIFICATION	0.9999838754401501	WITHOUT_CLASSIFICATION	1.6124559849909145E-5	DESIGN
ignore it	WITHOUT_CLASSIFICATION	0.999996876042553	WITHOUT_CLASSIFICATION	3.123957446936287E-6	DESIGN
construct the cache	WITHOUT_CLASSIFICATION	0.9999892933219441	WITHOUT_CLASSIFICATION	1.0706678056028155E-5	DESIGN
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999982289855045	WITHOUT_CLASSIFICATION	1.7710144954490624E-6	DESIGN
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999982289855045	WITHOUT_CLASSIFICATION	1.7710144954490624E-6	DESIGN
ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999878488910995	WITHOUT_CLASSIFICATION	1.2151108900361427E-5	DESIGN
swaldman 2006-08-28: define c3p0-style configuration parameters for initialPoolSize, which hibernate sensibly lets default to minPoolSize, but we'll let users override it with the c3p0-style property if they want.	WITHOUT_CLASSIFICATION	0.9780108563554403	WITHOUT_CLASSIFICATION	0.02198914364455964	DESIGN
DataSource unpooled = DataSources.unpooledDataSource(jdbcUrl, props.getProperty(Environment.USER), props.getProperty(Environment.PASS));	WITHOUT_CLASSIFICATION	0.9999995080948517	WITHOUT_CLASSIFICATION	4.919051483248542E-7	DESIGN
TRUE if the pool is borrowed from the outside, FALSE if we used to create it	WITHOUT_CLASSIFICATION	0.9999999716039827	WITHOUT_CLASSIFICATION	2.8396017265457654E-8	DESIGN
get a connection from the pool (thru DriverManager, cfr. Proxool doc)	WITHOUT_CLASSIFICATION	0.999997659243772	WITHOUT_CLASSIFICATION	2.3407562279431193E-6	DESIGN
set the Transaction Isolation if defined	WITHOUT_CLASSIFICATION	0.9997834129049443	WITHOUT_CLASSIFICATION	2.165870950556849E-4	DESIGN
toggle autoCommit to false if set	WITHOUT_CLASSIFICATION	0.9999996647180727	WITHOUT_CLASSIFICATION	3.3528192726519127E-7	DESIGN
return the connection	WITHOUT_CLASSIFICATION	0.9999915293402879	WITHOUT_CLASSIFICATION	8.470659712007574E-6	DESIGN
Get the configurator files (if available)	WITHOUT_CLASSIFICATION	0.999969658664742	WITHOUT_CLASSIFICATION	3.0341335258012622E-5	DESIGN
Default the Proxool alias setting	WITHOUT_CLASSIFICATION	0.9999981819520759	WITHOUT_CLASSIFICATION	1.8180479241610074E-6	DESIGN
Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9998412970497594	WITHOUT_CLASSIFICATION	1.5870295024052647E-4	DESIGN
Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9998412970497594	WITHOUT_CLASSIFICATION	1.5870295024052647E-4	DESIGN
Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999930835221926	WITHOUT_CLASSIFICATION	6.916477807405301E-6	DESIGN
Set the existing pool flag to true	WITHOUT_CLASSIFICATION	0.9999998353263022	WITHOUT_CLASSIFICATION	1.6467369785847125E-7	DESIGN
Configured using the JAXP Configurator	WITHOUT_CLASSIFICATION	0.9999535406167772	WITHOUT_CLASSIFICATION	4.6459383222829206E-5	DESIGN
Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9998412970497594	WITHOUT_CLASSIFICATION	1.5870295024052647E-4	DESIGN
Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999930835221926	WITHOUT_CLASSIFICATION	6.916477807405301E-6	DESIGN
Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999930835221926	WITHOUT_CLASSIFICATION	6.916477807405301E-6	DESIGN
Configured using the Properties File Configurator	WITHOUT_CLASSIFICATION	0.9999559775017175	WITHOUT_CLASSIFICATION	4.402249828245437E-5	DESIGN
Remember Isolation level	WITHOUT_CLASSIFICATION	0.9986740176269643	WITHOUT_CLASSIFICATION	0.0013259823730356972	DESIGN
If the provider was leeching off an existing pool don't close it	WITHOUT_CLASSIFICATION	0.9999999999678837	WITHOUT_CLASSIFICATION	3.211636229448109E-11	DESIGN
We have created the pool ourselves, so shut it down	WITHOUT_CLASSIFICATION	0.9999987851228278	WITHOUT_CLASSIFICATION	1.2148771721693683E-6	DESIGN
not really a many-to-one association necessarily	WITHOUT_CLASSIFICATION	0.9998141581458838	WITHOUT_CLASSIFICATION	1.8584185411623765E-4	DESIGN
not really a many-to-one association necessarily	WITHOUT_CLASSIFICATION	0.9998141581458838	WITHOUT_CLASSIFICATION	1.8584185411623765E-4	DESIGN
always overwrite nonversioned data	WITHOUT_CLASSIFICATION	0.999998033236858	WITHOUT_CLASSIFICATION	1.966763142081869E-6	DESIGN
public Currency getCurrency(int col) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9999024464960375	WITHOUT_CLASSIFICATION	9.755350396252672E-5	DESIGN
default is POJO	WITHOUT_CLASSIFICATION	0.9999979464505409	WITHOUT_CLASSIFICATION	2.053549459150753E-6	DESIGN
use setParameter for null values	WITHOUT_CLASSIFICATION	0.999971981165787	WITHOUT_CLASSIFICATION	2.8018834213011927E-5	DESIGN
use setParameter for null values	WITHOUT_CLASSIFICATION	0.999971981165787	WITHOUT_CLASSIFICATION	2.8018834213011927E-5	DESIGN
private CacheEntry cacheEntry;	WITHOUT_CLASSIFICATION	0.9999629396609534	WITHOUT_CLASSIFICATION	3.706033904655592E-5	DESIGN
Don't need to lock the cache here, since if someone else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9989319196380637	WITHOUT_CLASSIFICATION	0.0010680803619362992	DESIGN
Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9995300287869275	WITHOUT_CLASSIFICATION	4.699712130724369E-4	DESIGN
get the updated snapshot of the entity state by cloning current state; it is safe to copy in place, since by this time no-one else (should have) has a reference to the array	WITHOUT_CLASSIFICATION	0.9999999832135409	WITHOUT_CLASSIFICATION	1.6786459125414768E-8	DESIGN
this entity defines proeprty generation, so process those generated values...	WITHOUT_CLASSIFICATION	0.9999763577680142	WITHOUT_CLASSIFICATION	2.364223198590784E-5	DESIGN
have the entity entry perform post-update processing, passing it the update state and the new version (if one).	WITHOUT_CLASSIFICATION	0.9999995729559036	WITHOUT_CLASSIFICATION	4.2704409649355935E-7	DESIGN
!persister.isCacheInvalidationRequired()	WITHOUT_CLASSIFICATION	0.9999627091794187	WITHOUT_CLASSIFICATION	3.7290820581313345E-5	DESIGN
need to look it up from the persistence-context	WITHOUT_CLASSIFICATION	0.9998441613449156	WITHOUT_CLASSIFICATION	1.5583865508445914E-4	DESIGN
sort first by role name	WITHOUT_CLASSIFICATION	0.9999980228327544	WITHOUT_CLASSIFICATION	1.977167245563771E-6	DESIGN
Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9995300287869275	WITHOUT_CLASSIFICATION	4.699712130724369E-4	DESIGN
then by fk	WITHOUT_CLASSIFICATION	0.9998693874370438	WITHOUT_CLASSIFICATION	1.3061256295621854E-4	DESIGN
nothing to do	WITHOUT_CLASSIFICATION	0.9999666398007037	WITHOUT_CLASSIFICATION	3.3360199296356354E-5	DESIGN
nothing to do	WITHOUT_CLASSIFICATION	0.9999666398007037	WITHOUT_CLASSIFICATION	3.3360199296356354E-5	DESIGN
an existing collection that was either non-empty or uninitialized is replaced by null or a different collection (if the collection is uninitialized, hibernate has no way of knowing if the collection is actually empty without querying the db)	WITHOUT_CLASSIFICATION	0.999564418184798	WITHOUT_CLASSIFICATION	4.355818152019607E-4	DESIGN
this method is called when a new non-null collection is persisted or when an existing (non-null) collection is moved to a new owner	WITHOUT_CLASSIFICATION	0.9790769784019371	WITHOUT_CLASSIFICATION	0.02092302159806296	DESIGN
boolean put = persister.getCache().insert(ck, cacheEntry);	WITHOUT_CLASSIFICATION	0.9999969133427049	WITHOUT_CLASSIFICATION	3.0866572950606626E-6	DESIGN
we need to grab the version value from the entity, otherwise we have issues with generated-version entities that may have multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9920270552842207	WITHOUT_CLASSIFICATION	0.007972944715779322	DESIGN
do nothing - we only need to notify the cache...	WITHOUT_CLASSIFICATION	0.9998556064150853	WITHOUT_CLASSIFICATION	1.4439358491462188E-4	DESIGN
sort first by entity name	WITHOUT_CLASSIFICATION	0.9999953670674445	WITHOUT_CLASSIFICATION	4.632932555500229E-6	DESIGN
then by id	WITHOUT_CLASSIFICATION	0.999901292082024	WITHOUT_CLASSIFICATION	9.870791797606215E-5	DESIGN
to be safe...	WITHOUT_CLASSIFICATION	0.9999915330188704	WITHOUT_CLASSIFICATION	8.466981129479965E-6	DESIGN
no transformations took place, so handle it as we would a non-instrumented class	WITHOUT_CLASSIFICATION	0.9999986552051606	WITHOUT_CLASSIFICATION	1.3447948393352538E-6	DESIGN
see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999999840117756	WITHOUT_CLASSIFICATION	1.598822447677549E-8	DESIGN
see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999999840117756	WITHOUT_CLASSIFICATION	1.598822447677549E-8	DESIGN
intentionally empty	WITHOUT_CLASSIFICATION	0.9999950582711101	WITHOUT_CLASSIFICATION	4.941728889975087E-6	DESIGN
test out the optimizer:	WITHOUT_CLASSIFICATION	0.9999984450358012	WITHOUT_CLASSIFICATION	1.5549641989127198E-6	DESIGN
set the name of bulk accessor.	WITHOUT_CLASSIFICATION	0.9999920852510679	WITHOUT_CLASSIFICATION	7.914748932205736E-6	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9999861210671953	WITHOUT_CLASSIFICATION	1.3878932804684149E-5	DESIGN
invokespecial	WITHOUT_CLASSIFICATION	0.9999996587924657	WITHOUT_CLASSIFICATION	3.412075343550019E-7	DESIGN
return	WITHOUT_CLASSIFICATION	0.9998378742955486	WITHOUT_CLASSIFICATION	1.6212570445143582E-4	DESIGN
aload_1 load bean	WITHOUT_CLASSIFICATION	0.9999854995254109	WITHOUT_CLASSIFICATION	1.4500474589142542E-5	DESIGN
checkcast cast bean	WITHOUT_CLASSIFICATION	0.9999595132241856	WITHOUT_CLASSIFICATION	4.048677581434649E-5	DESIGN
astore_3 store bean	WITHOUT_CLASSIFICATION	0.9999845812617915	WITHOUT_CLASSIFICATION	1.5418738208553016E-5	DESIGN
aload_2 args	WITHOUT_CLASSIFICATION	0.999999560239424	WITHOUT_CLASSIFICATION	4.3976057599443715E-7	DESIGN
iconst_i continue to aastore growing stack is 1	WITHOUT_CLASSIFICATION	0.9999236511629238	WITHOUT_CLASSIFICATION	7.634883707618018E-5	DESIGN
new	WITHOUT_CLASSIFICATION	0.9990541588852446	WITHOUT_CLASSIFICATION	9.458411147553854E-4	DESIGN
dup	WITHOUT_CLASSIFICATION	0.9996296586607948	WITHOUT_CLASSIFICATION	3.7034133920517995E-4	DESIGN
aload_3 load the raw bean	WITHOUT_CLASSIFICATION	0.9999845381336692	WITHOUT_CLASSIFICATION	1.546186633080657E-5	DESIGN
invokeinterface	WITHOUT_CLASSIFICATION	0.9999962073777677	WITHOUT_CLASSIFICATION	3.792622232286938E-6	DESIGN
invokevirtual	WITHOUT_CLASSIFICATION	0.9999961341135556	WITHOUT_CLASSIFICATION	3.8658864444300844E-6	DESIGN
invokevirtual	WITHOUT_CLASSIFICATION	0.9999961341135556	WITHOUT_CLASSIFICATION	3.8658864444300844E-6	DESIGN
aastore args	WITHOUT_CLASSIFICATION	0.9999993056276464	WITHOUT_CLASSIFICATION	6.943723536843833E-7	DESIGN
| this | bean | args | i | raw bean | exception |	WITHOUT_CLASSIFICATION	0.999499826425799	WITHOUT_CLASSIFICATION	5.001735742009148E-4	DESIGN
required to exception table iconst_0 i	WITHOUT_CLASSIFICATION	0.9996775251532818	WITHOUT_CLASSIFICATION	3.224748467181499E-4	DESIGN
istore_3 store i	WITHOUT_CLASSIFICATION	0.9999986131926233	WITHOUT_CLASSIFICATION	1.3868073766966624E-6	DESIGN
aload_1 load the bean	WITHOUT_CLASSIFICATION	0.999965452075785	WITHOUT_CLASSIFICATION	3.454792421507139E-5	DESIGN
checkcast cast the bean into a raw bean	WITHOUT_CLASSIFICATION	0.9953923847000966	WITHOUT_CLASSIFICATION	0.004607615299903463	DESIGN
current stack len = 0	WITHOUT_CLASSIFICATION	0.9999865202341095	WITHOUT_CLASSIFICATION	1.3479765890557388E-5	DESIGN
start region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9977213370438677	WITHOUT_CLASSIFICATION	0.002278662956132294	DESIGN
iinc 3, 1	WITHOUT_CLASSIFICATION	0.9999978713475862	WITHOUT_CLASSIFICATION	2.12865241373808E-6	DESIGN
aload 4 load the raw bean	WITHOUT_CLASSIFICATION	0.9999249298359223	WITHOUT_CLASSIFICATION	7.507016407765599E-5	DESIGN
aload_2 load the args	WITHOUT_CLASSIFICATION	0.9999996638363984	WITHOUT_CLASSIFICATION	3.361636016079715E-7	DESIGN
iconst_i	WITHOUT_CLASSIFICATION	0.9997875628398405	WITHOUT_CLASSIFICATION	2.1243716015949718E-4	DESIGN
aaload	WITHOUT_CLASSIFICATION	0.9999666767465583	WITHOUT_CLASSIFICATION	3.3323253441678586E-5	DESIGN
checkcast	WITHOUT_CLASSIFICATION	0.9999157837985685	WITHOUT_CLASSIFICATION	8.421620143154867E-5	DESIGN
checkcast (case of primitive type) invokevirtual (case of primitive type)	WITHOUT_CLASSIFICATION	0.9999944003903354	WITHOUT_CLASSIFICATION	5.5996096645865145E-6	DESIGN
checkcast (case of reference type)	WITHOUT_CLASSIFICATION	0.9999933676925298	WITHOUT_CLASSIFICATION	6.632307470287519E-6	DESIGN
current stack len = 2	WITHOUT_CLASSIFICATION	0.9999922678758081	WITHOUT_CLASSIFICATION	7.732124191923956E-6	DESIGN
end region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.8307904762344269	WITHOUT_CLASSIFICATION	0.16920952376557316	DESIGN
register in exception table	WITHOUT_CLASSIFICATION	0.9999807464773643	WITHOUT_CLASSIFICATION	1.9253522635606186E-5	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9999861210671953	WITHOUT_CLASSIFICATION	1.3878932804684149E-5	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9999861210671953	WITHOUT_CLASSIFICATION	1.3878932804684149E-5	DESIGN
return	WITHOUT_CLASSIFICATION	0.9998378742955486	WITHOUT_CLASSIFICATION	1.6212570445143582E-4	DESIGN
return	WITHOUT_CLASSIFICATION	0.9998378742955486	WITHOUT_CLASSIFICATION	1.6212570445143582E-4	DESIGN
dup	WITHOUT_CLASSIFICATION	0.9996296586607948	WITHOUT_CLASSIFICATION	3.7034133920517995E-4	DESIGN
invokevirtual	WITHOUT_CLASSIFICATION	0.9999961341135556	WITHOUT_CLASSIFICATION	3.8658864444300844E-6	DESIGN
checkcast	WITHOUT_CLASSIFICATION	0.9999157837985685	WITHOUT_CLASSIFICATION	8.421620143154867E-5	DESIGN
local variables | target obj | each oldvalue |	WITHOUT_CLASSIFICATION	0.9999992078223856	WITHOUT_CLASSIFICATION	7.921776142811927E-7	DESIGN
astore 5 store exception	WITHOUT_CLASSIFICATION	0.9999976813095071	WITHOUT_CLASSIFICATION	2.318690492999439E-6	DESIGN
new BulkAccessorException	WITHOUT_CLASSIFICATION	0.9998815707169465	WITHOUT_CLASSIFICATION	1.184292830535317E-4	DESIGN
aload 5 load exception	WITHOUT_CLASSIFICATION	0.9999962360454684	WITHOUT_CLASSIFICATION	3.76395453169628E-6	DESIGN
iload_3 i	WITHOUT_CLASSIFICATION	0.9999986315754668	WITHOUT_CLASSIFICATION	1.3684245332249928E-6	DESIGN
invokespecial BulkAccessorException.<init>	WITHOUT_CLASSIFICATION	0.9999994248975953	WITHOUT_CLASSIFICATION	5.751024046054813E-7	DESIGN
athrow	WITHOUT_CLASSIFICATION	0.999927261363804	WITHOUT_CLASSIFICATION	7.273863619595138E-5	DESIGN
WARNING: classfile only	WITHOUT_CLASSIFICATION	0.9999944939402667	WITHOUT_CLASSIFICATION	5.506059733250537E-6	DESIGN
swallow	WITHOUT_CLASSIFICATION	0.9999160654193885	WITHOUT_CLASSIFICATION	8.393458061148534E-5	DESIGN
local variable | this |	WITHOUT_CLASSIFICATION	0.9999716560178578	WITHOUT_CLASSIFICATION	2.8343982142259115E-5	DESIGN
aload_0 load this	WITHOUT_CLASSIFICATION	0.9999988439703683	WITHOUT_CLASSIFICATION	1.1560296317218828E-6	DESIGN
aload_0 load this	WITHOUT_CLASSIFICATION	0.9999988439703683	WITHOUT_CLASSIFICATION	1.1560296317218828E-6	DESIGN
getfield get field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9997181671912402	WITHOUT_CLASSIFICATION	2.818328087597692E-4	DESIGN
areturn return the value of the field	WITHOUT_CLASSIFICATION	0.9999985324026964	WITHOUT_CLASSIFICATION	1.4675973036076885E-6	DESIGN
local variables | this | callback |	WITHOUT_CLASSIFICATION	0.9979480766095725	WITHOUT_CLASSIFICATION	0.0020519233904275395	DESIGN
aload_1 load callback	WITHOUT_CLASSIFICATION	0.9999918704632392	WITHOUT_CLASSIFICATION	8.129536760743598E-6	DESIGN
putfield put field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999672261527558	WITHOUT_CLASSIFICATION	3.2773847244244474E-5	DESIGN
case of non-static field	WITHOUT_CLASSIFICATION	0.9999995196697761	WITHOUT_CLASSIFICATION	4.80330224007101E-7	DESIGN
getfield get each field	WITHOUT_CLASSIFICATION	0.9999573643553634	WITHOUT_CLASSIFICATION	4.2635644636653696E-5	DESIGN
invokeinterface invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999991302633273	WITHOUT_CLASSIFICATION	8.697366726699291E-7	DESIGN
ifnonnull	WITHOUT_CLASSIFICATION	0.9999829386751075	WITHOUT_CLASSIFICATION	1.706132489261415E-5	DESIGN
return each type	WITHOUT_CLASSIFICATION	0.9999950050907248	WITHOUT_CLASSIFICATION	4.99490927518692E-6	DESIGN
return each type	WITHOUT_CLASSIFICATION	0.9999950050907248	WITHOUT_CLASSIFICATION	4.99490927518692E-6	DESIGN
store_1 each type	WITHOUT_CLASSIFICATION	0.9999996864634763	WITHOUT_CLASSIFICATION	3.135365237825391E-7	DESIGN
ldc name of the field	WITHOUT_CLASSIFICATION	0.9999956785057577	WITHOUT_CLASSIFICATION	4.321494242363361E-6	DESIGN
load_1 each type	WITHOUT_CLASSIFICATION	0.9999996815746073	WITHOUT_CLASSIFICATION	3.1842539281120566E-7	DESIGN
invokeinterface invoke Callback.read() each type	WITHOUT_CLASSIFICATION	0.9999999234136837	WITHOUT_CLASSIFICATION	7.65863162785631E-8	DESIGN
int	WITHOUT_CLASSIFICATION	0.9999740153625186	WITHOUT_CLASSIFICATION	2.598463748137592E-5	DESIGN
return	WITHOUT_CLASSIFICATION	0.9998378742955486	WITHOUT_CLASSIFICATION	1.6212570445143582E-4	DESIGN
dup	WITHOUT_CLASSIFICATION	0.9996296586607948	WITHOUT_CLASSIFICATION	3.7034133920517995E-4	DESIGN
invokeinterface	WITHOUT_CLASSIFICATION	0.9999962073777677	WITHOUT_CLASSIFICATION	3.792622232286938E-6	DESIGN
checkcast	WITHOUT_CLASSIFICATION	0.9999157837985685	WITHOUT_CLASSIFICATION	8.421620143154867E-5	DESIGN
checkcast	WITHOUT_CLASSIFICATION	0.9999157837985685	WITHOUT_CLASSIFICATION	8.421620143154867E-5	DESIGN
invokeinterface enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999993372136092	WITHOUT_CLASSIFICATION	6.62786390762742E-7	DESIGN
invokeinterface enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999993372136092	WITHOUT_CLASSIFICATION	6.62786390762742E-7	DESIGN
ifnonnull (label1)	WITHOUT_CLASSIFICATION	0.999996493427951	WITHOUT_CLASSIFICATION	3.5065720489058965E-6	DESIGN
load_1	WITHOUT_CLASSIFICATION	0.999994829305926	WITHOUT_CLASSIFICATION	5.17069407408557E-6	DESIGN
load_1	WITHOUT_CLASSIFICATION	0.999994829305926	WITHOUT_CLASSIFICATION	5.17069407408557E-6	DESIGN
putfield	WITHOUT_CLASSIFICATION	0.9999663242365052	WITHOUT_CLASSIFICATION	3.3675763494778635E-5	DESIGN
return ;	WITHOUT_CLASSIFICATION	0.9999625866258968	WITHOUT_CLASSIFICATION	3.7413374103203415E-5	DESIGN
ldc field name	WITHOUT_CLASSIFICATION	0.999998835852896	WITHOUT_CLASSIFICATION	1.1641471040959152E-6	DESIGN
getfield old value of the field	WITHOUT_CLASSIFICATION	0.999998937939974	WITHOUT_CLASSIFICATION	1.0620600260440792E-6	DESIGN
invokeinterface callback.write(..)	WITHOUT_CLASSIFICATION	0.9999996915037527	WITHOUT_CLASSIFICATION	3.084962473200289E-7	DESIGN
reference type	WITHOUT_CLASSIFICATION	0.9999984238885086	WITHOUT_CLASSIFICATION	1.5761114913753088E-6	DESIGN
reference type	WITHOUT_CLASSIFICATION	0.9999984238885086	WITHOUT_CLASSIFICATION	1.5761114913753088E-6	DESIGN
not array	WITHOUT_CLASSIFICATION	0.9993317523863463	WITHOUT_CLASSIFICATION	6.682476136536731E-4	DESIGN
array of reference type	WITHOUT_CLASSIFICATION	0.9999989461260882	WITHOUT_CLASSIFICATION	1.053873911813828E-6	DESIGN
boolean	WITHOUT_CLASSIFICATION	0.9998661440845166	WITHOUT_CLASSIFICATION	1.338559154833743E-4	DESIGN
byte	WITHOUT_CLASSIFICATION	0.9997013609869396	WITHOUT_CLASSIFICATION	2.9863901306040466E-4	DESIGN
char	WITHOUT_CLASSIFICATION	0.999988374464272	WITHOUT_CLASSIFICATION	1.1625535727993264E-5	DESIGN
short	WITHOUT_CLASSIFICATION	0.9997977328027422	WITHOUT_CLASSIFICATION	2.0226719725772833E-4	DESIGN
double	WITHOUT_CLASSIFICATION	0.9999422218211439	WITHOUT_CLASSIFICATION	5.777817885605058E-5	DESIGN
float	WITHOUT_CLASSIFICATION	0.9999927520313693	WITHOUT_CLASSIFICATION	7.24796863081837E-6	DESIGN
float	WITHOUT_CLASSIFICATION	0.9999927520313693	WITHOUT_CLASSIFICATION	7.24796863081837E-6	DESIGN
long	WITHOUT_CLASSIFICATION	0.9996475309677861	WITHOUT_CLASSIFICATION	3.5246903221388765E-4	DESIGN
long	WITHOUT_CLASSIFICATION	0.9996475309677861	WITHOUT_CLASSIFICATION	3.5246903221388765E-4	DESIGN
bad type	WITHOUT_CLASSIFICATION	0.9999755440212105	WITHOUT_CLASSIFICATION	2.4455978789487413E-5	DESIGN
bad type	WITHOUT_CLASSIFICATION	0.9999755440212105	WITHOUT_CLASSIFICATION	2.4455978789487413E-5	DESIGN
boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999983819869592	WITHOUT_CLASSIFICATION	1.6180130407599625E-6	DESIGN
boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999983819869592	WITHOUT_CLASSIFICATION	1.6180130407599625E-6	DESIGN
reference type	WITHOUT_CLASSIFICATION	0.9999984238885086	WITHOUT_CLASSIFICATION	1.5761114913753088E-6	DESIGN
double	WITHOUT_CLASSIFICATION	0.9999422218211439	WITHOUT_CLASSIFICATION	5.777817885605058E-5	DESIGN
float	WITHOUT_CLASSIFICATION	0.9999927520313693	WITHOUT_CLASSIFICATION	7.24796863081837E-6	DESIGN
float	WITHOUT_CLASSIFICATION	0.9999927520313693	WITHOUT_CLASSIFICATION	7.24796863081837E-6	DESIGN
long	WITHOUT_CLASSIFICATION	0.9996475309677861	WITHOUT_CLASSIFICATION	3.5246903221388765E-4	DESIGN
bad type	WITHOUT_CLASSIFICATION	0.9999755440212105	WITHOUT_CLASSIFICATION	2.4455978789487413E-5	DESIGN
bad type	WITHOUT_CLASSIFICATION	0.9999755440212105	WITHOUT_CLASSIFICATION	2.4455978789487413E-5	DESIGN
boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999983819869592	WITHOUT_CLASSIFICATION	1.6180130407599625E-6	DESIGN
skip finalize methods	WITHOUT_CLASSIFICATION	0.9999251650378014	WITHOUT_CLASSIFICATION	7.483496219863923E-5	DESIGN
Mainly for OSCache	WITHOUT_CLASSIFICATION	0.9999994015388006	WITHOUT_CLASSIFICATION	5.984611994178509E-7	DESIGN
decrement the lock	WITHOUT_CLASSIFICATION	0.999989545064382	WITHOUT_CLASSIFICATION	1.0454935617954668E-5	DESIGN
create new lock that times out immediately	WITHOUT_CLASSIFICATION	0.999996889319116	WITHOUT_CLASSIFICATION	3.1106808839673666E-6	DESIGN
recache the updated state	WITHOUT_CLASSIFICATION	0.9999975017860983	WITHOUT_CLASSIFICATION	2.498213901776059E-6	DESIGN
noop	WITHOUT_CLASSIFICATION	0.9996184663597862	WITHOUT_CLASSIFICATION	3.8153364021377965E-4	DESIGN
null clientLock is remotely possible but will never happen in practice	WITHOUT_CLASSIFICATION	0.9981099116788598	WITHOUT_CLASSIFICATION	0.0018900883211402351	DESIGN
we really could refresh the item if it is not a lock, but it might be slower return freshTimestamp < txTimestamp	WITHOUT_CLASSIFICATION	0.9999765233638618	WITHOUT_CLASSIFICATION	2.347663613814622E-5	DESIGN
by requiring <, we rely on lock timeout in the case of an unsuccessful update!	WITHOUT_CLASSIFICATION	0.9999438102324137	WITHOUT_CLASSIFICATION	5.61897675862086E-5	DESIGN
the user provided resulttransformer, not the one used with "select new". Here to avoid mangling transformed/non-transformed results.	WITHOUT_CLASSIFICATION	0.9999999999267946	WITHOUT_CLASSIFICATION	7.32054006505045E-11	DESIGN
disassemble positional parameters	WITHOUT_CLASSIFICATION	0.9999966825967144	WITHOUT_CLASSIFICATION	3.3174032855783233E-6	DESIGN
disassemble named parameters	WITHOUT_CLASSIFICATION	0.9999992042274926	WITHOUT_CLASSIFICATION	7.957725074496789E-7	DESIGN
ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999878488910995	WITHOUT_CLASSIFICATION	1.2151108900361427E-5	DESIGN
noop	WITHOUT_CLASSIFICATION	0.9996184663597862	WITHOUT_CLASSIFICATION	3.8153364021377965E-4	DESIGN
noop	WITHOUT_CLASSIFICATION	0.9996184663597862	WITHOUT_CLASSIFICATION	3.8153364021377965E-4	DESIGN
noop	WITHOUT_CLASSIFICATION	0.9996184663597862	WITHOUT_CLASSIFICATION	3.8153364021377965E-4	DESIGN
this is called from SettingsFactory irregardless; trivial to simply disregard	WITHOUT_CLASSIFICATION	0.9999626469859153	WITHOUT_CLASSIFICATION	3.735301408461575E-5	DESIGN
Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999996175721715	WITHOUT_CLASSIFICATION	3.8242782862581507E-7	DESIGN
Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999996175721715	WITHOUT_CLASSIFICATION	3.8242782862581507E-7	DESIGN
throw new UnsupportedOperationException("Can't write to a readonly object");	WITHOUT_CLASSIFICATION	0.9999971331553673	WITHOUT_CLASSIFICATION	2.8668446325897348E-6	DESIGN
assembled state gets put in a new array (we read from cache by value!)	WITHOUT_CLASSIFICATION	0.9999883436338759	WITHOUT_CLASSIFICATION	1.1656366124022572E-5	DESIGN
persister.setIdentifier(result, id); before calling interceptor, for consistency with normal load	WITHOUT_CLASSIFICATION	0.9999999617997508	WITHOUT_CLASSIFICATION	3.8200249125735206E-8	DESIGN
no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9999920707129833	WITHOUT_CLASSIFICATION	7.929287016638956E-6	DESIGN
no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9999920707129833	WITHOUT_CLASSIFICATION	7.929287016638956E-6	DESIGN
again, CCS did not have such a concept; but a reasonable proximity is to clear the cache after transaction as long as the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999993777878032	WITHOUT_CLASSIFICATION	6.222121966762772E-7	DESIGN
again, CCS did not have such a concept; however a reasonable proximity is to clear the cache. For non-transaction aware caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999040780553413	WITHOUT_CLASSIFICATION	9.592194465870081E-5	DESIGN
again, CCS did not have such a concept; however a reasonable proximity is to clear the cache. For non-transaction aware caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999040780553413	WITHOUT_CLASSIFICATION	9.592194465870081E-5	DESIGN
classes mentioned in extends not available - so put it in queue	WITHOUT_CLASSIFICATION	0.9998176307707223	WITHOUT_CLASSIFICATION	1.8236922927761695E-4	DESIGN
get meta's from <hibernate-mapping>	WITHOUT_CLASSIFICATION	0.9999976385129452	WITHOUT_CLASSIFICATION	2.3614870547680166E-6	DESIGN
get meta's from <class>	WITHOUT_CLASSIFICATION	0.9999841682439734	WITHOUT_CLASSIFICATION	1.5831756026642882E-5	DESIGN
DB-OBJECTNAME	WITHOUT_CLASSIFICATION	0.9999351075289735	WITHOUT_CLASSIFICATION	6.489247102646157E-5	DESIGN
MUTABLE	WITHOUT_CLASSIFICATION	0.9999525403442102	WITHOUT_CLASSIFICATION	4.745965578984155E-5	DESIGN
WHERE	WITHOUT_CLASSIFICATION	0.9998398970097484	WITHOUT_CLASSIFICATION	1.6010299025166525E-4	DESIGN
CHECK	WITHOUT_CLASSIFICATION	0.9990728185529049	WITHOUT_CLASSIFICATION	9.271814470951105E-4	DESIGN
POLYMORPHISM	WITHOUT_CLASSIFICATION	0.999892468106792	WITHOUT_CLASSIFICATION	1.0753189320801678E-4	DESIGN
TODO:	WITHOUT_CLASSIFICATION	0.9820638712289151	WITHOUT_CLASSIFICATION	0.017936128771084903	DESIGN
ID	WITHOUT_CLASSIFICATION	0.999733105834042	WITHOUT_CLASSIFICATION	2.6689416595808267E-4	DESIGN
VERSION / TIMESTAMP	WITHOUT_CLASSIFICATION	0.9999985770209853	WITHOUT_CLASSIFICATION	1.4229790147289556E-6	DESIGN
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999345704441233	WITHOUT_CLASSIFICATION	6.542955587676046E-5	DESIGN
Primary key constraint	WITHOUT_CLASSIFICATION	0.9999998692821788	WITHOUT_CLASSIFICATION	1.3071782119194683E-7	DESIGN
this is either a <version/> tag with no type attribute, or a <timestamp/> tag	WITHOUT_CLASSIFICATION	0.9999999505061821	WITHOUT_CLASSIFICATION	4.949381790180267E-8	DESIGN
for version properties marked as being generated, make sure they are "always" generated; aka, "insert" is invalid; this is dis-allowed by the DTD, but just to make sure...	WITHOUT_CLASSIFICATION	0.9997865043792727	WITHOUT_CLASSIFICATION	2.1349562072729393E-4	DESIGN
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999345704441233	WITHOUT_CLASSIFICATION	6.542955587676046E-5	DESIGN
( (Column) discrim.getColumnIterator().next() ).setType(type);	WITHOUT_CLASSIFICATION	0.9999972880355151	WITHOUT_CLASSIFICATION	2.7119644849437624E-6	DESIGN
go ahead and set the lazy here, since pojo.proxy can override it.	WITHOUT_CLASSIFICATION	0.9999957681539574	WITHOUT_CLASSIFICATION	4.231846042562812E-6	DESIGN
DYNAMIC UPDATE	WITHOUT_CLASSIFICATION	0.9999865551169332	WITHOUT_CLASSIFICATION	1.3444883066797038E-5	DESIGN
IMPORT	WITHOUT_CLASSIFICATION	0.9999497244518079	WITHOUT_CLASSIFICATION	5.027554819213974E-5	DESIGN
BATCH SIZE	WITHOUT_CLASSIFICATION	0.9999258178976733	WITHOUT_CLASSIFICATION	7.418210232665823E-5	DESIGN
SELECT BEFORE UPDATE	WITHOUT_CLASSIFICATION	0.9999982467237665	WITHOUT_CLASSIFICATION	1.7532762335534237E-6	DESIGN
OPTIMISTIC LOCK MODE	WITHOUT_CLASSIFICATION	0.9999868087820818	WITHOUT_CLASSIFICATION	1.319121791831505E-5	DESIGN
PERSISTER	WITHOUT_CLASSIFICATION	0.999949180844938	WITHOUT_CLASSIFICATION	5.081915506204626E-5	DESIGN
CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999841658633619	WITHOUT_CLASSIFICATION	1.583413663802668E-5	DESIGN
get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999781126516318	WITHOUT_CLASSIFICATION	2.18873483682697E-5	DESIGN
properties	WITHOUT_CLASSIFICATION	0.9999252794418915	WITHOUT_CLASSIFICATION	7.47205581086012E-5	DESIGN
joined subclasses	WITHOUT_CLASSIFICATION	0.9999993523960284	WITHOUT_CLASSIFICATION	6.476039715977761E-7	DESIGN
KEY	WITHOUT_CLASSIFICATION	0.9991923148998233	WITHOUT_CLASSIFICATION	8.076851001766884E-4	DESIGN
CHECK	WITHOUT_CLASSIFICATION	0.9990728185529049	WITHOUT_CLASSIFICATION	9.271814470951105E-4	DESIGN
CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999841658633619	WITHOUT_CLASSIFICATION	1.583413663802668E-5	DESIGN
properties	WITHOUT_CLASSIFICATION	0.9999252794418915	WITHOUT_CLASSIFICATION	7.47205581086012E-5	DESIGN
KEY	WITHOUT_CLASSIFICATION	0.9991923148998233	WITHOUT_CLASSIFICATION	8.076851001766884E-4	DESIGN
model.getKey().setType( new Type( model.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999997209822552	WITHOUT_CLASSIFICATION	2.790177447748741E-7	DESIGN
TABLENAME	WITHOUT_CLASSIFICATION	0.9998502934395269	WITHOUT_CLASSIFICATION	1.4970656047307251E-4	DESIGN
join.getKey().setType( new Type( lazz.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999999549654109	WITHOUT_CLASSIFICATION	4.5034589013334863E-8	DESIGN
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999592704856262	WITHOUT_CLASSIFICATION	4.072951437382013E-5	DESIGN
COLUMN(S)	WITHOUT_CLASSIFICATION	0.9999378188185271	WITHOUT_CLASSIFICATION	6.218118147287023E-5	DESIGN
column index	WITHOUT_CLASSIFICATION	0.9999851361649277	WITHOUT_CLASSIFICATION	1.48638350723676E-5	DESIGN
column unique-key	WITHOUT_CLASSIFICATION	0.999990085971417	WITHOUT_CLASSIFICATION	9.914028582985251E-6	DESIGN
automatically makes a column with the default name if none is specifed by XML	WITHOUT_CLASSIFICATION	0.9983327547035408	WITHOUT_CLASSIFICATION	0.0016672452964592006	DESIGN
for an any	WITHOUT_CLASSIFICATION	0.9999886417609606	WITHOUT_CLASSIFICATION	1.135823903939886E-5	DESIGN
insertable simply because that is the user did not specify anything; just override it	WITHOUT_CLASSIFICATION	0.999999990565839	WITHOUT_CLASSIFICATION	9.434160984422676E-9	DESIGN
the user specifically supplied insert="true", which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999995581474338	WITHOUT_CLASSIFICATION	4.418525661608985E-7	DESIGN
properties generated on update can never be updateable...	WITHOUT_CLASSIFICATION	0.9999933049187565	WITHOUT_CLASSIFICATION	6.695081243476801E-6	DESIGN
updateable only because the user did not specify anything; just override it	WITHOUT_CLASSIFICATION	0.9999999992068935	WITHOUT_CLASSIFICATION	7.931064909531919E-10	DESIGN
the user specifically supplied update="true", which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999999000139159	WITHOUT_CLASSIFICATION	9.998608402860452E-8	DESIGN
ROLENAME	WITHOUT_CLASSIFICATION	0.9996226094171564	WITHOUT_CLASSIFICATION	3.7739058284358683E-4	DESIGN
FETCH STRATEGY	WITHOUT_CLASSIFICATION	0.9999770048929256	WITHOUT_CLASSIFICATION	2.299510707431506E-5	DESIGN
TABLE	WITHOUT_CLASSIFICATION	0.9999738478243327	WITHOUT_CLASSIFICATION	2.6152175667189375E-5	DESIGN
tableName = mappings.getNamingStrategy().propertyToTableName( className, path );	WITHOUT_CLASSIFICATION	0.9999994587842512	WITHOUT_CLASSIFICATION	5.412157486861657E-7	DESIGN
SORT	WITHOUT_CLASSIFICATION	0.9999275115059859	WITHOUT_CLASSIFICATION	7.248849401415788E-5	DESIGN
CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999841658633619	WITHOUT_CLASSIFICATION	1.583413663802668E-5	DESIGN
unsorted, natural, comparator.class.name	WITHOUT_CLASSIFICATION	0.9999573067990963	WITHOUT_CLASSIFICATION	4.269320090354169E-5	DESIGN
ORPHAN DELETE (used for programmer error detection)	WITHOUT_CLASSIFICATION	0.9999153358874603	WITHOUT_CLASSIFICATION	8.466411253965204E-5	DESIGN
set up second pass	WITHOUT_CLASSIFICATION	0.9999960594004721	WITHOUT_CLASSIFICATION	3.940599527892973E-6	DESIGN
an "embedded" component (composite ids and unique) note that this does not handle nested components	WITHOUT_CLASSIFICATION	0.9998569409494452	WITHOUT_CLASSIFICATION	1.4305905055471372E-4	DESIGN
a nested composite element	WITHOUT_CLASSIFICATION	0.9999973061152913	WITHOUT_CLASSIFICATION	2.6938847086329837E-6	DESIGN
for an any we will have to use reflection	WITHOUT_CLASSIFICATION	0.9999161959918624	WITHOUT_CLASSIFICATION	8.380400813758731E-5	DESIGN
NOTE SPECIAL CASE: one-to-one constrained=false cannot be proxied, so default to join and non-lazy	WITHOUT_CLASSIFICATION	0.9999998953704244	WITHOUT_CLASSIFICATION	1.046295755659977E-7	DESIGN
use old (HB 2.1) defaults if outer-join is specified	WITHOUT_CLASSIFICATION	0.9999999367035898	WITHOUT_CLASSIFICATION	6.32964101930919E-8	DESIGN
lazy = !join;	WITHOUT_CLASSIFICATION	0.999999767309512	WITHOUT_CLASSIFICATION	2.3269048808346038E-7	DESIGN
GENERATOR	WITHOUT_CLASSIFICATION	0.9997154805603848	WITHOUT_CLASSIFICATION	2.8451943961517234E-4	DESIGN
ID UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999184023998036	WITHOUT_CLASSIFICATION	8.159760019643223E-5	DESIGN
VERSION UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999431594920095	WITHOUT_CLASSIFICATION	5.684050799057642E-5	DESIGN
not necessarily a unique property reference	WITHOUT_CLASSIFICATION	0.9999153267705209	WITHOUT_CLASSIFICATION	8.467322947911119E-5	DESIGN
( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999909769972701	WITHOUT_CLASSIFICATION	9.023002729932425E-6	DESIGN
contained elements:	WITHOUT_CLASSIFICATION	0.9999948332039222	WITHOUT_CLASSIFICATION	5.166796077729208E-6	DESIGN
for non-inverse one-to-many, with a not-null fk, add a backref!	WITHOUT_CLASSIFICATION	0.9999585777849682	WITHOUT_CLASSIFICATION	4.142221503186551E-5	DESIGN
Bind the where	WITHOUT_CLASSIFICATION	0.9999897882449427	WITHOUT_CLASSIFICATION	1.0211755057363314E-5	DESIGN
Bind the order-by	WITHOUT_CLASSIFICATION	0.9999972637848318	WITHOUT_CLASSIFICATION	2.7362151682592214E-6	DESIGN
Bind the filters	WITHOUT_CLASSIFICATION	0.9999993058478418	WITHOUT_CLASSIFICATION	6.941521581956797E-7	DESIGN
overriding inherited meta attribute. HBX-621 & HBX-793	WITHOUT_CLASSIFICATION	0.999996101783018	WITHOUT_CLASSIFICATION	3.8982169820036645E-6	DESIGN
first, iterate over all elements capable of defining an extends attribute collecting all found extends references if they cannot be resolved against the already processed mappings.	WITHOUT_CLASSIFICATION	0.9999999972920732	WITHOUT_CLASSIFICATION	2.7079268032255742E-9	DESIGN
mappings might contain either the "raw" extends name (in the case of an entity-name mapping) or a FQN (in the case of a POJO mapping).	WITHOUT_CLASSIFICATION	0.9994299632955672	WITHOUT_CLASSIFICATION	5.700367044327389E-4	DESIGN
+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9903504215149224	WITHOUT_CLASSIFICATION	0.00964957848507757	DESIGN
SessionFactory name:	WITHOUT_CLASSIFICATION	0.9999683336871482	WITHOUT_CLASSIFICATION	3.1666312851738234E-5	DESIGN
JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9999948949181994	WITHOUT_CLASSIFICATION	5.105081800573995E-6	DESIGN
JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9999948949181994	WITHOUT_CLASSIFICATION	5.105081800573995E-6	DESIGN
Interrogate JDBC metadata	WITHOUT_CLASSIFICATION	0.9999680941192667	WITHOUT_CLASSIFICATION	3.190588073326264E-5	DESIGN
user supplied JDBC connections	WITHOUT_CLASSIFICATION	0.9999823062940839	WITHOUT_CLASSIFICATION	1.7693705916014192E-5	DESIGN
use dialect default properties	WITHOUT_CLASSIFICATION	0.9999772408815317	WITHOUT_CLASSIFICATION	2.275911846827749E-5	DESIGN
Transaction settings:	WITHOUT_CLASSIFICATION	0.9999769823900697	WITHOUT_CLASSIFICATION	2.301760993025787E-5	DESIGN
SQL Generation settings:	WITHOUT_CLASSIFICATION	0.9999914113203159	WITHOUT_CLASSIFICATION	8.588679684246954E-6	DESIGN
Query parser settings:	WITHOUT_CLASSIFICATION	0.999974042123792	WITHOUT_CLASSIFICATION	2.5957876208038348E-5	DESIGN
Second-level / query cache:	WITHOUT_CLASSIFICATION	0.9995825035727348	WITHOUT_CLASSIFICATION	4.174964272651941E-4	DESIGN
The cache provider is needed when we either have second-level cache enabled or query cache enabled. Note that useSecondLevelCache is enabled by default	WITHOUT_CLASSIFICATION	0.9999881836750396	WITHOUT_CLASSIFICATION	1.1816324960504484E-5	DESIGN
SQL Exception converter:	WITHOUT_CLASSIFICATION	0.9999671363164929	WITHOUT_CLASSIFICATION	3.286368350718189E-5	DESIGN
Statistics and logging:	WITHOUT_CLASSIFICATION	0.9999993929775981	WITHOUT_CLASSIFICATION	6.070224019597679E-7	DESIGN
settings.setShowSqlEnabled(showSql);	WITHOUT_CLASSIFICATION	0.9999980191543518	WITHOUT_CLASSIFICATION	1.9808456481138177E-6	DESIGN
settings.setFormatSqlEnabled(formatSql);	WITHOUT_CLASSIFICATION	0.9999971490829933	WITHOUT_CLASSIFICATION	2.8509170066516044E-6	DESIGN
Schema export:	WITHOUT_CLASSIFICATION	0.9999956474463607	WITHOUT_CLASSIFICATION	4.3525536393644915E-6	DESIGN
String provider = properties.getProperty( Environment.BYTECODE_PROVIDER ); log.info( "Bytecode provider name : " + provider ); BytecodeProvider bytecodeProvider = buildBytecodeProvider( provider ); settings.setBytecodeProvider( bytecodeProvider );	WITHOUT_CLASSIFICATION	0.9999996430941066	WITHOUT_CLASSIFICATION	3.56905893362795E-7	DESIGN
legacy behavior, apply the bridge...	WITHOUT_CLASSIFICATION	0.9981815498087794	WITHOUT_CLASSIFICATION	0.0018184501912206878	DESIGN
maybe a concrete SQLpropertyresult type, but Map is exactly what is required at the moment	WITHOUT_CLASSIFICATION	0.9889250464463344	WITHOUT_CLASSIFICATION	0.011074953553665568	DESIGN
if dotted and not load-collection nor return-join regular property	WITHOUT_CLASSIFICATION	0.999999850864825	WITHOUT_CLASSIFICATION	1.4913517503053508E-7	DESIGN
private ComponentTuplizerFactory componentTuplizerFactory; todo : HHH-3517 and HHH-1907 private BytecodeProvider bytecodeProvider;	WITHOUT_CLASSIFICATION	0.9986269626860089	WITHOUT_CLASSIFICATION	0.00137303731399105	DESIGN
public getters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998124079748738	WITHOUT_CLASSIFICATION	1.8759202512615367E-4	DESIGN
public ComponentTuplizerFactory getComponentTuplizerFactory() { return componentTuplizerFactory; }	WITHOUT_CLASSIFICATION	0.9998721388507457	WITHOUT_CLASSIFICATION	1.2786114925439484E-4	DESIGN
package protected setters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9975035427415682	WITHOUT_CLASSIFICATION	0.002496457258431783	DESIGN
void setShowSqlEnabled(boolean b) { showSql = b; } void setFormatSqlEnabled(boolean b) { formatSql = b; }	WITHOUT_CLASSIFICATION	0.9999999100020271	WITHOUT_CLASSIFICATION	8.999797283394936E-8	DESIGN
public BytecodeProvider getBytecodeProvider() { return bytecodeProvider; } void setBytecodeProvider(BytecodeProvider bytecodeProvider) { this.bytecodeProvider = bytecodeProvider; }	WITHOUT_CLASSIFICATION	0.999872658303581	WITHOUT_CLASSIFICATION	1.273416964190241E-4	DESIGN
using local since the inheritedMetas at this point is not the correct map since it is always the empty map	WITHOUT_CLASSIFICATION	0.9999328062847568	WITHOUT_CLASSIFICATION	6.71937152432511E-5	DESIGN
private ComponentTuplizerFactory componentTuplizerFactory; todo : HHH-3517 and HHH-1907	WITHOUT_CLASSIFICATION	0.9993351047213304	WITHOUT_CLASSIFICATION	6.648952786695966E-4	DESIGN
protected List extendsQueue;	WITHOUT_CLASSIFICATION	0.9999249375576927	WITHOUT_CLASSIFICATION	7.506244230724842E-5	DESIGN
extendsQueue = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999996875198365	WITHOUT_CLASSIFICATION	3.1248016353702123E-7	DESIGN
componentTuplizerFactory = new ComponentTuplizerFactory();	WITHOUT_CLASSIFICATION	0.9999990106452049	WITHOUT_CLASSIFICATION	9.893547950909858E-7	DESIGN
if doc is null, then for whatever reason, the cached file cannot be used...	WITHOUT_CLASSIFICATION	0.9999926556630385	WITHOUT_CLASSIFICATION	7.3443369614431E-6	DESIGN
drop them in reverse order in case db needs it done that way...	WITHOUT_CLASSIFICATION	0.978812524243544	WITHOUT_CLASSIFICATION	0.021187475756456017	DESIGN
public ComponentTuplizerFactory getComponentTuplizerFactory() { return componentTuplizerFactory; }	WITHOUT_CLASSIFICATION	0.9998721388507457	WITHOUT_CLASSIFICATION	1.2786114925439484E-4	DESIGN
This method may be called many times!!	WITHOUT_CLASSIFICATION	0.9998780619766123	WITHOUT_CLASSIFICATION	1.2193802338771785E-4	DESIGN
Iterator iterator = extendsQueue.iterator();	WITHOUT_CLASSIFICATION	0.9999919229600809	WITHOUT_CLASSIFICATION	8.077039919109052E-6	DESIGN
Iterator iter = extendsQueue.iterator();	WITHOUT_CLASSIFICATION	0.9999935074909009	WITHOUT_CLASSIFICATION	6.492509099085138E-6	DESIGN
found	WITHOUT_CLASSIFICATION	0.9996884580716657	WITHOUT_CLASSIFICATION	3.11541928334299E-4	DESIGN
found	WITHOUT_CLASSIFICATION	0.9996884580716657	WITHOUT_CLASSIFICATION	3.11541928334299E-4	DESIGN
settings.setComponentTuplizerFactory( this.getComponentTuplizerFactory() );	WITHOUT_CLASSIFICATION	0.9999932573217087	WITHOUT_CLASSIFICATION	6.742678291174254E-6	DESIGN
private final List extendsQueue;	WITHOUT_CLASSIFICATION	0.9999901553910829	WITHOUT_CLASSIFICATION	9.844608916999567E-6	DESIGN
<String, String>	WITHOUT_CLASSIFICATION	0.9999994467526131	WITHOUT_CLASSIFICATION	5.53247386795337E-7	DESIGN
<String, String>	WITHOUT_CLASSIFICATION	0.9999994467526131	WITHOUT_CLASSIFICATION	5.53247386795337E-7	DESIGN
+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9903504215149224	WITHOUT_CLASSIFICATION	0.00964957848507757	DESIGN
Set USE_REFLECTION_OPTIMIZER to false to fix HHH-227	WITHOUT_CLASSIFICATION	0.9999994275847965	WITHOUT_CLASSIFICATION	5.724152035112905E-7	DESIGN
orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.996331460841803	WITHOUT_CLASSIFICATION	0.0036685391581969384	DESIGN
element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9999988827049445	WITHOUT_CLASSIFICATION	1.1172950554181368E-6	DESIGN
intentionally empty	WITHOUT_CLASSIFICATION	0.9999950582711101	WITHOUT_CLASSIFICATION	4.941728889975087E-6	DESIGN
orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.996331460841803	WITHOUT_CLASSIFICATION	0.0036685391581969384	DESIGN
element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9999988827049445	WITHOUT_CLASSIFICATION	1.1172950554181368E-6	DESIGN
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999947311676003	WITHOUT_CLASSIFICATION	5.2688323996337185E-6	DESIGN
maintain correct duplication if loaded in a cartesian product	WITHOUT_CLASSIFICATION	0.9997666874142438	WITHOUT_CLASSIFICATION	2.3331258575616737E-4	DESIGN
the element has been removed from the set	WITHOUT_CLASSIFICATION	0.9999270264557548	WITHOUT_CLASSIFICATION	7.29735442452203E-5	DESIGN
the element has changed	WITHOUT_CLASSIFICATION	0.9999792931629877	WITHOUT_CLASSIFICATION	2.0706837012202822E-5	DESIGN
Careful: these methods do not initialize the collection.	WITHOUT_CLASSIFICATION	0.9998302480936871	WITHOUT_CLASSIFICATION	1.6975190631280326E-4	DESIGN
needed so that we remove this collection from the second-level cache	WITHOUT_CLASSIFICATION	0.6683807802296374	WITHOUT_CLASSIFICATION	0.3316192197703625	DESIGN
override on some subclasses	WITHOUT_CLASSIFICATION	0.9999788169621486	WITHOUT_CLASSIFICATION	2.118303785131765E-5	DESIGN
override on some subclasses	WITHOUT_CLASSIFICATION	0.9999788169621486	WITHOUT_CLASSIFICATION	2.118303785131765E-5	DESIGN
do this bit after setting initialized to true or it will recurse	WITHOUT_CLASSIFICATION	0.9999079953023172	WITHOUT_CLASSIFICATION	9.200469768277201E-5	DESIGN
short-circuit(s) no new elements, the old list contains only Orphans no old elements, so no Orphans neither	WITHOUT_CLASSIFICATION	0.9999999994530917	WITHOUT_CLASSIFICATION	5.469082382972277E-10	DESIGN
create the collection holding the Orphans	WITHOUT_CLASSIFICATION	0.9999933878445747	WITHOUT_CLASSIFICATION	6.612155425330447E-6	DESIGN
collect EntityIdentifier(s) of the current elements - add them into a HashSet for fast access	WITHOUT_CLASSIFICATION	0.9999161200759703	WITHOUT_CLASSIFICATION	8.387992402972357E-5	DESIGN
iterate over the old list	WITHOUT_CLASSIFICATION	0.9999984093798387	WITHOUT_CLASSIFICATION	1.5906201611637004E-6	DESIGN
(array==null) ? tempList.size() :	WITHOUT_CLASSIFICATION	0.9999996876234859	WITHOUT_CLASSIFICATION	3.1237651414804733E-7	DESIGN
intentionally empty	WITHOUT_CLASSIFICATION	0.9999950582711101	WITHOUT_CLASSIFICATION	4.941728889975087E-6	DESIGN
(array==null) ? tempList.get(i) :	WITHOUT_CLASSIFICATION	0.9999921354911635	WITHOUT_CLASSIFICATION	7.864508836496187E-6	DESIGN
write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9999997226681835	WITHOUT_CLASSIFICATION	2.7733181657670284E-7	DESIGN
write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9999997226681835	WITHOUT_CLASSIFICATION	2.7733181657670284E-7	DESIGN
amazingly, these two will work because AbstractCollection uses iterator() to fill the array	WITHOUT_CLASSIFICATION	0.999998689213789	WITHOUT_CLASSIFICATION	1.310786211022569E-6	DESIGN
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999947311676003	WITHOUT_CLASSIFICATION	5.2688323996337185E-6	DESIGN
finally, what it's all about...	WITHOUT_CLASSIFICATION	0.9998394606082208	WITHOUT_CLASSIFICATION	1.6053939177910716E-4	DESIGN
note that if we load this collection from a cartesian product the multiplicity would be broken ... so use an idbag instead	WITHOUT_CLASSIFICATION	0.9738148383438919	DESIGN	0.02618516165610806	WITHOUT_CLASSIFICATION
Anyway, here we implement <set> semantics for a <one-to-many> <bag>!	WITHOUT_CLASSIFICATION	0.8215553005489679	WITHOUT_CLASSIFICATION	0.17844469945103208	DESIGN
a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999997500921225	WITHOUT_CLASSIFICATION	2.499078774913592E-7	DESIGN
search for it note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9476353642258808	WITHOUT_CLASSIFICATION	0.05236463577411911	DESIGN
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999947311676003	WITHOUT_CLASSIFICATION	5.2688323996337185E-6	DESIGN
a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999997500921225	WITHOUT_CLASSIFICATION	2.499078774913592E-7	DESIGN
search for it note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9476353642258808	WITHOUT_CLASSIFICATION	0.05236463577411911	DESIGN
public boolean equals(Object other) {read();return bag.equals(other);}public int hashCode(Object other) {read();return bag.hashCode();}	WITHOUT_CLASSIFICATION	0.9999957046617354	WITHOUT_CLASSIFICATION	4.295338264636684E-6	DESIGN
List OPERATIONS:	WITHOUT_CLASSIFICATION	0.9999999712723938	WITHOUT_CLASSIFICATION	2.872760617750803E-8	DESIGN
pad with nulls from the current last element up to the new index	WITHOUT_CLASSIFICATION	0.9999998543262884	WITHOUT_CLASSIFICATION	1.4567371168868019E-7	DESIGN
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999947311676003	WITHOUT_CLASSIFICATION	5.2688323996337185E-6	DESIGN
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999947311676003	WITHOUT_CLASSIFICATION	5.2688323996337185E-6	DESIGN
from Map	WITHOUT_CLASSIFICATION	0.999982344237965	WITHOUT_CLASSIFICATION	1.7655762035109072E-5	DESIGN
from SortedMap	WITHOUT_CLASSIFICATION	0.999943862522285	WITHOUT_CLASSIFICATION	5.61374777150285E-5	DESIGN
inject the data	WITHOUT_CLASSIFICATION	0.9999941244333029	WITHOUT_CLASSIFICATION	5.875566697067784E-6	DESIGN
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9998996452207961	WITHOUT_CLASSIFICATION	1.0035477920393565E-4	DESIGN
default pool size 20	WITHOUT_CLASSIFICATION	0.9999990081631088	WITHOUT_CLASSIFICATION	9.918368911410292E-7	DESIGN
trying via forName() first to be as close to DriverManager's semantics	WITHOUT_CLASSIFICATION	0.9999999170232867	WITHOUT_CLASSIFICATION	8.297671323206741E-8	DESIGN
if debug level is enabled, then log the password, otherwise mask it	WITHOUT_CLASSIFICATION	0.9999994155635248	WITHOUT_CLASSIFICATION	5.84436475248997E-7	DESIGN
register a cleanup synch	WITHOUT_CLASSIFICATION	0.9999894657187668	WITHOUT_CLASSIFICATION	1.0534281233243727E-5	DESIGN
wrap the session in the transaction-protection proxy	WITHOUT_CLASSIFICATION	0.9997151044857997	WITHOUT_CLASSIFICATION	2.8489551420032844E-4	DESIGN
then bind it	WITHOUT_CLASSIFICATION	0.9999945121898746	WITHOUT_CLASSIFICATION	5.487810125459151E-6	DESIGN
try to make sure we don't wrap and already wrapped session	WITHOUT_CLASSIFICATION	0.9999027527942346	WITHOUT_CLASSIFICATION	9.724720576545799E-5	DESIGN
allow these to go through the the real session no matter what	WITHOUT_CLASSIFICATION	0.9998789124549303	WITHOUT_CLASSIFICATION	1.210875450697036E-4	DESIGN
limit the methods available if no transaction is active	WITHOUT_CLASSIFICATION	0.9999181865037362	WITHOUT_CLASSIFICATION	8.181349626376311E-5	DESIGN
allow these (deprecated) methods to pass through	WITHOUT_CLASSIFICATION	0.9732494684604421	WITHOUT_CLASSIFICATION	0.026750531539557885	DESIGN
serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992564448633	WITHOUT_CLASSIFICATION	7.435551366131835E-7	DESIGN
We could register the session against the transaction even though it is not started, but we'd have no guarentee of ever getting the map entries cleaned up (aside from spawning threads).	WITHOUT_CLASSIFICATION	0.999961187433356	WITHOUT_CLASSIFICATION	3.881256664398303E-5	DESIGN
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9998996452207961	WITHOUT_CLASSIFICATION	1.0035477920393565E-4	DESIGN
private String propertyName;	WITHOUT_CLASSIFICATION	0.9979871954580986	WITHOUT_CLASSIFICATION	0.0020128045419015397	DESIGN
public PropertyProjection project() {return Projections.property(getPropertyName());}	WITHOUT_CLASSIFICATION	0.9999775352300602	WITHOUT_CLASSIFICATION	2.246476993984023E-5	DESIGN
String[] fk = StringHelper.qualify( "collection_", cp.getKeyColumnNames() );	WITHOUT_CLASSIFICATION	0.9999998191432121	WITHOUT_CLASSIFICATION	1.808567878942252E-7	DESIGN
" collection_ where " +	WITHOUT_CLASSIFICATION	0.9999898372000433	WITHOUT_CLASSIFICATION	1.0162799956722233E-5	DESIGN
unsupported	WITHOUT_CLASSIFICATION	0.999706464186587	WITHOUT_CLASSIFICATION	2.935358134130483E-4	DESIGN
unsupported	WITHOUT_CLASSIFICATION	0.999706464186587	WITHOUT_CLASSIFICATION	2.935358134130483E-4	DESIGN
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9998996452207961	WITHOUT_CLASSIFICATION	1.0035477920393565E-4	DESIGN
the following two lines were added to ensure that this.params is not null, which can happen with two-deep nested subqueries	WITHOUT_CLASSIFICATION	0.9999998001622947	WITHOUT_CLASSIFICATION	1.9983770530135575E-7	DESIGN
with two-deep subqueries, the same alias would get generated for both using the old method (criteriaQuery.generateSQLAlias()), so that is now used as a fallback if the main criteria alias isn't set	WITHOUT_CLASSIFICATION	0.9999975916811169	WITHOUT_CLASSIFICATION	2.408318883110371E-6	DESIGN
implicit polymorphism not supported (would need a union)	WITHOUT_CLASSIFICATION	0.7237503320395984	WITHOUT_CLASSIFICATION	0.2762496679604017	DESIGN
pull off the last ", "	WITHOUT_CLASSIFICATION	0.9999985007150783	WITHOUT_CLASSIFICATION	1.4992849216499276E-6	DESIGN
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999735810866639	WITHOUT_CLASSIFICATION	2.6418913336021746E-5	DESIGN
we have the form: trim(trimSource) so we trim leading and trailing spaces	WITHOUT_CLASSIFICATION	0.9999803321933709	WITHOUT_CLASSIFICATION	1.966780662913276E-5	DESIGN
we have the form: trim(from trimSource). This is functionally equivalent to trim(trimSource)	WITHOUT_CLASSIFICATION	0.9997174299939243	WITHOUT_CLASSIFICATION	2.8257000607568114E-4	DESIGN
NOT_SUPPORTED_SHOULD_USE_JDBC3_PreparedStatement.getGeneratedKeys_method	WITHOUT_CLASSIFICATION	0.9995989659566391	WITHOUT_CLASSIFICATION	4.010340433609293E-4	DESIGN
potentialTrimCharacterArgIndex = 1 assumes that a trim-specification has been specified. we handle the exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999999864425615	WITHOUT_CLASSIFICATION	1.3557438572782435E-8	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998417995208904	WITHOUT_CLASSIFICATION	1.582004791096392E-4	DESIGN
Oracle did add support for ANSI CASE statements in 9i	WITHOUT_CLASSIFICATION	0.9999993127321835	WITHOUT_CLASSIFICATION	6.872678166028726E-7	DESIGN
the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999999178531945	WITHOUT_CLASSIFICATION	8.214680546223236E-8	DESIGN
Informix doesn't have a bit type	WITHOUT_CLASSIFICATION	0.9997225945858254	WITHOUT_CLASSIFICATION	2.77405414174648E-4	DESIGN
or BYTE or TEXT? or MONEY	WITHOUT_CLASSIFICATION	0.9984662210249737	WITHOUT_CLASSIFICATION	0.0015337789750261507	DESIGN
strip table-owner because Informix always returns constraint names as "<table-owner>.<constraint-name>"	WITHOUT_CLASSIFICATION	0.9999999228691178	WITHOUT_CLASSIFICATION	7.713088221234306E-8	DESIGN
build the map of standard ANSI SQL aggregation functions ~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998723147943	WITHOUT_CLASSIFICATION	1.276852056962469E-7	DESIGN
pre H3.2 behavior: super.getReturnType(ct, m);	WITHOUT_CLASSIFICATION	0.9996391706674637	WITHOUT_CLASSIFICATION	3.608293325364044E-4	DESIGN
finally use the sqltype if == on Hibernate types did not find a match.	WITHOUT_CLASSIFICATION	0.9999945389846507	WITHOUT_CLASSIFICATION	5.46101534920445E-6	DESIGN
because numeric can be anything	WITHOUT_CLASSIFICATION	0.9999975101275421	WITHOUT_CLASSIFICATION	2.4898724578433018E-6	DESIGN
constructors and factory methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999390312444504	WITHOUT_CLASSIFICATION	6.096875554957121E-5	DESIGN
standard sql92 functions (can be overridden by subclasses)	WITHOUT_CLASSIFICATION	0.9997684579662878	WITHOUT_CLASSIFICATION	2.3154203371211724E-4	DESIGN
map second/minute/hour/day/month/year to ANSI extract(), override on subclasses	WITHOUT_CLASSIFICATION	0.9994858178625112	WITHOUT_CLASSIFICATION	5.14182137488739E-4	DESIGN
register hibernate types for default use in scalar sqlquery type auto detection	WITHOUT_CLASSIFICATION	0.9486397813822146	WITHOUT_CLASSIFICATION	0.05136021861778532	DESIGN
database type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998110520259439	WITHOUT_CLASSIFICATION	1.889479740561472E-4	DESIGN
hibernate type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995540232722262	WITHOUT_CLASSIFICATION	4.459767277737407E-4	DESIGN
keyword support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994518181845188	WITHOUT_CLASSIFICATION	5.481818154811592E-4	DESIGN
native identifier generatiion ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999974274477453	WITHOUT_CLASSIFICATION	2.572552254633817E-6	DESIGN
IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997611599336701	WITHOUT_CLASSIFICATION	2.3884006633001086E-4	DESIGN
SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9991275861789359	WITHOUT_CLASSIFICATION	8.724138210640734E-4	DESIGN
GUID support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9990636488494721	WITHOUT_CLASSIFICATION	9.363511505277927E-4	DESIGN
limit/offset support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998447849953337	WITHOUT_CLASSIFICATION	1.5521500466619885E-4	DESIGN
by default we report no support	WITHOUT_CLASSIFICATION	0.998879960285425	WITHOUT_CLASSIFICATION	0.0011200397145750642	DESIGN
by default we report no support for NOWAIT lock semantics	WITHOUT_CLASSIFICATION	0.9885142925412433	WITHOUT_CLASSIFICATION	0.011485707458756616	DESIGN
table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999694230519643	WITHOUT_CLASSIFICATION	3.057694803565409E-5	DESIGN
temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9984169434718924	WITHOUT_CLASSIFICATION	0.001583056528107666	DESIGN
callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999196702088359	WITHOUT_CLASSIFICATION	8.032979116422118E-5	DESIGN
current timestamp support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999973471708141	WITHOUT_CLASSIFICATION	2.652829185936012E-6	DESIGN
SQLException support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996671173145992	WITHOUT_CLASSIFICATION	3.328826854007132E-4	DESIGN
miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997609503458279	WITHOUT_CLASSIFICATION	2.3904965417220671E-4	DESIGN
identifier quoting support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998985907496517	WITHOUT_CLASSIFICATION	1.0140925034839729E-4	DESIGN
DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998110464144062	WITHOUT_CLASSIFICATION	1.8895358559378722E-4	DESIGN
grrr... for differentiation of mysql storage engines	WITHOUT_CLASSIFICATION	0.999995148980551	WITHOUT_CLASSIFICATION	4.851019449125438E-6	DESIGN
Informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999526598414691	WITHOUT_CLASSIFICATION	4.734015853082451E-5	DESIGN
return false here, as most databases do not properly support this construct...	WITHOUT_CLASSIFICATION	0.9998056654450092	WITHOUT_CLASSIFICATION	1.943345549907856E-4	DESIGN
Mckoi has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9998550997921187	WITHOUT_CLASSIFICATION	1.449002078813708E-4	DESIGN
Oracle8 and previous define only a "DATE" type which is used to represent all aspects of date/time	WITHOUT_CLASSIFICATION	0.9999798626632602	WITHOUT_CLASSIFICATION	2.0137336739710037E-5	DESIGN
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999995054002039	WITHOUT_CLASSIFICATION	4.945997962363285E-7	DESIGN
" cascade";	WITHOUT_CLASSIFICATION	0.9999852401291074	WITHOUT_CLASSIFICATION	1.4759870892632775E-5	DESIGN
trim off the length/precision/scale	WITHOUT_CLASSIFICATION	0.9999997523306887	WITHOUT_CLASSIFICATION	2.4766931137397006E-7	DESIGN
public boolean dropTemporaryTableAfterUse() {we have to, because postgres sets current txto rollback only after a failed create tablereturn true;}	WITHOUT_CLASSIFICATION	0.9998937708468622	WITHOUT_CLASSIFICATION	1.0622915313784546E-4	DESIGN
CHECK VIOLATION	WITHOUT_CLASSIFICATION	0.999998795708781	WITHOUT_CLASSIFICATION	1.2042912189901082E-6	DESIGN
UNIQUE VIOLATION	WITHOUT_CLASSIFICATION	0.9999992575515618	WITHOUT_CLASSIFICATION	7.424484381660963E-7	DESIGN
FOREIGN KEY VIOLATION	WITHOUT_CLASSIFICATION	0.9999890093162446	WITHOUT_CLASSIFICATION	1.0990683755324615E-5	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998417995208904	WITHOUT_CLASSIFICATION	1.582004791096392E-4	DESIGN
NOT NULL VIOLATION	WITHOUT_CLASSIFICATION	0.9999956929857804	WITHOUT_CLASSIFICATION	4.3070142196997174E-6	DESIGN
ALL OTHER	WITHOUT_CLASSIFICATION	0.9999738953580425	WITHOUT_CLASSIFICATION	2.6104641957503946E-5	DESIGN
Register the type of the out param - PostgreSQL uses Types.OTHER	WITHOUT_CLASSIFICATION	0.9991917334460182	WITHOUT_CLASSIFICATION	8.082665539817806E-4	DESIGN
seems to not really... public boolean supportsRowValueConstructorSyntax() { return true; }	WITHOUT_CLASSIFICATION	0.9999878165666809	WITHOUT_CLASSIFICATION	1.2183433319070433E-5	DESIGN
seems to have spotty LOB suppport	WITHOUT_CLASSIFICATION	0.9985953082513713	WITHOUT_CLASSIFICATION	0.0014046917486287168	DESIGN
HHH-2300	WITHOUT_CLASSIFICATION	0.9995327717172541	WITHOUT_CLASSIFICATION	4.672282827458919E-4	DESIGN
ignore (probably H2 not in the classpath)	WITHOUT_CLASSIFICATION	0.9999869881275069	WITHOUT_CLASSIFICATION	1.3011872493213318E-5	DESIGN
Numeric Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999323513643857	WITHOUT_CLASSIFICATION	6.764863561424341E-5	DESIGN
String Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999720163722012	WITHOUT_CLASSIFICATION	2.7983627798738186E-5	DESIGN
Time and Date Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999954840942199	WITHOUT_CLASSIFICATION	4.515905780088749E-5	DESIGN
System Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999005012842157	WITHOUT_CLASSIFICATION	9.949871578436875E-5	DESIGN
not null is implicit	WITHOUT_CLASSIFICATION	0.9990471305289009	WITHOUT_CLASSIFICATION	9.52869471099013E-4	DESIGN
23000: Check constraint violation: {0} 23001: Unique index or primary key violation: {0}	WITHOUT_CLASSIFICATION	0.9999999976202633	WITHOUT_CLASSIFICATION	2.379736845815991E-9	DESIGN
Display the dialect version.	WITHOUT_CLASSIFICATION	0.9999875682157289	WITHOUT_CLASSIFICATION	1.243178427111774E-5	DESIGN
The RDMS concat() function only supports 2 parameters	WITHOUT_CLASSIFICATION	0.9999994136101611	WITHOUT_CLASSIFICATION	5.863898389625153E-7	DESIGN
Dialect method overrides ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999875456000443	WITHOUT_CLASSIFICATION	1.245439995571116E-5	DESIGN
Original Dialect.java returns " for update";	WITHOUT_CLASSIFICATION	0.9999870716831731	WITHOUT_CLASSIFICATION	1.2928316826920077E-5	DESIGN
Verify the state of this new method in Hibernate 3.0 Dialect.java	WITHOUT_CLASSIFICATION	0.998028214610639	WITHOUT_CLASSIFICATION	0.001971785389361048	DESIGN
Origial Dialect.java returns true;	WITHOUT_CLASSIFICATION	0.9999620306434733	WITHOUT_CLASSIFICATION	3.796935652661474E-5	DESIGN
The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999984379581068	WITHOUT_CLASSIFICATION	1.562041893195304E-6	DESIGN
Sequence methods - start. The RDMS dialect needs these	WITHOUT_CLASSIFICATION	0.9999696052486288	WITHOUT_CLASSIFICATION	3.0394751371240692E-5	DESIGN
methods to make it possible to use the Native Id generator	WITHOUT_CLASSIFICATION	0.9998795295681866	WITHOUT_CLASSIFICATION	1.2047043181343375E-4	DESIGN
The where clause was added to eliminate this statement from Brute Force Searches.	WITHOUT_CLASSIFICATION	0.9999257171013828	WITHOUT_CLASSIFICATION	7.428289861731094E-5	DESIGN
Sequence methods - end	WITHOUT_CLASSIFICATION	0.9981132723314924	WITHOUT_CLASSIFICATION	0.0018867276685076032	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998417995208904	WITHOUT_CLASSIFICATION	1.582004791096392E-4	DESIGN
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999995054002039	WITHOUT_CLASSIFICATION	4.945997962363285E-7	DESIGN
We must return a valid RDMS/RSA command from this method to prevent RDMS/RSA from issuing ERROR 400	WITHOUT_CLASSIFICATION	0.9990292804113485	WITHOUT_CLASSIFICATION	9.707195886514918E-4	DESIGN
Used with DROP TABLE to delete all records in the table.	WITHOUT_CLASSIFICATION	0.9999995391619014	WITHOUT_CLASSIFICATION	4.608380985692397E-7	DESIGN
RDMS supports the UNION ALL clause.	WITHOUT_CLASSIFICATION	0.9999990691384991	WITHOUT_CLASSIFICATION	9.308615008786998E-7	DESIGN
RDMS has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999592828989062	WITHOUT_CLASSIFICATION	4.0717101093806E-5	DESIGN
Multi-param dialect functions...	WITHOUT_CLASSIFICATION	0.999974185812007	WITHOUT_CLASSIFICATION	2.5814187992924485E-5	DESIGN
function templates	WITHOUT_CLASSIFICATION	0.999999569725512	WITHOUT_CLASSIFICATION	4.3027448799429637E-7	DESIGN
not null is implicit	WITHOUT_CLASSIFICATION	0.9990471305289009	WITHOUT_CLASSIFICATION	9.52869471099013E-4	DESIGN
this assumes schema support, which is present in 1.8.0 and later...	WITHOUT_CLASSIFICATION	0.9938326529158387	WITHOUT_CLASSIFICATION	0.006167347084161258	DESIGN
HSQLDB only supports READ_UNCOMMITTED transaction isolation	WITHOUT_CLASSIFICATION	0.9999953686166276	WITHOUT_CLASSIFICATION	4.631383372318333E-6	DESIGN
Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999738724431624	WITHOUT_CLASSIFICATION	2.6127556837616404E-5	DESIGN
Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9999525243960038	WITHOUT_CLASSIFICATION	4.747560399614383E-5	DESIGN
Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999484301718665	WITHOUT_CLASSIFICATION	5.156982813358603E-5	DESIGN
simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999998770552938	WITHOUT_CLASSIFICATION	1.2294470626809846E-7	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998417995208904	WITHOUT_CLASSIFICATION	1.582004791096392E-4	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998417995208904	WITHOUT_CLASSIFICATION	1.582004791096392E-4	DESIGN
not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9923786312167661	WITHOUT_CLASSIFICATION	0.007621368783233987	DESIGN
register the type of the out param - an Oracle specific type	WITHOUT_CLASSIFICATION	0.9998933603861444	WITHOUT_CLASSIFICATION	1.0663961385560545E-4	DESIGN
TimesTen has no BLOB/CLOB support, but these types may be suitable for some applications. The length is limited to 4 million bytes.	WITHOUT_CLASSIFICATION	0.999999270270216	WITHOUT_CLASSIFICATION	7.297297839462789E-7	DESIGN
new methods in dialect3	WITHOUT_CLASSIFICATION	0.9999762005366003	WITHOUT_CLASSIFICATION	2.3799463399698917E-5	DESIGN
public boolean supportsForUpdateNowait() {return false;}	WITHOUT_CLASSIFICATION	0.9999925049428517	WITHOUT_CLASSIFICATION	7.49505714824184E-6	DESIGN
TimesTen has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999739094475633	WITHOUT_CLASSIFICATION	2.609055243668886E-5	DESIGN
iterate entries ordered by capacity to find first fit	WITHOUT_CLASSIFICATION	0.9999980803076134	WITHOUT_CLASSIFICATION	1.919692386680846E-6	DESIGN
add new ordered map	WITHOUT_CLASSIFICATION	0.9999990392459758	WITHOUT_CLASSIFICATION	9.607540242670564E-7	DESIGN
registerColumnType( Types.VARCHAR, 16777215, "mediumtext" );	WITHOUT_CLASSIFICATION	0.9999933391469343	WITHOUT_CLASSIFICATION	6.660853065606244E-6	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998417995208904	WITHOUT_CLASSIFICATION	1.582004791096392E-4	DESIGN
This assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.9999997768683416	WITHOUT_CLASSIFICATION	2.231316584706964E-7	DESIGN
sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999953710737854	WITHOUT_CLASSIFICATION	4.628926214519154E-6	DESIGN
return "select CURRENT_TIMESTAMP from RDB$DATABASE";	WITHOUT_CLASSIFICATION	0.9999955481656925	WITHOUT_CLASSIFICATION	4.451834307547308E-6	DESIGN
registerColumnType data types	WITHOUT_CLASSIFICATION	0.9999325023843946	WITHOUT_CLASSIFICATION	6.749761560540337E-5	DESIGN
hibernate seems to ignore this type...	WITHOUT_CLASSIFICATION	0.9999663585906959	WITHOUT_CLASSIFICATION	3.364140930406462E-5	DESIGN
IBID for current_time and current_date	WITHOUT_CLASSIFICATION	0.9999957696530528	WITHOUT_CLASSIFICATION	4.230346947145179E-6	DESIGN
Tell hibernate to use getBytes instead of getBinaryStream	WITHOUT_CLASSIFICATION	0.999595754096512	WITHOUT_CLASSIFICATION	4.042459034880232E-4	DESIGN
No batch statements	WITHOUT_CLASSIFICATION	0.9999999163895769	WITHOUT_CLASSIFICATION	8.361042319431914E-8	DESIGN
We might want a special case for 19,2. This is very common for money types and here it is converted to 18,1	WITHOUT_CLASSIFICATION	0.8780648466463503	WITHOUT_CLASSIFICATION	0.12193515335364977	DESIGN
no pointbase BIT	WITHOUT_CLASSIFICATION	0.9999998833232441	WITHOUT_CLASSIFICATION	1.1667675597608049E-7	DESIGN
no pointbase TINYINT	WITHOUT_CLASSIFICATION	0.9999998206183695	WITHOUT_CLASSIFICATION	1.7938163052719695E-7	DESIGN
Pointbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999652603091421	WITHOUT_CLASSIFICATION	3.47396908577804E-5	DESIGN
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999995054002039	WITHOUT_CLASSIFICATION	4.945997962363285E-7	DESIGN
The current_timestamp is more accurate, but only known to be supported in SQL Server 7.0 and later (i.e., Sybase not known to support it at all)	WITHOUT_CLASSIFICATION	0.9997949929800217	WITHOUT_CLASSIFICATION	2.050070199782264E-4	DESIGN
SQL Server (at least up through 2005) does not support defining cascade delete constraints which can circel back to the mutating table	WITHOUT_CLASSIFICATION	0.9999989570106473	WITHOUT_CLASSIFICATION	1.042989352616961E-6	DESIGN
here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9999367954213844	WITHOUT_CLASSIFICATION	6.32045786156823E-5	DESIGN
registerColumnType( Types.BLOB, 16777215, "mediumblob" ); registerColumnType( Types.BLOB, 65535, "blob" );	WITHOUT_CLASSIFICATION	0.9999997015803016	WITHOUT_CLASSIFICATION	2.984196984850071E-7	DESIGN
registerColumnType( Types.CLOB, 16777215, "mediumtext" ); registerColumnType( Types.CLOB, 65535, "text" );	WITHOUT_CLASSIFICATION	0.9999995196292487	WITHOUT_CLASSIFICATION	4.803707513069411E-7	DESIGN
registerColumnType( Types.VARCHAR, 16777215, "mediumtext" ); registerColumnType( Types.VARCHAR, 65535, "text" );	WITHOUT_CLASSIFICATION	0.9999934962810675	WITHOUT_CLASSIFICATION	6.503718932453318E-6	DESIGN
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999995054002039	WITHOUT_CLASSIFICATION	4.945997962363285E-7	DESIGN
package-private	WITHOUT_CLASSIFICATION	0.9999410269754276	WITHOUT_CLASSIFICATION	5.897302457233572E-5	DESIGN
sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999953710737854	WITHOUT_CLASSIFICATION	4.628926214519154E-6	DESIGN
Sybase BIT type does not support null values	WITHOUT_CLASSIFICATION	0.9983369284358939	WITHOUT_CLASSIFICATION	0.0016630715641060385	DESIGN
This assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.9999997768683416	WITHOUT_CLASSIFICATION	2.231316584706964E-7	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998417995208904	WITHOUT_CLASSIFICATION	1.582004791096392E-4	DESIGN
You may still have other ResultSets or update counts left to process here but you can't do it now or the ResultSet you just got will be closed	WITHOUT_CLASSIFICATION	0.9999999511277478	WITHOUT_CLASSIFICATION	4.887225216676405E-8	DESIGN
not null ... (start with 1) is implicit	WITHOUT_CLASSIFICATION	0.9993560524692037	WITHOUT_CLASSIFICATION	6.439475307963202E-4	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998417995208904	WITHOUT_CLASSIFICATION	1.582004791096392E-4	DESIGN
Oracle driver reports to support getGeneratedKeys(), but they only support the version taking an array of the names of the columns to be returned (via its RETURNING clause). No other driver seems to support this overloaded version.	WITHOUT_CLASSIFICATION	0.9931840694434704	WITHOUT_CLASSIFICATION	0.006815930556529726	DESIGN
Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999738724431624	WITHOUT_CLASSIFICATION	2.6127556837616404E-5	DESIGN
Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9999525243960038	WITHOUT_CLASSIFICATION	4.747560399614383E-5	DESIGN
Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999484301718665	WITHOUT_CLASSIFICATION	5.156982813358603E-5	DESIGN
add another (inner) nested select add the main query close off the inner nested select	WITHOUT_CLASSIFICATION	0.9999999928666454	WITHOUT_CLASSIFICATION	7.133354642416409E-9	DESIGN
add the main query	WITHOUT_CLASSIFICATION	0.9999990189998216	WITHOUT_CLASSIFICATION	9.810001784174738E-7	DESIGN
add the restriction to the outer select	WITHOUT_CLASSIFICATION	0.9999998279962798	WITHOUT_CLASSIFICATION	1.7200372025534912E-7	DESIGN
This assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.9999997768683416	WITHOUT_CLASSIFICATION	2.231316584706964E-7	DESIGN
You may still have other ResultSets or update counts left to process here but you can't do it now or the ResultSet you just got will be closed	WITHOUT_CLASSIFICATION	0.9999999511277478	WITHOUT_CLASSIFICATION	4.887225216676405E-8	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998417995208904	WITHOUT_CLASSIFICATION	1.582004791096392E-4	DESIGN
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999995054002039	WITHOUT_CLASSIFICATION	4.945997962363285E-7	DESIGN
simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999998770552938	WITHOUT_CLASSIFICATION	1.2294470626809846E-7	DESIGN
not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9923786312167661	WITHOUT_CLASSIFICATION	0.007621368783233987	DESIGN
register the type of the out param - an Oracle specific type	WITHOUT_CLASSIFICATION	0.9998933603861444	WITHOUT_CLASSIFICATION	1.0663961385560545E-4	DESIGN
features which change between 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999770490809347	WITHOUT_CLASSIFICATION	2.2950919065436757E-5	DESIGN
features which remain constant across 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992676411724	WITHOUT_CLASSIFICATION	7.323588275230359E-7	DESIGN
binary %Stream character %Stream	WITHOUT_CLASSIFICATION	0.999998824416082	WITHOUT_CLASSIFICATION	1.1755839178978668E-6	DESIGN
getDefaultProperties().setProperty(Environment.STATEMENT_BATCH_SIZE, NO_BATCH);	WITHOUT_CLASSIFICATION	0.9999999435847102	WITHOUT_CLASSIFICATION	5.6415289744660375E-8	DESIGN
hibernate impelemnts cast in Dialect.java	WITHOUT_CLASSIFICATION	0.9999639561676014	WITHOUT_CLASSIFICATION	3.6043832398696826E-5	DESIGN
aggregate functions shouldn't be registered, right? registerFunction( "list", new StandardSQLFunction("list",Hibernate.STRING) ); stopped on $list	WITHOUT_CLASSIFICATION	0.9999125964722491	WITHOUT_CLASSIFICATION	8.740352775089789E-5	DESIGN
DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998110464144062	WITHOUT_CLASSIFICATION	1.8895358559378722E-4	DESIGN
below is for Cache' that don't have str in 2007.1 there is str and we register str directly	WITHOUT_CLASSIFICATION	0.9998272088925056	WITHOUT_CLASSIFICATION	1.7279110749436404E-4	DESIGN
note that %string is deprecated	WITHOUT_CLASSIFICATION	0.998478190523016	WITHOUT_CLASSIFICATION	0.0015218094769839866	DESIGN
%upper is deprecated	WITHOUT_CLASSIFICATION	0.9999320076901738	WITHOUT_CLASSIFICATION	6.799230982617182E-5	DESIGN
The syntax used to add a foreign key constraint to a table.	WITHOUT_CLASSIFICATION	0.9999990777222086	WITHOUT_CLASSIFICATION	9.222777914435284E-7	DESIGN
identifier-commalist	WITHOUT_CLASSIFICATION	0.9999999139074428	WITHOUT_CLASSIFICATION	8.609255721697953E-8	DESIGN
IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997611599336701	WITHOUT_CLASSIFICATION	2.3884006633001086E-4	DESIGN
SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9991275861789359	WITHOUT_CLASSIFICATION	8.724138210640734E-4	DESIGN
temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9984169434718924	WITHOUT_CLASSIFICATION	0.001583056528107666	DESIGN
identifier-commalist	WITHOUT_CLASSIFICATION	0.9999999139074428	WITHOUT_CLASSIFICATION	8.609255721697953E-8	DESIGN
The syntax used to add a column to a table	WITHOUT_CLASSIFICATION	0.9992125522564634	WITHOUT_CLASSIFICATION	7.874477435364343E-4	DESIGN
Completely optional cascading drop clause.	WITHOUT_CLASSIFICATION	0.9999825842782417	WITHOUT_CLASSIFICATION	1.741572175820152E-5	DESIGN
lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999327558553998	WITHOUT_CLASSIFICATION	6.724414460024422E-5	DESIGN
LIMIT support (ala TOP) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999744438382382	WITHOUT_CLASSIFICATION	2.5556161761716622E-5	DESIGN
InterSystems Cache' does not current support "SELECT ... FOR UPDATE" syntax... Set your transaction mode to READ_COMMITTED before using	WITHOUT_CLASSIFICATION	0.9999725350406191	WITHOUT_CLASSIFICATION	2.746495938084086E-5	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998417995208904	WITHOUT_CLASSIFICATION	1.582004791096392E-4	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998417995208904	WITHOUT_CLASSIFICATION	1.582004791096392E-4	DESIGN
<String>	WITHOUT_CLASSIFICATION	0.999966821177678	WITHOUT_CLASSIFICATION	3.317882232207066E-5	DESIGN
callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999196702088359	WITHOUT_CLASSIFICATION	8.032979116422118E-5	DESIGN
miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997609503458279	WITHOUT_CLASSIFICATION	2.3904965417220671E-4	DESIGN
The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999984379581068	WITHOUT_CLASSIFICATION	1.562041893195304E-6	DESIGN
Does the LIMIT clause come at the start of the SELECT statement, rather than at the end?	WITHOUT_CLASSIFICATION	0.9999056857746236	WITHOUT_CLASSIFICATION	9.431422537639615E-5	DESIGN
Does the LIMIT clause take a "maximum" row number instead of a total number of returned rows?	WITHOUT_CLASSIFICATION	0.9999003345287367	WITHOUT_CLASSIFICATION	9.966547126328075E-5	DESIGN
The name of the SQL function that transforms a string to lowercase	WITHOUT_CLASSIFICATION	0.9999994584012304	WITHOUT_CLASSIFICATION	5.415987696815947E-7	DESIGN
Create an OuterJoinGenerator for this dialect.	WITHOUT_CLASSIFICATION	0.9999951467247482	WITHOUT_CLASSIFICATION	4.853275251762196E-6	DESIGN
The keyword used to insert a row without specifying any column values	WITHOUT_CLASSIFICATION	0.999999870419844	WITHOUT_CLASSIFICATION	1.2958015592957483E-7	DESIGN
registerFunction( "trim", new StandardSQLFunction( "trim", Hibernate.STRING ) );	WITHOUT_CLASSIFICATION	0.9999999708504183	WITHOUT_CLASSIFICATION	2.914958185606423E-8	DESIGN
skip the FROM keyword in params	WITHOUT_CLASSIFICATION	0.9999741626880574	WITHOUT_CLASSIFICATION	2.583731194263719E-5	DESIGN
package	WITHOUT_CLASSIFICATION	0.999727668212874	WITHOUT_CLASSIFICATION	2.7233178712603856E-4	DESIGN
potentialTrimCharacterArgIndex = 1 assumes that a trim-specification has been specified. we handle the exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999999864425615	WITHOUT_CLASSIFICATION	1.3557438572782435E-8	DESIGN
SQLFunction implementation	WITHOUT_CLASSIFICATION	0.9999953877315221	WITHOUT_CLASSIFICATION	4.612268477956912E-6	DESIGN
conceivable that the dialect ctor could throw HibernateExceptions, so don't re-wrap	WITHOUT_CLASSIFICATION	0.9999856445196826	WITHOUT_CLASSIFICATION	1.4355480317402121E-5	DESIGN
register the standard dialect resolver	WITHOUT_CLASSIFICATION	0.999996759115373	WITHOUT_CLASSIFICATION	3.2408846270234755E-6	DESIGN
register resolvers set via Environment property	WITHOUT_CLASSIFICATION	0.9999775318488561	WITHOUT_CLASSIFICATION	2.2468151143954078E-5	DESIGN
kept for backward compatibility until after the 3.1beta5 release of HA	WITHOUT_CLASSIFICATION	0.9999949309002198	WITHOUT_CLASSIFICATION	5.069099780258713E-6	DESIGN
cache the hashcode	WITHOUT_CLASSIFICATION	0.9999468501181585	WITHOUT_CLASSIFICATION	5.314988184150546E-5	DESIGN
the CascadingAction contract ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999443920173505	WITHOUT_CLASSIFICATION	5.5607982649518956E-5	DESIGN
the CascadingAction implementations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999925880422458	WITHOUT_CLASSIFICATION	7.4119577542050084E-6	DESIGN
delete does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999907933618539	WITHOUT_CLASSIFICATION	9.20663814601989E-6	DESIGN
orphans should be deleted during delete	WITHOUT_CLASSIFICATION	0.9970544422147968	WITHOUT_CLASSIFICATION	0.0029455577852032706	DESIGN
(LockMode) anything	WITHOUT_CLASSIFICATION	0.9999939255474133	WITHOUT_CLASSIFICATION	6.074452586685819E-6	DESIGN
lock doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999913232508985	WITHOUT_CLASSIFICATION	8.676749101613088E-6	DESIGN
refresh doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999991360831946	WITHOUT_CLASSIFICATION	8.639168055106109E-7	DESIGN
evicts don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999954019334732	WITHOUT_CLASSIFICATION	4.59806652671538E-6	DESIGN
saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.999999959187494	WITHOUT_CLASSIFICATION	4.0812505921601586E-8	DESIGN
orphans should be deleted during save/update	WITHOUT_CLASSIFICATION	0.999614512443323	WITHOUT_CLASSIFICATION	3.8548755667695427E-4	DESIGN
for deprecated saveOrUpdateCopy()	WITHOUT_CLASSIFICATION	0.9995290111204777	WITHOUT_CLASSIFICATION	4.7098887952245577E-4	DESIGN
persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999994870946246	WITHOUT_CLASSIFICATION	5.129053754039617E-7	DESIGN
a proxy cannot be transient and it breaks ForeignKeys.isTransient	WITHOUT_CLASSIFICATION	0.9999380757698778	WITHOUT_CLASSIFICATION	6.192423012215682E-5	DESIGN
replicate does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999464476725871	WITHOUT_CLASSIFICATION	5.3552327412914934E-5	DESIGN
static helper methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999985675500443	WITHOUT_CLASSIFICATION	1.4324499555991012E-6	DESIGN
handles arrays and newly instantiated collections	WITHOUT_CLASSIFICATION	0.9997939974691505	WITHOUT_CLASSIFICATION	2.0600253084951603E-4	DESIGN
Actually the semantics of the next three are really "Bag" Note that, unlike objects, collection insertions, updates, deletions are not really remembered between flushes. We just re-use the same Lists for convenience.	WITHOUT_CLASSIFICATION	0.9999985875966022	WITHOUT_CLASSIFICATION	1.4124033977497605E-6	DESIGN
Add these directly to the executions queue	WITHOUT_CLASSIFICATION	0.9999666493972541	WITHOUT_CLASSIFICATION	3.335060274584375E-5	DESIGN
continue loop	WITHOUT_CLASSIFICATION	0.9999940015531059	WITHOUT_CLASSIFICATION	5.998446894086165E-6	DESIGN
sort the updates by fk	WITHOUT_CLASSIFICATION	0.9999976542760547	WITHOUT_CLASSIFICATION	2.3457239452761283E-6	DESIGN
sort the updates by pk	WITHOUT_CLASSIFICATION	0.9999951383658265	WITHOUT_CLASSIFICATION	4.8616341734691685E-6	DESIGN
the mapping of entity names to their latest batch numbers.	WITHOUT_CLASSIFICATION	0.9999993020710423	WITHOUT_CLASSIFICATION	6.979289577931455E-7	DESIGN
the map of batch numbers to EntityInsertAction lists	WITHOUT_CLASSIFICATION	0.9999996371316627	WITHOUT_CLASSIFICATION	3.6286833726220463E-7	DESIGN
optimize the hash size to eliminate a rehash.	WITHOUT_CLASSIFICATION	0.9994886546922579	WITHOUT_CLASSIFICATION	5.113453077421399E-4	DESIGN
the list of entity names that indicate the batch number	WITHOUT_CLASSIFICATION	0.9999946204706226	WITHOUT_CLASSIFICATION	5.3795293773605684E-6	DESIGN
remove the current element from insertions. It will be added back later.	WITHOUT_CLASSIFICATION	0.9996900713007504	WITHOUT_CLASSIFICATION	3.0992869924963075E-4	DESIGN
the entity associated with the current action.	WITHOUT_CLASSIFICATION	0.9996910944554577	WITHOUT_CLASSIFICATION	3.0890554454229E-4	DESIGN
There is already an existing batch for this type of entity. Check to see if the latest batch is acceptable.	WITHOUT_CLASSIFICATION	0.9999542139302143	WITHOUT_CLASSIFICATION	4.578606978563845E-5	DESIGN
now rebuild the insertions list. There is a batch for each entry in the name list.	WITHOUT_CLASSIFICATION	0.9999997667036382	WITHOUT_CLASSIFICATION	2.3329636174513892E-7	DESIGN
the current batch number is the latest batch for this entity type.	WITHOUT_CLASSIFICATION	0.9999945311472538	WITHOUT_CLASSIFICATION	5.468852746224886E-6	DESIGN
loop through all the associations of the current entity and make sure that they are processed before the current batch number	WITHOUT_CLASSIFICATION	0.9999993746294793	WITHOUT_CLASSIFICATION	6.253705206744288E-7	DESIGN
find the batch number associated with the current association, if any.	WITHOUT_CLASSIFICATION	0.9998134153192448	WITHOUT_CLASSIFICATION	1.8658468075506953E-4	DESIGN
create a new batch for this type. The batch number is the number of current batches.	WITHOUT_CLASSIFICATION	0.9999996293865981	WITHOUT_CLASSIFICATION	3.706134018619564E-7	DESIGN
loop through all the associated entities and make sure they have been processed before the latest batch associated with this entity type.	WITHOUT_CLASSIFICATION	0.9998658479414609	WITHOUT_CLASSIFICATION	1.3415205853901043E-4	DESIGN
since this entity will now be processed in the latest possible batch, we can be assured that it will come after all other associations, there's not need to continue checking.	WITHOUT_CLASSIFICATION	0.9997886162704905	WITHOUT_CLASSIFICATION	2.1138372950941974E-4	DESIGN
cascade to current collection elements	WITHOUT_CLASSIFICATION	0.9999594531889404	WITHOUT_CLASSIFICATION	4.05468110596441E-5	DESIGN
not really necessary, but good for consistency...	WITHOUT_CLASSIFICATION	0.9750245881817908	WITHOUT_CLASSIFICATION	0.024975411818209205	DESIGN
we can't cascade to non-embedded elements	WITHOUT_CLASSIFICATION	0.9999999063091091	WITHOUT_CLASSIFICATION	9.369089091075999E-8	DESIGN
a newly instantiated collection can't have orphans	WITHOUT_CLASSIFICATION	0.9997299929754937	WITHOUT_CLASSIFICATION	2.7000702450623814E-4	DESIGN
handle orphaned entities!!	WITHOUT_CLASSIFICATION	0.9999541309276956	WITHOUT_CLASSIFICATION	4.586907230445818E-5	DESIGN
Loaded entity instances, by EntityUniqueKey	WITHOUT_CLASSIFICATION	0.9999985067488553	WITHOUT_CLASSIFICATION	1.4932511446515561E-6	DESIGN
Identity map of EntityEntry instances, by the entity instance	WITHOUT_CLASSIFICATION	0.999999916048682	WITHOUT_CLASSIFICATION	8.395131796594442E-8	DESIGN
Entity proxies, by EntityKey	WITHOUT_CLASSIFICATION	0.9999953309049399	WITHOUT_CLASSIFICATION	4.669095060203232E-6	DESIGN
Snapshots of current database state for entities that have not been loaded	WITHOUT_CLASSIFICATION	0.9999996858191035	WITHOUT_CLASSIFICATION	3.141808964125716E-7	DESIGN
Identity map of array holder ArrayHolder instances, by the array instance	WITHOUT_CLASSIFICATION	0.9999969097370529	WITHOUT_CLASSIFICATION	3.0902629472096913E-6	DESIGN
Collection wrappers, by the CollectionKey key=CollectionKey, value=PersistentCollection	WITHOUT_CLASSIFICATION	0.9999991201859598	WITHOUT_CLASSIFICATION	8.798140401667121E-7	DESIGN
Set of EntityKeys of deleted objects	WITHOUT_CLASSIFICATION	0.9999732472295241	WITHOUT_CLASSIFICATION	2.6752770475925174E-5	DESIGN
properties that we have tried to load, and not found in the database	WITHOUT_CLASSIFICATION	0.9999996424584117	WITHOUT_CLASSIFICATION	3.5754158829805237E-7	DESIGN
A list of collection wrappers that were instantiating during result set processing, that we will need to initialize at the end of the query	WITHOUT_CLASSIFICATION	0.9999985698992506	WITHOUT_CLASSIFICATION	1.430100749350274E-6	DESIGN
A container for collections we load up when the owning entity is not yet loaded ... for now, this is purely transient!	WITHOUT_CLASSIFICATION	0.996241773450306	WITHOUT_CLASSIFICATION	0.0037582265496939227	DESIGN
Downgrade locks	WITHOUT_CLASSIFICATION	0.9999801210528907	WITHOUT_CLASSIFICATION	1.9878947109298454E-5	DESIGN
any earlier proxy takes precedence	WITHOUT_CLASSIFICATION	0.9999824508547188	WITHOUT_CLASSIFICATION	1.7549145281122006E-5	DESIGN
unwrap the object	WITHOUT_CLASSIFICATION	0.9999996419339795	WITHOUT_CLASSIFICATION	3.5806602059699374E-7	DESIGN
initialize + unwrap the object	WITHOUT_CLASSIFICATION	0.9999999415876483	WITHOUT_CLASSIFICATION	5.841235178459223E-8	DESIGN
return the proxied object	WITHOUT_CLASSIFICATION	0.9999663857506195	WITHOUT_CLASSIFICATION	3.3614249380521245E-5	DESIGN
overwrite old proxy	WITHOUT_CLASSIFICATION	0.9999997514518698	WITHOUT_CLASSIFICATION	2.4854813014683716E-7	DESIGN
early exit...	WITHOUT_CLASSIFICATION	0.9999950070549665	WITHOUT_CLASSIFICATION	4.992945033596941E-6	DESIGN
or should it actually throw an exception?	WITHOUT_CLASSIFICATION	0.9604863403909203	WITHOUT_CLASSIFICATION	0.039513659609079634	DESIGN
treat it just like a new collection	WITHOUT_CLASSIFICATION	0.9999655182520538	WITHOUT_CLASSIFICATION	3.448174794609998E-5	DESIGN
do this work only at the very highest level of the load don't let this method be called recursively	WITHOUT_CLASSIFICATION	0.9947140213607507	WITHOUT_CLASSIFICATION	0.0052859786392493785	DESIGN
note that each iteration of the loop may add new elements	WITHOUT_CLASSIFICATION	0.9999997882967624	WITHOUT_CLASSIFICATION	2.1170323764026568E-7	DESIGN
it might be an unwrapped collection reference! try to find a wrapper (slowish)	WITHOUT_CLASSIFICATION	0.9999470773260257	WITHOUT_CLASSIFICATION	5.2922673974307576E-5	DESIGN
public boolean isNonExistant(EntityKey key) {return nonExistantEntityKeys.contains(key);}	WITHOUT_CLASSIFICATION	0.9999982406354244	WITHOUT_CLASSIFICATION	1.759364575678133E-6	DESIGN
public boolean isNonExistant(EntityUniqueKey key) {return nonExistentEntityUniqueKeys.contains(key);}	WITHOUT_CLASSIFICATION	0.9999968885174941	WITHOUT_CLASSIFICATION	3.111482505761537E-6	DESIGN
iterate all the entities currently associated with the persistence context.	WITHOUT_CLASSIFICATION	0.9903932824667637	WITHOUT_CLASSIFICATION	0.009606717533236286	DESIGN
does this entity entry pertain to the entity persister in which we are interested (owner)?	WITHOUT_CLASSIFICATION	0.9999707849661696	WITHOUT_CLASSIFICATION	2.921503383040621E-5	DESIGN
check if the managed object is the parent	WITHOUT_CLASSIFICATION	0.9999985233087366	WITHOUT_CLASSIFICATION	1.4766912633351103E-6	DESIGN
otherwise, the proxy was pruned during the serialization process	WITHOUT_CLASSIFICATION	0.9999997950230711	WITHOUT_CLASSIFICATION	2.0497692885167016E-7	DESIGN
adds remove as a sort-of alias for delete...	WITHOUT_CLASSIFICATION	0.9999962701466754	WITHOUT_CLASSIFICATION	3.729853324692489E-6	DESIGN
bad cast	WITHOUT_CLASSIFICATION	0.9999858954567029	WITHOUT_CLASSIFICATION	1.4104543297151583E-5	DESIGN
return lhsPersister.getSubclassPropertyColumnNames(property);	WITHOUT_CLASSIFICATION	0.9999864469365531	WITHOUT_CLASSIFICATION	1.3553063446949648E-5	DESIGN
property-refs for associations defined on a component are not supported, so no need to slice	WITHOUT_CLASSIFICATION	0.9993615575205629	WITHOUT_CLASSIFICATION	6.384424794371942E-4	DESIGN
if there is no property-ref, assume the join is to the subclass table (ie. the table of the subclass that the association belongs to)	WITHOUT_CLASSIFICATION	0.9999999528302829	WITHOUT_CLASSIFICATION	4.716971714721093E-8	DESIGN
handle a property-ref	WITHOUT_CLASSIFICATION	0.9999442791767748	WITHOUT_CLASSIFICATION	5.5720823225101465E-5	DESIGN
NativeSQLQueryReturn	WITHOUT_CLASSIFICATION	0.9999862052898614	WITHOUT_CLASSIFICATION	1.379471013852142E-5	DESIGN
final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999921347304419	WITHOUT_CLASSIFICATION	7.865269558097145E-6	DESIGN
why is all others non final ?	WITHOUT_CLASSIFICATION	0.99799317747752	WITHOUT_CLASSIFICATION	0.002006822522479954	DESIGN
this.forceCacheRefresh = forceCacheRefresh;	WITHOUT_CLASSIFICATION	0.9999996567868392	WITHOUT_CLASSIFICATION	3.432131608355553E-7	DESIGN
HELLA IMPORTANT OPTIMIZATION!!!	WITHOUT_CLASSIFICATION	0.9999564333596411	WITHOUT_CLASSIFICATION	4.3566640358939597E-5	DESIGN
return that.type.equals(type) && EqualsHelper.equals(that.value, value);	WITHOUT_CLASSIFICATION	0.9999997045637713	WITHOUT_CLASSIFICATION	2.9543622867279163E-7	DESIGN
Must occur after resolving identifiers!	WITHOUT_CLASSIFICATION	0.9999903611246569	WITHOUT_CLASSIFICATION	9.63887534304207E-6	DESIGN
take a snapshot	WITHOUT_CLASSIFICATION	0.9999733294317958	WITHOUT_CLASSIFICATION	2.6670568204133217E-5	DESIGN
do a check	WITHOUT_CLASSIFICATION	0.9995092589964525	WITHOUT_CLASSIFICATION	4.90741003547588E-4	DESIGN
the owning entity may have been deleted and its identifier unset due to identifier-rollback; in which case, try to look up its identifier from the persistence context	WITHOUT_CLASSIFICATION	0.9999999912625788	WITHOUT_CLASSIFICATION	8.73742116067243E-9	DESIGN
do the work	WITHOUT_CLASSIFICATION	0.9999251268138296	WITHOUT_CLASSIFICATION	7.487318617032658E-5	DESIGN
We've been here before	WITHOUT_CLASSIFICATION	0.9998420530979959	WITHOUT_CLASSIFICATION	1.5794690200414033E-4	DESIGN
it is or was referenced _somewhere_	WITHOUT_CLASSIFICATION	0.9999993064677816	WITHOUT_CLASSIFICATION	6.935322183623573E-7	DESIGN
do the work	WITHOUT_CLASSIFICATION	0.9999251268138296	WITHOUT_CLASSIFICATION	7.487318617032658E-5	DESIGN
if either its role changed,	WITHOUT_CLASSIFICATION	0.9999974352249322	WITHOUT_CLASSIFICATION	2.5647750678655362E-6	DESIGN
or its key changed	WITHOUT_CLASSIFICATION	0.9999976666805376	WITHOUT_CLASSIFICATION	2.333319462400871E-6	DESIGN
we will need to create new entries	WITHOUT_CLASSIFICATION	0.9999082903227612	WITHOUT_CLASSIFICATION	9.170967723882493E-5	DESIGN
we will need to remove ye olde entries	WITHOUT_CLASSIFICATION	0.9993002219241489	WITHOUT_CLASSIFICATION	6.997780758511118E-4	DESIGN
force initialize!	WITHOUT_CLASSIFICATION	0.9999998987874437	WITHOUT_CLASSIFICATION	1.0121255632722471E-7	DESIGN
else if it's elements changed	WITHOUT_CLASSIFICATION	0.9999979346722165	WITHOUT_CLASSIFICATION	2.065327783551946E-6	DESIGN
ATTRIBUTES MAINTAINED BETWEEN FLUSH CYCLES	WITHOUT_CLASSIFICATION	0.9984046694137283	WITHOUT_CLASSIFICATION	0.0015953305862716986	DESIGN
session-start/post-flush persistent state	WITHOUT_CLASSIFICATION	0.9999980715364671	WITHOUT_CLASSIFICATION	1.9284635329162454E-6	DESIGN
allow the CollectionSnapshot to be serialized	WITHOUT_CLASSIFICATION	0.9999061514964783	WITHOUT_CLASSIFICATION	9.384850352165723E-5	DESIGN
ATTRIBUTES USED ONLY DURING FLUSH CYCLE	WITHOUT_CLASSIFICATION	0.9984782833459442	WITHOUT_CLASSIFICATION	0.0015217166540557802	DESIGN
"current" means the reference that was found during flush()	WITHOUT_CLASSIFICATION	0.99999916399187	WITHOUT_CLASSIFICATION	8.360081299079289E-7	DESIGN
"loaded" means the reference that is consistent with the current database state	WITHOUT_CLASSIFICATION	0.9999992934775885	WITHOUT_CLASSIFICATION	7.065224114779064E-7	DESIGN
during flush, we navigate the object graph to collections and decide what to do with them	WITHOUT_CLASSIFICATION	0.9988437948310358	WITHOUT_CLASSIFICATION	0.0011562051689641929	DESIGN
if we instantiate a collection during the flush() process, we must ignore it for the rest of the flush()	WITHOUT_CLASSIFICATION	0.9999992188007646	WITHOUT_CLASSIFICATION	7.811992353926303E-7	DESIGN
new collections that get found + wrapped during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999991929527233	WITHOUT_CLASSIFICATION	8.070472766260734E-7	DESIGN
a newly wrapped collection is NOT dirty (or we get unnecessary version updates)	WITHOUT_CLASSIFICATION	0.9990366822782746	WITHOUT_CLASSIFICATION	9.633177217255138E-4	DESIGN
collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9998636397743293	WITHOUT_CLASSIFICATION	1.3636022567077713E-4	DESIGN
collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9998636397743293	WITHOUT_CLASSIFICATION	1.3636022567077713E-4	DESIGN
detached collections that get found + reattached during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999999222362665	WITHOUT_CLASSIFICATION	7.77637333681201E-8	DESIGN
optimization	WITHOUT_CLASSIFICATION	0.9999988148767195	WITHOUT_CLASSIFICATION	1.185123280583824E-6	DESIGN
optimization optimization	WITHOUT_CLASSIFICATION	0.9999996493283783	WITHOUT_CLASSIFICATION	3.5067162171515326E-7	DESIGN
re-snapshot	WITHOUT_CLASSIFICATION	0.9999573794788921	WITHOUT_CLASSIFICATION	4.262052110793599E-5	DESIGN
for convenience to save some lookups	WITHOUT_CLASSIFICATION	0.9999986138702884	WITHOUT_CLASSIFICATION	1.3861297116262085E-6	DESIGN
NOTE: this is not updated when properties are fetched lazily!	WITHOUT_CLASSIFICATION	0.8046125324225527	WITHOUT_CLASSIFICATION	0.19538746757744718	DESIGN
memory optimization	WITHOUT_CLASSIFICATION	0.9999998506450132	WITHOUT_CLASSIFICATION	1.4935498681578985E-7	DESIGN
use the id value of a newly instantiated instance as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999980466034429	WITHOUT_CLASSIFICATION	1.9533965570412644E-6	DESIGN
copied from Session:	WITHOUT_CLASSIFICATION	0.999973217497179	WITHOUT_CLASSIFICATION	2.6782502820964673E-5	DESIGN
this should not happen since the DTD prevents it	WITHOUT_CLASSIFICATION	0.9998261327109079	WITHOUT_CLASSIFICATION	1.7386728909202898E-4	DESIGN
JoinProcessor needs to know if the where clause fragment came from a dynamic filter or not so it can put the where clause fragment in the right place in the SQL AST. 'hasFilterCondition' keeps track of that fact.	WITHOUT_CLASSIFICATION	0.999928906130694	WITHOUT_CLASSIFICATION	7.109386930594849E-5	DESIGN
the current join represents the join between a many-to-many association table and its "target" table. Here we need to apply any additional filters defined specifically on the many-to-many	WITHOUT_CLASSIFICATION	0.9999990883937501	WITHOUT_CLASSIFICATION	9.116062499675929E-7	DESIGN
check basic level one nullablilty	WITHOUT_CLASSIFICATION	0.9999899259384583	WITHOUT_CLASSIFICATION	1.0074061541865866E-5	DESIGN
values is not null and is checkable, we'll look deeper	WITHOUT_CLASSIFICATION	0.9999901998641447	WITHOUT_CLASSIFICATION	9.80013585524266E-6	DESIGN
for non null args, check for components and elements containing components	WITHOUT_CLASSIFICATION	0.9999860642811086	WITHOUT_CLASSIFICATION	1.3935718891399536E-5	DESIGN
cache the hashcode	WITHOUT_CLASSIFICATION	0.9999468501181585	WITHOUT_CLASSIFICATION	5.314988184150546E-5	DESIGN
persistent collections may have components	WITHOUT_CLASSIFICATION	0.999992758747375	WITHOUT_CLASSIFICATION	7.241252624894876E-6	DESIGN
check for all components values in the collection	WITHOUT_CLASSIFICATION	0.9999993402381889	WITHOUT_CLASSIFICATION	6.597618110071292E-7	DESIGN
will check current level if some of them are not null or sublevels if they exist	WITHOUT_CLASSIFICATION	0.9999985633890908	WITHOUT_CLASSIFICATION	1.4366109091927741E-6	DESIGN
do the test	WITHOUT_CLASSIFICATION	0.9999972882192281	WITHOUT_CLASSIFICATION	2.7117807718100628E-6	DESIGN
if its an uninitialized proxy it can't be transient	WITHOUT_CLASSIFICATION	0.9999997688826353	WITHOUT_CLASSIFICATION	2.3111736464498347E-7	DESIGN
unwrap it	WITHOUT_CLASSIFICATION	0.9999991414395325	WITHOUT_CLASSIFICATION	8.58560467413731E-7	DESIGN
See if the entity is already bound to this session, if not look at the entity identifier and assume that the entity is persistent if the id is not "unsaved" (that is, we rely on foreign keys to keep database integrity)	WITHOUT_CLASSIFICATION	0.9999990018363389	WITHOUT_CLASSIFICATION	9.981636609966917E-7	DESIGN
an unfetched association can only point to an entity that already exists in the db	WITHOUT_CLASSIFICATION	0.9999996462857886	WITHOUT_CLASSIFICATION	3.5371421131697104E-7	DESIGN
let the interceptor inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999963567157456	WITHOUT_CLASSIFICATION	3.643284254406511E-6	DESIGN
let the persister inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999682716339409	WITHOUT_CLASSIFICATION	3.172836605914898E-5	DESIGN
we use the assumed value, if there is one, to avoid hitting the database	WITHOUT_CLASSIFICATION	0.9999999970364216	WITHOUT_CLASSIFICATION	2.9635782820588286E-9	DESIGN
hit the database, after checking the session cache for a snapshot	WITHOUT_CLASSIFICATION	0.9996196209231004	WITHOUT_CLASSIFICATION	3.803790768995292E-4	DESIGN
context-entity-identifier returns null explicitly if the entity is not associated with the persistence context; so make some deeper checks...	WITHOUT_CLASSIFICATION	0.9996413650447215	WITHOUT_CLASSIFICATION	3.586349552785834E-4	DESIGN
int count = 0;	WITHOUT_CLASSIFICATION	0.9999987774696477	WITHOUT_CLASSIFICATION	1.2225303522580602E-6	DESIGN
the first key found after the given key	WITHOUT_CLASSIFICATION	0.9999981406623973	WITHOUT_CLASSIFICATION	1.8593376026194752E-6	DESIGN
checkForEnd = false;	WITHOUT_CLASSIFICATION	0.9999996464344868	WITHOUT_CLASSIFICATION	3.5356551314399956E-7	DESIGN
count++;	WITHOUT_CLASSIFICATION	0.9998569513773106	WITHOUT_CLASSIFICATION	1.4304862268937646E-4	DESIGN
end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.999964066994761	WITHOUT_CLASSIFICATION	3.5933005239051356E-5	DESIGN
we ran out of keys to try	WITHOUT_CLASSIFICATION	0.9999655892086742	WITHOUT_CLASSIFICATION	3.441079132592642E-5	DESIGN
first element of array is reserved for the actual instance we are loading!	WITHOUT_CLASSIFICATION	0.9999998588723057	WITHOUT_CLASSIFICATION	1.4112769430673836E-7	DESIGN
the first id found after the given id	WITHOUT_CLASSIFICATION	0.9999948874408167	WITHOUT_CLASSIFICATION	5.112559183380889E-6	DESIGN
we ran out of ids to try	WITHOUT_CLASSIFICATION	0.999968602745388	WITHOUT_CLASSIFICATION	3.139725461201638E-5	DESIGN
look for existing collection as part of the persistence context	WITHOUT_CLASSIFICATION	0.9999999800288967	WITHOUT_CLASSIFICATION	1.9971103345096427E-8	DESIGN
ignore this row of results! Note the early exit	WITHOUT_CLASSIFICATION	0.9999987065310362	WITHOUT_CLASSIFICATION	1.2934689638423249E-6	DESIGN
initialize this collection	WITHOUT_CLASSIFICATION	0.9999457989272607	WITHOUT_CLASSIFICATION	5.4201072739327126E-5	DESIGN
create one	WITHOUT_CLASSIFICATION	0.9999816506302941	WITHOUT_CLASSIFICATION	1.834936970596352E-5	DESIGN
warning: can cause a recursive calls! (proxy initialization)	WITHOUT_CLASSIFICATION	0.9999856685905703	WITHOUT_CLASSIFICATION	1.4331409429782303E-5	DESIGN
there were no queued additions and the role has a cache	WITHOUT_CLASSIFICATION	0.9999274390526502	WITHOUT_CLASSIFICATION	7.256094734978264E-5	DESIGN
and this is not a forced initialization during flush	WITHOUT_CLASSIFICATION	0.9999984724466793	WITHOUT_CLASSIFICATION	1.527553320681956E-6	DESIGN
some filters affecting the collection are enabled on the session, so do not do the put into the cache.	WITHOUT_CLASSIFICATION	0.9999935451538885	WITHOUT_CLASSIFICATION	6.454846111593675E-6	DESIGN
cleanup code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994597497044835	WITHOUT_CLASSIFICATION	5.402502955164536E-4	DESIGN
loading collection xrefs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995653242743	WITHOUT_CLASSIFICATION	4.346757256796197E-7	DESIGN
Collection load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999890259062686	WITHOUT_CLASSIFICATION	1.0974093731371272E-5	DESIGN
simple cache of param metadata based on query string. Ideally, the original "user-supplied query" string should be used to retreive this metadata (i.e., not the para-list-expanded query string) to avoid unnecessary cache entries. Used solely for caching param metadata for native-sql queries, see getSQLParameterMetadata() for a discussion as to why...	WITHOUT_CLASSIFICATION	0.9750956040409938	WITHOUT_CLASSIFICATION	0.024904395959006183	DESIGN
the cache of the actual plans...	WITHOUT_CLASSIFICATION	0.9999939865000641	WITHOUT_CLASSIFICATION	6.0134999359300265E-6	DESIGN
package	WITHOUT_CLASSIFICATION	0.999727668212874	WITHOUT_CLASSIFICATION	2.7233178712603856E-4	DESIGN
package	WITHOUT_CLASSIFICATION	0.999727668212874	WITHOUT_CLASSIFICATION	2.7233178712603856E-4	DESIGN
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999994742368801	WITHOUT_CLASSIFICATION	5.257631199803678E-7	DESIGN
for native-sql queries, the param metadata is determined outside any relation to a query plan, because query plan creation and/or retreival for a native-sql query depends on all of the return types having been set, which might not be the case up-front when param metadata would be most useful	WITHOUT_CLASSIFICATION	0.9967260084177089	WITHOUT_CLASSIFICATION	0.00327399158229121	DESIGN
don't care...	WITHOUT_CLASSIFICATION	0.9999678243244821	WITHOUT_CLASSIFICATION	3.217567551799944E-5	DESIGN
Recognition code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998075721177369	WITHOUT_CLASSIFICATION	1.9242788226313435E-4	DESIGN
don't care...	WITHOUT_CLASSIFICATION	0.9999678243244821	WITHOUT_CLASSIFICATION	3.217567551799944E-5	DESIGN
NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9999400782281335	WITHOUT_CLASSIFICATION	5.992177186644594E-5	DESIGN
break the outer loop !!!	WITHOUT_CLASSIFICATION	0.9999979441024688	WITHOUT_CLASSIFICATION	2.055897531164768E-6	DESIGN
named parameter	WITHOUT_CLASSIFICATION	0.9999900879410494	WITHOUT_CLASSIFICATION	9.912058950668792E-6	DESIGN
could be either an ordinal or JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9996691427675868	WITHOUT_CLASSIFICATION	3.308572324132365E-4	DESIGN
a peek ahead showed this as an JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999619165971301	WITHOUT_CLASSIFICATION	3.808340287005853E-5	DESIGN
make sure this "name" is an integral	WITHOUT_CLASSIFICATION	0.9999842827718494	WITHOUT_CLASSIFICATION	1.571722815066951E-5	DESIGN
pre-determine and cache the hashcode	WITHOUT_CLASSIFICATION	0.9998697313914469	WITHOUT_CLASSIFICATION	1.3026860855314096E-4	DESIGN
perform the actual work	WITHOUT_CLASSIFICATION	0.999974979627953	WITHOUT_CLASSIFICATION	2.5020372046975155E-5	DESIGN
if everything went ok, commit the transaction and close the obtained connection handle...	WITHOUT_CLASSIFICATION	0.9999992843246353	WITHOUT_CLASSIFICATION	7.156753648158104E-7	DESIGN
at some point the processing went bad, so we need to: 1) make sure the connection handle gets released 2) try to cleanup the JTA context as much as possible	WITHOUT_CLASSIFICATION	0.9997056783533914	WITHOUT_CLASSIFICATION	2.943216466085637E-4	DESIGN
finally handle the exception	WITHOUT_CLASSIFICATION	0.9999912587622565	WITHOUT_CLASSIFICATION	8.741237743502753E-6	DESIGN
a "detached" collection that belonged to a different entity	WITHOUT_CLASSIFICATION	0.9960572014996855	WITHOUT_CLASSIFICATION	0.003942798500314641	DESIGN
saveOrUpdateCopy() is deprecated!	WITHOUT_CLASSIFICATION	0.9999832117895939	WITHOUT_CLASSIFICATION	1.6788210406112773E-5	DESIGN
collectionPersister should not be null, but we don't want to throw an exception if it is null	WITHOUT_CLASSIFICATION	0.9997362881815648	WITHOUT_CLASSIFICATION	2.637118184353029E-4	DESIGN
otherwise a null or brand new collection this will also (inefficiently) handle arrays, which have no snapshot, so we can't do any better processArrayOrNewCollection(collection, type);	WITHOUT_CLASSIFICATION	0.6887497959575368	WITHOUT_CLASSIFICATION	0.31125020404246306	DESIGN
a "detached" collection that originally belonged to the same entity	WITHOUT_CLASSIFICATION	0.9990540171409871	WITHOUT_CLASSIFICATION	9.459828590129326E-4	DESIGN
do nothing	WITHOUT_CLASSIFICATION	0.9999990014194567	WITHOUT_CLASSIFICATION	9.985805433421834E-7	DESIGN
do nothing	WITHOUT_CLASSIFICATION	0.9999990014194567	WITHOUT_CLASSIFICATION	9.985805433421834E-7	DESIGN
Force a substitution!	WITHOUT_CLASSIFICATION	0.9998941787821111	WITHOUT_CLASSIFICATION	1.0582121788899571E-4	DESIGN
The user requested a "greater" (i.e. more restrictive) form of pessimistic lock	WITHOUT_CLASSIFICATION	0.999997802982676	WITHOUT_CLASSIFICATION	2.197017324086121E-6	DESIGN
the database now holds a lock + the object is flushed from the cache, so release the soft lock	WITHOUT_CLASSIFICATION	0.99999997844993	WITHOUT_CLASSIFICATION	2.1550069858530566E-8	DESIGN
now update the object .. has to be outside the main if block above (because of collections)	WITHOUT_CLASSIFICATION	0.9999992918130289	WITHOUT_CLASSIFICATION	7.081869710721081E-7	DESIGN
Search for collections by reachability, updating their role. We don't want to touch collections reachable from a deleted object	WITHOUT_CLASSIFICATION	0.9999586688799488	WITHOUT_CLASSIFICATION	4.133112005130645E-5	DESIGN
this is a situation where the entity id is assigned by a post-insert generator and was saved outside the transaction forcing it to be delayed	WITHOUT_CLASSIFICATION	0.9999986756484992	WITHOUT_CLASSIFICATION	1.3243515007873667E-6	DESIGN
NOTE: we need to do the wrap here even if its not "dirty", because collections need wrapping but changes to _them_ don't dirty the container. Also, for versioned data, we need to wrap before calling searchForDirtyCollections	WITHOUT_CLASSIFICATION	0.9945157595062988	WITHOUT_CLASSIFICATION	0.005484240493701249	DESIGN
grab its state saved at deletion	WITHOUT_CLASSIFICATION	0.999964744539838	WITHOUT_CLASSIFICATION	3.525546016195901E-5	DESIGN
grab its current state	WITHOUT_CLASSIFICATION	0.9999984084204869	WITHOUT_CLASSIFICATION	1.591579512964495E-6	DESIGN
schedule the update note that we intentionally do _not_ pass in currentPersistentState!	WITHOUT_CLASSIFICATION	0.9999999967561168	WITHOUT_CLASSIFICATION	3.2438831509491305E-9	DESIGN
substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999951047455952	WITHOUT_CLASSIFICATION	4.895254404826206E-6	DESIGN
give the Interceptor a chance to process property values, if the properties were modified by the Interceptor, we need to set them back to the object	WITHOUT_CLASSIFICATION	0.9999884377233744	WITHOUT_CLASSIFICATION	1.1562276625572558E-5	DESIGN
compare to cached state (ignoring collections unless versioned)	WITHOUT_CLASSIFICATION	0.9999996931067257	WITHOUT_CLASSIFICATION	3.0689327433342704E-7	DESIGN
if it was dirtied by a collection only	WITHOUT_CLASSIFICATION	0.9999982425252396	WITHOUT_CLASSIFICATION	1.7574747604209259E-6	DESIGN
increment the version number (if necessary)	WITHOUT_CLASSIFICATION	0.9999104565235335	WITHOUT_CLASSIFICATION	8.954347646644599E-5	DESIGN
check nullability but do not perform command execute we'll use scheduled updates for that.	WITHOUT_CLASSIFICATION	0.9999992980063879	WITHOUT_CLASSIFICATION	7.01993612122526E-7	DESIGN
give the Interceptor a chance to modify property values	WITHOUT_CLASSIFICATION	0.9997260304746274	WITHOUT_CLASSIFICATION	2.7396952537256635E-4	DESIGN
now we might need to recalculate the dirtyProperties array	WITHOUT_CLASSIFICATION	0.9881036627904549	WITHOUT_CLASSIFICATION	0.011896337209545107	DESIGN
use the current version	WITHOUT_CLASSIFICATION	0.9999973416952568	WITHOUT_CLASSIFICATION	2.6583047432605634E-6	DESIGN
Interceptor returned null, so do the dirtycheck ourself, if possible	WITHOUT_CLASSIFICATION	0.9999987644593371	WITHOUT_CLASSIFICATION	1.2355406629429586E-6	DESIGN
object loaded by update()	WITHOUT_CLASSIFICATION	0.9999998796462587	WITHOUT_CLASSIFICATION	1.2035374119915638E-7	DESIGN
dirty check against the usual snapshot of the entity	WITHOUT_CLASSIFICATION	0.9999987277703465	WITHOUT_CLASSIFICATION	1.2722296535280092E-6	DESIGN
dirty check against the database snapshot, if possible/necessary	WITHOUT_CLASSIFICATION	0.9999813211052597	WITHOUT_CLASSIFICATION	1.8678894740361672E-5	DESIGN
the Interceptor handled the dirty checking	WITHOUT_CLASSIFICATION	0.9999969792949323	WITHOUT_CLASSIFICATION	3.0207050676848033E-6	DESIGN
even process null collections	WITHOUT_CLASSIFICATION	0.9999799312072454	WITHOUT_CLASSIFICATION	2.0068792754619923E-5	DESIGN
get the id from the object	WITHOUT_CLASSIFICATION	0.9999977998054241	WITHOUT_CLASSIFICATION	2.2001945759077547E-6	DESIGN
always do an INSERT, and let it fail by constraint violation	WITHOUT_CLASSIFICATION	0.9999984662598315	WITHOUT_CLASSIFICATION	1.5337401684382665E-6	DESIGN
what is the version on the database?	WITHOUT_CLASSIFICATION	0.999142045846944	WITHOUT_CLASSIFICATION	8.579541530559789E-4	DESIGN
/ HHH-2378	WITHOUT_CLASSIFICATION	0.999989420701963	WITHOUT_CLASSIFICATION	1.057929803698576E-5	DESIGN
will result in a SQL UPDATE:	WITHOUT_CLASSIFICATION	0.9999854925408017	WITHOUT_CLASSIFICATION	1.4507459198132142E-5	DESIGN
else do nothing (don't even reassociate object!)	WITHOUT_CLASSIFICATION	0.9999820791356564	WITHOUT_CLASSIFICATION	1.792086434359166E-5	DESIGN
no existing row - do an insert	WITHOUT_CLASSIFICATION	0.9996979135185967	WITHOUT_CLASSIFICATION	3.020864814032457E-4	DESIGN
refresh() does not pass an entityName	WITHOUT_CLASSIFICATION	0.999996850695436	WITHOUT_CLASSIFICATION	3.1493045639706284E-6	DESIGN
do not return a proxy! (this option indicates we are initializing a proxy)	WITHOUT_CLASSIFICATION	0.999991629651051	WITHOUT_CLASSIFICATION	8.370348948922262E-6	DESIGN
return a proxy if appropriate	WITHOUT_CLASSIFICATION	0.9996509854397226	WITHOUT_CLASSIFICATION	3.490145602773065E-4	DESIGN
return existing object or initialized proxy (unless deleted)	WITHOUT_CLASSIFICATION	0.9999999000747819	WITHOUT_CLASSIFICATION	9.992521813481146E-8	DESIGN
return new uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999988619441841	WITHOUT_CLASSIFICATION	1.1380558160043057E-6	DESIGN
this object was already loaded	WITHOUT_CLASSIFICATION	0.9999800011154854	WITHOUT_CLASSIFICATION	1.999888451467115E-5	DESIGN
Entity was found in second-level cache...	WITHOUT_CLASSIFICATION	0.9999451211407397	WITHOUT_CLASSIFICATION	5.487885926029125E-5	DESIGN
make it circular-reference safe	WITHOUT_CLASSIFICATION	0.9999996937341613	WITHOUT_CLASSIFICATION	3.062658387026739E-7	DESIGN
intializes result by side-effect	WITHOUT_CLASSIFICATION	0.9999999319220542	WITHOUT_CLASSIFICATION	6.807794587539874E-8	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Pre-flushing section ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999766825632274	WITHOUT_CLASSIFICATION	2.3317436772647388E-5	DESIGN
some statistics	WITHOUT_CLASSIFICATION	0.9999989167001004	WITHOUT_CLASSIFICATION	1.083299899544066E-6	DESIGN
safe from concurrent modification because of how entryList() is implemented on IdentityMap	WITHOUT_CLASSIFICATION	0.9999929304817046	WITHOUT_CLASSIFICATION	7.069518295520332E-6	DESIGN
Initialize dirty flags for arrays + collections with composite elements and reset reached, doupdate, etc.	WITHOUT_CLASSIFICATION	0.9999999999884417	WITHOUT_CLASSIFICATION	1.1558362208907631E-11	DESIGN
Among other things, updateReachables() will recursively load all collections that are moving roles. This might cause entities to be loaded.	WITHOUT_CLASSIFICATION	0.9998796365758352	WITHOUT_CLASSIFICATION	1.2036342416472342E-4	DESIGN
So this needs to be safe from concurrent modification problems. It is safe because of how IdentityMap implements entrySet()	WITHOUT_CLASSIFICATION	0.7453368114934318	DESIGN	0.2546631885065683	WITHOUT_CLASSIFICATION
Update the status of the object and if necessary, schedule an update	WITHOUT_CLASSIFICATION	0.9999998030899553	WITHOUT_CLASSIFICATION	1.969100446834362E-7	DESIGN
Schedule updates to collections:	WITHOUT_CLASSIFICATION	0.9999994144778914	WITHOUT_CLASSIFICATION	5.855221085602753E-7	DESIGN
we need to lock the collection caches before executing entity inserts/updates in order to account for bidi associations	WITHOUT_CLASSIFICATION	0.9999653762463191	WITHOUT_CLASSIFICATION	3.462375368086621E-5	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Post-flushing section ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999872114446918	WITHOUT_CLASSIFICATION	1.2788555308058798E-5	DESIGN
the database has changed now, so the subselect results need to be invalidated	WITHOUT_CLASSIFICATION	0.9999979142190746	WITHOUT_CLASSIFICATION	2.0857809253224677E-6	DESIGN
if the collection is dereferenced, remove from the session cache iter.remove(); does not work, since the entrySet is not backed by the set	WITHOUT_CLASSIFICATION	0.9999998204810221	WITHOUT_CLASSIFICATION	1.7951897790230775E-7	DESIGN
otherwise recreate the mapping between the collection and its key	WITHOUT_CLASSIFICATION	0.9996782731354161	WITHOUT_CLASSIFICATION	3.2172686458382623E-4	DESIGN
get a snapshot	WITHOUT_CLASSIFICATION	0.9999863376996392	WITHOUT_CLASSIFICATION	1.3662300360858109E-5	DESIGN
package-private	WITHOUT_CLASSIFICATION	0.9999410269754276	WITHOUT_CLASSIFICATION	5.897302457233572E-5	DESIGN
package-private	WITHOUT_CLASSIFICATION	0.9999410269754276	WITHOUT_CLASSIFICATION	5.897302457233572E-5	DESIGN
key is an entity involved with the operation performed by the listener; value is a flag indicating if the listener explicitly operates on the entity	WITHOUT_CLASSIFICATION	0.9999999980304697	WITHOUT_CLASSIFICATION	1.969530221312752E-9	DESIGN
EARLY EXIT!!!	WITHOUT_CLASSIFICATION	0.9999960856175677	WITHOUT_CLASSIFICATION	3.914382432302475E-6	DESIGN
ie. the entity came in from update()	WITHOUT_CLASSIFICATION	0.9999937665322504	WITHOUT_CLASSIFICATION	6.233467749631077E-6	DESIGN
before any callbacks, etc, so subdeletions see that this deletion happened first	WITHOUT_CLASSIFICATION	0.999955056000856	WITHOUT_CLASSIFICATION	4.4943999144075364E-5	DESIGN
Ensures that containing deletions happen before sub-deletions	WITHOUT_CLASSIFICATION	0.9999986000857923	WITHOUT_CLASSIFICATION	1.3999142077204141E-6	DESIGN
TypeFactory.deepCopy( currentState, propTypes, persister.getPropertyUpdateability(), deletedState, session );	WITHOUT_CLASSIFICATION	0.9999998062450799	WITHOUT_CLASSIFICATION	1.937549201618414E-7	DESIGN
cascade-delete to collections BEFORE the collection owner is deleted	WITHOUT_CLASSIFICATION	0.9999937646006746	WITHOUT_CLASSIFICATION	6.235399325456972E-6	DESIGN
cascade-delete to many-to-one AFTER the parent was deleted	WITHOUT_CLASSIFICATION	0.9999465202499499	WITHOUT_CLASSIFICATION	5.347975005021996E-5	DESIGN
if it is an initialized proxy, let cascade handle it later on	WITHOUT_CLASSIFICATION	0.9999865947040751	WITHOUT_CLASSIFICATION	1.3405295924868802E-5	DESIGN
assign the requested id to the proxy, before reassociating the proxy	WITHOUT_CLASSIFICATION	0.9999811003642038	WITHOUT_CLASSIFICATION	1.8899635796137933E-5	DESIGN
an uninitialized proxy, noop, don't even need to return an id, since it is never a save()	WITHOUT_CLASSIFICATION	0.9999999097255413	WITHOUT_CLASSIFICATION	9.02744587134618E-8	DESIGN
initialize properties of the event:	WITHOUT_CLASSIFICATION	0.9999995968670173	WITHOUT_CLASSIFICATION	4.031329826960784E-7	DESIGN
return the id in the event object	WITHOUT_CLASSIFICATION	0.9999904497863105	WITHOUT_CLASSIFICATION	9.550213689579744E-6	DESIGN
TRANSIENT or DELETED	WITHOUT_CLASSIFICATION	0.9999982170055848	WITHOUT_CLASSIFICATION	1.782994415144295E-6	DESIGN
use the id assigned to the instance	WITHOUT_CLASSIFICATION	0.9999979908166162	WITHOUT_CLASSIFICATION	2.0091833837000504E-6	DESIGN
assume this is a newly instantiated transient object which should be saved rather than updated	WITHOUT_CLASSIFICATION	0.5519924193235343	WITHOUT_CLASSIFICATION	0.44800758067646573	DESIGN
this is a transient object with existing persistent state not loaded by the session	WITHOUT_CLASSIFICATION	0.9999416287704792	WITHOUT_CLASSIFICATION	5.837122952087142E-5	DESIGN
a collection loaded in the current session can not possibly be the collection belonging to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999998522919974	WITHOUT_CLASSIFICATION	1.477080026093175E-7	DESIGN
cachedState,	WITHOUT_CLASSIFICATION	0.9999871894182377	WITHOUT_CLASSIFICATION	1.2810581762235554E-5	DESIGN
assume true, since we don't really know, and it doesn't matter	WITHOUT_CLASSIFICATION	0.9999966069776361	WITHOUT_CLASSIFICATION	3.393022363763357E-6	DESIGN
a "detached" collection!	WITHOUT_CLASSIFICATION	0.9995792776166192	WITHOUT_CLASSIFICATION	4.207223833808117E-4	DESIGN
if the collection belonged to a different entity, clean up the existing state of the collection	WITHOUT_CLASSIFICATION	0.9999919216466545	WITHOUT_CLASSIFICATION	8.078353345460916E-6	DESIGN
log.debug( "calling onLoad()" );	WITHOUT_CLASSIFICATION	0.9999982425879405	WITHOUT_CLASSIFICATION	1.7574120595959064E-6	DESIGN
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.999998359817631	WITHOUT_CLASSIFICATION	1.640182369077347E-6	DESIGN
note: performExecutions() clears all collectionXxxxtion collections (the collection actions) in the session	WITHOUT_CLASSIFICATION	0.9947273961011818	WITHOUT_CLASSIFICATION	0.005272603898818168	DESIGN
if no array holder we found an unwrappered array (this can't occur, because we now always call wrap() before getting to here) return (ah==null) ? true : searchForDirtyCollections(ah, type);	WITHOUT_CLASSIFICATION	0.9820269590869879	WITHOUT_CLASSIFICATION	0.017973040913012134	DESIGN
if not wrappered yet, its dirty (this can't occur, because we now always call wrap() before getting to here) return ( ! (obj instanceof PersistentCollection) ) ? true : searchForDirtyCollections( (PersistentCollection) obj, type );	WITHOUT_CLASSIFICATION	0.9938423352528577	DESIGN	0.006157664747142282	WITHOUT_CLASSIFICATION
we need to check even if it was not initialized, because of delayed adds!	WITHOUT_CLASSIFICATION	0.9999858095597748	WITHOUT_CLASSIFICATION	1.4190440225139535E-5	DESIGN
NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999820785402235	WITHOUT_CLASSIFICATION	1.7921459776540415E-5	DESIGN
find any entities that are still transient after retry	WITHOUT_CLASSIFICATION	0.9998489649267476	WITHOUT_CLASSIFICATION	1.5103507325233697E-4	DESIGN
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.999998359817631	WITHOUT_CLASSIFICATION	1.640182369077347E-6	DESIGN
Check the persistence context for an entry relating to this entity to be merged...	WITHOUT_CLASSIFICATION	0.9998967213893311	WITHOUT_CLASSIFICATION	1.0327861066901978E-4	DESIGN
we have specialized case of a detached entity from the perspective of the merge operation. Specifically, we have an incoming entity instance which has a corresponding entry in the current persistence context, but registered under a different entity instance	WITHOUT_CLASSIFICATION	0.999998139232239	WITHOUT_CLASSIFICATION	1.8607677610312925E-6	DESIGN
DELETED	WITHOUT_CLASSIFICATION	0.999896905360721	WITHOUT_CLASSIFICATION	1.0309463927900564E-4	DESIGN
before cascade!	WITHOUT_CLASSIFICATION	0.9999948711258234	WITHOUT_CLASSIFICATION	5.1288741765990205E-6	DESIGN
cascade first, so that all unsaved objects get their copy created before we actually copy cascadeOnMerge(event, persister, entity, copyCache, Cascades.CASCADE_BEFORE_MERGE);	WITHOUT_CLASSIFICATION	0.9999986288419289	WITHOUT_CLASSIFICATION	1.3711580710874919E-6	DESIGN
this bit is only really absolutely necessary for handling requestedId, but is also good if we merge multiple object graphs, since it helps ensure uniqueness	WITHOUT_CLASSIFICATION	0.8241482849836136	DESIGN	0.17585171501638647	WITHOUT_CLASSIFICATION
continue...; we'll find out if it ends up not getting saved later	WITHOUT_CLASSIFICATION	0.9894423402056036	WITHOUT_CLASSIFICATION	0.010557659794396339	DESIGN
cascade first, so that all unsaved objects get their copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999652571773985	WITHOUT_CLASSIFICATION	3.4742822601404725E-5	DESIGN
check that entity id = requestedId	WITHOUT_CLASSIFICATION	0.99999923647147	WITHOUT_CLASSIFICATION	7.635285299318178E-7	DESIGN
before cascade!	WITHOUT_CLASSIFICATION	0.9999948711258234	WITHOUT_CLASSIFICATION	5.1288741765990205E-6	DESIGN
we got here because we assumed that an instance with an assigned id was detached, when it was really persistent	WITHOUT_CLASSIFICATION	0.999998750582257	WITHOUT_CLASSIFICATION	1.249417743035304E-6	DESIGN
cascade first, so that all unsaved objects get their copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999652571773985	WITHOUT_CLASSIFICATION	3.4742822601404725E-5	DESIGN
copyValues works by reflection, so explicitly mark the entity instance dirty	WITHOUT_CLASSIFICATION	0.9999836837496348	WITHOUT_CLASSIFICATION	1.6316250365292118E-5	DESIGN
EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999945146029136	WITHOUT_CLASSIFICATION	5.4853970863463025E-6	DESIGN
source.getBatcher().executeBatch(); found another way to ensure that all batched joined inserts have been executed	WITHOUT_CLASSIFICATION	0.9999938973383399	WITHOUT_CLASSIFICATION	6.102661660074044E-6	DESIGN
substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999951047455952	WITHOUT_CLASSIFICATION	4.895254404826206E-6	DESIGN
now done in EntityIdentityInsertAction persister.setIdentifier( entity, id, source.getEntityMode() );	WITHOUT_CLASSIFICATION	0.9999997210750002	WITHOUT_CLASSIFICATION	2.7892499980779916E-7	DESIGN
source.getPersistenceContext().removeNonExist( new EntityKey( id, persister, source.getEntityMode() ) );	WITHOUT_CLASSIFICATION	0.9999932219279163	WITHOUT_CLASSIFICATION	6.778072083675344E-6	DESIGN
keep the existing version number in the case of replicate!	WITHOUT_CLASSIFICATION	0.9999992856327167	WITHOUT_CLASSIFICATION	7.143672833317673E-7	DESIGN
cascade-save to many-to-one BEFORE the parent is saved	WITHOUT_CLASSIFICATION	0.9976405580446016	WITHOUT_CLASSIFICATION	0.002359441955398425	DESIGN
pass this as an argument only to avoid double looking	WITHOUT_CLASSIFICATION	0.9999999797748937	WITHOUT_CLASSIFICATION	2.022510631944834E-8	DESIGN
the object is persistent	WITHOUT_CLASSIFICATION	0.9999590724403309	WITHOUT_CLASSIFICATION	4.0927559669040844E-5	DESIGN
the entity is associated with the session, so check its status	WITHOUT_CLASSIFICATION	0.9999913165427304	WITHOUT_CLASSIFICATION	8.683457269559618E-6	DESIGN
do nothing for persistent instances	WITHOUT_CLASSIFICATION	0.9999982936660335	WITHOUT_CLASSIFICATION	1.7063339664856318E-6	DESIGN
ie. e.status==DELETED	WITHOUT_CLASSIFICATION	0.999995609312675	WITHOUT_CLASSIFICATION	4.390687325039125E-6	DESIGN
the object is transient or detached	WITHOUT_CLASSIFICATION	0.9999272993748506	WITHOUT_CLASSIFICATION	7.270062514943206E-5	DESIGN
NOTE EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999983098503324	WITHOUT_CLASSIFICATION	1.6901496675936555E-6	DESIGN
Private constructor - stops checkstyle from complaining.	WITHOUT_CLASSIFICATION	0.9998596831369541	WITHOUT_CLASSIFICATION	1.4031686304600055E-4	DESIGN
First, try to find a matching constructor accepting a ViolatedConstraintNameExtracter param...	WITHOUT_CLASSIFICATION	0.9999990778467055	WITHOUT_CLASSIFICATION	9.221532944453612E-7	DESIGN
eat it and try next	WITHOUT_CLASSIFICATION	0.9999913162319418	WITHOUT_CLASSIFICATION	8.683768058112165E-6	DESIGN
Otherwise, try to use the no-arg constructor	WITHOUT_CLASSIFICATION	0.9999998804242085	WITHOUT_CLASSIFICATION	1.1957579146741017E-7	DESIGN
oracle sql-state code for deadlock	WITHOUT_CLASSIFICATION	0.9998970955181316	WITHOUT_CLASSIFICATION	1.0290448186854192E-4	DESIGN
CollectionPropertyMapping processes everything except 'index'.	WITHOUT_CLASSIFICATION	0.9999864945328051	WITHOUT_CLASSIFICATION	1.3505467194933578E-5	DESIGN
remove initial ", "	WITHOUT_CLASSIFICATION	0.9999967490310271	WITHOUT_CLASSIFICATION	3.2509689728906475E-6	DESIGN
remove initial " and "	WITHOUT_CLASSIFICATION	0.9999572453827328	WITHOUT_CLASSIFICATION	4.2754617267245704E-5	DESIGN
beforeClassTokens.add("new"); DEFINITELY DON'T HAVE THIS!!	WITHOUT_CLASSIFICATION	0.9999411995412588	WITHOUT_CLASSIFICATION	5.880045874125938E-5	DESIGN
notAfterClassTokens.add(",");	WITHOUT_CLASSIFICATION	0.9999866970252236	WITHOUT_CLASSIFICATION	1.3302974776293831E-5	DESIGN
just especially for the trivial collection filter	WITHOUT_CLASSIFICATION	0.9999999216548608	WITHOUT_CLASSIFICATION	7.8345139165356E-8	DESIGN
update last non-whitespace token, if necessary	WITHOUT_CLASSIFICATION	0.9999999507561316	WITHOUT_CLASSIFICATION	4.924386843131868E-8	DESIGN
select-range is terminated by declaration of "from"	WITHOUT_CLASSIFICATION	0.9999909890303307	WITHOUT_CLASSIFICATION	9.010969669365145E-6	DESIGN
scan for next non-whitespace token	WITHOUT_CLASSIFICATION	0.9999998883120957	WITHOUT_CLASSIFICATION	1.11687904265704E-7	DESIGN
Note this!!	WITHOUT_CLASSIFICATION	0.9996534754243822	WITHOUT_CLASSIFICATION	3.4652457561781054E-4	DESIGN
Error message constants.	WITHOUT_CLASSIFICATION	0.9999848054061979	WITHOUT_CLASSIFICATION	1.5194593802034484E-5	DESIGN
handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999983332345944	WITHOUT_CLASSIFICATION	1.6667654056424536E-6	DESIGN
semantic action handling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9721615265926534	WITHOUT_CLASSIFICATION	0.027838473407346544	DESIGN
Handle collection-fiter compilation. IMPORTANT NOTE: This is modifying the INPUT (HQL) tree, not the output tree!	WITHOUT_CLASSIFICATION	0.9723139197295982	WITHOUT_CLASSIFICATION	0.027686080270401776	DESIGN
Show the modified AST.	WITHOUT_CLASSIFICATION	0.9999810101413671	WITHOUT_CLASSIFICATION	1.8989858632963284E-5	DESIGN
Create a parameter specification for the collection filter...	WITHOUT_CLASSIFICATION	0.9999162557353617	WITHOUT_CLASSIFICATION	8.374426463826245E-5	DESIGN
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999995074967647	WITHOUT_CLASSIFICATION	4.925032353224667E-7	DESIGN
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999995074967647	WITHOUT_CLASSIFICATION	4.925032353224667E-7	DESIGN
Get the names of the columns used to link between the collection owner and the collection elements.	WITHOUT_CLASSIFICATION	0.999985506071841	WITHOUT_CLASSIFICATION	1.4493928159050069E-5	DESIGN
The path AST should be a DotNode, and it should have been evaluated already.	WITHOUT_CLASSIFICATION	0.9916054440521452	WITHOUT_CLASSIFICATION	0.008394555947854722	DESIGN
Tell the dot node about the join type.	WITHOUT_CLASSIFICATION	0.9999991426573612	WITHOUT_CLASSIFICATION	8.573426387971334E-7	DESIGN
Re-arrange the tree so that the collection function is the root and the lhs is the path.	WITHOUT_CLASSIFICATION	0.9999854394370907	WITHOUT_CLASSIFICATION	1.4560562909258481E-5	DESIGN
Don't forget to resolve the argument! Resolve the collection function now.	WITHOUT_CLASSIFICATION	0.9999996461205516	WITHOUT_CLASSIFICATION	3.538794484256955E-7	DESIGN
Resolve everything up to this dot, but don't resolve the placeholders yet.	WITHOUT_CLASSIFICATION	0.9804735677624099	WITHOUT_CLASSIFICATION	0.019526432237590118	DESIGN
Should mean that no such property was found	WITHOUT_CLASSIFICATION	0.9999004772779811	WITHOUT_CLASSIFICATION	9.952272201893908E-5	DESIGN
Was there an explicit select expression?	WITHOUT_CLASSIFICATION	0.9998921497687228	WITHOUT_CLASSIFICATION	1.0785023127722208E-4	DESIGN
Attach any mapping-defined "ORDER BY" fragments	WITHOUT_CLASSIFICATION	0.9999783672771055	WITHOUT_CLASSIFICATION	2.163272289438637E-5	DESIGN
Use the explicitly declared select expression; determine the return types indicated by each select token	WITHOUT_CLASSIFICATION	0.999981011964282	WITHOUT_CLASSIFICATION	1.898803571808887E-5	DESIGN
After that, process the JOINs. Invoke a delegate to do the work, as this is farily complex.	WITHOUT_CLASSIFICATION	0.9999867155064593	WITHOUT_CLASSIFICATION	1.3284493540582567E-5	DESIGN
Make #@%$^#^&# sure no alias is applied to the table name	WITHOUT_CLASSIFICATION	0.9999754953108091	WITHOUT_CLASSIFICATION	2.4504689190889685E-5	DESIGN
We need to generate ids as part of this bulk insert. Note that this is only supported for sequence-style generators and post-insert-style generators; basically, only in-db generators	WITHOUT_CLASSIFICATION	0.9999947379241583	WITHOUT_CLASSIFICATION	5.262075841712821E-6	DESIGN
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999995074967647	WITHOUT_CLASSIFICATION	4.925032353224667E-7	DESIGN
We need to seed the version value as part of this bulk insert	WITHOUT_CLASSIFICATION	0.9999978285179827	WITHOUT_CLASSIFICATION	2.1714820174056832E-6	DESIGN
we need to wrtap the param in a cast()	WITHOUT_CLASSIFICATION	0.997532334414485	WITHOUT_CLASSIFICATION	0.002467665585515043	DESIGN
This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.999913980862278	WITHOUT_CLASSIFICATION	8.601913772205639E-5	DESIGN
Generate implicit joins, only if necessary.	WITHOUT_CLASSIFICATION	0.9999846676587225	WITHOUT_CLASSIFICATION	1.533234127750276E-5	DESIGN
Notify the FROM element that it is being referenced by the select.	WITHOUT_CLASSIFICATION	0.9999928391207582	WITHOUT_CLASSIFICATION	7.160879241846546E-6	DESIGN
Turn off includeSubclasses on all FromElements.	WITHOUT_CLASSIFICATION	0.9998907758730613	WITHOUT_CLASSIFICATION	1.0922412693869332E-4	DESIGN
create the node initially with the param name so that it shows appropriately in the "original text" attribute	WITHOUT_CLASSIFICATION	0.999788888957594	WITHOUT_CLASSIFICATION	2.1111104240604414E-4	DESIGN
Use the delegate, resolve identifiers as FROM element aliases.	WITHOUT_CLASSIFICATION	0.9999998314454533	WITHOUT_CLASSIFICATION	1.6855454666992464E-7	DESIGN
select clauses for insert statements should alwasy be treated as shallow	WITHOUT_CLASSIFICATION	0.999995859347887	WITHOUT_CLASSIFICATION	4.140652112959862E-6	DESIGN
no need to even collect this information if the persister is considered multi-table	WITHOUT_CLASSIFICATION	0.999558590820148	WITHOUT_CLASSIFICATION	4.414091798519514E-4	DESIGN
Make sure that the persister is versioned	WITHOUT_CLASSIFICATION	0.999979156853213	WITHOUT_CLASSIFICATION	2.0843146786952727E-5	DESIGN
handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999983332345944	WITHOUT_CLASSIFICATION	1.6667654056424536E-6	DESIGN
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999995074967647	WITHOUT_CLASSIFICATION	4.925032353224667E-7	DESIGN
--Commented out by Inspection (12/11/04 10:56 AM): int getWarningCount();	WITHOUT_CLASSIFICATION	0.9999971891224564	WITHOUT_CLASSIFICATION	2.8108775436126102E-6	DESIGN
Alias references and identifiers use the same node class.	WITHOUT_CLASSIFICATION	0.9999998377522046	WITHOUT_CLASSIFICATION	1.6224779539474026E-7	DESIGN
switch	WITHOUT_CLASSIFICATION	0.9999912625072396	WITHOUT_CLASSIFICATION	8.737492760466734E-6	DESIGN
make a new one	WITHOUT_CLASSIFICATION	0.9999610813881216	WITHOUT_CLASSIFICATION	3.891861187844004E-5	DESIGN
just do the regular thing if you can't find the ctor Your AST must have default ctor to use this.	WITHOUT_CLASSIFICATION	0.9929466107547702	WITHOUT_CLASSIFICATION	0.0070533892452298245	DESIGN
Initialize SQL nodes here.	WITHOUT_CLASSIFICATION	0.9999995388618688	WITHOUT_CLASSIFICATION	4.611381311865513E-7	DESIGN
semantic action processing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9974377671125054	WITHOUT_CLASSIFICATION	0.0025622328874945807	DESIGN
if template is null we just write the function out as it appears in the hql statement	WITHOUT_CLASSIFICATION	0.9999997316114593	WITHOUT_CLASSIFICATION	2.6838854075953527E-7	DESIGN
this function has a template -> redirect output and catch the arguments	WITHOUT_CLASSIFICATION	0.9999999113113223	WITHOUT_CLASSIFICATION	8.868867767252439E-8	DESIGN
--- Inner classes (moved here from sql-gen.g) ---	WITHOUT_CLASSIFICATION	0.9999571797669051	WITHOUT_CLASSIFICATION	4.2820233094772854E-5	DESIGN
check two "adjecent" nodes at the top of the from-clause tree	WITHOUT_CLASSIFICATION	0.9999996339169165	WITHOUT_CLASSIFICATION	3.660830834601446E-7	DESIGN
/	WITHOUT_CLASSIFICATION	0.9998642377194608	WITHOUT_CLASSIFICATION	1.3576228053929797E-4	DESIGN
these are just two unrelated table references	WITHOUT_CLASSIFICATION	0.999996958289777	WITHOUT_CLASSIFICATION	3.041710223044243E-6	DESIGN
again, both should be FromElements	WITHOUT_CLASSIFICATION	0.9997920189396825	WITHOUT_CLASSIFICATION	2.0798106031744956E-4	DESIGN
NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9999400782281335	WITHOUT_CLASSIFICATION	5.992177186644594E-5	DESIGN
right represents a joins originating from left; or both right and left reprersent joins originating from the same FromElement	WITHOUT_CLASSIFICATION	0.9999987547459166	WITHOUT_CLASSIFICATION	1.245254083352231E-6	DESIGN
check a set of parent/child nodes in the from-clause tree to determine if a comma is required between them	WITHOUT_CLASSIFICATION	0.999999710558937	WITHOUT_CLASSIFICATION	2.894410629591638E-7	DESIGN
right represents a joins originating from left...	WITHOUT_CLASSIFICATION	0.9999995365397152	WITHOUT_CLASSIFICATION	4.6346028485429315E-7	DESIGN
all clear	WITHOUT_CLASSIFICATION	0.9999958080184373	WITHOUT_CLASSIFICATION	4.191981562664708E-6	DESIGN
Ignore the token class name parameter, and use a specific token class.	WITHOUT_CLASSIFICATION	0.9999986210103129	WITHOUT_CLASSIFICATION	1.3789896870966588E-6	DESIGN
overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9997593771797669	WITHOUT_CLASSIFICATION	2.4062282023300284E-4	DESIGN
overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9997593771797669	WITHOUT_CLASSIFICATION	2.4062282023300284E-4	DESIGN
remember that ordinal parameters numbers are 1-based!!!	WITHOUT_CLASSIFICATION	0.9951823241190255	WITHOUT_CLASSIFICATION	0.004817675880974552	DESIGN
don't care about other param types here, just those explicitly user-defined...	WITHOUT_CLASSIFICATION	0.9989064624801004	WITHOUT_CLASSIFICATION	0.0010935375198995335	DESIGN
If the query is already compiled, skip the compilation.	WITHOUT_CLASSIFICATION	0.9999971946982417	WITHOUT_CLASSIFICATION	2.805301758394046E-6	DESIGN
Remember the parameters for the compilation.	WITHOUT_CLASSIFICATION	0.9998397522661691	WITHOUT_CLASSIFICATION	1.602477338309071E-4	DESIGN
PHASE 1 : Parse the HQL into an AST.	WITHOUT_CLASSIFICATION	0.9997144553051663	WITHOUT_CLASSIFICATION	2.855446948336284E-4	DESIGN
PHASE 2 : Analyze the HQL AST, and produce an SQL AST.	WITHOUT_CLASSIFICATION	0.9999809519422092	WITHOUT_CLASSIFICATION	1.9048057790826115E-5	DESIGN
PHASE 3 : Generate the SQL.	WITHOUT_CLASSIFICATION	0.9784948704443962	WITHOUT_CLASSIFICATION	0.021505129555603818	DESIGN
we do not actually propogate ANTLRExceptions as a cause, so log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9999999526681294	WITHOUT_CLASSIFICATION	4.7331870615156224E-8	DESIGN
we do not actually propogate ANTLRExceptions as a cause, so log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9999999526681294	WITHOUT_CLASSIFICATION	4.7331870615156224E-8	DESIGN
only needed during compilation phase...	WITHOUT_CLASSIFICATION	0.9999962383566582	WITHOUT_CLASSIFICATION	3.76164334184477E-6	DESIGN
Transform the tree.	WITHOUT_CLASSIFICATION	0.9999973649837718	WITHOUT_CLASSIFICATION	2.6350162282716733E-6	DESIGN
Parse the query string into an HQL AST.	WITHOUT_CLASSIFICATION	0.9999604079607185	WITHOUT_CLASSIFICATION	3.9592039281434655E-5	DESIGN
Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9997009822725185	WITHOUT_CLASSIFICATION	2.9901772748144694E-4	DESIGN
Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9997009822725185	WITHOUT_CLASSIFICATION	2.9901772748144694E-4	DESIGN
Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9997009822725185	WITHOUT_CLASSIFICATION	2.9901772748144694E-4	DESIGN
NOTE : ( max - 1 ) because first is zero-based while max is not...	WITHOUT_CLASSIFICATION	0.999995368165482	WITHOUT_CLASSIFICATION	4.6318345179797385E-6	DESIGN
-- Package local methods for the QueryLoader delegate --	WITHOUT_CLASSIFICATION	0.9985570539582974	WITHOUT_CLASSIFICATION	0.0014429460417026542	DESIGN
If there are no collection fetches, then no further checks are needed	WITHOUT_CLASSIFICATION	0.9999999762409615	WITHOUT_CLASSIFICATION	2.3759038501555932E-8	DESIGN
A shallow query is ok (although technically there should be no fetching here...)	WITHOUT_CLASSIFICATION	0.999975890276143	WITHOUT_CLASSIFICATION	2.4109723857092636E-5	DESIGN
should be the first, but just to be safe...	WITHOUT_CLASSIFICATION	0.9999832470345901	WITHOUT_CLASSIFICATION	1.6752965409873136E-5	DESIGN
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999995074967647	WITHOUT_CLASSIFICATION	4.925032353224667E-7	DESIGN
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999995074967647	WITHOUT_CLASSIFICATION	4.925032353224667E-7	DESIGN
Impl Note: allows multiple collection fetches as long as the entire fecthed graph still "points back" to a single root entity for return	WITHOUT_CLASSIFICATION	0.9998860376593286	WITHOUT_CLASSIFICATION	1.1396234067150232E-4	DESIGN
Otherwise, we have a non-scalar select with defined collection fetch(es). Make sure that there is only a single root entity in the return (no tuples)	WITHOUT_CLASSIFICATION	0.9999987135020427	WITHOUT_CLASSIFICATION	1.2864979572791835E-6	DESIGN
This is not strictly true. We actually just need to make sure that it is ordered by root-entity PK and that that order-by comes before any non-root-entity ordering...	WITHOUT_CLASSIFICATION	0.998850077732879	WITHOUT_CLASSIFICATION	0.0011499222671210235	DESIGN
paramTranslations = new ParameterTranslationsImpl( collectedParameterSpecifications );	WITHOUT_CLASSIFICATION	0.9999996962950025	WITHOUT_CLASSIFICATION	3.0370499742914926E-7	DESIGN
we are already processing a dot-structure	WITHOUT_CLASSIFICATION	0.9998282357313757	WITHOUT_CLASSIFICATION	1.7176426862424668E-4	DESIGN
igndore it...	WITHOUT_CLASSIFICATION	0.999984376275894	WITHOUT_CLASSIFICATION	1.562372410599347E-5	DESIGN
we are now at a new tree level	WITHOUT_CLASSIFICATION	0.999986435256884	WITHOUT_CLASSIFICATION	1.3564743116037683E-5	DESIGN
[jsd] The fix for HHH-558...	WITHOUT_CLASSIFICATION	0.9992207594104904	WITHOUT_CLASSIFICATION	7.792405895096539E-4	DESIGN
If the token can tell us if it could be an identifier...	WITHOUT_CLASSIFICATION	0.9999136340685532	WITHOUT_CLASSIFICATION	8.636593144692315E-5	DESIGN
... and the expected token type was an identifier, then:	WITHOUT_CLASSIFICATION	0.9999998374216164	WITHOUT_CLASSIFICATION	1.625783836080552E-7	DESIGN
Use the token as an identifier.	WITHOUT_CLASSIFICATION	0.9999999297726763	WITHOUT_CLASSIFICATION	7.022732370632879E-8	DESIGN
Add the token to the AST.	WITHOUT_CLASSIFICATION	0.999927924491141	WITHOUT_CLASSIFICATION	7.207550885890701E-5	DESIGN
(NOT (EQ a b) ) => (NE a b)	WITHOUT_CLASSIFICATION	0.9999897760914802	WITHOUT_CLASSIFICATION	1.0223908519873098E-5	DESIGN
(NOT (NE a b) ) => (EQ a b)	WITHOUT_CLASSIFICATION	0.9999897760914802	WITHOUT_CLASSIFICATION	1.0223908519873098E-5	DESIGN
(NOT (LT a b) ) => (GE a b)	WITHOUT_CLASSIFICATION	0.9999898622339548	WITHOUT_CLASSIFICATION	1.0137766045154776E-5	DESIGN
(NOT (GE a b) ) => (LT a b)	WITHOUT_CLASSIFICATION	0.9999898622339548	WITHOUT_CLASSIFICATION	1.0137766045154776E-5	DESIGN
(NOT (LE a b) ) => (GT a b)	WITHOUT_CLASSIFICATION	0.9999967838234948	WITHOUT_CLASSIFICATION	3.2161765051334407E-6	DESIGN
(NOT (LIKE a b) ) => (NOT_LIKE a b)	WITHOUT_CLASSIFICATION	0.9999946385266975	WITHOUT_CLASSIFICATION	5.361473302520682E-6	DESIGN
(NOT (NOT_LIKE a b) ) => (LIKE a b)	WITHOUT_CLASSIFICATION	0.9999946385266975	WITHOUT_CLASSIFICATION	5.361473302520682E-6	DESIGN
(NOT (IS_NOT_NULL a b) ) => (IS_NULL a b)	WITHOUT_CLASSIFICATION	0.9999960049107103	WITHOUT_CLASSIFICATION	3.995089289795306E-6	DESIGN
(NOT (BETWEEN a b) ) => (NOT_BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999790613126258	WITHOUT_CLASSIFICATION	2.0938687374192343E-5	DESIGN
Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.999966315046538	WITHOUT_CLASSIFICATION	3.3684953462001915E-5	DESIGN
overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9997593771797669	WITHOUT_CLASSIFICATION	2.4062282023300284E-4	DESIGN
if if Otherwise, handle the error normally.	WITHOUT_CLASSIFICATION	0.9999974140235969	WITHOUT_CLASSIFICATION	2.5859764031986E-6	DESIGN
(NOT (NOT_BETWEEN a b) ) => (BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999790613126258	WITHOUT_CLASSIFICATION	2.0938687374192343E-5	DESIGN
This can never happen because this rule will always eliminate the child NOT.case NOT:return x.getFirstChild(); (NOT (NOT x) ) => (x)	WITHOUT_CLASSIFICATION	0.9999974500147493	WITHOUT_CLASSIFICATION	2.549985250779049E-6	DESIGN
Just add a 'not' parent.	WITHOUT_CLASSIFICATION	0.9999031849750214	WITHOUT_CLASSIFICATION	9.68150249786029E-5	DESIGN
(EQ NULL b) => (IS_NULL b)	WITHOUT_CLASSIFICATION	0.999999194015722	WITHOUT_CLASSIFICATION	8.05984278010365E-7	DESIGN
(EQ a NULL) => (IS_NULL a)	WITHOUT_CLASSIFICATION	0.9999985382880943	WITHOUT_CLASSIFICATION	1.461711905699504E-6	DESIGN
NOTE: Because we're using ASTUtil.createParent(), the tree must be created from the bottom up. IS EMPTY x => (EXISTS (QUERY (SELECT_FROM (FROM x) ) ) )	WITHOUT_CLASSIFICATION	0.9999999098322107	WITHOUT_CLASSIFICATION	9.016778925689512E-8	DESIGN
Add NOT if it's negated.	WITHOUT_CLASSIFICATION	0.9999890526531986	WITHOUT_CLASSIFICATION	1.0947346801436153E-5	DESIGN
Create nodes that track line and column number.	WITHOUT_CLASSIFICATION	0.9999880028330761	WITHOUT_CLASSIFICATION	1.1997166923839086E-5	DESIGN
Case 1: Multi token keywords GROUP BY and ORDER BY The next token ( LT(2) ) should be 'by'... otherwise, this is just an ident.	WITHOUT_CLASSIFICATION	0.9996821932465019	WITHOUT_CLASSIFICATION	3.1780675349813033E-4	DESIGN
Case 2: The current token is after FROM and before '.'.	WITHOUT_CLASSIFICATION	0.999997659473328	WITHOUT_CLASSIFICATION	2.3405266720648586E-6	DESIGN
This handles HHH-354, where there is a strange property name in a where clause. If the lookahead contains a DOT then something that isn't an IDENT...	WITHOUT_CLASSIFICATION	0.9998984454840392	WITHOUT_CLASSIFICATION	1.0155451596083017E-4	DESIGN
See if the second lookahed token can be an identifier.	WITHOUT_CLASSIFICATION	0.9999999207155874	WITHOUT_CLASSIFICATION	7.928441253770482E-8	DESIGN
Set it!	WITHOUT_CLASSIFICATION	0.999973906797134	WITHOUT_CLASSIFICATION	2.609320286590064E-5	DESIGN
ignore	WITHOUT_CLASSIFICATION	0.9999779527837916	WITHOUT_CLASSIFICATION	2.2047216208400962E-5	DESIGN
strip the " where "	WITHOUT_CLASSIFICATION	0.9999995229018913	WITHOUT_CLASSIFICATION	4.770981086244366E-7	DESIGN
Don't really know all the codes required to adequately decipher returned jdbc exceptions here. simply allow the failure to be eaten and the subsequent insert-selects/deletes should fail	WITHOUT_CLASSIFICATION	0.9998382672455116	WITHOUT_CLASSIFICATION	1.6173275448842165E-4	DESIGN
at the very least cleanup the data :)	WITHOUT_CLASSIFICATION	0.9996871655436911	WITHOUT_CLASSIFICATION	3.1283445630890956E-4	DESIGN
First, save off the pertinent ids, as the return value	WITHOUT_CLASSIFICATION	0.9999998749797787	WITHOUT_CLASSIFICATION	1.2502022132326478E-7	DESIGN
jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.999883624207559	WITHOUT_CLASSIFICATION	1.1637579244095401E-4	DESIGN
jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.999883624207559	WITHOUT_CLASSIFICATION	1.1637579244095401E-4	DESIGN
Start performing the updates	WITHOUT_CLASSIFICATION	0.9999890579385118	WITHOUT_CLASSIFICATION	1.0942061488188567E-5	DESIGN
First, save off the pertinent ids, saving the number of pertinent ids for return	WITHOUT_CLASSIFICATION	0.9999998348996937	WITHOUT_CLASSIFICATION	1.6510030640826105E-7	DESIGN
Start performing the deletes	WITHOUT_CLASSIFICATION	0.9999859193999997	WITHOUT_CLASSIFICATION	1.4080600000357086E-5	DESIGN
otherwise, everything ok.	WITHOUT_CLASSIFICATION	0.9994428063369953	WITHOUT_CLASSIFICATION	5.571936630047573E-4	DESIGN
visit width-first, then depth	WITHOUT_CLASSIFICATION	0.9999810306649108	WITHOUT_CLASSIFICATION	1.8969335089135643E-5	DESIGN
if the types report logical equivalence, return true...	WITHOUT_CLASSIFICATION	0.9999932384912984	WITHOUT_CLASSIFICATION	6.761508701650214E-6	DESIGN
otherwise, perform a "deep equivalence" check...	WITHOUT_CLASSIFICATION	0.997217425888573	WITHOUT_CLASSIFICATION	0.002782574111427133	DESIGN
If there is no WHERE node, make one.	WITHOUT_CLASSIFICATION	0.9999996959967696	WITHOUT_CLASSIFICATION	3.0400323041404256E-7	DESIGN
inject the WHERE after the parent	WITHOUT_CLASSIFICATION	0.9999961018337005	WITHOUT_CLASSIFICATION	3.898166299496486E-6	DESIGN
Never include subclasses for implied from elements.	WITHOUT_CLASSIFICATION	0.9999786717443404	WITHOUT_CLASSIFICATION	2.1328255659645164E-5	DESIGN
Moved here from SelectClause [jsd]	WITHOUT_CLASSIFICATION	0.9999076846597119	WITHOUT_CLASSIFICATION	9.231534028807498E-5	DESIGN
/	WITHOUT_CLASSIFICATION	0.9998642377194608	WITHOUT_CLASSIFICATION	1.3576228053929797E-4	DESIGN
Use the table fromElement and the property name to get the array of column names.	WITHOUT_CLASSIFICATION	0.9999976399287258	WITHOUT_CLASSIFICATION	2.360071274233992E-6	DESIGN
Set the attributes of the property reference expression.	WITHOUT_CLASSIFICATION	0.9999999901243336	WITHOUT_CLASSIFICATION	9.87566644907414E-9	DESIGN
If the uresolved property path isn't set yet, just use the property name.	WITHOUT_CLASSIFICATION	0.9999987624244948	WITHOUT_CLASSIFICATION	1.2375755052722285E-6	DESIGN
The 'from element' that the property is in.	WITHOUT_CLASSIFICATION	0.9999999067333184	WITHOUT_CLASSIFICATION	9.326668152881603E-8	DESIGN
Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999977414381004	WITHOUT_CLASSIFICATION	2.2585618996973307E-6	DESIGN
Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999977414381004	WITHOUT_CLASSIFICATION	2.2585618996973307E-6	DESIGN
If this dot has already been resolved, stop now.	WITHOUT_CLASSIFICATION	0.9999454235554402	WITHOUT_CLASSIFICATION	5.4576444559758235E-5	DESIGN
If there is no data type for this node, and we're at the end of the path (top most dot node), then this might be a Java constant.	WITHOUT_CLASSIFICATION	0.9950034795466883	WITHOUT_CLASSIFICATION	0.004996520453311725	DESIGN
The property is a collection...	WITHOUT_CLASSIFICATION	0.9999990119806114	WITHOUT_CLASSIFICATION	9.880193886703676E-7	DESIGN
The property is a component...	WITHOUT_CLASSIFICATION	0.9999972517509572	WITHOUT_CLASSIFICATION	2.7482490427321232E-6	DESIGN
The property is another class..	WITHOUT_CLASSIFICATION	0.9999962346922187	WITHOUT_CLASSIFICATION	3.765307781450745E-6	DESIGN
Otherwise, this is a primitive type.	WITHOUT_CLASSIFICATION	0.9999910349855897	WITHOUT_CLASSIFICATION	8.965014410309307E-6	DESIGN
foo.bars.size (also handles deprecated stuff like foo.bars.maxelement for backwardness)	WITHOUT_CLASSIFICATION	0.9977897891620561	WITHOUT_CLASSIFICATION	0.0022102108379439744	DESIGN
This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999976074638894	WITHOUT_CLASSIFICATION	2.3925361105450855E-6	DESIGN
Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999146334436119	WITHOUT_CLASSIFICATION	8.536655638816515E-5	DESIGN
in non-select queries, the only time we should need to join is if we are in a subquery from clause	WITHOUT_CLASSIFICATION	0.9999999708458173	WITHOUT_CLASSIFICATION	2.915418277315371E-8	DESIGN
this is the regression style determination which matches the logic of the classic translator	WITHOUT_CLASSIFICATION	0.9997738472781448	WITHOUT_CLASSIFICATION	2.261527218552298E-4	DESIGN
This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999976074638894	WITHOUT_CLASSIFICATION	2.3925361105450855E-6	DESIGN
even though we might find a pre-existing element by join path, we may not be able to reuse it...	WITHOUT_CLASSIFICATION	0.9994845537120345	WITHOUT_CLASSIFICATION	5.154462879654964E-4	DESIGN
NOTE : addDuplicateAlias() already performs nullness checks on the alias.	WITHOUT_CLASSIFICATION	0.9794565383458648	WITHOUT_CLASSIFICATION	0.020543461654135283	DESIGN
if the from-clauses are the same, we can be a little more aggressive in terms of what we reuse	WITHOUT_CLASSIFICATION	0.9991041398014949	WITHOUT_CLASSIFICATION	8.958601985051103E-4	DESIGN
again, null != null here	WITHOUT_CLASSIFICATION	0.9999965651361304	WITHOUT_CLASSIFICATION	3.434863869542557E-6	DESIGN
If this is an implied join in a from element, then use the impled join type which is part of the tree parser's state (set by the gramamar actions).	WITHOUT_CLASSIFICATION	0.9999973126757291	WITHOUT_CLASSIFICATION	2.687324270835835E-6	DESIGN
otherwise (subquery case) dont reuse the fromElement if we are processing the from-clause of the subquery	WITHOUT_CLASSIFICATION	0.9999440656214227	WITHOUT_CLASSIFICATION	5.5934378577373684E-5	DESIGN
we know only the lhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999899131196307	WITHOUT_CLASSIFICATION	1.008688036933151E-5	DESIGN
the referenced node text is the special 'id'	WITHOUT_CLASSIFICATION	0.9999999833070398	WITHOUT_CLASSIFICATION	1.669296023650928E-8	DESIGN
only the identifier property field name can be a reference to the associated entity's PK...	WITHOUT_CLASSIFICATION	0.9999782167795401	WITHOUT_CLASSIFICATION	2.1783220459869555E-5	DESIGN
special shortcut for id properties, skip the join! this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9999747184728217	WITHOUT_CLASSIFICATION	2.528152717828504E-5	DESIGN
Append the new property name onto the unresolved path.	WITHOUT_CLASSIFICATION	0.9998907506915057	WITHOUT_CLASSIFICATION	1.0924930849435992E-4	DESIGN
If the lhs is a collection, use CollectionPropertyMapping	WITHOUT_CLASSIFICATION	0.9999993631253478	WITHOUT_CLASSIFICATION	6.368746522115666E-7	DESIGN
Tell the destination fromElement to 'includeSubclasses'.	WITHOUT_CLASSIFICATION	0.9999815783523252	WITHOUT_CLASSIFICATION	1.842164767474952E-5	DESIGN
Use theta style (for regression) Move the node up, after the origin node.	WITHOUT_CLASSIFICATION	0.9999923017505936	WITHOUT_CLASSIFICATION	7.698249406436147E-6	DESIGN
Don't resolve the node again.	WITHOUT_CLASSIFICATION	0.9999918952503304	WITHOUT_CLASSIFICATION	8.104749669701482E-6	DESIGN
for expected parameter type injection, we expect that the lhs represents some form of property ref and that the children of the in-list represent one-or-more params.	WITHOUT_CLASSIFICATION	0.9999936003588283	WITHOUT_CLASSIFICATION	6.399641171620368E-6	DESIGN
we need to strip off the embedded parens so that sql-gen does not double these up	WITHOUT_CLASSIFICATION	0.9999954982613245	WITHOUT_CLASSIFICATION	4.501738675440279E-6	DESIGN
we have something like : "? [op] rhs"	WITHOUT_CLASSIFICATION	0.9889083893421056	WITHOUT_CLASSIFICATION	0.01109161065789438	DESIGN
we have something like : "lhs [op] ?"	WITHOUT_CLASSIFICATION	0.9981854041173991	WITHOUT_CLASSIFICATION	0.0018145958826008494	DESIGN
we know only the rhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999895466869955	WITHOUT_CLASSIFICATION	1.0453313004556945E-5	DESIGN
handle the (assumed) valid cases: #1 - the only valid datetime addition synatx is one or the other is a datetime (but not both)	WITHOUT_CLASSIFICATION	0.9999937490276052	WITHOUT_CLASSIFICATION	6.2509723948666295E-6	DESIGN
one or the other needs to be a datetime for us to get into this method in the first place...	WITHOUT_CLASSIFICATION	0.8621419642476594	DESIGN	0.13785803575234054	WITHOUT_CLASSIFICATION
#3 - note that this is also true of "datetime - :param"...	WITHOUT_CLASSIFICATION	0.9971489965552046	WITHOUT_CLASSIFICATION	0.0028510034447953338	DESIGN
#2	WITHOUT_CLASSIFICATION	0.999877716038451	WITHOUT_CLASSIFICATION	1.222839615490596E-4	DESIGN
Generate the inner join -- The elements need to be joined to the collection they are in.	WITHOUT_CLASSIFICATION	0.9999998741063411	WITHOUT_CLASSIFICATION	1.2589365894939556E-7	DESIGN
nothing to do	WITHOUT_CLASSIFICATION	0.9999666398007037	WITHOUT_CLASSIFICATION	3.3360199296356354E-5	DESIGN
The 'from element' that represents the elements of the collection.	WITHOUT_CLASSIFICATION	0.999999940668926	WITHOUT_CLASSIFICATION	5.933107404643722E-8	DESIGN
Add the condition to the join sequence that qualifies the indexed element.	WITHOUT_CLASSIFICATION	0.9999999798709872	WITHOUT_CLASSIFICATION	2.012901276620452E-8	DESIGN
Sometimes use the element table alias, sometimes use the... umm... collection table alias (many to many)	WITHOUT_CLASSIFICATION	0.9999918454519948	WITHOUT_CLASSIFICATION	8.154548005140466E-6	DESIGN
Now, set the text for this node. It should be the element columns.	WITHOUT_CLASSIFICATION	0.9963737421835512	WITHOUT_CLASSIFICATION	0.0036262578164487306	DESIGN
Get the function return value type, based on the type of the first argument.	WITHOUT_CLASSIFICATION	0.9999999951011556	WITHOUT_CLASSIFICATION	4.898844489284317E-9	DESIGN
This will call initialize(tok)!	WITHOUT_CLASSIFICATION	0.9999921432771438	WITHOUT_CLASSIFICATION	7.856722856248306E-6	DESIGN
mutation depends on the types of nodes invloved...	WITHOUT_CLASSIFICATION	0.9999893376191468	WITHOUT_CLASSIFICATION	1.0662380853307213E-5	DESIGN
"pass along" our initial embedded parameter node(s) to the first generated sql fragment so that it can be handled later for parameter binding...	WITHOUT_CLASSIFICATION	0.999135391341346	WITHOUT_CLASSIFICATION	8.646086586540047E-4	DESIGN
logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.999984740245088	WITHOUT_CLASSIFICATION	1.5259754911984528E-5	DESIGN
Generated select expressions are already resolved, nothing to do.	WITHOUT_CLASSIFICATION	0.9999857789614102	WITHOUT_CLASSIFICATION	1.4221038589720488E-5	DESIGN
The path may be a reference to an alias defined in the parent query.	WITHOUT_CLASSIFICATION	0.9999998377812128	WITHOUT_CLASSIFICATION	1.6221878713785628E-7	DESIGN
The HQL class alias refers to the class name.	WITHOUT_CLASSIFICATION	0.9999999778529148	WITHOUT_CLASSIFICATION	2.2147085144253007E-8	DESIGN
Associate the table alias with the element.	WITHOUT_CLASSIFICATION	0.9999989106467058	WITHOUT_CLASSIFICATION	1.0893532942330811E-6	DESIGN
try the parent FromClause...	WITHOUT_CLASSIFICATION	0.9999986450350069	WITHOUT_CLASSIFICATION	1.3549649930618742E-6	DESIGN
Add the new node to the map so that we don't create it twice.	WITHOUT_CLASSIFICATION	0.999999809236873	WITHOUT_CLASSIFICATION	1.907631270446759E-7	DESIGN
Make sure that all from elements registered with this FROM clause are actually in the AST.	WITHOUT_CLASSIFICATION	0.9999947114020595	WITHOUT_CLASSIFICATION	5.288597940476427E-6	DESIGN
Invoke setScalarColumnText on each constructor argument.	WITHOUT_CLASSIFICATION	0.999997732039266	WITHOUT_CLASSIFICATION	2.267960733979412E-6	DESIGN
Collect the select expressions, skip the first child because it is the class name.	WITHOUT_CLASSIFICATION	0.9999998531845514	WITHOUT_CLASSIFICATION	1.4681544857507845E-7	DESIGN
return an empty Type array	WITHOUT_CLASSIFICATION	0.9999703727628209	WITHOUT_CLASSIFICATION	2.962723717924751E-5	DESIGN
Constructors are always considered scalar results.	WITHOUT_CLASSIFICATION	0.9997200058198852	WITHOUT_CLASSIFICATION	2.799941801148276E-4	DESIGN
this is the exception returned by ReflectHelper.getConstructor() if it cannot locate an appropriate constructor	WITHOUT_CLASSIFICATION	0.9999998710935128	WITHOUT_CLASSIFICATION	1.289064871137229E-7	DESIGN
if there is no order by, make one	WITHOUT_CLASSIFICATION	0.9999988055014105	WITHOUT_CLASSIFICATION	1.1944985894684126E-6	DESIGN
Find the WHERE; if there is no WHERE, find the FROM...	WITHOUT_CLASSIFICATION	0.9999962358002905	WITHOUT_CLASSIFICATION	3.7641997093456246E-6	DESIGN
Now, inject the newly built ORDER BY into the tree	WITHOUT_CLASSIFICATION	0.9999537467345581	WITHOUT_CLASSIFICATION	4.625326544195827E-5	DESIGN
ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999496321846464	WITHOUT_CLASSIFICATION	5.036781535364382E-5	DESIGN
logic operators by definition resolve to boolean.	WITHOUT_CLASSIFICATION	0.9999921311277867	WITHOUT_CLASSIFICATION	7.868872213216086E-6	DESIGN
Render the identifier select fragment using the table alias.	WITHOUT_CLASSIFICATION	0.9999876096852575	WITHOUT_CLASSIFICATION	1.2390314742514957E-5	DESIGN
Class names in the FROM clause result in a JoinSequence (the old FromParser does this).	WITHOUT_CLASSIFICATION	0.9999992774838666	WITHOUT_CLASSIFICATION	7.225161333575721E-7	DESIGN
For many-to-many joins, use the tablename from the queryable collection for the default text.	WITHOUT_CLASSIFICATION	0.9999976899757268	WITHOUT_CLASSIFICATION	2.3100242733036386E-6	DESIGN
Otherwise, use the property mapping.	WITHOUT_CLASSIFICATION	0.9999929490595003	WITHOUT_CLASSIFICATION	7.0509404996013775E-6	DESIGN
should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.999999628449644	WITHOUT_CLASSIFICATION	3.715503561445869E-7	DESIGN
If the property is a special collection property name, return a CollectionPropertyMapping.	WITHOUT_CLASSIFICATION	0.9999998916144965	WITHOUT_CLASSIFICATION	1.0838550353346585E-7	DESIGN
Collection of components.	WITHOUT_CLASSIFICATION	0.9999885257270577	WITHOUT_CLASSIFICATION	1.1474272942309962E-5	DESIGN
make sure the lhs is "assignable"...	WITHOUT_CLASSIFICATION	0.9999973901791374	WITHOUT_CLASSIFICATION	2.6098208627297397E-6	DESIGN
false indicates to not generate parens around the assignment	WITHOUT_CLASSIFICATION	0.9999898425840238	WITHOUT_CLASSIFICATION	1.0157415976205219E-5	DESIGN
Register the FromElement with the FROM clause, now that we have the names and aliases.	WITHOUT_CLASSIFICATION	0.9999997694337964	WITHOUT_CLASSIFICATION	2.305662036125595E-7	DESIGN
currently allowed...	WITHOUT_CLASSIFICATION	0.9998261878589718	WITHOUT_CLASSIFICATION	1.738121410281536E-4	DESIGN
HHH-276 : implied joins in a subselect where clause - The destination needs to be added to the destination's from clause. Not sure if this is will fix everything, but it works.	WITHOUT_CLASSIFICATION	0.9988797779204225	WITHOUT_CLASSIFICATION	0.001120222079577458	DESIGN
return classAlias == null ? className : classAlias;	WITHOUT_CLASSIFICATION	0.9991993757411364	WITHOUT_CLASSIFICATION	8.006242588637097E-4	DESIGN
This is an explicit FROM element.	WITHOUT_CLASSIFICATION	0.9998911008019642	WITHOUT_CLASSIFICATION	1.0889919803581952E-4	DESIGN
ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999496321846464	WITHOUT_CLASSIFICATION	5.036781535364382E-5	DESIGN
Fetch can't be used with scroll() or iterate().	WITHOUT_CLASSIFICATION	0.9999927963279055	WITHOUT_CLASSIFICATION	7.2036720943790286E-6	DESIGN
If it's not implied or it is implied and it's a many to many join where the target wasn't found.	WITHOUT_CLASSIFICATION	0.9999999956601165	WITHOUT_CLASSIFICATION	4.339883462164E-9	DESIGN
Since this is an explicit FROM element, it can't be implied in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999990736870933	WITHOUT_CLASSIFICATION	9.263129067196947E-7	DESIGN
Do nothing, eplicit from elements are always in the projection list.	WITHOUT_CLASSIFICATION	0.9999990496243528	WITHOUT_CLASSIFICATION	9.503756470969298E-7	DESIGN
propertyName refers to something like collection.size...	WITHOUT_CLASSIFICATION	0.9999968904589872	WITHOUT_CLASSIFICATION	3.109541012755219E-6	DESIGN
property name is a sub-path of a component...	WITHOUT_CLASSIFICATION	0.9999864063733184	WITHOUT_CLASSIFICATION	1.3593626681652325E-5	DESIGN
Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999146334436119	WITHOUT_CLASSIFICATION	8.536655638816515E-5	DESIGN
nothing to do; even if the operand is a parameter, no way we could infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999771814294737	WITHOUT_CLASSIFICATION	2.2818570526280605E-5	DESIGN
logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.999984740245088	WITHOUT_CLASSIFICATION	1.5259754911984528E-5	DESIGN
DotNode uses null here...	WITHOUT_CLASSIFICATION	0.9423387318127209	WITHOUT_CLASSIFICATION	0.057661268187279194	DESIGN
We represent a from-clause alias	WITHOUT_CLASSIFICATION	0.9999967320881096	WITHOUT_CLASSIFICATION	3.267911890461113E-6	DESIGN
we are the LHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999994146311346	WITHOUT_CLASSIFICATION	5.853688653617579E-7	DESIGN
we are the RHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999980160647595	WITHOUT_CLASSIFICATION	1.983935240570871E-6	DESIGN
we represent a naked (simple) prop-ref	WITHOUT_CLASSIFICATION	0.9999913304229626	WITHOUT_CLASSIFICATION	8.66957703737419E-6	DESIGN
EARLY EXIT!!! return so the resolve call explicitly coming from DotNode can resolve this...	WITHOUT_CLASSIFICATION	0.9636618157788485	WITHOUT_CLASSIFICATION	0.03633818422115156	DESIGN
assume this ident's text does not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9998924590761507	WITHOUT_CLASSIFICATION	1.0754092384942695E-4	DESIGN
just ignore it for now, it'll get resolved later...	WITHOUT_CLASSIFICATION	0.9965005238992067	WITHOUT_CLASSIFICATION	0.0034994761007933087	DESIGN
This is not actually a constant, but a reference to FROM element.	WITHOUT_CLASSIFICATION	0.9999636512149026	WITHOUT_CLASSIFICATION	3.6348785097383404E-5	DESIGN
check to see if our "propPath" actually represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999044056748512	WITHOUT_CLASSIFICATION	9.559432514885664E-5	DESIGN
these pieces are needed for usage in select clause	WITHOUT_CLASSIFICATION	0.999995614182077	WITHOUT_CLASSIFICATION	4.38581792293723E-6	DESIGN
used to set the type of the parent dot node	WITHOUT_CLASSIFICATION	0.9988250759100079	WITHOUT_CLASSIFICATION	0.001174924089992043	DESIGN
assume we do not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999972770924864	WITHOUT_CLASSIFICATION	2.72290751360077E-6	DESIGN
assume we do not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999972770924864	WITHOUT_CLASSIFICATION	2.72290751360077E-6	DESIGN
naked property-refs cannot be used with an aliased from element	WITHOUT_CLASSIFICATION	0.9999490408225651	WITHOUT_CLASSIFICATION	5.095917743493585E-5	DESIGN
this piece is needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9999965383940188	WITHOUT_CLASSIFICATION	3.4616059810985015E-6	DESIGN
do not over-write the column text, as that has already been "rendered" during resolve	WITHOUT_CLASSIFICATION	0.999997008818437	WITHOUT_CLASSIFICATION	2.9911815629661636E-6	DESIGN
for some reason the antlr.CommonAST initialization routines force this method to get called twice. The first time with an empty string	WITHOUT_CLASSIFICATION	0.9999978158873654	WITHOUT_CLASSIFICATION	2.184112634660153E-6	DESIGN
Look up class name using the first identifier in the path.	WITHOUT_CLASSIFICATION	0.9999997552823647	WITHOUT_CLASSIFICATION	2.4471763535962164E-7	DESIGN
Add to the query spaces.	WITHOUT_CLASSIFICATION	0.9999293693639488	WITHOUT_CLASSIFICATION	7.063063605121489E-5	DESIGN
If the from element isn't in the same clause, create a new from element.	WITHOUT_CLASSIFICATION	0.9999991734544752	WITHOUT_CLASSIFICATION	8.265455247986641E-7	DESIGN
This is the root level node. Generate an explicit from clause at the root.	WITHOUT_CLASSIFICATION	0.9998764935754872	WITHOUT_CLASSIFICATION	1.235064245128492E-4	DESIGN
Correlated subqueries create 'special' implied from nodes because correlated subselects can't use an ANSI-style join	WITHOUT_CLASSIFICATION	0.9999994407398226	WITHOUT_CLASSIFICATION	5.592601773196424E-7	DESIGN
super-duper-classic-parser-regression-testing-mojo-magic...	WITHOUT_CLASSIFICATION	0.9999760372292738	WITHOUT_CLASSIFICATION	2.3962770726248612E-5	DESIGN
A collection of entities...	WITHOUT_CLASSIFICATION	0.9999764716206804	WITHOUT_CLASSIFICATION	2.35283793196633E-5	DESIGN
A collection of components...	WITHOUT_CLASSIFICATION	0.9999913489645046	WITHOUT_CLASSIFICATION	8.651035495446098E-6	DESIGN
A collection of scalar elements...	WITHOUT_CLASSIFICATION	0.999987033771551	WITHOUT_CLASSIFICATION	1.2966228448959832E-5	DESIGN
according to both the ANSI-SQL and EJB3 specs, trim can either take exactly one parameter or a variable number of parameters between 1 and 4. from the SQL spec: <trim function> ::= TRIM <left paren> <trim operands> <right paren> <trim operands> ::= [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> <trim specification> ::= LEADING | TRAILING | BOTH If only <trim specification> is omitted, BOTH is assumed; if <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999999765778284	WITHOUT_CLASSIFICATION	2.3422171699656568E-8	DESIGN
Don't include sub-classes for implied collection joins or subquery joins.	WITHOUT_CLASSIFICATION	0.9996703236029977	WITHOUT_CLASSIFICATION	3.2967639700226943E-4	DESIGN
Treat explict from elements in sub-queries properly.	WITHOUT_CLASSIFICATION	0.9999864796566273	WITHOUT_CLASSIFICATION	1.3520343372610326E-5	DESIGN
( implied && DotNode.useThetaStyleImplicitJoins ) ) {	WITHOUT_CLASSIFICATION	0.9999721666684551	WITHOUT_CLASSIFICATION	2.7833331544797844E-5	DESIGN
the "root from-element" in correlated subqueries do need this piece	WITHOUT_CLASSIFICATION	0.9603133847344322	WITHOUT_CLASSIFICATION	0.039686615265567896	DESIGN
Create the FROM element for the target (the elements of the collection).	WITHOUT_CLASSIFICATION	0.9999999771728716	WITHOUT_CLASSIFICATION	2.2827128418103183E-8	DESIGN
If the join is implied, then don't include sub-classes on the element.	WITHOUT_CLASSIFICATION	0.9999998920277526	WITHOUT_CLASSIFICATION	1.0797224730872859E-7	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998417995208904	WITHOUT_CLASSIFICATION	1.582004791096392E-4	DESIGN
The associated entity is implied, but it must be included in the FROM. The collection alias is the role.	WITHOUT_CLASSIFICATION	0.9999980014412911	WITHOUT_CLASSIFICATION	1.998558708772842E-6	DESIGN
Tag this node as a JOIN. Don't include subclasses in the join. This is a clollection join.	WITHOUT_CLASSIFICATION	0.9999988594980481	WITHOUT_CLASSIFICATION	1.140501951909683E-6	DESIGN
Get the class name of the associated entity.	WITHOUT_CLASSIFICATION	0.9999935533614789	WITHOUT_CLASSIFICATION	6.4466385210331415E-6	DESIGN
origin, path, implied, columns, classAlias,	WITHOUT_CLASSIFICATION	0.9999958633810186	WITHOUT_CLASSIFICATION	4.136618981400379E-6	DESIGN
implied	WITHOUT_CLASSIFICATION	0.9998424372413884	WITHOUT_CLASSIFICATION	1.575627586115504E-4	DESIGN
For implied many-to-many, just add the end join.	WITHOUT_CLASSIFICATION	0.9999978784103296	WITHOUT_CLASSIFICATION	2.1215896703295104E-6	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998417995208904	WITHOUT_CLASSIFICATION	1.582004791096392E-4	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998417995208904	WITHOUT_CLASSIFICATION	1.582004791096392E-4	DESIGN
the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999999178531945	WITHOUT_CLASSIFICATION	8.214680546223236E-8	DESIGN
This causes the factory to instantiate the desired class.	WITHOUT_CLASSIFICATION	0.999989630935894	WITHOUT_CLASSIFICATION	1.0369064105922195E-5	DESIGN
private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9995932809932394	WITHOUT_CLASSIFICATION	4.0671900676062574E-4	DESIGN
Frontbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9998927329664258	WITHOUT_CLASSIFICATION	1.072670335741976E-4	DESIGN
The types represented in the SQL result set. @return The types represented in the SQL result set.	WITHOUT_CLASSIFICATION	0.9999869291656821	WITHOUT_CLASSIFICATION	1.3070834317977986E-5	DESIGN
public Type[] getSqlResultTypes() {return sqlResultTypes;}	WITHOUT_CLASSIFICATION	0.9993200030355099	WITHOUT_CLASSIFICATION	6.799969644899577E-4	DESIGN
First, collect all of the select expressions. NOTE: This must be done before invoking setScalarColumnText() because setScalarColumnText() changes the AST!!!	WITHOUT_CLASSIFICATION	0.9999745224043992	WITHOUT_CLASSIFICATION	2.5477595600814277E-5	DESIGN
First allow the actual type to control the return value. (the actual underlying sqltype could actually be different)	WITHOUT_CLASSIFICATION	0.9999159643315413	WITHOUT_CLASSIFICATION	8.403566845869323E-5	DESIGN
sqlResultTypeList.addAll( constructorArgumentTypeList );	WITHOUT_CLASSIFICATION	0.9999998321775855	WITHOUT_CLASSIFICATION	1.6782241443317146E-7	DESIGN
If the data type is not an association type, it could not have been in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999987294217629	WITHOUT_CLASSIFICATION	1.2705782371397025E-6	DESIGN
sqlResultTypeList.add( type );	WITHOUT_CLASSIFICATION	0.9999997682497852	WITHOUT_CLASSIFICATION	2.3175021466917927E-7	DESIGN
Always add the type to the return type list.	WITHOUT_CLASSIFICATION	0.999941442269401	WITHOUT_CLASSIFICATION	5.855773059907307E-5	DESIGN
add the fetched entities	WITHOUT_CLASSIFICATION	0.9999997302219853	WITHOUT_CLASSIFICATION	2.697780146461927E-7	DESIGN
Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999998150777726	WITHOUT_CLASSIFICATION	1.849222273973124E-7	DESIGN
function support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999319219135302	WITHOUT_CLASSIFICATION	6.807808646976457E-5	DESIGN
If there are any scalars (non-entities) selected, render the select column aliases.	WITHOUT_CLASSIFICATION	0.9999997921559793	WITHOUT_CLASSIFICATION	2.0784402066153764E-7	DESIGN
sqlResultTypeList,	WITHOUT_CLASSIFICATION	0.999999581724202	WITHOUT_CLASSIFICATION	4.1827579807578003E-7	DESIGN
ArrayList sqlResultTypeList,	WITHOUT_CLASSIFICATION	0.9999999293174302	WITHOUT_CLASSIFICATION	7.068256986360844E-8	DESIGN
sqlResultTypes = ( Type[] ) sqlResultTypeList.toArray( new Type[sqlResultTypeList.size()] );	WITHOUT_CLASSIFICATION	0.9999999663866115	WITHOUT_CLASSIFICATION	3.361338847985035E-8	DESIGN
lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999327558553998	WITHOUT_CLASSIFICATION	6.724414460024422E-5	DESIGN
TODO:	WITHOUT_CLASSIFICATION	0.9820638712289151	WITHOUT_CLASSIFICATION	0.017936128771084903	DESIGN
Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999987391114226	WITHOUT_CLASSIFICATION	1.2608885774822635E-6	DESIGN
Generate an 2d array of column names, the first dimension is parallel with the return types array. The second dimension is the list of column names for each type.	WITHOUT_CLASSIFICATION	0.9999999983413899	WITHOUT_CLASSIFICATION	1.658610171620364E-9	DESIGN
Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999979134295954	WITHOUT_CLASSIFICATION	2.086570404495811E-6	DESIGN
union subclass support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999047518251598	WITHOUT_CLASSIFICATION	9.524817484021439E-5	DESIGN
Skip 'DISTINCT' and 'ALL', so we return the first expression node.	WITHOUT_CLASSIFICATION	0.9999997368192607	WITHOUT_CLASSIFICATION	2.631807393138307E-7	DESIGN
Create SQL_TOKEN nodes for the columns.	WITHOUT_CLASSIFICATION	0.9999925094583407	WITHOUT_CLASSIFICATION	7.490541659369052E-6	DESIGN
Generate the property select tokens.	WITHOUT_CLASSIFICATION	0.999924793824204	WITHOUT_CLASSIFICATION	7.520617579605394E-5	DESIGN
Get the function name node.	WITHOUT_CLASSIFICATION	0.9999988567507231	WITHOUT_CLASSIFICATION	1.1432492769346864E-6	DESIGN
Method expressions in a SELECT should always be considered scalar.	WITHOUT_CLASSIFICATION	0.8750531992817931	WITHOUT_CLASSIFICATION	0.12494680071820688	DESIGN
If this is 'elements' then create a new FROM element.	WITHOUT_CLASSIFICATION	0.9999994912943786	WITHOUT_CLASSIFICATION	5.087056213911993E-7	DESIGN
Not elements(x)	WITHOUT_CLASSIFICATION	0.9999153857179252	WITHOUT_CLASSIFICATION	8.461428207479434E-5	DESIGN
Dialect function	WITHOUT_CLASSIFICATION	0.9999988775696161	WITHOUT_CLASSIFICATION	1.1224303839228128E-6	DESIGN
Collection 'property function'	WITHOUT_CLASSIFICATION	0.9999952434976893	WITHOUT_CLASSIFICATION	4.7565023106608104E-6	DESIGN
If the constant is an IDENT, figure out what it means...	WITHOUT_CLASSIFICATION	0.99975897393679	WITHOUT_CLASSIFICATION	2.4102606321004465E-4	DESIGN
IDENT is a class alias in the FROM.	WITHOUT_CLASSIFICATION	0.9999933991068091	WITHOUT_CLASSIFICATION	6.600893190969857E-6	DESIGN
Resolve to an identity column.	WITHOUT_CLASSIFICATION	0.9994420539813074	WITHOUT_CLASSIFICATION	5.579460186925959E-4	DESIGN
Otherwise, it's a literal.	WITHOUT_CLASSIFICATION	0.9999939755219033	WITHOUT_CLASSIFICATION	6.024478096713324E-6	DESIGN
the name of an entity class	WITHOUT_CLASSIFICATION	0.9999848424654981	WITHOUT_CLASSIFICATION	1.5157534501949898E-5	DESIGN
the class discriminator value	WITHOUT_CLASSIFICATION	0.9999816816787129	WITHOUT_CLASSIFICATION	1.8318321287144984E-5	DESIGN
Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999980615250798	WITHOUT_CLASSIFICATION	1.9384749202450003E-6	DESIGN
Add a space before the display text.	WITHOUT_CLASSIFICATION	0.9999970356642259	WITHOUT_CLASSIFICATION	2.9643357741381846E-6	DESIGN
Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999996952748198	WITHOUT_CLASSIFICATION	3.047251802711812E-7	DESIGN
child == parent.getFirstChild()	WITHOUT_CLASSIFICATION	0.9999999470463388	WITHOUT_CLASSIFICATION	5.295366123962496E-8	DESIGN
Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999996952748198	WITHOUT_CLASSIFICATION	3.047251802711812E-7	DESIGN
Filter conditions need to be inserted before the HQL where condition and the theta join node. This is because org.hibernate.loader.Loader binds the filter parameters first, then it binds all the HQL query parameters, see org.hibernate.loader.Loader.processFilterParameters().	WITHOUT_CLASSIFICATION	0.9999999941235266	WITHOUT_CLASSIFICATION	5.876473395123209E-9	DESIGN
Put the FILTERS node before the HQL condition and theta joins	WITHOUT_CLASSIFICATION	0.9999992968680277	WITHOUT_CLASSIFICATION	7.031319723076918E-7	DESIGN
add the current fragment to the FILTERS node	WITHOUT_CLASSIFICATION	0.9999797925554618	WITHOUT_CLASSIFICATION	2.0207444538214163E-5	DESIGN
Create a new THETA_JOINS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999996764046055	WITHOUT_CLASSIFICATION	3.235953943845916E-7	DESIGN
Put the THETA_JOINS node before the HQL condition, after the filters.	WITHOUT_CLASSIFICATION	0.9999997506198602	WITHOUT_CLASSIFICATION	2.493801397820806E-7	DESIGN
add the current fragment to the THETA_JOINS node	WITHOUT_CLASSIFICATION	0.9998953910368835	WITHOUT_CLASSIFICATION	1.0460896311655733E-4	DESIGN
First, try to get the persister using the given name directly.	WITHOUT_CLASSIFICATION	0.9999998709625612	WITHOUT_CLASSIFICATION	1.2903743884511732E-7	DESIGN
unable to locate it using this name	WITHOUT_CLASSIFICATION	0.9999801724117673	WITHOUT_CLASSIFICATION	1.9827588232713707E-5	DESIGN
If that didn't work, try using the 'import' name.	WITHOUT_CLASSIFICATION	0.9999989909780537	WITHOUT_CLASSIFICATION	1.009021946256305E-6	DESIGN
Implicit joins use theta style (WHERE pk = fk), explicit joins use JOIN (after from)	WITHOUT_CLASSIFICATION	0.9999994462501943	WITHOUT_CLASSIFICATION	5.537498056244024E-7	DESIGN
locate the registered function by the given name	WITHOUT_CLASSIFICATION	0.9999999426721264	WITHOUT_CLASSIFICATION	5.732787370241529E-8	DESIGN
determine the type of the first argument...	WITHOUT_CLASSIFICATION	0.9999774725319576	WITHOUT_CLASSIFICATION	2.2527468042374036E-5	DESIGN
Use the DOT node to emit the first column name. Create the column names, folled by the column aliases.	WITHOUT_CLASSIFICATION	0.9999999044318897	WITHOUT_CLASSIFICATION	9.556811026569697E-8	DESIGN
Note: this simply constructs a "raw" SQL_TOKEN representing the where fragment and injects this into the tree. This "works"; however it is probably not the best long-term solution. At some point we probably want to apply an additional grammar to properly tokenize this where fragment into constituent parts focused on the operators embedded within the fragment.	WITHOUT_CLASSIFICATION	0.9999998031486016	DESIGN	1.968513983615704E-7	WITHOUT_CLASSIFICATION
Append the text of the current node.	WITHOUT_CLASSIFICATION	0.9999959826649555	WITHOUT_CLASSIFICATION	4.0173350444960506E-6	DESIGN
If the node has a first child, recurse into the first child.	WITHOUT_CLASSIFICATION	0.9999999916568664	WITHOUT_CLASSIFICATION	8.343133579972872E-9	DESIGN
If there is a second child (RHS), recurse into that child.	WITHOUT_CLASSIFICATION	0.9999992774755454	WITHOUT_CLASSIFICATION	7.225244545668201E-7	DESIGN
Iterate through the alias,JoinSequence pairs and generate SQL token nodes.	WITHOUT_CLASSIFICATION	0.9999995654346	WITHOUT_CLASSIFICATION	4.3456539991702624E-7	DESIGN
If the from element represents a JOIN_FRAGMENT and it is a theta-style join, convert its type from JOIN_FRAGMENT to FROM_FRAGMENT	WITHOUT_CLASSIFICATION	0.9999997588828965	WITHOUT_CLASSIFICATION	2.411171034461595E-7	DESIGN
this is used during SqlGenerator processing	WITHOUT_CLASSIFICATION	0.9770361806299426	WITHOUT_CLASSIFICATION	0.022963819370057346	DESIGN
If there is a FROM fragment and the FROM element is an explicit, then add the from part.	WITHOUT_CLASSIFICATION	0.9999805339108322	WITHOUT_CLASSIFICATION	1.9466089167773384E-5	DESIGN
&& StringHelper.isNotEmpty( frag )	WITHOUT_CLASSIFICATION	0.9999781855815931	WITHOUT_CLASSIFICATION	2.181441840679349E-5	DESIGN
The FROM fragment will probably begin with ', '. Remove this if it is present.	WITHOUT_CLASSIFICATION	0.9888981776680548	WITHOUT_CLASSIFICATION	0.011101822331945264	DESIGN
This uses a PathExpressionParser but notice that compound paths are not valid, only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9998953121918569	WITHOUT_CLASSIFICATION	1.0468780814304942E-4	DESIGN
SELECT p FROM p IN CLASS eg.Person ORDER BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999967216661395	WITHOUT_CLASSIFICATION	3.278333860546728E-6	DESIGN
The reason for this is SQL doesn't let you sort by an expression you are not returning in the result set.	WITHOUT_CLASSIFICATION	0.9999974196089245	WITHOUT_CLASSIFICATION	2.5803910754956704E-6	DESIGN
named query parameter	WITHOUT_CLASSIFICATION	0.9994703390711319	WITHOUT_CLASSIFICATION	5.296609288679846E-4	DESIGN
default mode	WITHOUT_CLASSIFICATION	0.9999835393112406	WITHOUT_CLASSIFICATION	1.6460688759371316E-5	DESIGN
QueryJoinFragment join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999994320188659	WITHOUT_CLASSIFICATION	5.679811340718519E-7	DESIGN
reset the dotcount (but not the path) after reset!	WITHOUT_CLASSIFICATION	0.9999998661339177	WITHOUT_CLASSIFICATION	1.33866082336149E-7	DESIGN
after reset!	WITHOUT_CLASSIFICATION	0.9999997305234275	WITHOUT_CLASSIFICATION	2.6947657245619745E-7	DESIGN
we don't need to worry about any condition in the ON clause here (toFromFragmentString), since anything in the ON condition is already applied to the whole query	WITHOUT_CLASSIFICATION	0.9999979787265111	WITHOUT_CLASSIFICATION	2.0212734887909352E-6	DESIGN
bit_length feels a bit broken to me. We have to cast to char in order to pass when a numeric value is supplied. But of course the answers given will be wildly different for these two datatypes. 1234.5678 will be 9 bytes as a char string but will be 8 or 16 bytes as a true numeric. Jay Nance 2006-09-22	WITHOUT_CLASSIFICATION	0.9998879995342972	WITHOUT_CLASSIFICATION	1.120004657027983E-4	DESIGN
dotcount>=2	WITHOUT_CLASSIFICATION	0.9999228986218411	WITHOUT_CLASSIFICATION	7.710137815884119E-5	DESIGN
Do the corresponding RHS	WITHOUT_CLASSIFICATION	0.9999407886776385	WITHOUT_CLASSIFICATION	5.9211322361458524E-5	DESIGN
if its "id"	WITHOUT_CLASSIFICATION	0.9999986696724489	WITHOUT_CLASSIFICATION	1.3303275511084197E-6	DESIGN
or its the id property name	WITHOUT_CLASSIFICATION	0.9999969769263736	WITHOUT_CLASSIFICATION	3.0230736265075296E-6	DESIGN
join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999997272836529	WITHOUT_CLASSIFICATION	2.7271634700406677E-7	DESIGN
important!!	WITHOUT_CLASSIFICATION	0.9999824117374555	WITHOUT_CLASSIFICATION	1.7588262544501715E-5	DESIGN
String[] keyCols = collPersister.getKeyColumnNames();	WITHOUT_CLASSIFICATION	0.9999999469969177	WITHOUT_CLASSIFICATION	5.3003082253207286E-8	DESIGN
an association	WITHOUT_CLASSIFICATION	0.9999984072032747	WITHOUT_CLASSIFICATION	1.5927967252506215E-6	DESIGN
allow index() function:	WITHOUT_CLASSIFICATION	0.9999964905283334	WITHOUT_CLASSIFICATION	3.5094716666816366E-6	DESIGN
here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9999367954213844	WITHOUT_CLASSIFICATION	6.32045786156823E-5	DESIGN
The reason for this is SQL doesn't let you sort by an expression you are not returning in the result set.	WITHOUT_CLASSIFICATION	0.9999974196089245	WITHOUT_CLASSIFICATION	2.5803910754956704E-6	DESIGN
many-to-many	WITHOUT_CLASSIFICATION	0.9999447759499347	WITHOUT_CLASSIFICATION	5.5224050065319104E-5	DESIGN
collections of values	WITHOUT_CLASSIFICATION	0.9999981542323657	WITHOUT_CLASSIFICATION	1.8457676343078512E-6	DESIGN
opening paren in new Foo ( ... )	WITHOUT_CLASSIFICATION	0.9980637227638403	WITHOUT_CLASSIFICATION	0.0019362772361597653	DESIGN
if we are inside a new Result(), but not inside a nested function	WITHOUT_CLASSIFICATION	0.9999996711727435	WITHOUT_CLASSIFICATION	3.288272565001097E-7	DESIGN
special case	WITHOUT_CLASSIFICATION	0.9999997809718829	WITHOUT_CLASSIFICATION	2.1902811708925056E-7	DESIGN
the name of an SQL function	WITHOUT_CLASSIFICATION	0.9999992663860621	WITHOUT_CLASSIFICATION	7.336139379948024E-7	DESIGN
null child could occur for no from clause in a filter	WITHOUT_CLASSIFICATION	0.9999600293464059	WITHOUT_CLASSIFICATION	3.9970653594073013E-5	DESIGN
this is basically a copy/paste of OrderByParser ... might be worth refactoring	WITHOUT_CLASSIFICATION	0.7231028047933703	DESIGN	0.2768971952066297	WITHOUT_CLASSIFICATION
SELECT p FROM p IN CLASS eg.Person GROUP BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.999954503547248	WITHOUT_CLASSIFICATION	4.5496452751935944E-5	DESIGN
return aliases not supported in classic translator!	WITHOUT_CLASSIFICATION	0.9983897501150514	WITHOUT_CLASSIFICATION	0.0016102498849487066	DESIGN
register collection role	WITHOUT_CLASSIFICATION	0.9999673408155157	WITHOUT_CLASSIFICATION	3.265918448429864E-5	DESIGN
The keyword used to specify an identity column, if identity column key generation is supported.	WITHOUT_CLASSIFICATION	0.9999892635961621	WITHOUT_CLASSIFICATION	1.0736403837906951E-5	DESIGN
.getElementPropertyMapping();	WITHOUT_CLASSIFICATION	0.9999904797360889	WITHOUT_CLASSIFICATION	9.520263911030274E-6	DESIGN
crossJoins.add(name);	WITHOUT_CLASSIFICATION	0.9998950948599779	WITHOUT_CLASSIFICATION	1.0490514002214955E-4	DESIGN
ie no select clause in HQL	WITHOUT_CLASSIFICATION	0.9999992402343711	WITHOUT_CLASSIFICATION	7.597656288301797E-7	DESIGN
initialize the Set of queried identifier spaces (ie. tables)	WITHOUT_CLASSIFICATION	0.9999977496089498	WITHOUT_CLASSIFICATION	2.25039105015305E-6	DESIGN
ie. no select clause	WITHOUT_CLASSIFICATION	0.9999999476146504	WITHOUT_CLASSIFICATION	5.238534969627024E-8	DESIGN
there _was_ a select clause	WITHOUT_CLASSIFICATION	0.9999998242214058	WITHOUT_CLASSIFICATION	1.7577859426485006E-7	DESIGN
return the concrete type, or the underlying type if a concrete type was not specified	WITHOUT_CLASSIFICATION	0.99999477732745	WITHOUT_CLASSIFICATION	5.222672550020749E-6	DESIGN
many-to-many	WITHOUT_CLASSIFICATION	0.9999447759499347	WITHOUT_CLASSIFICATION	5.5224050065319104E-5	DESIGN
q.addCollection(collectionName, collectionRole);	WITHOUT_CLASSIFICATION	0.9999992448455457	WITHOUT_CLASSIFICATION	7.551544544264008E-7	DESIGN
classic parser does not support bulk manipulation statements	WITHOUT_CLASSIFICATION	0.99926825689679	WITHOUT_CLASSIFICATION	7.317431032100821E-4	DESIGN
can't cache this stuff either (per-invocation)	WITHOUT_CLASSIFICATION	0.9999874111232949	WITHOUT_CLASSIFICATION	1.2588876705191256E-5	DESIGN
unfortunately this stuff can't be cached because it is per-invocation, not constant for the QueryTranslator instance	WITHOUT_CLASSIFICATION	0.998051513047655	WITHOUT_CLASSIFICATION	0.0019484869523448743	DESIGN
This is the legacy behaviour for HQL queries...	WITHOUT_CLASSIFICATION	0.9999759187059662	WITHOUT_CLASSIFICATION	2.4081294033692592E-5	DESIGN
not known!	WITHOUT_CLASSIFICATION	0.9974867310679586	WITHOUT_CLASSIFICATION	0.002513268932041536	DESIGN
not known!	WITHOUT_CLASSIFICATION	0.9974867310679586	WITHOUT_CLASSIFICATION	0.002513268932041536	DESIGN
we have the form: trim(trimSource) so we trim leading and trailing spaces EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999890557595164	WITHOUT_CLASSIFICATION	1.0944240483559224E-5	DESIGN
not known!	WITHOUT_CLASSIFICATION	0.9974867310679586	WITHOUT_CLASSIFICATION	0.002513268932041536	DESIGN
not known!	WITHOUT_CLASSIFICATION	0.9974867310679586	WITHOUT_CLASSIFICATION	0.002513268932041536	DESIGN
Need this, since join condition can appear inside parens!	WITHOUT_CLASSIFICATION	0.9881656011943303	WITHOUT_CLASSIFICATION	0.011834398805669747	DESIGN
tokens that close a sub expression tokens that open a sub expression tokens that would indicate a sub expression is a boolean expression	WITHOUT_CLASSIFICATION	0.9999991419961948	WITHOUT_CLASSIFICATION	8.580038051894294E-7	DESIGN
expressionTerminators.add(","); deliberately excluded	WITHOUT_CLASSIFICATION	0.9999896906187719	WITHOUT_CLASSIFICATION	1.0309381228117013E-5	DESIGN
expressionOpeners.add(","); deliberately excluded	WITHOUT_CLASSIFICATION	0.9999892381357562	WITHOUT_CLASSIFICATION	1.0761864243666245E-5	DESIGN
we have the form: trim(from trimSource). This is functionally equivalent to trim(trimSource) EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9998094043977068	WITHOUT_CLASSIFICATION	1.9059560229314721E-4	DESIGN
otherwise, a trim-specification and/or a trim-character have been specified; we need to decide which options are present and "do the right thing" should leading trim-characters be trimmed? should trailing trim-characters be trimmed? the trim-character (what is to be trimmed off?) the trim-source (from where should it be trimmed?)	WITHOUT_CLASSIFICATION	0.958850640132858	WITHOUT_CLASSIFICATION	0.0411493598671419	DESIGN
Inside a BETWEEN ... AND ... expression	WITHOUT_CLASSIFICATION	0.9937553748657358	WITHOUT_CLASSIFICATION	0.006244625134264161	DESIGN
were an odd or even number of NOTs encountered the join string built up by compound paths inside this expression a flag indicating if the subexpression is known to be boolean	WITHOUT_CLASSIFICATION	0.9999999871724842	WITHOUT_CLASSIFICATION	1.2827515842745695E-8	DESIGN
ie. a many-to-many	WITHOUT_CLASSIFICATION	0.9999902427144396	WITHOUT_CLASSIFICATION	9.75728556040871E-6	DESIGN
Cope with [,]	WITHOUT_CLASSIFICATION	0.9999801704328264	WITHOUT_CLASSIFICATION	1.9829567173609893E-5	DESIGN
Cope with a continued path expression (ie. ].baz)	WITHOUT_CLASSIFICATION	0.999853876064703	WITHOUT_CLASSIFICATION	1.4612393529705824E-4	DESIGN
NOTE: early return	WITHOUT_CLASSIFICATION	0.9999700276076762	WITHOUT_CLASSIFICATION	2.9972392323791296E-5	DESIGN
Cope with a subselect	WITHOUT_CLASSIFICATION	0.9999486586124255	WITHOUT_CLASSIFICATION	5.134138757444665E-5	DESIGN
Cope with special cases of AND, NOT, ()	WITHOUT_CLASSIFICATION	0.9999981157241689	WITHOUT_CLASSIFICATION	1.8842758312219114E-6	DESIGN
Close extra brackets we opened	WITHOUT_CLASSIFICATION	0.9999837110398655	WITHOUT_CLASSIFICATION	1.6288960134490146E-5	DESIGN
take note when this is a boolean expression	WITHOUT_CLASSIFICATION	0.9989528080241182	WITHOUT_CLASSIFICATION	0.0010471919758818214	DESIGN
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999994742368801	WITHOUT_CLASSIFICATION	5.257631199803678E-7	DESIGN
process a token, mapping OO path expressions to SQL expressions	WITHOUT_CLASSIFICATION	0.9999993930795625	WITHOUT_CLASSIFICATION	6.069204374760449E-7	DESIGN
Open any extra brackets we might need.	WITHOUT_CLASSIFICATION	0.9637077818405747	WITHOUT_CLASSIFICATION	0.03629221815942529	DESIGN
Cope with special cases of AND, NOT, )	WITHOUT_CLASSIFICATION	0.9999918757092795	WITHOUT_CLASSIFICATION	8.124290720514554E-6	DESIGN
the next one up must also be	WITHOUT_CLASSIFICATION	0.9999704120753049	WITHOUT_CLASSIFICATION	2.9587924695195116E-5	DESIGN
Add any joins	WITHOUT_CLASSIFICATION	0.9999991320430017	WITHOUT_CLASSIFICATION	8.679569982646787E-7	DESIGN
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999994742368801	WITHOUT_CLASSIFICATION	5.257631199803678E-7	DESIGN
named query parameter	WITHOUT_CLASSIFICATION	0.9994703390711319	WITHOUT_CLASSIFICATION	5.296609288679846E-4	DESIGN
path expression	WITHOUT_CLASSIFICATION	0.9999994300259575	WITHOUT_CLASSIFICATION	5.699740425925988E-7	DESIGN
saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.999999959187494	WITHOUT_CLASSIFICATION	4.0812505921601586E-8	DESIGN
persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999994870946246	WITHOUT_CLASSIFICATION	5.129053754039617E-7	DESIGN
anything else	WITHOUT_CLASSIFICATION	0.9999992614777099	WITHOUT_CLASSIFICATION	7.385222900342223E-7	DESIGN
the path expression continues after a ]	WITHOUT_CLASSIFICATION	0.9999876886969579	WITHOUT_CLASSIFICATION	1.2311303042102162E-5	DESIGN
careful with this!	WITHOUT_CLASSIFICATION	0.9999913798486585	WITHOUT_CLASSIFICATION	8.620151341479625E-6	DESIGN
the path expression ends at the ]	WITHOUT_CLASSIFICATION	0.9999840040220889	WITHOUT_CLASSIFICATION	1.5995977911088073E-5	DESIGN
"finish off" the join	WITHOUT_CLASSIFICATION	0.9999986251532925	WITHOUT_CLASSIFICATION	1.3748467074689033E-6	DESIGN
NOTICE: no " or . since they are part of (compound) identifiers	WITHOUT_CLASSIFICATION	0.9998948215376589	WITHOUT_CLASSIFICATION	1.051784623410827E-4	DESIGN
cannot instantiate	WITHOUT_CLASSIFICATION	0.9999889868372156	WITHOUT_CLASSIFICATION	1.101316278438022E-5	DESIGN
start by looking for HQL keywords...	WITHOUT_CLASSIFICATION	0.999999929642322	WITHOUT_CLASSIFICATION	7.035767798010532E-8	DESIGN
inner joins can be abbreviated to 'join'	WITHOUT_CLASSIFICATION	0.9999515503582506	WITHOUT_CLASSIFICATION	4.84496417494183E-5	DESIGN
'outer' is optional and is ignored	WITHOUT_CLASSIFICATION	0.999999995350494	WITHOUT_CLASSIFICATION	4.64950601190162E-9	DESIGN
now anything that is not a HQL keyword	WITHOUT_CLASSIFICATION	0.9999971718478606	WITHOUT_CLASSIFICATION	2.828152139318089E-6	DESIGN
process the "old" HQL style where aliases appear _first_ ie. using the IN or IN CLASS constructions	WITHOUT_CLASSIFICATION	0.9999763968856685	WITHOUT_CLASSIFICATION	2.3603114331571528E-5	DESIGN
treat it as a classname	WITHOUT_CLASSIFICATION	0.9999966682699182	WITHOUT_CLASSIFICATION	3.3317300817894974E-6	DESIGN
treat it as a path expression	WITHOUT_CLASSIFICATION	0.999998257348811	WITHOUT_CLASSIFICATION	1.7426511890395066E-6	DESIGN
starts with the name of a mapped class (new style)	WITHOUT_CLASSIFICATION	0.9999934805260693	WITHOUT_CLASSIFICATION	6.519473930678935E-6	DESIGN
starts with a path expression (new style)	WITHOUT_CLASSIFICATION	0.9999889141616611	WITHOUT_CLASSIFICATION	1.1085838338788141E-5	DESIGN
allow ODMG OQL style: from Person p, p.cars c	WITHOUT_CLASSIFICATION	0.9995191200231063	WITHOUT_CLASSIFICATION	4.808799768937023E-4	DESIGN
handle quoted strings	WITHOUT_CLASSIFICATION	0.9999457996629315	WITHOUT_CLASSIFICATION	5.420033706862378E-5	DESIGN
Object insertions, updates, and deletions have list semantics because they must happen in the right order so as to respect referential integrity	WITHOUT_CLASSIFICATION	0.9999998603699605	WITHOUT_CLASSIFICATION	1.3963003944713487E-7	DESIGN
"finish off" the join	WITHOUT_CLASSIFICATION	0.9999986251532925	WITHOUT_CLASSIFICATION	1.3748467074689033E-6	DESIGN
ignore whitespace	WITHOUT_CLASSIFICATION	0.9999999522519472	WITHOUT_CLASSIFICATION	4.7748052892287266E-8	DESIGN
do replacements	WITHOUT_CLASSIFICATION	0.9998759407051779	WITHOUT_CLASSIFICATION	1.2405929482202951E-4	DESIGN
handle HQL2 collection syntax	WITHOUT_CLASSIFICATION	0.9999100662618164	WITHOUT_CLASSIFICATION	8.993373818360393E-5	DESIGN
uuid.hex is deprecated	WITHOUT_CLASSIFICATION	0.9994117111224988	WITHOUT_CLASSIFICATION	5.882888775011871E-4	DESIGN
AbstractSelectingDelegate impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999690036136403	WITHOUT_CLASSIFICATION	3.099638635969222E-5	DESIGN
hilo params	WITHOUT_CLASSIFICATION	0.9999985581431747	WITHOUT_CLASSIFICATION	1.4418568253367567E-6	DESIGN
sql = query;	WITHOUT_CLASSIFICATION	0.9999948570314416	WITHOUT_CLASSIFICATION	5.14296855837568E-6	DESIGN
performance opt	WITHOUT_CLASSIFICATION	0.9999717834273584	WITHOUT_CLASSIFICATION	2.8216572641575382E-5	DESIGN
sql = update;	WITHOUT_CLASSIFICATION	0.9999997255212953	WITHOUT_CLASSIFICATION	2.744787046114872E-7	DESIGN
hilo config	WITHOUT_CLASSIFICATION	0.9999959749383571	WITHOUT_CLASSIFICATION	4.025061642886318E-6	DESIGN
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.999997286279217	WITHOUT_CLASSIFICATION	2.7137207829506295E-6	DESIGN
don't allow comments on these insert statements as comments totally blow up the Oracle getGeneratedKeys "support" :(	WITHOUT_CLASSIFICATION	0.9999997859933171	WITHOUT_CLASSIFICATION	2.1400668302138195E-7	DESIGN
abort the save (the object is already saved by a circular cascade)	WITHOUT_CLASSIFICATION	0.997287242755259	WITHOUT_CLASSIFICATION	0.0027127572447408392	DESIGN
throw new IdentifierGenerationException("save associated object first, or disable cascade for inverse association");	WITHOUT_CLASSIFICATION	0.9999999362223005	WITHOUT_CLASSIFICATION	6.377769949221377E-8	DESIGN
intentionally empty	WITHOUT_CLASSIFICATION	0.9999950582711101	WITHOUT_CLASSIFICATION	4.941728889975087E-6	DESIGN
do nothing to avoid a lazy property initialization	WITHOUT_CLASSIFICATION	0.999999931349923	WITHOUT_CLASSIFICATION	6.865007704230134E-8	DESIGN
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999981228099057	WITHOUT_CLASSIFICATION	1.8771900943120318E-6	DESIGN
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.999997286279217	WITHOUT_CLASSIFICATION	2.7137207829506295E-6	DESIGN
do nothing until we hit the rsult set containing the generated id	WITHOUT_CLASSIFICATION	0.999995204152209	WITHOUT_CLASSIFICATION	4.795847791008539E-6	DESIGN
COLUMN and TABLE should be renamed but it would break the public API	WITHOUT_CLASSIFICATION	0.9943659697311013	WITHOUT_CLASSIFICATION	0.0056340302688987765	DESIGN
Loaded entity instances, by EntityKey	WITHOUT_CLASSIFICATION	0.999998912474448	WITHOUT_CLASSIFICATION	1.0875255519277302E-6	DESIGN
if the given name is un-qualified we may neen to qualify it	WITHOUT_CLASSIFICATION	0.9999961457329463	WITHOUT_CLASSIFICATION	3.854267053736096E-6	DESIGN
the default...	WITHOUT_CLASSIFICATION	0.999994316617061	WITHOUT_CLASSIFICATION	5.683382939051673E-6	DESIGN
unfortunately not really safe to normalize this to 1 as an initial value like we do the others because we would not be able to control this if we are using a sequence...	WITHOUT_CLASSIFICATION	0.9999999873265921	WITHOUT_CLASSIFICATION	1.267340802773356E-8	DESIGN
intentionally empty	WITHOUT_CLASSIFICATION	0.9999950582711101	WITHOUT_CLASSIFICATION	4.941728889975087E-6	DESIGN
Identity map of CollectionEntry instances, by the collection wrapper	WITHOUT_CLASSIFICATION	0.9999993115253035	WITHOUT_CLASSIFICATION	6.884746964896568E-7	DESIGN
general purpose parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996270039399835	WITHOUT_CLASSIFICATION	3.7299606001651016E-4	DESIGN
table-specific parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999967334267111	WITHOUT_CLASSIFICATION	3.266573288821188E-6	DESIGN
Configurable implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999925827122305	WITHOUT_CLASSIFICATION	7.417287769562195E-6	DESIGN
IdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999915255505363	WITHOUT_CLASSIFICATION	8.474449463718401E-6	DESIGN
PersistentIdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999969159357168	WITHOUT_CLASSIFICATION	3.0840642831263464E-6	DESIGN
prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999997106476529	WITHOUT_CLASSIFICATION	2.8935234708684245E-7	DESIGN
prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999997106476529	WITHOUT_CLASSIFICATION	2.8935234708684245E-7	DESIGN
fetch the generated id in a separate query	WITHOUT_CLASSIFICATION	0.999882982612648	WITHOUT_CLASSIFICATION	1.1701738735200433E-4	DESIGN
we just hit the last position	WITHOUT_CLASSIFICATION	0.9999968070612243	WITHOUT_CLASSIFICATION	3.1929387758101105E-6	DESIGN
scroll ahead	WITHOUT_CLASSIFICATION	0.9999853827743591	WITHOUT_CLASSIFICATION	1.4617225640965415E-5	DESIGN
scroll backward	WITHOUT_CLASSIFICATION	0.9999958763342673	WITHOUT_CLASSIFICATION	4.123665732678119E-6	DESIGN
we have not yet hit the last result...	WITHOUT_CLASSIFICATION	0.99999849952972	WITHOUT_CLASSIFICATION	1.5004702799715624E-6	DESIGN
Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999801298293346	WITHOUT_CLASSIFICATION	1.9870170665304925E-5	DESIGN
State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999845111348754	WITHOUT_CLASSIFICATION	1.5488865124540034E-5	DESIGN
Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999898154564428	WITHOUT_CLASSIFICATION	1.0184543557168767E-5	DESIGN
do this when all the properties are updateable since there is a certain likelihood that the information will already be snapshot-cached.	WITHOUT_CLASSIFICATION	0.9684407983760126	WITHOUT_CLASSIFICATION	0.03155920162398736	DESIGN
Inner classes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996641467002	WITHOUT_CLASSIFICATION	3.35853299916892E-7	DESIGN
Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999801298293346	WITHOUT_CLASSIFICATION	1.9870170665304925E-5	DESIGN
State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999845111348754	WITHOUT_CLASSIFICATION	1.5488865124540034E-5	DESIGN
Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999898154564428	WITHOUT_CLASSIFICATION	1.0184543557168767E-5	DESIGN
Caches	WITHOUT_CLASSIFICATION	0.9999379992106054	WITHOUT_CLASSIFICATION	6.200078939452155E-5	DESIGN
Generators:	WITHOUT_CLASSIFICATION	0.9997613411297223	WITHOUT_CLASSIFICATION	2.3865887027787723E-4	DESIGN
cache region is defined by the root-class in the hierarchy...	WITHOUT_CLASSIFICATION	0.9999300728065388	WITHOUT_CLASSIFICATION	6.992719346120022E-5	DESIGN
check if the detached object being merged is the parent	WITHOUT_CLASSIFICATION	0.9999948847953599	WITHOUT_CLASSIFICATION	5.115204639997575E-6	DESIGN
after all persisters and named queries are registered	WITHOUT_CLASSIFICATION	0.9999720838079859	WITHOUT_CLASSIFICATION	2.7916192014095533E-5	DESIGN
if we get here, it is possible that we have a proxy 'in the way' of the merge map resolution... NOTE: decided to put this here rather than in the above loop as I was nervous about the performance of the loop-in-loop especially considering this is far more likely the 'edge case'	WITHOUT_CLASSIFICATION	0.9935289373484916	DESIGN	0.006471062651508417	WITHOUT_CLASSIFICATION
JNDI + Serialization:	WITHOUT_CLASSIFICATION	0.9999987326598531	WITHOUT_CLASSIFICATION	1.2673401470122627E-6	DESIGN
checking for named queries	WITHOUT_CLASSIFICATION	0.9999527629097187	WITHOUT_CLASSIFICATION	4.723709028135742E-5	DESIGN
stats	WITHOUT_CLASSIFICATION	0.9999796811291408	WITHOUT_CLASSIFICATION	2.0318870859192716E-5	DESIGN
EntityNotFoundDelegate	WITHOUT_CLASSIFICATION	0.9942899346875175	WITHOUT_CLASSIFICATION	0.005710065312482526	DESIGN
Check named HQL queries	WITHOUT_CLASSIFICATION	0.9999958321615994	WITHOUT_CLASSIFICATION	4.1678384005657635E-6	DESIGN
this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.949877011439627	WITHOUT_CLASSIFICATION	0.05012298856037295	DESIGN
prevents this session from adding things to cache	WITHOUT_CLASSIFICATION	0.9980335560893133	WITHOUT_CLASSIFICATION	0.0019664439106866554	DESIGN
from javax.naming.Referenceable	WITHOUT_CLASSIFICATION	0.9999049857069373	WITHOUT_CLASSIFICATION	9.501429306267663E-5	DESIGN
look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999779150055684	WITHOUT_CLASSIFICATION	2.20849944315715E-5	DESIGN
for a dynamic-class	WITHOUT_CLASSIFICATION	0.9999947142881783	WITHOUT_CLASSIFICATION	5.285711821762398E-6	DESIGN
test this entity to see if we must query it	WITHOUT_CLASSIFICATION	0.9998362522881392	WITHOUT_CLASSIFICATION	1.6374771186077012E-4	DESIGN
NOTE EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999982666741496	WITHOUT_CLASSIFICATION	1.7333258503405413E-6	DESIGN
for backward-compatability	WITHOUT_CLASSIFICATION	0.9999963537059294	WITHOUT_CLASSIFICATION	3.6462940706775476E-6	DESIGN
ignore this error for now	WITHOUT_CLASSIFICATION	0.9999986002787377	WITHOUT_CLASSIFICATION	1.3997212623370981E-6	DESIGN
to stop the class from being unloaded	WITHOUT_CLASSIFICATION	0.9999994873875756	WITHOUT_CLASSIFICATION	5.126124244273287E-7	DESIGN
in case we were deserialized in a different JVM, look for an instance with the same name (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9984143357497192	WITHOUT_CLASSIFICATION	0.0015856642502807487	DESIGN
must add to JNDI _after_ adding to HashMaps, because some JNDI servers use serialization	WITHOUT_CLASSIFICATION	0.999999889900895	WITHOUT_CLASSIFICATION	1.1009910502758163E-7	DESIGN
Make sure this is a defined parameter and check the incoming value type	WITHOUT_CLASSIFICATION	0.9999627210717794	WITHOUT_CLASSIFICATION	3.7278928220660516E-5	DESIGN
for each of the defined parameters, make sure its value has been set	WITHOUT_CLASSIFICATION	0.999998059397469	WITHOUT_CLASSIFICATION	1.940602531034768E-6	DESIGN
we never need to apply locks to the SQL	WITHOUT_CLASSIFICATION	0.9998946149632231	WITHOUT_CLASSIFICATION	1.0538503677682335E-4	DESIGN
inserts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999938135905551	WITHOUT_CLASSIFICATION	6.186409444914195E-6	DESIGN
deletes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999631116868232	WITHOUT_CLASSIFICATION	3.6888313176720014E-5	DESIGN
during deserialization, we need to reconnect all proxies and collections to this session, as well as the EntityEntry and CollectionEntry instances; these associations are transient because serialization is used for different things.	WITHOUT_CLASSIFICATION	0.999233967153395	WITHOUT_CLASSIFICATION	7.660328466049111E-4	DESIGN
updates ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999996585477447	WITHOUT_CLASSIFICATION	3.4145225529935037E-6	DESIGN
loading ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999987802067022	WITHOUT_CLASSIFICATION	1.2197932978073754E-6	DESIGN
final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999921347304419	WITHOUT_CLASSIFICATION	7.865269558097145E-6	DESIGN
final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999921347304419	WITHOUT_CLASSIFICATION	7.865269558097145E-6	DESIGN
first, try to load it from the temp PC associated to this SS	WITHOUT_CLASSIFICATION	0.9999979519466938	WITHOUT_CLASSIFICATION	2.0480533061010817E-6	DESIGN
if the metadata allowed proxy creation and caller did not request forceful eager loading, generate a proxy	WITHOUT_CLASSIFICATION	0.9999999993816245	WITHOUT_CLASSIFICATION	6.183754682701152E-10	DESIGN
otherwise immediately materialize it	WITHOUT_CLASSIFICATION	0.9997931062690846	WITHOUT_CLASSIFICATION	2.0689373091540363E-4	DESIGN
/	WITHOUT_CLASSIFICATION	0.9998642377194608	WITHOUT_CLASSIFICATION	1.3576228053929797E-4	DESIGN
no auto-flushing to support in stateless session	WITHOUT_CLASSIFICATION	0.9996457996136843	WITHOUT_CLASSIFICATION	3.5420038631571275E-4	DESIGN
after setting values to object, entityMode	WITHOUT_CLASSIFICATION	0.9999893239779027	WITHOUT_CLASSIFICATION	1.067602209721234E-5	DESIGN
for EJB3	WITHOUT_CLASSIFICATION	0.9999430013676246	WITHOUT_CLASSIFICATION	5.699863237537333E-5	DESIGN
just ignore	WITHOUT_CLASSIFICATION	0.9999934576444044	WITHOUT_CLASSIFICATION	6.542355595670358E-6	DESIGN
do a check	WITHOUT_CLASSIFICATION	0.9995092589964525	WITHOUT_CLASSIFICATION	4.90741003547588E-4	DESIGN
saveOrUpdate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999719014849	WITHOUT_CLASSIFICATION	2.809851505103799E-8	DESIGN
update() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999300146266	WITHOUT_CLASSIFICATION	6.998537337204143E-8	DESIGN
lock() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999012322679	WITHOUT_CLASSIFICATION	9.876773222743758E-8	DESIGN
persist() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998122348821	WITHOUT_CLASSIFICATION	1.87765117943638E-7	DESIGN
persistOnFlush() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999860662949	WITHOUT_CLASSIFICATION	1.3933705104888026E-7	DESIGN
merge() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999183974686	WITHOUT_CLASSIFICATION	8.160253134991323E-8	DESIGN
saveOrUpdateCopy() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998632776855	WITHOUT_CLASSIFICATION	1.3672231445291188E-7	DESIGN
delete() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998920633024	WITHOUT_CLASSIFICATION	1.0793669752275867E-7	DESIGN
load()/get() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999365407858	WITHOUT_CLASSIFICATION	6.345921418767163E-8	DESIGN
refresh() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999505992286	WITHOUT_CLASSIFICATION	4.9400771389402126E-8	DESIGN
replicate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992097720376	WITHOUT_CLASSIFICATION	7.902279625423533E-7	DESIGN
do not auto-flush while outside a transaction	WITHOUT_CLASSIFICATION	0.9999631506585388	WITHOUT_CLASSIFICATION	3.6849341461132094E-5	DESIGN
this is an internal error of some sort...	WITHOUT_CLASSIFICATION	0.9999849584068988	WITHOUT_CLASSIFICATION	1.5041593101110575E-5	DESIGN
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9997079438389698	WITHOUT_CLASSIFICATION	2.9205616103021435E-4	DESIGN
only collections belonging to deleted entities are allowed to be dereferenced in the case of orphan delete	WITHOUT_CLASSIFICATION	0.9999914484429674	WITHOUT_CLASSIFICATION	8.551557032570287E-6	DESIGN
if it was previously unreferenced, we need to flush in order to get its state into the database in order to execute query	WITHOUT_CLASSIFICATION	0.9998252856799023	WITHOUT_CLASSIFICATION	1.7471432009775215E-4	DESIGN
not for internal use:	WITHOUT_CLASSIFICATION	0.9847162432973626	WITHOUT_CLASSIFICATION	0.015283756702637326	DESIGN
otherwise, we only need to flush if there are in-memory changes to the queried tables	WITHOUT_CLASSIFICATION	0.9999964272378719	WITHOUT_CLASSIFICATION	3.572762128255335E-6	DESIGN
might need to run a different filter entirely after the flush because the collection role may have changed	WITHOUT_CLASSIFICATION	0.9984575833678773	WITHOUT_CLASSIFICATION	0.0015424166321228055	DESIGN
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9997079438389698	WITHOUT_CLASSIFICATION	2.9205616103021435E-4	DESIGN
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9997079438389698	WITHOUT_CLASSIFICATION	2.9205616103021435E-4	DESIGN
if it is initialized, see if the underlying instance is contained, since we need to account for the fact that it might have been evicted	WITHOUT_CLASSIFICATION	0.8954165623016177	WITHOUT_CLASSIFICATION	0.10458343769838233	DESIGN
basically just an adapted copy of find(CriteriaImpl)	WITHOUT_CLASSIFICATION	0.999997146656739	WITHOUT_CLASSIFICATION	2.8533432610800645E-6	DESIGN
it is possible for this method to be called during flush processing, so make certain that we do not accidently initialize an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9997069728474384	WITHOUT_CLASSIFICATION	2.9302715256161304E-4	DESIGN
nothing to do in a stateful session	WITHOUT_CLASSIFICATION	0.9997487703559209	WITHOUT_CLASSIFICATION	2.5122964407908505E-4	DESIGN
ignore	WITHOUT_CLASSIFICATION	0.9999779527837916	WITHOUT_CLASSIFICATION	2.2047216208400962E-5	DESIGN
ignore this error for now	WITHOUT_CLASSIFICATION	0.9999986002787377	WITHOUT_CLASSIFICATION	1.3997212623370981E-6	DESIGN
we need to writeObject() on this since interceptor is user defined	WITHOUT_CLASSIFICATION	0.9999904337160529	WITHOUT_CLASSIFICATION	9.566283947086653E-6	DESIGN
the old-time stand-by...	WITHOUT_CLASSIFICATION	0.9999991258258523	WITHOUT_CLASSIFICATION	8.741741478425257E-7	DESIGN
parameter bind values...	WITHOUT_CLASSIFICATION	0.9999983132503429	WITHOUT_CLASSIFICATION	1.686749657035871E-6	DESIGN
Parameter handling code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9963903520026617	WITHOUT_CLASSIFICATION	0.0036096479973383726	DESIGN
prepend value and type list with null for any positions before the wanted position.	WITHOUT_CLASSIFICATION	0.9999916773337695	WITHOUT_CLASSIFICATION	8.322666230486457E-6	DESIGN
Execution methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998197069485052	WITHOUT_CLASSIFICATION	1.8029305149489764E-4	DESIGN
we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9999409076731923	WITHOUT_CLASSIFICATION	5.909232680767818E-5	DESIGN
we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9999409076731923	WITHOUT_CLASSIFICATION	5.909232680767818E-5	DESIGN
we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9998665176555155	WITHOUT_CLASSIFICATION	1.3348234448449243E-4	DESIGN
we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9998665176555155	WITHOUT_CLASSIFICATION	1.3348234448449243E-4	DESIGN
FieldInterceptor impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997087796077017	WITHOUT_CLASSIFICATION	2.9122039229840694E-4	DESIGN
subclass accesses ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999864862495401	WITHOUT_CLASSIFICATION	1.3513750459831608E-5	DESIGN
let's assume that there is only one lazy fetch group, for now!	WITHOUT_CLASSIFICATION	0.9999999986721906	WITHOUT_CLASSIFICATION	1.3278094539585458E-9	DESIGN
FieldHandler impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9987424157239623	WITHOUT_CLASSIFICATION	0.001257584276037782	DESIGN
should not need to grow beyond the size of the total number of columns in the rs	WITHOUT_CLASSIFICATION	0.9999919069852881	WITHOUT_CLASSIFICATION	8.093014711839603E-6	DESIGN
should probably no-op commit/rollback here, at least in JTA scenarios	WITHOUT_CLASSIFICATION	0.9938467900029156	WITHOUT_CLASSIFICATION	0.006153209997084277	DESIGN
Base Expectation impls ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999976003691124	WITHOUT_CLASSIFICATION	2.399630887537976E-6	DESIGN
Various Expectation instances ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999989636930026	WITHOUT_CLASSIFICATION	1.036306997403861E-5	DESIGN
explicitly perform no checking...	WITHOUT_CLASSIFICATION	0.9933976042868864	WITHOUT_CLASSIFICATION	0.00660239571311357	DESIGN
used from testsuite	WITHOUT_CLASSIFICATION	0.9999981441306759	WITHOUT_CLASSIFICATION	1.8558693241356938E-6	DESIGN
assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.999999670720017	WITHOUT_CLASSIFICATION	3.2927998302051645E-7	DESIGN
package	WITHOUT_CLASSIFICATION	0.999727668212874	WITHOUT_CLASSIFICATION	2.7233178712603856E-4	DESIGN
register synch; stats.connect()	WITHOUT_CLASSIFICATION	0.9999976084605432	WITHOUT_CLASSIFICATION	2.3915394568498335E-6	DESIGN
noncritical, swallow and let the other propagate!	WITHOUT_CLASSIFICATION	0.9968785590825372	WITHOUT_CLASSIFICATION	0.003121440917462779	DESIGN
calls executeBatch()	WITHOUT_CLASSIFICATION	0.9999994336373297	WITHOUT_CLASSIFICATION	5.663626702606122E-7	DESIGN
no big deal	WITHOUT_CLASSIFICATION	0.9999954880467891	WITHOUT_CLASSIFICATION	4.511953210905104E-6	DESIGN
no big deal	WITHOUT_CLASSIFICATION	0.9999954880467891	WITHOUT_CLASSIFICATION	4.511953210905104E-6	DESIGN
no big deal	WITHOUT_CLASSIFICATION	0.9999954880467891	WITHOUT_CLASSIFICATION	4.511953210905104E-6	DESIGN
sybase driver (jConnect) throwing NPE here in certain cases, but we'll just handle the general "unexpected" case	WITHOUT_CLASSIFICATION	0.9998762714995034	WITHOUT_CLASSIFICATION	1.2372850049651186E-4	DESIGN
see explanation above...	WITHOUT_CLASSIFICATION	0.9999983785752696	WITHOUT_CLASSIFICATION	1.6214247303244481E-6	DESIGN
If we are in the process of releasing, no sense checking for aggressive-release possibility.	WITHOUT_CLASSIFICATION	0.9999999876796908	WITHOUT_CLASSIFICATION	1.2320309183383066E-8	DESIGN
EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999955769942547	WITHOUT_CLASSIFICATION	4.423005745294257E-6	DESIGN
ResultSet impl ("overridden") ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996240823986288	WITHOUT_CLASSIFICATION	3.759176013711905E-4	DESIGN
ResultSet impl (delegated) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998186329786602	WITHOUT_CLASSIFICATION	1.8136702133973888E-4	DESIGN
refer to comment in StatefulPersistenceContext.addCollection()	WITHOUT_CLASSIFICATION	0.9999995753554813	WITHOUT_CLASSIFICATION	4.246445187378327E-7	DESIGN
ConnectionManager.Callback implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999600061665532	WITHOUT_CLASSIFICATION	3.9993833446656845E-5	DESIGN
Note : success = false, because we don't know the outcome of the transaction	WITHOUT_CLASSIFICATION	0.999999469188467	WITHOUT_CLASSIFICATION	5.308115328942471E-7	DESIGN
we already have a callback registered; either a local (org.hibernate.Transaction) transaction has accepted callback responsibilities, or we have previously registered a transaction synch.	WITHOUT_CLASSIFICATION	0.9999725793789775	WITHOUT_CLASSIFICATION	2.7420621022438164E-5	DESIGN
the configured transaction-factory says it only supports local callback mode, so no sense attempting to register a JTA Synchronization	WITHOUT_CLASSIFICATION	0.9999509459879987	WITHOUT_CLASSIFICATION	4.905401200124349E-5	DESIGN
transactions marked for rollback-only cause some TM impls to throw exceptions	WITHOUT_CLASSIFICATION	0.9999861179756638	WITHOUT_CLASSIFICATION	1.3882024336242289E-5	DESIGN
serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992564448633	WITHOUT_CLASSIFICATION	7.435551366131835E-7	DESIGN
postInitialize() will be called after initialization	WITHOUT_CLASSIFICATION	0.9999999833303684	WITHOUT_CLASSIFICATION	1.666963157359942E-8	DESIGN
cannot handle single quotes	WITHOUT_CLASSIFICATION	0.9999812539359563	WITHOUT_CLASSIFICATION	1.874606404376758E-5	DESIGN
todo : for 4.0 private static final Logger log = LoggerFactory.getLogger( SQLStatementLogger.class ); this is the legacy logging 'category'...	WITHOUT_CLASSIFICATION	0.9998786385532127	WITHOUT_CLASSIFICATION	1.2136144678737784E-4	DESIGN
note that for sequential scrolling, we make the assumption that the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999945594423136	WITHOUT_CLASSIFICATION	5.44055768634096E-6	DESIGN
don't even bother trying to read further	WITHOUT_CLASSIFICATION	0.9998982284168286	WITHOUT_CLASSIFICATION	1.0177158317136008E-4	DESIGN
don't even bother trying to read any further	WITHOUT_CLASSIFICATION	0.9999040737897646	WITHOUT_CLASSIFICATION	9.592621023530572E-5	DESIGN
position cursor to the last row	WITHOUT_CLASSIFICATION	0.9999969113697661	WITHOUT_CLASSIFICATION	3.088630233915447E-6	DESIGN
sequentially read the result set in reverse until we recognize a change in the key value. At that point, we are pointed at the last physical sequential row for the logical row in which we are interested in processing	WITHOUT_CLASSIFICATION	0.9999998391269559	WITHOUT_CLASSIFICATION	1.6087304414021748E-7	DESIGN
Read backwards until we read past the first physical sequential row with the key we are interested in loading	WITHOUT_CLASSIFICATION	0.9999999782145753	WITHOUT_CLASSIFICATION	2.1785424750921038E-8	DESIGN
Finally, read ahead one row to position result set cursor at the first physical row we are interested in loading	WITHOUT_CLASSIFICATION	0.9998800819501331	WITHOUT_CLASSIFICATION	1.1991804986688929E-4	DESIGN
now get an existing proxy for each row element (if there is one)	WITHOUT_CLASSIFICATION	0.9999989926402275	WITHOUT_CLASSIFICATION	1.007359772482161E-6	DESIGN
force the proxy to resolve itself	WITHOUT_CLASSIFICATION	0.999979181954367	WITHOUT_CLASSIFICATION	2.0818045633021063E-5	DESIGN
this is equivalent to the old behavior...	WITHOUT_CLASSIFICATION	0.9996849584538378	WITHOUT_CLASSIFICATION	3.150415461623337E-4	DESIGN
if null, owner will be retrieved from session	WITHOUT_CLASSIFICATION	0.9999804663460591	WITHOUT_CLASSIFICATION	1.9533653940885354E-5	DESIGN
final String queryString,	WITHOUT_CLASSIFICATION	0.9999872114208227	WITHOUT_CLASSIFICATION	1.2788579177283041E-5	DESIGN
if it was a reference to self, don't need to nullify unless we are using native id generation, in which case we definitely need to nullify	WITHOUT_CLASSIFICATION	0.9999999991711281	WITHOUT_CLASSIFICATION	8.288718484351153E-10	DESIGN
end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.999964066994761	WITHOUT_CLASSIFICATION	3.5933005239051356E-5	DESIGN
in an effort to avoid concurrent-modification-exceptions (from potential recursive calls back through here as a result of the eventual call to PersistentCollection#endRead), we scan the internal loadingCollections map for matches and store those matches in a temp collection. the temp collection is then used to "drive" the #endRead processing.	WITHOUT_CLASSIFICATION	0.9998737094099023	WITHOUT_CLASSIFICATION	1.2629059009769191E-4	DESIGN
we can reuse it for each row	WITHOUT_CLASSIFICATION	0.9999943877955515	WITHOUT_CLASSIFICATION	5.612204448593244E-6	DESIGN
can't reuse in this case	WITHOUT_CLASSIFICATION	0.9999911042890841	WITHOUT_CLASSIFICATION	8.895710915893476E-6	DESIGN
First we need to suspend any current JTA transaction and obtain a JDBC connection	WITHOUT_CLASSIFICATION	0.9943769178314265	WITHOUT_CLASSIFICATION	0.005623082168573539	DESIGN
getResultList(results);	WITHOUT_CLASSIFICATION	0.9999995085768828	WITHOUT_CLASSIFICATION	4.914231171636575E-7	DESIGN
if we only returned one entity, query by key is more efficient	WITHOUT_CLASSIFICATION	0.999949313761905	WITHOUT_CLASSIFICATION	5.068623809507514E-5	DESIGN
a collection loaded in the current session can not possibly be the collection belonging to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999998522919974	WITHOUT_CLASSIFICATION	1.477080026093175E-7	DESIGN
handle empty collection	WITHOUT_CLASSIFICATION	0.9999494513137639	WITHOUT_CLASSIFICATION	5.0548686236111296E-5	DESIGN
else no collection element, but also no owner	WITHOUT_CLASSIFICATION	0.9999986061051565	WITHOUT_CLASSIFICATION	1.3938948435215533E-6	DESIGN
handle empty collections	WITHOUT_CLASSIFICATION	0.9999634900507723	WITHOUT_CLASSIFICATION	3.6509949227694127E-5	DESIGN
else this is not a collection initializer (and empty collections will be detected by looking for the owner's identifier in the result set)	WITHOUT_CLASSIFICATION	0.9999976646823467	WITHOUT_CLASSIFICATION	2.335317653301294E-6	DESIGN
validate() instances of Validatable	WITHOUT_CLASSIFICATION	0.9999890626335081	WITHOUT_CLASSIFICATION	1.093736649185879E-5	DESIGN
if we know there is exactly 1 row, we can skip. it would be great if we could _always_ skip this; it is a problem for <key-many-to-one>	WITHOUT_CLASSIFICATION	0.704705025418795	DESIGN	0.2952949745812052	WITHOUT_CLASSIFICATION
remove all collections for the entity from the session-level cache	WITHOUT_CLASSIFICATION	0.9999582389260839	WITHOUT_CLASSIFICATION	4.1761073916096024E-5	DESIGN
null version means the object is in the process of being loaded somewhere else in the ResultSet	WITHOUT_CLASSIFICATION	0.9999829397438302	WITHOUT_CLASSIFICATION	1.7060256169695397E-5	DESIGN
problematic for <key-many-to-one>!	WITHOUT_CLASSIFICATION	0.9993012668899535	WITHOUT_CLASSIFICATION	6.987331100465946E-4	DESIGN
use the id passed in	WITHOUT_CLASSIFICATION	0.9999999870567151	WITHOUT_CLASSIFICATION	1.2943284843290676E-8	DESIGN
do nothing	WITHOUT_CLASSIFICATION	0.9999990014194567	WITHOUT_CLASSIFICATION	9.985805433421834E-7	DESIGN
prefer re-generation of identity!	WITHOUT_CLASSIFICATION	0.9999988987016206	WITHOUT_CLASSIFICATION	1.10129837937286E-6	DESIGN
no point doing this if NONE was requested	WITHOUT_CLASSIFICATION	0.9999890633276858	WITHOUT_CLASSIFICATION	1.0936672314188923E-5	DESIGN
If the object is already loaded, return the loaded one	WITHOUT_CLASSIFICATION	0.999999218605858	WITHOUT_CLASSIFICATION	7.813941419328959E-7	DESIGN
its already loaded so don't need to hydrate it	WITHOUT_CLASSIFICATION	0.9999681059334559	WITHOUT_CLASSIFICATION	3.18940665440876E-5	DESIGN
cascade the refresh prior to refreshing this entity	WITHOUT_CLASSIFICATION	0.9998858882412074	WITHOUT_CLASSIFICATION	1.1411175879263141E-4	DESIGN
the load() which takes an entity does not pass an entityName	WITHOUT_CLASSIFICATION	0.9999993331367304	WITHOUT_CLASSIFICATION	6.668632695213862E-7	DESIGN
we only check the version when _upgrading_ lock modes	WITHOUT_CLASSIFICATION	0.9999999778570353	WITHOUT_CLASSIFICATION	2.2142964607009496E-8	DESIGN
look for a proxy	WITHOUT_CLASSIFICATION	0.9999982659275853	WITHOUT_CLASSIFICATION	1.7340724147279377E-6	DESIGN
we need to upgrade the lock mode to the mode requested	WITHOUT_CLASSIFICATION	0.9997746167370709	WITHOUT_CLASSIFICATION	2.2538326292907584E-4	DESIGN
its the given optional object	WITHOUT_CLASSIFICATION	0.9999996842942814	WITHOUT_CLASSIFICATION	3.1570571855164174E-7	DESIGN
instantiate a new instance	WITHOUT_CLASSIFICATION	0.999855823542727	WITHOUT_CLASSIFICATION	1.441764572730748E-4	DESIGN
need to hydrate it.	WITHOUT_CLASSIFICATION	0.9975798094574003	WITHOUT_CLASSIFICATION	0.0024201905425996787	DESIGN
return a newly loaded object	WITHOUT_CLASSIFICATION	0.9999921965187363	WITHOUT_CLASSIFICATION	7.803481263689419E-6	DESIGN
will be ignored, using the existing Entry instead	WITHOUT_CLASSIFICATION	0.9999999923820821	WITHOUT_CLASSIFICATION	7.61791789317323E-9	DESIGN
key is an entity involved with the operation performed by the listener; value can be either a copy of the entity or the entity itself	WITHOUT_CLASSIFICATION	0.9999998285663083	WITHOUT_CLASSIFICATION	1.714336917685358E-7	DESIGN
materialize associations (and initialize the object) later	WITHOUT_CLASSIFICATION	0.9999203393177974	WITHOUT_CLASSIFICATION	7.966068220262743E-5	DESIGN
Get the persister for the _subclass_	WITHOUT_CLASSIFICATION	0.9999991556038851	WITHOUT_CLASSIFICATION	8.443961147864187E-7	DESIGN
ok in normal Hibernate usage to delete a detached entity; JPA however forbids it, thus this is a hook for HEM to affect this behavior	WITHOUT_CLASSIFICATION	0.9983585834999043	WITHOUT_CLASSIFICATION	0.0016414165000956924	DESIGN
the entry will be removed after the flush, and will no longer override the stale snapshot This is now handled by removeEntity() in EntityDeleteAction persistenceContext.removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.987583661272606	WITHOUT_CLASSIFICATION	0.012416338727393932	DESIGN
addInitializedCollection(collection, persister, id);	WITHOUT_CLASSIFICATION	0.999999743798854	WITHOUT_CLASSIFICATION	2.562011460155794E-7	DESIGN
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.999998359817631	WITHOUT_CLASSIFICATION	1.640182369077347E-6	DESIGN
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.999998359817631	WITHOUT_CLASSIFICATION	1.640182369077347E-6	DESIGN
|| oj.getJoinable().consumesCollectionAlias()	WITHOUT_CLASSIFICATION	0.9999999102267496	WITHOUT_CLASSIFICATION	8.97732503775987E-8	DESIGN
here we do not bother with the discriminator.	WITHOUT_CLASSIFICATION	0.9998959864440424	WITHOUT_CLASSIFICATION	1.0401355595758617E-4	DESIGN
Code to handle subclasses of topClass	WITHOUT_CLASSIFICATION	0.9997994867486796	WITHOUT_CLASSIFICATION	2.0051325132042157E-4	DESIGN
woops we got an instance of another class hierarchy branch	WITHOUT_CLASSIFICATION	0.9987380380865323	WITHOUT_CLASSIFICATION	0.001261961913467712	DESIGN
we can go straight to the first required row	WITHOUT_CLASSIFICATION	0.999967665051079	WITHOUT_CLASSIFICATION	3.233494892101251E-5	DESIGN
we need to step through the rows one row at a time (slow)	WITHOUT_CLASSIFICATION	0.9999657058699557	WITHOUT_CLASSIFICATION	3.4294130044300355E-5	DESIGN
synchronized to avoid multi-thread access issues; defined as method synch to avoid potential deadlock issues due to nature of code.	WITHOUT_CLASSIFICATION	0.9999996071928787	WITHOUT_CLASSIFICATION	3.928071211982449E-7	DESIGN
Allows various loaders (ok mainly the QueryLoader :) to check whether scrolling of their result set should be allowed. By default it is allowed.	WITHOUT_CLASSIFICATION	0.9999975371734606	WITHOUT_CLASSIFICATION	2.46282653944836E-6	DESIGN
before adding to collection!	WITHOUT_CLASSIFICATION	0.9999813733452625	WITHOUT_CLASSIFICATION	1.8626654737517398E-5	DESIGN
if the current depth is 0, the root thing being loaded is the many-to-many collection itself. Here, it is alright to use an inner join...	WITHOUT_CLASSIFICATION	0.9999999846143878	WITHOUT_CLASSIFICATION	1.5385612162092918E-8	DESIGN
operations which cascade as far as the collection also cascade to collection elements	WITHOUT_CLASSIFICATION	0.9999997166400618	WITHOUT_CLASSIFICATION	2.833599381544427E-7	DESIGN
simple, because we can't have a one-to-one or a collection (or even a property-ref) in a composite-element:	WITHOUT_CLASSIFICATION	0.9999998374350976	WITHOUT_CLASSIFICATION	1.6256490248071387E-7	DESIGN
a composite key	WITHOUT_CLASSIFICATION	0.9999992608524745	WITHOUT_CLASSIFICATION	7.391475254744459E-7	DESIGN
if no batch, use "foo = ? and bar = ?"	WITHOUT_CLASSIFICATION	0.9999367877693385	WITHOUT_CLASSIFICATION	6.32122306615341E-5	DESIGN
it must be a collection fetch	WITHOUT_CLASSIFICATION	0.9999767489937028	WITHOUT_CLASSIFICATION	2.3251006297130736E-5	DESIGN
needed later for many-to-many/filter application	WITHOUT_CLASSIFICATION	0.9836198682043861	WITHOUT_CLASSIFICATION	0.016380131795613966	DESIGN
&& etype.isReferenceToPrimaryKey()	WITHOUT_CLASSIFICATION	0.9999983081660181	WITHOUT_CLASSIFICATION	1.6918339820106193E-6	DESIGN
it might still need to apply a collection ordering based on a many-to-many defined order-by...	WITHOUT_CLASSIFICATION	0.8627687494955978	WITHOUT_CLASSIFICATION	0.13723125050440219	DESIGN
if a composite key, use "( (foo = ? and bar = ?) or (foo = ? and bar = ?) )" for batching TODO: unnecessary for databases with ANSI-style joins	WITHOUT_CLASSIFICATION	0.6141074834208908	WITHOUT_CLASSIFICATION	0.3858925165791093	DESIGN
belong to other persister belong to other persister	WITHOUT_CLASSIFICATION	0.9997432873655425	WITHOUT_CLASSIFICATION	2.5671263445753586E-4	DESIGN
we found it	WITHOUT_CLASSIFICATION	0.9999970255702337	WITHOUT_CLASSIFICATION	2.9744297662781267E-6	DESIGN
we can use an inner join for the many-to-many	WITHOUT_CLASSIFICATION	0.999998992585441	WITHOUT_CLASSIFICATION	1.007414559000314E-6	DESIGN
disable a join back to this same association	WITHOUT_CLASSIFICATION	0.9975773895072669	WITHOUT_CLASSIFICATION	0.002422610492733087	DESIGN
NOTE: unlike all other Loaders, this one is NOT multithreaded, or cacheable!!	WITHOUT_CLASSIFICATION	0.9998767927933188	WITHOUT_CLASSIFICATION	1.2320720668121271E-4	DESIGN
the user visible aliases, which are unknown to the superclass, these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999999474992358	WITHOUT_CLASSIFICATION	5.25007642719381E-8	DESIGN
root entity comes last	WITHOUT_CLASSIFICATION	0.9999888412534826	WITHOUT_CLASSIFICATION	1.1158746517385095E-5	DESIGN
deliberately ignore return value!	WITHOUT_CLASSIFICATION	0.9999925717312271	WITHOUT_CLASSIFICATION	7.428268772878406E-6	DESIGN
alias may be null EARLY EXIT	WITHOUT_CLASSIFICATION	0.999995823725758	WITHOUT_CLASSIFICATION	4.176274241977799E-6	DESIGN
if it is a compound path	WITHOUT_CLASSIFICATION	0.9999880541016214	WITHOUT_CLASSIFICATION	1.1945898378574352E-5	DESIGN
otherwise assume the parent is the the criteria that created us	WITHOUT_CLASSIFICATION	0.9999877698829623	WITHOUT_CLASSIFICATION	1.2230117037570256E-5	DESIGN
if its the root criteria, we are done	WITHOUT_CLASSIFICATION	0.9999928068549349	WITHOUT_CLASSIFICATION	7.193145065211617E-6	DESIGN
otherwise, recurse	WITHOUT_CLASSIFICATION	0.999927756207922	WITHOUT_CLASSIFICATION	7.224379207800723E-5	DESIGN
the criteria instance	WITHOUT_CLASSIFICATION	0.9999948248881676	WITHOUT_CLASSIFICATION	5.1751118323860644E-6	DESIGN
the entity name	WITHOUT_CLASSIFICATION	0.9999988515303917	WITHOUT_CLASSIFICATION	1.1484696082234053E-6	DESIGN
not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9999420604044053	WITHOUT_CLASSIFICATION	5.793959559465023E-5	DESIGN
not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9999420604044053	WITHOUT_CLASSIFICATION	5.793959559465023E-5	DESIGN
it refers to an alias of a projection	WITHOUT_CLASSIFICATION	0.999999424462599	WITHOUT_CLASSIFICATION	5.755374010724883E-7	DESIGN
should never happen, i think	WITHOUT_CLASSIFICATION	0.9999646862755103	WITHOUT_CLASSIFICATION	3.531372448967669E-5	DESIGN
Detect discriminator values...	WITHOUT_CLASSIFICATION	0.9997054464154631	WITHOUT_CLASSIFICATION	2.9455358453694264E-4	DESIGN
Convert the string value into the proper type.	WITHOUT_CLASSIFICATION	0.9999594338984926	WITHOUT_CLASSIFICATION	4.056610150728723E-5	DESIGN
and the qualifier is not the alias of this criteria -> check to see if we belong to some criteria other than the one that created us	WITHOUT_CLASSIFICATION	0.999808165905782	WITHOUT_CLASSIFICATION	1.918340942179149E-4	DESIGN
it does not refer to an alias of a projection, look for a property	WITHOUT_CLASSIFICATION	0.9999982717661983	WITHOUT_CLASSIFICATION	1.728233801803554E-6	DESIGN
Otherwise, this is an ordinary value.	WITHOUT_CLASSIFICATION	0.9999976503585585	WITHOUT_CLASSIFICATION	2.3496414415473893E-6	DESIGN
Currently not cachable if autodiscover types is in effect (e.g. "select ...")	WITHOUT_CLASSIFICATION	0.9984801781218817	WITHOUT_CLASSIFICATION	0.0015198218781182619	DESIGN
private final String[] sqlAliases; private final String[] sqlAliasSuffixes;	WITHOUT_CLASSIFICATION	0.9991867267968808	WITHOUT_CLASSIFICATION	8.132732031192414E-4	DESIGN
this is only needed (afaict) for ResultTransformer processing...	WITHOUT_CLASSIFICATION	0.9994901912667666	WITHOUT_CLASSIFICATION	5.098087332333404E-4	DESIGN
determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999987338121956	WITHOUT_CLASSIFICATION	1.266187804430415E-6	DESIGN
build an array with indices equal to the total number of actual returns in the result Hibernate will return for this query (scalars + non-scalars)	WITHOUT_CLASSIFICATION	0.9999808290034875	WITHOUT_CLASSIFICATION	1.917099651251637E-5	DESIGN
replace {....} with corresponding column aliases	WITHOUT_CLASSIFICATION	0.9998441492114526	WITHOUT_CLASSIFICATION	1.5585078854735927E-4	DESIGN
No additional open braces found in the string, append the rest of the string in its entirty and quit this loop	WITHOUT_CLASSIFICATION	0.9999977431098727	WITHOUT_CLASSIFICATION	2.256890127356445E-6	DESIGN
apend everything up until the next encountered open brace	WITHOUT_CLASSIFICATION	0.9999738791161227	WITHOUT_CLASSIFICATION	2.612088387729839E-5	DESIGN
it is a simple table alias {foo}	WITHOUT_CLASSIFICATION	0.9999997865215077	WITHOUT_CLASSIFICATION	2.1347849227043167E-7	DESIGN
passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9958969897565462	WITHOUT_CLASSIFICATION	0.004103010243453757	DESIGN
passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9958969897565462	WITHOUT_CLASSIFICATION	0.004103010243453757	DESIGN
The current alias is referencing the collection to be eagerly fetched	WITHOUT_CLASSIFICATION	0.9999999311528184	WITHOUT_CLASSIFICATION	6.884718161704502E-8	DESIGN
it is a property reference {foo.bar}	WITHOUT_CLASSIFICATION	0.9999987345355673	WITHOUT_CLASSIFICATION	1.2654644326099073E-6	DESIGN
Possibly handle :something parameters for the query ?	WITHOUT_CLASSIFICATION	0.9906847461488502	WITHOUT_CLASSIFICATION	0.009315253851149933	DESIGN
Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999993301683637	WITHOUT_CLASSIFICATION	6.698316363175854E-7	DESIGN
private final List persisters = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999995759305906	WITHOUT_CLASSIFICATION	4.240694094639603E-7	DESIGN
package	WITHOUT_CLASSIFICATION	0.999727668212874	WITHOUT_CLASSIFICATION	2.7233178712603856E-4	DESIGN
NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999820785402235	WITHOUT_CLASSIFICATION	1.7921459776540415E-5	DESIGN
private final List scalarTypes = new ArrayList(); private final List scalarColumnAliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999998710196457	WITHOUT_CLASSIFICATION	1.2898035430228692E-7	DESIGN
Now, process the returns	WITHOUT_CLASSIFICATION	0.9999946956432019	WITHOUT_CLASSIFICATION	5.304356798201219E-6	DESIGN
private List collectionOwnerAliases = new ArrayList(); private List collectionAliases = new ArrayList(); private List collectionPersisters = new ArrayList(); private List collectionResults = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999999976328282	WITHOUT_CLASSIFICATION	2.3671717847706867E-9	DESIGN
already been processed...	WITHOUT_CLASSIFICATION	0.9995720160864244	WITHOUT_CLASSIFICATION	4.279839135755623E-4	DESIGN
already been processed...	WITHOUT_CLASSIFICATION	0.9995720160864244	WITHOUT_CLASSIFICATION	4.279839135755623E-4	DESIGN
Make sure the owner alias is known...	WITHOUT_CLASSIFICATION	0.999998666162032	WITHOUT_CLASSIFICATION	1.3338379680149359E-6	DESIGN
first, break down the returns into maps keyed by alias so that role returns can be more easily resolved to their owners	WITHOUT_CLASSIFICATION	0.9977691133258323	WITHOUT_CLASSIFICATION	0.0022308866741677295	DESIGN
scalarColumnAliases.add( typeReturn.getColumnAlias() ); scalarTypes.add( typeReturn.getType() );	WITHOUT_CLASSIFICATION	0.9999995416653035	WITHOUT_CLASSIFICATION	4.5833469650147415E-7	DESIGN
If this return's alias has not been processed yet, do so b4 further processing of this return	WITHOUT_CLASSIFICATION	0.9999888665883643	WITHOUT_CLASSIFICATION	1.1133411635630826E-5	DESIGN
collectionOwnerAliases.add( ownerAlias );	WITHOUT_CLASSIFICATION	0.9999992096992897	WITHOUT_CLASSIFICATION	7.903007104024453E-7	DESIGN
for merging of versioned entities, we consider the version having been changed only when: 1) the two version values are different; AND 2) The target actually represents database state! This second condition is a special case which allows an entity to be merged during the same transaction (though during a seperate operation) in which it was originally persisted/saved	WITHOUT_CLASSIFICATION	0.9999616975239526	WITHOUT_CLASSIFICATION	3.8302476047514356E-5	DESIGN
this is the second pass through on a merge op, so here we limit the replacement to associations types (value types were already replaced during the first pass)	WITHOUT_CLASSIFICATION	0.8156786539591158	WITHOUT_CLASSIFICATION	0.18432134604088424	DESIGN
EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999945146029136	WITHOUT_CLASSIFICATION	5.4853970863463025E-6	DESIGN
cascade-save to collections AFTER the collection owner was saved	WITHOUT_CLASSIFICATION	0.9999565443683458	WITHOUT_CLASSIFICATION	4.3455631654312565E-5	DESIGN
Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.999966315046538	WITHOUT_CLASSIFICATION	3.3684953462001915E-5	DESIGN
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999995074967647	WITHOUT_CLASSIFICATION	4.925032353224667E-7	DESIGN
currently only the Hibernate-supplied DbTimestampType is supported here	WITHOUT_CLASSIFICATION	0.9987833878481507	WITHOUT_CLASSIFICATION	0.0012166121518493956	DESIGN
This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.999913980862278	WITHOUT_CLASSIFICATION	8.601913772205639E-5	DESIGN
make a new one	WITHOUT_CLASSIFICATION	0.9999610813881216	WITHOUT_CLASSIFICATION	3.891861187844004E-5	DESIGN
not so sure this is even valid subtree. but if it was, it'd represent two unrelated table references...	WITHOUT_CLASSIFICATION	0.9995630341749984	WITHOUT_CLASSIFICATION	4.369658250016582E-4	DESIGN
(NOT (GT a b) ) => (LE a b)	WITHOUT_CLASSIFICATION	0.9999967838234948	WITHOUT_CLASSIFICATION	3.2161765051334407E-6	DESIGN
private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9995932809932394	WITHOUT_CLASSIFICATION	4.0671900676062574E-4	DESIGN
include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9999994754200696	WITHOUT_CLASSIFICATION	5.245799304167753E-7	DESIGN
sqlResultTypes = selectClause.getSqlResultTypes();	WITHOUT_CLASSIFICATION	0.9999999921157048	WITHOUT_CLASSIFICATION	7.884295156366345E-9	DESIGN
by default	WITHOUT_CLASSIFICATION	0.9999887368621742	WITHOUT_CLASSIFICATION	1.1263137825856632E-5	DESIGN
This is now handled earlier in this method.	WITHOUT_CLASSIFICATION	0.9998591384272815	WITHOUT_CLASSIFICATION	1.4086157271861992E-4	DESIGN
-- Loader implementation --	WITHOUT_CLASSIFICATION	0.9999925182106257	WITHOUT_CLASSIFICATION	7.481789374354805E-6	DESIGN
-- Loader overrides --	WITHOUT_CLASSIFICATION	0.9999987884408502	WITHOUT_CLASSIFICATION	1.2115591497765805E-6	DESIGN
(NOT (IS_NULL a b) ) => (IS_NOT_NULL a b)	WITHOUT_CLASSIFICATION	0.9999960049107103	WITHOUT_CLASSIFICATION	3.995089289795306E-6	DESIGN
NONE, because its the requested lock mode, not the actual!	WITHOUT_CLASSIFICATION	0.9999998048855255	WITHOUT_CLASSIFICATION	1.9511447458078898E-7	DESIGN
meant to handle dynamic instantiation queries...	WITHOUT_CLASSIFICATION	0.9992971813788043	WITHOUT_CLASSIFICATION	7.028186211955783E-4	DESIGN
--- Query translator methods ---	WITHOUT_CLASSIFICATION	0.9994493857079131	WITHOUT_CLASSIFICATION	5.506142920869579E-4	DESIGN
-- Implementation private methods --	WITHOUT_CLASSIFICATION	0.9997541846167319	WITHOUT_CLASSIFICATION	2.45815383268027E-4	DESIGN
deduplicate unique constraints sharing the same columns this is needed by Hibernate Annotations since it creates automagically unique constraints for the user	WITHOUT_CLASSIFICATION	0.999973037858513	WITHOUT_CLASSIFICATION	2.6962141486970222E-5	DESIGN
Try to find out the name of the primary key to create it as identity if the IdentityGenerator is used	WITHOUT_CLASSIFICATION	0.9999412645794685	WITHOUT_CLASSIFICATION	5.873542053139737E-5	DESIGN
to support dialects that have their own identity data type	WITHOUT_CLASSIFICATION	0.9994424610184345	WITHOUT_CLASSIFICATION	5.575389815654637E-4	DESIGN
Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999977414381004	WITHOUT_CLASSIFICATION	2.2585618996973307E-6	DESIGN
used also for generation of FK names!	WITHOUT_CLASSIFICATION	0.9996935925300711	WITHOUT_CLASSIFICATION	3.064074699288521E-4	DESIGN
usually useless	WITHOUT_CLASSIFICATION	0.999869014479955	WITHOUT_CLASSIFICATION	1.3098552004500678E-4	DESIGN
added this caching as I noticed that getType() is being called multiple times...	WITHOUT_CLASSIFICATION	0.9997163315253949	WITHOUT_CLASSIFICATION	2.836684746051402E-4	DESIGN
do not add unique constraint on DB not supporting unique and nullable columns	WITHOUT_CLASSIFICATION	0.9999999057927317	WITHOUT_CLASSIFICATION	9.420726839313835E-8	DESIGN
for backward compatibility, disable this:	WITHOUT_CLASSIFICATION	0.9999996793119181	WITHOUT_CLASSIFICATION	3.2068808186385436E-7	DESIGN
may be final may be final may be final	WITHOUT_CLASSIFICATION	0.9999645211432624	WITHOUT_CLASSIFICATION	3.547885673752289E-5	DESIGN
may be final	WITHOUT_CLASSIFICATION	0.9999978250491737	WITHOUT_CLASSIFICATION	2.1749508263805758E-6	DESIGN
may be final	WITHOUT_CLASSIFICATION	0.9999978250491737	WITHOUT_CLASSIFICATION	2.1749508263805758E-6	DESIGN
Custom SQL	WITHOUT_CLASSIFICATION	0.9999436401445507	WITHOUT_CLASSIFICATION	5.6359855449165884E-5	DESIGN
Primary key constraint	WITHOUT_CLASSIFICATION	0.9999998692821788	WITHOUT_CLASSIFICATION	1.3071782119194683E-7	DESIGN
the root of the incoming property path matched one of the embedded composite identifier properties	WITHOUT_CLASSIFICATION	0.9999995596454373	WITHOUT_CLASSIFICATION	4.4035456275672423E-7	DESIGN
ignore it...	WITHOUT_CLASSIFICATION	0.9999928397209417	WITHOUT_CLASSIFICATION	7.160279058341744E-6	DESIGN
flat recursive algorithm	WITHOUT_CLASSIFICATION	0.9999983888284594	WITHOUT_CLASSIFICATION	1.6111715405710826E-6	DESIGN
an identifier mapper => getKey will be included in the getNonDuplicatedPropertyIterator() and checked later, so it needs to be excluded	WITHOUT_CLASSIFICATION	0.9999994691140384	WITHOUT_CLASSIFICATION	5.308859616103403E-7	DESIGN
if the hibernate-mapping did not specify a schema/catalog, use the defaults specified by properties - but note that if the schema/catalog were specified in hibernate-mapping, or as params, they will already be initialized and will override the values set here (they are in identifierGeneratorProperties)	WITHOUT_CLASSIFICATION	0.9999999979549785	WITHOUT_CLASSIFICATION	2.0450213993937983E-9	DESIGN
pass the entity-name, if not a collection-id	WITHOUT_CLASSIFICATION	0.9999995596005833	WITHOUT_CLASSIFICATION	4.4039941670781334E-7	DESIGN
Custom SQL	WITHOUT_CLASSIFICATION	0.9999436401445507	WITHOUT_CLASSIFICATION	5.6359855449165884E-5	DESIGN
Primary key constraint	WITHOUT_CLASSIFICATION	0.9999998692821788	WITHOUT_CLASSIFICATION	1.3071782119194683E-7	DESIGN
pass the column name (a generated id almost always has a single column)	WITHOUT_CLASSIFICATION	0.9999954033693113	WITHOUT_CLASSIFICATION	4.596630688721978E-6	DESIGN
needed to satisfy KeyValue	WITHOUT_CLASSIFICATION	0.9993648025398605	WITHOUT_CLASSIFICATION	6.3519746013952E-4	DESIGN
empty means no scoping	WITHOUT_CLASSIFICATION	0.9999757525328119	WITHOUT_CLASSIFICATION	2.4247467188149468E-5	DESIGN
index should be last column listed	WITHOUT_CLASSIFICATION	0.9999022152372247	WITHOUT_CLASSIFICATION	9.778476277530642E-5	DESIGN
if it is a formula index, use the element columns in the PK	WITHOUT_CLASSIFICATION	0.9999968788468894	WITHOUT_CLASSIFICATION	3.1211531107221738E-6	DESIGN
don't create a unique key, 'cos some databases don't like a UK on nullable columns	WITHOUT_CLASSIFICATION	0.9999926607301751	WITHOUT_CLASSIFICATION	7.33926982491924E-6	DESIGN
ArrayList list = new ArrayList();list.addAll( getKey().getConstraintColumns() );list.addAll( getIndex().getConstraintColumns() );getCollectionTable().createUniqueKey(list);	WITHOUT_CLASSIFICATION	0.999999999903448	WITHOUT_CLASSIFICATION	9.655197328201045E-11	DESIGN
}	WITHOUT_CLASSIFICATION	0.999834811237215	WITHOUT_CLASSIFICATION	1.651887627850538E-4	DESIGN
no foreign key element of for a one-to-many	WITHOUT_CLASSIFICATION	0.9999924288790982	WITHOUT_CLASSIFICATION	7.5711209017582145E-6	DESIGN
TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.6992132260136035	WITHOUT_CLASSIFICATION	0.3007867739863965	DESIGN
the case of a foreign key to something other than the pk is handled in createPropertyRefConstraints	WITHOUT_CLASSIFICATION	0.999999983990252	WITHOUT_CLASSIFICATION	1.600974794901297E-8	DESIGN
TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.6992132260136035	WITHOUT_CLASSIFICATION	0.3007867739863965	DESIGN
if the property mapping consists of all formulas, make it non-updateable	WITHOUT_CLASSIFICATION	0.9999999932467452	WITHOUT_CLASSIFICATION	6.753254846429724E-9	DESIGN
columnUpdateability.length==0 ||	WITHOUT_CLASSIFICATION	0.9999981190959678	WITHOUT_CLASSIFICATION	1.8809040321499857E-6	DESIGN
if the property mapping consists of all formulas, make it insertable	WITHOUT_CLASSIFICATION	0.9999996594208697	WITHOUT_CLASSIFICATION	3.405791304084274E-7	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999191506638	WITHOUT_CLASSIFICATION	8.084933621129471E-7	DESIGN
expected type is intrinsic here...	WITHOUT_CLASSIFICATION	0.9998993572013091	WITHOUT_CLASSIFICATION	1.0064279869095039E-4	DESIGN
}	WITHOUT_CLASSIFICATION	0.999834811237215	WITHOUT_CLASSIFICATION	1.651887627850538E-4	DESIGN
}	WITHOUT_CLASSIFICATION	0.999834811237215	WITHOUT_CLASSIFICATION	1.651887627850538E-4	DESIGN
return memberPersister.getPropertyType(propertyName);	WITHOUT_CLASSIFICATION	0.9999576893709303	WITHOUT_CLASSIFICATION	4.231062906965169E-5	DESIGN
return memberPersister.toColumns(alias, propertyName);	WITHOUT_CLASSIFICATION	0.9998603032114992	WITHOUT_CLASSIFICATION	1.396967885007868E-4	DESIGN
return memberPersister.getType();	WITHOUT_CLASSIFICATION	0.9999946597968604	WITHOUT_CLASSIFICATION	5.340203139583271E-6	DESIGN
&& !indexIsFormula	WITHOUT_CLASSIFICATION	0.9999972852721213	WITHOUT_CLASSIFICATION	2.7147278788317344E-6	DESIGN
return !isOneToMany();	WITHOUT_CLASSIFICATION	0.999996902812319	WITHOUT_CLASSIFICATION	3.0971876810669985E-6	DESIGN
instanceof AssociationType;	WITHOUT_CLASSIFICATION	0.9999612158064803	WITHOUT_CLASSIFICATION	3.878419351969224E-5	DESIGN
we need to determine the best way to know that two joinables represent a single many-to-many...	WITHOUT_CLASSIFICATION	0.9348368287097767	WITHOUT_CLASSIFICATION	0.06516317129022328	DESIGN
strip leading ','	WITHOUT_CLASSIFICATION	0.9999998973840031	WITHOUT_CLASSIFICATION	1.0261599684470364E-7	DESIGN
public boolean isSubselectLoadable();	WITHOUT_CLASSIFICATION	0.9999970334694225	WITHOUT_CLASSIFICATION	2.966530577578323E-6	DESIGN
KEY	WITHOUT_CLASSIFICATION	0.9991923148998233	WITHOUT_CLASSIFICATION	8.076851001766884E-4	DESIGN
columns	WITHOUT_CLASSIFICATION	0.9998288274706374	WITHOUT_CLASSIFICATION	1.7117252936260533E-4	DESIGN
SQL statements	WITHOUT_CLASSIFICATION	0.9999995294333386	WITHOUT_CLASSIFICATION	4.705666613232487E-7	DESIGN
extra information about the element type	WITHOUT_CLASSIFICATION	0.9999984608306222	WITHOUT_CLASSIFICATION	1.5391693777551576E-6	DESIGN
types	WITHOUT_CLASSIFICATION	0.9998350505025184	WITHOUT_CLASSIFICATION	1.649494974817044E-4	DESIGN
custom sql	WITHOUT_CLASSIFICATION	0.9999631842947885	WITHOUT_CLASSIFICATION	3.6815705211515275E-5	DESIGN
private final String unquotedIdentifierColumnName;	WITHOUT_CLASSIFICATION	0.9999537898597914	WITHOUT_CLASSIFICATION	4.6210140208442383E-5	DESIGN
dynamic filters specifically for many-to-many inside the collection	WITHOUT_CLASSIFICATION	0.9999934897308042	WITHOUT_CLASSIFICATION	6.510269195798906E-6	DESIGN
dynamic filters for the collection	WITHOUT_CLASSIFICATION	0.9999987037316456	WITHOUT_CLASSIFICATION	1.296268354372646E-6	DESIGN
NativeSQL: collect key column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999212228381905	WITHOUT_CLASSIFICATION	7.877716180940417E-5	DESIGN
unquotedKeyColumnNames = StringHelper.unQuote(keyColumnAliases);	WITHOUT_CLASSIFICATION	0.9999993805906302	WITHOUT_CLASSIFICATION	6.194093698815645E-7	DESIGN
ELEMENT	WITHOUT_CLASSIFICATION	0.9998828808309318	WITHOUT_CLASSIFICATION	1.171191690681235E-4	DESIGN
NativeSQL: collect element column and auto-aliases	WITHOUT_CLASSIFICATION	0.9997767731155872	WITHOUT_CLASSIFICATION	2.232268844128167E-4	DESIGN
INDEX AND ROW SELECT	WITHOUT_CLASSIFICATION	0.9999973420043498	WITHOUT_CLASSIFICATION	2.657995650167025E-6	DESIGN
NativeSQL: collect index column and auto-aliases	WITHOUT_CLASSIFICATION	0.9993728844445798	WITHOUT_CLASSIFICATION	6.271155554201135E-4	DESIGN
unquotedIdentifierColumnName = identifierColumnAlias;	WITHOUT_CLASSIFICATION	0.9999989737994653	WITHOUT_CLASSIFICATION	1.0262005346601646E-6	DESIGN
unquotedIdentifierColumnName = null;	WITHOUT_CLASSIFICATION	0.9999982682138664	WITHOUT_CLASSIFICATION	1.7317861336445517E-6	DESIGN
GENERATE THE SQL:	WITHOUT_CLASSIFICATION	0.9999528707240554	WITHOUT_CLASSIFICATION	4.712927594455125E-5	DESIGN
for non-arrays, we don't need to know the element class elementType.returnedClass();	WITHOUT_CLASSIFICATION	0.9999713797097528	WITHOUT_CLASSIFICATION	2.8620290247166796E-5	DESIGN
not all classpersisters implement PropertyMapping!	WITHOUT_CLASSIFICATION	0.9949732635706595	WITHOUT_CLASSIFICATION	0.005026736429340519	DESIGN
Handle any filters applied to this collection	WITHOUT_CLASSIFICATION	0.9996774049056129	WITHOUT_CLASSIFICATION	3.2259509438707206E-4	DESIGN
Handle any filters applied to this collection for many-to-many	WITHOUT_CLASSIFICATION	0.9990930828785624	WITHOUT_CLASSIFICATION	9.069171214375698E-4	DESIGN
if there is a user-specified loader, return that TODO: filters!?	WITHOUT_CLASSIFICATION	0.9387988656435001	WITHOUT_CLASSIFICATION	0.06120113435649975	DESIGN
Take care of any entities that might have been evicted!	WITHOUT_CLASSIFICATION	0.990558661778975	WITHOUT_CLASSIFICATION	0.009441338221024982	DESIGN
strip leading ','	WITHOUT_CLASSIFICATION	0.9999998973840031	WITHOUT_CLASSIFICATION	1.0261599684470364E-7	DESIGN
Run a subquery loader	WITHOUT_CLASSIFICATION	0.9997648162960887	WITHOUT_CLASSIFICATION	2.3518370391138464E-4	DESIGN
needed by arrays	WITHOUT_CLASSIFICATION	0.9999043461385406	WITHOUT_CLASSIFICATION	9.56538614593703E-5	DESIGN
TODO: something with formulas...	WITHOUT_CLASSIFICATION	0.9469383781823402	WITHOUT_CLASSIFICATION	0.053061621817659874	DESIGN
an assertion	WITHOUT_CLASSIFICATION	0.9999999820971845	WITHOUT_CLASSIFICATION	1.790281550530553E-8	DESIGN
Remove all the old entries	WITHOUT_CLASSIFICATION	0.9999910649969309	WITHOUT_CLASSIFICATION	8.935003069159801E-6	DESIGN
create all the new entries	WITHOUT_CLASSIFICATION	0.9999984965128722	WITHOUT_CLASSIFICATION	1.5034871278155734E-6	DESIGN
&& !indexIsFormula	WITHOUT_CLASSIFICATION	0.9999972852721213	WITHOUT_CLASSIFICATION	2.7147278788317344E-6	DESIGN
&& !indexIsFormula	WITHOUT_CLASSIFICATION	0.9999972852721213	WITHOUT_CLASSIFICATION	2.7147278788317344E-6	DESIGN
delete all the deleted entries	WITHOUT_CLASSIFICATION	0.9999972489917238	WITHOUT_CLASSIFICATION	2.7510082761227613E-6	DESIGN
insert all the new entries	WITHOUT_CLASSIFICATION	0.9999995708326896	WITHOUT_CLASSIFICATION	4.291673103835503E-7	DESIGN
==elementType ??	WITHOUT_CLASSIFICATION	0.9999681476970136	WITHOUT_CLASSIFICATION	3.1852302986293294E-5	DESIGN
update all the modified entries	WITHOUT_CLASSIFICATION	0.9999993146355036	WITHOUT_CLASSIFICATION	6.853644964521556E-7	DESIGN
identifier collections not supported for 1-to-many	WITHOUT_CLASSIFICATION	0.9999928021133461	WITHOUT_CLASSIFICATION	7.197886654005374E-6	DESIGN
update removed rows fks to null	WITHOUT_CLASSIFICATION	0.9997977708963864	WITHOUT_CLASSIFICATION	2.0222910361345845E-4	DESIGN
will still be issued when it used to be null	WITHOUT_CLASSIFICATION	0.9825753395923691	WITHOUT_CLASSIFICATION	0.017424660407630868	DESIGN
now update all changed or added rows fks	WITHOUT_CLASSIFICATION	0.999993460709127	WITHOUT_CLASSIFICATION	6.539290873055501E-6	DESIGN
buf.append( selectFragment( lhsAlias, "" ) )ignore suffix for collection columns!	WITHOUT_CLASSIFICATION	0.9999995273098015	WITHOUT_CLASSIFICATION	4.7269019863465893E-7	DESIGN
use suffix for the entity columns	WITHOUT_CLASSIFICATION	0.9999593161668197	WITHOUT_CLASSIFICATION	4.0683833180216155E-5	DESIGN
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999980267446145	WITHOUT_CLASSIFICATION	1.973255385516284E-6	DESIGN
private final String rootTableName;	WITHOUT_CLASSIFICATION	0.9998878211335955	WITHOUT_CLASSIFICATION	1.1217886640449881E-4	DESIGN
INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9999950336944341	WITHOUT_CLASSIFICATION	4.966305565828218E-6	DESIGN
Custom SQL	WITHOUT_CLASSIFICATION	0.9999436401445507	WITHOUT_CLASSIFICATION	5.6359855449165884E-5	DESIGN
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999980267446145	WITHOUT_CLASSIFICATION	1.973255385516284E-6	DESIGN
Execute the SQL:	WITHOUT_CLASSIFICATION	0.999987745323297	WITHOUT_CLASSIFICATION	1.2254676702952302E-5	DESIGN
This could also just be true all the time...	WITHOUT_CLASSIFICATION	0.9931570124639593	WITHOUT_CLASSIFICATION	0.006842987536040671	DESIGN
chop the last union (all)	WITHOUT_CLASSIFICATION	0.9999971434108964	WITHOUT_CLASSIFICATION	2.8565891034893266E-6	DESIGN
TODO: check this....	WITHOUT_CLASSIFICATION	0.8650527541450722	WITHOUT_CLASSIFICATION	0.13494724585492776	DESIGN
INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9999950336944341	WITHOUT_CLASSIFICATION	4.966305565828218E-6	DESIGN
properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9999856251901312	WITHOUT_CLASSIFICATION	1.4374809868685941E-5	DESIGN
the closure of all properties in the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999906370987428	WITHOUT_CLASSIFICATION	9.362901257290085E-6	DESIGN
the closure of all columns used by the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999594503590142	WITHOUT_CLASSIFICATION	4.054964098590134E-5	DESIGN
subclass discrimination works by assigning particular values to certain combinations of null primary key values in the outer join using an SQL CASE	WITHOUT_CLASSIFICATION	0.9999935893777778	WITHOUT_CLASSIFICATION	6.410622222146011E-6	DESIGN
MULTITABLES	WITHOUT_CLASSIFICATION	0.9999949463039846	WITHOUT_CLASSIFICATION	5.0536960154576985E-6	DESIGN
Custom sql	WITHOUT_CLASSIFICATION	0.9999486584359374	WITHOUT_CLASSIFICATION	5.1341564062546375E-5	DESIGN
subclass closure properties	WITHOUT_CLASSIFICATION	0.9999975129455314	WITHOUT_CLASSIFICATION	2.4870544685417757E-6	DESIGN
SUBCLASSES	WITHOUT_CLASSIFICATION	0.9998964943956687	WITHOUT_CLASSIFICATION	1.0350560433126967E-4	DESIGN
( (Column) model.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999172543456967	WITHOUT_CLASSIFICATION	8.274565430341869E-5	DESIGN
( (Column) sc.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999898407053669	WITHOUT_CLASSIFICATION	1.0159294633089216E-5	DESIGN
don't need subclass tables, because they can't appear in conditions	WITHOUT_CLASSIFICATION	0.9891641089206369	WITHOUT_CLASSIFICATION	0.010835891079363034	DESIGN
special case where we need to force incloude all subclass joins	WITHOUT_CLASSIFICATION	0.999990440015488	WITHOUT_CLASSIFICATION	9.559984512101766E-6	DESIGN
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999980267446145	WITHOUT_CLASSIFICATION	1.973255385516284E-6	DESIGN
properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9999856251901312	WITHOUT_CLASSIFICATION	1.4374809868685941E-5	DESIGN
the closure of all columns used by the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999594503590142	WITHOUT_CLASSIFICATION	4.054964098590134E-5	DESIGN
get em on the second pass!	WITHOUT_CLASSIFICATION	0.9999792140162843	WITHOUT_CLASSIFICATION	2.0785983715687936E-5	DESIGN
now look up the object we are really interested in! (this lets us correctly handle proxies and multi-row or multi-column queries)	WITHOUT_CLASSIFICATION	0.9999146833773633	WITHOUT_CLASSIFICATION	8.531662263668405E-5	DESIGN
discriminator column	WITHOUT_CLASSIFICATION	0.9999840432932482	WITHOUT_CLASSIFICATION	1.5956706751850732E-5	DESIGN
INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9999950336944341	WITHOUT_CLASSIFICATION	4.966305565828218E-6	DESIGN
private final Map propertyTableNumbersByName = new HashMap();	WITHOUT_CLASSIFICATION	0.999367419995544	WITHOUT_CLASSIFICATION	6.325800044560654E-4	DESIGN
CLASS + TABLE	WITHOUT_CLASSIFICATION	0.999999860417322	WITHOUT_CLASSIFICATION	1.3958267808046716E-7	DESIGN
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999345704441233	WITHOUT_CLASSIFICATION	6.542955587676046E-5	DESIGN
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999592704856262	WITHOUT_CLASSIFICATION	4.072951437382013E-5	DESIGN
SUBCLASSES	WITHOUT_CLASSIFICATION	0.9998964943956687	WITHOUT_CLASSIFICATION	1.0350560433126967E-4	DESIGN
Execute the SQL:	WITHOUT_CLASSIFICATION	0.999987745323297	WITHOUT_CLASSIFICATION	1.2254676702952302E-5	DESIGN
JOINS	WITHOUT_CLASSIFICATION	0.9999215748017344	WITHOUT_CLASSIFICATION	7.842519826568361E-5	DESIGN
propertyTableNumbersByName.put( prop.getName(), join );	WITHOUT_CLASSIFICATION	0.9999994937683848	WITHOUT_CLASSIFICATION	5.062316151898426E-7	DESIGN
Access cached SQL	WITHOUT_CLASSIFICATION	0.9999875055897535	WITHOUT_CLASSIFICATION	1.2494410246604812E-5	DESIGN
figure out which tables need to be fetched	WITHOUT_CLASSIFICATION	0.9999489522477125	WITHOUT_CLASSIFICATION	5.104775228755393E-5	DESIGN
figure out which columns are needed	WITHOUT_CLASSIFICATION	0.9998894439714794	WITHOUT_CLASSIFICATION	1.1055602852061881E-4	DESIGN
figure out which formulas are needed	WITHOUT_CLASSIFICATION	0.999912258195319	WITHOUT_CLASSIFICATION	8.77418046809686E-5	DESIGN
render the SQL	WITHOUT_CLASSIFICATION	0.9999716080186123	WITHOUT_CLASSIFICATION	2.8391981387679546E-5	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999191506638	WITHOUT_CLASSIFICATION	8.084933621129471E-7	DESIGN
moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999310622125852	WITHOUT_CLASSIFICATION	6.893778741473848E-5	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996868431604878	WITHOUT_CLASSIFICATION	3.1315683951216793E-4	DESIGN
The optional SQL string defined in the where attribute	WITHOUT_CLASSIFICATION	0.9999999904440936	WITHOUT_CLASSIFICATION	9.55590651799765E-9	DESIGN
information about lazy properties of this class	WITHOUT_CLASSIFICATION	0.9999681963846668	WITHOUT_CLASSIFICATION	3.180361533316754E-5	DESIGN
information about all properties in class hierarchy	WITHOUT_CLASSIFICATION	0.9999983155248419	WITHOUT_CLASSIFICATION	1.6844751582490986E-6	DESIGN
information about all columns/formulas in class hierarchy	WITHOUT_CLASSIFICATION	0.9999984695691542	WITHOUT_CLASSIFICATION	1.53043084586261E-6	DESIGN
dynamic filters attached to the class-level	WITHOUT_CLASSIFICATION	0.9999998752526538	WITHOUT_CLASSIFICATION	1.2474734615205248E-7	DESIGN
SQL strings	WITHOUT_CLASSIFICATION	0.999999213355574	WITHOUT_CLASSIFICATION	7.86644425942222E-7	DESIGN
for objects that came in via update()	WITHOUT_CLASSIFICATION	0.9999997724476257	WITHOUT_CLASSIFICATION	2.2755237428355585E-7	DESIGN
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999592704856262	WITHOUT_CLASSIFICATION	4.072951437382013E-5	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996868431604878	WITHOUT_CLASSIFICATION	3.1315683951216793E-4	DESIGN
IDENTIFIER	WITHOUT_CLASSIFICATION	0.9997165951183228	WITHOUT_CLASSIFICATION	2.834048816772063E-4	DESIGN
VERSION	WITHOUT_CLASSIFICATION	0.9999359651505436	WITHOUT_CLASSIFICATION	6.403484945638792E-5	DESIGN
WHERE STRING	WITHOUT_CLASSIFICATION	0.9999968254181957	WITHOUT_CLASSIFICATION	3.174581804242688E-6	DESIGN
SUBCLASS PROPERTY CLOSURE	WITHOUT_CLASSIFICATION	0.9999979598306468	WITHOUT_CLASSIFICATION	2.040169353255228E-6	DESIGN
before add :-)	WITHOUT_CLASSIFICATION	0.9999954976673989	WITHOUT_CLASSIFICATION	4.502332601023547E-6	DESIGN
Handle any filters applied to the class level	WITHOUT_CLASSIFICATION	0.9999934640108834	WITHOUT_CLASSIFICATION	6.5359891166051285E-6	DESIGN
only one-to-one is lazy fetched	WITHOUT_CLASSIFICATION	0.9999993674229579	WITHOUT_CLASSIFICATION	6.325770421537197E-7	DESIGN
note early exit here:	WITHOUT_CLASSIFICATION	0.9980279128583907	WITHOUT_CLASSIFICATION	0.001972087141609335	DESIGN
object have been loaded with setReadOnly(true); HHH-2236	WITHOUT_CLASSIFICATION	0.9999875764902444	WITHOUT_CLASSIFICATION	1.2423509755683026E-5	DESIGN
NOTE: this assumes something about how propertySelectFragment is implemented by the subclass!	WITHOUT_CLASSIFICATION	0.9771837597247645	WITHOUT_CLASSIFICATION	0.022816240275235513	DESIGN
strip leading ", "	WITHOUT_CLASSIFICATION	0.9999998623902312	WITHOUT_CLASSIFICATION	1.376097687633601E-7	DESIGN
if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999989955036785	WITHOUT_CLASSIFICATION	1.0044963214669144E-6	DESIGN
otherwise return the "hydrated" state (ie. associations are not resolved)	WITHOUT_CLASSIFICATION	0.9948102818809151	WITHOUT_CLASSIFICATION	0.005189718119084874	DESIGN
null owner ok??	WITHOUT_CLASSIFICATION	0.9998314218686978	WITHOUT_CLASSIFICATION	1.6857813130222014E-4	DESIGN
null sql means that the only lazy properties are shared PK one-to-one associations which are handled differently in the Type#nullSafeGet code...	WITHOUT_CLASSIFICATION	0.9948176053141693	WITHOUT_CLASSIFICATION	0.005182394685830622	DESIGN
Create a new FROM node for the referenced class.	WITHOUT_CLASSIFICATION	0.9999977021452607	WITHOUT_CLASSIFICATION	2.29785473926737E-6	DESIGN
the difficulty here is exactly what do we update in order to force the version to be incremented in the db...	WITHOUT_CLASSIFICATION	0.9999955282262382	WITHOUT_CLASSIFICATION	4.471773761863728E-6	DESIGN
performance op to avoid the array search	WITHOUT_CLASSIFICATION	0.9998889571470814	WITHOUT_CLASSIFICATION	1.1104285291860511E-4	DESIGN
properly handle property-ref-based associations	WITHOUT_CLASSIFICATION	0.9999605442288844	WITHOUT_CLASSIFICATION	3.945577111562011E-5	DESIGN
Enable for HHH-440, which we don't like:	WITHOUT_CLASSIFICATION	0.9999618165303988	WITHOUT_CLASSIFICATION	3.8183469601075985E-5	DESIGN
ALIASES	WITHOUT_CLASSIFICATION	0.9999022525795708	WITHOUT_CLASSIFICATION	9.77474204292228E-5	DESIGN
aliases named identifier ( alias.idname )	WITHOUT_CLASSIFICATION	0.9999955220390654	WITHOUT_CLASSIFICATION	4.477960934610229E-6	DESIGN
aliases for composite-id's	WITHOUT_CLASSIFICATION	0.9999993783027499	WITHOUT_CLASSIFICATION	6.216972501007361E-7	DESIGN
Fetch embedded identifiers propertynames from the "virtual" identifier component	WITHOUT_CLASSIFICATION	0.9999939245341906	WITHOUT_CLASSIFICATION	6.075465809406444E-6	DESIGN
embedded composite ids ( alias.idname1, alias.idname2 )	WITHOUT_CLASSIFICATION	0.9999954124590886	WITHOUT_CLASSIFICATION	4.587540911393087E-6	DESIGN
TODO: skip formulas?	WITHOUT_CLASSIFICATION	0.6075816969368142	DESIGN	0.3924183030631859	WITHOUT_CLASSIFICATION
don't need filters for the static loaders	WITHOUT_CLASSIFICATION	0.9999996764337254	WITHOUT_CLASSIFICATION	3.2356627448290604E-7	DESIGN
do two passes, for collection property-ref!	WITHOUT_CLASSIFICATION	0.9999995325464158	WITHOUT_CLASSIFICATION	4.674535841694883E-7	DESIGN
select the correct row by either pk or rowid	WITHOUT_CLASSIFICATION	0.9999697879538039	WITHOUT_CLASSIFICATION	3.021204619617802E-5	DESIGN
TODO: eventually, rowIdName[j]	WITHOUT_CLASSIFICATION	0.9256645855523173	DESIGN	0.07433541444768267	WITHOUT_CLASSIFICATION
this is a property of the table, which we are updating	WITHOUT_CLASSIFICATION	0.9999988005205623	WITHOUT_CLASSIFICATION	1.1994794376518858E-6	DESIGN
special shortcut for id properties, skip the join! this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9999747184728217	WITHOUT_CLASSIFICATION	2.528152717828504E-5	DESIGN
we are using "all" or "dirty" property-based optimistic locking	WITHOUT_CLASSIFICATION	0.9999990927067967	WITHOUT_CLASSIFICATION	9.07293203400613E-7	DESIGN
nothing to do; even if the operand is a parameter, no way we could infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999771814294737	WITHOUT_CLASSIFICATION	2.2818570526280605E-5	DESIGN
this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9998158126241984	WITHOUT_CLASSIFICATION	1.8418737580163782E-4	DESIGN
add normal properties	WITHOUT_CLASSIFICATION	0.9999995739604799	WITHOUT_CLASSIFICATION	4.260395200836935E-7	DESIGN
add the discriminator	WITHOUT_CLASSIFICATION	0.9999795587818003	WITHOUT_CLASSIFICATION	2.0441218199631506E-5	DESIGN
more specifically : "? [op] datetime" 1) if the operator is MINUS, the param needs to be of some datetime type 2) if the operator is PLUS, the param needs to be of some numeric type	WITHOUT_CLASSIFICATION	0.6232299002451198	WITHOUT_CLASSIFICATION	0.37677009975488013	DESIGN
add normal properties	WITHOUT_CLASSIFICATION	0.9999995739604799	WITHOUT_CLASSIFICATION	4.260395200836935E-7	DESIGN
this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9998158126241984	WITHOUT_CLASSIFICATION	1.8418737580163782E-4	DESIGN
add the discriminator	WITHOUT_CLASSIFICATION	0.9999795587818003	WITHOUT_CLASSIFICATION	2.0441218199631506E-5	DESIGN
add the primary key	WITHOUT_CLASSIFICATION	0.9999994842691753	WITHOUT_CLASSIFICATION	5.157308247916187E-7	DESIGN
delegate already handles PK columns	WITHOUT_CLASSIFICATION	0.9996797127529563	WITHOUT_CLASSIFICATION	3.202872470437963E-4	DESIGN
we can't batch joined inserts, especially not if it is an identity insert; nor can we batch statements where the expectation is based on an output param	WITHOUT_CLASSIFICATION	0.9999999998685161	WITHOUT_CLASSIFICATION	1.3148383724604105E-10	DESIGN
Render the SQL query	WITHOUT_CLASSIFICATION	0.9999164897156805	WITHOUT_CLASSIFICATION	8.351028431957525E-5	DESIGN
Write the values of fields onto the prepared statement - we MUST use the state at the time the insert was issued (cos of foreign key constraints). Not necessarily the object's current state	WITHOUT_CLASSIFICATION	0.9999998889690994	WITHOUT_CLASSIFICATION	1.1103090064934053E-7	DESIGN
TODO : shouldnt inserts be Expectations.NONE?	WITHOUT_CLASSIFICATION	0.9931737790514921	DESIGN	0.0068262209485078764	WITHOUT_CLASSIFICATION
don't bother trying to update, we know there is no row there yet	WITHOUT_CLASSIFICATION	0.9983138702214616	WITHOUT_CLASSIFICATION	0.001686129778538373	DESIGN
if all fields are null, we might need to delete existing row	WITHOUT_CLASSIFICATION	0.9970295561954128	WITHOUT_CLASSIFICATION	0.0029704438045872494	DESIGN
there is probably a row there, so try to update if no rows were updated, we will find out	WITHOUT_CLASSIFICATION	0.9999958966663235	WITHOUT_CLASSIFICATION	4.103333676513804E-6	DESIGN
note: updates to joined tables can't be batched...	WITHOUT_CLASSIFICATION	0.9999927725374791	WITHOUT_CLASSIFICATION	7.227462520817727E-6	DESIGN
starting index	WITHOUT_CLASSIFICATION	0.999999582715431	WITHOUT_CLASSIFICATION	4.1728456905996145E-7	DESIGN
Now write the values of fields onto the prepared statement	WITHOUT_CLASSIFICATION	0.999998816403761	WITHOUT_CLASSIFICATION	1.1835962389862643E-6	DESIGN
Write any appropriate versioning conditional parameters	WITHOUT_CLASSIFICATION	0.9997666316944261	WITHOUT_CLASSIFICATION	2.3336830557390057E-4	DESIGN
Render the SQL query	WITHOUT_CLASSIFICATION	0.9999164897156805	WITHOUT_CLASSIFICATION	8.351028431957525E-5	DESIGN
Do the key. The key is immutable so we can use the _current_ object state - not necessarily the state at the time the delete was issued	WITHOUT_CLASSIFICATION	0.9999999167382766	WITHOUT_CLASSIFICATION	8.326172340890794E-8	DESIGN
We should use the _current_ object state (ie. after any updates that occurred during flush)	WITHOUT_CLASSIFICATION	0.9999999944303407	WITHOUT_CLASSIFICATION	5.569659174835867E-9	DESIGN
this property belongs to the table and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9997722654627808	WITHOUT_CLASSIFICATION	2.2773453721925733E-4	DESIGN
note: dirtyFields==null means we had no snapshot, and we couldn't get one using select-before-update oldFields==null just means we had no snapshot to begin with (we might have used select-before-update to get the dirtyFields)	WITHOUT_CLASSIFICATION	0.9999311591681794	WITHOUT_CLASSIFICATION	6.884083182062959E-5	DESIGN
more specifically : "datetime [op] ?" 1) if the operator is MINUS, we really cannot determine the expected type as either another datetime or numeric would be valid 2) if the operator is PLUS, the param needs to be of some numeric type	WITHOUT_CLASSIFICATION	0.998215303426405	WITHOUT_CLASSIFICATION	0.001784696573595026	DESIGN
For the case of dynamic-update="true", we need to generate the UPDATE SQL	WITHOUT_CLASSIFICATION	0.9999973698681482	WITHOUT_CLASSIFICATION	2.630131851721719E-6	DESIGN
don't need to check laziness (dirty checking algorithm handles that)	WITHOUT_CLASSIFICATION	0.9961306398805246	WITHOUT_CLASSIFICATION	0.0038693601194753945	DESIGN
For the case of dynamic-update="false", or no snapshot, we use the static SQL	WITHOUT_CLASSIFICATION	0.9999999600543249	WITHOUT_CLASSIFICATION	3.994567502765041E-8	DESIGN
if not "get", then try "is"	WITHOUT_CLASSIFICATION	0.9999874475660205	WITHOUT_CLASSIFICATION	1.255243397945647E-5	DESIGN
Now update only the tables with dirty properties (and the table with the version number)	WITHOUT_CLASSIFICATION	0.9999986119038803	WITHOUT_CLASSIFICATION	1.3880961196379667E-6	DESIGN
For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999804727830738	WITHOUT_CLASSIFICATION	1.952721692626595E-5	DESIGN
For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999804727830738	WITHOUT_CLASSIFICATION	1.952721692626595E-5	DESIGN
For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999999893877087	WITHOUT_CLASSIFICATION	1.0612291236573931E-8	DESIGN
For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999999893877087	WITHOUT_CLASSIFICATION	1.0612291236573931E-8	DESIGN
not supported	WITHOUT_CLASSIFICATION	0.9897198521151549	WITHOUT_CLASSIFICATION	0.010280147884845145	DESIGN
this property belongs to the table and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9997722654627808	WITHOUT_CLASSIFICATION	2.2773453721925733E-4	DESIGN
we need to utilize dynamic delete statements	WITHOUT_CLASSIFICATION	0.9999849318270525	WITHOUT_CLASSIFICATION	1.5068172947458338E-5	DESIGN
otherwise, utilize the static delete statements	WITHOUT_CLASSIFICATION	0.9999981084242647	WITHOUT_CLASSIFICATION	1.8915757352308402E-6	DESIGN
just a performance opt!	WITHOUT_CLASSIFICATION	0.9997685598716779	WITHOUT_CLASSIFICATION	2.3144012832207944E-4	DESIGN
just a performance opt!	WITHOUT_CLASSIFICATION	0.9997685598716779	WITHOUT_CLASSIFICATION	2.3144012832207944E-4	DESIGN
all joins join to the pk of the driving table	WITHOUT_CLASSIFICATION	0.9999993302917446	WITHOUT_CLASSIFICATION	6.697082554182846E-7	DESIGN
notice that we skip the first table; it is the driving table!	WITHOUT_CLASSIFICATION	0.9998262076354207	WITHOUT_CLASSIFICATION	1.7379236457937258E-4	DESIGN
we can inner join to superclass tables (the row MUST be there) we can never inner join to subclass tables	WITHOUT_CLASSIFICATION	0.9999217580427979	WITHOUT_CLASSIFICATION	7.824195720215587E-5	DESIGN
skip the driving table	WITHOUT_CLASSIFICATION	0.9999882475818168	WITHOUT_CLASSIFICATION	1.1752418183230906E-5	DESIGN
get 'em in the right order (not that it really matters)	WITHOUT_CLASSIFICATION	0.9739381385589799	WITHOUT_CLASSIFICATION	0.02606186144102003	DESIGN
here, we work under the following assumptions: ------------ valid cases -------------------------------------- 1) datetime + {something other than datetime} : always results in a datetime ( db will catch invalid conversions ) 2) datetime - datetime : always results in a DOUBLE 3) datetime - {something other than datetime} : always results in a datetime ( db will catch invalid conversions ) ------------ invalid cases ------------------------------------ 4) datetime + datetime 5) {something other than datetime} - datetime 6) datetime {any type} 7) datetime / {any type} 8) {any type} / datetime doing so allows us to properly handle parameters as either the left or right side here in the majority of cases	WITHOUT_CLASSIFICATION	0.999999791165808	WITHOUT_CLASSIFICATION	2.088341920302253E-7	DESIGN
render the where and from parts	WITHOUT_CLASSIFICATION	0.9999653681715588	WITHOUT_CLASSIFICATION	3.463182844124861E-5	DESIGN
we could regerate this inside each called method!	WITHOUT_CLASSIFICATION	0.9748414457897523	WITHOUT_CLASSIFICATION	0.025158554210247788	DESIGN
now render the joins	WITHOUT_CLASSIFICATION	0.9999854374816931	WITHOUT_CLASSIFICATION	1.4562518306943248E-5	DESIGN
This will add the new from element to the origin.	WITHOUT_CLASSIFICATION	0.9999943950895955	WITHOUT_CLASSIFICATION	5.604910404434161E-6	DESIGN
now render the select clause	WITHOUT_CLASSIFICATION	0.9999929573488927	WITHOUT_CLASSIFICATION	7.042651107239421E-6	DESIGN
now tie it all together	WITHOUT_CLASSIFICATION	0.999909492912093	WITHOUT_CLASSIFICATION	9.050708790703166E-5	DESIGN
insert/update/delete SQL	WITHOUT_CLASSIFICATION	0.9999993261743032	WITHOUT_CLASSIFICATION	6.738256968456096E-7	DESIGN
select SQL	WITHOUT_CLASSIFICATION	0.999988606861076	WITHOUT_CLASSIFICATION	1.1393138923967002E-5	DESIGN
no need to check laziness, dirty checking handles that	WITHOUT_CLASSIFICATION	0.999996258875325	WITHOUT_CLASSIFICATION	3.7411246750367357E-6	DESIGN
Fully resolve the map reference, create implicit joins.	WITHOUT_CLASSIFICATION	0.9999994062900459	WITHOUT_CLASSIFICATION	5.937099541390217E-7	DESIGN
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9951630305635758	WITHOUT_CLASSIFICATION	0.004836969436424213	DESIGN
The basic implementation is to simply use the node's text	WITHOUT_CLASSIFICATION	0.9999956514818604	WITHOUT_CLASSIFICATION	4.34851813951768E-6	DESIGN
for dialects which are known to not support ANSI-SQL row-value-constructor syntax, we should mutate the tree.	WITHOUT_CLASSIFICATION	0.9999720504425551	WITHOUT_CLASSIFICATION	2.7949557444990358E-5	DESIGN
Due to the complexity in initializing the SelectClause, do not generate one here. If it is not found; simply return null... Also, do not cache since it gets generated well after we are created.	WITHOUT_CLASSIFICATION	0.9999942762934483	WITHOUT_CLASSIFICATION	5.7237065516933774E-6	DESIGN
check the version unsaved-value, if appropriate	WITHOUT_CLASSIFICATION	0.9999831105227729	WITHOUT_CLASSIFICATION	1.6889477227120824E-5	DESIGN
let this take precedence if defined, since it works for assigned identifiers	WITHOUT_CLASSIFICATION	0.9999985124091098	WITHOUT_CLASSIFICATION	1.4875908902350323E-6	DESIGN
check the id unsaved-value	WITHOUT_CLASSIFICATION	0.9999978133650483	WITHOUT_CLASSIFICATION	2.1866349516191876E-6	DESIGN
check to see if it is in the second-level cache	WITHOUT_CLASSIFICATION	0.999927712144045	WITHOUT_CLASSIFICATION	7.228785595499095E-5	DESIGN
/	WITHOUT_CLASSIFICATION	0.9998642377194608	WITHOUT_CLASSIFICATION	1.3576228053929797E-4	DESIGN
For property references generate <tablealias>.<columnname> as <projectionalias>	WITHOUT_CLASSIFICATION	0.9999991302809377	WITHOUT_CLASSIFICATION	8.697190622664839E-7	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996868431604878	WITHOUT_CLASSIFICATION	3.1315683951216793E-4	DESIGN
if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999989955036785	WITHOUT_CLASSIFICATION	1.0044963214669144E-6	DESIGN
force immediate execution of the insert	WITHOUT_CLASSIFICATION	0.9999999548830181	WITHOUT_CLASSIFICATION	4.511698197091879E-8	DESIGN
If this from element is a collection and the path is a collection property (maxIndex, etc.) then generate a sub-query.	WITHOUT_CLASSIFICATION	0.9997416712605746	WITHOUT_CLASSIFICATION	2.5832873942535867E-4	DESIGN
entities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999514189417621	WITHOUT_CLASSIFICATION	4.8581058238012606E-5	DESIGN
collections ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999580640195925	WITHOUT_CLASSIFICATION	4.1935980407555E-5	DESIGN
cannot occur	WITHOUT_CLASSIFICATION	0.9999968134305536	WITHOUT_CLASSIFICATION	3.1865694463334074E-6	DESIGN
cannot occur	WITHOUT_CLASSIFICATION	0.9999968134305536	WITHOUT_CLASSIFICATION	3.1865694463334074E-6	DESIGN
only carry on if the method has no parameters	WITHOUT_CLASSIFICATION	0.9998408481250081	WITHOUT_CLASSIFICATION	1.591518749918463E-4	DESIGN
try "get"	WITHOUT_CLASSIFICATION	0.9999788687289597	WITHOUT_CLASSIFICATION	2.1131271040297057E-5	DESIGN
do nothing...	WITHOUT_CLASSIFICATION	0.9999987160848322	WITHOUT_CLASSIFICATION	1.2839151678472974E-6	DESIGN
do nothing...	WITHOUT_CLASSIFICATION	0.9999987160848322	WITHOUT_CLASSIFICATION	1.2839151678472974E-6	DESIGN
should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.999999628449644	WITHOUT_CLASSIFICATION	3.715503561445869E-7	DESIGN
this page intentionally left blank :)	WITHOUT_CLASSIFICATION	0.999976532615864	WITHOUT_CLASSIFICATION	2.346738413597468E-5	DESIGN
do not do anything	WITHOUT_CLASSIFICATION	0.99999693788609	WITHOUT_CLASSIFICATION	3.062113909896898E-6	DESIGN
ignore	WITHOUT_CLASSIFICATION	0.9999779527837916	WITHOUT_CLASSIFICATION	2.2047216208400962E-5	DESIGN
cant instantiate	WITHOUT_CLASSIFICATION	0.9999653185776319	WITHOUT_CLASSIFICATION	3.4681422367962174E-5	DESIGN
if it is a property of an embedded component, invoke on the "identifier"	WITHOUT_CLASSIFICATION	0.9999926686563358	WITHOUT_CLASSIFICATION	7.3313436642391305E-6	DESIGN
otherwise:	WITHOUT_CLASSIFICATION	0.9919008009982964	WITHOUT_CLASSIFICATION	0.008099199001703632	DESIGN
skip finalize methods	WITHOUT_CLASSIFICATION	0.9999251650378014	WITHOUT_CLASSIFICATION	7.483496219863923E-5	DESIGN
note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9986740691797313	WITHOUT_CLASSIFICATION	0.001325930820268665	DESIGN
note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9986740691797313	WITHOUT_CLASSIFICATION	0.001325930820268665	DESIGN
HHH-2481 make sure the callback gets cleared, otherwise the instance stays in a static thread local.	WITHOUT_CLASSIFICATION	0.8948957437783325	WITHOUT_CLASSIFICATION	0.10510425622166757	DESIGN
while constructor is running	WITHOUT_CLASSIFICATION	0.9999991268403625	WITHOUT_CLASSIFICATION	8.73159637563437E-7	DESIGN
while constructor is running	WITHOUT_CLASSIFICATION	0.9999991268403625	WITHOUT_CLASSIFICATION	8.73159637563437E-7	DESIGN
note: interface is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9981932859938972	WITHOUT_CLASSIFICATION	0.0018067140061026768	DESIGN
interfaces arguments	WITHOUT_CLASSIFICATION	0.9999987969129666	WITHOUT_CLASSIFICATION	1.2030870334547523E-6	DESIGN
TODO!	WITHOUT_CLASSIFICATION	0.9961566388343054	WITHOUT_CLASSIFICATION	0.0038433611656945726	DESIGN
Get the caller	WITHOUT_CLASSIFICATION	0.9999996481906679	WITHOUT_CLASSIFICATION	3.5180933215637614E-7	DESIGN
Get the caller principals	WITHOUT_CLASSIFICATION	0.9999982544584335	WITHOUT_CLASSIFICATION	1.7455415666154877E-6	DESIGN
private static final Alias DEFAULT_ALIAS = new Alias(10, null);	WITHOUT_CLASSIFICATION	0.9999999946906418	WITHOUT_CLASSIFICATION	5.309358079314891E-9	DESIGN
Needed to bump this up to DotNode, because that is the only thing which currently knows about the property-ref path in the correct format; it is either this, or recurse over the DotNodes constructing the property path just like DotNode does internally	WITHOUT_CLASSIFICATION	0.9999995959150819	WITHOUT_CLASSIFICATION	4.040849181765263E-7	DESIGN
if the identifier is quoted, remove the quotes	WITHOUT_CLASSIFICATION	0.9999357365684649	WITHOUT_CLASSIFICATION	6.426343153515835E-5	DESIGN
truncate the identifier to the max alias length, less the suffix length	WITHOUT_CLASSIFICATION	0.9999939872529147	WITHOUT_CLASSIFICATION	6.012747085329969E-6	DESIGN
full joins are not supported.. yet!	WITHOUT_CLASSIFICATION	0.9988195675956466	WITHOUT_CLASSIFICATION	0.0011804324043533897	DESIGN
null is not considered the same type as Integer. $NON-NLS-1 $NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999597913215365	WITHOUT_CLASSIFICATION	4.020867846360145E-5	DESIGN
the outerJoinsAfterWhere needs to come before where clause to properly handle dynamic filters	WITHOUT_CLASSIFICATION	0.9999986887256688	WITHOUT_CLASSIFICATION	1.3112743312540699E-6	DESIGN
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999735810866639	WITHOUT_CLASSIFICATION	2.6418913336021746E-5	DESIGN
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999735810866639	WITHOUT_CLASSIFICATION	2.6418913336021746E-5	DESIGN
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999735810866639	WITHOUT_CLASSIFICATION	2.6418913336021746E-5	DESIGN
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999735810866639	WITHOUT_CLASSIFICATION	2.6418913336021746E-5	DESIGN
strip off any leading 'and' token	WITHOUT_CLASSIFICATION	0.9999993920521734	WITHOUT_CLASSIFICATION	6.07947826526621E-7	DESIGN
if the condition is not already there...	WITHOUT_CLASSIFICATION	0.9999907854052985	WITHOUT_CLASSIFICATION	9.214594701541032E-6	DESIGN
dontSpace.add("'");	WITHOUT_CLASSIFICATION	0.9999972379139477	WITHOUT_CLASSIFICATION	2.7620860523223892E-6	DESIGN
for MySQL	WITHOUT_CLASSIFICATION	0.9999128560331364	WITHOUT_CLASSIFICATION	8.71439668635632E-5	DESIGN
HashMap columnsUnique = new HashMap();	WITHOUT_CLASSIFICATION	0.9999980978297045	WITHOUT_CLASSIFICATION	1.9021702955693469E-6	DESIGN
null caused some problems	WITHOUT_CLASSIFICATION	0.9762140107654722	WITHOUT_CLASSIFICATION	0.023785989234527783	DESIGN
package	WITHOUT_CLASSIFICATION	0.999727668212874	WITHOUT_CLASSIFICATION	2.7233178712603856E-4	DESIGN
not sure if this would ever be null but wanted to be careful	WITHOUT_CLASSIFICATION	0.9986797830233057	WITHOUT_CLASSIFICATION	0.0013202169766942267	DESIGN
even on inverse="true"	WITHOUT_CLASSIFICATION	0.9999794846293931	WITHOUT_CLASSIFICATION	2.0515370606826297E-5	DESIGN
package	WITHOUT_CLASSIFICATION	0.999727668212874	WITHOUT_CLASSIFICATION	2.7233178712603856E-4	DESIGN
package	WITHOUT_CLASSIFICATION	0.999727668212874	WITHOUT_CLASSIFICATION	2.7233178712603856E-4	DESIGN
If true then execute db updates, otherwise just generate and display updates	WITHOUT_CLASSIFICATION	0.9999970674902472	WITHOUT_CLASSIFICATION	2.932509752869913E-6	DESIGN
we only release the connection	WITHOUT_CLASSIFICATION	0.9999996118723118	WITHOUT_CLASSIFICATION	3.8812768822280646E-7	DESIGN
deprecated option...	WITHOUT_CLASSIFICATION	0.9999526428009786	WITHOUT_CLASSIFICATION	4.735719902135577E-5	DESIGN
if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999984076578339	WITHOUT_CLASSIFICATION	1.5923421662089542E-6	DESIGN
actually, this last test is probably unnecessary, since beforeCompletion() doesn't get called during rollback	WITHOUT_CLASSIFICATION	0.9993199442661355	WITHOUT_CLASSIFICATION	6.800557338644763E-4	DESIGN
this one only really needed for badly-behaved applications! (if the TransactionManager has a Sychronization registered, its a noop) (actually we do need it for downgrading locks)	WITHOUT_CLASSIFICATION	0.9999965370232416	WITHOUT_CLASSIFICATION	3.4629767582602097E-6	DESIGN
Create an DotNode AST for the path and resolve it.	WITHOUT_CLASSIFICATION	0.9999353421853209	WITHOUT_CLASSIFICATION	6.465781467912761E-5	DESIGN
if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999984076578339	WITHOUT_CLASSIFICATION	1.5923421662089542E-6	DESIGN
if we could not register a synchronization, do the before/after completion callbacks ourself (but we need to let jdbcContext know that this is what we are going to do, so it doesn't keep trying to register synchronizations)	WITHOUT_CLASSIFICATION	0.9999868309745072	WITHOUT_CLASSIFICATION	1.316902549276414E-5	DESIGN
swallow it, and continue to roll back JTA transaction	WITHOUT_CLASSIFICATION	0.9999341339839268	WITHOUT_CLASSIFICATION	6.586601607318263E-5	DESIGN
so the transaction is already rolled back, by JTA spec	WITHOUT_CLASSIFICATION	0.9999904907831313	WITHOUT_CLASSIFICATION	9.509216868720004E-6	DESIGN
this method is a noop if there is a Synchronization!	WITHOUT_CLASSIFICATION	0.9999964111871045	WITHOUT_CLASSIFICATION	3.5888128955417345E-6	DESIGN
two conditions where we need to transform this to a theta-join syntax: 1) 'elem' is the "root from-element" in correlated subqueries 2) The DotNode.useThetaStyleImplicitJoins has been set to true and 'elem' represents an implicit join	WITHOUT_CLASSIFICATION	0.9206149277290427	WITHOUT_CLASSIFICATION	0.07938507227095729	DESIGN
WebSphere, however, is not a sane JEE/JTA container...	WITHOUT_CLASSIFICATION	0.9999851022679939	WITHOUT_CLASSIFICATION	1.4897732006124377E-5	DESIGN
for sane JEE/JTA containers, the transaction itself functions as its identifier...	WITHOUT_CLASSIFICATION	0.9999933927072412	WITHOUT_CLASSIFICATION	6.607292758834025E-6	DESIGN
swallow, the transaction was finished	WITHOUT_CLASSIFICATION	0.9999926410281453	WITHOUT_CLASSIFICATION	7.3589718546639035E-6	DESIGN
all AliasToEntityMapResultTransformer are considered equal ~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999921129362828	WITHOUT_CLASSIFICATION	7.88706371722602E-6	DESIGN
Create the join element under the from element.	WITHOUT_CLASSIFICATION	0.9999983714714339	WITHOUT_CLASSIFICATION	1.628528566165983E-6	DESIGN
all DistinctRootEntityResultTransformer are considered equal ~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999942455376779	WITHOUT_CLASSIFICATION	5.754462322083914E-6	DESIGN
map of EntityMode -> Tuplizer	WITHOUT_CLASSIFICATION	0.9999852420064774	WITHOUT_CLASSIFICATION	1.4757993522550411E-5	DESIGN
this is a virtual id property...	WITHOUT_CLASSIFICATION	0.9995128850351218	WITHOUT_CLASSIFICATION	4.871149648782904E-4	DESIGN
this one needed only for guessEntityMode()	WITHOUT_CLASSIFICATION	0.9997665308806997	WITHOUT_CLASSIFICATION	2.3346911930028895E-4	DESIGN
create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999989679658775	WITHOUT_CLASSIFICATION	1.0320341224813988E-6	DESIGN
todo : move this to SF per HHH-3517; also see HHH-1907 and ComponentMetamodel	WITHOUT_CLASSIFICATION	0.949926059461886	WITHOUT_CLASSIFICATION	0.050073940538114065	DESIGN
then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999735470383322	WITHOUT_CLASSIFICATION	2.645296166785349E-5	DESIGN
Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.999989055768185	WITHOUT_CLASSIFICATION	1.0944231815012313E-5	DESIGN
then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999297006593569	WITHOUT_CLASSIFICATION	7.02993406430026E-5	DESIGN
Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.999989055768185	WITHOUT_CLASSIFICATION	1.0944231815012313E-5	DESIGN
put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999961384502181	WITHOUT_CLASSIFICATION	3.8615497819416925E-6	DESIGN
found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999920425565477	WITHOUT_CLASSIFICATION	7.957443452307625E-6	DESIGN
private final SessionFactoryImplementor sessionFactory;	WITHOUT_CLASSIFICATION	0.9985842229695476	WITHOUT_CLASSIFICATION	0.0014157770304523687	DESIGN
cached for efficiency...	WITHOUT_CLASSIFICATION	0.9970110314452645	WITHOUT_CLASSIFICATION	0.002988968554735406	DESIGN
public ComponentMetamodel(Component component, SessionFactoryImplementor sessionFactory) {	WITHOUT_CLASSIFICATION	0.9745426761236433	WITHOUT_CLASSIFICATION	0.025457323876356668	DESIGN
this.sessionFactory = sessionFactory;	WITHOUT_CLASSIFICATION	0.9999655453633949	WITHOUT_CLASSIFICATION	3.445463660510349E-5	DESIGN
it was not embedded, so the argument is just an id	WITHOUT_CLASSIFICATION	0.999994186696664	WITHOUT_CLASSIFICATION	5.813303336025914E-6	DESIGN
then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999735470383322	WITHOUT_CLASSIFICATION	2.645296166785349E-5	DESIGN
then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999297006593569	WITHOUT_CLASSIFICATION	7.02993406430026E-5	DESIGN
put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999961384502181	WITHOUT_CLASSIFICATION	3.8615497819416925E-6	DESIGN
then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9993364935126249	WITHOUT_CLASSIFICATION	6.635064873750408E-4	DESIGN
return currentId;	WITHOUT_CLASSIFICATION	0.999995649935772	WITHOUT_CLASSIFICATION	4.350064228021125E-6	DESIGN
reset the id	WITHOUT_CLASSIFICATION	0.9999990521881444	WITHOUT_CLASSIFICATION	9.478118555756487E-7	DESIGN
origin.addDestination( destination ); This was the cause of HHH-242 origin.setType( FROM_FRAGMENT ); Set the parent node type so that the AST is properly formed. The destination node will have all the FROM text. The parent node is a collection join too (voodoo - see JoinProcessor)	WITHOUT_CLASSIFICATION	0.9999999367650153	WITHOUT_CLASSIFICATION	6.323498478464295E-8	DESIGN
reset the version	WITHOUT_CLASSIFICATION	0.9999994977990571	WITHOUT_CLASSIFICATION	5.022009430153501E-7	DESIGN
the default is to simply not lazy fetch properties for now...	WITHOUT_CLASSIFICATION	0.9991372010300146	WITHOUT_CLASSIFICATION	8.627989699854557E-4	DESIGN
Add the second join, the one that ends in the destination table.	WITHOUT_CLASSIFICATION	0.999999974917846	WITHOUT_CLASSIFICATION	2.5082154089742084E-8	DESIGN
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9951630305635758	WITHOUT_CLASSIFICATION	0.004836969436424213	DESIGN
found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999920425565477	WITHOUT_CLASSIFICATION	7.957443452307625E-6	DESIGN
determine the id getter and setter methods from the proxy interface (if any) determine all interfaces needed by the resulting proxy	WITHOUT_CLASSIFICATION	0.9999136137412017	WITHOUT_CLASSIFICATION	8.63862587982841E-5	DESIGN
return getFactory().getSettings().getBytecodeProvider().getProxyFactoryFactory().buildProxyFactory();	WITHOUT_CLASSIFICATION	0.9999051915512955	WITHOUT_CLASSIFICATION	9.48084487044405E-5	DESIGN
not final because proxy factory creation can fail	WITHOUT_CLASSIFICATION	0.9992689365180347	WITHOUT_CLASSIFICATION	7.310634819652458E-4	DESIGN
superclass entity-name	WITHOUT_CLASSIFICATION	0.9999971868292663	WITHOUT_CLASSIFICATION	2.8131707336480667E-6	DESIGN
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9951630305635758	WITHOUT_CLASSIFICATION	0.004836969436424213	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996868431604878	WITHOUT_CLASSIFICATION	3.1315683951216793E-4	DESIGN
init the aliases, after initing the constructornode	WITHOUT_CLASSIFICATION	0.9999958934860173	WITHOUT_CLASSIFICATION	4.106513982720194E-6	DESIGN
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9951630305635758	WITHOUT_CLASSIFICATION	0.004836969436424213	DESIGN
legacy behavior (with no abstract attribute specified)	WITHOUT_CLASSIFICATION	0.9999982804961715	WITHOUT_CLASSIFICATION	1.719503828631489E-6	DESIGN
Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999998150777726	WITHOUT_CLASSIFICATION	1.849222273973124E-7	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996868431604878	WITHOUT_CLASSIFICATION	3.1315683951216793E-4	DESIGN
note: this affects the return value!	WITHOUT_CLASSIFICATION	0.9997972614887533	WITHOUT_CLASSIFICATION	2.0273851124672938E-4	DESIGN
Need to account for allowable '_' within the variant	WITHOUT_CLASSIFICATION	0.9999772990340843	WITHOUT_CLASSIFICATION	2.2700965915684506E-5	DESIGN
Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999987391114226	WITHOUT_CLASSIFICATION	1.2608885774822635E-6	DESIGN
Collection Types:	WITHOUT_CLASSIFICATION	0.9999889275427063	WITHOUT_CLASSIFICATION	1.1072457293628232E-5	DESIGN
convenience methods relating to operations across arrays of types...	WITHOUT_CLASSIFICATION	0.9999872004891532	WITHOUT_CLASSIFICATION	1.2799510846863855E-5	DESIGN
lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999890724669827	WITHOUT_CLASSIFICATION	1.0927533017353452E-5	DESIGN
Blobs are ignored by merge()	WITHOUT_CLASSIFICATION	0.9999998759239399	WITHOUT_CLASSIFICATION	1.240760600577419E-7	DESIGN
value is the entity name	WITHOUT_CLASSIFICATION	0.9999992329421548	WITHOUT_CLASSIFICATION	7.67057845235894E-7	DESIGN
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.999998359817631	WITHOUT_CLASSIFICATION	1.640182369077347E-6	DESIGN
generate id select fragment and then property select fragment for each expression, just like generateSelectFragments().	WITHOUT_CLASSIFICATION	0.9974614008918156	WITHOUT_CLASSIFICATION	0.0025385991081844157	DESIGN
TODO!	WITHOUT_CLASSIFICATION	0.9961566388343054	WITHOUT_CLASSIFICATION	0.0038433611656945726	DESIGN
xml is the entity name	WITHOUT_CLASSIFICATION	0.9999978491473079	WITHOUT_CLASSIFICATION	2.1508526920572585E-6	DESIGN
special case ... this is the leaf of the containment graph, even though not immutable	WITHOUT_CLASSIFICATION	0.9999160292094037	WITHOUT_CLASSIFICATION	8.397079059628646E-5	DESIGN
tolerates nulls	WITHOUT_CLASSIFICATION	0.9999979422615519	WITHOUT_CLASSIFICATION	2.057738448061997E-6	DESIGN
sqlResultTypeList,	WITHOUT_CLASSIFICATION	0.999999581724202	WITHOUT_CLASSIFICATION	4.1827579807578003E-7	DESIGN
metaType is assumed to be single-column type	WITHOUT_CLASSIFICATION	0.9999994591123911	WITHOUT_CLASSIFICATION	5.408876088789718E-7	DESIGN
Get all the select expressions (that we just generated) and render the select.	WITHOUT_CLASSIFICATION	0.9993530988663616	WITHOUT_CLASSIFICATION	6.469011336383827E-4	DESIGN
Look through the FromElement's children to find any collections of values that should be fetched...	WITHOUT_CLASSIFICATION	0.9999969909618026	WITHOUT_CLASSIFICATION	3.0090381974577864E-6	DESIGN
return AssociationType.FOREIGN_KEY_TO_PARENT; this is better but causes a transient object exception...	WITHOUT_CLASSIFICATION	0.9948430348744182	WITHOUT_CLASSIFICATION	0.005156965125581926	DESIGN
Use the lower case function name. Remember whether we're in a SELECT clause or not.	WITHOUT_CLASSIFICATION	0.9999999685888423	WITHOUT_CLASSIFICATION	3.141115765377573E-8	DESIGN
IDENT might be the name of a class.	WITHOUT_CLASSIFICATION	0.9996669822563301	WITHOUT_CLASSIFICATION	3.330177436698093E-4	DESIGN
TODO!!!	WITHOUT_CLASSIFICATION	0.9908762144347427	WITHOUT_CLASSIFICATION	0.00912378556525726	DESIGN
st.setTimestamp( index, new Timestamp( cal.getTimeInMillis() ), cal ); JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9999999677535465	WITHOUT_CLASSIFICATION	3.224645347235979E-8	DESIGN
st.setDate( index, new Date( cal.getTimeInMillis() ), cal ); JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9999998553155425	WITHOUT_CLASSIFICATION	1.4468445755494813E-7	DESIGN
both are Timestamps	WITHOUT_CLASSIFICATION	0.9999993296902834	WITHOUT_CLASSIFICATION	6.703097165052994E-7	DESIGN
at least one is a plain old Date	WITHOUT_CLASSIFICATION	0.9999280142097773	WITHOUT_CLASSIFICATION	7.198579022269092E-5	DESIGN
noop	WITHOUT_CLASSIFICATION	0.9996184663597862	WITHOUT_CLASSIFICATION	3.8153364021377965E-4	DESIGN
if the corresponding SQL value is NULL, the reader we got is NULL as well	WITHOUT_CLASSIFICATION	0.9999998940171125	WITHOUT_CLASSIFICATION	1.0598288746398086E-7	DESIGN
Fetch Reader content up to the end - and put characters in a StringBuffer	WITHOUT_CLASSIFICATION	0.9999114206759147	WITHOUT_CLASSIFICATION	8.857932408532853E-5	DESIGN
Return StringBuffer content as a large String	WITHOUT_CLASSIFICATION	0.9999990948727945	WITHOUT_CLASSIFICATION	9.051272054124195E-7	DESIGN
or Types.LONGVARCHAR?	WITHOUT_CLASSIFICATION	0.9981992547374366	WITHOUT_CLASSIFICATION	0.0018007452625633496	DESIGN
Not called at runtime so doesn't matter if its slow :)	WITHOUT_CLASSIFICATION	0.9999354900980179	WITHOUT_CLASSIFICATION	6.450990198205991E-5	DESIGN
TODO	WITHOUT_CLASSIFICATION	0.9943131749046358	WITHOUT_CLASSIFICATION	0.005686825095364289	DESIGN
Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999980615250798	WITHOUT_CLASSIFICATION	1.9384749202450003E-6	DESIGN
different nullability rules for pk/fk	WITHOUT_CLASSIFICATION	0.9999939650971512	WITHOUT_CLASSIFICATION	6.0349028488740065E-6	DESIGN
cache this	WITHOUT_CLASSIFICATION	0.9999474391794236	WITHOUT_CLASSIFICATION	5.25608205763556E-5	DESIGN
only really need new array during semiresolve!	WITHOUT_CLASSIFICATION	0.9995990347497435	WITHOUT_CLASSIFICATION	4.009652502564775E-4	DESIGN
Forcefully remove leading ands from where fragments; the grammar will handle adding them	WITHOUT_CLASSIFICATION	0.9983737171772589	WITHOUT_CLASSIFICATION	0.0016262828227411412	DESIGN
TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9968197282781261	WITHOUT_CLASSIFICATION	0.00318027172187385	DESIGN
Create a new FILTERS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999999358881166	WITHOUT_CLASSIFICATION	6.411188328304352E-8	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996868431604878	WITHOUT_CLASSIFICATION	3.1315683951216793E-4	DESIGN
public Object instantiate(Object parent, SessionImplementor session) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9976888389755232	WITHOUT_CLASSIFICATION	0.002311161024476787	DESIGN
nothing to do	WITHOUT_CLASSIFICATION	0.9999666398007037	WITHOUT_CLASSIFICATION	3.3360199296356354E-5	DESIGN
nothing to do	WITHOUT_CLASSIFICATION	0.9999666398007037	WITHOUT_CLASSIFICATION	3.3360199296356354E-5	DESIGN
VersionType impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Note : simply returns null for seed() and next() as the only known application of binary types for versioning is for use with the TIMESTAMP datatype supported by Sybase and SQL Server, which are completely db-generated values...	WITHOUT_CLASSIFICATION	0.9999975122136242	WITHOUT_CLASSIFICATION	2.4877863757338752E-6	DESIGN
lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999890724669827	WITHOUT_CLASSIFICATION	1.0927533017353452E-5	DESIGN
not really necessary, I guess...	WITHOUT_CLASSIFICATION	0.989865720118793	WITHOUT_CLASSIFICATION	0.010134279881207084	DESIGN
Clobs are ignored by merge() operation	WITHOUT_CLASSIFICATION	0.9999999981550807	WITHOUT_CLASSIFICATION	1.84491929725624E-9	DESIGN
we do not have to worry about queued additions to uninitialized collections, since they can only occur for inverse collections!	WITHOUT_CLASSIFICATION	0.9999995000112848	WITHOUT_CLASSIFICATION	4.999887152224917E-7	DESIGN
collections cannot be compared	WITHOUT_CLASSIFICATION	0.9999902423409504	WITHOUT_CLASSIFICATION	9.757659049619465E-6	DESIGN
remember the uk value	WITHOUT_CLASSIFICATION	0.9999826394166899	WITHOUT_CLASSIFICATION	1.736058331009412E-5	DESIGN
NOOP	WITHOUT_CLASSIFICATION	0.9999236325817903	WITHOUT_CLASSIFICATION	7.636741820963626E-5	DESIGN
processCollectionProperty(token, q.getCollectionPersister(collectionRole), collectionName);	WITHOUT_CLASSIFICATION	0.9999998413965844	WITHOUT_CLASSIFICATION	1.5860341560101205E-7	DESIGN
we must use the "remembered" uk value, since it is not available from the EntityEntry during assembly	WITHOUT_CLASSIFICATION	0.9996309400046008	WITHOUT_CLASSIFICATION	3.690599953991653E-4	DESIGN
collections don't dirty an unversioned parent entity	WITHOUT_CLASSIFICATION	0.9999977136078662	WITHOUT_CLASSIFICATION	2.2863921339409117E-6	DESIGN
return false;	WITHOUT_CLASSIFICATION	0.9999985952888099	WITHOUT_CLASSIFICATION	1.4047111901412218E-6	DESIGN
This just handles a particular case of component projection, perhaps get rid of it and throw an exception	WITHOUT_CLASSIFICATION	0.5987666397447877	WITHOUT_CLASSIFICATION	0.40123336025521233	DESIGN
NOTE: we avoid joining to the next table if the named property is just the foreign key value	WITHOUT_CLASSIFICATION	0.9999999804266031	WITHOUT_CLASSIFICATION	1.9573396915005842E-8	DESIGN
the key is the owning entity itself, so get the ID from the key	WITHOUT_CLASSIFICATION	0.9999782422018374	WITHOUT_CLASSIFICATION	2.1757798162703765E-5	DESIGN
if the original is a PersistentCollection, and that original was not flagged as dirty, then reset the target's dirty flag here after the copy operation. </p> One thing to be careful of here is a "bare" original collection in which case we should never ever ever reset the dirty flag on the target because we simply do not know...	WITHOUT_CLASSIFICATION	0.9999999999797213	WITHOUT_CLASSIFICATION	2.0278624510667635E-11	DESIGN
ignore subselect keywords	WITHOUT_CLASSIFICATION	0.9999997002027017	WITHOUT_CLASSIFICATION	2.997972982872585E-7	DESIGN
copy elements into newly empty target collection	WITHOUT_CLASSIFICATION	0.9999999070344219	WITHOUT_CLASSIFICATION	9.296557809909918E-8	DESIGN
for a null target, or a target which is the same as the original, we need to put the merged elements in a new collection	WITHOUT_CLASSIFICATION	0.9999876224487395	WITHOUT_CLASSIFICATION	1.2377551260522543E-5	DESIGN
by default just use an unanticipated capacity since we don't know how to extract the capacity to use from original here...	WITHOUT_CLASSIFICATION	0.9724811863564483	WITHOUT_CLASSIFICATION	0.027518813643551642	DESIGN
get the elements back into the target making sure to handle dirty flag	WITHOUT_CLASSIFICATION	0.9999984586633199	WITHOUT_CLASSIFICATION	1.5413366800458658E-6	DESIGN
check if collection is currently being loaded	WITHOUT_CLASSIFICATION	0.9998823177641388	WITHOUT_CLASSIFICATION	1.1768223586122977E-4	DESIGN
check if it is already completely loaded, but unowned	WITHOUT_CLASSIFICATION	0.9999924726716869	WITHOUT_CLASSIFICATION	7.527328313107938E-6	DESIGN
cache the actual id of the object, not the value of the property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999995215438175	WITHOUT_CLASSIFICATION	4.784561824708848E-7	DESIGN
TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9968197282781261	WITHOUT_CLASSIFICATION	0.00318027172187385	DESIGN
create a new collection wrapper, to be initialized later	WITHOUT_CLASSIFICATION	0.9998363639894844	WITHOUT_CLASSIFICATION	1.6363601051563013E-4	DESIGN
Some JDBC drivers erroneously return an empty array here for a null DB value :/	WITHOUT_CLASSIFICATION	0.9998152946084036	WITHOUT_CLASSIFICATION	1.847053915964698E-4	DESIGN
our column span is the number of columns in the PK	WITHOUT_CLASSIFICATION	0.9999999759428583	WITHOUT_CLASSIFICATION	2.4057141798179445E-8	DESIGN
cannot batch fetch by unique key (property-ref associations)	WITHOUT_CLASSIFICATION	0.9999992609474773	WITHOUT_CLASSIFICATION	7.390525228006118E-7	DESIGN
we already know current is not null...	WITHOUT_CLASSIFICATION	0.9999580678800363	WITHOUT_CLASSIFICATION	4.193211996382542E-5	DESIGN
the ids are fully resolved, so compare them with isDirty(), not isModified()	WITHOUT_CLASSIFICATION	0.9999995668181451	WITHOUT_CLASSIFICATION	4.3318185483447555E-7	DESIGN
the owner of the association is not the owner of the id	WITHOUT_CLASSIFICATION	0.9999999237147305	WITHOUT_CLASSIFICATION	7.628526955949429E-8	DESIGN
----------------------------------------------------------- Constructors	WITHOUT_CLASSIFICATION	0.9999870045212099	WITHOUT_CLASSIFICATION	1.2995478790099332E-5	DESIGN
----------------------------------------------------- Instance Variables	WITHOUT_CLASSIFICATION	0.9999509131136314	WITHOUT_CLASSIFICATION	4.908688636851564E-5	DESIGN
public static JDBCException newJDBCException(String string, SQLException root, String sql) { string = string + " [" + sql + ']'; log.error(string, root); logExceptions(root); return new JDBCException(string, root, sql); } public static JDBCException newJDBCException(String string, SQLException root) { log.error(string, root); logExceptions(root); return new JDBCException(string, root); }	WITHOUT_CLASSIFICATION	0.9999999942021064	WITHOUT_CLASSIFICATION	5.797893690992017E-9	DESIGN
--------------------------------------------------------- Public Methods	WITHOUT_CLASSIFICATION	0.9995489064898536	WITHOUT_CLASSIFICATION	4.51093510146425E-4	DESIGN
Compare the two maps for equality	WITHOUT_CLASSIFICATION	0.9999990469288549	WITHOUT_CLASSIFICATION	9.53071145080362E-7	DESIGN
Simple tests that require no synchronization	WITHOUT_CLASSIFICATION	0.9999998719595323	WITHOUT_CLASSIFICATION	1.2804046774700564E-7	DESIGN
Sybase fail if we don't do that, sigh...	WITHOUT_CLASSIFICATION	0.9996913039691372	WITHOUT_CLASSIFICATION	3.086960308627604E-4	DESIGN
Handles things like: a and b or c a and ( b or c ) not a and not b not ( a and b ) x between y and z (overloaded "and") x in ( a, b, c ) (overloaded brackets) not not a a is not null (overloaded "not") etc...... and expressions like foo = bar (maps to: foo.id = bar.id) foo.Bar = 'foo' (maps to: foo.bar = 'foo') foo.Bar.Baz = 1.0 (maps to: foo.bar = bar.id and bar.baz = 1.0) 1.0 = foo.Bar.Baz (maps to: bar.baz = 1.0 and foo.Bar = bar.id) foo.Bar.Baz = a.B.C (maps to: bar.Baz = b.C and foo.Bar = bar.id and a.B = b.id) foo.Bar.Baz + a.B.C (maps to: bar.Baz + b.C and foo.Bar = bar.id and a.B = b.id) ( foo.Bar.Baz + 1.0 ) < 2.0 (maps to: ( bar.Baz + 1.0 ) < 2.0 and foo.Bar = bar.id)	WITHOUT_CLASSIFICATION	0.9999665767117865	WITHOUT_CLASSIFICATION	3.342328821353923E-5	DESIGN
release the jdk internal caches everytime to ensure this plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9992216083628545	WITHOUT_CLASSIFICATION	7.783916371455516E-4	DESIGN
release the jdk internal caches everytime to ensure this plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9992216083628545	WITHOUT_CLASSIFICATION	7.783916371455516E-4	DESIGN
try to "pretty print" it	WITHOUT_CLASSIFICATION	0.9999910656972542	WITHOUT_CLASSIFICATION	8.934302745875903E-6	DESIGN
otherwise, just dump it	WITHOUT_CLASSIFICATION	0.9995573825394148	WITHOUT_CLASSIFICATION	4.4261746058511743E-4	DESIGN
its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9999995449029637	WITHOUT_CLASSIFICATION	4.550970361934394E-7	DESIGN
its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9999995449029637	WITHOUT_CLASSIFICATION	4.550970361934394E-7	DESIGN
use default behavior	WITHOUT_CLASSIFICATION	0.9999931314402601	WITHOUT_CLASSIFICATION	6.868559739769516E-6	DESIGN
NOTE: early return	WITHOUT_CLASSIFICATION	0.9999700276076762	WITHOUT_CLASSIFICATION	2.9972392323791296E-5	DESIGN
the MRU cache used to keep hard references to the most recently used query plans; note : LRU here is a bit of a misnomer, it indicates that LRU entries are removed, the actual kept entries are the MRU entries	WITHOUT_CLASSIFICATION	0.952755174526339	WITHOUT_CLASSIFICATION	0.04724482547366113	DESIGN
we want to be able to just use the defaults, if JNDI environment properties are not supplied so don't put null in anywhere	WITHOUT_CLASSIFICATION	0.9984971798006028	WITHOUT_CLASSIFICATION	0.001502820199397133	DESIGN
Clone -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999836709301576	WITHOUT_CLASSIFICATION	1.6329069842433383E-5	DESIGN
Serialize -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999957009163791	WITHOUT_CLASSIFICATION	4.299083620831622E-6	DESIGN
stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999999523302456	WITHOUT_CLASSIFICATION	4.766975441246037E-8	DESIGN
stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999999523302456	WITHOUT_CLASSIFICATION	4.766975441246037E-8	DESIGN
Deserialize -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.999996432474284	WITHOUT_CLASSIFICATION	3.567525715973343E-6	DESIGN
static methods only - hide constructor	WITHOUT_CLASSIFICATION	0.9998684911760918	WITHOUT_CLASSIFICATION	1.3150882390820993E-4	DESIGN
&& !('_'==character)	WITHOUT_CLASSIFICATION	0.9999998159468602	WITHOUT_CLASSIFICATION	1.840531399580014E-7	DESIGN
returnign null!	WITHOUT_CLASSIFICATION	0.9999987576893576	WITHOUT_CLASSIFICATION	1.2423106424496777E-6	DESIGN
returnign null!	WITHOUT_CLASSIFICATION	0.9999987576893576	WITHOUT_CLASSIFICATION	1.2423106424496777E-6	DESIGN
includes last '.'	WITHOUT_CLASSIFICATION	0.9999996057666277	WITHOUT_CLASSIFICATION	3.9423337232073046E-7	DESIGN
+1 to include the following '.'	WITHOUT_CLASSIFICATION	0.9999948043719834	WITHOUT_CLASSIFICATION	5.1956280166148416E-6	DESIGN
Impl note: takes advantage of the fact that an escpaed single quote embedded within a quote-block can really be handled as two seperate quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.999494358924718	WITHOUT_CLASSIFICATION	5.056410752818979E-4	DESIGN
first time we find match!	WITHOUT_CLASSIFICATION	0.9999976018751935	WITHOUT_CLASSIFICATION	2.398124806594739E-6	DESIGN
entityNames may now include slashes for the representations classname may be an inner class	WITHOUT_CLASSIFICATION	0.9998067456303279	WITHOUT_CLASSIFICATION	1.932543696721171E-4	DESIGN
wrapped iterators	WITHOUT_CLASSIFICATION	0.99999821324321	WITHOUT_CLASSIFICATION	1.7867567900392159E-6	DESIGN
index of current iterator in the wrapped iterators array	WITHOUT_CLASSIFICATION	0.9998933815323509	WITHOUT_CLASSIFICATION	1.0661846764918157E-4	DESIGN
the current iterator	WITHOUT_CLASSIFICATION	0.9999954091310573	WITHOUT_CLASSIFICATION	4.590868942644358E-6	DESIGN
the last used iterator	WITHOUT_CLASSIFICATION	0.9996295016236213	WITHOUT_CLASSIFICATION	3.704983763786883E-4	DESIGN
it was a boolean expression	WITHOUT_CLASSIFICATION	0.9999712161414483	WITHOUT_CLASSIFICATION	2.8783858551606242E-5	DESIGN
public static Object[] clone(Class elementClass, Object[] array) {Object[] result = (Object[]) Array.newInstance( elementClass, array.length );System.arraycopy(array, 0, result, 0, array.length);return result;}	WITHOUT_CLASSIFICATION	0.9999999515749257	WITHOUT_CLASSIFICATION	4.842507424447229E-8	DESIGN
call this before any Iterator method to make sure that the current Iterator is not exhausted	WITHOUT_CLASSIFICATION	0.9768544330945834	WITHOUT_CLASSIFICATION	0.023145566905416675	DESIGN
doable if needed	WITHOUT_CLASSIFICATION	0.9999880086889819	WITHOUT_CLASSIFICATION	1.1991311018150518E-5	DESIGN
set last used iterator here, in case the user calls remove before calling hasNext() or next() (although they shouldn't)	WITHOUT_CLASSIFICATION	0.9999964713416377	WITHOUT_CLASSIFICATION	3.5286583623923115E-6	DESIGN
peek ahead	WITHOUT_CLASSIFICATION	0.9999209709817555	WITHOUT_CLASSIFICATION	7.902901824443476E-5	DESIGN
if we reach the end of the string w/o finding the matching end, that is an exception	WITHOUT_CLASSIFICATION	0.999999953634856	WITHOUT_CLASSIFICATION	4.636514397931134E-8	DESIGN
we have a placeholder, spin forward till we find the end	WITHOUT_CLASSIFICATION	0.9982735428051425	WITHOUT_CLASSIFICATION	0.0017264571948574386	DESIGN
make sure spinning forward did not put us past the end of the buffer...	WITHOUT_CLASSIFICATION	0.9999978866076632	WITHOUT_CLASSIFICATION	2.113392336807038E-6	DESIGN
First, try to locate this resource through the current context classloader.	WITHOUT_CLASSIFICATION	0.9999935913204296	WITHOUT_CLASSIFICATION	6.408679570356644E-6	DESIGN
Next, try to locate this resource through this class's classloader	WITHOUT_CLASSIFICATION	0.9999974694602012	WITHOUT_CLASSIFICATION	2.5305397987707453E-6	DESIGN
Next, try to locate this resource through the system classloader	WITHOUT_CLASSIFICATION	0.9999986968703977	WITHOUT_CLASSIFICATION	1.3031296023248239E-6	DESIGN
Anywhere else we should look?	WITHOUT_CLASSIFICATION	0.9915959467324399	WITHOUT_CLASSIFICATION	0.008404053267560108	DESIGN
would need an IdentitySet for this!	WITHOUT_CLASSIFICATION	0.9983586866908087	WITHOUT_CLASSIFICATION	0.0016413133091912832	DESIGN
Arrays.asList doesn't do primitive arrays	WITHOUT_CLASSIFICATION	0.9999962891498068	WITHOUT_CLASSIFICATION	3.7108501932161657E-6	DESIGN
faster?	WITHOUT_CLASSIFICATION	0.9992774863878113	WITHOUT_CLASSIFICATION	7.225136121886239E-4	DESIGN
the name of a class	WITHOUT_CLASSIFICATION	0.9999876705820224	WITHOUT_CLASSIFICATION	1.2329417977555609E-5	DESIGN
Its the listener class name	WITHOUT_CLASSIFICATION	0.9999992086860295	WITHOUT_CLASSIFICATION	7.913139705527501E-7	DESIGN
allow 9,8,7,6,5,4,3,2,1	WITHOUT_CLASSIFICATION	0.9999943383271821	WITHOUT_CLASSIFICATION	5.661672817886142E-6	DESIGN
default to element set if no elements() specified	WITHOUT_CLASSIFICATION	0.9999983690329117	WITHOUT_CLASSIFICATION	1.6309670882834367E-6	DESIGN
look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999779150055684	WITHOUT_CLASSIFICATION	2.20849944315715E-5	DESIGN
in case we were deserialized in a different JVM, look for an instance with the same name (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9984143357497192	WITHOUT_CLASSIFICATION	0.0015856642502807487	DESIGN
first, lets determine whether to apply cglib or javassist based instrumentation...	WITHOUT_CLASSIFICATION	0.9999896735379447	WITHOUT_CLASSIFICATION	1.0326462055302496E-5	DESIGN
Make sure we don't override previous set values	WITHOUT_CLASSIFICATION	0.9999807831009819	WITHOUT_CLASSIFICATION	1.9216899018084543E-5	DESIGN
entirely optional!!	WITHOUT_CLASSIFICATION	0.9999953711422609	WITHOUT_CLASSIFICATION	4.62885773904305E-6	DESIGN
Its the listener instance (or better be)	WITHOUT_CLASSIFICATION	0.9999248281695128	WITHOUT_CLASSIFICATION	7.517183048722728E-5	DESIGN
context.unbind(boundName);	WITHOUT_CLASSIFICATION	0.9998773953710585	WITHOUT_CLASSIFICATION	1.2260462894154856E-4	DESIGN
readResolveObject	WITHOUT_CLASSIFICATION	0.9999416118851068	WITHOUT_CLASSIFICATION	5.838811489325438E-5	DESIGN
cfg.setProperty("hibernate.show_sql", "true");	WITHOUT_CLASSIFICATION	0.9999999129478409	WITHOUT_CLASSIFICATION	8.705215918857048E-8	DESIGN
Defensive, convenience methods	WITHOUT_CLASSIFICATION	0.9999894173493239	WITHOUT_CLASSIFICATION	1.058265067606691E-5	DESIGN
Create the SessionFactory from hibernate.cfg.xml	WITHOUT_CLASSIFICATION	0.9999555015022407	WITHOUT_CLASSIFICATION	4.449849775931489E-5	DESIGN
Make sure you log the exception, as it might be swallowed	WITHOUT_CLASSIFICATION	0.9999953773421458	WITHOUT_CLASSIFICATION	4.622657854224453E-6	DESIGN
Begin unit of work	WITHOUT_CLASSIFICATION	0.9999802424272236	WITHOUT_CLASSIFICATION	1.9757572776330174E-5	DESIGN
Write HTML header	WITHOUT_CLASSIFICATION	0.9999987560398258	WITHOUT_CLASSIFICATION	1.2439601742155523E-6	DESIGN
Handle actions	WITHOUT_CLASSIFICATION	0.9999598399458465	WITHOUT_CLASSIFICATION	4.0160054153523545E-5	DESIGN
Print page	WITHOUT_CLASSIFICATION	0.9999977164683069	WITHOUT_CLASSIFICATION	2.2835316930683665E-6	DESIGN
Write HTML footer	WITHOUT_CLASSIFICATION	0.9999996944027356	WITHOUT_CLASSIFICATION	3.055972644642167E-7	DESIGN
End unit of work	WITHOUT_CLASSIFICATION	0.9999914264713292	WITHOUT_CLASSIFICATION	8.573528670776531E-6	DESIGN
Start the session to be used for this request	WITHOUT_CLASSIFICATION	0.9974585723901982	WITHOUT_CLASSIFICATION	0.002541427609801866	DESIGN
make the session available to the session factory's "current context"	WITHOUT_CLASSIFICATION	0.9997353211322348	WITHOUT_CLASSIFICATION	2.6467886776521316E-4	DESIGN
pass control along to the rest of the processing chain	WITHOUT_CLASSIFICATION	0.999999450976191	WITHOUT_CLASSIFICATION	5.4902380895551E-7	DESIGN
remove session from "current context"	WITHOUT_CLASSIFICATION	0.993215160936241	WITHOUT_CLASSIFICATION	0.006784839063758951	DESIGN
Eager fetch the collection so we can use it detached	WITHOUT_CLASSIFICATION	0.999901410911289	WITHOUT_CLASSIFICATION	9.858908871097673E-5	DESIGN
If we want to handle it bidirectional and detached, we also need to load this collection with an eager outer-join fetch, this time with Criteria and not HQL:	WITHOUT_CLASSIFICATION	0.9999967878314407	WITHOUT_CLASSIFICATION	3.2121685592410727E-6	DESIGN
Event anEvent = (Event) session .createCriteria(Event.class).setFetchMode("participants", FetchMode.JOIN) .add( Expression.eq("id", eventId) ) .uniqueResult(); Eager fetch the colleciton so we can use it detached	WITHOUT_CLASSIFICATION	0.9999996827454783	WITHOUT_CLASSIFICATION	3.172545216334713E-7	DESIGN
End of first unit of work	WITHOUT_CLASSIFICATION	0.9999622194137461	WITHOUT_CLASSIFICATION	3.7780586253801175E-5	DESIGN
or bidirectional safety method, setting both sides: aPerson.addToEvent(anEvent);	WITHOUT_CLASSIFICATION	0.9999709688975724	WITHOUT_CLASSIFICATION	2.9031102427579507E-5	DESIGN
Begin second unit of work	WITHOUT_CLASSIFICATION	0.999793705102018	WITHOUT_CLASSIFICATION	2.0629489798193787E-4	DESIGN
Reattachment of aPerson	WITHOUT_CLASSIFICATION	0.9999867203189771	WITHOUT_CLASSIFICATION	1.3279681022998702E-5	DESIGN
The getEmailAddresses() might trigger a lazy load of the collection	WITHOUT_CLASSIFICATION	0.9999972971036282	WITHOUT_CLASSIFICATION	2.702896371788992E-6	DESIGN
We need our tm, so get it now and avoid doing other work if there is a problem	WITHOUT_CLASSIFICATION	0.9999941959702171	WITHOUT_CLASSIFICATION	5.804029783005653E-6	DESIGN
Don't hold the JBC node lock throughout the tx, as that prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999984043470578	WITHOUT_CLASSIFICATION	1.5956529421247032E-6	DESIGN
Don't hold the JBC node lock throughout the tx, as that prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999984043470578	WITHOUT_CLASSIFICATION	1.5956529421247032E-6	DESIGN
JBC put a version in the node when it created as part of some internal operation. We are always newer, but if the JBC version is > 1 something odd has happened	WITHOUT_CLASSIFICATION	0.9999999997743129	WITHOUT_CLASSIFICATION	2.2568707454418967E-10	DESIGN
swaldman 2006-08-28: define c3p0-style configuration parameters for properties with hibernate-specific overrides to detect and warn about conflicting declarations	WITHOUT_CLASSIFICATION	0.9988210218500944	WITHOUT_CLASSIFICATION	0.0011789781499055353	DESIGN
Not null if the Isolation level has been specified in the configuration file. Otherwise, it is left to the Driver's default value.	WITHOUT_CLASSIFICATION	0.9999996224623747	WITHOUT_CLASSIFICATION	3.775376252653072E-7	DESIGN
Configured outside of Hibernate (i.e. Servlet container, or Java Bean Container already has Proxool pools running, and this provider is to just borrow one of these	WITHOUT_CLASSIFICATION	0.976495089164012	WITHOUT_CLASSIFICATION	0.023504910835987984	DESIGN
If you're closing down the ConnectionProvider chances are an is not a real big deal, just warn	WITHOUT_CLASSIFICATION	0.9999999635320026	WITHOUT_CLASSIFICATION	3.6467997386341245E-8	DESIGN
(AS is always optional, for consistency with SQL/OQL)	WITHOUT_CLASSIFICATION	0.9999979846666834	WITHOUT_CLASSIFICATION	2.0153333165670036E-6	DESIGN
process the "new" HQL style where aliases are assigned _after_ the class name or path expression ie. using the AS construction	WITHOUT_CLASSIFICATION	0.999998892883984	WITHOUT_CLASSIFICATION	1.1071160159764102E-6	DESIGN
the loaded owner will be set to null after the collection is removed, so capture its value as the affected owner so it is accessible to both pre- and post- events	WITHOUT_CLASSIFICATION	0.9999999351877862	WITHOUT_CLASSIFICATION	6.48122137776504E-8	DESIGN
is a primitive type invokespecial	WITHOUT_CLASSIFICATION	0.9999996512496756	WITHOUT_CLASSIFICATION	3.4875032440099827E-7	DESIGN
array of primitive type do nothing	WITHOUT_CLASSIFICATION	0.9999992734724186	WITHOUT_CLASSIFICATION	7.265275814308604E-7	DESIGN
handle a path expression or class name that appears at the start, in the "new" HQL style or an alias that appears at the start in the "old" HQL style	WITHOUT_CLASSIFICATION	0.9999887672724292	WITHOUT_CLASSIFICATION	1.1232727570777255E-5	DESIGN
handle <=, >=, !=, is not, not between, not in	WITHOUT_CLASSIFICATION	0.9999199179840301	WITHOUT_CLASSIFICATION	8.0082015969866E-5	DESIGN
The loop ensures atomicity of the select + update even for no transaction or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999999981514596	WITHOUT_CLASSIFICATION	1.8485404338673026E-9	DESIGN
transfer an explicitly defined entity name handle the lazy attribute	WITHOUT_CLASSIFICATION	0.9999760147834661	WITHOUT_CLASSIFICATION	2.3985216533968E-5	DESIGN
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999981228099057	WITHOUT_CLASSIFICATION	1.8771900943120318E-6	DESIGN
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999981228099057	WITHOUT_CLASSIFICATION	1.8771900943120318E-6	DESIGN
get meta's from <joined-subclass>	WITHOUT_CLASSIFICATION	0.9999942966700563	WITHOUT_CLASSIFICATION	5.70332994374316E-6	DESIGN
parameters on the property mapping should override parameters in the typedef	WITHOUT_CLASSIFICATION	0.9989805009174464	WITHOUT_CLASSIFICATION	0.001019499082553573	DESIGN
fetch="join" overrides default laziness fetch="join" overrides default laziness	WITHOUT_CLASSIFICATION	0.9999999673270187	WITHOUT_CLASSIFICATION	3.267298131751148E-8	DESIGN
NOTE SPECIAL CASE: default to join and non-lazy for the "second join" of the many-to-many	WITHOUT_CLASSIFICATION	0.9999991046666604	WITHOUT_CLASSIFICATION	8.953333395161365E-7	DESIGN
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.999997286279217	WITHOUT_CLASSIFICATION	2.7137207829506295E-6	DESIGN
state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999985326098792	WITHOUT_CLASSIFICATION	1.4673901208148604E-5	DESIGN
void setComponentTuplizerFactory(ComponentTuplizerFactory componentTuplizerFactory) { this.componentTuplizerFactory = componentTuplizerFactory; }	WITHOUT_CLASSIFICATION	0.9999950132761279	WITHOUT_CLASSIFICATION	4.986723872075688E-6	DESIGN
element index -> id	WITHOUT_CLASSIFICATION	0.9999969909359787	WITHOUT_CLASSIFICATION	3.009064021365754E-6	DESIGN
note that it might be better to iterate the snapshot but this is safe, assuming the user implements equals() properly, as required by the Set contract!	WITHOUT_CLASSIFICATION	0.9350904814603855	WITHOUT_CLASSIFICATION	0.06490951853961435	DESIGN
collections detect changes made via their public interface and mark themselves as dirty as a performance optimization	WITHOUT_CLASSIFICATION	0.9999961233681068	WITHOUT_CLASSIFICATION	3.876631893177915E-6	DESIGN
essentially, if the real session is closed allow any method call to pass through since the real session will complain by throwing an appropriate exception; NOTE that allowing close() above has the same basic effect, but we capture that there simply to perform the unbind...	WITHOUT_CLASSIFICATION	0.9999967152176378	WITHOUT_CLASSIFICATION	3.2847823621984146E-6	DESIGN
The default SQLExceptionConverter for all dialects is based on SQLState since SQLErrorCode is extremely vendor-specific. Specific Dialects may override to return whatever is most appropriate for that vendor.	WITHOUT_CLASSIFICATION	0.9999999166096475	WITHOUT_CLASSIFICATION	8.339035251293741E-8	DESIGN
only necessary for postgre < 7.4 http:anoncvs.postgresql.org/cvsweb.cgi/pgsql/doc/src/sgml/ref/create_sequence.sgml	WITHOUT_CLASSIFICATION	0.9999997881601109	WITHOUT_CLASSIFICATION	2.118398891038456E-7	DESIGN
select topic, syntax from information_schema.help where section like 'Function%' order by section, topic see also -> http:www.h2database.com/html/functions.html	WITHOUT_CLASSIFICATION	0.9999999734813348	WITHOUT_CLASSIFICATION	2.6518665228928392E-8	DESIGN
registerColumnType(Types.VARBINARY, "CHARACTER($l)"); registerColumnType(Types.BLOB, "CHARACTER($l)" ); For use prior to CP 11.0 registerColumnType(Types.CLOB, "CHARACTER($l)" );	WITHOUT_CLASSIFICATION	0.9999416171066798	WITHOUT_CLASSIFICATION	5.8382893320168283E-5	DESIGN
the BLOB type requires a size arguement - this defaults to bytes - no arg defaults to 1 whole byte! other argument mods include K - kilobyte, M - megabyte, G - gigabyte. refer to the PBdevelopers guide for more info.	WITHOUT_CLASSIFICATION	0.9819768107988234	WITHOUT_CLASSIFICATION	0.01802318920117658	DESIGN
We must return a valid RDMS/RSA command from this method to prevent RDMS/RSA from issuing ERROR 400	WITHOUT_CLASSIFICATION	0.9990292804113485	WITHOUT_CLASSIFICATION	9.707195886514918E-4	DESIGN
Oracle driver reports to support getGeneratedKeys(), but they only support the version taking an array of the names of the columns to be returned (via its RETURNING clause). No other driver seems to support this overloaded version.	WITHOUT_CLASSIFICATION	0.9931840694434704	WITHOUT_CLASSIFICATION	0.006815930556529726	DESIGN
add the comment nest the main query in an outer select add the rownnumber bit into the outer query select list	WITHOUT_CLASSIFICATION	0.9999991700241929	WITHOUT_CLASSIFICATION	8.299758070696044E-7	DESIGN
You may still have other ResultSets or update counts left to process here but you can't do it now or the ResultSet you just got will be closed	WITHOUT_CLASSIFICATION	0.9999999511277478	WITHOUT_CLASSIFICATION	4.887225216676405E-8	DESIGN
Note: For object <-> SQL datatype mappings see: Configuration Manager | Advanced | SQL | System DDL Datatype Mappings TBDregisterColumnType(Types.BINARY, "binary($1)"); changed 08-11-2005, jsl	WITHOUT_CLASSIFICATION	0.9999698157986707	WITHOUT_CLASSIFICATION	3.018420132923159E-5	DESIGN
TRIM(end_keyword string-expression-1 FROM string-expression-2) use Hibernate implementation "From" is one of the parameters they pass in position ?3 registerFunction( "trim", new SQLFunctionTemplate(Hibernate.STRING, "trim(?1 ?2 from ?3)") );	WITHOUT_CLASSIFICATION	0.9999999960195469	WITHOUT_CLASSIFICATION	3.980453058757921E-9	DESIGN
Whether this dialect has an Identity clause added to the data type or a completely seperate identity data type	WITHOUT_CLASSIFICATION	0.9999220566361756	WITHOUT_CLASSIFICATION	7.794336382440277E-5	DESIGN
According to both the ANSI-SQL and JPA specs, trim takes a variable number of parameters between 1 and 4. at least one paramer (trimSource) is required. From the SQL spec: <trim function> ::= TRIM <left paren> <trim operands> <right paren> <trim operands> ::= [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> <trim specification> ::= LEADING | TRAILING | BOTH If <trim specification> is omitted, BOTH is assumed. If <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999938122262936	WITHOUT_CLASSIFICATION	6.187773706479261E-6	DESIGN
/ Prepare persisters and link them up with their cache region/access-strategy	WITHOUT_CLASSIFICATION	0.9991212072288255	WITHOUT_CLASSIFICATION	8.787927711744534E-4	DESIGN
Named Queries:	WITHOUT_CLASSIFICATION	0.99999359698021	WITHOUT_CLASSIFICATION	6.403019790073175E-6	DESIGN
this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.949877011439627	WITHOUT_CLASSIFICATION	0.05012298856037295	DESIGN
does not handle arrays (thats ok, cos they can't be lazy) or newly instantiated collections, so we can do the cast	WITHOUT_CLASSIFICATION	0.9895162711418233	WITHOUT_CLASSIFICATION	0.010483728858176661	DESIGN
collection deletions are a special case since update() can add deletions of collections not loaded by the session.	WITHOUT_CLASSIFICATION	0.9999999997623319	WITHOUT_CLASSIFICATION	2.3766816001795064E-10	DESIGN
we can do the cast since orphan-delete does not apply to: 1. newly instantiated collections 2. arrays (we can't track orphans for detached arrays)	WITHOUT_CLASSIFICATION	0.9223068280720735	WITHOUT_CLASSIFICATION	0.07769317192792644	DESIGN
if the natural-id is marked as non-mutable, it is not retrieved during a normal database-snapshot operation...	WITHOUT_CLASSIFICATION	0.9999998888052438	WITHOUT_CLASSIFICATION	1.1119475607762036E-7	DESIGN
watch out for a case where old is still referenced somewhere in the object graph! (which is a user error)	WITHOUT_CLASSIFICATION	0.9999769564604962	WITHOUT_CLASSIFICATION	2.3043539503766646E-5	DESIGN
slice, to get the columns for this component property	WITHOUT_CLASSIFICATION	0.9978371630412385	WITHOUT_CLASSIFICATION	0.0021628369587614674	DESIGN
int result = 17; result = 37 result + type.hashCode(); result = 37 result + ( value==null ? 0 : value.hashCode() ); return result;	WITHOUT_CLASSIFICATION	0.9999999753957767	WITHOUT_CLASSIFICATION	2.460422343862857E-8	DESIGN
The CollectionEntry.isReached() stuff is just to detect any silly users who set up circular or shared references between/to collections.	WITHOUT_CLASSIFICATION	0.9999989729800156	WITHOUT_CLASSIFICATION	1.0270199844471044E-6	DESIGN
detached collection wrappers that get found + reattached during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999992127588297	WITHOUT_CLASSIFICATION	7.87241170364475E-7	DESIGN
The unique property value represented here may or may not be serializable, so we do an explicit check here in order to generate a better error message	WITHOUT_CLASSIFICATION	0.9908098162857669	WITHOUT_CLASSIFICATION	0.009190183714233172	DESIGN
if the version of a newly instantiated object is not the same as the version seed value, use that as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999876754990357	WITHOUT_CLASSIFICATION	1.232450096430923E-5	DESIGN
ie. we never have to null out a reference to an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999993935244705	WITHOUT_CLASSIFICATION	6.064755294194428E-7	DESIGN
ignore this row, the collection is in process of being loaded somewhere further "up" the stack	WITHOUT_CLASSIFICATION	0.9999998086026631	WITHOUT_CLASSIFICATION	1.9139733690763633E-7	DESIGN
Entity load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ currently, not yet used...	WITHOUT_CLASSIFICATION	0.9965774081851493	WITHOUT_CLASSIFICATION	0.00342259181485079	DESIGN
should be ok performance-wise to generate new delegate instances for each request since these are locally stack-scoped. Besides, it makes the code much easier to read than the old TransactionHelper stuff...	WITHOUT_CLASSIFICATION	0.918157907066454	WITHOUT_CLASSIFICATION	0.08184209293354604	DESIGN
this implementation is supposed to tolerate incorrect unsaved-value mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9996790516144294	WITHOUT_CLASSIFICATION	3.2094838557058055E-4	DESIGN
this implementation is supposed to tolerate incorrect unsaved-value mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9996790516144294	WITHOUT_CLASSIFICATION	3.2094838557058055E-4	DESIGN
wrap up any new collections directly referenced by the object or its components	WITHOUT_CLASSIFICATION	0.9999997832710683	WITHOUT_CLASSIFICATION	2.1672893173449032E-7	DESIGN
remove any snapshot, not really for memory management purposes, but rather because it might now be stale, and there is no longer any EntityEntry to take precedence This is now handled by removeEntity() session.getPersistenceContext().removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999181669093243	WITHOUT_CLASSIFICATION	8.183309067560866E-5	DESIGN
skip this check for composite-ids relating to dom4j entity-mode; alternatively, we could add a check to make sure the incoming id value is an instance of Element...	WITHOUT_CLASSIFICATION	0.9168239357205851	WITHOUT_CLASSIFICATION	0.08317606427941489	DESIGN
upgrade the lock if necessary: lock(result, lockMode);	WITHOUT_CLASSIFICATION	0.9980955518984802	WITHOUT_CLASSIFICATION	0.001904448101519826	DESIGN
now, any collections that are initialized inside this block do not get updated - they are ignored until the next flush	WITHOUT_CLASSIFICATION	0.9999883980350223	WITHOUT_CLASSIFICATION	1.1601964977727563E-5	DESIGN
we must clone embedded composite identifiers, or we will get back the same instance that we pass in	WITHOUT_CLASSIFICATION	0.9999967003561833	WITHOUT_CLASSIFICATION	3.2996438167261815E-6	DESIGN
Sub-insertions should occur before containing insertion so Try to do the callback now	WITHOUT_CLASSIFICATION	0.9991795799445097	WITHOUT_CLASSIFICATION	8.20420055490299E-4	DESIGN
the entity is not associated with the session, so try interceptor and unsaved-value	WITHOUT_CLASSIFICATION	0.9999996669856602	WITHOUT_CLASSIFICATION	3.330143398845006E-7	DESIGN
scan the query string for class names appearing in the from clause and replace with all persistent implementors of the class/interface, returning multiple query strings (make sure we don't pick up a class in the select clause!)	WITHOUT_CLASSIFICATION	0.8818320462821057	DESIGN	0.11816795371789429	WITHOUT_CLASSIFICATION
save() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999209693059	WITHOUT_CLASSIFICATION	7.903069421384471E-8	DESIGN
evict() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994391631468	WITHOUT_CLASSIFICATION	5.608368532036447E-7	DESIGN
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9997079438389698	WITHOUT_CLASSIFICATION	2.9205616103021435E-4	DESIGN
if it is an uninitialized proxy, pointing with this session, then when it is accessed, the underlying instance will be "contained"	WITHOUT_CLASSIFICATION	0.9999990458593221	WITHOUT_CLASSIFICATION	9.541406779641295E-7	DESIGN
Generate an explicit join for the root dot node. The implied joins will be collected and passed up to the root dot node.	WITHOUT_CLASSIFICATION	0.9999999985638482	WITHOUT_CLASSIFICATION	1.4361517305812742E-9	DESIGN
A session is considered to contain an entity only if the entity has an entry in the session's persistence context and the entry reports that the entity has not been removed	WITHOUT_CLASSIFICATION	0.9998952381915046	WITHOUT_CLASSIFICATION	1.0476180849544051E-4	DESIGN
Does the collection referenced by this FromElement specify an order-by attribute? If so, attach it to the query's order-by	WITHOUT_CLASSIFICATION	0.9990740365230254	WITHOUT_CLASSIFICATION	9.259634769745435E-4	DESIGN
... and the token could be an identifer and the error is a mismatched token error ...	WITHOUT_CLASSIFICATION	0.9999796063682381	WITHOUT_CLASSIFICATION	2.0393631761880046E-5	DESIGN
If a where clause was specified in the update/delete query, use it to limit the returned ids here...	WITHOUT_CLASSIFICATION	0.9999999980433675	WITHOUT_CLASSIFICATION	1.9566326224194175E-9	DESIGN
int parameterStart = getWalker().getNumberOfParametersInSetClause(); List allParams = getIdSelectParameterSpecifications(); Iterator whereParams = allParams.subList( parameterStart, allParams.size() ).iterator();	WITHOUT_CLASSIFICATION	0.999999996476497	WITHOUT_CLASSIFICATION	3.5235029302204222E-9	DESIGN
Default implementation: If this node has a data type, and that data type is not an association, then this is scalar.	WITHOUT_CLASSIFICATION	0.9987680878980593	WITHOUT_CLASSIFICATION	0.0012319121019407765	DESIGN
Resolve the LHS fully, generate implicit joins. Pass in the property name so that the resolver can discover foreign key (id) properties.	WITHOUT_CLASSIFICATION	0.999996614805467	WITHOUT_CLASSIFICATION	3.385194533107325E-6	DESIGN
If the propertyType is null and there isn't a parent, just stop now... there was a problem resolving the node anyway.	WITHOUT_CLASSIFICATION	0.9909760572660421	WITHOUT_CLASSIFICATION	0.00902394273395802	DESIGN
We do not look for an existing join on the same path, because it makes sense to join twice on the same collection role	WITHOUT_CLASSIFICATION	0.9999998726730344	WITHOUT_CLASSIFICATION	1.2732696562485784E-7	DESIGN
our parent is another dot node, meaning we are being further dereferenced. thus we need to generate a join unless the parent refers to the associated entity's PK (because 'our' table would know the FK).	WITHOUT_CLASSIFICATION	0.9998863320468592	WITHOUT_CLASSIFICATION	1.1366795314088159E-4	DESIGN
public final Currency getCurrency(int col) throws HibernateException {return (Currency) get(col);}	WITHOUT_CLASSIFICATION	0.9999711076611426	WITHOUT_CLASSIFICATION	2.8892338857458248E-5	DESIGN
here, we have two possibilities: 1) the property-name matches the explicitly identifier property name 2) the property-name matches the implicit 'id' property name	WITHOUT_CLASSIFICATION	0.9999973555406689	WITHOUT_CLASSIFICATION	2.644459331047956E-6	DESIGN
Set the unresolved path in this node and the parent. Set the text for the parent.	WITHOUT_CLASSIFICATION	0.9999796707291644	WITHOUT_CLASSIFICATION	2.0329270835659077E-5	DESIGN
Get the first child to be considered. Sub-classes may do this differently in order to skip nodes that are not select expressions (e.g. DISTINCT).	WITHOUT_CLASSIFICATION	0.9997954403775038	WITHOUT_CLASSIFICATION	2.0455962249630368E-4	DESIGN
If this is an entity and the property is the identifier property, then use getIdentifierType(). Note that the propertyName.equals( propertyPath ) checks whether we have a component key reference, where the component class property name is the same as the entity id property name; if the two are not equal, this is the case and we'd need to "fall through" to using the property mapping.	WITHOUT_CLASSIFICATION	0.9999999998522017	WITHOUT_CLASSIFICATION	1.4779833291100603E-10	DESIGN
for a subquery, the alias to use depends on a few things (we already know this is not an overall SELECT): 1) if this FROM_ELEMENT represents a correlation to the outer-most query A) if the outer query represents a multi-table persister, we need to use the given alias in anticipation of one of the multi-table executors being used (as this subquery will actually be used in the "id select" phase of that multi-table executor) B) otherwise, we need to use the persister's table name as the column qualification 2) otherwise (not correlated), use the given alias	WITHOUT_CLASSIFICATION	0.9126147103765426	WITHOUT_CLASSIFICATION	0.08738528962345736	DESIGN
Not a collection? Return the entity property mapping.	WITHOUT_CLASSIFICATION	0.9864980779836409	WITHOUT_CLASSIFICATION	0.01350192201635916	DESIGN
collection of <many-to-any/> mappings... used to circumvent the component-collection check below...	WITHOUT_CLASSIFICATION	0.9996497232449557	WITHOUT_CLASSIFICATION	3.502767550442965E-4	DESIGN
Otherwise, the destination node was implied by the FROM clause and the FROM clause processor will automatically add it in the right place.	WITHOUT_CLASSIFICATION	0.9999957577805656	WITHOUT_CLASSIFICATION	4.242219434373134E-6	DESIGN
If the first identifier in the path referrs to the class alias (not the class name), then this is a correlated subselect. If it's a correlated sub-select, use the existing table alias. Otherwise generate a new one.	WITHOUT_CLASSIFICATION	0.9995612345211652	WITHOUT_CLASSIFICATION	4.387654788348517E-4	DESIGN
check to see if our "propPath" actually represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999044056748512	WITHOUT_CLASSIFICATION	9.559432514885664E-5	DESIGN
An ident node can represent an index expression if the ident represents a naked property ref Note: this makes the assumption (which is currently the case in the hql-sql grammar) that the ident is first resolved itself (addrExpr -> resolve()). The other option, if that changes, is to call resolve from here; but it is currently un-needed overhead.	WITHOUT_CLASSIFICATION	0.9999985912665399	WITHOUT_CLASSIFICATION	1.4087334601451806E-6	DESIGN
This uses a PathExpressionParser but notice that compound paths are not valid, only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9998953121918569	WITHOUT_CLASSIFICATION	1.0468780814304942E-4	DESIGN
If this is an implied join in a FROM clause, then use ANSI-style joining, and set the flag on the FromElement that indicates that it was implied in the FROM clause itself.	WITHOUT_CLASSIFICATION	0.9999996774762773	WITHOUT_CLASSIFICATION	3.22523722739056E-7	DESIGN
origin.addDestination(destination); Add the query spaces.	WITHOUT_CLASSIFICATION	0.9999852441640692	WITHOUT_CLASSIFICATION	1.475583593086633E-5	DESIGN
For an explicit many-to-many relationship, add a second join from the intermediate (many-to-many) table to the destination table. Also, make sure that the from element's idea of the destination is the destination table.	WITHOUT_CLASSIFICATION	0.9999999999067151	WITHOUT_CLASSIFICATION	9.328487660834601E-11	DESIGN
Reset the node type, because the rest of the system is expecting FROM_FRAGMENT, all we wanted was for the factory to create the right sub-class. This might get reset again later on anyway to make the SQL generation simpler.	WITHOUT_CLASSIFICATION	0.9964334131194688	WITHOUT_CLASSIFICATION	0.003566586880531214	DESIGN
explicit = true; This is an explict Select. ArrayList sqlResultTypeList = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999999660229284	WITHOUT_CLASSIFICATION	3.397707169009894E-8	DESIGN
sqlResultTypeList.add( type ); Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999994411179235	WITHOUT_CLASSIFICATION	5.588820765402496E-7	DESIGN
If the expression list has exactly one expression, and the type of the expression is a collection then this might be a collection function, such as index(c) or size(c).	WITHOUT_CLASSIFICATION	0.9999680374176176	WITHOUT_CLASSIFICATION	3.1962582382366483E-5	DESIGN
Need to parse off the column qualifiers; this is assuming (which is true as of now) that this is only used from update and delete HQL statement parsing	WITHOUT_CLASSIFICATION	0.9999997246434295	WITHOUT_CLASSIFICATION	2.75356570583933E-7	DESIGN
for regression testing against output from the old parser... found it easiest to simply reorder the FromElements here into ascending order in terms of injecting them into the resulting sql ast in orders relative to those expected by the old parser; this is definitely another of those "only needed for regression purposes". The SyntheticAndFactory, then, simply injects them as it encounters them.	WITHOUT_CLASSIFICATION	0.9999998259588775	WITHOUT_CLASSIFICATION	1.7404112253736838E-7	DESIGN
The uber-rule here is that we need to include subclass joins if the FromElement is in any way dereferenced by a property from the subclass table; otherwise we end up with column references qualified by a non-existent table reference in the resulting SQL...	WITHOUT_CLASSIFICATION	0.999938254478346	WITHOUT_CLASSIFICATION	6.174552165412456E-5	DESIGN
classic translator does not support collection of ordinal param metadata	WITHOUT_CLASSIFICATION	0.9788890809440436	WITHOUT_CLASSIFICATION	0.021110919055956388	DESIGN
The following variables are stacks that keep information about each subexpression in the list of nested subexpressions we are currently processing.	WITHOUT_CLASSIFICATION	0.9999498198281463	WITHOUT_CLASSIFICATION	5.018017185377493E-5	DESIGN
The loop ensures atomicity of the select + update even for no transaction or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999999981514596	WITHOUT_CLASSIFICATION	1.8485404338673026E-9	DESIGN
should not be able to reach last without maxPosition being set unless there are no results	WITHOUT_CLASSIFICATION	0.9999998857033879	WITHOUT_CLASSIFICATION	1.1429661199914323E-7	DESIGN
we found it in the temp PC. Should indicate we are in the midst of processing a result set containing eager fetches via join fetch	WITHOUT_CLASSIFICATION	0.9999967523714978	WITHOUT_CLASSIFICATION	3.247628502140222E-6	DESIGN
do not use proxiesByKey, since not all proxies that point to this session's instances are in that collection!	WITHOUT_CLASSIFICATION	0.9743528549019437	WITHOUT_CLASSIFICATION	0.02564714509805632	DESIGN
if there is no TM configured, we will not be able to access the javax.transaction.Transaction object in order to register a synch anyway.	WITHOUT_CLASSIFICATION	0.825825988823667	WITHOUT_CLASSIFICATION	0.174174011176333	DESIGN
Since the result set cursor is always left at the first physical row after the "last processed", we need to jump back one position to get the key value we are interested in skipping	WITHOUT_CLASSIFICATION	0.9999404446309592	WITHOUT_CLASSIFICATION	5.9555369040841405E-5	DESIGN
true if this is a query and we are loading multiple instances of the same collection role otherwise this is a CollectionInitializer and we are loading up a single collection or batch	WITHOUT_CLASSIFICATION	0.9999196703680888	WITHOUT_CLASSIFICATION	8.032963191120187E-5	DESIGN
we don't need to worry about existing version being uninitialized because this block isn't called by a re-entrant load (re-entrant loads _always_ have lock mode NONE)	WITHOUT_CLASSIFICATION	0.9999953447316916	WITHOUT_CLASSIFICATION	4.655268308354977E-6	DESIGN
add temp entry so that the next step is circular-reference safe - only needed because some types don't take proper advantage of two-phase-load (esp. components)	WITHOUT_CLASSIFICATION	0.9999999852571639	WITHOUT_CLASSIFICATION	1.474283607171864E-8	DESIGN
assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.999999670720017	WITHOUT_CLASSIFICATION	3.2927998302051645E-7	DESIGN
log a message about potential connection leaks	WITHOUT_CLASSIFICATION	0.9999912567196078	WITHOUT_CLASSIFICATION	8.743280392290655E-6	DESIGN
ps.close(); just close it; do NOT try to return it to the pool! NOTE: early exit!	WITHOUT_CLASSIFICATION	0.9999999817695612	WITHOUT_CLASSIFICATION	1.823043877687653E-8	DESIGN
this has been shown to happen occasionally in rare cases when using a transaction manager + transaction-timeout where the timeout calls back through Hibernate's registered transaction synchronization on a separate "reaping" thread. In cases where that reaping thread executes through this block at the same time the main application thread does we can get into situations where these CMEs occur. And though it is not "allowed" per-se, the end result without handling it specifically is infinite looping. So here, we simply break the loop	WITHOUT_CLASSIFICATION	0.9999996577420723	WITHOUT_CLASSIFICATION	3.4225792767689187E-7	DESIGN
unfortunately this stuff can't be cached because it is per-invocation, not constant for the QueryTranslator instance	WITHOUT_CLASSIFICATION	0.998051513047655	WITHOUT_CLASSIFICATION	0.0019484869523448743	DESIGN
can't cache this stuff either (per-invocation) we are given a map of user-alias -> lock mode create a new map of sql-alias -> lock mode	WITHOUT_CLASSIFICATION	0.9999606651386668	WITHOUT_CLASSIFICATION	3.933486133329597E-5	DESIGN
don't create a unique key, 'cos some databases don't like a UK on nullable columns getCollectionTable().createUniqueKey( getIdentifier().getConstraintColumns() );	WITHOUT_CLASSIFICATION	0.9999999894263857	WITHOUT_CLASSIFICATION	1.057361431609663E-8	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999949833872698	WITHOUT_CLASSIFICATION	5.016612730183077E-6	DESIGN
isSet = collection.isSet(); isSorted = collection.isSorted();	WITHOUT_CLASSIFICATION	0.9999966348546558	WITHOUT_CLASSIFICATION	3.3651453441968877E-6	DESIGN
lists, arrays sets, maps, bags	WITHOUT_CLASSIFICATION	0.9999992412792442	WITHOUT_CLASSIFICATION	7.587207558744924E-7	DESIGN
we finish all the "removes" first to take care of possible unique constraints and so that we can take better advantage of batching	WITHOUT_CLASSIFICATION	0.9998848581443386	WITHOUT_CLASSIFICATION	1.1514185566147654E-4	DESIGN
use a combination of foreign key columns and pk columns, since the ordering of removal and addition is not guaranteed when a child moves from one parent to another	WITHOUT_CLASSIFICATION	0.9999524028938832	WITHOUT_CLASSIFICATION	4.7597106116754834E-5	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999949833872698	WITHOUT_CLASSIFICATION	5.016612730183077E-6	DESIGN
information about properties of this class, including inherited properties (only really needed for updatable/insertable properties)	WITHOUT_CLASSIFICATION	0.9999973503225437	WITHOUT_CLASSIFICATION	2.6496774562142593E-6	DESIGN
all this only really needs to consider properties of this class, not its subclasses, but since we are reusing code used for sequential selects, we use the subclass closure	WITHOUT_CLASSIFICATION	0.9999969688154766	WITHOUT_CLASSIFICATION	3.031184523485836E-6	DESIGN
Here we render the select column list based on the properties defined as being generated. For partial component generation, we currently just re-select the whole component rather than trying to handle the individual generated portions.	WITHOUT_CLASSIFICATION	0.9999303116564736	WITHOUT_CLASSIFICATION	6.96883435264251E-5	DESIGN
this is the root (versioned) table, and we are using version-based optimistic locking; if we are not updating the version, also don't check it (unless this is a "generated" version column)!	WITHOUT_CLASSIFICATION	0.9999999661452528	WITHOUT_CLASSIFICATION	3.385474719981781E-8	DESIGN
optimistic-lock="all", include all updatable properties optimistic-lock="dirty", include all properties we are updating this time	WITHOUT_CLASSIFICATION	0.9999976446182686	WITHOUT_CLASSIFICATION	2.3553817315286687E-6	DESIGN
this property belongs to the table, and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9992484051177839	WITHOUT_CLASSIFICATION	7.515948822160712E-4	DESIGN
check to see if the connection is in auto-commit mode (no connection means aggressive connection release outside a JTA transaction context, so MUST be autocommit mode)	WITHOUT_CLASSIFICATION	0.998652789423789	WITHOUT_CLASSIFICATION	0.0013472105762110929	DESIGN
need to treat this as if it where optimistic-lock="all" (dirty does not make sense); first we need to locate the "loaded" state Note, it potentially could be a proxy, so perform the location the safe way...	WITHOUT_CLASSIFICATION	0.7604990700929266	WITHOUT_CLASSIFICATION	0.23950092990707336	DESIGN
we always assume an instance with a null identifier or no identifier property is unsaved!	WITHOUT_CLASSIFICATION	0.9999991450833554	WITHOUT_CLASSIFICATION	8.549166446529456E-7	DESIGN
Need to use the identifier type of the collection owner since the incoming is value is actually the owner's id. Using the collection's key type causes problems with property-ref keys...	WITHOUT_CLASSIFICATION	0.9999521221720303	WITHOUT_CLASSIFICATION	4.7877827969710875E-5	DESIGN
allow any identifier quoted with backtick only recognizes identifiers beginning with a letter	WITHOUT_CLASSIFICATION	0.9999393903176836	WITHOUT_CLASSIFICATION	6.060968231638062E-5	DESIGN
following doesn't handle (null, not null) but unnecessary since this would mean all rows	WITHOUT_CLASSIFICATION	0.9966975238409539	WITHOUT_CLASSIFICATION	0.00330247615904617	DESIGN
IMPL NOTE : due to the delayed population of setters (setters cached for performance), we really cannot pro0perly define equality for this transformer	WITHOUT_CLASSIFICATION	0.9880178204862282	WITHOUT_CLASSIFICATION	0.01198217951377177	DESIGN
we need to dirty check collections, since they can cause an owner version number increment	WITHOUT_CLASSIFICATION	0.9999833796588439	WITHOUT_CLASSIFICATION	1.662034115607605E-5	DESIGN
return the id, so we can use it to reset the proxy id return result;	WITHOUT_CLASSIFICATION	0.9999978934209924	WITHOUT_CLASSIFICATION	2.1065790076279467E-6	DESIGN
optimizer = getFactory().getSettings().getBytecodeProvider().getReflectionOptimizer( mappedClass, getterNames, setterNames, propTypes );	WITHOUT_CLASSIFICATION	0.9999196138360533	WITHOUT_CLASSIFICATION	8.038616394668514E-5	DESIGN
cache the actual id of the object, not the value of the property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999995215438175	WITHOUT_CLASSIFICATION	4.784561824708848E-7	DESIGN
We now have the value of the property-ref we reference. However, we need to dig a little deeper, as that property might also be an entity type, in which case we need to resolve its identitifier	WITHOUT_CLASSIFICATION	0.9999999454358258	WITHOUT_CLASSIFICATION	5.456417410076763E-8	DESIGN
Retrieve the value of the designated column in the current row of this ResultSet object as a java.io.Reader object	WITHOUT_CLASSIFICATION	0.9999999622226147	WITHOUT_CLASSIFICATION	3.777738542506902E-8	DESIGN
not absolutely necessary, but helps for some equals()/hashCode() implementations	WITHOUT_CLASSIFICATION	0.9999588959512222	WITHOUT_CLASSIFICATION	4.1104048777840916E-5	DESIGN
this should be a call to resolve(), not resolveIdentifier(), 'cos it might be a property-ref, and we did not cache the referenced value	WITHOUT_CLASSIFICATION	0.9999323384184806	WITHOUT_CLASSIFICATION	6.766158151936868E-5	DESIGN
If we have <tt>not-found="ignore"</tt> association mapped to a formula, we always need to dirty check it, so we can update the second-level cache	WITHOUT_CLASSIFICATION	0.9998861646725197	WITHOUT_CLASSIFICATION	1.1383532748026957E-4	DESIGN
can't just return null here, since that would cause an owning component to become null	WITHOUT_CLASSIFICATION	0.9999990810030875	WITHOUT_CLASSIFICATION	9.189969124274777E-7	DESIGN
for arrays, replaceElements() may return a different reference, since the array length might not match	WITHOUT_CLASSIFICATION	0.999999850368357	WITHOUT_CLASSIFICATION	1.4963164300890298E-7	DESIGN
actual cache of the entries. soft references are used for both the keys and the values here since the values pertaining to the MRU entries are kept in a seperate hard reference cache (to avoid their enqueuement/garbage-collection).	WITHOUT_CLASSIFICATION	0.9999966188641151	WITHOUT_CLASSIFICATION	3.38113588499875E-6	DESIGN
as soon as we encounter our first letter, return the substring from that position	WITHOUT_CLASSIFICATION	0.9999999977787788	WITHOUT_CLASSIFICATION	2.2212212097933013E-9	DESIGN
Note : expected in the syntax: type=listenerClass ({sep}type=listenerClass) where {sep} is any whitespace or comma	WITHOUT_CLASSIFICATION	0.999999971716368	WITHOUT_CLASSIFICATION	2.8283632060575884E-8	DESIGN
isTransactionCallbackRegistered denotes whether any Hibernate Transaction has registered as a callback against this JDBCContext; only one such callback is allowed. Directly serializing this value causes problems with JDBCTransaction, or really any Transaction impl where the callback is local to the Transaction instance itself, since that Transaction is not serialized along with the JDBCContext. Thus we handle that fact here explicitly...	WITHOUT_CLASSIFICATION	0.9996433680258037	WITHOUT_CLASSIFICATION	3.5663197419627985E-4	DESIGN
note that for sequential scrolling, we make the assumption that the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999945594423136	WITHOUT_CLASSIFICATION	5.44055768634096E-6	DESIGN
We call getKeyFromResultSet() here so that we can know the key value upon which to perform the breaking logic. However, it is also then called from getRowFromResultSet() which is certainly not the most efficient. But the call here is needed, and there currently is no other way without refactoring of the doQuery()/getRowFromResultSet() methods	WITHOUT_CLASSIFICATION	0.8536908824853514	WITHOUT_CLASSIFICATION	0.14630911751464862	DESIGN
This check is needed since processing leaves the cursor after the last physical row for the current logical row; thus if we are after the last physical row, this might be caused by either: 1) scrolling to the last logical row 2) scrolling past the last logical row In the latter scenario, the previous logical row really is the last logical row. In all other cases, we should process back two logical records (the current logic row, plus the previous logical row).	WITHOUT_CLASSIFICATION	0.7854876239654677	DESIGN	0.21451237603453227	WITHOUT_CLASSIFICATION
and perform the load	WITHOUT_CLASSIFICATION	0.9999968404384951	WITHOUT_CLASSIFICATION	3.1595615048452308E-6	DESIGN
important: reuse the same event instances for performance!	WITHOUT_CLASSIFICATION	0.9536073449232241	WITHOUT_CLASSIFICATION	0.046392655076775854	DESIGN
this is a query and we are loading multiple instances of the same collection role	WITHOUT_CLASSIFICATION	0.9993890985699615	WITHOUT_CLASSIFICATION	6.109014300384957E-4	DESIGN
we found a collection element in the result set	WITHOUT_CLASSIFICATION	0.9999921522890355	WITHOUT_CLASSIFICATION	7.84771096455911E-6	DESIGN
we did not find a collection element in the result set, so we ensure that a collection is created with the owner's identifier, since what we have is an empty collection	WITHOUT_CLASSIFICATION	0.9999999981555379	WITHOUT_CLASSIFICATION	1.8444620605329902E-9	DESIGN
this is a collection initializer, so we must create a collection for each of the passed-in keys, to account for the possibility that the collection is empty and has no rows in the result set	WITHOUT_CLASSIFICATION	0.9999968991787238	WITHOUT_CLASSIFICATION	3.1008212762552107E-6	DESIGN
grab its state from the ResultSet and keep it in the Session (but don't yet initialize the object itself) note that we acquire LockMode.READ even if it was not requested	WITHOUT_CLASSIFICATION	0.9999991721270051	WITHOUT_CLASSIFICATION	8.278729950446671E-7	DESIGN
a many-to-many; decrement currentDepth here to allow join across the association table without exceeding MAX_FETCH_DEPTH (i.e. the "currentDepth - 1" bit)	WITHOUT_CLASSIFICATION	0.9601952730585376	WITHOUT_CLASSIFICATION	0.03980472694146242	DESIGN
if not a composite key, use "foo in (?, ?, ?)" for batching if no batch, and not a composite key, use "foo = ?"	WITHOUT_CLASSIFICATION	0.9999944317983129	WITHOUT_CLASSIFICATION	5.568201687063314E-6	DESIGN
the user visible aliases, which are unknown to the superclass, these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999999474992358	WITHOUT_CLASSIFICATION	5.25007642719381E-8	DESIGN
first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9999978783957357	WITHOUT_CLASSIFICATION	2.121604264229944E-6	DESIGN
first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9999978783957357	WITHOUT_CLASSIFICATION	2.121604264229944E-6	DESIGN
it does not refer to an alias of a projection, look for a property	WITHOUT_CLASSIFICATION	0.9999982717661983	WITHOUT_CLASSIFICATION	1.728233801803554E-6	DESIGN
determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999987338121956	WITHOUT_CLASSIFICATION	1.266187804430415E-6	DESIGN
Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999993301683637	WITHOUT_CLASSIFICATION	6.698316363175854E-7	DESIGN
Translates an AST join type (i.e., the token type) into a JoinFragment.XXX join type. @param astJoinType The AST join type (from HqlSqlTokenTypes or SqlTokenTypes) @return a JoinFragment.XXX join type. @see JoinFragment @see SqlTokenTypes	WITHOUT_CLASSIFICATION	0.9954350032175359	WITHOUT_CLASSIFICATION	0.0045649967824640475	DESIGN
ignore	WITHOUT_CLASSIFICATION	0.9999779527837916	WITHOUT_CLASSIFICATION	2.2047216208400962E-5	DESIGN
ignore	WITHOUT_CLASSIFICATION	0.9999779527837916	WITHOUT_CLASSIFICATION	2.2047216208400962E-5	DESIGN
}	WITHOUT_CLASSIFICATION	0.999834811237215	WITHOUT_CLASSIFICATION	1.651887627850538E-4	DESIGN
public List getCollectionAliases() { return collectionAliases; } public List getCollectionOwners() { return collectionOwners; } public List getCollectionOwnerAliases() { return collectionOwnerAliases; } public List getCollectionPersisters() { return collectionPersisters; } public Map getAlias2Persister() { return alias2Persister; } public boolean isCollectionInitializer() { return isCollectionInitializer; } public List getPersisters() { return persisters; } public Map getAlias2OwnerAlias() { return alias2OwnerAlias; } public List getScalarTypes() { return scalarTypes; } public List getScalarColumnAliases() { return scalarColumnAliases; } public List getPropertyResults() { return propertyResults; } public List getCollectionPropertyResults() { return collectionResults; } public Map getAlias2Return() { return alias2Return; }	WITHOUT_CLASSIFICATION	0.9999850674178233	WITHOUT_CLASSIFICATION	1.4932582176619686E-5	DESIGN
SQLQueryParser parser = new SQLQueryParser( sqlQuery, processor.getAlias2Persister(), processor.getAlias2Return(), aliases, collAliases, collPersisters, suffixes, collSuffixes ); sql = parser.process(); namedParameterBindPoints = parser.getNamedParameters();	WITHOUT_CLASSIFICATION	0.9999999710086646	WITHOUT_CLASSIFICATION	2.899133548379878E-8	DESIGN
include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9999994754200696	WITHOUT_CLASSIFICATION	5.245799304167753E-7	DESIGN
sqlAliasSuffixes[i] = element.getColumnAliasSuffix();	WITHOUT_CLASSIFICATION	0.9999979749379456	WITHOUT_CLASSIFICATION	2.0250620544152512E-6	DESIGN
NONE, because its the requested lock mode, not the actual!	WITHOUT_CLASSIFICATION	0.9999998048855255	WITHOUT_CLASSIFICATION	1.9511447458078898E-7	DESIGN
at this point we have (drivingSqlAlias) the SQL alias of the driving table corresponding to the given user alias. However, the driving table is not (necessarily) the table against which we want to apply locks. Mainly, the exception case here is joined-subclass hierarchies where we instead want to apply the lock against the root table (for all other strategies, it just happens that driving and root are the same).	WITHOUT_CLASSIFICATION	0.9999561705097494	WITHOUT_CLASSIFICATION	4.382949025060695E-5	DESIGN
the column doesnt exist at all.	WITHOUT_CLASSIFICATION	0.9999910636733924	WITHOUT_CLASSIFICATION	8.936326607548522E-6	DESIGN
we have a mapped identifier property and the root of the incoming property path matched that identifier property	WITHOUT_CLASSIFICATION	0.999999173477362	WITHOUT_CLASSIFICATION	8.265226379498781E-7	DESIGN
we have an embedded composite identifier	WITHOUT_CLASSIFICATION	0.9999988725204366	WITHOUT_CLASSIFICATION	1.12747956329396E-6	DESIGN
both many-to-one and one-to-one are represented as a Property. EntityPersister is relying on this value to determine "lazy fetch groups" in terms of field-level interception. So we need to make sure that we return true here for the case of many-to-one and one-to-one with lazy="no-proxy" impl note - lazy="no-proxy" currently forces both lazy and unwrap to be set to true. The other case we are extremely interested in here is that of lazy="proxy" where lazy is set to true, but unwrap is set to false. thus we use both here under the assumption that this return is really only ever used during persister construction to determine the lazy property/field fetch groupings. If that assertion changes then this check needs to change as well. Partially, this is an issue with the overloading of the term "lazy" here...	WITHOUT_CLASSIFICATION	0.9999977513781368	WITHOUT_CLASSIFICATION	2.2486218632417523E-6	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997891391628	WITHOUT_CLASSIFICATION	2.108608372341104E-7	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997891391628	WITHOUT_CLASSIFICATION	2.108608372341104E-7	DESIGN
rootTableName = persistentClass.getRootTable().getQualifiedName( factory.getDialect(), factory.getDefaultCatalog(), factory.getDefaultSchema() );	WITHOUT_CLASSIFICATION	0.9999999740210993	WITHOUT_CLASSIFICATION	2.597890066218834E-8	DESIGN
SUBCLASSES	WITHOUT_CLASSIFICATION	0.9998964943956687	WITHOUT_CLASSIFICATION	1.0350560433126967E-4	DESIGN
Custom sql	WITHOUT_CLASSIFICATION	0.9999486584359374	WITHOUT_CLASSIFICATION	5.1341564062546375E-5	DESIGN
protected void initPropertyPaths(final String path,final Type type,final String[] columns,final String[] formulaTemplates,final Mapping factory)throws MappingException {addFormulaPropertyPath(path, type, formulaTemplates);initPropertyPaths(path, type, columns, formulaTemplates, factory);}	WITHOUT_CLASSIFICATION	0.999957534056633	WITHOUT_CLASSIFICATION	4.246594336686546E-5	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996868431604878	WITHOUT_CLASSIFICATION	3.1315683951216793E-4	DESIGN
Custom SQL (would be better if these were private)	WITHOUT_CLASSIFICATION	0.997020186345216	WITHOUT_CLASSIFICATION	0.0029798136547838742	DESIGN
moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999310622125852	WITHOUT_CLASSIFICATION	6.893778741473848E-5	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996868431604878	WITHOUT_CLASSIFICATION	3.1315683951216793E-4	DESIGN
aliases for identifier ( alias.id ); skip if the entity defines a non-id property named 'id'	WITHOUT_CLASSIFICATION	0.9999987459435145	WITHOUT_CLASSIFICATION	1.254056485462617E-6	DESIGN
decide which ResultSet to get the property value from:	WITHOUT_CLASSIFICATION	0.9999607323957821	WITHOUT_CLASSIFICATION	3.926760421788247E-5	DESIGN
note: it is conceptually possible that a UserType could map null to a non-null value, so the following is arguable:	WITHOUT_CLASSIFICATION	0.9999089343075812	WITHOUT_CLASSIFICATION	9.106569241873094E-5	DESIGN
the contract of EntityTuplizer.determineConcreteSubclassEntityName says that returning null is an indication that the specified entity-name (this.getEntityName) should be used.	WITHOUT_CLASSIFICATION	0.6331473125017392	DESIGN	0.36685268749826094	WITHOUT_CLASSIFICATION
Need to use the identifier type of the collection owner since the incoming is value is actually the owner's id. Using the collection's key type causes problems with property-ref keys...	WITHOUT_CLASSIFICATION	0.9999521221720303	WITHOUT_CLASSIFICATION	4.7877827969710875E-5	DESIGN
cache these since they are stateless this one could even be static...	WITHOUT_CLASSIFICATION	0.9615632436457915	WITHOUT_CLASSIFICATION	0.03843675635420842	DESIGN
"as" is not in KEYWORDS	WITHOUT_CLASSIFICATION	0.9999106930405123	WITHOUT_CLASSIFICATION	8.9306959487767E-5	DESIGN
--Commented out by Inspection (12/4/04 9:10 AM): public abstract void addCondition(String alias, String[] columns, String condition);	WITHOUT_CLASSIFICATION	0.9999713213395458	WITHOUT_CLASSIFICATION	2.867866045419601E-5	DESIGN
use the id column alias	WITHOUT_CLASSIFICATION	0.9999981182367872	WITHOUT_CLASSIFICATION	1.8817632128123E-6	DESIGN
private List aliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999999701262859	WITHOUT_CLASSIFICATION	2.98737140542204E-8	DESIGN
columns.add(columnName); aliases.add(tableAlias);	WITHOUT_CLASSIFICATION	0.9999765301286211	WITHOUT_CLASSIFICATION	2.3469871378914813E-5	DESIGN
where fragment must be empty!	WITHOUT_CLASSIFICATION	0.999364450134941	WITHOUT_CLASSIFICATION	6.355498650588911E-4	DESIGN
revert to traditional hibernate behavior of setting initialPoolSize to minPoolSize unless otherwise specified with a c3p0.-style parameter.	WITHOUT_CLASSIFICATION	0.9993516286002797	WITHOUT_CLASSIFICATION	6.483713997203365E-4	DESIGN
arbitrary on clause ignored!!	WITHOUT_CLASSIFICATION	0.9999997526624256	WITHOUT_CLASSIFICATION	2.473375743976603E-7	DESIGN
might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9991202037689269	WITHOUT_CLASSIFICATION	8.797962310730332E-4	DESIGN
might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9991202037689269	WITHOUT_CLASSIFICATION	8.797962310730332E-4	DESIGN
if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999984076578339	WITHOUT_CLASSIFICATION	1.5923421662089542E-6	DESIGN
Essentially: 1) If we have a local (Hibernate) transaction in progress and it already has the UserTransaction cached, use that UserTransaction to determine the status. 2) If a transaction manager has been located, use that transaction manager to determine the status. 3) Finally, as the last resort, try to lookup the UserTransaction via JNDI and use that to determine the status.	WITHOUT_CLASSIFICATION	0.9999997766543713	WITHOUT_CLASSIFICATION	2.2334562856987818E-7	DESIGN
package	WITHOUT_CLASSIFICATION	0.999727668212874	WITHOUT_CLASSIFICATION	2.7233178712603856E-4	DESIGN
swallow it (the transaction _was_ successful or successfully rolled back)	WITHOUT_CLASSIFICATION	0.9999905454861632	WITHOUT_CLASSIFICATION	9.454513836867787E-6	DESIGN
ignore it	WITHOUT_CLASSIFICATION	0.999996876042553	WITHOUT_CLASSIFICATION	3.123957446936287E-6	DESIGN
we need to dirty check many-to-ones with not-found="ignore" in order to update the cache (not the database), since in this case a null entity reference can lose information	WITHOUT_CLASSIFICATION	0.9999939565456029	WITHOUT_CLASSIFICATION	6.043454397114656E-6	DESIGN
create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999989679658775	WITHOUT_CLASSIFICATION	1.0320341224813988E-6	DESIGN
Regions can get instantiated in the course of normal work (e.g. a named query region will be created the first time the query is executed), so suspend any ongoing tx	WITHOUT_CLASSIFICATION	0.9997837640884832	WITHOUT_CLASSIFICATION	2.1623591151671717E-4	DESIGN
then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9993364935126249	WITHOUT_CLASSIFICATION	6.635064873750408E-4	DESIGN
Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999858704723623	WITHOUT_CLASSIFICATION	1.4129527637668762E-5	DESIGN
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9951630305635758	WITHOUT_CLASSIFICATION	0.004836969436424213	DESIGN
NOTE : this is being used from the process of shutting down a SessionFactory. Specific things to consider: (1) this clearing of the region should not propagate to other nodes on the cluster (if any); this is the cache-mode-local option bit... (2) really just trying a best effort to cleanup after ourselves; lock failures, etc are not critical here; this is the fail-silently option bit...	WITHOUT_CLASSIFICATION	0.9999532301403806	DESIGN	4.676985961940325E-5	WITHOUT_CLASSIFICATION
need to extract the component values and check for subtype replacements...	WITHOUT_CLASSIFICATION	0.6410647167473464	DESIGN	0.3589352832526537	WITHOUT_CLASSIFICATION
We ignore minimalPutOverride. JBossCache putForExternalRead is already about as minimal as we can get; it will promptly return if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.999999989642904	WITHOUT_CLASSIFICATION	1.0357095884242524E-8	DESIGN
for now, just "re-flatten" the metamodel since this is temporary stuff anyway (HHH-1907)	WITHOUT_CLASSIFICATION	0.9890305859585174	DESIGN	0.01096941404148266	WITHOUT_CLASSIFICATION
Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9998897630446263	WITHOUT_CLASSIFICATION	1.1023695537360655E-4	DESIGN
This solution would allow us to eliminate the owner arg to disassemble(), but what if the collection was null, and then later had elements added? seems unsafe session.getPersistenceContext().getCollectionEntry( (PersistentCollection) value ).getKey();	WITHOUT_CLASSIFICATION	0.8116546086985122	DESIGN	0.1883453913014879	WITHOUT_CLASSIFICATION
Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999895567030946	WITHOUT_CLASSIFICATION	1.0443296905362443E-5	DESIGN
some collections are not lazy:	WITHOUT_CLASSIFICATION	0.9998126221883563	WITHOUT_CLASSIFICATION	1.8737781164365028E-4	DESIGN
Here we don't want to suspend the tx. If we do: 1) We might be caching query results that reflect uncommitted changes. No tx == no WL on cache node, so other threads can prematurely see those query results 2) No tx == immediate replication. More overhead, plus we spread issue #1 above around the cluster	WITHOUT_CLASSIFICATION	0.9994075513622404	WITHOUT_CLASSIFICATION	5.924486377595959E-4	DESIGN
return the (fully resolved) identifier value, but do not resolve to the actual referenced entity instance NOTE: the owner of the association is not really the owner of the id!	WITHOUT_CLASSIFICATION	0.9999999964345224	WITHOUT_CLASSIFICATION	3.565477584712227E-9	DESIGN
Add a zero (or quite low) timeout option so we don't block. Ignore any TimeoutException. Basically we forego caching the query result in order to avoid blocking. Reads are done with suspended tx, so they should not hold the lock for long. Not caching the query result is OK, since any subsequent read will just see the old result with its out-of-date timestamp; that result will be discarded and the db query performed again.	WITHOUT_CLASSIFICATION	0.999898683172686	WITHOUT_CLASSIFICATION	1.0131682731390692E-4	DESIGN
Impl note: takes advantage of the fact that an escpaed single quote embedded within a quote-block can really be handled as two seperate quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.999494358924718	WITHOUT_CLASSIFICATION	5.056410752818979E-4	DESIGN
We have the JBCWriteMutex, so no other local thread will be trying to write this key. It's possible here some remote thread has come in and changed the values again, but since we are reading the values to write to JBC right now, we know we are writing the latest values; i.e. we don't assume that what we cached in entry.update() above is what we should write to JBC now. Our write could be redundant, i.e. we are writing what some remote thread just came in an wrote. There is a chance that yet another remote thread will update us, and we'll then overwrite that later data in JBC. But, all remote nodes will ignore that change in their localCache; the only place it will live will be in JBC, where it can only effect the initial state transfer values on newly joined nodes (i.e. populateLocalCache()).	WITHOUT_CLASSIFICATION	0.9999999986091553	WITHOUT_CLASSIFICATION	1.3908447002176833E-9	DESIGN
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999982289855045	WITHOUT_CLASSIFICATION	1.7710144954490624E-6	DESIGN
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999982289855045	WITHOUT_CLASSIFICATION	1.7710144954490624E-6	DESIGN
Don't need to lock the cache here, since if someone else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9989319196380637	WITHOUT_CLASSIFICATION	0.0010680803619362992	DESIGN
we need to grab the version value from the entity, otherwise we have issues with generated-version entities that may have multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9920270552842207	WITHOUT_CLASSIFICATION	0.007972944715779322	DESIGN
we need to obtain the lock before any actions are executed, since this may be an inverse="true" bidirectional association and it is one of the earlier entity actions which actually updates the database (this action is resposible for second-level cache invalidation only)	WITHOUT_CLASSIFICATION	0.9999954708700876	WITHOUT_CLASSIFICATION	4.5291299124787875E-6	DESIGN
postDelete: After actually deleting a row, record the fact that the instance no longer exists on the database (needed for identity-column key generation), and remove it from the session cache	WITHOUT_CLASSIFICATION	0.663826924327062	DESIGN	0.33617307567293814	WITHOUT_CLASSIFICATION
intentionally empty	WITHOUT_CLASSIFICATION	0.9999950582711101	WITHOUT_CLASSIFICATION	4.941728889975087E-6	DESIGN
todo : what else to do here?	DESIGN	0.9638193074896746	WITHOUT_CLASSIFICATION	0.03618069251032542	DESIGN
put() has nowait semantics, is this really appropriate? note that it needs to be async replication, never local or sync	DESIGN	0.931753994055973	WITHOUT_CLASSIFICATION	0.06824600594402698	DESIGN
'hibernate.temp.use_jdbc_metadata_defaults' is a temporary magic value. The need for it is intended to be alleviated with future developement, thus it is not defined as an Environment constant... it is used to control whether we should consult the JDBC metadata to determine certain Settings default values; it is useful to not do this when the database may not be available (mainly in tools usage).	DESIGN	0.9958764845525726	WITHOUT_CLASSIFICATION	0.004123515447427355	DESIGN
TODO: get SQL rendering out of this package!	DESIGN	0.9318069623466103	DESIGN	0.06819303765338969	WITHOUT_CLASSIFICATION
TODO: get SQL rendering out of this package!	DESIGN	0.9318069623466103	DESIGN	0.06819303765338969	WITHOUT_CLASSIFICATION
todo : eventually merge this with TreeCache and just add optional opt-lock support there.	DESIGN	0.9990584080856658	WITHOUT_CLASSIFICATION	9.415919143340937E-4	DESIGN
can happen because of the multiple ways Cache.remove() can be invoked :(	DESIGN	0.9999841686441461	WITHOUT_CLASSIFICATION	1.5831355854001612E-5	DESIGN
work around the "feature" where tree cache is validating the inserted node during the next transaction. no idea...	DESIGN	0.9970403145227122	WITHOUT_CLASSIFICATION	0.00295968547728786	DESIGN
FIXME Per the RegionFactory class Javadoc, this constructor version should not be necessary. @param props The configuration properties	DESIGN	0.9515247707109031	DESIGN	0.04847522928909687	WITHOUT_CLASSIFICATION
FIXME Per the RegionFactory class Javadoc, this constructor version should not be necessary. @param props The configuration properties	DESIGN	0.9515247707109031	DESIGN	0.04847522928909687	WITHOUT_CLASSIFICATION
FIXME Hacky workaround to JBCACHE-1202	DESIGN	0.9999998694730391	DESIGN	1.3052696093937418E-7	WITHOUT_CLASSIFICATION
FIXME Hacky workaround to JBCACHE-1202	DESIGN	0.9999998694730391	DESIGN	1.3052696093937418E-7	WITHOUT_CLASSIFICATION
TODO: I considered validating TS cache config here, but decided to defer unti getTimestampsCacheInstance() in case the cache is never actually used	DESIGN	0.8713050485083373	WITHOUT_CLASSIFICATION	0.12869495149166268	DESIGN
TODO Is this a valid operation on a timestamps cache?	DESIGN	0.9973859985017847	DESIGN	0.0026140014982152945	WITHOUT_CLASSIFICATION
TODO Is this a valid operation on a timestamps cache?	DESIGN	0.9973859985017847	DESIGN	0.0026140014982152945	WITHOUT_CLASSIFICATION
TODO Why not use the timestamp in a DataVersion?	DESIGN	0.9999630412867148	DESIGN	3.695871328531138E-5	WITHOUT_CLASSIFICATION
can happen because of the multiple ways Cache.remove() can be invoked :(	DESIGN	0.9999841686441461	WITHOUT_CLASSIFICATION	1.5831355854001612E-5	DESIGN
work around the "feature" where tree cache is validating the inserted node during the next transaction. no idea...	DESIGN	0.9970403145227122	WITHOUT_CLASSIFICATION	0.00295968547728786	DESIGN
swaldman 2004-02-07: modify to allow null values to signify fall through to c3p0 PoolConfig defaults	DESIGN	0.9953136016218674	WITHOUT_CLASSIFICATION	0.004686398378132605	DESIGN
turn hibernate.c3p0. into c3p0., so c3p0 gets a chance to see all hibernate.c3p0.	DESIGN	0.99992014731188	WITHOUT_CLASSIFICATION	7.985268812003752E-5	DESIGN
TODO: this bit actually has to be called after all cascades! but since identity insert is called synchronously, instead of asynchronously as other actions, it isn't	DESIGN	0.9377045094150701	DESIGN	0.062295490584929884	WITHOUT_CLASSIFICATION
TODO: reenable if we also fix the above todo	DESIGN	0.9312145283821801	DESIGN	0.0687854716178199	WITHOUT_CLASSIFICATION
TODO: inefficient if that cache is just going to ignore the updated state!	DESIGN	0.875101721109173	WITHOUT_CLASSIFICATION	0.12489827889082704	DESIGN
we may be screwed here since the collection action is about to execute and we do not know the final owner key value	DESIGN	0.9999922658300243	WITHOUT_CLASSIFICATION	7.734169975565237E-6	DESIGN
Create an action that will evict collection and entity regions based on queryspaces (table names). TODO: cache the autodetected information and pass it in instead.	DESIGN	0.9532917078752522	DESIGN	0.046708292124747815	WITHOUT_CLASSIFICATION
todo : what else to do here?	DESIGN	0.9638193074896746	WITHOUT_CLASSIFICATION	0.03618069251032542	DESIGN
todo : modify the class definition if not already transformed...	DESIGN	0.9058177233294614	WITHOUT_CLASSIFICATION	0.0941822766705385	DESIGN
todo : what else to do here?	DESIGN	0.9638193074896746	WITHOUT_CLASSIFICATION	0.03618069251032542	DESIGN
this is called by SessionFactory irregardless; we just disregard here; could also add a check to SessionFactory to only conditionally call start	DESIGN	0.7373783937085628	WITHOUT_CLASSIFICATION	0.2626216062914371	DESIGN
this is called by SessionFactory irregardless; we just disregard here; could also add a check to SessionFactory to only conditionally call stop	DESIGN	0.5972589226045001	WITHOUT_CLASSIFICATION	0.4027410773954999	DESIGN
TODO: to handle concurrent writes correctly, this should return a Lock to the client	DESIGN	0.9999756135036891	DESIGN	2.4386496310895624E-5	WITHOUT_CLASSIFICATION
put() has nowait semantics, is this really appropriate? note that it needs to be async replication, never local or sync	DESIGN	0.931753994055973	WITHOUT_CLASSIFICATION	0.06824600594402698	DESIGN
TODO: to handle concurrent writes correctly, the client should pass in a Lock	DESIGN	0.9841326598789075	DESIGN	0.015867340121092473	WITHOUT_CLASSIFICATION
TODO: assumes all collections disassemble to an array!	DESIGN	0.998289762793366	WITHOUT_CLASSIFICATION	0.0017102372066340307	DESIGN
TODO: reuse the PreLoadEvent	DESIGN	0.5521729656299416	DESIGN	0.4478270343700584	WITHOUT_CLASSIFICATION
todo: this was added to support initializing an entity's EntityEntry snapshot during reattach; this should be refactored to instead expose a method to assemble a EntityEntry based on this state for return.	DESIGN	0.6066083554097326	DESIGN	0.3933916445902674	WITHOUT_CLASSIFICATION
todo : what is the implication of this?	DESIGN	0.9874689188218128	WITHOUT_CLASSIFICATION	0.012531081178187123	DESIGN
use COUNT as the default. This mimics the old behavior, although NONE might be a better option moving forward in the case of callable	DESIGN	0.9982725199181678	WITHOUT_CLASSIFICATION	0.0017274800818322278	DESIGN
TODO: joinKeyColumnName & foreignKeyColumnName should be called either here or at a slightly higer level in the stack (to get all the information we need) Right now HbmBinder does not support the	DESIGN	0.9999984770453174	DESIGN	1.5229546826415154E-6	WITHOUT_CLASSIFICATION
TODO: suck this into initLaziness!	DESIGN	0.9775460346760391	DESIGN	0.02245396532396091	WITHOUT_CLASSIFICATION
we have to set up the table later!! yuck	DESIGN	0.9978764926424102	WITHOUT_CLASSIFICATION	0.0021235073575898533	DESIGN
TODO: better to degrade to lazy="false" if uninstrumented	DESIGN	0.503542671862711	DESIGN	0.49645732813728904	WITHOUT_CLASSIFICATION
todo : again, how should this work for non-pojo entities?	DESIGN	0.9130739026253546	WITHOUT_CLASSIFICATION	0.08692609737464539	DESIGN
TODO: this is a bit of copy/paste from IndexedCollection.createPrimaryKey()	DESIGN	0.9777513100489719	DESIGN	0.022248689951028196	WITHOUT_CLASSIFICATION
This inner class implements a case statement....perhaps im being a bit over-clever here	DESIGN	0.5975339398304094	WITHOUT_CLASSIFICATION	0.4024660601695906	DESIGN
TODO: bad implementation, cos it depends upon ordering of mapping doc fixing this requires that Collection/PersistentClass gain access to the Mappings reference from Configuration (or the filterDefinitions map directly) sometime during Configuration.buildSessionFactory (after all the types/filter-defs are known and before building persisters).	DESIGN	0.9999959187119668	DESIGN	4.081288033226955E-6	WITHOUT_CLASSIFICATION
use of a stringbuffer to workaround a JDK bug	DESIGN	0.5728818880382002	WITHOUT_CLASSIFICATION	0.4271181119618	DESIGN
hack/workaround as sqlquery impl depend on having a key.	DESIGN	0.9999609155292088	DESIGN	3.908447079113383E-5	WITHOUT_CLASSIFICATION
FIXME: get the PersistentClass	DESIGN	0.5960635260968626	DESIGN	0.4039364739031375	WITHOUT_CLASSIFICATION
FIXME: get the PersistentClass	DESIGN	0.5960635260968626	DESIGN	0.4039364739031375	WITHOUT_CLASSIFICATION
Icky workaround for MySQL bug:	DESIGN	0.5861207789377677	DESIGN	0.4138792210622323	WITHOUT_CLASSIFICATION
TODO: Somehow add the newly created foreign keys to the internal collection	DESIGN	0.9628157577107597	WITHOUT_CLASSIFICATION	0.037184242289240235	DESIGN
TODO possibly relax that	DESIGN	0.7469780356491351	WITHOUT_CLASSIFICATION	0.2530219643508649	DESIGN
TODO possibly relax that	DESIGN	0.7469780356491351	WITHOUT_CLASSIFICATION	0.2530219643508649	DESIGN
TODO possibly relax that	DESIGN	0.7469780356491351	WITHOUT_CLASSIFICATION	0.2530219643508649	DESIGN
use of a stringbuffer to workaround a JDK bug	DESIGN	0.5728818880382002	WITHOUT_CLASSIFICATION	0.4271181119618	DESIGN
use a degenerated strategy for backward compatibility	DESIGN	0.9999709654026052	WITHOUT_CLASSIFICATION	2.9034597394806065E-5	DESIGN
Sets can be just a view of a part of another collection. do we need to copy it to be sure it won't be changing underneath us? ie. this.set.addAll(set);	DESIGN	0.9998085251433728	WITHOUT_CLASSIFICATION	1.9147485662730513E-4	DESIGN
note that i parameter is now unused (delete it?)	DESIGN	0.9967146555500652	WITHOUT_CLASSIFICATION	0.003285344449934748	DESIGN
just to help out during the load (ugly, i know)	DESIGN	0.9998873986987712	WITHOUT_CLASSIFICATION	1.1260130122875468E-4	DESIGN
TODO : safe to interpret "map.remove(key) == null" as non-dirty?	DESIGN	0.8822365277513832	WITHOUT_CLASSIFICATION	0.11776347224861686	DESIGN
yick! need this for proper serialization/deserialization handling...	DESIGN	0.9957050662279217	WITHOUT_CLASSIFICATION	0.004294933772078385	DESIGN
TODO: get SQL rendering out of this package!	DESIGN	0.9318069623466103	DESIGN	0.06819303765338969	WITHOUT_CLASSIFICATION
TODO: get SQL rendering out of this package!	DESIGN	0.9318069623466103	DESIGN	0.06819303765338969	WITHOUT_CLASSIFICATION
yuck!	DESIGN	0.9969127198602987	WITHOUT_CLASSIFICATION	0.003087280139701216	DESIGN
TODO: get SQL rendering out of this package!	DESIGN	0.9318069623466103	DESIGN	0.06819303765338969	WITHOUT_CLASSIFICATION
TODO : not sure this is correct, could not find docs on how to do this.	DESIGN	0.9999985849065905	DESIGN	1.4150934095335045E-6	WITHOUT_CLASSIFICATION
HSQL has no Blob/Clob support .... but just put these here for now!	DESIGN	0.9996670014582122	WITHOUT_CLASSIFICATION	3.3299854178779983E-4	DESIGN
does this need holdlock also? : return tableName + " with (updlock, rowlock, holdlock)";	DESIGN	0.6024901032985276	DESIGN	0.39750989670147246	WITHOUT_CLASSIFICATION
sql-server, at least needed this dropped after use; strange!	DESIGN	0.9998784087845503	WITHOUT_CLASSIFICATION	1.2159121544972326E-4	DESIGN
todo : is there really any reason to kkeep trying if this fails once?	DESIGN	0.9997336484368984	WITHOUT_CLASSIFICATION	2.6635156310155796E-4	DESIGN
TBD should this be varbinary($1)? registerColumnType(Types.VARBINARY, "binary($1)");	DESIGN	0.9980274579004215	WITHOUT_CLASSIFICATION	0.001972542099578542	DESIGN
is it necessary to register %exact since it can only appear in a where clause?	DESIGN	0.9546135980649315	WITHOUT_CLASSIFICATION	0.04538640193506843	DESIGN
xmlforest requires a new kind of function constructor	DESIGN	0.9999969395636609	WITHOUT_CLASSIFICATION	3.0604363392657788E-6	DESIGN
Does this dialect support the ALTER TABLE syntax?	DESIGN	0.9998347254131733	WITHOUT_CLASSIFICATION	1.6527458682676018E-4	DESIGN
Do we need to qualify index names with the schema name?	DESIGN	0.9869266073269969	WITHOUT_CLASSIFICATION	0.01307339267300311	DESIGN
Does this dialect support the UNIQUE column syntax?	DESIGN	0.9990240571128217	WITHOUT_CLASSIFICATION	9.759428871782468E-4	DESIGN
Does this dialect support check constraints?	DESIGN	0.9999429460491175	WITHOUT_CLASSIFICATION	5.7053950882398446E-5	DESIGN
Do we need to drop constraints before dropping tables in this dialect?	DESIGN	0.999859021859413	WITHOUT_CLASSIFICATION	1.4097814058701628E-4	DESIGN
Does this dialect support the FOR UPDATE syntax?	DESIGN	0.9984462993498768	WITHOUT_CLASSIFICATION	0.0015537006501231525	DESIGN
Does this dialect support the Oracle-style FOR UPDATE NOWAIT syntax?	DESIGN	0.9998031758490947	WITHOUT_CLASSIFICATION	1.968241509052422E-4	DESIGN
Does this dialect support FOR UPDATE OF, allowing particular rows to be locked?	DESIGN	0.5199641015729022	DESIGN	0.48003589842709793	WITHOUT_CLASSIFICATION
note there is a wierd implementation in the client side	DESIGN	0.9999823666565252	WITHOUT_CLASSIFICATION	1.7633343474794703E-5	DESIGN
TODO: never reached, since getTypeName() actually throws an exception!	DESIGN	0.8956162823739073	WITHOUT_CLASSIFICATION	0.10438371762609272	DESIGN
todo : should we additionally check the current isolation mode explicitly?	DESIGN	0.7022515810359472	DESIGN	0.2977484189640529	WITHOUT_CLASSIFICATION
todo : remove this and just have subclasses use Isolater/IsolatedWork directly...	DESIGN	0.9829029507727786	DESIGN	0.017097049227221463	WITHOUT_CLASSIFICATION
TODO: should orphans really be deleted during lock???	DESIGN	0.9747671467482026	DESIGN	0.0252328532517974	WITHOUT_CLASSIFICATION
orphans should not be deleted during merge??	DESIGN	0.9530929592858871	WITHOUT_CLASSIFICATION	0.04690704071411294	DESIGN
orphans should not be deleted during copy??	DESIGN	0.9800804829181773	WITHOUT_CLASSIFICATION	0.01991951708182271	DESIGN
I suppose?	DESIGN	0.9901020063027599	WITHOUT_CLASSIFICATION	0.009897993697240136	DESIGN
TODO: suck this logic into the collection!	DESIGN	0.9860736348405121	DESIGN	0.013926365159487796	WITHOUT_CLASSIFICATION
TODO: an alternative is to check if the owner has changed; if it hasn't then get the ID from collection.getOwner()	DESIGN	0.8877961135821589	WITHOUT_CLASSIFICATION	0.11220388641784104	DESIGN
TODO:refactor + make this method private	DESIGN	0.5380847964939569	DESIGN	0.46191520350604315	WITHOUT_CLASSIFICATION
todo : we can actually just determine this from the incoming EntityEntry-s	DESIGN	0.9944725593060469	WITHOUT_CLASSIFICATION	0.005527440693953111	DESIGN
TODO: Should this be an InitializeEntityEventListener??? (watch out for performance!)	DESIGN	0.9999455287860131	DESIGN	5.447121398704401E-5	WITHOUT_CLASSIFICATION
TODO: better to pass the id in as an argument?	DESIGN	0.8930941690766191	DESIGN	0.10690583092338081	WITHOUT_CLASSIFICATION
todo : potentially look at optimizing these two arrays	DESIGN	0.9998961111212553	WITHOUT_CLASSIFICATION	1.0388887874466142E-4	DESIGN
trim done to workaround stupid oracle bug that cant handle whitespaces before a { in a sp	DESIGN	0.9748134647955078	WITHOUT_CLASSIFICATION	0.02518653520449225	DESIGN
trim done to workaround stupid oracle bug that cant handle whitespaces before a { in a sp	DESIGN	0.9748134647955078	WITHOUT_CLASSIFICATION	0.02518653520449225	DESIGN
TODO: temporary	DESIGN	0.987923215536542	DESIGN	0.012076784463458	WITHOUT_CLASSIFICATION
TODO: not quite sure about the full implications of this!	DESIGN	0.7649346825454785	DESIGN	0.2350653174545216	WITHOUT_CLASSIFICATION
TODO: not quite sure about the full implications of this!	DESIGN	0.7649346825454785	DESIGN	0.2350653174545216	WITHOUT_CLASSIFICATION
TODO: ugly here:	DESIGN	0.9726748000650276	DESIGN	0.027325199934972462	WITHOUT_CLASSIFICATION
this is kinda the best we can do...	DESIGN	0.9855010406468486	WITHOUT_CLASSIFICATION	0.01449895935315134	DESIGN
TODO: this needn't exclude subclasses...	DESIGN	0.954883908129812	DESIGN	0.045116091870188085	WITHOUT_CLASSIFICATION
todo : need map? the prob is a proper key, right?	DESIGN	0.8756949530926625	WITHOUT_CLASSIFICATION	0.12430504690733739	DESIGN
todo : i'd much rather have this done from #endLoadingCollection(CollectionPersister,LoadingCollectionEntry)...	DESIGN	0.99976264731156	WITHOUT_CLASSIFICATION	2.3735268843996947E-4	DESIGN
todo : hack!!! NOTE : here we cleanup the load context when we have no more local LCE entries. This "works" for the time being because really only the collection load contexts are implemented. Long term, this cleanup should become part of the "close result set" processing from the (sandbox/jdbc) jdbc-container code.	DESIGN	0.9007011906399951	DESIGN	0.09929880936000487	WITHOUT_CLASSIFICATION
todo : should really move this log statement to CollectionType, where this is used from...	DESIGN	0.9913977646953932	WITHOUT_CLASSIFICATION	0.008602235304606838	DESIGN
TODO : keep seperate notions of QT[] here for shallow/non-shallow queries...	DESIGN	0.9061977449617944	DESIGN	0.09380225503820551	WITHOUT_CLASSIFICATION
TODO : add this info to the translator and aggregate it here...	DESIGN	0.9912813986660872	DESIGN	0.008718601333912838	WITHOUT_CLASSIFICATION
TODO: move into collection type, so we can use polymorphism!	DESIGN	0.995215060998852	DESIGN	0.004784939001148022	WITHOUT_CLASSIFICATION
todo : should we check the current isolation mode explicitly?	DESIGN	0.6508046488310996	WITHOUT_CLASSIFICATION	0.3491953511689003	DESIGN
TODO: suck into event class	DESIGN	0.9945129050402297	DESIGN	0.005487094959770325	WITHOUT_CLASSIFICATION
do we even really need this? the update will fail anyway....	DESIGN	0.7825700023777805	WITHOUT_CLASSIFICATION	0.21742999762221948	DESIGN
hum ... should we cascade anyway? throw an exception? fine like it is?	DESIGN	0.9996078586433546	DESIGN	3.92141356645344E-4	WITHOUT_CLASSIFICATION
TODO: would it be better to do a refresh from db?	DESIGN	0.9994907130254572	DESIGN	5.09286974542864E-4	WITHOUT_CLASSIFICATION
TODO: we use two visitors here, inefficient!	DESIGN	0.6419684381897197	WITHOUT_CLASSIFICATION	0.35803156181028034	DESIGN
this class has no proxies (so do a shortcut)	DESIGN	0.9991836076878035	WITHOUT_CLASSIFICATION	8.163923121966465E-4	DESIGN
PostLoad is needed for EJB3 TODO: reuse the PostLoadEvent...	DESIGN	0.6287659749194244	DESIGN	0.3712340250805756	WITHOUT_CLASSIFICATION
TODO: put this stuff back in to read snapshot from the second-level cache (needs some extra work)	DESIGN	0.9999879512772013	DESIGN	1.2048722798661991E-5	WITHOUT_CLASSIFICATION
null or brand new collection this will also (inefficiently) handle arrays, which have no snapshot, so we can't do any better	DESIGN	0.9265776040507648	WITHOUT_CLASSIFICATION	0.07342239594923522	DESIGN
TODO: is this 100% correct?	DESIGN	0.9944274019006784	DESIGN	0.005572598099321619	WITHOUT_CLASSIFICATION
TODO: iteratively get transient entities and retry merge until one of the following conditions: 1) transientCopyCache.size() == 0 2) transientCopyCache.size() is not decreasing and copyCache.size() is not increasing TODO: find out if retrying can add entities to copyCache (don't think it can...) For now, just retry once; throw TransientObjectException if there are still any transient entities	DESIGN	0.9465863270190447	WITHOUT_CLASSIFICATION	0.05341367298095538	DESIGN
entity name will not be available for non-POJO entities TODO: cache the entity name somewhere so that it is available to this exception	DESIGN	0.9974487786695301	DESIGN	0.0025512213304698596	WITHOUT_CLASSIFICATION
TODO: we should throw an exception if we really know for sure that this is a detached instance, rather than just assuming throw new StaleObjectStateException(entityName, id);	DESIGN	0.9966298599526099	DESIGN	0.003370140047390155	WITHOUT_CLASSIFICATION
TODO : perhaps we should additionally require that the incoming entity version be equivalent to the defined unsaved-value?	DESIGN	0.9999986170509182	DESIGN	1.382949081779601E-6	WITHOUT_CLASSIFICATION
perhaps this should be an exception since it is only ever used in the above method?	DESIGN	0.75666555486243	DESIGN	0.24333444513757008	WITHOUT_CLASSIFICATION
Put a placeholder in entries, so we don't recurse back and try to save() the same object again. QUESTION: should this be done before onSave() is called? likewise, should it be done before onUpdate()?	DESIGN	0.783553384839926	WITHOUT_CLASSIFICATION	0.21644661516007407	DESIGN
TODO: merge into one method!	DESIGN	0.9809946566942596	DESIGN	0.019005343305740465	WITHOUT_CLASSIFICATION
TODO: refactor to .sql package	DESIGN	0.9960089832332746	DESIGN	0.003991016766725419	WITHOUT_CLASSIFICATION
Provides query splitting methods, which were originally in QueryTranslator. <br> TODO: This will need to be refactored at some point. @author josh	DESIGN	0.999567199842307	DESIGN	4.328001576929645E-4	WITHOUT_CLASSIFICATION
TODO: this is one of the ugliest and most fragile pieces of code in Hibernate....	DESIGN	0.9994982013209028	DESIGN	5.017986790971877E-4	WITHOUT_CLASSIFICATION
todo : temporary needed because currently persister is the one that creates and renders the join fragments for inheritence hierarchies...	DESIGN	0.9842789049158663	WITHOUT_CLASSIFICATION	0.015721095084133677	DESIGN
TODO : better way?!?	DESIGN	0.9999737534796324	DESIGN	2.6246520367702293E-5	WITHOUT_CLASSIFICATION
Not possible to simply re-use the versionPropertyNode here as it causes OOM errors due to circularity :(	DESIGN	0.9999990915358156	WITHOUT_CLASSIFICATION	9.084641844256269E-7	DESIGN
TODO:this is only needed during compilation .. can we eliminate the instvar?	DESIGN	0.9918357815709211	DESIGN	0.008164218429078851	WITHOUT_CLASSIFICATION
TODO : this is a bit dodgy, come up with a better way to check this (plus see above comment)	DESIGN	0.9999996490954993	DESIGN	3.5090450063181084E-7	WITHOUT_CLASSIFICATION
even here, if only properties mapped to the "base table" are referenced in the set and where clauses, this could be handled by the BasicDelegate. TODO : decide if it is better performance-wise to perform that check, or to simply use the MultiTableUpdateDelegate	DESIGN	0.999999957822962	DESIGN	4.2177037875784855E-8	WITHOUT_CLASSIFICATION
TODO: switch statements are always evil! We already had bugs because of forgotten token types. Use polymorphism for this!	DESIGN	0.9911653831073205	DESIGN	0.008834616892679436	WITHOUT_CLASSIFICATION
TODO : we really need to be able to deal with component paths here also; this is difficult because the hql-sql grammar expects all those node types to be FromReferenceNodes. One potential fix here would be to convert the IntoClause to just use a FromClause/FromElement combo (as a child of the InsertStatement) and move all this logic into the InsertStatement. That's probably the easiest approach (read: least amount of changes to the grammar and code), but just doesn't feel right as then an insert would contain 2 from-clauses	DESIGN	0.9999375750456276	DESIGN	6.24249543723736E-5	WITHOUT_CLASSIFICATION
really there are two situations where it should be ok to allow the insertion into properties defined on a superclass: 1) union-subclass with an abstract root entity 2) discrim-subclass #1 is handled already because of the fact that UnionSubclassPersister alreay always returns 0 for this call... we may want to disallow it for discrim-subclass just for consistency-sake (currently does not work anyway)...	DESIGN	0.9983851601313195	WITHOUT_CLASSIFICATION	0.0016148398686804876	DESIGN
yuck!	DESIGN	0.9969127198602987	WITHOUT_CLASSIFICATION	0.003087280139701216	DESIGN
implicit joins are always(?) ok to reuse	DESIGN	0.9912795482284877	WITHOUT_CLASSIFICATION	0.008720451771512216	DESIGN
TODO : we may also want to check that the types here map to exactly one column/JDBC-type can't think of a situation where arithmetic expression between multi-column mappings makes any sense.	DESIGN	0.9752727550369127	DESIGN	0.02472724496308735	WITHOUT_CLASSIFICATION
we do not know either type BLIND GUESS!	DESIGN	0.999187361318887	WITHOUT_CLASSIFICATION	8.126386811131533E-4	DESIGN
TODO: used to be exprNoParens! was this needed?	DESIGN	0.999998028928809	DESIGN	1.971071191073512E-6	WITHOUT_CLASSIFICATION
TODO: Replace this with a more elegant solution.	DESIGN	0.9999846284333135	DESIGN	1.537156668653538E-5	WITHOUT_CLASSIFICATION
TODO: Should this really return null? If not, figure out something better to do here.	DESIGN	0.999845531879972	DESIGN	1.5446812002795272E-4	WITHOUT_CLASSIFICATION
TODO: get SQL rendering out of this package!	DESIGN	0.9318069623466103	DESIGN	0.06819303765338969	WITHOUT_CLASSIFICATION
yuck!	DESIGN	0.9969127198602987	WITHOUT_CLASSIFICATION	0.003087280139701216	DESIGN
ignore it; the incoming property could not be found so we cannot be sure what to do here. At the very least, the safest is to simply not apply any dereference toggling...	DESIGN	0.9981836597991376	WITHOUT_CLASSIFICATION	0.0018163402008624526	DESIGN
TODO : most of below was taken verbatim from DotNode; should either delegate this logic or super-type it	DESIGN	0.9998991121303962	DESIGN	1.0088786960383147E-4	WITHOUT_CLASSIFICATION
otherwise, a trim-specification and/or a trim-character have been specified; we need to decide which options are present and "do the right thing" should leading trim-characters be trimmed? should trailing trim-characters be trimmed? the trim-character the trim-source	DESIGN	0.5395088550246263	WITHOUT_CLASSIFICATION	0.4604911449753736	DESIGN
todo: we should really just collect these from the various SelectExpressions, rather than regenerating here	DESIGN	0.8276479941969971	WITHOUT_CLASSIFICATION	0.17235200580300292	DESIGN
TODO: is this a bit ugly?	DESIGN	0.9998225722963208	DESIGN	1.7742770367917894E-4	WITHOUT_CLASSIFICATION
Need a better way to define the suffixes here...	DESIGN	0.8440972570692284	WITHOUT_CLASSIFICATION	0.15590274293077153	DESIGN
TODO: something much better - look at the type of the other expression! TODO: Have comparisonExpression and/or arithmeticExpression rules complete the resolution of boolean nodes.	DESIGN	0.9999446077783636	DESIGN	5.5392221636551276E-5	WITHOUT_CLASSIFICATION
TODO : what amount of significant digits need to be supported here? - from the DecimalFormat docs: [significant digits] = [minimum integer digits] + [maximum fraction digits]	DESIGN	0.9999832905739493	DESIGN	1.6709426050690444E-5	WITHOUT_CLASSIFICATION
Needed the "clazz_" check to work around union-subclasses TODO : is there a way to tell whether a persister is truly discrim-column based inheritence?	DESIGN	0.9994589651827145	DESIGN	5.410348172854097E-4	WITHOUT_CLASSIFICATION
We should actually rework this class to not implement Parser and just process path expressions in the most convenient way.	DESIGN	0.905185019159792	DESIGN	0.09481498084020809	WITHOUT_CLASSIFICATION
The class is now way to complex!	DESIGN	0.9999880835715919	WITHOUT_CLASSIFICATION	1.1916428408073569E-5	DESIGN
TODO: get SQL rendering out of here	DESIGN	0.9874119125694907	DESIGN	0.012588087430509206	WITHOUT_CLASSIFICATION
TODO: is there a better way?	DESIGN	0.9998583776232058	DESIGN	1.4162237679408494E-4	WITHOUT_CLASSIFICATION
Must be done here because of side-effect! yuck...	DESIGN	0.9985469718074144	WITHOUT_CLASSIFICATION	0.0014530281925855457	DESIGN
name from a super query (a bit inelegant that it shows up here)	DESIGN	0.9650751270873563	WITHOUT_CLASSIFICATION	0.034924872912643734	DESIGN
We should reengineer this class so that, rather than the current ad - hoc linear approach to processing a stream of tokens, we instead build up a tree of expressions.	DESIGN	0.9994604237191651	DESIGN	5.395762808349158E-4	WITHOUT_CLASSIFICATION
this is ugly here, but needed because its a subquery	DESIGN	0.9998538805311763	WITHOUT_CLASSIFICATION	1.4611946882378454E-4	DESIGN
unhappy about this being public ... is there a better way?	DESIGN	0.9991477791581664	DESIGN	8.522208418335354E-4	WITHOUT_CLASSIFICATION
Make sure this is a defined parameter and check the incoming value type TODO: what should be the actual exception type here?	DESIGN	0.9999760183853569	DESIGN	2.3981614643184517E-5	WITHOUT_CLASSIFICATION
TODO : this constructor form is only used from constructor directly below us; can it go away?	DESIGN	0.9999999401505737	DESIGN	5.984942627470314E-8	WITHOUT_CLASSIFICATION
TODO: COPY/PASTE FROM SessionImpl, pull up!	DESIGN	0.9488211170493918	DESIGN	0.051178882950608254	WITHOUT_CLASSIFICATION
TODO : should remove this exposure and have all references to the session's batcher use the ConnectionManager.	DESIGN	0.99640570018647	DESIGN	0.0035942998135299648	WITHOUT_CLASSIFICATION
todo : should this get moved to PersistentContext? logically, is PersistentContext the "thing" to which an interceptor gets attached?	DESIGN	0.5541240714246929	DESIGN	0.44587592857530717	WITHOUT_CLASSIFICATION
TODO: what type?	DESIGN	0.9081939813583226	DESIGN	0.09180601864167737	WITHOUT_CLASSIFICATION
todo : should seriously consider not allowing a txn to begin from a child session can always route the request to the root session...	DESIGN	0.9970556602214127	WITHOUT_CLASSIFICATION	0.0029443397785873793	DESIGN
short-circuit for performance...	DESIGN	0.999685338501849	WITHOUT_CLASSIFICATION	3.1466149815093585E-4	DESIGN
not absolutely necessary, but does help with aggressive release	DESIGN	0.9887193094378601	WITHOUT_CLASSIFICATION	0.011280690562139907	DESIGN
TODO : remove these last two as batcher is no longer managing connections	DESIGN	0.9623476727112832	DESIGN	0.037652327288716786	WITHOUT_CLASSIFICATION
work around a bug in all known connection pools....	DESIGN	0.9861775772101719	WITHOUT_CLASSIFICATION	0.013822422789828042	DESIGN
TODO : make this the factory for "entity mode related" sessions; also means making this the target of transaction-synch and the thing that knows how to cascade things between related sessions At that point, perhaps this thing is a "SessionContext", and ConnectionManager is a "JDBCContext"? A "SessionContext" should live in the impl package...	DESIGN	0.9999999999962527	DESIGN	3.747362085068495E-12	WITHOUT_CLASSIFICATION
TODO: does this really need to be here? does the collection already have it's own up-to-date snapshot?	DESIGN	0.9991446209434556	DESIGN	8.553790565445137E-4	WITHOUT_CLASSIFICATION
TODO: the i==entitySpan-1 bit depends upon subclass implementation (very bad)	DESIGN	0.9994532670104601	DESIGN	5.467329895399108E-4	WITHOUT_CLASSIFICATION
This form used from annotations (?). Essentially the same as the above using a resultset-mapping reference, but without cacheMode, readOnly, and comment. FIXME: annotations do not use it, so it can be remove from my POV @deprecated @param query The sql query string @param resultSetRef The result-set-mapping name @param querySpaces Any specified query spaces (used for auto-flushing) @param cacheable Whether the query results are cacheable @param cacheRegion If cacheable, the region into which to store the results @param timeout A JDBC-level timeout to be applied @param fetchSize A JDBC-level fetch-size to be applied @param flushMode The flush mode to use for this query @param parameterTypes parameter type map @param callable Does the query string represent a callable object (i.e., proc)	DESIGN	0.788026508302501	DESIGN	0.2119734916974991	WITHOUT_CLASSIFICATION
todo : add the notion of enabled filters to the CacheKey to differentiate filtered collections from non-filtered; but CacheKey is currently used for both collections and entities; would ideally need to define two seperate ones; currently this works in conjuction with the check on DefaultInitializeCollectionEventHandler.initializeCollectionFromCache() (which makes sure to not read from cache with enabled filters). EARLY EXIT!!!!!	DESIGN	0.9887850538802622	WITHOUT_CLASSIFICATION	0.011214946119737883	DESIGN
for sets, we should end the collection load after resolving the entities, since we might call hashCode() on the elements TODO: or we could do this polymorphically, and have two different operations implemented differently for arrays	DESIGN	0.9984407536818809	DESIGN	0.001559246318119086	WITHOUT_CLASSIFICATION
This is not very nice (and quite slow):	DESIGN	0.985502935306675	WITHOUT_CLASSIFICATION	0.014497064693324957	DESIGN
use of trim() here is ugly?	DESIGN	0.9998012946250494	WITHOUT_CLASSIFICATION	1.9870537495063776E-4	DESIGN
TODO: this is too conservative; if all preceding joins were also inner joins, we could use an inner join here	DESIGN	0.9334048612551407	DESIGN	0.06659513874485927	WITHOUT_CLASSIFICATION
TODO: look at the owning property and check that it isn't lazy (by instrumentation)	DESIGN	0.9982459773877308	WITHOUT_CLASSIFICATION	0.0017540226122691946	DESIGN
TODO: inefficient	DESIGN	0.8330252293282785	DESIGN	0.16697477067172145	WITHOUT_CLASSIFICATION
why does this matter?	DESIGN	0.982018450591321	WITHOUT_CLASSIFICATION	0.017981549408678948	DESIGN
from the collection of associations, locate OJA for the ManyToOne corresponding to this persister to fully define the many-to-many; we need that OJA so that we can use its alias here TODO : is there a better way here?	DESIGN	0.9999991050971455	DESIGN	8.949028545181005E-7	WITHOUT_CLASSIFICATION
TODO: this class depends directly upon CriteriaImpl, in the impl package ... add a CriteriaImplementor interface	DESIGN	0.9999982648455248	DESIGN	1.7351544752693227E-6	WITHOUT_CLASSIFICATION
TODO: add a CriteriaImplementor interface this class depends directly upon CriteriaImpl in the impl package...	DESIGN	0.9997350724111624	DESIGN	2.649275888376004E-4	WITHOUT_CLASSIFICATION
TODO : not so sure this is needed...	DESIGN	0.9999814594535669	DESIGN	1.8540546433097045E-5	WITHOUT_CLASSIFICATION
meant to handle dynamic instantiation queries...(Copy from QueryLoader)	DESIGN	0.9997785997336001	WITHOUT_CLASSIFICATION	2.2140026639982607E-4	DESIGN
TODO: The order in which entities are saved may matter (e.g., a particular transient entity may need to be saved before other transient entities can be saved; Keep retrying the batch of transient entities until either: 1) there are no transient entities left in transientCopyCache or 2) no transient entities were saved in the last batch For now, just run through the transient entities and retry the merge	DESIGN	0.9942673698185079	DESIGN	0.005732630181491993	WITHOUT_CLASSIFICATION
todo: this might really even be moved into the cfg package and used as the basis for all things which are configurable.	DESIGN	0.9763568613523554	DESIGN	0.02364313864764458	WITHOUT_CLASSIFICATION
todo : currently expects that the individual with expressions apply to the same sql table join. This may not be the case for joined-subclass where the property values might be coming from different tables in the joined hierarchy. At some point we should expand this to support that capability. However, that has some difficulties: 1) the biggest is how to handle ORs when the individual comparisons are linked to different sql joins. 2) here we would need to track each comparison individually, along with the join alias to which it applies and then pass that information back to the FromElement so it can pass it along to the JoinSequence	DESIGN	0.5047948440553792	DESIGN	0.4952051559446208	WITHOUT_CLASSIFICATION
this function has a template -> restore output, apply the template and write the result out TODO: Downcast to avoid using an interface? Yuck.	DESIGN	0.9878748385540266	DESIGN	0.012125161445973476	WITHOUT_CLASSIFICATION
at some point the generate phase needs to be moved out of here, because a single object-level DML might spawn multiple SQL DML command executions. Possible to just move the sql generation for dml stuff, but for consistency-sake probably best to just move responsiblity for the generation phase completely into the delegates (QueryLoader/StatementExecutor) themselves. Also, not sure why QueryLoader currently even has a dependency on this at all; does it need it? Ideally like to see the walker itself given to the delegates directly...	DESIGN	0.9999826561813792	DESIGN	1.734381862081498E-5	WITHOUT_CLASSIFICATION
get the right object from the list ... would it be easier to just call getEntity() ??	DESIGN	0.6059104993865873	DESIGN	0.3940895006134127	WITHOUT_CLASSIFICATION
TODO should we just collect these like with the collections above?	DESIGN	0.9999171685260325	DESIGN	8.283147396745801E-5	WITHOUT_CLASSIFICATION
todo : better to handle dynamic filters through implicit DynamicFilterParameterSpecification see the discussion there in DynamicFilterParameterSpecification's javadocs as to why it is currently not done that way.	DESIGN	0.9464203118365668	DESIGN	0.05357968816343329	WITHOUT_CLASSIFICATION
/ USED ONLY FOR REGRESSION TESTING!!!! todo : obviously get rid of all this junk ;) /	DESIGN	0.9808926043582059	WITHOUT_CLASSIFICATION	0.01910739564179417	DESIGN
create an index on the key columns??	DESIGN	0.9999611655185194	WITHOUT_CLASSIFICATION	3.883448148065157E-5	DESIGN
TODO: deprecated, remove eventually	DESIGN	0.9994747986153137	DESIGN	5.252013846862077E-4	WITHOUT_CLASSIFICATION
create an index on the key columns??	DESIGN	0.9999611655185194	WITHOUT_CLASSIFICATION	3.883448148065157E-5	DESIGN
TODO: improve this hack!	DESIGN	0.9999932573157534	DESIGN	6.742684246656965E-6	WITHOUT_CLASSIFICATION
inheritance cycle detection (paranoid check)	DESIGN	0.999943443177534	WITHOUT_CLASSIFICATION	5.655682246591263E-5	DESIGN
TODO: remove use of instanceof!	DESIGN	0.9917407756651315	DESIGN	0.008259224334868413	WITHOUT_CLASSIFICATION
shortcut	DESIGN	0.999912265686586	WITHOUT_CLASSIFICATION	8.773431341408655E-5	DESIGN
TODO: handle the case of a foreign key to something other than the pk	DESIGN	0.5550325554007676	DESIGN	0.4449674445992324	WITHOUT_CLASSIFICATION
create an index on the key columns??	DESIGN	0.9999611655185194	WITHOUT_CLASSIFICATION	3.883448148065157E-5	DESIGN
todo : remove	DESIGN	0.9882408384577774	WITHOUT_CLASSIFICATION	0.011759161542222667	DESIGN
todo : remove	DESIGN	0.9882408384577774	WITHOUT_CLASSIFICATION	0.011759161542222667	DESIGN
todo : remove	DESIGN	0.9882408384577774	WITHOUT_CLASSIFICATION	0.011759161542222667	DESIGN
todo : throw exception?	DESIGN	0.8078253945078917	WITHOUT_CLASSIFICATION	0.1921746054921083	DESIGN
todo : throw exception? maybe warn if not the same?	DESIGN	0.9957973217497559	DESIGN	0.004202678250244159	WITHOUT_CLASSIFICATION
TODO: make EntityPersister not depend on SessionFactoryImplementor interface, if possible	DESIGN	0.9999333565348522	DESIGN	6.664346514786798E-5	WITHOUT_CLASSIFICATION
TODO: is there a more elegant way than downcasting?	DESIGN	0.9999830135174563	DESIGN	1.6986482543747805E-5	WITHOUT_CLASSIFICATION
TODO: encapsulate the protected instance variables!	DESIGN	0.9847550178596128	DESIGN	0.015244982140387203	WITHOUT_CLASSIFICATION
should indicate that we are processing an INSERT/UPDATE/DELETE query with a subquery implied via a collection property function. Here, we need to use the table name itself as the qualification alias. TODO : verify this works for all databases... TODO : is this also the case in non-"indexed" scenarios?	DESIGN	0.9999996695371358	DESIGN	3.3046286414802014E-7	WITHOUT_CLASSIFICATION
TODO: copy/paste from insertRows()	DESIGN	0.9792896370751399	WITHOUT_CLASSIFICATION	0.020710362924860025	DESIGN
TODO: copy/paste from recreate()	DESIGN	0.9480828106246376	WITHOUT_CLASSIFICATION	0.05191718937536238	DESIGN
should this interface extend PropertyMapping?	DESIGN	0.9059470874728686	DESIGN	0.0940529125271314	WITHOUT_CLASSIFICATION
ie. the subquery! yuck!	DESIGN	0.9995549439055696	WITHOUT_CLASSIFICATION	4.4505609443034916E-4	DESIGN
TODO: move to .sql package!!	DESIGN	0.9957012418588249	DESIGN	0.004298758141175146	WITHOUT_CLASSIFICATION
TODO: code duplication with SingleTableEntityPersister	DESIGN	0.9695150459280254	DESIGN	0.030484954071974598	WITHOUT_CLASSIFICATION
TODO: It would be really, really nice to use this to also model components!	DESIGN	0.9999309281824659	DESIGN	6.90718175341179E-5	WITHOUT_CLASSIFICATION
TODO: two hashmap lookups here is one too many...	DESIGN	0.6041610474421568	WITHOUT_CLASSIFICATION	0.3958389525578431	DESIGN
TODO: code duplication with JoinedSubclassEntityPersister	DESIGN	0.9843612332196584	DESIGN	0.0156387667803416	WITHOUT_CLASSIFICATION
perhaps not really necessary...	DESIGN	0.9669641544416776	WITHOUT_CLASSIFICATION	0.033035845558322494	DESIGN
NOTE: this assumes something about how propertySelectFragment is implemented by the subclass! was toUnqotedAliasStrings( getIdentiferColumnNames() ) before - now tried to remove that unqoting and missing aliases..	DESIGN	0.7807879668308703	DESIGN	0.21921203316912968	WITHOUT_CLASSIFICATION
NOTE: this assumes something about how propertySelectFragment is implemented by the subclass! was toUnqotedAliasStrings( getdiscriminatorColumnName() ) before - now tried to remove that unqoting and missing aliases..	DESIGN	0.9311482402117666	DESIGN	0.06885175978823341	WITHOUT_CLASSIFICATION
TODO: should we use SELECT .. FOR UPDATE?	DESIGN	0.999834534747809	DESIGN	1.6546525219092553E-4	WITHOUT_CLASSIFICATION
TODO: optimize this better!	DESIGN	0.985412193213175	DESIGN	0.014587806786824978	WITHOUT_CLASSIFICATION
TODO: should we allow suffixes on these ?	DESIGN	0.9992719293177588	DESIGN	7.280706822411706E-4	WITHOUT_CLASSIFICATION
This is really ugly, but necessary:	DESIGN	0.9876993214762211	WITHOUT_CLASSIFICATION	0.01230067852377881	DESIGN
ugly little workaround for fact that createUniqueKeyLoaders() does not handle component properties	DESIGN	0.8726191259762232	DESIGN	0.12738087402377693	WITHOUT_CLASSIFICATION
TODO: disable batch loading if lockMode > READ?	DESIGN	0.9227362099877952	WITHOUT_CLASSIFICATION	0.07726379001220476	DESIGN
append the SQL to return the generated identifier TODO: suck into Insert	DESIGN	0.9142815724901335	DESIGN	0.08571842750986641	WITHOUT_CLASSIFICATION
TODO: I am not so sure about the exception handling in this bit!	DESIGN	0.999024438246355	DESIGN	9.755617536450747E-4	WITHOUT_CLASSIFICATION
TODO: is this really necessary????	DESIGN	0.9922420923680797	DESIGN	0.007757907631920294	WITHOUT_CLASSIFICATION
TODO: move to .sql package, and refactor with similar things!	DESIGN	0.9918554695199677	DESIGN	0.008144530480032169	WITHOUT_CLASSIFICATION
TODO: implement functionality this might be painful to do here, as the "join post processing" for the subquery has already been performed (meaning that for theta-join dialects, the join conditions have already been moved over to the where clause). A "simple" solution here might to perform "join post processing" once for the entire query (including any subqueries) at one fell swoop	DESIGN	0.9999999878971594	DESIGN	1.2102840614272166E-8	WITHOUT_CLASSIFICATION
todo : this eventually needs to be removed	DESIGN	0.8516683159561034	WITHOUT_CLASSIFICATION	0.1483316840438967	DESIGN
kinda ugly, but needed for collections with a "." node mapping	DESIGN	0.9998247202308252	WITHOUT_CLASSIFICATION	1.7527976917485857E-4	DESIGN
is this ok?	DESIGN	0.9999421567975912	WITHOUT_CLASSIFICATION	5.7843202408776956E-5	DESIGN
TODO: perhaps this should be some other RuntimeException...	DESIGN	0.9999970987447484	DESIGN	2.901255251524958E-6	WITHOUT_CLASSIFICATION
TODO: make this a bit nicer	DESIGN	0.9944626899899485	DESIGN	0.005537310010051522	WITHOUT_CLASSIFICATION
Yuck:	DESIGN	0.9902332017214661	WITHOUT_CLASSIFICATION	0.009766798278533865	DESIGN
TODO: we should provide some way to get keys of collection of statistics to make it easier to retrieve from a GUI perspective	DESIGN	0.9995088855780118	DESIGN	4.911144219881826E-4	WITHOUT_CLASSIFICATION
@return collection removal FIXME: even if isInverse="true"?	DESIGN	0.9548269310972751	DESIGN	0.045173068902724905	WITHOUT_CLASSIFICATION
TODO : will need reference to session factory to fully complete HHH-1907	DESIGN	0.9771215119755913	DESIGN	0.022878488024408634	WITHOUT_CLASSIFICATION
TODO: currently keeps Getters and Setters (instead of PropertyAccessors) because of the way getGetter() and getSetter() are implemented currently; yuck!	DESIGN	0.9999202064628352	DESIGN	7.979353716480129E-5	WITHOUT_CLASSIFICATION
TODO: redesign how PropertyAccessors are acquired...	DESIGN	0.9997319112845678	DESIGN	2.6808871543216147E-4	WITHOUT_CLASSIFICATION
todo : YUCK!!!	DESIGN	0.9949884647962138	WITHOUT_CLASSIFICATION	0.005011535203786195	DESIGN
TODO : YUCK!!! fix after HHH-1907 is complete	DESIGN	0.999778836270093	DESIGN	2.211637299070619E-4	WITHOUT_CLASSIFICATION
TODO: need to make the majority of this functionality into a top-level support class for custom impl support	DESIGN	0.9988573797969162	DESIGN	0.0011426202030836842	WITHOUT_CLASSIFICATION
TODO: design new lifecycle for ProxyFactory	DESIGN	0.5151176586366485	DESIGN	0.48488234136335157	WITHOUT_CLASSIFICATION
TODO: would be nice to handle proxy classes elegantly!	DESIGN	0.9976093158130211	DESIGN	0.0023906841869789177	WITHOUT_CLASSIFICATION
TODO: copy/paste from ManyToOneType	DESIGN	0.6173337174117823	DESIGN	0.38266628258821755	WITHOUT_CLASSIFICATION
TODO: should this be Session.instantiate(Persister, ...)?	DESIGN	0.9981108315926234	DESIGN	0.0018891684073766438	WITHOUT_CLASSIFICATION
TODO: this is a bit arbitrary, expose a switch to the user?	DESIGN	0.992571672492761	DESIGN	0.007428327507238989	WITHOUT_CLASSIFICATION
TODO: implement caching?! proxies?!	DESIGN	0.993031984109481	DESIGN	0.006968015890519018	WITHOUT_CLASSIFICATION
TODO: is this right??	DESIGN	0.9939823753070333	DESIGN	0.006017624692966793	WITHOUT_CLASSIFICATION
is this really necessary?	DESIGN	0.9985804241677603	WITHOUT_CLASSIFICATION	0.001419575832239785	DESIGN
TODO: move these to a new JoinableType abstract class, extended by EntityType and PersistentCollectionType:	DESIGN	0.9961807320034525	DESIGN	0.0038192679965474807	WITHOUT_CLASSIFICATION
TODO: this is very suboptimal for some subclasses (namely components), since it does not take advantage of two-phase-load	DESIGN	0.9804152276087784	DESIGN	0.019584772391221635	WITHOUT_CLASSIFICATION
worrying about proxies is perhaps a little bit of overkill here...	DESIGN	0.9074366160969805	DESIGN	0.09256338390301953	WITHOUT_CLASSIFICATION
NOTE VERY HACKISH WORKAROUND!! TODO: Fix this so it will work for non-POJO entity mode	DESIGN	0.9999999998772803	DESIGN	1.2271967598341992E-10	WITHOUT_CLASSIFICATION
TODO: Fix this so it will work for non-POJO entity mode	DESIGN	0.9999533904537637	DESIGN	4.6609546236187366E-5	WITHOUT_CLASSIFICATION
We would probably refactor to have LogicParser (builds a tree of simple expressions connected by and, or, not), ExpressionParser (translates from OO terms like foo, foo.Bar, foo.Bar.Baz to SQL terms like FOOS.ID, FOOS.BAR_ID, etc) and PathExpressionParser (which does much the same thing it does now)	DESIGN	0.9997408638888727	WITHOUT_CLASSIFICATION	2.5913611112726655E-4	DESIGN
TODO: this is a little inefficient, don't need to do a whole deep replaceElements() call	DESIGN	0.9999975882029589	DESIGN	2.4117970410722575E-6	WITHOUT_CLASSIFICATION
workaround for WebLogic	DESIGN	0.9461350054460755	WITHOUT_CLASSIFICATION	0.053864994553924385	DESIGN
TODO: this dependency is kinda Bad	DESIGN	0.9994964151811312	DESIGN	5.03584818868751E-4	WITHOUT_CLASSIFICATION
ick!	DESIGN	0.9998418909785857	WITHOUT_CLASSIFICATION	1.5810902141441798E-4	DESIGN
short cut check...	DESIGN	0.9999713177074178	WITHOUT_CLASSIFICATION	2.8682292582234364E-5	DESIGN
todo : move to StringHelper?	DESIGN	0.9381790725253615	WITHOUT_CLASSIFICATION	0.06182092747463847	DESIGN
yukky! Don't you have subclasses for that! TODO race conditions can happen here	DESIGN	0.995650087612263	DESIGN	0.0043499123877368965	WITHOUT_CLASSIFICATION
TODO: We probably should have a StatisticsNotPublishedException, to make it clean	DESIGN	0.9983146083542003	DESIGN	0.0016853916457997178	WITHOUT_CLASSIFICATION
FIXME hack to work around fact that calling Node added = root.addChild( fqn ); doesn't properly set the version on the node	DESIGN	0.999996318023879	DESIGN	3.681976121037243E-6	WITHOUT_CLASSIFICATION
TODO: I considered validating the presence of the TS cache here, but decided to defer unti getQueryCacheInstance() in case the cache is never actually used	DESIGN	0.6265382441700627	WITHOUT_CLASSIFICATION	0.37346175582993735	DESIGN
need to do that here rather than in the save event listener to let the post insert events to have a id-filled entity when IDENTITY is used (EJB3)	DESIGN	0.6523197820241353	DESIGN	0.3476802179758647	WITHOUT_CLASSIFICATION
TODO: simply remove this override if we fix the above todos	DESIGN	0.5150048200265902	WITHOUT_CLASSIFICATION	0.4849951799734099	DESIGN
This, is used by SessionFactoryImpl to hand to the generated SessionImpl; was the only reason I could see that we cannot just use null as Settings.cacheProvider	DESIGN	0.8764388597629218	WITHOUT_CLASSIFICATION	0.12356114023707818	DESIGN
this is done here 'cos we might only know the type here (ugly!) TODO: improve this a lot:	DESIGN	0.9999988465242099	DESIGN	1.1534757901022558E-6	WITHOUT_CLASSIFICATION
todo : would love to have this work on a notification basis where the successful binding of an entity/subclass would emit a notification which the extendsQueue entries could react to...	DESIGN	0.9904145295935651	WITHOUT_CLASSIFICATION	0.009585470406434933	DESIGN
TODO : not sure the best way to handle this. The non-performant way :	DESIGN	0.9997423491722872	DESIGN	2.5765082771277414E-4	WITHOUT_CLASSIFICATION
would be better to use the element-type to determine whether the old and the new are equal here; the problem being we do not necessarily have access to the element type in all cases	DESIGN	0.9978412093461388	WITHOUT_CLASSIFICATION	0.002158790653861088	DESIGN
This next bit is to allow for both unsaved-value="negative" and for "older" behavior where version number did not get seeded if it was already set in the object TODO: shift it into unsaved-value strategy	DESIGN	0.9923677607085856	DESIGN	0.007632239291414452	WITHOUT_CLASSIFICATION
merges don't cascade to uninitialized collections TODO: perhaps this does need to cascade after all....	DESIGN	0.9999319348985549	DESIGN	6.806510144509476E-5	WITHOUT_CLASSIFICATION
TODO: an alternative is to check if the owner has changed; if it hasn't then return collection.getOwner()	DESIGN	0.9939003125767096	WITHOUT_CLASSIFICATION	0.006099687423290388	DESIGN
it is possible that the tree-walking in OuterJoinLoader can get to an association defined by a subclass, in which case the property-ref might refer to a property defined on a subclass of the current class in this case, the table name is not known - this temporary solution assumes that the property-ref refers to a property of the subclass table that the association belongs to (a reasonable guess) TODO: fix this, add: OuterJoinLoadable.getSubclassPropertyTableName(String propertyName)	DESIGN	0.9999995746578634	DESIGN	4.2534213667666083E-7	WITHOUT_CLASSIFICATION
this only works because collection entries are kept in a sequenced map by persistence context (maybe we should do like entities and keep a separate sequences set...) TODO: calling entrySet on an IdentityMap is SLOW!!	DESIGN	0.9999977340790605	DESIGN	2.2659209395326745E-6	WITHOUT_CLASSIFICATION
important, to account for newly saved entities in query todo : some kind of check for new status...	DESIGN	0.9702063769199435	WITHOUT_CLASSIFICATION	0.029793623080056526	DESIGN
brand new collection TODO: or an array!! we can't lock objects with arrays now??	DESIGN	0.812089768135234	DESIGN	0.18791023186476605	WITHOUT_CLASSIFICATION
TODO: if object was an uninitialized proxy, this is inefficient, resulting in two SQL selects	DESIGN	0.9377438534410498	WITHOUT_CLASSIFICATION	0.06225614655895026	DESIGN
before cascade! TODO: should this be Session.instantiate(Persister, ...)?	DESIGN	0.9979817446779378	DESIGN	0.002018255322062219	WITHOUT_CLASSIFICATION
TODO : absolutely no usages of this constructor form; can it go away?	DESIGN	0.9999575042135053	DESIGN	4.249578649476506E-5	WITHOUT_CLASSIFICATION
todo : need to find a clean way to handle the "event source" role a seperate classs responsible for generating/dispatching events just duplicates most of the Session methods... passing around seperate reto interceptor, factory, actionQueue, and persistentContext is not manageable...	DESIGN	0.9997592964213771	DESIGN	2.4070357862286478E-4	WITHOUT_CLASSIFICATION
todo : remove	DESIGN	0.9882408384577774	WITHOUT_CLASSIFICATION	0.011759161542222667	DESIGN
aliasRefNode.resolve( false, false, aliasRefNode.getText() ); TODO: is it kosher to do it here? TODO: is it kosher to do it here?	DESIGN	0.9933263544937211	DESIGN	0.006673645506278847	WITHOUT_CLASSIFICATION
No explicit select expression; render the id and properties projection lists for every persister in the from clause into a single 'token node'. TODO: the only reason we need this stuff now is collection filters, we should get rid of derived select clause completely!	DESIGN	0.999999740938753	DESIGN	2.5906124706184565E-7	WITHOUT_CLASSIFICATION
TODO : an optimization here would be to consider cascade deletes and not gen those delete statements; the difficulty is the ordering of the tables here vs the cascade attributes on the persisters -> the table info gotten here should really be self-contained (i.e., a class representation defining all the needed attributes), then we could then get an array of those	DESIGN	0.9949367400952828	DESIGN	0.005063259904717184	WITHOUT_CLASSIFICATION
TODO: get SQL rendering out of here, create an AST for the join expressions. Use the SQL generator grammar to generate the SQL text for the index expression.	DESIGN	0.8907830182836236	WITHOUT_CLASSIFICATION	0.10921698171637645	DESIGN
TODO : this really needs to be delayed unitl after we definitively know all node types where this is currently a problem is parameters for which where we cannot unequivocally resolve an expected type	DESIGN	0.999990668686937	DESIGN	9.331313063037492E-6	WITHOUT_CLASSIFICATION
TODO: Figure out a better way to get the FROM elements in a proper tree structure. If this is not the destination of a many-to-many, add it as a child of the origin.	DESIGN	0.5564201297316855	WITHOUT_CLASSIFICATION	0.44357987026831464	DESIGN
work around that crazy issue where the tree contains "empty" FromElements (no text); afaict, this is caused by FromElementFactory.createCollectionJoin()	DESIGN	0.6063198242950366	WITHOUT_CLASSIFICATION	0.39368017570496344	DESIGN
TODO: this class does too many things! we need a different kind of path expression parser for each of the diffferent ways in which path expressions can occur	DESIGN	0.9998945726154309	DESIGN	1.0542738456903766E-4	WITHOUT_CLASSIFICATION
real hacky... used to count the nesting of parentheses	DESIGN	0.9674544686466647	DESIGN	0.03254553135333529	WITHOUT_CLASSIFICATION
TODO : would be really nice to cache the spec on the query-def so as to not have to re-calc the hash; currently not doable though because of the resultset-ref stuff...	DESIGN	0.7334117951675904	WITHOUT_CLASSIFICATION	0.26658820483240964	DESIGN
for arrays, we should end the collection load before resolving the entities, since the actual array instances are not instantiated during loading TODO: or we could do this polymorphically, and have two different operations implemented differently for arrays	DESIGN	0.9999837024051502	DESIGN	1.6297594849705263E-5	WITHOUT_CLASSIFICATION
polymorphism not really handled completely correctly, perhaps...well, actually its ok, assuming that the entity name used in the lookup is the same as the the one used here, which it will be	DESIGN	0.9441875324209446	WITHOUT_CLASSIFICATION	0.055812467579055565	DESIGN
TODO: should "record" how many properties we have reffered to - and if we don't get'em'all we throw an exception! Way better than trial and error ;)	DESIGN	0.9948298797462981	DESIGN	0.0051701202537019295	WITHOUT_CLASSIFICATION
VERY IMPORTANT!!!! - This class needs to be free of any static references to any CGLIB or Javassist classes. Otherwise, users will always need both on their classpaths no matter which (if either) they use. Another option here would be to remove the Hibernate.isPropertyInitialized() method and have the users go through the SessionFactory to get this information.	DESIGN	0.9976114903938516	WITHOUT_CLASSIFICATION	0.002388509606148538	DESIGN
TODO: is it really neceassry to provide Configuration to CollectionPersisters ? Should it not be enough with associated class ? or why does EntityPersister's not get access to configuration ? The only reason I could see that Configuration gets passed to collection persisters is so that they can look up the dom4j node name of the entity element in case no explicit node name was applied at the collection element level. Are you kidding me? Trivial to fix then. Just store and expose the node name on the entity persister (which the collection persister looks up anyway via other means...).	DESIGN	0.9999967205133008	DESIGN	3.2794866991290864E-6	WITHOUT_CLASSIFICATION
for backward compatibility, allow a set with no not-null element columns, using all columns in the row locater SQL TODO: create an implicit not null constraint on all cols?	DESIGN	0.9533210655862028	WITHOUT_CLASSIFICATION	0.04667893441379732	DESIGN
SPACES TODO: i'm not sure, but perhaps we should exclude abstract denormalized tables?	DESIGN	0.9999881144189837	DESIGN	1.1885581016152134E-5	WITHOUT_CLASSIFICATION
workaround, for backward compatibility of sets with no not-null columns, assume all columns are used in the row locator SQL	DESIGN	0.999976489290952	WITHOUT_CLASSIFICATION	2.3510709048031677E-5	DESIGN
note that this method could easily be moved up to BasicEntityPersister, if we ever needed to reuse it from other subclasses	DESIGN	0.8394704082773333	DESIGN	0.16052959172266676	WITHOUT_CLASSIFICATION
index += getPropertyColumnSpan( i ); TODO: this is kinda slow...	DESIGN	0.999271192056428	DESIGN	7.288079435719603E-4	WITHOUT_CLASSIFICATION
TODO: need some caching scheme? really comes down to decision regarding amount of state (if any) kept on PropertyAccessors	DESIGN	0.9995805186158698	DESIGN	4.194813841302099E-4	WITHOUT_CLASSIFICATION
TODO: here is why we need to make bytecode provider global :( TODO : again, fix this after HHH-1907 is complete	DESIGN	0.9999999999961042	DESIGN	3.895743239075212E-12	WITHOUT_CLASSIFICATION
TODO: Yuck! This is not quite good enough, it's a quick hack around the problem of having a to-one association that refers to an embedded component:	DESIGN	0.9999999999896804	DESIGN	1.031951127045065E-11	WITHOUT_CLASSIFICATION
for DOM4J "collections" only TODO: it would be better if this was done at the higher level by Printer	DESIGN	0.9938850660068779	DESIGN	0.00611493399312219	WITHOUT_CLASSIFICATION
would be great to move all this below here into another method that could also be used from the new scrolling stuff. Would need to change the way the max-row stuff is handled (i.e. behind an interface) so that I could do the control breaking at the means to know when to stop	DESIGN	0.999998530901318	DESIGN	1.4690986821168282E-6	WITHOUT_CLASSIFICATION
TODO: can we always use the "null property" approach for everything?	DESIGN	0.9998934520537119	DESIGN	1.0654794628803901E-4	WITHOUT_CLASSIFICATION
polymorphism comment above	DESIGN	0.9999991998327299	WITHOUT_CLASSIFICATION	8.001672701541309E-7	DESIGN
some messy, complex stuff here, since createCriteria() can take an aliased path, or a path rooted at the creating criteria instance	DESIGN	0.999999985532605	WITHOUT_CLASSIFICATION	1.4467394968119857E-8	DESIGN
TODO: really bad, evil hack to fix!!!	DESIGN	0.9999999949563604	DESIGN	5.043639541002105E-9	WITHOUT_CLASSIFICATION
ugly hack for cases like "elements(foo.bar.collection)" (multi-part path expression ending in elements or indices)	DESIGN	0.9581635215215749	DESIGN	0.041836478478425095	WITHOUT_CLASSIFICATION
try block is a hack around fact that currently tuplizers are not given the opportunity to resolve a subclass entity name. this allows the (we assume custom) interceptor the ability to influence this decision if we were not able to based on the given entityName	DESIGN	0.9997786467976277	DESIGN	2.213532023722962E-4	WITHOUT_CLASSIFICATION
/ HACK ALERT !!!!!!!!!!!!!!!!!!!!!!!!!!!! Attempt to work around "ghost" ImpliedFromElements that occasionally show up between the actual things being joined. This consistently occurs from index nodes (at least against many-to-many). Not sure if there are other conditions Essentially, look-ahead to the next FromElement that actually writes something to the SQL	DESIGN	0.9998812257405743	DESIGN	1.1877425942586093E-4	WITHOUT_CLASSIFICATION
init the table here instead of earlier, so that we can get a quoted table name TODO: would it be better to simply pass the qualified table name, instead of splitting it up into schema/catalog/table names	DESIGN	0.9905519660157476	DESIGN	0.009448033984252301	WITHOUT_CLASSIFICATION
TODO : would be great to have a Mapping#hasNonIdentifierPropertyNamedId method I don't believe that Mapping#getReferencedPropertyType accounts for the identifier property; so if it returns for a property named 'id', then we should have a non-id field named id	DESIGN	0.8164996144506239	DESIGN	0.18350038554937612	WITHOUT_CLASSIFICATION
TODO: is this really necessary????	DESIGN	0.9922420923680797	DESIGN	0.007757907631920294	WITHOUT_CLASSIFICATION
TODO: ideally we need the construction of PropertyAccessor to take the following: 1) EntityMode 2) EntityMode-specific data (i.e., the classname for pojo entities) 3) Property-specific data based on the EntityMode (i.e., property-name or dom4j-node-name) The easiest way, with the introduction of the new runtime-metamodel classes, would be the the following predicates: 1) PropertyAccessorFactory.getPropertyAccessor() takes references to both a org.hibernate.metadata.EntityModeMetadata and org.hibernate.metadata.Property 2) What is now termed a "PropertyAccessor" stores any values needed from those two pieces of information 3) Code can then simply call PropertyAccess.getGetter() with no parameters; likewise with PropertyAccessor.getSetter()	DESIGN	0.9987474063098144	DESIGN	0.0012525936901856044	WITHOUT_CLASSIFICATION
TODO: this is temporary in that the end result will probably not take a Property reference per-se.	DESIGN	0.9995822589546817	DESIGN	4.1774104531830484E-4	WITHOUT_CLASSIFICATION
todo : this eventually needs to be removed	DESIGN	0.8516683159561034	WITHOUT_CLASSIFICATION	0.1483316840438967	DESIGN
TODO: make this a bit nicer	DESIGN	0.9944626899899485	DESIGN	0.005537310010051522	WITHOUT_CLASSIFICATION
todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.9676783354684007	DESIGN	0.032321664531599355	WITHOUT_CLASSIFICATION
todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.9676783354684007	DESIGN	0.032321664531599355	WITHOUT_CLASSIFICATION
todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.9676783354684007	DESIGN	0.032321664531599355	WITHOUT_CLASSIFICATION
todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.9676783354684007	DESIGN	0.032321664531599355	WITHOUT_CLASSIFICATION
todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.9676783354684007	DESIGN	0.032321664531599355	WITHOUT_CLASSIFICATION
todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.9676783354684007	DESIGN	0.032321664531599355	WITHOUT_CLASSIFICATION
todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.9676783354684007	DESIGN	0.032321664531599355	WITHOUT_CLASSIFICATION
todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.9676783354684007	DESIGN	0.032321664531599355	WITHOUT_CLASSIFICATION
FIXME Per the RegionFactory class Javadoc, this constructor version should not be necessary. @param props The configuration properties	DESIGN	0.9515247707109031	DESIGN	0.04847522928909687	WITHOUT_CLASSIFICATION
FIXME Per the RegionFactory class Javadoc, this constructor version should not be necessary. @param props The configuration properties	DESIGN	0.9515247707109031	DESIGN	0.04847522928909687	WITHOUT_CLASSIFICATION
FIXME Per the RegionFactory class Javadoc, this constructor version should not be necessary. @param props The configuration properties	DESIGN	0.9515247707109031	DESIGN	0.04847522928909687	WITHOUT_CLASSIFICATION
TODO : probably better to calculate these and pass them in, as it'll be more performant	DESIGN	0.9999808482980655	DESIGN	1.9151701934381117E-5	WITHOUT_CLASSIFICATION
