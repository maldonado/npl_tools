test out the optimizer:	WITHOUT_CLASSIFICATION	0.9999989248713107	WITHOUT_CLASSIFICATION	1.0751286893186183E-6	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.999996218782351	WITHOUT_CLASSIFICATION	3.781217649006855E-6	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.999996218782351	WITHOUT_CLASSIFICATION	3.781217649006855E-6	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.999996218782351	WITHOUT_CLASSIFICATION	3.781217649006855E-6	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.999996218782351	WITHOUT_CLASSIFICATION	3.781217649006855E-6	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.999996218782351	WITHOUT_CLASSIFICATION	3.781217649006855E-6	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.999996218782351	WITHOUT_CLASSIFICATION	3.781217649006855E-6	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.999996218782351	WITHOUT_CLASSIFICATION	3.781217649006855E-6	DESIGN
return	WITHOUT_CLASSIFICATION	0.9999278524459028	WITHOUT_CLASSIFICATION	7.21475540971964E-5	DESIGN
return	WITHOUT_CLASSIFICATION	0.9999278524459028	WITHOUT_CLASSIFICATION	7.21475540971964E-5	DESIGN
| this | bean | args | raw bean |	WITHOUT_CLASSIFICATION	0.9981352024978222	WITHOUT_CLASSIFICATION	0.001864797502177888	DESIGN
invokeinterface	WITHOUT_CLASSIFICATION	0.999991621175971	WITHOUT_CLASSIFICATION	8.378824029069824E-6	DESIGN
astore 4 store the raw bean	WITHOUT_CLASSIFICATION	0.9999958086122355	WITHOUT_CLASSIFICATION	4.1913877645484524E-6	DESIGN
current stack len = 0	WITHOUT_CLASSIFICATION	0.9999978350625829	WITHOUT_CLASSIFICATION	2.164937417153975E-6	DESIGN
current stack len = 0	WITHOUT_CLASSIFICATION	0.9999978350625829	WITHOUT_CLASSIFICATION	2.164937417153975E-6	DESIGN
local variables | target obj | each oldvalue |	WITHOUT_CLASSIFICATION	0.9999984546390802	WITHOUT_CLASSIFICATION	1.5453609197441615E-6	DESIGN
invokeinterface invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999999203695552	WITHOUT_CLASSIFICATION	7.963044479279581E-8	DESIGN
putfield new value of the field	WITHOUT_CLASSIFICATION	0.9999997501230069	WITHOUT_CLASSIFICATION	2.4987699308032594E-7	DESIGN
reference type	WITHOUT_CLASSIFICATION	0.9999828123303774	WITHOUT_CLASSIFICATION	1.7187669622539265E-5	DESIGN
double	WITHOUT_CLASSIFICATION	0.999986553436458	WITHOUT_CLASSIFICATION	1.3446563541875442E-5	DESIGN
double	WITHOUT_CLASSIFICATION	0.999986553436458	WITHOUT_CLASSIFICATION	1.3446563541875442E-5	DESIGN
long	WITHOUT_CLASSIFICATION	0.9999396435770854	WITHOUT_CLASSIFICATION	6.035642291441534E-5	DESIGN
just decrement the lock, don't recache (we don't know which transaction won)	WITHOUT_CLASSIFICATION	0.9994431853465159	WITHOUT_CLASSIFICATION	5.568146534840238E-4	DESIGN
decode row selection...	WITHOUT_CLASSIFICATION	0.9995381473412337	WITHOUT_CLASSIFICATION	4.6185265876622403E-4	DESIGN
disassembled state gets put in a new array (we write to cache by value!)	WITHOUT_CLASSIFICATION	0.9999973487306207	WITHOUT_CLASSIFICATION	2.6512693792275917E-6	DESIGN
again, CCS did not have such a concept; but a reasonable proximity is to clear the cache after transaction as long as the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999992385812602	WITHOUT_CLASSIFICATION	7.614187397706914E-7	DESIGN
CHECK	WITHOUT_CLASSIFICATION	0.9996665213598711	WITHOUT_CLASSIFICATION	3.334786401288136E-4	DESIGN
ROW ID	WITHOUT_CLASSIFICATION	0.9999581577535546	WITHOUT_CLASSIFICATION	4.184224644546297E-5	DESIGN
COMPOSITE-ID	WITHOUT_CLASSIFICATION	0.9999988126733786	WITHOUT_CLASSIFICATION	1.1873266214086497E-6	DESIGN
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999935644230351	WITHOUT_CLASSIFICATION	6.435576964925131E-6	DESIGN
Property prop = new Property(); prop.setName("id"); prop.setPropertyAccessorName("embedded"); prop.setValue(id); entity.setIdentifierProperty(prop);	WITHOUT_CLASSIFICATION	0.9999993756793113	WITHOUT_CLASSIFICATION	6.243206886803366E-7	DESIGN
DYNAMIC INSERT	WITHOUT_CLASSIFICATION	0.9999958379956803	WITHOUT_CLASSIFICATION	4.162004319789076E-6	DESIGN
PERSISTER	WITHOUT_CLASSIFICATION	0.9999918058823384	WITHOUT_CLASSIFICATION	8.19411766165767E-6	DESIGN
get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999852993341268	WITHOUT_CLASSIFICATION	1.4700665873263019E-5	DESIGN
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999905461804185	WITHOUT_CLASSIFICATION	9.453819581420999E-6	DESIGN
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999905461804185	WITHOUT_CLASSIFICATION	9.453819581420999E-6	DESIGN
generated properties can never be insertable...	WITHOUT_CLASSIFICATION	0.9999771662214666	WITHOUT_CLASSIFICATION	2.2833778533436035E-5	DESIGN
TABLE	WITHOUT_CLASSIFICATION	0.999987858845463	WITHOUT_CLASSIFICATION	1.2141154536900359E-5	DESIGN
by default, natural-ids are "immutable" (constant)	WITHOUT_CLASSIFICATION	0.9999996305549199	WITHOUT_CLASSIFICATION	3.6944508010942184E-7	DESIGN
( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999890852992814	WITHOUT_CLASSIFICATION	1.0914700718436225E-5	DESIGN
we found some extends attributes referencing entities which were not already processed. here we need to locate all entity-names and class-names contained in this document itself, making sure that these get removed from the extendz list such that only extends names which require us to delay processing (i.e. external to this document and not yet processed) are contained in the returned result	WITHOUT_CLASSIFICATION	0.9955617260145021	DESIGN	0.0044382739854979605	WITHOUT_CLASSIFICATION
Build a ResultSetMappingDefinition given a containing element for the "return-XXX" elements @param resultSetElem The element containing the return definitions. @param path No clue... @param mappings The current processing state. @return The description of the mappings...	WITHOUT_CLASSIFICATION	0.9999865773488681	WITHOUT_CLASSIFICATION	1.3422651132015262E-5	DESIGN
private boolean showSql; private boolean formatSql;	WITHOUT_CLASSIFICATION	0.9999988817051348	WITHOUT_CLASSIFICATION	1.1182948651769825E-6	DESIGN
public boolean isShowSqlEnabled() { return showSql; } public boolean isFormatSqlEnabled() { return formatSql; }	WITHOUT_CLASSIFICATION	0.9999998793667051	WITHOUT_CLASSIFICATION	1.2063329489904935E-7	DESIGN
Set a custom entity resolver. This entity resolver must be set before addXXX(misc) call. Default value is {@link org.hibernate.util.DTDEntityResolver} @param entityResolver entity resolver to use	WITHOUT_CLASSIFICATION	0.9899796295540977	WITHOUT_CLASSIFICATION	0.010020370445902317	DESIGN
final List extendsQueue,	WITHOUT_CLASSIFICATION	0.9999983880584629	WITHOUT_CLASSIFICATION	1.611941537165526E-6	DESIGN
If close() is called, guarantee unbind()	WITHOUT_CLASSIFICATION	0.9999999998348775	WITHOUT_CLASSIFICATION	1.6512255675928707E-10	DESIGN
if a ThreadLocalSessionContext-bound session happens to get serialized, to be completely correct, we need to make sure that unbinding of that session occurs.	WITHOUT_CLASSIFICATION	0.9999999858720223	WITHOUT_CLASSIFICATION	1.4127977729057909E-8	DESIGN
on the inverse, it makes sense that if a ThreadLocalSessionContext- bound session then gets deserialized to go ahead and re-bind it to the ThreadLocalSessionContext session map.	WITHOUT_CLASSIFICATION	0.9999999042667651	WITHOUT_CLASSIFICATION	9.573323488688156E-8	DESIGN
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999252767249398	WITHOUT_CLASSIFICATION	7.472327506023035E-5	DESIGN
60 second lock timeout	WITHOUT_CLASSIFICATION	0.9999599686363738	WITHOUT_CLASSIFICATION	4.003136362625222E-5	DESIGN
OptimisticCache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999950279421008	WITHOUT_CLASSIFICATION	4.972057899159504E-6	DESIGN
Cache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999909974041403	WITHOUT_CLASSIFICATION	9.002595859590965E-6	DESIGN
option.setDataVersion( NonLockingDataVersion.INSTANCE );	WITHOUT_CLASSIFICATION	0.9999999878396524	WITHOUT_CLASSIFICATION	1.216034762154476E-8	DESIGN
do the put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999229514157539	WITHOUT_CLASSIFICATION	7.70485842460767E-5	DESIGN
ignore!	WITHOUT_CLASSIFICATION	0.9999965667996125	WITHOUT_CLASSIFICATION	3.4332003874588084E-6	DESIGN
tree cache in optimistic mode seems to have as very difficult time with remove calls on non-existent nodes (NPEs)...	WITHOUT_CLASSIFICATION	0.9999051001002939	WITHOUT_CLASSIFICATION	9.489989970612781E-5	DESIGN
60 seconds	WITHOUT_CLASSIFICATION	0.9999814851219879	WITHOUT_CLASSIFICATION	1.851487801210808E-5	DESIGN
ignore!	WITHOUT_CLASSIFICATION	0.9999965667996125	WITHOUT_CLASSIFICATION	3.4332003874588084E-6	DESIGN
60 seconds	WITHOUT_CLASSIFICATION	0.9999814851219879	WITHOUT_CLASSIFICATION	1.851487801210808E-5	DESIGN
do the failfast put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999991957552592	WITHOUT_CLASSIFICATION	8.042447409402264E-7	DESIGN
NOTE : evict() operates locally only (i.e., does not propogate to any other nodes in the potential cluster). This is exactly what is needed when we destroy() here; destroy() is used as part of the process of shutting down a SessionFactory; thus these removals should not be propogated	WITHOUT_CLASSIFICATION	0.9664811706263626	WITHOUT_CLASSIFICATION	0.033518829373637475	DESIGN
protected RegionRootListener listener;	WITHOUT_CLASSIFICATION	0.9999986591061065	WITHOUT_CLASSIFICATION	1.340893893481357E-6	DESIGN
Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999742467177997	WITHOUT_CLASSIFICATION	2.575328220026516E-5	DESIGN
If we've been blocking for the mutex, perhaps another thread has already reestablished the root. In case the node was reestablised via replication, confirm it's marked "resident" (a status which doesn't replicate)	WITHOUT_CLASSIFICATION	0.9999914386860242	WITHOUT_CLASSIFICATION	8.561313975715673E-6	DESIGN
For pessimistic locking, we just want to toss out our ref to any old invalid root node and get the latest (may be null)	WITHOUT_CLASSIFICATION	0.9999987028672165	WITHOUT_CLASSIFICATION	1.2971327835598018E-6	DESIGN
The rest only matters for optimistic locking, where we need to establish the proper data version on the region root	WITHOUT_CLASSIFICATION	0.999660588384817	WITHOUT_CLASSIFICATION	3.3941161518301116E-4	DESIGN
Don't hold a transactional lock for this	WITHOUT_CLASSIFICATION	0.6249521042912421	WITHOUT_CLASSIFICATION	0.3750478957087579	DESIGN
Make sure the root node for the region exists and has a DataVersion that never complains	WITHOUT_CLASSIFICATION	0.999999991091894	WITHOUT_CLASSIFICATION	8.908105972981434E-9	DESIGN
Never evict this node	WITHOUT_CLASSIFICATION	0.9981324289849804	WITHOUT_CLASSIFICATION	0.0018675710150195348	DESIGN
Fix up the resident flag	WITHOUT_CLASSIFICATION	0.9999518232896687	WITHOUT_CLASSIFICATION	4.8176710331308457E-5	DESIGN
60 seconds	WITHOUT_CLASSIFICATION	0.9999814851219879	WITHOUT_CLASSIFICATION	1.851487801210808E-5	DESIGN
We ignore minimalPutOverride. JBossCache putForExternalRead is already about as minimal as we can get; it will promptly return if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999999993433732	WITHOUT_CLASSIFICATION	6.566268220562207E-10	DESIGN
no-op. We don't own the cache so we shouldn't stop it.	WITHOUT_CLASSIFICATION	0.9999874826441438	WITHOUT_CLASSIFICATION	1.2517355856114677E-5	DESIGN
This should only be possible if the caches are constructor injected	WITHOUT_CLASSIFICATION	0.9045361686531819	WITHOUT_CLASSIFICATION	0.09546383134681817	DESIGN
We only build caches if none were passed in. Passing in caches counts as a clear statement of exactly what is wanted	WITHOUT_CLASSIFICATION	0.9999547130197437	WITHOUT_CLASSIFICATION	4.528698025622643E-5	DESIGN
Set up the cache factory	WITHOUT_CLASSIFICATION	0.9990550956858324	WITHOUT_CLASSIFICATION	9.449043141675321E-4	DESIGN
See if the user configured a multiplexer stack	WITHOUT_CLASSIFICATION	0.9999663755649388	WITHOUT_CLASSIFICATION	3.362443506111275E-5	DESIGN
Default to collections sharing entity cache if there is one	WITHOUT_CLASSIFICATION	0.9996568685060924	WITHOUT_CLASSIFICATION	3.4313149390763456E-4	DESIGN
Default to sharing the entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999893778779874	WITHOUT_CLASSIFICATION	1.0622122012694997E-5	DESIGN
For Timestamps, we default to a separate config	WITHOUT_CLASSIFICATION	0.9999749467997374	WITHOUT_CLASSIFICATION	2.5053200262633935E-5	DESIGN
We can't change the TM on a running cache; just check if the cache has no TM and we're OK with that	WITHOUT_CLASSIFICATION	0.9999998575402723	WITHOUT_CLASSIFICATION	1.4245972764348842E-7	DESIGN
Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9998506283262506	WITHOUT_CLASSIFICATION	1.4937167374931266E-4	DESIGN
Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999927216832443	WITHOUT_CLASSIFICATION	7.278316755691336E-6	DESIGN
This method should be implemented assuming it's valid to do start/stop/start -- leave state appropriate for another start	WITHOUT_CLASSIFICATION	0.7981018692898544	WITHOUT_CLASSIFICATION	0.20189813071014556	DESIGN
Make sure we don't re-release the same cache	WITHOUT_CLASSIFICATION	0.9999896803060107	WITHOUT_CLASSIFICATION	1.0319693989404169E-5	DESIGN
We use a different delegate than the non-optimistic superclass default	WITHOUT_CLASSIFICATION	0.9999999811701442	WITHOUT_CLASSIFICATION	1.8829855848580133E-8	DESIGN
Following methods we don't delegate since they have so little logic it's clearer to just implement them here	WITHOUT_CLASSIFICATION	0.9467172864140113	DESIGN	0.05328271358598873	WITHOUT_CLASSIFICATION
If JBC is using INVALIDATION, we don't want to propagate changes. We use the Timestamps cache to manage invalidation	WITHOUT_CLASSIFICATION	0.9999999937290104	WITHOUT_CLASSIFICATION	6.270989643105144E-9	DESIGN
We don't want to waste effort setting an option if JBC is already in LOCAL mode. If JBC is REPL_(A)SYNC then check if they passed an config option to disable query replication	WITHOUT_CLASSIFICATION	0.9999999883861171	WITHOUT_CLASSIFICATION	1.1613882856697698E-8	DESIGN
Don't hold the JBC node lock throughout the tx, as that prevents updates Add a zero (or low) timeout option so we don't block waiting for tx's that did a put to commit	WITHOUT_CLASSIFICATION	0.9999999476436618	WITHOUT_CLASSIFICATION	5.235633819397129E-8	DESIGN
Double check the distributed cache	WITHOUT_CLASSIFICATION	0.9999997070462786	WITHOUT_CLASSIFICATION	2.929537213877302E-7	DESIGN
Get an exclusive right to update JBC for this key from this node.	WITHOUT_CLASSIFICATION	0.9999664963994863	WITHOUT_CLASSIFICATION	3.3503600513804916E-5	DESIGN
We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999655041090522	WITHOUT_CLASSIFICATION	3.449589094777804E-5	DESIGN
Initial load from JBC	WITHOUT_CLASSIFICATION	0.9999998731718371	WITHOUT_CLASSIFICATION	1.2682816290947225E-7	DESIGN
See if we had a 2nd invalidation from the same initial preinvalidation timestamp. If so, only increment if the new current value is an increase	WITHOUT_CLASSIFICATION	0.9999999999876882	WITHOUT_CLASSIFICATION	1.2311757604072826E-11	DESIGN
We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999655041090522	WITHOUT_CLASSIFICATION	3.449589094777804E-5	DESIGN
If the workspace node has null as well, OK; if not we've been modified in a non-comparable manner, which we have to treat as us being newer	WITHOUT_CLASSIFICATION	0.999999968232303	WITHOUT_CLASSIFICATION	3.1767697019470544E-8	DESIGN
The standard comparator types are not Serializable but are singletons	WITHOUT_CLASSIFICATION	0.9999997406442863	WITHOUT_CLASSIFICATION	2.593557137021562E-7	DESIGN
ignore!	WITHOUT_CLASSIFICATION	0.9999965667996125	WITHOUT_CLASSIFICATION	3.4332003874588084E-6	DESIGN
ignore it	WITHOUT_CLASSIFICATION	0.9999980652230743	WITHOUT_CLASSIFICATION	1.9347769257049967E-6	DESIGN
construct the cache	WITHOUT_CLASSIFICATION	0.9999091125030266	WITHOUT_CLASSIFICATION	9.088749697340653E-5	DESIGN
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999867073309657	WITHOUT_CLASSIFICATION	1.329266903429317E-5	DESIGN
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999867073309657	WITHOUT_CLASSIFICATION	1.329266903429317E-5	DESIGN
ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999924307399645	WITHOUT_CLASSIFICATION	7.56926003552167E-6	DESIGN
swaldman 2006-08-28: define c3p0-style configuration parameters for initialPoolSize, which hibernate sensibly lets default to minPoolSize, but we'll let users override it with the c3p0-style property if they want.	WITHOUT_CLASSIFICATION	0.9996926214646091	WITHOUT_CLASSIFICATION	3.07378535390866E-4	DESIGN
DataSource unpooled = DataSources.unpooledDataSource(jdbcUrl, props.getProperty(Environment.USER), props.getProperty(Environment.PASS));	WITHOUT_CLASSIFICATION	0.9999999734690225	WITHOUT_CLASSIFICATION	2.653097749360581E-8	DESIGN
TRUE if the pool is borrowed from the outside, FALSE if we used to create it	WITHOUT_CLASSIFICATION	0.9999999905905208	WITHOUT_CLASSIFICATION	9.409479205120373E-9	DESIGN
get a connection from the pool (thru DriverManager, cfr. Proxool doc)	WITHOUT_CLASSIFICATION	0.9999997904757448	WITHOUT_CLASSIFICATION	2.0952425518006268E-7	DESIGN
set the Transaction Isolation if defined	WITHOUT_CLASSIFICATION	0.9999903043264758	WITHOUT_CLASSIFICATION	9.695673524205017E-6	DESIGN
toggle autoCommit to false if set	WITHOUT_CLASSIFICATION	0.9999999780444131	WITHOUT_CLASSIFICATION	2.1955586915348056E-8	DESIGN
return the connection	WITHOUT_CLASSIFICATION	0.9999866318849846	WITHOUT_CLASSIFICATION	1.3368115015447317E-5	DESIGN
Get the configurator files (if available)	WITHOUT_CLASSIFICATION	0.9999745184164005	WITHOUT_CLASSIFICATION	2.548158359947812E-5	DESIGN
Default the Proxool alias setting	WITHOUT_CLASSIFICATION	0.9999996482965788	WITHOUT_CLASSIFICATION	3.5170342109110366E-7	DESIGN
Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999917919792475	WITHOUT_CLASSIFICATION	8.208020752541727E-6	DESIGN
Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999917919792475	WITHOUT_CLASSIFICATION	8.208020752541727E-6	DESIGN
Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999996469049988	WITHOUT_CLASSIFICATION	3.530950012115665E-7	DESIGN
Set the existing pool flag to true	WITHOUT_CLASSIFICATION	0.9999999718725053	WITHOUT_CLASSIFICATION	2.812749474228255E-8	DESIGN
Configured using the JAXP Configurator	WITHOUT_CLASSIFICATION	0.9996866155953017	WITHOUT_CLASSIFICATION	3.1338440469836775E-4	DESIGN
Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999917919792475	WITHOUT_CLASSIFICATION	8.208020752541727E-6	DESIGN
Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999996469049988	WITHOUT_CLASSIFICATION	3.530950012115665E-7	DESIGN
Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999996469049988	WITHOUT_CLASSIFICATION	3.530950012115665E-7	DESIGN
Configured using the Properties File Configurator	WITHOUT_CLASSIFICATION	0.9999125138922405	WITHOUT_CLASSIFICATION	8.748610775957112E-5	DESIGN
Remember Isolation level	WITHOUT_CLASSIFICATION	0.9993880636896902	WITHOUT_CLASSIFICATION	6.11936310309806E-4	DESIGN
If the provider was leeching off an existing pool don't close it	WITHOUT_CLASSIFICATION	0.9999999999979728	WITHOUT_CLASSIFICATION	2.027154610899617E-12	DESIGN
We have created the pool ourselves, so shut it down	WITHOUT_CLASSIFICATION	0.9999995135093498	WITHOUT_CLASSIFICATION	4.864906501921244E-7	DESIGN
not really a many-to-one association necessarily	WITHOUT_CLASSIFICATION	0.9991271373490731	WITHOUT_CLASSIFICATION	8.728626509269479E-4	DESIGN
not really a many-to-one association necessarily	WITHOUT_CLASSIFICATION	0.9991271373490731	WITHOUT_CLASSIFICATION	8.728626509269479E-4	DESIGN
always overwrite nonversioned data	WITHOUT_CLASSIFICATION	0.9999996077293095	WITHOUT_CLASSIFICATION	3.922706903941732E-7	DESIGN
public Currency getCurrency(int col) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9999445622683037	WITHOUT_CLASSIFICATION	5.543773169614791E-5	DESIGN
default is POJO	WITHOUT_CLASSIFICATION	0.9999921961901957	WITHOUT_CLASSIFICATION	7.80380980423996E-6	DESIGN
use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999737899993267	WITHOUT_CLASSIFICATION	2.621000067325902E-5	DESIGN
use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999737899993267	WITHOUT_CLASSIFICATION	2.621000067325902E-5	DESIGN
private CacheEntry cacheEntry;	WITHOUT_CLASSIFICATION	0.999983358923322	WITHOUT_CLASSIFICATION	1.6641076678089512E-5	DESIGN
Don't need to lock the cache here, since if someone else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9912966536068695	WITHOUT_CLASSIFICATION	0.008703346393130456	DESIGN
Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9999391194502032	WITHOUT_CLASSIFICATION	6.088054979681074E-5	DESIGN
get the updated snapshot of the entity state by cloning current state; it is safe to copy in place, since by this time no-one else (should have) has a reference to the array	WITHOUT_CLASSIFICATION	0.9999999531332742	WITHOUT_CLASSIFICATION	4.6866725690099534E-8	DESIGN
this entity defines proeprty generation, so process those generated values...	WITHOUT_CLASSIFICATION	0.9987545208792891	WITHOUT_CLASSIFICATION	0.0012454791207109062	DESIGN
have the entity entry perform post-update processing, passing it the update state and the new version (if one).	WITHOUT_CLASSIFICATION	0.9999997906168495	WITHOUT_CLASSIFICATION	2.0938315053108797E-7	DESIGN
!persister.isCacheInvalidationRequired()	WITHOUT_CLASSIFICATION	0.9999996613888417	WITHOUT_CLASSIFICATION	3.3861115837240386E-7	DESIGN
need to look it up from the persistence-context	WITHOUT_CLASSIFICATION	0.9999688147539353	WITHOUT_CLASSIFICATION	3.118524606469863E-5	DESIGN
sort first by role name	WITHOUT_CLASSIFICATION	0.9999985059156754	WITHOUT_CLASSIFICATION	1.4940843246113514E-6	DESIGN
Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9999391194502032	WITHOUT_CLASSIFICATION	6.088054979681074E-5	DESIGN
then by fk	WITHOUT_CLASSIFICATION	0.999343223914563	WITHOUT_CLASSIFICATION	6.567760854369473E-4	DESIGN
nothing to do	WITHOUT_CLASSIFICATION	0.9999476943073606	WITHOUT_CLASSIFICATION	5.2305692639364004E-5	DESIGN
nothing to do	WITHOUT_CLASSIFICATION	0.9999476943073606	WITHOUT_CLASSIFICATION	5.2305692639364004E-5	DESIGN
an existing collection that was either non-empty or uninitialized is replaced by null or a different collection (if the collection is uninitialized, hibernate has no way of knowing if the collection is actually empty without querying the db)	WITHOUT_CLASSIFICATION	0.9999355176413368	WITHOUT_CLASSIFICATION	6.448235866320163E-5	DESIGN
this method is called when a new non-null collection is persisted or when an existing (non-null) collection is moved to a new owner	WITHOUT_CLASSIFICATION	0.9927866345057592	WITHOUT_CLASSIFICATION	0.007213365494240752	DESIGN
boolean put = persister.getCache().insert(ck, cacheEntry);	WITHOUT_CLASSIFICATION	0.9999991891668293	WITHOUT_CLASSIFICATION	8.108331707544882E-7	DESIGN
we need to grab the version value from the entity, otherwise we have issues with generated-version entities that may have multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9608169647173744	WITHOUT_CLASSIFICATION	0.03918303528262552	DESIGN
do nothing - we only need to notify the cache...	WITHOUT_CLASSIFICATION	0.9999852365100418	WITHOUT_CLASSIFICATION	1.4763489958290927E-5	DESIGN
sort first by entity name	WITHOUT_CLASSIFICATION	0.9999706163699099	WITHOUT_CLASSIFICATION	2.9383630090208832E-5	DESIGN
then by id	WITHOUT_CLASSIFICATION	0.9995699902257941	WITHOUT_CLASSIFICATION	4.300097742059358E-4	DESIGN
to be safe...	WITHOUT_CLASSIFICATION	0.9998416922307408	WITHOUT_CLASSIFICATION	1.5830776925918096E-4	DESIGN
no transformations took place, so handle it as we would a non-instrumented class	WITHOUT_CLASSIFICATION	0.9997087845840321	WITHOUT_CLASSIFICATION	2.9121541596783233E-4	DESIGN
see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999999881731672	WITHOUT_CLASSIFICATION	1.182683281557511E-8	DESIGN
see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999999881731672	WITHOUT_CLASSIFICATION	1.182683281557511E-8	DESIGN
intentionally empty	WITHOUT_CLASSIFICATION	0.9999557726236074	WITHOUT_CLASSIFICATION	4.4227376392666636E-5	DESIGN
test out the optimizer:	WITHOUT_CLASSIFICATION	0.9999989248713107	WITHOUT_CLASSIFICATION	1.0751286893186183E-6	DESIGN
set the name of bulk accessor.	WITHOUT_CLASSIFICATION	0.999998510118202	WITHOUT_CLASSIFICATION	1.4898817980266262E-6	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.999996218782351	WITHOUT_CLASSIFICATION	3.781217649006855E-6	DESIGN
invokespecial	WITHOUT_CLASSIFICATION	0.9999996523118392	WITHOUT_CLASSIFICATION	3.4768816088585666E-7	DESIGN
return	WITHOUT_CLASSIFICATION	0.9999278524459028	WITHOUT_CLASSIFICATION	7.21475540971964E-5	DESIGN
aload_1 load bean	WITHOUT_CLASSIFICATION	0.9999903480642249	WITHOUT_CLASSIFICATION	9.651935775053855E-6	DESIGN
checkcast cast bean	WITHOUT_CLASSIFICATION	0.9999108677213865	WITHOUT_CLASSIFICATION	8.913227861348527E-5	DESIGN
astore_3 store bean	WITHOUT_CLASSIFICATION	0.9999920699655802	WITHOUT_CLASSIFICATION	7.930034419757453E-6	DESIGN
aload_2 args	WITHOUT_CLASSIFICATION	0.9999983023610808	WITHOUT_CLASSIFICATION	1.6976389192326347E-6	DESIGN
iconst_i continue to aastore growing stack is 1	WITHOUT_CLASSIFICATION	0.9999961057663078	WITHOUT_CLASSIFICATION	3.894233692177279E-6	DESIGN
new	WITHOUT_CLASSIFICATION	0.9997801018849174	WITHOUT_CLASSIFICATION	2.1989811508248578E-4	DESIGN
dup	WITHOUT_CLASSIFICATION	0.9992933984105171	WITHOUT_CLASSIFICATION	7.066015894828706E-4	DESIGN
aload_3 load the raw bean	WITHOUT_CLASSIFICATION	0.9999956576139081	WITHOUT_CLASSIFICATION	4.342386091910303E-6	DESIGN
invokeinterface	WITHOUT_CLASSIFICATION	0.999991621175971	WITHOUT_CLASSIFICATION	8.378824029069824E-6	DESIGN
invokevirtual	WITHOUT_CLASSIFICATION	0.9999994517463099	WITHOUT_CLASSIFICATION	5.482536901877352E-7	DESIGN
invokevirtual	WITHOUT_CLASSIFICATION	0.9999994517463099	WITHOUT_CLASSIFICATION	5.482536901877352E-7	DESIGN
aastore args	WITHOUT_CLASSIFICATION	0.9999951062473172	WITHOUT_CLASSIFICATION	4.893752682765899E-6	DESIGN
| this | bean | args | i | raw bean | exception |	WITHOUT_CLASSIFICATION	0.9914576749900978	WITHOUT_CLASSIFICATION	0.00854232500990211	DESIGN
required to exception table iconst_0 i	WITHOUT_CLASSIFICATION	0.9999808857283163	WITHOUT_CLASSIFICATION	1.9114271683689553E-5	DESIGN
istore_3 store i	WITHOUT_CLASSIFICATION	0.999998537019057	WITHOUT_CLASSIFICATION	1.4629809429319835E-6	DESIGN
aload_1 load the bean	WITHOUT_CLASSIFICATION	0.9999883863828017	WITHOUT_CLASSIFICATION	1.1613617198177881E-5	DESIGN
checkcast cast the bean into a raw bean	WITHOUT_CLASSIFICATION	0.998923056315615	WITHOUT_CLASSIFICATION	0.0010769436843850646	DESIGN
current stack len = 0	WITHOUT_CLASSIFICATION	0.9999978350625829	WITHOUT_CLASSIFICATION	2.164937417153975E-6	DESIGN
start region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9991537427250085	WITHOUT_CLASSIFICATION	8.462572749914904E-4	DESIGN
iinc 3, 1	WITHOUT_CLASSIFICATION	0.9999973082995426	WITHOUT_CLASSIFICATION	2.6917004574171403E-6	DESIGN
aload 4 load the raw bean	WITHOUT_CLASSIFICATION	0.9999829216375531	WITHOUT_CLASSIFICATION	1.7078362446913175E-5	DESIGN
aload_2 load the args	WITHOUT_CLASSIFICATION	0.9999980739469253	WITHOUT_CLASSIFICATION	1.926053074616648E-6	DESIGN
iconst_i	WITHOUT_CLASSIFICATION	0.9998858583252809	WITHOUT_CLASSIFICATION	1.1414167471908005E-4	DESIGN
aaload	WITHOUT_CLASSIFICATION	0.9999868492786131	WITHOUT_CLASSIFICATION	1.3150721386830266E-5	DESIGN
checkcast	WITHOUT_CLASSIFICATION	0.9999220397718057	WITHOUT_CLASSIFICATION	7.796022819427313E-5	DESIGN
checkcast (case of primitive type) invokevirtual (case of primitive type)	WITHOUT_CLASSIFICATION	0.9999997346205585	WITHOUT_CLASSIFICATION	2.653794414728802E-7	DESIGN
checkcast (case of reference type)	WITHOUT_CLASSIFICATION	0.9999915174780315	WITHOUT_CLASSIFICATION	8.482521968608179E-6	DESIGN
current stack len = 2	WITHOUT_CLASSIFICATION	0.9999990013411979	WITHOUT_CLASSIFICATION	9.986588020138788E-7	DESIGN
end region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9909782065337508	WITHOUT_CLASSIFICATION	0.009021793466249173	DESIGN
register in exception table	WITHOUT_CLASSIFICATION	0.9999872149106246	WITHOUT_CLASSIFICATION	1.2785089375465723E-5	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.999996218782351	WITHOUT_CLASSIFICATION	3.781217649006855E-6	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.999996218782351	WITHOUT_CLASSIFICATION	3.781217649006855E-6	DESIGN
return	WITHOUT_CLASSIFICATION	0.9999278524459028	WITHOUT_CLASSIFICATION	7.21475540971964E-5	DESIGN
return	WITHOUT_CLASSIFICATION	0.9999278524459028	WITHOUT_CLASSIFICATION	7.21475540971964E-5	DESIGN
dup	WITHOUT_CLASSIFICATION	0.9992933984105171	WITHOUT_CLASSIFICATION	7.066015894828706E-4	DESIGN
invokevirtual	WITHOUT_CLASSIFICATION	0.9999994517463099	WITHOUT_CLASSIFICATION	5.482536901877352E-7	DESIGN
checkcast	WITHOUT_CLASSIFICATION	0.9999220397718057	WITHOUT_CLASSIFICATION	7.796022819427313E-5	DESIGN
local variables | target obj | each oldvalue |	WITHOUT_CLASSIFICATION	0.9999984546390802	WITHOUT_CLASSIFICATION	1.5453609197441615E-6	DESIGN
astore 5 store exception	WITHOUT_CLASSIFICATION	0.9999964400624449	WITHOUT_CLASSIFICATION	3.559937555074567E-6	DESIGN
new BulkAccessorException	WITHOUT_CLASSIFICATION	0.9999708757755339	WITHOUT_CLASSIFICATION	2.912422446603421E-5	DESIGN
aload 5 load exception	WITHOUT_CLASSIFICATION	0.9999828296901977	WITHOUT_CLASSIFICATION	1.7170309802362807E-5	DESIGN
iload_3 i	WITHOUT_CLASSIFICATION	0.9999984740496467	WITHOUT_CLASSIFICATION	1.5259503533240995E-6	DESIGN
invokespecial BulkAccessorException.<init>	WITHOUT_CLASSIFICATION	0.9999998940463521	WITHOUT_CLASSIFICATION	1.0595364780622298E-7	DESIGN
athrow	WITHOUT_CLASSIFICATION	0.9998881999537255	WITHOUT_CLASSIFICATION	1.1180004627462185E-4	DESIGN
WARNING: classfile only	WITHOUT_CLASSIFICATION	0.9999994278767165	WITHOUT_CLASSIFICATION	5.721232834839731E-7	DESIGN
swallow	WITHOUT_CLASSIFICATION	0.9999861054550108	WITHOUT_CLASSIFICATION	1.3894544989167179E-5	DESIGN
local variable | this |	WITHOUT_CLASSIFICATION	0.9998969012381922	WITHOUT_CLASSIFICATION	1.0309876180781119E-4	DESIGN
aload_0 load this	WITHOUT_CLASSIFICATION	0.9999933781609278	WITHOUT_CLASSIFICATION	6.621839072235503E-6	DESIGN
aload_0 load this	WITHOUT_CLASSIFICATION	0.9999933781609278	WITHOUT_CLASSIFICATION	6.621839072235503E-6	DESIGN
getfield get field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999689918214908	WITHOUT_CLASSIFICATION	3.100817850933513E-5	DESIGN
areturn return the value of the field	WITHOUT_CLASSIFICATION	0.9999992392362238	WITHOUT_CLASSIFICATION	7.607637761715914E-7	DESIGN
local variables | this | callback |	WITHOUT_CLASSIFICATION	0.9974422227621423	WITHOUT_CLASSIFICATION	0.0025577772378575945	DESIGN
aload_1 load callback	WITHOUT_CLASSIFICATION	0.9999883291618223	WITHOUT_CLASSIFICATION	1.1670838177706448E-5	DESIGN
putfield put field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999778268443832	WITHOUT_CLASSIFICATION	2.2173155616803497E-5	DESIGN
case of non-static field	WITHOUT_CLASSIFICATION	0.9999870714320088	WITHOUT_CLASSIFICATION	1.2928567991173992E-5	DESIGN
getfield get each field	WITHOUT_CLASSIFICATION	0.9998341416108558	WITHOUT_CLASSIFICATION	1.6585838914420396E-4	DESIGN
invokeinterface invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999999203695552	WITHOUT_CLASSIFICATION	7.963044479279581E-8	DESIGN
ifnonnull	WITHOUT_CLASSIFICATION	0.9999947362933602	WITHOUT_CLASSIFICATION	5.2637066397289025E-6	DESIGN
return each type	WITHOUT_CLASSIFICATION	0.9999895574032864	WITHOUT_CLASSIFICATION	1.044259671358634E-5	DESIGN
return each type	WITHOUT_CLASSIFICATION	0.9999895574032864	WITHOUT_CLASSIFICATION	1.044259671358634E-5	DESIGN
store_1 each type	WITHOUT_CLASSIFICATION	0.9999994697560026	WITHOUT_CLASSIFICATION	5.302439973337283E-7	DESIGN
ldc name of the field	WITHOUT_CLASSIFICATION	0.9999918168080576	WITHOUT_CLASSIFICATION	8.183191942420087E-6	DESIGN
load_1 each type	WITHOUT_CLASSIFICATION	0.9999993802025445	WITHOUT_CLASSIFICATION	6.197974554008094E-7	DESIGN
invokeinterface invoke Callback.read() each type	WITHOUT_CLASSIFICATION	0.9999999642534807	WITHOUT_CLASSIFICATION	3.574651924767414E-8	DESIGN
int	WITHOUT_CLASSIFICATION	0.999978770919682	WITHOUT_CLASSIFICATION	2.1229080317995828E-5	DESIGN
return	WITHOUT_CLASSIFICATION	0.9999278524459028	WITHOUT_CLASSIFICATION	7.21475540971964E-5	DESIGN
dup	WITHOUT_CLASSIFICATION	0.9992933984105171	WITHOUT_CLASSIFICATION	7.066015894828706E-4	DESIGN
invokeinterface	WITHOUT_CLASSIFICATION	0.999991621175971	WITHOUT_CLASSIFICATION	8.378824029069824E-6	DESIGN
checkcast	WITHOUT_CLASSIFICATION	0.9999220397718057	WITHOUT_CLASSIFICATION	7.796022819427313E-5	DESIGN
checkcast	WITHOUT_CLASSIFICATION	0.9999220397718057	WITHOUT_CLASSIFICATION	7.796022819427313E-5	DESIGN
invokeinterface enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999999088304137	WITHOUT_CLASSIFICATION	9.116958640296846E-8	DESIGN
invokeinterface enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999999088304137	WITHOUT_CLASSIFICATION	9.116958640296846E-8	DESIGN
ifnonnull (label1)	WITHOUT_CLASSIFICATION	0.9999995146054922	WITHOUT_CLASSIFICATION	4.853945077530734E-7	DESIGN
load_1	WITHOUT_CLASSIFICATION	0.9999975940221087	WITHOUT_CLASSIFICATION	2.4059778911927384E-6	DESIGN
load_1	WITHOUT_CLASSIFICATION	0.9999975940221087	WITHOUT_CLASSIFICATION	2.4059778911927384E-6	DESIGN
putfield	WITHOUT_CLASSIFICATION	0.9998682814204544	WITHOUT_CLASSIFICATION	1.3171857954563055E-4	DESIGN
return ;	WITHOUT_CLASSIFICATION	0.9999739060160607	WITHOUT_CLASSIFICATION	2.6093983939182713E-5	DESIGN
ldc field name	WITHOUT_CLASSIFICATION	0.9999971418413891	WITHOUT_CLASSIFICATION	2.85815861081771E-6	DESIGN
getfield old value of the field	WITHOUT_CLASSIFICATION	0.9999960138257594	WITHOUT_CLASSIFICATION	3.986174240579662E-6	DESIGN
invokeinterface callback.write(..)	WITHOUT_CLASSIFICATION	0.9999997604899389	WITHOUT_CLASSIFICATION	2.395100611246961E-7	DESIGN
reference type	WITHOUT_CLASSIFICATION	0.9999828123303774	WITHOUT_CLASSIFICATION	1.7187669622539265E-5	DESIGN
reference type	WITHOUT_CLASSIFICATION	0.9999828123303774	WITHOUT_CLASSIFICATION	1.7187669622539265E-5	DESIGN
not array	WITHOUT_CLASSIFICATION	0.9997537937530582	WITHOUT_CLASSIFICATION	2.4620624694182436E-4	DESIGN
array of reference type	WITHOUT_CLASSIFICATION	0.9999964181087425	WITHOUT_CLASSIFICATION	3.581891257510922E-6	DESIGN
boolean	WITHOUT_CLASSIFICATION	0.9999946709522801	WITHOUT_CLASSIFICATION	5.3290477198391845E-6	DESIGN
byte	WITHOUT_CLASSIFICATION	0.9998612290008555	WITHOUT_CLASSIFICATION	1.3877099914456415E-4	DESIGN
char	WITHOUT_CLASSIFICATION	0.9999947035668165	WITHOUT_CLASSIFICATION	5.296433183538708E-6	DESIGN
short	WITHOUT_CLASSIFICATION	0.9997036215435343	WITHOUT_CLASSIFICATION	2.9637845646570077E-4	DESIGN
double	WITHOUT_CLASSIFICATION	0.999986553436458	WITHOUT_CLASSIFICATION	1.3446563541875442E-5	DESIGN
float	WITHOUT_CLASSIFICATION	0.999994522071748	WITHOUT_CLASSIFICATION	5.477928251991538E-6	DESIGN
float	WITHOUT_CLASSIFICATION	0.999994522071748	WITHOUT_CLASSIFICATION	5.477928251991538E-6	DESIGN
long	WITHOUT_CLASSIFICATION	0.9999396435770854	WITHOUT_CLASSIFICATION	6.035642291441534E-5	DESIGN
long	WITHOUT_CLASSIFICATION	0.9999396435770854	WITHOUT_CLASSIFICATION	6.035642291441534E-5	DESIGN
bad type	WITHOUT_CLASSIFICATION	0.9999278131596766	WITHOUT_CLASSIFICATION	7.218684032335737E-5	DESIGN
bad type	WITHOUT_CLASSIFICATION	0.9999278131596766	WITHOUT_CLASSIFICATION	7.218684032335737E-5	DESIGN
boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999999724689033	WITHOUT_CLASSIFICATION	2.753109685425066E-8	DESIGN
boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999999724689033	WITHOUT_CLASSIFICATION	2.753109685425066E-8	DESIGN
reference type	WITHOUT_CLASSIFICATION	0.9999828123303774	WITHOUT_CLASSIFICATION	1.7187669622539265E-5	DESIGN
double	WITHOUT_CLASSIFICATION	0.999986553436458	WITHOUT_CLASSIFICATION	1.3446563541875442E-5	DESIGN
float	WITHOUT_CLASSIFICATION	0.999994522071748	WITHOUT_CLASSIFICATION	5.477928251991538E-6	DESIGN
float	WITHOUT_CLASSIFICATION	0.999994522071748	WITHOUT_CLASSIFICATION	5.477928251991538E-6	DESIGN
long	WITHOUT_CLASSIFICATION	0.9999396435770854	WITHOUT_CLASSIFICATION	6.035642291441534E-5	DESIGN
bad type	WITHOUT_CLASSIFICATION	0.9999278131596766	WITHOUT_CLASSIFICATION	7.218684032335737E-5	DESIGN
bad type	WITHOUT_CLASSIFICATION	0.9999278131596766	WITHOUT_CLASSIFICATION	7.218684032335737E-5	DESIGN
boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999999724689033	WITHOUT_CLASSIFICATION	2.753109685425066E-8	DESIGN
skip finalize methods	WITHOUT_CLASSIFICATION	0.9997301284882244	WITHOUT_CLASSIFICATION	2.6987151177559784E-4	DESIGN
Mainly for OSCache	WITHOUT_CLASSIFICATION	0.9999992234472531	WITHOUT_CLASSIFICATION	7.765527469858601E-7	DESIGN
decrement the lock	WITHOUT_CLASSIFICATION	0.9999656982583788	WITHOUT_CLASSIFICATION	3.430174162125448E-5	DESIGN
create new lock that times out immediately	WITHOUT_CLASSIFICATION	0.9999823728268115	WITHOUT_CLASSIFICATION	1.7627173188487727E-5	DESIGN
recache the updated state	WITHOUT_CLASSIFICATION	0.9999403775822313	WITHOUT_CLASSIFICATION	5.9622417768634146E-5	DESIGN
noop	WITHOUT_CLASSIFICATION	0.9999359649528238	WITHOUT_CLASSIFICATION	6.403504717621787E-5	DESIGN
null clientLock is remotely possible but will never happen in practice	WITHOUT_CLASSIFICATION	0.9946382969474269	WITHOUT_CLASSIFICATION	0.005361703052573168	DESIGN
we really could refresh the item if it is not a lock, but it might be slower return freshTimestamp < txTimestamp	WITHOUT_CLASSIFICATION	0.9724736942255103	WITHOUT_CLASSIFICATION	0.02752630577448963	DESIGN
by requiring <, we rely on lock timeout in the case of an unsuccessful update!	WITHOUT_CLASSIFICATION	0.9993019343890678	WITHOUT_CLASSIFICATION	6.98065610932219E-4	DESIGN
the user provided resulttransformer, not the one used with "select new". Here to avoid mangling transformed/non-transformed results.	WITHOUT_CLASSIFICATION	0.9999999999985566	WITHOUT_CLASSIFICATION	1.4434118572810072E-12	DESIGN
disassemble positional parameters	WITHOUT_CLASSIFICATION	0.9999999333984738	WITHOUT_CLASSIFICATION	6.660152615626427E-8	DESIGN
disassemble named parameters	WITHOUT_CLASSIFICATION	0.9999998387720085	WITHOUT_CLASSIFICATION	1.6122799150077013E-7	DESIGN
ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999924307399645	WITHOUT_CLASSIFICATION	7.56926003552167E-6	DESIGN
noop	WITHOUT_CLASSIFICATION	0.9999359649528238	WITHOUT_CLASSIFICATION	6.403504717621787E-5	DESIGN
noop	WITHOUT_CLASSIFICATION	0.9999359649528238	WITHOUT_CLASSIFICATION	6.403504717621787E-5	DESIGN
noop	WITHOUT_CLASSIFICATION	0.9999359649528238	WITHOUT_CLASSIFICATION	6.403504717621787E-5	DESIGN
this is called from SettingsFactory irregardless; trivial to simply disregard	WITHOUT_CLASSIFICATION	0.9999897227995388	WITHOUT_CLASSIFICATION	1.027720046128502E-5	DESIGN
Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999994600586918	WITHOUT_CLASSIFICATION	5.399413081194036E-7	DESIGN
Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999994600586918	WITHOUT_CLASSIFICATION	5.399413081194036E-7	DESIGN
throw new UnsupportedOperationException("Can't write to a readonly object");	WITHOUT_CLASSIFICATION	0.9999990372565798	WITHOUT_CLASSIFICATION	9.627434202241267E-7	DESIGN
assembled state gets put in a new array (we read from cache by value!)	WITHOUT_CLASSIFICATION	0.999989944080357	WITHOUT_CLASSIFICATION	1.0055919643041832E-5	DESIGN
persister.setIdentifier(result, id); before calling interceptor, for consistency with normal load	WITHOUT_CLASSIFICATION	0.9999999784791016	WITHOUT_CLASSIFICATION	2.1520898495551645E-8	DESIGN
no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9999944277898398	WITHOUT_CLASSIFICATION	5.572210160190791E-6	DESIGN
no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9999944277898398	WITHOUT_CLASSIFICATION	5.572210160190791E-6	DESIGN
again, CCS did not have such a concept; but a reasonable proximity is to clear the cache after transaction as long as the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999992385812602	WITHOUT_CLASSIFICATION	7.614187397706914E-7	DESIGN
again, CCS did not have such a concept; however a reasonable proximity is to clear the cache. For non-transaction aware caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9997923849482542	WITHOUT_CLASSIFICATION	2.0761505174582653E-4	DESIGN
again, CCS did not have such a concept; however a reasonable proximity is to clear the cache. For non-transaction aware caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9997923849482542	WITHOUT_CLASSIFICATION	2.0761505174582653E-4	DESIGN
classes mentioned in extends not available - so put it in queue	WITHOUT_CLASSIFICATION	0.9998167158366061	WITHOUT_CLASSIFICATION	1.8328416339391748E-4	DESIGN
get meta's from <hibernate-mapping>	WITHOUT_CLASSIFICATION	0.9999971845246574	WITHOUT_CLASSIFICATION	2.8154753426721474E-6	DESIGN
get meta's from <class>	WITHOUT_CLASSIFICATION	0.9999950016942931	WITHOUT_CLASSIFICATION	4.998305706903111E-6	DESIGN
DB-OBJECTNAME	WITHOUT_CLASSIFICATION	0.9999952407939383	WITHOUT_CLASSIFICATION	4.759206061772224E-6	DESIGN
MUTABLE	WITHOUT_CLASSIFICATION	0.9999852460745633	WITHOUT_CLASSIFICATION	1.4753925436691493E-5	DESIGN
WHERE	WITHOUT_CLASSIFICATION	0.9999660866734104	WITHOUT_CLASSIFICATION	3.391332658970114E-5	DESIGN
CHECK	WITHOUT_CLASSIFICATION	0.9996665213598711	WITHOUT_CLASSIFICATION	3.334786401288136E-4	DESIGN
POLYMORPHISM	WITHOUT_CLASSIFICATION	0.9999426718350427	WITHOUT_CLASSIFICATION	5.73281649572559E-5	DESIGN
TODO:	WITHOUT_CLASSIFICATION	0.9824124079713651	WITHOUT_CLASSIFICATION	0.017587592028634965	DESIGN
ID	WITHOUT_CLASSIFICATION	0.9999306563892092	WITHOUT_CLASSIFICATION	6.934361079073879E-5	DESIGN
VERSION / TIMESTAMP	WITHOUT_CLASSIFICATION	0.9999997542436834	WITHOUT_CLASSIFICATION	2.457563166657348E-7	DESIGN
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999935644230351	WITHOUT_CLASSIFICATION	6.435576964925131E-6	DESIGN
Primary key constraint	WITHOUT_CLASSIFICATION	0.999999666898686	WITHOUT_CLASSIFICATION	3.331013139602014E-7	DESIGN
this is either a <version/> tag with no type attribute, or a <timestamp/> tag	WITHOUT_CLASSIFICATION	0.9999971828159807	WITHOUT_CLASSIFICATION	2.817184019382195E-6	DESIGN
for version properties marked as being generated, make sure they are "always" generated; aka, "insert" is invalid; this is dis-allowed by the DTD, but just to make sure...	WITHOUT_CLASSIFICATION	0.9999999506210626	WITHOUT_CLASSIFICATION	4.937893724771288E-8	DESIGN
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999935644230351	WITHOUT_CLASSIFICATION	6.435576964925131E-6	DESIGN
( (Column) discrim.getColumnIterator().next() ).setType(type);	WITHOUT_CLASSIFICATION	0.9999991341019311	WITHOUT_CLASSIFICATION	8.658980690375362E-7	DESIGN
go ahead and set the lazy here, since pojo.proxy can override it.	WITHOUT_CLASSIFICATION	0.9999999307711307	WITHOUT_CLASSIFICATION	6.922886927400324E-8	DESIGN
DYNAMIC UPDATE	WITHOUT_CLASSIFICATION	0.9999975006217074	WITHOUT_CLASSIFICATION	2.4993782924838135E-6	DESIGN
IMPORT	WITHOUT_CLASSIFICATION	0.9999863251146477	WITHOUT_CLASSIFICATION	1.3674885352386898E-5	DESIGN
BATCH SIZE	WITHOUT_CLASSIFICATION	0.9999882782363848	WITHOUT_CLASSIFICATION	1.172176361527166E-5	DESIGN
SELECT BEFORE UPDATE	WITHOUT_CLASSIFICATION	0.999998672221248	WITHOUT_CLASSIFICATION	1.3277787519438307E-6	DESIGN
OPTIMISTIC LOCK MODE	WITHOUT_CLASSIFICATION	0.9999969900176093	WITHOUT_CLASSIFICATION	3.009982390717136E-6	DESIGN
PERSISTER	WITHOUT_CLASSIFICATION	0.9999918058823384	WITHOUT_CLASSIFICATION	8.19411766165767E-6	DESIGN
CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999878874001783	WITHOUT_CLASSIFICATION	1.2112599821642561E-5	DESIGN
get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999852993341268	WITHOUT_CLASSIFICATION	1.4700665873263019E-5	DESIGN
properties	WITHOUT_CLASSIFICATION	0.9999836745361863	WITHOUT_CLASSIFICATION	1.632546381375348E-5	DESIGN
joined subclasses	WITHOUT_CLASSIFICATION	0.9999995554405076	WITHOUT_CLASSIFICATION	4.445594924180071E-7	DESIGN
KEY	WITHOUT_CLASSIFICATION	0.999712451485132	WITHOUT_CLASSIFICATION	2.8754851486794954E-4	DESIGN
CHECK	WITHOUT_CLASSIFICATION	0.9996665213598711	WITHOUT_CLASSIFICATION	3.334786401288136E-4	DESIGN
CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999878874001783	WITHOUT_CLASSIFICATION	1.2112599821642561E-5	DESIGN
properties	WITHOUT_CLASSIFICATION	0.9999836745361863	WITHOUT_CLASSIFICATION	1.632546381375348E-5	DESIGN
KEY	WITHOUT_CLASSIFICATION	0.999712451485132	WITHOUT_CLASSIFICATION	2.8754851486794954E-4	DESIGN
model.getKey().setType( new Type( model.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999999269488096	WITHOUT_CLASSIFICATION	7.305119043858917E-8	DESIGN
TABLENAME	WITHOUT_CLASSIFICATION	0.9999630104231401	WITHOUT_CLASSIFICATION	3.6989576859810036E-5	DESIGN
join.getKey().setType( new Type( lazz.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999999906585917	WITHOUT_CLASSIFICATION	9.341408191160963E-9	DESIGN
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999905461804185	WITHOUT_CLASSIFICATION	9.453819581420999E-6	DESIGN
COLUMN(S)	WITHOUT_CLASSIFICATION	0.9999760662218649	WITHOUT_CLASSIFICATION	2.39337781351342E-5	DESIGN
column index	WITHOUT_CLASSIFICATION	0.9999980182819307	WITHOUT_CLASSIFICATION	1.9817180693725516E-6	DESIGN
column unique-key	WITHOUT_CLASSIFICATION	0.9999965134759822	WITHOUT_CLASSIFICATION	3.4865240177447035E-6	DESIGN
automatically makes a column with the default name if none is specifed by XML	WITHOUT_CLASSIFICATION	0.9736478512964083	WITHOUT_CLASSIFICATION	0.026352148703591694	DESIGN
for an any	WITHOUT_CLASSIFICATION	0.999996605050822	WITHOUT_CLASSIFICATION	3.3949491779467472E-6	DESIGN
insertable simply because that is the user did not specify anything; just override it	WITHOUT_CLASSIFICATION	0.9999999998059175	WITHOUT_CLASSIFICATION	1.940825485037083E-10	DESIGN
the user specifically supplied insert="true", which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999984506724166	WITHOUT_CLASSIFICATION	1.549327583469353E-6	DESIGN
properties generated on update can never be updateable...	WITHOUT_CLASSIFICATION	0.9999013388461305	WITHOUT_CLASSIFICATION	9.866115386949308E-5	DESIGN
updateable only because the user did not specify anything; just override it	WITHOUT_CLASSIFICATION	0.9999999999838263	WITHOUT_CLASSIFICATION	1.6173733244022214E-11	DESIGN
the user specifically supplied update="true", which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999997353486515	WITHOUT_CLASSIFICATION	2.6465134858058475E-7	DESIGN
ROLENAME	WITHOUT_CLASSIFICATION	0.9999527212426381	WITHOUT_CLASSIFICATION	4.7278757361922624E-5	DESIGN
FETCH STRATEGY	WITHOUT_CLASSIFICATION	0.999986125536754	WITHOUT_CLASSIFICATION	1.3874463245879983E-5	DESIGN
TABLE	WITHOUT_CLASSIFICATION	0.999987858845463	WITHOUT_CLASSIFICATION	1.2141154536900359E-5	DESIGN
tableName = mappings.getNamingStrategy().propertyToTableName( className, path );	WITHOUT_CLASSIFICATION	0.9999997963392673	WITHOUT_CLASSIFICATION	2.036607326447132E-7	DESIGN
SORT	WITHOUT_CLASSIFICATION	0.9999674076388787	WITHOUT_CLASSIFICATION	3.259236112127453E-5	DESIGN
CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999878874001783	WITHOUT_CLASSIFICATION	1.2112599821642561E-5	DESIGN
unsorted, natural, comparator.class.name	WITHOUT_CLASSIFICATION	0.9999986588697836	WITHOUT_CLASSIFICATION	1.3411302164193206E-6	DESIGN
ORPHAN DELETE (used for programmer error detection)	WITHOUT_CLASSIFICATION	0.9999925826232668	WITHOUT_CLASSIFICATION	7.4173767331055E-6	DESIGN
set up second pass	WITHOUT_CLASSIFICATION	0.9999992062865402	WITHOUT_CLASSIFICATION	7.937134598757397E-7	DESIGN
an "embedded" component (composite ids and unique) note that this does not handle nested components	WITHOUT_CLASSIFICATION	0.9999551770069135	WITHOUT_CLASSIFICATION	4.4822993086447595E-5	DESIGN
a nested composite element	WITHOUT_CLASSIFICATION	0.9999974434775081	WITHOUT_CLASSIFICATION	2.556522491876732E-6	DESIGN
for an any we will have to use reflection	WITHOUT_CLASSIFICATION	0.9999524444981689	WITHOUT_CLASSIFICATION	4.7555501831166155E-5	DESIGN
NOTE SPECIAL CASE: one-to-one constrained=false cannot be proxied, so default to join and non-lazy	WITHOUT_CLASSIFICATION	0.9999999928721376	WITHOUT_CLASSIFICATION	7.127862495477441E-9	DESIGN
use old (HB 2.1) defaults if outer-join is specified	WITHOUT_CLASSIFICATION	0.9999999730903198	WITHOUT_CLASSIFICATION	2.690968010041536E-8	DESIGN
lazy = !join;	WITHOUT_CLASSIFICATION	0.9999993264931482	WITHOUT_CLASSIFICATION	6.73506851857665E-7	DESIGN
GENERATOR	WITHOUT_CLASSIFICATION	0.9999185325061782	WITHOUT_CLASSIFICATION	8.146749382178226E-5	DESIGN
ID UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999719420761838	WITHOUT_CLASSIFICATION	2.8057923816232557E-5	DESIGN
VERSION UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.999996026076285	WITHOUT_CLASSIFICATION	3.973923714988936E-6	DESIGN
not necessarily a unique property reference	WITHOUT_CLASSIFICATION	0.9989991396322082	WITHOUT_CLASSIFICATION	0.0010008603677918804	DESIGN
( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999890852992814	WITHOUT_CLASSIFICATION	1.0914700718436225E-5	DESIGN
contained elements:	WITHOUT_CLASSIFICATION	0.9999933192263196	WITHOUT_CLASSIFICATION	6.680773680338402E-6	DESIGN
for non-inverse one-to-many, with a not-null fk, add a backref!	WITHOUT_CLASSIFICATION	0.9999601790550559	WITHOUT_CLASSIFICATION	3.9820944944190076E-5	DESIGN
Bind the where	WITHOUT_CLASSIFICATION	0.9999892466536959	WITHOUT_CLASSIFICATION	1.0753346303993081E-5	DESIGN
Bind the order-by	WITHOUT_CLASSIFICATION	0.9999989976648942	WITHOUT_CLASSIFICATION	1.0023351058600894E-6	DESIGN
Bind the filters	WITHOUT_CLASSIFICATION	0.999998619165698	WITHOUT_CLASSIFICATION	1.380834301934035E-6	DESIGN
overriding inherited meta attribute. HBX-621 & HBX-793	WITHOUT_CLASSIFICATION	0.9999932934795319	WITHOUT_CLASSIFICATION	6.706520468118272E-6	DESIGN
first, iterate over all elements capable of defining an extends attribute collecting all found extends references if they cannot be resolved against the already processed mappings.	WITHOUT_CLASSIFICATION	0.99999999967803	WITHOUT_CLASSIFICATION	3.2197002711323733E-10	DESIGN
mappings might contain either the "raw" extends name (in the case of an entity-name mapping) or a FQN (in the case of a POJO mapping).	WITHOUT_CLASSIFICATION	0.9995211209728987	WITHOUT_CLASSIFICATION	4.788790271012993E-4	DESIGN
+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9624117943875266	WITHOUT_CLASSIFICATION	0.037588205612473405	DESIGN
SessionFactory name:	WITHOUT_CLASSIFICATION	0.9999586418918277	WITHOUT_CLASSIFICATION	4.1358108172210324E-5	DESIGN
JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9999358061339115	WITHOUT_CLASSIFICATION	6.419386608845623E-5	DESIGN
JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9999358061339115	WITHOUT_CLASSIFICATION	6.419386608845623E-5	DESIGN
Interrogate JDBC metadata	WITHOUT_CLASSIFICATION	0.9999928554383632	WITHOUT_CLASSIFICATION	7.144561636784163E-6	DESIGN
user supplied JDBC connections	WITHOUT_CLASSIFICATION	0.9999551761733599	WITHOUT_CLASSIFICATION	4.48238266400487E-5	DESIGN
use dialect default properties	WITHOUT_CLASSIFICATION	0.9999744184375998	WITHOUT_CLASSIFICATION	2.558156240025876E-5	DESIGN
Transaction settings:	WITHOUT_CLASSIFICATION	0.9999045427909559	WITHOUT_CLASSIFICATION	9.54572090441139E-5	DESIGN
SQL Generation settings:	WITHOUT_CLASSIFICATION	0.9998381118024205	WITHOUT_CLASSIFICATION	1.618881975794361E-4	DESIGN
Query parser settings:	WITHOUT_CLASSIFICATION	0.9993429877136868	WITHOUT_CLASSIFICATION	6.570122863131285E-4	DESIGN
Second-level / query cache:	WITHOUT_CLASSIFICATION	0.999924455565279	WITHOUT_CLASSIFICATION	7.554443472100395E-5	DESIGN
The cache provider is needed when we either have second-level cache enabled or query cache enabled. Note that useSecondLevelCache is enabled by default	WITHOUT_CLASSIFICATION	0.9999935393598958	WITHOUT_CLASSIFICATION	6.460640104219784E-6	DESIGN
SQL Exception converter:	WITHOUT_CLASSIFICATION	0.9999770579771572	WITHOUT_CLASSIFICATION	2.2942022842759254E-5	DESIGN
Statistics and logging:	WITHOUT_CLASSIFICATION	0.999996138140734	WITHOUT_CLASSIFICATION	3.861859266112373E-6	DESIGN
settings.setShowSqlEnabled(showSql);	WITHOUT_CLASSIFICATION	0.9999986995606099	WITHOUT_CLASSIFICATION	1.300439390052281E-6	DESIGN
settings.setFormatSqlEnabled(formatSql);	WITHOUT_CLASSIFICATION	0.9999982377754496	WITHOUT_CLASSIFICATION	1.7622245503280977E-6	DESIGN
Schema export:	WITHOUT_CLASSIFICATION	0.9999860689798892	WITHOUT_CLASSIFICATION	1.3931020110783445E-5	DESIGN
String provider = properties.getProperty( Environment.BYTECODE_PROVIDER ); log.info( "Bytecode provider name : " + provider ); BytecodeProvider bytecodeProvider = buildBytecodeProvider( provider ); settings.setBytecodeProvider( bytecodeProvider );	WITHOUT_CLASSIFICATION	0.9999999934538658	WITHOUT_CLASSIFICATION	6.546134186426996E-9	DESIGN
legacy behavior, apply the bridge...	WITHOUT_CLASSIFICATION	0.9993003729975143	WITHOUT_CLASSIFICATION	6.996270024856013E-4	DESIGN
maybe a concrete SQLpropertyresult type, but Map is exactly what is required at the moment	WITHOUT_CLASSIFICATION	0.9991828693912489	WITHOUT_CLASSIFICATION	8.17130608751088E-4	DESIGN
if dotted and not load-collection nor return-join regular property	WITHOUT_CLASSIFICATION	0.9999998223093283	WITHOUT_CLASSIFICATION	1.7769067178389574E-7	DESIGN
private ComponentTuplizerFactory componentTuplizerFactory; todo : HHH-3517 and HHH-1907 private BytecodeProvider bytecodeProvider;	WITHOUT_CLASSIFICATION	0.9999925371045577	WITHOUT_CLASSIFICATION	7.4628954423235585E-6	DESIGN
public getters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999229722568035	WITHOUT_CLASSIFICATION	7.702774319644749E-5	DESIGN
public ComponentTuplizerFactory getComponentTuplizerFactory() { return componentTuplizerFactory; }	WITHOUT_CLASSIFICATION	0.9999701092923073	WITHOUT_CLASSIFICATION	2.9890707692561017E-5	DESIGN
package protected setters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9968799322278071	WITHOUT_CLASSIFICATION	0.0031200677721929353	DESIGN
void setShowSqlEnabled(boolean b) { showSql = b; } void setFormatSqlEnabled(boolean b) { formatSql = b; }	WITHOUT_CLASSIFICATION	0.9999999985723086	WITHOUT_CLASSIFICATION	1.4276914041692065E-9	DESIGN
public BytecodeProvider getBytecodeProvider() { return bytecodeProvider; } void setBytecodeProvider(BytecodeProvider bytecodeProvider) { this.bytecodeProvider = bytecodeProvider; }	WITHOUT_CLASSIFICATION	0.9999965452085973	WITHOUT_CLASSIFICATION	3.4547914028802878E-6	DESIGN
using local since the inheritedMetas at this point is not the correct map since it is always the empty map	WITHOUT_CLASSIFICATION	0.9999158965603698	WITHOUT_CLASSIFICATION	8.410343963012787E-5	DESIGN
private ComponentTuplizerFactory componentTuplizerFactory; todo : HHH-3517 and HHH-1907	WITHOUT_CLASSIFICATION	0.9999712804415234	WITHOUT_CLASSIFICATION	2.8719558476571613E-5	DESIGN
protected List extendsQueue;	WITHOUT_CLASSIFICATION	0.9999637476687446	WITHOUT_CLASSIFICATION	3.625233125549546E-5	DESIGN
extendsQueue = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999999107662022	WITHOUT_CLASSIFICATION	8.923379779195383E-8	DESIGN
componentTuplizerFactory = new ComponentTuplizerFactory();	WITHOUT_CLASSIFICATION	0.9999990353034046	WITHOUT_CLASSIFICATION	9.646965953099333E-7	DESIGN
if doc is null, then for whatever reason, the cached file cannot be used...	WITHOUT_CLASSIFICATION	0.9999983516320103	WITHOUT_CLASSIFICATION	1.648367989676972E-6	DESIGN
drop them in reverse order in case db needs it done that way...	WITHOUT_CLASSIFICATION	0.9968236309513546	WITHOUT_CLASSIFICATION	0.0031763690486454007	DESIGN
public ComponentTuplizerFactory getComponentTuplizerFactory() { return componentTuplizerFactory; }	WITHOUT_CLASSIFICATION	0.9999701092923073	WITHOUT_CLASSIFICATION	2.9890707692561017E-5	DESIGN
This method may be called many times!!	WITHOUT_CLASSIFICATION	0.9987082907218477	WITHOUT_CLASSIFICATION	0.0012917092781522448	DESIGN
Iterator iterator = extendsQueue.iterator();	WITHOUT_CLASSIFICATION	0.999996999947401	WITHOUT_CLASSIFICATION	3.0000525989857923E-6	DESIGN
Iterator iter = extendsQueue.iterator();	WITHOUT_CLASSIFICATION	0.999997136041436	WITHOUT_CLASSIFICATION	2.863958563977868E-6	DESIGN
found	WITHOUT_CLASSIFICATION	0.9997472495588764	WITHOUT_CLASSIFICATION	2.527504411235586E-4	DESIGN
found	WITHOUT_CLASSIFICATION	0.9997472495588764	WITHOUT_CLASSIFICATION	2.527504411235586E-4	DESIGN
settings.setComponentTuplizerFactory( this.getComponentTuplizerFactory() );	WITHOUT_CLASSIFICATION	0.9998602527483393	WITHOUT_CLASSIFICATION	1.397472516606189E-4	DESIGN
private final List extendsQueue;	WITHOUT_CLASSIFICATION	0.9999982283842604	WITHOUT_CLASSIFICATION	1.7716157396092421E-6	DESIGN
<String, String>	WITHOUT_CLASSIFICATION	0.9999925208060206	WITHOUT_CLASSIFICATION	7.4791939794134035E-6	DESIGN
<String, String>	WITHOUT_CLASSIFICATION	0.9999925208060206	WITHOUT_CLASSIFICATION	7.4791939794134035E-6	DESIGN
+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9624117943875266	WITHOUT_CLASSIFICATION	0.037588205612473405	DESIGN
Set USE_REFLECTION_OPTIMIZER to false to fix HHH-227	WITHOUT_CLASSIFICATION	0.9999999973243944	WITHOUT_CLASSIFICATION	2.675605768330153E-9	DESIGN
orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9999758934537355	WITHOUT_CLASSIFICATION	2.4106546264497154E-5	DESIGN
element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9999999333058608	WITHOUT_CLASSIFICATION	6.66941392354271E-8	DESIGN
intentionally empty	WITHOUT_CLASSIFICATION	0.9999557726236074	WITHOUT_CLASSIFICATION	4.4227376392666636E-5	DESIGN
orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9999758934537355	WITHOUT_CLASSIFICATION	2.4106546264497154E-5	DESIGN
element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9999999333058608	WITHOUT_CLASSIFICATION	6.66941392354271E-8	DESIGN
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999981200741259	WITHOUT_CLASSIFICATION	1.8799258740470616E-6	DESIGN
maintain correct duplication if loaded in a cartesian product	WITHOUT_CLASSIFICATION	0.9999560871617408	WITHOUT_CLASSIFICATION	4.391283825929129E-5	DESIGN
the element has been removed from the set	WITHOUT_CLASSIFICATION	0.9999827048182985	WITHOUT_CLASSIFICATION	1.7295181701411597E-5	DESIGN
the element has changed	WITHOUT_CLASSIFICATION	0.9999966921340111	WITHOUT_CLASSIFICATION	3.3078659889472234E-6	DESIGN
Careful: these methods do not initialize the collection.	WITHOUT_CLASSIFICATION	0.9996982737682039	WITHOUT_CLASSIFICATION	3.017262317962155E-4	DESIGN
needed so that we remove this collection from the second-level cache	WITHOUT_CLASSIFICATION	0.5580115266646515	WITHOUT_CLASSIFICATION	0.4419884733353486	DESIGN
override on some subclasses	WITHOUT_CLASSIFICATION	0.9999945166302511	WITHOUT_CLASSIFICATION	5.483369748881457E-6	DESIGN
override on some subclasses	WITHOUT_CLASSIFICATION	0.9999945166302511	WITHOUT_CLASSIFICATION	5.483369748881457E-6	DESIGN
do this bit after setting initialized to true or it will recurse	WITHOUT_CLASSIFICATION	0.9998896331481791	WITHOUT_CLASSIFICATION	1.1036685182087227E-4	DESIGN
short-circuit(s) no new elements, the old list contains only Orphans no old elements, so no Orphans neither	WITHOUT_CLASSIFICATION	0.999999999958743	WITHOUT_CLASSIFICATION	4.125710788424021E-11	DESIGN
create the collection holding the Orphans	WITHOUT_CLASSIFICATION	0.99999831878911	WITHOUT_CLASSIFICATION	1.6812108898937276E-6	DESIGN
collect EntityIdentifier(s) of the current elements - add them into a HashSet for fast access	WITHOUT_CLASSIFICATION	0.9999877947692564	WITHOUT_CLASSIFICATION	1.2205230743655893E-5	DESIGN
iterate over the old list	WITHOUT_CLASSIFICATION	0.9999977254825403	WITHOUT_CLASSIFICATION	2.2745174597095416E-6	DESIGN
(array==null) ? tempList.size() :	WITHOUT_CLASSIFICATION	0.9999998461071177	WITHOUT_CLASSIFICATION	1.5389288234955627E-7	DESIGN
intentionally empty	WITHOUT_CLASSIFICATION	0.9999557726236074	WITHOUT_CLASSIFICATION	4.4227376392666636E-5	DESIGN
(array==null) ? tempList.get(i) :	WITHOUT_CLASSIFICATION	0.9999996139731256	WITHOUT_CLASSIFICATION	3.860268743740904E-7	DESIGN
write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9999993678638239	WITHOUT_CLASSIFICATION	6.321361761624302E-7	DESIGN
write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9999993678638239	WITHOUT_CLASSIFICATION	6.321361761624302E-7	DESIGN
amazingly, these two will work because AbstractCollection uses iterator() to fill the array	WITHOUT_CLASSIFICATION	0.9996285799300815	WITHOUT_CLASSIFICATION	3.7142006991856895E-4	DESIGN
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999981200741259	WITHOUT_CLASSIFICATION	1.8799258740470616E-6	DESIGN
finally, what it's all about...	WITHOUT_CLASSIFICATION	0.9998457666717785	WITHOUT_CLASSIFICATION	1.5423332822152522E-4	DESIGN
note that if we load this collection from a cartesian product the multiplicity would be broken ... so use an idbag instead	WITHOUT_CLASSIFICATION	0.9999685301639519	DESIGN	3.1469836048042957E-5	WITHOUT_CLASSIFICATION
Anyway, here we implement <set> semantics for a <one-to-many> <bag>!	WITHOUT_CLASSIFICATION	0.64501894285212	DESIGN	0.35498105714788003	WITHOUT_CLASSIFICATION
a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999998016887006	WITHOUT_CLASSIFICATION	1.9831129939381522E-7	DESIGN
search for it note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9978412016712486	WITHOUT_CLASSIFICATION	0.00215879832875138	DESIGN
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999981200741259	WITHOUT_CLASSIFICATION	1.8799258740470616E-6	DESIGN
a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999998016887006	WITHOUT_CLASSIFICATION	1.9831129939381522E-7	DESIGN
search for it note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9978412016712486	WITHOUT_CLASSIFICATION	0.00215879832875138	DESIGN
public boolean equals(Object other) {read();return bag.equals(other);}public int hashCode(Object other) {read();return bag.hashCode();}	WITHOUT_CLASSIFICATION	0.9999997028322819	WITHOUT_CLASSIFICATION	2.971677181260614E-7	DESIGN
List OPERATIONS:	WITHOUT_CLASSIFICATION	0.9999999803717313	WITHOUT_CLASSIFICATION	1.9628268673874844E-8	DESIGN
pad with nulls from the current last element up to the new index	WITHOUT_CLASSIFICATION	0.9999999369615175	WITHOUT_CLASSIFICATION	6.303848252296686E-8	DESIGN
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999981200741259	WITHOUT_CLASSIFICATION	1.8799258740470616E-6	DESIGN
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999981200741259	WITHOUT_CLASSIFICATION	1.8799258740470616E-6	DESIGN
from Map	WITHOUT_CLASSIFICATION	0.9999766239699558	WITHOUT_CLASSIFICATION	2.3376030044179697E-5	DESIGN
from SortedMap	WITHOUT_CLASSIFICATION	0.9999200819782756	WITHOUT_CLASSIFICATION	7.99180217242492E-5	DESIGN
inject the data	WITHOUT_CLASSIFICATION	0.9999818058215795	WITHOUT_CLASSIFICATION	1.819417842061304E-5	DESIGN
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999252767249398	WITHOUT_CLASSIFICATION	7.472327506023035E-5	DESIGN
default pool size 20	WITHOUT_CLASSIFICATION	0.9999955138535609	WITHOUT_CLASSIFICATION	4.486146439069536E-6	DESIGN
trying via forName() first to be as close to DriverManager's semantics	WITHOUT_CLASSIFICATION	0.9999999960230309	WITHOUT_CLASSIFICATION	3.976968990235917E-9	DESIGN
if debug level is enabled, then log the password, otherwise mask it	WITHOUT_CLASSIFICATION	0.9999999437627287	WITHOUT_CLASSIFICATION	5.623727117092926E-8	DESIGN
register a cleanup synch	WITHOUT_CLASSIFICATION	0.9998292688408861	WITHOUT_CLASSIFICATION	1.707311591139204E-4	DESIGN
wrap the session in the transaction-protection proxy	WITHOUT_CLASSIFICATION	0.9997045977164358	WITHOUT_CLASSIFICATION	2.954022835641415E-4	DESIGN
then bind it	WITHOUT_CLASSIFICATION	0.9999916055286775	WITHOUT_CLASSIFICATION	8.394471322507583E-6	DESIGN
try to make sure we don't wrap and already wrapped session	WITHOUT_CLASSIFICATION	0.9999966288373218	WITHOUT_CLASSIFICATION	3.3711626781573643E-6	DESIGN
allow these to go through the the real session no matter what	WITHOUT_CLASSIFICATION	0.9999814831974851	WITHOUT_CLASSIFICATION	1.851680251485442E-5	DESIGN
limit the methods available if no transaction is active	WITHOUT_CLASSIFICATION	0.9998436086899714	WITHOUT_CLASSIFICATION	1.5639131002872345E-4	DESIGN
allow these (deprecated) methods to pass through	WITHOUT_CLASSIFICATION	0.9949574072353521	WITHOUT_CLASSIFICATION	0.005042592764647884	DESIGN
serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998279713725	WITHOUT_CLASSIFICATION	1.7202862749947623E-7	DESIGN
We could register the session against the transaction even though it is not started, but we'd have no guarentee of ever getting the map entries cleaned up (aside from spawning threads).	WITHOUT_CLASSIFICATION	0.9999973310619964	WITHOUT_CLASSIFICATION	2.6689380036291882E-6	DESIGN
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999252767249398	WITHOUT_CLASSIFICATION	7.472327506023035E-5	DESIGN
private String propertyName;	WITHOUT_CLASSIFICATION	0.998340464732313	WITHOUT_CLASSIFICATION	0.0016595352676870266	DESIGN
public PropertyProjection project() {return Projections.property(getPropertyName());}	WITHOUT_CLASSIFICATION	0.9999972574497585	WITHOUT_CLASSIFICATION	2.7425502414428593E-6	DESIGN
String[] fk = StringHelper.qualify( "collection_", cp.getKeyColumnNames() );	WITHOUT_CLASSIFICATION	0.9999999901029617	WITHOUT_CLASSIFICATION	9.897038439383242E-9	DESIGN
" collection_ where " +	WITHOUT_CLASSIFICATION	0.9999993649733011	WITHOUT_CLASSIFICATION	6.350266988877049E-7	DESIGN
unsupported	WITHOUT_CLASSIFICATION	0.999873900843066	WITHOUT_CLASSIFICATION	1.260991569339554E-4	DESIGN
unsupported	WITHOUT_CLASSIFICATION	0.999873900843066	WITHOUT_CLASSIFICATION	1.260991569339554E-4	DESIGN
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999252767249398	WITHOUT_CLASSIFICATION	7.472327506023035E-5	DESIGN
the following two lines were added to ensure that this.params is not null, which can happen with two-deep nested subqueries	WITHOUT_CLASSIFICATION	0.9999985700572162	WITHOUT_CLASSIFICATION	1.4299427837900523E-6	DESIGN
with two-deep subqueries, the same alias would get generated for both using the old method (criteriaQuery.generateSQLAlias()), so that is now used as a fallback if the main criteria alias isn't set	WITHOUT_CLASSIFICATION	0.9999723882246732	WITHOUT_CLASSIFICATION	2.7611775326818248E-5	DESIGN
implicit polymorphism not supported (would need a union)	WITHOUT_CLASSIFICATION	0.5330088902175892	WITHOUT_CLASSIFICATION	0.4669911097824107	DESIGN
pull off the last ", "	WITHOUT_CLASSIFICATION	0.9999998979402518	WITHOUT_CLASSIFICATION	1.0205974811709253E-7	DESIGN
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999855498059627	WITHOUT_CLASSIFICATION	1.4450194037299041E-5	DESIGN
we have the form: trim(trimSource) so we trim leading and trailing spaces	WITHOUT_CLASSIFICATION	0.9999985098486719	WITHOUT_CLASSIFICATION	1.4901513281786668E-6	DESIGN
we have the form: trim(from trimSource). This is functionally equivalent to trim(trimSource)	WITHOUT_CLASSIFICATION	0.9998790530076189	WITHOUT_CLASSIFICATION	1.2094699238109756E-4	DESIGN
NOT_SUPPORTED_SHOULD_USE_JDBC3_PreparedStatement.getGeneratedKeys_method	WITHOUT_CLASSIFICATION	0.9997243903278661	WITHOUT_CLASSIFICATION	2.7560967213389873E-4	DESIGN
potentialTrimCharacterArgIndex = 1 assumes that a trim-specification has been specified. we handle the exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999999506260775	WITHOUT_CLASSIFICATION	4.9373922493574725E-8	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999968770692844	WITHOUT_CLASSIFICATION	3.122930715600175E-5	DESIGN
Oracle did add support for ANSI CASE statements in 9i	WITHOUT_CLASSIFICATION	0.9999997154666428	WITHOUT_CLASSIFICATION	2.8453335719268975E-7	DESIGN
the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999994778928525	WITHOUT_CLASSIFICATION	5.221071475021053E-7	DESIGN
Informix doesn't have a bit type	WITHOUT_CLASSIFICATION	0.9998206731907028	WITHOUT_CLASSIFICATION	1.7932680929725502E-4	DESIGN
or BYTE or TEXT? or MONEY	WITHOUT_CLASSIFICATION	0.9996569444177309	WITHOUT_CLASSIFICATION	3.4305558226911984E-4	DESIGN
strip table-owner because Informix always returns constraint names as "<table-owner>.<constraint-name>"	WITHOUT_CLASSIFICATION	0.9999999971501905	WITHOUT_CLASSIFICATION	2.849809637248786E-9	DESIGN
build the map of standard ANSI SQL aggregation functions ~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998686403948	WITHOUT_CLASSIFICATION	1.3135960527964925E-7	DESIGN
pre H3.2 behavior: super.getReturnType(ct, m);	WITHOUT_CLASSIFICATION	0.9999121363683847	WITHOUT_CLASSIFICATION	8.78636316152693E-5	DESIGN
finally use the sqltype if == on Hibernate types did not find a match.	WITHOUT_CLASSIFICATION	0.9999946092009898	WITHOUT_CLASSIFICATION	5.390799010151405E-6	DESIGN
because numeric can be anything	WITHOUT_CLASSIFICATION	0.9999820030479057	WITHOUT_CLASSIFICATION	1.7996952094308583E-5	DESIGN
constructors and factory methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994867332205566	WITHOUT_CLASSIFICATION	5.132667794434339E-4	DESIGN
standard sql92 functions (can be overridden by subclasses)	WITHOUT_CLASSIFICATION	0.9999976558689351	WITHOUT_CLASSIFICATION	2.344131065017618E-6	DESIGN
map second/minute/hour/day/month/year to ANSI extract(), override on subclasses	WITHOUT_CLASSIFICATION	0.9999852508072888	WITHOUT_CLASSIFICATION	1.4749192711256004E-5	DESIGN
register hibernate types for default use in scalar sqlquery type auto detection	WITHOUT_CLASSIFICATION	0.9996157515870253	WITHOUT_CLASSIFICATION	3.8424841297466224E-4	DESIGN
database type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998698765294668	WITHOUT_CLASSIFICATION	1.301234705332395E-4	DESIGN
hibernate type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999608082352242	WITHOUT_CLASSIFICATION	3.919176477577385E-5	DESIGN
keyword support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998563105411523	WITHOUT_CLASSIFICATION	1.4368945884762037E-4	DESIGN
native identifier generatiion ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999408696545623	WITHOUT_CLASSIFICATION	5.9130345437705836E-5	DESIGN
IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999797027570971	WITHOUT_CLASSIFICATION	2.029724290284621E-5	DESIGN
SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997915376518726	WITHOUT_CLASSIFICATION	2.0846234812740217E-4	DESIGN
GUID support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997416306319861	WITHOUT_CLASSIFICATION	2.5836936801398164E-4	DESIGN
limit/offset support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999934772064858	WITHOUT_CLASSIFICATION	6.522793514328264E-6	DESIGN
by default we report no support	WITHOUT_CLASSIFICATION	0.9987638429440385	WITHOUT_CLASSIFICATION	0.0012361570559614211	DESIGN
by default we report no support for NOWAIT lock semantics	WITHOUT_CLASSIFICATION	0.9676290255660389	WITHOUT_CLASSIFICATION	0.03237097443396107	DESIGN
table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999974154956672	WITHOUT_CLASSIFICATION	2.5845043328890556E-6	DESIGN
temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998905276779602	WITHOUT_CLASSIFICATION	1.0947232203983794E-4	DESIGN
callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998437773669531	WITHOUT_CLASSIFICATION	1.5622263304694464E-4	DESIGN
current timestamp support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999431478699	WITHOUT_CLASSIFICATION	5.685213009951231E-7	DESIGN
SQLException support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998347545590601	WITHOUT_CLASSIFICATION	1.6524544093977813E-4	DESIGN
miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999808241172058	WITHOUT_CLASSIFICATION	1.9175882794120677E-5	DESIGN
identifier quoting support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999747918648995	WITHOUT_CLASSIFICATION	2.5208135100576085E-5	DESIGN
DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999407356428184	WITHOUT_CLASSIFICATION	5.926435718157341E-5	DESIGN
grrr... for differentiation of mysql storage engines	WITHOUT_CLASSIFICATION	0.9999968875401385	WITHOUT_CLASSIFICATION	3.1124598614329463E-6	DESIGN
Informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999896088139107	WITHOUT_CLASSIFICATION	1.0391186089193658E-5	DESIGN
return false here, as most databases do not properly support this construct...	WITHOUT_CLASSIFICATION	0.9983998298236664	WITHOUT_CLASSIFICATION	0.0016001701763335963	DESIGN
Mckoi has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999412789909249	WITHOUT_CLASSIFICATION	5.8721009075037355E-5	DESIGN
Oracle8 and previous define only a "DATE" type which is used to represent all aspects of date/time	WITHOUT_CLASSIFICATION	0.9999999907738156	WITHOUT_CLASSIFICATION	9.226184442612367E-9	DESIGN
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999637864797897	WITHOUT_CLASSIFICATION	3.6213520210300645E-5	DESIGN
" cascade";	WITHOUT_CLASSIFICATION	0.9999937396592764	WITHOUT_CLASSIFICATION	6.2603407236127695E-6	DESIGN
trim off the length/precision/scale	WITHOUT_CLASSIFICATION	0.9999999599784496	WITHOUT_CLASSIFICATION	4.0021550468706616E-8	DESIGN
public boolean dropTemporaryTableAfterUse() {we have to, because postgres sets current txto rollback only after a failed create tablereturn true;}	WITHOUT_CLASSIFICATION	0.999892625333822	WITHOUT_CLASSIFICATION	1.0737466617806236E-4	DESIGN
CHECK VIOLATION	WITHOUT_CLASSIFICATION	0.9999973545573964	WITHOUT_CLASSIFICATION	2.6454426037002394E-6	DESIGN
UNIQUE VIOLATION	WITHOUT_CLASSIFICATION	0.9999984414087618	WITHOUT_CLASSIFICATION	1.5585912381638295E-6	DESIGN
FOREIGN KEY VIOLATION	WITHOUT_CLASSIFICATION	0.9999939224449704	WITHOUT_CLASSIFICATION	6.077555029544856E-6	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999968770692844	WITHOUT_CLASSIFICATION	3.122930715600175E-5	DESIGN
NOT NULL VIOLATION	WITHOUT_CLASSIFICATION	0.9999451731511141	WITHOUT_CLASSIFICATION	5.48268488858867E-5	DESIGN
ALL OTHER	WITHOUT_CLASSIFICATION	0.9999867712134719	WITHOUT_CLASSIFICATION	1.3228786528169208E-5	DESIGN
Register the type of the out param - PostgreSQL uses Types.OTHER	WITHOUT_CLASSIFICATION	0.999856790470992	WITHOUT_CLASSIFICATION	1.4320952900802696E-4	DESIGN
seems to not really... public boolean supportsRowValueConstructorSyntax() { return true; }	WITHOUT_CLASSIFICATION	0.9999978916021657	WITHOUT_CLASSIFICATION	2.1083978342868164E-6	DESIGN
seems to have spotty LOB suppport	WITHOUT_CLASSIFICATION	0.9996080421380471	WITHOUT_CLASSIFICATION	3.9195786195290447E-4	DESIGN
HHH-2300	WITHOUT_CLASSIFICATION	0.9999162013740757	WITHOUT_CLASSIFICATION	8.379862592432147E-5	DESIGN
ignore (probably H2 not in the classpath)	WITHOUT_CLASSIFICATION	0.9999508228818289	WITHOUT_CLASSIFICATION	4.917711817113409E-5	DESIGN
Numeric Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999891645602583	WITHOUT_CLASSIFICATION	1.0835439741630635E-5	DESIGN
String Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999933547611974	WITHOUT_CLASSIFICATION	6.645238802621725E-6	DESIGN
Time and Date Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999933160859671	WITHOUT_CLASSIFICATION	6.68391403284268E-6	DESIGN
System Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999663093948514	WITHOUT_CLASSIFICATION	3.369060514863453E-5	DESIGN
not null is implicit	WITHOUT_CLASSIFICATION	0.9906477044538925	WITHOUT_CLASSIFICATION	0.009352295546107546	DESIGN
23000: Check constraint violation: {0} 23001: Unique index or primary key violation: {0}	WITHOUT_CLASSIFICATION	0.9999999995645299	WITHOUT_CLASSIFICATION	4.354701163371868E-10	DESIGN
Display the dialect version.	WITHOUT_CLASSIFICATION	0.9999777647217211	WITHOUT_CLASSIFICATION	2.2235278278972934E-5	DESIGN
The RDMS concat() function only supports 2 parameters	WITHOUT_CLASSIFICATION	0.9999999956817122	WITHOUT_CLASSIFICATION	4.318287744398886E-9	DESIGN
Dialect method overrides ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999964128866003	WITHOUT_CLASSIFICATION	3.587113399777267E-6	DESIGN
Original Dialect.java returns " for update";	WITHOUT_CLASSIFICATION	0.9999952326173803	WITHOUT_CLASSIFICATION	4.767382619707299E-6	DESIGN
Verify the state of this new method in Hibernate 3.0 Dialect.java	WITHOUT_CLASSIFICATION	0.986635518471332	WITHOUT_CLASSIFICATION	0.013364481528667899	DESIGN
Origial Dialect.java returns true;	WITHOUT_CLASSIFICATION	0.9999866753518779	WITHOUT_CLASSIFICATION	1.3324648122143416E-5	DESIGN
The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999995523332847	WITHOUT_CLASSIFICATION	4.476667152007672E-7	DESIGN
Sequence methods - start. The RDMS dialect needs these	WITHOUT_CLASSIFICATION	0.9999924575603637	WITHOUT_CLASSIFICATION	7.542439636240963E-6	DESIGN
methods to make it possible to use the Native Id generator	WITHOUT_CLASSIFICATION	0.9955525068117087	WITHOUT_CLASSIFICATION	0.004447493188291311	DESIGN
The where clause was added to eliminate this statement from Brute Force Searches.	WITHOUT_CLASSIFICATION	0.9994275948682897	WITHOUT_CLASSIFICATION	5.724051317104222E-4	DESIGN
Sequence methods - end	WITHOUT_CLASSIFICATION	0.9988363891514807	WITHOUT_CLASSIFICATION	0.0011636108485192965	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999968770692844	WITHOUT_CLASSIFICATION	3.122930715600175E-5	DESIGN
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999637864797897	WITHOUT_CLASSIFICATION	3.6213520210300645E-5	DESIGN
We must return a valid RDMS/RSA command from this method to prevent RDMS/RSA from issuing ERROR 400	WITHOUT_CLASSIFICATION	0.9998843613484382	WITHOUT_CLASSIFICATION	1.1563865156179838E-4	DESIGN
Used with DROP TABLE to delete all records in the table.	WITHOUT_CLASSIFICATION	0.9999999554888331	WITHOUT_CLASSIFICATION	4.451116688469574E-8	DESIGN
RDMS supports the UNION ALL clause.	WITHOUT_CLASSIFICATION	0.9999999898134926	WITHOUT_CLASSIFICATION	1.0186507370290892E-8	DESIGN
RDMS has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999905457927041	WITHOUT_CLASSIFICATION	9.454207295834899E-6	DESIGN
Multi-param dialect functions...	WITHOUT_CLASSIFICATION	0.9999947261705449	WITHOUT_CLASSIFICATION	5.273829455115299E-6	DESIGN
function templates	WITHOUT_CLASSIFICATION	0.9999996499224073	WITHOUT_CLASSIFICATION	3.5007759268545603E-7	DESIGN
not null is implicit	WITHOUT_CLASSIFICATION	0.9906477044538925	WITHOUT_CLASSIFICATION	0.009352295546107546	DESIGN
this assumes schema support, which is present in 1.8.0 and later...	WITHOUT_CLASSIFICATION	0.9994364656536034	WITHOUT_CLASSIFICATION	5.63534346396523E-4	DESIGN
HSQLDB only supports READ_UNCOMMITTED transaction isolation	WITHOUT_CLASSIFICATION	0.9999999726446408	WITHOUT_CLASSIFICATION	2.73553592151015E-8	DESIGN
Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999886356330895	WITHOUT_CLASSIFICATION	1.1364366910505066E-5	DESIGN
Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9999770805143556	WITHOUT_CLASSIFICATION	2.2919485644316796E-5	DESIGN
Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999912940851854	WITHOUT_CLASSIFICATION	8.705914814582874E-6	DESIGN
simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999989765237729	WITHOUT_CLASSIFICATION	1.0234762271165486E-6	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999968770692844	WITHOUT_CLASSIFICATION	3.122930715600175E-5	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999968770692844	WITHOUT_CLASSIFICATION	3.122930715600175E-5	DESIGN
not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9948573168614678	WITHOUT_CLASSIFICATION	0.005142683138532207	DESIGN
register the type of the out param - an Oracle specific type	WITHOUT_CLASSIFICATION	0.9999992954230273	WITHOUT_CLASSIFICATION	7.045769726649713E-7	DESIGN
TimesTen has no BLOB/CLOB support, but these types may be suitable for some applications. The length is limited to 4 million bytes.	WITHOUT_CLASSIFICATION	0.9999815247146348	WITHOUT_CLASSIFICATION	1.847528536525889E-5	DESIGN
new methods in dialect3	WITHOUT_CLASSIFICATION	0.9999806202194422	WITHOUT_CLASSIFICATION	1.937978055776957E-5	DESIGN
public boolean supportsForUpdateNowait() {return false;}	WITHOUT_CLASSIFICATION	0.9999999262753356	WITHOUT_CLASSIFICATION	7.372466436177422E-8	DESIGN
TimesTen has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999933731288225	WITHOUT_CLASSIFICATION	6.626871177478807E-6	DESIGN
iterate entries ordered by capacity to find first fit	WITHOUT_CLASSIFICATION	0.9999998964417176	WITHOUT_CLASSIFICATION	1.035582823522115E-7	DESIGN
add new ordered map	WITHOUT_CLASSIFICATION	0.9999996626111006	WITHOUT_CLASSIFICATION	3.3738889933364353E-7	DESIGN
registerColumnType( Types.VARCHAR, 16777215, "mediumtext" );	WITHOUT_CLASSIFICATION	0.9999997747873735	WITHOUT_CLASSIFICATION	2.2521262660227353E-7	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999968770692844	WITHOUT_CLASSIFICATION	3.122930715600175E-5	DESIGN
This assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.9999996439352944	WITHOUT_CLASSIFICATION	3.560647056028936E-7	DESIGN
sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999970406832204	WITHOUT_CLASSIFICATION	2.959316779648243E-6	DESIGN
return "select CURRENT_TIMESTAMP from RDB$DATABASE";	WITHOUT_CLASSIFICATION	0.9999999899553017	WITHOUT_CLASSIFICATION	1.0044698279246154E-8	DESIGN
registerColumnType data types	WITHOUT_CLASSIFICATION	0.9999834465959611	WITHOUT_CLASSIFICATION	1.655340403893447E-5	DESIGN
hibernate seems to ignore this type...	WITHOUT_CLASSIFICATION	0.999977139328984	WITHOUT_CLASSIFICATION	2.2860671016069625E-5	DESIGN
IBID for current_time and current_date	WITHOUT_CLASSIFICATION	0.9999948683092493	WITHOUT_CLASSIFICATION	5.1316907507235026E-6	DESIGN
Tell hibernate to use getBytes instead of getBinaryStream	WITHOUT_CLASSIFICATION	0.9997763327653181	WITHOUT_CLASSIFICATION	2.2366723468183642E-4	DESIGN
No batch statements	WITHOUT_CLASSIFICATION	0.9999991117961488	WITHOUT_CLASSIFICATION	8.88203851240713E-7	DESIGN
We might want a special case for 19,2. This is very common for money types and here it is converted to 18,1	WITHOUT_CLASSIFICATION	0.9222602945491764	WITHOUT_CLASSIFICATION	0.07773970545082362	DESIGN
no pointbase BIT	WITHOUT_CLASSIFICATION	0.9999996593429632	WITHOUT_CLASSIFICATION	3.406570367592342E-7	DESIGN
no pointbase TINYINT	WITHOUT_CLASSIFICATION	0.9999995026998331	WITHOUT_CLASSIFICATION	4.97300166871412E-7	DESIGN
Pointbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999708421287552	WITHOUT_CLASSIFICATION	2.9157871244764734E-5	DESIGN
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999637864797897	WITHOUT_CLASSIFICATION	3.6213520210300645E-5	DESIGN
The current_timestamp is more accurate, but only known to be supported in SQL Server 7.0 and later (i.e., Sybase not known to support it at all)	WITHOUT_CLASSIFICATION	0.9965434493231342	WITHOUT_CLASSIFICATION	0.0034565506768658443	DESIGN
SQL Server (at least up through 2005) does not support defining cascade delete constraints which can circel back to the mutating table	WITHOUT_CLASSIFICATION	0.9999996208947443	WITHOUT_CLASSIFICATION	3.791052557539923E-7	DESIGN
here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9999005854230609	WITHOUT_CLASSIFICATION	9.941457693909095E-5	DESIGN
registerColumnType( Types.BLOB, 16777215, "mediumblob" ); registerColumnType( Types.BLOB, 65535, "blob" );	WITHOUT_CLASSIFICATION	0.9999999779446214	WITHOUT_CLASSIFICATION	2.2055378632255653E-8	DESIGN
registerColumnType( Types.CLOB, 16777215, "mediumtext" ); registerColumnType( Types.CLOB, 65535, "text" );	WITHOUT_CLASSIFICATION	0.9999999916864535	WITHOUT_CLASSIFICATION	8.313546551267291E-9	DESIGN
registerColumnType( Types.VARCHAR, 16777215, "mediumtext" ); registerColumnType( Types.VARCHAR, 65535, "text" );	WITHOUT_CLASSIFICATION	0.9999998079996039	WITHOUT_CLASSIFICATION	1.9200039612825824E-7	DESIGN
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999637864797897	WITHOUT_CLASSIFICATION	3.6213520210300645E-5	DESIGN
package-private	WITHOUT_CLASSIFICATION	0.9999624388639022	WITHOUT_CLASSIFICATION	3.75611360976597E-5	DESIGN
sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999970406832204	WITHOUT_CLASSIFICATION	2.959316779648243E-6	DESIGN
Sybase BIT type does not support null values	WITHOUT_CLASSIFICATION	0.9957897635742501	WITHOUT_CLASSIFICATION	0.0042102364257499735	DESIGN
This assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.9999996439352944	WITHOUT_CLASSIFICATION	3.560647056028936E-7	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999968770692844	WITHOUT_CLASSIFICATION	3.122930715600175E-5	DESIGN
You may still have other ResultSets or update counts left to process here but you can't do it now or the ResultSet you just got will be closed	WITHOUT_CLASSIFICATION	0.9999999974631282	WITHOUT_CLASSIFICATION	2.5368718564530063E-9	DESIGN
not null ... (start with 1) is implicit	WITHOUT_CLASSIFICATION	0.8929878372807477	WITHOUT_CLASSIFICATION	0.10701216271925236	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999968770692844	WITHOUT_CLASSIFICATION	3.122930715600175E-5	DESIGN
Oracle driver reports to support getGeneratedKeys(), but they only support the version taking an array of the names of the columns to be returned (via its RETURNING clause). No other driver seems to support this overloaded version.	WITHOUT_CLASSIFICATION	0.9669826369330006	WITHOUT_CLASSIFICATION	0.03301736306699934	DESIGN
Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999886356330895	WITHOUT_CLASSIFICATION	1.1364366910505066E-5	DESIGN
Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9999770805143556	WITHOUT_CLASSIFICATION	2.2919485644316796E-5	DESIGN
Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999912940851854	WITHOUT_CLASSIFICATION	8.705914814582874E-6	DESIGN
add another (inner) nested select add the main query close off the inner nested select	WITHOUT_CLASSIFICATION	0.9999999956641373	WITHOUT_CLASSIFICATION	4.3358627252546885E-9	DESIGN
add the main query	WITHOUT_CLASSIFICATION	0.9999930713351436	WITHOUT_CLASSIFICATION	6.928664856453567E-6	DESIGN
add the restriction to the outer select	WITHOUT_CLASSIFICATION	0.9999998882133033	WITHOUT_CLASSIFICATION	1.1178669666399609E-7	DESIGN
This assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.9999996439352944	WITHOUT_CLASSIFICATION	3.560647056028936E-7	DESIGN
You may still have other ResultSets or update counts left to process here but you can't do it now or the ResultSet you just got will be closed	WITHOUT_CLASSIFICATION	0.9999999974631282	WITHOUT_CLASSIFICATION	2.5368718564530063E-9	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999968770692844	WITHOUT_CLASSIFICATION	3.122930715600175E-5	DESIGN
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999637864797897	WITHOUT_CLASSIFICATION	3.6213520210300645E-5	DESIGN
simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999989765237729	WITHOUT_CLASSIFICATION	1.0234762271165486E-6	DESIGN
not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9948573168614678	WITHOUT_CLASSIFICATION	0.005142683138532207	DESIGN
register the type of the out param - an Oracle specific type	WITHOUT_CLASSIFICATION	0.9999992954230273	WITHOUT_CLASSIFICATION	7.045769726649713E-7	DESIGN
features which change between 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996883605156898	WITHOUT_CLASSIFICATION	3.116394843102284E-4	DESIGN
features which remain constant across 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998532988145	WITHOUT_CLASSIFICATION	1.4670118560165507E-7	DESIGN
binary %Stream character %Stream	WITHOUT_CLASSIFICATION	0.9999987918403485	WITHOUT_CLASSIFICATION	1.208159651525576E-6	DESIGN
getDefaultProperties().setProperty(Environment.STATEMENT_BATCH_SIZE, NO_BATCH);	WITHOUT_CLASSIFICATION	0.9999999993247357	WITHOUT_CLASSIFICATION	6.752642490836915E-10	DESIGN
hibernate impelemnts cast in Dialect.java	WITHOUT_CLASSIFICATION	0.9999673590301449	WITHOUT_CLASSIFICATION	3.2640969855100235E-5	DESIGN
aggregate functions shouldn't be registered, right? registerFunction( "list", new StandardSQLFunction("list",Hibernate.STRING) ); stopped on $list	WITHOUT_CLASSIFICATION	0.9995897469794066	WITHOUT_CLASSIFICATION	4.102530205934163E-4	DESIGN
DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999407356428184	WITHOUT_CLASSIFICATION	5.926435718157341E-5	DESIGN
below is for Cache' that don't have str in 2007.1 there is str and we register str directly	WITHOUT_CLASSIFICATION	0.9994817811281899	WITHOUT_CLASSIFICATION	5.182188718100412E-4	DESIGN
note that %string is deprecated	WITHOUT_CLASSIFICATION	0.9985992807350472	WITHOUT_CLASSIFICATION	0.001400719264952744	DESIGN
%upper is deprecated	WITHOUT_CLASSIFICATION	0.9998346822616573	WITHOUT_CLASSIFICATION	1.6531773834267877E-4	DESIGN
The syntax used to add a foreign key constraint to a table.	WITHOUT_CLASSIFICATION	0.9999962359949168	WITHOUT_CLASSIFICATION	3.7640050832885255E-6	DESIGN
identifier-commalist	WITHOUT_CLASSIFICATION	0.9999995347624805	WITHOUT_CLASSIFICATION	4.6523751948358763E-7	DESIGN
IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999797027570971	WITHOUT_CLASSIFICATION	2.029724290284621E-5	DESIGN
SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997915376518726	WITHOUT_CLASSIFICATION	2.0846234812740217E-4	DESIGN
temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998905276779602	WITHOUT_CLASSIFICATION	1.0947232203983794E-4	DESIGN
identifier-commalist	WITHOUT_CLASSIFICATION	0.9999995347624805	WITHOUT_CLASSIFICATION	4.6523751948358763E-7	DESIGN
The syntax used to add a column to a table	WITHOUT_CLASSIFICATION	0.9992621206326762	WITHOUT_CLASSIFICATION	7.378793673239155E-4	DESIGN
Completely optional cascading drop clause.	WITHOUT_CLASSIFICATION	0.9999904234924827	WITHOUT_CLASSIFICATION	9.576507517360378E-6	DESIGN
lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999668807598832	WITHOUT_CLASSIFICATION	3.311924011688182E-5	DESIGN
LIMIT support (ala TOP) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999978386666216	WITHOUT_CLASSIFICATION	2.161333378423966E-6	DESIGN
InterSystems Cache' does not current support "SELECT ... FOR UPDATE" syntax... Set your transaction mode to READ_COMMITTED before using	WITHOUT_CLASSIFICATION	0.99994903637203	WITHOUT_CLASSIFICATION	5.096362797001854E-5	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999968770692844	WITHOUT_CLASSIFICATION	3.122930715600175E-5	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999968770692844	WITHOUT_CLASSIFICATION	3.122930715600175E-5	DESIGN
<String>	WITHOUT_CLASSIFICATION	0.9999447054759879	WITHOUT_CLASSIFICATION	5.529452401205302E-5	DESIGN
callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998437773669531	WITHOUT_CLASSIFICATION	1.5622263304694464E-4	DESIGN
miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999808241172058	WITHOUT_CLASSIFICATION	1.9175882794120677E-5	DESIGN
The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999995523332847	WITHOUT_CLASSIFICATION	4.476667152007672E-7	DESIGN
Does the LIMIT clause come at the start of the SELECT statement, rather than at the end?	WITHOUT_CLASSIFICATION	0.9980614724176682	WITHOUT_CLASSIFICATION	0.0019385275823317477	DESIGN
Does the LIMIT clause take a "maximum" row number instead of a total number of returned rows?	WITHOUT_CLASSIFICATION	0.999956074582437	WITHOUT_CLASSIFICATION	4.3925417562958674E-5	DESIGN
The name of the SQL function that transforms a string to lowercase	WITHOUT_CLASSIFICATION	0.999999937378755	WITHOUT_CLASSIFICATION	6.262124493027814E-8	DESIGN
Create an OuterJoinGenerator for this dialect.	WITHOUT_CLASSIFICATION	0.9999969685769182	WITHOUT_CLASSIFICATION	3.031423081726188E-6	DESIGN
The keyword used to insert a row without specifying any column values	WITHOUT_CLASSIFICATION	0.9999994542723943	WITHOUT_CLASSIFICATION	5.457276056449641E-7	DESIGN
registerFunction( "trim", new StandardSQLFunction( "trim", Hibernate.STRING ) );	WITHOUT_CLASSIFICATION	0.9999999998613791	WITHOUT_CLASSIFICATION	1.3862095165814708E-10	DESIGN
skip the FROM keyword in params	WITHOUT_CLASSIFICATION	0.9999647810132941	WITHOUT_CLASSIFICATION	3.521898670596727E-5	DESIGN
package	WITHOUT_CLASSIFICATION	0.9997769428108455	WITHOUT_CLASSIFICATION	2.2305718915444837E-4	DESIGN
potentialTrimCharacterArgIndex = 1 assumes that a trim-specification has been specified. we handle the exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999999506260775	WITHOUT_CLASSIFICATION	4.9373922493574725E-8	DESIGN
SQLFunction implementation	WITHOUT_CLASSIFICATION	0.9999967002276833	WITHOUT_CLASSIFICATION	3.2997723167040895E-6	DESIGN
conceivable that the dialect ctor could throw HibernateExceptions, so don't re-wrap	WITHOUT_CLASSIFICATION	0.9999558904466442	WITHOUT_CLASSIFICATION	4.410955335579404E-5	DESIGN
register the standard dialect resolver	WITHOUT_CLASSIFICATION	0.9999981585930928	WITHOUT_CLASSIFICATION	1.841406907189489E-6	DESIGN
register resolvers set via Environment property	WITHOUT_CLASSIFICATION	0.9999954417860029	WITHOUT_CLASSIFICATION	4.558213997079965E-6	DESIGN
kept for backward compatibility until after the 3.1beta5 release of HA	WITHOUT_CLASSIFICATION	0.9999966262969305	WITHOUT_CLASSIFICATION	3.373703069394633E-6	DESIGN
cache the hashcode	WITHOUT_CLASSIFICATION	0.9998859900410637	WITHOUT_CLASSIFICATION	1.1400995893619996E-4	DESIGN
the CascadingAction contract ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999856360951652	WITHOUT_CLASSIFICATION	1.4363904834710231E-5	DESIGN
the CascadingAction implementations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999892314826929	WITHOUT_CLASSIFICATION	1.0768517307156224E-5	DESIGN
delete does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999989073886152	WITHOUT_CLASSIFICATION	1.0926113847221095E-6	DESIGN
orphans should be deleted during delete	WITHOUT_CLASSIFICATION	0.9996848664801952	WITHOUT_CLASSIFICATION	3.1513351980484456E-4	DESIGN
(LockMode) anything	WITHOUT_CLASSIFICATION	0.9999755818443579	WITHOUT_CLASSIFICATION	2.44181556420799E-5	DESIGN
lock doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999944622590623	WITHOUT_CLASSIFICATION	5.53774093765083E-6	DESIGN
refresh doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999993875386901	WITHOUT_CLASSIFICATION	6.124613099405747E-7	DESIGN
evicts don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999990981037771	WITHOUT_CLASSIFICATION	9.018962229749477E-7	DESIGN
saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999999858342068	WITHOUT_CLASSIFICATION	1.416579326160269E-8	DESIGN
orphans should be deleted during save/update	WITHOUT_CLASSIFICATION	0.9999706669732347	WITHOUT_CLASSIFICATION	2.9333026765363263E-5	DESIGN
for deprecated saveOrUpdateCopy()	WITHOUT_CLASSIFICATION	0.9999886100304214	WITHOUT_CLASSIFICATION	1.1389969578693072E-5	DESIGN
persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999998579963357	WITHOUT_CLASSIFICATION	1.4200366419238353E-7	DESIGN
a proxy cannot be transient and it breaks ForeignKeys.isTransient	WITHOUT_CLASSIFICATION	0.999655467874445	WITHOUT_CLASSIFICATION	3.445321255549688E-4	DESIGN
replicate does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999938180331516	WITHOUT_CLASSIFICATION	6.181966848381462E-6	DESIGN
static helper methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999989675911725	WITHOUT_CLASSIFICATION	1.0324088274986558E-5	DESIGN
handles arrays and newly instantiated collections	WITHOUT_CLASSIFICATION	0.9998763369840438	WITHOUT_CLASSIFICATION	1.2366301595619216E-4	DESIGN
Actually the semantics of the next three are really "Bag" Note that, unlike objects, collection insertions, updates, deletions are not really remembered between flushes. We just re-use the same Lists for convenience.	WITHOUT_CLASSIFICATION	0.9999998363081775	WITHOUT_CLASSIFICATION	1.6369182254837744E-7	DESIGN
Add these directly to the executions queue	WITHOUT_CLASSIFICATION	0.9999875635183603	WITHOUT_CLASSIFICATION	1.2436481639681282E-5	DESIGN
continue loop	WITHOUT_CLASSIFICATION	0.9999957460930571	WITHOUT_CLASSIFICATION	4.253906942845015E-6	DESIGN
sort the updates by fk	WITHOUT_CLASSIFICATION	0.9998392907256306	WITHOUT_CLASSIFICATION	1.607092743693802E-4	DESIGN
sort the updates by pk	WITHOUT_CLASSIFICATION	0.99953395281126	WITHOUT_CLASSIFICATION	4.660471887400438E-4	DESIGN
the mapping of entity names to their latest batch numbers.	WITHOUT_CLASSIFICATION	0.9999995888825596	WITHOUT_CLASSIFICATION	4.111174403671544E-7	DESIGN
the map of batch numbers to EntityInsertAction lists	WITHOUT_CLASSIFICATION	0.9999997779998052	WITHOUT_CLASSIFICATION	2.2200019476290054E-7	DESIGN
optimize the hash size to eliminate a rehash.	WITHOUT_CLASSIFICATION	0.999962330624681	WITHOUT_CLASSIFICATION	3.766937531908903E-5	DESIGN
the list of entity names that indicate the batch number	WITHOUT_CLASSIFICATION	0.9999948134915226	WITHOUT_CLASSIFICATION	5.186508477395238E-6	DESIGN
remove the current element from insertions. It will be added back later.	WITHOUT_CLASSIFICATION	0.9993958688961982	WITHOUT_CLASSIFICATION	6.041311038016909E-4	DESIGN
the entity associated with the current action.	WITHOUT_CLASSIFICATION	0.9976926589441466	WITHOUT_CLASSIFICATION	0.002307341055853326	DESIGN
There is already an existing batch for this type of entity. Check to see if the latest batch is acceptable.	WITHOUT_CLASSIFICATION	0.9999995325421287	WITHOUT_CLASSIFICATION	4.6745787126380337E-7	DESIGN
now rebuild the insertions list. There is a batch for each entry in the name list.	WITHOUT_CLASSIFICATION	0.999999478183042	WITHOUT_CLASSIFICATION	5.218169579687337E-7	DESIGN
the current batch number is the latest batch for this entity type.	WITHOUT_CLASSIFICATION	0.9999976702347134	WITHOUT_CLASSIFICATION	2.3297652866339396E-6	DESIGN
loop through all the associations of the current entity and make sure that they are processed before the current batch number	WITHOUT_CLASSIFICATION	0.9999979573966454	WITHOUT_CLASSIFICATION	2.042603354636497E-6	DESIGN
find the batch number associated with the current association, if any.	WITHOUT_CLASSIFICATION	0.999892827603903	WITHOUT_CLASSIFICATION	1.0717239609698683E-4	DESIGN
create a new batch for this type. The batch number is the number of current batches.	WITHOUT_CLASSIFICATION	0.9999998207837435	WITHOUT_CLASSIFICATION	1.7921625650537107E-7	DESIGN
loop through all the associated entities and make sure they have been processed before the latest batch associated with this entity type.	WITHOUT_CLASSIFICATION	0.9999959071611597	WITHOUT_CLASSIFICATION	4.092838840238576E-6	DESIGN
since this entity will now be processed in the latest possible batch, we can be assured that it will come after all other associations, there's not need to continue checking.	WITHOUT_CLASSIFICATION	0.9732754097073179	WITHOUT_CLASSIFICATION	0.02672459029268211	DESIGN
cascade to current collection elements	WITHOUT_CLASSIFICATION	0.9999963137552881	WITHOUT_CLASSIFICATION	3.6862447119420464E-6	DESIGN
not really necessary, but good for consistency...	WITHOUT_CLASSIFICATION	0.9766921594784574	WITHOUT_CLASSIFICATION	0.023307840521542496	DESIGN
we can't cascade to non-embedded elements	WITHOUT_CLASSIFICATION	0.99999995943088	WITHOUT_CLASSIFICATION	4.0569119900009285E-8	DESIGN
a newly instantiated collection can't have orphans	WITHOUT_CLASSIFICATION	0.9998892635399693	WITHOUT_CLASSIFICATION	1.1073646003066472E-4	DESIGN
handle orphaned entities!!	WITHOUT_CLASSIFICATION	0.9999089632227615	WITHOUT_CLASSIFICATION	9.103677723856862E-5	DESIGN
Loaded entity instances, by EntityUniqueKey	WITHOUT_CLASSIFICATION	0.9999762208200772	WITHOUT_CLASSIFICATION	2.3779179922846743E-5	DESIGN
Identity map of EntityEntry instances, by the entity instance	WITHOUT_CLASSIFICATION	0.9999998824478958	WITHOUT_CLASSIFICATION	1.1755210420400901E-7	DESIGN
Entity proxies, by EntityKey	WITHOUT_CLASSIFICATION	0.9999869716939471	WITHOUT_CLASSIFICATION	1.3028306052795638E-5	DESIGN
Snapshots of current database state for entities that have not been loaded	WITHOUT_CLASSIFICATION	0.9999880281136234	WITHOUT_CLASSIFICATION	1.1971886376630015E-5	DESIGN
Identity map of array holder ArrayHolder instances, by the array instance	WITHOUT_CLASSIFICATION	0.9999956680465911	WITHOUT_CLASSIFICATION	4.331953408822248E-6	DESIGN
Collection wrappers, by the CollectionKey key=CollectionKey, value=PersistentCollection	WITHOUT_CLASSIFICATION	0.9999997949336941	WITHOUT_CLASSIFICATION	2.050663059793843E-7	DESIGN
Set of EntityKeys of deleted objects	WITHOUT_CLASSIFICATION	0.9999875671677774	WITHOUT_CLASSIFICATION	1.2432832222659483E-5	DESIGN
properties that we have tried to load, and not found in the database	WITHOUT_CLASSIFICATION	0.999999851728667	WITHOUT_CLASSIFICATION	1.4827133288659262E-7	DESIGN
A list of collection wrappers that were instantiating during result set processing, that we will need to initialize at the end of the query	WITHOUT_CLASSIFICATION	0.9999996014206534	WITHOUT_CLASSIFICATION	3.9857934670064027E-7	DESIGN
A container for collections we load up when the owning entity is not yet loaded ... for now, this is purely transient!	WITHOUT_CLASSIFICATION	0.8636869035468179	WITHOUT_CLASSIFICATION	0.13631309645318213	DESIGN
Downgrade locks	WITHOUT_CLASSIFICATION	0.9999789656529119	WITHOUT_CLASSIFICATION	2.103434708816972E-5	DESIGN
any earlier proxy takes precedence	WITHOUT_CLASSIFICATION	0.9999906392646891	WITHOUT_CLASSIFICATION	9.360735310790716E-6	DESIGN
unwrap the object	WITHOUT_CLASSIFICATION	0.9999965877204565	WITHOUT_CLASSIFICATION	3.4122795435656477E-6	DESIGN
initialize + unwrap the object	WITHOUT_CLASSIFICATION	0.9999999339207158	WITHOUT_CLASSIFICATION	6.607928415524505E-8	DESIGN
return the proxied object	WITHOUT_CLASSIFICATION	0.9997990246123656	WITHOUT_CLASSIFICATION	2.0097538763445656E-4	DESIGN
overwrite old proxy	WITHOUT_CLASSIFICATION	0.9999977278291072	WITHOUT_CLASSIFICATION	2.2721708927491798E-6	DESIGN
early exit...	WITHOUT_CLASSIFICATION	0.9998533436055606	WITHOUT_CLASSIFICATION	1.4665639443944812E-4	DESIGN
or should it actually throw an exception?	WITHOUT_CLASSIFICATION	0.9373437272287105	WITHOUT_CLASSIFICATION	0.06265627277128957	DESIGN
treat it just like a new collection	WITHOUT_CLASSIFICATION	0.9999954884012018	WITHOUT_CLASSIFICATION	4.511598798166641E-6	DESIGN
do this work only at the very highest level of the load don't let this method be called recursively	WITHOUT_CLASSIFICATION	0.9486602238656392	WITHOUT_CLASSIFICATION	0.05133977613436092	DESIGN
note that each iteration of the loop may add new elements	WITHOUT_CLASSIFICATION	0.9999998209035097	WITHOUT_CLASSIFICATION	1.7909649021764632E-7	DESIGN
it might be an unwrapped collection reference! try to find a wrapper (slowish)	WITHOUT_CLASSIFICATION	0.9951593295230513	WITHOUT_CLASSIFICATION	0.004840670476948683	DESIGN
public boolean isNonExistant(EntityKey key) {return nonExistantEntityKeys.contains(key);}	WITHOUT_CLASSIFICATION	0.9999995031305938	WITHOUT_CLASSIFICATION	4.968694062160393E-7	DESIGN
public boolean isNonExistant(EntityUniqueKey key) {return nonExistentEntityUniqueKeys.contains(key);}	WITHOUT_CLASSIFICATION	0.9999989735659942	WITHOUT_CLASSIFICATION	1.0264340058288912E-6	DESIGN
iterate all the entities currently associated with the persistence context.	WITHOUT_CLASSIFICATION	0.9986886084622428	WITHOUT_CLASSIFICATION	0.0013113915377571742	DESIGN
does this entity entry pertain to the entity persister in which we are interested (owner)?	WITHOUT_CLASSIFICATION	0.9983589662587746	WITHOUT_CLASSIFICATION	0.001641033741225356	DESIGN
check if the managed object is the parent	WITHOUT_CLASSIFICATION	0.9999210073834168	WITHOUT_CLASSIFICATION	7.899261658317745E-5	DESIGN
otherwise, the proxy was pruned during the serialization process	WITHOUT_CLASSIFICATION	0.9999994155388424	WITHOUT_CLASSIFICATION	5.844611574839266E-7	DESIGN
adds remove as a sort-of alias for delete...	WITHOUT_CLASSIFICATION	0.9999997026911523	WITHOUT_CLASSIFICATION	2.973088477231078E-7	DESIGN
bad cast	WITHOUT_CLASSIFICATION	0.9998632269287258	WITHOUT_CLASSIFICATION	1.3677307127431439E-4	DESIGN
return lhsPersister.getSubclassPropertyColumnNames(property);	WITHOUT_CLASSIFICATION	0.9999981422695385	WITHOUT_CLASSIFICATION	1.8577304615333716E-6	DESIGN
property-refs for associations defined on a component are not supported, so no need to slice	WITHOUT_CLASSIFICATION	0.9999998956783164	WITHOUT_CLASSIFICATION	1.0432168365816126E-7	DESIGN
if there is no property-ref, assume the join is to the subclass table (ie. the table of the subclass that the association belongs to)	WITHOUT_CLASSIFICATION	0.9999998615419652	WITHOUT_CLASSIFICATION	1.38458034778948E-7	DESIGN
handle a property-ref	WITHOUT_CLASSIFICATION	0.9999362016202908	WITHOUT_CLASSIFICATION	6.379837970915064E-5	DESIGN
NativeSQLQueryReturn	WITHOUT_CLASSIFICATION	0.9993301554331758	WITHOUT_CLASSIFICATION	6.698445668240523E-4	DESIGN
final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999995843831005	WITHOUT_CLASSIFICATION	4.156168995210403E-7	DESIGN
why is all others non final ?	WITHOUT_CLASSIFICATION	0.9877896771834656	WITHOUT_CLASSIFICATION	0.012210322816534462	DESIGN
this.forceCacheRefresh = forceCacheRefresh;	WITHOUT_CLASSIFICATION	0.999997149061966	WITHOUT_CLASSIFICATION	2.8509380340620577E-6	DESIGN
HELLA IMPORTANT OPTIMIZATION!!!	WITHOUT_CLASSIFICATION	0.999996899201734	WITHOUT_CLASSIFICATION	3.1007982659920005E-6	DESIGN
return that.type.equals(type) && EqualsHelper.equals(that.value, value);	WITHOUT_CLASSIFICATION	0.9999999651586179	WITHOUT_CLASSIFICATION	3.484138207447981E-8	DESIGN
Must occur after resolving identifiers!	WITHOUT_CLASSIFICATION	0.9999885408454824	WITHOUT_CLASSIFICATION	1.1459154517723572E-5	DESIGN
take a snapshot	WITHOUT_CLASSIFICATION	0.9999549889340624	WITHOUT_CLASSIFICATION	4.501106593770256E-5	DESIGN
do a check	WITHOUT_CLASSIFICATION	0.999740654879118	WITHOUT_CLASSIFICATION	2.59345120881942E-4	DESIGN
the owning entity may have been deleted and its identifier unset due to identifier-rollback; in which case, try to look up its identifier from the persistence context	WITHOUT_CLASSIFICATION	0.9999999929895467	WITHOUT_CLASSIFICATION	7.010453293484651E-9	DESIGN
do the work	WITHOUT_CLASSIFICATION	0.999709090865666	WITHOUT_CLASSIFICATION	2.909091343341232E-4	DESIGN
We've been here before	WITHOUT_CLASSIFICATION	0.9998917278775563	WITHOUT_CLASSIFICATION	1.0827212244371186E-4	DESIGN
it is or was referenced _somewhere_	WITHOUT_CLASSIFICATION	0.9999883529059072	WITHOUT_CLASSIFICATION	1.1647094092906781E-5	DESIGN
do the work	WITHOUT_CLASSIFICATION	0.999709090865666	WITHOUT_CLASSIFICATION	2.909091343341232E-4	DESIGN
if either its role changed,	WITHOUT_CLASSIFICATION	0.9999982706146614	WITHOUT_CLASSIFICATION	1.729385338557692E-6	DESIGN
or its key changed	WITHOUT_CLASSIFICATION	0.9999971544687274	WITHOUT_CLASSIFICATION	2.8455312725289323E-6	DESIGN
we will need to create new entries	WITHOUT_CLASSIFICATION	0.9999934958453094	WITHOUT_CLASSIFICATION	6.504154690653775E-6	DESIGN
we will need to remove ye olde entries	WITHOUT_CLASSIFICATION	0.9999953724720603	WITHOUT_CLASSIFICATION	4.6275279397176E-6	DESIGN
force initialize!	WITHOUT_CLASSIFICATION	0.999999871873383	WITHOUT_CLASSIFICATION	1.2812661709392045E-7	DESIGN
else if it's elements changed	WITHOUT_CLASSIFICATION	0.9999995969235167	WITHOUT_CLASSIFICATION	4.030764832608486E-7	DESIGN
ATTRIBUTES MAINTAINED BETWEEN FLUSH CYCLES	WITHOUT_CLASSIFICATION	0.9999829052543314	WITHOUT_CLASSIFICATION	1.7094745668503885E-5	DESIGN
session-start/post-flush persistent state	WITHOUT_CLASSIFICATION	0.9999984604214905	WITHOUT_CLASSIFICATION	1.5395785094114383E-6	DESIGN
allow the CollectionSnapshot to be serialized	WITHOUT_CLASSIFICATION	0.9997017725296554	WITHOUT_CLASSIFICATION	2.98227470344646E-4	DESIGN
ATTRIBUTES USED ONLY DURING FLUSH CYCLE	WITHOUT_CLASSIFICATION	0.9999212050463228	WITHOUT_CLASSIFICATION	7.879495367719974E-5	DESIGN
"current" means the reference that was found during flush()	WITHOUT_CLASSIFICATION	0.9999998930715229	WITHOUT_CLASSIFICATION	1.0692847713670822E-7	DESIGN
"loaded" means the reference that is consistent with the current database state	WITHOUT_CLASSIFICATION	0.9999983330484952	WITHOUT_CLASSIFICATION	1.6669515047654947E-6	DESIGN
during flush, we navigate the object graph to collections and decide what to do with them	WITHOUT_CLASSIFICATION	0.989240835146399	WITHOUT_CLASSIFICATION	0.01075916485360089	DESIGN
if we instantiate a collection during the flush() process, we must ignore it for the rest of the flush()	WITHOUT_CLASSIFICATION	0.9999999756033132	WITHOUT_CLASSIFICATION	2.4396686779635772E-8	DESIGN
new collections that get found + wrapped during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.999998544164481	WITHOUT_CLASSIFICATION	1.4558355190252946E-6	DESIGN
a newly wrapped collection is NOT dirty (or we get unnecessary version updates)	WITHOUT_CLASSIFICATION	0.8907170864512985	WITHOUT_CLASSIFICATION	0.1092829135487014	DESIGN
collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9999535740217574	WITHOUT_CLASSIFICATION	4.6425978242463634E-5	DESIGN
collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9999535740217574	WITHOUT_CLASSIFICATION	4.6425978242463634E-5	DESIGN
detached collections that get found + reattached during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999993027234371	WITHOUT_CLASSIFICATION	6.972765629800455E-7	DESIGN
optimization	WITHOUT_CLASSIFICATION	0.9999975109795427	WITHOUT_CLASSIFICATION	2.4890204573609358E-6	DESIGN
optimization optimization	WITHOUT_CLASSIFICATION	0.9999988589506831	WITHOUT_CLASSIFICATION	1.1410493169734623E-6	DESIGN
re-snapshot	WITHOUT_CLASSIFICATION	0.9999146712785298	WITHOUT_CLASSIFICATION	8.532872147010381E-5	DESIGN
for convenience to save some lookups	WITHOUT_CLASSIFICATION	0.9999992158824119	WITHOUT_CLASSIFICATION	7.841175881553858E-7	DESIGN
NOTE: this is not updated when properties are fetched lazily!	WITHOUT_CLASSIFICATION	0.8578615327144699	WITHOUT_CLASSIFICATION	0.14213846728553015	DESIGN
memory optimization	WITHOUT_CLASSIFICATION	0.9999997430788906	WITHOUT_CLASSIFICATION	2.569211093224731E-7	DESIGN
use the id value of a newly instantiated instance as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999821272057734	WITHOUT_CLASSIFICATION	1.787279422665811E-5	DESIGN
copied from Session:	WITHOUT_CLASSIFICATION	0.999842926447474	WITHOUT_CLASSIFICATION	1.5707355252601326E-4	DESIGN
this should not happen since the DTD prevents it	WITHOUT_CLASSIFICATION	0.9999475514343124	WITHOUT_CLASSIFICATION	5.244856568750197E-5	DESIGN
JoinProcessor needs to know if the where clause fragment came from a dynamic filter or not so it can put the where clause fragment in the right place in the SQL AST. 'hasFilterCondition' keeps track of that fact.	WITHOUT_CLASSIFICATION	0.9996674506613834	WITHOUT_CLASSIFICATION	3.3254933861665454E-4	DESIGN
the current join represents the join between a many-to-many association table and its "target" table. Here we need to apply any additional filters defined specifically on the many-to-many	WITHOUT_CLASSIFICATION	0.9999998122343096	WITHOUT_CLASSIFICATION	1.8776569039223348E-7	DESIGN
check basic level one nullablilty	WITHOUT_CLASSIFICATION	0.9999957915013289	WITHOUT_CLASSIFICATION	4.208498671011947E-6	DESIGN
values is not null and is checkable, we'll look deeper	WITHOUT_CLASSIFICATION	0.9992765850087266	WITHOUT_CLASSIFICATION	7.234149912733882E-4	DESIGN
for non null args, check for components and elements containing components	WITHOUT_CLASSIFICATION	0.9999881183807605	WITHOUT_CLASSIFICATION	1.1881619239445217E-5	DESIGN
cache the hashcode	WITHOUT_CLASSIFICATION	0.9998859900410637	WITHOUT_CLASSIFICATION	1.1400995893619996E-4	DESIGN
persistent collections may have components	WITHOUT_CLASSIFICATION	0.9999991650472705	WITHOUT_CLASSIFICATION	8.349527294864352E-7	DESIGN
check for all components values in the collection	WITHOUT_CLASSIFICATION	0.9999999277575622	WITHOUT_CLASSIFICATION	7.224243781676813E-8	DESIGN
will check current level if some of them are not null or sublevels if they exist	WITHOUT_CLASSIFICATION	0.9999987733684532	WITHOUT_CLASSIFICATION	1.226631546761199E-6	DESIGN
do the test	WITHOUT_CLASSIFICATION	0.9999984823086226	WITHOUT_CLASSIFICATION	1.5176913773491161E-6	DESIGN
if its an uninitialized proxy it can't be transient	WITHOUT_CLASSIFICATION	0.9999980673280939	WITHOUT_CLASSIFICATION	1.932671906106008E-6	DESIGN
unwrap it	WITHOUT_CLASSIFICATION	0.9999950829312004	WITHOUT_CLASSIFICATION	4.917068799563321E-6	DESIGN
See if the entity is already bound to this session, if not look at the entity identifier and assume that the entity is persistent if the id is not "unsaved" (that is, we rely on foreign keys to keep database integrity)	WITHOUT_CLASSIFICATION	0.9985455273095477	WITHOUT_CLASSIFICATION	0.0014544726904522672	DESIGN
an unfetched association can only point to an entity that already exists in the db	WITHOUT_CLASSIFICATION	0.9999969304967801	WITHOUT_CLASSIFICATION	3.0695032198619606E-6	DESIGN
let the interceptor inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999991950856313	WITHOUT_CLASSIFICATION	8.049143687418075E-7	DESIGN
let the persister inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999794200223248	WITHOUT_CLASSIFICATION	2.0579977675339728E-5	DESIGN
we use the assumed value, if there is one, to avoid hitting the database	WITHOUT_CLASSIFICATION	0.9999994429828493	WITHOUT_CLASSIFICATION	5.570171507701886E-7	DESIGN
hit the database, after checking the session cache for a snapshot	WITHOUT_CLASSIFICATION	0.6378773875899162	WITHOUT_CLASSIFICATION	0.3621226124100838	DESIGN
context-entity-identifier returns null explicitly if the entity is not associated with the persistence context; so make some deeper checks...	WITHOUT_CLASSIFICATION	0.9999941187225491	WITHOUT_CLASSIFICATION	5.881277450997787E-6	DESIGN
int count = 0;	WITHOUT_CLASSIFICATION	0.9999965386750075	WITHOUT_CLASSIFICATION	3.4613249924866817E-6	DESIGN
the first key found after the given key	WITHOUT_CLASSIFICATION	0.9999994222116901	WITHOUT_CLASSIFICATION	5.77788309874804E-7	DESIGN
checkForEnd = false;	WITHOUT_CLASSIFICATION	0.9999998213450112	WITHOUT_CLASSIFICATION	1.7865498889279678E-7	DESIGN
count++;	WITHOUT_CLASSIFICATION	0.9999267774546052	WITHOUT_CLASSIFICATION	7.322254539474582E-5	DESIGN
end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999983050587513	WITHOUT_CLASSIFICATION	1.6949412487185128E-6	DESIGN
we ran out of keys to try	WITHOUT_CLASSIFICATION	0.9999301743131483	WITHOUT_CLASSIFICATION	6.982568685171209E-5	DESIGN
first element of array is reserved for the actual instance we are loading!	WITHOUT_CLASSIFICATION	0.9999996252945225	WITHOUT_CLASSIFICATION	3.747054775040586E-7	DESIGN
the first id found after the given id	WITHOUT_CLASSIFICATION	0.9999998266950711	WITHOUT_CLASSIFICATION	1.7330492887092063E-7	DESIGN
we ran out of ids to try	WITHOUT_CLASSIFICATION	0.9998833379886175	WITHOUT_CLASSIFICATION	1.166620113824513E-4	DESIGN
look for existing collection as part of the persistence context	WITHOUT_CLASSIFICATION	0.9999999978249227	WITHOUT_CLASSIFICATION	2.175077306688229E-9	DESIGN
ignore this row of results! Note the early exit	WITHOUT_CLASSIFICATION	0.9999873766260988	WITHOUT_CLASSIFICATION	1.2623373901180428E-5	DESIGN
initialize this collection	WITHOUT_CLASSIFICATION	0.999922714455452	WITHOUT_CLASSIFICATION	7.728554454792162E-5	DESIGN
create one	WITHOUT_CLASSIFICATION	0.9999880253018565	WITHOUT_CLASSIFICATION	1.1974698143434249E-5	DESIGN
warning: can cause a recursive calls! (proxy initialization)	WITHOUT_CLASSIFICATION	0.9999990538706848	WITHOUT_CLASSIFICATION	9.461293152025804E-7	DESIGN
there were no queued additions and the role has a cache	WITHOUT_CLASSIFICATION	0.999971126017172	WITHOUT_CLASSIFICATION	2.887398282800467E-5	DESIGN
and this is not a forced initialization during flush	WITHOUT_CLASSIFICATION	0.999999284228676	WITHOUT_CLASSIFICATION	7.157713239200321E-7	DESIGN
some filters affecting the collection are enabled on the session, so do not do the put into the cache.	WITHOUT_CLASSIFICATION	0.9999971160670055	WITHOUT_CLASSIFICATION	2.883932994634771E-6	DESIGN
cleanup code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993610931878529	WITHOUT_CLASSIFICATION	6.389068121470894E-4	DESIGN
loading collection xrefs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998263039162	WITHOUT_CLASSIFICATION	1.7369608379075765E-7	DESIGN
Collection load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999937316489732	WITHOUT_CLASSIFICATION	6.268351026863459E-6	DESIGN
simple cache of param metadata based on query string. Ideally, the original "user-supplied query" string should be used to retreive this metadata (i.e., not the para-list-expanded query string) to avoid unnecessary cache entries. Used solely for caching param metadata for native-sql queries, see getSQLParameterMetadata() for a discussion as to why...	WITHOUT_CLASSIFICATION	0.9009976511649551	WITHOUT_CLASSIFICATION	0.0990023488350448	DESIGN
the cache of the actual plans...	WITHOUT_CLASSIFICATION	0.9999977848968072	WITHOUT_CLASSIFICATION	2.215103192863431E-6	DESIGN
package	WITHOUT_CLASSIFICATION	0.9997769428108455	WITHOUT_CLASSIFICATION	2.2305718915444837E-4	DESIGN
package	WITHOUT_CLASSIFICATION	0.9997769428108455	WITHOUT_CLASSIFICATION	2.2305718915444837E-4	DESIGN
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999999397940396	WITHOUT_CLASSIFICATION	6.020596049596764E-8	DESIGN
for native-sql queries, the param metadata is determined outside any relation to a query plan, because query plan creation and/or retreival for a native-sql query depends on all of the return types having been set, which might not be the case up-front when param metadata would be most useful	WITHOUT_CLASSIFICATION	0.7508105614939365	WITHOUT_CLASSIFICATION	0.24918943850606334	DESIGN
don't care...	WITHOUT_CLASSIFICATION	0.9997617757823684	WITHOUT_CLASSIFICATION	2.3822421763150382E-4	DESIGN
Recognition code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999662368869049	WITHOUT_CLASSIFICATION	3.376311309504409E-5	DESIGN
don't care...	WITHOUT_CLASSIFICATION	0.9997617757823684	WITHOUT_CLASSIFICATION	2.3822421763150382E-4	DESIGN
NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9998949289526609	WITHOUT_CLASSIFICATION	1.0507104733911662E-4	DESIGN
break the outer loop !!!	WITHOUT_CLASSIFICATION	0.9993437683655298	WITHOUT_CLASSIFICATION	6.562316344700936E-4	DESIGN
named parameter	WITHOUT_CLASSIFICATION	0.9999823209292744	WITHOUT_CLASSIFICATION	1.7679070725585193E-5	DESIGN
could be either an ordinal or JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9998115454011126	WITHOUT_CLASSIFICATION	1.8845459888731247E-4	DESIGN
a peek ahead showed this as an JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999988087271059	WITHOUT_CLASSIFICATION	1.1912728940805806E-6	DESIGN
make sure this "name" is an integral	WITHOUT_CLASSIFICATION	0.9999989420931606	WITHOUT_CLASSIFICATION	1.057906839419592E-6	DESIGN
pre-determine and cache the hashcode	WITHOUT_CLASSIFICATION	0.9998994190276788	WITHOUT_CLASSIFICATION	1.0058097232131414E-4	DESIGN
perform the actual work	WITHOUT_CLASSIFICATION	0.9999973681017431	WITHOUT_CLASSIFICATION	2.6318982568279664E-6	DESIGN
if everything went ok, commit the transaction and close the obtained connection handle...	WITHOUT_CLASSIFICATION	0.9999967883167423	WITHOUT_CLASSIFICATION	3.2116832576652235E-6	DESIGN
at some point the processing went bad, so we need to: 1) make sure the connection handle gets released 2) try to cleanup the JTA context as much as possible	WITHOUT_CLASSIFICATION	0.9990251243886193	WITHOUT_CLASSIFICATION	9.748756113807631E-4	DESIGN
finally handle the exception	WITHOUT_CLASSIFICATION	0.999796459221933	WITHOUT_CLASSIFICATION	2.0354077806688273E-4	DESIGN
a "detached" collection that belonged to a different entity	WITHOUT_CLASSIFICATION	0.9996586239282393	WITHOUT_CLASSIFICATION	3.413760717606319E-4	DESIGN
saveOrUpdateCopy() is deprecated!	WITHOUT_CLASSIFICATION	0.9999984007803494	WITHOUT_CLASSIFICATION	1.5992196506060146E-6	DESIGN
collectionPersister should not be null, but we don't want to throw an exception if it is null	WITHOUT_CLASSIFICATION	0.9964896681730051	WITHOUT_CLASSIFICATION	0.0035103318269948543	DESIGN
otherwise a null or brand new collection this will also (inefficiently) handle arrays, which have no snapshot, so we can't do any better processArrayOrNewCollection(collection, type);	WITHOUT_CLASSIFICATION	0.9858769919701029	WITHOUT_CLASSIFICATION	0.014123008029897124	DESIGN
a "detached" collection that originally belonged to the same entity	WITHOUT_CLASSIFICATION	0.9997320407777777	WITHOUT_CLASSIFICATION	2.6795922222232655E-4	DESIGN
do nothing	WITHOUT_CLASSIFICATION	0.9999942124151083	WITHOUT_CLASSIFICATION	5.7875848916610455E-6	DESIGN
do nothing	WITHOUT_CLASSIFICATION	0.9999942124151083	WITHOUT_CLASSIFICATION	5.7875848916610455E-6	DESIGN
Force a substitution!	WITHOUT_CLASSIFICATION	0.9999107640283135	WITHOUT_CLASSIFICATION	8.923597168658241E-5	DESIGN
The user requested a "greater" (i.e. more restrictive) form of pessimistic lock	WITHOUT_CLASSIFICATION	0.9999996878499209	WITHOUT_CLASSIFICATION	3.121500792117913E-7	DESIGN
the database now holds a lock + the object is flushed from the cache, so release the soft lock	WITHOUT_CLASSIFICATION	0.9999962991259823	WITHOUT_CLASSIFICATION	3.700874017744098E-6	DESIGN
now update the object .. has to be outside the main if block above (because of collections)	WITHOUT_CLASSIFICATION	0.9999981179164378	WITHOUT_CLASSIFICATION	1.8820835623112323E-6	DESIGN
Search for collections by reachability, updating their role. We don't want to touch collections reachable from a deleted object	WITHOUT_CLASSIFICATION	0.9959320222304067	WITHOUT_CLASSIFICATION	0.004067977769593301	DESIGN
this is a situation where the entity id is assigned by a post-insert generator and was saved outside the transaction forcing it to be delayed	WITHOUT_CLASSIFICATION	0.9999829500883457	WITHOUT_CLASSIFICATION	1.7049911654363636E-5	DESIGN
NOTE: we need to do the wrap here even if its not "dirty", because collections need wrapping but changes to _them_ don't dirty the container. Also, for versioned data, we need to wrap before calling searchForDirtyCollections	WITHOUT_CLASSIFICATION	0.9999095355411417	WITHOUT_CLASSIFICATION	9.046445885831173E-5	DESIGN
grab its state saved at deletion	WITHOUT_CLASSIFICATION	0.9999933370454265	WITHOUT_CLASSIFICATION	6.662954573508577E-6	DESIGN
grab its current state	WITHOUT_CLASSIFICATION	0.9999950097148281	WITHOUT_CLASSIFICATION	4.990285171884675E-6	DESIGN
schedule the update note that we intentionally do _not_ pass in currentPersistentState!	WITHOUT_CLASSIFICATION	0.999999998788159	WITHOUT_CLASSIFICATION	1.2118409621029398E-9	DESIGN
substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999980303995107	WITHOUT_CLASSIFICATION	1.969600489185448E-6	DESIGN
give the Interceptor a chance to process property values, if the properties were modified by the Interceptor, we need to set them back to the object	WITHOUT_CLASSIFICATION	0.9999827781591963	WITHOUT_CLASSIFICATION	1.722184080369753E-5	DESIGN
compare to cached state (ignoring collections unless versioned)	WITHOUT_CLASSIFICATION	0.9999999145025495	WITHOUT_CLASSIFICATION	8.549745050896446E-8	DESIGN
if it was dirtied by a collection only	WITHOUT_CLASSIFICATION	0.9999985464200881	WITHOUT_CLASSIFICATION	1.4535799119519253E-6	DESIGN
increment the version number (if necessary)	WITHOUT_CLASSIFICATION	0.9982527232664897	WITHOUT_CLASSIFICATION	0.0017472767335102754	DESIGN
check nullability but do not perform command execute we'll use scheduled updates for that.	WITHOUT_CLASSIFICATION	0.9999911926226464	WITHOUT_CLASSIFICATION	8.807377353704831E-6	DESIGN
give the Interceptor a chance to modify property values	WITHOUT_CLASSIFICATION	0.9998111081627897	WITHOUT_CLASSIFICATION	1.8889183721026835E-4	DESIGN
now we might need to recalculate the dirtyProperties array	WITHOUT_CLASSIFICATION	0.9904033078256365	WITHOUT_CLASSIFICATION	0.009596692174363666	DESIGN
use the current version	WITHOUT_CLASSIFICATION	0.9999563275637233	WITHOUT_CLASSIFICATION	4.3672436276640456E-5	DESIGN
Interceptor returned null, so do the dirtycheck ourself, if possible	WITHOUT_CLASSIFICATION	0.9999992162679097	WITHOUT_CLASSIFICATION	7.837320902158357E-7	DESIGN
object loaded by update()	WITHOUT_CLASSIFICATION	0.9999956381341069	WITHOUT_CLASSIFICATION	4.361865893086438E-6	DESIGN
dirty check against the usual snapshot of the entity	WITHOUT_CLASSIFICATION	0.9999983168330465	WITHOUT_CLASSIFICATION	1.6831669533549571E-6	DESIGN
dirty check against the database snapshot, if possible/necessary	WITHOUT_CLASSIFICATION	0.9997090817373905	WITHOUT_CLASSIFICATION	2.9091826260956054E-4	DESIGN
the Interceptor handled the dirty checking	WITHOUT_CLASSIFICATION	0.9985539782450321	WITHOUT_CLASSIFICATION	0.0014460217549679313	DESIGN
even process null collections	WITHOUT_CLASSIFICATION	0.9999944916839106	WITHOUT_CLASSIFICATION	5.508316089377794E-6	DESIGN
get the id from the object	WITHOUT_CLASSIFICATION	0.9999957944085793	WITHOUT_CLASSIFICATION	4.205591420610301E-6	DESIGN
always do an INSERT, and let it fail by constraint violation	WITHOUT_CLASSIFICATION	0.9999999811154779	WITHOUT_CLASSIFICATION	1.8884522086054097E-8	DESIGN
what is the version on the database?	WITHOUT_CLASSIFICATION	0.9943787417684987	WITHOUT_CLASSIFICATION	0.00562125823150124	DESIGN
/ HHH-2378	WITHOUT_CLASSIFICATION	0.9999956283910867	WITHOUT_CLASSIFICATION	4.3716089134129635E-6	DESIGN
will result in a SQL UPDATE:	WITHOUT_CLASSIFICATION	0.9999884143180008	WITHOUT_CLASSIFICATION	1.1585681999161714E-5	DESIGN
else do nothing (don't even reassociate object!)	WITHOUT_CLASSIFICATION	0.9999681615630256	WITHOUT_CLASSIFICATION	3.183843697432776E-5	DESIGN
no existing row - do an insert	WITHOUT_CLASSIFICATION	0.999978435033937	WITHOUT_CLASSIFICATION	2.156496606295021E-5	DESIGN
refresh() does not pass an entityName	WITHOUT_CLASSIFICATION	0.9999933029060865	WITHOUT_CLASSIFICATION	6.6970939136140075E-6	DESIGN
do not return a proxy! (this option indicates we are initializing a proxy)	WITHOUT_CLASSIFICATION	0.9998462649395431	WITHOUT_CLASSIFICATION	1.5373506045696336E-4	DESIGN
return a proxy if appropriate	WITHOUT_CLASSIFICATION	0.9993361448725797	WITHOUT_CLASSIFICATION	6.638551274202527E-4	DESIGN
return existing object or initialized proxy (unless deleted)	WITHOUT_CLASSIFICATION	0.9999999660434435	WITHOUT_CLASSIFICATION	3.395655643028909E-8	DESIGN
return new uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999984164820346	WITHOUT_CLASSIFICATION	1.5835179655295987E-6	DESIGN
this object was already loaded	WITHOUT_CLASSIFICATION	0.986668051226683	WITHOUT_CLASSIFICATION	0.01333194877331706	DESIGN
Entity was found in second-level cache...	WITHOUT_CLASSIFICATION	0.9985394431901217	WITHOUT_CLASSIFICATION	0.0014605568098783122	DESIGN
make it circular-reference safe	WITHOUT_CLASSIFICATION	0.99999994593983	WITHOUT_CLASSIFICATION	5.4060170046558665E-8	DESIGN
intializes result by side-effect	WITHOUT_CLASSIFICATION	0.9999998994358019	WITHOUT_CLASSIFICATION	1.005641980955994E-7	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Pre-flushing section ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999976557338895	WITHOUT_CLASSIFICATION	2.3442661104011246E-6	DESIGN
some statistics	WITHOUT_CLASSIFICATION	0.9999813194011963	WITHOUT_CLASSIFICATION	1.8680598803692443E-5	DESIGN
safe from concurrent modification because of how entryList() is implemented on IdentityMap	WITHOUT_CLASSIFICATION	0.9999455499819484	WITHOUT_CLASSIFICATION	5.445001805156964E-5	DESIGN
Initialize dirty flags for arrays + collections with composite elements and reset reached, doupdate, etc.	WITHOUT_CLASSIFICATION	0.999999999211817	WITHOUT_CLASSIFICATION	7.88182931849366E-10	DESIGN
Among other things, updateReachables() will recursively load all collections that are moving roles. This might cause entities to be loaded.	WITHOUT_CLASSIFICATION	0.999916921939013	WITHOUT_CLASSIFICATION	8.307806098702364E-5	DESIGN
So this needs to be safe from concurrent modification problems. It is safe because of how IdentityMap implements entrySet()	WITHOUT_CLASSIFICATION	0.9964527551238908	DESIGN	0.0035472448761092457	WITHOUT_CLASSIFICATION
Update the status of the object and if necessary, schedule an update	WITHOUT_CLASSIFICATION	0.9999864609830188	WITHOUT_CLASSIFICATION	1.353901698114864E-5	DESIGN
Schedule updates to collections:	WITHOUT_CLASSIFICATION	0.9999997252359323	WITHOUT_CLASSIFICATION	2.747640677675055E-7	DESIGN
we need to lock the collection caches before executing entity inserts/updates in order to account for bidi associations	WITHOUT_CLASSIFICATION	0.9991878890720094	WITHOUT_CLASSIFICATION	8.121109279907078E-4	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Post-flushing section ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999987130149064	WITHOUT_CLASSIFICATION	1.2869850935659224E-6	DESIGN
the database has changed now, so the subselect results need to be invalidated	WITHOUT_CLASSIFICATION	0.9999997715194879	WITHOUT_CLASSIFICATION	2.2848051206047304E-7	DESIGN
if the collection is dereferenced, remove from the session cache iter.remove(); does not work, since the entrySet is not backed by the set	WITHOUT_CLASSIFICATION	0.9999999892129825	WITHOUT_CLASSIFICATION	1.078701748876076E-8	DESIGN
otherwise recreate the mapping between the collection and its key	WITHOUT_CLASSIFICATION	0.9999568304779187	WITHOUT_CLASSIFICATION	4.316952208127568E-5	DESIGN
get a snapshot	WITHOUT_CLASSIFICATION	0.9999794879856742	WITHOUT_CLASSIFICATION	2.0512014325795283E-5	DESIGN
package-private	WITHOUT_CLASSIFICATION	0.9999624388639022	WITHOUT_CLASSIFICATION	3.75611360976597E-5	DESIGN
package-private	WITHOUT_CLASSIFICATION	0.9999624388639022	WITHOUT_CLASSIFICATION	3.75611360976597E-5	DESIGN
key is an entity involved with the operation performed by the listener; value is a flag indicating if the listener explicitly operates on the entity	WITHOUT_CLASSIFICATION	0.9999999924785962	WITHOUT_CLASSIFICATION	7.521403795443596E-9	DESIGN
EARLY EXIT!!!	WITHOUT_CLASSIFICATION	0.9999801520776334	WITHOUT_CLASSIFICATION	1.984792236660038E-5	DESIGN
ie. the entity came in from update()	WITHOUT_CLASSIFICATION	0.9999328307980142	WITHOUT_CLASSIFICATION	6.7169201985815E-5	DESIGN
before any callbacks, etc, so subdeletions see that this deletion happened first	WITHOUT_CLASSIFICATION	0.9999991194027019	WITHOUT_CLASSIFICATION	8.805972981105415E-7	DESIGN
Ensures that containing deletions happen before sub-deletions	WITHOUT_CLASSIFICATION	0.9999999909630501	WITHOUT_CLASSIFICATION	9.03694984673047E-9	DESIGN
TypeFactory.deepCopy( currentState, propTypes, persister.getPropertyUpdateability(), deletedState, session );	WITHOUT_CLASSIFICATION	0.9999999777497042	WITHOUT_CLASSIFICATION	2.2250295813902506E-8	DESIGN
cascade-delete to collections BEFORE the collection owner is deleted	WITHOUT_CLASSIFICATION	0.9999995613232389	WITHOUT_CLASSIFICATION	4.386767610801428E-7	DESIGN
cascade-delete to many-to-one AFTER the parent was deleted	WITHOUT_CLASSIFICATION	0.99996409816202	WITHOUT_CLASSIFICATION	3.590183797995753E-5	DESIGN
if it is an initialized proxy, let cascade handle it later on	WITHOUT_CLASSIFICATION	0.9999930343739526	WITHOUT_CLASSIFICATION	6.965626047391616E-6	DESIGN
assign the requested id to the proxy, before reassociating the proxy	WITHOUT_CLASSIFICATION	0.9999395035865205	WITHOUT_CLASSIFICATION	6.049641347947346E-5	DESIGN
an uninitialized proxy, noop, don't even need to return an id, since it is never a save()	WITHOUT_CLASSIFICATION	0.9999999730522263	WITHOUT_CLASSIFICATION	2.6947773656246996E-8	DESIGN
initialize properties of the event:	WITHOUT_CLASSIFICATION	0.9999996936638846	WITHOUT_CLASSIFICATION	3.063361152821053E-7	DESIGN
return the id in the event object	WITHOUT_CLASSIFICATION	0.9999489589251044	WITHOUT_CLASSIFICATION	5.1041074895663606E-5	DESIGN
TRANSIENT or DELETED	WITHOUT_CLASSIFICATION	0.9999996848763218	WITHOUT_CLASSIFICATION	3.1512367810594517E-7	DESIGN
use the id assigned to the instance	WITHOUT_CLASSIFICATION	0.9999952348728949	WITHOUT_CLASSIFICATION	4.7651271051505125E-6	DESIGN
assume this is a newly instantiated transient object which should be saved rather than updated	WITHOUT_CLASSIFICATION	0.9677002913712398	DESIGN	0.03229970862876025	WITHOUT_CLASSIFICATION
this is a transient object with existing persistent state not loaded by the session	WITHOUT_CLASSIFICATION	0.9998254075943641	WITHOUT_CLASSIFICATION	1.7459240563590537E-4	DESIGN
a collection loaded in the current session can not possibly be the collection belonging to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999986666914601	WITHOUT_CLASSIFICATION	1.3333085399878644E-6	DESIGN
cachedState,	WITHOUT_CLASSIFICATION	0.999978985254187	WITHOUT_CLASSIFICATION	2.1014745813038507E-5	DESIGN
assume true, since we don't really know, and it doesn't matter	WITHOUT_CLASSIFICATION	0.9999922201250241	WITHOUT_CLASSIFICATION	7.77987497587563E-6	DESIGN
a "detached" collection!	WITHOUT_CLASSIFICATION	0.9999325631807087	WITHOUT_CLASSIFICATION	6.74368192912908E-5	DESIGN
if the collection belonged to a different entity, clean up the existing state of the collection	WITHOUT_CLASSIFICATION	0.9999850504038448	WITHOUT_CLASSIFICATION	1.4949596155276608E-5	DESIGN
log.debug( "calling onLoad()" );	WITHOUT_CLASSIFICATION	0.9999999410324574	WITHOUT_CLASSIFICATION	5.8967542639862574E-8	DESIGN
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999954228893111	WITHOUT_CLASSIFICATION	4.577110688832025E-6	DESIGN
note: performExecutions() clears all collectionXxxxtion collections (the collection actions) in the session	WITHOUT_CLASSIFICATION	0.9997336036803903	WITHOUT_CLASSIFICATION	2.663963196097137E-4	DESIGN
if no array holder we found an unwrappered array (this can't occur, because we now always call wrap() before getting to here) return (ah==null) ? true : searchForDirtyCollections(ah, type);	WITHOUT_CLASSIFICATION	0.9999936667426464	WITHOUT_CLASSIFICATION	6.333257353658067E-6	DESIGN
if not wrappered yet, its dirty (this can't occur, because we now always call wrap() before getting to here) return ( ! (obj instanceof PersistentCollection) ) ? true : searchForDirtyCollections( (PersistentCollection) obj, type );	WITHOUT_CLASSIFICATION	0.5705748263298441	DESIGN	0.42942517367015587	WITHOUT_CLASSIFICATION
we need to check even if it was not initialized, because of delayed adds!	WITHOUT_CLASSIFICATION	0.9999912890262938	WITHOUT_CLASSIFICATION	8.710973706310649E-6	DESIGN
NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999560601406601	WITHOUT_CLASSIFICATION	4.393985933984078E-5	DESIGN
find any entities that are still transient after retry	WITHOUT_CLASSIFICATION	0.9999219890163887	WITHOUT_CLASSIFICATION	7.801098361121564E-5	DESIGN
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999954228893111	WITHOUT_CLASSIFICATION	4.577110688832025E-6	DESIGN
Check the persistence context for an entry relating to this entity to be merged...	WITHOUT_CLASSIFICATION	0.9997459846159417	WITHOUT_CLASSIFICATION	2.540153840583763E-4	DESIGN
we have specialized case of a detached entity from the perspective of the merge operation. Specifically, we have an incoming entity instance which has a corresponding entry in the current persistence context, but registered under a different entity instance	WITHOUT_CLASSIFICATION	0.999388355837776	WITHOUT_CLASSIFICATION	6.116441622240747E-4	DESIGN
DELETED	WITHOUT_CLASSIFICATION	0.99997639141722	WITHOUT_CLASSIFICATION	2.360858278009027E-5	DESIGN
before cascade!	WITHOUT_CLASSIFICATION	0.9999846181513155	WITHOUT_CLASSIFICATION	1.538184868459935E-5	DESIGN
cascade first, so that all unsaved objects get their copy created before we actually copy cascadeOnMerge(event, persister, entity, copyCache, Cascades.CASCADE_BEFORE_MERGE);	WITHOUT_CLASSIFICATION	0.9999997665322392	WITHOUT_CLASSIFICATION	2.3346776068519977E-7	DESIGN
this bit is only really absolutely necessary for handling requestedId, but is also good if we merge multiple object graphs, since it helps ensure uniqueness	WITHOUT_CLASSIFICATION	0.7088476396373565	DESIGN	0.29115236036264347	WITHOUT_CLASSIFICATION
continue...; we'll find out if it ends up not getting saved later	WITHOUT_CLASSIFICATION	0.9969901902360024	WITHOUT_CLASSIFICATION	0.0030098097639974937	DESIGN
cascade first, so that all unsaved objects get their copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999793900428963	WITHOUT_CLASSIFICATION	2.0609957103845463E-5	DESIGN
check that entity id = requestedId	WITHOUT_CLASSIFICATION	0.9999879401405384	WITHOUT_CLASSIFICATION	1.2059859461657873E-5	DESIGN
before cascade!	WITHOUT_CLASSIFICATION	0.9999846181513155	WITHOUT_CLASSIFICATION	1.538184868459935E-5	DESIGN
we got here because we assumed that an instance with an assigned id was detached, when it was really persistent	WITHOUT_CLASSIFICATION	0.9999987513156263	WITHOUT_CLASSIFICATION	1.2486843736663153E-6	DESIGN
cascade first, so that all unsaved objects get their copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999793900428963	WITHOUT_CLASSIFICATION	2.0609957103845463E-5	DESIGN
copyValues works by reflection, so explicitly mark the entity instance dirty	WITHOUT_CLASSIFICATION	0.9996789603720945	WITHOUT_CLASSIFICATION	3.21039627905496E-4	DESIGN
EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999947900044586	WITHOUT_CLASSIFICATION	5.209995541432376E-6	DESIGN
source.getBatcher().executeBatch(); found another way to ensure that all batched joined inserts have been executed	WITHOUT_CLASSIFICATION	0.9999999121426446	WITHOUT_CLASSIFICATION	8.785735528076429E-8	DESIGN
substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999980303995107	WITHOUT_CLASSIFICATION	1.969600489185448E-6	DESIGN
now done in EntityIdentityInsertAction persister.setIdentifier( entity, id, source.getEntityMode() );	WITHOUT_CLASSIFICATION	0.9999998779282594	WITHOUT_CLASSIFICATION	1.220717406447106E-7	DESIGN
source.getPersistenceContext().removeNonExist( new EntityKey( id, persister, source.getEntityMode() ) );	WITHOUT_CLASSIFICATION	0.9999995628376417	WITHOUT_CLASSIFICATION	4.3716235831428814E-7	DESIGN
keep the existing version number in the case of replicate!	WITHOUT_CLASSIFICATION	0.9999929831204336	WITHOUT_CLASSIFICATION	7.016879566357812E-6	DESIGN
cascade-save to many-to-one BEFORE the parent is saved	WITHOUT_CLASSIFICATION	0.9979406607237926	WITHOUT_CLASSIFICATION	0.002059339276207275	DESIGN
pass this as an argument only to avoid double looking	WITHOUT_CLASSIFICATION	0.9999998979101468	WITHOUT_CLASSIFICATION	1.0208985333733925E-7	DESIGN
the object is persistent	WITHOUT_CLASSIFICATION	0.9998840835342195	WITHOUT_CLASSIFICATION	1.1591646578048964E-4	DESIGN
the entity is associated with the session, so check its status	WITHOUT_CLASSIFICATION	0.9998800704890423	WITHOUT_CLASSIFICATION	1.1992951095776115E-4	DESIGN
do nothing for persistent instances	WITHOUT_CLASSIFICATION	0.9999993005055687	WITHOUT_CLASSIFICATION	6.994944313914086E-7	DESIGN
ie. e.status==DELETED	WITHOUT_CLASSIFICATION	0.9999894454461651	WITHOUT_CLASSIFICATION	1.0554553834962947E-5	DESIGN
the object is transient or detached	WITHOUT_CLASSIFICATION	0.9999556768952381	WITHOUT_CLASSIFICATION	4.432310476186773E-5	DESIGN
NOTE EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999919581254701	WITHOUT_CLASSIFICATION	8.041874529912633E-6	DESIGN
Private constructor - stops checkstyle from complaining.	WITHOUT_CLASSIFICATION	0.9999926847906574	WITHOUT_CLASSIFICATION	7.315209342620451E-6	DESIGN
First, try to find a matching constructor accepting a ViolatedConstraintNameExtracter param...	WITHOUT_CLASSIFICATION	0.9999877804113714	WITHOUT_CLASSIFICATION	1.2219588628622366E-5	DESIGN
eat it and try next	WITHOUT_CLASSIFICATION	0.9993384451949555	WITHOUT_CLASSIFICATION	6.615548050444679E-4	DESIGN
Otherwise, try to use the no-arg constructor	WITHOUT_CLASSIFICATION	0.9999976014780361	WITHOUT_CLASSIFICATION	2.3985219640001563E-6	DESIGN
oracle sql-state code for deadlock	WITHOUT_CLASSIFICATION	0.9998999583257084	WITHOUT_CLASSIFICATION	1.0004167429158643E-4	DESIGN
CollectionPropertyMapping processes everything except 'index'.	WITHOUT_CLASSIFICATION	0.9999984342944241	WITHOUT_CLASSIFICATION	1.5657055759475134E-6	DESIGN
remove initial ", "	WITHOUT_CLASSIFICATION	0.9999995609758427	WITHOUT_CLASSIFICATION	4.3902415733952343E-7	DESIGN
remove initial " and "	WITHOUT_CLASSIFICATION	0.9999970794772034	WITHOUT_CLASSIFICATION	2.920522796601923E-6	DESIGN
beforeClassTokens.add("new"); DEFINITELY DON'T HAVE THIS!!	WITHOUT_CLASSIFICATION	0.9999916176639092	WITHOUT_CLASSIFICATION	8.382336090777728E-6	DESIGN
notAfterClassTokens.add(",");	WITHOUT_CLASSIFICATION	0.9999965256502016	WITHOUT_CLASSIFICATION	3.47434979839182E-6	DESIGN
just especially for the trivial collection filter	WITHOUT_CLASSIFICATION	0.9999990965287464	WITHOUT_CLASSIFICATION	9.034712535878031E-7	DESIGN
update last non-whitespace token, if necessary	WITHOUT_CLASSIFICATION	0.9999999126647385	WITHOUT_CLASSIFICATION	8.733526148916179E-8	DESIGN
select-range is terminated by declaration of "from"	WITHOUT_CLASSIFICATION	0.9999873050413897	WITHOUT_CLASSIFICATION	1.2694958610467533E-5	DESIGN
scan for next non-whitespace token	WITHOUT_CLASSIFICATION	0.9999998593843751	WITHOUT_CLASSIFICATION	1.4061562488998748E-7	DESIGN
Note this!!	WITHOUT_CLASSIFICATION	0.9976731600338351	WITHOUT_CLASSIFICATION	0.0023268399661647973	DESIGN
Error message constants.	WITHOUT_CLASSIFICATION	0.9999994961898828	WITHOUT_CLASSIFICATION	5.038101171218585E-7	DESIGN
handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999989759739517	WITHOUT_CLASSIFICATION	1.0240260482912164E-6	DESIGN
semantic action handling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9956080471508431	WITHOUT_CLASSIFICATION	0.004391952849157012	DESIGN
Handle collection-fiter compilation. IMPORTANT NOTE: This is modifying the INPUT (HQL) tree, not the output tree!	WITHOUT_CLASSIFICATION	0.98491495758737	WITHOUT_CLASSIFICATION	0.015085042412630019	DESIGN
Show the modified AST.	WITHOUT_CLASSIFICATION	0.9999636289199819	WITHOUT_CLASSIFICATION	3.6371080018181725E-5	DESIGN
Create a parameter specification for the collection filter...	WITHOUT_CLASSIFICATION	0.9999919376138913	WITHOUT_CLASSIFICATION	8.062386108711521E-6	DESIGN
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999995781917727	WITHOUT_CLASSIFICATION	4.21808227431751E-7	DESIGN
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999995781917727	WITHOUT_CLASSIFICATION	4.21808227431751E-7	DESIGN
Get the names of the columns used to link between the collection owner and the collection elements.	WITHOUT_CLASSIFICATION	0.999836982898111	WITHOUT_CLASSIFICATION	1.6301710188901795E-4	DESIGN
The path AST should be a DotNode, and it should have been evaluated already.	WITHOUT_CLASSIFICATION	0.999977162527124	WITHOUT_CLASSIFICATION	2.2837472875926484E-5	DESIGN
Tell the dot node about the join type.	WITHOUT_CLASSIFICATION	0.9999998552212768	WITHOUT_CLASSIFICATION	1.4477872326330247E-7	DESIGN
Re-arrange the tree so that the collection function is the root and the lhs is the path.	WITHOUT_CLASSIFICATION	0.9999991730606868	WITHOUT_CLASSIFICATION	8.269393132085003E-7	DESIGN
Don't forget to resolve the argument! Resolve the collection function now.	WITHOUT_CLASSIFICATION	0.9999764241695903	WITHOUT_CLASSIFICATION	2.3575830409596833E-5	DESIGN
Resolve everything up to this dot, but don't resolve the placeholders yet.	WITHOUT_CLASSIFICATION	0.9503991428059662	WITHOUT_CLASSIFICATION	0.049600857194033836	DESIGN
Should mean that no such property was found	WITHOUT_CLASSIFICATION	0.9987020808550643	WITHOUT_CLASSIFICATION	0.0012979191449357477	DESIGN
Was there an explicit select expression?	WITHOUT_CLASSIFICATION	0.9999697592289652	WITHOUT_CLASSIFICATION	3.0240771034713193E-5	DESIGN
Attach any mapping-defined "ORDER BY" fragments	WITHOUT_CLASSIFICATION	0.9999988497795006	WITHOUT_CLASSIFICATION	1.1502204994132671E-6	DESIGN
Use the explicitly declared select expression; determine the return types indicated by each select token	WITHOUT_CLASSIFICATION	0.9999998537836241	WITHOUT_CLASSIFICATION	1.4621637598275423E-7	DESIGN
After that, process the JOINs. Invoke a delegate to do the work, as this is farily complex.	WITHOUT_CLASSIFICATION	0.9999999706062118	WITHOUT_CLASSIFICATION	2.9393788210224462E-8	DESIGN
Make #@%$^#^&# sure no alias is applied to the table name	WITHOUT_CLASSIFICATION	0.9999991247156877	WITHOUT_CLASSIFICATION	8.752843121987515E-7	DESIGN
We need to generate ids as part of this bulk insert. Note that this is only supported for sequence-style generators and post-insert-style generators; basically, only in-db generators	WITHOUT_CLASSIFICATION	0.9999988612188271	WITHOUT_CLASSIFICATION	1.1387811729139694E-6	DESIGN
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999995781917727	WITHOUT_CLASSIFICATION	4.21808227431751E-7	DESIGN
We need to seed the version value as part of this bulk insert	WITHOUT_CLASSIFICATION	0.9999819229213098	WITHOUT_CLASSIFICATION	1.8077078690253152E-5	DESIGN
we need to wrtap the param in a cast()	WITHOUT_CLASSIFICATION	0.9994736118485116	WITHOUT_CLASSIFICATION	5.263881514884392E-4	DESIGN
This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.997633479647826	WITHOUT_CLASSIFICATION	0.0023665203521739007	DESIGN
Generate implicit joins, only if necessary.	WITHOUT_CLASSIFICATION	0.9999726588227267	WITHOUT_CLASSIFICATION	2.734117727326782E-5	DESIGN
Notify the FROM element that it is being referenced by the select.	WITHOUT_CLASSIFICATION	0.9999956579656314	WITHOUT_CLASSIFICATION	4.342034368669049E-6	DESIGN
Turn off includeSubclasses on all FromElements.	WITHOUT_CLASSIFICATION	0.9999812538049353	WITHOUT_CLASSIFICATION	1.874619506470478E-5	DESIGN
create the node initially with the param name so that it shows appropriately in the "original text" attribute	WITHOUT_CLASSIFICATION	0.9995310173313041	WITHOUT_CLASSIFICATION	4.6898266869577E-4	DESIGN
Use the delegate, resolve identifiers as FROM element aliases.	WITHOUT_CLASSIFICATION	0.999998648928105	WITHOUT_CLASSIFICATION	1.3510718949299735E-6	DESIGN
select clauses for insert statements should alwasy be treated as shallow	WITHOUT_CLASSIFICATION	0.999439369038871	WITHOUT_CLASSIFICATION	5.606309611289282E-4	DESIGN
no need to even collect this information if the persister is considered multi-table	WITHOUT_CLASSIFICATION	0.9998721907739896	WITHOUT_CLASSIFICATION	1.278092260104298E-4	DESIGN
Make sure that the persister is versioned	WITHOUT_CLASSIFICATION	0.999852534127125	WITHOUT_CLASSIFICATION	1.4746587287506305E-4	DESIGN
handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999989759739517	WITHOUT_CLASSIFICATION	1.0240260482912164E-6	DESIGN
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999995781917727	WITHOUT_CLASSIFICATION	4.21808227431751E-7	DESIGN
--Commented out by Inspection (12/11/04 10:56 AM): int getWarningCount();	WITHOUT_CLASSIFICATION	0.9999999726623996	WITHOUT_CLASSIFICATION	2.7337600479990643E-8	DESIGN
Alias references and identifiers use the same node class.	WITHOUT_CLASSIFICATION	0.9999996236568477	WITHOUT_CLASSIFICATION	3.763431522138339E-7	DESIGN
switch	WITHOUT_CLASSIFICATION	0.9999564024312008	WITHOUT_CLASSIFICATION	4.3597568799263796E-5	DESIGN
make a new one	WITHOUT_CLASSIFICATION	0.9999887040241839	WITHOUT_CLASSIFICATION	1.1295975816065258E-5	DESIGN
just do the regular thing if you can't find the ctor Your AST must have default ctor to use this.	WITHOUT_CLASSIFICATION	0.9796116856862414	WITHOUT_CLASSIFICATION	0.020388314313758562	DESIGN
Initialize SQL nodes here.	WITHOUT_CLASSIFICATION	0.9999995475614398	WITHOUT_CLASSIFICATION	4.524385601915561E-7	DESIGN
semantic action processing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999812627628907	WITHOUT_CLASSIFICATION	1.8737237109294706E-4	DESIGN
if template is null we just write the function out as it appears in the hql statement	WITHOUT_CLASSIFICATION	0.9999997398719701	WITHOUT_CLASSIFICATION	2.6012802982768765E-7	DESIGN
this function has a template -> redirect output and catch the arguments	WITHOUT_CLASSIFICATION	0.999999686196706	WITHOUT_CLASSIFICATION	3.138032940934032E-7	DESIGN
--- Inner classes (moved here from sql-gen.g) ---	WITHOUT_CLASSIFICATION	0.9999976876382655	WITHOUT_CLASSIFICATION	2.3123617344141936E-6	DESIGN
check two "adjecent" nodes at the top of the from-clause tree	WITHOUT_CLASSIFICATION	0.9999985746569942	WITHOUT_CLASSIFICATION	1.425343005824621E-6	DESIGN
/	WITHOUT_CLASSIFICATION	0.9999404455295717	WITHOUT_CLASSIFICATION	5.9554470428206114E-5	DESIGN
these are just two unrelated table references	WITHOUT_CLASSIFICATION	0.9999805796652268	WITHOUT_CLASSIFICATION	1.942033477328191E-5	DESIGN
again, both should be FromElements	WITHOUT_CLASSIFICATION	0.9999702967065888	WITHOUT_CLASSIFICATION	2.970329341125425E-5	DESIGN
NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9998949289526609	WITHOUT_CLASSIFICATION	1.0507104733911662E-4	DESIGN
right represents a joins originating from left; or both right and left reprersent joins originating from the same FromElement	WITHOUT_CLASSIFICATION	0.9999999367345305	WITHOUT_CLASSIFICATION	6.326546954605711E-8	DESIGN
check a set of parent/child nodes in the from-clause tree to determine if a comma is required between them	WITHOUT_CLASSIFICATION	0.9999983818407566	WITHOUT_CLASSIFICATION	1.618159243437773E-6	DESIGN
right represents a joins originating from left...	WITHOUT_CLASSIFICATION	0.9999999064180832	WITHOUT_CLASSIFICATION	9.358191675141497E-8	DESIGN
all clear	WITHOUT_CLASSIFICATION	0.9999987232650142	WITHOUT_CLASSIFICATION	1.27673498588653E-6	DESIGN
Ignore the token class name parameter, and use a specific token class.	WITHOUT_CLASSIFICATION	0.9999999738243527	WITHOUT_CLASSIFICATION	2.6175647335804566E-8	DESIGN
overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9994163707751766	WITHOUT_CLASSIFICATION	5.836292248233276E-4	DESIGN
overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9994163707751766	WITHOUT_CLASSIFICATION	5.836292248233276E-4	DESIGN
remember that ordinal parameters numbers are 1-based!!!	WITHOUT_CLASSIFICATION	0.9950693109761237	WITHOUT_CLASSIFICATION	0.004930689023876357	DESIGN
don't care about other param types here, just those explicitly user-defined...	WITHOUT_CLASSIFICATION	0.9998665395762844	WITHOUT_CLASSIFICATION	1.3346042371559512E-4	DESIGN
If the query is already compiled, skip the compilation.	WITHOUT_CLASSIFICATION	0.9999998812307453	WITHOUT_CLASSIFICATION	1.1876925469933162E-7	DESIGN
Remember the parameters for the compilation.	WITHOUT_CLASSIFICATION	0.9999550799409834	WITHOUT_CLASSIFICATION	4.492005901660927E-5	DESIGN
PHASE 1 : Parse the HQL into an AST.	WITHOUT_CLASSIFICATION	0.9999903700131499	WITHOUT_CLASSIFICATION	9.629986850116563E-6	DESIGN
PHASE 2 : Analyze the HQL AST, and produce an SQL AST.	WITHOUT_CLASSIFICATION	0.9999981155833767	WITHOUT_CLASSIFICATION	1.8844166233084184E-6	DESIGN
PHASE 3 : Generate the SQL.	WITHOUT_CLASSIFICATION	0.9970130217007336	WITHOUT_CLASSIFICATION	0.0029869782992664466	DESIGN
we do not actually propogate ANTLRExceptions as a cause, so log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9999999950716089	WITHOUT_CLASSIFICATION	4.928391059270507E-9	DESIGN
we do not actually propogate ANTLRExceptions as a cause, so log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9999999950716089	WITHOUT_CLASSIFICATION	4.928391059270507E-9	DESIGN
only needed during compilation phase...	WITHOUT_CLASSIFICATION	0.9999987979381257	WITHOUT_CLASSIFICATION	1.2020618742836835E-6	DESIGN
Transform the tree.	WITHOUT_CLASSIFICATION	0.9999992272739265	WITHOUT_CLASSIFICATION	7.727260733829374E-7	DESIGN
Parse the query string into an HQL AST.	WITHOUT_CLASSIFICATION	0.9999950465545185	WITHOUT_CLASSIFICATION	4.9534454814488106E-6	DESIGN
Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9998723873777691	WITHOUT_CLASSIFICATION	1.2761262223099406E-4	DESIGN
Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9998723873777691	WITHOUT_CLASSIFICATION	1.2761262223099406E-4	DESIGN
Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9998723873777691	WITHOUT_CLASSIFICATION	1.2761262223099406E-4	DESIGN
NOTE : ( max - 1 ) because first is zero-based while max is not...	WITHOUT_CLASSIFICATION	0.9999868150105508	WITHOUT_CLASSIFICATION	1.318498944926497E-5	DESIGN
-- Package local methods for the QueryLoader delegate --	WITHOUT_CLASSIFICATION	0.9995643391368535	WITHOUT_CLASSIFICATION	4.356608631464991E-4	DESIGN
If there are no collection fetches, then no further checks are needed	WITHOUT_CLASSIFICATION	0.9999993931406816	WITHOUT_CLASSIFICATION	6.068593183105338E-7	DESIGN
A shallow query is ok (although technically there should be no fetching here...)	WITHOUT_CLASSIFICATION	0.9969317675591728	WITHOUT_CLASSIFICATION	0.003068232440827282	DESIGN
should be the first, but just to be safe...	WITHOUT_CLASSIFICATION	0.9999514408902234	WITHOUT_CLASSIFICATION	4.855910977663798E-5	DESIGN
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999995781917727	WITHOUT_CLASSIFICATION	4.21808227431751E-7	DESIGN
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999995781917727	WITHOUT_CLASSIFICATION	4.21808227431751E-7	DESIGN
Impl Note: allows multiple collection fetches as long as the entire fecthed graph still "points back" to a single root entity for return	WITHOUT_CLASSIFICATION	0.9992292829088305	WITHOUT_CLASSIFICATION	7.707170911693745E-4	DESIGN
Otherwise, we have a non-scalar select with defined collection fetch(es). Make sure that there is only a single root entity in the return (no tuples)	WITHOUT_CLASSIFICATION	0.997988580222755	WITHOUT_CLASSIFICATION	0.002011419777244881	DESIGN
This is not strictly true. We actually just need to make sure that it is ordered by root-entity PK and that that order-by comes before any non-root-entity ordering...	WITHOUT_CLASSIFICATION	0.9995819635584888	WITHOUT_CLASSIFICATION	4.1803644151119137E-4	DESIGN
paramTranslations = new ParameterTranslationsImpl( collectedParameterSpecifications );	WITHOUT_CLASSIFICATION	0.9999997045274377	WITHOUT_CLASSIFICATION	2.954725623100862E-7	DESIGN
we are already processing a dot-structure	WITHOUT_CLASSIFICATION	0.9999909604774694	WITHOUT_CLASSIFICATION	9.039522530560365E-6	DESIGN
igndore it...	WITHOUT_CLASSIFICATION	0.9997883194616963	WITHOUT_CLASSIFICATION	2.1168053830376585E-4	DESIGN
we are now at a new tree level	WITHOUT_CLASSIFICATION	0.9999961084099208	WITHOUT_CLASSIFICATION	3.89159007911265E-6	DESIGN
[jsd] The fix for HHH-558...	WITHOUT_CLASSIFICATION	0.9985412665497827	WITHOUT_CLASSIFICATION	0.0014587334502173263	DESIGN
If the token can tell us if it could be an identifier...	WITHOUT_CLASSIFICATION	0.9995585160621531	WITHOUT_CLASSIFICATION	4.4148393784694637E-4	DESIGN
... and the expected token type was an identifier, then:	WITHOUT_CLASSIFICATION	0.9999969947570871	WITHOUT_CLASSIFICATION	3.0052429129291505E-6	DESIGN
Use the token as an identifier.	WITHOUT_CLASSIFICATION	0.9999999318634627	WITHOUT_CLASSIFICATION	6.81365372367947E-8	DESIGN
Add the token to the AST.	WITHOUT_CLASSIFICATION	0.999990653409546	WITHOUT_CLASSIFICATION	9.346590454091828E-6	DESIGN
(NOT (EQ a b) ) => (NE a b)	WITHOUT_CLASSIFICATION	0.9999811511277974	WITHOUT_CLASSIFICATION	1.884887220270576E-5	DESIGN
(NOT (NE a b) ) => (EQ a b)	WITHOUT_CLASSIFICATION	0.9999811511277974	WITHOUT_CLASSIFICATION	1.884887220270576E-5	DESIGN
(NOT (LT a b) ) => (GE a b)	WITHOUT_CLASSIFICATION	0.9999694307957208	WITHOUT_CLASSIFICATION	3.056920427930039E-5	DESIGN
(NOT (GE a b) ) => (LT a b)	WITHOUT_CLASSIFICATION	0.9999694307957208	WITHOUT_CLASSIFICATION	3.056920427930039E-5	DESIGN
(NOT (LE a b) ) => (GT a b)	WITHOUT_CLASSIFICATION	0.9999864306118235	WITHOUT_CLASSIFICATION	1.3569388176459604E-5	DESIGN
(NOT (LIKE a b) ) => (NOT_LIKE a b)	WITHOUT_CLASSIFICATION	0.9999963044887109	WITHOUT_CLASSIFICATION	3.6955112890281137E-6	DESIGN
(NOT (NOT_LIKE a b) ) => (LIKE a b)	WITHOUT_CLASSIFICATION	0.9999963044887109	WITHOUT_CLASSIFICATION	3.6955112890281137E-6	DESIGN
(NOT (IS_NOT_NULL a b) ) => (IS_NULL a b)	WITHOUT_CLASSIFICATION	0.9999968098240103	WITHOUT_CLASSIFICATION	3.190175989704035E-6	DESIGN
(NOT (BETWEEN a b) ) => (NOT_BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999915404371038	WITHOUT_CLASSIFICATION	8.459562896193654E-6	DESIGN
Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999991345215972	WITHOUT_CLASSIFICATION	8.654784029655365E-7	DESIGN
overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9994163707751766	WITHOUT_CLASSIFICATION	5.836292248233276E-4	DESIGN
if if Otherwise, handle the error normally.	WITHOUT_CLASSIFICATION	0.9999990984562535	WITHOUT_CLASSIFICATION	9.015437465575521E-7	DESIGN
(NOT (NOT_BETWEEN a b) ) => (BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999915404371038	WITHOUT_CLASSIFICATION	8.459562896193654E-6	DESIGN
This can never happen because this rule will always eliminate the child NOT.case NOT:return x.getFirstChild(); (NOT (NOT x) ) => (x)	WITHOUT_CLASSIFICATION	0.9999964226404243	WITHOUT_CLASSIFICATION	3.5773595758141688E-6	DESIGN
Just add a 'not' parent.	WITHOUT_CLASSIFICATION	0.9955930254912755	WITHOUT_CLASSIFICATION	0.004406974508724464	DESIGN
(EQ NULL b) => (IS_NULL b)	WITHOUT_CLASSIFICATION	0.9999997632290853	WITHOUT_CLASSIFICATION	2.367709147319977E-7	DESIGN
(EQ a NULL) => (IS_NULL a)	WITHOUT_CLASSIFICATION	0.9999994722388507	WITHOUT_CLASSIFICATION	5.277611493362156E-7	DESIGN
NOTE: Because we're using ASTUtil.createParent(), the tree must be created from the bottom up. IS EMPTY x => (EXISTS (QUERY (SELECT_FROM (FROM x) ) ) )	WITHOUT_CLASSIFICATION	0.9999990832186777	WITHOUT_CLASSIFICATION	9.167813223193979E-7	DESIGN
Add NOT if it's negated.	WITHOUT_CLASSIFICATION	0.9994623091892061	WITHOUT_CLASSIFICATION	5.376908107939685E-4	DESIGN
Create nodes that track line and column number.	WITHOUT_CLASSIFICATION	0.9999921443422414	WITHOUT_CLASSIFICATION	7.855657758610963E-6	DESIGN
Case 1: Multi token keywords GROUP BY and ORDER BY The next token ( LT(2) ) should be 'by'... otherwise, this is just an ident.	WITHOUT_CLASSIFICATION	0.995105364293673	WITHOUT_CLASSIFICATION	0.004894635706326932	DESIGN
Case 2: The current token is after FROM and before '.'.	WITHOUT_CLASSIFICATION	0.999999837235443	WITHOUT_CLASSIFICATION	1.6276455706415848E-7	DESIGN
This handles HHH-354, where there is a strange property name in a where clause. If the lookahead contains a DOT then something that isn't an IDENT...	WITHOUT_CLASSIFICATION	0.9981342936489486	WITHOUT_CLASSIFICATION	0.0018657063510514416	DESIGN
See if the second lookahed token can be an identifier.	WITHOUT_CLASSIFICATION	0.9999999593511613	WITHOUT_CLASSIFICATION	4.064883874573564E-8	DESIGN
Set it!	WITHOUT_CLASSIFICATION	0.9999539581164361	WITHOUT_CLASSIFICATION	4.6041883564024336E-5	DESIGN
ignore	WITHOUT_CLASSIFICATION	0.9999964313733375	WITHOUT_CLASSIFICATION	3.5686266624094358E-6	DESIGN
strip the " where "	WITHOUT_CLASSIFICATION	0.9999993466832847	WITHOUT_CLASSIFICATION	6.533167153121774E-7	DESIGN
Don't really know all the codes required to adequately decipher returned jdbc exceptions here. simply allow the failure to be eaten and the subsequent insert-selects/deletes should fail	WITHOUT_CLASSIFICATION	0.9999903986044835	WITHOUT_CLASSIFICATION	9.601395516438253E-6	DESIGN
at the very least cleanup the data :)	WITHOUT_CLASSIFICATION	0.9982540329489955	WITHOUT_CLASSIFICATION	0.0017459670510045224	DESIGN
First, save off the pertinent ids, as the return value	WITHOUT_CLASSIFICATION	0.9999999833626619	WITHOUT_CLASSIFICATION	1.663733804209366E-8	DESIGN
jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.999787164592418	WITHOUT_CLASSIFICATION	2.1283540758194506E-4	DESIGN
jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.999787164592418	WITHOUT_CLASSIFICATION	2.1283540758194506E-4	DESIGN
Start performing the updates	WITHOUT_CLASSIFICATION	0.9999307490094136	WITHOUT_CLASSIFICATION	6.925099058631486E-5	DESIGN
First, save off the pertinent ids, saving the number of pertinent ids for return	WITHOUT_CLASSIFICATION	0.9999998904192875	WITHOUT_CLASSIFICATION	1.0958071257594244E-7	DESIGN
Start performing the deletes	WITHOUT_CLASSIFICATION	0.9999901260797603	WITHOUT_CLASSIFICATION	9.87392023959958E-6	DESIGN
otherwise, everything ok.	WITHOUT_CLASSIFICATION	0.9996794094847665	WITHOUT_CLASSIFICATION	3.2059051523358967E-4	DESIGN
visit width-first, then depth	WITHOUT_CLASSIFICATION	0.9998227534669756	WITHOUT_CLASSIFICATION	1.7724653302435647E-4	DESIGN
if the types report logical equivalence, return true...	WITHOUT_CLASSIFICATION	0.999958258232003	WITHOUT_CLASSIFICATION	4.1741767996988594E-5	DESIGN
otherwise, perform a "deep equivalence" check...	WITHOUT_CLASSIFICATION	0.9992287929896685	WITHOUT_CLASSIFICATION	7.712070103314018E-4	DESIGN
If there is no WHERE node, make one.	WITHOUT_CLASSIFICATION	0.999999918102242	WITHOUT_CLASSIFICATION	8.18977580148434E-8	DESIGN
inject the WHERE after the parent	WITHOUT_CLASSIFICATION	0.9999450523125037	WITHOUT_CLASSIFICATION	5.4947687496212955E-5	DESIGN
Never include subclasses for implied from elements.	WITHOUT_CLASSIFICATION	0.9999285676403586	WITHOUT_CLASSIFICATION	7.143235964141488E-5	DESIGN
Moved here from SelectClause [jsd]	WITHOUT_CLASSIFICATION	0.999907301233602	WITHOUT_CLASSIFICATION	9.269876639792062E-5	DESIGN
/	WITHOUT_CLASSIFICATION	0.9999404455295717	WITHOUT_CLASSIFICATION	5.9554470428206114E-5	DESIGN
Use the table fromElement and the property name to get the array of column names.	WITHOUT_CLASSIFICATION	0.9999974515257325	WITHOUT_CLASSIFICATION	2.548474267424008E-6	DESIGN
Set the attributes of the property reference expression.	WITHOUT_CLASSIFICATION	0.9999982828629632	WITHOUT_CLASSIFICATION	1.7171370367948182E-6	DESIGN
If the uresolved property path isn't set yet, just use the property name.	WITHOUT_CLASSIFICATION	0.9999711468778306	WITHOUT_CLASSIFICATION	2.8853122169410544E-5	DESIGN
The 'from element' that the property is in.	WITHOUT_CLASSIFICATION	0.9999987800828916	WITHOUT_CLASSIFICATION	1.219917108519331E-6	DESIGN
Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999998493857294	WITHOUT_CLASSIFICATION	1.5061427056475874E-7	DESIGN
Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999998493857294	WITHOUT_CLASSIFICATION	1.5061427056475874E-7	DESIGN
If this dot has already been resolved, stop now.	WITHOUT_CLASSIFICATION	0.9999320165492556	WITHOUT_CLASSIFICATION	6.798345074443412E-5	DESIGN
If there is no data type for this node, and we're at the end of the path (top most dot node), then this might be a Java constant.	WITHOUT_CLASSIFICATION	0.9963414089346496	WITHOUT_CLASSIFICATION	0.0036585910653503355	DESIGN
The property is a collection...	WITHOUT_CLASSIFICATION	0.9999956715651309	WITHOUT_CLASSIFICATION	4.328434869107359E-6	DESIGN
The property is a component...	WITHOUT_CLASSIFICATION	0.9999742782494423	WITHOUT_CLASSIFICATION	2.5721750557709662E-5	DESIGN
The property is another class..	WITHOUT_CLASSIFICATION	0.9999931811751968	WITHOUT_CLASSIFICATION	6.818824803288062E-6	DESIGN
Otherwise, this is a primitive type.	WITHOUT_CLASSIFICATION	0.9999952151352909	WITHOUT_CLASSIFICATION	4.784864709036604E-6	DESIGN
foo.bars.size (also handles deprecated stuff like foo.bars.maxelement for backwardness)	WITHOUT_CLASSIFICATION	0.9998089072303136	WITHOUT_CLASSIFICATION	1.9109276968643757E-4	DESIGN
This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999879559380453	WITHOUT_CLASSIFICATION	1.2044061954730746E-5	DESIGN
Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999908293241856	WITHOUT_CLASSIFICATION	9.170675814467207E-6	DESIGN
in non-select queries, the only time we should need to join is if we are in a subquery from clause	WITHOUT_CLASSIFICATION	0.9999999610976356	WITHOUT_CLASSIFICATION	3.8902364392682095E-8	DESIGN
this is the regression style determination which matches the logic of the classic translator	WITHOUT_CLASSIFICATION	0.999657965760103	WITHOUT_CLASSIFICATION	3.420342398969269E-4	DESIGN
This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999879559380453	WITHOUT_CLASSIFICATION	1.2044061954730746E-5	DESIGN
even though we might find a pre-existing element by join path, we may not be able to reuse it...	WITHOUT_CLASSIFICATION	0.7330978639910023	DESIGN	0.2669021360089977	WITHOUT_CLASSIFICATION
NOTE : addDuplicateAlias() already performs nullness checks on the alias.	WITHOUT_CLASSIFICATION	0.9935160326883758	WITHOUT_CLASSIFICATION	0.006483967311624097	DESIGN
if the from-clauses are the same, we can be a little more aggressive in terms of what we reuse	WITHOUT_CLASSIFICATION	0.9976649597869847	WITHOUT_CLASSIFICATION	0.002335040213015372	DESIGN
again, null != null here	WITHOUT_CLASSIFICATION	0.9999987391683016	WITHOUT_CLASSIFICATION	1.26083169837663E-6	DESIGN
If this is an implied join in a from element, then use the impled join type which is part of the tree parser's state (set by the gramamar actions).	WITHOUT_CLASSIFICATION	0.9999980662049488	WITHOUT_CLASSIFICATION	1.9337950512403142E-6	DESIGN
otherwise (subquery case) dont reuse the fromElement if we are processing the from-clause of the subquery	WITHOUT_CLASSIFICATION	0.999999912975604	WITHOUT_CLASSIFICATION	8.702439610497133E-8	DESIGN
we know only the lhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999981911916029	WITHOUT_CLASSIFICATION	1.8088083970272639E-6	DESIGN
the referenced node text is the special 'id'	WITHOUT_CLASSIFICATION	0.9999999833198246	WITHOUT_CLASSIFICATION	1.6680175312444915E-8	DESIGN
only the identifier property field name can be a reference to the associated entity's PK...	WITHOUT_CLASSIFICATION	0.9992061339518828	WITHOUT_CLASSIFICATION	7.938660481171042E-4	DESIGN
special shortcut for id properties, skip the join! this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9996426443674125	WITHOUT_CLASSIFICATION	3.5735563258754974E-4	DESIGN
Append the new property name onto the unresolved path.	WITHOUT_CLASSIFICATION	0.9999716432361333	WITHOUT_CLASSIFICATION	2.835676386677262E-5	DESIGN
If the lhs is a collection, use CollectionPropertyMapping	WITHOUT_CLASSIFICATION	0.9999998179708182	WITHOUT_CLASSIFICATION	1.820291817558913E-7	DESIGN
Tell the destination fromElement to 'includeSubclasses'.	WITHOUT_CLASSIFICATION	0.9999991609426879	WITHOUT_CLASSIFICATION	8.390573121508133E-7	DESIGN
Use theta style (for regression) Move the node up, after the origin node.	WITHOUT_CLASSIFICATION	0.9999994244117791	WITHOUT_CLASSIFICATION	5.755882208048415E-7	DESIGN
Don't resolve the node again.	WITHOUT_CLASSIFICATION	0.9999865550194507	WITHOUT_CLASSIFICATION	1.3444980549423884E-5	DESIGN
for expected parameter type injection, we expect that the lhs represents some form of property ref and that the children of the in-list represent one-or-more params.	WITHOUT_CLASSIFICATION	0.9999973587732122	WITHOUT_CLASSIFICATION	2.641226787926479E-6	DESIGN
we need to strip off the embedded parens so that sql-gen does not double these up	WITHOUT_CLASSIFICATION	0.9999524788903164	WITHOUT_CLASSIFICATION	4.7521109683669734E-5	DESIGN
we have something like : "? [op] rhs"	WITHOUT_CLASSIFICATION	0.997800269828039	WITHOUT_CLASSIFICATION	0.0021997301719610023	DESIGN
we have something like : "lhs [op] ?"	WITHOUT_CLASSIFICATION	0.9997615547190241	WITHOUT_CLASSIFICATION	2.384452809760328E-4	DESIGN
we know only the rhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999981988451131	WITHOUT_CLASSIFICATION	1.8011548869269074E-6	DESIGN
handle the (assumed) valid cases: #1 - the only valid datetime addition synatx is one or the other is a datetime (but not both)	WITHOUT_CLASSIFICATION	0.9999951484828914	WITHOUT_CLASSIFICATION	4.851517108626816E-6	DESIGN
one or the other needs to be a datetime for us to get into this method in the first place...	WITHOUT_CLASSIFICATION	0.7090306079834439	DESIGN	0.2909693920165561	WITHOUT_CLASSIFICATION
#3 - note that this is also true of "datetime - :param"...	WITHOUT_CLASSIFICATION	0.9998447525048606	WITHOUT_CLASSIFICATION	1.552474951394171E-4	DESIGN
#2	WITHOUT_CLASSIFICATION	0.9999565679508305	WITHOUT_CLASSIFICATION	4.343204916940568E-5	DESIGN
Generate the inner join -- The elements need to be joined to the collection they are in.	WITHOUT_CLASSIFICATION	0.999999882947422	WITHOUT_CLASSIFICATION	1.1705257800906523E-7	DESIGN
nothing to do	WITHOUT_CLASSIFICATION	0.9999476943073606	WITHOUT_CLASSIFICATION	5.2305692639364004E-5	DESIGN
The 'from element' that represents the elements of the collection.	WITHOUT_CLASSIFICATION	0.9999997433605617	WITHOUT_CLASSIFICATION	2.5663943829272297E-7	DESIGN
Add the condition to the join sequence that qualifies the indexed element.	WITHOUT_CLASSIFICATION	0.9999999939342975	WITHOUT_CLASSIFICATION	6.065702529790863E-9	DESIGN
Sometimes use the element table alias, sometimes use the... umm... collection table alias (many to many)	WITHOUT_CLASSIFICATION	0.9999986229351226	WITHOUT_CLASSIFICATION	1.3770648772577308E-6	DESIGN
Now, set the text for this node. It should be the element columns.	WITHOUT_CLASSIFICATION	0.993587547189116	WITHOUT_CLASSIFICATION	0.006412452810883919	DESIGN
Get the function return value type, based on the type of the first argument.	WITHOUT_CLASSIFICATION	0.9999999965030092	WITHOUT_CLASSIFICATION	3.4969907039543458E-9	DESIGN
This will call initialize(tok)!	WITHOUT_CLASSIFICATION	0.9999875660003587	WITHOUT_CLASSIFICATION	1.2433999641335418E-5	DESIGN
mutation depends on the types of nodes invloved...	WITHOUT_CLASSIFICATION	0.9999854211232525	WITHOUT_CLASSIFICATION	1.457887674746647E-5	DESIGN
"pass along" our initial embedded parameter node(s) to the first generated sql fragment so that it can be handled later for parameter binding...	WITHOUT_CLASSIFICATION	0.9999703282885656	WITHOUT_CLASSIFICATION	2.9671711434307717E-5	DESIGN
logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999745787009485	WITHOUT_CLASSIFICATION	2.5421299051520685E-5	DESIGN
Generated select expressions are already resolved, nothing to do.	WITHOUT_CLASSIFICATION	0.9999953688801297	WITHOUT_CLASSIFICATION	4.631119870319067E-6	DESIGN
The path may be a reference to an alias defined in the parent query.	WITHOUT_CLASSIFICATION	0.9999624327146415	WITHOUT_CLASSIFICATION	3.756728535856319E-5	DESIGN
The HQL class alias refers to the class name.	WITHOUT_CLASSIFICATION	0.9999999712161166	WITHOUT_CLASSIFICATION	2.8783883280917217E-8	DESIGN
Associate the table alias with the element.	WITHOUT_CLASSIFICATION	0.9999997119850863	WITHOUT_CLASSIFICATION	2.8801491375147517E-7	DESIGN
try the parent FromClause...	WITHOUT_CLASSIFICATION	0.9998592662846068	WITHOUT_CLASSIFICATION	1.407337153932227E-4	DESIGN
Add the new node to the map so that we don't create it twice.	WITHOUT_CLASSIFICATION	0.9999997671207506	WITHOUT_CLASSIFICATION	2.3287924951863042E-7	DESIGN
Make sure that all from elements registered with this FROM clause are actually in the AST.	WITHOUT_CLASSIFICATION	0.9999994216710176	WITHOUT_CLASSIFICATION	5.783289822697794E-7	DESIGN
Invoke setScalarColumnText on each constructor argument.	WITHOUT_CLASSIFICATION	0.999874441241322	WITHOUT_CLASSIFICATION	1.2555875867804149E-4	DESIGN
Collect the select expressions, skip the first child because it is the class name.	WITHOUT_CLASSIFICATION	0.9999994537972935	WITHOUT_CLASSIFICATION	5.462027065335305E-7	DESIGN
return an empty Type array	WITHOUT_CLASSIFICATION	0.9999723341137147	WITHOUT_CLASSIFICATION	2.7665886285333125E-5	DESIGN
Constructors are always considered scalar results.	WITHOUT_CLASSIFICATION	0.9998894850287391	WITHOUT_CLASSIFICATION	1.105149712609264E-4	DESIGN
this is the exception returned by ReflectHelper.getConstructor() if it cannot locate an appropriate constructor	WITHOUT_CLASSIFICATION	0.9999998101587538	WITHOUT_CLASSIFICATION	1.8984124616704192E-7	DESIGN
if there is no order by, make one	WITHOUT_CLASSIFICATION	0.9999989090576338	WITHOUT_CLASSIFICATION	1.0909423662304747E-6	DESIGN
Find the WHERE; if there is no WHERE, find the FROM...	WITHOUT_CLASSIFICATION	0.9999996086907633	WITHOUT_CLASSIFICATION	3.9130923664415517E-7	DESIGN
Now, inject the newly built ORDER BY into the tree	WITHOUT_CLASSIFICATION	0.9999683616156718	WITHOUT_CLASSIFICATION	3.1638384328157486E-5	DESIGN
ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99998703408142	WITHOUT_CLASSIFICATION	1.2965918580043326E-5	DESIGN
logic operators by definition resolve to boolean.	WITHOUT_CLASSIFICATION	0.9999862770897171	WITHOUT_CLASSIFICATION	1.3722910282904379E-5	DESIGN
Render the identifier select fragment using the table alias.	WITHOUT_CLASSIFICATION	0.9999587268061229	WITHOUT_CLASSIFICATION	4.127319387716075E-5	DESIGN
Class names in the FROM clause result in a JoinSequence (the old FromParser does this).	WITHOUT_CLASSIFICATION	0.999999913484462	WITHOUT_CLASSIFICATION	8.65155379277322E-8	DESIGN
For many-to-many joins, use the tablename from the queryable collection for the default text.	WITHOUT_CLASSIFICATION	0.9999999138163466	WITHOUT_CLASSIFICATION	8.618365343509635E-8	DESIGN
Otherwise, use the property mapping.	WITHOUT_CLASSIFICATION	0.9999891729777929	WITHOUT_CLASSIFICATION	1.0827022207075759E-5	DESIGN
should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9999733034885367	WITHOUT_CLASSIFICATION	2.669651146330261E-5	DESIGN
If the property is a special collection property name, return a CollectionPropertyMapping.	WITHOUT_CLASSIFICATION	0.9999995323507861	WITHOUT_CLASSIFICATION	4.67649213986441E-7	DESIGN
Collection of components.	WITHOUT_CLASSIFICATION	0.9999914224403249	WITHOUT_CLASSIFICATION	8.57755967510808E-6	DESIGN
make sure the lhs is "assignable"...	WITHOUT_CLASSIFICATION	0.9999995010394621	WITHOUT_CLASSIFICATION	4.98960537806865E-7	DESIGN
false indicates to not generate parens around the assignment	WITHOUT_CLASSIFICATION	0.9999360389905403	WITHOUT_CLASSIFICATION	6.396100945964928E-5	DESIGN
Register the FromElement with the FROM clause, now that we have the names and aliases.	WITHOUT_CLASSIFICATION	0.9999997947700405	WITHOUT_CLASSIFICATION	2.0522995944415332E-7	DESIGN
currently allowed...	WITHOUT_CLASSIFICATION	0.9999303838378759	WITHOUT_CLASSIFICATION	6.961616212406326E-5	DESIGN
HHH-276 : implied joins in a subselect where clause - The destination needs to be added to the destination's from clause. Not sure if this is will fix everything, but it works.	WITHOUT_CLASSIFICATION	0.9831694628039951	WITHOUT_CLASSIFICATION	0.016830537196004924	DESIGN
return classAlias == null ? className : classAlias;	WITHOUT_CLASSIFICATION	0.9980092257914075	WITHOUT_CLASSIFICATION	0.0019907742085924825	DESIGN
This is an explicit FROM element.	WITHOUT_CLASSIFICATION	0.999966792045732	WITHOUT_CLASSIFICATION	3.3207954267998655E-5	DESIGN
ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99998703408142	WITHOUT_CLASSIFICATION	1.2965918580043326E-5	DESIGN
Fetch can't be used with scroll() or iterate().	WITHOUT_CLASSIFICATION	0.9999302219061021	WITHOUT_CLASSIFICATION	6.977809389783221E-5	DESIGN
If it's not implied or it is implied and it's a many to many join where the target wasn't found.	WITHOUT_CLASSIFICATION	0.9999999978177357	WITHOUT_CLASSIFICATION	2.1822642548936385E-9	DESIGN
Since this is an explicit FROM element, it can't be implied in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999191143807914	WITHOUT_CLASSIFICATION	8.08856192086291E-5	DESIGN
Do nothing, eplicit from elements are always in the projection list.	WITHOUT_CLASSIFICATION	0.9999995053720215	WITHOUT_CLASSIFICATION	4.946279784382287E-7	DESIGN
propertyName refers to something like collection.size...	WITHOUT_CLASSIFICATION	0.9999152161272745	WITHOUT_CLASSIFICATION	8.47838727255192E-5	DESIGN
property name is a sub-path of a component...	WITHOUT_CLASSIFICATION	0.9995548895405197	WITHOUT_CLASSIFICATION	4.451104594802983E-4	DESIGN
Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999908293241856	WITHOUT_CLASSIFICATION	9.170675814467207E-6	DESIGN
nothing to do; even if the operand is a parameter, no way we could infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9990752346654816	WITHOUT_CLASSIFICATION	9.247653345183414E-4	DESIGN
logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999745787009485	WITHOUT_CLASSIFICATION	2.5421299051520685E-5	DESIGN
DotNode uses null here...	WITHOUT_CLASSIFICATION	0.9759232429101179	WITHOUT_CLASSIFICATION	0.02407675708988221	DESIGN
We represent a from-clause alias	WITHOUT_CLASSIFICATION	0.9999997390700125	WITHOUT_CLASSIFICATION	2.6092998753771764E-7	DESIGN
we are the LHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999992107151614	WITHOUT_CLASSIFICATION	7.892848386033332E-7	DESIGN
we are the RHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999970751998274	WITHOUT_CLASSIFICATION	2.9248001727286852E-6	DESIGN
we represent a naked (simple) prop-ref	WITHOUT_CLASSIFICATION	0.9999685692816939	WITHOUT_CLASSIFICATION	3.143071830616032E-5	DESIGN
EARLY EXIT!!! return so the resolve call explicitly coming from DotNode can resolve this...	WITHOUT_CLASSIFICATION	0.8681357043214409	WITHOUT_CLASSIFICATION	0.131864295678559	DESIGN
assume this ident's text does not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9963749905953726	WITHOUT_CLASSIFICATION	0.003625009404627481	DESIGN
just ignore it for now, it'll get resolved later...	WITHOUT_CLASSIFICATION	0.997041841918594	WITHOUT_CLASSIFICATION	0.002958158081406042	DESIGN
This is not actually a constant, but a reference to FROM element.	WITHOUT_CLASSIFICATION	0.9999674293550086	WITHOUT_CLASSIFICATION	3.257064499131001E-5	DESIGN
check to see if our "propPath" actually represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999777532675421	WITHOUT_CLASSIFICATION	2.2246732457973858E-5	DESIGN
these pieces are needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9998456707389874	WITHOUT_CLASSIFICATION	1.543292610124992E-4	DESIGN
used to set the type of the parent dot node	WITHOUT_CLASSIFICATION	0.9962329235414922	WITHOUT_CLASSIFICATION	0.0037670764585079485	DESIGN
assume we do not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9992490395153157	WITHOUT_CLASSIFICATION	7.509604846842771E-4	DESIGN
assume we do not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9992490395153157	WITHOUT_CLASSIFICATION	7.509604846842771E-4	DESIGN
naked property-refs cannot be used with an aliased from element	WITHOUT_CLASSIFICATION	0.9999558669422084	WITHOUT_CLASSIFICATION	4.4133057791468164E-5	DESIGN
this piece is needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9999812224146101	WITHOUT_CLASSIFICATION	1.877758538998031E-5	DESIGN
do not over-write the column text, as that has already been "rendered" during resolve	WITHOUT_CLASSIFICATION	0.9999997965423951	WITHOUT_CLASSIFICATION	2.0345760481956334E-7	DESIGN
for some reason the antlr.CommonAST initialization routines force this method to get called twice. The first time with an empty string	WITHOUT_CLASSIFICATION	0.9999989117189425	WITHOUT_CLASSIFICATION	1.0882810574615809E-6	DESIGN
Look up class name using the first identifier in the path.	WITHOUT_CLASSIFICATION	0.9999933855982186	WITHOUT_CLASSIFICATION	6.61440178138321E-6	DESIGN
Add to the query spaces.	WITHOUT_CLASSIFICATION	0.9999358555915565	WITHOUT_CLASSIFICATION	6.41444084435116E-5	DESIGN
If the from element isn't in the same clause, create a new from element.	WITHOUT_CLASSIFICATION	0.9999989141292549	WITHOUT_CLASSIFICATION	1.085870745193859E-6	DESIGN
This is the root level node. Generate an explicit from clause at the root.	WITHOUT_CLASSIFICATION	0.9998626964883821	WITHOUT_CLASSIFICATION	1.3730351161783514E-4	DESIGN
Correlated subqueries create 'special' implied from nodes because correlated subselects can't use an ANSI-style join	WITHOUT_CLASSIFICATION	0.9999969103324506	WITHOUT_CLASSIFICATION	3.0896675493081796E-6	DESIGN
super-duper-classic-parser-regression-testing-mojo-magic...	WITHOUT_CLASSIFICATION	0.9998943075910126	WITHOUT_CLASSIFICATION	1.0569240898749207E-4	DESIGN
A collection of entities...	WITHOUT_CLASSIFICATION	0.9999499861886502	WITHOUT_CLASSIFICATION	5.001381134980133E-5	DESIGN
A collection of components...	WITHOUT_CLASSIFICATION	0.9999945712512626	WITHOUT_CLASSIFICATION	5.428748737399038E-6	DESIGN
A collection of scalar elements...	WITHOUT_CLASSIFICATION	0.9999973483881375	WITHOUT_CLASSIFICATION	2.6516118626434373E-6	DESIGN
according to both the ANSI-SQL and EJB3 specs, trim can either take exactly one parameter or a variable number of parameters between 1 and 4. from the SQL spec: <trim function> ::= TRIM <left paren> <trim operands> <right paren> <trim operands> ::= [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> <trim specification> ::= LEADING | TRAILING | BOTH If only <trim specification> is omitted, BOTH is assumed; if <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999999996598333	WITHOUT_CLASSIFICATION	3.401666066044085E-10	DESIGN
Don't include sub-classes for implied collection joins or subquery joins.	WITHOUT_CLASSIFICATION	0.9993215489439329	WITHOUT_CLASSIFICATION	6.784510560671866E-4	DESIGN
Treat explict from elements in sub-queries properly.	WITHOUT_CLASSIFICATION	0.9999939228425105	WITHOUT_CLASSIFICATION	6.077157489522117E-6	DESIGN
( implied && DotNode.useThetaStyleImplicitJoins ) ) {	WITHOUT_CLASSIFICATION	0.9999434734116013	WITHOUT_CLASSIFICATION	5.652658839868812E-5	DESIGN
the "root from-element" in correlated subqueries do need this piece	WITHOUT_CLASSIFICATION	0.9998095920298459	WITHOUT_CLASSIFICATION	1.9040797015422648E-4	DESIGN
Create the FROM element for the target (the elements of the collection).	WITHOUT_CLASSIFICATION	0.9999999996330804	WITHOUT_CLASSIFICATION	3.669196679512139E-10	DESIGN
If the join is implied, then don't include sub-classes on the element.	WITHOUT_CLASSIFICATION	0.9999999728754227	WITHOUT_CLASSIFICATION	2.712457730041811E-8	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999968770692844	WITHOUT_CLASSIFICATION	3.122930715600175E-5	DESIGN
The associated entity is implied, but it must be included in the FROM. The collection alias is the role.	WITHOUT_CLASSIFICATION	0.9998273139956537	WITHOUT_CLASSIFICATION	1.7268600434622539E-4	DESIGN
Tag this node as a JOIN. Don't include subclasses in the join. This is a clollection join.	WITHOUT_CLASSIFICATION	0.9999998300763913	WITHOUT_CLASSIFICATION	1.6992360875304523E-7	DESIGN
Get the class name of the associated entity.	WITHOUT_CLASSIFICATION	0.9999418133752548	WITHOUT_CLASSIFICATION	5.818662474513572E-5	DESIGN
origin, path, implied, columns, classAlias,	WITHOUT_CLASSIFICATION	0.9999971231243358	WITHOUT_CLASSIFICATION	2.8768756641809425E-6	DESIGN
implied	WITHOUT_CLASSIFICATION	0.9994821386976618	WITHOUT_CLASSIFICATION	5.178613023381511E-4	DESIGN
For implied many-to-many, just add the end join.	WITHOUT_CLASSIFICATION	0.9999995925142459	WITHOUT_CLASSIFICATION	4.074857540671662E-7	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999968770692844	WITHOUT_CLASSIFICATION	3.122930715600175E-5	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999968770692844	WITHOUT_CLASSIFICATION	3.122930715600175E-5	DESIGN
the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999994778928525	WITHOUT_CLASSIFICATION	5.221071475021053E-7	DESIGN
This causes the factory to instantiate the desired class.	WITHOUT_CLASSIFICATION	0.9999972076960421	WITHOUT_CLASSIFICATION	2.792303958029365E-6	DESIGN
private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9994894933114435	WITHOUT_CLASSIFICATION	5.10506688556499E-4	DESIGN
Frontbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9998569846031703	WITHOUT_CLASSIFICATION	1.4301539682978922E-4	DESIGN
The types represented in the SQL result set. @return The types represented in the SQL result set.	WITHOUT_CLASSIFICATION	0.9999878766263375	WITHOUT_CLASSIFICATION	1.2123373662523628E-5	DESIGN
public Type[] getSqlResultTypes() {return sqlResultTypes;}	WITHOUT_CLASSIFICATION	0.9991170185886129	WITHOUT_CLASSIFICATION	8.829814113871833E-4	DESIGN
First, collect all of the select expressions. NOTE: This must be done before invoking setScalarColumnText() because setScalarColumnText() changes the AST!!!	WITHOUT_CLASSIFICATION	0.9999013491904754	WITHOUT_CLASSIFICATION	9.865080952458918E-5	DESIGN
First allow the actual type to control the return value. (the actual underlying sqltype could actually be different)	WITHOUT_CLASSIFICATION	0.999409187928241	WITHOUT_CLASSIFICATION	5.908120717590013E-4	DESIGN
sqlResultTypeList.addAll( constructorArgumentTypeList );	WITHOUT_CLASSIFICATION	0.9999994280477104	WITHOUT_CLASSIFICATION	5.719522896950177E-7	DESIGN
If the data type is not an association type, it could not have been in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999989709638175	WITHOUT_CLASSIFICATION	1.0290361824483339E-6	DESIGN
sqlResultTypeList.add( type );	WITHOUT_CLASSIFICATION	0.9999987745368076	WITHOUT_CLASSIFICATION	1.2254631924417381E-6	DESIGN
Always add the type to the return type list.	WITHOUT_CLASSIFICATION	0.9999944600197438	WITHOUT_CLASSIFICATION	5.5399802561417246E-6	DESIGN
add the fetched entities	WITHOUT_CLASSIFICATION	0.9999942455522517	WITHOUT_CLASSIFICATION	5.754447748340343E-6	DESIGN
Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999991884415939	WITHOUT_CLASSIFICATION	8.115584061367598E-7	DESIGN
function support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999543123461186	WITHOUT_CLASSIFICATION	4.568765388130582E-5	DESIGN
If there are any scalars (non-entities) selected, render the select column aliases.	WITHOUT_CLASSIFICATION	0.9999999971149589	WITHOUT_CLASSIFICATION	2.8850412424688388E-9	DESIGN
sqlResultTypeList,	WITHOUT_CLASSIFICATION	0.9999983052087629	WITHOUT_CLASSIFICATION	1.6947912371450717E-6	DESIGN
ArrayList sqlResultTypeList,	WITHOUT_CLASSIFICATION	0.9999999262776734	WITHOUT_CLASSIFICATION	7.37223266215467E-8	DESIGN
sqlResultTypes = ( Type[] ) sqlResultTypeList.toArray( new Type[sqlResultTypeList.size()] );	WITHOUT_CLASSIFICATION	0.9999999871213561	WITHOUT_CLASSIFICATION	1.2878643904922469E-8	DESIGN
lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999668807598832	WITHOUT_CLASSIFICATION	3.311924011688182E-5	DESIGN
TODO:	WITHOUT_CLASSIFICATION	0.9824124079713651	WITHOUT_CLASSIFICATION	0.017587592028634965	DESIGN
Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999993889142108	WITHOUT_CLASSIFICATION	6.110857891957793E-7	DESIGN
Generate an 2d array of column names, the first dimension is parallel with the return types array. The second dimension is the list of column names for each type.	WITHOUT_CLASSIFICATION	0.9999999999249052	WITHOUT_CLASSIFICATION	7.509488912816986E-11	DESIGN
Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999997430307065	WITHOUT_CLASSIFICATION	2.5696929350671177E-7	DESIGN
union subclass support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999018777269132	WITHOUT_CLASSIFICATION	9.812227308670678E-5	DESIGN
Skip 'DISTINCT' and 'ALL', so we return the first expression node.	WITHOUT_CLASSIFICATION	0.99999996781147	WITHOUT_CLASSIFICATION	3.218852995314465E-8	DESIGN
Create SQL_TOKEN nodes for the columns.	WITHOUT_CLASSIFICATION	0.9999987437030888	WITHOUT_CLASSIFICATION	1.2562969112590985E-6	DESIGN
Generate the property select tokens.	WITHOUT_CLASSIFICATION	0.9999889238275829	WITHOUT_CLASSIFICATION	1.1076172417239754E-5	DESIGN
Get the function name node.	WITHOUT_CLASSIFICATION	0.999998598520111	WITHOUT_CLASSIFICATION	1.401479889071003E-6	DESIGN
Method expressions in a SELECT should always be considered scalar.	WITHOUT_CLASSIFICATION	0.9957718140883782	WITHOUT_CLASSIFICATION	0.004228185911621786	DESIGN
If this is 'elements' then create a new FROM element.	WITHOUT_CLASSIFICATION	0.9999999294488228	WITHOUT_CLASSIFICATION	7.055117726888641E-8	DESIGN
Not elements(x)	WITHOUT_CLASSIFICATION	0.9999633729509374	WITHOUT_CLASSIFICATION	3.662704906260825E-5	DESIGN
Dialect function	WITHOUT_CLASSIFICATION	0.9999989212689142	WITHOUT_CLASSIFICATION	1.0787310857819293E-6	DESIGN
Collection 'property function'	WITHOUT_CLASSIFICATION	0.9999800394187045	WITHOUT_CLASSIFICATION	1.996058129541621E-5	DESIGN
If the constant is an IDENT, figure out what it means...	WITHOUT_CLASSIFICATION	0.9999974876794651	WITHOUT_CLASSIFICATION	2.5123205349931082E-6	DESIGN
IDENT is a class alias in the FROM.	WITHOUT_CLASSIFICATION	0.9999996204737401	WITHOUT_CLASSIFICATION	3.7952625989501164E-7	DESIGN
Resolve to an identity column.	WITHOUT_CLASSIFICATION	0.9904493775812542	WITHOUT_CLASSIFICATION	0.00955062241874576	DESIGN
Otherwise, it's a literal.	WITHOUT_CLASSIFICATION	0.9999856229236443	WITHOUT_CLASSIFICATION	1.437707635555247E-5	DESIGN
the name of an entity class	WITHOUT_CLASSIFICATION	0.999983379590577	WITHOUT_CLASSIFICATION	1.6620409422976164E-5	DESIGN
the class discriminator value	WITHOUT_CLASSIFICATION	0.9999804056044491	WITHOUT_CLASSIFICATION	1.959439555096691E-5	DESIGN
Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999993480580286	WITHOUT_CLASSIFICATION	6.519419714021096E-7	DESIGN
Add a space before the display text.	WITHOUT_CLASSIFICATION	0.9999997979284123	WITHOUT_CLASSIFICATION	2.020715877821227E-7	DESIGN
Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999999651359427	WITHOUT_CLASSIFICATION	3.4864057367328704E-8	DESIGN
child == parent.getFirstChild()	WITHOUT_CLASSIFICATION	0.9999985457235886	WITHOUT_CLASSIFICATION	1.4542764113936038E-6	DESIGN
Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999999651359427	WITHOUT_CLASSIFICATION	3.4864057367328704E-8	DESIGN
Filter conditions need to be inserted before the HQL where condition and the theta join node. This is because org.hibernate.loader.Loader binds the filter parameters first, then it binds all the HQL query parameters, see org.hibernate.loader.Loader.processFilterParameters().	WITHOUT_CLASSIFICATION	0.9999999965084723	WITHOUT_CLASSIFICATION	3.491527778654074E-9	DESIGN
Put the FILTERS node before the HQL condition and theta joins	WITHOUT_CLASSIFICATION	0.9999996533583423	WITHOUT_CLASSIFICATION	3.4664165769368246E-7	DESIGN
add the current fragment to the FILTERS node	WITHOUT_CLASSIFICATION	0.999995346801837	WITHOUT_CLASSIFICATION	4.6531981629902955E-6	DESIGN
Create a new THETA_JOINS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999999148782974	WITHOUT_CLASSIFICATION	8.512170266785311E-8	DESIGN
Put the THETA_JOINS node before the HQL condition, after the filters.	WITHOUT_CLASSIFICATION	0.9999999448576925	WITHOUT_CLASSIFICATION	5.514230762084481E-8	DESIGN
add the current fragment to the THETA_JOINS node	WITHOUT_CLASSIFICATION	0.9999933030394276	WITHOUT_CLASSIFICATION	6.696960572500739E-6	DESIGN
First, try to get the persister using the given name directly.	WITHOUT_CLASSIFICATION	0.9999986482068344	WITHOUT_CLASSIFICATION	1.3517931657056945E-6	DESIGN
unable to locate it using this name	WITHOUT_CLASSIFICATION	0.9999438191706559	WITHOUT_CLASSIFICATION	5.618082934408929E-5	DESIGN
If that didn't work, try using the 'import' name.	WITHOUT_CLASSIFICATION	0.9999859459574826	WITHOUT_CLASSIFICATION	1.4054042517388664E-5	DESIGN
Implicit joins use theta style (WHERE pk = fk), explicit joins use JOIN (after from)	WITHOUT_CLASSIFICATION	0.9999933762168807	WITHOUT_CLASSIFICATION	6.623783119384397E-6	DESIGN
locate the registered function by the given name	WITHOUT_CLASSIFICATION	0.9999999975808876	WITHOUT_CLASSIFICATION	2.419112251505063E-9	DESIGN
determine the type of the first argument...	WITHOUT_CLASSIFICATION	0.9999604384126178	WITHOUT_CLASSIFICATION	3.9561587382287736E-5	DESIGN
Use the DOT node to emit the first column name. Create the column names, folled by the column aliases.	WITHOUT_CLASSIFICATION	0.9999999932987724	WITHOUT_CLASSIFICATION	6.701227491045117E-9	DESIGN
Note: this simply constructs a "raw" SQL_TOKEN representing the where fragment and injects this into the tree. This "works"; however it is probably not the best long-term solution. At some point we probably want to apply an additional grammar to properly tokenize this where fragment into constituent parts focused on the operators embedded within the fragment.	WITHOUT_CLASSIFICATION	0.9999999215346075	DESIGN	7.846539248712476E-8	WITHOUT_CLASSIFICATION
Append the text of the current node.	WITHOUT_CLASSIFICATION	0.9999997978485874	WITHOUT_CLASSIFICATION	2.0215141253351647E-7	DESIGN
If the node has a first child, recurse into the first child.	WITHOUT_CLASSIFICATION	0.9999999994107397	WITHOUT_CLASSIFICATION	5.892603473217777E-10	DESIGN
If there is a second child (RHS), recurse into that child.	WITHOUT_CLASSIFICATION	0.9999992033509059	WITHOUT_CLASSIFICATION	7.966490941931901E-7	DESIGN
Iterate through the alias,JoinSequence pairs and generate SQL token nodes.	WITHOUT_CLASSIFICATION	0.9999991012866932	WITHOUT_CLASSIFICATION	8.987133067985764E-7	DESIGN
If the from element represents a JOIN_FRAGMENT and it is a theta-style join, convert its type from JOIN_FRAGMENT to FROM_FRAGMENT	WITHOUT_CLASSIFICATION	0.9999999966130125	WITHOUT_CLASSIFICATION	3.386987428370253E-9	DESIGN
this is used during SqlGenerator processing	WITHOUT_CLASSIFICATION	0.9966152853434967	WITHOUT_CLASSIFICATION	0.003384714656503284	DESIGN
If there is a FROM fragment and the FROM element is an explicit, then add the from part.	WITHOUT_CLASSIFICATION	0.9999822873132173	WITHOUT_CLASSIFICATION	1.7712686782793537E-5	DESIGN
&& StringHelper.isNotEmpty( frag )	WITHOUT_CLASSIFICATION	0.9999957095051984	WITHOUT_CLASSIFICATION	4.290494801582724E-6	DESIGN
The FROM fragment will probably begin with ', '. Remove this if it is present.	WITHOUT_CLASSIFICATION	0.9961348649476786	WITHOUT_CLASSIFICATION	0.003865135052321582	DESIGN
This uses a PathExpressionParser but notice that compound paths are not valid, only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9999966579661822	WITHOUT_CLASSIFICATION	3.342033817834402E-6	DESIGN
SELECT p FROM p IN CLASS eg.Person ORDER BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999998962070038	WITHOUT_CLASSIFICATION	1.0379299618094918E-7	DESIGN
The reason for this is SQL doesn't let you sort by an expression you are not returning in the result set.	WITHOUT_CLASSIFICATION	0.999998666215706	WITHOUT_CLASSIFICATION	1.3337842940421323E-6	DESIGN
named query parameter	WITHOUT_CLASSIFICATION	0.999041963188539	WITHOUT_CLASSIFICATION	9.580368114609652E-4	DESIGN
default mode	WITHOUT_CLASSIFICATION	0.9999518854870127	WITHOUT_CLASSIFICATION	4.811451298732627E-5	DESIGN
QueryJoinFragment join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999999573018035	WITHOUT_CLASSIFICATION	4.2698196512228225E-8	DESIGN
reset the dotcount (but not the path) after reset!	WITHOUT_CLASSIFICATION	0.9999999137946605	WITHOUT_CLASSIFICATION	8.620533954323461E-8	DESIGN
after reset!	WITHOUT_CLASSIFICATION	0.9999980872082509	WITHOUT_CLASSIFICATION	1.9127917491283168E-6	DESIGN
we don't need to worry about any condition in the ON clause here (toFromFragmentString), since anything in the ON condition is already applied to the whole query	WITHOUT_CLASSIFICATION	0.9999187247012127	WITHOUT_CLASSIFICATION	8.127529878742295E-5	DESIGN
bit_length feels a bit broken to me. We have to cast to char in order to pass when a numeric value is supplied. But of course the answers given will be wildly different for these two datatypes. 1234.5678 will be 9 bytes as a char string but will be 8 or 16 bytes as a true numeric. Jay Nance 2006-09-22	WITHOUT_CLASSIFICATION	0.9848215745454816	WITHOUT_CLASSIFICATION	0.015178425454518422	DESIGN
dotcount>=2	WITHOUT_CLASSIFICATION	0.9999336394305306	WITHOUT_CLASSIFICATION	6.636056946946874E-5	DESIGN
Do the corresponding RHS	WITHOUT_CLASSIFICATION	0.9999880672538735	WITHOUT_CLASSIFICATION	1.1932746126662372E-5	DESIGN
if its "id"	WITHOUT_CLASSIFICATION	0.9999964246160118	WITHOUT_CLASSIFICATION	3.575383988222811E-6	DESIGN
or its the id property name	WITHOUT_CLASSIFICATION	0.9999567206885956	WITHOUT_CLASSIFICATION	4.3279311404337385E-5	DESIGN
join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999999647688322	WITHOUT_CLASSIFICATION	3.523116774148675E-8	DESIGN
important!!	WITHOUT_CLASSIFICATION	0.9999716386393819	WITHOUT_CLASSIFICATION	2.836136061814758E-5	DESIGN
String[] keyCols = collPersister.getKeyColumnNames();	WITHOUT_CLASSIFICATION	0.9999998544525928	WITHOUT_CLASSIFICATION	1.455474072156069E-7	DESIGN
an association	WITHOUT_CLASSIFICATION	0.999996452553447	WITHOUT_CLASSIFICATION	3.5474465529872245E-6	DESIGN
allow index() function:	WITHOUT_CLASSIFICATION	0.9999991199492066	WITHOUT_CLASSIFICATION	8.800507933083961E-7	DESIGN
here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9999005854230609	WITHOUT_CLASSIFICATION	9.941457693909095E-5	DESIGN
The reason for this is SQL doesn't let you sort by an expression you are not returning in the result set.	WITHOUT_CLASSIFICATION	0.999998666215706	WITHOUT_CLASSIFICATION	1.3337842940421323E-6	DESIGN
many-to-many	WITHOUT_CLASSIFICATION	0.999967438775338	WITHOUT_CLASSIFICATION	3.256122466198546E-5	DESIGN
collections of values	WITHOUT_CLASSIFICATION	0.9999920646687895	WITHOUT_CLASSIFICATION	7.935331210439972E-6	DESIGN
opening paren in new Foo ( ... )	WITHOUT_CLASSIFICATION	0.9969283728972854	WITHOUT_CLASSIFICATION	0.003071627102714522	DESIGN
if we are inside a new Result(), but not inside a nested function	WITHOUT_CLASSIFICATION	0.9999999247962998	WITHOUT_CLASSIFICATION	7.520370015825405E-8	DESIGN
special case	WITHOUT_CLASSIFICATION	0.9999994148541669	WITHOUT_CLASSIFICATION	5.85145833122551E-7	DESIGN
the name of an SQL function	WITHOUT_CLASSIFICATION	0.9999994173326086	WITHOUT_CLASSIFICATION	5.826673915065159E-7	DESIGN
null child could occur for no from clause in a filter	WITHOUT_CLASSIFICATION	0.9991452491412668	WITHOUT_CLASSIFICATION	8.547508587331063E-4	DESIGN
this is basically a copy/paste of OrderByParser ... might be worth refactoring	WITHOUT_CLASSIFICATION	0.9940843942523083	DESIGN	0.00591560574769168	WITHOUT_CLASSIFICATION
SELECT p FROM p IN CLASS eg.Person GROUP BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999962333213982	WITHOUT_CLASSIFICATION	3.7666786018457E-6	DESIGN
return aliases not supported in classic translator!	WITHOUT_CLASSIFICATION	0.9998184952591679	WITHOUT_CLASSIFICATION	1.8150474083207025E-4	DESIGN
register collection role	WITHOUT_CLASSIFICATION	0.9999935956125027	WITHOUT_CLASSIFICATION	6.404387497361447E-6	DESIGN
The keyword used to specify an identity column, if identity column key generation is supported.	WITHOUT_CLASSIFICATION	0.9999974141047935	WITHOUT_CLASSIFICATION	2.585895206573354E-6	DESIGN
.getElementPropertyMapping();	WITHOUT_CLASSIFICATION	0.9999972746278043	WITHOUT_CLASSIFICATION	2.7253721956281E-6	DESIGN
crossJoins.add(name);	WITHOUT_CLASSIFICATION	0.9997175153272785	WITHOUT_CLASSIFICATION	2.824846727215833E-4	DESIGN
ie no select clause in HQL	WITHOUT_CLASSIFICATION	0.9999992719999667	WITHOUT_CLASSIFICATION	7.280000331707192E-7	DESIGN
initialize the Set of queried identifier spaces (ie. tables)	WITHOUT_CLASSIFICATION	0.9999973890867989	WITHOUT_CLASSIFICATION	2.610913201129138E-6	DESIGN
ie. no select clause	WITHOUT_CLASSIFICATION	0.9999999461380336	WITHOUT_CLASSIFICATION	5.386196655907812E-8	DESIGN
there _was_ a select clause	WITHOUT_CLASSIFICATION	0.999999761598433	WITHOUT_CLASSIFICATION	2.3840156711536733E-7	DESIGN
return the concrete type, or the underlying type if a concrete type was not specified	WITHOUT_CLASSIFICATION	0.9999880728407728	WITHOUT_CLASSIFICATION	1.1927159227159287E-5	DESIGN
many-to-many	WITHOUT_CLASSIFICATION	0.999967438775338	WITHOUT_CLASSIFICATION	3.256122466198546E-5	DESIGN
q.addCollection(collectionName, collectionRole);	WITHOUT_CLASSIFICATION	0.9999998935243015	WITHOUT_CLASSIFICATION	1.0647569850549489E-7	DESIGN
classic parser does not support bulk manipulation statements	WITHOUT_CLASSIFICATION	0.9978589302535948	WITHOUT_CLASSIFICATION	0.002141069746405189	DESIGN
can't cache this stuff either (per-invocation)	WITHOUT_CLASSIFICATION	0.9999942110950533	WITHOUT_CLASSIFICATION	5.788904946720155E-6	DESIGN
unfortunately this stuff can't be cached because it is per-invocation, not constant for the QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9982242489225638	WITHOUT_CLASSIFICATION	0.0017757510774361893	DESIGN
This is the legacy behaviour for HQL queries...	WITHOUT_CLASSIFICATION	0.9999546988102074	WITHOUT_CLASSIFICATION	4.530118979268325E-5	DESIGN
not known!	WITHOUT_CLASSIFICATION	0.9962325410660487	WITHOUT_CLASSIFICATION	0.003767458933951194	DESIGN
not known!	WITHOUT_CLASSIFICATION	0.9962325410660487	WITHOUT_CLASSIFICATION	0.003767458933951194	DESIGN
we have the form: trim(trimSource) so we trim leading and trailing spaces EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999962919987871	WITHOUT_CLASSIFICATION	3.708001212832447E-6	DESIGN
not known!	WITHOUT_CLASSIFICATION	0.9962325410660487	WITHOUT_CLASSIFICATION	0.003767458933951194	DESIGN
not known!	WITHOUT_CLASSIFICATION	0.9962325410660487	WITHOUT_CLASSIFICATION	0.003767458933951194	DESIGN
Need this, since join condition can appear inside parens!	WITHOUT_CLASSIFICATION	0.9785790284415908	WITHOUT_CLASSIFICATION	0.02142097155840914	DESIGN
tokens that close a sub expression tokens that open a sub expression tokens that would indicate a sub expression is a boolean expression	WITHOUT_CLASSIFICATION	0.9999999042572646	WITHOUT_CLASSIFICATION	9.574273540433472E-8	DESIGN
expressionTerminators.add(","); deliberately excluded	WITHOUT_CLASSIFICATION	0.9998768374200847	WITHOUT_CLASSIFICATION	1.2316257991523845E-4	DESIGN
expressionOpeners.add(","); deliberately excluded	WITHOUT_CLASSIFICATION	0.9999871892070731	WITHOUT_CLASSIFICATION	1.2810792926925819E-5	DESIGN
we have the form: trim(from trimSource). This is functionally equivalent to trim(trimSource) EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9997562540762565	WITHOUT_CLASSIFICATION	2.4374592374340188E-4	DESIGN
otherwise, a trim-specification and/or a trim-character have been specified; we need to decide which options are present and "do the right thing" should leading trim-characters be trimmed? should trailing trim-characters be trimmed? the trim-character (what is to be trimmed off?) the trim-source (from where should it be trimmed?)	WITHOUT_CLASSIFICATION	0.9984897703912089	WITHOUT_CLASSIFICATION	0.0015102296087911268	DESIGN
Inside a BETWEEN ... AND ... expression	WITHOUT_CLASSIFICATION	0.9992764429504891	WITHOUT_CLASSIFICATION	7.235570495109721E-4	DESIGN
were an odd or even number of NOTs encountered the join string built up by compound paths inside this expression a flag indicating if the subexpression is known to be boolean	WITHOUT_CLASSIFICATION	0.9999999829388428	WITHOUT_CLASSIFICATION	1.7061157205794473E-8	DESIGN
ie. a many-to-many	WITHOUT_CLASSIFICATION	0.9999797311451715	WITHOUT_CLASSIFICATION	2.0268854828503132E-5	DESIGN
Cope with [,]	WITHOUT_CLASSIFICATION	0.9999593790843914	WITHOUT_CLASSIFICATION	4.0620915608567366E-5	DESIGN
Cope with a continued path expression (ie. ].baz)	WITHOUT_CLASSIFICATION	0.9998609659634032	WITHOUT_CLASSIFICATION	1.390340365968049E-4	DESIGN
NOTE: early return	WITHOUT_CLASSIFICATION	0.9999678945977356	WITHOUT_CLASSIFICATION	3.2105402264451416E-5	DESIGN
Cope with a subselect	WITHOUT_CLASSIFICATION	0.9999676897366432	WITHOUT_CLASSIFICATION	3.231026335689534E-5	DESIGN
Cope with special cases of AND, NOT, ()	WITHOUT_CLASSIFICATION	0.9999929735553389	WITHOUT_CLASSIFICATION	7.026444661059906E-6	DESIGN
Close extra brackets we opened	WITHOUT_CLASSIFICATION	0.999992649011594	WITHOUT_CLASSIFICATION	7.350988406038184E-6	DESIGN
take note when this is a boolean expression	WITHOUT_CLASSIFICATION	0.9999610441193223	WITHOUT_CLASSIFICATION	3.8955880677702445E-5	DESIGN
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999999397940396	WITHOUT_CLASSIFICATION	6.020596049596764E-8	DESIGN
process a token, mapping OO path expressions to SQL expressions	WITHOUT_CLASSIFICATION	0.9999991862896409	WITHOUT_CLASSIFICATION	8.137103592258722E-7	DESIGN
Open any extra brackets we might need.	WITHOUT_CLASSIFICATION	0.8173102979910073	WITHOUT_CLASSIFICATION	0.1826897020089928	DESIGN
Cope with special cases of AND, NOT, )	WITHOUT_CLASSIFICATION	0.9999421346437596	WITHOUT_CLASSIFICATION	5.786535624036879E-5	DESIGN
the next one up must also be	WITHOUT_CLASSIFICATION	0.9997509930140402	WITHOUT_CLASSIFICATION	2.4900698595978687E-4	DESIGN
Add any joins	WITHOUT_CLASSIFICATION	0.9999987402638373	WITHOUT_CLASSIFICATION	1.259736162691265E-6	DESIGN
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999999397940396	WITHOUT_CLASSIFICATION	6.020596049596764E-8	DESIGN
named query parameter	WITHOUT_CLASSIFICATION	0.999041963188539	WITHOUT_CLASSIFICATION	9.580368114609652E-4	DESIGN
path expression	WITHOUT_CLASSIFICATION	0.9999955932284663	WITHOUT_CLASSIFICATION	4.406771533689362E-6	DESIGN
saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999999858342068	WITHOUT_CLASSIFICATION	1.416579326160269E-8	DESIGN
persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999998579963357	WITHOUT_CLASSIFICATION	1.4200366419238353E-7	DESIGN
anything else	WITHOUT_CLASSIFICATION	0.9999990750084629	WITHOUT_CLASSIFICATION	9.24991537077489E-7	DESIGN
the path expression continues after a ]	WITHOUT_CLASSIFICATION	0.9999466653991802	WITHOUT_CLASSIFICATION	5.3334600819744205E-5	DESIGN
careful with this!	WITHOUT_CLASSIFICATION	0.9999193233070174	WITHOUT_CLASSIFICATION	8.067669298262888E-5	DESIGN
the path expression ends at the ]	WITHOUT_CLASSIFICATION	0.9999299894094458	WITHOUT_CLASSIFICATION	7.001059055422666E-5	DESIGN
"finish off" the join	WITHOUT_CLASSIFICATION	0.9999992143003704	WITHOUT_CLASSIFICATION	7.856996295771829E-7	DESIGN
NOTICE: no " or . since they are part of (compound) identifiers	WITHOUT_CLASSIFICATION	0.9994376396049276	WITHOUT_CLASSIFICATION	5.623603950724954E-4	DESIGN
cannot instantiate	WITHOUT_CLASSIFICATION	0.9999924646560688	WITHOUT_CLASSIFICATION	7.535343931155252E-6	DESIGN
start by looking for HQL keywords...	WITHOUT_CLASSIFICATION	0.9999996169239043	WITHOUT_CLASSIFICATION	3.830760957650172E-7	DESIGN
inner joins can be abbreviated to 'join'	WITHOUT_CLASSIFICATION	0.9999200107705551	WITHOUT_CLASSIFICATION	7.998922944487305E-5	DESIGN
'outer' is optional and is ignored	WITHOUT_CLASSIFICATION	0.9999999958691691	WITHOUT_CLASSIFICATION	4.1308308406796926E-9	DESIGN
now anything that is not a HQL keyword	WITHOUT_CLASSIFICATION	0.9999973258495869	WITHOUT_CLASSIFICATION	2.6741504131382745E-6	DESIGN
process the "old" HQL style where aliases appear _first_ ie. using the IN or IN CLASS constructions	WITHOUT_CLASSIFICATION	0.9999996070809445	WITHOUT_CLASSIFICATION	3.9291905548948373E-7	DESIGN
treat it as a classname	WITHOUT_CLASSIFICATION	0.9999907448222566	WITHOUT_CLASSIFICATION	9.255177743439055E-6	DESIGN
treat it as a path expression	WITHOUT_CLASSIFICATION	0.9999827784335921	WITHOUT_CLASSIFICATION	1.7221566407947586E-5	DESIGN
starts with the name of a mapped class (new style)	WITHOUT_CLASSIFICATION	0.99996446843951	WITHOUT_CLASSIFICATION	3.553156048994775E-5	DESIGN
starts with a path expression (new style)	WITHOUT_CLASSIFICATION	0.9999883153574374	WITHOUT_CLASSIFICATION	1.1684642562606993E-5	DESIGN
allow ODMG OQL style: from Person p, p.cars c	WITHOUT_CLASSIFICATION	0.9995725706633612	WITHOUT_CLASSIFICATION	4.274293366386861E-4	DESIGN
handle quoted strings	WITHOUT_CLASSIFICATION	0.9998498620421247	WITHOUT_CLASSIFICATION	1.5013795787526666E-4	DESIGN
Object insertions, updates, and deletions have list semantics because they must happen in the right order so as to respect referential integrity	WITHOUT_CLASSIFICATION	0.999998390227511	WITHOUT_CLASSIFICATION	1.6097724889265185E-6	DESIGN
"finish off" the join	WITHOUT_CLASSIFICATION	0.9999992143003704	WITHOUT_CLASSIFICATION	7.856996295771829E-7	DESIGN
ignore whitespace	WITHOUT_CLASSIFICATION	0.9999998903190767	WITHOUT_CLASSIFICATION	1.0968092335730558E-7	DESIGN
do replacements	WITHOUT_CLASSIFICATION	0.9997914870003669	WITHOUT_CLASSIFICATION	2.0851299963295389E-4	DESIGN
handle HQL2 collection syntax	WITHOUT_CLASSIFICATION	0.9998916477831425	WITHOUT_CLASSIFICATION	1.0835221685746103E-4	DESIGN
uuid.hex is deprecated	WITHOUT_CLASSIFICATION	0.9998566092530193	WITHOUT_CLASSIFICATION	1.4339074698057385E-4	DESIGN
AbstractSelectingDelegate impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999929350589359	WITHOUT_CLASSIFICATION	7.06494106407683E-6	DESIGN
hilo params	WITHOUT_CLASSIFICATION	0.9999949150779364	WITHOUT_CLASSIFICATION	5.084922063663153E-6	DESIGN
sql = query;	WITHOUT_CLASSIFICATION	0.9999960154646208	WITHOUT_CLASSIFICATION	3.984535379274628E-6	DESIGN
performance opt	WITHOUT_CLASSIFICATION	0.9999831247821213	WITHOUT_CLASSIFICATION	1.687521787877388E-5	DESIGN
sql = update;	WITHOUT_CLASSIFICATION	0.9999990688714152	WITHOUT_CLASSIFICATION	9.311285848235467E-7	DESIGN
hilo config	WITHOUT_CLASSIFICATION	0.9999810792646202	WITHOUT_CLASSIFICATION	1.892073537975828E-5	DESIGN
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999998911769197	WITHOUT_CLASSIFICATION	1.0882308028395624E-7	DESIGN
don't allow comments on these insert statements as comments totally blow up the Oracle getGeneratedKeys "support" :(	WITHOUT_CLASSIFICATION	0.9999989543130872	WITHOUT_CLASSIFICATION	1.045686912827874E-6	DESIGN
abort the save (the object is already saved by a circular cascade)	WITHOUT_CLASSIFICATION	0.9951496401306584	WITHOUT_CLASSIFICATION	0.004850359869341512	DESIGN
throw new IdentifierGenerationException("save associated object first, or disable cascade for inverse association");	WITHOUT_CLASSIFICATION	0.9999999852634284	WITHOUT_CLASSIFICATION	1.4736571679435068E-8	DESIGN
intentionally empty	WITHOUT_CLASSIFICATION	0.9999557726236074	WITHOUT_CLASSIFICATION	4.4227376392666636E-5	DESIGN
do nothing to avoid a lazy property initialization	WITHOUT_CLASSIFICATION	0.9999991451328919	WITHOUT_CLASSIFICATION	8.54867108204775E-7	DESIGN
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999995409159502	WITHOUT_CLASSIFICATION	4.590840497256917E-7	DESIGN
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999998911769197	WITHOUT_CLASSIFICATION	1.0882308028395624E-7	DESIGN
do nothing until we hit the rsult set containing the generated id	WITHOUT_CLASSIFICATION	0.9999993196546804	WITHOUT_CLASSIFICATION	6.803453195897882E-7	DESIGN
COLUMN and TABLE should be renamed but it would break the public API	WITHOUT_CLASSIFICATION	0.9298674774338769	WITHOUT_CLASSIFICATION	0.07013252256612314	DESIGN
Loaded entity instances, by EntityKey	WITHOUT_CLASSIFICATION	0.9999924322070075	WITHOUT_CLASSIFICATION	7.5677929924671605E-6	DESIGN
if the given name is un-qualified we may neen to qualify it	WITHOUT_CLASSIFICATION	0.9999817560525598	WITHOUT_CLASSIFICATION	1.824394744014765E-5	DESIGN
the default...	WITHOUT_CLASSIFICATION	0.9999836246429288	WITHOUT_CLASSIFICATION	1.637535707121778E-5	DESIGN
unfortunately not really safe to normalize this to 1 as an initial value like we do the others because we would not be able to control this if we are using a sequence...	WITHOUT_CLASSIFICATION	0.9999999718185653	WITHOUT_CLASSIFICATION	2.8181434658508376E-8	DESIGN
intentionally empty	WITHOUT_CLASSIFICATION	0.9999557726236074	WITHOUT_CLASSIFICATION	4.4227376392666636E-5	DESIGN
Identity map of CollectionEntry instances, by the collection wrapper	WITHOUT_CLASSIFICATION	0.9999999119221256	WITHOUT_CLASSIFICATION	8.807787444982407E-8	DESIGN
general purpose parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999998910691271	WITHOUT_CLASSIFICATION	1.0893087289829925E-6	DESIGN
table-specific parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999991971512979	WITHOUT_CLASSIFICATION	8.028487021002067E-7	DESIGN
Configurable implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999886430877056	WITHOUT_CLASSIFICATION	1.135691229428618E-5	DESIGN
IdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999914841296768	WITHOUT_CLASSIFICATION	8.515870323185843E-6	DESIGN
PersistentIdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999978509919272	WITHOUT_CLASSIFICATION	2.1490080729156817E-6	DESIGN
prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999965477521874	WITHOUT_CLASSIFICATION	3.452247812752938E-6	DESIGN
prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999965477521874	WITHOUT_CLASSIFICATION	3.452247812752938E-6	DESIGN
fetch the generated id in a separate query	WITHOUT_CLASSIFICATION	0.9995982922063671	WITHOUT_CLASSIFICATION	4.017077936329185E-4	DESIGN
we just hit the last position	WITHOUT_CLASSIFICATION	0.9999997252362973	WITHOUT_CLASSIFICATION	2.7476370272449856E-7	DESIGN
scroll ahead	WITHOUT_CLASSIFICATION	0.9999652246658409	WITHOUT_CLASSIFICATION	3.47753341589752E-5	DESIGN
scroll backward	WITHOUT_CLASSIFICATION	0.9999892134790843	WITHOUT_CLASSIFICATION	1.0786520915697387E-5	DESIGN
we have not yet hit the last result...	WITHOUT_CLASSIFICATION	0.9999995159055428	WITHOUT_CLASSIFICATION	4.840944570981659E-7	DESIGN
Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999958471563596	WITHOUT_CLASSIFICATION	4.1528436404085266E-5	DESIGN
State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999957606380332	WITHOUT_CLASSIFICATION	4.239361966840882E-6	DESIGN
Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999916535401776	WITHOUT_CLASSIFICATION	8.346459822428908E-6	DESIGN
do this when all the properties are updateable since there is a certain likelihood that the information will already be snapshot-cached.	WITHOUT_CLASSIFICATION	0.8834737952488533	WITHOUT_CLASSIFICATION	0.11652620475114676	DESIGN
Inner classes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998733129619	WITHOUT_CLASSIFICATION	1.2668703805374089E-7	DESIGN
Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999958471563596	WITHOUT_CLASSIFICATION	4.1528436404085266E-5	DESIGN
State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999957606380332	WITHOUT_CLASSIFICATION	4.239361966840882E-6	DESIGN
Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999916535401776	WITHOUT_CLASSIFICATION	8.346459822428908E-6	DESIGN
Caches	WITHOUT_CLASSIFICATION	0.999972356131769	WITHOUT_CLASSIFICATION	2.7643868230892532E-5	DESIGN
Generators:	WITHOUT_CLASSIFICATION	0.999632947532638	WITHOUT_CLASSIFICATION	3.6705246736205247E-4	DESIGN
cache region is defined by the root-class in the hierarchy...	WITHOUT_CLASSIFICATION	0.9999899575136221	WITHOUT_CLASSIFICATION	1.0042486377898766E-5	DESIGN
check if the detached object being merged is the parent	WITHOUT_CLASSIFICATION	0.9997474729606274	WITHOUT_CLASSIFICATION	2.5252703937260533E-4	DESIGN
after all persisters and named queries are registered	WITHOUT_CLASSIFICATION	0.999994979235305	WITHOUT_CLASSIFICATION	5.020764695071044E-6	DESIGN
if we get here, it is possible that we have a proxy 'in the way' of the merge map resolution... NOTE: decided to put this here rather than in the above loop as I was nervous about the performance of the loop-in-loop especially considering this is far more likely the 'edge case'	WITHOUT_CLASSIFICATION	0.9997519390211783	DESIGN	2.480609788217257E-4	WITHOUT_CLASSIFICATION
JNDI + Serialization:	WITHOUT_CLASSIFICATION	0.9999998643384889	WITHOUT_CLASSIFICATION	1.3566151112345864E-7	DESIGN
checking for named queries	WITHOUT_CLASSIFICATION	0.9916068116525423	WITHOUT_CLASSIFICATION	0.008393188347457689	DESIGN
stats	WITHOUT_CLASSIFICATION	0.9999423777643884	WITHOUT_CLASSIFICATION	5.76222356114945E-5	DESIGN
EntityNotFoundDelegate	WITHOUT_CLASSIFICATION	0.998830092165216	WITHOUT_CLASSIFICATION	0.001169907834784016	DESIGN
Check named HQL queries	WITHOUT_CLASSIFICATION	0.9999918751148988	WITHOUT_CLASSIFICATION	8.124885101092742E-6	DESIGN
this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9533953643580734	WITHOUT_CLASSIFICATION	0.04660463564192662	DESIGN
prevents this session from adding things to cache	WITHOUT_CLASSIFICATION	0.9977169053944579	WITHOUT_CLASSIFICATION	0.002283094605542068	DESIGN
from javax.naming.Referenceable	WITHOUT_CLASSIFICATION	0.9995309345892259	WITHOUT_CLASSIFICATION	4.690654107740009E-4	DESIGN
look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999481414607743	WITHOUT_CLASSIFICATION	5.185853922572516E-5	DESIGN
for a dynamic-class	WITHOUT_CLASSIFICATION	0.999995528751355	WITHOUT_CLASSIFICATION	4.471248644984149E-6	DESIGN
test this entity to see if we must query it	WITHOUT_CLASSIFICATION	0.9999049955918539	WITHOUT_CLASSIFICATION	9.50044081462377E-5	DESIGN
NOTE EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999942366710579	WITHOUT_CLASSIFICATION	5.76332894205367E-6	DESIGN
for backward-compatability	WITHOUT_CLASSIFICATION	0.9999913404842635	WITHOUT_CLASSIFICATION	8.65951573649693E-6	DESIGN
ignore this error for now	WITHOUT_CLASSIFICATION	0.9999955217476222	WITHOUT_CLASSIFICATION	4.478252377713746E-6	DESIGN
to stop the class from being unloaded	WITHOUT_CLASSIFICATION	0.9999989675797529	WITHOUT_CLASSIFICATION	1.0324202470282781E-6	DESIGN
in case we were deserialized in a different JVM, look for an instance with the same name (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.7423445281619565	WITHOUT_CLASSIFICATION	0.25765547183804355	DESIGN
must add to JNDI _after_ adding to HashMaps, because some JNDI servers use serialization	WITHOUT_CLASSIFICATION	0.9999998652170317	WITHOUT_CLASSIFICATION	1.347829682878924E-7	DESIGN
Make sure this is a defined parameter and check the incoming value type	WITHOUT_CLASSIFICATION	0.9999856611200727	WITHOUT_CLASSIFICATION	1.4338879927328423E-5	DESIGN
for each of the defined parameters, make sure its value has been set	WITHOUT_CLASSIFICATION	0.9999977461731864	WITHOUT_CLASSIFICATION	2.253826813517789E-6	DESIGN
we never need to apply locks to the SQL	WITHOUT_CLASSIFICATION	0.9998993127434851	WITHOUT_CLASSIFICATION	1.0068725651487436E-4	DESIGN
inserts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999966132121304	WITHOUT_CLASSIFICATION	3.386787869678859E-6	DESIGN
deletes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999919515395442	WITHOUT_CLASSIFICATION	8.04846045569772E-6	DESIGN
during deserialization, we need to reconnect all proxies and collections to this session, as well as the EntityEntry and CollectionEntry instances; these associations are transient because serialization is used for different things.	WITHOUT_CLASSIFICATION	0.956985163781781	WITHOUT_CLASSIFICATION	0.043014836218218964	DESIGN
updates ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999906026463756	WITHOUT_CLASSIFICATION	9.397353624456384E-6	DESIGN
loading ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996860866638	WITHOUT_CLASSIFICATION	3.139133362950549E-7	DESIGN
final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999995843831005	WITHOUT_CLASSIFICATION	4.156168995210403E-7	DESIGN
final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999995843831005	WITHOUT_CLASSIFICATION	4.156168995210403E-7	DESIGN
first, try to load it from the temp PC associated to this SS	WITHOUT_CLASSIFICATION	0.9999970018752119	WITHOUT_CLASSIFICATION	2.9981247880076418E-6	DESIGN
if the metadata allowed proxy creation and caller did not request forceful eager loading, generate a proxy	WITHOUT_CLASSIFICATION	0.9999999996771581	WITHOUT_CLASSIFICATION	3.2284182493821835E-10	DESIGN
otherwise immediately materialize it	WITHOUT_CLASSIFICATION	0.9999194308074661	WITHOUT_CLASSIFICATION	8.056919253387507E-5	DESIGN
/	WITHOUT_CLASSIFICATION	0.9999404455295717	WITHOUT_CLASSIFICATION	5.9554470428206114E-5	DESIGN
no auto-flushing to support in stateless session	WITHOUT_CLASSIFICATION	0.9998557304975636	WITHOUT_CLASSIFICATION	1.4426950243637753E-4	DESIGN
after setting values to object, entityMode	WITHOUT_CLASSIFICATION	0.9998707431140468	WITHOUT_CLASSIFICATION	1.292568859532388E-4	DESIGN
for EJB3	WITHOUT_CLASSIFICATION	0.9999782552098083	WITHOUT_CLASSIFICATION	2.174479019161172E-5	DESIGN
just ignore	WITHOUT_CLASSIFICATION	0.9999976786158172	WITHOUT_CLASSIFICATION	2.3213841827693184E-6	DESIGN
do a check	WITHOUT_CLASSIFICATION	0.999740654879118	WITHOUT_CLASSIFICATION	2.59345120881942E-4	DESIGN
saveOrUpdate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999484535232	WITHOUT_CLASSIFICATION	5.15464766483535E-8	DESIGN
update() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999501508187	WITHOUT_CLASSIFICATION	4.984918130261059E-7	DESIGN
lock() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999233314635	WITHOUT_CLASSIFICATION	7.66685365362397E-8	DESIGN
persist() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998401780574	WITHOUT_CLASSIFICATION	1.598219425561587E-7	DESIGN
persistOnFlush() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998934245355	WITHOUT_CLASSIFICATION	1.0657546440238778E-7	DESIGN
merge() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998209943051	WITHOUT_CLASSIFICATION	1.790056949385319E-7	DESIGN
saveOrUpdateCopy() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999405484173	WITHOUT_CLASSIFICATION	5.945158256644535E-8	DESIGN
delete() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998638104972	WITHOUT_CLASSIFICATION	1.3618950281719597E-7	DESIGN
load()/get() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999577531329	WITHOUT_CLASSIFICATION	4.2246867107158305E-8	DESIGN
refresh() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998089960753	WITHOUT_CLASSIFICATION	1.9100392473235763E-7	DESIGN
replicate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993985053206	WITHOUT_CLASSIFICATION	6.014946794688163E-7	DESIGN
do not auto-flush while outside a transaction	WITHOUT_CLASSIFICATION	0.9995983878875488	WITHOUT_CLASSIFICATION	4.016121124512087E-4	DESIGN
this is an internal error of some sort...	WITHOUT_CLASSIFICATION	0.9999627543092552	WITHOUT_CLASSIFICATION	3.7245690744838586E-5	DESIGN
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.999701845369054	WITHOUT_CLASSIFICATION	2.9815463094591115E-4	DESIGN
only collections belonging to deleted entities are allowed to be dereferenced in the case of orphan delete	WITHOUT_CLASSIFICATION	0.999998779959824	WITHOUT_CLASSIFICATION	1.2200401759877189E-6	DESIGN
if it was previously unreferenced, we need to flush in order to get its state into the database in order to execute query	WITHOUT_CLASSIFICATION	0.9996316469977425	WITHOUT_CLASSIFICATION	3.683530022575282E-4	DESIGN
not for internal use:	WITHOUT_CLASSIFICATION	0.9929648691535813	WITHOUT_CLASSIFICATION	0.007035130846418727	DESIGN
otherwise, we only need to flush if there are in-memory changes to the queried tables	WITHOUT_CLASSIFICATION	0.9999996692152239	WITHOUT_CLASSIFICATION	3.307847761770856E-7	DESIGN
might need to run a different filter entirely after the flush because the collection role may have changed	WITHOUT_CLASSIFICATION	0.9994757425660687	WITHOUT_CLASSIFICATION	5.242574339312156E-4	DESIGN
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.999701845369054	WITHOUT_CLASSIFICATION	2.9815463094591115E-4	DESIGN
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.999701845369054	WITHOUT_CLASSIFICATION	2.9815463094591115E-4	DESIGN
if it is initialized, see if the underlying instance is contained, since we need to account for the fact that it might have been evicted	WITHOUT_CLASSIFICATION	0.8917096336048245	WITHOUT_CLASSIFICATION	0.10829036639517556	DESIGN
basically just an adapted copy of find(CriteriaImpl)	WITHOUT_CLASSIFICATION	0.999999142834508	WITHOUT_CLASSIFICATION	8.571654920890438E-7	DESIGN
it is possible for this method to be called during flush processing, so make certain that we do not accidently initialize an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9981859941949021	WITHOUT_CLASSIFICATION	0.0018140058050978695	DESIGN
nothing to do in a stateful session	WITHOUT_CLASSIFICATION	0.9999473419695846	WITHOUT_CLASSIFICATION	5.2658030415472824E-5	DESIGN
ignore	WITHOUT_CLASSIFICATION	0.9999964313733375	WITHOUT_CLASSIFICATION	3.5686266624094358E-6	DESIGN
ignore this error for now	WITHOUT_CLASSIFICATION	0.9999955217476222	WITHOUT_CLASSIFICATION	4.478252377713746E-6	DESIGN
we need to writeObject() on this since interceptor is user defined	WITHOUT_CLASSIFICATION	0.999992759461677	WITHOUT_CLASSIFICATION	7.240538322955454E-6	DESIGN
the old-time stand-by...	WITHOUT_CLASSIFICATION	0.999999573406372	WITHOUT_CLASSIFICATION	4.265936279038721E-7	DESIGN
parameter bind values...	WITHOUT_CLASSIFICATION	0.9999968383730701	WITHOUT_CLASSIFICATION	3.161626929942353E-6	DESIGN
Parameter handling code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999812276688836	WITHOUT_CLASSIFICATION	1.8772331116401447E-4	DESIGN
prepend value and type list with null for any positions before the wanted position.	WITHOUT_CLASSIFICATION	0.9999773546292042	WITHOUT_CLASSIFICATION	2.264537079579243E-5	DESIGN
Execution methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999094393322981	WITHOUT_CLASSIFICATION	9.056066770186003E-5	DESIGN
we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9999282010147515	WITHOUT_CLASSIFICATION	7.179898524838218E-5	DESIGN
we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9999282010147515	WITHOUT_CLASSIFICATION	7.179898524838218E-5	DESIGN
we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999564208308763	WITHOUT_CLASSIFICATION	4.357916912364606E-5	DESIGN
we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999564208308763	WITHOUT_CLASSIFICATION	4.357916912364606E-5	DESIGN
FieldInterceptor impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999485013805607	WITHOUT_CLASSIFICATION	5.149861943932456E-5	DESIGN
subclass accesses ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999962001146943	WITHOUT_CLASSIFICATION	3.799885305756002E-6	DESIGN
let's assume that there is only one lazy fetch group, for now!	WITHOUT_CLASSIFICATION	0.999999917530894	WITHOUT_CLASSIFICATION	8.246910600620332E-8	DESIGN
FieldHandler impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9990061776337781	WITHOUT_CLASSIFICATION	9.93822366221993E-4	DESIGN
should not need to grow beyond the size of the total number of columns in the rs	WITHOUT_CLASSIFICATION	0.999977511266629	WITHOUT_CLASSIFICATION	2.24887333710296E-5	DESIGN
should probably no-op commit/rollback here, at least in JTA scenarios	WITHOUT_CLASSIFICATION	0.8041109878237681	DESIGN	0.19588901217623195	WITHOUT_CLASSIFICATION
Base Expectation impls ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999990627962815	WITHOUT_CLASSIFICATION	9.372037184836469E-7	DESIGN
Various Expectation instances ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999868213076767	WITHOUT_CLASSIFICATION	1.3178692323341148E-5	DESIGN
explicitly perform no checking...	WITHOUT_CLASSIFICATION	0.7744502109752296	DESIGN	0.22554978902477055	WITHOUT_CLASSIFICATION
used from testsuite	WITHOUT_CLASSIFICATION	0.9999945838362869	WITHOUT_CLASSIFICATION	5.416163713021027E-6	DESIGN
assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999993068904397	WITHOUT_CLASSIFICATION	6.931095602342269E-7	DESIGN
package	WITHOUT_CLASSIFICATION	0.9997769428108455	WITHOUT_CLASSIFICATION	2.2305718915444837E-4	DESIGN
register synch; stats.connect()	WITHOUT_CLASSIFICATION	0.9999987870616766	WITHOUT_CLASSIFICATION	1.2129383234594453E-6	DESIGN
noncritical, swallow and let the other propagate!	WITHOUT_CLASSIFICATION	0.9999408807080551	WITHOUT_CLASSIFICATION	5.911929194486421E-5	DESIGN
calls executeBatch()	WITHOUT_CLASSIFICATION	0.9999969965119543	WITHOUT_CLASSIFICATION	3.0034880456320787E-6	DESIGN
no big deal	WITHOUT_CLASSIFICATION	0.9999993903250364	WITHOUT_CLASSIFICATION	6.096749637036884E-7	DESIGN
no big deal	WITHOUT_CLASSIFICATION	0.9999993903250364	WITHOUT_CLASSIFICATION	6.096749637036884E-7	DESIGN
no big deal	WITHOUT_CLASSIFICATION	0.9999993903250364	WITHOUT_CLASSIFICATION	6.096749637036884E-7	DESIGN
sybase driver (jConnect) throwing NPE here in certain cases, but we'll just handle the general "unexpected" case	WITHOUT_CLASSIFICATION	0.999945219223058	WITHOUT_CLASSIFICATION	5.478077694194145E-5	DESIGN
see explanation above...	WITHOUT_CLASSIFICATION	0.9999993967931934	WITHOUT_CLASSIFICATION	6.032068066492526E-7	DESIGN
If we are in the process of releasing, no sense checking for aggressive-release possibility.	WITHOUT_CLASSIFICATION	0.9999989507840088	WITHOUT_CLASSIFICATION	1.049215991156541E-6	DESIGN
EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999782275086485	WITHOUT_CLASSIFICATION	2.1772491351526555E-5	DESIGN
ResultSet impl ("overridden") ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999800709383151	WITHOUT_CLASSIFICATION	1.9929061684895054E-5	DESIGN
ResultSet impl (delegated) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999742591651112	WITHOUT_CLASSIFICATION	2.5740834888812548E-5	DESIGN
refer to comment in StatefulPersistenceContext.addCollection()	WITHOUT_CLASSIFICATION	0.9999998696626989	WITHOUT_CLASSIFICATION	1.3033730102808617E-7	DESIGN
ConnectionManager.Callback implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999881624901148	WITHOUT_CLASSIFICATION	1.1837509885173216E-5	DESIGN
Note : success = false, because we don't know the outcome of the transaction	WITHOUT_CLASSIFICATION	0.9999953129640173	WITHOUT_CLASSIFICATION	4.687035982682717E-6	DESIGN
we already have a callback registered; either a local (org.hibernate.Transaction) transaction has accepted callback responsibilities, or we have previously registered a transaction synch.	WITHOUT_CLASSIFICATION	0.9999678564836875	WITHOUT_CLASSIFICATION	3.2143516312530064E-5	DESIGN
the configured transaction-factory says it only supports local callback mode, so no sense attempting to register a JTA Synchronization	WITHOUT_CLASSIFICATION	0.9999202660091181	WITHOUT_CLASSIFICATION	7.973399088191678E-5	DESIGN
transactions marked for rollback-only cause some TM impls to throw exceptions	WITHOUT_CLASSIFICATION	0.9995111329421612	WITHOUT_CLASSIFICATION	4.888670578387877E-4	DESIGN
serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998279713725	WITHOUT_CLASSIFICATION	1.7202862749947623E-7	DESIGN
postInitialize() will be called after initialization	WITHOUT_CLASSIFICATION	0.9999999844442475	WITHOUT_CLASSIFICATION	1.555575245013688E-8	DESIGN
cannot handle single quotes	WITHOUT_CLASSIFICATION	0.9999517465169118	WITHOUT_CLASSIFICATION	4.8253483088328726E-5	DESIGN
todo : for 4.0 private static final Logger log = LoggerFactory.getLogger( SQLStatementLogger.class ); this is the legacy logging 'category'...	WITHOUT_CLASSIFICATION	0.9966240153875383	WITHOUT_CLASSIFICATION	0.0033759846124616043	DESIGN
note that for sequential scrolling, we make the assumption that the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999952981604207	WITHOUT_CLASSIFICATION	4.701839579381458E-6	DESIGN
don't even bother trying to read further	WITHOUT_CLASSIFICATION	0.9991369065713798	WITHOUT_CLASSIFICATION	8.630934286201324E-4	DESIGN
don't even bother trying to read any further	WITHOUT_CLASSIFICATION	0.999331161745184	WITHOUT_CLASSIFICATION	6.688382548160365E-4	DESIGN
position cursor to the last row	WITHOUT_CLASSIFICATION	0.9999999584683533	WITHOUT_CLASSIFICATION	4.15316466450073E-8	DESIGN
sequentially read the result set in reverse until we recognize a change in the key value. At that point, we are pointed at the last physical sequential row for the logical row in which we are interested in processing	WITHOUT_CLASSIFICATION	0.9999998787979092	WITHOUT_CLASSIFICATION	1.2120209083644738E-7	DESIGN
Read backwards until we read past the first physical sequential row with the key we are interested in loading	WITHOUT_CLASSIFICATION	0.9999999816029993	WITHOUT_CLASSIFICATION	1.839700060962082E-8	DESIGN
Finally, read ahead one row to position result set cursor at the first physical row we are interested in loading	WITHOUT_CLASSIFICATION	0.9999341259050709	WITHOUT_CLASSIFICATION	6.587409492907423E-5	DESIGN
now get an existing proxy for each row element (if there is one)	WITHOUT_CLASSIFICATION	0.9999998177595015	WITHOUT_CLASSIFICATION	1.8224049838667896E-7	DESIGN
force the proxy to resolve itself	WITHOUT_CLASSIFICATION	0.9999724617613217	WITHOUT_CLASSIFICATION	2.7538238678253224E-5	DESIGN
this is equivalent to the old behavior...	WITHOUT_CLASSIFICATION	0.999962983208253	WITHOUT_CLASSIFICATION	3.70167917468886E-5	DESIGN
if null, owner will be retrieved from session	WITHOUT_CLASSIFICATION	0.9999958970218401	WITHOUT_CLASSIFICATION	4.102978159975755E-6	DESIGN
final String queryString,	WITHOUT_CLASSIFICATION	0.9999600929519155	WITHOUT_CLASSIFICATION	3.99070480844625E-5	DESIGN
if it was a reference to self, don't need to nullify unless we are using native id generation, in which case we definitely need to nullify	WITHOUT_CLASSIFICATION	0.9999999951234195	WITHOUT_CLASSIFICATION	4.876580491662441E-9	DESIGN
end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999983050587513	WITHOUT_CLASSIFICATION	1.6949412487185128E-6	DESIGN
in an effort to avoid concurrent-modification-exceptions (from potential recursive calls back through here as a result of the eventual call to PersistentCollection#endRead), we scan the internal loadingCollections map for matches and store those matches in a temp collection. the temp collection is then used to "drive" the #endRead processing.	WITHOUT_CLASSIFICATION	0.9998124053070132	WITHOUT_CLASSIFICATION	1.8759469298666268E-4	DESIGN
we can reuse it for each row	WITHOUT_CLASSIFICATION	0.9999987964371941	WITHOUT_CLASSIFICATION	1.203562805913079E-6	DESIGN
can't reuse in this case	WITHOUT_CLASSIFICATION	0.9999258007361604	WITHOUT_CLASSIFICATION	7.419926383947722E-5	DESIGN
First we need to suspend any current JTA transaction and obtain a JDBC connection	WITHOUT_CLASSIFICATION	0.9998299940334185	WITHOUT_CLASSIFICATION	1.7000596658151273E-4	DESIGN
getResultList(results);	WITHOUT_CLASSIFICATION	0.999999798303456	WITHOUT_CLASSIFICATION	2.0169654404761924E-7	DESIGN
if we only returned one entity, query by key is more efficient	WITHOUT_CLASSIFICATION	0.9999256136452994	WITHOUT_CLASSIFICATION	7.438635470062068E-5	DESIGN
a collection loaded in the current session can not possibly be the collection belonging to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999986666914601	WITHOUT_CLASSIFICATION	1.3333085399878644E-6	DESIGN
handle empty collection	WITHOUT_CLASSIFICATION	0.9999616893499538	WITHOUT_CLASSIFICATION	3.831065004624532E-5	DESIGN
else no collection element, but also no owner	WITHOUT_CLASSIFICATION	0.9999998500239581	WITHOUT_CLASSIFICATION	1.499760420062106E-7	DESIGN
handle empty collections	WITHOUT_CLASSIFICATION	0.9999779310523228	WITHOUT_CLASSIFICATION	2.20689476772804E-5	DESIGN
else this is not a collection initializer (and empty collections will be detected by looking for the owner's identifier in the result set)	WITHOUT_CLASSIFICATION	0.9999920200182065	WITHOUT_CLASSIFICATION	7.979981793525637E-6	DESIGN
validate() instances of Validatable	WITHOUT_CLASSIFICATION	0.9999399503008399	WITHOUT_CLASSIFICATION	6.0049699160145605E-5	DESIGN
if we know there is exactly 1 row, we can skip. it would be great if we could _always_ skip this; it is a problem for <key-many-to-one>	WITHOUT_CLASSIFICATION	0.9167622992511262	DESIGN	0.08323770074887384	WITHOUT_CLASSIFICATION
remove all collections for the entity from the session-level cache	WITHOUT_CLASSIFICATION	0.9998921884424116	WITHOUT_CLASSIFICATION	1.0781155758839714E-4	DESIGN
null version means the object is in the process of being loaded somewhere else in the ResultSet	WITHOUT_CLASSIFICATION	0.9998709909711482	WITHOUT_CLASSIFICATION	1.2900902885184254E-4	DESIGN
problematic for <key-many-to-one>!	WITHOUT_CLASSIFICATION	0.9998252722788525	WITHOUT_CLASSIFICATION	1.7472772114756444E-4	DESIGN
use the id passed in	WITHOUT_CLASSIFICATION	0.9999997276728761	WITHOUT_CLASSIFICATION	2.7232712394766925E-7	DESIGN
do nothing	WITHOUT_CLASSIFICATION	0.9999942124151083	WITHOUT_CLASSIFICATION	5.7875848916610455E-6	DESIGN
prefer re-generation of identity!	WITHOUT_CLASSIFICATION	0.9997144136724023	WITHOUT_CLASSIFICATION	2.85586327597647E-4	DESIGN
no point doing this if NONE was requested	WITHOUT_CLASSIFICATION	0.9999945994066711	WITHOUT_CLASSIFICATION	5.400593328938745E-6	DESIGN
If the object is already loaded, return the loaded one	WITHOUT_CLASSIFICATION	0.999998113138474	WITHOUT_CLASSIFICATION	1.8868615260763624E-6	DESIGN
its already loaded so don't need to hydrate it	WITHOUT_CLASSIFICATION	0.9999878314286242	WITHOUT_CLASSIFICATION	1.2168571375679564E-5	DESIGN
cascade the refresh prior to refreshing this entity	WITHOUT_CLASSIFICATION	0.9995560790200785	WITHOUT_CLASSIFICATION	4.439209799215586E-4	DESIGN
the load() which takes an entity does not pass an entityName	WITHOUT_CLASSIFICATION	0.9999994654792161	WITHOUT_CLASSIFICATION	5.345207838047084E-7	DESIGN
we only check the version when _upgrading_ lock modes	WITHOUT_CLASSIFICATION	0.9999997414995151	WITHOUT_CLASSIFICATION	2.585004849179925E-7	DESIGN
look for a proxy	WITHOUT_CLASSIFICATION	0.99998245343534	WITHOUT_CLASSIFICATION	1.7546564660025322E-5	DESIGN
we need to upgrade the lock mode to the mode requested	WITHOUT_CLASSIFICATION	0.9993825216165237	WITHOUT_CLASSIFICATION	6.174783834762334E-4	DESIGN
its the given optional object	WITHOUT_CLASSIFICATION	0.9999987550992006	WITHOUT_CLASSIFICATION	1.244900799539384E-6	DESIGN
instantiate a new instance	WITHOUT_CLASSIFICATION	0.9999531654882474	WITHOUT_CLASSIFICATION	4.683451175265122E-5	DESIGN
need to hydrate it.	WITHOUT_CLASSIFICATION	0.997515810293198	WITHOUT_CLASSIFICATION	0.002484189706802011	DESIGN
return a newly loaded object	WITHOUT_CLASSIFICATION	0.999834318963815	WITHOUT_CLASSIFICATION	1.6568103618498702E-4	DESIGN
will be ignored, using the existing Entry instead	WITHOUT_CLASSIFICATION	0.9999999868755871	WITHOUT_CLASSIFICATION	1.312441299066255E-8	DESIGN
key is an entity involved with the operation performed by the listener; value can be either a copy of the entity or the entity itself	WITHOUT_CLASSIFICATION	0.9999987007601358	WITHOUT_CLASSIFICATION	1.2992398642975497E-6	DESIGN
materialize associations (and initialize the object) later	WITHOUT_CLASSIFICATION	0.9999536260421319	WITHOUT_CLASSIFICATION	4.637395786799365E-5	DESIGN
Get the persister for the _subclass_	WITHOUT_CLASSIFICATION	0.9999985105870262	WITHOUT_CLASSIFICATION	1.4894129738719188E-6	DESIGN
ok in normal Hibernate usage to delete a detached entity; JPA however forbids it, thus this is a hook for HEM to affect this behavior	WITHOUT_CLASSIFICATION	0.9999584655180888	WITHOUT_CLASSIFICATION	4.153448191116892E-5	DESIGN
the entry will be removed after the flush, and will no longer override the stale snapshot This is now handled by removeEntity() in EntityDeleteAction persistenceContext.removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999828648972893	WITHOUT_CLASSIFICATION	1.7135102710727626E-5	DESIGN
addInitializedCollection(collection, persister, id);	WITHOUT_CLASSIFICATION	0.9999999693448818	WITHOUT_CLASSIFICATION	3.065511828261558E-8	DESIGN
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999954228893111	WITHOUT_CLASSIFICATION	4.577110688832025E-6	DESIGN
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999954228893111	WITHOUT_CLASSIFICATION	4.577110688832025E-6	DESIGN
|| oj.getJoinable().consumesCollectionAlias()	WITHOUT_CLASSIFICATION	0.9999998632746077	WITHOUT_CLASSIFICATION	1.3672539225639462E-7	DESIGN
here we do not bother with the discriminator.	WITHOUT_CLASSIFICATION	0.9998774760993981	WITHOUT_CLASSIFICATION	1.2252390060185856E-4	DESIGN
Code to handle subclasses of topClass	WITHOUT_CLASSIFICATION	0.999839955283487	WITHOUT_CLASSIFICATION	1.6004471651311447E-4	DESIGN
woops we got an instance of another class hierarchy branch	WITHOUT_CLASSIFICATION	0.9986169400189115	WITHOUT_CLASSIFICATION	0.0013830599810883844	DESIGN
we can go straight to the first required row	WITHOUT_CLASSIFICATION	0.9999988838564736	WITHOUT_CLASSIFICATION	1.116143526367127E-6	DESIGN
we need to step through the rows one row at a time (slow)	WITHOUT_CLASSIFICATION	0.9996866956342346	WITHOUT_CLASSIFICATION	3.1330436576535744E-4	DESIGN
synchronized to avoid multi-thread access issues; defined as method synch to avoid potential deadlock issues due to nature of code.	WITHOUT_CLASSIFICATION	0.999999428232513	WITHOUT_CLASSIFICATION	5.717674870156839E-7	DESIGN
Allows various loaders (ok mainly the QueryLoader :) to check whether scrolling of their result set should be allowed. By default it is allowed.	WITHOUT_CLASSIFICATION	0.9999927443330043	WITHOUT_CLASSIFICATION	7.2556669955973535E-6	DESIGN
before adding to collection!	WITHOUT_CLASSIFICATION	0.9999726133015596	WITHOUT_CLASSIFICATION	2.738669844034929E-5	DESIGN
if the current depth is 0, the root thing being loaded is the many-to-many collection itself. Here, it is alright to use an inner join...	WITHOUT_CLASSIFICATION	0.9999993806288786	WITHOUT_CLASSIFICATION	6.193711214481772E-7	DESIGN
operations which cascade as far as the collection also cascade to collection elements	WITHOUT_CLASSIFICATION	0.999999880129291	WITHOUT_CLASSIFICATION	1.1987070904283488E-7	DESIGN
simple, because we can't have a one-to-one or a collection (or even a property-ref) in a composite-element:	WITHOUT_CLASSIFICATION	0.9999998130612525	WITHOUT_CLASSIFICATION	1.8693874752636879E-7	DESIGN
a composite key	WITHOUT_CLASSIFICATION	0.9999968158687113	WITHOUT_CLASSIFICATION	3.1841312888335958E-6	DESIGN
if no batch, use "foo = ? and bar = ?"	WITHOUT_CLASSIFICATION	0.9999800585855267	WITHOUT_CLASSIFICATION	1.994141447331016E-5	DESIGN
it must be a collection fetch	WITHOUT_CLASSIFICATION	0.9998643655984398	WITHOUT_CLASSIFICATION	1.3563440156012056E-4	DESIGN
needed later for many-to-many/filter application	WITHOUT_CLASSIFICATION	0.9767021339733397	WITHOUT_CLASSIFICATION	0.023297866026660223	DESIGN
&& etype.isReferenceToPrimaryKey()	WITHOUT_CLASSIFICATION	0.9999974485324409	WITHOUT_CLASSIFICATION	2.551467559066943E-6	DESIGN
it might still need to apply a collection ordering based on a many-to-many defined order-by...	WITHOUT_CLASSIFICATION	0.992797266323263	WITHOUT_CLASSIFICATION	0.007202733676736962	DESIGN
if a composite key, use "( (foo = ? and bar = ?) or (foo = ? and bar = ?) )" for batching TODO: unnecessary for databases with ANSI-style joins	WITHOUT_CLASSIFICATION	0.6778222223242366	DESIGN	0.3221777776757635	WITHOUT_CLASSIFICATION
belong to other persister belong to other persister	WITHOUT_CLASSIFICATION	0.9999884537414603	WITHOUT_CLASSIFICATION	1.1546258539644211E-5	DESIGN
we found it	WITHOUT_CLASSIFICATION	0.9999965403116	WITHOUT_CLASSIFICATION	3.459688399962814E-6	DESIGN
we can use an inner join for the many-to-many	WITHOUT_CLASSIFICATION	0.9999929719479188	WITHOUT_CLASSIFICATION	7.028052081173462E-6	DESIGN
disable a join back to this same association	WITHOUT_CLASSIFICATION	0.9991616354878179	WITHOUT_CLASSIFICATION	8.383645121820458E-4	DESIGN
NOTE: unlike all other Loaders, this one is NOT multithreaded, or cacheable!!	WITHOUT_CLASSIFICATION	0.9950837532941024	WITHOUT_CLASSIFICATION	0.004916246705897552	DESIGN
the user visible aliases, which are unknown to the superclass, these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999999999494333	WITHOUT_CLASSIFICATION	5.0566521104703353E-11	DESIGN
root entity comes last	WITHOUT_CLASSIFICATION	0.9999781382628549	WITHOUT_CLASSIFICATION	2.1861737145107686E-5	DESIGN
deliberately ignore return value!	WITHOUT_CLASSIFICATION	0.9999988471575771	WITHOUT_CLASSIFICATION	1.1528424228516325E-6	DESIGN
alias may be null EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999477862754053	WITHOUT_CLASSIFICATION	5.221372459478064E-5	DESIGN
if it is a compound path	WITHOUT_CLASSIFICATION	0.9999172789137809	WITHOUT_CLASSIFICATION	8.272108621906095E-5	DESIGN
otherwise assume the parent is the the criteria that created us	WITHOUT_CLASSIFICATION	0.9991123050976175	WITHOUT_CLASSIFICATION	8.8769490238257E-4	DESIGN
if its the root criteria, we are done	WITHOUT_CLASSIFICATION	0.9999961908634548	WITHOUT_CLASSIFICATION	3.8091365452241164E-6	DESIGN
otherwise, recurse	WITHOUT_CLASSIFICATION	0.9999607468472099	WITHOUT_CLASSIFICATION	3.925315279016009E-5	DESIGN
the criteria instance	WITHOUT_CLASSIFICATION	0.9999304427924094	WITHOUT_CLASSIFICATION	6.95572075906401E-5	DESIGN
the entity name	WITHOUT_CLASSIFICATION	0.9999875714850376	WITHOUT_CLASSIFICATION	1.242851496238163E-5	DESIGN
not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9951976982205056	WITHOUT_CLASSIFICATION	0.004802301779494321	DESIGN
not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9951976982205056	WITHOUT_CLASSIFICATION	0.004802301779494321	DESIGN
it refers to an alias of a projection	WITHOUT_CLASSIFICATION	0.9999994845403389	WITHOUT_CLASSIFICATION	5.15459661031861E-7	DESIGN
should never happen, i think	WITHOUT_CLASSIFICATION	0.9999769406937424	WITHOUT_CLASSIFICATION	2.3059306257489747E-5	DESIGN
Detect discriminator values...	WITHOUT_CLASSIFICATION	0.99989767234852	WITHOUT_CLASSIFICATION	1.0232765147990934E-4	DESIGN
Convert the string value into the proper type.	WITHOUT_CLASSIFICATION	0.9999444034984022	WITHOUT_CLASSIFICATION	5.5596501597804214E-5	DESIGN
and the qualifier is not the alias of this criteria -> check to see if we belong to some criteria other than the one that created us	WITHOUT_CLASSIFICATION	0.9999925576399176	WITHOUT_CLASSIFICATION	7.4423600825344125E-6	DESIGN
it does not refer to an alias of a projection, look for a property	WITHOUT_CLASSIFICATION	0.9999845483665778	WITHOUT_CLASSIFICATION	1.5451633422178907E-5	DESIGN
Otherwise, this is an ordinary value.	WITHOUT_CLASSIFICATION	0.9999989159786624	WITHOUT_CLASSIFICATION	1.0840213375312922E-6	DESIGN
Currently not cachable if autodiscover types is in effect (e.g. "select ...")	WITHOUT_CLASSIFICATION	0.9999831541958656	WITHOUT_CLASSIFICATION	1.684580413440192E-5	DESIGN
private final String[] sqlAliases; private final String[] sqlAliasSuffixes;	WITHOUT_CLASSIFICATION	0.9997377022290442	WITHOUT_CLASSIFICATION	2.622977709557866E-4	DESIGN
this is only needed (afaict) for ResultTransformer processing...	WITHOUT_CLASSIFICATION	0.9952424078949819	WITHOUT_CLASSIFICATION	0.004757592105018095	DESIGN
determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999994723271172	WITHOUT_CLASSIFICATION	5.276728829224679E-7	DESIGN
build an array with indices equal to the total number of actual returns in the result Hibernate will return for this query (scalars + non-scalars)	WITHOUT_CLASSIFICATION	0.9999999798349226	WITHOUT_CLASSIFICATION	2.0165077443777803E-8	DESIGN
replace {....} with corresponding column aliases	WITHOUT_CLASSIFICATION	0.9995994043099549	WITHOUT_CLASSIFICATION	4.0059569004515964E-4	DESIGN
No additional open braces found in the string, append the rest of the string in its entirty and quit this loop	WITHOUT_CLASSIFICATION	0.9998707174867753	WITHOUT_CLASSIFICATION	1.292825132246894E-4	DESIGN
apend everything up until the next encountered open brace	WITHOUT_CLASSIFICATION	0.9999857149145245	WITHOUT_CLASSIFICATION	1.4285085475608865E-5	DESIGN
it is a simple table alias {foo}	WITHOUT_CLASSIFICATION	0.9999999165143232	WITHOUT_CLASSIFICATION	8.348567671626058E-8	DESIGN
passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9997481474077776	WITHOUT_CLASSIFICATION	2.5185259222237433E-4	DESIGN
passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9997481474077776	WITHOUT_CLASSIFICATION	2.5185259222237433E-4	DESIGN
The current alias is referencing the collection to be eagerly fetched	WITHOUT_CLASSIFICATION	0.9999989865348359	WITHOUT_CLASSIFICATION	1.013465164129467E-6	DESIGN
it is a property reference {foo.bar}	WITHOUT_CLASSIFICATION	0.9999915824171719	WITHOUT_CLASSIFICATION	8.417582828114163E-6	DESIGN
Possibly handle :something parameters for the query ?	WITHOUT_CLASSIFICATION	0.9982071771272619	WITHOUT_CLASSIFICATION	0.0017928228727380237	DESIGN
Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999999444019014	WITHOUT_CLASSIFICATION	5.559809842428988E-8	DESIGN
private final List persisters = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999999509264044	WITHOUT_CLASSIFICATION	4.9073595716793704E-8	DESIGN
package	WITHOUT_CLASSIFICATION	0.9997769428108455	WITHOUT_CLASSIFICATION	2.2305718915444837E-4	DESIGN
NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999560601406601	WITHOUT_CLASSIFICATION	4.393985933984078E-5	DESIGN
private final List scalarTypes = new ArrayList(); private final List scalarColumnAliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999999928180613	WITHOUT_CLASSIFICATION	7.181938705441058E-9	DESIGN
Now, process the returns	WITHOUT_CLASSIFICATION	0.9999991728087442	WITHOUT_CLASSIFICATION	8.271912558654069E-7	DESIGN
private List collectionOwnerAliases = new ArrayList(); private List collectionAliases = new ArrayList(); private List collectionPersisters = new ArrayList(); private List collectionResults = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999999998593346	WITHOUT_CLASSIFICATION	1.4066533750853674E-10	DESIGN
already been processed...	WITHOUT_CLASSIFICATION	0.9999570745049051	WITHOUT_CLASSIFICATION	4.2925495094886976E-5	DESIGN
already been processed...	WITHOUT_CLASSIFICATION	0.9999570745049051	WITHOUT_CLASSIFICATION	4.2925495094886976E-5	DESIGN
Make sure the owner alias is known...	WITHOUT_CLASSIFICATION	0.9999992055367701	WITHOUT_CLASSIFICATION	7.944632298612042E-7	DESIGN
first, break down the returns into maps keyed by alias so that role returns can be more easily resolved to their owners	WITHOUT_CLASSIFICATION	0.9663569936004028	WITHOUT_CLASSIFICATION	0.03364300639959718	DESIGN
scalarColumnAliases.add( typeReturn.getColumnAlias() ); scalarTypes.add( typeReturn.getType() );	WITHOUT_CLASSIFICATION	0.9999990228650247	WITHOUT_CLASSIFICATION	9.771349752857447E-7	DESIGN
If this return's alias has not been processed yet, do so b4 further processing of this return	WITHOUT_CLASSIFICATION	0.9999958849825217	WITHOUT_CLASSIFICATION	4.11501747831493E-6	DESIGN
collectionOwnerAliases.add( ownerAlias );	WITHOUT_CLASSIFICATION	0.9999997215372884	WITHOUT_CLASSIFICATION	2.7846271152842924E-7	DESIGN
for merging of versioned entities, we consider the version having been changed only when: 1) the two version values are different; AND 2) The target actually represents database state! This second condition is a special case which allows an entity to be merged during the same transaction (though during a seperate operation) in which it was originally persisted/saved	WITHOUT_CLASSIFICATION	0.9987631047783911	WITHOUT_CLASSIFICATION	0.0012368952216088103	DESIGN
this is the second pass through on a merge op, so here we limit the replacement to associations types (value types were already replaced during the first pass)	WITHOUT_CLASSIFICATION	0.7746943748384096	WITHOUT_CLASSIFICATION	0.2253056251615904	DESIGN
EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999947900044586	WITHOUT_CLASSIFICATION	5.209995541432376E-6	DESIGN
cascade-save to collections AFTER the collection owner was saved	WITHOUT_CLASSIFICATION	0.9999907851726105	WITHOUT_CLASSIFICATION	9.21482738941581E-6	DESIGN
Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999991345215972	WITHOUT_CLASSIFICATION	8.654784029655365E-7	DESIGN
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999995781917727	WITHOUT_CLASSIFICATION	4.21808227431751E-7	DESIGN
currently only the Hibernate-supplied DbTimestampType is supported here	WITHOUT_CLASSIFICATION	0.9999320841644833	WITHOUT_CLASSIFICATION	6.791583551663983E-5	DESIGN
This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.997633479647826	WITHOUT_CLASSIFICATION	0.0023665203521739007	DESIGN
make a new one	WITHOUT_CLASSIFICATION	0.9999887040241839	WITHOUT_CLASSIFICATION	1.1295975816065258E-5	DESIGN
not so sure this is even valid subtree. but if it was, it'd represent two unrelated table references...	WITHOUT_CLASSIFICATION	0.9999850301912441	WITHOUT_CLASSIFICATION	1.4969808755905601E-5	DESIGN
(NOT (GT a b) ) => (LE a b)	WITHOUT_CLASSIFICATION	0.9999864306118235	WITHOUT_CLASSIFICATION	1.3569388176459604E-5	DESIGN
private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9994894933114435	WITHOUT_CLASSIFICATION	5.10506688556499E-4	DESIGN
include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.999999109478803	WITHOUT_CLASSIFICATION	8.905211968597464E-7	DESIGN
sqlResultTypes = selectClause.getSqlResultTypes();	WITHOUT_CLASSIFICATION	0.999999988155275	WITHOUT_CLASSIFICATION	1.1844725053293544E-8	DESIGN
by default	WITHOUT_CLASSIFICATION	0.9999904929003497	WITHOUT_CLASSIFICATION	9.507099650289296E-6	DESIGN
This is now handled earlier in this method.	WITHOUT_CLASSIFICATION	0.9997078009987781	WITHOUT_CLASSIFICATION	2.9219900122181577E-4	DESIGN
-- Loader implementation --	WITHOUT_CLASSIFICATION	0.9999907795740178	WITHOUT_CLASSIFICATION	9.220425982208566E-6	DESIGN
-- Loader overrides --	WITHOUT_CLASSIFICATION	0.9999995176257835	WITHOUT_CLASSIFICATION	4.823742164381615E-7	DESIGN
(NOT (IS_NULL a b) ) => (IS_NOT_NULL a b)	WITHOUT_CLASSIFICATION	0.9999968098240103	WITHOUT_CLASSIFICATION	3.190175989704035E-6	DESIGN
NONE, because its the requested lock mode, not the actual!	WITHOUT_CLASSIFICATION	0.9999975935493068	WITHOUT_CLASSIFICATION	2.4064506932538676E-6	DESIGN
meant to handle dynamic instantiation queries...	WITHOUT_CLASSIFICATION	0.9999070548543159	WITHOUT_CLASSIFICATION	9.294514568423583E-5	DESIGN
--- Query translator methods ---	WITHOUT_CLASSIFICATION	0.9997692785294763	WITHOUT_CLASSIFICATION	2.3072147052382005E-4	DESIGN
-- Implementation private methods --	WITHOUT_CLASSIFICATION	0.9997886008617324	WITHOUT_CLASSIFICATION	2.1139913826751172E-4	DESIGN
deduplicate unique constraints sharing the same columns this is needed by Hibernate Annotations since it creates automagically unique constraints for the user	WITHOUT_CLASSIFICATION	0.9999555635268399	WITHOUT_CLASSIFICATION	4.4436473160046455E-5	DESIGN
Try to find out the name of the primary key to create it as identity if the IdentityGenerator is used	WITHOUT_CLASSIFICATION	0.9999550546699988	WITHOUT_CLASSIFICATION	4.494533000120127E-5	DESIGN
to support dialects that have their own identity data type	WITHOUT_CLASSIFICATION	0.999752603807616	WITHOUT_CLASSIFICATION	2.473961923840108E-4	DESIGN
Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999998493857294	WITHOUT_CLASSIFICATION	1.5061427056475874E-7	DESIGN
used also for generation of FK names!	WITHOUT_CLASSIFICATION	0.9962209961679033	WITHOUT_CLASSIFICATION	0.0037790038320966754	DESIGN
usually useless	WITHOUT_CLASSIFICATION	0.9999174514648923	WITHOUT_CLASSIFICATION	8.254853510766485E-5	DESIGN
added this caching as I noticed that getType() is being called multiple times...	WITHOUT_CLASSIFICATION	0.9999102026070839	WITHOUT_CLASSIFICATION	8.979739291612233E-5	DESIGN
do not add unique constraint on DB not supporting unique and nullable columns	WITHOUT_CLASSIFICATION	0.9999999929891257	WITHOUT_CLASSIFICATION	7.010874344929887E-9	DESIGN
for backward compatibility, disable this:	WITHOUT_CLASSIFICATION	0.9999988185586286	WITHOUT_CLASSIFICATION	1.1814413714001022E-6	DESIGN
may be final may be final may be final	WITHOUT_CLASSIFICATION	0.9998041513627708	WITHOUT_CLASSIFICATION	1.9584863722929823E-4	DESIGN
may be final	WITHOUT_CLASSIFICATION	0.9999605727263453	WITHOUT_CLASSIFICATION	3.942727365461022E-5	DESIGN
may be final	WITHOUT_CLASSIFICATION	0.9999605727263453	WITHOUT_CLASSIFICATION	3.942727365461022E-5	DESIGN
Custom SQL	WITHOUT_CLASSIFICATION	0.9999434001338724	WITHOUT_CLASSIFICATION	5.65998661275969E-5	DESIGN
Primary key constraint	WITHOUT_CLASSIFICATION	0.999999666898686	WITHOUT_CLASSIFICATION	3.331013139602014E-7	DESIGN
the root of the incoming property path matched one of the embedded composite identifier properties	WITHOUT_CLASSIFICATION	0.9999998336284156	WITHOUT_CLASSIFICATION	1.6637158450195924E-7	DESIGN
ignore it...	WITHOUT_CLASSIFICATION	0.9999603465440584	WITHOUT_CLASSIFICATION	3.9653455941681906E-5	DESIGN
flat recursive algorithm	WITHOUT_CLASSIFICATION	0.9999984121859161	WITHOUT_CLASSIFICATION	1.5878140839660928E-6	DESIGN
an identifier mapper => getKey will be included in the getNonDuplicatedPropertyIterator() and checked later, so it needs to be excluded	WITHOUT_CLASSIFICATION	0.999996159660196	WITHOUT_CLASSIFICATION	3.840339804012313E-6	DESIGN
if the hibernate-mapping did not specify a schema/catalog, use the defaults specified by properties - but note that if the schema/catalog were specified in hibernate-mapping, or as params, they will already be initialized and will override the values set here (they are in identifierGeneratorProperties)	WITHOUT_CLASSIFICATION	0.999999999408719	WITHOUT_CLASSIFICATION	5.912810294766693E-10	DESIGN
pass the entity-name, if not a collection-id	WITHOUT_CLASSIFICATION	0.9999996925906341	WITHOUT_CLASSIFICATION	3.074093657631392E-7	DESIGN
Custom SQL	WITHOUT_CLASSIFICATION	0.9999434001338724	WITHOUT_CLASSIFICATION	5.65998661275969E-5	DESIGN
Primary key constraint	WITHOUT_CLASSIFICATION	0.999999666898686	WITHOUT_CLASSIFICATION	3.331013139602014E-7	DESIGN
pass the column name (a generated id almost always has a single column)	WITHOUT_CLASSIFICATION	0.9999972593815615	WITHOUT_CLASSIFICATION	2.7406184384220086E-6	DESIGN
needed to satisfy KeyValue	WITHOUT_CLASSIFICATION	0.9987059318024926	WITHOUT_CLASSIFICATION	0.001294068197507397	DESIGN
empty means no scoping	WITHOUT_CLASSIFICATION	0.9999796717828485	WITHOUT_CLASSIFICATION	2.0328217151483704E-5	DESIGN
index should be last column listed	WITHOUT_CLASSIFICATION	0.9999964580472309	WITHOUT_CLASSIFICATION	3.541952768998994E-6	DESIGN
if it is a formula index, use the element columns in the PK	WITHOUT_CLASSIFICATION	0.9999992761925989	WITHOUT_CLASSIFICATION	7.238074012259233E-7	DESIGN
don't create a unique key, 'cos some databases don't like a UK on nullable columns	WITHOUT_CLASSIFICATION	0.999966821091431	WITHOUT_CLASSIFICATION	3.317890856899808E-5	DESIGN
ArrayList list = new ArrayList();list.addAll( getKey().getConstraintColumns() );list.addAll( getIndex().getConstraintColumns() );getCollectionTable().createUniqueKey(list);	WITHOUT_CLASSIFICATION	0.9999999998585637	WITHOUT_CLASSIFICATION	1.4143639898332944E-10	DESIGN
}	WITHOUT_CLASSIFICATION	0.9999388364640885	WITHOUT_CLASSIFICATION	6.116353591146799E-5	DESIGN
no foreign key element of for a one-to-many	WITHOUT_CLASSIFICATION	0.9999985015235535	WITHOUT_CLASSIFICATION	1.498476446383939E-6	DESIGN
TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.7313860231356251	DESIGN	0.26861397686437494	WITHOUT_CLASSIFICATION
the case of a foreign key to something other than the pk is handled in createPropertyRefConstraints	WITHOUT_CLASSIFICATION	0.9999999958559543	WITHOUT_CLASSIFICATION	4.144045675265679E-9	DESIGN
TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.7313860231356251	DESIGN	0.26861397686437494	WITHOUT_CLASSIFICATION
if the property mapping consists of all formulas, make it non-updateable	WITHOUT_CLASSIFICATION	0.9999999982310405	WITHOUT_CLASSIFICATION	1.7689594867015642E-9	DESIGN
columnUpdateability.length==0 ||	WITHOUT_CLASSIFICATION	0.9999987719802489	WITHOUT_CLASSIFICATION	1.2280197510954465E-6	DESIGN
if the property mapping consists of all formulas, make it insertable	WITHOUT_CLASSIFICATION	0.9999999647620138	WITHOUT_CLASSIFICATION	3.523798613975492E-8	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999986845215298	WITHOUT_CLASSIFICATION	1.3154784701432758E-6	DESIGN
expected type is intrinsic here...	WITHOUT_CLASSIFICATION	0.9999129228652901	WITHOUT_CLASSIFICATION	8.707713470983765E-5	DESIGN
}	WITHOUT_CLASSIFICATION	0.9999388364640885	WITHOUT_CLASSIFICATION	6.116353591146799E-5	DESIGN
}	WITHOUT_CLASSIFICATION	0.9999388364640885	WITHOUT_CLASSIFICATION	6.116353591146799E-5	DESIGN
return memberPersister.getPropertyType(propertyName);	WITHOUT_CLASSIFICATION	0.9999960986605844	WITHOUT_CLASSIFICATION	3.901339415625091E-6	DESIGN
return memberPersister.toColumns(alias, propertyName);	WITHOUT_CLASSIFICATION	0.9999927609522977	WITHOUT_CLASSIFICATION	7.239047702344328E-6	DESIGN
return memberPersister.getType();	WITHOUT_CLASSIFICATION	0.9999990063665862	WITHOUT_CLASSIFICATION	9.93633413754111E-7	DESIGN
&& !indexIsFormula	WITHOUT_CLASSIFICATION	0.9999991704131362	WITHOUT_CLASSIFICATION	8.295868638691226E-7	DESIGN
return !isOneToMany();	WITHOUT_CLASSIFICATION	0.9999993947223845	WITHOUT_CLASSIFICATION	6.052776153998685E-7	DESIGN
instanceof AssociationType;	WITHOUT_CLASSIFICATION	0.9998157056178051	WITHOUT_CLASSIFICATION	1.842943821949032E-4	DESIGN
we need to determine the best way to know that two joinables represent a single many-to-many...	WITHOUT_CLASSIFICATION	0.8135005127880361	WITHOUT_CLASSIFICATION	0.1864994872119638	DESIGN
strip leading ','	WITHOUT_CLASSIFICATION	0.9999994306176785	WITHOUT_CLASSIFICATION	5.693823214661183E-7	DESIGN
public boolean isSubselectLoadable();	WITHOUT_CLASSIFICATION	0.9999992346261812	WITHOUT_CLASSIFICATION	7.653738186336154E-7	DESIGN
KEY	WITHOUT_CLASSIFICATION	0.999712451485132	WITHOUT_CLASSIFICATION	2.8754851486794954E-4	DESIGN
columns	WITHOUT_CLASSIFICATION	0.9999742038303104	WITHOUT_CLASSIFICATION	2.5796169689560765E-5	DESIGN
SQL statements	WITHOUT_CLASSIFICATION	0.9999849889670801	WITHOUT_CLASSIFICATION	1.501103291983087E-5	DESIGN
extra information about the element type	WITHOUT_CLASSIFICATION	0.999999864746577	WITHOUT_CLASSIFICATION	1.3525342290876142E-7	DESIGN
types	WITHOUT_CLASSIFICATION	0.9999164099784122	WITHOUT_CLASSIFICATION	8.359002158779419E-5	DESIGN
custom sql	WITHOUT_CLASSIFICATION	0.9999891962253271	WITHOUT_CLASSIFICATION	1.0803774672831045E-5	DESIGN
private final String unquotedIdentifierColumnName;	WITHOUT_CLASSIFICATION	0.9999939950268312	WITHOUT_CLASSIFICATION	6.0049731688751106E-6	DESIGN
dynamic filters specifically for many-to-many inside the collection	WITHOUT_CLASSIFICATION	0.999991653725352	WITHOUT_CLASSIFICATION	8.346274648005696E-6	DESIGN
dynamic filters for the collection	WITHOUT_CLASSIFICATION	0.9999986451652428	WITHOUT_CLASSIFICATION	1.3548347572375808E-6	DESIGN
NativeSQL: collect key column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999602832163169	WITHOUT_CLASSIFICATION	3.9716783683135805E-5	DESIGN
unquotedKeyColumnNames = StringHelper.unQuote(keyColumnAliases);	WITHOUT_CLASSIFICATION	0.9999998481239806	WITHOUT_CLASSIFICATION	1.51876019330042E-7	DESIGN
ELEMENT	WITHOUT_CLASSIFICATION	0.9999789064233673	WITHOUT_CLASSIFICATION	2.1093576632637736E-5	DESIGN
NativeSQL: collect element column and auto-aliases	WITHOUT_CLASSIFICATION	0.9997338175865327	WITHOUT_CLASSIFICATION	2.6618241346735514E-4	DESIGN
INDEX AND ROW SELECT	WITHOUT_CLASSIFICATION	0.9999982824634195	WITHOUT_CLASSIFICATION	1.7175365804849585E-6	DESIGN
NativeSQL: collect index column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999260411178815	WITHOUT_CLASSIFICATION	7.395888211844705E-5	DESIGN
unquotedIdentifierColumnName = identifierColumnAlias;	WITHOUT_CLASSIFICATION	0.9999990110571729	WITHOUT_CLASSIFICATION	9.889428270507182E-7	DESIGN
unquotedIdentifierColumnName = null;	WITHOUT_CLASSIFICATION	0.9999961819137607	WITHOUT_CLASSIFICATION	3.818086239283432E-6	DESIGN
GENERATE THE SQL:	WITHOUT_CLASSIFICATION	0.9999347307528633	WITHOUT_CLASSIFICATION	6.526924713668602E-5	DESIGN
for non-arrays, we don't need to know the element class elementType.returnedClass();	WITHOUT_CLASSIFICATION	0.9998825900356947	WITHOUT_CLASSIFICATION	1.1740996430532637E-4	DESIGN
not all classpersisters implement PropertyMapping!	WITHOUT_CLASSIFICATION	0.9925134007681559	WITHOUT_CLASSIFICATION	0.007486599231844164	DESIGN
Handle any filters applied to this collection	WITHOUT_CLASSIFICATION	0.965316484688241	WITHOUT_CLASSIFICATION	0.034683515311759006	DESIGN
Handle any filters applied to this collection for many-to-many	WITHOUT_CLASSIFICATION	0.9571362996058825	WITHOUT_CLASSIFICATION	0.04286370039411739	DESIGN
if there is a user-specified loader, return that TODO: filters!?	WITHOUT_CLASSIFICATION	0.8339615087883411	DESIGN	0.16603849121165898	WITHOUT_CLASSIFICATION
Take care of any entities that might have been evicted!	WITHOUT_CLASSIFICATION	0.969762912862213	WITHOUT_CLASSIFICATION	0.03023708713778695	DESIGN
strip leading ','	WITHOUT_CLASSIFICATION	0.9999994306176785	WITHOUT_CLASSIFICATION	5.693823214661183E-7	DESIGN
Run a subquery loader	WITHOUT_CLASSIFICATION	0.9998405930083951	WITHOUT_CLASSIFICATION	1.5940699160481943E-4	DESIGN
needed by arrays	WITHOUT_CLASSIFICATION	0.9999280604710777	WITHOUT_CLASSIFICATION	7.193952892227916E-5	DESIGN
TODO: something with formulas...	WITHOUT_CLASSIFICATION	0.9580369595044549	WITHOUT_CLASSIFICATION	0.04196304049554512	DESIGN
an assertion	WITHOUT_CLASSIFICATION	0.9999999747051869	WITHOUT_CLASSIFICATION	2.529481317998915E-8	DESIGN
Remove all the old entries	WITHOUT_CLASSIFICATION	0.9999988719325302	WITHOUT_CLASSIFICATION	1.1280674698079639E-6	DESIGN
create all the new entries	WITHOUT_CLASSIFICATION	0.9999998321577935	WITHOUT_CLASSIFICATION	1.6784220645365818E-7	DESIGN
&& !indexIsFormula	WITHOUT_CLASSIFICATION	0.9999991704131362	WITHOUT_CLASSIFICATION	8.295868638691226E-7	DESIGN
&& !indexIsFormula	WITHOUT_CLASSIFICATION	0.9999991704131362	WITHOUT_CLASSIFICATION	8.295868638691226E-7	DESIGN
delete all the deleted entries	WITHOUT_CLASSIFICATION	0.9999996764538321	WITHOUT_CLASSIFICATION	3.235461678839338E-7	DESIGN
insert all the new entries	WITHOUT_CLASSIFICATION	0.9999995077819148	WITHOUT_CLASSIFICATION	4.92218085197739E-7	DESIGN
==elementType ??	WITHOUT_CLASSIFICATION	0.9999378613114179	WITHOUT_CLASSIFICATION	6.213868858201622E-5	DESIGN
update all the modified entries	WITHOUT_CLASSIFICATION	0.9999996993422602	WITHOUT_CLASSIFICATION	3.0065773981308106E-7	DESIGN
identifier collections not supported for 1-to-many	WITHOUT_CLASSIFICATION	0.9999980994872949	WITHOUT_CLASSIFICATION	1.9005127050612709E-6	DESIGN
update removed rows fks to null	WITHOUT_CLASSIFICATION	0.9998066294153652	WITHOUT_CLASSIFICATION	1.9337058463474196E-4	DESIGN
will still be issued when it used to be null	WITHOUT_CLASSIFICATION	0.9709734322367182	WITHOUT_CLASSIFICATION	0.029026567763281764	DESIGN
now update all changed or added rows fks	WITHOUT_CLASSIFICATION	0.9999987775333583	WITHOUT_CLASSIFICATION	1.2224666416446956E-6	DESIGN
buf.append( selectFragment( lhsAlias, "" ) )ignore suffix for collection columns!	WITHOUT_CLASSIFICATION	0.9999999968734794	WITHOUT_CLASSIFICATION	3.1265207090777405E-9	DESIGN
use suffix for the entity columns	WITHOUT_CLASSIFICATION	0.9999602537842994	WITHOUT_CLASSIFICATION	3.974621570060602E-5	DESIGN
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999937197556145	WITHOUT_CLASSIFICATION	6.280244385533238E-6	DESIGN
private final String rootTableName;	WITHOUT_CLASSIFICATION	0.9999847895956163	WITHOUT_CLASSIFICATION	1.5210404383645491E-5	DESIGN
INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9999984120169609	WITHOUT_CLASSIFICATION	1.5879830390771055E-6	DESIGN
Custom SQL	WITHOUT_CLASSIFICATION	0.9999434001338724	WITHOUT_CLASSIFICATION	5.65998661275969E-5	DESIGN
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999937197556145	WITHOUT_CLASSIFICATION	6.280244385533238E-6	DESIGN
Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999851150279809	WITHOUT_CLASSIFICATION	1.4884972019155812E-5	DESIGN
This could also just be true all the time...	WITHOUT_CLASSIFICATION	0.9505689388099913	WITHOUT_CLASSIFICATION	0.04943106119000877	DESIGN
chop the last union (all)	WITHOUT_CLASSIFICATION	0.9999998182182692	WITHOUT_CLASSIFICATION	1.8178173072371965E-7	DESIGN
TODO: check this....	WITHOUT_CLASSIFICATION	0.8998771545541164	DESIGN	0.10012284544588361	WITHOUT_CLASSIFICATION
INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9999984120169609	WITHOUT_CLASSIFICATION	1.5879830390771055E-6	DESIGN
properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9999654183228641	WITHOUT_CLASSIFICATION	3.4581677135769724E-5	DESIGN
the closure of all properties in the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999992392625234	WITHOUT_CLASSIFICATION	7.607374764841544E-7	DESIGN
the closure of all columns used by the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999996841260926	WITHOUT_CLASSIFICATION	3.158739073636481E-7	DESIGN
subclass discrimination works by assigning particular values to certain combinations of null primary key values in the outer join using an SQL CASE	WITHOUT_CLASSIFICATION	0.9999976984623692	WITHOUT_CLASSIFICATION	2.3015376307829386E-6	DESIGN
MULTITABLES	WITHOUT_CLASSIFICATION	0.9999979030829601	WITHOUT_CLASSIFICATION	2.0969170399766733E-6	DESIGN
Custom sql	WITHOUT_CLASSIFICATION	0.9999899366582159	WITHOUT_CLASSIFICATION	1.0063341784053433E-5	DESIGN
subclass closure properties	WITHOUT_CLASSIFICATION	0.999999251111484	WITHOUT_CLASSIFICATION	7.4888851602968E-7	DESIGN
SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999794559914094	WITHOUT_CLASSIFICATION	2.054400859070848E-5	DESIGN
( (Column) model.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9997681940227022	WITHOUT_CLASSIFICATION	2.3180597729772332E-4	DESIGN
( (Column) sc.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999656670963886	WITHOUT_CLASSIFICATION	3.4332903611511594E-5	DESIGN
don't need subclass tables, because they can't appear in conditions	WITHOUT_CLASSIFICATION	0.9784331834496329	WITHOUT_CLASSIFICATION	0.021566816550367147	DESIGN
special case where we need to force incloude all subclass joins	WITHOUT_CLASSIFICATION	0.9999523949219508	WITHOUT_CLASSIFICATION	4.7605078049262754E-5	DESIGN
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999937197556145	WITHOUT_CLASSIFICATION	6.280244385533238E-6	DESIGN
properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9999654183228641	WITHOUT_CLASSIFICATION	3.4581677135769724E-5	DESIGN
the closure of all columns used by the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999996841260926	WITHOUT_CLASSIFICATION	3.158739073636481E-7	DESIGN
get em on the second pass!	WITHOUT_CLASSIFICATION	0.999994450112341	WITHOUT_CLASSIFICATION	5.5498876590390984E-6	DESIGN
now look up the object we are really interested in! (this lets us correctly handle proxies and multi-row or multi-column queries)	WITHOUT_CLASSIFICATION	0.9991824658746236	WITHOUT_CLASSIFICATION	8.175341253765194E-4	DESIGN
discriminator column	WITHOUT_CLASSIFICATION	0.9999497782338646	WITHOUT_CLASSIFICATION	5.022176613535408E-5	DESIGN
INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9999984120169609	WITHOUT_CLASSIFICATION	1.5879830390771055E-6	DESIGN
private final Map propertyTableNumbersByName = new HashMap();	WITHOUT_CLASSIFICATION	0.9998428542031909	WITHOUT_CLASSIFICATION	1.571457968091972E-4	DESIGN
CLASS + TABLE	WITHOUT_CLASSIFICATION	0.9999999191935938	WITHOUT_CLASSIFICATION	8.080640626288198E-8	DESIGN
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999935644230351	WITHOUT_CLASSIFICATION	6.435576964925131E-6	DESIGN
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999905461804185	WITHOUT_CLASSIFICATION	9.453819581420999E-6	DESIGN
SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999794559914094	WITHOUT_CLASSIFICATION	2.054400859070848E-5	DESIGN
Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999851150279809	WITHOUT_CLASSIFICATION	1.4884972019155812E-5	DESIGN
JOINS	WITHOUT_CLASSIFICATION	0.9999882098529451	WITHOUT_CLASSIFICATION	1.1790147054932822E-5	DESIGN
propertyTableNumbersByName.put( prop.getName(), join );	WITHOUT_CLASSIFICATION	0.9999999760230961	WITHOUT_CLASSIFICATION	2.397690387809015E-8	DESIGN
Access cached SQL	WITHOUT_CLASSIFICATION	0.9999606629731662	WITHOUT_CLASSIFICATION	3.9337026833710194E-5	DESIGN
figure out which tables need to be fetched	WITHOUT_CLASSIFICATION	0.9999486418833552	WITHOUT_CLASSIFICATION	5.13581166448222E-5	DESIGN
figure out which columns are needed	WITHOUT_CLASSIFICATION	0.9998387996407151	WITHOUT_CLASSIFICATION	1.6120035928493648E-4	DESIGN
figure out which formulas are needed	WITHOUT_CLASSIFICATION	0.9999936881127455	WITHOUT_CLASSIFICATION	6.311887254499308E-6	DESIGN
render the SQL	WITHOUT_CLASSIFICATION	0.9999467299877636	WITHOUT_CLASSIFICATION	5.327001223646749E-5	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999986845215298	WITHOUT_CLASSIFICATION	1.3154784701432758E-6	DESIGN
moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996865743566948	WITHOUT_CLASSIFICATION	3.1342564330510666E-4	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999420617157849	WITHOUT_CLASSIFICATION	5.7938284215003745E-5	DESIGN
The optional SQL string defined in the where attribute	WITHOUT_CLASSIFICATION	0.9999998420359839	WITHOUT_CLASSIFICATION	1.5796401611239587E-7	DESIGN
information about lazy properties of this class	WITHOUT_CLASSIFICATION	0.9999800789834673	WITHOUT_CLASSIFICATION	1.992101653262362E-5	DESIGN
information about all properties in class hierarchy	WITHOUT_CLASSIFICATION	0.9999999510018428	WITHOUT_CLASSIFICATION	4.8998157135491536E-8	DESIGN
information about all columns/formulas in class hierarchy	WITHOUT_CLASSIFICATION	0.9999998372521249	WITHOUT_CLASSIFICATION	1.6274787505750667E-7	DESIGN
dynamic filters attached to the class-level	WITHOUT_CLASSIFICATION	0.9999988149355951	WITHOUT_CLASSIFICATION	1.1850644049272302E-6	DESIGN
SQL strings	WITHOUT_CLASSIFICATION	0.9999867571352489	WITHOUT_CLASSIFICATION	1.3242864751153664E-5	DESIGN
for objects that came in via update()	WITHOUT_CLASSIFICATION	0.9999990423145052	WITHOUT_CLASSIFICATION	9.576854946986602E-7	DESIGN
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999905461804185	WITHOUT_CLASSIFICATION	9.453819581420999E-6	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999420617157849	WITHOUT_CLASSIFICATION	5.7938284215003745E-5	DESIGN
IDENTIFIER	WITHOUT_CLASSIFICATION	0.999976656903258	WITHOUT_CLASSIFICATION	2.3343096742000553E-5	DESIGN
VERSION	WITHOUT_CLASSIFICATION	0.9999920040607279	WITHOUT_CLASSIFICATION	7.995939272156383E-6	DESIGN
WHERE STRING	WITHOUT_CLASSIFICATION	0.999998523531407	WITHOUT_CLASSIFICATION	1.476468593011242E-6	DESIGN
SUBCLASS PROPERTY CLOSURE	WITHOUT_CLASSIFICATION	0.999998839019285	WITHOUT_CLASSIFICATION	1.1609807150317345E-6	DESIGN
before add :-)	WITHOUT_CLASSIFICATION	0.9999933560035017	WITHOUT_CLASSIFICATION	6.643996498361409E-6	DESIGN
Handle any filters applied to the class level	WITHOUT_CLASSIFICATION	0.9992365786322254	WITHOUT_CLASSIFICATION	7.63421367774713E-4	DESIGN
only one-to-one is lazy fetched	WITHOUT_CLASSIFICATION	0.9999983300726615	WITHOUT_CLASSIFICATION	1.6699273385433345E-6	DESIGN
note early exit here:	WITHOUT_CLASSIFICATION	0.99810942726127	WITHOUT_CLASSIFICATION	0.001890572738729995	DESIGN
object have been loaded with setReadOnly(true); HHH-2236	WITHOUT_CLASSIFICATION	0.9999956539715235	WITHOUT_CLASSIFICATION	4.346028476487267E-6	DESIGN
NOTE: this assumes something about how propertySelectFragment is implemented by the subclass!	WITHOUT_CLASSIFICATION	0.9901963006605129	WITHOUT_CLASSIFICATION	0.009803699339487123	DESIGN
strip leading ", "	WITHOUT_CLASSIFICATION	0.9999997591724236	WITHOUT_CLASSIFICATION	2.4082757646223526E-7	DESIGN
if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999996262402349	WITHOUT_CLASSIFICATION	3.7375976518286406E-7	DESIGN
otherwise return the "hydrated" state (ie. associations are not resolved)	WITHOUT_CLASSIFICATION	0.995511949342802	WITHOUT_CLASSIFICATION	0.0044880506571980585	DESIGN
null owner ok??	WITHOUT_CLASSIFICATION	0.9998904393480994	WITHOUT_CLASSIFICATION	1.0956065190060068E-4	DESIGN
null sql means that the only lazy properties are shared PK one-to-one associations which are handled differently in the Type#nullSafeGet code...	WITHOUT_CLASSIFICATION	0.9992635184274237	WITHOUT_CLASSIFICATION	7.364815725764399E-4	DESIGN
Create a new FROM node for the referenced class.	WITHOUT_CLASSIFICATION	0.9999998279246245	WITHOUT_CLASSIFICATION	1.7207537549653275E-7	DESIGN
the difficulty here is exactly what do we update in order to force the version to be incremented in the db...	WITHOUT_CLASSIFICATION	0.992211421254097	WITHOUT_CLASSIFICATION	0.007788578745902907	DESIGN
performance op to avoid the array search	WITHOUT_CLASSIFICATION	0.9999900703609501	WITHOUT_CLASSIFICATION	9.929639049861135E-6	DESIGN
properly handle property-ref-based associations	WITHOUT_CLASSIFICATION	0.9997526812280091	WITHOUT_CLASSIFICATION	2.4731877199088724E-4	DESIGN
Enable for HHH-440, which we don't like:	WITHOUT_CLASSIFICATION	0.9999466456314705	WITHOUT_CLASSIFICATION	5.3354368529393286E-5	DESIGN
ALIASES	WITHOUT_CLASSIFICATION	0.99998790964242	WITHOUT_CLASSIFICATION	1.2090357579939035E-5	DESIGN
aliases named identifier ( alias.idname )	WITHOUT_CLASSIFICATION	0.9999907209760625	WITHOUT_CLASSIFICATION	9.279023937540346E-6	DESIGN
aliases for composite-id's	WITHOUT_CLASSIFICATION	0.9999997978434915	WITHOUT_CLASSIFICATION	2.0215650847697742E-7	DESIGN
Fetch embedded identifiers propertynames from the "virtual" identifier component	WITHOUT_CLASSIFICATION	0.9999999510877059	WITHOUT_CLASSIFICATION	4.8912294126557075E-8	DESIGN
embedded composite ids ( alias.idname1, alias.idname2 )	WITHOUT_CLASSIFICATION	0.999999724279448	WITHOUT_CLASSIFICATION	2.757205520304543E-7	DESIGN
TODO: skip formulas?	WITHOUT_CLASSIFICATION	0.7349001510610813	DESIGN	0.2650998489389188	WITHOUT_CLASSIFICATION
don't need filters for the static loaders	WITHOUT_CLASSIFICATION	0.9999900030848501	WITHOUT_CLASSIFICATION	9.996915150017368E-6	DESIGN
do two passes, for collection property-ref!	WITHOUT_CLASSIFICATION	0.9999997734959633	WITHOUT_CLASSIFICATION	2.2650403663948393E-7	DESIGN
select the correct row by either pk or rowid	WITHOUT_CLASSIFICATION	0.9999326584864813	WITHOUT_CLASSIFICATION	6.734151351867649E-5	DESIGN
TODO: eventually, rowIdName[j]	WITHOUT_CLASSIFICATION	0.7991384678622419	DESIGN	0.20086153213775806	WITHOUT_CLASSIFICATION
this is a property of the table, which we are updating	WITHOUT_CLASSIFICATION	0.9998081940019741	WITHOUT_CLASSIFICATION	1.918059980259875E-4	DESIGN
special shortcut for id properties, skip the join! this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9996426443674125	WITHOUT_CLASSIFICATION	3.5735563258754974E-4	DESIGN
we are using "all" or "dirty" property-based optimistic locking	WITHOUT_CLASSIFICATION	0.9999969099091146	WITHOUT_CLASSIFICATION	3.0900908853703484E-6	DESIGN
nothing to do; even if the operand is a parameter, no way we could infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9990752346654816	WITHOUT_CLASSIFICATION	9.247653345183414E-4	DESIGN
this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9993954993691058	WITHOUT_CLASSIFICATION	6.045006308942782E-4	DESIGN
add normal properties	WITHOUT_CLASSIFICATION	0.9999999218541469	WITHOUT_CLASSIFICATION	7.814585309256065E-8	DESIGN
add the discriminator	WITHOUT_CLASSIFICATION	0.9999572360167966	WITHOUT_CLASSIFICATION	4.276398320343125E-5	DESIGN
more specifically : "? [op] datetime" 1) if the operator is MINUS, the param needs to be of some datetime type 2) if the operator is PLUS, the param needs to be of some numeric type	WITHOUT_CLASSIFICATION	0.9150759827007022	WITHOUT_CLASSIFICATION	0.08492401729929769	DESIGN
add normal properties	WITHOUT_CLASSIFICATION	0.9999999218541469	WITHOUT_CLASSIFICATION	7.814585309256065E-8	DESIGN
this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9993954993691058	WITHOUT_CLASSIFICATION	6.045006308942782E-4	DESIGN
add the discriminator	WITHOUT_CLASSIFICATION	0.9999572360167966	WITHOUT_CLASSIFICATION	4.276398320343125E-5	DESIGN
add the primary key	WITHOUT_CLASSIFICATION	0.9999959557233266	WITHOUT_CLASSIFICATION	4.044276673467868E-6	DESIGN
delegate already handles PK columns	WITHOUT_CLASSIFICATION	0.9999338707708428	WITHOUT_CLASSIFICATION	6.612922915714189E-5	DESIGN
we can't batch joined inserts, especially not if it is an identity insert; nor can we batch statements where the expectation is based on an output param	WITHOUT_CLASSIFICATION	0.9999999966600682	WITHOUT_CLASSIFICATION	3.33993184026302E-9	DESIGN
Render the SQL query	WITHOUT_CLASSIFICATION	0.9997280160133234	WITHOUT_CLASSIFICATION	2.71983986676494E-4	DESIGN
Write the values of fields onto the prepared statement - we MUST use the state at the time the insert was issued (cos of foreign key constraints). Not necessarily the object's current state	WITHOUT_CLASSIFICATION	0.9999969462653291	WITHOUT_CLASSIFICATION	3.0537346708964796E-6	DESIGN
TODO : shouldnt inserts be Expectations.NONE?	WITHOUT_CLASSIFICATION	0.9988351392186011	DESIGN	0.001164860781398851	WITHOUT_CLASSIFICATION
don't bother trying to update, we know there is no row there yet	WITHOUT_CLASSIFICATION	0.6933679895504051	WITHOUT_CLASSIFICATION	0.3066320104495948	DESIGN
if all fields are null, we might need to delete existing row	WITHOUT_CLASSIFICATION	0.9999224314286844	WITHOUT_CLASSIFICATION	7.756857131560245E-5	DESIGN
there is probably a row there, so try to update if no rows were updated, we will find out	WITHOUT_CLASSIFICATION	0.9891644695047882	WITHOUT_CLASSIFICATION	0.010835530495211772	DESIGN
note: updates to joined tables can't be batched...	WITHOUT_CLASSIFICATION	0.9999986278711912	WITHOUT_CLASSIFICATION	1.3721288087791664E-6	DESIGN
starting index	WITHOUT_CLASSIFICATION	0.999997401887102	WITHOUT_CLASSIFICATION	2.5981128980135146E-6	DESIGN
Now write the values of fields onto the prepared statement	WITHOUT_CLASSIFICATION	0.9999611404096356	WITHOUT_CLASSIFICATION	3.885959036443321E-5	DESIGN
Write any appropriate versioning conditional parameters	WITHOUT_CLASSIFICATION	0.9999385504581864	WITHOUT_CLASSIFICATION	6.14495418136246E-5	DESIGN
Render the SQL query	WITHOUT_CLASSIFICATION	0.9997280160133234	WITHOUT_CLASSIFICATION	2.71983986676494E-4	DESIGN
Do the key. The key is immutable so we can use the _current_ object state - not necessarily the state at the time the delete was issued	WITHOUT_CLASSIFICATION	0.9999998735186463	WITHOUT_CLASSIFICATION	1.2648135376278953E-7	DESIGN
We should use the _current_ object state (ie. after any updates that occurred during flush)	WITHOUT_CLASSIFICATION	0.9999999507948752	WITHOUT_CLASSIFICATION	4.920512475071566E-8	DESIGN
this property belongs to the table and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9990297309517895	WITHOUT_CLASSIFICATION	9.702690482104298E-4	DESIGN
note: dirtyFields==null means we had no snapshot, and we couldn't get one using select-before-update oldFields==null just means we had no snapshot to begin with (we might have used select-before-update to get the dirtyFields)	WITHOUT_CLASSIFICATION	0.9999201600450468	WITHOUT_CLASSIFICATION	7.983995495324833E-5	DESIGN
more specifically : "datetime [op] ?" 1) if the operator is MINUS, we really cannot determine the expected type as either another datetime or numeric would be valid 2) if the operator is PLUS, the param needs to be of some numeric type	WITHOUT_CLASSIFICATION	0.9999304681218995	WITHOUT_CLASSIFICATION	6.953187810054446E-5	DESIGN
For the case of dynamic-update="true", we need to generate the UPDATE SQL	WITHOUT_CLASSIFICATION	0.9999977594471926	WITHOUT_CLASSIFICATION	2.2405528074293244E-6	DESIGN
don't need to check laziness (dirty checking algorithm handles that)	WITHOUT_CLASSIFICATION	0.8319378784930439	WITHOUT_CLASSIFICATION	0.16806212150695612	DESIGN
For the case of dynamic-update="false", or no snapshot, we use the static SQL	WITHOUT_CLASSIFICATION	0.9999994867905669	WITHOUT_CLASSIFICATION	5.132094331078117E-7	DESIGN
if not "get", then try "is"	WITHOUT_CLASSIFICATION	0.9999425297183425	WITHOUT_CLASSIFICATION	5.747028165740087E-5	DESIGN
Now update only the tables with dirty properties (and the table with the version number)	WITHOUT_CLASSIFICATION	0.9999950744089778	WITHOUT_CLASSIFICATION	4.925591022200041E-6	DESIGN
For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999944380626454	WITHOUT_CLASSIFICATION	5.5619373546626E-6	DESIGN
For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999944380626454	WITHOUT_CLASSIFICATION	5.5619373546626E-6	DESIGN
For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999999584941669	WITHOUT_CLASSIFICATION	4.150583308590245E-8	DESIGN
For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999999584941669	WITHOUT_CLASSIFICATION	4.150583308590245E-8	DESIGN
not supported	WITHOUT_CLASSIFICATION	0.9968953670769773	WITHOUT_CLASSIFICATION	0.0031046329230227966	DESIGN
this property belongs to the table and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9990297309517895	WITHOUT_CLASSIFICATION	9.702690482104298E-4	DESIGN
we need to utilize dynamic delete statements	WITHOUT_CLASSIFICATION	0.9999449168298649	WITHOUT_CLASSIFICATION	5.5083170135096096E-5	DESIGN
otherwise, utilize the static delete statements	WITHOUT_CLASSIFICATION	0.9999946444763107	WITHOUT_CLASSIFICATION	5.35552368930195E-6	DESIGN
just a performance opt!	WITHOUT_CLASSIFICATION	0.9996676634799538	WITHOUT_CLASSIFICATION	3.3233652004620377E-4	DESIGN
just a performance opt!	WITHOUT_CLASSIFICATION	0.9996676634799538	WITHOUT_CLASSIFICATION	3.3233652004620377E-4	DESIGN
all joins join to the pk of the driving table	WITHOUT_CLASSIFICATION	0.9999999386303994	WITHOUT_CLASSIFICATION	6.13696006347077E-8	DESIGN
notice that we skip the first table; it is the driving table!	WITHOUT_CLASSIFICATION	0.9999970279745938	WITHOUT_CLASSIFICATION	2.9720254061501414E-6	DESIGN
we can inner join to superclass tables (the row MUST be there) we can never inner join to subclass tables	WITHOUT_CLASSIFICATION	0.9999240037699174	WITHOUT_CLASSIFICATION	7.599623008258285E-5	DESIGN
skip the driving table	WITHOUT_CLASSIFICATION	0.9999995982742546	WITHOUT_CLASSIFICATION	4.0172574544961807E-7	DESIGN
get 'em in the right order (not that it really matters)	WITHOUT_CLASSIFICATION	0.9893957168679666	WITHOUT_CLASSIFICATION	0.010604283132033382	DESIGN
here, we work under the following assumptions: ------------ valid cases -------------------------------------- 1) datetime + {something other than datetime} : always results in a datetime ( db will catch invalid conversions ) 2) datetime - datetime : always results in a DOUBLE 3) datetime - {something other than datetime} : always results in a datetime ( db will catch invalid conversions ) ------------ invalid cases ------------------------------------ 4) datetime + datetime 5) {something other than datetime} - datetime 6) datetime {any type} 7) datetime / {any type} 8) {any type} / datetime doing so allows us to properly handle parameters as either the left or right side here in the majority of cases	WITHOUT_CLASSIFICATION	0.9999995612987117	WITHOUT_CLASSIFICATION	4.387012882840484E-7	DESIGN
render the where and from parts	WITHOUT_CLASSIFICATION	0.9999644466258808	WITHOUT_CLASSIFICATION	3.555337411927135E-5	DESIGN
we could regerate this inside each called method!	WITHOUT_CLASSIFICATION	0.9002639922011916	WITHOUT_CLASSIFICATION	0.09973600779880841	DESIGN
now render the joins	WITHOUT_CLASSIFICATION	0.9999876367563201	WITHOUT_CLASSIFICATION	1.236324367981004E-5	DESIGN
This will add the new from element to the origin.	WITHOUT_CLASSIFICATION	0.9999979627386515	WITHOUT_CLASSIFICATION	2.037261348427716E-6	DESIGN
now render the select clause	WITHOUT_CLASSIFICATION	0.9999967990641156	WITHOUT_CLASSIFICATION	3.200935884394766E-6	DESIGN
now tie it all together	WITHOUT_CLASSIFICATION	0.9999736684980619	WITHOUT_CLASSIFICATION	2.6331501938130534E-5	DESIGN
insert/update/delete SQL	WITHOUT_CLASSIFICATION	0.9999974873527788	WITHOUT_CLASSIFICATION	2.5126472211083245E-6	DESIGN
select SQL	WITHOUT_CLASSIFICATION	0.9999884582022511	WITHOUT_CLASSIFICATION	1.154179774880593E-5	DESIGN
no need to check laziness, dirty checking handles that	WITHOUT_CLASSIFICATION	0.9988319418092084	WITHOUT_CLASSIFICATION	0.0011680581907915417	DESIGN
Fully resolve the map reference, create implicit joins.	WITHOUT_CLASSIFICATION	0.9997927991214205	WITHOUT_CLASSIFICATION	2.0720087857952177E-4	DESIGN
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9980529398862114	WITHOUT_CLASSIFICATION	0.0019470601137885398	DESIGN
The basic implementation is to simply use the node's text	WITHOUT_CLASSIFICATION	0.9999998459794404	WITHOUT_CLASSIFICATION	1.5402055960194078E-7	DESIGN
for dialects which are known to not support ANSI-SQL row-value-constructor syntax, we should mutate the tree.	WITHOUT_CLASSIFICATION	0.9999296504928504	WITHOUT_CLASSIFICATION	7.034950714948488E-5	DESIGN
Due to the complexity in initializing the SelectClause, do not generate one here. If it is not found; simply return null... Also, do not cache since it gets generated well after we are created.	WITHOUT_CLASSIFICATION	0.9999809014957538	WITHOUT_CLASSIFICATION	1.9098504246231774E-5	DESIGN
check the version unsaved-value, if appropriate	WITHOUT_CLASSIFICATION	0.9999776248287005	WITHOUT_CLASSIFICATION	2.237517129960909E-5	DESIGN
let this take precedence if defined, since it works for assigned identifiers	WITHOUT_CLASSIFICATION	0.9999997398362246	WITHOUT_CLASSIFICATION	2.601637754843421E-7	DESIGN
check the id unsaved-value	WITHOUT_CLASSIFICATION	0.9999950902347479	WITHOUT_CLASSIFICATION	4.909765252189805E-6	DESIGN
check to see if it is in the second-level cache	WITHOUT_CLASSIFICATION	0.9998813531413931	WITHOUT_CLASSIFICATION	1.1864685860692521E-4	DESIGN
/	WITHOUT_CLASSIFICATION	0.9999404455295717	WITHOUT_CLASSIFICATION	5.9554470428206114E-5	DESIGN
For property references generate <tablealias>.<columnname> as <projectionalias>	WITHOUT_CLASSIFICATION	0.9999982635529594	WITHOUT_CLASSIFICATION	1.7364470406061135E-6	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999420617157849	WITHOUT_CLASSIFICATION	5.7938284215003745E-5	DESIGN
if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999996262402349	WITHOUT_CLASSIFICATION	3.7375976518286406E-7	DESIGN
force immediate execution of the insert	WITHOUT_CLASSIFICATION	0.9999999776288743	WITHOUT_CLASSIFICATION	2.2371125681090844E-8	DESIGN
If this from element is a collection and the path is a collection property (maxIndex, etc.) then generate a sub-query.	WITHOUT_CLASSIFICATION	0.9999932695452307	WITHOUT_CLASSIFICATION	6.730454769358845E-6	DESIGN
entities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999345191428145	WITHOUT_CLASSIFICATION	6.548085718549044E-5	DESIGN
collections ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999931179162557	WITHOUT_CLASSIFICATION	6.882083744361347E-6	DESIGN
cannot occur	WITHOUT_CLASSIFICATION	0.9999984485488809	WITHOUT_CLASSIFICATION	1.551451119163882E-6	DESIGN
cannot occur	WITHOUT_CLASSIFICATION	0.9999984485488809	WITHOUT_CLASSIFICATION	1.551451119163882E-6	DESIGN
only carry on if the method has no parameters	WITHOUT_CLASSIFICATION	0.9999942001326625	WITHOUT_CLASSIFICATION	5.799867337575998E-6	DESIGN
try "get"	WITHOUT_CLASSIFICATION	0.9999867464929458	WITHOUT_CLASSIFICATION	1.325350705405353E-5	DESIGN
do nothing...	WITHOUT_CLASSIFICATION	0.99994928453349	WITHOUT_CLASSIFICATION	5.071546651010899E-5	DESIGN
do nothing...	WITHOUT_CLASSIFICATION	0.99994928453349	WITHOUT_CLASSIFICATION	5.071546651010899E-5	DESIGN
should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9999733034885367	WITHOUT_CLASSIFICATION	2.669651146330261E-5	DESIGN
this page intentionally left blank :)	WITHOUT_CLASSIFICATION	0.9994225021350875	WITHOUT_CLASSIFICATION	5.774978649123419E-4	DESIGN
do not do anything	WITHOUT_CLASSIFICATION	0.9999967105235773	WITHOUT_CLASSIFICATION	3.2894764227309105E-6	DESIGN
ignore	WITHOUT_CLASSIFICATION	0.9999964313733375	WITHOUT_CLASSIFICATION	3.5686266624094358E-6	DESIGN
cant instantiate	WITHOUT_CLASSIFICATION	0.99995635193372	WITHOUT_CLASSIFICATION	4.3648066280066375E-5	DESIGN
if it is a property of an embedded component, invoke on the "identifier"	WITHOUT_CLASSIFICATION	0.9999638667224154	WITHOUT_CLASSIFICATION	3.613327758457286E-5	DESIGN
otherwise:	WITHOUT_CLASSIFICATION	0.9962720056555322	WITHOUT_CLASSIFICATION	0.0037279943444678255	DESIGN
skip finalize methods	WITHOUT_CLASSIFICATION	0.9997301284882244	WITHOUT_CLASSIFICATION	2.6987151177559784E-4	DESIGN
note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9993626734319405	WITHOUT_CLASSIFICATION	6.37326568059504E-4	DESIGN
note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9993626734319405	WITHOUT_CLASSIFICATION	6.37326568059504E-4	DESIGN
HHH-2481 make sure the callback gets cleared, otherwise the instance stays in a static thread local.	WITHOUT_CLASSIFICATION	0.9868591381226288	WITHOUT_CLASSIFICATION	0.013140861877371193	DESIGN
while constructor is running	WITHOUT_CLASSIFICATION	0.9999556455840968	WITHOUT_CLASSIFICATION	4.435441590316466E-5	DESIGN
while constructor is running	WITHOUT_CLASSIFICATION	0.9999556455840968	WITHOUT_CLASSIFICATION	4.435441590316466E-5	DESIGN
note: interface is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9988950670897623	WITHOUT_CLASSIFICATION	0.0011049329102377845	DESIGN
interfaces arguments	WITHOUT_CLASSIFICATION	0.9996964289787974	WITHOUT_CLASSIFICATION	3.035710212025256E-4	DESIGN
TODO!	WITHOUT_CLASSIFICATION	0.9958950067819939	WITHOUT_CLASSIFICATION	0.004104993218005973	DESIGN
Get the caller	WITHOUT_CLASSIFICATION	0.9999984642933615	WITHOUT_CLASSIFICATION	1.5357066385548565E-6	DESIGN
Get the caller principals	WITHOUT_CLASSIFICATION	0.9999980473849723	WITHOUT_CLASSIFICATION	1.952615027642755E-6	DESIGN
private static final Alias DEFAULT_ALIAS = new Alias(10, null);	WITHOUT_CLASSIFICATION	0.9999999974980557	WITHOUT_CLASSIFICATION	2.501944296005368E-9	DESIGN
Needed to bump this up to DotNode, because that is the only thing which currently knows about the property-ref path in the correct format; it is either this, or recurse over the DotNodes constructing the property path just like DotNode does internally	WITHOUT_CLASSIFICATION	0.9999991324286546	WITHOUT_CLASSIFICATION	8.675713455173421E-7	DESIGN
if the identifier is quoted, remove the quotes	WITHOUT_CLASSIFICATION	0.999957054518692	WITHOUT_CLASSIFICATION	4.294548130801786E-5	DESIGN
truncate the identifier to the max alias length, less the suffix length	WITHOUT_CLASSIFICATION	0.9999987090856022	WITHOUT_CLASSIFICATION	1.2909143978312578E-6	DESIGN
full joins are not supported.. yet!	WITHOUT_CLASSIFICATION	0.9998773576182388	WITHOUT_CLASSIFICATION	1.2264238176127283E-4	DESIGN
null is not considered the same type as Integer. $NON-NLS-1 $NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999994321963679	WITHOUT_CLASSIFICATION	5.678036322296056E-7	DESIGN
the outerJoinsAfterWhere needs to come before where clause to properly handle dynamic filters	WITHOUT_CLASSIFICATION	0.999965122277725	WITHOUT_CLASSIFICATION	3.4877722274885766E-5	DESIGN
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999855498059627	WITHOUT_CLASSIFICATION	1.4450194037299041E-5	DESIGN
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999855498059627	WITHOUT_CLASSIFICATION	1.4450194037299041E-5	DESIGN
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999855498059627	WITHOUT_CLASSIFICATION	1.4450194037299041E-5	DESIGN
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999855498059627	WITHOUT_CLASSIFICATION	1.4450194037299041E-5	DESIGN
strip off any leading 'and' token	WITHOUT_CLASSIFICATION	0.9999995551793229	WITHOUT_CLASSIFICATION	4.448206770527389E-7	DESIGN
if the condition is not already there...	WITHOUT_CLASSIFICATION	0.9999759549469814	WITHOUT_CLASSIFICATION	2.4045053018588876E-5	DESIGN
dontSpace.add("'");	WITHOUT_CLASSIFICATION	0.9999935453887501	WITHOUT_CLASSIFICATION	6.454611249927534E-6	DESIGN
for MySQL	WITHOUT_CLASSIFICATION	0.9999004723719742	WITHOUT_CLASSIFICATION	9.952762802575374E-5	DESIGN
HashMap columnsUnique = new HashMap();	WITHOUT_CLASSIFICATION	0.9999991637064634	WITHOUT_CLASSIFICATION	8.362935366739248E-7	DESIGN
null caused some problems	WITHOUT_CLASSIFICATION	0.9931385721601753	WITHOUT_CLASSIFICATION	0.006861427839824734	DESIGN
package	WITHOUT_CLASSIFICATION	0.9997769428108455	WITHOUT_CLASSIFICATION	2.2305718915444837E-4	DESIGN
not sure if this would ever be null but wanted to be careful	WITHOUT_CLASSIFICATION	0.9911137573842913	WITHOUT_CLASSIFICATION	0.008886242615708672	DESIGN
even on inverse="true"	WITHOUT_CLASSIFICATION	0.9999928766244341	WITHOUT_CLASSIFICATION	7.123375565959072E-6	DESIGN
package	WITHOUT_CLASSIFICATION	0.9997769428108455	WITHOUT_CLASSIFICATION	2.2305718915444837E-4	DESIGN
package	WITHOUT_CLASSIFICATION	0.9997769428108455	WITHOUT_CLASSIFICATION	2.2305718915444837E-4	DESIGN
If true then execute db updates, otherwise just generate and display updates	WITHOUT_CLASSIFICATION	0.9999995120912052	WITHOUT_CLASSIFICATION	4.87908794832535E-7	DESIGN
we only release the connection	WITHOUT_CLASSIFICATION	0.9999995827542411	WITHOUT_CLASSIFICATION	4.172457589092811E-7	DESIGN
deprecated option...	WITHOUT_CLASSIFICATION	0.9998824464422369	WITHOUT_CLASSIFICATION	1.1755355776320218E-4	DESIGN
if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999995379307808	WITHOUT_CLASSIFICATION	4.620692191366436E-7	DESIGN
actually, this last test is probably unnecessary, since beforeCompletion() doesn't get called during rollback	WITHOUT_CLASSIFICATION	0.9991922362173932	WITHOUT_CLASSIFICATION	8.077637826067602E-4	DESIGN
this one only really needed for badly-behaved applications! (if the TransactionManager has a Sychronization registered, its a noop) (actually we do need it for downgrading locks)	WITHOUT_CLASSIFICATION	0.9999996876112364	WITHOUT_CLASSIFICATION	3.123887637035068E-7	DESIGN
Create an DotNode AST for the path and resolve it.	WITHOUT_CLASSIFICATION	0.9999854145938529	WITHOUT_CLASSIFICATION	1.4585406146948833E-5	DESIGN
if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999995379307808	WITHOUT_CLASSIFICATION	4.620692191366436E-7	DESIGN
if we could not register a synchronization, do the before/after completion callbacks ourself (but we need to let jdbcContext know that this is what we are going to do, so it doesn't keep trying to register synchronizations)	WITHOUT_CLASSIFICATION	0.9999999259296777	WITHOUT_CLASSIFICATION	7.407032231608275E-8	DESIGN
swallow it, and continue to roll back JTA transaction	WITHOUT_CLASSIFICATION	0.9998609778900984	WITHOUT_CLASSIFICATION	1.3902210990153903E-4	DESIGN
so the transaction is already rolled back, by JTA spec	WITHOUT_CLASSIFICATION	0.9999972741305272	WITHOUT_CLASSIFICATION	2.725869472772816E-6	DESIGN
this method is a noop if there is a Synchronization!	WITHOUT_CLASSIFICATION	0.9989745572370554	WITHOUT_CLASSIFICATION	0.0010254427629446724	DESIGN
two conditions where we need to transform this to a theta-join syntax: 1) 'elem' is the "root from-element" in correlated subqueries 2) The DotNode.useThetaStyleImplicitJoins has been set to true and 'elem' represents an implicit join	WITHOUT_CLASSIFICATION	0.9995524423660885	WITHOUT_CLASSIFICATION	4.475576339114942E-4	DESIGN
WebSphere, however, is not a sane JEE/JTA container...	WITHOUT_CLASSIFICATION	0.9999967554452123	WITHOUT_CLASSIFICATION	3.244554787840301E-6	DESIGN
for sane JEE/JTA containers, the transaction itself functions as its identifier...	WITHOUT_CLASSIFICATION	0.999996965816903	WITHOUT_CLASSIFICATION	3.0341830969715627E-6	DESIGN
swallow, the transaction was finished	WITHOUT_CLASSIFICATION	0.9999987008923684	WITHOUT_CLASSIFICATION	1.2991076315841353E-6	DESIGN
all AliasToEntityMapResultTransformer are considered equal ~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999540925902	WITHOUT_CLASSIFICATION	4.5907409806233134E-7	DESIGN
Create the join element under the from element.	WITHOUT_CLASSIFICATION	0.9999997333269809	WITHOUT_CLASSIFICATION	2.6667301909869695E-7	DESIGN
all DistinctRootEntityResultTransformer are considered equal ~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998654953428	WITHOUT_CLASSIFICATION	1.3450465720110907E-7	DESIGN
map of EntityMode -> Tuplizer	WITHOUT_CLASSIFICATION	0.9999841132411956	WITHOUT_CLASSIFICATION	1.588675880443888E-5	DESIGN
this is a virtual id property...	WITHOUT_CLASSIFICATION	0.9994722348436188	WITHOUT_CLASSIFICATION	5.277651563811504E-4	DESIGN
this one needed only for guessEntityMode()	WITHOUT_CLASSIFICATION	0.9801313195708092	WITHOUT_CLASSIFICATION	0.019868680429190794	DESIGN
create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999808512876861	WITHOUT_CLASSIFICATION	1.9148712313975254E-5	DESIGN
todo : move this to SF per HHH-3517; also see HHH-1907 and ComponentMetamodel	WITHOUT_CLASSIFICATION	0.9421644819933146	WITHOUT_CLASSIFICATION	0.057835518006685446	DESIGN
then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9996346817699013	WITHOUT_CLASSIFICATION	3.6531823009860396E-4	DESIGN
Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999623465925488	WITHOUT_CLASSIFICATION	3.7653407451168705E-5	DESIGN
then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9996689598864904	WITHOUT_CLASSIFICATION	3.310401135096879E-4	DESIGN
Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999623465925488	WITHOUT_CLASSIFICATION	3.7653407451168705E-5	DESIGN
put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999980779480425	WITHOUT_CLASSIFICATION	1.9220519575732747E-6	DESIGN
found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999472945069019	WITHOUT_CLASSIFICATION	5.2705493098178985E-5	DESIGN
private final SessionFactoryImplementor sessionFactory;	WITHOUT_CLASSIFICATION	0.9993438261995266	WITHOUT_CLASSIFICATION	6.561738004735312E-4	DESIGN
cached for efficiency...	WITHOUT_CLASSIFICATION	0.9976526708528655	WITHOUT_CLASSIFICATION	0.0023473291471346443	DESIGN
public ComponentMetamodel(Component component, SessionFactoryImplementor sessionFactory) {	WITHOUT_CLASSIFICATION	0.9947260632564064	WITHOUT_CLASSIFICATION	0.005273936743593534	DESIGN
this.sessionFactory = sessionFactory;	WITHOUT_CLASSIFICATION	0.9998738156073301	WITHOUT_CLASSIFICATION	1.2618439266990443E-4	DESIGN
it was not embedded, so the argument is just an id	WITHOUT_CLASSIFICATION	0.9999524304650138	WITHOUT_CLASSIFICATION	4.756953498611079E-5	DESIGN
then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9996346817699013	WITHOUT_CLASSIFICATION	3.6531823009860396E-4	DESIGN
then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9996689598864904	WITHOUT_CLASSIFICATION	3.310401135096879E-4	DESIGN
put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999980779480425	WITHOUT_CLASSIFICATION	1.9220519575732747E-6	DESIGN
then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9925865194346705	WITHOUT_CLASSIFICATION	0.007413480565329656	DESIGN
return currentId;	WITHOUT_CLASSIFICATION	0.999992975503582	WITHOUT_CLASSIFICATION	7.024496417972975E-6	DESIGN
reset the id	WITHOUT_CLASSIFICATION	0.9999976339206477	WITHOUT_CLASSIFICATION	2.3660793523134477E-6	DESIGN
origin.addDestination( destination ); This was the cause of HHH-242 origin.setType( FROM_FRAGMENT ); Set the parent node type so that the AST is properly formed. The destination node will have all the FROM text. The parent node is a collection join too (voodoo - see JoinProcessor)	WITHOUT_CLASSIFICATION	0.9999999978916798	WITHOUT_CLASSIFICATION	2.1083201695846715E-9	DESIGN
reset the version	WITHOUT_CLASSIFICATION	0.9999988261122053	WITHOUT_CLASSIFICATION	1.1738877947149177E-6	DESIGN
the default is to simply not lazy fetch properties for now...	WITHOUT_CLASSIFICATION	0.9989443872202526	WITHOUT_CLASSIFICATION	0.0010556127797473858	DESIGN
Add the second join, the one that ends in the destination table.	WITHOUT_CLASSIFICATION	0.9999999902878942	WITHOUT_CLASSIFICATION	9.71210574559263E-9	DESIGN
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9980529398862114	WITHOUT_CLASSIFICATION	0.0019470601137885398	DESIGN
found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999472945069019	WITHOUT_CLASSIFICATION	5.2705493098178985E-5	DESIGN
determine the id getter and setter methods from the proxy interface (if any) determine all interfaces needed by the resulting proxy	WITHOUT_CLASSIFICATION	0.9999811832414743	WITHOUT_CLASSIFICATION	1.8816758525722292E-5	DESIGN
return getFactory().getSettings().getBytecodeProvider().getProxyFactoryFactory().buildProxyFactory();	WITHOUT_CLASSIFICATION	0.9999830293758052	WITHOUT_CLASSIFICATION	1.6970624194831678E-5	DESIGN
not final because proxy factory creation can fail	WITHOUT_CLASSIFICATION	0.9995176096976857	WITHOUT_CLASSIFICATION	4.82390302314296E-4	DESIGN
superclass entity-name	WITHOUT_CLASSIFICATION	0.9999954920679426	WITHOUT_CLASSIFICATION	4.507932057374913E-6	DESIGN
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9980529398862114	WITHOUT_CLASSIFICATION	0.0019470601137885398	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999420617157849	WITHOUT_CLASSIFICATION	5.7938284215003745E-5	DESIGN
init the aliases, after initing the constructornode	WITHOUT_CLASSIFICATION	0.999993638495859	WITHOUT_CLASSIFICATION	6.361504141010288E-6	DESIGN
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9980529398862114	WITHOUT_CLASSIFICATION	0.0019470601137885398	DESIGN
legacy behavior (with no abstract attribute specified)	WITHOUT_CLASSIFICATION	0.9999819962137475	WITHOUT_CLASSIFICATION	1.800378625244515E-5	DESIGN
Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999991884415939	WITHOUT_CLASSIFICATION	8.115584061367598E-7	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999420617157849	WITHOUT_CLASSIFICATION	5.7938284215003745E-5	DESIGN
note: this affects the return value!	WITHOUT_CLASSIFICATION	0.9999153556648126	WITHOUT_CLASSIFICATION	8.464433518740469E-5	DESIGN
Need to account for allowable '_' within the variant	WITHOUT_CLASSIFICATION	0.9999962458998066	WITHOUT_CLASSIFICATION	3.754100193375724E-6	DESIGN
Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999993889142108	WITHOUT_CLASSIFICATION	6.110857891957793E-7	DESIGN
Collection Types:	WITHOUT_CLASSIFICATION	0.9999887690199312	WITHOUT_CLASSIFICATION	1.123098006886994E-5	DESIGN
convenience methods relating to operations across arrays of types...	WITHOUT_CLASSIFICATION	0.9999609156809314	WITHOUT_CLASSIFICATION	3.908431906856262E-5	DESIGN
lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999946515095733	WITHOUT_CLASSIFICATION	5.348490426632938E-6	DESIGN
Blobs are ignored by merge()	WITHOUT_CLASSIFICATION	0.9999997489184789	WITHOUT_CLASSIFICATION	2.5108152116138366E-7	DESIGN
value is the entity name	WITHOUT_CLASSIFICATION	0.9999882866724462	WITHOUT_CLASSIFICATION	1.171332755381478E-5	DESIGN
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999954228893111	WITHOUT_CLASSIFICATION	4.577110688832025E-6	DESIGN
generate id select fragment and then property select fragment for each expression, just like generateSelectFragments().	WITHOUT_CLASSIFICATION	0.9998005963940066	WITHOUT_CLASSIFICATION	1.9940360599330452E-4	DESIGN
TODO!	WITHOUT_CLASSIFICATION	0.9958950067819939	WITHOUT_CLASSIFICATION	0.004104993218005973	DESIGN
xml is the entity name	WITHOUT_CLASSIFICATION	0.9999894106282423	WITHOUT_CLASSIFICATION	1.0589371757760374E-5	DESIGN
special case ... this is the leaf of the containment graph, even though not immutable	WITHOUT_CLASSIFICATION	0.9995941789991754	WITHOUT_CLASSIFICATION	4.0582100082466586E-4	DESIGN
tolerates nulls	WITHOUT_CLASSIFICATION	0.9999944848147481	WITHOUT_CLASSIFICATION	5.515185251932734E-6	DESIGN
sqlResultTypeList,	WITHOUT_CLASSIFICATION	0.9999983052087629	WITHOUT_CLASSIFICATION	1.6947912371450717E-6	DESIGN
metaType is assumed to be single-column type	WITHOUT_CLASSIFICATION	0.9999838501017584	WITHOUT_CLASSIFICATION	1.6149898241674103E-5	DESIGN
Get all the select expressions (that we just generated) and render the select.	WITHOUT_CLASSIFICATION	0.9999404578247637	WITHOUT_CLASSIFICATION	5.954217523630386E-5	DESIGN
Look through the FromElement's children to find any collections of values that should be fetched...	WITHOUT_CLASSIFICATION	0.9998096827450356	WITHOUT_CLASSIFICATION	1.9031725496443513E-4	DESIGN
return AssociationType.FOREIGN_KEY_TO_PARENT; this is better but causes a transient object exception...	WITHOUT_CLASSIFICATION	0.9863341662581674	WITHOUT_CLASSIFICATION	0.013665833741832653	DESIGN
Use the lower case function name. Remember whether we're in a SELECT clause or not.	WITHOUT_CLASSIFICATION	0.999999975179652	WITHOUT_CLASSIFICATION	2.482034798393808E-8	DESIGN
IDENT might be the name of a class.	WITHOUT_CLASSIFICATION	0.9999182687409532	WITHOUT_CLASSIFICATION	8.173125904678666E-5	DESIGN
TODO!!!	WITHOUT_CLASSIFICATION	0.9824395756132946	WITHOUT_CLASSIFICATION	0.017560424386705364	DESIGN
st.setTimestamp( index, new Timestamp( cal.getTimeInMillis() ), cal ); JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9999999989510624	WITHOUT_CLASSIFICATION	1.04893753523463E-9	DESIGN
st.setDate( index, new Date( cal.getTimeInMillis() ), cal ); JDK 1.5 only	WITHOUT_CLASSIFICATION	0.999999998528793	WITHOUT_CLASSIFICATION	1.4712071497437616E-9	DESIGN
both are Timestamps	WITHOUT_CLASSIFICATION	0.9999985469761082	WITHOUT_CLASSIFICATION	1.4530238917275484E-6	DESIGN
at least one is a plain old Date	WITHOUT_CLASSIFICATION	0.9999939931150947	WITHOUT_CLASSIFICATION	6.006884905245761E-6	DESIGN
noop	WITHOUT_CLASSIFICATION	0.9999359649528238	WITHOUT_CLASSIFICATION	6.403504717621787E-5	DESIGN
if the corresponding SQL value is NULL, the reader we got is NULL as well	WITHOUT_CLASSIFICATION	0.999999916049672	WITHOUT_CLASSIFICATION	8.395032802128527E-8	DESIGN
Fetch Reader content up to the end - and put characters in a StringBuffer	WITHOUT_CLASSIFICATION	0.999870503783736	WITHOUT_CLASSIFICATION	1.2949621626396924E-4	DESIGN
Return StringBuffer content as a large String	WITHOUT_CLASSIFICATION	0.999995291764287	WITHOUT_CLASSIFICATION	4.7082357129937425E-6	DESIGN
or Types.LONGVARCHAR?	WITHOUT_CLASSIFICATION	0.9952962469461386	WITHOUT_CLASSIFICATION	0.0047037530538613865	DESIGN
Not called at runtime so doesn't matter if its slow :)	WITHOUT_CLASSIFICATION	0.9999664214666355	WITHOUT_CLASSIFICATION	3.3578533364600874E-5	DESIGN
TODO	WITHOUT_CLASSIFICATION	0.9949196930864371	WITHOUT_CLASSIFICATION	0.0050803069135629	DESIGN
Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999993480580286	WITHOUT_CLASSIFICATION	6.519419714021096E-7	DESIGN
different nullability rules for pk/fk	WITHOUT_CLASSIFICATION	0.9999779962732538	WITHOUT_CLASSIFICATION	2.2003726746189015E-5	DESIGN
cache this	WITHOUT_CLASSIFICATION	0.9997777683862858	WITHOUT_CLASSIFICATION	2.2223161371424282E-4	DESIGN
only really need new array during semiresolve!	WITHOUT_CLASSIFICATION	0.9999460846701698	WITHOUT_CLASSIFICATION	5.391532983030574E-5	DESIGN
Forcefully remove leading ands from where fragments; the grammar will handle adding them	WITHOUT_CLASSIFICATION	0.9975545365826711	WITHOUT_CLASSIFICATION	0.002445463417328899	DESIGN
TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9878055159685661	WITHOUT_CLASSIFICATION	0.01219448403143382	DESIGN
Create a new FILTERS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999999235693172	WITHOUT_CLASSIFICATION	7.643068277245125E-8	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999420617157849	WITHOUT_CLASSIFICATION	5.7938284215003745E-5	DESIGN
public Object instantiate(Object parent, SessionImplementor session) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9074915848962875	WITHOUT_CLASSIFICATION	0.09250841510371247	DESIGN
nothing to do	WITHOUT_CLASSIFICATION	0.9999476943073606	WITHOUT_CLASSIFICATION	5.2305692639364004E-5	DESIGN
nothing to do	WITHOUT_CLASSIFICATION	0.9999476943073606	WITHOUT_CLASSIFICATION	5.2305692639364004E-5	DESIGN
VersionType impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Note : simply returns null for seed() and next() as the only known application of binary types for versioning is for use with the TIMESTAMP datatype supported by Sybase and SQL Server, which are completely db-generated values...	WITHOUT_CLASSIFICATION	0.9999997836880165	WITHOUT_CLASSIFICATION	2.163119836872343E-7	DESIGN
lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999946515095733	WITHOUT_CLASSIFICATION	5.348490426632938E-6	DESIGN
not really necessary, I guess...	WITHOUT_CLASSIFICATION	0.9807098617201074	WITHOUT_CLASSIFICATION	0.019290138279892562	DESIGN
Clobs are ignored by merge() operation	WITHOUT_CLASSIFICATION	0.9999999854800312	WITHOUT_CLASSIFICATION	1.4519968878547066E-8	DESIGN
we do not have to worry about queued additions to uninitialized collections, since they can only occur for inverse collections!	WITHOUT_CLASSIFICATION	0.9999999948005621	WITHOUT_CLASSIFICATION	5.199437869374793E-9	DESIGN
collections cannot be compared	WITHOUT_CLASSIFICATION	0.9999972473042508	WITHOUT_CLASSIFICATION	2.7526957493260218E-6	DESIGN
remember the uk value	WITHOUT_CLASSIFICATION	0.9999861816894485	WITHOUT_CLASSIFICATION	1.38183105513421E-5	DESIGN
NOOP	WITHOUT_CLASSIFICATION	0.9999595708746514	WITHOUT_CLASSIFICATION	4.042912534871847E-5	DESIGN
processCollectionProperty(token, q.getCollectionPersister(collectionRole), collectionName);	WITHOUT_CLASSIFICATION	0.9999999933764538	WITHOUT_CLASSIFICATION	6.623546105102754E-9	DESIGN
we must use the "remembered" uk value, since it is not available from the EntityEntry during assembly	WITHOUT_CLASSIFICATION	0.9999819953424507	WITHOUT_CLASSIFICATION	1.800465754934584E-5	DESIGN
collections don't dirty an unversioned parent entity	WITHOUT_CLASSIFICATION	0.9995114771125164	WITHOUT_CLASSIFICATION	4.885228874836227E-4	DESIGN
return false;	WITHOUT_CLASSIFICATION	0.9999988439115425	WITHOUT_CLASSIFICATION	1.1560884575814724E-6	DESIGN
This just handles a particular case of component projection, perhaps get rid of it and throw an exception	WITHOUT_CLASSIFICATION	0.9373461095135078	WITHOUT_CLASSIFICATION	0.06265389048649221	DESIGN
NOTE: we avoid joining to the next table if the named property is just the foreign key value	WITHOUT_CLASSIFICATION	0.9999998185809914	WITHOUT_CLASSIFICATION	1.8141900859817286E-7	DESIGN
the key is the owning entity itself, so get the ID from the key	WITHOUT_CLASSIFICATION	0.9999885499746837	WITHOUT_CLASSIFICATION	1.1450025316285339E-5	DESIGN
if the original is a PersistentCollection, and that original was not flagged as dirty, then reset the target's dirty flag here after the copy operation. </p> One thing to be careful of here is a "bare" original collection in which case we should never ever ever reset the dirty flag on the target because we simply do not know...	WITHOUT_CLASSIFICATION	0.9999999987006426	WITHOUT_CLASSIFICATION	1.2993573092872515E-9	DESIGN
ignore subselect keywords	WITHOUT_CLASSIFICATION	0.9999999108768575	WITHOUT_CLASSIFICATION	8.912314254090146E-8	DESIGN
copy elements into newly empty target collection	WITHOUT_CLASSIFICATION	0.9999999252134056	WITHOUT_CLASSIFICATION	7.478659430013768E-8	DESIGN
for a null target, or a target which is the same as the original, we need to put the merged elements in a new collection	WITHOUT_CLASSIFICATION	0.999993658872441	WITHOUT_CLASSIFICATION	6.341127558983755E-6	DESIGN
by default just use an unanticipated capacity since we don't know how to extract the capacity to use from original here...	WITHOUT_CLASSIFICATION	0.9206894868813917	WITHOUT_CLASSIFICATION	0.07931051311860823	DESIGN
get the elements back into the target making sure to handle dirty flag	WITHOUT_CLASSIFICATION	0.9999982444883607	WITHOUT_CLASSIFICATION	1.7555116392737292E-6	DESIGN
check if collection is currently being loaded	WITHOUT_CLASSIFICATION	0.9996756378123884	WITHOUT_CLASSIFICATION	3.2436218761150654E-4	DESIGN
check if it is already completely loaded, but unowned	WITHOUT_CLASSIFICATION	0.9999979986345756	WITHOUT_CLASSIFICATION	2.0013654243604455E-6	DESIGN
cache the actual id of the object, not the value of the property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999965150797251	WITHOUT_CLASSIFICATION	3.4849202750293584E-6	DESIGN
TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9878055159685661	WITHOUT_CLASSIFICATION	0.01219448403143382	DESIGN
create a new collection wrapper, to be initialized later	WITHOUT_CLASSIFICATION	0.9999926682709073	WITHOUT_CLASSIFICATION	7.33172909275299E-6	DESIGN
Some JDBC drivers erroneously return an empty array here for a null DB value :/	WITHOUT_CLASSIFICATION	0.9999786427651595	WITHOUT_CLASSIFICATION	2.1357234840474384E-5	DESIGN
our column span is the number of columns in the PK	WITHOUT_CLASSIFICATION	0.999999690684095	WITHOUT_CLASSIFICATION	3.0931590491057676E-7	DESIGN
cannot batch fetch by unique key (property-ref associations)	WITHOUT_CLASSIFICATION	0.9999998836392344	WITHOUT_CLASSIFICATION	1.1636076560115137E-7	DESIGN
we already know current is not null...	WITHOUT_CLASSIFICATION	0.9998489506560254	WITHOUT_CLASSIFICATION	1.5104934397454345E-4	DESIGN
the ids are fully resolved, so compare them with isDirty(), not isModified()	WITHOUT_CLASSIFICATION	0.9999974357470651	WITHOUT_CLASSIFICATION	2.564252934953304E-6	DESIGN
the owner of the association is not the owner of the id	WITHOUT_CLASSIFICATION	0.9999989428114444	WITHOUT_CLASSIFICATION	1.0571885556109726E-6	DESIGN
----------------------------------------------------------- Constructors	WITHOUT_CLASSIFICATION	0.9999883498772918	WITHOUT_CLASSIFICATION	1.1650122708241687E-5	DESIGN
----------------------------------------------------- Instance Variables	WITHOUT_CLASSIFICATION	0.9999993523209433	WITHOUT_CLASSIFICATION	6.476790566324234E-7	DESIGN
public static JDBCException newJDBCException(String string, SQLException root, String sql) { string = string + " [" + sql + ']'; log.error(string, root); logExceptions(root); return new JDBCException(string, root, sql); } public static JDBCException newJDBCException(String string, SQLException root) { log.error(string, root); logExceptions(root); return new JDBCException(string, root); }	WITHOUT_CLASSIFICATION	0.9999999990660962	WITHOUT_CLASSIFICATION	9.33903903100463E-10	DESIGN
--------------------------------------------------------- Public Methods	WITHOUT_CLASSIFICATION	0.9998662670894368	WITHOUT_CLASSIFICATION	1.3373291056317124E-4	DESIGN
Compare the two maps for equality	WITHOUT_CLASSIFICATION	0.9999996995887431	WITHOUT_CLASSIFICATION	3.004112569276903E-7	DESIGN
Simple tests that require no synchronization	WITHOUT_CLASSIFICATION	0.999999959795982	WITHOUT_CLASSIFICATION	4.020401800769414E-8	DESIGN
Sybase fail if we don't do that, sigh...	WITHOUT_CLASSIFICATION	0.9996658642158793	WITHOUT_CLASSIFICATION	3.341357841205971E-4	DESIGN
Handles things like: a and b or c a and ( b or c ) not a and not b not ( a and b ) x between y and z (overloaded "and") x in ( a, b, c ) (overloaded brackets) not not a a is not null (overloaded "not") etc...... and expressions like foo = bar (maps to: foo.id = bar.id) foo.Bar = 'foo' (maps to: foo.bar = 'foo') foo.Bar.Baz = 1.0 (maps to: foo.bar = bar.id and bar.baz = 1.0) 1.0 = foo.Bar.Baz (maps to: bar.baz = 1.0 and foo.Bar = bar.id) foo.Bar.Baz = a.B.C (maps to: bar.Baz = b.C and foo.Bar = bar.id and a.B = b.id) foo.Bar.Baz + a.B.C (maps to: bar.Baz + b.C and foo.Bar = bar.id and a.B = b.id) ( foo.Bar.Baz + 1.0 ) < 2.0 (maps to: ( bar.Baz + 1.0 ) < 2.0 and foo.Bar = bar.id)	WITHOUT_CLASSIFICATION	0.9999283182963576	WITHOUT_CLASSIFICATION	7.168170364228598E-5	DESIGN
release the jdk internal caches everytime to ensure this plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9999032843674046	WITHOUT_CLASSIFICATION	9.671563259536082E-5	DESIGN
release the jdk internal caches everytime to ensure this plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9999032843674046	WITHOUT_CLASSIFICATION	9.671563259536082E-5	DESIGN
try to "pretty print" it	WITHOUT_CLASSIFICATION	0.9999919623918107	WITHOUT_CLASSIFICATION	8.037608189361406E-6	DESIGN
otherwise, just dump it	WITHOUT_CLASSIFICATION	0.9998700970567022	WITHOUT_CLASSIFICATION	1.299029432977948E-4	DESIGN
its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9999676220043942	WITHOUT_CLASSIFICATION	3.237799560592442E-5	DESIGN
its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9999676220043942	WITHOUT_CLASSIFICATION	3.237799560592442E-5	DESIGN
use default behavior	WITHOUT_CLASSIFICATION	0.9999704819436348	WITHOUT_CLASSIFICATION	2.9518056365155372E-5	DESIGN
NOTE: early return	WITHOUT_CLASSIFICATION	0.9999678945977356	WITHOUT_CLASSIFICATION	3.2105402264451416E-5	DESIGN
the MRU cache used to keep hard references to the most recently used query plans; note : LRU here is a bit of a misnomer, it indicates that LRU entries are removed, the actual kept entries are the MRU entries	WITHOUT_CLASSIFICATION	0.5464609571076986	WITHOUT_CLASSIFICATION	0.45353904289230135	DESIGN
we want to be able to just use the defaults, if JNDI environment properties are not supplied so don't put null in anywhere	WITHOUT_CLASSIFICATION	0.9999803862369847	WITHOUT_CLASSIFICATION	1.9613763015268373E-5	DESIGN
Clone -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999980610005046	WITHOUT_CLASSIFICATION	1.938999495356875E-6	DESIGN
Serialize -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999998895431315	WITHOUT_CLASSIFICATION	1.1045686852715122E-7	DESIGN
stream closed in the finally	WITHOUT_CLASSIFICATION	0.999999390932071	WITHOUT_CLASSIFICATION	6.090679289060181E-7	DESIGN
stream closed in the finally	WITHOUT_CLASSIFICATION	0.999999390932071	WITHOUT_CLASSIFICATION	6.090679289060181E-7	DESIGN
Deserialize -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999998222224615	WITHOUT_CLASSIFICATION	1.7777753847064704E-7	DESIGN
static methods only - hide constructor	WITHOUT_CLASSIFICATION	0.9970618499966873	WITHOUT_CLASSIFICATION	0.002938150003312693	DESIGN
&& !('_'==character)	WITHOUT_CLASSIFICATION	0.9999986315147632	WITHOUT_CLASSIFICATION	1.3684852368195013E-6	DESIGN
returnign null!	WITHOUT_CLASSIFICATION	0.9999974200267421	WITHOUT_CLASSIFICATION	2.579973257929859E-6	DESIGN
returnign null!	WITHOUT_CLASSIFICATION	0.9999974200267421	WITHOUT_CLASSIFICATION	2.579973257929859E-6	DESIGN
includes last '.'	WITHOUT_CLASSIFICATION	0.9999994419182567	WITHOUT_CLASSIFICATION	5.580817432263043E-7	DESIGN
+1 to include the following '.'	WITHOUT_CLASSIFICATION	0.9999991847021223	WITHOUT_CLASSIFICATION	8.152978775633687E-7	DESIGN
Impl note: takes advantage of the fact that an escpaed single quote embedded within a quote-block can really be handled as two seperate quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9971305735389897	WITHOUT_CLASSIFICATION	0.002869426461010198	DESIGN
first time we find match!	WITHOUT_CLASSIFICATION	0.9999959049341419	WITHOUT_CLASSIFICATION	4.095065858041895E-6	DESIGN
entityNames may now include slashes for the representations classname may be an inner class	WITHOUT_CLASSIFICATION	0.994929805555426	WITHOUT_CLASSIFICATION	0.0050701944445740435	DESIGN
wrapped iterators	WITHOUT_CLASSIFICATION	0.9999845158319456	WITHOUT_CLASSIFICATION	1.5484168054488056E-5	DESIGN
index of current iterator in the wrapped iterators array	WITHOUT_CLASSIFICATION	0.9999517101293108	WITHOUT_CLASSIFICATION	4.8289870689159394E-5	DESIGN
the current iterator	WITHOUT_CLASSIFICATION	0.9999537376775056	WITHOUT_CLASSIFICATION	4.6262322494282315E-5	DESIGN
the last used iterator	WITHOUT_CLASSIFICATION	0.9994227491508357	WITHOUT_CLASSIFICATION	5.772508491642254E-4	DESIGN
it was a boolean expression	WITHOUT_CLASSIFICATION	0.9999889223449107	WITHOUT_CLASSIFICATION	1.1077655089285574E-5	DESIGN
public static Object[] clone(Class elementClass, Object[] array) {Object[] result = (Object[]) Array.newInstance( elementClass, array.length );System.arraycopy(array, 0, result, 0, array.length);return result;}	WITHOUT_CLASSIFICATION	0.9999986577843125	WITHOUT_CLASSIFICATION	1.3422156873913304E-6	DESIGN
call this before any Iterator method to make sure that the current Iterator is not exhausted	WITHOUT_CLASSIFICATION	0.9978878523864935	WITHOUT_CLASSIFICATION	0.0021121476135065784	DESIGN
doable if needed	WITHOUT_CLASSIFICATION	0.9999857993228967	WITHOUT_CLASSIFICATION	1.420067710333566E-5	DESIGN
set last used iterator here, in case the user calls remove before calling hasNext() or next() (although they shouldn't)	WITHOUT_CLASSIFICATION	0.9996888683818848	WITHOUT_CLASSIFICATION	3.111316181151888E-4	DESIGN
peek ahead	WITHOUT_CLASSIFICATION	0.9997944390977619	WITHOUT_CLASSIFICATION	2.0556090223807278E-4	DESIGN
if we reach the end of the string w/o finding the matching end, that is an exception	WITHOUT_CLASSIFICATION	0.9999999563741179	WITHOUT_CLASSIFICATION	4.3625882026294925E-8	DESIGN
we have a placeholder, spin forward till we find the end	WITHOUT_CLASSIFICATION	0.9999917209786809	WITHOUT_CLASSIFICATION	8.279021319089765E-6	DESIGN
make sure spinning forward did not put us past the end of the buffer...	WITHOUT_CLASSIFICATION	0.9999999963469992	WITHOUT_CLASSIFICATION	3.6530008894668024E-9	DESIGN
First, try to locate this resource through the current context classloader.	WITHOUT_CLASSIFICATION	0.9999501297915089	WITHOUT_CLASSIFICATION	4.9870208491204914E-5	DESIGN
Next, try to locate this resource through this class's classloader	WITHOUT_CLASSIFICATION	0.9998887877355284	WITHOUT_CLASSIFICATION	1.1121226447160917E-4	DESIGN
Next, try to locate this resource through the system classloader	WITHOUT_CLASSIFICATION	0.999810000394253	WITHOUT_CLASSIFICATION	1.899996057469812E-4	DESIGN
Anywhere else we should look?	WITHOUT_CLASSIFICATION	0.9960072306007188	WITHOUT_CLASSIFICATION	0.003992769399281107	DESIGN
would need an IdentitySet for this!	WITHOUT_CLASSIFICATION	0.9987645125390884	WITHOUT_CLASSIFICATION	0.0012354874609116174	DESIGN
Arrays.asList doesn't do primitive arrays	WITHOUT_CLASSIFICATION	0.9999997138319063	WITHOUT_CLASSIFICATION	2.861680936929395E-7	DESIGN
faster?	WITHOUT_CLASSIFICATION	0.9975995617509271	WITHOUT_CLASSIFICATION	0.0024004382490728075	DESIGN
the name of a class	WITHOUT_CLASSIFICATION	0.9999843610538305	WITHOUT_CLASSIFICATION	1.563894616943461E-5	DESIGN
Its the listener class name	WITHOUT_CLASSIFICATION	0.9999986808550209	WITHOUT_CLASSIFICATION	1.3191449792014954E-6	DESIGN
allow 9,8,7,6,5,4,3,2,1	WITHOUT_CLASSIFICATION	0.99999887279032	WITHOUT_CLASSIFICATION	1.1272096800484788E-6	DESIGN
default to element set if no elements() specified	WITHOUT_CLASSIFICATION	0.9999998289415137	WITHOUT_CLASSIFICATION	1.7105848618349718E-7	DESIGN
look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999481414607743	WITHOUT_CLASSIFICATION	5.185853922572516E-5	DESIGN
in case we were deserialized in a different JVM, look for an instance with the same name (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.7423445281619565	WITHOUT_CLASSIFICATION	0.25765547183804355	DESIGN
first, lets determine whether to apply cglib or javassist based instrumentation...	WITHOUT_CLASSIFICATION	0.9999985120811317	WITHOUT_CLASSIFICATION	1.4879188683543605E-6	DESIGN
Make sure we don't override previous set values	WITHOUT_CLASSIFICATION	0.9999985604100232	WITHOUT_CLASSIFICATION	1.4395899767813993E-6	DESIGN
entirely optional!!	WITHOUT_CLASSIFICATION	0.9999395224474809	WITHOUT_CLASSIFICATION	6.047755251907826E-5	DESIGN
Its the listener instance (or better be)	WITHOUT_CLASSIFICATION	0.9999613906981437	WITHOUT_CLASSIFICATION	3.860930185618257E-5	DESIGN
context.unbind(boundName);	WITHOUT_CLASSIFICATION	0.9999597412794791	WITHOUT_CLASSIFICATION	4.025872052100887E-5	DESIGN
readResolveObject	WITHOUT_CLASSIFICATION	0.9992805104913635	WITHOUT_CLASSIFICATION	7.194895086366031E-4	DESIGN
cfg.setProperty("hibernate.show_sql", "true");	WITHOUT_CLASSIFICATION	0.999999996179643	WITHOUT_CLASSIFICATION	3.820357088961127E-9	DESIGN
Defensive, convenience methods	WITHOUT_CLASSIFICATION	0.9999234417097405	WITHOUT_CLASSIFICATION	7.655829025953689E-5	DESIGN
Create the SessionFactory from hibernate.cfg.xml	WITHOUT_CLASSIFICATION	0.9999948236180782	WITHOUT_CLASSIFICATION	5.17638192176519E-6	DESIGN
Make sure you log the exception, as it might be swallowed	WITHOUT_CLASSIFICATION	0.9999793079076396	WITHOUT_CLASSIFICATION	2.0692092360487674E-5	DESIGN
Begin unit of work	WITHOUT_CLASSIFICATION	0.9999638732898918	WITHOUT_CLASSIFICATION	3.61267101081695E-5	DESIGN
Write HTML header	WITHOUT_CLASSIFICATION	0.9999895881874625	WITHOUT_CLASSIFICATION	1.0411812537516045E-5	DESIGN
Handle actions	WITHOUT_CLASSIFICATION	0.9999653434999178	WITHOUT_CLASSIFICATION	3.465650008218612E-5	DESIGN
Print page	WITHOUT_CLASSIFICATION	0.9999982039231579	WITHOUT_CLASSIFICATION	1.796076842163007E-6	DESIGN
Write HTML footer	WITHOUT_CLASSIFICATION	0.9999983446149767	WITHOUT_CLASSIFICATION	1.6553850233098335E-6	DESIGN
End unit of work	WITHOUT_CLASSIFICATION	0.9999467983360087	WITHOUT_CLASSIFICATION	5.320166399125317E-5	DESIGN
Start the session to be used for this request	WITHOUT_CLASSIFICATION	0.95678751125651	WITHOUT_CLASSIFICATION	0.04321248874348999	DESIGN
make the session available to the session factory's "current context"	WITHOUT_CLASSIFICATION	0.9999940805445905	WITHOUT_CLASSIFICATION	5.9194554095091805E-6	DESIGN
pass control along to the rest of the processing chain	WITHOUT_CLASSIFICATION	0.9999999896148306	WITHOUT_CLASSIFICATION	1.0385169423523362E-8	DESIGN
remove session from "current context"	WITHOUT_CLASSIFICATION	0.9995552244380167	WITHOUT_CLASSIFICATION	4.447755619833735E-4	DESIGN
Eager fetch the collection so we can use it detached	WITHOUT_CLASSIFICATION	0.9997587688159714	WITHOUT_CLASSIFICATION	2.412311840285653E-4	DESIGN
If we want to handle it bidirectional and detached, we also need to load this collection with an eager outer-join fetch, this time with Criteria and not HQL:	WITHOUT_CLASSIFICATION	0.9999997806320572	WITHOUT_CLASSIFICATION	2.1936794280721386E-7	DESIGN
Event anEvent = (Event) session .createCriteria(Event.class).setFetchMode("participants", FetchMode.JOIN) .add( Expression.eq("id", eventId) ) .uniqueResult(); Eager fetch the colleciton so we can use it detached	WITHOUT_CLASSIFICATION	0.9999999328664735	WITHOUT_CLASSIFICATION	6.713352653862413E-8	DESIGN
End of first unit of work	WITHOUT_CLASSIFICATION	0.9999869642407815	WITHOUT_CLASSIFICATION	1.3035759218430067E-5	DESIGN
or bidirectional safety method, setting both sides: aPerson.addToEvent(anEvent);	WITHOUT_CLASSIFICATION	0.9999444975329789	WITHOUT_CLASSIFICATION	5.5502467021054605E-5	DESIGN
Begin second unit of work	WITHOUT_CLASSIFICATION	0.9996882124228451	WITHOUT_CLASSIFICATION	3.117875771548914E-4	DESIGN
Reattachment of aPerson	WITHOUT_CLASSIFICATION	0.9999672722524887	WITHOUT_CLASSIFICATION	3.272774751120369E-5	DESIGN
The getEmailAddresses() might trigger a lazy load of the collection	WITHOUT_CLASSIFICATION	0.9999487565163193	WITHOUT_CLASSIFICATION	5.1243483680775516E-5	DESIGN
We need our tm, so get it now and avoid doing other work if there is a problem	WITHOUT_CLASSIFICATION	0.9999700698742553	WITHOUT_CLASSIFICATION	2.9930125744740293E-5	DESIGN
Don't hold the JBC node lock throughout the tx, as that prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999966094825458	WITHOUT_CLASSIFICATION	3.390517454295306E-6	DESIGN
Don't hold the JBC node lock throughout the tx, as that prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999966094825458	WITHOUT_CLASSIFICATION	3.390517454295306E-6	DESIGN
JBC put a version in the node when it created as part of some internal operation. We are always newer, but if the JBC version is > 1 something odd has happened	WITHOUT_CLASSIFICATION	0.9999999999012503	WITHOUT_CLASSIFICATION	9.874974972511168E-11	DESIGN
swaldman 2006-08-28: define c3p0-style configuration parameters for properties with hibernate-specific overrides to detect and warn about conflicting declarations	WITHOUT_CLASSIFICATION	0.999803313424544	WITHOUT_CLASSIFICATION	1.966865754560433E-4	DESIGN
Not null if the Isolation level has been specified in the configuration file. Otherwise, it is left to the Driver's default value.	WITHOUT_CLASSIFICATION	0.9999985660480254	WITHOUT_CLASSIFICATION	1.4339519746176763E-6	DESIGN
Configured outside of Hibernate (i.e. Servlet container, or Java Bean Container already has Proxool pools running, and this provider is to just borrow one of these	WITHOUT_CLASSIFICATION	0.9994524884221733	WITHOUT_CLASSIFICATION	5.475115778267325E-4	DESIGN
If you're closing down the ConnectionProvider chances are an is not a real big deal, just warn	WITHOUT_CLASSIFICATION	0.9999999794050225	WITHOUT_CLASSIFICATION	2.059497751507549E-8	DESIGN
(AS is always optional, for consistency with SQL/OQL)	WITHOUT_CLASSIFICATION	0.9999988545465569	WITHOUT_CLASSIFICATION	1.1454534430439746E-6	DESIGN
process the "new" HQL style where aliases are assigned _after_ the class name or path expression ie. using the AS construction	WITHOUT_CLASSIFICATION	0.9999981881353218	WITHOUT_CLASSIFICATION	1.8118646780961162E-6	DESIGN
the loaded owner will be set to null after the collection is removed, so capture its value as the affected owner so it is accessible to both pre- and post- events	WITHOUT_CLASSIFICATION	0.9999999960546497	WITHOUT_CLASSIFICATION	3.9453503183320734E-9	DESIGN
is a primitive type invokespecial	WITHOUT_CLASSIFICATION	0.9999992070135634	WITHOUT_CLASSIFICATION	7.929864367173708E-7	DESIGN
array of primitive type do nothing	WITHOUT_CLASSIFICATION	0.9999984211139973	WITHOUT_CLASSIFICATION	1.578886002782135E-6	DESIGN
handle a path expression or class name that appears at the start, in the "new" HQL style or an alias that appears at the start in the "old" HQL style	WITHOUT_CLASSIFICATION	0.99931472680812	WITHOUT_CLASSIFICATION	6.852731918799194E-4	DESIGN
handle <=, >=, !=, is not, not between, not in	WITHOUT_CLASSIFICATION	0.9999417665250357	WITHOUT_CLASSIFICATION	5.823347496431161E-5	DESIGN
The loop ensures atomicity of the select + update even for no transaction or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999999422897689	WITHOUT_CLASSIFICATION	5.771023124700806E-8	DESIGN
transfer an explicitly defined entity name handle the lazy attribute	WITHOUT_CLASSIFICATION	0.9963701741543208	WITHOUT_CLASSIFICATION	0.0036298258456792546	DESIGN
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999995409159502	WITHOUT_CLASSIFICATION	4.590840497256917E-7	DESIGN
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999995409159502	WITHOUT_CLASSIFICATION	4.590840497256917E-7	DESIGN
get meta's from <joined-subclass>	WITHOUT_CLASSIFICATION	0.9999973278504098	WITHOUT_CLASSIFICATION	2.672149590117518E-6	DESIGN
parameters on the property mapping should override parameters in the typedef	WITHOUT_CLASSIFICATION	0.9998845256926486	WITHOUT_CLASSIFICATION	1.1547430735136937E-4	DESIGN
fetch="join" overrides default laziness fetch="join" overrides default laziness	WITHOUT_CLASSIFICATION	0.9999999988148578	WITHOUT_CLASSIFICATION	1.1851421914109728E-9	DESIGN
NOTE SPECIAL CASE: default to join and non-lazy for the "second join" of the many-to-many	WITHOUT_CLASSIFICATION	0.9999999598411176	WITHOUT_CLASSIFICATION	4.015888240121024E-8	DESIGN
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999998911769197	WITHOUT_CLASSIFICATION	1.0882308028395624E-7	DESIGN
state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999888376350641	WITHOUT_CLASSIFICATION	1.1162364935858296E-5	DESIGN
void setComponentTuplizerFactory(ComponentTuplizerFactory componentTuplizerFactory) { this.componentTuplizerFactory = componentTuplizerFactory; }	WITHOUT_CLASSIFICATION	0.9999807246172266	WITHOUT_CLASSIFICATION	1.9275382773263526E-5	DESIGN
element index -> id	WITHOUT_CLASSIFICATION	0.9999998689842212	WITHOUT_CLASSIFICATION	1.310157788361632E-7	DESIGN
note that it might be better to iterate the snapshot but this is safe, assuming the user implements equals() properly, as required by the Set contract!	WITHOUT_CLASSIFICATION	0.7506494923902656	WITHOUT_CLASSIFICATION	0.24935050760973446	DESIGN
collections detect changes made via their public interface and mark themselves as dirty as a performance optimization	WITHOUT_CLASSIFICATION	0.9998700220774694	WITHOUT_CLASSIFICATION	1.2997792253061798E-4	DESIGN
essentially, if the real session is closed allow any method call to pass through since the real session will complain by throwing an appropriate exception; NOTE that allowing close() above has the same basic effect, but we capture that there simply to perform the unbind...	WITHOUT_CLASSIFICATION	0.9999999998871902	WITHOUT_CLASSIFICATION	1.1280969212874048E-10	DESIGN
The default SQLExceptionConverter for all dialects is based on SQLState since SQLErrorCode is extremely vendor-specific. Specific Dialects may override to return whatever is most appropriate for that vendor.	WITHOUT_CLASSIFICATION	0.999999997084138	WITHOUT_CLASSIFICATION	2.9158619464967914E-9	DESIGN
only necessary for postgre < 7.4 http:anoncvs.postgresql.org/cvsweb.cgi/pgsql/doc/src/sgml/ref/create_sequence.sgml	WITHOUT_CLASSIFICATION	0.9999996698478177	WITHOUT_CLASSIFICATION	3.301521822913573E-7	DESIGN
select topic, syntax from information_schema.help where section like 'Function%' order by section, topic see also -> http:www.h2database.com/html/functions.html	WITHOUT_CLASSIFICATION	0.999999999763381	WITHOUT_CLASSIFICATION	2.3661888879943236E-10	DESIGN
registerColumnType(Types.VARBINARY, "CHARACTER($l)"); registerColumnType(Types.BLOB, "CHARACTER($l)" ); For use prior to CP 11.0 registerColumnType(Types.CLOB, "CHARACTER($l)" );	WITHOUT_CLASSIFICATION	0.99999984877616	WITHOUT_CLASSIFICATION	1.51223840003871E-7	DESIGN
the BLOB type requires a size arguement - this defaults to bytes - no arg defaults to 1 whole byte! other argument mods include K - kilobyte, M - megabyte, G - gigabyte. refer to the PBdevelopers guide for more info.	WITHOUT_CLASSIFICATION	0.9976068000006362	DESIGN	0.0023931999993637206	WITHOUT_CLASSIFICATION
We must return a valid RDMS/RSA command from this method to prevent RDMS/RSA from issuing ERROR 400	WITHOUT_CLASSIFICATION	0.9998843613484382	WITHOUT_CLASSIFICATION	1.1563865156179838E-4	DESIGN
Oracle driver reports to support getGeneratedKeys(), but they only support the version taking an array of the names of the columns to be returned (via its RETURNING clause). No other driver seems to support this overloaded version.	WITHOUT_CLASSIFICATION	0.9669826369330006	WITHOUT_CLASSIFICATION	0.03301736306699934	DESIGN
add the comment nest the main query in an outer select add the rownnumber bit into the outer query select list	WITHOUT_CLASSIFICATION	0.9999988470569672	WITHOUT_CLASSIFICATION	1.1529430327618558E-6	DESIGN
You may still have other ResultSets or update counts left to process here but you can't do it now or the ResultSet you just got will be closed	WITHOUT_CLASSIFICATION	0.9999999974631282	WITHOUT_CLASSIFICATION	2.5368718564530063E-9	DESIGN
Note: For object <-> SQL datatype mappings see: Configuration Manager | Advanced | SQL | System DDL Datatype Mappings TBDregisterColumnType(Types.BINARY, "binary($1)"); changed 08-11-2005, jsl	WITHOUT_CLASSIFICATION	0.999999433680387	WITHOUT_CLASSIFICATION	5.663196128970909E-7	DESIGN
TRIM(end_keyword string-expression-1 FROM string-expression-2) use Hibernate implementation "From" is one of the parameters they pass in position ?3 registerFunction( "trim", new SQLFunctionTemplate(Hibernate.STRING, "trim(?1 ?2 from ?3)") );	WITHOUT_CLASSIFICATION	0.9999999998703498	WITHOUT_CLASSIFICATION	1.296501532254078E-10	DESIGN
Whether this dialect has an Identity clause added to the data type or a completely seperate identity data type	WITHOUT_CLASSIFICATION	0.999966764173048	WITHOUT_CLASSIFICATION	3.323582695200863E-5	DESIGN
According to both the ANSI-SQL and JPA specs, trim takes a variable number of parameters between 1 and 4. at least one paramer (trimSource) is required. From the SQL spec: <trim function> ::= TRIM <left paren> <trim operands> <right paren> <trim operands> ::= [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> <trim specification> ::= LEADING | TRAILING | BOTH If <trim specification> is omitted, BOTH is assumed. If <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999998762305455	WITHOUT_CLASSIFICATION	1.2376945434649405E-7	DESIGN
/ Prepare persisters and link them up with their cache region/access-strategy	WITHOUT_CLASSIFICATION	0.9964295469458148	WITHOUT_CLASSIFICATION	0.003570453054185182	DESIGN
Named Queries:	WITHOUT_CLASSIFICATION	0.9999607153788664	WITHOUT_CLASSIFICATION	3.928462113359734E-5	DESIGN
this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9533953643580734	WITHOUT_CLASSIFICATION	0.04660463564192662	DESIGN
does not handle arrays (thats ok, cos they can't be lazy) or newly instantiated collections, so we can do the cast	WITHOUT_CLASSIFICATION	0.9974245290907542	WITHOUT_CLASSIFICATION	0.002575470909245792	DESIGN
collection deletions are a special case since update() can add deletions of collections not loaded by the session.	WITHOUT_CLASSIFICATION	0.999999997957383	WITHOUT_CLASSIFICATION	2.04261686081047E-9	DESIGN
we can do the cast since orphan-delete does not apply to: 1. newly instantiated collections 2. arrays (we can't track orphans for detached arrays)	WITHOUT_CLASSIFICATION	0.9974588672290178	WITHOUT_CLASSIFICATION	0.002541132770982322	DESIGN
if the natural-id is marked as non-mutable, it is not retrieved during a normal database-snapshot operation...	WITHOUT_CLASSIFICATION	0.9999963940047566	WITHOUT_CLASSIFICATION	3.6059952433567975E-6	DESIGN
watch out for a case where old is still referenced somewhere in the object graph! (which is a user error)	WITHOUT_CLASSIFICATION	0.9988041706764104	WITHOUT_CLASSIFICATION	0.0011958293235896902	DESIGN
slice, to get the columns for this component property	WITHOUT_CLASSIFICATION	0.9998305057750664	WITHOUT_CLASSIFICATION	1.6949422493367443E-4	DESIGN
int result = 17; result = 37 result + type.hashCode(); result = 37 result + ( value==null ? 0 : value.hashCode() ); return result;	WITHOUT_CLASSIFICATION	0.9999999996440856	WITHOUT_CLASSIFICATION	3.5591442181438077E-10	DESIGN
The CollectionEntry.isReached() stuff is just to detect any silly users who set up circular or shared references between/to collections.	WITHOUT_CLASSIFICATION	0.9999999569300786	WITHOUT_CLASSIFICATION	4.30699215002301E-8	DESIGN
detached collection wrappers that get found + reattached during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.999998122227397	WITHOUT_CLASSIFICATION	1.8777726029283534E-6	DESIGN
The unique property value represented here may or may not be serializable, so we do an explicit check here in order to generate a better error message	WITHOUT_CLASSIFICATION	0.6609219588510484	WITHOUT_CLASSIFICATION	0.3390780411489516	DESIGN
if the version of a newly instantiated object is not the same as the version seed value, use that as the unsaved-value	WITHOUT_CLASSIFICATION	0.9976461102718654	WITHOUT_CLASSIFICATION	0.0023538897281346048	DESIGN
ie. we never have to null out a reference to an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999956540320013	WITHOUT_CLASSIFICATION	4.345967998658244E-6	DESIGN
ignore this row, the collection is in process of being loaded somewhere further "up" the stack	WITHOUT_CLASSIFICATION	0.9999913117844326	WITHOUT_CLASSIFICATION	8.688215567550942E-6	DESIGN
Entity load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ currently, not yet used...	WITHOUT_CLASSIFICATION	0.9951102575164542	WITHOUT_CLASSIFICATION	0.004889742483545776	DESIGN
should be ok performance-wise to generate new delegate instances for each request since these are locally stack-scoped. Besides, it makes the code much easier to read than the old TransactionHelper stuff...	WITHOUT_CLASSIFICATION	0.6309574897012418	DESIGN	0.36904251029875823	WITHOUT_CLASSIFICATION
this implementation is supposed to tolerate incorrect unsaved-value mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9998132787205494	WITHOUT_CLASSIFICATION	1.8672127945063943E-4	DESIGN
this implementation is supposed to tolerate incorrect unsaved-value mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9998132787205494	WITHOUT_CLASSIFICATION	1.8672127945063943E-4	DESIGN
wrap up any new collections directly referenced by the object or its components	WITHOUT_CLASSIFICATION	0.9999999677027194	WITHOUT_CLASSIFICATION	3.229728060762854E-8	DESIGN
remove any snapshot, not really for memory management purposes, but rather because it might now be stale, and there is no longer any EntityEntry to take precedence This is now handled by removeEntity() session.getPersistenceContext().removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999982317344586	WITHOUT_CLASSIFICATION	1.7682655414881954E-6	DESIGN
skip this check for composite-ids relating to dom4j entity-mode; alternatively, we could add a check to make sure the incoming id value is an instance of Element...	WITHOUT_CLASSIFICATION	0.8865692334175481	WITHOUT_CLASSIFICATION	0.1134307665824519	DESIGN
upgrade the lock if necessary: lock(result, lockMode);	WITHOUT_CLASSIFICATION	0.9910563859486217	WITHOUT_CLASSIFICATION	0.008943614051378269	DESIGN
now, any collections that are initialized inside this block do not get updated - they are ignored until the next flush	WITHOUT_CLASSIFICATION	0.9999950627798306	WITHOUT_CLASSIFICATION	4.937220169343016E-6	DESIGN
we must clone embedded composite identifiers, or we will get back the same instance that we pass in	WITHOUT_CLASSIFICATION	0.9999902018355558	WITHOUT_CLASSIFICATION	9.798164444223851E-6	DESIGN
Sub-insertions should occur before containing insertion so Try to do the callback now	WITHOUT_CLASSIFICATION	0.9998925131754799	WITHOUT_CLASSIFICATION	1.0748682452005822E-4	DESIGN
the entity is not associated with the session, so try interceptor and unsaved-value	WITHOUT_CLASSIFICATION	0.9999790767845887	WITHOUT_CLASSIFICATION	2.092321541123662E-5	DESIGN
scan the query string for class names appearing in the from clause and replace with all persistent implementors of the class/interface, returning multiple query strings (make sure we don't pick up a class in the select clause!)	WITHOUT_CLASSIFICATION	0.9701701985686435	DESIGN	0.029829801431356443	WITHOUT_CLASSIFICATION
save() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999827394716	WITHOUT_CLASSIFICATION	1.7260528397515335E-7	DESIGN
evict() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999991368089878	WITHOUT_CLASSIFICATION	8.631910122759056E-7	DESIGN
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.999701845369054	WITHOUT_CLASSIFICATION	2.9815463094591115E-4	DESIGN
if it is an uninitialized proxy, pointing with this session, then when it is accessed, the underlying instance will be "contained"	WITHOUT_CLASSIFICATION	0.9999992305031484	WITHOUT_CLASSIFICATION	7.694968515258113E-7	DESIGN
Generate an explicit join for the root dot node. The implied joins will be collected and passed up to the root dot node.	WITHOUT_CLASSIFICATION	0.9999999994388257	WITHOUT_CLASSIFICATION	5.611743060213368E-10	DESIGN
A session is considered to contain an entity only if the entity has an entry in the session's persistence context and the entry reports that the entity has not been removed	WITHOUT_CLASSIFICATION	0.99998243384081	WITHOUT_CLASSIFICATION	1.7566159189941246E-5	DESIGN
Does the collection referenced by this FromElement specify an order-by attribute? If so, attach it to the query's order-by	WITHOUT_CLASSIFICATION	0.9999892049197883	WITHOUT_CLASSIFICATION	1.0795080211698041E-5	DESIGN
... and the token could be an identifer and the error is a mismatched token error ...	WITHOUT_CLASSIFICATION	0.985244175678111	WITHOUT_CLASSIFICATION	0.01475582432188898	DESIGN
If a where clause was specified in the update/delete query, use it to limit the returned ids here...	WITHOUT_CLASSIFICATION	0.9999998518783432	WITHOUT_CLASSIFICATION	1.4812165695848446E-7	DESIGN
int parameterStart = getWalker().getNumberOfParametersInSetClause(); List allParams = getIdSelectParameterSpecifications(); Iterator whereParams = allParams.subList( parameterStart, allParams.size() ).iterator();	WITHOUT_CLASSIFICATION	0.999999979067328	WITHOUT_CLASSIFICATION	2.0932672018098656E-8	DESIGN
Default implementation: If this node has a data type, and that data type is not an association, then this is scalar.	WITHOUT_CLASSIFICATION	0.9999601829267641	WITHOUT_CLASSIFICATION	3.9817073235736115E-5	DESIGN
Resolve the LHS fully, generate implicit joins. Pass in the property name so that the resolver can discover foreign key (id) properties.	WITHOUT_CLASSIFICATION	0.9994833875782408	WITHOUT_CLASSIFICATION	5.16612421759146E-4	DESIGN
If the propertyType is null and there isn't a parent, just stop now... there was a problem resolving the node anyway.	WITHOUT_CLASSIFICATION	0.7259060489770159	WITHOUT_CLASSIFICATION	0.27409395102298406	DESIGN
We do not look for an existing join on the same path, because it makes sense to join twice on the same collection role	WITHOUT_CLASSIFICATION	0.9999986145178352	WITHOUT_CLASSIFICATION	1.3854821647584666E-6	DESIGN
our parent is another dot node, meaning we are being further dereferenced. thus we need to generate a join unless the parent refers to the associated entity's PK (because 'our' table would know the FK).	WITHOUT_CLASSIFICATION	0.7489316255648458	WITHOUT_CLASSIFICATION	0.2510683744351543	DESIGN
public final Currency getCurrency(int col) throws HibernateException {return (Currency) get(col);}	WITHOUT_CLASSIFICATION	0.9999795593467035	WITHOUT_CLASSIFICATION	2.044065329651809E-5	DESIGN
here, we have two possibilities: 1) the property-name matches the explicitly identifier property name 2) the property-name matches the implicit 'id' property name	WITHOUT_CLASSIFICATION	0.9996531185863796	WITHOUT_CLASSIFICATION	3.468814136203967E-4	DESIGN
Set the unresolved path in this node and the parent. Set the text for the parent.	WITHOUT_CLASSIFICATION	0.9996046627046962	WITHOUT_CLASSIFICATION	3.9533729530388703E-4	DESIGN
Get the first child to be considered. Sub-classes may do this differently in order to skip nodes that are not select expressions (e.g. DISTINCT).	WITHOUT_CLASSIFICATION	0.9999991325075857	WITHOUT_CLASSIFICATION	8.674924143635241E-7	DESIGN
If this is an entity and the property is the identifier property, then use getIdentifierType(). Note that the propertyName.equals( propertyPath ) checks whether we have a component key reference, where the component class property name is the same as the entity id property name; if the two are not equal, this is the case and we'd need to "fall through" to using the property mapping.	WITHOUT_CLASSIFICATION	0.9999999996670149	WITHOUT_CLASSIFICATION	3.329851165113474E-10	DESIGN
for a subquery, the alias to use depends on a few things (we already know this is not an overall SELECT): 1) if this FROM_ELEMENT represents a correlation to the outer-most query A) if the outer query represents a multi-table persister, we need to use the given alias in anticipation of one of the multi-table executors being used (as this subquery will actually be used in the "id select" phase of that multi-table executor) B) otherwise, we need to use the persister's table name as the column qualification 2) otherwise (not correlated), use the given alias	WITHOUT_CLASSIFICATION	0.9940055788204116	WITHOUT_CLASSIFICATION	0.005994421179588365	DESIGN
Not a collection? Return the entity property mapping.	WITHOUT_CLASSIFICATION	0.9819181492141275	WITHOUT_CLASSIFICATION	0.018081850785872645	DESIGN
collection of <many-to-any/> mappings... used to circumvent the component-collection check below...	WITHOUT_CLASSIFICATION	0.9975053718080982	WITHOUT_CLASSIFICATION	0.0024946281919018404	DESIGN
Otherwise, the destination node was implied by the FROM clause and the FROM clause processor will automatically add it in the right place.	WITHOUT_CLASSIFICATION	0.9999963146691638	WITHOUT_CLASSIFICATION	3.6853308362120167E-6	DESIGN
If the first identifier in the path referrs to the class alias (not the class name), then this is a correlated subselect. If it's a correlated sub-select, use the existing table alias. Otherwise generate a new one.	WITHOUT_CLASSIFICATION	0.9996932787136061	WITHOUT_CLASSIFICATION	3.0672128639383907E-4	DESIGN
check to see if our "propPath" actually represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999777532675421	WITHOUT_CLASSIFICATION	2.2246732457973858E-5	DESIGN
An ident node can represent an index expression if the ident represents a naked property ref Note: this makes the assumption (which is currently the case in the hql-sql grammar) that the ident is first resolved itself (addrExpr -> resolve()). The other option, if that changes, is to call resolve from here; but it is currently un-needed overhead.	WITHOUT_CLASSIFICATION	0.999999677628879	WITHOUT_CLASSIFICATION	3.223711210049994E-7	DESIGN
This uses a PathExpressionParser but notice that compound paths are not valid, only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9999966579661822	WITHOUT_CLASSIFICATION	3.342033817834402E-6	DESIGN
If this is an implied join in a FROM clause, then use ANSI-style joining, and set the flag on the FromElement that indicates that it was implied in the FROM clause itself.	WITHOUT_CLASSIFICATION	0.9999856959416347	WITHOUT_CLASSIFICATION	1.4304058365296993E-5	DESIGN
origin.addDestination(destination); Add the query spaces.	WITHOUT_CLASSIFICATION	0.9999986588635669	WITHOUT_CLASSIFICATION	1.341136433055791E-6	DESIGN
For an explicit many-to-many relationship, add a second join from the intermediate (many-to-many) table to the destination table. Also, make sure that the from element's idea of the destination is the destination table.	WITHOUT_CLASSIFICATION	0.9999999998974277	WITHOUT_CLASSIFICATION	1.0257231766156696E-10	DESIGN
Reset the node type, because the rest of the system is expecting FROM_FRAGMENT, all we wanted was for the factory to create the right sub-class. This might get reset again later on anyway to make the SQL generation simpler.	WITHOUT_CLASSIFICATION	0.9999496910955259	WITHOUT_CLASSIFICATION	5.030890447417576E-5	DESIGN
explicit = true; This is an explict Select. ArrayList sqlResultTypeList = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999999848117131	WITHOUT_CLASSIFICATION	1.5188286825604164E-8	DESIGN
sqlResultTypeList.add( type ); Generate the select expression.	WITHOUT_CLASSIFICATION	0.999999583547268	WITHOUT_CLASSIFICATION	4.164527318732108E-7	DESIGN
If the expression list has exactly one expression, and the type of the expression is a collection then this might be a collection function, such as index(c) or size(c).	WITHOUT_CLASSIFICATION	0.9998430652892528	WITHOUT_CLASSIFICATION	1.5693471074721297E-4	DESIGN
Need to parse off the column qualifiers; this is assuming (which is true as of now) that this is only used from update and delete HQL statement parsing	WITHOUT_CLASSIFICATION	0.9999994919395778	WITHOUT_CLASSIFICATION	5.080604222371683E-7	DESIGN
for regression testing against output from the old parser... found it easiest to simply reorder the FromElements here into ascending order in terms of injecting them into the resulting sql ast in orders relative to those expected by the old parser; this is definitely another of those "only needed for regression purposes". The SyntheticAndFactory, then, simply injects them as it encounters them.	WITHOUT_CLASSIFICATION	0.9999999999829954	WITHOUT_CLASSIFICATION	1.7004610169969794E-11	DESIGN
The uber-rule here is that we need to include subclass joins if the FromElement is in any way dereferenced by a property from the subclass table; otherwise we end up with column references qualified by a non-existent table reference in the resulting SQL...	WITHOUT_CLASSIFICATION	0.9997273570137217	WITHOUT_CLASSIFICATION	2.7264298627828086E-4	DESIGN
classic translator does not support collection of ordinal param metadata	WITHOUT_CLASSIFICATION	0.9934149099730457	WITHOUT_CLASSIFICATION	0.006585090026954272	DESIGN
The following variables are stacks that keep information about each subexpression in the list of nested subexpressions we are currently processing.	WITHOUT_CLASSIFICATION	0.9992898598302044	WITHOUT_CLASSIFICATION	7.101401697956531E-4	DESIGN
The loop ensures atomicity of the select + update even for no transaction or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999999422897689	WITHOUT_CLASSIFICATION	5.771023124700806E-8	DESIGN
should not be able to reach last without maxPosition being set unless there are no results	WITHOUT_CLASSIFICATION	0.9999999982489908	WITHOUT_CLASSIFICATION	1.7510092502625855E-9	DESIGN
we found it in the temp PC. Should indicate we are in the midst of processing a result set containing eager fetches via join fetch	WITHOUT_CLASSIFICATION	0.9999995770513351	WITHOUT_CLASSIFICATION	4.22948664902851E-7	DESIGN
do not use proxiesByKey, since not all proxies that point to this session's instances are in that collection!	WITHOUT_CLASSIFICATION	0.9245489924234805	WITHOUT_CLASSIFICATION	0.07545100757651951	DESIGN
if there is no TM configured, we will not be able to access the javax.transaction.Transaction object in order to register a synch anyway.	WITHOUT_CLASSIFICATION	0.9760048234541504	WITHOUT_CLASSIFICATION	0.023995176545849563	DESIGN
Since the result set cursor is always left at the first physical row after the "last processed", we need to jump back one position to get the key value we are interested in skipping	WITHOUT_CLASSIFICATION	0.999999958718557	WITHOUT_CLASSIFICATION	4.1281443062610945E-8	DESIGN
true if this is a query and we are loading multiple instances of the same collection role otherwise this is a CollectionInitializer and we are loading up a single collection or batch	WITHOUT_CLASSIFICATION	0.999321377147238	WITHOUT_CLASSIFICATION	6.786228527619214E-4	DESIGN
we don't need to worry about existing version being uninitialized because this block isn't called by a re-entrant load (re-entrant loads _always_ have lock mode NONE)	WITHOUT_CLASSIFICATION	0.9999991643135212	WITHOUT_CLASSIFICATION	8.356864787360191E-7	DESIGN
add temp entry so that the next step is circular-reference safe - only needed because some types don't take proper advantage of two-phase-load (esp. components)	WITHOUT_CLASSIFICATION	0.9999999802553774	WITHOUT_CLASSIFICATION	1.974462256547365E-8	DESIGN
assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999993068904397	WITHOUT_CLASSIFICATION	6.931095602342269E-7	DESIGN
log a message about potential connection leaks	WITHOUT_CLASSIFICATION	0.9999870437653949	WITHOUT_CLASSIFICATION	1.2956234605080401E-5	DESIGN
ps.close(); just close it; do NOT try to return it to the pool! NOTE: early exit!	WITHOUT_CLASSIFICATION	0.9999992507473638	WITHOUT_CLASSIFICATION	7.492526361427697E-7	DESIGN
this has been shown to happen occasionally in rare cases when using a transaction manager + transaction-timeout where the timeout calls back through Hibernate's registered transaction synchronization on a separate "reaping" thread. In cases where that reaping thread executes through this block at the same time the main application thread does we can get into situations where these CMEs occur. And though it is not "allowed" per-se, the end result without handling it specifically is infinite looping. So here, we simply break the loop	WITHOUT_CLASSIFICATION	0.9999997949642684	WITHOUT_CLASSIFICATION	2.0503573170380813E-7	DESIGN
unfortunately this stuff can't be cached because it is per-invocation, not constant for the QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9982242489225638	WITHOUT_CLASSIFICATION	0.0017757510774361893	DESIGN
can't cache this stuff either (per-invocation) we are given a map of user-alias -> lock mode create a new map of sql-alias -> lock mode	WITHOUT_CLASSIFICATION	0.9999956540985442	WITHOUT_CLASSIFICATION	4.345901455714546E-6	DESIGN
don't create a unique key, 'cos some databases don't like a UK on nullable columns getCollectionTable().createUniqueKey( getIdentifier().getConstraintColumns() );	WITHOUT_CLASSIFICATION	0.9999991043027961	WITHOUT_CLASSIFICATION	8.956972039487753E-7	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993962803131	WITHOUT_CLASSIFICATION	6.037196869424596E-7	DESIGN
isSet = collection.isSet(); isSorted = collection.isSorted();	WITHOUT_CLASSIFICATION	0.9999999564074689	WITHOUT_CLASSIFICATION	4.359253107683014E-8	DESIGN
lists, arrays sets, maps, bags	WITHOUT_CLASSIFICATION	0.9999998013969104	WITHOUT_CLASSIFICATION	1.9860308967594783E-7	DESIGN
we finish all the "removes" first to take care of possible unique constraints and so that we can take better advantage of batching	WITHOUT_CLASSIFICATION	0.9999975788992457	WITHOUT_CLASSIFICATION	2.4211007542852756E-6	DESIGN
use a combination of foreign key columns and pk columns, since the ordering of removal and addition is not guaranteed when a child moves from one parent to another	WITHOUT_CLASSIFICATION	0.9989404865377444	WITHOUT_CLASSIFICATION	0.0010595134622556385	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993962803131	WITHOUT_CLASSIFICATION	6.037196869424596E-7	DESIGN
information about properties of this class, including inherited properties (only really needed for updatable/insertable properties)	WITHOUT_CLASSIFICATION	0.9999995635031963	WITHOUT_CLASSIFICATION	4.364968037903563E-7	DESIGN
all this only really needs to consider properties of this class, not its subclasses, but since we are reusing code used for sequential selects, we use the subclass closure	WITHOUT_CLASSIFICATION	0.9999995540599259	WITHOUT_CLASSIFICATION	4.459400741698714E-7	DESIGN
Here we render the select column list based on the properties defined as being generated. For partial component generation, we currently just re-select the whole component rather than trying to handle the individual generated portions.	WITHOUT_CLASSIFICATION	0.9998309899624757	WITHOUT_CLASSIFICATION	1.6901003752428287E-4	DESIGN
this is the root (versioned) table, and we are using version-based optimistic locking; if we are not updating the version, also don't check it (unless this is a "generated" version column)!	WITHOUT_CLASSIFICATION	0.9999999334708123	WITHOUT_CLASSIFICATION	6.652918772155614E-8	DESIGN
optimistic-lock="all", include all updatable properties optimistic-lock="dirty", include all properties we are updating this time	WITHOUT_CLASSIFICATION	0.9999949952082253	WITHOUT_CLASSIFICATION	5.004791774751591E-6	DESIGN
this property belongs to the table, and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9974084544188394	WITHOUT_CLASSIFICATION	0.002591545581160602	DESIGN
check to see if the connection is in auto-commit mode (no connection means aggressive connection release outside a JTA transaction context, so MUST be autocommit mode)	WITHOUT_CLASSIFICATION	0.9999986318709579	WITHOUT_CLASSIFICATION	1.3681290420439637E-6	DESIGN
need to treat this as if it where optimistic-lock="all" (dirty does not make sense); first we need to locate the "loaded" state Note, it potentially could be a proxy, so perform the location the safe way...	WITHOUT_CLASSIFICATION	0.8078517503265189	WITHOUT_CLASSIFICATION	0.19214824967348113	DESIGN
we always assume an instance with a null identifier or no identifier property is unsaved!	WITHOUT_CLASSIFICATION	0.9999793166972679	WITHOUT_CLASSIFICATION	2.068330273204278E-5	DESIGN
Need to use the identifier type of the collection owner since the incoming is value is actually the owner's id. Using the collection's key type causes problems with property-ref keys...	WITHOUT_CLASSIFICATION	0.9999268183640071	WITHOUT_CLASSIFICATION	7.318163599286843E-5	DESIGN
allow any identifier quoted with backtick only recognizes identifiers beginning with a letter	WITHOUT_CLASSIFICATION	0.9999917881521543	WITHOUT_CLASSIFICATION	8.211847845654818E-6	DESIGN
following doesn't handle (null, not null) but unnecessary since this would mean all rows	WITHOUT_CLASSIFICATION	0.8478586700676582	WITHOUT_CLASSIFICATION	0.15214132993234164	DESIGN
IMPL NOTE : due to the delayed population of setters (setters cached for performance), we really cannot pro0perly define equality for this transformer	WITHOUT_CLASSIFICATION	0.9990364442092728	WITHOUT_CLASSIFICATION	9.635557907271374E-4	DESIGN
we need to dirty check collections, since they can cause an owner version number increment	WITHOUT_CLASSIFICATION	0.9996094789648371	WITHOUT_CLASSIFICATION	3.9052103516291035E-4	DESIGN
return the id, so we can use it to reset the proxy id return result;	WITHOUT_CLASSIFICATION	0.9999979068672135	WITHOUT_CLASSIFICATION	2.093132786633525E-6	DESIGN
optimizer = getFactory().getSettings().getBytecodeProvider().getReflectionOptimizer( mappedClass, getterNames, setterNames, propTypes );	WITHOUT_CLASSIFICATION	0.9999100824747339	WITHOUT_CLASSIFICATION	8.991752526616537E-5	DESIGN
cache the actual id of the object, not the value of the property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999965150797251	WITHOUT_CLASSIFICATION	3.4849202750293584E-6	DESIGN
We now have the value of the property-ref we reference. However, we need to dig a little deeper, as that property might also be an entity type, in which case we need to resolve its identitifier	WITHOUT_CLASSIFICATION	0.9999984751926382	WITHOUT_CLASSIFICATION	1.5248073617073952E-6	DESIGN
Retrieve the value of the designated column in the current row of this ResultSet object as a java.io.Reader object	WITHOUT_CLASSIFICATION	0.9999982567719454	WITHOUT_CLASSIFICATION	1.7432280545574896E-6	DESIGN
not absolutely necessary, but helps for some equals()/hashCode() implementations	WITHOUT_CLASSIFICATION	0.9997450295627784	WITHOUT_CLASSIFICATION	2.5497043722149754E-4	DESIGN
this should be a call to resolve(), not resolveIdentifier(), 'cos it might be a property-ref, and we did not cache the referenced value	WITHOUT_CLASSIFICATION	0.9909111472354455	WITHOUT_CLASSIFICATION	0.00908885276455455	DESIGN
If we have <tt>not-found="ignore"</tt> association mapped to a formula, we always need to dirty check it, so we can update the second-level cache	WITHOUT_CLASSIFICATION	0.9999656550179097	WITHOUT_CLASSIFICATION	3.4344982090379664E-5	DESIGN
can't just return null here, since that would cause an owning component to become null	WITHOUT_CLASSIFICATION	0.9999991924308305	WITHOUT_CLASSIFICATION	8.075691694812063E-7	DESIGN
for arrays, replaceElements() may return a different reference, since the array length might not match	WITHOUT_CLASSIFICATION	0.9999995863982503	WITHOUT_CLASSIFICATION	4.1360174982172735E-7	DESIGN
actual cache of the entries. soft references are used for both the keys and the values here since the values pertaining to the MRU entries are kept in a seperate hard reference cache (to avoid their enqueuement/garbage-collection).	WITHOUT_CLASSIFICATION	0.9999972186352986	WITHOUT_CLASSIFICATION	2.7813647014297522E-6	DESIGN
as soon as we encounter our first letter, return the substring from that position	WITHOUT_CLASSIFICATION	0.9999999998562139	WITHOUT_CLASSIFICATION	1.4378616510517227E-10	DESIGN
Note : expected in the syntax: type=listenerClass ({sep}type=listenerClass) where {sep} is any whitespace or comma	WITHOUT_CLASSIFICATION	0.9999999908113715	WITHOUT_CLASSIFICATION	9.18862846940322E-9	DESIGN
isTransactionCallbackRegistered denotes whether any Hibernate Transaction has registered as a callback against this JDBCContext; only one such callback is allowed. Directly serializing this value causes problems with JDBCTransaction, or really any Transaction impl where the callback is local to the Transaction instance itself, since that Transaction is not serialized along with the JDBCContext. Thus we handle that fact here explicitly...	WITHOUT_CLASSIFICATION	0.9995498861290917	WITHOUT_CLASSIFICATION	4.5011387090829565E-4	DESIGN
note that for sequential scrolling, we make the assumption that the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999952981604207	WITHOUT_CLASSIFICATION	4.701839579381458E-6	DESIGN
We call getKeyFromResultSet() here so that we can know the key value upon which to perform the breaking logic. However, it is also then called from getRowFromResultSet() which is certainly not the most efficient. But the call here is needed, and there currently is no other way without refactoring of the doQuery()/getRowFromResultSet() methods	WITHOUT_CLASSIFICATION	0.9327972234736208	WITHOUT_CLASSIFICATION	0.06720277652637924	DESIGN
This check is needed since processing leaves the cursor after the last physical row for the current logical row; thus if we are after the last physical row, this might be caused by either: 1) scrolling to the last logical row 2) scrolling past the last logical row In the latter scenario, the previous logical row really is the last logical row. In all other cases, we should process back two logical records (the current logic row, plus the previous logical row).	WITHOUT_CLASSIFICATION	0.9495387119449089	WITHOUT_CLASSIFICATION	0.05046128805509118	DESIGN
and perform the load	WITHOUT_CLASSIFICATION	0.9999984018287089	WITHOUT_CLASSIFICATION	1.5981712910172872E-6	DESIGN
important: reuse the same event instances for performance!	WITHOUT_CLASSIFICATION	0.7692025270078505	WITHOUT_CLASSIFICATION	0.23079747299214956	DESIGN
this is a query and we are loading multiple instances of the same collection role	WITHOUT_CLASSIFICATION	0.9879490160757188	WITHOUT_CLASSIFICATION	0.012050983924281139	DESIGN
we found a collection element in the result set	WITHOUT_CLASSIFICATION	0.9999841814003081	WITHOUT_CLASSIFICATION	1.5818599691974356E-5	DESIGN
we did not find a collection element in the result set, so we ensure that a collection is created with the owner's identifier, since what we have is an empty collection	WITHOUT_CLASSIFICATION	0.999999999083646	WITHOUT_CLASSIFICATION	9.163540500065941E-10	DESIGN
this is a collection initializer, so we must create a collection for each of the passed-in keys, to account for the possibility that the collection is empty and has no rows in the result set	WITHOUT_CLASSIFICATION	0.9999985341040403	WITHOUT_CLASSIFICATION	1.4658959597072698E-6	DESIGN
grab its state from the ResultSet and keep it in the Session (but don't yet initialize the object itself) note that we acquire LockMode.READ even if it was not requested	WITHOUT_CLASSIFICATION	0.9999990282984195	WITHOUT_CLASSIFICATION	9.717015805219832E-7	DESIGN
a many-to-many; decrement currentDepth here to allow join across the association table without exceeding MAX_FETCH_DEPTH (i.e. the "currentDepth - 1" bit)	WITHOUT_CLASSIFICATION	0.9972608039249627	WITHOUT_CLASSIFICATION	0.0027391960750372145	DESIGN
if not a composite key, use "foo in (?, ?, ?)" for batching if no batch, and not a composite key, use "foo = ?"	WITHOUT_CLASSIFICATION	0.9999944827179225	WITHOUT_CLASSIFICATION	5.517282077550431E-6	DESIGN
the user visible aliases, which are unknown to the superclass, these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999999999494333	WITHOUT_CLASSIFICATION	5.0566521104703353E-11	DESIGN
first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9999994662549333	WITHOUT_CLASSIFICATION	5.337450666516973E-7	DESIGN
first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9999994662549333	WITHOUT_CLASSIFICATION	5.337450666516973E-7	DESIGN
it does not refer to an alias of a projection, look for a property	WITHOUT_CLASSIFICATION	0.9999845483665778	WITHOUT_CLASSIFICATION	1.5451633422178907E-5	DESIGN
determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999994723271172	WITHOUT_CLASSIFICATION	5.276728829224679E-7	DESIGN
Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999999444019014	WITHOUT_CLASSIFICATION	5.559809842428988E-8	DESIGN
Translates an AST join type (i.e., the token type) into a JoinFragment.XXX join type. @param astJoinType The AST join type (from HqlSqlTokenTypes or SqlTokenTypes) @return a JoinFragment.XXX join type. @see JoinFragment @see SqlTokenTypes	WITHOUT_CLASSIFICATION	0.9544177930270542	WITHOUT_CLASSIFICATION	0.04558220697294587	DESIGN
ignore	WITHOUT_CLASSIFICATION	0.9999964313733375	WITHOUT_CLASSIFICATION	3.5686266624094358E-6	DESIGN
ignore	WITHOUT_CLASSIFICATION	0.9999964313733375	WITHOUT_CLASSIFICATION	3.5686266624094358E-6	DESIGN
}	WITHOUT_CLASSIFICATION	0.9999388364640885	WITHOUT_CLASSIFICATION	6.116353591146799E-5	DESIGN
public List getCollectionAliases() { return collectionAliases; } public List getCollectionOwners() { return collectionOwners; } public List getCollectionOwnerAliases() { return collectionOwnerAliases; } public List getCollectionPersisters() { return collectionPersisters; } public Map getAlias2Persister() { return alias2Persister; } public boolean isCollectionInitializer() { return isCollectionInitializer; } public List getPersisters() { return persisters; } public Map getAlias2OwnerAlias() { return alias2OwnerAlias; } public List getScalarTypes() { return scalarTypes; } public List getScalarColumnAliases() { return scalarColumnAliases; } public List getPropertyResults() { return propertyResults; } public List getCollectionPropertyResults() { return collectionResults; } public Map getAlias2Return() { return alias2Return; }	WITHOUT_CLASSIFICATION	0.9999868836806418	WITHOUT_CLASSIFICATION	1.3116319358289436E-5	DESIGN
SQLQueryParser parser = new SQLQueryParser( sqlQuery, processor.getAlias2Persister(), processor.getAlias2Return(), aliases, collAliases, collPersisters, suffixes, collSuffixes ); sql = parser.process(); namedParameterBindPoints = parser.getNamedParameters();	WITHOUT_CLASSIFICATION	0.9999999921432164	WITHOUT_CLASSIFICATION	7.856783608470952E-9	DESIGN
include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.999999109478803	WITHOUT_CLASSIFICATION	8.905211968597464E-7	DESIGN
sqlAliasSuffixes[i] = element.getColumnAliasSuffix();	WITHOUT_CLASSIFICATION	0.999999827750159	WITHOUT_CLASSIFICATION	1.7224984097187449E-7	DESIGN
NONE, because its the requested lock mode, not the actual!	WITHOUT_CLASSIFICATION	0.9999975935493068	WITHOUT_CLASSIFICATION	2.4064506932538676E-6	DESIGN
at this point we have (drivingSqlAlias) the SQL alias of the driving table corresponding to the given user alias. However, the driving table is not (necessarily) the table against which we want to apply locks. Mainly, the exception case here is joined-subclass hierarchies where we instead want to apply the lock against the root table (for all other strategies, it just happens that driving and root are the same).	WITHOUT_CLASSIFICATION	0.9999998958556712	WITHOUT_CLASSIFICATION	1.0414432888775447E-7	DESIGN
the column doesnt exist at all.	WITHOUT_CLASSIFICATION	0.9999969112326385	WITHOUT_CLASSIFICATION	3.0887673614470217E-6	DESIGN
we have a mapped identifier property and the root of the incoming property path matched that identifier property	WITHOUT_CLASSIFICATION	0.9999996674903453	WITHOUT_CLASSIFICATION	3.325096547115886E-7	DESIGN
we have an embedded composite identifier	WITHOUT_CLASSIFICATION	0.9999978242472529	WITHOUT_CLASSIFICATION	2.1757527470888324E-6	DESIGN
both many-to-one and one-to-one are represented as a Property. EntityPersister is relying on this value to determine "lazy fetch groups" in terms of field-level interception. So we need to make sure that we return true here for the case of many-to-one and one-to-one with lazy="no-proxy" impl note - lazy="no-proxy" currently forces both lazy and unwrap to be set to true. The other case we are extremely interested in here is that of lazy="proxy" where lazy is set to true, but unwrap is set to false. thus we use both here under the assumption that this return is really only ever used during persister construction to determine the lazy property/field fetch groupings. If that assertion changes then this check needs to change as well. Partially, this is an issue with the overloading of the term "lazy" here...	WITHOUT_CLASSIFICATION	0.999586811819094	WITHOUT_CLASSIFICATION	4.131881809059183E-4	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995371452474	WITHOUT_CLASSIFICATION	4.628547526837668E-7	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995371452474	WITHOUT_CLASSIFICATION	4.628547526837668E-7	DESIGN
rootTableName = persistentClass.getRootTable().getQualifiedName( factory.getDialect(), factory.getDefaultCatalog(), factory.getDefaultSchema() );	WITHOUT_CLASSIFICATION	0.9999997636271836	WITHOUT_CLASSIFICATION	2.3637281634153328E-7	DESIGN
SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999794559914094	WITHOUT_CLASSIFICATION	2.054400859070848E-5	DESIGN
Custom sql	WITHOUT_CLASSIFICATION	0.9999899366582159	WITHOUT_CLASSIFICATION	1.0063341784053433E-5	DESIGN
protected void initPropertyPaths(final String path,final Type type,final String[] columns,final String[] formulaTemplates,final Mapping factory)throws MappingException {addFormulaPropertyPath(path, type, formulaTemplates);initPropertyPaths(path, type, columns, formulaTemplates, factory);}	WITHOUT_CLASSIFICATION	0.9999628950244625	WITHOUT_CLASSIFICATION	3.7104975537596846E-5	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999420617157849	WITHOUT_CLASSIFICATION	5.7938284215003745E-5	DESIGN
Custom SQL (would be better if these were private)	WITHOUT_CLASSIFICATION	0.9094649402545452	WITHOUT_CLASSIFICATION	0.09053505974545482	DESIGN
moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996865743566948	WITHOUT_CLASSIFICATION	3.1342564330510666E-4	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999420617157849	WITHOUT_CLASSIFICATION	5.7938284215003745E-5	DESIGN
aliases for identifier ( alias.id ); skip if the entity defines a non-id property named 'id'	WITHOUT_CLASSIFICATION	0.9999996821945801	WITHOUT_CLASSIFICATION	3.178054198224824E-7	DESIGN
decide which ResultSet to get the property value from:	WITHOUT_CLASSIFICATION	0.999937168310867	WITHOUT_CLASSIFICATION	6.283168913304275E-5	DESIGN
note: it is conceptually possible that a UserType could map null to a non-null value, so the following is arguable:	WITHOUT_CLASSIFICATION	0.8064241991528729	WITHOUT_CLASSIFICATION	0.19357580084712714	DESIGN
the contract of EntityTuplizer.determineConcreteSubclassEntityName says that returning null is an indication that the specified entity-name (this.getEntityName) should be used.	WITHOUT_CLASSIFICATION	0.7397876266597257	DESIGN	0.2602123733402743	WITHOUT_CLASSIFICATION
Need to use the identifier type of the collection owner since the incoming is value is actually the owner's id. Using the collection's key type causes problems with property-ref keys...	WITHOUT_CLASSIFICATION	0.9999268183640071	WITHOUT_CLASSIFICATION	7.318163599286843E-5	DESIGN
cache these since they are stateless this one could even be static...	WITHOUT_CLASSIFICATION	0.9995251705071861	DESIGN	4.748294928138251E-4	WITHOUT_CLASSIFICATION
"as" is not in KEYWORDS	WITHOUT_CLASSIFICATION	0.9999619574654475	WITHOUT_CLASSIFICATION	3.804253455251261E-5	DESIGN
--Commented out by Inspection (12/4/04 9:10 AM): public abstract void addCondition(String alias, String[] columns, String condition);	WITHOUT_CLASSIFICATION	0.9999999761409045	WITHOUT_CLASSIFICATION	2.3859095466640128E-8	DESIGN
use the id column alias	WITHOUT_CLASSIFICATION	0.9999953889707212	WITHOUT_CLASSIFICATION	4.6110292787889994E-6	DESIGN
private List aliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999999972916502	WITHOUT_CLASSIFICATION	2.7083498738534843E-9	DESIGN
columns.add(columnName); aliases.add(tableAlias);	WITHOUT_CLASSIFICATION	0.9999877349936869	WITHOUT_CLASSIFICATION	1.2265006313146209E-5	DESIGN
where fragment must be empty!	WITHOUT_CLASSIFICATION	0.9954240119064816	WITHOUT_CLASSIFICATION	0.004575988093518414	DESIGN
revert to traditional hibernate behavior of setting initialPoolSize to minPoolSize unless otherwise specified with a c3p0.-style parameter.	WITHOUT_CLASSIFICATION	0.9999142075251216	WITHOUT_CLASSIFICATION	8.579247487844609E-5	DESIGN
arbitrary on clause ignored!!	WITHOUT_CLASSIFICATION	0.9999996904595432	WITHOUT_CLASSIFICATION	3.09540456859014E-7	DESIGN
might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9988011017158693	WITHOUT_CLASSIFICATION	0.0011988982841306766	DESIGN
might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9988011017158693	WITHOUT_CLASSIFICATION	0.0011988982841306766	DESIGN
if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999995379307808	WITHOUT_CLASSIFICATION	4.620692191366436E-7	DESIGN
Essentially: 1) If we have a local (Hibernate) transaction in progress and it already has the UserTransaction cached, use that UserTransaction to determine the status. 2) If a transaction manager has been located, use that transaction manager to determine the status. 3) Finally, as the last resort, try to lookup the UserTransaction via JNDI and use that to determine the status.	WITHOUT_CLASSIFICATION	0.9999998907373886	WITHOUT_CLASSIFICATION	1.0926261135284695E-7	DESIGN
package	WITHOUT_CLASSIFICATION	0.9997769428108455	WITHOUT_CLASSIFICATION	2.2305718915444837E-4	DESIGN
swallow it (the transaction _was_ successful or successfully rolled back)	WITHOUT_CLASSIFICATION	0.9999921565116049	WITHOUT_CLASSIFICATION	7.843488395105041E-6	DESIGN
ignore it	WITHOUT_CLASSIFICATION	0.9999980652230743	WITHOUT_CLASSIFICATION	1.9347769257049967E-6	DESIGN
we need to dirty check many-to-ones with not-found="ignore" in order to update the cache (not the database), since in this case a null entity reference can lose information	WITHOUT_CLASSIFICATION	0.9998502444868208	WITHOUT_CLASSIFICATION	1.4975551317921763E-4	DESIGN
create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999808512876861	WITHOUT_CLASSIFICATION	1.9148712313975254E-5	DESIGN
Regions can get instantiated in the course of normal work (e.g. a named query region will be created the first time the query is executed), so suspend any ongoing tx	WITHOUT_CLASSIFICATION	0.9999207765416555	WITHOUT_CLASSIFICATION	7.922345834449629E-5	DESIGN
then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9925865194346705	WITHOUT_CLASSIFICATION	0.007413480565329656	DESIGN
Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999742467177997	WITHOUT_CLASSIFICATION	2.575328220026516E-5	DESIGN
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9980529398862114	WITHOUT_CLASSIFICATION	0.0019470601137885398	DESIGN
NOTE : this is being used from the process of shutting down a SessionFactory. Specific things to consider: (1) this clearing of the region should not propagate to other nodes on the cluster (if any); this is the cache-mode-local option bit... (2) really just trying a best effort to cleanup after ourselves; lock failures, etc are not critical here; this is the fail-silently option bit...	WITHOUT_CLASSIFICATION	0.931746431495517	DESIGN	0.06825356850448305	WITHOUT_CLASSIFICATION
need to extract the component values and check for subtype replacements...	WITHOUT_CLASSIFICATION	0.8267822596999335	WITHOUT_CLASSIFICATION	0.17321774030006648	DESIGN
We ignore minimalPutOverride. JBossCache putForExternalRead is already about as minimal as we can get; it will promptly return if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999999993433732	WITHOUT_CLASSIFICATION	6.566268220562207E-10	DESIGN
for now, just "re-flatten" the metamodel since this is temporary stuff anyway (HHH-1907)	WITHOUT_CLASSIFICATION	0.9903767229367358	WITHOUT_CLASSIFICATION	0.009623277063264084	DESIGN
Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9998506283262506	WITHOUT_CLASSIFICATION	1.4937167374931266E-4	DESIGN
This solution would allow us to eliminate the owner arg to disassemble(), but what if the collection was null, and then later had elements added? seems unsafe session.getPersistenceContext().getCollectionEntry( (PersistentCollection) value ).getKey();	WITHOUT_CLASSIFICATION	0.8103213050225093	WITHOUT_CLASSIFICATION	0.18967869497749063	DESIGN
Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999927216832443	WITHOUT_CLASSIFICATION	7.278316755691336E-6	DESIGN
some collections are not lazy:	WITHOUT_CLASSIFICATION	0.9999639523977464	WITHOUT_CLASSIFICATION	3.6047602253642473E-5	DESIGN
Here we don't want to suspend the tx. If we do: 1) We might be caching query results that reflect uncommitted changes. No tx == no WL on cache node, so other threads can prematurely see those query results 2) No tx == immediate replication. More overhead, plus we spread issue #1 above around the cluster	WITHOUT_CLASSIFICATION	0.999934212882955	WITHOUT_CLASSIFICATION	6.578711704494367E-5	DESIGN
return the (fully resolved) identifier value, but do not resolve to the actual referenced entity instance NOTE: the owner of the association is not really the owner of the id!	WITHOUT_CLASSIFICATION	0.9999982804766193	WITHOUT_CLASSIFICATION	1.719523380674115E-6	DESIGN
Add a zero (or quite low) timeout option so we don't block. Ignore any TimeoutException. Basically we forego caching the query result in order to avoid blocking. Reads are done with suspended tx, so they should not hold the lock for long. Not caching the query result is OK, since any subsequent read will just see the old result with its out-of-date timestamp; that result will be discarded and the db query performed again.	WITHOUT_CLASSIFICATION	0.9999509315215132	WITHOUT_CLASSIFICATION	4.906847848677154E-5	DESIGN
Impl note: takes advantage of the fact that an escpaed single quote embedded within a quote-block can really be handled as two seperate quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9971305735389897	WITHOUT_CLASSIFICATION	0.002869426461010198	DESIGN
We have the JBCWriteMutex, so no other local thread will be trying to write this key. It's possible here some remote thread has come in and changed the values again, but since we are reading the values to write to JBC right now, we know we are writing the latest values; i.e. we don't assume that what we cached in entry.update() above is what we should write to JBC now. Our write could be redundant, i.e. we are writing what some remote thread just came in an wrote. There is a chance that yet another remote thread will update us, and we'll then overwrite that later data in JBC. But, all remote nodes will ignore that change in their localCache; the only place it will live will be in JBC, where it can only effect the initial state transfer values on newly joined nodes (i.e. populateLocalCache()).	WITHOUT_CLASSIFICATION	0.9999997496156792	WITHOUT_CLASSIFICATION	2.5038432084891945E-7	DESIGN
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999867073309657	WITHOUT_CLASSIFICATION	1.329266903429317E-5	DESIGN
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999867073309657	WITHOUT_CLASSIFICATION	1.329266903429317E-5	DESIGN
Don't need to lock the cache here, since if someone else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9912966536068695	WITHOUT_CLASSIFICATION	0.008703346393130456	DESIGN
we need to grab the version value from the entity, otherwise we have issues with generated-version entities that may have multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9608169647173744	WITHOUT_CLASSIFICATION	0.03918303528262552	DESIGN
we need to obtain the lock before any actions are executed, since this may be an inverse="true" bidirectional association and it is one of the earlier entity actions which actually updates the database (this action is resposible for second-level cache invalidation only)	WITHOUT_CLASSIFICATION	0.9998256611588416	WITHOUT_CLASSIFICATION	1.743388411585002E-4	DESIGN
postDelete: After actually deleting a row, record the fact that the instance no longer exists on the database (needed for identity-column key generation), and remove it from the session cache	WITHOUT_CLASSIFICATION	0.923251418190025	WITHOUT_CLASSIFICATION	0.076748581809975	DESIGN
intentionally empty	WITHOUT_CLASSIFICATION	0.9999557726236074	WITHOUT_CLASSIFICATION	4.4227376392666636E-5	DESIGN
todo : what else to do here?	DESIGN	0.9953026431615922	WITHOUT_CLASSIFICATION	0.0046973568384077935	DESIGN
put() has nowait semantics, is this really appropriate? note that it needs to be async replication, never local or sync	DESIGN	0.6479925285937663	WITHOUT_CLASSIFICATION	0.3520074714062338	DESIGN
'hibernate.temp.use_jdbc_metadata_defaults' is a temporary magic value. The need for it is intended to be alleviated with future developement, thus it is not defined as an Environment constant... it is used to control whether we should consult the JDBC metadata to determine certain Settings default values; it is useful to not do this when the database may not be available (mainly in tools usage).	DESIGN	0.7601614193357612	WITHOUT_CLASSIFICATION	0.23983858066423883	DESIGN
TODO: get SQL rendering out of this package!	DESIGN	0.9902477493256225	DESIGN	0.00975225067437738	WITHOUT_CLASSIFICATION
TODO: get SQL rendering out of this package!	DESIGN	0.9902477493256225	DESIGN	0.00975225067437738	WITHOUT_CLASSIFICATION
todo : eventually merge this with TreeCache and just add optional opt-lock support there.	DESIGN	0.9962841960540567	WITHOUT_CLASSIFICATION	0.0037158039459432623	DESIGN
can happen because of the multiple ways Cache.remove() can be invoked :(	DESIGN	0.9999604696843318	WITHOUT_CLASSIFICATION	3.953031566814269E-5	DESIGN
work around the "feature" where tree cache is validating the inserted node during the next transaction. no idea...	DESIGN	0.624718233529025	DESIGN	0.37528176647097516	WITHOUT_CLASSIFICATION
FIXME Per the RegionFactory class Javadoc, this constructor version should not be necessary. @param props The configuration properties	DESIGN	0.999294215323979	DESIGN	7.057846760209786E-4	WITHOUT_CLASSIFICATION
FIXME Per the RegionFactory class Javadoc, this constructor version should not be necessary. @param props The configuration properties	DESIGN	0.999294215323979	DESIGN	7.057846760209786E-4	WITHOUT_CLASSIFICATION
FIXME Hacky workaround to JBCACHE-1202	DESIGN	0.999999998299211	DESIGN	1.70078905325171E-9	WITHOUT_CLASSIFICATION
FIXME Hacky workaround to JBCACHE-1202	DESIGN	0.999999998299211	DESIGN	1.70078905325171E-9	WITHOUT_CLASSIFICATION
TODO: I considered validating TS cache config here, but decided to defer unti getTimestampsCacheInstance() in case the cache is never actually used	DESIGN	0.9965704606224636	DESIGN	0.0034295393775364345	WITHOUT_CLASSIFICATION
TODO Is this a valid operation on a timestamps cache?	DESIGN	0.9887964888971358	DESIGN	0.011203511102864184	WITHOUT_CLASSIFICATION
TODO Is this a valid operation on a timestamps cache?	DESIGN	0.9887964888971358	DESIGN	0.011203511102864184	WITHOUT_CLASSIFICATION
TODO Why not use the timestamp in a DataVersion?	DESIGN	0.9999985306933947	DESIGN	1.4693066053456722E-6	WITHOUT_CLASSIFICATION
can happen because of the multiple ways Cache.remove() can be invoked :(	DESIGN	0.9999604696843318	WITHOUT_CLASSIFICATION	3.953031566814269E-5	DESIGN
work around the "feature" where tree cache is validating the inserted node during the next transaction. no idea...	DESIGN	0.624718233529025	DESIGN	0.37528176647097516	WITHOUT_CLASSIFICATION
swaldman 2004-02-07: modify to allow null values to signify fall through to c3p0 PoolConfig defaults	DESIGN	0.9999581204905031	WITHOUT_CLASSIFICATION	4.1879509496874144E-5	DESIGN
turn hibernate.c3p0. into c3p0., so c3p0 gets a chance to see all hibernate.c3p0.	DESIGN	0.9999900387510061	WITHOUT_CLASSIFICATION	9.961248993814363E-6	DESIGN
TODO: this bit actually has to be called after all cascades! but since identity insert is called synchronously, instead of asynchronously as other actions, it isn't	DESIGN	0.9952855293730943	DESIGN	0.004714470626905618	WITHOUT_CLASSIFICATION
TODO: reenable if we also fix the above todo	DESIGN	0.9862396128446879	DESIGN	0.013760387155312135	WITHOUT_CLASSIFICATION
TODO: inefficient if that cache is just going to ignore the updated state!	DESIGN	0.6648823324753564	WITHOUT_CLASSIFICATION	0.3351176675246435	DESIGN
we may be screwed here since the collection action is about to execute and we do not know the final owner key value	DESIGN	0.9958793033359333	WITHOUT_CLASSIFICATION	0.004120696664066668	DESIGN
Create an action that will evict collection and entity regions based on queryspaces (table names). TODO: cache the autodetected information and pass it in instead.	DESIGN	0.8303619726241198	DESIGN	0.16963802737588024	WITHOUT_CLASSIFICATION
todo : what else to do here?	DESIGN	0.9953026431615922	WITHOUT_CLASSIFICATION	0.0046973568384077935	DESIGN
todo : modify the class definition if not already transformed...	DESIGN	0.9984628751477233	WITHOUT_CLASSIFICATION	0.001537124852276735	DESIGN
todo : what else to do here?	DESIGN	0.9953026431615922	WITHOUT_CLASSIFICATION	0.0046973568384077935	DESIGN
this is called by SessionFactory irregardless; we just disregard here; could also add a check to SessionFactory to only conditionally call start	DESIGN	0.8739194947054476	WITHOUT_CLASSIFICATION	0.12608050529455236	DESIGN
this is called by SessionFactory irregardless; we just disregard here; could also add a check to SessionFactory to only conditionally call stop	DESIGN	0.8621244766219809	WITHOUT_CLASSIFICATION	0.1378755233780192	DESIGN
TODO: to handle concurrent writes correctly, this should return a Lock to the client	DESIGN	0.9999910449062858	DESIGN	8.95509371422333E-6	WITHOUT_CLASSIFICATION
put() has nowait semantics, is this really appropriate? note that it needs to be async replication, never local or sync	DESIGN	0.6479925285937663	WITHOUT_CLASSIFICATION	0.3520074714062338	DESIGN
TODO: to handle concurrent writes correctly, the client should pass in a Lock	DESIGN	0.9525651911831409	DESIGN	0.04743480881685915	WITHOUT_CLASSIFICATION
TODO: assumes all collections disassemble to an array!	DESIGN	0.9999420326582529	WITHOUT_CLASSIFICATION	5.796734174716843E-5	DESIGN
TODO: reuse the PreLoadEvent	DESIGN	0.6307245278771529	DESIGN	0.36927547212284717	WITHOUT_CLASSIFICATION
todo: this was added to support initializing an entity's EntityEntry snapshot during reattach; this should be refactored to instead expose a method to assemble a EntityEntry based on this state for return.	DESIGN	0.9462667185665036	WITHOUT_CLASSIFICATION	0.05373328143349643	DESIGN
todo : what is the implication of this?	DESIGN	0.5481734509540963	WITHOUT_CLASSIFICATION	0.4518265490459036	DESIGN
use COUNT as the default. This mimics the old behavior, although NONE might be a better option moving forward in the case of callable	DESIGN	0.9887377485403546	WITHOUT_CLASSIFICATION	0.011262251459645397	DESIGN
TODO: joinKeyColumnName & foreignKeyColumnName should be called either here or at a slightly higer level in the stack (to get all the information we need) Right now HbmBinder does not support the	DESIGN	0.9999995896608009	DESIGN	4.1033919911607513E-7	WITHOUT_CLASSIFICATION
TODO: suck this into initLaziness!	DESIGN	0.9999222357799366	DESIGN	7.776422006340085E-5	WITHOUT_CLASSIFICATION
we have to set up the table later!! yuck	DESIGN	0.9977755707111106	WITHOUT_CLASSIFICATION	0.0022244292888894592	DESIGN
TODO: better to degrade to lazy="false" if uninstrumented	DESIGN	0.9211538098845397	WITHOUT_CLASSIFICATION	0.07884619011546036	DESIGN
todo : again, how should this work for non-pojo entities?	DESIGN	0.8072635734476424	DESIGN	0.19273642655235756	WITHOUT_CLASSIFICATION
TODO: this is a bit of copy/paste from IndexedCollection.createPrimaryKey()	DESIGN	0.9525574546024772	DESIGN	0.04744254539752273	WITHOUT_CLASSIFICATION
This inner class implements a case statement....perhaps im being a bit over-clever here	DESIGN	0.991927897626647	DESIGN	0.008072102373352959	WITHOUT_CLASSIFICATION
TODO: bad implementation, cos it depends upon ordering of mapping doc fixing this requires that Collection/PersistentClass gain access to the Mappings reference from Configuration (or the filterDefinitions map directly) sometime during Configuration.buildSessionFactory (after all the types/filter-defs are known and before building persisters).	DESIGN	0.9999909677459738	DESIGN	9.03225402614003E-6	WITHOUT_CLASSIFICATION
use of a stringbuffer to workaround a JDK bug	DESIGN	0.9997711429457538	DESIGN	2.288570542461691E-4	WITHOUT_CLASSIFICATION
hack/workaround as sqlquery impl depend on having a key.	DESIGN	0.9999997012226206	DESIGN	2.987773793765891E-7	WITHOUT_CLASSIFICATION
FIXME: get the PersistentClass	DESIGN	0.7809991495230761	WITHOUT_CLASSIFICATION	0.21900085047692378	DESIGN
FIXME: get the PersistentClass	DESIGN	0.7809991495230761	WITHOUT_CLASSIFICATION	0.21900085047692378	DESIGN
Icky workaround for MySQL bug:	DESIGN	0.9972527414989106	DESIGN	0.002747258501089303	WITHOUT_CLASSIFICATION
TODO: Somehow add the newly created foreign keys to the internal collection	DESIGN	0.8966558327911881	WITHOUT_CLASSIFICATION	0.10334416720881179	DESIGN
TODO possibly relax that	DESIGN	0.6313794822235567	DESIGN	0.3686205177764432	WITHOUT_CLASSIFICATION
TODO possibly relax that	DESIGN	0.6313794822235567	DESIGN	0.3686205177764432	WITHOUT_CLASSIFICATION
TODO possibly relax that	DESIGN	0.6313794822235567	DESIGN	0.3686205177764432	WITHOUT_CLASSIFICATION
use of a stringbuffer to workaround a JDK bug	DESIGN	0.9997711429457538	DESIGN	2.288570542461691E-4	WITHOUT_CLASSIFICATION
use a degenerated strategy for backward compatibility	DESIGN	0.9990329271417001	WITHOUT_CLASSIFICATION	9.67072858299827E-4	DESIGN
Sets can be just a view of a part of another collection. do we need to copy it to be sure it won't be changing underneath us? ie. this.set.addAll(set);	DESIGN	0.8965654459433741	WITHOUT_CLASSIFICATION	0.10343455405662588	DESIGN
note that i parameter is now unused (delete it?)	DESIGN	0.8964068125007765	DESIGN	0.10359318749922346	WITHOUT_CLASSIFICATION
just to help out during the load (ugly, i know)	DESIGN	0.9999883911631876	WITHOUT_CLASSIFICATION	1.160883681237037E-5	DESIGN
TODO : safe to interpret "map.remove(key) == null" as non-dirty?	DESIGN	0.6493156561436294	WITHOUT_CLASSIFICATION	0.3506843438563705	DESIGN
yick! need this for proper serialization/deserialization handling...	DESIGN	0.859873846252151	WITHOUT_CLASSIFICATION	0.14012615374784892	DESIGN
TODO: get SQL rendering out of this package!	DESIGN	0.9902477493256225	DESIGN	0.00975225067437738	WITHOUT_CLASSIFICATION
TODO: get SQL rendering out of this package!	DESIGN	0.9902477493256225	DESIGN	0.00975225067437738	WITHOUT_CLASSIFICATION
yuck!	DESIGN	0.974576796220577	WITHOUT_CLASSIFICATION	0.025423203779422875	DESIGN
TODO: get SQL rendering out of this package!	DESIGN	0.9902477493256225	DESIGN	0.00975225067437738	WITHOUT_CLASSIFICATION
TODO : not sure this is correct, could not find docs on how to do this.	DESIGN	0.9999976455174994	DESIGN	2.354482500727998E-6	WITHOUT_CLASSIFICATION
HSQL has no Blob/Clob support .... but just put these here for now!	DESIGN	0.9920805753886938	WITHOUT_CLASSIFICATION	0.007919424611306363	DESIGN
does this need holdlock also? : return tableName + " with (updlock, rowlock, holdlock)";	DESIGN	0.6649515605255749	WITHOUT_CLASSIFICATION	0.3350484394744251	DESIGN
sql-server, at least needed this dropped after use; strange!	DESIGN	0.9999739525505061	WITHOUT_CLASSIFICATION	2.6047449493818177E-5	DESIGN
todo : is there really any reason to kkeep trying if this fails once?	DESIGN	0.9976583327705806	WITHOUT_CLASSIFICATION	0.002341667229419453	DESIGN
TBD should this be varbinary($1)? registerColumnType(Types.VARBINARY, "binary($1)");	DESIGN	0.9998765736759282	WITHOUT_CLASSIFICATION	1.2342632407190423E-4	DESIGN
is it necessary to register %exact since it can only appear in a where clause?	DESIGN	0.9964382530227077	WITHOUT_CLASSIFICATION	0.003561746977292222	DESIGN
xmlforest requires a new kind of function constructor	DESIGN	0.9999940638721025	WITHOUT_CLASSIFICATION	5.936127897511383E-6	DESIGN
Does this dialect support the ALTER TABLE syntax?	DESIGN	0.9995878360685262	WITHOUT_CLASSIFICATION	4.121639314738492E-4	DESIGN
Do we need to qualify index names with the schema name?	DESIGN	0.9994542301259155	WITHOUT_CLASSIFICATION	5.457698740845476E-4	DESIGN
Does this dialect support the UNIQUE column syntax?	DESIGN	0.9987738150841233	WITHOUT_CLASSIFICATION	0.001226184915876653	DESIGN
Does this dialect support check constraints?	DESIGN	0.9995450844921897	WITHOUT_CLASSIFICATION	4.549155078102592E-4	DESIGN
Do we need to drop constraints before dropping tables in this dialect?	DESIGN	0.9991004572733545	WITHOUT_CLASSIFICATION	8.995427266454946E-4	DESIGN
Does this dialect support the FOR UPDATE syntax?	DESIGN	0.9982066263268531	WITHOUT_CLASSIFICATION	0.0017933736731469555	DESIGN
Does this dialect support the Oracle-style FOR UPDATE NOWAIT syntax?	DESIGN	0.9990457353481429	WITHOUT_CLASSIFICATION	9.542646518572436E-4	DESIGN
Does this dialect support FOR UPDATE OF, allowing particular rows to be locked?	DESIGN	0.945121017632881	DESIGN	0.05487898236711906	WITHOUT_CLASSIFICATION
note there is a wierd implementation in the client side	DESIGN	0.9993019187978137	WITHOUT_CLASSIFICATION	6.980812021863388E-4	DESIGN
TODO: never reached, since getTypeName() actually throws an exception!	DESIGN	0.5221665508789143	WITHOUT_CLASSIFICATION	0.47783344912108566	DESIGN
todo : should we additionally check the current isolation mode explicitly?	DESIGN	0.9927499810166666	DESIGN	0.007250018983333432	WITHOUT_CLASSIFICATION
todo : remove this and just have subclasses use Isolater/IsolatedWork directly...	DESIGN	0.9644721612303326	DESIGN	0.03552783876966744	WITHOUT_CLASSIFICATION
TODO: should orphans really be deleted during lock???	DESIGN	0.9969049342024809	DESIGN	0.0030950657975190657	WITHOUT_CLASSIFICATION
orphans should not be deleted during merge??	DESIGN	0.9952168021540574	WITHOUT_CLASSIFICATION	0.004783197845942583	DESIGN
orphans should not be deleted during copy??	DESIGN	0.99640241540544	WITHOUT_CLASSIFICATION	0.003597584594560015	DESIGN
I suppose?	DESIGN	0.998921198674382	WITHOUT_CLASSIFICATION	0.001078801325617902	DESIGN
TODO: suck this logic into the collection!	DESIGN	0.9999460925459125	DESIGN	5.390745408752445E-5	WITHOUT_CLASSIFICATION
TODO: an alternative is to check if the owner has changed; if it hasn't then get the ID from collection.getOwner()	DESIGN	0.7685075354600261	WITHOUT_CLASSIFICATION	0.2314924645399738	DESIGN
TODO:refactor + make this method private	DESIGN	0.9270633451761863	DESIGN	0.07293665482381367	WITHOUT_CLASSIFICATION
todo : we can actually just determine this from the incoming EntityEntry-s	DESIGN	0.9994426199722543	WITHOUT_CLASSIFICATION	5.573800277456473E-4	DESIGN
TODO: Should this be an InitializeEntityEventListener??? (watch out for performance!)	DESIGN	0.9999922038271044	DESIGN	7.796172895521392E-6	WITHOUT_CLASSIFICATION
TODO: better to pass the id in as an argument?	DESIGN	0.9909110231833599	DESIGN	0.009088976816640048	WITHOUT_CLASSIFICATION
todo : potentially look at optimizing these two arrays	DESIGN	0.954415355831067	WITHOUT_CLASSIFICATION	0.04558464416893308	DESIGN
trim done to workaround stupid oracle bug that cant handle whitespaces before a { in a sp	DESIGN	0.9997576342830744	DESIGN	2.4236571692553183E-4	WITHOUT_CLASSIFICATION
trim done to workaround stupid oracle bug that cant handle whitespaces before a { in a sp	DESIGN	0.9997576342830744	DESIGN	2.4236571692553183E-4	WITHOUT_CLASSIFICATION
TODO: temporary	DESIGN	0.9963501365508323	DESIGN	0.003649863449167644	WITHOUT_CLASSIFICATION
TODO: not quite sure about the full implications of this!	DESIGN	0.7912150549569923	DESIGN	0.2087849450430076	WITHOUT_CLASSIFICATION
TODO: not quite sure about the full implications of this!	DESIGN	0.7912150549569923	DESIGN	0.2087849450430076	WITHOUT_CLASSIFICATION
TODO: ugly here:	DESIGN	0.9969181378660413	DESIGN	0.003081862133958713	WITHOUT_CLASSIFICATION
this is kinda the best we can do...	DESIGN	0.9753442428113568	WITHOUT_CLASSIFICATION	0.024655757188643206	DESIGN
TODO: this needn't exclude subclasses...	DESIGN	0.9886040840679383	DESIGN	0.011395915932061643	WITHOUT_CLASSIFICATION
todo : need map? the prob is a proper key, right?	DESIGN	0.9633431841689591	DESIGN	0.0366568158310409	WITHOUT_CLASSIFICATION
todo : i'd much rather have this done from #endLoadingCollection(CollectionPersister,LoadingCollectionEntry)...	DESIGN	0.9995358225373535	WITHOUT_CLASSIFICATION	4.641774626465575E-4	DESIGN
todo : hack!!! NOTE : here we cleanup the load context when we have no more local LCE entries. This "works" for the time being because really only the collection load contexts are implemented. Long term, this cleanup should become part of the "close result set" processing from the (sandbox/jdbc) jdbc-container code.	DESIGN	0.9998925394570507	DESIGN	1.0746054294923137E-4	WITHOUT_CLASSIFICATION
todo : should really move this log statement to CollectionType, where this is used from...	DESIGN	0.5895309023747533	WITHOUT_CLASSIFICATION	0.4104690976252466	DESIGN
TODO : keep seperate notions of QT[] here for shallow/non-shallow queries...	DESIGN	0.967923200937245	DESIGN	0.032076799062755006	WITHOUT_CLASSIFICATION
TODO : add this info to the translator and aggregate it here...	DESIGN	0.9979748084424612	DESIGN	0.002025191557538751	WITHOUT_CLASSIFICATION
TODO: move into collection type, so we can use polymorphism!	DESIGN	0.998961049207569	DESIGN	0.0010389507924309439	WITHOUT_CLASSIFICATION
todo : should we check the current isolation mode explicitly?	DESIGN	0.6858492635007469	DESIGN	0.31415073649925307	WITHOUT_CLASSIFICATION
TODO: suck into event class	DESIGN	0.9999081381679935	DESIGN	9.186183200655948E-5	WITHOUT_CLASSIFICATION
do we even really need this? the update will fail anyway....	DESIGN	0.6491417440265167	DESIGN	0.35085825597348325	WITHOUT_CLASSIFICATION
hum ... should we cascade anyway? throw an exception? fine like it is?	DESIGN	0.9999991403490226	DESIGN	8.59650977384484E-7	WITHOUT_CLASSIFICATION
TODO: would it be better to do a refresh from db?	DESIGN	0.9999695853883991	DESIGN	3.0414611600904656E-5	WITHOUT_CLASSIFICATION
TODO: we use two visitors here, inefficient!	DESIGN	0.9897937300078365	DESIGN	0.01020626999216347	WITHOUT_CLASSIFICATION
this class has no proxies (so do a shortcut)	DESIGN	0.9998778631502946	WITHOUT_CLASSIFICATION	1.2213684970539823E-4	DESIGN
PostLoad is needed for EJB3 TODO: reuse the PostLoadEvent...	DESIGN	0.7142551829969911	DESIGN	0.2857448170030088	WITHOUT_CLASSIFICATION
TODO: put this stuff back in to read snapshot from the second-level cache (needs some extra work)	DESIGN	0.9999897021933742	DESIGN	1.029780662576985E-5	WITHOUT_CLASSIFICATION
null or brand new collection this will also (inefficiently) handle arrays, which have no snapshot, so we can't do any better	DESIGN	0.8402141103940689	WITHOUT_CLASSIFICATION	0.15978588960593113	DESIGN
TODO: is this 100% correct?	DESIGN	0.9984887163547043	DESIGN	0.001511283645295818	WITHOUT_CLASSIFICATION
TODO: iteratively get transient entities and retry merge until one of the following conditions: 1) transientCopyCache.size() == 0 2) transientCopyCache.size() is not decreasing and copyCache.size() is not increasing TODO: find out if retrying can add entities to copyCache (don't think it can...) For now, just retry once; throw TransientObjectException if there are still any transient entities	DESIGN	0.9588634351905684	DESIGN	0.04113656480943172	WITHOUT_CLASSIFICATION
entity name will not be available for non-POJO entities TODO: cache the entity name somewhere so that it is available to this exception	DESIGN	0.9999721875769423	DESIGN	2.781242305779303E-5	WITHOUT_CLASSIFICATION
TODO: we should throw an exception if we really know for sure that this is a detached instance, rather than just assuming throw new StaleObjectStateException(entityName, id);	DESIGN	0.9999328332751564	DESIGN	6.716672484365358E-5	WITHOUT_CLASSIFICATION
TODO : perhaps we should additionally require that the incoming entity version be equivalent to the defined unsaved-value?	DESIGN	0.9999998832351729	DESIGN	1.1676482714717053E-7	WITHOUT_CLASSIFICATION
perhaps this should be an exception since it is only ever used in the above method?	DESIGN	0.9783929486554498	DESIGN	0.021607051344550206	WITHOUT_CLASSIFICATION
Put a placeholder in entries, so we don't recurse back and try to save() the same object again. QUESTION: should this be done before onSave() is called? likewise, should it be done before onUpdate()?	DESIGN	0.9472297068213622	WITHOUT_CLASSIFICATION	0.0527702931786378	DESIGN
TODO: merge into one method!	DESIGN	0.9873890265935611	DESIGN	0.012610973406438972	WITHOUT_CLASSIFICATION
TODO: refactor to .sql package	DESIGN	0.9989792666750031	DESIGN	0.00102073332499689	WITHOUT_CLASSIFICATION
Provides query splitting methods, which were originally in QueryTranslator. <br> TODO: This will need to be refactored at some point. @author josh	DESIGN	0.9999813972651416	DESIGN	1.860273485845678E-5	WITHOUT_CLASSIFICATION
TODO: this is one of the ugliest and most fragile pieces of code in Hibernate....	DESIGN	0.9998238828081699	DESIGN	1.7611719183018156E-4	WITHOUT_CLASSIFICATION
todo : temporary needed because currently persister is the one that creates and renders the join fragments for inheritence hierarchies...	DESIGN	0.9991945143529508	WITHOUT_CLASSIFICATION	8.05485647049158E-4	DESIGN
TODO : better way?!?	DESIGN	0.9999995310025627	DESIGN	4.6899743730112746E-7	WITHOUT_CLASSIFICATION
Not possible to simply re-use the versionPropertyNode here as it causes OOM errors due to circularity :(	DESIGN	0.9999998906273123	WITHOUT_CLASSIFICATION	1.0937268775123603E-7	DESIGN
TODO:this is only needed during compilation .. can we eliminate the instvar?	DESIGN	0.9971219727651726	DESIGN	0.0028780272348274717	WITHOUT_CLASSIFICATION
TODO : this is a bit dodgy, come up with a better way to check this (plus see above comment)	DESIGN	0.9999999400159676	DESIGN	5.998403235758707E-8	WITHOUT_CLASSIFICATION
even here, if only properties mapped to the "base table" are referenced in the set and where clauses, this could be handled by the BasicDelegate. TODO : decide if it is better performance-wise to perform that check, or to simply use the MultiTableUpdateDelegate	DESIGN	0.9999999999255239	DESIGN	7.447611754439071E-11	WITHOUT_CLASSIFICATION
TODO: switch statements are always evil! We already had bugs because of forgotten token types. Use polymorphism for this!	DESIGN	0.999714288850799	DESIGN	2.8571114920099245E-4	WITHOUT_CLASSIFICATION
TODO : we really need to be able to deal with component paths here also; this is difficult because the hql-sql grammar expects all those node types to be FromReferenceNodes. One potential fix here would be to convert the IntoClause to just use a FromClause/FromElement combo (as a child of the InsertStatement) and move all this logic into the InsertStatement. That's probably the easiest approach (read: least amount of changes to the grammar and code), but just doesn't feel right as then an insert would contain 2 from-clauses	DESIGN	0.9999717924406201	DESIGN	2.820755937998093E-5	WITHOUT_CLASSIFICATION
really there are two situations where it should be ok to allow the insertion into properties defined on a superclass: 1) union-subclass with an abstract root entity 2) discrim-subclass #1 is handled already because of the fact that UnionSubclassPersister alreay always returns 0 for this call... we may want to disallow it for discrim-subclass just for consistency-sake (currently does not work anyway)...	DESIGN	0.9997814047905959	WITHOUT_CLASSIFICATION	2.1859520940418258E-4	DESIGN
yuck!	DESIGN	0.974576796220577	WITHOUT_CLASSIFICATION	0.025423203779422875	DESIGN
implicit joins are always(?) ok to reuse	DESIGN	0.9844860270628706	WITHOUT_CLASSIFICATION	0.015513972937129292	DESIGN
TODO : we may also want to check that the types here map to exactly one column/JDBC-type can't think of a situation where arithmetic expression between multi-column mappings makes any sense.	DESIGN	0.9995722460353256	DESIGN	4.2775396467443984E-4	WITHOUT_CLASSIFICATION
we do not know either type BLIND GUESS!	DESIGN	0.9992679310279271	WITHOUT_CLASSIFICATION	7.32068972072965E-4	DESIGN
TODO: used to be exprNoParens! was this needed?	DESIGN	0.9999999809597978	DESIGN	1.904020212845852E-8	WITHOUT_CLASSIFICATION
TODO: Replace this with a more elegant solution.	DESIGN	0.9999789055338926	DESIGN	2.1094466107360694E-5	WITHOUT_CLASSIFICATION
TODO: Should this really return null? If not, figure out something better to do here.	DESIGN	0.9996723680162036	DESIGN	3.276319837963611E-4	WITHOUT_CLASSIFICATION
TODO: get SQL rendering out of this package!	DESIGN	0.9902477493256225	DESIGN	0.00975225067437738	WITHOUT_CLASSIFICATION
yuck!	DESIGN	0.974576796220577	WITHOUT_CLASSIFICATION	0.025423203779422875	DESIGN
ignore it; the incoming property could not be found so we cannot be sure what to do here. At the very least, the safest is to simply not apply any dereference toggling...	DESIGN	0.9980366575306615	WITHOUT_CLASSIFICATION	0.0019633424693384855	DESIGN
TODO : most of below was taken verbatim from DotNode; should either delegate this logic or super-type it	DESIGN	0.9995972248095724	DESIGN	4.027751904276279E-4	WITHOUT_CLASSIFICATION
otherwise, a trim-specification and/or a trim-character have been specified; we need to decide which options are present and "do the right thing" should leading trim-characters be trimmed? should trailing trim-characters be trimmed? the trim-character the trim-source	DESIGN	0.9929501299755781	WITHOUT_CLASSIFICATION	0.007049870024421991	DESIGN
todo: we should really just collect these from the various SelectExpressions, rather than regenerating here	DESIGN	0.9362413575117082	DESIGN	0.06375864248829183	WITHOUT_CLASSIFICATION
TODO: is this a bit ugly?	DESIGN	0.9999920645075583	DESIGN	7.935492441723122E-6	WITHOUT_CLASSIFICATION
Need a better way to define the suffixes here...	DESIGN	0.5556358685653487	DESIGN	0.4443641314346513	WITHOUT_CLASSIFICATION
TODO: something much better - look at the type of the other expression! TODO: Have comparisonExpression and/or arithmeticExpression rules complete the resolution of boolean nodes.	DESIGN	0.9999941397167285	DESIGN	5.860283271529442E-6	WITHOUT_CLASSIFICATION
TODO : what amount of significant digits need to be supported here? - from the DecimalFormat docs: [significant digits] = [minimum integer digits] + [maximum fraction digits]	DESIGN	0.9430959432435079	DESIGN	0.05690405675649214	WITHOUT_CLASSIFICATION
Needed the "clazz_" check to work around union-subclasses TODO : is there a way to tell whether a persister is truly discrim-column based inheritence?	DESIGN	0.9970322180281297	DESIGN	0.002967781971870321	WITHOUT_CLASSIFICATION
We should actually rework this class to not implement Parser and just process path expressions in the most convenient way.	DESIGN	0.9901182699362301	DESIGN	0.009881730063769995	WITHOUT_CLASSIFICATION
The class is now way to complex!	DESIGN	0.999994726749742	WITHOUT_CLASSIFICATION	5.273250257992121E-6	DESIGN
TODO: get SQL rendering out of here	DESIGN	0.9710388303838328	DESIGN	0.028961169616167223	WITHOUT_CLASSIFICATION
TODO: is there a better way?	DESIGN	0.9999925472005725	DESIGN	7.452799427370639E-6	WITHOUT_CLASSIFICATION
Must be done here because of side-effect! yuck...	DESIGN	0.8474179066344747	WITHOUT_CLASSIFICATION	0.15258209336552528	DESIGN
name from a super query (a bit inelegant that it shows up here)	DESIGN	0.9857449205271933	WITHOUT_CLASSIFICATION	0.014255079472806664	DESIGN
We should reengineer this class so that, rather than the current ad - hoc linear approach to processing a stream of tokens, we instead build up a tree of expressions.	DESIGN	0.9991048556513505	DESIGN	8.951443486495274E-4	WITHOUT_CLASSIFICATION
this is ugly here, but needed because its a subquery	DESIGN	0.9918785630655038	WITHOUT_CLASSIFICATION	0.0081214369344962	DESIGN
unhappy about this being public ... is there a better way?	DESIGN	0.9999462479196133	DESIGN	5.375208038667493E-5	WITHOUT_CLASSIFICATION
Make sure this is a defined parameter and check the incoming value type TODO: what should be the actual exception type here?	DESIGN	0.9999673271302174	DESIGN	3.2672869782520816E-5	WITHOUT_CLASSIFICATION
TODO : this constructor form is only used from constructor directly below us; can it go away?	DESIGN	0.9999999300539192	DESIGN	6.994608080385307E-8	WITHOUT_CLASSIFICATION
TODO: COPY/PASTE FROM SessionImpl, pull up!	DESIGN	0.6598140363791611	WITHOUT_CLASSIFICATION	0.34018596362083897	DESIGN
TODO : should remove this exposure and have all references to the session's batcher use the ConnectionManager.	DESIGN	0.994270089675767	DESIGN	0.005729910324232975	WITHOUT_CLASSIFICATION
todo : should this get moved to PersistentContext? logically, is PersistentContext the "thing" to which an interceptor gets attached?	DESIGN	0.9457964950225407	DESIGN	0.05420350497745927	WITHOUT_CLASSIFICATION
TODO: what type?	DESIGN	0.9711651956732189	DESIGN	0.02883480432678116	WITHOUT_CLASSIFICATION
todo : should seriously consider not allowing a txn to begin from a child session can always route the request to the root session...	DESIGN	0.9994785302386756	WITHOUT_CLASSIFICATION	5.214697613244796E-4	DESIGN
short-circuit for performance...	DESIGN	0.9987601231574662	WITHOUT_CLASSIFICATION	0.0012398768425337552	DESIGN
not absolutely necessary, but does help with aggressive release	DESIGN	0.995208850040982	WITHOUT_CLASSIFICATION	0.004791149959017917	DESIGN
TODO : remove these last two as batcher is no longer managing connections	DESIGN	0.9969276793258823	DESIGN	0.0030723206741176223	WITHOUT_CLASSIFICATION
work around a bug in all known connection pools....	DESIGN	0.508512364882699	DESIGN	0.49148763511730087	WITHOUT_CLASSIFICATION
TODO : make this the factory for "entity mode related" sessions; also means making this the target of transaction-synch and the thing that knows how to cascade things between related sessions At that point, perhaps this thing is a "SessionContext", and ConnectionManager is a "JDBCContext"? A "SessionContext" should live in the impl package...	DESIGN	0.999999999999642	DESIGN	3.5813358686251265E-13	WITHOUT_CLASSIFICATION
TODO: does this really need to be here? does the collection already have it's own up-to-date snapshot?	DESIGN	0.999957906021569	DESIGN	4.209397843106759E-5	WITHOUT_CLASSIFICATION
TODO: the i==entitySpan-1 bit depends upon subclass implementation (very bad)	DESIGN	0.9997931884353133	DESIGN	2.0681156468674416E-4	WITHOUT_CLASSIFICATION
This form used from annotations (?). Essentially the same as the above using a resultset-mapping reference, but without cacheMode, readOnly, and comment. FIXME: annotations do not use it, so it can be remove from my POV @deprecated @param query The sql query string @param resultSetRef The result-set-mapping name @param querySpaces Any specified query spaces (used for auto-flushing) @param cacheable Whether the query results are cacheable @param cacheRegion If cacheable, the region into which to store the results @param timeout A JDBC-level timeout to be applied @param fetchSize A JDBC-level fetch-size to be applied @param flushMode The flush mode to use for this query @param parameterTypes parameter type map @param callable Does the query string represent a callable object (i.e., proc)	DESIGN	0.9998024950499029	DESIGN	1.9750495009713647E-4	WITHOUT_CLASSIFICATION
todo : add the notion of enabled filters to the CacheKey to differentiate filtered collections from non-filtered; but CacheKey is currently used for both collections and entities; would ideally need to define two seperate ones; currently this works in conjuction with the check on DefaultInitializeCollectionEventHandler.initializeCollectionFromCache() (which makes sure to not read from cache with enabled filters). EARLY EXIT!!!!!	DESIGN	0.8296899819183458	DESIGN	0.17031001808165425	WITHOUT_CLASSIFICATION
for sets, we should end the collection load after resolving the entities, since we might call hashCode() on the elements TODO: or we could do this polymorphically, and have two different operations implemented differently for arrays	DESIGN	0.9999161655335653	DESIGN	8.383446643473762E-5	WITHOUT_CLASSIFICATION
This is not very nice (and quite slow):	DESIGN	0.9897161591194622	WITHOUT_CLASSIFICATION	0.010283840880537905	DESIGN
use of trim() here is ugly?	DESIGN	0.9949235183907048	WITHOUT_CLASSIFICATION	0.0050764816092951515	DESIGN
TODO: this is too conservative; if all preceding joins were also inner joins, we could use an inner join here	DESIGN	0.9998939505039093	DESIGN	1.0604949609068237E-4	WITHOUT_CLASSIFICATION
TODO: look at the owning property and check that it isn't lazy (by instrumentation)	DESIGN	0.8562942073356506	WITHOUT_CLASSIFICATION	0.14370579266434927	DESIGN
TODO: inefficient	DESIGN	0.9825571802607861	DESIGN	0.01744281973921392	WITHOUT_CLASSIFICATION
why does this matter?	DESIGN	0.6443730130793385	WITHOUT_CLASSIFICATION	0.3556269869206616	DESIGN
from the collection of associations, locate OJA for the ManyToOne corresponding to this persister to fully define the many-to-many; we need that OJA so that we can use its alias here TODO : is there a better way here?	DESIGN	0.9999987783764768	DESIGN	1.221623523227764E-6	WITHOUT_CLASSIFICATION
TODO: this class depends directly upon CriteriaImpl, in the impl package ... add a CriteriaImplementor interface	DESIGN	0.9999999800714087	DESIGN	1.992859132338431E-8	WITHOUT_CLASSIFICATION
TODO: add a CriteriaImplementor interface this class depends directly upon CriteriaImpl in the impl package...	DESIGN	0.9999951610714907	DESIGN	4.8389285093733945E-6	WITHOUT_CLASSIFICATION
TODO : not so sure this is needed...	DESIGN	0.9996690617743121	DESIGN	3.309382256879374E-4	WITHOUT_CLASSIFICATION
meant to handle dynamic instantiation queries...(Copy from QueryLoader)	DESIGN	0.9998536877538388	WITHOUT_CLASSIFICATION	1.4631224616133934E-4	DESIGN
TODO: The order in which entities are saved may matter (e.g., a particular transient entity may need to be saved before other transient entities can be saved; Keep retrying the batch of transient entities until either: 1) there are no transient entities left in transientCopyCache or 2) no transient entities were saved in the last batch For now, just run through the transient entities and retry the merge	DESIGN	0.9990699600356691	DESIGN	9.300399643309403E-4	WITHOUT_CLASSIFICATION
todo: this might really even be moved into the cfg package and used as the basis for all things which are configurable.	DESIGN	0.999488712742695	DESIGN	5.112872573049379E-4	WITHOUT_CLASSIFICATION
todo : currently expects that the individual with expressions apply to the same sql table join. This may not be the case for joined-subclass where the property values might be coming from different tables in the joined hierarchy. At some point we should expand this to support that capability. However, that has some difficulties: 1) the biggest is how to handle ORs when the individual comparisons are linked to different sql joins. 2) here we would need to track each comparison individually, along with the join alias to which it applies and then pass that information back to the FromElement so it can pass it along to the JoinSequence	DESIGN	0.9611644220795315	DESIGN	0.03883557792046856	WITHOUT_CLASSIFICATION
this function has a template -> restore output, apply the template and write the result out TODO: Downcast to avoid using an interface? Yuck.	DESIGN	0.9986255060967851	DESIGN	0.0013744939032147765	WITHOUT_CLASSIFICATION
at some point the generate phase needs to be moved out of here, because a single object-level DML might spawn multiple SQL DML command executions. Possible to just move the sql generation for dml stuff, but for consistency-sake probably best to just move responsiblity for the generation phase completely into the delegates (QueryLoader/StatementExecutor) themselves. Also, not sure why QueryLoader currently even has a dependency on this at all; does it need it? Ideally like to see the walker itself given to the delegates directly...	DESIGN	0.9999999999987419	DESIGN	1.2581874817112272E-12	WITHOUT_CLASSIFICATION
get the right object from the list ... would it be easier to just call getEntity() ??	DESIGN	0.8289849849415515	WITHOUT_CLASSIFICATION	0.17101501505844854	DESIGN
TODO should we just collect these like with the collections above?	DESIGN	0.9999943033902071	DESIGN	5.696609792803678E-6	WITHOUT_CLASSIFICATION
todo : better to handle dynamic filters through implicit DynamicFilterParameterSpecification see the discussion there in DynamicFilterParameterSpecification's javadocs as to why it is currently not done that way.	DESIGN	0.9873906091602752	DESIGN	0.012609390839724755	WITHOUT_CLASSIFICATION
/ USED ONLY FOR REGRESSION TESTING!!!! todo : obviously get rid of all this junk ;) /	DESIGN	0.9463945252642125	WITHOUT_CLASSIFICATION	0.05360547473578748	DESIGN
create an index on the key columns??	DESIGN	0.9999962496522883	WITHOUT_CLASSIFICATION	3.750347711840537E-6	DESIGN
TODO: deprecated, remove eventually	DESIGN	0.9607933180812849	DESIGN	0.03920668191871515	WITHOUT_CLASSIFICATION
create an index on the key columns??	DESIGN	0.9999962496522883	WITHOUT_CLASSIFICATION	3.750347711840537E-6	DESIGN
TODO: improve this hack!	DESIGN	0.9999997870655932	DESIGN	2.1293440682268447E-7	WITHOUT_CLASSIFICATION
inheritance cycle detection (paranoid check)	DESIGN	0.9999961629305071	WITHOUT_CLASSIFICATION	3.837069492945335E-6	DESIGN
TODO: remove use of instanceof!	DESIGN	0.9957474533222849	DESIGN	0.004252546677715144	WITHOUT_CLASSIFICATION
shortcut	DESIGN	0.9998902321695382	WITHOUT_CLASSIFICATION	1.097678304617558E-4	DESIGN
TODO: handle the case of a foreign key to something other than the pk	DESIGN	0.797185317757675	WITHOUT_CLASSIFICATION	0.20281468224232493	DESIGN
create an index on the key columns??	DESIGN	0.9999962496522883	WITHOUT_CLASSIFICATION	3.750347711840537E-6	DESIGN
todo : remove	DESIGN	0.9800247005680611	WITHOUT_CLASSIFICATION	0.01997529943193892	DESIGN
todo : remove	DESIGN	0.9800247005680611	WITHOUT_CLASSIFICATION	0.01997529943193892	DESIGN
todo : remove	DESIGN	0.9800247005680611	WITHOUT_CLASSIFICATION	0.01997529943193892	DESIGN
todo : throw exception?	DESIGN	0.7967963434339442	WITHOUT_CLASSIFICATION	0.20320365656605577	DESIGN
todo : throw exception? maybe warn if not the same?	DESIGN	0.9498959166237386	DESIGN	0.050104083376261425	WITHOUT_CLASSIFICATION
TODO: make EntityPersister not depend on SessionFactoryImplementor interface, if possible	DESIGN	0.9999648509360429	DESIGN	3.514906395702672E-5	WITHOUT_CLASSIFICATION
TODO: is there a more elegant way than downcasting?	DESIGN	0.9999257466626289	DESIGN	7.425333737100915E-5	WITHOUT_CLASSIFICATION
TODO: encapsulate the protected instance variables!	DESIGN	0.5925551328837856	WITHOUT_CLASSIFICATION	0.40744486711621436	DESIGN
should indicate that we are processing an INSERT/UPDATE/DELETE query with a subquery implied via a collection property function. Here, we need to use the table name itself as the qualification alias. TODO : verify this works for all databases... TODO : is this also the case in non-"indexed" scenarios?	DESIGN	0.9999999943401591	DESIGN	5.659840953636429E-9	WITHOUT_CLASSIFICATION
TODO: copy/paste from insertRows()	DESIGN	0.9152463299009103	WITHOUT_CLASSIFICATION	0.08475367009908977	DESIGN
TODO: copy/paste from recreate()	DESIGN	0.7186015286811379	WITHOUT_CLASSIFICATION	0.28139847131886203	DESIGN
should this interface extend PropertyMapping?	DESIGN	0.9527558152742251	DESIGN	0.04724418472577493	WITHOUT_CLASSIFICATION
ie. the subquery! yuck!	DESIGN	0.968578172383688	WITHOUT_CLASSIFICATION	0.031421827616311876	DESIGN
TODO: move to .sql package!!	DESIGN	0.9973205262527927	DESIGN	0.002679473747207357	WITHOUT_CLASSIFICATION
TODO: code duplication with SingleTableEntityPersister	DESIGN	0.9957636153479016	DESIGN	0.004236384652098421	WITHOUT_CLASSIFICATION
TODO: It would be really, really nice to use this to also model components!	DESIGN	0.9999996664335654	DESIGN	3.3356643461916856E-7	WITHOUT_CLASSIFICATION
TODO: two hashmap lookups here is one too many...	DESIGN	0.7694278012298	DESIGN	0.23057219877019985	WITHOUT_CLASSIFICATION
TODO: code duplication with JoinedSubclassEntityPersister	DESIGN	0.9920673811255208	DESIGN	0.007932618874479285	WITHOUT_CLASSIFICATION
perhaps not really necessary...	DESIGN	0.9757412112828009	WITHOUT_CLASSIFICATION	0.02425878871719918	DESIGN
NOTE: this assumes something about how propertySelectFragment is implemented by the subclass! was toUnqotedAliasStrings( getIdentiferColumnNames() ) before - now tried to remove that unqoting and missing aliases..	DESIGN	0.7317808418145366	WITHOUT_CLASSIFICATION	0.26821915818546327	DESIGN
NOTE: this assumes something about how propertySelectFragment is implemented by the subclass! was toUnqotedAliasStrings( getdiscriminatorColumnName() ) before - now tried to remove that unqoting and missing aliases..	DESIGN	0.8517331558553873	DESIGN	0.14826684414461266	WITHOUT_CLASSIFICATION
TODO: should we use SELECT .. FOR UPDATE?	DESIGN	0.9999117530617764	DESIGN	8.82469382236669E-5	WITHOUT_CLASSIFICATION
TODO: optimize this better!	DESIGN	0.9982546385578508	DESIGN	0.0017453614421492597	WITHOUT_CLASSIFICATION
TODO: should we allow suffixes on these ?	DESIGN	0.9999915663962593	DESIGN	8.433603740588433E-6	WITHOUT_CLASSIFICATION
This is really ugly, but necessary:	DESIGN	0.9191766293895165	WITHOUT_CLASSIFICATION	0.08082337061048357	DESIGN
ugly little workaround for fact that createUniqueKeyLoaders() does not handle component properties	DESIGN	0.9999647696120237	DESIGN	3.5230387976203945E-5	WITHOUT_CLASSIFICATION
TODO: disable batch loading if lockMode > READ?	DESIGN	0.9967940403620352	WITHOUT_CLASSIFICATION	0.0032059596379648268	DESIGN
append the SQL to return the generated identifier TODO: suck into Insert	DESIGN	0.9967152023260737	DESIGN	0.0032847976739262784	WITHOUT_CLASSIFICATION
TODO: I am not so sure about the exception handling in this bit!	DESIGN	0.9996770108811599	DESIGN	3.229891188400686E-4	WITHOUT_CLASSIFICATION
TODO: is this really necessary????	DESIGN	0.9995619718030075	DESIGN	4.380281969925682E-4	WITHOUT_CLASSIFICATION
TODO: move to .sql package, and refactor with similar things!	DESIGN	0.9991097199179165	DESIGN	8.902800820835059E-4	WITHOUT_CLASSIFICATION
TODO: implement functionality this might be painful to do here, as the "join post processing" for the subquery has already been performed (meaning that for theta-join dialects, the join conditions have already been moved over to the where clause). A "simple" solution here might to perform "join post processing" once for the entire query (including any subqueries) at one fell swoop	DESIGN	0.9999999991855375	DESIGN	8.144625584541963E-10	WITHOUT_CLASSIFICATION
todo : this eventually needs to be removed	DESIGN	0.9142130061660366	WITHOUT_CLASSIFICATION	0.08578699383396339	DESIGN
kinda ugly, but needed for collections with a "." node mapping	DESIGN	0.9999295974678303	WITHOUT_CLASSIFICATION	7.040253216974712E-5	DESIGN
is this ok?	DESIGN	0.9953547045932194	WITHOUT_CLASSIFICATION	0.004645295406780649	DESIGN
TODO: perhaps this should be some other RuntimeException...	DESIGN	0.9999995670818413	DESIGN	4.329181586016074E-7	WITHOUT_CLASSIFICATION
TODO: make this a bit nicer	DESIGN	0.999252114475873	DESIGN	7.478855241269332E-4	WITHOUT_CLASSIFICATION
Yuck:	DESIGN	0.9388781428942665	WITHOUT_CLASSIFICATION	0.06112185710573334	DESIGN
TODO: we should provide some way to get keys of collection of statistics to make it easier to retrieve from a GUI perspective	DESIGN	0.9999921477642923	DESIGN	7.852235707655092E-6	WITHOUT_CLASSIFICATION
@return collection removal FIXME: even if isInverse="true"?	DESIGN	0.5064231064643447	WITHOUT_CLASSIFICATION	0.49357689353565515	DESIGN
TODO : will need reference to session factory to fully complete HHH-1907	DESIGN	0.992194202213008	DESIGN	0.007805797786992062	WITHOUT_CLASSIFICATION
TODO: currently keeps Getters and Setters (instead of PropertyAccessors) because of the way getGetter() and getSetter() are implemented currently; yuck!	DESIGN	0.999999926829354	DESIGN	7.317064603238053E-8	WITHOUT_CLASSIFICATION
TODO: redesign how PropertyAccessors are acquired...	DESIGN	0.9988184044420227	DESIGN	0.001181595557977172	WITHOUT_CLASSIFICATION
todo : YUCK!!!	DESIGN	0.9708800614761105	WITHOUT_CLASSIFICATION	0.029119938523889537	DESIGN
TODO : YUCK!!! fix after HHH-1907 is complete	DESIGN	0.9999108999648745	DESIGN	8.910003512550126E-5	WITHOUT_CLASSIFICATION
TODO: need to make the majority of this functionality into a top-level support class for custom impl support	DESIGN	0.99979133645483	DESIGN	2.0866354517000792E-4	WITHOUT_CLASSIFICATION
TODO: design new lifecycle for ProxyFactory	DESIGN	0.5150912389277821	DESIGN	0.484908761072218	WITHOUT_CLASSIFICATION
TODO: would be nice to handle proxy classes elegantly!	DESIGN	0.9981318974071727	DESIGN	0.0018681025928272421	WITHOUT_CLASSIFICATION
TODO: copy/paste from ManyToOneType	DESIGN	0.5377766960611448	WITHOUT_CLASSIFICATION	0.4622233039388552	DESIGN
TODO: should this be Session.instantiate(Persister, ...)?	DESIGN	0.9941655318713168	DESIGN	0.005834468128683151	WITHOUT_CLASSIFICATION
TODO: this is a bit arbitrary, expose a switch to the user?	DESIGN	0.9745729667303495	DESIGN	0.02542703326965051	WITHOUT_CLASSIFICATION
TODO: implement caching?! proxies?!	DESIGN	0.9998298365835042	DESIGN	1.7016341649580622E-4	WITHOUT_CLASSIFICATION
TODO: is this right??	DESIGN	0.9999943854531456	DESIGN	5.614546854409333E-6	WITHOUT_CLASSIFICATION
is this really necessary?	DESIGN	0.8449262198979832	WITHOUT_CLASSIFICATION	0.15507378010201683	DESIGN
TODO: move these to a new JoinableType abstract class, extended by EntityType and PersistentCollectionType:	DESIGN	0.9999548844534802	DESIGN	4.511554651967304E-5	WITHOUT_CLASSIFICATION
TODO: this is very suboptimal for some subclasses (namely components), since it does not take advantage of two-phase-load	DESIGN	0.572943842425576	WITHOUT_CLASSIFICATION	0.4270561575744239	DESIGN
worrying about proxies is perhaps a little bit of overkill here...	DESIGN	0.953902180992106	DESIGN	0.04609781900789403	WITHOUT_CLASSIFICATION
NOTE VERY HACKISH WORKAROUND!! TODO: Fix this so it will work for non-POJO entity mode	DESIGN	0.9999999999999172	DESIGN	8.28576798558604E-14	WITHOUT_CLASSIFICATION
TODO: Fix this so it will work for non-POJO entity mode	DESIGN	0.9999992357940529	DESIGN	7.642059471705904E-7	WITHOUT_CLASSIFICATION
We would probably refactor to have LogicParser (builds a tree of simple expressions connected by and, or, not), ExpressionParser (translates from OO terms like foo, foo.Bar, foo.Bar.Baz to SQL terms like FOOS.ID, FOOS.BAR_ID, etc) and PathExpressionParser (which does much the same thing it does now)	DESIGN	0.9994822304325378	WITHOUT_CLASSIFICATION	5.1776956746222E-4	DESIGN
TODO: this is a little inefficient, don't need to do a whole deep replaceElements() call	DESIGN	0.9999990833097601	DESIGN	9.166902399661901E-7	WITHOUT_CLASSIFICATION
workaround for WebLogic	DESIGN	0.9687849008328646	DESIGN	0.03121509916713537	WITHOUT_CLASSIFICATION
TODO: this dependency is kinda Bad	DESIGN	0.9999715452763418	DESIGN	2.8454723658268816E-5	WITHOUT_CLASSIFICATION
ick!	DESIGN	0.9999134509234102	WITHOUT_CLASSIFICATION	8.654907658987562E-5	DESIGN
short cut check...	DESIGN	0.9960695252460432	WITHOUT_CLASSIFICATION	0.0039304747539568256	DESIGN
todo : move to StringHelper?	DESIGN	0.8898169367613827	WITHOUT_CLASSIFICATION	0.11018306323861726	DESIGN
yukky! Don't you have subclasses for that! TODO race conditions can happen here	DESIGN	0.9995502461527768	DESIGN	4.497538472232272E-4	WITHOUT_CLASSIFICATION
TODO: We probably should have a StatisticsNotPublishedException, to make it clean	DESIGN	0.9978029353361582	DESIGN	0.0021970646638418048	WITHOUT_CLASSIFICATION
FIXME hack to work around fact that calling Node added = root.addChild( fqn ); doesn't properly set the version on the node	DESIGN	0.9999999973159385	DESIGN	2.684061611580936E-9	WITHOUT_CLASSIFICATION
TODO: I considered validating the presence of the TS cache here, but decided to defer unti getQueryCacheInstance() in case the cache is never actually used	DESIGN	0.9994407987464977	DESIGN	5.592012535023892E-4	WITHOUT_CLASSIFICATION
need to do that here rather than in the save event listener to let the post insert events to have a id-filled entity when IDENTITY is used (EJB3)	DESIGN	0.594423080995904	DESIGN	0.40557691900409615	WITHOUT_CLASSIFICATION
TODO: simply remove this override if we fix the above todos	DESIGN	0.7662543106756645	DESIGN	0.23374568932433543	WITHOUT_CLASSIFICATION
This, is used by SessionFactoryImpl to hand to the generated SessionImpl; was the only reason I could see that we cannot just use null as Settings.cacheProvider	DESIGN	0.79453865491224	DESIGN	0.20546134508775996	WITHOUT_CLASSIFICATION
this is done here 'cos we might only know the type here (ugly!) TODO: improve this a lot:	DESIGN	0.9999999797193009	DESIGN	2.0280699102272632E-8	WITHOUT_CLASSIFICATION
todo : would love to have this work on a notification basis where the successful binding of an entity/subclass would emit a notification which the extendsQueue entries could react to...	DESIGN	0.9489238841382458	WITHOUT_CLASSIFICATION	0.051076115861754076	DESIGN
TODO : not sure the best way to handle this. The non-performant way :	DESIGN	0.9997593048771245	DESIGN	2.406951228755889E-4	WITHOUT_CLASSIFICATION
would be better to use the element-type to determine whether the old and the new are equal here; the problem being we do not necessarily have access to the element type in all cases	DESIGN	0.9991425425610692	WITHOUT_CLASSIFICATION	8.574574389307171E-4	DESIGN
This next bit is to allow for both unsaved-value="negative" and for "older" behavior where version number did not get seeded if it was already set in the object TODO: shift it into unsaved-value strategy	DESIGN	0.9999951495713327	DESIGN	4.850428667251754E-6	WITHOUT_CLASSIFICATION
merges don't cascade to uninitialized collections TODO: perhaps this does need to cascade after all....	DESIGN	0.999935492096874	DESIGN	6.450790312594648E-5	WITHOUT_CLASSIFICATION
TODO: an alternative is to check if the owner has changed; if it hasn't then return collection.getOwner()	DESIGN	0.9844006687006029	WITHOUT_CLASSIFICATION	0.015599331299397008	DESIGN
it is possible that the tree-walking in OuterJoinLoader can get to an association defined by a subclass, in which case the property-ref might refer to a property defined on a subclass of the current class in this case, the table name is not known - this temporary solution assumes that the property-ref refers to a property of the subclass table that the association belongs to (a reasonable guess) TODO: fix this, add: OuterJoinLoadable.getSubclassPropertyTableName(String propertyName)	DESIGN	0.9999999984816859	DESIGN	1.518314189096378E-9	WITHOUT_CLASSIFICATION
this only works because collection entries are kept in a sequenced map by persistence context (maybe we should do like entities and keep a separate sequences set...) TODO: calling entrySet on an IdentityMap is SLOW!!	DESIGN	0.9999996577259773	DESIGN	3.422740226596668E-7	WITHOUT_CLASSIFICATION
important, to account for newly saved entities in query todo : some kind of check for new status...	DESIGN	0.9619631990571331	WITHOUT_CLASSIFICATION	0.03803680094286692	DESIGN
brand new collection TODO: or an array!! we can't lock objects with arrays now??	DESIGN	0.9716182875198777	DESIGN	0.028381712480122265	WITHOUT_CLASSIFICATION
TODO: if object was an uninitialized proxy, this is inefficient, resulting in two SQL selects	DESIGN	0.9137979406214706	DESIGN	0.08620205937852936	WITHOUT_CLASSIFICATION
before cascade! TODO: should this be Session.instantiate(Persister, ...)?	DESIGN	0.9976853831060171	DESIGN	0.0023146168939828476	WITHOUT_CLASSIFICATION
TODO : absolutely no usages of this constructor form; can it go away?	DESIGN	0.9999676638993635	DESIGN	3.233610063653297E-5	WITHOUT_CLASSIFICATION
todo : need to find a clean way to handle the "event source" role a seperate classs responsible for generating/dispatching events just duplicates most of the Session methods... passing around seperate reto interceptor, factory, actionQueue, and persistentContext is not manageable...	DESIGN	0.9892931710899262	DESIGN	0.010706828910073778	WITHOUT_CLASSIFICATION
todo : remove	DESIGN	0.9800247005680611	WITHOUT_CLASSIFICATION	0.01997529943193892	DESIGN
aliasRefNode.resolve( false, false, aliasRefNode.getText() ); TODO: is it kosher to do it here? TODO: is it kosher to do it here?	DESIGN	0.9751623148745496	DESIGN	0.024837685125450287	WITHOUT_CLASSIFICATION
No explicit select expression; render the id and properties projection lists for every persister in the from clause into a single 'token node'. TODO: the only reason we need this stuff now is collection filters, we should get rid of derived select clause completely!	DESIGN	0.9999999358402774	DESIGN	6.415972269402744E-8	WITHOUT_CLASSIFICATION
TODO : an optimization here would be to consider cascade deletes and not gen those delete statements; the difficulty is the ordering of the tables here vs the cascade attributes on the persisters -> the table info gotten here should really be self-contained (i.e., a class representation defining all the needed attributes), then we could then get an array of those	DESIGN	0.9999326621040064	DESIGN	6.733789599353854E-5	WITHOUT_CLASSIFICATION
TODO: get SQL rendering out of here, create an AST for the join expressions. Use the SQL generator grammar to generate the SQL text for the index expression.	DESIGN	0.9627077672175526	WITHOUT_CLASSIFICATION	0.03729223278244745	DESIGN
TODO : this really needs to be delayed unitl after we definitively know all node types where this is currently a problem is parameters for which where we cannot unequivocally resolve an expected type	DESIGN	0.999947958290387	DESIGN	5.204170961316102E-5	WITHOUT_CLASSIFICATION
TODO: Figure out a better way to get the FROM elements in a proper tree structure. If this is not the destination of a many-to-many, add it as a child of the origin.	DESIGN	0.8950660458374037	WITHOUT_CLASSIFICATION	0.1049339541625964	DESIGN
work around that crazy issue where the tree contains "empty" FromElements (no text); afaict, this is caused by FromElementFactory.createCollectionJoin()	DESIGN	0.5238221120651948	WITHOUT_CLASSIFICATION	0.47617788793480514	DESIGN
TODO: this class does too many things! we need a different kind of path expression parser for each of the diffferent ways in which path expressions can occur	DESIGN	0.9999755775749463	DESIGN	2.4422425053779955E-5	WITHOUT_CLASSIFICATION
real hacky... used to count the nesting of parentheses	DESIGN	0.9999839994808222	DESIGN	1.600051917784747E-5	WITHOUT_CLASSIFICATION
TODO : would be really nice to cache the spec on the query-def so as to not have to re-calc the hash; currently not doable though because of the resultset-ref stuff...	DESIGN	0.9461673447279184	DESIGN	0.05383265527208159	WITHOUT_CLASSIFICATION
for arrays, we should end the collection load before resolving the entities, since the actual array instances are not instantiated during loading TODO: or we could do this polymorphically, and have two different operations implemented differently for arrays	DESIGN	0.999999714196255	DESIGN	2.8580374507999804E-7	WITHOUT_CLASSIFICATION
polymorphism not really handled completely correctly, perhaps...well, actually its ok, assuming that the entity name used in the lookup is the same as the the one used here, which it will be	DESIGN	0.6683305383714593	DESIGN	0.3316694616285407	WITHOUT_CLASSIFICATION
TODO: should "record" how many properties we have reffered to - and if we don't get'em'all we throw an exception! Way better than trial and error ;)	DESIGN	0.9670139983714657	DESIGN	0.032986001628534316	WITHOUT_CLASSIFICATION
VERY IMPORTANT!!!! - This class needs to be free of any static references to any CGLIB or Javassist classes. Otherwise, users will always need both on their classpaths no matter which (if either) they use. Another option here would be to remove the Hibernate.isPropertyInitialized() method and have the users go through the SessionFactory to get this information.	DESIGN	0.9999999244567441	WITHOUT_CLASSIFICATION	7.554325586152493E-8	DESIGN
TODO: is it really neceassry to provide Configuration to CollectionPersisters ? Should it not be enough with associated class ? or why does EntityPersister's not get access to configuration ? The only reason I could see that Configuration gets passed to collection persisters is so that they can look up the dom4j node name of the entity element in case no explicit node name was applied at the collection element level. Are you kidding me? Trivial to fix then. Just store and expose the node name on the entity persister (which the collection persister looks up anyway via other means...).	DESIGN	0.999998977256949	DESIGN	1.0227430510821183E-6	WITHOUT_CLASSIFICATION
for backward compatibility, allow a set with no not-null element columns, using all columns in the row locater SQL TODO: create an implicit not null constraint on all cols?	DESIGN	0.9167164444669428	DESIGN	0.08328355553305722	WITHOUT_CLASSIFICATION
SPACES TODO: i'm not sure, but perhaps we should exclude abstract denormalized tables?	DESIGN	0.9999970989319449	DESIGN	2.9010680551959512E-6	WITHOUT_CLASSIFICATION
workaround, for backward compatibility of sets with no not-null columns, assume all columns are used in the row locator SQL	DESIGN	0.9868384269714767	WITHOUT_CLASSIFICATION	0.01316157302852339	DESIGN
note that this method could easily be moved up to BasicEntityPersister, if we ever needed to reuse it from other subclasses	DESIGN	0.9967418283288323	DESIGN	0.003258171671167641	WITHOUT_CLASSIFICATION
index += getPropertyColumnSpan( i ); TODO: this is kinda slow...	DESIGN	0.9966144265751378	DESIGN	0.003385573424862254	WITHOUT_CLASSIFICATION
TODO: need some caching scheme? really comes down to decision regarding amount of state (if any) kept on PropertyAccessors	DESIGN	0.9979784530030487	DESIGN	0.002021546996951405	WITHOUT_CLASSIFICATION
TODO: here is why we need to make bytecode provider global :( TODO : again, fix this after HHH-1907 is complete	DESIGN	0.9999999998901251	DESIGN	1.0987486722144441E-10	WITHOUT_CLASSIFICATION
TODO: Yuck! This is not quite good enough, it's a quick hack around the problem of having a to-one association that refers to an embedded component:	DESIGN	0.9999999999999667	DESIGN	3.3375368092593514E-14	WITHOUT_CLASSIFICATION
for DOM4J "collections" only TODO: it would be better if this was done at the higher level by Printer	DESIGN	0.998510909929647	DESIGN	0.0014890900703529995	WITHOUT_CLASSIFICATION
would be great to move all this below here into another method that could also be used from the new scrolling stuff. Would need to change the way the max-row stuff is handled (i.e. behind an interface) so that I could do the control breaking at the means to know when to stop	DESIGN	0.9999999934993986	DESIGN	6.5006014642670575E-9	WITHOUT_CLASSIFICATION
TODO: can we always use the "null property" approach for everything?	DESIGN	0.9972781748426004	DESIGN	0.002721825157399654	WITHOUT_CLASSIFICATION
polymorphism comment above	DESIGN	0.999995239253579	WITHOUT_CLASSIFICATION	4.7607464209674694E-6	DESIGN
some messy, complex stuff here, since createCriteria() can take an aliased path, or a path rooted at the creating criteria instance	DESIGN	0.9999999777399401	WITHOUT_CLASSIFICATION	2.2260059922946863E-8	DESIGN
TODO: really bad, evil hack to fix!!!	DESIGN	0.9999999999844794	DESIGN	1.5520562080531367E-11	WITHOUT_CLASSIFICATION
ugly hack for cases like "elements(foo.bar.collection)" (multi-part path expression ending in elements or indices)	DESIGN	0.9990211579253157	DESIGN	9.788420746843598E-4	WITHOUT_CLASSIFICATION
try block is a hack around fact that currently tuplizers are not given the opportunity to resolve a subclass entity name. this allows the (we assume custom) interceptor the ability to influence this decision if we were not able to based on the given entityName	DESIGN	0.9999999604282168	DESIGN	3.957178327692428E-8	WITHOUT_CLASSIFICATION
/ HACK ALERT !!!!!!!!!!!!!!!!!!!!!!!!!!!! Attempt to work around "ghost" ImpliedFromElements that occasionally show up between the actual things being joined. This consistently occurs from index nodes (at least against many-to-many). Not sure if there are other conditions Essentially, look-ahead to the next FromElement that actually writes something to the SQL	DESIGN	0.9999394791407076	DESIGN	6.0520859292443193E-5	WITHOUT_CLASSIFICATION
init the table here instead of earlier, so that we can get a quoted table name TODO: would it be better to simply pass the qualified table name, instead of splitting it up into schema/catalog/table names	DESIGN	0.9999935168742723	DESIGN	6.4831257276979895E-6	WITHOUT_CLASSIFICATION
TODO : would be great to have a Mapping#hasNonIdentifierPropertyNamedId method I don't believe that Mapping#getReferencedPropertyType accounts for the identifier property; so if it returns for a property named 'id', then we should have a non-id field named id	DESIGN	0.8219132385590422	DESIGN	0.17808676144095792	WITHOUT_CLASSIFICATION
TODO: is this really necessary????	DESIGN	0.9995619718030075	DESIGN	4.380281969925682E-4	WITHOUT_CLASSIFICATION
TODO: ideally we need the construction of PropertyAccessor to take the following: 1) EntityMode 2) EntityMode-specific data (i.e., the classname for pojo entities) 3) Property-specific data based on the EntityMode (i.e., property-name or dom4j-node-name) The easiest way, with the introduction of the new runtime-metamodel classes, would be the the following predicates: 1) PropertyAccessorFactory.getPropertyAccessor() takes references to both a org.hibernate.metadata.EntityModeMetadata and org.hibernate.metadata.Property 2) What is now termed a "PropertyAccessor" stores any values needed from those two pieces of information 3) Code can then simply call PropertyAccess.getGetter() with no parameters; likewise with PropertyAccessor.getSetter()	DESIGN	0.8162643710622429	DESIGN	0.18373562893775708	WITHOUT_CLASSIFICATION
TODO: this is temporary in that the end result will probably not take a Property reference per-se.	DESIGN	0.9999826272133916	DESIGN	1.7372786608435986E-5	WITHOUT_CLASSIFICATION
todo : this eventually needs to be removed	DESIGN	0.9142130061660366	WITHOUT_CLASSIFICATION	0.08578699383396339	DESIGN
TODO: make this a bit nicer	DESIGN	0.999252114475873	DESIGN	7.478855241269332E-4	WITHOUT_CLASSIFICATION
todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.992993752630548	DESIGN	0.007006247369451998	WITHOUT_CLASSIFICATION
todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.992993752630548	DESIGN	0.007006247369451998	WITHOUT_CLASSIFICATION
todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.992993752630548	DESIGN	0.007006247369451998	WITHOUT_CLASSIFICATION
todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.992993752630548	DESIGN	0.007006247369451998	WITHOUT_CLASSIFICATION
todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.992993752630548	DESIGN	0.007006247369451998	WITHOUT_CLASSIFICATION
todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.992993752630548	DESIGN	0.007006247369451998	WITHOUT_CLASSIFICATION
todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.992993752630548	DESIGN	0.007006247369451998	WITHOUT_CLASSIFICATION
todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.992993752630548	DESIGN	0.007006247369451998	WITHOUT_CLASSIFICATION
FIXME Per the RegionFactory class Javadoc, this constructor version should not be necessary. @param props The configuration properties	DESIGN	0.999294215323979	DESIGN	7.057846760209786E-4	WITHOUT_CLASSIFICATION
FIXME Per the RegionFactory class Javadoc, this constructor version should not be necessary. @param props The configuration properties	DESIGN	0.999294215323979	DESIGN	7.057846760209786E-4	WITHOUT_CLASSIFICATION
FIXME Per the RegionFactory class Javadoc, this constructor version should not be necessary. @param props The configuration properties	DESIGN	0.999294215323979	DESIGN	7.057846760209786E-4	WITHOUT_CLASSIFICATION
TODO : probably better to calculate these and pass them in, as it'll be more performant	DESIGN	0.999998922669176	DESIGN	1.0773308240743765E-6	WITHOUT_CLASSIFICATION
