test out the optimizer:	WITHOUT_CLASSIFICATION	0.9999999850052576	WITHOUT_CLASSIFICATION	1.4994742491191832E-8	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9997757545566439	WITHOUT_CLASSIFICATION	2.2424544335597322E-4	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9997757545566439	WITHOUT_CLASSIFICATION	2.2424544335597322E-4	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9997757545566439	WITHOUT_CLASSIFICATION	2.2424544335597322E-4	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9997757545566439	WITHOUT_CLASSIFICATION	2.2424544335597322E-4	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9997757545566439	WITHOUT_CLASSIFICATION	2.2424544335597322E-4	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9997757545566439	WITHOUT_CLASSIFICATION	2.2424544335597322E-4	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9997757545566439	WITHOUT_CLASSIFICATION	2.2424544335597322E-4	DESIGN
return	WITHOUT_CLASSIFICATION	0.9995519189395363	WITHOUT_CLASSIFICATION	4.480810604637368E-4	DESIGN
return	WITHOUT_CLASSIFICATION	0.9995519189395363	WITHOUT_CLASSIFICATION	4.480810604637368E-4	DESIGN
| this | bean | args | raw bean |	WITHOUT_CLASSIFICATION	0.9996492381437815	WITHOUT_CLASSIFICATION	3.5076185621853146E-4	DESIGN
invokeinterface	WITHOUT_CLASSIFICATION	0.9999894556765463	WITHOUT_CLASSIFICATION	1.0544323453813034E-5	DESIGN
astore 4 store the raw bean	WITHOUT_CLASSIFICATION	0.99999780763458	WITHOUT_CLASSIFICATION	2.192365420048388E-6	DESIGN
current stack len = 0	WITHOUT_CLASSIFICATION	0.999996090134023	WITHOUT_CLASSIFICATION	3.909865977015491E-6	DESIGN
current stack len = 0	WITHOUT_CLASSIFICATION	0.999996090134023	WITHOUT_CLASSIFICATION	3.909865977015491E-6	DESIGN
local variables | target obj | each oldvalue |	WITHOUT_CLASSIFICATION	0.9999480367120493	WITHOUT_CLASSIFICATION	5.1963287950676314E-5	DESIGN
invokeinterface invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999866770776301	WITHOUT_CLASSIFICATION	1.3322922369925098E-5	DESIGN
putfield new value of the field	WITHOUT_CLASSIFICATION	0.9999991199402208	WITHOUT_CLASSIFICATION	8.800597790217282E-7	DESIGN
reference type	WITHOUT_CLASSIFICATION	0.9999725036381598	WITHOUT_CLASSIFICATION	2.749636184018593E-5	DESIGN
double	WITHOUT_CLASSIFICATION	0.9999836547166276	WITHOUT_CLASSIFICATION	1.6345283372310192E-5	DESIGN
double	WITHOUT_CLASSIFICATION	0.9999836547166276	WITHOUT_CLASSIFICATION	1.6345283372310192E-5	DESIGN
long	WITHOUT_CLASSIFICATION	0.9996110155255835	WITHOUT_CLASSIFICATION	3.889844744165279E-4	DESIGN
just decrement the lock, don't recache (we don't know which transaction won)	WITHOUT_CLASSIFICATION	0.9999459797322098	WITHOUT_CLASSIFICATION	5.4020267790188036E-5	DESIGN
decode row selection...	WITHOUT_CLASSIFICATION	0.9999320060072607	WITHOUT_CLASSIFICATION	6.799399273923248E-5	DESIGN
disassembled state gets put in a new array (we write to cache by value!)	WITHOUT_CLASSIFICATION	0.9999999056696376	WITHOUT_CLASSIFICATION	9.433036241949036E-8	DESIGN
again, CCS did not have such a concept; but a reasonable proximity is to clear the cache after transaction as long as the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999999987164662	WITHOUT_CLASSIFICATION	1.283533745242869E-9	DESIGN
CHECK	WITHOUT_CLASSIFICATION	0.9989469213248738	WITHOUT_CLASSIFICATION	0.0010530786751261185	DESIGN
ROW ID	WITHOUT_CLASSIFICATION	0.99988745370063	WITHOUT_CLASSIFICATION	1.1254629936993894E-4	DESIGN
COMPOSITE-ID	WITHOUT_CLASSIFICATION	0.9997699551651587	WITHOUT_CLASSIFICATION	2.3004483484132898E-4	DESIGN
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9996886413361734	WITHOUT_CLASSIFICATION	3.113586638265294E-4	DESIGN
Property prop = new Property(); prop.setName("id"); prop.setPropertyAccessorName("embedded"); prop.setValue(id); entity.setIdentifierProperty(prop);	WITHOUT_CLASSIFICATION	0.9999996222775192	WITHOUT_CLASSIFICATION	3.777224808943625E-7	DESIGN
DYNAMIC INSERT	WITHOUT_CLASSIFICATION	0.9999747817361163	WITHOUT_CLASSIFICATION	2.521826388363598E-5	DESIGN
PERSISTER	WITHOUT_CLASSIFICATION	0.9996070013721031	WITHOUT_CLASSIFICATION	3.9299862789695517E-4	DESIGN
get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.999995359486162	WITHOUT_CLASSIFICATION	4.6405138379643495E-6	DESIGN
PROPERTIES	WITHOUT_CLASSIFICATION	0.999622824275074	WITHOUT_CLASSIFICATION	3.7717572492607836E-4	DESIGN
PROPERTIES	WITHOUT_CLASSIFICATION	0.999622824275074	WITHOUT_CLASSIFICATION	3.7717572492607836E-4	DESIGN
generated properties can never be insertable...	WITHOUT_CLASSIFICATION	0.9999995113976777	WITHOUT_CLASSIFICATION	4.886023222874973E-7	DESIGN
TABLE	WITHOUT_CLASSIFICATION	0.9993716738316243	WITHOUT_CLASSIFICATION	6.28326168375695E-4	DESIGN
by default, natural-ids are "immutable" (constant)	WITHOUT_CLASSIFICATION	0.999982400753828	WITHOUT_CLASSIFICATION	1.7599246171904403E-5	DESIGN
( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9998849605792761	WITHOUT_CLASSIFICATION	1.1503942072391077E-4	DESIGN
we found some extends attributes referencing entities which were not already processed. here we need to locate all entity-names and class-names contained in this document itself, making sure that these get removed from the extendz list such that only extends names which require us to delay processing (i.e. external to this document and not yet processed) are contained in the returned result	WITHOUT_CLASSIFICATION	0.977094156178108	WITHOUT_CLASSIFICATION	0.022905843821891973	DESIGN
Build a ResultSetMappingDefinition given a containing element for the "return-XXX" elements @param resultSetElem The element containing the return definitions. @param path No clue... @param mappings The current processing state. @return The description of the mappings...	WITHOUT_CLASSIFICATION	0.9999182062570723	WITHOUT_CLASSIFICATION	8.17937429277221E-5	DESIGN
private boolean showSql; private boolean formatSql;	WITHOUT_CLASSIFICATION	0.9999910473458276	WITHOUT_CLASSIFICATION	8.952654172425272E-6	DESIGN
public boolean isShowSqlEnabled() { return showSql; } public boolean isFormatSqlEnabled() { return formatSql; }	WITHOUT_CLASSIFICATION	0.9999966477832744	WITHOUT_CLASSIFICATION	3.3522167256899857E-6	DESIGN
Set a custom entity resolver. This entity resolver must be set before addXXX(misc) call. Default value is {@link org.hibernate.util.DTDEntityResolver} @param entityResolver entity resolver to use	WITHOUT_CLASSIFICATION	0.9999993006987431	WITHOUT_CLASSIFICATION	6.99301256884437E-7	DESIGN
final List extendsQueue,	WITHOUT_CLASSIFICATION	0.9999955967228136	WITHOUT_CLASSIFICATION	4.403277186398218E-6	DESIGN
If close() is called, guarantee unbind()	WITHOUT_CLASSIFICATION	0.9999967247378487	WITHOUT_CLASSIFICATION	3.2752621512436844E-6	DESIGN
if a ThreadLocalSessionContext-bound session happens to get serialized, to be completely correct, we need to make sure that unbinding of that session occurs.	WITHOUT_CLASSIFICATION	0.9958084640156047	WITHOUT_CLASSIFICATION	0.00419153598439526	DESIGN
on the inverse, it makes sense that if a ThreadLocalSessionContext- bound session then gets deserialized to go ahead and re-bind it to the ThreadLocalSessionContext session map.	WITHOUT_CLASSIFICATION	0.957169396420696	WITHOUT_CLASSIFICATION	0.04283060357930402	DESIGN
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999619778376766	WITHOUT_CLASSIFICATION	3.802216232328926E-5	DESIGN
60 second lock timeout	WITHOUT_CLASSIFICATION	0.9999749426068923	WITHOUT_CLASSIFICATION	2.5057393107586014E-5	DESIGN
OptimisticCache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999667784773151	WITHOUT_CLASSIFICATION	3.322152268479316E-5	DESIGN
Cache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999298761040218	WITHOUT_CLASSIFICATION	7.012389597811048E-5	DESIGN
option.setDataVersion( NonLockingDataVersion.INSTANCE );	WITHOUT_CLASSIFICATION	0.9999995158772225	WITHOUT_CLASSIFICATION	4.841227775737002E-7	DESIGN
do the put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999862493922472	WITHOUT_CLASSIFICATION	1.3750607752700967E-5	DESIGN
ignore!	WITHOUT_CLASSIFICATION	0.9999913788393059	WITHOUT_CLASSIFICATION	8.621160694090278E-6	DESIGN
tree cache in optimistic mode seems to have as very difficult time with remove calls on non-existent nodes (NPEs)...	WITHOUT_CLASSIFICATION	0.9999192240043048	WITHOUT_CLASSIFICATION	8.077599569524783E-5	DESIGN
60 seconds	WITHOUT_CLASSIFICATION	0.9999799220894067	WITHOUT_CLASSIFICATION	2.0077910593288135E-5	DESIGN
ignore!	WITHOUT_CLASSIFICATION	0.9999913788393059	WITHOUT_CLASSIFICATION	8.621160694090278E-6	DESIGN
60 seconds	WITHOUT_CLASSIFICATION	0.9999799220894067	WITHOUT_CLASSIFICATION	2.0077910593288135E-5	DESIGN
do the failfast put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999991225984197	WITHOUT_CLASSIFICATION	8.774015802187301E-7	DESIGN
NOTE : evict() operates locally only (i.e., does not propogate to any other nodes in the potential cluster). This is exactly what is needed when we destroy() here; destroy() is used as part of the process of shutting down a SessionFactory; thus these removals should not be propogated	WITHOUT_CLASSIFICATION	0.9310863703196574	DESIGN	0.06891362968034266	WITHOUT_CLASSIFICATION
protected RegionRootListener listener;	WITHOUT_CLASSIFICATION	0.9999695877232255	WITHOUT_CLASSIFICATION	3.0412276774490265E-5	DESIGN
Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999360785873174	WITHOUT_CLASSIFICATION	6.392141268267415E-5	DESIGN
If we've been blocking for the mutex, perhaps another thread has already reestablished the root. In case the node was reestablised via replication, confirm it's marked "resident" (a status which doesn't replicate)	WITHOUT_CLASSIFICATION	0.9999196382490991	WITHOUT_CLASSIFICATION	8.036175090091339E-5	DESIGN
For pessimistic locking, we just want to toss out our ref to any old invalid root node and get the latest (may be null)	WITHOUT_CLASSIFICATION	0.9999920393938825	WITHOUT_CLASSIFICATION	7.960606117589531E-6	DESIGN
The rest only matters for optimistic locking, where we need to establish the proper data version on the region root	WITHOUT_CLASSIFICATION	0.9973044628984145	WITHOUT_CLASSIFICATION	0.0026955371015856583	DESIGN
Don't hold a transactional lock for this	WITHOUT_CLASSIFICATION	0.8050040412817877	WITHOUT_CLASSIFICATION	0.1949959587182122	DESIGN
Make sure the root node for the region exists and has a DataVersion that never complains	WITHOUT_CLASSIFICATION	0.9998303813490252	WITHOUT_CLASSIFICATION	1.6961865097464356E-4	DESIGN
Never evict this node	WITHOUT_CLASSIFICATION	0.9999933657754071	WITHOUT_CLASSIFICATION	6.634224592956062E-6	DESIGN
Fix up the resident flag	WITHOUT_CLASSIFICATION	0.999998301326573	WITHOUT_CLASSIFICATION	1.698673427063617E-6	DESIGN
60 seconds	WITHOUT_CLASSIFICATION	0.9999799220894067	WITHOUT_CLASSIFICATION	2.0077910593288135E-5	DESIGN
We ignore minimalPutOverride. JBossCache putForExternalRead is already about as minimal as we can get; it will promptly return if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999881283288307	WITHOUT_CLASSIFICATION	1.1871671169287027E-5	DESIGN
no-op. We don't own the cache so we shouldn't stop it.	WITHOUT_CLASSIFICATION	0.999992989018248	WITHOUT_CLASSIFICATION	7.0109817519910115E-6	DESIGN
This should only be possible if the caches are constructor injected	WITHOUT_CLASSIFICATION	0.9998044756808889	WITHOUT_CLASSIFICATION	1.9552431911104695E-4	DESIGN
We only build caches if none were passed in. Passing in caches counts as a clear statement of exactly what is wanted	WITHOUT_CLASSIFICATION	0.9999988410761768	WITHOUT_CLASSIFICATION	1.1589238232439975E-6	DESIGN
Set up the cache factory	WITHOUT_CLASSIFICATION	0.999999075765632	WITHOUT_CLASSIFICATION	9.242343680471675E-7	DESIGN
See if the user configured a multiplexer stack	WITHOUT_CLASSIFICATION	0.9997071629692555	WITHOUT_CLASSIFICATION	2.928370307444872E-4	DESIGN
Default to collections sharing entity cache if there is one	WITHOUT_CLASSIFICATION	0.9973915892112634	WITHOUT_CLASSIFICATION	0.002608410788736579	DESIGN
Default to sharing the entity cache if there is one	WITHOUT_CLASSIFICATION	0.9998394226460007	WITHOUT_CLASSIFICATION	1.605773539993586E-4	DESIGN
For Timestamps, we default to a separate config	WITHOUT_CLASSIFICATION	0.9962065982400505	WITHOUT_CLASSIFICATION	0.003793401759949404	DESIGN
We can't change the TM on a running cache; just check if the cache has no TM and we're OK with that	WITHOUT_CLASSIFICATION	0.9999999020971254	WITHOUT_CLASSIFICATION	9.790287463526004E-8	DESIGN
Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999675929006965	WITHOUT_CLASSIFICATION	3.240709930351304E-5	DESIGN
Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999917731491811	WITHOUT_CLASSIFICATION	8.226850819003665E-6	DESIGN
This method should be implemented assuming it's valid to do start/stop/start -- leave state appropriate for another start	WITHOUT_CLASSIFICATION	0.9990456461667406	WITHOUT_CLASSIFICATION	9.543538332593884E-4	DESIGN
Make sure we don't re-release the same cache	WITHOUT_CLASSIFICATION	0.9999602415907892	WITHOUT_CLASSIFICATION	3.975840921077613E-5	DESIGN
We use a different delegate than the non-optimistic superclass default	WITHOUT_CLASSIFICATION	0.999982398305503	WITHOUT_CLASSIFICATION	1.760169449698704E-5	DESIGN
Following methods we don't delegate since they have so little logic it's clearer to just implement them here	WITHOUT_CLASSIFICATION	0.9926316606279463	WITHOUT_CLASSIFICATION	0.007368339372053654	DESIGN
If JBC is using INVALIDATION, we don't want to propagate changes. We use the Timestamps cache to manage invalidation	WITHOUT_CLASSIFICATION	0.9999255570587606	WITHOUT_CLASSIFICATION	7.444294123941955E-5	DESIGN
We don't want to waste effort setting an option if JBC is already in LOCAL mode. If JBC is REPL_(A)SYNC then check if they passed an config option to disable query replication	WITHOUT_CLASSIFICATION	0.9961666632269243	WITHOUT_CLASSIFICATION	0.0038333367730757567	DESIGN
Don't hold the JBC node lock throughout the tx, as that prevents updates Add a zero (or low) timeout option so we don't block waiting for tx's that did a put to commit	WITHOUT_CLASSIFICATION	0.9999982522816162	WITHOUT_CLASSIFICATION	1.7477183838811875E-6	DESIGN
Double check the distributed cache	WITHOUT_CLASSIFICATION	0.9999999548097219	WITHOUT_CLASSIFICATION	4.519027811690501E-8	DESIGN
Get an exclusive right to update JBC for this key from this node.	WITHOUT_CLASSIFICATION	0.9999120957028006	WITHOUT_CLASSIFICATION	8.790429719946498E-5	DESIGN
We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9987677085067099	WITHOUT_CLASSIFICATION	0.001232291493290076	DESIGN
Initial load from JBC	WITHOUT_CLASSIFICATION	0.9999793113726614	WITHOUT_CLASSIFICATION	2.0688627338626728E-5	DESIGN
See if we had a 2nd invalidation from the same initial preinvalidation timestamp. If so, only increment if the new current value is an increase	WITHOUT_CLASSIFICATION	0.9999970586107317	WITHOUT_CLASSIFICATION	2.9413892683395534E-6	DESIGN
We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9987677085067099	WITHOUT_CLASSIFICATION	0.001232291493290076	DESIGN
If the workspace node has null as well, OK; if not we've been modified in a non-comparable manner, which we have to treat as us being newer	WITHOUT_CLASSIFICATION	0.9997399928902794	WITHOUT_CLASSIFICATION	2.600071097206279E-4	DESIGN
The standard comparator types are not Serializable but are singletons	WITHOUT_CLASSIFICATION	0.9999490694257358	WITHOUT_CLASSIFICATION	5.0930574264311304E-5	DESIGN
ignore!	WITHOUT_CLASSIFICATION	0.9999913788393059	WITHOUT_CLASSIFICATION	8.621160694090278E-6	DESIGN
ignore it	WITHOUT_CLASSIFICATION	0.9999996130065743	WITHOUT_CLASSIFICATION	3.8699342574370153E-7	DESIGN
construct the cache	WITHOUT_CLASSIFICATION	0.9999997449786809	WITHOUT_CLASSIFICATION	2.550213191508808E-7	DESIGN
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999524307179368	WITHOUT_CLASSIFICATION	4.7569282063155586E-5	DESIGN
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999524307179368	WITHOUT_CLASSIFICATION	4.7569282063155586E-5	DESIGN
ie. 60 seconds	WITHOUT_CLASSIFICATION	0.999994092514553	WITHOUT_CLASSIFICATION	5.9074854469882525E-6	DESIGN
swaldman 2006-08-28: define c3p0-style configuration parameters for initialPoolSize, which hibernate sensibly lets default to minPoolSize, but we'll let users override it with the c3p0-style property if they want.	WITHOUT_CLASSIFICATION	0.9402806844604328	WITHOUT_CLASSIFICATION	0.05971931553956727	DESIGN
DataSource unpooled = DataSources.unpooledDataSource(jdbcUrl, props.getProperty(Environment.USER), props.getProperty(Environment.PASS));	WITHOUT_CLASSIFICATION	0.9999999869028243	WITHOUT_CLASSIFICATION	1.3097175749204264E-8	DESIGN
TRUE if the pool is borrowed from the outside, FALSE if we used to create it	WITHOUT_CLASSIFICATION	0.999999916763417	WITHOUT_CLASSIFICATION	8.323658287024787E-8	DESIGN
get a connection from the pool (thru DriverManager, cfr. Proxool doc)	WITHOUT_CLASSIFICATION	0.9999927673306611	WITHOUT_CLASSIFICATION	7.232669338975703E-6	DESIGN
set the Transaction Isolation if defined	WITHOUT_CLASSIFICATION	0.9997880553784178	WITHOUT_CLASSIFICATION	2.119446215822617E-4	DESIGN
toggle autoCommit to false if set	WITHOUT_CLASSIFICATION	0.999956720552888	WITHOUT_CLASSIFICATION	4.327944711194033E-5	DESIGN
return the connection	WITHOUT_CLASSIFICATION	0.9999703964915077	WITHOUT_CLASSIFICATION	2.960350849231115E-5	DESIGN
Get the configurator files (if available)	WITHOUT_CLASSIFICATION	0.9999951093787262	WITHOUT_CLASSIFICATION	4.890621273809761E-6	DESIGN
Default the Proxool alias setting	WITHOUT_CLASSIFICATION	0.9999888897795308	WITHOUT_CLASSIFICATION	1.1110220469294022E-5	DESIGN
Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.998185496717156	WITHOUT_CLASSIFICATION	0.0018145032828440018	DESIGN
Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.998185496717156	WITHOUT_CLASSIFICATION	0.0018145032828440018	DESIGN
Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999847557753513	WITHOUT_CLASSIFICATION	1.524422464864477E-5	DESIGN
Set the existing pool flag to true	WITHOUT_CLASSIFICATION	0.9999904897318287	WITHOUT_CLASSIFICATION	9.51026817128369E-6	DESIGN
Configured using the JAXP Configurator	WITHOUT_CLASSIFICATION	0.9999840555786111	WITHOUT_CLASSIFICATION	1.594442138893243E-5	DESIGN
Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.998185496717156	WITHOUT_CLASSIFICATION	0.0018145032828440018	DESIGN
Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999847557753513	WITHOUT_CLASSIFICATION	1.524422464864477E-5	DESIGN
Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999847557753513	WITHOUT_CLASSIFICATION	1.524422464864477E-5	DESIGN
Configured using the Properties File Configurator	WITHOUT_CLASSIFICATION	0.9999543405053221	WITHOUT_CLASSIFICATION	4.565949467800836E-5	DESIGN
Remember Isolation level	WITHOUT_CLASSIFICATION	0.9999872906854168	WITHOUT_CLASSIFICATION	1.2709314583239144E-5	DESIGN
If the provider was leeching off an existing pool don't close it	WITHOUT_CLASSIFICATION	0.9999999012479985	WITHOUT_CLASSIFICATION	9.875200137666893E-8	DESIGN
We have created the pool ourselves, so shut it down	WITHOUT_CLASSIFICATION	0.999999872770252	WITHOUT_CLASSIFICATION	1.272297479747374E-7	DESIGN
not really a many-to-one association necessarily	WITHOUT_CLASSIFICATION	0.9998241258910235	WITHOUT_CLASSIFICATION	1.7587410897643442E-4	DESIGN
not really a many-to-one association necessarily	WITHOUT_CLASSIFICATION	0.9998241258910235	WITHOUT_CLASSIFICATION	1.7587410897643442E-4	DESIGN
always overwrite nonversioned data	WITHOUT_CLASSIFICATION	0.9999793074752504	WITHOUT_CLASSIFICATION	2.0692524749609895E-5	DESIGN
public Currency getCurrency(int col) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9999104625201057	WITHOUT_CLASSIFICATION	8.953747989425096E-5	DESIGN
default is POJO	WITHOUT_CLASSIFICATION	0.9999930954728307	WITHOUT_CLASSIFICATION	6.9045271694265805E-6	DESIGN
use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999594130782447	WITHOUT_CLASSIFICATION	4.0586921755361567E-5	DESIGN
use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999594130782447	WITHOUT_CLASSIFICATION	4.0586921755361567E-5	DESIGN
private CacheEntry cacheEntry;	WITHOUT_CLASSIFICATION	0.9999967080625688	WITHOUT_CLASSIFICATION	3.2919374311510515E-6	DESIGN
Don't need to lock the cache here, since if someone else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9999340734291309	WITHOUT_CLASSIFICATION	6.592657086915514E-5	DESIGN
Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9765325457003875	WITHOUT_CLASSIFICATION	0.02346745429961242	DESIGN
get the updated snapshot of the entity state by cloning current state; it is safe to copy in place, since by this time no-one else (should have) has a reference to the array	WITHOUT_CLASSIFICATION	0.9999998376516797	WITHOUT_CLASSIFICATION	1.6234832037845733E-7	DESIGN
this entity defines proeprty generation, so process those generated values...	WITHOUT_CLASSIFICATION	0.9995038607704613	WITHOUT_CLASSIFICATION	4.961392295386674E-4	DESIGN
have the entity entry perform post-update processing, passing it the update state and the new version (if one).	WITHOUT_CLASSIFICATION	0.9999985673143674	WITHOUT_CLASSIFICATION	1.4326856325773447E-6	DESIGN
!persister.isCacheInvalidationRequired()	WITHOUT_CLASSIFICATION	0.9998606584667189	WITHOUT_CLASSIFICATION	1.3934153328114545E-4	DESIGN
need to look it up from the persistence-context	WITHOUT_CLASSIFICATION	0.9997521979989664	WITHOUT_CLASSIFICATION	2.4780200103357344E-4	DESIGN
sort first by role name	WITHOUT_CLASSIFICATION	0.9999988939588946	WITHOUT_CLASSIFICATION	1.1060411053568715E-6	DESIGN
Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9765325457003875	WITHOUT_CLASSIFICATION	0.02346745429961242	DESIGN
then by fk	WITHOUT_CLASSIFICATION	0.9999926600428808	WITHOUT_CLASSIFICATION	7.339957119199055E-6	DESIGN
nothing to do	WITHOUT_CLASSIFICATION	0.9999964477402175	WITHOUT_CLASSIFICATION	3.552259782498223E-6	DESIGN
nothing to do	WITHOUT_CLASSIFICATION	0.9999964477402175	WITHOUT_CLASSIFICATION	3.552259782498223E-6	DESIGN
an existing collection that was either non-empty or uninitialized is replaced by null or a different collection (if the collection is uninitialized, hibernate has no way of knowing if the collection is actually empty without querying the db)	WITHOUT_CLASSIFICATION	0.9981593582143163	WITHOUT_CLASSIFICATION	0.001840641785683672	DESIGN
this method is called when a new non-null collection is persisted or when an existing (non-null) collection is moved to a new owner	WITHOUT_CLASSIFICATION	0.9556927222189556	WITHOUT_CLASSIFICATION	0.04430727778104437	DESIGN
boolean put = persister.getCache().insert(ck, cacheEntry);	WITHOUT_CLASSIFICATION	0.9999999323956215	WITHOUT_CLASSIFICATION	6.760437849979116E-8	DESIGN
we need to grab the version value from the entity, otherwise we have issues with generated-version entities that may have multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.878805089992148	WITHOUT_CLASSIFICATION	0.12119491000785194	DESIGN
do nothing - we only need to notify the cache...	WITHOUT_CLASSIFICATION	0.9999991068066697	WITHOUT_CLASSIFICATION	8.931933303263549E-7	DESIGN
sort first by entity name	WITHOUT_CLASSIFICATION	0.9999982828812087	WITHOUT_CLASSIFICATION	1.7171187913135402E-6	DESIGN
then by id	WITHOUT_CLASSIFICATION	0.9999971589413569	WITHOUT_CLASSIFICATION	2.841058643105917E-6	DESIGN
to be safe...	WITHOUT_CLASSIFICATION	0.9999920824538633	WITHOUT_CLASSIFICATION	7.917546136738517E-6	DESIGN
no transformations took place, so handle it as we would a non-instrumented class	WITHOUT_CLASSIFICATION	0.9999253126052058	WITHOUT_CLASSIFICATION	7.468739479425413E-5	DESIGN
see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999971300642704	WITHOUT_CLASSIFICATION	2.8699357296660306E-6	DESIGN
see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999971300642704	WITHOUT_CLASSIFICATION	2.8699357296660306E-6	DESIGN
intentionally empty	WITHOUT_CLASSIFICATION	0.9999735345070128	WITHOUT_CLASSIFICATION	2.6465492987289176E-5	DESIGN
test out the optimizer:	WITHOUT_CLASSIFICATION	0.9999999850052576	WITHOUT_CLASSIFICATION	1.4994742491191832E-8	DESIGN
set the name of bulk accessor.	WITHOUT_CLASSIFICATION	0.999999524526427	WITHOUT_CLASSIFICATION	4.754735729837198E-7	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9997757545566439	WITHOUT_CLASSIFICATION	2.2424544335597322E-4	DESIGN
invokespecial	WITHOUT_CLASSIFICATION	0.9999988020565874	WITHOUT_CLASSIFICATION	1.1979434125615324E-6	DESIGN
return	WITHOUT_CLASSIFICATION	0.9995519189395363	WITHOUT_CLASSIFICATION	4.480810604637368E-4	DESIGN
aload_1 load bean	WITHOUT_CLASSIFICATION	0.9999876651249061	WITHOUT_CLASSIFICATION	1.2334875093834248E-5	DESIGN
checkcast cast bean	WITHOUT_CLASSIFICATION	0.9999992312214537	WITHOUT_CLASSIFICATION	7.6877854620131E-7	DESIGN
astore_3 store bean	WITHOUT_CLASSIFICATION	0.9999946111550414	WITHOUT_CLASSIFICATION	5.388844958583968E-6	DESIGN
aload_2 args	WITHOUT_CLASSIFICATION	0.9999924393072339	WITHOUT_CLASSIFICATION	7.560692766110799E-6	DESIGN
iconst_i continue to aastore growing stack is 1	WITHOUT_CLASSIFICATION	0.9959189974019056	WITHOUT_CLASSIFICATION	0.004081002598094435	DESIGN
new	WITHOUT_CLASSIFICATION	0.9995055795673599	WITHOUT_CLASSIFICATION	4.944204326400916E-4	DESIGN
dup	WITHOUT_CLASSIFICATION	0.9969691345178081	WITHOUT_CLASSIFICATION	0.003030865482191877	DESIGN
aload_3 load the raw bean	WITHOUT_CLASSIFICATION	0.9999957414657815	WITHOUT_CLASSIFICATION	4.258534218457724E-6	DESIGN
invokeinterface	WITHOUT_CLASSIFICATION	0.9999894556765463	WITHOUT_CLASSIFICATION	1.0544323453813034E-5	DESIGN
invokevirtual	WITHOUT_CLASSIFICATION	0.9999989527841924	WITHOUT_CLASSIFICATION	1.0472158076294325E-6	DESIGN
invokevirtual	WITHOUT_CLASSIFICATION	0.9999989527841924	WITHOUT_CLASSIFICATION	1.0472158076294325E-6	DESIGN
aastore args	WITHOUT_CLASSIFICATION	0.9999995804605653	WITHOUT_CLASSIFICATION	4.195394347478671E-7	DESIGN
| this | bean | args | i | raw bean | exception |	WITHOUT_CLASSIFICATION	0.9998796031264878	WITHOUT_CLASSIFICATION	1.2039687351223474E-4	DESIGN
required to exception table iconst_0 i	WITHOUT_CLASSIFICATION	0.9999470962771262	WITHOUT_CLASSIFICATION	5.2903722873791985E-5	DESIGN
istore_3 store i	WITHOUT_CLASSIFICATION	0.9999963729769346	WITHOUT_CLASSIFICATION	3.627023065473205E-6	DESIGN
aload_1 load the bean	WITHOUT_CLASSIFICATION	0.9999965136069039	WITHOUT_CLASSIFICATION	3.4863930961548505E-6	DESIGN
checkcast cast the bean into a raw bean	WITHOUT_CLASSIFICATION	0.999939041810334	WITHOUT_CLASSIFICATION	6.0958189665970736E-5	DESIGN
current stack len = 0	WITHOUT_CLASSIFICATION	0.999996090134023	WITHOUT_CLASSIFICATION	3.909865977015491E-6	DESIGN
start region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9999777241956903	WITHOUT_CLASSIFICATION	2.227580430971826E-5	DESIGN
iinc 3, 1	WITHOUT_CLASSIFICATION	0.9999784687757529	WITHOUT_CLASSIFICATION	2.1531224246977495E-5	DESIGN
aload 4 load the raw bean	WITHOUT_CLASSIFICATION	0.9999928337348002	WITHOUT_CLASSIFICATION	7.1662651998799164E-6	DESIGN
aload_2 load the args	WITHOUT_CLASSIFICATION	0.9999995107470601	WITHOUT_CLASSIFICATION	4.892529398534982E-7	DESIGN
iconst_i	WITHOUT_CLASSIFICATION	0.9999514727996732	WITHOUT_CLASSIFICATION	4.852720032669106E-5	DESIGN
aaload	WITHOUT_CLASSIFICATION	0.9997623223427231	WITHOUT_CLASSIFICATION	2.3767765727694554E-4	DESIGN
checkcast	WITHOUT_CLASSIFICATION	0.999990200296291	WITHOUT_CLASSIFICATION	9.799703708941942E-6	DESIGN
checkcast (case of primitive type) invokevirtual (case of primitive type)	WITHOUT_CLASSIFICATION	0.9999996405704846	WITHOUT_CLASSIFICATION	3.59429515356286E-7	DESIGN
checkcast (case of reference type)	WITHOUT_CLASSIFICATION	0.999998833814094	WITHOUT_CLASSIFICATION	1.1661859059081427E-6	DESIGN
current stack len = 2	WITHOUT_CLASSIFICATION	0.9999980235179714	WITHOUT_CLASSIFICATION	1.976482028556344E-6	DESIGN
end region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.999445167222096	WITHOUT_CLASSIFICATION	5.548327779041285E-4	DESIGN
register in exception table	WITHOUT_CLASSIFICATION	0.9999968969895501	WITHOUT_CLASSIFICATION	3.1030104498961556E-6	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9997757545566439	WITHOUT_CLASSIFICATION	2.2424544335597322E-4	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9997757545566439	WITHOUT_CLASSIFICATION	2.2424544335597322E-4	DESIGN
return	WITHOUT_CLASSIFICATION	0.9995519189395363	WITHOUT_CLASSIFICATION	4.480810604637368E-4	DESIGN
return	WITHOUT_CLASSIFICATION	0.9995519189395363	WITHOUT_CLASSIFICATION	4.480810604637368E-4	DESIGN
dup	WITHOUT_CLASSIFICATION	0.9969691345178081	WITHOUT_CLASSIFICATION	0.003030865482191877	DESIGN
invokevirtual	WITHOUT_CLASSIFICATION	0.9999989527841924	WITHOUT_CLASSIFICATION	1.0472158076294325E-6	DESIGN
checkcast	WITHOUT_CLASSIFICATION	0.999990200296291	WITHOUT_CLASSIFICATION	9.799703708941942E-6	DESIGN
local variables | target obj | each oldvalue |	WITHOUT_CLASSIFICATION	0.9999480367120493	WITHOUT_CLASSIFICATION	5.1963287950676314E-5	DESIGN
astore 5 store exception	WITHOUT_CLASSIFICATION	0.9999979698568968	WITHOUT_CLASSIFICATION	2.030143103210993E-6	DESIGN
new BulkAccessorException	WITHOUT_CLASSIFICATION	0.9999944097080855	WITHOUT_CLASSIFICATION	5.590291914497031E-6	DESIGN
aload 5 load exception	WITHOUT_CLASSIFICATION	0.9999949379378096	WITHOUT_CLASSIFICATION	5.062062190507514E-6	DESIGN
iload_3 i	WITHOUT_CLASSIFICATION	0.9999948339646766	WITHOUT_CLASSIFICATION	5.166035323416579E-6	DESIGN
invokespecial BulkAccessorException.<init>	WITHOUT_CLASSIFICATION	0.9999981558332662	WITHOUT_CLASSIFICATION	1.8441667337090034E-6	DESIGN
athrow	WITHOUT_CLASSIFICATION	0.9999054188473885	WITHOUT_CLASSIFICATION	9.458115261157502E-5	DESIGN
WARNING: classfile only	WITHOUT_CLASSIFICATION	0.9999981165807762	WITHOUT_CLASSIFICATION	1.883419223774836E-6	DESIGN
swallow	WITHOUT_CLASSIFICATION	0.9998737922927105	WITHOUT_CLASSIFICATION	1.2620770728956365E-4	DESIGN
local variable | this |	WITHOUT_CLASSIFICATION	0.9989179780052716	WITHOUT_CLASSIFICATION	0.0010820219947284225	DESIGN
aload_0 load this	WITHOUT_CLASSIFICATION	0.9999917895777826	WITHOUT_CLASSIFICATION	8.210422217545888E-6	DESIGN
aload_0 load this	WITHOUT_CLASSIFICATION	0.9999917895777826	WITHOUT_CLASSIFICATION	8.210422217545888E-6	DESIGN
getfield get field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999691510739772	WITHOUT_CLASSIFICATION	3.084892602279214E-5	DESIGN
areturn return the value of the field	WITHOUT_CLASSIFICATION	0.9999911961519786	WITHOUT_CLASSIFICATION	8.803848021368542E-6	DESIGN
local variables | this | callback |	WITHOUT_CLASSIFICATION	0.9855116194441369	WITHOUT_CLASSIFICATION	0.014488380555863042	DESIGN
aload_1 load callback	WITHOUT_CLASSIFICATION	0.9999305451287465	WITHOUT_CLASSIFICATION	6.945487125360888E-5	DESIGN
putfield put field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999851705052061	WITHOUT_CLASSIFICATION	1.4829494793949194E-5	DESIGN
case of non-static field	WITHOUT_CLASSIFICATION	0.9999999294978635	WITHOUT_CLASSIFICATION	7.050213651926968E-8	DESIGN
getfield get each field	WITHOUT_CLASSIFICATION	0.9999987063436814	WITHOUT_CLASSIFICATION	1.293656318631438E-6	DESIGN
invokeinterface invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999866770776301	WITHOUT_CLASSIFICATION	1.3322922369925098E-5	DESIGN
ifnonnull	WITHOUT_CLASSIFICATION	0.999985523753796	WITHOUT_CLASSIFICATION	1.447624620392986E-5	DESIGN
return each type	WITHOUT_CLASSIFICATION	0.9999717454712931	WITHOUT_CLASSIFICATION	2.8254528706831822E-5	DESIGN
return each type	WITHOUT_CLASSIFICATION	0.9999717454712931	WITHOUT_CLASSIFICATION	2.8254528706831822E-5	DESIGN
store_1 each type	WITHOUT_CLASSIFICATION	0.9999991861803562	WITHOUT_CLASSIFICATION	8.138196438548008E-7	DESIGN
ldc name of the field	WITHOUT_CLASSIFICATION	0.9999994097434076	WITHOUT_CLASSIFICATION	5.902565922915146E-7	DESIGN
load_1 each type	WITHOUT_CLASSIFICATION	0.9999993848060188	WITHOUT_CLASSIFICATION	6.151939812817234E-7	DESIGN
invokeinterface invoke Callback.read() each type	WITHOUT_CLASSIFICATION	0.9999852567214185	WITHOUT_CLASSIFICATION	1.4743278581622659E-5	DESIGN
int	WITHOUT_CLASSIFICATION	0.99988870187917	WITHOUT_CLASSIFICATION	1.1129812083003813E-4	DESIGN
return	WITHOUT_CLASSIFICATION	0.9995519189395363	WITHOUT_CLASSIFICATION	4.480810604637368E-4	DESIGN
dup	WITHOUT_CLASSIFICATION	0.9969691345178081	WITHOUT_CLASSIFICATION	0.003030865482191877	DESIGN
invokeinterface	WITHOUT_CLASSIFICATION	0.9999894556765463	WITHOUT_CLASSIFICATION	1.0544323453813034E-5	DESIGN
checkcast	WITHOUT_CLASSIFICATION	0.999990200296291	WITHOUT_CLASSIFICATION	9.799703708941942E-6	DESIGN
checkcast	WITHOUT_CLASSIFICATION	0.999990200296291	WITHOUT_CLASSIFICATION	9.799703708941942E-6	DESIGN
invokeinterface enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999965329401025	WITHOUT_CLASSIFICATION	3.4670598975687127E-6	DESIGN
invokeinterface enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999965329401025	WITHOUT_CLASSIFICATION	3.4670598975687127E-6	DESIGN
ifnonnull (label1)	WITHOUT_CLASSIFICATION	0.9999995819501479	WITHOUT_CLASSIFICATION	4.180498520755637E-7	DESIGN
load_1	WITHOUT_CLASSIFICATION	0.9999261066023379	WITHOUT_CLASSIFICATION	7.389339766212925E-5	DESIGN
load_1	WITHOUT_CLASSIFICATION	0.9999261066023379	WITHOUT_CLASSIFICATION	7.389339766212925E-5	DESIGN
putfield	WITHOUT_CLASSIFICATION	0.9999551848687975	WITHOUT_CLASSIFICATION	4.4815131202497594E-5	DESIGN
return ;	WITHOUT_CLASSIFICATION	0.9999449989664857	WITHOUT_CLASSIFICATION	5.50010335143843E-5	DESIGN
ldc field name	WITHOUT_CLASSIFICATION	0.9999946346571931	WITHOUT_CLASSIFICATION	5.365342806897522E-6	DESIGN
getfield old value of the field	WITHOUT_CLASSIFICATION	0.9999963371425087	WITHOUT_CLASSIFICATION	3.6628574912884395E-6	DESIGN
invokeinterface callback.write(..)	WITHOUT_CLASSIFICATION	0.9999981966793954	WITHOUT_CLASSIFICATION	1.8033206045874889E-6	DESIGN
reference type	WITHOUT_CLASSIFICATION	0.9999725036381598	WITHOUT_CLASSIFICATION	2.749636184018593E-5	DESIGN
reference type	WITHOUT_CLASSIFICATION	0.9999725036381598	WITHOUT_CLASSIFICATION	2.749636184018593E-5	DESIGN
not array	WITHOUT_CLASSIFICATION	0.999997110681706	WITHOUT_CLASSIFICATION	2.889318293887901E-6	DESIGN
array of reference type	WITHOUT_CLASSIFICATION	0.9999966028386869	WITHOUT_CLASSIFICATION	3.3971613131032584E-6	DESIGN
boolean	WITHOUT_CLASSIFICATION	0.9999610445429642	WITHOUT_CLASSIFICATION	3.8955457035737125E-5	DESIGN
byte	WITHOUT_CLASSIFICATION	0.9998422166441283	WITHOUT_CLASSIFICATION	1.577833558716975E-4	DESIGN
char	WITHOUT_CLASSIFICATION	0.9997433743819543	WITHOUT_CLASSIFICATION	2.5662561804580444E-4	DESIGN
short	WITHOUT_CLASSIFICATION	0.9999132548581056	WITHOUT_CLASSIFICATION	8.674514189440538E-5	DESIGN
double	WITHOUT_CLASSIFICATION	0.9999836547166276	WITHOUT_CLASSIFICATION	1.6345283372310192E-5	DESIGN
float	WITHOUT_CLASSIFICATION	0.9999827694316515	WITHOUT_CLASSIFICATION	1.723056834841075E-5	DESIGN
float	WITHOUT_CLASSIFICATION	0.9999827694316515	WITHOUT_CLASSIFICATION	1.723056834841075E-5	DESIGN
long	WITHOUT_CLASSIFICATION	0.9996110155255835	WITHOUT_CLASSIFICATION	3.889844744165279E-4	DESIGN
long	WITHOUT_CLASSIFICATION	0.9996110155255835	WITHOUT_CLASSIFICATION	3.889844744165279E-4	DESIGN
bad type	WITHOUT_CLASSIFICATION	0.9999618834050814	WITHOUT_CLASSIFICATION	3.8116594918662475E-5	DESIGN
bad type	WITHOUT_CLASSIFICATION	0.9999618834050814	WITHOUT_CLASSIFICATION	3.8116594918662475E-5	DESIGN
boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999963485842566	WITHOUT_CLASSIFICATION	3.651415743431555E-6	DESIGN
boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999963485842566	WITHOUT_CLASSIFICATION	3.651415743431555E-6	DESIGN
reference type	WITHOUT_CLASSIFICATION	0.9999725036381598	WITHOUT_CLASSIFICATION	2.749636184018593E-5	DESIGN
double	WITHOUT_CLASSIFICATION	0.9999836547166276	WITHOUT_CLASSIFICATION	1.6345283372310192E-5	DESIGN
float	WITHOUT_CLASSIFICATION	0.9999827694316515	WITHOUT_CLASSIFICATION	1.723056834841075E-5	DESIGN
float	WITHOUT_CLASSIFICATION	0.9999827694316515	WITHOUT_CLASSIFICATION	1.723056834841075E-5	DESIGN
long	WITHOUT_CLASSIFICATION	0.9996110155255835	WITHOUT_CLASSIFICATION	3.889844744165279E-4	DESIGN
bad type	WITHOUT_CLASSIFICATION	0.9999618834050814	WITHOUT_CLASSIFICATION	3.8116594918662475E-5	DESIGN
bad type	WITHOUT_CLASSIFICATION	0.9999618834050814	WITHOUT_CLASSIFICATION	3.8116594918662475E-5	DESIGN
boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999963485842566	WITHOUT_CLASSIFICATION	3.651415743431555E-6	DESIGN
skip finalize methods	WITHOUT_CLASSIFICATION	0.9999993232679139	WITHOUT_CLASSIFICATION	6.767320860834639E-7	DESIGN
Mainly for OSCache	WITHOUT_CLASSIFICATION	0.9999997291861207	WITHOUT_CLASSIFICATION	2.7081387936329404E-7	DESIGN
decrement the lock	WITHOUT_CLASSIFICATION	0.9999963668920786	WITHOUT_CLASSIFICATION	3.6331079212859264E-6	DESIGN
create new lock that times out immediately	WITHOUT_CLASSIFICATION	0.9999943806080597	WITHOUT_CLASSIFICATION	5.61939194031781E-6	DESIGN
recache the updated state	WITHOUT_CLASSIFICATION	0.9999995581842231	WITHOUT_CLASSIFICATION	4.4181577676666143E-7	DESIGN
noop	WITHOUT_CLASSIFICATION	0.9998614710371456	WITHOUT_CLASSIFICATION	1.3852896285441272E-4	DESIGN
null clientLock is remotely possible but will never happen in practice	WITHOUT_CLASSIFICATION	0.9999972370369876	WITHOUT_CLASSIFICATION	2.7629630123218417E-6	DESIGN
we really could refresh the item if it is not a lock, but it might be slower return freshTimestamp < txTimestamp	WITHOUT_CLASSIFICATION	0.9999480107000661	WITHOUT_CLASSIFICATION	5.198929993394588E-5	DESIGN
by requiring <, we rely on lock timeout in the case of an unsuccessful update!	WITHOUT_CLASSIFICATION	0.9999978827495475	WITHOUT_CLASSIFICATION	2.117250452591925E-6	DESIGN
the user provided resulttransformer, not the one used with "select new". Here to avoid mangling transformed/non-transformed results.	WITHOUT_CLASSIFICATION	0.9999999967052123	WITHOUT_CLASSIFICATION	3.2947877811813934E-9	DESIGN
disassemble positional parameters	WITHOUT_CLASSIFICATION	0.999873675177735	WITHOUT_CLASSIFICATION	1.2632482226502037E-4	DESIGN
disassemble named parameters	WITHOUT_CLASSIFICATION	0.9999859359946542	WITHOUT_CLASSIFICATION	1.4064005345766316E-5	DESIGN
ie. 60 seconds	WITHOUT_CLASSIFICATION	0.999994092514553	WITHOUT_CLASSIFICATION	5.9074854469882525E-6	DESIGN
noop	WITHOUT_CLASSIFICATION	0.9998614710371456	WITHOUT_CLASSIFICATION	1.3852896285441272E-4	DESIGN
noop	WITHOUT_CLASSIFICATION	0.9998614710371456	WITHOUT_CLASSIFICATION	1.3852896285441272E-4	DESIGN
noop	WITHOUT_CLASSIFICATION	0.9998614710371456	WITHOUT_CLASSIFICATION	1.3852896285441272E-4	DESIGN
this is called from SettingsFactory irregardless; trivial to simply disregard	WITHOUT_CLASSIFICATION	0.998076058173627	WITHOUT_CLASSIFICATION	0.0019239418263731168	DESIGN
Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999989375279351	WITHOUT_CLASSIFICATION	1.0624720649834591E-6	DESIGN
Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999989375279351	WITHOUT_CLASSIFICATION	1.0624720649834591E-6	DESIGN
throw new UnsupportedOperationException("Can't write to a readonly object");	WITHOUT_CLASSIFICATION	0.9991663040015605	WITHOUT_CLASSIFICATION	8.336959984395835E-4	DESIGN
assembled state gets put in a new array (we read from cache by value!)	WITHOUT_CLASSIFICATION	0.9999998800908242	WITHOUT_CLASSIFICATION	1.1990917575876835E-7	DESIGN
persister.setIdentifier(result, id); before calling interceptor, for consistency with normal load	WITHOUT_CLASSIFICATION	0.9999953234835421	WITHOUT_CLASSIFICATION	4.6765164578547426E-6	DESIGN
no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.999998736232914	WITHOUT_CLASSIFICATION	1.2637670859853172E-6	DESIGN
no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.999998736232914	WITHOUT_CLASSIFICATION	1.2637670859853172E-6	DESIGN
again, CCS did not have such a concept; but a reasonable proximity is to clear the cache after transaction as long as the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999999987164662	WITHOUT_CLASSIFICATION	1.283533745242869E-9	DESIGN
again, CCS did not have such a concept; however a reasonable proximity is to clear the cache. For non-transaction aware caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999999909497327	WITHOUT_CLASSIFICATION	9.050267313473134E-9	DESIGN
again, CCS did not have such a concept; however a reasonable proximity is to clear the cache. For non-transaction aware caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999999909497327	WITHOUT_CLASSIFICATION	9.050267313473134E-9	DESIGN
classes mentioned in extends not available - so put it in queue	WITHOUT_CLASSIFICATION	0.9916203906253083	WITHOUT_CLASSIFICATION	0.008379609374691767	DESIGN
get meta's from <hibernate-mapping>	WITHOUT_CLASSIFICATION	0.9999987511226532	WITHOUT_CLASSIFICATION	1.2488773468513899E-6	DESIGN
get meta's from <class>	WITHOUT_CLASSIFICATION	0.9999974707021553	WITHOUT_CLASSIFICATION	2.529297844762908E-6	DESIGN
DB-OBJECTNAME	WITHOUT_CLASSIFICATION	0.9997434492678005	WITHOUT_CLASSIFICATION	2.565507321995452E-4	DESIGN
MUTABLE	WITHOUT_CLASSIFICATION	0.9993517866251997	WITHOUT_CLASSIFICATION	6.482133748002438E-4	DESIGN
WHERE	WITHOUT_CLASSIFICATION	0.9991996774324412	WITHOUT_CLASSIFICATION	8.003225675588891E-4	DESIGN
CHECK	WITHOUT_CLASSIFICATION	0.9989469213248738	WITHOUT_CLASSIFICATION	0.0010530786751261185	DESIGN
POLYMORPHISM	WITHOUT_CLASSIFICATION	0.9997450078197505	WITHOUT_CLASSIFICATION	2.54992180249404E-4	DESIGN
TODO:	WITHOUT_CLASSIFICATION	0.9767066915245995	WITHOUT_CLASSIFICATION	0.023293308475400402	DESIGN
ID	WITHOUT_CLASSIFICATION	0.9987702388784457	WITHOUT_CLASSIFICATION	0.0012297611215541654	DESIGN
VERSION / TIMESTAMP	WITHOUT_CLASSIFICATION	0.9999934581380443	WITHOUT_CLASSIFICATION	6.541861955762392E-6	DESIGN
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9996886413361734	WITHOUT_CLASSIFICATION	3.113586638265294E-4	DESIGN
Primary key constraint	WITHOUT_CLASSIFICATION	0.9999998620938618	WITHOUT_CLASSIFICATION	1.3790613818933493E-7	DESIGN
this is either a <version/> tag with no type attribute, or a <timestamp/> tag	WITHOUT_CLASSIFICATION	0.9999777953670325	WITHOUT_CLASSIFICATION	2.220463296753923E-5	DESIGN
for version properties marked as being generated, make sure they are "always" generated; aka, "insert" is invalid; this is dis-allowed by the DTD, but just to make sure...	WITHOUT_CLASSIFICATION	0.9991477715663357	WITHOUT_CLASSIFICATION	8.522284336643943E-4	DESIGN
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9996886413361734	WITHOUT_CLASSIFICATION	3.113586638265294E-4	DESIGN
( (Column) discrim.getColumnIterator().next() ).setType(type);	WITHOUT_CLASSIFICATION	0.9999854286256942	WITHOUT_CLASSIFICATION	1.4571374305739127E-5	DESIGN
go ahead and set the lazy here, since pojo.proxy can override it.	WITHOUT_CLASSIFICATION	0.9999975251040913	WITHOUT_CLASSIFICATION	2.4748959086761383E-6	DESIGN
DYNAMIC UPDATE	WITHOUT_CLASSIFICATION	0.9999827079588965	WITHOUT_CLASSIFICATION	1.729204110350303E-5	DESIGN
IMPORT	WITHOUT_CLASSIFICATION	0.999630826449436	WITHOUT_CLASSIFICATION	3.691735505639398E-4	DESIGN
BATCH SIZE	WITHOUT_CLASSIFICATION	0.9999333464638376	WITHOUT_CLASSIFICATION	6.665353616242032E-5	DESIGN
SELECT BEFORE UPDATE	WITHOUT_CLASSIFICATION	0.9999821097450398	WITHOUT_CLASSIFICATION	1.7890254960213298E-5	DESIGN
OPTIMISTIC LOCK MODE	WITHOUT_CLASSIFICATION	0.9999299290095387	WITHOUT_CLASSIFICATION	7.007099046132216E-5	DESIGN
PERSISTER	WITHOUT_CLASSIFICATION	0.9996070013721031	WITHOUT_CLASSIFICATION	3.9299862789695517E-4	DESIGN
CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999569174620123	WITHOUT_CLASSIFICATION	4.308253798763946E-5	DESIGN
get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.999995359486162	WITHOUT_CLASSIFICATION	4.6405138379643495E-6	DESIGN
properties	WITHOUT_CLASSIFICATION	0.9999904562145894	WITHOUT_CLASSIFICATION	9.543785410686216E-6	DESIGN
joined subclasses	WITHOUT_CLASSIFICATION	0.9999989180349622	WITHOUT_CLASSIFICATION	1.0819650378400114E-6	DESIGN
KEY	WITHOUT_CLASSIFICATION	0.9988203547204286	WITHOUT_CLASSIFICATION	0.0011796452795713702	DESIGN
CHECK	WITHOUT_CLASSIFICATION	0.9989469213248738	WITHOUT_CLASSIFICATION	0.0010530786751261185	DESIGN
CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999569174620123	WITHOUT_CLASSIFICATION	4.308253798763946E-5	DESIGN
properties	WITHOUT_CLASSIFICATION	0.9999904562145894	WITHOUT_CLASSIFICATION	9.543785410686216E-6	DESIGN
KEY	WITHOUT_CLASSIFICATION	0.9988203547204286	WITHOUT_CLASSIFICATION	0.0011796452795713702	DESIGN
model.getKey().setType( new Type( model.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999978786817219	WITHOUT_CLASSIFICATION	2.121318278130731E-6	DESIGN
TABLENAME	WITHOUT_CLASSIFICATION	0.9996509511627341	WITHOUT_CLASSIFICATION	3.490488372659529E-4	DESIGN
join.getKey().setType( new Type( lazz.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999998923229061	WITHOUT_CLASSIFICATION	1.0767709395906983E-7	DESIGN
PROPERTIES	WITHOUT_CLASSIFICATION	0.999622824275074	WITHOUT_CLASSIFICATION	3.7717572492607836E-4	DESIGN
COLUMN(S)	WITHOUT_CLASSIFICATION	0.9998725523472727	WITHOUT_CLASSIFICATION	1.2744765272725662E-4	DESIGN
column index	WITHOUT_CLASSIFICATION	0.9999454477273072	WITHOUT_CLASSIFICATION	5.455227269290397E-5	DESIGN
column unique-key	WITHOUT_CLASSIFICATION	0.9999776347940337	WITHOUT_CLASSIFICATION	2.236520596625329E-5	DESIGN
automatically makes a column with the default name if none is specifed by XML	WITHOUT_CLASSIFICATION	0.9994645208030029	WITHOUT_CLASSIFICATION	5.354791969972188E-4	DESIGN
for an any	WITHOUT_CLASSIFICATION	0.9999903125263615	WITHOUT_CLASSIFICATION	9.687473638554394E-6	DESIGN
insertable simply because that is the user did not specify anything; just override it	WITHOUT_CLASSIFICATION	0.9999999681373805	WITHOUT_CLASSIFICATION	3.1862619436970334E-8	DESIGN
the user specifically supplied insert="true", which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999937014530323	WITHOUT_CLASSIFICATION	6.298546967748594E-6	DESIGN
properties generated on update can never be updateable...	WITHOUT_CLASSIFICATION	0.9999990558078897	WITHOUT_CLASSIFICATION	9.441921104121609E-7	DESIGN
updateable only because the user did not specify anything; just override it	WITHOUT_CLASSIFICATION	0.9999999993673525	WITHOUT_CLASSIFICATION	6.326475747042499E-10	DESIGN
the user specifically supplied update="true", which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999992312291515	WITHOUT_CLASSIFICATION	7.687708485883108E-7	DESIGN
ROLENAME	WITHOUT_CLASSIFICATION	0.9996856122191082	WITHOUT_CLASSIFICATION	3.1438778089175253E-4	DESIGN
FETCH STRATEGY	WITHOUT_CLASSIFICATION	0.9999778868532792	WITHOUT_CLASSIFICATION	2.2113146720832383E-5	DESIGN
TABLE	WITHOUT_CLASSIFICATION	0.9993716738316243	WITHOUT_CLASSIFICATION	6.28326168375695E-4	DESIGN
tableName = mappings.getNamingStrategy().propertyToTableName( className, path );	WITHOUT_CLASSIFICATION	0.9999999935729933	WITHOUT_CLASSIFICATION	6.427006642405571E-9	DESIGN
SORT	WITHOUT_CLASSIFICATION	0.9997100888891666	WITHOUT_CLASSIFICATION	2.8991111083344177E-4	DESIGN
CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999569174620123	WITHOUT_CLASSIFICATION	4.308253798763946E-5	DESIGN
unsorted, natural, comparator.class.name	WITHOUT_CLASSIFICATION	0.9999524913328646	WITHOUT_CLASSIFICATION	4.750866713540308E-5	DESIGN
ORPHAN DELETE (used for programmer error detection)	WITHOUT_CLASSIFICATION	0.9999695872601765	WITHOUT_CLASSIFICATION	3.0412739823491965E-5	DESIGN
set up second pass	WITHOUT_CLASSIFICATION	0.9999997738112125	WITHOUT_CLASSIFICATION	2.2618878745008878E-7	DESIGN
an "embedded" component (composite ids and unique) note that this does not handle nested components	WITHOUT_CLASSIFICATION	0.9997255293930813	WITHOUT_CLASSIFICATION	2.744706069186358E-4	DESIGN
a nested composite element	WITHOUT_CLASSIFICATION	0.9999989170181467	WITHOUT_CLASSIFICATION	1.0829818532873985E-6	DESIGN
for an any we will have to use reflection	WITHOUT_CLASSIFICATION	0.9998509024550356	WITHOUT_CLASSIFICATION	1.4909754496443033E-4	DESIGN
NOTE SPECIAL CASE: one-to-one constrained=false cannot be proxied, so default to join and non-lazy	WITHOUT_CLASSIFICATION	0.9999984301467161	WITHOUT_CLASSIFICATION	1.5698532839879736E-6	DESIGN
use old (HB 2.1) defaults if outer-join is specified	WITHOUT_CLASSIFICATION	0.999999784380788	WITHOUT_CLASSIFICATION	2.1561921203745E-7	DESIGN
lazy = !join;	WITHOUT_CLASSIFICATION	0.9999998923810424	WITHOUT_CLASSIFICATION	1.0761895765265973E-7	DESIGN
GENERATOR	WITHOUT_CLASSIFICATION	0.9992543458530161	WITHOUT_CLASSIFICATION	7.456541469839782E-4	DESIGN
ID UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999808428742093	WITHOUT_CLASSIFICATION	1.915712579072905E-5	DESIGN
VERSION UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999750867737318	WITHOUT_CLASSIFICATION	2.491322626818465E-5	DESIGN
not necessarily a unique property reference	WITHOUT_CLASSIFICATION	0.9999185556577274	WITHOUT_CLASSIFICATION	8.144434227254127E-5	DESIGN
( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9998849605792761	WITHOUT_CLASSIFICATION	1.1503942072391077E-4	DESIGN
contained elements:	WITHOUT_CLASSIFICATION	0.9999997337280158	WITHOUT_CLASSIFICATION	2.6627198416222043E-7	DESIGN
for non-inverse one-to-many, with a not-null fk, add a backref!	WITHOUT_CLASSIFICATION	0.9999959564205241	WITHOUT_CLASSIFICATION	4.043579475936655E-6	DESIGN
Bind the where	WITHOUT_CLASSIFICATION	0.9999501286756968	WITHOUT_CLASSIFICATION	4.987132430317677E-5	DESIGN
Bind the order-by	WITHOUT_CLASSIFICATION	0.9999989389683857	WITHOUT_CLASSIFICATION	1.0610316142966062E-6	DESIGN
Bind the filters	WITHOUT_CLASSIFICATION	0.9999976575499282	WITHOUT_CLASSIFICATION	2.3424500717602094E-6	DESIGN
overriding inherited meta attribute. HBX-621 & HBX-793	WITHOUT_CLASSIFICATION	0.9999751314619266	WITHOUT_CLASSIFICATION	2.4868538073303866E-5	DESIGN
first, iterate over all elements capable of defining an extends attribute collecting all found extends references if they cannot be resolved against the already processed mappings.	WITHOUT_CLASSIFICATION	0.9999983476022701	WITHOUT_CLASSIFICATION	1.6523977298678773E-6	DESIGN
mappings might contain either the "raw" extends name (in the case of an entity-name mapping) or a FQN (in the case of a POJO mapping).	WITHOUT_CLASSIFICATION	0.9986088398538738	WITHOUT_CLASSIFICATION	0.0013911601461261975	DESIGN
+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9996829259961273	WITHOUT_CLASSIFICATION	3.1707400387267695E-4	DESIGN
SessionFactory name:	WITHOUT_CLASSIFICATION	0.9999984446498261	WITHOUT_CLASSIFICATION	1.55535017385182E-6	DESIGN
JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9999907875573729	WITHOUT_CLASSIFICATION	9.212442627172666E-6	DESIGN
JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9999907875573729	WITHOUT_CLASSIFICATION	9.212442627172666E-6	DESIGN
Interrogate JDBC metadata	WITHOUT_CLASSIFICATION	0.9999762707211184	WITHOUT_CLASSIFICATION	2.372927888149879E-5	DESIGN
user supplied JDBC connections	WITHOUT_CLASSIFICATION	0.9999501448199879	WITHOUT_CLASSIFICATION	4.985518001217536E-5	DESIGN
use dialect default properties	WITHOUT_CLASSIFICATION	0.9999985762131459	WITHOUT_CLASSIFICATION	1.4237868540982988E-6	DESIGN
Transaction settings:	WITHOUT_CLASSIFICATION	0.9999887486778608	WITHOUT_CLASSIFICATION	1.1251322139292237E-5	DESIGN
SQL Generation settings:	WITHOUT_CLASSIFICATION	0.9999964605961513	WITHOUT_CLASSIFICATION	3.5394038487174216E-6	DESIGN
Query parser settings:	WITHOUT_CLASSIFICATION	0.9999954843925243	WITHOUT_CLASSIFICATION	4.515607475690708E-6	DESIGN
Second-level / query cache:	WITHOUT_CLASSIFICATION	0.9999967562595449	WITHOUT_CLASSIFICATION	3.243740455217962E-6	DESIGN
The cache provider is needed when we either have second-level cache enabled or query cache enabled. Note that useSecondLevelCache is enabled by default	WITHOUT_CLASSIFICATION	0.9999451377580997	WITHOUT_CLASSIFICATION	5.4862241900234596E-5	DESIGN
SQL Exception converter:	WITHOUT_CLASSIFICATION	0.9999986732675297	WITHOUT_CLASSIFICATION	1.32673247039561E-6	DESIGN
Statistics and logging:	WITHOUT_CLASSIFICATION	0.9999993465175715	WITHOUT_CLASSIFICATION	6.534824285046295E-7	DESIGN
settings.setShowSqlEnabled(showSql);	WITHOUT_CLASSIFICATION	0.9999993883765932	WITHOUT_CLASSIFICATION	6.116234067756746E-7	DESIGN
settings.setFormatSqlEnabled(formatSql);	WITHOUT_CLASSIFICATION	0.9999940508043137	WITHOUT_CLASSIFICATION	5.949195686286603E-6	DESIGN
Schema export:	WITHOUT_CLASSIFICATION	0.9999983066688253	WITHOUT_CLASSIFICATION	1.6933311747028948E-6	DESIGN
String provider = properties.getProperty( Environment.BYTECODE_PROVIDER ); log.info( "Bytecode provider name : " + provider ); BytecodeProvider bytecodeProvider = buildBytecodeProvider( provider ); settings.setBytecodeProvider( bytecodeProvider );	WITHOUT_CLASSIFICATION	0.9999935687192012	WITHOUT_CLASSIFICATION	6.431280798686198E-6	DESIGN
legacy behavior, apply the bridge...	WITHOUT_CLASSIFICATION	0.9999725444451074	WITHOUT_CLASSIFICATION	2.7455554892567757E-5	DESIGN
maybe a concrete SQLpropertyresult type, but Map is exactly what is required at the moment	WITHOUT_CLASSIFICATION	0.9599749070766126	WITHOUT_CLASSIFICATION	0.04002509292338747	DESIGN
if dotted and not load-collection nor return-join regular property	WITHOUT_CLASSIFICATION	0.9999473381672196	WITHOUT_CLASSIFICATION	5.266183278031274E-5	DESIGN
private ComponentTuplizerFactory componentTuplizerFactory; todo : HHH-3517 and HHH-1907 private BytecodeProvider bytecodeProvider;	WITHOUT_CLASSIFICATION	0.991575590286436	WITHOUT_CLASSIFICATION	0.008424409713563927	DESIGN
public getters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995293475144039	WITHOUT_CLASSIFICATION	4.7065248559600336E-4	DESIGN
public ComponentTuplizerFactory getComponentTuplizerFactory() { return componentTuplizerFactory; }	WITHOUT_CLASSIFICATION	0.9991054194125116	WITHOUT_CLASSIFICATION	8.945805874883424E-4	DESIGN
package protected setters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9988845125335606	WITHOUT_CLASSIFICATION	0.0011154874664394882	DESIGN
void setShowSqlEnabled(boolean b) { showSql = b; } void setFormatSqlEnabled(boolean b) { formatSql = b; }	WITHOUT_CLASSIFICATION	0.9999999554120438	WITHOUT_CLASSIFICATION	4.4587956357153574E-8	DESIGN
public BytecodeProvider getBytecodeProvider() { return bytecodeProvider; } void setBytecodeProvider(BytecodeProvider bytecodeProvider) { this.bytecodeProvider = bytecodeProvider; }	WITHOUT_CLASSIFICATION	0.9999942513196469	WITHOUT_CLASSIFICATION	5.748680353043954E-6	DESIGN
using local since the inheritedMetas at this point is not the correct map since it is always the empty map	WITHOUT_CLASSIFICATION	0.9984947567824236	WITHOUT_CLASSIFICATION	0.0015052432175764229	DESIGN
private ComponentTuplizerFactory componentTuplizerFactory; todo : HHH-3517 and HHH-1907	WITHOUT_CLASSIFICATION	0.992489351055182	WITHOUT_CLASSIFICATION	0.007510648944817942	DESIGN
protected List extendsQueue;	WITHOUT_CLASSIFICATION	0.999995405793882	WITHOUT_CLASSIFICATION	4.5942061179864334E-6	DESIGN
extendsQueue = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999841283178615	WITHOUT_CLASSIFICATION	1.5871682138359556E-5	DESIGN
componentTuplizerFactory = new ComponentTuplizerFactory();	WITHOUT_CLASSIFICATION	0.9999905154221829	WITHOUT_CLASSIFICATION	9.484577817111047E-6	DESIGN
if doc is null, then for whatever reason, the cached file cannot be used...	WITHOUT_CLASSIFICATION	0.9999946156879101	WITHOUT_CLASSIFICATION	5.3843120899035745E-6	DESIGN
drop them in reverse order in case db needs it done that way...	WITHOUT_CLASSIFICATION	0.9987551988059015	WITHOUT_CLASSIFICATION	0.0012448011940986387	DESIGN
public ComponentTuplizerFactory getComponentTuplizerFactory() { return componentTuplizerFactory; }	WITHOUT_CLASSIFICATION	0.9991054194125116	WITHOUT_CLASSIFICATION	8.945805874883424E-4	DESIGN
This method may be called many times!!	WITHOUT_CLASSIFICATION	0.9986540337947858	WITHOUT_CLASSIFICATION	0.0013459662052142498	DESIGN
Iterator iterator = extendsQueue.iterator();	WITHOUT_CLASSIFICATION	0.9999991976850638	WITHOUT_CLASSIFICATION	8.023149361984721E-7	DESIGN
Iterator iter = extendsQueue.iterator();	WITHOUT_CLASSIFICATION	0.9999993281095533	WITHOUT_CLASSIFICATION	6.71890446698455E-7	DESIGN
found	WITHOUT_CLASSIFICATION	0.9996880896065998	WITHOUT_CLASSIFICATION	3.119103934002119E-4	DESIGN
found	WITHOUT_CLASSIFICATION	0.9996880896065998	WITHOUT_CLASSIFICATION	3.119103934002119E-4	DESIGN
settings.setComponentTuplizerFactory( this.getComponentTuplizerFactory() );	WITHOUT_CLASSIFICATION	0.999899119783467	WITHOUT_CLASSIFICATION	1.0088021653290556E-4	DESIGN
private final List extendsQueue;	WITHOUT_CLASSIFICATION	0.9999718506175227	WITHOUT_CLASSIFICATION	2.8149382477357794E-5	DESIGN
<String, String>	WITHOUT_CLASSIFICATION	0.9999988719804781	WITHOUT_CLASSIFICATION	1.1280195218508378E-6	DESIGN
<String, String>	WITHOUT_CLASSIFICATION	0.9999988719804781	WITHOUT_CLASSIFICATION	1.1280195218508378E-6	DESIGN
+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9996829259961273	WITHOUT_CLASSIFICATION	3.1707400387267695E-4	DESIGN
Set USE_REFLECTION_OPTIMIZER to false to fix HHH-227	WITHOUT_CLASSIFICATION	0.9999961145435027	WITHOUT_CLASSIFICATION	3.885456497274385E-6	DESIGN
orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9984697896835814	WITHOUT_CLASSIFICATION	0.0015302103164185788	DESIGN
element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9999997191314028	WITHOUT_CLASSIFICATION	2.8086859716265086E-7	DESIGN
intentionally empty	WITHOUT_CLASSIFICATION	0.9999735345070128	WITHOUT_CLASSIFICATION	2.6465492987289176E-5	DESIGN
orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9984697896835814	WITHOUT_CLASSIFICATION	0.0015302103164185788	DESIGN
element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9999997191314028	WITHOUT_CLASSIFICATION	2.8086859716265086E-7	DESIGN
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999101864225566	WITHOUT_CLASSIFICATION	8.981357744340908E-5	DESIGN
maintain correct duplication if loaded in a cartesian product	WITHOUT_CLASSIFICATION	0.9490575472131837	WITHOUT_CLASSIFICATION	0.050942452786816354	DESIGN
the element has been removed from the set	WITHOUT_CLASSIFICATION	0.9999808272567919	WITHOUT_CLASSIFICATION	1.9172743208138494E-5	DESIGN
the element has changed	WITHOUT_CLASSIFICATION	0.9999996594899841	WITHOUT_CLASSIFICATION	3.4051001578390133E-7	DESIGN
Careful: these methods do not initialize the collection.	WITHOUT_CLASSIFICATION	0.9998991699482322	WITHOUT_CLASSIFICATION	1.008300517678198E-4	DESIGN
needed so that we remove this collection from the second-level cache	WITHOUT_CLASSIFICATION	0.6402571483538444	WITHOUT_CLASSIFICATION	0.35974285164615555	DESIGN
override on some subclasses	WITHOUT_CLASSIFICATION	0.999979310236886	WITHOUT_CLASSIFICATION	2.0689763113978463E-5	DESIGN
override on some subclasses	WITHOUT_CLASSIFICATION	0.999979310236886	WITHOUT_CLASSIFICATION	2.0689763113978463E-5	DESIGN
do this bit after setting initialized to true or it will recurse	WITHOUT_CLASSIFICATION	0.9996951757074963	WITHOUT_CLASSIFICATION	3.0482429250359755E-4	DESIGN
short-circuit(s) no new elements, the old list contains only Orphans no old elements, so no Orphans neither	WITHOUT_CLASSIFICATION	0.9999999961393518	WITHOUT_CLASSIFICATION	3.860648156366511E-9	DESIGN
create the collection holding the Orphans	WITHOUT_CLASSIFICATION	0.9999838423760012	WITHOUT_CLASSIFICATION	1.6157623998739074E-5	DESIGN
collect EntityIdentifier(s) of the current elements - add them into a HashSet for fast access	WITHOUT_CLASSIFICATION	0.9999971951103631	WITHOUT_CLASSIFICATION	2.8048896369474742E-6	DESIGN
iterate over the old list	WITHOUT_CLASSIFICATION	0.9999990727805593	WITHOUT_CLASSIFICATION	9.272194407014144E-7	DESIGN
(array==null) ? tempList.size() :	WITHOUT_CLASSIFICATION	0.999995907466807	WITHOUT_CLASSIFICATION	4.092533192991447E-6	DESIGN
intentionally empty	WITHOUT_CLASSIFICATION	0.9999735345070128	WITHOUT_CLASSIFICATION	2.6465492987289176E-5	DESIGN
(array==null) ? tempList.get(i) :	WITHOUT_CLASSIFICATION	0.9999815063309513	WITHOUT_CLASSIFICATION	1.84936690487563E-5	DESIGN
write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9999999830106787	WITHOUT_CLASSIFICATION	1.6989321281284796E-8	DESIGN
write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9999999830106787	WITHOUT_CLASSIFICATION	1.6989321281284796E-8	DESIGN
amazingly, these two will work because AbstractCollection uses iterator() to fill the array	WITHOUT_CLASSIFICATION	0.999999061388128	WITHOUT_CLASSIFICATION	9.38611872048867E-7	DESIGN
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999101864225566	WITHOUT_CLASSIFICATION	8.981357744340908E-5	DESIGN
finally, what it's all about...	WITHOUT_CLASSIFICATION	0.9999965326995407	WITHOUT_CLASSIFICATION	3.467300459275625E-6	DESIGN
note that if we load this collection from a cartesian product the multiplicity would be broken ... so use an idbag instead	WITHOUT_CLASSIFICATION	0.5407044215481412	WITHOUT_CLASSIFICATION	0.45929557845185875	DESIGN
Anyway, here we implement <set> semantics for a <one-to-many> <bag>!	WITHOUT_CLASSIFICATION	0.973076763854458	WITHOUT_CLASSIFICATION	0.02692323614554197	DESIGN
a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999898992294439	WITHOUT_CLASSIFICATION	1.0100770556173732E-5	DESIGN
search for it note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9575223616922226	WITHOUT_CLASSIFICATION	0.04247763830777743	DESIGN
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999101864225566	WITHOUT_CLASSIFICATION	8.981357744340908E-5	DESIGN
a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999898992294439	WITHOUT_CLASSIFICATION	1.0100770556173732E-5	DESIGN
search for it note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9575223616922226	WITHOUT_CLASSIFICATION	0.04247763830777743	DESIGN
public boolean equals(Object other) {read();return bag.equals(other);}public int hashCode(Object other) {read();return bag.hashCode();}	WITHOUT_CLASSIFICATION	0.9999831534626358	WITHOUT_CLASSIFICATION	1.6846537364174667E-5	DESIGN
List OPERATIONS:	WITHOUT_CLASSIFICATION	0.999999760006899	WITHOUT_CLASSIFICATION	2.399931008834964E-7	DESIGN
pad with nulls from the current last element up to the new index	WITHOUT_CLASSIFICATION	0.9999995186953311	WITHOUT_CLASSIFICATION	4.813046690008689E-7	DESIGN
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999101864225566	WITHOUT_CLASSIFICATION	8.981357744340908E-5	DESIGN
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999101864225566	WITHOUT_CLASSIFICATION	8.981357744340908E-5	DESIGN
from Map	WITHOUT_CLASSIFICATION	0.9999438008509339	WITHOUT_CLASSIFICATION	5.61991490661058E-5	DESIGN
from SortedMap	WITHOUT_CLASSIFICATION	0.9999964170883074	WITHOUT_CLASSIFICATION	3.582911692519734E-6	DESIGN
inject the data	WITHOUT_CLASSIFICATION	0.9999996429146903	WITHOUT_CLASSIFICATION	3.5708530968053677E-7	DESIGN
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999619778376766	WITHOUT_CLASSIFICATION	3.802216232328926E-5	DESIGN
default pool size 20	WITHOUT_CLASSIFICATION	0.9999993897172832	WITHOUT_CLASSIFICATION	6.102827166995013E-7	DESIGN
trying via forName() first to be as close to DriverManager's semantics	WITHOUT_CLASSIFICATION	0.9999789488140747	WITHOUT_CLASSIFICATION	2.105118592531573E-5	DESIGN
if debug level is enabled, then log the password, otherwise mask it	WITHOUT_CLASSIFICATION	0.9999957229326778	WITHOUT_CLASSIFICATION	4.277067322136038E-6	DESIGN
register a cleanup synch	WITHOUT_CLASSIFICATION	0.9999953349556594	WITHOUT_CLASSIFICATION	4.665044340673448E-6	DESIGN
wrap the session in the transaction-protection proxy	WITHOUT_CLASSIFICATION	0.9999547495114075	WITHOUT_CLASSIFICATION	4.5250488592531304E-5	DESIGN
then bind it	WITHOUT_CLASSIFICATION	0.9999979607355618	WITHOUT_CLASSIFICATION	2.0392644381441066E-6	DESIGN
try to make sure we don't wrap and already wrapped session	WITHOUT_CLASSIFICATION	0.9979244529760282	WITHOUT_CLASSIFICATION	0.0020755470239718545	DESIGN
allow these to go through the the real session no matter what	WITHOUT_CLASSIFICATION	0.9992384980721248	WITHOUT_CLASSIFICATION	7.615019278752708E-4	DESIGN
limit the methods available if no transaction is active	WITHOUT_CLASSIFICATION	0.9997751631475614	WITHOUT_CLASSIFICATION	2.2483685243858973E-4	DESIGN
allow these (deprecated) methods to pass through	WITHOUT_CLASSIFICATION	0.9920679427708374	WITHOUT_CLASSIFICATION	0.007932057229162551	DESIGN
serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999962168447234	WITHOUT_CLASSIFICATION	3.783155276543933E-6	DESIGN
We could register the session against the transaction even though it is not started, but we'd have no guarentee of ever getting the map entries cleaned up (aside from spawning threads).	WITHOUT_CLASSIFICATION	0.9999875895105815	WITHOUT_CLASSIFICATION	1.2410489418550595E-5	DESIGN
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999619778376766	WITHOUT_CLASSIFICATION	3.802216232328926E-5	DESIGN
private String propertyName;	WITHOUT_CLASSIFICATION	0.999998699742896	WITHOUT_CLASSIFICATION	1.3002571039658535E-6	DESIGN
public PropertyProjection project() {return Projections.property(getPropertyName());}	WITHOUT_CLASSIFICATION	0.9999708641610137	WITHOUT_CLASSIFICATION	2.9135838986281983E-5	DESIGN
String[] fk = StringHelper.qualify( "collection_", cp.getKeyColumnNames() );	WITHOUT_CLASSIFICATION	0.9999998943042796	WITHOUT_CLASSIFICATION	1.0569572046461973E-7	DESIGN
" collection_ where " +	WITHOUT_CLASSIFICATION	0.9999518706080387	WITHOUT_CLASSIFICATION	4.81293919613002E-5	DESIGN
unsupported	WITHOUT_CLASSIFICATION	0.9994827141045468	WITHOUT_CLASSIFICATION	5.172858954531064E-4	DESIGN
unsupported	WITHOUT_CLASSIFICATION	0.9994827141045468	WITHOUT_CLASSIFICATION	5.172858954531064E-4	DESIGN
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999619778376766	WITHOUT_CLASSIFICATION	3.802216232328926E-5	DESIGN
the following two lines were added to ensure that this.params is not null, which can happen with two-deep nested subqueries	WITHOUT_CLASSIFICATION	0.9999997790894217	WITHOUT_CLASSIFICATION	2.2091057815567702E-7	DESIGN
with two-deep subqueries, the same alias would get generated for both using the old method (criteriaQuery.generateSQLAlias()), so that is now used as a fallback if the main criteria alias isn't set	WITHOUT_CLASSIFICATION	0.9972794432225968	WITHOUT_CLASSIFICATION	0.0027205567774032284	DESIGN
implicit polymorphism not supported (would need a union)	WITHOUT_CLASSIFICATION	0.9593813668079233	WITHOUT_CLASSIFICATION	0.04061863319207669	DESIGN
pull off the last ", "	WITHOUT_CLASSIFICATION	0.9999999141023944	WITHOUT_CLASSIFICATION	8.589760556344279E-8	DESIGN
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999071060044589	WITHOUT_CLASSIFICATION	9.289399554119831E-5	DESIGN
we have the form: trim(trimSource) so we trim leading and trailing spaces	WITHOUT_CLASSIFICATION	0.999999844007955	WITHOUT_CLASSIFICATION	1.5599204504482312E-7	DESIGN
we have the form: trim(from trimSource). This is functionally equivalent to trim(trimSource)	WITHOUT_CLASSIFICATION	0.9999454264658867	WITHOUT_CLASSIFICATION	5.457353411335031E-5	DESIGN
NOT_SUPPORTED_SHOULD_USE_JDBC3_PreparedStatement.getGeneratedKeys_method	WITHOUT_CLASSIFICATION	0.9999713020614454	WITHOUT_CLASSIFICATION	2.8697938554627175E-5	DESIGN
potentialTrimCharacterArgIndex = 1 assumes that a trim-specification has been specified. we handle the exception to that explicitly	WITHOUT_CLASSIFICATION	0.9983094785019389	WITHOUT_CLASSIFICATION	0.0016905214980610919	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992722498241725	WITHOUT_CLASSIFICATION	7.277501758273799E-4	DESIGN
Oracle did add support for ANSI CASE statements in 9i	WITHOUT_CLASSIFICATION	0.9999685309688355	WITHOUT_CLASSIFICATION	3.1469031164405014E-5	DESIGN
the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9998816968581986	WITHOUT_CLASSIFICATION	1.1830314180142546E-4	DESIGN
Informix doesn't have a bit type	WITHOUT_CLASSIFICATION	0.9999826187063414	WITHOUT_CLASSIFICATION	1.7381293658583048E-5	DESIGN
or BYTE or TEXT? or MONEY	WITHOUT_CLASSIFICATION	0.9994777787972307	WITHOUT_CLASSIFICATION	5.222212027693451E-4	DESIGN
strip table-owner because Informix always returns constraint names as "<table-owner>.<constraint-name>"	WITHOUT_CLASSIFICATION	0.999997027815652	WITHOUT_CLASSIFICATION	2.9721843479048766E-6	DESIGN
build the map of standard ANSI SQL aggregation functions ~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999374331158726	WITHOUT_CLASSIFICATION	6.256688412748705E-5	DESIGN
pre H3.2 behavior: super.getReturnType(ct, m);	WITHOUT_CLASSIFICATION	0.9998243377834529	WITHOUT_CLASSIFICATION	1.7566221654698896E-4	DESIGN
finally use the sqltype if == on Hibernate types did not find a match.	WITHOUT_CLASSIFICATION	0.9999979929122155	WITHOUT_CLASSIFICATION	2.0070877845166007E-6	DESIGN
because numeric can be anything	WITHOUT_CLASSIFICATION	0.9998955171984331	WITHOUT_CLASSIFICATION	1.044828015668792E-4	DESIGN
constructors and factory methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997600225793654	WITHOUT_CLASSIFICATION	2.3997742063454263E-4	DESIGN
standard sql92 functions (can be overridden by subclasses)	WITHOUT_CLASSIFICATION	0.9989442518042225	WITHOUT_CLASSIFICATION	0.0010557481957775786	DESIGN
map second/minute/hour/day/month/year to ANSI extract(), override on subclasses	WITHOUT_CLASSIFICATION	0.9997667656770609	WITHOUT_CLASSIFICATION	2.332343229391999E-4	DESIGN
register hibernate types for default use in scalar sqlquery type auto detection	WITHOUT_CLASSIFICATION	0.8711168141401258	WITHOUT_CLASSIFICATION	0.1288831858598742	DESIGN
database type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9924719959563656	WITHOUT_CLASSIFICATION	0.007528004043634336	DESIGN
hibernate type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99372849034963	WITHOUT_CLASSIFICATION	0.006271509650369981	DESIGN
keyword support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9982023581308486	WITHOUT_CLASSIFICATION	0.0017976418691514533	DESIGN
native identifier generatiion ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999955737419088	WITHOUT_CLASSIFICATION	4.4262580911582385E-6	DESIGN
IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9981090833924113	WITHOUT_CLASSIFICATION	0.0018909166075887906	DESIGN
SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9978203412130627	WITHOUT_CLASSIFICATION	0.0021796587869373114	DESIGN
GUID support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9935778987947229	WITHOUT_CLASSIFICATION	0.00642210120527721	DESIGN
limit/offset support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996700036245713	WITHOUT_CLASSIFICATION	3.299963754287189E-4	DESIGN
by default we report no support	WITHOUT_CLASSIFICATION	0.9980255873733167	WITHOUT_CLASSIFICATION	0.0019744126266832604	DESIGN
by default we report no support for NOWAIT lock semantics	WITHOUT_CLASSIFICATION	0.9103851652418329	WITHOUT_CLASSIFICATION	0.08961483475816719	DESIGN
table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998362769918324	WITHOUT_CLASSIFICATION	1.6372300816763324E-4	DESIGN
temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.970417868162512	WITHOUT_CLASSIFICATION	0.029582131837488024	DESIGN
callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999774494179942	WITHOUT_CLASSIFICATION	2.25505820057893E-4	DESIGN
current timestamp support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997081379063072	WITHOUT_CLASSIFICATION	2.918620936927931E-4	DESIGN
SQLException support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9989291073131483	WITHOUT_CLASSIFICATION	0.0010708926868516731	DESIGN
miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992111423419274	WITHOUT_CLASSIFICATION	7.888576580725588E-4	DESIGN
identifier quoting support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993856037368429	WITHOUT_CLASSIFICATION	6.143962631571196E-4	DESIGN
DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9966881084985265	WITHOUT_CLASSIFICATION	0.003311891501473408	DESIGN
grrr... for differentiation of mysql storage engines	WITHOUT_CLASSIFICATION	0.9989072068893711	WITHOUT_CLASSIFICATION	0.0010927931106289532	DESIGN
Informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9990992474616989	WITHOUT_CLASSIFICATION	9.007525383011346E-4	DESIGN
return false here, as most databases do not properly support this construct...	WITHOUT_CLASSIFICATION	0.9895700971006403	WITHOUT_CLASSIFICATION	0.010429902899359723	DESIGN
Mckoi has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.999623746968575	WITHOUT_CLASSIFICATION	3.762530314249447E-4	DESIGN
Oracle8 and previous define only a "DATE" type which is used to represent all aspects of date/time	WITHOUT_CLASSIFICATION	0.9999361666082138	WITHOUT_CLASSIFICATION	6.383339178619524E-5	DESIGN
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.999999474236987	WITHOUT_CLASSIFICATION	5.257630130610836E-7	DESIGN
" cascade";	WITHOUT_CLASSIFICATION	0.9999740736014002	WITHOUT_CLASSIFICATION	2.5926398599787673E-5	DESIGN
trim off the length/precision/scale	WITHOUT_CLASSIFICATION	0.9999953987251826	WITHOUT_CLASSIFICATION	4.60127481741354E-6	DESIGN
public boolean dropTemporaryTableAfterUse() {we have to, because postgres sets current txto rollback only after a failed create tablereturn true;}	WITHOUT_CLASSIFICATION	0.9999812326103631	WITHOUT_CLASSIFICATION	1.8767389636857465E-5	DESIGN
CHECK VIOLATION	WITHOUT_CLASSIFICATION	0.9999864095793083	WITHOUT_CLASSIFICATION	1.3590420691798252E-5	DESIGN
UNIQUE VIOLATION	WITHOUT_CLASSIFICATION	0.9999870603089942	WITHOUT_CLASSIFICATION	1.2939691005790849E-5	DESIGN
FOREIGN KEY VIOLATION	WITHOUT_CLASSIFICATION	0.9999750257669058	WITHOUT_CLASSIFICATION	2.4974233094300763E-5	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992722498241725	WITHOUT_CLASSIFICATION	7.277501758273799E-4	DESIGN
NOT NULL VIOLATION	WITHOUT_CLASSIFICATION	0.9999795696820538	WITHOUT_CLASSIFICATION	2.043031794619201E-5	DESIGN
ALL OTHER	WITHOUT_CLASSIFICATION	0.9999796115394717	WITHOUT_CLASSIFICATION	2.0388460528360945E-5	DESIGN
Register the type of the out param - PostgreSQL uses Types.OTHER	WITHOUT_CLASSIFICATION	0.9998963521690554	WITHOUT_CLASSIFICATION	1.0364783094455357E-4	DESIGN
seems to not really... public boolean supportsRowValueConstructorSyntax() { return true; }	WITHOUT_CLASSIFICATION	0.9999790679082405	WITHOUT_CLASSIFICATION	2.093209175938474E-5	DESIGN
seems to have spotty LOB suppport	WITHOUT_CLASSIFICATION	0.9991691154174671	WITHOUT_CLASSIFICATION	8.30884582532971E-4	DESIGN
HHH-2300	WITHOUT_CLASSIFICATION	0.9990772586031341	WITHOUT_CLASSIFICATION	9.227413968657564E-4	DESIGN
ignore (probably H2 not in the classpath)	WITHOUT_CLASSIFICATION	0.9999998078966812	WITHOUT_CLASSIFICATION	1.9210331890385184E-7	DESIGN
Numeric Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995584196033844	WITHOUT_CLASSIFICATION	4.4158039661563244E-4	DESIGN
String Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998218246293699	WITHOUT_CLASSIFICATION	1.781753706301046E-4	DESIGN
Time and Date Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999077315392806	WITHOUT_CLASSIFICATION	9.226846071940968E-5	DESIGN
System Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999185831476863	WITHOUT_CLASSIFICATION	8.141685231363852E-5	DESIGN
not null is implicit	WITHOUT_CLASSIFICATION	0.9999964079366767	WITHOUT_CLASSIFICATION	3.5920633233088794E-6	DESIGN
23000: Check constraint violation: {0} 23001: Unique index or primary key violation: {0}	WITHOUT_CLASSIFICATION	0.999894886996131	WITHOUT_CLASSIFICATION	1.0511300386889763E-4	DESIGN
Display the dialect version.	WITHOUT_CLASSIFICATION	0.9999969255538387	WITHOUT_CLASSIFICATION	3.0744461612650694E-6	DESIGN
The RDMS concat() function only supports 2 parameters	WITHOUT_CLASSIFICATION	0.999988231958941	WITHOUT_CLASSIFICATION	1.176804105894092E-5	DESIGN
Dialect method overrides ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999870497280838	WITHOUT_CLASSIFICATION	1.2950271916201838E-4	DESIGN
Original Dialect.java returns " for update";	WITHOUT_CLASSIFICATION	0.9999663000666738	WITHOUT_CLASSIFICATION	3.3699933326252666E-5	DESIGN
Verify the state of this new method in Hibernate 3.0 Dialect.java	WITHOUT_CLASSIFICATION	0.9999693211644476	WITHOUT_CLASSIFICATION	3.067883555242234E-5	DESIGN
Origial Dialect.java returns true;	WITHOUT_CLASSIFICATION	0.9998362887483241	WITHOUT_CLASSIFICATION	1.6371125167588554E-4	DESIGN
The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999969651729715	WITHOUT_CLASSIFICATION	3.0348270284429033E-6	DESIGN
Sequence methods - start. The RDMS dialect needs these	WITHOUT_CLASSIFICATION	0.9999371807822292	WITHOUT_CLASSIFICATION	6.281921777079834E-5	DESIGN
methods to make it possible to use the Native Id generator	WITHOUT_CLASSIFICATION	0.9999803277331563	WITHOUT_CLASSIFICATION	1.9672266843633575E-5	DESIGN
The where clause was added to eliminate this statement from Brute Force Searches.	WITHOUT_CLASSIFICATION	0.9999808834371477	WITHOUT_CLASSIFICATION	1.911656285229985E-5	DESIGN
Sequence methods - end	WITHOUT_CLASSIFICATION	0.9998230302774749	WITHOUT_CLASSIFICATION	1.7696972252518933E-4	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992722498241725	WITHOUT_CLASSIFICATION	7.277501758273799E-4	DESIGN
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.999999474236987	WITHOUT_CLASSIFICATION	5.257630130610836E-7	DESIGN
We must return a valid RDMS/RSA command from this method to prevent RDMS/RSA from issuing ERROR 400	WITHOUT_CLASSIFICATION	0.973366782018681	WITHOUT_CLASSIFICATION	0.02663321798131901	DESIGN
Used with DROP TABLE to delete all records in the table.	WITHOUT_CLASSIFICATION	0.9999995462514579	WITHOUT_CLASSIFICATION	4.5374854199201116E-7	DESIGN
RDMS supports the UNION ALL clause.	WITHOUT_CLASSIFICATION	0.9999988829227425	WITHOUT_CLASSIFICATION	1.1170772575209365E-6	DESIGN
RDMS has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9996414924773633	WITHOUT_CLASSIFICATION	3.5850752263665036E-4	DESIGN
Multi-param dialect functions...	WITHOUT_CLASSIFICATION	0.9999842481109233	WITHOUT_CLASSIFICATION	1.575188907665621E-5	DESIGN
function templates	WITHOUT_CLASSIFICATION	0.9999954435461657	WITHOUT_CLASSIFICATION	4.5564538343322575E-6	DESIGN
not null is implicit	WITHOUT_CLASSIFICATION	0.9999964079366767	WITHOUT_CLASSIFICATION	3.5920633233088794E-6	DESIGN
this assumes schema support, which is present in 1.8.0 and later...	WITHOUT_CLASSIFICATION	0.9938289939516388	WITHOUT_CLASSIFICATION	0.00617100604836118	DESIGN
HSQLDB only supports READ_UNCOMMITTED transaction isolation	WITHOUT_CLASSIFICATION	0.9997244165019897	WITHOUT_CLASSIFICATION	2.755834980102511E-4	DESIGN
Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999921012299217	WITHOUT_CLASSIFICATION	7.898770078408462E-6	DESIGN
Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9999101301672754	WITHOUT_CLASSIFICATION	8.98698327246704E-5	DESIGN
Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999752682454425	WITHOUT_CLASSIFICATION	2.4731754557581298E-5	DESIGN
simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999993257021657	WITHOUT_CLASSIFICATION	6.742978343931948E-7	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992722498241725	WITHOUT_CLASSIFICATION	7.277501758273799E-4	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992722498241725	WITHOUT_CLASSIFICATION	7.277501758273799E-4	DESIGN
not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9998827347056009	WITHOUT_CLASSIFICATION	1.1726529439915456E-4	DESIGN
register the type of the out param - an Oracle specific type	WITHOUT_CLASSIFICATION	0.9985214119151989	WITHOUT_CLASSIFICATION	0.0014785880848010124	DESIGN
TimesTen has no BLOB/CLOB support, but these types may be suitable for some applications. The length is limited to 4 million bytes.	WITHOUT_CLASSIFICATION	0.9999810355898374	WITHOUT_CLASSIFICATION	1.8964410162650904E-5	DESIGN
new methods in dialect3	WITHOUT_CLASSIFICATION	0.9999885129706402	WITHOUT_CLASSIFICATION	1.1487029359756983E-5	DESIGN
public boolean supportsForUpdateNowait() {return false;}	WITHOUT_CLASSIFICATION	0.9999802513414724	WITHOUT_CLASSIFICATION	1.974865852760383E-5	DESIGN
TimesTen has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999381413073444	WITHOUT_CLASSIFICATION	6.18586926556444E-5	DESIGN
iterate entries ordered by capacity to find first fit	WITHOUT_CLASSIFICATION	0.9999619664204537	WITHOUT_CLASSIFICATION	3.803357954629318E-5	DESIGN
add new ordered map	WITHOUT_CLASSIFICATION	0.9999847578222667	WITHOUT_CLASSIFICATION	1.5242177733288964E-5	DESIGN
registerColumnType( Types.VARCHAR, 16777215, "mediumtext" );	WITHOUT_CLASSIFICATION	0.9999816771710558	WITHOUT_CLASSIFICATION	1.8322828944265123E-5	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992722498241725	WITHOUT_CLASSIFICATION	7.277501758273799E-4	DESIGN
This assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.9999978514240847	WITHOUT_CLASSIFICATION	2.148575915405018E-6	DESIGN
sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999729530112008	WITHOUT_CLASSIFICATION	2.704698879917816E-5	DESIGN
return "select CURRENT_TIMESTAMP from RDB$DATABASE";	WITHOUT_CLASSIFICATION	0.9999568928315256	WITHOUT_CLASSIFICATION	4.310716847439247E-5	DESIGN
registerColumnType data types	WITHOUT_CLASSIFICATION	0.9996387953539064	WITHOUT_CLASSIFICATION	3.6120464609360034E-4	DESIGN
hibernate seems to ignore this type...	WITHOUT_CLASSIFICATION	0.9999818781440889	WITHOUT_CLASSIFICATION	1.812185591111261E-5	DESIGN
IBID for current_time and current_date	WITHOUT_CLASSIFICATION	0.9999245700479658	WITHOUT_CLASSIFICATION	7.542995203417832E-5	DESIGN
Tell hibernate to use getBytes instead of getBinaryStream	WITHOUT_CLASSIFICATION	0.9998809515161744	WITHOUT_CLASSIFICATION	1.1904848382567133E-4	DESIGN
No batch statements	WITHOUT_CLASSIFICATION	0.9999999940676334	WITHOUT_CLASSIFICATION	5.932366618707728E-9	DESIGN
We might want a special case for 19,2. This is very common for money types and here it is converted to 18,1	WITHOUT_CLASSIFICATION	0.6196622783018759	DESIGN	0.38033772169812424	WITHOUT_CLASSIFICATION
no pointbase BIT	WITHOUT_CLASSIFICATION	0.999999841084366	WITHOUT_CLASSIFICATION	1.5891563390562154E-7	DESIGN
no pointbase TINYINT	WITHOUT_CLASSIFICATION	0.9999999246754453	WITHOUT_CLASSIFICATION	7.53245548016843E-8	DESIGN
Pointbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9998968445540597	WITHOUT_CLASSIFICATION	1.0315544594033258E-4	DESIGN
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.999999474236987	WITHOUT_CLASSIFICATION	5.257630130610836E-7	DESIGN
The current_timestamp is more accurate, but only known to be supported in SQL Server 7.0 and later (i.e., Sybase not known to support it at all)	WITHOUT_CLASSIFICATION	0.9999782530565116	WITHOUT_CLASSIFICATION	2.1746943488485816E-5	DESIGN
SQL Server (at least up through 2005) does not support defining cascade delete constraints which can circel back to the mutating table	WITHOUT_CLASSIFICATION	0.9999973001607698	WITHOUT_CLASSIFICATION	2.6998392302330185E-6	DESIGN
here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9999719599355232	WITHOUT_CLASSIFICATION	2.8040064476877446E-5	DESIGN
registerColumnType( Types.BLOB, 16777215, "mediumblob" ); registerColumnType( Types.BLOB, 65535, "blob" );	WITHOUT_CLASSIFICATION	0.9999840196850128	WITHOUT_CLASSIFICATION	1.5980314987138538E-5	DESIGN
registerColumnType( Types.CLOB, 16777215, "mediumtext" ); registerColumnType( Types.CLOB, 65535, "text" );	WITHOUT_CLASSIFICATION	0.9999864005468767	WITHOUT_CLASSIFICATION	1.359945312335312E-5	DESIGN
registerColumnType( Types.VARCHAR, 16777215, "mediumtext" ); registerColumnType( Types.VARCHAR, 65535, "text" );	WITHOUT_CLASSIFICATION	0.9999879624319199	WITHOUT_CLASSIFICATION	1.2037568080092194E-5	DESIGN
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.999999474236987	WITHOUT_CLASSIFICATION	5.257630130610836E-7	DESIGN
package-private	WITHOUT_CLASSIFICATION	0.9999782489771899	WITHOUT_CLASSIFICATION	2.1751022810059785E-5	DESIGN
sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999729530112008	WITHOUT_CLASSIFICATION	2.704698879917816E-5	DESIGN
Sybase BIT type does not support null values	WITHOUT_CLASSIFICATION	0.9985626063401716	WITHOUT_CLASSIFICATION	0.001437393659828393	DESIGN
This assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.9999978514240847	WITHOUT_CLASSIFICATION	2.148575915405018E-6	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992722498241725	WITHOUT_CLASSIFICATION	7.277501758273799E-4	DESIGN
You may still have other ResultSets or update counts left to process here but you can't do it now or the ResultSet you just got will be closed	WITHOUT_CLASSIFICATION	0.9999987179182299	WITHOUT_CLASSIFICATION	1.2820817701253983E-6	DESIGN
not null ... (start with 1) is implicit	WITHOUT_CLASSIFICATION	0.9999862594974385	WITHOUT_CLASSIFICATION	1.3740502561614617E-5	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992722498241725	WITHOUT_CLASSIFICATION	7.277501758273799E-4	DESIGN
Oracle driver reports to support getGeneratedKeys(), but they only support the version taking an array of the names of the columns to be returned (via its RETURNING clause). No other driver seems to support this overloaded version.	WITHOUT_CLASSIFICATION	0.9756697832065252	WITHOUT_CLASSIFICATION	0.024330216793474888	DESIGN
Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999921012299217	WITHOUT_CLASSIFICATION	7.898770078408462E-6	DESIGN
Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9999101301672754	WITHOUT_CLASSIFICATION	8.98698327246704E-5	DESIGN
Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999752682454425	WITHOUT_CLASSIFICATION	2.4731754557581298E-5	DESIGN
add another (inner) nested select add the main query close off the inner nested select	WITHOUT_CLASSIFICATION	0.9999999925953132	WITHOUT_CLASSIFICATION	7.404686678035944E-9	DESIGN
add the main query	WITHOUT_CLASSIFICATION	0.99999934245932	WITHOUT_CLASSIFICATION	6.575406800717391E-7	DESIGN
add the restriction to the outer select	WITHOUT_CLASSIFICATION	0.999999767362362	WITHOUT_CLASSIFICATION	2.326376381392652E-7	DESIGN
This assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.9999978514240847	WITHOUT_CLASSIFICATION	2.148575915405018E-6	DESIGN
You may still have other ResultSets or update counts left to process here but you can't do it now or the ResultSet you just got will be closed	WITHOUT_CLASSIFICATION	0.9999987179182299	WITHOUT_CLASSIFICATION	1.2820817701253983E-6	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992722498241725	WITHOUT_CLASSIFICATION	7.277501758273799E-4	DESIGN
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.999999474236987	WITHOUT_CLASSIFICATION	5.257630130610836E-7	DESIGN
simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999993257021657	WITHOUT_CLASSIFICATION	6.742978343931948E-7	DESIGN
not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9998827347056009	WITHOUT_CLASSIFICATION	1.1726529439915456E-4	DESIGN
register the type of the out param - an Oracle specific type	WITHOUT_CLASSIFICATION	0.9985214119151989	WITHOUT_CLASSIFICATION	0.0014785880848010124	DESIGN
features which change between 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996104487529592	WITHOUT_CLASSIFICATION	3.895512470407801E-4	DESIGN
features which remain constant across 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999938555821706	WITHOUT_CLASSIFICATION	6.144417829448411E-6	DESIGN
binary %Stream character %Stream	WITHOUT_CLASSIFICATION	0.9999919887037997	WITHOUT_CLASSIFICATION	8.011296200269812E-6	DESIGN
getDefaultProperties().setProperty(Environment.STATEMENT_BATCH_SIZE, NO_BATCH);	WITHOUT_CLASSIFICATION	0.9999999597199944	WITHOUT_CLASSIFICATION	4.0280005627199415E-8	DESIGN
hibernate impelemnts cast in Dialect.java	WITHOUT_CLASSIFICATION	0.9999935566635195	WITHOUT_CLASSIFICATION	6.443336480448582E-6	DESIGN
aggregate functions shouldn't be registered, right? registerFunction( "list", new StandardSQLFunction("list",Hibernate.STRING) ); stopped on $list	WITHOUT_CLASSIFICATION	0.9997349666875388	WITHOUT_CLASSIFICATION	2.650333124612041E-4	DESIGN
DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9966881084985265	WITHOUT_CLASSIFICATION	0.003311891501473408	DESIGN
below is for Cache' that don't have str in 2007.1 there is str and we register str directly	WITHOUT_CLASSIFICATION	0.9991518167315334	WITHOUT_CLASSIFICATION	8.481832684664861E-4	DESIGN
note that %string is deprecated	WITHOUT_CLASSIFICATION	0.997474299218687	WITHOUT_CLASSIFICATION	0.0025257007813129584	DESIGN
%upper is deprecated	WITHOUT_CLASSIFICATION	0.9998659232077408	WITHOUT_CLASSIFICATION	1.340767922592201E-4	DESIGN
The syntax used to add a foreign key constraint to a table.	WITHOUT_CLASSIFICATION	0.9999999490687	WITHOUT_CLASSIFICATION	5.0931299932329384E-8	DESIGN
identifier-commalist	WITHOUT_CLASSIFICATION	0.9999978712936355	WITHOUT_CLASSIFICATION	2.128706364570378E-6	DESIGN
IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9981090833924113	WITHOUT_CLASSIFICATION	0.0018909166075887906	DESIGN
SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9978203412130627	WITHOUT_CLASSIFICATION	0.0021796587869373114	DESIGN
temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.970417868162512	WITHOUT_CLASSIFICATION	0.029582131837488024	DESIGN
identifier-commalist	WITHOUT_CLASSIFICATION	0.9999978712936355	WITHOUT_CLASSIFICATION	2.128706364570378E-6	DESIGN
The syntax used to add a column to a table	WITHOUT_CLASSIFICATION	0.9999526240711136	WITHOUT_CLASSIFICATION	4.737592888649162E-5	DESIGN
Completely optional cascading drop clause.	WITHOUT_CLASSIFICATION	0.9999757746537276	WITHOUT_CLASSIFICATION	2.4225346272457213E-5	DESIGN
lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9923245629437403	WITHOUT_CLASSIFICATION	0.0076754370562597575	DESIGN
LIMIT support (ala TOP) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9949239133556106	WITHOUT_CLASSIFICATION	0.005076086644389449	DESIGN
InterSystems Cache' does not current support "SELECT ... FOR UPDATE" syntax... Set your transaction mode to READ_COMMITTED before using	WITHOUT_CLASSIFICATION	0.9766343114790169	WITHOUT_CLASSIFICATION	0.02336568852098301	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992722498241725	WITHOUT_CLASSIFICATION	7.277501758273799E-4	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992722498241725	WITHOUT_CLASSIFICATION	7.277501758273799E-4	DESIGN
<String>	WITHOUT_CLASSIFICATION	0.9999511978126667	WITHOUT_CLASSIFICATION	4.88021873332353E-5	DESIGN
callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999774494179942	WITHOUT_CLASSIFICATION	2.25505820057893E-4	DESIGN
miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992111423419274	WITHOUT_CLASSIFICATION	7.888576580725588E-4	DESIGN
The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999969651729715	WITHOUT_CLASSIFICATION	3.0348270284429033E-6	DESIGN
Does the LIMIT clause come at the start of the SELECT statement, rather than at the end?	WITHOUT_CLASSIFICATION	0.999997636368294	WITHOUT_CLASSIFICATION	2.363631706031625E-6	DESIGN
Does the LIMIT clause take a "maximum" row number instead of a total number of returned rows?	WITHOUT_CLASSIFICATION	0.999858449922395	WITHOUT_CLASSIFICATION	1.4155007760494436E-4	DESIGN
The name of the SQL function that transforms a string to lowercase	WITHOUT_CLASSIFICATION	0.9999951372225211	WITHOUT_CLASSIFICATION	4.862777478995354E-6	DESIGN
Create an OuterJoinGenerator for this dialect.	WITHOUT_CLASSIFICATION	0.999942673589657	WITHOUT_CLASSIFICATION	5.732641034297309E-5	DESIGN
The keyword used to insert a row without specifying any column values	WITHOUT_CLASSIFICATION	0.9999979682944429	WITHOUT_CLASSIFICATION	2.0317055571337716E-6	DESIGN
registerFunction( "trim", new StandardSQLFunction( "trim", Hibernate.STRING ) );	WITHOUT_CLASSIFICATION	0.9999991619042845	WITHOUT_CLASSIFICATION	8.380957155547453E-7	DESIGN
skip the FROM keyword in params	WITHOUT_CLASSIFICATION	0.999989700649304	WITHOUT_CLASSIFICATION	1.02993506959597E-5	DESIGN
package	WITHOUT_CLASSIFICATION	0.9991997042405928	WITHOUT_CLASSIFICATION	8.002957594071461E-4	DESIGN
potentialTrimCharacterArgIndex = 1 assumes that a trim-specification has been specified. we handle the exception to that explicitly	WITHOUT_CLASSIFICATION	0.9983094785019389	WITHOUT_CLASSIFICATION	0.0016905214980610919	DESIGN
SQLFunction implementation	WITHOUT_CLASSIFICATION	0.9999968585880288	WITHOUT_CLASSIFICATION	3.141411971295004E-6	DESIGN
conceivable that the dialect ctor could throw HibernateExceptions, so don't re-wrap	WITHOUT_CLASSIFICATION	0.9999727708996039	WITHOUT_CLASSIFICATION	2.722910039598363E-5	DESIGN
register the standard dialect resolver	WITHOUT_CLASSIFICATION	0.9999743604182146	WITHOUT_CLASSIFICATION	2.5639581785373166E-5	DESIGN
register resolvers set via Environment property	WITHOUT_CLASSIFICATION	0.999907305625076	WITHOUT_CLASSIFICATION	9.269437492396879E-5	DESIGN
kept for backward compatibility until after the 3.1beta5 release of HA	WITHOUT_CLASSIFICATION	0.9999874526250341	WITHOUT_CLASSIFICATION	1.2547374965992523E-5	DESIGN
cache the hashcode	WITHOUT_CLASSIFICATION	0.9999963496871138	WITHOUT_CLASSIFICATION	3.6503128860815345E-6	DESIGN
the CascadingAction contract ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999803492459568	WITHOUT_CLASSIFICATION	1.9650754043204924E-5	DESIGN
the CascadingAction implementations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999755250389606	WITHOUT_CLASSIFICATION	2.447496103948595E-5	DESIGN
delete does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999357518138492	WITHOUT_CLASSIFICATION	6.42481861507738E-5	DESIGN
orphans should be deleted during delete	WITHOUT_CLASSIFICATION	0.998302770713694	WITHOUT_CLASSIFICATION	0.0016972292863059765	DESIGN
(LockMode) anything	WITHOUT_CLASSIFICATION	0.9999996975475973	WITHOUT_CLASSIFICATION	3.02452402669825E-7	DESIGN
lock doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999868210894346	WITHOUT_CLASSIFICATION	1.317891056536958E-5	DESIGN
refresh doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999944316259792	WITHOUT_CLASSIFICATION	5.568374020728881E-6	DESIGN
evicts don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999577036073696	WITHOUT_CLASSIFICATION	4.2296392630455034E-5	DESIGN
saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.99999257498136	WITHOUT_CLASSIFICATION	7.425018640005445E-6	DESIGN
orphans should be deleted during save/update	WITHOUT_CLASSIFICATION	0.9998186799380174	WITHOUT_CLASSIFICATION	1.8132006198268827E-4	DESIGN
for deprecated saveOrUpdateCopy()	WITHOUT_CLASSIFICATION	0.9997461420914971	WITHOUT_CLASSIFICATION	2.538579085028079E-4	DESIGN
persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999056274472373	WITHOUT_CLASSIFICATION	9.437255276264319E-5	DESIGN
a proxy cannot be transient and it breaks ForeignKeys.isTransient	WITHOUT_CLASSIFICATION	0.9999591805217367	WITHOUT_CLASSIFICATION	4.0819478263357015E-5	DESIGN
replicate does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9982137685493047	WITHOUT_CLASSIFICATION	0.0017862314506953078	DESIGN
static helper methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999896537480145	WITHOUT_CLASSIFICATION	1.0346251985467967E-5	DESIGN
handles arrays and newly instantiated collections	WITHOUT_CLASSIFICATION	0.9999925538026385	WITHOUT_CLASSIFICATION	7.446197361491616E-6	DESIGN
Actually the semantics of the next three are really "Bag" Note that, unlike objects, collection insertions, updates, deletions are not really remembered between flushes. We just re-use the same Lists for convenience.	WITHOUT_CLASSIFICATION	0.9998922150668154	WITHOUT_CLASSIFICATION	1.0778493318460794E-4	DESIGN
Add these directly to the executions queue	WITHOUT_CLASSIFICATION	0.9997161667841283	WITHOUT_CLASSIFICATION	2.8383321587168586E-4	DESIGN
continue loop	WITHOUT_CLASSIFICATION	0.9999784577356955	WITHOUT_CLASSIFICATION	2.1542264304523747E-5	DESIGN
sort the updates by fk	WITHOUT_CLASSIFICATION	0.9999997484186709	WITHOUT_CLASSIFICATION	2.515813291116951E-7	DESIGN
sort the updates by pk	WITHOUT_CLASSIFICATION	0.9999998075599807	WITHOUT_CLASSIFICATION	1.9244001937906695E-7	DESIGN
the mapping of entity names to their latest batch numbers.	WITHOUT_CLASSIFICATION	0.9999988531652997	WITHOUT_CLASSIFICATION	1.1468347003975798E-6	DESIGN
the map of batch numbers to EntityInsertAction lists	WITHOUT_CLASSIFICATION	0.9999709025426943	WITHOUT_CLASSIFICATION	2.9097457305718483E-5	DESIGN
optimize the hash size to eliminate a rehash.	WITHOUT_CLASSIFICATION	0.9999911615830774	WITHOUT_CLASSIFICATION	8.83841692251315E-6	DESIGN
the list of entity names that indicate the batch number	WITHOUT_CLASSIFICATION	0.9999675692191989	WITHOUT_CLASSIFICATION	3.2430780801046404E-5	DESIGN
remove the current element from insertions. It will be added back later.	WITHOUT_CLASSIFICATION	0.9999941028661233	WITHOUT_CLASSIFICATION	5.897133876563298E-6	DESIGN
the entity associated with the current action.	WITHOUT_CLASSIFICATION	0.9999832820518628	WITHOUT_CLASSIFICATION	1.6717948137207976E-5	DESIGN
There is already an existing batch for this type of entity. Check to see if the latest batch is acceptable.	WITHOUT_CLASSIFICATION	0.9999991122184513	WITHOUT_CLASSIFICATION	8.877815486714276E-7	DESIGN
now rebuild the insertions list. There is a batch for each entry in the name list.	WITHOUT_CLASSIFICATION	0.9999877107733175	WITHOUT_CLASSIFICATION	1.2289226682463211E-5	DESIGN
the current batch number is the latest batch for this entity type.	WITHOUT_CLASSIFICATION	0.9999984639144349	WITHOUT_CLASSIFICATION	1.5360855651643562E-6	DESIGN
loop through all the associations of the current entity and make sure that they are processed before the current batch number	WITHOUT_CLASSIFICATION	0.9957721652805664	WITHOUT_CLASSIFICATION	0.004227834719433502	DESIGN
find the batch number associated with the current association, if any.	WITHOUT_CLASSIFICATION	0.9999993665899385	WITHOUT_CLASSIFICATION	6.33410061434268E-7	DESIGN
create a new batch for this type. The batch number is the number of current batches.	WITHOUT_CLASSIFICATION	0.9999953051864955	WITHOUT_CLASSIFICATION	4.694813504428132E-6	DESIGN
loop through all the associated entities and make sure they have been processed before the latest batch associated with this entity type.	WITHOUT_CLASSIFICATION	0.9998717291935125	WITHOUT_CLASSIFICATION	1.2827080648746464E-4	DESIGN
since this entity will now be processed in the latest possible batch, we can be assured that it will come after all other associations, there's not need to continue checking.	WITHOUT_CLASSIFICATION	0.9998341114947339	WITHOUT_CLASSIFICATION	1.6588850526604195E-4	DESIGN
cascade to current collection elements	WITHOUT_CLASSIFICATION	0.999919216243175	WITHOUT_CLASSIFICATION	8.07837568250531E-5	DESIGN
not really necessary, but good for consistency...	WITHOUT_CLASSIFICATION	0.9991433302542067	WITHOUT_CLASSIFICATION	8.566697457934399E-4	DESIGN
we can't cascade to non-embedded elements	WITHOUT_CLASSIFICATION	0.9999968517651147	WITHOUT_CLASSIFICATION	3.1482348854379935E-6	DESIGN
a newly instantiated collection can't have orphans	WITHOUT_CLASSIFICATION	0.9999863386532569	WITHOUT_CLASSIFICATION	1.36613467430028E-5	DESIGN
handle orphaned entities!!	WITHOUT_CLASSIFICATION	0.9999941320069922	WITHOUT_CLASSIFICATION	5.867993007866817E-6	DESIGN
Loaded entity instances, by EntityUniqueKey	WITHOUT_CLASSIFICATION	0.9998978126974947	WITHOUT_CLASSIFICATION	1.0218730250533059E-4	DESIGN
Identity map of EntityEntry instances, by the entity instance	WITHOUT_CLASSIFICATION	0.999984446411844	WITHOUT_CLASSIFICATION	1.555358815593826E-5	DESIGN
Entity proxies, by EntityKey	WITHOUT_CLASSIFICATION	0.9999983977689963	WITHOUT_CLASSIFICATION	1.6022310036870642E-6	DESIGN
Snapshots of current database state for entities that have not been loaded	WITHOUT_CLASSIFICATION	0.9999879155591965	WITHOUT_CLASSIFICATION	1.2084440803438452E-5	DESIGN
Identity map of array holder ArrayHolder instances, by the array instance	WITHOUT_CLASSIFICATION	0.9999768988518123	WITHOUT_CLASSIFICATION	2.310114818770054E-5	DESIGN
Collection wrappers, by the CollectionKey key=CollectionKey, value=PersistentCollection	WITHOUT_CLASSIFICATION	0.9999972042434107	WITHOUT_CLASSIFICATION	2.7957565894048504E-6	DESIGN
Set of EntityKeys of deleted objects	WITHOUT_CLASSIFICATION	0.9999917256381279	WITHOUT_CLASSIFICATION	8.274361872147444E-6	DESIGN
properties that we have tried to load, and not found in the database	WITHOUT_CLASSIFICATION	0.9999992852938364	WITHOUT_CLASSIFICATION	7.147061634674797E-7	DESIGN
A list of collection wrappers that were instantiating during result set processing, that we will need to initialize at the end of the query	WITHOUT_CLASSIFICATION	0.9974782179444872	WITHOUT_CLASSIFICATION	0.002521782055512846	DESIGN
A container for collections we load up when the owning entity is not yet loaded ... for now, this is purely transient!	WITHOUT_CLASSIFICATION	0.9998575999827043	WITHOUT_CLASSIFICATION	1.4240001729579535E-4	DESIGN
Downgrade locks	WITHOUT_CLASSIFICATION	0.9999805297956831	WITHOUT_CLASSIFICATION	1.9470204316905952E-5	DESIGN
any earlier proxy takes precedence	WITHOUT_CLASSIFICATION	0.9999799899543396	WITHOUT_CLASSIFICATION	2.0010045660521093E-5	DESIGN
unwrap the object	WITHOUT_CLASSIFICATION	0.9999997644432655	WITHOUT_CLASSIFICATION	2.3555673455587938E-7	DESIGN
initialize + unwrap the object	WITHOUT_CLASSIFICATION	0.9999999725443874	WITHOUT_CLASSIFICATION	2.745561261182254E-8	DESIGN
return the proxied object	WITHOUT_CLASSIFICATION	0.9999933370764557	WITHOUT_CLASSIFICATION	6.662923544374485E-6	DESIGN
overwrite old proxy	WITHOUT_CLASSIFICATION	0.999999912358625	WITHOUT_CLASSIFICATION	8.764137503173864E-8	DESIGN
early exit...	WITHOUT_CLASSIFICATION	0.9999993568844089	WITHOUT_CLASSIFICATION	6.431155911373767E-7	DESIGN
or should it actually throw an exception?	WITHOUT_CLASSIFICATION	0.9740850980260117	WITHOUT_CLASSIFICATION	0.025914901973988363	DESIGN
treat it just like a new collection	WITHOUT_CLASSIFICATION	0.9999849959596071	WITHOUT_CLASSIFICATION	1.5004040392923948E-5	DESIGN
do this work only at the very highest level of the load don't let this method be called recursively	WITHOUT_CLASSIFICATION	0.9844566805945578	WITHOUT_CLASSIFICATION	0.015543319405442329	DESIGN
note that each iteration of the loop may add new elements	WITHOUT_CLASSIFICATION	0.9999996698147994	WITHOUT_CLASSIFICATION	3.301852006616118E-7	DESIGN
it might be an unwrapped collection reference! try to find a wrapper (slowish)	WITHOUT_CLASSIFICATION	0.9998966257457149	WITHOUT_CLASSIFICATION	1.0337425428507337E-4	DESIGN
public boolean isNonExistant(EntityKey key) {return nonExistantEntityKeys.contains(key);}	WITHOUT_CLASSIFICATION	0.9999988258219649	WITHOUT_CLASSIFICATION	1.1741780351152166E-6	DESIGN
public boolean isNonExistant(EntityUniqueKey key) {return nonExistentEntityUniqueKeys.contains(key);}	WITHOUT_CLASSIFICATION	0.9999884080701389	WITHOUT_CLASSIFICATION	1.1591929861143077E-5	DESIGN
iterate all the entities currently associated with the persistence context.	WITHOUT_CLASSIFICATION	0.9999850717509725	WITHOUT_CLASSIFICATION	1.492824902753465E-5	DESIGN
does this entity entry pertain to the entity persister in which we are interested (owner)?	WITHOUT_CLASSIFICATION	0.9990360309891803	WITHOUT_CLASSIFICATION	9.63969010819712E-4	DESIGN
check if the managed object is the parent	WITHOUT_CLASSIFICATION	0.9998919402997072	WITHOUT_CLASSIFICATION	1.0805970029289594E-4	DESIGN
otherwise, the proxy was pruned during the serialization process	WITHOUT_CLASSIFICATION	0.9999930754116861	WITHOUT_CLASSIFICATION	6.9245883138934106E-6	DESIGN
adds remove as a sort-of alias for delete...	WITHOUT_CLASSIFICATION	0.9999525071993379	WITHOUT_CLASSIFICATION	4.7492800662094064E-5	DESIGN
bad cast	WITHOUT_CLASSIFICATION	0.9999893954834101	WITHOUT_CLASSIFICATION	1.0604516589844564E-5	DESIGN
return lhsPersister.getSubclassPropertyColumnNames(property);	WITHOUT_CLASSIFICATION	0.9999162965654803	WITHOUT_CLASSIFICATION	8.370343451979144E-5	DESIGN
property-refs for associations defined on a component are not supported, so no need to slice	WITHOUT_CLASSIFICATION	0.9881233925602276	WITHOUT_CLASSIFICATION	0.01187660743977234	DESIGN
if there is no property-ref, assume the join is to the subclass table (ie. the table of the subclass that the association belongs to)	WITHOUT_CLASSIFICATION	0.9999939367287991	WITHOUT_CLASSIFICATION	6.063271200925883E-6	DESIGN
handle a property-ref	WITHOUT_CLASSIFICATION	0.9999973545205135	WITHOUT_CLASSIFICATION	2.6454794865336645E-6	DESIGN
NativeSQLQueryReturn	WITHOUT_CLASSIFICATION	0.9999969663559332	WITHOUT_CLASSIFICATION	3.033644066810743E-6	DESIGN
final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999935291216332	WITHOUT_CLASSIFICATION	6.47087836682298E-6	DESIGN
why is all others non final ?	WITHOUT_CLASSIFICATION	0.9999949401011651	WITHOUT_CLASSIFICATION	5.059898834905797E-6	DESIGN
this.forceCacheRefresh = forceCacheRefresh;	WITHOUT_CLASSIFICATION	0.9999991841291751	WITHOUT_CLASSIFICATION	8.158708248299594E-7	DESIGN
HELLA IMPORTANT OPTIMIZATION!!!	WITHOUT_CLASSIFICATION	0.9997448116393961	WITHOUT_CLASSIFICATION	2.551883606038886E-4	DESIGN
return that.type.equals(type) && EqualsHelper.equals(that.value, value);	WITHOUT_CLASSIFICATION	0.9999936299084081	WITHOUT_CLASSIFICATION	6.370091591819016E-6	DESIGN
Must occur after resolving identifiers!	WITHOUT_CLASSIFICATION	0.9999503389718705	WITHOUT_CLASSIFICATION	4.966102812948516E-5	DESIGN
take a snapshot	WITHOUT_CLASSIFICATION	0.9999986736893571	WITHOUT_CLASSIFICATION	1.3263106428688538E-6	DESIGN
do a check	WITHOUT_CLASSIFICATION	0.9999955464220704	WITHOUT_CLASSIFICATION	4.453577929465199E-6	DESIGN
the owning entity may have been deleted and its identifier unset due to identifier-rollback; in which case, try to look up its identifier from the persistence context	WITHOUT_CLASSIFICATION	0.9999939574303255	WITHOUT_CLASSIFICATION	6.042569674556162E-6	DESIGN
do the work	WITHOUT_CLASSIFICATION	0.9999122464116261	WITHOUT_CLASSIFICATION	8.775358837379695E-5	DESIGN
We've been here before	WITHOUT_CLASSIFICATION	0.9999502529862798	WITHOUT_CLASSIFICATION	4.974701372018349E-5	DESIGN
it is or was referenced _somewhere_	WITHOUT_CLASSIFICATION	0.9998869924817568	WITHOUT_CLASSIFICATION	1.1300751824314791E-4	DESIGN
do the work	WITHOUT_CLASSIFICATION	0.9999122464116261	WITHOUT_CLASSIFICATION	8.775358837379695E-5	DESIGN
if either its role changed,	WITHOUT_CLASSIFICATION	0.9999999310056266	WITHOUT_CLASSIFICATION	6.899437342654564E-8	DESIGN
or its key changed	WITHOUT_CLASSIFICATION	0.9999999666730854	WITHOUT_CLASSIFICATION	3.332691458885399E-8	DESIGN
we will need to create new entries	WITHOUT_CLASSIFICATION	0.9999253529087999	WITHOUT_CLASSIFICATION	7.464709120000763E-5	DESIGN
we will need to remove ye olde entries	WITHOUT_CLASSIFICATION	0.9995889533866905	WITHOUT_CLASSIFICATION	4.110466133094152E-4	DESIGN
force initialize!	WITHOUT_CLASSIFICATION	0.9999998661465107	WITHOUT_CLASSIFICATION	1.338534892505426E-7	DESIGN
else if it's elements changed	WITHOUT_CLASSIFICATION	0.9999997566401672	WITHOUT_CLASSIFICATION	2.433598328722942E-7	DESIGN
ATTRIBUTES MAINTAINED BETWEEN FLUSH CYCLES	WITHOUT_CLASSIFICATION	0.9996700334889043	WITHOUT_CLASSIFICATION	3.2996651109567333E-4	DESIGN
session-start/post-flush persistent state	WITHOUT_CLASSIFICATION	0.9999956781493142	WITHOUT_CLASSIFICATION	4.32185068573459E-6	DESIGN
allow the CollectionSnapshot to be serialized	WITHOUT_CLASSIFICATION	0.9999570926961767	WITHOUT_CLASSIFICATION	4.290730382322875E-5	DESIGN
ATTRIBUTES USED ONLY DURING FLUSH CYCLE	WITHOUT_CLASSIFICATION	0.9998448244282399	WITHOUT_CLASSIFICATION	1.5517557176021853E-4	DESIGN
"current" means the reference that was found during flush()	WITHOUT_CLASSIFICATION	0.9999828733364802	WITHOUT_CLASSIFICATION	1.7126663519839172E-5	DESIGN
"loaded" means the reference that is consistent with the current database state	WITHOUT_CLASSIFICATION	0.9999625768660952	WITHOUT_CLASSIFICATION	3.742313390472716E-5	DESIGN
during flush, we navigate the object graph to collections and decide what to do with them	WITHOUT_CLASSIFICATION	0.9986136139828717	WITHOUT_CLASSIFICATION	0.0013863860171282065	DESIGN
if we instantiate a collection during the flush() process, we must ignore it for the rest of the flush()	WITHOUT_CLASSIFICATION	0.9999619111235959	WITHOUT_CLASSIFICATION	3.808887640419368E-5	DESIGN
new collections that get found + wrapped during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999806201874295	WITHOUT_CLASSIFICATION	1.9379812570593563E-5	DESIGN
a newly wrapped collection is NOT dirty (or we get unnecessary version updates)	WITHOUT_CLASSIFICATION	0.9999466993821404	WITHOUT_CLASSIFICATION	5.330061785952456E-5	DESIGN
collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9999935990522154	WITHOUT_CLASSIFICATION	6.400947784671988E-6	DESIGN
collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9999935990522154	WITHOUT_CLASSIFICATION	6.400947784671988E-6	DESIGN
detached collections that get found + reattached during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.999975556232103	WITHOUT_CLASSIFICATION	2.4443767897092216E-5	DESIGN
optimization	WITHOUT_CLASSIFICATION	0.9999889283713296	WITHOUT_CLASSIFICATION	1.1071628670468884E-5	DESIGN
optimization optimization	WITHOUT_CLASSIFICATION	0.9999989155855357	WITHOUT_CLASSIFICATION	1.0844144643287967E-6	DESIGN
re-snapshot	WITHOUT_CLASSIFICATION	0.9999877491411521	WITHOUT_CLASSIFICATION	1.2250858847937334E-5	DESIGN
for convenience to save some lookups	WITHOUT_CLASSIFICATION	0.9999118038900646	WITHOUT_CLASSIFICATION	8.819610993535724E-5	DESIGN
NOTE: this is not updated when properties are fetched lazily!	WITHOUT_CLASSIFICATION	0.9999892183721999	WITHOUT_CLASSIFICATION	1.0781627800173612E-5	DESIGN
memory optimization	WITHOUT_CLASSIFICATION	0.9999997281697106	WITHOUT_CLASSIFICATION	2.718302894613194E-7	DESIGN
use the id value of a newly instantiated instance as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999975849368221	WITHOUT_CLASSIFICATION	2.415063177827744E-6	DESIGN
copied from Session:	WITHOUT_CLASSIFICATION	0.9999357100864055	WITHOUT_CLASSIFICATION	6.42899135944781E-5	DESIGN
this should not happen since the DTD prevents it	WITHOUT_CLASSIFICATION	0.9999676496384721	WITHOUT_CLASSIFICATION	3.2350361527922244E-5	DESIGN
JoinProcessor needs to know if the where clause fragment came from a dynamic filter or not so it can put the where clause fragment in the right place in the SQL AST. 'hasFilterCondition' keeps track of that fact.	WITHOUT_CLASSIFICATION	0.693848533264689	WITHOUT_CLASSIFICATION	0.3061514667353109	DESIGN
the current join represents the join between a many-to-many association table and its "target" table. Here we need to apply any additional filters defined specifically on the many-to-many	WITHOUT_CLASSIFICATION	0.99999298315137	WITHOUT_CLASSIFICATION	7.0168486300641084E-6	DESIGN
check basic level one nullablilty	WITHOUT_CLASSIFICATION	0.9999913928374087	WITHOUT_CLASSIFICATION	8.607162591194349E-6	DESIGN
values is not null and is checkable, we'll look deeper	WITHOUT_CLASSIFICATION	0.9999988615805478	WITHOUT_CLASSIFICATION	1.1384194521555038E-6	DESIGN
for non null args, check for components and elements containing components	WITHOUT_CLASSIFICATION	0.9999993918293393	WITHOUT_CLASSIFICATION	6.081706607644485E-7	DESIGN
cache the hashcode	WITHOUT_CLASSIFICATION	0.9999963496871138	WITHOUT_CLASSIFICATION	3.6503128860815345E-6	DESIGN
persistent collections may have components	WITHOUT_CLASSIFICATION	0.999906886365742	WITHOUT_CLASSIFICATION	9.311363425799254E-5	DESIGN
check for all components values in the collection	WITHOUT_CLASSIFICATION	0.9999772576503536	WITHOUT_CLASSIFICATION	2.2742349646455045E-5	DESIGN
will check current level if some of them are not null or sublevels if they exist	WITHOUT_CLASSIFICATION	0.9999996139559	WITHOUT_CLASSIFICATION	3.86044100072768E-7	DESIGN
do the test	WITHOUT_CLASSIFICATION	0.9999984993575576	WITHOUT_CLASSIFICATION	1.5006424423659075E-6	DESIGN
if its an uninitialized proxy it can't be transient	WITHOUT_CLASSIFICATION	0.9999981978979898	WITHOUT_CLASSIFICATION	1.802102010244816E-6	DESIGN
unwrap it	WITHOUT_CLASSIFICATION	0.9999964812578901	WITHOUT_CLASSIFICATION	3.518742109843666E-6	DESIGN
See if the entity is already bound to this session, if not look at the entity identifier and assume that the entity is persistent if the id is not "unsaved" (that is, we rely on foreign keys to keep database integrity)	WITHOUT_CLASSIFICATION	0.9986894588546275	WITHOUT_CLASSIFICATION	0.0013105411453725499	DESIGN
an unfetched association can only point to an entity that already exists in the db	WITHOUT_CLASSIFICATION	0.9999982792299864	WITHOUT_CLASSIFICATION	1.7207700135437317E-6	DESIGN
let the interceptor inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999912495175672	WITHOUT_CLASSIFICATION	8.750482432670051E-6	DESIGN
let the persister inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999125086464876	WITHOUT_CLASSIFICATION	8.74913535124535E-5	DESIGN
we use the assumed value, if there is one, to avoid hitting the database	WITHOUT_CLASSIFICATION	0.9999988728221169	WITHOUT_CLASSIFICATION	1.127177883130067E-6	DESIGN
hit the database, after checking the session cache for a snapshot	WITHOUT_CLASSIFICATION	0.99996507608823	WITHOUT_CLASSIFICATION	3.492391177003908E-5	DESIGN
context-entity-identifier returns null explicitly if the entity is not associated with the persistence context; so make some deeper checks...	WITHOUT_CLASSIFICATION	0.9999930663909378	WITHOUT_CLASSIFICATION	6.9336090622132296E-6	DESIGN
int count = 0;	WITHOUT_CLASSIFICATION	0.9999998064738274	WITHOUT_CLASSIFICATION	1.935261727662951E-7	DESIGN
the first key found after the given key	WITHOUT_CLASSIFICATION	0.999986902342138	WITHOUT_CLASSIFICATION	1.3097657862047024E-5	DESIGN
checkForEnd = false;	WITHOUT_CLASSIFICATION	0.999999821723321	WITHOUT_CLASSIFICATION	1.7827667891071143E-7	DESIGN
count++;	WITHOUT_CLASSIFICATION	0.9999250563728735	WITHOUT_CLASSIFICATION	7.494362712640922E-5	DESIGN
end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999958349869285	WITHOUT_CLASSIFICATION	4.165013071566332E-6	DESIGN
we ran out of keys to try	WITHOUT_CLASSIFICATION	0.9999984343655156	WITHOUT_CLASSIFICATION	1.5656344843861268E-6	DESIGN
first element of array is reserved for the actual instance we are loading!	WITHOUT_CLASSIFICATION	0.9999899300100613	WITHOUT_CLASSIFICATION	1.0069989938652788E-5	DESIGN
the first id found after the given id	WITHOUT_CLASSIFICATION	0.9999857809739734	WITHOUT_CLASSIFICATION	1.4219026026636616E-5	DESIGN
we ran out of ids to try	WITHOUT_CLASSIFICATION	0.999997743877957	WITHOUT_CLASSIFICATION	2.256122042973535E-6	DESIGN
look for existing collection as part of the persistence context	WITHOUT_CLASSIFICATION	0.9999900193802804	WITHOUT_CLASSIFICATION	9.980619719673923E-6	DESIGN
ignore this row of results! Note the early exit	WITHOUT_CLASSIFICATION	0.9999997643472479	WITHOUT_CLASSIFICATION	2.3565275216379968E-7	DESIGN
initialize this collection	WITHOUT_CLASSIFICATION	0.9999843829599403	WITHOUT_CLASSIFICATION	1.5617040059711184E-5	DESIGN
create one	WITHOUT_CLASSIFICATION	0.9999957558966283	WITHOUT_CLASSIFICATION	4.244103371663209E-6	DESIGN
warning: can cause a recursive calls! (proxy initialization)	WITHOUT_CLASSIFICATION	0.9999173993986081	WITHOUT_CLASSIFICATION	8.260060139182977E-5	DESIGN
there were no queued additions and the role has a cache	WITHOUT_CLASSIFICATION	0.9999964409232331	WITHOUT_CLASSIFICATION	3.5590767667587045E-6	DESIGN
and this is not a forced initialization during flush	WITHOUT_CLASSIFICATION	0.9998866939526889	WITHOUT_CLASSIFICATION	1.1330604731107555E-4	DESIGN
some filters affecting the collection are enabled on the session, so do not do the put into the cache.	WITHOUT_CLASSIFICATION	0.9999802175802045	WITHOUT_CLASSIFICATION	1.9782419795441218E-5	DESIGN
cleanup code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9985386672786394	WITHOUT_CLASSIFICATION	0.0014613327213605963	DESIGN
loading collection xrefs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999977824042128	WITHOUT_CLASSIFICATION	2.2175957871944574E-5	DESIGN
Collection load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999882093985838	WITHOUT_CLASSIFICATION	1.1790601416193431E-5	DESIGN
simple cache of param metadata based on query string. Ideally, the original "user-supplied query" string should be used to retreive this metadata (i.e., not the para-list-expanded query string) to avoid unnecessary cache entries. Used solely for caching param metadata for native-sql queries, see getSQLParameterMetadata() for a discussion as to why...	WITHOUT_CLASSIFICATION	0.9908935703370356	WITHOUT_CLASSIFICATION	0.009106429662964436	DESIGN
the cache of the actual plans...	WITHOUT_CLASSIFICATION	0.9999885677494514	WITHOUT_CLASSIFICATION	1.1432250548600576E-5	DESIGN
package	WITHOUT_CLASSIFICATION	0.9991997042405928	WITHOUT_CLASSIFICATION	8.002957594071461E-4	DESIGN
package	WITHOUT_CLASSIFICATION	0.9991997042405928	WITHOUT_CLASSIFICATION	8.002957594071461E-4	DESIGN
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999646184875856	WITHOUT_CLASSIFICATION	3.5381512414549606E-5	DESIGN
for native-sql queries, the param metadata is determined outside any relation to a query plan, because query plan creation and/or retreival for a native-sql query depends on all of the return types having been set, which might not be the case up-front when param metadata would be most useful	WITHOUT_CLASSIFICATION	0.9410486542086366	WITHOUT_CLASSIFICATION	0.0589513457913635	DESIGN
don't care...	WITHOUT_CLASSIFICATION	0.9999936492858282	WITHOUT_CLASSIFICATION	6.350714171806312E-6	DESIGN
Recognition code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9990960695816916	WITHOUT_CLASSIFICATION	9.039304183084522E-4	DESIGN
don't care...	WITHOUT_CLASSIFICATION	0.9999936492858282	WITHOUT_CLASSIFICATION	6.350714171806312E-6	DESIGN
NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9999989302265642	WITHOUT_CLASSIFICATION	1.0697734357987123E-6	DESIGN
break the outer loop !!!	WITHOUT_CLASSIFICATION	0.9999953874521995	WITHOUT_CLASSIFICATION	4.612547800524669E-6	DESIGN
named parameter	WITHOUT_CLASSIFICATION	0.9999687902386166	WITHOUT_CLASSIFICATION	3.120976138337453E-5	DESIGN
could be either an ordinal or JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9998536583886046	WITHOUT_CLASSIFICATION	1.4634161139531814E-4	DESIGN
a peek ahead showed this as an JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9998740714848391	WITHOUT_CLASSIFICATION	1.2592851516088834E-4	DESIGN
make sure this "name" is an integral	WITHOUT_CLASSIFICATION	0.9968434702253596	WITHOUT_CLASSIFICATION	0.0031565297746405404	DESIGN
pre-determine and cache the hashcode	WITHOUT_CLASSIFICATION	0.9999056717391603	WITHOUT_CLASSIFICATION	9.432826083966449E-5	DESIGN
perform the actual work	WITHOUT_CLASSIFICATION	0.9999905054448274	WITHOUT_CLASSIFICATION	9.49455517262486E-6	DESIGN
if everything went ok, commit the transaction and close the obtained connection handle...	WITHOUT_CLASSIFICATION	0.9999999831569272	WITHOUT_CLASSIFICATION	1.684307272462248E-8	DESIGN
at some point the processing went bad, so we need to: 1) make sure the connection handle gets released 2) try to cleanup the JTA context as much as possible	WITHOUT_CLASSIFICATION	0.9999826655119968	WITHOUT_CLASSIFICATION	1.7334488003238826E-5	DESIGN
finally handle the exception	WITHOUT_CLASSIFICATION	0.9999994508802758	WITHOUT_CLASSIFICATION	5.491197242540544E-7	DESIGN
a "detached" collection that belonged to a different entity	WITHOUT_CLASSIFICATION	0.9670337900547439	WITHOUT_CLASSIFICATION	0.032966209945256154	DESIGN
saveOrUpdateCopy() is deprecated!	WITHOUT_CLASSIFICATION	0.9999661030792315	WITHOUT_CLASSIFICATION	3.389692076842507E-5	DESIGN
collectionPersister should not be null, but we don't want to throw an exception if it is null	WITHOUT_CLASSIFICATION	0.505730760500387	DESIGN	0.4942692394996131	WITHOUT_CLASSIFICATION
otherwise a null or brand new collection this will also (inefficiently) handle arrays, which have no snapshot, so we can't do any better processArrayOrNewCollection(collection, type);	WITHOUT_CLASSIFICATION	0.9693081117733925	WITHOUT_CLASSIFICATION	0.03069188822660755	DESIGN
a "detached" collection that originally belonged to the same entity	WITHOUT_CLASSIFICATION	0.9863947203527251	WITHOUT_CLASSIFICATION	0.013605279647274766	DESIGN
do nothing	WITHOUT_CLASSIFICATION	0.999999812132107	WITHOUT_CLASSIFICATION	1.878678931572546E-7	DESIGN
do nothing	WITHOUT_CLASSIFICATION	0.999999812132107	WITHOUT_CLASSIFICATION	1.878678931572546E-7	DESIGN
Force a substitution!	WITHOUT_CLASSIFICATION	0.9999643260329507	WITHOUT_CLASSIFICATION	3.567396704917333E-5	DESIGN
The user requested a "greater" (i.e. more restrictive) form of pessimistic lock	WITHOUT_CLASSIFICATION	0.9999982139654298	WITHOUT_CLASSIFICATION	1.7860345702736492E-6	DESIGN
the database now holds a lock + the object is flushed from the cache, so release the soft lock	WITHOUT_CLASSIFICATION	0.9999996375596262	WITHOUT_CLASSIFICATION	3.624403737872441E-7	DESIGN
now update the object .. has to be outside the main if block above (because of collections)	WITHOUT_CLASSIFICATION	0.9999683710247241	WITHOUT_CLASSIFICATION	3.1628975275907094E-5	DESIGN
Search for collections by reachability, updating their role. We don't want to touch collections reachable from a deleted object	WITHOUT_CLASSIFICATION	0.9988391287491045	WITHOUT_CLASSIFICATION	0.0011608712508955695	DESIGN
this is a situation where the entity id is assigned by a post-insert generator and was saved outside the transaction forcing it to be delayed	WITHOUT_CLASSIFICATION	0.999963231103814	WITHOUT_CLASSIFICATION	3.676889618603593E-5	DESIGN
NOTE: we need to do the wrap here even if its not "dirty", because collections need wrapping but changes to _them_ don't dirty the container. Also, for versioned data, we need to wrap before calling searchForDirtyCollections	WITHOUT_CLASSIFICATION	0.99991742037286	WITHOUT_CLASSIFICATION	8.257962714002949E-5	DESIGN
grab its state saved at deletion	WITHOUT_CLASSIFICATION	0.9999027759222434	WITHOUT_CLASSIFICATION	9.722407775664657E-5	DESIGN
grab its current state	WITHOUT_CLASSIFICATION	0.999999333497662	WITHOUT_CLASSIFICATION	6.665023380293933E-7	DESIGN
schedule the update note that we intentionally do _not_ pass in currentPersistentState!	WITHOUT_CLASSIFICATION	0.9998830557967048	WITHOUT_CLASSIFICATION	1.1694420329525946E-4	DESIGN
substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.999992783825208	WITHOUT_CLASSIFICATION	7.216174792065307E-6	DESIGN
give the Interceptor a chance to process property values, if the properties were modified by the Interceptor, we need to set them back to the object	WITHOUT_CLASSIFICATION	0.9999856585234086	WITHOUT_CLASSIFICATION	1.4341476591315218E-5	DESIGN
compare to cached state (ignoring collections unless versioned)	WITHOUT_CLASSIFICATION	0.9999543325457086	WITHOUT_CLASSIFICATION	4.5667454291304636E-5	DESIGN
if it was dirtied by a collection only	WITHOUT_CLASSIFICATION	0.9999793025487749	WITHOUT_CLASSIFICATION	2.069745122516986E-5	DESIGN
increment the version number (if necessary)	WITHOUT_CLASSIFICATION	0.9996802431231558	WITHOUT_CLASSIFICATION	3.197568768442138E-4	DESIGN
check nullability but do not perform command execute we'll use scheduled updates for that.	WITHOUT_CLASSIFICATION	0.9999952895530194	WITHOUT_CLASSIFICATION	4.7104469806222495E-6	DESIGN
give the Interceptor a chance to modify property values	WITHOUT_CLASSIFICATION	0.9999978499318387	WITHOUT_CLASSIFICATION	2.1500681613712825E-6	DESIGN
now we might need to recalculate the dirtyProperties array	WITHOUT_CLASSIFICATION	0.9996069503890963	WITHOUT_CLASSIFICATION	3.930496109036866E-4	DESIGN
use the current version	WITHOUT_CLASSIFICATION	0.9999901153150665	WITHOUT_CLASSIFICATION	9.884684933414077E-6	DESIGN
Interceptor returned null, so do the dirtycheck ourself, if possible	WITHOUT_CLASSIFICATION	0.9999991972566047	WITHOUT_CLASSIFICATION	8.027433951938396E-7	DESIGN
object loaded by update()	WITHOUT_CLASSIFICATION	0.9999998363043737	WITHOUT_CLASSIFICATION	1.6369562627549927E-7	DESIGN
dirty check against the usual snapshot of the entity	WITHOUT_CLASSIFICATION	0.999999741495504	WITHOUT_CLASSIFICATION	2.585044959665924E-7	DESIGN
dirty check against the database snapshot, if possible/necessary	WITHOUT_CLASSIFICATION	0.9999998837062508	WITHOUT_CLASSIFICATION	1.1629374907037592E-7	DESIGN
the Interceptor handled the dirty checking	WITHOUT_CLASSIFICATION	0.9999993601228649	WITHOUT_CLASSIFICATION	6.398771350083321E-7	DESIGN
even process null collections	WITHOUT_CLASSIFICATION	0.9999691407284621	WITHOUT_CLASSIFICATION	3.0859271537882325E-5	DESIGN
get the id from the object	WITHOUT_CLASSIFICATION	0.9999995182167699	WITHOUT_CLASSIFICATION	4.817832300966355E-7	DESIGN
always do an INSERT, and let it fail by constraint violation	WITHOUT_CLASSIFICATION	0.9999976664602934	WITHOUT_CLASSIFICATION	2.333539706698434E-6	DESIGN
what is the version on the database?	WITHOUT_CLASSIFICATION	0.9990511618687975	WITHOUT_CLASSIFICATION	9.488381312024483E-4	DESIGN
/ HHH-2378	WITHOUT_CLASSIFICATION	0.9999681557341512	WITHOUT_CLASSIFICATION	3.184426584886867E-5	DESIGN
will result in a SQL UPDATE:	WITHOUT_CLASSIFICATION	0.9999995520088678	WITHOUT_CLASSIFICATION	4.479911321880941E-7	DESIGN
else do nothing (don't even reassociate object!)	WITHOUT_CLASSIFICATION	0.9999922490940848	WITHOUT_CLASSIFICATION	7.750905915091402E-6	DESIGN
no existing row - do an insert	WITHOUT_CLASSIFICATION	0.9999786824681495	WITHOUT_CLASSIFICATION	2.1317531850610803E-5	DESIGN
refresh() does not pass an entityName	WITHOUT_CLASSIFICATION	0.999999074829703	WITHOUT_CLASSIFICATION	9.251702970812023E-7	DESIGN
do not return a proxy! (this option indicates we are initializing a proxy)	WITHOUT_CLASSIFICATION	0.9999469423281949	WITHOUT_CLASSIFICATION	5.305767180516223E-5	DESIGN
return a proxy if appropriate	WITHOUT_CLASSIFICATION	0.999976104162236	WITHOUT_CLASSIFICATION	2.3895837763866997E-5	DESIGN
return existing object or initialized proxy (unless deleted)	WITHOUT_CLASSIFICATION	0.9999963723436487	WITHOUT_CLASSIFICATION	3.627656351324906E-6	DESIGN
return new uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999995393797065	WITHOUT_CLASSIFICATION	4.6062029349247E-7	DESIGN
this object was already loaded	WITHOUT_CLASSIFICATION	0.9999821857946857	WITHOUT_CLASSIFICATION	1.7814205314328086E-5	DESIGN
Entity was found in second-level cache...	WITHOUT_CLASSIFICATION	0.9999649593953176	WITHOUT_CLASSIFICATION	3.5040604682391706E-5	DESIGN
make it circular-reference safe	WITHOUT_CLASSIFICATION	0.9999144389023006	WITHOUT_CLASSIFICATION	8.556109769943695E-5	DESIGN
intializes result by side-effect	WITHOUT_CLASSIFICATION	0.99999338328596	WITHOUT_CLASSIFICATION	6.616714039925078E-6	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Pre-flushing section ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999463672302737	WITHOUT_CLASSIFICATION	5.3632769726258213E-5	DESIGN
some statistics	WITHOUT_CLASSIFICATION	0.9999996425612145	WITHOUT_CLASSIFICATION	3.5743878539173176E-7	DESIGN
safe from concurrent modification because of how entryList() is implemented on IdentityMap	WITHOUT_CLASSIFICATION	0.9998921080481243	WITHOUT_CLASSIFICATION	1.0789195187555518E-4	DESIGN
Initialize dirty flags for arrays + collections with composite elements and reset reached, doupdate, etc.	WITHOUT_CLASSIFICATION	0.9999998871584361	WITHOUT_CLASSIFICATION	1.1284156386533265E-7	DESIGN
Among other things, updateReachables() will recursively load all collections that are moving roles. This might cause entities to be loaded.	WITHOUT_CLASSIFICATION	0.997754491578258	WITHOUT_CLASSIFICATION	0.002245508421742056	DESIGN
So this needs to be safe from concurrent modification problems. It is safe because of how IdentityMap implements entrySet()	WITHOUT_CLASSIFICATION	0.566688916541701	DESIGN	0.43331108345829905	WITHOUT_CLASSIFICATION
Update the status of the object and if necessary, schedule an update	WITHOUT_CLASSIFICATION	0.9999999049620795	WITHOUT_CLASSIFICATION	9.503792052709776E-8	DESIGN
Schedule updates to collections:	WITHOUT_CLASSIFICATION	0.9999992173159113	WITHOUT_CLASSIFICATION	7.826840886311042E-7	DESIGN
we need to lock the collection caches before executing entity inserts/updates in order to account for bidi associations	WITHOUT_CLASSIFICATION	0.9990204502463909	WITHOUT_CLASSIFICATION	9.79549753609099E-4	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Post-flushing section ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999947369188347	WITHOUT_CLASSIFICATION	5.263081165272725E-6	DESIGN
the database has changed now, so the subselect results need to be invalidated	WITHOUT_CLASSIFICATION	0.9999998112627534	WITHOUT_CLASSIFICATION	1.8873724667650382E-7	DESIGN
if the collection is dereferenced, remove from the session cache iter.remove(); does not work, since the entrySet is not backed by the set	WITHOUT_CLASSIFICATION	0.9999981160033055	WITHOUT_CLASSIFICATION	1.8839966945663304E-6	DESIGN
otherwise recreate the mapping between the collection and its key	WITHOUT_CLASSIFICATION	0.9999558779561052	WITHOUT_CLASSIFICATION	4.4122043894740424E-5	DESIGN
get a snapshot	WITHOUT_CLASSIFICATION	0.9999993792673149	WITHOUT_CLASSIFICATION	6.207326850506059E-7	DESIGN
package-private	WITHOUT_CLASSIFICATION	0.9999782489771899	WITHOUT_CLASSIFICATION	2.1751022810059785E-5	DESIGN
package-private	WITHOUT_CLASSIFICATION	0.9999782489771899	WITHOUT_CLASSIFICATION	2.1751022810059785E-5	DESIGN
key is an entity involved with the operation performed by the listener; value is a flag indicating if the listener explicitly operates on the entity	WITHOUT_CLASSIFICATION	0.9999648961720673	WITHOUT_CLASSIFICATION	3.510382793267352E-5	DESIGN
EARLY EXIT!!!	WITHOUT_CLASSIFICATION	0.999969551147436	WITHOUT_CLASSIFICATION	3.0448852563941703E-5	DESIGN
ie. the entity came in from update()	WITHOUT_CLASSIFICATION	0.9999756987083889	WITHOUT_CLASSIFICATION	2.430129161113498E-5	DESIGN
before any callbacks, etc, so subdeletions see that this deletion happened first	WITHOUT_CLASSIFICATION	0.9981854738106739	WITHOUT_CLASSIFICATION	0.0018145261893260701	DESIGN
Ensures that containing deletions happen before sub-deletions	WITHOUT_CLASSIFICATION	0.9999518114372895	WITHOUT_CLASSIFICATION	4.81885627105376E-5	DESIGN
TypeFactory.deepCopy( currentState, propTypes, persister.getPropertyUpdateability(), deletedState, session );	WITHOUT_CLASSIFICATION	0.9999957619388269	WITHOUT_CLASSIFICATION	4.238061173045927E-6	DESIGN
cascade-delete to collections BEFORE the collection owner is deleted	WITHOUT_CLASSIFICATION	0.9999425275781197	WITHOUT_CLASSIFICATION	5.7472421880245475E-5	DESIGN
cascade-delete to many-to-one AFTER the parent was deleted	WITHOUT_CLASSIFICATION	0.9997170737957649	WITHOUT_CLASSIFICATION	2.8292620423505966E-4	DESIGN
if it is an initialized proxy, let cascade handle it later on	WITHOUT_CLASSIFICATION	0.9999986009085123	WITHOUT_CLASSIFICATION	1.3990914876685557E-6	DESIGN
assign the requested id to the proxy, before reassociating the proxy	WITHOUT_CLASSIFICATION	0.9999998880469612	WITHOUT_CLASSIFICATION	1.1195303891204293E-7	DESIGN
an uninitialized proxy, noop, don't even need to return an id, since it is never a save()	WITHOUT_CLASSIFICATION	0.9999942468776093	WITHOUT_CLASSIFICATION	5.753122390631313E-6	DESIGN
initialize properties of the event:	WITHOUT_CLASSIFICATION	0.9999997008743897	WITHOUT_CLASSIFICATION	2.9912561038259E-7	DESIGN
return the id in the event object	WITHOUT_CLASSIFICATION	0.9998269698460812	WITHOUT_CLASSIFICATION	1.730301539189159E-4	DESIGN
TRANSIENT or DELETED	WITHOUT_CLASSIFICATION	0.9999961714883742	WITHOUT_CLASSIFICATION	3.82851162586756E-6	DESIGN
use the id assigned to the instance	WITHOUT_CLASSIFICATION	0.9999951971590277	WITHOUT_CLASSIFICATION	4.802840972223413E-6	DESIGN
assume this is a newly instantiated transient object which should be saved rather than updated	WITHOUT_CLASSIFICATION	0.9946544575795442	WITHOUT_CLASSIFICATION	0.005345542420455814	DESIGN
this is a transient object with existing persistent state not loaded by the session	WITHOUT_CLASSIFICATION	0.999497829467662	WITHOUT_CLASSIFICATION	5.021705323380573E-4	DESIGN
a collection loaded in the current session can not possibly be the collection belonging to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999993126539098	WITHOUT_CLASSIFICATION	6.873460901937442E-7	DESIGN
cachedState,	WITHOUT_CLASSIFICATION	0.9999953551857137	WITHOUT_CLASSIFICATION	4.6448142863087566E-6	DESIGN
assume true, since we don't really know, and it doesn't matter	WITHOUT_CLASSIFICATION	0.9999951423542736	WITHOUT_CLASSIFICATION	4.857645726493324E-6	DESIGN
a "detached" collection!	WITHOUT_CLASSIFICATION	0.9999678915508552	WITHOUT_CLASSIFICATION	3.2108449144895875E-5	DESIGN
if the collection belonged to a different entity, clean up the existing state of the collection	WITHOUT_CLASSIFICATION	0.9999853872387133	WITHOUT_CLASSIFICATION	1.461276128657312E-5	DESIGN
log.debug( "calling onLoad()" );	WITHOUT_CLASSIFICATION	0.9999903651932613	WITHOUT_CLASSIFICATION	9.634806738726137E-6	DESIGN
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.999972345811373	WITHOUT_CLASSIFICATION	2.7654188627018945E-5	DESIGN
note: performExecutions() clears all collectionXxxxtion collections (the collection actions) in the session	WITHOUT_CLASSIFICATION	0.9993431365982026	WITHOUT_CLASSIFICATION	6.56863401797337E-4	DESIGN
if no array holder we found an unwrappered array (this can't occur, because we now always call wrap() before getting to here) return (ah==null) ? true : searchForDirtyCollections(ah, type);	WITHOUT_CLASSIFICATION	0.9861625602995205	WITHOUT_CLASSIFICATION	0.01383743970047946	DESIGN
if not wrappered yet, its dirty (this can't occur, because we now always call wrap() before getting to here) return ( ! (obj instanceof PersistentCollection) ) ? true : searchForDirtyCollections( (PersistentCollection) obj, type );	WITHOUT_CLASSIFICATION	0.9722027204791881	DESIGN	0.027797279520811846	WITHOUT_CLASSIFICATION
we need to check even if it was not initialized, because of delayed adds!	WITHOUT_CLASSIFICATION	0.9999723925201517	WITHOUT_CLASSIFICATION	2.7607479848289506E-5	DESIGN
NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999782900311928	WITHOUT_CLASSIFICATION	2.1709968807291564E-5	DESIGN
find any entities that are still transient after retry	WITHOUT_CLASSIFICATION	0.9998341832590588	WITHOUT_CLASSIFICATION	1.6581674094125792E-4	DESIGN
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.999972345811373	WITHOUT_CLASSIFICATION	2.7654188627018945E-5	DESIGN
Check the persistence context for an entry relating to this entity to be merged...	WITHOUT_CLASSIFICATION	0.9968645617779315	WITHOUT_CLASSIFICATION	0.003135438222068496	DESIGN
we have specialized case of a detached entity from the perspective of the merge operation. Specifically, we have an incoming entity instance which has a corresponding entry in the current persistence context, but registered under a different entity instance	WITHOUT_CLASSIFICATION	0.9999993063649023	WITHOUT_CLASSIFICATION	6.936350977528851E-7	DESIGN
DELETED	WITHOUT_CLASSIFICATION	0.999588477987093	WITHOUT_CLASSIFICATION	4.1152201290698163E-4	DESIGN
before cascade!	WITHOUT_CLASSIFICATION	0.9999846667759816	WITHOUT_CLASSIFICATION	1.5333224018375123E-5	DESIGN
cascade first, so that all unsaved objects get their copy created before we actually copy cascadeOnMerge(event, persister, entity, copyCache, Cascades.CASCADE_BEFORE_MERGE);	WITHOUT_CLASSIFICATION	0.9999996935994705	WITHOUT_CLASSIFICATION	3.064005294517023E-7	DESIGN
this bit is only really absolutely necessary for handling requestedId, but is also good if we merge multiple object graphs, since it helps ensure uniqueness	WITHOUT_CLASSIFICATION	0.5904990618640076	DESIGN	0.4095009381359925	WITHOUT_CLASSIFICATION
continue...; we'll find out if it ends up not getting saved later	WITHOUT_CLASSIFICATION	0.9999997124382359	WITHOUT_CLASSIFICATION	2.8756176402474147E-7	DESIGN
cascade first, so that all unsaved objects get their copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999974986847471	WITHOUT_CLASSIFICATION	2.5013152529763833E-6	DESIGN
check that entity id = requestedId	WITHOUT_CLASSIFICATION	0.9999888136354969	WITHOUT_CLASSIFICATION	1.1186364503219467E-5	DESIGN
before cascade!	WITHOUT_CLASSIFICATION	0.9999846667759816	WITHOUT_CLASSIFICATION	1.5333224018375123E-5	DESIGN
we got here because we assumed that an instance with an assigned id was detached, when it was really persistent	WITHOUT_CLASSIFICATION	0.999137416922656	WITHOUT_CLASSIFICATION	8.62583077344106E-4	DESIGN
cascade first, so that all unsaved objects get their copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999974986847471	WITHOUT_CLASSIFICATION	2.5013152529763833E-6	DESIGN
copyValues works by reflection, so explicitly mark the entity instance dirty	WITHOUT_CLASSIFICATION	0.999024148771994	WITHOUT_CLASSIFICATION	9.758512280060896E-4	DESIGN
EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999676149033511	WITHOUT_CLASSIFICATION	3.238509664883745E-5	DESIGN
source.getBatcher().executeBatch(); found another way to ensure that all batched joined inserts have been executed	WITHOUT_CLASSIFICATION	0.9999981054335751	WITHOUT_CLASSIFICATION	1.8945664247293727E-6	DESIGN
substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.999992783825208	WITHOUT_CLASSIFICATION	7.216174792065307E-6	DESIGN
now done in EntityIdentityInsertAction persister.setIdentifier( entity, id, source.getEntityMode() );	WITHOUT_CLASSIFICATION	0.9999560460711212	WITHOUT_CLASSIFICATION	4.395392887882703E-5	DESIGN
source.getPersistenceContext().removeNonExist( new EntityKey( id, persister, source.getEntityMode() ) );	WITHOUT_CLASSIFICATION	0.9999879657464239	WITHOUT_CLASSIFICATION	1.2034253576140471E-5	DESIGN
keep the existing version number in the case of replicate!	WITHOUT_CLASSIFICATION	0.9999706375986682	WITHOUT_CLASSIFICATION	2.9362401331738788E-5	DESIGN
cascade-save to many-to-one BEFORE the parent is saved	WITHOUT_CLASSIFICATION	0.9943076586793045	WITHOUT_CLASSIFICATION	0.00569234132069548	DESIGN
pass this as an argument only to avoid double looking	WITHOUT_CLASSIFICATION	0.9999955871500918	WITHOUT_CLASSIFICATION	4.412849908222152E-6	DESIGN
the object is persistent	WITHOUT_CLASSIFICATION	0.9999733409267344	WITHOUT_CLASSIFICATION	2.6659073265601346E-5	DESIGN
the entity is associated with the session, so check its status	WITHOUT_CLASSIFICATION	0.9999998397387222	WITHOUT_CLASSIFICATION	1.6026127774374457E-7	DESIGN
do nothing for persistent instances	WITHOUT_CLASSIFICATION	0.9999692025529091	WITHOUT_CLASSIFICATION	3.0797447090807664E-5	DESIGN
ie. e.status==DELETED	WITHOUT_CLASSIFICATION	0.9999997851114287	WITHOUT_CLASSIFICATION	2.1488857133487097E-7	DESIGN
the object is transient or detached	WITHOUT_CLASSIFICATION	0.999912007308249	WITHOUT_CLASSIFICATION	8.799269175104709E-5	DESIGN
NOTE EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999902151761115	WITHOUT_CLASSIFICATION	9.784823888461066E-6	DESIGN
Private constructor - stops checkstyle from complaining.	WITHOUT_CLASSIFICATION	0.999964039295337	WITHOUT_CLASSIFICATION	3.5960704663008955E-5	DESIGN
First, try to find a matching constructor accepting a ViolatedConstraintNameExtracter param...	WITHOUT_CLASSIFICATION	0.9999998448468308	WITHOUT_CLASSIFICATION	1.5515316923592694E-7	DESIGN
eat it and try next	WITHOUT_CLASSIFICATION	0.9999903667512234	WITHOUT_CLASSIFICATION	9.633248776571333E-6	DESIGN
Otherwise, try to use the no-arg constructor	WITHOUT_CLASSIFICATION	0.9999998545809529	WITHOUT_CLASSIFICATION	1.4541904723833636E-7	DESIGN
oracle sql-state code for deadlock	WITHOUT_CLASSIFICATION	0.9988303958092687	WITHOUT_CLASSIFICATION	0.0011696041907312445	DESIGN
CollectionPropertyMapping processes everything except 'index'.	WITHOUT_CLASSIFICATION	0.9999379696287136	WITHOUT_CLASSIFICATION	6.203037128630942E-5	DESIGN
remove initial ", "	WITHOUT_CLASSIFICATION	0.9999926901917375	WITHOUT_CLASSIFICATION	7.3098082624740255E-6	DESIGN
remove initial " and "	WITHOUT_CLASSIFICATION	0.9998958072331875	WITHOUT_CLASSIFICATION	1.0419276681248163E-4	DESIGN
beforeClassTokens.add("new"); DEFINITELY DON'T HAVE THIS!!	WITHOUT_CLASSIFICATION	0.9999977930350608	WITHOUT_CLASSIFICATION	2.206964939328717E-6	DESIGN
notAfterClassTokens.add(",");	WITHOUT_CLASSIFICATION	0.9999988980428427	WITHOUT_CLASSIFICATION	1.1019571573459593E-6	DESIGN
just especially for the trivial collection filter	WITHOUT_CLASSIFICATION	0.9999981487139302	WITHOUT_CLASSIFICATION	1.8512860698106143E-6	DESIGN
update last non-whitespace token, if necessary	WITHOUT_CLASSIFICATION	0.999999771177195	WITHOUT_CLASSIFICATION	2.28822805000431E-7	DESIGN
select-range is terminated by declaration of "from"	WITHOUT_CLASSIFICATION	0.9997140063817189	WITHOUT_CLASSIFICATION	2.859936182810688E-4	DESIGN
scan for next non-whitespace token	WITHOUT_CLASSIFICATION	0.9999981981915629	WITHOUT_CLASSIFICATION	1.8018084370698303E-6	DESIGN
Note this!!	WITHOUT_CLASSIFICATION	0.9999869494908147	WITHOUT_CLASSIFICATION	1.305050918526333E-5	DESIGN
Error message constants.	WITHOUT_CLASSIFICATION	0.999997525069809	WITHOUT_CLASSIFICATION	2.474930191067863E-6	DESIGN
handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999780176942463	WITHOUT_CLASSIFICATION	2.1982305753702583E-5	DESIGN
semantic action handling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9960413532993678	WITHOUT_CLASSIFICATION	0.003958646700632119	DESIGN
Handle collection-fiter compilation. IMPORTANT NOTE: This is modifying the INPUT (HQL) tree, not the output tree!	WITHOUT_CLASSIFICATION	0.9998780633156752	WITHOUT_CLASSIFICATION	1.2193668432490532E-4	DESIGN
Show the modified AST.	WITHOUT_CLASSIFICATION	0.9999991363333195	WITHOUT_CLASSIFICATION	8.636666804984552E-7	DESIGN
Create a parameter specification for the collection filter...	WITHOUT_CLASSIFICATION	0.9997322138062686	WITHOUT_CLASSIFICATION	2.6778619373137285E-4	DESIGN
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999994251371264	WITHOUT_CLASSIFICATION	5.748628735335884E-7	DESIGN
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999994251371264	WITHOUT_CLASSIFICATION	5.748628735335884E-7	DESIGN
Get the names of the columns used to link between the collection owner and the collection elements.	WITHOUT_CLASSIFICATION	0.9998991941630277	WITHOUT_CLASSIFICATION	1.0080583697222157E-4	DESIGN
The path AST should be a DotNode, and it should have been evaluated already.	WITHOUT_CLASSIFICATION	0.9999982779249943	WITHOUT_CLASSIFICATION	1.7220750056110983E-6	DESIGN
Tell the dot node about the join type.	WITHOUT_CLASSIFICATION	0.9999982787009842	WITHOUT_CLASSIFICATION	1.7212990158730655E-6	DESIGN
Re-arrange the tree so that the collection function is the root and the lhs is the path.	WITHOUT_CLASSIFICATION	0.9999905636860493	WITHOUT_CLASSIFICATION	9.436313950669592E-6	DESIGN
Don't forget to resolve the argument! Resolve the collection function now.	WITHOUT_CLASSIFICATION	0.9999997547724144	WITHOUT_CLASSIFICATION	2.452275855802741E-7	DESIGN
Resolve everything up to this dot, but don't resolve the placeholders yet.	WITHOUT_CLASSIFICATION	0.9998257425451423	WITHOUT_CLASSIFICATION	1.7425745485769243E-4	DESIGN
Should mean that no such property was found	WITHOUT_CLASSIFICATION	0.9999084656435963	WITHOUT_CLASSIFICATION	9.15343564037261E-5	DESIGN
Was there an explicit select expression?	WITHOUT_CLASSIFICATION	0.9997041496088317	WITHOUT_CLASSIFICATION	2.958503911683176E-4	DESIGN
Attach any mapping-defined "ORDER BY" fragments	WITHOUT_CLASSIFICATION	0.999965317839368	WITHOUT_CLASSIFICATION	3.468216063202115E-5	DESIGN
Use the explicitly declared select expression; determine the return types indicated by each select token	WITHOUT_CLASSIFICATION	0.9994496995503239	WITHOUT_CLASSIFICATION	5.50300449676022E-4	DESIGN
After that, process the JOINs. Invoke a delegate to do the work, as this is farily complex.	WITHOUT_CLASSIFICATION	0.8275317651235771	WITHOUT_CLASSIFICATION	0.17246823487642293	DESIGN
Make #@%$^#^&# sure no alias is applied to the table name	WITHOUT_CLASSIFICATION	0.9999494889388482	WITHOUT_CLASSIFICATION	5.051106115186904E-5	DESIGN
We need to generate ids as part of this bulk insert. Note that this is only supported for sequence-style generators and post-insert-style generators; basically, only in-db generators	WITHOUT_CLASSIFICATION	0.999938869209322	WITHOUT_CLASSIFICATION	6.113079067797136E-5	DESIGN
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999994251371264	WITHOUT_CLASSIFICATION	5.748628735335884E-7	DESIGN
We need to seed the version value as part of this bulk insert	WITHOUT_CLASSIFICATION	0.9998959690097379	WITHOUT_CLASSIFICATION	1.0403099026214646E-4	DESIGN
we need to wrtap the param in a cast()	WITHOUT_CLASSIFICATION	0.999974049025355	WITHOUT_CLASSIFICATION	2.5950974645042374E-5	DESIGN
This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9993758026363759	WITHOUT_CLASSIFICATION	6.241973636240214E-4	DESIGN
Generate implicit joins, only if necessary.	WITHOUT_CLASSIFICATION	0.9999689063869247	WITHOUT_CLASSIFICATION	3.109361307523864E-5	DESIGN
Notify the FROM element that it is being referenced by the select.	WITHOUT_CLASSIFICATION	0.9999995754897242	WITHOUT_CLASSIFICATION	4.245102758343502E-7	DESIGN
Turn off includeSubclasses on all FromElements.	WITHOUT_CLASSIFICATION	0.9999557388333127	WITHOUT_CLASSIFICATION	4.4261166687298847E-5	DESIGN
create the node initially with the param name so that it shows appropriately in the "original text" attribute	WITHOUT_CLASSIFICATION	0.9996120981936037	WITHOUT_CLASSIFICATION	3.8790180639615364E-4	DESIGN
Use the delegate, resolve identifiers as FROM element aliases.	WITHOUT_CLASSIFICATION	0.9999998684780235	WITHOUT_CLASSIFICATION	1.315219765398572E-7	DESIGN
select clauses for insert statements should alwasy be treated as shallow	WITHOUT_CLASSIFICATION	0.9999537433518887	WITHOUT_CLASSIFICATION	4.6256648111257234E-5	DESIGN
no need to even collect this information if the persister is considered multi-table	WITHOUT_CLASSIFICATION	0.9962629589115298	WITHOUT_CLASSIFICATION	0.003737041088470068	DESIGN
Make sure that the persister is versioned	WITHOUT_CLASSIFICATION	0.9998185116431801	WITHOUT_CLASSIFICATION	1.8148835681975494E-4	DESIGN
handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999780176942463	WITHOUT_CLASSIFICATION	2.1982305753702583E-5	DESIGN
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999994251371264	WITHOUT_CLASSIFICATION	5.748628735335884E-7	DESIGN
--Commented out by Inspection (12/11/04 10:56 AM): int getWarningCount();	WITHOUT_CLASSIFICATION	0.9999120497852572	WITHOUT_CLASSIFICATION	8.795021474285888E-5	DESIGN
Alias references and identifiers use the same node class.	WITHOUT_CLASSIFICATION	0.999990289864411	WITHOUT_CLASSIFICATION	9.710135589107355E-6	DESIGN
switch	WITHOUT_CLASSIFICATION	0.99998182229502	WITHOUT_CLASSIFICATION	1.8177704980125254E-5	DESIGN
make a new one	WITHOUT_CLASSIFICATION	0.9999584806075764	WITHOUT_CLASSIFICATION	4.151939242348054E-5	DESIGN
just do the regular thing if you can't find the ctor Your AST must have default ctor to use this.	WITHOUT_CLASSIFICATION	0.9998586112913092	WITHOUT_CLASSIFICATION	1.413887086908844E-4	DESIGN
Initialize SQL nodes here.	WITHOUT_CLASSIFICATION	0.9999994100022117	WITHOUT_CLASSIFICATION	5.899977882096469E-7	DESIGN
semantic action processing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9494462420486153	WITHOUT_CLASSIFICATION	0.050553757951384753	DESIGN
if template is null we just write the function out as it appears in the hql statement	WITHOUT_CLASSIFICATION	0.9999999348494922	WITHOUT_CLASSIFICATION	6.515050776675476E-8	DESIGN
this function has a template -> redirect output and catch the arguments	WITHOUT_CLASSIFICATION	0.9999981811431881	WITHOUT_CLASSIFICATION	1.818856811870759E-6	DESIGN
--- Inner classes (moved here from sql-gen.g) ---	WITHOUT_CLASSIFICATION	0.9988415290746421	WITHOUT_CLASSIFICATION	0.0011584709253579684	DESIGN
check two "adjecent" nodes at the top of the from-clause tree	WITHOUT_CLASSIFICATION	0.9999906157715075	WITHOUT_CLASSIFICATION	9.384228492535966E-6	DESIGN
/	WITHOUT_CLASSIFICATION	0.9992500349869593	WITHOUT_CLASSIFICATION	7.499650130406492E-4	DESIGN
these are just two unrelated table references	WITHOUT_CLASSIFICATION	0.9999999472618086	WITHOUT_CLASSIFICATION	5.273819134182719E-8	DESIGN
again, both should be FromElements	WITHOUT_CLASSIFICATION	0.999945305385715	WITHOUT_CLASSIFICATION	5.4694614285080277E-5	DESIGN
NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9999989302265642	WITHOUT_CLASSIFICATION	1.0697734357987123E-6	DESIGN
right represents a joins originating from left; or both right and left reprersent joins originating from the same FromElement	WITHOUT_CLASSIFICATION	0.9998482079232365	WITHOUT_CLASSIFICATION	1.5179207676360108E-4	DESIGN
check a set of parent/child nodes in the from-clause tree to determine if a comma is required between them	WITHOUT_CLASSIFICATION	0.9999779699704081	WITHOUT_CLASSIFICATION	2.203002959193864E-5	DESIGN
right represents a joins originating from left...	WITHOUT_CLASSIFICATION	0.999994669162286	WITHOUT_CLASSIFICATION	5.330837714051195E-6	DESIGN
all clear	WITHOUT_CLASSIFICATION	0.9999931791223393	WITHOUT_CLASSIFICATION	6.8208776607176775E-6	DESIGN
Ignore the token class name parameter, and use a specific token class.	WITHOUT_CLASSIFICATION	0.9999962107064799	WITHOUT_CLASSIFICATION	3.7892935201716733E-6	DESIGN
overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.999965334137968	WITHOUT_CLASSIFICATION	3.466586203211521E-5	DESIGN
overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.999965334137968	WITHOUT_CLASSIFICATION	3.466586203211521E-5	DESIGN
remember that ordinal parameters numbers are 1-based!!!	WITHOUT_CLASSIFICATION	0.9922570179339137	WITHOUT_CLASSIFICATION	0.007742982066086277	DESIGN
don't care about other param types here, just those explicitly user-defined...	WITHOUT_CLASSIFICATION	0.9998682095601764	WITHOUT_CLASSIFICATION	1.3179043982369684E-4	DESIGN
If the query is already compiled, skip the compilation.	WITHOUT_CLASSIFICATION	0.9998458640865627	WITHOUT_CLASSIFICATION	1.541359134371282E-4	DESIGN
Remember the parameters for the compilation.	WITHOUT_CLASSIFICATION	0.9993522621400818	WITHOUT_CLASSIFICATION	6.477378599182863E-4	DESIGN
PHASE 1 : Parse the HQL into an AST.	WITHOUT_CLASSIFICATION	0.999873448456924	WITHOUT_CLASSIFICATION	1.265515430758268E-4	DESIGN
PHASE 2 : Analyze the HQL AST, and produce an SQL AST.	WITHOUT_CLASSIFICATION	0.9999983232191964	WITHOUT_CLASSIFICATION	1.676780803579236E-6	DESIGN
PHASE 3 : Generate the SQL.	WITHOUT_CLASSIFICATION	0.9999691376694395	WITHOUT_CLASSIFICATION	3.086233056053217E-5	DESIGN
we do not actually propogate ANTLRExceptions as a cause, so log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9999977559223562	WITHOUT_CLASSIFICATION	2.244077643873556E-6	DESIGN
we do not actually propogate ANTLRExceptions as a cause, so log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9999977559223562	WITHOUT_CLASSIFICATION	2.244077643873556E-6	DESIGN
only needed during compilation phase...	WITHOUT_CLASSIFICATION	0.9975976412233764	WITHOUT_CLASSIFICATION	0.0024023587766236545	DESIGN
Transform the tree.	WITHOUT_CLASSIFICATION	0.9999996746312332	WITHOUT_CLASSIFICATION	3.25368766820266E-7	DESIGN
Parse the query string into an HQL AST.	WITHOUT_CLASSIFICATION	0.9999525761338064	WITHOUT_CLASSIFICATION	4.7423866193578496E-5	DESIGN
Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999955430957573	WITHOUT_CLASSIFICATION	4.456904242762877E-6	DESIGN
Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999955430957573	WITHOUT_CLASSIFICATION	4.456904242762877E-6	DESIGN
Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999955430957573	WITHOUT_CLASSIFICATION	4.456904242762877E-6	DESIGN
NOTE : ( max - 1 ) because first is zero-based while max is not...	WITHOUT_CLASSIFICATION	0.9999484025634316	WITHOUT_CLASSIFICATION	5.159743656825872E-5	DESIGN
-- Package local methods for the QueryLoader delegate --	WITHOUT_CLASSIFICATION	0.9906262454764934	WITHOUT_CLASSIFICATION	0.00937375452350666	DESIGN
If there are no collection fetches, then no further checks are needed	WITHOUT_CLASSIFICATION	0.9999853019590336	WITHOUT_CLASSIFICATION	1.469804096635938E-5	DESIGN
A shallow query is ok (although technically there should be no fetching here...)	WITHOUT_CLASSIFICATION	0.999983067136326	WITHOUT_CLASSIFICATION	1.6932863673995508E-5	DESIGN
should be the first, but just to be safe...	WITHOUT_CLASSIFICATION	0.9999898561134567	WITHOUT_CLASSIFICATION	1.0143886543302428E-5	DESIGN
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999994251371264	WITHOUT_CLASSIFICATION	5.748628735335884E-7	DESIGN
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999994251371264	WITHOUT_CLASSIFICATION	5.748628735335884E-7	DESIGN
Impl Note: allows multiple collection fetches as long as the entire fecthed graph still "points back" to a single root entity for return	WITHOUT_CLASSIFICATION	0.9860855663159974	WITHOUT_CLASSIFICATION	0.013914433684002475	DESIGN
Otherwise, we have a non-scalar select with defined collection fetch(es). Make sure that there is only a single root entity in the return (no tuples)	WITHOUT_CLASSIFICATION	0.9999887626987929	WITHOUT_CLASSIFICATION	1.1237301207166723E-5	DESIGN
This is not strictly true. We actually just need to make sure that it is ordered by root-entity PK and that that order-by comes before any non-root-entity ordering...	WITHOUT_CLASSIFICATION	0.9881088626018172	WITHOUT_CLASSIFICATION	0.01189113739818277	DESIGN
paramTranslations = new ParameterTranslationsImpl( collectedParameterSpecifications );	WITHOUT_CLASSIFICATION	0.9999821027244578	WITHOUT_CLASSIFICATION	1.789727554215918E-5	DESIGN
we are already processing a dot-structure	WITHOUT_CLASSIFICATION	0.9999614289568229	WITHOUT_CLASSIFICATION	3.8571043176953495E-5	DESIGN
igndore it...	WITHOUT_CLASSIFICATION	0.9999989487061686	WITHOUT_CLASSIFICATION	1.0512938315010168E-6	DESIGN
we are now at a new tree level	WITHOUT_CLASSIFICATION	0.9999993307280528	WITHOUT_CLASSIFICATION	6.692719472048858E-7	DESIGN
[jsd] The fix for HHH-558...	WITHOUT_CLASSIFICATION	0.999949277561831	WITHOUT_CLASSIFICATION	5.072243816886264E-5	DESIGN
If the token can tell us if it could be an identifier...	WITHOUT_CLASSIFICATION	0.9999998315122511	WITHOUT_CLASSIFICATION	1.6848774887532997E-7	DESIGN
... and the expected token type was an identifier, then:	WITHOUT_CLASSIFICATION	0.9999991862133024	WITHOUT_CLASSIFICATION	8.137866977171838E-7	DESIGN
Use the token as an identifier.	WITHOUT_CLASSIFICATION	0.9999998224842073	WITHOUT_CLASSIFICATION	1.775157926596425E-7	DESIGN
Add the token to the AST.	WITHOUT_CLASSIFICATION	0.9999990275469413	WITHOUT_CLASSIFICATION	9.724530586809636E-7	DESIGN
(NOT (EQ a b) ) => (NE a b)	WITHOUT_CLASSIFICATION	0.9999879721229747	WITHOUT_CLASSIFICATION	1.2027877025273104E-5	DESIGN
(NOT (NE a b) ) => (EQ a b)	WITHOUT_CLASSIFICATION	0.9999879721229747	WITHOUT_CLASSIFICATION	1.2027877025273104E-5	DESIGN
(NOT (LT a b) ) => (GE a b)	WITHOUT_CLASSIFICATION	0.9999849408155699	WITHOUT_CLASSIFICATION	1.5059184430047913E-5	DESIGN
(NOT (GE a b) ) => (LT a b)	WITHOUT_CLASSIFICATION	0.9999849408155699	WITHOUT_CLASSIFICATION	1.5059184430047913E-5	DESIGN
(NOT (LE a b) ) => (GT a b)	WITHOUT_CLASSIFICATION	0.999989223727334	WITHOUT_CLASSIFICATION	1.0776272666020447E-5	DESIGN
(NOT (LIKE a b) ) => (NOT_LIKE a b)	WITHOUT_CLASSIFICATION	0.9999202618622084	WITHOUT_CLASSIFICATION	7.973813779159582E-5	DESIGN
(NOT (NOT_LIKE a b) ) => (LIKE a b)	WITHOUT_CLASSIFICATION	0.9999202618622084	WITHOUT_CLASSIFICATION	7.973813779159582E-5	DESIGN
(NOT (IS_NOT_NULL a b) ) => (IS_NULL a b)	WITHOUT_CLASSIFICATION	0.9999381104499104	WITHOUT_CLASSIFICATION	6.188955008962036E-5	DESIGN
(NOT (BETWEEN a b) ) => (NOT_BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999207364595786	WITHOUT_CLASSIFICATION	7.926354042137864E-5	DESIGN
Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999964900128648	WITHOUT_CLASSIFICATION	3.5099871350234457E-6	DESIGN
overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.999965334137968	WITHOUT_CLASSIFICATION	3.466586203211521E-5	DESIGN
if if Otherwise, handle the error normally.	WITHOUT_CLASSIFICATION	0.999999227757425	WITHOUT_CLASSIFICATION	7.722425749895607E-7	DESIGN
(NOT (NOT_BETWEEN a b) ) => (BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999207364595786	WITHOUT_CLASSIFICATION	7.926354042137864E-5	DESIGN
This can never happen because this rule will always eliminate the child NOT.case NOT:return x.getFirstChild(); (NOT (NOT x) ) => (x)	WITHOUT_CLASSIFICATION	0.9999996742558899	WITHOUT_CLASSIFICATION	3.2574411006696154E-7	DESIGN
Just add a 'not' parent.	WITHOUT_CLASSIFICATION	0.999998121633902	WITHOUT_CLASSIFICATION	1.8783660979679044E-6	DESIGN
(EQ NULL b) => (IS_NULL b)	WITHOUT_CLASSIFICATION	0.9999919237165891	WITHOUT_CLASSIFICATION	8.076283410884239E-6	DESIGN
(EQ a NULL) => (IS_NULL a)	WITHOUT_CLASSIFICATION	0.9999801730377516	WITHOUT_CLASSIFICATION	1.9826962248449252E-5	DESIGN
NOTE: Because we're using ASTUtil.createParent(), the tree must be created from the bottom up. IS EMPTY x => (EXISTS (QUERY (SELECT_FROM (FROM x) ) ) )	WITHOUT_CLASSIFICATION	0.9999999850239775	WITHOUT_CLASSIFICATION	1.4976022491031728E-8	DESIGN
Add NOT if it's negated.	WITHOUT_CLASSIFICATION	0.9999994134496382	WITHOUT_CLASSIFICATION	5.865503618658561E-7	DESIGN
Create nodes that track line and column number.	WITHOUT_CLASSIFICATION	0.9995577358248984	WITHOUT_CLASSIFICATION	4.4226417510168477E-4	DESIGN
Case 1: Multi token keywords GROUP BY and ORDER BY The next token ( LT(2) ) should be 'by'... otherwise, this is just an ident.	WITHOUT_CLASSIFICATION	0.9999697761123935	WITHOUT_CLASSIFICATION	3.02238876065415E-5	DESIGN
Case 2: The current token is after FROM and before '.'.	WITHOUT_CLASSIFICATION	0.9999883285550195	WITHOUT_CLASSIFICATION	1.167144498043191E-5	DESIGN
This handles HHH-354, where there is a strange property name in a where clause. If the lookahead contains a DOT then something that isn't an IDENT...	WITHOUT_CLASSIFICATION	0.9997219448444871	WITHOUT_CLASSIFICATION	2.7805515551289323E-4	DESIGN
See if the second lookahed token can be an identifier.	WITHOUT_CLASSIFICATION	0.9999958079857084	WITHOUT_CLASSIFICATION	4.1920142915855E-6	DESIGN
Set it!	WITHOUT_CLASSIFICATION	0.99999590184609	WITHOUT_CLASSIFICATION	4.098153909957536E-6	DESIGN
ignore	WITHOUT_CLASSIFICATION	0.9999910123537684	WITHOUT_CLASSIFICATION	8.987646231521161E-6	DESIGN
strip the " where "	WITHOUT_CLASSIFICATION	0.9999950028802852	WITHOUT_CLASSIFICATION	4.997119714865301E-6	DESIGN
Don't really know all the codes required to adequately decipher returned jdbc exceptions here. simply allow the failure to be eaten and the subsequent insert-selects/deletes should fail	WITHOUT_CLASSIFICATION	0.9955190079399302	WITHOUT_CLASSIFICATION	0.0044809920600697994	DESIGN
at the very least cleanup the data :)	WITHOUT_CLASSIFICATION	0.9999950655840528	WITHOUT_CLASSIFICATION	4.934415947162439E-6	DESIGN
First, save off the pertinent ids, as the return value	WITHOUT_CLASSIFICATION	0.9999997838052858	WITHOUT_CLASSIFICATION	2.1619471433981065E-7	DESIGN
jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9984266380522729	WITHOUT_CLASSIFICATION	0.0015733619477269936	DESIGN
jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9984266380522729	WITHOUT_CLASSIFICATION	0.0015733619477269936	DESIGN
Start performing the updates	WITHOUT_CLASSIFICATION	0.9999998975879786	WITHOUT_CLASSIFICATION	1.024120215193428E-7	DESIGN
First, save off the pertinent ids, saving the number of pertinent ids for return	WITHOUT_CLASSIFICATION	0.9999962517642673	WITHOUT_CLASSIFICATION	3.7482357326175277E-6	DESIGN
Start performing the deletes	WITHOUT_CLASSIFICATION	0.9999995424251551	WITHOUT_CLASSIFICATION	4.5757484488175567E-7	DESIGN
otherwise, everything ok.	WITHOUT_CLASSIFICATION	0.9999997936141768	WITHOUT_CLASSIFICATION	2.0638582320155612E-7	DESIGN
visit width-first, then depth	WITHOUT_CLASSIFICATION	0.9999992728277934	WITHOUT_CLASSIFICATION	7.271722064808916E-7	DESIGN
if the types report logical equivalence, return true...	WITHOUT_CLASSIFICATION	0.9998478713829132	WITHOUT_CLASSIFICATION	1.521286170868311E-4	DESIGN
otherwise, perform a "deep equivalence" check...	WITHOUT_CLASSIFICATION	0.9999664233538643	WITHOUT_CLASSIFICATION	3.35766461356408E-5	DESIGN
If there is no WHERE node, make one.	WITHOUT_CLASSIFICATION	0.9999677794342313	WITHOUT_CLASSIFICATION	3.222056576874646E-5	DESIGN
inject the WHERE after the parent	WITHOUT_CLASSIFICATION	0.9999473828520101	WITHOUT_CLASSIFICATION	5.261714798986645E-5	DESIGN
Never include subclasses for implied from elements.	WITHOUT_CLASSIFICATION	0.9999323074551323	WITHOUT_CLASSIFICATION	6.769254486776072E-5	DESIGN
Moved here from SelectClause [jsd]	WITHOUT_CLASSIFICATION	0.9993996911658333	WITHOUT_CLASSIFICATION	6.00308834166756E-4	DESIGN
/	WITHOUT_CLASSIFICATION	0.9992500349869593	WITHOUT_CLASSIFICATION	7.499650130406492E-4	DESIGN
Use the table fromElement and the property name to get the array of column names.	WITHOUT_CLASSIFICATION	0.9999989661426785	WITHOUT_CLASSIFICATION	1.0338573215430047E-6	DESIGN
Set the attributes of the property reference expression.	WITHOUT_CLASSIFICATION	0.9999992598429361	WITHOUT_CLASSIFICATION	7.4015706388029E-7	DESIGN
If the uresolved property path isn't set yet, just use the property name.	WITHOUT_CLASSIFICATION	0.9999999915887597	WITHOUT_CLASSIFICATION	8.411240303263549E-9	DESIGN
The 'from element' that the property is in.	WITHOUT_CLASSIFICATION	0.9999996372010908	WITHOUT_CLASSIFICATION	3.6279890920340644E-7	DESIGN
Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999783957706797	WITHOUT_CLASSIFICATION	2.1604229320407107E-5	DESIGN
Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999783957706797	WITHOUT_CLASSIFICATION	2.1604229320407107E-5	DESIGN
If this dot has already been resolved, stop now.	WITHOUT_CLASSIFICATION	0.9999934172195192	WITHOUT_CLASSIFICATION	6.582780480819337E-6	DESIGN
If there is no data type for this node, and we're at the end of the path (top most dot node), then this might be a Java constant.	WITHOUT_CLASSIFICATION	0.9991302603860174	WITHOUT_CLASSIFICATION	8.697396139825751E-4	DESIGN
The property is a collection...	WITHOUT_CLASSIFICATION	0.9999993607658909	WITHOUT_CLASSIFICATION	6.392341091515023E-7	DESIGN
The property is a component...	WITHOUT_CLASSIFICATION	0.999998955197112	WITHOUT_CLASSIFICATION	1.044802887959335E-6	DESIGN
The property is another class..	WITHOUT_CLASSIFICATION	0.9999998998125508	WITHOUT_CLASSIFICATION	1.0018744917564509E-7	DESIGN
Otherwise, this is a primitive type.	WITHOUT_CLASSIFICATION	0.9999721066516671	WITHOUT_CLASSIFICATION	2.7893348332838555E-5	DESIGN
foo.bars.size (also handles deprecated stuff like foo.bars.maxelement for backwardness)	WITHOUT_CLASSIFICATION	0.9984442593218001	WITHOUT_CLASSIFICATION	0.001555740678199789	DESIGN
This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999745137295032	WITHOUT_CLASSIFICATION	2.5486270496857626E-5	DESIGN
Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999980861567884	WITHOUT_CLASSIFICATION	1.9138432115804144E-6	DESIGN
in non-select queries, the only time we should need to join is if we are in a subquery from clause	WITHOUT_CLASSIFICATION	0.9999894533530975	WITHOUT_CLASSIFICATION	1.0546646902391167E-5	DESIGN
this is the regression style determination which matches the logic of the classic translator	WITHOUT_CLASSIFICATION	0.9978405791886577	WITHOUT_CLASSIFICATION	0.0021594208113422963	DESIGN
This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999745137295032	WITHOUT_CLASSIFICATION	2.5486270496857626E-5	DESIGN
even though we might find a pre-existing element by join path, we may not be able to reuse it...	WITHOUT_CLASSIFICATION	0.9999781936471036	WITHOUT_CLASSIFICATION	2.180635289636958E-5	DESIGN
NOTE : addDuplicateAlias() already performs nullness checks on the alias.	WITHOUT_CLASSIFICATION	0.9999907637541076	WITHOUT_CLASSIFICATION	9.236245892484091E-6	DESIGN
if the from-clauses are the same, we can be a little more aggressive in terms of what we reuse	WITHOUT_CLASSIFICATION	0.9683968386493187	WITHOUT_CLASSIFICATION	0.03160316135068129	DESIGN
again, null != null here	WITHOUT_CLASSIFICATION	0.9999994688625009	WITHOUT_CLASSIFICATION	5.311374991310252E-7	DESIGN
If this is an implied join in a from element, then use the impled join type which is part of the tree parser's state (set by the gramamar actions).	WITHOUT_CLASSIFICATION	0.9999568893751423	WITHOUT_CLASSIFICATION	4.311062485770082E-5	DESIGN
otherwise (subquery case) dont reuse the fromElement if we are processing the from-clause of the subquery	WITHOUT_CLASSIFICATION	0.9999553328560667	WITHOUT_CLASSIFICATION	4.4667143933237776E-5	DESIGN
we know only the lhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999958899894765	WITHOUT_CLASSIFICATION	4.110010523445827E-6	DESIGN
the referenced node text is the special 'id'	WITHOUT_CLASSIFICATION	0.999998753612324	WITHOUT_CLASSIFICATION	1.2463876759796261E-6	DESIGN
only the identifier property field name can be a reference to the associated entity's PK...	WITHOUT_CLASSIFICATION	0.9999922397830667	WITHOUT_CLASSIFICATION	7.760216933354901E-6	DESIGN
special shortcut for id properties, skip the join! this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9995062596166654	WITHOUT_CLASSIFICATION	4.93740383334605E-4	DESIGN
Append the new property name onto the unresolved path.	WITHOUT_CLASSIFICATION	0.9999850412816783	WITHOUT_CLASSIFICATION	1.4958718321648072E-5	DESIGN
If the lhs is a collection, use CollectionPropertyMapping	WITHOUT_CLASSIFICATION	0.9999958062220764	WITHOUT_CLASSIFICATION	4.193777923539886E-6	DESIGN
Tell the destination fromElement to 'includeSubclasses'.	WITHOUT_CLASSIFICATION	0.9999821647554054	WITHOUT_CLASSIFICATION	1.783524459464821E-5	DESIGN
Use theta style (for regression) Move the node up, after the origin node.	WITHOUT_CLASSIFICATION	0.9997775180162063	WITHOUT_CLASSIFICATION	2.2248198379366785E-4	DESIGN
Don't resolve the node again.	WITHOUT_CLASSIFICATION	0.9999998663523837	WITHOUT_CLASSIFICATION	1.3364761634005248E-7	DESIGN
for expected parameter type injection, we expect that the lhs represents some form of property ref and that the children of the in-list represent one-or-more params.	WITHOUT_CLASSIFICATION	0.9993565606404298	WITHOUT_CLASSIFICATION	6.434393595702984E-4	DESIGN
we need to strip off the embedded parens so that sql-gen does not double these up	WITHOUT_CLASSIFICATION	0.9999983869540325	WITHOUT_CLASSIFICATION	1.613045967537272E-6	DESIGN
we have something like : "? [op] rhs"	WITHOUT_CLASSIFICATION	0.9999785273054953	WITHOUT_CLASSIFICATION	2.147269450474946E-5	DESIGN
we have something like : "lhs [op] ?"	WITHOUT_CLASSIFICATION	0.9999819727931365	WITHOUT_CLASSIFICATION	1.8027206863596618E-5	DESIGN
we know only the rhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.999997181340092	WITHOUT_CLASSIFICATION	2.818659907947816E-6	DESIGN
handle the (assumed) valid cases: #1 - the only valid datetime addition synatx is one or the other is a datetime (but not both)	WITHOUT_CLASSIFICATION	0.9999983674621474	WITHOUT_CLASSIFICATION	1.632537852543292E-6	DESIGN
one or the other needs to be a datetime for us to get into this method in the first place...	WITHOUT_CLASSIFICATION	0.7235752086736489	WITHOUT_CLASSIFICATION	0.2764247913263512	DESIGN
#3 - note that this is also true of "datetime - :param"...	WITHOUT_CLASSIFICATION	0.9946288526505742	WITHOUT_CLASSIFICATION	0.005371147349425845	DESIGN
#2	WITHOUT_CLASSIFICATION	0.9993093667435539	WITHOUT_CLASSIFICATION	6.906332564461478E-4	DESIGN
Generate the inner join -- The elements need to be joined to the collection they are in.	WITHOUT_CLASSIFICATION	0.9999624827142531	WITHOUT_CLASSIFICATION	3.751728574684564E-5	DESIGN
nothing to do	WITHOUT_CLASSIFICATION	0.9999964477402175	WITHOUT_CLASSIFICATION	3.552259782498223E-6	DESIGN
The 'from element' that represents the elements of the collection.	WITHOUT_CLASSIFICATION	0.9999994730879359	WITHOUT_CLASSIFICATION	5.269120640809525E-7	DESIGN
Add the condition to the join sequence that qualifies the indexed element.	WITHOUT_CLASSIFICATION	0.9999919148719328	WITHOUT_CLASSIFICATION	8.085128067109736E-6	DESIGN
Sometimes use the element table alias, sometimes use the... umm... collection table alias (many to many)	WITHOUT_CLASSIFICATION	0.9999973481606729	WITHOUT_CLASSIFICATION	2.6518393270398933E-6	DESIGN
Now, set the text for this node. It should be the element columns.	WITHOUT_CLASSIFICATION	0.9993792379368628	WITHOUT_CLASSIFICATION	6.207620631371889E-4	DESIGN
Get the function return value type, based on the type of the first argument.	WITHOUT_CLASSIFICATION	0.9999798601395979	WITHOUT_CLASSIFICATION	2.013986040213227E-5	DESIGN
This will call initialize(tok)!	WITHOUT_CLASSIFICATION	0.9999984207476598	WITHOUT_CLASSIFICATION	1.5792523401610845E-6	DESIGN
mutation depends on the types of nodes invloved...	WITHOUT_CLASSIFICATION	0.9998070895862141	WITHOUT_CLASSIFICATION	1.929104137859848E-4	DESIGN
"pass along" our initial embedded parameter node(s) to the first generated sql fragment so that it can be handled later for parameter binding...	WITHOUT_CLASSIFICATION	0.999982072627959	WITHOUT_CLASSIFICATION	1.7927372041047366E-5	DESIGN
logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9994770546608414	WITHOUT_CLASSIFICATION	5.229453391586656E-4	DESIGN
Generated select expressions are already resolved, nothing to do.	WITHOUT_CLASSIFICATION	0.9999849527523369	WITHOUT_CLASSIFICATION	1.504724766314443E-5	DESIGN
The path may be a reference to an alias defined in the parent query.	WITHOUT_CLASSIFICATION	0.9999949145259176	WITHOUT_CLASSIFICATION	5.085474082385389E-6	DESIGN
The HQL class alias refers to the class name.	WITHOUT_CLASSIFICATION	0.999999120618946	WITHOUT_CLASSIFICATION	8.793810540714021E-7	DESIGN
Associate the table alias with the element.	WITHOUT_CLASSIFICATION	0.9999999146052575	WITHOUT_CLASSIFICATION	8.53947425088593E-8	DESIGN
try the parent FromClause...	WITHOUT_CLASSIFICATION	0.9999995253096727	WITHOUT_CLASSIFICATION	4.746903273251613E-7	DESIGN
Add the new node to the map so that we don't create it twice.	WITHOUT_CLASSIFICATION	0.9999216588905586	WITHOUT_CLASSIFICATION	7.83411094414434E-5	DESIGN
Make sure that all from elements registered with this FROM clause are actually in the AST.	WITHOUT_CLASSIFICATION	0.9999985042990521	WITHOUT_CLASSIFICATION	1.495700947920747E-6	DESIGN
Invoke setScalarColumnText on each constructor argument.	WITHOUT_CLASSIFICATION	0.999963930136414	WITHOUT_CLASSIFICATION	3.6069863585906666E-5	DESIGN
Collect the select expressions, skip the first child because it is the class name.	WITHOUT_CLASSIFICATION	0.9999991233429274	WITHOUT_CLASSIFICATION	8.7665707270699E-7	DESIGN
return an empty Type array	WITHOUT_CLASSIFICATION	0.9995232046076337	WITHOUT_CLASSIFICATION	4.7679539236631724E-4	DESIGN
Constructors are always considered scalar results.	WITHOUT_CLASSIFICATION	0.9999357981117751	WITHOUT_CLASSIFICATION	6.420188822477284E-5	DESIGN
this is the exception returned by ReflectHelper.getConstructor() if it cannot locate an appropriate constructor	WITHOUT_CLASSIFICATION	0.9999956033476002	WITHOUT_CLASSIFICATION	4.396652399802368E-6	DESIGN
if there is no order by, make one	WITHOUT_CLASSIFICATION	0.9998167607525843	WITHOUT_CLASSIFICATION	1.8323924741571888E-4	DESIGN
Find the WHERE; if there is no WHERE, find the FROM...	WITHOUT_CLASSIFICATION	0.9999989348062324	WITHOUT_CLASSIFICATION	1.0651937675502232E-6	DESIGN
Now, inject the newly built ORDER BY into the tree	WITHOUT_CLASSIFICATION	0.9999969857119229	WITHOUT_CLASSIFICATION	3.0142880771000654E-6	DESIGN
ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997620439912104	WITHOUT_CLASSIFICATION	2.3795600878957402E-4	DESIGN
logic operators by definition resolve to boolean.	WITHOUT_CLASSIFICATION	0.9997657807896365	WITHOUT_CLASSIFICATION	2.3421921036340096E-4	DESIGN
Render the identifier select fragment using the table alias.	WITHOUT_CLASSIFICATION	0.9999999216467348	WITHOUT_CLASSIFICATION	7.835326531625571E-8	DESIGN
Class names in the FROM clause result in a JoinSequence (the old FromParser does this).	WITHOUT_CLASSIFICATION	0.9999990889730219	WITHOUT_CLASSIFICATION	9.110269782000863E-7	DESIGN
For many-to-many joins, use the tablename from the queryable collection for the default text.	WITHOUT_CLASSIFICATION	0.9999968036173041	WITHOUT_CLASSIFICATION	3.196382695809173E-6	DESIGN
Otherwise, use the property mapping.	WITHOUT_CLASSIFICATION	0.9999992320607869	WITHOUT_CLASSIFICATION	7.679392131893672E-7	DESIGN
should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9900183024419992	WITHOUT_CLASSIFICATION	0.009981697558000862	DESIGN
If the property is a special collection property name, return a CollectionPropertyMapping.	WITHOUT_CLASSIFICATION	0.9999885459387738	WITHOUT_CLASSIFICATION	1.1454061226051883E-5	DESIGN
Collection of components.	WITHOUT_CLASSIFICATION	0.999995696474334	WITHOUT_CLASSIFICATION	4.3035256660337535E-6	DESIGN
make sure the lhs is "assignable"...	WITHOUT_CLASSIFICATION	0.9999948108974338	WITHOUT_CLASSIFICATION	5.189102566216294E-6	DESIGN
false indicates to not generate parens around the assignment	WITHOUT_CLASSIFICATION	0.9999773750259708	WITHOUT_CLASSIFICATION	2.262497402918932E-5	DESIGN
Register the FromElement with the FROM clause, now that we have the names and aliases.	WITHOUT_CLASSIFICATION	0.9999997774493697	WITHOUT_CLASSIFICATION	2.2255063038927458E-7	DESIGN
currently allowed...	WITHOUT_CLASSIFICATION	0.9999925724685718	WITHOUT_CLASSIFICATION	7.427531428289407E-6	DESIGN
HHH-276 : implied joins in a subselect where clause - The destination needs to be added to the destination's from clause. Not sure if this is will fix everything, but it works.	WITHOUT_CLASSIFICATION	0.990852499893884	WITHOUT_CLASSIFICATION	0.00914750010611603	DESIGN
return classAlias == null ? className : classAlias;	WITHOUT_CLASSIFICATION	0.9989810592793462	WITHOUT_CLASSIFICATION	0.0010189407206537577	DESIGN
This is an explicit FROM element.	WITHOUT_CLASSIFICATION	0.9999436622744601	WITHOUT_CLASSIFICATION	5.63377255398633E-5	DESIGN
ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997620439912104	WITHOUT_CLASSIFICATION	2.3795600878957402E-4	DESIGN
Fetch can't be used with scroll() or iterate().	WITHOUT_CLASSIFICATION	0.9999991340760831	WITHOUT_CLASSIFICATION	8.659239167490306E-7	DESIGN
If it's not implied or it is implied and it's a many to many join where the target wasn't found.	WITHOUT_CLASSIFICATION	0.999944416706544	WITHOUT_CLASSIFICATION	5.558329345607111E-5	DESIGN
Since this is an explicit FROM element, it can't be implied in the FROM clause.	WITHOUT_CLASSIFICATION	0.999976324354277	WITHOUT_CLASSIFICATION	2.3675645723059186E-5	DESIGN
Do nothing, eplicit from elements are always in the projection list.	WITHOUT_CLASSIFICATION	0.9999995642796785	WITHOUT_CLASSIFICATION	4.3572032145428726E-7	DESIGN
propertyName refers to something like collection.size...	WITHOUT_CLASSIFICATION	0.9999992211405642	WITHOUT_CLASSIFICATION	7.788594358507486E-7	DESIGN
property name is a sub-path of a component...	WITHOUT_CLASSIFICATION	0.9998443037339164	WITHOUT_CLASSIFICATION	1.5569626608349907E-4	DESIGN
Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999980861567884	WITHOUT_CLASSIFICATION	1.9138432115804144E-6	DESIGN
nothing to do; even if the operand is a parameter, no way we could infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999699644287035	WITHOUT_CLASSIFICATION	3.0035571296592864E-5	DESIGN
logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9994770546608414	WITHOUT_CLASSIFICATION	5.229453391586656E-4	DESIGN
DotNode uses null here...	WITHOUT_CLASSIFICATION	0.9999889772975109	WITHOUT_CLASSIFICATION	1.1022702489112849E-5	DESIGN
We represent a from-clause alias	WITHOUT_CLASSIFICATION	0.9998903614770225	WITHOUT_CLASSIFICATION	1.0963852297747659E-4	DESIGN
we are the LHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999921797067779	WITHOUT_CLASSIFICATION	7.82029322212944E-6	DESIGN
we are the RHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.999988653677575	WITHOUT_CLASSIFICATION	1.1346322424914017E-5	DESIGN
we represent a naked (simple) prop-ref	WITHOUT_CLASSIFICATION	0.9999322026122536	WITHOUT_CLASSIFICATION	6.779738774646683E-5	DESIGN
EARLY EXIT!!! return so the resolve call explicitly coming from DotNode can resolve this...	WITHOUT_CLASSIFICATION	0.9986237655542142	WITHOUT_CLASSIFICATION	0.0013762344457858922	DESIGN
assume this ident's text does not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9998985549223175	WITHOUT_CLASSIFICATION	1.0144507768244876E-4	DESIGN
just ignore it for now, it'll get resolved later...	WITHOUT_CLASSIFICATION	0.999999863652591	WITHOUT_CLASSIFICATION	1.3634740896345436E-7	DESIGN
This is not actually a constant, but a reference to FROM element.	WITHOUT_CLASSIFICATION	0.9999809200954439	WITHOUT_CLASSIFICATION	1.9079904556110097E-5	DESIGN
check to see if our "propPath" actually represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999774264703323	WITHOUT_CLASSIFICATION	2.25735296676481E-5	DESIGN
these pieces are needed for usage in select clause	WITHOUT_CLASSIFICATION	0.997853867283769	WITHOUT_CLASSIFICATION	0.0021461327162309463	DESIGN
used to set the type of the parent dot node	WITHOUT_CLASSIFICATION	0.999529586276111	WITHOUT_CLASSIFICATION	4.704137238889908E-4	DESIGN
assume we do not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999219348281705	WITHOUT_CLASSIFICATION	7.806517182952689E-5	DESIGN
assume we do not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999219348281705	WITHOUT_CLASSIFICATION	7.806517182952689E-5	DESIGN
naked property-refs cannot be used with an aliased from element	WITHOUT_CLASSIFICATION	0.9999983295837966	WITHOUT_CLASSIFICATION	1.6704162032686784E-6	DESIGN
this piece is needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9967031687969216	WITHOUT_CLASSIFICATION	0.0032968312030784864	DESIGN
do not over-write the column text, as that has already been "rendered" during resolve	WITHOUT_CLASSIFICATION	0.9999992258674018	WITHOUT_CLASSIFICATION	7.741325983144706E-7	DESIGN
for some reason the antlr.CommonAST initialization routines force this method to get called twice. The first time with an empty string	WITHOUT_CLASSIFICATION	0.9999986132621048	WITHOUT_CLASSIFICATION	1.386737895199539E-6	DESIGN
Look up class name using the first identifier in the path.	WITHOUT_CLASSIFICATION	0.9999999192642461	WITHOUT_CLASSIFICATION	8.073575387274187E-8	DESIGN
Add to the query spaces.	WITHOUT_CLASSIFICATION	0.9999986254246445	WITHOUT_CLASSIFICATION	1.374575355502965E-6	DESIGN
If the from element isn't in the same clause, create a new from element.	WITHOUT_CLASSIFICATION	0.9999846977464573	WITHOUT_CLASSIFICATION	1.53022535427329E-5	DESIGN
This is the root level node. Generate an explicit from clause at the root.	WITHOUT_CLASSIFICATION	0.9996890844121632	WITHOUT_CLASSIFICATION	3.1091558783677854E-4	DESIGN
Correlated subqueries create 'special' implied from nodes because correlated subselects can't use an ANSI-style join	WITHOUT_CLASSIFICATION	0.9999991384873115	WITHOUT_CLASSIFICATION	8.615126884949342E-7	DESIGN
super-duper-classic-parser-regression-testing-mojo-magic...	WITHOUT_CLASSIFICATION	0.9971211891581476	WITHOUT_CLASSIFICATION	0.002878810841852412	DESIGN
A collection of entities...	WITHOUT_CLASSIFICATION	0.9999994201949648	WITHOUT_CLASSIFICATION	5.798050351616639E-7	DESIGN
A collection of components...	WITHOUT_CLASSIFICATION	0.9999946758763621	WITHOUT_CLASSIFICATION	5.324123637862128E-6	DESIGN
A collection of scalar elements...	WITHOUT_CLASSIFICATION	0.9999907016472916	WITHOUT_CLASSIFICATION	9.298352708341396E-6	DESIGN
according to both the ANSI-SQL and EJB3 specs, trim can either take exactly one parameter or a variable number of parameters between 1 and 4. from the SQL spec: <trim function> ::= TRIM <left paren> <trim operands> <right paren> <trim operands> ::= [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> <trim specification> ::= LEADING | TRAILING | BOTH If only <trim specification> is omitted, BOTH is assumed; if <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.99997866557433	WITHOUT_CLASSIFICATION	2.133442567004043E-5	DESIGN
Don't include sub-classes for implied collection joins or subquery joins.	WITHOUT_CLASSIFICATION	0.9970369125305084	WITHOUT_CLASSIFICATION	0.002963087469491619	DESIGN
Treat explict from elements in sub-queries properly.	WITHOUT_CLASSIFICATION	0.999992682244742	WITHOUT_CLASSIFICATION	7.317755258088761E-6	DESIGN
( implied && DotNode.useThetaStyleImplicitJoins ) ) {	WITHOUT_CLASSIFICATION	0.9999997002250353	WITHOUT_CLASSIFICATION	2.9977496473366796E-7	DESIGN
the "root from-element" in correlated subqueries do need this piece	WITHOUT_CLASSIFICATION	0.9952592782579026	WITHOUT_CLASSIFICATION	0.00474072174209746	DESIGN
Create the FROM element for the target (the elements of the collection).	WITHOUT_CLASSIFICATION	0.9999999787618818	WITHOUT_CLASSIFICATION	2.123811811203197E-8	DESIGN
If the join is implied, then don't include sub-classes on the element.	WITHOUT_CLASSIFICATION	0.9999509752262606	WITHOUT_CLASSIFICATION	4.9024773739391226E-5	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992722498241725	WITHOUT_CLASSIFICATION	7.277501758273799E-4	DESIGN
The associated entity is implied, but it must be included in the FROM. The collection alias is the role.	WITHOUT_CLASSIFICATION	0.9999714969252422	WITHOUT_CLASSIFICATION	2.8503074757754167E-5	DESIGN
Tag this node as a JOIN. Don't include subclasses in the join. This is a clollection join.	WITHOUT_CLASSIFICATION	0.999893045017419	WITHOUT_CLASSIFICATION	1.0695498258088229E-4	DESIGN
Get the class name of the associated entity.	WITHOUT_CLASSIFICATION	0.9999983937439887	WITHOUT_CLASSIFICATION	1.6062560113238478E-6	DESIGN
origin, path, implied, columns, classAlias,	WITHOUT_CLASSIFICATION	0.9997916207301033	WITHOUT_CLASSIFICATION	2.083792698966644E-4	DESIGN
implied	WITHOUT_CLASSIFICATION	0.9992354951318768	WITHOUT_CLASSIFICATION	7.645048681231263E-4	DESIGN
For implied many-to-many, just add the end join.	WITHOUT_CLASSIFICATION	0.9999998380016205	WITHOUT_CLASSIFICATION	1.6199837944939123E-7	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992722498241725	WITHOUT_CLASSIFICATION	7.277501758273799E-4	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992722498241725	WITHOUT_CLASSIFICATION	7.277501758273799E-4	DESIGN
the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9998816968581986	WITHOUT_CLASSIFICATION	1.1830314180142546E-4	DESIGN
This causes the factory to instantiate the desired class.	WITHOUT_CLASSIFICATION	0.999377064404846	WITHOUT_CLASSIFICATION	6.229355951541363E-4	DESIGN
private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9999979449725676	WITHOUT_CLASSIFICATION	2.055027432376361E-6	DESIGN
Frontbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9996990210463685	WITHOUT_CLASSIFICATION	3.009789536314132E-4	DESIGN
The types represented in the SQL result set. @return The types represented in the SQL result set.	WITHOUT_CLASSIFICATION	0.9996836895177035	WITHOUT_CLASSIFICATION	3.1631048229662634E-4	DESIGN
public Type[] getSqlResultTypes() {return sqlResultTypes;}	WITHOUT_CLASSIFICATION	0.9999567519895038	WITHOUT_CLASSIFICATION	4.3248010496159954E-5	DESIGN
First, collect all of the select expressions. NOTE: This must be done before invoking setScalarColumnText() because setScalarColumnText() changes the AST!!!	WITHOUT_CLASSIFICATION	0.9992788190946126	WITHOUT_CLASSIFICATION	7.211809053874008E-4	DESIGN
First allow the actual type to control the return value. (the actual underlying sqltype could actually be different)	WITHOUT_CLASSIFICATION	0.9999889920216481	WITHOUT_CLASSIFICATION	1.100797835186402E-5	DESIGN
sqlResultTypeList.addAll( constructorArgumentTypeList );	WITHOUT_CLASSIFICATION	0.9999997194322425	WITHOUT_CLASSIFICATION	2.805677573832094E-7	DESIGN
If the data type is not an association type, it could not have been in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999998029331056	WITHOUT_CLASSIFICATION	1.970668943542018E-7	DESIGN
sqlResultTypeList.add( type );	WITHOUT_CLASSIFICATION	0.9999995509878599	WITHOUT_CLASSIFICATION	4.4901214012996064E-7	DESIGN
Always add the type to the return type list.	WITHOUT_CLASSIFICATION	0.9999421836061783	WITHOUT_CLASSIFICATION	5.781639382170388E-5	DESIGN
add the fetched entities	WITHOUT_CLASSIFICATION	0.999999867837585	WITHOUT_CLASSIFICATION	1.3216241497487477E-7	DESIGN
Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.999999745475374	WITHOUT_CLASSIFICATION	2.545246260919588E-7	DESIGN
function support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9942407326136106	WITHOUT_CLASSIFICATION	0.005759267386389504	DESIGN
If there are any scalars (non-entities) selected, render the select column aliases.	WITHOUT_CLASSIFICATION	0.9999973151686192	WITHOUT_CLASSIFICATION	2.684831380687883E-6	DESIGN
sqlResultTypeList,	WITHOUT_CLASSIFICATION	0.9999987291060413	WITHOUT_CLASSIFICATION	1.2708939587646502E-6	DESIGN
ArrayList sqlResultTypeList,	WITHOUT_CLASSIFICATION	0.9999996439804494	WITHOUT_CLASSIFICATION	3.5601955050191704E-7	DESIGN
sqlResultTypes = ( Type[] ) sqlResultTypeList.toArray( new Type[sqlResultTypeList.size()] );	WITHOUT_CLASSIFICATION	0.9999999956795881	WITHOUT_CLASSIFICATION	4.320411842958519E-9	DESIGN
lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9923245629437403	WITHOUT_CLASSIFICATION	0.0076754370562597575	DESIGN
TODO:	WITHOUT_CLASSIFICATION	0.9767066915245995	WITHOUT_CLASSIFICATION	0.023293308475400402	DESIGN
Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999980796204019	WITHOUT_CLASSIFICATION	1.9203795981275837E-6	DESIGN
Generate an 2d array of column names, the first dimension is parallel with the return types array. The second dimension is the list of column names for each type.	WITHOUT_CLASSIFICATION	0.9999964413549655	WITHOUT_CLASSIFICATION	3.558645034588299E-6	DESIGN
Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999748704697373	WITHOUT_CLASSIFICATION	2.5129530262604858E-5	DESIGN
union subclass support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9883935968059469	WITHOUT_CLASSIFICATION	0.0116064031940531	DESIGN
Skip 'DISTINCT' and 'ALL', so we return the first expression node.	WITHOUT_CLASSIFICATION	0.9999956885876216	WITHOUT_CLASSIFICATION	4.311412378442946E-6	DESIGN
Create SQL_TOKEN nodes for the columns.	WITHOUT_CLASSIFICATION	0.9999826251856647	WITHOUT_CLASSIFICATION	1.737481433534093E-5	DESIGN
Generate the property select tokens.	WITHOUT_CLASSIFICATION	0.9999995681837425	WITHOUT_CLASSIFICATION	4.318162575337723E-7	DESIGN
Get the function name node.	WITHOUT_CLASSIFICATION	0.9999993474242609	WITHOUT_CLASSIFICATION	6.525757390827169E-7	DESIGN
Method expressions in a SELECT should always be considered scalar.	WITHOUT_CLASSIFICATION	0.9315817731642722	WITHOUT_CLASSIFICATION	0.06841822683572785	DESIGN
If this is 'elements' then create a new FROM element.	WITHOUT_CLASSIFICATION	0.9999915688938708	WITHOUT_CLASSIFICATION	8.431106129281335E-6	DESIGN
Not elements(x)	WITHOUT_CLASSIFICATION	0.9999997978993305	WITHOUT_CLASSIFICATION	2.0210066947392847E-7	DESIGN
Dialect function	WITHOUT_CLASSIFICATION	0.9999991363873958	WITHOUT_CLASSIFICATION	8.636126042028694E-7	DESIGN
Collection 'property function'	WITHOUT_CLASSIFICATION	0.9999990137563068	WITHOUT_CLASSIFICATION	9.862436931589148E-7	DESIGN
If the constant is an IDENT, figure out what it means...	WITHOUT_CLASSIFICATION	0.9999980778840762	WITHOUT_CLASSIFICATION	1.922115923725207E-6	DESIGN
IDENT is a class alias in the FROM.	WITHOUT_CLASSIFICATION	0.9999941084065757	WITHOUT_CLASSIFICATION	5.8915934243157835E-6	DESIGN
Resolve to an identity column.	WITHOUT_CLASSIFICATION	0.9998701492522546	WITHOUT_CLASSIFICATION	1.2985074774532457E-4	DESIGN
Otherwise, it's a literal.	WITHOUT_CLASSIFICATION	0.9999985861160552	WITHOUT_CLASSIFICATION	1.4138839448407644E-6	DESIGN
the name of an entity class	WITHOUT_CLASSIFICATION	0.9999980833210316	WITHOUT_CLASSIFICATION	1.916678968399221E-6	DESIGN
the class discriminator value	WITHOUT_CLASSIFICATION	0.9999998617702414	WITHOUT_CLASSIFICATION	1.382297585767475E-7	DESIGN
Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.999999979963216	WITHOUT_CLASSIFICATION	2.00367840683122E-8	DESIGN
Add a space before the display text.	WITHOUT_CLASSIFICATION	0.9999974223775642	WITHOUT_CLASSIFICATION	2.577622435848677E-6	DESIGN
Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.999997435117607	WITHOUT_CLASSIFICATION	2.564882392968207E-6	DESIGN
child == parent.getFirstChild()	WITHOUT_CLASSIFICATION	0.9999992023582283	WITHOUT_CLASSIFICATION	7.976417716090927E-7	DESIGN
Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.999997435117607	WITHOUT_CLASSIFICATION	2.564882392968207E-6	DESIGN
Filter conditions need to be inserted before the HQL where condition and the theta join node. This is because org.hibernate.loader.Loader binds the filter parameters first, then it binds all the HQL query parameters, see org.hibernate.loader.Loader.processFilterParameters().	WITHOUT_CLASSIFICATION	0.9999880801963218	WITHOUT_CLASSIFICATION	1.191980367819514E-5	DESIGN
Put the FILTERS node before the HQL condition and theta joins	WITHOUT_CLASSIFICATION	0.999992804725923	WITHOUT_CLASSIFICATION	7.195274076962832E-6	DESIGN
add the current fragment to the FILTERS node	WITHOUT_CLASSIFICATION	0.9999968922772052	WITHOUT_CLASSIFICATION	3.1077227947478426E-6	DESIGN
Create a new THETA_JOINS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999873752209727	WITHOUT_CLASSIFICATION	1.2624779027371642E-5	DESIGN
Put the THETA_JOINS node before the HQL condition, after the filters.	WITHOUT_CLASSIFICATION	0.9999977545530518	WITHOUT_CLASSIFICATION	2.2454469481917803E-6	DESIGN
add the current fragment to the THETA_JOINS node	WITHOUT_CLASSIFICATION	0.9999966895944898	WITHOUT_CLASSIFICATION	3.3104055102285295E-6	DESIGN
First, try to get the persister using the given name directly.	WITHOUT_CLASSIFICATION	0.9999985254749295	WITHOUT_CLASSIFICATION	1.4745250704752538E-6	DESIGN
unable to locate it using this name	WITHOUT_CLASSIFICATION	0.9998509802645739	WITHOUT_CLASSIFICATION	1.4901973542602503E-4	DESIGN
If that didn't work, try using the 'import' name.	WITHOUT_CLASSIFICATION	0.999989111252814	WITHOUT_CLASSIFICATION	1.0888747185889439E-5	DESIGN
Implicit joins use theta style (WHERE pk = fk), explicit joins use JOIN (after from)	WITHOUT_CLASSIFICATION	0.999998377363357	WITHOUT_CLASSIFICATION	1.622636643038484E-6	DESIGN
locate the registered function by the given name	WITHOUT_CLASSIFICATION	0.9999910699788893	WITHOUT_CLASSIFICATION	8.930021110724413E-6	DESIGN
determine the type of the first argument...	WITHOUT_CLASSIFICATION	0.9999897834580694	WITHOUT_CLASSIFICATION	1.0216541930627257E-5	DESIGN
Use the DOT node to emit the first column name. Create the column names, folled by the column aliases.	WITHOUT_CLASSIFICATION	0.9999989214013746	WITHOUT_CLASSIFICATION	1.078598625488713E-6	DESIGN
Note: this simply constructs a "raw" SQL_TOKEN representing the where fragment and injects this into the tree. This "works"; however it is probably not the best long-term solution. At some point we probably want to apply an additional grammar to properly tokenize this where fragment into constituent parts focused on the operators embedded within the fragment.	WITHOUT_CLASSIFICATION	0.8442913539665483	DESIGN	0.1557086460334517	WITHOUT_CLASSIFICATION
Append the text of the current node.	WITHOUT_CLASSIFICATION	0.9999958537328149	WITHOUT_CLASSIFICATION	4.146267185151351E-6	DESIGN
If the node has a first child, recurse into the first child.	WITHOUT_CLASSIFICATION	0.9999951431422829	WITHOUT_CLASSIFICATION	4.856857717128043E-6	DESIGN
If there is a second child (RHS), recurse into that child.	WITHOUT_CLASSIFICATION	0.9999457027281433	WITHOUT_CLASSIFICATION	5.429727185665681E-5	DESIGN
Iterate through the alias,JoinSequence pairs and generate SQL token nodes.	WITHOUT_CLASSIFICATION	0.9999999363591371	WITHOUT_CLASSIFICATION	6.364086294347705E-8	DESIGN
If the from element represents a JOIN_FRAGMENT and it is a theta-style join, convert its type from JOIN_FRAGMENT to FROM_FRAGMENT	WITHOUT_CLASSIFICATION	0.9999989659148555	WITHOUT_CLASSIFICATION	1.0340851445253814E-6	DESIGN
this is used during SqlGenerator processing	WITHOUT_CLASSIFICATION	0.9982065072327745	WITHOUT_CLASSIFICATION	0.0017934927672254087	DESIGN
If there is a FROM fragment and the FROM element is an explicit, then add the from part.	WITHOUT_CLASSIFICATION	0.9999997566088017	WITHOUT_CLASSIFICATION	2.433911983716656E-7	DESIGN
&& StringHelper.isNotEmpty( frag )	WITHOUT_CLASSIFICATION	0.999998833223728	WITHOUT_CLASSIFICATION	1.1667762720190573E-6	DESIGN
The FROM fragment will probably begin with ', '. Remove this if it is present.	WITHOUT_CLASSIFICATION	0.9996457844426022	WITHOUT_CLASSIFICATION	3.542155573977448E-4	DESIGN
This uses a PathExpressionParser but notice that compound paths are not valid, only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9987266505117706	WITHOUT_CLASSIFICATION	0.001273349488229447	DESIGN
SELECT p FROM p IN CLASS eg.Person ORDER BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999767015806483	WITHOUT_CLASSIFICATION	2.3298419351594366E-5	DESIGN
The reason for this is SQL doesn't let you sort by an expression you are not returning in the result set.	WITHOUT_CLASSIFICATION	0.9999832575028875	WITHOUT_CLASSIFICATION	1.674249711255785E-5	DESIGN
named query parameter	WITHOUT_CLASSIFICATION	0.9997584164022767	WITHOUT_CLASSIFICATION	2.4158359772316035E-4	DESIGN
default mode	WITHOUT_CLASSIFICATION	0.9999940572723066	WITHOUT_CLASSIFICATION	5.942727693346951E-6	DESIGN
QueryJoinFragment join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999999851763651	WITHOUT_CLASSIFICATION	1.4823634911210384E-8	DESIGN
reset the dotcount (but not the path) after reset!	WITHOUT_CLASSIFICATION	0.999999502053611	WITHOUT_CLASSIFICATION	4.97946388906229E-7	DESIGN
after reset!	WITHOUT_CLASSIFICATION	0.9999948652099621	WITHOUT_CLASSIFICATION	5.1347900379411075E-6	DESIGN
we don't need to worry about any condition in the ON clause here (toFromFragmentString), since anything in the ON condition is already applied to the whole query	WITHOUT_CLASSIFICATION	0.9773594390826086	WITHOUT_CLASSIFICATION	0.022640560917391427	DESIGN
bit_length feels a bit broken to me. We have to cast to char in order to pass when a numeric value is supplied. But of course the answers given will be wildly different for these two datatypes. 1234.5678 will be 9 bytes as a char string but will be 8 or 16 bytes as a true numeric. Jay Nance 2006-09-22	WITHOUT_CLASSIFICATION	0.992929497873332	WITHOUT_CLASSIFICATION	0.007070502126667954	DESIGN
dotcount>=2	WITHOUT_CLASSIFICATION	0.9999575675569706	WITHOUT_CLASSIFICATION	4.243244302940728E-5	DESIGN
Do the corresponding RHS	WITHOUT_CLASSIFICATION	0.999973751284808	WITHOUT_CLASSIFICATION	2.6248715191989192E-5	DESIGN
if its "id"	WITHOUT_CLASSIFICATION	0.9999912903835816	WITHOUT_CLASSIFICATION	8.709616418356021E-6	DESIGN
or its the id property name	WITHOUT_CLASSIFICATION	0.9999999253907027	WITHOUT_CLASSIFICATION	7.460929734216238E-8	DESIGN
join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999999857789451	WITHOUT_CLASSIFICATION	1.4221054938047527E-8	DESIGN
important!!	WITHOUT_CLASSIFICATION	0.9997924557378645	WITHOUT_CLASSIFICATION	2.0754426213544477E-4	DESIGN
String[] keyCols = collPersister.getKeyColumnNames();	WITHOUT_CLASSIFICATION	0.9999997492381865	WITHOUT_CLASSIFICATION	2.507618134304374E-7	DESIGN
an association	WITHOUT_CLASSIFICATION	0.9999986252481039	WITHOUT_CLASSIFICATION	1.3747518960599135E-6	DESIGN
allow index() function:	WITHOUT_CLASSIFICATION	0.9999986179566449	WITHOUT_CLASSIFICATION	1.3820433552027438E-6	DESIGN
here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9999719599355232	WITHOUT_CLASSIFICATION	2.8040064476877446E-5	DESIGN
The reason for this is SQL doesn't let you sort by an expression you are not returning in the result set.	WITHOUT_CLASSIFICATION	0.9999832575028875	WITHOUT_CLASSIFICATION	1.674249711255785E-5	DESIGN
many-to-many	WITHOUT_CLASSIFICATION	0.9999490958148345	WITHOUT_CLASSIFICATION	5.090418516559393E-5	DESIGN
collections of values	WITHOUT_CLASSIFICATION	0.9999994004500006	WITHOUT_CLASSIFICATION	5.995499994417961E-7	DESIGN
opening paren in new Foo ( ... )	WITHOUT_CLASSIFICATION	0.9985208772121275	WITHOUT_CLASSIFICATION	0.0014791227878725838	DESIGN
if we are inside a new Result(), but not inside a nested function	WITHOUT_CLASSIFICATION	0.9999542415535161	WITHOUT_CLASSIFICATION	4.575844648401375E-5	DESIGN
special case	WITHOUT_CLASSIFICATION	0.9999984222661272	WITHOUT_CLASSIFICATION	1.57773387277002E-6	DESIGN
the name of an SQL function	WITHOUT_CLASSIFICATION	0.9999992190132333	WITHOUT_CLASSIFICATION	7.809867667871623E-7	DESIGN
null child could occur for no from clause in a filter	WITHOUT_CLASSIFICATION	0.999998050371538	WITHOUT_CLASSIFICATION	1.9496284620136517E-6	DESIGN
this is basically a copy/paste of OrderByParser ... might be worth refactoring	WITHOUT_CLASSIFICATION	0.7365380689930136	WITHOUT_CLASSIFICATION	0.2634619310069864	DESIGN
SELECT p FROM p IN CLASS eg.Person GROUP BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999163552817655	WITHOUT_CLASSIFICATION	8.364471823451672E-5	DESIGN
return aliases not supported in classic translator!	WITHOUT_CLASSIFICATION	0.9881913054389165	WITHOUT_CLASSIFICATION	0.011808694561083445	DESIGN
register collection role	WITHOUT_CLASSIFICATION	0.9999731237053024	WITHOUT_CLASSIFICATION	2.6876294697494016E-5	DESIGN
The keyword used to specify an identity column, if identity column key generation is supported.	WITHOUT_CLASSIFICATION	0.9984070490808024	WITHOUT_CLASSIFICATION	0.0015929509191977297	DESIGN
.getElementPropertyMapping();	WITHOUT_CLASSIFICATION	0.9999971113022844	WITHOUT_CLASSIFICATION	2.888697715643021E-6	DESIGN
crossJoins.add(name);	WITHOUT_CLASSIFICATION	0.9999965722664259	WITHOUT_CLASSIFICATION	3.427733574055396E-6	DESIGN
ie no select clause in HQL	WITHOUT_CLASSIFICATION	0.9999997747465449	WITHOUT_CLASSIFICATION	2.2525345505933733E-7	DESIGN
initialize the Set of queried identifier spaces (ie. tables)	WITHOUT_CLASSIFICATION	0.9999999205654919	WITHOUT_CLASSIFICATION	7.943450807150002E-8	DESIGN
ie. no select clause	WITHOUT_CLASSIFICATION	0.999999982551878	WITHOUT_CLASSIFICATION	1.7448121941547538E-8	DESIGN
there _was_ a select clause	WITHOUT_CLASSIFICATION	0.9999971243849528	WITHOUT_CLASSIFICATION	2.8756150472145925E-6	DESIGN
return the concrete type, or the underlying type if a concrete type was not specified	WITHOUT_CLASSIFICATION	0.9999643332788967	WITHOUT_CLASSIFICATION	3.566672110331415E-5	DESIGN
many-to-many	WITHOUT_CLASSIFICATION	0.9999490958148345	WITHOUT_CLASSIFICATION	5.090418516559393E-5	DESIGN
q.addCollection(collectionName, collectionRole);	WITHOUT_CLASSIFICATION	0.9999994191226579	WITHOUT_CLASSIFICATION	5.808773421148404E-7	DESIGN
classic parser does not support bulk manipulation statements	WITHOUT_CLASSIFICATION	0.9977345393535361	WITHOUT_CLASSIFICATION	0.002265460646463898	DESIGN
can't cache this stuff either (per-invocation)	WITHOUT_CLASSIFICATION	0.9999476106672789	WITHOUT_CLASSIFICATION	5.238933272116907E-5	DESIGN
unfortunately this stuff can't be cached because it is per-invocation, not constant for the QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9998479690618852	WITHOUT_CLASSIFICATION	1.5203093811475826E-4	DESIGN
This is the legacy behaviour for HQL queries...	WITHOUT_CLASSIFICATION	0.9999675966918492	WITHOUT_CLASSIFICATION	3.2403308150887065E-5	DESIGN
not known!	WITHOUT_CLASSIFICATION	0.9999937513304659	WITHOUT_CLASSIFICATION	6.248669534238892E-6	DESIGN
not known!	WITHOUT_CLASSIFICATION	0.9999937513304659	WITHOUT_CLASSIFICATION	6.248669534238892E-6	DESIGN
we have the form: trim(trimSource) so we trim leading and trailing spaces EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999998875211985	WITHOUT_CLASSIFICATION	1.1247880140931171E-7	DESIGN
not known!	WITHOUT_CLASSIFICATION	0.9999937513304659	WITHOUT_CLASSIFICATION	6.248669534238892E-6	DESIGN
not known!	WITHOUT_CLASSIFICATION	0.9999937513304659	WITHOUT_CLASSIFICATION	6.248669534238892E-6	DESIGN
Need this, since join condition can appear inside parens!	WITHOUT_CLASSIFICATION	0.9995835337583814	WITHOUT_CLASSIFICATION	4.164662416186578E-4	DESIGN
tokens that close a sub expression tokens that open a sub expression tokens that would indicate a sub expression is a boolean expression	WITHOUT_CLASSIFICATION	0.9996649181399543	WITHOUT_CLASSIFICATION	3.3508186004579265E-4	DESIGN
expressionTerminators.add(","); deliberately excluded	WITHOUT_CLASSIFICATION	0.9999959640287749	WITHOUT_CLASSIFICATION	4.035971225048581E-6	DESIGN
expressionOpeners.add(","); deliberately excluded	WITHOUT_CLASSIFICATION	0.9999851768865374	WITHOUT_CLASSIFICATION	1.4823113462526674E-5	DESIGN
we have the form: trim(from trimSource). This is functionally equivalent to trim(trimSource) EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999614598205643	WITHOUT_CLASSIFICATION	3.8540179435771336E-5	DESIGN
otherwise, a trim-specification and/or a trim-character have been specified; we need to decide which options are present and "do the right thing" should leading trim-characters be trimmed? should trailing trim-characters be trimmed? the trim-character (what is to be trimmed off?) the trim-source (from where should it be trimmed?)	WITHOUT_CLASSIFICATION	0.5459283557290714	WITHOUT_CLASSIFICATION	0.4540716442709286	DESIGN
Inside a BETWEEN ... AND ... expression	WITHOUT_CLASSIFICATION	0.9683915307532482	WITHOUT_CLASSIFICATION	0.031608469246751855	DESIGN
were an odd or even number of NOTs encountered the join string built up by compound paths inside this expression a flag indicating if the subexpression is known to be boolean	WITHOUT_CLASSIFICATION	0.9989320902395676	WITHOUT_CLASSIFICATION	0.0010679097604323494	DESIGN
ie. a many-to-many	WITHOUT_CLASSIFICATION	0.9999959407534778	WITHOUT_CLASSIFICATION	4.0592465222568085E-6	DESIGN
Cope with [,]	WITHOUT_CLASSIFICATION	0.9999990615121489	WITHOUT_CLASSIFICATION	9.384878510012935E-7	DESIGN
Cope with a continued path expression (ie. ].baz)	WITHOUT_CLASSIFICATION	0.9999190918815127	WITHOUT_CLASSIFICATION	8.090811848723964E-5	DESIGN
NOTE: early return	WITHOUT_CLASSIFICATION	0.9999987537626089	WITHOUT_CLASSIFICATION	1.246237390944918E-6	DESIGN
Cope with a subselect	WITHOUT_CLASSIFICATION	0.9999985042805083	WITHOUT_CLASSIFICATION	1.4957194916236128E-6	DESIGN
Cope with special cases of AND, NOT, ()	WITHOUT_CLASSIFICATION	0.9999986549895241	WITHOUT_CLASSIFICATION	1.3450104759468685E-6	DESIGN
Close extra brackets we opened	WITHOUT_CLASSIFICATION	0.9999984422228531	WITHOUT_CLASSIFICATION	1.5577771470157202E-6	DESIGN
take note when this is a boolean expression	WITHOUT_CLASSIFICATION	0.9973564874588217	WITHOUT_CLASSIFICATION	0.0026435125411783237	DESIGN
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999646184875856	WITHOUT_CLASSIFICATION	3.5381512414549606E-5	DESIGN
process a token, mapping OO path expressions to SQL expressions	WITHOUT_CLASSIFICATION	0.9995105223914809	WITHOUT_CLASSIFICATION	4.894776085190545E-4	DESIGN
Open any extra brackets we might need.	WITHOUT_CLASSIFICATION	0.9875949126402981	WITHOUT_CLASSIFICATION	0.012405087359701977	DESIGN
Cope with special cases of AND, NOT, )	WITHOUT_CLASSIFICATION	0.9999960625431356	WITHOUT_CLASSIFICATION	3.937456864478231E-6	DESIGN
the next one up must also be	WITHOUT_CLASSIFICATION	0.9999987815094782	WITHOUT_CLASSIFICATION	1.2184905218600928E-6	DESIGN
Add any joins	WITHOUT_CLASSIFICATION	0.9999973779617214	WITHOUT_CLASSIFICATION	2.622038278639227E-6	DESIGN
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999646184875856	WITHOUT_CLASSIFICATION	3.5381512414549606E-5	DESIGN
named query parameter	WITHOUT_CLASSIFICATION	0.9997584164022767	WITHOUT_CLASSIFICATION	2.4158359772316035E-4	DESIGN
path expression	WITHOUT_CLASSIFICATION	0.9999978538097323	WITHOUT_CLASSIFICATION	2.1461902676612865E-6	DESIGN
saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.99999257498136	WITHOUT_CLASSIFICATION	7.425018640005445E-6	DESIGN
persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999056274472373	WITHOUT_CLASSIFICATION	9.437255276264319E-5	DESIGN
anything else	WITHOUT_CLASSIFICATION	0.9999996487829688	WITHOUT_CLASSIFICATION	3.512170312677619E-7	DESIGN
the path expression continues after a ]	WITHOUT_CLASSIFICATION	0.9999385743111778	WITHOUT_CLASSIFICATION	6.142568882218254E-5	DESIGN
careful with this!	WITHOUT_CLASSIFICATION	0.999988685512307	WITHOUT_CLASSIFICATION	1.131448769296277E-5	DESIGN
the path expression ends at the ]	WITHOUT_CLASSIFICATION	0.9999318291537915	WITHOUT_CLASSIFICATION	6.817084620852685E-5	DESIGN
"finish off" the join	WITHOUT_CLASSIFICATION	0.9999994614937759	WITHOUT_CLASSIFICATION	5.38506224120801E-7	DESIGN
NOTICE: no " or . since they are part of (compound) identifiers	WITHOUT_CLASSIFICATION	0.9998426589623564	WITHOUT_CLASSIFICATION	1.573410376436549E-4	DESIGN
cannot instantiate	WITHOUT_CLASSIFICATION	0.9999970101272659	WITHOUT_CLASSIFICATION	2.9898727340518777E-6	DESIGN
start by looking for HQL keywords...	WITHOUT_CLASSIFICATION	0.9999996900619328	WITHOUT_CLASSIFICATION	3.099380672099144E-7	DESIGN
inner joins can be abbreviated to 'join'	WITHOUT_CLASSIFICATION	0.9998182240786211	WITHOUT_CLASSIFICATION	1.8177592137888938E-4	DESIGN
'outer' is optional and is ignored	WITHOUT_CLASSIFICATION	0.9999991566024189	WITHOUT_CLASSIFICATION	8.433975810332321E-7	DESIGN
now anything that is not a HQL keyword	WITHOUT_CLASSIFICATION	0.9999923258636112	WITHOUT_CLASSIFICATION	7.674136388826795E-6	DESIGN
process the "old" HQL style where aliases appear _first_ ie. using the IN or IN CLASS constructions	WITHOUT_CLASSIFICATION	0.9997853985266951	WITHOUT_CLASSIFICATION	2.146014733050053E-4	DESIGN
treat it as a classname	WITHOUT_CLASSIFICATION	0.9999981577929357	WITHOUT_CLASSIFICATION	1.842207064223001E-6	DESIGN
treat it as a path expression	WITHOUT_CLASSIFICATION	0.999996820630703	WITHOUT_CLASSIFICATION	3.179369297016113E-6	DESIGN
starts with the name of a mapped class (new style)	WITHOUT_CLASSIFICATION	0.9999982527214053	WITHOUT_CLASSIFICATION	1.7472785946683793E-6	DESIGN
starts with a path expression (new style)	WITHOUT_CLASSIFICATION	0.9999942396285338	WITHOUT_CLASSIFICATION	5.760371466209856E-6	DESIGN
allow ODMG OQL style: from Person p, p.cars c	WITHOUT_CLASSIFICATION	0.9995596625413672	WITHOUT_CLASSIFICATION	4.4033745863277283E-4	DESIGN
handle quoted strings	WITHOUT_CLASSIFICATION	0.9999984936195053	WITHOUT_CLASSIFICATION	1.5063804946393784E-6	DESIGN
Object insertions, updates, and deletions have list semantics because they must happen in the right order so as to respect referential integrity	WITHOUT_CLASSIFICATION	0.9988026099060315	WITHOUT_CLASSIFICATION	0.0011973900939685226	DESIGN
"finish off" the join	WITHOUT_CLASSIFICATION	0.9999994614937759	WITHOUT_CLASSIFICATION	5.38506224120801E-7	DESIGN
ignore whitespace	WITHOUT_CLASSIFICATION	0.9999999610976663	WITHOUT_CLASSIFICATION	3.890233380230217E-8	DESIGN
do replacements	WITHOUT_CLASSIFICATION	0.9999899413097055	WITHOUT_CLASSIFICATION	1.0058690294579028E-5	DESIGN
handle HQL2 collection syntax	WITHOUT_CLASSIFICATION	0.9999906623792097	WITHOUT_CLASSIFICATION	9.337620790205747E-6	DESIGN
uuid.hex is deprecated	WITHOUT_CLASSIFICATION	0.999604898381299	WITHOUT_CLASSIFICATION	3.9510161870098294E-4	DESIGN
AbstractSelectingDelegate impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999487513056543	WITHOUT_CLASSIFICATION	5.124869434563473E-5	DESIGN
hilo params	WITHOUT_CLASSIFICATION	0.9999821063131087	WITHOUT_CLASSIFICATION	1.7893686891316554E-5	DESIGN
sql = query;	WITHOUT_CLASSIFICATION	0.9999936968888273	WITHOUT_CLASSIFICATION	6.303111172702744E-6	DESIGN
performance opt	WITHOUT_CLASSIFICATION	0.9999951573559541	WITHOUT_CLASSIFICATION	4.842644045853697E-6	DESIGN
sql = update;	WITHOUT_CLASSIFICATION	0.9999998690688161	WITHOUT_CLASSIFICATION	1.3093118383758122E-7	DESIGN
hilo config	WITHOUT_CLASSIFICATION	0.999994895858327	WITHOUT_CLASSIFICATION	5.104141673006305E-6	DESIGN
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999717978692584	WITHOUT_CLASSIFICATION	2.8202130741688846E-5	DESIGN
don't allow comments on these insert statements as comments totally blow up the Oracle getGeneratedKeys "support" :(	WITHOUT_CLASSIFICATION	0.9999996143271702	WITHOUT_CLASSIFICATION	3.8567282971772615E-7	DESIGN
abort the save (the object is already saved by a circular cascade)	WITHOUT_CLASSIFICATION	0.9999041132207366	WITHOUT_CLASSIFICATION	9.588677926334975E-5	DESIGN
throw new IdentifierGenerationException("save associated object first, or disable cascade for inverse association");	WITHOUT_CLASSIFICATION	0.9999885040520194	WITHOUT_CLASSIFICATION	1.149594798054678E-5	DESIGN
intentionally empty	WITHOUT_CLASSIFICATION	0.9999735345070128	WITHOUT_CLASSIFICATION	2.6465492987289176E-5	DESIGN
do nothing to avoid a lazy property initialization	WITHOUT_CLASSIFICATION	0.9999988647587384	WITHOUT_CLASSIFICATION	1.1352412615681056E-6	DESIGN
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999092891482726	WITHOUT_CLASSIFICATION	9.071085172733824E-5	DESIGN
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999717978692584	WITHOUT_CLASSIFICATION	2.8202130741688846E-5	DESIGN
do nothing until we hit the rsult set containing the generated id	WITHOUT_CLASSIFICATION	0.9999999524470085	WITHOUT_CLASSIFICATION	4.755299152758878E-8	DESIGN
COLUMN and TABLE should be renamed but it would break the public API	WITHOUT_CLASSIFICATION	0.999881521922624	WITHOUT_CLASSIFICATION	1.1847807737604853E-4	DESIGN
Loaded entity instances, by EntityKey	WITHOUT_CLASSIFICATION	0.9999761288965285	WITHOUT_CLASSIFICATION	2.3871103471518292E-5	DESIGN
if the given name is un-qualified we may neen to qualify it	WITHOUT_CLASSIFICATION	0.9999289835081194	WITHOUT_CLASSIFICATION	7.101649188057628E-5	DESIGN
the default...	WITHOUT_CLASSIFICATION	0.999998954425669	WITHOUT_CLASSIFICATION	1.045574331003834E-6	DESIGN
unfortunately not really safe to normalize this to 1 as an initial value like we do the others because we would not be able to control this if we are using a sequence...	WITHOUT_CLASSIFICATION	0.9999931657741695	WITHOUT_CLASSIFICATION	6.834225830465735E-6	DESIGN
intentionally empty	WITHOUT_CLASSIFICATION	0.9999735345070128	WITHOUT_CLASSIFICATION	2.6465492987289176E-5	DESIGN
Identity map of CollectionEntry instances, by the collection wrapper	WITHOUT_CLASSIFICATION	0.9999677032581401	WITHOUT_CLASSIFICATION	3.229674185993017E-5	DESIGN
general purpose parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999500078128545	WITHOUT_CLASSIFICATION	4.999218714549603E-4	DESIGN
table-specific parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998795261008245	WITHOUT_CLASSIFICATION	1.2047389917537895E-4	DESIGN
Configurable implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998023678610664	WITHOUT_CLASSIFICATION	1.976321389335444E-4	DESIGN
IdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998910839263458	WITHOUT_CLASSIFICATION	1.0891607365416119E-4	DESIGN
PersistentIdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996419019110598	WITHOUT_CLASSIFICATION	3.5809808894019733E-4	DESIGN
prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999650001281987	WITHOUT_CLASSIFICATION	3.4999871801398204E-5	DESIGN
prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999650001281987	WITHOUT_CLASSIFICATION	3.4999871801398204E-5	DESIGN
fetch the generated id in a separate query	WITHOUT_CLASSIFICATION	0.9997596756501278	WITHOUT_CLASSIFICATION	2.4032434987215313E-4	DESIGN
we just hit the last position	WITHOUT_CLASSIFICATION	0.9999999187501173	WITHOUT_CLASSIFICATION	8.124988276616431E-8	DESIGN
scroll ahead	WITHOUT_CLASSIFICATION	0.99999914251386	WITHOUT_CLASSIFICATION	8.574861399560118E-7	DESIGN
scroll backward	WITHOUT_CLASSIFICATION	0.999983966871183	WITHOUT_CLASSIFICATION	1.603312881707439E-5	DESIGN
we have not yet hit the last result...	WITHOUT_CLASSIFICATION	0.9999999636518415	WITHOUT_CLASSIFICATION	3.634815845540374E-8	DESIGN
Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998401879537493	WITHOUT_CLASSIFICATION	1.5981204625072654E-4	DESIGN
State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999560854534356	WITHOUT_CLASSIFICATION	4.391454656432183E-5	DESIGN
Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998322018013909	WITHOUT_CLASSIFICATION	1.6779819860917493E-4	DESIGN
do this when all the properties are updateable since there is a certain likelihood that the information will already be snapshot-cached.	WITHOUT_CLASSIFICATION	0.9980938517268957	WITHOUT_CLASSIFICATION	0.001906148273104275	DESIGN
Inner classes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999874085695921	WITHOUT_CLASSIFICATION	1.2591430407902604E-4	DESIGN
Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998401879537493	WITHOUT_CLASSIFICATION	1.5981204625072654E-4	DESIGN
State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999560854534356	WITHOUT_CLASSIFICATION	4.391454656432183E-5	DESIGN
Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998322018013909	WITHOUT_CLASSIFICATION	1.6779819860917493E-4	DESIGN
Caches	WITHOUT_CLASSIFICATION	0.9999577388434534	WITHOUT_CLASSIFICATION	4.226115654655537E-5	DESIGN
Generators:	WITHOUT_CLASSIFICATION	0.9999757693964696	WITHOUT_CLASSIFICATION	2.4230603530404808E-5	DESIGN
cache region is defined by the root-class in the hierarchy...	WITHOUT_CLASSIFICATION	0.9999718071749161	WITHOUT_CLASSIFICATION	2.8192825083930405E-5	DESIGN
check if the detached object being merged is the parent	WITHOUT_CLASSIFICATION	0.9999167885647231	WITHOUT_CLASSIFICATION	8.321143527682069E-5	DESIGN
after all persisters and named queries are registered	WITHOUT_CLASSIFICATION	0.9992174046784769	WITHOUT_CLASSIFICATION	7.82595321523159E-4	DESIGN
if we get here, it is possible that we have a proxy 'in the way' of the merge map resolution... NOTE: decided to put this here rather than in the above loop as I was nervous about the performance of the loop-in-loop especially considering this is far more likely the 'edge case'	WITHOUT_CLASSIFICATION	0.5673892162192953	WITHOUT_CLASSIFICATION	0.4326107837807048	DESIGN
JNDI + Serialization:	WITHOUT_CLASSIFICATION	0.999999677305382	WITHOUT_CLASSIFICATION	3.226946180827784E-7	DESIGN
checking for named queries	WITHOUT_CLASSIFICATION	0.999993170361917	WITHOUT_CLASSIFICATION	6.8296380829975444E-6	DESIGN
stats	WITHOUT_CLASSIFICATION	0.9999801474799559	WITHOUT_CLASSIFICATION	1.985252004413933E-5	DESIGN
EntityNotFoundDelegate	WITHOUT_CLASSIFICATION	0.9999913795504702	WITHOUT_CLASSIFICATION	8.620449529782917E-6	DESIGN
Check named HQL queries	WITHOUT_CLASSIFICATION	0.9999885239770442	WITHOUT_CLASSIFICATION	1.1476022955801465E-5	DESIGN
this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9996412644250012	WITHOUT_CLASSIFICATION	3.5873557499869997E-4	DESIGN
prevents this session from adding things to cache	WITHOUT_CLASSIFICATION	0.9965487857401626	WITHOUT_CLASSIFICATION	0.003451214259837499	DESIGN
from javax.naming.Referenceable	WITHOUT_CLASSIFICATION	0.9999283998243933	WITHOUT_CLASSIFICATION	7.160017560662983E-5	DESIGN
look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999962453399212	WITHOUT_CLASSIFICATION	3.7546600788251363E-6	DESIGN
for a dynamic-class	WITHOUT_CLASSIFICATION	0.9999661306896612	WITHOUT_CLASSIFICATION	3.3869310338756745E-5	DESIGN
test this entity to see if we must query it	WITHOUT_CLASSIFICATION	0.9989576937148159	WITHOUT_CLASSIFICATION	0.0010423062851841096	DESIGN
NOTE EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999915536970492	WITHOUT_CLASSIFICATION	8.446302950928909E-6	DESIGN
for backward-compatability	WITHOUT_CLASSIFICATION	0.9999737505159387	WITHOUT_CLASSIFICATION	2.6249484061216365E-5	DESIGN
ignore this error for now	WITHOUT_CLASSIFICATION	0.999997830767452	WITHOUT_CLASSIFICATION	2.1692325480328787E-6	DESIGN
to stop the class from being unloaded	WITHOUT_CLASSIFICATION	0.9999956410179592	WITHOUT_CLASSIFICATION	4.358982040749298E-6	DESIGN
in case we were deserialized in a different JVM, look for an instance with the same name (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.999987495075846	WITHOUT_CLASSIFICATION	1.2504924154115173E-5	DESIGN
must add to JNDI _after_ adding to HashMaps, because some JNDI servers use serialization	WITHOUT_CLASSIFICATION	0.9999859758188615	WITHOUT_CLASSIFICATION	1.4024181138541297E-5	DESIGN
Make sure this is a defined parameter and check the incoming value type	WITHOUT_CLASSIFICATION	0.9997382497253723	WITHOUT_CLASSIFICATION	2.617502746277117E-4	DESIGN
for each of the defined parameters, make sure its value has been set	WITHOUT_CLASSIFICATION	0.9997795949966943	WITHOUT_CLASSIFICATION	2.2040500330553655E-4	DESIGN
we never need to apply locks to the SQL	WITHOUT_CLASSIFICATION	0.9992454680939117	WITHOUT_CLASSIFICATION	7.545319060882322E-4	DESIGN
inserts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999777338600546	WITHOUT_CLASSIFICATION	2.2266139945317734E-5	DESIGN
deletes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998234906857723	WITHOUT_CLASSIFICATION	1.7650931422772388E-4	DESIGN
during deserialization, we need to reconnect all proxies and collections to this session, as well as the EntityEntry and CollectionEntry instances; these associations are transient because serialization is used for different things.	WITHOUT_CLASSIFICATION	0.9989351332019513	WITHOUT_CLASSIFICATION	0.0010648667980487625	DESIGN
updates ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999622304717639	WITHOUT_CLASSIFICATION	3.7769528236166956E-5	DESIGN
loading ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999570989162845	WITHOUT_CLASSIFICATION	4.2901083715560717E-5	DESIGN
final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999935291216332	WITHOUT_CLASSIFICATION	6.47087836682298E-6	DESIGN
final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999935291216332	WITHOUT_CLASSIFICATION	6.47087836682298E-6	DESIGN
first, try to load it from the temp PC associated to this SS	WITHOUT_CLASSIFICATION	0.9999962392337922	WITHOUT_CLASSIFICATION	3.7607662076960116E-6	DESIGN
if the metadata allowed proxy creation and caller did not request forceful eager loading, generate a proxy	WITHOUT_CLASSIFICATION	0.9999999189466792	WITHOUT_CLASSIFICATION	8.105332082375057E-8	DESIGN
otherwise immediately materialize it	WITHOUT_CLASSIFICATION	0.9999986726808552	WITHOUT_CLASSIFICATION	1.3273191447753968E-6	DESIGN
/	WITHOUT_CLASSIFICATION	0.9992500349869593	WITHOUT_CLASSIFICATION	7.499650130406492E-4	DESIGN
no auto-flushing to support in stateless session	WITHOUT_CLASSIFICATION	0.9975541963637674	WITHOUT_CLASSIFICATION	0.002445803636232631	DESIGN
after setting values to object, entityMode	WITHOUT_CLASSIFICATION	0.9999863997485227	WITHOUT_CLASSIFICATION	1.3600251477313784E-5	DESIGN
for EJB3	WITHOUT_CLASSIFICATION	0.9998654005094436	WITHOUT_CLASSIFICATION	1.345994905562879E-4	DESIGN
just ignore	WITHOUT_CLASSIFICATION	0.9999999084504861	WITHOUT_CLASSIFICATION	9.154951390087091E-8	DESIGN
do a check	WITHOUT_CLASSIFICATION	0.9999955464220704	WITHOUT_CLASSIFICATION	4.453577929465199E-6	DESIGN
saveOrUpdate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997534947691	WITHOUT_CLASSIFICATION	2.465052308507779E-7	DESIGN
update() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992234135462	WITHOUT_CLASSIFICATION	7.765864538214139E-7	DESIGN
lock() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999991433230939	WITHOUT_CLASSIFICATION	8.566769060520608E-7	DESIGN
persist() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999960756249113	WITHOUT_CLASSIFICATION	3.924375088694327E-6	DESIGN
persistOnFlush() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999988365420702	WITHOUT_CLASSIFICATION	1.1634579297037405E-6	DESIGN
merge() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996254686024	WITHOUT_CLASSIFICATION	3.7453139751792623E-7	DESIGN
saveOrUpdateCopy() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997809510152	WITHOUT_CLASSIFICATION	2.1904898486743624E-7	DESIGN
delete() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999991035450335	WITHOUT_CLASSIFICATION	8.964549664552925E-7	DESIGN
load()/get() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999451247092	WITHOUT_CLASSIFICATION	5.487529080147732E-7	DESIGN
refresh() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996042297588	WITHOUT_CLASSIFICATION	3.957702412773401E-7	DESIGN
replicate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999832573129869	WITHOUT_CLASSIFICATION	1.674268701315077E-5	DESIGN
do not auto-flush while outside a transaction	WITHOUT_CLASSIFICATION	0.9999351463729313	WITHOUT_CLASSIFICATION	6.485362706864443E-5	DESIGN
this is an internal error of some sort...	WITHOUT_CLASSIFICATION	0.9999554703718154	WITHOUT_CLASSIFICATION	4.452962818455586E-5	DESIGN
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9875704920946237	WITHOUT_CLASSIFICATION	0.0124295079053763	DESIGN
only collections belonging to deleted entities are allowed to be dereferenced in the case of orphan delete	WITHOUT_CLASSIFICATION	0.9999378675961091	WITHOUT_CLASSIFICATION	6.213240389086763E-5	DESIGN
if it was previously unreferenced, we need to flush in order to get its state into the database in order to execute query	WITHOUT_CLASSIFICATION	0.9972086889263401	WITHOUT_CLASSIFICATION	0.0027913110736598173	DESIGN
not for internal use:	WITHOUT_CLASSIFICATION	0.9999955700581126	WITHOUT_CLASSIFICATION	4.429941887371984E-6	DESIGN
otherwise, we only need to flush if there are in-memory changes to the queried tables	WITHOUT_CLASSIFICATION	0.9999978207224858	WITHOUT_CLASSIFICATION	2.1792775143498437E-6	DESIGN
might need to run a different filter entirely after the flush because the collection role may have changed	WITHOUT_CLASSIFICATION	0.9994496231316057	WITHOUT_CLASSIFICATION	5.50376868394324E-4	DESIGN
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9875704920946237	WITHOUT_CLASSIFICATION	0.0124295079053763	DESIGN
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9875704920946237	WITHOUT_CLASSIFICATION	0.0124295079053763	DESIGN
if it is initialized, see if the underlying instance is contained, since we need to account for the fact that it might have been evicted	WITHOUT_CLASSIFICATION	0.9739557750563542	WITHOUT_CLASSIFICATION	0.0260442249436457	DESIGN
basically just an adapted copy of find(CriteriaImpl)	WITHOUT_CLASSIFICATION	0.9999985649253794	WITHOUT_CLASSIFICATION	1.4350746206267212E-6	DESIGN
it is possible for this method to be called during flush processing, so make certain that we do not accidently initialize an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9984793236758759	WITHOUT_CLASSIFICATION	0.0015206763241241816	DESIGN
nothing to do in a stateful session	WITHOUT_CLASSIFICATION	0.9999683888489453	WITHOUT_CLASSIFICATION	3.161115105465642E-5	DESIGN
ignore	WITHOUT_CLASSIFICATION	0.9999910123537684	WITHOUT_CLASSIFICATION	8.987646231521161E-6	DESIGN
ignore this error for now	WITHOUT_CLASSIFICATION	0.999997830767452	WITHOUT_CLASSIFICATION	2.1692325480328787E-6	DESIGN
we need to writeObject() on this since interceptor is user defined	WITHOUT_CLASSIFICATION	0.9998636853816646	WITHOUT_CLASSIFICATION	1.363146183353805E-4	DESIGN
the old-time stand-by...	WITHOUT_CLASSIFICATION	0.9999999136019029	WITHOUT_CLASSIFICATION	8.639809718387468E-8	DESIGN
parameter bind values...	WITHOUT_CLASSIFICATION	0.999997799962771	WITHOUT_CLASSIFICATION	2.2000372288309042E-6	DESIGN
Parameter handling code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99938306665484	WITHOUT_CLASSIFICATION	6.16933345159982E-4	DESIGN
prepend value and type list with null for any positions before the wanted position.	WITHOUT_CLASSIFICATION	0.999853638860054	WITHOUT_CLASSIFICATION	1.4636113994594618E-4	DESIGN
Execution methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9990062865164651	WITHOUT_CLASSIFICATION	9.937134835349688E-4	DESIGN
we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9996538696866761	WITHOUT_CLASSIFICATION	3.461303133238322E-4	DESIGN
we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9996538696866761	WITHOUT_CLASSIFICATION	3.461303133238322E-4	DESIGN
we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999373246767816	WITHOUT_CLASSIFICATION	6.267532321838034E-5	DESIGN
we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999373246767816	WITHOUT_CLASSIFICATION	6.267532321838034E-5	DESIGN
FieldInterceptor impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998925412381419	WITHOUT_CLASSIFICATION	1.0745876185814504E-4	DESIGN
subclass accesses ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9988125300787618	WITHOUT_CLASSIFICATION	0.0011874699212381765	DESIGN
let's assume that there is only one lazy fetch group, for now!	WITHOUT_CLASSIFICATION	0.9999999120405407	WITHOUT_CLASSIFICATION	8.795945922447948E-8	DESIGN
FieldHandler impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9991459381349935	WITHOUT_CLASSIFICATION	8.540618650064347E-4	DESIGN
should not need to grow beyond the size of the total number of columns in the rs	WITHOUT_CLASSIFICATION	0.999642234693915	WITHOUT_CLASSIFICATION	3.5776530608496517E-4	DESIGN
should probably no-op commit/rollback here, at least in JTA scenarios	WITHOUT_CLASSIFICATION	0.9999801461448027	WITHOUT_CLASSIFICATION	1.9853855197240777E-5	DESIGN
Base Expectation impls ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999835815243466	WITHOUT_CLASSIFICATION	1.641847565337154E-5	DESIGN
Various Expectation instances ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999843222726974	WITHOUT_CLASSIFICATION	1.5677727302588142E-5	DESIGN
explicitly perform no checking...	WITHOUT_CLASSIFICATION	0.9999967165916278	WITHOUT_CLASSIFICATION	3.2834083720998254E-6	DESIGN
used from testsuite	WITHOUT_CLASSIFICATION	0.9999994302887812	WITHOUT_CLASSIFICATION	5.697112186828913E-7	DESIGN
assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999982703077396	WITHOUT_CLASSIFICATION	1.7296922605251912E-6	DESIGN
package	WITHOUT_CLASSIFICATION	0.9991997042405928	WITHOUT_CLASSIFICATION	8.002957594071461E-4	DESIGN
register synch; stats.connect()	WITHOUT_CLASSIFICATION	0.9999991692447345	WITHOUT_CLASSIFICATION	8.307552654156533E-7	DESIGN
noncritical, swallow and let the other propagate!	WITHOUT_CLASSIFICATION	0.9999838173621901	WITHOUT_CLASSIFICATION	1.618263780988705E-5	DESIGN
calls executeBatch()	WITHOUT_CLASSIFICATION	0.9999993231566014	WITHOUT_CLASSIFICATION	6.768433985893898E-7	DESIGN
no big deal	WITHOUT_CLASSIFICATION	0.9999982317748989	WITHOUT_CLASSIFICATION	1.768225101208185E-6	DESIGN
no big deal	WITHOUT_CLASSIFICATION	0.9999982317748989	WITHOUT_CLASSIFICATION	1.768225101208185E-6	DESIGN
no big deal	WITHOUT_CLASSIFICATION	0.9999982317748989	WITHOUT_CLASSIFICATION	1.768225101208185E-6	DESIGN
sybase driver (jConnect) throwing NPE here in certain cases, but we'll just handle the general "unexpected" case	WITHOUT_CLASSIFICATION	0.9997232830380298	WITHOUT_CLASSIFICATION	2.767169619702616E-4	DESIGN
see explanation above...	WITHOUT_CLASSIFICATION	0.9999919742168046	WITHOUT_CLASSIFICATION	8.025783195340079E-6	DESIGN
If we are in the process of releasing, no sense checking for aggressive-release possibility.	WITHOUT_CLASSIFICATION	0.9999999636555552	WITHOUT_CLASSIFICATION	3.634444486728589E-8	DESIGN
EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.999969551147436	WITHOUT_CLASSIFICATION	3.0448852563941703E-5	DESIGN
ResultSet impl ("overridden") ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999802859898012	WITHOUT_CLASSIFICATION	1.9714010198860224E-5	DESIGN
ResultSet impl (delegated) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999646747337133	WITHOUT_CLASSIFICATION	3.532526628662626E-5	DESIGN
refer to comment in StatefulPersistenceContext.addCollection()	WITHOUT_CLASSIFICATION	0.9999984684505632	WITHOUT_CLASSIFICATION	1.5315494367925963E-6	DESIGN
ConnectionManager.Callback implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998776480225029	WITHOUT_CLASSIFICATION	1.2235197749710226E-4	DESIGN
Note : success = false, because we don't know the outcome of the transaction	WITHOUT_CLASSIFICATION	0.9999721592275636	WITHOUT_CLASSIFICATION	2.7840772436466563E-5	DESIGN
we already have a callback registered; either a local (org.hibernate.Transaction) transaction has accepted callback responsibilities, or we have previously registered a transaction synch.	WITHOUT_CLASSIFICATION	0.9999988329567198	WITHOUT_CLASSIFICATION	1.1670432801357318E-6	DESIGN
the configured transaction-factory says it only supports local callback mode, so no sense attempting to register a JTA Synchronization	WITHOUT_CLASSIFICATION	0.9914560987932053	WITHOUT_CLASSIFICATION	0.008543901206794708	DESIGN
transactions marked for rollback-only cause some TM impls to throw exceptions	WITHOUT_CLASSIFICATION	0.9979282359803227	WITHOUT_CLASSIFICATION	0.0020717640196772982	DESIGN
serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999962168447234	WITHOUT_CLASSIFICATION	3.783155276543933E-6	DESIGN
postInitialize() will be called after initialization	WITHOUT_CLASSIFICATION	0.9999977499080779	WITHOUT_CLASSIFICATION	2.250091922177887E-6	DESIGN
cannot handle single quotes	WITHOUT_CLASSIFICATION	0.9999989507669425	WITHOUT_CLASSIFICATION	1.0492330575047723E-6	DESIGN
todo : for 4.0 private static final Logger log = LoggerFactory.getLogger( SQLStatementLogger.class ); this is the legacy logging 'category'...	WITHOUT_CLASSIFICATION	0.9999707708670792	WITHOUT_CLASSIFICATION	2.922913292077726E-5	DESIGN
note that for sequential scrolling, we make the assumption that the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9996813762642835	WITHOUT_CLASSIFICATION	3.1862373571643865E-4	DESIGN
don't even bother trying to read further	WITHOUT_CLASSIFICATION	0.9999838489215622	WITHOUT_CLASSIFICATION	1.615107843776092E-5	DESIGN
don't even bother trying to read any further	WITHOUT_CLASSIFICATION	0.9999456457406698	WITHOUT_CLASSIFICATION	5.435425933014855E-5	DESIGN
position cursor to the last row	WITHOUT_CLASSIFICATION	0.9999918247955807	WITHOUT_CLASSIFICATION	8.175204419288085E-6	DESIGN
sequentially read the result set in reverse until we recognize a change in the key value. At that point, we are pointed at the last physical sequential row for the logical row in which we are interested in processing	WITHOUT_CLASSIFICATION	0.9995668532595909	WITHOUT_CLASSIFICATION	4.331467404089709E-4	DESIGN
Read backwards until we read past the first physical sequential row with the key we are interested in loading	WITHOUT_CLASSIFICATION	0.9999925037289559	WITHOUT_CLASSIFICATION	7.496271044085743E-6	DESIGN
Finally, read ahead one row to position result set cursor at the first physical row we are interested in loading	WITHOUT_CLASSIFICATION	0.9998853358569444	WITHOUT_CLASSIFICATION	1.1466414305559647E-4	DESIGN
now get an existing proxy for each row element (if there is one)	WITHOUT_CLASSIFICATION	0.9999960661893803	WITHOUT_CLASSIFICATION	3.933810619679064E-6	DESIGN
force the proxy to resolve itself	WITHOUT_CLASSIFICATION	0.9999998520778896	WITHOUT_CLASSIFICATION	1.479221104745441E-7	DESIGN
this is equivalent to the old behavior...	WITHOUT_CLASSIFICATION	0.996339924534953	WITHOUT_CLASSIFICATION	0.00366007546504701	DESIGN
if null, owner will be retrieved from session	WITHOUT_CLASSIFICATION	0.999822361981136	WITHOUT_CLASSIFICATION	1.7763801886399618E-4	DESIGN
final String queryString,	WITHOUT_CLASSIFICATION	0.9999964852391329	WITHOUT_CLASSIFICATION	3.5147608671379514E-6	DESIGN
if it was a reference to self, don't need to nullify unless we are using native id generation, in which case we definitely need to nullify	WITHOUT_CLASSIFICATION	0.9999991700521869	WITHOUT_CLASSIFICATION	8.299478130790771E-7	DESIGN
end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999958349869285	WITHOUT_CLASSIFICATION	4.165013071566332E-6	DESIGN
in an effort to avoid concurrent-modification-exceptions (from potential recursive calls back through here as a result of the eventual call to PersistentCollection#endRead), we scan the internal loadingCollections map for matches and store those matches in a temp collection. the temp collection is then used to "drive" the #endRead processing.	WITHOUT_CLASSIFICATION	0.9412556313119559	WITHOUT_CLASSIFICATION	0.05874436868804403	DESIGN
we can reuse it for each row	WITHOUT_CLASSIFICATION	0.9999963734285257	WITHOUT_CLASSIFICATION	3.6265714743825334E-6	DESIGN
can't reuse in this case	WITHOUT_CLASSIFICATION	0.9998384772448847	WITHOUT_CLASSIFICATION	1.6152275511534074E-4	DESIGN
First we need to suspend any current JTA transaction and obtain a JDBC connection	WITHOUT_CLASSIFICATION	0.9947440736320373	WITHOUT_CLASSIFICATION	0.005255926367962653	DESIGN
getResultList(results);	WITHOUT_CLASSIFICATION	0.9999977309254635	WITHOUT_CLASSIFICATION	2.269074536526162E-6	DESIGN
if we only returned one entity, query by key is more efficient	WITHOUT_CLASSIFICATION	0.9998930913606894	WITHOUT_CLASSIFICATION	1.0690863931060263E-4	DESIGN
a collection loaded in the current session can not possibly be the collection belonging to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999993126539098	WITHOUT_CLASSIFICATION	6.873460901937442E-7	DESIGN
handle empty collection	WITHOUT_CLASSIFICATION	0.9999402492035725	WITHOUT_CLASSIFICATION	5.97507964275273E-5	DESIGN
else no collection element, but also no owner	WITHOUT_CLASSIFICATION	0.9999946521215431	WITHOUT_CLASSIFICATION	5.347878456808769E-6	DESIGN
handle empty collections	WITHOUT_CLASSIFICATION	0.9999446177104915	WITHOUT_CLASSIFICATION	5.5382289508573784E-5	DESIGN
else this is not a collection initializer (and empty collections will be detected by looking for the owner's identifier in the result set)	WITHOUT_CLASSIFICATION	0.9994999981589794	WITHOUT_CLASSIFICATION	5.000018410205681E-4	DESIGN
validate() instances of Validatable	WITHOUT_CLASSIFICATION	0.9999994874746769	WITHOUT_CLASSIFICATION	5.125253229934316E-7	DESIGN
if we know there is exactly 1 row, we can skip. it would be great if we could _always_ skip this; it is a problem for <key-many-to-one>	WITHOUT_CLASSIFICATION	0.9910440983734852	WITHOUT_CLASSIFICATION	0.008955901626514905	DESIGN
remove all collections for the entity from the session-level cache	WITHOUT_CLASSIFICATION	0.9996300150389567	WITHOUT_CLASSIFICATION	3.699849610433714E-4	DESIGN
null version means the object is in the process of being loaded somewhere else in the ResultSet	WITHOUT_CLASSIFICATION	0.9840812648743276	WITHOUT_CLASSIFICATION	0.01591873512567241	DESIGN
problematic for <key-many-to-one>!	WITHOUT_CLASSIFICATION	0.9999115088537267	WITHOUT_CLASSIFICATION	8.84911462732825E-5	DESIGN
use the id passed in	WITHOUT_CLASSIFICATION	0.9999997604672552	WITHOUT_CLASSIFICATION	2.3953274472859744E-7	DESIGN
do nothing	WITHOUT_CLASSIFICATION	0.999999812132107	WITHOUT_CLASSIFICATION	1.878678931572546E-7	DESIGN
prefer re-generation of identity!	WITHOUT_CLASSIFICATION	0.9999907987723831	WITHOUT_CLASSIFICATION	9.20122761699727E-6	DESIGN
no point doing this if NONE was requested	WITHOUT_CLASSIFICATION	0.9999829052761097	WITHOUT_CLASSIFICATION	1.7094723890308766E-5	DESIGN
If the object is already loaded, return the loaded one	WITHOUT_CLASSIFICATION	0.9999376860896614	WITHOUT_CLASSIFICATION	6.231391033865133E-5	DESIGN
its already loaded so don't need to hydrate it	WITHOUT_CLASSIFICATION	0.9998254092070705	WITHOUT_CLASSIFICATION	1.7459079292944914E-4	DESIGN
cascade the refresh prior to refreshing this entity	WITHOUT_CLASSIFICATION	0.9998572444485918	WITHOUT_CLASSIFICATION	1.4275555140821783E-4	DESIGN
the load() which takes an entity does not pass an entityName	WITHOUT_CLASSIFICATION	0.9999992506387133	WITHOUT_CLASSIFICATION	7.493612866968975E-7	DESIGN
we only check the version when _upgrading_ lock modes	WITHOUT_CLASSIFICATION	0.9999654891136384	WITHOUT_CLASSIFICATION	3.451088636176388E-5	DESIGN
look for a proxy	WITHOUT_CLASSIFICATION	0.9999842307609975	WITHOUT_CLASSIFICATION	1.5769239002511044E-5	DESIGN
we need to upgrade the lock mode to the mode requested	WITHOUT_CLASSIFICATION	0.9968603073038227	WITHOUT_CLASSIFICATION	0.003139692696177338	DESIGN
its the given optional object	WITHOUT_CLASSIFICATION	0.9999998383627291	WITHOUT_CLASSIFICATION	1.6163727087569586E-7	DESIGN
instantiate a new instance	WITHOUT_CLASSIFICATION	0.9999190896873104	WITHOUT_CLASSIFICATION	8.091031268965518E-5	DESIGN
need to hydrate it.	WITHOUT_CLASSIFICATION	0.9999773828734556	WITHOUT_CLASSIFICATION	2.261712654442057E-5	DESIGN
return a newly loaded object	WITHOUT_CLASSIFICATION	0.9999647806487574	WITHOUT_CLASSIFICATION	3.521935124260932E-5	DESIGN
will be ignored, using the existing Entry instead	WITHOUT_CLASSIFICATION	0.9999994332064912	WITHOUT_CLASSIFICATION	5.66793508820286E-7	DESIGN
key is an entity involved with the operation performed by the listener; value can be either a copy of the entity or the entity itself	WITHOUT_CLASSIFICATION	0.9999995084023088	WITHOUT_CLASSIFICATION	4.915976912552574E-7	DESIGN
materialize associations (and initialize the object) later	WITHOUT_CLASSIFICATION	0.9999961887902811	WITHOUT_CLASSIFICATION	3.8112097189721362E-6	DESIGN
Get the persister for the _subclass_	WITHOUT_CLASSIFICATION	0.999982837402628	WITHOUT_CLASSIFICATION	1.7162597371865146E-5	DESIGN
ok in normal Hibernate usage to delete a detached entity; JPA however forbids it, thus this is a hook for HEM to affect this behavior	WITHOUT_CLASSIFICATION	0.99985107756023	WITHOUT_CLASSIFICATION	1.4892243976999384E-4	DESIGN
the entry will be removed after the flush, and will no longer override the stale snapshot This is now handled by removeEntity() in EntityDeleteAction persistenceContext.removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9972310071291093	WITHOUT_CLASSIFICATION	0.0027689928708907806	DESIGN
addInitializedCollection(collection, persister, id);	WITHOUT_CLASSIFICATION	0.9999982149634434	WITHOUT_CLASSIFICATION	1.7850365565080018E-6	DESIGN
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.999972345811373	WITHOUT_CLASSIFICATION	2.7654188627018945E-5	DESIGN
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.999972345811373	WITHOUT_CLASSIFICATION	2.7654188627018945E-5	DESIGN
|| oj.getJoinable().consumesCollectionAlias()	WITHOUT_CLASSIFICATION	0.9999997906598469	WITHOUT_CLASSIFICATION	2.093401531815097E-7	DESIGN
here we do not bother with the discriminator.	WITHOUT_CLASSIFICATION	0.999998922508493	WITHOUT_CLASSIFICATION	1.0774915069597251E-6	DESIGN
Code to handle subclasses of topClass	WITHOUT_CLASSIFICATION	0.9989859612160077	WITHOUT_CLASSIFICATION	0.0010140387839922905	DESIGN
woops we got an instance of another class hierarchy branch	WITHOUT_CLASSIFICATION	0.9999769292170287	WITHOUT_CLASSIFICATION	2.307078297126641E-5	DESIGN
we can go straight to the first required row	WITHOUT_CLASSIFICATION	0.9998378048650893	WITHOUT_CLASSIFICATION	1.6219513491079024E-4	DESIGN
we need to step through the rows one row at a time (slow)	WITHOUT_CLASSIFICATION	0.9999880688099481	WITHOUT_CLASSIFICATION	1.1931190052090117E-5	DESIGN
synchronized to avoid multi-thread access issues; defined as method synch to avoid potential deadlock issues due to nature of code.	WITHOUT_CLASSIFICATION	0.9436097767352954	WITHOUT_CLASSIFICATION	0.056390223264704546	DESIGN
Allows various loaders (ok mainly the QueryLoader :) to check whether scrolling of their result set should be allowed. By default it is allowed.	WITHOUT_CLASSIFICATION	0.9999952611370437	WITHOUT_CLASSIFICATION	4.738862956279975E-6	DESIGN
before adding to collection!	WITHOUT_CLASSIFICATION	0.9999849304469972	WITHOUT_CLASSIFICATION	1.5069553002809092E-5	DESIGN
if the current depth is 0, the root thing being loaded is the many-to-many collection itself. Here, it is alright to use an inner join...	WITHOUT_CLASSIFICATION	0.9999666123581781	WITHOUT_CLASSIFICATION	3.3387641821932025E-5	DESIGN
operations which cascade as far as the collection also cascade to collection elements	WITHOUT_CLASSIFICATION	0.9999985626192692	WITHOUT_CLASSIFICATION	1.437380730841412E-6	DESIGN
simple, because we can't have a one-to-one or a collection (or even a property-ref) in a composite-element:	WITHOUT_CLASSIFICATION	0.9999956530289177	WITHOUT_CLASSIFICATION	4.346971082277942E-6	DESIGN
a composite key	WITHOUT_CLASSIFICATION	0.9999991538180373	WITHOUT_CLASSIFICATION	8.461819627604974E-7	DESIGN
if no batch, use "foo = ? and bar = ?"	WITHOUT_CLASSIFICATION	0.9999951451862054	WITHOUT_CLASSIFICATION	4.854813794578504E-6	DESIGN
it must be a collection fetch	WITHOUT_CLASSIFICATION	0.9999940059629233	WITHOUT_CLASSIFICATION	5.994037076708192E-6	DESIGN
needed later for many-to-many/filter application	WITHOUT_CLASSIFICATION	0.8702149686787173	WITHOUT_CLASSIFICATION	0.12978503132128283	DESIGN
&& etype.isReferenceToPrimaryKey()	WITHOUT_CLASSIFICATION	0.9999929156321852	WITHOUT_CLASSIFICATION	7.084367814740556E-6	DESIGN
it might still need to apply a collection ordering based on a many-to-many defined order-by...	WITHOUT_CLASSIFICATION	0.672928208831363	WITHOUT_CLASSIFICATION	0.327071791168637	DESIGN
if a composite key, use "( (foo = ? and bar = ?) or (foo = ? and bar = ?) )" for batching TODO: unnecessary for databases with ANSI-style joins	WITHOUT_CLASSIFICATION	0.5460775765584669	DESIGN	0.4539224234415331	WITHOUT_CLASSIFICATION
belong to other persister belong to other persister	WITHOUT_CLASSIFICATION	0.9985691483696826	WITHOUT_CLASSIFICATION	0.0014308516303174286	DESIGN
we found it	WITHOUT_CLASSIFICATION	0.9999989942870725	WITHOUT_CLASSIFICATION	1.0057129275652344E-6	DESIGN
we can use an inner join for the many-to-many	WITHOUT_CLASSIFICATION	0.9999594179233159	WITHOUT_CLASSIFICATION	4.058207668423703E-5	DESIGN
disable a join back to this same association	WITHOUT_CLASSIFICATION	0.9442849476175748	WITHOUT_CLASSIFICATION	0.05571505238242517	DESIGN
NOTE: unlike all other Loaders, this one is NOT multithreaded, or cacheable!!	WITHOUT_CLASSIFICATION	0.9997909313485857	WITHOUT_CLASSIFICATION	2.0906865141438104E-4	DESIGN
the user visible aliases, which are unknown to the superclass, these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.999995218501576	WITHOUT_CLASSIFICATION	4.78149842403118E-6	DESIGN
root entity comes last	WITHOUT_CLASSIFICATION	0.9999979415202667	WITHOUT_CLASSIFICATION	2.0584797334045043E-6	DESIGN
deliberately ignore return value!	WITHOUT_CLASSIFICATION	0.9999987959101316	WITHOUT_CLASSIFICATION	1.204089868347221E-6	DESIGN
alias may be null EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999941652841738	WITHOUT_CLASSIFICATION	5.834715826087518E-6	DESIGN
if it is a compound path	WITHOUT_CLASSIFICATION	0.9999771525547435	WITHOUT_CLASSIFICATION	2.284744525658484E-5	DESIGN
otherwise assume the parent is the the criteria that created us	WITHOUT_CLASSIFICATION	0.9999914044273924	WITHOUT_CLASSIFICATION	8.595572607544034E-6	DESIGN
if its the root criteria, we are done	WITHOUT_CLASSIFICATION	0.9999959045185584	WITHOUT_CLASSIFICATION	4.09548144157373E-6	DESIGN
otherwise, recurse	WITHOUT_CLASSIFICATION	0.9999983374483666	WITHOUT_CLASSIFICATION	1.662551633438164E-6	DESIGN
the criteria instance	WITHOUT_CLASSIFICATION	0.999996278275082	WITHOUT_CLASSIFICATION	3.7217249180148615E-6	DESIGN
the entity name	WITHOUT_CLASSIFICATION	0.9999988142235405	WITHOUT_CLASSIFICATION	1.1857764595681088E-6	DESIGN
not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9999907007709946	WITHOUT_CLASSIFICATION	9.299229005346768E-6	DESIGN
not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9999907007709946	WITHOUT_CLASSIFICATION	9.299229005346768E-6	DESIGN
it refers to an alias of a projection	WITHOUT_CLASSIFICATION	0.9999020908622196	WITHOUT_CLASSIFICATION	9.790913778039347E-5	DESIGN
should never happen, i think	WITHOUT_CLASSIFICATION	0.9999990198815663	WITHOUT_CLASSIFICATION	9.801184338420956E-7	DESIGN
Detect discriminator values...	WITHOUT_CLASSIFICATION	0.999999961680421	WITHOUT_CLASSIFICATION	3.831957900504654E-8	DESIGN
Convert the string value into the proper type.	WITHOUT_CLASSIFICATION	0.9999574317657126	WITHOUT_CLASSIFICATION	4.256823428732032E-5	DESIGN
and the qualifier is not the alias of this criteria -> check to see if we belong to some criteria other than the one that created us	WITHOUT_CLASSIFICATION	0.999985168171528	WITHOUT_CLASSIFICATION	1.4831828472008438E-5	DESIGN
it does not refer to an alias of a projection, look for a property	WITHOUT_CLASSIFICATION	0.9999526946656696	WITHOUT_CLASSIFICATION	4.730533433047379E-5	DESIGN
Otherwise, this is an ordinary value.	WITHOUT_CLASSIFICATION	0.9999929284168642	WITHOUT_CLASSIFICATION	7.071583135841791E-6	DESIGN
Currently not cachable if autodiscover types is in effect (e.g. "select ...")	WITHOUT_CLASSIFICATION	0.9997682673053754	WITHOUT_CLASSIFICATION	2.3173269462470263E-4	DESIGN
private final String[] sqlAliases; private final String[] sqlAliasSuffixes;	WITHOUT_CLASSIFICATION	0.9999655836509921	WITHOUT_CLASSIFICATION	3.441634900798992E-5	DESIGN
this is only needed (afaict) for ResultTransformer processing...	WITHOUT_CLASSIFICATION	0.9976045876065909	WITHOUT_CLASSIFICATION	0.0023954123934091403	DESIGN
determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999956601178325	WITHOUT_CLASSIFICATION	4.339882167556158E-6	DESIGN
build an array with indices equal to the total number of actual returns in the result Hibernate will return for this query (scalars + non-scalars)	WITHOUT_CLASSIFICATION	0.9992434029881406	WITHOUT_CLASSIFICATION	7.565970118594177E-4	DESIGN
replace {....} with corresponding column aliases	WITHOUT_CLASSIFICATION	0.9952382407997677	WITHOUT_CLASSIFICATION	0.004761759200232209	DESIGN
No additional open braces found in the string, append the rest of the string in its entirty and quit this loop	WITHOUT_CLASSIFICATION	0.9999883233301929	WITHOUT_CLASSIFICATION	1.1676669806967538E-5	DESIGN
apend everything up until the next encountered open brace	WITHOUT_CLASSIFICATION	0.9999959049972426	WITHOUT_CLASSIFICATION	4.0950027574737586E-6	DESIGN
it is a simple table alias {foo}	WITHOUT_CLASSIFICATION	0.9999799297346461	WITHOUT_CLASSIFICATION	2.0070265353882987E-5	DESIGN
passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9950719198996898	WITHOUT_CLASSIFICATION	0.004928080100310172	DESIGN
passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9950719198996898	WITHOUT_CLASSIFICATION	0.004928080100310172	DESIGN
The current alias is referencing the collection to be eagerly fetched	WITHOUT_CLASSIFICATION	0.9999942175310017	WITHOUT_CLASSIFICATION	5.782468998292194E-6	DESIGN
it is a property reference {foo.bar}	WITHOUT_CLASSIFICATION	0.9999958615473652	WITHOUT_CLASSIFICATION	4.138452634787096E-6	DESIGN
Possibly handle :something parameters for the query ?	WITHOUT_CLASSIFICATION	0.9997843091873806	WITHOUT_CLASSIFICATION	2.1569081261948135E-4	DESIGN
Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999901710473803	WITHOUT_CLASSIFICATION	9.82895261973314E-6	DESIGN
private final List persisters = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999945550172059	WITHOUT_CLASSIFICATION	5.444982794033377E-6	DESIGN
package	WITHOUT_CLASSIFICATION	0.9991997042405928	WITHOUT_CLASSIFICATION	8.002957594071461E-4	DESIGN
NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999782900311928	WITHOUT_CLASSIFICATION	2.1709968807291564E-5	DESIGN
private final List scalarTypes = new ArrayList(); private final List scalarColumnAliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999952661721802	WITHOUT_CLASSIFICATION	4.733827819843202E-6	DESIGN
Now, process the returns	WITHOUT_CLASSIFICATION	0.9999980517381316	WITHOUT_CLASSIFICATION	1.948261868309801E-6	DESIGN
private List collectionOwnerAliases = new ArrayList(); private List collectionAliases = new ArrayList(); private List collectionPersisters = new ArrayList(); private List collectionResults = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999998123562331	WITHOUT_CLASSIFICATION	1.876437668457191E-7	DESIGN
already been processed...	WITHOUT_CLASSIFICATION	0.9998993431835786	WITHOUT_CLASSIFICATION	1.0065681642126121E-4	DESIGN
already been processed...	WITHOUT_CLASSIFICATION	0.9998993431835786	WITHOUT_CLASSIFICATION	1.0065681642126121E-4	DESIGN
Make sure the owner alias is known...	WITHOUT_CLASSIFICATION	0.9999989125424804	WITHOUT_CLASSIFICATION	1.0874575195973716E-6	DESIGN
first, break down the returns into maps keyed by alias so that role returns can be more easily resolved to their owners	WITHOUT_CLASSIFICATION	0.9955718421687461	WITHOUT_CLASSIFICATION	0.004428157831253932	DESIGN
scalarColumnAliases.add( typeReturn.getColumnAlias() ); scalarTypes.add( typeReturn.getType() );	WITHOUT_CLASSIFICATION	0.9999881130422025	WITHOUT_CLASSIFICATION	1.1886957797547711E-5	DESIGN
If this return's alias has not been processed yet, do so b4 further processing of this return	WITHOUT_CLASSIFICATION	0.9997777769894214	WITHOUT_CLASSIFICATION	2.222230105785598E-4	DESIGN
collectionOwnerAliases.add( ownerAlias );	WITHOUT_CLASSIFICATION	0.9999970501580338	WITHOUT_CLASSIFICATION	2.9498419663303345E-6	DESIGN
for merging of versioned entities, we consider the version having been changed only when: 1) the two version values are different; AND 2) The target actually represents database state! This second condition is a special case which allows an entity to be merged during the same transaction (though during a seperate operation) in which it was originally persisted/saved	WITHOUT_CLASSIFICATION	0.9999435391739271	WITHOUT_CLASSIFICATION	5.646082607294038E-5	DESIGN
this is the second pass through on a merge op, so here we limit the replacement to associations types (value types were already replaced during the first pass)	WITHOUT_CLASSIFICATION	0.9931812870748081	WITHOUT_CLASSIFICATION	0.0068187129251919675	DESIGN
EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999676149033511	WITHOUT_CLASSIFICATION	3.238509664883745E-5	DESIGN
cascade-save to collections AFTER the collection owner was saved	WITHOUT_CLASSIFICATION	0.999937861796189	WITHOUT_CLASSIFICATION	6.2138203810947E-5	DESIGN
Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999964900128648	WITHOUT_CLASSIFICATION	3.5099871350234457E-6	DESIGN
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999994251371264	WITHOUT_CLASSIFICATION	5.748628735335884E-7	DESIGN
currently only the Hibernate-supplied DbTimestampType is supported here	WITHOUT_CLASSIFICATION	0.999421446124344	WITHOUT_CLASSIFICATION	5.785538756560036E-4	DESIGN
This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9993758026363759	WITHOUT_CLASSIFICATION	6.241973636240214E-4	DESIGN
make a new one	WITHOUT_CLASSIFICATION	0.9999584806075764	WITHOUT_CLASSIFICATION	4.151939242348054E-5	DESIGN
not so sure this is even valid subtree. but if it was, it'd represent two unrelated table references...	WITHOUT_CLASSIFICATION	0.9999998392022369	WITHOUT_CLASSIFICATION	1.607977630766918E-7	DESIGN
(NOT (GT a b) ) => (LE a b)	WITHOUT_CLASSIFICATION	0.999989223727334	WITHOUT_CLASSIFICATION	1.0776272666020447E-5	DESIGN
private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9999979449725676	WITHOUT_CLASSIFICATION	2.055027432376361E-6	DESIGN
include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9999957955911747	WITHOUT_CLASSIFICATION	4.204408825265813E-6	DESIGN
sqlResultTypes = selectClause.getSqlResultTypes();	WITHOUT_CLASSIFICATION	0.9999999405894271	WITHOUT_CLASSIFICATION	5.941057287702299E-8	DESIGN
by default	WITHOUT_CLASSIFICATION	0.9999867589097333	WITHOUT_CLASSIFICATION	1.324109026676039E-5	DESIGN
This is now handled earlier in this method.	WITHOUT_CLASSIFICATION	0.9999633540139743	WITHOUT_CLASSIFICATION	3.664598602578021E-5	DESIGN
-- Loader implementation --	WITHOUT_CLASSIFICATION	0.9999946404629501	WITHOUT_CLASSIFICATION	5.359537049966644E-6	DESIGN
-- Loader overrides --	WITHOUT_CLASSIFICATION	0.9999963360723269	WITHOUT_CLASSIFICATION	3.6639276731141975E-6	DESIGN
(NOT (IS_NULL a b) ) => (IS_NOT_NULL a b)	WITHOUT_CLASSIFICATION	0.9999381104499104	WITHOUT_CLASSIFICATION	6.188955008962036E-5	DESIGN
NONE, because its the requested lock mode, not the actual!	WITHOUT_CLASSIFICATION	0.9999992274750633	WITHOUT_CLASSIFICATION	7.72524936615795E-7	DESIGN
meant to handle dynamic instantiation queries...	WITHOUT_CLASSIFICATION	0.9988971474383679	WITHOUT_CLASSIFICATION	0.0011028525616321588	DESIGN
--- Query translator methods ---	WITHOUT_CLASSIFICATION	0.999895768923063	WITHOUT_CLASSIFICATION	1.0423107693703034E-4	DESIGN
-- Implementation private methods --	WITHOUT_CLASSIFICATION	0.9955767014919159	WITHOUT_CLASSIFICATION	0.004423298508083983	DESIGN
deduplicate unique constraints sharing the same columns this is needed by Hibernate Annotations since it creates automagically unique constraints for the user	WITHOUT_CLASSIFICATION	0.8312623312736767	DESIGN	0.16873766872632337	WITHOUT_CLASSIFICATION
Try to find out the name of the primary key to create it as identity if the IdentityGenerator is used	WITHOUT_CLASSIFICATION	0.9999747834345359	WITHOUT_CLASSIFICATION	2.52165654640556E-5	DESIGN
to support dialects that have their own identity data type	WITHOUT_CLASSIFICATION	0.9969045906860378	WITHOUT_CLASSIFICATION	0.0030954093139621973	DESIGN
Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999783957706797	WITHOUT_CLASSIFICATION	2.1604229320407107E-5	DESIGN
used also for generation of FK names!	WITHOUT_CLASSIFICATION	0.9998685082296824	WITHOUT_CLASSIFICATION	1.3149177031759882E-4	DESIGN
usually useless	WITHOUT_CLASSIFICATION	0.9999881784054528	WITHOUT_CLASSIFICATION	1.1821594547142693E-5	DESIGN
added this caching as I noticed that getType() is being called multiple times...	WITHOUT_CLASSIFICATION	0.9999519299139594	WITHOUT_CLASSIFICATION	4.8070086040600906E-5	DESIGN
do not add unique constraint on DB not supporting unique and nullable columns	WITHOUT_CLASSIFICATION	0.9999639056996699	WITHOUT_CLASSIFICATION	3.6094300330151506E-5	DESIGN
for backward compatibility, disable this:	WITHOUT_CLASSIFICATION	0.9998974473515739	WITHOUT_CLASSIFICATION	1.0255264842607328E-4	DESIGN
may be final may be final may be final	WITHOUT_CLASSIFICATION	0.9998650363973877	WITHOUT_CLASSIFICATION	1.3496360261228339E-4	DESIGN
may be final	WITHOUT_CLASSIFICATION	0.999997443284639	WITHOUT_CLASSIFICATION	2.5567153609573076E-6	DESIGN
may be final	WITHOUT_CLASSIFICATION	0.999997443284639	WITHOUT_CLASSIFICATION	2.5567153609573076E-6	DESIGN
Custom SQL	WITHOUT_CLASSIFICATION	0.9999979497949161	WITHOUT_CLASSIFICATION	2.05020508390159E-6	DESIGN
Primary key constraint	WITHOUT_CLASSIFICATION	0.9999998620938618	WITHOUT_CLASSIFICATION	1.3790613818933493E-7	DESIGN
the root of the incoming property path matched one of the embedded composite identifier properties	WITHOUT_CLASSIFICATION	0.9999983922580967	WITHOUT_CLASSIFICATION	1.6077419033194739E-6	DESIGN
ignore it...	WITHOUT_CLASSIFICATION	0.9999998202902267	WITHOUT_CLASSIFICATION	1.797097732410484E-7	DESIGN
flat recursive algorithm	WITHOUT_CLASSIFICATION	0.9999967021322971	WITHOUT_CLASSIFICATION	3.2978677028800953E-6	DESIGN
an identifier mapper => getKey will be included in the getNonDuplicatedPropertyIterator() and checked later, so it needs to be excluded	WITHOUT_CLASSIFICATION	0.9999924833600261	WITHOUT_CLASSIFICATION	7.5166399739136515E-6	DESIGN
if the hibernate-mapping did not specify a schema/catalog, use the defaults specified by properties - but note that if the schema/catalog were specified in hibernate-mapping, or as params, they will already be initialized and will override the values set here (they are in identifierGeneratorProperties)	WITHOUT_CLASSIFICATION	0.9999988498835596	WITHOUT_CLASSIFICATION	1.1501164403552705E-6	DESIGN
pass the entity-name, if not a collection-id	WITHOUT_CLASSIFICATION	0.9999991676817555	WITHOUT_CLASSIFICATION	8.323182445574358E-7	DESIGN
Custom SQL	WITHOUT_CLASSIFICATION	0.9999979497949161	WITHOUT_CLASSIFICATION	2.05020508390159E-6	DESIGN
Primary key constraint	WITHOUT_CLASSIFICATION	0.9999998620938618	WITHOUT_CLASSIFICATION	1.3790613818933493E-7	DESIGN
pass the column name (a generated id almost always has a single column)	WITHOUT_CLASSIFICATION	0.999996338113645	WITHOUT_CLASSIFICATION	3.6618863551333215E-6	DESIGN
needed to satisfy KeyValue	WITHOUT_CLASSIFICATION	0.9995801945779463	WITHOUT_CLASSIFICATION	4.198054220536735E-4	DESIGN
empty means no scoping	WITHOUT_CLASSIFICATION	0.999976726375985	WITHOUT_CLASSIFICATION	2.3273624015003036E-5	DESIGN
index should be last column listed	WITHOUT_CLASSIFICATION	0.9989143420795815	WITHOUT_CLASSIFICATION	0.0010856579204184989	DESIGN
if it is a formula index, use the element columns in the PK	WITHOUT_CLASSIFICATION	0.9999533788682952	WITHOUT_CLASSIFICATION	4.662113170470406E-5	DESIGN
don't create a unique key, 'cos some databases don't like a UK on nullable columns	WITHOUT_CLASSIFICATION	0.9990282188312868	WITHOUT_CLASSIFICATION	9.71781168713076E-4	DESIGN
ArrayList list = new ArrayList();list.addAll( getKey().getConstraintColumns() );list.addAll( getIndex().getConstraintColumns() );getCollectionTable().createUniqueKey(list);	WITHOUT_CLASSIFICATION	0.9999998033631093	WITHOUT_CLASSIFICATION	1.9663689075613568E-7	DESIGN
}	WITHOUT_CLASSIFICATION	0.9991937986835284	WITHOUT_CLASSIFICATION	8.062013164716315E-4	DESIGN
no foreign key element of for a one-to-many	WITHOUT_CLASSIFICATION	0.9999869039037521	WITHOUT_CLASSIFICATION	1.30960962479338E-5	DESIGN
TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9420604475206618	WITHOUT_CLASSIFICATION	0.05793955247933819	DESIGN
the case of a foreign key to something other than the pk is handled in createPropertyRefConstraints	WITHOUT_CLASSIFICATION	0.9999999859723813	WITHOUT_CLASSIFICATION	1.4027618821276052E-8	DESIGN
TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9420604475206618	WITHOUT_CLASSIFICATION	0.05793955247933819	DESIGN
if the property mapping consists of all formulas, make it non-updateable	WITHOUT_CLASSIFICATION	0.9999998153219641	WITHOUT_CLASSIFICATION	1.8467803580458424E-7	DESIGN
columnUpdateability.length==0 ||	WITHOUT_CLASSIFICATION	0.9999963505942739	WITHOUT_CLASSIFICATION	3.6494057259247733E-6	DESIGN
if the property mapping consists of all formulas, make it insertable	WITHOUT_CLASSIFICATION	0.9999964452176886	WITHOUT_CLASSIFICATION	3.5547823112995254E-6	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9991190199058981	WITHOUT_CLASSIFICATION	8.809800941018141E-4	DESIGN
expected type is intrinsic here...	WITHOUT_CLASSIFICATION	0.9902033890969079	WITHOUT_CLASSIFICATION	0.009796610903092128	DESIGN
}	WITHOUT_CLASSIFICATION	0.9991937986835284	WITHOUT_CLASSIFICATION	8.062013164716315E-4	DESIGN
}	WITHOUT_CLASSIFICATION	0.9991937986835284	WITHOUT_CLASSIFICATION	8.062013164716315E-4	DESIGN
return memberPersister.getPropertyType(propertyName);	WITHOUT_CLASSIFICATION	0.9997780240760299	WITHOUT_CLASSIFICATION	2.2197592397014168E-4	DESIGN
return memberPersister.toColumns(alias, propertyName);	WITHOUT_CLASSIFICATION	0.9985931918752952	WITHOUT_CLASSIFICATION	0.0014068081247048058	DESIGN
return memberPersister.getType();	WITHOUT_CLASSIFICATION	0.9997561189642973	WITHOUT_CLASSIFICATION	2.4388103570281065E-4	DESIGN
&& !indexIsFormula	WITHOUT_CLASSIFICATION	0.9999939404730459	WITHOUT_CLASSIFICATION	6.059526954112334E-6	DESIGN
return !isOneToMany();	WITHOUT_CLASSIFICATION	0.999995900958667	WITHOUT_CLASSIFICATION	4.099041333133296E-6	DESIGN
instanceof AssociationType;	WITHOUT_CLASSIFICATION	0.9999944366544631	WITHOUT_CLASSIFICATION	5.563345536887638E-6	DESIGN
we need to determine the best way to know that two joinables represent a single many-to-many...	WITHOUT_CLASSIFICATION	0.9991279126985984	WITHOUT_CLASSIFICATION	8.720873014016961E-4	DESIGN
strip leading ','	WITHOUT_CLASSIFICATION	0.9999998385806873	WITHOUT_CLASSIFICATION	1.6141931268944225E-7	DESIGN
public boolean isSubselectLoadable();	WITHOUT_CLASSIFICATION	0.9999978937771704	WITHOUT_CLASSIFICATION	2.1062228295862984E-6	DESIGN
KEY	WITHOUT_CLASSIFICATION	0.9988203547204286	WITHOUT_CLASSIFICATION	0.0011796452795713702	DESIGN
columns	WITHOUT_CLASSIFICATION	0.9985265313686936	WITHOUT_CLASSIFICATION	0.0014734686313063435	DESIGN
SQL statements	WITHOUT_CLASSIFICATION	0.9999998893101505	WITHOUT_CLASSIFICATION	1.1068984946708285E-7	DESIGN
extra information about the element type	WITHOUT_CLASSIFICATION	0.9999433755567383	WITHOUT_CLASSIFICATION	5.662444326159845E-5	DESIGN
types	WITHOUT_CLASSIFICATION	0.9998580415369556	WITHOUT_CLASSIFICATION	1.4195846304448727E-4	DESIGN
custom sql	WITHOUT_CLASSIFICATION	0.9999969477963948	WITHOUT_CLASSIFICATION	3.052203605208969E-6	DESIGN
private final String unquotedIdentifierColumnName;	WITHOUT_CLASSIFICATION	0.9999635001820496	WITHOUT_CLASSIFICATION	3.649981795042611E-5	DESIGN
dynamic filters specifically for many-to-many inside the collection	WITHOUT_CLASSIFICATION	0.9702025284889392	WITHOUT_CLASSIFICATION	0.029797471511060807	DESIGN
dynamic filters for the collection	WITHOUT_CLASSIFICATION	0.9998132018380066	WITHOUT_CLASSIFICATION	1.8679816199332984E-4	DESIGN
NativeSQL: collect key column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999849492780809	WITHOUT_CLASSIFICATION	1.5050721919052895E-5	DESIGN
unquotedKeyColumnNames = StringHelper.unQuote(keyColumnAliases);	WITHOUT_CLASSIFICATION	0.9999997041638617	WITHOUT_CLASSIFICATION	2.958361382793676E-7	DESIGN
ELEMENT	WITHOUT_CLASSIFICATION	0.9997529701876491	WITHOUT_CLASSIFICATION	2.47029812350893E-4	DESIGN
NativeSQL: collect element column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999874106504412	WITHOUT_CLASSIFICATION	1.2589349558804741E-5	DESIGN
INDEX AND ROW SELECT	WITHOUT_CLASSIFICATION	0.9999903314411758	WITHOUT_CLASSIFICATION	9.668558824152122E-6	DESIGN
NativeSQL: collect index column and auto-aliases	WITHOUT_CLASSIFICATION	0.9998795806356542	WITHOUT_CLASSIFICATION	1.2041936434582558E-4	DESIGN
unquotedIdentifierColumnName = identifierColumnAlias;	WITHOUT_CLASSIFICATION	0.9999639551115105	WITHOUT_CLASSIFICATION	3.604488848946802E-5	DESIGN
unquotedIdentifierColumnName = null;	WITHOUT_CLASSIFICATION	0.9999844399019873	WITHOUT_CLASSIFICATION	1.55600980127322E-5	DESIGN
GENERATE THE SQL:	WITHOUT_CLASSIFICATION	0.9999914203944743	WITHOUT_CLASSIFICATION	8.579605525630128E-6	DESIGN
for non-arrays, we don't need to know the element class elementType.returnedClass();	WITHOUT_CLASSIFICATION	0.9999950700964686	WITHOUT_CLASSIFICATION	4.929903531329427E-6	DESIGN
not all classpersisters implement PropertyMapping!	WITHOUT_CLASSIFICATION	0.9994117302254569	WITHOUT_CLASSIFICATION	5.88269774542997E-4	DESIGN
Handle any filters applied to this collection	WITHOUT_CLASSIFICATION	0.9695363825442777	WITHOUT_CLASSIFICATION	0.03046361745572228	DESIGN
Handle any filters applied to this collection for many-to-many	WITHOUT_CLASSIFICATION	0.6773785258209505	WITHOUT_CLASSIFICATION	0.3226214741790495	DESIGN
if there is a user-specified loader, return that TODO: filters!?	WITHOUT_CLASSIFICATION	0.6987744831297628	WITHOUT_CLASSIFICATION	0.3012255168702372	DESIGN
Take care of any entities that might have been evicted!	WITHOUT_CLASSIFICATION	0.9932135265772952	WITHOUT_CLASSIFICATION	0.006786473422704662	DESIGN
strip leading ','	WITHOUT_CLASSIFICATION	0.9999998385806873	WITHOUT_CLASSIFICATION	1.6141931268944225E-7	DESIGN
Run a subquery loader	WITHOUT_CLASSIFICATION	0.9999692416905234	WITHOUT_CLASSIFICATION	3.0758309476618715E-5	DESIGN
needed by arrays	WITHOUT_CLASSIFICATION	0.9990018157738776	WITHOUT_CLASSIFICATION	9.981842261223676E-4	DESIGN
TODO: something with formulas...	WITHOUT_CLASSIFICATION	0.9980085942899303	WITHOUT_CLASSIFICATION	0.0019914057100697004	DESIGN
an assertion	WITHOUT_CLASSIFICATION	0.9999998978592605	WITHOUT_CLASSIFICATION	1.0214073957861737E-7	DESIGN
Remove all the old entries	WITHOUT_CLASSIFICATION	0.9999978198535442	WITHOUT_CLASSIFICATION	2.1801464558886915E-6	DESIGN
create all the new entries	WITHOUT_CLASSIFICATION	0.9999992734305349	WITHOUT_CLASSIFICATION	7.265694650615745E-7	DESIGN
&& !indexIsFormula	WITHOUT_CLASSIFICATION	0.9999939404730459	WITHOUT_CLASSIFICATION	6.059526954112334E-6	DESIGN
&& !indexIsFormula	WITHOUT_CLASSIFICATION	0.9999939404730459	WITHOUT_CLASSIFICATION	6.059526954112334E-6	DESIGN
delete all the deleted entries	WITHOUT_CLASSIFICATION	0.9999958941094412	WITHOUT_CLASSIFICATION	4.1058905587334515E-6	DESIGN
insert all the new entries	WITHOUT_CLASSIFICATION	0.9999995166016566	WITHOUT_CLASSIFICATION	4.833983433797913E-7	DESIGN
==elementType ??	WITHOUT_CLASSIFICATION	0.9999917359367714	WITHOUT_CLASSIFICATION	8.26406322860413E-6	DESIGN
update all the modified entries	WITHOUT_CLASSIFICATION	0.999994792450348	WITHOUT_CLASSIFICATION	5.2075496520214086E-6	DESIGN
identifier collections not supported for 1-to-many	WITHOUT_CLASSIFICATION	0.9995157144464863	WITHOUT_CLASSIFICATION	4.842855535136091E-4	DESIGN
update removed rows fks to null	WITHOUT_CLASSIFICATION	0.9999690487349978	WITHOUT_CLASSIFICATION	3.095126500226728E-5	DESIGN
will still be issued when it used to be null	WITHOUT_CLASSIFICATION	0.9993607541783537	WITHOUT_CLASSIFICATION	6.392458216463865E-4	DESIGN
now update all changed or added rows fks	WITHOUT_CLASSIFICATION	0.9999998580500986	WITHOUT_CLASSIFICATION	1.4194990137937323E-7	DESIGN
buf.append( selectFragment( lhsAlias, "" ) )ignore suffix for collection columns!	WITHOUT_CLASSIFICATION	0.9999642639779649	WITHOUT_CLASSIFICATION	3.57360220351204E-5	DESIGN
use suffix for the entity columns	WITHOUT_CLASSIFICATION	0.9985648999562344	WITHOUT_CLASSIFICATION	0.0014351000437655024	DESIGN
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999962073007254	WITHOUT_CLASSIFICATION	3.7926992745920072E-6	DESIGN
private final String rootTableName;	WITHOUT_CLASSIFICATION	0.9999971827992478	WITHOUT_CLASSIFICATION	2.8172007521691153E-6	DESIGN
INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9999014545434551	WITHOUT_CLASSIFICATION	9.854545654479876E-5	DESIGN
Custom SQL	WITHOUT_CLASSIFICATION	0.9999979497949161	WITHOUT_CLASSIFICATION	2.05020508390159E-6	DESIGN
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999962073007254	WITHOUT_CLASSIFICATION	3.7926992745920072E-6	DESIGN
Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999981442881603	WITHOUT_CLASSIFICATION	1.8557118398061216E-6	DESIGN
This could also just be true all the time...	WITHOUT_CLASSIFICATION	0.9999433537389003	WITHOUT_CLASSIFICATION	5.6646261099754494E-5	DESIGN
chop the last union (all)	WITHOUT_CLASSIFICATION	0.9999999500336424	WITHOUT_CLASSIFICATION	4.996635749365489E-8	DESIGN
TODO: check this....	WITHOUT_CLASSIFICATION	0.9859331560838797	WITHOUT_CLASSIFICATION	0.014066843916120312	DESIGN
INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9999014545434551	WITHOUT_CLASSIFICATION	9.854545654479876E-5	DESIGN
properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9999449469869216	WITHOUT_CLASSIFICATION	5.5053013078386345E-5	DESIGN
the closure of all properties in the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9998258728170125	WITHOUT_CLASSIFICATION	1.7412718298745987E-4	DESIGN
the closure of all columns used by the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9965751931814033	WITHOUT_CLASSIFICATION	0.003424806818596704	DESIGN
subclass discrimination works by assigning particular values to certain combinations of null primary key values in the outer join using an SQL CASE	WITHOUT_CLASSIFICATION	0.9999994301283847	WITHOUT_CLASSIFICATION	5.698716152991289E-7	DESIGN
MULTITABLES	WITHOUT_CLASSIFICATION	0.9995913799405236	WITHOUT_CLASSIFICATION	4.0862005947642075E-4	DESIGN
Custom sql	WITHOUT_CLASSIFICATION	0.9999964302152352	WITHOUT_CLASSIFICATION	3.569784764770617E-6	DESIGN
subclass closure properties	WITHOUT_CLASSIFICATION	0.9999992591151544	WITHOUT_CLASSIFICATION	7.40884845616364E-7	DESIGN
SUBCLASSES	WITHOUT_CLASSIFICATION	0.999264076145956	WITHOUT_CLASSIFICATION	7.359238540440057E-4	DESIGN
( (Column) model.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9998707824334213	WITHOUT_CLASSIFICATION	1.2921756657859905E-4	DESIGN
( (Column) sc.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999865546630253	WITHOUT_CLASSIFICATION	1.3445336974713989E-5	DESIGN
don't need subclass tables, because they can't appear in conditions	WITHOUT_CLASSIFICATION	0.9992361500027107	WITHOUT_CLASSIFICATION	7.638499972893215E-4	DESIGN
special case where we need to force incloude all subclass joins	WITHOUT_CLASSIFICATION	0.9938916185277678	WITHOUT_CLASSIFICATION	0.0061083814722322684	DESIGN
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999962073007254	WITHOUT_CLASSIFICATION	3.7926992745920072E-6	DESIGN
properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9999449469869216	WITHOUT_CLASSIFICATION	5.5053013078386345E-5	DESIGN
the closure of all columns used by the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9965751931814033	WITHOUT_CLASSIFICATION	0.003424806818596704	DESIGN
get em on the second pass!	WITHOUT_CLASSIFICATION	0.9999996336406476	WITHOUT_CLASSIFICATION	3.663593524234532E-7	DESIGN
now look up the object we are really interested in! (this lets us correctly handle proxies and multi-row or multi-column queries)	WITHOUT_CLASSIFICATION	0.9995552704899194	WITHOUT_CLASSIFICATION	4.447295100805174E-4	DESIGN
discriminator column	WITHOUT_CLASSIFICATION	0.9999981085490787	WITHOUT_CLASSIFICATION	1.8914509213765493E-6	DESIGN
INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9999014545434551	WITHOUT_CLASSIFICATION	9.854545654479876E-5	DESIGN
private final Map propertyTableNumbersByName = new HashMap();	WITHOUT_CLASSIFICATION	0.9999974309987305	WITHOUT_CLASSIFICATION	2.5690012696349877E-6	DESIGN
CLASS + TABLE	WITHOUT_CLASSIFICATION	0.999979039698654	WITHOUT_CLASSIFICATION	2.0960301346066216E-5	DESIGN
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9996886413361734	WITHOUT_CLASSIFICATION	3.113586638265294E-4	DESIGN
PROPERTIES	WITHOUT_CLASSIFICATION	0.999622824275074	WITHOUT_CLASSIFICATION	3.7717572492607836E-4	DESIGN
SUBCLASSES	WITHOUT_CLASSIFICATION	0.999264076145956	WITHOUT_CLASSIFICATION	7.359238540440057E-4	DESIGN
Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999981442881603	WITHOUT_CLASSIFICATION	1.8557118398061216E-6	DESIGN
JOINS	WITHOUT_CLASSIFICATION	0.9995398542465661	WITHOUT_CLASSIFICATION	4.6014575343399295E-4	DESIGN
propertyTableNumbersByName.put( prop.getName(), join );	WITHOUT_CLASSIFICATION	0.9999997749384726	WITHOUT_CLASSIFICATION	2.2506152736070404E-7	DESIGN
Access cached SQL	WITHOUT_CLASSIFICATION	0.9999836456392245	WITHOUT_CLASSIFICATION	1.6354360775445972E-5	DESIGN
figure out which tables need to be fetched	WITHOUT_CLASSIFICATION	0.9999708909139267	WITHOUT_CLASSIFICATION	2.9109086073253924E-5	DESIGN
figure out which columns are needed	WITHOUT_CLASSIFICATION	0.985244434798668	WITHOUT_CLASSIFICATION	0.014755565201331916	DESIGN
figure out which formulas are needed	WITHOUT_CLASSIFICATION	0.9977239082613315	WITHOUT_CLASSIFICATION	0.0022760917386684455	DESIGN
render the SQL	WITHOUT_CLASSIFICATION	0.9999960633507259	WITHOUT_CLASSIFICATION	3.9366492741798416E-6	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9991190199058981	WITHOUT_CLASSIFICATION	8.809800941018141E-4	DESIGN
moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993515902552298	WITHOUT_CLASSIFICATION	6.484097447701949E-4	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9852400555743543	WITHOUT_CLASSIFICATION	0.014759944425645608	DESIGN
The optional SQL string defined in the where attribute	WITHOUT_CLASSIFICATION	0.9999960201077253	WITHOUT_CLASSIFICATION	3.979892274702144E-6	DESIGN
information about lazy properties of this class	WITHOUT_CLASSIFICATION	0.9998914893263589	WITHOUT_CLASSIFICATION	1.0851067364111816E-4	DESIGN
information about all properties in class hierarchy	WITHOUT_CLASSIFICATION	0.9999701227514797	WITHOUT_CLASSIFICATION	2.987724852026717E-5	DESIGN
information about all columns/formulas in class hierarchy	WITHOUT_CLASSIFICATION	0.9994045851675719	WITHOUT_CLASSIFICATION	5.95414832428103E-4	DESIGN
dynamic filters attached to the class-level	WITHOUT_CLASSIFICATION	0.9999822416736391	WITHOUT_CLASSIFICATION	1.7758326360850093E-5	DESIGN
SQL strings	WITHOUT_CLASSIFICATION	0.9999986378601883	WITHOUT_CLASSIFICATION	1.3621398117824373E-6	DESIGN
for objects that came in via update()	WITHOUT_CLASSIFICATION	0.9999740209221389	WITHOUT_CLASSIFICATION	2.5979077861165862E-5	DESIGN
PROPERTIES	WITHOUT_CLASSIFICATION	0.999622824275074	WITHOUT_CLASSIFICATION	3.7717572492607836E-4	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9852400555743543	WITHOUT_CLASSIFICATION	0.014759944425645608	DESIGN
IDENTIFIER	WITHOUT_CLASSIFICATION	0.9997307911111525	WITHOUT_CLASSIFICATION	2.6920888884753003E-4	DESIGN
VERSION	WITHOUT_CLASSIFICATION	0.9997074335397631	WITHOUT_CLASSIFICATION	2.925664602369042E-4	DESIGN
WHERE STRING	WITHOUT_CLASSIFICATION	0.9999784024826092	WITHOUT_CLASSIFICATION	2.1597517390909094E-5	DESIGN
SUBCLASS PROPERTY CLOSURE	WITHOUT_CLASSIFICATION	0.9999403873559914	WITHOUT_CLASSIFICATION	5.961264400860887E-5	DESIGN
before add :-)	WITHOUT_CLASSIFICATION	0.9999991937910805	WITHOUT_CLASSIFICATION	8.062089194976046E-7	DESIGN
Handle any filters applied to the class level	WITHOUT_CLASSIFICATION	0.999732541592416	WITHOUT_CLASSIFICATION	2.6745840758403406E-4	DESIGN
only one-to-one is lazy fetched	WITHOUT_CLASSIFICATION	0.9999990576338481	WITHOUT_CLASSIFICATION	9.423661519165088E-7	DESIGN
note early exit here:	WITHOUT_CLASSIFICATION	0.9999987832543833	WITHOUT_CLASSIFICATION	1.2167456166898353E-6	DESIGN
object have been loaded with setReadOnly(true); HHH-2236	WITHOUT_CLASSIFICATION	0.9999958442546149	WITHOUT_CLASSIFICATION	4.155745385174335E-6	DESIGN
NOTE: this assumes something about how propertySelectFragment is implemented by the subclass!	WITHOUT_CLASSIFICATION	0.9999969332061848	WITHOUT_CLASSIFICATION	3.066793815341853E-6	DESIGN
strip leading ", "	WITHOUT_CLASSIFICATION	0.9999997392002128	WITHOUT_CLASSIFICATION	2.607997871813089E-7	DESIGN
if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999987530844057	WITHOUT_CLASSIFICATION	1.2469155943702969E-6	DESIGN
otherwise return the "hydrated" state (ie. associations are not resolved)	WITHOUT_CLASSIFICATION	0.9999509718014019	WITHOUT_CLASSIFICATION	4.9028198598123887E-5	DESIGN
null owner ok??	WITHOUT_CLASSIFICATION	0.9999914805741145	WITHOUT_CLASSIFICATION	8.519425885612278E-6	DESIGN
null sql means that the only lazy properties are shared PK one-to-one associations which are handled differently in the Type#nullSafeGet code...	WITHOUT_CLASSIFICATION	0.9997472794751313	WITHOUT_CLASSIFICATION	2.5272052486869886E-4	DESIGN
Create a new FROM node for the referenced class.	WITHOUT_CLASSIFICATION	0.9999968329411434	WITHOUT_CLASSIFICATION	3.167058856599771E-6	DESIGN
the difficulty here is exactly what do we update in order to force the version to be incremented in the db...	WITHOUT_CLASSIFICATION	0.9958383060084233	WITHOUT_CLASSIFICATION	0.004161693991576728	DESIGN
performance op to avoid the array search	WITHOUT_CLASSIFICATION	0.9999910136634759	WITHOUT_CLASSIFICATION	8.98633652407021E-6	DESIGN
properly handle property-ref-based associations	WITHOUT_CLASSIFICATION	0.9999618436722321	WITHOUT_CLASSIFICATION	3.815632776789834E-5	DESIGN
Enable for HHH-440, which we don't like:	WITHOUT_CLASSIFICATION	0.9999830850316418	WITHOUT_CLASSIFICATION	1.6914968358190083E-5	DESIGN
ALIASES	WITHOUT_CLASSIFICATION	0.9992146169163241	WITHOUT_CLASSIFICATION	7.853830836757885E-4	DESIGN
aliases named identifier ( alias.idname )	WITHOUT_CLASSIFICATION	0.9999254160835439	WITHOUT_CLASSIFICATION	7.458391645607223E-5	DESIGN
aliases for composite-id's	WITHOUT_CLASSIFICATION	0.9999947093070718	WITHOUT_CLASSIFICATION	5.290692928192447E-6	DESIGN
Fetch embedded identifiers propertynames from the "virtual" identifier component	WITHOUT_CLASSIFICATION	0.9999870737467987	WITHOUT_CLASSIFICATION	1.2926253201232355E-5	DESIGN
embedded composite ids ( alias.idname1, alias.idname2 )	WITHOUT_CLASSIFICATION	0.9999947524499165	WITHOUT_CLASSIFICATION	5.24755008348344E-6	DESIGN
TODO: skip formulas?	WITHOUT_CLASSIFICATION	0.8521829600722213	WITHOUT_CLASSIFICATION	0.1478170399277788	DESIGN
don't need filters for the static loaders	WITHOUT_CLASSIFICATION	0.9999388750262133	WITHOUT_CLASSIFICATION	6.112497378675328E-5	DESIGN
do two passes, for collection property-ref!	WITHOUT_CLASSIFICATION	0.999971583406472	WITHOUT_CLASSIFICATION	2.841659352803284E-5	DESIGN
select the correct row by either pk or rowid	WITHOUT_CLASSIFICATION	0.9999982853404228	WITHOUT_CLASSIFICATION	1.7146595771619371E-6	DESIGN
TODO: eventually, rowIdName[j]	WITHOUT_CLASSIFICATION	0.9666716734892077	WITHOUT_CLASSIFICATION	0.03332832651079234	DESIGN
this is a property of the table, which we are updating	WITHOUT_CLASSIFICATION	0.9999995398000201	WITHOUT_CLASSIFICATION	4.601999799378873E-7	DESIGN
special shortcut for id properties, skip the join! this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9995062596166654	WITHOUT_CLASSIFICATION	4.93740383334605E-4	DESIGN
we are using "all" or "dirty" property-based optimistic locking	WITHOUT_CLASSIFICATION	0.9999388540381184	WITHOUT_CLASSIFICATION	6.114596188153235E-5	DESIGN
nothing to do; even if the operand is a parameter, no way we could infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999699644287035	WITHOUT_CLASSIFICATION	3.0035571296592864E-5	DESIGN
this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999444788316515	WITHOUT_CLASSIFICATION	5.552116834849561E-5	DESIGN
add normal properties	WITHOUT_CLASSIFICATION	0.9999998205595949	WITHOUT_CLASSIFICATION	1.7944040509809834E-7	DESIGN
add the discriminator	WITHOUT_CLASSIFICATION	0.9999999688410661	WITHOUT_CLASSIFICATION	3.115893387311932E-8	DESIGN
more specifically : "? [op] datetime" 1) if the operator is MINUS, the param needs to be of some datetime type 2) if the operator is PLUS, the param needs to be of some numeric type	WITHOUT_CLASSIFICATION	0.9705127526054673	WITHOUT_CLASSIFICATION	0.029487247394532696	DESIGN
add normal properties	WITHOUT_CLASSIFICATION	0.9999998205595949	WITHOUT_CLASSIFICATION	1.7944040509809834E-7	DESIGN
this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999444788316515	WITHOUT_CLASSIFICATION	5.552116834849561E-5	DESIGN
add the discriminator	WITHOUT_CLASSIFICATION	0.9999999688410661	WITHOUT_CLASSIFICATION	3.115893387311932E-8	DESIGN
add the primary key	WITHOUT_CLASSIFICATION	0.9999998897489429	WITHOUT_CLASSIFICATION	1.1025105703600281E-7	DESIGN
delegate already handles PK columns	WITHOUT_CLASSIFICATION	0.999407078392542	WITHOUT_CLASSIFICATION	5.929216074580664E-4	DESIGN
we can't batch joined inserts, especially not if it is an identity insert; nor can we batch statements where the expectation is based on an output param	WITHOUT_CLASSIFICATION	0.9999940175611499	WITHOUT_CLASSIFICATION	5.982438850052224E-6	DESIGN
Render the SQL query	WITHOUT_CLASSIFICATION	0.9999970082077615	WITHOUT_CLASSIFICATION	2.991792238523978E-6	DESIGN
Write the values of fields onto the prepared statement - we MUST use the state at the time the insert was issued (cos of foreign key constraints). Not necessarily the object's current state	WITHOUT_CLASSIFICATION	0.9999975500343223	WITHOUT_CLASSIFICATION	2.449965677629227E-6	DESIGN
TODO : shouldnt inserts be Expectations.NONE?	WITHOUT_CLASSIFICATION	0.932844299961709	WITHOUT_CLASSIFICATION	0.0671557000382909	DESIGN
don't bother trying to update, we know there is no row there yet	WITHOUT_CLASSIFICATION	0.9999966982085898	WITHOUT_CLASSIFICATION	3.301791410119881E-6	DESIGN
if all fields are null, we might need to delete existing row	WITHOUT_CLASSIFICATION	0.9946633266075302	WITHOUT_CLASSIFICATION	0.005336673392469761	DESIGN
there is probably a row there, so try to update if no rows were updated, we will find out	WITHOUT_CLASSIFICATION	0.9999987919847513	WITHOUT_CLASSIFICATION	1.20801524870925E-6	DESIGN
note: updates to joined tables can't be batched...	WITHOUT_CLASSIFICATION	0.9999993583370786	WITHOUT_CLASSIFICATION	6.41662921320264E-7	DESIGN
starting index	WITHOUT_CLASSIFICATION	0.9999985050559982	WITHOUT_CLASSIFICATION	1.494944001714146E-6	DESIGN
Now write the values of fields onto the prepared statement	WITHOUT_CLASSIFICATION	0.9999998930786475	WITHOUT_CLASSIFICATION	1.0692135258501086E-7	DESIGN
Write any appropriate versioning conditional parameters	WITHOUT_CLASSIFICATION	0.9894087056509401	WITHOUT_CLASSIFICATION	0.010591294349059937	DESIGN
Render the SQL query	WITHOUT_CLASSIFICATION	0.9999970082077615	WITHOUT_CLASSIFICATION	2.991792238523978E-6	DESIGN
Do the key. The key is immutable so we can use the _current_ object state - not necessarily the state at the time the delete was issued	WITHOUT_CLASSIFICATION	0.999658554518282	WITHOUT_CLASSIFICATION	3.414454817179447E-4	DESIGN
We should use the _current_ object state (ie. after any updates that occurred during flush)	WITHOUT_CLASSIFICATION	0.999998450410054	WITHOUT_CLASSIFICATION	1.54958994610612E-6	DESIGN
this property belongs to the table and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.999468673429412	WITHOUT_CLASSIFICATION	5.313265705879254E-4	DESIGN
note: dirtyFields==null means we had no snapshot, and we couldn't get one using select-before-update oldFields==null just means we had no snapshot to begin with (we might have used select-before-update to get the dirtyFields)	WITHOUT_CLASSIFICATION	0.9999982567382477	WITHOUT_CLASSIFICATION	1.7432617522594693E-6	DESIGN
more specifically : "datetime [op] ?" 1) if the operator is MINUS, we really cannot determine the expected type as either another datetime or numeric would be valid 2) if the operator is PLUS, the param needs to be of some numeric type	WITHOUT_CLASSIFICATION	0.9998251646986169	WITHOUT_CLASSIFICATION	1.7483530138297685E-4	DESIGN
For the case of dynamic-update="true", we need to generate the UPDATE SQL	WITHOUT_CLASSIFICATION	0.9999994586589513	WITHOUT_CLASSIFICATION	5.413410487476572E-7	DESIGN
don't need to check laziness (dirty checking algorithm handles that)	WITHOUT_CLASSIFICATION	0.9999795414319845	WITHOUT_CLASSIFICATION	2.0458568015456044E-5	DESIGN
For the case of dynamic-update="false", or no snapshot, we use the static SQL	WITHOUT_CLASSIFICATION	0.9999999214843891	WITHOUT_CLASSIFICATION	7.851561086254612E-8	DESIGN
if not "get", then try "is"	WITHOUT_CLASSIFICATION	0.9999994685627968	WITHOUT_CLASSIFICATION	5.314372033158831E-7	DESIGN
Now update only the tables with dirty properties (and the table with the version number)	WITHOUT_CLASSIFICATION	0.9999998354228491	WITHOUT_CLASSIFICATION	1.6457715102342207E-7	DESIGN
For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999984639802441	WITHOUT_CLASSIFICATION	1.5360197559781123E-6	DESIGN
For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999984639802441	WITHOUT_CLASSIFICATION	1.5360197559781123E-6	DESIGN
For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999998680098701	WITHOUT_CLASSIFICATION	1.3199012989780553E-7	DESIGN
For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999998680098701	WITHOUT_CLASSIFICATION	1.3199012989780553E-7	DESIGN
not supported	WITHOUT_CLASSIFICATION	0.9999388133249488	WITHOUT_CLASSIFICATION	6.118667505118354E-5	DESIGN
this property belongs to the table and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.999468673429412	WITHOUT_CLASSIFICATION	5.313265705879254E-4	DESIGN
we need to utilize dynamic delete statements	WITHOUT_CLASSIFICATION	0.9999349400120799	WITHOUT_CLASSIFICATION	6.505998792015191E-5	DESIGN
otherwise, utilize the static delete statements	WITHOUT_CLASSIFICATION	0.9999996724507059	WITHOUT_CLASSIFICATION	3.2754929421628015E-7	DESIGN
just a performance opt!	WITHOUT_CLASSIFICATION	0.99998874632812	WITHOUT_CLASSIFICATION	1.125367188007869E-5	DESIGN
just a performance opt!	WITHOUT_CLASSIFICATION	0.99998874632812	WITHOUT_CLASSIFICATION	1.125367188007869E-5	DESIGN
all joins join to the pk of the driving table	WITHOUT_CLASSIFICATION	0.9999989576122829	WITHOUT_CLASSIFICATION	1.0423877172157365E-6	DESIGN
notice that we skip the first table; it is the driving table!	WITHOUT_CLASSIFICATION	0.9999996843132728	WITHOUT_CLASSIFICATION	3.1568672716760604E-7	DESIGN
we can inner join to superclass tables (the row MUST be there) we can never inner join to subclass tables	WITHOUT_CLASSIFICATION	0.9999651242949934	WITHOUT_CLASSIFICATION	3.487570500657472E-5	DESIGN
skip the driving table	WITHOUT_CLASSIFICATION	0.9999998831855146	WITHOUT_CLASSIFICATION	1.1681448544343137E-7	DESIGN
get 'em in the right order (not that it really matters)	WITHOUT_CLASSIFICATION	0.9994176662561798	WITHOUT_CLASSIFICATION	5.823337438202137E-4	DESIGN
here, we work under the following assumptions: ------------ valid cases -------------------------------------- 1) datetime + {something other than datetime} : always results in a datetime ( db will catch invalid conversions ) 2) datetime - datetime : always results in a DOUBLE 3) datetime - {something other than datetime} : always results in a datetime ( db will catch invalid conversions ) ------------ invalid cases ------------------------------------ 4) datetime + datetime 5) {something other than datetime} - datetime 6) datetime {any type} 7) datetime / {any type} 8) {any type} / datetime doing so allows us to properly handle parameters as either the left or right side here in the majority of cases	WITHOUT_CLASSIFICATION	0.9997871862092791	WITHOUT_CLASSIFICATION	2.1281379072100783E-4	DESIGN
render the where and from parts	WITHOUT_CLASSIFICATION	0.9998448594867341	WITHOUT_CLASSIFICATION	1.5514051326604084E-4	DESIGN
we could regerate this inside each called method!	WITHOUT_CLASSIFICATION	0.9790777132715521	WITHOUT_CLASSIFICATION	0.020922286728447863	DESIGN
now render the joins	WITHOUT_CLASSIFICATION	0.9999997751506187	WITHOUT_CLASSIFICATION	2.2484938128065466E-7	DESIGN
This will add the new from element to the origin.	WITHOUT_CLASSIFICATION	0.9999981216600465	WITHOUT_CLASSIFICATION	1.8783399533823217E-6	DESIGN
now render the select clause	WITHOUT_CLASSIFICATION	0.9999998648085823	WITHOUT_CLASSIFICATION	1.3519141767953987E-7	DESIGN
now tie it all together	WITHOUT_CLASSIFICATION	0.9999993932317458	WITHOUT_CLASSIFICATION	6.067682541154207E-7	DESIGN
insert/update/delete SQL	WITHOUT_CLASSIFICATION	0.9999995976820187	WITHOUT_CLASSIFICATION	4.023179812705221E-7	DESIGN
select SQL	WITHOUT_CLASSIFICATION	0.9999986551159603	WITHOUT_CLASSIFICATION	1.3448840396868813E-6	DESIGN
no need to check laziness, dirty checking handles that	WITHOUT_CLASSIFICATION	0.99999962779641	WITHOUT_CLASSIFICATION	3.7220359000483985E-7	DESIGN
Fully resolve the map reference, create implicit joins.	WITHOUT_CLASSIFICATION	0.9999998355508867	WITHOUT_CLASSIFICATION	1.6444911321991665E-7	DESIGN
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.974493588742888	WITHOUT_CLASSIFICATION	0.025506411257111963	DESIGN
The basic implementation is to simply use the node's text	WITHOUT_CLASSIFICATION	0.9999914311845343	WITHOUT_CLASSIFICATION	8.568815465665945E-6	DESIGN
for dialects which are known to not support ANSI-SQL row-value-constructor syntax, we should mutate the tree.	WITHOUT_CLASSIFICATION	0.9998834091282094	WITHOUT_CLASSIFICATION	1.1659087179060458E-4	DESIGN
Due to the complexity in initializing the SelectClause, do not generate one here. If it is not found; simply return null... Also, do not cache since it gets generated well after we are created.	WITHOUT_CLASSIFICATION	0.9998004299986744	WITHOUT_CLASSIFICATION	1.9957000132556543E-4	DESIGN
check the version unsaved-value, if appropriate	WITHOUT_CLASSIFICATION	0.9999867566203657	WITHOUT_CLASSIFICATION	1.3243379634192082E-5	DESIGN
let this take precedence if defined, since it works for assigned identifiers	WITHOUT_CLASSIFICATION	0.9999302338584378	WITHOUT_CLASSIFICATION	6.976614156220676E-5	DESIGN
check the id unsaved-value	WITHOUT_CLASSIFICATION	0.9999996134740011	WITHOUT_CLASSIFICATION	3.865259988276445E-7	DESIGN
check to see if it is in the second-level cache	WITHOUT_CLASSIFICATION	0.9999812754459813	WITHOUT_CLASSIFICATION	1.8724554018730546E-5	DESIGN
/	WITHOUT_CLASSIFICATION	0.9992500349869593	WITHOUT_CLASSIFICATION	7.499650130406492E-4	DESIGN
For property references generate <tablealias>.<columnname> as <projectionalias>	WITHOUT_CLASSIFICATION	0.9999805061316503	WITHOUT_CLASSIFICATION	1.9493868349701797E-5	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9852400555743543	WITHOUT_CLASSIFICATION	0.014759944425645608	DESIGN
if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999987530844057	WITHOUT_CLASSIFICATION	1.2469155943702969E-6	DESIGN
force immediate execution of the insert	WITHOUT_CLASSIFICATION	0.9999976712964704	WITHOUT_CLASSIFICATION	2.3287035294710492E-6	DESIGN
If this from element is a collection and the path is a collection property (maxIndex, etc.) then generate a sub-query.	WITHOUT_CLASSIFICATION	0.9999926964107706	WITHOUT_CLASSIFICATION	7.303589229421404E-6	DESIGN
entities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998752332488882	WITHOUT_CLASSIFICATION	1.2476675111172848E-4	DESIGN
collections ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999576072607361	WITHOUT_CLASSIFICATION	4.2392739263836606E-5	DESIGN
cannot occur	WITHOUT_CLASSIFICATION	0.9999975318575528	WITHOUT_CLASSIFICATION	2.4681424472080627E-6	DESIGN
cannot occur	WITHOUT_CLASSIFICATION	0.9999975318575528	WITHOUT_CLASSIFICATION	2.4681424472080627E-6	DESIGN
only carry on if the method has no parameters	WITHOUT_CLASSIFICATION	0.9985767204217866	WITHOUT_CLASSIFICATION	0.0014232795782134638	DESIGN
try "get"	WITHOUT_CLASSIFICATION	0.9999880348219397	WITHOUT_CLASSIFICATION	1.1965178060421721E-5	DESIGN
do nothing...	WITHOUT_CLASSIFICATION	0.9999998623891166	WITHOUT_CLASSIFICATION	1.3761088331406687E-7	DESIGN
do nothing...	WITHOUT_CLASSIFICATION	0.9999998623891166	WITHOUT_CLASSIFICATION	1.3761088331406687E-7	DESIGN
should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9900183024419992	WITHOUT_CLASSIFICATION	0.009981697558000862	DESIGN
this page intentionally left blank :)	WITHOUT_CLASSIFICATION	0.9994926932254823	WITHOUT_CLASSIFICATION	5.073067745177427E-4	DESIGN
do not do anything	WITHOUT_CLASSIFICATION	0.9999997645271602	WITHOUT_CLASSIFICATION	2.3547283988242988E-7	DESIGN
ignore	WITHOUT_CLASSIFICATION	0.9999910123537684	WITHOUT_CLASSIFICATION	8.987646231521161E-6	DESIGN
cant instantiate	WITHOUT_CLASSIFICATION	0.9999859796554463	WITHOUT_CLASSIFICATION	1.402034455366801E-5	DESIGN
if it is a property of an embedded component, invoke on the "identifier"	WITHOUT_CLASSIFICATION	0.9999554182507038	WITHOUT_CLASSIFICATION	4.4581749296189655E-5	DESIGN
otherwise:	WITHOUT_CLASSIFICATION	0.9999887783167211	WITHOUT_CLASSIFICATION	1.1221683278994148E-5	DESIGN
skip finalize methods	WITHOUT_CLASSIFICATION	0.9999993232679139	WITHOUT_CLASSIFICATION	6.767320860834639E-7	DESIGN
note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9997026124519877	WITHOUT_CLASSIFICATION	2.9738754801228337E-4	DESIGN
note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9997026124519877	WITHOUT_CLASSIFICATION	2.9738754801228337E-4	DESIGN
HHH-2481 make sure the callback gets cleared, otherwise the instance stays in a static thread local.	WITHOUT_CLASSIFICATION	0.997224514444356	WITHOUT_CLASSIFICATION	0.0027754855556439847	DESIGN
while constructor is running	WITHOUT_CLASSIFICATION	0.9999994459324966	WITHOUT_CLASSIFICATION	5.540675033888541E-7	DESIGN
while constructor is running	WITHOUT_CLASSIFICATION	0.9999994459324966	WITHOUT_CLASSIFICATION	5.540675033888541E-7	DESIGN
note: interface is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9996262985201052	WITHOUT_CLASSIFICATION	3.7370147989476975E-4	DESIGN
interfaces arguments	WITHOUT_CLASSIFICATION	0.9999943003641175	WITHOUT_CLASSIFICATION	5.699635882416401E-6	DESIGN
TODO!	WITHOUT_CLASSIFICATION	0.9441245237643628	WITHOUT_CLASSIFICATION	0.05587547623563723	DESIGN
Get the caller	WITHOUT_CLASSIFICATION	0.9999990634652004	WITHOUT_CLASSIFICATION	9.365347995108468E-7	DESIGN
Get the caller principals	WITHOUT_CLASSIFICATION	0.9999995891613722	WITHOUT_CLASSIFICATION	4.1083862776730606E-7	DESIGN
private static final Alias DEFAULT_ALIAS = new Alias(10, null);	WITHOUT_CLASSIFICATION	0.9999998884421544	WITHOUT_CLASSIFICATION	1.1155784568047421E-7	DESIGN
Needed to bump this up to DotNode, because that is the only thing which currently knows about the property-ref path in the correct format; it is either this, or recurse over the DotNodes constructing the property path just like DotNode does internally	WITHOUT_CLASSIFICATION	0.9999719363938397	WITHOUT_CLASSIFICATION	2.8063606160274554E-5	DESIGN
if the identifier is quoted, remove the quotes	WITHOUT_CLASSIFICATION	0.9998871082258779	WITHOUT_CLASSIFICATION	1.128917741220987E-4	DESIGN
truncate the identifier to the max alias length, less the suffix length	WITHOUT_CLASSIFICATION	0.9994135759352641	WITHOUT_CLASSIFICATION	5.864240647358337E-4	DESIGN
full joins are not supported.. yet!	WITHOUT_CLASSIFICATION	0.998998906093836	WITHOUT_CLASSIFICATION	0.001001093906164054	DESIGN
null is not considered the same type as Integer. $NON-NLS-1 $NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999817168343893	WITHOUT_CLASSIFICATION	1.8283165610724672E-5	DESIGN
the outerJoinsAfterWhere needs to come before where clause to properly handle dynamic filters	WITHOUT_CLASSIFICATION	0.9953719959675811	WITHOUT_CLASSIFICATION	0.004628004032418976	DESIGN
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999071060044589	WITHOUT_CLASSIFICATION	9.289399554119831E-5	DESIGN
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999071060044589	WITHOUT_CLASSIFICATION	9.289399554119831E-5	DESIGN
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999071060044589	WITHOUT_CLASSIFICATION	9.289399554119831E-5	DESIGN
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999071060044589	WITHOUT_CLASSIFICATION	9.289399554119831E-5	DESIGN
strip off any leading 'and' token	WITHOUT_CLASSIFICATION	0.9999992894251812	WITHOUT_CLASSIFICATION	7.105748186628773E-7	DESIGN
if the condition is not already there...	WITHOUT_CLASSIFICATION	0.9999927590031914	WITHOUT_CLASSIFICATION	7.2409968085942115E-6	DESIGN
dontSpace.add("'");	WITHOUT_CLASSIFICATION	0.9999979846103056	WITHOUT_CLASSIFICATION	2.015389694304499E-6	DESIGN
for MySQL	WITHOUT_CLASSIFICATION	0.9999149010243682	WITHOUT_CLASSIFICATION	8.509897563175594E-5	DESIGN
HashMap columnsUnique = new HashMap();	WITHOUT_CLASSIFICATION	0.9999573648802405	WITHOUT_CLASSIFICATION	4.263511975949671E-5	DESIGN
null caused some problems	WITHOUT_CLASSIFICATION	0.9999834395576779	WITHOUT_CLASSIFICATION	1.656044232205365E-5	DESIGN
package	WITHOUT_CLASSIFICATION	0.9991997042405928	WITHOUT_CLASSIFICATION	8.002957594071461E-4	DESIGN
not sure if this would ever be null but wanted to be careful	WITHOUT_CLASSIFICATION	0.995764497158688	WITHOUT_CLASSIFICATION	0.0042355028413120464	DESIGN
even on inverse="true"	WITHOUT_CLASSIFICATION	0.9999838526620126	WITHOUT_CLASSIFICATION	1.614733798738364E-5	DESIGN
package	WITHOUT_CLASSIFICATION	0.9991997042405928	WITHOUT_CLASSIFICATION	8.002957594071461E-4	DESIGN
package	WITHOUT_CLASSIFICATION	0.9991997042405928	WITHOUT_CLASSIFICATION	8.002957594071461E-4	DESIGN
If true then execute db updates, otherwise just generate and display updates	WITHOUT_CLASSIFICATION	0.9999982482411073	WITHOUT_CLASSIFICATION	1.7517588926326553E-6	DESIGN
we only release the connection	WITHOUT_CLASSIFICATION	0.9999997654007684	WITHOUT_CLASSIFICATION	2.3459923149814742E-7	DESIGN
deprecated option...	WITHOUT_CLASSIFICATION	0.9999884397387481	WITHOUT_CLASSIFICATION	1.1560261251965686E-5	DESIGN
if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999930640475384	WITHOUT_CLASSIFICATION	6.935952461591479E-6	DESIGN
actually, this last test is probably unnecessary, since beforeCompletion() doesn't get called during rollback	WITHOUT_CLASSIFICATION	0.9993161359146691	WITHOUT_CLASSIFICATION	6.83864085330972E-4	DESIGN
this one only really needed for badly-behaved applications! (if the TransactionManager has a Sychronization registered, its a noop) (actually we do need it for downgrading locks)	WITHOUT_CLASSIFICATION	0.9910598588899313	WITHOUT_CLASSIFICATION	0.008940141110068727	DESIGN
Create an DotNode AST for the path and resolve it.	WITHOUT_CLASSIFICATION	0.9999992822715251	WITHOUT_CLASSIFICATION	7.177284747269159E-7	DESIGN
if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999930640475384	WITHOUT_CLASSIFICATION	6.935952461591479E-6	DESIGN
if we could not register a synchronization, do the before/after completion callbacks ourself (but we need to let jdbcContext know that this is what we are going to do, so it doesn't keep trying to register synchronizations)	WITHOUT_CLASSIFICATION	0.9936975910838309	WITHOUT_CLASSIFICATION	0.006302408916169013	DESIGN
swallow it, and continue to roll back JTA transaction	WITHOUT_CLASSIFICATION	0.9996768709577674	WITHOUT_CLASSIFICATION	3.231290422326529E-4	DESIGN
so the transaction is already rolled back, by JTA spec	WITHOUT_CLASSIFICATION	0.9999955663235855	WITHOUT_CLASSIFICATION	4.433676414450684E-6	DESIGN
this method is a noop if there is a Synchronization!	WITHOUT_CLASSIFICATION	0.9997071126652298	WITHOUT_CLASSIFICATION	2.9288733477022893E-4	DESIGN
two conditions where we need to transform this to a theta-join syntax: 1) 'elem' is the "root from-element" in correlated subqueries 2) The DotNode.useThetaStyleImplicitJoins has been set to true and 'elem' represents an implicit join	WITHOUT_CLASSIFICATION	0.9976800477259056	WITHOUT_CLASSIFICATION	0.0023199522740944183	DESIGN
WebSphere, however, is not a sane JEE/JTA container...	WITHOUT_CLASSIFICATION	0.9999981930465098	WITHOUT_CLASSIFICATION	1.8069534901483145E-6	DESIGN
for sane JEE/JTA containers, the transaction itself functions as its identifier...	WITHOUT_CLASSIFICATION	0.9999983530076307	WITHOUT_CLASSIFICATION	1.6469923693071687E-6	DESIGN
swallow, the transaction was finished	WITHOUT_CLASSIFICATION	0.9999610599124455	WITHOUT_CLASSIFICATION	3.894008755445251E-5	DESIGN
all AliasToEntityMapResultTransformer are considered equal ~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998919741903971	WITHOUT_CLASSIFICATION	1.0802580960285422E-4	DESIGN
Create the join element under the from element.	WITHOUT_CLASSIFICATION	0.9999997082934408	WITHOUT_CLASSIFICATION	2.91706559221542E-7	DESIGN
all DistinctRootEntityResultTransformer are considered equal ~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999676911256696	WITHOUT_CLASSIFICATION	3.2308874330445714E-5	DESIGN
map of EntityMode -> Tuplizer	WITHOUT_CLASSIFICATION	0.9999677824988139	WITHOUT_CLASSIFICATION	3.221750118606113E-5	DESIGN
this is a virtual id property...	WITHOUT_CLASSIFICATION	0.9999606202648884	WITHOUT_CLASSIFICATION	3.9379735111607786E-5	DESIGN
this one needed only for guessEntityMode()	WITHOUT_CLASSIFICATION	0.9853329820998005	WITHOUT_CLASSIFICATION	0.014667017900199524	DESIGN
create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999993604250184	WITHOUT_CLASSIFICATION	6.395749815335344E-7	DESIGN
todo : move this to SF per HHH-3517; also see HHH-1907 and ComponentMetamodel	WITHOUT_CLASSIFICATION	0.9248323197782266	WITHOUT_CLASSIFICATION	0.07516768022177343	DESIGN
then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999860706908043	WITHOUT_CLASSIFICATION	1.392930919583765E-5	DESIGN
Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999637522266108	WITHOUT_CLASSIFICATION	3.624777338924561E-5	DESIGN
then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9997349707532548	WITHOUT_CLASSIFICATION	2.6502924674520273E-4	DESIGN
Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999637522266108	WITHOUT_CLASSIFICATION	3.624777338924561E-5	DESIGN
put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.999656453990174	WITHOUT_CLASSIFICATION	3.435460098258956E-4	DESIGN
found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999994392125429	WITHOUT_CLASSIFICATION	5.607874570954364E-7	DESIGN
private final SessionFactoryImplementor sessionFactory;	WITHOUT_CLASSIFICATION	0.9995699481659854	WITHOUT_CLASSIFICATION	4.3005183401459575E-4	DESIGN
cached for efficiency...	WITHOUT_CLASSIFICATION	0.9999745516917407	WITHOUT_CLASSIFICATION	2.544830825936392E-5	DESIGN
public ComponentMetamodel(Component component, SessionFactoryImplementor sessionFactory) {	WITHOUT_CLASSIFICATION	0.9950337820542878	WITHOUT_CLASSIFICATION	0.004966217945712078	DESIGN
this.sessionFactory = sessionFactory;	WITHOUT_CLASSIFICATION	0.999988778644053	WITHOUT_CLASSIFICATION	1.1221355947101807E-5	DESIGN
it was not embedded, so the argument is just an id	WITHOUT_CLASSIFICATION	0.9999973522559215	WITHOUT_CLASSIFICATION	2.6477440786558026E-6	DESIGN
then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999860706908043	WITHOUT_CLASSIFICATION	1.392930919583765E-5	DESIGN
then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9997349707532548	WITHOUT_CLASSIFICATION	2.6502924674520273E-4	DESIGN
put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.999656453990174	WITHOUT_CLASSIFICATION	3.435460098258956E-4	DESIGN
then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999743833053868	WITHOUT_CLASSIFICATION	2.561669461317232E-5	DESIGN
return currentId;	WITHOUT_CLASSIFICATION	0.9999319268363713	WITHOUT_CLASSIFICATION	6.807316362874968E-5	DESIGN
reset the id	WITHOUT_CLASSIFICATION	0.9999980511681075	WITHOUT_CLASSIFICATION	1.9488318925221327E-6	DESIGN
origin.addDestination( destination ); This was the cause of HHH-242 origin.setType( FROM_FRAGMENT ); Set the parent node type so that the AST is properly formed. The destination node will have all the FROM text. The parent node is a collection join too (voodoo - see JoinProcessor)	WITHOUT_CLASSIFICATION	0.9999190660034929	WITHOUT_CLASSIFICATION	8.093399650711175E-5	DESIGN
reset the version	WITHOUT_CLASSIFICATION	0.9999977192309454	WITHOUT_CLASSIFICATION	2.2807690547006013E-6	DESIGN
the default is to simply not lazy fetch properties for now...	WITHOUT_CLASSIFICATION	0.9999927584789612	WITHOUT_CLASSIFICATION	7.241521038846441E-6	DESIGN
Add the second join, the one that ends in the destination table.	WITHOUT_CLASSIFICATION	0.999999993598941	WITHOUT_CLASSIFICATION	6.401059063852235E-9	DESIGN
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.974493588742888	WITHOUT_CLASSIFICATION	0.025506411257111963	DESIGN
found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999994392125429	WITHOUT_CLASSIFICATION	5.607874570954364E-7	DESIGN
determine the id getter and setter methods from the proxy interface (if any) determine all interfaces needed by the resulting proxy	WITHOUT_CLASSIFICATION	0.9999371239020994	WITHOUT_CLASSIFICATION	6.287609790056026E-5	DESIGN
return getFactory().getSettings().getBytecodeProvider().getProxyFactoryFactory().buildProxyFactory();	WITHOUT_CLASSIFICATION	0.9998583480674262	WITHOUT_CLASSIFICATION	1.4165193257377075E-4	DESIGN
not final because proxy factory creation can fail	WITHOUT_CLASSIFICATION	0.999969329688918	WITHOUT_CLASSIFICATION	3.0670311082009696E-5	DESIGN
superclass entity-name	WITHOUT_CLASSIFICATION	0.9999829651215567	WITHOUT_CLASSIFICATION	1.7034878443314336E-5	DESIGN
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.974493588742888	WITHOUT_CLASSIFICATION	0.025506411257111963	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9852400555743543	WITHOUT_CLASSIFICATION	0.014759944425645608	DESIGN
init the aliases, after initing the constructornode	WITHOUT_CLASSIFICATION	0.9999958930364291	WITHOUT_CLASSIFICATION	4.10696357089079E-6	DESIGN
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.974493588742888	WITHOUT_CLASSIFICATION	0.025506411257111963	DESIGN
legacy behavior (with no abstract attribute specified)	WITHOUT_CLASSIFICATION	0.999985580483238	WITHOUT_CLASSIFICATION	1.4419516761980345E-5	DESIGN
Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.999999745475374	WITHOUT_CLASSIFICATION	2.545246260919588E-7	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9852400555743543	WITHOUT_CLASSIFICATION	0.014759944425645608	DESIGN
note: this affects the return value!	WITHOUT_CLASSIFICATION	0.9999714058982508	WITHOUT_CLASSIFICATION	2.859410174914788E-5	DESIGN
Need to account for allowable '_' within the variant	WITHOUT_CLASSIFICATION	0.9999639787587327	WITHOUT_CLASSIFICATION	3.602124126727522E-5	DESIGN
Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999980796204019	WITHOUT_CLASSIFICATION	1.9203795981275837E-6	DESIGN
Collection Types:	WITHOUT_CLASSIFICATION	0.999999618134092	WITHOUT_CLASSIFICATION	3.8186590811634855E-7	DESIGN
convenience methods relating to operations across arrays of types...	WITHOUT_CLASSIFICATION	0.9999476402564975	WITHOUT_CLASSIFICATION	5.235974350244836E-5	DESIGN
lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9997106788763428	WITHOUT_CLASSIFICATION	2.8932112365724887E-4	DESIGN
Blobs are ignored by merge()	WITHOUT_CLASSIFICATION	0.9999995988223265	WITHOUT_CLASSIFICATION	4.0117767348530967E-7	DESIGN
value is the entity name	WITHOUT_CLASSIFICATION	0.9999964380512164	WITHOUT_CLASSIFICATION	3.5619487836138373E-6	DESIGN
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.999972345811373	WITHOUT_CLASSIFICATION	2.7654188627018945E-5	DESIGN
generate id select fragment and then property select fragment for each expression, just like generateSelectFragments().	WITHOUT_CLASSIFICATION	0.9999948016881621	WITHOUT_CLASSIFICATION	5.198311837871652E-6	DESIGN
TODO!	WITHOUT_CLASSIFICATION	0.9441245237643628	WITHOUT_CLASSIFICATION	0.05587547623563723	DESIGN
xml is the entity name	WITHOUT_CLASSIFICATION	0.9999970757395961	WITHOUT_CLASSIFICATION	2.9242604039069048E-6	DESIGN
special case ... this is the leaf of the containment graph, even though not immutable	WITHOUT_CLASSIFICATION	0.9999960913270952	WITHOUT_CLASSIFICATION	3.9086729047281005E-6	DESIGN
tolerates nulls	WITHOUT_CLASSIFICATION	0.9999998565732342	WITHOUT_CLASSIFICATION	1.434267657847477E-7	DESIGN
sqlResultTypeList,	WITHOUT_CLASSIFICATION	0.9999987291060413	WITHOUT_CLASSIFICATION	1.2708939587646502E-6	DESIGN
metaType is assumed to be single-column type	WITHOUT_CLASSIFICATION	0.9996072478196749	WITHOUT_CLASSIFICATION	3.9275218032511157E-4	DESIGN
Get all the select expressions (that we just generated) and render the select.	WITHOUT_CLASSIFICATION	0.9998639466153109	WITHOUT_CLASSIFICATION	1.3605338468923416E-4	DESIGN
Look through the FromElement's children to find any collections of values that should be fetched...	WITHOUT_CLASSIFICATION	0.999988656234997	WITHOUT_CLASSIFICATION	1.1343765003047896E-5	DESIGN
return AssociationType.FOREIGN_KEY_TO_PARENT; this is better but causes a transient object exception...	WITHOUT_CLASSIFICATION	0.9958760620580129	WITHOUT_CLASSIFICATION	0.004123937941987035	DESIGN
Use the lower case function name. Remember whether we're in a SELECT clause or not.	WITHOUT_CLASSIFICATION	0.9999970471240452	WITHOUT_CLASSIFICATION	2.9528759548259934E-6	DESIGN
IDENT might be the name of a class.	WITHOUT_CLASSIFICATION	0.9999246921718643	WITHOUT_CLASSIFICATION	7.53078281357244E-5	DESIGN
TODO!!!	WITHOUT_CLASSIFICATION	0.9388231682412386	WITHOUT_CLASSIFICATION	0.06117683175876143	DESIGN
st.setTimestamp( index, new Timestamp( cal.getTimeInMillis() ), cal ); JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9999998061688318	WITHOUT_CLASSIFICATION	1.9383116832831705E-7	DESIGN
st.setDate( index, new Date( cal.getTimeInMillis() ), cal ); JDK 1.5 only	WITHOUT_CLASSIFICATION	0.999999932788837	WITHOUT_CLASSIFICATION	6.72111629050757E-8	DESIGN
both are Timestamps	WITHOUT_CLASSIFICATION	0.9999991988334171	WITHOUT_CLASSIFICATION	8.011665829157185E-7	DESIGN
at least one is a plain old Date	WITHOUT_CLASSIFICATION	0.9999567690051819	WITHOUT_CLASSIFICATION	4.3230994818009726E-5	DESIGN
noop	WITHOUT_CLASSIFICATION	0.9998614710371456	WITHOUT_CLASSIFICATION	1.3852896285441272E-4	DESIGN
if the corresponding SQL value is NULL, the reader we got is NULL as well	WITHOUT_CLASSIFICATION	0.9999969571797938	WITHOUT_CLASSIFICATION	3.042820206201483E-6	DESIGN
Fetch Reader content up to the end - and put characters in a StringBuffer	WITHOUT_CLASSIFICATION	0.9999499492520462	WITHOUT_CLASSIFICATION	5.0050747953883294E-5	DESIGN
Return StringBuffer content as a large String	WITHOUT_CLASSIFICATION	0.9999963105358464	WITHOUT_CLASSIFICATION	3.6894641537215936E-6	DESIGN
or Types.LONGVARCHAR?	WITHOUT_CLASSIFICATION	0.9999920102109715	WITHOUT_CLASSIFICATION	7.989789028452788E-6	DESIGN
Not called at runtime so doesn't matter if its slow :)	WITHOUT_CLASSIFICATION	0.9999963858454196	WITHOUT_CLASSIFICATION	3.6141545804356083E-6	DESIGN
TODO	WITHOUT_CLASSIFICATION	0.8873364547055537	WITHOUT_CLASSIFICATION	0.11266354529444633	DESIGN
Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.999999979963216	WITHOUT_CLASSIFICATION	2.00367840683122E-8	DESIGN
different nullability rules for pk/fk	WITHOUT_CLASSIFICATION	0.9999878132168648	WITHOUT_CLASSIFICATION	1.2186783135067874E-5	DESIGN
cache this	WITHOUT_CLASSIFICATION	0.9999921727772928	WITHOUT_CLASSIFICATION	7.82722270708243E-6	DESIGN
only really need new array during semiresolve!	WITHOUT_CLASSIFICATION	0.9995089282968816	WITHOUT_CLASSIFICATION	4.910717031183688E-4	DESIGN
Forcefully remove leading ands from where fragments; the grammar will handle adding them	WITHOUT_CLASSIFICATION	0.9999907321502441	WITHOUT_CLASSIFICATION	9.267849755779523E-6	DESIGN
TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9541694147425973	WITHOUT_CLASSIFICATION	0.045830585257402745	DESIGN
Create a new FILTERS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999893528739112	WITHOUT_CLASSIFICATION	1.0647126088713997E-5	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9852400555743543	WITHOUT_CLASSIFICATION	0.014759944425645608	DESIGN
public Object instantiate(Object parent, SessionImplementor session) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9939568464413459	WITHOUT_CLASSIFICATION	0.006043153558654201	DESIGN
nothing to do	WITHOUT_CLASSIFICATION	0.9999964477402175	WITHOUT_CLASSIFICATION	3.552259782498223E-6	DESIGN
nothing to do	WITHOUT_CLASSIFICATION	0.9999964477402175	WITHOUT_CLASSIFICATION	3.552259782498223E-6	DESIGN
VersionType impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Note : simply returns null for seed() and next() as the only known application of binary types for versioning is for use with the TIMESTAMP datatype supported by Sybase and SQL Server, which are completely db-generated values...	WITHOUT_CLASSIFICATION	0.9995153140357487	WITHOUT_CLASSIFICATION	4.846859642512919E-4	DESIGN
lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9997106788763428	WITHOUT_CLASSIFICATION	2.8932112365724887E-4	DESIGN
not really necessary, I guess...	WITHOUT_CLASSIFICATION	0.9998468518809261	WITHOUT_CLASSIFICATION	1.531481190738258E-4	DESIGN
Clobs are ignored by merge() operation	WITHOUT_CLASSIFICATION	0.9999998836178058	WITHOUT_CLASSIFICATION	1.163821942480109E-7	DESIGN
we do not have to worry about queued additions to uninitialized collections, since they can only occur for inverse collections!	WITHOUT_CLASSIFICATION	0.9999538208605929	WITHOUT_CLASSIFICATION	4.617913940713793E-5	DESIGN
collections cannot be compared	WITHOUT_CLASSIFICATION	0.9997539191137322	WITHOUT_CLASSIFICATION	2.4608088626779003E-4	DESIGN
remember the uk value	WITHOUT_CLASSIFICATION	0.9999977651715296	WITHOUT_CLASSIFICATION	2.2348284704730805E-6	DESIGN
NOOP	WITHOUT_CLASSIFICATION	0.9995913883442344	WITHOUT_CLASSIFICATION	4.0861165576556454E-4	DESIGN
processCollectionProperty(token, q.getCollectionPersister(collectionRole), collectionName);	WITHOUT_CLASSIFICATION	0.9999970517754815	WITHOUT_CLASSIFICATION	2.9482245185527333E-6	DESIGN
we must use the "remembered" uk value, since it is not available from the EntityEntry during assembly	WITHOUT_CLASSIFICATION	0.9999851600245769	WITHOUT_CLASSIFICATION	1.4839975422996553E-5	DESIGN
collections don't dirty an unversioned parent entity	WITHOUT_CLASSIFICATION	0.9997140550441199	WITHOUT_CLASSIFICATION	2.8594495588004824E-4	DESIGN
return false;	WITHOUT_CLASSIFICATION	0.9999710276500627	WITHOUT_CLASSIFICATION	2.8972349937225982E-5	DESIGN
This just handles a particular case of component projection, perhaps get rid of it and throw an exception	WITHOUT_CLASSIFICATION	0.9979394347483421	WITHOUT_CLASSIFICATION	0.0020605652516579942	DESIGN
NOTE: we avoid joining to the next table if the named property is just the foreign key value	WITHOUT_CLASSIFICATION	0.9999998067270154	WITHOUT_CLASSIFICATION	1.9327298458623646E-7	DESIGN
the key is the owning entity itself, so get the ID from the key	WITHOUT_CLASSIFICATION	0.9999989814346015	WITHOUT_CLASSIFICATION	1.018565398485163E-6	DESIGN
if the original is a PersistentCollection, and that original was not flagged as dirty, then reset the target's dirty flag here after the copy operation. </p> One thing to be careful of here is a "bare" original collection in which case we should never ever ever reset the dirty flag on the target because we simply do not know...	WITHOUT_CLASSIFICATION	0.9999724645523426	WITHOUT_CLASSIFICATION	2.753544765735498E-5	DESIGN
ignore subselect keywords	WITHOUT_CLASSIFICATION	0.9999999530236218	WITHOUT_CLASSIFICATION	4.6976378185139635E-8	DESIGN
copy elements into newly empty target collection	WITHOUT_CLASSIFICATION	0.999999593837629	WITHOUT_CLASSIFICATION	4.061623710419437E-7	DESIGN
for a null target, or a target which is the same as the original, we need to put the merged elements in a new collection	WITHOUT_CLASSIFICATION	0.999662256814079	WITHOUT_CLASSIFICATION	3.3774318592101984E-4	DESIGN
by default just use an unanticipated capacity since we don't know how to extract the capacity to use from original here...	WITHOUT_CLASSIFICATION	0.999929849250029	WITHOUT_CLASSIFICATION	7.015074997090042E-5	DESIGN
get the elements back into the target making sure to handle dirty flag	WITHOUT_CLASSIFICATION	0.9999908171523902	WITHOUT_CLASSIFICATION	9.182847609701817E-6	DESIGN
check if collection is currently being loaded	WITHOUT_CLASSIFICATION	0.9997152978501515	WITHOUT_CLASSIFICATION	2.8470214984858294E-4	DESIGN
check if it is already completely loaded, but unowned	WITHOUT_CLASSIFICATION	0.9999841826401207	WITHOUT_CLASSIFICATION	1.5817359879367803E-5	DESIGN
cache the actual id of the object, not the value of the property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999959403270982	WITHOUT_CLASSIFICATION	4.059672901791061E-6	DESIGN
TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9541694147425973	WITHOUT_CLASSIFICATION	0.045830585257402745	DESIGN
create a new collection wrapper, to be initialized later	WITHOUT_CLASSIFICATION	0.9999887332558438	WITHOUT_CLASSIFICATION	1.1266744156186274E-5	DESIGN
Some JDBC drivers erroneously return an empty array here for a null DB value :/	WITHOUT_CLASSIFICATION	0.999649262435385	WITHOUT_CLASSIFICATION	3.507375646150522E-4	DESIGN
our column span is the number of columns in the PK	WITHOUT_CLASSIFICATION	0.9999921600616622	WITHOUT_CLASSIFICATION	7.83993833776531E-6	DESIGN
cannot batch fetch by unique key (property-ref associations)	WITHOUT_CLASSIFICATION	0.9999932214303783	WITHOUT_CLASSIFICATION	6.77856962173735E-6	DESIGN
we already know current is not null...	WITHOUT_CLASSIFICATION	0.9999957080987012	WITHOUT_CLASSIFICATION	4.291901298730075E-6	DESIGN
the ids are fully resolved, so compare them with isDirty(), not isModified()	WITHOUT_CLASSIFICATION	0.9999997192870403	WITHOUT_CLASSIFICATION	2.807129595756691E-7	DESIGN
the owner of the association is not the owner of the id	WITHOUT_CLASSIFICATION	0.9999977315409906	WITHOUT_CLASSIFICATION	2.2684590094421794E-6	DESIGN
----------------------------------------------------------- Constructors	WITHOUT_CLASSIFICATION	0.9998850961418119	WITHOUT_CLASSIFICATION	1.1490385818814634E-4	DESIGN
----------------------------------------------------- Instance Variables	WITHOUT_CLASSIFICATION	0.9997608328026313	WITHOUT_CLASSIFICATION	2.3916719736873681E-4	DESIGN
public static JDBCException newJDBCException(String string, SQLException root, String sql) { string = string + " [" + sql + ']'; log.error(string, root); logExceptions(root); return new JDBCException(string, root, sql); } public static JDBCException newJDBCException(String string, SQLException root) { log.error(string, root); logExceptions(root); return new JDBCException(string, root); }	WITHOUT_CLASSIFICATION	0.9999999836475121	WITHOUT_CLASSIFICATION	1.635248796108422E-8	DESIGN
--------------------------------------------------------- Public Methods	WITHOUT_CLASSIFICATION	0.9999481476804707	WITHOUT_CLASSIFICATION	5.1852319529312234E-5	DESIGN
Compare the two maps for equality	WITHOUT_CLASSIFICATION	0.9998812352017665	WITHOUT_CLASSIFICATION	1.1876479823354478E-4	DESIGN
Simple tests that require no synchronization	WITHOUT_CLASSIFICATION	0.9999855097592739	WITHOUT_CLASSIFICATION	1.449024072619048E-5	DESIGN
Sybase fail if we don't do that, sigh...	WITHOUT_CLASSIFICATION	0.9999483781904158	WITHOUT_CLASSIFICATION	5.162180958415737E-5	DESIGN
Handles things like: a and b or c a and ( b or c ) not a and not b not ( a and b ) x between y and z (overloaded "and") x in ( a, b, c ) (overloaded brackets) not not a a is not null (overloaded "not") etc...... and expressions like foo = bar (maps to: foo.id = bar.id) foo.Bar = 'foo' (maps to: foo.bar = 'foo') foo.Bar.Baz = 1.0 (maps to: foo.bar = bar.id and bar.baz = 1.0) 1.0 = foo.Bar.Baz (maps to: bar.baz = 1.0 and foo.Bar = bar.id) foo.Bar.Baz = a.B.C (maps to: bar.Baz = b.C and foo.Bar = bar.id and a.B = b.id) foo.Bar.Baz + a.B.C (maps to: bar.Baz + b.C and foo.Bar = bar.id and a.B = b.id) ( foo.Bar.Baz + 1.0 ) < 2.0 (maps to: ( bar.Baz + 1.0 ) < 2.0 and foo.Bar = bar.id)	WITHOUT_CLASSIFICATION	0.999404949837909	WITHOUT_CLASSIFICATION	5.950501620910521E-4	DESIGN
release the jdk internal caches everytime to ensure this plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9991684061567815	WITHOUT_CLASSIFICATION	8.315938432186298E-4	DESIGN
release the jdk internal caches everytime to ensure this plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9991684061567815	WITHOUT_CLASSIFICATION	8.315938432186298E-4	DESIGN
try to "pretty print" it	WITHOUT_CLASSIFICATION	0.9999828864887854	WITHOUT_CLASSIFICATION	1.711351121461971E-5	DESIGN
otherwise, just dump it	WITHOUT_CLASSIFICATION	0.9999966757706089	WITHOUT_CLASSIFICATION	3.324229391112735E-6	DESIGN
its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9999933646737876	WITHOUT_CLASSIFICATION	6.635326212331886E-6	DESIGN
its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9999933646737876	WITHOUT_CLASSIFICATION	6.635326212331886E-6	DESIGN
use default behavior	WITHOUT_CLASSIFICATION	0.9999868494764229	WITHOUT_CLASSIFICATION	1.3150523577055027E-5	DESIGN
NOTE: early return	WITHOUT_CLASSIFICATION	0.9999987537626089	WITHOUT_CLASSIFICATION	1.246237390944918E-6	DESIGN
the MRU cache used to keep hard references to the most recently used query plans; note : LRU here is a bit of a misnomer, it indicates that LRU entries are removed, the actual kept entries are the MRU entries	WITHOUT_CLASSIFICATION	0.9972224445146399	WITHOUT_CLASSIFICATION	0.002777555485360156	DESIGN
we want to be able to just use the defaults, if JNDI environment properties are not supplied so don't put null in anywhere	WITHOUT_CLASSIFICATION	0.9988969556298724	WITHOUT_CLASSIFICATION	0.0011030443701276773	DESIGN
Clone -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999229278048981	WITHOUT_CLASSIFICATION	7.70721951019358E-5	DESIGN
Serialize -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999271996451846	WITHOUT_CLASSIFICATION	7.28003548154394E-5	DESIGN
stream closed in the finally	WITHOUT_CLASSIFICATION	0.999999978813738	WITHOUT_CLASSIFICATION	2.118626194206375E-8	DESIGN
stream closed in the finally	WITHOUT_CLASSIFICATION	0.999999978813738	WITHOUT_CLASSIFICATION	2.118626194206375E-8	DESIGN
Deserialize -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999751647226731	WITHOUT_CLASSIFICATION	2.4835277326865582E-5	DESIGN
static methods only - hide constructor	WITHOUT_CLASSIFICATION	0.9998745301235135	WITHOUT_CLASSIFICATION	1.2546987648651947E-4	DESIGN
&& !('_'==character)	WITHOUT_CLASSIFICATION	0.9999987614344948	WITHOUT_CLASSIFICATION	1.2385655051276426E-6	DESIGN
returnign null!	WITHOUT_CLASSIFICATION	0.999997819336008	WITHOUT_CLASSIFICATION	2.1806639920296156E-6	DESIGN
returnign null!	WITHOUT_CLASSIFICATION	0.999997819336008	WITHOUT_CLASSIFICATION	2.1806639920296156E-6	DESIGN
includes last '.'	WITHOUT_CLASSIFICATION	0.9999992221692036	WITHOUT_CLASSIFICATION	7.778307964167995E-7	DESIGN
+1 to include the following '.'	WITHOUT_CLASSIFICATION	0.999997122703019	WITHOUT_CLASSIFICATION	2.877296980984596E-6	DESIGN
Impl note: takes advantage of the fact that an escpaed single quote embedded within a quote-block can really be handled as two seperate quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9997872315279657	WITHOUT_CLASSIFICATION	2.1276847203443894E-4	DESIGN
first time we find match!	WITHOUT_CLASSIFICATION	0.9999979958010089	WITHOUT_CLASSIFICATION	2.0041989911274523E-6	DESIGN
entityNames may now include slashes for the representations classname may be an inner class	WITHOUT_CLASSIFICATION	0.9996209729555413	WITHOUT_CLASSIFICATION	3.790270444586749E-4	DESIGN
wrapped iterators	WITHOUT_CLASSIFICATION	0.9999998748348314	WITHOUT_CLASSIFICATION	1.2516516864492146E-7	DESIGN
index of current iterator in the wrapped iterators array	WITHOUT_CLASSIFICATION	0.9999970424678829	WITHOUT_CLASSIFICATION	2.9575321169932576E-6	DESIGN
the current iterator	WITHOUT_CLASSIFICATION	0.9999997953416698	WITHOUT_CLASSIFICATION	2.0465833022338436E-7	DESIGN
the last used iterator	WITHOUT_CLASSIFICATION	0.9999998630567764	WITHOUT_CLASSIFICATION	1.3694322370335114E-7	DESIGN
it was a boolean expression	WITHOUT_CLASSIFICATION	0.9999705533127494	WITHOUT_CLASSIFICATION	2.9446687250526777E-5	DESIGN
public static Object[] clone(Class elementClass, Object[] array) {Object[] result = (Object[]) Array.newInstance( elementClass, array.length );System.arraycopy(array, 0, result, 0, array.length);return result;}	WITHOUT_CLASSIFICATION	0.9999994961089086	WITHOUT_CLASSIFICATION	5.038910914160293E-7	DESIGN
call this before any Iterator method to make sure that the current Iterator is not exhausted	WITHOUT_CLASSIFICATION	0.96228706418766	WITHOUT_CLASSIFICATION	0.03771293581234009	DESIGN
doable if needed	WITHOUT_CLASSIFICATION	0.999906943979187	WITHOUT_CLASSIFICATION	9.305602081305568E-5	DESIGN
set last used iterator here, in case the user calls remove before calling hasNext() or next() (although they shouldn't)	WITHOUT_CLASSIFICATION	0.9999997571809726	WITHOUT_CLASSIFICATION	2.428190274355754E-7	DESIGN
peek ahead	WITHOUT_CLASSIFICATION	0.9999901561562621	WITHOUT_CLASSIFICATION	9.843843737973347E-6	DESIGN
if we reach the end of the string w/o finding the matching end, that is an exception	WITHOUT_CLASSIFICATION	0.9999963440593671	WITHOUT_CLASSIFICATION	3.655940632940271E-6	DESIGN
we have a placeholder, spin forward till we find the end	WITHOUT_CLASSIFICATION	0.9999629791671711	WITHOUT_CLASSIFICATION	3.702083282885046E-5	DESIGN
make sure spinning forward did not put us past the end of the buffer...	WITHOUT_CLASSIFICATION	0.9999964988732063	WITHOUT_CLASSIFICATION	3.5011267937734363E-6	DESIGN
First, try to locate this resource through the current context classloader.	WITHOUT_CLASSIFICATION	0.999997423153014	WITHOUT_CLASSIFICATION	2.5768469860047968E-6	DESIGN
Next, try to locate this resource through this class's classloader	WITHOUT_CLASSIFICATION	0.9999570790478245	WITHOUT_CLASSIFICATION	4.29209521754026E-5	DESIGN
Next, try to locate this resource through the system classloader	WITHOUT_CLASSIFICATION	0.9999957885665952	WITHOUT_CLASSIFICATION	4.2114334047918645E-6	DESIGN
Anywhere else we should look?	WITHOUT_CLASSIFICATION	0.9935561069688532	WITHOUT_CLASSIFICATION	0.006443893031146753	DESIGN
would need an IdentitySet for this!	WITHOUT_CLASSIFICATION	0.9893115931021145	WITHOUT_CLASSIFICATION	0.010688406897885408	DESIGN
Arrays.asList doesn't do primitive arrays	WITHOUT_CLASSIFICATION	0.9999992607843724	WITHOUT_CLASSIFICATION	7.392156276126589E-7	DESIGN
faster?	WITHOUT_CLASSIFICATION	0.9997769543634821	WITHOUT_CLASSIFICATION	2.2304563651787202E-4	DESIGN
the name of a class	WITHOUT_CLASSIFICATION	0.9999989687546453	WITHOUT_CLASSIFICATION	1.0312453546220885E-6	DESIGN
Its the listener class name	WITHOUT_CLASSIFICATION	0.9999988594382699	WITHOUT_CLASSIFICATION	1.1405617300232828E-6	DESIGN
allow 9,8,7,6,5,4,3,2,1	WITHOUT_CLASSIFICATION	0.9999679972551164	WITHOUT_CLASSIFICATION	3.200274488352441E-5	DESIGN
default to element set if no elements() specified	WITHOUT_CLASSIFICATION	0.9999996570409252	WITHOUT_CLASSIFICATION	3.4295907483378935E-7	DESIGN
look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999962453399212	WITHOUT_CLASSIFICATION	3.7546600788251363E-6	DESIGN
in case we were deserialized in a different JVM, look for an instance with the same name (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.999987495075846	WITHOUT_CLASSIFICATION	1.2504924154115173E-5	DESIGN
first, lets determine whether to apply cglib or javassist based instrumentation...	WITHOUT_CLASSIFICATION	0.9886483612990611	WITHOUT_CLASSIFICATION	0.01135163870093892	DESIGN
Make sure we don't override previous set values	WITHOUT_CLASSIFICATION	0.9999731857767087	WITHOUT_CLASSIFICATION	2.6814223291248912E-5	DESIGN
entirely optional!!	WITHOUT_CLASSIFICATION	0.9999976007373609	WITHOUT_CLASSIFICATION	2.399262639117966E-6	DESIGN
Its the listener instance (or better be)	WITHOUT_CLASSIFICATION	0.9999605551643236	WITHOUT_CLASSIFICATION	3.944483567642059E-5	DESIGN
context.unbind(boundName);	WITHOUT_CLASSIFICATION	0.9999833031923308	WITHOUT_CLASSIFICATION	1.6696807669281096E-5	DESIGN
readResolveObject	WITHOUT_CLASSIFICATION	0.9999940413918877	WITHOUT_CLASSIFICATION	5.9586081122752635E-6	DESIGN
cfg.setProperty("hibernate.show_sql", "true");	WITHOUT_CLASSIFICATION	0.9999999645600228	WITHOUT_CLASSIFICATION	3.543997722188181E-8	DESIGN
Defensive, convenience methods	WITHOUT_CLASSIFICATION	0.999992509649454	WITHOUT_CLASSIFICATION	7.490350546031971E-6	DESIGN
Create the SessionFactory from hibernate.cfg.xml	WITHOUT_CLASSIFICATION	0.9999948716898871	WITHOUT_CLASSIFICATION	5.128310112818341E-6	DESIGN
Make sure you log the exception, as it might be swallowed	WITHOUT_CLASSIFICATION	0.9999132547670488	WITHOUT_CLASSIFICATION	8.67452329511419E-5	DESIGN
Begin unit of work	WITHOUT_CLASSIFICATION	0.9999950271428297	WITHOUT_CLASSIFICATION	4.972857170266724E-6	DESIGN
Write HTML header	WITHOUT_CLASSIFICATION	0.9999995700800489	WITHOUT_CLASSIFICATION	4.299199510837829E-7	DESIGN
Handle actions	WITHOUT_CLASSIFICATION	0.9999746921438483	WITHOUT_CLASSIFICATION	2.530785615163639E-5	DESIGN
Print page	WITHOUT_CLASSIFICATION	0.9999985077915083	WITHOUT_CLASSIFICATION	1.4922084916655274E-6	DESIGN
Write HTML footer	WITHOUT_CLASSIFICATION	0.9999996848961352	WITHOUT_CLASSIFICATION	3.1510386480297225E-7	DESIGN
End unit of work	WITHOUT_CLASSIFICATION	0.999984989708303	WITHOUT_CLASSIFICATION	1.5010291696889174E-5	DESIGN
Start the session to be used for this request	WITHOUT_CLASSIFICATION	0.9996175646203097	WITHOUT_CLASSIFICATION	3.824353796902848E-4	DESIGN
make the session available to the session factory's "current context"	WITHOUT_CLASSIFICATION	0.9988384191532219	WITHOUT_CLASSIFICATION	0.0011615808467780589	DESIGN
pass control along to the rest of the processing chain	WITHOUT_CLASSIFICATION	0.9999967661988776	WITHOUT_CLASSIFICATION	3.2338011225087126E-6	DESIGN
remove session from "current context"	WITHOUT_CLASSIFICATION	0.9982739127862267	WITHOUT_CLASSIFICATION	0.0017260872137733658	DESIGN
Eager fetch the collection so we can use it detached	WITHOUT_CLASSIFICATION	0.9999365152228756	WITHOUT_CLASSIFICATION	6.348477712435295E-5	DESIGN
If we want to handle it bidirectional and detached, we also need to load this collection with an eager outer-join fetch, this time with Criteria and not HQL:	WITHOUT_CLASSIFICATION	0.9996440256395543	WITHOUT_CLASSIFICATION	3.5597436044570844E-4	DESIGN
Event anEvent = (Event) session .createCriteria(Event.class).setFetchMode("participants", FetchMode.JOIN) .add( Expression.eq("id", eventId) ) .uniqueResult(); Eager fetch the colleciton so we can use it detached	WITHOUT_CLASSIFICATION	0.9999998345003147	WITHOUT_CLASSIFICATION	1.6549968524754659E-7	DESIGN
End of first unit of work	WITHOUT_CLASSIFICATION	0.9999825441296272	WITHOUT_CLASSIFICATION	1.7455870372879287E-5	DESIGN
or bidirectional safety method, setting both sides: aPerson.addToEvent(anEvent);	WITHOUT_CLASSIFICATION	0.9969252089144837	WITHOUT_CLASSIFICATION	0.003074791085516293	DESIGN
Begin second unit of work	WITHOUT_CLASSIFICATION	0.9999344337025049	WITHOUT_CLASSIFICATION	6.5566297495091E-5	DESIGN
Reattachment of aPerson	WITHOUT_CLASSIFICATION	0.999999167833071	WITHOUT_CLASSIFICATION	8.321669290951684E-7	DESIGN
The getEmailAddresses() might trigger a lazy load of the collection	WITHOUT_CLASSIFICATION	0.9999520597132739	WITHOUT_CLASSIFICATION	4.794028672612489E-5	DESIGN
We need our tm, so get it now and avoid doing other work if there is a problem	WITHOUT_CLASSIFICATION	0.9999940878653147	WITHOUT_CLASSIFICATION	5.912134685186373E-6	DESIGN
Don't hold the JBC node lock throughout the tx, as that prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999664484854602	WITHOUT_CLASSIFICATION	3.3551514539701636E-5	DESIGN
Don't hold the JBC node lock throughout the tx, as that prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999664484854602	WITHOUT_CLASSIFICATION	3.3551514539701636E-5	DESIGN
JBC put a version in the node when it created as part of some internal operation. We are always newer, but if the JBC version is > 1 something odd has happened	WITHOUT_CLASSIFICATION	0.9999999293335602	WITHOUT_CLASSIFICATION	7.066643984415265E-8	DESIGN
swaldman 2006-08-28: define c3p0-style configuration parameters for properties with hibernate-specific overrides to detect and warn about conflicting declarations	WITHOUT_CLASSIFICATION	0.8692530080025397	WITHOUT_CLASSIFICATION	0.13074699199746037	DESIGN
Not null if the Isolation level has been specified in the configuration file. Otherwise, it is left to the Driver's default value.	WITHOUT_CLASSIFICATION	0.9999957162747866	WITHOUT_CLASSIFICATION	4.283725213440811E-6	DESIGN
Configured outside of Hibernate (i.e. Servlet container, or Java Bean Container already has Proxool pools running, and this provider is to just borrow one of these	WITHOUT_CLASSIFICATION	0.9999915607840195	WITHOUT_CLASSIFICATION	8.439215980568896E-6	DESIGN
If you're closing down the ConnectionProvider chances are an is not a real big deal, just warn	WITHOUT_CLASSIFICATION	0.999999325589519	WITHOUT_CLASSIFICATION	6.744104811306859E-7	DESIGN
(AS is always optional, for consistency with SQL/OQL)	WITHOUT_CLASSIFICATION	0.9999853186328203	WITHOUT_CLASSIFICATION	1.4681367179709759E-5	DESIGN
process the "new" HQL style where aliases are assigned _after_ the class name or path expression ie. using the AS construction	WITHOUT_CLASSIFICATION	0.9975737670443969	WITHOUT_CLASSIFICATION	0.0024262329556030237	DESIGN
the loaded owner will be set to null after the collection is removed, so capture its value as the affected owner so it is accessible to both pre- and post- events	WITHOUT_CLASSIFICATION	0.9999477334542964	WITHOUT_CLASSIFICATION	5.2266545703579124E-5	DESIGN
is a primitive type invokespecial	WITHOUT_CLASSIFICATION	0.9999708575693336	WITHOUT_CLASSIFICATION	2.9142430666360602E-5	DESIGN
array of primitive type do nothing	WITHOUT_CLASSIFICATION	0.9999921452893077	WITHOUT_CLASSIFICATION	7.854710692265408E-6	DESIGN
handle a path expression or class name that appears at the start, in the "new" HQL style or an alias that appears at the start in the "old" HQL style	WITHOUT_CLASSIFICATION	0.9999819423427468	WITHOUT_CLASSIFICATION	1.8057657253207412E-5	DESIGN
handle <=, >=, !=, is not, not between, not in	WITHOUT_CLASSIFICATION	0.9999631326148928	WITHOUT_CLASSIFICATION	3.686738510727003E-5	DESIGN
The loop ensures atomicity of the select + update even for no transaction or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999968334247518	WITHOUT_CLASSIFICATION	3.166575248175636E-6	DESIGN
transfer an explicitly defined entity name handle the lazy attribute	WITHOUT_CLASSIFICATION	0.9997707692435114	WITHOUT_CLASSIFICATION	2.2923075648855433E-4	DESIGN
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999092891482726	WITHOUT_CLASSIFICATION	9.071085172733824E-5	DESIGN
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999092891482726	WITHOUT_CLASSIFICATION	9.071085172733824E-5	DESIGN
get meta's from <joined-subclass>	WITHOUT_CLASSIFICATION	0.9999918726189688	WITHOUT_CLASSIFICATION	8.127381031236355E-6	DESIGN
parameters on the property mapping should override parameters in the typedef	WITHOUT_CLASSIFICATION	0.994242613680232	WITHOUT_CLASSIFICATION	0.0057573863197679515	DESIGN
fetch="join" overrides default laziness fetch="join" overrides default laziness	WITHOUT_CLASSIFICATION	0.9999975805219729	WITHOUT_CLASSIFICATION	2.4194780270576197E-6	DESIGN
NOTE SPECIAL CASE: default to join and non-lazy for the "second join" of the many-to-many	WITHOUT_CLASSIFICATION	0.9999945737520369	WITHOUT_CLASSIFICATION	5.426247963173119E-6	DESIGN
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999717978692584	WITHOUT_CLASSIFICATION	2.8202130741688846E-5	DESIGN
state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999596812251893	WITHOUT_CLASSIFICATION	4.03187748106668E-5	DESIGN
void setComponentTuplizerFactory(ComponentTuplizerFactory componentTuplizerFactory) { this.componentTuplizerFactory = componentTuplizerFactory; }	WITHOUT_CLASSIFICATION	0.9999642692080973	WITHOUT_CLASSIFICATION	3.573079190272748E-5	DESIGN
element index -> id	WITHOUT_CLASSIFICATION	0.9999984892185081	WITHOUT_CLASSIFICATION	1.5107814918108683E-6	DESIGN
note that it might be better to iterate the snapshot but this is safe, assuming the user implements equals() properly, as required by the Set contract!	WITHOUT_CLASSIFICATION	0.9952993932819908	WITHOUT_CLASSIFICATION	0.004700606718009254	DESIGN
collections detect changes made via their public interface and mark themselves as dirty as a performance optimization	WITHOUT_CLASSIFICATION	0.999919655829587	WITHOUT_CLASSIFICATION	8.034417041303582E-5	DESIGN
essentially, if the real session is closed allow any method call to pass through since the real session will complain by throwing an appropriate exception; NOTE that allowing close() above has the same basic effect, but we capture that there simply to perform the unbind...	WITHOUT_CLASSIFICATION	0.9705900631655244	WITHOUT_CLASSIFICATION	0.029409936834475472	DESIGN
The default SQLExceptionConverter for all dialects is based on SQLState since SQLErrorCode is extremely vendor-specific. Specific Dialects may override to return whatever is most appropriate for that vendor.	WITHOUT_CLASSIFICATION	0.9998823786166519	WITHOUT_CLASSIFICATION	1.1762138334815769E-4	DESIGN
only necessary for postgre < 7.4 http:anoncvs.postgresql.org/cvsweb.cgi/pgsql/doc/src/sgml/ref/create_sequence.sgml	WITHOUT_CLASSIFICATION	0.9999997884138381	WITHOUT_CLASSIFICATION	2.1158616193881683E-7	DESIGN
select topic, syntax from information_schema.help where section like 'Function%' order by section, topic see also -> http:www.h2database.com/html/functions.html	WITHOUT_CLASSIFICATION	0.9999792579390658	WITHOUT_CLASSIFICATION	2.0742060934129615E-5	DESIGN
registerColumnType(Types.VARBINARY, "CHARACTER($l)"); registerColumnType(Types.BLOB, "CHARACTER($l)" ); For use prior to CP 11.0 registerColumnType(Types.CLOB, "CHARACTER($l)" );	WITHOUT_CLASSIFICATION	0.9999779041334529	WITHOUT_CLASSIFICATION	2.2095866547122972E-5	DESIGN
the BLOB type requires a size arguement - this defaults to bytes - no arg defaults to 1 whole byte! other argument mods include K - kilobyte, M - megabyte, G - gigabyte. refer to the PBdevelopers guide for more info.	WITHOUT_CLASSIFICATION	0.8588131185008527	WITHOUT_CLASSIFICATION	0.14118688149914724	DESIGN
We must return a valid RDMS/RSA command from this method to prevent RDMS/RSA from issuing ERROR 400	WITHOUT_CLASSIFICATION	0.973366782018681	WITHOUT_CLASSIFICATION	0.02663321798131901	DESIGN
Oracle driver reports to support getGeneratedKeys(), but they only support the version taking an array of the names of the columns to be returned (via its RETURNING clause). No other driver seems to support this overloaded version.	WITHOUT_CLASSIFICATION	0.9756697832065252	WITHOUT_CLASSIFICATION	0.024330216793474888	DESIGN
add the comment nest the main query in an outer select add the rownnumber bit into the outer query select list	WITHOUT_CLASSIFICATION	0.9999997124857415	WITHOUT_CLASSIFICATION	2.875142586123265E-7	DESIGN
You may still have other ResultSets or update counts left to process here but you can't do it now or the ResultSet you just got will be closed	WITHOUT_CLASSIFICATION	0.9999987179182299	WITHOUT_CLASSIFICATION	1.2820817701253983E-6	DESIGN
Note: For object <-> SQL datatype mappings see: Configuration Manager | Advanced | SQL | System DDL Datatype Mappings TBDregisterColumnType(Types.BINARY, "binary($1)"); changed 08-11-2005, jsl	WITHOUT_CLASSIFICATION	0.9990561302561205	WITHOUT_CLASSIFICATION	9.438697438794501E-4	DESIGN
TRIM(end_keyword string-expression-1 FROM string-expression-2) use Hibernate implementation "From" is one of the parameters they pass in position ?3 registerFunction( "trim", new SQLFunctionTemplate(Hibernate.STRING, "trim(?1 ?2 from ?3)") );	WITHOUT_CLASSIFICATION	0.9999984895483149	WITHOUT_CLASSIFICATION	1.5104516851047354E-6	DESIGN
Whether this dialect has an Identity clause added to the data type or a completely seperate identity data type	WITHOUT_CLASSIFICATION	0.9977529826123098	WITHOUT_CLASSIFICATION	0.0022470173876901573	DESIGN
According to both the ANSI-SQL and JPA specs, trim takes a variable number of parameters between 1 and 4. at least one paramer (trimSource) is required. From the SQL spec: <trim function> ::= TRIM <left paren> <trim operands> <right paren> <trim operands> ::= [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> <trim specification> ::= LEADING | TRAILING | BOTH If <trim specification> is omitted, BOTH is assumed. If <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999919371416912	WITHOUT_CLASSIFICATION	8.062858308827749E-6	DESIGN
/ Prepare persisters and link them up with their cache region/access-strategy	WITHOUT_CLASSIFICATION	0.9999783516698314	WITHOUT_CLASSIFICATION	2.164833016857558E-5	DESIGN
Named Queries:	WITHOUT_CLASSIFICATION	0.9999899240644087	WITHOUT_CLASSIFICATION	1.0075935591358206E-5	DESIGN
this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9996412644250012	WITHOUT_CLASSIFICATION	3.5873557499869997E-4	DESIGN
does not handle arrays (thats ok, cos they can't be lazy) or newly instantiated collections, so we can do the cast	WITHOUT_CLASSIFICATION	0.999920559375954	WITHOUT_CLASSIFICATION	7.944062404596342E-5	DESIGN
collection deletions are a special case since update() can add deletions of collections not loaded by the session.	WITHOUT_CLASSIFICATION	0.9999999973938694	WITHOUT_CLASSIFICATION	2.606130719531755E-9	DESIGN
we can do the cast since orphan-delete does not apply to: 1. newly instantiated collections 2. arrays (we can't track orphans for detached arrays)	WITHOUT_CLASSIFICATION	0.9995190043864818	WITHOUT_CLASSIFICATION	4.809956135181473E-4	DESIGN
if the natural-id is marked as non-mutable, it is not retrieved during a normal database-snapshot operation...	WITHOUT_CLASSIFICATION	0.9999979194599988	WITHOUT_CLASSIFICATION	2.080540001096447E-6	DESIGN
watch out for a case where old is still referenced somewhere in the object graph! (which is a user error)	WITHOUT_CLASSIFICATION	0.9999896804485274	WITHOUT_CLASSIFICATION	1.0319551472603776E-5	DESIGN
slice, to get the columns for this component property	WITHOUT_CLASSIFICATION	0.9746560802688242	WITHOUT_CLASSIFICATION	0.025343919731175748	DESIGN
int result = 17; result = 37 result + type.hashCode(); result = 37 result + ( value==null ? 0 : value.hashCode() ); return result;	WITHOUT_CLASSIFICATION	0.9999942208065802	WITHOUT_CLASSIFICATION	5.779193419882593E-6	DESIGN
The CollectionEntry.isReached() stuff is just to detect any silly users who set up circular or shared references between/to collections.	WITHOUT_CLASSIFICATION	0.9999484702367303	WITHOUT_CLASSIFICATION	5.1529763269863465E-5	DESIGN
detached collection wrappers that get found + reattached during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999839554381227	WITHOUT_CLASSIFICATION	1.604456187727865E-5	DESIGN
The unique property value represented here may or may not be serializable, so we do an explicit check here in order to generate a better error message	WITHOUT_CLASSIFICATION	0.9935753692998371	WITHOUT_CLASSIFICATION	0.006424630700162873	DESIGN
if the version of a newly instantiated object is not the same as the version seed value, use that as the unsaved-value	WITHOUT_CLASSIFICATION	0.999416533399052	WITHOUT_CLASSIFICATION	5.834666009478859E-4	DESIGN
ie. we never have to null out a reference to an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999996051420523	WITHOUT_CLASSIFICATION	3.948579476600487E-7	DESIGN
ignore this row, the collection is in process of being loaded somewhere further "up" the stack	WITHOUT_CLASSIFICATION	0.9997968600900118	WITHOUT_CLASSIFICATION	2.0313990998820178E-4	DESIGN
Entity load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ currently, not yet used...	WITHOUT_CLASSIFICATION	0.9999957776997273	WITHOUT_CLASSIFICATION	4.2223002727444195E-6	DESIGN
should be ok performance-wise to generate new delegate instances for each request since these are locally stack-scoped. Besides, it makes the code much easier to read than the old TransactionHelper stuff...	WITHOUT_CLASSIFICATION	0.6495857016283184	DESIGN	0.35041429837168153	WITHOUT_CLASSIFICATION
this implementation is supposed to tolerate incorrect unsaved-value mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.8655149971081385	WITHOUT_CLASSIFICATION	0.13448500289186138	DESIGN
this implementation is supposed to tolerate incorrect unsaved-value mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.8655149971081385	WITHOUT_CLASSIFICATION	0.13448500289186138	DESIGN
wrap up any new collections directly referenced by the object or its components	WITHOUT_CLASSIFICATION	0.9999950814712021	WITHOUT_CLASSIFICATION	4.918528797994012E-6	DESIGN
remove any snapshot, not really for memory management purposes, but rather because it might now be stale, and there is no longer any EntityEntry to take precedence This is now handled by removeEntity() session.getPersistenceContext().removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.8813160782808064	WITHOUT_CLASSIFICATION	0.11868392171919365	DESIGN
skip this check for composite-ids relating to dom4j entity-mode; alternatively, we could add a check to make sure the incoming id value is an instance of Element...	WITHOUT_CLASSIFICATION	0.9999791999991197	WITHOUT_CLASSIFICATION	2.080000088035564E-5	DESIGN
upgrade the lock if necessary: lock(result, lockMode);	WITHOUT_CLASSIFICATION	0.9993282404708396	WITHOUT_CLASSIFICATION	6.717595291603562E-4	DESIGN
now, any collections that are initialized inside this block do not get updated - they are ignored until the next flush	WITHOUT_CLASSIFICATION	0.9999864861657188	WITHOUT_CLASSIFICATION	1.3513834281093754E-5	DESIGN
we must clone embedded composite identifiers, or we will get back the same instance that we pass in	WITHOUT_CLASSIFICATION	0.9995463207756047	WITHOUT_CLASSIFICATION	4.536792243953332E-4	DESIGN
Sub-insertions should occur before containing insertion so Try to do the callback now	WITHOUT_CLASSIFICATION	0.9684428680926157	WITHOUT_CLASSIFICATION	0.031557131907384295	DESIGN
the entity is not associated with the session, so try interceptor and unsaved-value	WITHOUT_CLASSIFICATION	0.9999997714936253	WITHOUT_CLASSIFICATION	2.2850637479268522E-7	DESIGN
scan the query string for class names appearing in the from clause and replace with all persistent implementors of the class/interface, returning multiple query strings (make sure we don't pick up a class in the select clause!)	WITHOUT_CLASSIFICATION	0.7248819352263984	DESIGN	0.27511806477360157	WITHOUT_CLASSIFICATION
save() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995407874783	WITHOUT_CLASSIFICATION	4.5921252167781406E-7	DESIGN
evict() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992118385469	WITHOUT_CLASSIFICATION	7.881614531487161E-7	DESIGN
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9875704920946237	WITHOUT_CLASSIFICATION	0.0124295079053763	DESIGN
if it is an uninitialized proxy, pointing with this session, then when it is accessed, the underlying instance will be "contained"	WITHOUT_CLASSIFICATION	0.9999034903069373	WITHOUT_CLASSIFICATION	9.650969306275464E-5	DESIGN
Generate an explicit join for the root dot node. The implied joins will be collected and passed up to the root dot node.	WITHOUT_CLASSIFICATION	0.999982339979146	WITHOUT_CLASSIFICATION	1.766002085399078E-5	DESIGN
A session is considered to contain an entity only if the entity has an entry in the session's persistence context and the entry reports that the entity has not been removed	WITHOUT_CLASSIFICATION	0.9992343211221668	WITHOUT_CLASSIFICATION	7.656788778331256E-4	DESIGN
Does the collection referenced by this FromElement specify an order-by attribute? If so, attach it to the query's order-by	WITHOUT_CLASSIFICATION	0.9999418446927529	WITHOUT_CLASSIFICATION	5.815530724703212E-5	DESIGN
... and the token could be an identifer and the error is a mismatched token error ...	WITHOUT_CLASSIFICATION	0.9999942287592777	WITHOUT_CLASSIFICATION	5.7712407223993015E-6	DESIGN
If a where clause was specified in the update/delete query, use it to limit the returned ids here...	WITHOUT_CLASSIFICATION	0.9999948219784621	WITHOUT_CLASSIFICATION	5.178021537798581E-6	DESIGN
int parameterStart = getWalker().getNumberOfParametersInSetClause(); List allParams = getIdSelectParameterSpecifications(); Iterator whereParams = allParams.subList( parameterStart, allParams.size() ).iterator();	WITHOUT_CLASSIFICATION	0.999999841430882	WITHOUT_CLASSIFICATION	1.5856911789205748E-7	DESIGN
Default implementation: If this node has a data type, and that data type is not an association, then this is scalar.	WITHOUT_CLASSIFICATION	0.9534876165640229	WITHOUT_CLASSIFICATION	0.046512383435977016	DESIGN
Resolve the LHS fully, generate implicit joins. Pass in the property name so that the resolver can discover foreign key (id) properties.	WITHOUT_CLASSIFICATION	0.9999998935245125	WITHOUT_CLASSIFICATION	1.0647548756501806E-7	DESIGN
If the propertyType is null and there isn't a parent, just stop now... there was a problem resolving the node anyway.	WITHOUT_CLASSIFICATION	0.9999974854924466	WITHOUT_CLASSIFICATION	2.514507553449367E-6	DESIGN
We do not look for an existing join on the same path, because it makes sense to join twice on the same collection role	WITHOUT_CLASSIFICATION	0.9989659155363345	WITHOUT_CLASSIFICATION	0.0010340844636654784	DESIGN
our parent is another dot node, meaning we are being further dereferenced. thus we need to generate a join unless the parent refers to the associated entity's PK (because 'our' table would know the FK).	WITHOUT_CLASSIFICATION	0.9999939180823716	WITHOUT_CLASSIFICATION	6.081917628385619E-6	DESIGN
public final Currency getCurrency(int col) throws HibernateException {return (Currency) get(col);}	WITHOUT_CLASSIFICATION	0.9998399421741629	WITHOUT_CLASSIFICATION	1.6005782583700137E-4	DESIGN
here, we have two possibilities: 1) the property-name matches the explicitly identifier property name 2) the property-name matches the implicit 'id' property name	WITHOUT_CLASSIFICATION	0.9999993619174189	WITHOUT_CLASSIFICATION	6.380825809948418E-7	DESIGN
Set the unresolved path in this node and the parent. Set the text for the parent.	WITHOUT_CLASSIFICATION	0.999980271464633	WITHOUT_CLASSIFICATION	1.972853536706034E-5	DESIGN
Get the first child to be considered. Sub-classes may do this differently in order to skip nodes that are not select expressions (e.g. DISTINCT).	WITHOUT_CLASSIFICATION	0.9958782236584868	WITHOUT_CLASSIFICATION	0.004121776341513239	DESIGN
If this is an entity and the property is the identifier property, then use getIdentifierType(). Note that the propertyName.equals( propertyPath ) checks whether we have a component key reference, where the component class property name is the same as the entity id property name; if the two are not equal, this is the case and we'd need to "fall through" to using the property mapping.	WITHOUT_CLASSIFICATION	0.999971174628561	WITHOUT_CLASSIFICATION	2.8825371439014816E-5	DESIGN
for a subquery, the alias to use depends on a few things (we already know this is not an overall SELECT): 1) if this FROM_ELEMENT represents a correlation to the outer-most query A) if the outer query represents a multi-table persister, we need to use the given alias in anticipation of one of the multi-table executors being used (as this subquery will actually be used in the "id select" phase of that multi-table executor) B) otherwise, we need to use the persister's table name as the column qualification 2) otherwise (not correlated), use the given alias	WITHOUT_CLASSIFICATION	0.9991991609180199	WITHOUT_CLASSIFICATION	8.008390819801394E-4	DESIGN
Not a collection? Return the entity property mapping.	WITHOUT_CLASSIFICATION	0.9998007797187781	WITHOUT_CLASSIFICATION	1.992202812220075E-4	DESIGN
collection of <many-to-any/> mappings... used to circumvent the component-collection check below...	WITHOUT_CLASSIFICATION	0.9997241953167005	WITHOUT_CLASSIFICATION	2.758046832994384E-4	DESIGN
Otherwise, the destination node was implied by the FROM clause and the FROM clause processor will automatically add it in the right place.	WITHOUT_CLASSIFICATION	0.9999561826973644	WITHOUT_CLASSIFICATION	4.381730263561347E-5	DESIGN
If the first identifier in the path referrs to the class alias (not the class name), then this is a correlated subselect. If it's a correlated sub-select, use the existing table alias. Otherwise generate a new one.	WITHOUT_CLASSIFICATION	0.9999999747491511	WITHOUT_CLASSIFICATION	2.5250848804533003E-8	DESIGN
check to see if our "propPath" actually represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999774264703323	WITHOUT_CLASSIFICATION	2.25735296676481E-5	DESIGN
An ident node can represent an index expression if the ident represents a naked property ref Note: this makes the assumption (which is currently the case in the hql-sql grammar) that the ident is first resolved itself (addrExpr -> resolve()). The other option, if that changes, is to call resolve from here; but it is currently un-needed overhead.	WITHOUT_CLASSIFICATION	0.9999876208411139	WITHOUT_CLASSIFICATION	1.237915888605879E-5	DESIGN
This uses a PathExpressionParser but notice that compound paths are not valid, only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9987266505117706	WITHOUT_CLASSIFICATION	0.001273349488229447	DESIGN
If this is an implied join in a FROM clause, then use ANSI-style joining, and set the flag on the FromElement that indicates that it was implied in the FROM clause itself.	WITHOUT_CLASSIFICATION	0.9999874331576653	WITHOUT_CLASSIFICATION	1.2566842334803053E-5	DESIGN
origin.addDestination(destination); Add the query spaces.	WITHOUT_CLASSIFICATION	0.999999823180176	WITHOUT_CLASSIFICATION	1.7681982392669993E-7	DESIGN
For an explicit many-to-many relationship, add a second join from the intermediate (many-to-many) table to the destination table. Also, make sure that the from element's idea of the destination is the destination table.	WITHOUT_CLASSIFICATION	0.999999585331321	WITHOUT_CLASSIFICATION	4.1466867896277705E-7	DESIGN
Reset the node type, because the rest of the system is expecting FROM_FRAGMENT, all we wanted was for the factory to create the right sub-class. This might get reset again later on anyway to make the SQL generation simpler.	WITHOUT_CLASSIFICATION	0.9325026620739204	WITHOUT_CLASSIFICATION	0.06749733792607966	DESIGN
explicit = true; This is an explict Select. ArrayList sqlResultTypeList = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999991945746205	WITHOUT_CLASSIFICATION	8.054253794228361E-7	DESIGN
sqlResultTypeList.add( type ); Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999948473202109	WITHOUT_CLASSIFICATION	5.152679789143038E-6	DESIGN
If the expression list has exactly one expression, and the type of the expression is a collection then this might be a collection function, such as index(c) or size(c).	WITHOUT_CLASSIFICATION	0.9936017851020564	WITHOUT_CLASSIFICATION	0.006398214897943579	DESIGN
Need to parse off the column qualifiers; this is assuming (which is true as of now) that this is only used from update and delete HQL statement parsing	WITHOUT_CLASSIFICATION	0.9999871016549134	WITHOUT_CLASSIFICATION	1.2898345086570873E-5	DESIGN
for regression testing against output from the old parser... found it easiest to simply reorder the FromElements here into ascending order in terms of injecting them into the resulting sql ast in orders relative to those expected by the old parser; this is definitely another of those "only needed for regression purposes". The SyntheticAndFactory, then, simply injects them as it encounters them.	WITHOUT_CLASSIFICATION	0.9999982372344949	WITHOUT_CLASSIFICATION	1.7627655051332442E-6	DESIGN
The uber-rule here is that we need to include subclass joins if the FromElement is in any way dereferenced by a property from the subclass table; otherwise we end up with column references qualified by a non-existent table reference in the resulting SQL...	WITHOUT_CLASSIFICATION	0.9999493987083686	WITHOUT_CLASSIFICATION	5.060129163130557E-5	DESIGN
classic translator does not support collection of ordinal param metadata	WITHOUT_CLASSIFICATION	0.9812822698437301	WITHOUT_CLASSIFICATION	0.018717730156269787	DESIGN
The following variables are stacks that keep information about each subexpression in the list of nested subexpressions we are currently processing.	WITHOUT_CLASSIFICATION	0.9965181962396146	WITHOUT_CLASSIFICATION	0.00348180376038555	DESIGN
The loop ensures atomicity of the select + update even for no transaction or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999968334247518	WITHOUT_CLASSIFICATION	3.166575248175636E-6	DESIGN
should not be able to reach last without maxPosition being set unless there are no results	WITHOUT_CLASSIFICATION	0.9999964748834055	WITHOUT_CLASSIFICATION	3.5251165945447275E-6	DESIGN
we found it in the temp PC. Should indicate we are in the midst of processing a result set containing eager fetches via join fetch	WITHOUT_CLASSIFICATION	0.9991240239509789	WITHOUT_CLASSIFICATION	8.759760490211927E-4	DESIGN
do not use proxiesByKey, since not all proxies that point to this session's instances are in that collection!	WITHOUT_CLASSIFICATION	0.9977985398781521	WITHOUT_CLASSIFICATION	0.0022014601218478566	DESIGN
if there is no TM configured, we will not be able to access the javax.transaction.Transaction object in order to register a synch anyway.	WITHOUT_CLASSIFICATION	0.9105877705056263	WITHOUT_CLASSIFICATION	0.08941222949437368	DESIGN
Since the result set cursor is always left at the first physical row after the "last processed", we need to jump back one position to get the key value we are interested in skipping	WITHOUT_CLASSIFICATION	0.9944893183525148	WITHOUT_CLASSIFICATION	0.0055106816474852485	DESIGN
true if this is a query and we are loading multiple instances of the same collection role otherwise this is a CollectionInitializer and we are loading up a single collection or batch	WITHOUT_CLASSIFICATION	0.9898506618596855	WITHOUT_CLASSIFICATION	0.01014933814031453	DESIGN
we don't need to worry about existing version being uninitialized because this block isn't called by a re-entrant load (re-entrant loads _always_ have lock mode NONE)	WITHOUT_CLASSIFICATION	0.9607405485249124	WITHOUT_CLASSIFICATION	0.03925945147508762	DESIGN
add temp entry so that the next step is circular-reference safe - only needed because some types don't take proper advantage of two-phase-load (esp. components)	WITHOUT_CLASSIFICATION	0.997721612115791	WITHOUT_CLASSIFICATION	0.002278387884208986	DESIGN
assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999982703077396	WITHOUT_CLASSIFICATION	1.7296922605251912E-6	DESIGN
log a message about potential connection leaks	WITHOUT_CLASSIFICATION	0.9986777285992053	WITHOUT_CLASSIFICATION	0.0013222714007946512	DESIGN
ps.close(); just close it; do NOT try to return it to the pool! NOTE: early exit!	WITHOUT_CLASSIFICATION	0.9999999700575052	WITHOUT_CLASSIFICATION	2.994249480719279E-8	DESIGN
this has been shown to happen occasionally in rare cases when using a transaction manager + transaction-timeout where the timeout calls back through Hibernate's registered transaction synchronization on a separate "reaping" thread. In cases where that reaping thread executes through this block at the same time the main application thread does we can get into situations where these CMEs occur. And though it is not "allowed" per-se, the end result without handling it specifically is infinite looping. So here, we simply break the loop	WITHOUT_CLASSIFICATION	0.6645742279608372	WITHOUT_CLASSIFICATION	0.33542577203916274	DESIGN
unfortunately this stuff can't be cached because it is per-invocation, not constant for the QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9998479690618852	WITHOUT_CLASSIFICATION	1.5203093811475826E-4	DESIGN
can't cache this stuff either (per-invocation) we are given a map of user-alias -> lock mode create a new map of sql-alias -> lock mode	WITHOUT_CLASSIFICATION	0.9973600154328158	WITHOUT_CLASSIFICATION	0.002639984567184151	DESIGN
don't create a unique key, 'cos some databases don't like a UK on nullable columns getCollectionTable().createUniqueKey( getIdentifier().getConstraintColumns() );	WITHOUT_CLASSIFICATION	0.9999596741411992	WITHOUT_CLASSIFICATION	4.0325858800695235E-5	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9740054938323157	WITHOUT_CLASSIFICATION	0.025994506167684207	DESIGN
isSet = collection.isSet(); isSorted = collection.isSorted();	WITHOUT_CLASSIFICATION	0.999998850673637	WITHOUT_CLASSIFICATION	1.1493263630107835E-6	DESIGN
lists, arrays sets, maps, bags	WITHOUT_CLASSIFICATION	0.9999930726106484	WITHOUT_CLASSIFICATION	6.9273893516126614E-6	DESIGN
we finish all the "removes" first to take care of possible unique constraints and so that we can take better advantage of batching	WITHOUT_CLASSIFICATION	0.9998443251798423	WITHOUT_CLASSIFICATION	1.5567482015772468E-4	DESIGN
use a combination of foreign key columns and pk columns, since the ordering of removal and addition is not guaranteed when a child moves from one parent to another	WITHOUT_CLASSIFICATION	0.9997948730383948	WITHOUT_CLASSIFICATION	2.0512696160530366E-4	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9740054938323157	WITHOUT_CLASSIFICATION	0.025994506167684207	DESIGN
information about properties of this class, including inherited properties (only really needed for updatable/insertable properties)	WITHOUT_CLASSIFICATION	0.9988876129918018	WITHOUT_CLASSIFICATION	0.0011123870081981941	DESIGN
all this only really needs to consider properties of this class, not its subclasses, but since we are reusing code used for sequential selects, we use the subclass closure	WITHOUT_CLASSIFICATION	0.9996816258828517	WITHOUT_CLASSIFICATION	3.18374117148255E-4	DESIGN
Here we render the select column list based on the properties defined as being generated. For partial component generation, we currently just re-select the whole component rather than trying to handle the individual generated portions.	WITHOUT_CLASSIFICATION	0.9992546838622394	WITHOUT_CLASSIFICATION	7.453161377607711E-4	DESIGN
this is the root (versioned) table, and we are using version-based optimistic locking; if we are not updating the version, also don't check it (unless this is a "generated" version column)!	WITHOUT_CLASSIFICATION	0.9999963549644548	WITHOUT_CLASSIFICATION	3.6450355451285448E-6	DESIGN
optimistic-lock="all", include all updatable properties optimistic-lock="dirty", include all properties we are updating this time	WITHOUT_CLASSIFICATION	0.9999959587868359	WITHOUT_CLASSIFICATION	4.041213164125367E-6	DESIGN
this property belongs to the table, and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9995237557994552	WITHOUT_CLASSIFICATION	4.762442005447873E-4	DESIGN
check to see if the connection is in auto-commit mode (no connection means aggressive connection release outside a JTA transaction context, so MUST be autocommit mode)	WITHOUT_CLASSIFICATION	0.9998238256045733	WITHOUT_CLASSIFICATION	1.7617439542672996E-4	DESIGN
need to treat this as if it where optimistic-lock="all" (dirty does not make sense); first we need to locate the "loaded" state Note, it potentially could be a proxy, so perform the location the safe way...	WITHOUT_CLASSIFICATION	0.5809028570481755	DESIGN	0.41909714295182454	WITHOUT_CLASSIFICATION
we always assume an instance with a null identifier or no identifier property is unsaved!	WITHOUT_CLASSIFICATION	0.9999947411103343	WITHOUT_CLASSIFICATION	5.258889665660677E-6	DESIGN
Need to use the identifier type of the collection owner since the incoming is value is actually the owner's id. Using the collection's key type causes problems with property-ref keys...	WITHOUT_CLASSIFICATION	0.9987942159353753	WITHOUT_CLASSIFICATION	0.0012057840646247338	DESIGN
allow any identifier quoted with backtick only recognizes identifiers beginning with a letter	WITHOUT_CLASSIFICATION	0.999827205028155	WITHOUT_CLASSIFICATION	1.7279497184501572E-4	DESIGN
following doesn't handle (null, not null) but unnecessary since this would mean all rows	WITHOUT_CLASSIFICATION	0.9999959968952171	WITHOUT_CLASSIFICATION	4.003104782882926E-6	DESIGN
IMPL NOTE : due to the delayed population of setters (setters cached for performance), we really cannot pro0perly define equality for this transformer	WITHOUT_CLASSIFICATION	0.8853118705216845	WITHOUT_CLASSIFICATION	0.1146881294783155	DESIGN
we need to dirty check collections, since they can cause an owner version number increment	WITHOUT_CLASSIFICATION	0.9997628984492488	WITHOUT_CLASSIFICATION	2.3710155075125618E-4	DESIGN
return the id, so we can use it to reset the proxy id return result;	WITHOUT_CLASSIFICATION	0.9999978264038921	WITHOUT_CLASSIFICATION	2.173596107845711E-6	DESIGN
optimizer = getFactory().getSettings().getBytecodeProvider().getReflectionOptimizer( mappedClass, getterNames, setterNames, propTypes );	WITHOUT_CLASSIFICATION	0.9999954083585532	WITHOUT_CLASSIFICATION	4.591641446833948E-6	DESIGN
cache the actual id of the object, not the value of the property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999959403270982	WITHOUT_CLASSIFICATION	4.059672901791061E-6	DESIGN
We now have the value of the property-ref we reference. However, we need to dig a little deeper, as that property might also be an entity type, in which case we need to resolve its identitifier	WITHOUT_CLASSIFICATION	0.9999980273027521	WITHOUT_CLASSIFICATION	1.97269724783001E-6	DESIGN
Retrieve the value of the designated column in the current row of this ResultSet object as a java.io.Reader object	WITHOUT_CLASSIFICATION	0.9999968258965196	WITHOUT_CLASSIFICATION	3.1741034803494178E-6	DESIGN
not absolutely necessary, but helps for some equals()/hashCode() implementations	WITHOUT_CLASSIFICATION	0.9996588697460617	WITHOUT_CLASSIFICATION	3.4113025393842105E-4	DESIGN
this should be a call to resolve(), not resolveIdentifier(), 'cos it might be a property-ref, and we did not cache the referenced value	WITHOUT_CLASSIFICATION	0.9997604527445862	WITHOUT_CLASSIFICATION	2.3954725541378406E-4	DESIGN
If we have <tt>not-found="ignore"</tt> association mapped to a formula, we always need to dirty check it, so we can update the second-level cache	WITHOUT_CLASSIFICATION	0.9999801827300159	WITHOUT_CLASSIFICATION	1.9817269984055234E-5	DESIGN
can't just return null here, since that would cause an owning component to become null	WITHOUT_CLASSIFICATION	0.9975868758414699	WITHOUT_CLASSIFICATION	0.0024131241585300467	DESIGN
for arrays, replaceElements() may return a different reference, since the array length might not match	WITHOUT_CLASSIFICATION	0.9999990291601163	WITHOUT_CLASSIFICATION	9.708398837904592E-7	DESIGN
actual cache of the entries. soft references are used for both the keys and the values here since the values pertaining to the MRU entries are kept in a seperate hard reference cache (to avoid their enqueuement/garbage-collection).	WITHOUT_CLASSIFICATION	0.9999958159537592	WITHOUT_CLASSIFICATION	4.184046240837139E-6	DESIGN
as soon as we encounter our first letter, return the substring from that position	WITHOUT_CLASSIFICATION	0.9999988663693404	WITHOUT_CLASSIFICATION	1.1336306596371149E-6	DESIGN
Note : expected in the syntax: type=listenerClass ({sep}type=listenerClass) where {sep} is any whitespace or comma	WITHOUT_CLASSIFICATION	0.9999807686345913	WITHOUT_CLASSIFICATION	1.9231365408777112E-5	DESIGN
isTransactionCallbackRegistered denotes whether any Hibernate Transaction has registered as a callback against this JDBCContext; only one such callback is allowed. Directly serializing this value causes problems with JDBCTransaction, or really any Transaction impl where the callback is local to the Transaction instance itself, since that Transaction is not serialized along with the JDBCContext. Thus we handle that fact here explicitly...	WITHOUT_CLASSIFICATION	0.9087098126483573	WITHOUT_CLASSIFICATION	0.09129018735164282	DESIGN
note that for sequential scrolling, we make the assumption that the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9996813762642835	WITHOUT_CLASSIFICATION	3.1862373571643865E-4	DESIGN
We call getKeyFromResultSet() here so that we can know the key value upon which to perform the breaking logic. However, it is also then called from getRowFromResultSet() which is certainly not the most efficient. But the call here is needed, and there currently is no other way without refactoring of the doQuery()/getRowFromResultSet() methods	WITHOUT_CLASSIFICATION	0.9884596034883841	WITHOUT_CLASSIFICATION	0.01154039651161597	DESIGN
This check is needed since processing leaves the cursor after the last physical row for the current logical row; thus if we are after the last physical row, this might be caused by either: 1) scrolling to the last logical row 2) scrolling past the last logical row In the latter scenario, the previous logical row really is the last logical row. In all other cases, we should process back two logical records (the current logic row, plus the previous logical row).	WITHOUT_CLASSIFICATION	0.9815015663284228	DESIGN	0.018498433671577153	WITHOUT_CLASSIFICATION
and perform the load	WITHOUT_CLASSIFICATION	0.999999342072135	WITHOUT_CLASSIFICATION	6.579278649739187E-7	DESIGN
important: reuse the same event instances for performance!	WITHOUT_CLASSIFICATION	0.9127788820036616	WITHOUT_CLASSIFICATION	0.08722111799633833	DESIGN
this is a query and we are loading multiple instances of the same collection role	WITHOUT_CLASSIFICATION	0.8435582693027557	WITHOUT_CLASSIFICATION	0.15644173069724432	DESIGN
we found a collection element in the result set	WITHOUT_CLASSIFICATION	0.9999791037314224	WITHOUT_CLASSIFICATION	2.089626857762775E-5	DESIGN
we did not find a collection element in the result set, so we ensure that a collection is created with the owner's identifier, since what we have is an empty collection	WITHOUT_CLASSIFICATION	0.999999684359118	WITHOUT_CLASSIFICATION	3.1564088208438006E-7	DESIGN
this is a collection initializer, so we must create a collection for each of the passed-in keys, to account for the possibility that the collection is empty and has no rows in the result set	WITHOUT_CLASSIFICATION	0.9999968926313669	WITHOUT_CLASSIFICATION	3.1073686329756204E-6	DESIGN
grab its state from the ResultSet and keep it in the Session (but don't yet initialize the object itself) note that we acquire LockMode.READ even if it was not requested	WITHOUT_CLASSIFICATION	0.9999965483309309	WITHOUT_CLASSIFICATION	3.451669069207982E-6	DESIGN
a many-to-many; decrement currentDepth here to allow join across the association table without exceeding MAX_FETCH_DEPTH (i.e. the "currentDepth - 1" bit)	WITHOUT_CLASSIFICATION	0.99988592255761	WITHOUT_CLASSIFICATION	1.1407744239000976E-4	DESIGN
if not a composite key, use "foo in (?, ?, ?)" for batching if no batch, and not a composite key, use "foo = ?"	WITHOUT_CLASSIFICATION	0.999992971620972	WITHOUT_CLASSIFICATION	7.028379027961275E-6	DESIGN
the user visible aliases, which are unknown to the superclass, these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.999995218501576	WITHOUT_CLASSIFICATION	4.78149842403118E-6	DESIGN
first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9986339413853904	WITHOUT_CLASSIFICATION	0.001366058614609666	DESIGN
first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9986339413853904	WITHOUT_CLASSIFICATION	0.001366058614609666	DESIGN
it does not refer to an alias of a projection, look for a property	WITHOUT_CLASSIFICATION	0.9999526946656696	WITHOUT_CLASSIFICATION	4.730533433047379E-5	DESIGN
determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999956601178325	WITHOUT_CLASSIFICATION	4.339882167556158E-6	DESIGN
Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999901710473803	WITHOUT_CLASSIFICATION	9.82895261973314E-6	DESIGN
Translates an AST join type (i.e., the token type) into a JoinFragment.XXX join type. @param astJoinType The AST join type (from HqlSqlTokenTypes or SqlTokenTypes) @return a JoinFragment.XXX join type. @see JoinFragment @see SqlTokenTypes	WITHOUT_CLASSIFICATION	0.9999894501003456	WITHOUT_CLASSIFICATION	1.0549899654477741E-5	DESIGN
ignore	WITHOUT_CLASSIFICATION	0.9999910123537684	WITHOUT_CLASSIFICATION	8.987646231521161E-6	DESIGN
ignore	WITHOUT_CLASSIFICATION	0.9999910123537684	WITHOUT_CLASSIFICATION	8.987646231521161E-6	DESIGN
}	WITHOUT_CLASSIFICATION	0.9991937986835284	WITHOUT_CLASSIFICATION	8.062013164716315E-4	DESIGN
public List getCollectionAliases() { return collectionAliases; } public List getCollectionOwners() { return collectionOwners; } public List getCollectionOwnerAliases() { return collectionOwnerAliases; } public List getCollectionPersisters() { return collectionPersisters; } public Map getAlias2Persister() { return alias2Persister; } public boolean isCollectionInitializer() { return isCollectionInitializer; } public List getPersisters() { return persisters; } public Map getAlias2OwnerAlias() { return alias2OwnerAlias; } public List getScalarTypes() { return scalarTypes; } public List getScalarColumnAliases() { return scalarColumnAliases; } public List getPropertyResults() { return propertyResults; } public List getCollectionPropertyResults() { return collectionResults; } public Map getAlias2Return() { return alias2Return; }	WITHOUT_CLASSIFICATION	0.9955457425934409	WITHOUT_CLASSIFICATION	0.004454257406559133	DESIGN
SQLQueryParser parser = new SQLQueryParser( sqlQuery, processor.getAlias2Persister(), processor.getAlias2Return(), aliases, collAliases, collPersisters, suffixes, collSuffixes ); sql = parser.process(); namedParameterBindPoints = parser.getNamedParameters();	WITHOUT_CLASSIFICATION	0.9999976607271441	WITHOUT_CLASSIFICATION	2.339272855975134E-6	DESIGN
include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9999957955911747	WITHOUT_CLASSIFICATION	4.204408825265813E-6	DESIGN
sqlAliasSuffixes[i] = element.getColumnAliasSuffix();	WITHOUT_CLASSIFICATION	0.9999984386501408	WITHOUT_CLASSIFICATION	1.5613498591840743E-6	DESIGN
NONE, because its the requested lock mode, not the actual!	WITHOUT_CLASSIFICATION	0.9999992274750633	WITHOUT_CLASSIFICATION	7.72524936615795E-7	DESIGN
at this point we have (drivingSqlAlias) the SQL alias of the driving table corresponding to the given user alias. However, the driving table is not (necessarily) the table against which we want to apply locks. Mainly, the exception case here is joined-subclass hierarchies where we instead want to apply the lock against the root table (for all other strategies, it just happens that driving and root are the same).	WITHOUT_CLASSIFICATION	0.9986306845644327	WITHOUT_CLASSIFICATION	0.0013693154355672091	DESIGN
the column doesnt exist at all.	WITHOUT_CLASSIFICATION	0.9999947435380016	WITHOUT_CLASSIFICATION	5.256461998457521E-6	DESIGN
we have a mapped identifier property and the root of the incoming property path matched that identifier property	WITHOUT_CLASSIFICATION	0.9999972811439289	WITHOUT_CLASSIFICATION	2.718856071007416E-6	DESIGN
we have an embedded composite identifier	WITHOUT_CLASSIFICATION	0.9999936781407974	WITHOUT_CLASSIFICATION	6.321859202530266E-6	DESIGN
both many-to-one and one-to-one are represented as a Property. EntityPersister is relying on this value to determine "lazy fetch groups" in terms of field-level interception. So we need to make sure that we return true here for the case of many-to-one and one-to-one with lazy="no-proxy" impl note - lazy="no-proxy" currently forces both lazy and unwrap to be set to true. The other case we are extremely interested in here is that of lazy="proxy" where lazy is set to true, but unwrap is set to false. thus we use both here under the assumption that this return is really only ever used during persister construction to determine the lazy property/field fetch groupings. If that assertion changes then this check needs to change as well. Partially, this is an issue with the overloading of the term "lazy" here...	WITHOUT_CLASSIFICATION	0.9986075759544715	WITHOUT_CLASSIFICATION	0.0013924240455286169	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995353486709452	WITHOUT_CLASSIFICATION	4.646513290549115E-4	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995353486709452	WITHOUT_CLASSIFICATION	4.646513290549115E-4	DESIGN
rootTableName = persistentClass.getRootTable().getQualifiedName( factory.getDialect(), factory.getDefaultCatalog(), factory.getDefaultSchema() );	WITHOUT_CLASSIFICATION	0.9999999826530626	WITHOUT_CLASSIFICATION	1.7346937359337654E-8	DESIGN
SUBCLASSES	WITHOUT_CLASSIFICATION	0.999264076145956	WITHOUT_CLASSIFICATION	7.359238540440057E-4	DESIGN
Custom sql	WITHOUT_CLASSIFICATION	0.9999964302152352	WITHOUT_CLASSIFICATION	3.569784764770617E-6	DESIGN
protected void initPropertyPaths(final String path,final Type type,final String[] columns,final String[] formulaTemplates,final Mapping factory)throws MappingException {addFormulaPropertyPath(path, type, formulaTemplates);initPropertyPaths(path, type, columns, formulaTemplates, factory);}	WITHOUT_CLASSIFICATION	0.9974719786358358	WITHOUT_CLASSIFICATION	0.002528021364164302	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9852400555743543	WITHOUT_CLASSIFICATION	0.014759944425645608	DESIGN
Custom SQL (would be better if these were private)	WITHOUT_CLASSIFICATION	0.9999944211984026	WITHOUT_CLASSIFICATION	5.578801597382102E-6	DESIGN
moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993515902552298	WITHOUT_CLASSIFICATION	6.484097447701949E-4	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9852400555743543	WITHOUT_CLASSIFICATION	0.014759944425645608	DESIGN
aliases for identifier ( alias.id ); skip if the entity defines a non-id property named 'id'	WITHOUT_CLASSIFICATION	0.9999993568295239	WITHOUT_CLASSIFICATION	6.431704759732946E-7	DESIGN
decide which ResultSet to get the property value from:	WITHOUT_CLASSIFICATION	0.9999964043620401	WITHOUT_CLASSIFICATION	3.595637960032182E-6	DESIGN
note: it is conceptually possible that a UserType could map null to a non-null value, so the following is arguable:	WITHOUT_CLASSIFICATION	0.9999859190099293	WITHOUT_CLASSIFICATION	1.4080990070759336E-5	DESIGN
the contract of EntityTuplizer.determineConcreteSubclassEntityName says that returning null is an indication that the specified entity-name (this.getEntityName) should be used.	WITHOUT_CLASSIFICATION	0.9050318510977	WITHOUT_CLASSIFICATION	0.09496814890230003	DESIGN
Need to use the identifier type of the collection owner since the incoming is value is actually the owner's id. Using the collection's key type causes problems with property-ref keys...	WITHOUT_CLASSIFICATION	0.9987942159353753	WITHOUT_CLASSIFICATION	0.0012057840646247338	DESIGN
cache these since they are stateless this one could even be static...	WITHOUT_CLASSIFICATION	0.9996336095460551	WITHOUT_CLASSIFICATION	3.663904539449264E-4	DESIGN
"as" is not in KEYWORDS	WITHOUT_CLASSIFICATION	0.9999942191752355	WITHOUT_CLASSIFICATION	5.7808247646095175E-6	DESIGN
--Commented out by Inspection (12/4/04 9:10 AM): public abstract void addCondition(String alias, String[] columns, String condition);	WITHOUT_CLASSIFICATION	0.9999730723921867	WITHOUT_CLASSIFICATION	2.692760781336018E-5	DESIGN
use the id column alias	WITHOUT_CLASSIFICATION	0.9999967578256461	WITHOUT_CLASSIFICATION	3.2421743539995816E-6	DESIGN
private List aliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999988722945446	WITHOUT_CLASSIFICATION	1.1277054553279165E-6	DESIGN
columns.add(columnName); aliases.add(tableAlias);	WITHOUT_CLASSIFICATION	0.9999964192714998	WITHOUT_CLASSIFICATION	3.580728500099604E-6	DESIGN
where fragment must be empty!	WITHOUT_CLASSIFICATION	0.9993203124698646	WITHOUT_CLASSIFICATION	6.796875301352889E-4	DESIGN
revert to traditional hibernate behavior of setting initialPoolSize to minPoolSize unless otherwise specified with a c3p0.-style parameter.	WITHOUT_CLASSIFICATION	0.995090171530581	WITHOUT_CLASSIFICATION	0.00490982846941901	DESIGN
arbitrary on clause ignored!!	WITHOUT_CLASSIFICATION	0.9999995657662402	WITHOUT_CLASSIFICATION	4.342337598882054E-7	DESIGN
might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9985593328883358	WITHOUT_CLASSIFICATION	0.001440667111664188	DESIGN
might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9985593328883358	WITHOUT_CLASSIFICATION	0.001440667111664188	DESIGN
if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999930640475384	WITHOUT_CLASSIFICATION	6.935952461591479E-6	DESIGN
Essentially: 1) If we have a local (Hibernate) transaction in progress and it already has the UserTransaction cached, use that UserTransaction to determine the status. 2) If a transaction manager has been located, use that transaction manager to determine the status. 3) Finally, as the last resort, try to lookup the UserTransaction via JNDI and use that to determine the status.	WITHOUT_CLASSIFICATION	0.9998113944101481	WITHOUT_CLASSIFICATION	1.886055898518324E-4	DESIGN
package	WITHOUT_CLASSIFICATION	0.9991997042405928	WITHOUT_CLASSIFICATION	8.002957594071461E-4	DESIGN
swallow it (the transaction _was_ successful or successfully rolled back)	WITHOUT_CLASSIFICATION	0.9999238549964665	WITHOUT_CLASSIFICATION	7.614500353351214E-5	DESIGN
ignore it	WITHOUT_CLASSIFICATION	0.9999996130065743	WITHOUT_CLASSIFICATION	3.8699342574370153E-7	DESIGN
we need to dirty check many-to-ones with not-found="ignore" in order to update the cache (not the database), since in this case a null entity reference can lose information	WITHOUT_CLASSIFICATION	0.9999259566948347	WITHOUT_CLASSIFICATION	7.40433051652772E-5	DESIGN
create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999993604250184	WITHOUT_CLASSIFICATION	6.395749815335344E-7	DESIGN
Regions can get instantiated in the course of normal work (e.g. a named query region will be created the first time the query is executed), so suspend any ongoing tx	WITHOUT_CLASSIFICATION	0.9996472563660574	WITHOUT_CLASSIFICATION	3.527436339425345E-4	DESIGN
then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999743833053868	WITHOUT_CLASSIFICATION	2.561669461317232E-5	DESIGN
Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999360785873174	WITHOUT_CLASSIFICATION	6.392141268267415E-5	DESIGN
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.974493588742888	WITHOUT_CLASSIFICATION	0.025506411257111963	DESIGN
NOTE : this is being used from the process of shutting down a SessionFactory. Specific things to consider: (1) this clearing of the region should not propagate to other nodes on the cluster (if any); this is the cache-mode-local option bit... (2) really just trying a best effort to cleanup after ourselves; lock failures, etc are not critical here; this is the fail-silently option bit...	WITHOUT_CLASSIFICATION	0.9509419015681848	WITHOUT_CLASSIFICATION	0.04905809843181511	DESIGN
need to extract the component values and check for subtype replacements...	WITHOUT_CLASSIFICATION	0.9923683906933668	WITHOUT_CLASSIFICATION	0.007631609306633244	DESIGN
We ignore minimalPutOverride. JBossCache putForExternalRead is already about as minimal as we can get; it will promptly return if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999881283288307	WITHOUT_CLASSIFICATION	1.1871671169287027E-5	DESIGN
for now, just "re-flatten" the metamodel since this is temporary stuff anyway (HHH-1907)	WITHOUT_CLASSIFICATION	0.8099858550664066	WITHOUT_CLASSIFICATION	0.19001414493359337	DESIGN
Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999675929006965	WITHOUT_CLASSIFICATION	3.240709930351304E-5	DESIGN
This solution would allow us to eliminate the owner arg to disassemble(), but what if the collection was null, and then later had elements added? seems unsafe session.getPersistenceContext().getCollectionEntry( (PersistentCollection) value ).getKey();	WITHOUT_CLASSIFICATION	0.8823881751949202	WITHOUT_CLASSIFICATION	0.11761182480507984	DESIGN
Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999917731491811	WITHOUT_CLASSIFICATION	8.226850819003665E-6	DESIGN
some collections are not lazy:	WITHOUT_CLASSIFICATION	0.9999961190844261	WITHOUT_CLASSIFICATION	3.880915573924084E-6	DESIGN
Here we don't want to suspend the tx. If we do: 1) We might be caching query results that reflect uncommitted changes. No tx == no WL on cache node, so other threads can prematurely see those query results 2) No tx == immediate replication. More overhead, plus we spread issue #1 above around the cluster	WITHOUT_CLASSIFICATION	0.9997218969686724	WITHOUT_CLASSIFICATION	2.7810303132760363E-4	DESIGN
return the (fully resolved) identifier value, but do not resolve to the actual referenced entity instance NOTE: the owner of the association is not really the owner of the id!	WITHOUT_CLASSIFICATION	0.9999988980966183	WITHOUT_CLASSIFICATION	1.1019033816413986E-6	DESIGN
Add a zero (or quite low) timeout option so we don't block. Ignore any TimeoutException. Basically we forego caching the query result in order to avoid blocking. Reads are done with suspended tx, so they should not hold the lock for long. Not caching the query result is OK, since any subsequent read will just see the old result with its out-of-date timestamp; that result will be discarded and the db query performed again.	WITHOUT_CLASSIFICATION	0.9986392556341015	WITHOUT_CLASSIFICATION	0.0013607443658985936	DESIGN
Impl note: takes advantage of the fact that an escpaed single quote embedded within a quote-block can really be handled as two seperate quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9997872315279657	WITHOUT_CLASSIFICATION	2.1276847203443894E-4	DESIGN
We have the JBCWriteMutex, so no other local thread will be trying to write this key. It's possible here some remote thread has come in and changed the values again, but since we are reading the values to write to JBC right now, we know we are writing the latest values; i.e. we don't assume that what we cached in entry.update() above is what we should write to JBC now. Our write could be redundant, i.e. we are writing what some remote thread just came in an wrote. There is a chance that yet another remote thread will update us, and we'll then overwrite that later data in JBC. But, all remote nodes will ignore that change in their localCache; the only place it will live will be in JBC, where it can only effect the initial state transfer values on newly joined nodes (i.e. populateLocalCache()).	WITHOUT_CLASSIFICATION	0.9999999997749827	WITHOUT_CLASSIFICATION	2.2501728295988573E-10	DESIGN
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999524307179368	WITHOUT_CLASSIFICATION	4.7569282063155586E-5	DESIGN
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999524307179368	WITHOUT_CLASSIFICATION	4.7569282063155586E-5	DESIGN
Don't need to lock the cache here, since if someone else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9999340734291309	WITHOUT_CLASSIFICATION	6.592657086915514E-5	DESIGN
we need to grab the version value from the entity, otherwise we have issues with generated-version entities that may have multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.878805089992148	WITHOUT_CLASSIFICATION	0.12119491000785194	DESIGN
we need to obtain the lock before any actions are executed, since this may be an inverse="true" bidirectional association and it is one of the earlier entity actions which actually updates the database (this action is resposible for second-level cache invalidation only)	WITHOUT_CLASSIFICATION	0.9999962923993885	WITHOUT_CLASSIFICATION	3.707600611463347E-6	DESIGN
postDelete: After actually deleting a row, record the fact that the instance no longer exists on the database (needed for identity-column key generation), and remove it from the session cache	WITHOUT_CLASSIFICATION	0.6338913894241799	DESIGN	0.36610861057582006	WITHOUT_CLASSIFICATION
intentionally empty	WITHOUT_CLASSIFICATION	0.9999735345070128	WITHOUT_CLASSIFICATION	2.6465492987289176E-5	DESIGN
todo : what else to do here?	DESIGN	0.9918169121048199	WITHOUT_CLASSIFICATION	0.008183087895180092	DESIGN
put() has nowait semantics, is this really appropriate? note that it needs to be async replication, never local or sync	DESIGN	0.9676905535591794	DESIGN	0.03230944644082056	WITHOUT_CLASSIFICATION
'hibernate.temp.use_jdbc_metadata_defaults' is a temporary magic value. The need for it is intended to be alleviated with future developement, thus it is not defined as an Environment constant... it is used to control whether we should consult the JDBC metadata to determine certain Settings default values; it is useful to not do this when the database may not be available (mainly in tools usage).	DESIGN	0.9585171147386184	WITHOUT_CLASSIFICATION	0.04148288526138159	DESIGN
TODO: get SQL rendering out of this package!	DESIGN	0.5134168281615409	DESIGN	0.48658317183845906	WITHOUT_CLASSIFICATION
TODO: get SQL rendering out of this package!	DESIGN	0.5134168281615409	DESIGN	0.48658317183845906	WITHOUT_CLASSIFICATION
todo : eventually merge this with TreeCache and just add optional opt-lock support there.	DESIGN	0.9995303399435805	WITHOUT_CLASSIFICATION	4.696600564195515E-4	DESIGN
can happen because of the multiple ways Cache.remove() can be invoked :(	DESIGN	0.9999810028182493	WITHOUT_CLASSIFICATION	1.8997181750716017E-5	DESIGN
work around the "feature" where tree cache is validating the inserted node during the next transaction. no idea...	DESIGN	0.9800312541940767	WITHOUT_CLASSIFICATION	0.01996874580592331	DESIGN
FIXME Per the RegionFactory class Javadoc, this constructor version should not be necessary. @param props The configuration properties	DESIGN	0.9724275632399615	WITHOUT_CLASSIFICATION	0.02757243676003845	DESIGN
FIXME Per the RegionFactory class Javadoc, this constructor version should not be necessary. @param props The configuration properties	DESIGN	0.9724275632399615	WITHOUT_CLASSIFICATION	0.02757243676003845	DESIGN
FIXME Hacky workaround to JBCACHE-1202	DESIGN	0.7783214498798094	DESIGN	0.2216785501201907	WITHOUT_CLASSIFICATION
FIXME Hacky workaround to JBCACHE-1202	DESIGN	0.7783214498798094	DESIGN	0.2216785501201907	WITHOUT_CLASSIFICATION
TODO: I considered validating TS cache config here, but decided to defer unti getTimestampsCacheInstance() in case the cache is never actually used	DESIGN	0.971947110197376	WITHOUT_CLASSIFICATION	0.02805288980262406	DESIGN
TODO Is this a valid operation on a timestamps cache?	DESIGN	0.5478773566572187	DESIGN	0.4521226433427812	WITHOUT_CLASSIFICATION
TODO Is this a valid operation on a timestamps cache?	DESIGN	0.5478773566572187	DESIGN	0.4521226433427812	WITHOUT_CLASSIFICATION
TODO Why not use the timestamp in a DataVersion?	DESIGN	0.7098773712918067	WITHOUT_CLASSIFICATION	0.29012262870819333	DESIGN
can happen because of the multiple ways Cache.remove() can be invoked :(	DESIGN	0.9999810028182493	WITHOUT_CLASSIFICATION	1.8997181750716017E-5	DESIGN
work around the "feature" where tree cache is validating the inserted node during the next transaction. no idea...	DESIGN	0.9800312541940767	WITHOUT_CLASSIFICATION	0.01996874580592331	DESIGN
swaldman 2004-02-07: modify to allow null values to signify fall through to c3p0 PoolConfig defaults	DESIGN	0.9999465908314937	WITHOUT_CLASSIFICATION	5.340916850629352E-5	DESIGN
turn hibernate.c3p0. into c3p0., so c3p0 gets a chance to see all hibernate.c3p0.	DESIGN	0.9999986315961202	WITHOUT_CLASSIFICATION	1.3684038797229505E-6	DESIGN
TODO: this bit actually has to be called after all cascades! but since identity insert is called synchronously, instead of asynchronously as other actions, it isn't	DESIGN	0.9856727322594607	DESIGN	0.014327267740539204	WITHOUT_CLASSIFICATION
TODO: reenable if we also fix the above todo	DESIGN	0.9004271226752021	WITHOUT_CLASSIFICATION	0.09957287732479789	DESIGN
TODO: inefficient if that cache is just going to ignore the updated state!	DESIGN	0.9928154864538069	WITHOUT_CLASSIFICATION	0.007184513546193053	DESIGN
we may be screwed here since the collection action is about to execute and we do not know the final owner key value	DESIGN	0.9995441009931804	WITHOUT_CLASSIFICATION	4.558990068196275E-4	DESIGN
Create an action that will evict collection and entity regions based on queryspaces (table names). TODO: cache the autodetected information and pass it in instead.	DESIGN	0.8158240320277972	DESIGN	0.18417596797220276	WITHOUT_CLASSIFICATION
todo : what else to do here?	DESIGN	0.9918169121048199	WITHOUT_CLASSIFICATION	0.008183087895180092	DESIGN
todo : modify the class definition if not already transformed...	DESIGN	0.9998046107730433	WITHOUT_CLASSIFICATION	1.9538922695683583E-4	DESIGN
todo : what else to do here?	DESIGN	0.9918169121048199	WITHOUT_CLASSIFICATION	0.008183087895180092	DESIGN
this is called by SessionFactory irregardless; we just disregard here; could also add a check to SessionFactory to only conditionally call start	DESIGN	0.9999154531719392	WITHOUT_CLASSIFICATION	8.454682806081756E-5	DESIGN
this is called by SessionFactory irregardless; we just disregard here; could also add a check to SessionFactory to only conditionally call stop	DESIGN	0.999789851548059	WITHOUT_CLASSIFICATION	2.1014845194098066E-4	DESIGN
TODO: to handle concurrent writes correctly, this should return a Lock to the client	DESIGN	0.9786094118357551	DESIGN	0.021390588164244818	WITHOUT_CLASSIFICATION
put() has nowait semantics, is this really appropriate? note that it needs to be async replication, never local or sync	DESIGN	0.9676905535591794	DESIGN	0.03230944644082056	WITHOUT_CLASSIFICATION
TODO: to handle concurrent writes correctly, the client should pass in a Lock	DESIGN	0.9589953369206184	WITHOUT_CLASSIFICATION	0.04100466307938157	DESIGN
TODO: assumes all collections disassemble to an array!	DESIGN	0.8744806075137481	WITHOUT_CLASSIFICATION	0.12551939248625194	DESIGN
TODO: reuse the PreLoadEvent	DESIGN	0.9593678026944702	WITHOUT_CLASSIFICATION	0.040632197305529694	DESIGN
todo: this was added to support initializing an entity's EntityEntry snapshot during reattach; this should be refactored to instead expose a method to assemble a EntityEntry based on this state for return.	DESIGN	0.8671015802769935	DESIGN	0.13289841972300653	WITHOUT_CLASSIFICATION
todo : what is the implication of this?	DESIGN	0.9668875783882661	WITHOUT_CLASSIFICATION	0.03311242161173398	DESIGN
use COUNT as the default. This mimics the old behavior, although NONE might be a better option moving forward in the case of callable	DESIGN	0.965362169801963	WITHOUT_CLASSIFICATION	0.03463783019803706	DESIGN
TODO: joinKeyColumnName & foreignKeyColumnName should be called either here or at a slightly higer level in the stack (to get all the information we need) Right now HbmBinder does not support the	DESIGN	0.9999852348676852	DESIGN	1.4765132314873757E-5	WITHOUT_CLASSIFICATION
TODO: suck this into initLaziness!	DESIGN	0.925152529024127	DESIGN	0.07484747097587299	WITHOUT_CLASSIFICATION
we have to set up the table later!! yuck	DESIGN	0.9999989062478185	WITHOUT_CLASSIFICATION	1.093752181505227E-6	DESIGN
TODO: better to degrade to lazy="false" if uninstrumented	DESIGN	0.9537714332877252	DESIGN	0.04622856671227484	WITHOUT_CLASSIFICATION
todo : again, how should this work for non-pojo entities?	DESIGN	0.998674184505309	WITHOUT_CLASSIFICATION	0.0013258154946909845	DESIGN
TODO: this is a bit of copy/paste from IndexedCollection.createPrimaryKey()	DESIGN	0.5944720273118753	DESIGN	0.4055279726881245	WITHOUT_CLASSIFICATION
This inner class implements a case statement....perhaps im being a bit over-clever here	DESIGN	0.9999530376316464	WITHOUT_CLASSIFICATION	4.69623683536089E-5	DESIGN
TODO: bad implementation, cos it depends upon ordering of mapping doc fixing this requires that Collection/PersistentClass gain access to the Mappings reference from Configuration (or the filterDefinitions map directly) sometime during Configuration.buildSessionFactory (after all the types/filter-defs are known and before building persisters).	DESIGN	0.9999903295069392	DESIGN	9.670493060814663E-6	WITHOUT_CLASSIFICATION
use of a stringbuffer to workaround a JDK bug	DESIGN	0.9079235705885638	WITHOUT_CLASSIFICATION	0.09207642941143623	DESIGN
hack/workaround as sqlquery impl depend on having a key.	DESIGN	0.918786955596064	DESIGN	0.08121304440393595	WITHOUT_CLASSIFICATION
FIXME: get the PersistentClass	DESIGN	0.9998249514846321	WITHOUT_CLASSIFICATION	1.750485153678454E-4	DESIGN
FIXME: get the PersistentClass	DESIGN	0.9998249514846321	WITHOUT_CLASSIFICATION	1.750485153678454E-4	DESIGN
Icky workaround for MySQL bug:	DESIGN	0.9746847143897388	WITHOUT_CLASSIFICATION	0.02531528561026122	DESIGN
TODO: Somehow add the newly created foreign keys to the internal collection	DESIGN	0.9942620639569909	WITHOUT_CLASSIFICATION	0.005737936043009118	DESIGN
TODO possibly relax that	DESIGN	0.999167674463225	WITHOUT_CLASSIFICATION	8.32325536774972E-4	DESIGN
TODO possibly relax that	DESIGN	0.999167674463225	WITHOUT_CLASSIFICATION	8.32325536774972E-4	DESIGN
TODO possibly relax that	DESIGN	0.999167674463225	WITHOUT_CLASSIFICATION	8.32325536774972E-4	DESIGN
use of a stringbuffer to workaround a JDK bug	DESIGN	0.9079235705885638	WITHOUT_CLASSIFICATION	0.09207642941143623	DESIGN
use a degenerated strategy for backward compatibility	DESIGN	0.999722936492921	WITHOUT_CLASSIFICATION	2.7706350707901216E-4	DESIGN
Sets can be just a view of a part of another collection. do we need to copy it to be sure it won't be changing underneath us? ie. this.set.addAll(set);	DESIGN	0.9999936394709866	WITHOUT_CLASSIFICATION	6.360529013410567E-6	DESIGN
note that i parameter is now unused (delete it?)	DESIGN	0.999073559741791	WITHOUT_CLASSIFICATION	9.264402582090172E-4	DESIGN
just to help out during the load (ugly, i know)	DESIGN	0.9999998744467936	WITHOUT_CLASSIFICATION	1.2555320635383808E-7	DESIGN
TODO : safe to interpret "map.remove(key) == null" as non-dirty?	DESIGN	0.9223367835957023	WITHOUT_CLASSIFICATION	0.07766321640429773	DESIGN
yick! need this for proper serialization/deserialization handling...	DESIGN	0.9996384873163315	WITHOUT_CLASSIFICATION	3.6151268366847934E-4	DESIGN
TODO: get SQL rendering out of this package!	DESIGN	0.5134168281615409	DESIGN	0.48658317183845906	WITHOUT_CLASSIFICATION
TODO: get SQL rendering out of this package!	DESIGN	0.5134168281615409	DESIGN	0.48658317183845906	WITHOUT_CLASSIFICATION
yuck!	DESIGN	0.9942371564521288	WITHOUT_CLASSIFICATION	0.005762843547871174	DESIGN
TODO: get SQL rendering out of this package!	DESIGN	0.5134168281615409	DESIGN	0.48658317183845906	WITHOUT_CLASSIFICATION
TODO : not sure this is correct, could not find docs on how to do this.	DESIGN	0.6619253578518453	DESIGN	0.33807464214815475	WITHOUT_CLASSIFICATION
HSQL has no Blob/Clob support .... but just put these here for now!	DESIGN	0.9996796088947292	WITHOUT_CLASSIFICATION	3.2039110527076184E-4	DESIGN
does this need holdlock also? : return tableName + " with (updlock, rowlock, holdlock)";	DESIGN	0.9992654158740499	WITHOUT_CLASSIFICATION	7.345841259500594E-4	DESIGN
sql-server, at least needed this dropped after use; strange!	DESIGN	0.9999592602623204	WITHOUT_CLASSIFICATION	4.07397376795203E-5	DESIGN
todo : is there really any reason to kkeep trying if this fails once?	DESIGN	0.9998893967864031	WITHOUT_CLASSIFICATION	1.1060321359687915E-4	DESIGN
TBD should this be varbinary($1)? registerColumnType(Types.VARBINARY, "binary($1)");	DESIGN	0.9973170100331262	WITHOUT_CLASSIFICATION	0.0026829899668737007	DESIGN
is it necessary to register %exact since it can only appear in a where clause?	DESIGN	0.9892912705332683	WITHOUT_CLASSIFICATION	0.010708729466731797	DESIGN
xmlforest requires a new kind of function constructor	DESIGN	0.9999821593017094	WITHOUT_CLASSIFICATION	1.7840698290643108E-5	DESIGN
Does this dialect support the ALTER TABLE syntax?	DESIGN	0.9993585323313516	WITHOUT_CLASSIFICATION	6.41467668648335E-4	DESIGN
Do we need to qualify index names with the schema name?	DESIGN	0.9996371879457032	WITHOUT_CLASSIFICATION	3.628120542966629E-4	DESIGN
Does this dialect support the UNIQUE column syntax?	DESIGN	0.9926433908562539	WITHOUT_CLASSIFICATION	0.0073566091437460915	DESIGN
Does this dialect support check constraints?	DESIGN	0.9999645228262973	WITHOUT_CLASSIFICATION	3.5477173702599165E-5	DESIGN
Do we need to drop constraints before dropping tables in this dialect?	DESIGN	0.9999437048186001	WITHOUT_CLASSIFICATION	5.629518139996286E-5	DESIGN
Does this dialect support the FOR UPDATE syntax?	DESIGN	0.9997154648980736	WITHOUT_CLASSIFICATION	2.845351019263897E-4	DESIGN
Does this dialect support the Oracle-style FOR UPDATE NOWAIT syntax?	DESIGN	0.9998222373780727	WITHOUT_CLASSIFICATION	1.7776262192725073E-4	DESIGN
Does this dialect support FOR UPDATE OF, allowing particular rows to be locked?	DESIGN	0.9273435488749622	WITHOUT_CLASSIFICATION	0.0726564511250378	DESIGN
note there is a wierd implementation in the client side	DESIGN	0.9999667902657611	WITHOUT_CLASSIFICATION	3.320973423889494E-5	DESIGN
TODO: never reached, since getTypeName() actually throws an exception!	DESIGN	0.8961826711494814	WITHOUT_CLASSIFICATION	0.10381732885051864	DESIGN
todo : should we additionally check the current isolation mode explicitly?	DESIGN	0.8916662127743652	WITHOUT_CLASSIFICATION	0.1083337872256349	DESIGN
todo : remove this and just have subclasses use Isolater/IsolatedWork directly...	DESIGN	0.9984769946146962	WITHOUT_CLASSIFICATION	0.0015230053853037902	DESIGN
TODO: should orphans really be deleted during lock???	DESIGN	0.9456649784729074	DESIGN	0.054335021527092554	WITHOUT_CLASSIFICATION
orphans should not be deleted during merge??	DESIGN	0.9869658853294498	WITHOUT_CLASSIFICATION	0.01303411467055021	DESIGN
orphans should not be deleted during copy??	DESIGN	0.9975424598183135	WITHOUT_CLASSIFICATION	0.0024575401816865836	DESIGN
I suppose?	DESIGN	0.99957354328307	WITHOUT_CLASSIFICATION	4.264567169299594E-4	DESIGN
TODO: suck this logic into the collection!	DESIGN	0.9968422827374949	DESIGN	0.0031577172625052185	WITHOUT_CLASSIFICATION
TODO: an alternative is to check if the owner has changed; if it hasn't then get the ID from collection.getOwner()	DESIGN	0.9996527010823012	WITHOUT_CLASSIFICATION	3.472989176987731E-4	DESIGN
TODO:refactor + make this method private	DESIGN	0.9744291740792225	WITHOUT_CLASSIFICATION	0.025570825920777477	DESIGN
todo : we can actually just determine this from the incoming EntityEntry-s	DESIGN	0.9987278465607575	WITHOUT_CLASSIFICATION	0.0012721534392424198	DESIGN
TODO: Should this be an InitializeEntityEventListener??? (watch out for performance!)	DESIGN	0.9606909781414775	DESIGN	0.03930902185852258	WITHOUT_CLASSIFICATION
TODO: better to pass the id in as an argument?	DESIGN	0.8662864124399702	DESIGN	0.13371358756002996	WITHOUT_CLASSIFICATION
todo : potentially look at optimizing these two arrays	DESIGN	0.9998960255402075	WITHOUT_CLASSIFICATION	1.0397445979251158E-4	DESIGN
trim done to workaround stupid oracle bug that cant handle whitespaces before a { in a sp	DESIGN	0.7133122841126431	WITHOUT_CLASSIFICATION	0.28668771588735675	DESIGN
trim done to workaround stupid oracle bug that cant handle whitespaces before a { in a sp	DESIGN	0.7133122841126431	WITHOUT_CLASSIFICATION	0.28668771588735675	DESIGN
TODO: temporary	DESIGN	0.9600612852124272	DESIGN	0.03993871478757281	WITHOUT_CLASSIFICATION
TODO: not quite sure about the full implications of this!	DESIGN	0.7339587156279207	DESIGN	0.2660412843720792	WITHOUT_CLASSIFICATION
TODO: not quite sure about the full implications of this!	DESIGN	0.7339587156279207	DESIGN	0.2660412843720792	WITHOUT_CLASSIFICATION
TODO: ugly here:	DESIGN	0.8451735618029419	WITHOUT_CLASSIFICATION	0.15482643819705813	DESIGN
this is kinda the best we can do...	DESIGN	0.9998832249208252	WITHOUT_CLASSIFICATION	1.1677507917483824E-4	DESIGN
TODO: this needn't exclude subclasses...	DESIGN	0.9832438219673714	DESIGN	0.01675617803262872	WITHOUT_CLASSIFICATION
todo : need map? the prob is a proper key, right?	DESIGN	0.9992239667723251	WITHOUT_CLASSIFICATION	7.760332276749061E-4	DESIGN
todo : i'd much rather have this done from #endLoadingCollection(CollectionPersister,LoadingCollectionEntry)...	DESIGN	0.9986417157955202	WITHOUT_CLASSIFICATION	0.001358284204479738	DESIGN
todo : hack!!! NOTE : here we cleanup the load context when we have no more local LCE entries. This "works" for the time being because really only the collection load contexts are implemented. Long term, this cleanup should become part of the "close result set" processing from the (sandbox/jdbc) jdbc-container code.	DESIGN	0.7596201669807815	DESIGN	0.24037983301921853	WITHOUT_CLASSIFICATION
todo : should really move this log statement to CollectionType, where this is used from...	DESIGN	0.9426626993819629	WITHOUT_CLASSIFICATION	0.057337300618037025	DESIGN
TODO : keep seperate notions of QT[] here for shallow/non-shallow queries...	DESIGN	0.8814329113810186	WITHOUT_CLASSIFICATION	0.11856708861898138	DESIGN
TODO : add this info to the translator and aggregate it here...	DESIGN	0.652015577158702	WITHOUT_CLASSIFICATION	0.3479844228412981	DESIGN
TODO: move into collection type, so we can use polymorphism!	DESIGN	0.9896851077084645	DESIGN	0.010314892291535578	WITHOUT_CLASSIFICATION
todo : should we check the current isolation mode explicitly?	DESIGN	0.7927315787938259	WITHOUT_CLASSIFICATION	0.2072684212061741	DESIGN
TODO: suck into event class	DESIGN	0.7700919446792163	WITHOUT_CLASSIFICATION	0.2299080553207837	DESIGN
do we even really need this? the update will fail anyway....	DESIGN	0.9990836128474153	WITHOUT_CLASSIFICATION	9.163871525848313E-4	DESIGN
hum ... should we cascade anyway? throw an exception? fine like it is?	DESIGN	0.9773273606150417	DESIGN	0.02267263938495834	WITHOUT_CLASSIFICATION
TODO: would it be better to do a refresh from db?	DESIGN	0.9958562189974839	DESIGN	0.0041437810025160785	WITHOUT_CLASSIFICATION
TODO: we use two visitors here, inefficient!	DESIGN	0.694879895052225	WITHOUT_CLASSIFICATION	0.3051201049477749	DESIGN
this class has no proxies (so do a shortcut)	DESIGN	0.9996811994066865	WITHOUT_CLASSIFICATION	3.1880059331354526E-4	DESIGN
PostLoad is needed for EJB3 TODO: reuse the PostLoadEvent...	DESIGN	0.8910626102199409	DESIGN	0.10893738978005915	WITHOUT_CLASSIFICATION
TODO: put this stuff back in to read snapshot from the second-level cache (needs some extra work)	DESIGN	0.9964343735768948	DESIGN	0.003565626423105104	WITHOUT_CLASSIFICATION
null or brand new collection this will also (inefficiently) handle arrays, which have no snapshot, so we can't do any better	DESIGN	0.9972392555564327	WITHOUT_CLASSIFICATION	0.0027607444435673164	DESIGN
TODO: is this 100% correct?	DESIGN	0.7653155978561226	WITHOUT_CLASSIFICATION	0.23468440214387742	DESIGN
TODO: iteratively get transient entities and retry merge until one of the following conditions: 1) transientCopyCache.size() == 0 2) transientCopyCache.size() is not decreasing and copyCache.size() is not increasing TODO: find out if retrying can add entities to copyCache (don't think it can...) For now, just retry once; throw TransientObjectException if there are still any transient entities	DESIGN	0.9999999632673333	WITHOUT_CLASSIFICATION	3.673266662205546E-8	DESIGN
entity name will not be available for non-POJO entities TODO: cache the entity name somewhere so that it is available to this exception	DESIGN	0.997875690408552	DESIGN	0.0021243095914480216	WITHOUT_CLASSIFICATION
TODO: we should throw an exception if we really know for sure that this is a detached instance, rather than just assuming throw new StaleObjectStateException(entityName, id);	DESIGN	0.9209594272222171	DESIGN	0.07904057277778295	WITHOUT_CLASSIFICATION
TODO : perhaps we should additionally require that the incoming entity version be equivalent to the defined unsaved-value?	DESIGN	0.9998845777601054	DESIGN	1.1542223989465077E-4	WITHOUT_CLASSIFICATION
perhaps this should be an exception since it is only ever used in the above method?	DESIGN	0.7748444454247274	WITHOUT_CLASSIFICATION	0.22515555457527267	DESIGN
Put a placeholder in entries, so we don't recurse back and try to save() the same object again. QUESTION: should this be done before onSave() is called? likewise, should it be done before onUpdate()?	DESIGN	0.850596134806808	WITHOUT_CLASSIFICATION	0.14940386519319196	DESIGN
TODO: merge into one method!	DESIGN	0.699387561889511	DESIGN	0.3006124381104888	WITHOUT_CLASSIFICATION
TODO: refactor to .sql package	DESIGN	0.6933133715140416	DESIGN	0.30668662848595846	WITHOUT_CLASSIFICATION
Provides query splitting methods, which were originally in QueryTranslator. <br> TODO: This will need to be refactored at some point. @author josh	DESIGN	0.9983356990152761	DESIGN	0.0016643009847239845	WITHOUT_CLASSIFICATION
TODO: this is one of the ugliest and most fragile pieces of code in Hibernate....	DESIGN	0.8049334703831028	DESIGN	0.19506652961689716	WITHOUT_CLASSIFICATION
todo : temporary needed because currently persister is the one that creates and renders the join fragments for inheritence hierarchies...	DESIGN	0.996002764452145	WITHOUT_CLASSIFICATION	0.003997235547855057	DESIGN
TODO : better way?!?	DESIGN	0.9625694142217472	DESIGN	0.03743058577825285	WITHOUT_CLASSIFICATION
Not possible to simply re-use the versionPropertyNode here as it causes OOM errors due to circularity :(	DESIGN	0.9999760816517187	WITHOUT_CLASSIFICATION	2.3918348281211817E-5	DESIGN
TODO:this is only needed during compilation .. can we eliminate the instvar?	DESIGN	0.9909902533501866	DESIGN	0.009009746649813341	WITHOUT_CLASSIFICATION
TODO : this is a bit dodgy, come up with a better way to check this (plus see above comment)	DESIGN	0.9675059281116984	DESIGN	0.032494071888301536	WITHOUT_CLASSIFICATION
even here, if only properties mapped to the "base table" are referenced in the set and where clauses, this could be handled by the BasicDelegate. TODO : decide if it is better performance-wise to perform that check, or to simply use the MultiTableUpdateDelegate	DESIGN	0.9811085253165468	DESIGN	0.018891474683453275	WITHOUT_CLASSIFICATION
TODO: switch statements are always evil! We already had bugs because of forgotten token types. Use polymorphism for this!	DESIGN	0.9425516831626399	WITHOUT_CLASSIFICATION	0.05744831683736015	DESIGN
TODO : we really need to be able to deal with component paths here also; this is difficult because the hql-sql grammar expects all those node types to be FromReferenceNodes. One potential fix here would be to convert the IntoClause to just use a FromClause/FromElement combo (as a child of the InsertStatement) and move all this logic into the InsertStatement. That's probably the easiest approach (read: least amount of changes to the grammar and code), but just doesn't feel right as then an insert would contain 2 from-clauses	DESIGN	0.993388950029512	DESIGN	0.006611049970487967	WITHOUT_CLASSIFICATION
really there are two situations where it should be ok to allow the insertion into properties defined on a superclass: 1) union-subclass with an abstract root entity 2) discrim-subclass #1 is handled already because of the fact that UnionSubclassPersister alreay always returns 0 for this call... we may want to disallow it for discrim-subclass just for consistency-sake (currently does not work anyway)...	DESIGN	0.9915577496731737	DESIGN	0.008442250326826382	WITHOUT_CLASSIFICATION
yuck!	DESIGN	0.9942371564521288	WITHOUT_CLASSIFICATION	0.005762843547871174	DESIGN
implicit joins are always(?) ok to reuse	DESIGN	0.999617890879729	WITHOUT_CLASSIFICATION	3.821091202709741E-4	DESIGN
TODO : we may also want to check that the types here map to exactly one column/JDBC-type can't think of a situation where arithmetic expression between multi-column mappings makes any sense.	DESIGN	0.9999999391441369	DESIGN	6.085586314059454E-8	WITHOUT_CLASSIFICATION
we do not know either type BLIND GUESS!	DESIGN	0.9999589140800424	WITHOUT_CLASSIFICATION	4.108591995750318E-5	DESIGN
TODO: used to be exprNoParens! was this needed?	DESIGN	0.9999988581880459	DESIGN	1.141811954142211E-6	WITHOUT_CLASSIFICATION
TODO: Replace this with a more elegant solution.	DESIGN	0.9999779976559479	DESIGN	2.200234405212357E-5	WITHOUT_CLASSIFICATION
TODO: Should this really return null? If not, figure out something better to do here.	DESIGN	0.9116945182649521	DESIGN	0.0883054817350479	WITHOUT_CLASSIFICATION
TODO: get SQL rendering out of this package!	DESIGN	0.5134168281615409	DESIGN	0.48658317183845906	WITHOUT_CLASSIFICATION
yuck!	DESIGN	0.9942371564521288	WITHOUT_CLASSIFICATION	0.005762843547871174	DESIGN
ignore it; the incoming property could not be found so we cannot be sure what to do here. At the very least, the safest is to simply not apply any dereference toggling...	DESIGN	0.9985016435878525	WITHOUT_CLASSIFICATION	0.0014983564121474062	DESIGN
TODO : most of below was taken verbatim from DotNode; should either delegate this logic or super-type it	DESIGN	0.951503984905169	DESIGN	0.04849601509483093	WITHOUT_CLASSIFICATION
otherwise, a trim-specification and/or a trim-character have been specified; we need to decide which options are present and "do the right thing" should leading trim-characters be trimmed? should trailing trim-characters be trimmed? the trim-character the trim-source	DESIGN	0.5503630062121588	WITHOUT_CLASSIFICATION	0.4496369937878411	DESIGN
todo: we should really just collect these from the various SelectExpressions, rather than regenerating here	DESIGN	0.998180452279636	WITHOUT_CLASSIFICATION	0.001819547720363861	DESIGN
TODO: is this a bit ugly?	DESIGN	0.7600782101831863	WITHOUT_CLASSIFICATION	0.2399217898168136	DESIGN
Need a better way to define the suffixes here...	DESIGN	0.9569565814599438	WITHOUT_CLASSIFICATION	0.04304341854005618	DESIGN
TODO: something much better - look at the type of the other expression! TODO: Have comparisonExpression and/or arithmeticExpression rules complete the resolution of boolean nodes.	DESIGN	0.9999323882887071	DESIGN	6.761171129283812E-5	WITHOUT_CLASSIFICATION
TODO : what amount of significant digits need to be supported here? - from the DecimalFormat docs: [significant digits] = [minimum integer digits] + [maximum fraction digits]	DESIGN	0.9998529807852818	DESIGN	1.4701921471806795E-4	WITHOUT_CLASSIFICATION
Needed the "clazz_" check to work around union-subclasses TODO : is there a way to tell whether a persister is truly discrim-column based inheritence?	DESIGN	0.9999571819989599	DESIGN	4.281800104015909E-5	WITHOUT_CLASSIFICATION
We should actually rework this class to not implement Parser and just process path expressions in the most convenient way.	DESIGN	0.8494103030534185	WITHOUT_CLASSIFICATION	0.1505896969465816	DESIGN
The class is now way to complex!	DESIGN	0.9999416286660772	WITHOUT_CLASSIFICATION	5.837133392283958E-5	DESIGN
TODO: get SQL rendering out of here	DESIGN	0.9355291499241903	WITHOUT_CLASSIFICATION	0.06447085007580963	DESIGN
TODO: is there a better way?	DESIGN	0.9652495702236096	DESIGN	0.03475042977639047	WITHOUT_CLASSIFICATION
Must be done here because of side-effect! yuck...	DESIGN	0.9995120935962012	WITHOUT_CLASSIFICATION	4.8790640379885424E-4	DESIGN
name from a super query (a bit inelegant that it shows up here)	DESIGN	0.996197041596871	WITHOUT_CLASSIFICATION	0.0038029584031290626	DESIGN
We should reengineer this class so that, rather than the current ad - hoc linear approach to processing a stream of tokens, we instead build up a tree of expressions.	DESIGN	0.7264901556498574	DESIGN	0.2735098443501425	WITHOUT_CLASSIFICATION
this is ugly here, but needed because its a subquery	DESIGN	0.9925779697478497	WITHOUT_CLASSIFICATION	0.00742203025215034	DESIGN
unhappy about this being public ... is there a better way?	DESIGN	0.766520232270704	WITHOUT_CLASSIFICATION	0.23347976772929607	DESIGN
Make sure this is a defined parameter and check the incoming value type TODO: what should be the actual exception type here?	DESIGN	0.9999304013729261	DESIGN	6.959862707392369E-5	WITHOUT_CLASSIFICATION
TODO : this constructor form is only used from constructor directly below us; can it go away?	DESIGN	0.9955890644194209	DESIGN	0.004410935580579096	WITHOUT_CLASSIFICATION
TODO: COPY/PASTE FROM SessionImpl, pull up!	DESIGN	0.6378239844425576	DESIGN	0.36217601555744233	WITHOUT_CLASSIFICATION
TODO : should remove this exposure and have all references to the session's batcher use the ConnectionManager.	DESIGN	0.9488385004477329	DESIGN	0.0511614995522671	WITHOUT_CLASSIFICATION
todo : should this get moved to PersistentContext? logically, is PersistentContext the "thing" to which an interceptor gets attached?	DESIGN	0.569590245848668	DESIGN	0.43040975415133204	WITHOUT_CLASSIFICATION
TODO: what type?	DESIGN	0.5800484175385356	WITHOUT_CLASSIFICATION	0.41995158246146447	DESIGN
todo : should seriously consider not allowing a txn to begin from a child session can always route the request to the root session...	DESIGN	0.9997466745548873	WITHOUT_CLASSIFICATION	2.5332544511268737E-4	DESIGN
short-circuit for performance...	DESIGN	0.9999383755837344	WITHOUT_CLASSIFICATION	6.162441626549986E-5	DESIGN
not absolutely necessary, but does help with aggressive release	DESIGN	0.9999899387693235	WITHOUT_CLASSIFICATION	1.0061230676490243E-5	DESIGN
TODO : remove these last two as batcher is no longer managing connections	DESIGN	0.7317590488384623	DESIGN	0.2682409511615377	WITHOUT_CLASSIFICATION
work around a bug in all known connection pools....	DESIGN	0.9984882948518534	WITHOUT_CLASSIFICATION	0.0015117051481465772	DESIGN
TODO : make this the factory for "entity mode related" sessions; also means making this the target of transaction-synch and the thing that knows how to cascade things between related sessions At that point, perhaps this thing is a "SessionContext", and ConnectionManager is a "JDBCContext"? A "SessionContext" should live in the impl package...	DESIGN	0.999997146569075	DESIGN	2.853430925069994E-6	WITHOUT_CLASSIFICATION
TODO: does this really need to be here? does the collection already have it's own up-to-date snapshot?	DESIGN	0.9665119569463982	DESIGN	0.03348804305360184	WITHOUT_CLASSIFICATION
TODO: the i==entitySpan-1 bit depends upon subclass implementation (very bad)	DESIGN	0.8109903458731753	DESIGN	0.18900965412682463	WITHOUT_CLASSIFICATION
This form used from annotations (?). Essentially the same as the above using a resultset-mapping reference, but without cacheMode, readOnly, and comment. FIXME: annotations do not use it, so it can be remove from my POV @deprecated @param query The sql query string @param resultSetRef The result-set-mapping name @param querySpaces Any specified query spaces (used for auto-flushing) @param cacheable Whether the query results are cacheable @param cacheRegion If cacheable, the region into which to store the results @param timeout A JDBC-level timeout to be applied @param fetchSize A JDBC-level fetch-size to be applied @param flushMode The flush mode to use for this query @param parameterTypes parameter type map @param callable Does the query string represent a callable object (i.e., proc)	DESIGN	0.5420183454217694	WITHOUT_CLASSIFICATION	0.4579816545782304	DESIGN
todo : add the notion of enabled filters to the CacheKey to differentiate filtered collections from non-filtered; but CacheKey is currently used for both collections and entities; would ideally need to define two seperate ones; currently this works in conjuction with the check on DefaultInitializeCollectionEventHandler.initializeCollectionFromCache() (which makes sure to not read from cache with enabled filters). EARLY EXIT!!!!!	DESIGN	0.9999993759590421	WITHOUT_CLASSIFICATION	6.240409577902588E-7	DESIGN
for sets, we should end the collection load after resolving the entities, since we might call hashCode() on the elements TODO: or we could do this polymorphically, and have two different operations implemented differently for arrays	DESIGN	0.9463114555005115	DESIGN	0.053688544499488386	WITHOUT_CLASSIFICATION
This is not very nice (and quite slow):	DESIGN	0.999969710915244	WITHOUT_CLASSIFICATION	3.0289084755939372E-5	DESIGN
use of trim() here is ugly?	DESIGN	0.9999985972780235	WITHOUT_CLASSIFICATION	1.402721976414052E-6	DESIGN
TODO: this is too conservative; if all preceding joins were also inner joins, we could use an inner join here	DESIGN	0.8862942283187454	WITHOUT_CLASSIFICATION	0.11370577168125455	DESIGN
TODO: look at the owning property and check that it isn't lazy (by instrumentation)	DESIGN	0.8606566695511428	WITHOUT_CLASSIFICATION	0.1393433304488572	DESIGN
TODO: inefficient	DESIGN	0.8940391943317565	WITHOUT_CLASSIFICATION	0.10596080566824351	DESIGN
why does this matter?	DESIGN	0.9993367849297575	WITHOUT_CLASSIFICATION	6.632150702424959E-4	DESIGN
from the collection of associations, locate OJA for the ManyToOne corresponding to this persister to fully define the many-to-many; we need that OJA so that we can use its alias here TODO : is there a better way here?	DESIGN	0.9999998101255815	DESIGN	1.8987441839352969E-7	WITHOUT_CLASSIFICATION
TODO: this class depends directly upon CriteriaImpl, in the impl package ... add a CriteriaImplementor interface	DESIGN	0.9999223709215844	DESIGN	7.762907841562137E-5	WITHOUT_CLASSIFICATION
TODO: add a CriteriaImplementor interface this class depends directly upon CriteriaImpl in the impl package...	DESIGN	0.9963961465971714	DESIGN	0.0036038534028286023	WITHOUT_CLASSIFICATION
TODO : not so sure this is needed...	DESIGN	0.9984615547365919	DESIGN	0.0015384452634080177	WITHOUT_CLASSIFICATION
meant to handle dynamic instantiation queries...(Copy from QueryLoader)	DESIGN	0.9998080252095731	WITHOUT_CLASSIFICATION	1.9197479042690134E-4	DESIGN
TODO: The order in which entities are saved may matter (e.g., a particular transient entity may need to be saved before other transient entities can be saved; Keep retrying the batch of transient entities until either: 1) there are no transient entities left in transientCopyCache or 2) no transient entities were saved in the last batch For now, just run through the transient entities and retry the merge	DESIGN	0.9919298644796279	WITHOUT_CLASSIFICATION	0.008070135520372161	DESIGN
todo: this might really even be moved into the cfg package and used as the basis for all things which are configurable.	DESIGN	0.9927660113002643	DESIGN	0.00723398869973568	WITHOUT_CLASSIFICATION
todo : currently expects that the individual with expressions apply to the same sql table join. This may not be the case for joined-subclass where the property values might be coming from different tables in the joined hierarchy. At some point we should expand this to support that capability. However, that has some difficulties: 1) the biggest is how to handle ORs when the individual comparisons are linked to different sql joins. 2) here we would need to track each comparison individually, along with the join alias to which it applies and then pass that information back to the FromElement so it can pass it along to the JoinSequence	DESIGN	0.7829945926122023	WITHOUT_CLASSIFICATION	0.21700540738779772	DESIGN
this function has a template -> restore output, apply the template and write the result out TODO: Downcast to avoid using an interface? Yuck.	DESIGN	0.7148945164713087	DESIGN	0.28510548352869125	WITHOUT_CLASSIFICATION
at some point the generate phase needs to be moved out of here, because a single object-level DML might spawn multiple SQL DML command executions. Possible to just move the sql generation for dml stuff, but for consistency-sake probably best to just move responsiblity for the generation phase completely into the delegates (QueryLoader/StatementExecutor) themselves. Also, not sure why QueryLoader currently even has a dependency on this at all; does it need it? Ideally like to see the walker itself given to the delegates directly...	DESIGN	0.9055996619644853	DESIGN	0.09440033803551473	WITHOUT_CLASSIFICATION
get the right object from the list ... would it be easier to just call getEntity() ??	DESIGN	0.997161720390228	WITHOUT_CLASSIFICATION	0.0028382796097721043	DESIGN
TODO should we just collect these like with the collections above?	DESIGN	0.7754342437909919	DESIGN	0.22456575620900812	WITHOUT_CLASSIFICATION
todo : better to handle dynamic filters through implicit DynamicFilterParameterSpecification see the discussion there in DynamicFilterParameterSpecification's javadocs as to why it is currently not done that way.	DESIGN	0.8963024782949065	DESIGN	0.10369752170509348	WITHOUT_CLASSIFICATION
/ USED ONLY FOR REGRESSION TESTING!!!! todo : obviously get rid of all this junk ;) /	DESIGN	0.9999798928645359	WITHOUT_CLASSIFICATION	2.0107135464008492E-5	DESIGN
create an index on the key columns??	DESIGN	0.9997955937539433	WITHOUT_CLASSIFICATION	2.044062460565923E-4	DESIGN
TODO: deprecated, remove eventually	DESIGN	0.9809258204366167	DESIGN	0.01907417956338331	WITHOUT_CLASSIFICATION
create an index on the key columns??	DESIGN	0.9997955937539433	WITHOUT_CLASSIFICATION	2.044062460565923E-4	DESIGN
TODO: improve this hack!	DESIGN	0.8966830160370994	DESIGN	0.10331698396290058	WITHOUT_CLASSIFICATION
inheritance cycle detection (paranoid check)	DESIGN	0.9998957264743293	WITHOUT_CLASSIFICATION	1.0427352567065616E-4	DESIGN
TODO: remove use of instanceof!	DESIGN	0.5489678921254962	WITHOUT_CLASSIFICATION	0.45103210787450376	DESIGN
shortcut	DESIGN	0.9999286004749478	WITHOUT_CLASSIFICATION	7.139952505218603E-5	DESIGN
TODO: handle the case of a foreign key to something other than the pk	DESIGN	0.9942253453861338	WITHOUT_CLASSIFICATION	0.005774654613866255	DESIGN
create an index on the key columns??	DESIGN	0.9997955937539433	WITHOUT_CLASSIFICATION	2.044062460565923E-4	DESIGN
todo : remove	DESIGN	0.9999461360027071	WITHOUT_CLASSIFICATION	5.386399729279957E-5	DESIGN
todo : remove	DESIGN	0.9999461360027071	WITHOUT_CLASSIFICATION	5.386399729279957E-5	DESIGN
todo : remove	DESIGN	0.9999461360027071	WITHOUT_CLASSIFICATION	5.386399729279957E-5	DESIGN
todo : throw exception?	DESIGN	0.9954240254053386	WITHOUT_CLASSIFICATION	0.004575974594661463	DESIGN
todo : throw exception? maybe warn if not the same?	DESIGN	0.8261078761917204	DESIGN	0.17389212380827956	WITHOUT_CLASSIFICATION
TODO: make EntityPersister not depend on SessionFactoryImplementor interface, if possible	DESIGN	0.9994390897976482	DESIGN	5.60910202351827E-4	WITHOUT_CLASSIFICATION
TODO: is there a more elegant way than downcasting?	DESIGN	0.9886819797932421	DESIGN	0.011318020206757968	WITHOUT_CLASSIFICATION
TODO: encapsulate the protected instance variables!	DESIGN	0.8308538973275506	WITHOUT_CLASSIFICATION	0.16914610267244948	DESIGN
should indicate that we are processing an INSERT/UPDATE/DELETE query with a subquery implied via a collection property function. Here, we need to use the table name itself as the qualification alias. TODO : verify this works for all databases... TODO : is this also the case in non-"indexed" scenarios?	DESIGN	0.9999029956104429	DESIGN	9.70043895570682E-5	WITHOUT_CLASSIFICATION
TODO: copy/paste from insertRows()	DESIGN	0.9941230827492807	WITHOUT_CLASSIFICATION	0.005876917250719261	DESIGN
TODO: copy/paste from recreate()	DESIGN	0.9858763179103494	WITHOUT_CLASSIFICATION	0.014123682089650737	DESIGN
should this interface extend PropertyMapping?	DESIGN	0.5655723041727141	WITHOUT_CLASSIFICATION	0.43442769582728585	DESIGN
ie. the subquery! yuck!	DESIGN	0.9999401638332528	WITHOUT_CLASSIFICATION	5.983616674713913E-5	DESIGN
TODO: move to .sql package!!	DESIGN	0.9499091860895671	DESIGN	0.050090813910433005	WITHOUT_CLASSIFICATION
TODO: code duplication with SingleTableEntityPersister	DESIGN	0.9986977147653796	DESIGN	0.0013022852346203366	WITHOUT_CLASSIFICATION
TODO: It would be really, really nice to use this to also model components!	DESIGN	0.9997386927422908	DESIGN	2.61307257709246E-4	WITHOUT_CLASSIFICATION
TODO: two hashmap lookups here is one too many...	DESIGN	0.7641172365787963	DESIGN	0.2358827634212037	WITHOUT_CLASSIFICATION
TODO: code duplication with JoinedSubclassEntityPersister	DESIGN	0.9997197995457328	DESIGN	2.802004542672975E-4	WITHOUT_CLASSIFICATION
perhaps not really necessary...	DESIGN	0.9999389615802794	WITHOUT_CLASSIFICATION	6.10384197205865E-5	DESIGN
NOTE: this assumes something about how propertySelectFragment is implemented by the subclass! was toUnqotedAliasStrings( getIdentiferColumnNames() ) before - now tried to remove that unqoting and missing aliases..	DESIGN	0.9986073460882625	WITHOUT_CLASSIFICATION	0.0013926539117375186	DESIGN
NOTE: this assumes something about how propertySelectFragment is implemented by the subclass! was toUnqotedAliasStrings( getdiscriminatorColumnName() ) before - now tried to remove that unqoting and missing aliases..	DESIGN	0.9998405658959458	WITHOUT_CLASSIFICATION	1.5943410405410205E-4	DESIGN
TODO: should we use SELECT .. FOR UPDATE?	DESIGN	0.9292238960509869	DESIGN	0.07077610394901312	WITHOUT_CLASSIFICATION
TODO: optimize this better!	DESIGN	0.6532179045695414	DESIGN	0.3467820954304587	WITHOUT_CLASSIFICATION
TODO: should we allow suffixes on these ?	DESIGN	0.9886627654225816	DESIGN	0.011337234577418342	WITHOUT_CLASSIFICATION
This is really ugly, but necessary:	DESIGN	0.9999379733315382	WITHOUT_CLASSIFICATION	6.202666846180215E-5	DESIGN
ugly little workaround for fact that createUniqueKeyLoaders() does not handle component properties	DESIGN	0.5672284658296479	DESIGN	0.4327715341703521	WITHOUT_CLASSIFICATION
TODO: disable batch loading if lockMode > READ?	DESIGN	0.7607013499454739	WITHOUT_CLASSIFICATION	0.23929865005452625	DESIGN
append the SQL to return the generated identifier TODO: suck into Insert	DESIGN	0.621779743910694	WITHOUT_CLASSIFICATION	0.37822025608930593	DESIGN
TODO: I am not so sure about the exception handling in this bit!	DESIGN	0.7023924798906561	DESIGN	0.29760752010934394	WITHOUT_CLASSIFICATION
TODO: is this really necessary????	DESIGN	0.90589545085161	DESIGN	0.09410454914838993	WITHOUT_CLASSIFICATION
TODO: move to .sql package, and refactor with similar things!	DESIGN	0.972381105664278	DESIGN	0.027618894335721955	WITHOUT_CLASSIFICATION
TODO: implement functionality this might be painful to do here, as the "join post processing" for the subquery has already been performed (meaning that for theta-join dialects, the join conditions have already been moved over to the where clause). A "simple" solution here might to perform "join post processing" once for the entire query (including any subqueries) at one fell swoop	DESIGN	0.9999989868608434	DESIGN	1.013139156543064E-6	WITHOUT_CLASSIFICATION
todo : this eventually needs to be removed	DESIGN	0.7988736469661889	WITHOUT_CLASSIFICATION	0.2011263530338111	DESIGN
kinda ugly, but needed for collections with a "." node mapping	DESIGN	0.9990262596977232	WITHOUT_CLASSIFICATION	9.737403022767777E-4	DESIGN
is this ok?	DESIGN	0.99998210203621	WITHOUT_CLASSIFICATION	1.7897963789932934E-5	DESIGN
TODO: perhaps this should be some other RuntimeException...	DESIGN	0.9948655551183473	DESIGN	0.005134444881652637	WITHOUT_CLASSIFICATION
TODO: make this a bit nicer	DESIGN	0.8253440237205742	DESIGN	0.1746559762794258	WITHOUT_CLASSIFICATION
Yuck:	DESIGN	0.9980821376458442	WITHOUT_CLASSIFICATION	0.0019178623541557228	DESIGN
TODO: we should provide some way to get keys of collection of statistics to make it easier to retrieve from a GUI perspective	DESIGN	0.5039727612885189	WITHOUT_CLASSIFICATION	0.49602723871148113	DESIGN
@return collection removal FIXME: even if isInverse="true"?	DESIGN	0.8930927269772139	WITHOUT_CLASSIFICATION	0.10690727302278606	DESIGN
TODO : will need reference to session factory to fully complete HHH-1907	DESIGN	0.9878215525635272	DESIGN	0.012178447436472721	WITHOUT_CLASSIFICATION
TODO: currently keeps Getters and Setters (instead of PropertyAccessors) because of the way getGetter() and getSetter() are implemented currently; yuck!	DESIGN	0.9707096195428647	DESIGN	0.02929038045713531	WITHOUT_CLASSIFICATION
TODO: redesign how PropertyAccessors are acquired...	DESIGN	0.6696879520510589	DESIGN	0.330312047948941	WITHOUT_CLASSIFICATION
todo : YUCK!!!	DESIGN	0.9999623289489806	WITHOUT_CLASSIFICATION	3.767105101935014E-5	DESIGN
TODO : YUCK!!! fix after HHH-1907 is complete	DESIGN	0.9764746372825314	DESIGN	0.023525362717468593	WITHOUT_CLASSIFICATION
TODO: need to make the majority of this functionality into a top-level support class for custom impl support	DESIGN	0.9999533489578836	DESIGN	4.6651042116394645E-5	WITHOUT_CLASSIFICATION
TODO: design new lifecycle for ProxyFactory	DESIGN	0.8757166219636334	WITHOUT_CLASSIFICATION	0.12428337803636655	DESIGN
TODO: would be nice to handle proxy classes elegantly!	DESIGN	0.8942107768438223	DESIGN	0.10578922315617766	WITHOUT_CLASSIFICATION
TODO: copy/paste from ManyToOneType	DESIGN	0.7123822250584697	WITHOUT_CLASSIFICATION	0.2876177749415303	DESIGN
TODO: should this be Session.instantiate(Persister, ...)?	DESIGN	0.9861410115182883	DESIGN	0.013858988481711618	WITHOUT_CLASSIFICATION
TODO: this is a bit arbitrary, expose a switch to the user?	DESIGN	0.5757162235578026	WITHOUT_CLASSIFICATION	0.42428377644219745	DESIGN
TODO: implement caching?! proxies?!	DESIGN	0.9180917265015363	WITHOUT_CLASSIFICATION	0.08190827349846377	DESIGN
TODO: is this right??	DESIGN	0.8798079408871063	DESIGN	0.1201920591128936	WITHOUT_CLASSIFICATION
is this really necessary?	DESIGN	0.9997574703282791	WITHOUT_CLASSIFICATION	2.4252967172075794E-4	DESIGN
TODO: move these to a new JoinableType abstract class, extended by EntityType and PersistentCollectionType:	DESIGN	0.9981094887876666	DESIGN	0.0018905112123333914	WITHOUT_CLASSIFICATION
TODO: this is very suboptimal for some subclasses (namely components), since it does not take advantage of two-phase-load	DESIGN	0.8451071548836429	WITHOUT_CLASSIFICATION	0.1548928451163571	DESIGN
worrying about proxies is perhaps a little bit of overkill here...	DESIGN	0.9980061245400751	WITHOUT_CLASSIFICATION	0.001993875459924986	DESIGN
NOTE VERY HACKISH WORKAROUND!! TODO: Fix this so it will work for non-POJO entity mode	DESIGN	0.9993062246196415	DESIGN	6.937753803585286E-4	WITHOUT_CLASSIFICATION
TODO: Fix this so it will work for non-POJO entity mode	DESIGN	0.9994227928149164	DESIGN	5.772071850835106E-4	WITHOUT_CLASSIFICATION
We would probably refactor to have LogicParser (builds a tree of simple expressions connected by and, or, not), ExpressionParser (translates from OO terms like foo, foo.Bar, foo.Bar.Baz to SQL terms like FOOS.ID, FOOS.BAR_ID, etc) and PathExpressionParser (which does much the same thing it does now)	DESIGN	0.9999744716534059	WITHOUT_CLASSIFICATION	2.5528346594012368E-5	DESIGN
TODO: this is a little inefficient, don't need to do a whole deep replaceElements() call	DESIGN	0.9999916574604365	DESIGN	8.342539563533714E-6	WITHOUT_CLASSIFICATION
workaround for WebLogic	DESIGN	0.9905877410943601	WITHOUT_CLASSIFICATION	0.009412258905639886	DESIGN
TODO: this dependency is kinda Bad	DESIGN	0.993336033459551	DESIGN	0.006663966540449012	WITHOUT_CLASSIFICATION
ick!	DESIGN	0.9992214677581893	WITHOUT_CLASSIFICATION	7.78532241810701E-4	DESIGN
short cut check...	DESIGN	0.9999996101358282	WITHOUT_CLASSIFICATION	3.898641718807822E-7	DESIGN
todo : move to StringHelper?	DESIGN	0.9996874960052072	WITHOUT_CLASSIFICATION	3.1250399479282304E-4	DESIGN
yukky! Don't you have subclasses for that! TODO race conditions can happen here	DESIGN	0.8914119112272292	DESIGN	0.10858808877277085	WITHOUT_CLASSIFICATION
TODO: We probably should have a StatisticsNotPublishedException, to make it clean	DESIGN	0.5368965718683556	WITHOUT_CLASSIFICATION	0.46310342813164457	DESIGN
FIXME hack to work around fact that calling Node added = root.addChild( fqn ); doesn't properly set the version on the node	DESIGN	0.9999065122518658	WITHOUT_CLASSIFICATION	9.348774813417422E-5	DESIGN
TODO: I considered validating the presence of the TS cache here, but decided to defer unti getQueryCacheInstance() in case the cache is never actually used	DESIGN	0.985987871416229	WITHOUT_CLASSIFICATION	0.014012128583770872	DESIGN
need to do that here rather than in the save event listener to let the post insert events to have a id-filled entity when IDENTITY is used (EJB3)	DESIGN	0.9979158265800004	WITHOUT_CLASSIFICATION	0.0020841734199994522	DESIGN
TODO: simply remove this override if we fix the above todos	DESIGN	0.803629183914857	DESIGN	0.19637081608514298	WITHOUT_CLASSIFICATION
This, is used by SessionFactoryImpl to hand to the generated SessionImpl; was the only reason I could see that we cannot just use null as Settings.cacheProvider	DESIGN	0.9999260509100407	WITHOUT_CLASSIFICATION	7.394908995926339E-5	DESIGN
this is done here 'cos we might only know the type here (ugly!) TODO: improve this a lot:	DESIGN	0.9989376785766113	DESIGN	0.0010623214233887455	WITHOUT_CLASSIFICATION
todo : would love to have this work on a notification basis where the successful binding of an entity/subclass would emit a notification which the extendsQueue entries could react to...	DESIGN	0.5771457795470293	WITHOUT_CLASSIFICATION	0.4228542204529707	DESIGN
TODO : not sure the best way to handle this. The non-performant way :	DESIGN	0.7477979926662155	DESIGN	0.2522020073337845	WITHOUT_CLASSIFICATION
would be better to use the element-type to determine whether the old and the new are equal here; the problem being we do not necessarily have access to the element type in all cases	DESIGN	0.997679752339333	WITHOUT_CLASSIFICATION	0.002320247660667063	DESIGN
This next bit is to allow for both unsaved-value="negative" and for "older" behavior where version number did not get seeded if it was already set in the object TODO: shift it into unsaved-value strategy	DESIGN	0.9999867786276525	DESIGN	1.3221372347546018E-5	WITHOUT_CLASSIFICATION
merges don't cascade to uninitialized collections TODO: perhaps this does need to cascade after all....	DESIGN	0.8624935254909794	DESIGN	0.13750647450902065	WITHOUT_CLASSIFICATION
TODO: an alternative is to check if the owner has changed; if it hasn't then return collection.getOwner()	DESIGN	0.9996147299088374	WITHOUT_CLASSIFICATION	3.852700911625973E-4	DESIGN
it is possible that the tree-walking in OuterJoinLoader can get to an association defined by a subclass, in which case the property-ref might refer to a property defined on a subclass of the current class in this case, the table name is not known - this temporary solution assumes that the property-ref refers to a property of the subclass table that the association belongs to (a reasonable guess) TODO: fix this, add: OuterJoinLoadable.getSubclassPropertyTableName(String propertyName)	DESIGN	0.9999968786024419	DESIGN	3.1213975580822928E-6	WITHOUT_CLASSIFICATION
this only works because collection entries are kept in a sequenced map by persistence context (maybe we should do like entities and keep a separate sequences set...) TODO: calling entrySet on an IdentityMap is SLOW!!	DESIGN	0.9999988338239508	DESIGN	1.1661760491295935E-6	WITHOUT_CLASSIFICATION
important, to account for newly saved entities in query todo : some kind of check for new status...	DESIGN	0.9997766991500434	WITHOUT_CLASSIFICATION	2.233008499564642E-4	DESIGN
brand new collection TODO: or an array!! we can't lock objects with arrays now??	DESIGN	0.6610357679965807	WITHOUT_CLASSIFICATION	0.3389642320034194	DESIGN
TODO: if object was an uninitialized proxy, this is inefficient, resulting in two SQL selects	DESIGN	0.9854449361672089	WITHOUT_CLASSIFICATION	0.014555063832791239	DESIGN
before cascade! TODO: should this be Session.instantiate(Persister, ...)?	DESIGN	0.9959610307508973	DESIGN	0.004038969249102803	WITHOUT_CLASSIFICATION
TODO : absolutely no usages of this constructor form; can it go away?	DESIGN	0.8703499202127509	DESIGN	0.12965007978724905	WITHOUT_CLASSIFICATION
todo : need to find a clean way to handle the "event source" role a seperate classs responsible for generating/dispatching events just duplicates most of the Session methods... passing around seperate reto interceptor, factory, actionQueue, and persistentContext is not manageable...	DESIGN	0.5457732245395417	WITHOUT_CLASSIFICATION	0.45422677546045825	DESIGN
todo : remove	DESIGN	0.9999461360027071	WITHOUT_CLASSIFICATION	5.386399729279957E-5	DESIGN
aliasRefNode.resolve( false, false, aliasRefNode.getText() ); TODO: is it kosher to do it here? TODO: is it kosher to do it here?	DESIGN	0.7467998618546203	DESIGN	0.25320013814537967	WITHOUT_CLASSIFICATION
No explicit select expression; render the id and properties projection lists for every persister in the from clause into a single 'token node'. TODO: the only reason we need this stuff now is collection filters, we should get rid of derived select clause completely!	DESIGN	0.9999958075115548	DESIGN	4.19248844516383E-6	WITHOUT_CLASSIFICATION
TODO : an optimization here would be to consider cascade deletes and not gen those delete statements; the difficulty is the ordering of the tables here vs the cascade attributes on the persisters -> the table info gotten here should really be self-contained (i.e., a class representation defining all the needed attributes), then we could then get an array of those	DESIGN	0.7397866388970917	WITHOUT_CLASSIFICATION	0.2602133611029084	DESIGN
TODO: get SQL rendering out of here, create an AST for the join expressions. Use the SQL generator grammar to generate the SQL text for the index expression.	DESIGN	0.9892223250454748	WITHOUT_CLASSIFICATION	0.010777674954525168	DESIGN
TODO : this really needs to be delayed unitl after we definitively know all node types where this is currently a problem is parameters for which where we cannot unequivocally resolve an expected type	DESIGN	0.9999841060134195	DESIGN	1.5893986580553308E-5	WITHOUT_CLASSIFICATION
TODO: Figure out a better way to get the FROM elements in a proper tree structure. If this is not the destination of a many-to-many, add it as a child of the origin.	DESIGN	0.9980433976805047	WITHOUT_CLASSIFICATION	0.0019566023194953256	DESIGN
work around that crazy issue where the tree contains "empty" FromElements (no text); afaict, this is caused by FromElementFactory.createCollectionJoin()	DESIGN	0.9871116282734382	WITHOUT_CLASSIFICATION	0.01288837172656184	DESIGN
TODO: this class does too many things! we need a different kind of path expression parser for each of the diffferent ways in which path expressions can occur	DESIGN	0.9999880345455159	DESIGN	1.196545448403745E-5	WITHOUT_CLASSIFICATION
real hacky... used to count the nesting of parentheses	DESIGN	0.9959036781758005	WITHOUT_CLASSIFICATION	0.0040963218241995185	DESIGN
TODO : would be really nice to cache the spec on the query-def so as to not have to re-calc the hash; currently not doable though because of the resultset-ref stuff...	DESIGN	0.9996991178358732	WITHOUT_CLASSIFICATION	3.008821641268906E-4	DESIGN
for arrays, we should end the collection load before resolving the entities, since the actual array instances are not instantiated during loading TODO: or we could do this polymorphically, and have two different operations implemented differently for arrays	DESIGN	0.9523310845776752	DESIGN	0.047668915422324674	WITHOUT_CLASSIFICATION
polymorphism not really handled completely correctly, perhaps...well, actually its ok, assuming that the entity name used in the lookup is the same as the the one used here, which it will be	DESIGN	0.9818676414218419	WITHOUT_CLASSIFICATION	0.01813235857815812	DESIGN
TODO: should "record" how many properties we have reffered to - and if we don't get'em'all we throw an exception! Way better than trial and error ;)	DESIGN	0.9965006782247343	DESIGN	0.003499321775265626	WITHOUT_CLASSIFICATION
VERY IMPORTANT!!!! - This class needs to be free of any static references to any CGLIB or Javassist classes. Otherwise, users will always need both on their classpaths no matter which (if either) they use. Another option here would be to remove the Hibernate.isPropertyInitialized() method and have the users go through the SessionFactory to get this information.	DESIGN	0.9976646760246617	WITHOUT_CLASSIFICATION	0.0023353239753383776	DESIGN
TODO: is it really neceassry to provide Configuration to CollectionPersisters ? Should it not be enough with associated class ? or why does EntityPersister's not get access to configuration ? The only reason I could see that Configuration gets passed to collection persisters is so that they can look up the dom4j node name of the entity element in case no explicit node name was applied at the collection element level. Are you kidding me? Trivial to fix then. Just store and expose the node name on the entity persister (which the collection persister looks up anyway via other means...).	DESIGN	0.9999994908134315	DESIGN	5.091865684041276E-7	WITHOUT_CLASSIFICATION
for backward compatibility, allow a set with no not-null element columns, using all columns in the row locater SQL TODO: create an implicit not null constraint on all cols?	DESIGN	0.9537541501466548	WITHOUT_CLASSIFICATION	0.04624584985334525	DESIGN
SPACES TODO: i'm not sure, but perhaps we should exclude abstract denormalized tables?	DESIGN	0.7614430597992854	DESIGN	0.23855694020071472	WITHOUT_CLASSIFICATION
workaround, for backward compatibility of sets with no not-null columns, assume all columns are used in the row locator SQL	DESIGN	0.999568569508898	WITHOUT_CLASSIFICATION	4.3143049110201513E-4	DESIGN
note that this method could easily be moved up to BasicEntityPersister, if we ever needed to reuse it from other subclasses	DESIGN	0.8489948313670185	WITHOUT_CLASSIFICATION	0.15100516863298144	DESIGN
index += getPropertyColumnSpan( i ); TODO: this is kinda slow...	DESIGN	0.8430809418539035	DESIGN	0.1569190581460966	WITHOUT_CLASSIFICATION
TODO: need some caching scheme? really comes down to decision regarding amount of state (if any) kept on PropertyAccessors	DESIGN	0.9945816704343314	DESIGN	0.005418329565668637	WITHOUT_CLASSIFICATION
TODO: here is why we need to make bytecode provider global :( TODO : again, fix this after HHH-1907 is complete	DESIGN	0.9999999963828319	DESIGN	3.6171680274044672E-9	WITHOUT_CLASSIFICATION
TODO: Yuck! This is not quite good enough, it's a quick hack around the problem of having a to-one association that refers to an embedded component:	DESIGN	0.9995325259621589	DESIGN	4.6747403784102616E-4	WITHOUT_CLASSIFICATION
for DOM4J "collections" only TODO: it would be better if this was done at the higher level by Printer	DESIGN	0.9992875611311373	DESIGN	7.124388688627959E-4	WITHOUT_CLASSIFICATION
would be great to move all this below here into another method that could also be used from the new scrolling stuff. Would need to change the way the max-row stuff is handled (i.e. behind an interface) so that I could do the control breaking at the means to know when to stop	DESIGN	0.8287974351505852	DESIGN	0.1712025648494148	WITHOUT_CLASSIFICATION
TODO: can we always use the "null property" approach for everything?	DESIGN	0.8732465147413663	DESIGN	0.1267534852586337	WITHOUT_CLASSIFICATION
polymorphism comment above	DESIGN	0.999999500048273	WITHOUT_CLASSIFICATION	4.999517269783303E-7	DESIGN
some messy, complex stuff here, since createCriteria() can take an aliased path, or a path rooted at the creating criteria instance	DESIGN	0.9999891435532433	WITHOUT_CLASSIFICATION	1.0856446756687555E-5	DESIGN
TODO: really bad, evil hack to fix!!!	DESIGN	0.8906227071003581	DESIGN	0.10937729289964192	WITHOUT_CLASSIFICATION
ugly hack for cases like "elements(foo.bar.collection)" (multi-part path expression ending in elements or indices)	DESIGN	0.973233785014065	WITHOUT_CLASSIFICATION	0.02676621498593504	DESIGN
try block is a hack around fact that currently tuplizers are not given the opportunity to resolve a subclass entity name. this allows the (we assume custom) interceptor the ability to influence this decision if we were not able to based on the given entityName	DESIGN	0.7037692934270696	WITHOUT_CLASSIFICATION	0.2962307065729302	DESIGN
/ HACK ALERT !!!!!!!!!!!!!!!!!!!!!!!!!!!! Attempt to work around "ghost" ImpliedFromElements that occasionally show up between the actual things being joined. This consistently occurs from index nodes (at least against many-to-many). Not sure if there are other conditions Essentially, look-ahead to the next FromElement that actually writes something to the SQL	DESIGN	0.9391532292897317	WITHOUT_CLASSIFICATION	0.06084677071026836	DESIGN
init the table here instead of earlier, so that we can get a quoted table name TODO: would it be better to simply pass the qualified table name, instead of splitting it up into schema/catalog/table names	DESIGN	0.9501209390318716	DESIGN	0.04987906096812846	WITHOUT_CLASSIFICATION
TODO : would be great to have a Mapping#hasNonIdentifierPropertyNamedId method I don't believe that Mapping#getReferencedPropertyType accounts for the identifier property; so if it returns for a property named 'id', then we should have a non-id field named id	DESIGN	0.9886848309352173	DESIGN	0.011315169064782664	WITHOUT_CLASSIFICATION
TODO: is this really necessary????	DESIGN	0.90589545085161	DESIGN	0.09410454914838993	WITHOUT_CLASSIFICATION
TODO: ideally we need the construction of PropertyAccessor to take the following: 1) EntityMode 2) EntityMode-specific data (i.e., the classname for pojo entities) 3) Property-specific data based on the EntityMode (i.e., property-name or dom4j-node-name) The easiest way, with the introduction of the new runtime-metamodel classes, would be the the following predicates: 1) PropertyAccessorFactory.getPropertyAccessor() takes references to both a org.hibernate.metadata.EntityModeMetadata and org.hibernate.metadata.Property 2) What is now termed a "PropertyAccessor" stores any values needed from those two pieces of information 3) Code can then simply call PropertyAccess.getGetter() with no parameters; likewise with PropertyAccessor.getSetter()	DESIGN	0.9993672852329066	DESIGN	6.327147670934119E-4	WITHOUT_CLASSIFICATION
TODO: this is temporary in that the end result will probably not take a Property reference per-se.	DESIGN	0.9862884229386046	DESIGN	0.013711577061395313	WITHOUT_CLASSIFICATION
todo : this eventually needs to be removed	DESIGN	0.7988736469661889	WITHOUT_CLASSIFICATION	0.2011263530338111	DESIGN
TODO: make this a bit nicer	DESIGN	0.8253440237205742	DESIGN	0.1746559762794258	WITHOUT_CLASSIFICATION
todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.9047473906634007	WITHOUT_CLASSIFICATION	0.09525260933659932	DESIGN
todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.9047473906634007	WITHOUT_CLASSIFICATION	0.09525260933659932	DESIGN
todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.9047473906634007	WITHOUT_CLASSIFICATION	0.09525260933659932	DESIGN
todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.9047473906634007	WITHOUT_CLASSIFICATION	0.09525260933659932	DESIGN
todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.9047473906634007	WITHOUT_CLASSIFICATION	0.09525260933659932	DESIGN
todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.9047473906634007	WITHOUT_CLASSIFICATION	0.09525260933659932	DESIGN
todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.9047473906634007	WITHOUT_CLASSIFICATION	0.09525260933659932	DESIGN
todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.9047473906634007	WITHOUT_CLASSIFICATION	0.09525260933659932	DESIGN
FIXME Per the RegionFactory class Javadoc, this constructor version should not be necessary. @param props The configuration properties	DESIGN	0.9724275632399615	WITHOUT_CLASSIFICATION	0.02757243676003845	DESIGN
FIXME Per the RegionFactory class Javadoc, this constructor version should not be necessary. @param props The configuration properties	DESIGN	0.9724275632399615	WITHOUT_CLASSIFICATION	0.02757243676003845	DESIGN
FIXME Per the RegionFactory class Javadoc, this constructor version should not be necessary. @param props The configuration properties	DESIGN	0.9724275632399615	WITHOUT_CLASSIFICATION	0.02757243676003845	DESIGN
TODO : probably better to calculate these and pass them in, as it'll be more performant	DESIGN	0.9848571182747916	DESIGN	0.015142881725208343	WITHOUT_CLASSIFICATION
