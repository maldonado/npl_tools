test out the optimizer:	WITHOUT_CLASSIFICATION	0.9999980942378757	WITHOUT_CLASSIFICATION	1.9057621242754666E-6	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9999964962581329	WITHOUT_CLASSIFICATION	3.5037418669814783E-6	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9999964962581329	WITHOUT_CLASSIFICATION	3.5037418669814783E-6	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9999964962581329	WITHOUT_CLASSIFICATION	3.5037418669814783E-6	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9999964962581329	WITHOUT_CLASSIFICATION	3.5037418669814783E-6	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9999964962581329	WITHOUT_CLASSIFICATION	3.5037418669814783E-6	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9999964962581329	WITHOUT_CLASSIFICATION	3.5037418669814783E-6	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9999964962581329	WITHOUT_CLASSIFICATION	3.5037418669814783E-6	DESIGN
return	WITHOUT_CLASSIFICATION	0.9999527640425019	WITHOUT_CLASSIFICATION	4.723595749813258E-5	DESIGN
return	WITHOUT_CLASSIFICATION	0.9999527640425019	WITHOUT_CLASSIFICATION	4.723595749813258E-5	DESIGN
| this | bean | args | raw bean |	WITHOUT_CLASSIFICATION	0.9981831721790728	WITHOUT_CLASSIFICATION	0.0018168278209271232	DESIGN
invokeinterface	WITHOUT_CLASSIFICATION	0.999997596138634	WITHOUT_CLASSIFICATION	2.4038613660162493E-6	DESIGN
astore 4 store the raw bean	WITHOUT_CLASSIFICATION	0.9999960752660604	WITHOUT_CLASSIFICATION	3.924733939623484E-6	DESIGN
current stack len = 0	WITHOUT_CLASSIFICATION	0.999997867540869	WITHOUT_CLASSIFICATION	2.1324591311250187E-6	DESIGN
current stack len = 0	WITHOUT_CLASSIFICATION	0.999997867540869	WITHOUT_CLASSIFICATION	2.1324591311250187E-6	DESIGN
local variables | target obj | each oldvalue |	WITHOUT_CLASSIFICATION	0.9999993750079903	WITHOUT_CLASSIFICATION	6.249920097783991E-7	DESIGN
invokeinterface invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999999610063229	WITHOUT_CLASSIFICATION	3.899367703594592E-8	DESIGN
putfield new value of the field	WITHOUT_CLASSIFICATION	0.9999994052267667	WITHOUT_CLASSIFICATION	5.94773233345658E-7	DESIGN
reference type	WITHOUT_CLASSIFICATION	0.9999924390921174	WITHOUT_CLASSIFICATION	7.560907882584607E-6	DESIGN
double	WITHOUT_CLASSIFICATION	0.9999918394275409	WITHOUT_CLASSIFICATION	8.160572459223745E-6	DESIGN
double	WITHOUT_CLASSIFICATION	0.9999918394275409	WITHOUT_CLASSIFICATION	8.160572459223745E-6	DESIGN
long	WITHOUT_CLASSIFICATION	0.9999621933703755	WITHOUT_CLASSIFICATION	3.780662962447545E-5	DESIGN
just decrement the lock, don't recache (we don't know which transaction won)	WITHOUT_CLASSIFICATION	0.9979551792421771	WITHOUT_CLASSIFICATION	0.002044820757822967	DESIGN
decode row selection...	WITHOUT_CLASSIFICATION	0.9989071359840356	WITHOUT_CLASSIFICATION	0.001092864015964399	DESIGN
disassembled state gets put in a new array (we write to cache by value!)	WITHOUT_CLASSIFICATION	0.9999990958513693	WITHOUT_CLASSIFICATION	9.041486308308609E-7	DESIGN
again, CCS did not have such a concept; but a reasonable proximity is to clear the cache after transaction as long as the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999996660637654	WITHOUT_CLASSIFICATION	3.3393623460113026E-7	DESIGN
CHECK	WITHOUT_CLASSIFICATION	0.9997616303685279	WITHOUT_CLASSIFICATION	2.383696314720081E-4	DESIGN
ROW ID	WITHOUT_CLASSIFICATION	0.9999762762721378	WITHOUT_CLASSIFICATION	2.372372786224122E-5	DESIGN
COMPOSITE-ID	WITHOUT_CLASSIFICATION	0.9999986305460837	WITHOUT_CLASSIFICATION	1.3694539162195324E-6	DESIGN
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999948737725431	WITHOUT_CLASSIFICATION	5.126227456951739E-6	DESIGN
Property prop = new Property(); prop.setName("id"); prop.setPropertyAccessorName("embedded"); prop.setValue(id); entity.setIdentifierProperty(prop);	WITHOUT_CLASSIFICATION	0.9999998031132664	WITHOUT_CLASSIFICATION	1.9688673355734092E-7	DESIGN
DYNAMIC INSERT	WITHOUT_CLASSIFICATION	0.9999959567087129	WITHOUT_CLASSIFICATION	4.043291287075544E-6	DESIGN
PERSISTER	WITHOUT_CLASSIFICATION	0.9999859426229897	WITHOUT_CLASSIFICATION	1.4057377010333659E-5	DESIGN
get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999709451428198	WITHOUT_CLASSIFICATION	2.9054857180248622E-5	DESIGN
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999896548151489	WITHOUT_CLASSIFICATION	1.0345184851096883E-5	DESIGN
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999896548151489	WITHOUT_CLASSIFICATION	1.0345184851096883E-5	DESIGN
generated properties can never be insertable...	WITHOUT_CLASSIFICATION	0.9999876852989499	WITHOUT_CLASSIFICATION	1.2314701050083939E-5	DESIGN
TABLE	WITHOUT_CLASSIFICATION	0.9999900263871834	WITHOUT_CLASSIFICATION	9.973612816712146E-6	DESIGN
by default, natural-ids are "immutable" (constant)	WITHOUT_CLASSIFICATION	0.999999813347576	WITHOUT_CLASSIFICATION	1.866524240421263E-7	DESIGN
( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999988390738547	WITHOUT_CLASSIFICATION	1.1609261454277267E-6	DESIGN
we found some extends attributes referencing entities which were not already processed. here we need to locate all entity-names and class-names contained in this document itself, making sure that these get removed from the extendz list such that only extends names which require us to delay processing (i.e. external to this document and not yet processed) are contained in the returned result	WITHOUT_CLASSIFICATION	0.9952697657157515	DESIGN	0.004730234284248405	WITHOUT_CLASSIFICATION
Build a ResultSetMappingDefinition given a containing element for the "return-XXX" elements @param resultSetElem The element containing the return definitions. @param path No clue... @param mappings The current processing state. @return The description of the mappings...	WITHOUT_CLASSIFICATION	0.9999991424391277	WITHOUT_CLASSIFICATION	8.575608723478103E-7	DESIGN
private boolean showSql; private boolean formatSql;	WITHOUT_CLASSIFICATION	0.9999944103128469	WITHOUT_CLASSIFICATION	5.589687153193318E-6	DESIGN
public boolean isShowSqlEnabled() { return showSql; } public boolean isFormatSqlEnabled() { return formatSql; }	WITHOUT_CLASSIFICATION	0.9999987088958332	WITHOUT_CLASSIFICATION	1.2911041668379715E-6	DESIGN
Set a custom entity resolver. This entity resolver must be set before addXXX(misc) call. Default value is {@link org.hibernate.util.DTDEntityResolver} @param entityResolver entity resolver to use	WITHOUT_CLASSIFICATION	0.9999891900360701	WITHOUT_CLASSIFICATION	1.0809963929803914E-5	DESIGN
final List extendsQueue,	WITHOUT_CLASSIFICATION	0.9999990583328336	WITHOUT_CLASSIFICATION	9.416671663320526E-7	DESIGN
If close() is called, guarantee unbind()	WITHOUT_CLASSIFICATION	0.9999999997289939	WITHOUT_CLASSIFICATION	2.710060429721498E-10	DESIGN
if a ThreadLocalSessionContext-bound session happens to get serialized, to be completely correct, we need to make sure that unbinding of that session occurs.	WITHOUT_CLASSIFICATION	0.9999999942315999	WITHOUT_CLASSIFICATION	5.768400179647237E-9	DESIGN
on the inverse, it makes sense that if a ThreadLocalSessionContext- bound session then gets deserialized to go ahead and re-bind it to the ThreadLocalSessionContext session map.	WITHOUT_CLASSIFICATION	0.9999999016474858	WITHOUT_CLASSIFICATION	9.835251417847214E-8	DESIGN
cannot be instantiated	WITHOUT_CLASSIFICATION	0.999887485229511	WITHOUT_CLASSIFICATION	1.125147704889886E-4	DESIGN
60 second lock timeout	WITHOUT_CLASSIFICATION	0.9999852818368118	WITHOUT_CLASSIFICATION	1.4718163188233562E-5	DESIGN
OptimisticCache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999932770431391	WITHOUT_CLASSIFICATION	6.722956860784817E-6	DESIGN
Cache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999867290860586	WITHOUT_CLASSIFICATION	1.3270913941541827E-5	DESIGN
option.setDataVersion( NonLockingDataVersion.INSTANCE );	WITHOUT_CLASSIFICATION	0.9999999974321774	WITHOUT_CLASSIFICATION	2.5678226481134822E-9	DESIGN
do the put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9998005469525422	WITHOUT_CLASSIFICATION	1.9945304745783043E-4	DESIGN
ignore!	WITHOUT_CLASSIFICATION	0.9999984241383906	WITHOUT_CLASSIFICATION	1.575861609527766E-6	DESIGN
tree cache in optimistic mode seems to have as very difficult time with remove calls on non-existent nodes (NPEs)...	WITHOUT_CLASSIFICATION	0.9999733348048829	WITHOUT_CLASSIFICATION	2.6665195117143386E-5	DESIGN
60 seconds	WITHOUT_CLASSIFICATION	0.9999899841127008	WITHOUT_CLASSIFICATION	1.001588729912591E-5	DESIGN
ignore!	WITHOUT_CLASSIFICATION	0.9999984241383906	WITHOUT_CLASSIFICATION	1.575861609527766E-6	DESIGN
60 seconds	WITHOUT_CLASSIFICATION	0.9999899841127008	WITHOUT_CLASSIFICATION	1.001588729912591E-5	DESIGN
do the failfast put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999989931453215	WITHOUT_CLASSIFICATION	1.0068546784947864E-6	DESIGN
NOTE : evict() operates locally only (i.e., does not propogate to any other nodes in the potential cluster). This is exactly what is needed when we destroy() here; destroy() is used as part of the process of shutting down a SessionFactory; thus these removals should not be propogated	WITHOUT_CLASSIFICATION	0.9903828598347516	WITHOUT_CLASSIFICATION	0.009617140165248521	DESIGN
protected RegionRootListener listener;	WITHOUT_CLASSIFICATION	0.9999974907197341	WITHOUT_CLASSIFICATION	2.5092802658567685E-6	DESIGN
Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999956572273645	WITHOUT_CLASSIFICATION	4.342772635463201E-6	DESIGN
If we've been blocking for the mutex, perhaps another thread has already reestablished the root. In case the node was reestablised via replication, confirm it's marked "resident" (a status which doesn't replicate)	WITHOUT_CLASSIFICATION	0.9999904170359513	WITHOUT_CLASSIFICATION	9.58296404876043E-6	DESIGN
For pessimistic locking, we just want to toss out our ref to any old invalid root node and get the latest (may be null)	WITHOUT_CLASSIFICATION	0.9999899336112031	WITHOUT_CLASSIFICATION	1.0066388796796781E-5	DESIGN
The rest only matters for optimistic locking, where we need to establish the proper data version on the region root	WITHOUT_CLASSIFICATION	0.9999744700934659	WITHOUT_CLASSIFICATION	2.5529906534078787E-5	DESIGN
Don't hold a transactional lock for this	WITHOUT_CLASSIFICATION	0.9436793118831545	WITHOUT_CLASSIFICATION	0.05632068811684544	DESIGN
Make sure the root node for the region exists and has a DataVersion that never complains	WITHOUT_CLASSIFICATION	0.9999999994775542	WITHOUT_CLASSIFICATION	5.224456786556528E-10	DESIGN
Never evict this node	WITHOUT_CLASSIFICATION	0.9991798415114587	WITHOUT_CLASSIFICATION	8.20158488541215E-4	DESIGN
Fix up the resident flag	WITHOUT_CLASSIFICATION	0.9999118599184225	WITHOUT_CLASSIFICATION	8.814008157754784E-5	DESIGN
60 seconds	WITHOUT_CLASSIFICATION	0.9999899841127008	WITHOUT_CLASSIFICATION	1.001588729912591E-5	DESIGN
We ignore minimalPutOverride. JBossCache putForExternalRead is already about as minimal as we can get; it will promptly return if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999998809951549	WITHOUT_CLASSIFICATION	1.1900484504454965E-7	DESIGN
no-op. We don't own the cache so we shouldn't stop it.	WITHOUT_CLASSIFICATION	0.9999827219521413	WITHOUT_CLASSIFICATION	1.7278047858764714E-5	DESIGN
This should only be possible if the caches are constructor injected	WITHOUT_CLASSIFICATION	0.9374205440682716	WITHOUT_CLASSIFICATION	0.06257945593172845	DESIGN
We only build caches if none were passed in. Passing in caches counts as a clear statement of exactly what is wanted	WITHOUT_CLASSIFICATION	0.9999412763847636	WITHOUT_CLASSIFICATION	5.872361523634179E-5	DESIGN
Set up the cache factory	WITHOUT_CLASSIFICATION	0.9998403318230714	WITHOUT_CLASSIFICATION	1.5966817692864759E-4	DESIGN
See if the user configured a multiplexer stack	WITHOUT_CLASSIFICATION	0.9999759704193181	WITHOUT_CLASSIFICATION	2.402958068185035E-5	DESIGN
Default to collections sharing entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999548170509134	WITHOUT_CLASSIFICATION	4.5182949086639854E-5	DESIGN
Default to sharing the entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999965177378984	WITHOUT_CLASSIFICATION	3.4822621015346795E-6	DESIGN
For Timestamps, we default to a separate config	WITHOUT_CLASSIFICATION	0.999917680246772	WITHOUT_CLASSIFICATION	8.231975322796135E-5	DESIGN
We can't change the TM on a running cache; just check if the cache has no TM and we're OK with that	WITHOUT_CLASSIFICATION	0.9999997662647033	WITHOUT_CLASSIFICATION	2.337352967561213E-7	DESIGN
Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9996891423735972	WITHOUT_CLASSIFICATION	3.108576264027928E-4	DESIGN
Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999988689547759	WITHOUT_CLASSIFICATION	1.1310452241715824E-6	DESIGN
This method should be implemented assuming it's valid to do start/stop/start -- leave state appropriate for another start	WITHOUT_CLASSIFICATION	0.9809592946583603	WITHOUT_CLASSIFICATION	0.019040705341639652	DESIGN
Make sure we don't re-release the same cache	WITHOUT_CLASSIFICATION	0.9999978388739948	WITHOUT_CLASSIFICATION	2.161126005186396E-6	DESIGN
We use a different delegate than the non-optimistic superclass default	WITHOUT_CLASSIFICATION	0.9999999527695981	WITHOUT_CLASSIFICATION	4.7230401906137985E-8	DESIGN
Following methods we don't delegate since they have so little logic it's clearer to just implement them here	WITHOUT_CLASSIFICATION	0.9889344167832234	DESIGN	0.011065583216776559	WITHOUT_CLASSIFICATION
If JBC is using INVALIDATION, we don't want to propagate changes. We use the Timestamps cache to manage invalidation	WITHOUT_CLASSIFICATION	0.999999874725293	WITHOUT_CLASSIFICATION	1.252747070476241E-7	DESIGN
We don't want to waste effort setting an option if JBC is already in LOCAL mode. If JBC is REPL_(A)SYNC then check if they passed an config option to disable query replication	WITHOUT_CLASSIFICATION	0.9999999511275605	WITHOUT_CLASSIFICATION	4.88724394572355E-8	DESIGN
Don't hold the JBC node lock throughout the tx, as that prevents updates Add a zero (or low) timeout option so we don't block waiting for tx's that did a put to commit	WITHOUT_CLASSIFICATION	0.9999999993966626	WITHOUT_CLASSIFICATION	6.033374046738519E-10	DESIGN
Double check the distributed cache	WITHOUT_CLASSIFICATION	0.9999996507719123	WITHOUT_CLASSIFICATION	3.492280877287323E-7	DESIGN
Get an exclusive right to update JBC for this key from this node.	WITHOUT_CLASSIFICATION	0.9999336394935714	WITHOUT_CLASSIFICATION	6.636050642859397E-5	DESIGN
We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999626975570678	WITHOUT_CLASSIFICATION	3.7302442932246514E-5	DESIGN
Initial load from JBC	WITHOUT_CLASSIFICATION	0.9999998485285687	WITHOUT_CLASSIFICATION	1.5147143136450548E-7	DESIGN
See if we had a 2nd invalidation from the same initial preinvalidation timestamp. If so, only increment if the new current value is an increase	WITHOUT_CLASSIFICATION	0.9999999997497055	WITHOUT_CLASSIFICATION	2.502944878257887E-10	DESIGN
We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999626975570678	WITHOUT_CLASSIFICATION	3.7302442932246514E-5	DESIGN
If the workspace node has null as well, OK; if not we've been modified in a non-comparable manner, which we have to treat as us being newer	WITHOUT_CLASSIFICATION	0.9999999975165034	WITHOUT_CLASSIFICATION	2.483496630542815E-9	DESIGN
The standard comparator types are not Serializable but are singletons	WITHOUT_CLASSIFICATION	0.9999994105728875	WITHOUT_CLASSIFICATION	5.894271124286823E-7	DESIGN
ignore!	WITHOUT_CLASSIFICATION	0.9999984241383906	WITHOUT_CLASSIFICATION	1.575861609527766E-6	DESIGN
ignore it	WITHOUT_CLASSIFICATION	0.9999990904869572	WITHOUT_CLASSIFICATION	9.095130427475677E-7	DESIGN
construct the cache	WITHOUT_CLASSIFICATION	0.9999760181399815	WITHOUT_CLASSIFICATION	2.3981860018483738E-5	DESIGN
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999910039100046	WITHOUT_CLASSIFICATION	8.996089995405923E-6	DESIGN
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999910039100046	WITHOUT_CLASSIFICATION	8.996089995405923E-6	DESIGN
ie. 60 seconds	WITHOUT_CLASSIFICATION	0.999994305099265	WITHOUT_CLASSIFICATION	5.694900734905125E-6	DESIGN
swaldman 2006-08-28: define c3p0-style configuration parameters for initialPoolSize, which hibernate sensibly lets default to minPoolSize, but we'll let users override it with the c3p0-style property if they want.	WITHOUT_CLASSIFICATION	0.9994505790190422	WITHOUT_CLASSIFICATION	5.494209809578411E-4	DESIGN
DataSource unpooled = DataSources.unpooledDataSource(jdbcUrl, props.getProperty(Environment.USER), props.getProperty(Environment.PASS));	WITHOUT_CLASSIFICATION	0.9999999836215253	WITHOUT_CLASSIFICATION	1.6378474701032434E-8	DESIGN
TRUE if the pool is borrowed from the outside, FALSE if we used to create it	WITHOUT_CLASSIFICATION	0.9999820762394446	WITHOUT_CLASSIFICATION	1.792376055541803E-5	DESIGN
get a connection from the pool (thru DriverManager, cfr. Proxool doc)	WITHOUT_CLASSIFICATION	0.9999983904502632	WITHOUT_CLASSIFICATION	1.6095497367181236E-6	DESIGN
set the Transaction Isolation if defined	WITHOUT_CLASSIFICATION	0.9999933795003478	WITHOUT_CLASSIFICATION	6.620499652198909E-6	DESIGN
toggle autoCommit to false if set	WITHOUT_CLASSIFICATION	0.9999999340424461	WITHOUT_CLASSIFICATION	6.595755391712351E-8	DESIGN
return the connection	WITHOUT_CLASSIFICATION	0.9999806246701665	WITHOUT_CLASSIFICATION	1.9375329833482636E-5	DESIGN
Get the configurator files (if available)	WITHOUT_CLASSIFICATION	0.9999905013972819	WITHOUT_CLASSIFICATION	9.49860271824039E-6	DESIGN
Default the Proxool alias setting	WITHOUT_CLASSIFICATION	0.9999999723105211	WITHOUT_CLASSIFICATION	2.7689478870781694E-8	DESIGN
Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999936083017784	WITHOUT_CLASSIFICATION	6.391698221683325E-6	DESIGN
Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999936083017784	WITHOUT_CLASSIFICATION	6.391698221683325E-6	DESIGN
Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999998724882734	WITHOUT_CLASSIFICATION	1.2751172666504897E-7	DESIGN
Set the existing pool flag to true	WITHOUT_CLASSIFICATION	0.9999999264065103	WITHOUT_CLASSIFICATION	7.359348975605669E-8	DESIGN
Configured using the JAXP Configurator	WITHOUT_CLASSIFICATION	0.9993968775555279	WITHOUT_CLASSIFICATION	6.031224444721532E-4	DESIGN
Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999936083017784	WITHOUT_CLASSIFICATION	6.391698221683325E-6	DESIGN
Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999998724882734	WITHOUT_CLASSIFICATION	1.2751172666504897E-7	DESIGN
Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999998724882734	WITHOUT_CLASSIFICATION	1.2751172666504897E-7	DESIGN
Configured using the Properties File Configurator	WITHOUT_CLASSIFICATION	0.9999197125869665	WITHOUT_CLASSIFICATION	8.028741303342713E-5	DESIGN
Remember Isolation level	WITHOUT_CLASSIFICATION	0.9998986896135009	WITHOUT_CLASSIFICATION	1.0131038649913286E-4	DESIGN
If the provider was leeching off an existing pool don't close it	WITHOUT_CLASSIFICATION	0.9999999999866122	WITHOUT_CLASSIFICATION	1.3387986947464504E-11	DESIGN
We have created the pool ourselves, so shut it down	WITHOUT_CLASSIFICATION	0.9999987123030313	WITHOUT_CLASSIFICATION	1.2876969687643481E-6	DESIGN
not really a many-to-one association necessarily	WITHOUT_CLASSIFICATION	0.9994191928289213	WITHOUT_CLASSIFICATION	5.808071710786952E-4	DESIGN
not really a many-to-one association necessarily	WITHOUT_CLASSIFICATION	0.9994191928289213	WITHOUT_CLASSIFICATION	5.808071710786952E-4	DESIGN
always overwrite nonversioned data	WITHOUT_CLASSIFICATION	0.9999999608258114	WITHOUT_CLASSIFICATION	3.917418845082523E-8	DESIGN
public Currency getCurrency(int col) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9992604216028759	WITHOUT_CLASSIFICATION	7.395783971242514E-4	DESIGN
default is POJO	WITHOUT_CLASSIFICATION	0.9999972146706974	WITHOUT_CLASSIFICATION	2.7853293026667124E-6	DESIGN
use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999941996522056	WITHOUT_CLASSIFICATION	5.800347794320202E-6	DESIGN
use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999941996522056	WITHOUT_CLASSIFICATION	5.800347794320202E-6	DESIGN
private CacheEntry cacheEntry;	WITHOUT_CLASSIFICATION	0.9999370980653276	WITHOUT_CLASSIFICATION	6.290193467238779E-5	DESIGN
Don't need to lock the cache here, since if someone else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9985958185769969	WITHOUT_CLASSIFICATION	0.0014041814230030868	DESIGN
Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9988522085371004	WITHOUT_CLASSIFICATION	0.0011477914628996028	DESIGN
get the updated snapshot of the entity state by cloning current state; it is safe to copy in place, since by this time no-one else (should have) has a reference to the array	WITHOUT_CLASSIFICATION	0.9999999946270036	WITHOUT_CLASSIFICATION	5.3729964527356104E-9	DESIGN
this entity defines proeprty generation, so process those generated values...	WITHOUT_CLASSIFICATION	0.998667525811157	WITHOUT_CLASSIFICATION	0.0013324741888429833	DESIGN
have the entity entry perform post-update processing, passing it the update state and the new version (if one).	WITHOUT_CLASSIFICATION	0.9999999951629059	WITHOUT_CLASSIFICATION	4.8370940039811234E-9	DESIGN
!persister.isCacheInvalidationRequired()	WITHOUT_CLASSIFICATION	0.999998878695735	WITHOUT_CLASSIFICATION	1.1213042649742388E-6	DESIGN
need to look it up from the persistence-context	WITHOUT_CLASSIFICATION	0.9999442697693517	WITHOUT_CLASSIFICATION	5.5730230648208774E-5	DESIGN
sort first by role name	WITHOUT_CLASSIFICATION	0.9999974705296639	WITHOUT_CLASSIFICATION	2.5294703361796316E-6	DESIGN
Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9988522085371004	WITHOUT_CLASSIFICATION	0.0011477914628996028	DESIGN
then by fk	WITHOUT_CLASSIFICATION	0.9996593037978558	WITHOUT_CLASSIFICATION	3.4069620214423357E-4	DESIGN
nothing to do	WITHOUT_CLASSIFICATION	0.9998396764052384	WITHOUT_CLASSIFICATION	1.6032359476147851E-4	DESIGN
nothing to do	WITHOUT_CLASSIFICATION	0.9998396764052384	WITHOUT_CLASSIFICATION	1.6032359476147851E-4	DESIGN
an existing collection that was either non-empty or uninitialized is replaced by null or a different collection (if the collection is uninitialized, hibernate has no way of knowing if the collection is actually empty without querying the db)	WITHOUT_CLASSIFICATION	0.9999929369600602	WITHOUT_CLASSIFICATION	7.063039939723263E-6	DESIGN
this method is called when a new non-null collection is persisted or when an existing (non-null) collection is moved to a new owner	WITHOUT_CLASSIFICATION	0.9998825349805627	WITHOUT_CLASSIFICATION	1.1746501943725149E-4	DESIGN
boolean put = persister.getCache().insert(ck, cacheEntry);	WITHOUT_CLASSIFICATION	0.9999993506040002	WITHOUT_CLASSIFICATION	6.493959997873967E-7	DESIGN
we need to grab the version value from the entity, otherwise we have issues with generated-version entities that may have multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9960588181639208	WITHOUT_CLASSIFICATION	0.00394118183607921	DESIGN
do nothing - we only need to notify the cache...	WITHOUT_CLASSIFICATION	0.9999784892683194	WITHOUT_CLASSIFICATION	2.151073168049973E-5	DESIGN
sort first by entity name	WITHOUT_CLASSIFICATION	0.9999829965842532	WITHOUT_CLASSIFICATION	1.7003415746822104E-5	DESIGN
then by id	WITHOUT_CLASSIFICATION	0.9994824868763901	WITHOUT_CLASSIFICATION	5.175131236099103E-4	DESIGN
to be safe...	WITHOUT_CLASSIFICATION	0.9996652691842765	WITHOUT_CLASSIFICATION	3.347308157234789E-4	DESIGN
no transformations took place, so handle it as we would a non-instrumented class	WITHOUT_CLASSIFICATION	0.9999956445554922	WITHOUT_CLASSIFICATION	4.3554445077749755E-6	DESIGN
see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999999754510454	WITHOUT_CLASSIFICATION	2.4548954686955402E-8	DESIGN
see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999999754510454	WITHOUT_CLASSIFICATION	2.4548954686955402E-8	DESIGN
intentionally empty	WITHOUT_CLASSIFICATION	0.9999791356149564	WITHOUT_CLASSIFICATION	2.0864385043616497E-5	DESIGN
test out the optimizer:	WITHOUT_CLASSIFICATION	0.9999980942378757	WITHOUT_CLASSIFICATION	1.9057621242754666E-6	DESIGN
set the name of bulk accessor.	WITHOUT_CLASSIFICATION	0.9999992915013541	WITHOUT_CLASSIFICATION	7.084986458589364E-7	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9999964962581329	WITHOUT_CLASSIFICATION	3.5037418669814783E-6	DESIGN
invokespecial	WITHOUT_CLASSIFICATION	0.9999994916647834	WITHOUT_CLASSIFICATION	5.083352165963132E-7	DESIGN
return	WITHOUT_CLASSIFICATION	0.9999527640425019	WITHOUT_CLASSIFICATION	4.723595749813258E-5	DESIGN
aload_1 load bean	WITHOUT_CLASSIFICATION	0.999996795837381	WITHOUT_CLASSIFICATION	3.204162619050998E-6	DESIGN
checkcast cast bean	WITHOUT_CLASSIFICATION	0.9999744090296003	WITHOUT_CLASSIFICATION	2.5590970399693734E-5	DESIGN
astore_3 store bean	WITHOUT_CLASSIFICATION	0.9999964386188249	WITHOUT_CLASSIFICATION	3.561381175143369E-6	DESIGN
aload_2 args	WITHOUT_CLASSIFICATION	0.9999982620328163	WITHOUT_CLASSIFICATION	1.737967183734966E-6	DESIGN
iconst_i continue to aastore growing stack is 1	WITHOUT_CLASSIFICATION	0.9999965429964534	WITHOUT_CLASSIFICATION	3.4570035467449672E-6	DESIGN
new	WITHOUT_CLASSIFICATION	0.999876674152651	WITHOUT_CLASSIFICATION	1.233258473488971E-4	DESIGN
dup	WITHOUT_CLASSIFICATION	0.999649004195596	WITHOUT_CLASSIFICATION	3.509958044039927E-4	DESIGN
aload_3 load the raw bean	WITHOUT_CLASSIFICATION	0.9999941168549614	WITHOUT_CLASSIFICATION	5.883145038591831E-6	DESIGN
invokeinterface	WITHOUT_CLASSIFICATION	0.999997596138634	WITHOUT_CLASSIFICATION	2.4038613660162493E-6	DESIGN
invokevirtual	WITHOUT_CLASSIFICATION	0.9999995758228404	WITHOUT_CLASSIFICATION	4.241771595809738E-7	DESIGN
invokevirtual	WITHOUT_CLASSIFICATION	0.9999995758228404	WITHOUT_CLASSIFICATION	4.241771595809738E-7	DESIGN
aastore args	WITHOUT_CLASSIFICATION	0.9999949667232254	WITHOUT_CLASSIFICATION	5.033276774543139E-6	DESIGN
| this | bean | args | i | raw bean | exception |	WITHOUT_CLASSIFICATION	0.9926847302698065	WITHOUT_CLASSIFICATION	0.0073152697301934605	DESIGN
required to exception table iconst_0 i	WITHOUT_CLASSIFICATION	0.9999766399271758	WITHOUT_CLASSIFICATION	2.3360072824191227E-5	DESIGN
istore_3 store i	WITHOUT_CLASSIFICATION	0.9999986316884387	WITHOUT_CLASSIFICATION	1.368311561322786E-6	DESIGN
aload_1 load the bean	WITHOUT_CLASSIFICATION	0.9999923628829528	WITHOUT_CLASSIFICATION	7.637117047189396E-6	DESIGN
checkcast cast the bean into a raw bean	WITHOUT_CLASSIFICATION	0.9991359010435575	WITHOUT_CLASSIFICATION	8.64098956442399E-4	DESIGN
current stack len = 0	WITHOUT_CLASSIFICATION	0.999997867540869	WITHOUT_CLASSIFICATION	2.1324591311250187E-6	DESIGN
start region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9994127382119866	WITHOUT_CLASSIFICATION	5.872617880134102E-4	DESIGN
iinc 3, 1	WITHOUT_CLASSIFICATION	0.9999977967099231	WITHOUT_CLASSIFICATION	2.203290077026669E-6	DESIGN
aload 4 load the raw bean	WITHOUT_CLASSIFICATION	0.9999813526778769	WITHOUT_CLASSIFICATION	1.8647322123070527E-5	DESIGN
aload_2 load the args	WITHOUT_CLASSIFICATION	0.9999989827094012	WITHOUT_CLASSIFICATION	1.0172905987308787E-6	DESIGN
iconst_i	WITHOUT_CLASSIFICATION	0.9998418548589644	WITHOUT_CLASSIFICATION	1.5814514103557628E-4	DESIGN
aaload	WITHOUT_CLASSIFICATION	0.999988594759979	WITHOUT_CLASSIFICATION	1.1405240020976009E-5	DESIGN
checkcast	WITHOUT_CLASSIFICATION	0.9999325806283758	WITHOUT_CLASSIFICATION	6.741937162433693E-5	DESIGN
checkcast (case of primitive type) invokevirtual (case of primitive type)	WITHOUT_CLASSIFICATION	0.999999670147419	WITHOUT_CLASSIFICATION	3.2985258100763304E-7	DESIGN
checkcast (case of reference type)	WITHOUT_CLASSIFICATION	0.9999944571885954	WITHOUT_CLASSIFICATION	5.5428114046944205E-6	DESIGN
current stack len = 2	WITHOUT_CLASSIFICATION	0.9999993354491193	WITHOUT_CLASSIFICATION	6.645508806799826E-7	DESIGN
end region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9937580613571587	WITHOUT_CLASSIFICATION	0.006241938642841282	DESIGN
register in exception table	WITHOUT_CLASSIFICATION	0.9999813925262139	WITHOUT_CLASSIFICATION	1.8607473786208552E-5	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9999964962581329	WITHOUT_CLASSIFICATION	3.5037418669814783E-6	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9999964962581329	WITHOUT_CLASSIFICATION	3.5037418669814783E-6	DESIGN
return	WITHOUT_CLASSIFICATION	0.9999527640425019	WITHOUT_CLASSIFICATION	4.723595749813258E-5	DESIGN
return	WITHOUT_CLASSIFICATION	0.9999527640425019	WITHOUT_CLASSIFICATION	4.723595749813258E-5	DESIGN
dup	WITHOUT_CLASSIFICATION	0.999649004195596	WITHOUT_CLASSIFICATION	3.509958044039927E-4	DESIGN
invokevirtual	WITHOUT_CLASSIFICATION	0.9999995758228404	WITHOUT_CLASSIFICATION	4.241771595809738E-7	DESIGN
checkcast	WITHOUT_CLASSIFICATION	0.9999325806283758	WITHOUT_CLASSIFICATION	6.741937162433693E-5	DESIGN
local variables | target obj | each oldvalue |	WITHOUT_CLASSIFICATION	0.9999993750079903	WITHOUT_CLASSIFICATION	6.249920097783991E-7	DESIGN
astore 5 store exception	WITHOUT_CLASSIFICATION	0.9999944759021583	WITHOUT_CLASSIFICATION	5.524097841703122E-6	DESIGN
new BulkAccessorException	WITHOUT_CLASSIFICATION	0.9999762938135112	WITHOUT_CLASSIFICATION	2.3706186488825067E-5	DESIGN
aload 5 load exception	WITHOUT_CLASSIFICATION	0.9999791396513206	WITHOUT_CLASSIFICATION	2.0860348679471225E-5	DESIGN
iload_3 i	WITHOUT_CLASSIFICATION	0.9999982244223007	WITHOUT_CLASSIFICATION	1.7755776992697907E-6	DESIGN
invokespecial BulkAccessorException.<init>	WITHOUT_CLASSIFICATION	0.9999996838468308	WITHOUT_CLASSIFICATION	3.161531691798112E-7	DESIGN
athrow	WITHOUT_CLASSIFICATION	0.9999436486685509	WITHOUT_CLASSIFICATION	5.635133144915848E-5	DESIGN
WARNING: classfile only	WITHOUT_CLASSIFICATION	0.9999996718295533	WITHOUT_CLASSIFICATION	3.281704465952876E-7	DESIGN
swallow	WITHOUT_CLASSIFICATION	0.9999942328377012	WITHOUT_CLASSIFICATION	5.7671622987845734E-6	DESIGN
local variable | this |	WITHOUT_CLASSIFICATION	0.9999284656730195	WITHOUT_CLASSIFICATION	7.153432698052749E-5	DESIGN
aload_0 load this	WITHOUT_CLASSIFICATION	0.9999924436252539	WITHOUT_CLASSIFICATION	7.556374746080094E-6	DESIGN
aload_0 load this	WITHOUT_CLASSIFICATION	0.9999924436252539	WITHOUT_CLASSIFICATION	7.556374746080094E-6	DESIGN
getfield get field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.999988470345504	WITHOUT_CLASSIFICATION	1.1529654496020148E-5	DESIGN
areturn return the value of the field	WITHOUT_CLASSIFICATION	0.9999988145053296	WITHOUT_CLASSIFICATION	1.185494670489066E-6	DESIGN
local variables | this | callback |	WITHOUT_CLASSIFICATION	0.9984731267826256	WITHOUT_CLASSIFICATION	0.0015268732173744834	DESIGN
aload_1 load callback	WITHOUT_CLASSIFICATION	0.99998611727	WITHOUT_CLASSIFICATION	1.3882729999961076E-5	DESIGN
putfield put field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.999994254996874	WITHOUT_CLASSIFICATION	5.74500312597596E-6	DESIGN
case of non-static field	WITHOUT_CLASSIFICATION	0.9999934820595007	WITHOUT_CLASSIFICATION	6.517940499317833E-6	DESIGN
getfield get each field	WITHOUT_CLASSIFICATION	0.9998907066854457	WITHOUT_CLASSIFICATION	1.0929331455435001E-4	DESIGN
invokeinterface invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999999610063229	WITHOUT_CLASSIFICATION	3.899367703594592E-8	DESIGN
ifnonnull	WITHOUT_CLASSIFICATION	0.9999970088994339	WITHOUT_CLASSIFICATION	2.9911005659719905E-6	DESIGN
return each type	WITHOUT_CLASSIFICATION	0.9999977652891507	WITHOUT_CLASSIFICATION	2.234710849166214E-6	DESIGN
return each type	WITHOUT_CLASSIFICATION	0.9999977652891507	WITHOUT_CLASSIFICATION	2.234710849166214E-6	DESIGN
store_1 each type	WITHOUT_CLASSIFICATION	0.9999998868597366	WITHOUT_CLASSIFICATION	1.1314026329563689E-7	DESIGN
ldc name of the field	WITHOUT_CLASSIFICATION	0.9999919148049004	WITHOUT_CLASSIFICATION	8.08519509960871E-6	DESIGN
load_1 each type	WITHOUT_CLASSIFICATION	0.9999998571318454	WITHOUT_CLASSIFICATION	1.4286815464593518E-7	DESIGN
invokeinterface invoke Callback.read() each type	WITHOUT_CLASSIFICATION	0.9999999553047755	WITHOUT_CLASSIFICATION	4.469522463749269E-8	DESIGN
int	WITHOUT_CLASSIFICATION	0.999977028673691	WITHOUT_CLASSIFICATION	2.297132630895433E-5	DESIGN
return	WITHOUT_CLASSIFICATION	0.9999527640425019	WITHOUT_CLASSIFICATION	4.723595749813258E-5	DESIGN
dup	WITHOUT_CLASSIFICATION	0.999649004195596	WITHOUT_CLASSIFICATION	3.509958044039927E-4	DESIGN
invokeinterface	WITHOUT_CLASSIFICATION	0.999997596138634	WITHOUT_CLASSIFICATION	2.4038613660162493E-6	DESIGN
checkcast	WITHOUT_CLASSIFICATION	0.9999325806283758	WITHOUT_CLASSIFICATION	6.741937162433693E-5	DESIGN
checkcast	WITHOUT_CLASSIFICATION	0.9999325806283758	WITHOUT_CLASSIFICATION	6.741937162433693E-5	DESIGN
invokeinterface enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999999769920676	WITHOUT_CLASSIFICATION	2.3007932428198086E-8	DESIGN
invokeinterface enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999999769920676	WITHOUT_CLASSIFICATION	2.3007932428198086E-8	DESIGN
ifnonnull (label1)	WITHOUT_CLASSIFICATION	0.9999986784370777	WITHOUT_CLASSIFICATION	1.3215629222215653E-6	DESIGN
load_1	WITHOUT_CLASSIFICATION	0.9999981444670824	WITHOUT_CLASSIFICATION	1.855532917628284E-6	DESIGN
load_1	WITHOUT_CLASSIFICATION	0.9999981444670824	WITHOUT_CLASSIFICATION	1.855532917628284E-6	DESIGN
putfield	WITHOUT_CLASSIFICATION	0.9998787946071536	WITHOUT_CLASSIFICATION	1.212053928464814E-4	DESIGN
return ;	WITHOUT_CLASSIFICATION	0.9999715857518049	WITHOUT_CLASSIFICATION	2.8414248195154807E-5	DESIGN
ldc field name	WITHOUT_CLASSIFICATION	0.9999978721802207	WITHOUT_CLASSIFICATION	2.1278197792455943E-6	DESIGN
getfield old value of the field	WITHOUT_CLASSIFICATION	0.9999914097115905	WITHOUT_CLASSIFICATION	8.590288409599551E-6	DESIGN
invokeinterface callback.write(..)	WITHOUT_CLASSIFICATION	0.9999994050088588	WITHOUT_CLASSIFICATION	5.949911413380569E-7	DESIGN
reference type	WITHOUT_CLASSIFICATION	0.9999924390921174	WITHOUT_CLASSIFICATION	7.560907882584607E-6	DESIGN
reference type	WITHOUT_CLASSIFICATION	0.9999924390921174	WITHOUT_CLASSIFICATION	7.560907882584607E-6	DESIGN
not array	WITHOUT_CLASSIFICATION	0.9997569234298783	WITHOUT_CLASSIFICATION	2.430765701216708E-4	DESIGN
array of reference type	WITHOUT_CLASSIFICATION	0.9999956934175539	WITHOUT_CLASSIFICATION	4.3065824461611205E-6	DESIGN
boolean	WITHOUT_CLASSIFICATION	0.9999962775011133	WITHOUT_CLASSIFICATION	3.7224988868256758E-6	DESIGN
byte	WITHOUT_CLASSIFICATION	0.999906545398686	WITHOUT_CLASSIFICATION	9.345460131398949E-5	DESIGN
char	WITHOUT_CLASSIFICATION	0.9999965097279396	WITHOUT_CLASSIFICATION	3.490272060434491E-6	DESIGN
short	WITHOUT_CLASSIFICATION	0.9998215752550339	WITHOUT_CLASSIFICATION	1.7842474496618469E-4	DESIGN
double	WITHOUT_CLASSIFICATION	0.9999918394275409	WITHOUT_CLASSIFICATION	8.160572459223745E-6	DESIGN
float	WITHOUT_CLASSIFICATION	0.999995316603348	WITHOUT_CLASSIFICATION	4.683396651959779E-6	DESIGN
float	WITHOUT_CLASSIFICATION	0.999995316603348	WITHOUT_CLASSIFICATION	4.683396651959779E-6	DESIGN
long	WITHOUT_CLASSIFICATION	0.9999621933703755	WITHOUT_CLASSIFICATION	3.780662962447545E-5	DESIGN
long	WITHOUT_CLASSIFICATION	0.9999621933703755	WITHOUT_CLASSIFICATION	3.780662962447545E-5	DESIGN
bad type	WITHOUT_CLASSIFICATION	0.9999300273968281	WITHOUT_CLASSIFICATION	6.997260317192236E-5	DESIGN
bad type	WITHOUT_CLASSIFICATION	0.9999300273968281	WITHOUT_CLASSIFICATION	6.997260317192236E-5	DESIGN
boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999998982737153	WITHOUT_CLASSIFICATION	1.0172628469404753E-7	DESIGN
boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999998982737153	WITHOUT_CLASSIFICATION	1.0172628469404753E-7	DESIGN
reference type	WITHOUT_CLASSIFICATION	0.9999924390921174	WITHOUT_CLASSIFICATION	7.560907882584607E-6	DESIGN
double	WITHOUT_CLASSIFICATION	0.9999918394275409	WITHOUT_CLASSIFICATION	8.160572459223745E-6	DESIGN
float	WITHOUT_CLASSIFICATION	0.999995316603348	WITHOUT_CLASSIFICATION	4.683396651959779E-6	DESIGN
float	WITHOUT_CLASSIFICATION	0.999995316603348	WITHOUT_CLASSIFICATION	4.683396651959779E-6	DESIGN
long	WITHOUT_CLASSIFICATION	0.9999621933703755	WITHOUT_CLASSIFICATION	3.780662962447545E-5	DESIGN
bad type	WITHOUT_CLASSIFICATION	0.9999300273968281	WITHOUT_CLASSIFICATION	6.997260317192236E-5	DESIGN
bad type	WITHOUT_CLASSIFICATION	0.9999300273968281	WITHOUT_CLASSIFICATION	6.997260317192236E-5	DESIGN
boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999998982737153	WITHOUT_CLASSIFICATION	1.0172628469404753E-7	DESIGN
skip finalize methods	WITHOUT_CLASSIFICATION	0.9998715315438522	WITHOUT_CLASSIFICATION	1.284684561477236E-4	DESIGN
Mainly for OSCache	WITHOUT_CLASSIFICATION	0.9999990302601763	WITHOUT_CLASSIFICATION	9.697398237275502E-7	DESIGN
decrement the lock	WITHOUT_CLASSIFICATION	0.9999333014447317	WITHOUT_CLASSIFICATION	6.669855526831167E-5	DESIGN
create new lock that times out immediately	WITHOUT_CLASSIFICATION	0.9999929608285582	WITHOUT_CLASSIFICATION	7.039171441920859E-6	DESIGN
recache the updated state	WITHOUT_CLASSIFICATION	0.9999512460135693	WITHOUT_CLASSIFICATION	4.875398643073119E-5	DESIGN
noop	WITHOUT_CLASSIFICATION	0.9999722346376272	WITHOUT_CLASSIFICATION	2.7765362372827338E-5	DESIGN
null clientLock is remotely possible but will never happen in practice	WITHOUT_CLASSIFICATION	0.9637025347708679	WITHOUT_CLASSIFICATION	0.036297465229132124	DESIGN
we really could refresh the item if it is not a lock, but it might be slower return freshTimestamp < txTimestamp	WITHOUT_CLASSIFICATION	0.9324691987443423	WITHOUT_CLASSIFICATION	0.0675308012556577	DESIGN
by requiring <, we rely on lock timeout in the case of an unsuccessful update!	WITHOUT_CLASSIFICATION	0.9999974061052971	WITHOUT_CLASSIFICATION	2.593894702925453E-6	DESIGN
the user provided resulttransformer, not the one used with "select new". Here to avoid mangling transformed/non-transformed results.	WITHOUT_CLASSIFICATION	0.9999999999991375	WITHOUT_CLASSIFICATION	8.624670986973124E-13	DESIGN
disassemble positional parameters	WITHOUT_CLASSIFICATION	0.9999999466486047	WITHOUT_CLASSIFICATION	5.335139540777246E-8	DESIGN
disassemble named parameters	WITHOUT_CLASSIFICATION	0.9999988677779682	WITHOUT_CLASSIFICATION	1.1322220317877842E-6	DESIGN
ie. 60 seconds	WITHOUT_CLASSIFICATION	0.999994305099265	WITHOUT_CLASSIFICATION	5.694900734905125E-6	DESIGN
noop	WITHOUT_CLASSIFICATION	0.9999722346376272	WITHOUT_CLASSIFICATION	2.7765362372827338E-5	DESIGN
noop	WITHOUT_CLASSIFICATION	0.9999722346376272	WITHOUT_CLASSIFICATION	2.7765362372827338E-5	DESIGN
noop	WITHOUT_CLASSIFICATION	0.9999722346376272	WITHOUT_CLASSIFICATION	2.7765362372827338E-5	DESIGN
this is called from SettingsFactory irregardless; trivial to simply disregard	WITHOUT_CLASSIFICATION	0.9999839915174596	WITHOUT_CLASSIFICATION	1.6008482540415726E-5	DESIGN
Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999626490695624	WITHOUT_CLASSIFICATION	3.735093043758499E-5	DESIGN
Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999626490695624	WITHOUT_CLASSIFICATION	3.735093043758499E-5	DESIGN
throw new UnsupportedOperationException("Can't write to a readonly object");	WITHOUT_CLASSIFICATION	0.9999983556390126	WITHOUT_CLASSIFICATION	1.6443609873912446E-6	DESIGN
assembled state gets put in a new array (we read from cache by value!)	WITHOUT_CLASSIFICATION	0.9999972636478687	WITHOUT_CLASSIFICATION	2.736352131219303E-6	DESIGN
persister.setIdentifier(result, id); before calling interceptor, for consistency with normal load	WITHOUT_CLASSIFICATION	0.9999999983398439	WITHOUT_CLASSIFICATION	1.6601560673441924E-9	DESIGN
no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.999943715163782	WITHOUT_CLASSIFICATION	5.62848362179118E-5	DESIGN
no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.999943715163782	WITHOUT_CLASSIFICATION	5.62848362179118E-5	DESIGN
again, CCS did not have such a concept; but a reasonable proximity is to clear the cache after transaction as long as the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999996660637654	WITHOUT_CLASSIFICATION	3.3393623460113026E-7	DESIGN
again, CCS did not have such a concept; however a reasonable proximity is to clear the cache. For non-transaction aware caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9997831026871941	WITHOUT_CLASSIFICATION	2.1689731280597095E-4	DESIGN
again, CCS did not have such a concept; however a reasonable proximity is to clear the cache. For non-transaction aware caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9997831026871941	WITHOUT_CLASSIFICATION	2.1689731280597095E-4	DESIGN
classes mentioned in extends not available - so put it in queue	WITHOUT_CLASSIFICATION	0.9999834819886716	WITHOUT_CLASSIFICATION	1.6518011328414928E-5	DESIGN
get meta's from <hibernate-mapping>	WITHOUT_CLASSIFICATION	0.9999990285401025	WITHOUT_CLASSIFICATION	9.714598974849635E-7	DESIGN
get meta's from <class>	WITHOUT_CLASSIFICATION	0.9999923922478383	WITHOUT_CLASSIFICATION	7.607752161610411E-6	DESIGN
DB-OBJECTNAME	WITHOUT_CLASSIFICATION	0.999993761061565	WITHOUT_CLASSIFICATION	6.238938434967821E-6	DESIGN
MUTABLE	WITHOUT_CLASSIFICATION	0.9999785939744392	WITHOUT_CLASSIFICATION	2.1406025560821016E-5	DESIGN
WHERE	WITHOUT_CLASSIFICATION	0.9999578542254594	WITHOUT_CLASSIFICATION	4.2145774540633125E-5	DESIGN
CHECK	WITHOUT_CLASSIFICATION	0.9997616303685279	WITHOUT_CLASSIFICATION	2.383696314720081E-4	DESIGN
POLYMORPHISM	WITHOUT_CLASSIFICATION	0.9999544775733867	WITHOUT_CLASSIFICATION	4.552242661334037E-5	DESIGN
TODO:	WITHOUT_CLASSIFICATION	0.982792232801144	WITHOUT_CLASSIFICATION	0.017207767198855972	DESIGN
ID	WITHOUT_CLASSIFICATION	0.9999604102483394	WITHOUT_CLASSIFICATION	3.958975166062232E-5	DESIGN
VERSION / TIMESTAMP	WITHOUT_CLASSIFICATION	0.9999997264621678	WITHOUT_CLASSIFICATION	2.7353783217315346E-7	DESIGN
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999948737725431	WITHOUT_CLASSIFICATION	5.126227456951739E-6	DESIGN
Primary key constraint	WITHOUT_CLASSIFICATION	0.9999993320494825	WITHOUT_CLASSIFICATION	6.679505173893394E-7	DESIGN
this is either a <version/> tag with no type attribute, or a <timestamp/> tag	WITHOUT_CLASSIFICATION	0.999999448272563	WITHOUT_CLASSIFICATION	5.517274369102572E-7	DESIGN
for version properties marked as being generated, make sure they are "always" generated; aka, "insert" is invalid; this is dis-allowed by the DTD, but just to make sure...	WITHOUT_CLASSIFICATION	0.9999999939394244	WITHOUT_CLASSIFICATION	6.0605756340725215E-9	DESIGN
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999948737725431	WITHOUT_CLASSIFICATION	5.126227456951739E-6	DESIGN
( (Column) discrim.getColumnIterator().next() ).setType(type);	WITHOUT_CLASSIFICATION	0.9999993601934475	WITHOUT_CLASSIFICATION	6.39806552385962E-7	DESIGN
go ahead and set the lazy here, since pojo.proxy can override it.	WITHOUT_CLASSIFICATION	0.9999988652360765	WITHOUT_CLASSIFICATION	1.1347639235448332E-6	DESIGN
DYNAMIC UPDATE	WITHOUT_CLASSIFICATION	0.9999960198517557	WITHOUT_CLASSIFICATION	3.980148244309815E-6	DESIGN
IMPORT	WITHOUT_CLASSIFICATION	0.9999883771981233	WITHOUT_CLASSIFICATION	1.1622801876765318E-5	DESIGN
BATCH SIZE	WITHOUT_CLASSIFICATION	0.999977417230644	WITHOUT_CLASSIFICATION	2.258276935596914E-5	DESIGN
SELECT BEFORE UPDATE	WITHOUT_CLASSIFICATION	0.9999981002674612	WITHOUT_CLASSIFICATION	1.8997325389101637E-6	DESIGN
OPTIMISTIC LOCK MODE	WITHOUT_CLASSIFICATION	0.999997897366189	WITHOUT_CLASSIFICATION	2.1026338109356597E-6	DESIGN
PERSISTER	WITHOUT_CLASSIFICATION	0.9999859426229897	WITHOUT_CLASSIFICATION	1.4057377010333659E-5	DESIGN
CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999803219803012	WITHOUT_CLASSIFICATION	1.9678019698888598E-5	DESIGN
get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999709451428198	WITHOUT_CLASSIFICATION	2.9054857180248622E-5	DESIGN
properties	WITHOUT_CLASSIFICATION	0.9999810972197337	WITHOUT_CLASSIFICATION	1.8902780266306268E-5	DESIGN
joined subclasses	WITHOUT_CLASSIFICATION	0.9999974808872204	WITHOUT_CLASSIFICATION	2.5191127795836498E-6	DESIGN
KEY	WITHOUT_CLASSIFICATION	0.9997995790759517	WITHOUT_CLASSIFICATION	2.0042092404820819E-4	DESIGN
CHECK	WITHOUT_CLASSIFICATION	0.9997616303685279	WITHOUT_CLASSIFICATION	2.383696314720081E-4	DESIGN
CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999803219803012	WITHOUT_CLASSIFICATION	1.9678019698888598E-5	DESIGN
properties	WITHOUT_CLASSIFICATION	0.9999810972197337	WITHOUT_CLASSIFICATION	1.8902780266306268E-5	DESIGN
KEY	WITHOUT_CLASSIFICATION	0.9997995790759517	WITHOUT_CLASSIFICATION	2.0042092404820819E-4	DESIGN
model.getKey().setType( new Type( model.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999999511156199	WITHOUT_CLASSIFICATION	4.8884379979833216E-8	DESIGN
TABLENAME	WITHOUT_CLASSIFICATION	0.9999620984028293	WITHOUT_CLASSIFICATION	3.790159717069754E-5	DESIGN
join.getKey().setType( new Type( lazz.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999999920070163	WITHOUT_CLASSIFICATION	7.992983739581347E-9	DESIGN
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999896548151489	WITHOUT_CLASSIFICATION	1.0345184851096883E-5	DESIGN
COLUMN(S)	WITHOUT_CLASSIFICATION	0.9999854057701913	WITHOUT_CLASSIFICATION	1.4594229808611364E-5	DESIGN
column index	WITHOUT_CLASSIFICATION	0.9999990843777976	WITHOUT_CLASSIFICATION	9.156222024408399E-7	DESIGN
column unique-key	WITHOUT_CLASSIFICATION	0.9999985493341668	WITHOUT_CLASSIFICATION	1.4506658332978424E-6	DESIGN
automatically makes a column with the default name if none is specifed by XML	WITHOUT_CLASSIFICATION	0.9892856116259073	WITHOUT_CLASSIFICATION	0.010714388374092717	DESIGN
for an any	WITHOUT_CLASSIFICATION	0.9999986006260998	WITHOUT_CLASSIFICATION	1.3993739002721778E-6	DESIGN
insertable simply because that is the user did not specify anything; just override it	WITHOUT_CLASSIFICATION	0.9999999998107248	WITHOUT_CLASSIFICATION	1.8927525015070375E-10	DESIGN
the user specifically supplied insert="true", which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999742223868608	WITHOUT_CLASSIFICATION	2.577761313906483E-5	DESIGN
properties generated on update can never be updateable...	WITHOUT_CLASSIFICATION	0.9999808158053461	WITHOUT_CLASSIFICATION	1.9184194653849413E-5	DESIGN
updateable only because the user did not specify anything; just override it	WITHOUT_CLASSIFICATION	0.9999999999858731	WITHOUT_CLASSIFICATION	1.4126927642241182E-11	DESIGN
the user specifically supplied update="true", which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.99999365286817	WITHOUT_CLASSIFICATION	6.347131830057428E-6	DESIGN
ROLENAME	WITHOUT_CLASSIFICATION	0.9999585035860563	WITHOUT_CLASSIFICATION	4.149641394370649E-5	DESIGN
FETCH STRATEGY	WITHOUT_CLASSIFICATION	0.9999864462669772	WITHOUT_CLASSIFICATION	1.3553733022911464E-5	DESIGN
TABLE	WITHOUT_CLASSIFICATION	0.9999900263871834	WITHOUT_CLASSIFICATION	9.973612816712146E-6	DESIGN
tableName = mappings.getNamingStrategy().propertyToTableName( className, path );	WITHOUT_CLASSIFICATION	0.9999999904885312	WITHOUT_CLASSIFICATION	9.511468885357173E-9	DESIGN
SORT	WITHOUT_CLASSIFICATION	0.9999785474479431	WITHOUT_CLASSIFICATION	2.1452552056915045E-5	DESIGN
CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999803219803012	WITHOUT_CLASSIFICATION	1.9678019698888598E-5	DESIGN
unsorted, natural, comparator.class.name	WITHOUT_CLASSIFICATION	0.9999998446429892	WITHOUT_CLASSIFICATION	1.5535701084220765E-7	DESIGN
ORPHAN DELETE (used for programmer error detection)	WITHOUT_CLASSIFICATION	0.9999927964629629	WITHOUT_CLASSIFICATION	7.203537037196977E-6	DESIGN
set up second pass	WITHOUT_CLASSIFICATION	0.9999992993299978	WITHOUT_CLASSIFICATION	7.006700023613271E-7	DESIGN
an "embedded" component (composite ids and unique) note that this does not handle nested components	WITHOUT_CLASSIFICATION	0.9999352274799272	WITHOUT_CLASSIFICATION	6.477252007280235E-5	DESIGN
a nested composite element	WITHOUT_CLASSIFICATION	0.9999943273503856	WITHOUT_CLASSIFICATION	5.672649614406302E-6	DESIGN
for an any we will have to use reflection	WITHOUT_CLASSIFICATION	0.9999631336521165	WITHOUT_CLASSIFICATION	3.686634788357667E-5	DESIGN
NOTE SPECIAL CASE: one-to-one constrained=false cannot be proxied, so default to join and non-lazy	WITHOUT_CLASSIFICATION	0.9999999984634236	WITHOUT_CLASSIFICATION	1.5365764642647727E-9	DESIGN
use old (HB 2.1) defaults if outer-join is specified	WITHOUT_CLASSIFICATION	0.9999999597564101	WITHOUT_CLASSIFICATION	4.0243589997911886E-8	DESIGN
lazy = !join;	WITHOUT_CLASSIFICATION	0.9999985513711196	WITHOUT_CLASSIFICATION	1.4486288804129463E-6	DESIGN
GENERATOR	WITHOUT_CLASSIFICATION	0.9999234675010252	WITHOUT_CLASSIFICATION	7.653249897478601E-5	DESIGN
ID UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999868185059408	WITHOUT_CLASSIFICATION	1.3181494059217665E-5	DESIGN
VERSION UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.999996822211229	WITHOUT_CLASSIFICATION	3.177788770916294E-6	DESIGN
not necessarily a unique property reference	WITHOUT_CLASSIFICATION	0.9990509620989438	WITHOUT_CLASSIFICATION	9.490379010561743E-4	DESIGN
( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999988390738547	WITHOUT_CLASSIFICATION	1.1609261454277267E-6	DESIGN
contained elements:	WITHOUT_CLASSIFICATION	0.9999945557703777	WITHOUT_CLASSIFICATION	5.444229622249837E-6	DESIGN
for non-inverse one-to-many, with a not-null fk, add a backref!	WITHOUT_CLASSIFICATION	0.9999918421583813	WITHOUT_CLASSIFICATION	8.157841618633297E-6	DESIGN
Bind the where	WITHOUT_CLASSIFICATION	0.9999873099469696	WITHOUT_CLASSIFICATION	1.269005303037122E-5	DESIGN
Bind the order-by	WITHOUT_CLASSIFICATION	0.9999990466807896	WITHOUT_CLASSIFICATION	9.53319210307444E-7	DESIGN
Bind the filters	WITHOUT_CLASSIFICATION	0.9999976775963572	WITHOUT_CLASSIFICATION	2.3224036428471785E-6	DESIGN
overriding inherited meta attribute. HBX-621 & HBX-793	WITHOUT_CLASSIFICATION	0.9999336713290058	WITHOUT_CLASSIFICATION	6.632867099427341E-5	DESIGN
first, iterate over all elements capable of defining an extends attribute collecting all found extends references if they cannot be resolved against the already processed mappings.	WITHOUT_CLASSIFICATION	0.9999999999500588	WITHOUT_CLASSIFICATION	4.9941083187779624E-11	DESIGN
mappings might contain either the "raw" extends name (in the case of an entity-name mapping) or a FQN (in the case of a POJO mapping).	WITHOUT_CLASSIFICATION	0.9999993118733527	WITHOUT_CLASSIFICATION	6.881266473254967E-7	DESIGN
+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9631246285221365	WITHOUT_CLASSIFICATION	0.03687537147786353	DESIGN
SessionFactory name:	WITHOUT_CLASSIFICATION	0.9999845315709485	WITHOUT_CLASSIFICATION	1.5468429051519985E-5	DESIGN
JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9999512847919528	WITHOUT_CLASSIFICATION	4.871520804712443E-5	DESIGN
JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9999512847919528	WITHOUT_CLASSIFICATION	4.871520804712443E-5	DESIGN
Interrogate JDBC metadata	WITHOUT_CLASSIFICATION	0.9999969978103348	WITHOUT_CLASSIFICATION	3.002189665079041E-6	DESIGN
user supplied JDBC connections	WITHOUT_CLASSIFICATION	0.9999796159579959	WITHOUT_CLASSIFICATION	2.0384042004028856E-5	DESIGN
use dialect default properties	WITHOUT_CLASSIFICATION	0.9999883491649662	WITHOUT_CLASSIFICATION	1.1650835033862318E-5	DESIGN
Transaction settings:	WITHOUT_CLASSIFICATION	0.9998705378227672	WITHOUT_CLASSIFICATION	1.2946217723275696E-4	DESIGN
SQL Generation settings:	WITHOUT_CLASSIFICATION	0.9998429363362129	WITHOUT_CLASSIFICATION	1.5706366378702118E-4	DESIGN
Query parser settings:	WITHOUT_CLASSIFICATION	0.9993052811195742	WITHOUT_CLASSIFICATION	6.947188804259192E-4	DESIGN
Second-level / query cache:	WITHOUT_CLASSIFICATION	0.9997720386940108	WITHOUT_CLASSIFICATION	2.2796130598922725E-4	DESIGN
The cache provider is needed when we either have second-level cache enabled or query cache enabled. Note that useSecondLevelCache is enabled by default	WITHOUT_CLASSIFICATION	0.9999652056672031	WITHOUT_CLASSIFICATION	3.479433279686392E-5	DESIGN
SQL Exception converter:	WITHOUT_CLASSIFICATION	0.9999584462503002	WITHOUT_CLASSIFICATION	4.155374969993915E-5	DESIGN
Statistics and logging:	WITHOUT_CLASSIFICATION	0.9999916791194395	WITHOUT_CLASSIFICATION	8.320880560453817E-6	DESIGN
settings.setShowSqlEnabled(showSql);	WITHOUT_CLASSIFICATION	0.9999987684775533	WITHOUT_CLASSIFICATION	1.2315224467478715E-6	DESIGN
settings.setFormatSqlEnabled(formatSql);	WITHOUT_CLASSIFICATION	0.9999993940946557	WITHOUT_CLASSIFICATION	6.05905344344273E-7	DESIGN
Schema export:	WITHOUT_CLASSIFICATION	0.999990751614639	WITHOUT_CLASSIFICATION	9.248385360978518E-6	DESIGN
String provider = properties.getProperty( Environment.BYTECODE_PROVIDER ); log.info( "Bytecode provider name : " + provider ); BytecodeProvider bytecodeProvider = buildBytecodeProvider( provider ); settings.setBytecodeProvider( bytecodeProvider );	WITHOUT_CLASSIFICATION	0.9999996174757064	WITHOUT_CLASSIFICATION	3.8252429358969684E-7	DESIGN
legacy behavior, apply the bridge...	WITHOUT_CLASSIFICATION	0.9998229479842256	WITHOUT_CLASSIFICATION	1.77052015774363E-4	DESIGN
maybe a concrete SQLpropertyresult type, but Map is exactly what is required at the moment	WITHOUT_CLASSIFICATION	0.9958129098953715	WITHOUT_CLASSIFICATION	0.004187090104628479	DESIGN
if dotted and not load-collection nor return-join regular property	WITHOUT_CLASSIFICATION	0.9999999744625631	WITHOUT_CLASSIFICATION	2.5537437041884574E-8	DESIGN
private ComponentTuplizerFactory componentTuplizerFactory; todo : HHH-3517 and HHH-1907 private BytecodeProvider bytecodeProvider;	WITHOUT_CLASSIFICATION	0.9974075489698745	WITHOUT_CLASSIFICATION	0.00259245103012541	DESIGN
public getters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998577667722552	WITHOUT_CLASSIFICATION	1.4223322774479445E-4	DESIGN
public ComponentTuplizerFactory getComponentTuplizerFactory() { return componentTuplizerFactory; }	WITHOUT_CLASSIFICATION	0.998806985795739	WITHOUT_CLASSIFICATION	0.001193014204260972	DESIGN
package protected setters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9976366195279658	WITHOUT_CLASSIFICATION	0.0023633804720342567	DESIGN
void setShowSqlEnabled(boolean b) { showSql = b; } void setFormatSqlEnabled(boolean b) { formatSql = b; }	WITHOUT_CLASSIFICATION	0.9999999978301866	WITHOUT_CLASSIFICATION	2.169813420279279E-9	DESIGN
public BytecodeProvider getBytecodeProvider() { return bytecodeProvider; } void setBytecodeProvider(BytecodeProvider bytecodeProvider) { this.bytecodeProvider = bytecodeProvider; }	WITHOUT_CLASSIFICATION	0.99986384053908	WITHOUT_CLASSIFICATION	1.3615946091999467E-4	DESIGN
using local since the inheritedMetas at this point is not the correct map since it is always the empty map	WITHOUT_CLASSIFICATION	0.9999931046557321	WITHOUT_CLASSIFICATION	6.895344267981768E-6	DESIGN
private ComponentTuplizerFactory componentTuplizerFactory; todo : HHH-3517 and HHH-1907	WITHOUT_CLASSIFICATION	0.9993499776778975	WITHOUT_CLASSIFICATION	6.500223221025161E-4	DESIGN
protected List extendsQueue;	WITHOUT_CLASSIFICATION	0.9998787929006828	WITHOUT_CLASSIFICATION	1.2120709931709794E-4	DESIGN
extendsQueue = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999998681347934	WITHOUT_CLASSIFICATION	1.318652066853472E-7	DESIGN
componentTuplizerFactory = new ComponentTuplizerFactory();	WITHOUT_CLASSIFICATION	0.9999971913750666	WITHOUT_CLASSIFICATION	2.8086249333942487E-6	DESIGN
if doc is null, then for whatever reason, the cached file cannot be used...	WITHOUT_CLASSIFICATION	0.9999994078822693	WITHOUT_CLASSIFICATION	5.921177307314707E-7	DESIGN
drop them in reverse order in case db needs it done that way...	WITHOUT_CLASSIFICATION	0.9962722327487693	WITHOUT_CLASSIFICATION	0.0037277672512307305	DESIGN
public ComponentTuplizerFactory getComponentTuplizerFactory() { return componentTuplizerFactory; }	WITHOUT_CLASSIFICATION	0.998806985795739	WITHOUT_CLASSIFICATION	0.001193014204260972	DESIGN
This method may be called many times!!	WITHOUT_CLASSIFICATION	0.99703350339638	WITHOUT_CLASSIFICATION	0.002966496603620123	DESIGN
Iterator iterator = extendsQueue.iterator();	WITHOUT_CLASSIFICATION	0.9999991485870748	WITHOUT_CLASSIFICATION	8.514129251647251E-7	DESIGN
Iterator iter = extendsQueue.iterator();	WITHOUT_CLASSIFICATION	0.9999990147797952	WITHOUT_CLASSIFICATION	9.85220204774079E-7	DESIGN
found	WITHOUT_CLASSIFICATION	0.9999096440659868	WITHOUT_CLASSIFICATION	9.03559340132171E-5	DESIGN
found	WITHOUT_CLASSIFICATION	0.9999096440659868	WITHOUT_CLASSIFICATION	9.03559340132171E-5	DESIGN
settings.setComponentTuplizerFactory( this.getComponentTuplizerFactory() );	WITHOUT_CLASSIFICATION	0.9997722792998261	WITHOUT_CLASSIFICATION	2.2772070017375914E-4	DESIGN
private final List extendsQueue;	WITHOUT_CLASSIFICATION	0.9999980453825578	WITHOUT_CLASSIFICATION	1.9546174421652136E-6	DESIGN
<String, String>	WITHOUT_CLASSIFICATION	0.9999947037939847	WITHOUT_CLASSIFICATION	5.2962060152791885E-6	DESIGN
<String, String>	WITHOUT_CLASSIFICATION	0.9999947037939847	WITHOUT_CLASSIFICATION	5.2962060152791885E-6	DESIGN
+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9631246285221365	WITHOUT_CLASSIFICATION	0.03687537147786353	DESIGN
Set USE_REFLECTION_OPTIMIZER to false to fix HHH-227	WITHOUT_CLASSIFICATION	0.9999999933850267	WITHOUT_CLASSIFICATION	6.614973316075095E-9	DESIGN
orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9997948272338348	WITHOUT_CLASSIFICATION	2.051727661650994E-4	DESIGN
element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9999997391935609	WITHOUT_CLASSIFICATION	2.6080643915192416E-7	DESIGN
intentionally empty	WITHOUT_CLASSIFICATION	0.9999791356149564	WITHOUT_CLASSIFICATION	2.0864385043616497E-5	DESIGN
orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9997948272338348	WITHOUT_CLASSIFICATION	2.051727661650994E-4	DESIGN
element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9999997391935609	WITHOUT_CLASSIFICATION	2.6080643915192416E-7	DESIGN
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999977839397123	WITHOUT_CLASSIFICATION	2.2160602877955417E-6	DESIGN
maintain correct duplication if loaded in a cartesian product	WITHOUT_CLASSIFICATION	0.9999971145148793	WITHOUT_CLASSIFICATION	2.88548512079446E-6	DESIGN
the element has been removed from the set	WITHOUT_CLASSIFICATION	0.9999691801924251	WITHOUT_CLASSIFICATION	3.0819807574906244E-5	DESIGN
the element has changed	WITHOUT_CLASSIFICATION	0.999993627958484	WITHOUT_CLASSIFICATION	6.372041516091157E-6	DESIGN
Careful: these methods do not initialize the collection.	WITHOUT_CLASSIFICATION	0.9997171194170329	WITHOUT_CLASSIFICATION	2.828805829670936E-4	DESIGN
needed so that we remove this collection from the second-level cache	WITHOUT_CLASSIFICATION	0.7808304679066879	WITHOUT_CLASSIFICATION	0.21916953209331216	DESIGN
override on some subclasses	WITHOUT_CLASSIFICATION	0.9999884085276672	WITHOUT_CLASSIFICATION	1.159147233288337E-5	DESIGN
override on some subclasses	WITHOUT_CLASSIFICATION	0.9999884085276672	WITHOUT_CLASSIFICATION	1.159147233288337E-5	DESIGN
do this bit after setting initialized to true or it will recurse	WITHOUT_CLASSIFICATION	0.99974503792419	WITHOUT_CLASSIFICATION	2.549620758099719E-4	DESIGN
short-circuit(s) no new elements, the old list contains only Orphans no old elements, so no Orphans neither	WITHOUT_CLASSIFICATION	0.9999999999865791	WITHOUT_CLASSIFICATION	1.3420925014415677E-11	DESIGN
create the collection holding the Orphans	WITHOUT_CLASSIFICATION	0.9999997987309267	WITHOUT_CLASSIFICATION	2.0126907327949615E-7	DESIGN
collect EntityIdentifier(s) of the current elements - add them into a HashSet for fast access	WITHOUT_CLASSIFICATION	0.9999013170931432	WITHOUT_CLASSIFICATION	9.868290685676805E-5	DESIGN
iterate over the old list	WITHOUT_CLASSIFICATION	0.9999946622400451	WITHOUT_CLASSIFICATION	5.3377599549353575E-6	DESIGN
(array==null) ? tempList.size() :	WITHOUT_CLASSIFICATION	0.9999994422800493	WITHOUT_CLASSIFICATION	5.577199505940302E-7	DESIGN
intentionally empty	WITHOUT_CLASSIFICATION	0.9999791356149564	WITHOUT_CLASSIFICATION	2.0864385043616497E-5	DESIGN
(array==null) ? tempList.get(i) :	WITHOUT_CLASSIFICATION	0.9999994124821819	WITHOUT_CLASSIFICATION	5.87517818016705E-7	DESIGN
write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9999974910727251	WITHOUT_CLASSIFICATION	2.5089272749824924E-6	DESIGN
write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9999974910727251	WITHOUT_CLASSIFICATION	2.5089272749824924E-6	DESIGN
amazingly, these two will work because AbstractCollection uses iterator() to fill the array	WITHOUT_CLASSIFICATION	0.9991327031202469	WITHOUT_CLASSIFICATION	8.672968797530222E-4	DESIGN
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999977839397123	WITHOUT_CLASSIFICATION	2.2160602877955417E-6	DESIGN
finally, what it's all about...	WITHOUT_CLASSIFICATION	0.9997616627356884	WITHOUT_CLASSIFICATION	2.3833726431156198E-4	DESIGN
note that if we load this collection from a cartesian product the multiplicity would be broken ... so use an idbag instead	WITHOUT_CLASSIFICATION	0.9999110172522413	DESIGN	8.89827477586842E-5	WITHOUT_CLASSIFICATION
Anyway, here we implement <set> semantics for a <one-to-many> <bag>!	WITHOUT_CLASSIFICATION	0.5064585031171693	WITHOUT_CLASSIFICATION	0.4935414968828307	DESIGN
a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999997729713224	WITHOUT_CLASSIFICATION	2.2702867769252867E-7	DESIGN
search for it note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9998308148365228	WITHOUT_CLASSIFICATION	1.6918516347712696E-4	DESIGN
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999977839397123	WITHOUT_CLASSIFICATION	2.2160602877955417E-6	DESIGN
a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999997729713224	WITHOUT_CLASSIFICATION	2.2702867769252867E-7	DESIGN
search for it note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9998308148365228	WITHOUT_CLASSIFICATION	1.6918516347712696E-4	DESIGN
public boolean equals(Object other) {read();return bag.equals(other);}public int hashCode(Object other) {read();return bag.hashCode();}	WITHOUT_CLASSIFICATION	0.9999999442276801	WITHOUT_CLASSIFICATION	5.5772319739661195E-8	DESIGN
List OPERATIONS:	WITHOUT_CLASSIFICATION	0.9999999513233152	WITHOUT_CLASSIFICATION	4.8676684855592604E-8	DESIGN
pad with nulls from the current last element up to the new index	WITHOUT_CLASSIFICATION	0.999999996419008	WITHOUT_CLASSIFICATION	3.5809920098128005E-9	DESIGN
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999977839397123	WITHOUT_CLASSIFICATION	2.2160602877955417E-6	DESIGN
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999977839397123	WITHOUT_CLASSIFICATION	2.2160602877955417E-6	DESIGN
from Map	WITHOUT_CLASSIFICATION	0.999980350358423	WITHOUT_CLASSIFICATION	1.9649641576913576E-5	DESIGN
from SortedMap	WITHOUT_CLASSIFICATION	0.9999750951317596	WITHOUT_CLASSIFICATION	2.4904868240331103E-5	DESIGN
inject the data	WITHOUT_CLASSIFICATION	0.9999653487744203	WITHOUT_CLASSIFICATION	3.4651225579643775E-5	DESIGN
cannot be instantiated	WITHOUT_CLASSIFICATION	0.999887485229511	WITHOUT_CLASSIFICATION	1.125147704889886E-4	DESIGN
default pool size 20	WITHOUT_CLASSIFICATION	0.9999971577371135	WITHOUT_CLASSIFICATION	2.8422628865297896E-6	DESIGN
trying via forName() first to be as close to DriverManager's semantics	WITHOUT_CLASSIFICATION	0.9999999999460149	WITHOUT_CLASSIFICATION	5.3985072310821424E-11	DESIGN
if debug level is enabled, then log the password, otherwise mask it	WITHOUT_CLASSIFICATION	0.9999998985139289	WITHOUT_CLASSIFICATION	1.0148607116899156E-7	DESIGN
register a cleanup synch	WITHOUT_CLASSIFICATION	0.9990196386502308	WITHOUT_CLASSIFICATION	9.803613497692662E-4	DESIGN
wrap the session in the transaction-protection proxy	WITHOUT_CLASSIFICATION	0.9999904208019531	WITHOUT_CLASSIFICATION	9.579198047012757E-6	DESIGN
then bind it	WITHOUT_CLASSIFICATION	0.999988380857235	WITHOUT_CLASSIFICATION	1.1619142764940813E-5	DESIGN
try to make sure we don't wrap and already wrapped session	WITHOUT_CLASSIFICATION	0.9999939473381029	WITHOUT_CLASSIFICATION	6.052661897077085E-6	DESIGN
allow these to go through the the real session no matter what	WITHOUT_CLASSIFICATION	0.9999935294918543	WITHOUT_CLASSIFICATION	6.470508145764972E-6	DESIGN
limit the methods available if no transaction is active	WITHOUT_CLASSIFICATION	0.9999773447157466	WITHOUT_CLASSIFICATION	2.2655284253333378E-5	DESIGN
allow these (deprecated) methods to pass through	WITHOUT_CLASSIFICATION	0.9892064066619535	WITHOUT_CLASSIFICATION	0.010793593338046598	DESIGN
serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998308439584	WITHOUT_CLASSIFICATION	1.6915604168884073E-7	DESIGN
We could register the session against the transaction even though it is not started, but we'd have no guarentee of ever getting the map entries cleaned up (aside from spawning threads).	WITHOUT_CLASSIFICATION	0.9999999427123469	WITHOUT_CLASSIFICATION	5.728765310583407E-8	DESIGN
cannot be instantiated	WITHOUT_CLASSIFICATION	0.999887485229511	WITHOUT_CLASSIFICATION	1.125147704889886E-4	DESIGN
private String propertyName;	WITHOUT_CLASSIFICATION	0.9990741609096809	WITHOUT_CLASSIFICATION	9.25839090319041E-4	DESIGN
public PropertyProjection project() {return Projections.property(getPropertyName());}	WITHOUT_CLASSIFICATION	0.9999905157695961	WITHOUT_CLASSIFICATION	9.48423040399691E-6	DESIGN
String[] fk = StringHelper.qualify( "collection_", cp.getKeyColumnNames() );	WITHOUT_CLASSIFICATION	0.9999999798157487	WITHOUT_CLASSIFICATION	2.0184251305480257E-8	DESIGN
" collection_ where " +	WITHOUT_CLASSIFICATION	0.9999983926118944	WITHOUT_CLASSIFICATION	1.6073881055470914E-6	DESIGN
unsupported	WITHOUT_CLASSIFICATION	0.9999263478406534	WITHOUT_CLASSIFICATION	7.365215934657826E-5	DESIGN
unsupported	WITHOUT_CLASSIFICATION	0.9999263478406534	WITHOUT_CLASSIFICATION	7.365215934657826E-5	DESIGN
cannot be instantiated	WITHOUT_CLASSIFICATION	0.999887485229511	WITHOUT_CLASSIFICATION	1.125147704889886E-4	DESIGN
the following two lines were added to ensure that this.params is not null, which can happen with two-deep nested subqueries	WITHOUT_CLASSIFICATION	0.9999934585844815	WITHOUT_CLASSIFICATION	6.541415518480847E-6	DESIGN
with two-deep subqueries, the same alias would get generated for both using the old method (criteriaQuery.generateSQLAlias()), so that is now used as a fallback if the main criteria alias isn't set	WITHOUT_CLASSIFICATION	0.9994106254675084	WITHOUT_CLASSIFICATION	5.893745324915119E-4	DESIGN
implicit polymorphism not supported (would need a union)	WITHOUT_CLASSIFICATION	0.7468352283210533	WITHOUT_CLASSIFICATION	0.2531647716789467	DESIGN
pull off the last ", "	WITHOUT_CLASSIFICATION	0.9999998839195411	WITHOUT_CLASSIFICATION	1.1608045896141707E-7	DESIGN
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999888414695537	WITHOUT_CLASSIFICATION	1.1158530446303592E-5	DESIGN
we have the form: trim(trimSource) so we trim leading and trailing spaces	WITHOUT_CLASSIFICATION	0.9999985911658804	WITHOUT_CLASSIFICATION	1.4088341195786583E-6	DESIGN
we have the form: trim(from trimSource). This is functionally equivalent to trim(trimSource)	WITHOUT_CLASSIFICATION	0.9995697648984335	WITHOUT_CLASSIFICATION	4.302351015665416E-4	DESIGN
NOT_SUPPORTED_SHOULD_USE_JDBC3_PreparedStatement.getGeneratedKeys_method	WITHOUT_CLASSIFICATION	0.999956789354057	WITHOUT_CLASSIFICATION	4.321064594316076E-5	DESIGN
potentialTrimCharacterArgIndex = 1 assumes that a trim-specification has been specified. we handle the exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999998905716239	WITHOUT_CLASSIFICATION	1.0942837612814726E-7	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999908071898249	WITHOUT_CLASSIFICATION	9.192810175116161E-6	DESIGN
Oracle did add support for ANSI CASE statements in 9i	WITHOUT_CLASSIFICATION	0.9999987884123616	WITHOUT_CLASSIFICATION	1.2115876384433506E-6	DESIGN
the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.999999783733574	WITHOUT_CLASSIFICATION	2.1626642602269751E-7	DESIGN
Informix doesn't have a bit type	WITHOUT_CLASSIFICATION	0.9998432327985805	WITHOUT_CLASSIFICATION	1.5676720141954813E-4	DESIGN
or BYTE or TEXT? or MONEY	WITHOUT_CLASSIFICATION	0.9996562188646492	WITHOUT_CLASSIFICATION	3.437811353507728E-4	DESIGN
strip table-owner because Informix always returns constraint names as "<table-owner>.<constraint-name>"	WITHOUT_CLASSIFICATION	0.9999999990710058	WITHOUT_CLASSIFICATION	9.289941427180905E-10	DESIGN
build the map of standard ANSI SQL aggregation functions ~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999890129672	WITHOUT_CLASSIFICATION	1.0987032904437523E-8	DESIGN
pre H3.2 behavior: super.getReturnType(ct, m);	WITHOUT_CLASSIFICATION	0.9997884834847521	WITHOUT_CLASSIFICATION	2.1151651524796175E-4	DESIGN
finally use the sqltype if == on Hibernate types did not find a match.	WITHOUT_CLASSIFICATION	0.9999638433021325	WITHOUT_CLASSIFICATION	3.615669786759751E-5	DESIGN
because numeric can be anything	WITHOUT_CLASSIFICATION	0.9999968190666157	WITHOUT_CLASSIFICATION	3.180933384222529E-6	DESIGN
constructors and factory methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995377766603536	WITHOUT_CLASSIFICATION	4.62223339646487E-4	DESIGN
standard sql92 functions (can be overridden by subclasses)	WITHOUT_CLASSIFICATION	0.9999938341525794	WITHOUT_CLASSIFICATION	6.165847420672715E-6	DESIGN
map second/minute/hour/day/month/year to ANSI extract(), override on subclasses	WITHOUT_CLASSIFICATION	0.9999971571509472	WITHOUT_CLASSIFICATION	2.84284905288096E-6	DESIGN
register hibernate types for default use in scalar sqlquery type auto detection	WITHOUT_CLASSIFICATION	0.9978816827138418	WITHOUT_CLASSIFICATION	0.002118317286158259	DESIGN
database type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999806120760429	WITHOUT_CLASSIFICATION	1.9387923957061352E-5	DESIGN
hibernate type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999925771784394	WITHOUT_CLASSIFICATION	7.422821560649032E-6	DESIGN
keyword support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999636627211683	WITHOUT_CLASSIFICATION	3.633727883179392E-5	DESIGN
native identifier generatiion ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999610222732144	WITHOUT_CLASSIFICATION	3.8977726785685416E-5	DESIGN
IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999884957449802	WITHOUT_CLASSIFICATION	1.150425501990436E-5	DESIGN
SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998723356480682	WITHOUT_CLASSIFICATION	1.2766435193167457E-4	DESIGN
GUID support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997079807945719	WITHOUT_CLASSIFICATION	2.92019205428036E-4	DESIGN
limit/offset support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999924300009457	WITHOUT_CLASSIFICATION	7.569999054298106E-6	DESIGN
by default we report no support	WITHOUT_CLASSIFICATION	0.9994533934953452	WITHOUT_CLASSIFICATION	5.466065046548409E-4	DESIGN
by default we report no support for NOWAIT lock semantics	WITHOUT_CLASSIFICATION	0.994846410329241	WITHOUT_CLASSIFICATION	0.005153589670758983	DESIGN
table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999984569982169	WITHOUT_CLASSIFICATION	1.5430017830434243E-6	DESIGN
temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998892287505067	WITHOUT_CLASSIFICATION	1.107712494932354E-4	DESIGN
callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997548911526414	WITHOUT_CLASSIFICATION	2.4510884735864404E-4	DESIGN
current timestamp support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995826273836	WITHOUT_CLASSIFICATION	4.173726163219891E-7	DESIGN
SQLException support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997502979269027	WITHOUT_CLASSIFICATION	2.49702073097295E-4	DESIGN
miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999973813089999	WITHOUT_CLASSIFICATION	2.6186910000975872E-5	DESIGN
identifier quoting support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999859277211707	WITHOUT_CLASSIFICATION	1.4072278829385523E-5	DESIGN
DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999501712421076	WITHOUT_CLASSIFICATION	4.98287578925301E-5	DESIGN
grrr... for differentiation of mysql storage engines	WITHOUT_CLASSIFICATION	0.9999755089782738	WITHOUT_CLASSIFICATION	2.4491021726212056E-5	DESIGN
Informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999969300185962	WITHOUT_CLASSIFICATION	3.069981403834135E-6	DESIGN
return false here, as most databases do not properly support this construct...	WITHOUT_CLASSIFICATION	0.9671404787285124	WITHOUT_CLASSIFICATION	0.03285952127148759	DESIGN
Mckoi has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.999951532798486	WITHOUT_CLASSIFICATION	4.8467201514077244E-5	DESIGN
Oracle8 and previous define only a "DATE" type which is used to represent all aspects of date/time	WITHOUT_CLASSIFICATION	0.9999999955314486	WITHOUT_CLASSIFICATION	4.468551478018494E-9	DESIGN
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999803684144551	WITHOUT_CLASSIFICATION	1.9631585544827854E-5	DESIGN
" cascade";	WITHOUT_CLASSIFICATION	0.9999931083610584	WITHOUT_CLASSIFICATION	6.8916389416120075E-6	DESIGN
trim off the length/precision/scale	WITHOUT_CLASSIFICATION	0.9999995061385287	WITHOUT_CLASSIFICATION	4.938614712095796E-7	DESIGN
public boolean dropTemporaryTableAfterUse() {we have to, because postgres sets current txto rollback only after a failed create tablereturn true;}	WITHOUT_CLASSIFICATION	0.9851622665249057	WITHOUT_CLASSIFICATION	0.01483773347509432	DESIGN
CHECK VIOLATION	WITHOUT_CLASSIFICATION	0.9999986160818225	WITHOUT_CLASSIFICATION	1.3839181775543017E-6	DESIGN
UNIQUE VIOLATION	WITHOUT_CLASSIFICATION	0.9999991004331986	WITHOUT_CLASSIFICATION	8.99566801470073E-7	DESIGN
FOREIGN KEY VIOLATION	WITHOUT_CLASSIFICATION	0.9999970747209438	WITHOUT_CLASSIFICATION	2.925279056080942E-6	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999908071898249	WITHOUT_CLASSIFICATION	9.192810175116161E-6	DESIGN
NOT NULL VIOLATION	WITHOUT_CLASSIFICATION	0.9999546999811924	WITHOUT_CLASSIFICATION	4.530001880770317E-5	DESIGN
ALL OTHER	WITHOUT_CLASSIFICATION	0.9999867945154218	WITHOUT_CLASSIFICATION	1.3205484578315755E-5	DESIGN
Register the type of the out param - PostgreSQL uses Types.OTHER	WITHOUT_CLASSIFICATION	0.9997708543031028	WITHOUT_CLASSIFICATION	2.2914569689717483E-4	DESIGN
seems to not really... public boolean supportsRowValueConstructorSyntax() { return true; }	WITHOUT_CLASSIFICATION	0.9999102251761592	WITHOUT_CLASSIFICATION	8.977482384081764E-5	DESIGN
seems to have spotty LOB suppport	WITHOUT_CLASSIFICATION	0.9997136797307277	WITHOUT_CLASSIFICATION	2.863202692723289E-4	DESIGN
HHH-2300	WITHOUT_CLASSIFICATION	0.9999481394309047	WITHOUT_CLASSIFICATION	5.1860569095381986E-5	DESIGN
ignore (probably H2 not in the classpath)	WITHOUT_CLASSIFICATION	0.9999567294451097	WITHOUT_CLASSIFICATION	4.327055489035979E-5	DESIGN
Numeric Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999991745551476	WITHOUT_CLASSIFICATION	8.254448523412107E-7	DESIGN
String Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993501491172	WITHOUT_CLASSIFICATION	6.498508827664996E-7	DESIGN
Time and Date Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999982871899123	WITHOUT_CLASSIFICATION	1.7128100876658162E-6	DESIGN
System Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999919905866318	WITHOUT_CLASSIFICATION	8.009413368179703E-6	DESIGN
not null is implicit	WITHOUT_CLASSIFICATION	0.9882108003814044	WITHOUT_CLASSIFICATION	0.01178919961859563	DESIGN
23000: Check constraint violation: {0} 23001: Unique index or primary key violation: {0}	WITHOUT_CLASSIFICATION	0.9999999999238999	WITHOUT_CLASSIFICATION	7.610005043728277E-11	DESIGN
Display the dialect version.	WITHOUT_CLASSIFICATION	0.9999837065943676	WITHOUT_CLASSIFICATION	1.6293405632376695E-5	DESIGN
The RDMS concat() function only supports 2 parameters	WITHOUT_CLASSIFICATION	0.9999348673280724	WITHOUT_CLASSIFICATION	6.513267192762568E-5	DESIGN
Dialect method overrides ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999988188264686	WITHOUT_CLASSIFICATION	1.1811735313524202E-6	DESIGN
Original Dialect.java returns " for update";	WITHOUT_CLASSIFICATION	0.9999982335260661	WITHOUT_CLASSIFICATION	1.766473933922842E-6	DESIGN
Verify the state of this new method in Hibernate 3.0 Dialect.java	WITHOUT_CLASSIFICATION	0.9867389479984202	WITHOUT_CLASSIFICATION	0.013261052001579867	DESIGN
Origial Dialect.java returns true;	WITHOUT_CLASSIFICATION	0.9999925338537755	WITHOUT_CLASSIFICATION	7.466146224509856E-6	DESIGN
The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999988759635282	WITHOUT_CLASSIFICATION	1.1240364717718355E-6	DESIGN
Sequence methods - start. The RDMS dialect needs these	WITHOUT_CLASSIFICATION	0.9995598792997424	WITHOUT_CLASSIFICATION	4.401207002575718E-4	DESIGN
methods to make it possible to use the Native Id generator	WITHOUT_CLASSIFICATION	0.9982191945257199	WITHOUT_CLASSIFICATION	0.0017808054742800246	DESIGN
The where clause was added to eliminate this statement from Brute Force Searches.	WITHOUT_CLASSIFICATION	0.9997113301796554	WITHOUT_CLASSIFICATION	2.8866982034461545E-4	DESIGN
Sequence methods - end	WITHOUT_CLASSIFICATION	0.9997405458744939	WITHOUT_CLASSIFICATION	2.594541255061133E-4	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999908071898249	WITHOUT_CLASSIFICATION	9.192810175116161E-6	DESIGN
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999803684144551	WITHOUT_CLASSIFICATION	1.9631585544827854E-5	DESIGN
We must return a valid RDMS/RSA command from this method to prevent RDMS/RSA from issuing ERROR 400	WITHOUT_CLASSIFICATION	0.9945477764054862	WITHOUT_CLASSIFICATION	0.0054522235945138175	DESIGN
Used with DROP TABLE to delete all records in the table.	WITHOUT_CLASSIFICATION	0.9999999106961005	WITHOUT_CLASSIFICATION	8.93038994853849E-8	DESIGN
RDMS supports the UNION ALL clause.	WITHOUT_CLASSIFICATION	0.9999987983869616	WITHOUT_CLASSIFICATION	1.2016130384720827E-6	DESIGN
RDMS has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9971424896141177	WITHOUT_CLASSIFICATION	0.002857510385882196	DESIGN
Multi-param dialect functions...	WITHOUT_CLASSIFICATION	0.9999956167758223	WITHOUT_CLASSIFICATION	4.383224177710893E-6	DESIGN
function templates	WITHOUT_CLASSIFICATION	0.999999896853681	WITHOUT_CLASSIFICATION	1.031463190500497E-7	DESIGN
not null is implicit	WITHOUT_CLASSIFICATION	0.9882108003814044	WITHOUT_CLASSIFICATION	0.01178919961859563	DESIGN
this assumes schema support, which is present in 1.8.0 and later...	WITHOUT_CLASSIFICATION	0.9995304395537697	WITHOUT_CLASSIFICATION	4.695604462303625E-4	DESIGN
HSQLDB only supports READ_UNCOMMITTED transaction isolation	WITHOUT_CLASSIFICATION	0.999999872113016	WITHOUT_CLASSIFICATION	1.27886983949463E-7	DESIGN
Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999956635249787	WITHOUT_CLASSIFICATION	4.336475021265277E-6	DESIGN
Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9999879413818851	WITHOUT_CLASSIFICATION	1.2058618114966719E-5	DESIGN
Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999911278569311	WITHOUT_CLASSIFICATION	8.872143068920291E-6	DESIGN
simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999893636812527	WITHOUT_CLASSIFICATION	1.0636318747337477E-5	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999908071898249	WITHOUT_CLASSIFICATION	9.192810175116161E-6	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999908071898249	WITHOUT_CLASSIFICATION	9.192810175116161E-6	DESIGN
not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9863545398574574	WITHOUT_CLASSIFICATION	0.0136454601425426	DESIGN
register the type of the out param - an Oracle specific type	WITHOUT_CLASSIFICATION	0.9999986843938388	WITHOUT_CLASSIFICATION	1.3156061613041506E-6	DESIGN
TimesTen has no BLOB/CLOB support, but these types may be suitable for some applications. The length is limited to 4 million bytes.	WITHOUT_CLASSIFICATION	0.999983654997528	WITHOUT_CLASSIFICATION	1.6345002472020656E-5	DESIGN
new methods in dialect3	WITHOUT_CLASSIFICATION	0.9999831200899056	WITHOUT_CLASSIFICATION	1.687991009439156E-5	DESIGN
public boolean supportsForUpdateNowait() {return false;}	WITHOUT_CLASSIFICATION	0.9999998277731205	WITHOUT_CLASSIFICATION	1.7222687953825157E-7	DESIGN
TimesTen has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999956854993118	WITHOUT_CLASSIFICATION	4.314500688159998E-6	DESIGN
iterate entries ordered by capacity to find first fit	WITHOUT_CLASSIFICATION	0.9999999077841908	WITHOUT_CLASSIFICATION	9.221580921939209E-8	DESIGN
add new ordered map	WITHOUT_CLASSIFICATION	0.999999693783307	WITHOUT_CLASSIFICATION	3.0621669298403964E-7	DESIGN
registerColumnType( Types.VARCHAR, 16777215, "mediumtext" );	WITHOUT_CLASSIFICATION	0.9999991930008572	WITHOUT_CLASSIFICATION	8.069991428770629E-7	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999908071898249	WITHOUT_CLASSIFICATION	9.192810175116161E-6	DESIGN
This assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.9999990056716156	WITHOUT_CLASSIFICATION	9.94328384490757E-7	DESIGN
sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999968284524543	WITHOUT_CLASSIFICATION	3.17154754574748E-6	DESIGN
return "select CURRENT_TIMESTAMP from RDB$DATABASE";	WITHOUT_CLASSIFICATION	0.999999959731281	WITHOUT_CLASSIFICATION	4.0268719044113874E-8	DESIGN
registerColumnType data types	WITHOUT_CLASSIFICATION	0.9999694985340959	WITHOUT_CLASSIFICATION	3.050146590413182E-5	DESIGN
hibernate seems to ignore this type...	WITHOUT_CLASSIFICATION	0.9999884285867076	WITHOUT_CLASSIFICATION	1.1571413292522908E-5	DESIGN
IBID for current_time and current_date	WITHOUT_CLASSIFICATION	0.9999982758864084	WITHOUT_CLASSIFICATION	1.7241135915475102E-6	DESIGN
Tell hibernate to use getBytes instead of getBinaryStream	WITHOUT_CLASSIFICATION	0.9988172111144177	WITHOUT_CLASSIFICATION	0.0011827888855823585	DESIGN
No batch statements	WITHOUT_CLASSIFICATION	0.9999998498981238	WITHOUT_CLASSIFICATION	1.5010187621690304E-7	DESIGN
We might want a special case for 19,2. This is very common for money types and here it is converted to 18,1	WITHOUT_CLASSIFICATION	0.8191344113847242	WITHOUT_CLASSIFICATION	0.18086558861527585	DESIGN
no pointbase BIT	WITHOUT_CLASSIFICATION	0.9999995428556943	WITHOUT_CLASSIFICATION	4.5714430574705095E-7	DESIGN
no pointbase TINYINT	WITHOUT_CLASSIFICATION	0.9999998018718198	WITHOUT_CLASSIFICATION	1.9812818028759768E-7	DESIGN
Pointbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.999988634328421	WITHOUT_CLASSIFICATION	1.1365671578951842E-5	DESIGN
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999803684144551	WITHOUT_CLASSIFICATION	1.9631585544827854E-5	DESIGN
The current_timestamp is more accurate, but only known to be supported in SQL Server 7.0 and later (i.e., Sybase not known to support it at all)	WITHOUT_CLASSIFICATION	0.9998021610414448	WITHOUT_CLASSIFICATION	1.9783895855508612E-4	DESIGN
SQL Server (at least up through 2005) does not support defining cascade delete constraints which can circel back to the mutating table	WITHOUT_CLASSIFICATION	0.9999994135488317	WITHOUT_CLASSIFICATION	5.864511682417002E-7	DESIGN
here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9999577068065323	WITHOUT_CLASSIFICATION	4.229319346762272E-5	DESIGN
registerColumnType( Types.BLOB, 16777215, "mediumblob" ); registerColumnType( Types.BLOB, 65535, "blob" );	WITHOUT_CLASSIFICATION	0.9999999245254751	WITHOUT_CLASSIFICATION	7.547452493482613E-8	DESIGN
registerColumnType( Types.CLOB, 16777215, "mediumtext" ); registerColumnType( Types.CLOB, 65535, "text" );	WITHOUT_CLASSIFICATION	0.9999999488893967	WITHOUT_CLASSIFICATION	5.111060329860715E-8	DESIGN
registerColumnType( Types.VARCHAR, 16777215, "mediumtext" ); registerColumnType( Types.VARCHAR, 65535, "text" );	WITHOUT_CLASSIFICATION	0.9999987503747956	WITHOUT_CLASSIFICATION	1.2496252044251563E-6	DESIGN
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999803684144551	WITHOUT_CLASSIFICATION	1.9631585544827854E-5	DESIGN
package-private	WITHOUT_CLASSIFICATION	0.9999890939201521	WITHOUT_CLASSIFICATION	1.0906079847779578E-5	DESIGN
sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999968284524543	WITHOUT_CLASSIFICATION	3.17154754574748E-6	DESIGN
Sybase BIT type does not support null values	WITHOUT_CLASSIFICATION	0.9967259999640978	WITHOUT_CLASSIFICATION	0.0032740000359022547	DESIGN
This assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.9999990056716156	WITHOUT_CLASSIFICATION	9.94328384490757E-7	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999908071898249	WITHOUT_CLASSIFICATION	9.192810175116161E-6	DESIGN
You may still have other ResultSets or update counts left to process here but you can't do it now or the ResultSet you just got will be closed	WITHOUT_CLASSIFICATION	0.9999999810560395	WITHOUT_CLASSIFICATION	1.8943960491790467E-8	DESIGN
not null ... (start with 1) is implicit	WITHOUT_CLASSIFICATION	0.8436676584591444	WITHOUT_CLASSIFICATION	0.15633234154085565	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999908071898249	WITHOUT_CLASSIFICATION	9.192810175116161E-6	DESIGN
Oracle driver reports to support getGeneratedKeys(), but they only support the version taking an array of the names of the columns to be returned (via its RETURNING clause). No other driver seems to support this overloaded version.	WITHOUT_CLASSIFICATION	0.9998250730693938	WITHOUT_CLASSIFICATION	1.7492693060621505E-4	DESIGN
Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999956635249787	WITHOUT_CLASSIFICATION	4.336475021265277E-6	DESIGN
Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9999879413818851	WITHOUT_CLASSIFICATION	1.2058618114966719E-5	DESIGN
Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999911278569311	WITHOUT_CLASSIFICATION	8.872143068920291E-6	DESIGN
add another (inner) nested select add the main query close off the inner nested select	WITHOUT_CLASSIFICATION	0.9999999893121514	WITHOUT_CLASSIFICATION	1.0687848469590428E-8	DESIGN
add the main query	WITHOUT_CLASSIFICATION	0.9999960063892976	WITHOUT_CLASSIFICATION	3.993610702281503E-6	DESIGN
add the restriction to the outer select	WITHOUT_CLASSIFICATION	0.999999896565417	WITHOUT_CLASSIFICATION	1.0343458309578627E-7	DESIGN
This assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.9999990056716156	WITHOUT_CLASSIFICATION	9.94328384490757E-7	DESIGN
You may still have other ResultSets or update counts left to process here but you can't do it now or the ResultSet you just got will be closed	WITHOUT_CLASSIFICATION	0.9999999810560395	WITHOUT_CLASSIFICATION	1.8943960491790467E-8	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999908071898249	WITHOUT_CLASSIFICATION	9.192810175116161E-6	DESIGN
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999803684144551	WITHOUT_CLASSIFICATION	1.9631585544827854E-5	DESIGN
simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999893636812527	WITHOUT_CLASSIFICATION	1.0636318747337477E-5	DESIGN
not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9863545398574574	WITHOUT_CLASSIFICATION	0.0136454601425426	DESIGN
register the type of the out param - an Oracle specific type	WITHOUT_CLASSIFICATION	0.9999986843938388	WITHOUT_CLASSIFICATION	1.3156061613041506E-6	DESIGN
features which change between 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999919884768668	WITHOUT_CLASSIFICATION	8.011523133201251E-5	DESIGN
features which remain constant across 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999951909166	WITHOUT_CLASSIFICATION	4.8090833898835954E-8	DESIGN
binary %Stream character %Stream	WITHOUT_CLASSIFICATION	0.9999960614117622	WITHOUT_CLASSIFICATION	3.938588237779463E-6	DESIGN
getDefaultProperties().setProperty(Environment.STATEMENT_BATCH_SIZE, NO_BATCH);	WITHOUT_CLASSIFICATION	0.9999999997695475	WITHOUT_CLASSIFICATION	2.3045265421678551E-10	DESIGN
hibernate impelemnts cast in Dialect.java	WITHOUT_CLASSIFICATION	0.999925174930456	WITHOUT_CLASSIFICATION	7.482506954402585E-5	DESIGN
aggregate functions shouldn't be registered, right? registerFunction( "list", new StandardSQLFunction("list",Hibernate.STRING) ); stopped on $list	WITHOUT_CLASSIFICATION	0.9998434898163228	WITHOUT_CLASSIFICATION	1.565101836771729E-4	DESIGN
DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999501712421076	WITHOUT_CLASSIFICATION	4.98287578925301E-5	DESIGN
below is for Cache' that don't have str in 2007.1 there is str and we register str directly	WITHOUT_CLASSIFICATION	0.9997938431800422	WITHOUT_CLASSIFICATION	2.0615681995784585E-4	DESIGN
note that %string is deprecated	WITHOUT_CLASSIFICATION	0.9794191048224957	WITHOUT_CLASSIFICATION	0.02058089517750425	DESIGN
%upper is deprecated	WITHOUT_CLASSIFICATION	0.9827022220810941	WITHOUT_CLASSIFICATION	0.017297777918905827	DESIGN
The syntax used to add a foreign key constraint to a table.	WITHOUT_CLASSIFICATION	0.9999920685968736	WITHOUT_CLASSIFICATION	7.931403126433179E-6	DESIGN
identifier-commalist	WITHOUT_CLASSIFICATION	0.9999995691387067	WITHOUT_CLASSIFICATION	4.30861293235825E-7	DESIGN
IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999884957449802	WITHOUT_CLASSIFICATION	1.150425501990436E-5	DESIGN
SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998723356480682	WITHOUT_CLASSIFICATION	1.2766435193167457E-4	DESIGN
temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998892287505067	WITHOUT_CLASSIFICATION	1.107712494932354E-4	DESIGN
identifier-commalist	WITHOUT_CLASSIFICATION	0.9999995691387067	WITHOUT_CLASSIFICATION	4.30861293235825E-7	DESIGN
The syntax used to add a column to a table	WITHOUT_CLASSIFICATION	0.996892744230288	WITHOUT_CLASSIFICATION	0.0031072557697119974	DESIGN
Completely optional cascading drop clause.	WITHOUT_CLASSIFICATION	0.9999991790882785	WITHOUT_CLASSIFICATION	8.209117214596467E-7	DESIGN
lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999581031955803	WITHOUT_CLASSIFICATION	4.1896804419576E-5	DESIGN
LIMIT support (ala TOP) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999967970096534	WITHOUT_CLASSIFICATION	3.2029903466169017E-6	DESIGN
InterSystems Cache' does not current support "SELECT ... FOR UPDATE" syntax... Set your transaction mode to READ_COMMITTED before using	WITHOUT_CLASSIFICATION	0.9999937133650375	WITHOUT_CLASSIFICATION	6.286634962472371E-6	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999908071898249	WITHOUT_CLASSIFICATION	9.192810175116161E-6	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999908071898249	WITHOUT_CLASSIFICATION	9.192810175116161E-6	DESIGN
<String>	WITHOUT_CLASSIFICATION	0.9999673126938262	WITHOUT_CLASSIFICATION	3.268730617377947E-5	DESIGN
callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997548911526414	WITHOUT_CLASSIFICATION	2.4510884735864404E-4	DESIGN
miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999973813089999	WITHOUT_CLASSIFICATION	2.6186910000975872E-5	DESIGN
The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999988759635282	WITHOUT_CLASSIFICATION	1.1240364717718355E-6	DESIGN
Does the LIMIT clause come at the start of the SELECT statement, rather than at the end?	WITHOUT_CLASSIFICATION	0.9974055985616739	WITHOUT_CLASSIFICATION	0.0025944014383262087	DESIGN
Does the LIMIT clause take a "maximum" row number instead of a total number of returned rows?	WITHOUT_CLASSIFICATION	0.9999785836034853	WITHOUT_CLASSIFICATION	2.1416396514701193E-5	DESIGN
The name of the SQL function that transforms a string to lowercase	WITHOUT_CLASSIFICATION	0.9999999564055359	WITHOUT_CLASSIFICATION	4.3594464188899467E-8	DESIGN
Create an OuterJoinGenerator for this dialect.	WITHOUT_CLASSIFICATION	0.9999941269052592	WITHOUT_CLASSIFICATION	5.873094740680994E-6	DESIGN
The keyword used to insert a row without specifying any column values	WITHOUT_CLASSIFICATION	0.9999998834848319	WITHOUT_CLASSIFICATION	1.165151679763527E-7	DESIGN
registerFunction( "trim", new StandardSQLFunction( "trim", Hibernate.STRING ) );	WITHOUT_CLASSIFICATION	0.9999999998031274	WITHOUT_CLASSIFICATION	1.9687268462421284E-10	DESIGN
skip the FROM keyword in params	WITHOUT_CLASSIFICATION	0.999992359645066	WITHOUT_CLASSIFICATION	7.640354933975761E-6	DESIGN
package	WITHOUT_CLASSIFICATION	0.9999575291056456	WITHOUT_CLASSIFICATION	4.2470894354337264E-5	DESIGN
potentialTrimCharacterArgIndex = 1 assumes that a trim-specification has been specified. we handle the exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999998905716239	WITHOUT_CLASSIFICATION	1.0942837612814726E-7	DESIGN
SQLFunction implementation	WITHOUT_CLASSIFICATION	0.9999991121679978	WITHOUT_CLASSIFICATION	8.878320022978607E-7	DESIGN
conceivable that the dialect ctor could throw HibernateExceptions, so don't re-wrap	WITHOUT_CLASSIFICATION	0.9999459917201649	WITHOUT_CLASSIFICATION	5.400827983513309E-5	DESIGN
register the standard dialect resolver	WITHOUT_CLASSIFICATION	0.9999993372831403	WITHOUT_CLASSIFICATION	6.627168596082112E-7	DESIGN
register resolvers set via Environment property	WITHOUT_CLASSIFICATION	0.9999989579014184	WITHOUT_CLASSIFICATION	1.0420985816318357E-6	DESIGN
kept for backward compatibility until after the 3.1beta5 release of HA	WITHOUT_CLASSIFICATION	0.9999992596260444	WITHOUT_CLASSIFICATION	7.403739556471978E-7	DESIGN
cache the hashcode	WITHOUT_CLASSIFICATION	0.999931254583789	WITHOUT_CLASSIFICATION	6.87454162110603E-5	DESIGN
the CascadingAction contract ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999870121052222	WITHOUT_CLASSIFICATION	1.2987894777785734E-5	DESIGN
the CascadingAction implementations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999899712517661	WITHOUT_CLASSIFICATION	1.0028748233899352E-5	DESIGN
delete does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.999999305064121	WITHOUT_CLASSIFICATION	6.94935879034239E-7	DESIGN
orphans should be deleted during delete	WITHOUT_CLASSIFICATION	0.9997709595048342	WITHOUT_CLASSIFICATION	2.2904049516583413E-4	DESIGN
(LockMode) anything	WITHOUT_CLASSIFICATION	0.9999866696045885	WITHOUT_CLASSIFICATION	1.3330395411383233E-5	DESIGN
lock doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999976851083593	WITHOUT_CLASSIFICATION	2.31489164071159E-6	DESIGN
refresh doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999998442741258	WITHOUT_CLASSIFICATION	1.5572587416112898E-7	DESIGN
evicts don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999996118692447	WITHOUT_CLASSIFICATION	3.8813075533994323E-7	DESIGN
saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999999901195912	WITHOUT_CLASSIFICATION	9.880408887112949E-9	DESIGN
orphans should be deleted during save/update	WITHOUT_CLASSIFICATION	0.9999775418430527	WITHOUT_CLASSIFICATION	2.245815694735087E-5	DESIGN
for deprecated saveOrUpdateCopy()	WITHOUT_CLASSIFICATION	0.9998493172275633	WITHOUT_CLASSIFICATION	1.5068277243658571E-4	DESIGN
persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999997016053465	WITHOUT_CLASSIFICATION	2.983946534335609E-7	DESIGN
a proxy cannot be transient and it breaks ForeignKeys.isTransient	WITHOUT_CLASSIFICATION	0.999909878754824	WITHOUT_CLASSIFICATION	9.012124517611582E-5	DESIGN
replicate does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.999998963502024	WITHOUT_CLASSIFICATION	1.0364979759963444E-6	DESIGN
static helper methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999868022221964	WITHOUT_CLASSIFICATION	1.319777780361376E-5	DESIGN
handles arrays and newly instantiated collections	WITHOUT_CLASSIFICATION	0.9998649641222318	WITHOUT_CLASSIFICATION	1.3503587776818538E-4	DESIGN
Actually the semantics of the next three are really "Bag" Note that, unlike objects, collection insertions, updates, deletions are not really remembered between flushes. We just re-use the same Lists for convenience.	WITHOUT_CLASSIFICATION	0.9999999745146195	WITHOUT_CLASSIFICATION	2.5485380436930357E-8	DESIGN
Add these directly to the executions queue	WITHOUT_CLASSIFICATION	0.9999983455630961	WITHOUT_CLASSIFICATION	1.6544369038485944E-6	DESIGN
continue loop	WITHOUT_CLASSIFICATION	0.999997374801572	WITHOUT_CLASSIFICATION	2.6251984279652442E-6	DESIGN
sort the updates by fk	WITHOUT_CLASSIFICATION	0.9999369435392758	WITHOUT_CLASSIFICATION	6.305646072424986E-5	DESIGN
sort the updates by pk	WITHOUT_CLASSIFICATION	0.9997604791382886	WITHOUT_CLASSIFICATION	2.3952086171145576E-4	DESIGN
the mapping of entity names to their latest batch numbers.	WITHOUT_CLASSIFICATION	0.9999999941677501	WITHOUT_CLASSIFICATION	5.832249956242993E-9	DESIGN
the map of batch numbers to EntityInsertAction lists	WITHOUT_CLASSIFICATION	0.9999999872965243	WITHOUT_CLASSIFICATION	1.2703475613590504E-8	DESIGN
optimize the hash size to eliminate a rehash.	WITHOUT_CLASSIFICATION	0.9999777142834204	WITHOUT_CLASSIFICATION	2.2285716579593647E-5	DESIGN
the list of entity names that indicate the batch number	WITHOUT_CLASSIFICATION	0.9999956162264573	WITHOUT_CLASSIFICATION	4.383773542757387E-6	DESIGN
remove the current element from insertions. It will be added back later.	WITHOUT_CLASSIFICATION	0.998777717213545	WITHOUT_CLASSIFICATION	0.0012222827864549859	DESIGN
the entity associated with the current action.	WITHOUT_CLASSIFICATION	0.9988526703052469	WITHOUT_CLASSIFICATION	0.0011473296947529597	DESIGN
There is already an existing batch for this type of entity. Check to see if the latest batch is acceptable.	WITHOUT_CLASSIFICATION	0.9999999250680238	WITHOUT_CLASSIFICATION	7.493197619660223E-8	DESIGN
now rebuild the insertions list. There is a batch for each entry in the name list.	WITHOUT_CLASSIFICATION	0.9999999289019361	WITHOUT_CLASSIFICATION	7.109806393168224E-8	DESIGN
the current batch number is the latest batch for this entity type.	WITHOUT_CLASSIFICATION	0.9999991900703323	WITHOUT_CLASSIFICATION	8.09929667728689E-7	DESIGN
loop through all the associations of the current entity and make sure that they are processed before the current batch number	WITHOUT_CLASSIFICATION	0.9999997795953326	WITHOUT_CLASSIFICATION	2.2040466741579283E-7	DESIGN
find the batch number associated with the current association, if any.	WITHOUT_CLASSIFICATION	0.9999868696368195	WITHOUT_CLASSIFICATION	1.3130363180532704E-5	DESIGN
create a new batch for this type. The batch number is the number of current batches.	WITHOUT_CLASSIFICATION	0.9999999621065085	WITHOUT_CLASSIFICATION	3.7893491467046524E-8	DESIGN
loop through all the associated entities and make sure they have been processed before the latest batch associated with this entity type.	WITHOUT_CLASSIFICATION	0.9999999399945334	WITHOUT_CLASSIFICATION	6.00054665542517E-8	DESIGN
since this entity will now be processed in the latest possible batch, we can be assured that it will come after all other associations, there's not need to continue checking.	WITHOUT_CLASSIFICATION	0.9988021470433616	WITHOUT_CLASSIFICATION	0.0011978529566384023	DESIGN
cascade to current collection elements	WITHOUT_CLASSIFICATION	0.9999984477665392	WITHOUT_CLASSIFICATION	1.552233460755598E-6	DESIGN
not really necessary, but good for consistency...	WITHOUT_CLASSIFICATION	0.9811591466219312	WITHOUT_CLASSIFICATION	0.018840853378068866	DESIGN
we can't cascade to non-embedded elements	WITHOUT_CLASSIFICATION	0.9999999590855484	WITHOUT_CLASSIFICATION	4.0914451613344385E-8	DESIGN
a newly instantiated collection can't have orphans	WITHOUT_CLASSIFICATION	0.9997922004649387	WITHOUT_CLASSIFICATION	2.0779953506138424E-4	DESIGN
handle orphaned entities!!	WITHOUT_CLASSIFICATION	0.999715317190519	WITHOUT_CLASSIFICATION	2.846828094809859E-4	DESIGN
Loaded entity instances, by EntityUniqueKey	WITHOUT_CLASSIFICATION	0.9999891667218155	WITHOUT_CLASSIFICATION	1.0833278184520307E-5	DESIGN
Identity map of EntityEntry instances, by the entity instance	WITHOUT_CLASSIFICATION	0.9999999443975787	WITHOUT_CLASSIFICATION	5.560242123887854E-8	DESIGN
Entity proxies, by EntityKey	WITHOUT_CLASSIFICATION	0.9999918532061323	WITHOUT_CLASSIFICATION	8.146793867740501E-6	DESIGN
Snapshots of current database state for entities that have not been loaded	WITHOUT_CLASSIFICATION	0.99999587312301	WITHOUT_CLASSIFICATION	4.126876989971859E-6	DESIGN
Identity map of array holder ArrayHolder instances, by the array instance	WITHOUT_CLASSIFICATION	0.9999979152310916	WITHOUT_CLASSIFICATION	2.0847689084090612E-6	DESIGN
Collection wrappers, by the CollectionKey key=CollectionKey, value=PersistentCollection	WITHOUT_CLASSIFICATION	0.9999997725671851	WITHOUT_CLASSIFICATION	2.2743281502570137E-7	DESIGN
Set of EntityKeys of deleted objects	WITHOUT_CLASSIFICATION	0.9999900801787243	WITHOUT_CLASSIFICATION	9.919821275773757E-6	DESIGN
properties that we have tried to load, and not found in the database	WITHOUT_CLASSIFICATION	0.9999994073879863	WITHOUT_CLASSIFICATION	5.926120135941226E-7	DESIGN
A list of collection wrappers that were instantiating during result set processing, that we will need to initialize at the end of the query	WITHOUT_CLASSIFICATION	0.9999999390154106	WITHOUT_CLASSIFICATION	6.098458948754472E-8	DESIGN
A container for collections we load up when the owning entity is not yet loaded ... for now, this is purely transient!	WITHOUT_CLASSIFICATION	0.9717210642064101	WITHOUT_CLASSIFICATION	0.028278935793589886	DESIGN
Downgrade locks	WITHOUT_CLASSIFICATION	0.9999923763770906	WITHOUT_CLASSIFICATION	7.623622909390696E-6	DESIGN
any earlier proxy takes precedence	WITHOUT_CLASSIFICATION	0.9999995676981208	WITHOUT_CLASSIFICATION	4.3230187928234865E-7	DESIGN
unwrap the object	WITHOUT_CLASSIFICATION	0.9999987804060232	WITHOUT_CLASSIFICATION	1.2195939767622353E-6	DESIGN
initialize + unwrap the object	WITHOUT_CLASSIFICATION	0.999999860041661	WITHOUT_CLASSIFICATION	1.3995833908409994E-7	DESIGN
return the proxied object	WITHOUT_CLASSIFICATION	0.999864872480261	WITHOUT_CLASSIFICATION	1.3512751973900373E-4	DESIGN
overwrite old proxy	WITHOUT_CLASSIFICATION	0.9999995517755977	WITHOUT_CLASSIFICATION	4.4822440217428704E-7	DESIGN
early exit...	WITHOUT_CLASSIFICATION	0.9999390710750677	WITHOUT_CLASSIFICATION	6.0928924932296535E-5	DESIGN
or should it actually throw an exception?	WITHOUT_CLASSIFICATION	0.9628107252127455	WITHOUT_CLASSIFICATION	0.03718927478725448	DESIGN
treat it just like a new collection	WITHOUT_CLASSIFICATION	0.9999988103453403	WITHOUT_CLASSIFICATION	1.1896546596135093E-6	DESIGN
do this work only at the very highest level of the load don't let this method be called recursively	WITHOUT_CLASSIFICATION	0.8474719455877064	WITHOUT_CLASSIFICATION	0.1525280544122935	DESIGN
note that each iteration of the loop may add new elements	WITHOUT_CLASSIFICATION	0.9999998696205478	WITHOUT_CLASSIFICATION	1.3037945228449905E-7	DESIGN
it might be an unwrapped collection reference! try to find a wrapper (slowish)	WITHOUT_CLASSIFICATION	0.9654946640810259	WITHOUT_CLASSIFICATION	0.03450533591897402	DESIGN
public boolean isNonExistant(EntityKey key) {return nonExistantEntityKeys.contains(key);}	WITHOUT_CLASSIFICATION	0.9999997245506393	WITHOUT_CLASSIFICATION	2.75449360634629E-7	DESIGN
public boolean isNonExistant(EntityUniqueKey key) {return nonExistentEntityUniqueKeys.contains(key);}	WITHOUT_CLASSIFICATION	0.9999995281669707	WITHOUT_CLASSIFICATION	4.7183302924671723E-7	DESIGN
iterate all the entities currently associated with the persistence context.	WITHOUT_CLASSIFICATION	0.9967592028337356	WITHOUT_CLASSIFICATION	0.0032407971662644056	DESIGN
does this entity entry pertain to the entity persister in which we are interested (owner)?	WITHOUT_CLASSIFICATION	0.9987908164410861	WITHOUT_CLASSIFICATION	0.0012091835589138238	DESIGN
check if the managed object is the parent	WITHOUT_CLASSIFICATION	0.9999828415099414	WITHOUT_CLASSIFICATION	1.715849005854288E-5	DESIGN
otherwise, the proxy was pruned during the serialization process	WITHOUT_CLASSIFICATION	0.9999999913367228	WITHOUT_CLASSIFICATION	8.66327722356902E-9	DESIGN
adds remove as a sort-of alias for delete...	WITHOUT_CLASSIFICATION	0.9999992148830256	WITHOUT_CLASSIFICATION	7.851169744453716E-7	DESIGN
bad cast	WITHOUT_CLASSIFICATION	0.9997637621409798	WITHOUT_CLASSIFICATION	2.3623785902009785E-4	DESIGN
return lhsPersister.getSubclassPropertyColumnNames(property);	WITHOUT_CLASSIFICATION	0.9999918673718902	WITHOUT_CLASSIFICATION	8.1326281099064E-6	DESIGN
property-refs for associations defined on a component are not supported, so no need to slice	WITHOUT_CLASSIFICATION	0.9999998688502789	WITHOUT_CLASSIFICATION	1.3114972110207083E-7	DESIGN
if there is no property-ref, assume the join is to the subclass table (ie. the table of the subclass that the association belongs to)	WITHOUT_CLASSIFICATION	0.9999965848392323	WITHOUT_CLASSIFICATION	3.4151607676697596E-6	DESIGN
handle a property-ref	WITHOUT_CLASSIFICATION	0.999877124662349	WITHOUT_CLASSIFICATION	1.228753376509754E-4	DESIGN
NativeSQLQueryReturn	WITHOUT_CLASSIFICATION	0.9996177256610546	WITHOUT_CLASSIFICATION	3.8227433894537897E-4	DESIGN
final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999999176975443	WITHOUT_CLASSIFICATION	8.23024556938745E-8	DESIGN
why is all others non final ?	WITHOUT_CLASSIFICATION	0.9495700837766466	WITHOUT_CLASSIFICATION	0.05042991622335338	DESIGN
this.forceCacheRefresh = forceCacheRefresh;	WITHOUT_CLASSIFICATION	0.9999991743076014	WITHOUT_CLASSIFICATION	8.25692398517574E-7	DESIGN
HELLA IMPORTANT OPTIMIZATION!!!	WITHOUT_CLASSIFICATION	0.9999982280804627	WITHOUT_CLASSIFICATION	1.7719195372458803E-6	DESIGN
return that.type.equals(type) && EqualsHelper.equals(that.value, value);	WITHOUT_CLASSIFICATION	0.9999995474336739	WITHOUT_CLASSIFICATION	4.5256632608376303E-7	DESIGN
Must occur after resolving identifiers!	WITHOUT_CLASSIFICATION	0.9999984556385926	WITHOUT_CLASSIFICATION	1.5443614073731628E-6	DESIGN
take a snapshot	WITHOUT_CLASSIFICATION	0.9999838315180242	WITHOUT_CLASSIFICATION	1.6168481975787092E-5	DESIGN
do a check	WITHOUT_CLASSIFICATION	0.9999405789257112	WITHOUT_CLASSIFICATION	5.9421074288712496E-5	DESIGN
the owning entity may have been deleted and its identifier unset due to identifier-rollback; in which case, try to look up its identifier from the persistence context	WITHOUT_CLASSIFICATION	0.9999999066696263	WITHOUT_CLASSIFICATION	9.333037361952754E-8	DESIGN
do the work	WITHOUT_CLASSIFICATION	0.9997592515731437	WITHOUT_CLASSIFICATION	2.4074842685634052E-4	DESIGN
We've been here before	WITHOUT_CLASSIFICATION	0.9999637279331137	WITHOUT_CLASSIFICATION	3.6272066886186186E-5	DESIGN
it is or was referenced _somewhere_	WITHOUT_CLASSIFICATION	0.9999846906205637	WITHOUT_CLASSIFICATION	1.5309379436307466E-5	DESIGN
do the work	WITHOUT_CLASSIFICATION	0.9997592515731437	WITHOUT_CLASSIFICATION	2.4074842685634052E-4	DESIGN
if either its role changed,	WITHOUT_CLASSIFICATION	0.9999965167764835	WITHOUT_CLASSIFICATION	3.4832235165202774E-6	DESIGN
or its key changed	WITHOUT_CLASSIFICATION	0.9999930281551488	WITHOUT_CLASSIFICATION	6.971844851207914E-6	DESIGN
we will need to create new entries	WITHOUT_CLASSIFICATION	0.9999863417839961	WITHOUT_CLASSIFICATION	1.365821600395075E-5	DESIGN
we will need to remove ye olde entries	WITHOUT_CLASSIFICATION	0.9999757060771308	WITHOUT_CLASSIFICATION	2.429392286920492E-5	DESIGN
force initialize!	WITHOUT_CLASSIFICATION	0.9999999022976466	WITHOUT_CLASSIFICATION	9.770235344271737E-8	DESIGN
else if it's elements changed	WITHOUT_CLASSIFICATION	0.9999996328773144	WITHOUT_CLASSIFICATION	3.6712268560841595E-7	DESIGN
ATTRIBUTES MAINTAINED BETWEEN FLUSH CYCLES	WITHOUT_CLASSIFICATION	0.9999717161271888	WITHOUT_CLASSIFICATION	2.8283872811062764E-5	DESIGN
session-start/post-flush persistent state	WITHOUT_CLASSIFICATION	0.9999993965727827	WITHOUT_CLASSIFICATION	6.034272172228866E-7	DESIGN
allow the CollectionSnapshot to be serialized	WITHOUT_CLASSIFICATION	0.9999412728829331	WITHOUT_CLASSIFICATION	5.872711706699083E-5	DESIGN
ATTRIBUTES USED ONLY DURING FLUSH CYCLE	WITHOUT_CLASSIFICATION	0.9999272933951711	WITHOUT_CLASSIFICATION	7.270660482897943E-5	DESIGN
"current" means the reference that was found during flush()	WITHOUT_CLASSIFICATION	0.9999999742899445	WITHOUT_CLASSIFICATION	2.5710055502547967E-8	DESIGN
"loaded" means the reference that is consistent with the current database state	WITHOUT_CLASSIFICATION	0.9999980172599234	WITHOUT_CLASSIFICATION	1.982740076589224E-6	DESIGN
during flush, we navigate the object graph to collections and decide what to do with them	WITHOUT_CLASSIFICATION	0.9945541570904667	WITHOUT_CLASSIFICATION	0.00544584290953333	DESIGN
if we instantiate a collection during the flush() process, we must ignore it for the rest of the flush()	WITHOUT_CLASSIFICATION	0.9999999973187721	WITHOUT_CLASSIFICATION	2.6812278562336703E-9	DESIGN
new collections that get found + wrapped during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999998828603006	WITHOUT_CLASSIFICATION	1.1713969938565243E-7	DESIGN
a newly wrapped collection is NOT dirty (or we get unnecessary version updates)	WITHOUT_CLASSIFICATION	0.9677370938866173	WITHOUT_CLASSIFICATION	0.03226290611338265	DESIGN
collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9999110203176951	WITHOUT_CLASSIFICATION	8.897968230498488E-5	DESIGN
collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9999110203176951	WITHOUT_CLASSIFICATION	8.897968230498488E-5	DESIGN
detached collections that get found + reattached during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999999844864861	WITHOUT_CLASSIFICATION	1.551351389848456E-8	DESIGN
optimization	WITHOUT_CLASSIFICATION	0.9999978468612996	WITHOUT_CLASSIFICATION	2.153138700536205E-6	DESIGN
optimization optimization	WITHOUT_CLASSIFICATION	0.9999984549323225	WITHOUT_CLASSIFICATION	1.545067677583148E-6	DESIGN
re-snapshot	WITHOUT_CLASSIFICATION	0.9999717236050988	WITHOUT_CLASSIFICATION	2.8276394901201663E-5	DESIGN
for convenience to save some lookups	WITHOUT_CLASSIFICATION	0.9999974546470659	WITHOUT_CLASSIFICATION	2.545352934161775E-6	DESIGN
NOTE: this is not updated when properties are fetched lazily!	WITHOUT_CLASSIFICATION	0.6173525247032293	WITHOUT_CLASSIFICATION	0.3826474752967707	DESIGN
memory optimization	WITHOUT_CLASSIFICATION	0.9999998115746822	WITHOUT_CLASSIFICATION	1.8842531783542797E-7	DESIGN
use the id value of a newly instantiated instance as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999834276012812	WITHOUT_CLASSIFICATION	1.657239871873361E-5	DESIGN
copied from Session:	WITHOUT_CLASSIFICATION	0.9992847630142874	WITHOUT_CLASSIFICATION	7.152369857126278E-4	DESIGN
this should not happen since the DTD prevents it	WITHOUT_CLASSIFICATION	0.9999696181109268	WITHOUT_CLASSIFICATION	3.038188907326403E-5	DESIGN
JoinProcessor needs to know if the where clause fragment came from a dynamic filter or not so it can put the where clause fragment in the right place in the SQL AST. 'hasFilterCondition' keeps track of that fact.	WITHOUT_CLASSIFICATION	0.9998795859497462	WITHOUT_CLASSIFICATION	1.2041405025387577E-4	DESIGN
the current join represents the join between a many-to-many association table and its "target" table. Here we need to apply any additional filters defined specifically on the many-to-many	WITHOUT_CLASSIFICATION	0.9999998215973643	WITHOUT_CLASSIFICATION	1.7840263574812934E-7	DESIGN
check basic level one nullablilty	WITHOUT_CLASSIFICATION	0.9999980300756804	WITHOUT_CLASSIFICATION	1.969924319660268E-6	DESIGN
values is not null and is checkable, we'll look deeper	WITHOUT_CLASSIFICATION	0.9955985392379949	WITHOUT_CLASSIFICATION	0.004401460762005073	DESIGN
for non null args, check for components and elements containing components	WITHOUT_CLASSIFICATION	0.9999963219724924	WITHOUT_CLASSIFICATION	3.6780275075185003E-6	DESIGN
cache the hashcode	WITHOUT_CLASSIFICATION	0.999931254583789	WITHOUT_CLASSIFICATION	6.87454162110603E-5	DESIGN
persistent collections may have components	WITHOUT_CLASSIFICATION	0.9999989209544581	WITHOUT_CLASSIFICATION	1.0790455420100172E-6	DESIGN
check for all components values in the collection	WITHOUT_CLASSIFICATION	0.9999999594905689	WITHOUT_CLASSIFICATION	4.050943111333049E-8	DESIGN
will check current level if some of them are not null or sublevels if they exist	WITHOUT_CLASSIFICATION	0.9999978743122059	WITHOUT_CLASSIFICATION	2.125687794209881E-6	DESIGN
do the test	WITHOUT_CLASSIFICATION	0.9999984227420727	WITHOUT_CLASSIFICATION	1.5772579272135945E-6	DESIGN
if its an uninitialized proxy it can't be transient	WITHOUT_CLASSIFICATION	0.999999563755761	WITHOUT_CLASSIFICATION	4.362442389701664E-7	DESIGN
unwrap it	WITHOUT_CLASSIFICATION	0.9999951542859037	WITHOUT_CLASSIFICATION	4.845714096339713E-6	DESIGN
See if the entity is already bound to this session, if not look at the entity identifier and assume that the entity is persistent if the id is not "unsaved" (that is, we rely on foreign keys to keep database integrity)	WITHOUT_CLASSIFICATION	0.998341503735752	WITHOUT_CLASSIFICATION	0.001658496264247991	DESIGN
an unfetched association can only point to an entity that already exists in the db	WITHOUT_CLASSIFICATION	0.9999995068226561	WITHOUT_CLASSIFICATION	4.931773438616439E-7	DESIGN
let the interceptor inspect the instance to decide	WITHOUT_CLASSIFICATION	0.999998576019528	WITHOUT_CLASSIFICATION	1.4239804720149056E-6	DESIGN
let the persister inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9998956683204577	WITHOUT_CLASSIFICATION	1.0433167954234865E-4	DESIGN
we use the assumed value, if there is one, to avoid hitting the database	WITHOUT_CLASSIFICATION	0.9999971111135041	WITHOUT_CLASSIFICATION	2.8888864959674736E-6	DESIGN
hit the database, after checking the session cache for a snapshot	WITHOUT_CLASSIFICATION	0.9225703745091378	WITHOUT_CLASSIFICATION	0.07742962549086221	DESIGN
context-entity-identifier returns null explicitly if the entity is not associated with the persistence context; so make some deeper checks...	WITHOUT_CLASSIFICATION	0.9999957646762639	WITHOUT_CLASSIFICATION	4.235323736062895E-6	DESIGN
int count = 0;	WITHOUT_CLASSIFICATION	0.9999978391951477	WITHOUT_CLASSIFICATION	2.1608048522295726E-6	DESIGN
the first key found after the given key	WITHOUT_CLASSIFICATION	0.9999998579202091	WITHOUT_CLASSIFICATION	1.4207979094144342E-7	DESIGN
checkForEnd = false;	WITHOUT_CLASSIFICATION	0.9999997386380534	WITHOUT_CLASSIFICATION	2.6136194664913876E-7	DESIGN
count++;	WITHOUT_CLASSIFICATION	0.9999319841694446	WITHOUT_CLASSIFICATION	6.80158305553168E-5	DESIGN
end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999983879864949	WITHOUT_CLASSIFICATION	1.6120135050939927E-6	DESIGN
we ran out of keys to try	WITHOUT_CLASSIFICATION	0.9999540436268596	WITHOUT_CLASSIFICATION	4.595637314031493E-5	DESIGN
first element of array is reserved for the actual instance we are loading!	WITHOUT_CLASSIFICATION	0.9999995954209303	WITHOUT_CLASSIFICATION	4.045790696463012E-7	DESIGN
the first id found after the given id	WITHOUT_CLASSIFICATION	0.9999999010950883	WITHOUT_CLASSIFICATION	9.890491158413035E-8	DESIGN
we ran out of ids to try	WITHOUT_CLASSIFICATION	0.9997548665104486	WITHOUT_CLASSIFICATION	2.451334895513601E-4	DESIGN
look for existing collection as part of the persistence context	WITHOUT_CLASSIFICATION	0.9999999997224114	WITHOUT_CLASSIFICATION	2.7758856400075376E-10	DESIGN
ignore this row of results! Note the early exit	WITHOUT_CLASSIFICATION	0.9999943646220966	WITHOUT_CLASSIFICATION	5.635377903511183E-6	DESIGN
initialize this collection	WITHOUT_CLASSIFICATION	0.999895564823051	WITHOUT_CLASSIFICATION	1.0443517694891126E-4	DESIGN
create one	WITHOUT_CLASSIFICATION	0.9999939290163296	WITHOUT_CLASSIFICATION	6.0709836704094255E-6	DESIGN
warning: can cause a recursive calls! (proxy initialization)	WITHOUT_CLASSIFICATION	0.9999996947155985	WITHOUT_CLASSIFICATION	3.052844015396502E-7	DESIGN
there were no queued additions and the role has a cache	WITHOUT_CLASSIFICATION	0.9999713814337527	WITHOUT_CLASSIFICATION	2.8618566247304162E-5	DESIGN
and this is not a forced initialization during flush	WITHOUT_CLASSIFICATION	0.9999990364545047	WITHOUT_CLASSIFICATION	9.635454953345638E-7	DESIGN
some filters affecting the collection are enabled on the session, so do not do the put into the cache.	WITHOUT_CLASSIFICATION	0.9999994887794568	WITHOUT_CLASSIFICATION	5.11220543278297E-7	DESIGN
cleanup code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995983374302425	WITHOUT_CLASSIFICATION	4.0166256975750713E-4	DESIGN
loading collection xrefs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998737279846	WITHOUT_CLASSIFICATION	1.2627201534176237E-7	DESIGN
Collection load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999961421051384	WITHOUT_CLASSIFICATION	3.85789486161802E-6	DESIGN
simple cache of param metadata based on query string. Ideally, the original "user-supplied query" string should be used to retreive this metadata (i.e., not the para-list-expanded query string) to avoid unnecessary cache entries. Used solely for caching param metadata for native-sql queries, see getSQLParameterMetadata() for a discussion as to why...	WITHOUT_CLASSIFICATION	0.9932292545245742	WITHOUT_CLASSIFICATION	0.006770745475425821	DESIGN
the cache of the actual plans...	WITHOUT_CLASSIFICATION	0.999999573608324	WITHOUT_CLASSIFICATION	4.263916759966958E-7	DESIGN
package	WITHOUT_CLASSIFICATION	0.9999575291056456	WITHOUT_CLASSIFICATION	4.2470894354337264E-5	DESIGN
package	WITHOUT_CLASSIFICATION	0.9999575291056456	WITHOUT_CLASSIFICATION	4.2470894354337264E-5	DESIGN
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999999372194239	WITHOUT_CLASSIFICATION	6.278057608111106E-8	DESIGN
for native-sql queries, the param metadata is determined outside any relation to a query plan, because query plan creation and/or retreival for a native-sql query depends on all of the return types having been set, which might not be the case up-front when param metadata would be most useful	WITHOUT_CLASSIFICATION	0.9780770060560064	WITHOUT_CLASSIFICATION	0.021922993943993493	DESIGN
don't care...	WITHOUT_CLASSIFICATION	0.9998154740453655	WITHOUT_CLASSIFICATION	1.8452595463447168E-4	DESIGN
Recognition code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999802631830937	WITHOUT_CLASSIFICATION	1.9736816906204468E-5	DESIGN
don't care...	WITHOUT_CLASSIFICATION	0.9998154740453655	WITHOUT_CLASSIFICATION	1.8452595463447168E-4	DESIGN
NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9986993015641223	WITHOUT_CLASSIFICATION	0.0013006984358776325	DESIGN
break the outer loop !!!	WITHOUT_CLASSIFICATION	0.9993133133225487	WITHOUT_CLASSIFICATION	6.866866774512648E-4	DESIGN
named parameter	WITHOUT_CLASSIFICATION	0.999983948614763	WITHOUT_CLASSIFICATION	1.6051385236955884E-5	DESIGN
could be either an ordinal or JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999892071628208	WITHOUT_CLASSIFICATION	1.0792837179111475E-5	DESIGN
a peek ahead showed this as an JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999992838448006	WITHOUT_CLASSIFICATION	7.161551993131253E-7	DESIGN
make sure this "name" is an integral	WITHOUT_CLASSIFICATION	0.9999995689134634	WITHOUT_CLASSIFICATION	4.3108653652456847E-7	DESIGN
pre-determine and cache the hashcode	WITHOUT_CLASSIFICATION	0.9999895600970867	WITHOUT_CLASSIFICATION	1.0439902913322657E-5	DESIGN
perform the actual work	WITHOUT_CLASSIFICATION	0.9999994822504599	WITHOUT_CLASSIFICATION	5.177495400404874E-7	DESIGN
if everything went ok, commit the transaction and close the obtained connection handle...	WITHOUT_CLASSIFICATION	0.9999993827639646	WITHOUT_CLASSIFICATION	6.172360354066451E-7	DESIGN
at some point the processing went bad, so we need to: 1) make sure the connection handle gets released 2) try to cleanup the JTA context as much as possible	WITHOUT_CLASSIFICATION	0.9999007545352041	WITHOUT_CLASSIFICATION	9.924546479587413E-5	DESIGN
finally handle the exception	WITHOUT_CLASSIFICATION	0.9996385197282087	WITHOUT_CLASSIFICATION	3.6148027179126784E-4	DESIGN
a "detached" collection that belonged to a different entity	WITHOUT_CLASSIFICATION	0.9998616114648434	WITHOUT_CLASSIFICATION	1.3838853515649543E-4	DESIGN
saveOrUpdateCopy() is deprecated!	WITHOUT_CLASSIFICATION	0.9999375670584233	WITHOUT_CLASSIFICATION	6.243294157670529E-5	DESIGN
collectionPersister should not be null, but we don't want to throw an exception if it is null	WITHOUT_CLASSIFICATION	0.9858614807142688	WITHOUT_CLASSIFICATION	0.014138519285731042	DESIGN
otherwise a null or brand new collection this will also (inefficiently) handle arrays, which have no snapshot, so we can't do any better processArrayOrNewCollection(collection, type);	WITHOUT_CLASSIFICATION	0.9979404840906905	WITHOUT_CLASSIFICATION	0.0020595159093094867	DESIGN
a "detached" collection that originally belonged to the same entity	WITHOUT_CLASSIFICATION	0.9998743629431937	WITHOUT_CLASSIFICATION	1.256370568063766E-4	DESIGN
do nothing	WITHOUT_CLASSIFICATION	0.9999827039963153	WITHOUT_CLASSIFICATION	1.7296003684667482E-5	DESIGN
do nothing	WITHOUT_CLASSIFICATION	0.9999827039963153	WITHOUT_CLASSIFICATION	1.7296003684667482E-5	DESIGN
Force a substitution!	WITHOUT_CLASSIFICATION	0.9997981367105393	WITHOUT_CLASSIFICATION	2.0186328946066127E-4	DESIGN
The user requested a "greater" (i.e. more restrictive) form of pessimistic lock	WITHOUT_CLASSIFICATION	0.9999999487203163	WITHOUT_CLASSIFICATION	5.1279683815402E-8	DESIGN
the database now holds a lock + the object is flushed from the cache, so release the soft lock	WITHOUT_CLASSIFICATION	0.9999964029365758	WITHOUT_CLASSIFICATION	3.5970634241550017E-6	DESIGN
now update the object .. has to be outside the main if block above (because of collections)	WITHOUT_CLASSIFICATION	0.9999983753583775	WITHOUT_CLASSIFICATION	1.6246416224850431E-6	DESIGN
Search for collections by reachability, updating their role. We don't want to touch collections reachable from a deleted object	WITHOUT_CLASSIFICATION	0.997915594580875	WITHOUT_CLASSIFICATION	0.002084405419125066	DESIGN
this is a situation where the entity id is assigned by a post-insert generator and was saved outside the transaction forcing it to be delayed	WITHOUT_CLASSIFICATION	0.9999961197565607	WITHOUT_CLASSIFICATION	3.8802434393672035E-6	DESIGN
NOTE: we need to do the wrap here even if its not "dirty", because collections need wrapping but changes to _them_ don't dirty the container. Also, for versioned data, we need to wrap before calling searchForDirtyCollections	WITHOUT_CLASSIFICATION	0.9999933446971914	WITHOUT_CLASSIFICATION	6.655302808656647E-6	DESIGN
grab its state saved at deletion	WITHOUT_CLASSIFICATION	0.9999911758469779	WITHOUT_CLASSIFICATION	8.82415302208046E-6	DESIGN
grab its current state	WITHOUT_CLASSIFICATION	0.9999961332411414	WITHOUT_CLASSIFICATION	3.866758858511025E-6	DESIGN
schedule the update note that we intentionally do _not_ pass in currentPersistentState!	WITHOUT_CLASSIFICATION	0.9999999993605219	WITHOUT_CLASSIFICATION	6.394781769424667E-10	DESIGN
substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999910869045836	WITHOUT_CLASSIFICATION	8.913095416432623E-6	DESIGN
give the Interceptor a chance to process property values, if the properties were modified by the Interceptor, we need to set them back to the object	WITHOUT_CLASSIFICATION	0.9999949527626175	WITHOUT_CLASSIFICATION	5.047237382453487E-6	DESIGN
compare to cached state (ignoring collections unless versioned)	WITHOUT_CLASSIFICATION	0.9999999973562226	WITHOUT_CLASSIFICATION	2.643777396968459E-9	DESIGN
if it was dirtied by a collection only	WITHOUT_CLASSIFICATION	0.9999945574194928	WITHOUT_CLASSIFICATION	5.442580507217864E-6	DESIGN
increment the version number (if necessary)	WITHOUT_CLASSIFICATION	0.999861074150281	WITHOUT_CLASSIFICATION	1.3892584971892408E-4	DESIGN
check nullability but do not perform command execute we'll use scheduled updates for that.	WITHOUT_CLASSIFICATION	0.999999774383127	WITHOUT_CLASSIFICATION	2.256168729843407E-7	DESIGN
give the Interceptor a chance to modify property values	WITHOUT_CLASSIFICATION	0.9993686273109319	WITHOUT_CLASSIFICATION	6.313726890679918E-4	DESIGN
now we might need to recalculate the dirtyProperties array	WITHOUT_CLASSIFICATION	0.9363855547927854	WITHOUT_CLASSIFICATION	0.06361444520721464	DESIGN
use the current version	WITHOUT_CLASSIFICATION	0.9999888128121307	WITHOUT_CLASSIFICATION	1.118718786921986E-5	DESIGN
Interceptor returned null, so do the dirtycheck ourself, if possible	WITHOUT_CLASSIFICATION	0.9999998571985623	WITHOUT_CLASSIFICATION	1.428014376745622E-7	DESIGN
object loaded by update()	WITHOUT_CLASSIFICATION	0.9999988096138132	WITHOUT_CLASSIFICATION	1.1903861867780833E-6	DESIGN
dirty check against the usual snapshot of the entity	WITHOUT_CLASSIFICATION	0.999998315129689	WITHOUT_CLASSIFICATION	1.6848703111124207E-6	DESIGN
dirty check against the database snapshot, if possible/necessary	WITHOUT_CLASSIFICATION	0.9998177908976389	WITHOUT_CLASSIFICATION	1.8220910236104636E-4	DESIGN
the Interceptor handled the dirty checking	WITHOUT_CLASSIFICATION	0.9992026527524083	WITHOUT_CLASSIFICATION	7.973472475917607E-4	DESIGN
even process null collections	WITHOUT_CLASSIFICATION	0.99999765212457	WITHOUT_CLASSIFICATION	2.3478754300312E-6	DESIGN
get the id from the object	WITHOUT_CLASSIFICATION	0.9999839647363714	WITHOUT_CLASSIFICATION	1.6035263628613366E-5	DESIGN
always do an INSERT, and let it fail by constraint violation	WITHOUT_CLASSIFICATION	0.9999999797176332	WITHOUT_CLASSIFICATION	2.0282366762257592E-8	DESIGN
what is the version on the database?	WITHOUT_CLASSIFICATION	0.993725553199915	WITHOUT_CLASSIFICATION	0.0062744468000849605	DESIGN
/ HHH-2378	WITHOUT_CLASSIFICATION	0.9999961165134388	WITHOUT_CLASSIFICATION	3.883486561270144E-6	DESIGN
will result in a SQL UPDATE:	WITHOUT_CLASSIFICATION	0.9999137321609957	WITHOUT_CLASSIFICATION	8.6267839004243E-5	DESIGN
else do nothing (don't even reassociate object!)	WITHOUT_CLASSIFICATION	0.9999105618361634	WITHOUT_CLASSIFICATION	8.943816383657513E-5	DESIGN
no existing row - do an insert	WITHOUT_CLASSIFICATION	0.9999893682241828	WITHOUT_CLASSIFICATION	1.063177581725317E-5	DESIGN
refresh() does not pass an entityName	WITHOUT_CLASSIFICATION	0.9999961146237932	WITHOUT_CLASSIFICATION	3.8853762067534066E-6	DESIGN
do not return a proxy! (this option indicates we are initializing a proxy)	WITHOUT_CLASSIFICATION	0.9989852934242669	WITHOUT_CLASSIFICATION	0.0010147065757331443	DESIGN
return a proxy if appropriate	WITHOUT_CLASSIFICATION	0.9999424815338376	WITHOUT_CLASSIFICATION	5.751846616242714E-5	DESIGN
return existing object or initialized proxy (unless deleted)	WITHOUT_CLASSIFICATION	0.9999998513465082	WITHOUT_CLASSIFICATION	1.4865349180444734E-7	DESIGN
return new uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999994578478172	WITHOUT_CLASSIFICATION	5.421521828028799E-7	DESIGN
this object was already loaded	WITHOUT_CLASSIFICATION	0.9902097333094988	WITHOUT_CLASSIFICATION	0.009790266690501261	DESIGN
Entity was found in second-level cache...	WITHOUT_CLASSIFICATION	0.9986887961871518	WITHOUT_CLASSIFICATION	0.0013112038128482652	DESIGN
make it circular-reference safe	WITHOUT_CLASSIFICATION	0.9999999737251571	WITHOUT_CLASSIFICATION	2.6274842881245072E-8	DESIGN
intializes result by side-effect	WITHOUT_CLASSIFICATION	0.9999999833439007	WITHOUT_CLASSIFICATION	1.6656099281774925E-8	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Pre-flushing section ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996266270749	WITHOUT_CLASSIFICATION	3.733729251948704E-7	DESIGN
some statistics	WITHOUT_CLASSIFICATION	0.9999782444208101	WITHOUT_CLASSIFICATION	2.1755579189956982E-5	DESIGN
safe from concurrent modification because of how entryList() is implemented on IdentityMap	WITHOUT_CLASSIFICATION	0.9996701205553303	WITHOUT_CLASSIFICATION	3.298794446696407E-4	DESIGN
Initialize dirty flags for arrays + collections with composite elements and reset reached, doupdate, etc.	WITHOUT_CLASSIFICATION	0.9999999989236568	WITHOUT_CLASSIFICATION	1.0763432447909252E-9	DESIGN
Among other things, updateReachables() will recursively load all collections that are moving roles. This might cause entities to be loaded.	WITHOUT_CLASSIFICATION	0.9998061802186005	WITHOUT_CLASSIFICATION	1.938197813996422E-4	DESIGN
So this needs to be safe from concurrent modification problems. It is safe because of how IdentityMap implements entrySet()	WITHOUT_CLASSIFICATION	0.98963726219983	DESIGN	0.010362737800170154	WITHOUT_CLASSIFICATION
Update the status of the object and if necessary, schedule an update	WITHOUT_CLASSIFICATION	0.9999966505254856	WITHOUT_CLASSIFICATION	3.34947451437891E-6	DESIGN
Schedule updates to collections:	WITHOUT_CLASSIFICATION	0.99999982277491	WITHOUT_CLASSIFICATION	1.772250900688327E-7	DESIGN
we need to lock the collection caches before executing entity inserts/updates in order to account for bidi associations	WITHOUT_CLASSIFICATION	0.999977665316703	WITHOUT_CLASSIFICATION	2.2334683297028432E-5	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Post-flushing section ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995404395281	WITHOUT_CLASSIFICATION	4.595604718593007E-7	DESIGN
the database has changed now, so the subselect results need to be invalidated	WITHOUT_CLASSIFICATION	0.9999711647151545	WITHOUT_CLASSIFICATION	2.8835284845568618E-5	DESIGN
if the collection is dereferenced, remove from the session cache iter.remove(); does not work, since the entrySet is not backed by the set	WITHOUT_CLASSIFICATION	0.9999996774550713	WITHOUT_CLASSIFICATION	3.225449286951471E-7	DESIGN
otherwise recreate the mapping between the collection and its key	WITHOUT_CLASSIFICATION	0.9999991938436619	WITHOUT_CLASSIFICATION	8.061563381898356E-7	DESIGN
get a snapshot	WITHOUT_CLASSIFICATION	0.9999909536451715	WITHOUT_CLASSIFICATION	9.046354828418685E-6	DESIGN
package-private	WITHOUT_CLASSIFICATION	0.9999890939201521	WITHOUT_CLASSIFICATION	1.0906079847779578E-5	DESIGN
package-private	WITHOUT_CLASSIFICATION	0.9999890939201521	WITHOUT_CLASSIFICATION	1.0906079847779578E-5	DESIGN
key is an entity involved with the operation performed by the listener; value is a flag indicating if the listener explicitly operates on the entity	WITHOUT_CLASSIFICATION	0.9999999999051502	WITHOUT_CLASSIFICATION	9.484985803120522E-11	DESIGN
EARLY EXIT!!!	WITHOUT_CLASSIFICATION	0.9999779580627807	WITHOUT_CLASSIFICATION	2.204193721935768E-5	DESIGN
ie. the entity came in from update()	WITHOUT_CLASSIFICATION	0.999846245299903	WITHOUT_CLASSIFICATION	1.5375470009705084E-4	DESIGN
before any callbacks, etc, so subdeletions see that this deletion happened first	WITHOUT_CLASSIFICATION	0.9999944345997602	WITHOUT_CLASSIFICATION	5.565400239750083E-6	DESIGN
Ensures that containing deletions happen before sub-deletions	WITHOUT_CLASSIFICATION	0.9999999811053619	WITHOUT_CLASSIFICATION	1.889463800940757E-8	DESIGN
TypeFactory.deepCopy( currentState, propTypes, persister.getPropertyUpdateability(), deletedState, session );	WITHOUT_CLASSIFICATION	0.9999998190554191	WITHOUT_CLASSIFICATION	1.8094458094683534E-7	DESIGN
cascade-delete to collections BEFORE the collection owner is deleted	WITHOUT_CLASSIFICATION	0.9999968812328771	WITHOUT_CLASSIFICATION	3.118767122767368E-6	DESIGN
cascade-delete to many-to-one AFTER the parent was deleted	WITHOUT_CLASSIFICATION	0.9982318378463294	WITHOUT_CLASSIFICATION	0.001768162153670633	DESIGN
if it is an initialized proxy, let cascade handle it later on	WITHOUT_CLASSIFICATION	0.9999988613771289	WITHOUT_CLASSIFICATION	1.1386228710720127E-6	DESIGN
assign the requested id to the proxy, before reassociating the proxy	WITHOUT_CLASSIFICATION	0.9999946875079245	WITHOUT_CLASSIFICATION	5.312492075453407E-6	DESIGN
an uninitialized proxy, noop, don't even need to return an id, since it is never a save()	WITHOUT_CLASSIFICATION	0.99999999916184	WITHOUT_CLASSIFICATION	8.381601130907871E-10	DESIGN
initialize properties of the event:	WITHOUT_CLASSIFICATION	0.9999987728166677	WITHOUT_CLASSIFICATION	1.2271833323294945E-6	DESIGN
return the id in the event object	WITHOUT_CLASSIFICATION	0.9999424519467768	WITHOUT_CLASSIFICATION	5.754805322308913E-5	DESIGN
TRANSIENT or DELETED	WITHOUT_CLASSIFICATION	0.9999998877763322	WITHOUT_CLASSIFICATION	1.1222366781976732E-7	DESIGN
use the id assigned to the instance	WITHOUT_CLASSIFICATION	0.9999942871777927	WITHOUT_CLASSIFICATION	5.712822207325176E-6	DESIGN
assume this is a newly instantiated transient object which should be saved rather than updated	WITHOUT_CLASSIFICATION	0.9130024299483046	DESIGN	0.08699757005169534	WITHOUT_CLASSIFICATION
this is a transient object with existing persistent state not loaded by the session	WITHOUT_CLASSIFICATION	0.9999888452148076	WITHOUT_CLASSIFICATION	1.115478519248882E-5	DESIGN
a collection loaded in the current session can not possibly be the collection belonging to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999993845972719	WITHOUT_CLASSIFICATION	6.154027280537632E-7	DESIGN
cachedState,	WITHOUT_CLASSIFICATION	0.9999919762583777	WITHOUT_CLASSIFICATION	8.023741622398354E-6	DESIGN
assume true, since we don't really know, and it doesn't matter	WITHOUT_CLASSIFICATION	0.9999045245742486	WITHOUT_CLASSIFICATION	9.547542575132318E-5	DESIGN
a "detached" collection!	WITHOUT_CLASSIFICATION	0.9999793928716119	WITHOUT_CLASSIFICATION	2.060712838815315E-5	DESIGN
if the collection belonged to a different entity, clean up the existing state of the collection	WITHOUT_CLASSIFICATION	0.9999799189810341	WITHOUT_CLASSIFICATION	2.0081018965881352E-5	DESIGN
log.debug( "calling onLoad()" );	WITHOUT_CLASSIFICATION	0.9999999497392048	WITHOUT_CLASSIFICATION	5.0260795140284425E-8	DESIGN
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999950992549933	WITHOUT_CLASSIFICATION	4.90074500673845E-6	DESIGN
note: performExecutions() clears all collectionXxxxtion collections (the collection actions) in the session	WITHOUT_CLASSIFICATION	0.9999871029141455	WITHOUT_CLASSIFICATION	1.2897085854424258E-5	DESIGN
if no array holder we found an unwrappered array (this can't occur, because we now always call wrap() before getting to here) return (ah==null) ? true : searchForDirtyCollections(ah, type);	WITHOUT_CLASSIFICATION	0.9998461717614843	WITHOUT_CLASSIFICATION	1.538282385157318E-4	DESIGN
if not wrappered yet, its dirty (this can't occur, because we now always call wrap() before getting to here) return ( ! (obj instanceof PersistentCollection) ) ? true : searchForDirtyCollections( (PersistentCollection) obj, type );	WITHOUT_CLASSIFICATION	0.9987516470460714	DESIGN	0.0012483529539285708	WITHOUT_CLASSIFICATION
we need to check even if it was not initialized, because of delayed adds!	WITHOUT_CLASSIFICATION	0.999994664441601	WITHOUT_CLASSIFICATION	5.3355583990278045E-6	DESIGN
NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.999960815347523	WITHOUT_CLASSIFICATION	3.918465247704628E-5	DESIGN
find any entities that are still transient after retry	WITHOUT_CLASSIFICATION	0.9999799067998442	WITHOUT_CLASSIFICATION	2.009320015582068E-5	DESIGN
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999950992549933	WITHOUT_CLASSIFICATION	4.90074500673845E-6	DESIGN
Check the persistence context for an entry relating to this entity to be merged...	WITHOUT_CLASSIFICATION	0.9998424512940729	WITHOUT_CLASSIFICATION	1.5754870592720735E-4	DESIGN
we have specialized case of a detached entity from the perspective of the merge operation. Specifically, we have an incoming entity instance which has a corresponding entry in the current persistence context, but registered under a different entity instance	WITHOUT_CLASSIFICATION	0.9997876259595366	WITHOUT_CLASSIFICATION	2.1237404046339737E-4	DESIGN
DELETED	WITHOUT_CLASSIFICATION	0.9999792028433878	WITHOUT_CLASSIFICATION	2.0797156612222364E-5	DESIGN
before cascade!	WITHOUT_CLASSIFICATION	0.9999926385789853	WITHOUT_CLASSIFICATION	7.3614210146815885E-6	DESIGN
cascade first, so that all unsaved objects get their copy created before we actually copy cascadeOnMerge(event, persister, entity, copyCache, Cascades.CASCADE_BEFORE_MERGE);	WITHOUT_CLASSIFICATION	0.9999999871564326	WITHOUT_CLASSIFICATION	1.284356734163435E-8	DESIGN
this bit is only really absolutely necessary for handling requestedId, but is also good if we merge multiple object graphs, since it helps ensure uniqueness	WITHOUT_CLASSIFICATION	0.7099982520755637	WITHOUT_CLASSIFICATION	0.29000174792443634	DESIGN
continue...; we'll find out if it ends up not getting saved later	WITHOUT_CLASSIFICATION	0.9994599661372575	WITHOUT_CLASSIFICATION	5.400338627425768E-4	DESIGN
cascade first, so that all unsaved objects get their copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999996608144691	WITHOUT_CLASSIFICATION	3.3918553091692724E-7	DESIGN
check that entity id = requestedId	WITHOUT_CLASSIFICATION	0.9999916453082195	WITHOUT_CLASSIFICATION	8.354691780472685E-6	DESIGN
before cascade!	WITHOUT_CLASSIFICATION	0.9999926385789853	WITHOUT_CLASSIFICATION	7.3614210146815885E-6	DESIGN
we got here because we assumed that an instance with an assigned id was detached, when it was really persistent	WITHOUT_CLASSIFICATION	0.9999987715191918	WITHOUT_CLASSIFICATION	1.228480808233666E-6	DESIGN
cascade first, so that all unsaved objects get their copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999996608144691	WITHOUT_CLASSIFICATION	3.3918553091692724E-7	DESIGN
copyValues works by reflection, so explicitly mark the entity instance dirty	WITHOUT_CLASSIFICATION	0.9998746223757834	WITHOUT_CLASSIFICATION	1.253776242166131E-4	DESIGN
EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999931351401338	WITHOUT_CLASSIFICATION	6.8648598661604924E-6	DESIGN
source.getBatcher().executeBatch(); found another way to ensure that all batched joined inserts have been executed	WITHOUT_CLASSIFICATION	0.9999999820728622	WITHOUT_CLASSIFICATION	1.7927137709711373E-8	DESIGN
substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999910869045836	WITHOUT_CLASSIFICATION	8.913095416432623E-6	DESIGN
now done in EntityIdentityInsertAction persister.setIdentifier( entity, id, source.getEntityMode() );	WITHOUT_CLASSIFICATION	0.9999999748098227	WITHOUT_CLASSIFICATION	2.5190177249857044E-8	DESIGN
source.getPersistenceContext().removeNonExist( new EntityKey( id, persister, source.getEntityMode() ) );	WITHOUT_CLASSIFICATION	0.9999996532034175	WITHOUT_CLASSIFICATION	3.467965824626526E-7	DESIGN
keep the existing version number in the case of replicate!	WITHOUT_CLASSIFICATION	0.9999989772773824	WITHOUT_CLASSIFICATION	1.0227226175620144E-6	DESIGN
cascade-save to many-to-one BEFORE the parent is saved	WITHOUT_CLASSIFICATION	0.9973273342326884	WITHOUT_CLASSIFICATION	0.0026726657673116264	DESIGN
pass this as an argument only to avoid double looking	WITHOUT_CLASSIFICATION	0.9999999238364671	WITHOUT_CLASSIFICATION	7.616353293678103E-8	DESIGN
the object is persistent	WITHOUT_CLASSIFICATION	0.999926152330811	WITHOUT_CLASSIFICATION	7.384766918910608E-5	DESIGN
the entity is associated with the session, so check its status	WITHOUT_CLASSIFICATION	0.9998784174461475	WITHOUT_CLASSIFICATION	1.2158255385241955E-4	DESIGN
do nothing for persistent instances	WITHOUT_CLASSIFICATION	0.999997844650094	WITHOUT_CLASSIFICATION	2.1553499060700385E-6	DESIGN
ie. e.status==DELETED	WITHOUT_CLASSIFICATION	0.9999794462127137	WITHOUT_CLASSIFICATION	2.0553787286228744E-5	DESIGN
the object is transient or detached	WITHOUT_CLASSIFICATION	0.9999915720956941	WITHOUT_CLASSIFICATION	8.427904305850499E-6	DESIGN
NOTE EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999957624846297	WITHOUT_CLASSIFICATION	4.2375153702742635E-6	DESIGN
Private constructor - stops checkstyle from complaining.	WITHOUT_CLASSIFICATION	0.9999982998571504	WITHOUT_CLASSIFICATION	1.7001428495488038E-6	DESIGN
First, try to find a matching constructor accepting a ViolatedConstraintNameExtracter param...	WITHOUT_CLASSIFICATION	0.9999943002056108	WITHOUT_CLASSIFICATION	5.699794389293217E-6	DESIGN
eat it and try next	WITHOUT_CLASSIFICATION	0.9993953226213872	WITHOUT_CLASSIFICATION	6.046773786128517E-4	DESIGN
Otherwise, try to use the no-arg constructor	WITHOUT_CLASSIFICATION	0.9999984650461041	WITHOUT_CLASSIFICATION	1.534953895881743E-6	DESIGN
oracle sql-state code for deadlock	WITHOUT_CLASSIFICATION	0.9999648282878507	WITHOUT_CLASSIFICATION	3.51717121493138E-5	DESIGN
CollectionPropertyMapping processes everything except 'index'.	WITHOUT_CLASSIFICATION	0.9999999705261328	WITHOUT_CLASSIFICATION	2.9473867334559545E-8	DESIGN
remove initial ", "	WITHOUT_CLASSIFICATION	0.9999994128608473	WITHOUT_CLASSIFICATION	5.87139152746824E-7	DESIGN
remove initial " and "	WITHOUT_CLASSIFICATION	0.9999957033448638	WITHOUT_CLASSIFICATION	4.2966551362132666E-6	DESIGN
beforeClassTokens.add("new"); DEFINITELY DON'T HAVE THIS!!	WITHOUT_CLASSIFICATION	0.999989198076254	WITHOUT_CLASSIFICATION	1.080192374600917E-5	DESIGN
notAfterClassTokens.add(",");	WITHOUT_CLASSIFICATION	0.9999884867462854	WITHOUT_CLASSIFICATION	1.1513253714712068E-5	DESIGN
just especially for the trivial collection filter	WITHOUT_CLASSIFICATION	0.9999996769424152	WITHOUT_CLASSIFICATION	3.230575848455018E-7	DESIGN
update last non-whitespace token, if necessary	WITHOUT_CLASSIFICATION	0.9999999504556648	WITHOUT_CLASSIFICATION	4.9544335312244754E-8	DESIGN
select-range is terminated by declaration of "from"	WITHOUT_CLASSIFICATION	0.9999940925935378	WITHOUT_CLASSIFICATION	5.907406462200026E-6	DESIGN
scan for next non-whitespace token	WITHOUT_CLASSIFICATION	0.9999998381833449	WITHOUT_CLASSIFICATION	1.618166550391349E-7	DESIGN
Note this!!	WITHOUT_CLASSIFICATION	0.9986762053588445	WITHOUT_CLASSIFICATION	0.0013237946411555127	DESIGN
Error message constants.	WITHOUT_CLASSIFICATION	0.9999994415839535	WITHOUT_CLASSIFICATION	5.584160464603274E-7	DESIGN
handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992629049252	WITHOUT_CLASSIFICATION	7.370950747829797E-7	DESIGN
semantic action handling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992141764836018	WITHOUT_CLASSIFICATION	7.858235163982015E-4	DESIGN
Handle collection-fiter compilation. IMPORTANT NOTE: This is modifying the INPUT (HQL) tree, not the output tree!	WITHOUT_CLASSIFICATION	0.9915218485792143	WITHOUT_CLASSIFICATION	0.008478151420785679	DESIGN
Show the modified AST.	WITHOUT_CLASSIFICATION	0.9999623954942176	WITHOUT_CLASSIFICATION	3.760450578233622E-5	DESIGN
Create a parameter specification for the collection filter...	WITHOUT_CLASSIFICATION	0.9999919805685927	WITHOUT_CLASSIFICATION	8.019431407235526E-6	DESIGN
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999993529084058	WITHOUT_CLASSIFICATION	6.470915942397985E-7	DESIGN
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999993529084058	WITHOUT_CLASSIFICATION	6.470915942397985E-7	DESIGN
Get the names of the columns used to link between the collection owner and the collection elements.	WITHOUT_CLASSIFICATION	0.9999908722852874	WITHOUT_CLASSIFICATION	9.127714712602433E-6	DESIGN
The path AST should be a DotNode, and it should have been evaluated already.	WITHOUT_CLASSIFICATION	0.9999650216308354	WITHOUT_CLASSIFICATION	3.497836916450744E-5	DESIGN
Tell the dot node about the join type.	WITHOUT_CLASSIFICATION	0.9999993407783049	WITHOUT_CLASSIFICATION	6.592216951630607E-7	DESIGN
Re-arrange the tree so that the collection function is the root and the lhs is the path.	WITHOUT_CLASSIFICATION	0.9999990236314237	WITHOUT_CLASSIFICATION	9.763685762813899E-7	DESIGN
Don't forget to resolve the argument! Resolve the collection function now.	WITHOUT_CLASSIFICATION	0.9999996544959292	WITHOUT_CLASSIFICATION	3.4550407074121604E-7	DESIGN
Resolve everything up to this dot, but don't resolve the placeholders yet.	WITHOUT_CLASSIFICATION	0.9614587783118217	WITHOUT_CLASSIFICATION	0.038541221688178307	DESIGN
Should mean that no such property was found	WITHOUT_CLASSIFICATION	0.9996693633214252	WITHOUT_CLASSIFICATION	3.30636678574771E-4	DESIGN
Was there an explicit select expression?	WITHOUT_CLASSIFICATION	0.9999941353198635	WITHOUT_CLASSIFICATION	5.864680136564014E-6	DESIGN
Attach any mapping-defined "ORDER BY" fragments	WITHOUT_CLASSIFICATION	0.9999998658641327	WITHOUT_CLASSIFICATION	1.341358672515867E-7	DESIGN
Use the explicitly declared select expression; determine the return types indicated by each select token	WITHOUT_CLASSIFICATION	0.999999769443807	WITHOUT_CLASSIFICATION	2.3055619315335076E-7	DESIGN
After that, process the JOINs. Invoke a delegate to do the work, as this is farily complex.	WITHOUT_CLASSIFICATION	0.9999995071518567	WITHOUT_CLASSIFICATION	4.928481433153326E-7	DESIGN
Make #@%$^#^&# sure no alias is applied to the table name	WITHOUT_CLASSIFICATION	0.9999990493114573	WITHOUT_CLASSIFICATION	9.506885425922635E-7	DESIGN
We need to generate ids as part of this bulk insert. Note that this is only supported for sequence-style generators and post-insert-style generators; basically, only in-db generators	WITHOUT_CLASSIFICATION	0.9999990527009416	WITHOUT_CLASSIFICATION	9.472990583835203E-7	DESIGN
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999993529084058	WITHOUT_CLASSIFICATION	6.470915942397985E-7	DESIGN
We need to seed the version value as part of this bulk insert	WITHOUT_CLASSIFICATION	0.9999987295684069	WITHOUT_CLASSIFICATION	1.2704315931601634E-6	DESIGN
we need to wrtap the param in a cast()	WITHOUT_CLASSIFICATION	0.9992155520862959	WITHOUT_CLASSIFICATION	7.844479137040109E-4	DESIGN
This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9994115452570804	WITHOUT_CLASSIFICATION	5.884547429196715E-4	DESIGN
Generate implicit joins, only if necessary.	WITHOUT_CLASSIFICATION	0.9999791034409446	WITHOUT_CLASSIFICATION	2.0896559055427997E-5	DESIGN
Notify the FROM element that it is being referenced by the select.	WITHOUT_CLASSIFICATION	0.9999974812912455	WITHOUT_CLASSIFICATION	2.5187087545269285E-6	DESIGN
Turn off includeSubclasses on all FromElements.	WITHOUT_CLASSIFICATION	0.9999667145192009	WITHOUT_CLASSIFICATION	3.328548079900579E-5	DESIGN
create the node initially with the param name so that it shows appropriately in the "original text" attribute	WITHOUT_CLASSIFICATION	0.9991246209888343	WITHOUT_CLASSIFICATION	8.753790111658056E-4	DESIGN
Use the delegate, resolve identifiers as FROM element aliases.	WITHOUT_CLASSIFICATION	0.9999995722841386	WITHOUT_CLASSIFICATION	4.277158613298879E-7	DESIGN
select clauses for insert statements should alwasy be treated as shallow	WITHOUT_CLASSIFICATION	0.9996492437506721	WITHOUT_CLASSIFICATION	3.5075624932793766E-4	DESIGN
no need to even collect this information if the persister is considered multi-table	WITHOUT_CLASSIFICATION	0.9993743209084832	WITHOUT_CLASSIFICATION	6.256790915166884E-4	DESIGN
Make sure that the persister is versioned	WITHOUT_CLASSIFICATION	0.999904971985233	WITHOUT_CLASSIFICATION	9.502801476696426E-5	DESIGN
handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992629049252	WITHOUT_CLASSIFICATION	7.370950747829797E-7	DESIGN
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999993529084058	WITHOUT_CLASSIFICATION	6.470915942397985E-7	DESIGN
--Commented out by Inspection (12/11/04 10:56 AM): int getWarningCount();	WITHOUT_CLASSIFICATION	0.9999999941318762	WITHOUT_CLASSIFICATION	5.868123759714079E-9	DESIGN
Alias references and identifiers use the same node class.	WITHOUT_CLASSIFICATION	0.9999998791018119	WITHOUT_CLASSIFICATION	1.208981880750269E-7	DESIGN
switch	WITHOUT_CLASSIFICATION	0.99996488853742	WITHOUT_CLASSIFICATION	3.511146257993533E-5	DESIGN
make a new one	WITHOUT_CLASSIFICATION	0.9999962635018125	WITHOUT_CLASSIFICATION	3.736498187368295E-6	DESIGN
just do the regular thing if you can't find the ctor Your AST must have default ctor to use this.	WITHOUT_CLASSIFICATION	0.9738184213561761	WITHOUT_CLASSIFICATION	0.026181578643823828	DESIGN
Initialize SQL nodes here.	WITHOUT_CLASSIFICATION	0.999999341745796	WITHOUT_CLASSIFICATION	6.58254204109728E-7	DESIGN
semantic action processing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999572841321143	WITHOUT_CLASSIFICATION	4.271586788563528E-5	DESIGN
if template is null we just write the function out as it appears in the hql statement	WITHOUT_CLASSIFICATION	0.9999994104571689	WITHOUT_CLASSIFICATION	5.895428310806822E-7	DESIGN
this function has a template -> redirect output and catch the arguments	WITHOUT_CLASSIFICATION	0.9999999959102751	WITHOUT_CLASSIFICATION	4.089724931900789E-9	DESIGN
--- Inner classes (moved here from sql-gen.g) ---	WITHOUT_CLASSIFICATION	0.999991548472506	WITHOUT_CLASSIFICATION	8.451527493924193E-6	DESIGN
check two "adjecent" nodes at the top of the from-clause tree	WITHOUT_CLASSIFICATION	0.9999999586186537	WITHOUT_CLASSIFICATION	4.138134629725539E-8	DESIGN
/	WITHOUT_CLASSIFICATION	0.99994903284862	WITHOUT_CLASSIFICATION	5.096715137985688E-5	DESIGN
these are just two unrelated table references	WITHOUT_CLASSIFICATION	0.9999894386597538	WITHOUT_CLASSIFICATION	1.0561340246244283E-5	DESIGN
again, both should be FromElements	WITHOUT_CLASSIFICATION	0.9999977514666215	WITHOUT_CLASSIFICATION	2.2485333785052407E-6	DESIGN
NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9986993015641223	WITHOUT_CLASSIFICATION	0.0013006984358776325	DESIGN
right represents a joins originating from left; or both right and left reprersent joins originating from the same FromElement	WITHOUT_CLASSIFICATION	0.9999995869130759	WITHOUT_CLASSIFICATION	4.1308692420240166E-7	DESIGN
check a set of parent/child nodes in the from-clause tree to determine if a comma is required between them	WITHOUT_CLASSIFICATION	0.9999999635183285	WITHOUT_CLASSIFICATION	3.648167139667295E-8	DESIGN
right represents a joins originating from left...	WITHOUT_CLASSIFICATION	0.9999990236584478	WITHOUT_CLASSIFICATION	9.763415521619546E-7	DESIGN
all clear	WITHOUT_CLASSIFICATION	0.9999986662488246	WITHOUT_CLASSIFICATION	1.3337511753737783E-6	DESIGN
Ignore the token class name parameter, and use a specific token class.	WITHOUT_CLASSIFICATION	0.9999999949623084	WITHOUT_CLASSIFICATION	5.037691483573069E-9	DESIGN
overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9998555327667198	WITHOUT_CLASSIFICATION	1.4446723328021812E-4	DESIGN
overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9998555327667198	WITHOUT_CLASSIFICATION	1.4446723328021812E-4	DESIGN
remember that ordinal parameters numbers are 1-based!!!	WITHOUT_CLASSIFICATION	0.9991780438658368	WITHOUT_CLASSIFICATION	8.219561341631516E-4	DESIGN
don't care about other param types here, just those explicitly user-defined...	WITHOUT_CLASSIFICATION	0.9999695820288006	WITHOUT_CLASSIFICATION	3.041797119939662E-5	DESIGN
If the query is already compiled, skip the compilation.	WITHOUT_CLASSIFICATION	0.999999952607015	WITHOUT_CLASSIFICATION	4.739298501769174E-8	DESIGN
Remember the parameters for the compilation.	WITHOUT_CLASSIFICATION	0.999996100434586	WITHOUT_CLASSIFICATION	3.899565413942741E-6	DESIGN
PHASE 1 : Parse the HQL into an AST.	WITHOUT_CLASSIFICATION	0.9999817296506234	WITHOUT_CLASSIFICATION	1.8270349376633035E-5	DESIGN
PHASE 2 : Analyze the HQL AST, and produce an SQL AST.	WITHOUT_CLASSIFICATION	0.9999727736520141	WITHOUT_CLASSIFICATION	2.722634798599056E-5	DESIGN
PHASE 3 : Generate the SQL.	WITHOUT_CLASSIFICATION	0.992692006939049	WITHOUT_CLASSIFICATION	0.007307993060951031	DESIGN
we do not actually propogate ANTLRExceptions as a cause, so log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9999999977360099	WITHOUT_CLASSIFICATION	2.263990137000716E-9	DESIGN
we do not actually propogate ANTLRExceptions as a cause, so log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9999999977360099	WITHOUT_CLASSIFICATION	2.263990137000716E-9	DESIGN
only needed during compilation phase...	WITHOUT_CLASSIFICATION	0.9999999568570104	WITHOUT_CLASSIFICATION	4.314298953046901E-8	DESIGN
Transform the tree.	WITHOUT_CLASSIFICATION	0.9999997645223526	WITHOUT_CLASSIFICATION	2.354776473948893E-7	DESIGN
Parse the query string into an HQL AST.	WITHOUT_CLASSIFICATION	0.9999954428579318	WITHOUT_CLASSIFICATION	4.557142068159774E-6	DESIGN
Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999263388551806	WITHOUT_CLASSIFICATION	7.366114481941046E-5	DESIGN
Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999263388551806	WITHOUT_CLASSIFICATION	7.366114481941046E-5	DESIGN
Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999263388551806	WITHOUT_CLASSIFICATION	7.366114481941046E-5	DESIGN
NOTE : ( max - 1 ) because first is zero-based while max is not...	WITHOUT_CLASSIFICATION	0.9996929887293513	WITHOUT_CLASSIFICATION	3.070112706486285E-4	DESIGN
-- Package local methods for the QueryLoader delegate --	WITHOUT_CLASSIFICATION	0.9999176983972712	WITHOUT_CLASSIFICATION	8.230160272882735E-5	DESIGN
If there are no collection fetches, then no further checks are needed	WITHOUT_CLASSIFICATION	0.9999999702022428	WITHOUT_CLASSIFICATION	2.979775713948726E-8	DESIGN
A shallow query is ok (although technically there should be no fetching here...)	WITHOUT_CLASSIFICATION	0.9960381177565296	WITHOUT_CLASSIFICATION	0.0039618822434704035	DESIGN
should be the first, but just to be safe...	WITHOUT_CLASSIFICATION	0.999899840491483	WITHOUT_CLASSIFICATION	1.001595085170605E-4	DESIGN
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999993529084058	WITHOUT_CLASSIFICATION	6.470915942397985E-7	DESIGN
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999993529084058	WITHOUT_CLASSIFICATION	6.470915942397985E-7	DESIGN
Impl Note: allows multiple collection fetches as long as the entire fecthed graph still "points back" to a single root entity for return	WITHOUT_CLASSIFICATION	0.9998872795145891	WITHOUT_CLASSIFICATION	1.1272048541087342E-4	DESIGN
Otherwise, we have a non-scalar select with defined collection fetch(es). Make sure that there is only a single root entity in the return (no tuples)	WITHOUT_CLASSIFICATION	0.9993434754121137	WITHOUT_CLASSIFICATION	6.565245878862979E-4	DESIGN
This is not strictly true. We actually just need to make sure that it is ordered by root-entity PK and that that order-by comes before any non-root-entity ordering...	WITHOUT_CLASSIFICATION	0.9998498205944112	WITHOUT_CLASSIFICATION	1.5017940558891837E-4	DESIGN
paramTranslations = new ParameterTranslationsImpl( collectedParameterSpecifications );	WITHOUT_CLASSIFICATION	0.999999618860216	WITHOUT_CLASSIFICATION	3.811397839205316E-7	DESIGN
we are already processing a dot-structure	WITHOUT_CLASSIFICATION	0.9999825862031287	WITHOUT_CLASSIFICATION	1.741379687124662E-5	DESIGN
igndore it...	WITHOUT_CLASSIFICATION	0.9999453263786735	WITHOUT_CLASSIFICATION	5.467362132638354E-5	DESIGN
we are now at a new tree level	WITHOUT_CLASSIFICATION	0.9999990934613789	WITHOUT_CLASSIFICATION	9.065386211768282E-7	DESIGN
[jsd] The fix for HHH-558...	WITHOUT_CLASSIFICATION	0.9614367681195083	WITHOUT_CLASSIFICATION	0.03856323188049165	DESIGN
If the token can tell us if it could be an identifier...	WITHOUT_CLASSIFICATION	0.9998817526853784	WITHOUT_CLASSIFICATION	1.1824731462169783E-4	DESIGN
... and the expected token type was an identifier, then:	WITHOUT_CLASSIFICATION	0.9999973995282951	WITHOUT_CLASSIFICATION	2.600471704770759E-6	DESIGN
Use the token as an identifier.	WITHOUT_CLASSIFICATION	0.9999999565547765	WITHOUT_CLASSIFICATION	4.344522354698855E-8	DESIGN
Add the token to the AST.	WITHOUT_CLASSIFICATION	0.9999959155397798	WITHOUT_CLASSIFICATION	4.0844602202518455E-6	DESIGN
(NOT (EQ a b) ) => (NE a b)	WITHOUT_CLASSIFICATION	0.9999625399865757	WITHOUT_CLASSIFICATION	3.746001342420644E-5	DESIGN
(NOT (NE a b) ) => (EQ a b)	WITHOUT_CLASSIFICATION	0.9999625399865757	WITHOUT_CLASSIFICATION	3.746001342420651E-5	DESIGN
(NOT (LT a b) ) => (GE a b)	WITHOUT_CLASSIFICATION	0.9999241311739464	WITHOUT_CLASSIFICATION	7.586882605356252E-5	DESIGN
(NOT (GE a b) ) => (LT a b)	WITHOUT_CLASSIFICATION	0.9999241311739464	WITHOUT_CLASSIFICATION	7.586882605356252E-5	DESIGN
(NOT (LE a b) ) => (GT a b)	WITHOUT_CLASSIFICATION	0.9999536660137139	WITHOUT_CLASSIFICATION	4.6333986285962174E-5	DESIGN
(NOT (LIKE a b) ) => (NOT_LIKE a b)	WITHOUT_CLASSIFICATION	0.9999951683985221	WITHOUT_CLASSIFICATION	4.831601477958399E-6	DESIGN
(NOT (NOT_LIKE a b) ) => (LIKE a b)	WITHOUT_CLASSIFICATION	0.9999951683985221	WITHOUT_CLASSIFICATION	4.831601477958399E-6	DESIGN
(NOT (IS_NOT_NULL a b) ) => (IS_NULL a b)	WITHOUT_CLASSIFICATION	0.9999887665709355	WITHOUT_CLASSIFICATION	1.1233429064453472E-5	DESIGN
(NOT (BETWEEN a b) ) => (NOT_BETWEEN a b)	WITHOUT_CLASSIFICATION	0.999986257728245	WITHOUT_CLASSIFICATION	1.3742271755043022E-5	DESIGN
Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999989244581755	WITHOUT_CLASSIFICATION	1.075541824535213E-6	DESIGN
overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9998555327667198	WITHOUT_CLASSIFICATION	1.4446723328021812E-4	DESIGN
if if Otherwise, handle the error normally.	WITHOUT_CLASSIFICATION	0.9999976752390323	WITHOUT_CLASSIFICATION	2.3247609677802657E-6	DESIGN
(NOT (NOT_BETWEEN a b) ) => (BETWEEN a b)	WITHOUT_CLASSIFICATION	0.999986257728245	WITHOUT_CLASSIFICATION	1.3742271755043022E-5	DESIGN
This can never happen because this rule will always eliminate the child NOT.case NOT:return x.getFirstChild(); (NOT (NOT x) ) => (x)	WITHOUT_CLASSIFICATION	0.9999980873398373	WITHOUT_CLASSIFICATION	1.9126601626295916E-6	DESIGN
Just add a 'not' parent.	WITHOUT_CLASSIFICATION	0.9994223316337082	WITHOUT_CLASSIFICATION	5.776683662917684E-4	DESIGN
(EQ NULL b) => (IS_NULL b)	WITHOUT_CLASSIFICATION	0.9999995302819844	WITHOUT_CLASSIFICATION	4.6971801551108316E-7	DESIGN
(EQ a NULL) => (IS_NULL a)	WITHOUT_CLASSIFICATION	0.9999994685675226	WITHOUT_CLASSIFICATION	5.314324773895913E-7	DESIGN
NOTE: Because we're using ASTUtil.createParent(), the tree must be created from the bottom up. IS EMPTY x => (EXISTS (QUERY (SELECT_FROM (FROM x) ) ) )	WITHOUT_CLASSIFICATION	0.9999986143339782	WITHOUT_CLASSIFICATION	1.3856660217899313E-6	DESIGN
Add NOT if it's negated.	WITHOUT_CLASSIFICATION	0.9996938362911605	WITHOUT_CLASSIFICATION	3.0616370883957593E-4	DESIGN
Create nodes that track line and column number.	WITHOUT_CLASSIFICATION	0.9999985677327117	WITHOUT_CLASSIFICATION	1.4322672883510026E-6	DESIGN
Case 1: Multi token keywords GROUP BY and ORDER BY The next token ( LT(2) ) should be 'by'... otherwise, this is just an ident.	WITHOUT_CLASSIFICATION	0.9978224679158563	WITHOUT_CLASSIFICATION	0.002177532084143739	DESIGN
Case 2: The current token is after FROM and before '.'.	WITHOUT_CLASSIFICATION	0.9999999849361755	WITHOUT_CLASSIFICATION	1.506382451863749E-8	DESIGN
This handles HHH-354, where there is a strange property name in a where clause. If the lookahead contains a DOT then something that isn't an IDENT...	WITHOUT_CLASSIFICATION	0.9972996690083354	WITHOUT_CLASSIFICATION	0.002700330991664508	DESIGN
See if the second lookahed token can be an identifier.	WITHOUT_CLASSIFICATION	0.9999999802748523	WITHOUT_CLASSIFICATION	1.972514783866451E-8	DESIGN
Set it!	WITHOUT_CLASSIFICATION	0.9999750689604062	WITHOUT_CLASSIFICATION	2.493103959376917E-5	DESIGN
ignore	WITHOUT_CLASSIFICATION	0.9999981434368609	WITHOUT_CLASSIFICATION	1.8565631391212324E-6	DESIGN
strip the " where "	WITHOUT_CLASSIFICATION	0.9999988041864952	WITHOUT_CLASSIFICATION	1.1958135047511076E-6	DESIGN
Don't really know all the codes required to adequately decipher returned jdbc exceptions here. simply allow the failure to be eaten and the subsequent insert-selects/deletes should fail	WITHOUT_CLASSIFICATION	0.9999954543683325	WITHOUT_CLASSIFICATION	4.5456316674706055E-6	DESIGN
at the very least cleanup the data :)	WITHOUT_CLASSIFICATION	0.9943906632704743	WITHOUT_CLASSIFICATION	0.005609336729525699	DESIGN
First, save off the pertinent ids, as the return value	WITHOUT_CLASSIFICATION	0.9999998037567469	WITHOUT_CLASSIFICATION	1.962432531191046E-7	DESIGN
jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9996427088948486	WITHOUT_CLASSIFICATION	3.5729110515137706E-4	DESIGN
jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9996427088948486	WITHOUT_CLASSIFICATION	3.5729110515137706E-4	DESIGN
Start performing the updates	WITHOUT_CLASSIFICATION	0.999995039175592	WITHOUT_CLASSIFICATION	4.960824408009346E-6	DESIGN
First, save off the pertinent ids, saving the number of pertinent ids for return	WITHOUT_CLASSIFICATION	0.99999946251858	WITHOUT_CLASSIFICATION	5.374814199239169E-7	DESIGN
Start performing the deletes	WITHOUT_CLASSIFICATION	0.9999946885048209	WITHOUT_CLASSIFICATION	5.311495179129006E-6	DESIGN
otherwise, everything ok.	WITHOUT_CLASSIFICATION	0.999903941860501	WITHOUT_CLASSIFICATION	9.605813949898439E-5	DESIGN
visit width-first, then depth	WITHOUT_CLASSIFICATION	0.9966371017180959	WITHOUT_CLASSIFICATION	0.003362898281904121	DESIGN
if the types report logical equivalence, return true...	WITHOUT_CLASSIFICATION	0.9999737747470129	WITHOUT_CLASSIFICATION	2.6225252987075256E-5	DESIGN
otherwise, perform a "deep equivalence" check...	WITHOUT_CLASSIFICATION	0.999939744397823	WITHOUT_CLASSIFICATION	6.025560217709399E-5	DESIGN
If there is no WHERE node, make one.	WITHOUT_CLASSIFICATION	0.9999997402715309	WITHOUT_CLASSIFICATION	2.5972846915958176E-7	DESIGN
inject the WHERE after the parent	WITHOUT_CLASSIFICATION	0.9999455683060714	WITHOUT_CLASSIFICATION	5.4431693928695926E-5	DESIGN
Never include subclasses for implied from elements.	WITHOUT_CLASSIFICATION	0.9997817282236635	WITHOUT_CLASSIFICATION	2.1827177633651094E-4	DESIGN
Moved here from SelectClause [jsd]	WITHOUT_CLASSIFICATION	0.9999555733150993	WITHOUT_CLASSIFICATION	4.442668490077197E-5	DESIGN
/	WITHOUT_CLASSIFICATION	0.99994903284862	WITHOUT_CLASSIFICATION	5.096715137985688E-5	DESIGN
Use the table fromElement and the property name to get the array of column names.	WITHOUT_CLASSIFICATION	0.999996910028517	WITHOUT_CLASSIFICATION	3.089971483072824E-6	DESIGN
Set the attributes of the property reference expression.	WITHOUT_CLASSIFICATION	0.9999982822793416	WITHOUT_CLASSIFICATION	1.717720658409164E-6	DESIGN
If the uresolved property path isn't set yet, just use the property name.	WITHOUT_CLASSIFICATION	0.9999788153169076	WITHOUT_CLASSIFICATION	2.1184683092355788E-5	DESIGN
The 'from element' that the property is in.	WITHOUT_CLASSIFICATION	0.9999856433331386	WITHOUT_CLASSIFICATION	1.4356666861557114E-5	DESIGN
Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.999999929486787	WITHOUT_CLASSIFICATION	7.051321301201272E-8	DESIGN
Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.999999929486787	WITHOUT_CLASSIFICATION	7.051321301201272E-8	DESIGN
If this dot has already been resolved, stop now.	WITHOUT_CLASSIFICATION	0.9999671359908773	WITHOUT_CLASSIFICATION	3.286400912270646E-5	DESIGN
If there is no data type for this node, and we're at the end of the path (top most dot node), then this might be a Java constant.	WITHOUT_CLASSIFICATION	0.9998811064932245	WITHOUT_CLASSIFICATION	1.1889350677556886E-4	DESIGN
The property is a collection...	WITHOUT_CLASSIFICATION	0.9999520824493633	WITHOUT_CLASSIFICATION	4.791755063674687E-5	DESIGN
The property is a component...	WITHOUT_CLASSIFICATION	0.9996878293172435	WITHOUT_CLASSIFICATION	3.121706827564524E-4	DESIGN
The property is another class..	WITHOUT_CLASSIFICATION	0.9999067332486369	WITHOUT_CLASSIFICATION	9.326675136307119E-5	DESIGN
Otherwise, this is a primitive type.	WITHOUT_CLASSIFICATION	0.9999959416087362	WITHOUT_CLASSIFICATION	4.058391263764566E-6	DESIGN
foo.bars.size (also handles deprecated stuff like foo.bars.maxelement for backwardness)	WITHOUT_CLASSIFICATION	0.9977078412933339	WITHOUT_CLASSIFICATION	0.002292158706666166	DESIGN
This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.999998515168238	WITHOUT_CLASSIFICATION	1.4848317619594504E-6	DESIGN
Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999828576466684	WITHOUT_CLASSIFICATION	1.7142353331611347E-5	DESIGN
in non-select queries, the only time we should need to join is if we are in a subquery from clause	WITHOUT_CLASSIFICATION	0.9999997244946617	WITHOUT_CLASSIFICATION	2.7550533831397874E-7	DESIGN
this is the regression style determination which matches the logic of the classic translator	WITHOUT_CLASSIFICATION	0.9999783448695118	WITHOUT_CLASSIFICATION	2.1655130488261813E-5	DESIGN
This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.999998515168238	WITHOUT_CLASSIFICATION	1.4848317619594504E-6	DESIGN
even though we might find a pre-existing element by join path, we may not be able to reuse it...	WITHOUT_CLASSIFICATION	0.5409566086970189	DESIGN	0.4590433913029812	WITHOUT_CLASSIFICATION
NOTE : addDuplicateAlias() already performs nullness checks on the alias.	WITHOUT_CLASSIFICATION	0.9994899696509398	WITHOUT_CLASSIFICATION	5.100303490601449E-4	DESIGN
if the from-clauses are the same, we can be a little more aggressive in terms of what we reuse	WITHOUT_CLASSIFICATION	0.9984787525011892	WITHOUT_CLASSIFICATION	0.0015212474988108272	DESIGN
again, null != null here	WITHOUT_CLASSIFICATION	0.9999986349001917	WITHOUT_CLASSIFICATION	1.3650998082687737E-6	DESIGN
If this is an implied join in a from element, then use the impled join type which is part of the tree parser's state (set by the gramamar actions).	WITHOUT_CLASSIFICATION	0.9999990848029332	WITHOUT_CLASSIFICATION	9.151970668677067E-7	DESIGN
otherwise (subquery case) dont reuse the fromElement if we are processing the from-clause of the subquery	WITHOUT_CLASSIFICATION	0.999999657090546	WITHOUT_CLASSIFICATION	3.429094540716739E-7	DESIGN
we know only the lhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999998276846847	WITHOUT_CLASSIFICATION	1.723153152590477E-7	DESIGN
the referenced node text is the special 'id'	WITHOUT_CLASSIFICATION	0.9999999812551581	WITHOUT_CLASSIFICATION	1.874484188250896E-8	DESIGN
only the identifier property field name can be a reference to the associated entity's PK...	WITHOUT_CLASSIFICATION	0.9998142257543846	WITHOUT_CLASSIFICATION	1.857742456153862E-4	DESIGN
special shortcut for id properties, skip the join! this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9997718690804875	WITHOUT_CLASSIFICATION	2.2813091951237997E-4	DESIGN
Append the new property name onto the unresolved path.	WITHOUT_CLASSIFICATION	0.9999799616499523	WITHOUT_CLASSIFICATION	2.0038350047646604E-5	DESIGN
If the lhs is a collection, use CollectionPropertyMapping	WITHOUT_CLASSIFICATION	0.9999992074972572	WITHOUT_CLASSIFICATION	7.925027428407088E-7	DESIGN
Tell the destination fromElement to 'includeSubclasses'.	WITHOUT_CLASSIFICATION	0.9999934927840868	WITHOUT_CLASSIFICATION	6.507215913281946E-6	DESIGN
Use theta style (for regression) Move the node up, after the origin node.	WITHOUT_CLASSIFICATION	0.9999998037075201	WITHOUT_CLASSIFICATION	1.9629247995306052E-7	DESIGN
Don't resolve the node again.	WITHOUT_CLASSIFICATION	0.9999930692009986	WITHOUT_CLASSIFICATION	6.9307990014440925E-6	DESIGN
for expected parameter type injection, we expect that the lhs represents some form of property ref and that the children of the in-list represent one-or-more params.	WITHOUT_CLASSIFICATION	0.9999968036870615	WITHOUT_CLASSIFICATION	3.19631293851092E-6	DESIGN
we need to strip off the embedded parens so that sql-gen does not double these up	WITHOUT_CLASSIFICATION	0.9999615330508487	WITHOUT_CLASSIFICATION	3.846694915138188E-5	DESIGN
we have something like : "? [op] rhs"	WITHOUT_CLASSIFICATION	0.9951506908273552	WITHOUT_CLASSIFICATION	0.0048493091726448	DESIGN
we have something like : "lhs [op] ?"	WITHOUT_CLASSIFICATION	0.999375566752366	WITHOUT_CLASSIFICATION	6.244332476339034E-4	DESIGN
we know only the rhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999998851424673	WITHOUT_CLASSIFICATION	1.1485753266601121E-7	DESIGN
handle the (assumed) valid cases: #1 - the only valid datetime addition synatx is one or the other is a datetime (but not both)	WITHOUT_CLASSIFICATION	0.9999850950244826	WITHOUT_CLASSIFICATION	1.490497551740968E-5	DESIGN
one or the other needs to be a datetime for us to get into this method in the first place...	WITHOUT_CLASSIFICATION	0.7028106503770319	WITHOUT_CLASSIFICATION	0.297189349622968	DESIGN
#3 - note that this is also true of "datetime - :param"...	WITHOUT_CLASSIFICATION	0.9999042237278524	WITHOUT_CLASSIFICATION	9.577627214770151E-5	DESIGN
#2	WITHOUT_CLASSIFICATION	0.999975128866198	WITHOUT_CLASSIFICATION	2.487113380199521E-5	DESIGN
Generate the inner join -- The elements need to be joined to the collection they are in.	WITHOUT_CLASSIFICATION	0.9999996019069594	WITHOUT_CLASSIFICATION	3.980930407249695E-7	DESIGN
nothing to do	WITHOUT_CLASSIFICATION	0.9998396764052384	WITHOUT_CLASSIFICATION	1.6032359476147851E-4	DESIGN
The 'from element' that represents the elements of the collection.	WITHOUT_CLASSIFICATION	0.9999985792733631	WITHOUT_CLASSIFICATION	1.420726636811687E-6	DESIGN
Add the condition to the join sequence that qualifies the indexed element.	WITHOUT_CLASSIFICATION	0.9999999849779737	WITHOUT_CLASSIFICATION	1.5022026267363123E-8	DESIGN
Sometimes use the element table alias, sometimes use the... umm... collection table alias (many to many)	WITHOUT_CLASSIFICATION	0.9999984917947294	WITHOUT_CLASSIFICATION	1.508205270526653E-6	DESIGN
Now, set the text for this node. It should be the element columns.	WITHOUT_CLASSIFICATION	0.9660742997679352	WITHOUT_CLASSIFICATION	0.033925700232064815	DESIGN
Get the function return value type, based on the type of the first argument.	WITHOUT_CLASSIFICATION	0.9999999993738804	WITHOUT_CLASSIFICATION	6.261196114394078E-10	DESIGN
This will call initialize(tok)!	WITHOUT_CLASSIFICATION	0.9998675963634688	WITHOUT_CLASSIFICATION	1.3240363653125914E-4	DESIGN
mutation depends on the types of nodes invloved...	WITHOUT_CLASSIFICATION	0.9999929949304908	WITHOUT_CLASSIFICATION	7.0050695091695534E-6	DESIGN
"pass along" our initial embedded parameter node(s) to the first generated sql fragment so that it can be handled later for parameter binding...	WITHOUT_CLASSIFICATION	0.9999574904010969	WITHOUT_CLASSIFICATION	4.2509598903076406E-5	DESIGN
logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999868345943558	WITHOUT_CLASSIFICATION	1.3165405644227269E-5	DESIGN
Generated select expressions are already resolved, nothing to do.	WITHOUT_CLASSIFICATION	0.9999947057956018	WITHOUT_CLASSIFICATION	5.294204398244697E-6	DESIGN
The path may be a reference to an alias defined in the parent query.	WITHOUT_CLASSIFICATION	0.9999721603626127	WITHOUT_CLASSIFICATION	2.783963738717452E-5	DESIGN
The HQL class alias refers to the class name.	WITHOUT_CLASSIFICATION	0.9999999808650079	WITHOUT_CLASSIFICATION	1.913499212620002E-8	DESIGN
Associate the table alias with the element.	WITHOUT_CLASSIFICATION	0.9999998567979251	WITHOUT_CLASSIFICATION	1.432020747864085E-7	DESIGN
try the parent FromClause...	WITHOUT_CLASSIFICATION	0.9999743830067803	WITHOUT_CLASSIFICATION	2.561699321966577E-5	DESIGN
Add the new node to the map so that we don't create it twice.	WITHOUT_CLASSIFICATION	0.9999999609189936	WITHOUT_CLASSIFICATION	3.908100636930831E-8	DESIGN
Make sure that all from elements registered with this FROM clause are actually in the AST.	WITHOUT_CLASSIFICATION	0.9999997768623184	WITHOUT_CLASSIFICATION	2.2313768150817538E-7	DESIGN
Invoke setScalarColumnText on each constructor argument.	WITHOUT_CLASSIFICATION	0.9999808099198265	WITHOUT_CLASSIFICATION	1.9190080173410924E-5	DESIGN
Collect the select expressions, skip the first child because it is the class name.	WITHOUT_CLASSIFICATION	0.9999998721330142	WITHOUT_CLASSIFICATION	1.278669858034851E-7	DESIGN
return an empty Type array	WITHOUT_CLASSIFICATION	0.9999326600297105	WITHOUT_CLASSIFICATION	6.733997028949858E-5	DESIGN
Constructors are always considered scalar results.	WITHOUT_CLASSIFICATION	0.9997717644537003	WITHOUT_CLASSIFICATION	2.2823554629969225E-4	DESIGN
this is the exception returned by ReflectHelper.getConstructor() if it cannot locate an appropriate constructor	WITHOUT_CLASSIFICATION	0.9999988448944334	WITHOUT_CLASSIFICATION	1.1551055666797878E-6	DESIGN
if there is no order by, make one	WITHOUT_CLASSIFICATION	0.9999971976476187	WITHOUT_CLASSIFICATION	2.8023523812981094E-6	DESIGN
Find the WHERE; if there is no WHERE, find the FROM...	WITHOUT_CLASSIFICATION	0.9999988221970002	WITHOUT_CLASSIFICATION	1.1778029997606173E-6	DESIGN
Now, inject the newly built ORDER BY into the tree	WITHOUT_CLASSIFICATION	0.9998360105069338	WITHOUT_CLASSIFICATION	1.6398949306624763E-4	DESIGN
ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999970399217581	WITHOUT_CLASSIFICATION	2.9600782417537246E-6	DESIGN
logic operators by definition resolve to boolean.	WITHOUT_CLASSIFICATION	0.9999908448549312	WITHOUT_CLASSIFICATION	9.155145068816417E-6	DESIGN
Render the identifier select fragment using the table alias.	WITHOUT_CLASSIFICATION	0.9999374868091325	WITHOUT_CLASSIFICATION	6.251319086737195E-5	DESIGN
Class names in the FROM clause result in a JoinSequence (the old FromParser does this).	WITHOUT_CLASSIFICATION	0.9999999685945337	WITHOUT_CLASSIFICATION	3.140546625923035E-8	DESIGN
For many-to-many joins, use the tablename from the queryable collection for the default text.	WITHOUT_CLASSIFICATION	0.9999998205680763	WITHOUT_CLASSIFICATION	1.7943192361449988E-7	DESIGN
Otherwise, use the property mapping.	WITHOUT_CLASSIFICATION	0.9999994131653237	WITHOUT_CLASSIFICATION	5.868346762226879E-7	DESIGN
should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9999909567882567	WITHOUT_CLASSIFICATION	9.043211743405966E-6	DESIGN
If the property is a special collection property name, return a CollectionPropertyMapping.	WITHOUT_CLASSIFICATION	0.9999999446066681	WITHOUT_CLASSIFICATION	5.539333193643082E-8	DESIGN
Collection of components.	WITHOUT_CLASSIFICATION	0.9999880991870281	WITHOUT_CLASSIFICATION	1.1900812971793832E-5	DESIGN
make sure the lhs is "assignable"...	WITHOUT_CLASSIFICATION	0.9999990948370788	WITHOUT_CLASSIFICATION	9.051629210519074E-7	DESIGN
false indicates to not generate parens around the assignment	WITHOUT_CLASSIFICATION	0.9998753892970728	WITHOUT_CLASSIFICATION	1.2461070292723767E-4	DESIGN
Register the FromElement with the FROM clause, now that we have the names and aliases.	WITHOUT_CLASSIFICATION	0.9999999632030998	WITHOUT_CLASSIFICATION	3.679690006847006E-8	DESIGN
currently allowed...	WITHOUT_CLASSIFICATION	0.9999013665045088	WITHOUT_CLASSIFICATION	9.863349549118172E-5	DESIGN
HHH-276 : implied joins in a subselect where clause - The destination needs to be added to the destination's from clause. Not sure if this is will fix everything, but it works.	WITHOUT_CLASSIFICATION	0.5520263897435059	WITHOUT_CLASSIFICATION	0.4479736102564939	DESIGN
return classAlias == null ? className : classAlias;	WITHOUT_CLASSIFICATION	0.997312308833013	WITHOUT_CLASSIFICATION	0.0026876911669869168	DESIGN
This is an explicit FROM element.	WITHOUT_CLASSIFICATION	0.9999799977423198	WITHOUT_CLASSIFICATION	2.0002257680147378E-5	DESIGN
ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999970399217581	WITHOUT_CLASSIFICATION	2.9600782417537246E-6	DESIGN
Fetch can't be used with scroll() or iterate().	WITHOUT_CLASSIFICATION	0.9999811671892143	WITHOUT_CLASSIFICATION	1.8832810785787824E-5	DESIGN
If it's not implied or it is implied and it's a many to many join where the target wasn't found.	WITHOUT_CLASSIFICATION	0.9999999843302282	WITHOUT_CLASSIFICATION	1.5669771795430728E-8	DESIGN
Since this is an explicit FROM element, it can't be implied in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999735939228456	WITHOUT_CLASSIFICATION	2.6406077154354802E-5	DESIGN
Do nothing, eplicit from elements are always in the projection list.	WITHOUT_CLASSIFICATION	0.9999935229265128	WITHOUT_CLASSIFICATION	6.4770734872326396E-6	DESIGN
propertyName refers to something like collection.size...	WITHOUT_CLASSIFICATION	0.9999391436559825	WITHOUT_CLASSIFICATION	6.085634401758619E-5	DESIGN
property name is a sub-path of a component...	WITHOUT_CLASSIFICATION	0.9996373515296352	WITHOUT_CLASSIFICATION	3.626484703647868E-4	DESIGN
Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999828576466684	WITHOUT_CLASSIFICATION	1.7142353331611347E-5	DESIGN
nothing to do; even if the operand is a parameter, no way we could infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9764264415200358	WITHOUT_CLASSIFICATION	0.023573558479964223	DESIGN
logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999868345943558	WITHOUT_CLASSIFICATION	1.3165405644227269E-5	DESIGN
DotNode uses null here...	WITHOUT_CLASSIFICATION	0.9740191709648375	WITHOUT_CLASSIFICATION	0.025980829035162602	DESIGN
We represent a from-clause alias	WITHOUT_CLASSIFICATION	0.9999998671470354	WITHOUT_CLASSIFICATION	1.328529646106478E-7	DESIGN
we are the LHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999993759140898	WITHOUT_CLASSIFICATION	6.24085910178935E-7	DESIGN
we are the RHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999983241659683	WITHOUT_CLASSIFICATION	1.6758340316544795E-6	DESIGN
we represent a naked (simple) prop-ref	WITHOUT_CLASSIFICATION	0.9999663580449688	WITHOUT_CLASSIFICATION	3.3641955031241575E-5	DESIGN
EARLY EXIT!!! return so the resolve call explicitly coming from DotNode can resolve this...	WITHOUT_CLASSIFICATION	0.8139529443951452	WITHOUT_CLASSIFICATION	0.18604705560485488	DESIGN
assume this ident's text does not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9989552176278155	WITHOUT_CLASSIFICATION	0.0010447823721844605	DESIGN
just ignore it for now, it'll get resolved later...	WITHOUT_CLASSIFICATION	0.9990483948964157	WITHOUT_CLASSIFICATION	9.516051035842143E-4	DESIGN
This is not actually a constant, but a reference to FROM element.	WITHOUT_CLASSIFICATION	0.9999075504387954	WITHOUT_CLASSIFICATION	9.24495612046817E-5	DESIGN
check to see if our "propPath" actually represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999991447471679	WITHOUT_CLASSIFICATION	8.552528320646242E-7	DESIGN
these pieces are needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9993906467842113	WITHOUT_CLASSIFICATION	6.093532157888051E-4	DESIGN
used to set the type of the parent dot node	WITHOUT_CLASSIFICATION	0.9983250366822768	WITHOUT_CLASSIFICATION	0.0016749633177231542	DESIGN
assume we do not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.999185184954914	WITHOUT_CLASSIFICATION	8.148150450860089E-4	DESIGN
assume we do not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.999185184954914	WITHOUT_CLASSIFICATION	8.148150450860089E-4	DESIGN
naked property-refs cannot be used with an aliased from element	WITHOUT_CLASSIFICATION	0.9999457878955456	WITHOUT_CLASSIFICATION	5.421210445440613E-5	DESIGN
this piece is needed for usage in select clause	WITHOUT_CLASSIFICATION	0.999975894477223	WITHOUT_CLASSIFICATION	2.4105522777032124E-5	DESIGN
do not over-write the column text, as that has already been "rendered" during resolve	WITHOUT_CLASSIFICATION	0.9999999662621433	WITHOUT_CLASSIFICATION	3.37378567589691E-8	DESIGN
for some reason the antlr.CommonAST initialization routines force this method to get called twice. The first time with an empty string	WITHOUT_CLASSIFICATION	0.9999996794186156	WITHOUT_CLASSIFICATION	3.2058138445165413E-7	DESIGN
Look up class name using the first identifier in the path.	WITHOUT_CLASSIFICATION	0.999997477766042	WITHOUT_CLASSIFICATION	2.522233958034498E-6	DESIGN
Add to the query spaces.	WITHOUT_CLASSIFICATION	0.9997429978133767	WITHOUT_CLASSIFICATION	2.570021866232457E-4	DESIGN
If the from element isn't in the same clause, create a new from element.	WITHOUT_CLASSIFICATION	0.9999992561815498	WITHOUT_CLASSIFICATION	7.438184502229993E-7	DESIGN
This is the root level node. Generate an explicit from clause at the root.	WITHOUT_CLASSIFICATION	0.9997429778616437	WITHOUT_CLASSIFICATION	2.570221383563112E-4	DESIGN
Correlated subqueries create 'special' implied from nodes because correlated subselects can't use an ANSI-style join	WITHOUT_CLASSIFICATION	0.9999591838690439	WITHOUT_CLASSIFICATION	4.0816130956095384E-5	DESIGN
super-duper-classic-parser-regression-testing-mojo-magic...	WITHOUT_CLASSIFICATION	0.9999584620953463	WITHOUT_CLASSIFICATION	4.153790465373984E-5	DESIGN
A collection of entities...	WITHOUT_CLASSIFICATION	0.9997667199523274	WITHOUT_CLASSIFICATION	2.3328004767261693E-4	DESIGN
A collection of components...	WITHOUT_CLASSIFICATION	0.9999880850484205	WITHOUT_CLASSIFICATION	1.1914951579515163E-5	DESIGN
A collection of scalar elements...	WITHOUT_CLASSIFICATION	0.9999963102183582	WITHOUT_CLASSIFICATION	3.689781641772848E-6	DESIGN
according to both the ANSI-SQL and EJB3 specs, trim can either take exactly one parameter or a variable number of parameters between 1 and 4. from the SQL spec: <trim function> ::= TRIM <left paren> <trim operands> <right paren> <trim operands> ::= [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> <trim specification> ::= LEADING | TRAILING | BOTH If only <trim specification> is omitted, BOTH is assumed; if <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999999998993279	WITHOUT_CLASSIFICATION	1.0067214159942304E-10	DESIGN
Don't include sub-classes for implied collection joins or subquery joins.	WITHOUT_CLASSIFICATION	0.9987431305538608	WITHOUT_CLASSIFICATION	0.001256869446139225	DESIGN
Treat explict from elements in sub-queries properly.	WITHOUT_CLASSIFICATION	0.9999867088597022	WITHOUT_CLASSIFICATION	1.3291140297806362E-5	DESIGN
( implied && DotNode.useThetaStyleImplicitJoins ) ) {	WITHOUT_CLASSIFICATION	0.9996299494755491	WITHOUT_CLASSIFICATION	3.7005052445097963E-4	DESIGN
the "root from-element" in correlated subqueries do need this piece	WITHOUT_CLASSIFICATION	0.9996787269346714	WITHOUT_CLASSIFICATION	3.212730653286335E-4	DESIGN
Create the FROM element for the target (the elements of the collection).	WITHOUT_CLASSIFICATION	0.9999999998365242	WITHOUT_CLASSIFICATION	1.6347578148826745E-10	DESIGN
If the join is implied, then don't include sub-classes on the element.	WITHOUT_CLASSIFICATION	0.9999999420008929	WITHOUT_CLASSIFICATION	5.799910703172643E-8	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999908071898249	WITHOUT_CLASSIFICATION	9.192810175116161E-6	DESIGN
The associated entity is implied, but it must be included in the FROM. The collection alias is the role.	WITHOUT_CLASSIFICATION	0.9999728375686449	WITHOUT_CLASSIFICATION	2.71624313551835E-5	DESIGN
Tag this node as a JOIN. Don't include subclasses in the join. This is a clollection join.	WITHOUT_CLASSIFICATION	0.9999989159773863	WITHOUT_CLASSIFICATION	1.084022613647417E-6	DESIGN
Get the class name of the associated entity.	WITHOUT_CLASSIFICATION	0.9999764907051522	WITHOUT_CLASSIFICATION	2.3509294847755625E-5	DESIGN
origin, path, implied, columns, classAlias,	WITHOUT_CLASSIFICATION	0.9999980159580427	WITHOUT_CLASSIFICATION	1.9840419573020643E-6	DESIGN
implied	WITHOUT_CLASSIFICATION	0.9996506890539794	WITHOUT_CLASSIFICATION	3.493109460207151E-4	DESIGN
For implied many-to-many, just add the end join.	WITHOUT_CLASSIFICATION	0.9999982298070561	WITHOUT_CLASSIFICATION	1.77019294399684E-6	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999908071898249	WITHOUT_CLASSIFICATION	9.192810175116161E-6	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999908071898249	WITHOUT_CLASSIFICATION	9.192810175116161E-6	DESIGN
the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.999999783733574	WITHOUT_CLASSIFICATION	2.1626642602269751E-7	DESIGN
This causes the factory to instantiate the desired class.	WITHOUT_CLASSIFICATION	0.9999993394455925	WITHOUT_CLASSIFICATION	6.605544074561379E-7	DESIGN
private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9973523804757458	WITHOUT_CLASSIFICATION	0.002647619524254208	DESIGN
Frontbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999634344106997	WITHOUT_CLASSIFICATION	3.65655893002549E-5	DESIGN
The types represented in the SQL result set. @return The types represented in the SQL result set.	WITHOUT_CLASSIFICATION	0.9999860966342653	WITHOUT_CLASSIFICATION	1.3903365734717377E-5	DESIGN
public Type[] getSqlResultTypes() {return sqlResultTypes;}	WITHOUT_CLASSIFICATION	0.9895872130612509	WITHOUT_CLASSIFICATION	0.010412786938749218	DESIGN
First, collect all of the select expressions. NOTE: This must be done before invoking setScalarColumnText() because setScalarColumnText() changes the AST!!!	WITHOUT_CLASSIFICATION	0.9999374513978055	WITHOUT_CLASSIFICATION	6.254860219443604E-5	DESIGN
First allow the actual type to control the return value. (the actual underlying sqltype could actually be different)	WITHOUT_CLASSIFICATION	0.9997868696732399	WITHOUT_CLASSIFICATION	2.131303267600953E-4	DESIGN
sqlResultTypeList.addAll( constructorArgumentTypeList );	WITHOUT_CLASSIFICATION	0.9999956750203127	WITHOUT_CLASSIFICATION	4.324979687285819E-6	DESIGN
If the data type is not an association type, it could not have been in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999999615446655	WITHOUT_CLASSIFICATION	3.845533437411294E-8	DESIGN
sqlResultTypeList.add( type );	WITHOUT_CLASSIFICATION	0.9999859397910327	WITHOUT_CLASSIFICATION	1.4060208967316466E-5	DESIGN
Always add the type to the return type list.	WITHOUT_CLASSIFICATION	0.9999874261981464	WITHOUT_CLASSIFICATION	1.2573801853636332E-5	DESIGN
add the fetched entities	WITHOUT_CLASSIFICATION	0.9999815033342587	WITHOUT_CLASSIFICATION	1.8496665741273748E-5	DESIGN
Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999994786721398	WITHOUT_CLASSIFICATION	5.213278602732016E-7	DESIGN
function support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999699250884356	WITHOUT_CLASSIFICATION	3.0074911564406244E-5	DESIGN
If there are any scalars (non-entities) selected, render the select column aliases.	WITHOUT_CLASSIFICATION	0.999999994948569	WITHOUT_CLASSIFICATION	5.051431037236229E-9	DESIGN
sqlResultTypeList,	WITHOUT_CLASSIFICATION	0.9999945921690824	WITHOUT_CLASSIFICATION	5.407830917732439E-6	DESIGN
ArrayList sqlResultTypeList,	WITHOUT_CLASSIFICATION	0.9999997417760688	WITHOUT_CLASSIFICATION	2.5822393125207543E-7	DESIGN
sqlResultTypes = ( Type[] ) sqlResultTypeList.toArray( new Type[sqlResultTypeList.size()] );	WITHOUT_CLASSIFICATION	0.9999998635818709	WITHOUT_CLASSIFICATION	1.3641812919270644E-7	DESIGN
lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999581031955803	WITHOUT_CLASSIFICATION	4.1896804419576E-5	DESIGN
TODO:	WITHOUT_CLASSIFICATION	0.982792232801144	WITHOUT_CLASSIFICATION	0.017207767198855972	DESIGN
Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999950572701277	WITHOUT_CLASSIFICATION	4.942729872191963E-6	DESIGN
Generate an 2d array of column names, the first dimension is parallel with the return types array. The second dimension is the list of column names for each type.	WITHOUT_CLASSIFICATION	0.9999999998789111	WITHOUT_CLASSIFICATION	1.2108888731480556E-10	DESIGN
Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999998822624586	WITHOUT_CLASSIFICATION	1.1773754139573722E-7	DESIGN
union subclass support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999875268700423	WITHOUT_CLASSIFICATION	1.247312995769379E-4	DESIGN
Skip 'DISTINCT' and 'ALL', so we return the first expression node.	WITHOUT_CLASSIFICATION	0.9999999851541246	WITHOUT_CLASSIFICATION	1.484587533792623E-8	DESIGN
Create SQL_TOKEN nodes for the columns.	WITHOUT_CLASSIFICATION	0.9999996325955638	WITHOUT_CLASSIFICATION	3.674044362195865E-7	DESIGN
Generate the property select tokens.	WITHOUT_CLASSIFICATION	0.9999801907517765	WITHOUT_CLASSIFICATION	1.980924822352375E-5	DESIGN
Get the function name node.	WITHOUT_CLASSIFICATION	0.9999990081410722	WITHOUT_CLASSIFICATION	9.918589277127445E-7	DESIGN
Method expressions in a SELECT should always be considered scalar.	WITHOUT_CLASSIFICATION	0.9988351720033449	WITHOUT_CLASSIFICATION	0.0011648279966550434	DESIGN
If this is 'elements' then create a new FROM element.	WITHOUT_CLASSIFICATION	0.9999999600549774	WITHOUT_CLASSIFICATION	3.994502274307471E-8	DESIGN
Not elements(x)	WITHOUT_CLASSIFICATION	0.9999550238899493	WITHOUT_CLASSIFICATION	4.497611005074312E-5	DESIGN
Dialect function	WITHOUT_CLASSIFICATION	0.9999996577685752	WITHOUT_CLASSIFICATION	3.422314246811496E-7	DESIGN
Collection 'property function'	WITHOUT_CLASSIFICATION	0.9999858933732844	WITHOUT_CLASSIFICATION	1.4106626715728076E-5	DESIGN
If the constant is an IDENT, figure out what it means...	WITHOUT_CLASSIFICATION	0.999978033815689	WITHOUT_CLASSIFICATION	2.196618431115586E-5	DESIGN
IDENT is a class alias in the FROM.	WITHOUT_CLASSIFICATION	0.9999996267740203	WITHOUT_CLASSIFICATION	3.732259797781126E-7	DESIGN
Resolve to an identity column.	WITHOUT_CLASSIFICATION	0.9913727791263975	WITHOUT_CLASSIFICATION	0.008627220873602534	DESIGN
Otherwise, it's a literal.	WITHOUT_CLASSIFICATION	0.9999888703939529	WITHOUT_CLASSIFICATION	1.1129606047164835E-5	DESIGN
the name of an entity class	WITHOUT_CLASSIFICATION	0.9999673235481934	WITHOUT_CLASSIFICATION	3.267645180655848E-5	DESIGN
the class discriminator value	WITHOUT_CLASSIFICATION	0.999961816202121	WITHOUT_CLASSIFICATION	3.818379787894488E-5	DESIGN
Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999996208570366	WITHOUT_CLASSIFICATION	3.791429632406289E-7	DESIGN
Add a space before the display text.	WITHOUT_CLASSIFICATION	0.9999996064982416	WITHOUT_CLASSIFICATION	3.9350175844471585E-7	DESIGN
Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999999871338406	WITHOUT_CLASSIFICATION	1.2866159380844079E-8	DESIGN
child == parent.getFirstChild()	WITHOUT_CLASSIFICATION	0.9999997787495671	WITHOUT_CLASSIFICATION	2.2125043279615076E-7	DESIGN
Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999999871338406	WITHOUT_CLASSIFICATION	1.2866159380844079E-8	DESIGN
Filter conditions need to be inserted before the HQL where condition and the theta join node. This is because org.hibernate.loader.Loader binds the filter parameters first, then it binds all the HQL query parameters, see org.hibernate.loader.Loader.processFilterParameters().	WITHOUT_CLASSIFICATION	0.9999993410653318	WITHOUT_CLASSIFICATION	6.589346681696311E-7	DESIGN
Put the FILTERS node before the HQL condition and theta joins	WITHOUT_CLASSIFICATION	0.9999995522158828	WITHOUT_CLASSIFICATION	4.4778411724933443E-7	DESIGN
add the current fragment to the FILTERS node	WITHOUT_CLASSIFICATION	0.9999971996970899	WITHOUT_CLASSIFICATION	2.800302910049498E-6	DESIGN
Create a new THETA_JOINS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999999719038904	WITHOUT_CLASSIFICATION	2.8096109500483493E-8	DESIGN
Put the THETA_JOINS node before the HQL condition, after the filters.	WITHOUT_CLASSIFICATION	0.9999997847753566	WITHOUT_CLASSIFICATION	2.15224643453831E-7	DESIGN
add the current fragment to the THETA_JOINS node	WITHOUT_CLASSIFICATION	0.9999980272431923	WITHOUT_CLASSIFICATION	1.9727568077355093E-6	DESIGN
First, try to get the persister using the given name directly.	WITHOUT_CLASSIFICATION	0.9999934783071035	WITHOUT_CLASSIFICATION	6.5216928964910074E-6	DESIGN
unable to locate it using this name	WITHOUT_CLASSIFICATION	0.999898034685431	WITHOUT_CLASSIFICATION	1.019653145689644E-4	DESIGN
If that didn't work, try using the 'import' name.	WITHOUT_CLASSIFICATION	0.9999838262987599	WITHOUT_CLASSIFICATION	1.6173701239997848E-5	DESIGN
Implicit joins use theta style (WHERE pk = fk), explicit joins use JOIN (after from)	WITHOUT_CLASSIFICATION	0.9999993414883528	WITHOUT_CLASSIFICATION	6.585116472993874E-7	DESIGN
locate the registered function by the given name	WITHOUT_CLASSIFICATION	0.9999999969834826	WITHOUT_CLASSIFICATION	3.0165173048894446E-9	DESIGN
determine the type of the first argument...	WITHOUT_CLASSIFICATION	0.9999860801464726	WITHOUT_CLASSIFICATION	1.3919853527367795E-5	DESIGN
Use the DOT node to emit the first column name. Create the column names, folled by the column aliases.	WITHOUT_CLASSIFICATION	0.9999999953413236	WITHOUT_CLASSIFICATION	4.658676441537782E-9	DESIGN
Note: this simply constructs a "raw" SQL_TOKEN representing the where fragment and injects this into the tree. This "works"; however it is probably not the best long-term solution. At some point we probably want to apply an additional grammar to properly tokenize this where fragment into constituent parts focused on the operators embedded within the fragment.	WITHOUT_CLASSIFICATION	0.9999997194147462	DESIGN	2.8058525377215284E-7	WITHOUT_CLASSIFICATION
Append the text of the current node.	WITHOUT_CLASSIFICATION	0.9999998354766727	WITHOUT_CLASSIFICATION	1.6452332735159625E-7	DESIGN
If the node has a first child, recurse into the first child.	WITHOUT_CLASSIFICATION	0.9999999997437528	WITHOUT_CLASSIFICATION	2.562472816793628E-10	DESIGN
If there is a second child (RHS), recurse into that child.	WITHOUT_CLASSIFICATION	0.9999994667831729	WITHOUT_CLASSIFICATION	5.332168270512304E-7	DESIGN
Iterate through the alias,JoinSequence pairs and generate SQL token nodes.	WITHOUT_CLASSIFICATION	0.9999999711358685	WITHOUT_CLASSIFICATION	2.8864131565437143E-8	DESIGN
If the from element represents a JOIN_FRAGMENT and it is a theta-style join, convert its type from JOIN_FRAGMENT to FROM_FRAGMENT	WITHOUT_CLASSIFICATION	0.999999984788269	WITHOUT_CLASSIFICATION	1.5211730942081777E-8	DESIGN
this is used during SqlGenerator processing	WITHOUT_CLASSIFICATION	0.9995911867957034	WITHOUT_CLASSIFICATION	4.088132042966328E-4	DESIGN
If there is a FROM fragment and the FROM element is an explicit, then add the from part.	WITHOUT_CLASSIFICATION	0.9999982926156744	WITHOUT_CLASSIFICATION	1.7073843255640347E-6	DESIGN
&& StringHelper.isNotEmpty( frag )	WITHOUT_CLASSIFICATION	0.9999140951863692	WITHOUT_CLASSIFICATION	8.590481363081213E-5	DESIGN
The FROM fragment will probably begin with ', '. Remove this if it is present.	WITHOUT_CLASSIFICATION	0.9855399343711537	WITHOUT_CLASSIFICATION	0.014460065628846252	DESIGN
This uses a PathExpressionParser but notice that compound paths are not valid, only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9999717485165401	WITHOUT_CLASSIFICATION	2.825148345987682E-5	DESIGN
SELECT p FROM p IN CLASS eg.Person ORDER BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999995469507664	WITHOUT_CLASSIFICATION	4.530492334525786E-7	DESIGN
The reason for this is SQL doesn't let you sort by an expression you are not returning in the result set.	WITHOUT_CLASSIFICATION	0.9999980869275218	WITHOUT_CLASSIFICATION	1.9130724782780884E-6	DESIGN
named query parameter	WITHOUT_CLASSIFICATION	0.999652980214398	WITHOUT_CLASSIFICATION	3.4701978560199736E-4	DESIGN
default mode	WITHOUT_CLASSIFICATION	0.9999805015627685	WITHOUT_CLASSIFICATION	1.9498437231486E-5	DESIGN
QueryJoinFragment join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999999820500882	WITHOUT_CLASSIFICATION	1.7949911762800897E-8	DESIGN
reset the dotcount (but not the path) after reset!	WITHOUT_CLASSIFICATION	0.9999998887374979	WITHOUT_CLASSIFICATION	1.1126250212634522E-7	DESIGN
after reset!	WITHOUT_CLASSIFICATION	0.9999992323627692	WITHOUT_CLASSIFICATION	7.676372308806347E-7	DESIGN
we don't need to worry about any condition in the ON clause here (toFromFragmentString), since anything in the ON condition is already applied to the whole query	WITHOUT_CLASSIFICATION	0.9999981507151586	WITHOUT_CLASSIFICATION	1.8492848413208542E-6	DESIGN
bit_length feels a bit broken to me. We have to cast to char in order to pass when a numeric value is supplied. But of course the answers given will be wildly different for these two datatypes. 1234.5678 will be 9 bytes as a char string but will be 8 or 16 bytes as a true numeric. Jay Nance 2006-09-22	WITHOUT_CLASSIFICATION	0.9982421343966353	WITHOUT_CLASSIFICATION	0.0017578656033646262	DESIGN
dotcount>=2	WITHOUT_CLASSIFICATION	0.9999526119368961	WITHOUT_CLASSIFICATION	4.738806310378094E-5	DESIGN
Do the corresponding RHS	WITHOUT_CLASSIFICATION	0.9999873761073432	WITHOUT_CLASSIFICATION	1.2623892656807927E-5	DESIGN
if its "id"	WITHOUT_CLASSIFICATION	0.9999957219926348	WITHOUT_CLASSIFICATION	4.2780073652448475E-6	DESIGN
or its the id property name	WITHOUT_CLASSIFICATION	0.9998419922064447	WITHOUT_CLASSIFICATION	1.580077935553503E-4	DESIGN
join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999999848258759	WITHOUT_CLASSIFICATION	1.5174123976052708E-8	DESIGN
important!!	WITHOUT_CLASSIFICATION	0.9999804012090666	WITHOUT_CLASSIFICATION	1.9598790933482755E-5	DESIGN
String[] keyCols = collPersister.getKeyColumnNames();	WITHOUT_CLASSIFICATION	0.9999997404261973	WITHOUT_CLASSIFICATION	2.5957380274305654E-7	DESIGN
an association	WITHOUT_CLASSIFICATION	0.999998296519137	WITHOUT_CLASSIFICATION	1.703480862993517E-6	DESIGN
allow index() function:	WITHOUT_CLASSIFICATION	0.9999993119055126	WITHOUT_CLASSIFICATION	6.880944874789316E-7	DESIGN
here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9999577068065323	WITHOUT_CLASSIFICATION	4.229319346762272E-5	DESIGN
The reason for this is SQL doesn't let you sort by an expression you are not returning in the result set.	WITHOUT_CLASSIFICATION	0.9999980869275218	WITHOUT_CLASSIFICATION	1.9130724782780884E-6	DESIGN
many-to-many	WITHOUT_CLASSIFICATION	0.9999785650967472	WITHOUT_CLASSIFICATION	2.14349032528297E-5	DESIGN
collections of values	WITHOUT_CLASSIFICATION	0.9999948150487419	WITHOUT_CLASSIFICATION	5.184951258195752E-6	DESIGN
opening paren in new Foo ( ... )	WITHOUT_CLASSIFICATION	0.9961730972079517	WITHOUT_CLASSIFICATION	0.0038269027920483133	DESIGN
if we are inside a new Result(), but not inside a nested function	WITHOUT_CLASSIFICATION	0.9999998090972192	WITHOUT_CLASSIFICATION	1.9090278070998518E-7	DESIGN
special case	WITHOUT_CLASSIFICATION	0.9999996295188974	WITHOUT_CLASSIFICATION	3.7048110264865184E-7	DESIGN
the name of an SQL function	WITHOUT_CLASSIFICATION	0.9999995804613482	WITHOUT_CLASSIFICATION	4.195386518545992E-7	DESIGN
null child could occur for no from clause in a filter	WITHOUT_CLASSIFICATION	0.9996102645676508	WITHOUT_CLASSIFICATION	3.897354323491842E-4	DESIGN
this is basically a copy/paste of OrderByParser ... might be worth refactoring	WITHOUT_CLASSIFICATION	0.9984513077025705	DESIGN	0.0015486922974295896	WITHOUT_CLASSIFICATION
SELECT p FROM p IN CLASS eg.Person GROUP BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999898233645407	WITHOUT_CLASSIFICATION	1.0176635459368049E-5	DESIGN
return aliases not supported in classic translator!	WITHOUT_CLASSIFICATION	0.9999603591146073	WITHOUT_CLASSIFICATION	3.964088539272237E-5	DESIGN
register collection role	WITHOUT_CLASSIFICATION	0.9999872098445383	WITHOUT_CLASSIFICATION	1.2790155461785023E-5	DESIGN
The keyword used to specify an identity column, if identity column key generation is supported.	WITHOUT_CLASSIFICATION	0.9999985572849477	WITHOUT_CLASSIFICATION	1.442715052382462E-6	DESIGN
.getElementPropertyMapping();	WITHOUT_CLASSIFICATION	0.9999993056191807	WITHOUT_CLASSIFICATION	6.943808193200465E-7	DESIGN
crossJoins.add(name);	WITHOUT_CLASSIFICATION	0.9999396432718658	WITHOUT_CLASSIFICATION	6.0356728134212866E-5	DESIGN
ie no select clause in HQL	WITHOUT_CLASSIFICATION	0.999997562237733	WITHOUT_CLASSIFICATION	2.4377622670198598E-6	DESIGN
initialize the Set of queried identifier spaces (ie. tables)	WITHOUT_CLASSIFICATION	0.9999958992238334	WITHOUT_CLASSIFICATION	4.100776166665282E-6	DESIGN
ie. no select clause	WITHOUT_CLASSIFICATION	0.9999998950997139	WITHOUT_CLASSIFICATION	1.0490028605443442E-7	DESIGN
there _was_ a select clause	WITHOUT_CLASSIFICATION	0.9999997320530251	WITHOUT_CLASSIFICATION	2.67946974903495E-7	DESIGN
return the concrete type, or the underlying type if a concrete type was not specified	WITHOUT_CLASSIFICATION	0.9999973608417557	WITHOUT_CLASSIFICATION	2.63915824418837E-6	DESIGN
many-to-many	WITHOUT_CLASSIFICATION	0.9999785650967472	WITHOUT_CLASSIFICATION	2.14349032528297E-5	DESIGN
q.addCollection(collectionName, collectionRole);	WITHOUT_CLASSIFICATION	0.9999999871577233	WITHOUT_CLASSIFICATION	1.2842276664072734E-8	DESIGN
classic parser does not support bulk manipulation statements	WITHOUT_CLASSIFICATION	0.9999475373968838	WITHOUT_CLASSIFICATION	5.24626031161048E-5	DESIGN
can't cache this stuff either (per-invocation)	WITHOUT_CLASSIFICATION	0.9999948619852129	WITHOUT_CLASSIFICATION	5.1380147869742775E-6	DESIGN
unfortunately this stuff can't be cached because it is per-invocation, not constant for the QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9998846192761065	WITHOUT_CLASSIFICATION	1.1538072389344882E-4	DESIGN
This is the legacy behaviour for HQL queries...	WITHOUT_CLASSIFICATION	0.9998648007311407	WITHOUT_CLASSIFICATION	1.351992688593435E-4	DESIGN
not known!	WITHOUT_CLASSIFICATION	0.9985600188014226	WITHOUT_CLASSIFICATION	0.0014399811985774452	DESIGN
not known!	WITHOUT_CLASSIFICATION	0.9985600188014226	WITHOUT_CLASSIFICATION	0.0014399811985774452	DESIGN
we have the form: trim(trimSource) so we trim leading and trailing spaces EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999942661060653	WITHOUT_CLASSIFICATION	5.733893934698462E-6	DESIGN
not known!	WITHOUT_CLASSIFICATION	0.9985600188014226	WITHOUT_CLASSIFICATION	0.0014399811985774452	DESIGN
not known!	WITHOUT_CLASSIFICATION	0.9985600188014226	WITHOUT_CLASSIFICATION	0.0014399811985774452	DESIGN
Need this, since join condition can appear inside parens!	WITHOUT_CLASSIFICATION	0.5664039542323875	DESIGN	0.43359604576761235	WITHOUT_CLASSIFICATION
tokens that close a sub expression tokens that open a sub expression tokens that would indicate a sub expression is a boolean expression	WITHOUT_CLASSIFICATION	0.9999999871479176	WITHOUT_CLASSIFICATION	1.2852082425832792E-8	DESIGN
expressionTerminators.add(","); deliberately excluded	WITHOUT_CLASSIFICATION	0.9995034525645231	WITHOUT_CLASSIFICATION	4.965474354768003E-4	DESIGN
expressionOpeners.add(","); deliberately excluded	WITHOUT_CLASSIFICATION	0.9999378605038772	WITHOUT_CLASSIFICATION	6.21394961228142E-5	DESIGN
we have the form: trim(from trimSource). This is functionally equivalent to trim(trimSource) EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9992834698802578	WITHOUT_CLASSIFICATION	7.165301197420703E-4	DESIGN
otherwise, a trim-specification and/or a trim-character have been specified; we need to decide which options are present and "do the right thing" should leading trim-characters be trimmed? should trailing trim-characters be trimmed? the trim-character (what is to be trimmed off?) the trim-source (from where should it be trimmed?)	WITHOUT_CLASSIFICATION	0.9586452111440861	WITHOUT_CLASSIFICATION	0.041354788855913975	DESIGN
Inside a BETWEEN ... AND ... expression	WITHOUT_CLASSIFICATION	0.9998252037771398	WITHOUT_CLASSIFICATION	1.7479622286015837E-4	DESIGN
were an odd or even number of NOTs encountered the join string built up by compound paths inside this expression a flag indicating if the subexpression is known to be boolean	WITHOUT_CLASSIFICATION	0.9999999880151681	WITHOUT_CLASSIFICATION	1.1984831904483574E-8	DESIGN
ie. a many-to-many	WITHOUT_CLASSIFICATION	0.9999795202953086	WITHOUT_CLASSIFICATION	2.0479704691432863E-5	DESIGN
Cope with [,]	WITHOUT_CLASSIFICATION	0.9999560792820208	WITHOUT_CLASSIFICATION	4.392071797931149E-5	DESIGN
Cope with a continued path expression (ie. ].baz)	WITHOUT_CLASSIFICATION	0.9998964311054374	WITHOUT_CLASSIFICATION	1.035688945625275E-4	DESIGN
NOTE: early return	WITHOUT_CLASSIFICATION	0.9999621739578892	WITHOUT_CLASSIFICATION	3.782604211086944E-5	DESIGN
Cope with a subselect	WITHOUT_CLASSIFICATION	0.9998980852325939	WITHOUT_CLASSIFICATION	1.019147674061708E-4	DESIGN
Cope with special cases of AND, NOT, ()	WITHOUT_CLASSIFICATION	0.9999959829576808	WITHOUT_CLASSIFICATION	4.0170423192221375E-6	DESIGN
Close extra brackets we opened	WITHOUT_CLASSIFICATION	0.9999953260234294	WITHOUT_CLASSIFICATION	4.673976570595378E-6	DESIGN
take note when this is a boolean expression	WITHOUT_CLASSIFICATION	0.9999899218751955	WITHOUT_CLASSIFICATION	1.0078124804544396E-5	DESIGN
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999999372194239	WITHOUT_CLASSIFICATION	6.278057608111106E-8	DESIGN
process a token, mapping OO path expressions to SQL expressions	WITHOUT_CLASSIFICATION	0.9999999878578915	WITHOUT_CLASSIFICATION	1.2142108494995084E-8	DESIGN
Open any extra brackets we might need.	WITHOUT_CLASSIFICATION	0.8206876241651639	WITHOUT_CLASSIFICATION	0.17931237583483597	DESIGN
Cope with special cases of AND, NOT, )	WITHOUT_CLASSIFICATION	0.9999421651607546	WITHOUT_CLASSIFICATION	5.783483924525072E-5	DESIGN
the next one up must also be	WITHOUT_CLASSIFICATION	0.999912123610539	WITHOUT_CLASSIFICATION	8.787638946097562E-5	DESIGN
Add any joins	WITHOUT_CLASSIFICATION	0.9999965122630768	WITHOUT_CLASSIFICATION	3.4877369231507938E-6	DESIGN
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999999372194239	WITHOUT_CLASSIFICATION	6.278057608111106E-8	DESIGN
named query parameter	WITHOUT_CLASSIFICATION	0.999652980214398	WITHOUT_CLASSIFICATION	3.4701978560199736E-4	DESIGN
path expression	WITHOUT_CLASSIFICATION	0.9999992132896465	WITHOUT_CLASSIFICATION	7.867103534430436E-7	DESIGN
saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999999901195912	WITHOUT_CLASSIFICATION	9.880408887112949E-9	DESIGN
persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999997016053465	WITHOUT_CLASSIFICATION	2.983946534335609E-7	DESIGN
anything else	WITHOUT_CLASSIFICATION	0.9999996774498932	WITHOUT_CLASSIFICATION	3.225501068280242E-7	DESIGN
the path expression continues after a ]	WITHOUT_CLASSIFICATION	0.9999957661740417	WITHOUT_CLASSIFICATION	4.2338259581758885E-6	DESIGN
careful with this!	WITHOUT_CLASSIFICATION	0.9999448536888242	WITHOUT_CLASSIFICATION	5.514631117575665E-5	DESIGN
the path expression ends at the ]	WITHOUT_CLASSIFICATION	0.9999930498816193	WITHOUT_CLASSIFICATION	6.950118380792335E-6	DESIGN
"finish off" the join	WITHOUT_CLASSIFICATION	0.9999950091868274	WITHOUT_CLASSIFICATION	4.99081317261525E-6	DESIGN
NOTICE: no " or . since they are part of (compound) identifiers	WITHOUT_CLASSIFICATION	0.9998679264895485	WITHOUT_CLASSIFICATION	1.3207351045152824E-4	DESIGN
cannot instantiate	WITHOUT_CLASSIFICATION	0.9999907901142394	WITHOUT_CLASSIFICATION	9.209885760657391E-6	DESIGN
start by looking for HQL keywords...	WITHOUT_CLASSIFICATION	0.9999999202465906	WITHOUT_CLASSIFICATION	7.975340939827364E-8	DESIGN
inner joins can be abbreviated to 'join'	WITHOUT_CLASSIFICATION	0.9999267712139085	WITHOUT_CLASSIFICATION	7.322878609154429E-5	DESIGN
'outer' is optional and is ignored	WITHOUT_CLASSIFICATION	0.9999999981050645	WITHOUT_CLASSIFICATION	1.894935583038445E-9	DESIGN
now anything that is not a HQL keyword	WITHOUT_CLASSIFICATION	0.999998640681845	WITHOUT_CLASSIFICATION	1.3593181551128207E-6	DESIGN
process the "old" HQL style where aliases appear _first_ ie. using the IN or IN CLASS constructions	WITHOUT_CLASSIFICATION	0.9999933413106363	WITHOUT_CLASSIFICATION	6.6586893636841264E-6	DESIGN
treat it as a classname	WITHOUT_CLASSIFICATION	0.9999898640285473	WITHOUT_CLASSIFICATION	1.0135971452605596E-5	DESIGN
treat it as a path expression	WITHOUT_CLASSIFICATION	0.9999973961915044	WITHOUT_CLASSIFICATION	2.6038084956683327E-6	DESIGN
starts with the name of a mapped class (new style)	WITHOUT_CLASSIFICATION	0.9999902257553154	WITHOUT_CLASSIFICATION	9.774244684586255E-6	DESIGN
starts with a path expression (new style)	WITHOUT_CLASSIFICATION	0.9999991448576689	WITHOUT_CLASSIFICATION	8.55142331009229E-7	DESIGN
allow ODMG OQL style: from Person p, p.cars c	WITHOUT_CLASSIFICATION	0.9972359956638485	WITHOUT_CLASSIFICATION	0.0027640043361516014	DESIGN
handle quoted strings	WITHOUT_CLASSIFICATION	0.9999075656486374	WITHOUT_CLASSIFICATION	9.243435136258443E-5	DESIGN
Object insertions, updates, and deletions have list semantics because they must happen in the right order so as to respect referential integrity	WITHOUT_CLASSIFICATION	0.9999999379942512	WITHOUT_CLASSIFICATION	6.200574875665262E-8	DESIGN
"finish off" the join	WITHOUT_CLASSIFICATION	0.9999950091868274	WITHOUT_CLASSIFICATION	4.99081317261525E-6	DESIGN
ignore whitespace	WITHOUT_CLASSIFICATION	0.9999998263273425	WITHOUT_CLASSIFICATION	1.7367265742807364E-7	DESIGN
do replacements	WITHOUT_CLASSIFICATION	0.9999567909846603	WITHOUT_CLASSIFICATION	4.32090153396553E-5	DESIGN
handle HQL2 collection syntax	WITHOUT_CLASSIFICATION	0.9998549784300795	WITHOUT_CLASSIFICATION	1.4502156992041778E-4	DESIGN
uuid.hex is deprecated	WITHOUT_CLASSIFICATION	0.9950562577079738	WITHOUT_CLASSIFICATION	0.004943742292026179	DESIGN
AbstractSelectingDelegate impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999961084789191	WITHOUT_CLASSIFICATION	3.891521080856795E-6	DESIGN
hilo params	WITHOUT_CLASSIFICATION	0.9999973205224315	WITHOUT_CLASSIFICATION	2.6794775685429573E-6	DESIGN
sql = query;	WITHOUT_CLASSIFICATION	0.9999974404389553	WITHOUT_CLASSIFICATION	2.5595610447244717E-6	DESIGN
performance opt	WITHOUT_CLASSIFICATION	0.9999951482615981	WITHOUT_CLASSIFICATION	4.851738401916567E-6	DESIGN
sql = update;	WITHOUT_CLASSIFICATION	0.999999275674705	WITHOUT_CLASSIFICATION	7.243252948427473E-7	DESIGN
hilo config	WITHOUT_CLASSIFICATION	0.9999895590224239	WITHOUT_CLASSIFICATION	1.0440977576130355E-5	DESIGN
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.999999866210236	WITHOUT_CLASSIFICATION	1.3378976416656368E-7	DESIGN
don't allow comments on these insert statements as comments totally blow up the Oracle getGeneratedKeys "support" :(	WITHOUT_CLASSIFICATION	0.9999995178990323	WITHOUT_CLASSIFICATION	4.821009676409644E-7	DESIGN
abort the save (the object is already saved by a circular cascade)	WITHOUT_CLASSIFICATION	0.9890377437355545	WITHOUT_CLASSIFICATION	0.010962256264445401	DESIGN
throw new IdentifierGenerationException("save associated object first, or disable cascade for inverse association");	WITHOUT_CLASSIFICATION	0.9999999620517965	WITHOUT_CLASSIFICATION	3.794820359241408E-8	DESIGN
intentionally empty	WITHOUT_CLASSIFICATION	0.9999791356149564	WITHOUT_CLASSIFICATION	2.0864385043616497E-5	DESIGN
do nothing to avoid a lazy property initialization	WITHOUT_CLASSIFICATION	0.9999941501727925	WITHOUT_CLASSIFICATION	5.84982720755451E-6	DESIGN
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999981909222844	WITHOUT_CLASSIFICATION	1.8090777155885485E-6	DESIGN
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.999999866210236	WITHOUT_CLASSIFICATION	1.3378976416656368E-7	DESIGN
do nothing until we hit the rsult set containing the generated id	WITHOUT_CLASSIFICATION	0.999986851454827	WITHOUT_CLASSIFICATION	1.3148545173038298E-5	DESIGN
COLUMN and TABLE should be renamed but it would break the public API	WITHOUT_CLASSIFICATION	0.7291585034564809	WITHOUT_CLASSIFICATION	0.2708414965435191	DESIGN
Loaded entity instances, by EntityKey	WITHOUT_CLASSIFICATION	0.9999970091763172	WITHOUT_CLASSIFICATION	2.990823682920413E-6	DESIGN
if the given name is un-qualified we may neen to qualify it	WITHOUT_CLASSIFICATION	0.9999848028993493	WITHOUT_CLASSIFICATION	1.5197100650681761E-5	DESIGN
the default...	WITHOUT_CLASSIFICATION	0.9999879930031609	WITHOUT_CLASSIFICATION	1.2006996839162594E-5	DESIGN
unfortunately not really safe to normalize this to 1 as an initial value like we do the others because we would not be able to control this if we are using a sequence...	WITHOUT_CLASSIFICATION	0.9999999151626097	WITHOUT_CLASSIFICATION	8.483739040099733E-8	DESIGN
intentionally empty	WITHOUT_CLASSIFICATION	0.9999791356149564	WITHOUT_CLASSIFICATION	2.0864385043616497E-5	DESIGN
Identity map of CollectionEntry instances, by the collection wrapper	WITHOUT_CLASSIFICATION	0.9999999368056381	WITHOUT_CLASSIFICATION	6.319436191541741E-8	DESIGN
general purpose parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998466945852	WITHOUT_CLASSIFICATION	1.533054148685065E-7	DESIGN
table-specific parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997864085345	WITHOUT_CLASSIFICATION	2.1359146556495966E-7	DESIGN
Configurable implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999936068363412	WITHOUT_CLASSIFICATION	6.393163658787936E-6	DESIGN
IdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999963184445884	WITHOUT_CLASSIFICATION	3.681555411708686E-6	DESIGN
PersistentIdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999982220477394	WITHOUT_CLASSIFICATION	1.7779522606687346E-6	DESIGN
prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999987340312109	WITHOUT_CLASSIFICATION	1.2659687891101503E-6	DESIGN
prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999987340312109	WITHOUT_CLASSIFICATION	1.2659687891101503E-6	DESIGN
fetch the generated id in a separate query	WITHOUT_CLASSIFICATION	0.9998630671563492	WITHOUT_CLASSIFICATION	1.3693284365079265E-4	DESIGN
we just hit the last position	WITHOUT_CLASSIFICATION	0.9999993473294767	WITHOUT_CLASSIFICATION	6.52670523293958E-7	DESIGN
scroll ahead	WITHOUT_CLASSIFICATION	0.999983926410751	WITHOUT_CLASSIFICATION	1.607358924897281E-5	DESIGN
scroll backward	WITHOUT_CLASSIFICATION	0.999996104655285	WITHOUT_CLASSIFICATION	3.895344715041937E-6	DESIGN
we have not yet hit the last result...	WITHOUT_CLASSIFICATION	0.9999979128897831	WITHOUT_CLASSIFICATION	2.087110216810001E-6	DESIGN
Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999658244886397	WITHOUT_CLASSIFICATION	3.417551136032472E-5	DESIGN
State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999965915823954	WITHOUT_CLASSIFICATION	3.4084176045535044E-6	DESIGN
Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999953784188731	WITHOUT_CLASSIFICATION	4.621581126934993E-6	DESIGN
do this when all the properties are updateable since there is a certain likelihood that the information will already be snapshot-cached.	WITHOUT_CLASSIFICATION	0.9985036545569338	WITHOUT_CLASSIFICATION	0.0014963454430662194	DESIGN
Inner classes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997348255261	WITHOUT_CLASSIFICATION	2.6517447388238637E-7	DESIGN
Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999658244886397	WITHOUT_CLASSIFICATION	3.417551136032472E-5	DESIGN
State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999965915823954	WITHOUT_CLASSIFICATION	3.4084176045535044E-6	DESIGN
Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999953784188731	WITHOUT_CLASSIFICATION	4.621581126934993E-6	DESIGN
Caches	WITHOUT_CLASSIFICATION	0.9999797602577913	WITHOUT_CLASSIFICATION	2.0239742208589846E-5	DESIGN
Generators:	WITHOUT_CLASSIFICATION	0.9995271877386787	WITHOUT_CLASSIFICATION	4.7281226132134957E-4	DESIGN
cache region is defined by the root-class in the hierarchy...	WITHOUT_CLASSIFICATION	0.9999661272606286	WITHOUT_CLASSIFICATION	3.387273937136603E-5	DESIGN
check if the detached object being merged is the parent	WITHOUT_CLASSIFICATION	0.9999694492903013	WITHOUT_CLASSIFICATION	3.055070969866376E-5	DESIGN
after all persisters and named queries are registered	WITHOUT_CLASSIFICATION	0.9999991812454396	WITHOUT_CLASSIFICATION	8.187545603790383E-7	DESIGN
if we get here, it is possible that we have a proxy 'in the way' of the merge map resolution... NOTE: decided to put this here rather than in the above loop as I was nervous about the performance of the loop-in-loop especially considering this is far more likely the 'edge case'	WITHOUT_CLASSIFICATION	0.7398606220696203	DESIGN	0.26013937793037967	WITHOUT_CLASSIFICATION
JNDI + Serialization:	WITHOUT_CLASSIFICATION	0.9999997659851833	WITHOUT_CLASSIFICATION	2.3401481681416353E-7	DESIGN
checking for named queries	WITHOUT_CLASSIFICATION	0.9964876158374115	WITHOUT_CLASSIFICATION	0.0035123841625884587	DESIGN
stats	WITHOUT_CLASSIFICATION	0.9999589260852535	WITHOUT_CLASSIFICATION	4.107391474655943E-5	DESIGN
EntityNotFoundDelegate	WITHOUT_CLASSIFICATION	0.999015518366815	WITHOUT_CLASSIFICATION	9.844816331849974E-4	DESIGN
Check named HQL queries	WITHOUT_CLASSIFICATION	0.9999923078334538	WITHOUT_CLASSIFICATION	7.692166546190449E-6	DESIGN
this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.5521954698626775	DESIGN	0.4478045301373225	WITHOUT_CLASSIFICATION
prevents this session from adding things to cache	WITHOUT_CLASSIFICATION	0.9990620012740721	WITHOUT_CLASSIFICATION	9.379987259279878E-4	DESIGN
from javax.naming.Referenceable	WITHOUT_CLASSIFICATION	0.9998501979470374	WITHOUT_CLASSIFICATION	1.4980205296260383E-4	DESIGN
look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999377657853317	WITHOUT_CLASSIFICATION	6.223421466825127E-5	DESIGN
for a dynamic-class	WITHOUT_CLASSIFICATION	0.9999992035118243	WITHOUT_CLASSIFICATION	7.964881757286244E-7	DESIGN
test this entity to see if we must query it	WITHOUT_CLASSIFICATION	0.9999000166255805	WITHOUT_CLASSIFICATION	9.998337441962968E-5	DESIGN
NOTE EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999965135160874	WITHOUT_CLASSIFICATION	3.4864839124985925E-6	DESIGN
for backward-compatability	WITHOUT_CLASSIFICATION	0.9999904161478596	WITHOUT_CLASSIFICATION	9.583852140504943E-6	DESIGN
ignore this error for now	WITHOUT_CLASSIFICATION	0.9999979952836097	WITHOUT_CLASSIFICATION	2.004716390380628E-6	DESIGN
to stop the class from being unloaded	WITHOUT_CLASSIFICATION	0.9999992359790012	WITHOUT_CLASSIFICATION	7.640209988068192E-7	DESIGN
in case we were deserialized in a different JVM, look for an instance with the same name (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.8821899620771052	WITHOUT_CLASSIFICATION	0.1178100379228947	DESIGN
must add to JNDI _after_ adding to HashMaps, because some JNDI servers use serialization	WITHOUT_CLASSIFICATION	0.9999999340646668	WITHOUT_CLASSIFICATION	6.593533314659437E-8	DESIGN
Make sure this is a defined parameter and check the incoming value type	WITHOUT_CLASSIFICATION	0.9999932728006236	WITHOUT_CLASSIFICATION	6.727199376450792E-6	DESIGN
for each of the defined parameters, make sure its value has been set	WITHOUT_CLASSIFICATION	0.9999995519800405	WITHOUT_CLASSIFICATION	4.480199594666633E-7	DESIGN
we never need to apply locks to the SQL	WITHOUT_CLASSIFICATION	0.9999826697432536	WITHOUT_CLASSIFICATION	1.7330256746425395E-5	DESIGN
inserts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999976916299946	WITHOUT_CLASSIFICATION	2.308370005418792E-6	DESIGN
deletes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999984625593894	WITHOUT_CLASSIFICATION	1.5374406105942147E-5	DESIGN
during deserialization, we need to reconnect all proxies and collections to this session, as well as the EntityEntry and CollectionEntry instances; these associations are transient because serialization is used for different things.	WITHOUT_CLASSIFICATION	0.9948821122846797	WITHOUT_CLASSIFICATION	0.005117887715320231	DESIGN
updates ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999958484432998	WITHOUT_CLASSIFICATION	4.1515567001190855E-6	DESIGN
loading ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996431110557	WITHOUT_CLASSIFICATION	3.56888944285176E-7	DESIGN
final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999999176975443	WITHOUT_CLASSIFICATION	8.23024556938745E-8	DESIGN
final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999999176975443	WITHOUT_CLASSIFICATION	8.23024556938745E-8	DESIGN
first, try to load it from the temp PC associated to this SS	WITHOUT_CLASSIFICATION	0.9999949204245135	WITHOUT_CLASSIFICATION	5.079575486543062E-6	DESIGN
if the metadata allowed proxy creation and caller did not request forceful eager loading, generate a proxy	WITHOUT_CLASSIFICATION	0.9999999998464228	WITHOUT_CLASSIFICATION	1.535771085812909E-10	DESIGN
otherwise immediately materialize it	WITHOUT_CLASSIFICATION	0.9998673375099127	WITHOUT_CLASSIFICATION	1.3266249008723222E-4	DESIGN
/	WITHOUT_CLASSIFICATION	0.99994903284862	WITHOUT_CLASSIFICATION	5.096715137985688E-5	DESIGN
no auto-flushing to support in stateless session	WITHOUT_CLASSIFICATION	0.9999431814124856	WITHOUT_CLASSIFICATION	5.681858751430741E-5	DESIGN
after setting values to object, entityMode	WITHOUT_CLASSIFICATION	0.9999518767310236	WITHOUT_CLASSIFICATION	4.812326897634105E-5	DESIGN
for EJB3	WITHOUT_CLASSIFICATION	0.9999943275120372	WITHOUT_CLASSIFICATION	5.672487962754025E-6	DESIGN
just ignore	WITHOUT_CLASSIFICATION	0.9999990140638427	WITHOUT_CLASSIFICATION	9.859361572103843E-7	DESIGN
do a check	WITHOUT_CLASSIFICATION	0.9999405789257112	WITHOUT_CLASSIFICATION	5.9421074288712496E-5	DESIGN
saveOrUpdate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999351670686	WITHOUT_CLASSIFICATION	6.483293140814538E-8	DESIGN
update() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995313880311	WITHOUT_CLASSIFICATION	4.686119689255441E-7	DESIGN
lock() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998926226329	WITHOUT_CLASSIFICATION	1.0737736714387253E-7	DESIGN
persist() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995262896654	WITHOUT_CLASSIFICATION	4.737103345520338E-7	DESIGN
persistOnFlush() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997424161099	WITHOUT_CLASSIFICATION	2.5758389003290033E-7	DESIGN
merge() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997842305713	WITHOUT_CLASSIFICATION	2.1576942873905874E-7	DESIGN
saveOrUpdateCopy() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999033688015	WITHOUT_CLASSIFICATION	9.663119848631788E-8	DESIGN
delete() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995711565323	WITHOUT_CLASSIFICATION	4.288434677633317E-7	DESIGN
load()/get() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999083799755	WITHOUT_CLASSIFICATION	9.162002441011828E-8	DESIGN
refresh() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997189067816	WITHOUT_CLASSIFICATION	2.810932183770651E-7	DESIGN
replicate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999991747566901	WITHOUT_CLASSIFICATION	8.252433098635492E-7	DESIGN
do not auto-flush while outside a transaction	WITHOUT_CLASSIFICATION	0.9999194880584027	WITHOUT_CLASSIFICATION	8.051194159731169E-5	DESIGN
this is an internal error of some sort...	WITHOUT_CLASSIFICATION	0.9999440874081914	WITHOUT_CLASSIFICATION	5.5912591808624265E-5	DESIGN
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9959228635333911	WITHOUT_CLASSIFICATION	0.004077136466608898	DESIGN
only collections belonging to deleted entities are allowed to be dereferenced in the case of orphan delete	WITHOUT_CLASSIFICATION	0.9999749436306568	WITHOUT_CLASSIFICATION	2.5056369343257423E-5	DESIGN
if it was previously unreferenced, we need to flush in order to get its state into the database in order to execute query	WITHOUT_CLASSIFICATION	0.9993632071199502	WITHOUT_CLASSIFICATION	6.367928800497957E-4	DESIGN
not for internal use:	WITHOUT_CLASSIFICATION	0.9963964765348436	WITHOUT_CLASSIFICATION	0.003603523465156342	DESIGN
otherwise, we only need to flush if there are in-memory changes to the queried tables	WITHOUT_CLASSIFICATION	0.9999985385485458	WITHOUT_CLASSIFICATION	1.4614514542398232E-6	DESIGN
might need to run a different filter entirely after the flush because the collection role may have changed	WITHOUT_CLASSIFICATION	0.9998316200052559	WITHOUT_CLASSIFICATION	1.683799947439313E-4	DESIGN
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9959228635333911	WITHOUT_CLASSIFICATION	0.004077136466608898	DESIGN
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9959228635333911	WITHOUT_CLASSIFICATION	0.004077136466608898	DESIGN
if it is initialized, see if the underlying instance is contained, since we need to account for the fact that it might have been evicted	WITHOUT_CLASSIFICATION	0.9631086866760291	WITHOUT_CLASSIFICATION	0.03689131332397097	DESIGN
basically just an adapted copy of find(CriteriaImpl)	WITHOUT_CLASSIFICATION	0.9999998785298589	WITHOUT_CLASSIFICATION	1.2147014100262111E-7	DESIGN
it is possible for this method to be called during flush processing, so make certain that we do not accidently initialize an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999472587974721	WITHOUT_CLASSIFICATION	5.2741202527903934E-5	DESIGN
nothing to do in a stateful session	WITHOUT_CLASSIFICATION	0.9999637643841055	WITHOUT_CLASSIFICATION	3.6235615894574965E-5	DESIGN
ignore	WITHOUT_CLASSIFICATION	0.9999981434368609	WITHOUT_CLASSIFICATION	1.8565631391212324E-6	DESIGN
ignore this error for now	WITHOUT_CLASSIFICATION	0.9999979952836097	WITHOUT_CLASSIFICATION	2.004716390380628E-6	DESIGN
we need to writeObject() on this since interceptor is user defined	WITHOUT_CLASSIFICATION	0.999998011889942	WITHOUT_CLASSIFICATION	1.9881100580244245E-6	DESIGN
the old-time stand-by...	WITHOUT_CLASSIFICATION	0.9999983833772061	WITHOUT_CLASSIFICATION	1.6166227938560239E-6	DESIGN
parameter bind values...	WITHOUT_CLASSIFICATION	0.9999962295849577	WITHOUT_CLASSIFICATION	3.7704150423798084E-6	DESIGN
Parameter handling code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999718704675242	WITHOUT_CLASSIFICATION	2.8129532475821324E-5	DESIGN
prepend value and type list with null for any positions before the wanted position.	WITHOUT_CLASSIFICATION	0.9999950289962948	WITHOUT_CLASSIFICATION	4.971003705187502E-6	DESIGN
Execution methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999736970089452	WITHOUT_CLASSIFICATION	2.630299105479815E-5	DESIGN
we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9994136358956147	WITHOUT_CLASSIFICATION	5.863641043852653E-4	DESIGN
we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9994136358956147	WITHOUT_CLASSIFICATION	5.863641043852653E-4	DESIGN
we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9996253834270569	WITHOUT_CLASSIFICATION	3.746165729431114E-4	DESIGN
we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9996253834270569	WITHOUT_CLASSIFICATION	3.746165729431114E-4	DESIGN
FieldInterceptor impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999875847339728	WITHOUT_CLASSIFICATION	1.241526602714781E-5	DESIGN
subclass accesses ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999953760105472	WITHOUT_CLASSIFICATION	4.623989452744776E-6	DESIGN
let's assume that there is only one lazy fetch group, for now!	WITHOUT_CLASSIFICATION	0.9999999208389043	WITHOUT_CLASSIFICATION	7.916109561417089E-8	DESIGN
FieldHandler impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993842877529524	WITHOUT_CLASSIFICATION	6.157122470475604E-4	DESIGN
should not need to grow beyond the size of the total number of columns in the rs	WITHOUT_CLASSIFICATION	0.9999828691980064	WITHOUT_CLASSIFICATION	1.7130801993632007E-5	DESIGN
should probably no-op commit/rollback here, at least in JTA scenarios	WITHOUT_CLASSIFICATION	0.6679262584609597	DESIGN	0.3320737415390404	WITHOUT_CLASSIFICATION
Base Expectation impls ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995111171639	WITHOUT_CLASSIFICATION	4.888828360821169E-7	DESIGN
Various Expectation instances ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999889891348333	WITHOUT_CLASSIFICATION	1.1010865166802967E-5	DESIGN
explicitly perform no checking...	WITHOUT_CLASSIFICATION	0.8425481718394562	WITHOUT_CLASSIFICATION	0.15745182816054376	DESIGN
used from testsuite	WITHOUT_CLASSIFICATION	0.9999841730545086	WITHOUT_CLASSIFICATION	1.582694549136092E-5	DESIGN
assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999997654340518	WITHOUT_CLASSIFICATION	2.345659482720903E-7	DESIGN
package	WITHOUT_CLASSIFICATION	0.9999575291056456	WITHOUT_CLASSIFICATION	4.2470894354337264E-5	DESIGN
register synch; stats.connect()	WITHOUT_CLASSIFICATION	0.9999925293401422	WITHOUT_CLASSIFICATION	7.470659857752759E-6	DESIGN
noncritical, swallow and let the other propagate!	WITHOUT_CLASSIFICATION	0.9998628668883962	WITHOUT_CLASSIFICATION	1.3713311160385404E-4	DESIGN
calls executeBatch()	WITHOUT_CLASSIFICATION	0.9999991807726201	WITHOUT_CLASSIFICATION	8.19227379909147E-7	DESIGN
no big deal	WITHOUT_CLASSIFICATION	0.9999994834331225	WITHOUT_CLASSIFICATION	5.165668774479633E-7	DESIGN
no big deal	WITHOUT_CLASSIFICATION	0.9999994834331225	WITHOUT_CLASSIFICATION	5.165668774479633E-7	DESIGN
no big deal	WITHOUT_CLASSIFICATION	0.9999994834331225	WITHOUT_CLASSIFICATION	5.165668774479633E-7	DESIGN
sybase driver (jConnect) throwing NPE here in certain cases, but we'll just handle the general "unexpected" case	WITHOUT_CLASSIFICATION	0.9998534748173624	WITHOUT_CLASSIFICATION	1.4652518263759835E-4	DESIGN
see explanation above...	WITHOUT_CLASSIFICATION	0.9999991845835507	WITHOUT_CLASSIFICATION	8.154164493657171E-7	DESIGN
If we are in the process of releasing, no sense checking for aggressive-release possibility.	WITHOUT_CLASSIFICATION	0.9999619008327513	WITHOUT_CLASSIFICATION	3.8099167248725817E-5	DESIGN
EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999761404210866	WITHOUT_CLASSIFICATION	2.385957891338108E-5	DESIGN
ResultSet impl ("overridden") ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999906542011794	WITHOUT_CLASSIFICATION	9.345798820643797E-6	DESIGN
ResultSet impl (delegated) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999874346828227	WITHOUT_CLASSIFICATION	1.2565317177247024E-5	DESIGN
refer to comment in StatefulPersistenceContext.addCollection()	WITHOUT_CLASSIFICATION	0.9999999196691357	WITHOUT_CLASSIFICATION	8.033086440183165E-8	DESIGN
ConnectionManager.Callback implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999435834022449	WITHOUT_CLASSIFICATION	5.641659775507365E-5	DESIGN
Note : success = false, because we don't know the outcome of the transaction	WITHOUT_CLASSIFICATION	0.9999907633790106	WITHOUT_CLASSIFICATION	9.236620989437013E-6	DESIGN
we already have a callback registered; either a local (org.hibernate.Transaction) transaction has accepted callback responsibilities, or we have previously registered a transaction synch.	WITHOUT_CLASSIFICATION	0.9992335057214995	WITHOUT_CLASSIFICATION	7.664942785004694E-4	DESIGN
the configured transaction-factory says it only supports local callback mode, so no sense attempting to register a JTA Synchronization	WITHOUT_CLASSIFICATION	0.9994626140883455	WITHOUT_CLASSIFICATION	5.373859116545923E-4	DESIGN
transactions marked for rollback-only cause some TM impls to throw exceptions	WITHOUT_CLASSIFICATION	0.9995173149121828	WITHOUT_CLASSIFICATION	4.826850878172713E-4	DESIGN
serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998308439584	WITHOUT_CLASSIFICATION	1.6915604168884073E-7	DESIGN
postInitialize() will be called after initialization	WITHOUT_CLASSIFICATION	0.9999998780580514	WITHOUT_CLASSIFICATION	1.219419486109091E-7	DESIGN
cannot handle single quotes	WITHOUT_CLASSIFICATION	0.99993048406182	WITHOUT_CLASSIFICATION	6.951593817996632E-5	DESIGN
todo : for 4.0 private static final Logger log = LoggerFactory.getLogger( SQLStatementLogger.class ); this is the legacy logging 'category'...	WITHOUT_CLASSIFICATION	0.9465227656717917	WITHOUT_CLASSIFICATION	0.053477234328208334	DESIGN
note that for sequential scrolling, we make the assumption that the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999988811648945	WITHOUT_CLASSIFICATION	1.1188351055198717E-6	DESIGN
don't even bother trying to read further	WITHOUT_CLASSIFICATION	0.9999073847533998	WITHOUT_CLASSIFICATION	9.261524660014527E-5	DESIGN
don't even bother trying to read any further	WITHOUT_CLASSIFICATION	0.9999537651088285	WITHOUT_CLASSIFICATION	4.623489117157064E-5	DESIGN
position cursor to the last row	WITHOUT_CLASSIFICATION	0.9999999392972734	WITHOUT_CLASSIFICATION	6.070272668593481E-8	DESIGN
sequentially read the result set in reverse until we recognize a change in the key value. At that point, we are pointed at the last physical sequential row for the logical row in which we are interested in processing	WITHOUT_CLASSIFICATION	0.9999995496308739	WITHOUT_CLASSIFICATION	4.503691261730947E-7	DESIGN
Read backwards until we read past the first physical sequential row with the key we are interested in loading	WITHOUT_CLASSIFICATION	0.9999999992178498	WITHOUT_CLASSIFICATION	7.82150312661499E-10	DESIGN
Finally, read ahead one row to position result set cursor at the first physical row we are interested in loading	WITHOUT_CLASSIFICATION	0.9999936260906337	WITHOUT_CLASSIFICATION	6.373909366364707E-6	DESIGN
now get an existing proxy for each row element (if there is one)	WITHOUT_CLASSIFICATION	0.9999999880467992	WITHOUT_CLASSIFICATION	1.1953200741547997E-8	DESIGN
force the proxy to resolve itself	WITHOUT_CLASSIFICATION	0.9999993423237777	WITHOUT_CLASSIFICATION	6.57676222148581E-7	DESIGN
this is equivalent to the old behavior...	WITHOUT_CLASSIFICATION	0.9999452345541877	WITHOUT_CLASSIFICATION	5.476544581220166E-5	DESIGN
if null, owner will be retrieved from session	WITHOUT_CLASSIFICATION	0.999979737194828	WITHOUT_CLASSIFICATION	2.0262805171981758E-5	DESIGN
final String queryString,	WITHOUT_CLASSIFICATION	0.9999910843012413	WITHOUT_CLASSIFICATION	8.915698758761097E-6	DESIGN
if it was a reference to self, don't need to nullify unless we are using native id generation, in which case we definitely need to nullify	WITHOUT_CLASSIFICATION	0.9999999997093306	WITHOUT_CLASSIFICATION	2.9066934464061574E-10	DESIGN
end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999983879864949	WITHOUT_CLASSIFICATION	1.6120135050939927E-6	DESIGN
in an effort to avoid concurrent-modification-exceptions (from potential recursive calls back through here as a result of the eventual call to PersistentCollection#endRead), we scan the internal loadingCollections map for matches and store those matches in a temp collection. the temp collection is then used to "drive" the #endRead processing.	WITHOUT_CLASSIFICATION	0.9999994510739365	WITHOUT_CLASSIFICATION	5.489260634553636E-7	DESIGN
we can reuse it for each row	WITHOUT_CLASSIFICATION	0.9999995948277959	WITHOUT_CLASSIFICATION	4.051722041443562E-7	DESIGN
can't reuse in this case	WITHOUT_CLASSIFICATION	0.9996298478615316	WITHOUT_CLASSIFICATION	3.701521384684459E-4	DESIGN
First we need to suspend any current JTA transaction and obtain a JDBC connection	WITHOUT_CLASSIFICATION	0.9999429678130294	WITHOUT_CLASSIFICATION	5.703218697074637E-5	DESIGN
getResultList(results);	WITHOUT_CLASSIFICATION	0.9999997738336627	WITHOUT_CLASSIFICATION	2.2616633746934667E-7	DESIGN
if we only returned one entity, query by key is more efficient	WITHOUT_CLASSIFICATION	0.9998527691270975	WITHOUT_CLASSIFICATION	1.472308729024101E-4	DESIGN
a collection loaded in the current session can not possibly be the collection belonging to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999993845972719	WITHOUT_CLASSIFICATION	6.154027280537632E-7	DESIGN
handle empty collection	WITHOUT_CLASSIFICATION	0.9999088648138132	WITHOUT_CLASSIFICATION	9.113518618672815E-5	DESIGN
else no collection element, but also no owner	WITHOUT_CLASSIFICATION	0.9999998815009922	WITHOUT_CLASSIFICATION	1.184990078877506E-7	DESIGN
handle empty collections	WITHOUT_CLASSIFICATION	0.9999525696729811	WITHOUT_CLASSIFICATION	4.743032701896654E-5	DESIGN
else this is not a collection initializer (and empty collections will be detected by looking for the owner's identifier in the result set)	WITHOUT_CLASSIFICATION	0.999993506985086	WITHOUT_CLASSIFICATION	6.493014914065334E-6	DESIGN
validate() instances of Validatable	WITHOUT_CLASSIFICATION	0.9997999060378299	WITHOUT_CLASSIFICATION	2.0009396217022775E-4	DESIGN
if we know there is exactly 1 row, we can skip. it would be great if we could _always_ skip this; it is a problem for <key-many-to-one>	WITHOUT_CLASSIFICATION	0.9422752318330426	DESIGN	0.057724768166957416	WITHOUT_CLASSIFICATION
remove all collections for the entity from the session-level cache	WITHOUT_CLASSIFICATION	0.9999627424937232	WITHOUT_CLASSIFICATION	3.725750627676909E-5	DESIGN
null version means the object is in the process of being loaded somewhere else in the ResultSet	WITHOUT_CLASSIFICATION	0.9999970247817627	WITHOUT_CLASSIFICATION	2.975218237281753E-6	DESIGN
problematic for <key-many-to-one>!	WITHOUT_CLASSIFICATION	0.9999527227082742	WITHOUT_CLASSIFICATION	4.727729172575584E-5	DESIGN
use the id passed in	WITHOUT_CLASSIFICATION	0.9999983709026449	WITHOUT_CLASSIFICATION	1.6290973551440727E-6	DESIGN
do nothing	WITHOUT_CLASSIFICATION	0.9999827039963153	WITHOUT_CLASSIFICATION	1.7296003684667482E-5	DESIGN
prefer re-generation of identity!	WITHOUT_CLASSIFICATION	0.9999430489214306	WITHOUT_CLASSIFICATION	5.6951078569368755E-5	DESIGN
no point doing this if NONE was requested	WITHOUT_CLASSIFICATION	0.9999976347890684	WITHOUT_CLASSIFICATION	2.3652109316320934E-6	DESIGN
If the object is already loaded, return the loaded one	WITHOUT_CLASSIFICATION	0.9999980549124599	WITHOUT_CLASSIFICATION	1.945087540184278E-6	DESIGN
its already loaded so don't need to hydrate it	WITHOUT_CLASSIFICATION	0.9999931059087956	WITHOUT_CLASSIFICATION	6.894091204379602E-6	DESIGN
cascade the refresh prior to refreshing this entity	WITHOUT_CLASSIFICATION	0.9997960890618657	WITHOUT_CLASSIFICATION	2.0391093813435616E-4	DESIGN
the load() which takes an entity does not pass an entityName	WITHOUT_CLASSIFICATION	0.9999994090874607	WITHOUT_CLASSIFICATION	5.909125392915421E-7	DESIGN
we only check the version when _upgrading_ lock modes	WITHOUT_CLASSIFICATION	0.9999999738969652	WITHOUT_CLASSIFICATION	2.6103034902767156E-8	DESIGN
look for a proxy	WITHOUT_CLASSIFICATION	0.9999981600088677	WITHOUT_CLASSIFICATION	1.839991132306429E-6	DESIGN
we need to upgrade the lock mode to the mode requested	WITHOUT_CLASSIFICATION	0.9996937568800442	WITHOUT_CLASSIFICATION	3.062431199557254E-4	DESIGN
its the given optional object	WITHOUT_CLASSIFICATION	0.9999994790501221	WITHOUT_CLASSIFICATION	5.209498778964714E-7	DESIGN
instantiate a new instance	WITHOUT_CLASSIFICATION	0.9999559489397019	WITHOUT_CLASSIFICATION	4.405106029814703E-5	DESIGN
need to hydrate it.	WITHOUT_CLASSIFICATION	0.9975283470707718	WITHOUT_CLASSIFICATION	0.0024716529292282277	DESIGN
return a newly loaded object	WITHOUT_CLASSIFICATION	0.9998615477684615	WITHOUT_CLASSIFICATION	1.3845223153850813E-4	DESIGN
will be ignored, using the existing Entry instead	WITHOUT_CLASSIFICATION	0.9999999883772198	WITHOUT_CLASSIFICATION	1.1622780172818106E-8	DESIGN
key is an entity involved with the operation performed by the listener; value can be either a copy of the entity or the entity itself	WITHOUT_CLASSIFICATION	0.9999999883897924	WITHOUT_CLASSIFICATION	1.1610207443940687E-8	DESIGN
materialize associations (and initialize the object) later	WITHOUT_CLASSIFICATION	0.9999742092410464	WITHOUT_CLASSIFICATION	2.5790758953573557E-5	DESIGN
Get the persister for the _subclass_	WITHOUT_CLASSIFICATION	0.9999978354151267	WITHOUT_CLASSIFICATION	2.164584873303723E-6	DESIGN
ok in normal Hibernate usage to delete a detached entity; JPA however forbids it, thus this is a hook for HEM to affect this behavior	WITHOUT_CLASSIFICATION	0.9928973641474388	WITHOUT_CLASSIFICATION	0.007102635852561211	DESIGN
the entry will be removed after the flush, and will no longer override the stale snapshot This is now handled by removeEntity() in EntityDeleteAction persistenceContext.removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9998470311982175	WITHOUT_CLASSIFICATION	1.5296880178253063E-4	DESIGN
addInitializedCollection(collection, persister, id);	WITHOUT_CLASSIFICATION	0.9999999316267144	WITHOUT_CLASSIFICATION	6.837328556795899E-8	DESIGN
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999950992549933	WITHOUT_CLASSIFICATION	4.90074500673845E-6	DESIGN
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999950992549933	WITHOUT_CLASSIFICATION	4.90074500673845E-6	DESIGN
|| oj.getJoinable().consumesCollectionAlias()	WITHOUT_CLASSIFICATION	0.9999999534293137	WITHOUT_CLASSIFICATION	4.657068622514551E-8	DESIGN
here we do not bother with the discriminator.	WITHOUT_CLASSIFICATION	0.9998873670491255	WITHOUT_CLASSIFICATION	1.1263295087457133E-4	DESIGN
Code to handle subclasses of topClass	WITHOUT_CLASSIFICATION	0.9998557328301054	WITHOUT_CLASSIFICATION	1.4426716989452158E-4	DESIGN
woops we got an instance of another class hierarchy branch	WITHOUT_CLASSIFICATION	0.9989156825634811	WITHOUT_CLASSIFICATION	0.00108431743651885	DESIGN
we can go straight to the first required row	WITHOUT_CLASSIFICATION	0.9999994462223495	WITHOUT_CLASSIFICATION	5.537776504619013E-7	DESIGN
we need to step through the rows one row at a time (slow)	WITHOUT_CLASSIFICATION	0.9999520543804612	WITHOUT_CLASSIFICATION	4.7945619538824894E-5	DESIGN
synchronized to avoid multi-thread access issues; defined as method synch to avoid potential deadlock issues due to nature of code.	WITHOUT_CLASSIFICATION	0.9999631444555124	WITHOUT_CLASSIFICATION	3.685554448763619E-5	DESIGN
Allows various loaders (ok mainly the QueryLoader :) to check whether scrolling of their result set should be allowed. By default it is allowed.	WITHOUT_CLASSIFICATION	0.9999290346793508	WITHOUT_CLASSIFICATION	7.096532064918561E-5	DESIGN
before adding to collection!	WITHOUT_CLASSIFICATION	0.9999664521774034	WITHOUT_CLASSIFICATION	3.354782259665386E-5	DESIGN
if the current depth is 0, the root thing being loaded is the many-to-many collection itself. Here, it is alright to use an inner join...	WITHOUT_CLASSIFICATION	0.9999950989810951	WITHOUT_CLASSIFICATION	4.901018904931392E-6	DESIGN
operations which cascade as far as the collection also cascade to collection elements	WITHOUT_CLASSIFICATION	0.9999999166536105	WITHOUT_CLASSIFICATION	8.334638945165217E-8	DESIGN
simple, because we can't have a one-to-one or a collection (or even a property-ref) in a composite-element:	WITHOUT_CLASSIFICATION	0.9999999334363373	WITHOUT_CLASSIFICATION	6.656366270473335E-8	DESIGN
a composite key	WITHOUT_CLASSIFICATION	0.9999989394487173	WITHOUT_CLASSIFICATION	1.0605512826422807E-6	DESIGN
if no batch, use "foo = ? and bar = ?"	WITHOUT_CLASSIFICATION	0.9999981295354055	WITHOUT_CLASSIFICATION	1.8704645946251133E-6	DESIGN
it must be a collection fetch	WITHOUT_CLASSIFICATION	0.9998957914832588	WITHOUT_CLASSIFICATION	1.0420851674127671E-4	DESIGN
needed later for many-to-many/filter application	WITHOUT_CLASSIFICATION	0.9963103026464025	WITHOUT_CLASSIFICATION	0.0036896973535974877	DESIGN
&& etype.isReferenceToPrimaryKey()	WITHOUT_CLASSIFICATION	0.9999918938862074	WITHOUT_CLASSIFICATION	8.106113792669426E-6	DESIGN
it might still need to apply a collection ordering based on a many-to-many defined order-by...	WITHOUT_CLASSIFICATION	0.9964978569513528	WITHOUT_CLASSIFICATION	0.0035021430486471532	DESIGN
if a composite key, use "( (foo = ? and bar = ?) or (foo = ? and bar = ?) )" for batching TODO: unnecessary for databases with ANSI-style joins	WITHOUT_CLASSIFICATION	0.7346788477472364	WITHOUT_CLASSIFICATION	0.26532115225276365	DESIGN
belong to other persister belong to other persister	WITHOUT_CLASSIFICATION	0.9999653556665385	WITHOUT_CLASSIFICATION	3.464433346148114E-5	DESIGN
we found it	WITHOUT_CLASSIFICATION	0.9999971837212276	WITHOUT_CLASSIFICATION	2.816278772298502E-6	DESIGN
we can use an inner join for the many-to-many	WITHOUT_CLASSIFICATION	0.9999914336611276	WITHOUT_CLASSIFICATION	8.566338872385618E-6	DESIGN
disable a join back to this same association	WITHOUT_CLASSIFICATION	0.9990426682237603	WITHOUT_CLASSIFICATION	9.573317762396051E-4	DESIGN
NOTE: unlike all other Loaders, this one is NOT multithreaded, or cacheable!!	WITHOUT_CLASSIFICATION	0.9987918598617153	WITHOUT_CLASSIFICATION	0.0012081401382847922	DESIGN
the user visible aliases, which are unknown to the superclass, these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999999997593634	WITHOUT_CLASSIFICATION	2.406366938578399E-10	DESIGN
root entity comes last	WITHOUT_CLASSIFICATION	0.9999708978836671	WITHOUT_CLASSIFICATION	2.910211633286509E-5	DESIGN
deliberately ignore return value!	WITHOUT_CLASSIFICATION	0.9999995467115056	WITHOUT_CLASSIFICATION	4.532884944705105E-7	DESIGN
alias may be null EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999718613725705	WITHOUT_CLASSIFICATION	2.8138627429383345E-5	DESIGN
if it is a compound path	WITHOUT_CLASSIFICATION	0.9999091350246783	WITHOUT_CLASSIFICATION	9.086497532173085E-5	DESIGN
otherwise assume the parent is the the criteria that created us	WITHOUT_CLASSIFICATION	0.9997170273066881	WITHOUT_CLASSIFICATION	2.8297269331199455E-4	DESIGN
if its the root criteria, we are done	WITHOUT_CLASSIFICATION	0.9999961755777795	WITHOUT_CLASSIFICATION	3.824422220439024E-6	DESIGN
otherwise, recurse	WITHOUT_CLASSIFICATION	0.9999877424807693	WITHOUT_CLASSIFICATION	1.2257519230738439E-5	DESIGN
the criteria instance	WITHOUT_CLASSIFICATION	0.9999420400512581	WITHOUT_CLASSIFICATION	5.795994874203154E-5	DESIGN
the entity name	WITHOUT_CLASSIFICATION	0.9999869582347671	WITHOUT_CLASSIFICATION	1.3041765232759596E-5	DESIGN
not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9984974966695326	WITHOUT_CLASSIFICATION	0.0015025033304674616	DESIGN
not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9984974966695326	WITHOUT_CLASSIFICATION	0.0015025033304674616	DESIGN
it refers to an alias of a projection	WITHOUT_CLASSIFICATION	0.9999996256510755	WITHOUT_CLASSIFICATION	3.743489244625633E-7	DESIGN
should never happen, i think	WITHOUT_CLASSIFICATION	0.9998600358274372	WITHOUT_CLASSIFICATION	1.3996417256282326E-4	DESIGN
Detect discriminator values...	WITHOUT_CLASSIFICATION	0.999786620594235	WITHOUT_CLASSIFICATION	2.1337940576504356E-4	DESIGN
Convert the string value into the proper type.	WITHOUT_CLASSIFICATION	0.9999704939068158	WITHOUT_CLASSIFICATION	2.9506093184283818E-5	DESIGN
and the qualifier is not the alias of this criteria -> check to see if we belong to some criteria other than the one that created us	WITHOUT_CLASSIFICATION	0.9999990822874573	WITHOUT_CLASSIFICATION	9.177125427938785E-7	DESIGN
it does not refer to an alias of a projection, look for a property	WITHOUT_CLASSIFICATION	0.9999805588542546	WITHOUT_CLASSIFICATION	1.944114574543265E-5	DESIGN
Otherwise, this is an ordinary value.	WITHOUT_CLASSIFICATION	0.9999991266752368	WITHOUT_CLASSIFICATION	8.733247632734531E-7	DESIGN
Currently not cachable if autodiscover types is in effect (e.g. "select ...")	WITHOUT_CLASSIFICATION	0.9999877150354162	WITHOUT_CLASSIFICATION	1.2284964583910919E-5	DESIGN
private final String[] sqlAliases; private final String[] sqlAliasSuffixes;	WITHOUT_CLASSIFICATION	0.9996221907198918	WITHOUT_CLASSIFICATION	3.7780928010819803E-4	DESIGN
this is only needed (afaict) for ResultTransformer processing...	WITHOUT_CLASSIFICATION	0.9990635879859125	WITHOUT_CLASSIFICATION	9.364120140874617E-4	DESIGN
determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999992533165787	WITHOUT_CLASSIFICATION	7.466834212215933E-7	DESIGN
build an array with indices equal to the total number of actual returns in the result Hibernate will return for this query (scalars + non-scalars)	WITHOUT_CLASSIFICATION	0.999998492180804	WITHOUT_CLASSIFICATION	1.5078191959773613E-6	DESIGN
replace {....} with corresponding column aliases	WITHOUT_CLASSIFICATION	0.9998145596797031	WITHOUT_CLASSIFICATION	1.854403202967964E-4	DESIGN
No additional open braces found in the string, append the rest of the string in its entirty and quit this loop	WITHOUT_CLASSIFICATION	0.9999301472933336	WITHOUT_CLASSIFICATION	6.985270666641013E-5	DESIGN
apend everything up until the next encountered open brace	WITHOUT_CLASSIFICATION	0.9999922911475156	WITHOUT_CLASSIFICATION	7.708852484347907E-6	DESIGN
it is a simple table alias {foo}	WITHOUT_CLASSIFICATION	0.9999999774952703	WITHOUT_CLASSIFICATION	2.2504729672332258E-8	DESIGN
passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9995175487399037	WITHOUT_CLASSIFICATION	4.8245126009637196E-4	DESIGN
passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9995175487399037	WITHOUT_CLASSIFICATION	4.8245126009637196E-4	DESIGN
The current alias is referencing the collection to be eagerly fetched	WITHOUT_CLASSIFICATION	0.9999990956816793	WITHOUT_CLASSIFICATION	9.043183206174731E-7	DESIGN
it is a property reference {foo.bar}	WITHOUT_CLASSIFICATION	0.9999964886984697	WITHOUT_CLASSIFICATION	3.5113015302528355E-6	DESIGN
Possibly handle :something parameters for the query ?	WITHOUT_CLASSIFICATION	0.9988160505154868	WITHOUT_CLASSIFICATION	0.0011839494845131229	DESIGN
Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999994086363515	WITHOUT_CLASSIFICATION	5.913636484231622E-7	DESIGN
private final List persisters = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999999264725328	WITHOUT_CLASSIFICATION	7.352746725876847E-8	DESIGN
package	WITHOUT_CLASSIFICATION	0.9999575291056456	WITHOUT_CLASSIFICATION	4.2470894354337264E-5	DESIGN
NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.999960815347523	WITHOUT_CLASSIFICATION	3.918465247704628E-5	DESIGN
private final List scalarTypes = new ArrayList(); private final List scalarColumnAliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999999678605185	WITHOUT_CLASSIFICATION	3.213948151142706E-8	DESIGN
Now, process the returns	WITHOUT_CLASSIFICATION	0.9999986838815224	WITHOUT_CLASSIFICATION	1.3161184775635981E-6	DESIGN
private List collectionOwnerAliases = new ArrayList(); private List collectionAliases = new ArrayList(); private List collectionPersisters = new ArrayList(); private List collectionResults = new ArrayList();	WITHOUT_CLASSIFICATION	0.999999999803109	WITHOUT_CLASSIFICATION	1.9689094418946E-10	DESIGN
already been processed...	WITHOUT_CLASSIFICATION	0.9999699534444552	WITHOUT_CLASSIFICATION	3.004655554488246E-5	DESIGN
already been processed...	WITHOUT_CLASSIFICATION	0.9999699534444552	WITHOUT_CLASSIFICATION	3.004655554488246E-5	DESIGN
Make sure the owner alias is known...	WITHOUT_CLASSIFICATION	0.9999997075267993	WITHOUT_CLASSIFICATION	2.9247320057352626E-7	DESIGN
first, break down the returns into maps keyed by alias so that role returns can be more easily resolved to their owners	WITHOUT_CLASSIFICATION	0.9967029884089719	WITHOUT_CLASSIFICATION	0.003297011591028217	DESIGN
scalarColumnAliases.add( typeReturn.getColumnAlias() ); scalarTypes.add( typeReturn.getType() );	WITHOUT_CLASSIFICATION	0.999996436069516	WITHOUT_CLASSIFICATION	3.563930483857776E-6	DESIGN
If this return's alias has not been processed yet, do so b4 further processing of this return	WITHOUT_CLASSIFICATION	0.9999998170649976	WITHOUT_CLASSIFICATION	1.8293500239071663E-7	DESIGN
collectionOwnerAliases.add( ownerAlias );	WITHOUT_CLASSIFICATION	0.9999998234557741	WITHOUT_CLASSIFICATION	1.765442259250049E-7	DESIGN
for merging of versioned entities, we consider the version having been changed only when: 1) the two version values are different; AND 2) The target actually represents database state! This second condition is a special case which allows an entity to be merged during the same transaction (though during a seperate operation) in which it was originally persisted/saved	WITHOUT_CLASSIFICATION	0.9999046363883227	WITHOUT_CLASSIFICATION	9.53636116772881E-5	DESIGN
this is the second pass through on a merge op, so here we limit the replacement to associations types (value types were already replaced during the first pass)	WITHOUT_CLASSIFICATION	0.9725446997569859	WITHOUT_CLASSIFICATION	0.027455300243014027	DESIGN
EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999931351401338	WITHOUT_CLASSIFICATION	6.8648598661604924E-6	DESIGN
cascade-save to collections AFTER the collection owner was saved	WITHOUT_CLASSIFICATION	0.9999694531680987	WITHOUT_CLASSIFICATION	3.0546831901219754E-5	DESIGN
Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999989244581755	WITHOUT_CLASSIFICATION	1.075541824535213E-6	DESIGN
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999993529084058	WITHOUT_CLASSIFICATION	6.470915942397985E-7	DESIGN
currently only the Hibernate-supplied DbTimestampType is supported here	WITHOUT_CLASSIFICATION	0.9997378882077272	WITHOUT_CLASSIFICATION	2.621117922727029E-4	DESIGN
This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9994115452570804	WITHOUT_CLASSIFICATION	5.884547429196715E-4	DESIGN
make a new one	WITHOUT_CLASSIFICATION	0.9999962635018125	WITHOUT_CLASSIFICATION	3.736498187368295E-6	DESIGN
not so sure this is even valid subtree. but if it was, it'd represent two unrelated table references...	WITHOUT_CLASSIFICATION	0.999645720761336	WITHOUT_CLASSIFICATION	3.542792386639968E-4	DESIGN
(NOT (GT a b) ) => (LE a b)	WITHOUT_CLASSIFICATION	0.9999536660137139	WITHOUT_CLASSIFICATION	4.6333986285962174E-5	DESIGN
private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9973523804757458	WITHOUT_CLASSIFICATION	0.002647619524254208	DESIGN
include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9999922560817077	WITHOUT_CLASSIFICATION	7.743918292330582E-6	DESIGN
sqlResultTypes = selectClause.getSqlResultTypes();	WITHOUT_CLASSIFICATION	0.9999999826003627	WITHOUT_CLASSIFICATION	1.7399637243133456E-8	DESIGN
by default	WITHOUT_CLASSIFICATION	0.9999923496235114	WITHOUT_CLASSIFICATION	7.650376488598406E-6	DESIGN
This is now handled earlier in this method.	WITHOUT_CLASSIFICATION	0.9995121859063524	WITHOUT_CLASSIFICATION	4.878140936475435E-4	DESIGN
-- Loader implementation --	WITHOUT_CLASSIFICATION	0.999995062846441	WITHOUT_CLASSIFICATION	4.9371535590087496E-6	DESIGN
-- Loader overrides --	WITHOUT_CLASSIFICATION	0.9999995586311027	WITHOUT_CLASSIFICATION	4.4136889736570103E-7	DESIGN
(NOT (IS_NULL a b) ) => (IS_NOT_NULL a b)	WITHOUT_CLASSIFICATION	0.9999887665709355	WITHOUT_CLASSIFICATION	1.1233429064453472E-5	DESIGN
NONE, because its the requested lock mode, not the actual!	WITHOUT_CLASSIFICATION	0.9999993743986891	WITHOUT_CLASSIFICATION	6.256013108999617E-7	DESIGN
meant to handle dynamic instantiation queries...	WITHOUT_CLASSIFICATION	0.9999686473348134	WITHOUT_CLASSIFICATION	3.135266518663663E-5	DESIGN
--- Query translator methods ---	WITHOUT_CLASSIFICATION	0.9999896823721584	WITHOUT_CLASSIFICATION	1.0317627841587755E-5	DESIGN
-- Implementation private methods --	WITHOUT_CLASSIFICATION	0.9998782747735794	WITHOUT_CLASSIFICATION	1.2172522642056885E-4	DESIGN
deduplicate unique constraints sharing the same columns this is needed by Hibernate Annotations since it creates automagically unique constraints for the user	WITHOUT_CLASSIFICATION	0.9999751499429672	WITHOUT_CLASSIFICATION	2.485005703276454E-5	DESIGN
Try to find out the name of the primary key to create it as identity if the IdentityGenerator is used	WITHOUT_CLASSIFICATION	0.9999772918248137	WITHOUT_CLASSIFICATION	2.270817518636857E-5	DESIGN
to support dialects that have their own identity data type	WITHOUT_CLASSIFICATION	0.9999746377967107	WITHOUT_CLASSIFICATION	2.5362203289238896E-5	DESIGN
Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.999999929486787	WITHOUT_CLASSIFICATION	7.051321301201272E-8	DESIGN
used also for generation of FK names!	WITHOUT_CLASSIFICATION	0.9988737653002715	WITHOUT_CLASSIFICATION	0.001126234699728502	DESIGN
usually useless	WITHOUT_CLASSIFICATION	0.9999430971908364	WITHOUT_CLASSIFICATION	5.690280916363282E-5	DESIGN
added this caching as I noticed that getType() is being called multiple times...	WITHOUT_CLASSIFICATION	0.9997856218030714	WITHOUT_CLASSIFICATION	2.1437819692861622E-4	DESIGN
do not add unique constraint on DB not supporting unique and nullable columns	WITHOUT_CLASSIFICATION	0.9999999887937358	WITHOUT_CLASSIFICATION	1.1206264271409079E-8	DESIGN
for backward compatibility, disable this:	WITHOUT_CLASSIFICATION	0.9999994070225342	WITHOUT_CLASSIFICATION	5.929774658430125E-7	DESIGN
may be final may be final may be final	WITHOUT_CLASSIFICATION	0.9998811953488213	WITHOUT_CLASSIFICATION	1.1880465117880263E-4	DESIGN
may be final	WITHOUT_CLASSIFICATION	0.999982425734632	WITHOUT_CLASSIFICATION	1.7574265368046627E-5	DESIGN
may be final	WITHOUT_CLASSIFICATION	0.999982425734632	WITHOUT_CLASSIFICATION	1.7574265368046627E-5	DESIGN
Custom SQL	WITHOUT_CLASSIFICATION	0.9999706567390212	WITHOUT_CLASSIFICATION	2.934326097877054E-5	DESIGN
Primary key constraint	WITHOUT_CLASSIFICATION	0.9999993320494825	WITHOUT_CLASSIFICATION	6.679505173893394E-7	DESIGN
the root of the incoming property path matched one of the embedded composite identifier properties	WITHOUT_CLASSIFICATION	0.999999942124915	WITHOUT_CLASSIFICATION	5.7875085056873357E-8	DESIGN
ignore it...	WITHOUT_CLASSIFICATION	0.9999910380957926	WITHOUT_CLASSIFICATION	8.961904207537178E-6	DESIGN
flat recursive algorithm	WITHOUT_CLASSIFICATION	0.999983913407667	WITHOUT_CLASSIFICATION	1.6086592332921435E-5	DESIGN
an identifier mapper => getKey will be included in the getNonDuplicatedPropertyIterator() and checked later, so it needs to be excluded	WITHOUT_CLASSIFICATION	0.9999998480265374	WITHOUT_CLASSIFICATION	1.519734626282573E-7	DESIGN
if the hibernate-mapping did not specify a schema/catalog, use the defaults specified by properties - but note that if the schema/catalog were specified in hibernate-mapping, or as params, they will already be initialized and will override the values set here (they are in identifierGeneratorProperties)	WITHOUT_CLASSIFICATION	0.9999999999962625	WITHOUT_CLASSIFICATION	3.737525805447489E-12	DESIGN
pass the entity-name, if not a collection-id	WITHOUT_CLASSIFICATION	0.9999996539149694	WITHOUT_CLASSIFICATION	3.46085030590247E-7	DESIGN
Custom SQL	WITHOUT_CLASSIFICATION	0.9999706567390212	WITHOUT_CLASSIFICATION	2.934326097877054E-5	DESIGN
Primary key constraint	WITHOUT_CLASSIFICATION	0.9999993320494825	WITHOUT_CLASSIFICATION	6.679505173893394E-7	DESIGN
pass the column name (a generated id almost always has a single column)	WITHOUT_CLASSIFICATION	0.9999925836596908	WITHOUT_CLASSIFICATION	7.416340309261619E-6	DESIGN
needed to satisfy KeyValue	WITHOUT_CLASSIFICATION	0.9985827418170142	WITHOUT_CLASSIFICATION	0.0014172581829857182	DESIGN
empty means no scoping	WITHOUT_CLASSIFICATION	0.999980859698634	WITHOUT_CLASSIFICATION	1.9140301366017732E-5	DESIGN
index should be last column listed	WITHOUT_CLASSIFICATION	0.9999989362038516	WITHOUT_CLASSIFICATION	1.0637961484026565E-6	DESIGN
if it is a formula index, use the element columns in the PK	WITHOUT_CLASSIFICATION	0.9999998131577192	WITHOUT_CLASSIFICATION	1.8684228090646902E-7	DESIGN
don't create a unique key, 'cos some databases don't like a UK on nullable columns	WITHOUT_CLASSIFICATION	0.9999826231619999	WITHOUT_CLASSIFICATION	1.7376838000127333E-5	DESIGN
ArrayList list = new ArrayList();list.addAll( getKey().getConstraintColumns() );list.addAll( getIndex().getConstraintColumns() );getCollectionTable().createUniqueKey(list);	WITHOUT_CLASSIFICATION	0.999999999974631	WITHOUT_CLASSIFICATION	2.53691329990831E-11	DESIGN
}	WITHOUT_CLASSIFICATION	0.9999583158345275	WITHOUT_CLASSIFICATION	4.16841654724878E-5	DESIGN
no foreign key element of for a one-to-many	WITHOUT_CLASSIFICATION	0.9999995428413367	WITHOUT_CLASSIFICATION	4.5715866323742415E-7	DESIGN
TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.8577570041044092	DESIGN	0.14224299589559078	WITHOUT_CLASSIFICATION
the case of a foreign key to something other than the pk is handled in createPropertyRefConstraints	WITHOUT_CLASSIFICATION	0.9999999995606337	WITHOUT_CLASSIFICATION	4.393663959571921E-10	DESIGN
TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.8577570041044092	DESIGN	0.14224299589559078	WITHOUT_CLASSIFICATION
if the property mapping consists of all formulas, make it non-updateable	WITHOUT_CLASSIFICATION	0.9999999997869873	WITHOUT_CLASSIFICATION	2.1301268991309293E-10	DESIGN
columnUpdateability.length==0 ||	WITHOUT_CLASSIFICATION	0.9999962076451566	WITHOUT_CLASSIFICATION	3.7923548433545698E-6	DESIGN
if the property mapping consists of all formulas, make it insertable	WITHOUT_CLASSIFICATION	0.999999995914412	WITHOUT_CLASSIFICATION	4.085588006803939E-9	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999986190806376	WITHOUT_CLASSIFICATION	1.3809193624774696E-6	DESIGN
expected type is intrinsic here...	WITHOUT_CLASSIFICATION	0.9999177907988362	WITHOUT_CLASSIFICATION	8.220920116372467E-5	DESIGN
}	WITHOUT_CLASSIFICATION	0.9999583158345275	WITHOUT_CLASSIFICATION	4.16841654724878E-5	DESIGN
}	WITHOUT_CLASSIFICATION	0.9999583158345275	WITHOUT_CLASSIFICATION	4.16841654724878E-5	DESIGN
return memberPersister.getPropertyType(propertyName);	WITHOUT_CLASSIFICATION	0.9999958944856611	WITHOUT_CLASSIFICATION	4.105514338947917E-6	DESIGN
return memberPersister.toColumns(alias, propertyName);	WITHOUT_CLASSIFICATION	0.9999911069082678	WITHOUT_CLASSIFICATION	8.893091732293354E-6	DESIGN
return memberPersister.getType();	WITHOUT_CLASSIFICATION	0.9999981341380669	WITHOUT_CLASSIFICATION	1.8658619331524148E-6	DESIGN
&& !indexIsFormula	WITHOUT_CLASSIFICATION	0.9999996030367841	WITHOUT_CLASSIFICATION	3.96963215847502E-7	DESIGN
return !isOneToMany();	WITHOUT_CLASSIFICATION	0.9999955618415906	WITHOUT_CLASSIFICATION	4.438158409462444E-6	DESIGN
instanceof AssociationType;	WITHOUT_CLASSIFICATION	0.9998583444969739	WITHOUT_CLASSIFICATION	1.4165550302620562E-4	DESIGN
we need to determine the best way to know that two joinables represent a single many-to-many...	WITHOUT_CLASSIFICATION	0.6841763350185259	WITHOUT_CLASSIFICATION	0.31582366498147396	DESIGN
strip leading ','	WITHOUT_CLASSIFICATION	0.9999997701999106	WITHOUT_CLASSIFICATION	2.2980008936657787E-7	DESIGN
public boolean isSubselectLoadable();	WITHOUT_CLASSIFICATION	0.9999976167103193	WITHOUT_CLASSIFICATION	2.383289680614601E-6	DESIGN
KEY	WITHOUT_CLASSIFICATION	0.9997995790759517	WITHOUT_CLASSIFICATION	2.0042092404820819E-4	DESIGN
columns	WITHOUT_CLASSIFICATION	0.999988026505993	WITHOUT_CLASSIFICATION	1.197349400691413E-5	DESIGN
SQL statements	WITHOUT_CLASSIFICATION	0.9999924997350371	WITHOUT_CLASSIFICATION	7.5002649628232124E-6	DESIGN
extra information about the element type	WITHOUT_CLASSIFICATION	0.9999999538901533	WITHOUT_CLASSIFICATION	4.610984669180579E-8	DESIGN
types	WITHOUT_CLASSIFICATION	0.9998999483784619	WITHOUT_CLASSIFICATION	1.0005162153817539E-4	DESIGN
custom sql	WITHOUT_CLASSIFICATION	0.9999958924211496	WITHOUT_CLASSIFICATION	4.1075788503792476E-6	DESIGN
private final String unquotedIdentifierColumnName;	WITHOUT_CLASSIFICATION	0.999999303170441	WITHOUT_CLASSIFICATION	6.968295590392212E-7	DESIGN
dynamic filters specifically for many-to-many inside the collection	WITHOUT_CLASSIFICATION	0.9999956703640811	WITHOUT_CLASSIFICATION	4.3296359189600696E-6	DESIGN
dynamic filters for the collection	WITHOUT_CLASSIFICATION	0.9999989332088145	WITHOUT_CLASSIFICATION	1.0667911855432941E-6	DESIGN
NativeSQL: collect key column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999606793500062	WITHOUT_CLASSIFICATION	3.932064999391136E-5	DESIGN
unquotedKeyColumnNames = StringHelper.unQuote(keyColumnAliases);	WITHOUT_CLASSIFICATION	0.9999999485554404	WITHOUT_CLASSIFICATION	5.144455963334419E-8	DESIGN
ELEMENT	WITHOUT_CLASSIFICATION	0.9999772401174345	WITHOUT_CLASSIFICATION	2.2759882565517637E-5	DESIGN
NativeSQL: collect element column and auto-aliases	WITHOUT_CLASSIFICATION	0.9994746496659348	WITHOUT_CLASSIFICATION	5.253503340651978E-4	DESIGN
INDEX AND ROW SELECT	WITHOUT_CLASSIFICATION	0.9999990184526049	WITHOUT_CLASSIFICATION	9.815473951168708E-7	DESIGN
NativeSQL: collect index column and auto-aliases	WITHOUT_CLASSIFICATION	0.99996712653642	WITHOUT_CLASSIFICATION	3.28734635801079E-5	DESIGN
unquotedIdentifierColumnName = identifierColumnAlias;	WITHOUT_CLASSIFICATION	0.9999998099185523	WITHOUT_CLASSIFICATION	1.9008144776222573E-7	DESIGN
unquotedIdentifierColumnName = null;	WITHOUT_CLASSIFICATION	0.9999991681715512	WITHOUT_CLASSIFICATION	8.318284486906891E-7	DESIGN
GENERATE THE SQL:	WITHOUT_CLASSIFICATION	0.9999099434751809	WITHOUT_CLASSIFICATION	9.005652481907387E-5	DESIGN
for non-arrays, we don't need to know the element class elementType.returnedClass();	WITHOUT_CLASSIFICATION	0.9995480443809247	WITHOUT_CLASSIFICATION	4.519556190753141E-4	DESIGN
not all classpersisters implement PropertyMapping!	WITHOUT_CLASSIFICATION	0.997976912886632	WITHOUT_CLASSIFICATION	0.0020230871133680097	DESIGN
Handle any filters applied to this collection	WITHOUT_CLASSIFICATION	0.983799539075377	WITHOUT_CLASSIFICATION	0.01620046092462299	DESIGN
Handle any filters applied to this collection for many-to-many	WITHOUT_CLASSIFICATION	0.9859547264584245	WITHOUT_CLASSIFICATION	0.014045273541575535	DESIGN
if there is a user-specified loader, return that TODO: filters!?	WITHOUT_CLASSIFICATION	0.9646679791676335	DESIGN	0.03533202083236655	WITHOUT_CLASSIFICATION
Take care of any entities that might have been evicted!	WITHOUT_CLASSIFICATION	0.9845283472531132	WITHOUT_CLASSIFICATION	0.015471652746886713	DESIGN
strip leading ','	WITHOUT_CLASSIFICATION	0.9999997701999106	WITHOUT_CLASSIFICATION	2.2980008936657787E-7	DESIGN
Run a subquery loader	WITHOUT_CLASSIFICATION	0.9998242645069394	WITHOUT_CLASSIFICATION	1.7573549306061718E-4	DESIGN
needed by arrays	WITHOUT_CLASSIFICATION	0.9999651647317821	WITHOUT_CLASSIFICATION	3.483526821789843E-5	DESIGN
TODO: something with formulas...	WITHOUT_CLASSIFICATION	0.9220369551467869	WITHOUT_CLASSIFICATION	0.07796304485321312	DESIGN
an assertion	WITHOUT_CLASSIFICATION	0.9999999851752182	WITHOUT_CLASSIFICATION	1.4824781845355918E-8	DESIGN
Remove all the old entries	WITHOUT_CLASSIFICATION	0.999996293752893	WITHOUT_CLASSIFICATION	3.7062471070757265E-6	DESIGN
create all the new entries	WITHOUT_CLASSIFICATION	0.9999998041760807	WITHOUT_CLASSIFICATION	1.9582391942336455E-7	DESIGN
&& !indexIsFormula	WITHOUT_CLASSIFICATION	0.9999996030367841	WITHOUT_CLASSIFICATION	3.96963215847502E-7	DESIGN
&& !indexIsFormula	WITHOUT_CLASSIFICATION	0.9999996030367841	WITHOUT_CLASSIFICATION	3.96963215847502E-7	DESIGN
delete all the deleted entries	WITHOUT_CLASSIFICATION	0.9999978417223988	WITHOUT_CLASSIFICATION	2.1582776011632335E-6	DESIGN
insert all the new entries	WITHOUT_CLASSIFICATION	0.9999995860031539	WITHOUT_CLASSIFICATION	4.139968461132559E-7	DESIGN
==elementType ??	WITHOUT_CLASSIFICATION	0.9998243335135195	WITHOUT_CLASSIFICATION	1.7566648648053787E-4	DESIGN
update all the modified entries	WITHOUT_CLASSIFICATION	0.9999998766053734	WITHOUT_CLASSIFICATION	1.2339462673212331E-7	DESIGN
identifier collections not supported for 1-to-many	WITHOUT_CLASSIFICATION	0.9999985408118937	WITHOUT_CLASSIFICATION	1.4591881063174059E-6	DESIGN
update removed rows fks to null	WITHOUT_CLASSIFICATION	0.9996490753823245	WITHOUT_CLASSIFICATION	3.5092461767549177E-4	DESIGN
will still be issued when it used to be null	WITHOUT_CLASSIFICATION	0.9402165241741446	WITHOUT_CLASSIFICATION	0.05978347582585538	DESIGN
now update all changed or added rows fks	WITHOUT_CLASSIFICATION	0.9999992327525996	WITHOUT_CLASSIFICATION	7.672474003537083E-7	DESIGN
buf.append( selectFragment( lhsAlias, "" ) )ignore suffix for collection columns!	WITHOUT_CLASSIFICATION	0.9999999988415146	WITHOUT_CLASSIFICATION	1.158485433144497E-9	DESIGN
use suffix for the entity columns	WITHOUT_CLASSIFICATION	0.9998637063969439	WITHOUT_CLASSIFICATION	1.3629360305614796E-4	DESIGN
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999644877719818	WITHOUT_CLASSIFICATION	3.5512228018314924E-5	DESIGN
private final String rootTableName;	WITHOUT_CLASSIFICATION	0.9999973292194693	WITHOUT_CLASSIFICATION	2.670780530781235E-6	DESIGN
INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9999985274461958	WITHOUT_CLASSIFICATION	1.472553804292592E-6	DESIGN
Custom SQL	WITHOUT_CLASSIFICATION	0.9999706567390212	WITHOUT_CLASSIFICATION	2.934326097877054E-5	DESIGN
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999644877719818	WITHOUT_CLASSIFICATION	3.5512228018314924E-5	DESIGN
Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999928450210179	WITHOUT_CLASSIFICATION	7.154978982010712E-6	DESIGN
This could also just be true all the time...	WITHOUT_CLASSIFICATION	0.9852706734061627	WITHOUT_CLASSIFICATION	0.014729326593837282	DESIGN
chop the last union (all)	WITHOUT_CLASSIFICATION	0.999999608202751	WITHOUT_CLASSIFICATION	3.9179724893485515E-7	DESIGN
TODO: check this....	WITHOUT_CLASSIFICATION	0.93933041454551	DESIGN	0.06066958545449001	WITHOUT_CLASSIFICATION
INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9999985274461958	WITHOUT_CLASSIFICATION	1.472553804292592E-6	DESIGN
properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9999720458532957	WITHOUT_CLASSIFICATION	2.7954146704273218E-5	DESIGN
the closure of all properties in the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999990752231571	WITHOUT_CLASSIFICATION	9.24776842920601E-7	DESIGN
the closure of all columns used by the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.999999779832329	WITHOUT_CLASSIFICATION	2.2016767088105102E-7	DESIGN
subclass discrimination works by assigning particular values to certain combinations of null primary key values in the outer join using an SQL CASE	WITHOUT_CLASSIFICATION	0.9999383215666404	WITHOUT_CLASSIFICATION	6.167843335954839E-5	DESIGN
MULTITABLES	WITHOUT_CLASSIFICATION	0.9999974780774791	WITHOUT_CLASSIFICATION	2.5219225209707433E-6	DESIGN
Custom sql	WITHOUT_CLASSIFICATION	0.9999940924846159	WITHOUT_CLASSIFICATION	5.90751538418612E-6	DESIGN
subclass closure properties	WITHOUT_CLASSIFICATION	0.9999957209830623	WITHOUT_CLASSIFICATION	4.2790169377189725E-6	DESIGN
SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999491269276568	WITHOUT_CLASSIFICATION	5.0873072343253274E-5	DESIGN
( (Column) model.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999325158869766	WITHOUT_CLASSIFICATION	6.748411302332241E-5	DESIGN
( (Column) sc.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999930285354858	WITHOUT_CLASSIFICATION	6.9714645141912294E-6	DESIGN
don't need subclass tables, because they can't appear in conditions	WITHOUT_CLASSIFICATION	0.8099395488042923	WITHOUT_CLASSIFICATION	0.19006045119570775	DESIGN
special case where we need to force incloude all subclass joins	WITHOUT_CLASSIFICATION	0.999851127850563	WITHOUT_CLASSIFICATION	1.488721494371057E-4	DESIGN
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999644877719818	WITHOUT_CLASSIFICATION	3.5512228018314924E-5	DESIGN
properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9999720458532957	WITHOUT_CLASSIFICATION	2.7954146704273218E-5	DESIGN
the closure of all columns used by the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.999999779832329	WITHOUT_CLASSIFICATION	2.2016767088105102E-7	DESIGN
get em on the second pass!	WITHOUT_CLASSIFICATION	0.9999975026916524	WITHOUT_CLASSIFICATION	2.4973083474744186E-6	DESIGN
now look up the object we are really interested in! (this lets us correctly handle proxies and multi-row or multi-column queries)	WITHOUT_CLASSIFICATION	0.9999633733797638	WITHOUT_CLASSIFICATION	3.6626620236210446E-5	DESIGN
discriminator column	WITHOUT_CLASSIFICATION	0.9999467326591049	WITHOUT_CLASSIFICATION	5.326734089490959E-5	DESIGN
INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9999985274461958	WITHOUT_CLASSIFICATION	1.472553804292592E-6	DESIGN
private final Map propertyTableNumbersByName = new HashMap();	WITHOUT_CLASSIFICATION	0.9999030514403302	WITHOUT_CLASSIFICATION	9.694855966981361E-5	DESIGN
CLASS + TABLE	WITHOUT_CLASSIFICATION	0.9999995301466638	WITHOUT_CLASSIFICATION	4.6985333623331683E-7	DESIGN
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999948737725431	WITHOUT_CLASSIFICATION	5.126227456951739E-6	DESIGN
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999896548151489	WITHOUT_CLASSIFICATION	1.0345184851096883E-5	DESIGN
SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999491269276568	WITHOUT_CLASSIFICATION	5.0873072343253274E-5	DESIGN
Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999928450210179	WITHOUT_CLASSIFICATION	7.154978982010712E-6	DESIGN
JOINS	WITHOUT_CLASSIFICATION	0.9999971735634395	WITHOUT_CLASSIFICATION	2.8264365605650284E-6	DESIGN
propertyTableNumbersByName.put( prop.getName(), join );	WITHOUT_CLASSIFICATION	0.9999999825874853	WITHOUT_CLASSIFICATION	1.741251460042617E-8	DESIGN
Access cached SQL	WITHOUT_CLASSIFICATION	0.9999813293851133	WITHOUT_CLASSIFICATION	1.8670614886707742E-5	DESIGN
figure out which tables need to be fetched	WITHOUT_CLASSIFICATION	0.9999672854627345	WITHOUT_CLASSIFICATION	3.271453726556572E-5	DESIGN
figure out which columns are needed	WITHOUT_CLASSIFICATION	0.9998400087151236	WITHOUT_CLASSIFICATION	1.5999128487652572E-4	DESIGN
figure out which formulas are needed	WITHOUT_CLASSIFICATION	0.9999948288299211	WITHOUT_CLASSIFICATION	5.171170078913304E-6	DESIGN
render the SQL	WITHOUT_CLASSIFICATION	0.9999351946206347	WITHOUT_CLASSIFICATION	6.480537936527119E-5	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999986190806376	WITHOUT_CLASSIFICATION	1.3809193624774696E-6	DESIGN
moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994712105440392	WITHOUT_CLASSIFICATION	5.287894559608078E-4	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999578211231971	WITHOUT_CLASSIFICATION	4.217887680284372E-5	DESIGN
The optional SQL string defined in the where attribute	WITHOUT_CLASSIFICATION	0.9999997358154873	WITHOUT_CLASSIFICATION	2.64184512773312E-7	DESIGN
information about lazy properties of this class	WITHOUT_CLASSIFICATION	0.9999864764842827	WITHOUT_CLASSIFICATION	1.3523515717224526E-5	DESIGN
information about all properties in class hierarchy	WITHOUT_CLASSIFICATION	0.9999999653255572	WITHOUT_CLASSIFICATION	3.467444281071307E-8	DESIGN
information about all columns/formulas in class hierarchy	WITHOUT_CLASSIFICATION	0.9999999567590255	WITHOUT_CLASSIFICATION	4.324097450864018E-8	DESIGN
dynamic filters attached to the class-level	WITHOUT_CLASSIFICATION	0.9999981859817926	WITHOUT_CLASSIFICATION	1.814018207452573E-6	DESIGN
SQL strings	WITHOUT_CLASSIFICATION	0.999991293740736	WITHOUT_CLASSIFICATION	8.706259264001085E-6	DESIGN
for objects that came in via update()	WITHOUT_CLASSIFICATION	0.9999999036996089	WITHOUT_CLASSIFICATION	9.630039106593537E-8	DESIGN
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999896548151489	WITHOUT_CLASSIFICATION	1.0345184851096883E-5	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999578211231971	WITHOUT_CLASSIFICATION	4.217887680284372E-5	DESIGN
IDENTIFIER	WITHOUT_CLASSIFICATION	0.9999904754844071	WITHOUT_CLASSIFICATION	9.524515592752043E-6	DESIGN
VERSION	WITHOUT_CLASSIFICATION	0.9999963178654956	WITHOUT_CLASSIFICATION	3.6821345044206887E-6	DESIGN
WHERE STRING	WITHOUT_CLASSIFICATION	0.9999988059659324	WITHOUT_CLASSIFICATION	1.194034067624972E-6	DESIGN
SUBCLASS PROPERTY CLOSURE	WITHOUT_CLASSIFICATION	0.9999860309272748	WITHOUT_CLASSIFICATION	1.3969072725277543E-5	DESIGN
before add :-)	WITHOUT_CLASSIFICATION	0.9998245440012105	WITHOUT_CLASSIFICATION	1.7545599878960653E-4	DESIGN
Handle any filters applied to the class level	WITHOUT_CLASSIFICATION	0.9994690650408985	WITHOUT_CLASSIFICATION	5.309349591014272E-4	DESIGN
only one-to-one is lazy fetched	WITHOUT_CLASSIFICATION	0.9999989427863917	WITHOUT_CLASSIFICATION	1.0572136082882132E-6	DESIGN
note early exit here:	WITHOUT_CLASSIFICATION	0.9987042264213826	WITHOUT_CLASSIFICATION	0.0012957735786175053	DESIGN
object have been loaded with setReadOnly(true); HHH-2236	WITHOUT_CLASSIFICATION	0.9999984187425625	WITHOUT_CLASSIFICATION	1.581257437530838E-6	DESIGN
NOTE: this assumes something about how propertySelectFragment is implemented by the subclass!	WITHOUT_CLASSIFICATION	0.9843736901566323	WITHOUT_CLASSIFICATION	0.015626309843367676	DESIGN
strip leading ", "	WITHOUT_CLASSIFICATION	0.999999869335795	WITHOUT_CLASSIFICATION	1.306642051079866E-7	DESIGN
if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999987838080472	WITHOUT_CLASSIFICATION	1.2161919528155182E-6	DESIGN
otherwise return the "hydrated" state (ie. associations are not resolved)	WITHOUT_CLASSIFICATION	0.9959736625446083	WITHOUT_CLASSIFICATION	0.004026337455391753	DESIGN
null owner ok??	WITHOUT_CLASSIFICATION	0.9999877347556931	WITHOUT_CLASSIFICATION	1.2265244306946088E-5	DESIGN
null sql means that the only lazy properties are shared PK one-to-one associations which are handled differently in the Type#nullSafeGet code...	WITHOUT_CLASSIFICATION	0.9987283198826465	WITHOUT_CLASSIFICATION	0.001271680117353523	DESIGN
Create a new FROM node for the referenced class.	WITHOUT_CLASSIFICATION	0.9999998871550134	WITHOUT_CLASSIFICATION	1.1284498658191192E-7	DESIGN
the difficulty here is exactly what do we update in order to force the version to be incremented in the db...	WITHOUT_CLASSIFICATION	0.9834673262719524	WITHOUT_CLASSIFICATION	0.01653267372804754	DESIGN
performance op to avoid the array search	WITHOUT_CLASSIFICATION	0.9999970969724034	WITHOUT_CLASSIFICATION	2.9030275965888392E-6	DESIGN
properly handle property-ref-based associations	WITHOUT_CLASSIFICATION	0.9997611292957315	WITHOUT_CLASSIFICATION	2.3887070426850348E-4	DESIGN
Enable for HHH-440, which we don't like:	WITHOUT_CLASSIFICATION	0.9999123217475352	WITHOUT_CLASSIFICATION	8.76782524648512E-5	DESIGN
ALIASES	WITHOUT_CLASSIFICATION	0.9999896191711924	WITHOUT_CLASSIFICATION	1.0380828807594038E-5	DESIGN
aliases named identifier ( alias.idname )	WITHOUT_CLASSIFICATION	0.9999693217407392	WITHOUT_CLASSIFICATION	3.067825926080082E-5	DESIGN
aliases for composite-id's	WITHOUT_CLASSIFICATION	0.9999999362030184	WITHOUT_CLASSIFICATION	6.37969816026917E-8	DESIGN
Fetch embedded identifiers propertynames from the "virtual" identifier component	WITHOUT_CLASSIFICATION	0.9999999774092461	WITHOUT_CLASSIFICATION	2.259075381740118E-8	DESIGN
embedded composite ids ( alias.idname1, alias.idname2 )	WITHOUT_CLASSIFICATION	0.9999996057997838	WITHOUT_CLASSIFICATION	3.942002161721126E-7	DESIGN
TODO: skip formulas?	WITHOUT_CLASSIFICATION	0.5055081302007075	DESIGN	0.4944918697992925	WITHOUT_CLASSIFICATION
don't need filters for the static loaders	WITHOUT_CLASSIFICATION	0.9999829065914135	WITHOUT_CLASSIFICATION	1.709340858650443E-5	DESIGN
do two passes, for collection property-ref!	WITHOUT_CLASSIFICATION	0.9999995410504037	WITHOUT_CLASSIFICATION	4.589495962580557E-7	DESIGN
select the correct row by either pk or rowid	WITHOUT_CLASSIFICATION	0.9999702992190814	WITHOUT_CLASSIFICATION	2.970078091860117E-5	DESIGN
TODO: eventually, rowIdName[j]	WITHOUT_CLASSIFICATION	0.592277705582978	WITHOUT_CLASSIFICATION	0.407722294417022	DESIGN
this is a property of the table, which we are updating	WITHOUT_CLASSIFICATION	0.999685794674296	WITHOUT_CLASSIFICATION	3.142053257040048E-4	DESIGN
special shortcut for id properties, skip the join! this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9997718690804875	WITHOUT_CLASSIFICATION	2.2813091951237997E-4	DESIGN
we are using "all" or "dirty" property-based optimistic locking	WITHOUT_CLASSIFICATION	0.9999949347334487	WITHOUT_CLASSIFICATION	5.065266551257511E-6	DESIGN
nothing to do; even if the operand is a parameter, no way we could infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9764264415200358	WITHOUT_CLASSIFICATION	0.023573558479964223	DESIGN
this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9997448849223138	WITHOUT_CLASSIFICATION	2.5511507768606677E-4	DESIGN
add normal properties	WITHOUT_CLASSIFICATION	0.9999997860377859	WITHOUT_CLASSIFICATION	2.1396221399931684E-7	DESIGN
add the discriminator	WITHOUT_CLASSIFICATION	0.9999235187719753	WITHOUT_CLASSIFICATION	7.648122802471279E-5	DESIGN
more specifically : "? [op] datetime" 1) if the operator is MINUS, the param needs to be of some datetime type 2) if the operator is PLUS, the param needs to be of some numeric type	WITHOUT_CLASSIFICATION	0.9474175730845145	WITHOUT_CLASSIFICATION	0.05258242691548559	DESIGN
add normal properties	WITHOUT_CLASSIFICATION	0.9999997860377859	WITHOUT_CLASSIFICATION	2.1396221399931684E-7	DESIGN
this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9997448849223138	WITHOUT_CLASSIFICATION	2.5511507768606677E-4	DESIGN
add the discriminator	WITHOUT_CLASSIFICATION	0.9999235187719753	WITHOUT_CLASSIFICATION	7.648122802471279E-5	DESIGN
add the primary key	WITHOUT_CLASSIFICATION	0.9999936803504865	WITHOUT_CLASSIFICATION	6.319649513440363E-6	DESIGN
delegate already handles PK columns	WITHOUT_CLASSIFICATION	0.9999581289312014	WITHOUT_CLASSIFICATION	4.187106879866034E-5	DESIGN
we can't batch joined inserts, especially not if it is an identity insert; nor can we batch statements where the expectation is based on an output param	WITHOUT_CLASSIFICATION	0.9999999942504179	WITHOUT_CLASSIFICATION	5.749582164028533E-9	DESIGN
Render the SQL query	WITHOUT_CLASSIFICATION	0.9998460872740991	WITHOUT_CLASSIFICATION	1.539127259009365E-4	DESIGN
Write the values of fields onto the prepared statement - we MUST use the state at the time the insert was issued (cos of foreign key constraints). Not necessarily the object's current state	WITHOUT_CLASSIFICATION	0.9999996887076228	WITHOUT_CLASSIFICATION	3.112923771652867E-7	DESIGN
TODO : shouldnt inserts be Expectations.NONE?	WITHOUT_CLASSIFICATION	0.9980758728894226	DESIGN	0.0019241271105775335	WITHOUT_CLASSIFICATION
don't bother trying to update, we know there is no row there yet	WITHOUT_CLASSIFICATION	0.8591637595807118	WITHOUT_CLASSIFICATION	0.1408362404192882	DESIGN
if all fields are null, we might need to delete existing row	WITHOUT_CLASSIFICATION	0.9988503472079944	WITHOUT_CLASSIFICATION	0.0011496527920056628	DESIGN
there is probably a row there, so try to update if no rows were updated, we will find out	WITHOUT_CLASSIFICATION	0.9931584824024994	WITHOUT_CLASSIFICATION	0.0068415175975007495	DESIGN
note: updates to joined tables can't be batched...	WITHOUT_CLASSIFICATION	0.9999995146209811	WITHOUT_CLASSIFICATION	4.853790188452575E-7	DESIGN
starting index	WITHOUT_CLASSIFICATION	0.9999991867433232	WITHOUT_CLASSIFICATION	8.132566768036539E-7	DESIGN
Now write the values of fields onto the prepared statement	WITHOUT_CLASSIFICATION	0.9999402939563307	WITHOUT_CLASSIFICATION	5.9706043669377834E-5	DESIGN
Write any appropriate versioning conditional parameters	WITHOUT_CLASSIFICATION	0.9999969014133744	WITHOUT_CLASSIFICATION	3.0985866255249084E-6	DESIGN
Render the SQL query	WITHOUT_CLASSIFICATION	0.9998460872740991	WITHOUT_CLASSIFICATION	1.539127259009365E-4	DESIGN
Do the key. The key is immutable so we can use the _current_ object state - not necessarily the state at the time the delete was issued	WITHOUT_CLASSIFICATION	0.9999999078875791	WITHOUT_CLASSIFICATION	9.211242097299188E-8	DESIGN
We should use the _current_ object state (ie. after any updates that occurred during flush)	WITHOUT_CLASSIFICATION	0.9999999648157486	WITHOUT_CLASSIFICATION	3.518425134189114E-8	DESIGN
this property belongs to the table and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9991137915943468	WITHOUT_CLASSIFICATION	8.862084056533723E-4	DESIGN
note: dirtyFields==null means we had no snapshot, and we couldn't get one using select-before-update oldFields==null just means we had no snapshot to begin with (we might have used select-before-update to get the dirtyFields)	WITHOUT_CLASSIFICATION	0.9997558515362026	WITHOUT_CLASSIFICATION	2.441484637973843E-4	DESIGN
more specifically : "datetime [op] ?" 1) if the operator is MINUS, we really cannot determine the expected type as either another datetime or numeric would be valid 2) if the operator is PLUS, the param needs to be of some numeric type	WITHOUT_CLASSIFICATION	0.9999917284082959	WITHOUT_CLASSIFICATION	8.27159170408825E-6	DESIGN
For the case of dynamic-update="true", we need to generate the UPDATE SQL	WITHOUT_CLASSIFICATION	0.9999996021743189	WITHOUT_CLASSIFICATION	3.978256811096931E-7	DESIGN
don't need to check laziness (dirty checking algorithm handles that)	WITHOUT_CLASSIFICATION	0.5100011180023417	DESIGN	0.4899988819976582	WITHOUT_CLASSIFICATION
For the case of dynamic-update="false", or no snapshot, we use the static SQL	WITHOUT_CLASSIFICATION	0.9999999533966876	WITHOUT_CLASSIFICATION	4.660331248217408E-8	DESIGN
if not "get", then try "is"	WITHOUT_CLASSIFICATION	0.9999431592801998	WITHOUT_CLASSIFICATION	5.684071980019439E-5	DESIGN
Now update only the tables with dirty properties (and the table with the version number)	WITHOUT_CLASSIFICATION	0.999999852537863	WITHOUT_CLASSIFICATION	1.4746213693939447E-7	DESIGN
For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999997681217326	WITHOUT_CLASSIFICATION	2.3187826740145423E-7	DESIGN
For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999997681217326	WITHOUT_CLASSIFICATION	2.3187826740145423E-7	DESIGN
For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999999961229514	WITHOUT_CLASSIFICATION	3.877048527853635E-9	DESIGN
For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999999961229514	WITHOUT_CLASSIFICATION	3.877048527853635E-9	DESIGN
not supported	WITHOUT_CLASSIFICATION	0.9978468522074057	WITHOUT_CLASSIFICATION	0.0021531477925942556	DESIGN
this property belongs to the table and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9991137915943468	WITHOUT_CLASSIFICATION	8.862084056533723E-4	DESIGN
we need to utilize dynamic delete statements	WITHOUT_CLASSIFICATION	0.9999353576363504	WITHOUT_CLASSIFICATION	6.464236364949913E-5	DESIGN
otherwise, utilize the static delete statements	WITHOUT_CLASSIFICATION	0.9999966982242536	WITHOUT_CLASSIFICATION	3.3017757463497143E-6	DESIGN
just a performance opt!	WITHOUT_CLASSIFICATION	0.9999430361688199	WITHOUT_CLASSIFICATION	5.69638311801047E-5	DESIGN
just a performance opt!	WITHOUT_CLASSIFICATION	0.9999430361688199	WITHOUT_CLASSIFICATION	5.69638311801047E-5	DESIGN
all joins join to the pk of the driving table	WITHOUT_CLASSIFICATION	0.9999999067792351	WITHOUT_CLASSIFICATION	9.322076491049107E-8	DESIGN
notice that we skip the first table; it is the driving table!	WITHOUT_CLASSIFICATION	0.9999946234274584	WITHOUT_CLASSIFICATION	5.376572541624986E-6	DESIGN
we can inner join to superclass tables (the row MUST be there) we can never inner join to subclass tables	WITHOUT_CLASSIFICATION	0.9980692869448905	WITHOUT_CLASSIFICATION	0.001930713055109435	DESIGN
skip the driving table	WITHOUT_CLASSIFICATION	0.9999997258348922	WITHOUT_CLASSIFICATION	2.7416510781296524E-7	DESIGN
get 'em in the right order (not that it really matters)	WITHOUT_CLASSIFICATION	0.9473038487797169	WITHOUT_CLASSIFICATION	0.05269615122028308	DESIGN
here, we work under the following assumptions: ------------ valid cases -------------------------------------- 1) datetime + {something other than datetime} : always results in a datetime ( db will catch invalid conversions ) 2) datetime - datetime : always results in a DOUBLE 3) datetime - {something other than datetime} : always results in a datetime ( db will catch invalid conversions ) ------------ invalid cases ------------------------------------ 4) datetime + datetime 5) {something other than datetime} - datetime 6) datetime {any type} 7) datetime / {any type} 8) {any type} / datetime doing so allows us to properly handle parameters as either the left or right side here in the majority of cases	WITHOUT_CLASSIFICATION	0.9999998734666816	WITHOUT_CLASSIFICATION	1.2653331838310477E-7	DESIGN
render the where and from parts	WITHOUT_CLASSIFICATION	0.9998790848047464	WITHOUT_CLASSIFICATION	1.2091519525365658E-4	DESIGN
we could regerate this inside each called method!	WITHOUT_CLASSIFICATION	0.9272511105805812	WITHOUT_CLASSIFICATION	0.07274888941941877	DESIGN
now render the joins	WITHOUT_CLASSIFICATION	0.9998572839347336	WITHOUT_CLASSIFICATION	1.4271606526634054E-4	DESIGN
This will add the new from element to the origin.	WITHOUT_CLASSIFICATION	0.9999903120756115	WITHOUT_CLASSIFICATION	9.68792438843878E-6	DESIGN
now render the select clause	WITHOUT_CLASSIFICATION	0.9999946440849102	WITHOUT_CLASSIFICATION	5.355915089734117E-6	DESIGN
now tie it all together	WITHOUT_CLASSIFICATION	0.9999934820116732	WITHOUT_CLASSIFICATION	6.517988326896819E-6	DESIGN
insert/update/delete SQL	WITHOUT_CLASSIFICATION	0.9999966592236498	WITHOUT_CLASSIFICATION	3.340776350185822E-6	DESIGN
select SQL	WITHOUT_CLASSIFICATION	0.9999915287548627	WITHOUT_CLASSIFICATION	8.4712451371964E-6	DESIGN
no need to check laziness, dirty checking handles that	WITHOUT_CLASSIFICATION	0.9988396530110917	WITHOUT_CLASSIFICATION	0.0011603469889083196	DESIGN
Fully resolve the map reference, create implicit joins.	WITHOUT_CLASSIFICATION	0.9999690488282658	WITHOUT_CLASSIFICATION	3.0951171734233194E-5	DESIGN
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9964857788737406	WITHOUT_CLASSIFICATION	0.0035142211262594214	DESIGN
The basic implementation is to simply use the node's text	WITHOUT_CLASSIFICATION	0.9999990322298811	WITHOUT_CLASSIFICATION	9.677701188992067E-7	DESIGN
for dialects which are known to not support ANSI-SQL row-value-constructor syntax, we should mutate the tree.	WITHOUT_CLASSIFICATION	0.9999859236691099	WITHOUT_CLASSIFICATION	1.4076330890169902E-5	DESIGN
Due to the complexity in initializing the SelectClause, do not generate one here. If it is not found; simply return null... Also, do not cache since it gets generated well after we are created.	WITHOUT_CLASSIFICATION	0.999999625233151	WITHOUT_CLASSIFICATION	3.7476684900523293E-7	DESIGN
check the version unsaved-value, if appropriate	WITHOUT_CLASSIFICATION	0.9999988840410767	WITHOUT_CLASSIFICATION	1.115958923230511E-6	DESIGN
let this take precedence if defined, since it works for assigned identifiers	WITHOUT_CLASSIFICATION	0.9999999390304488	WITHOUT_CLASSIFICATION	6.096955114627091E-8	DESIGN
check the id unsaved-value	WITHOUT_CLASSIFICATION	0.99999638909634	WITHOUT_CLASSIFICATION	3.6109036599126304E-6	DESIGN
check to see if it is in the second-level cache	WITHOUT_CLASSIFICATION	0.9999822370979488	WITHOUT_CLASSIFICATION	1.7762902051234835E-5	DESIGN
/	WITHOUT_CLASSIFICATION	0.99994903284862	WITHOUT_CLASSIFICATION	5.096715137985688E-5	DESIGN
For property references generate <tablealias>.<columnname> as <projectionalias>	WITHOUT_CLASSIFICATION	0.9999998156726876	WITHOUT_CLASSIFICATION	1.843273124522008E-7	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999578211231971	WITHOUT_CLASSIFICATION	4.217887680284372E-5	DESIGN
if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999987838080472	WITHOUT_CLASSIFICATION	1.2161919528155182E-6	DESIGN
force immediate execution of the insert	WITHOUT_CLASSIFICATION	0.999999995165213	WITHOUT_CLASSIFICATION	4.834786928562654E-9	DESIGN
If this from element is a collection and the path is a collection property (maxIndex, etc.) then generate a sub-query.	WITHOUT_CLASSIFICATION	0.9999976298260703	WITHOUT_CLASSIFICATION	2.370173929733753E-6	DESIGN
entities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999002014186873	WITHOUT_CLASSIFICATION	9.979858131268973E-5	DESIGN
collections ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999960014966442	WITHOUT_CLASSIFICATION	3.998503355811112E-6	DESIGN
cannot occur	WITHOUT_CLASSIFICATION	0.9999982795078958	WITHOUT_CLASSIFICATION	1.7204921042665007E-6	DESIGN
cannot occur	WITHOUT_CLASSIFICATION	0.9999982795078958	WITHOUT_CLASSIFICATION	1.7204921042665007E-6	DESIGN
only carry on if the method has no parameters	WITHOUT_CLASSIFICATION	0.9999950613448705	WITHOUT_CLASSIFICATION	4.93865512943074E-6	DESIGN
try "get"	WITHOUT_CLASSIFICATION	0.9999901986912512	WITHOUT_CLASSIFICATION	9.801308748853825E-6	DESIGN
do nothing...	WITHOUT_CLASSIFICATION	0.9998921954610566	WITHOUT_CLASSIFICATION	1.0780453894341466E-4	DESIGN
do nothing...	WITHOUT_CLASSIFICATION	0.9998921954610566	WITHOUT_CLASSIFICATION	1.0780453894341466E-4	DESIGN
should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9999909567882567	WITHOUT_CLASSIFICATION	9.043211743405966E-6	DESIGN
this page intentionally left blank :)	WITHOUT_CLASSIFICATION	0.9998650050772965	WITHOUT_CLASSIFICATION	1.349949227035602E-4	DESIGN
do not do anything	WITHOUT_CLASSIFICATION	0.9999985768395038	WITHOUT_CLASSIFICATION	1.4231604963463285E-6	DESIGN
ignore	WITHOUT_CLASSIFICATION	0.9999981434368609	WITHOUT_CLASSIFICATION	1.8565631391212324E-6	DESIGN
cant instantiate	WITHOUT_CLASSIFICATION	0.999950168672189	WITHOUT_CLASSIFICATION	4.983132781105981E-5	DESIGN
if it is a property of an embedded component, invoke on the "identifier"	WITHOUT_CLASSIFICATION	0.9999159541379233	WITHOUT_CLASSIFICATION	8.404586207668425E-5	DESIGN
otherwise:	WITHOUT_CLASSIFICATION	0.9965964829196235	WITHOUT_CLASSIFICATION	0.0034035170803764603	DESIGN
skip finalize methods	WITHOUT_CLASSIFICATION	0.9998715315438522	WITHOUT_CLASSIFICATION	1.284684561477236E-4	DESIGN
note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9947393960705532	WITHOUT_CLASSIFICATION	0.005260603929446773	DESIGN
note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9947393960705532	WITHOUT_CLASSIFICATION	0.005260603929446773	DESIGN
HHH-2481 make sure the callback gets cleared, otherwise the instance stays in a static thread local.	WITHOUT_CLASSIFICATION	0.9977000251375857	WITHOUT_CLASSIFICATION	0.0022999748624142335	DESIGN
while constructor is running	WITHOUT_CLASSIFICATION	0.9997596632268875	WITHOUT_CLASSIFICATION	2.403367731124498E-4	DESIGN
while constructor is running	WITHOUT_CLASSIFICATION	0.9997596632268875	WITHOUT_CLASSIFICATION	2.403367731124498E-4	DESIGN
note: interface is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.998801196309338	WITHOUT_CLASSIFICATION	0.0011988036906620469	DESIGN
interfaces arguments	WITHOUT_CLASSIFICATION	0.9998186647022235	WITHOUT_CLASSIFICATION	1.813352977766374E-4	DESIGN
TODO!	WITHOUT_CLASSIFICATION	0.9971049576873208	WITHOUT_CLASSIFICATION	0.0028950423126792124	DESIGN
Get the caller	WITHOUT_CLASSIFICATION	0.999998583187489	WITHOUT_CLASSIFICATION	1.4168125109047953E-6	DESIGN
Get the caller principals	WITHOUT_CLASSIFICATION	0.9999974975711127	WITHOUT_CLASSIFICATION	2.502428887353052E-6	DESIGN
private static final Alias DEFAULT_ALIAS = new Alias(10, null);	WITHOUT_CLASSIFICATION	0.9999999991105725	WITHOUT_CLASSIFICATION	8.894275679056389E-10	DESIGN
Needed to bump this up to DotNode, because that is the only thing which currently knows about the property-ref path in the correct format; it is either this, or recurse over the DotNodes constructing the property path just like DotNode does internally	WITHOUT_CLASSIFICATION	0.999998989590643	WITHOUT_CLASSIFICATION	1.0104093570054238E-6	DESIGN
if the identifier is quoted, remove the quotes	WITHOUT_CLASSIFICATION	0.9999547112110687	WITHOUT_CLASSIFICATION	4.528878893134795E-5	DESIGN
truncate the identifier to the max alias length, less the suffix length	WITHOUT_CLASSIFICATION	0.9999993074605255	WITHOUT_CLASSIFICATION	6.925394745854886E-7	DESIGN
full joins are not supported.. yet!	WITHOUT_CLASSIFICATION	0.9996845354514601	WITHOUT_CLASSIFICATION	3.154645485399557E-4	DESIGN
null is not considered the same type as Integer. $NON-NLS-1 $NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999992514716235	WITHOUT_CLASSIFICATION	7.485283765125974E-7	DESIGN
the outerJoinsAfterWhere needs to come before where clause to properly handle dynamic filters	WITHOUT_CLASSIFICATION	0.999980457859824	WITHOUT_CLASSIFICATION	1.9542140175886944E-5	DESIGN
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999888414695537	WITHOUT_CLASSIFICATION	1.1158530446303592E-5	DESIGN
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999888414695537	WITHOUT_CLASSIFICATION	1.1158530446303592E-5	DESIGN
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999888414695537	WITHOUT_CLASSIFICATION	1.1158530446303592E-5	DESIGN
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999888414695537	WITHOUT_CLASSIFICATION	1.1158530446303592E-5	DESIGN
strip off any leading 'and' token	WITHOUT_CLASSIFICATION	0.9999999128929626	WITHOUT_CLASSIFICATION	8.710703733332441E-8	DESIGN
if the condition is not already there...	WITHOUT_CLASSIFICATION	0.9997975018593774	WITHOUT_CLASSIFICATION	2.0249814062263266E-4	DESIGN
dontSpace.add("'");	WITHOUT_CLASSIFICATION	0.9999976112761652	WITHOUT_CLASSIFICATION	2.388723834775941E-6	DESIGN
for MySQL	WITHOUT_CLASSIFICATION	0.9999191998379868	WITHOUT_CLASSIFICATION	8.080016201311436E-5	DESIGN
HashMap columnsUnique = new HashMap();	WITHOUT_CLASSIFICATION	0.9999991540524863	WITHOUT_CLASSIFICATION	8.4594751372302E-7	DESIGN
null caused some problems	WITHOUT_CLASSIFICATION	0.9987551720729825	WITHOUT_CLASSIFICATION	0.0012448279270174973	DESIGN
package	WITHOUT_CLASSIFICATION	0.9999575291056456	WITHOUT_CLASSIFICATION	4.2470894354337264E-5	DESIGN
not sure if this would ever be null but wanted to be careful	WITHOUT_CLASSIFICATION	0.9886486227268837	WITHOUT_CLASSIFICATION	0.0113513772731163	DESIGN
even on inverse="true"	WITHOUT_CLASSIFICATION	0.9999955747884768	WITHOUT_CLASSIFICATION	4.425211523283036E-6	DESIGN
package	WITHOUT_CLASSIFICATION	0.9999575291056456	WITHOUT_CLASSIFICATION	4.2470894354337264E-5	DESIGN
package	WITHOUT_CLASSIFICATION	0.9999575291056456	WITHOUT_CLASSIFICATION	4.2470894354337264E-5	DESIGN
If true then execute db updates, otherwise just generate and display updates	WITHOUT_CLASSIFICATION	0.9999998723700799	WITHOUT_CLASSIFICATION	1.2762992013464283E-7	DESIGN
we only release the connection	WITHOUT_CLASSIFICATION	0.9999995617170936	WITHOUT_CLASSIFICATION	4.382829063647756E-7	DESIGN
deprecated option...	WITHOUT_CLASSIFICATION	0.999168405424416	WITHOUT_CLASSIFICATION	8.315945755839556E-4	DESIGN
if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999985531207771	WITHOUT_CLASSIFICATION	1.4468792228784325E-6	DESIGN
actually, this last test is probably unnecessary, since beforeCompletion() doesn't get called during rollback	WITHOUT_CLASSIFICATION	0.9999982468777172	WITHOUT_CLASSIFICATION	1.7531222827328514E-6	DESIGN
this one only really needed for badly-behaved applications! (if the TransactionManager has a Sychronization registered, its a noop) (actually we do need it for downgrading locks)	WITHOUT_CLASSIFICATION	0.9999999754208945	WITHOUT_CLASSIFICATION	2.457910561917168E-8	DESIGN
Create an DotNode AST for the path and resolve it.	WITHOUT_CLASSIFICATION	0.9999937502810873	WITHOUT_CLASSIFICATION	6.24971891272214E-6	DESIGN
if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999985531207771	WITHOUT_CLASSIFICATION	1.4468792228784325E-6	DESIGN
if we could not register a synchronization, do the before/after completion callbacks ourself (but we need to let jdbcContext know that this is what we are going to do, so it doesn't keep trying to register synchronizations)	WITHOUT_CLASSIFICATION	0.9999976909050647	WITHOUT_CLASSIFICATION	2.309094935251318E-6	DESIGN
swallow it, and continue to roll back JTA transaction	WITHOUT_CLASSIFICATION	0.9998452562171519	WITHOUT_CLASSIFICATION	1.5474378284803842E-4	DESIGN
so the transaction is already rolled back, by JTA spec	WITHOUT_CLASSIFICATION	0.999997373891896	WITHOUT_CLASSIFICATION	2.6261081039601237E-6	DESIGN
this method is a noop if there is a Synchronization!	WITHOUT_CLASSIFICATION	0.9993517825859712	WITHOUT_CLASSIFICATION	6.482174140288054E-4	DESIGN
two conditions where we need to transform this to a theta-join syntax: 1) 'elem' is the "root from-element" in correlated subqueries 2) The DotNode.useThetaStyleImplicitJoins has been set to true and 'elem' represents an implicit join	WITHOUT_CLASSIFICATION	0.9998631899476562	WITHOUT_CLASSIFICATION	1.3681005234374055E-4	DESIGN
WebSphere, however, is not a sane JEE/JTA container...	WITHOUT_CLASSIFICATION	0.9993024004222559	WITHOUT_CLASSIFICATION	6.975995777441298E-4	DESIGN
for sane JEE/JTA containers, the transaction itself functions as its identifier...	WITHOUT_CLASSIFICATION	0.999998232886079	WITHOUT_CLASSIFICATION	1.767113921043061E-6	DESIGN
swallow, the transaction was finished	WITHOUT_CLASSIFICATION	0.9999993997446625	WITHOUT_CLASSIFICATION	6.002553374392883E-7	DESIGN
all AliasToEntityMapResultTransformer are considered equal ~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996646624874	WITHOUT_CLASSIFICATION	3.353375127093391E-7	DESIGN
Create the join element under the from element.	WITHOUT_CLASSIFICATION	0.9999982768621557	WITHOUT_CLASSIFICATION	1.7231378442526065E-6	DESIGN
all DistinctRootEntityResultTransformer are considered equal ~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998800790098	WITHOUT_CLASSIFICATION	1.199209902447454E-7	DESIGN
map of EntityMode -> Tuplizer	WITHOUT_CLASSIFICATION	0.9999899829782319	WITHOUT_CLASSIFICATION	1.001702176809777E-5	DESIGN
this is a virtual id property...	WITHOUT_CLASSIFICATION	0.9966565173937615	WITHOUT_CLASSIFICATION	0.0033434826062386045	DESIGN
this one needed only for guessEntityMode()	WITHOUT_CLASSIFICATION	0.9902780094549024	WITHOUT_CLASSIFICATION	0.009721990545097607	DESIGN
create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999800461092176	WITHOUT_CLASSIFICATION	1.9953890782258137E-5	DESIGN
todo : move this to SF per HHH-3517; also see HHH-1907 and ComponentMetamodel	WITHOUT_CLASSIFICATION	0.7837190187811496	WITHOUT_CLASSIFICATION	0.21628098121885034	DESIGN
then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999675107139638	WITHOUT_CLASSIFICATION	3.2489286036135756E-5	DESIGN
Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999920609057823	WITHOUT_CLASSIFICATION	7.939094217723541E-6	DESIGN
then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999309980582781	WITHOUT_CLASSIFICATION	6.900194172183674E-5	DESIGN
Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999920609057823	WITHOUT_CLASSIFICATION	7.939094217723541E-6	DESIGN
put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999998298317723	WITHOUT_CLASSIFICATION	1.7016822768442276E-7	DESIGN
found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.999778095549889	WITHOUT_CLASSIFICATION	2.2190445011100506E-4	DESIGN
private final SessionFactoryImplementor sessionFactory;	WITHOUT_CLASSIFICATION	0.9997507415549794	WITHOUT_CLASSIFICATION	2.492584450206203E-4	DESIGN
cached for efficiency...	WITHOUT_CLASSIFICATION	0.9990210361267616	WITHOUT_CLASSIFICATION	9.789638732383538E-4	DESIGN
public ComponentMetamodel(Component component, SessionFactoryImplementor sessionFactory) {	WITHOUT_CLASSIFICATION	0.9939600515302975	WITHOUT_CLASSIFICATION	0.006039948469702484	DESIGN
this.sessionFactory = sessionFactory;	WITHOUT_CLASSIFICATION	0.9999486692754008	WITHOUT_CLASSIFICATION	5.1330724599079257E-5	DESIGN
it was not embedded, so the argument is just an id	WITHOUT_CLASSIFICATION	0.9999707356205336	WITHOUT_CLASSIFICATION	2.9264379466376056E-5	DESIGN
then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999675107139638	WITHOUT_CLASSIFICATION	3.2489286036135756E-5	DESIGN
then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999309980582781	WITHOUT_CLASSIFICATION	6.900194172183674E-5	DESIGN
put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999998298317723	WITHOUT_CLASSIFICATION	1.7016822768442276E-7	DESIGN
then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9972809834387979	WITHOUT_CLASSIFICATION	0.0027190165612020274	DESIGN
return currentId;	WITHOUT_CLASSIFICATION	0.9999924066254289	WITHOUT_CLASSIFICATION	7.5933745711294565E-6	DESIGN
reset the id	WITHOUT_CLASSIFICATION	0.9999944519778954	WITHOUT_CLASSIFICATION	5.548022104559788E-6	DESIGN
origin.addDestination( destination ); This was the cause of HHH-242 origin.setType( FROM_FRAGMENT ); Set the parent node type so that the AST is properly formed. The destination node will have all the FROM text. The parent node is a collection join too (voodoo - see JoinProcessor)	WITHOUT_CLASSIFICATION	0.9999999991455181	WITHOUT_CLASSIFICATION	8.544818728260323E-10	DESIGN
reset the version	WITHOUT_CLASSIFICATION	0.9999995615490688	WITHOUT_CLASSIFICATION	4.384509312059137E-7	DESIGN
the default is to simply not lazy fetch properties for now...	WITHOUT_CLASSIFICATION	0.9997524215738899	WITHOUT_CLASSIFICATION	2.475784261100453E-4	DESIGN
Add the second join, the one that ends in the destination table.	WITHOUT_CLASSIFICATION	0.999999989111606	WITHOUT_CLASSIFICATION	1.0888393858845066E-8	DESIGN
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9964857788737406	WITHOUT_CLASSIFICATION	0.0035142211262594214	DESIGN
found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.999778095549889	WITHOUT_CLASSIFICATION	2.2190445011100506E-4	DESIGN
determine the id getter and setter methods from the proxy interface (if any) determine all interfaces needed by the resulting proxy	WITHOUT_CLASSIFICATION	0.9999996742072307	WITHOUT_CLASSIFICATION	3.257927693282643E-7	DESIGN
return getFactory().getSettings().getBytecodeProvider().getProxyFactoryFactory().buildProxyFactory();	WITHOUT_CLASSIFICATION	0.9999950975825344	WITHOUT_CLASSIFICATION	4.902417465642445E-6	DESIGN
not final because proxy factory creation can fail	WITHOUT_CLASSIFICATION	0.999909986711412	WITHOUT_CLASSIFICATION	9.001328858802137E-5	DESIGN
superclass entity-name	WITHOUT_CLASSIFICATION	0.999994376250994	WITHOUT_CLASSIFICATION	5.623749005947655E-6	DESIGN
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9964857788737406	WITHOUT_CLASSIFICATION	0.0035142211262594214	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999578211231971	WITHOUT_CLASSIFICATION	4.217887680284372E-5	DESIGN
init the aliases, after initing the constructornode	WITHOUT_CLASSIFICATION	0.9999609186249074	WITHOUT_CLASSIFICATION	3.908137509259495E-5	DESIGN
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9964857788737406	WITHOUT_CLASSIFICATION	0.0035142211262594214	DESIGN
legacy behavior (with no abstract attribute specified)	WITHOUT_CLASSIFICATION	0.9999944468033344	WITHOUT_CLASSIFICATION	5.553196665560541E-6	DESIGN
Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999994786721398	WITHOUT_CLASSIFICATION	5.213278602732016E-7	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999578211231971	WITHOUT_CLASSIFICATION	4.217887680284372E-5	DESIGN
note: this affects the return value!	WITHOUT_CLASSIFICATION	0.9999380827272805	WITHOUT_CLASSIFICATION	6.191727271959471E-5	DESIGN
Need to account for allowable '_' within the variant	WITHOUT_CLASSIFICATION	0.9999997549762909	WITHOUT_CLASSIFICATION	2.45023709031864E-7	DESIGN
Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999950572701277	WITHOUT_CLASSIFICATION	4.942729872191963E-6	DESIGN
Collection Types:	WITHOUT_CLASSIFICATION	0.9999823935769921	WITHOUT_CLASSIFICATION	1.760642300781714E-5	DESIGN
convenience methods relating to operations across arrays of types...	WITHOUT_CLASSIFICATION	0.9999301811628842	WITHOUT_CLASSIFICATION	6.981883711577048E-5	DESIGN
lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999946761150312	WITHOUT_CLASSIFICATION	5.323884968809752E-6	DESIGN
Blobs are ignored by merge()	WITHOUT_CLASSIFICATION	0.9999997301965151	WITHOUT_CLASSIFICATION	2.6980348478892927E-7	DESIGN
value is the entity name	WITHOUT_CLASSIFICATION	0.9999747195840141	WITHOUT_CLASSIFICATION	2.5280415985940232E-5	DESIGN
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999950992549933	WITHOUT_CLASSIFICATION	4.90074500673845E-6	DESIGN
generate id select fragment and then property select fragment for each expression, just like generateSelectFragments().	WITHOUT_CLASSIFICATION	0.9999968414397086	WITHOUT_CLASSIFICATION	3.158560291343287E-6	DESIGN
TODO!	WITHOUT_CLASSIFICATION	0.9971049576873208	WITHOUT_CLASSIFICATION	0.0028950423126792124	DESIGN
xml is the entity name	WITHOUT_CLASSIFICATION	0.9999276123795665	WITHOUT_CLASSIFICATION	7.238762043340705E-5	DESIGN
special case ... this is the leaf of the containment graph, even though not immutable	WITHOUT_CLASSIFICATION	0.9994423118357199	WITHOUT_CLASSIFICATION	5.576881642802109E-4	DESIGN
tolerates nulls	WITHOUT_CLASSIFICATION	0.9999925618325549	WITHOUT_CLASSIFICATION	7.438167445019914E-6	DESIGN
sqlResultTypeList,	WITHOUT_CLASSIFICATION	0.9999945921690824	WITHOUT_CLASSIFICATION	5.407830917732439E-6	DESIGN
metaType is assumed to be single-column type	WITHOUT_CLASSIFICATION	0.9999696137656595	WITHOUT_CLASSIFICATION	3.0386234340407593E-5	DESIGN
Get all the select expressions (that we just generated) and render the select.	WITHOUT_CLASSIFICATION	0.9999869021180288	WITHOUT_CLASSIFICATION	1.3097881971164611E-5	DESIGN
Look through the FromElement's children to find any collections of values that should be fetched...	WITHOUT_CLASSIFICATION	0.9999971914146676	WITHOUT_CLASSIFICATION	2.808585332393097E-6	DESIGN
return AssociationType.FOREIGN_KEY_TO_PARENT; this is better but causes a transient object exception...	WITHOUT_CLASSIFICATION	0.9769795043157578	WITHOUT_CLASSIFICATION	0.023020495684242186	DESIGN
Use the lower case function name. Remember whether we're in a SELECT clause or not.	WITHOUT_CLASSIFICATION	0.9999999802406496	WITHOUT_CLASSIFICATION	1.9759350344662382E-8	DESIGN
IDENT might be the name of a class.	WITHOUT_CLASSIFICATION	0.9999457546567923	WITHOUT_CLASSIFICATION	5.4245343207638565E-5	DESIGN
TODO!!!	WITHOUT_CLASSIFICATION	0.9871093620668654	WITHOUT_CLASSIFICATION	0.012890637933134589	DESIGN
st.setTimestamp( index, new Timestamp( cal.getTimeInMillis() ), cal ); JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9999999967675998	WITHOUT_CLASSIFICATION	3.232400281877715E-9	DESIGN
st.setDate( index, new Date( cal.getTimeInMillis() ), cal ); JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9999999970396195	WITHOUT_CLASSIFICATION	2.960380569493547E-9	DESIGN
both are Timestamps	WITHOUT_CLASSIFICATION	0.999996559622485	WITHOUT_CLASSIFICATION	3.4403775149224575E-6	DESIGN
at least one is a plain old Date	WITHOUT_CLASSIFICATION	0.9999915949287794	WITHOUT_CLASSIFICATION	8.405071220654383E-6	DESIGN
noop	WITHOUT_CLASSIFICATION	0.9999722346376272	WITHOUT_CLASSIFICATION	2.7765362372827338E-5	DESIGN
if the corresponding SQL value is NULL, the reader we got is NULL as well	WITHOUT_CLASSIFICATION	0.9999998835227419	WITHOUT_CLASSIFICATION	1.1647725800976337E-7	DESIGN
Fetch Reader content up to the end - and put characters in a StringBuffer	WITHOUT_CLASSIFICATION	0.9997866263830295	WITHOUT_CLASSIFICATION	2.1337361697059052E-4	DESIGN
Return StringBuffer content as a large String	WITHOUT_CLASSIFICATION	0.9999987848762276	WITHOUT_CLASSIFICATION	1.215123772347243E-6	DESIGN
or Types.LONGVARCHAR?	WITHOUT_CLASSIFICATION	0.9963343343238591	WITHOUT_CLASSIFICATION	0.003665665676140768	DESIGN
Not called at runtime so doesn't matter if its slow :)	WITHOUT_CLASSIFICATION	0.9996590461855624	WITHOUT_CLASSIFICATION	3.409538144375314E-4	DESIGN
TODO	WITHOUT_CLASSIFICATION	0.9952590787167667	WITHOUT_CLASSIFICATION	0.0047409212832332575	DESIGN
Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999996208570366	WITHOUT_CLASSIFICATION	3.791429632406289E-7	DESIGN
different nullability rules for pk/fk	WITHOUT_CLASSIFICATION	0.9997938027911738	WITHOUT_CLASSIFICATION	2.0619720882631527E-4	DESIGN
cache this	WITHOUT_CLASSIFICATION	0.9997857987501547	WITHOUT_CLASSIFICATION	2.1420124984535124E-4	DESIGN
only really need new array during semiresolve!	WITHOUT_CLASSIFICATION	0.9999888744270191	WITHOUT_CLASSIFICATION	1.1125572980871884E-5	DESIGN
Forcefully remove leading ands from where fragments; the grammar will handle adding them	WITHOUT_CLASSIFICATION	0.9769703147695888	WITHOUT_CLASSIFICATION	0.023029685230411105	DESIGN
TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9917654937018042	WITHOUT_CLASSIFICATION	0.008234506298195752	DESIGN
Create a new FILTERS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999999452736177	WITHOUT_CLASSIFICATION	5.472638228420247E-8	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999578211231971	WITHOUT_CLASSIFICATION	4.217887680284372E-5	DESIGN
public Object instantiate(Object parent, SessionImplementor session) throws HibernateException;	WITHOUT_CLASSIFICATION	0.8499018765290631	WITHOUT_CLASSIFICATION	0.15009812347093693	DESIGN
nothing to do	WITHOUT_CLASSIFICATION	0.9998396764052384	WITHOUT_CLASSIFICATION	1.6032359476147851E-4	DESIGN
nothing to do	WITHOUT_CLASSIFICATION	0.9998396764052384	WITHOUT_CLASSIFICATION	1.6032359476147851E-4	DESIGN
VersionType impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Note : simply returns null for seed() and next() as the only known application of binary types for versioning is for use with the TIMESTAMP datatype supported by Sybase and SQL Server, which are completely db-generated values...	WITHOUT_CLASSIFICATION	0.9999999984022161	WITHOUT_CLASSIFICATION	1.5977839328867704E-9	DESIGN
lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999946761150312	WITHOUT_CLASSIFICATION	5.323884968809752E-6	DESIGN
not really necessary, I guess...	WITHOUT_CLASSIFICATION	0.9588338318926126	WITHOUT_CLASSIFICATION	0.04116616810738743	DESIGN
Clobs are ignored by merge() operation	WITHOUT_CLASSIFICATION	0.9999999722082683	WITHOUT_CLASSIFICATION	2.779173172898431E-8	DESIGN
we do not have to worry about queued additions to uninitialized collections, since they can only occur for inverse collections!	WITHOUT_CLASSIFICATION	0.9999999809977058	WITHOUT_CLASSIFICATION	1.9002294239795406E-8	DESIGN
collections cannot be compared	WITHOUT_CLASSIFICATION	0.9999984858582571	WITHOUT_CLASSIFICATION	1.5141417428035952E-6	DESIGN
remember the uk value	WITHOUT_CLASSIFICATION	0.999996350477902	WITHOUT_CLASSIFICATION	3.6495220978638266E-6	DESIGN
NOOP	WITHOUT_CLASSIFICATION	0.9999823633449374	WITHOUT_CLASSIFICATION	1.763665506258801E-5	DESIGN
processCollectionProperty(token, q.getCollectionPersister(collectionRole), collectionName);	WITHOUT_CLASSIFICATION	0.9999999961381143	WITHOUT_CLASSIFICATION	3.861885722204679E-9	DESIGN
we must use the "remembered" uk value, since it is not available from the EntityEntry during assembly	WITHOUT_CLASSIFICATION	0.9999991237506836	WITHOUT_CLASSIFICATION	8.762493165046963E-7	DESIGN
collections don't dirty an unversioned parent entity	WITHOUT_CLASSIFICATION	0.9988630800530195	WITHOUT_CLASSIFICATION	0.0011369199469804553	DESIGN
return false;	WITHOUT_CLASSIFICATION	0.9999971491331721	WITHOUT_CLASSIFICATION	2.8508668279439777E-6	DESIGN
This just handles a particular case of component projection, perhaps get rid of it and throw an exception	WITHOUT_CLASSIFICATION	0.7543464947117157	WITHOUT_CLASSIFICATION	0.24565350528828436	DESIGN
NOTE: we avoid joining to the next table if the named property is just the foreign key value	WITHOUT_CLASSIFICATION	0.9999995094397769	WITHOUT_CLASSIFICATION	4.905602231103322E-7	DESIGN
the key is the owning entity itself, so get the ID from the key	WITHOUT_CLASSIFICATION	0.999996877807688	WITHOUT_CLASSIFICATION	3.1221923119431124E-6	DESIGN
if the original is a PersistentCollection, and that original was not flagged as dirty, then reset the target's dirty flag here after the copy operation. </p> One thing to be careful of here is a "bare" original collection in which case we should never ever ever reset the dirty flag on the target because we simply do not know...	WITHOUT_CLASSIFICATION	0.9999999116893126	WITHOUT_CLASSIFICATION	8.831068752562541E-8	DESIGN
ignore subselect keywords	WITHOUT_CLASSIFICATION	0.9999999617322728	WITHOUT_CLASSIFICATION	3.826772726436225E-8	DESIGN
copy elements into newly empty target collection	WITHOUT_CLASSIFICATION	0.9999998854265213	WITHOUT_CLASSIFICATION	1.1457347870399324E-7	DESIGN
for a null target, or a target which is the same as the original, we need to put the merged elements in a new collection	WITHOUT_CLASSIFICATION	0.9999995486453972	WITHOUT_CLASSIFICATION	4.5135460283382203E-7	DESIGN
by default just use an unanticipated capacity since we don't know how to extract the capacity to use from original here...	WITHOUT_CLASSIFICATION	0.9722332859849269	WITHOUT_CLASSIFICATION	0.027766714015073087	DESIGN
get the elements back into the target making sure to handle dirty flag	WITHOUT_CLASSIFICATION	0.9999726854154041	WITHOUT_CLASSIFICATION	2.7314584595930722E-5	DESIGN
check if collection is currently being loaded	WITHOUT_CLASSIFICATION	0.9997634038398682	WITHOUT_CLASSIFICATION	2.3659616013181349E-4	DESIGN
check if it is already completely loaded, but unowned	WITHOUT_CLASSIFICATION	0.9999997163721217	WITHOUT_CLASSIFICATION	2.8362787834886496E-7	DESIGN
cache the actual id of the object, not the value of the property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999959246591243	WITHOUT_CLASSIFICATION	4.075340875717219E-6	DESIGN
TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9917654937018042	WITHOUT_CLASSIFICATION	0.008234506298195752	DESIGN
create a new collection wrapper, to be initialized later	WITHOUT_CLASSIFICATION	0.9999867951451136	WITHOUT_CLASSIFICATION	1.3204854886491107E-5	DESIGN
Some JDBC drivers erroneously return an empty array here for a null DB value :/	WITHOUT_CLASSIFICATION	0.9999893451176275	WITHOUT_CLASSIFICATION	1.0654882372391284E-5	DESIGN
our column span is the number of columns in the PK	WITHOUT_CLASSIFICATION	0.9999997744998711	WITHOUT_CLASSIFICATION	2.255001288788378E-7	DESIGN
cannot batch fetch by unique key (property-ref associations)	WITHOUT_CLASSIFICATION	0.9999998844758435	WITHOUT_CLASSIFICATION	1.1552415642338859E-7	DESIGN
we already know current is not null...	WITHOUT_CLASSIFICATION	0.9998605285497201	WITHOUT_CLASSIFICATION	1.3947145027994195E-4	DESIGN
the ids are fully resolved, so compare them with isDirty(), not isModified()	WITHOUT_CLASSIFICATION	0.9999980410810289	WITHOUT_CLASSIFICATION	1.958918971202757E-6	DESIGN
the owner of the association is not the owner of the id	WITHOUT_CLASSIFICATION	0.9999994093487158	WITHOUT_CLASSIFICATION	5.906512841214959E-7	DESIGN
----------------------------------------------------------- Constructors	WITHOUT_CLASSIFICATION	0.999982700760393	WITHOUT_CLASSIFICATION	1.7299239606975918E-5	DESIGN
----------------------------------------------------- Instance Variables	WITHOUT_CLASSIFICATION	0.9999997569538286	WITHOUT_CLASSIFICATION	2.4304617147569273E-7	DESIGN
public static JDBCException newJDBCException(String string, SQLException root, String sql) { string = string + " [" + sql + ']'; log.error(string, root); logExceptions(root); return new JDBCException(string, root, sql); } public static JDBCException newJDBCException(String string, SQLException root) { log.error(string, root); logExceptions(root); return new JDBCException(string, root); }	WITHOUT_CLASSIFICATION	0.9999999996561764	WITHOUT_CLASSIFICATION	3.438236402574664E-10	DESIGN
--------------------------------------------------------- Public Methods	WITHOUT_CLASSIFICATION	0.9999058291877346	WITHOUT_CLASSIFICATION	9.41708122654437E-5	DESIGN
Compare the two maps for equality	WITHOUT_CLASSIFICATION	0.9999999418384798	WITHOUT_CLASSIFICATION	5.8161520084891105E-8	DESIGN
Simple tests that require no synchronization	WITHOUT_CLASSIFICATION	0.9999998797388324	WITHOUT_CLASSIFICATION	1.202611675635419E-7	DESIGN
Sybase fail if we don't do that, sigh...	WITHOUT_CLASSIFICATION	0.9987821610666772	WITHOUT_CLASSIFICATION	0.0012178389333229198	DESIGN
Handles things like: a and b or c a and ( b or c ) not a and not b not ( a and b ) x between y and z (overloaded "and") x in ( a, b, c ) (overloaded brackets) not not a a is not null (overloaded "not") etc...... and expressions like foo = bar (maps to: foo.id = bar.id) foo.Bar = 'foo' (maps to: foo.bar = 'foo') foo.Bar.Baz = 1.0 (maps to: foo.bar = bar.id and bar.baz = 1.0) 1.0 = foo.Bar.Baz (maps to: bar.baz = 1.0 and foo.Bar = bar.id) foo.Bar.Baz = a.B.C (maps to: bar.Baz = b.C and foo.Bar = bar.id and a.B = b.id) foo.Bar.Baz + a.B.C (maps to: bar.Baz + b.C and foo.Bar = bar.id and a.B = b.id) ( foo.Bar.Baz + 1.0 ) < 2.0 (maps to: ( bar.Baz + 1.0 ) < 2.0 and foo.Bar = bar.id)	WITHOUT_CLASSIFICATION	0.9999997635948299	WITHOUT_CLASSIFICATION	2.3640517007243607E-7	DESIGN
release the jdk internal caches everytime to ensure this plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9999079763570196	WITHOUT_CLASSIFICATION	9.202364298048339E-5	DESIGN
release the jdk internal caches everytime to ensure this plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9999079763570196	WITHOUT_CLASSIFICATION	9.202364298048339E-5	DESIGN
try to "pretty print" it	WITHOUT_CLASSIFICATION	0.9999873616351973	WITHOUT_CLASSIFICATION	1.26383648026138E-5	DESIGN
otherwise, just dump it	WITHOUT_CLASSIFICATION	0.9999224183877734	WITHOUT_CLASSIFICATION	7.758161222657634E-5	DESIGN
its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9999588954635563	WITHOUT_CLASSIFICATION	4.110453644361094E-5	DESIGN
its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9999588954635563	WITHOUT_CLASSIFICATION	4.110453644361094E-5	DESIGN
use default behavior	WITHOUT_CLASSIFICATION	0.999993683959087	WITHOUT_CLASSIFICATION	6.316040912944314E-6	DESIGN
NOTE: early return	WITHOUT_CLASSIFICATION	0.9999621739578892	WITHOUT_CLASSIFICATION	3.782604211086944E-5	DESIGN
the MRU cache used to keep hard references to the most recently used query plans; note : LRU here is a bit of a misnomer, it indicates that LRU entries are removed, the actual kept entries are the MRU entries	WITHOUT_CLASSIFICATION	0.5877348133347202	WITHOUT_CLASSIFICATION	0.41226518666527967	DESIGN
we want to be able to just use the defaults, if JNDI environment properties are not supplied so don't put null in anywhere	WITHOUT_CLASSIFICATION	0.9999996512532104	WITHOUT_CLASSIFICATION	3.4874678950400953E-7	DESIGN
Clone -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999992402267496	WITHOUT_CLASSIFICATION	7.597732503867064E-7	DESIGN
Serialize -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999999458950249	WITHOUT_CLASSIFICATION	5.410497503154546E-8	DESIGN
stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999991604987414	WITHOUT_CLASSIFICATION	8.39501258741549E-7	DESIGN
stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999991604987414	WITHOUT_CLASSIFICATION	8.39501258741549E-7	DESIGN
Deserialize -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999999088301076	WITHOUT_CLASSIFICATION	9.116989239400651E-8	DESIGN
static methods only - hide constructor	WITHOUT_CLASSIFICATION	0.9990652316984343	WITHOUT_CLASSIFICATION	9.347683015656775E-4	DESIGN
&& !('_'==character)	WITHOUT_CLASSIFICATION	0.9999984735013988	WITHOUT_CLASSIFICATION	1.526498601164503E-6	DESIGN
returnign null!	WITHOUT_CLASSIFICATION	0.9999976466129994	WITHOUT_CLASSIFICATION	2.3533870006121686E-6	DESIGN
returnign null!	WITHOUT_CLASSIFICATION	0.9999976466129994	WITHOUT_CLASSIFICATION	2.3533870006121686E-6	DESIGN
includes last '.'	WITHOUT_CLASSIFICATION	0.9999999106673815	WITHOUT_CLASSIFICATION	8.933261863555414E-8	DESIGN
+1 to include the following '.'	WITHOUT_CLASSIFICATION	0.9999999090016728	WITHOUT_CLASSIFICATION	9.09983273164992E-8	DESIGN
Impl note: takes advantage of the fact that an escpaed single quote embedded within a quote-block can really be handled as two seperate quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9866959396031274	WITHOUT_CLASSIFICATION	0.013304060396872486	DESIGN
first time we find match!	WITHOUT_CLASSIFICATION	0.9999979080772533	WITHOUT_CLASSIFICATION	2.0919227466287136E-6	DESIGN
entityNames may now include slashes for the representations classname may be an inner class	WITHOUT_CLASSIFICATION	0.999608584328085	WITHOUT_CLASSIFICATION	3.914156719150749E-4	DESIGN
wrapped iterators	WITHOUT_CLASSIFICATION	0.9999820707806014	WITHOUT_CLASSIFICATION	1.7929219398614118E-5	DESIGN
index of current iterator in the wrapped iterators array	WITHOUT_CLASSIFICATION	0.9999624142029535	WITHOUT_CLASSIFICATION	3.758579704652743E-5	DESIGN
the current iterator	WITHOUT_CLASSIFICATION	0.9999872838313634	WITHOUT_CLASSIFICATION	1.2716168636617759E-5	DESIGN
the last used iterator	WITHOUT_CLASSIFICATION	0.9991020163675332	WITHOUT_CLASSIFICATION	8.979836324668736E-4	DESIGN
it was a boolean expression	WITHOUT_CLASSIFICATION	0.999996099257237	WITHOUT_CLASSIFICATION	3.900742762922047E-6	DESIGN
public static Object[] clone(Class elementClass, Object[] array) {Object[] result = (Object[]) Array.newInstance( elementClass, array.length );System.arraycopy(array, 0, result, 0, array.length);return result;}	WITHOUT_CLASSIFICATION	0.9999998675745521	WITHOUT_CLASSIFICATION	1.3242544793426527E-7	DESIGN
call this before any Iterator method to make sure that the current Iterator is not exhausted	WITHOUT_CLASSIFICATION	0.9926312946311346	WITHOUT_CLASSIFICATION	0.007368705368865393	DESIGN
doable if needed	WITHOUT_CLASSIFICATION	0.9999901226590289	WITHOUT_CLASSIFICATION	9.87734097111909E-6	DESIGN
set last used iterator here, in case the user calls remove before calling hasNext() or next() (although they shouldn't)	WITHOUT_CLASSIFICATION	0.9999714013806114	WITHOUT_CLASSIFICATION	2.8598619388723697E-5	DESIGN
peek ahead	WITHOUT_CLASSIFICATION	0.9999364315058844	WITHOUT_CLASSIFICATION	6.356849411563796E-5	DESIGN
if we reach the end of the string w/o finding the matching end, that is an exception	WITHOUT_CLASSIFICATION	0.9999999648322521	WITHOUT_CLASSIFICATION	3.516774804781006E-8	DESIGN
we have a placeholder, spin forward till we find the end	WITHOUT_CLASSIFICATION	0.9999979159121998	WITHOUT_CLASSIFICATION	2.0840878002855656E-6	DESIGN
make sure spinning forward did not put us past the end of the buffer...	WITHOUT_CLASSIFICATION	0.9999999986750523	WITHOUT_CLASSIFICATION	1.3249477300168074E-9	DESIGN
First, try to locate this resource through the current context classloader.	WITHOUT_CLASSIFICATION	0.9997870785744739	WITHOUT_CLASSIFICATION	2.129214255261252E-4	DESIGN
Next, try to locate this resource through this class's classloader	WITHOUT_CLASSIFICATION	0.9996560235294119	WITHOUT_CLASSIFICATION	3.4397647058806837E-4	DESIGN
Next, try to locate this resource through the system classloader	WITHOUT_CLASSIFICATION	0.9996604473305407	WITHOUT_CLASSIFICATION	3.395526694593148E-4	DESIGN
Anywhere else we should look?	WITHOUT_CLASSIFICATION	0.9988033222229371	WITHOUT_CLASSIFICATION	0.0011966777770629614	DESIGN
would need an IdentitySet for this!	WITHOUT_CLASSIFICATION	0.9991136956318076	WITHOUT_CLASSIFICATION	8.863043681923706E-4	DESIGN
Arrays.asList doesn't do primitive arrays	WITHOUT_CLASSIFICATION	0.9999996281900182	WITHOUT_CLASSIFICATION	3.718099817946293E-7	DESIGN
faster?	WITHOUT_CLASSIFICATION	0.9982796186243956	WITHOUT_CLASSIFICATION	0.0017203813756044271	DESIGN
the name of a class	WITHOUT_CLASSIFICATION	0.9999835749446374	WITHOUT_CLASSIFICATION	1.6425055362590458E-5	DESIGN
Its the listener class name	WITHOUT_CLASSIFICATION	0.9999963934141232	WITHOUT_CLASSIFICATION	3.606585876740732E-6	DESIGN
allow 9,8,7,6,5,4,3,2,1	WITHOUT_CLASSIFICATION	0.9999993628012989	WITHOUT_CLASSIFICATION	6.371987010463017E-7	DESIGN
default to element set if no elements() specified	WITHOUT_CLASSIFICATION	0.9999999464130089	WITHOUT_CLASSIFICATION	5.358699103095787E-8	DESIGN
look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999377657853317	WITHOUT_CLASSIFICATION	6.223421466825127E-5	DESIGN
in case we were deserialized in a different JVM, look for an instance with the same name (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.8821899620771052	WITHOUT_CLASSIFICATION	0.1178100379228947	DESIGN
first, lets determine whether to apply cglib or javassist based instrumentation...	WITHOUT_CLASSIFICATION	0.9999950696601387	WITHOUT_CLASSIFICATION	4.9303398613378405E-6	DESIGN
Make sure we don't override previous set values	WITHOUT_CLASSIFICATION	0.9999956344027796	WITHOUT_CLASSIFICATION	4.365597220287697E-6	DESIGN
entirely optional!!	WITHOUT_CLASSIFICATION	0.9999857086137248	WITHOUT_CLASSIFICATION	1.429138627519288E-5	DESIGN
Its the listener instance (or better be)	WITHOUT_CLASSIFICATION	0.9998551700408579	WITHOUT_CLASSIFICATION	1.4482995914210416E-4	DESIGN
context.unbind(boundName);	WITHOUT_CLASSIFICATION	0.9999559050451918	WITHOUT_CLASSIFICATION	4.4094954808208526E-5	DESIGN
readResolveObject	WITHOUT_CLASSIFICATION	0.9999078514783276	WITHOUT_CLASSIFICATION	9.214852167233804E-5	DESIGN
cfg.setProperty("hibernate.show_sql", "true");	WITHOUT_CLASSIFICATION	0.999999998050228	WITHOUT_CLASSIFICATION	1.949771935866877E-9	DESIGN
Defensive, convenience methods	WITHOUT_CLASSIFICATION	0.9999325554751921	WITHOUT_CLASSIFICATION	6.744452480784817E-5	DESIGN
Create the SessionFactory from hibernate.cfg.xml	WITHOUT_CLASSIFICATION	0.9999985803114599	WITHOUT_CLASSIFICATION	1.4196885400385447E-6	DESIGN
Make sure you log the exception, as it might be swallowed	WITHOUT_CLASSIFICATION	0.9997166655815257	WITHOUT_CLASSIFICATION	2.833344184741788E-4	DESIGN
Begin unit of work	WITHOUT_CLASSIFICATION	0.9999839085841655	WITHOUT_CLASSIFICATION	1.6091415834461756E-5	DESIGN
Write HTML header	WITHOUT_CLASSIFICATION	0.9999866787153875	WITHOUT_CLASSIFICATION	1.3321284612483746E-5	DESIGN
Handle actions	WITHOUT_CLASSIFICATION	0.9999638261704816	WITHOUT_CLASSIFICATION	3.6173829518327706E-5	DESIGN
Print page	WITHOUT_CLASSIFICATION	0.9999978990076321	WITHOUT_CLASSIFICATION	2.1009923678233417E-6	DESIGN
Write HTML footer	WITHOUT_CLASSIFICATION	0.9999989195250624	WITHOUT_CLASSIFICATION	1.0804749375649738E-6	DESIGN
End unit of work	WITHOUT_CLASSIFICATION	0.9999578837778742	WITHOUT_CLASSIFICATION	4.211622212577708E-5	DESIGN
Start the session to be used for this request	WITHOUT_CLASSIFICATION	0.9924428209566855	WITHOUT_CLASSIFICATION	0.007557179043314468	DESIGN
make the session available to the session factory's "current context"	WITHOUT_CLASSIFICATION	0.9999989257956142	WITHOUT_CLASSIFICATION	1.0742043857614652E-6	DESIGN
pass control along to the rest of the processing chain	WITHOUT_CLASSIFICATION	0.9999999792296947	WITHOUT_CLASSIFICATION	2.0770305254401837E-8	DESIGN
remove session from "current context"	WITHOUT_CLASSIFICATION	0.9993949348441074	WITHOUT_CLASSIFICATION	6.05065155892716E-4	DESIGN
Eager fetch the collection so we can use it detached	WITHOUT_CLASSIFICATION	0.9999640927332557	WITHOUT_CLASSIFICATION	3.5907266744266046E-5	DESIGN
If we want to handle it bidirectional and detached, we also need to load this collection with an eager outer-join fetch, this time with Criteria and not HQL:	WITHOUT_CLASSIFICATION	0.9999999985274152	WITHOUT_CLASSIFICATION	1.472584764366617E-9	DESIGN
Event anEvent = (Event) session .createCriteria(Event.class).setFetchMode("participants", FetchMode.JOIN) .add( Expression.eq("id", eventId) ) .uniqueResult(); Eager fetch the colleciton so we can use it detached	WITHOUT_CLASSIFICATION	0.9999999989909445	WITHOUT_CLASSIFICATION	1.0090554662202546E-9	DESIGN
End of first unit of work	WITHOUT_CLASSIFICATION	0.9999866997716317	WITHOUT_CLASSIFICATION	1.3300228368327874E-5	DESIGN
or bidirectional safety method, setting both sides: aPerson.addToEvent(anEvent);	WITHOUT_CLASSIFICATION	0.9999861549922568	WITHOUT_CLASSIFICATION	1.3845007743165544E-5	DESIGN
Begin second unit of work	WITHOUT_CLASSIFICATION	0.9998598388353194	WITHOUT_CLASSIFICATION	1.4016116468066535E-4	DESIGN
Reattachment of aPerson	WITHOUT_CLASSIFICATION	0.9999823142335463	WITHOUT_CLASSIFICATION	1.768576645369221E-5	DESIGN
The getEmailAddresses() might trigger a lazy load of the collection	WITHOUT_CLASSIFICATION	0.9997970448823889	WITHOUT_CLASSIFICATION	2.0295511761114128E-4	DESIGN
We need our tm, so get it now and avoid doing other work if there is a problem	WITHOUT_CLASSIFICATION	0.9999474282838912	WITHOUT_CLASSIFICATION	5.257171610874816E-5	DESIGN
Don't hold the JBC node lock throughout the tx, as that prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999999591873864	WITHOUT_CLASSIFICATION	4.0812613654656335E-8	DESIGN
Don't hold the JBC node lock throughout the tx, as that prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999999591873864	WITHOUT_CLASSIFICATION	4.0812613654656335E-8	DESIGN
JBC put a version in the node when it created as part of some internal operation. We are always newer, but if the JBC version is > 1 something odd has happened	WITHOUT_CLASSIFICATION	0.9999999998704513	WITHOUT_CLASSIFICATION	1.2954872779369192E-10	DESIGN
swaldman 2006-08-28: define c3p0-style configuration parameters for properties with hibernate-specific overrides to detect and warn about conflicting declarations	WITHOUT_CLASSIFICATION	0.9999883950317596	WITHOUT_CLASSIFICATION	1.1604968240504164E-5	DESIGN
Not null if the Isolation level has been specified in the configuration file. Otherwise, it is left to the Driver's default value.	WITHOUT_CLASSIFICATION	0.9999998769066619	WITHOUT_CLASSIFICATION	1.2309333802516555E-7	DESIGN
Configured outside of Hibernate (i.e. Servlet container, or Java Bean Container already has Proxool pools running, and this provider is to just borrow one of these	WITHOUT_CLASSIFICATION	0.9688014644900009	WITHOUT_CLASSIFICATION	0.03119853550999904	DESIGN
If you're closing down the ConnectionProvider chances are an is not a real big deal, just warn	WITHOUT_CLASSIFICATION	0.9999952681994801	WITHOUT_CLASSIFICATION	4.731800519750579E-6	DESIGN
(AS is always optional, for consistency with SQL/OQL)	WITHOUT_CLASSIFICATION	0.9999998183696073	WITHOUT_CLASSIFICATION	1.8163039266973128E-7	DESIGN
process the "new" HQL style where aliases are assigned _after_ the class name or path expression ie. using the AS construction	WITHOUT_CLASSIFICATION	0.9999978916128344	WITHOUT_CLASSIFICATION	2.1083871656295534E-6	DESIGN
the loaded owner will be set to null after the collection is removed, so capture its value as the affected owner so it is accessible to both pre- and post- events	WITHOUT_CLASSIFICATION	0.9999999991065989	WITHOUT_CLASSIFICATION	8.93401150605192E-10	DESIGN
is a primitive type invokespecial	WITHOUT_CLASSIFICATION	0.9999946117717705	WITHOUT_CLASSIFICATION	5.38822822946994E-6	DESIGN
array of primitive type do nothing	WITHOUT_CLASSIFICATION	0.9999879042297423	WITHOUT_CLASSIFICATION	1.209577025760933E-5	DESIGN
handle a path expression or class name that appears at the start, in the "new" HQL style or an alias that appears at the start in the "old" HQL style	WITHOUT_CLASSIFICATION	0.9998524526859766	WITHOUT_CLASSIFICATION	1.4754731402347805E-4	DESIGN
handle <=, >=, !=, is not, not between, not in	WITHOUT_CLASSIFICATION	0.99976933718456	WITHOUT_CLASSIFICATION	2.306628154401101E-4	DESIGN
The loop ensures atomicity of the select + update even for no transaction or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999989469061593	WITHOUT_CLASSIFICATION	1.053093840693321E-6	DESIGN
transfer an explicitly defined entity name handle the lazy attribute	WITHOUT_CLASSIFICATION	0.9963155394259166	WITHOUT_CLASSIFICATION	0.0036844605740834644	DESIGN
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999981909222844	WITHOUT_CLASSIFICATION	1.8090777155885485E-6	DESIGN
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999981909222844	WITHOUT_CLASSIFICATION	1.8090777155885485E-6	DESIGN
get meta's from <joined-subclass>	WITHOUT_CLASSIFICATION	0.9999916326236555	WITHOUT_CLASSIFICATION	8.36737634447243E-6	DESIGN
parameters on the property mapping should override parameters in the typedef	WITHOUT_CLASSIFICATION	0.9999879540624277	WITHOUT_CLASSIFICATION	1.2045937572374819E-5	DESIGN
fetch="join" overrides default laziness fetch="join" overrides default laziness	WITHOUT_CLASSIFICATION	0.9999999907834398	WITHOUT_CLASSIFICATION	9.216560248858792E-9	DESIGN
NOTE SPECIAL CASE: default to join and non-lazy for the "second join" of the many-to-many	WITHOUT_CLASSIFICATION	0.9999999668344929	WITHOUT_CLASSIFICATION	3.316550708492219E-8	DESIGN
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.999999866210236	WITHOUT_CLASSIFICATION	1.3378976416656368E-7	DESIGN
state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999989103063311	WITHOUT_CLASSIFICATION	1.0896936688912707E-5	DESIGN
void setComponentTuplizerFactory(ComponentTuplizerFactory componentTuplizerFactory) { this.componentTuplizerFactory = componentTuplizerFactory; }	WITHOUT_CLASSIFICATION	0.9999458566786116	WITHOUT_CLASSIFICATION	5.414332138837216E-5	DESIGN
element index -> id	WITHOUT_CLASSIFICATION	0.9999998827270767	WITHOUT_CLASSIFICATION	1.1727292324145008E-7	DESIGN
note that it might be better to iterate the snapshot but this is safe, assuming the user implements equals() properly, as required by the Set contract!	WITHOUT_CLASSIFICATION	0.9729029388223466	WITHOUT_CLASSIFICATION	0.027097061177653346	DESIGN
collections detect changes made via their public interface and mark themselves as dirty as a performance optimization	WITHOUT_CLASSIFICATION	0.9998383592557247	WITHOUT_CLASSIFICATION	1.616407442752846E-4	DESIGN
essentially, if the real session is closed allow any method call to pass through since the real session will complain by throwing an appropriate exception; NOTE that allowing close() above has the same basic effect, but we capture that there simply to perform the unbind...	WITHOUT_CLASSIFICATION	0.9999999999725635	WITHOUT_CLASSIFICATION	2.743649016866115E-11	DESIGN
The default SQLExceptionConverter for all dialects is based on SQLState since SQLErrorCode is extremely vendor-specific. Specific Dialects may override to return whatever is most appropriate for that vendor.	WITHOUT_CLASSIFICATION	0.9999999997816698	WITHOUT_CLASSIFICATION	2.1833020464735891E-10	DESIGN
only necessary for postgre < 7.4 http:anoncvs.postgresql.org/cvsweb.cgi/pgsql/doc/src/sgml/ref/create_sequence.sgml	WITHOUT_CLASSIFICATION	0.9999999542357512	WITHOUT_CLASSIFICATION	4.5764248802735955E-8	DESIGN
select topic, syntax from information_schema.help where section like 'Function%' order by section, topic see also -> http:www.h2database.com/html/functions.html	WITHOUT_CLASSIFICATION	0.999999999916438	WITHOUT_CLASSIFICATION	8.356204106366632E-11	DESIGN
registerColumnType(Types.VARBINARY, "CHARACTER($l)"); registerColumnType(Types.BLOB, "CHARACTER($l)" ); For use prior to CP 11.0 registerColumnType(Types.CLOB, "CHARACTER($l)" );	WITHOUT_CLASSIFICATION	0.9999982959167081	WITHOUT_CLASSIFICATION	1.7040832920249704E-6	DESIGN
the BLOB type requires a size arguement - this defaults to bytes - no arg defaults to 1 whole byte! other argument mods include K - kilobyte, M - megabyte, G - gigabyte. refer to the PBdevelopers guide for more info.	WITHOUT_CLASSIFICATION	0.9951810002538082	DESIGN	0.004818999746191844	WITHOUT_CLASSIFICATION
We must return a valid RDMS/RSA command from this method to prevent RDMS/RSA from issuing ERROR 400	WITHOUT_CLASSIFICATION	0.9945477764054862	WITHOUT_CLASSIFICATION	0.0054522235945138175	DESIGN
Oracle driver reports to support getGeneratedKeys(), but they only support the version taking an array of the names of the columns to be returned (via its RETURNING clause). No other driver seems to support this overloaded version.	WITHOUT_CLASSIFICATION	0.9998250730693938	WITHOUT_CLASSIFICATION	1.7492693060621505E-4	DESIGN
add the comment nest the main query in an outer select add the rownnumber bit into the outer query select list	WITHOUT_CLASSIFICATION	0.9999952882189297	WITHOUT_CLASSIFICATION	4.711781070367086E-6	DESIGN
You may still have other ResultSets or update counts left to process here but you can't do it now or the ResultSet you just got will be closed	WITHOUT_CLASSIFICATION	0.9999999810560395	WITHOUT_CLASSIFICATION	1.8943960491790467E-8	DESIGN
Note: For object <-> SQL datatype mappings see: Configuration Manager | Advanced | SQL | System DDL Datatype Mappings TBDregisterColumnType(Types.BINARY, "binary($1)"); changed 08-11-2005, jsl	WITHOUT_CLASSIFICATION	0.9999974291043171	WITHOUT_CLASSIFICATION	2.570895682898112E-6	DESIGN
TRIM(end_keyword string-expression-1 FROM string-expression-2) use Hibernate implementation "From" is one of the parameters they pass in position ?3 registerFunction( "trim", new SQLFunctionTemplate(Hibernate.STRING, "trim(?1 ?2 from ?3)") );	WITHOUT_CLASSIFICATION	0.9999999999956258	WITHOUT_CLASSIFICATION	4.374108473622117E-12	DESIGN
Whether this dialect has an Identity clause added to the data type or a completely seperate identity data type	WITHOUT_CLASSIFICATION	0.9998432573301187	WITHOUT_CLASSIFICATION	1.567426698812651E-4	DESIGN
According to both the ANSI-SQL and JPA specs, trim takes a variable number of parameters between 1 and 4. at least one paramer (trimSource) is required. From the SQL spec: <trim function> ::= TRIM <left paren> <trim operands> <right paren> <trim operands> ::= [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> <trim specification> ::= LEADING | TRAILING | BOTH If <trim specification> is omitted, BOTH is assumed. If <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999999971156428	WITHOUT_CLASSIFICATION	2.8843571261497613E-9	DESIGN
/ Prepare persisters and link them up with their cache region/access-strategy	WITHOUT_CLASSIFICATION	0.9996580955824026	WITHOUT_CLASSIFICATION	3.419044175974221E-4	DESIGN
Named Queries:	WITHOUT_CLASSIFICATION	0.9999752226004995	WITHOUT_CLASSIFICATION	2.4777399500482497E-5	DESIGN
this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.5521954698626775	DESIGN	0.4478045301373225	WITHOUT_CLASSIFICATION
does not handle arrays (thats ok, cos they can't be lazy) or newly instantiated collections, so we can do the cast	WITHOUT_CLASSIFICATION	0.994317069775348	WITHOUT_CLASSIFICATION	0.005682930224651989	DESIGN
collection deletions are a special case since update() can add deletions of collections not loaded by the session.	WITHOUT_CLASSIFICATION	0.9999999997867581	WITHOUT_CLASSIFICATION	2.1324185768556513E-10	DESIGN
we can do the cast since orphan-delete does not apply to: 1. newly instantiated collections 2. arrays (we can't track orphans for detached arrays)	WITHOUT_CLASSIFICATION	0.9996752758566589	WITHOUT_CLASSIFICATION	3.2472414334109423E-4	DESIGN
if the natural-id is marked as non-mutable, it is not retrieved during a normal database-snapshot operation...	WITHOUT_CLASSIFICATION	0.9999896186961067	WITHOUT_CLASSIFICATION	1.0381303893292972E-5	DESIGN
watch out for a case where old is still referenced somewhere in the object graph! (which is a user error)	WITHOUT_CLASSIFICATION	0.9996983734207613	WITHOUT_CLASSIFICATION	3.016265792388074E-4	DESIGN
slice, to get the columns for this component property	WITHOUT_CLASSIFICATION	0.9996461151958506	WITHOUT_CLASSIFICATION	3.538848041494494E-4	DESIGN
int result = 17; result = 37 result + type.hashCode(); result = 37 result + ( value==null ? 0 : value.hashCode() ); return result;	WITHOUT_CLASSIFICATION	0.9999999690991673	WITHOUT_CLASSIFICATION	3.0900832690733424E-8	DESIGN
The CollectionEntry.isReached() stuff is just to detect any silly users who set up circular or shared references between/to collections.	WITHOUT_CLASSIFICATION	0.999999237634627	WITHOUT_CLASSIFICATION	7.623653729922358E-7	DESIGN
detached collection wrappers that get found + reattached during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999999159837358	WITHOUT_CLASSIFICATION	8.401626410723178E-8	DESIGN
The unique property value represented here may or may not be serializable, so we do an explicit check here in order to generate a better error message	WITHOUT_CLASSIFICATION	0.6638935788004027	DESIGN	0.3361064211995974	WITHOUT_CLASSIFICATION
if the version of a newly instantiated object is not the same as the version seed value, use that as the unsaved-value	WITHOUT_CLASSIFICATION	0.99991047803907	WITHOUT_CLASSIFICATION	8.952196093004315E-5	DESIGN
ie. we never have to null out a reference to an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999983880961388	WITHOUT_CLASSIFICATION	1.6119038611562656E-6	DESIGN
ignore this row, the collection is in process of being loaded somewhere further "up" the stack	WITHOUT_CLASSIFICATION	0.9999999411109999	WITHOUT_CLASSIFICATION	5.8889000171899175E-8	DESIGN
Entity load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ currently, not yet used...	WITHOUT_CLASSIFICATION	0.9967701527334993	WITHOUT_CLASSIFICATION	0.0032298472665005682	DESIGN
should be ok performance-wise to generate new delegate instances for each request since these are locally stack-scoped. Besides, it makes the code much easier to read than the old TransactionHelper stuff...	WITHOUT_CLASSIFICATION	0.8551408588329408	WITHOUT_CLASSIFICATION	0.1448591411670593	DESIGN
this implementation is supposed to tolerate incorrect unsaved-value mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9996697136423354	WITHOUT_CLASSIFICATION	3.302863576646741E-4	DESIGN
this implementation is supposed to tolerate incorrect unsaved-value mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9996697136423354	WITHOUT_CLASSIFICATION	3.302863576646741E-4	DESIGN
wrap up any new collections directly referenced by the object or its components	WITHOUT_CLASSIFICATION	0.9999999947829428	WITHOUT_CLASSIFICATION	5.2170572703005646E-9	DESIGN
remove any snapshot, not really for memory management purposes, but rather because it might now be stale, and there is no longer any EntityEntry to take precedence This is now handled by removeEntity() session.getPersistenceContext().removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999794945125142	WITHOUT_CLASSIFICATION	2.0505487485769794E-5	DESIGN
skip this check for composite-ids relating to dom4j entity-mode; alternatively, we could add a check to make sure the incoming id value is an instance of Element...	WITHOUT_CLASSIFICATION	0.6213194915153111	WITHOUT_CLASSIFICATION	0.378680508484689	DESIGN
upgrade the lock if necessary: lock(result, lockMode);	WITHOUT_CLASSIFICATION	0.9860907832128009	WITHOUT_CLASSIFICATION	0.013909216787199034	DESIGN
now, any collections that are initialized inside this block do not get updated - they are ignored until the next flush	WITHOUT_CLASSIFICATION	0.9999732819789924	WITHOUT_CLASSIFICATION	2.6718021007533465E-5	DESIGN
we must clone embedded composite identifiers, or we will get back the same instance that we pass in	WITHOUT_CLASSIFICATION	0.9999914029325555	WITHOUT_CLASSIFICATION	8.597067444469569E-6	DESIGN
Sub-insertions should occur before containing insertion so Try to do the callback now	WITHOUT_CLASSIFICATION	0.9999872811631639	WITHOUT_CLASSIFICATION	1.271883683617437E-5	DESIGN
the entity is not associated with the session, so try interceptor and unsaved-value	WITHOUT_CLASSIFICATION	0.9999984629546577	WITHOUT_CLASSIFICATION	1.5370453424096457E-6	DESIGN
scan the query string for class names appearing in the from clause and replace with all persistent implementors of the class/interface, returning multiple query strings (make sure we don't pick up a class in the select clause!)	WITHOUT_CLASSIFICATION	0.8814592356439116	DESIGN	0.11854076435608835	WITHOUT_CLASSIFICATION
save() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996575557846	WITHOUT_CLASSIFICATION	3.4244421545077593E-7	DESIGN
evict() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999987077253449	WITHOUT_CLASSIFICATION	1.2922746550543507E-6	DESIGN
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9959228635333911	WITHOUT_CLASSIFICATION	0.004077136466608898	DESIGN
if it is an uninitialized proxy, pointing with this session, then when it is accessed, the underlying instance will be "contained"	WITHOUT_CLASSIFICATION	0.9999999845870772	WITHOUT_CLASSIFICATION	1.541292278515121E-8	DESIGN
Generate an explicit join for the root dot node. The implied joins will be collected and passed up to the root dot node.	WITHOUT_CLASSIFICATION	0.9999999668352106	WITHOUT_CLASSIFICATION	3.3164789384358036E-8	DESIGN
A session is considered to contain an entity only if the entity has an entry in the session's persistence context and the entry reports that the entity has not been removed	WITHOUT_CLASSIFICATION	0.9999927623903524	WITHOUT_CLASSIFICATION	7.237609647632927E-6	DESIGN
Does the collection referenced by this FromElement specify an order-by attribute? If so, attach it to the query's order-by	WITHOUT_CLASSIFICATION	0.9999919650411837	WITHOUT_CLASSIFICATION	8.03495881618184E-6	DESIGN
... and the token could be an identifer and the error is a mismatched token error ...	WITHOUT_CLASSIFICATION	0.9981937429684686	WITHOUT_CLASSIFICATION	0.0018062570315313694	DESIGN
If a where clause was specified in the update/delete query, use it to limit the returned ids here...	WITHOUT_CLASSIFICATION	0.9999999368281501	WITHOUT_CLASSIFICATION	6.31718499290971E-8	DESIGN
int parameterStart = getWalker().getNumberOfParametersInSetClause(); List allParams = getIdSelectParameterSpecifications(); Iterator whereParams = allParams.subList( parameterStart, allParams.size() ).iterator();	WITHOUT_CLASSIFICATION	0.9999999435821638	WITHOUT_CLASSIFICATION	5.641783615009077E-8	DESIGN
Default implementation: If this node has a data type, and that data type is not an association, then this is scalar.	WITHOUT_CLASSIFICATION	0.9999970434089619	WITHOUT_CLASSIFICATION	2.9565910380930157E-6	DESIGN
Resolve the LHS fully, generate implicit joins. Pass in the property name so that the resolver can discover foreign key (id) properties.	WITHOUT_CLASSIFICATION	0.9998770960332298	WITHOUT_CLASSIFICATION	1.229039667701398E-4	DESIGN
If the propertyType is null and there isn't a parent, just stop now... there was a problem resolving the node anyway.	WITHOUT_CLASSIFICATION	0.9707889861168014	WITHOUT_CLASSIFICATION	0.029211013883198567	DESIGN
We do not look for an existing join on the same path, because it makes sense to join twice on the same collection role	WITHOUT_CLASSIFICATION	0.9999991486912826	WITHOUT_CLASSIFICATION	8.513087173752523E-7	DESIGN
our parent is another dot node, meaning we are being further dereferenced. thus we need to generate a join unless the parent refers to the associated entity's PK (because 'our' table would know the FK).	WITHOUT_CLASSIFICATION	0.9997475435865807	WITHOUT_CLASSIFICATION	2.524564134192869E-4	DESIGN
public final Currency getCurrency(int col) throws HibernateException {return (Currency) get(col);}	WITHOUT_CLASSIFICATION	0.9998173285640632	WITHOUT_CLASSIFICATION	1.826714359368441E-4	DESIGN
here, we have two possibilities: 1) the property-name matches the explicitly identifier property name 2) the property-name matches the implicit 'id' property name	WITHOUT_CLASSIFICATION	0.997729201251084	WITHOUT_CLASSIFICATION	0.002270798748916092	DESIGN
Set the unresolved path in this node and the parent. Set the text for the parent.	WITHOUT_CLASSIFICATION	0.999929675439287	WITHOUT_CLASSIFICATION	7.03245607129289E-5	DESIGN
Get the first child to be considered. Sub-classes may do this differently in order to skip nodes that are not select expressions (e.g. DISTINCT).	WITHOUT_CLASSIFICATION	0.999997587808147	WITHOUT_CLASSIFICATION	2.41219185303219E-6	DESIGN
If this is an entity and the property is the identifier property, then use getIdentifierType(). Note that the propertyName.equals( propertyPath ) checks whether we have a component key reference, where the component class property name is the same as the entity id property name; if the two are not equal, this is the case and we'd need to "fall through" to using the property mapping.	WITHOUT_CLASSIFICATION	0.9999999996613863	WITHOUT_CLASSIFICATION	3.386136568762489E-10	DESIGN
for a subquery, the alias to use depends on a few things (we already know this is not an overall SELECT): 1) if this FROM_ELEMENT represents a correlation to the outer-most query A) if the outer query represents a multi-table persister, we need to use the given alias in anticipation of one of the multi-table executors being used (as this subquery will actually be used in the "id select" phase of that multi-table executor) B) otherwise, we need to use the persister's table name as the column qualification 2) otherwise (not correlated), use the given alias	WITHOUT_CLASSIFICATION	0.9999994180581104	WITHOUT_CLASSIFICATION	5.81941889615351E-7	DESIGN
Not a collection? Return the entity property mapping.	WITHOUT_CLASSIFICATION	0.9975367047492408	WITHOUT_CLASSIFICATION	0.0024632952507591703	DESIGN
collection of <many-to-any/> mappings... used to circumvent the component-collection check below...	WITHOUT_CLASSIFICATION	0.9997648533085289	WITHOUT_CLASSIFICATION	2.3514669147120832E-4	DESIGN
Otherwise, the destination node was implied by the FROM clause and the FROM clause processor will automatically add it in the right place.	WITHOUT_CLASSIFICATION	0.9999994520773463	WITHOUT_CLASSIFICATION	5.479226537555324E-7	DESIGN
If the first identifier in the path referrs to the class alias (not the class name), then this is a correlated subselect. If it's a correlated sub-select, use the existing table alias. Otherwise generate a new one.	WITHOUT_CLASSIFICATION	0.9998595266257273	WITHOUT_CLASSIFICATION	1.4047337427262606E-4	DESIGN
check to see if our "propPath" actually represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999991447471679	WITHOUT_CLASSIFICATION	8.552528320646242E-7	DESIGN
An ident node can represent an index expression if the ident represents a naked property ref Note: this makes the assumption (which is currently the case in the hql-sql grammar) that the ident is first resolved itself (addrExpr -> resolve()). The other option, if that changes, is to call resolve from here; but it is currently un-needed overhead.	WITHOUT_CLASSIFICATION	0.9999992822134303	WITHOUT_CLASSIFICATION	7.177865696827097E-7	DESIGN
This uses a PathExpressionParser but notice that compound paths are not valid, only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9999717485165401	WITHOUT_CLASSIFICATION	2.825148345987682E-5	DESIGN
If this is an implied join in a FROM clause, then use ANSI-style joining, and set the flag on the FromElement that indicates that it was implied in the FROM clause itself.	WITHOUT_CLASSIFICATION	0.9999966990488487	WITHOUT_CLASSIFICATION	3.300951151279472E-6	DESIGN
origin.addDestination(destination); Add the query spaces.	WITHOUT_CLASSIFICATION	0.9999821188682733	WITHOUT_CLASSIFICATION	1.788113172671772E-5	DESIGN
For an explicit many-to-many relationship, add a second join from the intermediate (many-to-many) table to the destination table. Also, make sure that the from element's idea of the destination is the destination table.	WITHOUT_CLASSIFICATION	0.9999999996620547	WITHOUT_CLASSIFICATION	3.3794537370314125E-10	DESIGN
Reset the node type, because the rest of the system is expecting FROM_FRAGMENT, all we wanted was for the factory to create the right sub-class. This might get reset again later on anyway to make the SQL generation simpler.	WITHOUT_CLASSIFICATION	0.9999976957815409	WITHOUT_CLASSIFICATION	2.3042184591538416E-6	DESIGN
explicit = true; This is an explict Select. ArrayList sqlResultTypeList = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999999835795917	WITHOUT_CLASSIFICATION	1.6420408279843624E-8	DESIGN
sqlResultTypeList.add( type ); Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999969652185524	WITHOUT_CLASSIFICATION	3.0347814475094627E-6	DESIGN
If the expression list has exactly one expression, and the type of the expression is a collection then this might be a collection function, such as index(c) or size(c).	WITHOUT_CLASSIFICATION	0.9999840883929284	WITHOUT_CLASSIFICATION	1.591160707170454E-5	DESIGN
Need to parse off the column qualifiers; this is assuming (which is true as of now) that this is only used from update and delete HQL statement parsing	WITHOUT_CLASSIFICATION	0.9999920299679487	WITHOUT_CLASSIFICATION	7.970032051396691E-6	DESIGN
for regression testing against output from the old parser... found it easiest to simply reorder the FromElements here into ascending order in terms of injecting them into the resulting sql ast in orders relative to those expected by the old parser; this is definitely another of those "only needed for regression purposes". The SyntheticAndFactory, then, simply injects them as it encounters them.	WITHOUT_CLASSIFICATION	0.9999999999918352	WITHOUT_CLASSIFICATION	8.16478186303415E-12	DESIGN
The uber-rule here is that we need to include subclass joins if the FromElement is in any way dereferenced by a property from the subclass table; otherwise we end up with column references qualified by a non-existent table reference in the resulting SQL...	WITHOUT_CLASSIFICATION	0.9999706612307752	WITHOUT_CLASSIFICATION	2.9338769224858953E-5	DESIGN
classic translator does not support collection of ordinal param metadata	WITHOUT_CLASSIFICATION	0.9994519169901867	WITHOUT_CLASSIFICATION	5.480830098132995E-4	DESIGN
The following variables are stacks that keep information about each subexpression in the list of nested subexpressions we are currently processing.	WITHOUT_CLASSIFICATION	0.9972301463420038	WITHOUT_CLASSIFICATION	0.0027698536579961524	DESIGN
The loop ensures atomicity of the select + update even for no transaction or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999989469061593	WITHOUT_CLASSIFICATION	1.053093840693321E-6	DESIGN
should not be able to reach last without maxPosition being set unless there are no results	WITHOUT_CLASSIFICATION	0.9999999998529355	WITHOUT_CLASSIFICATION	1.470644365005998E-10	DESIGN
we found it in the temp PC. Should indicate we are in the midst of processing a result set containing eager fetches via join fetch	WITHOUT_CLASSIFICATION	0.9999999430798291	WITHOUT_CLASSIFICATION	5.692017103316692E-8	DESIGN
do not use proxiesByKey, since not all proxies that point to this session's instances are in that collection!	WITHOUT_CLASSIFICATION	0.9883509078631075	WITHOUT_CLASSIFICATION	0.01164909213689252	DESIGN
if there is no TM configured, we will not be able to access the javax.transaction.Transaction object in order to register a synch anyway.	WITHOUT_CLASSIFICATION	0.9521631073129544	WITHOUT_CLASSIFICATION	0.04783689268704563	DESIGN
Since the result set cursor is always left at the first physical row after the "last processed", we need to jump back one position to get the key value we are interested in skipping	WITHOUT_CLASSIFICATION	0.9999999986491538	WITHOUT_CLASSIFICATION	1.3508462521210834E-9	DESIGN
true if this is a query and we are loading multiple instances of the same collection role otherwise this is a CollectionInitializer and we are loading up a single collection or batch	WITHOUT_CLASSIFICATION	0.9992286676138961	WITHOUT_CLASSIFICATION	7.713323861039357E-4	DESIGN
we don't need to worry about existing version being uninitialized because this block isn't called by a re-entrant load (re-entrant loads _always_ have lock mode NONE)	WITHOUT_CLASSIFICATION	0.9999999857876901	WITHOUT_CLASSIFICATION	1.4212309960069732E-8	DESIGN
add temp entry so that the next step is circular-reference safe - only needed because some types don't take proper advantage of two-phase-load (esp. components)	WITHOUT_CLASSIFICATION	0.9999999830417658	WITHOUT_CLASSIFICATION	1.6958234178571255E-8	DESIGN
assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999997654340518	WITHOUT_CLASSIFICATION	2.345659482720903E-7	DESIGN
log a message about potential connection leaks	WITHOUT_CLASSIFICATION	0.9999983245202128	WITHOUT_CLASSIFICATION	1.6754797872099421E-6	DESIGN
ps.close(); just close it; do NOT try to return it to the pool! NOTE: early exit!	WITHOUT_CLASSIFICATION	0.9999988896943136	WITHOUT_CLASSIFICATION	1.110305686442801E-6	DESIGN
this has been shown to happen occasionally in rare cases when using a transaction manager + transaction-timeout where the timeout calls back through Hibernate's registered transaction synchronization on a separate "reaping" thread. In cases where that reaping thread executes through this block at the same time the main application thread does we can get into situations where these CMEs occur. And though it is not "allowed" per-se, the end result without handling it specifically is infinite looping. So here, we simply break the loop	WITHOUT_CLASSIFICATION	0.9999999997806541	WITHOUT_CLASSIFICATION	2.193458791207436E-10	DESIGN
unfortunately this stuff can't be cached because it is per-invocation, not constant for the QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9998846192761065	WITHOUT_CLASSIFICATION	1.1538072389344882E-4	DESIGN
can't cache this stuff either (per-invocation) we are given a map of user-alias -> lock mode create a new map of sql-alias -> lock mode	WITHOUT_CLASSIFICATION	0.9999993171316273	WITHOUT_CLASSIFICATION	6.828683728479967E-7	DESIGN
don't create a unique key, 'cos some databases don't like a UK on nullable columns getCollectionTable().createUniqueKey( getIdentifier().getConstraintColumns() );	WITHOUT_CLASSIFICATION	0.9999997510578827	WITHOUT_CLASSIFICATION	2.4894211722179506E-7	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993567583229	WITHOUT_CLASSIFICATION	6.432416772407007E-7	DESIGN
isSet = collection.isSet(); isSorted = collection.isSorted();	WITHOUT_CLASSIFICATION	0.9999999143316423	WITHOUT_CLASSIFICATION	8.566835776686497E-8	DESIGN
lists, arrays sets, maps, bags	WITHOUT_CLASSIFICATION	0.9999998175798719	WITHOUT_CLASSIFICATION	1.824201280604065E-7	DESIGN
we finish all the "removes" first to take care of possible unique constraints and so that we can take better advantage of batching	WITHOUT_CLASSIFICATION	0.9999996494311829	WITHOUT_CLASSIFICATION	3.5056881711566165E-7	DESIGN
use a combination of foreign key columns and pk columns, since the ordering of removal and addition is not guaranteed when a child moves from one parent to another	WITHOUT_CLASSIFICATION	0.9951416355923639	WITHOUT_CLASSIFICATION	0.004858364407636097	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993567583229	WITHOUT_CLASSIFICATION	6.432416772407007E-7	DESIGN
information about properties of this class, including inherited properties (only really needed for updatable/insertable properties)	WITHOUT_CLASSIFICATION	0.9999995331890128	WITHOUT_CLASSIFICATION	4.6681098732287923E-7	DESIGN
all this only really needs to consider properties of this class, not its subclasses, but since we are reusing code used for sequential selects, we use the subclass closure	WITHOUT_CLASSIFICATION	0.9999999215989493	WITHOUT_CLASSIFICATION	7.840105062780413E-8	DESIGN
Here we render the select column list based on the properties defined as being generated. For partial component generation, we currently just re-select the whole component rather than trying to handle the individual generated portions.	WITHOUT_CLASSIFICATION	0.9999846026268681	WITHOUT_CLASSIFICATION	1.539737313196935E-5	DESIGN
this is the root (versioned) table, and we are using version-based optimistic locking; if we are not updating the version, also don't check it (unless this is a "generated" version column)!	WITHOUT_CLASSIFICATION	0.999999601484785	WITHOUT_CLASSIFICATION	3.985152150613382E-7	DESIGN
optimistic-lock="all", include all updatable properties optimistic-lock="dirty", include all properties we are updating this time	WITHOUT_CLASSIFICATION	0.9999970840633389	WITHOUT_CLASSIFICATION	2.9159366611497307E-6	DESIGN
this property belongs to the table, and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9981224706645276	WITHOUT_CLASSIFICATION	0.0018775293354723274	DESIGN
check to see if the connection is in auto-commit mode (no connection means aggressive connection release outside a JTA transaction context, so MUST be autocommit mode)	WITHOUT_CLASSIFICATION	0.9999997769730742	WITHOUT_CLASSIFICATION	2.230269259122002E-7	DESIGN
need to treat this as if it where optimistic-lock="all" (dirty does not make sense); first we need to locate the "loaded" state Note, it potentially could be a proxy, so perform the location the safe way...	WITHOUT_CLASSIFICATION	0.9996797716177462	WITHOUT_CLASSIFICATION	3.202283822537648E-4	DESIGN
we always assume an instance with a null identifier or no identifier property is unsaved!	WITHOUT_CLASSIFICATION	0.9999954093869502	WITHOUT_CLASSIFICATION	4.5906130497521305E-6	DESIGN
Need to use the identifier type of the collection owner since the incoming is value is actually the owner's id. Using the collection's key type causes problems with property-ref keys...	WITHOUT_CLASSIFICATION	0.9999959988731576	WITHOUT_CLASSIFICATION	4.001126842434217E-6	DESIGN
allow any identifier quoted with backtick only recognizes identifiers beginning with a letter	WITHOUT_CLASSIFICATION	0.9999958105049233	WITHOUT_CLASSIFICATION	4.189495076718366E-6	DESIGN
following doesn't handle (null, not null) but unnecessary since this would mean all rows	WITHOUT_CLASSIFICATION	0.9769488926715324	WITHOUT_CLASSIFICATION	0.023051107328467584	DESIGN
IMPL NOTE : due to the delayed population of setters (setters cached for performance), we really cannot pro0perly define equality for this transformer	WITHOUT_CLASSIFICATION	0.9999588661806985	WITHOUT_CLASSIFICATION	4.113381930150974E-5	DESIGN
we need to dirty check collections, since they can cause an owner version number increment	WITHOUT_CLASSIFICATION	0.999990443710699	WITHOUT_CLASSIFICATION	9.55628930102282E-6	DESIGN
return the id, so we can use it to reset the proxy id return result;	WITHOUT_CLASSIFICATION	0.9999946532478933	WITHOUT_CLASSIFICATION	5.346752106746236E-6	DESIGN
optimizer = getFactory().getSettings().getBytecodeProvider().getReflectionOptimizer( mappedClass, getterNames, setterNames, propTypes );	WITHOUT_CLASSIFICATION	0.9999557853582237	WITHOUT_CLASSIFICATION	4.421464177621908E-5	DESIGN
cache the actual id of the object, not the value of the property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999959246591243	WITHOUT_CLASSIFICATION	4.075340875717219E-6	DESIGN
We now have the value of the property-ref we reference. However, we need to dig a little deeper, as that property might also be an entity type, in which case we need to resolve its identitifier	WITHOUT_CLASSIFICATION	0.9999998806127613	WITHOUT_CLASSIFICATION	1.1938723870100494E-7	DESIGN
Retrieve the value of the designated column in the current row of this ResultSet object as a java.io.Reader object	WITHOUT_CLASSIFICATION	0.999999691357698	WITHOUT_CLASSIFICATION	3.086423020540745E-7	DESIGN
not absolutely necessary, but helps for some equals()/hashCode() implementations	WITHOUT_CLASSIFICATION	0.9998963698586503	WITHOUT_CLASSIFICATION	1.036301413497188E-4	DESIGN
this should be a call to resolve(), not resolveIdentifier(), 'cos it might be a property-ref, and we did not cache the referenced value	WITHOUT_CLASSIFICATION	0.9718891760739302	WITHOUT_CLASSIFICATION	0.02811082392606976	DESIGN
If we have <tt>not-found="ignore"</tt> association mapped to a formula, we always need to dirty check it, so we can update the second-level cache	WITHOUT_CLASSIFICATION	0.9999604266364123	WITHOUT_CLASSIFICATION	3.9573363587672335E-5	DESIGN
can't just return null here, since that would cause an owning component to become null	WITHOUT_CLASSIFICATION	0.9999998055794567	WITHOUT_CLASSIFICATION	1.944205433537643E-7	DESIGN
for arrays, replaceElements() may return a different reference, since the array length might not match	WITHOUT_CLASSIFICATION	0.999999961057664	WITHOUT_CLASSIFICATION	3.89423360797294E-8	DESIGN
actual cache of the entries. soft references are used for both the keys and the values here since the values pertaining to the MRU entries are kept in a seperate hard reference cache (to avoid their enqueuement/garbage-collection).	WITHOUT_CLASSIFICATION	0.9999997236846946	WITHOUT_CLASSIFICATION	2.763153054719116E-7	DESIGN
as soon as we encounter our first letter, return the substring from that position	WITHOUT_CLASSIFICATION	0.999999999918552	WITHOUT_CLASSIFICATION	8.144789465310933E-11	DESIGN
Note : expected in the syntax: type=listenerClass ({sep}type=listenerClass) where {sep} is any whitespace or comma	WITHOUT_CLASSIFICATION	0.9999999941604002	WITHOUT_CLASSIFICATION	5.839599789716666E-9	DESIGN
isTransactionCallbackRegistered denotes whether any Hibernate Transaction has registered as a callback against this JDBCContext; only one such callback is allowed. Directly serializing this value causes problems with JDBCTransaction, or really any Transaction impl where the callback is local to the Transaction instance itself, since that Transaction is not serialized along with the JDBCContext. Thus we handle that fact here explicitly...	WITHOUT_CLASSIFICATION	0.9999852621595556	WITHOUT_CLASSIFICATION	1.4737840444386936E-5	DESIGN
note that for sequential scrolling, we make the assumption that the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999988811648945	WITHOUT_CLASSIFICATION	1.1188351055198717E-6	DESIGN
We call getKeyFromResultSet() here so that we can know the key value upon which to perform the breaking logic. However, it is also then called from getRowFromResultSet() which is certainly not the most efficient. But the call here is needed, and there currently is no other way without refactoring of the doQuery()/getRowFromResultSet() methods	WITHOUT_CLASSIFICATION	0.9964295697934614	WITHOUT_CLASSIFICATION	0.003570430206538514	DESIGN
This check is needed since processing leaves the cursor after the last physical row for the current logical row; thus if we are after the last physical row, this might be caused by either: 1) scrolling to the last logical row 2) scrolling past the last logical row In the latter scenario, the previous logical row really is the last logical row. In all other cases, we should process back two logical records (the current logic row, plus the previous logical row).	WITHOUT_CLASSIFICATION	0.9926282479935736	WITHOUT_CLASSIFICATION	0.007371752006426307	DESIGN
and perform the load	WITHOUT_CLASSIFICATION	0.9999995762225828	WITHOUT_CLASSIFICATION	4.237774171612054E-7	DESIGN
important: reuse the same event instances for performance!	WITHOUT_CLASSIFICATION	0.9258773371867342	WITHOUT_CLASSIFICATION	0.07412266281326586	DESIGN
this is a query and we are loading multiple instances of the same collection role	WITHOUT_CLASSIFICATION	0.9746395473460793	WITHOUT_CLASSIFICATION	0.025360452653920652	DESIGN
we found a collection element in the result set	WITHOUT_CLASSIFICATION	0.9999940270074171	WITHOUT_CLASSIFICATION	5.972992582885823E-6	DESIGN
we did not find a collection element in the result set, so we ensure that a collection is created with the owner's identifier, since what we have is an empty collection	WITHOUT_CLASSIFICATION	0.9999999985723393	WITHOUT_CLASSIFICATION	1.4276605729172157E-9	DESIGN
this is a collection initializer, so we must create a collection for each of the passed-in keys, to account for the possibility that the collection is empty and has no rows in the result set	WITHOUT_CLASSIFICATION	0.9999528804644576	WITHOUT_CLASSIFICATION	4.711953554233387E-5	DESIGN
grab its state from the ResultSet and keep it in the Session (but don't yet initialize the object itself) note that we acquire LockMode.READ even if it was not requested	WITHOUT_CLASSIFICATION	0.9999985685129857	WITHOUT_CLASSIFICATION	1.4314870142090338E-6	DESIGN
a many-to-many; decrement currentDepth here to allow join across the association table without exceeding MAX_FETCH_DEPTH (i.e. the "currentDepth - 1" bit)	WITHOUT_CLASSIFICATION	0.9994689496166983	WITHOUT_CLASSIFICATION	5.310503833017329E-4	DESIGN
if not a composite key, use "foo in (?, ?, ?)" for batching if no batch, and not a composite key, use "foo = ?"	WITHOUT_CLASSIFICATION	0.9999997223094221	WITHOUT_CLASSIFICATION	2.7769057789165165E-7	DESIGN
the user visible aliases, which are unknown to the superclass, these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999999997593634	WITHOUT_CLASSIFICATION	2.406366938578399E-10	DESIGN
first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9999997974665525	WITHOUT_CLASSIFICATION	2.0253344746755074E-7	DESIGN
first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9999997974665525	WITHOUT_CLASSIFICATION	2.0253344746755074E-7	DESIGN
it does not refer to an alias of a projection, look for a property	WITHOUT_CLASSIFICATION	0.9999805588542546	WITHOUT_CLASSIFICATION	1.944114574543265E-5	DESIGN
determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999992533165787	WITHOUT_CLASSIFICATION	7.466834212215933E-7	DESIGN
Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999994086363515	WITHOUT_CLASSIFICATION	5.913636484231622E-7	DESIGN
Translates an AST join type (i.e., the token type) into a JoinFragment.XXX join type. @param astJoinType The AST join type (from HqlSqlTokenTypes or SqlTokenTypes) @return a JoinFragment.XXX join type. @see JoinFragment @see SqlTokenTypes	WITHOUT_CLASSIFICATION	0.617477585842744	WITHOUT_CLASSIFICATION	0.38252241415725596	DESIGN
ignore	WITHOUT_CLASSIFICATION	0.9999981434368609	WITHOUT_CLASSIFICATION	1.8565631391212324E-6	DESIGN
ignore	WITHOUT_CLASSIFICATION	0.9999981434368609	WITHOUT_CLASSIFICATION	1.8565631391212324E-6	DESIGN
}	WITHOUT_CLASSIFICATION	0.9999583158345275	WITHOUT_CLASSIFICATION	4.16841654724878E-5	DESIGN
public List getCollectionAliases() { return collectionAliases; } public List getCollectionOwners() { return collectionOwners; } public List getCollectionOwnerAliases() { return collectionOwnerAliases; } public List getCollectionPersisters() { return collectionPersisters; } public Map getAlias2Persister() { return alias2Persister; } public boolean isCollectionInitializer() { return isCollectionInitializer; } public List getPersisters() { return persisters; } public Map getAlias2OwnerAlias() { return alias2OwnerAlias; } public List getScalarTypes() { return scalarTypes; } public List getScalarColumnAliases() { return scalarColumnAliases; } public List getPropertyResults() { return propertyResults; } public List getCollectionPropertyResults() { return collectionResults; } public Map getAlias2Return() { return alias2Return; }	WITHOUT_CLASSIFICATION	0.9999826805412425	WITHOUT_CLASSIFICATION	1.7319458757451354E-5	DESIGN
SQLQueryParser parser = new SQLQueryParser( sqlQuery, processor.getAlias2Persister(), processor.getAlias2Return(), aliases, collAliases, collPersisters, suffixes, collSuffixes ); sql = parser.process(); namedParameterBindPoints = parser.getNamedParameters();	WITHOUT_CLASSIFICATION	0.999999986856304	WITHOUT_CLASSIFICATION	1.3143695956682473E-8	DESIGN
include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9999922560817077	WITHOUT_CLASSIFICATION	7.743918292330582E-6	DESIGN
sqlAliasSuffixes[i] = element.getColumnAliasSuffix();	WITHOUT_CLASSIFICATION	0.9999999268054438	WITHOUT_CLASSIFICATION	7.319455614704229E-8	DESIGN
NONE, because its the requested lock mode, not the actual!	WITHOUT_CLASSIFICATION	0.9999993743986891	WITHOUT_CLASSIFICATION	6.256013108999617E-7	DESIGN
at this point we have (drivingSqlAlias) the SQL alias of the driving table corresponding to the given user alias. However, the driving table is not (necessarily) the table against which we want to apply locks. Mainly, the exception case here is joined-subclass hierarchies where we instead want to apply the lock against the root table (for all other strategies, it just happens that driving and root are the same).	WITHOUT_CLASSIFICATION	0.9999999627492328	WITHOUT_CLASSIFICATION	3.725076725784964E-8	DESIGN
the column doesnt exist at all.	WITHOUT_CLASSIFICATION	0.9999982659020458	WITHOUT_CLASSIFICATION	1.7340979541540127E-6	DESIGN
we have a mapped identifier property and the root of the incoming property path matched that identifier property	WITHOUT_CLASSIFICATION	0.9999998820546815	WITHOUT_CLASSIFICATION	1.1794531840094248E-7	DESIGN
we have an embedded composite identifier	WITHOUT_CLASSIFICATION	0.9999973617144879	WITHOUT_CLASSIFICATION	2.6382855119223857E-6	DESIGN
both many-to-one and one-to-one are represented as a Property. EntityPersister is relying on this value to determine "lazy fetch groups" in terms of field-level interception. So we need to make sure that we return true here for the case of many-to-one and one-to-one with lazy="no-proxy" impl note - lazy="no-proxy" currently forces both lazy and unwrap to be set to true. The other case we are extremely interested in here is that of lazy="proxy" where lazy is set to true, but unwrap is set to false. thus we use both here under the assumption that this return is really only ever used during persister construction to determine the lazy property/field fetch groupings. If that assertion changes then this check needs to change as well. Partially, this is an issue with the overloading of the term "lazy" here...	WITHOUT_CLASSIFICATION	0.9999305893946531	WITHOUT_CLASSIFICATION	6.941060534686208E-5	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993053229433	WITHOUT_CLASSIFICATION	6.946770566442046E-7	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993053229433	WITHOUT_CLASSIFICATION	6.946770566442046E-7	DESIGN
rootTableName = persistentClass.getRootTable().getQualifiedName( factory.getDialect(), factory.getDefaultCatalog(), factory.getDefaultSchema() );	WITHOUT_CLASSIFICATION	0.9999999542488662	WITHOUT_CLASSIFICATION	4.575113374356917E-8	DESIGN
SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999491269276568	WITHOUT_CLASSIFICATION	5.0873072343253274E-5	DESIGN
Custom sql	WITHOUT_CLASSIFICATION	0.9999940924846159	WITHOUT_CLASSIFICATION	5.90751538418612E-6	DESIGN
protected void initPropertyPaths(final String path,final Type type,final String[] columns,final String[] formulaTemplates,final Mapping factory)throws MappingException {addFormulaPropertyPath(path, type, formulaTemplates);initPropertyPaths(path, type, columns, formulaTemplates, factory);}	WITHOUT_CLASSIFICATION	0.9999795453339542	WITHOUT_CLASSIFICATION	2.0454666045871977E-5	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999578211231971	WITHOUT_CLASSIFICATION	4.217887680284372E-5	DESIGN
Custom SQL (would be better if these were private)	WITHOUT_CLASSIFICATION	0.8962604228249005	WITHOUT_CLASSIFICATION	0.10373957717509946	DESIGN
moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994712105440392	WITHOUT_CLASSIFICATION	5.287894559608078E-4	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999578211231971	WITHOUT_CLASSIFICATION	4.217887680284372E-5	DESIGN
aliases for identifier ( alias.id ); skip if the entity defines a non-id property named 'id'	WITHOUT_CLASSIFICATION	0.9999967994926748	WITHOUT_CLASSIFICATION	3.200507325173719E-6	DESIGN
decide which ResultSet to get the property value from:	WITHOUT_CLASSIFICATION	0.9996136743027955	WITHOUT_CLASSIFICATION	3.8632569720462495E-4	DESIGN
note: it is conceptually possible that a UserType could map null to a non-null value, so the following is arguable:	WITHOUT_CLASSIFICATION	0.962627762601273	WITHOUT_CLASSIFICATION	0.03737223739872693	DESIGN
the contract of EntityTuplizer.determineConcreteSubclassEntityName says that returning null is an indication that the specified entity-name (this.getEntityName) should be used.	WITHOUT_CLASSIFICATION	0.9477356290030085	DESIGN	0.05226437099699156	WITHOUT_CLASSIFICATION
Need to use the identifier type of the collection owner since the incoming is value is actually the owner's id. Using the collection's key type causes problems with property-ref keys...	WITHOUT_CLASSIFICATION	0.9999959988731576	WITHOUT_CLASSIFICATION	4.001126842434217E-6	DESIGN
cache these since they are stateless this one could even be static...	WITHOUT_CLASSIFICATION	0.9884653601911244	DESIGN	0.011534639808875553	WITHOUT_CLASSIFICATION
"as" is not in KEYWORDS	WITHOUT_CLASSIFICATION	0.9999461669161841	WITHOUT_CLASSIFICATION	5.383308381595926E-5	DESIGN
--Commented out by Inspection (12/4/04 9:10 AM): public abstract void addCondition(String alias, String[] columns, String condition);	WITHOUT_CLASSIFICATION	0.9999999727072929	WITHOUT_CLASSIFICATION	2.729270701529068E-8	DESIGN
use the id column alias	WITHOUT_CLASSIFICATION	0.9999935587043299	WITHOUT_CLASSIFICATION	6.4412956701157295E-6	DESIGN
private List aliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999999939701246	WITHOUT_CLASSIFICATION	6.029875355487394E-9	DESIGN
columns.add(columnName); aliases.add(tableAlias);	WITHOUT_CLASSIFICATION	0.9999840996714928	WITHOUT_CLASSIFICATION	1.5900328507253508E-5	DESIGN
where fragment must be empty!	WITHOUT_CLASSIFICATION	0.9954787275777369	WITHOUT_CLASSIFICATION	0.004521272422263109	DESIGN
revert to traditional hibernate behavior of setting initialPoolSize to minPoolSize unless otherwise specified with a c3p0.-style parameter.	WITHOUT_CLASSIFICATION	0.9999988473598102	WITHOUT_CLASSIFICATION	1.152640189908563E-6	DESIGN
arbitrary on clause ignored!!	WITHOUT_CLASSIFICATION	0.9999998983849008	WITHOUT_CLASSIFICATION	1.0161509920414962E-7	DESIGN
might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9992055521177016	WITHOUT_CLASSIFICATION	7.944478822984244E-4	DESIGN
might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9992055521177016	WITHOUT_CLASSIFICATION	7.944478822984244E-4	DESIGN
if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999985531207771	WITHOUT_CLASSIFICATION	1.4468792228784325E-6	DESIGN
Essentially: 1) If we have a local (Hibernate) transaction in progress and it already has the UserTransaction cached, use that UserTransaction to determine the status. 2) If a transaction manager has been located, use that transaction manager to determine the status. 3) Finally, as the last resort, try to lookup the UserTransaction via JNDI and use that to determine the status.	WITHOUT_CLASSIFICATION	0.9999998971915487	WITHOUT_CLASSIFICATION	1.0280845130400031E-7	DESIGN
package	WITHOUT_CLASSIFICATION	0.9999575291056456	WITHOUT_CLASSIFICATION	4.2470894354337264E-5	DESIGN
swallow it (the transaction _was_ successful or successfully rolled back)	WITHOUT_CLASSIFICATION	0.9999867066625273	WITHOUT_CLASSIFICATION	1.3293337472765981E-5	DESIGN
ignore it	WITHOUT_CLASSIFICATION	0.9999990904869572	WITHOUT_CLASSIFICATION	9.095130427475677E-7	DESIGN
we need to dirty check many-to-ones with not-found="ignore" in order to update the cache (not the database), since in this case a null entity reference can lose information	WITHOUT_CLASSIFICATION	0.999929359170016	WITHOUT_CLASSIFICATION	7.06408299840366E-5	DESIGN
create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999800461092176	WITHOUT_CLASSIFICATION	1.9953890782258137E-5	DESIGN
Regions can get instantiated in the course of normal work (e.g. a named query region will be created the first time the query is executed), so suspend any ongoing tx	WITHOUT_CLASSIFICATION	0.9999997198224857	WITHOUT_CLASSIFICATION	2.801775143354181E-7	DESIGN
then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9972809834387979	WITHOUT_CLASSIFICATION	0.0027190165612020274	DESIGN
Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999956572273645	WITHOUT_CLASSIFICATION	4.342772635463201E-6	DESIGN
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9964857788737406	WITHOUT_CLASSIFICATION	0.0035142211262594214	DESIGN
NOTE : this is being used from the process of shutting down a SessionFactory. Specific things to consider: (1) this clearing of the region should not propagate to other nodes on the cluster (if any); this is the cache-mode-local option bit... (2) really just trying a best effort to cleanup after ourselves; lock failures, etc are not critical here; this is the fail-silently option bit...	WITHOUT_CLASSIFICATION	0.9299565292118771	DESIGN	0.07004347078812287	WITHOUT_CLASSIFICATION
need to extract the component values and check for subtype replacements...	WITHOUT_CLASSIFICATION	0.8285246386873952	WITHOUT_CLASSIFICATION	0.17147536131260474	DESIGN
We ignore minimalPutOverride. JBossCache putForExternalRead is already about as minimal as we can get; it will promptly return if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999998809951549	WITHOUT_CLASSIFICATION	1.1900484504454965E-7	DESIGN
for now, just "re-flatten" the metamodel since this is temporary stuff anyway (HHH-1907)	WITHOUT_CLASSIFICATION	0.9946132609361136	WITHOUT_CLASSIFICATION	0.005386739063886437	DESIGN
Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9996891423735972	WITHOUT_CLASSIFICATION	3.108576264027928E-4	DESIGN
This solution would allow us to eliminate the owner arg to disassemble(), but what if the collection was null, and then later had elements added? seems unsafe session.getPersistenceContext().getCollectionEntry( (PersistentCollection) value ).getKey();	WITHOUT_CLASSIFICATION	0.8470039342579188	WITHOUT_CLASSIFICATION	0.15299606574208122	DESIGN
Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999988689547759	WITHOUT_CLASSIFICATION	1.1310452241715824E-6	DESIGN
some collections are not lazy:	WITHOUT_CLASSIFICATION	0.9999727182385129	WITHOUT_CLASSIFICATION	2.728176148704866E-5	DESIGN
Here we don't want to suspend the tx. If we do: 1) We might be caching query results that reflect uncommitted changes. No tx == no WL on cache node, so other threads can prematurely see those query results 2) No tx == immediate replication. More overhead, plus we spread issue #1 above around the cluster	WITHOUT_CLASSIFICATION	0.9999862090572923	WITHOUT_CLASSIFICATION	1.379094270779715E-5	DESIGN
return the (fully resolved) identifier value, but do not resolve to the actual referenced entity instance NOTE: the owner of the association is not really the owner of the id!	WITHOUT_CLASSIFICATION	0.999998286733267	WITHOUT_CLASSIFICATION	1.7132667330070413E-6	DESIGN
Add a zero (or quite low) timeout option so we don't block. Ignore any TimeoutException. Basically we forego caching the query result in order to avoid blocking. Reads are done with suspended tx, so they should not hold the lock for long. Not caching the query result is OK, since any subsequent read will just see the old result with its out-of-date timestamp; that result will be discarded and the db query performed again.	WITHOUT_CLASSIFICATION	0.9997642721505478	WITHOUT_CLASSIFICATION	2.3572784945225897E-4	DESIGN
Impl note: takes advantage of the fact that an escpaed single quote embedded within a quote-block can really be handled as two seperate quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9866959396031274	WITHOUT_CLASSIFICATION	0.013304060396872486	DESIGN
We have the JBCWriteMutex, so no other local thread will be trying to write this key. It's possible here some remote thread has come in and changed the values again, but since we are reading the values to write to JBC right now, we know we are writing the latest values; i.e. we don't assume that what we cached in entry.update() above is what we should write to JBC now. Our write could be redundant, i.e. we are writing what some remote thread just came in an wrote. There is a chance that yet another remote thread will update us, and we'll then overwrite that later data in JBC. But, all remote nodes will ignore that change in their localCache; the only place it will live will be in JBC, where it can only effect the initial state transfer values on newly joined nodes (i.e. populateLocalCache()).	WITHOUT_CLASSIFICATION	0.9999998586410846	WITHOUT_CLASSIFICATION	1.4135891534433604E-7	DESIGN
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999910039100046	WITHOUT_CLASSIFICATION	8.996089995405923E-6	DESIGN
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999910039100046	WITHOUT_CLASSIFICATION	8.996089995405923E-6	DESIGN
Don't need to lock the cache here, since if someone else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9985958185769969	WITHOUT_CLASSIFICATION	0.0014041814230030868	DESIGN
we need to grab the version value from the entity, otherwise we have issues with generated-version entities that may have multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9960588181639208	WITHOUT_CLASSIFICATION	0.00394118183607921	DESIGN
we need to obtain the lock before any actions are executed, since this may be an inverse="true" bidirectional association and it is one of the earlier entity actions which actually updates the database (this action is resposible for second-level cache invalidation only)	WITHOUT_CLASSIFICATION	0.9999199697455134	WITHOUT_CLASSIFICATION	8.003025448655962E-5	DESIGN
postDelete: After actually deleting a row, record the fact that the instance no longer exists on the database (needed for identity-column key generation), and remove it from the session cache	WITHOUT_CLASSIFICATION	0.9964716786297936	WITHOUT_CLASSIFICATION	0.0035283213702063435	DESIGN
intentionally empty	WITHOUT_CLASSIFICATION	0.9999791356149564	WITHOUT_CLASSIFICATION	2.0864385043616497E-5	DESIGN
todo : what else to do here?	DESIGN	0.9866227783792472	WITHOUT_CLASSIFICATION	0.013377221620752788	DESIGN
put() has nowait semantics, is this really appropriate? note that it needs to be async replication, never local or sync	DESIGN	0.9511262781620541	WITHOUT_CLASSIFICATION	0.04887372183794583	DESIGN
'hibernate.temp.use_jdbc_metadata_defaults' is a temporary magic value. The need for it is intended to be alleviated with future developement, thus it is not defined as an Environment constant... it is used to control whether we should consult the JDBC metadata to determine certain Settings default values; it is useful to not do this when the database may not be available (mainly in tools usage).	DESIGN	0.9697839239793185	DESIGN	0.030216076020681534	WITHOUT_CLASSIFICATION
TODO: get SQL rendering out of this package!	DESIGN	0.9508374302248811	DESIGN	0.049162569775119035	WITHOUT_CLASSIFICATION
TODO: get SQL rendering out of this package!	DESIGN	0.9508374302248811	DESIGN	0.049162569775119035	WITHOUT_CLASSIFICATION
todo : eventually merge this with TreeCache and just add optional opt-lock support there.	DESIGN	0.9991926997520665	WITHOUT_CLASSIFICATION	8.073002479335995E-4	DESIGN
can happen because of the multiple ways Cache.remove() can be invoked :(	DESIGN	0.9998644017679202	WITHOUT_CLASSIFICATION	1.3559823207971792E-4	DESIGN
work around the "feature" where tree cache is validating the inserted node during the next transaction. no idea...	DESIGN	0.5343656149340101	WITHOUT_CLASSIFICATION	0.46563438506599003	DESIGN
FIXME Per the RegionFactory class Javadoc, this constructor version should not be necessary. @param props The configuration properties	DESIGN	0.9939316423288488	DESIGN	0.006068357671151189	WITHOUT_CLASSIFICATION
FIXME Per the RegionFactory class Javadoc, this constructor version should not be necessary. @param props The configuration properties	DESIGN	0.9939316423288488	DESIGN	0.006068357671151189	WITHOUT_CLASSIFICATION
FIXME Hacky workaround to JBCACHE-1202	DESIGN	0.9999999996486515	DESIGN	3.5134841036355966E-10	WITHOUT_CLASSIFICATION
FIXME Hacky workaround to JBCACHE-1202	DESIGN	0.9999999996486515	DESIGN	3.5134841036355966E-10	WITHOUT_CLASSIFICATION
TODO: I considered validating TS cache config here, but decided to defer unti getTimestampsCacheInstance() in case the cache is never actually used	DESIGN	0.9996875584007923	DESIGN	3.12441599207758E-4	WITHOUT_CLASSIFICATION
TODO Is this a valid operation on a timestamps cache?	DESIGN	0.9365756064289968	DESIGN	0.06342439357100307	WITHOUT_CLASSIFICATION
TODO Is this a valid operation on a timestamps cache?	DESIGN	0.9365756064289968	DESIGN	0.06342439357100307	WITHOUT_CLASSIFICATION
TODO Why not use the timestamp in a DataVersion?	DESIGN	0.9999963834262549	DESIGN	3.616573745105069E-6	WITHOUT_CLASSIFICATION
can happen because of the multiple ways Cache.remove() can be invoked :(	DESIGN	0.9998644017679202	WITHOUT_CLASSIFICATION	1.3559823207971792E-4	DESIGN
work around the "feature" where tree cache is validating the inserted node during the next transaction. no idea...	DESIGN	0.5343656149340101	WITHOUT_CLASSIFICATION	0.46563438506599003	DESIGN
swaldman 2004-02-07: modify to allow null values to signify fall through to c3p0 PoolConfig defaults	DESIGN	0.999994178367726	WITHOUT_CLASSIFICATION	5.82163227394485E-6	DESIGN
turn hibernate.c3p0. into c3p0., so c3p0 gets a chance to see all hibernate.c3p0.	DESIGN	0.9999864146160229	WITHOUT_CLASSIFICATION	1.3585383977090136E-5	DESIGN
TODO: this bit actually has to be called after all cascades! but since identity insert is called synchronously, instead of asynchronously as other actions, it isn't	DESIGN	0.9189051486847494	DESIGN	0.0810948513152506	WITHOUT_CLASSIFICATION
TODO: reenable if we also fix the above todo	DESIGN	0.995224670525196	DESIGN	0.004775329474803965	WITHOUT_CLASSIFICATION
TODO: inefficient if that cache is just going to ignore the updated state!	DESIGN	0.9079983763633246	WITHOUT_CLASSIFICATION	0.09200162363667547	DESIGN
we may be screwed here since the collection action is about to execute and we do not know the final owner key value	DESIGN	0.9999264284411957	WITHOUT_CLASSIFICATION	7.35715588042333E-5	DESIGN
Create an action that will evict collection and entity regions based on queryspaces (table names). TODO: cache the autodetected information and pass it in instead.	DESIGN	0.9142439461884321	DESIGN	0.08575605381156788	WITHOUT_CLASSIFICATION
todo : what else to do here?	DESIGN	0.9866227783792472	WITHOUT_CLASSIFICATION	0.013377221620752788	DESIGN
todo : modify the class definition if not already transformed...	DESIGN	0.9994147101447375	WITHOUT_CLASSIFICATION	5.852898552625706E-4	DESIGN
todo : what else to do here?	DESIGN	0.9866227783792472	WITHOUT_CLASSIFICATION	0.013377221620752788	DESIGN
this is called by SessionFactory irregardless; we just disregard here; could also add a check to SessionFactory to only conditionally call start	DESIGN	0.9042590491684824	WITHOUT_CLASSIFICATION	0.09574095083151754	DESIGN
this is called by SessionFactory irregardless; we just disregard here; could also add a check to SessionFactory to only conditionally call stop	DESIGN	0.8789520375917252	WITHOUT_CLASSIFICATION	0.12104796240827481	DESIGN
TODO: to handle concurrent writes correctly, this should return a Lock to the client	DESIGN	0.9999974898675904	DESIGN	2.5101324096402515E-6	WITHOUT_CLASSIFICATION
put() has nowait semantics, is this really appropriate? note that it needs to be async replication, never local or sync	DESIGN	0.9511262781620541	WITHOUT_CLASSIFICATION	0.04887372183794583	DESIGN
TODO: to handle concurrent writes correctly, the client should pass in a Lock	DESIGN	0.9888710421320078	DESIGN	0.011128957867992098	WITHOUT_CLASSIFICATION
TODO: assumes all collections disassemble to an array!	DESIGN	0.9998238806973243	WITHOUT_CLASSIFICATION	1.7611930267579035E-4	DESIGN
TODO: reuse the PreLoadEvent	DESIGN	0.6420968677311225	WITHOUT_CLASSIFICATION	0.3579031322688776	DESIGN
todo: this was added to support initializing an entity's EntityEntry snapshot during reattach; this should be refactored to instead expose a method to assemble a EntityEntry based on this state for return.	DESIGN	0.8713318044430712	WITHOUT_CLASSIFICATION	0.12866819555692874	DESIGN
todo : what is the implication of this?	DESIGN	0.6655306215579802	DESIGN	0.3344693784420198	WITHOUT_CLASSIFICATION
use COUNT as the default. This mimics the old behavior, although NONE might be a better option moving forward in the case of callable	DESIGN	0.9983959400787988	WITHOUT_CLASSIFICATION	0.0016040599212011884	DESIGN
TODO: joinKeyColumnName & foreignKeyColumnName should be called either here or at a slightly higer level in the stack (to get all the information we need) Right now HbmBinder does not support the	DESIGN	0.9999995019813984	DESIGN	4.980186015338966E-7	WITHOUT_CLASSIFICATION
TODO: suck this into initLaziness!	DESIGN	0.9999452325686541	DESIGN	5.476743134580772E-5	WITHOUT_CLASSIFICATION
we have to set up the table later!! yuck	DESIGN	0.995384829021356	WITHOUT_CLASSIFICATION	0.004615170978644034	DESIGN
TODO: better to degrade to lazy="false" if uninstrumented	DESIGN	0.8468098768507478	WITHOUT_CLASSIFICATION	0.15319012314925212	DESIGN
todo : again, how should this work for non-pojo entities?	DESIGN	0.9488283049157568	DESIGN	0.05117169508424333	WITHOUT_CLASSIFICATION
TODO: this is a bit of copy/paste from IndexedCollection.createPrimaryKey()	DESIGN	0.9924848555574954	DESIGN	0.0075151444425044876	WITHOUT_CLASSIFICATION
This inner class implements a case statement....perhaps im being a bit over-clever here	DESIGN	0.9831564041094337	DESIGN	0.016843595890566294	WITHOUT_CLASSIFICATION
TODO: bad implementation, cos it depends upon ordering of mapping doc fixing this requires that Collection/PersistentClass gain access to the Mappings reference from Configuration (or the filterDefinitions map directly) sometime during Configuration.buildSessionFactory (after all the types/filter-defs are known and before building persisters).	DESIGN	0.9988009191691781	DESIGN	0.0011990808308218785	WITHOUT_CLASSIFICATION
use of a stringbuffer to workaround a JDK bug	DESIGN	0.9997426103862729	DESIGN	2.5738961372707763E-4	WITHOUT_CLASSIFICATION
hack/workaround as sqlquery impl depend on having a key.	DESIGN	0.9999996646712239	DESIGN	3.353287761616317E-7	WITHOUT_CLASSIFICATION
FIXME: get the PersistentClass	DESIGN	0.708343837748053	WITHOUT_CLASSIFICATION	0.291656162251947	DESIGN
FIXME: get the PersistentClass	DESIGN	0.708343837748053	WITHOUT_CLASSIFICATION	0.291656162251947	DESIGN
Icky workaround for MySQL bug:	DESIGN	0.999185162504039	DESIGN	8.148374959609698E-4	WITHOUT_CLASSIFICATION
TODO: Somehow add the newly created foreign keys to the internal collection	DESIGN	0.9192185387506309	WITHOUT_CLASSIFICATION	0.08078146124936914	DESIGN
TODO possibly relax that	DESIGN	0.5887423040868849	DESIGN	0.4112576959131151	WITHOUT_CLASSIFICATION
TODO possibly relax that	DESIGN	0.5887423040868849	DESIGN	0.4112576959131151	WITHOUT_CLASSIFICATION
TODO possibly relax that	DESIGN	0.5887423040868849	DESIGN	0.4112576959131151	WITHOUT_CLASSIFICATION
use of a stringbuffer to workaround a JDK bug	DESIGN	0.9997426103862729	DESIGN	2.5738961372707763E-4	WITHOUT_CLASSIFICATION
use a degenerated strategy for backward compatibility	DESIGN	0.9997551717699349	WITHOUT_CLASSIFICATION	2.448282300651356E-4	DESIGN
Sets can be just a view of a part of another collection. do we need to copy it to be sure it won't be changing underneath us? ie. this.set.addAll(set);	DESIGN	0.9811419116749591	WITHOUT_CLASSIFICATION	0.018858088325040892	DESIGN
note that i parameter is now unused (delete it?)	DESIGN	0.9725213895863745	DESIGN	0.027478610413625527	WITHOUT_CLASSIFICATION
just to help out during the load (ugly, i know)	DESIGN	0.9999721290450626	WITHOUT_CLASSIFICATION	2.787095493742534E-5	DESIGN
TODO : safe to interpret "map.remove(key) == null" as non-dirty?	DESIGN	0.9031738521814353	WITHOUT_CLASSIFICATION	0.09682614781856479	DESIGN
yick! need this for proper serialization/deserialization handling...	DESIGN	0.943974421381692	WITHOUT_CLASSIFICATION	0.056025578618308015	DESIGN
TODO: get SQL rendering out of this package!	DESIGN	0.9508374302248811	DESIGN	0.049162569775119035	WITHOUT_CLASSIFICATION
TODO: get SQL rendering out of this package!	DESIGN	0.9508374302248811	DESIGN	0.049162569775119035	WITHOUT_CLASSIFICATION
yuck!	DESIGN	0.9792062269821974	WITHOUT_CLASSIFICATION	0.020793773017802684	DESIGN
TODO: get SQL rendering out of this package!	DESIGN	0.9508374302248811	DESIGN	0.049162569775119035	WITHOUT_CLASSIFICATION
TODO : not sure this is correct, could not find docs on how to do this.	DESIGN	0.9999990976993974	DESIGN	9.023006025595894E-7	WITHOUT_CLASSIFICATION
HSQL has no Blob/Clob support .... but just put these here for now!	DESIGN	0.9926565730601816	WITHOUT_CLASSIFICATION	0.00734342693981849	DESIGN
does this need holdlock also? : return tableName + " with (updlock, rowlock, holdlock)";	DESIGN	0.6411525499293883	DESIGN	0.35884745007061175	WITHOUT_CLASSIFICATION
sql-server, at least needed this dropped after use; strange!	DESIGN	0.9999509488971501	WITHOUT_CLASSIFICATION	4.905110284995249E-5	DESIGN
todo : is there really any reason to kkeep trying if this fails once?	DESIGN	0.9954788485045329	WITHOUT_CLASSIFICATION	0.004521151495467062	DESIGN
TBD should this be varbinary($1)? registerColumnType(Types.VARBINARY, "binary($1)");	DESIGN	0.999749683852214	WITHOUT_CLASSIFICATION	2.5031614778601725E-4	DESIGN
is it necessary to register %exact since it can only appear in a where clause?	DESIGN	0.9970174660848172	WITHOUT_CLASSIFICATION	0.0029825339151827897	DESIGN
xmlforest requires a new kind of function constructor	DESIGN	0.9999991202874183	WITHOUT_CLASSIFICATION	8.79712581602368E-7	DESIGN
Does this dialect support the ALTER TABLE syntax?	DESIGN	0.9963193521816449	WITHOUT_CLASSIFICATION	0.003680647818355006	DESIGN
Do we need to qualify index names with the schema name?	DESIGN	0.9999771318590488	WITHOUT_CLASSIFICATION	2.2868140951132302E-5	DESIGN
Does this dialect support the UNIQUE column syntax?	DESIGN	0.9950145642405642	WITHOUT_CLASSIFICATION	0.00498543575943582	DESIGN
Does this dialect support check constraints?	DESIGN	0.9994446496662633	WITHOUT_CLASSIFICATION	5.553503337366618E-4	DESIGN
Do we need to drop constraints before dropping tables in this dialect?	DESIGN	0.9968184451581469	WITHOUT_CLASSIFICATION	0.0031815548418531255	DESIGN
Does this dialect support the FOR UPDATE syntax?	DESIGN	0.9808969354345263	WITHOUT_CLASSIFICATION	0.019103064565473647	DESIGN
Does this dialect support the Oracle-style FOR UPDATE NOWAIT syntax?	DESIGN	0.9946682956081759	WITHOUT_CLASSIFICATION	0.0053317043918240286	DESIGN
Does this dialect support FOR UPDATE OF, allowing particular rows to be locked?	DESIGN	0.993740837258661	DESIGN	0.006259162741338959	WITHOUT_CLASSIFICATION
note there is a wierd implementation in the client side	DESIGN	0.9999537182634187	WITHOUT_CLASSIFICATION	4.628173658121362E-5	DESIGN
TODO: never reached, since getTypeName() actually throws an exception!	DESIGN	0.851564813333811	WITHOUT_CLASSIFICATION	0.14843518666618907	DESIGN
todo : should we additionally check the current isolation mode explicitly?	DESIGN	0.9739954444341289	DESIGN	0.026004555565871057	WITHOUT_CLASSIFICATION
todo : remove this and just have subclasses use Isolater/IsolatedWork directly...	DESIGN	0.9857724436842739	DESIGN	0.014227556315726083	WITHOUT_CLASSIFICATION
TODO: should orphans really be deleted during lock???	DESIGN	0.9964787855050022	DESIGN	0.003521214494997786	WITHOUT_CLASSIFICATION
orphans should not be deleted during merge??	DESIGN	0.9938635462794471	WITHOUT_CLASSIFICATION	0.006136453720552905	DESIGN
orphans should not be deleted during copy??	DESIGN	0.9962840632302983	WITHOUT_CLASSIFICATION	0.0037159367697017446	DESIGN
I suppose?	DESIGN	0.9955410152025025	WITHOUT_CLASSIFICATION	0.004458984797497504	DESIGN
TODO: suck this logic into the collection!	DESIGN	0.9999633355734163	DESIGN	3.666442658372881E-5	WITHOUT_CLASSIFICATION
TODO: an alternative is to check if the owner has changed; if it hasn't then get the ID from collection.getOwner()	DESIGN	0.7566097775167239	DESIGN	0.24339022248327616	WITHOUT_CLASSIFICATION
TODO:refactor + make this method private	DESIGN	0.9718622522058414	DESIGN	0.028137747794158553	WITHOUT_CLASSIFICATION
todo : we can actually just determine this from the incoming EntityEntry-s	DESIGN	0.9994595083595276	WITHOUT_CLASSIFICATION	5.404916404724982E-4	DESIGN
TODO: Should this be an InitializeEntityEventListener??? (watch out for performance!)	DESIGN	0.9997641578185431	DESIGN	2.358421814567631E-4	WITHOUT_CLASSIFICATION
TODO: better to pass the id in as an argument?	DESIGN	0.9967324394169589	DESIGN	0.003267560583041104	WITHOUT_CLASSIFICATION
todo : potentially look at optimizing these two arrays	DESIGN	0.9892863342469533	WITHOUT_CLASSIFICATION	0.010713665753046697	DESIGN
trim done to workaround stupid oracle bug that cant handle whitespaces before a { in a sp	DESIGN	0.9999622483301058	DESIGN	3.775166989421671E-5	WITHOUT_CLASSIFICATION
trim done to workaround stupid oracle bug that cant handle whitespaces before a { in a sp	DESIGN	0.9999622483301058	DESIGN	3.775166989421671E-5	WITHOUT_CLASSIFICATION
TODO: temporary	DESIGN	0.996635484190835	DESIGN	0.003364515809164985	WITHOUT_CLASSIFICATION
TODO: not quite sure about the full implications of this!	DESIGN	0.5384173448153745	WITHOUT_CLASSIFICATION	0.4615826551846255	DESIGN
TODO: not quite sure about the full implications of this!	DESIGN	0.5384173448153745	WITHOUT_CLASSIFICATION	0.4615826551846255	DESIGN
TODO: ugly here:	DESIGN	0.9993670619101708	DESIGN	6.329380898291905E-4	WITHOUT_CLASSIFICATION
this is kinda the best we can do...	DESIGN	0.9806804607901143	WITHOUT_CLASSIFICATION	0.01931953920988575	DESIGN
TODO: this needn't exclude subclasses...	DESIGN	0.9986065524144152	DESIGN	0.0013934475855848416	WITHOUT_CLASSIFICATION
todo : need map? the prob is a proper key, right?	DESIGN	0.9512197964987608	DESIGN	0.04878020350123934	WITHOUT_CLASSIFICATION
todo : i'd much rather have this done from #endLoadingCollection(CollectionPersister,LoadingCollectionEntry)...	DESIGN	0.9993383152498668	WITHOUT_CLASSIFICATION	6.61684750133215E-4	DESIGN
todo : hack!!! NOTE : here we cleanup the load context when we have no more local LCE entries. This "works" for the time being because really only the collection load contexts are implemented. Long term, this cleanup should become part of the "close result set" processing from the (sandbox/jdbc) jdbc-container code.	DESIGN	0.9997780037287353	DESIGN	2.2199627126459628E-4	WITHOUT_CLASSIFICATION
todo : should really move this log statement to CollectionType, where this is used from...	DESIGN	0.8046273806262458	DESIGN	0.1953726193737541	WITHOUT_CLASSIFICATION
TODO : keep seperate notions of QT[] here for shallow/non-shallow queries...	DESIGN	0.9944570278454	DESIGN	0.005542972154599955	WITHOUT_CLASSIFICATION
TODO : add this info to the translator and aggregate it here...	DESIGN	0.9981583040753134	DESIGN	0.0018416959246866556	WITHOUT_CLASSIFICATION
TODO: move into collection type, so we can use polymorphism!	DESIGN	0.9961694948010703	DESIGN	0.0038305051989295778	WITHOUT_CLASSIFICATION
todo : should we check the current isolation mode explicitly?	DESIGN	0.7802459298216129	WITHOUT_CLASSIFICATION	0.21975407017838716	DESIGN
TODO: suck into event class	DESIGN	0.9999894072805338	DESIGN	1.0592719466290744E-5	WITHOUT_CLASSIFICATION
do we even really need this? the update will fail anyway....	DESIGN	0.9225201298724083	DESIGN	0.07747987012759171	WITHOUT_CLASSIFICATION
hum ... should we cascade anyway? throw an exception? fine like it is?	DESIGN	0.9999980495127357	DESIGN	1.9504872642301776E-6	WITHOUT_CLASSIFICATION
TODO: would it be better to do a refresh from db?	DESIGN	0.9999029817606339	DESIGN	9.701823936615497E-5	WITHOUT_CLASSIFICATION
TODO: we use two visitors here, inefficient!	DESIGN	0.99874623520463	DESIGN	0.001253764795369942	WITHOUT_CLASSIFICATION
this class has no proxies (so do a shortcut)	DESIGN	0.9999228554739236	WITHOUT_CLASSIFICATION	7.714452607652161E-5	DESIGN
PostLoad is needed for EJB3 TODO: reuse the PostLoadEvent...	DESIGN	0.729418807177886	WITHOUT_CLASSIFICATION	0.27058119282211407	DESIGN
TODO: put this stuff back in to read snapshot from the second-level cache (needs some extra work)	DESIGN	0.9999674062199664	DESIGN	3.25937800336389E-5	WITHOUT_CLASSIFICATION
null or brand new collection this will also (inefficiently) handle arrays, which have no snapshot, so we can't do any better	DESIGN	0.8926438714754116	WITHOUT_CLASSIFICATION	0.10735612852458838	DESIGN
TODO: is this 100% correct?	DESIGN	0.9984851312649743	DESIGN	0.0015148687350256343	WITHOUT_CLASSIFICATION
TODO: iteratively get transient entities and retry merge until one of the following conditions: 1) transientCopyCache.size() == 0 2) transientCopyCache.size() is not decreasing and copyCache.size() is not increasing TODO: find out if retrying can add entities to copyCache (don't think it can...) For now, just retry once; throw TransientObjectException if there are still any transient entities	DESIGN	0.999654678193871	DESIGN	3.453218061290452E-4	WITHOUT_CLASSIFICATION
entity name will not be available for non-POJO entities TODO: cache the entity name somewhere so that it is available to this exception	DESIGN	0.9998813314072362	DESIGN	1.1866859276370452E-4	WITHOUT_CLASSIFICATION
TODO: we should throw an exception if we really know for sure that this is a detached instance, rather than just assuming throw new StaleObjectStateException(entityName, id);	DESIGN	0.9990820772480316	DESIGN	9.179227519685131E-4	WITHOUT_CLASSIFICATION
TODO : perhaps we should additionally require that the incoming entity version be equivalent to the defined unsaved-value?	DESIGN	0.9999999324211997	DESIGN	6.757880024657149E-8	WITHOUT_CLASSIFICATION
perhaps this should be an exception since it is only ever used in the above method?	DESIGN	0.9180197095363666	DESIGN	0.08198029046363339	WITHOUT_CLASSIFICATION
Put a placeholder in entries, so we don't recurse back and try to save() the same object again. QUESTION: should this be done before onSave() is called? likewise, should it be done before onUpdate()?	DESIGN	0.9885273136460612	WITHOUT_CLASSIFICATION	0.01147268635393888	DESIGN
TODO: merge into one method!	DESIGN	0.9880183383857393	DESIGN	0.011981661614260706	WITHOUT_CLASSIFICATION
TODO: refactor to .sql package	DESIGN	0.9978353923484784	DESIGN	0.0021646076515215488	WITHOUT_CLASSIFICATION
Provides query splitting methods, which were originally in QueryTranslator. <br> TODO: This will need to be refactored at some point. @author josh	DESIGN	0.9999986282651461	DESIGN	1.3717348539755889E-6	WITHOUT_CLASSIFICATION
TODO: this is one of the ugliest and most fragile pieces of code in Hibernate....	DESIGN	0.9999899529461025	DESIGN	1.0047053897478803E-5	WITHOUT_CLASSIFICATION
todo : temporary needed because currently persister is the one that creates and renders the join fragments for inheritence hierarchies...	DESIGN	0.9287005444912452	WITHOUT_CLASSIFICATION	0.07129945550875491	DESIGN
TODO : better way?!?	DESIGN	0.9999998266795843	DESIGN	1.7332041573527125E-7	WITHOUT_CLASSIFICATION
Not possible to simply re-use the versionPropertyNode here as it causes OOM errors due to circularity :(	DESIGN	0.9999998925637281	WITHOUT_CLASSIFICATION	1.0743627198533655E-7	DESIGN
TODO:this is only needed during compilation .. can we eliminate the instvar?	DESIGN	0.9440250876291733	DESIGN	0.05597491237082666	WITHOUT_CLASSIFICATION
TODO : this is a bit dodgy, come up with a better way to check this (plus see above comment)	DESIGN	0.9999999837308025	DESIGN	1.6269197480574653E-8	WITHOUT_CLASSIFICATION
even here, if only properties mapped to the "base table" are referenced in the set and where clauses, this could be handled by the BasicDelegate. TODO : decide if it is better performance-wise to perform that check, or to simply use the MultiTableUpdateDelegate	DESIGN	0.9999999999027664	DESIGN	9.72335101258001E-11	WITHOUT_CLASSIFICATION
TODO: switch statements are always evil! We already had bugs because of forgotten token types. Use polymorphism for this!	DESIGN	0.9976056246274113	DESIGN	0.0023943753725886832	WITHOUT_CLASSIFICATION
TODO : we really need to be able to deal with component paths here also; this is difficult because the hql-sql grammar expects all those node types to be FromReferenceNodes. One potential fix here would be to convert the IntoClause to just use a FromClause/FromElement combo (as a child of the InsertStatement) and move all this logic into the InsertStatement. That's probably the easiest approach (read: least amount of changes to the grammar and code), but just doesn't feel right as then an insert would contain 2 from-clauses	DESIGN	0.9998955857914089	DESIGN	1.0441420859117369E-4	WITHOUT_CLASSIFICATION
really there are two situations where it should be ok to allow the insertion into properties defined on a superclass: 1) union-subclass with an abstract root entity 2) discrim-subclass #1 is handled already because of the fact that UnionSubclassPersister alreay always returns 0 for this call... we may want to disallow it for discrim-subclass just for consistency-sake (currently does not work anyway)...	DESIGN	0.999995870513128	WITHOUT_CLASSIFICATION	4.129486872015946E-6	DESIGN
yuck!	DESIGN	0.9792062269821974	WITHOUT_CLASSIFICATION	0.020793773017802684	DESIGN
implicit joins are always(?) ok to reuse	DESIGN	0.9391179419238656	WITHOUT_CLASSIFICATION	0.06088205807613448	DESIGN
TODO : we may also want to check that the types here map to exactly one column/JDBC-type can't think of a situation where arithmetic expression between multi-column mappings makes any sense.	DESIGN	0.9948543662189411	DESIGN	0.005145633781058877	WITHOUT_CLASSIFICATION
we do not know either type BLIND GUESS!	DESIGN	0.9991680172454515	WITHOUT_CLASSIFICATION	8.319827545484915E-4	DESIGN
TODO: used to be exprNoParens! was this needed?	DESIGN	0.9999999363430973	DESIGN	6.365690272803856E-8	WITHOUT_CLASSIFICATION
TODO: Replace this with a more elegant solution.	DESIGN	0.9999370099385392	DESIGN	6.299006146087359E-5	WITHOUT_CLASSIFICATION
TODO: Should this really return null? If not, figure out something better to do here.	DESIGN	0.999986350730996	DESIGN	1.3649269004078692E-5	WITHOUT_CLASSIFICATION
TODO: get SQL rendering out of this package!	DESIGN	0.9508374302248811	DESIGN	0.049162569775119035	WITHOUT_CLASSIFICATION
yuck!	DESIGN	0.9792062269821974	WITHOUT_CLASSIFICATION	0.020793773017802684	DESIGN
ignore it; the incoming property could not be found so we cannot be sure what to do here. At the very least, the safest is to simply not apply any dereference toggling...	DESIGN	0.9938712369034246	WITHOUT_CLASSIFICATION	0.006128763096575306	DESIGN
TODO : most of below was taken verbatim from DotNode; should either delegate this logic or super-type it	DESIGN	0.9995769346623811	DESIGN	4.2306533761899757E-4	WITHOUT_CLASSIFICATION
otherwise, a trim-specification and/or a trim-character have been specified; we need to decide which options are present and "do the right thing" should leading trim-characters be trimmed? should trailing trim-characters be trimmed? the trim-character the trim-source	DESIGN	0.9768500698617694	WITHOUT_CLASSIFICATION	0.023149930138230634	DESIGN
todo: we should really just collect these from the various SelectExpressions, rather than regenerating here	DESIGN	0.7516360178561213	DESIGN	0.24836398214387873	WITHOUT_CLASSIFICATION
TODO: is this a bit ugly?	DESIGN	0.9999996512031482	DESIGN	3.4879685179737057E-7	WITHOUT_CLASSIFICATION
Need a better way to define the suffixes here...	DESIGN	0.8651500521534393	DESIGN	0.13484994784656076	WITHOUT_CLASSIFICATION
TODO: something much better - look at the type of the other expression! TODO: Have comparisonExpression and/or arithmeticExpression rules complete the resolution of boolean nodes.	DESIGN	0.999819336436138	DESIGN	1.8066356386203008E-4	WITHOUT_CLASSIFICATION
TODO : what amount of significant digits need to be supported here? - from the DecimalFormat docs: [significant digits] = [minimum integer digits] + [maximum fraction digits]	DESIGN	0.9856201729497868	DESIGN	0.01437982705021328	WITHOUT_CLASSIFICATION
Needed the "clazz_" check to work around union-subclasses TODO : is there a way to tell whether a persister is truly discrim-column based inheritence?	DESIGN	0.999652077409507	DESIGN	3.4792259049298445E-4	WITHOUT_CLASSIFICATION
We should actually rework this class to not implement Parser and just process path expressions in the most convenient way.	DESIGN	0.9925655459296708	DESIGN	0.007434454070329147	WITHOUT_CLASSIFICATION
The class is now way to complex!	DESIGN	0.9999774491690997	WITHOUT_CLASSIFICATION	2.2550830900324943E-5	DESIGN
TODO: get SQL rendering out of here	DESIGN	0.9648029162299698	DESIGN	0.0351970837700302	WITHOUT_CLASSIFICATION
TODO: is there a better way?	DESIGN	0.9999993959167165	DESIGN	6.040832835094651E-7	WITHOUT_CLASSIFICATION
Must be done here because of side-effect! yuck...	DESIGN	0.9549140375077266	WITHOUT_CLASSIFICATION	0.04508596249227344	DESIGN
name from a super query (a bit inelegant that it shows up here)	DESIGN	0.7576322822889058	WITHOUT_CLASSIFICATION	0.24236771771109422	DESIGN
We should reengineer this class so that, rather than the current ad - hoc linear approach to processing a stream of tokens, we instead build up a tree of expressions.	DESIGN	0.9796972225964239	DESIGN	0.02030277740357612	WITHOUT_CLASSIFICATION
this is ugly here, but needed because its a subquery	DESIGN	0.8806664271536647	WITHOUT_CLASSIFICATION	0.11933357284633533	DESIGN
unhappy about this being public ... is there a better way?	DESIGN	0.9999864430291885	DESIGN	1.35569708115609E-5	WITHOUT_CLASSIFICATION
Make sure this is a defined parameter and check the incoming value type TODO: what should be the actual exception type here?	DESIGN	0.9999364025330698	DESIGN	6.359746693014813E-5	WITHOUT_CLASSIFICATION
TODO : this constructor form is only used from constructor directly below us; can it go away?	DESIGN	0.9999999946382014	DESIGN	5.361798554903582E-9	WITHOUT_CLASSIFICATION
TODO: COPY/PASTE FROM SessionImpl, pull up!	DESIGN	0.9372658329203882	WITHOUT_CLASSIFICATION	0.06273416707961185	DESIGN
TODO : should remove this exposure and have all references to the session's batcher use the ConnectionManager.	DESIGN	0.999419039066309	DESIGN	5.809609336909534E-4	WITHOUT_CLASSIFICATION
todo : should this get moved to PersistentContext? logically, is PersistentContext the "thing" to which an interceptor gets attached?	DESIGN	0.9442881362089611	DESIGN	0.055711863791038874	WITHOUT_CLASSIFICATION
TODO: what type?	DESIGN	0.9825343364575605	DESIGN	0.017465663542439454	WITHOUT_CLASSIFICATION
todo : should seriously consider not allowing a txn to begin from a child session can always route the request to the root session...	DESIGN	0.9995040050512454	WITHOUT_CLASSIFICATION	4.959949487546469E-4	DESIGN
short-circuit for performance...	DESIGN	0.9999524322272068	WITHOUT_CLASSIFICATION	4.756777279329417E-5	DESIGN
not absolutely necessary, but does help with aggressive release	DESIGN	0.9989034073336238	WITHOUT_CLASSIFICATION	0.0010965926663761504	DESIGN
TODO : remove these last two as batcher is no longer managing connections	DESIGN	0.9933031367521518	DESIGN	0.006696863247848243	WITHOUT_CLASSIFICATION
work around a bug in all known connection pools....	DESIGN	0.7888913504569163	WITHOUT_CLASSIFICATION	0.21110864954308386	DESIGN
TODO : make this the factory for "entity mode related" sessions; also means making this the target of transaction-synch and the thing that knows how to cascade things between related sessions At that point, perhaps this thing is a "SessionContext", and ConnectionManager is a "JDBCContext"? A "SessionContext" should live in the impl package...	DESIGN	0.9999999999991422	DESIGN	8.577653262236622E-13	WITHOUT_CLASSIFICATION
TODO: does this really need to be here? does the collection already have it's own up-to-date snapshot?	DESIGN	0.9988159230552822	DESIGN	0.001184076944717723	WITHOUT_CLASSIFICATION
TODO: the i==entitySpan-1 bit depends upon subclass implementation (very bad)	DESIGN	0.9999279662699507	DESIGN	7.203373004931825E-5	WITHOUT_CLASSIFICATION
This form used from annotations (?). Essentially the same as the above using a resultset-mapping reference, but without cacheMode, readOnly, and comment. FIXME: annotations do not use it, so it can be remove from my POV @deprecated @param query The sql query string @param resultSetRef The result-set-mapping name @param querySpaces Any specified query spaces (used for auto-flushing) @param cacheable Whether the query results are cacheable @param cacheRegion If cacheable, the region into which to store the results @param timeout A JDBC-level timeout to be applied @param fetchSize A JDBC-level fetch-size to be applied @param flushMode The flush mode to use for this query @param parameterTypes parameter type map @param callable Does the query string represent a callable object (i.e., proc)	DESIGN	0.9989268921211368	DESIGN	0.0010731078788631357	WITHOUT_CLASSIFICATION
todo : add the notion of enabled filters to the CacheKey to differentiate filtered collections from non-filtered; but CacheKey is currently used for both collections and entities; would ideally need to define two seperate ones; currently this works in conjuction with the check on DefaultInitializeCollectionEventHandler.initializeCollectionFromCache() (which makes sure to not read from cache with enabled filters). EARLY EXIT!!!!!	DESIGN	0.5506055499781101	DESIGN	0.44939445002189005	WITHOUT_CLASSIFICATION
for sets, we should end the collection load after resolving the entities, since we might call hashCode() on the elements TODO: or we could do this polymorphically, and have two different operations implemented differently for arrays	DESIGN	0.9999239752951183	DESIGN	7.602470488170139E-5	WITHOUT_CLASSIFICATION
This is not very nice (and quite slow):	DESIGN	0.6866017765645688	WITHOUT_CLASSIFICATION	0.3133982234354312	DESIGN
use of trim() here is ugly?	DESIGN	0.8601261558842533	WITHOUT_CLASSIFICATION	0.1398738441157467	DESIGN
TODO: this is too conservative; if all preceding joins were also inner joins, we could use an inner join here	DESIGN	0.999990658864953	DESIGN	9.341135047094973E-6	WITHOUT_CLASSIFICATION
TODO: look at the owning property and check that it isn't lazy (by instrumentation)	DESIGN	0.9635960964877379	WITHOUT_CLASSIFICATION	0.03640390351226206	DESIGN
TODO: inefficient	DESIGN	0.9868304448548897	DESIGN	0.013169555145110238	WITHOUT_CLASSIFICATION
why does this matter?	DESIGN	0.80781619359393	DESIGN	0.19218380640607002	WITHOUT_CLASSIFICATION
from the collection of associations, locate OJA for the ManyToOne corresponding to this persister to fully define the many-to-many; we need that OJA so that we can use its alias here TODO : is there a better way here?	DESIGN	0.9999980471732903	DESIGN	1.9528267096396873E-6	WITHOUT_CLASSIFICATION
TODO: this class depends directly upon CriteriaImpl, in the impl package ... add a CriteriaImplementor interface	DESIGN	0.9999999735105392	DESIGN	2.6489460751583495E-8	WITHOUT_CLASSIFICATION
TODO: add a CriteriaImplementor interface this class depends directly upon CriteriaImpl in the impl package...	DESIGN	0.9999960814779827	DESIGN	3.918522017309577E-6	WITHOUT_CLASSIFICATION
TODO : not so sure this is needed...	DESIGN	0.9998636693393637	DESIGN	1.3633066063624714E-4	WITHOUT_CLASSIFICATION
meant to handle dynamic instantiation queries...(Copy from QueryLoader)	DESIGN	0.9999655360618479	WITHOUT_CLASSIFICATION	3.446393815208461E-5	DESIGN
TODO: The order in which entities are saved may matter (e.g., a particular transient entity may need to be saved before other transient entities can be saved; Keep retrying the batch of transient entities until either: 1) there are no transient entities left in transientCopyCache or 2) no transient entities were saved in the last batch For now, just run through the transient entities and retry the merge	DESIGN	0.9992975427526309	DESIGN	7.024572473691188E-4	WITHOUT_CLASSIFICATION
todo: this might really even be moved into the cfg package and used as the basis for all things which are configurable.	DESIGN	0.9998440288648097	DESIGN	1.5597113519024848E-4	WITHOUT_CLASSIFICATION
todo : currently expects that the individual with expressions apply to the same sql table join. This may not be the case for joined-subclass where the property values might be coming from different tables in the joined hierarchy. At some point we should expand this to support that capability. However, that has some difficulties: 1) the biggest is how to handle ORs when the individual comparisons are linked to different sql joins. 2) here we would need to track each comparison individually, along with the join alias to which it applies and then pass that information back to the FromElement so it can pass it along to the JoinSequence	DESIGN	0.9540819289673486	DESIGN	0.045918071032651366	WITHOUT_CLASSIFICATION
this function has a template -> restore output, apply the template and write the result out TODO: Downcast to avoid using an interface? Yuck.	DESIGN	0.9928024018229973	DESIGN	0.007197598177002735	WITHOUT_CLASSIFICATION
at some point the generate phase needs to be moved out of here, because a single object-level DML might spawn multiple SQL DML command executions. Possible to just move the sql generation for dml stuff, but for consistency-sake probably best to just move responsiblity for the generation phase completely into the delegates (QueryLoader/StatementExecutor) themselves. Also, not sure why QueryLoader currently even has a dependency on this at all; does it need it? Ideally like to see the walker itself given to the delegates directly...	DESIGN	0.9999999999423703	DESIGN	5.762971867146223E-11	WITHOUT_CLASSIFICATION
get the right object from the list ... would it be easier to just call getEntity() ??	DESIGN	0.5847787424982536	WITHOUT_CLASSIFICATION	0.4152212575017465	DESIGN
TODO should we just collect these like with the collections above?	DESIGN	0.9999858018511387	DESIGN	1.4198148861304467E-5	WITHOUT_CLASSIFICATION
todo : better to handle dynamic filters through implicit DynamicFilterParameterSpecification see the discussion there in DynamicFilterParameterSpecification's javadocs as to why it is currently not done that way.	DESIGN	0.9572424883597409	DESIGN	0.042757511640258955	WITHOUT_CLASSIFICATION
/ USED ONLY FOR REGRESSION TESTING!!!! todo : obviously get rid of all this junk ;) /	DESIGN	0.9043261850849523	WITHOUT_CLASSIFICATION	0.09567381491504771	DESIGN
create an index on the key columns??	DESIGN	0.9999989984689682	WITHOUT_CLASSIFICATION	1.001531031731484E-6	DESIGN
TODO: deprecated, remove eventually	DESIGN	0.9921819199992509	DESIGN	0.007818080000749053	WITHOUT_CLASSIFICATION
create an index on the key columns??	DESIGN	0.9999989984689682	WITHOUT_CLASSIFICATION	1.001531031731484E-6	DESIGN
TODO: improve this hack!	DESIGN	0.9999999096202443	DESIGN	9.037975567122517E-8	WITHOUT_CLASSIFICATION
inheritance cycle detection (paranoid check)	DESIGN	0.9999874841627318	WITHOUT_CLASSIFICATION	1.2515837268316806E-5	DESIGN
TODO: remove use of instanceof!	DESIGN	0.9972939335801471	DESIGN	0.0027060664198529155	WITHOUT_CLASSIFICATION
shortcut	DESIGN	0.9999287574787384	WITHOUT_CLASSIFICATION	7.12425212615804E-5	DESIGN
TODO: handle the case of a foreign key to something other than the pk	DESIGN	0.9616486328941951	WITHOUT_CLASSIFICATION	0.038351367105804966	DESIGN
create an index on the key columns??	DESIGN	0.9999989984689682	WITHOUT_CLASSIFICATION	1.001531031731484E-6	DESIGN
todo : remove	DESIGN	0.975468824744575	WITHOUT_CLASSIFICATION	0.024531175255425062	DESIGN
todo : remove	DESIGN	0.975468824744575	WITHOUT_CLASSIFICATION	0.024531175255425062	DESIGN
todo : remove	DESIGN	0.975468824744575	WITHOUT_CLASSIFICATION	0.024531175255425062	DESIGN
todo : throw exception?	DESIGN	0.7348854248527149	WITHOUT_CLASSIFICATION	0.26511457514728504	DESIGN
todo : throw exception? maybe warn if not the same?	DESIGN	0.9457229121034026	DESIGN	0.05427708789659736	WITHOUT_CLASSIFICATION
TODO: make EntityPersister not depend on SessionFactoryImplementor interface, if possible	DESIGN	0.9998562415119971	DESIGN	1.437584880028447E-4	WITHOUT_CLASSIFICATION
TODO: is there a more elegant way than downcasting?	DESIGN	0.9999938502478503	DESIGN	6.149752149767239E-6	WITHOUT_CLASSIFICATION
TODO: encapsulate the protected instance variables!	DESIGN	0.510251589376473	WITHOUT_CLASSIFICATION	0.48974841062352703	DESIGN
should indicate that we are processing an INSERT/UPDATE/DELETE query with a subquery implied via a collection property function. Here, we need to use the table name itself as the qualification alias. TODO : verify this works for all databases... TODO : is this also the case in non-"indexed" scenarios?	DESIGN	0.9999998837583978	DESIGN	1.1624160225302326E-7	WITHOUT_CLASSIFICATION
TODO: copy/paste from insertRows()	DESIGN	0.8195516667888024	WITHOUT_CLASSIFICATION	0.18044833321119755	DESIGN
TODO: copy/paste from recreate()	DESIGN	0.587746690216152	WITHOUT_CLASSIFICATION	0.41225330978384794	DESIGN
should this interface extend PropertyMapping?	DESIGN	0.8948780000718091	DESIGN	0.10512199992819093	WITHOUT_CLASSIFICATION
ie. the subquery! yuck!	DESIGN	0.958325677624367	WITHOUT_CLASSIFICATION	0.041674322375632955	DESIGN
TODO: move to .sql package!!	DESIGN	0.9947768240699792	DESIGN	0.005223175930020716	WITHOUT_CLASSIFICATION
TODO: code duplication with SingleTableEntityPersister	DESIGN	0.9889281943227503	DESIGN	0.01107180567724966	WITHOUT_CLASSIFICATION
TODO: It would be really, really nice to use this to also model components!	DESIGN	0.9999997549823932	DESIGN	2.4501760673218825E-7	WITHOUT_CLASSIFICATION
TODO: two hashmap lookups here is one too many...	DESIGN	0.6500250155908408	DESIGN	0.3499749844091592	WITHOUT_CLASSIFICATION
TODO: code duplication with JoinedSubclassEntityPersister	DESIGN	0.9761878851616046	DESIGN	0.02381211483839537	WITHOUT_CLASSIFICATION
perhaps not really necessary...	DESIGN	0.9320356621959398	WITHOUT_CLASSIFICATION	0.06796433780406017	DESIGN
NOTE: this assumes something about how propertySelectFragment is implemented by the subclass! was toUnqotedAliasStrings( getIdentiferColumnNames() ) before - now tried to remove that unqoting and missing aliases..	DESIGN	0.8720775214811741	WITHOUT_CLASSIFICATION	0.1279224785188259	DESIGN
NOTE: this assumes something about how propertySelectFragment is implemented by the subclass! was toUnqotedAliasStrings( getdiscriminatorColumnName() ) before - now tried to remove that unqoting and missing aliases..	DESIGN	0.5618406840596424	WITHOUT_CLASSIFICATION	0.4381593159403576	DESIGN
TODO: should we use SELECT .. FOR UPDATE?	DESIGN	0.9999741428538587	DESIGN	2.585714614131538E-5	WITHOUT_CLASSIFICATION
TODO: optimize this better!	DESIGN	0.9978243618371186	DESIGN	0.0021756381628813153	WITHOUT_CLASSIFICATION
TODO: should we allow suffixes on these ?	DESIGN	0.9999883015607277	DESIGN	1.1698439272190971E-5	WITHOUT_CLASSIFICATION
This is really ugly, but necessary:	DESIGN	0.7366265259533937	DESIGN	0.2633734740466063	WITHOUT_CLASSIFICATION
ugly little workaround for fact that createUniqueKeyLoaders() does not handle component properties	DESIGN	0.9999992920810058	DESIGN	7.079189941526963E-7	WITHOUT_CLASSIFICATION
TODO: disable batch loading if lockMode > READ?	DESIGN	0.9912865893494147	WITHOUT_CLASSIFICATION	0.00871341065058538	DESIGN
append the SQL to return the generated identifier TODO: suck into Insert	DESIGN	0.9983780619728848	DESIGN	0.0016219380271152452	WITHOUT_CLASSIFICATION
TODO: I am not so sure about the exception handling in this bit!	DESIGN	0.9993358501675336	DESIGN	6.641498324664888E-4	WITHOUT_CLASSIFICATION
TODO: is this really necessary????	DESIGN	0.9993753699915986	DESIGN	6.246300084012835E-4	WITHOUT_CLASSIFICATION
TODO: move to .sql package, and refactor with similar things!	DESIGN	0.9989069732610036	DESIGN	0.0010930267389964096	WITHOUT_CLASSIFICATION
TODO: implement functionality this might be painful to do here, as the "join post processing" for the subquery has already been performed (meaning that for theta-join dialects, the join conditions have already been moved over to the where clause). A "simple" solution here might to perform "join post processing" once for the entire query (including any subqueries) at one fell swoop	DESIGN	0.999999930378046	DESIGN	6.962195401330319E-8	WITHOUT_CLASSIFICATION
todo : this eventually needs to be removed	DESIGN	0.8236999515164167	WITHOUT_CLASSIFICATION	0.17630004848358327	DESIGN
kinda ugly, but needed for collections with a "." node mapping	DESIGN	0.99999761391235	WITHOUT_CLASSIFICATION	2.386087649981419E-6	DESIGN
is this ok?	DESIGN	0.9966011263743987	WITHOUT_CLASSIFICATION	0.003398873625601255	DESIGN
TODO: perhaps this should be some other RuntimeException...	DESIGN	0.9999999262897868	DESIGN	7.371021318035407E-8	WITHOUT_CLASSIFICATION
TODO: make this a bit nicer	DESIGN	0.9998181406679038	DESIGN	1.8185933209631159E-4	WITHOUT_CLASSIFICATION
Yuck:	DESIGN	0.9275153422959767	WITHOUT_CLASSIFICATION	0.07248465770402335	DESIGN
TODO: we should provide some way to get keys of collection of statistics to make it easier to retrieve from a GUI perspective	DESIGN	0.9999998725471748	DESIGN	1.274528252839101E-7	WITHOUT_CLASSIFICATION
@return collection removal FIXME: even if isInverse="true"?	DESIGN	0.6613429320198189	DESIGN	0.338657067980181	WITHOUT_CLASSIFICATION
TODO : will need reference to session factory to fully complete HHH-1907	DESIGN	0.9954036490360312	DESIGN	0.004596350963968826	WITHOUT_CLASSIFICATION
TODO: currently keeps Getters and Setters (instead of PropertyAccessors) because of the way getGetter() and getSetter() are implemented currently; yuck!	DESIGN	0.9999999908859536	DESIGN	9.114046400826297E-9	WITHOUT_CLASSIFICATION
TODO: redesign how PropertyAccessors are acquired...	DESIGN	0.9992859873085524	DESIGN	7.140126914475021E-4	WITHOUT_CLASSIFICATION
todo : YUCK!!!	DESIGN	0.9748610523854925	WITHOUT_CLASSIFICATION	0.025138947614507575	DESIGN
TODO : YUCK!!! fix after HHH-1907 is complete	DESIGN	0.9999730464985933	DESIGN	2.6953501406785596E-5	WITHOUT_CLASSIFICATION
TODO: need to make the majority of this functionality into a top-level support class for custom impl support	DESIGN	0.9996562358994514	DESIGN	3.4376410054862697E-4	WITHOUT_CLASSIFICATION
TODO: design new lifecycle for ProxyFactory	DESIGN	0.6722767946861467	WITHOUT_CLASSIFICATION	0.32772320531385335	DESIGN
TODO: would be nice to handle proxy classes elegantly!	DESIGN	0.999216716652548	DESIGN	7.832833474519887E-4	WITHOUT_CLASSIFICATION
TODO: copy/paste from ManyToOneType	DESIGN	0.6432464113161781	DESIGN	0.3567535886838219	WITHOUT_CLASSIFICATION
TODO: should this be Session.instantiate(Persister, ...)?	DESIGN	0.9831746297023988	DESIGN	0.016825370297601297	WITHOUT_CLASSIFICATION
TODO: this is a bit arbitrary, expose a switch to the user?	DESIGN	0.9704611981630828	DESIGN	0.02953880183691708	WITHOUT_CLASSIFICATION
TODO: implement caching?! proxies?!	DESIGN	0.9996679681357108	DESIGN	3.320318642892753E-4	WITHOUT_CLASSIFICATION
TODO: is this right??	DESIGN	0.9999962104064448	DESIGN	3.7895935550903307E-6	WITHOUT_CLASSIFICATION
is this really necessary?	DESIGN	0.851954266369194	WITHOUT_CLASSIFICATION	0.14804573363080598	DESIGN
TODO: move these to a new JoinableType abstract class, extended by EntityType and PersistentCollectionType:	DESIGN	0.9997514508785307	DESIGN	2.485491214692822E-4	WITHOUT_CLASSIFICATION
TODO: this is very suboptimal for some subclasses (namely components), since it does not take advantage of two-phase-load	DESIGN	0.649996622571867	DESIGN	0.35000337742813303	WITHOUT_CLASSIFICATION
worrying about proxies is perhaps a little bit of overkill here...	DESIGN	0.9684635826553833	DESIGN	0.03153641734461659	WITHOUT_CLASSIFICATION
NOTE VERY HACKISH WORKAROUND!! TODO: Fix this so it will work for non-POJO entity mode	DESIGN	0.9999999999999704	DESIGN	2.963270847377976E-14	WITHOUT_CLASSIFICATION
TODO: Fix this so it will work for non-POJO entity mode	DESIGN	0.9999998976357388	DESIGN	1.0236426115599977E-7	WITHOUT_CLASSIFICATION
We would probably refactor to have LogicParser (builds a tree of simple expressions connected by and, or, not), ExpressionParser (translates from OO terms like foo, foo.Bar, foo.Bar.Baz to SQL terms like FOOS.ID, FOOS.BAR_ID, etc) and PathExpressionParser (which does much the same thing it does now)	DESIGN	0.9999990418958979	WITHOUT_CLASSIFICATION	9.581041020738336E-7	DESIGN
TODO: this is a little inefficient, don't need to do a whole deep replaceElements() call	DESIGN	0.9999996846159269	DESIGN	3.153840731120485E-7	WITHOUT_CLASSIFICATION
workaround for WebLogic	DESIGN	0.9885478043659384	DESIGN	0.011452195634061592	WITHOUT_CLASSIFICATION
TODO: this dependency is kinda Bad	DESIGN	0.9999887865575772	DESIGN	1.1213442422921843E-5	WITHOUT_CLASSIFICATION
ick!	DESIGN	0.9999149213060313	WITHOUT_CLASSIFICATION	8.507869396865233E-5	DESIGN
short cut check...	DESIGN	0.998628542541372	WITHOUT_CLASSIFICATION	0.0013714574586280069	DESIGN
todo : move to StringHelper?	DESIGN	0.7019113549658673	WITHOUT_CLASSIFICATION	0.29808864503413274	DESIGN
yukky! Don't you have subclasses for that! TODO race conditions can happen here	DESIGN	0.9999613335519172	DESIGN	3.8666448082882666E-5	WITHOUT_CLASSIFICATION
TODO: We probably should have a StatisticsNotPublishedException, to make it clean	DESIGN	0.9999576088943612	DESIGN	4.2391105638828524E-5	WITHOUT_CLASSIFICATION
FIXME hack to work around fact that calling Node added = root.addChild( fqn ); doesn't properly set the version on the node	DESIGN	0.9999999960655095	DESIGN	3.9344905177863096E-9	WITHOUT_CLASSIFICATION
TODO: I considered validating the presence of the TS cache here, but decided to defer unti getQueryCacheInstance() in case the cache is never actually used	DESIGN	0.9999558731086823	DESIGN	4.412689131771913E-5	WITHOUT_CLASSIFICATION
need to do that here rather than in the save event listener to let the post insert events to have a id-filled entity when IDENTITY is used (EJB3)	DESIGN	0.9115930299333228	WITHOUT_CLASSIFICATION	0.08840697006667728	DESIGN
TODO: simply remove this override if we fix the above todos	DESIGN	0.9427770482401001	DESIGN	0.05722295175989982	WITHOUT_CLASSIFICATION
This, is used by SessionFactoryImpl to hand to the generated SessionImpl; was the only reason I could see that we cannot just use null as Settings.cacheProvider	DESIGN	0.5395834422400823	WITHOUT_CLASSIFICATION	0.4604165577599178	DESIGN
this is done here 'cos we might only know the type here (ugly!) TODO: improve this a lot:	DESIGN	0.9999999993348893	DESIGN	6.651108234550677E-10	WITHOUT_CLASSIFICATION
todo : would love to have this work on a notification basis where the successful binding of an entity/subclass would emit a notification which the extendsQueue entries could react to...	DESIGN	0.9892030997437731	WITHOUT_CLASSIFICATION	0.010796900256226852	DESIGN
TODO : not sure the best way to handle this. The non-performant way :	DESIGN	0.999943338127377	DESIGN	5.666187262296196E-5	WITHOUT_CLASSIFICATION
would be better to use the element-type to determine whether the old and the new are equal here; the problem being we do not necessarily have access to the element type in all cases	DESIGN	0.996439291002924	WITHOUT_CLASSIFICATION	0.0035607089970759887	DESIGN
This next bit is to allow for both unsaved-value="negative" and for "older" behavior where version number did not get seeded if it was already set in the object TODO: shift it into unsaved-value strategy	DESIGN	0.9999441819008423	DESIGN	5.581809915763505E-5	WITHOUT_CLASSIFICATION
merges don't cascade to uninitialized collections TODO: perhaps this does need to cascade after all....	DESIGN	0.9992338176955096	DESIGN	7.6618230449029E-4	WITHOUT_CLASSIFICATION
TODO: an alternative is to check if the owner has changed; if it hasn't then return collection.getOwner()	DESIGN	0.7784993311474246	WITHOUT_CLASSIFICATION	0.22150066885257536	DESIGN
it is possible that the tree-walking in OuterJoinLoader can get to an association defined by a subclass, in which case the property-ref might refer to a property defined on a subclass of the current class in this case, the table name is not known - this temporary solution assumes that the property-ref refers to a property of the subclass table that the association belongs to (a reasonable guess) TODO: fix this, add: OuterJoinLoadable.getSubclassPropertyTableName(String propertyName)	DESIGN	0.9999999694293001	DESIGN	3.057069978431124E-8	WITHOUT_CLASSIFICATION
this only works because collection entries are kept in a sequenced map by persistence context (maybe we should do like entities and keep a separate sequences set...) TODO: calling entrySet on an IdentityMap is SLOW!!	DESIGN	0.9999975801253821	DESIGN	2.419874617906129E-6	WITHOUT_CLASSIFICATION
important, to account for newly saved entities in query todo : some kind of check for new status...	DESIGN	0.703751959547777	WITHOUT_CLASSIFICATION	0.29624804045222297	DESIGN
brand new collection TODO: or an array!! we can't lock objects with arrays now??	DESIGN	0.8864623688054157	DESIGN	0.11353763119458432	WITHOUT_CLASSIFICATION
TODO: if object was an uninitialized proxy, this is inefficient, resulting in two SQL selects	DESIGN	0.5294588850026486	WITHOUT_CLASSIFICATION	0.4705411149973514	DESIGN
before cascade! TODO: should this be Session.instantiate(Persister, ...)?	DESIGN	0.9889492584688659	DESIGN	0.011050741531134027	WITHOUT_CLASSIFICATION
TODO : absolutely no usages of this constructor form; can it go away?	DESIGN	0.9999979719285708	DESIGN	2.0280714292520136E-6	WITHOUT_CLASSIFICATION
todo : need to find a clean way to handle the "event source" role a seperate classs responsible for generating/dispatching events just duplicates most of the Session methods... passing around seperate reto interceptor, factory, actionQueue, and persistentContext is not manageable...	DESIGN	0.5382092462531991	DESIGN	0.4617907537468008	WITHOUT_CLASSIFICATION
todo : remove	DESIGN	0.975468824744575	WITHOUT_CLASSIFICATION	0.024531175255425062	DESIGN
aliasRefNode.resolve( false, false, aliasRefNode.getText() ); TODO: is it kosher to do it here? TODO: is it kosher to do it here?	DESIGN	0.9912310222644705	DESIGN	0.008768977735529577	WITHOUT_CLASSIFICATION
No explicit select expression; render the id and properties projection lists for every persister in the from clause into a single 'token node'. TODO: the only reason we need this stuff now is collection filters, we should get rid of derived select clause completely!	DESIGN	0.9999999313915479	DESIGN	6.860845213878434E-8	WITHOUT_CLASSIFICATION
TODO : an optimization here would be to consider cascade deletes and not gen those delete statements; the difficulty is the ordering of the tables here vs the cascade attributes on the persisters -> the table info gotten here should really be self-contained (i.e., a class representation defining all the needed attributes), then we could then get an array of those	DESIGN	0.9999902714113392	DESIGN	9.728588660650619E-6	WITHOUT_CLASSIFICATION
TODO: get SQL rendering out of here, create an AST for the join expressions. Use the SQL generator grammar to generate the SQL text for the index expression.	DESIGN	0.9688067308121007	WITHOUT_CLASSIFICATION	0.031193269187899355	DESIGN
TODO : this really needs to be delayed unitl after we definitively know all node types where this is currently a problem is parameters for which where we cannot unequivocally resolve an expected type	DESIGN	0.9999849034822292	DESIGN	1.5096517770860935E-5	WITHOUT_CLASSIFICATION
TODO: Figure out a better way to get the FROM elements in a proper tree structure. If this is not the destination of a many-to-many, add it as a child of the origin.	DESIGN	0.9764194578066148	DESIGN	0.02358054219338516	WITHOUT_CLASSIFICATION
work around that crazy issue where the tree contains "empty" FromElements (no text); afaict, this is caused by FromElementFactory.createCollectionJoin()	DESIGN	0.8647142419547902	WITHOUT_CLASSIFICATION	0.13528575804520987	DESIGN
TODO: this class does too many things! we need a different kind of path expression parser for each of the diffferent ways in which path expressions can occur	DESIGN	0.9993211361955332	DESIGN	6.788638044668737E-4	WITHOUT_CLASSIFICATION
real hacky... used to count the nesting of parentheses	DESIGN	0.999996609121654	DESIGN	3.3908783460248617E-6	WITHOUT_CLASSIFICATION
TODO : would be really nice to cache the spec on the query-def so as to not have to re-calc the hash; currently not doable though because of the resultset-ref stuff...	DESIGN	0.9397801129412273	DESIGN	0.0602198870587726	WITHOUT_CLASSIFICATION
for arrays, we should end the collection load before resolving the entities, since the actual array instances are not instantiated during loading TODO: or we could do this polymorphically, and have two different operations implemented differently for arrays	DESIGN	0.9999895341513718	DESIGN	1.0465848628232621E-5	WITHOUT_CLASSIFICATION
polymorphism not really handled completely correctly, perhaps...well, actually its ok, assuming that the entity name used in the lookup is the same as the the one used here, which it will be	DESIGN	0.8700380308121853	DESIGN	0.12996196918781466	WITHOUT_CLASSIFICATION
TODO: should "record" how many properties we have reffered to - and if we don't get'em'all we throw an exception! Way better than trial and error ;)	DESIGN	0.9910969476545777	DESIGN	0.008903052345422277	WITHOUT_CLASSIFICATION
VERY IMPORTANT!!!! - This class needs to be free of any static references to any CGLIB or Javassist classes. Otherwise, users will always need both on their classpaths no matter which (if either) they use. Another option here would be to remove the Hibernate.isPropertyInitialized() method and have the users go through the SessionFactory to get this information.	DESIGN	0.9999999833334975	WITHOUT_CLASSIFICATION	1.666650250314056E-8	DESIGN
TODO: is it really neceassry to provide Configuration to CollectionPersisters ? Should it not be enough with associated class ? or why does EntityPersister's not get access to configuration ? The only reason I could see that Configuration gets passed to collection persisters is so that they can look up the dom4j node name of the entity element in case no explicit node name was applied at the collection element level. Are you kidding me? Trivial to fix then. Just store and expose the node name on the entity persister (which the collection persister looks up anyway via other means...).	DESIGN	0.9999988275703177	DESIGN	1.1724296823444132E-6	WITHOUT_CLASSIFICATION
for backward compatibility, allow a set with no not-null element columns, using all columns in the row locater SQL TODO: create an implicit not null constraint on all cols?	DESIGN	0.5646507907050384	DESIGN	0.4353492092949616	WITHOUT_CLASSIFICATION
SPACES TODO: i'm not sure, but perhaps we should exclude abstract denormalized tables?	DESIGN	0.9999995482809451	DESIGN	4.517190550136929E-7	WITHOUT_CLASSIFICATION
workaround, for backward compatibility of sets with no not-null columns, assume all columns are used in the row locator SQL	DESIGN	0.9739518229655273	WITHOUT_CLASSIFICATION	0.02604817703447268	DESIGN
note that this method could easily be moved up to BasicEntityPersister, if we ever needed to reuse it from other subclasses	DESIGN	0.9969516734571342	DESIGN	0.003048326542865891	WITHOUT_CLASSIFICATION
index += getPropertyColumnSpan( i ); TODO: this is kinda slow...	DESIGN	0.9990899805282147	DESIGN	9.100194717853746E-4	WITHOUT_CLASSIFICATION
TODO: need some caching scheme? really comes down to decision regarding amount of state (if any) kept on PropertyAccessors	DESIGN	0.9947078938826399	DESIGN	0.005292106117360151	WITHOUT_CLASSIFICATION
TODO: here is why we need to make bytecode provider global :( TODO : again, fix this after HHH-1907 is complete	DESIGN	0.9999999999898328	DESIGN	1.0167119235558205E-11	WITHOUT_CLASSIFICATION
TODO: Yuck! This is not quite good enough, it's a quick hack around the problem of having a to-one association that refers to an embedded component:	DESIGN	0.9999999999999767	DESIGN	2.32587385654352E-14	WITHOUT_CLASSIFICATION
for DOM4J "collections" only TODO: it would be better if this was done at the higher level by Printer	DESIGN	0.9004221047459572	DESIGN	0.09957789525404273	WITHOUT_CLASSIFICATION
would be great to move all this below here into another method that could also be used from the new scrolling stuff. Would need to change the way the max-row stuff is handled (i.e. behind an interface) so that I could do the control breaking at the means to know when to stop	DESIGN	0.9999997001514388	DESIGN	2.9984856115000344E-7	WITHOUT_CLASSIFICATION
TODO: can we always use the "null property" approach for everything?	DESIGN	0.9690598491746834	DESIGN	0.0309401508253166	WITHOUT_CLASSIFICATION
polymorphism comment above	DESIGN	0.9999812383462918	WITHOUT_CLASSIFICATION	1.8761653708137428E-5	DESIGN
some messy, complex stuff here, since createCriteria() can take an aliased path, or a path rooted at the creating criteria instance	DESIGN	0.9999999979799432	WITHOUT_CLASSIFICATION	2.020056872303333E-9	DESIGN
TODO: really bad, evil hack to fix!!!	DESIGN	0.999999999993605	DESIGN	6.3949089534486194E-12	WITHOUT_CLASSIFICATION
ugly hack for cases like "elements(foo.bar.collection)" (multi-part path expression ending in elements or indices)	DESIGN	0.9909975048572344	DESIGN	0.009002495142765644	WITHOUT_CLASSIFICATION
try block is a hack around fact that currently tuplizers are not given the opportunity to resolve a subclass entity name. this allows the (we assume custom) interceptor the ability to influence this decision if we were not able to based on the given entityName	DESIGN	0.999999962625629	DESIGN	3.7374371058730806E-8	WITHOUT_CLASSIFICATION
/ HACK ALERT !!!!!!!!!!!!!!!!!!!!!!!!!!!! Attempt to work around "ghost" ImpliedFromElements that occasionally show up between the actual things being joined. This consistently occurs from index nodes (at least against many-to-many). Not sure if there are other conditions Essentially, look-ahead to the next FromElement that actually writes something to the SQL	DESIGN	0.9987819094135736	DESIGN	0.001218090586426447	WITHOUT_CLASSIFICATION
init the table here instead of earlier, so that we can get a quoted table name TODO: would it be better to simply pass the qualified table name, instead of splitting it up into schema/catalog/table names	DESIGN	0.9999948095345567	DESIGN	5.190465443445667E-6	WITHOUT_CLASSIFICATION
TODO : would be great to have a Mapping#hasNonIdentifierPropertyNamedId method I don't believe that Mapping#getReferencedPropertyType accounts for the identifier property; so if it returns for a property named 'id', then we should have a non-id field named id	DESIGN	0.612962268822301	DESIGN	0.3870377311776991	WITHOUT_CLASSIFICATION
TODO: is this really necessary????	DESIGN	0.9993753699915986	DESIGN	6.246300084012835E-4	WITHOUT_CLASSIFICATION
TODO: ideally we need the construction of PropertyAccessor to take the following: 1) EntityMode 2) EntityMode-specific data (i.e., the classname for pojo entities) 3) Property-specific data based on the EntityMode (i.e., property-name or dom4j-node-name) The easiest way, with the introduction of the new runtime-metamodel classes, would be the the following predicates: 1) PropertyAccessorFactory.getPropertyAccessor() takes references to both a org.hibernate.metadata.EntityModeMetadata and org.hibernate.metadata.Property 2) What is now termed a "PropertyAccessor" stores any values needed from those two pieces of information 3) Code can then simply call PropertyAccess.getGetter() with no parameters; likewise with PropertyAccessor.getSetter()	DESIGN	0.6314276148111144	DESIGN	0.3685723851888855	WITHOUT_CLASSIFICATION
TODO: this is temporary in that the end result will probably not take a Property reference per-se.	DESIGN	0.9999985552809834	DESIGN	1.4447190166428077E-6	WITHOUT_CLASSIFICATION
todo : this eventually needs to be removed	DESIGN	0.8236999515164167	WITHOUT_CLASSIFICATION	0.17630004848358327	DESIGN
TODO: make this a bit nicer	DESIGN	0.9998181406679038	DESIGN	1.8185933209631159E-4	WITHOUT_CLASSIFICATION
todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.9996925355615063	DESIGN	3.074644384936097E-4	WITHOUT_CLASSIFICATION
todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.9996925355615063	DESIGN	3.074644384936097E-4	WITHOUT_CLASSIFICATION
todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.9996925355615063	DESIGN	3.074644384936097E-4	WITHOUT_CLASSIFICATION
todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.9996925355615063	DESIGN	3.074644384936097E-4	WITHOUT_CLASSIFICATION
todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.9996925355615063	DESIGN	3.074644384936097E-4	WITHOUT_CLASSIFICATION
todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.9996925355615063	DESIGN	3.074644384936097E-4	WITHOUT_CLASSIFICATION
todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.9996925355615063	DESIGN	3.074644384936097E-4	WITHOUT_CLASSIFICATION
todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.9996925355615063	DESIGN	3.074644384936097E-4	WITHOUT_CLASSIFICATION
FIXME Per the RegionFactory class Javadoc, this constructor version should not be necessary. @param props The configuration properties	DESIGN	0.9939316423288488	DESIGN	0.006068357671151189	WITHOUT_CLASSIFICATION
FIXME Per the RegionFactory class Javadoc, this constructor version should not be necessary. @param props The configuration properties	DESIGN	0.9939316423288488	DESIGN	0.006068357671151189	WITHOUT_CLASSIFICATION
FIXME Per the RegionFactory class Javadoc, this constructor version should not be necessary. @param props The configuration properties	DESIGN	0.9939316423288488	DESIGN	0.006068357671151189	WITHOUT_CLASSIFICATION
TODO : probably better to calculate these and pass them in, as it'll be more performant	DESIGN	0.9999990599524098	DESIGN	9.400475902251954E-7	WITHOUT_CLASSIFICATION
