//test out the optimizer:	WITHOUT_CLASSIFICATION	0.9999992986423186	WITHOUT_CLASSIFICATION	7.013576814079391E-7	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.9999994362899299	WITHOUT_CLASSIFICATION	5.63710070039915E-7	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.9999994362899299	WITHOUT_CLASSIFICATION	5.63710070039915E-7	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.9999994362899299	WITHOUT_CLASSIFICATION	5.63710070039915E-7	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.9999994362899299	WITHOUT_CLASSIFICATION	5.63710070039915E-7	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.9999994362899299	WITHOUT_CLASSIFICATION	5.63710070039915E-7	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.9999994362899299	WITHOUT_CLASSIFICATION	5.63710070039915E-7	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.9999994362899299	WITHOUT_CLASSIFICATION	5.63710070039915E-7	DESIGN
// return	WITHOUT_CLASSIFICATION	0.9999735954486124	WITHOUT_CLASSIFICATION	2.64045513875881E-5	DESIGN
// return	WITHOUT_CLASSIFICATION	0.9999735954486124	WITHOUT_CLASSIFICATION	2.64045513875881E-5	DESIGN
/* | this | bean | args | raw bean | */	WITHOUT_CLASSIFICATION	0.9988647954089743	WITHOUT_CLASSIFICATION	0.0011352045910256422	DESIGN
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999869210123389	WITHOUT_CLASSIFICATION	1.3078987661085474E-5	DESIGN
// astore 4 // store the raw bean	WITHOUT_CLASSIFICATION	0.9999999373437335	WITHOUT_CLASSIFICATION	6.265626646503432E-8	DESIGN
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999943176518508	WITHOUT_CLASSIFICATION	5.682348149238386E-6	DESIGN
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999943176518508	WITHOUT_CLASSIFICATION	5.682348149238386E-6	DESIGN
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.9999996762458884	WITHOUT_CLASSIFICATION	3.2375411162955444E-7	DESIGN
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999999022217936	WITHOUT_CLASSIFICATION	9.777820650079547E-8	DESIGN
// putfield // new value of the field	WITHOUT_CLASSIFICATION	0.9999648755578369	WITHOUT_CLASSIFICATION	3.5124442163111E-5	DESIGN
// reference type	WITHOUT_CLASSIFICATION	0.9999867233908143	WITHOUT_CLASSIFICATION	1.3276609185569756E-5	DESIGN
// double	WITHOUT_CLASSIFICATION	0.9999897969514217	WITHOUT_CLASSIFICATION	1.0203048578431913E-5	DESIGN
// double	WITHOUT_CLASSIFICATION	0.9999897969514217	WITHOUT_CLASSIFICATION	1.0203048578431913E-5	DESIGN
// long	WITHOUT_CLASSIFICATION	0.9999987252269615	WITHOUT_CLASSIFICATION	1.2747730383926733E-6	DESIGN
// just decrement the lock, don't recache // (we don't know which transaction won)	WITHOUT_CLASSIFICATION	0.9999930675218957	WITHOUT_CLASSIFICATION	6.932478104281345E-6	DESIGN
// decode row selection...	WITHOUT_CLASSIFICATION	0.9994105449149683	WITHOUT_CLASSIFICATION	5.894550850316828E-4	DESIGN
//disassembled state gets put in a new array (we write to cache by value!)	WITHOUT_CLASSIFICATION	0.9999263373461816	WITHOUT_CLASSIFICATION	7.366265381841926E-5	DESIGN
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.999999352766808	WITHOUT_CLASSIFICATION	6.472331921064471E-7	DESIGN
// CHECK	WITHOUT_CLASSIFICATION	0.9999511647557777	WITHOUT_CLASSIFICATION	4.8835244222393023E-5	DESIGN
// ROW ID	WITHOUT_CLASSIFICATION	0.9999693183576217	WITHOUT_CLASSIFICATION	3.0681642378235416E-5	DESIGN
// COMPOSITE-ID	WITHOUT_CLASSIFICATION	0.9999945217502128	WITHOUT_CLASSIFICATION	5.4782497872614695E-6	DESIGN
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999689748793391	WITHOUT_CLASSIFICATION	3.102512066093557E-5	DESIGN
/*	WITHOUT_CLASSIFICATION	0.9402468809369636	WITHOUT_CLASSIFICATION	0.05975311906303642	DESIGN
// DYNAMIC INSERT	WITHOUT_CLASSIFICATION	0.9999868650140208	WITHOUT_CLASSIFICATION	1.3134985979135534E-5	DESIGN
// PERSISTER	WITHOUT_CLASSIFICATION	0.9999686202833026	WITHOUT_CLASSIFICATION	3.1379716697411514E-5	DESIGN
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999945399014505	WITHOUT_CLASSIFICATION	5.46009854948893E-6	DESIGN
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999432837420117	WITHOUT_CLASSIFICATION	5.671625798827585E-5	DESIGN
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999432837420117	WITHOUT_CLASSIFICATION	5.671625798827585E-5	DESIGN
// generated properties can *never* be insertable...	WITHOUT_CLASSIFICATION	0.9999952677568431	WITHOUT_CLASSIFICATION	4.732243156918088E-6	DESIGN
// TABLE	WITHOUT_CLASSIFICATION	0.9999750220957533	WITHOUT_CLASSIFICATION	2.4977904246706336E-5	DESIGN
//by default, natural-ids are "immutable" (constant)	WITHOUT_CLASSIFICATION	0.9999999829610806	WITHOUT_CLASSIFICATION	1.7038919316773572E-8	DESIGN
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999996580859021	WITHOUT_CLASSIFICATION	3.419140978791838E-7	DESIGN
// we found some extends attributes referencing entities which were // not already processed.  here we need to locate all entity-names // and class-names contained in this document itself, making sure // that these get removed from the extendz list such that only // extends names which require us to delay processing (i.e. // external to this document and not yet processed) are contained // in the returned result	WITHOUT_CLASSIFICATION	0.9587348624381485	DESIGN	0.04126513756185147	WITHOUT_CLASSIFICATION
/**	WITHOUT_CLASSIFICATION	0.8886834448185625	DESIGN	0.1113165551814374	WITHOUT_CLASSIFICATION
//	WITHOUT_CLASSIFICATION	0.9959144787197332	WITHOUT_CLASSIFICATION	0.004085521280266773	DESIGN
//	WITHOUT_CLASSIFICATION	0.9959144787197332	WITHOUT_CLASSIFICATION	0.004085521280266773	DESIGN
/**	WITHOUT_CLASSIFICATION	0.8886834448185625	DESIGN	0.1113165551814374	WITHOUT_CLASSIFICATION
//	WITHOUT_CLASSIFICATION	0.9959144787197332	WITHOUT_CLASSIFICATION	0.004085521280266773	DESIGN
// If close() is called, guarantee unbind()	WITHOUT_CLASSIFICATION	0.9999999704761641	WITHOUT_CLASSIFICATION	2.9523835958486757E-8	DESIGN
// if a ThreadLocalSessionContext-bound session happens to get // serialized, to be completely correct, we need to make sure // that unbinding of that session occurs.	WITHOUT_CLASSIFICATION	0.9999999055621236	WITHOUT_CLASSIFICATION	9.443787637851683E-8	DESIGN
// on the inverse, it makes sense that if a ThreadLocalSessionContext- // bound session then gets deserialized to go ahead and re-bind it to // the ThreadLocalSessionContext session map.	WITHOUT_CLASSIFICATION	0.9999999948343486	WITHOUT_CLASSIFICATION	5.1656514214176295E-9	DESIGN
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9995273271319045	WITHOUT_CLASSIFICATION	4.726728680953928E-4	DESIGN
// 60 second lock timeout	WITHOUT_CLASSIFICATION	0.9999855464012699	WITHOUT_CLASSIFICATION	1.4453598730188475E-5	DESIGN
// OptimisticCache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999960415524839	WITHOUT_CLASSIFICATION	3.958447516090146E-6	DESIGN
// Cache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999930540026708	WITHOUT_CLASSIFICATION	6.945997329192107E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.9959144787197332	WITHOUT_CLASSIFICATION	0.004085521280266773	DESIGN
// do the put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9998793728790452	WITHOUT_CLASSIFICATION	1.2062712095490642E-4	DESIGN
//ignore!	WITHOUT_CLASSIFICATION	0.9999146657804286	WITHOUT_CLASSIFICATION	8.533421957133502E-5	DESIGN
// tree cache in optimistic mode seems to have as very difficult // time with remove calls on non-existent nodes (NPEs)...	WITHOUT_CLASSIFICATION	0.9999765773652033	WITHOUT_CLASSIFICATION	2.3422634796685968E-5	DESIGN
//60 seconds	WITHOUT_CLASSIFICATION	0.9998260945014854	WITHOUT_CLASSIFICATION	1.739054985145137E-4	DESIGN
//ignore!	WITHOUT_CLASSIFICATION	0.9999146657804286	WITHOUT_CLASSIFICATION	8.533421957133502E-5	DESIGN
//60 seconds	WITHOUT_CLASSIFICATION	0.9998260945014854	WITHOUT_CLASSIFICATION	1.739054985145137E-4	DESIGN
//do the failfast put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999975231882875	WITHOUT_CLASSIFICATION	2.4768117126143478E-6	DESIGN
// NOTE : evict() operates locally only (i.e., does not propogate // to any other nodes in the potential cluster).  This is // exactly what is needed when we destroy() here; destroy() is used // as part of the process of shutting down a SessionFactory; thus // these removals should not be propogated	WITHOUT_CLASSIFICATION	0.9942248671557428	DESIGN	0.00577513284425724	WITHOUT_CLASSIFICATION
//    protected RegionRootListener listener;	WITHOUT_CLASSIFICATION	0.9999999557084535	WITHOUT_CLASSIFICATION	4.42915466439087E-8	DESIGN
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999970987866346	WITHOUT_CLASSIFICATION	2.9012133654947934E-6	DESIGN
// If we've been blocking for the mutex, perhaps another // thread has already reestablished the root. // In case the node was reestablised via replication, confirm it's  // marked "resident" (a status which doesn't replicate)	WITHOUT_CLASSIFICATION	0.9999088771806068	WITHOUT_CLASSIFICATION	9.112281939317709E-5	DESIGN
// For pessimistic locking, we just want to toss out our ref // to any old invalid root node and get the latest (may be null)            	WITHOUT_CLASSIFICATION	0.9995247592200011	WITHOUT_CLASSIFICATION	4.75240779998853E-4	DESIGN
// The rest only matters for optimistic locking, where we // need to establish the proper data version on the region root	WITHOUT_CLASSIFICATION	0.9993433382235843	WITHOUT_CLASSIFICATION	6.566617764155754E-4	DESIGN
// Don't hold a transactional lock for this 	WITHOUT_CLASSIFICATION	0.9995668863009776	WITHOUT_CLASSIFICATION	4.331136990224668E-4	DESIGN
// Make sure the root node for the region exists and  // has a DataVersion that never complains	WITHOUT_CLASSIFICATION	0.9999999998583334	WITHOUT_CLASSIFICATION	1.416665784302331E-10	DESIGN
// Never evict this node	WITHOUT_CLASSIFICATION	0.995927625787537	WITHOUT_CLASSIFICATION	0.004072374212462958	DESIGN
// Fix up the resident flag	WITHOUT_CLASSIFICATION	0.9999707036324486	WITHOUT_CLASSIFICATION	2.9296367551474854E-5	DESIGN
// 60 seconds	WITHOUT_CLASSIFICATION	0.9999827370839792	WITHOUT_CLASSIFICATION	1.7262916020788497E-5	DESIGN
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999976163070038	WITHOUT_CLASSIFICATION	2.3836929961354454E-6	DESIGN
// no-op. We don't own the cache so we shouldn't stop it.	WITHOUT_CLASSIFICATION	0.9932071236410852	WITHOUT_CLASSIFICATION	0.0067928763589148195	DESIGN
// This should only be possible if the caches are constructor injected 	WITHOUT_CLASSIFICATION	0.8642627485647726	WITHOUT_CLASSIFICATION	0.1357372514352274	DESIGN
// We only build caches if *none* were passed in.  Passing in // caches counts as a clear statement of exactly what is wanted	WITHOUT_CLASSIFICATION	0.971516243657682	WITHOUT_CLASSIFICATION	0.028483756342317944	DESIGN
// Set up the cache factory	WITHOUT_CLASSIFICATION	0.9999881027982396	WITHOUT_CLASSIFICATION	1.189720176044854E-5	DESIGN
// See if the user configured a multiplexer stack	WITHOUT_CLASSIFICATION	0.9999789963681683	WITHOUT_CLASSIFICATION	2.1003631831741222E-5	DESIGN
// Default to collections sharing entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999999029501283	WITHOUT_CLASSIFICATION	9.704987174861699E-8	DESIGN
// Default to sharing the entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999998049621754	WITHOUT_CLASSIFICATION	1.950378245530398E-7	DESIGN
// For Timestamps, we default to a separate config	WITHOUT_CLASSIFICATION	0.9999861963623272	WITHOUT_CLASSIFICATION	1.3803637672797486E-5	DESIGN
// We can't change the TM on a running cache; just check // if the cache has no TM and we're OK with that	WITHOUT_CLASSIFICATION	0.9999997793378788	WITHOUT_CLASSIFICATION	2.2066212121674436E-7	DESIGN
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999516758516446	WITHOUT_CLASSIFICATION	4.832414835542528E-5	DESIGN
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999995662775951	WITHOUT_CLASSIFICATION	4.3372240479557054E-7	DESIGN
// This method should be implemented assuming it's valid to  // do start/stop/start -- leave state appropriate for another start	WITHOUT_CLASSIFICATION	0.9290792745572386	DESIGN	0.07092072544276144	WITHOUT_CLASSIFICATION
// Make sure we don't re-release the same cache	WITHOUT_CLASSIFICATION	0.9999993841066779	WITHOUT_CLASSIFICATION	6.15893322134209E-7	DESIGN
// We use a different delegate than the non-optimistic superclass default	WITHOUT_CLASSIFICATION	0.9999999968144566	WITHOUT_CLASSIFICATION	3.185543421292494E-9	DESIGN
// Following methods we don't delegate since they have so little logic // it's clearer to just implement them here	WITHOUT_CLASSIFICATION	0.9618468644858947	DESIGN	0.038153135514105214	WITHOUT_CLASSIFICATION
// If JBC is using INVALIDATION, we don't want to propagate changes. // We use the Timestamps cache to manage invalidation	WITHOUT_CLASSIFICATION	0.9999999773284984	WITHOUT_CLASSIFICATION	2.267150165109543E-8	DESIGN
// We don't want to waste effort setting an option if JBC is // already in LOCAL mode. If JBC is REPL_(A)SYNC then check // if they passed an config option to disable query replication	WITHOUT_CLASSIFICATION	0.9999258983725134	WITHOUT_CLASSIFICATION	7.410162748654657E-5	DESIGN
// Don't hold the JBC node lock throughout the tx, as that // prevents updates // Add a zero (or low) timeout option so we don't block // waiting for tx's that did a put to commit	WITHOUT_CLASSIFICATION	0.9999999986156874	WITHOUT_CLASSIFICATION	1.3843124715773445E-9	DESIGN
// Double check the distributed cache	WITHOUT_CLASSIFICATION	0.9999953307789843	WITHOUT_CLASSIFICATION	4.669221015631539E-6	DESIGN
// Get an exclusive right to update JBC for this key from this node.	WITHOUT_CLASSIFICATION	0.9998965244141986	WITHOUT_CLASSIFICATION	1.0347558580140487E-4	DESIGN
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999996920783485	WITHOUT_CLASSIFICATION	3.0792165144323246E-7	DESIGN
// Initial load from JBC	WITHOUT_CLASSIFICATION	0.9999995350214446	WITHOUT_CLASSIFICATION	4.649785553546861E-7	DESIGN
// See if we had a 2nd invalidation from the same initial // preinvalidation timestamp. If so, only increment // if the new current value is an increase	WITHOUT_CLASSIFICATION	0.9999999800561546	WITHOUT_CLASSIFICATION	1.994384533269602E-8	DESIGN
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999996920783485	WITHOUT_CLASSIFICATION	3.0792165144323246E-7	DESIGN
// If the workspace node has null as well, OK; if not we've // been modified in a non-comparable manner, which we have to // treat as us being newer	WITHOUT_CLASSIFICATION	0.9999999703997134	WITHOUT_CLASSIFICATION	2.9600286666214705E-8	DESIGN
// The standard comparator types are not Serializable but are singletons	WITHOUT_CLASSIFICATION	0.999999990865069	WITHOUT_CLASSIFICATION	9.134931164960543E-9	DESIGN
// ignore!	WITHOUT_CLASSIFICATION	0.9999947767839077	WITHOUT_CLASSIFICATION	5.223216092268676E-6	DESIGN
// ignore it	WITHOUT_CLASSIFICATION	0.9999997028604238	WITHOUT_CLASSIFICATION	2.971395761793224E-7	DESIGN
// construct the cache	WITHOUT_CLASSIFICATION	0.9999819256776389	WITHOUT_CLASSIFICATION	1.8074322361170462E-5	DESIGN
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999992988391576	WITHOUT_CLASSIFICATION	7.011608424406889E-7	DESIGN
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999992988391576	WITHOUT_CLASSIFICATION	7.011608424406889E-7	DESIGN
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9998750105100851	WITHOUT_CLASSIFICATION	1.2498948991491082E-4	DESIGN
//swaldman 2006-08-28: define c3p0-style configuration parameters for initialPoolSize, which //                     hibernate sensibly lets default to minPoolSize, but we'll let users //                     override it with the c3p0-style property if they want.	WITHOUT_CLASSIFICATION	0.9996528781231844	WITHOUT_CLASSIFICATION	3.471218768156622E-4	DESIGN
/*DataSource unpooled = DataSources.unpooledDataSource(	WITHOUT_CLASSIFICATION	0.9999936186756689	WITHOUT_CLASSIFICATION	6.381324331098136E-6	DESIGN
// TRUE if the pool is borrowed from the outside, FALSE if we used to create it	WITHOUT_CLASSIFICATION	0.9995772420649571	WITHOUT_CLASSIFICATION	4.2275793504291024E-4	DESIGN
// get a connection from the pool (thru DriverManager, cfr. Proxool doc)	WITHOUT_CLASSIFICATION	0.999999808470401	WITHOUT_CLASSIFICATION	1.9152959887501144E-7	DESIGN
// set the Transaction Isolation if defined	WITHOUT_CLASSIFICATION	0.9999998889367785	WITHOUT_CLASSIFICATION	1.1106322148367463E-7	DESIGN
// toggle autoCommit to false if set	WITHOUT_CLASSIFICATION	0.9999997686670398	WITHOUT_CLASSIFICATION	2.3133296029920487E-7	DESIGN
// return the connection	WITHOUT_CLASSIFICATION	0.9999924292924465	WITHOUT_CLASSIFICATION	7.570707553496525E-6	DESIGN
// Get the configurator files (if available)	WITHOUT_CLASSIFICATION	0.9999987753649633	WITHOUT_CLASSIFICATION	1.2246350367082046E-6	DESIGN
// Default the Proxool alias setting	WITHOUT_CLASSIFICATION	0.9999998230019529	WITHOUT_CLASSIFICATION	1.7699804702965652E-7	DESIGN
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999905220983832	WITHOUT_CLASSIFICATION	9.477901616856074E-6	DESIGN
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999905220983832	WITHOUT_CLASSIFICATION	9.477901616856074E-6	DESIGN
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999999943074612	WITHOUT_CLASSIFICATION	5.692538752104066E-9	DESIGN
// Set the existing pool flag to true	WITHOUT_CLASSIFICATION	0.999999959624814	WITHOUT_CLASSIFICATION	4.0375185935452776E-8	DESIGN
// Configured using the JAXP Configurator	WITHOUT_CLASSIFICATION	0.9995700872186544	WITHOUT_CLASSIFICATION	4.299127813457205E-4	DESIGN
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999905220983832	WITHOUT_CLASSIFICATION	9.477901616856074E-6	DESIGN
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999999943074612	WITHOUT_CLASSIFICATION	5.692538752104066E-9	DESIGN
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999999943074612	WITHOUT_CLASSIFICATION	5.692538752104066E-9	DESIGN
// Configured using the Properties File Configurator	WITHOUT_CLASSIFICATION	0.9998821760602971	WITHOUT_CLASSIFICATION	1.1782393970303327E-4	DESIGN
// Remember Isolation level	WITHOUT_CLASSIFICATION	0.9999965595916543	WITHOUT_CLASSIFICATION	3.4404083456970664E-6	DESIGN
// If the provider was leeching off an existing pool don't close it	WITHOUT_CLASSIFICATION	0.9999998976118856	WITHOUT_CLASSIFICATION	1.0238811450892922E-7	DESIGN
// We have created the pool ourselves, so shut it down	WITHOUT_CLASSIFICATION	0.9998852525177931	WITHOUT_CLASSIFICATION	1.1474748220689725E-4	DESIGN
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.999947393644628	WITHOUT_CLASSIFICATION	5.260635537195828E-5	DESIGN
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.999947393644628	WITHOUT_CLASSIFICATION	5.260635537195828E-5	DESIGN
//always overwrite nonversioned data	WITHOUT_CLASSIFICATION	0.9999999970069662	WITHOUT_CLASSIFICATION	2.993033716726059E-9	DESIGN
//public Currency getCurrency(int col) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9937224731094155	WITHOUT_CLASSIFICATION	0.006277526890584551	DESIGN
// default is POJO	WITHOUT_CLASSIFICATION	0.9999968022961584	WITHOUT_CLASSIFICATION	3.197703841729711E-6	DESIGN
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999990411199171	WITHOUT_CLASSIFICATION	9.588800829681612E-7	DESIGN
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999990411199171	WITHOUT_CLASSIFICATION	9.588800829681612E-7	DESIGN
//private CacheEntry cacheEntry;	WITHOUT_CLASSIFICATION	0.9999657055919133	WITHOUT_CLASSIFICATION	3.429440808677613E-5	DESIGN
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9998828253015268	WITHOUT_CLASSIFICATION	1.1717469847313092E-4	DESIGN
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9999896759965993	WITHOUT_CLASSIFICATION	1.0324003400765795E-5	DESIGN
// get the updated snapshot of the entity state by cloning current state; // it is safe to copy in place, since by this time no-one else (should have) // has a reference  to the array	WITHOUT_CLASSIFICATION	0.9995564817334178	WITHOUT_CLASSIFICATION	4.435182665821301E-4	DESIGN
// this entity defines proeprty generation, so process those generated // values...	WITHOUT_CLASSIFICATION	0.9988611401939566	WITHOUT_CLASSIFICATION	0.0011388598060434398	DESIGN
// have the entity entry perform post-update processing, passing it the // update state and the new version (if one).	WITHOUT_CLASSIFICATION	0.9999999467065809	WITHOUT_CLASSIFICATION	5.32934192021983E-8	DESIGN
/*!persister.isCacheInvalidationRequired()*/	WITHOUT_CLASSIFICATION	0.999988788625589	WITHOUT_CLASSIFICATION	1.1211374411075059E-5	DESIGN
// need to look it up from the persistence-context	WITHOUT_CLASSIFICATION	0.9998898819620801	WITHOUT_CLASSIFICATION	1.1011803791994257E-4	DESIGN
//sort first by role name	WITHOUT_CLASSIFICATION	0.9998970746596232	WITHOUT_CLASSIFICATION	1.0292534037671414E-4	DESIGN
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9999896759965993	WITHOUT_CLASSIFICATION	1.0324003400765795E-5	DESIGN
//then by fk	WITHOUT_CLASSIFICATION	0.9992550423190664	WITHOUT_CLASSIFICATION	7.449576809336633E-4	DESIGN
// nothing to do	WITHOUT_CLASSIFICATION	0.9998717947581826	WITHOUT_CLASSIFICATION	1.2820524181740044E-4	DESIGN
// nothing to do	WITHOUT_CLASSIFICATION	0.9998717947581826	WITHOUT_CLASSIFICATION	1.2820524181740044E-4	DESIGN
// an existing collection that was either non-empty or uninitialized // is replaced by null or a different collection // (if the collection is uninitialized, hibernate has no way of // knowing if the collection is actually empty without querying the db)	WITHOUT_CLASSIFICATION	0.9999884395807386	WITHOUT_CLASSIFICATION	1.1560419261490018E-5	DESIGN
// this method is called when a new non-null collection is persisted // or when an existing (non-null) collection is moved to a new owner	WITHOUT_CLASSIFICATION	0.9999996659430733	WITHOUT_CLASSIFICATION	3.3405692663431257E-7	DESIGN
//	WITHOUT_CLASSIFICATION	0.9959144787197332	WITHOUT_CLASSIFICATION	0.004085521280266773	DESIGN
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9846922566372229	WITHOUT_CLASSIFICATION	0.015307743362776988	DESIGN
//do nothing - we only need to notify the cache...	WITHOUT_CLASSIFICATION	0.9999592984237796	WITHOUT_CLASSIFICATION	4.070157622029784E-5	DESIGN
//sort first by entity name	WITHOUT_CLASSIFICATION	0.9998457780692587	WITHOUT_CLASSIFICATION	1.542219307412437E-4	DESIGN
//then by id	WITHOUT_CLASSIFICATION	0.9946097663945018	WITHOUT_CLASSIFICATION	0.005390233605498096	DESIGN
// to be safe...	WITHOUT_CLASSIFICATION	0.9998430336543365	WITHOUT_CLASSIFICATION	1.5696634566342378E-4	DESIGN
// no transformations took place, so handle it as we would a // non-instrumented class	WITHOUT_CLASSIFICATION	0.9996640460199969	WITHOUT_CLASSIFICATION	3.359539800029862E-4	DESIGN
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999993556507047	WITHOUT_CLASSIFICATION	6.443492953103283E-7	DESIGN
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999993556507047	WITHOUT_CLASSIFICATION	6.443492953103283E-7	DESIGN
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999961132284985	WITHOUT_CLASSIFICATION	3.8867715015360775E-6	DESIGN
//test out the optimizer:	WITHOUT_CLASSIFICATION	0.9999992986423186	WITHOUT_CLASSIFICATION	7.013576814079391E-7	DESIGN
// set the name of bulk accessor.	WITHOUT_CLASSIFICATION	0.9999996945908505	WITHOUT_CLASSIFICATION	3.054091494762626E-7	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.9999994362899299	WITHOUT_CLASSIFICATION	5.63710070039915E-7	DESIGN
// invokespecial	WITHOUT_CLASSIFICATION	0.9999928673817254	WITHOUT_CLASSIFICATION	7.132618274609241E-6	DESIGN
// return	WITHOUT_CLASSIFICATION	0.9999735954486124	WITHOUT_CLASSIFICATION	2.64045513875881E-5	DESIGN
// aload_1 // load bean	WITHOUT_CLASSIFICATION	0.9999998140258137	WITHOUT_CLASSIFICATION	1.8597418620499683E-7	DESIGN
// checkcast // cast bean	WITHOUT_CLASSIFICATION	0.9999982982037176	WITHOUT_CLASSIFICATION	1.7017962824341711E-6	DESIGN
// astore_3 // store bean	WITHOUT_CLASSIFICATION	0.9999995034830952	WITHOUT_CLASSIFICATION	4.965169048041588E-7	DESIGN
// aload_2 // args	WITHOUT_CLASSIFICATION	0.9999994056676337	WITHOUT_CLASSIFICATION	5.943323663486941E-7	DESIGN
// iconst_i // continue to aastore // growing stack is 1	WITHOUT_CLASSIFICATION	0.9999990133356076	WITHOUT_CLASSIFICATION	9.866643924348293E-7	DESIGN
// new	WITHOUT_CLASSIFICATION	0.9999642407327971	WITHOUT_CLASSIFICATION	3.5759267202989255E-5	DESIGN
// dup	WITHOUT_CLASSIFICATION	0.9999511871180353	WITHOUT_CLASSIFICATION	4.8812881964775205E-5	DESIGN
// aload_3 // load the raw bean	WITHOUT_CLASSIFICATION	0.9999999897806802	WITHOUT_CLASSIFICATION	1.0219319830113263E-8	DESIGN
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999869210123389	WITHOUT_CLASSIFICATION	1.3078987661085474E-5	DESIGN
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999985157050131	WITHOUT_CLASSIFICATION	1.4842949869902833E-6	DESIGN
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999985157050131	WITHOUT_CLASSIFICATION	1.4842949869902833E-6	DESIGN
// aastore // args	WITHOUT_CLASSIFICATION	0.9999985585827053	WITHOUT_CLASSIFICATION	1.441417294778564E-6	DESIGN
/* | this | bean | args | i | raw bean | exception | */	WITHOUT_CLASSIFICATION	0.9979781727711949	WITHOUT_CLASSIFICATION	0.0020218272288050534	DESIGN
// required to exception table // iconst_0 // i	WITHOUT_CLASSIFICATION	0.9999857695033157	WITHOUT_CLASSIFICATION	1.423049668437147E-5	DESIGN
// istore_3 // store i	WITHOUT_CLASSIFICATION	0.9999960421038054	WITHOUT_CLASSIFICATION	3.957896194554089E-6	DESIGN
// aload_1 // load the bean	WITHOUT_CLASSIFICATION	0.9999999012895388	WITHOUT_CLASSIFICATION	9.87104613062443E-8	DESIGN
// checkcast // cast the bean into a raw bean	WITHOUT_CLASSIFICATION	0.9999994341077562	WITHOUT_CLASSIFICATION	5.658922438837604E-7	DESIGN
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999943176518508	WITHOUT_CLASSIFICATION	5.682348149238386E-6	DESIGN
// start region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9999853614326965	WITHOUT_CLASSIFICATION	1.4638567303539715E-5	DESIGN
// iinc 3, 1	WITHOUT_CLASSIFICATION	0.9999948527263547	WITHOUT_CLASSIFICATION	5.147273645302078E-6	DESIGN
// aload 4 // load the raw bean	WITHOUT_CLASSIFICATION	0.9999999686041439	WITHOUT_CLASSIFICATION	3.1395856165687955E-8	DESIGN
// aload_2 // load the args	WITHOUT_CLASSIFICATION	0.9999999654481081	WITHOUT_CLASSIFICATION	3.455189189791251E-8	DESIGN
// iconst_i	WITHOUT_CLASSIFICATION	0.9999834280887009	WITHOUT_CLASSIFICATION	1.6571911299150007E-5	DESIGN
// aaload	WITHOUT_CLASSIFICATION	0.9999967836345317	WITHOUT_CLASSIFICATION	3.2163654682796703E-6	DESIGN
// checkcast	WITHOUT_CLASSIFICATION	0.9999956718854534	WITHOUT_CLASSIFICATION	4.328114546602583E-6	DESIGN
// checkcast (case of primitive type) // invokevirtual (case of primitive type)	WITHOUT_CLASSIFICATION	0.9999999887979959	WITHOUT_CLASSIFICATION	1.1202004101073637E-8	DESIGN
// checkcast (case of reference type)	WITHOUT_CLASSIFICATION	0.9999997958617217	WITHOUT_CLASSIFICATION	2.041382782120787E-7	DESIGN
/* current stack len = 2 */	WITHOUT_CLASSIFICATION	0.999995933565535	WITHOUT_CLASSIFICATION	4.066434465101337E-6	DESIGN
// end region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.999996002942279	WITHOUT_CLASSIFICATION	3.997057721103665E-6	DESIGN
// register in exception table	WITHOUT_CLASSIFICATION	0.9999965289634282	WITHOUT_CLASSIFICATION	3.471036571854982E-6	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.9999994362899299	WITHOUT_CLASSIFICATION	5.63710070039915E-7	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.9999994362899299	WITHOUT_CLASSIFICATION	5.63710070039915E-7	DESIGN
// return	WITHOUT_CLASSIFICATION	0.9999735954486124	WITHOUT_CLASSIFICATION	2.64045513875881E-5	DESIGN
// return	WITHOUT_CLASSIFICATION	0.9999735954486124	WITHOUT_CLASSIFICATION	2.64045513875881E-5	DESIGN
// dup	WITHOUT_CLASSIFICATION	0.9999511871180353	WITHOUT_CLASSIFICATION	4.8812881964775205E-5	DESIGN
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999985157050131	WITHOUT_CLASSIFICATION	1.4842949869902833E-6	DESIGN
// checkcast	WITHOUT_CLASSIFICATION	0.9999956718854534	WITHOUT_CLASSIFICATION	4.328114546602583E-6	DESIGN
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.9999996762458884	WITHOUT_CLASSIFICATION	3.2375411162955444E-7	DESIGN
// astore 5 // store exception	WITHOUT_CLASSIFICATION	0.9999943409225853	WITHOUT_CLASSIFICATION	5.659077414681014E-6	DESIGN
// new // BulkAccessorException	WITHOUT_CLASSIFICATION	0.999980554593095	WITHOUT_CLASSIFICATION	1.944540690501917E-5	DESIGN
// aload 5 // load exception	WITHOUT_CLASSIFICATION	0.9999944138845127	WITHOUT_CLASSIFICATION	5.586115487278342E-6	DESIGN
// iload_3 // i	WITHOUT_CLASSIFICATION	0.9999965709938423	WITHOUT_CLASSIFICATION	3.4290061576335407E-6	DESIGN
// invokespecial // BulkAccessorException.<init>	WITHOUT_CLASSIFICATION	0.9999998409469224	WITHOUT_CLASSIFICATION	1.590530776328595E-7	DESIGN
// athrow	WITHOUT_CLASSIFICATION	0.9999993298147837	WITHOUT_CLASSIFICATION	6.701852163136735E-7	DESIGN
// WARNING: classfile only	WITHOUT_CLASSIFICATION	0.9999793474572755	WITHOUT_CLASSIFICATION	2.0652542724588406E-5	DESIGN
//swallow	WITHOUT_CLASSIFICATION	0.9999925002260354	WITHOUT_CLASSIFICATION	7.499773964668177E-6	DESIGN
/* local variable | this | */	WITHOUT_CLASSIFICATION	0.9999057199345325	WITHOUT_CLASSIFICATION	9.428006546756966E-5	DESIGN
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.9999760637539188	WITHOUT_CLASSIFICATION	2.3936246081283056E-5	DESIGN
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.9999760637539188	WITHOUT_CLASSIFICATION	2.3936246081283056E-5	DESIGN
// getfield // get field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999998485829995	WITHOUT_CLASSIFICATION	1.5141700053792358E-7	DESIGN
// areturn // return the value of the field	WITHOUT_CLASSIFICATION	0.9999994731324024	WITHOUT_CLASSIFICATION	5.268675976029862E-7	DESIGN
/* local variables | this | callback | */	WITHOUT_CLASSIFICATION	0.9972846075277696	WITHOUT_CLASSIFICATION	0.0027153924722303872	DESIGN
// aload_1 // load callback	WITHOUT_CLASSIFICATION	0.9999958691187447	WITHOUT_CLASSIFICATION	4.130881255208606E-6	DESIGN
// putfield // put field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999996156298472	WITHOUT_CLASSIFICATION	3.843701527559205E-7	DESIGN
// case of non-static field	WITHOUT_CLASSIFICATION	0.9999659985700273	WITHOUT_CLASSIFICATION	3.400142997266072E-5	DESIGN
// getfield // get each field	WITHOUT_CLASSIFICATION	0.9999787692333906	WITHOUT_CLASSIFICATION	2.1230766609434084E-5	DESIGN
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999999022217936	WITHOUT_CLASSIFICATION	9.777820650079547E-8	DESIGN
// ifnonnull	WITHOUT_CLASSIFICATION	0.9999971239166123	WITHOUT_CLASSIFICATION	2.876083387659931E-6	DESIGN
// *return // each type	WITHOUT_CLASSIFICATION	0.9999998394917781	WITHOUT_CLASSIFICATION	1.6050822192658856E-7	DESIGN
// *return // each type	WITHOUT_CLASSIFICATION	0.9999998394917781	WITHOUT_CLASSIFICATION	1.6050822192658856E-7	DESIGN
// *store_1 // each type	WITHOUT_CLASSIFICATION	0.9999999395278626	WITHOUT_CLASSIFICATION	6.047213743985347E-8	DESIGN
// ldc // name of the field	WITHOUT_CLASSIFICATION	0.9999739747795742	WITHOUT_CLASSIFICATION	2.6025220425876274E-5	DESIGN
// *load_1 // each type	WITHOUT_CLASSIFICATION	0.999999908070132	WITHOUT_CLASSIFICATION	9.192986811395509E-8	DESIGN
// invokeinterface // invoke Callback.read*() // each type	WITHOUT_CLASSIFICATION	0.9999979823688192	WITHOUT_CLASSIFICATION	2.0176311807482736E-6	DESIGN
// int	WITHOUT_CLASSIFICATION	0.9999645204327089	WITHOUT_CLASSIFICATION	3.547956729109169E-5	DESIGN
// return	WITHOUT_CLASSIFICATION	0.9999735954486124	WITHOUT_CLASSIFICATION	2.64045513875881E-5	DESIGN
// dup	WITHOUT_CLASSIFICATION	0.9999511871180353	WITHOUT_CLASSIFICATION	4.8812881964775205E-5	DESIGN
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999869210123389	WITHOUT_CLASSIFICATION	1.3078987661085474E-5	DESIGN
// checkcast	WITHOUT_CLASSIFICATION	0.9999956718854534	WITHOUT_CLASSIFICATION	4.328114546602583E-6	DESIGN
// checkcast	WITHOUT_CLASSIFICATION	0.9999956718854534	WITHOUT_CLASSIFICATION	4.328114546602583E-6	DESIGN
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999999521050729	WITHOUT_CLASSIFICATION	4.789492706387772E-8	DESIGN
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999999521050729	WITHOUT_CLASSIFICATION	4.789492706387772E-8	DESIGN
// ifnonnull (label1)	WITHOUT_CLASSIFICATION	0.9999993945775991	WITHOUT_CLASSIFICATION	6.054224007549219E-7	DESIGN
// *load_1	WITHOUT_CLASSIFICATION	0.999997810537458	WITHOUT_CLASSIFICATION	2.1894625420777642E-6	DESIGN
// *load_1	WITHOUT_CLASSIFICATION	0.999997810537458	WITHOUT_CLASSIFICATION	2.1894625420777642E-6	DESIGN
// putfield	WITHOUT_CLASSIFICATION	0.9999484563473473	WITHOUT_CLASSIFICATION	5.1543652652784936E-5	DESIGN
// return ;	WITHOUT_CLASSIFICATION	0.9999860178334347	WITHOUT_CLASSIFICATION	1.3982166565273458E-5	DESIGN
// ldc // field name	WITHOUT_CLASSIFICATION	0.9999969917988372	WITHOUT_CLASSIFICATION	3.008201162804861E-6	DESIGN
// getfield // old value of the field	WITHOUT_CLASSIFICATION	0.9999903889114217	WITHOUT_CLASSIFICATION	9.611088578201851E-6	DESIGN
// invokeinterface // callback.write*(..)	WITHOUT_CLASSIFICATION	0.9999912841803766	WITHOUT_CLASSIFICATION	8.71581962333095E-6	DESIGN
// reference type	WITHOUT_CLASSIFICATION	0.9999867233908143	WITHOUT_CLASSIFICATION	1.3276609185569756E-5	DESIGN
// reference type	WITHOUT_CLASSIFICATION	0.9999867233908143	WITHOUT_CLASSIFICATION	1.3276609185569756E-5	DESIGN
// not array	WITHOUT_CLASSIFICATION	0.9999596298671973	WITHOUT_CLASSIFICATION	4.037013280263917E-5	DESIGN
// array of reference type	WITHOUT_CLASSIFICATION	0.9999969328538025	WITHOUT_CLASSIFICATION	3.067146197343209E-6	DESIGN
// boolean	WITHOUT_CLASSIFICATION	0.9999997073565169	WITHOUT_CLASSIFICATION	2.926434831387428E-7	DESIGN
// byte	WITHOUT_CLASSIFICATION	0.9999924728839596	WITHOUT_CLASSIFICATION	7.52711604035926E-6	DESIGN
// char	WITHOUT_CLASSIFICATION	0.9999973336471228	WITHOUT_CLASSIFICATION	2.6663528770907927E-6	DESIGN
// short	WITHOUT_CLASSIFICATION	0.9999697333802452	WITHOUT_CLASSIFICATION	3.0266619754895374E-5	DESIGN
// double	WITHOUT_CLASSIFICATION	0.9999897969514217	WITHOUT_CLASSIFICATION	1.0203048578431913E-5	DESIGN
// float	WITHOUT_CLASSIFICATION	0.99999654316045	WITHOUT_CLASSIFICATION	3.4568395501144263E-6	DESIGN
// float	WITHOUT_CLASSIFICATION	0.99999654316045	WITHOUT_CLASSIFICATION	3.4568395501144263E-6	DESIGN
// long	WITHOUT_CLASSIFICATION	0.9999987252269615	WITHOUT_CLASSIFICATION	1.2747730383926733E-6	DESIGN
// long	WITHOUT_CLASSIFICATION	0.9999987252269615	WITHOUT_CLASSIFICATION	1.2747730383926733E-6	DESIGN
// bad type	WITHOUT_CLASSIFICATION	0.9999713695886263	WITHOUT_CLASSIFICATION	2.8630411373661483E-5	DESIGN
// bad type	WITHOUT_CLASSIFICATION	0.9999713695886263	WITHOUT_CLASSIFICATION	2.8630411373661483E-5	DESIGN
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999999839625675	WITHOUT_CLASSIFICATION	1.6037432575736677E-8	DESIGN
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999999839625675	WITHOUT_CLASSIFICATION	1.6037432575736677E-8	DESIGN
// reference type	WITHOUT_CLASSIFICATION	0.9999867233908143	WITHOUT_CLASSIFICATION	1.3276609185569756E-5	DESIGN
// double	WITHOUT_CLASSIFICATION	0.9999897969514217	WITHOUT_CLASSIFICATION	1.0203048578431913E-5	DESIGN
// float	WITHOUT_CLASSIFICATION	0.99999654316045	WITHOUT_CLASSIFICATION	3.4568395501144263E-6	DESIGN
// float	WITHOUT_CLASSIFICATION	0.99999654316045	WITHOUT_CLASSIFICATION	3.4568395501144263E-6	DESIGN
// long	WITHOUT_CLASSIFICATION	0.9999987252269615	WITHOUT_CLASSIFICATION	1.2747730383926733E-6	DESIGN
// bad type	WITHOUT_CLASSIFICATION	0.9999713695886263	WITHOUT_CLASSIFICATION	2.8630411373661483E-5	DESIGN
// bad type	WITHOUT_CLASSIFICATION	0.9999713695886263	WITHOUT_CLASSIFICATION	2.8630411373661483E-5	DESIGN
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999999839625675	WITHOUT_CLASSIFICATION	1.6037432575736677E-8	DESIGN
// skip finalize methods	WITHOUT_CLASSIFICATION	0.9998111265313826	WITHOUT_CLASSIFICATION	1.8887346861734512E-4	DESIGN
//Mainly for OSCache	WITHOUT_CLASSIFICATION	0.9999850223014856	WITHOUT_CLASSIFICATION	1.4977698514490032E-5	DESIGN
//decrement the lock	WITHOUT_CLASSIFICATION	0.9999918370611742	WITHOUT_CLASSIFICATION	8.16293882579812E-6	DESIGN
// create new lock that times out immediately	WITHOUT_CLASSIFICATION	0.9999998358349917	WITHOUT_CLASSIFICATION	1.6416500822912674E-7	DESIGN
//recache the updated state	WITHOUT_CLASSIFICATION	0.9995749216670976	WITHOUT_CLASSIFICATION	4.2507833290240704E-4	DESIGN
// noop	WITHOUT_CLASSIFICATION	0.9999079784905163	WITHOUT_CLASSIFICATION	9.202150948366972E-5	DESIGN
//null clientLock is remotely possible but will never happen in practice	WITHOUT_CLASSIFICATION	0.9966474381636307	WITHOUT_CLASSIFICATION	0.0033525618363694156	DESIGN
// we really could refresh the item if it // is not a lock, but it might be slower //return freshTimestamp < txTimestamp	WITHOUT_CLASSIFICATION	0.6645995810947765	DESIGN	0.3354004189052237	WITHOUT_CLASSIFICATION
//by requiring <, we rely on lock timeout in the case of an unsuccessful update!	WITHOUT_CLASSIFICATION	0.9999904138047094	WITHOUT_CLASSIFICATION	9.586195290558577E-6	DESIGN
// the user provided resulttransformer, not the one used with "select new". Here to avoid mangling // transformed/non-transformed results.	WITHOUT_CLASSIFICATION	0.9999963125316117	WITHOUT_CLASSIFICATION	3.687468388440469E-6	DESIGN
// disassemble positional parameters	WITHOUT_CLASSIFICATION	0.9999999682302201	WITHOUT_CLASSIFICATION	3.176977991072487E-8	DESIGN
// disassemble named parameters	WITHOUT_CLASSIFICATION	0.9999982976856584	WITHOUT_CLASSIFICATION	1.7023143416823511E-6	DESIGN
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9998750105100851	WITHOUT_CLASSIFICATION	1.2498948991491082E-4	DESIGN
// noop	WITHOUT_CLASSIFICATION	0.9999079784905163	WITHOUT_CLASSIFICATION	9.202150948366972E-5	DESIGN
//noop	WITHOUT_CLASSIFICATION	0.9999060237638733	WITHOUT_CLASSIFICATION	9.397623612669691E-5	DESIGN
//noop	WITHOUT_CLASSIFICATION	0.9999060237638733	WITHOUT_CLASSIFICATION	9.397623612669691E-5	DESIGN
// this is called from SettingsFactory irregardless; trivial to simply disregard	WITHOUT_CLASSIFICATION	0.9994202112666173	WITHOUT_CLASSIFICATION	5.797887333825901E-4	DESIGN
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9996705964198913	WITHOUT_CLASSIFICATION	3.2940358010866415E-4	DESIGN
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9996705964198913	WITHOUT_CLASSIFICATION	3.2940358010866415E-4	DESIGN
//throw new UnsupportedOperationException("Can't write to a readonly object");	WITHOUT_CLASSIFICATION	0.9999942155368445	WITHOUT_CLASSIFICATION	5.784463155515287E-6	DESIGN
//assembled state gets put in a new array (we read from cache by value!)	WITHOUT_CLASSIFICATION	0.9995109311541334	WITHOUT_CLASSIFICATION	4.890688458666546E-4	DESIGN
//persister.setIdentifier(result, id); //before calling interceptor, for consistency with normal load	WITHOUT_CLASSIFICATION	0.9999998290484936	WITHOUT_CLASSIFICATION	1.709515065040922E-7	DESIGN
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9993676074219278	WITHOUT_CLASSIFICATION	6.323925780723046E-4	DESIGN
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9993676074219278	WITHOUT_CLASSIFICATION	6.323925780723046E-4	DESIGN
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.999999352766808	WITHOUT_CLASSIFICATION	6.472331921064471E-7	DESIGN
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9994621867137538	WITHOUT_CLASSIFICATION	5.378132862461617E-4	DESIGN
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9994621867137538	WITHOUT_CLASSIFICATION	5.378132862461617E-4	DESIGN
// classes mentioned in extends not available - so put it in queue	WITHOUT_CLASSIFICATION	0.9999901390963796	WITHOUT_CLASSIFICATION	9.860903620364742E-6	DESIGN
// get meta's from <hibernate-mapping>	WITHOUT_CLASSIFICATION	0.9999878048606433	WITHOUT_CLASSIFICATION	1.2195139356744575E-5	DESIGN
// get meta's from <class>	WITHOUT_CLASSIFICATION	0.9999968212651936	WITHOUT_CLASSIFICATION	3.1787348062639774E-6	DESIGN
// DB-OBJECTNAME	WITHOUT_CLASSIFICATION	0.9999935284753324	WITHOUT_CLASSIFICATION	6.4715246675860354E-6	DESIGN
// MUTABLE	WITHOUT_CLASSIFICATION	0.999987802330309	WITHOUT_CLASSIFICATION	1.2197669690907736E-5	DESIGN
// WHERE	WITHOUT_CLASSIFICATION	0.9999370830442255	WITHOUT_CLASSIFICATION	6.291695577450286E-5	DESIGN
// CHECK	WITHOUT_CLASSIFICATION	0.9999511647557777	WITHOUT_CLASSIFICATION	4.8835244222393023E-5	DESIGN
// POLYMORPHISM	WITHOUT_CLASSIFICATION	0.9998609051310077	WITHOUT_CLASSIFICATION	1.390948689923868E-4	DESIGN
// TODO:	WITHOUT_CLASSIFICATION	0.9682476956171687	WITHOUT_CLASSIFICATION	0.03175230438283124	DESIGN
// ID	WITHOUT_CLASSIFICATION	0.9999926178097237	WITHOUT_CLASSIFICATION	7.382190276195562E-6	DESIGN
// VERSION / TIMESTAMP	WITHOUT_CLASSIFICATION	0.9999682083323312	WITHOUT_CLASSIFICATION	3.179166766879349E-5	DESIGN
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999689748793391	WITHOUT_CLASSIFICATION	3.102512066093557E-5	DESIGN
// Primary key constraint	WITHOUT_CLASSIFICATION	0.999999337842149	WITHOUT_CLASSIFICATION	6.621578510746207E-7	DESIGN
// this is either a <version/> tag with no type attribute, // or a <timestamp/> tag	WITHOUT_CLASSIFICATION	0.999998263780937	WITHOUT_CLASSIFICATION	1.7362190629225492E-6	DESIGN
// for version properties marked as being generated, make sure they are "always" // generated; aka, "insert" is invalid; this is dis-allowed by the DTD, // but just to make sure...	WITHOUT_CLASSIFICATION	0.9999999968451125	WITHOUT_CLASSIFICATION	3.1548874596205118E-9	DESIGN
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999689748793391	WITHOUT_CLASSIFICATION	3.102512066093557E-5	DESIGN
// ( (Column) discrim.getColumnIterator().next() ).setType(type);	WITHOUT_CLASSIFICATION	0.9999998853238331	WITHOUT_CLASSIFICATION	1.1467616697179499E-7	DESIGN
// go ahead and set the lazy here, since pojo.proxy can override it.	WITHOUT_CLASSIFICATION	0.9999995357722704	WITHOUT_CLASSIFICATION	4.6422772954924156E-7	DESIGN
// DYNAMIC UPDATE	WITHOUT_CLASSIFICATION	0.9999829761644551	WITHOUT_CLASSIFICATION	1.7023835544964885E-5	DESIGN
// IMPORT	WITHOUT_CLASSIFICATION	0.9999618763352539	WITHOUT_CLASSIFICATION	3.8123664746124046E-5	DESIGN
// BATCH SIZE	WITHOUT_CLASSIFICATION	0.9999450608895094	WITHOUT_CLASSIFICATION	5.493911049067902E-5	DESIGN
// SELECT BEFORE UPDATE	WITHOUT_CLASSIFICATION	0.9999845800045486	WITHOUT_CLASSIFICATION	1.5419995451392563E-5	DESIGN
// OPTIMISTIC LOCK MODE	WITHOUT_CLASSIFICATION	0.9999814684940818	WITHOUT_CLASSIFICATION	1.8531505918236567E-5	DESIGN
// PERSISTER	WITHOUT_CLASSIFICATION	0.9999686202833026	WITHOUT_CLASSIFICATION	3.1379716697411514E-5	DESIGN
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999450928644515	WITHOUT_CLASSIFICATION	5.4907135548410835E-5	DESIGN
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999945399014505	WITHOUT_CLASSIFICATION	5.46009854948893E-6	DESIGN
// properties	WITHOUT_CLASSIFICATION	0.9999914214647899	WITHOUT_CLASSIFICATION	8.578535210176345E-6	DESIGN
// joined subclasses	WITHOUT_CLASSIFICATION	0.9999854093279851	WITHOUT_CLASSIFICATION	1.4590672014947073E-5	DESIGN
// KEY	WITHOUT_CLASSIFICATION	0.9999626639261334	WITHOUT_CLASSIFICATION	3.733607386657997E-5	DESIGN
// CHECK	WITHOUT_CLASSIFICATION	0.9999511647557777	WITHOUT_CLASSIFICATION	4.8835244222393023E-5	DESIGN
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999450928644515	WITHOUT_CLASSIFICATION	5.4907135548410835E-5	DESIGN
// properties	WITHOUT_CLASSIFICATION	0.9999914214647899	WITHOUT_CLASSIFICATION	8.578535210176345E-6	DESIGN
// KEY	WITHOUT_CLASSIFICATION	0.9999626639261334	WITHOUT_CLASSIFICATION	3.733607386657997E-5	DESIGN
// model.getKey().setType( new Type( model.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999998729725432	WITHOUT_CLASSIFICATION	1.2702745683885572E-7	DESIGN
// TABLENAME	WITHOUT_CLASSIFICATION	0.9999711136282147	WITHOUT_CLASSIFICATION	2.8886371785327613E-5	DESIGN
// join.getKey().setType( new Type( lazz.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999999544526601	WITHOUT_CLASSIFICATION	4.554733997305783E-8	DESIGN
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999432837420117	WITHOUT_CLASSIFICATION	5.671625798827585E-5	DESIGN
// COLUMN(S)	WITHOUT_CLASSIFICATION	0.9999960886143728	WITHOUT_CLASSIFICATION	3.911385627179077E-6	DESIGN
// column index	WITHOUT_CLASSIFICATION	0.9999999048403686	WITHOUT_CLASSIFICATION	9.515963139318756E-8	DESIGN
//column unique-key	WITHOUT_CLASSIFICATION	0.9999899272425333	WITHOUT_CLASSIFICATION	1.0072757466761251E-5	DESIGN
// automatically makes a column with the default name if none is specifed by XML	WITHOUT_CLASSIFICATION	0.9999847092940363	WITHOUT_CLASSIFICATION	1.5290705963650898E-5	DESIGN
// for an any	WITHOUT_CLASSIFICATION	0.999998733168654	WITHOUT_CLASSIFICATION	1.2668313460103354E-6	DESIGN
// insertable simply because that is the user did not specify // anything; just override it	WITHOUT_CLASSIFICATION	0.9999999999187762	WITHOUT_CLASSIFICATION	8.122373290381573E-11	DESIGN
// the user specifically supplied insert="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999996303698188	WITHOUT_CLASSIFICATION	3.6963018114912383E-7	DESIGN
// properties generated on update can never be updateable...	WITHOUT_CLASSIFICATION	0.9997523974401686	WITHOUT_CLASSIFICATION	2.476025598314092E-4	DESIGN
// updateable only because the user did not specify  // anything; just override it	WITHOUT_CLASSIFICATION	0.9999999998316094	WITHOUT_CLASSIFICATION	1.6839073963994153E-10	DESIGN
// the user specifically supplied update="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999992563908748	WITHOUT_CLASSIFICATION	7.43609125116077E-7	DESIGN
// ROLENAME	WITHOUT_CLASSIFICATION	0.9999790620127886	WITHOUT_CLASSIFICATION	2.093798721136412E-5	DESIGN
// FETCH STRATEGY	WITHOUT_CLASSIFICATION	0.9999196653060821	WITHOUT_CLASSIFICATION	8.033469391783895E-5	DESIGN
// TABLE	WITHOUT_CLASSIFICATION	0.9999750220957533	WITHOUT_CLASSIFICATION	2.4977904246706336E-5	DESIGN
//tableName = mappings.getNamingStrategy().propertyToTableName( className, path );	WITHOUT_CLASSIFICATION	0.9999999849813527	WITHOUT_CLASSIFICATION	1.5018647421380052E-8	DESIGN
// SORT	WITHOUT_CLASSIFICATION	0.9999431488638785	WITHOUT_CLASSIFICATION	5.6851136121506226E-5	DESIGN
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999450928644515	WITHOUT_CLASSIFICATION	5.4907135548410835E-5	DESIGN
// unsorted, natural, comparator.class.name	WITHOUT_CLASSIFICATION	0.9999997305551497	WITHOUT_CLASSIFICATION	2.6944485034174336E-7	DESIGN
// ORPHAN DELETE (used for programmer error detection)	WITHOUT_CLASSIFICATION	0.9999991516133493	WITHOUT_CLASSIFICATION	8.483866507880738E-7	DESIGN
// set up second pass	WITHOUT_CLASSIFICATION	0.9999584461252683	WITHOUT_CLASSIFICATION	4.1553874731765354E-5	DESIGN
// an "embedded" component (composite ids and unique) // note that this does not handle nested components	WITHOUT_CLASSIFICATION	0.9996670684778958	WITHOUT_CLASSIFICATION	3.329315221041745E-4	DESIGN
// a nested composite element	WITHOUT_CLASSIFICATION	0.9999884464177277	WITHOUT_CLASSIFICATION	1.1553582272333794E-5	DESIGN
// for an any // we will have to use reflection	WITHOUT_CLASSIFICATION	0.9999812007001052	WITHOUT_CLASSIFICATION	1.87992998948386E-5	DESIGN
//NOTE SPECIAL CASE: // one-to-one constrained=false cannot be proxied, // so default to join and non-lazy	WITHOUT_CLASSIFICATION	0.999999990916315	WITHOUT_CLASSIFICATION	9.083684904069225E-9	DESIGN
// use old (HB 2.1) defaults if outer-join is specified	WITHOUT_CLASSIFICATION	0.9999998974172947	WITHOUT_CLASSIFICATION	1.025827053942722E-7	DESIGN
//lazy = !join;	WITHOUT_CLASSIFICATION	0.9999485746448862	WITHOUT_CLASSIFICATION	5.142535511376452E-5	DESIGN
// GENERATOR	WITHOUT_CLASSIFICATION	0.9999734885315689	WITHOUT_CLASSIFICATION	2.651146843119372E-5	DESIGN
// ID UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999994144121627	WITHOUT_CLASSIFICATION	5.855878373841304E-7	DESIGN
// VERSION UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999985292247665	WITHOUT_CLASSIFICATION	1.470775233476034E-6	DESIGN
// not necessarily a *unique* property reference	WITHOUT_CLASSIFICATION	0.99938535905726	WITHOUT_CLASSIFICATION	6.146409427398884E-4	DESIGN
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999996580859021	WITHOUT_CLASSIFICATION	3.419140978791838E-7	DESIGN
// contained elements:	WITHOUT_CLASSIFICATION	0.9999973464693737	WITHOUT_CLASSIFICATION	2.6535306263690607E-6	DESIGN
// for non-inverse one-to-many, with a not-null fk, add a backref!	WITHOUT_CLASSIFICATION	0.9999856073653406	WITHOUT_CLASSIFICATION	1.439263465948227E-5	DESIGN
// Bind the where	WITHOUT_CLASSIFICATION	0.999989429020896	WITHOUT_CLASSIFICATION	1.0570979104055452E-5	DESIGN
// Bind the order-by	WITHOUT_CLASSIFICATION	0.9999995222726636	WITHOUT_CLASSIFICATION	4.777273362430639E-7	DESIGN
// Bind the filters	WITHOUT_CLASSIFICATION	0.9999982331232139	WITHOUT_CLASSIFICATION	1.7668767860528443E-6	DESIGN
// overriding inherited meta attribute. HBX-621 & HBX-793	WITHOUT_CLASSIFICATION	0.9999732595261436	WITHOUT_CLASSIFICATION	2.6740473856366324E-5	DESIGN
// first, iterate over all elements capable of defining an extends attribute // collecting all found extends references if they cannot be resolved // against the already processed mappings.	WITHOUT_CLASSIFICATION	0.9999999992132105	WITHOUT_CLASSIFICATION	7.867893975811172E-10	DESIGN
// mappings might contain either the "raw" extends name (in the case of // an entity-name mapping) or a FQN (in the case of a POJO mapping).	WITHOUT_CLASSIFICATION	0.999999995469513	WITHOUT_CLASSIFICATION	4.530486991656985E-9	DESIGN
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.8535600494787972	WITHOUT_CLASSIFICATION	0.14643995052120296	DESIGN
//SessionFactory name:	WITHOUT_CLASSIFICATION	0.9999409471649173	WITHOUT_CLASSIFICATION	5.905283508260264E-5	DESIGN
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.99991072955039	WITHOUT_CLASSIFICATION	8.927044960999227E-5	DESIGN
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.99991072955039	WITHOUT_CLASSIFICATION	8.927044960999227E-5	DESIGN
//Interrogate JDBC metadata	WITHOUT_CLASSIFICATION	0.9999984902047042	WITHOUT_CLASSIFICATION	1.5097952957607719E-6	DESIGN
// user supplied JDBC connections	WITHOUT_CLASSIFICATION	0.9999994768832852	WITHOUT_CLASSIFICATION	5.231167149143521E-7	DESIGN
//use dialect default properties	WITHOUT_CLASSIFICATION	0.9999990592665858	WITHOUT_CLASSIFICATION	9.407334142457531E-7	DESIGN
// Transaction settings:	WITHOUT_CLASSIFICATION	0.999748219795271	WITHOUT_CLASSIFICATION	2.517802047290894E-4	DESIGN
//SQL Generation settings:	WITHOUT_CLASSIFICATION	0.9979436745871689	WITHOUT_CLASSIFICATION	0.0020563254128310236	DESIGN
//Query parser settings:	WITHOUT_CLASSIFICATION	0.994780721861012	WITHOUT_CLASSIFICATION	0.00521927813898796	DESIGN
// Second-level / query cache:	WITHOUT_CLASSIFICATION	0.9999960874714653	WITHOUT_CLASSIFICATION	3.912528534684974E-6	DESIGN
// The cache provider is needed when we either have second-level cache enabled // or query cache enabled.  Note that useSecondLevelCache is enabled by default	WITHOUT_CLASSIFICATION	0.999997436681774	WITHOUT_CLASSIFICATION	2.563318225979169E-6	DESIGN
//SQL Exception converter:	WITHOUT_CLASSIFICATION	0.9996319705993739	WITHOUT_CLASSIFICATION	3.680294006259749E-4	DESIGN
//Statistics and logging:	WITHOUT_CLASSIFICATION	0.9998493867576169	WITHOUT_CLASSIFICATION	1.5061324238296249E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9959144787197332	WITHOUT_CLASSIFICATION	0.004085521280266773	DESIGN
//	WITHOUT_CLASSIFICATION	0.9959144787197332	WITHOUT_CLASSIFICATION	0.004085521280266773	DESIGN
//Schema export:	WITHOUT_CLASSIFICATION	0.9999980092270342	WITHOUT_CLASSIFICATION	1.9907729658373363E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.9959144787197332	WITHOUT_CLASSIFICATION	0.004085521280266773	DESIGN
// legacy behavior, apply the bridge...	WITHOUT_CLASSIFICATION	0.999997966252159	WITHOUT_CLASSIFICATION	2.0337478410722815E-6	DESIGN
// maybe a concrete SQLpropertyresult type, but Map is exactly what is required at the moment	WITHOUT_CLASSIFICATION	0.9719634771392789	WITHOUT_CLASSIFICATION	0.02803652286072111	DESIGN
//if dotted and not load-collection nor return-join //regular property	WITHOUT_CLASSIFICATION	0.9999998050023461	WITHOUT_CLASSIFICATION	1.9499765396879358E-7	DESIGN
//	WITHOUT_CLASSIFICATION	0.9959144787197332	WITHOUT_CLASSIFICATION	0.004085521280266773	DESIGN
// public getters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9988057358998923	WITHOUT_CLASSIFICATION	0.0011942641001077227	DESIGN
//	WITHOUT_CLASSIFICATION	0.9959144787197332	WITHOUT_CLASSIFICATION	0.004085521280266773	DESIGN
// package protected setters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998743633895831	WITHOUT_CLASSIFICATION	1.256366104168464E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9959144787197332	WITHOUT_CLASSIFICATION	0.004085521280266773	DESIGN
//	WITHOUT_CLASSIFICATION	0.9959144787197332	WITHOUT_CLASSIFICATION	0.004085521280266773	DESIGN
// using local since the inheritedMetas at this point is not the correct map since it is always the empty map	WITHOUT_CLASSIFICATION	0.9999997482537563	WITHOUT_CLASSIFICATION	2.517462437968274E-7	DESIGN
//	WITHOUT_CLASSIFICATION	0.9959144787197332	WITHOUT_CLASSIFICATION	0.004085521280266773	DESIGN
//	WITHOUT_CLASSIFICATION	0.9959144787197332	WITHOUT_CLASSIFICATION	0.004085521280266773	DESIGN
//	WITHOUT_CLASSIFICATION	0.9959144787197332	WITHOUT_CLASSIFICATION	0.004085521280266773	DESIGN
//	WITHOUT_CLASSIFICATION	0.9959144787197332	WITHOUT_CLASSIFICATION	0.004085521280266773	DESIGN
// if doc is null, then for whatever reason, the cached file cannot be used...	WITHOUT_CLASSIFICATION	0.9999929197484554	WITHOUT_CLASSIFICATION	7.080251544620608E-6	DESIGN
// drop them in reverse order in case db needs it done that way...	WITHOUT_CLASSIFICATION	0.9916332500547501	WITHOUT_CLASSIFICATION	0.008366749945249925	DESIGN
//	WITHOUT_CLASSIFICATION	0.9959144787197332	WITHOUT_CLASSIFICATION	0.004085521280266773	DESIGN
// This method may be called many times!!	WITHOUT_CLASSIFICATION	0.9650743274324963	WITHOUT_CLASSIFICATION	0.034925672567503736	DESIGN
//	WITHOUT_CLASSIFICATION	0.9959144787197332	WITHOUT_CLASSIFICATION	0.004085521280266773	DESIGN
//	WITHOUT_CLASSIFICATION	0.9959144787197332	WITHOUT_CLASSIFICATION	0.004085521280266773	DESIGN
// found	WITHOUT_CLASSIFICATION	0.9998793078288886	WITHOUT_CLASSIFICATION	1.2069217111145461E-4	DESIGN
// found	WITHOUT_CLASSIFICATION	0.9998793078288886	WITHOUT_CLASSIFICATION	1.2069217111145461E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9959144787197332	WITHOUT_CLASSIFICATION	0.004085521280266773	DESIGN
//	WITHOUT_CLASSIFICATION	0.9959144787197332	WITHOUT_CLASSIFICATION	0.004085521280266773	DESIGN
//<String, String>	WITHOUT_CLASSIFICATION	0.9997626246322526	WITHOUT_CLASSIFICATION	2.3737536774744657E-4	DESIGN
//<String, String>	WITHOUT_CLASSIFICATION	0.9997626246322526	WITHOUT_CLASSIFICATION	2.3737536774744657E-4	DESIGN
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.8535600494787972	WITHOUT_CLASSIFICATION	0.14643995052120296	DESIGN
//Set USE_REFLECTION_OPTIMIZER to false to fix HHH-227	WITHOUT_CLASSIFICATION	0.9999936828210185	WITHOUT_CLASSIFICATION	6.317178981494667E-6	DESIGN
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9997090755616432	WITHOUT_CLASSIFICATION	2.9092443835670285E-4	DESIGN
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9999997529915877	WITHOUT_CLASSIFICATION	2.4700841234042047E-7	DESIGN
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999961132284985	WITHOUT_CLASSIFICATION	3.8867715015360775E-6	DESIGN
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9997090755616432	WITHOUT_CLASSIFICATION	2.9092443835670285E-4	DESIGN
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9999997529915877	WITHOUT_CLASSIFICATION	2.4700841234042047E-7	DESIGN
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999912557345069	WITHOUT_CLASSIFICATION	8.744265493129825E-6	DESIGN
//maintain correct duplication if loaded in a cartesian product	WITHOUT_CLASSIFICATION	0.9999999063090939	WITHOUT_CLASSIFICATION	9.369090614977692E-8	DESIGN
// the element has been removed from the set	WITHOUT_CLASSIFICATION	0.9999939173601141	WITHOUT_CLASSIFICATION	6.082639885950448E-6	DESIGN
// the element has changed	WITHOUT_CLASSIFICATION	0.9999991408567134	WITHOUT_CLASSIFICATION	8.591432865975671E-7	DESIGN
//Careful: these methods do not initialize the collection.	WITHOUT_CLASSIFICATION	0.9951943330074124	WITHOUT_CLASSIFICATION	0.00480566699258751	DESIGN
//needed so that we remove this collection from the second-level cache	WITHOUT_CLASSIFICATION	0.9997557094494347	WITHOUT_CLASSIFICATION	2.442905505652898E-4	DESIGN
// override on some subclasses	WITHOUT_CLASSIFICATION	0.9999978097209028	WITHOUT_CLASSIFICATION	2.1902790971285545E-6	DESIGN
//override on some subclasses	WITHOUT_CLASSIFICATION	0.9999278539485447	WITHOUT_CLASSIFICATION	7.214605145526497E-5	DESIGN
//do this bit after setting initialized to true or it will recurse	WITHOUT_CLASSIFICATION	0.9983296591102018	WITHOUT_CLASSIFICATION	0.0016703408897982355	DESIGN
// short-circuit(s) // no new elements, the old list contains only Orphans // no old elements, so no Orphans neither	WITHOUT_CLASSIFICATION	0.9999999847137673	WITHOUT_CLASSIFICATION	1.5286232779768545E-8	DESIGN
// create the collection holding the Orphans	WITHOUT_CLASSIFICATION	0.999999971530983	WITHOUT_CLASSIFICATION	2.8469016959255505E-8	DESIGN
// collect EntityIdentifier(s) of the *current* elements - add them into a HashSet for fast access	WITHOUT_CLASSIFICATION	0.9999993906510093	WITHOUT_CLASSIFICATION	6.093489907227326E-7	DESIGN
// iterate over the *old* list	WITHOUT_CLASSIFICATION	0.9999995364721396	WITHOUT_CLASSIFICATION	4.63527860439938E-7	DESIGN
/*(array==null) ? tempList.size() :*/	WITHOUT_CLASSIFICATION	0.9999837233459167	WITHOUT_CLASSIFICATION	1.627665408339482E-5	DESIGN
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999961132284985	WITHOUT_CLASSIFICATION	3.8867715015360775E-6	DESIGN
/*(array==null) ? tempList.get(i) :*/	WITHOUT_CLASSIFICATION	0.9999736896247081	WITHOUT_CLASSIFICATION	2.6310375291939846E-5	DESIGN
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9996269756762035	WITHOUT_CLASSIFICATION	3.7302432379645244E-4	DESIGN
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9996269756762035	WITHOUT_CLASSIFICATION	3.7302432379645244E-4	DESIGN
// amazingly, these two will work because AbstractCollection // uses iterator() to fill the array	WITHOUT_CLASSIFICATION	0.9999003383634611	WITHOUT_CLASSIFICATION	9.966163653889185E-5	DESIGN
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999912557345069	WITHOUT_CLASSIFICATION	8.744265493129825E-6	DESIGN
// finally, what it's all about...	WITHOUT_CLASSIFICATION	0.9979934637884571	WITHOUT_CLASSIFICATION	0.0020065362115428533	DESIGN
// note that if we load this collection from a cartesian product // the multiplicity would be broken ... so use an idbag instead	WITHOUT_CLASSIFICATION	0.9909825447216959	DESIGN	0.009017455278304077	WITHOUT_CLASSIFICATION
// Anyway, here we implement <set> semantics for a // <one-to-many> <bag>!	WITHOUT_CLASSIFICATION	0.9999339082070963	WITHOUT_CLASSIFICATION	6.609179290373277E-5	DESIGN
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999997111322155	WITHOUT_CLASSIFICATION	2.888677844671943E-7	DESIGN
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9997742213313381	WITHOUT_CLASSIFICATION	2.2577866866182108E-4	DESIGN
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999912557345069	WITHOUT_CLASSIFICATION	8.744265493129825E-6	DESIGN
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999997111322155	WITHOUT_CLASSIFICATION	2.888677844671943E-7	DESIGN
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9997742213313381	WITHOUT_CLASSIFICATION	2.2577866866182108E-4	DESIGN
/*public boolean equals(Object other) {	WITHOUT_CLASSIFICATION	0.9999734064952079	WITHOUT_CLASSIFICATION	2.6593504792083257E-5	DESIGN
// List OPERATIONS:	WITHOUT_CLASSIFICATION	0.9999984647986958	WITHOUT_CLASSIFICATION	1.5352013041203911E-6	DESIGN
//pad with nulls from the current last element up to the new index	WITHOUT_CLASSIFICATION	0.9999997953685387	WITHOUT_CLASSIFICATION	2.0463146141797924E-7	DESIGN
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999912557345069	WITHOUT_CLASSIFICATION	8.744265493129825E-6	DESIGN
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999912557345069	WITHOUT_CLASSIFICATION	8.744265493129825E-6	DESIGN
// from Map	WITHOUT_CLASSIFICATION	0.9999909517135693	WITHOUT_CLASSIFICATION	9.048286430598078E-6	DESIGN
// from SortedMap	WITHOUT_CLASSIFICATION	0.9999928846690105	WITHOUT_CLASSIFICATION	7.115330989541072E-6	DESIGN
//inject the data	WITHOUT_CLASSIFICATION	0.9998900046297691	WITHOUT_CLASSIFICATION	1.0999537023094348E-4	DESIGN
// cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999801991114499	WITHOUT_CLASSIFICATION	1.9800888550122372E-5	DESIGN
//default pool size 20	WITHOUT_CLASSIFICATION	0.9999985382318951	WITHOUT_CLASSIFICATION	1.4617681049797309E-6	DESIGN
// trying via forName() first to be as close to DriverManager's semantics	WITHOUT_CLASSIFICATION	0.9999999994673718	WITHOUT_CLASSIFICATION	5.326281306649827E-10	DESIGN
// if debug level is enabled, then log the password, otherwise mask it	WITHOUT_CLASSIFICATION	0.9999999785835902	WITHOUT_CLASSIFICATION	2.141640972988649E-8	DESIGN
// register a cleanup synch	WITHOUT_CLASSIFICATION	0.9999215446556856	WITHOUT_CLASSIFICATION	7.845534431430995E-5	DESIGN
// wrap the session in the transaction-protection proxy	WITHOUT_CLASSIFICATION	0.9999999526229494	WITHOUT_CLASSIFICATION	4.737705055881359E-8	DESIGN
// then bind it	WITHOUT_CLASSIFICATION	0.999878111762389	WITHOUT_CLASSIFICATION	1.2188823761084484E-4	DESIGN
// try to make sure we don't wrap and already wrapped session	WITHOUT_CLASSIFICATION	0.999999592501416	WITHOUT_CLASSIFICATION	4.0749858390482766E-7	DESIGN
// allow these to go through the the real session no matter what	WITHOUT_CLASSIFICATION	0.9999964529522256	WITHOUT_CLASSIFICATION	3.5470477744850563E-6	DESIGN
// limit the methods available if no transaction is active	WITHOUT_CLASSIFICATION	0.999999756831078	WITHOUT_CLASSIFICATION	2.431689218939798E-7	DESIGN
// allow these (deprecated) methods to pass through	WITHOUT_CLASSIFICATION	0.9999869034275478	WITHOUT_CLASSIFICATION	1.3096572452176903E-5	DESIGN
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998269163071	WITHOUT_CLASSIFICATION	1.7308369292031632E-7	DESIGN
// We could register the session against the transaction even though it is // not started, but we'd have no guarentee of ever getting the map // entries cleaned up (aside from spawning threads).	WITHOUT_CLASSIFICATION	0.9999989853330944	WITHOUT_CLASSIFICATION	1.014666905596417E-6	DESIGN
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9995273271319045	WITHOUT_CLASSIFICATION	4.726728680953928E-4	DESIGN
//private String propertyName;	WITHOUT_CLASSIFICATION	0.9999867463141885	WITHOUT_CLASSIFICATION	1.3253685811477498E-5	DESIGN
/*public PropertyProjection project() {	WITHOUT_CLASSIFICATION	0.9913586696101309	WITHOUT_CLASSIFICATION	0.008641330389869127	DESIGN
//String[] fk = StringHelper.qualify( "collection_", cp.getKeyColumnNames() );	WITHOUT_CLASSIFICATION	0.9999999994442664	WITHOUT_CLASSIFICATION	5.557336515915316E-10	DESIGN
//" collection_ where " +	WITHOUT_CLASSIFICATION	0.9999995393116526	WITHOUT_CLASSIFICATION	4.606883472912397E-7	DESIGN
//unsupported	WITHOUT_CLASSIFICATION	0.9999619931536124	WITHOUT_CLASSIFICATION	3.800684638757134E-5	DESIGN
//unsupported	WITHOUT_CLASSIFICATION	0.9999619931536124	WITHOUT_CLASSIFICATION	3.800684638757134E-5	DESIGN
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9995273271319045	WITHOUT_CLASSIFICATION	4.726728680953928E-4	DESIGN
//the following two lines were added to ensure that this.params is not null, which //can happen with two-deep nested subqueries	WITHOUT_CLASSIFICATION	0.9999942659476158	WITHOUT_CLASSIFICATION	5.734052384259276E-6	DESIGN
//with two-deep subqueries, the same alias would get generated for //both using the old method (criteriaQuery.generateSQLAlias()), so //that is now used as a fallback if the main criteria alias isn't set	WITHOUT_CLASSIFICATION	0.6910249656659269	WITHOUT_CLASSIFICATION	0.3089750343340731	DESIGN
//implicit polymorphism not supported (would need a union)	WITHOUT_CLASSIFICATION	0.9875726706173554	WITHOUT_CLASSIFICATION	0.012427329382644509	DESIGN
//pull off the last ", "	WITHOUT_CLASSIFICATION	0.9999976898894553	WITHOUT_CLASSIFICATION	2.3101105448226645E-6	DESIGN
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999526688317352	WITHOUT_CLASSIFICATION	4.733116826478444E-5	DESIGN
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces	WITHOUT_CLASSIFICATION	0.9999896213088478	WITHOUT_CLASSIFICATION	1.0378691152146404E-5	DESIGN
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource)	WITHOUT_CLASSIFICATION	0.9972030705558149	WITHOUT_CLASSIFICATION	0.002796929444185196	DESIGN
// NOT_SUPPORTED_SHOULD_USE_JDBC3_PreparedStatement.getGeneratedKeys_method	WITHOUT_CLASSIFICATION	0.9999984846202041	WITHOUT_CLASSIFICATION	1.5153797958840218E-6	DESIGN
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.999999997710186	WITHOUT_CLASSIFICATION	2.2898138903289264E-9	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998604044337	WITHOUT_CLASSIFICATION	1.3959556637050745E-7	DESIGN
// Oracle did add support for ANSI CASE statements in 9i	WITHOUT_CLASSIFICATION	0.9999991521628615	WITHOUT_CLASSIFICATION	8.478371385308315E-7	DESIGN
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999997883020206	WITHOUT_CLASSIFICATION	2.1169797922172464E-7	DESIGN
// Informix doesn't have a bit type	WITHOUT_CLASSIFICATION	0.9999730089740795	WITHOUT_CLASSIFICATION	2.699102592049277E-5	DESIGN
// or BYTE // or TEXT? // or MONEY	WITHOUT_CLASSIFICATION	0.9999887192757537	WITHOUT_CLASSIFICATION	1.128072424631486E-5	DESIGN
// strip table-owner because Informix always returns constraint names as "<table-owner>.<constraint-name>"	WITHOUT_CLASSIFICATION	0.9999999997394406	WITHOUT_CLASSIFICATION	2.60559432732721E-10	DESIGN
// build the map of standard ANSI SQL aggregation functions ~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999997961727	WITHOUT_CLASSIFICATION	2.0382720358339798E-10	DESIGN
//pre H3.2 behavior: super.getReturnType(ct, m);	WITHOUT_CLASSIFICATION	0.9999346608491736	WITHOUT_CLASSIFICATION	6.53391508264029E-5	DESIGN
// finally use the sqltype if == on Hibernate types did not find a match.	WITHOUT_CLASSIFICATION	0.9999994589613277	WITHOUT_CLASSIFICATION	5.410386722548708E-7	DESIGN
//because numeric can be anything	WITHOUT_CLASSIFICATION	0.9999909710507793	WITHOUT_CLASSIFICATION	9.02894922071617E-6	DESIGN
// constructors and factory methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9987403709444214	WITHOUT_CLASSIFICATION	0.001259629055578621	DESIGN
// standard sql92 functions (can be overridden by subclasses)	WITHOUT_CLASSIFICATION	0.9999999588243291	WITHOUT_CLASSIFICATION	4.1175670954818014E-8	DESIGN
//map second/minute/hour/day/month/year to ANSI extract(), override on subclasses	WITHOUT_CLASSIFICATION	0.9999932911957465	WITHOUT_CLASSIFICATION	6.708804253484405E-6	DESIGN
// register hibernate types for default use in scalar sqlquery type auto detection	WITHOUT_CLASSIFICATION	0.9999941799308083	WITHOUT_CLASSIFICATION	5.820069191635207E-6	DESIGN
// database type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995522554825	WITHOUT_CLASSIFICATION	4.477445174581162E-7	DESIGN
// hibernate type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999568122187004	WITHOUT_CLASSIFICATION	4.3187781299555656E-5	DESIGN
// keyword support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999995945195949	WITHOUT_CLASSIFICATION	4.054804050901478E-6	DESIGN
// native identifier generatiion ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999887453499012	WITHOUT_CLASSIFICATION	1.1254650098854107E-5	DESIGN
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999988742929327	WITHOUT_CLASSIFICATION	1.1257070673227903E-6	DESIGN
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999963649918933	WITHOUT_CLASSIFICATION	3.6350081066233425E-6	DESIGN
// GUID support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999847152621774	WITHOUT_CLASSIFICATION	1.5284737822723533E-5	DESIGN
// limit/offset support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999998162045873	WITHOUT_CLASSIFICATION	1.8379541269088734E-6	DESIGN
// by default we report no support	WITHOUT_CLASSIFICATION	0.9999818252749045	WITHOUT_CLASSIFICATION	1.817472509550843E-5	DESIGN
// by default we report no support for NOWAIT lock semantics	WITHOUT_CLASSIFICATION	0.9999716203238347	WITHOUT_CLASSIFICATION	2.8379676165286553E-5	DESIGN
// table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997776972085	WITHOUT_CLASSIFICATION	2.2230279142789435E-7	DESIGN
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999990219943528	WITHOUT_CLASSIFICATION	9.780056472247507E-7	DESIGN
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999961521020432	WITHOUT_CLASSIFICATION	3.84789795686999E-6	DESIGN
// current timestamp support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998976291189	WITHOUT_CLASSIFICATION	1.0237088116685275E-7	DESIGN
// SQLException support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999682371135616	WITHOUT_CLASSIFICATION	3.176288643836995E-5	DESIGN
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999980579180711	WITHOUT_CLASSIFICATION	1.9420819288848565E-6	DESIGN
// identifier quoting support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999983117732412	WITHOUT_CLASSIFICATION	1.6882267587895176E-6	DESIGN
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999968383485623	WITHOUT_CLASSIFICATION	3.1616514377740213E-6	DESIGN
// grrr... for differentiation of mysql storage engines	WITHOUT_CLASSIFICATION	0.9999999684488085	WITHOUT_CLASSIFICATION	3.1551191512792225E-8	DESIGN
// Informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999922445151	WITHOUT_CLASSIFICATION	7.755484895830007E-8	DESIGN
// return false here, as most databases do not properly support this construct...	WITHOUT_CLASSIFICATION	0.8272974764327384	WITHOUT_CLASSIFICATION	0.1727025235672616	DESIGN
// Mckoi has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999947942913718	WITHOUT_CLASSIFICATION	5.205708628110907E-6	DESIGN
// Oracle8 and previous define only a "DATE" type which //      is used to represent all aspects of date/time	WITHOUT_CLASSIFICATION	0.9999999945265914	WITHOUT_CLASSIFICATION	5.473408631047653E-9	DESIGN
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9966516956769268	WITHOUT_CLASSIFICATION	0.0033483043230731	DESIGN
//" cascade";	WITHOUT_CLASSIFICATION	0.9999056234092627	WITHOUT_CLASSIFICATION	9.437659073733534E-5	DESIGN
//trim off the length/precision/scale	WITHOUT_CLASSIFICATION	0.9999975024413733	WITHOUT_CLASSIFICATION	2.4975586267442456E-6	DESIGN
/*public boolean dropTemporaryTableAfterUse() {	WITHOUT_CLASSIFICATION	0.9898430385378183	WITHOUT_CLASSIFICATION	0.010156961462181736	DESIGN
// CHECK VIOLATION	WITHOUT_CLASSIFICATION	0.9999675863148043	WITHOUT_CLASSIFICATION	3.2413685195680186E-5	DESIGN
// UNIQUE VIOLATION	WITHOUT_CLASSIFICATION	0.999977570349088	WITHOUT_CLASSIFICATION	2.2429650912062285E-5	DESIGN
// FOREIGN KEY VIOLATION	WITHOUT_CLASSIFICATION	0.9999173827576849	WITHOUT_CLASSIFICATION	8.26172423151586E-5	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998604044337	WITHOUT_CLASSIFICATION	1.3959556637050745E-7	DESIGN
// NOT NULL VIOLATION	WITHOUT_CLASSIFICATION	0.9997049978384156	WITHOUT_CLASSIFICATION	2.9500216158446347E-4	DESIGN
// ALL OTHER	WITHOUT_CLASSIFICATION	0.9999479651662972	WITHOUT_CLASSIFICATION	5.203483370260659E-5	DESIGN
// Register the type of the out param - PostgreSQL uses Types.OTHER	WITHOUT_CLASSIFICATION	0.999997590176233	WITHOUT_CLASSIFICATION	2.409823767025777E-6	DESIGN
// seems to not really... //	WITHOUT_CLASSIFICATION	0.9996946877085562	WITHOUT_CLASSIFICATION	3.053122914438376E-4	DESIGN
// seems to have spotty LOB suppport	WITHOUT_CLASSIFICATION	0.9999805294668461	WITHOUT_CLASSIFICATION	1.947053315380791E-5	DESIGN
// HHH-2300	WITHOUT_CLASSIFICATION	0.9998614405299608	WITHOUT_CLASSIFICATION	1.3855947003903432E-4	DESIGN
// ignore (probably H2 not in the classpath)	WITHOUT_CLASSIFICATION	0.9986808533008122	WITHOUT_CLASSIFICATION	0.0013191466991877255	DESIGN
// Numeric Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992248362511	WITHOUT_CLASSIFICATION	7.75163748944317E-7	DESIGN
// String Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999980816290704	WITHOUT_CLASSIFICATION	1.9183709294379046E-6	DESIGN
// Time and Date Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999988918696272	WITHOUT_CLASSIFICATION	1.1081303727865572E-6	DESIGN
// System Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999995490167565	WITHOUT_CLASSIFICATION	4.509832435090973E-6	DESIGN
// not null is implicit	WITHOUT_CLASSIFICATION	0.9976736209289142	WITHOUT_CLASSIFICATION	0.0023263790710857345	DESIGN
// 23000: Check constraint violation: {0} // 23001: Unique index or primary key violation: {0}	WITHOUT_CLASSIFICATION	0.9999999970684117	WITHOUT_CLASSIFICATION	2.9315883326988802E-9	DESIGN
// Display the dialect version.	WITHOUT_CLASSIFICATION	0.9999893123298623	WITHOUT_CLASSIFICATION	1.0687670137745969E-5	DESIGN
// The RDMS concat() function only supports 2 parameters	WITHOUT_CLASSIFICATION	0.9999882354664711	WITHOUT_CLASSIFICATION	1.1764533528943479E-5	DESIGN
// Dialect method overrides ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994449210915	WITHOUT_CLASSIFICATION	5.55078908586482E-7	DESIGN
// Original Dialect.java returns " for update";	WITHOUT_CLASSIFICATION	0.9999995257963589	WITHOUT_CLASSIFICATION	4.742036411158116E-7	DESIGN
// Verify the state of this new method in Hibernate 3.0 Dialect.java	WITHOUT_CLASSIFICATION	0.9997497345062303	WITHOUT_CLASSIFICATION	2.502654937696768E-4	DESIGN
// Origial Dialect.java returns true;	WITHOUT_CLASSIFICATION	0.9999990935064107	WITHOUT_CLASSIFICATION	9.064935891965128E-7	DESIGN
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999978596918649	WITHOUT_CLASSIFICATION	2.140308135099923E-6	DESIGN
// *** Sequence methods - start. The RDMS dialect needs these	WITHOUT_CLASSIFICATION	0.9991817132450816	WITHOUT_CLASSIFICATION	8.182867549184652E-4	DESIGN
// methods to make it possible to use the Native Id generator	WITHOUT_CLASSIFICATION	0.9980365588154375	WITHOUT_CLASSIFICATION	0.0019634411845625235	DESIGN
// The where clause was added to eliminate this statement from Brute Force Searches.	WITHOUT_CLASSIFICATION	0.999974778575856	WITHOUT_CLASSIFICATION	2.5221424143939068E-5	DESIGN
// *** Sequence methods - end	WITHOUT_CLASSIFICATION	0.999180422828641	WITHOUT_CLASSIFICATION	8.195771713590769E-4	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998604044337	WITHOUT_CLASSIFICATION	1.3959556637050745E-7	DESIGN
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9966516956769268	WITHOUT_CLASSIFICATION	0.0033483043230731	DESIGN
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.9989605217629466	WITHOUT_CLASSIFICATION	0.0010394782370533105	DESIGN
// Used with DROP TABLE to delete all records in the table.	WITHOUT_CLASSIFICATION	0.9999993967653683	WITHOUT_CLASSIFICATION	6.032346316212342E-7	DESIGN
// RDMS supports the UNION ALL clause.	WITHOUT_CLASSIFICATION	0.9999986639809132	WITHOUT_CLASSIFICATION	1.336019086834353E-6	DESIGN
// RDMS has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9998948896678193	WITHOUT_CLASSIFICATION	1.0511033218073403E-4	DESIGN
// Multi-param dialect functions...	WITHOUT_CLASSIFICATION	0.9999991361503164	WITHOUT_CLASSIFICATION	8.638496835877985E-7	DESIGN
// function templates	WITHOUT_CLASSIFICATION	0.9999994086992605	WITHOUT_CLASSIFICATION	5.913007395012585E-7	DESIGN
//not null is implicit	WITHOUT_CLASSIFICATION	0.9988830212961517	WITHOUT_CLASSIFICATION	0.0011169787038482443	DESIGN
// this assumes schema support, which is present in 1.8.0 and later...	WITHOUT_CLASSIFICATION	0.9999256758296959	WITHOUT_CLASSIFICATION	7.432417030402048E-5	DESIGN
// HSQLDB only supports READ_UNCOMMITTED transaction isolation	WITHOUT_CLASSIFICATION	0.999992973001471	WITHOUT_CLASSIFICATION	7.026998528902724E-6	DESIGN
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.999998261433825	WITHOUT_CLASSIFICATION	1.7385661749895584E-6	DESIGN
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9999976908504267	WITHOUT_CLASSIFICATION	2.3091495732028667E-6	DESIGN
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999993010178571	WITHOUT_CLASSIFICATION	6.989821429927185E-7	DESIGN
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999668907857965	WITHOUT_CLASSIFICATION	3.310921420357592E-5	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998604044337	WITHOUT_CLASSIFICATION	1.3959556637050745E-7	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998604044337	WITHOUT_CLASSIFICATION	1.3959556637050745E-7	DESIGN
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9999444286946609	WITHOUT_CLASSIFICATION	5.557130533908265E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9959144787197332	WITHOUT_CLASSIFICATION	0.004085521280266773	DESIGN
// TimesTen has no BLOB/CLOB support, but these types may be suitable  // for some applications. The length is limited to 4 million bytes.	WITHOUT_CLASSIFICATION	0.9999333394868839	WITHOUT_CLASSIFICATION	6.666051311620042E-5	DESIGN
// new methods in dialect3	WITHOUT_CLASSIFICATION	0.999905955673345	WITHOUT_CLASSIFICATION	9.404432665499663E-5	DESIGN
/*public boolean supportsForUpdateNowait() {	WITHOUT_CLASSIFICATION	0.9999701146796528	WITHOUT_CLASSIFICATION	2.9885320347179165E-5	DESIGN
// TimesTen has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999960560597295	WITHOUT_CLASSIFICATION	3.943940270428492E-6	DESIGN
// iterate entries ordered by capacity to find first fit	WITHOUT_CLASSIFICATION	0.999999787639557	WITHOUT_CLASSIFICATION	2.1236044312643115E-7	DESIGN
// add new ordered map	WITHOUT_CLASSIFICATION	0.9999999127447253	WITHOUT_CLASSIFICATION	8.725527459830226E-8	DESIGN
//	WITHOUT_CLASSIFICATION	0.9959144787197332	WITHOUT_CLASSIFICATION	0.004085521280266773	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998604044337	WITHOUT_CLASSIFICATION	1.3959556637050745E-7	DESIGN
//	WITHOUT_CLASSIFICATION	0.9959144787197332	WITHOUT_CLASSIFICATION	0.004085521280266773	DESIGN
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999934345634742	WITHOUT_CLASSIFICATION	6.565436525754647E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.9959144787197332	WITHOUT_CLASSIFICATION	0.004085521280266773	DESIGN
//registerColumnType data types	WITHOUT_CLASSIFICATION	0.9999997800654632	WITHOUT_CLASSIFICATION	2.1993453672665106E-7	DESIGN
// hibernate seems to ignore this type...	WITHOUT_CLASSIFICATION	0.9957743384482207	WITHOUT_CLASSIFICATION	0.004225661551779364	DESIGN
// IBID for current_time and current_date	WITHOUT_CLASSIFICATION	0.999999985854032	WITHOUT_CLASSIFICATION	1.4145967828271941E-8	DESIGN
// Tell hibernate to use getBytes instead of getBinaryStream	WITHOUT_CLASSIFICATION	0.9985361969445846	WITHOUT_CLASSIFICATION	0.001463803055415402	DESIGN
// No batch statements	WITHOUT_CLASSIFICATION	0.9999991852479647	WITHOUT_CLASSIFICATION	8.147520353838432E-7	DESIGN
/*	WITHOUT_CLASSIFICATION	0.9402468809369636	WITHOUT_CLASSIFICATION	0.05975311906303642	DESIGN
//no pointbase BIT	WITHOUT_CLASSIFICATION	0.99997910874798	WITHOUT_CLASSIFICATION	2.089125201996567E-5	DESIGN
//no pointbase TINYINT	WITHOUT_CLASSIFICATION	0.9999855390155385	WITHOUT_CLASSIFICATION	1.4460984461515131E-5	DESIGN
// Pointbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999950151961314	WITHOUT_CLASSIFICATION	4.984803868571776E-6	DESIGN
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9966516956769268	WITHOUT_CLASSIFICATION	0.0033483043230731	DESIGN
// The current_timestamp is more accurate, but only known to be supported // in SQL Server 7.0 and later (i.e., Sybase not known to support it at all)	WITHOUT_CLASSIFICATION	0.99999013828289	WITHOUT_CLASSIFICATION	9.861717110040587E-6	DESIGN
// SQL Server (at least up through 2005) does not support defining // cascade delete constraints which can circel back to the mutating // table	WITHOUT_CLASSIFICATION	0.9999743075028861	WITHOUT_CLASSIFICATION	2.56924971139267E-5	DESIGN
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9889335743447987	WITHOUT_CLASSIFICATION	0.011066425655201334	DESIGN
//	WITHOUT_CLASSIFICATION	0.9959144787197332	WITHOUT_CLASSIFICATION	0.004085521280266773	DESIGN
//	WITHOUT_CLASSIFICATION	0.9959144787197332	WITHOUT_CLASSIFICATION	0.004085521280266773	DESIGN
//	WITHOUT_CLASSIFICATION	0.9959144787197332	WITHOUT_CLASSIFICATION	0.004085521280266773	DESIGN
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9966516956769268	WITHOUT_CLASSIFICATION	0.0033483043230731	DESIGN
/* package-private */	WITHOUT_CLASSIFICATION	0.9999009904357758	WITHOUT_CLASSIFICATION	9.900956422420452E-5	DESIGN
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999934345634742	WITHOUT_CLASSIFICATION	6.565436525754647E-6	DESIGN
//Sybase BIT type does not support null values	WITHOUT_CLASSIFICATION	0.9996392301107827	WITHOUT_CLASSIFICATION	3.6076988921733273E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9959144787197332	WITHOUT_CLASSIFICATION	0.004085521280266773	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998604044337	WITHOUT_CLASSIFICATION	1.3959556637050745E-7	DESIGN
//	WITHOUT_CLASSIFICATION	0.9959144787197332	WITHOUT_CLASSIFICATION	0.004085521280266773	DESIGN
//not null ... (start with 1) is implicit	WITHOUT_CLASSIFICATION	0.997853584370787	WITHOUT_CLASSIFICATION	0.002146415629213117	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998604044337	WITHOUT_CLASSIFICATION	1.3959556637050745E-7	DESIGN
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.9998548968832259	WITHOUT_CLASSIFICATION	1.4510311677413943E-4	DESIGN
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.999998261433825	WITHOUT_CLASSIFICATION	1.7385661749895584E-6	DESIGN
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9999976908504267	WITHOUT_CLASSIFICATION	2.3091495732028667E-6	DESIGN
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999993010178571	WITHOUT_CLASSIFICATION	6.989821429927185E-7	DESIGN
// add another (inner) nested select // add the main query // close off the inner nested select	WITHOUT_CLASSIFICATION	0.9999999879970861	WITHOUT_CLASSIFICATION	1.2002913833386853E-8	DESIGN
// add the main query	WITHOUT_CLASSIFICATION	0.999998941469015	WITHOUT_CLASSIFICATION	1.0585309849812246E-6	DESIGN
//add the restriction to the outer select	WITHOUT_CLASSIFICATION	0.9999997490401469	WITHOUT_CLASSIFICATION	2.509598531448041E-7	DESIGN
// This assumes you will want to ignore any update counts 	WITHOUT_CLASSIFICATION	0.9991305078073974	WITHOUT_CLASSIFICATION	8.694921926026483E-4	DESIGN
// You may still have other ResultSets or update counts left to process here  // but you can't do it now or the ResultSet you just got will be closed 	WITHOUT_CLASSIFICATION	0.9999771129881335	WITHOUT_CLASSIFICATION	2.2887011866436253E-5	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998604044337	WITHOUT_CLASSIFICATION	1.3959556637050745E-7	DESIGN
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9966516956769268	WITHOUT_CLASSIFICATION	0.0033483043230731	DESIGN
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999668907857965	WITHOUT_CLASSIFICATION	3.310921420357592E-5	DESIGN
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9999444286946609	WITHOUT_CLASSIFICATION	5.557130533908265E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9959144787197332	WITHOUT_CLASSIFICATION	0.004085521280266773	DESIGN
// features which change between 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999953969808317	WITHOUT_CLASSIFICATION	4.60301916828757E-6	DESIGN
// features which remain constant across 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998370508391	WITHOUT_CLASSIFICATION	1.6294916084747386E-7	DESIGN
// binary %Stream // character %Stream	WITHOUT_CLASSIFICATION	0.9999996568867653	WITHOUT_CLASSIFICATION	3.4311323475229897E-7	DESIGN
//getDefaultProperties().setProperty(Environment.STATEMENT_BATCH_SIZE, NO_BATCH);	WITHOUT_CLASSIFICATION	0.9999998227209408	WITHOUT_CLASSIFICATION	1.772790593204565E-7	DESIGN
// hibernate impelemnts cast in Dialect.java	WITHOUT_CLASSIFICATION	0.9999136001992724	WITHOUT_CLASSIFICATION	8.639980072760869E-5	DESIGN
// aggregate functions shouldn't be registered, right? //registerFunction( "list", new StandardSQLFunction("list",Hibernate.STRING) ); // stopped on $list	WITHOUT_CLASSIFICATION	0.999916407490675	WITHOUT_CLASSIFICATION	8.359250932493909E-5	DESIGN
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999968383485623	WITHOUT_CLASSIFICATION	3.1616514377740213E-6	DESIGN
// below is for Cache' that don't have str in 2007.1 there is str and we register str directly	WITHOUT_CLASSIFICATION	0.999994876052887	WITHOUT_CLASSIFICATION	5.123947113077142E-6	DESIGN
// note that %string is deprecated	WITHOUT_CLASSIFICATION	0.9920055545960724	WITHOUT_CLASSIFICATION	0.007994445403927596	DESIGN
// %upper is deprecated	WITHOUT_CLASSIFICATION	0.995875006688061	WITHOUT_CLASSIFICATION	0.004124993311939092	DESIGN
// The syntax used to add a foreign key constraint to a table.	WITHOUT_CLASSIFICATION	0.9999991113548936	WITHOUT_CLASSIFICATION	8.886451064422248E-7	DESIGN
// identifier-commalist	WITHOUT_CLASSIFICATION	0.9999997707494351	WITHOUT_CLASSIFICATION	2.2925056483259646E-7	DESIGN
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999988742929327	WITHOUT_CLASSIFICATION	1.1257070673227903E-6	DESIGN
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999963649918933	WITHOUT_CLASSIFICATION	3.6350081066233425E-6	DESIGN
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999990219943528	WITHOUT_CLASSIFICATION	9.780056472247507E-7	DESIGN
// identifier-commalist	WITHOUT_CLASSIFICATION	0.9999997707494351	WITHOUT_CLASSIFICATION	2.2925056483259646E-7	DESIGN
// The syntax used to add a column to a table	WITHOUT_CLASSIFICATION	0.9999505008432165	WITHOUT_CLASSIFICATION	4.949915678352277E-5	DESIGN
// Completely optional cascading drop clause.	WITHOUT_CLASSIFICATION	0.9999999619226676	WITHOUT_CLASSIFICATION	3.8077332410154844E-8	DESIGN
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993790582117	WITHOUT_CLASSIFICATION	6.209417883021285E-7	DESIGN
// LIMIT support (ala TOP) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999912646589219	WITHOUT_CLASSIFICATION	8.73534107816882E-6	DESIGN
// InterSystems Cache' does not current support "SELECT ... FOR UPDATE" syntax... // Set your transaction mode to READ_COMMITTED before using	WITHOUT_CLASSIFICATION	0.9999997877963617	WITHOUT_CLASSIFICATION	2.12203638398871E-7	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998604044337	WITHOUT_CLASSIFICATION	1.3959556637050745E-7	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998604044337	WITHOUT_CLASSIFICATION	1.3959556637050745E-7	DESIGN
/*<String>*/	WITHOUT_CLASSIFICATION	0.9998450935349268	WITHOUT_CLASSIFICATION	1.5490646507325035E-4	DESIGN
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999961521020432	WITHOUT_CLASSIFICATION	3.84789795686999E-6	DESIGN
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999980579180711	WITHOUT_CLASSIFICATION	1.9420819288848565E-6	DESIGN
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999978596918649	WITHOUT_CLASSIFICATION	2.140308135099923E-6	DESIGN
// Does the LIMIT clause come at the start of the SELECT statement, rather than at the end?	WITHOUT_CLASSIFICATION	0.9999892785248493	WITHOUT_CLASSIFICATION	1.0721475150734973E-5	DESIGN
// Does the LIMIT clause take a "maximum" row number instead of a total number of returned rows?	WITHOUT_CLASSIFICATION	0.9998848993107641	WITHOUT_CLASSIFICATION	1.1510068923598474E-4	DESIGN
// The name of the SQL function that transforms a string to lowercase	WITHOUT_CLASSIFICATION	0.9999999483840211	WITHOUT_CLASSIFICATION	5.161597899169848E-8	DESIGN
// Create an OuterJoinGenerator for this dialect.	WITHOUT_CLASSIFICATION	0.9999991045427246	WITHOUT_CLASSIFICATION	8.954572755215987E-7	DESIGN
// The keyword used to insert a row without specifying // any column values	WITHOUT_CLASSIFICATION	0.9999385071264795	WITHOUT_CLASSIFICATION	6.149287352052718E-5	DESIGN
//registerFunction( "trim", new StandardSQLFunction( "trim", Hibernate.STRING ) );	WITHOUT_CLASSIFICATION	0.9999999471122415	WITHOUT_CLASSIFICATION	5.288775854791475E-8	DESIGN
//skip the FROM keyword in params	WITHOUT_CLASSIFICATION	0.9999286476883679	WITHOUT_CLASSIFICATION	7.135231163213766E-5	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.9993844224900065	WITHOUT_CLASSIFICATION	6.155775099936293E-4	DESIGN
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.999999997710186	WITHOUT_CLASSIFICATION	2.2898138903289264E-9	DESIGN
// SQLFunction implementation	WITHOUT_CLASSIFICATION	0.9999965789760294	WITHOUT_CLASSIFICATION	3.4210239706660613E-6	DESIGN
// conceivable that the dialect ctor could throw HibernateExceptions, so don't re-wrap	WITHOUT_CLASSIFICATION	0.9996594519835721	WITHOUT_CLASSIFICATION	3.4054801642784105E-4	DESIGN
// register the standard dialect resolver	WITHOUT_CLASSIFICATION	0.9999999333698592	WITHOUT_CLASSIFICATION	6.66301408791594E-8	DESIGN
// register resolvers set via Environment property	WITHOUT_CLASSIFICATION	0.999999563107309	WITHOUT_CLASSIFICATION	4.368926909379105E-7	DESIGN
// kept for backward compatibility until after the 3.1beta5 release of HA	WITHOUT_CLASSIFICATION	0.9999975673373213	WITHOUT_CLASSIFICATION	2.4326626787026244E-6	DESIGN
//cache the hashcode	WITHOUT_CLASSIFICATION	0.9997283978908239	WITHOUT_CLASSIFICATION	2.7160210917603515E-4	DESIGN
// the CascadingAction contract ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999857818527524	WITHOUT_CLASSIFICATION	1.4218147247587328E-5	DESIGN
// the CascadingAction implementations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999903406087097	WITHOUT_CLASSIFICATION	9.659391290394975E-6	DESIGN
// delete does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999971529107651	WITHOUT_CLASSIFICATION	2.8470892349263507E-6	DESIGN
// orphans should be deleted during delete	WITHOUT_CLASSIFICATION	0.9998566357646749	WITHOUT_CLASSIFICATION	1.4336423532512515E-4	DESIGN
/*(LockMode) anything*/	WITHOUT_CLASSIFICATION	0.9990733720106354	WITHOUT_CLASSIFICATION	9.266279893646077E-4	DESIGN
// lock doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999930222165816	WITHOUT_CLASSIFICATION	6.977783418473678E-6	DESIGN
// refresh doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999970222877281	WITHOUT_CLASSIFICATION	2.9777122718535035E-6	DESIGN
// evicts don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999830202790697	WITHOUT_CLASSIFICATION	1.6979720930268087E-5	DESIGN
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.999988178227033	WITHOUT_CLASSIFICATION	1.1821772966914018E-5	DESIGN
// orphans should be deleted during save/update	WITHOUT_CLASSIFICATION	0.999956419127709	WITHOUT_CLASSIFICATION	4.358087229086249E-5	DESIGN
// for deprecated saveOrUpdateCopy()	WITHOUT_CLASSIFICATION	0.9999876493887385	WITHOUT_CLASSIFICATION	1.2350611261516974E-5	DESIGN
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999788611837389	WITHOUT_CLASSIFICATION	2.1138816261112338E-5	DESIGN
//a proxy cannot be transient and it breaks ForeignKeys.isTransient	WITHOUT_CLASSIFICATION	0.9999526427067194	WITHOUT_CLASSIFICATION	4.735729328069766E-5	DESIGN
// replicate does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999989845847577	WITHOUT_CLASSIFICATION	1.0154152423381953E-6	DESIGN
// static helper methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999393126189676	WITHOUT_CLASSIFICATION	6.068738103230087E-5	DESIGN
// handles arrays and newly instantiated collections	WITHOUT_CLASSIFICATION	0.9999936447658652	WITHOUT_CLASSIFICATION	6.355234134834292E-6	DESIGN
// Actually the semantics of the next three are really "Bag" // Note that, unlike objects, collection insertions, updates, // deletions are not really remembered between flushes. We // just re-use the same Lists for convenience.	WITHOUT_CLASSIFICATION	0.999999999296096	WITHOUT_CLASSIFICATION	7.039040607636594E-10	DESIGN
// Add these directly to the executions queue	WITHOUT_CLASSIFICATION	0.9999998011049819	WITHOUT_CLASSIFICATION	1.9889501813880278E-7	DESIGN
// continue loop	WITHOUT_CLASSIFICATION	0.9999992182992572	WITHOUT_CLASSIFICATION	7.817007428431463E-7	DESIGN
//sort the updates by fk	WITHOUT_CLASSIFICATION	0.9981673221902223	WITHOUT_CLASSIFICATION	0.0018326778097777646	DESIGN
//sort the updates by pk	WITHOUT_CLASSIFICATION	0.9970191040181469	WITHOUT_CLASSIFICATION	0.0029808959818531434	DESIGN
// the mapping of entity names to their latest batch numbers.	WITHOUT_CLASSIFICATION	0.9999999889543603	WITHOUT_CLASSIFICATION	1.10456398803276E-8	DESIGN
// the map of batch numbers to EntityInsertAction lists	WITHOUT_CLASSIFICATION	0.999999967022773	WITHOUT_CLASSIFICATION	3.297722686475445E-8	DESIGN
//optimize the hash size to eliminate a rehash.	WITHOUT_CLASSIFICATION	0.9999995692704942	WITHOUT_CLASSIFICATION	4.3072950586690794E-7	DESIGN
// the list of entity names that indicate the batch number	WITHOUT_CLASSIFICATION	0.9999999496357331	WITHOUT_CLASSIFICATION	5.0364266785242045E-8	DESIGN
// remove the current element from insertions. It will be added back later.	WITHOUT_CLASSIFICATION	0.9991480585948674	WITHOUT_CLASSIFICATION	8.519414051324998E-4	DESIGN
// the entity associated with the current action.	WITHOUT_CLASSIFICATION	0.9999931361473814	WITHOUT_CLASSIFICATION	6.863852618536055E-6	DESIGN
// There is already an existing batch for this type of entity. // Check to see if the latest batch is acceptable.	WITHOUT_CLASSIFICATION	0.9999999856220609	WITHOUT_CLASSIFICATION	1.4377939188607023E-8	DESIGN
// now rebuild the insertions list. There is a batch for each entry in the name list.	WITHOUT_CLASSIFICATION	0.9999999208765168	WITHOUT_CLASSIFICATION	7.912348322866895E-8	DESIGN
// the current batch number is the latest batch for this entity type.	WITHOUT_CLASSIFICATION	0.9999999323143416	WITHOUT_CLASSIFICATION	6.768565838879516E-8	DESIGN
// loop through all the associations of the current entity and make sure that they are processed // before the current batch number	WITHOUT_CLASSIFICATION	0.9999999771615868	WITHOUT_CLASSIFICATION	2.2838413098133176E-8	DESIGN
// find the batch number associated with the current association, if any.	WITHOUT_CLASSIFICATION	0.9999998752598359	WITHOUT_CLASSIFICATION	1.2474016412411116E-7	DESIGN
// create a new batch for this type. The batch number is the number of current batches.	WITHOUT_CLASSIFICATION	0.9999999111187642	WITHOUT_CLASSIFICATION	8.888123573569455E-8	DESIGN
// loop through all the associated entities and make sure they have been // processed before the latest // batch associated with this entity type.	WITHOUT_CLASSIFICATION	0.9999999984177441	WITHOUT_CLASSIFICATION	1.5822558318212448E-9	DESIGN
// since this entity will now be processed in the latest possible batch, // we can be assured that it will come after all other associations, // there's not need to continue checking.	WITHOUT_CLASSIFICATION	0.9999001213196285	WITHOUT_CLASSIFICATION	9.98786803716457E-5	DESIGN
//cascade to current collection elements	WITHOUT_CLASSIFICATION	0.9999995012611764	WITHOUT_CLASSIFICATION	4.987388235240994E-7	DESIGN
//not really necessary, but good for consistency...	WITHOUT_CLASSIFICATION	0.9988643253045322	WITHOUT_CLASSIFICATION	0.0011356746954678343	DESIGN
// we can't cascade to non-embedded elements	WITHOUT_CLASSIFICATION	0.9999928948887944	WITHOUT_CLASSIFICATION	7.1051112055801835E-6	DESIGN
//a newly instantiated collection can't have orphans	WITHOUT_CLASSIFICATION	0.9999988372405367	WITHOUT_CLASSIFICATION	1.1627594633413235E-6	DESIGN
// handle orphaned entities!!	WITHOUT_CLASSIFICATION	0.996880324651466	WITHOUT_CLASSIFICATION	0.0031196753485339436	DESIGN
// Loaded entity instances, by EntityUniqueKey	WITHOUT_CLASSIFICATION	0.9999672332634674	WITHOUT_CLASSIFICATION	3.27667365326103E-5	DESIGN
// Identity map of EntityEntry instances, by the entity instance	WITHOUT_CLASSIFICATION	0.9999998485226924	WITHOUT_CLASSIFICATION	1.5147730762180694E-7	DESIGN
// Entity proxies, by EntityKey	WITHOUT_CLASSIFICATION	0.999946110743399	WITHOUT_CLASSIFICATION	5.388925660100299E-5	DESIGN
// Snapshots of current database state for entities // that have *not* been loaded	WITHOUT_CLASSIFICATION	0.9999991707581679	WITHOUT_CLASSIFICATION	8.292418319828986E-7	DESIGN
// Identity map of array holder ArrayHolder instances, by the array instance	WITHOUT_CLASSIFICATION	0.9999972736896683	WITHOUT_CLASSIFICATION	2.726310331793813E-6	DESIGN
// Collection wrappers, by the CollectionKey //key=CollectionKey, value=PersistentCollection	WITHOUT_CLASSIFICATION	0.9999999994081357	WITHOUT_CLASSIFICATION	5.918643759538071E-10	DESIGN
// Set of EntityKeys of deleted objects	WITHOUT_CLASSIFICATION	0.9999944842440645	WITHOUT_CLASSIFICATION	5.515755935539049E-6	DESIGN
// properties that we have tried to load, and not found in the database	WITHOUT_CLASSIFICATION	0.9999972070389521	WITHOUT_CLASSIFICATION	2.7929610478532248E-6	DESIGN
// A list of collection wrappers that were instantiating during result set // processing, that we will need to initialize at the end of the query	WITHOUT_CLASSIFICATION	0.999999999922273	WITHOUT_CLASSIFICATION	7.772704174245022E-11	DESIGN
// A container for collections we load up when the owning entity is not // yet loaded ... for now, this is purely transient!	WITHOUT_CLASSIFICATION	0.9999344196202005	WITHOUT_CLASSIFICATION	6.558037979948175E-5	DESIGN
// Downgrade locks	WITHOUT_CLASSIFICATION	0.9999993091495001	WITHOUT_CLASSIFICATION	6.908504998723895E-7	DESIGN
// any earlier proxy takes precedence	WITHOUT_CLASSIFICATION	0.9999955227795753	WITHOUT_CLASSIFICATION	4.477220424844191E-6	DESIGN
//unwrap the object	WITHOUT_CLASSIFICATION	0.9999959452623225	WITHOUT_CLASSIFICATION	4.054737677493695E-6	DESIGN
//initialize + unwrap the object	WITHOUT_CLASSIFICATION	0.9999977575161106	WITHOUT_CLASSIFICATION	2.2424838894775305E-6	DESIGN
//return the proxied object	WITHOUT_CLASSIFICATION	0.9980838933397708	WITHOUT_CLASSIFICATION	0.0019161066602292292	DESIGN
//overwrite old proxy	WITHOUT_CLASSIFICATION	0.9999438186311257	WITHOUT_CLASSIFICATION	5.618136887439993E-5	DESIGN
// early exit...	WITHOUT_CLASSIFICATION	0.999857215314278	WITHOUT_CLASSIFICATION	1.4278468572199833E-4	DESIGN
// or should it actually throw an exception?	WITHOUT_CLASSIFICATION	0.9954988412925233	WITHOUT_CLASSIFICATION	0.0045011587074767455	DESIGN
//treat it just like a new collection	WITHOUT_CLASSIFICATION	0.9999995513785821	WITHOUT_CLASSIFICATION	4.4862141790849573E-7	DESIGN
//do this work only at the very highest level of the load //don't let this method be called recursively	WITHOUT_CLASSIFICATION	0.757965906353794	WITHOUT_CLASSIFICATION	0.24203409364620607	DESIGN
//note that each iteration of the loop may add new elements	WITHOUT_CLASSIFICATION	0.9999999414416518	WITHOUT_CLASSIFICATION	5.855834809980629E-8	DESIGN
//it might be an unwrapped collection reference! //try to find a wrapper (slowish)	WITHOUT_CLASSIFICATION	0.9997412239132353	WITHOUT_CLASSIFICATION	2.5877608676468946E-4	DESIGN
/*public boolean isNonExistant(EntityKey key) {	WITHOUT_CLASSIFICATION	0.9998150309446295	WITHOUT_CLASSIFICATION	1.8496905537051917E-4	DESIGN
/*public boolean isNonExistant(EntityUniqueKey key) {	WITHOUT_CLASSIFICATION	0.9997961864659863	WITHOUT_CLASSIFICATION	2.0381353401374662E-4	DESIGN
// iterate all the entities currently associated with the persistence context.	WITHOUT_CLASSIFICATION	0.9999993591688459	WITHOUT_CLASSIFICATION	6.408311542802982E-7	DESIGN
// does this entity entry pertain to the entity persister in which we are interested (owner)?	WITHOUT_CLASSIFICATION	0.9999505799298338	WITHOUT_CLASSIFICATION	4.9420070166255995E-5	DESIGN
//check if the managed object is the parent	WITHOUT_CLASSIFICATION	0.9984730730929318	WITHOUT_CLASSIFICATION	0.001526926907068203	DESIGN
// otherwise, the proxy was pruned during the serialization process	WITHOUT_CLASSIFICATION	0.9999995141721411	WITHOUT_CLASSIFICATION	4.85827859000221E-7	DESIGN
// adds remove as a sort-of alias for delete...	WITHOUT_CLASSIFICATION	0.9999990462373807	WITHOUT_CLASSIFICATION	9.537626192724078E-7	DESIGN
//bad cast	WITHOUT_CLASSIFICATION	0.9748094192509594	WITHOUT_CLASSIFICATION	0.02519058074904054	DESIGN
//return lhsPersister.getSubclassPropertyColumnNames(property);	WITHOUT_CLASSIFICATION	0.9999997531342267	WITHOUT_CLASSIFICATION	2.468657731816938E-7	DESIGN
//property-refs for associations defined on a //component are not supported, so no need to slice	WITHOUT_CLASSIFICATION	0.9999999837791932	WITHOUT_CLASSIFICATION	1.6220806837001177E-8	DESIGN
//if there is no property-ref, assume the join //is to the subclass table (ie. the table of the //subclass that the association belongs to)	WITHOUT_CLASSIFICATION	0.9999998899582213	WITHOUT_CLASSIFICATION	1.1004177862336395E-7	DESIGN
//handle a property-ref	WITHOUT_CLASSIFICATION	0.9999771766483971	WITHOUT_CLASSIFICATION	2.2823351602825483E-5	DESIGN
/*NativeSQLQueryReturn*/	WITHOUT_CLASSIFICATION	0.997808934942565	WITHOUT_CLASSIFICATION	0.002191065057435098	DESIGN
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999999571287937	WITHOUT_CLASSIFICATION	4.2871206185152065E-8	DESIGN
// why is all others non final ?	WITHOUT_CLASSIFICATION	0.9991392305244964	WITHOUT_CLASSIFICATION	8.607694755036582E-4	DESIGN
//this.forceCacheRefresh = forceCacheRefresh;	WITHOUT_CLASSIFICATION	0.9999995459816445	WITHOUT_CLASSIFICATION	4.5401835550940154E-7	DESIGN
// HELLA IMPORTANT OPTIMIZATION!!!	WITHOUT_CLASSIFICATION	0.9982998200315643	WITHOUT_CLASSIFICATION	0.0017001799684357593	DESIGN
/*return that.type.equals(type) && 	WITHOUT_CLASSIFICATION	0.999986874988369	WITHOUT_CLASSIFICATION	1.3125011630969546E-5	DESIGN
//Must occur after resolving identifiers!	WITHOUT_CLASSIFICATION	0.9999985101872035	WITHOUT_CLASSIFICATION	1.4898127964477162E-6	DESIGN
//take a snapshot	WITHOUT_CLASSIFICATION	0.9999176840010361	WITHOUT_CLASSIFICATION	8.231599896397942E-5	DESIGN
// do a check	WITHOUT_CLASSIFICATION	0.9999985139151615	WITHOUT_CLASSIFICATION	1.4860848385870846E-6	DESIGN
// the owning entity may have been deleted and its identifier unset due to // identifier-rollback; in which case, try to look up its identifier from // the persistence context	WITHOUT_CLASSIFICATION	0.9999970316724022	WITHOUT_CLASSIFICATION	2.9683275978322404E-6	DESIGN
// do the work	WITHOUT_CLASSIFICATION	0.9999492905111705	WITHOUT_CLASSIFICATION	5.070948882957608E-5	DESIGN
// We've been here before	WITHOUT_CLASSIFICATION	0.9999501822962724	WITHOUT_CLASSIFICATION	4.9817703727592625E-5	DESIGN
// it is or was referenced _somewhere_	WITHOUT_CLASSIFICATION	0.999984469904013	WITHOUT_CLASSIFICATION	1.5530095987009216E-5	DESIGN
// do the work	WITHOUT_CLASSIFICATION	0.9999492905111705	WITHOUT_CLASSIFICATION	5.070948882957608E-5	DESIGN
// if either its role changed,	WITHOUT_CLASSIFICATION	0.999998825702934	WITHOUT_CLASSIFICATION	1.174297066084515E-6	DESIGN
// or its key changed	WITHOUT_CLASSIFICATION	0.999996849616363	WITHOUT_CLASSIFICATION	3.150383636919938E-6	DESIGN
// we will need to create new entries	WITHOUT_CLASSIFICATION	0.9999851484663578	WITHOUT_CLASSIFICATION	1.4851533642140086E-5	DESIGN
// we will need to remove ye olde entries	WITHOUT_CLASSIFICATION	0.9999904952276661	WITHOUT_CLASSIFICATION	9.504772333787086E-6	DESIGN
// force initialize!	WITHOUT_CLASSIFICATION	0.9999956886152581	WITHOUT_CLASSIFICATION	4.311384741925016E-6	DESIGN
// else if it's elements changed	WITHOUT_CLASSIFICATION	0.9999999471389637	WITHOUT_CLASSIFICATION	5.28610363292618E-8	DESIGN
//ATTRIBUTES MAINTAINED BETWEEN FLUSH CYCLES	WITHOUT_CLASSIFICATION	0.9999058972408046	WITHOUT_CLASSIFICATION	9.410275919549052E-5	DESIGN
// session-start/post-flush persistent state	WITHOUT_CLASSIFICATION	0.9999999650721411	WITHOUT_CLASSIFICATION	3.492785892588437E-8	DESIGN
// allow the CollectionSnapshot to be serialized	WITHOUT_CLASSIFICATION	0.9999999082961482	WITHOUT_CLASSIFICATION	9.17038518947671E-8	DESIGN
// ATTRIBUTES USED ONLY DURING FLUSH CYCLE	WITHOUT_CLASSIFICATION	0.9999963023467785	WITHOUT_CLASSIFICATION	3.697653221465789E-6	DESIGN
// "current" means the reference that was found during flush() 	WITHOUT_CLASSIFICATION	0.9999999386424623	WITHOUT_CLASSIFICATION	6.135753779925649E-8	DESIGN
// "loaded" means the reference that is consistent  // with the current database state	WITHOUT_CLASSIFICATION	0.9999995946090948	WITHOUT_CLASSIFICATION	4.053909051640962E-7	DESIGN
// during flush, we navigate the object graph to // collections and decide what to do with them	WITHOUT_CLASSIFICATION	0.9999993702030329	WITHOUT_CLASSIFICATION	6.297969671689248E-7	DESIGN
// if we instantiate a collection during the flush() process, // we must ignore it for the rest of the flush()	WITHOUT_CLASSIFICATION	0.9999999999877592	WITHOUT_CLASSIFICATION	1.2240688176764796E-11	DESIGN
// new collections that get found + wrapped // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999992035086726	WITHOUT_CLASSIFICATION	7.96491327407589E-7	DESIGN
//a newly wrapped collection is NOT dirty (or we get unnecessary version updates)	WITHOUT_CLASSIFICATION	0.9999085282565161	WITHOUT_CLASSIFICATION	9.147174348389091E-5	DESIGN
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.999892191501636	WITHOUT_CLASSIFICATION	1.07808498364057E-4	DESIGN
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.999892191501636	WITHOUT_CLASSIFICATION	1.07808498364057E-4	DESIGN
// detached collections that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999951480205194	WITHOUT_CLASSIFICATION	4.851979480627971E-6	DESIGN
//optimization	WITHOUT_CLASSIFICATION	0.9999314981214384	WITHOUT_CLASSIFICATION	6.85018785615134E-5	DESIGN
//optimization //optimization	WITHOUT_CLASSIFICATION	0.9999913085791432	WITHOUT_CLASSIFICATION	8.691420856845193E-6	DESIGN
//re-snapshot	WITHOUT_CLASSIFICATION	0.999864558580005	WITHOUT_CLASSIFICATION	1.3544141999503062E-4	DESIGN
// for convenience to save some lookups	WITHOUT_CLASSIFICATION	0.9999952607611682	WITHOUT_CLASSIFICATION	4.739238831776304E-6	DESIGN
//NOTE: this is not updated when properties are fetched lazily!	WITHOUT_CLASSIFICATION	0.8944709977307154	DESIGN	0.10552900226928469	WITHOUT_CLASSIFICATION
//memory optimization	WITHOUT_CLASSIFICATION	0.9999880434896868	WITHOUT_CLASSIFICATION	1.1956510313164544E-5	DESIGN
// use the id value of a newly instantiated instance as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999998011344776	WITHOUT_CLASSIFICATION	1.988655224678226E-7	DESIGN
// copied from Session:	WITHOUT_CLASSIFICATION	0.9996979769294034	WITHOUT_CLASSIFICATION	3.0202307059649664E-4	DESIGN
// this should not happen since the DTD prevents it	WITHOUT_CLASSIFICATION	0.9999251064157932	WITHOUT_CLASSIFICATION	7.489358420683458E-5	DESIGN
// JoinProcessor needs to know if the where clause fragment came from a dynamic filter or not so it // can put the where clause fragment in the right place in the SQL AST.   'hasFilterCondition' keeps track // of that fact.	WITHOUT_CLASSIFICATION	0.9296498455541338	WITHOUT_CLASSIFICATION	0.07035015444586631	DESIGN
// the current join represents the join between a many-to-many association table // and its "target" table.  Here we need to apply any additional filters // defined specifically on the many-to-many	WITHOUT_CLASSIFICATION	0.9999997454600763	WITHOUT_CLASSIFICATION	2.54539923718977E-7	DESIGN
//check basic level one nullablilty	WITHOUT_CLASSIFICATION	0.9999925189712661	WITHOUT_CLASSIFICATION	7.481028733912919E-6	DESIGN
//values is not null and is checkable, we'll look deeper	WITHOUT_CLASSIFICATION	0.9993830840082512	WITHOUT_CLASSIFICATION	6.169159917488641E-4	DESIGN
//for non null args, check for components and elements containing components	WITHOUT_CLASSIFICATION	0.9999998081907477	WITHOUT_CLASSIFICATION	1.918092521296583E-7	DESIGN
//cache the hashcode	WITHOUT_CLASSIFICATION	0.9997283978908239	WITHOUT_CLASSIFICATION	2.7160210917603515E-4	DESIGN
//persistent collections may have components	WITHOUT_CLASSIFICATION	0.9999998325747136	WITHOUT_CLASSIFICATION	1.6742528637642005E-7	DESIGN
//check for all components values in the collection	WITHOUT_CLASSIFICATION	0.9999998341393393	WITHOUT_CLASSIFICATION	1.6586066065058228E-7	DESIGN
/* will check current level if some of them are not null	WITHOUT_CLASSIFICATION	0.996293889935554	WITHOUT_CLASSIFICATION	0.0037061100644459545	DESIGN
//do the test	WITHOUT_CLASSIFICATION	0.9999951262641762	WITHOUT_CLASSIFICATION	4.873735823817638E-6	DESIGN
// if its an uninitialized proxy it can't be transient	WITHOUT_CLASSIFICATION	0.9999029104625042	WITHOUT_CLASSIFICATION	9.708953749581807E-5	DESIGN
//unwrap it	WITHOUT_CLASSIFICATION	0.9999713468792871	WITHOUT_CLASSIFICATION	2.8653120712866852E-5	DESIGN
// See if the entity is already bound to this session, if not look at the // entity identifier and assume that the entity is persistent if the // id is not "unsaved" (that is, we rely on foreign keys to keep // database integrity)	WITHOUT_CLASSIFICATION	0.9999998166183042	WITHOUT_CLASSIFICATION	1.8338169593334637E-7	DESIGN
// an unfetched association can only point to // an entity that already exists in the db	WITHOUT_CLASSIFICATION	0.9999991083702127	WITHOUT_CLASSIFICATION	8.916297873054764E-7	DESIGN
// let the interceptor inspect the instance to decide	WITHOUT_CLASSIFICATION	0.999999948697584	WITHOUT_CLASSIFICATION	5.1302415951065595E-8	DESIGN
// let the persister inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999991713639851	WITHOUT_CLASSIFICATION	8.286360148749721E-7	DESIGN
// we use the assumed value, if there is one, to avoid hitting // the database	WITHOUT_CLASSIFICATION	0.9999440740615869	WITHOUT_CLASSIFICATION	5.592593841303935E-5	DESIGN
// hit the database, after checking the session cache for a snapshot	WITHOUT_CLASSIFICATION	0.9765060842292417	WITHOUT_CLASSIFICATION	0.02349391577075833	DESIGN
// context-entity-identifier returns null explicitly if the entity // is not associated with the persistence context; so make some // deeper checks...	WITHOUT_CLASSIFICATION	0.9999912841255582	WITHOUT_CLASSIFICATION	8.715874441767687E-6	DESIGN
//int count = 0;	WITHOUT_CLASSIFICATION	0.9999747930020603	WITHOUT_CLASSIFICATION	2.520699793970914E-5	DESIGN
//the first key found after the given key	WITHOUT_CLASSIFICATION	0.9999997225966536	WITHOUT_CLASSIFICATION	2.774033464688014E-7	DESIGN
//checkForEnd = false;	WITHOUT_CLASSIFICATION	0.9999979179945512	WITHOUT_CLASSIFICATION	2.082005448736298E-6	DESIGN
//count++;	WITHOUT_CLASSIFICATION	0.9997310646016387	WITHOUT_CLASSIFICATION	2.689353983612981E-4	DESIGN
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999990249393758	WITHOUT_CLASSIFICATION	9.750606243068727E-7	DESIGN
//we ran out of keys to try	WITHOUT_CLASSIFICATION	0.9999169272826897	WITHOUT_CLASSIFICATION	8.307271731036198E-5	DESIGN
//first element of array is reserved for the actual instance we are loading!	WITHOUT_CLASSIFICATION	0.9999971312037016	WITHOUT_CLASSIFICATION	2.868796298394E-6	DESIGN
//the first id found after the given id	WITHOUT_CLASSIFICATION	0.9999997124119223	WITHOUT_CLASSIFICATION	2.875880777373174E-7	DESIGN
//we ran out of ids to try	WITHOUT_CLASSIFICATION	0.9970471730691334	WITHOUT_CLASSIFICATION	0.0029528269308665353	DESIGN
// look for existing collection as part of the persistence context	WITHOUT_CLASSIFICATION	0.9999999988556773	WITHOUT_CLASSIFICATION	1.1443228104747166E-9	DESIGN
// ignore this row of results! Note the early exit	WITHOUT_CLASSIFICATION	0.9996071914005563	WITHOUT_CLASSIFICATION	3.928085994436901E-4	DESIGN
// initialize this collection	WITHOUT_CLASSIFICATION	0.9999388926697006	WITHOUT_CLASSIFICATION	6.110733029939925E-5	DESIGN
// create one	WITHOUT_CLASSIFICATION	0.9999981255533649	WITHOUT_CLASSIFICATION	1.874446635184781E-6	DESIGN
// warning: can cause a recursive calls! (proxy initialization)	WITHOUT_CLASSIFICATION	0.9998194828464979	WITHOUT_CLASSIFICATION	1.80517153502221E-4	DESIGN
// there were no queued additions // and the role has a cache	WITHOUT_CLASSIFICATION	0.9999995849254901	WITHOUT_CLASSIFICATION	4.1507450990446794E-7	DESIGN
// and this is not a forced initialization during flush	WITHOUT_CLASSIFICATION	0.9999995888397972	WITHOUT_CLASSIFICATION	4.111602027941898E-7	DESIGN
// some filters affecting the collection are enabled on the session, so do not do the put into the cache.	WITHOUT_CLASSIFICATION	0.999997363947614	WITHOUT_CLASSIFICATION	2.636052385990727E-6	DESIGN
// cleanup code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998641361776689	WITHOUT_CLASSIFICATION	1.3586382233108564E-4	DESIGN
// loading collection xrefs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999949373105	WITHOUT_CLASSIFICATION	5.062689569186245E-9	DESIGN
// Collection load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999333822027	WITHOUT_CLASSIFICATION	6.661779724228583E-8	DESIGN
// simple cache of param metadata based on query string.  Ideally, the // original "user-supplied query" string should be used to retreive this // metadata (i.e., not the para-list-expanded query string) to avoid // unnecessary cache entries. // Used solely for caching param metadata for native-sql queries, see // getSQLParameterMetadata() for a discussion as to why...	WITHOUT_CLASSIFICATION	0.9919136092997158	WITHOUT_CLASSIFICATION	0.008086390700284185	DESIGN
// the cache of the actual plans...	WITHOUT_CLASSIFICATION	0.9999999787087629	WITHOUT_CLASSIFICATION	2.1291237081665905E-8	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.9993844224900065	WITHOUT_CLASSIFICATION	6.155775099936293E-4	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.9993844224900065	WITHOUT_CLASSIFICATION	6.155775099936293E-4	DESIGN
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999999911308186	WITHOUT_CLASSIFICATION	8.869181382862462E-9	DESIGN
// for native-sql queries, the param metadata is determined outside // any relation to a query plan, because query plan creation and/or // retreival for a native-sql query depends on all of the return // types having been set, which might not be the case up-front when // param metadata would be most useful	WITHOUT_CLASSIFICATION	0.999937668254006	WITHOUT_CLASSIFICATION	6.23317459941013E-5	DESIGN
// don't care...	WITHOUT_CLASSIFICATION	0.999876679802824	WITHOUT_CLASSIFICATION	1.2332019717599773E-4	DESIGN
// Recognition code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999751616598431	WITHOUT_CLASSIFICATION	2.4838340156825777E-5	DESIGN
// don't care...	WITHOUT_CLASSIFICATION	0.999876679802824	WITHOUT_CLASSIFICATION	1.2332019717599773E-4	DESIGN
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9948962670413682	WITHOUT_CLASSIFICATION	0.005103732958631699	DESIGN
// break the outer loop !!!	WITHOUT_CLASSIFICATION	0.9998191376761375	WITHOUT_CLASSIFICATION	1.8086232386250602E-4	DESIGN
// named parameter	WITHOUT_CLASSIFICATION	0.9997934834420092	WITHOUT_CLASSIFICATION	2.0651655799076445E-4	DESIGN
// could be either an ordinal or JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999951980217684	WITHOUT_CLASSIFICATION	4.801978231575148E-6	DESIGN
// a peek ahead showed this as an JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999966193543046	WITHOUT_CLASSIFICATION	3.3806456954632408E-6	DESIGN
// make sure this "name" is an integral	WITHOUT_CLASSIFICATION	0.9999990165097339	WITHOUT_CLASSIFICATION	9.83490266168854E-7	DESIGN
// pre-determine and cache the hashcode	WITHOUT_CLASSIFICATION	0.999999590464013	WITHOUT_CLASSIFICATION	4.0953598710229993E-7	DESIGN
// perform the actual work	WITHOUT_CLASSIFICATION	0.9999999869995381	WITHOUT_CLASSIFICATION	1.3000461973392904E-8	DESIGN
// if everything went ok, commit the transaction and close the obtained // connection handle...	WITHOUT_CLASSIFICATION	0.9999999046508293	WITHOUT_CLASSIFICATION	9.534917072698829E-8	DESIGN
// at some point the processing went bad, so we need to: //      1) make sure the connection handle gets released //      2) try to cleanup the JTA context as much as possible	WITHOUT_CLASSIFICATION	0.9999820684166594	WITHOUT_CLASSIFICATION	1.7931583340573496E-5	DESIGN
// finally handle the exception	WITHOUT_CLASSIFICATION	0.9996729216020191	WITHOUT_CLASSIFICATION	3.270783979807809E-4	DESIGN
// a "detached" collection that belonged to a different entity	WITHOUT_CLASSIFICATION	0.9999999914903382	WITHOUT_CLASSIFICATION	8.509661732677425E-9	DESIGN
//saveOrUpdateCopy() is deprecated!	WITHOUT_CLASSIFICATION	0.9973255836938323	WITHOUT_CLASSIFICATION	0.0026744163061677294	DESIGN
// collectionPersister should not be null, but we don't want to throw // an exception if it is null	WITHOUT_CLASSIFICATION	0.9991008193793858	WITHOUT_CLASSIFICATION	8.991806206143305E-4	DESIGN
// otherwise a null or brand new collection // this will also (inefficiently) handle arrays, which // have no snapshot, so we can't do any better //processArrayOrNewCollection(collection, type);	WITHOUT_CLASSIFICATION	0.9994387400690615	WITHOUT_CLASSIFICATION	5.612599309384867E-4	DESIGN
// a "detached" collection that originally belonged to the same entity	WITHOUT_CLASSIFICATION	0.9999998152911165	WITHOUT_CLASSIFICATION	1.8470888357037646E-7	DESIGN
//do nothing	WITHOUT_CLASSIFICATION	0.999661987536974	WITHOUT_CLASSIFICATION	3.3801246302600345E-4	DESIGN
//do nothing	WITHOUT_CLASSIFICATION	0.999661987536974	WITHOUT_CLASSIFICATION	3.3801246302600345E-4	DESIGN
//Force a substitution!	WITHOUT_CLASSIFICATION	0.9998612014473924	WITHOUT_CLASSIFICATION	1.3879855260769914E-4	DESIGN
// The user requested a "greater" (i.e. more restrictive) form of // pessimistic lock	WITHOUT_CLASSIFICATION	0.999999998601894	WITHOUT_CLASSIFICATION	1.3981060428822122E-9	DESIGN
// the database now holds a lock + the object is flushed from the cache, // so release the soft lock	WITHOUT_CLASSIFICATION	0.999996897741957	WITHOUT_CLASSIFICATION	3.1022580429663388E-6	DESIGN
// now update the object .. has to be outside the main if block above (because of collections)	WITHOUT_CLASSIFICATION	0.9999998971356893	WITHOUT_CLASSIFICATION	1.028643108057843E-7	DESIGN
// Search for collections by reachability, updating their role. // We don't want to touch collections reachable from a deleted object	WITHOUT_CLASSIFICATION	0.9365866117653191	WITHOUT_CLASSIFICATION	0.06341338823468094	DESIGN
// this is a situation where the entity id is assigned by a post-insert generator // and was saved outside the transaction forcing it to be delayed	WITHOUT_CLASSIFICATION	0.9999994458879855	WITHOUT_CLASSIFICATION	5.54112014453079E-7	DESIGN
// NOTE: we need to do the wrap here even if its not "dirty", // because collections need wrapping but changes to _them_ // don't dirty the container. Also, for versioned data, we // need to wrap before calling searchForDirtyCollections	WITHOUT_CLASSIFICATION	0.9999811080975693	WITHOUT_CLASSIFICATION	1.8891902430695877E-5	DESIGN
//grab its state saved at deletion	WITHOUT_CLASSIFICATION	0.9999991707639575	WITHOUT_CLASSIFICATION	8.292360424443024E-7	DESIGN
// grab its current state	WITHOUT_CLASSIFICATION	0.9999989778268725	WITHOUT_CLASSIFICATION	1.0221731274126856E-6	DESIGN
// schedule the update // note that we intentionally do _not_ pass in currentPersistentState!	WITHOUT_CLASSIFICATION	0.9999998791178163	WITHOUT_CLASSIFICATION	1.2088218369808494E-7	DESIGN
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999974947804368	WITHOUT_CLASSIFICATION	2.5052195632458184E-6	DESIGN
// give the Interceptor a chance to process property values, if the properties // were modified by the Interceptor, we need to set them back to the object	WITHOUT_CLASSIFICATION	0.9999765183033839	WITHOUT_CLASSIFICATION	2.3481696616115372E-5	DESIGN
// compare to cached state (ignoring collections unless versioned)	WITHOUT_CLASSIFICATION	0.9999999988887652	WITHOUT_CLASSIFICATION	1.1112347255053841E-9	DESIGN
// if it was dirtied by a collection only	WITHOUT_CLASSIFICATION	0.999999926277652	WITHOUT_CLASSIFICATION	7.372234800844894E-8	DESIGN
// increment the version number (if necessary)	WITHOUT_CLASSIFICATION	0.9999967810498637	WITHOUT_CLASSIFICATION	3.2189501362826197E-6	DESIGN
// check nullability but do not perform command execute // we'll use scheduled updates for that.	WITHOUT_CLASSIFICATION	0.999997429216852	WITHOUT_CLASSIFICATION	2.570783147971511E-6	DESIGN
//give the Interceptor a chance to modify property values	WITHOUT_CLASSIFICATION	0.9999520898924071	WITHOUT_CLASSIFICATION	4.791010759299412E-5	DESIGN
//now we might need to recalculate the dirtyProperties array	WITHOUT_CLASSIFICATION	0.9997580830747818	WITHOUT_CLASSIFICATION	2.4191692521823816E-4	DESIGN
//use the current version	WITHOUT_CLASSIFICATION	0.9999711352933588	WITHOUT_CLASSIFICATION	2.886470664122352E-5	DESIGN
// Interceptor returned null, so do the dirtycheck ourself, if possible	WITHOUT_CLASSIFICATION	0.9999999409598674	WITHOUT_CLASSIFICATION	5.904013252087138E-8	DESIGN
// object loaded by update()	WITHOUT_CLASSIFICATION	0.9999981896256316	WITHOUT_CLASSIFICATION	1.810374368450563E-6	DESIGN
// dirty check against the usual snapshot of the entity	WITHOUT_CLASSIFICATION	0.9999998432456948	WITHOUT_CLASSIFICATION	1.56754305168328E-7	DESIGN
// dirty check against the database snapshot, if possible/necessary	WITHOUT_CLASSIFICATION	0.9999999545620686	WITHOUT_CLASSIFICATION	4.543793134831467E-8	DESIGN
// the Interceptor handled the dirty checking	WITHOUT_CLASSIFICATION	0.9958685382451288	WITHOUT_CLASSIFICATION	0.004131461754871234	DESIGN
//even process null collections	WITHOUT_CLASSIFICATION	0.9999999840732993	WITHOUT_CLASSIFICATION	1.5926700791895736E-8	DESIGN
// get the id from the object	WITHOUT_CLASSIFICATION	0.9999691160048159	WITHOUT_CLASSIFICATION	3.088399518406223E-5	DESIGN
//always do an INSERT, and let it fail by constraint violation	WITHOUT_CLASSIFICATION	0.9999998963769725	WITHOUT_CLASSIFICATION	1.036230274779138E-7	DESIGN
//what is the version on the database?	WITHOUT_CLASSIFICATION	0.9112027543657223	WITHOUT_CLASSIFICATION	0.08879724563427772	DESIGN
/// HHH-2378	WITHOUT_CLASSIFICATION	0.999869971040954	WITHOUT_CLASSIFICATION	1.300289590460657E-4	DESIGN
//will result in a SQL UPDATE:	WITHOUT_CLASSIFICATION	0.9999666358483795	WITHOUT_CLASSIFICATION	3.336415162046934E-5	DESIGN
//else do nothing (don't even reassociate object!)	WITHOUT_CLASSIFICATION	0.9999901128040528	WITHOUT_CLASSIFICATION	9.887195947149684E-6	DESIGN
// no existing row - do an insert	WITHOUT_CLASSIFICATION	0.9999090780910892	WITHOUT_CLASSIFICATION	9.092190891075027E-5	DESIGN
//refresh() does not pass an entityName	WITHOUT_CLASSIFICATION	0.9999972269610315	WITHOUT_CLASSIFICATION	2.773038968513169E-6	DESIGN
//do not return a proxy! //(this option indicates we are initializing a proxy)	WITHOUT_CLASSIFICATION	0.9996204322498805	WITHOUT_CLASSIFICATION	3.795677501194028E-4	DESIGN
//return a proxy if appropriate	WITHOUT_CLASSIFICATION	0.9999984208816867	WITHOUT_CLASSIFICATION	1.5791183134008667E-6	DESIGN
// return existing object or initialized proxy (unless deleted)	WITHOUT_CLASSIFICATION	0.9999607947407178	WITHOUT_CLASSIFICATION	3.92052592822548E-5	DESIGN
// return new uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999478968069885	WITHOUT_CLASSIFICATION	5.2103193011441355E-5	DESIGN
// this object was already loaded	WITHOUT_CLASSIFICATION	0.9998219434819411	WITHOUT_CLASSIFICATION	1.780565180589885E-4	DESIGN
// Entity was found in second-level cache...	WITHOUT_CLASSIFICATION	0.9930333818365095	WITHOUT_CLASSIFICATION	0.0069666181634905604	DESIGN
// make it circular-reference safe	WITHOUT_CLASSIFICATION	0.9999970976208684	WITHOUT_CLASSIFICATION	2.902379131469111E-6	DESIGN
// intializes result by side-effect	WITHOUT_CLASSIFICATION	0.9999999603376646	WITHOUT_CLASSIFICATION	3.966233537346046E-8	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Pre-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999886737229	WITHOUT_CLASSIFICATION	1.1326277136028846E-8	DESIGN
//some statistics	WITHOUT_CLASSIFICATION	0.9990498766005798	WITHOUT_CLASSIFICATION	9.501233994202028E-4	DESIGN
//safe from concurrent modification because of how entryList() is implemented on IdentityMap	WITHOUT_CLASSIFICATION	0.9995518737488923	WITHOUT_CLASSIFICATION	4.481262511076814E-4	DESIGN
// Initialize dirty flags for arrays + collections with composite elements // and reset reached, doupdate, etc.	WITHOUT_CLASSIFICATION	0.9999999534981237	WITHOUT_CLASSIFICATION	4.650187635969972E-8	DESIGN
// Among other things, updateReachables() will recursively load all // collections that are moving roles. This might cause entities to // be loaded.	WITHOUT_CLASSIFICATION	0.9999907361399333	WITHOUT_CLASSIFICATION	9.263860066732864E-6	DESIGN
// So this needs to be safe from concurrent modification problems. // It is safe because of how IdentityMap implements entrySet()	WITHOUT_CLASSIFICATION	0.9444490812808852	WITHOUT_CLASSIFICATION	0.05555091871911467	DESIGN
// Update the status of the object and if necessary, schedule an update	WITHOUT_CLASSIFICATION	0.9999988721735287	WITHOUT_CLASSIFICATION	1.127826471307679E-6	DESIGN
// Schedule updates to collections:	WITHOUT_CLASSIFICATION	0.9999992867551925	WITHOUT_CLASSIFICATION	7.132448075422968E-7	DESIGN
// we need to lock the collection caches before // executing entity inserts/updates in order to // account for bidi associations	WITHOUT_CLASSIFICATION	0.9999984734815288	WITHOUT_CLASSIFICATION	1.5265184711617764E-6	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Post-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999750823827	WITHOUT_CLASSIFICATION	2.491761725581759E-8	DESIGN
//the database has changed now, so the subselect results need to be invalidated	WITHOUT_CLASSIFICATION	0.9999958378235163	WITHOUT_CLASSIFICATION	4.162176483660812E-6	DESIGN
//if the collection is dereferenced, remove from the session cache //iter.remove(); //does not work, since the entrySet is not backed by the set	WITHOUT_CLASSIFICATION	0.999999922506018	WITHOUT_CLASSIFICATION	7.749398202531487E-8	DESIGN
//otherwise recreate the mapping between the collection and its key	WITHOUT_CLASSIFICATION	0.9999996912455974	WITHOUT_CLASSIFICATION	3.0875440255258274E-7	DESIGN
//get a snapshot	WITHOUT_CLASSIFICATION	0.9999396378866647	WITHOUT_CLASSIFICATION	6.036211333518258E-5	DESIGN
/* package-private */	WITHOUT_CLASSIFICATION	0.9999009904357758	WITHOUT_CLASSIFICATION	9.900956422420452E-5	DESIGN
/* package-private */	WITHOUT_CLASSIFICATION	0.9999009904357758	WITHOUT_CLASSIFICATION	9.900956422420452E-5	DESIGN
// key is an entity involved with the operation performed by the listener; // value is a flag indicating if the listener explicitly operates on the entity	WITHOUT_CLASSIFICATION	0.9999999978135166	WITHOUT_CLASSIFICATION	2.186483448872601E-9	DESIGN
// EARLY EXIT!!!	WITHOUT_CLASSIFICATION	0.9832149522382141	WITHOUT_CLASSIFICATION	0.016785047761785913	DESIGN
//ie. the entity came in from update()	WITHOUT_CLASSIFICATION	0.99961516519068	WITHOUT_CLASSIFICATION	3.848348093198597E-4	DESIGN
// before any callbacks, etc, so subdeletions see that this deletion happened first	WITHOUT_CLASSIFICATION	0.9999843093430512	WITHOUT_CLASSIFICATION	1.569065694886012E-5	DESIGN
// Ensures that containing deletions happen before sub-deletions	WITHOUT_CLASSIFICATION	0.9999999867491827	WITHOUT_CLASSIFICATION	1.3250817213818167E-8	DESIGN
//	WITHOUT_CLASSIFICATION	0.9959144787197332	WITHOUT_CLASSIFICATION	0.004085521280266773	DESIGN
// cascade-delete to collections BEFORE the collection owner is deleted	WITHOUT_CLASSIFICATION	0.9999993386576139	WITHOUT_CLASSIFICATION	6.613423860098283E-7	DESIGN
// cascade-delete to many-to-one AFTER the parent was deleted	WITHOUT_CLASSIFICATION	0.99991588642612	WITHOUT_CLASSIFICATION	8.411357388009888E-5	DESIGN
// if it is an initialized proxy, let cascade // handle it later on	WITHOUT_CLASSIFICATION	0.9999971869237985	WITHOUT_CLASSIFICATION	2.8130762015545548E-6	DESIGN
//assign the requested id to the proxy, *before* //reassociating the proxy	WITHOUT_CLASSIFICATION	0.9999657741534895	WITHOUT_CLASSIFICATION	3.422584651046173E-5	DESIGN
// an uninitialized proxy, noop, don't even need to // return an id, since it is never a save()	WITHOUT_CLASSIFICATION	0.9999968925775361	WITHOUT_CLASSIFICATION	3.107422463792831E-6	DESIGN
//initialize properties of the event:	WITHOUT_CLASSIFICATION	0.9999880698062241	WITHOUT_CLASSIFICATION	1.1930193775911306E-5	DESIGN
//return the id in the event object	WITHOUT_CLASSIFICATION	0.9997447412648541	WITHOUT_CLASSIFICATION	2.552587351458998E-4	DESIGN
//TRANSIENT or DELETED	WITHOUT_CLASSIFICATION	0.9999968620900049	WITHOUT_CLASSIFICATION	3.137909995027696E-6	DESIGN
// use the id assigned to the instance	WITHOUT_CLASSIFICATION	0.999990910648386	WITHOUT_CLASSIFICATION	9.089351613919865E-6	DESIGN
// assume this is a newly instantiated transient object // which should be saved rather than updated	WITHOUT_CLASSIFICATION	0.974276905286056	WITHOUT_CLASSIFICATION	0.02572309471394394	DESIGN
// this is a transient object with existing persistent state not loaded by the session	WITHOUT_CLASSIFICATION	0.999975936838415	WITHOUT_CLASSIFICATION	2.406316158493328E-5	DESIGN
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999958007401554	WITHOUT_CLASSIFICATION	4.199259844523838E-6	DESIGN
//cachedState,	WITHOUT_CLASSIFICATION	0.9998984989084292	WITHOUT_CLASSIFICATION	1.0150109157069944E-4	DESIGN
//assume true, since we don't really know, and it doesn't matter	WITHOUT_CLASSIFICATION	0.9567378733692539	WITHOUT_CLASSIFICATION	0.043262126630746085	DESIGN
//a "detached" collection!	WITHOUT_CLASSIFICATION	0.9999986386778723	WITHOUT_CLASSIFICATION	1.3613221276992508E-6	DESIGN
// if the collection belonged to a different entity, // clean up the existing state of the collection	WITHOUT_CLASSIFICATION	0.99999982295154	WITHOUT_CLASSIFICATION	1.770484599660011E-7	DESIGN
//log.debug( "calling onLoad()" );	WITHOUT_CLASSIFICATION	0.9999995427710553	WITHOUT_CLASSIFICATION	4.5722894482447107E-7	DESIGN
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.99448814685864	WITHOUT_CLASSIFICATION	0.0055118531413600545	DESIGN
// note: performExecutions() clears all collectionXxxxtion  // collections (the collection actions) in the session	WITHOUT_CLASSIFICATION	0.9999820374844175	WITHOUT_CLASSIFICATION	1.796251558255674E-5	DESIGN
// if no array holder we found an unwrappered array (this can't occur, // because we now always call wrap() before getting to here) // return (ah==null) ? true : searchForDirtyCollections(ah, type);	WITHOUT_CLASSIFICATION	0.9994551357623958	WITHOUT_CLASSIFICATION	5.448642376042623E-4	DESIGN
// if not wrappered yet, its dirty (this can't occur, because // we now always call wrap() before getting to here) // return ( ! (obj instanceof PersistentCollection) ) ? //true : searchForDirtyCollections( (PersistentCollection) obj, type );	WITHOUT_CLASSIFICATION	0.8755257730216699	WITHOUT_CLASSIFICATION	0.12447422697833	DESIGN
//we need to check even if it was not initialized, because of delayed adds!	WITHOUT_CLASSIFICATION	0.9999201782456363	WITHOUT_CLASSIFICATION	7.982175436366445E-5	DESIGN
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.8974383767829103	WITHOUT_CLASSIFICATION	0.10256162321708966	DESIGN
// find any entities that are still transient after retry	WITHOUT_CLASSIFICATION	0.9999999937615885	WITHOUT_CLASSIFICATION	6.2384113548756405E-9	DESIGN
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.99448814685864	WITHOUT_CLASSIFICATION	0.0055118531413600545	DESIGN
// Check the persistence context for an entry relating to this // entity to be merged...	WITHOUT_CLASSIFICATION	0.999989810829977	WITHOUT_CLASSIFICATION	1.018917002309956E-5	DESIGN
// we have specialized case of a detached entity from the // perspective of the merge operation.  Specifically, we // have an incoming entity instance which has a corresponding // entry in the current persistence context, but registered // under a different entity instance	WITHOUT_CLASSIFICATION	0.9991231073005331	WITHOUT_CLASSIFICATION	8.768926994669738E-4	DESIGN
//DELETED	WITHOUT_CLASSIFICATION	0.9995057019624551	WITHOUT_CLASSIFICATION	4.9429803754478E-4	DESIGN
//before cascade!	WITHOUT_CLASSIFICATION	0.9997600441825333	WITHOUT_CLASSIFICATION	2.3995581746674336E-4	DESIGN
// cascade first, so that all unsaved objects get their // copy created before we actually copy //cascadeOnMerge(event, persister, entity, copyCache, Cascades.CASCADE_BEFORE_MERGE);	WITHOUT_CLASSIFICATION	0.9999995769759559	WITHOUT_CLASSIFICATION	4.2302404413283837E-7	DESIGN
//this bit is only *really* absolutely necessary for handling //requestedId, but is also good if we merge multiple object //graphs, since it helps ensure uniqueness	WITHOUT_CLASSIFICATION	0.9990032612563371	WITHOUT_CLASSIFICATION	9.967387436628915E-4	DESIGN
// continue...; we'll find out if it ends up not getting saved later	WITHOUT_CLASSIFICATION	0.9998087796059015	WITHOUT_CLASSIFICATION	1.9122039409846128E-4	DESIGN
// cascade first, so that all unsaved objects get their // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999974727985371	WITHOUT_CLASSIFICATION	2.5272014630102182E-6	DESIGN
// check that entity id = requestedId	WITHOUT_CLASSIFICATION	0.9999672432571184	WITHOUT_CLASSIFICATION	3.275674288159441E-5	DESIGN
//before cascade!	WITHOUT_CLASSIFICATION	0.9997600441825333	WITHOUT_CLASSIFICATION	2.3995581746674336E-4	DESIGN
// we got here because we assumed that an instance // with an assigned id was detached, when it was // really persistent	WITHOUT_CLASSIFICATION	0.9999995403259754	WITHOUT_CLASSIFICATION	4.596740246380123E-7	DESIGN
// cascade first, so that all unsaved objects get their  // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999935807684749	WITHOUT_CLASSIFICATION	6.419231525108315E-6	DESIGN
//copyValues works by reflection, so explicitly mark the entity instance dirty	WITHOUT_CLASSIFICATION	0.9986370586954436	WITHOUT_CLASSIFICATION	0.0013629413045563462	DESIGN
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.9986158916282841	WITHOUT_CLASSIFICATION	0.0013841083717158532	DESIGN
//source.getBatcher().executeBatch(); //found another way to ensure that all batched joined inserts have been executed	WITHOUT_CLASSIFICATION	0.9999999880124443	WITHOUT_CLASSIFICATION	1.1987555769096265E-8	DESIGN
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999974947804368	WITHOUT_CLASSIFICATION	2.5052195632458184E-6	DESIGN
//now done in EntityIdentityInsertAction //persister.setIdentifier( entity, id, source.getEntityMode() );	WITHOUT_CLASSIFICATION	0.9999999640406819	WITHOUT_CLASSIFICATION	3.595931796323092E-8	DESIGN
//source.getPersistenceContext().removeNonExist( new EntityKey( id, persister, source.getEntityMode() ) );	WITHOUT_CLASSIFICATION	0.9999971972712379	WITHOUT_CLASSIFICATION	2.8027287621123807E-6	DESIGN
//keep the existing version number in the case of replicate!	WITHOUT_CLASSIFICATION	0.9989299610036253	WITHOUT_CLASSIFICATION	0.001070038996374664	DESIGN
// cascade-save to many-to-one BEFORE the parent is saved	WITHOUT_CLASSIFICATION	0.9996820631197559	WITHOUT_CLASSIFICATION	3.179368802440307E-4	DESIGN
//pass this as an argument only to avoid double looking	WITHOUT_CLASSIFICATION	0.9013580050800195	WITHOUT_CLASSIFICATION	0.09864199491998046	DESIGN
// the object is persistent	WITHOUT_CLASSIFICATION	0.9999650891383318	WITHOUT_CLASSIFICATION	3.4910861668170846E-5	DESIGN
//the entity is associated with the session, so check its status	WITHOUT_CLASSIFICATION	0.9989663775538198	WITHOUT_CLASSIFICATION	0.0010336224461802445	DESIGN
// do nothing for persistent instances	WITHOUT_CLASSIFICATION	0.9999982789905093	WITHOUT_CLASSIFICATION	1.7210094906972835E-6	DESIGN
//ie. e.status==DELETED	WITHOUT_CLASSIFICATION	0.999977752204491	WITHOUT_CLASSIFICATION	2.224779550897443E-5	DESIGN
// the object is transient or detached	WITHOUT_CLASSIFICATION	0.9999990416473478	WITHOUT_CLASSIFICATION	9.583526522214921E-7	DESIGN
//NOTE EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9951129954499598	WITHOUT_CLASSIFICATION	0.004887004550040295	DESIGN
// Private constructor - stops checkstyle from complaining.	WITHOUT_CLASSIFICATION	0.9999998861802739	WITHOUT_CLASSIFICATION	1.1381972610129051E-7	DESIGN
// First, try to find a matching constructor accepting a ViolatedConstraintNameExtracter param...	WITHOUT_CLASSIFICATION	0.9999975776491816	WITHOUT_CLASSIFICATION	2.4223508182810057E-6	DESIGN
// eat it and try next	WITHOUT_CLASSIFICATION	0.9998733862595833	WITHOUT_CLASSIFICATION	1.266137404166519E-4	DESIGN
// Otherwise, try to use the no-arg constructor	WITHOUT_CLASSIFICATION	0.9997413277291701	WITHOUT_CLASSIFICATION	2.5867227082981007E-4	DESIGN
// oracle sql-state code for deadlock	WITHOUT_CLASSIFICATION	0.9999980856894328	WITHOUT_CLASSIFICATION	1.914310567269196E-6	DESIGN
// CollectionPropertyMapping processes everything except 'index'.	WITHOUT_CLASSIFICATION	0.9999999904067434	WITHOUT_CLASSIFICATION	9.59325650733048E-9	DESIGN
// remove initial ", "	WITHOUT_CLASSIFICATION	0.9999950606189174	WITHOUT_CLASSIFICATION	4.939381082538613E-6	DESIGN
// remove initial " and "	WITHOUT_CLASSIFICATION	0.9999976673627843	WITHOUT_CLASSIFICATION	2.3326372157466357E-6	DESIGN
//beforeClassTokens.add("new"); DEFINITELY DON'T HAVE THIS!!	WITHOUT_CLASSIFICATION	0.9784713639458714	WITHOUT_CLASSIFICATION	0.021528636054128643	DESIGN
//notAfterClassTokens.add(",");	WITHOUT_CLASSIFICATION	0.9999939829897261	WITHOUT_CLASSIFICATION	6.0170102739235866E-6	DESIGN
// just especially for the trivial collection filter	WITHOUT_CLASSIFICATION	0.9999999866379544	WITHOUT_CLASSIFICATION	1.3362045714546752E-8	DESIGN
//update last non-whitespace token, if necessary	WITHOUT_CLASSIFICATION	0.999999757347574	WITHOUT_CLASSIFICATION	2.4265242602047785E-7	DESIGN
// select-range is terminated by declaration of "from"	WITHOUT_CLASSIFICATION	0.999977201102777	WITHOUT_CLASSIFICATION	2.279889722301216E-5	DESIGN
//scan for next non-whitespace token	WITHOUT_CLASSIFICATION	0.9999936405012682	WITHOUT_CLASSIFICATION	6.359498731797667E-6	DESIGN
// Note this!!	WITHOUT_CLASSIFICATION	0.994589382387914	WITHOUT_CLASSIFICATION	0.005410617612086031	DESIGN
// Error message constants.	WITHOUT_CLASSIFICATION	0.9999982969529896	WITHOUT_CLASSIFICATION	1.7030470104709451E-6	DESIGN
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999721029899306	WITHOUT_CLASSIFICATION	2.7897010069469395E-5	DESIGN
// semantic action handling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999981140324752	WITHOUT_CLASSIFICATION	1.8859675247924529E-6	DESIGN
// Handle collection-fiter compilation. // IMPORTANT NOTE: This is modifying the INPUT (HQL) tree, not the output tree!	WITHOUT_CLASSIFICATION	0.9854431019658192	WITHOUT_CLASSIFICATION	0.01455689803418074	DESIGN
// Show the modified AST.	WITHOUT_CLASSIFICATION	0.9998710050395441	WITHOUT_CLASSIFICATION	1.2899496045601258E-4	DESIGN
// Create a parameter specification for the collection filter...	WITHOUT_CLASSIFICATION	0.9999999522157276	WITHOUT_CLASSIFICATION	4.778427245519478E-8	DESIGN
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999973285580939	WITHOUT_CLASSIFICATION	2.6714419061117945E-6	DESIGN
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999973285580939	WITHOUT_CLASSIFICATION	2.6714419061117945E-6	DESIGN
// Get the names of the columns used to link between the collection // owner and the collection elements.	WITHOUT_CLASSIFICATION	0.9999988940775693	WITHOUT_CLASSIFICATION	1.1059224307148457E-6	DESIGN
// The path AST should be a DotNode, and it should have been evaluated already.	WITHOUT_CLASSIFICATION	0.9999855351663184	WITHOUT_CLASSIFICATION	1.446483368161105E-5	DESIGN
// Tell the dot node about the join type.	WITHOUT_CLASSIFICATION	0.9999999365587245	WITHOUT_CLASSIFICATION	6.344127541952402E-8	DESIGN
// Re-arrange the tree so that the collection function is the root and the lhs is the path.	WITHOUT_CLASSIFICATION	0.9999998033579803	WITHOUT_CLASSIFICATION	1.9664201963401304E-7	DESIGN
// Don't forget to resolve the argument! // Resolve the collection function now.	WITHOUT_CLASSIFICATION	0.9999943250530964	WITHOUT_CLASSIFICATION	5.674946903671603E-6	DESIGN
// Resolve everything up to this dot, but don't resolve the placeholders yet.	WITHOUT_CLASSIFICATION	0.9500110515293665	WITHOUT_CLASSIFICATION	0.0499889484706334	DESIGN
// Should mean that no such property was found	WITHOUT_CLASSIFICATION	0.9870061181195329	WITHOUT_CLASSIFICATION	0.01299388188046719	DESIGN
// Was there an explicit select expression?	WITHOUT_CLASSIFICATION	0.9999998476191503	WITHOUT_CLASSIFICATION	1.5238084971410659E-7	DESIGN
// Attach any mapping-defined "ORDER BY" fragments	WITHOUT_CLASSIFICATION	0.9999999895699887	WITHOUT_CLASSIFICATION	1.0430011374262628E-8	DESIGN
// Use the explicitly declared select expression; determine the // return types indicated by each select token	WITHOUT_CLASSIFICATION	0.9999999016855685	WITHOUT_CLASSIFICATION	9.83144315206593E-8	DESIGN
// After that, process the JOINs. // Invoke a delegate to do the work, as this is farily complex.	WITHOUT_CLASSIFICATION	0.9999998982065378	WITHOUT_CLASSIFICATION	1.0179346233676275E-7	DESIGN
// Make #@%$^#^&# sure no alias is applied to the table name	WITHOUT_CLASSIFICATION	0.9999993477153554	WITHOUT_CLASSIFICATION	6.522846446055001E-7	DESIGN
// We need to generate ids as part of this bulk insert. // // Note that this is only supported for sequence-style generators and // post-insert-style generators; basically, only in-db generators	WITHOUT_CLASSIFICATION	0.9999704292766994	WITHOUT_CLASSIFICATION	2.9570723300675084E-5	DESIGN
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999973285580939	WITHOUT_CLASSIFICATION	2.6714419061117945E-6	DESIGN
// We need to seed the version value as part of this bulk insert	WITHOUT_CLASSIFICATION	0.9999431616458534	WITHOUT_CLASSIFICATION	5.6838354146561266E-5	DESIGN
// we need to wrtap the param in a cast()	WITHOUT_CLASSIFICATION	0.9998296681942376	WITHOUT_CLASSIFICATION	1.7033180576236516E-4	DESIGN
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9979400063007492	WITHOUT_CLASSIFICATION	0.002059993699250804	DESIGN
// Generate implicit joins, only if necessary.	WITHOUT_CLASSIFICATION	0.9999998224995387	WITHOUT_CLASSIFICATION	1.7750046137676618E-7	DESIGN
// Notify the FROM element that it is being referenced by the select.	WITHOUT_CLASSIFICATION	0.9999880218030318	WITHOUT_CLASSIFICATION	1.1978196968065155E-5	DESIGN
// Turn off includeSubclasses on all FromElements.	WITHOUT_CLASSIFICATION	0.9999964396591423	WITHOUT_CLASSIFICATION	3.5603408575953713E-6	DESIGN
// create the node initially with the param name so that it shows // appropriately in the "original text" attribute	WITHOUT_CLASSIFICATION	0.9999419669389502	WITHOUT_CLASSIFICATION	5.8033061049871625E-5	DESIGN
// Use the delegate, resolve identifiers as FROM element aliases.	WITHOUT_CLASSIFICATION	0.9999866349484127	WITHOUT_CLASSIFICATION	1.3365051587436723E-5	DESIGN
// select clauses for insert statements should alwasy be treated as shallow	WITHOUT_CLASSIFICATION	0.999898044928121	WITHOUT_CLASSIFICATION	1.019550718790343E-4	DESIGN
// no need to even collect this information if the persister is considered multi-table	WITHOUT_CLASSIFICATION	0.9998533986011466	WITHOUT_CLASSIFICATION	1.4660139885339142E-4	DESIGN
// Make sure that the persister is versioned	WITHOUT_CLASSIFICATION	0.9999253712280585	WITHOUT_CLASSIFICATION	7.462877194152617E-5	DESIGN
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999721029899306	WITHOUT_CLASSIFICATION	2.7897010069469395E-5	DESIGN
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999973285580939	WITHOUT_CLASSIFICATION	2.6714419061117945E-6	DESIGN
// --Commented out by Inspection (12/11/04 10:56 AM): int getWarningCount();	WITHOUT_CLASSIFICATION	0.9999999812582738	WITHOUT_CLASSIFICATION	1.8741726151390148E-8	DESIGN
// Alias references and identifiers use the same node class.	WITHOUT_CLASSIFICATION	0.9999997700207913	WITHOUT_CLASSIFICATION	2.299792087625668E-7	DESIGN
// switch	WITHOUT_CLASSIFICATION	0.9999189986929086	WITHOUT_CLASSIFICATION	8.100130709143649E-5	DESIGN
// make a new one	WITHOUT_CLASSIFICATION	0.9999970685194407	WITHOUT_CLASSIFICATION	2.9314805593072E-6	DESIGN
// just do the regular thing if you can't find the ctor // Your AST must have default ctor to use this.	WITHOUT_CLASSIFICATION	0.9995653070690638	WITHOUT_CLASSIFICATION	4.3469293093628165E-4	DESIGN
// Initialize SQL nodes here.	WITHOUT_CLASSIFICATION	0.9999973553668591	WITHOUT_CLASSIFICATION	2.6446331408317753E-6	DESIGN
// semantic action processing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996264943742	WITHOUT_CLASSIFICATION	3.735056258286298E-7	DESIGN
// if template is null we just write the function out as it appears in the hql statement	WITHOUT_CLASSIFICATION	0.9999998782651613	WITHOUT_CLASSIFICATION	1.217348386342156E-7	DESIGN
// this function has a template -> redirect output and catch the arguments	WITHOUT_CLASSIFICATION	0.999999802431674	WITHOUT_CLASSIFICATION	1.9756832593891768E-7	DESIGN
// --- Inner classes (moved here from sql-gen.g) ---	WITHOUT_CLASSIFICATION	0.9999892599132177	WITHOUT_CLASSIFICATION	1.0740086782284032E-5	DESIGN
// check two "adjecent" nodes at the top of the from-clause tree	WITHOUT_CLASSIFICATION	0.9999989210806001	WITHOUT_CLASSIFICATION	1.0789193999960452E-6	DESIGN
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9994899601669325	WITHOUT_CLASSIFICATION	5.100398330676239E-4	DESIGN
// these are just two unrelated table references	WITHOUT_CLASSIFICATION	0.9999951870275858	WITHOUT_CLASSIFICATION	4.8129724141456605E-6	DESIGN
// again, both should be FromElements	WITHOUT_CLASSIFICATION	0.9999997968160864	WITHOUT_CLASSIFICATION	2.031839134789785E-7	DESIGN
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9948962670413682	WITHOUT_CLASSIFICATION	0.005103732958631699	DESIGN
// right represents a joins originating from left; or // both right and left reprersent joins originating from the same FromElement	WITHOUT_CLASSIFICATION	0.9999376909046116	WITHOUT_CLASSIFICATION	6.230909538837075E-5	DESIGN
// check a set of parent/child nodes in the from-clause tree // to determine if a comma is required between them	WITHOUT_CLASSIFICATION	0.9999994159382443	WITHOUT_CLASSIFICATION	5.840617558227865E-7	DESIGN
// right represents a joins originating from left...	WITHOUT_CLASSIFICATION	0.9999240284585407	WITHOUT_CLASSIFICATION	7.597154145930181E-5	DESIGN
// all clear	WITHOUT_CLASSIFICATION	0.9999922512853047	WITHOUT_CLASSIFICATION	7.748714695312615E-6	DESIGN
// Ignore the token class name parameter, and use a specific token class.	WITHOUT_CLASSIFICATION	0.9999999264501144	WITHOUT_CLASSIFICATION	7.354988556873057E-8	DESIGN
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999981571073107	WITHOUT_CLASSIFICATION	1.8428926893258297E-6	DESIGN
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999981571073107	WITHOUT_CLASSIFICATION	1.8428926893258297E-6	DESIGN
// remember that ordinal parameters numbers are 1-based!!!	WITHOUT_CLASSIFICATION	0.999970833684841	WITHOUT_CLASSIFICATION	2.9166315159072665E-5	DESIGN
// don't care about other param types here, just those explicitly user-defined...	WITHOUT_CLASSIFICATION	0.9999999855993085	WITHOUT_CLASSIFICATION	1.4400691579416183E-8	DESIGN
// If the query is already compiled, skip the compilation.	WITHOUT_CLASSIFICATION	0.9999999941644581	WITHOUT_CLASSIFICATION	5.835541977974038E-9	DESIGN
// Remember the parameters for the compilation.	WITHOUT_CLASSIFICATION	0.999998290007306	WITHOUT_CLASSIFICATION	1.7099926940133631E-6	DESIGN
// PHASE 1 : Parse the HQL into an AST.	WITHOUT_CLASSIFICATION	0.9999854664122975	WITHOUT_CLASSIFICATION	1.4533587702516387E-5	DESIGN
// PHASE 2 : Analyze the HQL AST, and produce an SQL AST.	WITHOUT_CLASSIFICATION	0.9999347858092084	WITHOUT_CLASSIFICATION	6.521419079166238E-5	DESIGN
// PHASE 3 : Generate the SQL.	WITHOUT_CLASSIFICATION	0.9997260298528188	WITHOUT_CLASSIFICATION	2.739701471812231E-4	DESIGN
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.999998400046088	WITHOUT_CLASSIFICATION	1.5999539120219153E-6	DESIGN
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.999998400046088	WITHOUT_CLASSIFICATION	1.5999539120219153E-6	DESIGN
//only needed during compilation phase...	WITHOUT_CLASSIFICATION	0.9999985499603677	WITHOUT_CLASSIFICATION	1.4500396322639705E-6	DESIGN
// Transform the tree.	WITHOUT_CLASSIFICATION	0.9999999206068308	WITHOUT_CLASSIFICATION	7.939316920517739E-8	DESIGN
// Parse the query string into an HQL AST.	WITHOUT_CLASSIFICATION	0.9999878658596926	WITHOUT_CLASSIFICATION	1.2134140307380427E-5	DESIGN
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999984619749892	WITHOUT_CLASSIFICATION	1.5380250107558234E-6	DESIGN
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999984619749892	WITHOUT_CLASSIFICATION	1.5380250107558234E-6	DESIGN
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999984619749892	WITHOUT_CLASSIFICATION	1.5380250107558234E-6	DESIGN
// NOTE : ( max - 1 ) because first is zero-based while max is not...	WITHOUT_CLASSIFICATION	0.9950604354036493	WITHOUT_CLASSIFICATION	0.004939564596350757	DESIGN
// -- Package local methods for the QueryLoader delegate --	WITHOUT_CLASSIFICATION	0.9999997618894765	WITHOUT_CLASSIFICATION	2.3811052346803562E-7	DESIGN
// If there are no collection fetches, then no further checks are needed	WITHOUT_CLASSIFICATION	0.9999999974170353	WITHOUT_CLASSIFICATION	2.5829646318235404E-9	DESIGN
// A shallow query is ok (although technically there should be no fetching here...)	WITHOUT_CLASSIFICATION	0.9612916679003575	WITHOUT_CLASSIFICATION	0.038708332099642584	DESIGN
// should be the first, but just to be safe...	WITHOUT_CLASSIFICATION	0.9993477781159811	WITHOUT_CLASSIFICATION	6.522218840189423E-4	DESIGN
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999973285580939	WITHOUT_CLASSIFICATION	2.6714419061117945E-6	DESIGN
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999973285580939	WITHOUT_CLASSIFICATION	2.6714419061117945E-6	DESIGN
// Impl Note: allows multiple collection fetches as long as the // entire fecthed graph still "points back" to a single // root entity for return	WITHOUT_CLASSIFICATION	0.9999996937299331	WITHOUT_CLASSIFICATION	3.062700668774012E-7	DESIGN
// Otherwise, we have a non-scalar select with defined collection fetch(es). // Make sure that there is only a single root entity in the return (no tuples)	WITHOUT_CLASSIFICATION	0.9999685345078102	WITHOUT_CLASSIFICATION	3.1465492189880315E-5	DESIGN
// This is not strictly true.  We actually just need to make sure that // it is ordered by root-entity PK and that that order-by comes before // any non-root-entity ordering...	WITHOUT_CLASSIFICATION	0.9987663639010703	WITHOUT_CLASSIFICATION	0.0012336360989296897	DESIGN
//	WITHOUT_CLASSIFICATION	0.9959144787197332	WITHOUT_CLASSIFICATION	0.004085521280266773	DESIGN
// we are already processing a dot-structure	WITHOUT_CLASSIFICATION	0.9999915365480924	WITHOUT_CLASSIFICATION	8.463451907675265E-6	DESIGN
// igndore it...	WITHOUT_CLASSIFICATION	0.9999988962127342	WITHOUT_CLASSIFICATION	1.1037872658365846E-6	DESIGN
// we are now at a new tree level	WITHOUT_CLASSIFICATION	0.9999999445063767	WITHOUT_CLASSIFICATION	5.549362321456637E-8	DESIGN
// [jsd] The fix for HHH-558...	WITHOUT_CLASSIFICATION	0.9995750770311698	WITHOUT_CLASSIFICATION	4.2492296883023196E-4	DESIGN
// If the token can tell us if it could be an identifier...	WITHOUT_CLASSIFICATION	0.9999655022793127	WITHOUT_CLASSIFICATION	3.449772068738015E-5	DESIGN
// ... and the expected token type was an identifier, then:	WITHOUT_CLASSIFICATION	0.9999999953958252	WITHOUT_CLASSIFICATION	4.604174830111625E-9	DESIGN
// Use the token as an identifier.	WITHOUT_CLASSIFICATION	0.9999997687124988	WITHOUT_CLASSIFICATION	2.3128750112476855E-7	DESIGN
// Add the token to the AST.	WITHOUT_CLASSIFICATION	0.999998888421414	WITHOUT_CLASSIFICATION	1.111578585964282E-6	DESIGN
// (NOT (EQ a b) ) => (NE a b)	WITHOUT_CLASSIFICATION	0.999920758126766	WITHOUT_CLASSIFICATION	7.924187323412799E-5	DESIGN
// (NOT (NE a b) ) => (EQ a b)	WITHOUT_CLASSIFICATION	0.999920758126766	WITHOUT_CLASSIFICATION	7.924187323412799E-5	DESIGN
// (NOT (LT a b) ) => (GE a b)	WITHOUT_CLASSIFICATION	0.999873163640463	WITHOUT_CLASSIFICATION	1.2683635953705813E-4	DESIGN
// (NOT (GE a b) ) => (LT a b)	WITHOUT_CLASSIFICATION	0.999873163640463	WITHOUT_CLASSIFICATION	1.2683635953705813E-4	DESIGN
// (NOT (LE a b) ) => (GT a b)	WITHOUT_CLASSIFICATION	0.9998211440619985	WITHOUT_CLASSIFICATION	1.7885593800148904E-4	DESIGN
// (NOT (LIKE a b) ) => (NOT_LIKE a b)	WITHOUT_CLASSIFICATION	0.9999846845417463	WITHOUT_CLASSIFICATION	1.531545825362591E-5	DESIGN
// (NOT (NOT_LIKE a b) ) => (LIKE a b)	WITHOUT_CLASSIFICATION	0.9999846845417463	WITHOUT_CLASSIFICATION	1.531545825362591E-5	DESIGN
// (NOT (IS_NOT_NULL a b) ) => (IS_NULL a b)	WITHOUT_CLASSIFICATION	0.9999683003651513	WITHOUT_CLASSIFICATION	3.169963484873939E-5	DESIGN
// (NOT (BETWEEN a b) ) => (NOT_BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999928132565814	WITHOUT_CLASSIFICATION	7.186743418523903E-6	DESIGN
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999996999982507	WITHOUT_CLASSIFICATION	3.0000174937543934E-7	DESIGN
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999981571073107	WITHOUT_CLASSIFICATION	1.8428926893258297E-6	DESIGN
// if // if // Otherwise, handle the error normally.	WITHOUT_CLASSIFICATION	0.999975225305139	WITHOUT_CLASSIFICATION	2.4774694861025547E-5	DESIGN
// (NOT (NOT_BETWEEN a b) ) => (BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999928132565814	WITHOUT_CLASSIFICATION	7.186743418523903E-6	DESIGN
/* This can never happen because this rule will always eliminate the child NOT.	WITHOUT_CLASSIFICATION	0.9990612583303763	WITHOUT_CLASSIFICATION	9.387416696236658E-4	DESIGN
// Just add a 'not' parent.	WITHOUT_CLASSIFICATION	0.9999872327603746	WITHOUT_CLASSIFICATION	1.2767239625293142E-5	DESIGN
// (EQ NULL b) => (IS_NULL b)	WITHOUT_CLASSIFICATION	0.9999906203384035	WITHOUT_CLASSIFICATION	9.3796615964702E-6	DESIGN
// (EQ a NULL) => (IS_NULL a)	WITHOUT_CLASSIFICATION	0.9999961124567349	WITHOUT_CLASSIFICATION	3.887543265082687E-6	DESIGN
// NOTE: Because we're using ASTUtil.createParent(), the tree must be created from the bottom up. // IS EMPTY x => (EXISTS (QUERY (SELECT_FROM (FROM x) ) ) )	WITHOUT_CLASSIFICATION	0.9999797623164014	WITHOUT_CLASSIFICATION	2.0237683598599815E-5	DESIGN
// Add NOT if it's negated.	WITHOUT_CLASSIFICATION	0.9997916809976919	WITHOUT_CLASSIFICATION	2.0831900230810786E-4	DESIGN
// Create nodes that track line and column number.	WITHOUT_CLASSIFICATION	0.9999998139615083	WITHOUT_CLASSIFICATION	1.8603849172107496E-7	DESIGN
// Case 1: Multi token keywords GROUP BY and ORDER BY // The next token ( LT(2) ) should be 'by'... otherwise, this is just an ident.	WITHOUT_CLASSIFICATION	0.8689794064842419	WITHOUT_CLASSIFICATION	0.13102059351575823	DESIGN
// Case 2: The current token is after FROM and before '.'.	WITHOUT_CLASSIFICATION	0.9999997397944552	WITHOUT_CLASSIFICATION	2.602055447476313E-7	DESIGN
// This handles HHH-354, where there is a strange property name in a where clause. // If the lookahead contains a DOT then something that isn't an IDENT...	WITHOUT_CLASSIFICATION	0.5348621531123734	WITHOUT_CLASSIFICATION	0.4651378468876265	DESIGN
// See if the second lookahed token can be an identifier.	WITHOUT_CLASSIFICATION	0.9999999598044642	WITHOUT_CLASSIFICATION	4.019553581211415E-8	DESIGN
// Set it!	WITHOUT_CLASSIFICATION	0.9999450430543371	WITHOUT_CLASSIFICATION	5.4956945663062675E-5	DESIGN
// ignore	WITHOUT_CLASSIFICATION	0.9999972509027046	WITHOUT_CLASSIFICATION	2.7490972954077436E-6	DESIGN
// strip the " where "	WITHOUT_CLASSIFICATION	0.9999979916211331	WITHOUT_CLASSIFICATION	2.0083788668997293E-6	DESIGN
// Don't really know all the codes required to adequately decipher returned jdbc exceptions here. // simply allow the failure to be eaten and the subsequent insert-selects/deletes should fail	WITHOUT_CLASSIFICATION	0.9999617738890194	WITHOUT_CLASSIFICATION	3.822611098056804E-5	DESIGN
// at the very least cleanup the data :)	WITHOUT_CLASSIFICATION	0.9996751939361873	WITHOUT_CLASSIFICATION	3.2480606381274726E-4	DESIGN
// First, save off the pertinent ids, as the return value	WITHOUT_CLASSIFICATION	0.9999990534234885	WITHOUT_CLASSIFICATION	9.465765115540255E-7	DESIGN
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999289111195482	WITHOUT_CLASSIFICATION	7.108888045187095E-5	DESIGN
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999289111195482	WITHOUT_CLASSIFICATION	7.108888045187095E-5	DESIGN
// Start performing the updates	WITHOUT_CLASSIFICATION	0.9999987281240914	WITHOUT_CLASSIFICATION	1.2718759086307834E-6	DESIGN
// First, save off the pertinent ids, saving the number of pertinent ids for return	WITHOUT_CLASSIFICATION	0.9999445715453118	WITHOUT_CLASSIFICATION	5.542845468808626E-5	DESIGN
// Start performing the deletes	WITHOUT_CLASSIFICATION	0.9999995691339881	WITHOUT_CLASSIFICATION	4.308660118470475E-7	DESIGN
// otherwise, everything ok.	WITHOUT_CLASSIFICATION	0.9997516498578372	WITHOUT_CLASSIFICATION	2.4835014216281336E-4	DESIGN
// visit width-first, then depth	WITHOUT_CLASSIFICATION	0.9998792640556858	WITHOUT_CLASSIFICATION	1.2073594431417952E-4	DESIGN
// if the types report logical equivalence, return true...	WITHOUT_CLASSIFICATION	0.9999958677932693	WITHOUT_CLASSIFICATION	4.1322067307344534E-6	DESIGN
// otherwise, perform a "deep equivalence" check...	WITHOUT_CLASSIFICATION	0.9999998052690829	WITHOUT_CLASSIFICATION	1.9473091697697644E-7	DESIGN
// If there is no WHERE node, make one.	WITHOUT_CLASSIFICATION	0.9999972977578321	WITHOUT_CLASSIFICATION	2.702242167939606E-6	DESIGN
// inject the WHERE after the parent	WITHOUT_CLASSIFICATION	0.9999109844039158	WITHOUT_CLASSIFICATION	8.901559608418155E-5	DESIGN
// Never include subclasses for implied from elements.	WITHOUT_CLASSIFICATION	0.9995853181944053	WITHOUT_CLASSIFICATION	4.146818055947576E-4	DESIGN
// Moved here from SelectClause [jsd]	WITHOUT_CLASSIFICATION	0.9999981815004885	WITHOUT_CLASSIFICATION	1.81849951164442E-6	DESIGN
///////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9994899601669325	WITHOUT_CLASSIFICATION	5.100398330676239E-4	DESIGN
// Use the table fromElement and the property name to get the array of column names.	WITHOUT_CLASSIFICATION	0.9999822468653069	WITHOUT_CLASSIFICATION	1.7753134693094197E-5	DESIGN
// Set the attributes of the property reference expression.	WITHOUT_CLASSIFICATION	0.9999967532486315	WITHOUT_CLASSIFICATION	3.246751368506155E-6	DESIGN
// If the uresolved property path isn't set yet, just use the property name.	WITHOUT_CLASSIFICATION	0.9987045216014727	WITHOUT_CLASSIFICATION	0.0012954783985273475	DESIGN
// The 'from element' that the property is in.	WITHOUT_CLASSIFICATION	0.9995469627985492	WITHOUT_CLASSIFICATION	4.5303720145079663E-4	DESIGN
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999999974799827	WITHOUT_CLASSIFICATION	2.5200172843965634E-9	DESIGN
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999999974799827	WITHOUT_CLASSIFICATION	2.5200172843965634E-9	DESIGN
// If this dot has already been resolved, stop now.	WITHOUT_CLASSIFICATION	0.9999567074463667	WITHOUT_CLASSIFICATION	4.3292553633261514E-5	DESIGN
// If there is no data type for this node, and we're at the end of the path (top most dot node), then // this might be a Java constant.	WITHOUT_CLASSIFICATION	0.9999991411503307	WITHOUT_CLASSIFICATION	8.588496694176512E-7	DESIGN
// The property is a collection...	WITHOUT_CLASSIFICATION	0.9994948316638111	WITHOUT_CLASSIFICATION	5.051683361888561E-4	DESIGN
// The property is a component...	WITHOUT_CLASSIFICATION	0.9996140784113388	WITHOUT_CLASSIFICATION	3.8592158866128265E-4	DESIGN
// The property is another class..	WITHOUT_CLASSIFICATION	0.9961570967335522	WITHOUT_CLASSIFICATION	0.003842903266447803	DESIGN
// Otherwise, this is a primitive type.	WITHOUT_CLASSIFICATION	0.9998999094338067	WITHOUT_CLASSIFICATION	1.0009056619328812E-4	DESIGN
//foo.bars.size (also handles deprecated stuff like foo.bars.maxelement for backwardness)	WITHOUT_CLASSIFICATION	0.9997504241463113	WITHOUT_CLASSIFICATION	2.4957585368866987E-4	DESIGN
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999480271877147	WITHOUT_CLASSIFICATION	5.197281228530815E-5	DESIGN
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999999103677313	WITHOUT_CLASSIFICATION	8.96322687838527E-8	DESIGN
// in non-select queries, the only time we should need to join is if we are in a subquery from clause	WITHOUT_CLASSIFICATION	0.9999996313927569	WITHOUT_CLASSIFICATION	3.686072429954162E-7	DESIGN
// this is the regression style determination which matches the logic of the classic translator	WITHOUT_CLASSIFICATION	0.9999148164047698	WITHOUT_CLASSIFICATION	8.518359523034617E-5	DESIGN
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999480271877147	WITHOUT_CLASSIFICATION	5.197281228530815E-5	DESIGN
// even though we might find a pre-existing element by join path, we may not be able to reuse it...	WITHOUT_CLASSIFICATION	0.9981227658640246	WITHOUT_CLASSIFICATION	0.0018772341359754015	DESIGN
// NOTE : addDuplicateAlias() already performs nullness checks on the alias.	WITHOUT_CLASSIFICATION	0.9999999876579719	WITHOUT_CLASSIFICATION	1.2342028125418367E-8	DESIGN
// if the from-clauses are the same, we can be a little more aggressive in terms of what we reuse	WITHOUT_CLASSIFICATION	0.9985870017328277	WITHOUT_CLASSIFICATION	0.0014129982671723363	DESIGN
// again, null != null here	WITHOUT_CLASSIFICATION	0.999999668158246	WITHOUT_CLASSIFICATION	3.3184175388181407E-7	DESIGN
// If this is an implied join in a from element, then use the impled join type which is part of the // tree parser's state (set by the gramamar actions).	WITHOUT_CLASSIFICATION	0.9999994435901592	WITHOUT_CLASSIFICATION	5.564098407245072E-7	DESIGN
// otherwise (subquery case) dont reuse the fromElement if we are processing the from-clause of the subquery	WITHOUT_CLASSIFICATION	0.9999985117374153	WITHOUT_CLASSIFICATION	1.4882625847440456E-6	DESIGN
// we know only the lhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999980719505933	WITHOUT_CLASSIFICATION	1.928049406686168E-6	DESIGN
// the referenced node text is the special 'id'	WITHOUT_CLASSIFICATION	0.9999999519584069	WITHOUT_CLASSIFICATION	4.8041593149129164E-8	DESIGN
// only the identifier property field name can be a reference to the associated entity's PK...	WITHOUT_CLASSIFICATION	0.999941000042504	WITHOUT_CLASSIFICATION	5.899995749601512E-5	DESIGN
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9999973545957953	WITHOUT_CLASSIFICATION	2.6454042047434913E-6	DESIGN
// Append the new property name onto the unresolved path.	WITHOUT_CLASSIFICATION	0.9999814265385621	WITHOUT_CLASSIFICATION	1.8573461437927958E-5	DESIGN
// If the lhs is a collection, use CollectionPropertyMapping	WITHOUT_CLASSIFICATION	0.9999806443471702	WITHOUT_CLASSIFICATION	1.9355652829859297E-5	DESIGN
// Tell the destination fromElement to 'includeSubclasses'.	WITHOUT_CLASSIFICATION	0.9999967915843117	WITHOUT_CLASSIFICATION	3.2084156883516307E-6	DESIGN
// Use theta style (for regression) // Move the node up, after the origin node.	WITHOUT_CLASSIFICATION	0.9999972581123395	WITHOUT_CLASSIFICATION	2.7418876605793016E-6	DESIGN
// Don't resolve the node again.	WITHOUT_CLASSIFICATION	0.9999999084243041	WITHOUT_CLASSIFICATION	9.157569590257258E-8	DESIGN
// for expected parameter type injection, we expect that the lhs represents // some form of property ref and that the children of the in-list represent // one-or-more params.	WITHOUT_CLASSIFICATION	0.9999928565368424	WITHOUT_CLASSIFICATION	7.143463157655249E-6	DESIGN
// we need to strip off the embedded parens so that sql-gen does not double these up	WITHOUT_CLASSIFICATION	0.998909900519298	WITHOUT_CLASSIFICATION	0.0010900994807019838	DESIGN
// we have something like : "? [op] rhs"	WITHOUT_CLASSIFICATION	0.9761092981507035	WITHOUT_CLASSIFICATION	0.023890701849296557	DESIGN
// we have something like : "lhs [op] ?"	WITHOUT_CLASSIFICATION	0.9837185383864351	WITHOUT_CLASSIFICATION	0.01628146161356489	DESIGN
// we know only the rhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999984090168825	WITHOUT_CLASSIFICATION	1.5909831174288275E-6	DESIGN
// handle the (assumed) valid cases: // #1 - the only valid datetime addition synatx is one or the other is a datetime (but not both)	WITHOUT_CLASSIFICATION	0.9996113651561401	WITHOUT_CLASSIFICATION	3.8863484385984057E-4	DESIGN
// one or the other needs to be a datetime for us to get into this method in the first place...	WITHOUT_CLASSIFICATION	0.9996285135871388	WITHOUT_CLASSIFICATION	3.714864128611898E-4	DESIGN
// #3 - note that this is also true of "datetime - :param"...	WITHOUT_CLASSIFICATION	0.9999297178660177	WITHOUT_CLASSIFICATION	7.028213398237027E-5	DESIGN
// #2	WITHOUT_CLASSIFICATION	0.99998732036094	WITHOUT_CLASSIFICATION	1.267963906006683E-5	DESIGN
// Generate the inner join -- The elements need to be joined to the collection they are in.	WITHOUT_CLASSIFICATION	0.9999999956036748	WITHOUT_CLASSIFICATION	4.3963251924351045E-9	DESIGN
// nothing to do	WITHOUT_CLASSIFICATION	0.9998717947581826	WITHOUT_CLASSIFICATION	1.2820524181740044E-4	DESIGN
// The 'from element' that represents the elements of the collection.	WITHOUT_CLASSIFICATION	0.9999912307219612	WITHOUT_CLASSIFICATION	8.769278038913736E-6	DESIGN
// Add the condition to the join sequence that qualifies the indexed element.	WITHOUT_CLASSIFICATION	0.999999989862856	WITHOUT_CLASSIFICATION	1.0137143955178968E-8	DESIGN
// Sometimes use the element table alias, sometimes use the... umm... collection table alias (many to many)	WITHOUT_CLASSIFICATION	0.9999998761297256	WITHOUT_CLASSIFICATION	1.2387027440047553E-7	DESIGN
// Now, set the text for this node.  It should be the element columns.	WITHOUT_CLASSIFICATION	0.9818460227147225	WITHOUT_CLASSIFICATION	0.018153977285277404	DESIGN
// Get the function return value type, based on the type of the first argument.	WITHOUT_CLASSIFICATION	0.9999999297174095	WITHOUT_CLASSIFICATION	7.028259050997E-8	DESIGN
// This will call initialize(tok)!	WITHOUT_CLASSIFICATION	0.9655051609843703	WITHOUT_CLASSIFICATION	0.03449483901562974	DESIGN
// mutation depends on the types of nodes invloved...	WITHOUT_CLASSIFICATION	0.9999771370602462	WITHOUT_CLASSIFICATION	2.2862939753764158E-5	DESIGN
// "pass along" our initial embedded parameter node(s) to the first generated // sql fragment so that it can be handled later for parameter binding...	WITHOUT_CLASSIFICATION	0.9939942452400856	WITHOUT_CLASSIFICATION	0.006005754759914307	DESIGN
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999992752423171	WITHOUT_CLASSIFICATION	7.247576827666967E-7	DESIGN
// Generated select expressions are already resolved, nothing to do.	WITHOUT_CLASSIFICATION	0.9999997507201402	WITHOUT_CLASSIFICATION	2.4927985977637815E-7	DESIGN
// The path may be a reference to an alias defined in the parent query.	WITHOUT_CLASSIFICATION	0.9997257866867028	WITHOUT_CLASSIFICATION	2.7421331329723824E-4	DESIGN
// The HQL class alias refers to the class name.	WITHOUT_CLASSIFICATION	0.9999995812367181	WITHOUT_CLASSIFICATION	4.18763281939751E-7	DESIGN
// Associate the table alias with the element.	WITHOUT_CLASSIFICATION	0.9999999686554172	WITHOUT_CLASSIFICATION	3.13445828471794E-8	DESIGN
// try the parent FromClause...	WITHOUT_CLASSIFICATION	0.9999706412463115	WITHOUT_CLASSIFICATION	2.9358753688380873E-5	DESIGN
// Add the new node to the map so that we don't create it twice.	WITHOUT_CLASSIFICATION	0.9999970589454433	WITHOUT_CLASSIFICATION	2.941054556700493E-6	DESIGN
// Make sure that all from elements registered with this FROM clause are actually in the AST.	WITHOUT_CLASSIFICATION	0.9999979654531381	WITHOUT_CLASSIFICATION	2.034546861817728E-6	DESIGN
// Invoke setScalarColumnText on each constructor argument.	WITHOUT_CLASSIFICATION	0.9999945698021677	WITHOUT_CLASSIFICATION	5.430197832246274E-6	DESIGN
// Collect the select expressions, skip the first child because it is the class name.	WITHOUT_CLASSIFICATION	0.9999999994060993	WITHOUT_CLASSIFICATION	5.93900631604485E-10	DESIGN
// return an empty Type array	WITHOUT_CLASSIFICATION	0.9999912592864972	WITHOUT_CLASSIFICATION	8.740713502733151E-6	DESIGN
// Constructors are always considered scalar results.	WITHOUT_CLASSIFICATION	0.9999874673222947	WITHOUT_CLASSIFICATION	1.2532677705383668E-5	DESIGN
// this is the exception returned by ReflectHelper.getConstructor() if it cannot // locate an appropriate constructor	WITHOUT_CLASSIFICATION	0.9999996615850361	WITHOUT_CLASSIFICATION	3.384149639970143E-7	DESIGN
// if there is no order by, make one	WITHOUT_CLASSIFICATION	0.9999961376849652	WITHOUT_CLASSIFICATION	3.862315034752598E-6	DESIGN
// Find the WHERE; if there is no WHERE, find the FROM...	WITHOUT_CLASSIFICATION	0.999994826530515	WITHOUT_CLASSIFICATION	5.173469485008717E-6	DESIGN
// Now, inject the newly built ORDER BY into the tree	WITHOUT_CLASSIFICATION	0.9999550088308061	WITHOUT_CLASSIFICATION	4.499116919390525E-5	DESIGN
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999588787985	WITHOUT_CLASSIFICATION	4.112120150596203E-7	DESIGN
// logic operators by definition resolve to boolean.	WITHOUT_CLASSIFICATION	0.9999994955934438	WITHOUT_CLASSIFICATION	5.044065561705004E-7	DESIGN
// Render the identifier select fragment using the table alias.	WITHOUT_CLASSIFICATION	0.9999885139095316	WITHOUT_CLASSIFICATION	1.148609046843847E-5	DESIGN
// Class names in the FROM clause result in a JoinSequence (the old FromParser does this).	WITHOUT_CLASSIFICATION	0.9999999938452055	WITHOUT_CLASSIFICATION	6.154794498197677E-9	DESIGN
// For many-to-many joins, use the tablename from the queryable collection for the default text.	WITHOUT_CLASSIFICATION	0.9999999888098617	WITHOUT_CLASSIFICATION	1.1190138365642005E-8	DESIGN
// Otherwise, use the property mapping.	WITHOUT_CLASSIFICATION	0.9999917704910032	WITHOUT_CLASSIFICATION	8.229508996791254E-6	DESIGN
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9999883780753486	WITHOUT_CLASSIFICATION	1.162192465138889E-5	DESIGN
// If the property is a special collection property name, return a CollectionPropertyMapping.	WITHOUT_CLASSIFICATION	0.9999984939160282	WITHOUT_CLASSIFICATION	1.5060839717628024E-6	DESIGN
// Collection of components.	WITHOUT_CLASSIFICATION	0.9999976846332025	WITHOUT_CLASSIFICATION	2.315366797542454E-6	DESIGN
// make sure the lhs is "assignable"...	WITHOUT_CLASSIFICATION	0.999999861098246	WITHOUT_CLASSIFICATION	1.3890175390252778E-7	DESIGN
// false indicates to not generate parens around the assignment	WITHOUT_CLASSIFICATION	0.999180897383646	WITHOUT_CLASSIFICATION	8.191026163539503E-4	DESIGN
// Register the FromElement with the FROM clause, now that we have the names and aliases.	WITHOUT_CLASSIFICATION	0.9999821956977549	WITHOUT_CLASSIFICATION	1.780430224507815E-5	DESIGN
// currently allowed...	WITHOUT_CLASSIFICATION	0.9999983938794951	WITHOUT_CLASSIFICATION	1.6061205049755666E-6	DESIGN
// HHH-276 : implied joins in a subselect where clause - The destination needs to be added // to the destination's from clause. // Not sure if this is will fix everything, but it works.	WITHOUT_CLASSIFICATION	0.9999955286099	DESIGN	4.471390099980363E-6	WITHOUT_CLASSIFICATION
//return classAlias == null ? className : classAlias;	WITHOUT_CLASSIFICATION	0.9997160728580619	WITHOUT_CLASSIFICATION	2.8392714193819596E-4	DESIGN
// This is an explicit FROM element.	WITHOUT_CLASSIFICATION	0.9998164687732163	WITHOUT_CLASSIFICATION	1.8353122678368053E-4	DESIGN
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999588787985	WITHOUT_CLASSIFICATION	4.112120150596203E-7	DESIGN
// Fetch can't be used with scroll() or iterate().	WITHOUT_CLASSIFICATION	0.9999711518036782	WITHOUT_CLASSIFICATION	2.884819632182497E-5	DESIGN
// If it's not implied or it is implied and it's a many to many join where the target wasn't found.	WITHOUT_CLASSIFICATION	0.9999991434341002	WITHOUT_CLASSIFICATION	8.565658998041637E-7	DESIGN
// Since this is an explicit FROM element, it can't be implied in the FROM clause.	WITHOUT_CLASSIFICATION	0.9950393512759833	WITHOUT_CLASSIFICATION	0.004960648724016682	DESIGN
// Do nothing, eplicit from elements are *always* in the projection list.	WITHOUT_CLASSIFICATION	0.9999506677998743	WITHOUT_CLASSIFICATION	4.933220012572983E-5	DESIGN
// propertyName refers to something like collection.size...	WITHOUT_CLASSIFICATION	0.9999142846666959	WITHOUT_CLASSIFICATION	8.571533330413726E-5	DESIGN
// property name is a sub-path of a component...	WITHOUT_CLASSIFICATION	0.9999068621706855	WITHOUT_CLASSIFICATION	9.313782931456177E-5	DESIGN
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999999103677313	WITHOUT_CLASSIFICATION	8.96322687838527E-8	DESIGN
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.8511113194820916	WITHOUT_CLASSIFICATION	0.14888868051790832	DESIGN
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999992752423171	WITHOUT_CLASSIFICATION	7.247576827666967E-7	DESIGN
// DotNode uses null here...	WITHOUT_CLASSIFICATION	0.9998577192883306	WITHOUT_CLASSIFICATION	1.4228071166947265E-4	DESIGN
// We represent a from-clause alias	WITHOUT_CLASSIFICATION	0.999999197692226	WITHOUT_CLASSIFICATION	8.023077739738915E-7	DESIGN
// we are the LHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999793505498674	WITHOUT_CLASSIFICATION	2.0649450132641113E-5	DESIGN
// we are the RHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999732658186389	WITHOUT_CLASSIFICATION	2.6734181361122702E-5	DESIGN
// we represent a naked (simple) prop-ref	WITHOUT_CLASSIFICATION	0.9997816128997965	WITHOUT_CLASSIFICATION	2.1838710020338341E-4	DESIGN
// EARLY EXIT!!!  return so the resolve call explicitly coming from DotNode can // resolve this...	WITHOUT_CLASSIFICATION	0.5699376410199193	WITHOUT_CLASSIFICATION	0.4300623589800806	DESIGN
// assume this ident's text does *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999864219329114	WITHOUT_CLASSIFICATION	1.357806708853617E-5	DESIGN
// just ignore it for now, it'll get resolved later...	WITHOUT_CLASSIFICATION	0.9998182302390087	WITHOUT_CLASSIFICATION	1.8176976099136468E-4	DESIGN
// This is not actually a constant, but a reference to FROM element.	WITHOUT_CLASSIFICATION	0.996697537312625	WITHOUT_CLASSIFICATION	0.0033024626873749477	DESIGN
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999997673635779	WITHOUT_CLASSIFICATION	2.3263642208263152E-7	DESIGN
// these pieces are needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9999600208386845	WITHOUT_CLASSIFICATION	3.997916131548795E-5	DESIGN
// used to set the type of the parent dot node	WITHOUT_CLASSIFICATION	0.999741129735545	WITHOUT_CLASSIFICATION	2.5887026445493583E-4	DESIGN
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999512598554803	WITHOUT_CLASSIFICATION	4.8740144519781224E-5	DESIGN
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999512598554803	WITHOUT_CLASSIFICATION	4.8740144519781224E-5	DESIGN
// naked property-refs cannot be used with an aliased from element	WITHOUT_CLASSIFICATION	0.9947537042530449	WITHOUT_CLASSIFICATION	0.005246295746955103	DESIGN
// this piece is needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9999339331664345	WITHOUT_CLASSIFICATION	6.60668335654184E-5	DESIGN
// do *not* over-write the column text, as that has already been // "rendered" during resolve	WITHOUT_CLASSIFICATION	0.999999992128364	WITHOUT_CLASSIFICATION	7.871636112804366E-9	DESIGN
// for some reason the antlr.CommonAST initialization routines force // this method to get called twice.  The first time with an empty string	WITHOUT_CLASSIFICATION	0.997117324931654	WITHOUT_CLASSIFICATION	0.0028826750683461472	DESIGN
// Look up class name using the first identifier in the path.	WITHOUT_CLASSIFICATION	0.9999901471121918	WITHOUT_CLASSIFICATION	9.852887808124665E-6	DESIGN
// Add to the query spaces.	WITHOUT_CLASSIFICATION	0.9999594918932717	WITHOUT_CLASSIFICATION	4.0508106728265005E-5	DESIGN
// If the from element isn't in the same clause, create a new from element.	WITHOUT_CLASSIFICATION	0.9999930622632719	WITHOUT_CLASSIFICATION	6.937736728074328E-6	DESIGN
// This is the root level node. // Generate an explicit from clause at the root.	WITHOUT_CLASSIFICATION	0.9995307882166269	WITHOUT_CLASSIFICATION	4.692117833732269E-4	DESIGN
// Correlated subqueries create 'special' implied from nodes // because correlated subselects can't use an ANSI-style join	WITHOUT_CLASSIFICATION	0.999996286500877	WITHOUT_CLASSIFICATION	3.7134991230579286E-6	DESIGN
// super-duper-classic-parser-regression-testing-mojo-magic...	WITHOUT_CLASSIFICATION	0.999993356240864	WITHOUT_CLASSIFICATION	6.6437591360166965E-6	DESIGN
// A collection of entities...	WITHOUT_CLASSIFICATION	0.9999935269649185	WITHOUT_CLASSIFICATION	6.473035081439447E-6	DESIGN
// A collection of components...	WITHOUT_CLASSIFICATION	0.9999999240429382	WITHOUT_CLASSIFICATION	7.595706176271293E-8	DESIGN
// A collection of scalar elements...	WITHOUT_CLASSIFICATION	0.9999995303891523	WITHOUT_CLASSIFICATION	4.696108476173426E-7	DESIGN
// according to both the ANSI-SQL and EJB3 specs, trim can either take // exactly one parameter or a variable number of parameters between 1 and 4. // from the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If only <trim specification> is omitted, BOTH is assumed; // if <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999999999998043	WITHOUT_CLASSIFICATION	1.9576865258352871E-13	DESIGN
// Don't include sub-classes for implied collection joins or subquery joins.	WITHOUT_CLASSIFICATION	0.999999065445846	WITHOUT_CLASSIFICATION	9.345541539303377E-7	DESIGN
// Treat explict from elements in sub-queries properly.	WITHOUT_CLASSIFICATION	0.9999810145426016	WITHOUT_CLASSIFICATION	1.8985457398433574E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9959144787197332	WITHOUT_CLASSIFICATION	0.004085521280266773	DESIGN
// the "root from-element" in correlated subqueries do need this piece	WITHOUT_CLASSIFICATION	0.999959227175052	WITHOUT_CLASSIFICATION	4.0772824947989004E-5	DESIGN
// Create the FROM element for the target (the elements of the collection).	WITHOUT_CLASSIFICATION	0.9999999925564744	WITHOUT_CLASSIFICATION	7.4435254785886545E-9	DESIGN
// If the join is implied, then don't include sub-classes on the element.	WITHOUT_CLASSIFICATION	0.9999999410857741	WITHOUT_CLASSIFICATION	5.8914225941785014E-8	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998604044337	WITHOUT_CLASSIFICATION	1.3959556637050745E-7	DESIGN
// The associated entity is implied, but it must be included in the FROM. // The collection alias is the role.	WITHOUT_CLASSIFICATION	0.9999960895885662	WITHOUT_CLASSIFICATION	3.910411433764228E-6	DESIGN
// Tag this node as a JOIN. // Don't include subclasses in the join. // This is a clollection join.	WITHOUT_CLASSIFICATION	0.9999962371607923	WITHOUT_CLASSIFICATION	3.762839207595316E-6	DESIGN
// Get the class name of the associated entity.	WITHOUT_CLASSIFICATION	0.9999854975370875	WITHOUT_CLASSIFICATION	1.4502462912533739E-5	DESIGN
//  origin, path, implied, columns, classAlias,	WITHOUT_CLASSIFICATION	0.9999998858745212	WITHOUT_CLASSIFICATION	1.1412547886497173E-7	DESIGN
/*implied*/	WITHOUT_CLASSIFICATION	0.9984708353731541	WITHOUT_CLASSIFICATION	0.0015291646268460021	DESIGN
// For implied many-to-many, just add the end join.	WITHOUT_CLASSIFICATION	0.9999997226179576	WITHOUT_CLASSIFICATION	2.7738204246523624E-7	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998604044337	WITHOUT_CLASSIFICATION	1.3959556637050745E-7	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998604044337	WITHOUT_CLASSIFICATION	1.3959556637050745E-7	DESIGN
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999997883020206	WITHOUT_CLASSIFICATION	2.1169797922172464E-7	DESIGN
// This causes the factory to instantiate the desired class.	WITHOUT_CLASSIFICATION	0.999445090884695	WITHOUT_CLASSIFICATION	5.54909115304923E-4	DESIGN
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9999907386328842	WITHOUT_CLASSIFICATION	9.261367115850169E-6	DESIGN
// Frontbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999813658174447	WITHOUT_CLASSIFICATION	1.8634182555290496E-5	DESIGN
/*	WITHOUT_CLASSIFICATION	0.9402468809369636	WITHOUT_CLASSIFICATION	0.05975311906303642	DESIGN
/*public Type[] getSqlResultTypes() {	WITHOUT_CLASSIFICATION	0.9846200751310539	WITHOUT_CLASSIFICATION	0.015379924868946066	DESIGN
// First, collect all of the select expressions. // NOTE: This must be done *before* invoking setScalarColumnText() because setScalarColumnText() // changes the AST!!!	WITHOUT_CLASSIFICATION	0.999936020812798	WITHOUT_CLASSIFICATION	6.397918720206768E-5	DESIGN
// First allow the actual type to control the return value. (the actual underlying sqltype could actually be different)	WITHOUT_CLASSIFICATION	0.999961585345079	WITHOUT_CLASSIFICATION	3.8414654921072135E-5	DESIGN
//sqlResultTypeList.addAll( constructorArgumentTypeList );	WITHOUT_CLASSIFICATION	0.9997955414030995	WITHOUT_CLASSIFICATION	2.0445859690045154E-4	DESIGN
// If the data type is not an association type, it could not have been in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999674683696768	WITHOUT_CLASSIFICATION	3.253163032328137E-5	DESIGN
//sqlResultTypeList.add( type );	WITHOUT_CLASSIFICATION	0.9999061064539341	WITHOUT_CLASSIFICATION	9.389354606589795E-5	DESIGN
// Always add the type to the return type list.	WITHOUT_CLASSIFICATION	0.9999998321208117	WITHOUT_CLASSIFICATION	1.678791882397493E-7	DESIGN
// add the fetched entities	WITHOUT_CLASSIFICATION	0.999986417208766	WITHOUT_CLASSIFICATION	1.358279123386571E-5	DESIGN
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999976928006393	WITHOUT_CLASSIFICATION	2.3071993606588857E-6	DESIGN
// function support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999803820148271	WITHOUT_CLASSIFICATION	1.9617985172958358E-5	DESIGN
// If there are any scalars (non-entities) selected, render the select column aliases.	WITHOUT_CLASSIFICATION	0.9999999974962739	WITHOUT_CLASSIFICATION	2.5037261539350392E-9	DESIGN
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9997293129301614	WITHOUT_CLASSIFICATION	2.7068706983862E-4	DESIGN
/*ArrayList sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9999968637738913	WITHOUT_CLASSIFICATION	3.136226108682072E-6	DESIGN
//sqlResultTypes = ( Type[] ) sqlResultTypeList.toArray( new Type[sqlResultTypeList.size()] );	WITHOUT_CLASSIFICATION	0.9999993246557264	WITHOUT_CLASSIFICATION	6.753442736966995E-7	DESIGN
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993790582117	WITHOUT_CLASSIFICATION	6.209417883021285E-7	DESIGN
//TODO:	WITHOUT_CLASSIFICATION	0.9446544163598382	WITHOUT_CLASSIFICATION	0.05534558364016197	DESIGN
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999983789716257	WITHOUT_CLASSIFICATION	1.6210283742728897E-6	DESIGN
// Generate an 2d array of column names, the first dimension is parallel with the // return types array.  The second dimension is the list of column names for each // type.	WITHOUT_CLASSIFICATION	0.9999999809179251	WITHOUT_CLASSIFICATION	1.9082074887240396E-8	DESIGN
// Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999999914696618	WITHOUT_CLASSIFICATION	8.53033813500819E-9	DESIGN
// union subclass support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999985052974948	WITHOUT_CLASSIFICATION	1.4947025051969093E-5	DESIGN
// Skip 'DISTINCT' and 'ALL', so we return the first expression node.	WITHOUT_CLASSIFICATION	0.9999914370477919	WITHOUT_CLASSIFICATION	8.562952208066516E-6	DESIGN
// Create SQL_TOKEN nodes for the columns.	WITHOUT_CLASSIFICATION	0.9999999824195321	WITHOUT_CLASSIFICATION	1.758046791875722E-8	DESIGN
// Generate the property select tokens.	WITHOUT_CLASSIFICATION	0.9999531268713104	WITHOUT_CLASSIFICATION	4.6873128689653406E-5	DESIGN
// Get the function name node.	WITHOUT_CLASSIFICATION	0.9999183714496077	WITHOUT_CLASSIFICATION	8.162855039237261E-5	DESIGN
// Method expressions in a SELECT should always be considered scalar.	WITHOUT_CLASSIFICATION	0.999999417373685	WITHOUT_CLASSIFICATION	5.826263149220662E-7	DESIGN
// If this is 'elements' then create a new FROM element.	WITHOUT_CLASSIFICATION	0.9999916290169382	WITHOUT_CLASSIFICATION	8.370983061802585E-6	DESIGN
// Not elements(x)	WITHOUT_CLASSIFICATION	0.9999950769221602	WITHOUT_CLASSIFICATION	4.923077839839138E-6	DESIGN
// Dialect function	WITHOUT_CLASSIFICATION	0.9999977320423866	WITHOUT_CLASSIFICATION	2.2679576133568114E-6	DESIGN
// Collection 'property function'	WITHOUT_CLASSIFICATION	0.9999960174697319	WITHOUT_CLASSIFICATION	3.98253026814859E-6	DESIGN
// If the constant is an IDENT, figure out what it means...	WITHOUT_CLASSIFICATION	0.9999948197010549	WITHOUT_CLASSIFICATION	5.180298945100869E-6	DESIGN
// IDENT is a class alias in the FROM.	WITHOUT_CLASSIFICATION	0.9999983333913777	WITHOUT_CLASSIFICATION	1.6666086223438829E-6	DESIGN
// Resolve to an identity column.	WITHOUT_CLASSIFICATION	0.9998113220253617	WITHOUT_CLASSIFICATION	1.886779746381905E-4	DESIGN
// Otherwise, it's a literal.	WITHOUT_CLASSIFICATION	0.999590760998829	WITHOUT_CLASSIFICATION	4.092390011708999E-4	DESIGN
// the name of an entity class	WITHOUT_CLASSIFICATION	0.9999943302065355	WITHOUT_CLASSIFICATION	5.669793464545258E-6	DESIGN
//the class discriminator value	WITHOUT_CLASSIFICATION	0.9999955232108679	WITHOUT_CLASSIFICATION	4.476789132095523E-6	DESIGN
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999996489249107	WITHOUT_CLASSIFICATION	3.5107508935322144E-7	DESIGN
// Add a space before the display text.	WITHOUT_CLASSIFICATION	0.9999996319722811	WITHOUT_CLASSIFICATION	3.6802771882712347E-7	DESIGN
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999998393313717	WITHOUT_CLASSIFICATION	1.6066862827774657E-7	DESIGN
// child == parent.getFirstChild()	WITHOUT_CLASSIFICATION	0.9999999468517726	WITHOUT_CLASSIFICATION	5.3148227428964924E-8	DESIGN
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999998393313717	WITHOUT_CLASSIFICATION	1.6066862827774657E-7	DESIGN
// Filter conditions need to be inserted before the HQL where condition and the // theta join node.  This is because org.hibernate.loader.Loader binds the filter parameters first, // then it binds all the HQL query parameters, see org.hibernate.loader.Loader.processFilterParameters().	WITHOUT_CLASSIFICATION	0.9999282350746241	WITHOUT_CLASSIFICATION	7.176492537580155E-5	DESIGN
// Put the FILTERS node before the HQL condition and theta joins	WITHOUT_CLASSIFICATION	0.9999988229749311	WITHOUT_CLASSIFICATION	1.1770250688533105E-6	DESIGN
// add the current fragment to the FILTERS node	WITHOUT_CLASSIFICATION	0.999999772787838	WITHOUT_CLASSIFICATION	2.2721216199084833E-7	DESIGN
// Create a new THETA_JOINS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999994042240441	WITHOUT_CLASSIFICATION	5.957759558953469E-7	DESIGN
// Put the THETA_JOINS node before the HQL condition, after the filters.	WITHOUT_CLASSIFICATION	0.9999989011604518	WITHOUT_CLASSIFICATION	1.0988395482547598E-6	DESIGN
// add the current fragment to the THETA_JOINS node	WITHOUT_CLASSIFICATION	0.9999999370270903	WITHOUT_CLASSIFICATION	6.297290955486543E-8	DESIGN
// First, try to get the persister using the given name directly.	WITHOUT_CLASSIFICATION	0.9999787978311259	WITHOUT_CLASSIFICATION	2.120216887410376E-5	DESIGN
// unable to locate it using this name	WITHOUT_CLASSIFICATION	0.999405415899848	WITHOUT_CLASSIFICATION	5.94584100152125E-4	DESIGN
// If that didn't work, try using the 'import' name.	WITHOUT_CLASSIFICATION	0.9999989954954019	WITHOUT_CLASSIFICATION	1.004504598158666E-6	DESIGN
// Implicit joins use theta style (WHERE pk = fk), explicit joins use JOIN (after from)	WITHOUT_CLASSIFICATION	0.9999993133095612	WITHOUT_CLASSIFICATION	6.866904387816784E-7	DESIGN
// locate the registered function by the given name	WITHOUT_CLASSIFICATION	0.9999998862141026	WITHOUT_CLASSIFICATION	1.1378589732716107E-7	DESIGN
// determine the type of the first argument...	WITHOUT_CLASSIFICATION	0.9999814946149995	WITHOUT_CLASSIFICATION	1.850538500050065E-5	DESIGN
// Use the DOT node to emit the first column name. // Create the column names, folled by the column aliases.	WITHOUT_CLASSIFICATION	0.9999998838924171	WITHOUT_CLASSIFICATION	1.1610758292854658E-7	DESIGN
// Note: this simply constructs a "raw" SQL_TOKEN representing the // where fragment and injects this into the tree.  This "works"; // however it is probably not the best long-term solution. // // At some point we probably want to apply an additional grammar to // properly tokenize this where fragment into constituent parts // focused on the operators embedded within the fragment.	WITHOUT_CLASSIFICATION	0.9967749375601809	DESIGN	0.003225062439819003	WITHOUT_CLASSIFICATION
// Append the text of the current node.	WITHOUT_CLASSIFICATION	0.9999999919347912	WITHOUT_CLASSIFICATION	8.065208953709302E-9	DESIGN
// If the node has a first child, recurse into the first child.	WITHOUT_CLASSIFICATION	0.9999999970023916	WITHOUT_CLASSIFICATION	2.9976083245325282E-9	DESIGN
// If there is a second child (RHS), recurse into that child.	WITHOUT_CLASSIFICATION	0.9999834497037572	WITHOUT_CLASSIFICATION	1.6550296242793157E-5	DESIGN
// Iterate through the alias,JoinSequence pairs and generate SQL token nodes.	WITHOUT_CLASSIFICATION	0.9999996537131721	WITHOUT_CLASSIFICATION	3.4628682789045396E-7	DESIGN
// If the from element represents a JOIN_FRAGMENT and it is // a theta-style join, convert its type from JOIN_FRAGMENT // to FROM_FRAGMENT	WITHOUT_CLASSIFICATION	0.999994581243847	WITHOUT_CLASSIFICATION	5.418756153071361E-6	DESIGN
// this is used during SqlGenerator processing	WITHOUT_CLASSIFICATION	0.9992843615012422	WITHOUT_CLASSIFICATION	7.156384987577985E-4	DESIGN
// If there is a FROM fragment and the FROM element is an explicit, then add the from part.	WITHOUT_CLASSIFICATION	0.9999997747603799	WITHOUT_CLASSIFICATION	2.2523962002046923E-7	DESIGN
/*&& StringHelper.isNotEmpty( frag )*/	WITHOUT_CLASSIFICATION	0.9999912886559776	WITHOUT_CLASSIFICATION	8.711344022322873E-6	DESIGN
// The FROM fragment will probably begin with ', '.  Remove this if it is present.	WITHOUT_CLASSIFICATION	0.5374968336851517	WITHOUT_CLASSIFICATION	0.46250316631484845	DESIGN
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9998398109608913	WITHOUT_CLASSIFICATION	1.6018903910878883E-4	DESIGN
// SELECT p FROM p IN CLASS eg.Person ORDER BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999996072923407	WITHOUT_CLASSIFICATION	3.927076592838805E-7	DESIGN
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.996769574638754	WITHOUT_CLASSIFICATION	0.0032304253612460043	DESIGN
//named query parameter	WITHOUT_CLASSIFICATION	0.9997061589060384	WITHOUT_CLASSIFICATION	2.938410939615118E-4	DESIGN
//default mode	WITHOUT_CLASSIFICATION	0.999996842864461	WITHOUT_CLASSIFICATION	3.157135539050803E-6	DESIGN
//QueryJoinFragment join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999997427940368	WITHOUT_CLASSIFICATION	2.5720596321406516E-7	DESIGN
//reset the dotcount (but not the path) //after reset!	WITHOUT_CLASSIFICATION	0.9998636372637406	WITHOUT_CLASSIFICATION	1.3636273625948223E-4	DESIGN
//after reset!	WITHOUT_CLASSIFICATION	0.9999689789170683	WITHOUT_CLASSIFICATION	3.1021082931784595E-5	DESIGN
// we don't need to worry about any condition in the ON clause // here (toFromFragmentString), since anything in the ON condition // is already applied to the whole query	WITHOUT_CLASSIFICATION	0.9999843750304246	WITHOUT_CLASSIFICATION	1.562496957546587E-5	DESIGN
// bit_length feels a bit broken to me. We have to cast to char in order to // pass when a numeric value is supplied. But of course the answers given will // be wildly different for these two datatypes. 1234.5678 will be 9 bytes as // a char string but will be 8 or 16 bytes as a true numeric. // Jay Nance 2006-09-22	WITHOUT_CLASSIFICATION	0.999156978899305	WITHOUT_CLASSIFICATION	8.4302110069492E-4	DESIGN
// dotcount>=2	WITHOUT_CLASSIFICATION	0.9999936684371905	WITHOUT_CLASSIFICATION	6.3315628095535925E-6	DESIGN
// Do the corresponding RHS	WITHOUT_CLASSIFICATION	0.9999858854110016	WITHOUT_CLASSIFICATION	1.4114588998368667E-5	DESIGN
//if its "id"	WITHOUT_CLASSIFICATION	0.9999418634197162	WITHOUT_CLASSIFICATION	5.813658028386181E-5	DESIGN
//or its the id property name	WITHOUT_CLASSIFICATION	0.9889471801330872	WITHOUT_CLASSIFICATION	0.011052819866912712	DESIGN
//join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999998681118537	WITHOUT_CLASSIFICATION	1.3188814633860465E-7	DESIGN
//important!!	WITHOUT_CLASSIFICATION	0.9997568680430009	WITHOUT_CLASSIFICATION	2.4313195699922599E-4	DESIGN
//String[] keyCols = collPersister.getKeyColumnNames();	WITHOUT_CLASSIFICATION	0.9999999600564464	WITHOUT_CLASSIFICATION	3.99435535288973E-8	DESIGN
// an association	WITHOUT_CLASSIFICATION	0.9999947631659789	WITHOUT_CLASSIFICATION	5.236834021098599E-6	DESIGN
//allow index() function:	WITHOUT_CLASSIFICATION	0.9999989957514162	WITHOUT_CLASSIFICATION	1.0042485838540108E-6	DESIGN
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9889335743447987	WITHOUT_CLASSIFICATION	0.011066425655201334	DESIGN
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.996769574638754	WITHOUT_CLASSIFICATION	0.0032304253612460043	DESIGN
//many-to-many	WITHOUT_CLASSIFICATION	0.9999520566370417	WITHOUT_CLASSIFICATION	4.794336295823613E-5	DESIGN
// collections of values	WITHOUT_CLASSIFICATION	0.9999980383493172	WITHOUT_CLASSIFICATION	1.961650682814316E-6	DESIGN
//opening paren in new Foo ( ... )	WITHOUT_CLASSIFICATION	0.9966163559216339	WITHOUT_CLASSIFICATION	0.0033836440783661624	DESIGN
//if we are inside a new Result(), but not inside a nested function	WITHOUT_CLASSIFICATION	0.9999956053772946	WITHOUT_CLASSIFICATION	4.394622705379279E-6	DESIGN
//special case	WITHOUT_CLASSIFICATION	0.9999733677175808	WITHOUT_CLASSIFICATION	2.6632282419123127E-5	DESIGN
// the name of an SQL function	WITHOUT_CLASSIFICATION	0.9999947110907949	WITHOUT_CLASSIFICATION	5.2889092051142E-6	DESIGN
//null child could occur for no from clause in a filter	WITHOUT_CLASSIFICATION	0.9987957709585285	WITHOUT_CLASSIFICATION	0.0012042290414715896	DESIGN
//this is basically a copy/paste of OrderByParser ... might be worth refactoring	WITHOUT_CLASSIFICATION	0.7620629737717326	DESIGN	0.23793702622826735	WITHOUT_CLASSIFICATION
// SELECT p FROM p IN CLASS eg.Person GROUP BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999991118341468	WITHOUT_CLASSIFICATION	8.881658533202063E-7	DESIGN
// return aliases not supported in classic translator!	WITHOUT_CLASSIFICATION	0.99963874247835	WITHOUT_CLASSIFICATION	3.6125752164993497E-4	DESIGN
//register collection role	WITHOUT_CLASSIFICATION	0.9999996761948593	WITHOUT_CLASSIFICATION	3.238051407566426E-7	DESIGN
// The keyword used to specify an identity column, if identity column key generation is supported.	WITHOUT_CLASSIFICATION	0.9999998774941589	WITHOUT_CLASSIFICATION	1.2250584122224925E-7	DESIGN
//.getElementPropertyMapping();	WITHOUT_CLASSIFICATION	0.9999943867726067	WITHOUT_CLASSIFICATION	5.613227393372864E-6	DESIGN
//crossJoins.add(name);	WITHOUT_CLASSIFICATION	0.9998922411482807	WITHOUT_CLASSIFICATION	1.077588517192853E-4	DESIGN
//ie no select clause in HQL	WITHOUT_CLASSIFICATION	0.9996958534966057	WITHOUT_CLASSIFICATION	3.04146503394185E-4	DESIGN
// initialize the Set of queried identifier spaces (ie. tables)	WITHOUT_CLASSIFICATION	0.9999999059437612	WITHOUT_CLASSIFICATION	9.405623874908151E-8	DESIGN
//ie. no select clause	WITHOUT_CLASSIFICATION	0.9999659521661035	WITHOUT_CLASSIFICATION	3.4047833896474274E-5	DESIGN
//there _was_ a select clause	WITHOUT_CLASSIFICATION	0.9999950125175792	WITHOUT_CLASSIFICATION	4.987482420857952E-6	DESIGN
// return the concrete type, or the underlying type if a concrete type // was not specified	WITHOUT_CLASSIFICATION	0.9999848154101838	WITHOUT_CLASSIFICATION	1.5184589816141129E-5	DESIGN
//many-to-many	WITHOUT_CLASSIFICATION	0.9999520566370417	WITHOUT_CLASSIFICATION	4.794336295823613E-5	DESIGN
//q.addCollection(collectionName, collectionRole);	WITHOUT_CLASSIFICATION	0.999999876849563	WITHOUT_CLASSIFICATION	1.231504368666561E-7	DESIGN
// classic parser does not support bulk manipulation statements	WITHOUT_CLASSIFICATION	0.9999987966402267	WITHOUT_CLASSIFICATION	1.2033597732516942E-6	DESIGN
// can't cache this stuff either (per-invocation)	WITHOUT_CLASSIFICATION	0.9998186824241456	WITHOUT_CLASSIFICATION	1.8131757585433748E-4	DESIGN
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.5904502104848416	WITHOUT_CLASSIFICATION	0.40954978951515825	DESIGN
// This is the legacy behaviour for HQL queries...	WITHOUT_CLASSIFICATION	0.9998270000521529	WITHOUT_CLASSIFICATION	1.7299994784704934E-4	DESIGN
// not known!	WITHOUT_CLASSIFICATION	0.9846889146277787	WITHOUT_CLASSIFICATION	0.015311085372221228	DESIGN
// not known!	WITHOUT_CLASSIFICATION	0.9846889146277787	WITHOUT_CLASSIFICATION	0.015311085372221228	DESIGN
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9837087915760928	WITHOUT_CLASSIFICATION	0.0162912084239072	DESIGN
// not known!	WITHOUT_CLASSIFICATION	0.9846889146277787	WITHOUT_CLASSIFICATION	0.015311085372221228	DESIGN
// not known!	WITHOUT_CLASSIFICATION	0.9846889146277787	WITHOUT_CLASSIFICATION	0.015311085372221228	DESIGN
//Need this, since join condition can appear inside parens!	WITHOUT_CLASSIFICATION	0.7426325737096473	WITHOUT_CLASSIFICATION	0.2573674262903528	DESIGN
//tokens that close a sub expression //tokens that open a sub expression //tokens that would indicate a sub expression is a boolean expression	WITHOUT_CLASSIFICATION	0.9999996468955129	WITHOUT_CLASSIFICATION	3.5310448714862636E-7	DESIGN
//expressionTerminators.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.9999484351006537	WITHOUT_CLASSIFICATION	5.156489934641031E-5	DESIGN
//expressionOpeners.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.9999916315079272	WITHOUT_CLASSIFICATION	8.368492072753484E-6	DESIGN
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource) // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.8521739907612563	DESIGN	0.14782600923874367	WITHOUT_CLASSIFICATION
// otherwise, a trim-specification and/or a trim-character // have been specified;  we need to decide which options // are present and "do the right thing" // should leading trim-characters be trimmed? // should trailing trim-characters be trimmed? // the trim-character (what is to be trimmed off?) // the trim-source (from where should it be trimmed?)	WITHOUT_CLASSIFICATION	0.9657245124748576	WITHOUT_CLASSIFICATION	0.03427548752514239	DESIGN
//Inside a BETWEEN ... AND ... expression	WITHOUT_CLASSIFICATION	0.9999999503193209	WITHOUT_CLASSIFICATION	4.968067913802442E-8	DESIGN
//were an odd or even number of NOTs encountered //the join string built up by compound paths inside this expression //a flag indicating if the subexpression is known to be boolean	WITHOUT_CLASSIFICATION	0.9999992216914372	WITHOUT_CLASSIFICATION	7.783085628333622E-7	DESIGN
//ie. a many-to-many	WITHOUT_CLASSIFICATION	0.9999844444576891	WITHOUT_CLASSIFICATION	1.5555542310946658E-5	DESIGN
//Cope with [,]	WITHOUT_CLASSIFICATION	0.9996561198497733	WITHOUT_CLASSIFICATION	3.438801502266738E-4	DESIGN
//Cope with a continued path expression (ie. ].baz)	WITHOUT_CLASSIFICATION	0.9999423721549636	WITHOUT_CLASSIFICATION	5.762784503644805E-5	DESIGN
//NOTE: early return	WITHOUT_CLASSIFICATION	0.9781833888770088	WITHOUT_CLASSIFICATION	0.021816611122991117	DESIGN
//Cope with a subselect	WITHOUT_CLASSIFICATION	0.9991865317905291	WITHOUT_CLASSIFICATION	8.134682094708955E-4	DESIGN
//Cope with special cases of AND, NOT, ()	WITHOUT_CLASSIFICATION	0.999939861372428	WITHOUT_CLASSIFICATION	6.013862757188666E-5	DESIGN
//Close extra brackets we opened	WITHOUT_CLASSIFICATION	0.9998071833765185	WITHOUT_CLASSIFICATION	1.928166234813741E-4	DESIGN
//take note when this is a boolean expression	WITHOUT_CLASSIFICATION	0.9999971583681568	WITHOUT_CLASSIFICATION	2.8416318432284978E-6	DESIGN
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999999911308186	WITHOUT_CLASSIFICATION	8.869181382862462E-9	DESIGN
//process a token, mapping OO path expressions to SQL expressions	WITHOUT_CLASSIFICATION	0.9999999101791048	WITHOUT_CLASSIFICATION	8.982089520736567E-8	DESIGN
//Open any extra brackets we might need.	WITHOUT_CLASSIFICATION	0.9952718109382399	WITHOUT_CLASSIFICATION	0.004728189061760057	DESIGN
//Cope with special cases of AND, NOT, )	WITHOUT_CLASSIFICATION	0.9998649933808695	WITHOUT_CLASSIFICATION	1.350066191304917E-4	DESIGN
// the next one up must also be	WITHOUT_CLASSIFICATION	0.9999975594161616	WITHOUT_CLASSIFICATION	2.4405838382999505E-6	DESIGN
// Add any joins	WITHOUT_CLASSIFICATION	0.9999937756032709	WITHOUT_CLASSIFICATION	6.224396729177418E-6	DESIGN
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999999911308186	WITHOUT_CLASSIFICATION	8.869181382862462E-9	DESIGN
//named query parameter	WITHOUT_CLASSIFICATION	0.9997061589060384	WITHOUT_CLASSIFICATION	2.938410939615118E-4	DESIGN
//path expression	WITHOUT_CLASSIFICATION	0.9999984042721937	WITHOUT_CLASSIFICATION	1.5957278062732364E-6	DESIGN
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.999988178227033	WITHOUT_CLASSIFICATION	1.1821772966914018E-5	DESIGN
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999788611837389	WITHOUT_CLASSIFICATION	2.1138816261112338E-5	DESIGN
//anything else	WITHOUT_CLASSIFICATION	0.9999964098736536	WITHOUT_CLASSIFICATION	3.5901263464104127E-6	DESIGN
// the path expression continues after a ]	WITHOUT_CLASSIFICATION	0.9999998719640776	WITHOUT_CLASSIFICATION	1.2803592229283287E-7	DESIGN
// careful with this!	WITHOUT_CLASSIFICATION	0.9992379725548846	WITHOUT_CLASSIFICATION	7.620274451153882E-4	DESIGN
// the path expression ends at the ]	WITHOUT_CLASSIFICATION	0.9999990192231047	WITHOUT_CLASSIFICATION	9.80776895248486E-7	DESIGN
// "finish off" the join	WITHOUT_CLASSIFICATION	0.9999947805258803	WITHOUT_CLASSIFICATION	5.219474119697795E-6	DESIGN
//NOTICE: no " or . since they are part of (compound) identifiers	WITHOUT_CLASSIFICATION	0.9999456952120144	WITHOUT_CLASSIFICATION	5.4304787985614795E-5	DESIGN
//cannot instantiate	WITHOUT_CLASSIFICATION	0.9999494622810613	WITHOUT_CLASSIFICATION	5.053771893884845E-5	DESIGN
// start by looking for HQL keywords...	WITHOUT_CLASSIFICATION	0.9999903385872095	WITHOUT_CLASSIFICATION	9.661412790517637E-6	DESIGN
// inner joins can be abbreviated to 'join'	WITHOUT_CLASSIFICATION	0.9999963717832945	WITHOUT_CLASSIFICATION	3.628216705506352E-6	DESIGN
// 'outer' is optional and is ignored	WITHOUT_CLASSIFICATION	0.9999999260501746	WITHOUT_CLASSIFICATION	7.39498253065182E-8	DESIGN
// now anything that is not a HQL keyword	WITHOUT_CLASSIFICATION	0.9998681437733886	WITHOUT_CLASSIFICATION	1.318562266114055E-4	DESIGN
// process the "old" HQL style where aliases appear _first_ // ie. using the IN or IN CLASS constructions	WITHOUT_CLASSIFICATION	0.999999951724069	WITHOUT_CLASSIFICATION	4.827593099459454E-8	DESIGN
// treat it as a classname	WITHOUT_CLASSIFICATION	0.9999539565412554	WITHOUT_CLASSIFICATION	4.6043458744541384E-5	DESIGN
// treat it as a path expression	WITHOUT_CLASSIFICATION	0.9999996531119764	WITHOUT_CLASSIFICATION	3.468880237105606E-7	DESIGN
// starts with the name of a mapped class (new style)	WITHOUT_CLASSIFICATION	0.9999989980089811	WITHOUT_CLASSIFICATION	1.001991018941936E-6	DESIGN
// starts with a path expression (new style)	WITHOUT_CLASSIFICATION	0.9999997341288858	WITHOUT_CLASSIFICATION	2.6587111431199453E-7	DESIGN
//allow ODMG OQL style: from Person p, p.cars c	WITHOUT_CLASSIFICATION	0.999789372996394	WITHOUT_CLASSIFICATION	2.1062700360599993E-4	DESIGN
//handle quoted strings	WITHOUT_CLASSIFICATION	0.9999751589202773	WITHOUT_CLASSIFICATION	2.484107972267083E-5	DESIGN
// Object insertions, updates, and deletions have list semantics because // they must happen in the right order so as to respect referential // integrity	WITHOUT_CLASSIFICATION	0.999999999990045	WITHOUT_CLASSIFICATION	9.955047748174532E-12	DESIGN
// "finish off" the join	WITHOUT_CLASSIFICATION	0.9999947805258803	WITHOUT_CLASSIFICATION	5.219474119697795E-6	DESIGN
//ignore whitespace	WITHOUT_CLASSIFICATION	0.99997527705562	WITHOUT_CLASSIFICATION	2.4722944380082E-5	DESIGN
//do replacements	WITHOUT_CLASSIFICATION	0.9999853566051383	WITHOUT_CLASSIFICATION	1.4643394861611965E-5	DESIGN
//handle HQL2 collection syntax	WITHOUT_CLASSIFICATION	0.9999981026255053	WITHOUT_CLASSIFICATION	1.8973744946670662E-6	DESIGN
// uuid.hex is deprecated	WITHOUT_CLASSIFICATION	0.9978925977888486	WITHOUT_CLASSIFICATION	0.002107402211151354	DESIGN
// AbstractSelectingDelegate impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99999994461037	WITHOUT_CLASSIFICATION	5.538963000106677E-8	DESIGN
//hilo params	WITHOUT_CLASSIFICATION	0.9999614184607318	WITHOUT_CLASSIFICATION	3.8581539268183184E-5	DESIGN
//sql = query;	WITHOUT_CLASSIFICATION	0.9999870178809738	WITHOUT_CLASSIFICATION	1.2982119026205217E-5	DESIGN
// performance opt	WITHOUT_CLASSIFICATION	0.9999995401161014	WITHOUT_CLASSIFICATION	4.598838986854027E-7	DESIGN
//sql = update;	WITHOUT_CLASSIFICATION	0.9999788210655398	WITHOUT_CLASSIFICATION	2.1178934460174638E-5	DESIGN
//hilo config	WITHOUT_CLASSIFICATION	0.9991687569519488	WITHOUT_CLASSIFICATION	8.312430480510841E-4	DESIGN
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999973827653416	WITHOUT_CLASSIFICATION	2.6172346584351215E-6	DESIGN
// don't allow comments on these insert statements as comments totally // blow up the Oracle getGeneratedKeys "support" :(	WITHOUT_CLASSIFICATION	0.9999978306202444	WITHOUT_CLASSIFICATION	2.1693797556101207E-6	DESIGN
//abort the save (the object is already saved by a circular cascade)	WITHOUT_CLASSIFICATION	0.9997212116603493	WITHOUT_CLASSIFICATION	2.7878833965063366E-4	DESIGN
//throw new IdentifierGenerationException("save associated object first, or disable cascade for inverse association");	WITHOUT_CLASSIFICATION	0.9999997182838842	WITHOUT_CLASSIFICATION	2.8171611581442096E-7	DESIGN
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999961132284985	WITHOUT_CLASSIFICATION	3.8867715015360775E-6	DESIGN
//do nothing to avoid a lazy property initialization	WITHOUT_CLASSIFICATION	0.999516697479649	WITHOUT_CLASSIFICATION	4.833025203509775E-4	DESIGN
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.999999928147962	WITHOUT_CLASSIFICATION	7.185203799494686E-8	DESIGN
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999973827653416	WITHOUT_CLASSIFICATION	2.6172346584351215E-6	DESIGN
// do nothing until we hit the rsult set containing the generated id	WITHOUT_CLASSIFICATION	0.9994605270205376	WITHOUT_CLASSIFICATION	5.394729794624708E-4	DESIGN
/* COLUMN and TABLE should be renamed but it would break the public API */	WITHOUT_CLASSIFICATION	0.8949828839972067	DESIGN	0.10501711600279327	WITHOUT_CLASSIFICATION
// Loaded entity instances, by EntityKey	WITHOUT_CLASSIFICATION	0.9999752475093557	WITHOUT_CLASSIFICATION	2.475249064423307E-5	DESIGN
// if the given name is un-qualified we may neen to qualify it	WITHOUT_CLASSIFICATION	0.9999952269649395	WITHOUT_CLASSIFICATION	4.773035060465386E-6	DESIGN
// the default...	WITHOUT_CLASSIFICATION	0.9999891591512942	WITHOUT_CLASSIFICATION	1.084084870575853E-5	DESIGN
// unfortunately not really safe to normalize this // to 1 as an initial value like we do the others // because we would not be able to control this if // we are using a sequence...	WITHOUT_CLASSIFICATION	0.9999744452998374	WITHOUT_CLASSIFICATION	2.5554700162622036E-5	DESIGN
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999961132284985	WITHOUT_CLASSIFICATION	3.8867715015360775E-6	DESIGN
// Identity map of CollectionEntry instances, by the collection wrapper	WITHOUT_CLASSIFICATION	0.9999999996575122	WITHOUT_CLASSIFICATION	3.4248784644693864E-10	DESIGN
// general purpose parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999951360663	WITHOUT_CLASSIFICATION	4.863933695069428E-8	DESIGN
// table-specific parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997748187587	WITHOUT_CLASSIFICATION	2.251812412321437E-7	DESIGN
// Configurable implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999925349026142	WITHOUT_CLASSIFICATION	7.465097385780804E-6	DESIGN
// IdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993072227106	WITHOUT_CLASSIFICATION	6.92777289507444E-7	DESIGN
// PersistentIdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992823194864	WITHOUT_CLASSIFICATION	7.176805134421113E-7	DESIGN
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999997502740575	WITHOUT_CLASSIFICATION	2.497259425144582E-7	DESIGN
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999997502740575	WITHOUT_CLASSIFICATION	2.497259425144582E-7	DESIGN
//fetch the generated id in a separate query	WITHOUT_CLASSIFICATION	0.9999124052710634	WITHOUT_CLASSIFICATION	8.759472893659048E-5	DESIGN
// we just hit the last position	WITHOUT_CLASSIFICATION	0.999997090101062	WITHOUT_CLASSIFICATION	2.909898937921881E-6	DESIGN
// scroll ahead	WITHOUT_CLASSIFICATION	0.9999955472362357	WITHOUT_CLASSIFICATION	4.452763764272401E-6	DESIGN
// scroll backward	WITHOUT_CLASSIFICATION	0.9999969991261592	WITHOUT_CLASSIFICATION	3.0008738407521592E-6	DESIGN
// we have not yet hit the last result...	WITHOUT_CLASSIFICATION	0.9999182324371254	WITHOUT_CLASSIFICATION	8.17675628746019E-5	DESIGN
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999731929209482	WITHOUT_CLASSIFICATION	2.6807079051781616E-5	DESIGN
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999978431568496	WITHOUT_CLASSIFICATION	2.1568431503626303E-6	DESIGN
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994134782889	WITHOUT_CLASSIFICATION	5.865217109706693E-7	DESIGN
// do this when all the properties are updateable since there is // a certain likelihood that the information will already be // snapshot-cached.	WITHOUT_CLASSIFICATION	0.9999952098236405	WITHOUT_CLASSIFICATION	4.790176359508893E-6	DESIGN
// Inner classes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992668768308	WITHOUT_CLASSIFICATION	7.331231690958761E-7	DESIGN
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999731929209482	WITHOUT_CLASSIFICATION	2.6807079051781616E-5	DESIGN
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999978431568496	WITHOUT_CLASSIFICATION	2.1568431503626303E-6	DESIGN
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994134782889	WITHOUT_CLASSIFICATION	5.865217109706693E-7	DESIGN
// Caches	WITHOUT_CLASSIFICATION	0.9999846402372331	WITHOUT_CLASSIFICATION	1.5359762766871E-5	DESIGN
//Generators:	WITHOUT_CLASSIFICATION	0.9997538800215705	WITHOUT_CLASSIFICATION	2.461199784295138E-4	DESIGN
// cache region is defined by the root-class in the hierarchy...	WITHOUT_CLASSIFICATION	0.9999694154820062	WITHOUT_CLASSIFICATION	3.0584517993853035E-5	DESIGN
//check if the detached object being merged is the parent	WITHOUT_CLASSIFICATION	0.9691408965714012	WITHOUT_CLASSIFICATION	0.030859103428598718	DESIGN
// after *all* persisters and named queries are registered	WITHOUT_CLASSIFICATION	0.9999999767013228	WITHOUT_CLASSIFICATION	2.3298677227140906E-8	DESIGN
// if we get here, it is possible that we have a proxy 'in the way' of the merge map resolution... // 	WITHOUT_CLASSIFICATION	0.9999996502807323	WITHOUT_CLASSIFICATION	3.4971926770441237E-7	DESIGN
//JNDI + Serialization:	WITHOUT_CLASSIFICATION	0.9999987849499054	WITHOUT_CLASSIFICATION	1.2150500945844367E-6	DESIGN
//checking for named queries	WITHOUT_CLASSIFICATION	0.9903988062089542	WITHOUT_CLASSIFICATION	0.009601193791045829	DESIGN
//stats	WITHOUT_CLASSIFICATION	0.9990276573925015	WITHOUT_CLASSIFICATION	9.723426074984402E-4	DESIGN
// EntityNotFoundDelegate	WITHOUT_CLASSIFICATION	0.9999713950336392	WITHOUT_CLASSIFICATION	2.8604966360869763E-5	DESIGN
// Check named HQL queries	WITHOUT_CLASSIFICATION	0.9998868039658587	WITHOUT_CLASSIFICATION	1.1319603414134843E-4	DESIGN
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9902067666497972	WITHOUT_CLASSIFICATION	0.00979323335020284	DESIGN
//prevents this session from adding things to cache	WITHOUT_CLASSIFICATION	0.999750884090771	WITHOUT_CLASSIFICATION	2.4911590922904514E-4	DESIGN
// from javax.naming.Referenceable	WITHOUT_CLASSIFICATION	0.9999970509397805	WITHOUT_CLASSIFICATION	2.9490602196004304E-6	DESIGN
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999935800931367	WITHOUT_CLASSIFICATION	6.419906863269878E-6	DESIGN
//for a dynamic-class	WITHOUT_CLASSIFICATION	0.9999930302741837	WITHOUT_CLASSIFICATION	6.969725816242224E-6	DESIGN
//test this entity to see if we must query it	WITHOUT_CLASSIFICATION	0.9996991835611094	WITHOUT_CLASSIFICATION	3.008164388905505E-4	DESIGN
//NOTE EARLY EXIT	WITHOUT_CLASSIFICATION	0.9987733775776076	WITHOUT_CLASSIFICATION	0.001226622422392372	DESIGN
// for backward-compatability	WITHOUT_CLASSIFICATION	0.9999503878987619	WITHOUT_CLASSIFICATION	4.961210123807402E-5	DESIGN
// ignore this error for now	WITHOUT_CLASSIFICATION	0.9999854857020388	WITHOUT_CLASSIFICATION	1.4514297961209845E-5	DESIGN
//to stop the class from being unloaded	WITHOUT_CLASSIFICATION	0.9999453522123262	WITHOUT_CLASSIFICATION	5.4647787673718175E-5	DESIGN
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9975540874682347	WITHOUT_CLASSIFICATION	0.0024459125317653468	DESIGN
//must add to JNDI _after_ adding to HashMaps, because some JNDI servers use serialization	WITHOUT_CLASSIFICATION	0.9999999180182706	WITHOUT_CLASSIFICATION	8.198172942827609E-8	DESIGN
// Make sure this is a defined parameter and check the incoming value type	WITHOUT_CLASSIFICATION	0.9999940455646735	WITHOUT_CLASSIFICATION	5.954435326418254E-6	DESIGN
// for each of the defined parameters, make sure its value // has been set	WITHOUT_CLASSIFICATION	0.9999961560125215	WITHOUT_CLASSIFICATION	3.843987478479564E-6	DESIGN
//we never need to apply locks to the SQL	WITHOUT_CLASSIFICATION	0.999987823580054	WITHOUT_CLASSIFICATION	1.2176419946076357E-5	DESIGN
// inserts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999971394283648	WITHOUT_CLASSIFICATION	2.8605716353450832E-6	DESIGN
// deletes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999914595938245	WITHOUT_CLASSIFICATION	8.54040617551021E-6	DESIGN
// during deserialization, we need to reconnect all proxies and // collections to this session, as well as the EntityEntry and // CollectionEntry instances; these associations are transient // because serialization is used for different things.	WITHOUT_CLASSIFICATION	0.9999946152946528	WITHOUT_CLASSIFICATION	5.38470534722216E-6	DESIGN
// updates ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999792357605227	WITHOUT_CLASSIFICATION	2.0764239477233277E-5	DESIGN
// loading ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996878077831	WITHOUT_CLASSIFICATION	3.1219221688878837E-7	DESIGN
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999999571287937	WITHOUT_CLASSIFICATION	4.2871206185152065E-8	DESIGN
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999999571287937	WITHOUT_CLASSIFICATION	4.2871206185152065E-8	DESIGN
// first, try to load it from the temp PC associated to this SS	WITHOUT_CLASSIFICATION	0.9999977992251406	WITHOUT_CLASSIFICATION	2.200774859317368E-6	DESIGN
// if the metadata allowed proxy creation and caller did not request forceful eager loading, // generate a proxy	WITHOUT_CLASSIFICATION	0.9999999849880489	WITHOUT_CLASSIFICATION	1.5011951063966224E-8	DESIGN
// otherwise immediately materialize it	WITHOUT_CLASSIFICATION	0.9999970831333339	WITHOUT_CLASSIFICATION	2.916866666207994E-6	DESIGN
/////////////////////////////////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9994899601669325	WITHOUT_CLASSIFICATION	5.100398330676239E-4	DESIGN
// no auto-flushing to support in stateless session	WITHOUT_CLASSIFICATION	0.9999993113553953	WITHOUT_CLASSIFICATION	6.886446046586383E-7	DESIGN
//after setting values to object, entityMode	WITHOUT_CLASSIFICATION	0.9987402664739993	WITHOUT_CLASSIFICATION	0.0012597335260007172	DESIGN
//for EJB3	WITHOUT_CLASSIFICATION	0.9999808376307168	WITHOUT_CLASSIFICATION	1.916236928325104E-5	DESIGN
// just ignore	WITHOUT_CLASSIFICATION	0.9999983832090542	WITHOUT_CLASSIFICATION	1.6167909458256157E-6	DESIGN
// do a check	WITHOUT_CLASSIFICATION	0.9999985139151615	WITHOUT_CLASSIFICATION	1.4860848385870846E-6	DESIGN
// saveOrUpdate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999988032017307	WITHOUT_CLASSIFICATION	1.1967982692953486E-6	DESIGN
// update() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999964577228253	WITHOUT_CLASSIFICATION	3.5422771748191863E-6	DESIGN
// lock() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999346544595	WITHOUT_CLASSIFICATION	6.534554052362363E-8	DESIGN
// persist() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993021718799	WITHOUT_CLASSIFICATION	6.978281199447563E-7	DESIGN
// persistOnFlush() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999769326744	WITHOUT_CLASSIFICATION	2.306732561537449E-7	DESIGN
// merge() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993527837806	WITHOUT_CLASSIFICATION	6.472162194160828E-7	DESIGN
// saveOrUpdateCopy() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999982593095299	WITHOUT_CLASSIFICATION	1.7406904701345887E-6	DESIGN
// delete() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999990719039086	WITHOUT_CLASSIFICATION	9.280960914691263E-7	DESIGN
// load()/get() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999287437963	WITHOUT_CLASSIFICATION	7.12562036424516E-8	DESIGN
// refresh() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999997799374894	WITHOUT_CLASSIFICATION	2.200625105930603E-6	DESIGN
// replicate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999989720915793	WITHOUT_CLASSIFICATION	1.027908420729733E-6	DESIGN
// do not auto-flush while outside a transaction	WITHOUT_CLASSIFICATION	0.9999999628667279	WITHOUT_CLASSIFICATION	3.713327221148277E-8	DESIGN
// this is an internal error of some sort...	WITHOUT_CLASSIFICATION	0.998912750989175	WITHOUT_CLASSIFICATION	0.0010872490108249666	DESIGN
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.6627216151703902	WITHOUT_CLASSIFICATION	0.33727838482960987	DESIGN
//only collections belonging to deleted entities are allowed to be dereferenced in the case of orphan delete	WITHOUT_CLASSIFICATION	0.9999990506541833	WITHOUT_CLASSIFICATION	9.493458167605797E-7	DESIGN
// if it was previously unreferenced, we need to flush in order to // get its state into the database in order to execute query	WITHOUT_CLASSIFICATION	0.9999998284839575	WITHOUT_CLASSIFICATION	1.7151604248897524E-7	DESIGN
// not for internal use:	WITHOUT_CLASSIFICATION	0.9996811873830622	WITHOUT_CLASSIFICATION	3.1881261693782355E-4	DESIGN
// otherwise, we only need to flush if there are in-memory changes // to the queried tables	WITHOUT_CLASSIFICATION	0.9999999948845392	WITHOUT_CLASSIFICATION	5.115460800444111E-9	DESIGN
// might need to run a different filter entirely after the flush // because the collection role may have changed	WITHOUT_CLASSIFICATION	0.9999999988213046	WITHOUT_CLASSIFICATION	1.1786954291542248E-9	DESIGN
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.6627216151703902	WITHOUT_CLASSIFICATION	0.33727838482960987	DESIGN
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.6627216151703902	WITHOUT_CLASSIFICATION	0.33727838482960987	DESIGN
//if it is initialized, see if the underlying //instance is contained, since we need to  //account for the fact that it might have been //evicted	WITHOUT_CLASSIFICATION	0.999071010681322	WITHOUT_CLASSIFICATION	9.289893186781489E-4	DESIGN
// basically just an adapted copy of find(CriteriaImpl)	WITHOUT_CLASSIFICATION	0.9999999597813449	WITHOUT_CLASSIFICATION	4.0218655026658413E-8	DESIGN
// it is possible for this method to be called during flush processing, // so make certain that we do not accidently initialize an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9998969019653884	WITHOUT_CLASSIFICATION	1.0309803461172142E-4	DESIGN
// nothing to do in a stateful session	WITHOUT_CLASSIFICATION	0.9999959403739574	WITHOUT_CLASSIFICATION	4.059626042599289E-6	DESIGN
// ignore	WITHOUT_CLASSIFICATION	0.9999972509027046	WITHOUT_CLASSIFICATION	2.7490972954077436E-6	DESIGN
// ignore this error for now	WITHOUT_CLASSIFICATION	0.9999854857020388	WITHOUT_CLASSIFICATION	1.4514297961209845E-5	DESIGN
// we need to writeObject() on this since interceptor is user defined	WITHOUT_CLASSIFICATION	0.99998063313217	WITHOUT_CLASSIFICATION	1.9366867830007005E-5	DESIGN
// the old-time stand-by...	WITHOUT_CLASSIFICATION	0.9999989793419599	WITHOUT_CLASSIFICATION	1.0206580400718132E-6	DESIGN
// parameter bind values...	WITHOUT_CLASSIFICATION	0.9998855617441877	WITHOUT_CLASSIFICATION	1.1443825581226526E-4	DESIGN
// Parameter handling code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999985785298491	WITHOUT_CLASSIFICATION	1.4214701508784032E-6	DESIGN
// prepend value and type list with null for any positions before the wanted position.	WITHOUT_CLASSIFICATION	0.9999999907640769	WITHOUT_CLASSIFICATION	9.235923120052459E-9	DESIGN
// Execution methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999974025255606	WITHOUT_CLASSIFICATION	2.59747443939898E-5	DESIGN
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9985298221844313	WITHOUT_CLASSIFICATION	0.0014701778155686367	DESIGN
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9985298221844313	WITHOUT_CLASSIFICATION	0.0014701778155686367	DESIGN
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999329366694388	WITHOUT_CLASSIFICATION	6.706333056123776E-5	DESIGN
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999329366694388	WITHOUT_CLASSIFICATION	6.706333056123776E-5	DESIGN
// FieldInterceptor impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999997534979838	WITHOUT_CLASSIFICATION	2.4650201618994786E-6	DESIGN
// subclass accesses ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999958481113908	WITHOUT_CLASSIFICATION	4.151888609229588E-6	DESIGN
//let's assume that there is only one lazy fetch group, for now!	WITHOUT_CLASSIFICATION	0.9999017228849224	WITHOUT_CLASSIFICATION	9.827711507765351E-5	DESIGN
// FieldHandler impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999703495112963	WITHOUT_CLASSIFICATION	2.9650488703693764E-5	DESIGN
// should *not* need to grow beyond the size of the total number of columns in the rs	WITHOUT_CLASSIFICATION	0.9999769922599275	WITHOUT_CLASSIFICATION	2.3007740072451935E-5	DESIGN
// should probably no-op commit/rollback here, at least in JTA scenarios	WITHOUT_CLASSIFICATION	0.8956436826678255	DESIGN	0.10435631733217444	WITHOUT_CLASSIFICATION
// Base Expectation impls ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999345504906	WITHOUT_CLASSIFICATION	6.544950936377879E-8	DESIGN
// Various Expectation instances ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997515353727	WITHOUT_CLASSIFICATION	2.4846462723415584E-7	DESIGN
// explicitly perform no checking...	WITHOUT_CLASSIFICATION	0.9985833791202934	WITHOUT_CLASSIFICATION	0.0014166208797066753	DESIGN
// used from testsuite	WITHOUT_CLASSIFICATION	0.9985934446112166	WITHOUT_CLASSIFICATION	0.0014065553887833795	DESIGN
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999999177136548	WITHOUT_CLASSIFICATION	8.228634508535806E-8	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.9993844224900065	WITHOUT_CLASSIFICATION	6.155775099936293E-4	DESIGN
// register synch; stats.connect()	WITHOUT_CLASSIFICATION	0.9999996123551708	WITHOUT_CLASSIFICATION	3.876448292729982E-7	DESIGN
//noncritical, swallow and let the other propagate!	WITHOUT_CLASSIFICATION	0.9999894405841894	WITHOUT_CLASSIFICATION	1.0559415810708677E-5	DESIGN
// calls executeBatch()	WITHOUT_CLASSIFICATION	0.9999997802522166	WITHOUT_CLASSIFICATION	2.1974778326922013E-7	DESIGN
//no big deal	WITHOUT_CLASSIFICATION	0.9995654124750705	WITHOUT_CLASSIFICATION	4.3458752492955496E-4	DESIGN
// no big deal	WITHOUT_CLASSIFICATION	0.9989977156290266	WITHOUT_CLASSIFICATION	0.0010022843709733753	DESIGN
// no big deal	WITHOUT_CLASSIFICATION	0.9989977156290266	WITHOUT_CLASSIFICATION	0.0010022843709733753	DESIGN
// sybase driver (jConnect) throwing NPE here in certain // cases, but we'll just handle the general "unexpected" case	WITHOUT_CLASSIFICATION	0.9999998925275255	WITHOUT_CLASSIFICATION	1.074724743842339E-7	DESIGN
// see explanation above...	WITHOUT_CLASSIFICATION	0.9999916633546792	WITHOUT_CLASSIFICATION	8.33664532080516E-6	DESIGN
// If we are in the process of releasing, no sense // checking for aggressive-release possibility.	WITHOUT_CLASSIFICATION	0.9999481120069349	WITHOUT_CLASSIFICATION	5.1887993065125764E-5	DESIGN
// EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9795371305720583	WITHOUT_CLASSIFICATION	0.020462869427941732	DESIGN
// ResultSet impl ("overridden") ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992899534743	WITHOUT_CLASSIFICATION	7.100465257012401E-7	DESIGN
// ResultSet impl (delegated) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999981923896114	WITHOUT_CLASSIFICATION	1.8076103886394085E-6	DESIGN
// refer to comment in StatefulPersistenceContext.addCollection()	WITHOUT_CLASSIFICATION	0.9999999964601858	WITHOUT_CLASSIFICATION	3.5398141422961043E-9	DESIGN
// ConnectionManager.Callback implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999045350687277	WITHOUT_CLASSIFICATION	9.546493127236232E-5	DESIGN
// Note : success = false, because we don't know the outcome of the transaction	WITHOUT_CLASSIFICATION	0.99990954337167	WITHOUT_CLASSIFICATION	9.045662832991005E-5	DESIGN
// we already have a callback registered; either a local // (org.hibernate.Transaction) transaction has accepted // callback responsibilities, or we have previously // registered a transaction synch.	WITHOUT_CLASSIFICATION	0.9970496066048704	WITHOUT_CLASSIFICATION	0.002950393395129604	DESIGN
// the configured transaction-factory says it only supports // local callback mode, so no sense attempting to register a // JTA Synchronization	WITHOUT_CLASSIFICATION	0.9999821015124012	WITHOUT_CLASSIFICATION	1.7898487598880177E-5	DESIGN
// transactions marked for rollback-only cause some TM impls to throw exceptions	WITHOUT_CLASSIFICATION	0.9997307278092892	WITHOUT_CLASSIFICATION	2.692721907108597E-4	DESIGN
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998269163071	WITHOUT_CLASSIFICATION	1.7308369292031632E-7	DESIGN
//postInitialize() will be called after initialization	WITHOUT_CLASSIFICATION	0.9999977601335094	WITHOUT_CLASSIFICATION	2.239866490626176E-6	DESIGN
// cannot handle single quotes	WITHOUT_CLASSIFICATION	0.999987902996332	WITHOUT_CLASSIFICATION	1.2097003668078797E-5	DESIGN
// todo : for 4.0 //	WITHOUT_CLASSIFICATION	0.999928108190992	WITHOUT_CLASSIFICATION	7.18918090079888E-5	DESIGN
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999999771553642	WITHOUT_CLASSIFICATION	2.284463587593944E-8	DESIGN
// don't even bother trying to read further	WITHOUT_CLASSIFICATION	0.999927563640591	WITHOUT_CLASSIFICATION	7.243635940898597E-5	DESIGN
// don't even bother trying to read any further	WITHOUT_CLASSIFICATION	0.999985028087183	WITHOUT_CLASSIFICATION	1.4971912816893527E-5	DESIGN
// position cursor to the last row	WITHOUT_CLASSIFICATION	0.9999999792321835	WITHOUT_CLASSIFICATION	2.0767816531815124E-8	DESIGN
// sequentially read the result set in reverse until we recognize // a change in the key value.  At that point, we are pointed at // the last physical sequential row for the logical row in which // we are interested in processing	WITHOUT_CLASSIFICATION	0.9999998821706558	WITHOUT_CLASSIFICATION	1.1782934410389543E-7	DESIGN
// Read backwards until we read past the first physical sequential // row with the key we are interested in loading	WITHOUT_CLASSIFICATION	0.9999998040457715	WITHOUT_CLASSIFICATION	1.9595422847754875E-7	DESIGN
// Finally, read ahead one row to position result set cursor // at the first physical row we are interested in loading	WITHOUT_CLASSIFICATION	0.9999992694739933	WITHOUT_CLASSIFICATION	7.305260067232192E-7	DESIGN
// now get an existing proxy for each row element (if there is one)	WITHOUT_CLASSIFICATION	0.9999999611082908	WITHOUT_CLASSIFICATION	3.8891709301810834E-8	DESIGN
// force the proxy to resolve itself	WITHOUT_CLASSIFICATION	0.999930236524871	WITHOUT_CLASSIFICATION	6.976347512893978E-5	DESIGN
// this is equivalent to the old behavior...	WITHOUT_CLASSIFICATION	0.9999945745519346	WITHOUT_CLASSIFICATION	5.425448065368786E-6	DESIGN
//if null, owner will be retrieved from session	WITHOUT_CLASSIFICATION	0.9999193226449543	WITHOUT_CLASSIFICATION	8.067735504568837E-5	DESIGN
//final String queryString, 	WITHOUT_CLASSIFICATION	0.9998823106856749	WITHOUT_CLASSIFICATION	1.1768931432501181E-4	DESIGN
// if it was a reference to self, don't need to nullify // unless we are using native id generation, in which // case we definitely need to nullify	WITHOUT_CLASSIFICATION	0.999999837560066	WITHOUT_CLASSIFICATION	1.6243993387691652E-7	DESIGN
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999990249393758	WITHOUT_CLASSIFICATION	9.750606243068727E-7	DESIGN
// in an effort to avoid concurrent-modification-exceptions (from // potential recursive calls back through here as a result of the // eventual call to PersistentCollection#endRead), we scan the // internal loadingCollections map for matches and store those matches // in a temp collection.  the temp collection is then used to "drive" // the #endRead processing.	WITHOUT_CLASSIFICATION	0.999999999864928	WITHOUT_CLASSIFICATION	1.3507188358994554E-10	DESIGN
//we can reuse it for each row	WITHOUT_CLASSIFICATION	0.9999994432672017	WITHOUT_CLASSIFICATION	5.56732798325419E-7	DESIGN
//can't reuse in this case	WITHOUT_CLASSIFICATION	0.9598780459863416	WITHOUT_CLASSIFICATION	0.04012195401365835	DESIGN
// First we need to suspend any current JTA transaction and obtain // a JDBC connection	WITHOUT_CLASSIFICATION	0.9999999743059749	WITHOUT_CLASSIFICATION	2.5694025099488245E-8	DESIGN
//getResultList(results);	WITHOUT_CLASSIFICATION	0.9999720683161355	WITHOUT_CLASSIFICATION	2.7931683864495296E-5	DESIGN
//if we only returned one entity, query by key is more efficient	WITHOUT_CLASSIFICATION	0.998533439978211	WITHOUT_CLASSIFICATION	0.0014665600217890883	DESIGN
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999958007401554	WITHOUT_CLASSIFICATION	4.199259844523838E-6	DESIGN
// handle empty collection	WITHOUT_CLASSIFICATION	0.9998091803510878	WITHOUT_CLASSIFICATION	1.9081964891210263E-4	DESIGN
// else no collection element, but also no owner	WITHOUT_CLASSIFICATION	0.999999991914107	WITHOUT_CLASSIFICATION	8.08589288492785E-9	DESIGN
//handle empty collections	WITHOUT_CLASSIFICATION	0.9999890571243272	WITHOUT_CLASSIFICATION	1.0942875672829165E-5	DESIGN
// else this is not a collection initializer (and empty collections will // be detected by looking for the owner's identifier in the result set)	WITHOUT_CLASSIFICATION	0.9999937105392119	WITHOUT_CLASSIFICATION	6.289460788028544E-6	DESIGN
// validate() instances of Validatable	WITHOUT_CLASSIFICATION	0.9999992178777899	WITHOUT_CLASSIFICATION	7.82122210156671E-7	DESIGN
// if we know there is exactly 1 row, we can skip. // it would be great if we could _always_ skip this; // it is a problem for <key-many-to-one>	WITHOUT_CLASSIFICATION	0.9888319523453016	WITHOUT_CLASSIFICATION	0.011168047654698369	DESIGN
// remove all collections for the entity from the session-level cache	WITHOUT_CLASSIFICATION	0.9999996917444551	WITHOUT_CLASSIFICATION	3.0825554489110594E-7	DESIGN
//null version means the object is in the process of being loaded somewhere else in the ResultSet	WITHOUT_CLASSIFICATION	0.999995072340152	WITHOUT_CLASSIFICATION	4.927659847967142E-6	DESIGN
//problematic for <key-many-to-one>!	WITHOUT_CLASSIFICATION	0.9996931192786566	WITHOUT_CLASSIFICATION	3.068807213434939E-4	DESIGN
//use the id passed in	WITHOUT_CLASSIFICATION	0.999549801267268	WITHOUT_CLASSIFICATION	4.501987327319732E-4	DESIGN
//do nothing	WITHOUT_CLASSIFICATION	0.999661987536974	WITHOUT_CLASSIFICATION	3.3801246302600345E-4	DESIGN
// prefer re-generation of identity!	WITHOUT_CLASSIFICATION	0.999950049239295	WITHOUT_CLASSIFICATION	4.995076070498012E-5	DESIGN
//no point doing this if NONE was requested	WITHOUT_CLASSIFICATION	0.9999186918227728	WITHOUT_CLASSIFICATION	8.130817722709513E-5	DESIGN
//If the object is already loaded, return the loaded one	WITHOUT_CLASSIFICATION	0.9999639169153639	WITHOUT_CLASSIFICATION	3.6083084636191705E-5	DESIGN
//its already loaded so don't need to hydrate it	WITHOUT_CLASSIFICATION	0.9999981254910552	WITHOUT_CLASSIFICATION	1.874508944925697E-6	DESIGN
// cascade the refresh prior to refreshing this entity	WITHOUT_CLASSIFICATION	0.9999795909525184	WITHOUT_CLASSIFICATION	2.040904748154197E-5	DESIGN
//the load() which takes an entity does not pass an entityName	WITHOUT_CLASSIFICATION	0.9999998191709244	WITHOUT_CLASSIFICATION	1.8082907548608367E-7	DESIGN
//we only check the version when _upgrading_ lock modes	WITHOUT_CLASSIFICATION	0.9999999326584096	WITHOUT_CLASSIFICATION	6.734159037372592E-8	DESIGN
// look for a proxy	WITHOUT_CLASSIFICATION	0.9999984490725732	WITHOUT_CLASSIFICATION	1.5509274267456997E-6	DESIGN
//we need to upgrade the lock mode to the mode requested	WITHOUT_CLASSIFICATION	0.999535057794743	WITHOUT_CLASSIFICATION	4.649422052569334E-4	DESIGN
//its the given optional object	WITHOUT_CLASSIFICATION	0.9999973872528918	WITHOUT_CLASSIFICATION	2.6127471081205203E-6	DESIGN
// instantiate a new instance	WITHOUT_CLASSIFICATION	0.9999913418997104	WITHOUT_CLASSIFICATION	8.658100289637158E-6	DESIGN
//need to hydrate it.	WITHOUT_CLASSIFICATION	0.9997205682148373	WITHOUT_CLASSIFICATION	2.7943178516261474E-4	DESIGN
// return a newly loaded object	WITHOUT_CLASSIFICATION	0.9999891921905063	WITHOUT_CLASSIFICATION	1.0807809493689247E-5	DESIGN
//will be ignored, using the existing Entry instead	WITHOUT_CLASSIFICATION	0.9999908624677809	WITHOUT_CLASSIFICATION	9.137532219111919E-6	DESIGN
// key is an entity involved with the operation performed by the listener; // value can be either a copy of the entity or the entity itself	WITHOUT_CLASSIFICATION	0.9999961139706317	WITHOUT_CLASSIFICATION	3.886029368310093E-6	DESIGN
//materialize associations (and initialize the object) later	WITHOUT_CLASSIFICATION	0.9999990257683271	WITHOUT_CLASSIFICATION	9.742316728290448E-7	DESIGN
// Get the persister for the _subclass_	WITHOUT_CLASSIFICATION	0.9999987499097072	WITHOUT_CLASSIFICATION	1.2500902928805372E-6	DESIGN
// ok in normal Hibernate usage to delete a detached entity; JPA however // forbids it, thus this is a hook for HEM to affect this behavior	WITHOUT_CLASSIFICATION	0.9762196885999875	WITHOUT_CLASSIFICATION	0.02378031140001239	DESIGN
// the entry will be removed after the flush, and will no longer // override the stale snapshot // This is now handled by removeEntity() in EntityDeleteAction //persistenceContext.removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999999914913937	WITHOUT_CLASSIFICATION	8.508606187352538E-9	DESIGN
//addInitializedCollection(collection, persister, id);	WITHOUT_CLASSIFICATION	0.9999998687718504	WITHOUT_CLASSIFICATION	1.3122814957554187E-7	DESIGN
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.99448814685864	WITHOUT_CLASSIFICATION	0.0055118531413600545	DESIGN
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.99448814685864	WITHOUT_CLASSIFICATION	0.0055118531413600545	DESIGN
/*|| oj.getJoinable().consumesCollectionAlias() */	WITHOUT_CLASSIFICATION	0.9999999732551076	WITHOUT_CLASSIFICATION	2.674489242982306E-8	DESIGN
// here we do not bother with the discriminator.	WITHOUT_CLASSIFICATION	0.9997273395943411	WITHOUT_CLASSIFICATION	2.726604056589587E-4	DESIGN
// Code to handle subclasses of topClass	WITHOUT_CLASSIFICATION	0.9999939530944665	WITHOUT_CLASSIFICATION	6.046905533559675E-6	DESIGN
//woops we got an instance of another class hierarchy branch	WITHOUT_CLASSIFICATION	0.9995022041642276	WITHOUT_CLASSIFICATION	4.977958357723095E-4	DESIGN
// we can go straight to the first required row	WITHOUT_CLASSIFICATION	0.9999985291563843	WITHOUT_CLASSIFICATION	1.470843615712013E-6	DESIGN
// we need to step through the rows one row at a time (slow)	WITHOUT_CLASSIFICATION	0.9999512742285913	WITHOUT_CLASSIFICATION	4.872577140870715E-5	DESIGN
// synchronized to avoid multi-thread access issues; defined as method synch to avoid // potential deadlock issues due to nature of code.	WITHOUT_CLASSIFICATION	0.999942380319101	WITHOUT_CLASSIFICATION	5.761968089901581E-5	DESIGN
// Allows various loaders (ok mainly the QueryLoader :) to check // whether scrolling of their result set should be allowed. // // By default it is allowed.	WITHOUT_CLASSIFICATION	0.9999985635090999	WITHOUT_CLASSIFICATION	1.4364909001261121E-6	DESIGN
//before adding to collection!	WITHOUT_CLASSIFICATION	0.9999919338294225	WITHOUT_CLASSIFICATION	8.066170577520547E-6	DESIGN
// if the current depth is 0, the root thing being loaded is the // many-to-many collection itself.  Here, it is alright to use // an inner join...	WITHOUT_CLASSIFICATION	0.999957459384064	WITHOUT_CLASSIFICATION	4.254061593593809E-5	DESIGN
//operations which cascade as far as the collection also cascade to collection elements	WITHOUT_CLASSIFICATION	0.9999998462585499	WITHOUT_CLASSIFICATION	1.5374145009388576E-7	DESIGN
// simple, because we can't have a one-to-one or a collection  // (or even a property-ref) in a composite-element:	WITHOUT_CLASSIFICATION	0.9999999932788987	WITHOUT_CLASSIFICATION	6.721101354505007E-9	DESIGN
//a composite key	WITHOUT_CLASSIFICATION	0.9999965010290706	WITHOUT_CLASSIFICATION	3.498970929346283E-6	DESIGN
// if no batch, use "foo = ? and bar = ?"	WITHOUT_CLASSIFICATION	0.9999993139645696	WITHOUT_CLASSIFICATION	6.860354302994782E-7	DESIGN
//it must be a collection fetch	WITHOUT_CLASSIFICATION	0.9999995424851463	WITHOUT_CLASSIFICATION	4.575148535932934E-7	DESIGN
// needed later for many-to-many/filter application	WITHOUT_CLASSIFICATION	0.999995958588719	WITHOUT_CLASSIFICATION	4.041411280932392E-6	DESIGN
/*&& etype.isReferenceToPrimaryKey()*/	WITHOUT_CLASSIFICATION	0.9999769188222413	WITHOUT_CLASSIFICATION	2.3081177758740858E-5	DESIGN
// it might still need to apply a collection ordering based on a // many-to-many defined order-by...	WITHOUT_CLASSIFICATION	0.9999993798095694	WITHOUT_CLASSIFICATION	6.201904306538439E-7	DESIGN
// if a composite key, use "( (foo = ? and bar = ?) or (foo = ? and bar = ?) )" for batching //TODO: unnecessary for databases with ANSI-style joins	WITHOUT_CLASSIFICATION	0.9986836331740774	WITHOUT_CLASSIFICATION	0.001316366825922578	DESIGN
// belong to other persister // belong to other persister	WITHOUT_CLASSIFICATION	0.999995397413555	WITHOUT_CLASSIFICATION	4.6025864449153675E-6	DESIGN
// we found it	WITHOUT_CLASSIFICATION	0.9998822318652854	WITHOUT_CLASSIFICATION	1.1776813471458244E-4	DESIGN
//we can use an inner join for the many-to-many	WITHOUT_CLASSIFICATION	0.9999984768143108	WITHOUT_CLASSIFICATION	1.52318568926522E-6	DESIGN
//disable a join back to this same association	WITHOUT_CLASSIFICATION	0.9963707118366284	WITHOUT_CLASSIFICATION	0.0036292881633716747	DESIGN
//NOTE: unlike all other Loaders, this one is NOT //      multithreaded, or cacheable!!	WITHOUT_CLASSIFICATION	0.9873569642222303	WITHOUT_CLASSIFICATION	0.012643035777769753	DESIGN
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999999856538228	WITHOUT_CLASSIFICATION	1.4346177139345754E-8	DESIGN
//root entity comes *last*	WITHOUT_CLASSIFICATION	0.9999358852558433	WITHOUT_CLASSIFICATION	6.411474415674895E-5	DESIGN
//deliberately ignore return value!	WITHOUT_CLASSIFICATION	0.9999880809815413	WITHOUT_CLASSIFICATION	1.1919018458732461E-5	DESIGN
//alias may be null //EARLY EXIT	WITHOUT_CLASSIFICATION	0.9998404268282727	WITHOUT_CLASSIFICATION	1.5957317172728255E-4	DESIGN
// if it is a compound path	WITHOUT_CLASSIFICATION	0.9996446047508484	WITHOUT_CLASSIFICATION	3.553952491515676E-4	DESIGN
// otherwise assume the parent is the the criteria that created us	WITHOUT_CLASSIFICATION	0.9985338007775539	WITHOUT_CLASSIFICATION	0.0014661992224460037	DESIGN
// if its the root criteria, we are done	WITHOUT_CLASSIFICATION	0.9999971975992975	WITHOUT_CLASSIFICATION	2.8024007024525505E-6	DESIGN
// otherwise, recurse	WITHOUT_CLASSIFICATION	0.9999106629357715	WITHOUT_CLASSIFICATION	8.933706422851842E-5	DESIGN
//the criteria instance	WITHOUT_CLASSIFICATION	0.9995154539762213	WITHOUT_CLASSIFICATION	4.845460237787246E-4	DESIGN
// the entity name	WITHOUT_CLASSIFICATION	0.9999338119741438	WITHOUT_CLASSIFICATION	6.618802585629566E-5	DESIGN
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9999820370766781	WITHOUT_CLASSIFICATION	1.796292332195123E-5	DESIGN
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9999820370766781	WITHOUT_CLASSIFICATION	1.796292332195123E-5	DESIGN
//it refers to an alias of a projection	WITHOUT_CLASSIFICATION	0.9999959194176367	WITHOUT_CLASSIFICATION	4.080582363268711E-6	DESIGN
//should never happen, i think	WITHOUT_CLASSIFICATION	0.9979774527322477	WITHOUT_CLASSIFICATION	0.0020225472677523272	DESIGN
// Detect discriminator values...	WITHOUT_CLASSIFICATION	0.9999985936185624	WITHOUT_CLASSIFICATION	1.406381437631757E-6	DESIGN
// Convert the string value into the proper type.	WITHOUT_CLASSIFICATION	0.999990405124887	WITHOUT_CLASSIFICATION	9.594875113013814E-6	DESIGN
// and the qualifier is not the alias of this criteria //      -> check to see if we belong to some criteria other //          than the one that created us	WITHOUT_CLASSIFICATION	0.9999963254595635	WITHOUT_CLASSIFICATION	3.674540436439754E-6	DESIGN
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.9998739671482894	WITHOUT_CLASSIFICATION	1.26032851710673E-4	DESIGN
// Otherwise, this is an ordinary value.	WITHOUT_CLASSIFICATION	0.999822484461089	WITHOUT_CLASSIFICATION	1.775155389109756E-4	DESIGN
// Currently *not* cachable if autodiscover types is in effect (e.g. "select * ...")	WITHOUT_CLASSIFICATION	0.9999998588997553	WITHOUT_CLASSIFICATION	1.411002447861772E-7	DESIGN
//	WITHOUT_CLASSIFICATION	0.9959144787197332	WITHOUT_CLASSIFICATION	0.004085521280266773	DESIGN
// this is only needed (afaict) for ResultTransformer processing...	WITHOUT_CLASSIFICATION	0.9994667802782693	WITHOUT_CLASSIFICATION	5.332197217307108E-4	DESIGN
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.999999948142665	WITHOUT_CLASSIFICATION	5.185733492873797E-8	DESIGN
// build an array with indices equal to the total number // of actual returns in the result Hibernate will return // for this query (scalars + non-scalars)	WITHOUT_CLASSIFICATION	0.999997948788022	WITHOUT_CLASSIFICATION	2.0512119780246533E-6	DESIGN
// replace {....} with corresponding column aliases	WITHOUT_CLASSIFICATION	0.9999977407535517	WITHOUT_CLASSIFICATION	2.2592464482884103E-6	DESIGN
// No additional open braces found in the string, append the // rest of the string in its entirty and quit this loop	WITHOUT_CLASSIFICATION	0.9998874985152874	WITHOUT_CLASSIFICATION	1.1250148471270293E-4	DESIGN
// apend everything up until the next encountered open brace	WITHOUT_CLASSIFICATION	0.9999899688538894	WITHOUT_CLASSIFICATION	1.0031146110545772E-5	DESIGN
// it is a simple table alias {foo}	WITHOUT_CLASSIFICATION	0.9999999058463072	WITHOUT_CLASSIFICATION	9.41536927899437E-8	DESIGN
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9976522262245923	WITHOUT_CLASSIFICATION	0.0023477737754077567	DESIGN
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9976522262245923	WITHOUT_CLASSIFICATION	0.0023477737754077567	DESIGN
// The current alias is referencing the collection to be eagerly fetched	WITHOUT_CLASSIFICATION	0.9999978988282043	WITHOUT_CLASSIFICATION	2.10117179562041E-6	DESIGN
// it is a property reference {foo.bar}	WITHOUT_CLASSIFICATION	0.9999329207159975	WITHOUT_CLASSIFICATION	6.707928400248978E-5	DESIGN
// Possibly handle :something parameters for the query ?	WITHOUT_CLASSIFICATION	0.9977712735094655	WITHOUT_CLASSIFICATION	0.0022287264905345083	DESIGN
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999955910726182	WITHOUT_CLASSIFICATION	4.408927381823997E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.9959144787197332	WITHOUT_CLASSIFICATION	0.004085521280266773	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.9993844224900065	WITHOUT_CLASSIFICATION	6.155775099936293E-4	DESIGN
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.8974383767829103	WITHOUT_CLASSIFICATION	0.10256162321708966	DESIGN
//	WITHOUT_CLASSIFICATION	0.9959144787197332	WITHOUT_CLASSIFICATION	0.004085521280266773	DESIGN
// Now, process the returns	WITHOUT_CLASSIFICATION	0.999995099922067	WITHOUT_CLASSIFICATION	4.900077933062703E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.9959144787197332	WITHOUT_CLASSIFICATION	0.004085521280266773	DESIGN
// already been processed...	WITHOUT_CLASSIFICATION	0.9999856638565294	WITHOUT_CLASSIFICATION	1.4336143470632992E-5	DESIGN
// already been processed...	WITHOUT_CLASSIFICATION	0.9999856638565294	WITHOUT_CLASSIFICATION	1.4336143470632992E-5	DESIGN
// Make sure the owner alias is known...	WITHOUT_CLASSIFICATION	0.9999953924869058	WITHOUT_CLASSIFICATION	4.607513094166106E-6	DESIGN
// first, break down the returns into maps keyed by alias // so that role returns can be more easily resolved to their owners	WITHOUT_CLASSIFICATION	0.9999814252590458	WITHOUT_CLASSIFICATION	1.857474095422113E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9959144787197332	WITHOUT_CLASSIFICATION	0.004085521280266773	DESIGN
// If this return's alias has not been processed yet, do so b4 further processing of this return	WITHOUT_CLASSIFICATION	0.9997899647999293	WITHOUT_CLASSIFICATION	2.100352000705958E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9959144787197332	WITHOUT_CLASSIFICATION	0.004085521280266773	DESIGN
// for merging of versioned entities, we consider the version having // been changed only when: // 1) the two version values are different; //      *AND* // 2) The target actually represents database state! // // This second condition is a special case which allows // an entity to be merged during the same transaction // (though during a seperate operation) in which it was // originally persisted/saved	WITHOUT_CLASSIFICATION	0.9999716799182371	WITHOUT_CLASSIFICATION	2.8320081762835526E-5	DESIGN
// this is the second pass through on a merge op, so here we limit the // replacement to associations types (value types were already replaced // during the first pass)	WITHOUT_CLASSIFICATION	0.9867748356162049	WITHOUT_CLASSIFICATION	0.013225164383795023	DESIGN
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.9986158916282841	WITHOUT_CLASSIFICATION	0.0013841083717158532	DESIGN
// cascade-save to collections AFTER the collection owner was saved	WITHOUT_CLASSIFICATION	0.9999953677300263	WITHOUT_CLASSIFICATION	4.632269973669504E-6	DESIGN
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999996999982507	WITHOUT_CLASSIFICATION	3.0000174937543934E-7	DESIGN
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999973285580939	WITHOUT_CLASSIFICATION	2.6714419061117945E-6	DESIGN
// currently only the Hibernate-supplied DbTimestampType is supported here	WITHOUT_CLASSIFICATION	0.9999207079952138	WITHOUT_CLASSIFICATION	7.929200478622059E-5	DESIGN
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9979400063007492	WITHOUT_CLASSIFICATION	0.002059993699250804	DESIGN
// make a new one	WITHOUT_CLASSIFICATION	0.9999970685194407	WITHOUT_CLASSIFICATION	2.9314805593072E-6	DESIGN
// not so sure this is even valid subtree.  but if it was, it'd // represent two unrelated table references...	WITHOUT_CLASSIFICATION	0.853260063770812	WITHOUT_CLASSIFICATION	0.14673993622918807	DESIGN
// (NOT (GT a b) ) => (LE a b)	WITHOUT_CLASSIFICATION	0.9998211440619985	WITHOUT_CLASSIFICATION	1.7885593800148904E-4	DESIGN
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9999907386328842	WITHOUT_CLASSIFICATION	9.261367115850169E-6	DESIGN
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9999927299040251	WITHOUT_CLASSIFICATION	7.270095974958646E-6	DESIGN
//sqlResultTypes = selectClause.getSqlResultTypes();	WITHOUT_CLASSIFICATION	0.9999997248879523	WITHOUT_CLASSIFICATION	2.7511204772651307E-7	DESIGN
//by default	WITHOUT_CLASSIFICATION	0.9999051731565666	WITHOUT_CLASSIFICATION	9.482684343342642E-5	DESIGN
// This is now handled earlier in this method.	WITHOUT_CLASSIFICATION	0.8760976008171304	WITHOUT_CLASSIFICATION	0.12390239918286966	DESIGN
// -- Loader implementation --	WITHOUT_CLASSIFICATION	0.9999994825585361	WITHOUT_CLASSIFICATION	5.174414638503772E-7	DESIGN
// -- Loader overrides --	WITHOUT_CLASSIFICATION	0.9999997715531568	WITHOUT_CLASSIFICATION	2.2844684322678078E-7	DESIGN
// (NOT (IS_NULL a b) ) => (IS_NOT_NULL a b)	WITHOUT_CLASSIFICATION	0.9999683003651513	WITHOUT_CLASSIFICATION	3.169963484873939E-5	DESIGN
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.9999373528488582	WITHOUT_CLASSIFICATION	6.264715114184342E-5	DESIGN
// meant to handle dynamic instantiation queries...	WITHOUT_CLASSIFICATION	0.9999983621901171	WITHOUT_CLASSIFICATION	1.637809882829444E-6	DESIGN
// --- Query translator methods ---	WITHOUT_CLASSIFICATION	0.9999989406939638	WITHOUT_CLASSIFICATION	1.0593060362246207E-6	DESIGN
// -- Implementation private methods --	WITHOUT_CLASSIFICATION	0.9999960811329309	WITHOUT_CLASSIFICATION	3.918867069086243E-6	DESIGN
//deduplicate unique constraints sharing the same columns //this is needed by Hibernate Annotations since it creates automagically // unique constraints for the user	WITHOUT_CLASSIFICATION	0.9999843046423864	WITHOUT_CLASSIFICATION	1.5695357613623367E-5	DESIGN
// Try to find out the name of the primary key to create it as identity if the IdentityGenerator is used	WITHOUT_CLASSIFICATION	0.9987860877047244	WITHOUT_CLASSIFICATION	0.0012139122952755184	DESIGN
// to support dialects that have their own identity data type	WITHOUT_CLASSIFICATION	0.9999998773032702	WITHOUT_CLASSIFICATION	1.2269672978210515E-7	DESIGN
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999999974799827	WITHOUT_CLASSIFICATION	2.5200172843965634E-9	DESIGN
//used also for generation of FK names!	WITHOUT_CLASSIFICATION	0.9744203679198828	WITHOUT_CLASSIFICATION	0.02557963208011726	DESIGN
//usually useless	WITHOUT_CLASSIFICATION	0.9999276971647428	WITHOUT_CLASSIFICATION	7.230283525720174E-5	DESIGN
// added this caching as I noticed that getType() is being called multiple times...	WITHOUT_CLASSIFICATION	0.9993891536428904	WITHOUT_CLASSIFICATION	6.10846357109602E-4	DESIGN
//do not add unique constraint on DB not supporting unique and nullable columns	WITHOUT_CLASSIFICATION	0.9999999992814382	WITHOUT_CLASSIFICATION	7.185617011948413E-10	DESIGN
//for backward compatibility, disable this:	WITHOUT_CLASSIFICATION	0.9999661716119004	WITHOUT_CLASSIFICATION	3.382838809960031E-5	DESIGN
//may be final //may be final //may be final	WITHOUT_CLASSIFICATION	0.999857248502094	WITHOUT_CLASSIFICATION	1.4275149790589933E-4	DESIGN
//may be final	WITHOUT_CLASSIFICATION	0.996715811705532	WITHOUT_CLASSIFICATION	0.003284188294468049	DESIGN
// may be final	WITHOUT_CLASSIFICATION	0.9996220859083486	WITHOUT_CLASSIFICATION	3.77914091651468E-4	DESIGN
// Custom SQL	WITHOUT_CLASSIFICATION	0.9999983630498568	WITHOUT_CLASSIFICATION	1.6369501433119053E-6	DESIGN
//Primary key constraint	WITHOUT_CLASSIFICATION	0.9999946844731405	WITHOUT_CLASSIFICATION	5.315526859499792E-6	DESIGN
// the root of the incoming property path matched one // of the embedded composite identifier properties	WITHOUT_CLASSIFICATION	0.9999984813896772	WITHOUT_CLASSIFICATION	1.5186103228382807E-6	DESIGN
// ignore it...	WITHOUT_CLASSIFICATION	0.9999992238248812	WITHOUT_CLASSIFICATION	7.761751187906751E-7	DESIGN
//flat recursive algorithm	WITHOUT_CLASSIFICATION	0.9999555269026226	WITHOUT_CLASSIFICATION	4.447309737748083E-5	DESIGN
//an identifier mapper => getKey will be included in the getNonDuplicatedPropertyIterator() //and checked later, so it needs to be excluded	WITHOUT_CLASSIFICATION	0.9999994675603144	WITHOUT_CLASSIFICATION	5.324396855971006E-7	DESIGN
//if the hibernate-mapping did not specify a schema/catalog, use the defaults //specified by properties - but note that if the schema/catalog were specified //in hibernate-mapping, or as params, they will already be initialized and //will override the values set here (they are in identifierGeneratorProperties)	WITHOUT_CLASSIFICATION	0.9999999999694144	WITHOUT_CLASSIFICATION	3.058559512517054E-11	DESIGN
//pass the entity-name, if not a collection-id	WITHOUT_CLASSIFICATION	0.9999995551370807	WITHOUT_CLASSIFICATION	4.4486291931733764E-7	DESIGN
// Custom SQL	WITHOUT_CLASSIFICATION	0.9999983630498568	WITHOUT_CLASSIFICATION	1.6369501433119053E-6	DESIGN
//Primary key constraint	WITHOUT_CLASSIFICATION	0.9999946844731405	WITHOUT_CLASSIFICATION	5.315526859499792E-6	DESIGN
//pass the column name (a generated id almost always has a single column)	WITHOUT_CLASSIFICATION	0.9999976197090946	WITHOUT_CLASSIFICATION	2.3802909054430874E-6	DESIGN
//needed to satisfy KeyValue	WITHOUT_CLASSIFICATION	0.9998952879687757	WITHOUT_CLASSIFICATION	1.0471203122428735E-4	DESIGN
// empty means no scoping	WITHOUT_CLASSIFICATION	0.9973701753334704	WITHOUT_CLASSIFICATION	0.0026298246665295796	DESIGN
// index should be last column listed	WITHOUT_CLASSIFICATION	0.9999988756879942	WITHOUT_CLASSIFICATION	1.1243120057958108E-6	DESIGN
//if it is a formula index, use the element columns in the PK	WITHOUT_CLASSIFICATION	0.9999979333021765	WITHOUT_CLASSIFICATION	2.0666978235122066E-6	DESIGN
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns	WITHOUT_CLASSIFICATION	0.9999573707951145	WITHOUT_CLASSIFICATION	4.262920488561918E-5	DESIGN
/*ArrayList list = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999909984048417	WITHOUT_CLASSIFICATION	9.001595158294977E-6	DESIGN
// }	WITHOUT_CLASSIFICATION	0.9999874790589626	WITHOUT_CLASSIFICATION	1.2520941037452374E-5	DESIGN
// no foreign key element of for a one-to-many	WITHOUT_CLASSIFICATION	0.9999996426073757	WITHOUT_CLASSIFICATION	3.573926241707722E-7	DESIGN
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9998992434800198	DESIGN	1.0075651998018548E-4	WITHOUT_CLASSIFICATION
// the case of a foreign key to something other than the pk is handled in createPropertyRefConstraints	WITHOUT_CLASSIFICATION	0.9999997254655822	WITHOUT_CLASSIFICATION	2.7453441779730517E-7	DESIGN
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9998992434800198	DESIGN	1.0075651998018548E-4	WITHOUT_CLASSIFICATION
// if the property mapping consists of all formulas,  // make it non-updateable	WITHOUT_CLASSIFICATION	0.9999999669150474	WITHOUT_CLASSIFICATION	3.308495263643177E-8	DESIGN
//columnUpdateability.length==0 ||	WITHOUT_CLASSIFICATION	0.999868716004916	WITHOUT_CLASSIFICATION	1.3128399508405156E-4	DESIGN
// if the property mapping consists of all formulas,  // make it insertable	WITHOUT_CLASSIFICATION	0.9999999454742458	WITHOUT_CLASSIFICATION	5.4525754264041176E-8	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999723823428216	WITHOUT_CLASSIFICATION	2.7617657178480935E-5	DESIGN
// expected type is intrinsic here...	WITHOUT_CLASSIFICATION	0.999997757535147	WITHOUT_CLASSIFICATION	2.2424648531163993E-6	DESIGN
//}	WITHOUT_CLASSIFICATION	0.9998807409157564	WITHOUT_CLASSIFICATION	1.1925908424353934E-4	DESIGN
//}	WITHOUT_CLASSIFICATION	0.9998807409157564	WITHOUT_CLASSIFICATION	1.1925908424353934E-4	DESIGN
//return memberPersister.getPropertyType(propertyName);	WITHOUT_CLASSIFICATION	0.9999983819513295	WITHOUT_CLASSIFICATION	1.6180486704783334E-6	DESIGN
//return memberPersister.toColumns(alias, propertyName);	WITHOUT_CLASSIFICATION	0.9999998982023629	WITHOUT_CLASSIFICATION	1.0179763706629267E-7	DESIGN
//return memberPersister.getType();	WITHOUT_CLASSIFICATION	0.9999982091111701	WITHOUT_CLASSIFICATION	1.7908888298586702E-6	DESIGN
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9999825382054417	WITHOUT_CLASSIFICATION	1.746179455835106E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9959144787197332	WITHOUT_CLASSIFICATION	0.004085521280266773	DESIGN
//instanceof AssociationType;	WITHOUT_CLASSIFICATION	0.9999294230597048	WITHOUT_CLASSIFICATION	7.057694029518827E-5	DESIGN
// we need to determine the best way to know that two joinables // represent a single many-to-many...	WITHOUT_CLASSIFICATION	0.6063382018068142	WITHOUT_CLASSIFICATION	0.39366179819318586	DESIGN
//strip leading ','	WITHOUT_CLASSIFICATION	0.9999341583401574	WITHOUT_CLASSIFICATION	6.584165984265225E-5	DESIGN
//public boolean isSubselectLoadable();	WITHOUT_CLASSIFICATION	0.9999978838889154	WITHOUT_CLASSIFICATION	2.116111084566692E-6	DESIGN
// KEY	WITHOUT_CLASSIFICATION	0.9999626639261334	WITHOUT_CLASSIFICATION	3.733607386657997E-5	DESIGN
//columns	WITHOUT_CLASSIFICATION	0.9999842654562986	WITHOUT_CLASSIFICATION	1.573454370137678E-5	DESIGN
//SQL statements	WITHOUT_CLASSIFICATION	0.999950074939703	WITHOUT_CLASSIFICATION	4.9925060296958575E-5	DESIGN
//extra information about the element type	WITHOUT_CLASSIFICATION	0.9999999843932164	WITHOUT_CLASSIFICATION	1.5606783571597072E-8	DESIGN
//types	WITHOUT_CLASSIFICATION	0.9997122679337672	WITHOUT_CLASSIFICATION	2.877320662327169E-4	DESIGN
// custom sql	WITHOUT_CLASSIFICATION	0.9999991545770348	WITHOUT_CLASSIFICATION	8.454229653039276E-7	DESIGN
//private final String unquotedIdentifierColumnName;	WITHOUT_CLASSIFICATION	0.9999999138821015	WITHOUT_CLASSIFICATION	8.611789856107995E-8	DESIGN
// dynamic filters specifically for many-to-many inside the collection	WITHOUT_CLASSIFICATION	0.999999986583182	WITHOUT_CLASSIFICATION	1.3416818020815903E-8	DESIGN
// dynamic filters for the collection	WITHOUT_CLASSIFICATION	0.9999999089768512	WITHOUT_CLASSIFICATION	9.102314879627716E-8	DESIGN
// NativeSQL: collect key column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999997400329498	WITHOUT_CLASSIFICATION	2.5996705019773943E-7	DESIGN
//unquotedKeyColumnNames = StringHelper.unQuote(keyColumnAliases);	WITHOUT_CLASSIFICATION	0.9999999701103194	WITHOUT_CLASSIFICATION	2.9889680569605333E-8	DESIGN
//ELEMENT	WITHOUT_CLASSIFICATION	0.999540815245254	WITHOUT_CLASSIFICATION	4.5918475474608834E-4	DESIGN
// NativeSQL: collect element column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999976205581793	WITHOUT_CLASSIFICATION	2.3794418207882176E-6	DESIGN
// INDEX AND ROW SELECT	WITHOUT_CLASSIFICATION	0.9999976399578091	WITHOUT_CLASSIFICATION	2.360042190766036E-6	DESIGN
// NativeSQL: collect index column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999998706380783	WITHOUT_CLASSIFICATION	1.2936192166239284E-7	DESIGN
//unquotedIdentifierColumnName = identifierColumnAlias;	WITHOUT_CLASSIFICATION	0.9999999526952701	WITHOUT_CLASSIFICATION	4.7304729963706444E-8	DESIGN
//unquotedIdentifierColumnName = null;	WITHOUT_CLASSIFICATION	0.9999999628309197	WITHOUT_CLASSIFICATION	3.716908024116143E-8	DESIGN
//GENERATE THE SQL:	WITHOUT_CLASSIFICATION	0.9996383432835924	WITHOUT_CLASSIFICATION	3.6165671640760633E-4	DESIGN
// for non-arrays, we don't need to know the element class //elementType.returnedClass();	WITHOUT_CLASSIFICATION	0.9999440644875893	WITHOUT_CLASSIFICATION	5.593551241065388E-5	DESIGN
//not all classpersisters implement PropertyMapping!	WITHOUT_CLASSIFICATION	0.9999183499074533	WITHOUT_CLASSIFICATION	8.165009254667542E-5	DESIGN
// Handle any filters applied to this collection	WITHOUT_CLASSIFICATION	0.9738036562761281	WITHOUT_CLASSIFICATION	0.026196343723871907	DESIGN
// Handle any filters applied to this collection for many-to-many	WITHOUT_CLASSIFICATION	0.9983594354357234	WITHOUT_CLASSIFICATION	0.00164056456427659	DESIGN
//if there is a user-specified loader, return that //TODO: filters!?	WITHOUT_CLASSIFICATION	0.9972398550479974	DESIGN	0.002760144952002639	WITHOUT_CLASSIFICATION
// Take care of any entities that might have // been evicted!	WITHOUT_CLASSIFICATION	0.9998942090874271	WITHOUT_CLASSIFICATION	1.0579091257295723E-4	DESIGN
//strip leading ','	WITHOUT_CLASSIFICATION	0.9999341583401574	WITHOUT_CLASSIFICATION	6.584165984265225E-5	DESIGN
// Run a subquery loader	WITHOUT_CLASSIFICATION	0.9999946821771779	WITHOUT_CLASSIFICATION	5.317822822002837E-6	DESIGN
//needed by arrays	WITHOUT_CLASSIFICATION	0.9999943951136523	WITHOUT_CLASSIFICATION	5.604886347747137E-6	DESIGN
//TODO: something with formulas...	WITHOUT_CLASSIFICATION	0.9958763298172585	DESIGN	0.0041236701827414395	WITHOUT_CLASSIFICATION
//an assertion	WITHOUT_CLASSIFICATION	0.9999973711389482	WITHOUT_CLASSIFICATION	2.6288610518890214E-6	DESIGN
// Remove all the old entries	WITHOUT_CLASSIFICATION	0.9999970936626262	WITHOUT_CLASSIFICATION	2.906337373759522E-6	DESIGN
//create all the new entries	WITHOUT_CLASSIFICATION	0.9999978646048808	WITHOUT_CLASSIFICATION	2.135395119073198E-6	DESIGN
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9999825382054417	WITHOUT_CLASSIFICATION	1.746179455835106E-5	DESIGN
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9999825382054417	WITHOUT_CLASSIFICATION	1.746179455835106E-5	DESIGN
//delete all the deleted entries	WITHOUT_CLASSIFICATION	0.9999964895105112	WITHOUT_CLASSIFICATION	3.5104894886560466E-6	DESIGN
//insert all the new entries	WITHOUT_CLASSIFICATION	0.999998265694551	WITHOUT_CLASSIFICATION	1.7343054490500684E-6	DESIGN
//==elementType ??	WITHOUT_CLASSIFICATION	0.9986316141300304	WITHOUT_CLASSIFICATION	0.0013683858699696401	DESIGN
//update all the modified entries	WITHOUT_CLASSIFICATION	0.9999988957363567	WITHOUT_CLASSIFICATION	1.104263643387344E-6	DESIGN
//identifier collections not supported for 1-to-many	WITHOUT_CLASSIFICATION	0.9999998443009898	WITHOUT_CLASSIFICATION	1.5569901029437035E-7	DESIGN
// update removed rows fks to null	WITHOUT_CLASSIFICATION	0.9995663290347032	WITHOUT_CLASSIFICATION	4.33670965296792E-4	DESIGN
// will still be issued when it used to be null	WITHOUT_CLASSIFICATION	0.9366199570608016	WITHOUT_CLASSIFICATION	0.06338004293919829	DESIGN
// now update all changed or added rows fks	WITHOUT_CLASSIFICATION	0.999998965941195	WITHOUT_CLASSIFICATION	1.0340588050671699E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.9959144787197332	WITHOUT_CLASSIFICATION	0.004085521280266773	DESIGN
//use suffix for the entity columns	WITHOUT_CLASSIFICATION	0.9999618072147722	WITHOUT_CLASSIFICATION	3.8192785227835725E-5	DESIGN
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9997027948467372	WITHOUT_CLASSIFICATION	2.9720515326276927E-4	DESIGN
//private final String rootTableName;	WITHOUT_CLASSIFICATION	0.9999996043266579	WITHOUT_CLASSIFICATION	3.9567334210012215E-7	DESIGN
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9998603597162322	WITHOUT_CLASSIFICATION	1.396402837677406E-4	DESIGN
//Custom SQL	WITHOUT_CLASSIFICATION	0.999969057698961	WITHOUT_CLASSIFICATION	3.0942301038946236E-5	DESIGN
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9997027948467372	WITHOUT_CLASSIFICATION	2.9720515326276927E-4	DESIGN
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999958437478961	WITHOUT_CLASSIFICATION	4.156252103925398E-6	DESIGN
// This could also just be true all the time...	WITHOUT_CLASSIFICATION	0.9981871270383793	WITHOUT_CLASSIFICATION	0.0018128729616206328	DESIGN
//chop the last union (all)	WITHOUT_CLASSIFICATION	0.9999850298602385	WITHOUT_CLASSIFICATION	1.497013976145947E-5	DESIGN
//TODO: check this....	WITHOUT_CLASSIFICATION	0.9999301216552753	DESIGN	6.987834472466559E-5	WITHOUT_CLASSIFICATION
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9998603597162322	WITHOUT_CLASSIFICATION	1.396402837677406E-4	DESIGN
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9999860120545228	WITHOUT_CLASSIFICATION	1.398794547726404E-5	DESIGN
// the closure of all properties in the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999983731383397	WITHOUT_CLASSIFICATION	1.6268616603342416E-6	DESIGN
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999996210816487	WITHOUT_CLASSIFICATION	3.7891835121723595E-7	DESIGN
// subclass discrimination works by assigning particular // values to certain combinations of null primary key // values in the outer join using an SQL CASE	WITHOUT_CLASSIFICATION	0.9999999569287398	WITHOUT_CLASSIFICATION	4.307126027112571E-8	DESIGN
//MULTITABLES	WITHOUT_CLASSIFICATION	0.9996941430405755	WITHOUT_CLASSIFICATION	3.058569594245113E-4	DESIGN
// Custom sql	WITHOUT_CLASSIFICATION	0.9999992229004115	WITHOUT_CLASSIFICATION	7.770995885250551E-7	DESIGN
// subclass closure properties	WITHOUT_CLASSIFICATION	0.9999940277807862	WITHOUT_CLASSIFICATION	5.972219213831834E-6	DESIGN
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999644197707286	WITHOUT_CLASSIFICATION	3.558022927149243E-5	DESIGN
//( (Column) model.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999963597622306	WITHOUT_CLASSIFICATION	3.6402377694858932E-6	DESIGN
//( (Column) sc.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999983416223753	WITHOUT_CLASSIFICATION	1.6583776246744096E-6	DESIGN
// don't need subclass tables, because they can't appear in conditions	WITHOUT_CLASSIFICATION	0.9998962026739519	WITHOUT_CLASSIFICATION	1.0379732604812476E-4	DESIGN
// special case where we need to force incloude all subclass joins	WITHOUT_CLASSIFICATION	0.9999964209537747	WITHOUT_CLASSIFICATION	3.5790462253297595E-6	DESIGN
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9997027948467372	WITHOUT_CLASSIFICATION	2.9720515326276927E-4	DESIGN
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9999860120545228	WITHOUT_CLASSIFICATION	1.398794547726404E-5	DESIGN
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999996210816487	WITHOUT_CLASSIFICATION	3.7891835121723595E-7	DESIGN
//get em on the second pass!	WITHOUT_CLASSIFICATION	0.9997835947773143	WITHOUT_CLASSIFICATION	2.1640522268571278E-4	DESIGN
// now look up the object we are really interested in! // (this lets us correctly handle proxies and multi-row // or multi-column queries)	WITHOUT_CLASSIFICATION	0.9940675887937092	WITHOUT_CLASSIFICATION	0.005932411206290766	DESIGN
// discriminator column	WITHOUT_CLASSIFICATION	0.9999989144668138	WITHOUT_CLASSIFICATION	1.0855331862063731E-6	DESIGN
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9998603597162322	WITHOUT_CLASSIFICATION	1.396402837677406E-4	DESIGN
//private final Map propertyTableNumbersByName = new HashMap();	WITHOUT_CLASSIFICATION	0.9999995536814894	WITHOUT_CLASSIFICATION	4.463185105513644E-7	DESIGN
// CLASS + TABLE	WITHOUT_CLASSIFICATION	0.9999956877423264	WITHOUT_CLASSIFICATION	4.3122576735283345E-6	DESIGN
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999689748793391	WITHOUT_CLASSIFICATION	3.102512066093557E-5	DESIGN
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999432837420117	WITHOUT_CLASSIFICATION	5.671625798827585E-5	DESIGN
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999644197707286	WITHOUT_CLASSIFICATION	3.558022927149243E-5	DESIGN
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999958437478961	WITHOUT_CLASSIFICATION	4.156252103925398E-6	DESIGN
// JOINS	WITHOUT_CLASSIFICATION	0.9999948239972033	WITHOUT_CLASSIFICATION	5.176002796684291E-6	DESIGN
//propertyTableNumbersByName.put( prop.getName(), join );	WITHOUT_CLASSIFICATION	0.999999836825596	WITHOUT_CLASSIFICATION	1.6317440400750856E-7	DESIGN
//Access cached SQL	WITHOUT_CLASSIFICATION	0.9998516622780099	WITHOUT_CLASSIFICATION	1.4833772199011915E-4	DESIGN
//figure out which tables need to be fetched	WITHOUT_CLASSIFICATION	0.9999465233723572	WITHOUT_CLASSIFICATION	5.347662764278553E-5	DESIGN
//figure out which columns are needed	WITHOUT_CLASSIFICATION	0.9999979991626602	WITHOUT_CLASSIFICATION	2.0008373398956437E-6	DESIGN
//figure out which formulas are needed	WITHOUT_CLASSIFICATION	0.9999998516204783	WITHOUT_CLASSIFICATION	1.483795217090729E-7	DESIGN
//render the SQL	WITHOUT_CLASSIFICATION	0.9997369367244089	WITHOUT_CLASSIFICATION	2.6306327559106794E-4	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999723823428216	WITHOUT_CLASSIFICATION	2.7617657178480935E-5	DESIGN
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998434246004386	WITHOUT_CLASSIFICATION	1.5657539956140317E-4	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999918173872538	WITHOUT_CLASSIFICATION	8.182612746188953E-6	DESIGN
// The optional SQL string defined in the where attribute	WITHOUT_CLASSIFICATION	0.999999743240157	WITHOUT_CLASSIFICATION	2.5675984303161947E-7	DESIGN
//information about lazy properties of this class	WITHOUT_CLASSIFICATION	0.9999966823263354	WITHOUT_CLASSIFICATION	3.317673664492862E-6	DESIGN
//information about all properties in class hierarchy	WITHOUT_CLASSIFICATION	0.9999998891950114	WITHOUT_CLASSIFICATION	1.1080498870917979E-7	DESIGN
//information about all columns/formulas in class hierarchy	WITHOUT_CLASSIFICATION	0.9999999572780262	WITHOUT_CLASSIFICATION	4.2721973765074613E-8	DESIGN
// dynamic filters attached to the class-level	WITHOUT_CLASSIFICATION	0.9999882096510908	WITHOUT_CLASSIFICATION	1.179034890912794E-5	DESIGN
// SQL strings	WITHOUT_CLASSIFICATION	0.9999536984200712	WITHOUT_CLASSIFICATION	4.630157992875831E-5	DESIGN
// for objects that came in via update()	WITHOUT_CLASSIFICATION	0.9999957553229172	WITHOUT_CLASSIFICATION	4.2446770828330974E-6	DESIGN
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999432837420117	WITHOUT_CLASSIFICATION	5.671625798827585E-5	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999918173872538	WITHOUT_CLASSIFICATION	8.182612746188953E-6	DESIGN
// IDENTIFIER	WITHOUT_CLASSIFICATION	0.9999959794464833	WITHOUT_CLASSIFICATION	4.020553516644168E-6	DESIGN
// VERSION	WITHOUT_CLASSIFICATION	0.9999937790856815	WITHOUT_CLASSIFICATION	6.220914318424183E-6	DESIGN
//WHERE STRING	WITHOUT_CLASSIFICATION	0.9998188014444249	WITHOUT_CLASSIFICATION	1.8119855557513305E-4	DESIGN
// SUBCLASS PROPERTY CLOSURE	WITHOUT_CLASSIFICATION	0.9998632110176936	WITHOUT_CLASSIFICATION	1.3678898230649024E-4	DESIGN
//before add :-)	WITHOUT_CLASSIFICATION	0.9998291740345877	WITHOUT_CLASSIFICATION	1.7082596541229987E-4	DESIGN
// Handle any filters applied to the class level	WITHOUT_CLASSIFICATION	0.9966028869140099	WITHOUT_CLASSIFICATION	0.003397113085990072	DESIGN
// only one-to-one is lazy fetched	WITHOUT_CLASSIFICATION	0.9999964694869291	WITHOUT_CLASSIFICATION	3.5305130709354595E-6	DESIGN
//note early exit here:	WITHOUT_CLASSIFICATION	0.9997896380386212	WITHOUT_CLASSIFICATION	2.1036196137880821E-4	DESIGN
// object have been loaded with setReadOnly(true); HHH-2236	WITHOUT_CLASSIFICATION	0.9999809158301416	WITHOUT_CLASSIFICATION	1.9084169858424623E-5	DESIGN
// NOTE: this assumes something about how propertySelectFragment is implemented by the subclass!	WITHOUT_CLASSIFICATION	0.991420274047271	WITHOUT_CLASSIFICATION	0.008579725952729	DESIGN
//strip leading ", "	WITHOUT_CLASSIFICATION	0.9999693874798762	WITHOUT_CLASSIFICATION	3.0612520123791785E-5	DESIGN
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999482125632299	WITHOUT_CLASSIFICATION	5.1787436770083274E-5	DESIGN
//otherwise return the "hydrated" state (ie. associations are not resolved)	WITHOUT_CLASSIFICATION	0.9997522677770685	WITHOUT_CLASSIFICATION	2.47732222931439E-4	DESIGN
//null owner ok??	WITHOUT_CLASSIFICATION	0.9998758242905141	WITHOUT_CLASSIFICATION	1.241757094857652E-4	DESIGN
// null sql means that the only lazy properties // are shared PK one-to-one associations which are // handled differently in the Type#nullSafeGet code...	WITHOUT_CLASSIFICATION	0.9999939917981863	WITHOUT_CLASSIFICATION	6.008201813652304E-6	DESIGN
// Create a new FROM node for the referenced class.	WITHOUT_CLASSIFICATION	0.9999993221325582	WITHOUT_CLASSIFICATION	6.778674419466388E-7	DESIGN
// the difficulty here is exactly what do we update in order to // force the version to be incremented in the db...	WITHOUT_CLASSIFICATION	0.6535537860429117	WITHOUT_CLASSIFICATION	0.3464462139570883	DESIGN
// performance op to avoid the array search	WITHOUT_CLASSIFICATION	0.9999998918772937	WITHOUT_CLASSIFICATION	1.0812270639662725E-7	DESIGN
// properly handle property-ref-based associations	WITHOUT_CLASSIFICATION	0.9998697054112343	WITHOUT_CLASSIFICATION	1.3029458876564738E-4	DESIGN
//Enable for HHH-440, which we don't like:	WITHOUT_CLASSIFICATION	0.9999077121428182	WITHOUT_CLASSIFICATION	9.228785718195955E-5	DESIGN
// ALIASES	WITHOUT_CLASSIFICATION	0.9999911792007503	WITHOUT_CLASSIFICATION	8.82079924977434E-6	DESIGN
// aliases named identifier ( alias.idname )	WITHOUT_CLASSIFICATION	0.9999984010014021	WITHOUT_CLASSIFICATION	1.5989985979491656E-6	DESIGN
// aliases for composite-id's	WITHOUT_CLASSIFICATION	0.9999999792846417	WITHOUT_CLASSIFICATION	2.0715358307050756E-8	DESIGN
// Fetch embedded identifiers propertynames from the "virtual" identifier component	WITHOUT_CLASSIFICATION	0.9999999933560959	WITHOUT_CLASSIFICATION	6.643904073201978E-9	DESIGN
// embedded composite ids ( alias.idname1, alias.idname2 )	WITHOUT_CLASSIFICATION	0.999999918774421	WITHOUT_CLASSIFICATION	8.122557898319153E-8	DESIGN
// TODO: skip formulas?	WITHOUT_CLASSIFICATION	0.9994435983644606	DESIGN	5.564016355392494E-4	WITHOUT_CLASSIFICATION
//don't need filters for the static loaders	WITHOUT_CLASSIFICATION	0.9999808641321187	WITHOUT_CLASSIFICATION	1.9135867881284467E-5	DESIGN
//do two passes, for collection property-ref!	WITHOUT_CLASSIFICATION	0.9999990903841195	WITHOUT_CLASSIFICATION	9.096158804056413E-7	DESIGN
// select the correct row by either pk or rowid	WITHOUT_CLASSIFICATION	0.9999264636263829	WITHOUT_CLASSIFICATION	7.353637361704768E-5	DESIGN
//TODO: eventually, rowIdName[j]	WITHOUT_CLASSIFICATION	0.6465301814567876	DESIGN	0.3534698185432123	WITHOUT_CLASSIFICATION
// this is a property of the table, which we are updating	WITHOUT_CLASSIFICATION	0.9923291409095126	WITHOUT_CLASSIFICATION	0.007670859090487339	DESIGN
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9999973545957953	WITHOUT_CLASSIFICATION	2.6454042047434913E-6	DESIGN
// we are using "all" or "dirty" property-based optimistic locking	WITHOUT_CLASSIFICATION	0.9999448557849976	WITHOUT_CLASSIFICATION	5.5144215002383836E-5	DESIGN
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.8511113194820916	WITHOUT_CLASSIFICATION	0.14888868051790832	DESIGN
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.999979331268863	WITHOUT_CLASSIFICATION	2.066873113707921E-5	DESIGN
// add normal properties	WITHOUT_CLASSIFICATION	0.9999999301800381	WITHOUT_CLASSIFICATION	6.981996185956774E-8	DESIGN
// add the discriminator	WITHOUT_CLASSIFICATION	0.9999954797377252	WITHOUT_CLASSIFICATION	4.5202622748891575E-6	DESIGN
// more specifically : "? [op] datetime" //      1) if the operator is MINUS, the param needs to be of //          some datetime type //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.9720432859509281	WITHOUT_CLASSIFICATION	0.02795671404907186	DESIGN
// add normal properties	WITHOUT_CLASSIFICATION	0.9999999301800381	WITHOUT_CLASSIFICATION	6.981996185956774E-8	DESIGN
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.999979331268863	WITHOUT_CLASSIFICATION	2.066873113707921E-5	DESIGN
// add the discriminator	WITHOUT_CLASSIFICATION	0.9999954797377252	WITHOUT_CLASSIFICATION	4.5202622748891575E-6	DESIGN
// add the primary key	WITHOUT_CLASSIFICATION	0.9999847885693817	WITHOUT_CLASSIFICATION	1.5211430618384514E-5	DESIGN
// delegate already handles PK columns	WITHOUT_CLASSIFICATION	0.9999991713723669	WITHOUT_CLASSIFICATION	8.286276331672195E-7	DESIGN
// we can't batch joined inserts, *especially* not if it is an identity insert; // nor can we batch statements where the expectation is based on an output param	WITHOUT_CLASSIFICATION	0.9999999837499962	WITHOUT_CLASSIFICATION	1.625000385379006E-8	DESIGN
// Render the SQL query	WITHOUT_CLASSIFICATION	0.9999007841210047	WITHOUT_CLASSIFICATION	9.921587899532437E-5	DESIGN
// Write the values of fields onto the prepared statement - we MUST use the state at the time the // insert was issued (cos of foreign key constraints). Not necessarily the object's current state	WITHOUT_CLASSIFICATION	0.9999941139653667	WITHOUT_CLASSIFICATION	5.886034633229546E-6	DESIGN
// TODO : shouldnt inserts be Expectations.NONE?	WITHOUT_CLASSIFICATION	0.9986192480327	DESIGN	0.0013807519673000443	WITHOUT_CLASSIFICATION
//don't bother trying to update, we know there is no row there yet	WITHOUT_CLASSIFICATION	0.9365375075601569	WITHOUT_CLASSIFICATION	0.06346249243984313	DESIGN
//if all fields are null, we might need to delete existing row	WITHOUT_CLASSIFICATION	0.9999821401440169	WITHOUT_CLASSIFICATION	1.7859855983049212E-5	DESIGN
//there is probably a row there, so try to update //if no rows were updated, we will find out	WITHOUT_CLASSIFICATION	0.9541883827636972	WITHOUT_CLASSIFICATION	0.04581161723630283	DESIGN
//note: updates to joined tables can't be batched...	WITHOUT_CLASSIFICATION	0.9999817531274978	WITHOUT_CLASSIFICATION	1.824687250217444E-5	DESIGN
// starting index	WITHOUT_CLASSIFICATION	0.999978869838704	WITHOUT_CLASSIFICATION	2.113016129610053E-5	DESIGN
//Now write the values of fields onto the prepared statement	WITHOUT_CLASSIFICATION	0.9985081785130935	WITHOUT_CLASSIFICATION	0.001491821486906434	DESIGN
// Write any appropriate versioning conditional parameters	WITHOUT_CLASSIFICATION	0.9999998586527572	WITHOUT_CLASSIFICATION	1.4134724273756114E-7	DESIGN
//Render the SQL query	WITHOUT_CLASSIFICATION	0.999783116212151	WITHOUT_CLASSIFICATION	2.1688378784898648E-4	DESIGN
// Do the key. The key is immutable so we can use the _current_ object state - not necessarily // the state at the time the delete was issued	WITHOUT_CLASSIFICATION	0.9999972307034956	WITHOUT_CLASSIFICATION	2.7692965044806725E-6	DESIGN
// We should use the _current_ object state (ie. after any updates that occurred during flush)	WITHOUT_CLASSIFICATION	0.9999965170267922	WITHOUT_CLASSIFICATION	3.4829732079780675E-6	DESIGN
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9997996409888137	WITHOUT_CLASSIFICATION	2.0035901118622629E-4	DESIGN
//note: dirtyFields==null means we had no snapshot, and we couldn't get one using select-before-update //	WITHOUT_CLASSIFICATION	0.9838645317151895	WITHOUT_CLASSIFICATION	0.01613546828481052	DESIGN
// more specifically : "datetime [op] ?" //      1) if the operator is MINUS, we really cannot determine //          the expected type as either another datetime or //          numeric would be valid //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.9877844707106848	WITHOUT_CLASSIFICATION	0.012215529289315168	DESIGN
// For the case of dynamic-update="true", we need to generate the UPDATE SQL	WITHOUT_CLASSIFICATION	0.9999872615843588	WITHOUT_CLASSIFICATION	1.2738415641253551E-5	DESIGN
// don't need to check laziness (dirty checking algorithm handles that)	WITHOUT_CLASSIFICATION	0.9819593043857592	WITHOUT_CLASSIFICATION	0.018040695614240883	DESIGN
// For the case of dynamic-update="false", or no snapshot, we use the static SQL	WITHOUT_CLASSIFICATION	0.9999980783113379	WITHOUT_CLASSIFICATION	1.9216886619977705E-6	DESIGN
// if not "get", then try "is"	WITHOUT_CLASSIFICATION	0.999969453867797	WITHOUT_CLASSIFICATION	3.0546132202998605E-5	DESIGN
// Now update only the tables with dirty properties (and the table with the version number)	WITHOUT_CLASSIFICATION	0.9999998934694208	WITHOUT_CLASSIFICATION	1.065305792495843E-7	DESIGN
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.99999857112329	WITHOUT_CLASSIFICATION	1.4288767099810794E-6	DESIGN
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.99999857112329	WITHOUT_CLASSIFICATION	1.4288767099810794E-6	DESIGN
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999999086668168	WITHOUT_CLASSIFICATION	9.133318314714767E-8	DESIGN
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999999086668168	WITHOUT_CLASSIFICATION	9.133318314714767E-8	DESIGN
// not supported	WITHOUT_CLASSIFICATION	0.999293496909534	WITHOUT_CLASSIFICATION	7.06503090466126E-4	DESIGN
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9997996409888137	WITHOUT_CLASSIFICATION	2.0035901118622629E-4	DESIGN
// we need to utilize dynamic delete statements	WITHOUT_CLASSIFICATION	0.998585656607075	WITHOUT_CLASSIFICATION	0.0014143433929250174	DESIGN
// otherwise, utilize the static delete statements	WITHOUT_CLASSIFICATION	0.9999609025174395	WITHOUT_CLASSIFICATION	3.90974825604719E-5	DESIGN
//just a performance opt!	WITHOUT_CLASSIFICATION	0.9999867716447838	WITHOUT_CLASSIFICATION	1.3228355216231645E-5	DESIGN
//just a performance opt!	WITHOUT_CLASSIFICATION	0.9999867716447838	WITHOUT_CLASSIFICATION	1.3228355216231645E-5	DESIGN
//all joins join to the pk of the driving table	WITHOUT_CLASSIFICATION	0.9999930077136191	WITHOUT_CLASSIFICATION	6.992286380958421E-6	DESIGN
//notice that we skip the first table; it is the driving table!	WITHOUT_CLASSIFICATION	0.9999727919521955	WITHOUT_CLASSIFICATION	2.720804780456779E-5	DESIGN
//we can inner join to superclass tables (the row MUST be there) //we can never inner join to subclass tables	WITHOUT_CLASSIFICATION	0.9997773461344143	WITHOUT_CLASSIFICATION	2.2265386558573664E-4	DESIGN
//skip the driving table	WITHOUT_CLASSIFICATION	0.9999948833060374	WITHOUT_CLASSIFICATION	5.116693962614285E-6	DESIGN
//get 'em in the right order (not that it really matters)	WITHOUT_CLASSIFICATION	0.9880729366335668	WITHOUT_CLASSIFICATION	0.011927063366433309	DESIGN
// here, we work under the following assumptions: //      ------------ valid cases -------------------------------------- //      1) datetime + {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      2) datetime - datetime : always results in a DOUBLE //      3) datetime - {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      ------------ invalid cases ------------------------------------ //      4) datetime + datetime //      5) {something other than datetime} - datetime //      6) datetime * {any type} //      7) datetime / {any type} //      8) {any type} / datetime // doing so allows us to properly handle parameters as either the left // or right side here in the majority of cases	WITHOUT_CLASSIFICATION	0.9758953580801932	WITHOUT_CLASSIFICATION	0.024104641919806796	DESIGN
//render the where and from parts	WITHOUT_CLASSIFICATION	0.9996957182049127	WITHOUT_CLASSIFICATION	3.0428179508729564E-4	DESIGN
//we *could* regerate this inside each called method!	WITHOUT_CLASSIFICATION	0.9880726358872234	WITHOUT_CLASSIFICATION	0.011927364112776628	DESIGN
//now render the joins	WITHOUT_CLASSIFICATION	0.9994150265044103	WITHOUT_CLASSIFICATION	5.849734955897378E-4	DESIGN
// This will add the new from element to the origin.	WITHOUT_CLASSIFICATION	0.9998669122785413	WITHOUT_CLASSIFICATION	1.3308772145870533E-4	DESIGN
//now render the select clause	WITHOUT_CLASSIFICATION	0.9999594646533017	WITHOUT_CLASSIFICATION	4.05353466983256E-5	DESIGN
//now tie it all together	WITHOUT_CLASSIFICATION	0.9999953818890863	WITHOUT_CLASSIFICATION	4.618110913678731E-6	DESIGN
//insert/update/delete SQL	WITHOUT_CLASSIFICATION	0.999985190800859	WITHOUT_CLASSIFICATION	1.4809199141140427E-5	DESIGN
//select SQL	WITHOUT_CLASSIFICATION	0.9999414652956445	WITHOUT_CLASSIFICATION	5.853470435541692E-5	DESIGN
//no need to check laziness, dirty checking handles that	WITHOUT_CLASSIFICATION	0.9878886128675709	WITHOUT_CLASSIFICATION	0.012111387132429052	DESIGN
// Fully resolve the map reference, create implicit joins.	WITHOUT_CLASSIFICATION	0.9986601216826344	WITHOUT_CLASSIFICATION	0.0013398783173655777	DESIGN
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999861219453511	WITHOUT_CLASSIFICATION	1.3878054648913124E-5	DESIGN
// The basic implementation is to simply use the node's text	WITHOUT_CLASSIFICATION	0.9999868925465026	WITHOUT_CLASSIFICATION	1.310745349747687E-5	DESIGN
// for dialects which are known to not support ANSI-SQL row-value-constructor syntax, // we should mutate the tree.	WITHOUT_CLASSIFICATION	0.9999012326842235	WITHOUT_CLASSIFICATION	9.876731577661486E-5	DESIGN
// Due to the complexity in initializing the SelectClause, do not generate one here. // If it is not found; simply return null... // // Also, do not cache since it gets generated well after we are created.	WITHOUT_CLASSIFICATION	0.9999997625000192	WITHOUT_CLASSIFICATION	2.3749998081304285E-7	DESIGN
// check the version unsaved-value, if appropriate	WITHOUT_CLASSIFICATION	0.9999999785961259	WITHOUT_CLASSIFICATION	2.1403874109937257E-8	DESIGN
// let this take precedence if defined, since it works for // assigned identifiers	WITHOUT_CLASSIFICATION	0.9999999994154493	WITHOUT_CLASSIFICATION	5.84550850781891E-10	DESIGN
// check the id unsaved-value	WITHOUT_CLASSIFICATION	0.9999951250721073	WITHOUT_CLASSIFICATION	4.874927892669129E-6	DESIGN
// check to see if it is in the second-level cache	WITHOUT_CLASSIFICATION	0.9999871402960326	WITHOUT_CLASSIFICATION	1.2859703967455545E-5	DESIGN
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9994899601669325	WITHOUT_CLASSIFICATION	5.100398330676239E-4	DESIGN
// For property references generate <tablealias>.<columnname> as <projectionalias>	WITHOUT_CLASSIFICATION	0.9999997329230204	WITHOUT_CLASSIFICATION	2.6707697969554283E-7	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999918173872538	WITHOUT_CLASSIFICATION	8.182612746188953E-6	DESIGN
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999482125632299	WITHOUT_CLASSIFICATION	5.1787436770083274E-5	DESIGN
//force immediate execution of the insert	WITHOUT_CLASSIFICATION	0.9999997237514543	WITHOUT_CLASSIFICATION	2.762485456815554E-7	DESIGN
// If this from element is a collection and the path is a collection property (maxIndex, etc.) then // generate a sub-query.	WITHOUT_CLASSIFICATION	0.9999997559849384	WITHOUT_CLASSIFICATION	2.4401506150718164E-7	DESIGN
// entities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999823953291321	WITHOUT_CLASSIFICATION	1.7604670867814906E-5	DESIGN
// collections ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999088043394	WITHOUT_CLASSIFICATION	9.119566048274715E-8	DESIGN
//cannot occur	WITHOUT_CLASSIFICATION	0.9999584939744831	WITHOUT_CLASSIFICATION	4.1506025516843655E-5	DESIGN
//cannot occur	WITHOUT_CLASSIFICATION	0.9999584939744831	WITHOUT_CLASSIFICATION	4.1506025516843655E-5	DESIGN
// only carry on if the method has no parameters	WITHOUT_CLASSIFICATION	0.9999999482880791	WITHOUT_CLASSIFICATION	5.17119208153339E-8	DESIGN
// try "get"	WITHOUT_CLASSIFICATION	0.9999963506763686	WITHOUT_CLASSIFICATION	3.649323631441809E-6	DESIGN
// do nothing...	WITHOUT_CLASSIFICATION	0.9979119864594617	WITHOUT_CLASSIFICATION	0.0020880135405382445	DESIGN
// do nothing...	WITHOUT_CLASSIFICATION	0.9979119864594617	WITHOUT_CLASSIFICATION	0.0020880135405382445	DESIGN
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9999883780753486	WITHOUT_CLASSIFICATION	1.162192465138889E-5	DESIGN
// this page intentionally left blank :)	WITHOUT_CLASSIFICATION	0.9998723934077735	WITHOUT_CLASSIFICATION	1.2760659222657258E-4	DESIGN
// do not do anything	WITHOUT_CLASSIFICATION	0.9999220948950729	WITHOUT_CLASSIFICATION	7.790510492717245E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9959144787197332	WITHOUT_CLASSIFICATION	0.004085521280266773	DESIGN
// ignore	WITHOUT_CLASSIFICATION	0.9999972509027046	WITHOUT_CLASSIFICATION	2.7490972954077436E-6	DESIGN
//cant instantiate	WITHOUT_CLASSIFICATION	0.9998136478645653	WITHOUT_CLASSIFICATION	1.8635213543475993E-4	DESIGN
//if it is a property of an embedded component, invoke on the "identifier"	WITHOUT_CLASSIFICATION	0.9998815325253105	WITHOUT_CLASSIFICATION	1.1846747468953432E-4	DESIGN
// otherwise:	WITHOUT_CLASSIFICATION	0.99995283632472	WITHOUT_CLASSIFICATION	4.71636752800724E-5	DESIGN
// skip finalize methods	WITHOUT_CLASSIFICATION	0.9998111265313826	WITHOUT_CLASSIFICATION	1.8887346861734512E-4	DESIGN
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.805042474076129	WITHOUT_CLASSIFICATION	0.19495752592387108	DESIGN
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.805042474076129	WITHOUT_CLASSIFICATION	0.19495752592387108	DESIGN
// HHH-2481 make sure the callback gets cleared, otherwise the instance stays in a static thread local.	WITHOUT_CLASSIFICATION	0.9735060460894331	WITHOUT_CLASSIFICATION	0.02649395391056694	DESIGN
// while constructor is running	WITHOUT_CLASSIFICATION	0.9971028326318329	WITHOUT_CLASSIFICATION	0.002897167368167195	DESIGN
// while constructor is running	WITHOUT_CLASSIFICATION	0.9971028326318329	WITHOUT_CLASSIFICATION	0.002897167368167195	DESIGN
// note: interface is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9736321549606506	WITHOUT_CLASSIFICATION	0.02636784503934945	DESIGN
// interfaces // arguments	WITHOUT_CLASSIFICATION	0.9997811167016267	WITHOUT_CLASSIFICATION	2.18883298373296E-4	DESIGN
//TODO!	WITHOUT_CLASSIFICATION	0.5711373436374432	DESIGN	0.4288626563625569	WITHOUT_CLASSIFICATION
// Get the caller	WITHOUT_CLASSIFICATION	0.9999978128461534	WITHOUT_CLASSIFICATION	2.1871538466626687E-6	DESIGN
// Get the caller principals	WITHOUT_CLASSIFICATION	0.9999979117153498	WITHOUT_CLASSIFICATION	2.088284650123325E-6	DESIGN
//private static final Alias DEFAULT_ALIAS = new Alias(10, null);	WITHOUT_CLASSIFICATION	0.9999999731809494	WITHOUT_CLASSIFICATION	2.6819050688179508E-8	DESIGN
// Needed to bump this up to DotNode, because that is the only thing which currently // knows about the property-ref path in the correct format; it is either this, or // recurse over the DotNodes constructing the property path just like DotNode does // internally	WITHOUT_CLASSIFICATION	0.9993137739701051	WITHOUT_CLASSIFICATION	6.862260298949616E-4	DESIGN
//if the identifier is quoted, remove the quotes	WITHOUT_CLASSIFICATION	0.9999986414324329	WITHOUT_CLASSIFICATION	1.3585675669969246E-6	DESIGN
//truncate the identifier to the max alias length, less the suffix length	WITHOUT_CLASSIFICATION	0.9999999441208014	WITHOUT_CLASSIFICATION	5.587919870124051E-8	DESIGN
//full joins are not supported.. yet!	WITHOUT_CLASSIFICATION	0.9999453787783628	WITHOUT_CLASSIFICATION	5.4621221637299894E-5	DESIGN
// null is not considered the same type as Integer. //$NON-NLS-1 //$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999999898366232	WITHOUT_CLASSIFICATION	1.0163376846269465E-8	DESIGN
// the outerJoinsAfterWhere needs to come before where clause to properly // handle dynamic filters	WITHOUT_CLASSIFICATION	0.9999266693962285	WITHOUT_CLASSIFICATION	7.333060377154307E-5	DESIGN
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999526688317352	WITHOUT_CLASSIFICATION	4.733116826478444E-5	DESIGN
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999526688317352	WITHOUT_CLASSIFICATION	4.733116826478444E-5	DESIGN
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999526688317352	WITHOUT_CLASSIFICATION	4.733116826478444E-5	DESIGN
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999526688317352	WITHOUT_CLASSIFICATION	4.733116826478444E-5	DESIGN
// strip off any leading 'and' token	WITHOUT_CLASSIFICATION	0.9999975626902083	WITHOUT_CLASSIFICATION	2.4373097917345482E-6	DESIGN
// if the condition is not already there...	WITHOUT_CLASSIFICATION	0.9999560042801159	WITHOUT_CLASSIFICATION	4.399571988404101E-5	DESIGN
//dontSpace.add("'");	WITHOUT_CLASSIFICATION	0.9999424001214711	WITHOUT_CLASSIFICATION	5.7599878529057725E-5	DESIGN
//for MySQL	WITHOUT_CLASSIFICATION	0.9999049964044461	WITHOUT_CLASSIFICATION	9.500359555391094E-5	DESIGN
//HashMap columnsUnique = new HashMap();	WITHOUT_CLASSIFICATION	0.9999998806551281	WITHOUT_CLASSIFICATION	1.193448719184789E-7	DESIGN
//null caused some problems	WITHOUT_CLASSIFICATION	0.9812195984733139	WITHOUT_CLASSIFICATION	0.0187804015266861	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.9993844224900065	WITHOUT_CLASSIFICATION	6.155775099936293E-4	DESIGN
//not sure if this would ever be null but wanted to be careful	WITHOUT_CLASSIFICATION	0.9451495058621752	WITHOUT_CLASSIFICATION	0.054850494137824855	DESIGN
//even on inverse="true"	WITHOUT_CLASSIFICATION	0.9999788815822981	WITHOUT_CLASSIFICATION	2.111841770193303E-5	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.9993844224900065	WITHOUT_CLASSIFICATION	6.155775099936293E-4	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.9993844224900065	WITHOUT_CLASSIFICATION	6.155775099936293E-4	DESIGN
// If true then execute db updates, otherwise just generate and display updates	WITHOUT_CLASSIFICATION	0.9999999711255881	WITHOUT_CLASSIFICATION	2.8874411881606562E-8	DESIGN
// we only release the connection	WITHOUT_CLASSIFICATION	0.9999997310383764	WITHOUT_CLASSIFICATION	2.6896162363850964E-7	DESIGN
// deprecated option...	WITHOUT_CLASSIFICATION	0.9971199219888643	WITHOUT_CLASSIFICATION	0.0028800780111355984	DESIGN
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999246397440222	WITHOUT_CLASSIFICATION	7.536025597777172E-5	DESIGN
//actually, this last test is probably unnecessary, since  //beforeCompletion() doesn't get called during rollback	WITHOUT_CLASSIFICATION	0.9999928411720884	WITHOUT_CLASSIFICATION	7.158827911556059E-6	DESIGN
// this one only really needed for badly-behaved applications! // (if the TransactionManager has a Sychronization registered, // its a noop) // (actually we do need it for downgrading locks)	WITHOUT_CLASSIFICATION	0.9999999999147895	WITHOUT_CLASSIFICATION	8.521051552762208E-11	DESIGN
// Create an DotNode AST for the path and resolve it.	WITHOUT_CLASSIFICATION	0.9999999081632814	WITHOUT_CLASSIFICATION	9.18367185201948E-8	DESIGN
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999246397440222	WITHOUT_CLASSIFICATION	7.536025597777172E-5	DESIGN
//if we could not register a synchronization, //do the before/after completion callbacks //ourself (but we need to let jdbcContext //know that this is what we are going to //do, so it doesn't keep trying to register //synchronizations)	WITHOUT_CLASSIFICATION	0.9999997677069894	WITHOUT_CLASSIFICATION	2.3229301048148371E-7	DESIGN
// swallow it, and continue to roll back JTA transaction	WITHOUT_CLASSIFICATION	0.9999978844782272	WITHOUT_CLASSIFICATION	2.1155217727889694E-6	DESIGN
// so the transaction is already rolled back, by JTA spec	WITHOUT_CLASSIFICATION	0.9999999436966168	WITHOUT_CLASSIFICATION	5.630338310091979E-8	DESIGN
// this method is a noop if there is a Synchronization!	WITHOUT_CLASSIFICATION	0.998879783884844	WITHOUT_CLASSIFICATION	0.0011202161151560618	DESIGN
// two conditions where we need to transform this to a theta-join syntax: //      1) 'elem' is the "root from-element" in correlated subqueries //      2) The DotNode.useThetaStyleImplicitJoins has been set to true //          and 'elem' represents an implicit join	WITHOUT_CLASSIFICATION	0.9999976700635104	WITHOUT_CLASSIFICATION	2.3299364896972526E-6	DESIGN
// WebSphere, however, is not a sane JEE/JTA container...	WITHOUT_CLASSIFICATION	0.9979988119902617	WITHOUT_CLASSIFICATION	0.002001188009738262	DESIGN
// for sane JEE/JTA containers, the transaction itself functions as its identifier...	WITHOUT_CLASSIFICATION	0.9999993656834111	WITHOUT_CLASSIFICATION	6.343165888540391E-7	DESIGN
//swallow, the transaction was finished	WITHOUT_CLASSIFICATION	0.9999998643750144	WITHOUT_CLASSIFICATION	1.3562498561371084E-7	DESIGN
// all AliasToEntityMapResultTransformer are considered equal ~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999938340265	WITHOUT_CLASSIFICATION	6.165973497517357E-9	DESIGN
// Create the join element under the from element.	WITHOUT_CLASSIFICATION	0.9999958519858516	WITHOUT_CLASSIFICATION	4.148014148421832E-6	DESIGN
// all DistinctRootEntityResultTransformer are considered equal ~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999996237969	WITHOUT_CLASSIFICATION	3.762031055957636E-9	DESIGN
// map of EntityMode -> Tuplizer	WITHOUT_CLASSIFICATION	0.9999989154070754	WITHOUT_CLASSIFICATION	1.0845929245140958E-6	DESIGN
// this is a virtual id property...	WITHOUT_CLASSIFICATION	0.9970533579035037	WITHOUT_CLASSIFICATION	0.00294664209649622	DESIGN
//this one needed only for guessEntityMode()	WITHOUT_CLASSIFICATION	0.998913776333837	WITHOUT_CLASSIFICATION	0.001086223666162985	DESIGN
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999717792765552	WITHOUT_CLASSIFICATION	2.8220723444853374E-5	DESIGN
// todo : move this to SF per HHH-3517; also see HHH-1907 and ComponentMetamodel	WITHOUT_CLASSIFICATION	0.79947534034444	WITHOUT_CLASSIFICATION	0.20052465965555993	DESIGN
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999947356466099	WITHOUT_CLASSIFICATION	5.264353390129188E-6	DESIGN
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999919691303069	WITHOUT_CLASSIFICATION	8.030869693123611E-6	DESIGN
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999962837167168	WITHOUT_CLASSIFICATION	3.716283283322517E-6	DESIGN
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999919691303069	WITHOUT_CLASSIFICATION	8.030869693123611E-6	DESIGN
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999999908041807	WITHOUT_CLASSIFICATION	9.195819344955144E-9	DESIGN
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.99751234543628	WITHOUT_CLASSIFICATION	0.0024876545637200157	DESIGN
//	WITHOUT_CLASSIFICATION	0.9959144787197332	WITHOUT_CLASSIFICATION	0.004085521280266773	DESIGN
// cached for efficiency...	WITHOUT_CLASSIFICATION	0.9997429173253748	WITHOUT_CLASSIFICATION	2.570826746252669E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9959144787197332	WITHOUT_CLASSIFICATION	0.004085521280266773	DESIGN
//	WITHOUT_CLASSIFICATION	0.9959144787197332	WITHOUT_CLASSIFICATION	0.004085521280266773	DESIGN
//it was not embedded, so the argument is just an id	WITHOUT_CLASSIFICATION	0.9998610694542327	WITHOUT_CLASSIFICATION	1.389305457672657E-4	DESIGN
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999947356466099	WITHOUT_CLASSIFICATION	5.264353390129188E-6	DESIGN
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999962837167168	WITHOUT_CLASSIFICATION	3.716283283322517E-6	DESIGN
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999999908041807	WITHOUT_CLASSIFICATION	9.195819344955144E-9	DESIGN
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999974213066363	WITHOUT_CLASSIFICATION	2.5786933636715296E-6	DESIGN
//return currentId;	WITHOUT_CLASSIFICATION	0.9999664804726552	WITHOUT_CLASSIFICATION	3.351952734482461E-5	DESIGN
//reset the id	WITHOUT_CLASSIFICATION	0.9996848399055323	WITHOUT_CLASSIFICATION	3.151600944677444E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9959144787197332	WITHOUT_CLASSIFICATION	0.004085521280266773	DESIGN
//reset the version	WITHOUT_CLASSIFICATION	0.9999797794933359	WITHOUT_CLASSIFICATION	2.022050666415373E-5	DESIGN
// the default is to simply not lazy fetch properties for now...	WITHOUT_CLASSIFICATION	0.9994885852818064	WITHOUT_CLASSIFICATION	5.114147181935173E-4	DESIGN
// Add the second join, the one that ends in the destination table.	WITHOUT_CLASSIFICATION	0.9999990430118658	WITHOUT_CLASSIFICATION	9.569881341589983E-7	DESIGN
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999861219453511	WITHOUT_CLASSIFICATION	1.3878054648913124E-5	DESIGN
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.99751234543628	WITHOUT_CLASSIFICATION	0.0024876545637200157	DESIGN
// determine the id getter and setter methods from the proxy interface (if any) // determine all interfaces needed by the resulting proxy	WITHOUT_CLASSIFICATION	0.9983714473025479	WITHOUT_CLASSIFICATION	0.001628552697452181	DESIGN
//	WITHOUT_CLASSIFICATION	0.9959144787197332	WITHOUT_CLASSIFICATION	0.004085521280266773	DESIGN
//not final because proxy factory creation can fail	WITHOUT_CLASSIFICATION	0.9996966999178738	WITHOUT_CLASSIFICATION	3.0330008212622607E-4	DESIGN
// superclass entity-name	WITHOUT_CLASSIFICATION	0.9999876096512512	WITHOUT_CLASSIFICATION	1.239034874876405E-5	DESIGN
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999861219453511	WITHOUT_CLASSIFICATION	1.3878054648913124E-5	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999918173872538	WITHOUT_CLASSIFICATION	8.182612746188953E-6	DESIGN
//init the aliases, after initing the constructornode	WITHOUT_CLASSIFICATION	0.9999575412717278	WITHOUT_CLASSIFICATION	4.245872827222647E-5	DESIGN
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999861219453511	WITHOUT_CLASSIFICATION	1.3878054648913124E-5	DESIGN
// legacy behavior (with no abstract attribute specified)	WITHOUT_CLASSIFICATION	0.9999999057338315	WITHOUT_CLASSIFICATION	9.426616848081813E-8	DESIGN
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999976928006393	WITHOUT_CLASSIFICATION	2.3071993606588857E-6	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999918173872538	WITHOUT_CLASSIFICATION	8.182612746188953E-6	DESIGN
//note: this affects the return value!	WITHOUT_CLASSIFICATION	0.9998711062010925	WITHOUT_CLASSIFICATION	1.2889379890734622E-4	DESIGN
// Need to account for allowable '_' within the variant	WITHOUT_CLASSIFICATION	0.9999944387096052	WITHOUT_CLASSIFICATION	5.561290394710448E-6	DESIGN
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999983789716257	WITHOUT_CLASSIFICATION	1.6210283742728897E-6	DESIGN
// Collection Types:	WITHOUT_CLASSIFICATION	0.9999994116635001	WITHOUT_CLASSIFICATION	5.883364998679442E-7	DESIGN
// convenience methods relating to operations across arrays of types...	WITHOUT_CLASSIFICATION	0.9997967342406651	WITHOUT_CLASSIFICATION	2.0326575933499798E-4	DESIGN
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999769505212709	WITHOUT_CLASSIFICATION	2.3049478729021573E-5	DESIGN
//Blobs are ignored by merge()	WITHOUT_CLASSIFICATION	0.9999855529093128	WITHOUT_CLASSIFICATION	1.4447090687254194E-5	DESIGN
//value is the entity name	WITHOUT_CLASSIFICATION	0.9993061113732076	WITHOUT_CLASSIFICATION	6.938886267924113E-4	DESIGN
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.99448814685864	WITHOUT_CLASSIFICATION	0.0055118531413600545	DESIGN
// generate id select fragment and then property select fragment for // each expression, just like generateSelectFragments().	WITHOUT_CLASSIFICATION	0.999999998540703	WITHOUT_CLASSIFICATION	1.4592970325060703E-9	DESIGN
//TODO!	WITHOUT_CLASSIFICATION	0.5711373436374432	DESIGN	0.4288626563625569	WITHOUT_CLASSIFICATION
//xml is the entity name	WITHOUT_CLASSIFICATION	0.9975270384707133	WITHOUT_CLASSIFICATION	0.002472961529286548	DESIGN
//special case ... this is the leaf of the containment graph, even though not immutable	WITHOUT_CLASSIFICATION	0.9999900531940445	WITHOUT_CLASSIFICATION	9.946805955436307E-6	DESIGN
//tolerates nulls	WITHOUT_CLASSIFICATION	0.9999941992942688	WITHOUT_CLASSIFICATION	5.80070573121735E-6	DESIGN
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9997293129301614	WITHOUT_CLASSIFICATION	2.7068706983862E-4	DESIGN
// metaType is assumed to be single-column type	WITHOUT_CLASSIFICATION	0.9999040336695127	WITHOUT_CLASSIFICATION	9.59663304872646E-5	DESIGN
// Get all the select expressions (that we just generated) and render the select.	WITHOUT_CLASSIFICATION	0.9999995364321718	WITHOUT_CLASSIFICATION	4.6356782829806944E-7	DESIGN
// Look through the FromElement's children to find any collections of values that should be fetched...	WITHOUT_CLASSIFICATION	0.9999990354133823	WITHOUT_CLASSIFICATION	9.645866176871086E-7	DESIGN
//return AssociationType.FOREIGN_KEY_TO_PARENT; //this is better but causes a transient object exception...	WITHOUT_CLASSIFICATION	0.6610648759926105	WITHOUT_CLASSIFICATION	0.33893512400738957	DESIGN
// Use the lower case function name. // Remember whether we're in a SELECT clause or not.	WITHOUT_CLASSIFICATION	0.9999998856413955	WITHOUT_CLASSIFICATION	1.1435860447621646E-7	DESIGN
// IDENT might be the name of a class.	WITHOUT_CLASSIFICATION	0.9999971151340399	WITHOUT_CLASSIFICATION	2.88486596012669E-6	DESIGN
//TODO!!!	WITHOUT_CLASSIFICATION	0.8536796242545734	DESIGN	0.14632037574542656	WITHOUT_CLASSIFICATION
//st.setTimestamp( index,  new Timestamp( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9999908551038506	WITHOUT_CLASSIFICATION	9.144896149437605E-6	DESIGN
//st.setDate( index,  new Date( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9999896288021366	WITHOUT_CLASSIFICATION	1.0371197863374735E-5	DESIGN
// both are Timestamps	WITHOUT_CLASSIFICATION	0.999999789805966	WITHOUT_CLASSIFICATION	2.1019403404491535E-7	DESIGN
// at least one is a plain old Date	WITHOUT_CLASSIFICATION	0.9999973809883398	WITHOUT_CLASSIFICATION	2.61901166017116E-6	DESIGN
//noop	WITHOUT_CLASSIFICATION	0.9999060237638733	WITHOUT_CLASSIFICATION	9.397623612669691E-5	DESIGN
// if the corresponding SQL value is NULL, the reader we got is NULL as well	WITHOUT_CLASSIFICATION	0.9999991696901064	WITHOUT_CLASSIFICATION	8.303098936647803E-7	DESIGN
// Fetch Reader content up to the end - and put characters in a StringBuffer	WITHOUT_CLASSIFICATION	0.9999386562447772	WITHOUT_CLASSIFICATION	6.134375522283202E-5	DESIGN
// Return StringBuffer content as a large String	WITHOUT_CLASSIFICATION	0.9999980302686108	WITHOUT_CLASSIFICATION	1.969731389166856E-6	DESIGN
//or Types.LONGVARCHAR?	WITHOUT_CLASSIFICATION	0.9951508522539542	WITHOUT_CLASSIFICATION	0.004849147746045876	DESIGN
//Not called at runtime so doesn't matter if its slow :)	WITHOUT_CLASSIFICATION	0.9978124155228928	WITHOUT_CLASSIFICATION	0.0021875844771072203	DESIGN
//TODO	WITHOUT_CLASSIFICATION	0.9955665245771501	WITHOUT_CLASSIFICATION	0.004433475422849927	DESIGN
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999996489249107	WITHOUT_CLASSIFICATION	3.5107508935322144E-7	DESIGN
//different nullability rules for pk/fk	WITHOUT_CLASSIFICATION	0.9979549085465729	WITHOUT_CLASSIFICATION	0.0020450914534272287	DESIGN
//cache this	WITHOUT_CLASSIFICATION	0.9885758519202607	WITHOUT_CLASSIFICATION	0.01142414807973937	DESIGN
//only really need new array during semiresolve!	WITHOUT_CLASSIFICATION	0.9998626214540555	WITHOUT_CLASSIFICATION	1.3737854594451495E-4	DESIGN
// Forcefully remove leading ands from where fragments; the grammar will // handle adding them	WITHOUT_CLASSIFICATION	0.9997431197877593	WITHOUT_CLASSIFICATION	2.5688021224070707E-4	DESIGN
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.8414174172328133	DESIGN	0.15858258276718668	WITHOUT_CLASSIFICATION
// Create a new FILTERS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999983184056004	WITHOUT_CLASSIFICATION	1.6815943996097676E-6	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999918173872538	WITHOUT_CLASSIFICATION	8.182612746188953E-6	DESIGN
//public Object instantiate(Object parent, SessionImplementor session) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9173498489580942	WITHOUT_CLASSIFICATION	0.08265015104190576	DESIGN
//nothing to do	WITHOUT_CLASSIFICATION	0.9999573231556327	WITHOUT_CLASSIFICATION	4.267684436733404E-5	DESIGN
//nothing to do	WITHOUT_CLASSIFICATION	0.9999573231556327	WITHOUT_CLASSIFICATION	4.267684436733404E-5	DESIGN
// VersionType impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //      Note : simply returns null for seed() and next() as the only known //      application of binary types for versioning is for use with the //      TIMESTAMP datatype supported by Sybase and SQL Server, which //      are completely db-generated values...	WITHOUT_CLASSIFICATION	0.9999998233500083	WITHOUT_CLASSIFICATION	1.7664999181676314E-7	DESIGN
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999769505212709	WITHOUT_CLASSIFICATION	2.3049478729021573E-5	DESIGN
//not really necessary, I guess...	WITHOUT_CLASSIFICATION	0.9914631012467933	WITHOUT_CLASSIFICATION	0.00853689875320681	DESIGN
//Clobs are ignored by merge() operation	WITHOUT_CLASSIFICATION	0.9999941740582237	WITHOUT_CLASSIFICATION	5.8259417763648115E-6	DESIGN
// we do not have to worry about queued additions to uninitialized // collections, since they can only occur for inverse collections!	WITHOUT_CLASSIFICATION	0.9999987177349726	WITHOUT_CLASSIFICATION	1.282265027398608E-6	DESIGN
// collections cannot be compared	WITHOUT_CLASSIFICATION	0.9999999920203433	WITHOUT_CLASSIFICATION	7.979656652963088E-9	DESIGN
//remember the uk value	WITHOUT_CLASSIFICATION	0.9999181269602629	WITHOUT_CLASSIFICATION	8.187303973705636E-5	DESIGN
//NOOP	WITHOUT_CLASSIFICATION	0.9998222909181009	WITHOUT_CLASSIFICATION	1.777090818991476E-4	DESIGN
//processCollectionProperty(token, q.getCollectionPersister(collectionRole), collectionName);	WITHOUT_CLASSIFICATION	0.999999992646698	WITHOUT_CLASSIFICATION	7.353301954049168E-9	DESIGN
//we must use the "remembered" uk value, since it is  //not available from the EntityEntry during assembly	WITHOUT_CLASSIFICATION	0.9999988414213827	WITHOUT_CLASSIFICATION	1.1585786172149298E-6	DESIGN
// collections don't dirty an unversioned parent entity	WITHOUT_CLASSIFICATION	0.9997255134405397	WITHOUT_CLASSIFICATION	2.744865594602716E-4	DESIGN
// return false;	WITHOUT_CLASSIFICATION	0.9999971045368751	WITHOUT_CLASSIFICATION	2.8954631249405235E-6	DESIGN
// This just handles a particular case of component // projection, perhaps get rid of it and throw an exception	WITHOUT_CLASSIFICATION	0.9563913370067528	WITHOUT_CLASSIFICATION	0.043608662993247276	DESIGN
//NOTE: we avoid joining to the next table if the named property is just the foreign key value	WITHOUT_CLASSIFICATION	0.9999291526886528	WITHOUT_CLASSIFICATION	7.084731134719276E-5	DESIGN
// the key is the owning entity itself, so get the ID from the key	WITHOUT_CLASSIFICATION	0.9997284288567392	WITHOUT_CLASSIFICATION	2.715711432607709E-4	DESIGN
// if the original is a PersistentCollection, and that original // was not flagged as dirty, then reset the target's dirty flag // here after the copy operation. // </p> // One thing to be careful of here is a "bare" original collection // in which case we should never ever ever reset the dirty flag // on the target because we simply do not know...	WITHOUT_CLASSIFICATION	0.9999987587072174	WITHOUT_CLASSIFICATION	1.2412927825004512E-6	DESIGN
//ignore subselect keywords	WITHOUT_CLASSIFICATION	0.9999987000613778	WITHOUT_CLASSIFICATION	1.29993862211956E-6	DESIGN
// copy elements into newly empty target collection	WITHOUT_CLASSIFICATION	0.9999988801313129	WITHOUT_CLASSIFICATION	1.1198686870984473E-6	DESIGN
// for a null target, or a target which is the same as the original, we // need to put the merged elements in a new collection	WITHOUT_CLASSIFICATION	0.9999999342170934	WITHOUT_CLASSIFICATION	6.578290664039809E-8	DESIGN
// by default just use an unanticipated capacity since we don't // know how to extract the capacity to use from original here...	WITHOUT_CLASSIFICATION	0.8986256038066506	WITHOUT_CLASSIFICATION	0.10137439619334951	DESIGN
// get the elements back into the target making sure to handle dirty flag	WITHOUT_CLASSIFICATION	0.9990474693882538	WITHOUT_CLASSIFICATION	9.52530611746296E-4	DESIGN
// check if collection is currently being loaded	WITHOUT_CLASSIFICATION	0.9999988236889112	WITHOUT_CLASSIFICATION	1.1763110887372391E-6	DESIGN
// check if it is already completely loaded, but unowned	WITHOUT_CLASSIFICATION	0.9999999040202021	WITHOUT_CLASSIFICATION	9.597979785023168E-8	DESIGN
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999472308727265	WITHOUT_CLASSIFICATION	5.2769127273469124E-5	DESIGN
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.8414174172328133	DESIGN	0.15858258276718668	WITHOUT_CLASSIFICATION
// create a new collection wrapper, to be initialized later	WITHOUT_CLASSIFICATION	0.9999999560786469	WITHOUT_CLASSIFICATION	4.392135311873906E-8	DESIGN
// Some JDBC drivers erroneously return an empty array here for a null DB value :/	WITHOUT_CLASSIFICATION	0.9999981233624867	WITHOUT_CLASSIFICATION	1.8766375132414925E-6	DESIGN
// our column span is the number of columns in the PK	WITHOUT_CLASSIFICATION	0.9999995017500214	WITHOUT_CLASSIFICATION	4.982499786172392E-7	DESIGN
//cannot batch fetch by unique key (property-ref associations)	WITHOUT_CLASSIFICATION	0.999999275329321	WITHOUT_CLASSIFICATION	7.246706788711973E-7	DESIGN
// we already know current is not null...	WITHOUT_CLASSIFICATION	0.9994482396712019	WITHOUT_CLASSIFICATION	5.517603287980911E-4	DESIGN
// the ids are fully resolved, so compare them with isDirty(), not isModified()	WITHOUT_CLASSIFICATION	0.9993203333506814	WITHOUT_CLASSIFICATION	6.796666493185873E-4	DESIGN
//the owner of the association is not the owner of the id	WITHOUT_CLASSIFICATION	0.9999252448138393	WITHOUT_CLASSIFICATION	7.475518616074413E-5	DESIGN
// ----------------------------------------------------------- Constructors	WITHOUT_CLASSIFICATION	0.9999982323570423	WITHOUT_CLASSIFICATION	1.7676429576873635E-6	DESIGN
// ----------------------------------------------------- Instance Variables	WITHOUT_CLASSIFICATION	0.9999999925910432	WITHOUT_CLASSIFICATION	7.4089568059644154E-9	DESIGN
//	WITHOUT_CLASSIFICATION	0.9959144787197332	WITHOUT_CLASSIFICATION	0.004085521280266773	DESIGN
// --------------------------------------------------------- Public Methods	WITHOUT_CLASSIFICATION	0.999997236604885	WITHOUT_CLASSIFICATION	2.7633951150525464E-6	DESIGN
// Compare the two maps for equality	WITHOUT_CLASSIFICATION	0.9999999777299855	WITHOUT_CLASSIFICATION	2.2270014492224046E-8	DESIGN
// Simple tests that require no synchronization	WITHOUT_CLASSIFICATION	0.9999999845924976	WITHOUT_CLASSIFICATION	1.5407502425614824E-8	DESIGN
//Sybase fail if we don't do that, sigh...	WITHOUT_CLASSIFICATION	0.9994748469689612	WITHOUT_CLASSIFICATION	5.251530310387822E-4	DESIGN
// Handles things like: // a and b or c // a and ( b or c ) // not a and not b // not ( a and b ) // x between y and z            (overloaded "and") // x in ( a, b, c )             (overloaded brackets) // not not a // a is not null                (overloaded "not") // etc...... // and expressions like // foo = bar                    (maps to: foo.id = bar.id) // foo.Bar = 'foo'              (maps to: foo.bar = 'foo') // foo.Bar.Baz = 1.0            (maps to: foo.bar = bar.id and bar.baz = 1.0) // 1.0 = foo.Bar.Baz            (maps to: bar.baz = 1.0 and foo.Bar = bar.id) // foo.Bar.Baz = a.B.C          (maps to: bar.Baz = b.C and foo.Bar = bar.id and a.B = b.id) // foo.Bar.Baz + a.B.C          (maps to: bar.Baz + b.C and foo.Bar = bar.id and a.B = b.id) // ( foo.Bar.Baz + 1.0 ) < 2.0  (maps to: ( bar.Baz + 1.0 ) < 2.0 and foo.Bar = bar.id)	WITHOUT_CLASSIFICATION	0.9999887982310108	WITHOUT_CLASSIFICATION	1.1201768989177852E-5	DESIGN
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9986349770440358	WITHOUT_CLASSIFICATION	0.0013650229559641351	DESIGN
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9986349770440358	WITHOUT_CLASSIFICATION	0.0013650229559641351	DESIGN
// try to "pretty print" it	WITHOUT_CLASSIFICATION	0.9999699232326711	WITHOUT_CLASSIFICATION	3.0076767328882446E-5	DESIGN
// otherwise, just dump it	WITHOUT_CLASSIFICATION	0.999985365956372	WITHOUT_CLASSIFICATION	1.463404362810134E-5	DESIGN
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9924176616474307	WITHOUT_CLASSIFICATION	0.007582338352569242	DESIGN
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9924176616474307	WITHOUT_CLASSIFICATION	0.007582338352569242	DESIGN
// use default behavior	WITHOUT_CLASSIFICATION	0.9999975597007092	WITHOUT_CLASSIFICATION	2.4402992908138144E-6	DESIGN
//NOTE: early return	WITHOUT_CLASSIFICATION	0.9781833888770088	WITHOUT_CLASSIFICATION	0.021816611122991117	DESIGN
// the MRU cache used to keep hard references to the most recently used query plans; // note : LRU here is a bit of a misnomer, it indicates that LRU entries are removed, the // actual kept entries are the MRU entries	WITHOUT_CLASSIFICATION	0.7517354630843617	WITHOUT_CLASSIFICATION	0.24826453691563832	DESIGN
// we want to be able to just use the defaults, // if JNDI environment properties are not supplied // so don't put null in anywhere	WITHOUT_CLASSIFICATION	0.9999978404992657	WITHOUT_CLASSIFICATION	2.1595007344173485E-6	DESIGN
// Clone //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999999018054053	WITHOUT_CLASSIFICATION	9.819459470483074E-8	DESIGN
// Serialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999999467319478	WITHOUT_CLASSIFICATION	5.326805230514196E-8	DESIGN
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999907367181566	WITHOUT_CLASSIFICATION	9.263281843276344E-6	DESIGN
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999907367181566	WITHOUT_CLASSIFICATION	9.263281843276344E-6	DESIGN
// Deserialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999998889976869	WITHOUT_CLASSIFICATION	1.1100231319720597E-7	DESIGN
/* static methods only - hide constructor */	WITHOUT_CLASSIFICATION	0.9942401210411633	WITHOUT_CLASSIFICATION	0.005759878958836645	DESIGN
/*&& !('_'==character)*/	WITHOUT_CLASSIFICATION	0.9999398049480739	WITHOUT_CLASSIFICATION	6.0195051926067865E-5	DESIGN
// returnign null!	WITHOUT_CLASSIFICATION	0.9999431575412219	WITHOUT_CLASSIFICATION	5.6842458778088E-5	DESIGN
// returnign null!	WITHOUT_CLASSIFICATION	0.9999431575412219	WITHOUT_CLASSIFICATION	5.6842458778088E-5	DESIGN
// includes last '.'	WITHOUT_CLASSIFICATION	0.9999998668682681	WITHOUT_CLASSIFICATION	1.3313173189485583E-7	DESIGN
// +1 to include the following '.'	WITHOUT_CLASSIFICATION	0.9999997738783855	WITHOUT_CLASSIFICATION	2.2612161439227948E-7	DESIGN
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.6756514545675651	DESIGN	0.324348545432435	WITHOUT_CLASSIFICATION
// first time we find match!	WITHOUT_CLASSIFICATION	0.999993614256712	WITHOUT_CLASSIFICATION	6.385743288037473E-6	DESIGN
// entityNames may now include slashes for the representations //classname may be an inner class	WITHOUT_CLASSIFICATION	0.999997176667948	WITHOUT_CLASSIFICATION	2.82333205206624E-6	DESIGN
// wrapped iterators	WITHOUT_CLASSIFICATION	0.9999966224746382	WITHOUT_CLASSIFICATION	3.3775253619067173E-6	DESIGN
// index of current iterator in the wrapped iterators array	WITHOUT_CLASSIFICATION	0.9999987530946395	WITHOUT_CLASSIFICATION	1.2469053604955785E-6	DESIGN
// the current iterator	WITHOUT_CLASSIFICATION	0.9999864962069118	WITHOUT_CLASSIFICATION	1.350379308822484E-5	DESIGN
// the last used iterator	WITHOUT_CLASSIFICATION	0.9981264437493269	WITHOUT_CLASSIFICATION	0.0018735562506731569	DESIGN
//it was a boolean expression	WITHOUT_CLASSIFICATION	0.9999996596461542	WITHOUT_CLASSIFICATION	3.403538457244944E-7	DESIGN
/*public static Object[] clone(Class elementClass, Object[] array) {	WITHOUT_CLASSIFICATION	0.9993152568653414	WITHOUT_CLASSIFICATION	6.847431346586915E-4	DESIGN
// call this before any Iterator method to make sure that the current Iterator // is not exhausted	WITHOUT_CLASSIFICATION	0.9993679812214432	WITHOUT_CLASSIFICATION	6.320187785567047E-4	DESIGN
//doable if needed	WITHOUT_CLASSIFICATION	0.9999971230729795	WITHOUT_CLASSIFICATION	2.8769270205193863E-6	DESIGN
// set last used iterator here, in case the user calls remove // before calling hasNext() or next() (although they shouldn't)	WITHOUT_CLASSIFICATION	0.9961212919745147	WITHOUT_CLASSIFICATION	0.0038787080254851737	DESIGN
// peek ahead	WITHOUT_CLASSIFICATION	0.9999622994894607	WITHOUT_CLASSIFICATION	3.770051053931171E-5	DESIGN
// if we reach the end of the string w/o finding the // matching end, that is an exception	WITHOUT_CLASSIFICATION	0.9999999454106646	WITHOUT_CLASSIFICATION	5.458933545616716E-8	DESIGN
// we have a placeholder, spin forward till we find the end	WITHOUT_CLASSIFICATION	0.9999996607460748	WITHOUT_CLASSIFICATION	3.3925392520900715E-7	DESIGN
// make sure spinning forward did not put us past the end of the buffer...	WITHOUT_CLASSIFICATION	0.9999998385482292	WITHOUT_CLASSIFICATION	1.6145177088036634E-7	DESIGN
// First, try to locate this resource through the current // context classloader.	WITHOUT_CLASSIFICATION	0.9999929408617932	WITHOUT_CLASSIFICATION	7.059138206852985E-6	DESIGN
// Next, try to locate this resource through this class's classloader	WITHOUT_CLASSIFICATION	0.9998340035199811	WITHOUT_CLASSIFICATION	1.65996480018976E-4	DESIGN
// Next, try to locate this resource through the system classloader	WITHOUT_CLASSIFICATION	0.9999716765902242	WITHOUT_CLASSIFICATION	2.832340977572172E-5	DESIGN
// Anywhere else we should look?	WITHOUT_CLASSIFICATION	0.9988305191942853	WITHOUT_CLASSIFICATION	0.0011694808057147199	DESIGN
// would need an IdentitySet for this!	WITHOUT_CLASSIFICATION	0.999869235549532	WITHOUT_CLASSIFICATION	1.307644504680856E-4	DESIGN
//Arrays.asList doesn't do primitive arrays	WITHOUT_CLASSIFICATION	0.9999997329421055	WITHOUT_CLASSIFICATION	2.670578945104571E-7	DESIGN
//faster?	WITHOUT_CLASSIFICATION	0.9917085313085747	WITHOUT_CLASSIFICATION	0.00829146869142523	DESIGN
// the name of a class	WITHOUT_CLASSIFICATION	0.9999974888518242	WITHOUT_CLASSIFICATION	2.5111481758451398E-6	DESIGN
// Its the listener class name	WITHOUT_CLASSIFICATION	0.9999949068100882	WITHOUT_CLASSIFICATION	5.0931899117673925E-6	DESIGN
//allow 9,8,7,6,5,4,3,2,1	WITHOUT_CLASSIFICATION	0.9999997280100404	WITHOUT_CLASSIFICATION	2.719899596145005E-7	DESIGN
// default to element set if no elements() specified	WITHOUT_CLASSIFICATION	0.9999996458573824	WITHOUT_CLASSIFICATION	3.541426176136548E-7	DESIGN
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999935800931367	WITHOUT_CLASSIFICATION	6.419906863269878E-6	DESIGN
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9975540874682347	WITHOUT_CLASSIFICATION	0.0024459125317653468	DESIGN
// first, lets determine whether to apply cglib or javassist based instrumentation...	WITHOUT_CLASSIFICATION	0.9999970350236006	WITHOUT_CLASSIFICATION	2.964976399307704E-6	DESIGN
// Make sure we don't override previous set values	WITHOUT_CLASSIFICATION	0.999998833774345	WITHOUT_CLASSIFICATION	1.1662256549970296E-6	DESIGN
//entirely optional!!	WITHOUT_CLASSIFICATION	0.9999638687661113	WITHOUT_CLASSIFICATION	3.613123388861915E-5	DESIGN
// Its the listener instance (or better be)	WITHOUT_CLASSIFICATION	0.9999249641716487	WITHOUT_CLASSIFICATION	7.503582835142555E-5	DESIGN
//context.unbind(boundName);	WITHOUT_CLASSIFICATION	0.9999876659702945	WITHOUT_CLASSIFICATION	1.2334029705440259E-5	DESIGN
//readResolveObject	WITHOUT_CLASSIFICATION	0.9997192128515894	WITHOUT_CLASSIFICATION	2.807871484105282E-4	DESIGN
//cfg.setProperty("hibernate.show_sql", "true");	WITHOUT_CLASSIFICATION	0.9999968813263204	WITHOUT_CLASSIFICATION	3.1186736796262557E-6	DESIGN
// Defensive, convenience methods	WITHOUT_CLASSIFICATION	0.9999775805508596	WITHOUT_CLASSIFICATION	2.241944914035659E-5	DESIGN
// Create the SessionFactory from hibernate.cfg.xml	WITHOUT_CLASSIFICATION	0.9999978052029153	WITHOUT_CLASSIFICATION	2.194797084764278E-6	DESIGN
// Make sure you log the exception, as it might be swallowed	WITHOUT_CLASSIFICATION	0.999780008792143	WITHOUT_CLASSIFICATION	2.1999120785708956E-4	DESIGN
// Begin unit of work	WITHOUT_CLASSIFICATION	0.9999259216810218	WITHOUT_CLASSIFICATION	7.407831897819855E-5	DESIGN
// Write HTML header	WITHOUT_CLASSIFICATION	0.9996920297916954	WITHOUT_CLASSIFICATION	3.07970208304698E-4	DESIGN
// Handle actions	WITHOUT_CLASSIFICATION	0.999950797353962	WITHOUT_CLASSIFICATION	4.9202646038093194E-5	DESIGN
// Print page	WITHOUT_CLASSIFICATION	0.9999990294281573	WITHOUT_CLASSIFICATION	9.705718426826313E-7	DESIGN
// Write HTML footer	WITHOUT_CLASSIFICATION	0.9999573755445355	WITHOUT_CLASSIFICATION	4.2624455464539514E-5	DESIGN
// End unit of work	WITHOUT_CLASSIFICATION	0.9987560296316452	WITHOUT_CLASSIFICATION	0.0012439703683547166	DESIGN
// Start the session to be used for this request	WITHOUT_CLASSIFICATION	0.9593096692852462	WITHOUT_CLASSIFICATION	0.040690330714753795	DESIGN
// make the session available to the session factory's "current context"	WITHOUT_CLASSIFICATION	0.9999997898570907	WITHOUT_CLASSIFICATION	2.1014290932309407E-7	DESIGN
// pass control along to the rest of the processing chain	WITHOUT_CLASSIFICATION	0.9999999973300783	WITHOUT_CLASSIFICATION	2.669921760888236E-9	DESIGN
// remove session from "current context"	WITHOUT_CLASSIFICATION	0.9999685728938672	WITHOUT_CLASSIFICATION	3.1427106132828114E-5	DESIGN
// Eager fetch the collection so we can use it detached	WITHOUT_CLASSIFICATION	0.9999984859955732	WITHOUT_CLASSIFICATION	1.5140044267556368E-6	DESIGN
// If we want to handle it bidirectional and detached, we also need to load this // collection with an eager outer-join fetch, this time with Criteria and not HQL:	WITHOUT_CLASSIFICATION	0.999999999360483	WITHOUT_CLASSIFICATION	6.395169382126807E-10	DESIGN
/*        Event anEvent = (Event) session                .createCriteria(Event.class).setFetchMode("participants", FetchMode.JOIN)                .add( Expression.eq("id", eventId) )                .uniqueResult(); // Eager fetch the colleciton so we can use it detached        */	WITHOUT_CLASSIFICATION	0.9999999962165662	WITHOUT_CLASSIFICATION	3.783433807440592E-9	DESIGN
// End of first unit of work	WITHOUT_CLASSIFICATION	0.9985444837588833	WITHOUT_CLASSIFICATION	0.0014555162411167913	DESIGN
// or bidirectional safety method, setting both sides: aPerson.addToEvent(anEvent);	WITHOUT_CLASSIFICATION	0.9999991576670687	WITHOUT_CLASSIFICATION	8.42332931262868E-7	DESIGN
// Begin second unit of work	WITHOUT_CLASSIFICATION	0.9987406772374308	WITHOUT_CLASSIFICATION	0.0012593227625692096	DESIGN
// Reattachment of aPerson	WITHOUT_CLASSIFICATION	0.9999932129551193	WITHOUT_CLASSIFICATION	6.787044880722322E-6	DESIGN
// The getEmailAddresses() might trigger a lazy load of the collection	WITHOUT_CLASSIFICATION	0.9998183644397006	WITHOUT_CLASSIFICATION	1.8163556029948065E-4	DESIGN
// We need our tm, so get it now and avoid doing other work // if there is a problem	WITHOUT_CLASSIFICATION	0.9915235145428273	WITHOUT_CLASSIFICATION	0.008476485457172658	DESIGN
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.99999999167744	WITHOUT_CLASSIFICATION	8.3225599824858E-9	DESIGN
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.99999999167744	WITHOUT_CLASSIFICATION	8.3225599824858E-9	DESIGN
// JBC put a version in the node when it created as part of // some internal operation. We are always newer, but if // the JBC version is > 1 something odd has happened	WITHOUT_CLASSIFICATION	0.9999977168813239	WITHOUT_CLASSIFICATION	2.2831186760937528E-6	DESIGN
//swaldman 2006-08-28: define c3p0-style configuration parameters for properties with //                     hibernate-specific overrides to detect and warn about conflicting //                     declarations	WITHOUT_CLASSIFICATION	0.9999506305092133	WITHOUT_CLASSIFICATION	4.9369490786655715E-5	DESIGN
// Not null if the Isolation level has been specified in the configuration file. // Otherwise, it is left to the Driver's default value.	WITHOUT_CLASSIFICATION	0.9999999902271659	WITHOUT_CLASSIFICATION	9.772833986594224E-9	DESIGN
// Configured outside of Hibernate (i.e. Servlet container, or Java Bean Container // already has Proxool pools running, and this provider is to just borrow one of these	WITHOUT_CLASSIFICATION	0.9998604263263631	WITHOUT_CLASSIFICATION	1.395736736368661E-4	DESIGN
// If you're closing down the ConnectionProvider chances are an // is not a real big deal, just warn	WITHOUT_CLASSIFICATION	0.9997072328795277	WITHOUT_CLASSIFICATION	2.927671204723086E-4	DESIGN
// (AS is always optional, for consistency with SQL/OQL)	WITHOUT_CLASSIFICATION	0.9999997783053617	WITHOUT_CLASSIFICATION	2.216946383707142E-7	DESIGN
// process the "new" HQL style where aliases are assigned // _after_ the class name or path expression ie. using // the AS construction	WITHOUT_CLASSIFICATION	0.9999999384032411	WITHOUT_CLASSIFICATION	6.159675889406545E-8	DESIGN
// the loaded owner will be set to null after the collection is removed, // so capture its value as the affected owner so it is accessible to // both pre- and post- events	WITHOUT_CLASSIFICATION	0.9999999999982854	WITHOUT_CLASSIFICATION	1.7146838420101558E-12	DESIGN
// is a primitive type // invokespecial	WITHOUT_CLASSIFICATION	0.999994506078809	WITHOUT_CLASSIFICATION	5.493921191030578E-6	DESIGN
// array of primitive type // do nothing	WITHOUT_CLASSIFICATION	0.9999948282327369	WITHOUT_CLASSIFICATION	5.171767263106673E-6	DESIGN
// handle a path expression or class name that // appears at the start, in the "new" HQL // style or an alias that appears at the start // in the "old" HQL style	WITHOUT_CLASSIFICATION	0.999995045266153	WITHOUT_CLASSIFICATION	4.954733846923284E-6	DESIGN
//handle <=, >=, !=, is not, not between, not in	WITHOUT_CLASSIFICATION	0.9999302594556301	WITHOUT_CLASSIFICATION	6.974054436993977E-5	DESIGN
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999418039473916	WITHOUT_CLASSIFICATION	5.819605260840557E-5	DESIGN
// transfer an explicitly defined entity name // handle the lazy attribute	WITHOUT_CLASSIFICATION	0.9997820745247874	WITHOUT_CLASSIFICATION	2.1792547521270415E-4	DESIGN
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.999999928147962	WITHOUT_CLASSIFICATION	7.185203799494686E-8	DESIGN
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.999999928147962	WITHOUT_CLASSIFICATION	7.185203799494686E-8	DESIGN
// get meta's from // <joined-subclass>	WITHOUT_CLASSIFICATION	0.9999979771527746	WITHOUT_CLASSIFICATION	2.0228472253758133E-6	DESIGN
// parameters on the property mapping should // override parameters in the typedef	WITHOUT_CLASSIFICATION	0.9999975352111575	WITHOUT_CLASSIFICATION	2.4647888425302647E-6	DESIGN
//fetch="join" overrides default laziness //fetch="join" overrides default laziness	WITHOUT_CLASSIFICATION	0.9999999953388162	WITHOUT_CLASSIFICATION	4.66118376226877E-9	DESIGN
//NOTE SPECIAL CASE: // default to join and non-lazy for the "second join" // of the many-to-many	WITHOUT_CLASSIFICATION	0.9999996048165692	WITHOUT_CLASSIFICATION	3.951834306976126E-7	DESIGN
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999973827653416	WITHOUT_CLASSIFICATION	2.6172346584351215E-6	DESIGN
// state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999952436076183	WITHOUT_CLASSIFICATION	4.756392381677553E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.9959144787197332	WITHOUT_CLASSIFICATION	0.004085521280266773	DESIGN
//element //index -> id	WITHOUT_CLASSIFICATION	0.9999979813759226	WITHOUT_CLASSIFICATION	2.0186240774069553E-6	DESIGN
// note that it might be better to iterate the snapshot but this is safe, // assuming the user implements equals() properly, as required by the Set // contract!	WITHOUT_CLASSIFICATION	0.9749068921737498	WITHOUT_CLASSIFICATION	0.02509310782625023	DESIGN
// collections detect changes made via their public interface and mark // themselves as dirty as a performance optimization	WITHOUT_CLASSIFICATION	0.9998760226790213	WITHOUT_CLASSIFICATION	1.239773209786754E-4	DESIGN
// essentially, if the real session is closed allow any // method call to pass through since the real session // will complain by throwing an appropriate exception; // NOTE that allowing close() above has the same basic effect, //   but we capture that there simply to perform the unbind...	WITHOUT_CLASSIFICATION	0.9999999985261776	WITHOUT_CLASSIFICATION	1.4738224186996584E-9	DESIGN
// The default SQLExceptionConverter for all dialects is based on SQLState // since SQLErrorCode is extremely vendor-specific.  Specific Dialects // may override to return whatever is most appropriate for that vendor.	WITHOUT_CLASSIFICATION	0.9999999951630159	WITHOUT_CLASSIFICATION	4.836984203572759E-9	DESIGN
//only necessary for postgre < 7.4 //http://anoncvs.postgresql.org/cvsweb.cgi/pgsql/doc/src/sgml/ref/create_sequence.sgml	WITHOUT_CLASSIFICATION	0.9999998864751106	WITHOUT_CLASSIFICATION	1.1352488929986392E-7	DESIGN
// select topic, syntax from information_schema.help // where section like 'Function%' order by section, topic // // see also ->  http://www.h2database.com/html/functions.html	WITHOUT_CLASSIFICATION	0.999999998445963	WITHOUT_CLASSIFICATION	1.5540370906450466E-9	DESIGN
// registerColumnType(Types.VARBINARY, "CHARACTER($l)"); // registerColumnType(Types.BLOB, "CHARACTER($l)" );  // For use prior to CP 11.0 // registerColumnType(Types.CLOB, "CHARACTER($l)" );	WITHOUT_CLASSIFICATION	0.9999992972622949	WITHOUT_CLASSIFICATION	7.027377050416705E-7	DESIGN
//the BLOB type requires a size arguement - this defaults to //bytes - no arg defaults to 1 whole byte! //other argument mods include K - kilobyte, M - megabyte, G - gigabyte. //refer to the PBdevelopers guide for more info.	WITHOUT_CLASSIFICATION	0.9940216161467251	DESIGN	0.005978383853274831	WITHOUT_CLASSIFICATION
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.9989605217629466	WITHOUT_CLASSIFICATION	0.0010394782370533105	DESIGN
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.9998548968832259	WITHOUT_CLASSIFICATION	1.4510311677413943E-4	DESIGN
// add the comment // nest the main query in an outer select // add the rownnumber bit into the outer query select list	WITHOUT_CLASSIFICATION	0.9999876471407271	WITHOUT_CLASSIFICATION	1.2352859272804367E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9959144787197332	WITHOUT_CLASSIFICATION	0.004085521280266773	DESIGN
// Note: For object <-> SQL datatype mappings see: //	WITHOUT_CLASSIFICATION	0.999993940894627	WITHOUT_CLASSIFICATION	6.05910537306078E-6	DESIGN
// TRIM(end_keyword string-expression-1 FROM string-expression-2) // use Hibernate implementation "From" is one of the parameters they pass in position ?3 //registerFunction( "trim", new SQLFunctionTemplate(Hibernate.STRING, "trim(?1 ?2 from ?3)") );	WITHOUT_CLASSIFICATION	0.9999985986559651	WITHOUT_CLASSIFICATION	1.4013440350342597E-6	DESIGN
// Whether this dialect has an Identity clause added to the data type or a completely seperate identity // data type	WITHOUT_CLASSIFICATION	0.9999856709625243	WITHOUT_CLASSIFICATION	1.4329037475663651E-5	DESIGN
// According to both the ANSI-SQL and JPA specs, trim takes a variable number of parameters between 1 and 4. // at least one paramer (trimSource) is required.  From the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If <trim specification> is omitted, BOTH is assumed. // If <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999999999969973	WITHOUT_CLASSIFICATION	3.002611303014246E-12	DESIGN
/////////////////////////////////////////////////////////////////////// // Prepare persisters and link them up with their cache // region/access-strategy	WITHOUT_CLASSIFICATION	0.9999997528264879	WITHOUT_CLASSIFICATION	2.471735120524043E-7	DESIGN
//Named Queries:	WITHOUT_CLASSIFICATION	0.9999106573876763	WITHOUT_CLASSIFICATION	8.934261232369227E-5	DESIGN
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9902067666497972	WITHOUT_CLASSIFICATION	0.00979323335020284	DESIGN
// does not handle arrays (thats ok, cos they can't be lazy) // or newly instantiated collections, so we can do the cast	WITHOUT_CLASSIFICATION	0.9999992434754176	WITHOUT_CLASSIFICATION	7.565245823013453E-7	DESIGN
// collection deletions are a special case since update() can add // deletions of collections not loaded by the session.	WITHOUT_CLASSIFICATION	0.9999999931351345	WITHOUT_CLASSIFICATION	6.864865474770096E-9	DESIGN
// we can do the cast since orphan-delete does not apply to: // 1. newly instantiated collections // 2. arrays (we can't track orphans for detached arrays)	WITHOUT_CLASSIFICATION	0.9999991051170808	WITHOUT_CLASSIFICATION	8.948829192569228E-7	DESIGN
// if the natural-id is marked as non-mutable, it is not retrieved during a // normal database-snapshot operation...	WITHOUT_CLASSIFICATION	0.9999994263320647	WITHOUT_CLASSIFICATION	5.73667935232132E-7	DESIGN
// watch out for a case where old is still referenced // somewhere in the object graph! (which is a user error)	WITHOUT_CLASSIFICATION	0.9999742633044049	WITHOUT_CLASSIFICATION	2.5736695595180643E-5	DESIGN
//slice, to get the columns for this component //property	WITHOUT_CLASSIFICATION	0.9999246990616639	WITHOUT_CLASSIFICATION	7.530093833602845E-5	DESIGN
//int result = 17; //result = 37 * result + type.hashCode(); //result = 37 * result + ( value==null ? 0 : value.hashCode() ); //return result;	WITHOUT_CLASSIFICATION	0.999999014570144	WITHOUT_CLASSIFICATION	9.854298560496622E-7	DESIGN
// The CollectionEntry.isReached() stuff is just to detect any silly users   // who set up circular or shared references between/to collections.	WITHOUT_CLASSIFICATION	0.9999985351142516	WITHOUT_CLASSIFICATION	1.4648857483877055E-6	DESIGN
// detached collection wrappers that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.99999944833414	WITHOUT_CLASSIFICATION	5.516658600137875E-7	DESIGN
// The unique property value represented here may or may not be // serializable, so we do an explicit check here in order to generate // a better error message	WITHOUT_CLASSIFICATION	0.5953453056473398	DESIGN	0.40465469435266027	WITHOUT_CLASSIFICATION
// if the version of a newly instantiated object is not the same // as the version seed value, use that as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999970514795473	WITHOUT_CLASSIFICATION	2.948520452655989E-6	DESIGN
// ie. we never have to null out a reference to // an uninitialized proxy	WITHOUT_CLASSIFICATION	0.999971750867243	WITHOUT_CLASSIFICATION	2.8249132757067336E-5	DESIGN
// ignore this row, the collection is in process of // being loaded somewhere further "up" the stack	WITHOUT_CLASSIFICATION	0.999999496871256	WITHOUT_CLASSIFICATION	5.031287439360166E-7	DESIGN
// Entity load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // 	WITHOUT_CLASSIFICATION	0.9999644589460703	WITHOUT_CLASSIFICATION	3.5541053929616426E-5	DESIGN
// should be ok performance-wise to generate new delegate instances for each // request since these are locally stack-scoped.  Besides, it makes the code // much easier to read than the old TransactionHelper stuff...	WITHOUT_CLASSIFICATION	0.9999185325408092	WITHOUT_CLASSIFICATION	8.14674591907236E-5	DESIGN
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9969037455744155	WITHOUT_CLASSIFICATION	0.0030962544255844293	DESIGN
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9969037455744155	WITHOUT_CLASSIFICATION	0.0030962544255844293	DESIGN
// wrap up any new collections directly referenced by the object // or its components	WITHOUT_CLASSIFICATION	0.9999999865562869	WITHOUT_CLASSIFICATION	1.344371315615821E-8	DESIGN
// remove any snapshot, not really for memory management purposes, but // rather because it might now be stale, and there is no longer any  // EntityEntry to take precedence // This is now handled by removeEntity() //session.getPersistenceContext().removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999377469601893	WITHOUT_CLASSIFICATION	6.225303981065422E-5	DESIGN
// skip this check for composite-ids relating to dom4j entity-mode; // alternatively, we could add a check to make sure the incoming id value is // an instance of Element...	WITHOUT_CLASSIFICATION	0.9983011066510873	WITHOUT_CLASSIFICATION	0.001698893348912639	DESIGN
// upgrade the lock if necessary: //lock(result, lockMode);	WITHOUT_CLASSIFICATION	0.9999643517618997	WITHOUT_CLASSIFICATION	3.5648238100256784E-5	DESIGN
// now, any collections that are initialized // inside this block do not get updated - they // are ignored until the next flush	WITHOUT_CLASSIFICATION	0.9999805074640815	WITHOUT_CLASSIFICATION	1.949253591850396E-5	DESIGN
//we must clone embedded composite identifiers, or  //we will get back the same instance that we pass in	WITHOUT_CLASSIFICATION	0.9999343660444426	WITHOUT_CLASSIFICATION	6.563395555735124E-5	DESIGN
// Sub-insertions should occur before containing insertion so // Try to do the callback now	WITHOUT_CLASSIFICATION	0.9998933051337912	WITHOUT_CLASSIFICATION	1.0669486620890704E-4	DESIGN
//the entity is not associated with the session, so //try interceptor and unsaved-value	WITHOUT_CLASSIFICATION	0.9999946064260735	WITHOUT_CLASSIFICATION	5.3935739264557715E-6	DESIGN
//scan the query string for class names appearing in the from clause and replace //with all persistent implementors of the class/interface, returning multiple //query strings (make sure we don't pick up a class in the select clause!)	WITHOUT_CLASSIFICATION	0.8070018485247431	DESIGN	0.1929981514752569	WITHOUT_CLASSIFICATION
// save() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999989256515597	WITHOUT_CLASSIFICATION	1.0743484402853383E-6	DESIGN
// evict() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999977497593682	WITHOUT_CLASSIFICATION	2.250240631753735E-6	DESIGN
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.6627216151703902	WITHOUT_CLASSIFICATION	0.33727838482960987	DESIGN
//if it is an uninitialized proxy, pointing //with this session, then when it is accessed, //the underlying instance will be "contained"	WITHOUT_CLASSIFICATION	0.9999927461040959	WITHOUT_CLASSIFICATION	7.253895904058643E-6	DESIGN
// Generate an explicit join for the root dot node.   The implied joins will be collected and passed up // to the root dot node.	WITHOUT_CLASSIFICATION	0.9999987494568853	WITHOUT_CLASSIFICATION	1.250543114664798E-6	DESIGN
// A session is considered to contain an entity only if the entity has // an entry in the session's persistence context and the entry reports // that the entity has not been removed	WITHOUT_CLASSIFICATION	0.9999999957311921	WITHOUT_CLASSIFICATION	4.268807878127423E-9	DESIGN
// Does the collection referenced by this FromElement // specify an order-by attribute?  If so, attach it to // the query's order-by	WITHOUT_CLASSIFICATION	0.9999996595589694	WITHOUT_CLASSIFICATION	3.404410305535406E-7	DESIGN
// ... and the token could be an identifer and the error is // a mismatched token error ...	WITHOUT_CLASSIFICATION	0.9991991833830671	WITHOUT_CLASSIFICATION	8.008166169328523E-4	DESIGN
// If a where clause was specified in the update/delete query, use it to limit the // returned ids here...	WITHOUT_CLASSIFICATION	0.9999980923767374	WITHOUT_CLASSIFICATION	1.9076232625556867E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.9959144787197332	WITHOUT_CLASSIFICATION	0.004085521280266773	DESIGN
// Default implementation: // If this node has a data type, and that data type is not an association, then this is scalar.	WITHOUT_CLASSIFICATION	0.9999969500955714	WITHOUT_CLASSIFICATION	3.0499044286177866E-6	DESIGN
// Resolve the LHS fully, generate implicit joins.  Pass in the property name so that the resolver can // discover foreign key (id) properties.	WITHOUT_CLASSIFICATION	0.9924424791331024	WITHOUT_CLASSIFICATION	0.007557520866897542	DESIGN
// If the propertyType is null and there isn't a parent, just // stop now... there was a problem resolving the node anyway.	WITHOUT_CLASSIFICATION	0.9997018120587907	WITHOUT_CLASSIFICATION	2.9818794120932705E-4	DESIGN
//We do not look for an existing join on the same path, because //it makes sense to join twice on the same collection role	WITHOUT_CLASSIFICATION	0.9999654298160011	WITHOUT_CLASSIFICATION	3.457018399895282E-5	DESIGN
// our parent is another dot node, meaning we are being further dereferenced. // thus we need to generate a join unless the parent refers to the associated // entity's PK (because 'our' table would know the FK).	WITHOUT_CLASSIFICATION	0.9893705107001494	WITHOUT_CLASSIFICATION	0.010629489299850624	DESIGN
/*public final Currency getCurrency(int col) throws HibernateException {	WITHOUT_CLASSIFICATION	0.9309945955464956	WITHOUT_CLASSIFICATION	0.0690054044535045	DESIGN
// here, we have two possibilities: // 	WITHOUT_CLASSIFICATION	0.5029485583794696	DESIGN	0.49705144162053033	WITHOUT_CLASSIFICATION
// Set the unresolved path in this node and the parent. // Set the text for the parent.	WITHOUT_CLASSIFICATION	0.9999855275931365	WITHOUT_CLASSIFICATION	1.4472406863466073E-5	DESIGN
// Get the first child to be considered.  Sub-classes may do this differently in order to skip nodes that // are not select expressions (e.g. DISTINCT).	WITHOUT_CLASSIFICATION	0.9999999872889008	WITHOUT_CLASSIFICATION	1.2711099210260589E-8	DESIGN
// If this is an entity and the property is the identifier property, then use getIdentifierType(). //      Note that the propertyName.equals( propertyPath ) checks whether we have a component //      key reference, where the component class property name is the same as the //      entity id property name; if the two are not equal, this is the case and //      we'd need to "fall through" to using the property mapping.	WITHOUT_CLASSIFICATION	0.9999999970043313	WITHOUT_CLASSIFICATION	2.9956687117784364E-9	DESIGN
// for a subquery, the alias to use depends on a few things (we // already know this is not an overall SELECT): //      1) if this FROM_ELEMENT represents a correlation to the //          outer-most query //              A) if the outer query represents a multi-table //                  persister, we need to use the given alias //                  in anticipation of one of the multi-table //                  executors being used (as this subquery will //                  actually be used in the "id select" phase //                  of that multi-table executor) //              B) otherwise, we need to use the persister's //                  table name as the column qualification //      2) otherwise (not correlated), use the given alias	WITHOUT_CLASSIFICATION	0.999387700276937	WITHOUT_CLASSIFICATION	6.122997230630149E-4	DESIGN
// Not a collection? // Return the entity property mapping.	WITHOUT_CLASSIFICATION	0.9999991167556336	WITHOUT_CLASSIFICATION	8.832443664456804E-7	DESIGN
// collection of <many-to-any/> mappings... // used to circumvent the component-collection check below...	WITHOUT_CLASSIFICATION	0.999998343822724	WITHOUT_CLASSIFICATION	1.6561772758817242E-6	DESIGN
// Otherwise, the destination node was implied by the FROM clause and the FROM clause processor // will automatically add it in the right place.	WITHOUT_CLASSIFICATION	0.9987295224322997	WITHOUT_CLASSIFICATION	0.0012704775677002346	DESIGN
// If the first identifier in the path referrs to the class alias (not the class name), then this // is a correlated subselect.  If it's a correlated sub-select, use the existing table alias.  Otherwise // generate a new one.	WITHOUT_CLASSIFICATION	0.9999900027752047	WITHOUT_CLASSIFICATION	9.997224795457606E-6	DESIGN
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999997673635779	WITHOUT_CLASSIFICATION	2.3263642208263152E-7	DESIGN
// An ident node can represent an index expression if the ident // represents a naked property ref //      *Note: this makes the assumption (which is currently the case //      in the hql-sql grammar) that the ident is first resolved //      itself (addrExpr -> resolve()).  The other option, if that //      changes, is to call resolve from here; but it is //      currently un-needed overhead.	WITHOUT_CLASSIFICATION	0.9998646342628278	WITHOUT_CLASSIFICATION	1.353657371723139E-4	DESIGN
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9998398109608913	WITHOUT_CLASSIFICATION	1.6018903910878883E-4	DESIGN
// If this is an implied join in a FROM clause, then use ANSI-style joining, and set the // flag on the FromElement that indicates that it was implied in the FROM clause itself.	WITHOUT_CLASSIFICATION	0.9999884649285883	WITHOUT_CLASSIFICATION	1.1535071411694714E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9959144787197332	WITHOUT_CLASSIFICATION	0.004085521280266773	DESIGN
// For an explicit many-to-many relationship, add a second join from the intermediate  // (many-to-many) table to the destination table.  Also, make sure that the from element's  // idea of the destination is the destination table.	WITHOUT_CLASSIFICATION	0.9999850708370849	WITHOUT_CLASSIFICATION	1.4929162915057478E-5	DESIGN
// Reset the node type, because the rest of the system is expecting FROM_FRAGMENT, all we wanted was // for the factory to create the right sub-class.  This might get reset again later on anyway to make the // SQL generation simpler.	WITHOUT_CLASSIFICATION	0.9998002779181239	WITHOUT_CLASSIFICATION	1.997220818761247E-4	DESIGN
//explicit = true;	WITHOUT_CLASSIFICATION	0.9999936397164666	WITHOUT_CLASSIFICATION	6.360283533497772E-6	DESIGN
//sqlResultTypeList.add( type ); // Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999996612167292	WITHOUT_CLASSIFICATION	3.3878327077506074E-7	DESIGN
// If the expression list has exactly one expression, and the type of the expression is a collection // then this might be a collection function, such as index(c) or size(c).	WITHOUT_CLASSIFICATION	0.9999999566243247	WITHOUT_CLASSIFICATION	4.337567533735967E-8	DESIGN
// Need to parse off the column qualifiers; this is assuming (which is true as of now) // that this is only used from update and delete HQL statement parsing	WITHOUT_CLASSIFICATION	0.9997825367041792	WITHOUT_CLASSIFICATION	2.1746329582093108E-4	DESIGN
// for regression testing against output from the old parser... // found it easiest to simply reorder the FromElements here into ascending order // in terms of injecting them into the resulting sql ast in orders relative to those // expected by the old parser; this is definitely another of those "only needed // for regression purposes".  The SyntheticAndFactory, then, simply injects them as it // encounters them.	WITHOUT_CLASSIFICATION	0.999999999996792	WITHOUT_CLASSIFICATION	3.208058700345567E-12	DESIGN
// The uber-rule here is that we need to include  subclass joins if // the FromElement is in any way dereferenced by a property from // the subclass table; otherwise we end up with column references // qualified by a non-existent table reference in the resulting SQL...	WITHOUT_CLASSIFICATION	0.9999899322609761	WITHOUT_CLASSIFICATION	1.00677390238587E-5	DESIGN
// classic translator does not support collection of ordinal // param metadata	WITHOUT_CLASSIFICATION	0.9999990729863517	WITHOUT_CLASSIFICATION	9.270136483318338E-7	DESIGN
// The following variables are stacks that keep information about each subexpression // in the list of nested subexpressions we are currently processing.	WITHOUT_CLASSIFICATION	0.9999999631298904	WITHOUT_CLASSIFICATION	3.6870109579774554E-8	DESIGN
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999418039473916	WITHOUT_CLASSIFICATION	5.819605260840557E-5	DESIGN
// should not be able to reach last without maxPosition being set // unless there are no results	WITHOUT_CLASSIFICATION	0.9999999865419666	WITHOUT_CLASSIFICATION	1.3458033329037657E-8	DESIGN
// we found it in the temp PC.  Should indicate we are in the midst of processing a result set // containing eager fetches via join fetch	WITHOUT_CLASSIFICATION	0.9999999951409951	WITHOUT_CLASSIFICATION	4.859004927394898E-9	DESIGN
//do not use proxiesByKey, since not all //proxies that point to this session's //instances are in that collection!	WITHOUT_CLASSIFICATION	0.9999210755707002	WITHOUT_CLASSIFICATION	7.89244292998023E-5	DESIGN
// if there is no TM configured, we will not be able to access // the javax.transaction.Transaction object in order to // register a synch anyway.	WITHOUT_CLASSIFICATION	0.9999989302711297	WITHOUT_CLASSIFICATION	1.0697288703101024E-6	DESIGN
// Since the result set cursor is always left at the first // physical row after the "last processed", we need to jump // back one position to get the key value we are interested // in skipping	WITHOUT_CLASSIFICATION	0.9999999914784413	WITHOUT_CLASSIFICATION	8.52155857062861E-9	DESIGN
//true if this is a query and we are loading multiple instances of the same collection role //otherwise this is a CollectionInitializer and we are loading up a single collection or batch	WITHOUT_CLASSIFICATION	0.9967942325237141	WITHOUT_CLASSIFICATION	0.003205767476285881	DESIGN
// we don't need to worry about existing version being uninitialized // because this block isn't called by a re-entrant load (re-entrant // loads _always_ have lock mode NONE)	WITHOUT_CLASSIFICATION	0.9999512037715662	WITHOUT_CLASSIFICATION	4.879622843381115E-5	DESIGN
// add temp entry so that the next step is circular-reference // safe - only needed because some types don't take proper // advantage of two-phase-load (esp. components)	WITHOUT_CLASSIFICATION	0.9999999688582618	WITHOUT_CLASSIFICATION	3.114173817865715E-8	DESIGN
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999999177136548	WITHOUT_CLASSIFICATION	8.228634508535806E-8	DESIGN
// log a message about potential connection leaks	WITHOUT_CLASSIFICATION	0.9999999999499148	WITHOUT_CLASSIFICATION	5.008501650302513E-11	DESIGN
//	WITHOUT_CLASSIFICATION	0.9959144787197332	WITHOUT_CLASSIFICATION	0.004085521280266773	DESIGN
// this has been shown to happen occasionally in rare cases // when using a transaction manager + transaction-timeout // where the timeout calls back through Hibernate's // registered transaction synchronization on a separate // "reaping" thread.  In cases where that reaping thread // executes through this block at the same time the main // application thread does we can get into situations where // these CMEs occur.  And though it is not "allowed" per-se, // the end result without handling it specifically is infinite // looping.  So here, we simply break the loop	WITHOUT_CLASSIFICATION	0.9999999994490635	WITHOUT_CLASSIFICATION	5.509365992953597E-10	DESIGN
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.5904502104848416	WITHOUT_CLASSIFICATION	0.40954978951515825	DESIGN
// can't cache this stuff either (per-invocation) // we are given a map of user-alias -> lock mode // create a new map of sql-alias -> lock mode	WITHOUT_CLASSIFICATION	0.9999962706678989	WITHOUT_CLASSIFICATION	3.7293321010632614E-6	DESIGN
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns //getCollectionTable().createUniqueKey( getIdentifier().getConstraintColumns() );	WITHOUT_CLASSIFICATION	0.9999998442506807	WITHOUT_CLASSIFICATION	1.5574931945860939E-7	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999985630212562	WITHOUT_CLASSIFICATION	1.4369787437428117E-6	DESIGN
//isSet = collection.isSet(); //isSorted = collection.isSorted();	WITHOUT_CLASSIFICATION	0.999999992268465	WITHOUT_CLASSIFICATION	7.731535011763827E-9	DESIGN
//lists, arrays //sets, maps, bags	WITHOUT_CLASSIFICATION	0.9999991812718253	WITHOUT_CLASSIFICATION	8.187281747332067E-7	DESIGN
// we finish all the "removes" first to take care of possible unique // constraints and so that we can take better advantage of batching	WITHOUT_CLASSIFICATION	0.9999999982120884	WITHOUT_CLASSIFICATION	1.7879115332947517E-9	DESIGN
//use a combination of foreign key columns and pk columns, since //the ordering of removal and addition is not guaranteed when //a child moves from one parent to another	WITHOUT_CLASSIFICATION	0.9999644666725436	WITHOUT_CLASSIFICATION	3.553332745640159E-5	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999985630212562	WITHOUT_CLASSIFICATION	1.4369787437428117E-6	DESIGN
//information about properties of this class, //including inherited properties //(only really needed for updatable/insertable properties)	WITHOUT_CLASSIFICATION	0.9999999306682117	WITHOUT_CLASSIFICATION	6.93317883959435E-8	DESIGN
// all this only really needs to consider properties // of this class, not its subclasses, but since we // are reusing code used for sequential selects, we // use the subclass closure	WITHOUT_CLASSIFICATION	0.9999705430495953	WITHOUT_CLASSIFICATION	2.9456950404576982E-5	DESIGN
// Here we render the select column list based on the properties defined as being generated. // For partial component generation, we currently just re-select the whole component // rather than trying to handle the individual generated portions.	WITHOUT_CLASSIFICATION	0.9999881020243212	WITHOUT_CLASSIFICATION	1.189797567892229E-5	DESIGN
// this is the root (versioned) table, and we are using version-based // optimistic locking;  if we are not updating the version, also don't // check it (unless this is a "generated" version column)!	WITHOUT_CLASSIFICATION	0.9988076604059158	WITHOUT_CLASSIFICATION	0.0011923395940841046	DESIGN
//optimistic-lock="all", include all updatable properties //optimistic-lock="dirty", include all properties we are updating this time	WITHOUT_CLASSIFICATION	0.9999834886220419	WITHOUT_CLASSIFICATION	1.6511377958093278E-5	DESIGN
// this property belongs to the table, and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9993336126704504	WITHOUT_CLASSIFICATION	6.663873295495166E-4	DESIGN
// check to see if the connection is in auto-commit  // mode (no connection means aggressive connection // release outside a JTA transaction context, so MUST // be autocommit mode)	WITHOUT_CLASSIFICATION	0.999999999982688	WITHOUT_CLASSIFICATION	1.7312031424643422E-11	DESIGN
// need to treat this as if it where optimistic-lock="all" (dirty does *not* make sense); // first we need to locate the "loaded" state // // Note, it potentially could be a proxy, so perform the location the safe way...	WITHOUT_CLASSIFICATION	0.9999882476496871	WITHOUT_CLASSIFICATION	1.175235031293716E-5	DESIGN
// we *always* assume an instance with a null // identifier or no identifier property is unsaved!	WITHOUT_CLASSIFICATION	0.9999959848179872	WITHOUT_CLASSIFICATION	4.015182012795682E-6	DESIGN
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.9967243452778181	WITHOUT_CLASSIFICATION	0.003275654722181986	DESIGN
//allow any identifier quoted with backtick //only recognizes identifiers beginning with a letter	WITHOUT_CLASSIFICATION	0.9999927968098837	WITHOUT_CLASSIFICATION	7.203190116262078E-6	DESIGN
//following doesn't handle (null, not null) but unnecessary //since this would mean all rows	WITHOUT_CLASSIFICATION	0.5195974182450098	DESIGN	0.4804025817549903	WITHOUT_CLASSIFICATION
// IMPL NOTE : due to the delayed population of setters (setters cached // 	WITHOUT_CLASSIFICATION	0.9915685071697754	WITHOUT_CLASSIFICATION	0.008431492830224608	DESIGN
// we need to dirty check collections, since they can cause an owner // version number increment	WITHOUT_CLASSIFICATION	0.9999293552995038	WITHOUT_CLASSIFICATION	7.064470049629125E-5	DESIGN
//return the id, so we can use it to reset the proxy id //return result;	WITHOUT_CLASSIFICATION	0.9998592543287314	WITHOUT_CLASSIFICATION	1.407456712685488E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9959144787197332	WITHOUT_CLASSIFICATION	0.004085521280266773	DESIGN
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999472308727265	WITHOUT_CLASSIFICATION	5.2769127273469124E-5	DESIGN
// We now have the value of the property-ref we reference.  However, // we need to dig a little deeper, as that property might also be // an entity type, in which case we need to resolve its identitifier	WITHOUT_CLASSIFICATION	0.9999837250626502	WITHOUT_CLASSIFICATION	1.6274937349814907E-5	DESIGN
// Retrieve the value of the designated column in the current row of this // ResultSet object as a java.io.Reader object	WITHOUT_CLASSIFICATION	0.99999994231092	WITHOUT_CLASSIFICATION	5.768907996785154E-8	DESIGN
//not absolutely necessary, but helps for some //equals()/hashCode() implementations	WITHOUT_CLASSIFICATION	0.9999938223484245	WITHOUT_CLASSIFICATION	6.1776515754780946E-6	DESIGN
//this should be a call to resolve(), not resolveIdentifier(),  //'cos it might be a property-ref, and we did not cache the //referenced value	WITHOUT_CLASSIFICATION	0.953031050994707	DESIGN	0.04696894900529294	WITHOUT_CLASSIFICATION
// If we have <tt>not-found="ignore"</tt> association mapped to a // formula, we always need to dirty check it, so we can update the // second-level cache	WITHOUT_CLASSIFICATION	0.9999997985914513	WITHOUT_CLASSIFICATION	2.0140854876689233E-7	DESIGN
// can't just return null here, since that would // cause an owning component to become null	WITHOUT_CLASSIFICATION	0.9999966590437696	WITHOUT_CLASSIFICATION	3.3409562303968126E-6	DESIGN
//for arrays, replaceElements() may return a different reference, since //the array length might not match	WITHOUT_CLASSIFICATION	0.9999992208174346	WITHOUT_CLASSIFICATION	7.791825653975153E-7	DESIGN
// actual cache of the entries.  soft references are used for both the keys and the // values here since the values pertaining to the MRU entries are kept in a // seperate hard reference cache (to avoid their enqueuement/garbage-collection).	WITHOUT_CLASSIFICATION	0.9999999997160256	WITHOUT_CLASSIFICATION	2.839744517447078E-10	DESIGN
// as soon as we encounter our first letter, return the substring // from that position	WITHOUT_CLASSIFICATION	0.9999999937703903	WITHOUT_CLASSIFICATION	6.229609711056101E-9	DESIGN
// Note : expected in the syntax: //      type=listenerClass //          ({sep}type=listenerClass)* // where {sep} is any whitespace or comma	WITHOUT_CLASSIFICATION	0.9999999971555964	WITHOUT_CLASSIFICATION	2.8444035826769E-9	DESIGN
// isTransactionCallbackRegistered denotes whether any Hibernate // Transaction has registered as a callback against this // JDBCContext; only one such callback is allowed.  Directly // serializing this value causes problems with JDBCTransaction, // or really any Transaction impl where the callback is local // to the Transaction instance itself, since that Transaction // is not serialized along with the JDBCContext.  Thus we // handle that fact here explicitly...	WITHOUT_CLASSIFICATION	0.9998967910393686	WITHOUT_CLASSIFICATION	1.0320896063150302E-4	DESIGN
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999999771553642	WITHOUT_CLASSIFICATION	2.284463587593944E-8	DESIGN
// We call getKeyFromResultSet() here so that we can know the // key value upon which to perform the breaking logic.  However, // it is also then called from getRowFromResultSet() which is certainly // not the most efficient.  But the call here is needed, and there // currently is no other way without refactoring of the doQuery()/getRowFromResultSet() // methods	WITHOUT_CLASSIFICATION	0.9997936850287545	WITHOUT_CLASSIFICATION	2.0631497124538179E-4	DESIGN
// This check is needed since processing leaves the cursor // after the last physical row for the current logical row; // thus if we are after the last physical row, this might be // caused by either: //      1) scrolling to the last logical row //      2) scrolling past the last logical row // In the latter scenario, the previous logical row // really is the last logical row. // // In all other cases, we should process back two // logical records (the current logic row, plus the // previous logical row).	WITHOUT_CLASSIFICATION	0.9998962476730928	WITHOUT_CLASSIFICATION	1.037523269071594E-4	DESIGN
// and perform the load	WITHOUT_CLASSIFICATION	0.9999999548993858	WITHOUT_CLASSIFICATION	4.510061416435225E-8	DESIGN
//important: reuse the same event instances for performance!	WITHOUT_CLASSIFICATION	0.9559311924103372	WITHOUT_CLASSIFICATION	0.04406880758966285	DESIGN
//this is a query and we are loading multiple instances of the same collection role	WITHOUT_CLASSIFICATION	0.9946799697456873	WITHOUT_CLASSIFICATION	0.005320030254312708	DESIGN
// we found a collection element in the result set	WITHOUT_CLASSIFICATION	0.9999965396731315	WITHOUT_CLASSIFICATION	3.460326868486227E-6	DESIGN
// we did not find a collection element in the result set, so we // ensure that a collection is created with the owner's identifier, // since what we have is an empty collection	WITHOUT_CLASSIFICATION	0.9999997607470178	WITHOUT_CLASSIFICATION	2.392529822444278E-7	DESIGN
// this is a collection initializer, so we must create a collection // for each of the passed-in keys, to account for the possibility // that the collection is empty and has no rows in the result set	WITHOUT_CLASSIFICATION	0.9998561010944478	WITHOUT_CLASSIFICATION	1.4389890555219955E-4	DESIGN
// grab its state from the ResultSet and keep it in the Session // (but don't yet initialize the object itself) // note that we acquire LockMode.READ even if it was not requested	WITHOUT_CLASSIFICATION	0.9999484109127565	WITHOUT_CLASSIFICATION	5.158908724353456E-5	DESIGN
// a many-to-many; // decrement currentDepth here to allow join across the association table // without exceeding MAX_FETCH_DEPTH (i.e. the "currentDepth - 1" bit)	WITHOUT_CLASSIFICATION	0.999999829468296	WITHOUT_CLASSIFICATION	1.7053170402910794E-7	DESIGN
// if not a composite key, use "foo in (?, ?, ?)" for batching // if no batch, and not a composite key, use "foo = ?"	WITHOUT_CLASSIFICATION	0.9999999465243513	WITHOUT_CLASSIFICATION	5.347564871194947E-8	DESIGN
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999999856538228	WITHOUT_CLASSIFICATION	1.4346177139345754E-8	DESIGN
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9999984960190151	WITHOUT_CLASSIFICATION	1.5039809849027573E-6	DESIGN
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9999984960190151	WITHOUT_CLASSIFICATION	1.5039809849027573E-6	DESIGN
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.9998739671482894	WITHOUT_CLASSIFICATION	1.26032851710673E-4	DESIGN
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.999999948142665	WITHOUT_CLASSIFICATION	5.185733492873797E-8	DESIGN
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999955910726182	WITHOUT_CLASSIFICATION	4.408927381823997E-6	DESIGN
/**	WITHOUT_CLASSIFICATION	0.8886834448185625	DESIGN	0.1113165551814374	WITHOUT_CLASSIFICATION
// ignore	WITHOUT_CLASSIFICATION	0.9999972509027046	WITHOUT_CLASSIFICATION	2.7490972954077436E-6	DESIGN
// ignore	WITHOUT_CLASSIFICATION	0.9999972509027046	WITHOUT_CLASSIFICATION	2.7490972954077436E-6	DESIGN
//        }	WITHOUT_CLASSIFICATION	0.9999916113585051	WITHOUT_CLASSIFICATION	8.38864149477634E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.9959144787197332	WITHOUT_CLASSIFICATION	0.004085521280266773	DESIGN
//	WITHOUT_CLASSIFICATION	0.9959144787197332	WITHOUT_CLASSIFICATION	0.004085521280266773	DESIGN
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9999927299040251	WITHOUT_CLASSIFICATION	7.270095974958646E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.9959144787197332	WITHOUT_CLASSIFICATION	0.004085521280266773	DESIGN
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.9999373528488582	WITHOUT_CLASSIFICATION	6.264715114184342E-5	DESIGN
// at this point we have (drivingSqlAlias) the SQL alias of the driving table // corresponding to the given user alias.  However, the driving table is not // (necessarily) the table against which we want to apply locks.  Mainly, // the exception case here is joined-subclass hierarchies where we instead // want to apply the lock against the root table (for all other strategies, // it just happens that driving and root are the same).	WITHOUT_CLASSIFICATION	0.9999999739696663	WITHOUT_CLASSIFICATION	2.6030333756435818E-8	DESIGN
// the column doesnt exist at all.	WITHOUT_CLASSIFICATION	0.9999999151586313	WITHOUT_CLASSIFICATION	8.484136872691205E-8	DESIGN
// we have a mapped identifier property and the root of // the incoming property path matched that identifier // property	WITHOUT_CLASSIFICATION	0.9999983928659003	WITHOUT_CLASSIFICATION	1.6071340997528496E-6	DESIGN
// we have an embedded composite identifier	WITHOUT_CLASSIFICATION	0.9999991464365979	WITHOUT_CLASSIFICATION	8.535634020906535E-7	DESIGN
// both many-to-one and one-to-one are represented as a // Property.  EntityPersister is relying on this value to // determine "lazy fetch groups" in terms of field-level // interception.  So we need to make sure that we return // true here for the case of many-to-one and one-to-one // with lazy="no-proxy" // // * impl note - lazy="no-proxy" currently forces both // lazy and unwrap to be set to true.  The other case we // are extremely interested in here is that of lazy="proxy" // where lazy is set to true, but unwrap is set to false. // thus we use both here under the assumption that this // return is really only ever used during persister // construction to determine the lazy property/field fetch // groupings.  If that assertion changes then this check // needs to change as well.  Partially, this is an issue with // the overloading of the term "lazy" here...	WITHOUT_CLASSIFICATION	0.9994542275869942	WITHOUT_CLASSIFICATION	5.45772413005888E-4	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998879819129548	WITHOUT_CLASSIFICATION	1.1201808704510051E-4	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998879819129548	WITHOUT_CLASSIFICATION	1.1201808704510051E-4	DESIGN
/*rootTableName = persistentClass.getRootTable().getQualifiedName( 	WITHOUT_CLASSIFICATION	0.9999888084179321	WITHOUT_CLASSIFICATION	1.1191582067819982E-5	DESIGN
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999644197707286	WITHOUT_CLASSIFICATION	3.558022927149243E-5	DESIGN
// Custom sql	WITHOUT_CLASSIFICATION	0.9999992229004115	WITHOUT_CLASSIFICATION	7.770995885250551E-7	DESIGN
/*protected void initPropertyPaths(	WITHOUT_CLASSIFICATION	0.9926995486622905	WITHOUT_CLASSIFICATION	0.007300451337709529	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999918173872538	WITHOUT_CLASSIFICATION	8.182612746188953E-6	DESIGN
//Custom SQL (would be better if these were private)	WITHOUT_CLASSIFICATION	0.9237558952147112	WITHOUT_CLASSIFICATION	0.07624410478528866	DESIGN
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998434246004386	WITHOUT_CLASSIFICATION	1.5657539956140317E-4	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999918173872538	WITHOUT_CLASSIFICATION	8.182612746188953E-6	DESIGN
// aliases for identifier ( alias.id ); skip if the entity defines a non-id property named 'id'	WITHOUT_CLASSIFICATION	0.9999993225468694	WITHOUT_CLASSIFICATION	6.774531304796345E-7	DESIGN
//decide which ResultSet to get the property value from:	WITHOUT_CLASSIFICATION	0.9998835732272519	WITHOUT_CLASSIFICATION	1.1642677274808309E-4	DESIGN
//note: it is conceptually possible that a UserType could map null to //	WITHOUT_CLASSIFICATION	0.9899712932580176	WITHOUT_CLASSIFICATION	0.010028706741982444	DESIGN
// the contract of EntityTuplizer.determineConcreteSubclassEntityName says that returning null // is an indication that the specified entity-name (this.getEntityName) should be used.	WITHOUT_CLASSIFICATION	0.9987759802761856	WITHOUT_CLASSIFICATION	0.0012240197238144012	DESIGN
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.9967243452778181	WITHOUT_CLASSIFICATION	0.003275654722181986	DESIGN
// cache these since they are stateless // this one could even be static...	WITHOUT_CLASSIFICATION	0.9675511816500258	WITHOUT_CLASSIFICATION	0.032448818349974144	DESIGN
//"as" is not in KEYWORDS	WITHOUT_CLASSIFICATION	0.9991315506481702	WITHOUT_CLASSIFICATION	8.684493518299303E-4	DESIGN
// --Commented out by Inspection (12/4/04 9:10 AM): public abstract void addCondition(String alias, String[] columns, String condition);	WITHOUT_CLASSIFICATION	0.9999999998235132	WITHOUT_CLASSIFICATION	1.764867896265767E-10	DESIGN
//use the id column alias	WITHOUT_CLASSIFICATION	0.9999961716687705	WITHOUT_CLASSIFICATION	3.8283312294649355E-6	DESIGN
//private List aliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999999477067406	WITHOUT_CLASSIFICATION	5.229325937598457E-8	DESIGN
//columns.add(columnName); //aliases.add(tableAlias);	WITHOUT_CLASSIFICATION	0.9999978289354345	WITHOUT_CLASSIFICATION	2.1710645653823697E-6	DESIGN
//where fragment must be empty!	WITHOUT_CLASSIFICATION	0.999190639610073	WITHOUT_CLASSIFICATION	8.093603899270568E-4	DESIGN
// revert to traditional hibernate behavior of setting initialPoolSize to minPoolSize // unless otherwise specified with a c3p0.*-style parameter.	WITHOUT_CLASSIFICATION	0.9989514760769479	WITHOUT_CLASSIFICATION	0.001048523923052052	DESIGN
//arbitrary on clause ignored!!	WITHOUT_CLASSIFICATION	0.999972598724379	WITHOUT_CLASSIFICATION	2.7401275620922936E-5	DESIGN
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9999982403478769	WITHOUT_CLASSIFICATION	1.7596521231450778E-6	DESIGN
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9999982403478769	WITHOUT_CLASSIFICATION	1.7596521231450778E-6	DESIGN
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999246397440222	WITHOUT_CLASSIFICATION	7.536025597777172E-5	DESIGN
// Essentially: // 1) If we have a local (Hibernate) transaction in progress //      and it already has the UserTransaction cached, use that //      UserTransaction to determine the status. // 2) If a transaction manager has been located, use //      that transaction manager to determine the status. // 3) Finally, as the last resort, try to lookup the //      UserTransaction via JNDI and use that to determine the //      status.	WITHOUT_CLASSIFICATION	0.9999997090265084	WITHOUT_CLASSIFICATION	2.9097349166824454E-7	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.9993844224900065	WITHOUT_CLASSIFICATION	6.155775099936293E-4	DESIGN
//swallow it (the transaction _was_ successful or successfully rolled back)	WITHOUT_CLASSIFICATION	0.9999991018946848	WITHOUT_CLASSIFICATION	8.981053153002415E-7	DESIGN
// ignore it	WITHOUT_CLASSIFICATION	0.9999997028604238	WITHOUT_CLASSIFICATION	2.971395761793224E-7	DESIGN
// we need to dirty check many-to-ones with not-found="ignore" in order  // to update the cache (not the database), since in this case a null // entity reference can lose information	WITHOUT_CLASSIFICATION	0.9999712171161176	WITHOUT_CLASSIFICATION	2.878288388240646E-5	DESIGN
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999717792765552	WITHOUT_CLASSIFICATION	2.8220723444853374E-5	DESIGN
// Regions can get instantiated in the course of normal work (e.g. // a named query region will be created the first time the query is // executed), so suspend any ongoing tx	WITHOUT_CLASSIFICATION	0.9999993803208498	WITHOUT_CLASSIFICATION	6.196791501286898E-7	DESIGN
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999974213066363	WITHOUT_CLASSIFICATION	2.5786933636715296E-6	DESIGN
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999970987866346	WITHOUT_CLASSIFICATION	2.9012133654947934E-6	DESIGN
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999861219453511	WITHOUT_CLASSIFICATION	1.3878054648913124E-5	DESIGN
// NOTE : this is being used from the process of shutting down a // SessionFactory. Specific things to consider: // (1) this clearing of the region should not propagate to // other nodes on the cluster (if any); this is the // cache-mode-local option bit... // (2) really just trying a best effort to cleanup after // ourselves; lock failures, etc are not critical here; // this is the fail-silently option bit...	WITHOUT_CLASSIFICATION	0.9284566172468416	DESIGN	0.07154338275315841	WITHOUT_CLASSIFICATION
// need to extract the component values and check for subtype replacements...	WITHOUT_CLASSIFICATION	0.9972355849736932	WITHOUT_CLASSIFICATION	0.0027644150263068093	DESIGN
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999976163070038	WITHOUT_CLASSIFICATION	2.3836929961354454E-6	DESIGN
// for now, just "re-flatten" the metamodel since this is temporary stuff anyway (HHH-1907)	WITHOUT_CLASSIFICATION	0.9999725247745543	WITHOUT_CLASSIFICATION	2.74752254456004E-5	DESIGN
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999516758516446	WITHOUT_CLASSIFICATION	4.832414835542528E-5	DESIGN
//This solution would allow us to eliminate the owner arg to disassemble(), but //what if the collection was null, and then later had elements added? seems unsafe //session.getPersistenceContext().getCollectionEntry( (PersistentCollection) value ).getKey();	WITHOUT_CLASSIFICATION	0.9999558134618755	WITHOUT_CLASSIFICATION	4.418653812464745E-5	DESIGN
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999995662775951	WITHOUT_CLASSIFICATION	4.3372240479557054E-7	DESIGN
// some collections are not lazy:	WITHOUT_CLASSIFICATION	0.9999996120429635	WITHOUT_CLASSIFICATION	3.879570364711719E-7	DESIGN
// Here we don't want to suspend the tx. If we do: // 1) We might be caching query results that reflect uncommitted // changes. No tx == no WL on cache node, so other threads // can prematurely see those query results // 2) No tx == immediate replication. More overhead, plus we // spread issue #1 above around the cluster	WITHOUT_CLASSIFICATION	0.9676495525983673	WITHOUT_CLASSIFICATION	0.03235044740163281	DESIGN
// return the (fully resolved) identifier value, but do not resolve // to the actual referenced entity instance // NOTE: the owner of the association is not really the owner of the id!	WITHOUT_CLASSIFICATION	0.9962075317737347	WITHOUT_CLASSIFICATION	0.0037924682262653496	DESIGN
// Add a zero (or quite low) timeout option so we don't block. // Ignore any TimeoutException. Basically we forego caching the // query result in order to avoid blocking. // Reads are done with suspended tx, so they should not hold the // lock for long.  Not caching the query result is OK, since // any subsequent read will just see the old result with its // out-of-date timestamp; that result will be discarded and the // db query performed again.	WITHOUT_CLASSIFICATION	0.999999744099332	WITHOUT_CLASSIFICATION	2.5590066802492E-7	DESIGN
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.6756514545675651	DESIGN	0.324348545432435	WITHOUT_CLASSIFICATION
// We have the JBCWriteMutex, so no other *local* thread will  // be trying to write this key.  // It's possible here some remote thread has come in and // changed the values again, but since we are reading the // values to write to JBC right now, we know we are writing // the latest values; i.e. we don't assume that what we cached // in entry.update() above is what we should write to JBC *now*. // Our write could be redundant, i.e. we are writing what // some remote thread just came in an wrote.  There is a chance  // that yet another remote thread will update us, and we'll then // overwrite that later data in JBC.  But, all remote nodes will // ignore that change in their localCache; the only place it  // will live will be in JBC, where it can only effect the  // initial state transfer values on newly joined nodes  // (i.e. populateLocalCache()).	WITHOUT_CLASSIFICATION	0.9931770438520632	WITHOUT_CLASSIFICATION	0.006822956147936814	DESIGN
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999992988391576	WITHOUT_CLASSIFICATION	7.011608424406889E-7	DESIGN
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999992988391576	WITHOUT_CLASSIFICATION	7.011608424406889E-7	DESIGN
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9998828253015268	WITHOUT_CLASSIFICATION	1.1717469847313092E-4	DESIGN
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9846922566372229	WITHOUT_CLASSIFICATION	0.015307743362776988	DESIGN
// we need to obtain the lock before any actions are // executed, since this may be an inverse="true" // bidirectional association and it is one of the // earlier entity actions which actually updates // the database (this action is resposible for // second-level cache invalidation only)	WITHOUT_CLASSIFICATION	0.9999729715564293	WITHOUT_CLASSIFICATION	2.7028443570710073E-5	DESIGN
//postDelete: // After actually deleting a row, record the fact that the instance no longer  // exists on the database (needed for identity-column key generation), and // remove it from the session cache	WITHOUT_CLASSIFICATION	0.99999957925193	WITHOUT_CLASSIFICATION	4.2074807005595234E-7	DESIGN
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999961132284985	WITHOUT_CLASSIFICATION	3.8867715015360775E-6	DESIGN
// todo : what else to do here?	DESIGN	0.9861625651076223	WITHOUT_CLASSIFICATION	0.013837434892377714	DESIGN
//put() has nowait semantics, is this really appropriate? //note that it needs to be async replication, never local or sync	DESIGN	0.9998416415683489	WITHOUT_CLASSIFICATION	1.5835843165110791E-4	DESIGN
// 'hibernate.temp.use_jdbc_metadata_defaults' is a temporary magic value. // The need for it is intended to be alleviated with future developement, thus it is // not defined as an Environment constant... // // it is used to control whether we should consult the JDBC metadata to determine // certain Settings default values; it is useful to *not* do this when the database // may not be available (mainly in tools usage).	DESIGN	0.9991386470079102	WITHOUT_CLASSIFICATION	8.613529920898165E-4	DESIGN
//TODO: get SQL rendering out of this package!	DESIGN	0.9999848643997924	DESIGN	1.5135600207669993E-5	WITHOUT_CLASSIFICATION
//TODO: get SQL rendering out of this package!	DESIGN	0.9999848643997924	DESIGN	1.5135600207669993E-5	WITHOUT_CLASSIFICATION
// todo : eventually merge this with TreeCache and just add optional opt-lock support there.	DESIGN	0.9992570267031287	WITHOUT_CLASSIFICATION	7.429732968714217E-4	DESIGN
// can happen because of the multiple ways Cache.remove() // can be invoked :(	DESIGN	0.9734055523347714	WITHOUT_CLASSIFICATION	0.026594447665228612	DESIGN
// work around the "feature" where tree cache is validating the // inserted node during the next transaction.  no idea...	DESIGN	0.9219276715414855	WITHOUT_CLASSIFICATION	0.07807232845851464	DESIGN
/**     * FIXME Per the RegionFactory class Javadoc, this constructor version     * should not be necessary.     *      * @param props The configuration properties     */	DESIGN	0.9987834828843772	DESIGN	0.001216517115622712	WITHOUT_CLASSIFICATION
/**     * FIXME Per the RegionFactory class Javadoc, this constructor version     * should not be necessary.     *      * @param props The configuration properties     */	DESIGN	0.9987834828843772	DESIGN	0.001216517115622712	WITHOUT_CLASSIFICATION
// FIXME Hacky workaround to JBCACHE-1202	DESIGN	0.9999997560009196	DESIGN	2.4399908036271895E-7	WITHOUT_CLASSIFICATION
// FIXME Hacky workaround to JBCACHE-1202	DESIGN	0.9999997560009196	DESIGN	2.4399908036271895E-7	WITHOUT_CLASSIFICATION
// TODO: I considered validating TS cache config here, // but decided to defer unti getTimestampsCacheInstance() in case the  // cache is never actually used	DESIGN	0.9999997203500459	DESIGN	2.796499540820498E-7	WITHOUT_CLASSIFICATION
// TODO Is this a valid operation on a timestamps cache?	DESIGN	0.9700418350974666	DESIGN	0.029958164902533432	WITHOUT_CLASSIFICATION
// TODO Is this a valid operation on a timestamps cache?	DESIGN	0.9700418350974666	DESIGN	0.029958164902533432	WITHOUT_CLASSIFICATION
// TODO Why not use the timestamp in a DataVersion?	DESIGN	0.9998013100138348	DESIGN	1.986899861653186E-4	WITHOUT_CLASSIFICATION
// can happen because of the multiple ways Cache.remove() // can be invoked :(	DESIGN	0.9734055523347714	WITHOUT_CLASSIFICATION	0.026594447665228612	DESIGN
// work around the "feature" where tree cache is validating the // inserted node during the next transaction. no idea...	DESIGN	0.9502700793910115	WITHOUT_CLASSIFICATION	0.04972992060898847	DESIGN
//swaldman 2004-02-07: modify to allow null values to signify fall through to c3p0 PoolConfig defaults	DESIGN	0.999999002691596	WITHOUT_CLASSIFICATION	9.973084039620895E-7	DESIGN
// turn hibernate.c3p0.* into c3p0.*, so c3p0 // gets a chance to see all hibernate.c3p0.*	DESIGN	0.9999771836426532	WITHOUT_CLASSIFICATION	2.281635734671479E-5	DESIGN
//TODO: this bit actually has to be called after all cascades! //      but since identity insert is called *synchronously*, //      instead of asynchronously as other actions, it isn't	DESIGN	0.9270118555908863	DESIGN	0.0729881444091137	WITHOUT_CLASSIFICATION
//TODO: reenable if we also fix the above todo	DESIGN	0.9992101025395347	DESIGN	7.898974604653007E-4	WITHOUT_CLASSIFICATION
//TODO: inefficient if that cache is just going to ignore the updated state!	DESIGN	0.9923242803789409	DESIGN	0.00767571962105906	WITHOUT_CLASSIFICATION
// we may be screwed here since the collection action is about to execute // and we do not know the final owner key value	DESIGN	0.9999986104031443	WITHOUT_CLASSIFICATION	1.3895968557594874E-6	DESIGN
/** Create an action that will evict collection and entity regions based on queryspaces (table names).	DESIGN	0.9995780469801431	WITHOUT_CLASSIFICATION	4.2195301985692354E-4	DESIGN
// todo : what else to do here?	DESIGN	0.9861625651076223	WITHOUT_CLASSIFICATION	0.013837434892377714	DESIGN
// todo : modify the class definition if not already transformed...	DESIGN	0.9999997906291043	WITHOUT_CLASSIFICATION	2.093708957790987E-7	DESIGN
// todo : what else to do here?	DESIGN	0.9861625651076223	WITHOUT_CLASSIFICATION	0.013837434892377714	DESIGN
// this is called by SessionFactory irregardless; we just disregard here; // could also add a check to SessionFactory to only conditionally call start	DESIGN	0.9847689867043994	WITHOUT_CLASSIFICATION	0.015231013295600535	DESIGN
// this is called by SessionFactory irregardless; we just disregard here; // could also add a check to SessionFactory to only conditionally call stop	DESIGN	0.9871191452459385	WITHOUT_CLASSIFICATION	0.01288085475406153	DESIGN
//TODO: to handle concurrent writes correctly, this should return a Lock to the client	DESIGN	0.9999997349041613	DESIGN	2.6509583874149407E-7	WITHOUT_CLASSIFICATION
//put() has nowait semantics, is this really appropriate? //note that it needs to be async replication, never local or sync	DESIGN	0.9998416415683489	WITHOUT_CLASSIFICATION	1.5835843165110791E-4	DESIGN
//TODO: to handle concurrent writes correctly, the client should pass in a Lock	DESIGN	0.9997209582869968	DESIGN	2.7904171300321544E-4	WITHOUT_CLASSIFICATION
//TODO: assumes all collections disassemble to an array!	DESIGN	0.7848170508491602	WITHOUT_CLASSIFICATION	0.2151829491508397	DESIGN
//TODO: reuse the PreLoadEvent	DESIGN	0.9962794743357981	DESIGN	0.003720525664201871	WITHOUT_CLASSIFICATION
// todo: this was added to support initializing an entity's EntityEntry snapshot during reattach; // this should be refactored to instead expose a method to assemble a EntityEntry based on this // state for return.	DESIGN	0.6095823721695274	WITHOUT_CLASSIFICATION	0.3904176278304727	DESIGN
// todo : what is the implication of this?	DESIGN	0.9831528519616396	DESIGN	0.016847148038360394	WITHOUT_CLASSIFICATION
// use COUNT as the default.  This mimics the old behavior, although // NONE might be a better option moving forward in the case of callable	DESIGN	0.9996228934753238	WITHOUT_CLASSIFICATION	3.7710652467616427E-4	DESIGN
/* TODO: joinKeyColumnName & foreignKeyColumnName should be called either here or at a	DESIGN	0.9999274825186902	DESIGN	7.251748130976487E-5	WITHOUT_CLASSIFICATION
//TODO: suck this into initLaziness!	DESIGN	0.9999997526856427	DESIGN	2.4731435733248244E-7	WITHOUT_CLASSIFICATION
// we have to set up the table later!! yuck	DESIGN	0.9995730035279462	WITHOUT_CLASSIFICATION	4.26996472053745E-4	DESIGN
//TODO: better to degrade to lazy="false" if uninstrumented	DESIGN	0.9934649744592319	DESIGN	0.006535025540768107	WITHOUT_CLASSIFICATION
// todo : again, how *should* this work for non-pojo entities?	DESIGN	0.9988091308443996	DESIGN	0.0011908691556003809	WITHOUT_CLASSIFICATION
// TODO: this is a bit of copy/paste from IndexedCollection.createPrimaryKey()	DESIGN	0.9999679052603551	DESIGN	3.209473964495981E-5	WITHOUT_CLASSIFICATION
// This inner class implements a case statement....perhaps im being a bit over-clever here	DESIGN	0.700060870387585	WITHOUT_CLASSIFICATION	0.2999391296124149	DESIGN
//TODO: bad implementation, cos it depends upon ordering of mapping doc //      fixing this requires that Collection/PersistentClass gain access //      to the Mappings reference from Configuration (or the filterDefinitions //      map directly) sometime during Configuration.buildSessionFactory //      (after all the types/filter-defs are known and before building //      persisters).	DESIGN	0.99691947273916	DESIGN	0.0030805272608400314	WITHOUT_CLASSIFICATION
//use of a stringbuffer to workaround a JDK bug	DESIGN	0.9992002708481961	DESIGN	7.997291518039648E-4	WITHOUT_CLASSIFICATION
// hack/workaround as sqlquery impl depend on having a key.	DESIGN	0.9999777026829926	DESIGN	2.2297317007384874E-5	WITHOUT_CLASSIFICATION
//FIXME: get the PersistentClass	DESIGN	0.9704022954569579	WITHOUT_CLASSIFICATION	0.029597704543042176	DESIGN
//FIXME: get the PersistentClass	DESIGN	0.9704022954569579	WITHOUT_CLASSIFICATION	0.029597704543042176	DESIGN
//Icky workaround for MySQL bug:	DESIGN	0.9947619756396533	DESIGN	0.005238024360346705	WITHOUT_CLASSIFICATION
//TODO: Somehow add the newly created foreign keys to the internal collection	DESIGN	0.6091558581954705	DESIGN	0.39084414180452953	WITHOUT_CLASSIFICATION
//TODO possibly relax that	DESIGN	0.6525134024104947	DESIGN	0.34748659758950523	WITHOUT_CLASSIFICATION
//TODO possibly relax that	DESIGN	0.6525134024104947	DESIGN	0.34748659758950523	WITHOUT_CLASSIFICATION
//TODO possibly relax that	DESIGN	0.6525134024104947	DESIGN	0.34748659758950523	WITHOUT_CLASSIFICATION
//use of a stringbuffer to workaround a JDK bug	DESIGN	0.9992002708481961	DESIGN	7.997291518039648E-4	WITHOUT_CLASSIFICATION
//use a degenerated strategy for backward compatibility	DESIGN	0.9984625331513055	WITHOUT_CLASSIFICATION	0.0015374668486945633	DESIGN
// Sets can be just a view of a part of another collection. // do we need to copy it to be sure it won't be changing // underneath us? // ie. this.set.addAll(set);	DESIGN	0.6096414435014266	DESIGN	0.3903585564985733	WITHOUT_CLASSIFICATION
//note that i parameter is now unused (delete it?)	DESIGN	0.5157439719093937	WITHOUT_CLASSIFICATION	0.48425602809060625	DESIGN
//just to help out during the load (ugly, i know)	DESIGN	0.9996181994053736	WITHOUT_CLASSIFICATION	3.8180059462636774E-4	DESIGN
// TODO : safe to interpret "map.remove(key) == null" as non-dirty?	DESIGN	0.6061509058662214	WITHOUT_CLASSIFICATION	0.3938490941337786	DESIGN
// yick!  need this for proper serialization/deserialization handling...	DESIGN	0.8843571691232401	WITHOUT_CLASSIFICATION	0.1156428308767599	DESIGN
//TODO: get SQL rendering out of this package!	DESIGN	0.9999848643997924	DESIGN	1.5135600207669993E-5	WITHOUT_CLASSIFICATION
//TODO: get SQL rendering out of this package!	DESIGN	0.9999848643997924	DESIGN	1.5135600207669993E-5	WITHOUT_CLASSIFICATION
//yuck!	DESIGN	0.7877707244268726	WITHOUT_CLASSIFICATION	0.21222927557312735	DESIGN
//TODO: get SQL rendering out of this package!	DESIGN	0.9999848643997924	DESIGN	1.5135600207669993E-5	WITHOUT_CLASSIFICATION
// TODO : not sure this is correct, could not find docs on how to do this.	DESIGN	0.9999693261590622	DESIGN	3.067384093768112E-5	WITHOUT_CLASSIFICATION
//HSQL has no Blob/Clob support .... but just put these here for now!	DESIGN	0.9953944922446465	WITHOUT_CLASSIFICATION	0.004605507755353452	DESIGN
// does this need holdlock also? : return tableName + " with (updlock, rowlock, holdlock)";	DESIGN	0.6360923780336762	DESIGN	0.36390762196632365	WITHOUT_CLASSIFICATION
// sql-server, at least needed this dropped after use; strange!	DESIGN	0.9999994032352311	WITHOUT_CLASSIFICATION	5.967647688420289E-7	DESIGN
// todo : is there really any reason to kkeep trying if this fails once?	DESIGN	0.7273904722054327	WITHOUT_CLASSIFICATION	0.27260952779456726	DESIGN
// TBD should this be varbinary($1)? //	DESIGN	0.6314705197957153	WITHOUT_CLASSIFICATION	0.36852948020428467	DESIGN
// is it necessary to register %exact since it can only appear in a where clause?	DESIGN	0.9999947655214478	WITHOUT_CLASSIFICATION	5.234478552180967E-6	DESIGN
// xmlforest requires a new kind of function constructor	DESIGN	0.9999290189032718	WITHOUT_CLASSIFICATION	7.098109672820943E-5	DESIGN
// Does this dialect support the ALTER TABLE syntax?	DESIGN	0.9998117044298125	WITHOUT_CLASSIFICATION	1.8829557018761454E-4	DESIGN
// Do we need to qualify index names with the schema name?	DESIGN	0.9999964580021253	WITHOUT_CLASSIFICATION	3.541997874611154E-6	DESIGN
// Does this dialect support the UNIQUE column syntax?	DESIGN	0.999922062216799	WITHOUT_CLASSIFICATION	7.793778320103679E-5	DESIGN
// Does this dialect support check constraints?	DESIGN	0.9993562352267693	WITHOUT_CLASSIFICATION	6.437647732306808E-4	DESIGN
// Do we need to drop constraints before dropping tables in this dialect?	DESIGN	0.9868597781608281	WITHOUT_CLASSIFICATION	0.013140221839171845	DESIGN
// Does this dialect support the FOR UPDATE syntax?	DESIGN	0.9987345211577892	WITHOUT_CLASSIFICATION	0.0012654788422108813	DESIGN
// Does this dialect support the Oracle-style FOR UPDATE NOWAIT syntax?	DESIGN	0.9979335906068714	WITHOUT_CLASSIFICATION	0.002066409393128689	DESIGN
// Does this dialect support FOR UPDATE OF, allowing particular rows to be locked?	DESIGN	0.6643167914785071	DESIGN	0.33568320852149297	WITHOUT_CLASSIFICATION
//note there is a wierd implementation in the client side	DESIGN	0.9999926199737612	WITHOUT_CLASSIFICATION	7.380026238768384E-6	DESIGN
//TODO: never reached, since getTypeName() actually throws an exception!	DESIGN	0.9169627287425572	DESIGN	0.08303727125744279	WITHOUT_CLASSIFICATION
// todo : should we additionally check the current isolation mode explicitly?	DESIGN	0.5191980297436045	DESIGN	0.4808019702563955	WITHOUT_CLASSIFICATION
// todo : remove this and just have subclasses use Isolater/IsolatedWork directly...	DESIGN	0.8199125831844262	DESIGN	0.18008741681557383	WITHOUT_CLASSIFICATION
//TODO: should orphans really be deleted during lock???	DESIGN	0.9999994204437491	DESIGN	5.795562508031702E-7	WITHOUT_CLASSIFICATION
// orphans should not be deleted during merge??	DESIGN	0.9920637074595937	WITHOUT_CLASSIFICATION	0.007936292540406358	DESIGN
// orphans should not be deleted during copy??	DESIGN	0.9935704416694511	WITHOUT_CLASSIFICATION	0.0064295583305490345	DESIGN
//I suppose?	DESIGN	0.9825627382193927	WITHOUT_CLASSIFICATION	0.017437261780607338	DESIGN
//TODO: suck this logic into the collection!	DESIGN	0.9999983073037663	DESIGN	1.6926962337500099E-6	WITHOUT_CLASSIFICATION
// TODO: an alternative is to check if the owner has changed; if it hasn't then // get the ID from collection.getOwner()	DESIGN	0.7544104415131507	DESIGN	0.2455895584868493	WITHOUT_CLASSIFICATION
//TODO:refactor + make this method private	DESIGN	0.9999373408466655	DESIGN	6.265915333446021E-5	WITHOUT_CLASSIFICATION
// todo : we can actually just determine this from the incoming EntityEntry-s	DESIGN	0.9993157973254834	WITHOUT_CLASSIFICATION	6.84202674516643E-4	DESIGN
//TODO: Should this be an InitializeEntityEventListener??? (watch out for performance!)	DESIGN	0.9982504121383401	DESIGN	0.0017495878616598684	WITHOUT_CLASSIFICATION
//TODO: better to pass the id in as an argument?	DESIGN	0.9999974862390464	DESIGN	2.513760953559985E-6	WITHOUT_CLASSIFICATION
// todo : potentially look at optimizing these two arrays	DESIGN	0.9990915216529371	WITHOUT_CLASSIFICATION	9.084783470628601E-4	DESIGN
/* trim done to workaround stupid oracle bug that cant handle whitespaces before a { in a sp */	DESIGN	0.999994038877091	DESIGN	5.9611229088640076E-6	WITHOUT_CLASSIFICATION
/* trim done to workaround stupid oracle bug that cant handle whitespaces before a { in a sp */	DESIGN	0.999994038877091	DESIGN	5.9611229088640076E-6	WITHOUT_CLASSIFICATION
//TODO: temporary	DESIGN	0.994641344042302	DESIGN	0.0053586559576980055	WITHOUT_CLASSIFICATION
//TODO: not quite sure about the full implications of this!	DESIGN	0.751731655972034	DESIGN	0.24826834402796608	WITHOUT_CLASSIFICATION
//TODO: not quite sure about the full implications of this!	DESIGN	0.751731655972034	DESIGN	0.24826834402796608	WITHOUT_CLASSIFICATION
//TODO: ugly here:	DESIGN	0.9999702827007171	DESIGN	2.9717299282877334E-5	WITHOUT_CLASSIFICATION
//this is kinda the best we can do...	DESIGN	0.9868097807722898	WITHOUT_CLASSIFICATION	0.013190219227710251	DESIGN
//TODO: this needn't exclude subclasses...	DESIGN	0.9998599747959946	DESIGN	1.400252040054353E-4	WITHOUT_CLASSIFICATION
// todo : need map? the prob is a proper key, right?	DESIGN	0.9852882205575885	DESIGN	0.01471177944241167	WITHOUT_CLASSIFICATION
// todo : i'd much rather have this done from #endLoadingCollection(CollectionPersister,LoadingCollectionEntry)...	DESIGN	0.9991311807641152	WITHOUT_CLASSIFICATION	8.688192358847763E-4	DESIGN
// todo : hack!!! // NOTE : here we cleanup the load context when we have no more local // LCE entries.  This "works" for the time being because really // only the collection load contexts are implemented.  Long term, // this cleanup should become part of the "close result set" // processing from the (sandbox/jdbc) jdbc-container code.	DESIGN	0.9999616222178324	DESIGN	3.837778216758134E-5	WITHOUT_CLASSIFICATION
// todo : should really move this log statement to CollectionType, where this is used from...	DESIGN	0.9916526816518557	DESIGN	0.00834731834814439	WITHOUT_CLASSIFICATION
// TODO : keep seperate notions of QT[] here for shallow/non-shallow queries...	DESIGN	0.550408879712984	WITHOUT_CLASSIFICATION	0.4495911202870159	DESIGN
// TODO : add this info to the translator and aggregate it here...	DESIGN	0.9807120532496482	DESIGN	0.019287946750351843	WITHOUT_CLASSIFICATION
//TODO: move into collection type, so we can use polymorphism!	DESIGN	0.9998144903708147	DESIGN	1.8550962918535417E-4	WITHOUT_CLASSIFICATION
// todo : should we check the current isolation mode explicitly?	DESIGN	0.8209023558875764	WITHOUT_CLASSIFICATION	0.17909764411242357	DESIGN
//TODO: suck into event class	DESIGN	0.9999994613322168	DESIGN	5.386677832018662E-7	WITHOUT_CLASSIFICATION
//do we even really need this? the update will fail anyway....	DESIGN	0.908552872010353	DESIGN	0.09144712798964715	WITHOUT_CLASSIFICATION
//hum ... should we cascade anyway? throw an exception? fine like it is?	DESIGN	0.9715590575238968	DESIGN	0.02844094247610313	WITHOUT_CLASSIFICATION
//TODO: would it be better to do a refresh from db?	DESIGN	0.9999996206521478	DESIGN	3.793478523082382E-7	WITHOUT_CLASSIFICATION
//TODO: we use two visitors here, inefficient!	DESIGN	0.9999985501865999	DESIGN	1.4498134002143353E-6	WITHOUT_CLASSIFICATION
// this class has no proxies (so do a shortcut)	DESIGN	0.9999932828743239	WITHOUT_CLASSIFICATION	6.7171256760882295E-6	DESIGN
//PostLoad is needed for EJB3 //TODO: reuse the PostLoadEvent...	DESIGN	0.842792327124777	DESIGN	0.15720767287522303	WITHOUT_CLASSIFICATION
//TODO: put this stuff back in to read snapshot from //      the second-level cache (needs some extra work)	DESIGN	0.9999998318752643	DESIGN	1.681247356682878E-7	WITHOUT_CLASSIFICATION
// null or brand new collection // this will also (inefficiently) handle arrays, which have // no snapshot, so we can't do any better	DESIGN	0.9943213338849192	WITHOUT_CLASSIFICATION	0.0056786661150808465	DESIGN
//TODO: is this 100% correct?	DESIGN	0.9999880448663844	DESIGN	1.1955133615504945E-5	WITHOUT_CLASSIFICATION
// TODO: iteratively get transient entities and retry merge until one of the following conditions: //       1) transientCopyCache.size() == 0 //       2) transientCopyCache.size() is not decreasing and copyCache.size() is not increasing // TODO: find out if retrying can add entities to copyCache (don't think it can...) // For now, just retry once; throw TransientObjectException if there are still any transient entities	DESIGN	0.9999696738314449	DESIGN	3.0326168555269067E-5	WITHOUT_CLASSIFICATION
// entity name will not be available for non-POJO entities // TODO: cache the entity name somewhere so that it is available to this exception	DESIGN	0.9997430673663942	DESIGN	2.569326336058484E-4	WITHOUT_CLASSIFICATION
//TODO: we should throw an exception if we really *know* for sure   //      that this is a detached instance, rather than just assuming //throw new StaleObjectStateException(entityName, id);	DESIGN	0.9999796720086019	DESIGN	2.032799139798569E-5	WITHOUT_CLASSIFICATION
// TODO : perhaps we should additionally require that the incoming entity // version be equivalent to the defined unsaved-value?	DESIGN	0.9999995939051393	DESIGN	4.0609486069192317E-7	WITHOUT_CLASSIFICATION
// perhaps this should be an exception since it is only ever used // in the above method?	DESIGN	0.9174959453090679	DESIGN	0.0825040546909321	WITHOUT_CLASSIFICATION
// Put a placeholder in entries, so we don't recurse back and try to save() the // same object again. QUESTION: should this be done before onSave() is called? // likewise, should it be done before onUpdate()?	DESIGN	0.6369380743501166	DESIGN	0.3630619256498833	WITHOUT_CLASSIFICATION
//TODO: merge into one method!	DESIGN	0.9998597309066629	DESIGN	1.4026909333717566E-4	WITHOUT_CLASSIFICATION
//TODO: refactor to .sql package	DESIGN	0.9991949603618057	DESIGN	8.050396381942288E-4	WITHOUT_CLASSIFICATION
/** * Provides query splitting methods, which were originally in QueryTranslator. * <br> * TODO: This will need to be refactored at some point. * * @author josh */	DESIGN	0.9999999999338309	DESIGN	6.61690313839093E-11	WITHOUT_CLASSIFICATION
//TODO: this is one of the ugliest and most fragile pieces of code in Hibernate....	DESIGN	0.9999998543688822	DESIGN	1.456311177743969E-7	WITHOUT_CLASSIFICATION
// todo : temporary //      needed because currently persister is the one that //      creates and renders the join fragments for inheritence //      hierarchies...	DESIGN	0.9966812178951299	WITHOUT_CLASSIFICATION	0.0033187821048702238	DESIGN
// TODO : better way?!?	DESIGN	0.999999825798628	DESIGN	1.742013719561784E-7	WITHOUT_CLASSIFICATION
// Not possible to simply re-use the versionPropertyNode here as it causes // OOM errors due to circularity :(	DESIGN	0.9998508246946616	WITHOUT_CLASSIFICATION	1.491753053384821E-4	DESIGN
//TODO:this is only needed during compilation .. can we eliminate the instvar?	DESIGN	0.6931296922660969	DESIGN	0.30687030773390317	WITHOUT_CLASSIFICATION
// TODO : this is a bit dodgy, come up with a better way to check this (plus see above comment)	DESIGN	0.999999999529033	DESIGN	4.709670569240436E-10	WITHOUT_CLASSIFICATION
// even here, if only properties mapped to the "base table" are referenced // in the set and where clauses, this could be handled by the BasicDelegate. // TODO : decide if it is better performance-wise to perform that check, or to simply use the MultiTableUpdateDelegate	DESIGN	0.9999021079770564	DESIGN	9.789202294361156E-5	WITHOUT_CLASSIFICATION
//TODO: switch statements are always evil! We already had bugs because  //      of forgotten token types. Use polymorphism for this!	DESIGN	0.9999903677188482	DESIGN	9.632281151700708E-6	WITHOUT_CLASSIFICATION
// TODO : we really need to be able to deal with component paths here also; // this is difficult because the hql-sql grammar expects all those node types // to be FromReferenceNodes.  One potential fix here would be to convert the // IntoClause to just use a FromClause/FromElement combo (as a child of the // InsertStatement) and move all this logic into the InsertStatement.  That's // probably the easiest approach (read: least amount of changes to the grammar // and code), but just doesn't feel right as then an insert would contain // 2 from-clauses	DESIGN	0.9999625353677373	DESIGN	3.74646322626527E-5	WITHOUT_CLASSIFICATION
// really there are two situations where it should be ok to allow the insertion // into properties defined on a superclass: //      1) union-subclass with an abstract root entity //      2) discrim-subclass // // #1 is handled already because of the fact that // UnionSubclassPersister alreay always returns 0 // for this call... // // we may want to disallow it for discrim-subclass just for // consistency-sake (currently does not work anyway)...	DESIGN	0.9999977372604129	WITHOUT_CLASSIFICATION	2.262739587165024E-6	DESIGN
//yuck!	DESIGN	0.7877707244268726	WITHOUT_CLASSIFICATION	0.21222927557312735	DESIGN
// implicit joins are always(?) ok to reuse	DESIGN	0.9999013045336443	WITHOUT_CLASSIFICATION	9.869546635558886E-5	DESIGN
// TODO : we may also want to check that the types here map to exactly one column/JDBC-type //      can't think of a situation where arithmetic expression between multi-column mappings //      makes any sense.	DESIGN	0.981381623203323	DESIGN	0.018618376796676956	WITHOUT_CLASSIFICATION
// we do not know either type //BLIND GUESS!	DESIGN	0.9957497266002623	WITHOUT_CLASSIFICATION	0.004250273399737649	DESIGN
//TODO: used to be exprNoParens! was this needed?	DESIGN	0.9999996269107174	DESIGN	3.730892825573987E-7	WITHOUT_CLASSIFICATION
// TODO: Replace this with a more elegant solution.	DESIGN	0.9999727183535019	DESIGN	2.7281646498090727E-5	WITHOUT_CLASSIFICATION
// TODO: Should this really return null?  If not, figure out something better to do here.	DESIGN	0.9999999999566193	DESIGN	4.338079962570038E-11	WITHOUT_CLASSIFICATION
//TODO: get SQL rendering out of this package!	DESIGN	0.9999848643997924	DESIGN	1.5135600207669993E-5	WITHOUT_CLASSIFICATION
// yuck!	DESIGN	0.9904182008511134	WITHOUT_CLASSIFICATION	0.009581799148886586	DESIGN
// ignore it; the incoming property could not be found so we // cannot be sure what to do here.  At the very least, the // safest is to simply not apply any dereference toggling...	DESIGN	0.8652576929522446	WITHOUT_CLASSIFICATION	0.13474230704775525	DESIGN
// TODO : most of below was taken verbatim from DotNode; should either delegate this logic or super-type it	DESIGN	0.9999533864355554	DESIGN	4.661356444461091E-5	WITHOUT_CLASSIFICATION
// otherwise, a trim-specification and/or a trim-character // have been specified;  we need to decide which options // are present and "do the right thing" // should leading trim-characters be trimmed? // should trailing trim-characters be trimmed? // the trim-character // the trim-source	DESIGN	0.9998269377190974	WITHOUT_CLASSIFICATION	1.7306228090266886E-4	DESIGN
// todo: we should really just collect these from the various SelectExpressions, rather than regenerating here	DESIGN	0.9762881351643953	WITHOUT_CLASSIFICATION	0.023711864835604765	DESIGN
//TODO: is this a bit ugly?	DESIGN	0.9999999998463084	DESIGN	1.5369166878192587E-10	WITHOUT_CLASSIFICATION
// Need a better way to define the suffixes here...	DESIGN	0.6098028516323458	DESIGN	0.3901971483676541	WITHOUT_CLASSIFICATION
// TODO: something much better - look at the type of the other expression! // TODO: Have comparisonExpression and/or arithmeticExpression rules complete the resolution of boolean nodes.	DESIGN	0.9999238325288219	DESIGN	7.61674711780946E-5	WITHOUT_CLASSIFICATION
// TODO : what amount of significant digits need to be supported here? //      - from the DecimalFormat docs: //          [significant digits] = [minimum integer digits] + [maximum fraction digits]	DESIGN	0.9849444128977703	DESIGN	0.015055587102229675	WITHOUT_CLASSIFICATION
// Needed the "clazz_" check to work around union-subclasses // TODO : is there a way to tell whether a persister is truly discrim-column based inheritence?	DESIGN	0.9999722300859165	DESIGN	2.7769914083424026E-5	WITHOUT_CLASSIFICATION
//We should actually rework this class to not implement Parser //and just process path expressions in the most convenient way.	DESIGN	0.5958415321728431	DESIGN	0.4041584678271569	WITHOUT_CLASSIFICATION
//The class is now way to complex!	DESIGN	0.9991949791856494	WITHOUT_CLASSIFICATION	8.050208143506007E-4	DESIGN
//TODO: get SQL rendering out of here	DESIGN	0.9987971472138859	DESIGN	0.0012028527861141086	WITHOUT_CLASSIFICATION
//TODO: is there a better way?	DESIGN	0.9999999877018946	DESIGN	1.229810545189577E-8	WITHOUT_CLASSIFICATION
//Must be done here because of side-effect! yuck...	DESIGN	0.9868200736279295	WITHOUT_CLASSIFICATION	0.01317992637207064	DESIGN
//name from a super query (a bit inelegant that it shows up here)	DESIGN	0.6308193072229545	DESIGN	0.36918069277704546	WITHOUT_CLASSIFICATION
// We should reengineer this class so that, rather than the current ad - // hoc linear approach to processing a stream of tokens, we instead // build up a tree of expressions.	DESIGN	0.9999054793159784	WITHOUT_CLASSIFICATION	9.452068402158465E-5	DESIGN
// this is ugly here, but needed because its a subquery	DESIGN	0.6409303524654751	WITHOUT_CLASSIFICATION	0.3590696475345249	DESIGN
// unhappy about this being public ... is there a better way?	DESIGN	0.9853707049596532	DESIGN	0.014629295040346765	WITHOUT_CLASSIFICATION
// Make sure this is a defined parameter and check the incoming value type // TODO: what should be the actual exception type here?	DESIGN	0.9999996702814099	DESIGN	3.297185901067241E-7	WITHOUT_CLASSIFICATION
// TODO : this constructor form is *only* used from constructor directly below us; can it go away?	DESIGN	0.9999997929790918	DESIGN	2.0702090816069543E-7	WITHOUT_CLASSIFICATION
//TODO: COPY/PASTE FROM SessionImpl, pull up!	DESIGN	0.9774065336281943	DESIGN	0.022593466371805773	WITHOUT_CLASSIFICATION
// TODO : should remove this exposure //  and have all references to the session's batcher use the ConnectionManager.	DESIGN	0.9998193836737906	DESIGN	1.806163262092982E-4	WITHOUT_CLASSIFICATION
// todo : should this get moved to PersistentContext? // logically, is PersistentContext the "thing" to which an interceptor gets attached?	DESIGN	0.926198227676107	DESIGN	0.07380177232389291	WITHOUT_CLASSIFICATION
// TODO: what type?	DESIGN	0.9999772582029278	DESIGN	2.274179707212821E-5	WITHOUT_CLASSIFICATION
// todo : should seriously consider not allowing a txn to begin from a child session //      can always route the request to the root session...	DESIGN	0.9999070437103198	WITHOUT_CLASSIFICATION	9.295628968022044E-5	DESIGN
// short-circuit for performance...	DESIGN	0.9999957612655931	WITHOUT_CLASSIFICATION	4.238734406875838E-6	DESIGN
// not absolutely necessary, but does help with aggressive release	DESIGN	0.999968778413738	WITHOUT_CLASSIFICATION	3.1221586261985726E-5	DESIGN
// TODO : remove these last two as batcher is no longer managing connections	DESIGN	0.9649111574628838	DESIGN	0.035088842537116256	WITHOUT_CLASSIFICATION
//work around a bug in all known connection pools....	DESIGN	0.9174588166741399	DESIGN	0.08254118332586023	WITHOUT_CLASSIFICATION
// TODO : make this the factory for "entity mode related" sessions; // also means making this the target of transaction-synch and the // thing that knows how to cascade things between related sessions // // At that point, perhaps this thing is a "SessionContext", and // ConnectionManager is a "JDBCContext"?  A "SessionContext" should // live in the impl package...	DESIGN	0.9999524408645581	DESIGN	4.755913544182641E-5	WITHOUT_CLASSIFICATION
//TODO: does this really need to be here? //      does the collection already have //      it's own up-to-date snapshot?	DESIGN	0.9999963512936819	DESIGN	3.648706318067821E-6	WITHOUT_CLASSIFICATION
//TODO: the i==entitySpan-1 bit depends upon subclass implementation (very bad)	DESIGN	0.9990110949118151	DESIGN	9.889050881850194E-4	WITHOUT_CLASSIFICATION
/**	DESIGN	0.8886834448185625	DESIGN	0.1113165551814374	WITHOUT_CLASSIFICATION
// todo : add the notion of enabled filters to the CacheKey to differentiate filtered collections from non-filtered; //      but CacheKey is currently used for both collections and entities; would ideally need to define two seperate ones; //      currently this works in conjuction with the check on //      DefaultInitializeCollectionEventHandler.initializeCollectionFromCache() (which makes sure to not read from //      cache with enabled filters). // EARLY EXIT!!!!!	DESIGN	0.9996603212882088	DESIGN	3.3967871179111877E-4	WITHOUT_CLASSIFICATION
//for sets, we should end the collection load after resolving //the entities, since we might call hashCode() on the elements //TODO: or we could do this polymorphically, and have two //      different operations implemented differently for arrays	DESIGN	0.9997501267771369	DESIGN	2.4987322286312114E-4	WITHOUT_CLASSIFICATION
//This is not very nice (and quite slow):	DESIGN	0.7353398057125295	WITHOUT_CLASSIFICATION	0.26466019428747045	DESIGN
//use of trim() here is ugly?	DESIGN	0.5158726497773942	DESIGN	0.4841273502226058	WITHOUT_CLASSIFICATION
//TODO: this is too conservative; if all preceding joins were  //      also inner joins, we could use an inner join here	DESIGN	0.9999985583190887	DESIGN	1.4416809113261666E-6	WITHOUT_CLASSIFICATION
//TODO: look at the owning property and check that it  //      isn't lazy (by instrumentation)	DESIGN	0.9957320154988851	DESIGN	0.0042679845011149116	WITHOUT_CLASSIFICATION
//TODO: inefficient	DESIGN	0.9999257017867276	DESIGN	7.429821327233833E-5	WITHOUT_CLASSIFICATION
// why does this matter?	DESIGN	0.7036876048792049	DESIGN	0.2963123951207952	WITHOUT_CLASSIFICATION
// from the collection of associations, locate OJA for the // ManyToOne corresponding to this persister to fully // define the many-to-many; we need that OJA so that we can // use its alias here // TODO : is there a better way here?	DESIGN	0.9999637882170124	DESIGN	3.621178298753069E-5	WITHOUT_CLASSIFICATION
//TODO: this class depends directly upon CriteriaImpl,  //      in the impl package ... add a CriteriaImplementor  //      interface	DESIGN	0.9999978134240339	DESIGN	2.1865759660712005E-6	WITHOUT_CLASSIFICATION
//TODO: add a CriteriaImplementor interface //      this class depends directly upon CriteriaImpl in the impl package...	DESIGN	0.9999976268346524	DESIGN	2.3731653476564867E-6	WITHOUT_CLASSIFICATION
// TODO : not so sure this is needed...	DESIGN	0.9992996051376113	DESIGN	7.003948623885928E-4	WITHOUT_CLASSIFICATION
// meant to handle dynamic instantiation queries...(Copy from QueryLoader)	DESIGN	0.9999945164511592	WITHOUT_CLASSIFICATION	5.4835488408060054E-6	DESIGN
// TODO: The order in which entities are saved may matter (e.g., a particular transient entity //       may need to be saved before other transient entities can be saved; //       Keep retrying the batch of transient entities until either: //       1) there are no transient entities left in transientCopyCache //       or 2) no transient entities were saved in the last batch // For now, just run through the transient entities and retry the merge	DESIGN	0.963730549924703	DESIGN	0.036269450075297034	WITHOUT_CLASSIFICATION
// todo: this might really even be moved into the cfg package and used as the basis for all things which are configurable.	DESIGN	0.5454685741255008	DESIGN	0.4545314258744993	WITHOUT_CLASSIFICATION
// todo : currently expects that the individual with expressions apply to the same sql table join. //      This may not be the case for joined-subclass where the property values //      might be coming from different tables in the joined hierarchy.  At some //      point we should expand this to support that capability.  However, that has //      some difficulties: //          1) the biggest is how to handle ORs when the individual comparisons are //              linked to different sql joins. //          2) here we would need to track each comparison individually, along with //              the join alias to which it applies and then pass that information //              back to the FromElement so it can pass it along to the JoinSequence	DESIGN	0.9909928599126284	DESIGN	0.009007140087371667	WITHOUT_CLASSIFICATION
// this function has a template -> restore output, apply the template and write the result out // TODO: Downcast to avoid using an interface?  Yuck.	DESIGN	0.9998225878186825	DESIGN	1.774121813175723E-4	WITHOUT_CLASSIFICATION
// at some point the generate phase needs to be moved out of here, // because a single object-level DML might spawn multiple SQL DML // command executions. // // Possible to just move the sql generation for dml stuff, but for // consistency-sake probably best to just move responsiblity for // the generation phase completely into the delegates // (QueryLoader/StatementExecutor) themselves.  Also, not sure why // QueryLoader currently even has a dependency on this at all; does // it need it?  Ideally like to see the walker itself given to the delegates directly...	DESIGN	0.999999905365398	DESIGN	9.463460205605004E-8	WITHOUT_CLASSIFICATION
// get the right object from the list ... would it be easier to just call getEntity() ??	DESIGN	0.9904904792455728	WITHOUT_CLASSIFICATION	0.009509520754427184	DESIGN
// TODO should we just collect these like with the collections above?	DESIGN	0.9999700059465942	DESIGN	2.9994053405757973E-5	WITHOUT_CLASSIFICATION
// todo : better to handle dynamic filters through implicit DynamicFilterParameterSpecification // see the discussion there in DynamicFilterParameterSpecification's javadocs as to why // it is currently not done that way.	DESIGN	0.9966135639446186	WITHOUT_CLASSIFICATION	0.003386436055381416	DESIGN
/////////////////////////////////////////////////////////////////////////// // USED ONLY FOR REGRESSION TESTING!!!! // // todo : obviously get rid of all this junk ;) ///////////////////////////////////////////////////////////////////////////	DESIGN	0.9159715526330254	WITHOUT_CLASSIFICATION	0.08402844736697454	DESIGN
//create an index on the key columns??	DESIGN	0.9999997180251279	WITHOUT_CLASSIFICATION	2.819748721403364E-7	DESIGN
//TODO: deprecated, remove eventually	DESIGN	0.9951856695659614	DESIGN	0.004814330434038525	WITHOUT_CLASSIFICATION
//create an index on the key columns??	DESIGN	0.9999997180251279	WITHOUT_CLASSIFICATION	2.819748721403364E-7	DESIGN
//TODO: improve this hack!	DESIGN	0.999999999943182	DESIGN	5.681792607579856E-11	WITHOUT_CLASSIFICATION
// inheritance cycle detection (paranoid check)	DESIGN	0.9999995625839675	WITHOUT_CLASSIFICATION	4.374160324382884E-7	DESIGN
//TODO: remove use of instanceof!	DESIGN	0.9999213380888224	DESIGN	7.866191117751968E-5	WITHOUT_CLASSIFICATION
//shortcut	DESIGN	0.9996284874971424	WITHOUT_CLASSIFICATION	3.715125028576383E-4	DESIGN
//TODO: handle the case of a foreign key to something other than the pk	DESIGN	0.7564140238516811	DESIGN	0.24358597614831892	WITHOUT_CLASSIFICATION
// create an index on the key columns??	DESIGN	0.9999999730897577	WITHOUT_CLASSIFICATION	2.6910242295830037E-8	DESIGN
// todo : remove	DESIGN	0.994336209079387	WITHOUT_CLASSIFICATION	0.0056637909206129185	DESIGN
// todo : remove	DESIGN	0.994336209079387	WITHOUT_CLASSIFICATION	0.0056637909206129185	DESIGN
// todo : remove	DESIGN	0.994336209079387	WITHOUT_CLASSIFICATION	0.0056637909206129185	DESIGN
// todo : throw exception?	DESIGN	0.9739250352946385	WITHOUT_CLASSIFICATION	0.026074964705361588	DESIGN
// todo : throw exception?  maybe warn if not the same?	DESIGN	0.5496637056814174	WITHOUT_CLASSIFICATION	0.4503362943185826	DESIGN
//TODO: make EntityPersister *not* depend on SessionFactoryImplementor //interface, if possible	DESIGN	0.9866230063285052	DESIGN	0.013376993671494869	WITHOUT_CLASSIFICATION
//TODO: is there a more elegant way than downcasting?	DESIGN	0.9999993689413178	DESIGN	6.310586822147809E-7	WITHOUT_CLASSIFICATION
// TODO: encapsulate the protected instance variables!	DESIGN	0.7217679613284382	DESIGN	0.27823203867156177	WITHOUT_CLASSIFICATION
// should indicate that we are processing an INSERT/UPDATE/DELETE // query with a subquery implied via a collection property // function. Here, we need to use the table name itself as the // qualification alias. // TODO : verify this works for all databases... // TODO : is this also the case in non-"indexed" scenarios?	DESIGN	0.9999999218407557	DESIGN	7.815924433844598E-8	WITHOUT_CLASSIFICATION
//TODO: copy/paste from insertRows()	DESIGN	0.9854167560656549	DESIGN	0.014583243934345187	WITHOUT_CLASSIFICATION
//TODO: copy/paste from recreate()	DESIGN	0.9835837842494708	DESIGN	0.016416215750529154	WITHOUT_CLASSIFICATION
//should this interface extend PropertyMapping?	DESIGN	0.9620127838580146	DESIGN	0.03798721614198545	WITHOUT_CLASSIFICATION
//ie. the subquery! yuck!	DESIGN	0.9740436167791539	WITHOUT_CLASSIFICATION	0.025956383220846067	DESIGN
//TODO: move to .sql package!!	DESIGN	0.9998810262843363	DESIGN	1.1897371566367157E-4	WITHOUT_CLASSIFICATION
//TODO: code duplication with SingleTableEntityPersister	DESIGN	0.991816769686926	DESIGN	0.00818323031307394	WITHOUT_CLASSIFICATION
// TODO: It would be really, really nice to use this to also model components!	DESIGN	0.9999999997763369	DESIGN	2.2366316979041848E-10	WITHOUT_CLASSIFICATION
//TODO: *two* hashmap lookups here is one too many...	DESIGN	0.9761628355856605	DESIGN	0.023837164414339435	WITHOUT_CLASSIFICATION
//TODO: code duplication with JoinedSubclassEntityPersister	DESIGN	0.5921547818792909	DESIGN	0.4078452181207091	WITHOUT_CLASSIFICATION
//perhaps not really necessary...	DESIGN	0.9953941887307938	WITHOUT_CLASSIFICATION	0.0046058112692062055	DESIGN
// NOTE: this assumes something about how propertySelectFragment is implemented by the subclass! // was toUnqotedAliasStrings( getIdentiferColumnNames() ) before - now tried // to remove that unqoting and missing aliases..	DESIGN	0.5533811863254807	WITHOUT_CLASSIFICATION	0.4466188136745193	DESIGN
// NOTE: this assumes something about how propertySelectFragment is implemented by the subclass! // was toUnqotedAliasStrings( getdiscriminatorColumnName() ) before - now tried // to remove that unqoting and missing aliases..	DESIGN	0.5778405213531826	WITHOUT_CLASSIFICATION	0.42215947864681735	DESIGN
//TODO: should we use SELECT .. FOR UPDATE?	DESIGN	0.9999986580799315	DESIGN	1.341920068494441E-6	WITHOUT_CLASSIFICATION
//TODO: optimize this better!	DESIGN	0.9999914529712762	DESIGN	8.54702872374098E-6	WITHOUT_CLASSIFICATION
//TODO: should we allow suffixes on these ?	DESIGN	0.9999983371047794	DESIGN	1.6628952206555898E-6	WITHOUT_CLASSIFICATION
//This is really ugly, but necessary:	DESIGN	0.6825476836067609	WITHOUT_CLASSIFICATION	0.3174523163932391	DESIGN
//ugly little workaround for fact that createUniqueKeyLoaders() does not handle component properties	DESIGN	0.9999989185804122	DESIGN	1.0814195878104137E-6	WITHOUT_CLASSIFICATION
//TODO: disable batch loading if lockMode > READ?	DESIGN	0.8620764571020938	DESIGN	0.1379235428979062	WITHOUT_CLASSIFICATION
// append the SQL to return the generated identifier //TODO: suck into Insert	DESIGN	0.900218064970913	DESIGN	0.09978193502908703	WITHOUT_CLASSIFICATION
//TODO: I am not so sure about the exception handling in this bit!	DESIGN	0.9999574116698018	DESIGN	4.2588330198252014E-5	WITHOUT_CLASSIFICATION
//TODO: is this really necessary????	DESIGN	0.9999986031818169	DESIGN	1.3968181831898335E-6	WITHOUT_CLASSIFICATION
//TODO: move to .sql package, and refactor with similar things!	DESIGN	0.9999997849590264	DESIGN	2.150409735460075E-7	WITHOUT_CLASSIFICATION
//TODO: implement functionality //  this might be painful to do here, as the "join post processing" for //  the subquery has already been performed (meaning that for //  theta-join dialects, the join conditions have already been moved //  over to the where clause).  A "simple" solution here might to //  perform "join post processing" once for the entire query (including //  any subqueries) at one fell swoop	DESIGN	0.8355209239242846	DESIGN	0.16447907607571544	WITHOUT_CLASSIFICATION
// todo : this eventually needs to be removed	DESIGN	0.5331080100477483	WITHOUT_CLASSIFICATION	0.4668919899522516	DESIGN
//kinda ugly, but needed for collections with a "." node mapping	DESIGN	0.9999947689805014	WITHOUT_CLASSIFICATION	5.231019498509189E-6	DESIGN
//is this ok?	DESIGN	0.7953417649175811	WITHOUT_CLASSIFICATION	0.20465823508241887	DESIGN
//TODO: perhaps this should be some other RuntimeException...	DESIGN	0.9999999950928624	DESIGN	4.90713756365155E-9	WITHOUT_CLASSIFICATION
//TODO: make this a bit nicer	DESIGN	0.9999999226348838	DESIGN	7.73651162204744E-8	WITHOUT_CLASSIFICATION
//Yuck:	DESIGN	0.9718829921882435	WITHOUT_CLASSIFICATION	0.028117007811756467	DESIGN
//TODO: we should provide some way to get keys of collection of statistics to make it easier to retrieve from a GUI perspective	DESIGN	0.9999999953128395	DESIGN	4.687160482433603E-9	WITHOUT_CLASSIFICATION
/**	DESIGN	0.8886834448185625	DESIGN	0.1113165551814374	WITHOUT_CLASSIFICATION
// TODO : will need reference to session factory to fully complete HHH-1907	DESIGN	0.9992192902888121	DESIGN	7.807097111879154E-4	WITHOUT_CLASSIFICATION
//TODO: currently keeps Getters and Setters (instead of PropertyAccessors) because of the way getGetter() and getSetter() are implemented currently; yuck!	DESIGN	0.9999997409282176	DESIGN	2.590717823596295E-7	WITHOUT_CLASSIFICATION
//TODO: redesign how PropertyAccessors are acquired...	DESIGN	0.9997925032736793	DESIGN	2.0749672632075326E-4	WITHOUT_CLASSIFICATION
// todo : YUCK!!!	DESIGN	0.9731438974671638	WITHOUT_CLASSIFICATION	0.02685610253283622	DESIGN
// TODO : YUCK!!!  fix after HHH-1907 is complete	DESIGN	0.9964355988575972	DESIGN	0.003564401142402835	WITHOUT_CLASSIFICATION
//TODO: need to make the majority of this functionality into a top-level support class for custom impl support	DESIGN	0.9999960625867362	DESIGN	3.9374132637927815E-6	WITHOUT_CLASSIFICATION
//TODO: design new lifecycle for ProxyFactory	DESIGN	0.9705766212175198	DESIGN	0.02942337878248028	WITHOUT_CLASSIFICATION
//TODO: would be nice to handle proxy classes elegantly!	DESIGN	0.9999999165189215	DESIGN	8.348107852354548E-8	WITHOUT_CLASSIFICATION
// TODO: copy/paste from ManyToOneType	DESIGN	0.9672305223834144	DESIGN	0.03276947761658565	WITHOUT_CLASSIFICATION
//TODO: should this be Session.instantiate(Persister, ...)?	DESIGN	0.9983016782939214	DESIGN	0.001698321706078717	WITHOUT_CLASSIFICATION
//TODO: this is a bit arbitrary, expose a switch to the user?	DESIGN	0.999834570280281	DESIGN	1.6542971971899166E-4	WITHOUT_CLASSIFICATION
//TODO: implement caching?! proxies?!	DESIGN	0.9999816259467667	DESIGN	1.8374053233312314E-5	WITHOUT_CLASSIFICATION
//TODO: is this right??	DESIGN	0.9999999838485943	DESIGN	1.6151405680755854E-8	WITHOUT_CLASSIFICATION
// is this really necessary?	DESIGN	0.7832638092165245	WITHOUT_CLASSIFICATION	0.2167361907834754	DESIGN
//TODO: move these to a new JoinableType abstract class, //extended by EntityType and PersistentCollectionType:	DESIGN	0.5617840391941473	WITHOUT_CLASSIFICATION	0.43821596080585273	DESIGN
// TODO: this is very suboptimal for some subclasses (namely components), // since it does not take advantage of two-phase-load	DESIGN	0.9959948732307563	DESIGN	0.0040051267692436734	WITHOUT_CLASSIFICATION
// worrying about proxies is perhaps a little bit of overkill here...	DESIGN	0.5882177106236817	WITHOUT_CLASSIFICATION	0.4117822893763182	DESIGN
// NOTE VERY HACKISH WORKAROUND!! // TODO: Fix this so it will work for non-POJO entity mode	DESIGN	0.9999999999914724	DESIGN	8.527570335220347E-12	WITHOUT_CLASSIFICATION
// TODO: Fix this so it will work for non-POJO entity mode	DESIGN	0.9999999822712553	DESIGN	1.7728744735664103E-8	WITHOUT_CLASSIFICATION
// We would probably refactor to have LogicParser (builds a tree of simple // expressions connected by and, or, not), ExpressionParser (translates // from OO terms like foo, foo.Bar, foo.Bar.Baz to SQL terms like // FOOS.ID, FOOS.BAR_ID, etc) and PathExpressionParser (which does much // the same thing it does now)	DESIGN	0.9595964597281449	WITHOUT_CLASSIFICATION	0.04040354027185504	DESIGN
//TODO: this is a little inefficient, don't need to do a whole //      deep replaceElements() call	DESIGN	0.9999999853389591	DESIGN	1.466104091737206E-8	WITHOUT_CLASSIFICATION
//workaround for WebLogic	DESIGN	0.9987138474403721	DESIGN	0.0012861525596280295	WITHOUT_CLASSIFICATION
//TODO: this dependency is kinda Bad	DESIGN	0.9999986740676364	DESIGN	1.325932363543021E-6	WITHOUT_CLASSIFICATION
//ick!	DESIGN	0.9867067143353051	WITHOUT_CLASSIFICATION	0.01329328566469481	DESIGN
// short cut check...	DESIGN	0.9998684614032398	WITHOUT_CLASSIFICATION	1.3153859676021893E-4	DESIGN
// todo : move to StringHelper?	DESIGN	0.9852978095520114	WITHOUT_CLASSIFICATION	0.014702190447988494	DESIGN
//yukky! Don't you have subclasses for that! //TODO race conditions can happen here	DESIGN	0.998886261548749	DESIGN	0.001113738451251	WITHOUT_CLASSIFICATION
//TODO: We probably should have a StatisticsNotPublishedException, to make it clean	DESIGN	0.9999999978635481	DESIGN	2.1364518405183556E-9	WITHOUT_CLASSIFICATION
// FIXME hack to work around fact that calling // Node added = root.addChild( fqn ); doesn't  // properly set the version on the node	DESIGN	0.9999999999954193	DESIGN	4.580652402681539E-12	WITHOUT_CLASSIFICATION
// TODO: I considered validating the presence of the TS cache here, // but decided to defer unti getQueryCacheInstance() in case the  // cache is never actually used	DESIGN	0.9999999548918406	DESIGN	4.5108159496589705E-8	WITHOUT_CLASSIFICATION
//need to do that here rather than in the save event listener to let //the post insert events to have a id-filled entity when IDENTITY is used (EJB3)	DESIGN	0.9999984546826383	WITHOUT_CLASSIFICATION	1.5453173617240654E-6	DESIGN
//TODO: simply remove this override //      if we fix the above todos	DESIGN	0.99889952491775	DESIGN	0.0011004750822499836	WITHOUT_CLASSIFICATION
// This, is used by SessionFactoryImpl to hand to the generated SessionImpl; // was the only reason I could see that we cannot just use null as // Settings.cacheProvider	DESIGN	0.7688318390380146	WITHOUT_CLASSIFICATION	0.23116816096198553	DESIGN
// this is done here 'cos we might only know the type here (ugly!) // TODO: improve this a lot:	DESIGN	0.9999999996495862	DESIGN	3.5041385799693553E-10	WITHOUT_CLASSIFICATION
// todo : would love to have this work on a notification basis //    where the successful binding of an entity/subclass would //    emit a notification which the extendsQueue entries could //    react to...	DESIGN	0.9948749712743673	WITHOUT_CLASSIFICATION	0.005125028725632662	DESIGN
// TODO : not sure the best way to handle this. // The non-performant way :	DESIGN	0.9694393219923956	DESIGN	0.030560678007604366	WITHOUT_CLASSIFICATION
// would be better to use the element-type to determine // whether the old and the new are equal here; the problem being // we do not necessarily have access to the element type in all // cases	DESIGN	0.8207749198682388	WITHOUT_CLASSIFICATION	0.1792250801317611	DESIGN
// This next bit is to allow for both unsaved-value="negative" // and for "older" behavior where version number did not get // seeded if it was already set in the object // TODO: shift it into unsaved-value strategy	DESIGN	0.9673241039239456	WITHOUT_CLASSIFICATION	0.03267589607605439	DESIGN
// merges don't cascade to uninitialized collections //	DESIGN	0.9999835290773798	WITHOUT_CLASSIFICATION	1.6470922620256022E-5	DESIGN
// TODO: an alternative is to check if the owner has changed; if it hasn't then // return collection.getOwner()	DESIGN	0.9146542845531106	DESIGN	0.0853457154468894	WITHOUT_CLASSIFICATION
//it is possible that the tree-walking in OuterJoinLoader can get to //an association defined by a subclass, in which case the property-ref //might refer to a property defined on a subclass of the current class //in this case, the table name is not known - this temporary solution  //assumes that the property-ref refers to a property of the subclass //table that the association belongs to (a reasonable guess) //TODO: fix this, add: OuterJoinLoadable.getSubclassPropertyTableName(String propertyName)	DESIGN	0.999935690116805	DESIGN	6.430988319502402E-5	WITHOUT_CLASSIFICATION
// this only works because collection entries are kept in a sequenced // map by persistence context (maybe we should do like entities and // keep a separate sequences set...) //TODO: calling entrySet on an IdentityMap is SLOW!!	DESIGN	0.9909410532081062	DESIGN	0.009058946791893903	WITHOUT_CLASSIFICATION
// important, to account for newly saved entities in query // todo : some kind of check for new status...	DESIGN	0.9612616158273578	WITHOUT_CLASSIFICATION	0.038738384172642165	DESIGN
// brand new collection //TODO: or an array!! we can't lock objects with arrays now??	DESIGN	0.6025022746445498	DESIGN	0.3974977253554503	WITHOUT_CLASSIFICATION
//TODO: if object was an uninitialized proxy, this is inefficient, //      resulting in two SQL selects	DESIGN	0.9999689616408068	DESIGN	3.103835919313595E-5	WITHOUT_CLASSIFICATION
//before cascade! //TODO: should this be Session.instantiate(Persister, ...)?	DESIGN	0.9984397688978794	DESIGN	0.0015602311021205434	WITHOUT_CLASSIFICATION
// TODO : absolutely no usages of this constructor form; can it go away?	DESIGN	0.9999894570313085	DESIGN	1.0542968691407595E-5	WITHOUT_CLASSIFICATION
// todo : need to find a clean way to handle the "event source" role // a seperate classs responsible for generating/dispatching events just duplicates most of the Session methods... // passing around seperate reto interceptor, factory, actionQueue, and persistentContext is not manageable...	DESIGN	0.9998337047376231	WITHOUT_CLASSIFICATION	1.6629526237699172E-4	DESIGN
// todo : remove	DESIGN	0.994336209079387	WITHOUT_CLASSIFICATION	0.0056637909206129185	DESIGN
//aliasRefNode.resolve( false, false, aliasRefNode.getText() ); //TODO: is it kosher to do it here? //TODO: is it kosher to do it here?	DESIGN	0.9999909216215307	DESIGN	9.078378469292222E-6	WITHOUT_CLASSIFICATION
// No explicit select expression; render the id and properties // projection lists for every persister in the from clause into // a single 'token node'. //TODO: the only reason we need this stuff now is collection filters, //      we should get rid of derived select clause completely!	DESIGN	0.999992078067373	DESIGN	7.92193262702256E-6	WITHOUT_CLASSIFICATION
// TODO : an optimization here would be to consider cascade deletes and not gen those delete statements; //      the difficulty is the ordering of the tables here vs the cascade attributes on the persisters -> //          the table info gotten here should really be self-contained (i.e., a class representation //          defining all the needed attributes), then we could then get an array of those	DESIGN	0.9990819233359413	DESIGN	9.180766640587989E-4	WITHOUT_CLASSIFICATION
// TODO: get SQL rendering out of here, create an AST for the join expressions. // Use the SQL generator grammar to generate the SQL text for the index expression.	DESIGN	0.9198933282818907	WITHOUT_CLASSIFICATION	0.08010667171810927	DESIGN
// TODO : this really needs to be delayed unitl after we definitively know all node types // where this is currently a problem is parameters for which where we cannot unequivocally // resolve an expected type	DESIGN	0.9999892773072746	DESIGN	1.0722692725353162E-5	WITHOUT_CLASSIFICATION
// TODO: Figure out a better way to get the FROM elements in a proper tree structure. // If this is not the destination of a many-to-many, add it as a child of the origin.	DESIGN	0.9999997857912463	DESIGN	2.1420875367165077E-7	WITHOUT_CLASSIFICATION
// work around that crazy issue where the tree contains // "empty" FromElements (no text); afaict, this is caused // by FromElementFactory.createCollectionJoin()	DESIGN	0.8879901515756362	WITHOUT_CLASSIFICATION	0.11200984842436375	DESIGN
//TODO: this class does too many things! we need a different //kind of path expression parser for each of the diffferent //ways in which path expressions can occur	DESIGN	0.9982647231766958	DESIGN	0.0017352768233042817	WITHOUT_CLASSIFICATION
//real hacky... // used to count the nesting of parentheses	DESIGN	0.9998416576187765	DESIGN	1.5834238122346033E-4	WITHOUT_CLASSIFICATION
// TODO : would be really nice to cache the spec on the query-def so as to not have to re-calc the hash; // currently not doable though because of the resultset-ref stuff...	DESIGN	0.999970274138	DESIGN	2.9725861999958697E-5	WITHOUT_CLASSIFICATION
//for arrays, we should end the collection load before resolving //the entities, since the actual array instances are not instantiated //during loading //TODO: or we could do this polymorphically, and have two //      different operations implemented differently for arrays	DESIGN	0.9997275906838111	DESIGN	2.724093161888851E-4	WITHOUT_CLASSIFICATION
// polymorphism not really handled completely correctly, // perhaps...well, actually its ok, assuming that the // entity name used in the lookup is the same as the // the one used here, which it will be	DESIGN	0.831081195448184	WITHOUT_CLASSIFICATION	0.1689188045518159	DESIGN
// TODO: should "record" how many properties we have reffered to - and if we  //       don't get'em'all we throw an exception! Way better than trial and error ;)	DESIGN	0.9999997165644331	DESIGN	2.834355669290751E-7	WITHOUT_CLASSIFICATION
// VERY IMPORTANT!!!! - This class needs to be free of any static references // to any CGLIB or Javassist classes.  Otherwise, users will always need both // on their classpaths no matter which (if either) they use. // // Another option here would be to remove the Hibernate.isPropertyInitialized() // method and have the users go through the SessionFactory to get this information.	DESIGN	0.9997672470398434	WITHOUT_CLASSIFICATION	2.3275296015653598E-4	DESIGN
// TODO: is it really neceassry to provide Configuration to CollectionPersisters ? Should it not be enough with associated class ? // or why does EntityPersister's not get access to configuration ? // // The only reason I could see that Configuration gets passed to collection persisters // is so that they can look up the dom4j node name of the entity element in case // no explicit node name was applied at the collection element level.  Are you kidding me? // Trivial to fix then.  Just store and expose the node name on the entity persister // (which the collection persister looks up anyway via other means...).	DESIGN	0.9999998951452486	DESIGN	1.0485475139754551E-7	WITHOUT_CLASSIFICATION
//for backward compatibility, allow a set with no not-null  //element columns, using all columns in the row locater SQL //TODO: create an implicit not null constraint on all cols?	DESIGN	0.9055923478097765	DESIGN	0.09440765219022358	WITHOUT_CLASSIFICATION
//SPACES //TODO: i'm not sure, but perhaps we should exclude //      abstract denormalized tables?	DESIGN	0.9999999738843904	DESIGN	2.611560959845885E-8	WITHOUT_CLASSIFICATION
//workaround, for backward compatibility of sets with no //not-null columns, assume all columns are used in the //row locator SQL	DESIGN	0.8076246715407773	WITHOUT_CLASSIFICATION	0.19237532845922262	DESIGN
//note that this method could easily be moved up to BasicEntityPersister, //if we ever needed to reuse it from other subclasses	DESIGN	0.9009061255790766	DESIGN	0.09909387442092336	WITHOUT_CLASSIFICATION
//index += getPropertyColumnSpan( i ); //TODO:  this is kinda slow...	DESIGN	0.999931788163416	DESIGN	6.821183658402035E-5	WITHOUT_CLASSIFICATION
//TODO: need some caching scheme? really comes down to decision  //      regarding amount of state (if any) kept on PropertyAccessors	DESIGN	0.9924877666317897	DESIGN	0.0075122333682102185	WITHOUT_CLASSIFICATION
// TODO: here is why we need to make bytecode provider global :( // TODO : again, fix this after HHH-1907 is complete	DESIGN	0.9999999814754806	DESIGN	1.8524519370369114E-8	WITHOUT_CLASSIFICATION
//TODO: Yuck! This is not quite good enough, it's a quick //hack around the problem of having a to-one association //that refers to an embedded component:	DESIGN	0.9999999995716604	DESIGN	4.2833962275593275E-10	WITHOUT_CLASSIFICATION
// for DOM4J "collections" only // TODO: it would be better if this was done at the higher level by Printer	DESIGN	0.9795544178238457	DESIGN	0.02044558217615429	WITHOUT_CLASSIFICATION
// would be great to move all this below here into another method that could also be used // from the new scrolling stuff. // // Would need to change the way the max-row stuff is handled (i.e. behind an interface) so // that I could do the control breaking at the means to know when to stop	DESIGN	0.8742233888141733	WITHOUT_CLASSIFICATION	0.12577661118582661	DESIGN
//TODO: can we *always* use the "null property" approach for everything?	DESIGN	0.6181589954375319	DESIGN	0.38184100456246794	WITHOUT_CLASSIFICATION
//polymorphism comment above	DESIGN	0.9991962294992884	WITHOUT_CLASSIFICATION	8.037705007116132E-4	DESIGN
// some messy, complex stuff here, since createCriteria() can take an // aliased path, or a path rooted at the creating criteria instance	DESIGN	0.9999914095794095	WITHOUT_CLASSIFICATION	8.590420590568997E-6	DESIGN
//TODO: really bad, evil hack to fix!!!	DESIGN	0.9999999999982235	DESIGN	1.7764953317369467E-12	WITHOUT_CLASSIFICATION
// ugly hack for cases like "elements(foo.bar.collection)" // (multi-part path expression ending in elements or indices)	DESIGN	0.7918217611282646	DESIGN	0.20817823887173542	WITHOUT_CLASSIFICATION
// try block is a hack around fact that currently tuplizers are not // given the opportunity to resolve a subclass entity name.  this // allows the (we assume custom) interceptor the ability to // influence this decision if we were not able to based on the // given entityName	DESIGN	0.9973894043574693	DESIGN	0.0026105956425307494	WITHOUT_CLASSIFICATION
/////////////////////////////////////////////////////////////////////// // HACK ALERT !!!!!!!!!!!!!!!!!!!!!!!!!!!! // Attempt to work around "ghost" ImpliedFromElements that occasionally // show up between the actual things being joined.  This consistently // occurs from index nodes (at least against many-to-many).  Not sure // if there are other conditions // // Essentially, look-ahead to the next FromElement that actually // writes something to the SQL	DESIGN	0.9460377979976913	DESIGN	0.053962202002308626	WITHOUT_CLASSIFICATION
//init the table here instead of earlier, so that we can get a quoted table name //TODO: would it be better to simply pass the qualified table name, instead of //      splitting it up into schema/catalog/table names	DESIGN	0.9999995290998039	DESIGN	4.7090019610184627E-7	WITHOUT_CLASSIFICATION
// TODO : would be great to have a Mapping#hasNonIdentifierPropertyNamedId method // I don't believe that Mapping#getReferencedPropertyType accounts for the identifier property; so // if it returns for a property named 'id', then we should have a non-id field named id	DESIGN	0.9659992477231986	DESIGN	0.03400075227680146	WITHOUT_CLASSIFICATION
//TODO: is this really necessary????	DESIGN	0.9999986031818169	DESIGN	1.3968181831898335E-6	WITHOUT_CLASSIFICATION
//TODO: ideally we need the construction of PropertyAccessor to take the following: //      1) EntityMode //      2) EntityMode-specific data (i.e., the classname for pojo entities) //      3) Property-specific data based on the EntityMode (i.e., property-name or dom4j-node-name) // The easiest way, with the introduction of the new runtime-metamodel classes, would be the // the following predicates: //      1) PropertyAccessorFactory.getPropertyAccessor() takes references to both a //          org.hibernate.metadata.EntityModeMetadata and org.hibernate.metadata.Property //      2) What is now termed a "PropertyAccessor" stores any values needed from those two //          pieces of information //      3) Code can then simply call PropertyAccess.getGetter() with no parameters; likewise with //          PropertyAccessor.getSetter()	DESIGN	0.9998378505424169	DESIGN	1.621494575832048E-4	WITHOUT_CLASSIFICATION
//TODO: this is temporary in that the end result will probably not take a Property reference per-se.	DESIGN	0.9999999785413703	DESIGN	2.1458629665525938E-8	WITHOUT_CLASSIFICATION
// todo : this eventually needs to be removed	DESIGN	0.5331080100477483	WITHOUT_CLASSIFICATION	0.4668919899522516	DESIGN
//TODO: make this a bit nicer	DESIGN	0.9999999226348838	DESIGN	7.73651162204744E-8	WITHOUT_CLASSIFICATION
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.9790761918398706	DESIGN	0.02092380816012947	WITHOUT_CLASSIFICATION
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.9790761918398706	DESIGN	0.02092380816012947	WITHOUT_CLASSIFICATION
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.9790761918398706	DESIGN	0.02092380816012947	WITHOUT_CLASSIFICATION
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.9790761918398706	DESIGN	0.02092380816012947	WITHOUT_CLASSIFICATION
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.9790761918398706	DESIGN	0.02092380816012947	WITHOUT_CLASSIFICATION
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.9790761918398706	DESIGN	0.02092380816012947	WITHOUT_CLASSIFICATION
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.9790761918398706	DESIGN	0.02092380816012947	WITHOUT_CLASSIFICATION
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.9790761918398706	DESIGN	0.02092380816012947	WITHOUT_CLASSIFICATION
/**     * FIXME Per the RegionFactory class Javadoc, this constructor version     * should not be necessary.     *      * @param props The configuration properties     */	DESIGN	0.9987834828843772	DESIGN	0.001216517115622712	WITHOUT_CLASSIFICATION
/**     * FIXME Per the RegionFactory class Javadoc, this constructor version     * should not be necessary.     *      * @param props The configuration properties     */	DESIGN	0.9987834828843772	DESIGN	0.001216517115622712	WITHOUT_CLASSIFICATION
/**     * FIXME Per the RegionFactory class Javadoc, this constructor version     * should not be necessary.     *      * @param props The configuration properties     */	DESIGN	0.9987834828843772	DESIGN	0.001216517115622712	WITHOUT_CLASSIFICATION
// TODO : probably better to calculate these and pass them in, as it'll be more performant	DESIGN	0.9999995953502148	DESIGN	4.0464978518176917E-7	WITHOUT_CLASSIFICATION
