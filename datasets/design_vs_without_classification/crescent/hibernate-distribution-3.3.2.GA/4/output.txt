//test out the optimizer:	WITHOUT_CLASSIFICATION	0.9999693134594084	WITHOUT_CLASSIFICATION	3.068654059153055E-5	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.9999987542781822	WITHOUT_CLASSIFICATION	1.2457218177964024E-6	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.9999987542781822	WITHOUT_CLASSIFICATION	1.2457218177964024E-6	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.9999987542781822	WITHOUT_CLASSIFICATION	1.2457218177964024E-6	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.9999987542781822	WITHOUT_CLASSIFICATION	1.2457218177964024E-6	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.9999987542781822	WITHOUT_CLASSIFICATION	1.2457218177964024E-6	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.9999987542781822	WITHOUT_CLASSIFICATION	1.2457218177964024E-6	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.9999987542781822	WITHOUT_CLASSIFICATION	1.2457218177964024E-6	DESIGN
// return	WITHOUT_CLASSIFICATION	0.9999916923202488	WITHOUT_CLASSIFICATION	8.307679751303787E-6	DESIGN
// return	WITHOUT_CLASSIFICATION	0.9999916923202488	WITHOUT_CLASSIFICATION	8.307679751303787E-6	DESIGN
/* | this | bean | args | raw bean | */	WITHOUT_CLASSIFICATION	0.9999179381946843	WITHOUT_CLASSIFICATION	8.206180531569091E-5	DESIGN
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999922439424876	WITHOUT_CLASSIFICATION	7.756057512368408E-6	DESIGN
// astore 4 // store the raw bean	WITHOUT_CLASSIFICATION	0.9999993913048968	WITHOUT_CLASSIFICATION	6.086951032358312E-7	DESIGN
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999934463134578	WITHOUT_CLASSIFICATION	6.553686542124218E-6	DESIGN
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999934463134578	WITHOUT_CLASSIFICATION	6.553686542124218E-6	DESIGN
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.9999999265215641	WITHOUT_CLASSIFICATION	7.347843580418595E-8	DESIGN
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999992943504237	WITHOUT_CLASSIFICATION	7.056495762865274E-7	DESIGN
// putfield // new value of the field	WITHOUT_CLASSIFICATION	0.9999954100871801	WITHOUT_CLASSIFICATION	4.589912819916175E-6	DESIGN
// reference type	WITHOUT_CLASSIFICATION	0.9999791063372067	WITHOUT_CLASSIFICATION	2.089366279333375E-5	DESIGN
// double	WITHOUT_CLASSIFICATION	0.9999919274198684	WITHOUT_CLASSIFICATION	8.07258013156936E-6	DESIGN
// double	WITHOUT_CLASSIFICATION	0.9999919274198684	WITHOUT_CLASSIFICATION	8.07258013156936E-6	DESIGN
// long	WITHOUT_CLASSIFICATION	0.999998508164061	WITHOUT_CLASSIFICATION	1.4918359389349414E-6	DESIGN
// just decrement the lock, don't recache // (we don't know which transaction won)	WITHOUT_CLASSIFICATION	0.9999407225751238	WITHOUT_CLASSIFICATION	5.927742487622283E-5	DESIGN
// decode row selection...	WITHOUT_CLASSIFICATION	0.9999493536763676	WITHOUT_CLASSIFICATION	5.064632363235615E-5	DESIGN
//disassembled state gets put in a new array (we write to cache by value!)	WITHOUT_CLASSIFICATION	0.9998928112490532	WITHOUT_CLASSIFICATION	1.0718875094684155E-4	DESIGN
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.999986958736285	WITHOUT_CLASSIFICATION	1.3041263715074532E-5	DESIGN
// CHECK	WITHOUT_CLASSIFICATION	0.999989601563739	WITHOUT_CLASSIFICATION	1.0398436261027028E-5	DESIGN
// ROW ID	WITHOUT_CLASSIFICATION	0.9999926410735144	WITHOUT_CLASSIFICATION	7.358926485630714E-6	DESIGN
// COMPOSITE-ID	WITHOUT_CLASSIFICATION	0.9999771959253726	WITHOUT_CLASSIFICATION	2.280407462733629E-5	DESIGN
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999697027060397	WITHOUT_CLASSIFICATION	3.0297293960339745E-5	DESIGN
/*	WITHOUT_CLASSIFICATION	0.9996992507513384	WITHOUT_CLASSIFICATION	3.007492486616181E-4	DESIGN
// DYNAMIC INSERT	WITHOUT_CLASSIFICATION	0.9999885450072412	WITHOUT_CLASSIFICATION	1.14549927588377E-5	DESIGN
// PERSISTER	WITHOUT_CLASSIFICATION	0.9999821307697703	WITHOUT_CLASSIFICATION	1.786923022970731E-5	DESIGN
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999935728922593	WITHOUT_CLASSIFICATION	6.427107740673827E-6	DESIGN
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999553764318262	WITHOUT_CLASSIFICATION	4.46235681737848E-5	DESIGN
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999553764318262	WITHOUT_CLASSIFICATION	4.46235681737848E-5	DESIGN
// generated properties can *never* be insertable...	WITHOUT_CLASSIFICATION	0.9999998683625619	WITHOUT_CLASSIFICATION	1.3163743807784665E-7	DESIGN
// TABLE	WITHOUT_CLASSIFICATION	0.9999703831405713	WITHOUT_CLASSIFICATION	2.961685942873853E-5	DESIGN
//by default, natural-ids are "immutable" (constant)	WITHOUT_CLASSIFICATION	0.9999999833615566	WITHOUT_CLASSIFICATION	1.6638443408760063E-8	DESIGN
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.99999913326467	WITHOUT_CLASSIFICATION	8.667353298870069E-7	DESIGN
// we found some extends attributes referencing entities which were // not already processed.  here we need to locate all entity-names // and class-names contained in this document itself, making sure // that these get removed from the extendz list such that only // extends names which require us to delay processing (i.e. // external to this document and not yet processed) are contained // in the returned result	WITHOUT_CLASSIFICATION	0.6297777238760222	WITHOUT_CLASSIFICATION	0.3702222761239778	DESIGN
/**	WITHOUT_CLASSIFICATION	0.9402094942938763	DESIGN	0.05979050570612358	WITHOUT_CLASSIFICATION
//	WITHOUT_CLASSIFICATION	0.9999609652327096	WITHOUT_CLASSIFICATION	3.903476729039761E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999609652327096	WITHOUT_CLASSIFICATION	3.903476729039761E-5	DESIGN
/**	WITHOUT_CLASSIFICATION	0.9402094942938763	DESIGN	0.05979050570612358	WITHOUT_CLASSIFICATION
//	WITHOUT_CLASSIFICATION	0.9999609652327096	WITHOUT_CLASSIFICATION	3.903476729039761E-5	DESIGN
// If close() is called, guarantee unbind()	WITHOUT_CLASSIFICATION	0.9999996842613059	WITHOUT_CLASSIFICATION	3.157386941105644E-7	DESIGN
// if a ThreadLocalSessionContext-bound session happens to get // serialized, to be completely correct, we need to make sure // that unbinding of that session occurs.	WITHOUT_CLASSIFICATION	0.9999946615069155	WITHOUT_CLASSIFICATION	5.33849308445249E-6	DESIGN
// on the inverse, it makes sense that if a ThreadLocalSessionContext- // bound session then gets deserialized to go ahead and re-bind it to // the ThreadLocalSessionContext session map.	WITHOUT_CLASSIFICATION	0.999999996798156	WITHOUT_CLASSIFICATION	3.20184404240779E-9	DESIGN
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9994599708234093	WITHOUT_CLASSIFICATION	5.400291765906644E-4	DESIGN
// 60 second lock timeout	WITHOUT_CLASSIFICATION	0.9999538087807537	WITHOUT_CLASSIFICATION	4.619121924632689E-5	DESIGN
// OptimisticCache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999859609274878	WITHOUT_CLASSIFICATION	1.4039072512105872E-5	DESIGN
// Cache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999856650101722	WITHOUT_CLASSIFICATION	1.4334989827697574E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999609652327096	WITHOUT_CLASSIFICATION	3.903476729039761E-5	DESIGN
// do the put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9992600432911598	WITHOUT_CLASSIFICATION	7.399567088402519E-4	DESIGN
//ignore!	WITHOUT_CLASSIFICATION	0.9999515749605375	WITHOUT_CLASSIFICATION	4.842503946256858E-5	DESIGN
// tree cache in optimistic mode seems to have as very difficult // time with remove calls on non-existent nodes (NPEs)...	WITHOUT_CLASSIFICATION	0.9999987890129031	WITHOUT_CLASSIFICATION	1.210987096972789E-6	DESIGN
//60 seconds	WITHOUT_CLASSIFICATION	0.9999825561776348	WITHOUT_CLASSIFICATION	1.7443822365231307E-5	DESIGN
//ignore!	WITHOUT_CLASSIFICATION	0.9999515749605375	WITHOUT_CLASSIFICATION	4.842503946256858E-5	DESIGN
//60 seconds	WITHOUT_CLASSIFICATION	0.9999825561776348	WITHOUT_CLASSIFICATION	1.7443822365231307E-5	DESIGN
//do the failfast put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.999971821786804	WITHOUT_CLASSIFICATION	2.8178213195983057E-5	DESIGN
// NOTE : evict() operates locally only (i.e., does not propogate // to any other nodes in the potential cluster).  This is // exactly what is needed when we destroy() here; destroy() is used // as part of the process of shutting down a SessionFactory; thus // these removals should not be propogated	WITHOUT_CLASSIFICATION	0.9572442592748688	DESIGN	0.04275574072513121	WITHOUT_CLASSIFICATION
//    protected RegionRootListener listener;	WITHOUT_CLASSIFICATION	0.999999065623093	WITHOUT_CLASSIFICATION	9.343769069673659E-7	DESIGN
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.999979898189835	WITHOUT_CLASSIFICATION	2.0101810164989464E-5	DESIGN
// If we've been blocking for the mutex, perhaps another // thread has already reestablished the root. // In case the node was reestablised via replication, confirm it's  // marked "resident" (a status which doesn't replicate)	WITHOUT_CLASSIFICATION	0.9988046432729603	WITHOUT_CLASSIFICATION	0.001195356727039791	DESIGN
// For pessimistic locking, we just want to toss out our ref // to any old invalid root node and get the latest (may be null)            	WITHOUT_CLASSIFICATION	0.9758446479420714	WITHOUT_CLASSIFICATION	0.024155352057928705	DESIGN
// The rest only matters for optimistic locking, where we // need to establish the proper data version on the region root	WITHOUT_CLASSIFICATION	0.9583120570308336	WITHOUT_CLASSIFICATION	0.041687942969166426	DESIGN
// Don't hold a transactional lock for this 	WITHOUT_CLASSIFICATION	0.9999210901295029	WITHOUT_CLASSIFICATION	7.890987049705138E-5	DESIGN
// Make sure the root node for the region exists and  // has a DataVersion that never complains	WITHOUT_CLASSIFICATION	0.9999999988309383	WITHOUT_CLASSIFICATION	1.1690617753108857E-9	DESIGN
// Never evict this node	WITHOUT_CLASSIFICATION	0.9996631952828211	WITHOUT_CLASSIFICATION	3.3680471717894504E-4	DESIGN
// Fix up the resident flag	WITHOUT_CLASSIFICATION	0.9998469918603967	WITHOUT_CLASSIFICATION	1.5300813960338777E-4	DESIGN
// 60 seconds	WITHOUT_CLASSIFICATION	0.9999966131375094	WITHOUT_CLASSIFICATION	3.3868624904840893E-6	DESIGN
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999941902257536	WITHOUT_CLASSIFICATION	5.809774246316472E-6	DESIGN
// no-op. We don't own the cache so we shouldn't stop it.	WITHOUT_CLASSIFICATION	0.9974722638806923	WITHOUT_CLASSIFICATION	0.00252773611930759	DESIGN
// This should only be possible if the caches are constructor injected 	WITHOUT_CLASSIFICATION	0.9995855706220347	WITHOUT_CLASSIFICATION	4.1442937796529997E-4	DESIGN
// We only build caches if *none* were passed in.  Passing in // caches counts as a clear statement of exactly what is wanted	WITHOUT_CLASSIFICATION	0.9990433947880594	WITHOUT_CLASSIFICATION	9.566052119407394E-4	DESIGN
// Set up the cache factory	WITHOUT_CLASSIFICATION	0.9999926413855112	WITHOUT_CLASSIFICATION	7.358614488686816E-6	DESIGN
// See if the user configured a multiplexer stack	WITHOUT_CLASSIFICATION	0.9999533996159774	WITHOUT_CLASSIFICATION	4.660038402253697E-5	DESIGN
// Default to collections sharing entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999999665701136	WITHOUT_CLASSIFICATION	3.342988634144276E-8	DESIGN
// Default to sharing the entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999999351705798	WITHOUT_CLASSIFICATION	6.482942013567565E-8	DESIGN
// For Timestamps, we default to a separate config	WITHOUT_CLASSIFICATION	0.9997042082876746	WITHOUT_CLASSIFICATION	2.9579171232531587E-4	DESIGN
// We can't change the TM on a running cache; just check // if the cache has no TM and we're OK with that	WITHOUT_CLASSIFICATION	0.9999977665959915	WITHOUT_CLASSIFICATION	2.2334040085416172E-6	DESIGN
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999232602554795	WITHOUT_CLASSIFICATION	7.673974452051036E-5	DESIGN
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999998022760467	WITHOUT_CLASSIFICATION	1.977239533286756E-7	DESIGN
// This method should be implemented assuming it's valid to  // do start/stop/start -- leave state appropriate for another start	WITHOUT_CLASSIFICATION	0.949032410926086	DESIGN	0.05096758907391398	WITHOUT_CLASSIFICATION
// Make sure we don't re-release the same cache	WITHOUT_CLASSIFICATION	0.9999884599145117	WITHOUT_CLASSIFICATION	1.1540085488226844E-5	DESIGN
// We use a different delegate than the non-optimistic superclass default	WITHOUT_CLASSIFICATION	0.9999999349478044	WITHOUT_CLASSIFICATION	6.505219561498E-8	DESIGN
// Following methods we don't delegate since they have so little logic // it's clearer to just implement them here	WITHOUT_CLASSIFICATION	0.7460693834789368	WITHOUT_CLASSIFICATION	0.2539306165210632	DESIGN
// If JBC is using INVALIDATION, we don't want to propagate changes. // We use the Timestamps cache to manage invalidation	WITHOUT_CLASSIFICATION	0.9999880008301015	WITHOUT_CLASSIFICATION	1.1999169898584764E-5	DESIGN
// We don't want to waste effort setting an option if JBC is // already in LOCAL mode. If JBC is REPL_(A)SYNC then check // if they passed an config option to disable query replication	WITHOUT_CLASSIFICATION	0.9999397427484401	WITHOUT_CLASSIFICATION	6.025725155986605E-5	DESIGN
// Don't hold the JBC node lock throughout the tx, as that // prevents updates // Add a zero (or low) timeout option so we don't block // waiting for tx's that did a put to commit	WITHOUT_CLASSIFICATION	0.9999973139099929	WITHOUT_CLASSIFICATION	2.6860900071280827E-6	DESIGN
// Double check the distributed cache	WITHOUT_CLASSIFICATION	0.9999952649787197	WITHOUT_CLASSIFICATION	4.735021280249649E-6	DESIGN
// Get an exclusive right to update JBC for this key from this node.	WITHOUT_CLASSIFICATION	0.99708484165318	WITHOUT_CLASSIFICATION	0.002915158346819959	DESIGN
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999993484593777	WITHOUT_CLASSIFICATION	6.515406223923911E-7	DESIGN
// Initial load from JBC	WITHOUT_CLASSIFICATION	0.9999722516828462	WITHOUT_CLASSIFICATION	2.7748317153839537E-5	DESIGN
// See if we had a 2nd invalidation from the same initial // preinvalidation timestamp. If so, only increment // if the new current value is an increase	WITHOUT_CLASSIFICATION	0.9999581604487344	WITHOUT_CLASSIFICATION	4.183955126559989E-5	DESIGN
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999993484593777	WITHOUT_CLASSIFICATION	6.515406223923911E-7	DESIGN
// If the workspace node has null as well, OK; if not we've // been modified in a non-comparable manner, which we have to // treat as us being newer	WITHOUT_CLASSIFICATION	0.9999996597042059	WITHOUT_CLASSIFICATION	3.4029579405904173E-7	DESIGN
// The standard comparator types are not Serializable but are singletons	WITHOUT_CLASSIFICATION	0.9999976002925474	WITHOUT_CLASSIFICATION	2.3997074525980146E-6	DESIGN
// ignore!	WITHOUT_CLASSIFICATION	0.9999954979090697	WITHOUT_CLASSIFICATION	4.502090930243445E-6	DESIGN
// ignore it	WITHOUT_CLASSIFICATION	0.9999973218505698	WITHOUT_CLASSIFICATION	2.678149430265873E-6	DESIGN
// construct the cache	WITHOUT_CLASSIFICATION	0.9999982030492333	WITHOUT_CLASSIFICATION	1.7969507667457895E-6	DESIGN
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.999977729005283	WITHOUT_CLASSIFICATION	2.2270994716963067E-5	DESIGN
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.999977729005283	WITHOUT_CLASSIFICATION	2.2270994716963067E-5	DESIGN
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999889703788901	WITHOUT_CLASSIFICATION	1.102962110985757E-5	DESIGN
//swaldman 2006-08-28: define c3p0-style configuration parameters for initialPoolSize, which //                     hibernate sensibly lets default to minPoolSize, but we'll let users //                     override it with the c3p0-style property if they want.	WITHOUT_CLASSIFICATION	0.9996822442895518	WITHOUT_CLASSIFICATION	3.177557104482762E-4	DESIGN
/*DataSource unpooled = DataSources.unpooledDataSource(	WITHOUT_CLASSIFICATION	0.9999920094652139	WITHOUT_CLASSIFICATION	7.99053478608268E-6	DESIGN
// TRUE if the pool is borrowed from the outside, FALSE if we used to create it	WITHOUT_CLASSIFICATION	0.927341030986369	WITHOUT_CLASSIFICATION	0.07265896901363099	DESIGN
// get a connection from the pool (thru DriverManager, cfr. Proxool doc)	WITHOUT_CLASSIFICATION	0.9999838241988885	WITHOUT_CLASSIFICATION	1.6175801111438793E-5	DESIGN
// set the Transaction Isolation if defined	WITHOUT_CLASSIFICATION	0.999998621722376	WITHOUT_CLASSIFICATION	1.3782776240717097E-6	DESIGN
// toggle autoCommit to false if set	WITHOUT_CLASSIFICATION	0.9999995742005934	WITHOUT_CLASSIFICATION	4.2579940664700996E-7	DESIGN
// return the connection	WITHOUT_CLASSIFICATION	0.9999701024163032	WITHOUT_CLASSIFICATION	2.9897583696723796E-5	DESIGN
// Get the configurator files (if available)	WITHOUT_CLASSIFICATION	0.9999997312758562	WITHOUT_CLASSIFICATION	2.687241438553202E-7	DESIGN
// Default the Proxool alias setting	WITHOUT_CLASSIFICATION	0.9999999506631588	WITHOUT_CLASSIFICATION	4.9336841217625984E-8	DESIGN
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999617504697291	WITHOUT_CLASSIFICATION	3.8249530270945026E-5	DESIGN
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999617504697291	WITHOUT_CLASSIFICATION	3.8249530270945026E-5	DESIGN
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999998560737955	WITHOUT_CLASSIFICATION	1.43926204639038E-7	DESIGN
// Set the existing pool flag to true	WITHOUT_CLASSIFICATION	0.9999992790614061	WITHOUT_CLASSIFICATION	7.209385939947336E-7	DESIGN
// Configured using the JAXP Configurator	WITHOUT_CLASSIFICATION	0.9999803869002539	WITHOUT_CLASSIFICATION	1.9613099746167252E-5	DESIGN
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999617504697291	WITHOUT_CLASSIFICATION	3.8249530270945026E-5	DESIGN
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999998560737955	WITHOUT_CLASSIFICATION	1.43926204639038E-7	DESIGN
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999998560737955	WITHOUT_CLASSIFICATION	1.43926204639038E-7	DESIGN
// Configured using the Properties File Configurator	WITHOUT_CLASSIFICATION	0.9999950536425415	WITHOUT_CLASSIFICATION	4.9463574584755694E-6	DESIGN
// Remember Isolation level	WITHOUT_CLASSIFICATION	0.9999866436245467	WITHOUT_CLASSIFICATION	1.3356375453227694E-5	DESIGN
// If the provider was leeching off an existing pool don't close it	WITHOUT_CLASSIFICATION	0.9999992931446645	WITHOUT_CLASSIFICATION	7.068553354647917E-7	DESIGN
// We have created the pool ourselves, so shut it down	WITHOUT_CLASSIFICATION	0.9998956503159828	WITHOUT_CLASSIFICATION	1.0434968401706871E-4	DESIGN
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.9995704199902852	WITHOUT_CLASSIFICATION	4.295800097147569E-4	DESIGN
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.9995704199902852	WITHOUT_CLASSIFICATION	4.295800097147569E-4	DESIGN
//always overwrite nonversioned data	WITHOUT_CLASSIFICATION	0.9999999799761181	WITHOUT_CLASSIFICATION	2.002388193128271E-8	DESIGN
//public Currency getCurrency(int col) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9943768265192451	WITHOUT_CLASSIFICATION	0.005623173480754905	DESIGN
// default is POJO	WITHOUT_CLASSIFICATION	0.9999950760990324	WITHOUT_CLASSIFICATION	4.923900967627519E-6	DESIGN
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.999999830264484	WITHOUT_CLASSIFICATION	1.697355160038011E-7	DESIGN
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.999999830264484	WITHOUT_CLASSIFICATION	1.697355160038011E-7	DESIGN
//private CacheEntry cacheEntry;	WITHOUT_CLASSIFICATION	0.9999339817503233	WITHOUT_CLASSIFICATION	6.601824967677691E-5	DESIGN
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9999852207132885	WITHOUT_CLASSIFICATION	1.4779286711341653E-5	DESIGN
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9996121433237947	WITHOUT_CLASSIFICATION	3.878566762053381E-4	DESIGN
// get the updated snapshot of the entity state by cloning current state; // it is safe to copy in place, since by this time no-one else (should have) // has a reference  to the array	WITHOUT_CLASSIFICATION	0.9877782077612361	WITHOUT_CLASSIFICATION	0.012221792238763931	DESIGN
// this entity defines proeprty generation, so process those generated // values...	WITHOUT_CLASSIFICATION	0.9999413340114162	WITHOUT_CLASSIFICATION	5.866598858379168E-5	DESIGN
// have the entity entry perform post-update processing, passing it the // update state and the new version (if one).	WITHOUT_CLASSIFICATION	0.9999999207532984	WITHOUT_CLASSIFICATION	7.924670168639794E-8	DESIGN
/*!persister.isCacheInvalidationRequired()*/	WITHOUT_CLASSIFICATION	0.9999686091797412	WITHOUT_CLASSIFICATION	3.139082025878928E-5	DESIGN
// need to look it up from the persistence-context	WITHOUT_CLASSIFICATION	0.9998922850902571	WITHOUT_CLASSIFICATION	1.0771490974291893E-4	DESIGN
//sort first by role name	WITHOUT_CLASSIFICATION	0.9995948783843626	WITHOUT_CLASSIFICATION	4.0512161563750456E-4	DESIGN
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9996121433237947	WITHOUT_CLASSIFICATION	3.878566762053381E-4	DESIGN
//then by fk	WITHOUT_CLASSIFICATION	0.9998996938686461	WITHOUT_CLASSIFICATION	1.0030613135384341E-4	DESIGN
// nothing to do	WITHOUT_CLASSIFICATION	0.9998987989888541	WITHOUT_CLASSIFICATION	1.0120101114584414E-4	DESIGN
// nothing to do	WITHOUT_CLASSIFICATION	0.9998987989888541	WITHOUT_CLASSIFICATION	1.0120101114584414E-4	DESIGN
// an existing collection that was either non-empty or uninitialized // is replaced by null or a different collection // (if the collection is uninitialized, hibernate has no way of // knowing if the collection is actually empty without querying the db)	WITHOUT_CLASSIFICATION	0.9999705941544027	WITHOUT_CLASSIFICATION	2.9405845597241134E-5	DESIGN
// this method is called when a new non-null collection is persisted // or when an existing (non-null) collection is moved to a new owner	WITHOUT_CLASSIFICATION	0.9999979336207077	WITHOUT_CLASSIFICATION	2.066379292308314E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999609652327096	WITHOUT_CLASSIFICATION	3.903476729039761E-5	DESIGN
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9999938148286575	WITHOUT_CLASSIFICATION	6.185171342596893E-6	DESIGN
//do nothing - we only need to notify the cache...	WITHOUT_CLASSIFICATION	0.9998820961771945	WITHOUT_CLASSIFICATION	1.1790382280553997E-4	DESIGN
//sort first by entity name	WITHOUT_CLASSIFICATION	0.9997986062790908	WITHOUT_CLASSIFICATION	2.0139372090917913E-4	DESIGN
//then by id	WITHOUT_CLASSIFICATION	0.9995349689219997	WITHOUT_CLASSIFICATION	4.650310780003456E-4	DESIGN
// to be safe...	WITHOUT_CLASSIFICATION	0.9998794031515053	WITHOUT_CLASSIFICATION	1.2059684849485464E-4	DESIGN
// no transformations took place, so handle it as we would a // non-instrumented class	WITHOUT_CLASSIFICATION	0.9989909422907848	WITHOUT_CLASSIFICATION	0.0010090577092152972	DESIGN
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999995017190165	WITHOUT_CLASSIFICATION	4.98280983435377E-7	DESIGN
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999995017190165	WITHOUT_CLASSIFICATION	4.98280983435377E-7	DESIGN
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999984075890407	WITHOUT_CLASSIFICATION	1.5924109593563303E-6	DESIGN
//test out the optimizer:	WITHOUT_CLASSIFICATION	0.9999693134594084	WITHOUT_CLASSIFICATION	3.068654059153055E-5	DESIGN
// set the name of bulk accessor.	WITHOUT_CLASSIFICATION	0.9999999301799242	WITHOUT_CLASSIFICATION	6.982007582655703E-8	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.9999987542781822	WITHOUT_CLASSIFICATION	1.2457218177964024E-6	DESIGN
// invokespecial	WITHOUT_CLASSIFICATION	0.9999940096535969	WITHOUT_CLASSIFICATION	5.990346403215733E-6	DESIGN
// return	WITHOUT_CLASSIFICATION	0.9999916923202488	WITHOUT_CLASSIFICATION	8.307679751303787E-6	DESIGN
// aload_1 // load bean	WITHOUT_CLASSIFICATION	0.9999948872071756	WITHOUT_CLASSIFICATION	5.1127928244275126E-6	DESIGN
// checkcast // cast bean	WITHOUT_CLASSIFICATION	0.9999979727821742	WITHOUT_CLASSIFICATION	2.0272178258829023E-6	DESIGN
// astore_3 // store bean	WITHOUT_CLASSIFICATION	0.9999995420822375	WITHOUT_CLASSIFICATION	4.57917762519348E-7	DESIGN
// aload_2 // args	WITHOUT_CLASSIFICATION	0.999998874209446	WITHOUT_CLASSIFICATION	1.1257905539968979E-6	DESIGN
// iconst_i // continue to aastore // growing stack is 1	WITHOUT_CLASSIFICATION	0.9999988376496242	WITHOUT_CLASSIFICATION	1.1623503757286677E-6	DESIGN
// new	WITHOUT_CLASSIFICATION	0.9999844488957614	WITHOUT_CLASSIFICATION	1.555110423847609E-5	DESIGN
// dup	WITHOUT_CLASSIFICATION	0.9999917796709384	WITHOUT_CLASSIFICATION	8.220329061558027E-6	DESIGN
// aload_3 // load the raw bean	WITHOUT_CLASSIFICATION	0.999998496888598	WITHOUT_CLASSIFICATION	1.5031114020957873E-6	DESIGN
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999922439424876	WITHOUT_CLASSIFICATION	7.756057512368408E-6	DESIGN
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999981291260425	WITHOUT_CLASSIFICATION	1.8708739574828334E-6	DESIGN
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999981291260425	WITHOUT_CLASSIFICATION	1.8708739574828334E-6	DESIGN
// aastore // args	WITHOUT_CLASSIFICATION	0.9999995986622476	WITHOUT_CLASSIFICATION	4.013377522893188E-7	DESIGN
/* | this | bean | args | i | raw bean | exception | */	WITHOUT_CLASSIFICATION	0.9998541094643051	WITHOUT_CLASSIFICATION	1.4589053569483075E-4	DESIGN
// required to exception table // iconst_0 // i	WITHOUT_CLASSIFICATION	0.9999989122426531	WITHOUT_CLASSIFICATION	1.0877573468320151E-6	DESIGN
// istore_3 // store i	WITHOUT_CLASSIFICATION	0.9999938207651481	WITHOUT_CLASSIFICATION	6.1792348518944324E-6	DESIGN
// aload_1 // load the bean	WITHOUT_CLASSIFICATION	0.9999986642390405	WITHOUT_CLASSIFICATION	1.335760959487521E-6	DESIGN
// checkcast // cast the bean into a raw bean	WITHOUT_CLASSIFICATION	0.9999990362048022	WITHOUT_CLASSIFICATION	9.637951976829953E-7	DESIGN
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999934463134578	WITHOUT_CLASSIFICATION	6.553686542124218E-6	DESIGN
// start region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9998718841067122	WITHOUT_CLASSIFICATION	1.281158932877593E-4	DESIGN
// iinc 3, 1	WITHOUT_CLASSIFICATION	0.999997433362775	WITHOUT_CLASSIFICATION	2.566637224940616E-6	DESIGN
// aload 4 // load the raw bean	WITHOUT_CLASSIFICATION	0.9999963804076647	WITHOUT_CLASSIFICATION	3.6195923354298276E-6	DESIGN
// aload_2 // load the args	WITHOUT_CLASSIFICATION	0.9999995513537429	WITHOUT_CLASSIFICATION	4.486462572064816E-7	DESIGN
// iconst_i	WITHOUT_CLASSIFICATION	0.999992370230453	WITHOUT_CLASSIFICATION	7.629769547075329E-6	DESIGN
// aaload	WITHOUT_CLASSIFICATION	0.9999970126024951	WITHOUT_CLASSIFICATION	2.9873975049739103E-6	DESIGN
// checkcast	WITHOUT_CLASSIFICATION	0.9999958134873622	WITHOUT_CLASSIFICATION	4.18651263773068E-6	DESIGN
// checkcast (case of primitive type) // invokevirtual (case of primitive type)	WITHOUT_CLASSIFICATION	0.9999994954185734	WITHOUT_CLASSIFICATION	5.045814267016378E-7	DESIGN
// checkcast (case of reference type)	WITHOUT_CLASSIFICATION	0.9999991280193573	WITHOUT_CLASSIFICATION	8.71980642578216E-7	DESIGN
/* current stack len = 2 */	WITHOUT_CLASSIFICATION	0.9999962108331952	WITHOUT_CLASSIFICATION	3.7891668047785926E-6	DESIGN
// end region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9998973823433553	WITHOUT_CLASSIFICATION	1.0261765664464248E-4	DESIGN
// register in exception table	WITHOUT_CLASSIFICATION	0.9999900640862298	WITHOUT_CLASSIFICATION	9.935913770204113E-6	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.9999987542781822	WITHOUT_CLASSIFICATION	1.2457218177964024E-6	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.9999987542781822	WITHOUT_CLASSIFICATION	1.2457218177964024E-6	DESIGN
// return	WITHOUT_CLASSIFICATION	0.9999916923202488	WITHOUT_CLASSIFICATION	8.307679751303787E-6	DESIGN
// return	WITHOUT_CLASSIFICATION	0.9999916923202488	WITHOUT_CLASSIFICATION	8.307679751303787E-6	DESIGN
// dup	WITHOUT_CLASSIFICATION	0.9999917796709384	WITHOUT_CLASSIFICATION	8.220329061558027E-6	DESIGN
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999981291260425	WITHOUT_CLASSIFICATION	1.8708739574828334E-6	DESIGN
// checkcast	WITHOUT_CLASSIFICATION	0.9999958134873622	WITHOUT_CLASSIFICATION	4.18651263773068E-6	DESIGN
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.9999999265215641	WITHOUT_CLASSIFICATION	7.347843580418595E-8	DESIGN
// astore 5 // store exception	WITHOUT_CLASSIFICATION	0.9999935224158627	WITHOUT_CLASSIFICATION	6.4775841372193095E-6	DESIGN
// new // BulkAccessorException	WITHOUT_CLASSIFICATION	0.9999351455892206	WITHOUT_CLASSIFICATION	6.485441077938765E-5	DESIGN
// aload 5 // load exception	WITHOUT_CLASSIFICATION	0.9999649487482777	WITHOUT_CLASSIFICATION	3.50512517222943E-5	DESIGN
// iload_3 // i	WITHOUT_CLASSIFICATION	0.9999869564757975	WITHOUT_CLASSIFICATION	1.3043524202434822E-5	DESIGN
// invokespecial // BulkAccessorException.<init>	WITHOUT_CLASSIFICATION	0.9999980135773198	WITHOUT_CLASSIFICATION	1.986422680270764E-6	DESIGN
// athrow	WITHOUT_CLASSIFICATION	0.9999995361818023	WITHOUT_CLASSIFICATION	4.6381819775156996E-7	DESIGN
// WARNING: classfile only	WITHOUT_CLASSIFICATION	0.9999679678039664	WITHOUT_CLASSIFICATION	3.203219603364119E-5	DESIGN
//swallow	WITHOUT_CLASSIFICATION	0.9999894538354113	WITHOUT_CLASSIFICATION	1.05461645887328E-5	DESIGN
/* local variable | this | */	WITHOUT_CLASSIFICATION	0.9999412891580661	WITHOUT_CLASSIFICATION	5.871084193384256E-5	DESIGN
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.9999248576976882	WITHOUT_CLASSIFICATION	7.51423023117628E-5	DESIGN
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.9999248576976882	WITHOUT_CLASSIFICATION	7.51423023117628E-5	DESIGN
// getfield // get field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999991542753315	WITHOUT_CLASSIFICATION	8.457246685031687E-7	DESIGN
// areturn // return the value of the field	WITHOUT_CLASSIFICATION	0.9999997438592518	WITHOUT_CLASSIFICATION	2.5614074817405895E-7	DESIGN
/* local variables | this | callback | */	WITHOUT_CLASSIFICATION	0.9992493576127445	WITHOUT_CLASSIFICATION	7.506423872555737E-4	DESIGN
// aload_1 // load callback	WITHOUT_CLASSIFICATION	0.9999556198672757	WITHOUT_CLASSIFICATION	4.438013272442257E-5	DESIGN
// putfield // put field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999965994474583	WITHOUT_CLASSIFICATION	3.400552541628351E-6	DESIGN
// case of non-static field	WITHOUT_CLASSIFICATION	0.9999972072785757	WITHOUT_CLASSIFICATION	2.7927214244312344E-6	DESIGN
// getfield // get each field	WITHOUT_CLASSIFICATION	0.999998057858791	WITHOUT_CLASSIFICATION	1.9421412090034617E-6	DESIGN
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999992943504237	WITHOUT_CLASSIFICATION	7.056495762865274E-7	DESIGN
// ifnonnull	WITHOUT_CLASSIFICATION	0.9999948948189777	WITHOUT_CLASSIFICATION	5.105181022293222E-6	DESIGN
// *return // each type	WITHOUT_CLASSIFICATION	0.9999989725070211	WITHOUT_CLASSIFICATION	1.027492978897888E-6	DESIGN
// *return // each type	WITHOUT_CLASSIFICATION	0.9999989725070211	WITHOUT_CLASSIFICATION	1.027492978897888E-6	DESIGN
// *store_1 // each type	WITHOUT_CLASSIFICATION	0.999999391066424	WITHOUT_CLASSIFICATION	6.08933575923851E-7	DESIGN
// ldc // name of the field	WITHOUT_CLASSIFICATION	0.9999983791627656	WITHOUT_CLASSIFICATION	1.620837234476178E-6	DESIGN
// *load_1 // each type	WITHOUT_CLASSIFICATION	0.9999978950104454	WITHOUT_CLASSIFICATION	2.104989554567292E-6	DESIGN
// invokeinterface // invoke Callback.read*() // each type	WITHOUT_CLASSIFICATION	0.9999648174675524	WITHOUT_CLASSIFICATION	3.5182532447664026E-5	DESIGN
// int	WITHOUT_CLASSIFICATION	0.9999898983392317	WITHOUT_CLASSIFICATION	1.010166076837813E-5	DESIGN
// return	WITHOUT_CLASSIFICATION	0.9999916923202488	WITHOUT_CLASSIFICATION	8.307679751303787E-6	DESIGN
// dup	WITHOUT_CLASSIFICATION	0.9999917796709384	WITHOUT_CLASSIFICATION	8.220329061558027E-6	DESIGN
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999922439424876	WITHOUT_CLASSIFICATION	7.756057512368408E-6	DESIGN
// checkcast	WITHOUT_CLASSIFICATION	0.9999958134873622	WITHOUT_CLASSIFICATION	4.18651263773068E-6	DESIGN
// checkcast	WITHOUT_CLASSIFICATION	0.9999958134873622	WITHOUT_CLASSIFICATION	4.18651263773068E-6	DESIGN
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999995227750446	WITHOUT_CLASSIFICATION	4.772249554915585E-7	DESIGN
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999995227750446	WITHOUT_CLASSIFICATION	4.772249554915585E-7	DESIGN
// ifnonnull (label1)	WITHOUT_CLASSIFICATION	0.9999952847694464	WITHOUT_CLASSIFICATION	4.7152305535745665E-6	DESIGN
// *load_1	WITHOUT_CLASSIFICATION	0.9999967717460063	WITHOUT_CLASSIFICATION	3.2282539936344107E-6	DESIGN
// *load_1	WITHOUT_CLASSIFICATION	0.9999967717460063	WITHOUT_CLASSIFICATION	3.2282539936344107E-6	DESIGN
// putfield	WITHOUT_CLASSIFICATION	0.9999903124363001	WITHOUT_CLASSIFICATION	9.687563699898993E-6	DESIGN
// return ;	WITHOUT_CLASSIFICATION	0.9999924230183675	WITHOUT_CLASSIFICATION	7.576981632437966E-6	DESIGN
// ldc // field name	WITHOUT_CLASSIFICATION	0.9999975621001289	WITHOUT_CLASSIFICATION	2.4378998711091496E-6	DESIGN
// getfield // old value of the field	WITHOUT_CLASSIFICATION	0.9999994766467757	WITHOUT_CLASSIFICATION	5.233532242415794E-7	DESIGN
// invokeinterface // callback.write*(..)	WITHOUT_CLASSIFICATION	0.9999282522253258	WITHOUT_CLASSIFICATION	7.174777467422226E-5	DESIGN
// reference type	WITHOUT_CLASSIFICATION	0.9999791063372067	WITHOUT_CLASSIFICATION	2.089366279333375E-5	DESIGN
// reference type	WITHOUT_CLASSIFICATION	0.9999791063372067	WITHOUT_CLASSIFICATION	2.089366279333375E-5	DESIGN
// not array	WITHOUT_CLASSIFICATION	0.9999702156514103	WITHOUT_CLASSIFICATION	2.9784348589605117E-5	DESIGN
// array of reference type	WITHOUT_CLASSIFICATION	0.9999896061963238	WITHOUT_CLASSIFICATION	1.0393803676178962E-5	DESIGN
// boolean	WITHOUT_CLASSIFICATION	0.9999998391560821	WITHOUT_CLASSIFICATION	1.6084391788415403E-7	DESIGN
// byte	WITHOUT_CLASSIFICATION	0.9999962204602849	WITHOUT_CLASSIFICATION	3.779539714931514E-6	DESIGN
// char	WITHOUT_CLASSIFICATION	0.9999988507339599	WITHOUT_CLASSIFICATION	1.1492660401241052E-6	DESIGN
// short	WITHOUT_CLASSIFICATION	0.9999930057488058	WITHOUT_CLASSIFICATION	6.994251194200574E-6	DESIGN
// double	WITHOUT_CLASSIFICATION	0.9999919274198684	WITHOUT_CLASSIFICATION	8.07258013156936E-6	DESIGN
// float	WITHOUT_CLASSIFICATION	0.9999957785726864	WITHOUT_CLASSIFICATION	4.221427313587142E-6	DESIGN
// float	WITHOUT_CLASSIFICATION	0.9999957785726864	WITHOUT_CLASSIFICATION	4.221427313587142E-6	DESIGN
// long	WITHOUT_CLASSIFICATION	0.999998508164061	WITHOUT_CLASSIFICATION	1.4918359389349414E-6	DESIGN
// long	WITHOUT_CLASSIFICATION	0.999998508164061	WITHOUT_CLASSIFICATION	1.4918359389349414E-6	DESIGN
// bad type	WITHOUT_CLASSIFICATION	0.9999255547076223	WITHOUT_CLASSIFICATION	7.444529237765489E-5	DESIGN
// bad type	WITHOUT_CLASSIFICATION	0.9999255547076223	WITHOUT_CLASSIFICATION	7.444529237765489E-5	DESIGN
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999994401657806	WITHOUT_CLASSIFICATION	5.598342194877156E-7	DESIGN
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999994401657806	WITHOUT_CLASSIFICATION	5.598342194877156E-7	DESIGN
// reference type	WITHOUT_CLASSIFICATION	0.9999791063372067	WITHOUT_CLASSIFICATION	2.089366279333375E-5	DESIGN
// double	WITHOUT_CLASSIFICATION	0.9999919274198684	WITHOUT_CLASSIFICATION	8.07258013156936E-6	DESIGN
// float	WITHOUT_CLASSIFICATION	0.9999957785726864	WITHOUT_CLASSIFICATION	4.221427313587142E-6	DESIGN
// float	WITHOUT_CLASSIFICATION	0.9999957785726864	WITHOUT_CLASSIFICATION	4.221427313587142E-6	DESIGN
// long	WITHOUT_CLASSIFICATION	0.999998508164061	WITHOUT_CLASSIFICATION	1.4918359389349414E-6	DESIGN
// bad type	WITHOUT_CLASSIFICATION	0.9999255547076223	WITHOUT_CLASSIFICATION	7.444529237765489E-5	DESIGN
// bad type	WITHOUT_CLASSIFICATION	0.9999255547076223	WITHOUT_CLASSIFICATION	7.444529237765489E-5	DESIGN
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999994401657806	WITHOUT_CLASSIFICATION	5.598342194877156E-7	DESIGN
// skip finalize methods	WITHOUT_CLASSIFICATION	0.9999733424533126	WITHOUT_CLASSIFICATION	2.6657546687400894E-5	DESIGN
//Mainly for OSCache	WITHOUT_CLASSIFICATION	0.9999415318011768	WITHOUT_CLASSIFICATION	5.846819882320319E-5	DESIGN
//decrement the lock	WITHOUT_CLASSIFICATION	0.9999707672467258	WITHOUT_CLASSIFICATION	2.9232753274129546E-5	DESIGN
// create new lock that times out immediately	WITHOUT_CLASSIFICATION	0.9999931408396224	WITHOUT_CLASSIFICATION	6.859160377554572E-6	DESIGN
//recache the updated state	WITHOUT_CLASSIFICATION	0.9998310838193166	WITHOUT_CLASSIFICATION	1.68916180683315E-4	DESIGN
// noop	WITHOUT_CLASSIFICATION	0.9999926672296156	WITHOUT_CLASSIFICATION	7.332770384418515E-6	DESIGN
//null clientLock is remotely possible but will never happen in practice	WITHOUT_CLASSIFICATION	0.9989665601135008	WITHOUT_CLASSIFICATION	0.0010334398864991973	DESIGN
// we really could refresh the item if it // is not a lock, but it might be slower //return freshTimestamp < txTimestamp	WITHOUT_CLASSIFICATION	0.9535261329493717	WITHOUT_CLASSIFICATION	0.04647386705062832	DESIGN
//by requiring <, we rely on lock timeout in the case of an unsuccessful update!	WITHOUT_CLASSIFICATION	0.9999861083962039	WITHOUT_CLASSIFICATION	1.389160379613506E-5	DESIGN
// the user provided resulttransformer, not the one used with "select new". Here to avoid mangling // transformed/non-transformed results.	WITHOUT_CLASSIFICATION	0.9999978652733561	WITHOUT_CLASSIFICATION	2.134726643900289E-6	DESIGN
// disassemble positional parameters	WITHOUT_CLASSIFICATION	0.9999998864785962	WITHOUT_CLASSIFICATION	1.1352140386304065E-7	DESIGN
// disassemble named parameters	WITHOUT_CLASSIFICATION	0.9999985072272081	WITHOUT_CLASSIFICATION	1.4927727918574491E-6	DESIGN
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999889703788901	WITHOUT_CLASSIFICATION	1.102962110985757E-5	DESIGN
// noop	WITHOUT_CLASSIFICATION	0.9999926672296156	WITHOUT_CLASSIFICATION	7.332770384418515E-6	DESIGN
//noop	WITHOUT_CLASSIFICATION	0.9999762672983193	WITHOUT_CLASSIFICATION	2.3732701680686024E-5	DESIGN
//noop	WITHOUT_CLASSIFICATION	0.9999762672983193	WITHOUT_CLASSIFICATION	2.3732701680686024E-5	DESIGN
// this is called from SettingsFactory irregardless; trivial to simply disregard	WITHOUT_CLASSIFICATION	0.9970829236710997	WITHOUT_CLASSIFICATION	0.002917076328900324	DESIGN
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9989931720396895	WITHOUT_CLASSIFICATION	0.0010068279603105308	DESIGN
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9989931720396895	WITHOUT_CLASSIFICATION	0.0010068279603105308	DESIGN
//throw new UnsupportedOperationException("Can't write to a readonly object");	WITHOUT_CLASSIFICATION	0.9998364025028684	WITHOUT_CLASSIFICATION	1.6359749713146674E-4	DESIGN
//assembled state gets put in a new array (we read from cache by value!)	WITHOUT_CLASSIFICATION	0.9995795616091425	WITHOUT_CLASSIFICATION	4.204383908574592E-4	DESIGN
//persister.setIdentifier(result, id); //before calling interceptor, for consistency with normal load	WITHOUT_CLASSIFICATION	0.9999980081386997	WITHOUT_CLASSIFICATION	1.991861300426037E-6	DESIGN
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9981439680611314	WITHOUT_CLASSIFICATION	0.0018560319388685438	DESIGN
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9981439680611314	WITHOUT_CLASSIFICATION	0.0018560319388685438	DESIGN
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.999986958736285	WITHOUT_CLASSIFICATION	1.3041263715074532E-5	DESIGN
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9915023288361202	WITHOUT_CLASSIFICATION	0.008497671163879847	DESIGN
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9915023288361202	WITHOUT_CLASSIFICATION	0.008497671163879847	DESIGN
// classes mentioned in extends not available - so put it in queue	WITHOUT_CLASSIFICATION	0.9999868295402737	WITHOUT_CLASSIFICATION	1.3170459726258512E-5	DESIGN
// get meta's from <hibernate-mapping>	WITHOUT_CLASSIFICATION	0.9999926148991438	WITHOUT_CLASSIFICATION	7.385100856167825E-6	DESIGN
// get meta's from <class>	WITHOUT_CLASSIFICATION	0.9999959345985716	WITHOUT_CLASSIFICATION	4.0654014283505714E-6	DESIGN
// DB-OBJECTNAME	WITHOUT_CLASSIFICATION	0.9999788701555296	WITHOUT_CLASSIFICATION	2.112984447050098E-5	DESIGN
// MUTABLE	WITHOUT_CLASSIFICATION	0.9999875434851384	WITHOUT_CLASSIFICATION	1.245651486163708E-5	DESIGN
// WHERE	WITHOUT_CLASSIFICATION	0.9999870270010297	WITHOUT_CLASSIFICATION	1.2972998970335363E-5	DESIGN
// CHECK	WITHOUT_CLASSIFICATION	0.999989601563739	WITHOUT_CLASSIFICATION	1.0398436261027028E-5	DESIGN
// POLYMORPHISM	WITHOUT_CLASSIFICATION	0.9999813689637135	WITHOUT_CLASSIFICATION	1.863103628648546E-5	DESIGN
// TODO:	WITHOUT_CLASSIFICATION	0.6111165402571258	DESIGN	0.3888834597428741	WITHOUT_CLASSIFICATION
// ID	WITHOUT_CLASSIFICATION	0.9999964667909284	WITHOUT_CLASSIFICATION	3.533209071687084E-6	DESIGN
// VERSION / TIMESTAMP	WITHOUT_CLASSIFICATION	0.9999735586336647	WITHOUT_CLASSIFICATION	2.6441366335273463E-5	DESIGN
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999697027060397	WITHOUT_CLASSIFICATION	3.0297293960339745E-5	DESIGN
// Primary key constraint	WITHOUT_CLASSIFICATION	0.999995175768707	WITHOUT_CLASSIFICATION	4.824231293068315E-6	DESIGN
// this is either a <version/> tag with no type attribute, // or a <timestamp/> tag	WITHOUT_CLASSIFICATION	0.9999983784748998	WITHOUT_CLASSIFICATION	1.6215251002280203E-6	DESIGN
// for version properties marked as being generated, make sure they are "always" // generated; aka, "insert" is invalid; this is dis-allowed by the DTD, // but just to make sure...	WITHOUT_CLASSIFICATION	0.99999979860847	WITHOUT_CLASSIFICATION	2.0139153004277783E-7	DESIGN
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999697027060397	WITHOUT_CLASSIFICATION	3.0297293960339745E-5	DESIGN
// ( (Column) discrim.getColumnIterator().next() ).setType(type);	WITHOUT_CLASSIFICATION	0.9999934881166647	WITHOUT_CLASSIFICATION	6.511883335389325E-6	DESIGN
// go ahead and set the lazy here, since pojo.proxy can override it.	WITHOUT_CLASSIFICATION	0.9999967585777745	WITHOUT_CLASSIFICATION	3.2414222255443775E-6	DESIGN
// DYNAMIC UPDATE	WITHOUT_CLASSIFICATION	0.9999697706709839	WITHOUT_CLASSIFICATION	3.0229329016005007E-5	DESIGN
// IMPORT	WITHOUT_CLASSIFICATION	0.9999902068390575	WITHOUT_CLASSIFICATION	9.793160942542235E-6	DESIGN
// BATCH SIZE	WITHOUT_CLASSIFICATION	0.9999519691983374	WITHOUT_CLASSIFICATION	4.803080166267951E-5	DESIGN
// SELECT BEFORE UPDATE	WITHOUT_CLASSIFICATION	0.9999179955667987	WITHOUT_CLASSIFICATION	8.200443320131274E-5	DESIGN
// OPTIMISTIC LOCK MODE	WITHOUT_CLASSIFICATION	0.9999629201137209	WITHOUT_CLASSIFICATION	3.7079886279058744E-5	DESIGN
// PERSISTER	WITHOUT_CLASSIFICATION	0.9999821307697703	WITHOUT_CLASSIFICATION	1.786923022970731E-5	DESIGN
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999743208295367	WITHOUT_CLASSIFICATION	2.5679170463267636E-5	DESIGN
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999935728922593	WITHOUT_CLASSIFICATION	6.427107740673827E-6	DESIGN
// properties	WITHOUT_CLASSIFICATION	0.9999843372914167	WITHOUT_CLASSIFICATION	1.5662708583322246E-5	DESIGN
// joined subclasses	WITHOUT_CLASSIFICATION	0.9999867706690363	WITHOUT_CLASSIFICATION	1.322933096368695E-5	DESIGN
// KEY	WITHOUT_CLASSIFICATION	0.9999928080156515	WITHOUT_CLASSIFICATION	7.191984348486441E-6	DESIGN
// CHECK	WITHOUT_CLASSIFICATION	0.999989601563739	WITHOUT_CLASSIFICATION	1.0398436261027028E-5	DESIGN
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999743208295367	WITHOUT_CLASSIFICATION	2.5679170463267636E-5	DESIGN
// properties	WITHOUT_CLASSIFICATION	0.9999843372914167	WITHOUT_CLASSIFICATION	1.5662708583322246E-5	DESIGN
// KEY	WITHOUT_CLASSIFICATION	0.9999928080156515	WITHOUT_CLASSIFICATION	7.191984348486441E-6	DESIGN
// model.getKey().setType( new Type( model.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.999999507542292	WITHOUT_CLASSIFICATION	4.92457708051282E-7	DESIGN
// TABLENAME	WITHOUT_CLASSIFICATION	0.9999326659923841	WITHOUT_CLASSIFICATION	6.733400761599048E-5	DESIGN
// join.getKey().setType( new Type( lazz.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999993957346557	WITHOUT_CLASSIFICATION	6.04265344340155E-7	DESIGN
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999553764318262	WITHOUT_CLASSIFICATION	4.46235681737848E-5	DESIGN
// COLUMN(S)	WITHOUT_CLASSIFICATION	0.9999964380550687	WITHOUT_CLASSIFICATION	3.5619449313960385E-6	DESIGN
// column index	WITHOUT_CLASSIFICATION	0.9999986346411123	WITHOUT_CLASSIFICATION	1.3653588876829867E-6	DESIGN
//column unique-key	WITHOUT_CLASSIFICATION	0.9999708739492701	WITHOUT_CLASSIFICATION	2.9126050729847723E-5	DESIGN
// automatically makes a column with the default name if none is specifed by XML	WITHOUT_CLASSIFICATION	0.999989887511071	WITHOUT_CLASSIFICATION	1.0112488929101523E-5	DESIGN
// for an any	WITHOUT_CLASSIFICATION	0.9999995860077248	WITHOUT_CLASSIFICATION	4.139922753194285E-7	DESIGN
// insertable simply because that is the user did not specify // anything; just override it	WITHOUT_CLASSIFICATION	0.9999996138111449	WITHOUT_CLASSIFICATION	3.8618885508091994E-7	DESIGN
// the user specifically supplied insert="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.999999975963718	WITHOUT_CLASSIFICATION	2.4036281960475366E-8	DESIGN
// properties generated on update can never be updateable...	WITHOUT_CLASSIFICATION	0.9999957251155963	WITHOUT_CLASSIFICATION	4.274884403767631E-6	DESIGN
// updateable only because the user did not specify  // anything; just override it	WITHOUT_CLASSIFICATION	0.9999980918836145	WITHOUT_CLASSIFICATION	1.908116385387215E-6	DESIGN
// the user specifically supplied update="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999999452099508	WITHOUT_CLASSIFICATION	5.479004917845952E-8	DESIGN
// ROLENAME	WITHOUT_CLASSIFICATION	0.9999881658330618	WITHOUT_CLASSIFICATION	1.1834166938136146E-5	DESIGN
// FETCH STRATEGY	WITHOUT_CLASSIFICATION	0.9999540704457197	WITHOUT_CLASSIFICATION	4.592955428037267E-5	DESIGN
// TABLE	WITHOUT_CLASSIFICATION	0.9999703831405713	WITHOUT_CLASSIFICATION	2.961685942873853E-5	DESIGN
//tableName = mappings.getNamingStrategy().propertyToTableName( className, path );	WITHOUT_CLASSIFICATION	0.9999998922608632	WITHOUT_CLASSIFICATION	1.0773913679216415E-7	DESIGN
// SORT	WITHOUT_CLASSIFICATION	0.9999908851716266	WITHOUT_CLASSIFICATION	9.114828373325671E-6	DESIGN
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999743208295367	WITHOUT_CLASSIFICATION	2.5679170463267636E-5	DESIGN
// unsorted, natural, comparator.class.name	WITHOUT_CLASSIFICATION	0.9999982095091515	WITHOUT_CLASSIFICATION	1.7904908484495607E-6	DESIGN
// ORPHAN DELETE (used for programmer error detection)	WITHOUT_CLASSIFICATION	0.9999873663452731	WITHOUT_CLASSIFICATION	1.2633654726985788E-5	DESIGN
// set up second pass	WITHOUT_CLASSIFICATION	0.9999975597460384	WITHOUT_CLASSIFICATION	2.4402539615191392E-6	DESIGN
// an "embedded" component (composite ids and unique) // note that this does not handle nested components	WITHOUT_CLASSIFICATION	0.99993349992727	WITHOUT_CLASSIFICATION	6.650007272995853E-5	DESIGN
// a nested composite element	WITHOUT_CLASSIFICATION	0.9999930091791966	WITHOUT_CLASSIFICATION	6.990820803352968E-6	DESIGN
// for an any // we will have to use reflection	WITHOUT_CLASSIFICATION	0.9997786420727113	WITHOUT_CLASSIFICATION	2.213579272887591E-4	DESIGN
//NOTE SPECIAL CASE: // one-to-one constrained=false cannot be proxied, // so default to join and non-lazy	WITHOUT_CLASSIFICATION	0.9999973547490625	WITHOUT_CLASSIFICATION	2.645250937532235E-6	DESIGN
// use old (HB 2.1) defaults if outer-join is specified	WITHOUT_CLASSIFICATION	0.9999998424287786	WITHOUT_CLASSIFICATION	1.5757122142663674E-7	DESIGN
//lazy = !join;	WITHOUT_CLASSIFICATION	0.9999319977334689	WITHOUT_CLASSIFICATION	6.800226653121171E-5	DESIGN
// GENERATOR	WITHOUT_CLASSIFICATION	0.9999735774744621	WITHOUT_CLASSIFICATION	2.6422525537847824E-5	DESIGN
// ID UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999984904236299	WITHOUT_CLASSIFICATION	1.5095763701394114E-6	DESIGN
// VERSION UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999972995060173	WITHOUT_CLASSIFICATION	2.700493982682366E-6	DESIGN
// not necessarily a *unique* property reference	WITHOUT_CLASSIFICATION	0.9998740795834213	WITHOUT_CLASSIFICATION	1.2592041657857956E-4	DESIGN
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.99999913326467	WITHOUT_CLASSIFICATION	8.667353298870069E-7	DESIGN
// contained elements:	WITHOUT_CLASSIFICATION	0.9999969682963779	WITHOUT_CLASSIFICATION	3.0317036220678896E-6	DESIGN
// for non-inverse one-to-many, with a not-null fk, add a backref!	WITHOUT_CLASSIFICATION	0.9999985785751377	WITHOUT_CLASSIFICATION	1.4214248623309525E-6	DESIGN
// Bind the where	WITHOUT_CLASSIFICATION	0.9999024591345941	WITHOUT_CLASSIFICATION	9.754086540595141E-5	DESIGN
// Bind the order-by	WITHOUT_CLASSIFICATION	0.9999968007582385	WITHOUT_CLASSIFICATION	3.1992417614752575E-6	DESIGN
// Bind the filters	WITHOUT_CLASSIFICATION	0.9999971951271105	WITHOUT_CLASSIFICATION	2.8048728895655485E-6	DESIGN
// overriding inherited meta attribute. HBX-621 & HBX-793	WITHOUT_CLASSIFICATION	0.999879906200613	WITHOUT_CLASSIFICATION	1.2009379938712005E-4	DESIGN
// first, iterate over all elements capable of defining an extends attribute // collecting all found extends references if they cannot be resolved // against the already processed mappings.	WITHOUT_CLASSIFICATION	0.999999985087835	WITHOUT_CLASSIFICATION	1.4912164977312058E-8	DESIGN
// mappings might contain either the "raw" extends name (in the case of // an entity-name mapping) or a FQN (in the case of a POJO mapping).	WITHOUT_CLASSIFICATION	0.9999999990741667	WITHOUT_CLASSIFICATION	9.258332521044834E-10	DESIGN
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.8377098975512235	WITHOUT_CLASSIFICATION	0.16229010244877656	DESIGN
//SessionFactory name:	WITHOUT_CLASSIFICATION	0.9999802766643907	WITHOUT_CLASSIFICATION	1.9723335609274492E-5	DESIGN
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.999594295879806	WITHOUT_CLASSIFICATION	4.057041201940342E-4	DESIGN
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.999594295879806	WITHOUT_CLASSIFICATION	4.057041201940342E-4	DESIGN
//Interrogate JDBC metadata	WITHOUT_CLASSIFICATION	0.9999898595816744	WITHOUT_CLASSIFICATION	1.0140418325585568E-5	DESIGN
// user supplied JDBC connections	WITHOUT_CLASSIFICATION	0.9999946916840603	WITHOUT_CLASSIFICATION	5.308315939704809E-6	DESIGN
//use dialect default properties	WITHOUT_CLASSIFICATION	0.9999986721608072	WITHOUT_CLASSIFICATION	1.327839192772525E-6	DESIGN
// Transaction settings:	WITHOUT_CLASSIFICATION	0.9996613629984299	WITHOUT_CLASSIFICATION	3.386370015701815E-4	DESIGN
//SQL Generation settings:	WITHOUT_CLASSIFICATION	0.9994638362424271	WITHOUT_CLASSIFICATION	5.361637575728547E-4	DESIGN
//Query parser settings:	WITHOUT_CLASSIFICATION	0.9984970118906686	WITHOUT_CLASSIFICATION	0.001502988109331332	DESIGN
// Second-level / query cache:	WITHOUT_CLASSIFICATION	0.9998750630528964	WITHOUT_CLASSIFICATION	1.2493694710356246E-4	DESIGN
// The cache provider is needed when we either have second-level cache enabled // or query cache enabled.  Note that useSecondLevelCache is enabled by default	WITHOUT_CLASSIFICATION	0.9984518841372592	WITHOUT_CLASSIFICATION	0.0015481158627407943	DESIGN
//SQL Exception converter:	WITHOUT_CLASSIFICATION	0.9996902225139526	WITHOUT_CLASSIFICATION	3.0977748604751144E-4	DESIGN
//Statistics and logging:	WITHOUT_CLASSIFICATION	0.9998686276563276	WITHOUT_CLASSIFICATION	1.3137234367240622E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999609652327096	WITHOUT_CLASSIFICATION	3.903476729039761E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999609652327096	WITHOUT_CLASSIFICATION	3.903476729039761E-5	DESIGN
//Schema export:	WITHOUT_CLASSIFICATION	0.9999862773439524	WITHOUT_CLASSIFICATION	1.3722656047686122E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999609652327096	WITHOUT_CLASSIFICATION	3.903476729039761E-5	DESIGN
// legacy behavior, apply the bridge...	WITHOUT_CLASSIFICATION	0.9999997081499301	WITHOUT_CLASSIFICATION	2.9185006992259707E-7	DESIGN
// maybe a concrete SQLpropertyresult type, but Map is exactly what is required at the moment	WITHOUT_CLASSIFICATION	0.9898810982347589	WITHOUT_CLASSIFICATION	0.01011890176524117	DESIGN
//if dotted and not load-collection nor return-join //regular property	WITHOUT_CLASSIFICATION	0.9999988985170204	WITHOUT_CLASSIFICATION	1.1014829796114328E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999609652327096	WITHOUT_CLASSIFICATION	3.903476729039761E-5	DESIGN
// public getters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992512228904658	WITHOUT_CLASSIFICATION	7.487771095342283E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999609652327096	WITHOUT_CLASSIFICATION	3.903476729039761E-5	DESIGN
// package protected setters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997962641726045	WITHOUT_CLASSIFICATION	2.0373582739561345E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999609652327096	WITHOUT_CLASSIFICATION	3.903476729039761E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999609652327096	WITHOUT_CLASSIFICATION	3.903476729039761E-5	DESIGN
// using local since the inheritedMetas at this point is not the correct map since it is always the empty map	WITHOUT_CLASSIFICATION	0.9999972540040499	WITHOUT_CLASSIFICATION	2.745995950122043E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999609652327096	WITHOUT_CLASSIFICATION	3.903476729039761E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999609652327096	WITHOUT_CLASSIFICATION	3.903476729039761E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999609652327096	WITHOUT_CLASSIFICATION	3.903476729039761E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999609652327096	WITHOUT_CLASSIFICATION	3.903476729039761E-5	DESIGN
// if doc is null, then for whatever reason, the cached file cannot be used...	WITHOUT_CLASSIFICATION	0.9999709951490002	WITHOUT_CLASSIFICATION	2.900485099984946E-5	DESIGN
// drop them in reverse order in case db needs it done that way...	WITHOUT_CLASSIFICATION	0.9902251073455092	WITHOUT_CLASSIFICATION	0.00977489265449086	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999609652327096	WITHOUT_CLASSIFICATION	3.903476729039761E-5	DESIGN
// This method may be called many times!!	WITHOUT_CLASSIFICATION	0.8754182582385927	WITHOUT_CLASSIFICATION	0.1245817417614073	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999609652327096	WITHOUT_CLASSIFICATION	3.903476729039761E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999609652327096	WITHOUT_CLASSIFICATION	3.903476729039761E-5	DESIGN
// found	WITHOUT_CLASSIFICATION	0.9999838341448316	WITHOUT_CLASSIFICATION	1.6165855168397906E-5	DESIGN
// found	WITHOUT_CLASSIFICATION	0.9999838341448316	WITHOUT_CLASSIFICATION	1.6165855168397906E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999609652327096	WITHOUT_CLASSIFICATION	3.903476729039761E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999609652327096	WITHOUT_CLASSIFICATION	3.903476729039761E-5	DESIGN
//<String, String>	WITHOUT_CLASSIFICATION	0.9999820965628144	WITHOUT_CLASSIFICATION	1.7903437185553148E-5	DESIGN
//<String, String>	WITHOUT_CLASSIFICATION	0.9999820965628144	WITHOUT_CLASSIFICATION	1.7903437185553148E-5	DESIGN
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.8377098975512235	WITHOUT_CLASSIFICATION	0.16229010244877656	DESIGN
//Set USE_REFLECTION_OPTIMIZER to false to fix HHH-227	WITHOUT_CLASSIFICATION	0.9999718431671696	WITHOUT_CLASSIFICATION	2.8156832830367207E-5	DESIGN
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9995792265667243	WITHOUT_CLASSIFICATION	4.2077343327573706E-4	DESIGN
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9999863926494272	WITHOUT_CLASSIFICATION	1.3607350572868048E-5	DESIGN
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999984075890407	WITHOUT_CLASSIFICATION	1.5924109593563303E-6	DESIGN
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9995792265667243	WITHOUT_CLASSIFICATION	4.2077343327573706E-4	DESIGN
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9999863926494272	WITHOUT_CLASSIFICATION	1.3607350572868048E-5	DESIGN
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999815376218987	WITHOUT_CLASSIFICATION	1.8462378101245995E-5	DESIGN
//maintain correct duplication if loaded in a cartesian product	WITHOUT_CLASSIFICATION	0.9999983903405415	WITHOUT_CLASSIFICATION	1.6096594585307736E-6	DESIGN
// the element has been removed from the set	WITHOUT_CLASSIFICATION	0.9999959575744459	WITHOUT_CLASSIFICATION	4.042425554014075E-6	DESIGN
// the element has changed	WITHOUT_CLASSIFICATION	0.9999989492112418	WITHOUT_CLASSIFICATION	1.050788758306341E-6	DESIGN
//Careful: these methods do not initialize the collection.	WITHOUT_CLASSIFICATION	0.9997301891511461	WITHOUT_CLASSIFICATION	2.6981084885391494E-4	DESIGN
//needed so that we remove this collection from the second-level cache	WITHOUT_CLASSIFICATION	0.9961325344738413	WITHOUT_CLASSIFICATION	0.0038674655261587243	DESIGN
// override on some subclasses	WITHOUT_CLASSIFICATION	0.9999979157457378	WITHOUT_CLASSIFICATION	2.084254262263336E-6	DESIGN
//override on some subclasses	WITHOUT_CLASSIFICATION	0.9999753683561298	WITHOUT_CLASSIFICATION	2.463164387025459E-5	DESIGN
//do this bit after setting initialized to true or it will recurse	WITHOUT_CLASSIFICATION	0.9988296111445303	WITHOUT_CLASSIFICATION	0.0011703888554697635	DESIGN
// short-circuit(s) // no new elements, the old list contains only Orphans // no old elements, so no Orphans neither	WITHOUT_CLASSIFICATION	0.9999999977653826	WITHOUT_CLASSIFICATION	2.2346173143691317E-9	DESIGN
// create the collection holding the Orphans	WITHOUT_CLASSIFICATION	0.9999994319318977	WITHOUT_CLASSIFICATION	5.6806810236291E-7	DESIGN
// collect EntityIdentifier(s) of the *current* elements - add them into a HashSet for fast access	WITHOUT_CLASSIFICATION	0.9999998882362794	WITHOUT_CLASSIFICATION	1.1176372059910049E-7	DESIGN
// iterate over the *old* list	WITHOUT_CLASSIFICATION	0.9999988826123134	WITHOUT_CLASSIFICATION	1.1173876865449083E-6	DESIGN
/*(array==null) ? tempList.size() :*/	WITHOUT_CLASSIFICATION	0.9990480915982518	WITHOUT_CLASSIFICATION	9.519084017481939E-4	DESIGN
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999984075890407	WITHOUT_CLASSIFICATION	1.5924109593563303E-6	DESIGN
/*(array==null) ? tempList.get(i) :*/	WITHOUT_CLASSIFICATION	0.9998089334362653	WITHOUT_CLASSIFICATION	1.9106656373472607E-4	DESIGN
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9990081991935764	WITHOUT_CLASSIFICATION	9.918008064235596E-4	DESIGN
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9990081991935764	WITHOUT_CLASSIFICATION	9.918008064235596E-4	DESIGN
// amazingly, these two will work because AbstractCollection // uses iterator() to fill the array	WITHOUT_CLASSIFICATION	0.9872817249421543	WITHOUT_CLASSIFICATION	0.012718275057845787	DESIGN
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999815376218987	WITHOUT_CLASSIFICATION	1.8462378101245995E-5	DESIGN
// finally, what it's all about...	WITHOUT_CLASSIFICATION	0.9990594989870105	WITHOUT_CLASSIFICATION	9.405010129895445E-4	DESIGN
// note that if we load this collection from a cartesian product // the multiplicity would be broken ... so use an idbag instead	WITHOUT_CLASSIFICATION	0.8999675583131828	DESIGN	0.10003244168681726	WITHOUT_CLASSIFICATION
// Anyway, here we implement <set> semantics for a // <one-to-many> <bag>!	WITHOUT_CLASSIFICATION	0.9997130269851906	WITHOUT_CLASSIFICATION	2.869730148094536E-4	DESIGN
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999864817634888	WITHOUT_CLASSIFICATION	1.3518236511329383E-5	DESIGN
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9995089718066328	WITHOUT_CLASSIFICATION	4.910281933671464E-4	DESIGN
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999815376218987	WITHOUT_CLASSIFICATION	1.8462378101245995E-5	DESIGN
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999864817634888	WITHOUT_CLASSIFICATION	1.3518236511329383E-5	DESIGN
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9995089718066328	WITHOUT_CLASSIFICATION	4.910281933671464E-4	DESIGN
/*public boolean equals(Object other) {	WITHOUT_CLASSIFICATION	0.9999935432017909	WITHOUT_CLASSIFICATION	6.456798209200445E-6	DESIGN
// List OPERATIONS:	WITHOUT_CLASSIFICATION	0.9999897409695114	WITHOUT_CLASSIFICATION	1.0259030488558058E-5	DESIGN
//pad with nulls from the current last element up to the new index	WITHOUT_CLASSIFICATION	0.9999998178903154	WITHOUT_CLASSIFICATION	1.8210968456975277E-7	DESIGN
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999815376218987	WITHOUT_CLASSIFICATION	1.8462378101245995E-5	DESIGN
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999815376218987	WITHOUT_CLASSIFICATION	1.8462378101245995E-5	DESIGN
// from Map	WITHOUT_CLASSIFICATION	0.9999944784067655	WITHOUT_CLASSIFICATION	5.521593234552225E-6	DESIGN
// from SortedMap	WITHOUT_CLASSIFICATION	0.999997354029741	WITHOUT_CLASSIFICATION	2.645970259063921E-6	DESIGN
//inject the data	WITHOUT_CLASSIFICATION	0.9999859466141826	WITHOUT_CLASSIFICATION	1.4053385817302456E-5	DESIGN
// cannot be instantiated	WITHOUT_CLASSIFICATION	0.999903232469624	WITHOUT_CLASSIFICATION	9.676753037601927E-5	DESIGN
//default pool size 20	WITHOUT_CLASSIFICATION	0.9999988254093684	WITHOUT_CLASSIFICATION	1.1745906317405937E-6	DESIGN
// trying via forName() first to be as close to DriverManager's semantics	WITHOUT_CLASSIFICATION	0.9999999816771842	WITHOUT_CLASSIFICATION	1.832281588458496E-8	DESIGN
// if debug level is enabled, then log the password, otherwise mask it	WITHOUT_CLASSIFICATION	0.9999999611461656	WITHOUT_CLASSIFICATION	3.8853834365492E-8	DESIGN
// register a cleanup synch	WITHOUT_CLASSIFICATION	0.9995861158761982	WITHOUT_CLASSIFICATION	4.1388412380176934E-4	DESIGN
// wrap the session in the transaction-protection proxy	WITHOUT_CLASSIFICATION	0.9999998274419858	WITHOUT_CLASSIFICATION	1.7255801413881208E-7	DESIGN
// then bind it	WITHOUT_CLASSIFICATION	0.9999015100927949	WITHOUT_CLASSIFICATION	9.848990720511901E-5	DESIGN
// try to make sure we don't wrap and already wrapped session	WITHOUT_CLASSIFICATION	0.9999962238119562	WITHOUT_CLASSIFICATION	3.7761880437531274E-6	DESIGN
// allow these to go through the the real session no matter what	WITHOUT_CLASSIFICATION	0.9999715273714418	WITHOUT_CLASSIFICATION	2.8472628558171357E-5	DESIGN
// limit the methods available if no transaction is active	WITHOUT_CLASSIFICATION	0.9999997177428028	WITHOUT_CLASSIFICATION	2.8225719710385586E-7	DESIGN
// allow these (deprecated) methods to pass through	WITHOUT_CLASSIFICATION	0.9999935288951851	WITHOUT_CLASSIFICATION	6.471104814938754E-6	DESIGN
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999961227438883	WITHOUT_CLASSIFICATION	3.877256111723661E-6	DESIGN
// We could register the session against the transaction even though it is // not started, but we'd have no guarentee of ever getting the map // entries cleaned up (aside from spawning threads).	WITHOUT_CLASSIFICATION	0.9999724545914852	WITHOUT_CLASSIFICATION	2.7545408514769397E-5	DESIGN
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9994599708234093	WITHOUT_CLASSIFICATION	5.400291765906644E-4	DESIGN
//private String propertyName;	WITHOUT_CLASSIFICATION	0.9999951635211483	WITHOUT_CLASSIFICATION	4.836478851777333E-6	DESIGN
/*public PropertyProjection project() {	WITHOUT_CLASSIFICATION	0.9682071555471334	WITHOUT_CLASSIFICATION	0.03179284445286659	DESIGN
//String[] fk = StringHelper.qualify( "collection_", cp.getKeyColumnNames() );	WITHOUT_CLASSIFICATION	0.999999929928407	WITHOUT_CLASSIFICATION	7.007159301189798E-8	DESIGN
//" collection_ where " +	WITHOUT_CLASSIFICATION	0.999989832267014	WITHOUT_CLASSIFICATION	1.0167732986146977E-5	DESIGN
//unsupported	WITHOUT_CLASSIFICATION	0.9999595542061193	WITHOUT_CLASSIFICATION	4.044579388080577E-5	DESIGN
//unsupported	WITHOUT_CLASSIFICATION	0.9999595542061193	WITHOUT_CLASSIFICATION	4.044579388080577E-5	DESIGN
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9994599708234093	WITHOUT_CLASSIFICATION	5.400291765906644E-4	DESIGN
//the following two lines were added to ensure that this.params is not null, which //can happen with two-deep nested subqueries	WITHOUT_CLASSIFICATION	0.999999752180069	WITHOUT_CLASSIFICATION	2.4781993101789735E-7	DESIGN
//with two-deep subqueries, the same alias would get generated for //both using the old method (criteriaQuery.generateSQLAlias()), so //that is now used as a fallback if the main criteria alias isn't set	WITHOUT_CLASSIFICATION	0.903606489131264	WITHOUT_CLASSIFICATION	0.09639351086873603	DESIGN
//implicit polymorphism not supported (would need a union)	WITHOUT_CLASSIFICATION	0.9908417619733358	WITHOUT_CLASSIFICATION	0.009158238026664194	DESIGN
//pull off the last ", "	WITHOUT_CLASSIFICATION	0.9999996733091311	WITHOUT_CLASSIFICATION	3.266908689005998E-7	DESIGN
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999743305663717	WITHOUT_CLASSIFICATION	2.566943362830154E-5	DESIGN
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces	WITHOUT_CLASSIFICATION	0.9999491426160869	WITHOUT_CLASSIFICATION	5.085738391314943E-5	DESIGN
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource)	WITHOUT_CLASSIFICATION	0.992492469006964	WITHOUT_CLASSIFICATION	0.007507530993036078	DESIGN
// NOT_SUPPORTED_SHOULD_USE_JDBC3_PreparedStatement.getGeneratedKeys_method	WITHOUT_CLASSIFICATION	0.9999814960558034	WITHOUT_CLASSIFICATION	1.8503944196497198E-5	DESIGN
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999911242087212	WITHOUT_CLASSIFICATION	8.87579127884005E-6	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999983831540221	WITHOUT_CLASSIFICATION	1.6168459779731629E-6	DESIGN
// Oracle did add support for ANSI CASE statements in 9i	WITHOUT_CLASSIFICATION	0.9999763371059416	WITHOUT_CLASSIFICATION	2.3662894058486555E-5	DESIGN
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999997099326555	WITHOUT_CLASSIFICATION	2.9006734440649143E-7	DESIGN
// Informix doesn't have a bit type	WITHOUT_CLASSIFICATION	0.9999869235768981	WITHOUT_CLASSIFICATION	1.3076423101889985E-5	DESIGN
// or BYTE // or TEXT? // or MONEY	WITHOUT_CLASSIFICATION	0.9998959775039192	WITHOUT_CLASSIFICATION	1.040224960808284E-4	DESIGN
// strip table-owner because Informix always returns constraint names as "<table-owner>.<constraint-name>"	WITHOUT_CLASSIFICATION	0.9999999988549717	WITHOUT_CLASSIFICATION	1.1450282298156391E-9	DESIGN
// build the map of standard ANSI SQL aggregation functions ~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999957052228	WITHOUT_CLASSIFICATION	4.294777241937376E-9	DESIGN
//pre H3.2 behavior: super.getReturnType(ct, m);	WITHOUT_CLASSIFICATION	0.9997420236314712	WITHOUT_CLASSIFICATION	2.5797636852874033E-4	DESIGN
// finally use the sqltype if == on Hibernate types did not find a match.	WITHOUT_CLASSIFICATION	0.9999972508964929	WITHOUT_CLASSIFICATION	2.749103506984697E-6	DESIGN
//because numeric can be anything	WITHOUT_CLASSIFICATION	0.9997346116686266	WITHOUT_CLASSIFICATION	2.653883313733682E-4	DESIGN
// constructors and factory methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999766115564811	WITHOUT_CLASSIFICATION	2.3388443518820574E-5	DESIGN
// standard sql92 functions (can be overridden by subclasses)	WITHOUT_CLASSIFICATION	0.9999998840213785	WITHOUT_CLASSIFICATION	1.1597862147547391E-7	DESIGN
//map second/minute/hour/day/month/year to ANSI extract(), override on subclasses	WITHOUT_CLASSIFICATION	0.9999999067848595	WITHOUT_CLASSIFICATION	9.321514047170109E-8	DESIGN
// register hibernate types for default use in scalar sqlquery type auto detection	WITHOUT_CLASSIFICATION	0.99998591048245	WITHOUT_CLASSIFICATION	1.4089517549963059E-5	DESIGN
// database type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999956314986022	WITHOUT_CLASSIFICATION	4.368501397784313E-6	DESIGN
// hibernate type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999720867544812	WITHOUT_CLASSIFICATION	2.7913245518729078E-5	DESIGN
// keyword support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999119233547545	WITHOUT_CLASSIFICATION	8.807664524545121E-5	DESIGN
// native identifier generatiion ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999912455551885	WITHOUT_CLASSIFICATION	8.754444811456555E-6	DESIGN
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999816762058614	WITHOUT_CLASSIFICATION	1.832379413850566E-5	DESIGN
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999827492401745	WITHOUT_CLASSIFICATION	1.7250759825500718E-5	DESIGN
// GUID support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999652738357601	WITHOUT_CLASSIFICATION	3.47261642399309E-5	DESIGN
// limit/offset support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999952800116314	WITHOUT_CLASSIFICATION	4.719988368670127E-6	DESIGN
// by default we report no support	WITHOUT_CLASSIFICATION	0.999632601875389	WITHOUT_CLASSIFICATION	3.6739812461086406E-4	DESIGN
// by default we report no support for NOWAIT lock semantics	WITHOUT_CLASSIFICATION	0.9997749612656466	WITHOUT_CLASSIFICATION	2.250387343534235E-4	DESIGN
// table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999986496170514	WITHOUT_CLASSIFICATION	1.3503829485195603E-6	DESIGN
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999952079067272	WITHOUT_CLASSIFICATION	4.7920932727746866E-6	DESIGN
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999853035696212	WITHOUT_CLASSIFICATION	1.4696430378725598E-5	DESIGN
// current timestamp support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999964414195471	WITHOUT_CLASSIFICATION	3.5585804529516317E-6	DESIGN
// SQLException support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999322751793676	WITHOUT_CLASSIFICATION	6.772482063248315E-5	DESIGN
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999549308565948	WITHOUT_CLASSIFICATION	4.506914340517113E-5	DESIGN
// identifier quoting support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999889722473595	WITHOUT_CLASSIFICATION	1.1027752640437962E-5	DESIGN
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999916580057441	WITHOUT_CLASSIFICATION	8.341994255931955E-6	DESIGN
// grrr... for differentiation of mysql storage engines	WITHOUT_CLASSIFICATION	0.9999955708232247	WITHOUT_CLASSIFICATION	4.4291767753282185E-6	DESIGN
// Informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99999902090272	WITHOUT_CLASSIFICATION	9.79097280045594E-7	DESIGN
// return false here, as most databases do not properly support this construct...	WITHOUT_CLASSIFICATION	0.8403997962009627	WITHOUT_CLASSIFICATION	0.15960020379903717	DESIGN
// Mckoi has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999889316150827	WITHOUT_CLASSIFICATION	1.106838491737238E-5	DESIGN
// Oracle8 and previous define only a "DATE" type which //      is used to represent all aspects of date/time	WITHOUT_CLASSIFICATION	0.9999995548686006	WITHOUT_CLASSIFICATION	4.451313994483519E-7	DESIGN
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9995456064999891	WITHOUT_CLASSIFICATION	4.5439350001093054E-4	DESIGN
//" cascade";	WITHOUT_CLASSIFICATION	0.9999585682860874	WITHOUT_CLASSIFICATION	4.1431713912479226E-5	DESIGN
//trim off the length/precision/scale	WITHOUT_CLASSIFICATION	0.9999980431182757	WITHOUT_CLASSIFICATION	1.9568817243476922E-6	DESIGN
/*public boolean dropTemporaryTableAfterUse() {	WITHOUT_CLASSIFICATION	0.9951617837694736	WITHOUT_CLASSIFICATION	0.004838216230526344	DESIGN
// CHECK VIOLATION	WITHOUT_CLASSIFICATION	0.999990074753444	WITHOUT_CLASSIFICATION	9.925246555960612E-6	DESIGN
// UNIQUE VIOLATION	WITHOUT_CLASSIFICATION	0.9999697428241076	WITHOUT_CLASSIFICATION	3.025717589247731E-5	DESIGN
// FOREIGN KEY VIOLATION	WITHOUT_CLASSIFICATION	0.9999722497626361	WITHOUT_CLASSIFICATION	2.775023736393984E-5	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999983831540221	WITHOUT_CLASSIFICATION	1.6168459779731629E-6	DESIGN
// NOT NULL VIOLATION	WITHOUT_CLASSIFICATION	0.999942784117396	WITHOUT_CLASSIFICATION	5.7215882603998655E-5	DESIGN
// ALL OTHER	WITHOUT_CLASSIFICATION	0.9999821433513858	WITHOUT_CLASSIFICATION	1.785664861412455E-5	DESIGN
// Register the type of the out param - PostgreSQL uses Types.OTHER	WITHOUT_CLASSIFICATION	0.9999989704613251	WITHOUT_CLASSIFICATION	1.0295386748699214E-6	DESIGN
// seems to not really... //	WITHOUT_CLASSIFICATION	0.999942733894156	WITHOUT_CLASSIFICATION	5.726610584398221E-5	DESIGN
// seems to have spotty LOB suppport	WITHOUT_CLASSIFICATION	0.9999686179644199	WITHOUT_CLASSIFICATION	3.138203558009676E-5	DESIGN
// HHH-2300	WITHOUT_CLASSIFICATION	0.9999749183718462	WITHOUT_CLASSIFICATION	2.5081628153909966E-5	DESIGN
// ignore (probably H2 not in the classpath)	WITHOUT_CLASSIFICATION	0.9999302157719765	WITHOUT_CLASSIFICATION	6.978422802345006E-5	DESIGN
// Numeric Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999969350705487	WITHOUT_CLASSIFICATION	3.0649294513187553E-6	DESIGN
// String Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996272945811	WITHOUT_CLASSIFICATION	3.727054188885977E-7	DESIGN
// Time and Date Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999965045132871	WITHOUT_CLASSIFICATION	3.4954867128766773E-6	DESIGN
// System Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999922859401034	WITHOUT_CLASSIFICATION	7.714059896673454E-6	DESIGN
// not null is implicit	WITHOUT_CLASSIFICATION	0.9993063797980531	WITHOUT_CLASSIFICATION	6.936202019468911E-4	DESIGN
// 23000: Check constraint violation: {0} // 23001: Unique index or primary key violation: {0}	WITHOUT_CLASSIFICATION	0.9999997014876361	WITHOUT_CLASSIFICATION	2.9851236399832615E-7	DESIGN
// Display the dialect version.	WITHOUT_CLASSIFICATION	0.9999995979923849	WITHOUT_CLASSIFICATION	4.020076151208018E-7	DESIGN
// The RDMS concat() function only supports 2 parameters	WITHOUT_CLASSIFICATION	0.9996481737771874	WITHOUT_CLASSIFICATION	3.518262228125807E-4	DESIGN
// Dialect method overrides ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999174738899	WITHOUT_CLASSIFICATION	8.252611009200225E-7	DESIGN
// Original Dialect.java returns " for update";	WITHOUT_CLASSIFICATION	0.9999944129137928	WITHOUT_CLASSIFICATION	5.587086207290423E-6	DESIGN
// Verify the state of this new method in Hibernate 3.0 Dialect.java	WITHOUT_CLASSIFICATION	0.9998602600662021	WITHOUT_CLASSIFICATION	1.397399337978705E-4	DESIGN
// Origial Dialect.java returns true;	WITHOUT_CLASSIFICATION	0.9999949843432403	WITHOUT_CLASSIFICATION	5.015656759649145E-6	DESIGN
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9997794356589015	WITHOUT_CLASSIFICATION	2.2056434109842113E-4	DESIGN
// *** Sequence methods - start. The RDMS dialect needs these	WITHOUT_CLASSIFICATION	0.9835543041805496	WITHOUT_CLASSIFICATION	0.016445695819450438	DESIGN
// methods to make it possible to use the Native Id generator	WITHOUT_CLASSIFICATION	0.9985122030257307	WITHOUT_CLASSIFICATION	0.0014877969742693048	DESIGN
// The where clause was added to eliminate this statement from Brute Force Searches.	WITHOUT_CLASSIFICATION	0.9999863832021803	WITHOUT_CLASSIFICATION	1.361679781968792E-5	DESIGN
// *** Sequence methods - end	WITHOUT_CLASSIFICATION	0.9997007188620182	WITHOUT_CLASSIFICATION	2.9928113798190496E-4	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999983831540221	WITHOUT_CLASSIFICATION	1.6168459779731629E-6	DESIGN
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9995456064999891	WITHOUT_CLASSIFICATION	4.5439350001093054E-4	DESIGN
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.9958493772452386	WITHOUT_CLASSIFICATION	0.00415062275476134	DESIGN
// Used with DROP TABLE to delete all records in the table.	WITHOUT_CLASSIFICATION	0.9999884868794978	WITHOUT_CLASSIFICATION	1.151312050212527E-5	DESIGN
// RDMS supports the UNION ALL clause.	WITHOUT_CLASSIFICATION	0.9999883009715254	WITHOUT_CLASSIFICATION	1.1699028474600603E-5	DESIGN
// RDMS has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9995979713770218	WITHOUT_CLASSIFICATION	4.020286229781773E-4	DESIGN
// Multi-param dialect functions...	WITHOUT_CLASSIFICATION	0.9999990631513814	WITHOUT_CLASSIFICATION	9.36848618540373E-7	DESIGN
// function templates	WITHOUT_CLASSIFICATION	0.9999997175722468	WITHOUT_CLASSIFICATION	2.8242775309199124E-7	DESIGN
//not null is implicit	WITHOUT_CLASSIFICATION	0.9993764344375583	WITHOUT_CLASSIFICATION	6.23565562441731E-4	DESIGN
// this assumes schema support, which is present in 1.8.0 and later...	WITHOUT_CLASSIFICATION	0.9996733426635801	WITHOUT_CLASSIFICATION	3.2665733641990035E-4	DESIGN
// HSQLDB only supports READ_UNCOMMITTED transaction isolation	WITHOUT_CLASSIFICATION	0.9999358010839421	WITHOUT_CLASSIFICATION	6.419891605791015E-5	DESIGN
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999992611685952	WITHOUT_CLASSIFICATION	7.388314048768168E-7	DESIGN
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9999963726432259	WITHOUT_CLASSIFICATION	3.6273567740711045E-6	DESIGN
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999992941029135	WITHOUT_CLASSIFICATION	7.05897086435763E-7	DESIGN
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999840439129155	WITHOUT_CLASSIFICATION	1.5956087084526552E-5	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999983831540221	WITHOUT_CLASSIFICATION	1.6168459779731629E-6	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999983831540221	WITHOUT_CLASSIFICATION	1.6168459779731629E-6	DESIGN
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9999434728414576	WITHOUT_CLASSIFICATION	5.6527158542535426E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999609652327096	WITHOUT_CLASSIFICATION	3.903476729039761E-5	DESIGN
// TimesTen has no BLOB/CLOB support, but these types may be suitable  // for some applications. The length is limited to 4 million bytes.	WITHOUT_CLASSIFICATION	0.9999949099242094	WITHOUT_CLASSIFICATION	5.090075790546178E-6	DESIGN
// new methods in dialect3	WITHOUT_CLASSIFICATION	0.999872485573763	WITHOUT_CLASSIFICATION	1.2751442623699471E-4	DESIGN
/*public boolean supportsForUpdateNowait() {	WITHOUT_CLASSIFICATION	0.9999576178123939	WITHOUT_CLASSIFICATION	4.238218760618423E-5	DESIGN
// TimesTen has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999548602768527	WITHOUT_CLASSIFICATION	4.5139723147213744E-5	DESIGN
// iterate entries ordered by capacity to find first fit	WITHOUT_CLASSIFICATION	0.9999987656075494	WITHOUT_CLASSIFICATION	1.2343924505651687E-6	DESIGN
// add new ordered map	WITHOUT_CLASSIFICATION	0.999998126628347	WITHOUT_CLASSIFICATION	1.8733716530759798E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999609652327096	WITHOUT_CLASSIFICATION	3.903476729039761E-5	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999983831540221	WITHOUT_CLASSIFICATION	1.6168459779731629E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999609652327096	WITHOUT_CLASSIFICATION	3.903476729039761E-5	DESIGN
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999977923263569	WITHOUT_CLASSIFICATION	2.2076736430919156E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999609652327096	WITHOUT_CLASSIFICATION	3.903476729039761E-5	DESIGN
//registerColumnType data types	WITHOUT_CLASSIFICATION	0.9999939573273302	WITHOUT_CLASSIFICATION	6.04267266973581E-6	DESIGN
// hibernate seems to ignore this type...	WITHOUT_CLASSIFICATION	0.9999164715772595	WITHOUT_CLASSIFICATION	8.352842274051254E-5	DESIGN
// IBID for current_time and current_date	WITHOUT_CLASSIFICATION	0.9999989317739433	WITHOUT_CLASSIFICATION	1.068226056751239E-6	DESIGN
// Tell hibernate to use getBytes instead of getBinaryStream	WITHOUT_CLASSIFICATION	0.9983059557798286	WITHOUT_CLASSIFICATION	0.0016940442201713256	DESIGN
// No batch statements	WITHOUT_CLASSIFICATION	0.9999997772714808	WITHOUT_CLASSIFICATION	2.2272851916663328E-7	DESIGN
/*	WITHOUT_CLASSIFICATION	0.9996992507513384	WITHOUT_CLASSIFICATION	3.007492486616181E-4	DESIGN
//no pointbase BIT	WITHOUT_CLASSIFICATION	0.9999944559563806	WITHOUT_CLASSIFICATION	5.544043619487169E-6	DESIGN
//no pointbase TINYINT	WITHOUT_CLASSIFICATION	0.9999960212243413	WITHOUT_CLASSIFICATION	3.978775658739583E-6	DESIGN
// Pointbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999948576933559	WITHOUT_CLASSIFICATION	5.142306644045161E-6	DESIGN
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9995456064999891	WITHOUT_CLASSIFICATION	4.5439350001093054E-4	DESIGN
// The current_timestamp is more accurate, but only known to be supported // in SQL Server 7.0 and later (i.e., Sybase not known to support it at all)	WITHOUT_CLASSIFICATION	0.999948440964042	WITHOUT_CLASSIFICATION	5.155903595796677E-5	DESIGN
// SQL Server (at least up through 2005) does not support defining // cascade delete constraints which can circel back to the mutating // table	WITHOUT_CLASSIFICATION	0.9999991425904273	WITHOUT_CLASSIFICATION	8.574095727420005E-7	DESIGN
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9995445344955503	WITHOUT_CLASSIFICATION	4.554655044497342E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999609652327096	WITHOUT_CLASSIFICATION	3.903476729039761E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999609652327096	WITHOUT_CLASSIFICATION	3.903476729039761E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999609652327096	WITHOUT_CLASSIFICATION	3.903476729039761E-5	DESIGN
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9995456064999891	WITHOUT_CLASSIFICATION	4.5439350001093054E-4	DESIGN
/* package-private */	WITHOUT_CLASSIFICATION	0.9999618339842953	WITHOUT_CLASSIFICATION	3.816601570459399E-5	DESIGN
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999977923263569	WITHOUT_CLASSIFICATION	2.2076736430919156E-6	DESIGN
//Sybase BIT type does not support null values	WITHOUT_CLASSIFICATION	0.9999603839572085	WITHOUT_CLASSIFICATION	3.961604279152085E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999609652327096	WITHOUT_CLASSIFICATION	3.903476729039761E-5	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999983831540221	WITHOUT_CLASSIFICATION	1.6168459779731629E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999609652327096	WITHOUT_CLASSIFICATION	3.903476729039761E-5	DESIGN
//not null ... (start with 1) is implicit	WITHOUT_CLASSIFICATION	0.9996463969665507	WITHOUT_CLASSIFICATION	3.536030334493981E-4	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999983831540221	WITHOUT_CLASSIFICATION	1.6168459779731629E-6	DESIGN
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.999745567149326	WITHOUT_CLASSIFICATION	2.544328506740312E-4	DESIGN
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999992611685952	WITHOUT_CLASSIFICATION	7.388314048768168E-7	DESIGN
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9999963726432259	WITHOUT_CLASSIFICATION	3.6273567740711045E-6	DESIGN
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999992941029135	WITHOUT_CLASSIFICATION	7.05897086435763E-7	DESIGN
// add another (inner) nested select // add the main query // close off the inner nested select	WITHOUT_CLASSIFICATION	0.9999995562885018	WITHOUT_CLASSIFICATION	4.437114982604328E-7	DESIGN
// add the main query	WITHOUT_CLASSIFICATION	0.9999939148415256	WITHOUT_CLASSIFICATION	6.085158474430191E-6	DESIGN
//add the restriction to the outer select	WITHOUT_CLASSIFICATION	0.9999940476616395	WITHOUT_CLASSIFICATION	5.952338360525394E-6	DESIGN
// This assumes you will want to ignore any update counts 	WITHOUT_CLASSIFICATION	0.985926870143957	WITHOUT_CLASSIFICATION	0.01407312985604298	DESIGN
// You may still have other ResultSets or update counts left to process here  // but you can't do it now or the ResultSet you just got will be closed 	WITHOUT_CLASSIFICATION	0.9987508119859237	WITHOUT_CLASSIFICATION	0.0012491880140762595	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999983831540221	WITHOUT_CLASSIFICATION	1.6168459779731629E-6	DESIGN
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9995456064999891	WITHOUT_CLASSIFICATION	4.5439350001093054E-4	DESIGN
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999840439129155	WITHOUT_CLASSIFICATION	1.5956087084526552E-5	DESIGN
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9999434728414576	WITHOUT_CLASSIFICATION	5.6527158542535426E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999609652327096	WITHOUT_CLASSIFICATION	3.903476729039761E-5	DESIGN
// features which change between 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999990791856783	WITHOUT_CLASSIFICATION	9.208143217496056E-7	DESIGN
// features which remain constant across 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996588554675	WITHOUT_CLASSIFICATION	3.411445325339298E-7	DESIGN
// binary %Stream // character %Stream	WITHOUT_CLASSIFICATION	0.9999976482812071	WITHOUT_CLASSIFICATION	2.351718792937627E-6	DESIGN
//getDefaultProperties().setProperty(Environment.STATEMENT_BATCH_SIZE, NO_BATCH);	WITHOUT_CLASSIFICATION	0.9999982193044064	WITHOUT_CLASSIFICATION	1.7806955936777966E-6	DESIGN
// hibernate impelemnts cast in Dialect.java	WITHOUT_CLASSIFICATION	0.999986762793089	WITHOUT_CLASSIFICATION	1.3237206911157108E-5	DESIGN
// aggregate functions shouldn't be registered, right? //registerFunction( "list", new StandardSQLFunction("list",Hibernate.STRING) ); // stopped on $list	WITHOUT_CLASSIFICATION	0.999999476782127	WITHOUT_CLASSIFICATION	5.232178730164297E-7	DESIGN
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999916580057441	WITHOUT_CLASSIFICATION	8.341994255931955E-6	DESIGN
// below is for Cache' that don't have str in 2007.1 there is str and we register str directly	WITHOUT_CLASSIFICATION	0.9999761941641958	WITHOUT_CLASSIFICATION	2.3805835804135012E-5	DESIGN
// note that %string is deprecated	WITHOUT_CLASSIFICATION	0.977139111042732	WITHOUT_CLASSIFICATION	0.02286088895726797	DESIGN
// %upper is deprecated	WITHOUT_CLASSIFICATION	0.9898010313721453	WITHOUT_CLASSIFICATION	0.01019896862785473	DESIGN
// The syntax used to add a foreign key constraint to a table.	WITHOUT_CLASSIFICATION	0.9999875475543267	WITHOUT_CLASSIFICATION	1.245244567324884E-5	DESIGN
// identifier-commalist	WITHOUT_CLASSIFICATION	0.9999988027905743	WITHOUT_CLASSIFICATION	1.1972094257204489E-6	DESIGN
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999816762058614	WITHOUT_CLASSIFICATION	1.832379413850566E-5	DESIGN
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999827492401745	WITHOUT_CLASSIFICATION	1.7250759825500718E-5	DESIGN
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999952079067272	WITHOUT_CLASSIFICATION	4.7920932727746866E-6	DESIGN
// identifier-commalist	WITHOUT_CLASSIFICATION	0.9999988027905743	WITHOUT_CLASSIFICATION	1.1972094257204489E-6	DESIGN
// The syntax used to add a column to a table	WITHOUT_CLASSIFICATION	0.99849633146077	WITHOUT_CLASSIFICATION	0.0015036685392300522	DESIGN
// Completely optional cascading drop clause.	WITHOUT_CLASSIFICATION	0.999998709528925	WITHOUT_CLASSIFICATION	1.2904710750672614E-6	DESIGN
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999967877267173	WITHOUT_CLASSIFICATION	3.2122732827125665E-6	DESIGN
// LIMIT support (ala TOP) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997921707089488	WITHOUT_CLASSIFICATION	2.0782929105130294E-4	DESIGN
// InterSystems Cache' does not current support "SELECT ... FOR UPDATE" syntax... // Set your transaction mode to READ_COMMITTED before using	WITHOUT_CLASSIFICATION	0.9999985261979781	WITHOUT_CLASSIFICATION	1.4738020218675544E-6	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999983831540221	WITHOUT_CLASSIFICATION	1.6168459779731629E-6	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999983831540221	WITHOUT_CLASSIFICATION	1.6168459779731629E-6	DESIGN
/*<String>*/	WITHOUT_CLASSIFICATION	0.9999704758457372	WITHOUT_CLASSIFICATION	2.9524154262754948E-5	DESIGN
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999853035696212	WITHOUT_CLASSIFICATION	1.4696430378725598E-5	DESIGN
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999549308565948	WITHOUT_CLASSIFICATION	4.506914340517113E-5	DESIGN
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9997794356589015	WITHOUT_CLASSIFICATION	2.2056434109842113E-4	DESIGN
// Does the LIMIT clause come at the start of the SELECT statement, rather than at the end?	WITHOUT_CLASSIFICATION	0.9997097543889927	WITHOUT_CLASSIFICATION	2.902456110073004E-4	DESIGN
// Does the LIMIT clause take a "maximum" row number instead of a total number of returned rows?	WITHOUT_CLASSIFICATION	0.999850545032715	WITHOUT_CLASSIFICATION	1.4945496728500875E-4	DESIGN
// The name of the SQL function that transforms a string to lowercase	WITHOUT_CLASSIFICATION	0.9999997671930267	WITHOUT_CLASSIFICATION	2.328069733574331E-7	DESIGN
// Create an OuterJoinGenerator for this dialect.	WITHOUT_CLASSIFICATION	0.9999840813974638	WITHOUT_CLASSIFICATION	1.5918602536199326E-5	DESIGN
// The keyword used to insert a row without specifying // any column values	WITHOUT_CLASSIFICATION	0.9975347904580529	WITHOUT_CLASSIFICATION	0.0024652095419470414	DESIGN
//registerFunction( "trim", new StandardSQLFunction( "trim", Hibernate.STRING ) );	WITHOUT_CLASSIFICATION	0.9999998259939862	WITHOUT_CLASSIFICATION	1.7400601374632973E-7	DESIGN
//skip the FROM keyword in params	WITHOUT_CLASSIFICATION	0.9998288694673062	WITHOUT_CLASSIFICATION	1.7113053269381413E-4	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.9997309057501701	WITHOUT_CLASSIFICATION	2.690942498298937E-4	DESIGN
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999911242087212	WITHOUT_CLASSIFICATION	8.87579127884005E-6	DESIGN
// SQLFunction implementation	WITHOUT_CLASSIFICATION	0.9999977113380448	WITHOUT_CLASSIFICATION	2.2886619552038266E-6	DESIGN
// conceivable that the dialect ctor could throw HibernateExceptions, so don't re-wrap	WITHOUT_CLASSIFICATION	0.9996240443388589	WITHOUT_CLASSIFICATION	3.759556611411741E-4	DESIGN
// register the standard dialect resolver	WITHOUT_CLASSIFICATION	0.9999996921367637	WITHOUT_CLASSIFICATION	3.0786323630997683E-7	DESIGN
// register resolvers set via Environment property	WITHOUT_CLASSIFICATION	0.9999985108358754	WITHOUT_CLASSIFICATION	1.4891641245146862E-6	DESIGN
// kept for backward compatibility until after the 3.1beta5 release of HA	WITHOUT_CLASSIFICATION	0.9998744698627436	WITHOUT_CLASSIFICATION	1.2553013725630712E-4	DESIGN
//cache the hashcode	WITHOUT_CLASSIFICATION	0.9997783488350146	WITHOUT_CLASSIFICATION	2.216511649853326E-4	DESIGN
// the CascadingAction contract ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999977053380754	WITHOUT_CLASSIFICATION	2.294661924603093E-5	DESIGN
// the CascadingAction implementations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999782112810847	WITHOUT_CLASSIFICATION	2.1788718915361573E-5	DESIGN
// delete does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999991339283708	WITHOUT_CLASSIFICATION	8.660716292956398E-7	DESIGN
// orphans should be deleted during delete	WITHOUT_CLASSIFICATION	0.9999961360124356	WITHOUT_CLASSIFICATION	3.863987564444095E-6	DESIGN
/*(LockMode) anything*/	WITHOUT_CLASSIFICATION	0.9993936369959378	WITHOUT_CLASSIFICATION	6.063630040622022E-4	DESIGN
// lock doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999980451311588	WITHOUT_CLASSIFICATION	1.9548688412533294E-6	DESIGN
// refresh doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999982804651505	WITHOUT_CLASSIFICATION	1.7195348495126206E-6	DESIGN
// evicts don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999938474168028	WITHOUT_CLASSIFICATION	6.152583197241427E-6	DESIGN
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999912418036153	WITHOUT_CLASSIFICATION	8.758196384742042E-6	DESIGN
// orphans should be deleted during save/update	WITHOUT_CLASSIFICATION	0.9999916152659633	WITHOUT_CLASSIFICATION	8.384734036754146E-6	DESIGN
// for deprecated saveOrUpdateCopy()	WITHOUT_CLASSIFICATION	0.9994490431637862	WITHOUT_CLASSIFICATION	5.509568362137885E-4	DESIGN
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.999983901921387	WITHOUT_CLASSIFICATION	1.6098078613005717E-5	DESIGN
//a proxy cannot be transient and it breaks ForeignKeys.isTransient	WITHOUT_CLASSIFICATION	0.999953636672428	WITHOUT_CLASSIFICATION	4.636332757206366E-5	DESIGN
// replicate does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999985019961773	WITHOUT_CLASSIFICATION	1.4980038227506874E-6	DESIGN
// static helper methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999875617372371	WITHOUT_CLASSIFICATION	1.2438262762828247E-5	DESIGN
// handles arrays and newly instantiated collections	WITHOUT_CLASSIFICATION	0.999998495909821	WITHOUT_CLASSIFICATION	1.5040901789711458E-6	DESIGN
// Actually the semantics of the next three are really "Bag" // Note that, unlike objects, collection insertions, updates, // deletions are not really remembered between flushes. We // just re-use the same Lists for convenience.	WITHOUT_CLASSIFICATION	0.9999999503397033	WITHOUT_CLASSIFICATION	4.966029657430559E-8	DESIGN
// Add these directly to the executions queue	WITHOUT_CLASSIFICATION	0.9999997356194589	WITHOUT_CLASSIFICATION	2.6438054109389603E-7	DESIGN
// continue loop	WITHOUT_CLASSIFICATION	0.9999985876141718	WITHOUT_CLASSIFICATION	1.412385828134162E-6	DESIGN
//sort the updates by fk	WITHOUT_CLASSIFICATION	0.9987452658785099	WITHOUT_CLASSIFICATION	0.0012547341214901794	DESIGN
//sort the updates by pk	WITHOUT_CLASSIFICATION	0.9971540455817346	WITHOUT_CLASSIFICATION	0.0028459544182653073	DESIGN
// the mapping of entity names to their latest batch numbers.	WITHOUT_CLASSIFICATION	0.999999968351838	WITHOUT_CLASSIFICATION	3.164816194653442E-8	DESIGN
// the map of batch numbers to EntityInsertAction lists	WITHOUT_CLASSIFICATION	0.9999999677298805	WITHOUT_CLASSIFICATION	3.2270119497485285E-8	DESIGN
//optimize the hash size to eliminate a rehash.	WITHOUT_CLASSIFICATION	0.9999943162868169	WITHOUT_CLASSIFICATION	5.683713183051086E-6	DESIGN
// the list of entity names that indicate the batch number	WITHOUT_CLASSIFICATION	0.9999994905725702	WITHOUT_CLASSIFICATION	5.094274297358497E-7	DESIGN
// remove the current element from insertions. It will be added back later.	WITHOUT_CLASSIFICATION	0.9984374135597873	WITHOUT_CLASSIFICATION	0.0015625864402125885	DESIGN
// the entity associated with the current action.	WITHOUT_CLASSIFICATION	0.9999996062078244	WITHOUT_CLASSIFICATION	3.9379217557247514E-7	DESIGN
// There is already an existing batch for this type of entity. // Check to see if the latest batch is acceptable.	WITHOUT_CLASSIFICATION	0.9999999856103293	WITHOUT_CLASSIFICATION	1.4389670747661779E-8	DESIGN
// now rebuild the insertions list. There is a batch for each entry in the name list.	WITHOUT_CLASSIFICATION	0.9999996998898785	WITHOUT_CLASSIFICATION	3.0011012154945314E-7	DESIGN
// the current batch number is the latest batch for this entity type.	WITHOUT_CLASSIFICATION	0.9999992232165573	WITHOUT_CLASSIFICATION	7.767834427483739E-7	DESIGN
// loop through all the associations of the current entity and make sure that they are processed // before the current batch number	WITHOUT_CLASSIFICATION	0.9999999183422033	WITHOUT_CLASSIFICATION	8.165779676843463E-8	DESIGN
// find the batch number associated with the current association, if any.	WITHOUT_CLASSIFICATION	0.9999999325300141	WITHOUT_CLASSIFICATION	6.746998592799477E-8	DESIGN
// create a new batch for this type. The batch number is the number of current batches.	WITHOUT_CLASSIFICATION	0.999999132756731	WITHOUT_CLASSIFICATION	8.672432690207322E-7	DESIGN
// loop through all the associated entities and make sure they have been // processed before the latest // batch associated with this entity type.	WITHOUT_CLASSIFICATION	0.9999999662692413	WITHOUT_CLASSIFICATION	3.373075865811051E-8	DESIGN
// since this entity will now be processed in the latest possible batch, // we can be assured that it will come after all other associations, // there's not need to continue checking.	WITHOUT_CLASSIFICATION	0.9329073043484287	WITHOUT_CLASSIFICATION	0.06709269565157118	DESIGN
//cascade to current collection elements	WITHOUT_CLASSIFICATION	0.9999996508632778	WITHOUT_CLASSIFICATION	3.491367221483159E-7	DESIGN
//not really necessary, but good for consistency...	WITHOUT_CLASSIFICATION	0.9994679619760333	WITHOUT_CLASSIFICATION	5.320380239667292E-4	DESIGN
// we can't cascade to non-embedded elements	WITHOUT_CLASSIFICATION	0.9999997073443486	WITHOUT_CLASSIFICATION	2.9265565137551705E-7	DESIGN
//a newly instantiated collection can't have orphans	WITHOUT_CLASSIFICATION	0.9999948224669939	WITHOUT_CLASSIFICATION	5.177533006049063E-6	DESIGN
// handle orphaned entities!!	WITHOUT_CLASSIFICATION	0.9994917224218071	WITHOUT_CLASSIFICATION	5.082775781928874E-4	DESIGN
// Loaded entity instances, by EntityUniqueKey	WITHOUT_CLASSIFICATION	0.9999863359888417	WITHOUT_CLASSIFICATION	1.3664011158228377E-5	DESIGN
// Identity map of EntityEntry instances, by the entity instance	WITHOUT_CLASSIFICATION	0.9999997921749106	WITHOUT_CLASSIFICATION	2.0782508934542073E-7	DESIGN
// Entity proxies, by EntityKey	WITHOUT_CLASSIFICATION	0.9998614661641912	WITHOUT_CLASSIFICATION	1.3853383580882076E-4	DESIGN
// Snapshots of current database state for entities // that have *not* been loaded	WITHOUT_CLASSIFICATION	0.9999998286613437	WITHOUT_CLASSIFICATION	1.7133865624408257E-7	DESIGN
// Identity map of array holder ArrayHolder instances, by the array instance	WITHOUT_CLASSIFICATION	0.9999987702233819	WITHOUT_CLASSIFICATION	1.2297766180450094E-6	DESIGN
// Collection wrappers, by the CollectionKey //key=CollectionKey, value=PersistentCollection	WITHOUT_CLASSIFICATION	0.9999998864498143	WITHOUT_CLASSIFICATION	1.1355018564868191E-7	DESIGN
// Set of EntityKeys of deleted objects	WITHOUT_CLASSIFICATION	0.9999998304807038	WITHOUT_CLASSIFICATION	1.6951929625969682E-7	DESIGN
// properties that we have tried to load, and not found in the database	WITHOUT_CLASSIFICATION	0.9998457667827225	WITHOUT_CLASSIFICATION	1.5423321727754213E-4	DESIGN
// A list of collection wrappers that were instantiating during result set // processing, that we will need to initialize at the end of the query	WITHOUT_CLASSIFICATION	0.9999999507276386	WITHOUT_CLASSIFICATION	4.9272361468541455E-8	DESIGN
// A container for collections we load up when the owning entity is not // yet loaded ... for now, this is purely transient!	WITHOUT_CLASSIFICATION	0.9999562815478125	WITHOUT_CLASSIFICATION	4.37184521876338E-5	DESIGN
// Downgrade locks	WITHOUT_CLASSIFICATION	0.9999998874995293	WITHOUT_CLASSIFICATION	1.1250047061856216E-7	DESIGN
// any earlier proxy takes precedence	WITHOUT_CLASSIFICATION	0.9999999223959375	WITHOUT_CLASSIFICATION	7.760406244815278E-8	DESIGN
//unwrap the object	WITHOUT_CLASSIFICATION	0.9999977910314894	WITHOUT_CLASSIFICATION	2.2089685106043998E-6	DESIGN
//initialize + unwrap the object	WITHOUT_CLASSIFICATION	0.999991595735997	WITHOUT_CLASSIFICATION	8.404264002928129E-6	DESIGN
//return the proxied object	WITHOUT_CLASSIFICATION	0.9998574869234119	WITHOUT_CLASSIFICATION	1.4251307658812035E-4	DESIGN
//overwrite old proxy	WITHOUT_CLASSIFICATION	0.9999304938729219	WITHOUT_CLASSIFICATION	6.950612707807973E-5	DESIGN
// early exit...	WITHOUT_CLASSIFICATION	0.9999941979206567	WITHOUT_CLASSIFICATION	5.802079343391671E-6	DESIGN
// or should it actually throw an exception?	WITHOUT_CLASSIFICATION	0.9989224224886728	WITHOUT_CLASSIFICATION	0.0010775775113271932	DESIGN
//treat it just like a new collection	WITHOUT_CLASSIFICATION	0.999998822448125	WITHOUT_CLASSIFICATION	1.177551875041176E-6	DESIGN
//do this work only at the very highest level of the load //don't let this method be called recursively	WITHOUT_CLASSIFICATION	0.918440656946851	WITHOUT_CLASSIFICATION	0.08155934305314909	DESIGN
//note that each iteration of the loop may add new elements	WITHOUT_CLASSIFICATION	0.9999994427244081	WITHOUT_CLASSIFICATION	5.572755919839374E-7	DESIGN
//it might be an unwrapped collection reference! //try to find a wrapper (slowish)	WITHOUT_CLASSIFICATION	0.9994488635656115	WITHOUT_CLASSIFICATION	5.511364343884194E-4	DESIGN
/*public boolean isNonExistant(EntityKey key) {	WITHOUT_CLASSIFICATION	0.9999814193090402	WITHOUT_CLASSIFICATION	1.8580690959875787E-5	DESIGN
/*public boolean isNonExistant(EntityUniqueKey key) {	WITHOUT_CLASSIFICATION	0.9999811193187567	WITHOUT_CLASSIFICATION	1.8880681243369322E-5	DESIGN
// iterate all the entities currently associated with the persistence context.	WITHOUT_CLASSIFICATION	0.9999996646504756	WITHOUT_CLASSIFICATION	3.3534952433555683E-7	DESIGN
// does this entity entry pertain to the entity persister in which we are interested (owner)?	WITHOUT_CLASSIFICATION	0.9998354473720478	WITHOUT_CLASSIFICATION	1.645526279521817E-4	DESIGN
//check if the managed object is the parent	WITHOUT_CLASSIFICATION	0.9999640926962994	WITHOUT_CLASSIFICATION	3.590730370061232E-5	DESIGN
// otherwise, the proxy was pruned during the serialization process	WITHOUT_CLASSIFICATION	0.9999998003004688	WITHOUT_CLASSIFICATION	1.996995312133088E-7	DESIGN
// adds remove as a sort-of alias for delete...	WITHOUT_CLASSIFICATION	0.9999887047996032	WITHOUT_CLASSIFICATION	1.1295200396699829E-5	DESIGN
//bad cast	WITHOUT_CLASSIFICATION	0.9986147794833392	WITHOUT_CLASSIFICATION	0.001385220516660833	DESIGN
//return lhsPersister.getSubclassPropertyColumnNames(property);	WITHOUT_CLASSIFICATION	0.9999975909865335	WITHOUT_CLASSIFICATION	2.409013466543347E-6	DESIGN
//property-refs for associations defined on a //component are not supported, so no need to slice	WITHOUT_CLASSIFICATION	0.9999973359615351	WITHOUT_CLASSIFICATION	2.6640384649019326E-6	DESIGN
//if there is no property-ref, assume the join //is to the subclass table (ie. the table of the //subclass that the association belongs to)	WITHOUT_CLASSIFICATION	0.999997197103522	WITHOUT_CLASSIFICATION	2.8028964780317544E-6	DESIGN
//handle a property-ref	WITHOUT_CLASSIFICATION	0.9998158690961825	WITHOUT_CLASSIFICATION	1.8413090381744313E-4	DESIGN
/*NativeSQLQueryReturn*/	WITHOUT_CLASSIFICATION	0.9992440103787122	WITHOUT_CLASSIFICATION	7.559896212877714E-4	DESIGN
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999999647714148	WITHOUT_CLASSIFICATION	3.52285850878655E-8	DESIGN
// why is all others non final ?	WITHOUT_CLASSIFICATION	0.9996437332722092	WITHOUT_CLASSIFICATION	3.562667277907061E-4	DESIGN
//this.forceCacheRefresh = forceCacheRefresh;	WITHOUT_CLASSIFICATION	0.9999885020662821	WITHOUT_CLASSIFICATION	1.1497933717872309E-5	DESIGN
// HELLA IMPORTANT OPTIMIZATION!!!	WITHOUT_CLASSIFICATION	0.9997986759818708	WITHOUT_CLASSIFICATION	2.013240181290931E-4	DESIGN
/*return that.type.equals(type) && 	WITHOUT_CLASSIFICATION	0.9999746516673819	WITHOUT_CLASSIFICATION	2.5348332618079847E-5	DESIGN
//Must occur after resolving identifiers!	WITHOUT_CLASSIFICATION	0.9999986070686259	WITHOUT_CLASSIFICATION	1.3929313741629655E-6	DESIGN
//take a snapshot	WITHOUT_CLASSIFICATION	0.9999555436977192	WITHOUT_CLASSIFICATION	4.445630228066182E-5	DESIGN
// do a check	WITHOUT_CLASSIFICATION	0.999995738282603	WITHOUT_CLASSIFICATION	4.261717396969413E-6	DESIGN
// the owning entity may have been deleted and its identifier unset due to // identifier-rollback; in which case, try to look up its identifier from // the persistence context	WITHOUT_CLASSIFICATION	0.9999979495761452	WITHOUT_CLASSIFICATION	2.050423854825458E-6	DESIGN
// do the work	WITHOUT_CLASSIFICATION	0.999684939870605	WITHOUT_CLASSIFICATION	3.150601293949424E-4	DESIGN
// We've been here before	WITHOUT_CLASSIFICATION	0.99999163023632	WITHOUT_CLASSIFICATION	8.369763680020808E-6	DESIGN
// it is or was referenced _somewhere_	WITHOUT_CLASSIFICATION	0.9991198449717813	WITHOUT_CLASSIFICATION	8.801550282188507E-4	DESIGN
// do the work	WITHOUT_CLASSIFICATION	0.999684939870605	WITHOUT_CLASSIFICATION	3.150601293949424E-4	DESIGN
// if either its role changed,	WITHOUT_CLASSIFICATION	0.999995270412107	WITHOUT_CLASSIFICATION	4.729587892965977E-6	DESIGN
// or its key changed	WITHOUT_CLASSIFICATION	0.9999658526394744	WITHOUT_CLASSIFICATION	3.414736052563023E-5	DESIGN
// we will need to create new entries	WITHOUT_CLASSIFICATION	0.9999557433740659	WITHOUT_CLASSIFICATION	4.425662593399732E-5	DESIGN
// we will need to remove ye olde entries	WITHOUT_CLASSIFICATION	0.9999337606441256	WITHOUT_CLASSIFICATION	6.623935587438206E-5	DESIGN
// force initialize!	WITHOUT_CLASSIFICATION	0.999994214105577	WITHOUT_CLASSIFICATION	5.785894423063068E-6	DESIGN
// else if it's elements changed	WITHOUT_CLASSIFICATION	0.9999998978151537	WITHOUT_CLASSIFICATION	1.0218484635024644E-7	DESIGN
//ATTRIBUTES MAINTAINED BETWEEN FLUSH CYCLES	WITHOUT_CLASSIFICATION	0.9999303664873996	WITHOUT_CLASSIFICATION	6.963351260030972E-5	DESIGN
// session-start/post-flush persistent state	WITHOUT_CLASSIFICATION	0.9999997263892418	WITHOUT_CLASSIFICATION	2.7361075815577113E-7	DESIGN
// allow the CollectionSnapshot to be serialized	WITHOUT_CLASSIFICATION	0.9999988506425941	WITHOUT_CLASSIFICATION	1.149357405909989E-6	DESIGN
// ATTRIBUTES USED ONLY DURING FLUSH CYCLE	WITHOUT_CLASSIFICATION	0.9999841662894893	WITHOUT_CLASSIFICATION	1.5833710510751795E-5	DESIGN
// "current" means the reference that was found during flush() 	WITHOUT_CLASSIFICATION	0.9999997038954954	WITHOUT_CLASSIFICATION	2.9610450457312556E-7	DESIGN
// "loaded" means the reference that is consistent  // with the current database state	WITHOUT_CLASSIFICATION	0.9999996864198583	WITHOUT_CLASSIFICATION	3.1358014175000497E-7	DESIGN
// during flush, we navigate the object graph to // collections and decide what to do with them	WITHOUT_CLASSIFICATION	0.9999988163274839	WITHOUT_CLASSIFICATION	1.1836725161698083E-6	DESIGN
// if we instantiate a collection during the flush() process, // we must ignore it for the rest of the flush()	WITHOUT_CLASSIFICATION	0.9999998696074768	WITHOUT_CLASSIFICATION	1.3039252317906908E-7	DESIGN
// new collections that get found + wrapped // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999654513792088	WITHOUT_CLASSIFICATION	3.4548620791273444E-5	DESIGN
//a newly wrapped collection is NOT dirty (or we get unnecessary version updates)	WITHOUT_CLASSIFICATION	0.994447271281564	WITHOUT_CLASSIFICATION	0.005552728718435981	DESIGN
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9997883076751454	WITHOUT_CLASSIFICATION	2.1169232485466718E-4	DESIGN
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9997883076751454	WITHOUT_CLASSIFICATION	2.1169232485466718E-4	DESIGN
// detached collections that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999575241288565	WITHOUT_CLASSIFICATION	4.2475871143429E-5	DESIGN
//optimization	WITHOUT_CLASSIFICATION	0.9999149324567002	WITHOUT_CLASSIFICATION	8.506754329988257E-5	DESIGN
//optimization //optimization	WITHOUT_CLASSIFICATION	0.9999569186150455	WITHOUT_CLASSIFICATION	4.3081384954538864E-5	DESIGN
//re-snapshot	WITHOUT_CLASSIFICATION	0.9997926035865181	WITHOUT_CLASSIFICATION	2.073964134819534E-4	DESIGN
// for convenience to save some lookups	WITHOUT_CLASSIFICATION	0.9999865704574712	WITHOUT_CLASSIFICATION	1.3429542528742034E-5	DESIGN
//NOTE: this is not updated when properties are fetched lazily!	WITHOUT_CLASSIFICATION	0.9756077140797318	DESIGN	0.02439228592026822	WITHOUT_CLASSIFICATION
//memory optimization	WITHOUT_CLASSIFICATION	0.9999114284668212	WITHOUT_CLASSIFICATION	8.857153317869738E-5	DESIGN
// use the id value of a newly instantiated instance as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999935628705637	WITHOUT_CLASSIFICATION	6.437129436270311E-6	DESIGN
// copied from Session:	WITHOUT_CLASSIFICATION	0.9998923404846781	WITHOUT_CLASSIFICATION	1.0765951532189925E-4	DESIGN
// this should not happen since the DTD prevents it	WITHOUT_CLASSIFICATION	0.9998000368240446	WITHOUT_CLASSIFICATION	1.9996317595528815E-4	DESIGN
// JoinProcessor needs to know if the where clause fragment came from a dynamic filter or not so it // can put the where clause fragment in the right place in the SQL AST.   'hasFilterCondition' keeps track // of that fact.	WITHOUT_CLASSIFICATION	0.953679457248601	WITHOUT_CLASSIFICATION	0.04632054275139886	DESIGN
// the current join represents the join between a many-to-many association table // and its "target" table.  Here we need to apply any additional filters // defined specifically on the many-to-many	WITHOUT_CLASSIFICATION	0.9999999039892902	WITHOUT_CLASSIFICATION	9.601070979789236E-8	DESIGN
//check basic level one nullablilty	WITHOUT_CLASSIFICATION	0.9999979539084867	WITHOUT_CLASSIFICATION	2.0460915134479646E-6	DESIGN
//values is not null and is checkable, we'll look deeper	WITHOUT_CLASSIFICATION	0.9999270255968915	WITHOUT_CLASSIFICATION	7.297440310845702E-5	DESIGN
//for non null args, check for components and elements containing components	WITHOUT_CLASSIFICATION	0.9999999798680687	WITHOUT_CLASSIFICATION	2.013193128524792E-8	DESIGN
//cache the hashcode	WITHOUT_CLASSIFICATION	0.9997783488350146	WITHOUT_CLASSIFICATION	2.216511649853326E-4	DESIGN
//persistent collections may have components	WITHOUT_CLASSIFICATION	0.9999888930352353	WITHOUT_CLASSIFICATION	1.1106964764694654E-5	DESIGN
//check for all components values in the collection	WITHOUT_CLASSIFICATION	0.9999939774453062	WITHOUT_CLASSIFICATION	6.022554693935843E-6	DESIGN
/* will check current level if some of them are not null	WITHOUT_CLASSIFICATION	0.9992521389288439	WITHOUT_CLASSIFICATION	7.478610711560377E-4	DESIGN
//do the test	WITHOUT_CLASSIFICATION	0.9999584916994664	WITHOUT_CLASSIFICATION	4.150830053358013E-5	DESIGN
// if its an uninitialized proxy it can't be transient	WITHOUT_CLASSIFICATION	0.999996595503563	WITHOUT_CLASSIFICATION	3.404496437008904E-6	DESIGN
//unwrap it	WITHOUT_CLASSIFICATION	0.9999553234471389	WITHOUT_CLASSIFICATION	4.46765528611985E-5	DESIGN
// See if the entity is already bound to this session, if not look at the // entity identifier and assume that the entity is persistent if the // id is not "unsaved" (that is, we rely on foreign keys to keep // database integrity)	WITHOUT_CLASSIFICATION	0.9999997757398882	WITHOUT_CLASSIFICATION	2.2426011183215278E-7	DESIGN
// an unfetched association can only point to // an entity that already exists in the db	WITHOUT_CLASSIFICATION	0.9999996229236354	WITHOUT_CLASSIFICATION	3.7707636459610984E-7	DESIGN
// let the interceptor inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999995316429269	WITHOUT_CLASSIFICATION	4.6835707318732643E-7	DESIGN
// let the persister inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999981607301353	WITHOUT_CLASSIFICATION	1.8392698648238468E-6	DESIGN
// we use the assumed value, if there is one, to avoid hitting // the database	WITHOUT_CLASSIFICATION	0.999135474155746	WITHOUT_CLASSIFICATION	8.645258442541302E-4	DESIGN
// hit the database, after checking the session cache for a snapshot	WITHOUT_CLASSIFICATION	0.9998161265766374	WITHOUT_CLASSIFICATION	1.8387342336261247E-4	DESIGN
// context-entity-identifier returns null explicitly if the entity // is not associated with the persistence context; so make some // deeper checks...	WITHOUT_CLASSIFICATION	0.99999997975523	WITHOUT_CLASSIFICATION	2.0244769953533916E-8	DESIGN
//int count = 0;	WITHOUT_CLASSIFICATION	0.9999626109252295	WITHOUT_CLASSIFICATION	3.738907477048135E-5	DESIGN
//the first key found after the given key	WITHOUT_CLASSIFICATION	0.9999989617778081	WITHOUT_CLASSIFICATION	1.0382221917984035E-6	DESIGN
//checkForEnd = false;	WITHOUT_CLASSIFICATION	0.9999906687585062	WITHOUT_CLASSIFICATION	9.331241493860966E-6	DESIGN
//count++;	WITHOUT_CLASSIFICATION	0.9999238274013922	WITHOUT_CLASSIFICATION	7.617259860780402E-5	DESIGN
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9996899323469238	WITHOUT_CLASSIFICATION	3.100676530762061E-4	DESIGN
//we ran out of keys to try	WITHOUT_CLASSIFICATION	0.9999837732720995	WITHOUT_CLASSIFICATION	1.6226727900427582E-5	DESIGN
//first element of array is reserved for the actual instance we are loading!	WITHOUT_CLASSIFICATION	0.9999704962382691	WITHOUT_CLASSIFICATION	2.9503761730914404E-5	DESIGN
//the first id found after the given id	WITHOUT_CLASSIFICATION	0.9999984586839883	WITHOUT_CLASSIFICATION	1.5413160117385527E-6	DESIGN
//we ran out of ids to try	WITHOUT_CLASSIFICATION	0.9991869753733102	WITHOUT_CLASSIFICATION	8.13024626689761E-4	DESIGN
// look for existing collection as part of the persistence context	WITHOUT_CLASSIFICATION	0.9999999904304931	WITHOUT_CLASSIFICATION	9.569506788873215E-9	DESIGN
// ignore this row of results! Note the early exit	WITHOUT_CLASSIFICATION	0.9999864904291426	WITHOUT_CLASSIFICATION	1.350957085743782E-5	DESIGN
// initialize this collection	WITHOUT_CLASSIFICATION	0.9998241188314823	WITHOUT_CLASSIFICATION	1.758811685177922E-4	DESIGN
// create one	WITHOUT_CLASSIFICATION	0.9999950284847049	WITHOUT_CLASSIFICATION	4.971515295189265E-6	DESIGN
// warning: can cause a recursive calls! (proxy initialization)	WITHOUT_CLASSIFICATION	0.9999653308268734	WITHOUT_CLASSIFICATION	3.4669173126581074E-5	DESIGN
// there were no queued additions // and the role has a cache	WITHOUT_CLASSIFICATION	0.9999942171750928	WITHOUT_CLASSIFICATION	5.7828249071162355E-6	DESIGN
// and this is not a forced initialization during flush	WITHOUT_CLASSIFICATION	0.9999298158645739	WITHOUT_CLASSIFICATION	7.018413542616647E-5	DESIGN
// some filters affecting the collection are enabled on the session, so do not do the put into the cache.	WITHOUT_CLASSIFICATION	0.999999488474486	WITHOUT_CLASSIFICATION	5.115255138785455E-7	DESIGN
// cleanup code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998340814093347	WITHOUT_CLASSIFICATION	1.6591859066531747E-4	DESIGN
// loading collection xrefs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993569881012	WITHOUT_CLASSIFICATION	6.43011898725726E-7	DESIGN
// Collection load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999077241755	WITHOUT_CLASSIFICATION	9.227582450287917E-7	DESIGN
// simple cache of param metadata based on query string.  Ideally, the // original "user-supplied query" string should be used to retreive this // metadata (i.e., not the para-list-expanded query string) to avoid // unnecessary cache entries. // Used solely for caching param metadata for native-sql queries, see // getSQLParameterMetadata() for a discussion as to why...	WITHOUT_CLASSIFICATION	0.9999891458148054	WITHOUT_CLASSIFICATION	1.0854185194685187E-5	DESIGN
// the cache of the actual plans...	WITHOUT_CLASSIFICATION	0.9999999080810238	WITHOUT_CLASSIFICATION	9.191897616923515E-8	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.9997309057501701	WITHOUT_CLASSIFICATION	2.690942498298937E-4	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.9997309057501701	WITHOUT_CLASSIFICATION	2.690942498298937E-4	DESIGN
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999998924515836	WITHOUT_CLASSIFICATION	1.0754841650083431E-7	DESIGN
// for native-sql queries, the param metadata is determined outside // any relation to a query plan, because query plan creation and/or // retreival for a native-sql query depends on all of the return // types having been set, which might not be the case up-front when // param metadata would be most useful	WITHOUT_CLASSIFICATION	0.9999849784821144	WITHOUT_CLASSIFICATION	1.5021517885607426E-5	DESIGN
// don't care...	WITHOUT_CLASSIFICATION	0.9999238974096191	WITHOUT_CLASSIFICATION	7.610259038091703E-5	DESIGN
// Recognition code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999831246144637	WITHOUT_CLASSIFICATION	1.687538553634864E-5	DESIGN
// don't care...	WITHOUT_CLASSIFICATION	0.9999238974096191	WITHOUT_CLASSIFICATION	7.610259038091703E-5	DESIGN
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9813234606789265	WITHOUT_CLASSIFICATION	0.018676539321073476	DESIGN
// break the outer loop !!!	WITHOUT_CLASSIFICATION	0.9999636168351154	WITHOUT_CLASSIFICATION	3.638316488468047E-5	DESIGN
// named parameter	WITHOUT_CLASSIFICATION	0.9999916719093375	WITHOUT_CLASSIFICATION	8.328090662582233E-6	DESIGN
// could be either an ordinal or JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999995775773399	WITHOUT_CLASSIFICATION	4.22422660014916E-7	DESIGN
// a peek ahead showed this as an JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999981608304043	WITHOUT_CLASSIFICATION	1.8391695956909235E-6	DESIGN
// make sure this "name" is an integral	WITHOUT_CLASSIFICATION	0.9999999819309857	WITHOUT_CLASSIFICATION	1.806901423981067E-8	DESIGN
// pre-determine and cache the hashcode	WITHOUT_CLASSIFICATION	0.9999791580017343	WITHOUT_CLASSIFICATION	2.0841998265749786E-5	DESIGN
// perform the actual work	WITHOUT_CLASSIFICATION	0.9999981618293909	WITHOUT_CLASSIFICATION	1.8381706090722039E-6	DESIGN
// if everything went ok, commit the transaction and close the obtained // connection handle...	WITHOUT_CLASSIFICATION	0.9999985877317656	WITHOUT_CLASSIFICATION	1.4122682343485394E-6	DESIGN
// at some point the processing went bad, so we need to: //      1) make sure the connection handle gets released //      2) try to cleanup the JTA context as much as possible	WITHOUT_CLASSIFICATION	0.9939175177861295	WITHOUT_CLASSIFICATION	0.00608248221387055	DESIGN
// finally handle the exception	WITHOUT_CLASSIFICATION	0.9999125703116593	WITHOUT_CLASSIFICATION	8.742968834063564E-5	DESIGN
// a "detached" collection that belonged to a different entity	WITHOUT_CLASSIFICATION	0.9999998571189523	WITHOUT_CLASSIFICATION	1.42881047766412E-7	DESIGN
//saveOrUpdateCopy() is deprecated!	WITHOUT_CLASSIFICATION	0.8646146387732553	WITHOUT_CLASSIFICATION	0.13538536122674472	DESIGN
// collectionPersister should not be null, but we don't want to throw // an exception if it is null	WITHOUT_CLASSIFICATION	0.9985721999172336	WITHOUT_CLASSIFICATION	0.0014278000827664108	DESIGN
// otherwise a null or brand new collection // this will also (inefficiently) handle arrays, which // have no snapshot, so we can't do any better //processArrayOrNewCollection(collection, type);	WITHOUT_CLASSIFICATION	0.998885905769311	WITHOUT_CLASSIFICATION	0.0011140942306890678	DESIGN
// a "detached" collection that originally belonged to the same entity	WITHOUT_CLASSIFICATION	0.9999996670618034	WITHOUT_CLASSIFICATION	3.329381966271324E-7	DESIGN
//do nothing	WITHOUT_CLASSIFICATION	0.9998071095517321	WITHOUT_CLASSIFICATION	1.9289044826780317E-4	DESIGN
//do nothing	WITHOUT_CLASSIFICATION	0.9998071095517321	WITHOUT_CLASSIFICATION	1.9289044826780317E-4	DESIGN
//Force a substitution!	WITHOUT_CLASSIFICATION	0.9998284240117489	WITHOUT_CLASSIFICATION	1.7157598825108961E-4	DESIGN
// The user requested a "greater" (i.e. more restrictive) form of // pessimistic lock	WITHOUT_CLASSIFICATION	0.9999997388093564	WITHOUT_CLASSIFICATION	2.6119064361462217E-7	DESIGN
// the database now holds a lock + the object is flushed from the cache, // so release the soft lock	WITHOUT_CLASSIFICATION	0.9999719521545276	WITHOUT_CLASSIFICATION	2.8047845472364775E-5	DESIGN
// now update the object .. has to be outside the main if block above (because of collections)	WITHOUT_CLASSIFICATION	0.9999856771590852	WITHOUT_CLASSIFICATION	1.4322840914810557E-5	DESIGN
// Search for collections by reachability, updating their role. // We don't want to touch collections reachable from a deleted object	WITHOUT_CLASSIFICATION	0.9997029809506772	WITHOUT_CLASSIFICATION	2.9701904932284256E-4	DESIGN
// this is a situation where the entity id is assigned by a post-insert generator // and was saved outside the transaction forcing it to be delayed	WITHOUT_CLASSIFICATION	0.999937615347918	WITHOUT_CLASSIFICATION	6.23846520818925E-5	DESIGN
// NOTE: we need to do the wrap here even if its not "dirty", // because collections need wrapping but changes to _them_ // don't dirty the container. Also, for versioned data, we // need to wrap before calling searchForDirtyCollections	WITHOUT_CLASSIFICATION	0.9999245085043789	WITHOUT_CLASSIFICATION	7.549149562112182E-5	DESIGN
//grab its state saved at deletion	WITHOUT_CLASSIFICATION	0.9999935621232712	WITHOUT_CLASSIFICATION	6.437876728838539E-6	DESIGN
// grab its current state	WITHOUT_CLASSIFICATION	0.9999989502967376	WITHOUT_CLASSIFICATION	1.0497032624126248E-6	DESIGN
// schedule the update // note that we intentionally do _not_ pass in currentPersistentState!	WITHOUT_CLASSIFICATION	0.9999997411770002	WITHOUT_CLASSIFICATION	2.5882299987009327E-7	DESIGN
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999921221904411	WITHOUT_CLASSIFICATION	7.877809558932172E-6	DESIGN
// give the Interceptor a chance to process property values, if the properties // were modified by the Interceptor, we need to set them back to the object	WITHOUT_CLASSIFICATION	0.9999945793686431	WITHOUT_CLASSIFICATION	5.420631356824081E-6	DESIGN
// compare to cached state (ignoring collections unless versioned)	WITHOUT_CLASSIFICATION	0.9999999586616325	WITHOUT_CLASSIFICATION	4.1338367487560017E-8	DESIGN
// if it was dirtied by a collection only	WITHOUT_CLASSIFICATION	0.9999979745682599	WITHOUT_CLASSIFICATION	2.0254317400685293E-6	DESIGN
// increment the version number (if necessary)	WITHOUT_CLASSIFICATION	0.9999988304264114	WITHOUT_CLASSIFICATION	1.1695735886515226E-6	DESIGN
// check nullability but do not perform command execute // we'll use scheduled updates for that.	WITHOUT_CLASSIFICATION	0.9999961953033518	WITHOUT_CLASSIFICATION	3.8046966482464115E-6	DESIGN
//give the Interceptor a chance to modify property values	WITHOUT_CLASSIFICATION	0.999829415966815	WITHOUT_CLASSIFICATION	1.705840331849881E-4	DESIGN
//now we might need to recalculate the dirtyProperties array	WITHOUT_CLASSIFICATION	0.9996007502738998	WITHOUT_CLASSIFICATION	3.992497261001668E-4	DESIGN
//use the current version	WITHOUT_CLASSIFICATION	0.9999925451843794	WITHOUT_CLASSIFICATION	7.45481562064925E-6	DESIGN
// Interceptor returned null, so do the dirtycheck ourself, if possible	WITHOUT_CLASSIFICATION	0.9999997321407438	WITHOUT_CLASSIFICATION	2.6785925615736937E-7	DESIGN
// object loaded by update()	WITHOUT_CLASSIFICATION	0.9999908319144354	WITHOUT_CLASSIFICATION	9.168085564645504E-6	DESIGN
// dirty check against the usual snapshot of the entity	WITHOUT_CLASSIFICATION	0.9999990966776763	WITHOUT_CLASSIFICATION	9.033223237137965E-7	DESIGN
// dirty check against the database snapshot, if possible/necessary	WITHOUT_CLASSIFICATION	0.999999702473647	WITHOUT_CLASSIFICATION	2.975263530002032E-7	DESIGN
// the Interceptor handled the dirty checking	WITHOUT_CLASSIFICATION	0.9882606454407289	WITHOUT_CLASSIFICATION	0.011739354559271203	DESIGN
//even process null collections	WITHOUT_CLASSIFICATION	0.9999996803773261	WITHOUT_CLASSIFICATION	3.1962267379825307E-7	DESIGN
// get the id from the object	WITHOUT_CLASSIFICATION	0.9999704624590962	WITHOUT_CLASSIFICATION	2.953754090384604E-5	DESIGN
//always do an INSERT, and let it fail by constraint violation	WITHOUT_CLASSIFICATION	0.9999992231343955	WITHOUT_CLASSIFICATION	7.768656045229987E-7	DESIGN
//what is the version on the database?	WITHOUT_CLASSIFICATION	0.9893857846224536	WITHOUT_CLASSIFICATION	0.010614215377546355	DESIGN
/// HHH-2378	WITHOUT_CLASSIFICATION	0.9999632450169872	WITHOUT_CLASSIFICATION	3.675498301274883E-5	DESIGN
//will result in a SQL UPDATE:	WITHOUT_CLASSIFICATION	0.999640419000939	WITHOUT_CLASSIFICATION	3.5958099906094923E-4	DESIGN
//else do nothing (don't even reassociate object!)	WITHOUT_CLASSIFICATION	0.9999941622086352	WITHOUT_CLASSIFICATION	5.837791364703395E-6	DESIGN
// no existing row - do an insert	WITHOUT_CLASSIFICATION	0.9999774664524383	WITHOUT_CLASSIFICATION	2.2533547561675854E-5	DESIGN
//refresh() does not pass an entityName	WITHOUT_CLASSIFICATION	0.9999995924958758	WITHOUT_CLASSIFICATION	4.0750412412302174E-7	DESIGN
//do not return a proxy! //(this option indicates we are initializing a proxy)	WITHOUT_CLASSIFICATION	0.999057592370249	WITHOUT_CLASSIFICATION	9.424076297508451E-4	DESIGN
//return a proxy if appropriate	WITHOUT_CLASSIFICATION	0.9999997468771479	WITHOUT_CLASSIFICATION	2.5312285214420466E-7	DESIGN
// return existing object or initialized proxy (unless deleted)	WITHOUT_CLASSIFICATION	0.9999983152508162	WITHOUT_CLASSIFICATION	1.6847491838906354E-6	DESIGN
// return new uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999508130809512	WITHOUT_CLASSIFICATION	4.918691904871806E-5	DESIGN
// this object was already loaded	WITHOUT_CLASSIFICATION	0.9999325587412716	WITHOUT_CLASSIFICATION	6.74412587283659E-5	DESIGN
// Entity was found in second-level cache...	WITHOUT_CLASSIFICATION	0.9995516681388618	WITHOUT_CLASSIFICATION	4.483318611381805E-4	DESIGN
// make it circular-reference safe	WITHOUT_CLASSIFICATION	0.9999454331797547	WITHOUT_CLASSIFICATION	5.4566820245214157E-5	DESIGN
// intializes result by side-effect	WITHOUT_CLASSIFICATION	0.9999979901433909	WITHOUT_CLASSIFICATION	2.009856609238667E-6	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Pre-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999989971140772	WITHOUT_CLASSIFICATION	1.0028859227690914E-6	DESIGN
//some statistics	WITHOUT_CLASSIFICATION	0.9997918039288781	WITHOUT_CLASSIFICATION	2.08196071121801E-4	DESIGN
//safe from concurrent modification because of how entryList() is implemented on IdentityMap	WITHOUT_CLASSIFICATION	0.9847359016790406	WITHOUT_CLASSIFICATION	0.015264098320959438	DESIGN
// Initialize dirty flags for arrays + collections with composite elements // and reset reached, doupdate, etc.	WITHOUT_CLASSIFICATION	0.9999999763683034	WITHOUT_CLASSIFICATION	2.363169663640783E-8	DESIGN
// Among other things, updateReachables() will recursively load all // collections that are moving roles. This might cause entities to // be loaded.	WITHOUT_CLASSIFICATION	0.9990162363706278	WITHOUT_CLASSIFICATION	9.83763629372314E-4	DESIGN
// So this needs to be safe from concurrent modification problems. // It is safe because of how IdentityMap implements entrySet()	WITHOUT_CLASSIFICATION	0.8959280708755698	WITHOUT_CLASSIFICATION	0.1040719291244302	DESIGN
// Update the status of the object and if necessary, schedule an update	WITHOUT_CLASSIFICATION	0.9999997930042944	WITHOUT_CLASSIFICATION	2.0699570557314384E-7	DESIGN
// Schedule updates to collections:	WITHOUT_CLASSIFICATION	0.9999974414718508	WITHOUT_CLASSIFICATION	2.5585281492567536E-6	DESIGN
// we need to lock the collection caches before // executing entity inserts/updates in order to // account for bidi associations	WITHOUT_CLASSIFICATION	0.999999394398833	WITHOUT_CLASSIFICATION	6.056011670197328E-7	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Post-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999983840768049	WITHOUT_CLASSIFICATION	1.6159231951594112E-6	DESIGN
//the database has changed now, so the subselect results need to be invalidated	WITHOUT_CLASSIFICATION	0.9999924202767189	WITHOUT_CLASSIFICATION	7.579723281124272E-6	DESIGN
//if the collection is dereferenced, remove from the session cache //iter.remove(); //does not work, since the entrySet is not backed by the set	WITHOUT_CLASSIFICATION	0.999994678675916	WITHOUT_CLASSIFICATION	5.321324084142879E-6	DESIGN
//otherwise recreate the mapping between the collection and its key	WITHOUT_CLASSIFICATION	0.9999917633862597	WITHOUT_CLASSIFICATION	8.236613740288013E-6	DESIGN
//get a snapshot	WITHOUT_CLASSIFICATION	0.9999567099727715	WITHOUT_CLASSIFICATION	4.329002722859071E-5	DESIGN
/* package-private */	WITHOUT_CLASSIFICATION	0.9999618339842953	WITHOUT_CLASSIFICATION	3.816601570459399E-5	DESIGN
/* package-private */	WITHOUT_CLASSIFICATION	0.9999618339842953	WITHOUT_CLASSIFICATION	3.816601570459399E-5	DESIGN
// key is an entity involved with the operation performed by the listener; // value is a flag indicating if the listener explicitly operates on the entity	WITHOUT_CLASSIFICATION	0.999999945024045	WITHOUT_CLASSIFICATION	5.4975954956741575E-8	DESIGN
// EARLY EXIT!!!	WITHOUT_CLASSIFICATION	0.9970684936481904	WITHOUT_CLASSIFICATION	0.002931506351809615	DESIGN
//ie. the entity came in from update()	WITHOUT_CLASSIFICATION	0.9980906806856404	WITHOUT_CLASSIFICATION	0.0019093193143595848	DESIGN
// before any callbacks, etc, so subdeletions see that this deletion happened first	WITHOUT_CLASSIFICATION	0.9998957491292184	WITHOUT_CLASSIFICATION	1.042508707815914E-4	DESIGN
// Ensures that containing deletions happen before sub-deletions	WITHOUT_CLASSIFICATION	0.9999999583312182	WITHOUT_CLASSIFICATION	4.166878179406191E-8	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999609652327096	WITHOUT_CLASSIFICATION	3.903476729039761E-5	DESIGN
// cascade-delete to collections BEFORE the collection owner is deleted	WITHOUT_CLASSIFICATION	0.9999970410534361	WITHOUT_CLASSIFICATION	2.9589465639018103E-6	DESIGN
// cascade-delete to many-to-one AFTER the parent was deleted	WITHOUT_CLASSIFICATION	0.9998851482231668	WITHOUT_CLASSIFICATION	1.1485177683321309E-4	DESIGN
// if it is an initialized proxy, let cascade // handle it later on	WITHOUT_CLASSIFICATION	0.9999636755224184	WITHOUT_CLASSIFICATION	3.632447758162804E-5	DESIGN
//assign the requested id to the proxy, *before* //reassociating the proxy	WITHOUT_CLASSIFICATION	0.9999964090925443	WITHOUT_CLASSIFICATION	3.590907455693184E-6	DESIGN
// an uninitialized proxy, noop, don't even need to // return an id, since it is never a save()	WITHOUT_CLASSIFICATION	0.9999955001769241	WITHOUT_CLASSIFICATION	4.4998230758836456E-6	DESIGN
//initialize properties of the event:	WITHOUT_CLASSIFICATION	0.9999179070644756	WITHOUT_CLASSIFICATION	8.209293552447438E-5	DESIGN
//return the id in the event object	WITHOUT_CLASSIFICATION	0.9996872431012449	WITHOUT_CLASSIFICATION	3.127568987551062E-4	DESIGN
//TRANSIENT or DELETED	WITHOUT_CLASSIFICATION	0.9999801962209983	WITHOUT_CLASSIFICATION	1.9803779001708795E-5	DESIGN
// use the id assigned to the instance	WITHOUT_CLASSIFICATION	0.9999851625714429	WITHOUT_CLASSIFICATION	1.4837428557156888E-5	DESIGN
// assume this is a newly instantiated transient object // which should be saved rather than updated	WITHOUT_CLASSIFICATION	0.9995617265285888	WITHOUT_CLASSIFICATION	4.382734714111723E-4	DESIGN
// this is a transient object with existing persistent state not loaded by the session	WITHOUT_CLASSIFICATION	0.9999997729544104	WITHOUT_CLASSIFICATION	2.270455895058393E-7	DESIGN
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999402163607558	WITHOUT_CLASSIFICATION	5.978363924416658E-5	DESIGN
//cachedState,	WITHOUT_CLASSIFICATION	0.9999778689921702	WITHOUT_CLASSIFICATION	2.2131007829750468E-5	DESIGN
//assume true, since we don't really know, and it doesn't matter	WITHOUT_CLASSIFICATION	0.9952920635598528	WITHOUT_CLASSIFICATION	0.004707936440147195	DESIGN
//a "detached" collection!	WITHOUT_CLASSIFICATION	0.9999985912769729	WITHOUT_CLASSIFICATION	1.408723027171035E-6	DESIGN
// if the collection belonged to a different entity, // clean up the existing state of the collection	WITHOUT_CLASSIFICATION	0.9999996453803206	WITHOUT_CLASSIFICATION	3.54619679335877E-7	DESIGN
//log.debug( "calling onLoad()" );	WITHOUT_CLASSIFICATION	0.999997150171247	WITHOUT_CLASSIFICATION	2.8498287529857963E-6	DESIGN
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9990708192733739	WITHOUT_CLASSIFICATION	9.291807266260359E-4	DESIGN
// note: performExecutions() clears all collectionXxxxtion  // collections (the collection actions) in the session	WITHOUT_CLASSIFICATION	0.999985023488549	WITHOUT_CLASSIFICATION	1.497651145110229E-5	DESIGN
// if no array holder we found an unwrappered array (this can't occur, // because we now always call wrap() before getting to here) // return (ah==null) ? true : searchForDirtyCollections(ah, type);	WITHOUT_CLASSIFICATION	0.9996323257480583	WITHOUT_CLASSIFICATION	3.676742519416903E-4	DESIGN
// if not wrappered yet, its dirty (this can't occur, because // we now always call wrap() before getting to here) // return ( ! (obj instanceof PersistentCollection) ) ? //true : searchForDirtyCollections( (PersistentCollection) obj, type );	WITHOUT_CLASSIFICATION	0.9934092458616253	WITHOUT_CLASSIFICATION	0.006590754138374657	DESIGN
//we need to check even if it was not initialized, because of delayed adds!	WITHOUT_CLASSIFICATION	0.9981823260956266	WITHOUT_CLASSIFICATION	0.0018176739043733604	DESIGN
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9607979775356056	WITHOUT_CLASSIFICATION	0.039202022464394345	DESIGN
// find any entities that are still transient after retry	WITHOUT_CLASSIFICATION	0.9999999434605005	WITHOUT_CLASSIFICATION	5.653949940362458E-8	DESIGN
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9990708192733739	WITHOUT_CLASSIFICATION	9.291807266260359E-4	DESIGN
// Check the persistence context for an entry relating to this // entity to be merged...	WITHOUT_CLASSIFICATION	0.999997927681902	WITHOUT_CLASSIFICATION	2.072318098096866E-6	DESIGN
// we have specialized case of a detached entity from the // perspective of the merge operation.  Specifically, we // have an incoming entity instance which has a corresponding // entry in the current persistence context, but registered // under a different entity instance	WITHOUT_CLASSIFICATION	0.9998573094510316	WITHOUT_CLASSIFICATION	1.426905489684186E-4	DESIGN
//DELETED	WITHOUT_CLASSIFICATION	0.9996950120697347	WITHOUT_CLASSIFICATION	3.049879302653313E-4	DESIGN
//before cascade!	WITHOUT_CLASSIFICATION	0.9999035261397611	WITHOUT_CLASSIFICATION	9.647386023891272E-5	DESIGN
// cascade first, so that all unsaved objects get their // copy created before we actually copy //cascadeOnMerge(event, persister, entity, copyCache, Cascades.CASCADE_BEFORE_MERGE);	WITHOUT_CLASSIFICATION	0.9999897998232253	WITHOUT_CLASSIFICATION	1.0200176774644887E-5	DESIGN
//this bit is only *really* absolutely necessary for handling //requestedId, but is also good if we merge multiple object //graphs, since it helps ensure uniqueness	WITHOUT_CLASSIFICATION	0.9999464570430913	WITHOUT_CLASSIFICATION	5.354295690873613E-5	DESIGN
// continue...; we'll find out if it ends up not getting saved later	WITHOUT_CLASSIFICATION	0.9977669777197682	WITHOUT_CLASSIFICATION	0.00223302228023176	DESIGN
// cascade first, so that all unsaved objects get their // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999597762611337	WITHOUT_CLASSIFICATION	4.022373886629557E-5	DESIGN
// check that entity id = requestedId	WITHOUT_CLASSIFICATION	0.9999821886248293	WITHOUT_CLASSIFICATION	1.781137517067431E-5	DESIGN
//before cascade!	WITHOUT_CLASSIFICATION	0.9999035261397611	WITHOUT_CLASSIFICATION	9.647386023891272E-5	DESIGN
// we got here because we assumed that an instance // with an assigned id was detached, when it was // really persistent	WITHOUT_CLASSIFICATION	0.9999732289031433	WITHOUT_CLASSIFICATION	2.6771096856720264E-5	DESIGN
// cascade first, so that all unsaved objects get their  // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9998472037949284	WITHOUT_CLASSIFICATION	1.5279620507149507E-4	DESIGN
//copyValues works by reflection, so explicitly mark the entity instance dirty	WITHOUT_CLASSIFICATION	0.9999465356154742	WITHOUT_CLASSIFICATION	5.3464384525842125E-5	DESIGN
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.999558022231789	WITHOUT_CLASSIFICATION	4.4197776821098894E-4	DESIGN
//source.getBatcher().executeBatch(); //found another way to ensure that all batched joined inserts have been executed	WITHOUT_CLASSIFICATION	0.9999992970156643	WITHOUT_CLASSIFICATION	7.029843357512845E-7	DESIGN
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999921221904411	WITHOUT_CLASSIFICATION	7.877809558932172E-6	DESIGN
//now done in EntityIdentityInsertAction //persister.setIdentifier( entity, id, source.getEntityMode() );	WITHOUT_CLASSIFICATION	0.9999912187128852	WITHOUT_CLASSIFICATION	8.781287114839656E-6	DESIGN
//source.getPersistenceContext().removeNonExist( new EntityKey( id, persister, source.getEntityMode() ) );	WITHOUT_CLASSIFICATION	0.9999469724721083	WITHOUT_CLASSIFICATION	5.302752789166331E-5	DESIGN
//keep the existing version number in the case of replicate!	WITHOUT_CLASSIFICATION	0.9999539241557286	WITHOUT_CLASSIFICATION	4.6075844271367825E-5	DESIGN
// cascade-save to many-to-one BEFORE the parent is saved	WITHOUT_CLASSIFICATION	0.9975973789925765	WITHOUT_CLASSIFICATION	0.0024026210074235056	DESIGN
//pass this as an argument only to avoid double looking	WITHOUT_CLASSIFICATION	0.9402310429432791	WITHOUT_CLASSIFICATION	0.05976895705672102	DESIGN
// the object is persistent	WITHOUT_CLASSIFICATION	0.9999916415955762	WITHOUT_CLASSIFICATION	8.358404423784709E-6	DESIGN
//the entity is associated with the session, so check its status	WITHOUT_CLASSIFICATION	0.9999975138510645	WITHOUT_CLASSIFICATION	2.4861489355408754E-6	DESIGN
// do nothing for persistent instances	WITHOUT_CLASSIFICATION	0.999987000270818	WITHOUT_CLASSIFICATION	1.299972918200276E-5	DESIGN
//ie. e.status==DELETED	WITHOUT_CLASSIFICATION	0.9999672121589565	WITHOUT_CLASSIFICATION	3.278784104356291E-5	DESIGN
// the object is transient or detached	WITHOUT_CLASSIFICATION	0.9999998399977719	WITHOUT_CLASSIFICATION	1.6000222818150236E-7	DESIGN
//NOTE EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9976567025781619	WITHOUT_CLASSIFICATION	0.002343297421838148	DESIGN
// Private constructor - stops checkstyle from complaining.	WITHOUT_CLASSIFICATION	0.9999981818022372	WITHOUT_CLASSIFICATION	1.8181977628667806E-6	DESIGN
// First, try to find a matching constructor accepting a ViolatedConstraintNameExtracter param...	WITHOUT_CLASSIFICATION	0.9999995716987252	WITHOUT_CLASSIFICATION	4.2830127474140726E-7	DESIGN
// eat it and try next	WITHOUT_CLASSIFICATION	0.9999591052465487	WITHOUT_CLASSIFICATION	4.089475345131408E-5	DESIGN
// Otherwise, try to use the no-arg constructor	WITHOUT_CLASSIFICATION	0.9999517296493017	WITHOUT_CLASSIFICATION	4.827035069818469E-5	DESIGN
// oracle sql-state code for deadlock	WITHOUT_CLASSIFICATION	0.9999974484112357	WITHOUT_CLASSIFICATION	2.5515887642080437E-6	DESIGN
// CollectionPropertyMapping processes everything except 'index'.	WITHOUT_CLASSIFICATION	0.9999996637783152	WITHOUT_CLASSIFICATION	3.3622168490636554E-7	DESIGN
// remove initial ", "	WITHOUT_CLASSIFICATION	0.999984483706908	WITHOUT_CLASSIFICATION	1.551629309205402E-5	DESIGN
// remove initial " and "	WITHOUT_CLASSIFICATION	0.9999940985959982	WITHOUT_CLASSIFICATION	5.901404001867834E-6	DESIGN
//beforeClassTokens.add("new"); DEFINITELY DON'T HAVE THIS!!	WITHOUT_CLASSIFICATION	0.987740414811855	WITHOUT_CLASSIFICATION	0.012259585188144873	DESIGN
//notAfterClassTokens.add(",");	WITHOUT_CLASSIFICATION	0.9999714505195476	WITHOUT_CLASSIFICATION	2.854948045245493E-5	DESIGN
// just especially for the trivial collection filter	WITHOUT_CLASSIFICATION	0.9999998324285339	WITHOUT_CLASSIFICATION	1.6757146608049768E-7	DESIGN
//update last non-whitespace token, if necessary	WITHOUT_CLASSIFICATION	0.9999976795151505	WITHOUT_CLASSIFICATION	2.3204848494331604E-6	DESIGN
// select-range is terminated by declaration of "from"	WITHOUT_CLASSIFICATION	0.9999953641243847	WITHOUT_CLASSIFICATION	4.635875615255133E-6	DESIGN
//scan for next non-whitespace token	WITHOUT_CLASSIFICATION	0.9999977808143077	WITHOUT_CLASSIFICATION	2.2191856924525524E-6	DESIGN
// Note this!!	WITHOUT_CLASSIFICATION	0.9989113779384349	WITHOUT_CLASSIFICATION	0.001088622061565181	DESIGN
// Error message constants.	WITHOUT_CLASSIFICATION	0.9999997309231548	WITHOUT_CLASSIFICATION	2.690768453350205E-7	DESIGN
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999648980234165	WITHOUT_CLASSIFICATION	3.510197658360009E-5	DESIGN
// semantic action handling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999973740166421	WITHOUT_CLASSIFICATION	2.6259833577324044E-6	DESIGN
// Handle collection-fiter compilation. // IMPORTANT NOTE: This is modifying the INPUT (HQL) tree, not the output tree!	WITHOUT_CLASSIFICATION	0.9921227646333262	WITHOUT_CLASSIFICATION	0.007877235366673827	DESIGN
// Show the modified AST.	WITHOUT_CLASSIFICATION	0.9999625907930028	WITHOUT_CLASSIFICATION	3.740920699734441E-5	DESIGN
// Create a parameter specification for the collection filter...	WITHOUT_CLASSIFICATION	0.9999992665195758	WITHOUT_CLASSIFICATION	7.334804242697848E-7	DESIGN
// Use the delegate.	WITHOUT_CLASSIFICATION	0.999997825431743	WITHOUT_CLASSIFICATION	2.174568257002666E-6	DESIGN
// Use the delegate.	WITHOUT_CLASSIFICATION	0.999997825431743	WITHOUT_CLASSIFICATION	2.174568257002666E-6	DESIGN
// Get the names of the columns used to link between the collection // owner and the collection elements.	WITHOUT_CLASSIFICATION	0.9999992703801623	WITHOUT_CLASSIFICATION	7.296198377182952E-7	DESIGN
// The path AST should be a DotNode, and it should have been evaluated already.	WITHOUT_CLASSIFICATION	0.9998469890966493	WITHOUT_CLASSIFICATION	1.5301090335071818E-4	DESIGN
// Tell the dot node about the join type.	WITHOUT_CLASSIFICATION	0.9999947302252256	WITHOUT_CLASSIFICATION	5.269774774470137E-6	DESIGN
// Re-arrange the tree so that the collection function is the root and the lhs is the path.	WITHOUT_CLASSIFICATION	0.9999998373732645	WITHOUT_CLASSIFICATION	1.6262673562111368E-7	DESIGN
// Don't forget to resolve the argument! // Resolve the collection function now.	WITHOUT_CLASSIFICATION	0.9999936573361159	WITHOUT_CLASSIFICATION	6.342663884123658E-6	DESIGN
// Resolve everything up to this dot, but don't resolve the placeholders yet.	WITHOUT_CLASSIFICATION	0.9981056302263875	WITHOUT_CLASSIFICATION	0.0018943697736125485	DESIGN
// Should mean that no such property was found	WITHOUT_CLASSIFICATION	0.9998722239618756	WITHOUT_CLASSIFICATION	1.2777603812442377E-4	DESIGN
// Was there an explicit select expression?	WITHOUT_CLASSIFICATION	0.9999999752619573	WITHOUT_CLASSIFICATION	2.4738042806813874E-8	DESIGN
// Attach any mapping-defined "ORDER BY" fragments	WITHOUT_CLASSIFICATION	0.9999999842917457	WITHOUT_CLASSIFICATION	1.57082542964547E-8	DESIGN
// Use the explicitly declared select expression; determine the // return types indicated by each select token	WITHOUT_CLASSIFICATION	0.9999994046974553	WITHOUT_CLASSIFICATION	5.953025447231188E-7	DESIGN
// After that, process the JOINs. // Invoke a delegate to do the work, as this is farily complex.	WITHOUT_CLASSIFICATION	0.99982617057293	WITHOUT_CLASSIFICATION	1.738294270700508E-4	DESIGN
// Make #@%$^#^&# sure no alias is applied to the table name	WITHOUT_CLASSIFICATION	0.9999999384145614	WITHOUT_CLASSIFICATION	6.158543871242792E-8	DESIGN
// We need to generate ids as part of this bulk insert. // // Note that this is only supported for sequence-style generators and // post-insert-style generators; basically, only in-db generators	WITHOUT_CLASSIFICATION	0.9999986360190972	WITHOUT_CLASSIFICATION	1.3639809028115249E-6	DESIGN
// Use the delegate.	WITHOUT_CLASSIFICATION	0.999997825431743	WITHOUT_CLASSIFICATION	2.174568257002666E-6	DESIGN
// We need to seed the version value as part of this bulk insert	WITHOUT_CLASSIFICATION	0.9999983505014144	WITHOUT_CLASSIFICATION	1.6494985855555519E-6	DESIGN
// we need to wrtap the param in a cast()	WITHOUT_CLASSIFICATION	0.9998376810051234	WITHOUT_CLASSIFICATION	1.6231899487654123E-4	DESIGN
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9995459100576276	WITHOUT_CLASSIFICATION	4.540899423724789E-4	DESIGN
// Generate implicit joins, only if necessary.	WITHOUT_CLASSIFICATION	0.9999995740618818	WITHOUT_CLASSIFICATION	4.2593811820409843E-7	DESIGN
// Notify the FROM element that it is being referenced by the select.	WITHOUT_CLASSIFICATION	0.99984000176634	WITHOUT_CLASSIFICATION	1.5999823366006475E-4	DESIGN
// Turn off includeSubclasses on all FromElements.	WITHOUT_CLASSIFICATION	0.9999998503059517	WITHOUT_CLASSIFICATION	1.4969404828808727E-7	DESIGN
// create the node initially with the param name so that it shows // appropriately in the "original text" attribute	WITHOUT_CLASSIFICATION	0.9999745044449267	WITHOUT_CLASSIFICATION	2.5495555073173113E-5	DESIGN
// Use the delegate, resolve identifiers as FROM element aliases.	WITHOUT_CLASSIFICATION	0.9999995330341741	WITHOUT_CLASSIFICATION	4.6696582593550496E-7	DESIGN
// select clauses for insert statements should alwasy be treated as shallow	WITHOUT_CLASSIFICATION	0.9999988322191538	WITHOUT_CLASSIFICATION	1.1677808462112666E-6	DESIGN
// no need to even collect this information if the persister is considered multi-table	WITHOUT_CLASSIFICATION	0.9999076215414184	WITHOUT_CLASSIFICATION	9.23784585816375E-5	DESIGN
// Make sure that the persister is versioned	WITHOUT_CLASSIFICATION	0.9999346864870007	WITHOUT_CLASSIFICATION	6.531351299936596E-5	DESIGN
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999648980234165	WITHOUT_CLASSIFICATION	3.510197658360009E-5	DESIGN
// Use the delegate.	WITHOUT_CLASSIFICATION	0.999997825431743	WITHOUT_CLASSIFICATION	2.174568257002666E-6	DESIGN
// --Commented out by Inspection (12/11/04 10:56 AM): int getWarningCount();	WITHOUT_CLASSIFICATION	0.9999975313839403	WITHOUT_CLASSIFICATION	2.468616059634424E-6	DESIGN
// Alias references and identifiers use the same node class.	WITHOUT_CLASSIFICATION	0.9999989901200366	WITHOUT_CLASSIFICATION	1.009879963399732E-6	DESIGN
// switch	WITHOUT_CLASSIFICATION	0.9999952300268313	WITHOUT_CLASSIFICATION	4.769973168672994E-6	DESIGN
// make a new one	WITHOUT_CLASSIFICATION	0.9999984665551432	WITHOUT_CLASSIFICATION	1.5334448567807824E-6	DESIGN
// just do the regular thing if you can't find the ctor // Your AST must have default ctor to use this.	WITHOUT_CLASSIFICATION	0.9988101682093887	WITHOUT_CLASSIFICATION	0.0011898317906113198	DESIGN
// Initialize SQL nodes here.	WITHOUT_CLASSIFICATION	0.9999924406297277	WITHOUT_CLASSIFICATION	7.559370272362069E-6	DESIGN
// semantic action processing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997696642288	WITHOUT_CLASSIFICATION	2.3033577121638192E-7	DESIGN
// if template is null we just write the function out as it appears in the hql statement	WITHOUT_CLASSIFICATION	0.9999967378857905	WITHOUT_CLASSIFICATION	3.2621142095477604E-6	DESIGN
// this function has a template -> redirect output and catch the arguments	WITHOUT_CLASSIFICATION	0.9999984399774132	WITHOUT_CLASSIFICATION	1.5600225868823522E-6	DESIGN
// --- Inner classes (moved here from sql-gen.g) ---	WITHOUT_CLASSIFICATION	0.9996202264624136	WITHOUT_CLASSIFICATION	3.797735375864597E-4	DESIGN
// check two "adjecent" nodes at the top of the from-clause tree	WITHOUT_CLASSIFICATION	0.9999999252021626	WITHOUT_CLASSIFICATION	7.47978373344718E-8	DESIGN
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.999958497564893	WITHOUT_CLASSIFICATION	4.150243510710515E-5	DESIGN
// these are just two unrelated table references	WITHOUT_CLASSIFICATION	0.9999973375557887	WITHOUT_CLASSIFICATION	2.662444211345955E-6	DESIGN
// again, both should be FromElements	WITHOUT_CLASSIFICATION	0.9999995891774276	WITHOUT_CLASSIFICATION	4.108225724499156E-7	DESIGN
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9813234606789265	WITHOUT_CLASSIFICATION	0.018676539321073476	DESIGN
// right represents a joins originating from left; or // both right and left reprersent joins originating from the same FromElement	WITHOUT_CLASSIFICATION	0.9999638644777926	WITHOUT_CLASSIFICATION	3.6135522207401635E-5	DESIGN
// check a set of parent/child nodes in the from-clause tree // to determine if a comma is required between them	WITHOUT_CLASSIFICATION	0.9999996293582768	WITHOUT_CLASSIFICATION	3.706417231765938E-7	DESIGN
// right represents a joins originating from left...	WITHOUT_CLASSIFICATION	0.9999560277688598	WITHOUT_CLASSIFICATION	4.397223114015431E-5	DESIGN
// all clear	WITHOUT_CLASSIFICATION	0.9999913037451312	WITHOUT_CLASSIFICATION	8.696254868747032E-6	DESIGN
// Ignore the token class name parameter, and use a specific token class.	WITHOUT_CLASSIFICATION	0.9999999715938074	WITHOUT_CLASSIFICATION	2.840619257961453E-8	DESIGN
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999850936399521	WITHOUT_CLASSIFICATION	1.4906360047819686E-5	DESIGN
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999850936399521	WITHOUT_CLASSIFICATION	1.4906360047819686E-5	DESIGN
// remember that ordinal parameters numbers are 1-based!!!	WITHOUT_CLASSIFICATION	0.9999742552183446	WITHOUT_CLASSIFICATION	2.574478165541244E-5	DESIGN
// don't care about other param types here, just those explicitly user-defined...	WITHOUT_CLASSIFICATION	0.9999997440324443	WITHOUT_CLASSIFICATION	2.5596755570186765E-7	DESIGN
// If the query is already compiled, skip the compilation.	WITHOUT_CLASSIFICATION	0.9999998699835662	WITHOUT_CLASSIFICATION	1.3001643384232959E-7	DESIGN
// Remember the parameters for the compilation.	WITHOUT_CLASSIFICATION	0.9999992994134009	WITHOUT_CLASSIFICATION	7.005865989575157E-7	DESIGN
// PHASE 1 : Parse the HQL into an AST.	WITHOUT_CLASSIFICATION	0.9999948807878947	WITHOUT_CLASSIFICATION	5.119212105391073E-6	DESIGN
// PHASE 2 : Analyze the HQL AST, and produce an SQL AST.	WITHOUT_CLASSIFICATION	0.9999591872508582	WITHOUT_CLASSIFICATION	4.0812749141847495E-5	DESIGN
// PHASE 3 : Generate the SQL.	WITHOUT_CLASSIFICATION	0.999871281082368	WITHOUT_CLASSIFICATION	1.287189176319785E-4	DESIGN
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9999811160711234	WITHOUT_CLASSIFICATION	1.8883928876577247E-5	DESIGN
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9999811160711234	WITHOUT_CLASSIFICATION	1.8883928876577247E-5	DESIGN
//only needed during compilation phase...	WITHOUT_CLASSIFICATION	0.9999905357302932	WITHOUT_CLASSIFICATION	9.46426970686747E-6	DESIGN
// Transform the tree.	WITHOUT_CLASSIFICATION	0.9999998392913488	WITHOUT_CLASSIFICATION	1.6070865123976045E-7	DESIGN
// Parse the query string into an HQL AST.	WITHOUT_CLASSIFICATION	0.9999963845286999	WITHOUT_CLASSIFICATION	3.6154713001420424E-6	DESIGN
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999993044850806	WITHOUT_CLASSIFICATION	6.955149195148536E-7	DESIGN
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999993044850806	WITHOUT_CLASSIFICATION	6.955149195148536E-7	DESIGN
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999993044850806	WITHOUT_CLASSIFICATION	6.955149195148536E-7	DESIGN
// NOTE : ( max - 1 ) because first is zero-based while max is not...	WITHOUT_CLASSIFICATION	0.8078509771443986	WITHOUT_CLASSIFICATION	0.1921490228556014	DESIGN
// -- Package local methods for the QueryLoader delegate --	WITHOUT_CLASSIFICATION	0.9999996309333531	WITHOUT_CLASSIFICATION	3.6906664694128544E-7	DESIGN
// If there are no collection fetches, then no further checks are needed	WITHOUT_CLASSIFICATION	0.9999998608555201	WITHOUT_CLASSIFICATION	1.3914447987492334E-7	DESIGN
// A shallow query is ok (although technically there should be no fetching here...)	WITHOUT_CLASSIFICATION	0.9961490280443686	WITHOUT_CLASSIFICATION	0.003850971955631406	DESIGN
// should be the first, but just to be safe...	WITHOUT_CLASSIFICATION	0.9998043066512515	WITHOUT_CLASSIFICATION	1.9569334874838028E-4	DESIGN
// Use the delegate.	WITHOUT_CLASSIFICATION	0.999997825431743	WITHOUT_CLASSIFICATION	2.174568257002666E-6	DESIGN
// Use the delegate.	WITHOUT_CLASSIFICATION	0.999997825431743	WITHOUT_CLASSIFICATION	2.174568257002666E-6	DESIGN
// Impl Note: allows multiple collection fetches as long as the // entire fecthed graph still "points back" to a single // root entity for return	WITHOUT_CLASSIFICATION	0.999999365833589	WITHOUT_CLASSIFICATION	6.341664109936093E-7	DESIGN
// Otherwise, we have a non-scalar select with defined collection fetch(es). // Make sure that there is only a single root entity in the return (no tuples)	WITHOUT_CLASSIFICATION	0.9999991305870751	WITHOUT_CLASSIFICATION	8.694129249634805E-7	DESIGN
// This is not strictly true.  We actually just need to make sure that // it is ordered by root-entity PK and that that order-by comes before // any non-root-entity ordering...	WITHOUT_CLASSIFICATION	0.9817560056056223	WITHOUT_CLASSIFICATION	0.01824399439437779	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999609652327096	WITHOUT_CLASSIFICATION	3.903476729039761E-5	DESIGN
// we are already processing a dot-structure	WITHOUT_CLASSIFICATION	0.9998202110107927	WITHOUT_CLASSIFICATION	1.7978898920736195E-4	DESIGN
// igndore it...	WITHOUT_CLASSIFICATION	0.9999981196925066	WITHOUT_CLASSIFICATION	1.8803074933846055E-6	DESIGN
// we are now at a new tree level	WITHOUT_CLASSIFICATION	0.9999999013464	WITHOUT_CLASSIFICATION	9.865360000414854E-8	DESIGN
// [jsd] The fix for HHH-558...	WITHOUT_CLASSIFICATION	0.9978121592319467	WITHOUT_CLASSIFICATION	0.0021878407680534276	DESIGN
// If the token can tell us if it could be an identifier...	WITHOUT_CLASSIFICATION	0.9999978439648436	WITHOUT_CLASSIFICATION	2.1560351564029224E-6	DESIGN
// ... and the expected token type was an identifier, then:	WITHOUT_CLASSIFICATION	0.9999999931021026	WITHOUT_CLASSIFICATION	6.897897351410418E-9	DESIGN
// Use the token as an identifier.	WITHOUT_CLASSIFICATION	0.9999997263083241	WITHOUT_CLASSIFICATION	2.7369167595933845E-7	DESIGN
// Add the token to the AST.	WITHOUT_CLASSIFICATION	0.9999969751902025	WITHOUT_CLASSIFICATION	3.0248097974453154E-6	DESIGN
// (NOT (EQ a b) ) => (NE a b)	WITHOUT_CLASSIFICATION	0.9999391538784127	WITHOUT_CLASSIFICATION	6.0846121587330854E-5	DESIGN
// (NOT (NE a b) ) => (EQ a b)	WITHOUT_CLASSIFICATION	0.9999391538784127	WITHOUT_CLASSIFICATION	6.0846121587330854E-5	DESIGN
// (NOT (LT a b) ) => (GE a b)	WITHOUT_CLASSIFICATION	0.9999457859389023	WITHOUT_CLASSIFICATION	5.421406109781339E-5	DESIGN
// (NOT (GE a b) ) => (LT a b)	WITHOUT_CLASSIFICATION	0.9999457859389023	WITHOUT_CLASSIFICATION	5.421406109781339E-5	DESIGN
// (NOT (LE a b) ) => (GT a b)	WITHOUT_CLASSIFICATION	0.9999227097949998	WITHOUT_CLASSIFICATION	7.729020500032292E-5	DESIGN
// (NOT (LIKE a b) ) => (NOT_LIKE a b)	WITHOUT_CLASSIFICATION	0.9999755192409436	WITHOUT_CLASSIFICATION	2.4480759056428033E-5	DESIGN
// (NOT (NOT_LIKE a b) ) => (LIKE a b)	WITHOUT_CLASSIFICATION	0.9999755192409436	WITHOUT_CLASSIFICATION	2.4480759056428033E-5	DESIGN
// (NOT (IS_NOT_NULL a b) ) => (IS_NULL a b)	WITHOUT_CLASSIFICATION	0.9999830033759859	WITHOUT_CLASSIFICATION	1.6996624014091957E-5	DESIGN
// (NOT (BETWEEN a b) ) => (NOT_BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999889014513774	WITHOUT_CLASSIFICATION	1.1098548622561783E-5	DESIGN
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999985451670852	WITHOUT_CLASSIFICATION	1.454832914776191E-6	DESIGN
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999850936399521	WITHOUT_CLASSIFICATION	1.4906360047819686E-5	DESIGN
// if // if // Otherwise, handle the error normally.	WITHOUT_CLASSIFICATION	0.9999251564461409	WITHOUT_CLASSIFICATION	7.484355385921769E-5	DESIGN
// (NOT (NOT_BETWEEN a b) ) => (BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999889014513774	WITHOUT_CLASSIFICATION	1.1098548622561783E-5	DESIGN
/* This can never happen because this rule will always eliminate the child NOT.	WITHOUT_CLASSIFICATION	0.9999361213788438	WITHOUT_CLASSIFICATION	6.387862115616737E-5	DESIGN
// Just add a 'not' parent.	WITHOUT_CLASSIFICATION	0.9999756796409535	WITHOUT_CLASSIFICATION	2.4320359046653754E-5	DESIGN
// (EQ NULL b) => (IS_NULL b)	WITHOUT_CLASSIFICATION	0.9999948653646503	WITHOUT_CLASSIFICATION	5.134635349673863E-6	DESIGN
// (EQ a NULL) => (IS_NULL a)	WITHOUT_CLASSIFICATION	0.9999973645667162	WITHOUT_CLASSIFICATION	2.6354332837637814E-6	DESIGN
// NOTE: Because we're using ASTUtil.createParent(), the tree must be created from the bottom up. // IS EMPTY x => (EXISTS (QUERY (SELECT_FROM (FROM x) ) ) )	WITHOUT_CLASSIFICATION	0.9999287483313529	WITHOUT_CLASSIFICATION	7.125166864704839E-5	DESIGN
// Add NOT if it's negated.	WITHOUT_CLASSIFICATION	0.9997345344425508	WITHOUT_CLASSIFICATION	2.654655574492239E-4	DESIGN
// Create nodes that track line and column number.	WITHOUT_CLASSIFICATION	0.9999986381341476	WITHOUT_CLASSIFICATION	1.3618658524066328E-6	DESIGN
// Case 1: Multi token keywords GROUP BY and ORDER BY // The next token ( LT(2) ) should be 'by'... otherwise, this is just an ident.	WITHOUT_CLASSIFICATION	0.9966776832250264	WITHOUT_CLASSIFICATION	0.0033223167749735936	DESIGN
// Case 2: The current token is after FROM and before '.'.	WITHOUT_CLASSIFICATION	0.9999971771639709	WITHOUT_CLASSIFICATION	2.8228360291744583E-6	DESIGN
// This handles HHH-354, where there is a strange property name in a where clause. // If the lookahead contains a DOT then something that isn't an IDENT...	WITHOUT_CLASSIFICATION	0.8087523854657782	WITHOUT_CLASSIFICATION	0.19124761453422182	DESIGN
// See if the second lookahed token can be an identifier.	WITHOUT_CLASSIFICATION	0.9999999903520874	WITHOUT_CLASSIFICATION	9.647912476595135E-9	DESIGN
// Set it!	WITHOUT_CLASSIFICATION	0.9999570589561049	WITHOUT_CLASSIFICATION	4.294104389518189E-5	DESIGN
// ignore	WITHOUT_CLASSIFICATION	0.9999967332423346	WITHOUT_CLASSIFICATION	3.266757665412638E-6	DESIGN
// strip the " where "	WITHOUT_CLASSIFICATION	0.9999988710400866	WITHOUT_CLASSIFICATION	1.1289599134326812E-6	DESIGN
// Don't really know all the codes required to adequately decipher returned jdbc exceptions here. // simply allow the failure to be eaten and the subsequent insert-selects/deletes should fail	WITHOUT_CLASSIFICATION	0.9999999148844222	WITHOUT_CLASSIFICATION	8.51155777375623E-8	DESIGN
// at the very least cleanup the data :)	WITHOUT_CLASSIFICATION	0.998978168702859	WITHOUT_CLASSIFICATION	0.001021831297140968	DESIGN
// First, save off the pertinent ids, as the return value	WITHOUT_CLASSIFICATION	0.9999907339862292	WITHOUT_CLASSIFICATION	9.266013770830407E-6	DESIGN
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999881363372837	WITHOUT_CLASSIFICATION	1.186366271636238E-5	DESIGN
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999881363372837	WITHOUT_CLASSIFICATION	1.186366271636238E-5	DESIGN
// Start performing the updates	WITHOUT_CLASSIFICATION	0.9999988636831815	WITHOUT_CLASSIFICATION	1.1363168185228017E-6	DESIGN
// First, save off the pertinent ids, saving the number of pertinent ids for return	WITHOUT_CLASSIFICATION	0.9997808836509265	WITHOUT_CLASSIFICATION	2.1911634907341137E-4	DESIGN
// Start performing the deletes	WITHOUT_CLASSIFICATION	0.9999997554206695	WITHOUT_CLASSIFICATION	2.4457933044430106E-7	DESIGN
// otherwise, everything ok.	WITHOUT_CLASSIFICATION	0.9998857261888635	WITHOUT_CLASSIFICATION	1.1427381113648758E-4	DESIGN
// visit width-first, then depth	WITHOUT_CLASSIFICATION	0.9999730097489835	WITHOUT_CLASSIFICATION	2.69902510164808E-5	DESIGN
// if the types report logical equivalence, return true...	WITHOUT_CLASSIFICATION	0.9999959626848466	WITHOUT_CLASSIFICATION	4.037315153347785E-6	DESIGN
// otherwise, perform a "deep equivalence" check...	WITHOUT_CLASSIFICATION	0.9999999756059249	WITHOUT_CLASSIFICATION	2.439407515558244E-8	DESIGN
// If there is no WHERE node, make one.	WITHOUT_CLASSIFICATION	0.9999842164223122	WITHOUT_CLASSIFICATION	1.5783577687847507E-5	DESIGN
// inject the WHERE after the parent	WITHOUT_CLASSIFICATION	0.9999407724792538	WITHOUT_CLASSIFICATION	5.922752074618667E-5	DESIGN
// Never include subclasses for implied from elements.	WITHOUT_CLASSIFICATION	0.9999993585196355	WITHOUT_CLASSIFICATION	6.414803645693564E-7	DESIGN
// Moved here from SelectClause [jsd]	WITHOUT_CLASSIFICATION	0.9999671782195279	WITHOUT_CLASSIFICATION	3.282178047214317E-5	DESIGN
///////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.999958497564893	WITHOUT_CLASSIFICATION	4.150243510710515E-5	DESIGN
// Use the table fromElement and the property name to get the array of column names.	WITHOUT_CLASSIFICATION	0.9999934869311936	WITHOUT_CLASSIFICATION	6.51306880636684E-6	DESIGN
// Set the attributes of the property reference expression.	WITHOUT_CLASSIFICATION	0.9999984843832423	WITHOUT_CLASSIFICATION	1.5156167577092072E-6	DESIGN
// If the uresolved property path isn't set yet, just use the property name.	WITHOUT_CLASSIFICATION	0.9997414649388149	WITHOUT_CLASSIFICATION	2.5853506118510587E-4	DESIGN
// The 'from element' that the property is in.	WITHOUT_CLASSIFICATION	0.9995726846131162	WITHOUT_CLASSIFICATION	4.27315386883744E-4	DESIGN
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999997293569174	WITHOUT_CLASSIFICATION	2.7064308261581556E-7	DESIGN
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999997293569174	WITHOUT_CLASSIFICATION	2.7064308261581556E-7	DESIGN
// If this dot has already been resolved, stop now.	WITHOUT_CLASSIFICATION	0.9999179745909567	WITHOUT_CLASSIFICATION	8.202540904338508E-5	DESIGN
// If there is no data type for this node, and we're at the end of the path (top most dot node), then // this might be a Java constant.	WITHOUT_CLASSIFICATION	0.9999857936152456	WITHOUT_CLASSIFICATION	1.4206384754395996E-5	DESIGN
// The property is a collection...	WITHOUT_CLASSIFICATION	0.9980826049625025	WITHOUT_CLASSIFICATION	0.001917395037497599	DESIGN
// The property is a component...	WITHOUT_CLASSIFICATION	0.9880624838686182	WITHOUT_CLASSIFICATION	0.011937516131381718	DESIGN
// The property is another class..	WITHOUT_CLASSIFICATION	0.9626008870288824	WITHOUT_CLASSIFICATION	0.03739911297111774	DESIGN
// Otherwise, this is a primitive type.	WITHOUT_CLASSIFICATION	0.9999482702902235	WITHOUT_CLASSIFICATION	5.1729709776393766E-5	DESIGN
//foo.bars.size (also handles deprecated stuff like foo.bars.maxelement for backwardness)	WITHOUT_CLASSIFICATION	0.9994105031262923	WITHOUT_CLASSIFICATION	5.894968737076219E-4	DESIGN
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999443947834653	WITHOUT_CLASSIFICATION	5.560521653460962E-5	DESIGN
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999992705179122	WITHOUT_CLASSIFICATION	7.294820877473762E-7	DESIGN
// in non-select queries, the only time we should need to join is if we are in a subquery from clause	WITHOUT_CLASSIFICATION	0.9999231990218188	WITHOUT_CLASSIFICATION	7.680097818115215E-5	DESIGN
// this is the regression style determination which matches the logic of the classic translator	WITHOUT_CLASSIFICATION	0.9999988505138447	WITHOUT_CLASSIFICATION	1.1494861552512228E-6	DESIGN
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999443947834653	WITHOUT_CLASSIFICATION	5.560521653460962E-5	DESIGN
// even though we might find a pre-existing element by join path, we may not be able to reuse it...	WITHOUT_CLASSIFICATION	0.986255979950339	WITHOUT_CLASSIFICATION	0.013744020049661007	DESIGN
// NOTE : addDuplicateAlias() already performs nullness checks on the alias.	WITHOUT_CLASSIFICATION	0.9999996913375974	WITHOUT_CLASSIFICATION	3.0866240273060567E-7	DESIGN
// if the from-clauses are the same, we can be a little more aggressive in terms of what we reuse	WITHOUT_CLASSIFICATION	0.9963411669263297	WITHOUT_CLASSIFICATION	0.0036588330736704	DESIGN
// again, null != null here	WITHOUT_CLASSIFICATION	0.9999884157979818	WITHOUT_CLASSIFICATION	1.1584202018325865E-5	DESIGN
// If this is an implied join in a from element, then use the impled join type which is part of the // tree parser's state (set by the gramamar actions).	WITHOUT_CLASSIFICATION	0.9999999988488144	WITHOUT_CLASSIFICATION	1.1511855595412122E-9	DESIGN
// otherwise (subquery case) dont reuse the fromElement if we are processing the from-clause of the subquery	WITHOUT_CLASSIFICATION	0.9999352083478248	WITHOUT_CLASSIFICATION	6.479165217528467E-5	DESIGN
// we know only the lhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999872289484126	WITHOUT_CLASSIFICATION	1.277105158735773E-5	DESIGN
// the referenced node text is the special 'id'	WITHOUT_CLASSIFICATION	0.9999980404406947	WITHOUT_CLASSIFICATION	1.959559305238623E-6	DESIGN
// only the identifier property field name can be a reference to the associated entity's PK...	WITHOUT_CLASSIFICATION	0.9999991563299964	WITHOUT_CLASSIFICATION	8.436700036446887E-7	DESIGN
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9999965298460454	WITHOUT_CLASSIFICATION	3.4701539545647837E-6	DESIGN
// Append the new property name onto the unresolved path.	WITHOUT_CLASSIFICATION	0.999972233047162	WITHOUT_CLASSIFICATION	2.7766952838005252E-5	DESIGN
// If the lhs is a collection, use CollectionPropertyMapping	WITHOUT_CLASSIFICATION	0.9994420047014396	WITHOUT_CLASSIFICATION	5.579952985603293E-4	DESIGN
// Tell the destination fromElement to 'includeSubclasses'.	WITHOUT_CLASSIFICATION	0.999974261495865	WITHOUT_CLASSIFICATION	2.5738504134963098E-5	DESIGN
// Use theta style (for regression) // Move the node up, after the origin node.	WITHOUT_CLASSIFICATION	0.9999979983780881	WITHOUT_CLASSIFICATION	2.001621911946313E-6	DESIGN
// Don't resolve the node again.	WITHOUT_CLASSIFICATION	0.9999993842411679	WITHOUT_CLASSIFICATION	6.15758832086065E-7	DESIGN
// for expected parameter type injection, we expect that the lhs represents // some form of property ref and that the children of the in-list represent // one-or-more params.	WITHOUT_CLASSIFICATION	0.9999999092665741	WITHOUT_CLASSIFICATION	9.073342588329254E-8	DESIGN
// we need to strip off the embedded parens so that sql-gen does not double these up	WITHOUT_CLASSIFICATION	0.9999563818602444	WITHOUT_CLASSIFICATION	4.3618139755699135E-5	DESIGN
// we have something like : "? [op] rhs"	WITHOUT_CLASSIFICATION	0.9642555853548446	WITHOUT_CLASSIFICATION	0.03574441464515545	DESIGN
// we have something like : "lhs [op] ?"	WITHOUT_CLASSIFICATION	0.9781755856179492	WITHOUT_CLASSIFICATION	0.021824414382050777	DESIGN
// we know only the rhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999887271935034	WITHOUT_CLASSIFICATION	1.1272806496553576E-5	DESIGN
// handle the (assumed) valid cases: // #1 - the only valid datetime addition synatx is one or the other is a datetime (but not both)	WITHOUT_CLASSIFICATION	0.9967446037955854	WITHOUT_CLASSIFICATION	0.0032553962044147085	DESIGN
// one or the other needs to be a datetime for us to get into this method in the first place...	WITHOUT_CLASSIFICATION	0.9972044586332263	WITHOUT_CLASSIFICATION	0.002795541366773644	DESIGN
// #3 - note that this is also true of "datetime - :param"...	WITHOUT_CLASSIFICATION	0.9997891025541029	WITHOUT_CLASSIFICATION	2.1089744589715615E-4	DESIGN
// #2	WITHOUT_CLASSIFICATION	0.9999966398877407	WITHOUT_CLASSIFICATION	3.3601122593435323E-6	DESIGN
// Generate the inner join -- The elements need to be joined to the collection they are in.	WITHOUT_CLASSIFICATION	0.9999984605335718	WITHOUT_CLASSIFICATION	1.539466428291822E-6	DESIGN
// nothing to do	WITHOUT_CLASSIFICATION	0.9998987989888541	WITHOUT_CLASSIFICATION	1.0120101114584414E-4	DESIGN
// The 'from element' that represents the elements of the collection.	WITHOUT_CLASSIFICATION	0.9999952996430437	WITHOUT_CLASSIFICATION	4.700356956362398E-6	DESIGN
// Add the condition to the join sequence that qualifies the indexed element.	WITHOUT_CLASSIFICATION	0.9999999648062629	WITHOUT_CLASSIFICATION	3.519373709797961E-8	DESIGN
// Sometimes use the element table alias, sometimes use the... umm... collection table alias (many to many)	WITHOUT_CLASSIFICATION	0.9999998560295005	WITHOUT_CLASSIFICATION	1.4397049949938947E-7	DESIGN
// Now, set the text for this node.  It should be the element columns.	WITHOUT_CLASSIFICATION	0.996951552465549	WITHOUT_CLASSIFICATION	0.0030484475344509944	DESIGN
// Get the function return value type, based on the type of the first argument.	WITHOUT_CLASSIFICATION	0.9999990456737047	WITHOUT_CLASSIFICATION	9.543262953522623E-7	DESIGN
// This will call initialize(tok)!	WITHOUT_CLASSIFICATION	0.9227141902879457	WITHOUT_CLASSIFICATION	0.07728580971205436	DESIGN
// mutation depends on the types of nodes invloved...	WITHOUT_CLASSIFICATION	0.9999947317868586	WITHOUT_CLASSIFICATION	5.268213141466573E-6	DESIGN
// "pass along" our initial embedded parameter node(s) to the first generated // sql fragment so that it can be handled later for parameter binding...	WITHOUT_CLASSIFICATION	0.9991089784162116	WITHOUT_CLASSIFICATION	8.910215837882916E-4	DESIGN
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999998317669283	WITHOUT_CLASSIFICATION	1.6823307161666366E-7	DESIGN
// Generated select expressions are already resolved, nothing to do.	WITHOUT_CLASSIFICATION	0.9999998515078831	WITHOUT_CLASSIFICATION	1.4849211685987E-7	DESIGN
// The path may be a reference to an alias defined in the parent query.	WITHOUT_CLASSIFICATION	0.9707084057009295	WITHOUT_CLASSIFICATION	0.029291594299070505	DESIGN
// The HQL class alias refers to the class name.	WITHOUT_CLASSIFICATION	0.9999843444582948	WITHOUT_CLASSIFICATION	1.565554170527431E-5	DESIGN
// Associate the table alias with the element.	WITHOUT_CLASSIFICATION	0.9999999568390092	WITHOUT_CLASSIFICATION	4.3160990716979E-8	DESIGN
// try the parent FromClause...	WITHOUT_CLASSIFICATION	0.9999905008141396	WITHOUT_CLASSIFICATION	9.499185860395085E-6	DESIGN
// Add the new node to the map so that we don't create it twice.	WITHOUT_CLASSIFICATION	0.9999196042789525	WITHOUT_CLASSIFICATION	8.039572104751653E-5	DESIGN
// Make sure that all from elements registered with this FROM clause are actually in the AST.	WITHOUT_CLASSIFICATION	0.999970996057562	WITHOUT_CLASSIFICATION	2.9003942438029438E-5	DESIGN
// Invoke setScalarColumnText on each constructor argument.	WITHOUT_CLASSIFICATION	0.999994398901728	WITHOUT_CLASSIFICATION	5.601098271966158E-6	DESIGN
// Collect the select expressions, skip the first child because it is the class name.	WITHOUT_CLASSIFICATION	0.9999999967073674	WITHOUT_CLASSIFICATION	3.292632620796487E-9	DESIGN
// return an empty Type array	WITHOUT_CLASSIFICATION	0.9999947437828839	WITHOUT_CLASSIFICATION	5.2562171161795706E-6	DESIGN
// Constructors are always considered scalar results.	WITHOUT_CLASSIFICATION	0.9999995608323394	WITHOUT_CLASSIFICATION	4.391676605745303E-7	DESIGN
// this is the exception returned by ReflectHelper.getConstructor() if it cannot // locate an appropriate constructor	WITHOUT_CLASSIFICATION	0.999687120888949	WITHOUT_CLASSIFICATION	3.128791110510782E-4	DESIGN
// if there is no order by, make one	WITHOUT_CLASSIFICATION	0.9999929643627691	WITHOUT_CLASSIFICATION	7.0356372308509985E-6	DESIGN
// Find the WHERE; if there is no WHERE, find the FROM...	WITHOUT_CLASSIFICATION	0.9999285523351462	WITHOUT_CLASSIFICATION	7.144766485385107E-5	DESIGN
// Now, inject the newly built ORDER BY into the tree	WITHOUT_CLASSIFICATION	0.999983907007527	WITHOUT_CLASSIFICATION	1.6092992472883598E-5	DESIGN
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999986014294664	WITHOUT_CLASSIFICATION	1.3985705335796257E-6	DESIGN
// logic operators by definition resolve to boolean.	WITHOUT_CLASSIFICATION	0.9999996942907864	WITHOUT_CLASSIFICATION	3.05709213540278E-7	DESIGN
// Render the identifier select fragment using the table alias.	WITHOUT_CLASSIFICATION	0.9999997630924388	WITHOUT_CLASSIFICATION	2.369075612072491E-7	DESIGN
// Class names in the FROM clause result in a JoinSequence (the old FromParser does this).	WITHOUT_CLASSIFICATION	0.9999998632331826	WITHOUT_CLASSIFICATION	1.3676681750959249E-7	DESIGN
// For many-to-many joins, use the tablename from the queryable collection for the default text.	WITHOUT_CLASSIFICATION	0.999999838692198	WITHOUT_CLASSIFICATION	1.6130780208282828E-7	DESIGN
// Otherwise, use the property mapping.	WITHOUT_CLASSIFICATION	0.9999609849424971	WITHOUT_CLASSIFICATION	3.9015057502886064E-5	DESIGN
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9999730558800022	WITHOUT_CLASSIFICATION	2.6944119997814658E-5	DESIGN
// If the property is a special collection property name, return a CollectionPropertyMapping.	WITHOUT_CLASSIFICATION	0.9999868900205258	WITHOUT_CLASSIFICATION	1.310997947422258E-5	DESIGN
// Collection of components.	WITHOUT_CLASSIFICATION	0.999995324416973	WITHOUT_CLASSIFICATION	4.675583026976022E-6	DESIGN
// make sure the lhs is "assignable"...	WITHOUT_CLASSIFICATION	0.9999999688240736	WITHOUT_CLASSIFICATION	3.117592639265487E-8	DESIGN
// false indicates to not generate parens around the assignment	WITHOUT_CLASSIFICATION	0.9999693010191272	WITHOUT_CLASSIFICATION	3.069898087276554E-5	DESIGN
// Register the FromElement with the FROM clause, now that we have the names and aliases.	WITHOUT_CLASSIFICATION	0.9999950054634438	WITHOUT_CLASSIFICATION	4.994536556221029E-6	DESIGN
// currently allowed...	WITHOUT_CLASSIFICATION	0.9999912317705119	WITHOUT_CLASSIFICATION	8.76822948818323E-6	DESIGN
// HHH-276 : implied joins in a subselect where clause - The destination needs to be added // to the destination's from clause. // Not sure if this is will fix everything, but it works.	WITHOUT_CLASSIFICATION	0.9999882131380393	DESIGN	1.1786861960672926E-5	WITHOUT_CLASSIFICATION
//return classAlias == null ? className : classAlias;	WITHOUT_CLASSIFICATION	0.9996857654352567	WITHOUT_CLASSIFICATION	3.1423456474336333E-4	DESIGN
// This is an explicit FROM element.	WITHOUT_CLASSIFICATION	0.9998808258746232	WITHOUT_CLASSIFICATION	1.191741253767487E-4	DESIGN
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999986014294664	WITHOUT_CLASSIFICATION	1.3985705335796257E-6	DESIGN
// Fetch can't be used with scroll() or iterate().	WITHOUT_CLASSIFICATION	0.9995673366044097	WITHOUT_CLASSIFICATION	4.3266339559028315E-4	DESIGN
// If it's not implied or it is implied and it's a many to many join where the target wasn't found.	WITHOUT_CLASSIFICATION	0.9999803063840697	WITHOUT_CLASSIFICATION	1.969361593032696E-5	DESIGN
// Since this is an explicit FROM element, it can't be implied in the FROM clause.	WITHOUT_CLASSIFICATION	0.9982703519607481	WITHOUT_CLASSIFICATION	0.0017296480392520088	DESIGN
// Do nothing, eplicit from elements are *always* in the projection list.	WITHOUT_CLASSIFICATION	0.9999880931805492	WITHOUT_CLASSIFICATION	1.1906819450809155E-5	DESIGN
// propertyName refers to something like collection.size...	WITHOUT_CLASSIFICATION	0.999907477938822	WITHOUT_CLASSIFICATION	9.25220611780087E-5	DESIGN
// property name is a sub-path of a component...	WITHOUT_CLASSIFICATION	0.9995202344269579	WITHOUT_CLASSIFICATION	4.7976557304203933E-4	DESIGN
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999992705179122	WITHOUT_CLASSIFICATION	7.294820877473762E-7	DESIGN
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9369869436390387	WITHOUT_CLASSIFICATION	0.06301305636096133	DESIGN
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999998317669283	WITHOUT_CLASSIFICATION	1.6823307161666366E-7	DESIGN
// DotNode uses null here...	WITHOUT_CLASSIFICATION	0.9999746728228843	WITHOUT_CLASSIFICATION	2.5327177115585334E-5	DESIGN
// We represent a from-clause alias	WITHOUT_CLASSIFICATION	0.9999840334600828	WITHOUT_CLASSIFICATION	1.596653991713565E-5	DESIGN
// we are the LHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9997582818814098	WITHOUT_CLASSIFICATION	2.4171811859024676E-4	DESIGN
// we are the RHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9997758127823958	WITHOUT_CLASSIFICATION	2.2418721760415362E-4	DESIGN
// we represent a naked (simple) prop-ref	WITHOUT_CLASSIFICATION	0.9999035476453317	WITHOUT_CLASSIFICATION	9.645235466823759E-5	DESIGN
// EARLY EXIT!!!  return so the resolve call explicitly coming from DotNode can // resolve this...	WITHOUT_CLASSIFICATION	0.608845605526468	WITHOUT_CLASSIFICATION	0.391154394473532	DESIGN
// assume this ident's text does *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999832848187203	WITHOUT_CLASSIFICATION	1.6715181279597346E-5	DESIGN
// just ignore it for now, it'll get resolved later...	WITHOUT_CLASSIFICATION	0.9995859505445805	WITHOUT_CLASSIFICATION	4.140494554194962E-4	DESIGN
// This is not actually a constant, but a reference to FROM element.	WITHOUT_CLASSIFICATION	0.992051321035779	WITHOUT_CLASSIFICATION	0.007948678964220997	DESIGN
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999999911560313	WITHOUT_CLASSIFICATION	8.843968646098803E-9	DESIGN
// these pieces are needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9999728330614938	WITHOUT_CLASSIFICATION	2.7166938506151015E-5	DESIGN
// used to set the type of the parent dot node	WITHOUT_CLASSIFICATION	0.9997088297821916	WITHOUT_CLASSIFICATION	2.911702178084896E-4	DESIGN
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9998513638233812	WITHOUT_CLASSIFICATION	1.486361766186743E-4	DESIGN
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9998513638233812	WITHOUT_CLASSIFICATION	1.486361766186743E-4	DESIGN
// naked property-refs cannot be used with an aliased from element	WITHOUT_CLASSIFICATION	0.999123792412824	WITHOUT_CLASSIFICATION	8.762075871759578E-4	DESIGN
// this piece is needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9999036445953288	WITHOUT_CLASSIFICATION	9.635540467130898E-5	DESIGN
// do *not* over-write the column text, as that has already been // "rendered" during resolve	WITHOUT_CLASSIFICATION	0.999999432373799	WITHOUT_CLASSIFICATION	5.676262010920448E-7	DESIGN
// for some reason the antlr.CommonAST initialization routines force // this method to get called twice.  The first time with an empty string	WITHOUT_CLASSIFICATION	0.9807375663046661	WITHOUT_CLASSIFICATION	0.01926243369533387	DESIGN
// Look up class name using the first identifier in the path.	WITHOUT_CLASSIFICATION	0.9999995703053858	WITHOUT_CLASSIFICATION	4.296946141593843E-7	DESIGN
// Add to the query spaces.	WITHOUT_CLASSIFICATION	0.9999660003978759	WITHOUT_CLASSIFICATION	3.3999602124050995E-5	DESIGN
// If the from element isn't in the same clause, create a new from element.	WITHOUT_CLASSIFICATION	0.999952510715759	WITHOUT_CLASSIFICATION	4.7489284241103716E-5	DESIGN
// This is the root level node. // Generate an explicit from clause at the root.	WITHOUT_CLASSIFICATION	0.9995878749070616	WITHOUT_CLASSIFICATION	4.121250929383553E-4	DESIGN
// Correlated subqueries create 'special' implied from nodes // because correlated subselects can't use an ANSI-style join	WITHOUT_CLASSIFICATION	0.9999967772292182	WITHOUT_CLASSIFICATION	3.2227707817633745E-6	DESIGN
// super-duper-classic-parser-regression-testing-mojo-magic...	WITHOUT_CLASSIFICATION	0.9999996735292365	WITHOUT_CLASSIFICATION	3.264707635827056E-7	DESIGN
// A collection of entities...	WITHOUT_CLASSIFICATION	0.9999853298614605	WITHOUT_CLASSIFICATION	1.4670138539533198E-5	DESIGN
// A collection of components...	WITHOUT_CLASSIFICATION	0.9999986789182231	WITHOUT_CLASSIFICATION	1.3210817769246446E-6	DESIGN
// A collection of scalar elements...	WITHOUT_CLASSIFICATION	0.9999997342373399	WITHOUT_CLASSIFICATION	2.6576266013937105E-7	DESIGN
// according to both the ANSI-SQL and EJB3 specs, trim can either take // exactly one parameter or a variable number of parameters between 1 and 4. // from the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If only <trim specification> is omitted, BOTH is assumed; // if <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999999707535144	WITHOUT_CLASSIFICATION	2.9246485680411113E-8	DESIGN
// Don't include sub-classes for implied collection joins or subquery joins.	WITHOUT_CLASSIFICATION	0.9999998318686089	WITHOUT_CLASSIFICATION	1.681313911212064E-7	DESIGN
// Treat explict from elements in sub-queries properly.	WITHOUT_CLASSIFICATION	0.9999406989741052	WITHOUT_CLASSIFICATION	5.930102589491892E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999609652327096	WITHOUT_CLASSIFICATION	3.903476729039761E-5	DESIGN
// the "root from-element" in correlated subqueries do need this piece	WITHOUT_CLASSIFICATION	0.9999891468353711	WITHOUT_CLASSIFICATION	1.0853164628970672E-5	DESIGN
// Create the FROM element for the target (the elements of the collection).	WITHOUT_CLASSIFICATION	0.9999999672632891	WITHOUT_CLASSIFICATION	3.2736710952914E-8	DESIGN
// If the join is implied, then don't include sub-classes on the element.	WITHOUT_CLASSIFICATION	0.9999999773001447	WITHOUT_CLASSIFICATION	2.2699855320947446E-8	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999983831540221	WITHOUT_CLASSIFICATION	1.6168459779731629E-6	DESIGN
// The associated entity is implied, but it must be included in the FROM. // The collection alias is the role.	WITHOUT_CLASSIFICATION	0.9999841135910046	WITHOUT_CLASSIFICATION	1.5886408995338854E-5	DESIGN
// Tag this node as a JOIN. // Don't include subclasses in the join. // This is a clollection join.	WITHOUT_CLASSIFICATION	0.99973311816568	WITHOUT_CLASSIFICATION	2.668818343200102E-4	DESIGN
// Get the class name of the associated entity.	WITHOUT_CLASSIFICATION	0.9999975538179636	WITHOUT_CLASSIFICATION	2.4461820363127165E-6	DESIGN
//  origin, path, implied, columns, classAlias,	WITHOUT_CLASSIFICATION	0.9999845636595701	WITHOUT_CLASSIFICATION	1.543634042997852E-5	DESIGN
/*implied*/	WITHOUT_CLASSIFICATION	0.9997085389027299	WITHOUT_CLASSIFICATION	2.9146109727010773E-4	DESIGN
// For implied many-to-many, just add the end join.	WITHOUT_CLASSIFICATION	0.9999971324507937	WITHOUT_CLASSIFICATION	2.867549206262902E-6	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999983831540221	WITHOUT_CLASSIFICATION	1.6168459779731629E-6	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999983831540221	WITHOUT_CLASSIFICATION	1.6168459779731629E-6	DESIGN
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999997099326555	WITHOUT_CLASSIFICATION	2.9006734440649143E-7	DESIGN
// This causes the factory to instantiate the desired class.	WITHOUT_CLASSIFICATION	0.9999614538095857	WITHOUT_CLASSIFICATION	3.854619041426959E-5	DESIGN
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9999809894658181	WITHOUT_CLASSIFICATION	1.9010534181802558E-5	DESIGN
// Frontbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999383243255234	WITHOUT_CLASSIFICATION	6.167567447649003E-5	DESIGN
/*	WITHOUT_CLASSIFICATION	0.9996992507513384	WITHOUT_CLASSIFICATION	3.007492486616181E-4	DESIGN
/*public Type[] getSqlResultTypes() {	WITHOUT_CLASSIFICATION	0.9936897942065868	WITHOUT_CLASSIFICATION	0.006310205793413318	DESIGN
// First, collect all of the select expressions. // NOTE: This must be done *before* invoking setScalarColumnText() because setScalarColumnText() // changes the AST!!!	WITHOUT_CLASSIFICATION	0.9999410762757095	WITHOUT_CLASSIFICATION	5.892372429062672E-5	DESIGN
// First allow the actual type to control the return value. (the actual underlying sqltype could actually be different)	WITHOUT_CLASSIFICATION	0.9999925031914368	WITHOUT_CLASSIFICATION	7.496808563154593E-6	DESIGN
//sqlResultTypeList.addAll( constructorArgumentTypeList );	WITHOUT_CLASSIFICATION	0.9986696131373057	WITHOUT_CLASSIFICATION	0.0013303868626943144	DESIGN
// If the data type is not an association type, it could not have been in the FROM clause.	WITHOUT_CLASSIFICATION	0.999908679800762	WITHOUT_CLASSIFICATION	9.13201992380064E-5	DESIGN
//sqlResultTypeList.add( type );	WITHOUT_CLASSIFICATION	0.9998117800641578	WITHOUT_CLASSIFICATION	1.8821993584209625E-4	DESIGN
// Always add the type to the return type list.	WITHOUT_CLASSIFICATION	0.9999994064086014	WITHOUT_CLASSIFICATION	5.935913985613782E-7	DESIGN
// add the fetched entities	WITHOUT_CLASSIFICATION	0.9999982545938004	WITHOUT_CLASSIFICATION	1.7454061996518774E-6	DESIGN
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999589509709346	WITHOUT_CLASSIFICATION	4.104902906533081E-5	DESIGN
// function support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999849216390579	WITHOUT_CLASSIFICATION	1.5078360942169364E-5	DESIGN
// If there are any scalars (non-entities) selected, render the select column aliases.	WITHOUT_CLASSIFICATION	0.9999999725009389	WITHOUT_CLASSIFICATION	2.7499061220411773E-8	DESIGN
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9996023528626514	WITHOUT_CLASSIFICATION	3.976471373485271E-4	DESIGN
/*ArrayList sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9999828824151258	WITHOUT_CLASSIFICATION	1.711758487420128E-5	DESIGN
//sqlResultTypes = ( Type[] ) sqlResultTypeList.toArray( new Type[sqlResultTypeList.size()] );	WITHOUT_CLASSIFICATION	0.9999680905286098	WITHOUT_CLASSIFICATION	3.190947139012915E-5	DESIGN
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999967877267173	WITHOUT_CLASSIFICATION	3.2122732827125665E-6	DESIGN
//TODO:	WITHOUT_CLASSIFICATION	0.9460312472640424	DESIGN	0.05396875273595748	WITHOUT_CLASSIFICATION
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999965747574135	WITHOUT_CLASSIFICATION	3.425242586329779E-6	DESIGN
// Generate an 2d array of column names, the first dimension is parallel with the // return types array.  The second dimension is the list of column names for each // type.	WITHOUT_CLASSIFICATION	0.9999999937755052	WITHOUT_CLASSIFICATION	6.2244947628069675E-9	DESIGN
// Generate the select expression.	WITHOUT_CLASSIFICATION	0.999999993626002	WITHOUT_CLASSIFICATION	6.373998064826654E-9	DESIGN
// union subclass support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999905352384949	WITHOUT_CLASSIFICATION	9.46476150509842E-5	DESIGN
// Skip 'DISTINCT' and 'ALL', so we return the first expression node.	WITHOUT_CLASSIFICATION	0.9999992621928513	WITHOUT_CLASSIFICATION	7.378071487256614E-7	DESIGN
// Create SQL_TOKEN nodes for the columns.	WITHOUT_CLASSIFICATION	0.9999992943014507	WITHOUT_CLASSIFICATION	7.056985491960814E-7	DESIGN
// Generate the property select tokens.	WITHOUT_CLASSIFICATION	0.9999967910627451	WITHOUT_CLASSIFICATION	3.2089372549073634E-6	DESIGN
// Get the function name node.	WITHOUT_CLASSIFICATION	0.9999803615742151	WITHOUT_CLASSIFICATION	1.9638425784884256E-5	DESIGN
// Method expressions in a SELECT should always be considered scalar.	WITHOUT_CLASSIFICATION	0.9999992991549761	WITHOUT_CLASSIFICATION	7.008450238907524E-7	DESIGN
// If this is 'elements' then create a new FROM element.	WITHOUT_CLASSIFICATION	0.9999908948441857	WITHOUT_CLASSIFICATION	9.105155814405432E-6	DESIGN
// Not elements(x)	WITHOUT_CLASSIFICATION	0.9999991606722163	WITHOUT_CLASSIFICATION	8.393277837798874E-7	DESIGN
// Dialect function	WITHOUT_CLASSIFICATION	0.9999989960176098	WITHOUT_CLASSIFICATION	1.0039823901858332E-6	DESIGN
// Collection 'property function'	WITHOUT_CLASSIFICATION	0.9999891336415221	WITHOUT_CLASSIFICATION	1.08663584778931E-5	DESIGN
// If the constant is an IDENT, figure out what it means...	WITHOUT_CLASSIFICATION	0.9999382913548178	WITHOUT_CLASSIFICATION	6.170864518220496E-5	DESIGN
// IDENT is a class alias in the FROM.	WITHOUT_CLASSIFICATION	0.99992602394134	WITHOUT_CLASSIFICATION	7.397605865998109E-5	DESIGN
// Resolve to an identity column.	WITHOUT_CLASSIFICATION	0.9999673764421397	WITHOUT_CLASSIFICATION	3.262355786026725E-5	DESIGN
// Otherwise, it's a literal.	WITHOUT_CLASSIFICATION	0.9999695664164829	WITHOUT_CLASSIFICATION	3.0433583516986898E-5	DESIGN
// the name of an entity class	WITHOUT_CLASSIFICATION	0.9999992729536608	WITHOUT_CLASSIFICATION	7.270463392922555E-7	DESIGN
//the class discriminator value	WITHOUT_CLASSIFICATION	0.9999572984027059	WITHOUT_CLASSIFICATION	4.270159729416694E-5	DESIGN
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999998822371728	WITHOUT_CLASSIFICATION	1.177628271854512E-7	DESIGN
// Add a space before the display text.	WITHOUT_CLASSIFICATION	0.9999987177867141	WITHOUT_CLASSIFICATION	1.2822132858646476E-6	DESIGN
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9997844652133122	WITHOUT_CLASSIFICATION	2.155347866878604E-4	DESIGN
// child == parent.getFirstChild()	WITHOUT_CLASSIFICATION	0.9999991962140274	WITHOUT_CLASSIFICATION	8.037859725911852E-7	DESIGN
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9997844652133122	WITHOUT_CLASSIFICATION	2.155347866878604E-4	DESIGN
// Filter conditions need to be inserted before the HQL where condition and the // theta join node.  This is because org.hibernate.loader.Loader binds the filter parameters first, // then it binds all the HQL query parameters, see org.hibernate.loader.Loader.processFilterParameters().	WITHOUT_CLASSIFICATION	0.9953470727897822	WITHOUT_CLASSIFICATION	0.004652927210217824	DESIGN
// Put the FILTERS node before the HQL condition and theta joins	WITHOUT_CLASSIFICATION	0.9999993659759479	WITHOUT_CLASSIFICATION	6.340240521699565E-7	DESIGN
// add the current fragment to the FILTERS node	WITHOUT_CLASSIFICATION	0.9999977068400384	WITHOUT_CLASSIFICATION	2.2931599615727656E-6	DESIGN
// Create a new THETA_JOINS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999968575040404	WITHOUT_CLASSIFICATION	3.1424959595183247E-6	DESIGN
// Put the THETA_JOINS node before the HQL condition, after the filters.	WITHOUT_CLASSIFICATION	0.9999971516641337	WITHOUT_CLASSIFICATION	2.8483358663005495E-6	DESIGN
// add the current fragment to the THETA_JOINS node	WITHOUT_CLASSIFICATION	0.9999987185878119	WITHOUT_CLASSIFICATION	1.2814121881310384E-6	DESIGN
// First, try to get the persister using the given name directly.	WITHOUT_CLASSIFICATION	0.9999777507497265	WITHOUT_CLASSIFICATION	2.224925027352881E-5	DESIGN
// unable to locate it using this name	WITHOUT_CLASSIFICATION	0.9995519110965408	WITHOUT_CLASSIFICATION	4.480889034591154E-4	DESIGN
// If that didn't work, try using the 'import' name.	WITHOUT_CLASSIFICATION	0.9999860722388678	WITHOUT_CLASSIFICATION	1.3927761132226026E-5	DESIGN
// Implicit joins use theta style (WHERE pk = fk), explicit joins use JOIN (after from)	WITHOUT_CLASSIFICATION	0.9999974964245758	WITHOUT_CLASSIFICATION	2.503575424281095E-6	DESIGN
// locate the registered function by the given name	WITHOUT_CLASSIFICATION	0.9999990867371231	WITHOUT_CLASSIFICATION	9.132628767798193E-7	DESIGN
// determine the type of the first argument...	WITHOUT_CLASSIFICATION	0.9999767940928593	WITHOUT_CLASSIFICATION	2.3205907140663634E-5	DESIGN
// Use the DOT node to emit the first column name. // Create the column names, folled by the column aliases.	WITHOUT_CLASSIFICATION	0.9999974895189951	WITHOUT_CLASSIFICATION	2.5104810048558235E-6	DESIGN
// Note: this simply constructs a "raw" SQL_TOKEN representing the // where fragment and injects this into the tree.  This "works"; // however it is probably not the best long-term solution. // // At some point we probably want to apply an additional grammar to // properly tokenize this where fragment into constituent parts // focused on the operators embedded within the fragment.	WITHOUT_CLASSIFICATION	0.9995949089509537	WITHOUT_CLASSIFICATION	4.050910490462115E-4	DESIGN
// Append the text of the current node.	WITHOUT_CLASSIFICATION	0.999999919423627	WITHOUT_CLASSIFICATION	8.057637296587772E-8	DESIGN
// If the node has a first child, recurse into the first child.	WITHOUT_CLASSIFICATION	0.9999999511221933	WITHOUT_CLASSIFICATION	4.887780668784883E-8	DESIGN
// If there is a second child (RHS), recurse into that child.	WITHOUT_CLASSIFICATION	0.9999968998560961	WITHOUT_CLASSIFICATION	3.100143903908426E-6	DESIGN
// Iterate through the alias,JoinSequence pairs and generate SQL token nodes.	WITHOUT_CLASSIFICATION	0.9999999769242133	WITHOUT_CLASSIFICATION	2.307578672477843E-8	DESIGN
// If the from element represents a JOIN_FRAGMENT and it is // a theta-style join, convert its type from JOIN_FRAGMENT // to FROM_FRAGMENT	WITHOUT_CLASSIFICATION	0.9999500688272117	WITHOUT_CLASSIFICATION	4.9931172788288316E-5	DESIGN
// this is used during SqlGenerator processing	WITHOUT_CLASSIFICATION	0.9981748170677197	WITHOUT_CLASSIFICATION	0.0018251829322803298	DESIGN
// If there is a FROM fragment and the FROM element is an explicit, then add the from part.	WITHOUT_CLASSIFICATION	0.9999998339762056	WITHOUT_CLASSIFICATION	1.6602379440734998E-7	DESIGN
/*&& StringHelper.isNotEmpty( frag )*/	WITHOUT_CLASSIFICATION	0.999978286259835	WITHOUT_CLASSIFICATION	2.17137401650141E-5	DESIGN
// The FROM fragment will probably begin with ', '.  Remove this if it is present.	WITHOUT_CLASSIFICATION	0.8862265791847244	WITHOUT_CLASSIFICATION	0.11377342081527562	DESIGN
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9990538538249362	WITHOUT_CLASSIFICATION	9.461461750638058E-4	DESIGN
// SELECT p FROM p IN CLASS eg.Person ORDER BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999896819850993	WITHOUT_CLASSIFICATION	1.0318014900647482E-5	DESIGN
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.9991076108802958	WITHOUT_CLASSIFICATION	8.923891197043228E-4	DESIGN
//named query parameter	WITHOUT_CLASSIFICATION	0.9999638428278288	WITHOUT_CLASSIFICATION	3.615717217121682E-5	DESIGN
//default mode	WITHOUT_CLASSIFICATION	0.9999953535030682	WITHOUT_CLASSIFICATION	4.646496931707367E-6	DESIGN
//QueryJoinFragment join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999972618063558	WITHOUT_CLASSIFICATION	2.7381936440524133E-6	DESIGN
//reset the dotcount (but not the path) //after reset!	WITHOUT_CLASSIFICATION	0.9998732095249281	WITHOUT_CLASSIFICATION	1.2679047507186398E-4	DESIGN
//after reset!	WITHOUT_CLASSIFICATION	0.9999941722258929	WITHOUT_CLASSIFICATION	5.827774107066221E-6	DESIGN
// we don't need to worry about any condition in the ON clause // here (toFromFragmentString), since anything in the ON condition // is already applied to the whole query	WITHOUT_CLASSIFICATION	0.9997104956861235	WITHOUT_CLASSIFICATION	2.8950431387659946E-4	DESIGN
// bit_length feels a bit broken to me. We have to cast to char in order to // pass when a numeric value is supplied. But of course the answers given will // be wildly different for these two datatypes. 1234.5678 will be 9 bytes as // a char string but will be 8 or 16 bytes as a true numeric. // Jay Nance 2006-09-22	WITHOUT_CLASSIFICATION	0.9999999950532296	WITHOUT_CLASSIFICATION	4.946770418030463E-9	DESIGN
// dotcount>=2	WITHOUT_CLASSIFICATION	0.9999930941164232	WITHOUT_CLASSIFICATION	6.90588357680666E-6	DESIGN
// Do the corresponding RHS	WITHOUT_CLASSIFICATION	0.9999254311308463	WITHOUT_CLASSIFICATION	7.456886915366029E-5	DESIGN
//if its "id"	WITHOUT_CLASSIFICATION	0.9999890821859371	WITHOUT_CLASSIFICATION	1.0917814063005625E-5	DESIGN
//or its the id property name	WITHOUT_CLASSIFICATION	0.9907640022686683	WITHOUT_CLASSIFICATION	0.009235997731331743	DESIGN
//join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999985584552652	WITHOUT_CLASSIFICATION	1.4415447347257835E-6	DESIGN
//important!!	WITHOUT_CLASSIFICATION	0.9998386761048849	WITHOUT_CLASSIFICATION	1.613238951150881E-4	DESIGN
//String[] keyCols = collPersister.getKeyColumnNames();	WITHOUT_CLASSIFICATION	0.9999993854006028	WITHOUT_CLASSIFICATION	6.145993971807595E-7	DESIGN
// an association	WITHOUT_CLASSIFICATION	0.9999988272032646	WITHOUT_CLASSIFICATION	1.1727967354229413E-6	DESIGN
//allow index() function:	WITHOUT_CLASSIFICATION	0.9999903856880219	WITHOUT_CLASSIFICATION	9.614311978197111E-6	DESIGN
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9995445344955503	WITHOUT_CLASSIFICATION	4.554655044497342E-4	DESIGN
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.9991076108802958	WITHOUT_CLASSIFICATION	8.923891197043228E-4	DESIGN
//many-to-many	WITHOUT_CLASSIFICATION	0.9999647622444944	WITHOUT_CLASSIFICATION	3.523775550552726E-5	DESIGN
// collections of values	WITHOUT_CLASSIFICATION	0.9999997734999111	WITHOUT_CLASSIFICATION	2.2650008892949917E-7	DESIGN
//opening paren in new Foo ( ... )	WITHOUT_CLASSIFICATION	0.9993905250945723	WITHOUT_CLASSIFICATION	6.094749054278201E-4	DESIGN
//if we are inside a new Result(), but not inside a nested function	WITHOUT_CLASSIFICATION	0.9999621354006126	WITHOUT_CLASSIFICATION	3.7864599387364695E-5	DESIGN
//special case	WITHOUT_CLASSIFICATION	0.999939131644581	WITHOUT_CLASSIFICATION	6.086835541894225E-5	DESIGN
// the name of an SQL function	WITHOUT_CLASSIFICATION	0.9999998308263286	WITHOUT_CLASSIFICATION	1.6917367138386435E-7	DESIGN
//null child could occur for no from clause in a filter	WITHOUT_CLASSIFICATION	0.9999458221033947	WITHOUT_CLASSIFICATION	5.4177896605389996E-5	DESIGN
//this is basically a copy/paste of OrderByParser ... might be worth refactoring	WITHOUT_CLASSIFICATION	0.9441473601529365	WITHOUT_CLASSIFICATION	0.055852639847063464	DESIGN
// SELECT p FROM p IN CLASS eg.Person GROUP BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999891853478312	WITHOUT_CLASSIFICATION	1.0814652168792808E-5	DESIGN
// return aliases not supported in classic translator!	WITHOUT_CLASSIFICATION	0.9999894157903517	WITHOUT_CLASSIFICATION	1.0584209648301204E-5	DESIGN
//register collection role	WITHOUT_CLASSIFICATION	0.9999632268671815	WITHOUT_CLASSIFICATION	3.6773132818447757E-5	DESIGN
// The keyword used to specify an identity column, if identity column key generation is supported.	WITHOUT_CLASSIFICATION	0.9999951610954251	WITHOUT_CLASSIFICATION	4.838904574916535E-6	DESIGN
//.getElementPropertyMapping();	WITHOUT_CLASSIFICATION	0.9999557202176091	WITHOUT_CLASSIFICATION	4.4279782390906044E-5	DESIGN
//crossJoins.add(name);	WITHOUT_CLASSIFICATION	0.9998587644998171	WITHOUT_CLASSIFICATION	1.4123550018283913E-4	DESIGN
//ie no select clause in HQL	WITHOUT_CLASSIFICATION	0.9999632215390515	WITHOUT_CLASSIFICATION	3.677846094861156E-5	DESIGN
// initialize the Set of queried identifier spaces (ie. tables)	WITHOUT_CLASSIFICATION	0.9999998813004399	WITHOUT_CLASSIFICATION	1.1869956008644684E-7	DESIGN
//ie. no select clause	WITHOUT_CLASSIFICATION	0.9999898620197604	WITHOUT_CLASSIFICATION	1.0137980239624683E-5	DESIGN
//there _was_ a select clause	WITHOUT_CLASSIFICATION	0.9999762709175355	WITHOUT_CLASSIFICATION	2.372908246453464E-5	DESIGN
// return the concrete type, or the underlying type if a concrete type // was not specified	WITHOUT_CLASSIFICATION	0.9999994536657026	WITHOUT_CLASSIFICATION	5.463342974857711E-7	DESIGN
//many-to-many	WITHOUT_CLASSIFICATION	0.9999647622444944	WITHOUT_CLASSIFICATION	3.523775550552726E-5	DESIGN
//q.addCollection(collectionName, collectionRole);	WITHOUT_CLASSIFICATION	0.9999981026651308	WITHOUT_CLASSIFICATION	1.8973348692761077E-6	DESIGN
// classic parser does not support bulk manipulation statements	WITHOUT_CLASSIFICATION	0.9999998921523761	WITHOUT_CLASSIFICATION	1.0784762390818568E-7	DESIGN
// can't cache this stuff either (per-invocation)	WITHOUT_CLASSIFICATION	0.9997907693732435	WITHOUT_CLASSIFICATION	2.092306267564889E-4	DESIGN
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9581789534674808	WITHOUT_CLASSIFICATION	0.04182104653251925	DESIGN
// This is the legacy behaviour for HQL queries...	WITHOUT_CLASSIFICATION	0.9999373615438747	WITHOUT_CLASSIFICATION	6.263845612524431E-5	DESIGN
// not known!	WITHOUT_CLASSIFICATION	0.999523825630741	WITHOUT_CLASSIFICATION	4.761743692589919E-4	DESIGN
// not known!	WITHOUT_CLASSIFICATION	0.999523825630741	WITHOUT_CLASSIFICATION	4.761743692589919E-4	DESIGN
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9817014079956722	WITHOUT_CLASSIFICATION	0.018298592004327895	DESIGN
// not known!	WITHOUT_CLASSIFICATION	0.999523825630741	WITHOUT_CLASSIFICATION	4.761743692589919E-4	DESIGN
// not known!	WITHOUT_CLASSIFICATION	0.999523825630741	WITHOUT_CLASSIFICATION	4.761743692589919E-4	DESIGN
//Need this, since join condition can appear inside parens!	WITHOUT_CLASSIFICATION	0.999082675949697	WITHOUT_CLASSIFICATION	9.173240503030275E-4	DESIGN
//tokens that close a sub expression //tokens that open a sub expression //tokens that would indicate a sub expression is a boolean expression	WITHOUT_CLASSIFICATION	0.9999988300620553	WITHOUT_CLASSIFICATION	1.1699379447194478E-6	DESIGN
//expressionTerminators.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.9999903325843564	WITHOUT_CLASSIFICATION	9.667415643568621E-6	DESIGN
//expressionOpeners.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.999989417905463	WITHOUT_CLASSIFICATION	1.0582094537020083E-5	DESIGN
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource) // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.6031558633987366	DESIGN	0.39684413660126344	WITHOUT_CLASSIFICATION
// otherwise, a trim-specification and/or a trim-character // have been specified;  we need to decide which options // are present and "do the right thing" // should leading trim-characters be trimmed? // should trailing trim-characters be trimmed? // the trim-character (what is to be trimmed off?) // the trim-source (from where should it be trimmed?)	WITHOUT_CLASSIFICATION	0.9990754090035001	WITHOUT_CLASSIFICATION	9.245909964997799E-4	DESIGN
//Inside a BETWEEN ... AND ... expression	WITHOUT_CLASSIFICATION	0.9999994198296187	WITHOUT_CLASSIFICATION	5.801703812521337E-7	DESIGN
//were an odd or even number of NOTs encountered //the join string built up by compound paths inside this expression //a flag indicating if the subexpression is known to be boolean	WITHOUT_CLASSIFICATION	0.9999651314335509	WITHOUT_CLASSIFICATION	3.486856644896798E-5	DESIGN
//ie. a many-to-many	WITHOUT_CLASSIFICATION	0.9999801920778305	WITHOUT_CLASSIFICATION	1.980792216944179E-5	DESIGN
//Cope with [,]	WITHOUT_CLASSIFICATION	0.9998921927584958	WITHOUT_CLASSIFICATION	1.078072415040603E-4	DESIGN
//Cope with a continued path expression (ie. ].baz)	WITHOUT_CLASSIFICATION	0.9999517332492772	WITHOUT_CLASSIFICATION	4.826675072272988E-5	DESIGN
//NOTE: early return	WITHOUT_CLASSIFICATION	0.9947250201597728	WITHOUT_CLASSIFICATION	0.0052749798402271664	DESIGN
//Cope with a subselect	WITHOUT_CLASSIFICATION	0.9999081590860154	WITHOUT_CLASSIFICATION	9.184091398460305E-5	DESIGN
//Cope with special cases of AND, NOT, ()	WITHOUT_CLASSIFICATION	0.999921659869873	WITHOUT_CLASSIFICATION	7.834013012696335E-5	DESIGN
//Close extra brackets we opened	WITHOUT_CLASSIFICATION	0.9998728162401368	WITHOUT_CLASSIFICATION	1.271837598632672E-4	DESIGN
//take note when this is a boolean expression	WITHOUT_CLASSIFICATION	0.9999972495156422	WITHOUT_CLASSIFICATION	2.750484357848223E-6	DESIGN
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999998924515836	WITHOUT_CLASSIFICATION	1.0754841650083431E-7	DESIGN
//process a token, mapping OO path expressions to SQL expressions	WITHOUT_CLASSIFICATION	0.9999999808010271	WITHOUT_CLASSIFICATION	1.919897286974111E-8	DESIGN
//Open any extra brackets we might need.	WITHOUT_CLASSIFICATION	0.9991144948932129	WITHOUT_CLASSIFICATION	8.855051067870499E-4	DESIGN
//Cope with special cases of AND, NOT, )	WITHOUT_CLASSIFICATION	0.999889499492517	WITHOUT_CLASSIFICATION	1.1050050748294659E-4	DESIGN
// the next one up must also be	WITHOUT_CLASSIFICATION	0.9999919018027141	WITHOUT_CLASSIFICATION	8.098197285904823E-6	DESIGN
// Add any joins	WITHOUT_CLASSIFICATION	0.9999980398350421	WITHOUT_CLASSIFICATION	1.96016495789659E-6	DESIGN
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999998924515836	WITHOUT_CLASSIFICATION	1.0754841650083431E-7	DESIGN
//named query parameter	WITHOUT_CLASSIFICATION	0.9999638428278288	WITHOUT_CLASSIFICATION	3.615717217121682E-5	DESIGN
//path expression	WITHOUT_CLASSIFICATION	0.999999164593853	WITHOUT_CLASSIFICATION	8.354061469426328E-7	DESIGN
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999912418036153	WITHOUT_CLASSIFICATION	8.758196384742042E-6	DESIGN
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.999983901921387	WITHOUT_CLASSIFICATION	1.6098078613005717E-5	DESIGN
//anything else	WITHOUT_CLASSIFICATION	0.9999942855445679	WITHOUT_CLASSIFICATION	5.714455432033643E-6	DESIGN
// the path expression continues after a ]	WITHOUT_CLASSIFICATION	0.9999997314298987	WITHOUT_CLASSIFICATION	2.6857010119152116E-7	DESIGN
// careful with this!	WITHOUT_CLASSIFICATION	0.999211986412403	WITHOUT_CLASSIFICATION	7.880135875968257E-4	DESIGN
// the path expression ends at the ]	WITHOUT_CLASSIFICATION	0.999999289563629	WITHOUT_CLASSIFICATION	7.104363710212699E-7	DESIGN
// "finish off" the join	WITHOUT_CLASSIFICATION	0.9999981230457596	WITHOUT_CLASSIFICATION	1.8769542403140673E-6	DESIGN
//NOTICE: no " or . since they are part of (compound) identifiers	WITHOUT_CLASSIFICATION	0.9999875469915283	WITHOUT_CLASSIFICATION	1.2453008471751662E-5	DESIGN
//cannot instantiate	WITHOUT_CLASSIFICATION	0.9997910093517541	WITHOUT_CLASSIFICATION	2.089906482459624E-4	DESIGN
// start by looking for HQL keywords...	WITHOUT_CLASSIFICATION	0.9999642460786857	WITHOUT_CLASSIFICATION	3.575392131428768E-5	DESIGN
// inner joins can be abbreviated to 'join'	WITHOUT_CLASSIFICATION	0.9999995021431132	WITHOUT_CLASSIFICATION	4.978568868526024E-7	DESIGN
// 'outer' is optional and is ignored	WITHOUT_CLASSIFICATION	0.9999998234169171	WITHOUT_CLASSIFICATION	1.7658308303985957E-7	DESIGN
// now anything that is not a HQL keyword	WITHOUT_CLASSIFICATION	0.9997862759962068	WITHOUT_CLASSIFICATION	2.137240037930783E-4	DESIGN
// process the "old" HQL style where aliases appear _first_ // ie. using the IN or IN CLASS constructions	WITHOUT_CLASSIFICATION	0.9999999819283402	WITHOUT_CLASSIFICATION	1.8071659826498108E-8	DESIGN
// treat it as a classname	WITHOUT_CLASSIFICATION	0.9998270188869021	WITHOUT_CLASSIFICATION	1.729811130978926E-4	DESIGN
// treat it as a path expression	WITHOUT_CLASSIFICATION	0.9999997942954729	WITHOUT_CLASSIFICATION	2.0570452709991419E-7	DESIGN
// starts with the name of a mapped class (new style)	WITHOUT_CLASSIFICATION	0.999998867517649	WITHOUT_CLASSIFICATION	1.1324823509574281E-6	DESIGN
// starts with a path expression (new style)	WITHOUT_CLASSIFICATION	0.99999992225449	WITHOUT_CLASSIFICATION	7.77455100484108E-8	DESIGN
//allow ODMG OQL style: from Person p, p.cars c	WITHOUT_CLASSIFICATION	0.9991560003763378	WITHOUT_CLASSIFICATION	8.439996236622044E-4	DESIGN
//handle quoted strings	WITHOUT_CLASSIFICATION	0.9999442622833845	WITHOUT_CLASSIFICATION	5.5737716615380004E-5	DESIGN
// Object insertions, updates, and deletions have list semantics because // they must happen in the right order so as to respect referential // integrity	WITHOUT_CLASSIFICATION	0.9999999928008084	WITHOUT_CLASSIFICATION	7.199191583078661E-9	DESIGN
// "finish off" the join	WITHOUT_CLASSIFICATION	0.9999981230457596	WITHOUT_CLASSIFICATION	1.8769542403140673E-6	DESIGN
//ignore whitespace	WITHOUT_CLASSIFICATION	0.9999630541315198	WITHOUT_CLASSIFICATION	3.694586848030995E-5	DESIGN
//do replacements	WITHOUT_CLASSIFICATION	0.9999936429054797	WITHOUT_CLASSIFICATION	6.357094520419661E-6	DESIGN
//handle HQL2 collection syntax	WITHOUT_CLASSIFICATION	0.9999846221212491	WITHOUT_CLASSIFICATION	1.537787875096117E-5	DESIGN
// uuid.hex is deprecated	WITHOUT_CLASSIFICATION	0.9875907240459793	WITHOUT_CLASSIFICATION	0.01240927595402064	DESIGN
// AbstractSelectingDelegate impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997799436802	WITHOUT_CLASSIFICATION	2.2005631981617923E-7	DESIGN
//hilo params	WITHOUT_CLASSIFICATION	0.9999900761669155	WITHOUT_CLASSIFICATION	9.923833084525284E-6	DESIGN
//sql = query;	WITHOUT_CLASSIFICATION	0.9999523756263701	WITHOUT_CLASSIFICATION	4.762437362991468E-5	DESIGN
// performance opt	WITHOUT_CLASSIFICATION	0.9999986696264758	WITHOUT_CLASSIFICATION	1.3303735242515178E-6	DESIGN
//sql = update;	WITHOUT_CLASSIFICATION	0.9999052448592558	WITHOUT_CLASSIFICATION	9.475514074423243E-5	DESIGN
//hilo config	WITHOUT_CLASSIFICATION	0.9998479335224182	WITHOUT_CLASSIFICATION	1.5206647758178612E-4	DESIGN
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999953042495621	WITHOUT_CLASSIFICATION	4.69575043789057E-6	DESIGN
// don't allow comments on these insert statements as comments totally // blow up the Oracle getGeneratedKeys "support" :(	WITHOUT_CLASSIFICATION	0.9999999831016892	WITHOUT_CLASSIFICATION	1.689831077099258E-8	DESIGN
//abort the save (the object is already saved by a circular cascade)	WITHOUT_CLASSIFICATION	0.9995753574315267	WITHOUT_CLASSIFICATION	4.2464256847331717E-4	DESIGN
//throw new IdentifierGenerationException("save associated object first, or disable cascade for inverse association");	WITHOUT_CLASSIFICATION	0.9999999767784401	WITHOUT_CLASSIFICATION	2.3221559961992457E-8	DESIGN
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999984075890407	WITHOUT_CLASSIFICATION	1.5924109593563303E-6	DESIGN
//do nothing to avoid a lazy property initialization	WITHOUT_CLASSIFICATION	0.9941982339564583	WITHOUT_CLASSIFICATION	0.00580176604354158	DESIGN
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999992425177218	WITHOUT_CLASSIFICATION	7.574822782225912E-7	DESIGN
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999953042495621	WITHOUT_CLASSIFICATION	4.69575043789057E-6	DESIGN
// do nothing until we hit the rsult set containing the generated id	WITHOUT_CLASSIFICATION	0.9994119181060552	WITHOUT_CLASSIFICATION	5.880818939447078E-4	DESIGN
/* COLUMN and TABLE should be renamed but it would break the public API */	WITHOUT_CLASSIFICATION	0.7313831542682082	DESIGN	0.2686168457317918	WITHOUT_CLASSIFICATION
// Loaded entity instances, by EntityKey	WITHOUT_CLASSIFICATION	0.9999854863429617	WITHOUT_CLASSIFICATION	1.4513657038368873E-5	DESIGN
// if the given name is un-qualified we may neen to qualify it	WITHOUT_CLASSIFICATION	0.9999632483823718	WITHOUT_CLASSIFICATION	3.675161762821291E-5	DESIGN
// the default...	WITHOUT_CLASSIFICATION	0.9999976594960733	WITHOUT_CLASSIFICATION	2.3405039266504776E-6	DESIGN
// unfortunately not really safe to normalize this // to 1 as an initial value like we do the others // because we would not be able to control this if // we are using a sequence...	WITHOUT_CLASSIFICATION	0.999201541111714	WITHOUT_CLASSIFICATION	7.984588882859412E-4	DESIGN
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999984075890407	WITHOUT_CLASSIFICATION	1.5924109593563303E-6	DESIGN
// Identity map of CollectionEntry instances, by the collection wrapper	WITHOUT_CLASSIFICATION	0.999999947089213	WITHOUT_CLASSIFICATION	5.291078709539757E-8	DESIGN
// general purpose parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999459717266	WITHOUT_CLASSIFICATION	5.402827329821209E-8	DESIGN
// table-specific parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998722728004	WITHOUT_CLASSIFICATION	1.277271995905824E-7	DESIGN
// Configurable implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999963677038411	WITHOUT_CLASSIFICATION	3.632296158795121E-6	DESIGN
// IdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999964738952503	WITHOUT_CLASSIFICATION	3.526104749805852E-6	DESIGN
// PersistentIdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999981021785611	WITHOUT_CLASSIFICATION	1.8978214388665775E-6	DESIGN
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999974774855188	WITHOUT_CLASSIFICATION	2.5225144811170133E-6	DESIGN
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999974774855188	WITHOUT_CLASSIFICATION	2.5225144811170133E-6	DESIGN
//fetch the generated id in a separate query	WITHOUT_CLASSIFICATION	0.9999182717707786	WITHOUT_CLASSIFICATION	8.17282292213517E-5	DESIGN
// we just hit the last position	WITHOUT_CLASSIFICATION	0.9999943854975242	WITHOUT_CLASSIFICATION	5.614502475812736E-6	DESIGN
// scroll ahead	WITHOUT_CLASSIFICATION	0.9999958140207329	WITHOUT_CLASSIFICATION	4.185979267138809E-6	DESIGN
// scroll backward	WITHOUT_CLASSIFICATION	0.9999919269397181	WITHOUT_CLASSIFICATION	8.073060282064722E-6	DESIGN
// we have not yet hit the last result...	WITHOUT_CLASSIFICATION	0.9998555610138424	WITHOUT_CLASSIFICATION	1.4443898615751975E-4	DESIGN
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999923756900088	WITHOUT_CLASSIFICATION	7.624309991175446E-6	DESIGN
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999054127909	WITHOUT_CLASSIFICATION	9.458720909229852E-7	DESIGN
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999957682261131	WITHOUT_CLASSIFICATION	4.231773886893966E-6	DESIGN
// do this when all the properties are updateable since there is // a certain likelihood that the information will already be // snapshot-cached.	WITHOUT_CLASSIFICATION	0.9999527700127346	WITHOUT_CLASSIFICATION	4.7229987265364795E-5	DESIGN
// Inner classes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999907085441623	WITHOUT_CLASSIFICATION	9.291455837728147E-6	DESIGN
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999923756900088	WITHOUT_CLASSIFICATION	7.624309991175446E-6	DESIGN
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999054127909	WITHOUT_CLASSIFICATION	9.458720909229852E-7	DESIGN
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999957682261131	WITHOUT_CLASSIFICATION	4.231773886893966E-6	DESIGN
// Caches	WITHOUT_CLASSIFICATION	0.9999982609812015	WITHOUT_CLASSIFICATION	1.7390187985395841E-6	DESIGN
//Generators:	WITHOUT_CLASSIFICATION	0.9995080173813179	WITHOUT_CLASSIFICATION	4.919826186820961E-4	DESIGN
// cache region is defined by the root-class in the hierarchy...	WITHOUT_CLASSIFICATION	0.9999485697125541	WITHOUT_CLASSIFICATION	5.14302874458305E-5	DESIGN
//check if the detached object being merged is the parent	WITHOUT_CLASSIFICATION	0.9999339753529223	WITHOUT_CLASSIFICATION	6.602464707779776E-5	DESIGN
// after *all* persisters and named queries are registered	WITHOUT_CLASSIFICATION	0.9999999826192912	WITHOUT_CLASSIFICATION	1.738070879739123E-8	DESIGN
// if we get here, it is possible that we have a proxy 'in the way' of the merge map resolution... // 	WITHOUT_CLASSIFICATION	0.9999981437929985	WITHOUT_CLASSIFICATION	1.856207001520594E-6	DESIGN
//JNDI + Serialization:	WITHOUT_CLASSIFICATION	0.9999592087063803	WITHOUT_CLASSIFICATION	4.079129361961344E-5	DESIGN
//checking for named queries	WITHOUT_CLASSIFICATION	0.9980385950484045	WITHOUT_CLASSIFICATION	0.00196140495159548	DESIGN
//stats	WITHOUT_CLASSIFICATION	0.9999664188735432	WITHOUT_CLASSIFICATION	3.358112645683496E-5	DESIGN
// EntityNotFoundDelegate	WITHOUT_CLASSIFICATION	0.9999902581263137	WITHOUT_CLASSIFICATION	9.741873686278263E-6	DESIGN
// Check named HQL queries	WITHOUT_CLASSIFICATION	0.9999876549174458	WITHOUT_CLASSIFICATION	1.2345082554199497E-5	DESIGN
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9499904218748952	WITHOUT_CLASSIFICATION	0.05000957812510478	DESIGN
//prevents this session from adding things to cache	WITHOUT_CLASSIFICATION	0.9999661703109999	WITHOUT_CLASSIFICATION	3.382968900013032E-5	DESIGN
// from javax.naming.Referenceable	WITHOUT_CLASSIFICATION	0.9999894684393517	WITHOUT_CLASSIFICATION	1.0531560648289187E-5	DESIGN
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999900268848567	WITHOUT_CLASSIFICATION	9.973115143223467E-6	DESIGN
//for a dynamic-class	WITHOUT_CLASSIFICATION	0.9999840285839816	WITHOUT_CLASSIFICATION	1.5971416018487336E-5	DESIGN
//test this entity to see if we must query it	WITHOUT_CLASSIFICATION	0.9996110652424742	WITHOUT_CLASSIFICATION	3.8893475752576603E-4	DESIGN
//NOTE EARLY EXIT	WITHOUT_CLASSIFICATION	0.998884550064118	WITHOUT_CLASSIFICATION	0.0011154499358819734	DESIGN
// for backward-compatability	WITHOUT_CLASSIFICATION	0.9999703638173529	WITHOUT_CLASSIFICATION	2.9636182647101652E-5	DESIGN
// ignore this error for now	WITHOUT_CLASSIFICATION	0.9999881448350042	WITHOUT_CLASSIFICATION	1.1855164995790948E-5	DESIGN
//to stop the class from being unloaded	WITHOUT_CLASSIFICATION	0.999598629406239	WITHOUT_CLASSIFICATION	4.0137059376104864E-4	DESIGN
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9966010353455356	WITHOUT_CLASSIFICATION	0.0033989646544645247	DESIGN
//must add to JNDI _after_ adding to HashMaps, because some JNDI servers use serialization	WITHOUT_CLASSIFICATION	0.9999142930701989	WITHOUT_CLASSIFICATION	8.570692980113692E-5	DESIGN
// Make sure this is a defined parameter and check the incoming value type	WITHOUT_CLASSIFICATION	0.9999928241145171	WITHOUT_CLASSIFICATION	7.175885482910627E-6	DESIGN
// for each of the defined parameters, make sure its value // has been set	WITHOUT_CLASSIFICATION	0.9999995383554423	WITHOUT_CLASSIFICATION	4.616445576065167E-7	DESIGN
//we never need to apply locks to the SQL	WITHOUT_CLASSIFICATION	0.9999969735752237	WITHOUT_CLASSIFICATION	3.0264247763467817E-6	DESIGN
// inserts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999954481526242	WITHOUT_CLASSIFICATION	4.551847375720471E-6	DESIGN
// deletes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999954116508042	WITHOUT_CLASSIFICATION	4.588349195824022E-6	DESIGN
// during deserialization, we need to reconnect all proxies and // collections to this session, as well as the EntityEntry and // CollectionEntry instances; these associations are transient // because serialization is used for different things.	WITHOUT_CLASSIFICATION	0.9999722918464099	WITHOUT_CLASSIFICATION	2.7708153590111383E-5	DESIGN
// updates ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999766027431047	WITHOUT_CLASSIFICATION	2.3397256895153973E-5	DESIGN
// loading ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999913976185189	WITHOUT_CLASSIFICATION	8.602381481137864E-6	DESIGN
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999999647714148	WITHOUT_CLASSIFICATION	3.52285850878655E-8	DESIGN
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999999647714148	WITHOUT_CLASSIFICATION	3.52285850878655E-8	DESIGN
// first, try to load it from the temp PC associated to this SS	WITHOUT_CLASSIFICATION	0.9999984480236962	WITHOUT_CLASSIFICATION	1.5519763038644437E-6	DESIGN
// if the metadata allowed proxy creation and caller did not request forceful eager loading, // generate a proxy	WITHOUT_CLASSIFICATION	0.99999435673411	WITHOUT_CLASSIFICATION	5.643265889984937E-6	DESIGN
// otherwise immediately materialize it	WITHOUT_CLASSIFICATION	0.9999732724944635	WITHOUT_CLASSIFICATION	2.6727505536475312E-5	DESIGN
/////////////////////////////////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.999958497564893	WITHOUT_CLASSIFICATION	4.150243510710515E-5	DESIGN
// no auto-flushing to support in stateless session	WITHOUT_CLASSIFICATION	0.9999997172886212	WITHOUT_CLASSIFICATION	2.827113787217218E-7	DESIGN
//after setting values to object, entityMode	WITHOUT_CLASSIFICATION	0.999973743220556	WITHOUT_CLASSIFICATION	2.6256779443963546E-5	DESIGN
//for EJB3	WITHOUT_CLASSIFICATION	0.9999915596298078	WITHOUT_CLASSIFICATION	8.440370192117102E-6	DESIGN
// just ignore	WITHOUT_CLASSIFICATION	0.9999952454524887	WITHOUT_CLASSIFICATION	4.75454751128995E-6	DESIGN
// do a check	WITHOUT_CLASSIFICATION	0.999995738282603	WITHOUT_CLASSIFICATION	4.261717396969413E-6	DESIGN
// saveOrUpdate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999857927488182	WITHOUT_CLASSIFICATION	1.4207251181903711E-5	DESIGN
// update() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999526901308387	WITHOUT_CLASSIFICATION	4.7309869161455824E-5	DESIGN
// lock() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999985200176326	WITHOUT_CLASSIFICATION	1.479982367371914E-6	DESIGN
// persist() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999931235939111	WITHOUT_CLASSIFICATION	6.876406088846239E-6	DESIGN
// persistOnFlush() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999944707485803	WITHOUT_CLASSIFICATION	5.529251419666825E-6	DESIGN
// merge() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999991503524116	WITHOUT_CLASSIFICATION	8.496475884770936E-7	DESIGN
// saveOrUpdateCopy() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999747054047872	WITHOUT_CLASSIFICATION	2.529459521293902E-5	DESIGN
// delete() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999950454589113	WITHOUT_CLASSIFICATION	4.9545410888184885E-6	DESIGN
// load()/get() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999973356902077	WITHOUT_CLASSIFICATION	2.6643097923861327E-6	DESIGN
// refresh() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999942691880663	WITHOUT_CLASSIFICATION	5.730811933682968E-6	DESIGN
// replicate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999869786583255	WITHOUT_CLASSIFICATION	1.302134167452343E-5	DESIGN
// do not auto-flush while outside a transaction	WITHOUT_CLASSIFICATION	0.999999384123321	WITHOUT_CLASSIFICATION	6.158766791056047E-7	DESIGN
// this is an internal error of some sort...	WITHOUT_CLASSIFICATION	0.9995583624092003	WITHOUT_CLASSIFICATION	4.4163759079984897E-4	DESIGN
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.5434422504034117	DESIGN	0.45655774959658835	WITHOUT_CLASSIFICATION
//only collections belonging to deleted entities are allowed to be dereferenced in the case of orphan delete	WITHOUT_CLASSIFICATION	0.999994929671889	WITHOUT_CLASSIFICATION	5.070328110974593E-6	DESIGN
// if it was previously unreferenced, we need to flush in order to // get its state into the database in order to execute query	WITHOUT_CLASSIFICATION	0.9999881274102463	WITHOUT_CLASSIFICATION	1.1872589753629039E-5	DESIGN
// not for internal use:	WITHOUT_CLASSIFICATION	0.9994301032571217	WITHOUT_CLASSIFICATION	5.698967428783464E-4	DESIGN
// otherwise, we only need to flush if there are in-memory changes // to the queried tables	WITHOUT_CLASSIFICATION	0.9999998550494271	WITHOUT_CLASSIFICATION	1.449505729570678E-7	DESIGN
// might need to run a different filter entirely after the flush // because the collection role may have changed	WITHOUT_CLASSIFICATION	0.9999959054368085	WITHOUT_CLASSIFICATION	4.094563191569944E-6	DESIGN
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.5434422504034117	DESIGN	0.45655774959658835	WITHOUT_CLASSIFICATION
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.5434422504034117	DESIGN	0.45655774959658835	WITHOUT_CLASSIFICATION
//if it is initialized, see if the underlying //instance is contained, since we need to  //account for the fact that it might have been //evicted	WITHOUT_CLASSIFICATION	0.9996026466246816	WITHOUT_CLASSIFICATION	3.973533753185501E-4	DESIGN
// basically just an adapted copy of find(CriteriaImpl)	WITHOUT_CLASSIFICATION	0.9999999094553741	WITHOUT_CLASSIFICATION	9.054462592952401E-8	DESIGN
// it is possible for this method to be called during flush processing, // so make certain that we do not accidently initialize an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9973840160261209	WITHOUT_CLASSIFICATION	0.0026159839738790955	DESIGN
// nothing to do in a stateful session	WITHOUT_CLASSIFICATION	0.9999986039734552	WITHOUT_CLASSIFICATION	1.3960265448139902E-6	DESIGN
// ignore	WITHOUT_CLASSIFICATION	0.9999967332423346	WITHOUT_CLASSIFICATION	3.266757665412638E-6	DESIGN
// ignore this error for now	WITHOUT_CLASSIFICATION	0.9999881448350042	WITHOUT_CLASSIFICATION	1.1855164995790948E-5	DESIGN
// we need to writeObject() on this since interceptor is user defined	WITHOUT_CLASSIFICATION	0.9999257846313581	WITHOUT_CLASSIFICATION	7.421536864190812E-5	DESIGN
// the old-time stand-by...	WITHOUT_CLASSIFICATION	0.9999742242123711	WITHOUT_CLASSIFICATION	2.57757876287825E-5	DESIGN
// parameter bind values...	WITHOUT_CLASSIFICATION	0.9999750640654724	WITHOUT_CLASSIFICATION	2.493593452761025E-5	DESIGN
// Parameter handling code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999919315897418	WITHOUT_CLASSIFICATION	8.06841025824587E-6	DESIGN
// prepend value and type list with null for any positions before the wanted position.	WITHOUT_CLASSIFICATION	0.9999999895624295	WITHOUT_CLASSIFICATION	1.043757043654965E-8	DESIGN
// Execution methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999597696566163	WITHOUT_CLASSIFICATION	4.023034338366316E-5	DESIGN
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9983645218208228	WITHOUT_CLASSIFICATION	0.0016354781791771572	DESIGN
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9983645218208228	WITHOUT_CLASSIFICATION	0.0016354781791771572	DESIGN
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9997706678015282	WITHOUT_CLASSIFICATION	2.2933219847184435E-4	DESIGN
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9997706678015282	WITHOUT_CLASSIFICATION	2.2933219847184435E-4	DESIGN
// FieldInterceptor impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999967792328083	WITHOUT_CLASSIFICATION	3.220767191705181E-5	DESIGN
// subclass accesses ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993156481967	WITHOUT_CLASSIFICATION	6.843518033563553E-7	DESIGN
//let's assume that there is only one lazy fetch group, for now!	WITHOUT_CLASSIFICATION	0.9998986279801645	WITHOUT_CLASSIFICATION	1.0137201983554264E-4	DESIGN
// FieldHandler impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999299894808394	WITHOUT_CLASSIFICATION	7.001051916050264E-5	DESIGN
// should *not* need to grow beyond the size of the total number of columns in the rs	WITHOUT_CLASSIFICATION	0.9999915433760438	WITHOUT_CLASSIFICATION	8.456623956193745E-6	DESIGN
// should probably no-op commit/rollback here, at least in JTA scenarios	WITHOUT_CLASSIFICATION	0.9982951491477053	WITHOUT_CLASSIFICATION	0.0017048508522946046	DESIGN
// Base Expectation impls ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999989546692761	WITHOUT_CLASSIFICATION	1.0453307238445705E-6	DESIGN
// Various Expectation instances ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999941221273092	WITHOUT_CLASSIFICATION	5.87787269077718E-6	DESIGN
// explicitly perform no checking...	WITHOUT_CLASSIFICATION	0.9961811552513281	WITHOUT_CLASSIFICATION	0.003818844748671895	DESIGN
// used from testsuite	WITHOUT_CLASSIFICATION	0.9956059791066372	WITHOUT_CLASSIFICATION	0.0043940208933627945	DESIGN
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999987380146185	WITHOUT_CLASSIFICATION	1.261985381456811E-6	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.9997309057501701	WITHOUT_CLASSIFICATION	2.690942498298937E-4	DESIGN
// register synch; stats.connect()	WITHOUT_CLASSIFICATION	0.9999954479623242	WITHOUT_CLASSIFICATION	4.552037675769956E-6	DESIGN
//noncritical, swallow and let the other propagate!	WITHOUT_CLASSIFICATION	0.9999919498628478	WITHOUT_CLASSIFICATION	8.05013715226044E-6	DESIGN
// calls executeBatch()	WITHOUT_CLASSIFICATION	0.9999997537606553	WITHOUT_CLASSIFICATION	2.462393447509931E-7	DESIGN
//no big deal	WITHOUT_CLASSIFICATION	0.9999259315778128	WITHOUT_CLASSIFICATION	7.406842218714421E-5	DESIGN
// no big deal	WITHOUT_CLASSIFICATION	0.9999441382141235	WITHOUT_CLASSIFICATION	5.586178587640643E-5	DESIGN
// no big deal	WITHOUT_CLASSIFICATION	0.9999441382141235	WITHOUT_CLASSIFICATION	5.586178587640643E-5	DESIGN
// sybase driver (jConnect) throwing NPE here in certain // cases, but we'll just handle the general "unexpected" case	WITHOUT_CLASSIFICATION	0.9999814722458666	WITHOUT_CLASSIFICATION	1.8527754133339957E-5	DESIGN
// see explanation above...	WITHOUT_CLASSIFICATION	0.9999955976188462	WITHOUT_CLASSIFICATION	4.4023811538010654E-6	DESIGN
// If we are in the process of releasing, no sense // checking for aggressive-release possibility.	WITHOUT_CLASSIFICATION	0.99323220628222	WITHOUT_CLASSIFICATION	0.0067677937177800665	DESIGN
// EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9970684936481904	WITHOUT_CLASSIFICATION	0.002931506351809615	DESIGN
// ResultSet impl ("overridden") ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999941176339575	WITHOUT_CLASSIFICATION	5.882366042417937E-6	DESIGN
// ResultSet impl (delegated) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992833069609	WITHOUT_CLASSIFICATION	7.166930390966503E-7	DESIGN
// refer to comment in StatefulPersistenceContext.addCollection()	WITHOUT_CLASSIFICATION	0.9999998882759562	WITHOUT_CLASSIFICATION	1.1172404383333588E-7	DESIGN
// ConnectionManager.Callback implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998709885647336	WITHOUT_CLASSIFICATION	1.2901143526645496E-4	DESIGN
// Note : success = false, because we don't know the outcome of the transaction	WITHOUT_CLASSIFICATION	0.9998144228339342	WITHOUT_CLASSIFICATION	1.855771660658099E-4	DESIGN
// we already have a callback registered; either a local // (org.hibernate.Transaction) transaction has accepted // callback responsibilities, or we have previously // registered a transaction synch.	WITHOUT_CLASSIFICATION	0.9699043212563261	WITHOUT_CLASSIFICATION	0.030095678743673953	DESIGN
// the configured transaction-factory says it only supports // local callback mode, so no sense attempting to register a // JTA Synchronization	WITHOUT_CLASSIFICATION	0.9999880829763272	WITHOUT_CLASSIFICATION	1.1917023672738328E-5	DESIGN
// transactions marked for rollback-only cause some TM impls to throw exceptions	WITHOUT_CLASSIFICATION	0.9996225236616172	WITHOUT_CLASSIFICATION	3.7747633838287095E-4	DESIGN
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999961227438883	WITHOUT_CLASSIFICATION	3.877256111723661E-6	DESIGN
//postInitialize() will be called after initialization	WITHOUT_CLASSIFICATION	0.9996170173172794	WITHOUT_CLASSIFICATION	3.8298268272061846E-4	DESIGN
// cannot handle single quotes	WITHOUT_CLASSIFICATION	0.9997497870411834	WITHOUT_CLASSIFICATION	2.5021295881652556E-4	DESIGN
// todo : for 4.0 //	WITHOUT_CLASSIFICATION	0.9999465489709153	WITHOUT_CLASSIFICATION	5.3451029084760174E-5	DESIGN
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999990329898727	WITHOUT_CLASSIFICATION	9.670101273360358E-7	DESIGN
// don't even bother trying to read further	WITHOUT_CLASSIFICATION	0.9999774207010562	WITHOUT_CLASSIFICATION	2.2579298943821576E-5	DESIGN
// don't even bother trying to read any further	WITHOUT_CLASSIFICATION	0.9999954986866447	WITHOUT_CLASSIFICATION	4.501313355215166E-6	DESIGN
// position cursor to the last row	WITHOUT_CLASSIFICATION	0.9999996685978069	WITHOUT_CLASSIFICATION	3.3140219313794903E-7	DESIGN
// sequentially read the result set in reverse until we recognize // a change in the key value.  At that point, we are pointed at // the last physical sequential row for the logical row in which // we are interested in processing	WITHOUT_CLASSIFICATION	0.999997763475453	WITHOUT_CLASSIFICATION	2.2365245470405444E-6	DESIGN
// Read backwards until we read past the first physical sequential // row with the key we are interested in loading	WITHOUT_CLASSIFICATION	0.9999694150478182	WITHOUT_CLASSIFICATION	3.058495218165769E-5	DESIGN
// Finally, read ahead one row to position result set cursor // at the first physical row we are interested in loading	WITHOUT_CLASSIFICATION	0.9998637074112344	WITHOUT_CLASSIFICATION	1.362925887656451E-4	DESIGN
// now get an existing proxy for each row element (if there is one)	WITHOUT_CLASSIFICATION	0.9999999699955008	WITHOUT_CLASSIFICATION	3.0004499200909914E-8	DESIGN
// force the proxy to resolve itself	WITHOUT_CLASSIFICATION	0.9999965140052509	WITHOUT_CLASSIFICATION	3.4859947491617296E-6	DESIGN
// this is equivalent to the old behavior...	WITHOUT_CLASSIFICATION	0.9999251017515796	WITHOUT_CLASSIFICATION	7.489824842049945E-5	DESIGN
//if null, owner will be retrieved from session	WITHOUT_CLASSIFICATION	0.999988300009903	WITHOUT_CLASSIFICATION	1.1699990096966234E-5	DESIGN
//final String queryString, 	WITHOUT_CLASSIFICATION	0.9999945111635834	WITHOUT_CLASSIFICATION	5.488836416623749E-6	DESIGN
// if it was a reference to self, don't need to nullify // unless we are using native id generation, in which // case we definitely need to nullify	WITHOUT_CLASSIFICATION	0.9999924270925864	WITHOUT_CLASSIFICATION	7.57290741361048E-6	DESIGN
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9996899323469238	WITHOUT_CLASSIFICATION	3.100676530762061E-4	DESIGN
// in an effort to avoid concurrent-modification-exceptions (from // potential recursive calls back through here as a result of the // eventual call to PersistentCollection#endRead), we scan the // internal loadingCollections map for matches and store those matches // in a temp collection.  the temp collection is then used to "drive" // the #endRead processing.	WITHOUT_CLASSIFICATION	0.9999997882573455	WITHOUT_CLASSIFICATION	2.1174265453590476E-7	DESIGN
//we can reuse it for each row	WITHOUT_CLASSIFICATION	0.9999795744937359	WITHOUT_CLASSIFICATION	2.042550626410434E-5	DESIGN
//can't reuse in this case	WITHOUT_CLASSIFICATION	0.9817232096624592	WITHOUT_CLASSIFICATION	0.01827679033754075	DESIGN
// First we need to suspend any current JTA transaction and obtain // a JDBC connection	WITHOUT_CLASSIFICATION	0.9999917562803734	WITHOUT_CLASSIFICATION	8.243719626592449E-6	DESIGN
//getResultList(results);	WITHOUT_CLASSIFICATION	0.9999869590990667	WITHOUT_CLASSIFICATION	1.3040900933351865E-5	DESIGN
//if we only returned one entity, query by key is more efficient	WITHOUT_CLASSIFICATION	0.9985113348264014	WITHOUT_CLASSIFICATION	0.0014886651735985538	DESIGN
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999402163607558	WITHOUT_CLASSIFICATION	5.978363924416658E-5	DESIGN
// handle empty collection	WITHOUT_CLASSIFICATION	0.9996874796552576	WITHOUT_CLASSIFICATION	3.12520344742401E-4	DESIGN
// else no collection element, but also no owner	WITHOUT_CLASSIFICATION	0.9999999676365584	WITHOUT_CLASSIFICATION	3.23634416552488E-8	DESIGN
//handle empty collections	WITHOUT_CLASSIFICATION	0.9999320987461889	WITHOUT_CLASSIFICATION	6.790125381102443E-5	DESIGN
// else this is not a collection initializer (and empty collections will // be detected by looking for the owner's identifier in the result set)	WITHOUT_CLASSIFICATION	0.9998693210194537	WITHOUT_CLASSIFICATION	1.3067898054626442E-4	DESIGN
// validate() instances of Validatable	WITHOUT_CLASSIFICATION	0.9999985612844426	WITHOUT_CLASSIFICATION	1.4387155574074875E-6	DESIGN
// if we know there is exactly 1 row, we can skip. // it would be great if we could _always_ skip this; // it is a problem for <key-many-to-one>	WITHOUT_CLASSIFICATION	0.9979341338265698	WITHOUT_CLASSIFICATION	0.0020658661734301803	DESIGN
// remove all collections for the entity from the session-level cache	WITHOUT_CLASSIFICATION	0.9999996227032666	WITHOUT_CLASSIFICATION	3.77296733417148E-7	DESIGN
//null version means the object is in the process of being loaded somewhere else in the ResultSet	WITHOUT_CLASSIFICATION	0.9999996357498767	WITHOUT_CLASSIFICATION	3.6425012317457383E-7	DESIGN
//problematic for <key-many-to-one>!	WITHOUT_CLASSIFICATION	0.9999741091931946	WITHOUT_CLASSIFICATION	2.589080680542924E-5	DESIGN
//use the id passed in	WITHOUT_CLASSIFICATION	0.9984900676903501	WITHOUT_CLASSIFICATION	0.0015099323096499626	DESIGN
//do nothing	WITHOUT_CLASSIFICATION	0.9998071095517321	WITHOUT_CLASSIFICATION	1.9289044826780317E-4	DESIGN
// prefer re-generation of identity!	WITHOUT_CLASSIFICATION	0.9997015452069785	WITHOUT_CLASSIFICATION	2.9845479302146254E-4	DESIGN
//no point doing this if NONE was requested	WITHOUT_CLASSIFICATION	0.9999723798661937	WITHOUT_CLASSIFICATION	2.762013380640535E-5	DESIGN
//If the object is already loaded, return the loaded one	WITHOUT_CLASSIFICATION	0.9999609445130894	WITHOUT_CLASSIFICATION	3.90554869106904E-5	DESIGN
//its already loaded so don't need to hydrate it	WITHOUT_CLASSIFICATION	0.9999609196037872	WITHOUT_CLASSIFICATION	3.9080396212769643E-5	DESIGN
// cascade the refresh prior to refreshing this entity	WITHOUT_CLASSIFICATION	0.9999776635994202	WITHOUT_CLASSIFICATION	2.2336400579828647E-5	DESIGN
//the load() which takes an entity does not pass an entityName	WITHOUT_CLASSIFICATION	0.9999993023422953	WITHOUT_CLASSIFICATION	6.976577047007936E-7	DESIGN
//we only check the version when _upgrading_ lock modes	WITHOUT_CLASSIFICATION	0.9999993797144195	WITHOUT_CLASSIFICATION	6.202855804364972E-7	DESIGN
// look for a proxy	WITHOUT_CLASSIFICATION	0.9999992802422029	WITHOUT_CLASSIFICATION	7.197577970889497E-7	DESIGN
//we need to upgrade the lock mode to the mode requested	WITHOUT_CLASSIFICATION	0.9996556175944096	WITHOUT_CLASSIFICATION	3.443824055904317E-4	DESIGN
//its the given optional object	WITHOUT_CLASSIFICATION	0.9999994367185386	WITHOUT_CLASSIFICATION	5.632814613668677E-7	DESIGN
// instantiate a new instance	WITHOUT_CLASSIFICATION	0.9999973509956386	WITHOUT_CLASSIFICATION	2.6490043613834874E-6	DESIGN
//need to hydrate it.	WITHOUT_CLASSIFICATION	0.9997271432666237	WITHOUT_CLASSIFICATION	2.728567333762405E-4	DESIGN
// return a newly loaded object	WITHOUT_CLASSIFICATION	0.9999843746368031	WITHOUT_CLASSIFICATION	1.5625363196910376E-5	DESIGN
//will be ignored, using the existing Entry instead	WITHOUT_CLASSIFICATION	0.9999930979531108	WITHOUT_CLASSIFICATION	6.902046889155799E-6	DESIGN
// key is an entity involved with the operation performed by the listener; // value can be either a copy of the entity or the entity itself	WITHOUT_CLASSIFICATION	0.9999979975859196	WITHOUT_CLASSIFICATION	2.0024140804593052E-6	DESIGN
//materialize associations (and initialize the object) later	WITHOUT_CLASSIFICATION	0.9999992143667438	WITHOUT_CLASSIFICATION	7.856332563440782E-7	DESIGN
// Get the persister for the _subclass_	WITHOUT_CLASSIFICATION	0.9999869614719729	WITHOUT_CLASSIFICATION	1.3038528027077806E-5	DESIGN
// ok in normal Hibernate usage to delete a detached entity; JPA however // forbids it, thus this is a hook for HEM to affect this behavior	WITHOUT_CLASSIFICATION	0.987749102165262	WITHOUT_CLASSIFICATION	0.012250897834737902	DESIGN
// the entry will be removed after the flush, and will no longer // override the stale snapshot // This is now handled by removeEntity() in EntityDeleteAction //persistenceContext.removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999944384485557	WITHOUT_CLASSIFICATION	5.5615514442028024E-6	DESIGN
//addInitializedCollection(collection, persister, id);	WITHOUT_CLASSIFICATION	0.9999893061434488	WITHOUT_CLASSIFICATION	1.0693856551225729E-5	DESIGN
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9990708192733739	WITHOUT_CLASSIFICATION	9.291807266260359E-4	DESIGN
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9990708192733739	WITHOUT_CLASSIFICATION	9.291807266260359E-4	DESIGN
/*|| oj.getJoinable().consumesCollectionAlias() */	WITHOUT_CLASSIFICATION	0.9999998642544415	WITHOUT_CLASSIFICATION	1.357455584274582E-7	DESIGN
// here we do not bother with the discriminator.	WITHOUT_CLASSIFICATION	0.9998789068183496	WITHOUT_CLASSIFICATION	1.2109318165046972E-4	DESIGN
// Code to handle subclasses of topClass	WITHOUT_CLASSIFICATION	0.9999957872015545	WITHOUT_CLASSIFICATION	4.212798445577487E-6	DESIGN
//woops we got an instance of another class hierarchy branch	WITHOUT_CLASSIFICATION	0.9999330509194794	WITHOUT_CLASSIFICATION	6.694908052064884E-5	DESIGN
// we can go straight to the first required row	WITHOUT_CLASSIFICATION	0.9999997115611743	WITHOUT_CLASSIFICATION	2.88438825715231E-7	DESIGN
// we need to step through the rows one row at a time (slow)	WITHOUT_CLASSIFICATION	0.9999255402722336	WITHOUT_CLASSIFICATION	7.445972776644601E-5	DESIGN
// synchronized to avoid multi-thread access issues; defined as method synch to avoid // potential deadlock issues due to nature of code.	WITHOUT_CLASSIFICATION	0.9975399202024577	WITHOUT_CLASSIFICATION	0.002460079797542178	DESIGN
// Allows various loaders (ok mainly the QueryLoader :) to check // whether scrolling of their result set should be allowed. // // By default it is allowed.	WITHOUT_CLASSIFICATION	0.999568752331234	WITHOUT_CLASSIFICATION	4.3124766876605333E-4	DESIGN
//before adding to collection!	WITHOUT_CLASSIFICATION	0.9999906173950541	WITHOUT_CLASSIFICATION	9.382604945948348E-6	DESIGN
// if the current depth is 0, the root thing being loaded is the // many-to-many collection itself.  Here, it is alright to use // an inner join...	WITHOUT_CLASSIFICATION	0.9999905983156632	WITHOUT_CLASSIFICATION	9.401684336866883E-6	DESIGN
//operations which cascade as far as the collection also cascade to collection elements	WITHOUT_CLASSIFICATION	0.9999992738479024	WITHOUT_CLASSIFICATION	7.261520975705761E-7	DESIGN
// simple, because we can't have a one-to-one or a collection  // (or even a property-ref) in a composite-element:	WITHOUT_CLASSIFICATION	0.9999928357096931	WITHOUT_CLASSIFICATION	7.164290306906394E-6	DESIGN
//a composite key	WITHOUT_CLASSIFICATION	0.9999946947605163	WITHOUT_CLASSIFICATION	5.305239483650971E-6	DESIGN
// if no batch, use "foo = ? and bar = ?"	WITHOUT_CLASSIFICATION	0.9999998043409625	WITHOUT_CLASSIFICATION	1.9565903751916502E-7	DESIGN
//it must be a collection fetch	WITHOUT_CLASSIFICATION	0.9999926523560538	WITHOUT_CLASSIFICATION	7.347643946196006E-6	DESIGN
// needed later for many-to-many/filter application	WITHOUT_CLASSIFICATION	0.9999675605632444	WITHOUT_CLASSIFICATION	3.2439436755655173E-5	DESIGN
/*&& etype.isReferenceToPrimaryKey()*/	WITHOUT_CLASSIFICATION	0.9998443882350612	WITHOUT_CLASSIFICATION	1.5561176493877118E-4	DESIGN
// it might still need to apply a collection ordering based on a // many-to-many defined order-by...	WITHOUT_CLASSIFICATION	0.9999905755234977	WITHOUT_CLASSIFICATION	9.424476502271946E-6	DESIGN
// if a composite key, use "( (foo = ? and bar = ?) or (foo = ? and bar = ?) )" for batching //TODO: unnecessary for databases with ANSI-style joins	WITHOUT_CLASSIFICATION	0.9906522257578837	WITHOUT_CLASSIFICATION	0.009347774242116203	DESIGN
// belong to other persister // belong to other persister	WITHOUT_CLASSIFICATION	0.999992259528861	WITHOUT_CLASSIFICATION	7.740471139103343E-6	DESIGN
// we found it	WITHOUT_CLASSIFICATION	0.9998812155535592	WITHOUT_CLASSIFICATION	1.1878444644072008E-4	DESIGN
//we can use an inner join for the many-to-many	WITHOUT_CLASSIFICATION	0.9999223404770574	WITHOUT_CLASSIFICATION	7.765952294257399E-5	DESIGN
//disable a join back to this same association	WITHOUT_CLASSIFICATION	0.9985906798610393	WITHOUT_CLASSIFICATION	0.0014093201389607116	DESIGN
//NOTE: unlike all other Loaders, this one is NOT //      multithreaded, or cacheable!!	WITHOUT_CLASSIFICATION	0.567670967142344	DESIGN	0.43232903285765595	WITHOUT_CLASSIFICATION
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999988590454467	WITHOUT_CLASSIFICATION	1.140954553334799E-6	DESIGN
//root entity comes *last*	WITHOUT_CLASSIFICATION	0.9998804828882993	WITHOUT_CLASSIFICATION	1.1951711170059722E-4	DESIGN
//deliberately ignore return value!	WITHOUT_CLASSIFICATION	0.9999920331739007	WITHOUT_CLASSIFICATION	7.966826099246236E-6	DESIGN
//alias may be null //EARLY EXIT	WITHOUT_CLASSIFICATION	0.9981514854477049	WITHOUT_CLASSIFICATION	0.0018485145522950566	DESIGN
// if it is a compound path	WITHOUT_CLASSIFICATION	0.999868732473117	WITHOUT_CLASSIFICATION	1.3126752688289692E-4	DESIGN
// otherwise assume the parent is the the criteria that created us	WITHOUT_CLASSIFICATION	0.9996012216593696	WITHOUT_CLASSIFICATION	3.987783406304528E-4	DESIGN
// if its the root criteria, we are done	WITHOUT_CLASSIFICATION	0.9999581255285561	WITHOUT_CLASSIFICATION	4.187447144388915E-5	DESIGN
// otherwise, recurse	WITHOUT_CLASSIFICATION	0.9999953446103127	WITHOUT_CLASSIFICATION	4.655389687335996E-6	DESIGN
//the criteria instance	WITHOUT_CLASSIFICATION	0.9998488859086376	WITHOUT_CLASSIFICATION	1.5111409136225312E-4	DESIGN
// the entity name	WITHOUT_CLASSIFICATION	0.9999806517801099	WITHOUT_CLASSIFICATION	1.9348219890043086E-5	DESIGN
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9999805320796954	WITHOUT_CLASSIFICATION	1.9467920304628696E-5	DESIGN
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9999805320796954	WITHOUT_CLASSIFICATION	1.9467920304628696E-5	DESIGN
//it refers to an alias of a projection	WITHOUT_CLASSIFICATION	0.9999950384605264	WITHOUT_CLASSIFICATION	4.961539473570214E-6	DESIGN
//should never happen, i think	WITHOUT_CLASSIFICATION	0.994051435702335	WITHOUT_CLASSIFICATION	0.005948564297664954	DESIGN
// Detect discriminator values...	WITHOUT_CLASSIFICATION	0.999998565760918	WITHOUT_CLASSIFICATION	1.4342390820329416E-6	DESIGN
// Convert the string value into the proper type.	WITHOUT_CLASSIFICATION	0.9999753882044286	WITHOUT_CLASSIFICATION	2.4611795571493424E-5	DESIGN
// and the qualifier is not the alias of this criteria //      -> check to see if we belong to some criteria other //          than the one that created us	WITHOUT_CLASSIFICATION	0.9999941131763657	WITHOUT_CLASSIFICATION	5.886823634230129E-6	DESIGN
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.9999053833578206	WITHOUT_CLASSIFICATION	9.461664217940311E-5	DESIGN
// Otherwise, this is an ordinary value.	WITHOUT_CLASSIFICATION	0.9999794397058014	WITHOUT_CLASSIFICATION	2.0560294198648925E-5	DESIGN
// Currently *not* cachable if autodiscover types is in effect (e.g. "select * ...")	WITHOUT_CLASSIFICATION	0.9999997243848741	WITHOUT_CLASSIFICATION	2.756151259416441E-7	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999609652327096	WITHOUT_CLASSIFICATION	3.903476729039761E-5	DESIGN
// this is only needed (afaict) for ResultTransformer processing...	WITHOUT_CLASSIFICATION	0.999073553084237	WITHOUT_CLASSIFICATION	9.264469157629222E-4	DESIGN
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999996854560179	WITHOUT_CLASSIFICATION	3.145439820135147E-7	DESIGN
// build an array with indices equal to the total number // of actual returns in the result Hibernate will return // for this query (scalars + non-scalars)	WITHOUT_CLASSIFICATION	0.9998547580118937	WITHOUT_CLASSIFICATION	1.452419881063173E-4	DESIGN
// replace {....} with corresponding column aliases	WITHOUT_CLASSIFICATION	0.999996548209959	WITHOUT_CLASSIFICATION	3.4517900409821982E-6	DESIGN
// No additional open braces found in the string, append the // rest of the string in its entirty and quit this loop	WITHOUT_CLASSIFICATION	0.9999775969110835	WITHOUT_CLASSIFICATION	2.2403088916548975E-5	DESIGN
// apend everything up until the next encountered open brace	WITHOUT_CLASSIFICATION	0.9999911426146934	WITHOUT_CLASSIFICATION	8.857385306632932E-6	DESIGN
// it is a simple table alias {foo}	WITHOUT_CLASSIFICATION	0.9999996316892511	WITHOUT_CLASSIFICATION	3.6831074893101707E-7	DESIGN
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9985739911227695	WITHOUT_CLASSIFICATION	0.0014260088772306422	DESIGN
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9985739911227695	WITHOUT_CLASSIFICATION	0.0014260088772306422	DESIGN
// The current alias is referencing the collection to be eagerly fetched	WITHOUT_CLASSIFICATION	0.9999802227377997	WITHOUT_CLASSIFICATION	1.9777262200331936E-5	DESIGN
// it is a property reference {foo.bar}	WITHOUT_CLASSIFICATION	0.9997876452167463	WITHOUT_CLASSIFICATION	2.123547832536864E-4	DESIGN
// Possibly handle :something parameters for the query ?	WITHOUT_CLASSIFICATION	0.9922359770414803	WITHOUT_CLASSIFICATION	0.007764022958519764	DESIGN
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999742494798042	WITHOUT_CLASSIFICATION	2.575052019592588E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999609652327096	WITHOUT_CLASSIFICATION	3.903476729039761E-5	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.9997309057501701	WITHOUT_CLASSIFICATION	2.690942498298937E-4	DESIGN
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9607979775356056	WITHOUT_CLASSIFICATION	0.039202022464394345	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999609652327096	WITHOUT_CLASSIFICATION	3.903476729039761E-5	DESIGN
// Now, process the returns	WITHOUT_CLASSIFICATION	0.9999991650881376	WITHOUT_CLASSIFICATION	8.349118623854054E-7	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999609652327096	WITHOUT_CLASSIFICATION	3.903476729039761E-5	DESIGN
// already been processed...	WITHOUT_CLASSIFICATION	0.9999760367409872	WITHOUT_CLASSIFICATION	2.396325901276238E-5	DESIGN
// already been processed...	WITHOUT_CLASSIFICATION	0.9999760367409872	WITHOUT_CLASSIFICATION	2.396325901276238E-5	DESIGN
// Make sure the owner alias is known...	WITHOUT_CLASSIFICATION	0.9999960094017355	WITHOUT_CLASSIFICATION	3.99059826448526E-6	DESIGN
// first, break down the returns into maps keyed by alias // so that role returns can be more easily resolved to their owners	WITHOUT_CLASSIFICATION	0.9999996203998132	WITHOUT_CLASSIFICATION	3.7960018689387463E-7	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999609652327096	WITHOUT_CLASSIFICATION	3.903476729039761E-5	DESIGN
// If this return's alias has not been processed yet, do so b4 further processing of this return	WITHOUT_CLASSIFICATION	0.9998957572314116	WITHOUT_CLASSIFICATION	1.0424276858843737E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999609652327096	WITHOUT_CLASSIFICATION	3.903476729039761E-5	DESIGN
// for merging of versioned entities, we consider the version having // been changed only when: // 1) the two version values are different; //      *AND* // 2) The target actually represents database state! // // This second condition is a special case which allows // an entity to be merged during the same transaction // (though during a seperate operation) in which it was // originally persisted/saved	WITHOUT_CLASSIFICATION	0.9999924365129235	WITHOUT_CLASSIFICATION	7.563487076475929E-6	DESIGN
// this is the second pass through on a merge op, so here we limit the // replacement to associations types (value types were already replaced // during the first pass)	WITHOUT_CLASSIFICATION	0.9998588718452529	WITHOUT_CLASSIFICATION	1.4112815474701533E-4	DESIGN
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.999558022231789	WITHOUT_CLASSIFICATION	4.4197776821098894E-4	DESIGN
// cascade-save to collections AFTER the collection owner was saved	WITHOUT_CLASSIFICATION	0.9999851628231435	WITHOUT_CLASSIFICATION	1.4837176856552702E-5	DESIGN
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999985451670852	WITHOUT_CLASSIFICATION	1.454832914776191E-6	DESIGN
// Use the delegate.	WITHOUT_CLASSIFICATION	0.999997825431743	WITHOUT_CLASSIFICATION	2.174568257002666E-6	DESIGN
// currently only the Hibernate-supplied DbTimestampType is supported here	WITHOUT_CLASSIFICATION	0.9999837395443119	WITHOUT_CLASSIFICATION	1.626045568811843E-5	DESIGN
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9995459100576276	WITHOUT_CLASSIFICATION	4.540899423724789E-4	DESIGN
// make a new one	WITHOUT_CLASSIFICATION	0.9999984665551432	WITHOUT_CLASSIFICATION	1.5334448567807824E-6	DESIGN
// not so sure this is even valid subtree.  but if it was, it'd // represent two unrelated table references...	WITHOUT_CLASSIFICATION	0.959142438291742	WITHOUT_CLASSIFICATION	0.040857561708258064	DESIGN
// (NOT (GT a b) ) => (LE a b)	WITHOUT_CLASSIFICATION	0.9999227097949998	WITHOUT_CLASSIFICATION	7.729020500032292E-5	DESIGN
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9999809894658181	WITHOUT_CLASSIFICATION	1.9010534181802558E-5	DESIGN
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.999950286753838	WITHOUT_CLASSIFICATION	4.9713246161926756E-5	DESIGN
//sqlResultTypes = selectClause.getSqlResultTypes();	WITHOUT_CLASSIFICATION	0.9999996130361024	WITHOUT_CLASSIFICATION	3.8696389763051186E-7	DESIGN
//by default	WITHOUT_CLASSIFICATION	0.999955122873193	WITHOUT_CLASSIFICATION	4.487712680688105E-5	DESIGN
// This is now handled earlier in this method.	WITHOUT_CLASSIFICATION	0.9785499329067476	WITHOUT_CLASSIFICATION	0.021450067093252475	DESIGN
// -- Loader implementation --	WITHOUT_CLASSIFICATION	0.9999945469408977	WITHOUT_CLASSIFICATION	5.453059102300119E-6	DESIGN
// -- Loader overrides --	WITHOUT_CLASSIFICATION	0.9999979506772113	WITHOUT_CLASSIFICATION	2.0493227886329607E-6	DESIGN
// (NOT (IS_NULL a b) ) => (IS_NOT_NULL a b)	WITHOUT_CLASSIFICATION	0.9999830033759859	WITHOUT_CLASSIFICATION	1.6996624014091957E-5	DESIGN
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.9999111950941556	WITHOUT_CLASSIFICATION	8.880490584444047E-5	DESIGN
// meant to handle dynamic instantiation queries...	WITHOUT_CLASSIFICATION	0.9999938423715036	WITHOUT_CLASSIFICATION	6.157628496436928E-6	DESIGN
// --- Query translator methods ---	WITHOUT_CLASSIFICATION	0.9999975401329378	WITHOUT_CLASSIFICATION	2.459867062159189E-6	DESIGN
// -- Implementation private methods --	WITHOUT_CLASSIFICATION	0.9999854657506719	WITHOUT_CLASSIFICATION	1.4534249327918177E-5	DESIGN
//deduplicate unique constraints sharing the same columns //this is needed by Hibernate Annotations since it creates automagically // unique constraints for the user	WITHOUT_CLASSIFICATION	0.9999835853770994	WITHOUT_CLASSIFICATION	1.6414622900492328E-5	DESIGN
// Try to find out the name of the primary key to create it as identity if the IdentityGenerator is used	WITHOUT_CLASSIFICATION	0.9981697063935074	WITHOUT_CLASSIFICATION	0.001830293606492495	DESIGN
// to support dialects that have their own identity data type	WITHOUT_CLASSIFICATION	0.9999934222644944	WITHOUT_CLASSIFICATION	6.577735505682728E-6	DESIGN
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999997293569174	WITHOUT_CLASSIFICATION	2.7064308261581556E-7	DESIGN
//used also for generation of FK names!	WITHOUT_CLASSIFICATION	0.9926294305266394	WITHOUT_CLASSIFICATION	0.007370569473360605	DESIGN
//usually useless	WITHOUT_CLASSIFICATION	0.9999961917364568	WITHOUT_CLASSIFICATION	3.8082635430947898E-6	DESIGN
// added this caching as I noticed that getType() is being called multiple times...	WITHOUT_CLASSIFICATION	0.9983707935817441	WITHOUT_CLASSIFICATION	0.0016292064182560017	DESIGN
//do not add unique constraint on DB not supporting unique and nullable columns	WITHOUT_CLASSIFICATION	0.9999999302072086	WITHOUT_CLASSIFICATION	6.979279146879701E-8	DESIGN
//for backward compatibility, disable this:	WITHOUT_CLASSIFICATION	0.9993125003663296	WITHOUT_CLASSIFICATION	6.874996336704676E-4	DESIGN
//may be final //may be final //may be final	WITHOUT_CLASSIFICATION	0.9998566820905253	WITHOUT_CLASSIFICATION	1.433179094746397E-4	DESIGN
//may be final	WITHOUT_CLASSIFICATION	0.9997819504117489	WITHOUT_CLASSIFICATION	2.1804958825109546E-4	DESIGN
// may be final	WITHOUT_CLASSIFICATION	0.999975274075928	WITHOUT_CLASSIFICATION	2.4725924071916613E-5	DESIGN
// Custom SQL	WITHOUT_CLASSIFICATION	0.9999984301770075	WITHOUT_CLASSIFICATION	1.5698229924490286E-6	DESIGN
//Primary key constraint	WITHOUT_CLASSIFICATION	0.9999756669694859	WITHOUT_CLASSIFICATION	2.433303051412574E-5	DESIGN
// the root of the incoming property path matched one // of the embedded composite identifier properties	WITHOUT_CLASSIFICATION	0.9999999083248239	WITHOUT_CLASSIFICATION	9.167517617607162E-8	DESIGN
// ignore it...	WITHOUT_CLASSIFICATION	0.9999974386290496	WITHOUT_CLASSIFICATION	2.5613709504202575E-6	DESIGN
//flat recursive algorithm	WITHOUT_CLASSIFICATION	0.999977657238367	WITHOUT_CLASSIFICATION	2.234276163302901E-5	DESIGN
//an identifier mapper => getKey will be included in the getNonDuplicatedPropertyIterator() //and checked later, so it needs to be excluded	WITHOUT_CLASSIFICATION	0.9999889031219512	WITHOUT_CLASSIFICATION	1.1096878048720688E-5	DESIGN
//if the hibernate-mapping did not specify a schema/catalog, use the defaults //specified by properties - but note that if the schema/catalog were specified //in hibernate-mapping, or as params, they will already be initialized and //will override the values set here (they are in identifierGeneratorProperties)	WITHOUT_CLASSIFICATION	0.999999102770959	WITHOUT_CLASSIFICATION	8.97229041013543E-7	DESIGN
//pass the entity-name, if not a collection-id	WITHOUT_CLASSIFICATION	0.999997805727872	WITHOUT_CLASSIFICATION	2.1942721280527473E-6	DESIGN
// Custom SQL	WITHOUT_CLASSIFICATION	0.9999984301770075	WITHOUT_CLASSIFICATION	1.5698229924490286E-6	DESIGN
//Primary key constraint	WITHOUT_CLASSIFICATION	0.9999756669694859	WITHOUT_CLASSIFICATION	2.433303051412574E-5	DESIGN
//pass the column name (a generated id almost always has a single column)	WITHOUT_CLASSIFICATION	0.9999851643471899	WITHOUT_CLASSIFICATION	1.4835652810263513E-5	DESIGN
//needed to satisfy KeyValue	WITHOUT_CLASSIFICATION	0.9999014123593266	WITHOUT_CLASSIFICATION	9.85876406733546E-5	DESIGN
// empty means no scoping	WITHOUT_CLASSIFICATION	0.9999536430257003	WITHOUT_CLASSIFICATION	4.635697429973247E-5	DESIGN
// index should be last column listed	WITHOUT_CLASSIFICATION	0.9999918146293831	WITHOUT_CLASSIFICATION	8.18537061686664E-6	DESIGN
//if it is a formula index, use the element columns in the PK	WITHOUT_CLASSIFICATION	0.9999838723239755	WITHOUT_CLASSIFICATION	1.612767602457214E-5	DESIGN
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns	WITHOUT_CLASSIFICATION	0.9999977737297728	WITHOUT_CLASSIFICATION	2.2262702271635153E-6	DESIGN
/*ArrayList list = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999708621290301	WITHOUT_CLASSIFICATION	2.9137870969872063E-5	DESIGN
// }	WITHOUT_CLASSIFICATION	0.9999968740238281	WITHOUT_CLASSIFICATION	3.1259761718473653E-6	DESIGN
// no foreign key element of for a one-to-many	WITHOUT_CLASSIFICATION	0.9999998221930156	WITHOUT_CLASSIFICATION	1.7780698432037803E-7	DESIGN
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9999105084002037	DESIGN	8.949159979638975E-5	WITHOUT_CLASSIFICATION
// the case of a foreign key to something other than the pk is handled in createPropertyRefConstraints	WITHOUT_CLASSIFICATION	0.9999889592631391	WITHOUT_CLASSIFICATION	1.1040736860875325E-5	DESIGN
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9999105084002037	DESIGN	8.949159979638975E-5	WITHOUT_CLASSIFICATION
// if the property mapping consists of all formulas,  // make it non-updateable	WITHOUT_CLASSIFICATION	0.9999992755473377	WITHOUT_CLASSIFICATION	7.244526624035076E-7	DESIGN
//columnUpdateability.length==0 ||	WITHOUT_CLASSIFICATION	0.9995983328886621	WITHOUT_CLASSIFICATION	4.016671113378771E-4	DESIGN
// if the property mapping consists of all formulas,  // make it insertable	WITHOUT_CLASSIFICATION	0.9999996057081996	WITHOUT_CLASSIFICATION	3.9429180049246653E-7	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998115251740848	WITHOUT_CLASSIFICATION	1.8847482591532091E-4	DESIGN
// expected type is intrinsic here...	WITHOUT_CLASSIFICATION	0.9999962191767563	WITHOUT_CLASSIFICATION	3.7808232438311286E-6	DESIGN
//}	WITHOUT_CLASSIFICATION	0.9999345062034646	WITHOUT_CLASSIFICATION	6.54937965354434E-5	DESIGN
//}	WITHOUT_CLASSIFICATION	0.9999345062034646	WITHOUT_CLASSIFICATION	6.54937965354434E-5	DESIGN
//return memberPersister.getPropertyType(propertyName);	WITHOUT_CLASSIFICATION	0.9999960536347486	WITHOUT_CLASSIFICATION	3.946365251334654E-6	DESIGN
//return memberPersister.toColumns(alias, propertyName);	WITHOUT_CLASSIFICATION	0.9999946123943549	WITHOUT_CLASSIFICATION	5.3876056449953014E-6	DESIGN
//return memberPersister.getType();	WITHOUT_CLASSIFICATION	0.9999887963841119	WITHOUT_CLASSIFICATION	1.1203615888139363E-5	DESIGN
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9999666216753086	WITHOUT_CLASSIFICATION	3.337832469143754E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999609652327096	WITHOUT_CLASSIFICATION	3.903476729039761E-5	DESIGN
//instanceof AssociationType;	WITHOUT_CLASSIFICATION	0.9999281641237002	WITHOUT_CLASSIFICATION	7.18358762998525E-5	DESIGN
// we need to determine the best way to know that two joinables // represent a single many-to-many...	WITHOUT_CLASSIFICATION	0.9884302947010536	WITHOUT_CLASSIFICATION	0.011569705298946407	DESIGN
//strip leading ','	WITHOUT_CLASSIFICATION	0.9999495318896189	WITHOUT_CLASSIFICATION	5.0468110381166256E-5	DESIGN
//public boolean isSubselectLoadable();	WITHOUT_CLASSIFICATION	0.9999996731862015	WITHOUT_CLASSIFICATION	3.2681379854681796E-7	DESIGN
// KEY	WITHOUT_CLASSIFICATION	0.9999928080156515	WITHOUT_CLASSIFICATION	7.191984348486441E-6	DESIGN
//columns	WITHOUT_CLASSIFICATION	0.9999856821504685	WITHOUT_CLASSIFICATION	1.4317849531508822E-5	DESIGN
//SQL statements	WITHOUT_CLASSIFICATION	0.9999988746317088	WITHOUT_CLASSIFICATION	1.1253682912356758E-6	DESIGN
//extra information about the element type	WITHOUT_CLASSIFICATION	0.9999997344575491	WITHOUT_CLASSIFICATION	2.6554245089499463E-7	DESIGN
//types	WITHOUT_CLASSIFICATION	0.9999645150792839	WITHOUT_CLASSIFICATION	3.5484920716106154E-5	DESIGN
// custom sql	WITHOUT_CLASSIFICATION	0.9999985327525674	WITHOUT_CLASSIFICATION	1.467247432509447E-6	DESIGN
//private final String unquotedIdentifierColumnName;	WITHOUT_CLASSIFICATION	0.9999999088489021	WITHOUT_CLASSIFICATION	9.115109790550464E-8	DESIGN
// dynamic filters specifically for many-to-many inside the collection	WITHOUT_CLASSIFICATION	0.9999998334200582	WITHOUT_CLASSIFICATION	1.6657994173151695E-7	DESIGN
// dynamic filters for the collection	WITHOUT_CLASSIFICATION	0.999994780327418	WITHOUT_CLASSIFICATION	5.219672582033214E-6	DESIGN
// NativeSQL: collect key column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999983087961957	WITHOUT_CLASSIFICATION	1.6912038043375471E-6	DESIGN
//unquotedKeyColumnNames = StringHelper.unQuote(keyColumnAliases);	WITHOUT_CLASSIFICATION	0.9999999080657506	WITHOUT_CLASSIFICATION	9.193424941786756E-8	DESIGN
//ELEMENT	WITHOUT_CLASSIFICATION	0.9998176157373764	WITHOUT_CLASSIFICATION	1.8238426262355036E-4	DESIGN
// NativeSQL: collect element column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999977422110742	WITHOUT_CLASSIFICATION	2.2577889258310416E-6	DESIGN
// INDEX AND ROW SELECT	WITHOUT_CLASSIFICATION	0.9999850979239262	WITHOUT_CLASSIFICATION	1.4902076073744823E-5	DESIGN
// NativeSQL: collect index column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999994058859859	WITHOUT_CLASSIFICATION	5.94114014131795E-7	DESIGN
//unquotedIdentifierColumnName = identifierColumnAlias;	WITHOUT_CLASSIFICATION	0.9999996778218405	WITHOUT_CLASSIFICATION	3.22178159412093E-7	DESIGN
//unquotedIdentifierColumnName = null;	WITHOUT_CLASSIFICATION	0.9999998059434133	WITHOUT_CLASSIFICATION	1.9405658664699477E-7	DESIGN
//GENERATE THE SQL:	WITHOUT_CLASSIFICATION	0.9998764819150315	WITHOUT_CLASSIFICATION	1.2351808496849755E-4	DESIGN
// for non-arrays, we don't need to know the element class //elementType.returnedClass();	WITHOUT_CLASSIFICATION	0.9999870926224421	WITHOUT_CLASSIFICATION	1.290737755790908E-5	DESIGN
//not all classpersisters implement PropertyMapping!	WITHOUT_CLASSIFICATION	0.9997024149367008	WITHOUT_CLASSIFICATION	2.9758506329917764E-4	DESIGN
// Handle any filters applied to this collection	WITHOUT_CLASSIFICATION	0.999501749368201	WITHOUT_CLASSIFICATION	4.98250631799047E-4	DESIGN
// Handle any filters applied to this collection for many-to-many	WITHOUT_CLASSIFICATION	0.9997262991438771	WITHOUT_CLASSIFICATION	2.7370085612287483E-4	DESIGN
//if there is a user-specified loader, return that //TODO: filters!?	WITHOUT_CLASSIFICATION	0.9996802481072702	DESIGN	3.197518927297771E-4	WITHOUT_CLASSIFICATION
// Take care of any entities that might have // been evicted!	WITHOUT_CLASSIFICATION	0.9999833275178595	WITHOUT_CLASSIFICATION	1.6672482140500256E-5	DESIGN
//strip leading ','	WITHOUT_CLASSIFICATION	0.9999495318896189	WITHOUT_CLASSIFICATION	5.0468110381166256E-5	DESIGN
// Run a subquery loader	WITHOUT_CLASSIFICATION	0.9999921892706859	WITHOUT_CLASSIFICATION	7.81072931406192E-6	DESIGN
//needed by arrays	WITHOUT_CLASSIFICATION	0.9999843165526549	WITHOUT_CLASSIFICATION	1.568344734516331E-5	DESIGN
//TODO: something with formulas...	WITHOUT_CLASSIFICATION	0.9992257318117805	DESIGN	7.742681882195406E-4	WITHOUT_CLASSIFICATION
//an assertion	WITHOUT_CLASSIFICATION	0.9999984453360556	WITHOUT_CLASSIFICATION	1.554663944244852E-6	DESIGN
// Remove all the old entries	WITHOUT_CLASSIFICATION	0.9999847892459915	WITHOUT_CLASSIFICATION	1.5210754008351524E-5	DESIGN
//create all the new entries	WITHOUT_CLASSIFICATION	0.9999900149946116	WITHOUT_CLASSIFICATION	9.985005388533116E-6	DESIGN
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9999666216753086	WITHOUT_CLASSIFICATION	3.337832469143754E-5	DESIGN
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9999666216753086	WITHOUT_CLASSIFICATION	3.337832469143754E-5	DESIGN
//delete all the deleted entries	WITHOUT_CLASSIFICATION	0.9999983157802234	WITHOUT_CLASSIFICATION	1.6842197766549503E-6	DESIGN
//insert all the new entries	WITHOUT_CLASSIFICATION	0.9999951141527739	WITHOUT_CLASSIFICATION	4.885847226163625E-6	DESIGN
//==elementType ??	WITHOUT_CLASSIFICATION	0.9991895702567735	WITHOUT_CLASSIFICATION	8.104297432265501E-4	DESIGN
//update all the modified entries	WITHOUT_CLASSIFICATION	0.9999966603579398	WITHOUT_CLASSIFICATION	3.3396420602858053E-6	DESIGN
//identifier collections not supported for 1-to-many	WITHOUT_CLASSIFICATION	0.9999991739967887	WITHOUT_CLASSIFICATION	8.260032111498211E-7	DESIGN
// update removed rows fks to null	WITHOUT_CLASSIFICATION	0.998045677830831	WITHOUT_CLASSIFICATION	0.0019543221691690218	DESIGN
// will still be issued when it used to be null	WITHOUT_CLASSIFICATION	0.9253098398248661	WITHOUT_CLASSIFICATION	0.07469016017513387	DESIGN
// now update all changed or added rows fks	WITHOUT_CLASSIFICATION	0.9999975755673399	WITHOUT_CLASSIFICATION	2.4244326601325644E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999609652327096	WITHOUT_CLASSIFICATION	3.903476729039761E-5	DESIGN
//use suffix for the entity columns	WITHOUT_CLASSIFICATION	0.999875660608996	WITHOUT_CLASSIFICATION	1.2433939100402647E-4	DESIGN
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9998901976723078	WITHOUT_CLASSIFICATION	1.0980232769223251E-4	DESIGN
//private final String rootTableName;	WITHOUT_CLASSIFICATION	0.9999999052488084	WITHOUT_CLASSIFICATION	9.475119161972504E-8	DESIGN
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9998266902365782	WITHOUT_CLASSIFICATION	1.7330976342183084E-4	DESIGN
//Custom SQL	WITHOUT_CLASSIFICATION	0.9999889913127602	WITHOUT_CLASSIFICATION	1.1008687239853462E-5	DESIGN
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9998901976723078	WITHOUT_CLASSIFICATION	1.0980232769223251E-4	DESIGN
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.999997037172457	WITHOUT_CLASSIFICATION	2.9628275429630625E-6	DESIGN
// This could also just be true all the time...	WITHOUT_CLASSIFICATION	0.9982442584641109	WITHOUT_CLASSIFICATION	0.0017557415358891064	DESIGN
//chop the last union (all)	WITHOUT_CLASSIFICATION	0.9999828544770465	WITHOUT_CLASSIFICATION	1.714552295353946E-5	DESIGN
//TODO: check this....	WITHOUT_CLASSIFICATION	0.9999718348634236	DESIGN	2.8165136576453616E-5	WITHOUT_CLASSIFICATION
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9998266902365782	WITHOUT_CLASSIFICATION	1.7330976342183084E-4	DESIGN
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9999129258083833	WITHOUT_CLASSIFICATION	8.707419161675576E-5	DESIGN
// the closure of all properties in the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999972364994454	WITHOUT_CLASSIFICATION	2.7635005546280495E-6	DESIGN
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999924182375652	WITHOUT_CLASSIFICATION	7.581762434731285E-6	DESIGN
// subclass discrimination works by assigning particular // values to certain combinations of null primary key // values in the outer join using an SQL CASE	WITHOUT_CLASSIFICATION	0.999999970830312	WITHOUT_CLASSIFICATION	2.916968790691162E-8	DESIGN
//MULTITABLES	WITHOUT_CLASSIFICATION	0.9996561976926601	WITHOUT_CLASSIFICATION	3.4380230733983683E-4	DESIGN
// Custom sql	WITHOUT_CLASSIFICATION	0.9999978795154375	WITHOUT_CLASSIFICATION	2.1204845624598525E-6	DESIGN
// subclass closure properties	WITHOUT_CLASSIFICATION	0.9999922107393716	WITHOUT_CLASSIFICATION	7.789260628324274E-6	DESIGN
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.999978082477291	WITHOUT_CLASSIFICATION	2.191752270892596E-5	DESIGN
//( (Column) model.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999908890660221	WITHOUT_CLASSIFICATION	9.11093397784218E-6	DESIGN
//( (Column) sc.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999965231178998	WITHOUT_CLASSIFICATION	3.4768821002084133E-6	DESIGN
// don't need subclass tables, because they can't appear in conditions	WITHOUT_CLASSIFICATION	0.9999934953167475	WITHOUT_CLASSIFICATION	6.504683252576483E-6	DESIGN
// special case where we need to force incloude all subclass joins	WITHOUT_CLASSIFICATION	0.9999061609708705	WITHOUT_CLASSIFICATION	9.383902912952316E-5	DESIGN
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9998901976723078	WITHOUT_CLASSIFICATION	1.0980232769223251E-4	DESIGN
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9999129258083833	WITHOUT_CLASSIFICATION	8.707419161675576E-5	DESIGN
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999924182375652	WITHOUT_CLASSIFICATION	7.581762434731285E-6	DESIGN
//get em on the second pass!	WITHOUT_CLASSIFICATION	0.9999933225273994	WITHOUT_CLASSIFICATION	6.677472600610594E-6	DESIGN
// now look up the object we are really interested in! // (this lets us correctly handle proxies and multi-row // or multi-column queries)	WITHOUT_CLASSIFICATION	0.9991557888561223	WITHOUT_CLASSIFICATION	8.44211143877684E-4	DESIGN
// discriminator column	WITHOUT_CLASSIFICATION	0.9999639528862342	WITHOUT_CLASSIFICATION	3.604711376575812E-5	DESIGN
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9998266902365782	WITHOUT_CLASSIFICATION	1.7330976342183084E-4	DESIGN
//private final Map propertyTableNumbersByName = new HashMap();	WITHOUT_CLASSIFICATION	0.9999983320341109	WITHOUT_CLASSIFICATION	1.6679658890684468E-6	DESIGN
// CLASS + TABLE	WITHOUT_CLASSIFICATION	0.9999581277400414	WITHOUT_CLASSIFICATION	4.187225995854532E-5	DESIGN
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999697027060397	WITHOUT_CLASSIFICATION	3.0297293960339745E-5	DESIGN
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999553764318262	WITHOUT_CLASSIFICATION	4.46235681737848E-5	DESIGN
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.999978082477291	WITHOUT_CLASSIFICATION	2.191752270892596E-5	DESIGN
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.999997037172457	WITHOUT_CLASSIFICATION	2.9628275429630625E-6	DESIGN
// JOINS	WITHOUT_CLASSIFICATION	0.9999981183710421	WITHOUT_CLASSIFICATION	1.881628957855739E-6	DESIGN
//propertyTableNumbersByName.put( prop.getName(), join );	WITHOUT_CLASSIFICATION	0.9999983635777411	WITHOUT_CLASSIFICATION	1.6364222589085106E-6	DESIGN
//Access cached SQL	WITHOUT_CLASSIFICATION	0.9999888716050013	WITHOUT_CLASSIFICATION	1.1128394998691473E-5	DESIGN
//figure out which tables need to be fetched	WITHOUT_CLASSIFICATION	0.9999859147183391	WITHOUT_CLASSIFICATION	1.408528166092174E-5	DESIGN
//figure out which columns are needed	WITHOUT_CLASSIFICATION	0.9999409997777431	WITHOUT_CLASSIFICATION	5.900022225682885E-5	DESIGN
//figure out which formulas are needed	WITHOUT_CLASSIFICATION	0.9999892993824582	WITHOUT_CLASSIFICATION	1.0700617541725407E-5	DESIGN
//render the SQL	WITHOUT_CLASSIFICATION	0.999947965257571	WITHOUT_CLASSIFICATION	5.2034742428890627E-5	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998115251740848	WITHOUT_CLASSIFICATION	1.8847482591532091E-4	DESIGN
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999281771378944	WITHOUT_CLASSIFICATION	7.182286210558823E-5	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999921446093955	WITHOUT_CLASSIFICATION	7.855390604518883E-6	DESIGN
// The optional SQL string defined in the where attribute	WITHOUT_CLASSIFICATION	0.9999554251420096	WITHOUT_CLASSIFICATION	4.457485799040517E-5	DESIGN
//information about lazy properties of this class	WITHOUT_CLASSIFICATION	0.9999108498252941	WITHOUT_CLASSIFICATION	8.915017470590857E-5	DESIGN
//information about all properties in class hierarchy	WITHOUT_CLASSIFICATION	0.9999942238414568	WITHOUT_CLASSIFICATION	5.77615854320597E-6	DESIGN
//information about all columns/formulas in class hierarchy	WITHOUT_CLASSIFICATION	0.9999983231520632	WITHOUT_CLASSIFICATION	1.6768479368275252E-6	DESIGN
// dynamic filters attached to the class-level	WITHOUT_CLASSIFICATION	0.9999937744646082	WITHOUT_CLASSIFICATION	6.225535391802433E-6	DESIGN
// SQL strings	WITHOUT_CLASSIFICATION	0.9999957025070454	WITHOUT_CLASSIFICATION	4.297492954691042E-6	DESIGN
// for objects that came in via update()	WITHOUT_CLASSIFICATION	0.9999797910744622	WITHOUT_CLASSIFICATION	2.020892553786636E-5	DESIGN
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999553764318262	WITHOUT_CLASSIFICATION	4.46235681737848E-5	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999921446093955	WITHOUT_CLASSIFICATION	7.855390604518883E-6	DESIGN
// IDENTIFIER	WITHOUT_CLASSIFICATION	0.9999928447362283	WITHOUT_CLASSIFICATION	7.1552637717622E-6	DESIGN
// VERSION	WITHOUT_CLASSIFICATION	0.9999988473188683	WITHOUT_CLASSIFICATION	1.1526811317240601E-6	DESIGN
//WHERE STRING	WITHOUT_CLASSIFICATION	0.9999400536965839	WITHOUT_CLASSIFICATION	5.9946303416171716E-5	DESIGN
// SUBCLASS PROPERTY CLOSURE	WITHOUT_CLASSIFICATION	0.9997079134460045	WITHOUT_CLASSIFICATION	2.9208655399548474E-4	DESIGN
//before add :-)	WITHOUT_CLASSIFICATION	0.999753608905867	WITHOUT_CLASSIFICATION	2.463910941329596E-4	DESIGN
// Handle any filters applied to the class level	WITHOUT_CLASSIFICATION	0.9999709895253648	WITHOUT_CLASSIFICATION	2.9010474635242278E-5	DESIGN
// only one-to-one is lazy fetched	WITHOUT_CLASSIFICATION	0.9999820977679803	WITHOUT_CLASSIFICATION	1.7902232019698524E-5	DESIGN
//note early exit here:	WITHOUT_CLASSIFICATION	0.9998896027114067	WITHOUT_CLASSIFICATION	1.1039728859323837E-4	DESIGN
// object have been loaded with setReadOnly(true); HHH-2236	WITHOUT_CLASSIFICATION	0.9999989452736497	WITHOUT_CLASSIFICATION	1.0547263502579975E-6	DESIGN
// NOTE: this assumes something about how propertySelectFragment is implemented by the subclass!	WITHOUT_CLASSIFICATION	0.6482677196135977	WITHOUT_CLASSIFICATION	0.3517322803864023	DESIGN
//strip leading ", "	WITHOUT_CLASSIFICATION	0.9999828531046083	WITHOUT_CLASSIFICATION	1.7146895391701472E-5	DESIGN
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999724918700873	WITHOUT_CLASSIFICATION	2.7508129912712835E-5	DESIGN
//otherwise return the "hydrated" state (ie. associations are not resolved)	WITHOUT_CLASSIFICATION	0.9999970034391477	WITHOUT_CLASSIFICATION	2.996560852403438E-6	DESIGN
//null owner ok??	WITHOUT_CLASSIFICATION	0.9997795733974357	WITHOUT_CLASSIFICATION	2.2042660256423017E-4	DESIGN
// null sql means that the only lazy properties // are shared PK one-to-one associations which are // handled differently in the Type#nullSafeGet code...	WITHOUT_CLASSIFICATION	0.9998393686183484	WITHOUT_CLASSIFICATION	1.6063138165161258E-4	DESIGN
// Create a new FROM node for the referenced class.	WITHOUT_CLASSIFICATION	0.9999933567455214	WITHOUT_CLASSIFICATION	6.643254478661219E-6	DESIGN
// the difficulty here is exactly what do we update in order to // force the version to be incremented in the db...	WITHOUT_CLASSIFICATION	0.989522694786674	WITHOUT_CLASSIFICATION	0.010477305213326033	DESIGN
// performance op to avoid the array search	WITHOUT_CLASSIFICATION	0.999998077890447	WITHOUT_CLASSIFICATION	1.922109552943011E-6	DESIGN
// properly handle property-ref-based associations	WITHOUT_CLASSIFICATION	0.9994618649404141	WITHOUT_CLASSIFICATION	5.381350595859003E-4	DESIGN
//Enable for HHH-440, which we don't like:	WITHOUT_CLASSIFICATION	0.9999352788090343	WITHOUT_CLASSIFICATION	6.472119096564151E-5	DESIGN
// ALIASES	WITHOUT_CLASSIFICATION	0.999997576490786	WITHOUT_CLASSIFICATION	2.4235092139153746E-6	DESIGN
// aliases named identifier ( alias.idname )	WITHOUT_CLASSIFICATION	0.9999991968768456	WITHOUT_CLASSIFICATION	8.031231543681437E-7	DESIGN
// aliases for composite-id's	WITHOUT_CLASSIFICATION	0.999999861226264	WITHOUT_CLASSIFICATION	1.3877373585903036E-7	DESIGN
// Fetch embedded identifiers propertynames from the "virtual" identifier component	WITHOUT_CLASSIFICATION	0.9999997309407858	WITHOUT_CLASSIFICATION	2.6905921424854245E-7	DESIGN
// embedded composite ids ( alias.idname1, alias.idname2 )	WITHOUT_CLASSIFICATION	0.9999996279003326	WITHOUT_CLASSIFICATION	3.7209966739720786E-7	DESIGN
// TODO: skip formulas?	WITHOUT_CLASSIFICATION	0.9991321299018582	DESIGN	8.678700981417121E-4	WITHOUT_CLASSIFICATION
//don't need filters for the static loaders	WITHOUT_CLASSIFICATION	0.9999905207881777	WITHOUT_CLASSIFICATION	9.479211822248703E-6	DESIGN
//do two passes, for collection property-ref!	WITHOUT_CLASSIFICATION	0.9998130201519613	WITHOUT_CLASSIFICATION	1.8697984803872644E-4	DESIGN
// select the correct row by either pk or rowid	WITHOUT_CLASSIFICATION	0.9999899188501183	WITHOUT_CLASSIFICATION	1.0081149881711514E-5	DESIGN
//TODO: eventually, rowIdName[j]	WITHOUT_CLASSIFICATION	0.9930604211758773	DESIGN	0.0069395788241226174	WITHOUT_CLASSIFICATION
// this is a property of the table, which we are updating	WITHOUT_CLASSIFICATION	0.9926938065798848	WITHOUT_CLASSIFICATION	0.0073061934201151596	DESIGN
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9999965298460454	WITHOUT_CLASSIFICATION	3.4701539545647837E-6	DESIGN
// we are using "all" or "dirty" property-based optimistic locking	WITHOUT_CLASSIFICATION	0.9993711295173606	WITHOUT_CLASSIFICATION	6.288704826393789E-4	DESIGN
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9369869436390387	WITHOUT_CLASSIFICATION	0.06301305636096133	DESIGN
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999976129870033	WITHOUT_CLASSIFICATION	2.3870129966850624E-6	DESIGN
// add normal properties	WITHOUT_CLASSIFICATION	0.9999959342725112	WITHOUT_CLASSIFICATION	4.065727488711494E-6	DESIGN
// add the discriminator	WITHOUT_CLASSIFICATION	0.9999938777085581	WITHOUT_CLASSIFICATION	6.122291441929798E-6	DESIGN
// more specifically : "? [op] datetime" //      1) if the operator is MINUS, the param needs to be of //          some datetime type //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.9961332145868891	WITHOUT_CLASSIFICATION	0.0038667854131109805	DESIGN
// add normal properties	WITHOUT_CLASSIFICATION	0.9999959342725112	WITHOUT_CLASSIFICATION	4.065727488711494E-6	DESIGN
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999976129870033	WITHOUT_CLASSIFICATION	2.3870129966850624E-6	DESIGN
// add the discriminator	WITHOUT_CLASSIFICATION	0.9999938777085581	WITHOUT_CLASSIFICATION	6.122291441929798E-6	DESIGN
// add the primary key	WITHOUT_CLASSIFICATION	0.9999896238691206	WITHOUT_CLASSIFICATION	1.0376130879393012E-5	DESIGN
// delegate already handles PK columns	WITHOUT_CLASSIFICATION	0.9999978457864774	WITHOUT_CLASSIFICATION	2.154213522513711E-6	DESIGN
// we can't batch joined inserts, *especially* not if it is an identity insert; // nor can we batch statements where the expectation is based on an output param	WITHOUT_CLASSIFICATION	0.999999853813719	WITHOUT_CLASSIFICATION	1.4618628091208266E-7	DESIGN
// Render the SQL query	WITHOUT_CLASSIFICATION	0.9999807239927134	WITHOUT_CLASSIFICATION	1.927600728657886E-5	DESIGN
// Write the values of fields onto the prepared statement - we MUST use the state at the time the // insert was issued (cos of foreign key constraints). Not necessarily the object's current state	WITHOUT_CLASSIFICATION	0.9999997167615964	WITHOUT_CLASSIFICATION	2.8323840359359647E-7	DESIGN
// TODO : shouldnt inserts be Expectations.NONE?	WITHOUT_CLASSIFICATION	0.9973255644847007	DESIGN	0.0026744355152994587	WITHOUT_CLASSIFICATION
//don't bother trying to update, we know there is no row there yet	WITHOUT_CLASSIFICATION	0.9992523761261614	WITHOUT_CLASSIFICATION	7.476238738387431E-4	DESIGN
//if all fields are null, we might need to delete existing row	WITHOUT_CLASSIFICATION	0.9999850497962857	WITHOUT_CLASSIFICATION	1.4950203714183523E-5	DESIGN
//there is probably a row there, so try to update //if no rows were updated, we will find out	WITHOUT_CLASSIFICATION	0.9969560363609316	WITHOUT_CLASSIFICATION	0.003043963639068335	DESIGN
//note: updates to joined tables can't be batched...	WITHOUT_CLASSIFICATION	0.9999908336648649	WITHOUT_CLASSIFICATION	9.166335135015003E-6	DESIGN
// starting index	WITHOUT_CLASSIFICATION	0.9999883162626174	WITHOUT_CLASSIFICATION	1.1683737382519714E-5	DESIGN
//Now write the values of fields onto the prepared statement	WITHOUT_CLASSIFICATION	0.9998792209868614	WITHOUT_CLASSIFICATION	1.2077901313864304E-4	DESIGN
// Write any appropriate versioning conditional parameters	WITHOUT_CLASSIFICATION	0.9999999767617236	WITHOUT_CLASSIFICATION	2.323827640525321E-8	DESIGN
//Render the SQL query	WITHOUT_CLASSIFICATION	0.9999211295208661	WITHOUT_CLASSIFICATION	7.887047913388277E-5	DESIGN
// Do the key. The key is immutable so we can use the _current_ object state - not necessarily // the state at the time the delete was issued	WITHOUT_CLASSIFICATION	0.9999873683855328	WITHOUT_CLASSIFICATION	1.2631614467159424E-5	DESIGN
// We should use the _current_ object state (ie. after any updates that occurred during flush)	WITHOUT_CLASSIFICATION	0.9999993720396603	WITHOUT_CLASSIFICATION	6.279603398041422E-7	DESIGN
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9998559628903958	WITHOUT_CLASSIFICATION	1.440371096042417E-4	DESIGN
//note: dirtyFields==null means we had no snapshot, and we couldn't get one using select-before-update //	WITHOUT_CLASSIFICATION	0.9991638205695048	WITHOUT_CLASSIFICATION	8.361794304951566E-4	DESIGN
// more specifically : "datetime [op] ?" //      1) if the operator is MINUS, we really cannot determine //          the expected type as either another datetime or //          numeric would be valid //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.6517420950661773	DESIGN	0.3482579049338225	WITHOUT_CLASSIFICATION
// For the case of dynamic-update="true", we need to generate the UPDATE SQL	WITHOUT_CLASSIFICATION	0.9998838952305186	WITHOUT_CLASSIFICATION	1.1610476948140516E-4	DESIGN
// don't need to check laziness (dirty checking algorithm handles that)	WITHOUT_CLASSIFICATION	0.9928966941034237	WITHOUT_CLASSIFICATION	0.007103305896576312	DESIGN
// For the case of dynamic-update="false", or no snapshot, we use the static SQL	WITHOUT_CLASSIFICATION	0.9999992221274431	WITHOUT_CLASSIFICATION	7.778725567867222E-7	DESIGN
// if not "get", then try "is"	WITHOUT_CLASSIFICATION	0.9999989414153312	WITHOUT_CLASSIFICATION	1.0585846688779236E-6	DESIGN
// Now update only the tables with dirty properties (and the table with the version number)	WITHOUT_CLASSIFICATION	0.9999999730239416	WITHOUT_CLASSIFICATION	2.6976058357514186E-8	DESIGN
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999961470549786	WITHOUT_CLASSIFICATION	3.852945021380608E-6	DESIGN
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999961470549786	WITHOUT_CLASSIFICATION	3.852945021380608E-6	DESIGN
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999997622903124	WITHOUT_CLASSIFICATION	2.377096876726398E-7	DESIGN
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999997622903124	WITHOUT_CLASSIFICATION	2.377096876726398E-7	DESIGN
// not supported	WITHOUT_CLASSIFICATION	0.9998821060177409	WITHOUT_CLASSIFICATION	1.1789398225915637E-4	DESIGN
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9998559628903958	WITHOUT_CLASSIFICATION	1.440371096042417E-4	DESIGN
// we need to utilize dynamic delete statements	WITHOUT_CLASSIFICATION	0.9998911152709071	WITHOUT_CLASSIFICATION	1.088847290928607E-4	DESIGN
// otherwise, utilize the static delete statements	WITHOUT_CLASSIFICATION	0.9999994860267992	WITHOUT_CLASSIFICATION	5.139732007651958E-7	DESIGN
//just a performance opt!	WITHOUT_CLASSIFICATION	0.9999940348413732	WITHOUT_CLASSIFICATION	5.9651586268324315E-6	DESIGN
//just a performance opt!	WITHOUT_CLASSIFICATION	0.9999940348413732	WITHOUT_CLASSIFICATION	5.9651586268324315E-6	DESIGN
//all joins join to the pk of the driving table	WITHOUT_CLASSIFICATION	0.9999938266256687	WITHOUT_CLASSIFICATION	6.173374331305694E-6	DESIGN
//notice that we skip the first table; it is the driving table!	WITHOUT_CLASSIFICATION	0.9999576430790195	WITHOUT_CLASSIFICATION	4.235692098052893E-5	DESIGN
//we can inner join to superclass tables (the row MUST be there) //we can never inner join to subclass tables	WITHOUT_CLASSIFICATION	0.9999040479445881	WITHOUT_CLASSIFICATION	9.595205541199368E-5	DESIGN
//skip the driving table	WITHOUT_CLASSIFICATION	0.999994900493963	WITHOUT_CLASSIFICATION	5.099506037057634E-6	DESIGN
//get 'em in the right order (not that it really matters)	WITHOUT_CLASSIFICATION	0.9170374235723919	WITHOUT_CLASSIFICATION	0.08296257642760813	DESIGN
// here, we work under the following assumptions: //      ------------ valid cases -------------------------------------- //      1) datetime + {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      2) datetime - datetime : always results in a DOUBLE //      3) datetime - {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      ------------ invalid cases ------------------------------------ //      4) datetime + datetime //      5) {something other than datetime} - datetime //      6) datetime * {any type} //      7) datetime / {any type} //      8) {any type} / datetime // doing so allows us to properly handle parameters as either the left // or right side here in the majority of cases	WITHOUT_CLASSIFICATION	0.9990316727542304	WITHOUT_CLASSIFICATION	9.683272457696535E-4	DESIGN
//render the where and from parts	WITHOUT_CLASSIFICATION	0.9999028702910807	WITHOUT_CLASSIFICATION	9.712970891923584E-5	DESIGN
//we *could* regerate this inside each called method!	WITHOUT_CLASSIFICATION	0.9927802819982714	WITHOUT_CLASSIFICATION	0.007219718001728604	DESIGN
//now render the joins	WITHOUT_CLASSIFICATION	0.9996543306033232	WITHOUT_CLASSIFICATION	3.456693966767853E-4	DESIGN
// This will add the new from element to the origin.	WITHOUT_CLASSIFICATION	0.9997007667569041	WITHOUT_CLASSIFICATION	2.992332430959061E-4	DESIGN
//now render the select clause	WITHOUT_CLASSIFICATION	0.9999210014171296	WITHOUT_CLASSIFICATION	7.899858287045224E-5	DESIGN
//now tie it all together	WITHOUT_CLASSIFICATION	0.9999918695167765	WITHOUT_CLASSIFICATION	8.130483223454274E-6	DESIGN
//insert/update/delete SQL	WITHOUT_CLASSIFICATION	0.9999966508576691	WITHOUT_CLASSIFICATION	3.349142330886846E-6	DESIGN
//select SQL	WITHOUT_CLASSIFICATION	0.9999976591265036	WITHOUT_CLASSIFICATION	2.3408734962942418E-6	DESIGN
//no need to check laziness, dirty checking handles that	WITHOUT_CLASSIFICATION	0.9864447946137354	WITHOUT_CLASSIFICATION	0.01355520538626477	DESIGN
// Fully resolve the map reference, create implicit joins.	WITHOUT_CLASSIFICATION	0.9997403987300034	WITHOUT_CLASSIFICATION	2.5960126999658123E-4	DESIGN
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999568511853977	WITHOUT_CLASSIFICATION	4.314881460237572E-5	DESIGN
// The basic implementation is to simply use the node's text	WITHOUT_CLASSIFICATION	0.9999435721739516	WITHOUT_CLASSIFICATION	5.642782604843945E-5	DESIGN
// for dialects which are known to not support ANSI-SQL row-value-constructor syntax, // we should mutate the tree.	WITHOUT_CLASSIFICATION	0.9999831953520165	WITHOUT_CLASSIFICATION	1.680464798355171E-5	DESIGN
// Due to the complexity in initializing the SelectClause, do not generate one here. // If it is not found; simply return null... // // Also, do not cache since it gets generated well after we are created.	WITHOUT_CLASSIFICATION	0.9999983713166795	WITHOUT_CLASSIFICATION	1.6286833206636518E-6	DESIGN
// check the version unsaved-value, if appropriate	WITHOUT_CLASSIFICATION	0.9999999765515336	WITHOUT_CLASSIFICATION	2.3448466296176735E-8	DESIGN
// let this take precedence if defined, since it works for // assigned identifiers	WITHOUT_CLASSIFICATION	0.9999998623461704	WITHOUT_CLASSIFICATION	1.3765382961651307E-7	DESIGN
// check the id unsaved-value	WITHOUT_CLASSIFICATION	0.9999464711482825	WITHOUT_CLASSIFICATION	5.352885171750691E-5	DESIGN
// check to see if it is in the second-level cache	WITHOUT_CLASSIFICATION	0.9999966388728933	WITHOUT_CLASSIFICATION	3.36112710671078E-6	DESIGN
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.999958497564893	WITHOUT_CLASSIFICATION	4.150243510710515E-5	DESIGN
// For property references generate <tablealias>.<columnname> as <projectionalias>	WITHOUT_CLASSIFICATION	0.9999996318818386	WITHOUT_CLASSIFICATION	3.6811816147605755E-7	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999921446093955	WITHOUT_CLASSIFICATION	7.855390604518883E-6	DESIGN
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999724918700873	WITHOUT_CLASSIFICATION	2.7508129912712835E-5	DESIGN
//force immediate execution of the insert	WITHOUT_CLASSIFICATION	0.9999981204174161	WITHOUT_CLASSIFICATION	1.8795825838281215E-6	DESIGN
// If this from element is a collection and the path is a collection property (maxIndex, etc.) then // generate a sub-query.	WITHOUT_CLASSIFICATION	0.999989942976639	WITHOUT_CLASSIFICATION	1.005702336109724E-5	DESIGN
// entities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999808264875112	WITHOUT_CLASSIFICATION	1.917351248887321E-5	DESIGN
// collections ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999413085119	WITHOUT_CLASSIFICATION	5.86914881110987E-7	DESIGN
//cannot occur	WITHOUT_CLASSIFICATION	0.9999856796577432	WITHOUT_CLASSIFICATION	1.4320342256864531E-5	DESIGN
//cannot occur	WITHOUT_CLASSIFICATION	0.9999856796577432	WITHOUT_CLASSIFICATION	1.4320342256864531E-5	DESIGN
// only carry on if the method has no parameters	WITHOUT_CLASSIFICATION	0.9999994950319859	WITHOUT_CLASSIFICATION	5.049680141599695E-7	DESIGN
// try "get"	WITHOUT_CLASSIFICATION	0.9999993471352856	WITHOUT_CLASSIFICATION	6.528647143094392E-7	DESIGN
// do nothing...	WITHOUT_CLASSIFICATION	0.9990543328023818	WITHOUT_CLASSIFICATION	9.456671976182509E-4	DESIGN
// do nothing...	WITHOUT_CLASSIFICATION	0.9990543328023818	WITHOUT_CLASSIFICATION	9.456671976182509E-4	DESIGN
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9999730558800022	WITHOUT_CLASSIFICATION	2.6944119997814658E-5	DESIGN
// this page intentionally left blank :)	WITHOUT_CLASSIFICATION	0.9999880591828453	WITHOUT_CLASSIFICATION	1.1940817154776898E-5	DESIGN
// do not do anything	WITHOUT_CLASSIFICATION	0.9999168141293677	WITHOUT_CLASSIFICATION	8.318587063230247E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999609652327096	WITHOUT_CLASSIFICATION	3.903476729039761E-5	DESIGN
// ignore	WITHOUT_CLASSIFICATION	0.9999967332423346	WITHOUT_CLASSIFICATION	3.266757665412638E-6	DESIGN
//cant instantiate	WITHOUT_CLASSIFICATION	0.9998993610362857	WITHOUT_CLASSIFICATION	1.0063896371429105E-4	DESIGN
//if it is a property of an embedded component, invoke on the "identifier"	WITHOUT_CLASSIFICATION	0.9999953771951559	WITHOUT_CLASSIFICATION	4.622804844085077E-6	DESIGN
// otherwise:	WITHOUT_CLASSIFICATION	0.999966578976974	WITHOUT_CLASSIFICATION	3.342102302593739E-5	DESIGN
// skip finalize methods	WITHOUT_CLASSIFICATION	0.9999733424533126	WITHOUT_CLASSIFICATION	2.6657546687400894E-5	DESIGN
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.8882727265952629	WITHOUT_CLASSIFICATION	0.11172727340473705	DESIGN
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.8882727265952629	WITHOUT_CLASSIFICATION	0.11172727340473705	DESIGN
// HHH-2481 make sure the callback gets cleared, otherwise the instance stays in a static thread local.	WITHOUT_CLASSIFICATION	0.9998486210089526	WITHOUT_CLASSIFICATION	1.5137899104750196E-4	DESIGN
// while constructor is running	WITHOUT_CLASSIFICATION	0.9995846309699806	WITHOUT_CLASSIFICATION	4.15369030019289E-4	DESIGN
// while constructor is running	WITHOUT_CLASSIFICATION	0.9995846309699806	WITHOUT_CLASSIFICATION	4.15369030019289E-4	DESIGN
// note: interface is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9816384744935671	WITHOUT_CLASSIFICATION	0.018361525506432837	DESIGN
// interfaces // arguments	WITHOUT_CLASSIFICATION	0.9999832070706782	WITHOUT_CLASSIFICATION	1.6792929321698376E-5	DESIGN
//TODO!	WITHOUT_CLASSIFICATION	0.6884856846006248	DESIGN	0.3115143153993753	WITHOUT_CLASSIFICATION
// Get the caller	WITHOUT_CLASSIFICATION	0.9999984202653975	WITHOUT_CLASSIFICATION	1.5797346024096087E-6	DESIGN
// Get the caller principals	WITHOUT_CLASSIFICATION	0.9999989082423855	WITHOUT_CLASSIFICATION	1.0917576146151628E-6	DESIGN
//private static final Alias DEFAULT_ALIAS = new Alias(10, null);	WITHOUT_CLASSIFICATION	0.9999999064889022	WITHOUT_CLASSIFICATION	9.351109773478291E-8	DESIGN
// Needed to bump this up to DotNode, because that is the only thing which currently // knows about the property-ref path in the correct format; it is either this, or // recurse over the DotNodes constructing the property path just like DotNode does // internally	WITHOUT_CLASSIFICATION	0.9999934475120611	WITHOUT_CLASSIFICATION	6.552487938915575E-6	DESIGN
//if the identifier is quoted, remove the quotes	WITHOUT_CLASSIFICATION	0.9999966976204337	WITHOUT_CLASSIFICATION	3.3023795661301497E-6	DESIGN
//truncate the identifier to the max alias length, less the suffix length	WITHOUT_CLASSIFICATION	0.9999999029406288	WITHOUT_CLASSIFICATION	9.705937118590006E-8	DESIGN
//full joins are not supported.. yet!	WITHOUT_CLASSIFICATION	0.9999632696548985	WITHOUT_CLASSIFICATION	3.673034510160367E-5	DESIGN
// null is not considered the same type as Integer. //$NON-NLS-1 //$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999998251803036	WITHOUT_CLASSIFICATION	1.748196964267304E-7	DESIGN
// the outerJoinsAfterWhere needs to come before where clause to properly // handle dynamic filters	WITHOUT_CLASSIFICATION	0.9835965416367386	WITHOUT_CLASSIFICATION	0.016403458363261382	DESIGN
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999743305663717	WITHOUT_CLASSIFICATION	2.566943362830154E-5	DESIGN
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999743305663717	WITHOUT_CLASSIFICATION	2.566943362830154E-5	DESIGN
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999743305663717	WITHOUT_CLASSIFICATION	2.566943362830154E-5	DESIGN
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999743305663717	WITHOUT_CLASSIFICATION	2.566943362830154E-5	DESIGN
// strip off any leading 'and' token	WITHOUT_CLASSIFICATION	0.999999846601691	WITHOUT_CLASSIFICATION	1.5339830908448864E-7	DESIGN
// if the condition is not already there...	WITHOUT_CLASSIFICATION	0.9999398537485841	WITHOUT_CLASSIFICATION	6.014625141597765E-5	DESIGN
//dontSpace.add("'");	WITHOUT_CLASSIFICATION	0.9999749486498669	WITHOUT_CLASSIFICATION	2.5051350133073486E-5	DESIGN
//for MySQL	WITHOUT_CLASSIFICATION	0.9999812283505309	WITHOUT_CLASSIFICATION	1.8771649469080008E-5	DESIGN
//HashMap columnsUnique = new HashMap();	WITHOUT_CLASSIFICATION	0.9999923182505178	WITHOUT_CLASSIFICATION	7.681749482135987E-6	DESIGN
//null caused some problems	WITHOUT_CLASSIFICATION	0.9914820531692058	WITHOUT_CLASSIFICATION	0.008517946830794154	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.9997309057501701	WITHOUT_CLASSIFICATION	2.690942498298937E-4	DESIGN
//not sure if this would ever be null but wanted to be careful	WITHOUT_CLASSIFICATION	0.9676642924103129	WITHOUT_CLASSIFICATION	0.032335707589687075	DESIGN
//even on inverse="true"	WITHOUT_CLASSIFICATION	0.9999946588149627	WITHOUT_CLASSIFICATION	5.341185037198862E-6	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.9997309057501701	WITHOUT_CLASSIFICATION	2.690942498298937E-4	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.9997309057501701	WITHOUT_CLASSIFICATION	2.690942498298937E-4	DESIGN
// If true then execute db updates, otherwise just generate and display updates	WITHOUT_CLASSIFICATION	0.9999999933520021	WITHOUT_CLASSIFICATION	6.647998043975397E-9	DESIGN
// we only release the connection	WITHOUT_CLASSIFICATION	0.9999904775795635	WITHOUT_CLASSIFICATION	9.522420436434014E-6	DESIGN
// deprecated option...	WITHOUT_CLASSIFICATION	0.9991084913031003	WITHOUT_CLASSIFICATION	8.915086968997177E-4	DESIGN
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999659551645526	WITHOUT_CLASSIFICATION	3.404483544741867E-5	DESIGN
//actually, this last test is probably unnecessary, since  //beforeCompletion() doesn't get called during rollback	WITHOUT_CLASSIFICATION	0.9999070685758531	WITHOUT_CLASSIFICATION	9.293142414689611E-5	DESIGN
// this one only really needed for badly-behaved applications! // (if the TransactionManager has a Sychronization registered, // its a noop) // (actually we do need it for downgrading locks)	WITHOUT_CLASSIFICATION	0.9999983090595901	WITHOUT_CLASSIFICATION	1.6909404099217177E-6	DESIGN
// Create an DotNode AST for the path and resolve it.	WITHOUT_CLASSIFICATION	0.9999996100318836	WITHOUT_CLASSIFICATION	3.8996811641460096E-7	DESIGN
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999659551645526	WITHOUT_CLASSIFICATION	3.404483544741867E-5	DESIGN
//if we could not register a synchronization, //do the before/after completion callbacks //ourself (but we need to let jdbcContext //know that this is what we are going to //do, so it doesn't keep trying to register //synchronizations)	WITHOUT_CLASSIFICATION	0.9999858309590614	WITHOUT_CLASSIFICATION	1.416904093858091E-5	DESIGN
// swallow it, and continue to roll back JTA transaction	WITHOUT_CLASSIFICATION	0.9999797273672253	WITHOUT_CLASSIFICATION	2.0272632774720817E-5	DESIGN
// so the transaction is already rolled back, by JTA spec	WITHOUT_CLASSIFICATION	0.9999822546014557	WITHOUT_CLASSIFICATION	1.7745398544245112E-5	DESIGN
// this method is a noop if there is a Synchronization!	WITHOUT_CLASSIFICATION	0.999696196801279	WITHOUT_CLASSIFICATION	3.038031987210566E-4	DESIGN
// two conditions where we need to transform this to a theta-join syntax: //      1) 'elem' is the "root from-element" in correlated subqueries //      2) The DotNode.useThetaStyleImplicitJoins has been set to true //          and 'elem' represents an implicit join	WITHOUT_CLASSIFICATION	0.9999995282415074	WITHOUT_CLASSIFICATION	4.717584926731853E-7	DESIGN
// WebSphere, however, is not a sane JEE/JTA container...	WITHOUT_CLASSIFICATION	0.9922725557658849	WITHOUT_CLASSIFICATION	0.00772744423411514	DESIGN
// for sane JEE/JTA containers, the transaction itself functions as its identifier...	WITHOUT_CLASSIFICATION	0.999999893872505	WITHOUT_CLASSIFICATION	1.0612749498070879E-7	DESIGN
//swallow, the transaction was finished	WITHOUT_CLASSIFICATION	0.9999992219292149	WITHOUT_CLASSIFICATION	7.780707850232268E-7	DESIGN
// all AliasToEntityMapResultTransformer are considered equal ~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999721197437	WITHOUT_CLASSIFICATION	2.7880256311959445E-7	DESIGN
// Create the join element under the from element.	WITHOUT_CLASSIFICATION	0.9999844893140696	WITHOUT_CLASSIFICATION	1.5510685930422104E-5	DESIGN
// all DistinctRootEntityResultTransformer are considered equal ~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998703081832	WITHOUT_CLASSIFICATION	1.2969181687395146E-7	DESIGN
// map of EntityMode -> Tuplizer	WITHOUT_CLASSIFICATION	0.9999982192668199	WITHOUT_CLASSIFICATION	1.7807331802628936E-6	DESIGN
// this is a virtual id property...	WITHOUT_CLASSIFICATION	0.969921136754696	WITHOUT_CLASSIFICATION	0.030078863245303865	DESIGN
//this one needed only for guessEntityMode()	WITHOUT_CLASSIFICATION	0.9994666264107627	WITHOUT_CLASSIFICATION	5.333735892372587E-4	DESIGN
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999705381231377	WITHOUT_CLASSIFICATION	2.9461876862198236E-5	DESIGN
// todo : move this to SF per HHH-3517; also see HHH-1907 and ComponentMetamodel	WITHOUT_CLASSIFICATION	0.9453271708810141	WITHOUT_CLASSIFICATION	0.05467282911898586	DESIGN
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999997421477381	WITHOUT_CLASSIFICATION	2.578522619179229E-7	DESIGN
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999893030487689	WITHOUT_CLASSIFICATION	1.069695123101797E-5	DESIGN
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999989808620624	WITHOUT_CLASSIFICATION	1.01913793759726E-6	DESIGN
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999893030487689	WITHOUT_CLASSIFICATION	1.069695123101797E-5	DESIGN
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999998689825327	WITHOUT_CLASSIFICATION	1.3101746724224943E-7	DESIGN
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9959903779669469	WITHOUT_CLASSIFICATION	0.004009622033053106	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999609652327096	WITHOUT_CLASSIFICATION	3.903476729039761E-5	DESIGN
// cached for efficiency...	WITHOUT_CLASSIFICATION	0.9999372374912681	WITHOUT_CLASSIFICATION	6.276250873187293E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999609652327096	WITHOUT_CLASSIFICATION	3.903476729039761E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999609652327096	WITHOUT_CLASSIFICATION	3.903476729039761E-5	DESIGN
//it was not embedded, so the argument is just an id	WITHOUT_CLASSIFICATION	0.9998252255390113	WITHOUT_CLASSIFICATION	1.7477446098877823E-4	DESIGN
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999997421477381	WITHOUT_CLASSIFICATION	2.578522619179229E-7	DESIGN
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999989808620624	WITHOUT_CLASSIFICATION	1.01913793759726E-6	DESIGN
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999998689825327	WITHOUT_CLASSIFICATION	1.3101746724224943E-7	DESIGN
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999964653683615	WITHOUT_CLASSIFICATION	3.5346316384601246E-6	DESIGN
//return currentId;	WITHOUT_CLASSIFICATION	0.9999761509108686	WITHOUT_CLASSIFICATION	2.38490891314222E-5	DESIGN
//reset the id	WITHOUT_CLASSIFICATION	0.9998942841528425	WITHOUT_CLASSIFICATION	1.0571584715747988E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999609652327096	WITHOUT_CLASSIFICATION	3.903476729039761E-5	DESIGN
//reset the version	WITHOUT_CLASSIFICATION	0.9999977782469005	WITHOUT_CLASSIFICATION	2.2217530995114655E-6	DESIGN
// the default is to simply not lazy fetch properties for now...	WITHOUT_CLASSIFICATION	0.9998817304691092	WITHOUT_CLASSIFICATION	1.1826953089078618E-4	DESIGN
// Add the second join, the one that ends in the destination table.	WITHOUT_CLASSIFICATION	0.9999992988010254	WITHOUT_CLASSIFICATION	7.011989745214122E-7	DESIGN
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999568511853977	WITHOUT_CLASSIFICATION	4.314881460237572E-5	DESIGN
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9959903779669469	WITHOUT_CLASSIFICATION	0.004009622033053106	DESIGN
// determine the id getter and setter methods from the proxy interface (if any) // determine all interfaces needed by the resulting proxy	WITHOUT_CLASSIFICATION	0.9999521616198677	WITHOUT_CLASSIFICATION	4.7838380132359765E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999609652327096	WITHOUT_CLASSIFICATION	3.903476729039761E-5	DESIGN
//not final because proxy factory creation can fail	WITHOUT_CLASSIFICATION	0.9990487512348394	WITHOUT_CLASSIFICATION	9.51248765160677E-4	DESIGN
// superclass entity-name	WITHOUT_CLASSIFICATION	0.9999755621114313	WITHOUT_CLASSIFICATION	2.44378885686205E-5	DESIGN
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999568511853977	WITHOUT_CLASSIFICATION	4.314881460237572E-5	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999921446093955	WITHOUT_CLASSIFICATION	7.855390604518883E-6	DESIGN
//init the aliases, after initing the constructornode	WITHOUT_CLASSIFICATION	0.9999461791317086	WITHOUT_CLASSIFICATION	5.382086829155368E-5	DESIGN
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999568511853977	WITHOUT_CLASSIFICATION	4.314881460237572E-5	DESIGN
// legacy behavior (with no abstract attribute specified)	WITHOUT_CLASSIFICATION	0.9999999431048923	WITHOUT_CLASSIFICATION	5.68951076915226E-8	DESIGN
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999589509709346	WITHOUT_CLASSIFICATION	4.104902906533081E-5	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999921446093955	WITHOUT_CLASSIFICATION	7.855390604518883E-6	DESIGN
//note: this affects the return value!	WITHOUT_CLASSIFICATION	0.9996755228323507	WITHOUT_CLASSIFICATION	3.2447716764926696E-4	DESIGN
// Need to account for allowable '_' within the variant	WITHOUT_CLASSIFICATION	0.9999985437698143	WITHOUT_CLASSIFICATION	1.4562301856437553E-6	DESIGN
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999965747574135	WITHOUT_CLASSIFICATION	3.425242586329779E-6	DESIGN
// Collection Types:	WITHOUT_CLASSIFICATION	0.9999781923899015	WITHOUT_CLASSIFICATION	2.1807610098473816E-5	DESIGN
// convenience methods relating to operations across arrays of types...	WITHOUT_CLASSIFICATION	0.9999738949463224	WITHOUT_CLASSIFICATION	2.6105053677533923E-5	DESIGN
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9998749459098811	WITHOUT_CLASSIFICATION	1.2505409011892297E-4	DESIGN
//Blobs are ignored by merge()	WITHOUT_CLASSIFICATION	0.9998474210643763	WITHOUT_CLASSIFICATION	1.5257893562371856E-4	DESIGN
//value is the entity name	WITHOUT_CLASSIFICATION	0.9999163051038634	WITHOUT_CLASSIFICATION	8.369489613655408E-5	DESIGN
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9990708192733739	WITHOUT_CLASSIFICATION	9.291807266260359E-4	DESIGN
// generate id select fragment and then property select fragment for // each expression, just like generateSelectFragments().	WITHOUT_CLASSIFICATION	0.9999999996129664	WITHOUT_CLASSIFICATION	3.8703356548912E-10	DESIGN
//TODO!	WITHOUT_CLASSIFICATION	0.6884856846006248	DESIGN	0.3115143153993753	WITHOUT_CLASSIFICATION
//xml is the entity name	WITHOUT_CLASSIFICATION	0.9996572057087048	WITHOUT_CLASSIFICATION	3.4279429129523056E-4	DESIGN
//special case ... this is the leaf of the containment graph, even though not immutable	WITHOUT_CLASSIFICATION	0.9999805802599729	WITHOUT_CLASSIFICATION	1.9419740027059754E-5	DESIGN
//tolerates nulls	WITHOUT_CLASSIFICATION	0.9999993031920469	WITHOUT_CLASSIFICATION	6.96807953022296E-7	DESIGN
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9996023528626514	WITHOUT_CLASSIFICATION	3.976471373485271E-4	DESIGN
// metaType is assumed to be single-column type	WITHOUT_CLASSIFICATION	0.9999531112401822	WITHOUT_CLASSIFICATION	4.688875981787247E-5	DESIGN
// Get all the select expressions (that we just generated) and render the select.	WITHOUT_CLASSIFICATION	0.9999999387723479	WITHOUT_CLASSIFICATION	6.122765209502315E-8	DESIGN
// Look through the FromElement's children to find any collections of values that should be fetched...	WITHOUT_CLASSIFICATION	0.9999999677824692	WITHOUT_CLASSIFICATION	3.221753076111369E-8	DESIGN
//return AssociationType.FOREIGN_KEY_TO_PARENT; //this is better but causes a transient object exception...	WITHOUT_CLASSIFICATION	0.9898768050232981	WITHOUT_CLASSIFICATION	0.010123194976701869	DESIGN
// Use the lower case function name. // Remember whether we're in a SELECT clause or not.	WITHOUT_CLASSIFICATION	0.9999015430107533	WITHOUT_CLASSIFICATION	9.84569892467046E-5	DESIGN
// IDENT might be the name of a class.	WITHOUT_CLASSIFICATION	0.9999932439637317	WITHOUT_CLASSIFICATION	6.756036268346756E-6	DESIGN
//TODO!!!	WITHOUT_CLASSIFICATION	0.875756491058029	DESIGN	0.124243508941971	WITHOUT_CLASSIFICATION
//st.setTimestamp( index,  new Timestamp( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9996810726457873	WITHOUT_CLASSIFICATION	3.1892735421271205E-4	DESIGN
//st.setDate( index,  new Date( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9999168715547785	WITHOUT_CLASSIFICATION	8.312844522156743E-5	DESIGN
// both are Timestamps	WITHOUT_CLASSIFICATION	0.9999979837502595	WITHOUT_CLASSIFICATION	2.0162497404784697E-6	DESIGN
// at least one is a plain old Date	WITHOUT_CLASSIFICATION	0.9999981455822657	WITHOUT_CLASSIFICATION	1.8544177341983136E-6	DESIGN
//noop	WITHOUT_CLASSIFICATION	0.9999762672983193	WITHOUT_CLASSIFICATION	2.3732701680686024E-5	DESIGN
// if the corresponding SQL value is NULL, the reader we got is NULL as well	WITHOUT_CLASSIFICATION	0.9999899050114421	WITHOUT_CLASSIFICATION	1.009498855784915E-5	DESIGN
// Fetch Reader content up to the end - and put characters in a StringBuffer	WITHOUT_CLASSIFICATION	0.9999933787031793	WITHOUT_CLASSIFICATION	6.621296820720476E-6	DESIGN
// Return StringBuffer content as a large String	WITHOUT_CLASSIFICATION	0.9999964101326192	WITHOUT_CLASSIFICATION	3.5898673807960957E-6	DESIGN
//or Types.LONGVARCHAR?	WITHOUT_CLASSIFICATION	0.9984487167783143	WITHOUT_CLASSIFICATION	0.001551283221685666	DESIGN
//Not called at runtime so doesn't matter if its slow :)	WITHOUT_CLASSIFICATION	0.9949401124771464	WITHOUT_CLASSIFICATION	0.005059887522853524	DESIGN
//TODO	WITHOUT_CLASSIFICATION	0.9333833904494594	WITHOUT_CLASSIFICATION	0.06661660955054072	DESIGN
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999998822371728	WITHOUT_CLASSIFICATION	1.177628271854512E-7	DESIGN
//different nullability rules for pk/fk	WITHOUT_CLASSIFICATION	0.9992374706989239	WITHOUT_CLASSIFICATION	7.625293010760915E-4	DESIGN
//cache this	WITHOUT_CLASSIFICATION	0.9993639874088015	WITHOUT_CLASSIFICATION	6.360125911985729E-4	DESIGN
//only really need new array during semiresolve!	WITHOUT_CLASSIFICATION	0.9997310109172695	WITHOUT_CLASSIFICATION	2.6898908273056683E-4	DESIGN
// Forcefully remove leading ands from where fragments; the grammar will // handle adding them	WITHOUT_CLASSIFICATION	0.9999485363091619	WITHOUT_CLASSIFICATION	5.146369083807224E-5	DESIGN
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9193502765607915	DESIGN	0.08064972343920854	WITHOUT_CLASSIFICATION
// Create a new FILTERS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999944116087743	WITHOUT_CLASSIFICATION	5.588391225611633E-6	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999921446093955	WITHOUT_CLASSIFICATION	7.855390604518883E-6	DESIGN
//public Object instantiate(Object parent, SessionImplementor session) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9999179454003014	WITHOUT_CLASSIFICATION	8.20545996985226E-5	DESIGN
//nothing to do	WITHOUT_CLASSIFICATION	0.9999047829120934	WITHOUT_CLASSIFICATION	9.521708790656317E-5	DESIGN
//nothing to do	WITHOUT_CLASSIFICATION	0.9999047829120934	WITHOUT_CLASSIFICATION	9.521708790656317E-5	DESIGN
// VersionType impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //      Note : simply returns null for seed() and next() as the only known //      application of binary types for versioning is for use with the //      TIMESTAMP datatype supported by Sybase and SQL Server, which //      are completely db-generated values...	WITHOUT_CLASSIFICATION	0.9999985175002094	WITHOUT_CLASSIFICATION	1.4824997906538127E-6	DESIGN
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9998749459098811	WITHOUT_CLASSIFICATION	1.2505409011892297E-4	DESIGN
//not really necessary, I guess...	WITHOUT_CLASSIFICATION	0.999154060582422	WITHOUT_CLASSIFICATION	8.459394175780172E-4	DESIGN
//Clobs are ignored by merge() operation	WITHOUT_CLASSIFICATION	0.9998873769406654	WITHOUT_CLASSIFICATION	1.1262305933452867E-4	DESIGN
// we do not have to worry about queued additions to uninitialized // collections, since they can only occur for inverse collections!	WITHOUT_CLASSIFICATION	0.9999994424622047	WITHOUT_CLASSIFICATION	5.575377952868241E-7	DESIGN
// collections cannot be compared	WITHOUT_CLASSIFICATION	0.9999996216078801	WITHOUT_CLASSIFICATION	3.783921199046448E-7	DESIGN
//remember the uk value	WITHOUT_CLASSIFICATION	0.9999542050174859	WITHOUT_CLASSIFICATION	4.579498251407641E-5	DESIGN
//NOOP	WITHOUT_CLASSIFICATION	0.9999506074882699	WITHOUT_CLASSIFICATION	4.939251173017281E-5	DESIGN
//processCollectionProperty(token, q.getCollectionPersister(collectionRole), collectionName);	WITHOUT_CLASSIFICATION	0.9999997819712145	WITHOUT_CLASSIFICATION	2.1802878549348964E-7	DESIGN
//we must use the "remembered" uk value, since it is  //not available from the EntityEntry during assembly	WITHOUT_CLASSIFICATION	0.9999965797946941	WITHOUT_CLASSIFICATION	3.4202053058133528E-6	DESIGN
// collections don't dirty an unversioned parent entity	WITHOUT_CLASSIFICATION	0.9999948528132538	WITHOUT_CLASSIFICATION	5.1471867460437895E-6	DESIGN
// return false;	WITHOUT_CLASSIFICATION	0.999996562851808	WITHOUT_CLASSIFICATION	3.437148191888128E-6	DESIGN
// This just handles a particular case of component // projection, perhaps get rid of it and throw an exception	WITHOUT_CLASSIFICATION	0.9895746691711417	WITHOUT_CLASSIFICATION	0.010425330828858277	DESIGN
//NOTE: we avoid joining to the next table if the named property is just the foreign key value	WITHOUT_CLASSIFICATION	0.9998301130220311	WITHOUT_CLASSIFICATION	1.6988697796901044E-4	DESIGN
// the key is the owning entity itself, so get the ID from the key	WITHOUT_CLASSIFICATION	0.9999930622601922	WITHOUT_CLASSIFICATION	6.937739807786879E-6	DESIGN
// if the original is a PersistentCollection, and that original // was not flagged as dirty, then reset the target's dirty flag // here after the copy operation. // </p> // One thing to be careful of here is a "bare" original collection // in which case we should never ever ever reset the dirty flag // on the target because we simply do not know...	WITHOUT_CLASSIFICATION	0.9999956670070564	WITHOUT_CLASSIFICATION	4.3329929435350125E-6	DESIGN
//ignore subselect keywords	WITHOUT_CLASSIFICATION	0.9999991269147388	WITHOUT_CLASSIFICATION	8.730852612036088E-7	DESIGN
// copy elements into newly empty target collection	WITHOUT_CLASSIFICATION	0.9999989129493965	WITHOUT_CLASSIFICATION	1.0870506035632797E-6	DESIGN
// for a null target, or a target which is the same as the original, we // need to put the merged elements in a new collection	WITHOUT_CLASSIFICATION	0.9999999065886935	WITHOUT_CLASSIFICATION	9.341130651512437E-8	DESIGN
// by default just use an unanticipated capacity since we don't // know how to extract the capacity to use from original here...	WITHOUT_CLASSIFICATION	0.998764720465959	WITHOUT_CLASSIFICATION	0.00123527953404106	DESIGN
// get the elements back into the target making sure to handle dirty flag	WITHOUT_CLASSIFICATION	0.9992519387591121	WITHOUT_CLASSIFICATION	7.48061240887886E-4	DESIGN
// check if collection is currently being loaded	WITHOUT_CLASSIFICATION	0.9999984443808855	WITHOUT_CLASSIFICATION	1.5556191145535077E-6	DESIGN
// check if it is already completely loaded, but unowned	WITHOUT_CLASSIFICATION	0.9999872364758594	WITHOUT_CLASSIFICATION	1.2763524140522762E-5	DESIGN
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9997382611783512	WITHOUT_CLASSIFICATION	2.617388216488308E-4	DESIGN
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9193502765607915	DESIGN	0.08064972343920854	WITHOUT_CLASSIFICATION
// create a new collection wrapper, to be initialized later	WITHOUT_CLASSIFICATION	0.9999970168383427	WITHOUT_CLASSIFICATION	2.983161657251143E-6	DESIGN
// Some JDBC drivers erroneously return an empty array here for a null DB value :/	WITHOUT_CLASSIFICATION	0.9999983899093721	WITHOUT_CLASSIFICATION	1.6100906279029408E-6	DESIGN
// our column span is the number of columns in the PK	WITHOUT_CLASSIFICATION	0.9999984249336741	WITHOUT_CLASSIFICATION	1.575066326026137E-6	DESIGN
//cannot batch fetch by unique key (property-ref associations)	WITHOUT_CLASSIFICATION	0.9999833744662724	WITHOUT_CLASSIFICATION	1.6625533727607694E-5	DESIGN
// we already know current is not null...	WITHOUT_CLASSIFICATION	0.99918745815826	WITHOUT_CLASSIFICATION	8.12541841739933E-4	DESIGN
// the ids are fully resolved, so compare them with isDirty(), not isModified()	WITHOUT_CLASSIFICATION	0.9988281245113836	WITHOUT_CLASSIFICATION	0.0011718754886164062	DESIGN
//the owner of the association is not the owner of the id	WITHOUT_CLASSIFICATION	0.9998468344941048	WITHOUT_CLASSIFICATION	1.5316550589515362E-4	DESIGN
// ----------------------------------------------------------- Constructors	WITHOUT_CLASSIFICATION	0.9999978910339034	WITHOUT_CLASSIFICATION	2.108966096614908E-6	DESIGN
// ----------------------------------------------------- Instance Variables	WITHOUT_CLASSIFICATION	0.9999998120875885	WITHOUT_CLASSIFICATION	1.879124115879391E-7	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999609652327096	WITHOUT_CLASSIFICATION	3.903476729039761E-5	DESIGN
// --------------------------------------------------------- Public Methods	WITHOUT_CLASSIFICATION	0.9999906647347059	WITHOUT_CLASSIFICATION	9.335265294159878E-6	DESIGN
// Compare the two maps for equality	WITHOUT_CLASSIFICATION	0.9999992686459298	WITHOUT_CLASSIFICATION	7.313540701406787E-7	DESIGN
// Simple tests that require no synchronization	WITHOUT_CLASSIFICATION	0.9999995909868181	WITHOUT_CLASSIFICATION	4.0901318188370003E-7	DESIGN
//Sybase fail if we don't do that, sigh...	WITHOUT_CLASSIFICATION	0.9990251034731289	WITHOUT_CLASSIFICATION	9.748965268711787E-4	DESIGN
// Handles things like: // a and b or c // a and ( b or c ) // not a and not b // not ( a and b ) // x between y and z            (overloaded "and") // x in ( a, b, c )             (overloaded brackets) // not not a // a is not null                (overloaded "not") // etc...... // and expressions like // foo = bar                    (maps to: foo.id = bar.id) // foo.Bar = 'foo'              (maps to: foo.bar = 'foo') // foo.Bar.Baz = 1.0            (maps to: foo.bar = bar.id and bar.baz = 1.0) // 1.0 = foo.Bar.Baz            (maps to: bar.baz = 1.0 and foo.Bar = bar.id) // foo.Bar.Baz = a.B.C          (maps to: bar.Baz = b.C and foo.Bar = bar.id and a.B = b.id) // foo.Bar.Baz + a.B.C          (maps to: bar.Baz + b.C and foo.Bar = bar.id and a.B = b.id) // ( foo.Bar.Baz + 1.0 ) < 2.0  (maps to: ( bar.Baz + 1.0 ) < 2.0 and foo.Bar = bar.id)	WITHOUT_CLASSIFICATION	0.9999986170209322	WITHOUT_CLASSIFICATION	1.3829790678923824E-6	DESIGN
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9983994283679093	WITHOUT_CLASSIFICATION	0.0016005716320907286	DESIGN
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9983994283679093	WITHOUT_CLASSIFICATION	0.0016005716320907286	DESIGN
// try to "pretty print" it	WITHOUT_CLASSIFICATION	0.99999450434076	WITHOUT_CLASSIFICATION	5.49565924000356E-6	DESIGN
// otherwise, just dump it	WITHOUT_CLASSIFICATION	0.9999795742498611	WITHOUT_CLASSIFICATION	2.0425750138994536E-5	DESIGN
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9958633278527032	WITHOUT_CLASSIFICATION	0.004136672147296796	DESIGN
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9958633278527032	WITHOUT_CLASSIFICATION	0.004136672147296796	DESIGN
// use default behavior	WITHOUT_CLASSIFICATION	0.9999966382095816	WITHOUT_CLASSIFICATION	3.36179041829542E-6	DESIGN
//NOTE: early return	WITHOUT_CLASSIFICATION	0.9947250201597728	WITHOUT_CLASSIFICATION	0.0052749798402271664	DESIGN
// the MRU cache used to keep hard references to the most recently used query plans; // note : LRU here is a bit of a misnomer, it indicates that LRU entries are removed, the // actual kept entries are the MRU entries	WITHOUT_CLASSIFICATION	0.7252693737655245	WITHOUT_CLASSIFICATION	0.2747306262344755	DESIGN
// we want to be able to just use the defaults, // if JNDI environment properties are not supplied // so don't put null in anywhere	WITHOUT_CLASSIFICATION	0.9999467901804056	WITHOUT_CLASSIFICATION	5.3209819594336895E-5	DESIGN
// Clone //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.999995332738656	WITHOUT_CLASSIFICATION	4.667261343906455E-6	DESIGN
// Serialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999977218051855	WITHOUT_CLASSIFICATION	2.2781948144254084E-6	DESIGN
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.999984141257347	WITHOUT_CLASSIFICATION	1.5858742653025735E-5	DESIGN
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.999984141257347	WITHOUT_CLASSIFICATION	1.5858742653025735E-5	DESIGN
// Deserialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999980318693439	WITHOUT_CLASSIFICATION	1.9681306561700915E-6	DESIGN
/* static methods only - hide constructor */	WITHOUT_CLASSIFICATION	0.9999813656307726	WITHOUT_CLASSIFICATION	1.863436922736167E-5	DESIGN
/*&& !('_'==character)*/	WITHOUT_CLASSIFICATION	0.9999746519359791	WITHOUT_CLASSIFICATION	2.5348064020891326E-5	DESIGN
// returnign null!	WITHOUT_CLASSIFICATION	0.9999946631059505	WITHOUT_CLASSIFICATION	5.336894049434875E-6	DESIGN
// returnign null!	WITHOUT_CLASSIFICATION	0.9999946631059505	WITHOUT_CLASSIFICATION	5.336894049434875E-6	DESIGN
// includes last '.'	WITHOUT_CLASSIFICATION	0.9999998651183121	WITHOUT_CLASSIFICATION	1.3488168791242747E-7	DESIGN
// +1 to include the following '.'	WITHOUT_CLASSIFICATION	0.9999998591404207	WITHOUT_CLASSIFICATION	1.4085957944785413E-7	DESIGN
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.942717869535437	WITHOUT_CLASSIFICATION	0.05728213046456295	DESIGN
// first time we find match!	WITHOUT_CLASSIFICATION	0.9999780632849701	WITHOUT_CLASSIFICATION	2.1936715029834507E-5	DESIGN
// entityNames may now include slashes for the representations //classname may be an inner class	WITHOUT_CLASSIFICATION	0.9999987275605745	WITHOUT_CLASSIFICATION	1.272439425484559E-6	DESIGN
// wrapped iterators	WITHOUT_CLASSIFICATION	0.9999910128686141	WITHOUT_CLASSIFICATION	8.987131385929221E-6	DESIGN
// index of current iterator in the wrapped iterators array	WITHOUT_CLASSIFICATION	0.9999784720171184	WITHOUT_CLASSIFICATION	2.1527982881530128E-5	DESIGN
// the current iterator	WITHOUT_CLASSIFICATION	0.9999830950460744	WITHOUT_CLASSIFICATION	1.690495392560902E-5	DESIGN
// the last used iterator	WITHOUT_CLASSIFICATION	0.9976209942458308	WITHOUT_CLASSIFICATION	0.00237900575416919	DESIGN
//it was a boolean expression	WITHOUT_CLASSIFICATION	0.9999999528852457	WITHOUT_CLASSIFICATION	4.711475431203217E-8	DESIGN
/*public static Object[] clone(Class elementClass, Object[] array) {	WITHOUT_CLASSIFICATION	0.9996259663741307	WITHOUT_CLASSIFICATION	3.740336258692761E-4	DESIGN
// call this before any Iterator method to make sure that the current Iterator // is not exhausted	WITHOUT_CLASSIFICATION	0.9981751661923026	WITHOUT_CLASSIFICATION	0.001824833807697404	DESIGN
//doable if needed	WITHOUT_CLASSIFICATION	0.9999938211182828	WITHOUT_CLASSIFICATION	6.178881717160839E-6	DESIGN
// set last used iterator here, in case the user calls remove // before calling hasNext() or next() (although they shouldn't)	WITHOUT_CLASSIFICATION	0.9883853571497688	WITHOUT_CLASSIFICATION	0.011614642850231158	DESIGN
// peek ahead	WITHOUT_CLASSIFICATION	0.9999854361133458	WITHOUT_CLASSIFICATION	1.4563886654126684E-5	DESIGN
// if we reach the end of the string w/o finding the // matching end, that is an exception	WITHOUT_CLASSIFICATION	0.9999910493042355	WITHOUT_CLASSIFICATION	8.950695764567446E-6	DESIGN
// we have a placeholder, spin forward till we find the end	WITHOUT_CLASSIFICATION	0.9999966476692014	WITHOUT_CLASSIFICATION	3.352330798703983E-6	DESIGN
// make sure spinning forward did not put us past the end of the buffer...	WITHOUT_CLASSIFICATION	0.9999984005883996	WITHOUT_CLASSIFICATION	1.5994116004691614E-6	DESIGN
// First, try to locate this resource through the current // context classloader.	WITHOUT_CLASSIFICATION	0.9999668329715791	WITHOUT_CLASSIFICATION	3.316702842094236E-5	DESIGN
// Next, try to locate this resource through this class's classloader	WITHOUT_CLASSIFICATION	0.9998967827641163	WITHOUT_CLASSIFICATION	1.0321723588372138E-4	DESIGN
// Next, try to locate this resource through the system classloader	WITHOUT_CLASSIFICATION	0.9999605074139654	WITHOUT_CLASSIFICATION	3.949258603472603E-5	DESIGN
// Anywhere else we should look?	WITHOUT_CLASSIFICATION	0.9984716764283779	WITHOUT_CLASSIFICATION	0.001528323571622162	DESIGN
// would need an IdentitySet for this!	WITHOUT_CLASSIFICATION	0.9994067601193471	WITHOUT_CLASSIFICATION	5.932398806528898E-4	DESIGN
//Arrays.asList doesn't do primitive arrays	WITHOUT_CLASSIFICATION	0.9999969512570344	WITHOUT_CLASSIFICATION	3.0487429656866824E-6	DESIGN
//faster?	WITHOUT_CLASSIFICATION	0.9993111230445754	WITHOUT_CLASSIFICATION	6.888769554245452E-4	DESIGN
// the name of a class	WITHOUT_CLASSIFICATION	0.999997599264928	WITHOUT_CLASSIFICATION	2.4007350719201726E-6	DESIGN
// Its the listener class name	WITHOUT_CLASSIFICATION	0.9999825571582188	WITHOUT_CLASSIFICATION	1.7442841781238956E-5	DESIGN
//allow 9,8,7,6,5,4,3,2,1	WITHOUT_CLASSIFICATION	0.9999987361057109	WITHOUT_CLASSIFICATION	1.2638942890302518E-6	DESIGN
// default to element set if no elements() specified	WITHOUT_CLASSIFICATION	0.999999956297603	WITHOUT_CLASSIFICATION	4.3702397112608035E-8	DESIGN
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999900268848567	WITHOUT_CLASSIFICATION	9.973115143223467E-6	DESIGN
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9966010353455356	WITHOUT_CLASSIFICATION	0.0033989646544645247	DESIGN
// first, lets determine whether to apply cglib or javassist based instrumentation...	WITHOUT_CLASSIFICATION	0.9999781293908055	WITHOUT_CLASSIFICATION	2.18706091944337E-5	DESIGN
// Make sure we don't override previous set values	WITHOUT_CLASSIFICATION	0.9999989716867898	WITHOUT_CLASSIFICATION	1.0283132103250474E-6	DESIGN
//entirely optional!!	WITHOUT_CLASSIFICATION	0.9999771149253686	WITHOUT_CLASSIFICATION	2.2885074631437784E-5	DESIGN
// Its the listener instance (or better be)	WITHOUT_CLASSIFICATION	0.9995959078815475	WITHOUT_CLASSIFICATION	4.0409211845245384E-4	DESIGN
//context.unbind(boundName);	WITHOUT_CLASSIFICATION	0.9999864597060472	WITHOUT_CLASSIFICATION	1.3540293952890023E-5	DESIGN
//readResolveObject	WITHOUT_CLASSIFICATION	0.999797808995063	WITHOUT_CLASSIFICATION	2.021910049370211E-4	DESIGN
//cfg.setProperty("hibernate.show_sql", "true");	WITHOUT_CLASSIFICATION	0.9999959561653553	WITHOUT_CLASSIFICATION	4.0438346446312674E-6	DESIGN
// Defensive, convenience methods	WITHOUT_CLASSIFICATION	0.999968718597938	WITHOUT_CLASSIFICATION	3.128140206197757E-5	DESIGN
// Create the SessionFactory from hibernate.cfg.xml	WITHOUT_CLASSIFICATION	0.9999980516434942	WITHOUT_CLASSIFICATION	1.948356505757962E-6	DESIGN
// Make sure you log the exception, as it might be swallowed	WITHOUT_CLASSIFICATION	0.9999184754417728	WITHOUT_CLASSIFICATION	8.152455822721768E-5	DESIGN
// Begin unit of work	WITHOUT_CLASSIFICATION	0.9993630813105505	WITHOUT_CLASSIFICATION	6.36918689449511E-4	DESIGN
// Write HTML header	WITHOUT_CLASSIFICATION	0.9999686916809767	WITHOUT_CLASSIFICATION	3.130831902329297E-5	DESIGN
// Handle actions	WITHOUT_CLASSIFICATION	0.9999834091701268	WITHOUT_CLASSIFICATION	1.659082987316488E-5	DESIGN
// Print page	WITHOUT_CLASSIFICATION	0.9999984599175737	WITHOUT_CLASSIFICATION	1.5400824261962127E-6	DESIGN
// Write HTML footer	WITHOUT_CLASSIFICATION	0.9999914102539809	WITHOUT_CLASSIFICATION	8.589746019183412E-6	DESIGN
// End unit of work	WITHOUT_CLASSIFICATION	0.9970530449536056	WITHOUT_CLASSIFICATION	0.002946955046394499	DESIGN
// Start the session to be used for this request	WITHOUT_CLASSIFICATION	0.9979542878641418	WITHOUT_CLASSIFICATION	0.0020457121358581675	DESIGN
// make the session available to the session factory's "current context"	WITHOUT_CLASSIFICATION	0.9999999923699144	WITHOUT_CLASSIFICATION	7.63008547983332E-9	DESIGN
// pass control along to the rest of the processing chain	WITHOUT_CLASSIFICATION	0.9999999339434257	WITHOUT_CLASSIFICATION	6.60565742641725E-8	DESIGN
// remove session from "current context"	WITHOUT_CLASSIFICATION	0.999990098483543	WITHOUT_CLASSIFICATION	9.901516456922371E-6	DESIGN
// Eager fetch the collection so we can use it detached	WITHOUT_CLASSIFICATION	0.9998783645221914	WITHOUT_CLASSIFICATION	1.2163547780871033E-4	DESIGN
// If we want to handle it bidirectional and detached, we also need to load this // collection with an eager outer-join fetch, this time with Criteria and not HQL:	WITHOUT_CLASSIFICATION	0.999964181842971	WITHOUT_CLASSIFICATION	3.5818157028922764E-5	DESIGN
/*        Event anEvent = (Event) session                .createCriteria(Event.class).setFetchMode("participants", FetchMode.JOIN)                .add( Expression.eq("id", eventId) )                .uniqueResult(); // Eager fetch the colleciton so we can use it detached        */	WITHOUT_CLASSIFICATION	0.9999999592555074	WITHOUT_CLASSIFICATION	4.074449255624977E-8	DESIGN
// End of first unit of work	WITHOUT_CLASSIFICATION	0.9919343947898589	WITHOUT_CLASSIFICATION	0.008065605210141066	DESIGN
// or bidirectional safety method, setting both sides: aPerson.addToEvent(anEvent);	WITHOUT_CLASSIFICATION	0.9999872748869969	WITHOUT_CLASSIFICATION	1.2725113003043149E-5	DESIGN
// Begin second unit of work	WITHOUT_CLASSIFICATION	0.9987563433983859	WITHOUT_CLASSIFICATION	0.0012436566016139953	DESIGN
// Reattachment of aPerson	WITHOUT_CLASSIFICATION	0.9999980033534068	WITHOUT_CLASSIFICATION	1.9966465931510976E-6	DESIGN
// The getEmailAddresses() might trigger a lazy load of the collection	WITHOUT_CLASSIFICATION	0.9933027266239645	WITHOUT_CLASSIFICATION	0.00669727337603557	DESIGN
// We need our tm, so get it now and avoid doing other work // if there is a problem	WITHOUT_CLASSIFICATION	0.9954902595056351	WITHOUT_CLASSIFICATION	0.004509740494364957	DESIGN
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999979935524382	WITHOUT_CLASSIFICATION	2.0064475618278214E-6	DESIGN
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999979935524382	WITHOUT_CLASSIFICATION	2.0064475618278214E-6	DESIGN
// JBC put a version in the node when it created as part of // some internal operation. We are always newer, but if // the JBC version is > 1 something odd has happened	WITHOUT_CLASSIFICATION	0.9998532549384065	WITHOUT_CLASSIFICATION	1.46745061593426E-4	DESIGN
//swaldman 2006-08-28: define c3p0-style configuration parameters for properties with //                     hibernate-specific overrides to detect and warn about conflicting //                     declarations	WITHOUT_CLASSIFICATION	0.9999578244298348	WITHOUT_CLASSIFICATION	4.217557016523496E-5	DESIGN
// Not null if the Isolation level has been specified in the configuration file. // Otherwise, it is left to the Driver's default value.	WITHOUT_CLASSIFICATION	0.9999999805668319	WITHOUT_CLASSIFICATION	1.943316801067745E-8	DESIGN
// Configured outside of Hibernate (i.e. Servlet container, or Java Bean Container // already has Proxool pools running, and this provider is to just borrow one of these	WITHOUT_CLASSIFICATION	0.999912507066579	WITHOUT_CLASSIFICATION	8.74929334210299E-5	DESIGN
// If you're closing down the ConnectionProvider chances are an // is not a real big deal, just warn	WITHOUT_CLASSIFICATION	0.9860067455103764	WITHOUT_CLASSIFICATION	0.0139932544896236	DESIGN
// (AS is always optional, for consistency with SQL/OQL)	WITHOUT_CLASSIFICATION	0.9999999451051971	WITHOUT_CLASSIFICATION	5.4894802879143006E-8	DESIGN
// process the "new" HQL style where aliases are assigned // _after_ the class name or path expression ie. using // the AS construction	WITHOUT_CLASSIFICATION	0.9999998670217983	WITHOUT_CLASSIFICATION	1.3297820169936562E-7	DESIGN
// the loaded owner will be set to null after the collection is removed, // so capture its value as the affected owner so it is accessible to // both pre- and post- events	WITHOUT_CLASSIFICATION	0.9999999984341865	WITHOUT_CLASSIFICATION	1.5658134350793215E-9	DESIGN
// is a primitive type // invokespecial	WITHOUT_CLASSIFICATION	0.9999954408238586	WITHOUT_CLASSIFICATION	4.559176141458736E-6	DESIGN
// array of primitive type // do nothing	WITHOUT_CLASSIFICATION	0.9999207084392012	WITHOUT_CLASSIFICATION	7.929156079882196E-5	DESIGN
// handle a path expression or class name that // appears at the start, in the "new" HQL // style or an alias that appears at the start // in the "old" HQL style	WITHOUT_CLASSIFICATION	0.9999998448084997	WITHOUT_CLASSIFICATION	1.5519150034370171E-7	DESIGN
//handle <=, >=, !=, is not, not between, not in	WITHOUT_CLASSIFICATION	0.9993446867523998	WITHOUT_CLASSIFICATION	6.553132476000939E-4	DESIGN
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999618425563456	WITHOUT_CLASSIFICATION	3.815744365439609E-5	DESIGN
// transfer an explicitly defined entity name // handle the lazy attribute	WITHOUT_CLASSIFICATION	0.9996296735681084	WITHOUT_CLASSIFICATION	3.703264318916404E-4	DESIGN
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999992425177218	WITHOUT_CLASSIFICATION	7.574822782225912E-7	DESIGN
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999992425177218	WITHOUT_CLASSIFICATION	7.574822782225912E-7	DESIGN
// get meta's from // <joined-subclass>	WITHOUT_CLASSIFICATION	0.9999845902352772	WITHOUT_CLASSIFICATION	1.540976472279716E-5	DESIGN
// parameters on the property mapping should // override parameters in the typedef	WITHOUT_CLASSIFICATION	0.9999979835399146	WITHOUT_CLASSIFICATION	2.016460085301447E-6	DESIGN
//fetch="join" overrides default laziness //fetch="join" overrides default laziness	WITHOUT_CLASSIFICATION	0.9999999440633801	WITHOUT_CLASSIFICATION	5.593661989934374E-8	DESIGN
//NOTE SPECIAL CASE: // default to join and non-lazy for the "second join" // of the many-to-many	WITHOUT_CLASSIFICATION	0.9999954524609272	WITHOUT_CLASSIFICATION	4.54753907271565E-6	DESIGN
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999953042495621	WITHOUT_CLASSIFICATION	4.69575043789057E-6	DESIGN
// state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999983698247822	WITHOUT_CLASSIFICATION	1.6301752179070165E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999609652327096	WITHOUT_CLASSIFICATION	3.903476729039761E-5	DESIGN
//element //index -> id	WITHOUT_CLASSIFICATION	0.9999885501668928	WITHOUT_CLASSIFICATION	1.144983310726012E-5	DESIGN
// note that it might be better to iterate the snapshot but this is safe, // assuming the user implements equals() properly, as required by the Set // contract!	WITHOUT_CLASSIFICATION	0.9928528174194099	WITHOUT_CLASSIFICATION	0.007147182580590101	DESIGN
// collections detect changes made via their public interface and mark // themselves as dirty as a performance optimization	WITHOUT_CLASSIFICATION	0.9999952289439586	WITHOUT_CLASSIFICATION	4.771056041364153E-6	DESIGN
// essentially, if the real session is closed allow any // method call to pass through since the real session // will complain by throwing an appropriate exception; // NOTE that allowing close() above has the same basic effect, //   but we capture that there simply to perform the unbind...	WITHOUT_CLASSIFICATION	0.9999841629108153	WITHOUT_CLASSIFICATION	1.5837089184748465E-5	DESIGN
// The default SQLExceptionConverter for all dialects is based on SQLState // since SQLErrorCode is extremely vendor-specific.  Specific Dialects // may override to return whatever is most appropriate for that vendor.	WITHOUT_CLASSIFICATION	0.9999999525001182	WITHOUT_CLASSIFICATION	4.749988180756814E-8	DESIGN
//only necessary for postgre < 7.4 //http://anoncvs.postgresql.org/cvsweb.cgi/pgsql/doc/src/sgml/ref/create_sequence.sgml	WITHOUT_CLASSIFICATION	0.9999993535267201	WITHOUT_CLASSIFICATION	6.464732797830547E-7	DESIGN
// select topic, syntax from information_schema.help // where section like 'Function%' order by section, topic // // see also ->  http://www.h2database.com/html/functions.html	WITHOUT_CLASSIFICATION	0.9999999953845088	WITHOUT_CLASSIFICATION	4.615491247585312E-9	DESIGN
// registerColumnType(Types.VARBINARY, "CHARACTER($l)"); // registerColumnType(Types.BLOB, "CHARACTER($l)" );  // For use prior to CP 11.0 // registerColumnType(Types.CLOB, "CHARACTER($l)" );	WITHOUT_CLASSIFICATION	0.9999811417843784	WITHOUT_CLASSIFICATION	1.8858215621739727E-5	DESIGN
//the BLOB type requires a size arguement - this defaults to //bytes - no arg defaults to 1 whole byte! //other argument mods include K - kilobyte, M - megabyte, G - gigabyte. //refer to the PBdevelopers guide for more info.	WITHOUT_CLASSIFICATION	0.8215188085448449	WITHOUT_CLASSIFICATION	0.17848119145515504	DESIGN
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.9958493772452386	WITHOUT_CLASSIFICATION	0.00415062275476134	DESIGN
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.999745567149326	WITHOUT_CLASSIFICATION	2.544328506740312E-4	DESIGN
// add the comment // nest the main query in an outer select // add the rownnumber bit into the outer query select list	WITHOUT_CLASSIFICATION	0.9999902520328858	WITHOUT_CLASSIFICATION	9.747967114170006E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999609652327096	WITHOUT_CLASSIFICATION	3.903476729039761E-5	DESIGN
// Note: For object <-> SQL datatype mappings see: //	WITHOUT_CLASSIFICATION	0.9999999660848589	WITHOUT_CLASSIFICATION	3.3915141150212146E-8	DESIGN
// TRIM(end_keyword string-expression-1 FROM string-expression-2) // use Hibernate implementation "From" is one of the parameters they pass in position ?3 //registerFunction( "trim", new SQLFunctionTemplate(Hibernate.STRING, "trim(?1 ?2 from ?3)") );	WITHOUT_CLASSIFICATION	0.9999988300617519	WITHOUT_CLASSIFICATION	1.169938248045081E-6	DESIGN
// Whether this dialect has an Identity clause added to the data type or a completely seperate identity // data type	WITHOUT_CLASSIFICATION	0.9998566948220394	WITHOUT_CLASSIFICATION	1.433051779604529E-4	DESIGN
// According to both the ANSI-SQL and JPA specs, trim takes a variable number of parameters between 1 and 4. // at least one paramer (trimSource) is required.  From the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If <trim specification> is omitted, BOTH is assumed. // If <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999999853690602	WITHOUT_CLASSIFICATION	1.46309398794141E-8	DESIGN
/////////////////////////////////////////////////////////////////////// // Prepare persisters and link them up with their cache // region/access-strategy	WITHOUT_CLASSIFICATION	0.9999938810982423	WITHOUT_CLASSIFICATION	6.118901757638925E-6	DESIGN
//Named Queries:	WITHOUT_CLASSIFICATION	0.9999023573905029	WITHOUT_CLASSIFICATION	9.764260949701889E-5	DESIGN
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9499904218748952	WITHOUT_CLASSIFICATION	0.05000957812510478	DESIGN
// does not handle arrays (thats ok, cos they can't be lazy) // or newly instantiated collections, so we can do the cast	WITHOUT_CLASSIFICATION	0.9999898752096491	WITHOUT_CLASSIFICATION	1.0124790350849232E-5	DESIGN
// collection deletions are a special case since update() can add // deletions of collections not loaded by the session.	WITHOUT_CLASSIFICATION	0.9999999910437284	WITHOUT_CLASSIFICATION	8.95627159209794E-9	DESIGN
// we can do the cast since orphan-delete does not apply to: // 1. newly instantiated collections // 2. arrays (we can't track orphans for detached arrays)	WITHOUT_CLASSIFICATION	0.9999999898498262	WITHOUT_CLASSIFICATION	1.0150173790290563E-8	DESIGN
// if the natural-id is marked as non-mutable, it is not retrieved during a // normal database-snapshot operation...	WITHOUT_CLASSIFICATION	0.9999970377470828	WITHOUT_CLASSIFICATION	2.9622529171394743E-6	DESIGN
// watch out for a case where old is still referenced // somewhere in the object graph! (which is a user error)	WITHOUT_CLASSIFICATION	0.9999780740836539	WITHOUT_CLASSIFICATION	2.192591634606388E-5	DESIGN
//slice, to get the columns for this component //property	WITHOUT_CLASSIFICATION	0.99462579957236	WITHOUT_CLASSIFICATION	0.005374200427640076	DESIGN
//int result = 17; //result = 37 * result + type.hashCode(); //result = 37 * result + ( value==null ? 0 : value.hashCode() ); //return result;	WITHOUT_CLASSIFICATION	0.9996983420649695	WITHOUT_CLASSIFICATION	3.016579350303962E-4	DESIGN
// The CollectionEntry.isReached() stuff is just to detect any silly users   // who set up circular or shared references between/to collections.	WITHOUT_CLASSIFICATION	0.9999758083267805	WITHOUT_CLASSIFICATION	2.4191673219506173E-5	DESIGN
// detached collection wrappers that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999647891832484	WITHOUT_CLASSIFICATION	3.521081675162121E-5	DESIGN
// The unique property value represented here may or may not be // serializable, so we do an explicit check here in order to generate // a better error message	WITHOUT_CLASSIFICATION	0.9817096342675228	WITHOUT_CLASSIFICATION	0.01829036573247724	DESIGN
// if the version of a newly instantiated object is not the same // as the version seed value, use that as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999996979074898	WITHOUT_CLASSIFICATION	3.0209251015414134E-7	DESIGN
// ie. we never have to null out a reference to // an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9997901052718823	WITHOUT_CLASSIFICATION	2.0989472811763855E-4	DESIGN
// ignore this row, the collection is in process of // being loaded somewhere further "up" the stack	WITHOUT_CLASSIFICATION	0.9999766042431604	WITHOUT_CLASSIFICATION	2.3395756839686766E-5	DESIGN
// Entity load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // 	WITHOUT_CLASSIFICATION	0.9999643018770206	WITHOUT_CLASSIFICATION	3.569812297954058E-5	DESIGN
// should be ok performance-wise to generate new delegate instances for each // request since these are locally stack-scoped.  Besides, it makes the code // much easier to read than the old TransactionHelper stuff...	WITHOUT_CLASSIFICATION	0.9999915182623612	WITHOUT_CLASSIFICATION	8.481737638777044E-6	DESIGN
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9980852872880576	WITHOUT_CLASSIFICATION	0.0019147127119424334	DESIGN
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9980852872880576	WITHOUT_CLASSIFICATION	0.0019147127119424334	DESIGN
// wrap up any new collections directly referenced by the object // or its components	WITHOUT_CLASSIFICATION	0.9999999328993301	WITHOUT_CLASSIFICATION	6.710066992588477E-8	DESIGN
// remove any snapshot, not really for memory management purposes, but // rather because it might now be stale, and there is no longer any  // EntityEntry to take precedence // This is now handled by removeEntity() //session.getPersistenceContext().removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9946063776059688	WITHOUT_CLASSIFICATION	0.005393622394031183	DESIGN
// skip this check for composite-ids relating to dom4j entity-mode; // alternatively, we could add a check to make sure the incoming id value is // an instance of Element...	WITHOUT_CLASSIFICATION	0.9966376910661844	WITHOUT_CLASSIFICATION	0.003362308933815638	DESIGN
// upgrade the lock if necessary: //lock(result, lockMode);	WITHOUT_CLASSIFICATION	0.9999548769855953	WITHOUT_CLASSIFICATION	4.5123014404715886E-5	DESIGN
// now, any collections that are initialized // inside this block do not get updated - they // are ignored until the next flush	WITHOUT_CLASSIFICATION	0.9998108407628448	WITHOUT_CLASSIFICATION	1.891592371551681E-4	DESIGN
//we must clone embedded composite identifiers, or  //we will get back the same instance that we pass in	WITHOUT_CLASSIFICATION	0.9996937581300437	WITHOUT_CLASSIFICATION	3.0624186995635013E-4	DESIGN
// Sub-insertions should occur before containing insertion so // Try to do the callback now	WITHOUT_CLASSIFICATION	0.9999437798084719	WITHOUT_CLASSIFICATION	5.622019152791093E-5	DESIGN
//the entity is not associated with the session, so //try interceptor and unsaved-value	WITHOUT_CLASSIFICATION	0.9999997291552549	WITHOUT_CLASSIFICATION	2.708447450739995E-7	DESIGN
//scan the query string for class names appearing in the from clause and replace //with all persistent implementors of the class/interface, returning multiple //query strings (make sure we don't pick up a class in the select clause!)	WITHOUT_CLASSIFICATION	0.9897003451793097	WITHOUT_CLASSIFICATION	0.010299654820690205	DESIGN
// save() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999924647664983	WITHOUT_CLASSIFICATION	7.535233501740106E-6	DESIGN
// evict() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999918807010653	WITHOUT_CLASSIFICATION	8.119298934671169E-6	DESIGN
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.5434422504034117	DESIGN	0.45655774959658835	WITHOUT_CLASSIFICATION
//if it is an uninitialized proxy, pointing //with this session, then when it is accessed, //the underlying instance will be "contained"	WITHOUT_CLASSIFICATION	0.9999994597622165	WITHOUT_CLASSIFICATION	5.402377835734219E-7	DESIGN
// Generate an explicit join for the root dot node.   The implied joins will be collected and passed up // to the root dot node.	WITHOUT_CLASSIFICATION	0.9999527793752955	WITHOUT_CLASSIFICATION	4.7220624704455387E-5	DESIGN
// A session is considered to contain an entity only if the entity has // an entry in the session's persistence context and the entry reports // that the entity has not been removed	WITHOUT_CLASSIFICATION	0.9999999998788508	WITHOUT_CLASSIFICATION	1.2114926021043173E-10	DESIGN
// Does the collection referenced by this FromElement // specify an order-by attribute?  If so, attach it to // the query's order-by	WITHOUT_CLASSIFICATION	0.9999927793187756	WITHOUT_CLASSIFICATION	7.22068122446941E-6	DESIGN
// ... and the token could be an identifer and the error is // a mismatched token error ...	WITHOUT_CLASSIFICATION	0.9999853586945551	WITHOUT_CLASSIFICATION	1.464130544480915E-5	DESIGN
// If a where clause was specified in the update/delete query, use it to limit the // returned ids here...	WITHOUT_CLASSIFICATION	0.9999907543498346	WITHOUT_CLASSIFICATION	9.245650165424484E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999609652327096	WITHOUT_CLASSIFICATION	3.903476729039761E-5	DESIGN
// Default implementation: // If this node has a data type, and that data type is not an association, then this is scalar.	WITHOUT_CLASSIFICATION	0.9999978945908712	WITHOUT_CLASSIFICATION	2.1054091288963377E-6	DESIGN
// Resolve the LHS fully, generate implicit joins.  Pass in the property name so that the resolver can // discover foreign key (id) properties.	WITHOUT_CLASSIFICATION	0.9998112229850756	WITHOUT_CLASSIFICATION	1.8877701492425302E-4	DESIGN
// If the propertyType is null and there isn't a parent, just // stop now... there was a problem resolving the node anyway.	WITHOUT_CLASSIFICATION	0.9999944181355508	WITHOUT_CLASSIFICATION	5.581864449179133E-6	DESIGN
//We do not look for an existing join on the same path, because //it makes sense to join twice on the same collection role	WITHOUT_CLASSIFICATION	0.9999723797505964	WITHOUT_CLASSIFICATION	2.7620249403650194E-5	DESIGN
// our parent is another dot node, meaning we are being further dereferenced. // thus we need to generate a join unless the parent refers to the associated // entity's PK (because 'our' table would know the FK).	WITHOUT_CLASSIFICATION	0.999860580164134	WITHOUT_CLASSIFICATION	1.3941983586601478E-4	DESIGN
/*public final Currency getCurrency(int col) throws HibernateException {	WITHOUT_CLASSIFICATION	0.955267613015868	WITHOUT_CLASSIFICATION	0.04473238698413193	DESIGN
// here, we have two possibilities: // 	WITHOUT_CLASSIFICATION	0.639435896632407	WITHOUT_CLASSIFICATION	0.3605641033675931	DESIGN
// Set the unresolved path in this node and the parent. // Set the text for the parent.	WITHOUT_CLASSIFICATION	0.9998936904002051	WITHOUT_CLASSIFICATION	1.0630959979488993E-4	DESIGN
// Get the first child to be considered.  Sub-classes may do this differently in order to skip nodes that // are not select expressions (e.g. DISTINCT).	WITHOUT_CLASSIFICATION	0.9999987938045919	WITHOUT_CLASSIFICATION	1.2061954081078195E-6	DESIGN
// If this is an entity and the property is the identifier property, then use getIdentifierType(). //      Note that the propertyName.equals( propertyPath ) checks whether we have a component //      key reference, where the component class property name is the same as the //      entity id property name; if the two are not equal, this is the case and //      we'd need to "fall through" to using the property mapping.	WITHOUT_CLASSIFICATION	0.999846055381684	WITHOUT_CLASSIFICATION	1.5394461831598155E-4	DESIGN
// for a subquery, the alias to use depends on a few things (we // already know this is not an overall SELECT): //      1) if this FROM_ELEMENT represents a correlation to the //          outer-most query //              A) if the outer query represents a multi-table //                  persister, we need to use the given alias //                  in anticipation of one of the multi-table //                  executors being used (as this subquery will //                  actually be used in the "id select" phase //                  of that multi-table executor) //              B) otherwise, we need to use the persister's //                  table name as the column qualification //      2) otherwise (not correlated), use the given alias	WITHOUT_CLASSIFICATION	0.9984443226761233	WITHOUT_CLASSIFICATION	0.0015556773238766266	DESIGN
// Not a collection? // Return the entity property mapping.	WITHOUT_CLASSIFICATION	0.9999581672508662	WITHOUT_CLASSIFICATION	4.183274913381015E-5	DESIGN
// collection of <many-to-any/> mappings... // used to circumvent the component-collection check below...	WITHOUT_CLASSIFICATION	0.9999861925221581	WITHOUT_CLASSIFICATION	1.3807477841819846E-5	DESIGN
// Otherwise, the destination node was implied by the FROM clause and the FROM clause processor // will automatically add it in the right place.	WITHOUT_CLASSIFICATION	0.9999550203226611	WITHOUT_CLASSIFICATION	4.497967733894631E-5	DESIGN
// If the first identifier in the path referrs to the class alias (not the class name), then this // is a correlated subselect.  If it's a correlated sub-select, use the existing table alias.  Otherwise // generate a new one.	WITHOUT_CLASSIFICATION	0.9999996177096326	WITHOUT_CLASSIFICATION	3.8229036729728323E-7	DESIGN
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999999911560313	WITHOUT_CLASSIFICATION	8.843968646098803E-9	DESIGN
// An ident node can represent an index expression if the ident // represents a naked property ref //      *Note: this makes the assumption (which is currently the case //      in the hql-sql grammar) that the ident is first resolved //      itself (addrExpr -> resolve()).  The other option, if that //      changes, is to call resolve from here; but it is //      currently un-needed overhead.	WITHOUT_CLASSIFICATION	0.9999148852673048	WITHOUT_CLASSIFICATION	8.51147326952991E-5	DESIGN
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9990538538249362	WITHOUT_CLASSIFICATION	9.461461750638058E-4	DESIGN
// If this is an implied join in a FROM clause, then use ANSI-style joining, and set the // flag on the FromElement that indicates that it was implied in the FROM clause itself.	WITHOUT_CLASSIFICATION	0.9999950171048552	WITHOUT_CLASSIFICATION	4.982895144862988E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999609652327096	WITHOUT_CLASSIFICATION	3.903476729039761E-5	DESIGN
// For an explicit many-to-many relationship, add a second join from the intermediate  // (many-to-many) table to the destination table.  Also, make sure that the from element's  // idea of the destination is the destination table.	WITHOUT_CLASSIFICATION	0.999998392186984	WITHOUT_CLASSIFICATION	1.607813015922094E-6	DESIGN
// Reset the node type, because the rest of the system is expecting FROM_FRAGMENT, all we wanted was // for the factory to create the right sub-class.  This might get reset again later on anyway to make the // SQL generation simpler.	WITHOUT_CLASSIFICATION	0.9853144102168739	WITHOUT_CLASSIFICATION	0.014685589783126158	DESIGN
//explicit = true;	WITHOUT_CLASSIFICATION	0.9999979681012682	WITHOUT_CLASSIFICATION	2.03189873179799E-6	DESIGN
//sqlResultTypeList.add( type ); // Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999995981644857	WITHOUT_CLASSIFICATION	4.018355143142129E-7	DESIGN
// If the expression list has exactly one expression, and the type of the expression is a collection // then this might be a collection function, such as index(c) or size(c).	WITHOUT_CLASSIFICATION	0.9999998698350424	WITHOUT_CLASSIFICATION	1.30164957478073E-7	DESIGN
// Need to parse off the column qualifiers; this is assuming (which is true as of now) // that this is only used from update and delete HQL statement parsing	WITHOUT_CLASSIFICATION	0.9999843009771325	WITHOUT_CLASSIFICATION	1.5699022867383222E-5	DESIGN
// for regression testing against output from the old parser... // found it easiest to simply reorder the FromElements here into ascending order // in terms of injecting them into the resulting sql ast in orders relative to those // expected by the old parser; this is definitely another of those "only needed // for regression purposes".  The SyntheticAndFactory, then, simply injects them as it // encounters them.	WITHOUT_CLASSIFICATION	0.9999999988717818	WITHOUT_CLASSIFICATION	1.128218194345183E-9	DESIGN
// The uber-rule here is that we need to include  subclass joins if // the FromElement is in any way dereferenced by a property from // the subclass table; otherwise we end up with column references // qualified by a non-existent table reference in the resulting SQL...	WITHOUT_CLASSIFICATION	0.9999988129404714	WITHOUT_CLASSIFICATION	1.1870595285371768E-6	DESIGN
// classic translator does not support collection of ordinal // param metadata	WITHOUT_CLASSIFICATION	0.999999062577912	WITHOUT_CLASSIFICATION	9.374220880062317E-7	DESIGN
// The following variables are stacks that keep information about each subexpression // in the list of nested subexpressions we are currently processing.	WITHOUT_CLASSIFICATION	0.9999949536844884	WITHOUT_CLASSIFICATION	5.0463155115566475E-6	DESIGN
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999618425563456	WITHOUT_CLASSIFICATION	3.815744365439609E-5	DESIGN
// should not be able to reach last without maxPosition being set // unless there are no results	WITHOUT_CLASSIFICATION	0.9999999912502586	WITHOUT_CLASSIFICATION	8.749741339034844E-9	DESIGN
// we found it in the temp PC.  Should indicate we are in the midst of processing a result set // containing eager fetches via join fetch	WITHOUT_CLASSIFICATION	0.9999981541135624	WITHOUT_CLASSIFICATION	1.8458864374977316E-6	DESIGN
//do not use proxiesByKey, since not all //proxies that point to this session's //instances are in that collection!	WITHOUT_CLASSIFICATION	0.9999453285306706	WITHOUT_CLASSIFICATION	5.467146932942847E-5	DESIGN
// if there is no TM configured, we will not be able to access // the javax.transaction.Transaction object in order to // register a synch anyway.	WITHOUT_CLASSIFICATION	0.9999998007941572	WITHOUT_CLASSIFICATION	1.9920584287464612E-7	DESIGN
// Since the result set cursor is always left at the first // physical row after the "last processed", we need to jump // back one position to get the key value we are interested // in skipping	WITHOUT_CLASSIFICATION	0.9999998575740933	WITHOUT_CLASSIFICATION	1.424259067226875E-7	DESIGN
//true if this is a query and we are loading multiple instances of the same collection role //otherwise this is a CollectionInitializer and we are loading up a single collection or batch	WITHOUT_CLASSIFICATION	0.5623414668868956	WITHOUT_CLASSIFICATION	0.43765853311310454	DESIGN
// we don't need to worry about existing version being uninitialized // because this block isn't called by a re-entrant load (re-entrant // loads _always_ have lock mode NONE)	WITHOUT_CLASSIFICATION	0.9901987820155748	WITHOUT_CLASSIFICATION	0.009801217984425233	DESIGN
// add temp entry so that the next step is circular-reference // safe - only needed because some types don't take proper // advantage of two-phase-load (esp. components)	WITHOUT_CLASSIFICATION	0.9999852392682771	WITHOUT_CLASSIFICATION	1.4760731722920717E-5	DESIGN
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999987380146185	WITHOUT_CLASSIFICATION	1.261985381456811E-6	DESIGN
// log a message about potential connection leaks	WITHOUT_CLASSIFICATION	0.9999999887349331	WITHOUT_CLASSIFICATION	1.1265066822590336E-8	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999609652327096	WITHOUT_CLASSIFICATION	3.903476729039761E-5	DESIGN
// this has been shown to happen occasionally in rare cases // when using a transaction manager + transaction-timeout // where the timeout calls back through Hibernate's // registered transaction synchronization on a separate // "reaping" thread.  In cases where that reaping thread // executes through this block at the same time the main // application thread does we can get into situations where // these CMEs occur.  And though it is not "allowed" per-se, // the end result without handling it specifically is infinite // looping.  So here, we simply break the loop	WITHOUT_CLASSIFICATION	0.9999999995928754	WITHOUT_CLASSIFICATION	4.0712452363529755E-10	DESIGN
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9581789534674808	WITHOUT_CLASSIFICATION	0.04182104653251925	DESIGN
// can't cache this stuff either (per-invocation) // we are given a map of user-alias -> lock mode // create a new map of sql-alias -> lock mode	WITHOUT_CLASSIFICATION	0.9999549772563223	WITHOUT_CLASSIFICATION	4.5022743677592E-5	DESIGN
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns //getCollectionTable().createUniqueKey( getIdentifier().getConstraintColumns() );	WITHOUT_CLASSIFICATION	0.999999942532311	WITHOUT_CLASSIFICATION	5.7467689107793796E-8	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999865717267211	WITHOUT_CLASSIFICATION	1.3428273278835507E-5	DESIGN
//isSet = collection.isSet(); //isSorted = collection.isSorted();	WITHOUT_CLASSIFICATION	0.9999991197021765	WITHOUT_CLASSIFICATION	8.802978235617014E-7	DESIGN
//lists, arrays //sets, maps, bags	WITHOUT_CLASSIFICATION	0.9999995942206653	WITHOUT_CLASSIFICATION	4.057793347477524E-7	DESIGN
// we finish all the "removes" first to take care of possible unique // constraints and so that we can take better advantage of batching	WITHOUT_CLASSIFICATION	0.9999999057276557	WITHOUT_CLASSIFICATION	9.427234421220085E-8	DESIGN
//use a combination of foreign key columns and pk columns, since //the ordering of removal and addition is not guaranteed when //a child moves from one parent to another	WITHOUT_CLASSIFICATION	0.9990799522439627	WITHOUT_CLASSIFICATION	9.200477560373267E-4	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999865717267211	WITHOUT_CLASSIFICATION	1.3428273278835507E-5	DESIGN
//information about properties of this class, //including inherited properties //(only really needed for updatable/insertable properties)	WITHOUT_CLASSIFICATION	0.9999490345709889	WITHOUT_CLASSIFICATION	5.09654290110912E-5	DESIGN
// all this only really needs to consider properties // of this class, not its subclasses, but since we // are reusing code used for sequential selects, we // use the subclass closure	WITHOUT_CLASSIFICATION	0.9951083154253267	WITHOUT_CLASSIFICATION	0.004891684574673234	DESIGN
// Here we render the select column list based on the properties defined as being generated. // For partial component generation, we currently just re-select the whole component // rather than trying to handle the individual generated portions.	WITHOUT_CLASSIFICATION	0.9995447123206193	WITHOUT_CLASSIFICATION	4.5528767938074423E-4	DESIGN
// this is the root (versioned) table, and we are using version-based // optimistic locking;  if we are not updating the version, also don't // check it (unless this is a "generated" version column)!	WITHOUT_CLASSIFICATION	0.9995681860029538	WITHOUT_CLASSIFICATION	4.318139970461564E-4	DESIGN
//optimistic-lock="all", include all updatable properties //optimistic-lock="dirty", include all properties we are updating this time	WITHOUT_CLASSIFICATION	0.9998723224132186	WITHOUT_CLASSIFICATION	1.276775867815068E-4	DESIGN
// this property belongs to the table, and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999056822027834	WITHOUT_CLASSIFICATION	9.431779721658497E-5	DESIGN
// check to see if the connection is in auto-commit  // mode (no connection means aggressive connection // release outside a JTA transaction context, so MUST // be autocommit mode)	WITHOUT_CLASSIFICATION	0.9999999996257293	WITHOUT_CLASSIFICATION	3.7427074308984423E-10	DESIGN
// need to treat this as if it where optimistic-lock="all" (dirty does *not* make sense); // first we need to locate the "loaded" state // // Note, it potentially could be a proxy, so perform the location the safe way...	WITHOUT_CLASSIFICATION	0.999932025639065	WITHOUT_CLASSIFICATION	6.797436093503643E-5	DESIGN
// we *always* assume an instance with a null // identifier or no identifier property is unsaved!	WITHOUT_CLASSIFICATION	0.9999987930617205	WITHOUT_CLASSIFICATION	1.2069382795485359E-6	DESIGN
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.9999977368698589	WITHOUT_CLASSIFICATION	2.2631301410173662E-6	DESIGN
//allow any identifier quoted with backtick //only recognizes identifiers beginning with a letter	WITHOUT_CLASSIFICATION	0.9999983477237944	WITHOUT_CLASSIFICATION	1.6522762056734954E-6	DESIGN
//following doesn't handle (null, not null) but unnecessary //since this would mean all rows	WITHOUT_CLASSIFICATION	0.9699915733451887	WITHOUT_CLASSIFICATION	0.030008426654811318	DESIGN
// IMPL NOTE : due to the delayed population of setters (setters cached // 	WITHOUT_CLASSIFICATION	0.9977690208760501	WITHOUT_CLASSIFICATION	0.002230979123949913	DESIGN
// we need to dirty check collections, since they can cause an owner // version number increment	WITHOUT_CLASSIFICATION	0.9999941656905519	WITHOUT_CLASSIFICATION	5.834309448086455E-6	DESIGN
//return the id, so we can use it to reset the proxy id //return result;	WITHOUT_CLASSIFICATION	0.9993055130820535	WITHOUT_CLASSIFICATION	6.9448691794645E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999609652327096	WITHOUT_CLASSIFICATION	3.903476729039761E-5	DESIGN
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9997382611783512	WITHOUT_CLASSIFICATION	2.617388216488308E-4	DESIGN
// We now have the value of the property-ref we reference.  However, // we need to dig a little deeper, as that property might also be // an entity type, in which case we need to resolve its identitifier	WITHOUT_CLASSIFICATION	0.9998803865018546	WITHOUT_CLASSIFICATION	1.1961349814536902E-4	DESIGN
// Retrieve the value of the designated column in the current row of this // ResultSet object as a java.io.Reader object	WITHOUT_CLASSIFICATION	0.9999999404473937	WITHOUT_CLASSIFICATION	5.955260631974674E-8	DESIGN
//not absolutely necessary, but helps for some //equals()/hashCode() implementations	WITHOUT_CLASSIFICATION	0.9997948283094795	WITHOUT_CLASSIFICATION	2.05171690520395E-4	DESIGN
//this should be a call to resolve(), not resolveIdentifier(),  //'cos it might be a property-ref, and we did not cache the //referenced value	WITHOUT_CLASSIFICATION	0.9515490741934347	DESIGN	0.04845092580656531	WITHOUT_CLASSIFICATION
// If we have <tt>not-found="ignore"</tt> association mapped to a // formula, we always need to dirty check it, so we can update the // second-level cache	WITHOUT_CLASSIFICATION	0.9999989204054455	WITHOUT_CLASSIFICATION	1.0795945545743876E-6	DESIGN
// can't just return null here, since that would // cause an owning component to become null	WITHOUT_CLASSIFICATION	0.9998158835699571	WITHOUT_CLASSIFICATION	1.841164300429428E-4	DESIGN
//for arrays, replaceElements() may return a different reference, since //the array length might not match	WITHOUT_CLASSIFICATION	0.9999779324895494	WITHOUT_CLASSIFICATION	2.2067510450650695E-5	DESIGN
// actual cache of the entries.  soft references are used for both the keys and the // values here since the values pertaining to the MRU entries are kept in a // seperate hard reference cache (to avoid their enqueuement/garbage-collection).	WITHOUT_CLASSIFICATION	0.9999999860900209	WITHOUT_CLASSIFICATION	1.3909978929564E-8	DESIGN
// as soon as we encounter our first letter, return the substring // from that position	WITHOUT_CLASSIFICATION	0.9999996933676051	WITHOUT_CLASSIFICATION	3.066323949272214E-7	DESIGN
// Note : expected in the syntax: //      type=listenerClass //          ({sep}type=listenerClass)* // where {sep} is any whitespace or comma	WITHOUT_CLASSIFICATION	0.9999999745548109	WITHOUT_CLASSIFICATION	2.5445189052991646E-8	DESIGN
// isTransactionCallbackRegistered denotes whether any Hibernate // Transaction has registered as a callback against this // JDBCContext; only one such callback is allowed.  Directly // serializing this value causes problems with JDBCTransaction, // or really any Transaction impl where the callback is local // to the Transaction instance itself, since that Transaction // is not serialized along with the JDBCContext.  Thus we // handle that fact here explicitly...	WITHOUT_CLASSIFICATION	0.9890727180463978	WITHOUT_CLASSIFICATION	0.010927281953602225	DESIGN
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999990329898727	WITHOUT_CLASSIFICATION	9.670101273360358E-7	DESIGN
// We call getKeyFromResultSet() here so that we can know the // key value upon which to perform the breaking logic.  However, // it is also then called from getRowFromResultSet() which is certainly // not the most efficient.  But the call here is needed, and there // currently is no other way without refactoring of the doQuery()/getRowFromResultSet() // methods	WITHOUT_CLASSIFICATION	0.9999861070724725	WITHOUT_CLASSIFICATION	1.3892927527594801E-5	DESIGN
// This check is needed since processing leaves the cursor // after the last physical row for the current logical row; // thus if we are after the last physical row, this might be // caused by either: //      1) scrolling to the last logical row //      2) scrolling past the last logical row // In the latter scenario, the previous logical row // really is the last logical row. // // In all other cases, we should process back two // logical records (the current logic row, plus the // previous logical row).	WITHOUT_CLASSIFICATION	0.9712682013994242	WITHOUT_CLASSIFICATION	0.02873179860057588	DESIGN
// and perform the load	WITHOUT_CLASSIFICATION	0.9999995195290695	WITHOUT_CLASSIFICATION	4.804709305390531E-7	DESIGN
//important: reuse the same event instances for performance!	WITHOUT_CLASSIFICATION	0.9789121208584546	WITHOUT_CLASSIFICATION	0.021087879141545387	DESIGN
//this is a query and we are loading multiple instances of the same collection role	WITHOUT_CLASSIFICATION	0.6891153655795804	WITHOUT_CLASSIFICATION	0.31088463442041964	DESIGN
// we found a collection element in the result set	WITHOUT_CLASSIFICATION	0.9999866787247066	WITHOUT_CLASSIFICATION	1.3321275293401595E-5	DESIGN
// we did not find a collection element in the result set, so we // ensure that a collection is created with the owner's identifier, // since what we have is an empty collection	WITHOUT_CLASSIFICATION	0.9999911503486489	WITHOUT_CLASSIFICATION	8.849651350999805E-6	DESIGN
// this is a collection initializer, so we must create a collection // for each of the passed-in keys, to account for the possibility // that the collection is empty and has no rows in the result set	WITHOUT_CLASSIFICATION	0.8863500938291429	WITHOUT_CLASSIFICATION	0.11364990617085716	DESIGN
// grab its state from the ResultSet and keep it in the Session // (but don't yet initialize the object itself) // note that we acquire LockMode.READ even if it was not requested	WITHOUT_CLASSIFICATION	0.9999996993061595	WITHOUT_CLASSIFICATION	3.0069384043215354E-7	DESIGN
// a many-to-many; // decrement currentDepth here to allow join across the association table // without exceeding MAX_FETCH_DEPTH (i.e. the "currentDepth - 1" bit)	WITHOUT_CLASSIFICATION	0.9999919192661725	WITHOUT_CLASSIFICATION	8.08073382742763E-6	DESIGN
// if not a composite key, use "foo in (?, ?, ?)" for batching // if no batch, and not a composite key, use "foo = ?"	WITHOUT_CLASSIFICATION	0.9999996997683284	WITHOUT_CLASSIFICATION	3.0023167169468185E-7	DESIGN
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999988590454467	WITHOUT_CLASSIFICATION	1.140954553334799E-6	DESIGN
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9999926533384046	WITHOUT_CLASSIFICATION	7.346661595405305E-6	DESIGN
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9999926533384046	WITHOUT_CLASSIFICATION	7.346661595405305E-6	DESIGN
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.9999053833578206	WITHOUT_CLASSIFICATION	9.461664217940311E-5	DESIGN
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999996854560179	WITHOUT_CLASSIFICATION	3.145439820135147E-7	DESIGN
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999742494798042	WITHOUT_CLASSIFICATION	2.575052019592588E-5	DESIGN
/**	WITHOUT_CLASSIFICATION	0.9402094942938763	DESIGN	0.05979050570612358	WITHOUT_CLASSIFICATION
// ignore	WITHOUT_CLASSIFICATION	0.9999967332423346	WITHOUT_CLASSIFICATION	3.266757665412638E-6	DESIGN
// ignore	WITHOUT_CLASSIFICATION	0.9999967332423346	WITHOUT_CLASSIFICATION	3.266757665412638E-6	DESIGN
//        }	WITHOUT_CLASSIFICATION	0.9999896646949883	WITHOUT_CLASSIFICATION	1.0335305011644244E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999609652327096	WITHOUT_CLASSIFICATION	3.903476729039761E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999609652327096	WITHOUT_CLASSIFICATION	3.903476729039761E-5	DESIGN
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.999950286753838	WITHOUT_CLASSIFICATION	4.9713246161926756E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999609652327096	WITHOUT_CLASSIFICATION	3.903476729039761E-5	DESIGN
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.9999111950941556	WITHOUT_CLASSIFICATION	8.880490584444047E-5	DESIGN
// at this point we have (drivingSqlAlias) the SQL alias of the driving table // corresponding to the given user alias.  However, the driving table is not // (necessarily) the table against which we want to apply locks.  Mainly, // the exception case here is joined-subclass hierarchies where we instead // want to apply the lock against the root table (for all other strategies, // it just happens that driving and root are the same).	WITHOUT_CLASSIFICATION	0.9999999724773151	WITHOUT_CLASSIFICATION	2.7522684990696316E-8	DESIGN
// the column doesnt exist at all.	WITHOUT_CLASSIFICATION	0.9999992566337222	WITHOUT_CLASSIFICATION	7.43366277779105E-7	DESIGN
// we have a mapped identifier property and the root of // the incoming property path matched that identifier // property	WITHOUT_CLASSIFICATION	0.9999991582210873	WITHOUT_CLASSIFICATION	8.417789127580795E-7	DESIGN
// we have an embedded composite identifier	WITHOUT_CLASSIFICATION	0.9999991457807972	WITHOUT_CLASSIFICATION	8.542192028713514E-7	DESIGN
// both many-to-one and one-to-one are represented as a // Property.  EntityPersister is relying on this value to // determine "lazy fetch groups" in terms of field-level // interception.  So we need to make sure that we return // true here for the case of many-to-one and one-to-one // with lazy="no-proxy" // // * impl note - lazy="no-proxy" currently forces both // lazy and unwrap to be set to true.  The other case we // are extremely interested in here is that of lazy="proxy" // where lazy is set to true, but unwrap is set to false. // thus we use both here under the assumption that this // return is really only ever used during persister // construction to determine the lazy property/field fetch // groupings.  If that assertion changes then this check // needs to change as well.  Partially, this is an issue with // the overloading of the term "lazy" here...	WITHOUT_CLASSIFICATION	0.9999976246575193	WITHOUT_CLASSIFICATION	2.375342480656659E-6	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999101284413406	WITHOUT_CLASSIFICATION	8.987155865939879E-5	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999101284413406	WITHOUT_CLASSIFICATION	8.987155865939879E-5	DESIGN
/*rootTableName = persistentClass.getRootTable().getQualifiedName( 	WITHOUT_CLASSIFICATION	0.9999986162901954	WITHOUT_CLASSIFICATION	1.3837098045229596E-6	DESIGN
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.999978082477291	WITHOUT_CLASSIFICATION	2.191752270892596E-5	DESIGN
// Custom sql	WITHOUT_CLASSIFICATION	0.9999978795154375	WITHOUT_CLASSIFICATION	2.1204845624598525E-6	DESIGN
/*protected void initPropertyPaths(	WITHOUT_CLASSIFICATION	0.9820810465998736	WITHOUT_CLASSIFICATION	0.017918953400126322	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999921446093955	WITHOUT_CLASSIFICATION	7.855390604518883E-6	DESIGN
//Custom SQL (would be better if these were private)	WITHOUT_CLASSIFICATION	0.996580257514861	WITHOUT_CLASSIFICATION	0.0034197424851390235	DESIGN
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999281771378944	WITHOUT_CLASSIFICATION	7.182286210558823E-5	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999921446093955	WITHOUT_CLASSIFICATION	7.855390604518883E-6	DESIGN
// aliases for identifier ( alias.id ); skip if the entity defines a non-id property named 'id'	WITHOUT_CLASSIFICATION	0.9999987611621358	WITHOUT_CLASSIFICATION	1.23883786416297E-6	DESIGN
//decide which ResultSet to get the property value from:	WITHOUT_CLASSIFICATION	0.9996209630906631	WITHOUT_CLASSIFICATION	3.79036909336999E-4	DESIGN
//note: it is conceptually possible that a UserType could map null to //	WITHOUT_CLASSIFICATION	0.9693593516199862	WITHOUT_CLASSIFICATION	0.03064064838001387	DESIGN
// the contract of EntityTuplizer.determineConcreteSubclassEntityName says that returning null // is an indication that the specified entity-name (this.getEntityName) should be used.	WITHOUT_CLASSIFICATION	0.9996413804481512	WITHOUT_CLASSIFICATION	3.586195518488388E-4	DESIGN
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.9999977368698589	WITHOUT_CLASSIFICATION	2.2631301410173662E-6	DESIGN
// cache these since they are stateless // this one could even be static...	WITHOUT_CLASSIFICATION	0.9999985287580211	WITHOUT_CLASSIFICATION	1.4712419789191006E-6	DESIGN
//"as" is not in KEYWORDS	WITHOUT_CLASSIFICATION	0.9998573416031532	WITHOUT_CLASSIFICATION	1.42658396846881E-4	DESIGN
// --Commented out by Inspection (12/4/04 9:10 AM): public abstract void addCondition(String alias, String[] columns, String condition);	WITHOUT_CLASSIFICATION	0.9999994573423668	WITHOUT_CLASSIFICATION	5.426576331717894E-7	DESIGN
//use the id column alias	WITHOUT_CLASSIFICATION	0.9999598381759291	WITHOUT_CLASSIFICATION	4.0161824070823106E-5	DESIGN
//private List aliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999993755045871	WITHOUT_CLASSIFICATION	6.244954129331984E-7	DESIGN
//columns.add(columnName); //aliases.add(tableAlias);	WITHOUT_CLASSIFICATION	0.9999980239307504	WITHOUT_CLASSIFICATION	1.9760692494596722E-6	DESIGN
//where fragment must be empty!	WITHOUT_CLASSIFICATION	0.9995388856284397	WITHOUT_CLASSIFICATION	4.611143715602899E-4	DESIGN
// revert to traditional hibernate behavior of setting initialPoolSize to minPoolSize // unless otherwise specified with a c3p0.*-style parameter.	WITHOUT_CLASSIFICATION	0.9999807669747489	WITHOUT_CLASSIFICATION	1.9233025251031626E-5	DESIGN
//arbitrary on clause ignored!!	WITHOUT_CLASSIFICATION	0.9999593622135765	WITHOUT_CLASSIFICATION	4.063778642346308E-5	DESIGN
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.999996372906526	WITHOUT_CLASSIFICATION	3.627093474002355E-6	DESIGN
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.999996372906526	WITHOUT_CLASSIFICATION	3.627093474002355E-6	DESIGN
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999659551645526	WITHOUT_CLASSIFICATION	3.404483544741867E-5	DESIGN
// Essentially: // 1) If we have a local (Hibernate) transaction in progress //      and it already has the UserTransaction cached, use that //      UserTransaction to determine the status. // 2) If a transaction manager has been located, use //      that transaction manager to determine the status. // 3) Finally, as the last resort, try to lookup the //      UserTransaction via JNDI and use that to determine the //      status.	WITHOUT_CLASSIFICATION	0.9998611291839794	WITHOUT_CLASSIFICATION	1.388708160204885E-4	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.9997309057501701	WITHOUT_CLASSIFICATION	2.690942498298937E-4	DESIGN
//swallow it (the transaction _was_ successful or successfully rolled back)	WITHOUT_CLASSIFICATION	0.9999788530461104	WITHOUT_CLASSIFICATION	2.114695388956013E-5	DESIGN
// ignore it	WITHOUT_CLASSIFICATION	0.9999973218505698	WITHOUT_CLASSIFICATION	2.678149430265873E-6	DESIGN
// we need to dirty check many-to-ones with not-found="ignore" in order  // to update the cache (not the database), since in this case a null // entity reference can lose information	WITHOUT_CLASSIFICATION	0.9998788753634454	WITHOUT_CLASSIFICATION	1.211246365546019E-4	DESIGN
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999705381231377	WITHOUT_CLASSIFICATION	2.9461876862198236E-5	DESIGN
// Regions can get instantiated in the course of normal work (e.g. // a named query region will be created the first time the query is // executed), so suspend any ongoing tx	WITHOUT_CLASSIFICATION	0.9999999853465155	WITHOUT_CLASSIFICATION	1.465348454332011E-8	DESIGN
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999964653683615	WITHOUT_CLASSIFICATION	3.5346316384601246E-6	DESIGN
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.999979898189835	WITHOUT_CLASSIFICATION	2.0101810164989464E-5	DESIGN
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999568511853977	WITHOUT_CLASSIFICATION	4.314881460237572E-5	DESIGN
// NOTE : this is being used from the process of shutting down a // SessionFactory. Specific things to consider: // (1) this clearing of the region should not propagate to // other nodes on the cluster (if any); this is the // cache-mode-local option bit... // (2) really just trying a best effort to cleanup after // ourselves; lock failures, etc are not critical here; // this is the fail-silently option bit...	WITHOUT_CLASSIFICATION	0.9713314279622006	WITHOUT_CLASSIFICATION	0.02866857203779945	DESIGN
// need to extract the component values and check for subtype replacements...	WITHOUT_CLASSIFICATION	0.999996254460047	WITHOUT_CLASSIFICATION	3.7455399529290033E-6	DESIGN
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999941902257536	WITHOUT_CLASSIFICATION	5.809774246316472E-6	DESIGN
// for now, just "re-flatten" the metamodel since this is temporary stuff anyway (HHH-1907)	WITHOUT_CLASSIFICATION	0.9999806915630737	WITHOUT_CLASSIFICATION	1.9308436926320765E-5	DESIGN
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999232602554795	WITHOUT_CLASSIFICATION	7.673974452051036E-5	DESIGN
//This solution would allow us to eliminate the owner arg to disassemble(), but //what if the collection was null, and then later had elements added? seems unsafe //session.getPersistenceContext().getCollectionEntry( (PersistentCollection) value ).getKey();	WITHOUT_CLASSIFICATION	0.9999977466862074	WITHOUT_CLASSIFICATION	2.2533137924928103E-6	DESIGN
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999998022760467	WITHOUT_CLASSIFICATION	1.977239533286756E-7	DESIGN
// some collections are not lazy:	WITHOUT_CLASSIFICATION	0.9999515483146387	WITHOUT_CLASSIFICATION	4.8451685361392856E-5	DESIGN
// Here we don't want to suspend the tx. If we do: // 1) We might be caching query results that reflect uncommitted // changes. No tx == no WL on cache node, so other threads // can prematurely see those query results // 2) No tx == immediate replication. More overhead, plus we // spread issue #1 above around the cluster	WITHOUT_CLASSIFICATION	0.9998179749557191	WITHOUT_CLASSIFICATION	1.8202504428101242E-4	DESIGN
// return the (fully resolved) identifier value, but do not resolve // to the actual referenced entity instance // NOTE: the owner of the association is not really the owner of the id!	WITHOUT_CLASSIFICATION	0.9988235952013232	WITHOUT_CLASSIFICATION	0.0011764047986768137	DESIGN
// Add a zero (or quite low) timeout option so we don't block. // Ignore any TimeoutException. Basically we forego caching the // query result in order to avoid blocking. // Reads are done with suspended tx, so they should not hold the // lock for long.  Not caching the query result is OK, since // any subsequent read will just see the old result with its // out-of-date timestamp; that result will be discarded and the // db query performed again.	WITHOUT_CLASSIFICATION	0.9952179198172149	WITHOUT_CLASSIFICATION	0.004782080182785129	DESIGN
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.942717869535437	WITHOUT_CLASSIFICATION	0.05728213046456295	DESIGN
// We have the JBCWriteMutex, so no other *local* thread will  // be trying to write this key.  // It's possible here some remote thread has come in and // changed the values again, but since we are reading the // values to write to JBC right now, we know we are writing // the latest values; i.e. we don't assume that what we cached // in entry.update() above is what we should write to JBC *now*. // Our write could be redundant, i.e. we are writing what // some remote thread just came in an wrote.  There is a chance  // that yet another remote thread will update us, and we'll then // overwrite that later data in JBC.  But, all remote nodes will // ignore that change in their localCache; the only place it  // will live will be in JBC, where it can only effect the  // initial state transfer values on newly joined nodes  // (i.e. populateLocalCache()).	WITHOUT_CLASSIFICATION	0.721004221505495	WITHOUT_CLASSIFICATION	0.2789957784945051	DESIGN
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.999977729005283	WITHOUT_CLASSIFICATION	2.2270994716963067E-5	DESIGN
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.999977729005283	WITHOUT_CLASSIFICATION	2.2270994716963067E-5	DESIGN
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9999852207132885	WITHOUT_CLASSIFICATION	1.4779286711341653E-5	DESIGN
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9999938148286575	WITHOUT_CLASSIFICATION	6.185171342596893E-6	DESIGN
// we need to obtain the lock before any actions are // executed, since this may be an inverse="true" // bidirectional association and it is one of the // earlier entity actions which actually updates // the database (this action is resposible for // second-level cache invalidation only)	WITHOUT_CLASSIFICATION	0.9999999649281196	WITHOUT_CLASSIFICATION	3.5071880289404225E-8	DESIGN
//postDelete: // After actually deleting a row, record the fact that the instance no longer  // exists on the database (needed for identity-column key generation), and // remove it from the session cache	WITHOUT_CLASSIFICATION	0.9999975113781835	WITHOUT_CLASSIFICATION	2.4886218164203246E-6	DESIGN
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999984075890407	WITHOUT_CLASSIFICATION	1.5924109593563303E-6	DESIGN
// todo : what else to do here?	DESIGN	0.8311550901372536	WITHOUT_CLASSIFICATION	0.1688449098627463	DESIGN
//put() has nowait semantics, is this really appropriate? //note that it needs to be async replication, never local or sync	DESIGN	0.8945948479978687	WITHOUT_CLASSIFICATION	0.10540515200213124	DESIGN
// 'hibernate.temp.use_jdbc_metadata_defaults' is a temporary magic value. // The need for it is intended to be alleviated with future developement, thus it is // not defined as an Environment constant... // // it is used to control whether we should consult the JDBC metadata to determine // certain Settings default values; it is useful to *not* do this when the database // may not be available (mainly in tools usage).	DESIGN	0.998760521745664	WITHOUT_CLASSIFICATION	0.0012394782543360908	DESIGN
//TODO: get SQL rendering out of this package!	DESIGN	0.9999930960629099	DESIGN	6.9039370900531434E-6	WITHOUT_CLASSIFICATION
//TODO: get SQL rendering out of this package!	DESIGN	0.9999930960629099	DESIGN	6.9039370900531434E-6	WITHOUT_CLASSIFICATION
// todo : eventually merge this with TreeCache and just add optional opt-lock support there.	DESIGN	0.9979216508768757	WITHOUT_CLASSIFICATION	0.0020783491231242627	DESIGN
// can happen because of the multiple ways Cache.remove() // can be invoked :(	DESIGN	0.9534754391705185	WITHOUT_CLASSIFICATION	0.04652456082948146	DESIGN
// work around the "feature" where tree cache is validating the // inserted node during the next transaction.  no idea...	DESIGN	0.9999985041677751	WITHOUT_CLASSIFICATION	1.4958322248255553E-6	DESIGN
/**     * FIXME Per the RegionFactory class Javadoc, this constructor version     * should not be necessary.     *      * @param props The configuration properties     */	DESIGN	0.999730461673967	DESIGN	2.695383260330088E-4	WITHOUT_CLASSIFICATION
/**     * FIXME Per the RegionFactory class Javadoc, this constructor version     * should not be necessary.     *      * @param props The configuration properties     */	DESIGN	0.999730461673967	DESIGN	2.695383260330088E-4	WITHOUT_CLASSIFICATION
// FIXME Hacky workaround to JBCACHE-1202	DESIGN	0.9999959590967543	DESIGN	4.040903245720222E-6	WITHOUT_CLASSIFICATION
// FIXME Hacky workaround to JBCACHE-1202	DESIGN	0.9999959590967543	DESIGN	4.040903245720222E-6	WITHOUT_CLASSIFICATION
// TODO: I considered validating TS cache config here, // but decided to defer unti getTimestampsCacheInstance() in case the  // cache is never actually used	DESIGN	0.9999954322085642	DESIGN	4.56779143566118E-6	WITHOUT_CLASSIFICATION
// TODO Is this a valid operation on a timestamps cache?	DESIGN	0.9993197721595884	DESIGN	6.802278404116889E-4	WITHOUT_CLASSIFICATION
// TODO Is this a valid operation on a timestamps cache?	DESIGN	0.9993197721595884	DESIGN	6.802278404116889E-4	WITHOUT_CLASSIFICATION
// TODO Why not use the timestamp in a DataVersion?	DESIGN	0.9957798730586501	DESIGN	0.004220126941349921	WITHOUT_CLASSIFICATION
// can happen because of the multiple ways Cache.remove() // can be invoked :(	DESIGN	0.9534754391705185	WITHOUT_CLASSIFICATION	0.04652456082948146	DESIGN
// work around the "feature" where tree cache is validating the // inserted node during the next transaction. no idea...	DESIGN	0.9999989691685757	WITHOUT_CLASSIFICATION	1.030831424233999E-6	DESIGN
//swaldman 2004-02-07: modify to allow null values to signify fall through to c3p0 PoolConfig defaults	DESIGN	0.9999988791215579	WITHOUT_CLASSIFICATION	1.120878442088759E-6	DESIGN
// turn hibernate.c3p0.* into c3p0.*, so c3p0 // gets a chance to see all hibernate.c3p0.*	DESIGN	0.9999992948826679	WITHOUT_CLASSIFICATION	7.051173320532239E-7	DESIGN
//TODO: this bit actually has to be called after all cascades! //      but since identity insert is called *synchronously*, //      instead of asynchronously as other actions, it isn't	DESIGN	0.9999623534442488	DESIGN	3.7646555751203885E-5	WITHOUT_CLASSIFICATION
//TODO: reenable if we also fix the above todo	DESIGN	0.9999326762614305	DESIGN	6.732373856953553E-5	WITHOUT_CLASSIFICATION
//TODO: inefficient if that cache is just going to ignore the updated state!	DESIGN	0.9976312652689658	DESIGN	0.0023687347310340683	WITHOUT_CLASSIFICATION
// we may be screwed here since the collection action is about to execute // and we do not know the final owner key value	DESIGN	0.9999993620759022	WITHOUT_CLASSIFICATION	6.379240977558831E-7	DESIGN
/** Create an action that will evict collection and entity regions based on queryspaces (table names).	DESIGN	0.9999334212039844	WITHOUT_CLASSIFICATION	6.657879601563031E-5	DESIGN
// todo : what else to do here?	DESIGN	0.8311550901372536	WITHOUT_CLASSIFICATION	0.1688449098627463	DESIGN
// todo : modify the class definition if not already transformed...	DESIGN	0.999996646163046	WITHOUT_CLASSIFICATION	3.3538369539875922E-6	DESIGN
// todo : what else to do here?	DESIGN	0.8311550901372536	WITHOUT_CLASSIFICATION	0.1688449098627463	DESIGN
// this is called by SessionFactory irregardless; we just disregard here; // could also add a check to SessionFactory to only conditionally call start	DESIGN	0.9702602572820348	WITHOUT_CLASSIFICATION	0.029739742717965128	DESIGN
// this is called by SessionFactory irregardless; we just disregard here; // could also add a check to SessionFactory to only conditionally call stop	DESIGN	0.9817621142520536	WITHOUT_CLASSIFICATION	0.018237885747946454	DESIGN
//TODO: to handle concurrent writes correctly, this should return a Lock to the client	DESIGN	0.999998349903743	DESIGN	1.650096256955575E-6	WITHOUT_CLASSIFICATION
//put() has nowait semantics, is this really appropriate? //note that it needs to be async replication, never local or sync	DESIGN	0.8945948479978687	WITHOUT_CLASSIFICATION	0.10540515200213124	DESIGN
//TODO: to handle concurrent writes correctly, the client should pass in a Lock	DESIGN	0.9996878964193808	DESIGN	3.121035806192499E-4	WITHOUT_CLASSIFICATION
//TODO: assumes all collections disassemble to an array!	DESIGN	0.9811186949416941	DESIGN	0.01888130505830588	WITHOUT_CLASSIFICATION
//TODO: reuse the PreLoadEvent	DESIGN	0.9996982836997141	DESIGN	3.0171630028590394E-4	WITHOUT_CLASSIFICATION
// todo: this was added to support initializing an entity's EntityEntry snapshot during reattach; // this should be refactored to instead expose a method to assemble a EntityEntry based on this // state for return.	DESIGN	0.9994875235309981	WITHOUT_CLASSIFICATION	5.124764690018294E-4	DESIGN
// todo : what is the implication of this?	DESIGN	0.9967542459396587	DESIGN	0.0032457540603414037	WITHOUT_CLASSIFICATION
// use COUNT as the default.  This mimics the old behavior, although // NONE might be a better option moving forward in the case of callable	DESIGN	0.8043642334477981	WITHOUT_CLASSIFICATION	0.19563576655220194	DESIGN
/* TODO: joinKeyColumnName & foreignKeyColumnName should be called either here or at a	DESIGN	0.9990263215731559	DESIGN	9.736784268440978E-4	WITHOUT_CLASSIFICATION
//TODO: suck this into initLaziness!	DESIGN	0.99997217750593	DESIGN	2.782249407003334E-5	WITHOUT_CLASSIFICATION
// we have to set up the table later!! yuck	DESIGN	0.9999757552454551	WITHOUT_CLASSIFICATION	2.4244754544772536E-5	DESIGN
//TODO: better to degrade to lazy="false" if uninstrumented	DESIGN	0.999388944684622	DESIGN	6.110553153780759E-4	WITHOUT_CLASSIFICATION
// todo : again, how *should* this work for non-pojo entities?	DESIGN	0.9036821133901101	DESIGN	0.09631788660988991	WITHOUT_CLASSIFICATION
// TODO: this is a bit of copy/paste from IndexedCollection.createPrimaryKey()	DESIGN	0.999898655833288	DESIGN	1.0134416671210928E-4	WITHOUT_CLASSIFICATION
// This inner class implements a case statement....perhaps im being a bit over-clever here	DESIGN	0.9925536474253189	WITHOUT_CLASSIFICATION	0.0074463525746810266	DESIGN
//TODO: bad implementation, cos it depends upon ordering of mapping doc //      fixing this requires that Collection/PersistentClass gain access //      to the Mappings reference from Configuration (or the filterDefinitions //      map directly) sometime during Configuration.buildSessionFactory //      (after all the types/filter-defs are known and before building //      persisters).	DESIGN	0.932315367925077	DESIGN	0.06768463207492305	WITHOUT_CLASSIFICATION
//use of a stringbuffer to workaround a JDK bug	DESIGN	0.975939412212387	DESIGN	0.024060587787613025	WITHOUT_CLASSIFICATION
// hack/workaround as sqlquery impl depend on having a key.	DESIGN	0.9959410391421416	DESIGN	0.004058960857858382	WITHOUT_CLASSIFICATION
//FIXME: get the PersistentClass	DESIGN	0.9589045378193056	WITHOUT_CLASSIFICATION	0.041095462180694334	DESIGN
//FIXME: get the PersistentClass	DESIGN	0.9589045378193056	WITHOUT_CLASSIFICATION	0.041095462180694334	DESIGN
//Icky workaround for MySQL bug:	DESIGN	0.8944299466596203	DESIGN	0.1055700533403797	WITHOUT_CLASSIFICATION
//TODO: Somehow add the newly created foreign keys to the internal collection	DESIGN	0.9799609946155221	DESIGN	0.020039005384477938	WITHOUT_CLASSIFICATION
//TODO possibly relax that	DESIGN	0.9840082687214414	DESIGN	0.015991731278558553	WITHOUT_CLASSIFICATION
//TODO possibly relax that	DESIGN	0.9840082687214414	DESIGN	0.015991731278558553	WITHOUT_CLASSIFICATION
//TODO possibly relax that	DESIGN	0.9840082687214414	DESIGN	0.015991731278558553	WITHOUT_CLASSIFICATION
//use of a stringbuffer to workaround a JDK bug	DESIGN	0.975939412212387	DESIGN	0.024060587787613025	WITHOUT_CLASSIFICATION
//use a degenerated strategy for backward compatibility	DESIGN	0.9989933869548417	WITHOUT_CLASSIFICATION	0.0010066130451582486	DESIGN
// Sets can be just a view of a part of another collection. // do we need to copy it to be sure it won't be changing // underneath us? // ie. this.set.addAll(set);	DESIGN	0.9967515810365996	WITHOUT_CLASSIFICATION	0.0032484189634004847	DESIGN
//note that i parameter is now unused (delete it?)	DESIGN	0.6403522470672112	DESIGN	0.3596477529327889	WITHOUT_CLASSIFICATION
//just to help out during the load (ugly, i know)	DESIGN	0.9974881712006505	WITHOUT_CLASSIFICATION	0.002511828799349654	DESIGN
// TODO : safe to interpret "map.remove(key) == null" as non-dirty?	DESIGN	0.5585958671184041	DESIGN	0.4414041328815958	WITHOUT_CLASSIFICATION
// yick!  need this for proper serialization/deserialization handling...	DESIGN	0.7667328931601299	WITHOUT_CLASSIFICATION	0.23326710683986993	DESIGN
//TODO: get SQL rendering out of this package!	DESIGN	0.9999930960629099	DESIGN	6.9039370900531434E-6	WITHOUT_CLASSIFICATION
//TODO: get SQL rendering out of this package!	DESIGN	0.9999930960629099	DESIGN	6.9039370900531434E-6	WITHOUT_CLASSIFICATION
//yuck!	DESIGN	0.9992451729999194	WITHOUT_CLASSIFICATION	7.54827000080536E-4	DESIGN
//TODO: get SQL rendering out of this package!	DESIGN	0.9999930960629099	DESIGN	6.9039370900531434E-6	WITHOUT_CLASSIFICATION
// TODO : not sure this is correct, could not find docs on how to do this.	DESIGN	0.9997040465841824	DESIGN	2.9595341581748125E-4	WITHOUT_CLASSIFICATION
//HSQL has no Blob/Clob support .... but just put these here for now!	DESIGN	0.9997979035364362	WITHOUT_CLASSIFICATION	2.020964635638219E-4	DESIGN
// does this need holdlock also? : return tableName + " with (updlock, rowlock, holdlock)";	DESIGN	0.9932269336444722	WITHOUT_CLASSIFICATION	0.006773066355527829	DESIGN
// sql-server, at least needed this dropped after use; strange!	DESIGN	0.999977709398094	WITHOUT_CLASSIFICATION	2.229060190590335E-5	DESIGN
// todo : is there really any reason to kkeep trying if this fails once?	DESIGN	0.996981222930459	WITHOUT_CLASSIFICATION	0.003018777069541064	DESIGN
// TBD should this be varbinary($1)? //	DESIGN	0.7584790122480998	WITHOUT_CLASSIFICATION	0.24152098775190028	DESIGN
// is it necessary to register %exact since it can only appear in a where clause?	DESIGN	0.9999926601683777	WITHOUT_CLASSIFICATION	7.339831622226536E-6	DESIGN
// xmlforest requires a new kind of function constructor	DESIGN	0.9999945514165628	WITHOUT_CLASSIFICATION	5.448583437202951E-6	DESIGN
// Does this dialect support the ALTER TABLE syntax?	DESIGN	0.9971923867754799	WITHOUT_CLASSIFICATION	0.002807613224520003	DESIGN
// Do we need to qualify index names with the schema name?	DESIGN	0.9999776816333643	WITHOUT_CLASSIFICATION	2.2318366635739457E-5	DESIGN
// Does this dialect support the UNIQUE column syntax?	DESIGN	0.9983733153807717	WITHOUT_CLASSIFICATION	0.001626684619228265	DESIGN
// Does this dialect support check constraints?	DESIGN	0.9990354773100402	WITHOUT_CLASSIFICATION	9.645226899597773E-4	DESIGN
// Do we need to drop constraints before dropping tables in this dialect?	DESIGN	0.9985038467273951	WITHOUT_CLASSIFICATION	0.0014961532726049422	DESIGN
// Does this dialect support the FOR UPDATE syntax?	DESIGN	0.9910938037737578	WITHOUT_CLASSIFICATION	0.008906196226242134	DESIGN
// Does this dialect support the Oracle-style FOR UPDATE NOWAIT syntax?	DESIGN	0.9892077601442494	WITHOUT_CLASSIFICATION	0.010792239855750717	DESIGN
// Does this dialect support FOR UPDATE OF, allowing particular rows to be locked?	DESIGN	0.9757201168032569	WITHOUT_CLASSIFICATION	0.024279883196743176	DESIGN
//note there is a wierd implementation in the client side	DESIGN	0.9999627822402123	WITHOUT_CLASSIFICATION	3.7217759787729225E-5	DESIGN
//TODO: never reached, since getTypeName() actually throws an exception!	DESIGN	0.9381053427788927	DESIGN	0.06189465722110726	WITHOUT_CLASSIFICATION
// todo : should we additionally check the current isolation mode explicitly?	DESIGN	0.8643466321588532	WITHOUT_CLASSIFICATION	0.1356533678411467	DESIGN
// todo : remove this and just have subclasses use Isolater/IsolatedWork directly...	DESIGN	0.590235409334849	WITHOUT_CLASSIFICATION	0.4097645906651511	DESIGN
//TODO: should orphans really be deleted during lock???	DESIGN	0.9999869911500563	DESIGN	1.3008849943709477E-5	WITHOUT_CLASSIFICATION
// orphans should not be deleted during merge??	DESIGN	0.9996072931350629	WITHOUT_CLASSIFICATION	3.927068649370855E-4	DESIGN
// orphans should not be deleted during copy??	DESIGN	0.9994684709817511	WITHOUT_CLASSIFICATION	5.315290182488986E-4	DESIGN
//I suppose?	DESIGN	0.9977672114684196	WITHOUT_CLASSIFICATION	0.002232788531580468	DESIGN
//TODO: suck this logic into the collection!	DESIGN	0.9997484904063157	DESIGN	2.51509593684244E-4	WITHOUT_CLASSIFICATION
// TODO: an alternative is to check if the owner has changed; if it hasn't then // get the ID from collection.getOwner()	DESIGN	0.8535173404290358	DESIGN	0.14648265957096412	WITHOUT_CLASSIFICATION
//TODO:refactor + make this method private	DESIGN	0.9998343049959997	DESIGN	1.6569500400040446E-4	WITHOUT_CLASSIFICATION
// todo : we can actually just determine this from the incoming EntityEntry-s	DESIGN	0.9978463099617814	WITHOUT_CLASSIFICATION	0.002153690038218595	DESIGN
//TODO: Should this be an InitializeEntityEventListener??? (watch out for performance!)	DESIGN	0.9996831976010961	DESIGN	3.1680239890381935E-4	WITHOUT_CLASSIFICATION
//TODO: better to pass the id in as an argument?	DESIGN	0.9999974939354968	DESIGN	2.506064503331705E-6	WITHOUT_CLASSIFICATION
// todo : potentially look at optimizing these two arrays	DESIGN	0.9999782118165021	WITHOUT_CLASSIFICATION	2.178818349775078E-5	DESIGN
/* trim done to workaround stupid oracle bug that cant handle whitespaces before a { in a sp */	DESIGN	0.9973326486729321	DESIGN	0.002667351327067977	WITHOUT_CLASSIFICATION
/* trim done to workaround stupid oracle bug that cant handle whitespaces before a { in a sp */	DESIGN	0.9973326486729321	DESIGN	0.002667351327067977	WITHOUT_CLASSIFICATION
//TODO: temporary	DESIGN	0.9986590777544104	DESIGN	0.001340922245589527	WITHOUT_CLASSIFICATION
//TODO: not quite sure about the full implications of this!	DESIGN	0.992589938046323	DESIGN	0.0074100619536770695	WITHOUT_CLASSIFICATION
//TODO: not quite sure about the full implications of this!	DESIGN	0.992589938046323	DESIGN	0.0074100619536770695	WITHOUT_CLASSIFICATION
//TODO: ugly here:	DESIGN	0.9999768286614975	DESIGN	2.3171338502459602E-5	WITHOUT_CLASSIFICATION
//this is kinda the best we can do...	DESIGN	0.9960973277435597	WITHOUT_CLASSIFICATION	0.0039026722564403566	DESIGN
//TODO: this needn't exclude subclasses...	DESIGN	0.9997817630371235	DESIGN	2.1823696287645106E-4	WITHOUT_CLASSIFICATION
// todo : need map? the prob is a proper key, right?	DESIGN	0.6559571461186507	WITHOUT_CLASSIFICATION	0.34404285388134925	DESIGN
// todo : i'd much rather have this done from #endLoadingCollection(CollectionPersister,LoadingCollectionEntry)...	DESIGN	0.9574693682544094	WITHOUT_CLASSIFICATION	0.04253063174559053	DESIGN
// todo : hack!!! // NOTE : here we cleanup the load context when we have no more local // LCE entries.  This "works" for the time being because really // only the collection load contexts are implemented.  Long term, // this cleanup should become part of the "close result set" // processing from the (sandbox/jdbc) jdbc-container code.	DESIGN	0.9906957016961785	DESIGN	0.009304298303821483	WITHOUT_CLASSIFICATION
// todo : should really move this log statement to CollectionType, where this is used from...	DESIGN	0.98535827193891	DESIGN	0.014641728061090046	WITHOUT_CLASSIFICATION
// TODO : keep seperate notions of QT[] here for shallow/non-shallow queries...	DESIGN	0.6088769406332775	WITHOUT_CLASSIFICATION	0.39112305936672265	DESIGN
// TODO : add this info to the translator and aggregate it here...	DESIGN	0.98673505659506	DESIGN	0.013264943404940048	WITHOUT_CLASSIFICATION
//TODO: move into collection type, so we can use polymorphism!	DESIGN	0.9999628374911268	DESIGN	3.7162508873188204E-5	WITHOUT_CLASSIFICATION
// todo : should we check the current isolation mode explicitly?	DESIGN	0.8053075451647834	WITHOUT_CLASSIFICATION	0.19469245483521666	DESIGN
//TODO: suck into event class	DESIGN	0.9999451578189494	DESIGN	5.484218105064826E-5	WITHOUT_CLASSIFICATION
//do we even really need this? the update will fail anyway....	DESIGN	0.974699173599775	DESIGN	0.025300826400225098	WITHOUT_CLASSIFICATION
//hum ... should we cascade anyway? throw an exception? fine like it is?	DESIGN	0.8594788262220177	DESIGN	0.14052117377798226	WITHOUT_CLASSIFICATION
//TODO: would it be better to do a refresh from db?	DESIGN	0.999999887955222	DESIGN	1.1204477791462867E-7	WITHOUT_CLASSIFICATION
//TODO: we use two visitors here, inefficient!	DESIGN	0.9999973505666454	DESIGN	2.6494333545856586E-6	WITHOUT_CLASSIFICATION
// this class has no proxies (so do a shortcut)	DESIGN	0.9998208269630667	WITHOUT_CLASSIFICATION	1.7917303693327607E-4	DESIGN
//PostLoad is needed for EJB3 //TODO: reuse the PostLoadEvent...	DESIGN	0.9951198576485781	DESIGN	0.0048801423514219155	WITHOUT_CLASSIFICATION
//TODO: put this stuff back in to read snapshot from //      the second-level cache (needs some extra work)	DESIGN	0.9999999994522879	DESIGN	5.477122054262238E-10	WITHOUT_CLASSIFICATION
// null or brand new collection // this will also (inefficiently) handle arrays, which have // no snapshot, so we can't do any better	DESIGN	0.9908188834328102	WITHOUT_CLASSIFICATION	0.009181116567189777	DESIGN
//TODO: is this 100% correct?	DESIGN	0.9999950022768144	DESIGN	4.997723185671301E-6	WITHOUT_CLASSIFICATION
// TODO: iteratively get transient entities and retry merge until one of the following conditions: //       1) transientCopyCache.size() == 0 //       2) transientCopyCache.size() is not decreasing and copyCache.size() is not increasing // TODO: find out if retrying can add entities to copyCache (don't think it can...) // For now, just retry once; throw TransientObjectException if there are still any transient entities	DESIGN	0.9986875080055237	DESIGN	0.0013124919944762098	WITHOUT_CLASSIFICATION
// entity name will not be available for non-POJO entities // TODO: cache the entity name somewhere so that it is available to this exception	DESIGN	0.9996914335028416	DESIGN	3.0856649715844747E-4	WITHOUT_CLASSIFICATION
//TODO: we should throw an exception if we really *know* for sure   //      that this is a detached instance, rather than just assuming //throw new StaleObjectStateException(entityName, id);	DESIGN	0.9999894410912938	DESIGN	1.0558908706162698E-5	WITHOUT_CLASSIFICATION
// TODO : perhaps we should additionally require that the incoming entity // version be equivalent to the defined unsaved-value?	DESIGN	0.9999685872003715	DESIGN	3.1412799628491754E-5	WITHOUT_CLASSIFICATION
// perhaps this should be an exception since it is only ever used // in the above method?	DESIGN	0.8821545132816165	DESIGN	0.11784548671838348	WITHOUT_CLASSIFICATION
// Put a placeholder in entries, so we don't recurse back and try to save() the // same object again. QUESTION: should this be done before onSave() is called? // likewise, should it be done before onUpdate()?	DESIGN	0.9996955048185708	WITHOUT_CLASSIFICATION	3.044951814290716E-4	DESIGN
//TODO: merge into one method!	DESIGN	0.9998695012895321	DESIGN	1.304987104679127E-4	WITHOUT_CLASSIFICATION
//TODO: refactor to .sql package	DESIGN	0.9989188627320649	DESIGN	0.0010811372679351203	WITHOUT_CLASSIFICATION
/** * Provides query splitting methods, which were originally in QueryTranslator. * <br> * TODO: This will need to be refactored at some point. * * @author josh */	DESIGN	0.999999932636449	DESIGN	6.736355095980767E-8	WITHOUT_CLASSIFICATION
//TODO: this is one of the ugliest and most fragile pieces of code in Hibernate....	DESIGN	0.9999935975123037	DESIGN	6.402487696384932E-6	WITHOUT_CLASSIFICATION
// todo : temporary //      needed because currently persister is the one that //      creates and renders the join fragments for inheritence //      hierarchies...	DESIGN	0.9991594435119384	WITHOUT_CLASSIFICATION	8.405564880616718E-4	DESIGN
// TODO : better way?!?	DESIGN	0.999998681965537	DESIGN	1.3180344630526432E-6	WITHOUT_CLASSIFICATION
// Not possible to simply re-use the versionPropertyNode here as it causes // OOM errors due to circularity :(	DESIGN	0.999934069651164	WITHOUT_CLASSIFICATION	6.593034883600232E-5	DESIGN
//TODO:this is only needed during compilation .. can we eliminate the instvar?	DESIGN	0.992246568609371	DESIGN	0.007753431390629029	WITHOUT_CLASSIFICATION
// TODO : this is a bit dodgy, come up with a better way to check this (plus see above comment)	DESIGN	0.9999999166688717	DESIGN	8.333112824750356E-8	WITHOUT_CLASSIFICATION
// even here, if only properties mapped to the "base table" are referenced // in the set and where clauses, this could be handled by the BasicDelegate. // TODO : decide if it is better performance-wise to perform that check, or to simply use the MultiTableUpdateDelegate	DESIGN	0.998825483970716	DESIGN	0.0011745160292840338	WITHOUT_CLASSIFICATION
//TODO: switch statements are always evil! We already had bugs because  //      of forgotten token types. Use polymorphism for this!	DESIGN	0.9997000998897229	DESIGN	2.9990011027719875E-4	WITHOUT_CLASSIFICATION
// TODO : we really need to be able to deal with component paths here also; // this is difficult because the hql-sql grammar expects all those node types // to be FromReferenceNodes.  One potential fix here would be to convert the // IntoClause to just use a FromClause/FromElement combo (as a child of the // InsertStatement) and move all this logic into the InsertStatement.  That's // probably the easiest approach (read: least amount of changes to the grammar // and code), but just doesn't feel right as then an insert would contain // 2 from-clauses	DESIGN	0.9957857675184792	DESIGN	0.004214232481520681	WITHOUT_CLASSIFICATION
// really there are two situations where it should be ok to allow the insertion // into properties defined on a superclass: //      1) union-subclass with an abstract root entity //      2) discrim-subclass // // #1 is handled already because of the fact that // UnionSubclassPersister alreay always returns 0 // for this call... // // we may want to disallow it for discrim-subclass just for // consistency-sake (currently does not work anyway)...	DESIGN	0.9987024028226109	WITHOUT_CLASSIFICATION	0.0012975971773891081	DESIGN
//yuck!	DESIGN	0.9992451729999194	WITHOUT_CLASSIFICATION	7.54827000080536E-4	DESIGN
// implicit joins are always(?) ok to reuse	DESIGN	0.9999238494436326	WITHOUT_CLASSIFICATION	7.615055636744491E-5	DESIGN
// TODO : we may also want to check that the types here map to exactly one column/JDBC-type //      can't think of a situation where arithmetic expression between multi-column mappings //      makes any sense.	DESIGN	0.9959948077534629	DESIGN	0.0040051922465370385	WITHOUT_CLASSIFICATION
// we do not know either type //BLIND GUESS!	DESIGN	0.9991831970585354	WITHOUT_CLASSIFICATION	8.168029414646356E-4	DESIGN
//TODO: used to be exprNoParens! was this needed?	DESIGN	0.9999999114299459	DESIGN	8.857005409698358E-8	WITHOUT_CLASSIFICATION
// TODO: Replace this with a more elegant solution.	DESIGN	0.9975201545078188	DESIGN	0.0024798454921811553	WITHOUT_CLASSIFICATION
// TODO: Should this really return null?  If not, figure out something better to do here.	DESIGN	0.9999999998182738	DESIGN	1.8172618920812174E-10	WITHOUT_CLASSIFICATION
//TODO: get SQL rendering out of this package!	DESIGN	0.9999930960629099	DESIGN	6.9039370900531434E-6	WITHOUT_CLASSIFICATION
// yuck!	DESIGN	0.9999618683627605	WITHOUT_CLASSIFICATION	3.813163723957676E-5	DESIGN
// ignore it; the incoming property could not be found so we // cannot be sure what to do here.  At the very least, the // safest is to simply not apply any dereference toggling...	DESIGN	0.8241361867639604	DESIGN	0.1758638132360395	WITHOUT_CLASSIFICATION
// TODO : most of below was taken verbatim from DotNode; should either delegate this logic or super-type it	DESIGN	0.9998968994653508	DESIGN	1.0310053464916313E-4	WITHOUT_CLASSIFICATION
// otherwise, a trim-specification and/or a trim-character // have been specified;  we need to decide which options // are present and "do the right thing" // should leading trim-characters be trimmed? // should trailing trim-characters be trimmed? // the trim-character // the trim-source	DESIGN	0.9999894774958161	WITHOUT_CLASSIFICATION	1.052250418387629E-5	DESIGN
// todo: we should really just collect these from the various SelectExpressions, rather than regenerating here	DESIGN	0.9979402225986541	WITHOUT_CLASSIFICATION	0.002059777401345889	DESIGN
//TODO: is this a bit ugly?	DESIGN	0.9999999915953987	DESIGN	8.404601420620298E-9	WITHOUT_CLASSIFICATION
// Need a better way to define the suffixes here...	DESIGN	0.9663886538410366	WITHOUT_CLASSIFICATION	0.03361134615896345	DESIGN
// TODO: something much better - look at the type of the other expression! // TODO: Have comparisonExpression and/or arithmeticExpression rules complete the resolution of boolean nodes.	DESIGN	0.998398395512452	DESIGN	0.0016016044875480937	WITHOUT_CLASSIFICATION
// TODO : what amount of significant digits need to be supported here? //      - from the DecimalFormat docs: //          [significant digits] = [minimum integer digits] + [maximum fraction digits]	DESIGN	0.9984253864852374	DESIGN	0.0015746135147626753	WITHOUT_CLASSIFICATION
// Needed the "clazz_" check to work around union-subclasses // TODO : is there a way to tell whether a persister is truly discrim-column based inheritence?	DESIGN	0.9995886262472897	DESIGN	4.113737527102262E-4	WITHOUT_CLASSIFICATION
//We should actually rework this class to not implement Parser //and just process path expressions in the most convenient way.	DESIGN	0.980054455362483	WITHOUT_CLASSIFICATION	0.019945544637516997	DESIGN
//The class is now way to complex!	DESIGN	0.9958525157412393	WITHOUT_CLASSIFICATION	0.004147484258760649	DESIGN
//TODO: get SQL rendering out of here	DESIGN	0.9998964522953852	DESIGN	1.0354770461481638E-4	WITHOUT_CLASSIFICATION
//TODO: is there a better way?	DESIGN	0.9999999298352228	DESIGN	7.016477717184874E-8	WITHOUT_CLASSIFICATION
//Must be done here because of side-effect! yuck...	DESIGN	0.998823356957834	WITHOUT_CLASSIFICATION	0.0011766430421660445	DESIGN
//name from a super query (a bit inelegant that it shows up here)	DESIGN	0.8540376478255972	WITHOUT_CLASSIFICATION	0.14596235217440282	DESIGN
// We should reengineer this class so that, rather than the current ad - // hoc linear approach to processing a stream of tokens, we instead // build up a tree of expressions.	DESIGN	0.9999994009606789	WITHOUT_CLASSIFICATION	5.990393211323951E-7	DESIGN
// this is ugly here, but needed because its a subquery	DESIGN	0.8333158647514517	DESIGN	0.16668413524854833	WITHOUT_CLASSIFICATION
// unhappy about this being public ... is there a better way?	DESIGN	0.951549714554564	DESIGN	0.048450285445436	WITHOUT_CLASSIFICATION
// Make sure this is a defined parameter and check the incoming value type // TODO: what should be the actual exception type here?	DESIGN	0.9999998139432851	DESIGN	1.860567149329136E-7	WITHOUT_CLASSIFICATION
// TODO : this constructor form is *only* used from constructor directly below us; can it go away?	DESIGN	0.9999998187705904	DESIGN	1.8122940953882833E-7	WITHOUT_CLASSIFICATION
//TODO: COPY/PASTE FROM SessionImpl, pull up!	DESIGN	0.9893398322059436	DESIGN	0.010660167794056524	WITHOUT_CLASSIFICATION
// TODO : should remove this exposure //  and have all references to the session's batcher use the ConnectionManager.	DESIGN	0.9999829985967389	DESIGN	1.7001403261076318E-5	WITHOUT_CLASSIFICATION
// todo : should this get moved to PersistentContext? // logically, is PersistentContext the "thing" to which an interceptor gets attached?	DESIGN	0.9713814398529562	WITHOUT_CLASSIFICATION	0.028618560147043746	DESIGN
// TODO: what type?	DESIGN	0.9999863178220729	DESIGN	1.368217792711348E-5	WITHOUT_CLASSIFICATION
// todo : should seriously consider not allowing a txn to begin from a child session //      can always route the request to the root session...	DESIGN	0.9999868737203896	WITHOUT_CLASSIFICATION	1.3126279610237175E-5	DESIGN
// short-circuit for performance...	DESIGN	0.9999970468519976	WITHOUT_CLASSIFICATION	2.9531480022559374E-6	DESIGN
// not absolutely necessary, but does help with aggressive release	DESIGN	0.9998964048067978	WITHOUT_CLASSIFICATION	1.0359519320228994E-4	DESIGN
// TODO : remove these last two as batcher is no longer managing connections	DESIGN	0.9539304734260502	DESIGN	0.04606952657394975	WITHOUT_CLASSIFICATION
//work around a bug in all known connection pools....	DESIGN	0.8002275606707417	WITHOUT_CLASSIFICATION	0.1997724393292582	DESIGN
// TODO : make this the factory for "entity mode related" sessions; // also means making this the target of transaction-synch and the // thing that knows how to cascade things between related sessions // // At that point, perhaps this thing is a "SessionContext", and // ConnectionManager is a "JDBCContext"?  A "SessionContext" should // live in the impl package...	DESIGN	0.9990580227770873	DESIGN	9.419772229127183E-4	WITHOUT_CLASSIFICATION
//TODO: does this really need to be here? //      does the collection already have //      it's own up-to-date snapshot?	DESIGN	0.9999999567271206	DESIGN	4.327287932143852E-8	WITHOUT_CLASSIFICATION
//TODO: the i==entitySpan-1 bit depends upon subclass implementation (very bad)	DESIGN	0.9998177145837471	DESIGN	1.8228541625276383E-4	WITHOUT_CLASSIFICATION
/**	DESIGN	0.9402094942938763	DESIGN	0.05979050570612358	WITHOUT_CLASSIFICATION
// todo : add the notion of enabled filters to the CacheKey to differentiate filtered collections from non-filtered; //      but CacheKey is currently used for both collections and entities; would ideally need to define two seperate ones; //      currently this works in conjuction with the check on //      DefaultInitializeCollectionEventHandler.initializeCollectionFromCache() (which makes sure to not read from //      cache with enabled filters). // EARLY EXIT!!!!!	DESIGN	0.9646155516612275	DESIGN	0.03538444833877252	WITHOUT_CLASSIFICATION
//for sets, we should end the collection load after resolving //the entities, since we might call hashCode() on the elements //TODO: or we could do this polymorphically, and have two //      different operations implemented differently for arrays	DESIGN	0.9999958946141606	DESIGN	4.10538583942796E-6	WITHOUT_CLASSIFICATION
//This is not very nice (and quite slow):	DESIGN	0.8918786858146458	DESIGN	0.10812131418535416	WITHOUT_CLASSIFICATION
//use of trim() here is ugly?	DESIGN	0.5977147316098061	WITHOUT_CLASSIFICATION	0.4022852683901938	DESIGN
//TODO: this is too conservative; if all preceding joins were  //      also inner joins, we could use an inner join here	DESIGN	0.9999998034364883	DESIGN	1.965635117762298E-7	WITHOUT_CLASSIFICATION
//TODO: look at the owning property and check that it  //      isn't lazy (by instrumentation)	DESIGN	0.9995187687340682	DESIGN	4.812312659317561E-4	WITHOUT_CLASSIFICATION
//TODO: inefficient	DESIGN	0.9998881243219012	DESIGN	1.1187567809880605E-4	WITHOUT_CLASSIFICATION
// why does this matter?	DESIGN	0.681708867120365	WITHOUT_CLASSIFICATION	0.31829113287963484	DESIGN
// from the collection of associations, locate OJA for the // ManyToOne corresponding to this persister to fully // define the many-to-many; we need that OJA so that we can // use its alias here // TODO : is there a better way here?	DESIGN	0.9999999613354865	DESIGN	3.8664513549583354E-8	WITHOUT_CLASSIFICATION
//TODO: this class depends directly upon CriteriaImpl,  //      in the impl package ... add a CriteriaImplementor  //      interface	DESIGN	0.9999996678667613	DESIGN	3.321332386753285E-7	WITHOUT_CLASSIFICATION
//TODO: add a CriteriaImplementor interface //      this class depends directly upon CriteriaImpl in the impl package...	DESIGN	0.9999997440392481	DESIGN	2.55960751919302E-7	WITHOUT_CLASSIFICATION
// TODO : not so sure this is needed...	DESIGN	0.9998221705936088	DESIGN	1.7782940639118135E-4	WITHOUT_CLASSIFICATION
// meant to handle dynamic instantiation queries...(Copy from QueryLoader)	DESIGN	0.9999733113819853	WITHOUT_CLASSIFICATION	2.6688618014732915E-5	DESIGN
// TODO: The order in which entities are saved may matter (e.g., a particular transient entity //       may need to be saved before other transient entities can be saved; //       Keep retrying the batch of transient entities until either: //       1) there are no transient entities left in transientCopyCache //       or 2) no transient entities were saved in the last batch // For now, just run through the transient entities and retry the merge	DESIGN	0.5004494810498791	WITHOUT_CLASSIFICATION	0.4995505189501209	DESIGN
// todo: this might really even be moved into the cfg package and used as the basis for all things which are configurable.	DESIGN	0.863173292467534	DESIGN	0.1368267075324661	WITHOUT_CLASSIFICATION
// todo : currently expects that the individual with expressions apply to the same sql table join. //      This may not be the case for joined-subclass where the property values //      might be coming from different tables in the joined hierarchy.  At some //      point we should expand this to support that capability.  However, that has //      some difficulties: //          1) the biggest is how to handle ORs when the individual comparisons are //              linked to different sql joins. //          2) here we would need to track each comparison individually, along with //              the join alias to which it applies and then pass that information //              back to the FromElement so it can pass it along to the JoinSequence	DESIGN	0.5200024402073686	DESIGN	0.4799975597926313	WITHOUT_CLASSIFICATION
// this function has a template -> restore output, apply the template and write the result out // TODO: Downcast to avoid using an interface?  Yuck.	DESIGN	0.9994046821881507	DESIGN	5.9531781184918E-4	WITHOUT_CLASSIFICATION
// at some point the generate phase needs to be moved out of here, // because a single object-level DML might spawn multiple SQL DML // command executions. // // Possible to just move the sql generation for dml stuff, but for // consistency-sake probably best to just move responsiblity for // the generation phase completely into the delegates // (QueryLoader/StatementExecutor) themselves.  Also, not sure why // QueryLoader currently even has a dependency on this at all; does // it need it?  Ideally like to see the walker itself given to the delegates directly...	DESIGN	0.9115398166637059	DESIGN	0.08846018333629412	WITHOUT_CLASSIFICATION
// get the right object from the list ... would it be easier to just call getEntity() ??	DESIGN	0.9921968031662957	WITHOUT_CLASSIFICATION	0.007803196833704258	DESIGN
// TODO should we just collect these like with the collections above?	DESIGN	0.9987471353024951	DESIGN	0.0012528646975047922	WITHOUT_CLASSIFICATION
// todo : better to handle dynamic filters through implicit DynamicFilterParameterSpecification // see the discussion there in DynamicFilterParameterSpecification's javadocs as to why // it is currently not done that way.	DESIGN	0.5056618065045279	WITHOUT_CLASSIFICATION	0.4943381934954722	DESIGN
/////////////////////////////////////////////////////////////////////////// // USED ONLY FOR REGRESSION TESTING!!!! // // todo : obviously get rid of all this junk ;) ///////////////////////////////////////////////////////////////////////////	DESIGN	0.5502774024327713	WITHOUT_CLASSIFICATION	0.4497225975672287	DESIGN
//create an index on the key columns??	DESIGN	0.9999855264788061	WITHOUT_CLASSIFICATION	1.4473521193969454E-5	DESIGN
//TODO: deprecated, remove eventually	DESIGN	0.9999608797399875	DESIGN	3.912026001252643E-5	WITHOUT_CLASSIFICATION
//create an index on the key columns??	DESIGN	0.9999855264788061	WITHOUT_CLASSIFICATION	1.4473521193969454E-5	DESIGN
//TODO: improve this hack!	DESIGN	0.999999998804301	DESIGN	1.1956990226442682E-9	WITHOUT_CLASSIFICATION
// inheritance cycle detection (paranoid check)	DESIGN	0.9999968511261629	WITHOUT_CLASSIFICATION	3.1488738370972897E-6	DESIGN
//TODO: remove use of instanceof!	DESIGN	0.9999479406733834	DESIGN	5.205932661651846E-5	WITHOUT_CLASSIFICATION
//shortcut	DESIGN	0.9997880614840529	WITHOUT_CLASSIFICATION	2.1193851594725842E-4	DESIGN
//TODO: handle the case of a foreign key to something other than the pk	DESIGN	0.998648413953602	DESIGN	0.0013515860463979813	WITHOUT_CLASSIFICATION
// create an index on the key columns??	DESIGN	0.9999978693698858	WITHOUT_CLASSIFICATION	2.130630114101692E-6	DESIGN
// todo : remove	DESIGN	0.9891322517208546	WITHOUT_CLASSIFICATION	0.010867748279145438	DESIGN
// todo : remove	DESIGN	0.9891322517208546	WITHOUT_CLASSIFICATION	0.010867748279145438	DESIGN
// todo : remove	DESIGN	0.9891322517208546	WITHOUT_CLASSIFICATION	0.010867748279145438	DESIGN
// todo : throw exception?	DESIGN	0.9669940973920713	WITHOUT_CLASSIFICATION	0.033005902607928725	DESIGN
// todo : throw exception?  maybe warn if not the same?	DESIGN	0.7901479844264319	DESIGN	0.20985201557356814	WITHOUT_CLASSIFICATION
//TODO: make EntityPersister *not* depend on SessionFactoryImplementor //interface, if possible	DESIGN	0.9861340420222209	DESIGN	0.013865957977779137	WITHOUT_CLASSIFICATION
//TODO: is there a more elegant way than downcasting?	DESIGN	0.999982735460493	DESIGN	1.726453950707637E-5	WITHOUT_CLASSIFICATION
// TODO: encapsulate the protected instance variables!	DESIGN	0.9818113874068602	DESIGN	0.018188612593139676	WITHOUT_CLASSIFICATION
// should indicate that we are processing an INSERT/UPDATE/DELETE // query with a subquery implied via a collection property // function. Here, we need to use the table name itself as the // qualification alias. // TODO : verify this works for all databases... // TODO : is this also the case in non-"indexed" scenarios?	DESIGN	0.999962667036717	DESIGN	3.73329632831151E-5	WITHOUT_CLASSIFICATION
//TODO: copy/paste from insertRows()	DESIGN	0.9994931217134029	DESIGN	5.068782865971581E-4	WITHOUT_CLASSIFICATION
//TODO: copy/paste from recreate()	DESIGN	0.9995685338348622	DESIGN	4.3146616513780293E-4	WITHOUT_CLASSIFICATION
//should this interface extend PropertyMapping?	DESIGN	0.7518965264063188	DESIGN	0.24810347359368132	WITHOUT_CLASSIFICATION
//ie. the subquery! yuck!	DESIGN	0.999827444235187	WITHOUT_CLASSIFICATION	1.7255576481294796E-4	DESIGN
//TODO: move to .sql package!!	DESIGN	0.9999545093058917	DESIGN	4.549069410840156E-5	WITHOUT_CLASSIFICATION
//TODO: code duplication with SingleTableEntityPersister	DESIGN	0.993007732501493	DESIGN	0.006992267498506972	WITHOUT_CLASSIFICATION
// TODO: It would be really, really nice to use this to also model components!	DESIGN	0.9999999998982191	DESIGN	1.0178092902587585E-10	WITHOUT_CLASSIFICATION
//TODO: *two* hashmap lookups here is one too many...	DESIGN	0.99070087727289	DESIGN	0.009299122727109995	WITHOUT_CLASSIFICATION
//TODO: code duplication with JoinedSubclassEntityPersister	DESIGN	0.9551342095532828	DESIGN	0.04486579044671727	WITHOUT_CLASSIFICATION
//perhaps not really necessary...	DESIGN	0.9975548791521964	WITHOUT_CLASSIFICATION	0.0024451208478034983	DESIGN
// NOTE: this assumes something about how propertySelectFragment is implemented by the subclass! // was toUnqotedAliasStrings( getIdentiferColumnNames() ) before - now tried // to remove that unqoting and missing aliases..	DESIGN	0.5762671292777658	DESIGN	0.42373287072223415	WITHOUT_CLASSIFICATION
// NOTE: this assumes something about how propertySelectFragment is implemented by the subclass! // was toUnqotedAliasStrings( getdiscriminatorColumnName() ) before - now tried // to remove that unqoting and missing aliases..	DESIGN	0.8497322548874209	WITHOUT_CLASSIFICATION	0.15026774511257904	DESIGN
//TODO: should we use SELECT .. FOR UPDATE?	DESIGN	0.9999994984633196	DESIGN	5.015366803192665E-7	WITHOUT_CLASSIFICATION
//TODO: optimize this better!	DESIGN	0.9999966740053864	DESIGN	3.3259946135554383E-6	WITHOUT_CLASSIFICATION
//TODO: should we allow suffixes on these ?	DESIGN	0.9999141959427665	DESIGN	8.580405723352175E-5	WITHOUT_CLASSIFICATION
//This is really ugly, but necessary:	DESIGN	0.763954719268982	DESIGN	0.2360452807310179	WITHOUT_CLASSIFICATION
//ugly little workaround for fact that createUniqueKeyLoaders() does not handle component properties	DESIGN	0.9999680533445802	DESIGN	3.194665541972404E-5	WITHOUT_CLASSIFICATION
//TODO: disable batch loading if lockMode > READ?	DESIGN	0.99804950501519	DESIGN	0.001950494984810067	WITHOUT_CLASSIFICATION
// append the SQL to return the generated identifier //TODO: suck into Insert	DESIGN	0.9306103063287147	WITHOUT_CLASSIFICATION	0.06938969367128538	DESIGN
//TODO: I am not so sure about the exception handling in this bit!	DESIGN	0.9999990104769847	DESIGN	9.895230153272247E-7	WITHOUT_CLASSIFICATION
//TODO: is this really necessary????	DESIGN	0.9999993263764968	DESIGN	6.736235032770043E-7	WITHOUT_CLASSIFICATION
//TODO: move to .sql package, and refactor with similar things!	DESIGN	0.9999799990011002	DESIGN	2.000099889969981E-5	WITHOUT_CLASSIFICATION
//TODO: implement functionality //  this might be painful to do here, as the "join post processing" for //  the subquery has already been performed (meaning that for //  theta-join dialects, the join conditions have already been moved //  over to the where clause).  A "simple" solution here might to //  perform "join post processing" once for the entire query (including //  any subqueries) at one fell swoop	DESIGN	0.9316036078731527	DESIGN	0.06839639212684732	WITHOUT_CLASSIFICATION
// todo : this eventually needs to be removed	DESIGN	0.8662262520535303	DESIGN	0.1337737479464698	WITHOUT_CLASSIFICATION
//kinda ugly, but needed for collections with a "." node mapping	DESIGN	0.9999583905584097	WITHOUT_CLASSIFICATION	4.1609441590241696E-5	DESIGN
//is this ok?	DESIGN	0.9946443058773029	WITHOUT_CLASSIFICATION	0.005355694122697137	DESIGN
//TODO: perhaps this should be some other RuntimeException...	DESIGN	0.9999996933210706	DESIGN	3.0667892940107637E-7	WITHOUT_CLASSIFICATION
//TODO: make this a bit nicer	DESIGN	0.9999988407227809	DESIGN	1.1592772191091312E-6	WITHOUT_CLASSIFICATION
//Yuck:	DESIGN	0.9993184288036683	WITHOUT_CLASSIFICATION	6.815711963317301E-4	DESIGN
//TODO: we should provide some way to get keys of collection of statistics to make it easier to retrieve from a GUI perspective	DESIGN	0.9999999957478569	DESIGN	4.252143098359811E-9	WITHOUT_CLASSIFICATION
/**	DESIGN	0.9402094942938763	DESIGN	0.05979050570612358	WITHOUT_CLASSIFICATION
// TODO : will need reference to session factory to fully complete HHH-1907	DESIGN	0.9945920614787613	DESIGN	0.005407938521238672	WITHOUT_CLASSIFICATION
//TODO: currently keeps Getters and Setters (instead of PropertyAccessors) because of the way getGetter() and getSetter() are implemented currently; yuck!	DESIGN	0.9999995209201101	DESIGN	4.790798899148088E-7	WITHOUT_CLASSIFICATION
//TODO: redesign how PropertyAccessors are acquired...	DESIGN	0.9988503839382696	DESIGN	0.0011496160617303721	WITHOUT_CLASSIFICATION
// todo : YUCK!!!	DESIGN	0.9968758877721442	WITHOUT_CLASSIFICATION	0.0031241122278557643	DESIGN
// TODO : YUCK!!!  fix after HHH-1907 is complete	DESIGN	0.9968585363197869	DESIGN	0.003141463680213213	WITHOUT_CLASSIFICATION
//TODO: need to make the majority of this functionality into a top-level support class for custom impl support	DESIGN	0.9999979027059437	DESIGN	2.0972940563459535E-6	WITHOUT_CLASSIFICATION
//TODO: design new lifecycle for ProxyFactory	DESIGN	0.9774277534206826	DESIGN	0.02257224657931745	WITHOUT_CLASSIFICATION
//TODO: would be nice to handle proxy classes elegantly!	DESIGN	0.9999998172866492	DESIGN	1.827133507355136E-7	WITHOUT_CLASSIFICATION
// TODO: copy/paste from ManyToOneType	DESIGN	0.9847455417576637	DESIGN	0.01525445824233626	WITHOUT_CLASSIFICATION
//TODO: should this be Session.instantiate(Persister, ...)?	DESIGN	0.9992421279989795	DESIGN	7.578720010205662E-4	WITHOUT_CLASSIFICATION
//TODO: this is a bit arbitrary, expose a switch to the user?	DESIGN	0.9999501577893694	DESIGN	4.984221063077032E-5	WITHOUT_CLASSIFICATION
//TODO: implement caching?! proxies?!	DESIGN	0.9999944748211412	DESIGN	5.525178858749108E-6	WITHOUT_CLASSIFICATION
//TODO: is this right??	DESIGN	0.9999970572334387	DESIGN	2.9427665611969484E-6	WITHOUT_CLASSIFICATION
// is this really necessary?	DESIGN	0.9515440722343389	WITHOUT_CLASSIFICATION	0.048455927765661086	DESIGN
//TODO: move these to a new JoinableType abstract class, //extended by EntityType and PersistentCollectionType:	DESIGN	0.8121776403683568	DESIGN	0.18782235963164307	WITHOUT_CLASSIFICATION
// TODO: this is very suboptimal for some subclasses (namely components), // since it does not take advantage of two-phase-load	DESIGN	0.9997629758729675	DESIGN	2.3702412703242745E-4	WITHOUT_CLASSIFICATION
// worrying about proxies is perhaps a little bit of overkill here...	DESIGN	0.8776172640322992	WITHOUT_CLASSIFICATION	0.1223827359677008	DESIGN
// NOTE VERY HACKISH WORKAROUND!! // TODO: Fix this so it will work for non-POJO entity mode	DESIGN	0.9999999998717312	DESIGN	1.2826889972911546E-10	WITHOUT_CLASSIFICATION
// TODO: Fix this so it will work for non-POJO entity mode	DESIGN	0.9999999692128688	DESIGN	3.078713119012554E-8	WITHOUT_CLASSIFICATION
// We would probably refactor to have LogicParser (builds a tree of simple // expressions connected by and, or, not), ExpressionParser (translates // from OO terms like foo, foo.Bar, foo.Bar.Baz to SQL terms like // FOOS.ID, FOOS.BAR_ID, etc) and PathExpressionParser (which does much // the same thing it does now)	DESIGN	0.9999998258914481	WITHOUT_CLASSIFICATION	1.7410855193276192E-7	DESIGN
//TODO: this is a little inefficient, don't need to do a whole //      deep replaceElements() call	DESIGN	0.9999999927063546	DESIGN	7.293645285176819E-9	WITHOUT_CLASSIFICATION
//workaround for WebLogic	DESIGN	0.8170338513667048	DESIGN	0.18296614863329522	WITHOUT_CLASSIFICATION
//TODO: this dependency is kinda Bad	DESIGN	0.9999967094781943	DESIGN	3.2905218057763496E-6	WITHOUT_CLASSIFICATION
//ick!	DESIGN	0.9995148196309738	WITHOUT_CLASSIFICATION	4.8518036902625805E-4	DESIGN
// short cut check...	DESIGN	0.9999643665605605	WITHOUT_CLASSIFICATION	3.563343943959484E-5	DESIGN
// todo : move to StringHelper?	DESIGN	0.9930872925322007	WITHOUT_CLASSIFICATION	0.006912707467799329	DESIGN
//yukky! Don't you have subclasses for that! //TODO race conditions can happen here	DESIGN	0.9881290993455737	DESIGN	0.01187090065442624	WITHOUT_CLASSIFICATION
//TODO: We probably should have a StatisticsNotPublishedException, to make it clean	DESIGN	0.9999999588474969	DESIGN	4.1152503052239396E-8	WITHOUT_CLASSIFICATION
// FIXME hack to work around fact that calling // Node added = root.addChild( fqn ); doesn't  // properly set the version on the node	DESIGN	0.9999974795307017	DESIGN	2.5204692983820462E-6	WITHOUT_CLASSIFICATION
// TODO: I considered validating the presence of the TS cache here, // but decided to defer unti getQueryCacheInstance() in case the  // cache is never actually used	DESIGN	0.9999920252930732	DESIGN	7.974706926692958E-6	WITHOUT_CLASSIFICATION
//need to do that here rather than in the save event listener to let //the post insert events to have a id-filled entity when IDENTITY is used (EJB3)	DESIGN	0.9997654976027092	WITHOUT_CLASSIFICATION	2.3450239729091326E-4	DESIGN
//TODO: simply remove this override //      if we fix the above todos	DESIGN	0.9999083369688274	DESIGN	9.166303117252449E-5	WITHOUT_CLASSIFICATION
// This, is used by SessionFactoryImpl to hand to the generated SessionImpl; // was the only reason I could see that we cannot just use null as // Settings.cacheProvider	DESIGN	0.8481537242818142	WITHOUT_CLASSIFICATION	0.15184627571818576	DESIGN
// this is done here 'cos we might only know the type here (ugly!) // TODO: improve this a lot:	DESIGN	0.9999999992064832	DESIGN	7.935167818841724E-10	WITHOUT_CLASSIFICATION
// todo : would love to have this work on a notification basis //    where the successful binding of an entity/subclass would //    emit a notification which the extendsQueue entries could //    react to...	DESIGN	0.9967654118597594	WITHOUT_CLASSIFICATION	0.0032345881402405423	DESIGN
// TODO : not sure the best way to handle this. // The non-performant way :	DESIGN	0.9998942767696236	DESIGN	1.0572323037637134E-4	WITHOUT_CLASSIFICATION
// would be better to use the element-type to determine // whether the old and the new are equal here; the problem being // we do not necessarily have access to the element type in all // cases	DESIGN	0.9023386562723054	WITHOUT_CLASSIFICATION	0.09766134372769472	DESIGN
// This next bit is to allow for both unsaved-value="negative" // and for "older" behavior where version number did not get // seeded if it was already set in the object // TODO: shift it into unsaved-value strategy	DESIGN	0.9672656536013867	WITHOUT_CLASSIFICATION	0.032734346398613216	DESIGN
// merges don't cascade to uninitialized collections //	DESIGN	0.9999988513094328	WITHOUT_CLASSIFICATION	1.1486905672176253E-6	DESIGN
// TODO: an alternative is to check if the owner has changed; if it hasn't then // return collection.getOwner()	DESIGN	0.7039738794972651	DESIGN	0.2960261205027349	WITHOUT_CLASSIFICATION
//it is possible that the tree-walking in OuterJoinLoader can get to //an association defined by a subclass, in which case the property-ref //might refer to a property defined on a subclass of the current class //in this case, the table name is not known - this temporary solution  //assumes that the property-ref refers to a property of the subclass //table that the association belongs to (a reasonable guess) //TODO: fix this, add: OuterJoinLoadable.getSubclassPropertyTableName(String propertyName)	DESIGN	0.9997881680619691	DESIGN	2.1183193803087837E-4	WITHOUT_CLASSIFICATION
// this only works because collection entries are kept in a sequenced // map by persistence context (maybe we should do like entities and // keep a separate sequences set...) //TODO: calling entrySet on an IdentityMap is SLOW!!	DESIGN	0.9956734462501722	DESIGN	0.004326553749827881	WITHOUT_CLASSIFICATION
// important, to account for newly saved entities in query // todo : some kind of check for new status...	DESIGN	0.8368902064140336	WITHOUT_CLASSIFICATION	0.1631097935859664	DESIGN
// brand new collection //TODO: or an array!! we can't lock objects with arrays now??	DESIGN	0.8927875257558163	DESIGN	0.10721247424418374	WITHOUT_CLASSIFICATION
//TODO: if object was an uninitialized proxy, this is inefficient, //      resulting in two SQL selects	DESIGN	0.99209252877476	DESIGN	0.007907471225240006	WITHOUT_CLASSIFICATION
//before cascade! //TODO: should this be Session.instantiate(Persister, ...)?	DESIGN	0.9983387759311696	DESIGN	0.0016612240688304435	WITHOUT_CLASSIFICATION
// TODO : absolutely no usages of this constructor form; can it go away?	DESIGN	0.9999784793146124	DESIGN	2.152068538757303E-5	WITHOUT_CLASSIFICATION
// todo : need to find a clean way to handle the "event source" role // a seperate classs responsible for generating/dispatching events just duplicates most of the Session methods... // passing around seperate reto interceptor, factory, actionQueue, and persistentContext is not manageable...	DESIGN	0.9999988320142184	WITHOUT_CLASSIFICATION	1.1679857815610931E-6	DESIGN
// todo : remove	DESIGN	0.9891322517208546	WITHOUT_CLASSIFICATION	0.010867748279145438	DESIGN
//aliasRefNode.resolve( false, false, aliasRefNode.getText() ); //TODO: is it kosher to do it here? //TODO: is it kosher to do it here?	DESIGN	0.999997305208664	DESIGN	2.694791335981643E-6	WITHOUT_CLASSIFICATION
// No explicit select expression; render the id and properties // projection lists for every persister in the from clause into // a single 'token node'. //TODO: the only reason we need this stuff now is collection filters, //      we should get rid of derived select clause completely!	DESIGN	0.9999988987265784	DESIGN	1.1012734216356482E-6	WITHOUT_CLASSIFICATION
// TODO : an optimization here would be to consider cascade deletes and not gen those delete statements; //      the difficulty is the ordering of the tables here vs the cascade attributes on the persisters -> //          the table info gotten here should really be self-contained (i.e., a class representation //          defining all the needed attributes), then we could then get an array of those	DESIGN	0.9793642041000774	DESIGN	0.020635795899922572	WITHOUT_CLASSIFICATION
// TODO: get SQL rendering out of here, create an AST for the join expressions. // Use the SQL generator grammar to generate the SQL text for the index expression.	DESIGN	0.9483456634626459	WITHOUT_CLASSIFICATION	0.05165433653735406	DESIGN
// TODO : this really needs to be delayed unitl after we definitively know all node types // where this is currently a problem is parameters for which where we cannot unequivocally // resolve an expected type	DESIGN	0.9998154862244103	DESIGN	1.8451377558964372E-4	WITHOUT_CLASSIFICATION
// TODO: Figure out a better way to get the FROM elements in a proper tree structure. // If this is not the destination of a many-to-many, add it as a child of the origin.	DESIGN	0.9999997459678704	DESIGN	2.540321296376506E-7	WITHOUT_CLASSIFICATION
// work around that crazy issue where the tree contains // "empty" FromElements (no text); afaict, this is caused // by FromElementFactory.createCollectionJoin()	DESIGN	0.9990485454327177	WITHOUT_CLASSIFICATION	9.514545672822849E-4	DESIGN
//TODO: this class does too many things! we need a different //kind of path expression parser for each of the diffferent //ways in which path expressions can occur	DESIGN	0.9963753534578769	DESIGN	0.003624646542123124	WITHOUT_CLASSIFICATION
//real hacky... // used to count the nesting of parentheses	DESIGN	0.9795394798727896	DESIGN	0.020460520127210467	WITHOUT_CLASSIFICATION
// TODO : would be really nice to cache the spec on the query-def so as to not have to re-calc the hash; // currently not doable though because of the resultset-ref stuff...	DESIGN	0.9999887869967	DESIGN	1.121300329993177E-5	WITHOUT_CLASSIFICATION
//for arrays, we should end the collection load before resolving //the entities, since the actual array instances are not instantiated //during loading //TODO: or we could do this polymorphically, and have two //      different operations implemented differently for arrays	DESIGN	0.9999949790629883	DESIGN	5.020937011656038E-6	WITHOUT_CLASSIFICATION
// polymorphism not really handled completely correctly, // perhaps...well, actually its ok, assuming that the // entity name used in the lookup is the same as the // the one used here, which it will be	DESIGN	0.8554210044740075	WITHOUT_CLASSIFICATION	0.14457899552599243	DESIGN
// TODO: should "record" how many properties we have reffered to - and if we  //       don't get'em'all we throw an exception! Way better than trial and error ;)	DESIGN	0.9999971703770821	DESIGN	2.829622917785333E-6	WITHOUT_CLASSIFICATION
// VERY IMPORTANT!!!! - This class needs to be free of any static references // to any CGLIB or Javassist classes.  Otherwise, users will always need both // on their classpaths no matter which (if either) they use. // // Another option here would be to remove the Hibernate.isPropertyInitialized() // method and have the users go through the SessionFactory to get this information.	DESIGN	0.9999335645001277	WITHOUT_CLASSIFICATION	6.643549987228129E-5	DESIGN
// TODO: is it really neceassry to provide Configuration to CollectionPersisters ? Should it not be enough with associated class ? // or why does EntityPersister's not get access to configuration ? // // The only reason I could see that Configuration gets passed to collection persisters // is so that they can look up the dom4j node name of the entity element in case // no explicit node name was applied at the collection element level.  Are you kidding me? // Trivial to fix then.  Just store and expose the node name on the entity persister // (which the collection persister looks up anyway via other means...).	DESIGN	0.9999647128101912	DESIGN	3.5287189808785886E-5	WITHOUT_CLASSIFICATION
//for backward compatibility, allow a set with no not-null  //element columns, using all columns in the row locater SQL //TODO: create an implicit not null constraint on all cols?	DESIGN	0.997734384170078	DESIGN	0.0022656158299219713	WITHOUT_CLASSIFICATION
//SPACES //TODO: i'm not sure, but perhaps we should exclude //      abstract denormalized tables?	DESIGN	0.9999995944605524	DESIGN	4.0553944759858465E-7	WITHOUT_CLASSIFICATION
//workaround, for backward compatibility of sets with no //not-null columns, assume all columns are used in the //row locator SQL	DESIGN	0.8373584478843134	DESIGN	0.16264155211568662	WITHOUT_CLASSIFICATION
//note that this method could easily be moved up to BasicEntityPersister, //if we ever needed to reuse it from other subclasses	DESIGN	0.8058132290682457	WITHOUT_CLASSIFICATION	0.1941867709317543	DESIGN
//index += getPropertyColumnSpan( i ); //TODO:  this is kinda slow...	DESIGN	0.9999958800982786	DESIGN	4.119901721451205E-6	WITHOUT_CLASSIFICATION
//TODO: need some caching scheme? really comes down to decision  //      regarding amount of state (if any) kept on PropertyAccessors	DESIGN	0.9990039575085743	DESIGN	9.960424914256122E-4	WITHOUT_CLASSIFICATION
// TODO: here is why we need to make bytecode provider global :( // TODO : again, fix this after HHH-1907 is complete	DESIGN	0.9999999994098011	DESIGN	5.901988644061182E-10	WITHOUT_CLASSIFICATION
//TODO: Yuck! This is not quite good enough, it's a quick //hack around the problem of having a to-one association //that refers to an embedded component:	DESIGN	0.9999999667634676	DESIGN	3.323653237998566E-8	WITHOUT_CLASSIFICATION
// for DOM4J "collections" only // TODO: it would be better if this was done at the higher level by Printer	DESIGN	0.9805931944280086	DESIGN	0.019406805571991356	WITHOUT_CLASSIFICATION
// would be great to move all this below here into another method that could also be used // from the new scrolling stuff. // // Would need to change the way the max-row stuff is handled (i.e. behind an interface) so // that I could do the control breaking at the means to know when to stop	DESIGN	0.9307015230471444	DESIGN	0.06929847695285564	WITHOUT_CLASSIFICATION
//TODO: can we *always* use the "null property" approach for everything?	DESIGN	0.9974735174481425	DESIGN	0.0025264825518575514	WITHOUT_CLASSIFICATION
//polymorphism comment above	DESIGN	0.9919903349752958	WITHOUT_CLASSIFICATION	0.008009665024704187	DESIGN
// some messy, complex stuff here, since createCriteria() can take an // aliased path, or a path rooted at the creating criteria instance	DESIGN	0.999994413952049	WITHOUT_CLASSIFICATION	5.586047950963715E-6	DESIGN
//TODO: really bad, evil hack to fix!!!	DESIGN	0.9999999976988146	DESIGN	2.3011854179310483E-9	WITHOUT_CLASSIFICATION
// ugly hack for cases like "elements(foo.bar.collection)" // (multi-part path expression ending in elements or indices)	DESIGN	0.9932981040755875	WITHOUT_CLASSIFICATION	0.006701895924412483	DESIGN
// try block is a hack around fact that currently tuplizers are not // given the opportunity to resolve a subclass entity name.  this // allows the (we assume custom) interceptor the ability to // influence this decision if we were not able to based on the // given entityName	DESIGN	0.5431763539590182	WITHOUT_CLASSIFICATION	0.4568236460409818	DESIGN
/////////////////////////////////////////////////////////////////////// // HACK ALERT !!!!!!!!!!!!!!!!!!!!!!!!!!!! // Attempt to work around "ghost" ImpliedFromElements that occasionally // show up between the actual things being joined.  This consistently // occurs from index nodes (at least against many-to-many).  Not sure // if there are other conditions // // Essentially, look-ahead to the next FromElement that actually // writes something to the SQL	DESIGN	0.9986301057234661	WITHOUT_CLASSIFICATION	0.0013698942765338383	DESIGN
//init the table here instead of earlier, so that we can get a quoted table name //TODO: would it be better to simply pass the qualified table name, instead of //      splitting it up into schema/catalog/table names	DESIGN	0.9995684155649301	DESIGN	4.315844350699032E-4	WITHOUT_CLASSIFICATION
// TODO : would be great to have a Mapping#hasNonIdentifierPropertyNamedId method // I don't believe that Mapping#getReferencedPropertyType accounts for the identifier property; so // if it returns for a property named 'id', then we should have a non-id field named id	DESIGN	0.9418964746324856	DESIGN	0.05810352536751429	WITHOUT_CLASSIFICATION
//TODO: is this really necessary????	DESIGN	0.9999993263764968	DESIGN	6.736235032770043E-7	WITHOUT_CLASSIFICATION
//TODO: ideally we need the construction of PropertyAccessor to take the following: //      1) EntityMode //      2) EntityMode-specific data (i.e., the classname for pojo entities) //      3) Property-specific data based on the EntityMode (i.e., property-name or dom4j-node-name) // The easiest way, with the introduction of the new runtime-metamodel classes, would be the // the following predicates: //      1) PropertyAccessorFactory.getPropertyAccessor() takes references to both a //          org.hibernate.metadata.EntityModeMetadata and org.hibernate.metadata.Property //      2) What is now termed a "PropertyAccessor" stores any values needed from those two //          pieces of information //      3) Code can then simply call PropertyAccess.getGetter() with no parameters; likewise with //          PropertyAccessor.getSetter()	DESIGN	0.9842524922828574	DESIGN	0.015747507717142516	WITHOUT_CLASSIFICATION
//TODO: this is temporary in that the end result will probably not take a Property reference per-se.	DESIGN	0.9999992299735465	DESIGN	7.700264534563327E-7	WITHOUT_CLASSIFICATION
// todo : this eventually needs to be removed	DESIGN	0.8662262520535303	DESIGN	0.1337737479464698	WITHOUT_CLASSIFICATION
//TODO: make this a bit nicer	DESIGN	0.9999988407227809	DESIGN	1.1592772191091312E-6	WITHOUT_CLASSIFICATION
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.8325228109457802	DESIGN	0.16747718905421977	WITHOUT_CLASSIFICATION
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.8325228109457802	DESIGN	0.16747718905421977	WITHOUT_CLASSIFICATION
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.8325228109457802	DESIGN	0.16747718905421977	WITHOUT_CLASSIFICATION
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.8325228109457802	DESIGN	0.16747718905421977	WITHOUT_CLASSIFICATION
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.8325228109457802	DESIGN	0.16747718905421977	WITHOUT_CLASSIFICATION
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.8325228109457802	DESIGN	0.16747718905421977	WITHOUT_CLASSIFICATION
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.8325228109457802	DESIGN	0.16747718905421977	WITHOUT_CLASSIFICATION
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.8325228109457802	DESIGN	0.16747718905421977	WITHOUT_CLASSIFICATION
/**     * FIXME Per the RegionFactory class Javadoc, this constructor version     * should not be necessary.     *      * @param props The configuration properties     */	DESIGN	0.999730461673967	DESIGN	2.695383260330088E-4	WITHOUT_CLASSIFICATION
/**     * FIXME Per the RegionFactory class Javadoc, this constructor version     * should not be necessary.     *      * @param props The configuration properties     */	DESIGN	0.999730461673967	DESIGN	2.695383260330088E-4	WITHOUT_CLASSIFICATION
/**     * FIXME Per the RegionFactory class Javadoc, this constructor version     * should not be necessary.     *      * @param props The configuration properties     */	DESIGN	0.999730461673967	DESIGN	2.695383260330088E-4	WITHOUT_CLASSIFICATION
// TODO : probably better to calculate these and pass them in, as it'll be more performant	DESIGN	0.999959196336566	DESIGN	4.0803663433957445E-5	WITHOUT_CLASSIFICATION
