//test out the optimizer:	WITHOUT_CLASSIFICATION	0.9999926152752742	WITHOUT_CLASSIFICATION	7.384724725752502E-6	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.999999424363548	WITHOUT_CLASSIFICATION	5.75636451931972E-7	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.999999424363548	WITHOUT_CLASSIFICATION	5.75636451931972E-7	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.999999424363548	WITHOUT_CLASSIFICATION	5.75636451931972E-7	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.999999424363548	WITHOUT_CLASSIFICATION	5.75636451931972E-7	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.999999424363548	WITHOUT_CLASSIFICATION	5.75636451931972E-7	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.999999424363548	WITHOUT_CLASSIFICATION	5.75636451931972E-7	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.999999424363548	WITHOUT_CLASSIFICATION	5.75636451931972E-7	DESIGN
// return	WITHOUT_CLASSIFICATION	0.9999698553086941	WITHOUT_CLASSIFICATION	3.014469130591012E-5	DESIGN
// return	WITHOUT_CLASSIFICATION	0.9999698553086941	WITHOUT_CLASSIFICATION	3.014469130591012E-5	DESIGN
/* | this | bean | args | raw bean | */	WITHOUT_CLASSIFICATION	0.9995022461680717	WITHOUT_CLASSIFICATION	4.977538319282922E-4	DESIGN
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999967895869161	WITHOUT_CLASSIFICATION	3.21041308401627E-6	DESIGN
// astore 4 // store the raw bean	WITHOUT_CLASSIFICATION	0.999999523343631	WITHOUT_CLASSIFICATION	4.7665636907358153E-7	DESIGN
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999998267642061	WITHOUT_CLASSIFICATION	1.7323579392747272E-7	DESIGN
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999998267642061	WITHOUT_CLASSIFICATION	1.7323579392747272E-7	DESIGN
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.9999999101175179	WITHOUT_CLASSIFICATION	8.988248211064875E-8	DESIGN
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999999849340919	WITHOUT_CLASSIFICATION	1.5065908054849633E-8	DESIGN
// putfield // new value of the field	WITHOUT_CLASSIFICATION	0.9999883390255352	WITHOUT_CLASSIFICATION	1.1660974464720084E-5	DESIGN
// reference type	WITHOUT_CLASSIFICATION	0.9999764268311293	WITHOUT_CLASSIFICATION	2.3573168870777655E-5	DESIGN
// double	WITHOUT_CLASSIFICATION	0.9999981164904109	WITHOUT_CLASSIFICATION	1.883509588997263E-6	DESIGN
// double	WITHOUT_CLASSIFICATION	0.9999981164904109	WITHOUT_CLASSIFICATION	1.883509588997263E-6	DESIGN
// long	WITHOUT_CLASSIFICATION	0.9999959867984242	WITHOUT_CLASSIFICATION	4.013201575824673E-6	DESIGN
// just decrement the lock, don't recache // (we don't know which transaction won)	WITHOUT_CLASSIFICATION	0.9994103308086784	WITHOUT_CLASSIFICATION	5.896691913217232E-4	DESIGN
// decode row selection...	WITHOUT_CLASSIFICATION	0.9994132229210652	WITHOUT_CLASSIFICATION	5.867770789348954E-4	DESIGN
//disassembled state gets put in a new array (we write to cache by value!)	WITHOUT_CLASSIFICATION	0.9999917530375121	WITHOUT_CLASSIFICATION	8.24696248787513E-6	DESIGN
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.999999960245752	WITHOUT_CLASSIFICATION	3.975424802677116E-8	DESIGN
// CHECK	WITHOUT_CLASSIFICATION	0.9999842153034089	WITHOUT_CLASSIFICATION	1.5784696591206253E-5	DESIGN
// ROW ID	WITHOUT_CLASSIFICATION	0.9999875846933388	WITHOUT_CLASSIFICATION	1.241530666111043E-5	DESIGN
// COMPOSITE-ID	WITHOUT_CLASSIFICATION	0.9999996774553213	WITHOUT_CLASSIFICATION	3.225446787986625E-7	DESIGN
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999950921041799	WITHOUT_CLASSIFICATION	4.907895820048863E-6	DESIGN
/*	WITHOUT_CLASSIFICATION	0.9420771668041136	WITHOUT_CLASSIFICATION	0.05792283319588644	DESIGN
// DYNAMIC INSERT	WITHOUT_CLASSIFICATION	0.9999909398595013	WITHOUT_CLASSIFICATION	9.060140498643003E-6	DESIGN
// PERSISTER	WITHOUT_CLASSIFICATION	0.9999957522086435	WITHOUT_CLASSIFICATION	4.247791356608835E-6	DESIGN
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999944428682477	WITHOUT_CLASSIFICATION	5.557131752317885E-6	DESIGN
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999892312933035	WITHOUT_CLASSIFICATION	1.0768706696421083E-5	DESIGN
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999892312933035	WITHOUT_CLASSIFICATION	1.0768706696421083E-5	DESIGN
// generated properties can *never* be insertable...	WITHOUT_CLASSIFICATION	0.9999724815324472	WITHOUT_CLASSIFICATION	2.7518467552792283E-5	DESIGN
// TABLE	WITHOUT_CLASSIFICATION	0.9999982670963696	WITHOUT_CLASSIFICATION	1.7329036303507705E-6	DESIGN
//by default, natural-ids are "immutable" (constant)	WITHOUT_CLASSIFICATION	0.9999921082202228	WITHOUT_CLASSIFICATION	7.891779777250603E-6	DESIGN
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.999995841707283	WITHOUT_CLASSIFICATION	4.158292717106868E-6	DESIGN
// we found some extends attributes referencing entities which were // not already processed.  here we need to locate all entity-names // and class-names contained in this document itself, making sure // that these get removed from the extendz list such that only // extends names which require us to delay processing (i.e. // external to this document and not yet processed) are contained // in the returned result	WITHOUT_CLASSIFICATION	0.9087732063699308	DESIGN	0.09122679363006932	WITHOUT_CLASSIFICATION
/**	WITHOUT_CLASSIFICATION	0.9098463739076227	DESIGN	0.09015362609237733	WITHOUT_CLASSIFICATION
//	WITHOUT_CLASSIFICATION	0.9966662531954268	WITHOUT_CLASSIFICATION	0.003333746804573307	DESIGN
//	WITHOUT_CLASSIFICATION	0.9966662531954268	WITHOUT_CLASSIFICATION	0.003333746804573307	DESIGN
/**	WITHOUT_CLASSIFICATION	0.9098463739076227	DESIGN	0.09015362609237733	WITHOUT_CLASSIFICATION
//	WITHOUT_CLASSIFICATION	0.9966662531954268	WITHOUT_CLASSIFICATION	0.003333746804573307	DESIGN
// If close() is called, guarantee unbind()	WITHOUT_CLASSIFICATION	0.9999999999617832	WITHOUT_CLASSIFICATION	3.8216804608815505E-11	DESIGN
// if a ThreadLocalSessionContext-bound session happens to get // serialized, to be completely correct, we need to make sure // that unbinding of that session occurs.	WITHOUT_CLASSIFICATION	0.9999902985514145	WITHOUT_CLASSIFICATION	9.701448585372977E-6	DESIGN
// on the inverse, it makes sense that if a ThreadLocalSessionContext- // bound session then gets deserialized to go ahead and re-bind it to // the ThreadLocalSessionContext session map.	WITHOUT_CLASSIFICATION	0.9999999493516821	WITHOUT_CLASSIFICATION	5.064831777727631E-8	DESIGN
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9987278776301186	WITHOUT_CLASSIFICATION	0.0012721223698813344	DESIGN
// 60 second lock timeout	WITHOUT_CLASSIFICATION	0.9999947823035124	WITHOUT_CLASSIFICATION	5.217696487725766E-6	DESIGN
// OptimisticCache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999989692115147	WITHOUT_CLASSIFICATION	1.030788485283257E-6	DESIGN
// Cache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999951672036331	WITHOUT_CLASSIFICATION	4.832796366884397E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.9966662531954268	WITHOUT_CLASSIFICATION	0.003333746804573307	DESIGN
// do the put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999272713503858	WITHOUT_CLASSIFICATION	7.272864961407853E-5	DESIGN
//ignore!	WITHOUT_CLASSIFICATION	0.9999960150672347	WITHOUT_CLASSIFICATION	3.984932765330253E-6	DESIGN
// tree cache in optimistic mode seems to have as very difficult // time with remove calls on non-existent nodes (NPEs)...	WITHOUT_CLASSIFICATION	0.9999926497025967	WITHOUT_CLASSIFICATION	7.350297403332734E-6	DESIGN
//60 seconds	WITHOUT_CLASSIFICATION	0.9999887422332466	WITHOUT_CLASSIFICATION	1.1257766753439177E-5	DESIGN
//ignore!	WITHOUT_CLASSIFICATION	0.9999960150672347	WITHOUT_CLASSIFICATION	3.984932765330253E-6	DESIGN
//60 seconds	WITHOUT_CLASSIFICATION	0.9999887422332466	WITHOUT_CLASSIFICATION	1.1257766753439177E-5	DESIGN
//do the failfast put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999995671305487	WITHOUT_CLASSIFICATION	4.3286945128138424E-7	DESIGN
// NOTE : evict() operates locally only (i.e., does not propogate // to any other nodes in the potential cluster).  This is // exactly what is needed when we destroy() here; destroy() is used // as part of the process of shutting down a SessionFactory; thus // these removals should not be propogated	WITHOUT_CLASSIFICATION	0.959901884029775	DESIGN	0.04009811597022507	WITHOUT_CLASSIFICATION
//    protected RegionRootListener listener;	WITHOUT_CLASSIFICATION	0.9999998120089715	WITHOUT_CLASSIFICATION	1.8799102845918874E-7	DESIGN
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999867837464526	WITHOUT_CLASSIFICATION	1.3216253547526426E-5	DESIGN
// If we've been blocking for the mutex, perhaps another // thread has already reestablished the root. // In case the node was reestablised via replication, confirm it's  // marked "resident" (a status which doesn't replicate)	WITHOUT_CLASSIFICATION	0.9993098819832819	WITHOUT_CLASSIFICATION	6.901180167181646E-4	DESIGN
// For pessimistic locking, we just want to toss out our ref // to any old invalid root node and get the latest (may be null)            	WITHOUT_CLASSIFICATION	0.9999569289027772	WITHOUT_CLASSIFICATION	4.3071097222733073E-5	DESIGN
// The rest only matters for optimistic locking, where we // need to establish the proper data version on the region root	WITHOUT_CLASSIFICATION	0.9941791472269502	WITHOUT_CLASSIFICATION	0.005820852773049811	DESIGN
// Don't hold a transactional lock for this 	WITHOUT_CLASSIFICATION	0.9691086485141405	WITHOUT_CLASSIFICATION	0.03089135148585944	DESIGN
// Make sure the root node for the region exists and  // has a DataVersion that never complains	WITHOUT_CLASSIFICATION	0.999999995696142	WITHOUT_CLASSIFICATION	4.303858055146488E-9	DESIGN
// Never evict this node	WITHOUT_CLASSIFICATION	0.999955967897645	WITHOUT_CLASSIFICATION	4.4032102355096276E-5	DESIGN
// Fix up the resident flag	WITHOUT_CLASSIFICATION	0.9999113232873962	WITHOUT_CLASSIFICATION	8.867671260384006E-5	DESIGN
// 60 seconds	WITHOUT_CLASSIFICATION	0.9999990490139649	WITHOUT_CLASSIFICATION	9.509860351885428E-7	DESIGN
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.999999965789723	WITHOUT_CLASSIFICATION	3.4210276968639444E-8	DESIGN
// no-op. We don't own the cache so we shouldn't stop it.	WITHOUT_CLASSIFICATION	0.9998209248776102	WITHOUT_CLASSIFICATION	1.7907512238982736E-4	DESIGN
// This should only be possible if the caches are constructor injected 	WITHOUT_CLASSIFICATION	0.9877162340212908	WITHOUT_CLASSIFICATION	0.012283765978709237	DESIGN
// We only build caches if *none* were passed in.  Passing in // caches counts as a clear statement of exactly what is wanted	WITHOUT_CLASSIFICATION	0.9999634209383966	WITHOUT_CLASSIFICATION	3.6579061603473926E-5	DESIGN
// Set up the cache factory	WITHOUT_CLASSIFICATION	0.9999412996625955	WITHOUT_CLASSIFICATION	5.870033740440509E-5	DESIGN
// See if the user configured a multiplexer stack	WITHOUT_CLASSIFICATION	0.9999643016380027	WITHOUT_CLASSIFICATION	3.569836199737548E-5	DESIGN
// Default to collections sharing entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999993658108403	WITHOUT_CLASSIFICATION	6.341891598611083E-7	DESIGN
// Default to sharing the entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999999183170307	WITHOUT_CLASSIFICATION	8.168296927632733E-8	DESIGN
// For Timestamps, we default to a separate config	WITHOUT_CLASSIFICATION	0.999974935188334	WITHOUT_CLASSIFICATION	2.5064811665995522E-5	DESIGN
// We can't change the TM on a running cache; just check // if the cache has no TM and we're OK with that	WITHOUT_CLASSIFICATION	0.9999996275606007	WITHOUT_CLASSIFICATION	3.7243939921713166E-7	DESIGN
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999044249334755	WITHOUT_CLASSIFICATION	9.557506652452269E-5	DESIGN
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999993055751027	WITHOUT_CLASSIFICATION	6.94424897291631E-7	DESIGN
// This method should be implemented assuming it's valid to  // do start/stop/start -- leave state appropriate for another start	WITHOUT_CLASSIFICATION	0.746147442494655	DESIGN	0.253852557505345	WITHOUT_CLASSIFICATION
// Make sure we don't re-release the same cache	WITHOUT_CLASSIFICATION	0.999999616698205	WITHOUT_CLASSIFICATION	3.833017950484516E-7	DESIGN
// We use a different delegate than the non-optimistic superclass default	WITHOUT_CLASSIFICATION	0.9999999612926567	WITHOUT_CLASSIFICATION	3.870734324707519E-8	DESIGN
// Following methods we don't delegate since they have so little logic // it's clearer to just implement them here	WITHOUT_CLASSIFICATION	0.9055251826594803	DESIGN	0.09447481734051971	WITHOUT_CLASSIFICATION
// If JBC is using INVALIDATION, we don't want to propagate changes. // We use the Timestamps cache to manage invalidation	WITHOUT_CLASSIFICATION	0.999999960480401	WITHOUT_CLASSIFICATION	3.951959901403005E-8	DESIGN
// We don't want to waste effort setting an option if JBC is // already in LOCAL mode. If JBC is REPL_(A)SYNC then check // if they passed an config option to disable query replication	WITHOUT_CLASSIFICATION	0.9999975221881622	WITHOUT_CLASSIFICATION	2.4778118377217325E-6	DESIGN
// Don't hold the JBC node lock throughout the tx, as that // prevents updates // Add a zero (or low) timeout option so we don't block // waiting for tx's that did a put to commit	WITHOUT_CLASSIFICATION	0.9999999999582375	WITHOUT_CLASSIFICATION	4.1762480400402446E-11	DESIGN
// Double check the distributed cache	WITHOUT_CLASSIFICATION	0.9999999748687305	WITHOUT_CLASSIFICATION	2.513126961574613E-8	DESIGN
// Get an exclusive right to update JBC for this key from this node.	WITHOUT_CLASSIFICATION	0.9999572278707003	WITHOUT_CLASSIFICATION	4.277212929968711E-5	DESIGN
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.99997631561934	WITHOUT_CLASSIFICATION	2.3684380659962145E-5	DESIGN
// Initial load from JBC	WITHOUT_CLASSIFICATION	0.9999999933647952	WITHOUT_CLASSIFICATION	6.635204809067513E-9	DESIGN
// See if we had a 2nd invalidation from the same initial // preinvalidation timestamp. If so, only increment // if the new current value is an increase	WITHOUT_CLASSIFICATION	0.999999999961571	WITHOUT_CLASSIFICATION	3.842910537366868E-11	DESIGN
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.99997631561934	WITHOUT_CLASSIFICATION	2.3684380659962145E-5	DESIGN
// If the workspace node has null as well, OK; if not we've // been modified in a non-comparable manner, which we have to // treat as us being newer	WITHOUT_CLASSIFICATION	0.9999999993069565	WITHOUT_CLASSIFICATION	6.930435600336092E-10	DESIGN
// The standard comparator types are not Serializable but are singletons	WITHOUT_CLASSIFICATION	0.9999999096295539	WITHOUT_CLASSIFICATION	9.037044612986037E-8	DESIGN
// ignore!	WITHOUT_CLASSIFICATION	0.999999853329593	WITHOUT_CLASSIFICATION	1.466704070387911E-7	DESIGN
// ignore it	WITHOUT_CLASSIFICATION	0.9999998907169921	WITHOUT_CLASSIFICATION	1.0928300783400715E-7	DESIGN
// construct the cache	WITHOUT_CLASSIFICATION	0.9999835853102396	WITHOUT_CLASSIFICATION	1.641468976047263E-5	DESIGN
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999974994602332	WITHOUT_CLASSIFICATION	2.5005397667585143E-6	DESIGN
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999974994602332	WITHOUT_CLASSIFICATION	2.5005397667585143E-6	DESIGN
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999938569010695	WITHOUT_CLASSIFICATION	6.143098930520934E-6	DESIGN
//swaldman 2006-08-28: define c3p0-style configuration parameters for initialPoolSize, which //                     hibernate sensibly lets default to minPoolSize, but we'll let users //                     override it with the c3p0-style property if they want.	WITHOUT_CLASSIFICATION	0.9999508823685618	WITHOUT_CLASSIFICATION	4.911763143823999E-5	DESIGN
/*DataSource unpooled = DataSources.unpooledDataSource(	WITHOUT_CLASSIFICATION	0.9999768562268536	WITHOUT_CLASSIFICATION	2.314377314638044E-5	DESIGN
// TRUE if the pool is borrowed from the outside, FALSE if we used to create it	WITHOUT_CLASSIFICATION	0.9999959531161907	WITHOUT_CLASSIFICATION	4.046883809269918E-6	DESIGN
// get a connection from the pool (thru DriverManager, cfr. Proxool doc)	WITHOUT_CLASSIFICATION	0.9999996617194354	WITHOUT_CLASSIFICATION	3.382805645871131E-7	DESIGN
// set the Transaction Isolation if defined	WITHOUT_CLASSIFICATION	0.9999935645008327	WITHOUT_CLASSIFICATION	6.435499167331891E-6	DESIGN
// toggle autoCommit to false if set	WITHOUT_CLASSIFICATION	0.9999999699545205	WITHOUT_CLASSIFICATION	3.0045479561761925E-8	DESIGN
// return the connection	WITHOUT_CLASSIFICATION	0.9999269726147593	WITHOUT_CLASSIFICATION	7.30273852408458E-5	DESIGN
// Get the configurator files (if available)	WITHOUT_CLASSIFICATION	0.9999686249788579	WITHOUT_CLASSIFICATION	3.137502114204459E-5	DESIGN
// Default the Proxool alias setting	WITHOUT_CLASSIFICATION	0.9999999992462127	WITHOUT_CLASSIFICATION	7.537872437533111E-10	DESIGN
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999995928101386	WITHOUT_CLASSIFICATION	4.071898613553718E-7	DESIGN
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999995928101386	WITHOUT_CLASSIFICATION	4.071898613553718E-7	DESIGN
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999999907160608	WITHOUT_CLASSIFICATION	9.28393921436729E-9	DESIGN
// Set the existing pool flag to true	WITHOUT_CLASSIFICATION	0.9999999788448386	WITHOUT_CLASSIFICATION	2.115516144571754E-8	DESIGN
// Configured using the JAXP Configurator	WITHOUT_CLASSIFICATION	0.9995118688529101	WITHOUT_CLASSIFICATION	4.8813114708997734E-4	DESIGN
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999995928101386	WITHOUT_CLASSIFICATION	4.071898613553718E-7	DESIGN
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999999907160608	WITHOUT_CLASSIFICATION	9.28393921436729E-9	DESIGN
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999999907160608	WITHOUT_CLASSIFICATION	9.28393921436729E-9	DESIGN
// Configured using the Properties File Configurator	WITHOUT_CLASSIFICATION	0.9998691370977459	WITHOUT_CLASSIFICATION	1.3086290225410873E-4	DESIGN
// Remember Isolation level	WITHOUT_CLASSIFICATION	0.9999590039360576	WITHOUT_CLASSIFICATION	4.0996063942251286E-5	DESIGN
// If the provider was leeching off an existing pool don't close it	WITHOUT_CLASSIFICATION	0.999999999943843	WITHOUT_CLASSIFICATION	5.615683191701151E-11	DESIGN
// We have created the pool ourselves, so shut it down	WITHOUT_CLASSIFICATION	0.9999905872676392	WITHOUT_CLASSIFICATION	9.412732360905394E-6	DESIGN
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.9993078555276809	WITHOUT_CLASSIFICATION	6.921444723191077E-4	DESIGN
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.9993078555276809	WITHOUT_CLASSIFICATION	6.921444723191077E-4	DESIGN
//always overwrite nonversioned data	WITHOUT_CLASSIFICATION	0.9999998735089141	WITHOUT_CLASSIFICATION	1.2649108586533556E-7	DESIGN
//public Currency getCurrency(int col) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9972752353291784	WITHOUT_CLASSIFICATION	0.0027247646708216215	DESIGN
// default is POJO	WITHOUT_CLASSIFICATION	0.9999988211500315	WITHOUT_CLASSIFICATION	1.1788499685536013E-6	DESIGN
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.999991070743926	WITHOUT_CLASSIFICATION	8.929256073917315E-6	DESIGN
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.999991070743926	WITHOUT_CLASSIFICATION	8.929256073917315E-6	DESIGN
//private CacheEntry cacheEntry;	WITHOUT_CLASSIFICATION	0.9999797283737776	WITHOUT_CLASSIFICATION	2.027162622249317E-5	DESIGN
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9992883015226379	WITHOUT_CLASSIFICATION	7.116984773621135E-4	DESIGN
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9695216973420204	WITHOUT_CLASSIFICATION	0.030478302657979555	DESIGN
// get the updated snapshot of the entity state by cloning current state; // it is safe to copy in place, since by this time no-one else (should have) // has a reference  to the array	WITHOUT_CLASSIFICATION	0.9999999918681566	WITHOUT_CLASSIFICATION	8.131843351436391E-9	DESIGN
// this entity defines proeprty generation, so process those generated // values...	WITHOUT_CLASSIFICATION	0.9999758433078724	WITHOUT_CLASSIFICATION	2.4156692127631914E-5	DESIGN
// have the entity entry perform post-update processing, passing it the // update state and the new version (if one).	WITHOUT_CLASSIFICATION	0.9999999617038217	WITHOUT_CLASSIFICATION	3.829617839682784E-8	DESIGN
/*!persister.isCacheInvalidationRequired()*/	WITHOUT_CLASSIFICATION	0.9999977801328006	WITHOUT_CLASSIFICATION	2.219867199456182E-6	DESIGN
// need to look it up from the persistence-context	WITHOUT_CLASSIFICATION	0.9994087478024974	WITHOUT_CLASSIFICATION	5.912521975025908E-4	DESIGN
//sort first by role name	WITHOUT_CLASSIFICATION	0.999940070682773	WITHOUT_CLASSIFICATION	5.992931722698379E-5	DESIGN
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9695216973420204	WITHOUT_CLASSIFICATION	0.030478302657979555	DESIGN
//then by fk	WITHOUT_CLASSIFICATION	0.9995860343102826	WITHOUT_CLASSIFICATION	4.1396568971745093E-4	DESIGN
// nothing to do	WITHOUT_CLASSIFICATION	0.9999702959649172	WITHOUT_CLASSIFICATION	2.9704035082844225E-5	DESIGN
// nothing to do	WITHOUT_CLASSIFICATION	0.9999702959649172	WITHOUT_CLASSIFICATION	2.9704035082844225E-5	DESIGN
// an existing collection that was either non-empty or uninitialized // is replaced by null or a different collection // (if the collection is uninitialized, hibernate has no way of // knowing if the collection is actually empty without querying the db)	WITHOUT_CLASSIFICATION	0.9990232594168523	WITHOUT_CLASSIFICATION	9.767405831475097E-4	DESIGN
// this method is called when a new non-null collection is persisted // or when an existing (non-null) collection is moved to a new owner	WITHOUT_CLASSIFICATION	0.9999653546848115	WITHOUT_CLASSIFICATION	3.4645315188440754E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9966662531954268	WITHOUT_CLASSIFICATION	0.003333746804573307	DESIGN
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9492579515149033	WITHOUT_CLASSIFICATION	0.05074204848509672	DESIGN
//do nothing - we only need to notify the cache...	WITHOUT_CLASSIFICATION	0.9999693515622721	WITHOUT_CLASSIFICATION	3.06484377278837E-5	DESIGN
//sort first by entity name	WITHOUT_CLASSIFICATION	0.9998290690515621	WITHOUT_CLASSIFICATION	1.7093094843801437E-4	DESIGN
//then by id	WITHOUT_CLASSIFICATION	0.9960118207329278	WITHOUT_CLASSIFICATION	0.003988179267072144	DESIGN
// to be safe...	WITHOUT_CLASSIFICATION	0.9998125381257741	WITHOUT_CLASSIFICATION	1.8746187422594672E-4	DESIGN
// no transformations took place, so handle it as we would a // non-instrumented class	WITHOUT_CLASSIFICATION	0.9999977533368317	WITHOUT_CLASSIFICATION	2.2466631682694656E-6	DESIGN
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999999901078909	WITHOUT_CLASSIFICATION	9.892109218870035E-9	DESIGN
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999999901078909	WITHOUT_CLASSIFICATION	9.892109218870035E-9	DESIGN
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999778855744089	WITHOUT_CLASSIFICATION	2.2114425591113192E-5	DESIGN
//test out the optimizer:	WITHOUT_CLASSIFICATION	0.9999926152752742	WITHOUT_CLASSIFICATION	7.384724725752502E-6	DESIGN
// set the name of bulk accessor.	WITHOUT_CLASSIFICATION	0.9999991136313511	WITHOUT_CLASSIFICATION	8.863686489357043E-7	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.999999424363548	WITHOUT_CLASSIFICATION	5.75636451931972E-7	DESIGN
// invokespecial	WITHOUT_CLASSIFICATION	0.9999997694600149	WITHOUT_CLASSIFICATION	2.3053998521368346E-7	DESIGN
// return	WITHOUT_CLASSIFICATION	0.9999698553086941	WITHOUT_CLASSIFICATION	3.014469130591012E-5	DESIGN
// aload_1 // load bean	WITHOUT_CLASSIFICATION	0.9999988943173246	WITHOUT_CLASSIFICATION	1.1056826754544133E-6	DESIGN
// checkcast // cast bean	WITHOUT_CLASSIFICATION	0.9999906661358787	WITHOUT_CLASSIFICATION	9.333864121268803E-6	DESIGN
// astore_3 // store bean	WITHOUT_CLASSIFICATION	0.9999979644483222	WITHOUT_CLASSIFICATION	2.0355516777602726E-6	DESIGN
// aload_2 // args	WITHOUT_CLASSIFICATION	0.999999694575015	WITHOUT_CLASSIFICATION	3.054249848786462E-7	DESIGN
// iconst_i // continue to aastore // growing stack is 1	WITHOUT_CLASSIFICATION	0.9999995579967841	WITHOUT_CLASSIFICATION	4.4200321597427485E-7	DESIGN
// new	WITHOUT_CLASSIFICATION	0.9998983812593524	WITHOUT_CLASSIFICATION	1.0161874064763585E-4	DESIGN
// dup	WITHOUT_CLASSIFICATION	0.9999781426467559	WITHOUT_CLASSIFICATION	2.1857353244075244E-5	DESIGN
// aload_3 // load the raw bean	WITHOUT_CLASSIFICATION	0.9999987827199173	WITHOUT_CLASSIFICATION	1.2172800827293773E-6	DESIGN
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999967895869161	WITHOUT_CLASSIFICATION	3.21041308401627E-6	DESIGN
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999997797869694	WITHOUT_CLASSIFICATION	2.2021303047532052E-7	DESIGN
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999997797869694	WITHOUT_CLASSIFICATION	2.2021303047532052E-7	DESIGN
// aastore // args	WITHOUT_CLASSIFICATION	0.9999996002761828	WITHOUT_CLASSIFICATION	3.9972381716861457E-7	DESIGN
/* | this | bean | args | i | raw bean | exception | */	WITHOUT_CLASSIFICATION	0.9976367447759015	WITHOUT_CLASSIFICATION	0.002363255224098555	DESIGN
// required to exception table // iconst_0 // i	WITHOUT_CLASSIFICATION	0.9999947069439231	WITHOUT_CLASSIFICATION	5.293056076949498E-6	DESIGN
// istore_3 // store i	WITHOUT_CLASSIFICATION	0.9999989528428402	WITHOUT_CLASSIFICATION	1.0471571597460897E-6	DESIGN
// aload_1 // load the bean	WITHOUT_CLASSIFICATION	0.9999979287603108	WITHOUT_CLASSIFICATION	2.07123968919495E-6	DESIGN
// checkcast // cast the bean into a raw bean	WITHOUT_CLASSIFICATION	0.9999137887710949	WITHOUT_CLASSIFICATION	8.621122890505098E-5	DESIGN
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999998267642061	WITHOUT_CLASSIFICATION	1.7323579392747272E-7	DESIGN
// start region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9986511129373078	WITHOUT_CLASSIFICATION	0.0013488870626921668	DESIGN
// iinc 3, 1	WITHOUT_CLASSIFICATION	0.9999985187432853	WITHOUT_CLASSIFICATION	1.4812567146590395E-6	DESIGN
// aload 4 // load the raw bean	WITHOUT_CLASSIFICATION	0.9999971106944363	WITHOUT_CLASSIFICATION	2.8893055637362016E-6	DESIGN
// aload_2 // load the args	WITHOUT_CLASSIFICATION	0.999999889823672	WITHOUT_CLASSIFICATION	1.1017632800919825E-7	DESIGN
// iconst_i	WITHOUT_CLASSIFICATION	0.9999826618686555	WITHOUT_CLASSIFICATION	1.733813134443771E-5	DESIGN
// aaload	WITHOUT_CLASSIFICATION	0.9999954423475218	WITHOUT_CLASSIFICATION	4.557652478252245E-6	DESIGN
// checkcast	WITHOUT_CLASSIFICATION	0.9999979413816821	WITHOUT_CLASSIFICATION	2.058618318007067E-6	DESIGN
// checkcast (case of primitive type) // invokevirtual (case of primitive type)	WITHOUT_CLASSIFICATION	0.9999999922478511	WITHOUT_CLASSIFICATION	7.75214894272341E-9	DESIGN
// checkcast (case of reference type)	WITHOUT_CLASSIFICATION	0.9999993975148309	WITHOUT_CLASSIFICATION	6.024851691104902E-7	DESIGN
/* current stack len = 2 */	WITHOUT_CLASSIFICATION	0.9999997076609856	WITHOUT_CLASSIFICATION	2.923390144271015E-7	DESIGN
// end region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9785404183246623	WITHOUT_CLASSIFICATION	0.02145958167533762	DESIGN
// register in exception table	WITHOUT_CLASSIFICATION	0.9999766400275505	WITHOUT_CLASSIFICATION	2.335997244943374E-5	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.999999424363548	WITHOUT_CLASSIFICATION	5.75636451931972E-7	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.999999424363548	WITHOUT_CLASSIFICATION	5.75636451931972E-7	DESIGN
// return	WITHOUT_CLASSIFICATION	0.9999698553086941	WITHOUT_CLASSIFICATION	3.014469130591012E-5	DESIGN
// return	WITHOUT_CLASSIFICATION	0.9999698553086941	WITHOUT_CLASSIFICATION	3.014469130591012E-5	DESIGN
// dup	WITHOUT_CLASSIFICATION	0.9999781426467559	WITHOUT_CLASSIFICATION	2.1857353244075244E-5	DESIGN
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999997797869694	WITHOUT_CLASSIFICATION	2.2021303047532052E-7	DESIGN
// checkcast	WITHOUT_CLASSIFICATION	0.9999979413816821	WITHOUT_CLASSIFICATION	2.058618318007067E-6	DESIGN
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.9999999101175179	WITHOUT_CLASSIFICATION	8.988248211064875E-8	DESIGN
// astore 5 // store exception	WITHOUT_CLASSIFICATION	0.9999967074956283	WITHOUT_CLASSIFICATION	3.2925043716075277E-6	DESIGN
// new // BulkAccessorException	WITHOUT_CLASSIFICATION	0.9999307555215031	WITHOUT_CLASSIFICATION	6.924447849688059E-5	DESIGN
// aload 5 // load exception	WITHOUT_CLASSIFICATION	0.9999808638658987	WITHOUT_CLASSIFICATION	1.9136134101405396E-5	DESIGN
// iload_3 // i	WITHOUT_CLASSIFICATION	0.9999997539440818	WITHOUT_CLASSIFICATION	2.4605591818827736E-7	DESIGN
// invokespecial // BulkAccessorException.<init>	WITHOUT_CLASSIFICATION	0.9999999659241698	WITHOUT_CLASSIFICATION	3.407583013217403E-8	DESIGN
// athrow	WITHOUT_CLASSIFICATION	0.9999989580413066	WITHOUT_CLASSIFICATION	1.0419586933624976E-6	DESIGN
// WARNING: classfile only	WITHOUT_CLASSIFICATION	0.9999984045059181	WITHOUT_CLASSIFICATION	1.595494081874749E-6	DESIGN
//swallow	WITHOUT_CLASSIFICATION	0.9999980657080966	WITHOUT_CLASSIFICATION	1.9342919034578596E-6	DESIGN
/* local variable | this | */	WITHOUT_CLASSIFICATION	0.9999825326044388	WITHOUT_CLASSIFICATION	1.7467395561174104E-5	DESIGN
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.9999869207045176	WITHOUT_CLASSIFICATION	1.307929548253478E-5	DESIGN
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.9999869207045176	WITHOUT_CLASSIFICATION	1.307929548253478E-5	DESIGN
// getfield // get field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999996734089233	WITHOUT_CLASSIFICATION	3.2659107682569973E-7	DESIGN
// areturn // return the value of the field	WITHOUT_CLASSIFICATION	0.9999994057879229	WITHOUT_CLASSIFICATION	5.942120771641976E-7	DESIGN
/* local variables | this | callback | */	WITHOUT_CLASSIFICATION	0.9993730431215803	WITHOUT_CLASSIFICATION	6.269568784197248E-4	DESIGN
// aload_1 // load callback	WITHOUT_CLASSIFICATION	0.9999958472370636	WITHOUT_CLASSIFICATION	4.152762936453706E-6	DESIGN
// putfield // put field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999997963289131	WITHOUT_CLASSIFICATION	2.0367108699624105E-7	DESIGN
// case of non-static field	WITHOUT_CLASSIFICATION	0.9999994385929156	WITHOUT_CLASSIFICATION	5.614070842977454E-7	DESIGN
// getfield // get each field	WITHOUT_CLASSIFICATION	0.9999842821067602	WITHOUT_CLASSIFICATION	1.571789323980777E-5	DESIGN
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999999849340919	WITHOUT_CLASSIFICATION	1.5065908054849633E-8	DESIGN
// ifnonnull	WITHOUT_CLASSIFICATION	0.9999984960116436	WITHOUT_CLASSIFICATION	1.5039883564605888E-6	DESIGN
// *return // each type	WITHOUT_CLASSIFICATION	0.9999995628401632	WITHOUT_CLASSIFICATION	4.3715983675593383E-7	DESIGN
// *return // each type	WITHOUT_CLASSIFICATION	0.9999995628401632	WITHOUT_CLASSIFICATION	4.3715983675593383E-7	DESIGN
// *store_1 // each type	WITHOUT_CLASSIFICATION	0.9999999673518929	WITHOUT_CLASSIFICATION	3.264810712403642E-8	DESIGN
// ldc // name of the field	WITHOUT_CLASSIFICATION	0.9999627366078944	WITHOUT_CLASSIFICATION	3.726339210559666E-5	DESIGN
// *load_1 // each type	WITHOUT_CLASSIFICATION	0.9999999577302883	WITHOUT_CLASSIFICATION	4.2269711727516384E-8	DESIGN
// invokeinterface // invoke Callback.read*() // each type	WITHOUT_CLASSIFICATION	0.9999998240681172	WITHOUT_CLASSIFICATION	1.7593188282680473E-7	DESIGN
// int	WITHOUT_CLASSIFICATION	0.9999847085693159	WITHOUT_CLASSIFICATION	1.5291430684157015E-5	DESIGN
// return	WITHOUT_CLASSIFICATION	0.9999698553086941	WITHOUT_CLASSIFICATION	3.014469130591012E-5	DESIGN
// dup	WITHOUT_CLASSIFICATION	0.9999781426467559	WITHOUT_CLASSIFICATION	2.1857353244075244E-5	DESIGN
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999967895869161	WITHOUT_CLASSIFICATION	3.21041308401627E-6	DESIGN
// checkcast	WITHOUT_CLASSIFICATION	0.9999979413816821	WITHOUT_CLASSIFICATION	2.058618318007067E-6	DESIGN
// checkcast	WITHOUT_CLASSIFICATION	0.9999979413816821	WITHOUT_CLASSIFICATION	2.058618318007067E-6	DESIGN
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999999850441044	WITHOUT_CLASSIFICATION	1.4955895616918264E-8	DESIGN
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999999850441044	WITHOUT_CLASSIFICATION	1.4955895616918264E-8	DESIGN
// ifnonnull (label1)	WITHOUT_CLASSIFICATION	0.9999972879743281	WITHOUT_CLASSIFICATION	2.712025671871852E-6	DESIGN
// *load_1	WITHOUT_CLASSIFICATION	0.9999993654281633	WITHOUT_CLASSIFICATION	6.345718367380133E-7	DESIGN
// *load_1	WITHOUT_CLASSIFICATION	0.9999993654281633	WITHOUT_CLASSIFICATION	6.345718367380133E-7	DESIGN
// putfield	WITHOUT_CLASSIFICATION	0.9999877579803584	WITHOUT_CLASSIFICATION	1.224201964156864E-5	DESIGN
// return ;	WITHOUT_CLASSIFICATION	0.9999696589162548	WITHOUT_CLASSIFICATION	3.0341083745102158E-5	DESIGN
// ldc // field name	WITHOUT_CLASSIFICATION	0.9999991102236901	WITHOUT_CLASSIFICATION	8.897763099208117E-7	DESIGN
// getfield // old value of the field	WITHOUT_CLASSIFICATION	0.9999974201085445	WITHOUT_CLASSIFICATION	2.5798914553332466E-6	DESIGN
// invokeinterface // callback.write*(..)	WITHOUT_CLASSIFICATION	0.9999995087109748	WITHOUT_CLASSIFICATION	4.91289025298975E-7	DESIGN
// reference type	WITHOUT_CLASSIFICATION	0.9999764268311293	WITHOUT_CLASSIFICATION	2.3573168870777655E-5	DESIGN
// reference type	WITHOUT_CLASSIFICATION	0.9999764268311293	WITHOUT_CLASSIFICATION	2.3573168870777655E-5	DESIGN
// not array	WITHOUT_CLASSIFICATION	0.9998965050719469	WITHOUT_CLASSIFICATION	1.0349492805294461E-4	DESIGN
// array of reference type	WITHOUT_CLASSIFICATION	0.9999978814199442	WITHOUT_CLASSIFICATION	2.118580055922764E-6	DESIGN
// boolean	WITHOUT_CLASSIFICATION	0.9999996281860765	WITHOUT_CLASSIFICATION	3.71813923518455E-7	DESIGN
// byte	WITHOUT_CLASSIFICATION	0.9999865605022813	WITHOUT_CLASSIFICATION	1.3439497718771252E-5	DESIGN
// char	WITHOUT_CLASSIFICATION	0.9999999055239611	WITHOUT_CLASSIFICATION	9.447603892941641E-8	DESIGN
// short	WITHOUT_CLASSIFICATION	0.9999334621928828	WITHOUT_CLASSIFICATION	6.653780711722556E-5	DESIGN
// double	WITHOUT_CLASSIFICATION	0.9999981164904109	WITHOUT_CLASSIFICATION	1.883509588997263E-6	DESIGN
// float	WITHOUT_CLASSIFICATION	0.9999987375895864	WITHOUT_CLASSIFICATION	1.2624104136680694E-6	DESIGN
// float	WITHOUT_CLASSIFICATION	0.9999987375895864	WITHOUT_CLASSIFICATION	1.2624104136680694E-6	DESIGN
// long	WITHOUT_CLASSIFICATION	0.9999959867984242	WITHOUT_CLASSIFICATION	4.013201575824673E-6	DESIGN
// long	WITHOUT_CLASSIFICATION	0.9999959867984242	WITHOUT_CLASSIFICATION	4.013201575824673E-6	DESIGN
// bad type	WITHOUT_CLASSIFICATION	0.9999945731224572	WITHOUT_CLASSIFICATION	5.426877542705404E-6	DESIGN
// bad type	WITHOUT_CLASSIFICATION	0.9999945731224572	WITHOUT_CLASSIFICATION	5.426877542705404E-6	DESIGN
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999999948277702	WITHOUT_CLASSIFICATION	5.172229771181303E-9	DESIGN
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999999948277702	WITHOUT_CLASSIFICATION	5.172229771181303E-9	DESIGN
// reference type	WITHOUT_CLASSIFICATION	0.9999764268311293	WITHOUT_CLASSIFICATION	2.3573168870777655E-5	DESIGN
// double	WITHOUT_CLASSIFICATION	0.9999981164904109	WITHOUT_CLASSIFICATION	1.883509588997263E-6	DESIGN
// float	WITHOUT_CLASSIFICATION	0.9999987375895864	WITHOUT_CLASSIFICATION	1.2624104136680694E-6	DESIGN
// float	WITHOUT_CLASSIFICATION	0.9999987375895864	WITHOUT_CLASSIFICATION	1.2624104136680694E-6	DESIGN
// long	WITHOUT_CLASSIFICATION	0.9999959867984242	WITHOUT_CLASSIFICATION	4.013201575824673E-6	DESIGN
// bad type	WITHOUT_CLASSIFICATION	0.9999945731224572	WITHOUT_CLASSIFICATION	5.426877542705404E-6	DESIGN
// bad type	WITHOUT_CLASSIFICATION	0.9999945731224572	WITHOUT_CLASSIFICATION	5.426877542705404E-6	DESIGN
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999999948277702	WITHOUT_CLASSIFICATION	5.172229771181303E-9	DESIGN
// skip finalize methods	WITHOUT_CLASSIFICATION	0.9999479420902597	WITHOUT_CLASSIFICATION	5.2057909740146056E-5	DESIGN
//Mainly for OSCache	WITHOUT_CLASSIFICATION	0.9999424090155525	WITHOUT_CLASSIFICATION	5.7590984447525664E-5	DESIGN
//decrement the lock	WITHOUT_CLASSIFICATION	0.9998643628938287	WITHOUT_CLASSIFICATION	1.3563710617127533E-4	DESIGN
// create new lock that times out immediately	WITHOUT_CLASSIFICATION	0.9999996129421365	WITHOUT_CLASSIFICATION	3.8705786352721756E-7	DESIGN
//recache the updated state	WITHOUT_CLASSIFICATION	0.9997079935571349	WITHOUT_CLASSIFICATION	2.920064428651222E-4	DESIGN
// noop	WITHOUT_CLASSIFICATION	0.9999857516261104	WITHOUT_CLASSIFICATION	1.4248373889545372E-5	DESIGN
//null clientLock is remotely possible but will never happen in practice	WITHOUT_CLASSIFICATION	0.9934486828664595	WITHOUT_CLASSIFICATION	0.00655131713354044	DESIGN
// we really could refresh the item if it // is not a lock, but it might be slower //return freshTimestamp < txTimestamp	WITHOUT_CLASSIFICATION	0.6418003440371381	DESIGN	0.3581996559628619	WITHOUT_CLASSIFICATION
//by requiring <, we rely on lock timeout in the case of an unsuccessful update!	WITHOUT_CLASSIFICATION	0.9998315276923995	WITHOUT_CLASSIFICATION	1.6847230760045893E-4	DESIGN
// the user provided resulttransformer, not the one used with "select new". Here to avoid mangling // transformed/non-transformed results.	WITHOUT_CLASSIFICATION	0.9999999999332031	WITHOUT_CLASSIFICATION	6.679680250253247E-11	DESIGN
// disassemble positional parameters	WITHOUT_CLASSIFICATION	0.9999999890756217	WITHOUT_CLASSIFICATION	1.0924378286616973E-8	DESIGN
// disassemble named parameters	WITHOUT_CLASSIFICATION	0.9999998541300539	WITHOUT_CLASSIFICATION	1.4586994622843156E-7	DESIGN
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999938569010695	WITHOUT_CLASSIFICATION	6.143098930520934E-6	DESIGN
// noop	WITHOUT_CLASSIFICATION	0.9999857516261104	WITHOUT_CLASSIFICATION	1.4248373889545372E-5	DESIGN
//noop	WITHOUT_CLASSIFICATION	0.9999666301833641	WITHOUT_CLASSIFICATION	3.33698166358793E-5	DESIGN
//noop	WITHOUT_CLASSIFICATION	0.9999666301833641	WITHOUT_CLASSIFICATION	3.33698166358793E-5	DESIGN
// this is called from SettingsFactory irregardless; trivial to simply disregard	WITHOUT_CLASSIFICATION	0.9999918468172302	WITHOUT_CLASSIFICATION	8.153182769842122E-6	DESIGN
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999131604516576	WITHOUT_CLASSIFICATION	8.68395483423919E-5	DESIGN
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999131604516576	WITHOUT_CLASSIFICATION	8.68395483423919E-5	DESIGN
//throw new UnsupportedOperationException("Can't write to a readonly object");	WITHOUT_CLASSIFICATION	0.999998846919298	WITHOUT_CLASSIFICATION	1.1530807020704821E-6	DESIGN
//assembled state gets put in a new array (we read from cache by value!)	WITHOUT_CLASSIFICATION	0.9998425138918723	WITHOUT_CLASSIFICATION	1.5748610812774797E-4	DESIGN
//persister.setIdentifier(result, id); //before calling interceptor, for consistency with normal load	WITHOUT_CLASSIFICATION	0.9999999878377902	WITHOUT_CLASSIFICATION	1.2162209787613936E-8	DESIGN
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9999167980658024	WITHOUT_CLASSIFICATION	8.320193419754267E-5	DESIGN
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9999167980658024	WITHOUT_CLASSIFICATION	8.320193419754267E-5	DESIGN
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.999999960245752	WITHOUT_CLASSIFICATION	3.975424802677116E-8	DESIGN
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999990026801782	WITHOUT_CLASSIFICATION	9.973198218057697E-7	DESIGN
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999990026801782	WITHOUT_CLASSIFICATION	9.973198218057697E-7	DESIGN
// classes mentioned in extends not available - so put it in queue	WITHOUT_CLASSIFICATION	0.9999941374277412	WITHOUT_CLASSIFICATION	5.862572258820192E-6	DESIGN
// get meta's from <hibernate-mapping>	WITHOUT_CLASSIFICATION	0.9999996537815222	WITHOUT_CLASSIFICATION	3.462184778520897E-7	DESIGN
// get meta's from <class>	WITHOUT_CLASSIFICATION	0.999998269016445	WITHOUT_CLASSIFICATION	1.7309835551291412E-6	DESIGN
// DB-OBJECTNAME	WITHOUT_CLASSIFICATION	0.9999980348387729	WITHOUT_CLASSIFICATION	1.9651612269690197E-6	DESIGN
// MUTABLE	WITHOUT_CLASSIFICATION	0.999996269006282	WITHOUT_CLASSIFICATION	3.730993717906338E-6	DESIGN
// WHERE	WITHOUT_CLASSIFICATION	0.999992093304135	WITHOUT_CLASSIFICATION	7.906695865029925E-6	DESIGN
// CHECK	WITHOUT_CLASSIFICATION	0.9999842153034089	WITHOUT_CLASSIFICATION	1.5784696591206253E-5	DESIGN
// POLYMORPHISM	WITHOUT_CLASSIFICATION	0.9999948343753777	WITHOUT_CLASSIFICATION	5.165624622248273E-6	DESIGN
// TODO:	WITHOUT_CLASSIFICATION	0.9933250070903931	WITHOUT_CLASSIFICATION	0.0066749929096069196	DESIGN
// ID	WITHOUT_CLASSIFICATION	0.9999971289687936	WITHOUT_CLASSIFICATION	2.871031206401227E-6	DESIGN
// VERSION / TIMESTAMP	WITHOUT_CLASSIFICATION	0.999999765807125	WITHOUT_CLASSIFICATION	2.3419287496137337E-7	DESIGN
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999950921041799	WITHOUT_CLASSIFICATION	4.907895820048863E-6	DESIGN
// Primary key constraint	WITHOUT_CLASSIFICATION	0.9999997516676998	WITHOUT_CLASSIFICATION	2.483323001119604E-7	DESIGN
// this is either a <version/> tag with no type attribute, // or a <timestamp/> tag	WITHOUT_CLASSIFICATION	0.9999998757744554	WITHOUT_CLASSIFICATION	1.2422554457321396E-7	DESIGN
// for version properties marked as being generated, make sure they are "always" // generated; aka, "insert" is invalid; this is dis-allowed by the DTD, // but just to make sure...	WITHOUT_CLASSIFICATION	0.9999999959465743	WITHOUT_CLASSIFICATION	4.053425651647815E-9	DESIGN
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999950921041799	WITHOUT_CLASSIFICATION	4.907895820048863E-6	DESIGN
// ( (Column) discrim.getColumnIterator().next() ).setType(type);	WITHOUT_CLASSIFICATION	0.9999954633634666	WITHOUT_CLASSIFICATION	4.536636533334935E-6	DESIGN
// go ahead and set the lazy here, since pojo.proxy can override it.	WITHOUT_CLASSIFICATION	0.9999997432110656	WITHOUT_CLASSIFICATION	2.567889344373363E-7	DESIGN
// DYNAMIC UPDATE	WITHOUT_CLASSIFICATION	0.9999960137524037	WITHOUT_CLASSIFICATION	3.986247596307301E-6	DESIGN
// IMPORT	WITHOUT_CLASSIFICATION	0.9999960689019923	WITHOUT_CLASSIFICATION	3.931098007649755E-6	DESIGN
// BATCH SIZE	WITHOUT_CLASSIFICATION	0.9999886820386971	WITHOUT_CLASSIFICATION	1.131796130286516E-5	DESIGN
// SELECT BEFORE UPDATE	WITHOUT_CLASSIFICATION	0.9999983221634962	WITHOUT_CLASSIFICATION	1.677836503818673E-6	DESIGN
// OPTIMISTIC LOCK MODE	WITHOUT_CLASSIFICATION	0.999999529882813	WITHOUT_CLASSIFICATION	4.70117186939963E-7	DESIGN
// PERSISTER	WITHOUT_CLASSIFICATION	0.9999957522086435	WITHOUT_CLASSIFICATION	4.247791356608835E-6	DESIGN
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999786020614524	WITHOUT_CLASSIFICATION	2.139793854769721E-5	DESIGN
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999944428682477	WITHOUT_CLASSIFICATION	5.557131752317885E-6	DESIGN
// properties	WITHOUT_CLASSIFICATION	0.9999988510947208	WITHOUT_CLASSIFICATION	1.1489052793279772E-6	DESIGN
// joined subclasses	WITHOUT_CLASSIFICATION	0.9999986909256475	WITHOUT_CLASSIFICATION	1.3090743524813536E-6	DESIGN
// KEY	WITHOUT_CLASSIFICATION	0.9999904310308224	WITHOUT_CLASSIFICATION	9.568969177541546E-6	DESIGN
// CHECK	WITHOUT_CLASSIFICATION	0.9999842153034089	WITHOUT_CLASSIFICATION	1.5784696591206253E-5	DESIGN
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999786020614524	WITHOUT_CLASSIFICATION	2.139793854769721E-5	DESIGN
// properties	WITHOUT_CLASSIFICATION	0.9999988510947208	WITHOUT_CLASSIFICATION	1.1489052793279772E-6	DESIGN
// KEY	WITHOUT_CLASSIFICATION	0.9999904310308224	WITHOUT_CLASSIFICATION	9.568969177541546E-6	DESIGN
// model.getKey().setType( new Type( model.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999999913660728	WITHOUT_CLASSIFICATION	8.63392727701878E-9	DESIGN
// TABLENAME	WITHOUT_CLASSIFICATION	0.999997319861553	WITHOUT_CLASSIFICATION	2.6801384470092206E-6	DESIGN
// join.getKey().setType( new Type( lazz.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999999980044184	WITHOUT_CLASSIFICATION	1.995581612994128E-9	DESIGN
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999892312933035	WITHOUT_CLASSIFICATION	1.0768706696421083E-5	DESIGN
// COLUMN(S)	WITHOUT_CLASSIFICATION	0.9999993076242315	WITHOUT_CLASSIFICATION	6.923757685752197E-7	DESIGN
// column index	WITHOUT_CLASSIFICATION	0.9999998640727668	WITHOUT_CLASSIFICATION	1.3592723329626186E-7	DESIGN
//column unique-key	WITHOUT_CLASSIFICATION	0.9999864826529601	WITHOUT_CLASSIFICATION	1.3517347039798799E-5	DESIGN
// automatically makes a column with the default name if none is specifed by XML	WITHOUT_CLASSIFICATION	0.9993849687795373	WITHOUT_CLASSIFICATION	6.150312204627602E-4	DESIGN
// for an any	WITHOUT_CLASSIFICATION	0.9999992732861204	WITHOUT_CLASSIFICATION	7.267138795936164E-7	DESIGN
// insertable simply because that is the user did not specify // anything; just override it	WITHOUT_CLASSIFICATION	0.999999999929265	WITHOUT_CLASSIFICATION	7.073496575992726E-11	DESIGN
// the user specifically supplied insert="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999972692581997	WITHOUT_CLASSIFICATION	2.7307418004920584E-6	DESIGN
// properties generated on update can never be updateable...	WITHOUT_CLASSIFICATION	0.999955336426703	WITHOUT_CLASSIFICATION	4.466357329698737E-5	DESIGN
// updateable only because the user did not specify  // anything; just override it	WITHOUT_CLASSIFICATION	0.9999999999381148	WITHOUT_CLASSIFICATION	6.188515073812009E-11	DESIGN
// the user specifically supplied update="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.999999258229217	WITHOUT_CLASSIFICATION	7.417707830319252E-7	DESIGN
// ROLENAME	WITHOUT_CLASSIFICATION	0.9999959258210361	WITHOUT_CLASSIFICATION	4.074178963896453E-6	DESIGN
// FETCH STRATEGY	WITHOUT_CLASSIFICATION	0.9999906327728003	WITHOUT_CLASSIFICATION	9.367227199598336E-6	DESIGN
// TABLE	WITHOUT_CLASSIFICATION	0.9999982670963696	WITHOUT_CLASSIFICATION	1.7329036303507705E-6	DESIGN
//tableName = mappings.getNamingStrategy().propertyToTableName( className, path );	WITHOUT_CLASSIFICATION	0.9999999315582627	WITHOUT_CLASSIFICATION	6.844173728635133E-8	DESIGN
// SORT	WITHOUT_CLASSIFICATION	0.9999922699826826	WITHOUT_CLASSIFICATION	7.730017317246399E-6	DESIGN
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999786020614524	WITHOUT_CLASSIFICATION	2.139793854769721E-5	DESIGN
// unsorted, natural, comparator.class.name	WITHOUT_CLASSIFICATION	0.9999992495267334	WITHOUT_CLASSIFICATION	7.504732667077283E-7	DESIGN
// ORPHAN DELETE (used for programmer error detection)	WITHOUT_CLASSIFICATION	0.9999995164161216	WITHOUT_CLASSIFICATION	4.8358387841646E-7	DESIGN
// set up second pass	WITHOUT_CLASSIFICATION	0.9999984358846082	WITHOUT_CLASSIFICATION	1.56411539174472E-6	DESIGN
// an "embedded" component (composite ids and unique) // note that this does not handle nested components	WITHOUT_CLASSIFICATION	0.9998439378000832	WITHOUT_CLASSIFICATION	1.5606219991676603E-4	DESIGN
// a nested composite element	WITHOUT_CLASSIFICATION	0.9999988561919866	WITHOUT_CLASSIFICATION	1.1438080135108535E-6	DESIGN
// for an any // we will have to use reflection	WITHOUT_CLASSIFICATION	0.9999852069631322	WITHOUT_CLASSIFICATION	1.4793036867721865E-5	DESIGN
//NOTE SPECIAL CASE: // one-to-one constrained=false cannot be proxied, // so default to join and non-lazy	WITHOUT_CLASSIFICATION	0.9999999991271664	WITHOUT_CLASSIFICATION	8.728334924841568E-10	DESIGN
// use old (HB 2.1) defaults if outer-join is specified	WITHOUT_CLASSIFICATION	0.9999999599943904	WITHOUT_CLASSIFICATION	4.000560964460334E-8	DESIGN
//lazy = !join;	WITHOUT_CLASSIFICATION	0.999988016693142	WITHOUT_CLASSIFICATION	1.1983306858086332E-5	DESIGN
// GENERATOR	WITHOUT_CLASSIFICATION	0.9999942441277387	WITHOUT_CLASSIFICATION	5.755872261206626E-6	DESIGN
// ID UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999989570272125	WITHOUT_CLASSIFICATION	1.0429727874878773E-6	DESIGN
// VERSION UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999998475466323	WITHOUT_CLASSIFICATION	1.5245336777003946E-7	DESIGN
// not necessarily a *unique* property reference	WITHOUT_CLASSIFICATION	0.9996857333677925	WITHOUT_CLASSIFICATION	3.142666322075078E-4	DESIGN
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.999995841707283	WITHOUT_CLASSIFICATION	4.158292717106868E-6	DESIGN
// contained elements:	WITHOUT_CLASSIFICATION	0.9999972625092889	WITHOUT_CLASSIFICATION	2.7374907111218117E-6	DESIGN
// for non-inverse one-to-many, with a not-null fk, add a backref!	WITHOUT_CLASSIFICATION	0.9999918056579787	WITHOUT_CLASSIFICATION	8.19434202121564E-6	DESIGN
// Bind the where	WITHOUT_CLASSIFICATION	0.9999158516148063	WITHOUT_CLASSIFICATION	8.414838519366561E-5	DESIGN
// Bind the order-by	WITHOUT_CLASSIFICATION	0.9999955826619285	WITHOUT_CLASSIFICATION	4.417338071580979E-6	DESIGN
// Bind the filters	WITHOUT_CLASSIFICATION	0.9999947133840796	WITHOUT_CLASSIFICATION	5.286615920359567E-6	DESIGN
// overriding inherited meta attribute. HBX-621 & HBX-793	WITHOUT_CLASSIFICATION	0.9999483931162335	WITHOUT_CLASSIFICATION	5.1606883766480584E-5	DESIGN
// first, iterate over all elements capable of defining an extends attribute // collecting all found extends references if they cannot be resolved // against the already processed mappings.	WITHOUT_CLASSIFICATION	0.999999999988934	WITHOUT_CLASSIFICATION	1.1065992814897037E-11	DESIGN
// mappings might contain either the "raw" extends name (in the case of // an entity-name mapping) or a FQN (in the case of a POJO mapping).	WITHOUT_CLASSIFICATION	0.9999999416687015	WITHOUT_CLASSIFICATION	5.833129859096291E-8	DESIGN
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.847231635736226	WITHOUT_CLASSIFICATION	0.1527683642637741	DESIGN
//SessionFactory name:	WITHOUT_CLASSIFICATION	0.9993413893027354	WITHOUT_CLASSIFICATION	6.586106972645531E-4	DESIGN
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9999513335916377	WITHOUT_CLASSIFICATION	4.866640836231807E-5	DESIGN
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9999513335916377	WITHOUT_CLASSIFICATION	4.866640836231807E-5	DESIGN
//Interrogate JDBC metadata	WITHOUT_CLASSIFICATION	0.9999917398100217	WITHOUT_CLASSIFICATION	8.260189978373848E-6	DESIGN
// user supplied JDBC connections	WITHOUT_CLASSIFICATION	0.9999914770447678	WITHOUT_CLASSIFICATION	8.522955232268589E-6	DESIGN
//use dialect default properties	WITHOUT_CLASSIFICATION	0.999996522688711	WITHOUT_CLASSIFICATION	3.4773112891532697E-6	DESIGN
// Transaction settings:	WITHOUT_CLASSIFICATION	0.9999229165550327	WITHOUT_CLASSIFICATION	7.708344496728513E-5	DESIGN
//SQL Generation settings:	WITHOUT_CLASSIFICATION	0.9996173058346597	WITHOUT_CLASSIFICATION	3.826941653402793E-4	DESIGN
//Query parser settings:	WITHOUT_CLASSIFICATION	0.9982989042614923	WITHOUT_CLASSIFICATION	0.001701095738507767	DESIGN
// Second-level / query cache:	WITHOUT_CLASSIFICATION	0.9998470516501892	WITHOUT_CLASSIFICATION	1.5294834981081036E-4	DESIGN
// The cache provider is needed when we either have second-level cache enabled // or query cache enabled.  Note that useSecondLevelCache is enabled by default	WITHOUT_CLASSIFICATION	0.9999334210486652	WITHOUT_CLASSIFICATION	6.657895133479009E-5	DESIGN
//SQL Exception converter:	WITHOUT_CLASSIFICATION	0.9999302221042211	WITHOUT_CLASSIFICATION	6.977789577893159E-5	DESIGN
//Statistics and logging:	WITHOUT_CLASSIFICATION	0.9999775284737789	WITHOUT_CLASSIFICATION	2.247152622112224E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9966662531954268	WITHOUT_CLASSIFICATION	0.003333746804573307	DESIGN
//	WITHOUT_CLASSIFICATION	0.9966662531954268	WITHOUT_CLASSIFICATION	0.003333746804573307	DESIGN
//Schema export:	WITHOUT_CLASSIFICATION	0.99996288217788	WITHOUT_CLASSIFICATION	3.711782211999314E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9966662531954268	WITHOUT_CLASSIFICATION	0.003333746804573307	DESIGN
// legacy behavior, apply the bridge...	WITHOUT_CLASSIFICATION	0.9999138923934707	WITHOUT_CLASSIFICATION	8.610760652918496E-5	DESIGN
// maybe a concrete SQLpropertyresult type, but Map is exactly what is required at the moment	WITHOUT_CLASSIFICATION	0.9852967096696943	WITHOUT_CLASSIFICATION	0.014703290330305714	DESIGN
//if dotted and not load-collection nor return-join //regular property	WITHOUT_CLASSIFICATION	0.9999999938409009	WITHOUT_CLASSIFICATION	6.159099072087892E-9	DESIGN
//	WITHOUT_CLASSIFICATION	0.9966662531954268	WITHOUT_CLASSIFICATION	0.003333746804573307	DESIGN
// public getters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999917201019066	WITHOUT_CLASSIFICATION	8.279898093405352E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9966662531954268	WITHOUT_CLASSIFICATION	0.003333746804573307	DESIGN
// package protected setters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998662286516637	WITHOUT_CLASSIFICATION	1.3377134833621646E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9966662531954268	WITHOUT_CLASSIFICATION	0.003333746804573307	DESIGN
//	WITHOUT_CLASSIFICATION	0.9966662531954268	WITHOUT_CLASSIFICATION	0.003333746804573307	DESIGN
// using local since the inheritedMetas at this point is not the correct map since it is always the empty map	WITHOUT_CLASSIFICATION	0.9999990248786552	WITHOUT_CLASSIFICATION	9.75121344781395E-7	DESIGN
//	WITHOUT_CLASSIFICATION	0.9966662531954268	WITHOUT_CLASSIFICATION	0.003333746804573307	DESIGN
//	WITHOUT_CLASSIFICATION	0.9966662531954268	WITHOUT_CLASSIFICATION	0.003333746804573307	DESIGN
//	WITHOUT_CLASSIFICATION	0.9966662531954268	WITHOUT_CLASSIFICATION	0.003333746804573307	DESIGN
//	WITHOUT_CLASSIFICATION	0.9966662531954268	WITHOUT_CLASSIFICATION	0.003333746804573307	DESIGN
// if doc is null, then for whatever reason, the cached file cannot be used...	WITHOUT_CLASSIFICATION	0.9999725236297414	WITHOUT_CLASSIFICATION	2.7476370258560227E-5	DESIGN
// drop them in reverse order in case db needs it done that way...	WITHOUT_CLASSIFICATION	0.9785018824677996	WITHOUT_CLASSIFICATION	0.021498117532200458	DESIGN
//	WITHOUT_CLASSIFICATION	0.9966662531954268	WITHOUT_CLASSIFICATION	0.003333746804573307	DESIGN
// This method may be called many times!!	WITHOUT_CLASSIFICATION	0.998363436398065	WITHOUT_CLASSIFICATION	0.0016365636019349953	DESIGN
//	WITHOUT_CLASSIFICATION	0.9966662531954268	WITHOUT_CLASSIFICATION	0.003333746804573307	DESIGN
//	WITHOUT_CLASSIFICATION	0.9966662531954268	WITHOUT_CLASSIFICATION	0.003333746804573307	DESIGN
// found	WITHOUT_CLASSIFICATION	0.9999640408521144	WITHOUT_CLASSIFICATION	3.5959147885511805E-5	DESIGN
// found	WITHOUT_CLASSIFICATION	0.9999640408521144	WITHOUT_CLASSIFICATION	3.5959147885511805E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9966662531954268	WITHOUT_CLASSIFICATION	0.003333746804573307	DESIGN
//	WITHOUT_CLASSIFICATION	0.9966662531954268	WITHOUT_CLASSIFICATION	0.003333746804573307	DESIGN
//<String, String>	WITHOUT_CLASSIFICATION	0.9999510280157298	WITHOUT_CLASSIFICATION	4.897198427016441E-5	DESIGN
//<String, String>	WITHOUT_CLASSIFICATION	0.9999510280157298	WITHOUT_CLASSIFICATION	4.897198427016441E-5	DESIGN
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.847231635736226	WITHOUT_CLASSIFICATION	0.1527683642637741	DESIGN
//Set USE_REFLECTION_OPTIMIZER to false to fix HHH-227	WITHOUT_CLASSIFICATION	0.9999997798627749	WITHOUT_CLASSIFICATION	2.2013722522312418E-7	DESIGN
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9995678347051591	WITHOUT_CLASSIFICATION	4.3216529484084524E-4	DESIGN
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9999999389617498	WITHOUT_CLASSIFICATION	6.103825024647625E-8	DESIGN
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999778855744089	WITHOUT_CLASSIFICATION	2.2114425591113192E-5	DESIGN
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9995678347051591	WITHOUT_CLASSIFICATION	4.3216529484084524E-4	DESIGN
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9999999389617498	WITHOUT_CLASSIFICATION	6.103825024647625E-8	DESIGN
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999990583385345	WITHOUT_CLASSIFICATION	9.416614654464835E-7	DESIGN
//maintain correct duplication if loaded in a cartesian product	WITHOUT_CLASSIFICATION	0.9999995725733198	WITHOUT_CLASSIFICATION	4.274266802377465E-7	DESIGN
// the element has been removed from the set	WITHOUT_CLASSIFICATION	0.9999752420648123	WITHOUT_CLASSIFICATION	2.4757935187784404E-5	DESIGN
// the element has changed	WITHOUT_CLASSIFICATION	0.9999850817993053	WITHOUT_CLASSIFICATION	1.4918200694545511E-5	DESIGN
//Careful: these methods do not initialize the collection.	WITHOUT_CLASSIFICATION	0.9993540816278312	WITHOUT_CLASSIFICATION	6.459183721687726E-4	DESIGN
//needed so that we remove this collection from the second-level cache	WITHOUT_CLASSIFICATION	0.9700551702216148	WITHOUT_CLASSIFICATION	0.029944829778385293	DESIGN
// override on some subclasses	WITHOUT_CLASSIFICATION	0.9999992544045999	WITHOUT_CLASSIFICATION	7.455954000384496E-7	DESIGN
//override on some subclasses	WITHOUT_CLASSIFICATION	0.9999911637650735	WITHOUT_CLASSIFICATION	8.836234926548953E-6	DESIGN
//do this bit after setting initialized to true or it will recurse	WITHOUT_CLASSIFICATION	0.9995574990807489	WITHOUT_CLASSIFICATION	4.425009192511447E-4	DESIGN
// short-circuit(s) // no new elements, the old list contains only Orphans // no old elements, so no Orphans neither	WITHOUT_CLASSIFICATION	0.9999999999157776	WITHOUT_CLASSIFICATION	8.422241766225262E-11	DESIGN
// create the collection holding the Orphans	WITHOUT_CLASSIFICATION	0.9999999255973614	WITHOUT_CLASSIFICATION	7.440263861620799E-8	DESIGN
// collect EntityIdentifier(s) of the *current* elements - add them into a HashSet for fast access	WITHOUT_CLASSIFICATION	0.9999921276816988	WITHOUT_CLASSIFICATION	7.872318301195424E-6	DESIGN
// iterate over the *old* list	WITHOUT_CLASSIFICATION	0.9999998524983055	WITHOUT_CLASSIFICATION	1.4750169455602085E-7	DESIGN
/*(array==null) ? tempList.size() :*/	WITHOUT_CLASSIFICATION	0.9999973199245118	WITHOUT_CLASSIFICATION	2.6800754882968927E-6	DESIGN
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999778855744089	WITHOUT_CLASSIFICATION	2.2114425591113192E-5	DESIGN
/*(array==null) ? tempList.get(i) :*/	WITHOUT_CLASSIFICATION	0.9999925298658476	WITHOUT_CLASSIFICATION	7.470134152316388E-6	DESIGN
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9999639295784423	WITHOUT_CLASSIFICATION	3.607042155767403E-5	DESIGN
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9999639295784423	WITHOUT_CLASSIFICATION	3.607042155767403E-5	DESIGN
// amazingly, these two will work because AbstractCollection // uses iterator() to fill the array	WITHOUT_CLASSIFICATION	0.9994113434406338	WITHOUT_CLASSIFICATION	5.886565593661533E-4	DESIGN
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999990583385345	WITHOUT_CLASSIFICATION	9.416614654464835E-7	DESIGN
// finally, what it's all about...	WITHOUT_CLASSIFICATION	0.9994720089523477	WITHOUT_CLASSIFICATION	5.279910476523866E-4	DESIGN
// note that if we load this collection from a cartesian product // the multiplicity would be broken ... so use an idbag instead	WITHOUT_CLASSIFICATION	0.9978833769169766	DESIGN	0.0021166230830233453	WITHOUT_CLASSIFICATION
// Anyway, here we implement <set> semantics for a // <one-to-many> <bag>!	WITHOUT_CLASSIFICATION	0.8671995816350829	WITHOUT_CLASSIFICATION	0.13280041836491707	DESIGN
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999998864742271	WITHOUT_CLASSIFICATION	1.1352577284284874E-7	DESIGN
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9976231663538795	WITHOUT_CLASSIFICATION	0.002376833646120552	DESIGN
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999990583385345	WITHOUT_CLASSIFICATION	9.416614654464835E-7	DESIGN
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999998864742271	WITHOUT_CLASSIFICATION	1.1352577284284874E-7	DESIGN
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9976231663538795	WITHOUT_CLASSIFICATION	0.002376833646120552	DESIGN
/*public boolean equals(Object other) {	WITHOUT_CLASSIFICATION	0.9741242670549898	WITHOUT_CLASSIFICATION	0.025875732945010204	DESIGN
// List OPERATIONS:	WITHOUT_CLASSIFICATION	0.9999999491796443	WITHOUT_CLASSIFICATION	5.0820355664990054E-8	DESIGN
//pad with nulls from the current last element up to the new index	WITHOUT_CLASSIFICATION	0.9999999869906431	WITHOUT_CLASSIFICATION	1.3009356966360224E-8	DESIGN
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999990583385345	WITHOUT_CLASSIFICATION	9.416614654464835E-7	DESIGN
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999990583385345	WITHOUT_CLASSIFICATION	9.416614654464835E-7	DESIGN
// from Map	WITHOUT_CLASSIFICATION	0.9999967187479974	WITHOUT_CLASSIFICATION	3.281252002538727E-6	DESIGN
// from SortedMap	WITHOUT_CLASSIFICATION	0.9999950011355552	WITHOUT_CLASSIFICATION	4.998864444771297E-6	DESIGN
//inject the data	WITHOUT_CLASSIFICATION	0.9999131437835843	WITHOUT_CLASSIFICATION	8.685621641577E-5	DESIGN
// cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999750106171709	WITHOUT_CLASSIFICATION	2.498938282912755E-5	DESIGN
//default pool size 20	WITHOUT_CLASSIFICATION	0.9999996107965378	WITHOUT_CLASSIFICATION	3.8920346216862205E-7	DESIGN
// trying via forName() first to be as close to DriverManager's semantics	WITHOUT_CLASSIFICATION	0.9999999998772919	WITHOUT_CLASSIFICATION	1.2270805631842214E-10	DESIGN
// if debug level is enabled, then log the password, otherwise mask it	WITHOUT_CLASSIFICATION	0.9999999868470224	WITHOUT_CLASSIFICATION	1.3152977489569269E-8	DESIGN
// register a cleanup synch	WITHOUT_CLASSIFICATION	0.9992259535187229	WITHOUT_CLASSIFICATION	7.740464812771103E-4	DESIGN
// wrap the session in the transaction-protection proxy	WITHOUT_CLASSIFICATION	0.9999969710860852	WITHOUT_CLASSIFICATION	3.0289139147740375E-6	DESIGN
// then bind it	WITHOUT_CLASSIFICATION	0.9998753355198652	WITHOUT_CLASSIFICATION	1.2466448013476858E-4	DESIGN
// try to make sure we don't wrap and already wrapped session	WITHOUT_CLASSIFICATION	0.9999951064626498	WITHOUT_CLASSIFICATION	4.893537350295473E-6	DESIGN
// allow these to go through the the real session no matter what	WITHOUT_CLASSIFICATION	0.9999974193546697	WITHOUT_CLASSIFICATION	2.580645330215922E-6	DESIGN
// limit the methods available if no transaction is active	WITHOUT_CLASSIFICATION	0.9999943638681956	WITHOUT_CLASSIFICATION	5.636131804402237E-6	DESIGN
// allow these (deprecated) methods to pass through	WITHOUT_CLASSIFICATION	0.9989388613103909	WITHOUT_CLASSIFICATION	0.0010611386896091132	DESIGN
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999336806485	WITHOUT_CLASSIFICATION	6.63193514295537E-8	DESIGN
// We could register the session against the transaction even though it is // not started, but we'd have no guarentee of ever getting the map // entries cleaned up (aside from spawning threads).	WITHOUT_CLASSIFICATION	0.9999976676631765	WITHOUT_CLASSIFICATION	2.332336823347861E-6	DESIGN
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9987278776301186	WITHOUT_CLASSIFICATION	0.0012721223698813344	DESIGN
//private String propertyName;	WITHOUT_CLASSIFICATION	0.9986215075577208	WITHOUT_CLASSIFICATION	0.0013784924422792617	DESIGN
/*public PropertyProjection project() {	WITHOUT_CLASSIFICATION	0.9739241139875775	WITHOUT_CLASSIFICATION	0.0260758860124225	DESIGN
//String[] fk = StringHelper.qualify( "collection_", cp.getKeyColumnNames() );	WITHOUT_CLASSIFICATION	0.9999999577850694	WITHOUT_CLASSIFICATION	4.2214930587654586E-8	DESIGN
//" collection_ where " +	WITHOUT_CLASSIFICATION	0.9999838376113328	WITHOUT_CLASSIFICATION	1.616238866725498E-5	DESIGN
//unsupported	WITHOUT_CLASSIFICATION	0.9997819417301139	WITHOUT_CLASSIFICATION	2.1805826988601195E-4	DESIGN
//unsupported	WITHOUT_CLASSIFICATION	0.9997819417301139	WITHOUT_CLASSIFICATION	2.1805826988601195E-4	DESIGN
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9987278776301186	WITHOUT_CLASSIFICATION	0.0012721223698813344	DESIGN
//the following two lines were added to ensure that this.params is not null, which //can happen with two-deep nested subqueries	WITHOUT_CLASSIFICATION	0.9999975783390335	WITHOUT_CLASSIFICATION	2.4216609665193008E-6	DESIGN
//with two-deep subqueries, the same alias would get generated for //both using the old method (criteriaQuery.generateSQLAlias()), so //that is now used as a fallback if the main criteria alias isn't set	WITHOUT_CLASSIFICATION	0.9785527182753584	WITHOUT_CLASSIFICATION	0.02144728172464156	DESIGN
//implicit polymorphism not supported (would need a union)	WITHOUT_CLASSIFICATION	0.7670731027742909	WITHOUT_CLASSIFICATION	0.2329268972257091	DESIGN
//pull off the last ", "	WITHOUT_CLASSIFICATION	0.9999998608562627	WITHOUT_CLASSIFICATION	1.3914373726573953E-7	DESIGN
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999720271702015	WITHOUT_CLASSIFICATION	2.7972829798459186E-5	DESIGN
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces	WITHOUT_CLASSIFICATION	0.999999736434229	WITHOUT_CLASSIFICATION	2.6356577099627394E-7	DESIGN
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource)	WITHOUT_CLASSIFICATION	0.9992966962314674	WITHOUT_CLASSIFICATION	7.033037685325868E-4	DESIGN
// NOT_SUPPORTED_SHOULD_USE_JDBC3_PreparedStatement.getGeneratedKeys_method	WITHOUT_CLASSIFICATION	0.9999885942136333	WITHOUT_CLASSIFICATION	1.1405786366728849E-5	DESIGN
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999999998092629	WITHOUT_CLASSIFICATION	1.9073713782215011E-10	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999981301203386	WITHOUT_CLASSIFICATION	1.8698796613662815E-6	DESIGN
// Oracle did add support for ANSI CASE statements in 9i	WITHOUT_CLASSIFICATION	0.9999985691179651	WITHOUT_CLASSIFICATION	1.430882034756658E-6	DESIGN
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999996428056573	WITHOUT_CLASSIFICATION	3.571943427129444E-7	DESIGN
// Informix doesn't have a bit type	WITHOUT_CLASSIFICATION	0.9999828245995895	WITHOUT_CLASSIFICATION	1.7175400410519788E-5	DESIGN
// or BYTE // or TEXT? // or MONEY	WITHOUT_CLASSIFICATION	0.9999951803441455	WITHOUT_CLASSIFICATION	4.819655854507891E-6	DESIGN
// strip table-owner because Informix always returns constraint names as "<table-owner>.<constraint-name>"	WITHOUT_CLASSIFICATION	0.9999999955444665	WITHOUT_CLASSIFICATION	4.4555334678946005E-9	DESIGN
// build the map of standard ANSI SQL aggregation functions ~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999989588809	WITHOUT_CLASSIFICATION	1.0411191192445792E-9	DESIGN
//pre H3.2 behavior: super.getReturnType(ct, m);	WITHOUT_CLASSIFICATION	0.999618753400616	WITHOUT_CLASSIFICATION	3.812465993839866E-4	DESIGN
// finally use the sqltype if == on Hibernate types did not find a match.	WITHOUT_CLASSIFICATION	0.9999953890249113	WITHOUT_CLASSIFICATION	4.610975088793528E-6	DESIGN
//because numeric can be anything	WITHOUT_CLASSIFICATION	0.9999908271172284	WITHOUT_CLASSIFICATION	9.172882771659938E-6	DESIGN
// constructors and factory methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999904865317118	WITHOUT_CLASSIFICATION	9.513468288196043E-5	DESIGN
// standard sql92 functions (can be overridden by subclasses)	WITHOUT_CLASSIFICATION	0.9999912813981086	WITHOUT_CLASSIFICATION	8.718601891454436E-6	DESIGN
//map second/minute/hour/day/month/year to ANSI extract(), override on subclasses	WITHOUT_CLASSIFICATION	0.9999853365195808	WITHOUT_CLASSIFICATION	1.4663480419269047E-5	DESIGN
// register hibernate types for default use in scalar sqlquery type auto detection	WITHOUT_CLASSIFICATION	0.9974813735074729	WITHOUT_CLASSIFICATION	0.0025186264925271392	DESIGN
// database type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999989564277509	WITHOUT_CLASSIFICATION	1.0435722491063984E-6	DESIGN
// hibernate type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999763606552279	WITHOUT_CLASSIFICATION	2.3639344772113716E-5	DESIGN
// keyword support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999988054628561	WITHOUT_CLASSIFICATION	1.1945371439093474E-6	DESIGN
// native identifier generatiion ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999444423910475	WITHOUT_CLASSIFICATION	5.555760895244781E-5	DESIGN
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999972079907158	WITHOUT_CLASSIFICATION	2.7920092840770604E-6	DESIGN
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999723803424094	WITHOUT_CLASSIFICATION	2.7619657590694033E-5	DESIGN
// GUID support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999670657567835	WITHOUT_CLASSIFICATION	3.293424321645657E-5	DESIGN
// limit/offset support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992407708027	WITHOUT_CLASSIFICATION	7.592291971981259E-7	DESIGN
// by default we report no support	WITHOUT_CLASSIFICATION	0.9997951724453825	WITHOUT_CLASSIFICATION	2.048275546174811E-4	DESIGN
// by default we report no support for NOWAIT lock semantics	WITHOUT_CLASSIFICATION	0.9930683033364197	WITHOUT_CLASSIFICATION	0.006931696663580356	DESIGN
// table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995915115645	WITHOUT_CLASSIFICATION	4.084884356154175E-7	DESIGN
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999800458901207	WITHOUT_CLASSIFICATION	1.9954109879252926E-5	DESIGN
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999462526099668	WITHOUT_CLASSIFICATION	5.3747390033131205E-5	DESIGN
// current timestamp support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999007770505	WITHOUT_CLASSIFICATION	9.922294941376693E-8	DESIGN
// SQLException support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999129588951546	WITHOUT_CLASSIFICATION	8.704110484539395E-5	DESIGN
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999944101107336	WITHOUT_CLASSIFICATION	5.589889266383992E-6	DESIGN
// identifier quoting support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999939310742012	WITHOUT_CLASSIFICATION	6.0689257988884895E-6	DESIGN
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999898783910848	WITHOUT_CLASSIFICATION	1.012160891510639E-5	DESIGN
// grrr... for differentiation of mysql storage engines	WITHOUT_CLASSIFICATION	0.9999996479897776	WITHOUT_CLASSIFICATION	3.5201022238136255E-7	DESIGN
// Informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995637786399	WITHOUT_CLASSIFICATION	4.362213601120094E-7	DESIGN
// return false here, as most databases do not properly support this construct...	WITHOUT_CLASSIFICATION	0.6127723115667199	DESIGN	0.3872276884332803	WITHOUT_CLASSIFICATION
// Mckoi has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999221215452457	WITHOUT_CLASSIFICATION	7.787845475420662E-5	DESIGN
// Oracle8 and previous define only a "DATE" type which //      is used to represent all aspects of date/time	WITHOUT_CLASSIFICATION	0.9999999963261175	WITHOUT_CLASSIFICATION	3.67388248853616E-9	DESIGN
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9997900359993677	WITHOUT_CLASSIFICATION	2.0996400063244045E-4	DESIGN
//" cascade";	WITHOUT_CLASSIFICATION	0.9999643509854104	WITHOUT_CLASSIFICATION	3.564901458962143E-5	DESIGN
//trim off the length/precision/scale	WITHOUT_CLASSIFICATION	0.9999995901331186	WITHOUT_CLASSIFICATION	4.0986688136806654E-7	DESIGN
/*public boolean dropTemporaryTableAfterUse() {	WITHOUT_CLASSIFICATION	0.8537972403544521	DESIGN	0.14620275964554785	WITHOUT_CLASSIFICATION
// CHECK VIOLATION	WITHOUT_CLASSIFICATION	0.9999996252545846	WITHOUT_CLASSIFICATION	3.7474541529430216E-7	DESIGN
// UNIQUE VIOLATION	WITHOUT_CLASSIFICATION	0.9999994247445843	WITHOUT_CLASSIFICATION	5.752554157756103E-7	DESIGN
// FOREIGN KEY VIOLATION	WITHOUT_CLASSIFICATION	0.9999991137995308	WITHOUT_CLASSIFICATION	8.862004692186059E-7	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999981301203386	WITHOUT_CLASSIFICATION	1.8698796613662815E-6	DESIGN
// NOT NULL VIOLATION	WITHOUT_CLASSIFICATION	0.9998616347375245	WITHOUT_CLASSIFICATION	1.3836526247538203E-4	DESIGN
// ALL OTHER	WITHOUT_CLASSIFICATION	0.9999961193782602	WITHOUT_CLASSIFICATION	3.880621739822294E-6	DESIGN
// Register the type of the out param - PostgreSQL uses Types.OTHER	WITHOUT_CLASSIFICATION	0.9999698116555841	WITHOUT_CLASSIFICATION	3.018834441593015E-5	DESIGN
// seems to not really... //	WITHOUT_CLASSIFICATION	0.9998725672545803	WITHOUT_CLASSIFICATION	1.2743274541971727E-4	DESIGN
// seems to have spotty LOB suppport	WITHOUT_CLASSIFICATION	0.9998265110635562	WITHOUT_CLASSIFICATION	1.7348893644373865E-4	DESIGN
// HHH-2300	WITHOUT_CLASSIFICATION	0.9999782424554565	WITHOUT_CLASSIFICATION	2.1757544543439822E-5	DESIGN
// ignore (probably H2 not in the classpath)	WITHOUT_CLASSIFICATION	0.9998469911726299	WITHOUT_CLASSIFICATION	1.5300882737013524E-4	DESIGN
// Numeric Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997426460632	WITHOUT_CLASSIFICATION	2.5735393686463974E-7	DESIGN
// String Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994039292626	WITHOUT_CLASSIFICATION	5.960707373594226E-7	DESIGN
// Time and Date Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999989446747234	WITHOUT_CLASSIFICATION	1.0553252766362199E-6	DESIGN
// System Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999964478227062	WITHOUT_CLASSIFICATION	3.552177293896702E-6	DESIGN
// not null is implicit	WITHOUT_CLASSIFICATION	0.9949143303858976	WITHOUT_CLASSIFICATION	0.005085669614102298	DESIGN
// 23000: Check constraint violation: {0} // 23001: Unique index or primary key violation: {0}	WITHOUT_CLASSIFICATION	0.9999999999703506	WITHOUT_CLASSIFICATION	2.9649429245806563E-11	DESIGN
// Display the dialect version.	WITHOUT_CLASSIFICATION	0.9999954958369812	WITHOUT_CLASSIFICATION	4.50416301875889E-6	DESIGN
// The RDMS concat() function only supports 2 parameters	WITHOUT_CLASSIFICATION	0.9999781631815292	WITHOUT_CLASSIFICATION	2.1836818470834733E-5	DESIGN
// Dialect method overrides ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996247148037	WITHOUT_CLASSIFICATION	3.7528519623792987E-7	DESIGN
// Original Dialect.java returns " for update";	WITHOUT_CLASSIFICATION	0.9999986706593873	WITHOUT_CLASSIFICATION	1.3293406126668331E-6	DESIGN
// Verify the state of this new method in Hibernate 3.0 Dialect.java	WITHOUT_CLASSIFICATION	0.971476835468387	WITHOUT_CLASSIFICATION	0.02852316453161291	DESIGN
// Origial Dialect.java returns true;	WITHOUT_CLASSIFICATION	0.9999978850710015	WITHOUT_CLASSIFICATION	2.114928998612567E-6	DESIGN
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.999999466473716	WITHOUT_CLASSIFICATION	5.33526283918554E-7	DESIGN
// *** Sequence methods - start. The RDMS dialect needs these	WITHOUT_CLASSIFICATION	0.9998645347724575	WITHOUT_CLASSIFICATION	1.3546522754242572E-4	DESIGN
// methods to make it possible to use the Native Id generator	WITHOUT_CLASSIFICATION	0.9994715687419004	WITHOUT_CLASSIFICATION	5.284312580995397E-4	DESIGN
// The where clause was added to eliminate this statement from Brute Force Searches.	WITHOUT_CLASSIFICATION	0.9998634339270152	WITHOUT_CLASSIFICATION	1.3656607298473874E-4	DESIGN
// *** Sequence methods - end	WITHOUT_CLASSIFICATION	0.9938621017371098	WITHOUT_CLASSIFICATION	0.006137898262890138	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999981301203386	WITHOUT_CLASSIFICATION	1.8698796613662815E-6	DESIGN
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9997900359993677	WITHOUT_CLASSIFICATION	2.0996400063244045E-4	DESIGN
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.9966767564797142	WITHOUT_CLASSIFICATION	0.0033232435202856844	DESIGN
// Used with DROP TABLE to delete all records in the table.	WITHOUT_CLASSIFICATION	0.9999998073607571	WITHOUT_CLASSIFICATION	1.92639242903604E-7	DESIGN
// RDMS supports the UNION ALL clause.	WITHOUT_CLASSIFICATION	0.999999780125825	WITHOUT_CLASSIFICATION	2.1987417512116833E-7	DESIGN
// RDMS has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9992073517648083	WITHOUT_CLASSIFICATION	7.926482351917452E-4	DESIGN
// Multi-param dialect functions...	WITHOUT_CLASSIFICATION	0.9999992403395129	WITHOUT_CLASSIFICATION	7.596604871674614E-7	DESIGN
// function templates	WITHOUT_CLASSIFICATION	0.9999992234875483	WITHOUT_CLASSIFICATION	7.765124516337373E-7	DESIGN
//not null is implicit	WITHOUT_CLASSIFICATION	0.9946735742413599	WITHOUT_CLASSIFICATION	0.005326425758640084	DESIGN
// this assumes schema support, which is present in 1.8.0 and later...	WITHOUT_CLASSIFICATION	0.9992068692955416	WITHOUT_CLASSIFICATION	7.931307044584142E-4	DESIGN
// HSQLDB only supports READ_UNCOMMITTED transaction isolation	WITHOUT_CLASSIFICATION	0.9999965993712667	WITHOUT_CLASSIFICATION	3.400628733325401E-6	DESIGN
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999992353901013	WITHOUT_CLASSIFICATION	7.646098986912936E-7	DESIGN
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9999979681259912	WITHOUT_CLASSIFICATION	2.0318740088405228E-6	DESIGN
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999984769071013	WITHOUT_CLASSIFICATION	1.5230928987050327E-6	DESIGN
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999829283320585	WITHOUT_CLASSIFICATION	1.7071667941540643E-5	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999981301203386	WITHOUT_CLASSIFICATION	1.8698796613662815E-6	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999981301203386	WITHOUT_CLASSIFICATION	1.8698796613662815E-6	DESIGN
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9672181860244553	WITHOUT_CLASSIFICATION	0.03278181397554468	DESIGN
//	WITHOUT_CLASSIFICATION	0.9966662531954268	WITHOUT_CLASSIFICATION	0.003333746804573307	DESIGN
// TimesTen has no BLOB/CLOB support, but these types may be suitable  // for some applications. The length is limited to 4 million bytes.	WITHOUT_CLASSIFICATION	0.9999921915351553	WITHOUT_CLASSIFICATION	7.808464844643814E-6	DESIGN
// new methods in dialect3	WITHOUT_CLASSIFICATION	0.9998937134057411	WITHOUT_CLASSIFICATION	1.0628659425885955E-4	DESIGN
/*public boolean supportsForUpdateNowait() {	WITHOUT_CLASSIFICATION	0.999913127228745	WITHOUT_CLASSIFICATION	8.687277125504046E-5	DESIGN
// TimesTen has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999917801818465	WITHOUT_CLASSIFICATION	8.219818153490835E-6	DESIGN
// iterate entries ordered by capacity to find first fit	WITHOUT_CLASSIFICATION	0.9999999491734626	WITHOUT_CLASSIFICATION	5.082653737142238E-8	DESIGN
// add new ordered map	WITHOUT_CLASSIFICATION	0.9999999510319377	WITHOUT_CLASSIFICATION	4.896806225006543E-8	DESIGN
//	WITHOUT_CLASSIFICATION	0.9966662531954268	WITHOUT_CLASSIFICATION	0.003333746804573307	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999981301203386	WITHOUT_CLASSIFICATION	1.8698796613662815E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.9966662531954268	WITHOUT_CLASSIFICATION	0.003333746804573307	DESIGN
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999933610301016	WITHOUT_CLASSIFICATION	6.638969898354816E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.9966662531954268	WITHOUT_CLASSIFICATION	0.003333746804573307	DESIGN
//registerColumnType data types	WITHOUT_CLASSIFICATION	0.9999580934738433	WITHOUT_CLASSIFICATION	4.190652615664223E-5	DESIGN
// hibernate seems to ignore this type...	WITHOUT_CLASSIFICATION	0.9999722954055955	WITHOUT_CLASSIFICATION	2.7704594404473946E-5	DESIGN
// IBID for current_time and current_date	WITHOUT_CLASSIFICATION	0.9999998071443468	WITHOUT_CLASSIFICATION	1.9285565332674288E-7	DESIGN
// Tell hibernate to use getBytes instead of getBinaryStream	WITHOUT_CLASSIFICATION	0.999453319002136	WITHOUT_CLASSIFICATION	5.466809978640884E-4	DESIGN
// No batch statements	WITHOUT_CLASSIFICATION	0.99999994311197	WITHOUT_CLASSIFICATION	5.688803002057714E-8	DESIGN
/*	WITHOUT_CLASSIFICATION	0.9420771668041136	WITHOUT_CLASSIFICATION	0.05792283319588644	DESIGN
//no pointbase BIT	WITHOUT_CLASSIFICATION	0.9999994121674763	WITHOUT_CLASSIFICATION	5.87832523619069E-7	DESIGN
//no pointbase TINYINT	WITHOUT_CLASSIFICATION	0.9999998114568932	WITHOUT_CLASSIFICATION	1.885431067809648E-7	DESIGN
// Pointbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999876004156196	WITHOUT_CLASSIFICATION	1.2399584380309811E-5	DESIGN
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9997900359993677	WITHOUT_CLASSIFICATION	2.0996400063244045E-4	DESIGN
// The current_timestamp is more accurate, but only known to be supported // in SQL Server 7.0 and later (i.e., Sybase not known to support it at all)	WITHOUT_CLASSIFICATION	0.989458489113841	WITHOUT_CLASSIFICATION	0.010541510886158895	DESIGN
// SQL Server (at least up through 2005) does not support defining // cascade delete constraints which can circel back to the mutating // table	WITHOUT_CLASSIFICATION	0.9999906876808146	WITHOUT_CLASSIFICATION	9.312319185455969E-6	DESIGN
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9979203186115705	WITHOUT_CLASSIFICATION	0.002079681388429558	DESIGN
//	WITHOUT_CLASSIFICATION	0.9966662531954268	WITHOUT_CLASSIFICATION	0.003333746804573307	DESIGN
//	WITHOUT_CLASSIFICATION	0.9966662531954268	WITHOUT_CLASSIFICATION	0.003333746804573307	DESIGN
//	WITHOUT_CLASSIFICATION	0.9966662531954268	WITHOUT_CLASSIFICATION	0.003333746804573307	DESIGN
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9997900359993677	WITHOUT_CLASSIFICATION	2.0996400063244045E-4	DESIGN
/* package-private */	WITHOUT_CLASSIFICATION	0.9999948173329352	WITHOUT_CLASSIFICATION	5.182667064831764E-6	DESIGN
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999933610301016	WITHOUT_CLASSIFICATION	6.638969898354816E-6	DESIGN
//Sybase BIT type does not support null values	WITHOUT_CLASSIFICATION	0.9957064219273075	WITHOUT_CLASSIFICATION	0.004293578072692441	DESIGN
//	WITHOUT_CLASSIFICATION	0.9966662531954268	WITHOUT_CLASSIFICATION	0.003333746804573307	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999981301203386	WITHOUT_CLASSIFICATION	1.8698796613662815E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.9966662531954268	WITHOUT_CLASSIFICATION	0.003333746804573307	DESIGN
//not null ... (start with 1) is implicit	WITHOUT_CLASSIFICATION	0.9854347665654776	WITHOUT_CLASSIFICATION	0.014565233434522398	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999981301203386	WITHOUT_CLASSIFICATION	1.8698796613662815E-6	DESIGN
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.9075408114380008	WITHOUT_CLASSIFICATION	0.09245918856199921	DESIGN
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999992353901013	WITHOUT_CLASSIFICATION	7.646098986912936E-7	DESIGN
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9999979681259912	WITHOUT_CLASSIFICATION	2.0318740088405228E-6	DESIGN
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999984769071013	WITHOUT_CLASSIFICATION	1.5230928987050327E-6	DESIGN
// add another (inner) nested select // add the main query // close off the inner nested select	WITHOUT_CLASSIFICATION	0.9999999998431574	WITHOUT_CLASSIFICATION	1.5684271583599665E-10	DESIGN
// add the main query	WITHOUT_CLASSIFICATION	0.9999899314296693	WITHOUT_CLASSIFICATION	1.0068570330736535E-5	DESIGN
//add the restriction to the outer select	WITHOUT_CLASSIFICATION	0.9999996660694573	WITHOUT_CLASSIFICATION	3.3393054273062074E-7	DESIGN
// This assumes you will want to ignore any update counts 	WITHOUT_CLASSIFICATION	0.9999997758887876	WITHOUT_CLASSIFICATION	2.2411121228366995E-7	DESIGN
// You may still have other ResultSets or update counts left to process here  // but you can't do it now or the ResultSet you just got will be closed 	WITHOUT_CLASSIFICATION	0.9999999872242117	WITHOUT_CLASSIFICATION	1.2775788286530434E-8	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999981301203386	WITHOUT_CLASSIFICATION	1.8698796613662815E-6	DESIGN
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9997900359993677	WITHOUT_CLASSIFICATION	2.0996400063244045E-4	DESIGN
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999829283320585	WITHOUT_CLASSIFICATION	1.7071667941540643E-5	DESIGN
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9672181860244553	WITHOUT_CLASSIFICATION	0.03278181397554468	DESIGN
//	WITHOUT_CLASSIFICATION	0.9966662531954268	WITHOUT_CLASSIFICATION	0.003333746804573307	DESIGN
// features which change between 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999274784298864	WITHOUT_CLASSIFICATION	7.252157011363528E-5	DESIGN
// features which remain constant across 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998553054809	WITHOUT_CLASSIFICATION	1.4469451917675075E-7	DESIGN
// binary %Stream // character %Stream	WITHOUT_CLASSIFICATION	0.9999998685977679	WITHOUT_CLASSIFICATION	1.314022320946241E-7	DESIGN
//getDefaultProperties().setProperty(Environment.STATEMENT_BATCH_SIZE, NO_BATCH);	WITHOUT_CLASSIFICATION	0.999999994572978	WITHOUT_CLASSIFICATION	5.4270220141508525E-9	DESIGN
// hibernate impelemnts cast in Dialect.java	WITHOUT_CLASSIFICATION	0.9991264691983914	WITHOUT_CLASSIFICATION	8.735308016085624E-4	DESIGN
// aggregate functions shouldn't be registered, right? //registerFunction( "list", new StandardSQLFunction("list",Hibernate.STRING) ); // stopped on $list	WITHOUT_CLASSIFICATION	0.9999576292407161	WITHOUT_CLASSIFICATION	4.2370759283980195E-5	DESIGN
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999898783910848	WITHOUT_CLASSIFICATION	1.012160891510639E-5	DESIGN
// below is for Cache' that don't have str in 2007.1 there is str and we register str directly	WITHOUT_CLASSIFICATION	0.9993161808917234	WITHOUT_CLASSIFICATION	6.838191082765105E-4	DESIGN
// note that %string is deprecated	WITHOUT_CLASSIFICATION	0.9934000468560811	WITHOUT_CLASSIFICATION	0.006599953143919006	DESIGN
// %upper is deprecated	WITHOUT_CLASSIFICATION	0.9953625958474415	WITHOUT_CLASSIFICATION	0.004637404152558561	DESIGN
// The syntax used to add a foreign key constraint to a table.	WITHOUT_CLASSIFICATION	0.9999992080263773	WITHOUT_CLASSIFICATION	7.919736227582541E-7	DESIGN
// identifier-commalist	WITHOUT_CLASSIFICATION	0.99999995674216	WITHOUT_CLASSIFICATION	4.325783997333017E-8	DESIGN
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999972079907158	WITHOUT_CLASSIFICATION	2.7920092840770604E-6	DESIGN
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999723803424094	WITHOUT_CLASSIFICATION	2.7619657590694033E-5	DESIGN
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999800458901207	WITHOUT_CLASSIFICATION	1.9954109879252926E-5	DESIGN
// identifier-commalist	WITHOUT_CLASSIFICATION	0.99999995674216	WITHOUT_CLASSIFICATION	4.325783997333017E-8	DESIGN
// The syntax used to add a column to a table	WITHOUT_CLASSIFICATION	0.9997755250494634	WITHOUT_CLASSIFICATION	2.2447495053650143E-4	DESIGN
// Completely optional cascading drop clause.	WITHOUT_CLASSIFICATION	0.9999998413262058	WITHOUT_CLASSIFICATION	1.586737941602263E-7	DESIGN
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999921697505728	WITHOUT_CLASSIFICATION	7.830249427211163E-6	DESIGN
// LIMIT support (ala TOP) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999981984177201	WITHOUT_CLASSIFICATION	1.8015822799856937E-6	DESIGN
// InterSystems Cache' does not current support "SELECT ... FOR UPDATE" syntax... // Set your transaction mode to READ_COMMITTED before using	WITHOUT_CLASSIFICATION	0.9999931953602423	WITHOUT_CLASSIFICATION	6.804639757652806E-6	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999981301203386	WITHOUT_CLASSIFICATION	1.8698796613662815E-6	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999981301203386	WITHOUT_CLASSIFICATION	1.8698796613662815E-6	DESIGN
/*<String>*/	WITHOUT_CLASSIFICATION	0.999779542880264	WITHOUT_CLASSIFICATION	2.204571197359548E-4	DESIGN
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999462526099668	WITHOUT_CLASSIFICATION	5.3747390033131205E-5	DESIGN
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999944101107336	WITHOUT_CLASSIFICATION	5.589889266383992E-6	DESIGN
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.999999466473716	WITHOUT_CLASSIFICATION	5.33526283918554E-7	DESIGN
// Does the LIMIT clause come at the start of the SELECT statement, rather than at the end?	WITHOUT_CLASSIFICATION	0.9914315271249416	WITHOUT_CLASSIFICATION	0.00856847287505832	DESIGN
// Does the LIMIT clause take a "maximum" row number instead of a total number of returned rows?	WITHOUT_CLASSIFICATION	0.9997795875235583	WITHOUT_CLASSIFICATION	2.204124764416928E-4	DESIGN
// The name of the SQL function that transforms a string to lowercase	WITHOUT_CLASSIFICATION	0.9999999672667232	WITHOUT_CLASSIFICATION	3.273327668256744E-8	DESIGN
// Create an OuterJoinGenerator for this dialect.	WITHOUT_CLASSIFICATION	0.9999943925766402	WITHOUT_CLASSIFICATION	5.607423359712958E-6	DESIGN
// The keyword used to insert a row without specifying // any column values	WITHOUT_CLASSIFICATION	0.9999999578711809	WITHOUT_CLASSIFICATION	4.212881910706063E-8	DESIGN
//registerFunction( "trim", new StandardSQLFunction( "trim", Hibernate.STRING ) );	WITHOUT_CLASSIFICATION	0.9999999977788827	WITHOUT_CLASSIFICATION	2.2211173510583042E-9	DESIGN
//skip the FROM keyword in params	WITHOUT_CLASSIFICATION	0.999984989313547	WITHOUT_CLASSIFICATION	1.5010686453076861E-5	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.9998094328207842	WITHOUT_CLASSIFICATION	1.9056717921580864E-4	DESIGN
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999999998092629	WITHOUT_CLASSIFICATION	1.9073713782215011E-10	DESIGN
// SQLFunction implementation	WITHOUT_CLASSIFICATION	0.9999978235610465	WITHOUT_CLASSIFICATION	2.1764389536000765E-6	DESIGN
// conceivable that the dialect ctor could throw HibernateExceptions, so don't re-wrap	WITHOUT_CLASSIFICATION	0.999992913815414	WITHOUT_CLASSIFICATION	7.086184586082572E-6	DESIGN
// register the standard dialect resolver	WITHOUT_CLASSIFICATION	0.999999620010402	WITHOUT_CLASSIFICATION	3.7998959800902294E-7	DESIGN
// register resolvers set via Environment property	WITHOUT_CLASSIFICATION	0.9999996726686856	WITHOUT_CLASSIFICATION	3.2733131449423473E-7	DESIGN
// kept for backward compatibility until after the 3.1beta5 release of HA	WITHOUT_CLASSIFICATION	0.9999999360742038	WITHOUT_CLASSIFICATION	6.392579624304139E-8	DESIGN
//cache the hashcode	WITHOUT_CLASSIFICATION	0.9995552535117826	WITHOUT_CLASSIFICATION	4.4474648821739066E-4	DESIGN
// the CascadingAction contract ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999819473149554	WITHOUT_CLASSIFICATION	1.8052685044666446E-5	DESIGN
// the CascadingAction implementations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999721734315268	WITHOUT_CLASSIFICATION	2.7826568473233545E-5	DESIGN
// delete does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999997522724262	WITHOUT_CLASSIFICATION	2.477275737538654E-7	DESIGN
// orphans should be deleted during delete	WITHOUT_CLASSIFICATION	0.9999851910806276	WITHOUT_CLASSIFICATION	1.4808919372484802E-5	DESIGN
/*(LockMode) anything*/	WITHOUT_CLASSIFICATION	0.9999657264847567	WITHOUT_CLASSIFICATION	3.427351524327105E-5	DESIGN
// lock doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999993584514109	WITHOUT_CLASSIFICATION	6.415485890926242E-7	DESIGN
// refresh doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999998488173838	WITHOUT_CLASSIFICATION	1.5118261631748046E-7	DESIGN
// evicts don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.999999819271351	WITHOUT_CLASSIFICATION	1.8072864905803714E-7	DESIGN
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999999159694061	WITHOUT_CLASSIFICATION	8.403059392212091E-8	DESIGN
// orphans should be deleted during save/update	WITHOUT_CLASSIFICATION	0.999998448469968	WITHOUT_CLASSIFICATION	1.5515300319849567E-6	DESIGN
// for deprecated saveOrUpdateCopy()	WITHOUT_CLASSIFICATION	0.9999954850127156	WITHOUT_CLASSIFICATION	4.514987284347489E-6	DESIGN
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.999999155889224	WITHOUT_CLASSIFICATION	8.441107760907967E-7	DESIGN
//a proxy cannot be transient and it breaks ForeignKeys.isTransient	WITHOUT_CLASSIFICATION	0.9998860690405844	WITHOUT_CLASSIFICATION	1.1393095941569671E-4	DESIGN
// replicate does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999991654589256	WITHOUT_CLASSIFICATION	8.345410742824151E-7	DESIGN
// static helper methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999975286457233	WITHOUT_CLASSIFICATION	2.4713542766692504E-6	DESIGN
// handles arrays and newly instantiated collections	WITHOUT_CLASSIFICATION	0.9983827303561715	WITHOUT_CLASSIFICATION	0.0016172696438284371	DESIGN
// Actually the semantics of the next three are really "Bag" // Note that, unlike objects, collection insertions, updates, // deletions are not really remembered between flushes. We // just re-use the same Lists for convenience.	WITHOUT_CLASSIFICATION	0.9999999822214172	WITHOUT_CLASSIFICATION	1.7778582851868307E-8	DESIGN
// Add these directly to the executions queue	WITHOUT_CLASSIFICATION	0.9999997226390573	WITHOUT_CLASSIFICATION	2.7736094268031925E-7	DESIGN
// continue loop	WITHOUT_CLASSIFICATION	0.9999974141157202	WITHOUT_CLASSIFICATION	2.5858842798509656E-6	DESIGN
//sort the updates by fk	WITHOUT_CLASSIFICATION	0.9996189526338946	WITHOUT_CLASSIFICATION	3.810473661054136E-4	DESIGN
//sort the updates by pk	WITHOUT_CLASSIFICATION	0.9991774060031777	WITHOUT_CLASSIFICATION	8.22593996822147E-4	DESIGN
// the mapping of entity names to their latest batch numbers.	WITHOUT_CLASSIFICATION	0.9999999955715022	WITHOUT_CLASSIFICATION	4.4284977968687515E-9	DESIGN
// the map of batch numbers to EntityInsertAction lists	WITHOUT_CLASSIFICATION	0.9999999865379249	WITHOUT_CLASSIFICATION	1.3462074991800062E-8	DESIGN
//optimize the hash size to eliminate a rehash.	WITHOUT_CLASSIFICATION	0.9999622745817657	WITHOUT_CLASSIFICATION	3.7725418234221095E-5	DESIGN
// the list of entity names that indicate the batch number	WITHOUT_CLASSIFICATION	0.9999984841751568	WITHOUT_CLASSIFICATION	1.5158248432412923E-6	DESIGN
// remove the current element from insertions. It will be added back later.	WITHOUT_CLASSIFICATION	0.9955619029368281	WITHOUT_CLASSIFICATION	0.004438097063171862	DESIGN
// the entity associated with the current action.	WITHOUT_CLASSIFICATION	0.9972198788773066	WITHOUT_CLASSIFICATION	0.002780121122693368	DESIGN
// There is already an existing batch for this type of entity. // Check to see if the latest batch is acceptable.	WITHOUT_CLASSIFICATION	0.9999999910365007	WITHOUT_CLASSIFICATION	8.96349918811151E-9	DESIGN
// now rebuild the insertions list. There is a batch for each entry in the name list.	WITHOUT_CLASSIFICATION	0.9999992022568396	WITHOUT_CLASSIFICATION	7.977431603512075E-7	DESIGN
// the current batch number is the latest batch for this entity type.	WITHOUT_CLASSIFICATION	0.9999996875444117	WITHOUT_CLASSIFICATION	3.1245558826463534E-7	DESIGN
// loop through all the associations of the current entity and make sure that they are processed // before the current batch number	WITHOUT_CLASSIFICATION	0.9999999345034853	WITHOUT_CLASSIFICATION	6.549651467767887E-8	DESIGN
// find the batch number associated with the current association, if any.	WITHOUT_CLASSIFICATION	0.9999245415671926	WITHOUT_CLASSIFICATION	7.54584328074442E-5	DESIGN
// create a new batch for this type. The batch number is the number of current batches.	WITHOUT_CLASSIFICATION	0.9999999320095553	WITHOUT_CLASSIFICATION	6.799044469388534E-8	DESIGN
// loop through all the associated entities and make sure they have been // processed before the latest // batch associated with this entity type.	WITHOUT_CLASSIFICATION	0.9999999909295321	WITHOUT_CLASSIFICATION	9.07046794128124E-9	DESIGN
// since this entity will now be processed in the latest possible batch, // we can be assured that it will come after all other associations, // there's not need to continue checking.	WITHOUT_CLASSIFICATION	0.9922889409795743	WITHOUT_CLASSIFICATION	0.007711059020425682	DESIGN
//cascade to current collection elements	WITHOUT_CLASSIFICATION	0.9999966665537594	WITHOUT_CLASSIFICATION	3.333446240659209E-6	DESIGN
//not really necessary, but good for consistency...	WITHOUT_CLASSIFICATION	0.9735228410589346	WITHOUT_CLASSIFICATION	0.026477158941065334	DESIGN
// we can't cascade to non-embedded elements	WITHOUT_CLASSIFICATION	0.9999998852714814	WITHOUT_CLASSIFICATION	1.1472851864263692E-7	DESIGN
//a newly instantiated collection can't have orphans	WITHOUT_CLASSIFICATION	0.9994444013031544	WITHOUT_CLASSIFICATION	5.555986968454966E-4	DESIGN
// handle orphaned entities!!	WITHOUT_CLASSIFICATION	0.9966094733521969	WITHOUT_CLASSIFICATION	0.0033905266478031154	DESIGN
// Loaded entity instances, by EntityUniqueKey	WITHOUT_CLASSIFICATION	0.9999974158840047	WITHOUT_CLASSIFICATION	2.584115995306754E-6	DESIGN
// Identity map of EntityEntry instances, by the entity instance	WITHOUT_CLASSIFICATION	0.9999999647564681	WITHOUT_CLASSIFICATION	3.524353191153871E-8	DESIGN
// Entity proxies, by EntityKey	WITHOUT_CLASSIFICATION	0.9999993700410597	WITHOUT_CLASSIFICATION	6.299589402718882E-7	DESIGN
// Snapshots of current database state for entities // that have *not* been loaded	WITHOUT_CLASSIFICATION	0.999979917499661	WITHOUT_CLASSIFICATION	2.0082500339030124E-5	DESIGN
// Identity map of array holder ArrayHolder instances, by the array instance	WITHOUT_CLASSIFICATION	0.999999086291005	WITHOUT_CLASSIFICATION	9.137089950001118E-7	DESIGN
// Collection wrappers, by the CollectionKey //key=CollectionKey, value=PersistentCollection	WITHOUT_CLASSIFICATION	0.9999998374190076	WITHOUT_CLASSIFICATION	1.6258099246467956E-7	DESIGN
// Set of EntityKeys of deleted objects	WITHOUT_CLASSIFICATION	0.999998589774195	WITHOUT_CLASSIFICATION	1.410225804928286E-6	DESIGN
// properties that we have tried to load, and not found in the database	WITHOUT_CLASSIFICATION	0.9999998869202623	WITHOUT_CLASSIFICATION	1.1307973777614372E-7	DESIGN
// A list of collection wrappers that were instantiating during result set // processing, that we will need to initialize at the end of the query	WITHOUT_CLASSIFICATION	0.9999999981549841	WITHOUT_CLASSIFICATION	1.8450158197527496E-9	DESIGN
// A container for collections we load up when the owning entity is not // yet loaded ... for now, this is purely transient!	WITHOUT_CLASSIFICATION	0.9964214658727623	WITHOUT_CLASSIFICATION	0.003578534127237838	DESIGN
// Downgrade locks	WITHOUT_CLASSIFICATION	0.9999535335525774	WITHOUT_CLASSIFICATION	4.6466447422594856E-5	DESIGN
// any earlier proxy takes precedence	WITHOUT_CLASSIFICATION	0.999999901260167	WITHOUT_CLASSIFICATION	9.8739833049942E-8	DESIGN
//unwrap the object	WITHOUT_CLASSIFICATION	0.9999795052248234	WITHOUT_CLASSIFICATION	2.049477517664257E-5	DESIGN
//initialize + unwrap the object	WITHOUT_CLASSIFICATION	0.9999990624530387	WITHOUT_CLASSIFICATION	9.375469612978761E-7	DESIGN
//return the proxied object	WITHOUT_CLASSIFICATION	0.9995587007060838	WITHOUT_CLASSIFICATION	4.4129929391625617E-4	DESIGN
//overwrite old proxy	WITHOUT_CLASSIFICATION	0.9999973143973485	WITHOUT_CLASSIFICATION	2.685602651398273E-6	DESIGN
// early exit...	WITHOUT_CLASSIFICATION	0.999935866802185	WITHOUT_CLASSIFICATION	6.413319781490137E-5	DESIGN
// or should it actually throw an exception?	WITHOUT_CLASSIFICATION	0.9867657227534801	WITHOUT_CLASSIFICATION	0.013234277246520045	DESIGN
//treat it just like a new collection	WITHOUT_CLASSIFICATION	0.999989469081219	WITHOUT_CLASSIFICATION	1.0530918781010497E-5	DESIGN
//do this work only at the very highest level of the load //don't let this method be called recursively	WITHOUT_CLASSIFICATION	0.7429308910265261	WITHOUT_CLASSIFICATION	0.25706910897347385	DESIGN
//note that each iteration of the loop may add new elements	WITHOUT_CLASSIFICATION	0.9999999839262944	WITHOUT_CLASSIFICATION	1.6073705618330916E-8	DESIGN
//it might be an unwrapped collection reference! //try to find a wrapper (slowish)	WITHOUT_CLASSIFICATION	0.8200254712647658	WITHOUT_CLASSIFICATION	0.17997452873523423	DESIGN
/*public boolean isNonExistant(EntityKey key) {	WITHOUT_CLASSIFICATION	0.9999290817641773	WITHOUT_CLASSIFICATION	7.09182358227356E-5	DESIGN
/*public boolean isNonExistant(EntityUniqueKey key) {	WITHOUT_CLASSIFICATION	0.9998332929926359	WITHOUT_CLASSIFICATION	1.6670700736406673E-4	DESIGN
// iterate all the entities currently associated with the persistence context.	WITHOUT_CLASSIFICATION	0.9991619937124738	WITHOUT_CLASSIFICATION	8.38006287526051E-4	DESIGN
// does this entity entry pertain to the entity persister in which we are interested (owner)?	WITHOUT_CLASSIFICATION	0.9998821832916223	WITHOUT_CLASSIFICATION	1.1781670837772574E-4	DESIGN
//check if the managed object is the parent	WITHOUT_CLASSIFICATION	0.99984857052342	WITHOUT_CLASSIFICATION	1.5142947657997027E-4	DESIGN
// otherwise, the proxy was pruned during the serialization process	WITHOUT_CLASSIFICATION	0.9999999962488195	WITHOUT_CLASSIFICATION	3.751180454616164E-9	DESIGN
// adds remove as a sort-of alias for delete...	WITHOUT_CLASSIFICATION	0.9999999272803299	WITHOUT_CLASSIFICATION	7.271967003577907E-8	DESIGN
//bad cast	WITHOUT_CLASSIFICATION	0.9966639759989651	WITHOUT_CLASSIFICATION	0.0033360240010349724	DESIGN
//return lhsPersister.getSubclassPropertyColumnNames(property);	WITHOUT_CLASSIFICATION	0.9999858616862302	WITHOUT_CLASSIFICATION	1.4138313769932465E-5	DESIGN
//property-refs for associations defined on a //component are not supported, so no need to slice	WITHOUT_CLASSIFICATION	0.9999999737075067	WITHOUT_CLASSIFICATION	2.6292493290503114E-8	DESIGN
//if there is no property-ref, assume the join //is to the subclass table (ie. the table of the //subclass that the association belongs to)	WITHOUT_CLASSIFICATION	0.9999999249565684	WITHOUT_CLASSIFICATION	7.504343165038171E-8	DESIGN
//handle a property-ref	WITHOUT_CLASSIFICATION	0.9999682292377693	WITHOUT_CLASSIFICATION	3.177076223071359E-5	DESIGN
/*NativeSQLQueryReturn*/	WITHOUT_CLASSIFICATION	0.9974987278545534	WITHOUT_CLASSIFICATION	0.0025012721454466006	DESIGN
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999993011979624	WITHOUT_CLASSIFICATION	6.9880203755336E-7	DESIGN
// why is all others non final ?	WITHOUT_CLASSIFICATION	0.9935554477450975	WITHOUT_CLASSIFICATION	0.006444552254902453	DESIGN
//this.forceCacheRefresh = forceCacheRefresh;	WITHOUT_CLASSIFICATION	0.9999999192622162	WITHOUT_CLASSIFICATION	8.073778377600618E-8	DESIGN
// HELLA IMPORTANT OPTIMIZATION!!!	WITHOUT_CLASSIFICATION	0.9999643162818792	WITHOUT_CLASSIFICATION	3.568371812075011E-5	DESIGN
/*return that.type.equals(type) && 	WITHOUT_CLASSIFICATION	0.999863113660261	WITHOUT_CLASSIFICATION	1.3688633973897213E-4	DESIGN
//Must occur after resolving identifiers!	WITHOUT_CLASSIFICATION	0.9999155388946049	WITHOUT_CLASSIFICATION	8.446110539499836E-5	DESIGN
//take a snapshot	WITHOUT_CLASSIFICATION	0.9998943024006446	WITHOUT_CLASSIFICATION	1.056975993553408E-4	DESIGN
// do a check	WITHOUT_CLASSIFICATION	0.9999799182422564	WITHOUT_CLASSIFICATION	2.008175774354304E-5	DESIGN
// the owning entity may have been deleted and its identifier unset due to // identifier-rollback; in which case, try to look up its identifier from // the persistence context	WITHOUT_CLASSIFICATION	0.9999978710220017	WITHOUT_CLASSIFICATION	2.1289779982444942E-6	DESIGN
// do the work	WITHOUT_CLASSIFICATION	0.9998735599832141	WITHOUT_CLASSIFICATION	1.264400167859004E-4	DESIGN
// We've been here before	WITHOUT_CLASSIFICATION	0.9999631400660138	WITHOUT_CLASSIFICATION	3.68599339861388E-5	DESIGN
// it is or was referenced _somewhere_	WITHOUT_CLASSIFICATION	0.9999774493479574	WITHOUT_CLASSIFICATION	2.255065204248548E-5	DESIGN
// do the work	WITHOUT_CLASSIFICATION	0.9998735599832141	WITHOUT_CLASSIFICATION	1.264400167859004E-4	DESIGN
// if either its role changed,	WITHOUT_CLASSIFICATION	0.9999995089283381	WITHOUT_CLASSIFICATION	4.910716618169681E-7	DESIGN
// or its key changed	WITHOUT_CLASSIFICATION	0.9999966623003047	WITHOUT_CLASSIFICATION	3.337699695344684E-6	DESIGN
// we will need to create new entries	WITHOUT_CLASSIFICATION	0.9999978057506396	WITHOUT_CLASSIFICATION	2.1942493605365878E-6	DESIGN
// we will need to remove ye olde entries	WITHOUT_CLASSIFICATION	0.9999912770423084	WITHOUT_CLASSIFICATION	8.722957691622017E-6	DESIGN
// force initialize!	WITHOUT_CLASSIFICATION	0.9999999417076433	WITHOUT_CLASSIFICATION	5.829235663173181E-8	DESIGN
// else if it's elements changed	WITHOUT_CLASSIFICATION	0.9999999523481852	WITHOUT_CLASSIFICATION	4.765181480199476E-8	DESIGN
//ATTRIBUTES MAINTAINED BETWEEN FLUSH CYCLES	WITHOUT_CLASSIFICATION	0.9999738675143325	WITHOUT_CLASSIFICATION	2.6132485667509173E-5	DESIGN
// session-start/post-flush persistent state	WITHOUT_CLASSIFICATION	0.9999995829189011	WITHOUT_CLASSIFICATION	4.170810988309704E-7	DESIGN
// allow the CollectionSnapshot to be serialized	WITHOUT_CLASSIFICATION	0.999955968635266	WITHOUT_CLASSIFICATION	4.4031364734017415E-5	DESIGN
// ATTRIBUTES USED ONLY DURING FLUSH CYCLE	WITHOUT_CLASSIFICATION	0.999987794878192	WITHOUT_CLASSIFICATION	1.2205121807896597E-5	DESIGN
// "current" means the reference that was found during flush() 	WITHOUT_CLASSIFICATION	0.9999999291683727	WITHOUT_CLASSIFICATION	7.083162733513988E-8	DESIGN
// "loaded" means the reference that is consistent  // with the current database state	WITHOUT_CLASSIFICATION	0.9999952183082912	WITHOUT_CLASSIFICATION	4.7816917088551665E-6	DESIGN
// during flush, we navigate the object graph to // collections and decide what to do with them	WITHOUT_CLASSIFICATION	0.9997717810911028	WITHOUT_CLASSIFICATION	2.2821890889731516E-4	DESIGN
// if we instantiate a collection during the flush() process, // we must ignore it for the rest of the flush()	WITHOUT_CLASSIFICATION	0.9999999999372301	WITHOUT_CLASSIFICATION	6.276997592269553E-11	DESIGN
// new collections that get found + wrapped // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999989461510773	WITHOUT_CLASSIFICATION	1.0538489226943324E-6	DESIGN
//a newly wrapped collection is NOT dirty (or we get unnecessary version updates)	WITHOUT_CLASSIFICATION	0.9870981890476404	WITHOUT_CLASSIFICATION	0.012901810952359712	DESIGN
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9998463492560546	WITHOUT_CLASSIFICATION	1.5365074394527785E-4	DESIGN
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9998463492560546	WITHOUT_CLASSIFICATION	1.5365074394527785E-4	DESIGN
// detached collections that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999999618286488	WITHOUT_CLASSIFICATION	3.817135116797431E-8	DESIGN
//optimization	WITHOUT_CLASSIFICATION	0.9999909106887306	WITHOUT_CLASSIFICATION	9.089311269411683E-6	DESIGN
//optimization //optimization	WITHOUT_CLASSIFICATION	0.999999516441224	WITHOUT_CLASSIFICATION	4.835587760307447E-7	DESIGN
//re-snapshot	WITHOUT_CLASSIFICATION	0.9997575792478925	WITHOUT_CLASSIFICATION	2.4242075210759859E-4	DESIGN
// for convenience to save some lookups	WITHOUT_CLASSIFICATION	0.9999990403085582	WITHOUT_CLASSIFICATION	9.596914417269794E-7	DESIGN
//NOTE: this is not updated when properties are fetched lazily!	WITHOUT_CLASSIFICATION	0.8999138273676704	DESIGN	0.10008617263232958	WITHOUT_CLASSIFICATION
//memory optimization	WITHOUT_CLASSIFICATION	0.9999982843893832	WITHOUT_CLASSIFICATION	1.7156106167437626E-6	DESIGN
// use the id value of a newly instantiated instance as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999558294200079	WITHOUT_CLASSIFICATION	4.4170579992067664E-5	DESIGN
// copied from Session:	WITHOUT_CLASSIFICATION	0.9999078571878417	WITHOUT_CLASSIFICATION	9.214281215824587E-5	DESIGN
// this should not happen since the DTD prevents it	WITHOUT_CLASSIFICATION	0.9998947904417198	WITHOUT_CLASSIFICATION	1.0520955828011283E-4	DESIGN
// JoinProcessor needs to know if the where clause fragment came from a dynamic filter or not so it // can put the where clause fragment in the right place in the SQL AST.   'hasFilterCondition' keeps track // of that fact.	WITHOUT_CLASSIFICATION	0.9977327948336964	WITHOUT_CLASSIFICATION	0.00226720516630359	DESIGN
// the current join represents the join between a many-to-many association table // and its "target" table.  Here we need to apply any additional filters // defined specifically on the many-to-many	WITHOUT_CLASSIFICATION	0.9999606356678403	WITHOUT_CLASSIFICATION	3.936433215973365E-5	DESIGN
//check basic level one nullablilty	WITHOUT_CLASSIFICATION	0.9999123378611694	WITHOUT_CLASSIFICATION	8.76621388306049E-5	DESIGN
//values is not null and is checkable, we'll look deeper	WITHOUT_CLASSIFICATION	0.9893564367305342	WITHOUT_CLASSIFICATION	0.010643563269465769	DESIGN
//for non null args, check for components and elements containing components	WITHOUT_CLASSIFICATION	0.9999999231584125	WITHOUT_CLASSIFICATION	7.684158758102244E-8	DESIGN
//cache the hashcode	WITHOUT_CLASSIFICATION	0.9995552535117826	WITHOUT_CLASSIFICATION	4.4474648821739066E-4	DESIGN
//persistent collections may have components	WITHOUT_CLASSIFICATION	0.9999997864593275	WITHOUT_CLASSIFICATION	2.13540672546238E-7	DESIGN
//check for all components values in the collection	WITHOUT_CLASSIFICATION	0.9999995412837468	WITHOUT_CLASSIFICATION	4.5871625318897123E-7	DESIGN
/* will check current level if some of them are not null	WITHOUT_CLASSIFICATION	0.9996533697446902	WITHOUT_CLASSIFICATION	3.466302553098594E-4	DESIGN
//do the test	WITHOUT_CLASSIFICATION	0.9999975875049456	WITHOUT_CLASSIFICATION	2.4124950543806E-6	DESIGN
// if its an uninitialized proxy it can't be transient	WITHOUT_CLASSIFICATION	0.9999962304053941	WITHOUT_CLASSIFICATION	3.7695946059537846E-6	DESIGN
//unwrap it	WITHOUT_CLASSIFICATION	0.9999713150497833	WITHOUT_CLASSIFICATION	2.868495021665631E-5	DESIGN
// See if the entity is already bound to this session, if not look at the // entity identifier and assume that the entity is persistent if the // id is not "unsaved" (that is, we rely on foreign keys to keep // database integrity)	WITHOUT_CLASSIFICATION	0.9999888496237628	WITHOUT_CLASSIFICATION	1.1150376237211154E-5	DESIGN
// an unfetched association can only point to // an entity that already exists in the db	WITHOUT_CLASSIFICATION	0.9999993552199976	WITHOUT_CLASSIFICATION	6.447800023466727E-7	DESIGN
// let the interceptor inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999999744516103	WITHOUT_CLASSIFICATION	2.5548389767724633E-8	DESIGN
// let the persister inspect the instance to decide	WITHOUT_CLASSIFICATION	0.99999656575906	WITHOUT_CLASSIFICATION	3.4342409401106076E-6	DESIGN
// we use the assumed value, if there is one, to avoid hitting // the database	WITHOUT_CLASSIFICATION	0.99999769593345	WITHOUT_CLASSIFICATION	2.3040665500308927E-6	DESIGN
// hit the database, after checking the session cache for a snapshot	WITHOUT_CLASSIFICATION	0.5747380804395074	DESIGN	0.42526191956049264	WITHOUT_CLASSIFICATION
// context-entity-identifier returns null explicitly if the entity // is not associated with the persistence context; so make some // deeper checks...	WITHOUT_CLASSIFICATION	0.9999959325793759	WITHOUT_CLASSIFICATION	4.067420624157324E-6	DESIGN
//int count = 0;	WITHOUT_CLASSIFICATION	0.9999935562669595	WITHOUT_CLASSIFICATION	6.443733040400333E-6	DESIGN
//the first key found after the given key	WITHOUT_CLASSIFICATION	0.9999994743696833	WITHOUT_CLASSIFICATION	5.256303168305953E-7	DESIGN
//checkForEnd = false;	WITHOUT_CLASSIFICATION	0.9999922780613916	WITHOUT_CLASSIFICATION	7.721938608478354E-6	DESIGN
//count++;	WITHOUT_CLASSIFICATION	0.9996382246822105	WITHOUT_CLASSIFICATION	3.617753177895463E-4	DESIGN
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.999976431221904	WITHOUT_CLASSIFICATION	2.3568778096004354E-5	DESIGN
//we ran out of keys to try	WITHOUT_CLASSIFICATION	0.9997982275500702	WITHOUT_CLASSIFICATION	2.0177244992993718E-4	DESIGN
//first element of array is reserved for the actual instance we are loading!	WITHOUT_CLASSIFICATION	0.9999987993848174	WITHOUT_CLASSIFICATION	1.2006151825577623E-6	DESIGN
//the first id found after the given id	WITHOUT_CLASSIFICATION	0.9999995350748112	WITHOUT_CLASSIFICATION	4.6492518872452163E-7	DESIGN
//we ran out of ids to try	WITHOUT_CLASSIFICATION	0.9974410729922347	WITHOUT_CLASSIFICATION	0.002558927007765255	DESIGN
// look for existing collection as part of the persistence context	WITHOUT_CLASSIFICATION	0.9999999996612345	WITHOUT_CLASSIFICATION	3.387654143018152E-10	DESIGN
// ignore this row of results! Note the early exit	WITHOUT_CLASSIFICATION	0.9999984817493488	WITHOUT_CLASSIFICATION	1.5182506511155801E-6	DESIGN
// initialize this collection	WITHOUT_CLASSIFICATION	0.9999096713861406	WITHOUT_CLASSIFICATION	9.032861385936305E-5	DESIGN
// create one	WITHOUT_CLASSIFICATION	0.999997818217385	WITHOUT_CLASSIFICATION	2.181782615056014E-6	DESIGN
// warning: can cause a recursive calls! (proxy initialization)	WITHOUT_CLASSIFICATION	0.9999999269476069	WITHOUT_CLASSIFICATION	7.305239310725591E-8	DESIGN
// there were no queued additions // and the role has a cache	WITHOUT_CLASSIFICATION	0.9999925596018818	WITHOUT_CLASSIFICATION	7.440398118245019E-6	DESIGN
// and this is not a forced initialization during flush	WITHOUT_CLASSIFICATION	0.9999999654301037	WITHOUT_CLASSIFICATION	3.456989628587875E-8	DESIGN
// some filters affecting the collection are enabled on the session, so do not do the put into the cache.	WITHOUT_CLASSIFICATION	0.9999954454023031	WITHOUT_CLASSIFICATION	4.554597696870378E-6	DESIGN
// cleanup code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998228664862706	WITHOUT_CLASSIFICATION	1.7713351372936843E-4	DESIGN
// loading collection xrefs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999918485648	WITHOUT_CLASSIFICATION	8.151435213839014E-9	DESIGN
// Collection load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996788893605	WITHOUT_CLASSIFICATION	3.2111063954675875E-7	DESIGN
// simple cache of param metadata based on query string.  Ideally, the // original "user-supplied query" string should be used to retreive this // metadata (i.e., not the para-list-expanded query string) to avoid // unnecessary cache entries. // Used solely for caching param metadata for native-sql queries, see // getSQLParameterMetadata() for a discussion as to why...	WITHOUT_CLASSIFICATION	0.9974045779789983	WITHOUT_CLASSIFICATION	0.0025954220210017837	DESIGN
// the cache of the actual plans...	WITHOUT_CLASSIFICATION	0.9999999525766736	WITHOUT_CLASSIFICATION	4.74233263742767E-8	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.9998094328207842	WITHOUT_CLASSIFICATION	1.9056717921580864E-4	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.9998094328207842	WITHOUT_CLASSIFICATION	1.9056717921580864E-4	DESIGN
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999999921253561	WITHOUT_CLASSIFICATION	7.874644002762775E-9	DESIGN
// for native-sql queries, the param metadata is determined outside // any relation to a query plan, because query plan creation and/or // retreival for a native-sql query depends on all of the return // types having been set, which might not be the case up-front when // param metadata would be most useful	WITHOUT_CLASSIFICATION	0.9996836356380425	WITHOUT_CLASSIFICATION	3.163643619575317E-4	DESIGN
// don't care...	WITHOUT_CLASSIFICATION	0.9999178648351672	WITHOUT_CLASSIFICATION	8.213516483280825E-5	DESIGN
// Recognition code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999860149322014	WITHOUT_CLASSIFICATION	1.3985067798677169E-5	DESIGN
// don't care...	WITHOUT_CLASSIFICATION	0.9999178648351672	WITHOUT_CLASSIFICATION	8.213516483280825E-5	DESIGN
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.99744524760664	WITHOUT_CLASSIFICATION	0.0025547523933599756	DESIGN
// break the outer loop !!!	WITHOUT_CLASSIFICATION	0.9992020233529876	WITHOUT_CLASSIFICATION	7.979766470123734E-4	DESIGN
// named parameter	WITHOUT_CLASSIFICATION	0.9995881465827966	WITHOUT_CLASSIFICATION	4.118534172033723E-4	DESIGN
// could be either an ordinal or JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999948772658609	WITHOUT_CLASSIFICATION	5.122734139024914E-6	DESIGN
// a peek ahead showed this as an JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999994830159092	WITHOUT_CLASSIFICATION	5.169840907498529E-7	DESIGN
// make sure this "name" is an integral	WITHOUT_CLASSIFICATION	0.999999801236512	WITHOUT_CLASSIFICATION	1.987634879872714E-7	DESIGN
// pre-determine and cache the hashcode	WITHOUT_CLASSIFICATION	0.9999993908926501	WITHOUT_CLASSIFICATION	6.091073499466135E-7	DESIGN
// perform the actual work	WITHOUT_CLASSIFICATION	0.9999999166256345	WITHOUT_CLASSIFICATION	8.337436555900706E-8	DESIGN
// if everything went ok, commit the transaction and close the obtained // connection handle...	WITHOUT_CLASSIFICATION	0.9999997176364723	WITHOUT_CLASSIFICATION	2.823635276672951E-7	DESIGN
// at some point the processing went bad, so we need to: //      1) make sure the connection handle gets released //      2) try to cleanup the JTA context as much as possible	WITHOUT_CLASSIFICATION	0.9999851001262452	WITHOUT_CLASSIFICATION	1.489987375495632E-5	DESIGN
// finally handle the exception	WITHOUT_CLASSIFICATION	0.9999668389874139	WITHOUT_CLASSIFICATION	3.316101258610653E-5	DESIGN
// a "detached" collection that belonged to a different entity	WITHOUT_CLASSIFICATION	0.9996370579921636	WITHOUT_CLASSIFICATION	3.629420078363927E-4	DESIGN
//saveOrUpdateCopy() is deprecated!	WITHOUT_CLASSIFICATION	0.9999780146659045	WITHOUT_CLASSIFICATION	2.1985334095423077E-5	DESIGN
// collectionPersister should not be null, but we don't want to throw // an exception if it is null	WITHOUT_CLASSIFICATION	0.9967831263467457	WITHOUT_CLASSIFICATION	0.0032168736532543723	DESIGN
// otherwise a null or brand new collection // this will also (inefficiently) handle arrays, which // have no snapshot, so we can't do any better //processArrayOrNewCollection(collection, type);	WITHOUT_CLASSIFICATION	0.9994917397870441	WITHOUT_CLASSIFICATION	5.082602129559314E-4	DESIGN
// a "detached" collection that originally belonged to the same entity	WITHOUT_CLASSIFICATION	0.9999091670131038	WITHOUT_CLASSIFICATION	9.08329868961139E-5	DESIGN
//do nothing	WITHOUT_CLASSIFICATION	0.9999924083219551	WITHOUT_CLASSIFICATION	7.591678044961442E-6	DESIGN
//do nothing	WITHOUT_CLASSIFICATION	0.9999924083219551	WITHOUT_CLASSIFICATION	7.591678044961442E-6	DESIGN
//Force a substitution!	WITHOUT_CLASSIFICATION	0.9996380164447285	WITHOUT_CLASSIFICATION	3.6198355527150854E-4	DESIGN
// The user requested a "greater" (i.e. more restrictive) form of // pessimistic lock	WITHOUT_CLASSIFICATION	0.9999999938639458	WITHOUT_CLASSIFICATION	6.1360541804379364E-9	DESIGN
// the database now holds a lock + the object is flushed from the cache, // so release the soft lock	WITHOUT_CLASSIFICATION	0.9999982755050416	WITHOUT_CLASSIFICATION	1.7244949584153973E-6	DESIGN
// now update the object .. has to be outside the main if block above (because of collections)	WITHOUT_CLASSIFICATION	0.9999992535406093	WITHOUT_CLASSIFICATION	7.464593907942616E-7	DESIGN
// Search for collections by reachability, updating their role. // We don't want to touch collections reachable from a deleted object	WITHOUT_CLASSIFICATION	0.9896524264709858	WITHOUT_CLASSIFICATION	0.010347573529014198	DESIGN
// this is a situation where the entity id is assigned by a post-insert generator // and was saved outside the transaction forcing it to be delayed	WITHOUT_CLASSIFICATION	0.9999979350783669	WITHOUT_CLASSIFICATION	2.0649216331043294E-6	DESIGN
// NOTE: we need to do the wrap here even if its not "dirty", // because collections need wrapping but changes to _them_ // don't dirty the container. Also, for versioned data, we // need to wrap before calling searchForDirtyCollections	WITHOUT_CLASSIFICATION	0.99998233804708	WITHOUT_CLASSIFICATION	1.7661952919957788E-5	DESIGN
//grab its state saved at deletion	WITHOUT_CLASSIFICATION	0.9999441149814267	WITHOUT_CLASSIFICATION	5.588501857341252E-5	DESIGN
// grab its current state	WITHOUT_CLASSIFICATION	0.9999986674536322	WITHOUT_CLASSIFICATION	1.332546367704763E-6	DESIGN
// schedule the update // note that we intentionally do _not_ pass in currentPersistentState!	WITHOUT_CLASSIFICATION	0.9999999995041805	WITHOUT_CLASSIFICATION	4.958194354954885E-10	DESIGN
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999967583125482	WITHOUT_CLASSIFICATION	3.2416874516900372E-6	DESIGN
// give the Interceptor a chance to process property values, if the properties // were modified by the Interceptor, we need to set them back to the object	WITHOUT_CLASSIFICATION	0.9999993237378736	WITHOUT_CLASSIFICATION	6.76262126504862E-7	DESIGN
// compare to cached state (ignoring collections unless versioned)	WITHOUT_CLASSIFICATION	0.9999999981066535	WITHOUT_CLASSIFICATION	1.893346484466419E-9	DESIGN
// if it was dirtied by a collection only	WITHOUT_CLASSIFICATION	0.9999964901673581	WITHOUT_CLASSIFICATION	3.5098326419162986E-6	DESIGN
// increment the version number (if necessary)	WITHOUT_CLASSIFICATION	0.9995998862936293	WITHOUT_CLASSIFICATION	4.001137063707417E-4	DESIGN
// check nullability but do not perform command execute // we'll use scheduled updates for that.	WITHOUT_CLASSIFICATION	0.9999999800367995	WITHOUT_CLASSIFICATION	1.9963200465093965E-8	DESIGN
//give the Interceptor a chance to modify property values	WITHOUT_CLASSIFICATION	0.9994905523625524	WITHOUT_CLASSIFICATION	5.09447637447705E-4	DESIGN
//now we might need to recalculate the dirtyProperties array	WITHOUT_CLASSIFICATION	0.8070754529945654	WITHOUT_CLASSIFICATION	0.19292454700543463	DESIGN
//use the current version	WITHOUT_CLASSIFICATION	0.9999670719142936	WITHOUT_CLASSIFICATION	3.292808570638168E-5	DESIGN
// Interceptor returned null, so do the dirtycheck ourself, if possible	WITHOUT_CLASSIFICATION	0.9999999881521058	WITHOUT_CLASSIFICATION	1.1847894264314206E-8	DESIGN
// object loaded by update()	WITHOUT_CLASSIFICATION	0.9999998507938053	WITHOUT_CLASSIFICATION	1.492061947627103E-7	DESIGN
// dirty check against the usual snapshot of the entity	WITHOUT_CLASSIFICATION	0.9999994887420915	WITHOUT_CLASSIFICATION	5.112579084109745E-7	DESIGN
// dirty check against the database snapshot, if possible/necessary	WITHOUT_CLASSIFICATION	0.9999500494026706	WITHOUT_CLASSIFICATION	4.995059732931207E-5	DESIGN
// the Interceptor handled the dirty checking	WITHOUT_CLASSIFICATION	0.999192463560106	WITHOUT_CLASSIFICATION	8.075364398939916E-4	DESIGN
//even process null collections	WITHOUT_CLASSIFICATION	0.9999999454629077	WITHOUT_CLASSIFICATION	5.453709236026116E-8	DESIGN
// get the id from the object	WITHOUT_CLASSIFICATION	0.9999622934517787	WITHOUT_CLASSIFICATION	3.770654822126387E-5	DESIGN
//always do an INSERT, and let it fail by constraint violation	WITHOUT_CLASSIFICATION	0.9999990223752828	WITHOUT_CLASSIFICATION	9.77624717184454E-7	DESIGN
//what is the version on the database?	WITHOUT_CLASSIFICATION	0.5143081716893515	DESIGN	0.4856918283106486	WITHOUT_CLASSIFICATION
/// HHH-2378	WITHOUT_CLASSIFICATION	0.9999883773233634	WITHOUT_CLASSIFICATION	1.1622676636469973E-5	DESIGN
//will result in a SQL UPDATE:	WITHOUT_CLASSIFICATION	0.9997154943501985	WITHOUT_CLASSIFICATION	2.8450564980156656E-4	DESIGN
//else do nothing (don't even reassociate object!)	WITHOUT_CLASSIFICATION	0.9992016149894488	WITHOUT_CLASSIFICATION	7.983850105512065E-4	DESIGN
// no existing row - do an insert	WITHOUT_CLASSIFICATION	0.9999901290681867	WITHOUT_CLASSIFICATION	9.87093181323492E-6	DESIGN
//refresh() does not pass an entityName	WITHOUT_CLASSIFICATION	0.999993655892194	WITHOUT_CLASSIFICATION	6.344107805911914E-6	DESIGN
//do not return a proxy! //(this option indicates we are initializing a proxy)	WITHOUT_CLASSIFICATION	0.999956331884276	WITHOUT_CLASSIFICATION	4.366811572391947E-5	DESIGN
//return a proxy if appropriate	WITHOUT_CLASSIFICATION	0.9998640342911848	WITHOUT_CLASSIFICATION	1.3596570881512852E-4	DESIGN
// return existing object or initialized proxy (unless deleted)	WITHOUT_CLASSIFICATION	0.9999998469004665	WITHOUT_CLASSIFICATION	1.5309953347470237E-7	DESIGN
// return new uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999996360750973	WITHOUT_CLASSIFICATION	3.6392490260670263E-7	DESIGN
// this object was already loaded	WITHOUT_CLASSIFICATION	0.9995638793223722	WITHOUT_CLASSIFICATION	4.36120677627766E-4	DESIGN
// Entity was found in second-level cache...	WITHOUT_CLASSIFICATION	0.9993600076452207	WITHOUT_CLASSIFICATION	6.399923547792212E-4	DESIGN
// make it circular-reference safe	WITHOUT_CLASSIFICATION	0.9999999763886277	WITHOUT_CLASSIFICATION	2.3611372248474834E-8	DESIGN
// intializes result by side-effect	WITHOUT_CLASSIFICATION	0.9999999921168174	WITHOUT_CLASSIFICATION	7.883182534435056E-9	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Pre-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999825559295	WITHOUT_CLASSIFICATION	1.7444070536235035E-8	DESIGN
//some statistics	WITHOUT_CLASSIFICATION	0.9998912694930452	WITHOUT_CLASSIFICATION	1.0873050695477606E-4	DESIGN
//safe from concurrent modification because of how entryList() is implemented on IdentityMap	WITHOUT_CLASSIFICATION	0.9993535802926302	WITHOUT_CLASSIFICATION	6.464197073698338E-4	DESIGN
// Initialize dirty flags for arrays + collections with composite elements // and reset reached, doupdate, etc.	WITHOUT_CLASSIFICATION	0.9999999985289222	WITHOUT_CLASSIFICATION	1.4710777314766575E-9	DESIGN
// Among other things, updateReachables() will recursively load all // collections that are moving roles. This might cause entities to // be loaded.	WITHOUT_CLASSIFICATION	0.9995769695121997	WITHOUT_CLASSIFICATION	4.230304878002701E-4	DESIGN
// So this needs to be safe from concurrent modification problems. // It is safe because of how IdentityMap implements entrySet()	WITHOUT_CLASSIFICATION	0.6503061836350792	DESIGN	0.34969381636492086	WITHOUT_CLASSIFICATION
// Update the status of the object and if necessary, schedule an update	WITHOUT_CLASSIFICATION	0.9999996824530063	WITHOUT_CLASSIFICATION	3.1754699372261136E-7	DESIGN
// Schedule updates to collections:	WITHOUT_CLASSIFICATION	0.9999998751888857	WITHOUT_CLASSIFICATION	1.2481111426751917E-7	DESIGN
// we need to lock the collection caches before // executing entity inserts/updates in order to // account for bidi associations	WITHOUT_CLASSIFICATION	0.9999952159204576	WITHOUT_CLASSIFICATION	4.7840795424127195E-6	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Post-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999898193977	WITHOUT_CLASSIFICATION	1.0180602235631568E-8	DESIGN
//the database has changed now, so the subselect results need to be invalidated	WITHOUT_CLASSIFICATION	0.9999963867349685	WITHOUT_CLASSIFICATION	3.6132650314516165E-6	DESIGN
//if the collection is dereferenced, remove from the session cache //iter.remove(); //does not work, since the entrySet is not backed by the set	WITHOUT_CLASSIFICATION	0.9999997656996352	WITHOUT_CLASSIFICATION	2.3430036472970395E-7	DESIGN
//otherwise recreate the mapping between the collection and its key	WITHOUT_CLASSIFICATION	0.9999839997828657	WITHOUT_CLASSIFICATION	1.60002171343422E-5	DESIGN
//get a snapshot	WITHOUT_CLASSIFICATION	0.9999565058157304	WITHOUT_CLASSIFICATION	4.349418426954006E-5	DESIGN
/* package-private */	WITHOUT_CLASSIFICATION	0.9999948173329352	WITHOUT_CLASSIFICATION	5.182667064831764E-6	DESIGN
/* package-private */	WITHOUT_CLASSIFICATION	0.9999948173329352	WITHOUT_CLASSIFICATION	5.182667064831764E-6	DESIGN
// key is an entity involved with the operation performed by the listener; // value is a flag indicating if the listener explicitly operates on the entity	WITHOUT_CLASSIFICATION	0.9999999998930381	WITHOUT_CLASSIFICATION	1.0696196731424002E-10	DESIGN
// EARLY EXIT!!!	WITHOUT_CLASSIFICATION	0.9999189266876038	WITHOUT_CLASSIFICATION	8.107331239606336E-5	DESIGN
//ie. the entity came in from update()	WITHOUT_CLASSIFICATION	0.9996192958744036	WITHOUT_CLASSIFICATION	3.8070412559633687E-4	DESIGN
// before any callbacks, etc, so subdeletions see that this deletion happened first	WITHOUT_CLASSIFICATION	0.9999917427718342	WITHOUT_CLASSIFICATION	8.257228165815523E-6	DESIGN
// Ensures that containing deletions happen before sub-deletions	WITHOUT_CLASSIFICATION	0.9999999977059599	WITHOUT_CLASSIFICATION	2.2940401162785332E-9	DESIGN
//	WITHOUT_CLASSIFICATION	0.9966662531954268	WITHOUT_CLASSIFICATION	0.003333746804573307	DESIGN
// cascade-delete to collections BEFORE the collection owner is deleted	WITHOUT_CLASSIFICATION	0.9999991946287804	WITHOUT_CLASSIFICATION	8.053712195939762E-7	DESIGN
// cascade-delete to many-to-one AFTER the parent was deleted	WITHOUT_CLASSIFICATION	0.9997332900194424	WITHOUT_CLASSIFICATION	2.6670998055746607E-4	DESIGN
// if it is an initialized proxy, let cascade // handle it later on	WITHOUT_CLASSIFICATION	0.999999701173732	WITHOUT_CLASSIFICATION	2.988262679290533E-7	DESIGN
//assign the requested id to the proxy, *before* //reassociating the proxy	WITHOUT_CLASSIFICATION	0.999971654748713	WITHOUT_CLASSIFICATION	2.8345251286940455E-5	DESIGN
// an uninitialized proxy, noop, don't even need to // return an id, since it is never a save()	WITHOUT_CLASSIFICATION	0.9999999974728955	WITHOUT_CLASSIFICATION	2.5271044649982952E-9	DESIGN
//initialize properties of the event:	WITHOUT_CLASSIFICATION	0.9999980681949842	WITHOUT_CLASSIFICATION	1.9318050157717346E-6	DESIGN
//return the id in the event object	WITHOUT_CLASSIFICATION	0.9991029973773597	WITHOUT_CLASSIFICATION	8.970026226402703E-4	DESIGN
//TRANSIENT or DELETED	WITHOUT_CLASSIFICATION	0.9999981672879323	WITHOUT_CLASSIFICATION	1.8327120676990905E-6	DESIGN
// use the id assigned to the instance	WITHOUT_CLASSIFICATION	0.9999847329195084	WITHOUT_CLASSIFICATION	1.5267080491664506E-5	DESIGN
// assume this is a newly instantiated transient object // which should be saved rather than updated	WITHOUT_CLASSIFICATION	0.5480839428548836	DESIGN	0.45191605714511657	WITHOUT_CLASSIFICATION
// this is a transient object with existing persistent state not loaded by the session	WITHOUT_CLASSIFICATION	0.9999096754100316	WITHOUT_CLASSIFICATION	9.032458996839693E-5	DESIGN
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999999263184276	WITHOUT_CLASSIFICATION	7.368157240670024E-8	DESIGN
//cachedState,	WITHOUT_CLASSIFICATION	0.9998887664210048	WITHOUT_CLASSIFICATION	1.1123357899531725E-4	DESIGN
//assume true, since we don't really know, and it doesn't matter	WITHOUT_CLASSIFICATION	0.9993159568462384	WITHOUT_CLASSIFICATION	6.840431537615592E-4	DESIGN
//a "detached" collection!	WITHOUT_CLASSIFICATION	0.9999764360620608	WITHOUT_CLASSIFICATION	2.356393793923897E-5	DESIGN
// if the collection belonged to a different entity, // clean up the existing state of the collection	WITHOUT_CLASSIFICATION	0.9999810259336529	WITHOUT_CLASSIFICATION	1.8974066347030583E-5	DESIGN
//log.debug( "calling onLoad()" );	WITHOUT_CLASSIFICATION	0.9999998475521285	WITHOUT_CLASSIFICATION	1.5244787148730147E-7	DESIGN
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999693757856706	WITHOUT_CLASSIFICATION	3.0624214329312446E-5	DESIGN
// note: performExecutions() clears all collectionXxxxtion  // collections (the collection actions) in the session	WITHOUT_CLASSIFICATION	0.9999430671440754	WITHOUT_CLASSIFICATION	5.693285592450429E-5	DESIGN
// if no array holder we found an unwrappered array (this can't occur, // because we now always call wrap() before getting to here) // return (ah==null) ? true : searchForDirtyCollections(ah, type);	WITHOUT_CLASSIFICATION	0.9836974128459861	WITHOUT_CLASSIFICATION	0.016302587154013885	DESIGN
// if not wrappered yet, its dirty (this can't occur, because // we now always call wrap() before getting to here) // return ( ! (obj instanceof PersistentCollection) ) ? //true : searchForDirtyCollections( (PersistentCollection) obj, type );	WITHOUT_CLASSIFICATION	0.9998437721663629	DESIGN	1.5622783363703713E-4	WITHOUT_CLASSIFICATION
//we need to check even if it was not initialized, because of delayed adds!	WITHOUT_CLASSIFICATION	0.9999731490548196	WITHOUT_CLASSIFICATION	2.6850945180441227E-5	DESIGN
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9997294890768703	WITHOUT_CLASSIFICATION	2.7051092312971477E-4	DESIGN
// find any entities that are still transient after retry	WITHOUT_CLASSIFICATION	0.9999946900544369	WITHOUT_CLASSIFICATION	5.309945563101626E-6	DESIGN
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999693757856706	WITHOUT_CLASSIFICATION	3.0624214329312446E-5	DESIGN
// Check the persistence context for an entry relating to this // entity to be merged...	WITHOUT_CLASSIFICATION	0.9999635018069035	WITHOUT_CLASSIFICATION	3.649819309660184E-5	DESIGN
// we have specialized case of a detached entity from the // perspective of the merge operation.  Specifically, we // have an incoming entity instance which has a corresponding // entry in the current persistence context, but registered // under a different entity instance	WITHOUT_CLASSIFICATION	0.9997918273995048	WITHOUT_CLASSIFICATION	2.0817260049521994E-4	DESIGN
//DELETED	WITHOUT_CLASSIFICATION	0.9995784647045539	WITHOUT_CLASSIFICATION	4.2153529544607365E-4	DESIGN
//before cascade!	WITHOUT_CLASSIFICATION	0.9999318321367766	WITHOUT_CLASSIFICATION	6.816786322342141E-5	DESIGN
// cascade first, so that all unsaved objects get their // copy created before we actually copy //cascadeOnMerge(event, persister, entity, copyCache, Cascades.CASCADE_BEFORE_MERGE);	WITHOUT_CLASSIFICATION	0.9999999837700709	WITHOUT_CLASSIFICATION	1.6229929102908658E-8	DESIGN
//this bit is only *really* absolutely necessary for handling //requestedId, but is also good if we merge multiple object //graphs, since it helps ensure uniqueness	WITHOUT_CLASSIFICATION	0.7864348365601499	WITHOUT_CLASSIFICATION	0.21356516343985013	DESIGN
// continue...; we'll find out if it ends up not getting saved later	WITHOUT_CLASSIFICATION	0.9982554526527593	WITHOUT_CLASSIFICATION	0.0017445473472406808	DESIGN
// cascade first, so that all unsaved objects get their // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999989210502835	WITHOUT_CLASSIFICATION	1.0789497164061359E-6	DESIGN
// check that entity id = requestedId	WITHOUT_CLASSIFICATION	0.9999951204156718	WITHOUT_CLASSIFICATION	4.8795843282036985E-6	DESIGN
//before cascade!	WITHOUT_CLASSIFICATION	0.9999318321367766	WITHOUT_CLASSIFICATION	6.816786322342141E-5	DESIGN
// we got here because we assumed that an instance // with an assigned id was detached, when it was // really persistent	WITHOUT_CLASSIFICATION	0.99999907613146	WITHOUT_CLASSIFICATION	9.238685399752726E-7	DESIGN
// cascade first, so that all unsaved objects get their  // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999904601242703	WITHOUT_CLASSIFICATION	9.539875729719717E-6	DESIGN
//copyValues works by reflection, so explicitly mark the entity instance dirty	WITHOUT_CLASSIFICATION	0.9997866132710033	WITHOUT_CLASSIFICATION	2.133867289967363E-4	DESIGN
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999807061704155	WITHOUT_CLASSIFICATION	1.9293829584521432E-5	DESIGN
//source.getBatcher().executeBatch(); //found another way to ensure that all batched joined inserts have been executed	WITHOUT_CLASSIFICATION	0.9999998663421502	WITHOUT_CLASSIFICATION	1.336578498110702E-7	DESIGN
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999967583125482	WITHOUT_CLASSIFICATION	3.2416874516900372E-6	DESIGN
//now done in EntityIdentityInsertAction //persister.setIdentifier( entity, id, source.getEntityMode() );	WITHOUT_CLASSIFICATION	0.999999996596135	WITHOUT_CLASSIFICATION	3.403864899497925E-9	DESIGN
//source.getPersistenceContext().removeNonExist( new EntityKey( id, persister, source.getEntityMode() ) );	WITHOUT_CLASSIFICATION	0.9999992009488781	WITHOUT_CLASSIFICATION	7.990511218938091E-7	DESIGN
//keep the existing version number in the case of replicate!	WITHOUT_CLASSIFICATION	0.9999746899691968	WITHOUT_CLASSIFICATION	2.5310030803229918E-5	DESIGN
// cascade-save to many-to-one BEFORE the parent is saved	WITHOUT_CLASSIFICATION	0.9989113544867719	WITHOUT_CLASSIFICATION	0.0010886455132280766	DESIGN
//pass this as an argument only to avoid double looking	WITHOUT_CLASSIFICATION	0.9999866652953294	WITHOUT_CLASSIFICATION	1.3334704670481197E-5	DESIGN
// the object is persistent	WITHOUT_CLASSIFICATION	0.9998347219738115	WITHOUT_CLASSIFICATION	1.652780261884811E-4	DESIGN
//the entity is associated with the session, so check its status	WITHOUT_CLASSIFICATION	0.9998420949823813	WITHOUT_CLASSIFICATION	1.5790501761867837E-4	DESIGN
// do nothing for persistent instances	WITHOUT_CLASSIFICATION	0.9999992788229338	WITHOUT_CLASSIFICATION	7.21177066053595E-7	DESIGN
//ie. e.status==DELETED	WITHOUT_CLASSIFICATION	0.9999865166226092	WITHOUT_CLASSIFICATION	1.3483377390813129E-5	DESIGN
// the object is transient or detached	WITHOUT_CLASSIFICATION	0.9999765909683132	WITHOUT_CLASSIFICATION	2.3409031686797865E-5	DESIGN
//NOTE EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999441237776009	WITHOUT_CLASSIFICATION	5.587622239910437E-5	DESIGN
// Private constructor - stops checkstyle from complaining.	WITHOUT_CLASSIFICATION	0.9999991422190575	WITHOUT_CLASSIFICATION	8.577809425438261E-7	DESIGN
// First, try to find a matching constructor accepting a ViolatedConstraintNameExtracter param...	WITHOUT_CLASSIFICATION	0.9999982681193781	WITHOUT_CLASSIFICATION	1.731880621866105E-6	DESIGN
// eat it and try next	WITHOUT_CLASSIFICATION	0.9983324678179467	WITHOUT_CLASSIFICATION	0.0016675321820533323	DESIGN
// Otherwise, try to use the no-arg constructor	WITHOUT_CLASSIFICATION	0.9999980813982075	WITHOUT_CLASSIFICATION	1.9186017926025444E-6	DESIGN
// oracle sql-state code for deadlock	WITHOUT_CLASSIFICATION	0.9999980822960955	WITHOUT_CLASSIFICATION	1.9177039044338973E-6	DESIGN
// CollectionPropertyMapping processes everything except 'index'.	WITHOUT_CLASSIFICATION	0.9999999970078445	WITHOUT_CLASSIFICATION	2.992155468478027E-9	DESIGN
// remove initial ", "	WITHOUT_CLASSIFICATION	0.9999987628199253	WITHOUT_CLASSIFICATION	1.237180074730812E-6	DESIGN
// remove initial " and "	WITHOUT_CLASSIFICATION	0.9999974352548802	WITHOUT_CLASSIFICATION	2.564745119920489E-6	DESIGN
//beforeClassTokens.add("new"); DEFINITELY DON'T HAVE THIS!!	WITHOUT_CLASSIFICATION	0.9961813766228315	WITHOUT_CLASSIFICATION	0.0038186233771685062	DESIGN
//notAfterClassTokens.add(",");	WITHOUT_CLASSIFICATION	0.9999821294752248	WITHOUT_CLASSIFICATION	1.787052477519197E-5	DESIGN
// just especially for the trivial collection filter	WITHOUT_CLASSIFICATION	0.9999999580102766	WITHOUT_CLASSIFICATION	4.1989723384528244E-8	DESIGN
//update last non-whitespace token, if necessary	WITHOUT_CLASSIFICATION	0.9999991730012332	WITHOUT_CLASSIFICATION	8.26998766895911E-7	DESIGN
// select-range is terminated by declaration of "from"	WITHOUT_CLASSIFICATION	0.9999979721919916	WITHOUT_CLASSIFICATION	2.0278080084193577E-6	DESIGN
//scan for next non-whitespace token	WITHOUT_CLASSIFICATION	0.9999987611161557	WITHOUT_CLASSIFICATION	1.2388838442401529E-6	DESIGN
// Note this!!	WITHOUT_CLASSIFICATION	0.9987859023231789	WITHOUT_CLASSIFICATION	0.0012140976768211448	DESIGN
// Error message constants.	WITHOUT_CLASSIFICATION	0.999995246566237	WITHOUT_CLASSIFICATION	4.753433763012967E-6	DESIGN
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999950008243323	WITHOUT_CLASSIFICATION	4.9991756676239756E-6	DESIGN
// semantic action handling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9991742950521164	WITHOUT_CLASSIFICATION	8.257049478835004E-4	DESIGN
// Handle collection-fiter compilation. // IMPORTANT NOTE: This is modifying the INPUT (HQL) tree, not the output tree!	WITHOUT_CLASSIFICATION	0.8732282588060216	WITHOUT_CLASSIFICATION	0.12677174119397844	DESIGN
// Show the modified AST.	WITHOUT_CLASSIFICATION	0.9999596281632062	WITHOUT_CLASSIFICATION	4.0371836793858174E-5	DESIGN
// Create a parameter specification for the collection filter...	WITHOUT_CLASSIFICATION	0.9999978924791753	WITHOUT_CLASSIFICATION	2.1075208247060823E-6	DESIGN
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999993115166119	WITHOUT_CLASSIFICATION	6.884833880811894E-7	DESIGN
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999993115166119	WITHOUT_CLASSIFICATION	6.884833880811894E-7	DESIGN
// Get the names of the columns used to link between the collection // owner and the collection elements.	WITHOUT_CLASSIFICATION	0.9999944313837983	WITHOUT_CLASSIFICATION	5.5686162017634004E-6	DESIGN
// The path AST should be a DotNode, and it should have been evaluated already.	WITHOUT_CLASSIFICATION	0.999735314174753	WITHOUT_CLASSIFICATION	2.64685825246964E-4	DESIGN
// Tell the dot node about the join type.	WITHOUT_CLASSIFICATION	0.9999993837616687	WITHOUT_CLASSIFICATION	6.162383311650862E-7	DESIGN
// Re-arrange the tree so that the collection function is the root and the lhs is the path.	WITHOUT_CLASSIFICATION	0.9999984111216741	WITHOUT_CLASSIFICATION	1.5888783258411573E-6	DESIGN
// Don't forget to resolve the argument! // Resolve the collection function now.	WITHOUT_CLASSIFICATION	0.999999627009251	WITHOUT_CLASSIFICATION	3.7299074894600977E-7	DESIGN
// Resolve everything up to this dot, but don't resolve the placeholders yet.	WITHOUT_CLASSIFICATION	0.7535682512467791	WITHOUT_CLASSIFICATION	0.24643174875322096	DESIGN
// Should mean that no such property was found	WITHOUT_CLASSIFICATION	0.9992848672102365	WITHOUT_CLASSIFICATION	7.151327897634998E-4	DESIGN
// Was there an explicit select expression?	WITHOUT_CLASSIFICATION	0.9999992389549873	WITHOUT_CLASSIFICATION	7.610450127118988E-7	DESIGN
// Attach any mapping-defined "ORDER BY" fragments	WITHOUT_CLASSIFICATION	0.9999999946985568	WITHOUT_CLASSIFICATION	5.301443225464667E-9	DESIGN
// Use the explicitly declared select expression; determine the // return types indicated by each select token	WITHOUT_CLASSIFICATION	0.9999999789444599	WITHOUT_CLASSIFICATION	2.1055540095082088E-8	DESIGN
// After that, process the JOINs. // Invoke a delegate to do the work, as this is farily complex.	WITHOUT_CLASSIFICATION	0.999999994326751	WITHOUT_CLASSIFICATION	5.67324891525969E-9	DESIGN
// Make #@%$^#^&# sure no alias is applied to the table name	WITHOUT_CLASSIFICATION	0.9999987591553408	WITHOUT_CLASSIFICATION	1.2408446591975295E-6	DESIGN
// We need to generate ids as part of this bulk insert. // // Note that this is only supported for sequence-style generators and // post-insert-style generators; basically, only in-db generators	WITHOUT_CLASSIFICATION	0.9999999129046262	WITHOUT_CLASSIFICATION	8.709537385126916E-8	DESIGN
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999993115166119	WITHOUT_CLASSIFICATION	6.884833880811894E-7	DESIGN
// We need to seed the version value as part of this bulk insert	WITHOUT_CLASSIFICATION	0.9999966508308296	WITHOUT_CLASSIFICATION	3.3491691703739018E-6	DESIGN
// we need to wrtap the param in a cast()	WITHOUT_CLASSIFICATION	0.9993815534337548	WITHOUT_CLASSIFICATION	6.184465662452564E-4	DESIGN
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9991964284939131	WITHOUT_CLASSIFICATION	8.035715060868445E-4	DESIGN
// Generate implicit joins, only if necessary.	WITHOUT_CLASSIFICATION	0.9999907199922469	WITHOUT_CLASSIFICATION	9.280007753158034E-6	DESIGN
// Notify the FROM element that it is being referenced by the select.	WITHOUT_CLASSIFICATION	0.9999953138934975	WITHOUT_CLASSIFICATION	4.686106502496654E-6	DESIGN
// Turn off includeSubclasses on all FromElements.	WITHOUT_CLASSIFICATION	0.9999371879382632	WITHOUT_CLASSIFICATION	6.281206173670552E-5	DESIGN
// create the node initially with the param name so that it shows // appropriately in the "original text" attribute	WITHOUT_CLASSIFICATION	0.9997809801470213	WITHOUT_CLASSIFICATION	2.190198529787141E-4	DESIGN
// Use the delegate, resolve identifiers as FROM element aliases.	WITHOUT_CLASSIFICATION	0.9999976043399097	WITHOUT_CLASSIFICATION	2.395660090379778E-6	DESIGN
// select clauses for insert statements should alwasy be treated as shallow	WITHOUT_CLASSIFICATION	0.9999905076815089	WITHOUT_CLASSIFICATION	9.492318491181993E-6	DESIGN
// no need to even collect this information if the persister is considered multi-table	WITHOUT_CLASSIFICATION	0.9998257322833977	WITHOUT_CLASSIFICATION	1.7426771660230514E-4	DESIGN
// Make sure that the persister is versioned	WITHOUT_CLASSIFICATION	0.9998980777662058	WITHOUT_CLASSIFICATION	1.0192223379425509E-4	DESIGN
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999950008243323	WITHOUT_CLASSIFICATION	4.9991756676239756E-6	DESIGN
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999993115166119	WITHOUT_CLASSIFICATION	6.884833880811894E-7	DESIGN
// --Commented out by Inspection (12/11/04 10:56 AM): int getWarningCount();	WITHOUT_CLASSIFICATION	0.9999999997746607	WITHOUT_CLASSIFICATION	2.2533930563844752E-10	DESIGN
// Alias references and identifiers use the same node class.	WITHOUT_CLASSIFICATION	0.9999998673158724	WITHOUT_CLASSIFICATION	1.3268412767110326E-7	DESIGN
// switch	WITHOUT_CLASSIFICATION	0.9999851812020631	WITHOUT_CLASSIFICATION	1.4818797936872758E-5	DESIGN
// make a new one	WITHOUT_CLASSIFICATION	0.9999969703451622	WITHOUT_CLASSIFICATION	3.0296548378524416E-6	DESIGN
// just do the regular thing if you can't find the ctor // Your AST must have default ctor to use this.	WITHOUT_CLASSIFICATION	0.7560336302269871	WITHOUT_CLASSIFICATION	0.2439663697730128	DESIGN
// Initialize SQL nodes here.	WITHOUT_CLASSIFICATION	0.999999370623794	WITHOUT_CLASSIFICATION	6.293762061514237E-7	DESIGN
// semantic action processing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999777821321767	WITHOUT_CLASSIFICATION	2.2217867823280635E-5	DESIGN
// if template is null we just write the function out as it appears in the hql statement	WITHOUT_CLASSIFICATION	0.9999997778225264	WITHOUT_CLASSIFICATION	2.22177473703113E-7	DESIGN
// this function has a template -> redirect output and catch the arguments	WITHOUT_CLASSIFICATION	0.9999999985592417	WITHOUT_CLASSIFICATION	1.4407582837881812E-9	DESIGN
// --- Inner classes (moved here from sql-gen.g) ---	WITHOUT_CLASSIFICATION	0.9999975986650679	WITHOUT_CLASSIFICATION	2.40133493218189E-6	DESIGN
// check two "adjecent" nodes at the top of the from-clause tree	WITHOUT_CLASSIFICATION	0.9999999926005825	WITHOUT_CLASSIFICATION	7.399417592010156E-9	DESIGN
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9998519790339709	WITHOUT_CLASSIFICATION	1.480209660290664E-4	DESIGN
// these are just two unrelated table references	WITHOUT_CLASSIFICATION	0.9999973783669965	WITHOUT_CLASSIFICATION	2.621633003459371E-6	DESIGN
// again, both should be FromElements	WITHOUT_CLASSIFICATION	0.9999999043526954	WITHOUT_CLASSIFICATION	9.564730467248377E-8	DESIGN
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.99744524760664	WITHOUT_CLASSIFICATION	0.0025547523933599756	DESIGN
// right represents a joins originating from left; or // both right and left reprersent joins originating from the same FromElement	WITHOUT_CLASSIFICATION	0.9999997810294583	WITHOUT_CLASSIFICATION	2.1897054165581932E-7	DESIGN
// check a set of parent/child nodes in the from-clause tree // to determine if a comma is required between them	WITHOUT_CLASSIFICATION	0.9999999985114897	WITHOUT_CLASSIFICATION	1.488510265726558E-9	DESIGN
// right represents a joins originating from left...	WITHOUT_CLASSIFICATION	0.9999988258333915	WITHOUT_CLASSIFICATION	1.1741666085258687E-6	DESIGN
// all clear	WITHOUT_CLASSIFICATION	0.9999996633929782	WITHOUT_CLASSIFICATION	3.3660702179242435E-7	DESIGN
// Ignore the token class name parameter, and use a specific token class.	WITHOUT_CLASSIFICATION	0.9999999899145294	WITHOUT_CLASSIFICATION	1.0085470621285048E-8	DESIGN
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9997666531637381	WITHOUT_CLASSIFICATION	2.3334683626183652E-4	DESIGN
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9997666531637381	WITHOUT_CLASSIFICATION	2.3334683626183652E-4	DESIGN
// remember that ordinal parameters numbers are 1-based!!!	WITHOUT_CLASSIFICATION	0.9993500109461936	WITHOUT_CLASSIFICATION	6.499890538065171E-4	DESIGN
// don't care about other param types here, just those explicitly user-defined...	WITHOUT_CLASSIFICATION	0.9999921858542997	WITHOUT_CLASSIFICATION	7.814145700215537E-6	DESIGN
// If the query is already compiled, skip the compilation.	WITHOUT_CLASSIFICATION	0.9999999800131044	WITHOUT_CLASSIFICATION	1.9986895598313252E-8	DESIGN
// Remember the parameters for the compilation.	WITHOUT_CLASSIFICATION	0.999985125753087	WITHOUT_CLASSIFICATION	1.4874246913106884E-5	DESIGN
// PHASE 1 : Parse the HQL into an AST.	WITHOUT_CLASSIFICATION	0.9999786871507043	WITHOUT_CLASSIFICATION	2.131284929567079E-5	DESIGN
// PHASE 2 : Analyze the HQL AST, and produce an SQL AST.	WITHOUT_CLASSIFICATION	0.9999282700870564	WITHOUT_CLASSIFICATION	7.172991294355255E-5	DESIGN
// PHASE 3 : Generate the SQL.	WITHOUT_CLASSIFICATION	0.9941849899926587	WITHOUT_CLASSIFICATION	0.005815010007341221	DESIGN
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.99999999789979	WITHOUT_CLASSIFICATION	2.100209936313699E-9	DESIGN
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.99999999789979	WITHOUT_CLASSIFICATION	2.100209936313699E-9	DESIGN
//only needed during compilation phase...	WITHOUT_CLASSIFICATION	0.9999999065445947	WITHOUT_CLASSIFICATION	9.345540529390508E-8	DESIGN
// Transform the tree.	WITHOUT_CLASSIFICATION	0.9999992677913093	WITHOUT_CLASSIFICATION	7.32208690617598E-7	DESIGN
// Parse the query string into an HQL AST.	WITHOUT_CLASSIFICATION	0.9999839575807279	WITHOUT_CLASSIFICATION	1.6042419272114036E-5	DESIGN
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999775711547224	WITHOUT_CLASSIFICATION	2.242884527763816E-5	DESIGN
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999775711547224	WITHOUT_CLASSIFICATION	2.242884527763816E-5	DESIGN
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999775711547224	WITHOUT_CLASSIFICATION	2.242884527763816E-5	DESIGN
// NOTE : ( max - 1 ) because first is zero-based while max is not...	WITHOUT_CLASSIFICATION	0.9927734223018676	WITHOUT_CLASSIFICATION	0.007226577698132353	DESIGN
// -- Package local methods for the QueryLoader delegate --	WITHOUT_CLASSIFICATION	0.9999629819088504	WITHOUT_CLASSIFICATION	3.701809114967413E-5	DESIGN
// If there are no collection fetches, then no further checks are needed	WITHOUT_CLASSIFICATION	0.9999999811513921	WITHOUT_CLASSIFICATION	1.8848607926857183E-8	DESIGN
// A shallow query is ok (although technically there should be no fetching here...)	WITHOUT_CLASSIFICATION	0.9660634709526976	WITHOUT_CLASSIFICATION	0.033936529047302315	DESIGN
// should be the first, but just to be safe...	WITHOUT_CLASSIFICATION	0.9998766963600664	WITHOUT_CLASSIFICATION	1.2330363993366474E-4	DESIGN
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999993115166119	WITHOUT_CLASSIFICATION	6.884833880811894E-7	DESIGN
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999993115166119	WITHOUT_CLASSIFICATION	6.884833880811894E-7	DESIGN
// Impl Note: allows multiple collection fetches as long as the // entire fecthed graph still "points back" to a single // root entity for return	WITHOUT_CLASSIFICATION	0.9999996206403745	WITHOUT_CLASSIFICATION	3.793596255142274E-7	DESIGN
// Otherwise, we have a non-scalar select with defined collection fetch(es). // Make sure that there is only a single root entity in the return (no tuples)	WITHOUT_CLASSIFICATION	0.9995446317862501	WITHOUT_CLASSIFICATION	4.553682137499136E-4	DESIGN
// This is not strictly true.  We actually just need to make sure that // it is ordered by root-entity PK and that that order-by comes before // any non-root-entity ordering...	WITHOUT_CLASSIFICATION	0.999960874070271	WITHOUT_CLASSIFICATION	3.9125929728948806E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9966662531954268	WITHOUT_CLASSIFICATION	0.003333746804573307	DESIGN
// we are already processing a dot-structure	WITHOUT_CLASSIFICATION	0.9999912609337268	WITHOUT_CLASSIFICATION	8.739066273113542E-6	DESIGN
// igndore it...	WITHOUT_CLASSIFICATION	0.9999866855381292	WITHOUT_CLASSIFICATION	1.331446187082332E-5	DESIGN
// we are now at a new tree level	WITHOUT_CLASSIFICATION	0.9999999262057188	WITHOUT_CLASSIFICATION	7.379428122223792E-8	DESIGN
// [jsd] The fix for HHH-558...	WITHOUT_CLASSIFICATION	0.9885333862375949	WITHOUT_CLASSIFICATION	0.011466613762405058	DESIGN
// If the token can tell us if it could be an identifier...	WITHOUT_CLASSIFICATION	0.9998231056588177	WITHOUT_CLASSIFICATION	1.768943411822405E-4	DESIGN
// ... and the expected token type was an identifier, then:	WITHOUT_CLASSIFICATION	0.9999998417171101	WITHOUT_CLASSIFICATION	1.5828288996572967E-7	DESIGN
// Use the token as an identifier.	WITHOUT_CLASSIFICATION	0.9999999923927878	WITHOUT_CLASSIFICATION	7.607212096280413E-9	DESIGN
// Add the token to the AST.	WITHOUT_CLASSIFICATION	0.9999971187147462	WITHOUT_CLASSIFICATION	2.881285253848441E-6	DESIGN
// (NOT (EQ a b) ) => (NE a b)	WITHOUT_CLASSIFICATION	0.9999713550264312	WITHOUT_CLASSIFICATION	2.8644973568854734E-5	DESIGN
// (NOT (NE a b) ) => (EQ a b)	WITHOUT_CLASSIFICATION	0.9999713550264312	WITHOUT_CLASSIFICATION	2.8644973568854734E-5	DESIGN
// (NOT (LT a b) ) => (GE a b)	WITHOUT_CLASSIFICATION	0.9999746413097661	WITHOUT_CLASSIFICATION	2.5358690233867468E-5	DESIGN
// (NOT (GE a b) ) => (LT a b)	WITHOUT_CLASSIFICATION	0.9999746413097661	WITHOUT_CLASSIFICATION	2.5358690233867468E-5	DESIGN
// (NOT (LE a b) ) => (GT a b)	WITHOUT_CLASSIFICATION	0.999973781869085	WITHOUT_CLASSIFICATION	2.6218130914852464E-5	DESIGN
// (NOT (LIKE a b) ) => (NOT_LIKE a b)	WITHOUT_CLASSIFICATION	0.9999985399034728	WITHOUT_CLASSIFICATION	1.460096527268078E-6	DESIGN
// (NOT (NOT_LIKE a b) ) => (LIKE a b)	WITHOUT_CLASSIFICATION	0.9999985399034728	WITHOUT_CLASSIFICATION	1.460096527268078E-6	DESIGN
// (NOT (IS_NOT_NULL a b) ) => (IS_NULL a b)	WITHOUT_CLASSIFICATION	0.9999888170750965	WITHOUT_CLASSIFICATION	1.1182924903528718E-5	DESIGN
// (NOT (BETWEEN a b) ) => (NOT_BETWEEN a b)	WITHOUT_CLASSIFICATION	0.999996716792684	WITHOUT_CLASSIFICATION	3.283207316019449E-6	DESIGN
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999997714231132	WITHOUT_CLASSIFICATION	2.2857688673583325E-7	DESIGN
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9997666531637381	WITHOUT_CLASSIFICATION	2.3334683626183652E-4	DESIGN
// if // if // Otherwise, handle the error normally.	WITHOUT_CLASSIFICATION	0.9999915742981264	WITHOUT_CLASSIFICATION	8.425701873581812E-6	DESIGN
// (NOT (NOT_BETWEEN a b) ) => (BETWEEN a b)	WITHOUT_CLASSIFICATION	0.999996716792684	WITHOUT_CLASSIFICATION	3.283207316019449E-6	DESIGN
/* This can never happen because this rule will always eliminate the child NOT.	WITHOUT_CLASSIFICATION	0.9978172404554123	WITHOUT_CLASSIFICATION	0.0021827595445876495	DESIGN
// Just add a 'not' parent.	WITHOUT_CLASSIFICATION	0.9999665706004105	WITHOUT_CLASSIFICATION	3.342939958942254E-5	DESIGN
// (EQ NULL b) => (IS_NULL b)	WITHOUT_CLASSIFICATION	0.9999995887389113	WITHOUT_CLASSIFICATION	4.112610887470824E-7	DESIGN
// (EQ a NULL) => (IS_NULL a)	WITHOUT_CLASSIFICATION	0.9999995729317659	WITHOUT_CLASSIFICATION	4.270682341529599E-7	DESIGN
// NOTE: Because we're using ASTUtil.createParent(), the tree must be created from the bottom up. // IS EMPTY x => (EXISTS (QUERY (SELECT_FROM (FROM x) ) ) )	WITHOUT_CLASSIFICATION	0.9999981604776582	WITHOUT_CLASSIFICATION	1.839522341787678E-6	DESIGN
// Add NOT if it's negated.	WITHOUT_CLASSIFICATION	0.999822529668016	WITHOUT_CLASSIFICATION	1.7747033198390444E-4	DESIGN
// Create nodes that track line and column number.	WITHOUT_CLASSIFICATION	0.9999999518954017	WITHOUT_CLASSIFICATION	4.810459822494321E-8	DESIGN
// Case 1: Multi token keywords GROUP BY and ORDER BY // The next token ( LT(2) ) should be 'by'... otherwise, this is just an ident.	WITHOUT_CLASSIFICATION	0.9951320594497434	WITHOUT_CLASSIFICATION	0.004867940550256643	DESIGN
// Case 2: The current token is after FROM and before '.'.	WITHOUT_CLASSIFICATION	0.9999999623295599	WITHOUT_CLASSIFICATION	3.767043999290667E-8	DESIGN
// This handles HHH-354, where there is a strange property name in a where clause. // If the lookahead contains a DOT then something that isn't an IDENT...	WITHOUT_CLASSIFICATION	0.974075088514726	WITHOUT_CLASSIFICATION	0.02592491148527397	DESIGN
// See if the second lookahed token can be an identifier.	WITHOUT_CLASSIFICATION	0.9999999892275657	WITHOUT_CLASSIFICATION	1.0772434330064202E-8	DESIGN
// Set it!	WITHOUT_CLASSIFICATION	0.999939550238586	WITHOUT_CLASSIFICATION	6.044976141385996E-5	DESIGN
// ignore	WITHOUT_CLASSIFICATION	0.9999998176961284	WITHOUT_CLASSIFICATION	1.8230387158018292E-7	DESIGN
// strip the " where "	WITHOUT_CLASSIFICATION	0.9999920699196169	WITHOUT_CLASSIFICATION	7.930080383168978E-6	DESIGN
// Don't really know all the codes required to adequately decipher returned jdbc exceptions here. // simply allow the failure to be eaten and the subsequent insert-selects/deletes should fail	WITHOUT_CLASSIFICATION	0.9999990859480161	WITHOUT_CLASSIFICATION	9.140519837568561E-7	DESIGN
// at the very least cleanup the data :)	WITHOUT_CLASSIFICATION	0.9950986220530058	WITHOUT_CLASSIFICATION	0.0049013779469941465	DESIGN
// First, save off the pertinent ids, as the return value	WITHOUT_CLASSIFICATION	0.9999999015562874	WITHOUT_CLASSIFICATION	9.844371256995659E-8	DESIGN
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9998871703379626	WITHOUT_CLASSIFICATION	1.1282966203741523E-4	DESIGN
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9998871703379626	WITHOUT_CLASSIFICATION	1.1282966203741523E-4	DESIGN
// Start performing the updates	WITHOUT_CLASSIFICATION	0.9999993997662394	WITHOUT_CLASSIFICATION	6.002337606957691E-7	DESIGN
// First, save off the pertinent ids, saving the number of pertinent ids for return	WITHOUT_CLASSIFICATION	0.9999997628612339	WITHOUT_CLASSIFICATION	2.371387660113678E-7	DESIGN
// Start performing the deletes	WITHOUT_CLASSIFICATION	0.9999995561671939	WITHOUT_CLASSIFICATION	4.438328061442603E-7	DESIGN
// otherwise, everything ok.	WITHOUT_CLASSIFICATION	0.9999656208434943	WITHOUT_CLASSIFICATION	3.437915650582023E-5	DESIGN
// visit width-first, then depth	WITHOUT_CLASSIFICATION	0.9999709640886895	WITHOUT_CLASSIFICATION	2.9035911310506382E-5	DESIGN
// if the types report logical equivalence, return true...	WITHOUT_CLASSIFICATION	0.9999896695834758	WITHOUT_CLASSIFICATION	1.03304165242799E-5	DESIGN
// otherwise, perform a "deep equivalence" check...	WITHOUT_CLASSIFICATION	0.9999955070019151	WITHOUT_CLASSIFICATION	4.492998084915755E-6	DESIGN
// If there is no WHERE node, make one.	WITHOUT_CLASSIFICATION	0.9999997802115174	WITHOUT_CLASSIFICATION	2.1978848269202283E-7	DESIGN
// inject the WHERE after the parent	WITHOUT_CLASSIFICATION	0.9999790238131162	WITHOUT_CLASSIFICATION	2.097618688378102E-5	DESIGN
// Never include subclasses for implied from elements.	WITHOUT_CLASSIFICATION	0.9998128445348727	WITHOUT_CLASSIFICATION	1.8715546512721096E-4	DESIGN
// Moved here from SelectClause [jsd]	WITHOUT_CLASSIFICATION	0.999978851310195	WITHOUT_CLASSIFICATION	2.1148689804887288E-5	DESIGN
///////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9998519790339709	WITHOUT_CLASSIFICATION	1.480209660290664E-4	DESIGN
// Use the table fromElement and the property name to get the array of column names.	WITHOUT_CLASSIFICATION	0.9999966545486376	WITHOUT_CLASSIFICATION	3.345451362333143E-6	DESIGN
// Set the attributes of the property reference expression.	WITHOUT_CLASSIFICATION	0.999999423227255	WITHOUT_CLASSIFICATION	5.76772745043687E-7	DESIGN
// If the uresolved property path isn't set yet, just use the property name.	WITHOUT_CLASSIFICATION	0.999811558646198	WITHOUT_CLASSIFICATION	1.8844135380198453E-4	DESIGN
// The 'from element' that the property is in.	WITHOUT_CLASSIFICATION	0.9999864110208547	WITHOUT_CLASSIFICATION	1.3588979145243859E-5	DESIGN
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999999815760092	WITHOUT_CLASSIFICATION	1.842399070076226E-8	DESIGN
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999999815760092	WITHOUT_CLASSIFICATION	1.842399070076226E-8	DESIGN
// If this dot has already been resolved, stop now.	WITHOUT_CLASSIFICATION	0.9998717069940493	WITHOUT_CLASSIFICATION	1.2829300595071163E-4	DESIGN
// If there is no data type for this node, and we're at the end of the path (top most dot node), then // this might be a Java constant.	WITHOUT_CLASSIFICATION	0.9999339352695568	WITHOUT_CLASSIFICATION	6.606473044323758E-5	DESIGN
// The property is a collection...	WITHOUT_CLASSIFICATION	0.9999732300625804	WITHOUT_CLASSIFICATION	2.676993741960677E-5	DESIGN
// The property is a component...	WITHOUT_CLASSIFICATION	0.9999695747495173	WITHOUT_CLASSIFICATION	3.0425250482771444E-5	DESIGN
// The property is another class..	WITHOUT_CLASSIFICATION	0.9999407922188297	WITHOUT_CLASSIFICATION	5.920778117025254E-5	DESIGN
// Otherwise, this is a primitive type.	WITHOUT_CLASSIFICATION	0.999997623217853	WITHOUT_CLASSIFICATION	2.3767821469503783E-6	DESIGN
//foo.bars.size (also handles deprecated stuff like foo.bars.maxelement for backwardness)	WITHOUT_CLASSIFICATION	0.9978488150022923	WITHOUT_CLASSIFICATION	0.0021511849977077853	DESIGN
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999962761541977	WITHOUT_CLASSIFICATION	3.7238458022038823E-6	DESIGN
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999710286034187	WITHOUT_CLASSIFICATION	2.8971396581373465E-5	DESIGN
// in non-select queries, the only time we should need to join is if we are in a subquery from clause	WITHOUT_CLASSIFICATION	0.9999999977281533	WITHOUT_CLASSIFICATION	2.2718468124356315E-9	DESIGN
// this is the regression style determination which matches the logic of the classic translator	WITHOUT_CLASSIFICATION	0.9998967710251507	WITHOUT_CLASSIFICATION	1.0322897484928529E-4	DESIGN
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999962761541977	WITHOUT_CLASSIFICATION	3.7238458022038823E-6	DESIGN
// even though we might find a pre-existing element by join path, we may not be able to reuse it...	WITHOUT_CLASSIFICATION	0.536943018375556	DESIGN	0.4630569816244441	WITHOUT_CLASSIFICATION
// NOTE : addDuplicateAlias() already performs nullness checks on the alias.	WITHOUT_CLASSIFICATION	0.998450024331338	WITHOUT_CLASSIFICATION	0.0015499756686619707	DESIGN
// if the from-clauses are the same, we can be a little more aggressive in terms of what we reuse	WITHOUT_CLASSIFICATION	0.9951909816771772	WITHOUT_CLASSIFICATION	0.004809018322822847	DESIGN
// again, null != null here	WITHOUT_CLASSIFICATION	0.9999996731792493	WITHOUT_CLASSIFICATION	3.268207506662972E-7	DESIGN
// If this is an implied join in a from element, then use the impled join type which is part of the // tree parser's state (set by the gramamar actions).	WITHOUT_CLASSIFICATION	0.9999997484983046	WITHOUT_CLASSIFICATION	2.5150169535932647E-7	DESIGN
// otherwise (subquery case) dont reuse the fromElement if we are processing the from-clause of the subquery	WITHOUT_CLASSIFICATION	0.9999998570781042	WITHOUT_CLASSIFICATION	1.4292189568557463E-7	DESIGN
// we know only the lhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.999999681816789	WITHOUT_CLASSIFICATION	3.1818321097150037E-7	DESIGN
// the referenced node text is the special 'id'	WITHOUT_CLASSIFICATION	0.9999999630298685	WITHOUT_CLASSIFICATION	3.697013143507097E-8	DESIGN
// only the identifier property field name can be a reference to the associated entity's PK...	WITHOUT_CLASSIFICATION	0.9993336172776686	WITHOUT_CLASSIFICATION	6.663827223314863E-4	DESIGN
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9994577024578979	WITHOUT_CLASSIFICATION	5.42297542102037E-4	DESIGN
// Append the new property name onto the unresolved path.	WITHOUT_CLASSIFICATION	0.9999528769155779	WITHOUT_CLASSIFICATION	4.7123084422108006E-5	DESIGN
// If the lhs is a collection, use CollectionPropertyMapping	WITHOUT_CLASSIFICATION	0.9999984479471007	WITHOUT_CLASSIFICATION	1.5520528993295044E-6	DESIGN
// Tell the destination fromElement to 'includeSubclasses'.	WITHOUT_CLASSIFICATION	0.9999926129107306	WITHOUT_CLASSIFICATION	7.3870892693596535E-6	DESIGN
// Use theta style (for regression) // Move the node up, after the origin node.	WITHOUT_CLASSIFICATION	0.9999975584355716	WITHOUT_CLASSIFICATION	2.4415644283753823E-6	DESIGN
// Don't resolve the node again.	WITHOUT_CLASSIFICATION	0.9999970014067678	WITHOUT_CLASSIFICATION	2.998593232241696E-6	DESIGN
// for expected parameter type injection, we expect that the lhs represents // some form of property ref and that the children of the in-list represent // one-or-more params.	WITHOUT_CLASSIFICATION	0.9999980523309673	WITHOUT_CLASSIFICATION	1.9476690327467945E-6	DESIGN
// we need to strip off the embedded parens so that sql-gen does not double these up	WITHOUT_CLASSIFICATION	0.9999981133991587	WITHOUT_CLASSIFICATION	1.8866008413558528E-6	DESIGN
// we have something like : "? [op] rhs"	WITHOUT_CLASSIFICATION	0.9944871869377258	WITHOUT_CLASSIFICATION	0.005512813062274359	DESIGN
// we have something like : "lhs [op] ?"	WITHOUT_CLASSIFICATION	0.9992452805991983	WITHOUT_CLASSIFICATION	7.547194008018293E-4	DESIGN
// we know only the rhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999996995164147	WITHOUT_CLASSIFICATION	3.004835854282684E-7	DESIGN
// handle the (assumed) valid cases: // #1 - the only valid datetime addition synatx is one or the other is a datetime (but not both)	WITHOUT_CLASSIFICATION	0.9999710508242042	WITHOUT_CLASSIFICATION	2.8949175795733432E-5	DESIGN
// one or the other needs to be a datetime for us to get into this method in the first place...	WITHOUT_CLASSIFICATION	0.6586002963508086	DESIGN	0.34139970364919126	WITHOUT_CLASSIFICATION
// #3 - note that this is also true of "datetime - :param"...	WITHOUT_CLASSIFICATION	0.9999120535249943	WITHOUT_CLASSIFICATION	8.794647500564055E-5	DESIGN
// #2	WITHOUT_CLASSIFICATION	0.9999983195827506	WITHOUT_CLASSIFICATION	1.6804172492445213E-6	DESIGN
// Generate the inner join -- The elements need to be joined to the collection they are in.	WITHOUT_CLASSIFICATION	0.9999999383026181	WITHOUT_CLASSIFICATION	6.169738180085906E-8	DESIGN
// nothing to do	WITHOUT_CLASSIFICATION	0.9999702959649172	WITHOUT_CLASSIFICATION	2.9704035082844225E-5	DESIGN
// The 'from element' that represents the elements of the collection.	WITHOUT_CLASSIFICATION	0.9999954296167801	WITHOUT_CLASSIFICATION	4.570383219946657E-6	DESIGN
// Add the condition to the join sequence that qualifies the indexed element.	WITHOUT_CLASSIFICATION	0.9999999643175829	WITHOUT_CLASSIFICATION	3.5682417060609316E-8	DESIGN
// Sometimes use the element table alias, sometimes use the... umm... collection table alias (many to many)	WITHOUT_CLASSIFICATION	0.9999992928946954	WITHOUT_CLASSIFICATION	7.071053046569353E-7	DESIGN
// Now, set the text for this node.  It should be the element columns.	WITHOUT_CLASSIFICATION	0.9684178071922303	WITHOUT_CLASSIFICATION	0.0315821928077698	DESIGN
// Get the function return value type, based on the type of the first argument.	WITHOUT_CLASSIFICATION	0.9999999992592028	WITHOUT_CLASSIFICATION	7.407971578524217E-10	DESIGN
// This will call initialize(tok)!	WITHOUT_CLASSIFICATION	0.9999484235212336	WITHOUT_CLASSIFICATION	5.157647876644633E-5	DESIGN
// mutation depends on the types of nodes invloved...	WITHOUT_CLASSIFICATION	0.9999925716234266	WITHOUT_CLASSIFICATION	7.428376573469304E-6	DESIGN
// "pass along" our initial embedded parameter node(s) to the first generated // sql fragment so that it can be handled later for parameter binding...	WITHOUT_CLASSIFICATION	0.9988015717856222	WITHOUT_CLASSIFICATION	0.001198428214377771	DESIGN
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999864671089548	WITHOUT_CLASSIFICATION	1.3532891045213632E-5	DESIGN
// Generated select expressions are already resolved, nothing to do.	WITHOUT_CLASSIFICATION	0.9999998556454522	WITHOUT_CLASSIFICATION	1.443545478184891E-7	DESIGN
// The path may be a reference to an alias defined in the parent query.	WITHOUT_CLASSIFICATION	0.9996757150615994	WITHOUT_CLASSIFICATION	3.242849384006366E-4	DESIGN
// The HQL class alias refers to the class name.	WITHOUT_CLASSIFICATION	0.999999928676304	WITHOUT_CLASSIFICATION	7.13236958643921E-8	DESIGN
// Associate the table alias with the element.	WITHOUT_CLASSIFICATION	0.9999999621063839	WITHOUT_CLASSIFICATION	3.789361626507506E-8	DESIGN
// try the parent FromClause...	WITHOUT_CLASSIFICATION	0.9999962432230739	WITHOUT_CLASSIFICATION	3.7567769259806446E-6	DESIGN
// Add the new node to the map so that we don't create it twice.	WITHOUT_CLASSIFICATION	0.999999960251601	WITHOUT_CLASSIFICATION	3.97483990068658E-8	DESIGN
// Make sure that all from elements registered with this FROM clause are actually in the AST.	WITHOUT_CLASSIFICATION	0.9999996180102182	WITHOUT_CLASSIFICATION	3.819897818643601E-7	DESIGN
// Invoke setScalarColumnText on each constructor argument.	WITHOUT_CLASSIFICATION	0.999989733960758	WITHOUT_CLASSIFICATION	1.02660392420202E-5	DESIGN
// Collect the select expressions, skip the first child because it is the class name.	WITHOUT_CLASSIFICATION	0.9999999658261141	WITHOUT_CLASSIFICATION	3.417388583448469E-8	DESIGN
// return an empty Type array	WITHOUT_CLASSIFICATION	0.999958751326736	WITHOUT_CLASSIFICATION	4.1248673263972156E-5	DESIGN
// Constructors are always considered scalar results.	WITHOUT_CLASSIFICATION	0.9989645147745391	WITHOUT_CLASSIFICATION	0.0010354852254608915	DESIGN
// this is the exception returned by ReflectHelper.getConstructor() if it cannot // locate an appropriate constructor	WITHOUT_CLASSIFICATION	0.9999929336892766	WITHOUT_CLASSIFICATION	7.066310723477699E-6	DESIGN
// if there is no order by, make one	WITHOUT_CLASSIFICATION	0.9999983081935977	WITHOUT_CLASSIFICATION	1.691806402309659E-6	DESIGN
// Find the WHERE; if there is no WHERE, find the FROM...	WITHOUT_CLASSIFICATION	0.9999991054720372	WITHOUT_CLASSIFICATION	8.945279628738294E-7	DESIGN
// Now, inject the newly built ORDER BY into the tree	WITHOUT_CLASSIFICATION	0.9999626657472418	WITHOUT_CLASSIFICATION	3.733425275810787E-5	DESIGN
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999980316084949	WITHOUT_CLASSIFICATION	1.9683915051200263E-6	DESIGN
// logic operators by definition resolve to boolean.	WITHOUT_CLASSIFICATION	0.9999853738219292	WITHOUT_CLASSIFICATION	1.4626178070914488E-5	DESIGN
// Render the identifier select fragment using the table alias.	WITHOUT_CLASSIFICATION	0.9999689161986308	WITHOUT_CLASSIFICATION	3.1083801369214775E-5	DESIGN
// Class names in the FROM clause result in a JoinSequence (the old FromParser does this).	WITHOUT_CLASSIFICATION	0.9999999523965163	WITHOUT_CLASSIFICATION	4.760348377573467E-8	DESIGN
// For many-to-many joins, use the tablename from the queryable collection for the default text.	WITHOUT_CLASSIFICATION	0.9999998324587581	WITHOUT_CLASSIFICATION	1.6754124188766065E-7	DESIGN
// Otherwise, use the property mapping.	WITHOUT_CLASSIFICATION	0.9999999200844192	WITHOUT_CLASSIFICATION	7.99155809052577E-8	DESIGN
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9999896396331601	WITHOUT_CLASSIFICATION	1.0360366839891176E-5	DESIGN
// If the property is a special collection property name, return a CollectionPropertyMapping.	WITHOUT_CLASSIFICATION	0.9999999089119519	WITHOUT_CLASSIFICATION	9.108804809542581E-8	DESIGN
// Collection of components.	WITHOUT_CLASSIFICATION	0.9999780193118779	WITHOUT_CLASSIFICATION	2.1980688122092005E-5	DESIGN
// make sure the lhs is "assignable"...	WITHOUT_CLASSIFICATION	0.9999997822045051	WITHOUT_CLASSIFICATION	2.1779549490181831E-7	DESIGN
// false indicates to not generate parens around the assignment	WITHOUT_CLASSIFICATION	0.9999645395117446	WITHOUT_CLASSIFICATION	3.546048825542185E-5	DESIGN
// Register the FromElement with the FROM clause, now that we have the names and aliases.	WITHOUT_CLASSIFICATION	0.9999983023920211	WITHOUT_CLASSIFICATION	1.6976079788807739E-6	DESIGN
// currently allowed...	WITHOUT_CLASSIFICATION	0.9999080574659083	WITHOUT_CLASSIFICATION	9.194253409179666E-5	DESIGN
// HHH-276 : implied joins in a subselect where clause - The destination needs to be added // to the destination's from clause. // Not sure if this is will fix everything, but it works.	WITHOUT_CLASSIFICATION	0.9831342934981105	DESIGN	0.016865706501889458	WITHOUT_CLASSIFICATION
//return classAlias == null ? className : classAlias;	WITHOUT_CLASSIFICATION	0.996812161326283	WITHOUT_CLASSIFICATION	0.0031878386737170072	DESIGN
// This is an explicit FROM element.	WITHOUT_CLASSIFICATION	0.9999767502855063	WITHOUT_CLASSIFICATION	2.3249714493672456E-5	DESIGN
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999980316084949	WITHOUT_CLASSIFICATION	1.9683915051200263E-6	DESIGN
// Fetch can't be used with scroll() or iterate().	WITHOUT_CLASSIFICATION	0.99999368333624	WITHOUT_CLASSIFICATION	6.316663760014008E-6	DESIGN
// If it's not implied or it is implied and it's a many to many join where the target wasn't found.	WITHOUT_CLASSIFICATION	0.9999999958202358	WITHOUT_CLASSIFICATION	4.179764224551223E-9	DESIGN
// Since this is an explicit FROM element, it can't be implied in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999633578191369	WITHOUT_CLASSIFICATION	3.6642180863212664E-5	DESIGN
// Do nothing, eplicit from elements are *always* in the projection list.	WITHOUT_CLASSIFICATION	0.9999863398244911	WITHOUT_CLASSIFICATION	1.3660175508869976E-5	DESIGN
// propertyName refers to something like collection.size...	WITHOUT_CLASSIFICATION	0.9999923381581294	WITHOUT_CLASSIFICATION	7.66184187058351E-6	DESIGN
// property name is a sub-path of a component...	WITHOUT_CLASSIFICATION	0.9999850630703023	WITHOUT_CLASSIFICATION	1.4936929697743274E-5	DESIGN
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999710286034187	WITHOUT_CLASSIFICATION	2.8971396581373465E-5	DESIGN
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9843238715282769	WITHOUT_CLASSIFICATION	0.015676128471723127	DESIGN
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999864671089548	WITHOUT_CLASSIFICATION	1.3532891045213632E-5	DESIGN
// DotNode uses null here...	WITHOUT_CLASSIFICATION	0.971336891269959	WITHOUT_CLASSIFICATION	0.028663108730040975	DESIGN
// We represent a from-clause alias	WITHOUT_CLASSIFICATION	0.9999998523829621	WITHOUT_CLASSIFICATION	1.4761703779205637E-7	DESIGN
// we are the LHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.999999668809045	WITHOUT_CLASSIFICATION	3.3119095487569057E-7	DESIGN
// we are the RHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999994986717738	WITHOUT_CLASSIFICATION	5.013282262042402E-7	DESIGN
// we represent a naked (simple) prop-ref	WITHOUT_CLASSIFICATION	0.9999638855065952	WITHOUT_CLASSIFICATION	3.611449340484129E-5	DESIGN
// EARLY EXIT!!!  return so the resolve call explicitly coming from DotNode can // resolve this...	WITHOUT_CLASSIFICATION	0.9169108458150648	WITHOUT_CLASSIFICATION	0.08308915418493523	DESIGN
// assume this ident's text does *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9994660205445213	WITHOUT_CLASSIFICATION	5.339794554787949E-4	DESIGN
// just ignore it for now, it'll get resolved later...	WITHOUT_CLASSIFICATION	0.9959801317573456	WITHOUT_CLASSIFICATION	0.00401986824265446	DESIGN
// This is not actually a constant, but a reference to FROM element.	WITHOUT_CLASSIFICATION	0.9994638963285706	WITHOUT_CLASSIFICATION	5.361036714293456E-4	DESIGN
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999997430009393	WITHOUT_CLASSIFICATION	2.5699906068631354E-7	DESIGN
// these pieces are needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9999811052883875	WITHOUT_CLASSIFICATION	1.8894711612551582E-5	DESIGN
// used to set the type of the parent dot node	WITHOUT_CLASSIFICATION	0.9995284941265112	WITHOUT_CLASSIFICATION	4.715058734888009E-4	DESIGN
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9998070659958572	WITHOUT_CLASSIFICATION	1.929340041428716E-4	DESIGN
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9998070659958572	WITHOUT_CLASSIFICATION	1.929340041428716E-4	DESIGN
// naked property-refs cannot be used with an aliased from element	WITHOUT_CLASSIFICATION	0.99988903467108	WITHOUT_CLASSIFICATION	1.109653289199835E-4	DESIGN
// this piece is needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9999989284734654	WITHOUT_CLASSIFICATION	1.0715265346468618E-6	DESIGN
// do *not* over-write the column text, as that has already been // "rendered" during resolve	WITHOUT_CLASSIFICATION	0.9999997323921952	WITHOUT_CLASSIFICATION	2.6760780479234133E-7	DESIGN
// for some reason the antlr.CommonAST initialization routines force // this method to get called twice.  The first time with an empty string	WITHOUT_CLASSIFICATION	0.9999919345956497	WITHOUT_CLASSIFICATION	8.065404350285393E-6	DESIGN
// Look up class name using the first identifier in the path.	WITHOUT_CLASSIFICATION	0.9999943645125008	WITHOUT_CLASSIFICATION	5.635487499210484E-6	DESIGN
// Add to the query spaces.	WITHOUT_CLASSIFICATION	0.999844591408537	WITHOUT_CLASSIFICATION	1.5540859146298292E-4	DESIGN
// If the from element isn't in the same clause, create a new from element.	WITHOUT_CLASSIFICATION	0.9999994148994109	WITHOUT_CLASSIFICATION	5.851005890320665E-7	DESIGN
// This is the root level node. // Generate an explicit from clause at the root.	WITHOUT_CLASSIFICATION	0.9999771569606825	WITHOUT_CLASSIFICATION	2.28430393175244E-5	DESIGN
// Correlated subqueries create 'special' implied from nodes // because correlated subselects can't use an ANSI-style join	WITHOUT_CLASSIFICATION	0.9999982149779072	WITHOUT_CLASSIFICATION	1.785022092806172E-6	DESIGN
// super-duper-classic-parser-regression-testing-mojo-magic...	WITHOUT_CLASSIFICATION	0.9999869316336873	WITHOUT_CLASSIFICATION	1.3068366312653815E-5	DESIGN
// A collection of entities...	WITHOUT_CLASSIFICATION	0.9999736481372273	WITHOUT_CLASSIFICATION	2.6351862772654842E-5	DESIGN
// A collection of components...	WITHOUT_CLASSIFICATION	0.9999997733182884	WITHOUT_CLASSIFICATION	2.2668171158866567E-7	DESIGN
// A collection of scalar elements...	WITHOUT_CLASSIFICATION	0.9999997233929642	WITHOUT_CLASSIFICATION	2.7660703581425503E-7	DESIGN
// according to both the ANSI-SQL and EJB3 specs, trim can either take // exactly one parameter or a variable number of parameters between 1 and 4. // from the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If only <trim specification> is omitted, BOTH is assumed; // if <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999999999998658	WITHOUT_CLASSIFICATION	1.3418330097537065E-13	DESIGN
// Don't include sub-classes for implied collection joins or subquery joins.	WITHOUT_CLASSIFICATION	0.9990826589553591	WITHOUT_CLASSIFICATION	9.173410446409128E-4	DESIGN
// Treat explict from elements in sub-queries properly.	WITHOUT_CLASSIFICATION	0.9999930407750754	WITHOUT_CLASSIFICATION	6.959224924608788E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.9966662531954268	WITHOUT_CLASSIFICATION	0.003333746804573307	DESIGN
// the "root from-element" in correlated subqueries do need this piece	WITHOUT_CLASSIFICATION	0.9970880262097688	WITHOUT_CLASSIFICATION	0.0029119737902312598	DESIGN
// Create the FROM element for the target (the elements of the collection).	WITHOUT_CLASSIFICATION	0.9999999997382479	WITHOUT_CLASSIFICATION	2.617520404321505E-10	DESIGN
// If the join is implied, then don't include sub-classes on the element.	WITHOUT_CLASSIFICATION	0.9999999259316743	WITHOUT_CLASSIFICATION	7.40683257080052E-8	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999981301203386	WITHOUT_CLASSIFICATION	1.8698796613662815E-6	DESIGN
// The associated entity is implied, but it must be included in the FROM. // The collection alias is the role.	WITHOUT_CLASSIFICATION	0.9998564821255502	WITHOUT_CLASSIFICATION	1.4351787444982997E-4	DESIGN
// Tag this node as a JOIN. // Don't include subclasses in the join. // This is a clollection join.	WITHOUT_CLASSIFICATION	0.9999969029040238	WITHOUT_CLASSIFICATION	3.097095976333161E-6	DESIGN
// Get the class name of the associated entity.	WITHOUT_CLASSIFICATION	0.9999724315904163	WITHOUT_CLASSIFICATION	2.756840958372202E-5	DESIGN
//  origin, path, implied, columns, classAlias,	WITHOUT_CLASSIFICATION	0.9999992310567609	WITHOUT_CLASSIFICATION	7.689432391368787E-7	DESIGN
/*implied*/	WITHOUT_CLASSIFICATION	0.9992792709999887	WITHOUT_CLASSIFICATION	7.207290000113408E-4	DESIGN
// For implied many-to-many, just add the end join.	WITHOUT_CLASSIFICATION	0.9999960151393427	WITHOUT_CLASSIFICATION	3.984860657340365E-6	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999981301203386	WITHOUT_CLASSIFICATION	1.8698796613662815E-6	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999981301203386	WITHOUT_CLASSIFICATION	1.8698796613662815E-6	DESIGN
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999996428056573	WITHOUT_CLASSIFICATION	3.571943427129444E-7	DESIGN
// This causes the factory to instantiate the desired class.	WITHOUT_CLASSIFICATION	0.9999949678007193	WITHOUT_CLASSIFICATION	5.032199280685151E-6	DESIGN
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9996606701864167	WITHOUT_CLASSIFICATION	3.393298135833713E-4	DESIGN
// Frontbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999650944269485	WITHOUT_CLASSIFICATION	3.4905573051548554E-5	DESIGN
/*	WITHOUT_CLASSIFICATION	0.9420771668041136	WITHOUT_CLASSIFICATION	0.05792283319588644	DESIGN
/*public Type[] getSqlResultTypes() {	WITHOUT_CLASSIFICATION	0.5138377315371302	DESIGN	0.48616226846286986	WITHOUT_CLASSIFICATION
// First, collect all of the select expressions. // NOTE: This must be done *before* invoking setScalarColumnText() because setScalarColumnText() // changes the AST!!!	WITHOUT_CLASSIFICATION	0.9999877865906521	WITHOUT_CLASSIFICATION	1.2213409348013443E-5	DESIGN
// First allow the actual type to control the return value. (the actual underlying sqltype could actually be different)	WITHOUT_CLASSIFICATION	0.999942394782855	WITHOUT_CLASSIFICATION	5.7605217144905946E-5	DESIGN
//sqlResultTypeList.addAll( constructorArgumentTypeList );	WITHOUT_CLASSIFICATION	0.9998976637891186	WITHOUT_CLASSIFICATION	1.0233621088140024E-4	DESIGN
// If the data type is not an association type, it could not have been in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999998369733322	WITHOUT_CLASSIFICATION	1.630266677985045E-7	DESIGN
//sqlResultTypeList.add( type );	WITHOUT_CLASSIFICATION	0.9999675491115522	WITHOUT_CLASSIFICATION	3.2450888447910025E-5	DESIGN
// Always add the type to the return type list.	WITHOUT_CLASSIFICATION	0.9999885502963489	WITHOUT_CLASSIFICATION	1.1449703651099427E-5	DESIGN
// add the fetched entities	WITHOUT_CLASSIFICATION	0.999993815905969	WITHOUT_CLASSIFICATION	6.184094030939052E-6	DESIGN
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.999999869350375	WITHOUT_CLASSIFICATION	1.3064962508875784E-7	DESIGN
// function support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999660696414654	WITHOUT_CLASSIFICATION	3.3930358534569366E-5	DESIGN
// If there are any scalars (non-entities) selected, render the select column aliases.	WITHOUT_CLASSIFICATION	0.9999999987400433	WITHOUT_CLASSIFICATION	1.2599567147460626E-9	DESIGN
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9999414769123106	WITHOUT_CLASSIFICATION	5.852308768942169E-5	DESIGN
/*ArrayList sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9999998094675864	WITHOUT_CLASSIFICATION	1.905324136059094E-7	DESIGN
//sqlResultTypes = ( Type[] ) sqlResultTypeList.toArray( new Type[sqlResultTypeList.size()] );	WITHOUT_CLASSIFICATION	0.9999997649216219	WITHOUT_CLASSIFICATION	2.350783780921193E-7	DESIGN
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999921697505728	WITHOUT_CLASSIFICATION	7.830249427211163E-6	DESIGN
//TODO:	WITHOUT_CLASSIFICATION	0.9895680036876573	WITHOUT_CLASSIFICATION	0.010431996312342727	DESIGN
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999965251944113	WITHOUT_CLASSIFICATION	3.474805588683976E-6	DESIGN
// Generate an 2d array of column names, the first dimension is parallel with the // return types array.  The second dimension is the list of column names for each // type.	WITHOUT_CLASSIFICATION	0.9999999975900284	WITHOUT_CLASSIFICATION	2.4099714699943514E-9	DESIGN
// Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999999958814281	WITHOUT_CLASSIFICATION	4.1185719178826576E-9	DESIGN
// union subclass support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999884160366195	WITHOUT_CLASSIFICATION	1.1583963380510071E-4	DESIGN
// Skip 'DISTINCT' and 'ALL', so we return the first expression node.	WITHOUT_CLASSIFICATION	0.9999990792158759	WITHOUT_CLASSIFICATION	9.20784123993175E-7	DESIGN
// Create SQL_TOKEN nodes for the columns.	WITHOUT_CLASSIFICATION	0.9999989580699667	WITHOUT_CLASSIFICATION	1.0419300332277952E-6	DESIGN
// Generate the property select tokens.	WITHOUT_CLASSIFICATION	0.9999980981527926	WITHOUT_CLASSIFICATION	1.901847207333025E-6	DESIGN
// Get the function name node.	WITHOUT_CLASSIFICATION	0.9999989054504634	WITHOUT_CLASSIFICATION	1.0945495365879628E-6	DESIGN
// Method expressions in a SELECT should always be considered scalar.	WITHOUT_CLASSIFICATION	0.9994175154942624	WITHOUT_CLASSIFICATION	5.824845057375761E-4	DESIGN
// If this is 'elements' then create a new FROM element.	WITHOUT_CLASSIFICATION	0.9999998672628542	WITHOUT_CLASSIFICATION	1.3273714582614803E-7	DESIGN
// Not elements(x)	WITHOUT_CLASSIFICATION	0.9999621515616594	WITHOUT_CLASSIFICATION	3.7848438340713764E-5	DESIGN
// Dialect function	WITHOUT_CLASSIFICATION	0.99999907073997	WITHOUT_CLASSIFICATION	9.292600299325708E-7	DESIGN
// Collection 'property function'	WITHOUT_CLASSIFICATION	0.9999979245361743	WITHOUT_CLASSIFICATION	2.0754638257411837E-6	DESIGN
// If the constant is an IDENT, figure out what it means...	WITHOUT_CLASSIFICATION	0.9999664542409022	WITHOUT_CLASSIFICATION	3.3545759097780766E-5	DESIGN
// IDENT is a class alias in the FROM.	WITHOUT_CLASSIFICATION	0.9999996965377097	WITHOUT_CLASSIFICATION	3.034622902097189E-7	DESIGN
// Resolve to an identity column.	WITHOUT_CLASSIFICATION	0.9960813039684441	WITHOUT_CLASSIFICATION	0.003918696031555814	DESIGN
// Otherwise, it's a literal.	WITHOUT_CLASSIFICATION	0.9999925496939474	WITHOUT_CLASSIFICATION	7.450306052616852E-6	DESIGN
// the name of an entity class	WITHOUT_CLASSIFICATION	0.9999363038052234	WITHOUT_CLASSIFICATION	6.369619477668136E-5	DESIGN
//the class discriminator value	WITHOUT_CLASSIFICATION	0.999971552800815	WITHOUT_CLASSIFICATION	2.8447199185111415E-5	DESIGN
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999999568200346	WITHOUT_CLASSIFICATION	4.317996528794524E-8	DESIGN
// Add a space before the display text.	WITHOUT_CLASSIFICATION	0.9999998640640687	WITHOUT_CLASSIFICATION	1.3593593135382297E-7	DESIGN
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999999955628484	WITHOUT_CLASSIFICATION	4.43715161132723E-9	DESIGN
// child == parent.getFirstChild()	WITHOUT_CLASSIFICATION	0.9999999931993117	WITHOUT_CLASSIFICATION	6.800688323431861E-9	DESIGN
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999999955628484	WITHOUT_CLASSIFICATION	4.43715161132723E-9	DESIGN
// Filter conditions need to be inserted before the HQL where condition and the // theta join node.  This is because org.hibernate.loader.Loader binds the filter parameters first, // then it binds all the HQL query parameters, see org.hibernate.loader.Loader.processFilterParameters().	WITHOUT_CLASSIFICATION	0.9999796142426394	WITHOUT_CLASSIFICATION	2.038575736061258E-5	DESIGN
// Put the FILTERS node before the HQL condition and theta joins	WITHOUT_CLASSIFICATION	0.9999943790698338	WITHOUT_CLASSIFICATION	5.620930166162674E-6	DESIGN
// add the current fragment to the FILTERS node	WITHOUT_CLASSIFICATION	0.9999965421523457	WITHOUT_CLASSIFICATION	3.457847654465764E-6	DESIGN
// Create a new THETA_JOINS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999999892050816	WITHOUT_CLASSIFICATION	1.0794918368902114E-8	DESIGN
// Put the THETA_JOINS node before the HQL condition, after the filters.	WITHOUT_CLASSIFICATION	0.9999965554672444	WITHOUT_CLASSIFICATION	3.4445327556983314E-6	DESIGN
// add the current fragment to the THETA_JOINS node	WITHOUT_CLASSIFICATION	0.9999993107431076	WITHOUT_CLASSIFICATION	6.892568924741008E-7	DESIGN
// First, try to get the persister using the given name directly.	WITHOUT_CLASSIFICATION	0.9999911930575407	WITHOUT_CLASSIFICATION	8.806942459192578E-6	DESIGN
// unable to locate it using this name	WITHOUT_CLASSIFICATION	0.9995709874012393	WITHOUT_CLASSIFICATION	4.290125987607535E-4	DESIGN
// If that didn't work, try using the 'import' name.	WITHOUT_CLASSIFICATION	0.999957697053059	WITHOUT_CLASSIFICATION	4.2302946940933946E-5	DESIGN
// Implicit joins use theta style (WHERE pk = fk), explicit joins use JOIN (after from)	WITHOUT_CLASSIFICATION	0.9999999274316892	WITHOUT_CLASSIFICATION	7.256831090956032E-8	DESIGN
// locate the registered function by the given name	WITHOUT_CLASSIFICATION	0.9999999786162279	WITHOUT_CLASSIFICATION	2.138377203746835E-8	DESIGN
// determine the type of the first argument...	WITHOUT_CLASSIFICATION	0.9999903728662185	WITHOUT_CLASSIFICATION	9.627133781533871E-6	DESIGN
// Use the DOT node to emit the first column name. // Create the column names, folled by the column aliases.	WITHOUT_CLASSIFICATION	0.9999999652766006	WITHOUT_CLASSIFICATION	3.472339935956316E-8	DESIGN
// Note: this simply constructs a "raw" SQL_TOKEN representing the // where fragment and injects this into the tree.  This "works"; // however it is probably not the best long-term solution. // // At some point we probably want to apply an additional grammar to // properly tokenize this where fragment into constituent parts // focused on the operators embedded within the fragment.	WITHOUT_CLASSIFICATION	0.9999961239578511	DESIGN	3.8760421488523335E-6	WITHOUT_CLASSIFICATION
// Append the text of the current node.	WITHOUT_CLASSIFICATION	0.9999998101748429	WITHOUT_CLASSIFICATION	1.8982515725362883E-7	DESIGN
// If the node has a first child, recurse into the first child.	WITHOUT_CLASSIFICATION	0.9999999994097358	WITHOUT_CLASSIFICATION	5.902641214671788E-10	DESIGN
// If there is a second child (RHS), recurse into that child.	WITHOUT_CLASSIFICATION	0.9999985413135348	WITHOUT_CLASSIFICATION	1.4586864651950544E-6	DESIGN
// Iterate through the alias,JoinSequence pairs and generate SQL token nodes.	WITHOUT_CLASSIFICATION	0.9999976642731899	WITHOUT_CLASSIFICATION	2.3357268100365956E-6	DESIGN
// If the from element represents a JOIN_FRAGMENT and it is // a theta-style join, convert its type from JOIN_FRAGMENT // to FROM_FRAGMENT	WITHOUT_CLASSIFICATION	0.9999999677782943	WITHOUT_CLASSIFICATION	3.2221705796171746E-8	DESIGN
// this is used during SqlGenerator processing	WITHOUT_CLASSIFICATION	0.9997303905433094	WITHOUT_CLASSIFICATION	2.6960945669066177E-4	DESIGN
// If there is a FROM fragment and the FROM element is an explicit, then add the from part.	WITHOUT_CLASSIFICATION	0.9999973728545603	WITHOUT_CLASSIFICATION	2.6271454397837503E-6	DESIGN
/*&& StringHelper.isNotEmpty( frag )*/	WITHOUT_CLASSIFICATION	0.9999575960721168	WITHOUT_CLASSIFICATION	4.240392788322876E-5	DESIGN
// The FROM fragment will probably begin with ', '.  Remove this if it is present.	WITHOUT_CLASSIFICATION	0.9658348866388289	WITHOUT_CLASSIFICATION	0.03416511336117118	DESIGN
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9999366360222806	WITHOUT_CLASSIFICATION	6.336397771945914E-5	DESIGN
// SELECT p FROM p IN CLASS eg.Person ORDER BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999996336805554	WITHOUT_CLASSIFICATION	3.6631944458290283E-7	DESIGN
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.9992624223165643	WITHOUT_CLASSIFICATION	7.375776834356349E-4	DESIGN
//named query parameter	WITHOUT_CLASSIFICATION	0.9993589725873858	WITHOUT_CLASSIFICATION	6.410274126142239E-4	DESIGN
//default mode	WITHOUT_CLASSIFICATION	0.9999940427601915	WITHOUT_CLASSIFICATION	5.957239808425872E-6	DESIGN
//QueryJoinFragment join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999994379165247	WITHOUT_CLASSIFICATION	5.62083475344155E-7	DESIGN
//reset the dotcount (but not the path) //after reset!	WITHOUT_CLASSIFICATION	0.9999971653222633	WITHOUT_CLASSIFICATION	2.8346777367853764E-6	DESIGN
//after reset!	WITHOUT_CLASSIFICATION	0.9999948115821471	WITHOUT_CLASSIFICATION	5.188417852897488E-6	DESIGN
// we don't need to worry about any condition in the ON clause // here (toFromFragmentString), since anything in the ON condition // is already applied to the whole query	WITHOUT_CLASSIFICATION	0.9999911880983987	WITHOUT_CLASSIFICATION	8.811901601341167E-6	DESIGN
// bit_length feels a bit broken to me. We have to cast to char in order to // pass when a numeric value is supplied. But of course the answers given will // be wildly different for these two datatypes. 1234.5678 will be 9 bytes as // a char string but will be 8 or 16 bytes as a true numeric. // Jay Nance 2006-09-22	WITHOUT_CLASSIFICATION	0.999652463502465	WITHOUT_CLASSIFICATION	3.475364975351158E-4	DESIGN
// dotcount>=2	WITHOUT_CLASSIFICATION	0.9999973829531009	WITHOUT_CLASSIFICATION	2.6170468989840466E-6	DESIGN
// Do the corresponding RHS	WITHOUT_CLASSIFICATION	0.9999936762552695	WITHOUT_CLASSIFICATION	6.323744730461286E-6	DESIGN
//if its "id"	WITHOUT_CLASSIFICATION	0.9999879249409253	WITHOUT_CLASSIFICATION	1.2075059074858541E-5	DESIGN
//or its the id property name	WITHOUT_CLASSIFICATION	0.9989927068378628	WITHOUT_CLASSIFICATION	0.0010072931621371874	DESIGN
//join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999998038879038	WITHOUT_CLASSIFICATION	1.9611209621466116E-7	DESIGN
//important!!	WITHOUT_CLASSIFICATION	0.9997786531404479	WITHOUT_CLASSIFICATION	2.213468595521809E-4	DESIGN
//String[] keyCols = collPersister.getKeyColumnNames();	WITHOUT_CLASSIFICATION	0.9999993991154723	WITHOUT_CLASSIFICATION	6.008845276523787E-7	DESIGN
// an association	WITHOUT_CLASSIFICATION	0.999998092300255	WITHOUT_CLASSIFICATION	1.907699744959402E-6	DESIGN
//allow index() function:	WITHOUT_CLASSIFICATION	0.9999994571211511	WITHOUT_CLASSIFICATION	5.428788488583921E-7	DESIGN
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9979203186115705	WITHOUT_CLASSIFICATION	0.002079681388429558	DESIGN
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.9992624223165643	WITHOUT_CLASSIFICATION	7.375776834356349E-4	DESIGN
//many-to-many	WITHOUT_CLASSIFICATION	0.9998056355163824	WITHOUT_CLASSIFICATION	1.9436448361769812E-4	DESIGN
// collections of values	WITHOUT_CLASSIFICATION	0.9999994536545379	WITHOUT_CLASSIFICATION	5.463454620753812E-7	DESIGN
//opening paren in new Foo ( ... )	WITHOUT_CLASSIFICATION	0.9991519300050615	WITHOUT_CLASSIFICATION	8.480699949384628E-4	DESIGN
//if we are inside a new Result(), but not inside a nested function	WITHOUT_CLASSIFICATION	0.9999997085744526	WITHOUT_CLASSIFICATION	2.914255473154382E-7	DESIGN
//special case	WITHOUT_CLASSIFICATION	0.999999652415423	WITHOUT_CLASSIFICATION	3.47584576999484E-7	DESIGN
// the name of an SQL function	WITHOUT_CLASSIFICATION	0.999993577486796	WITHOUT_CLASSIFICATION	6.4225132040061265E-6	DESIGN
//null child could occur for no from clause in a filter	WITHOUT_CLASSIFICATION	0.9994991755140865	WITHOUT_CLASSIFICATION	5.008244859135778E-4	DESIGN
//this is basically a copy/paste of OrderByParser ... might be worth refactoring	WITHOUT_CLASSIFICATION	0.9971599699998811	DESIGN	0.0028400300001189065	WITHOUT_CLASSIFICATION
// SELECT p FROM p IN CLASS eg.Person GROUP BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999954325187633	WITHOUT_CLASSIFICATION	4.567481236640507E-6	DESIGN
// return aliases not supported in classic translator!	WITHOUT_CLASSIFICATION	0.9992072595140251	WITHOUT_CLASSIFICATION	7.927404859748408E-4	DESIGN
//register collection role	WITHOUT_CLASSIFICATION	0.9999893936371897	WITHOUT_CLASSIFICATION	1.0606362810316368E-5	DESIGN
// The keyword used to specify an identity column, if identity column key generation is supported.	WITHOUT_CLASSIFICATION	0.9999999579338167	WITHOUT_CLASSIFICATION	4.206618335853897E-8	DESIGN
//.getElementPropertyMapping();	WITHOUT_CLASSIFICATION	0.999999621442053	WITHOUT_CLASSIFICATION	3.7855794694786405E-7	DESIGN
//crossJoins.add(name);	WITHOUT_CLASSIFICATION	0.9998607463983622	WITHOUT_CLASSIFICATION	1.392536016377842E-4	DESIGN
//ie no select clause in HQL	WITHOUT_CLASSIFICATION	0.9999995172862659	WITHOUT_CLASSIFICATION	4.827137340732939E-7	DESIGN
// initialize the Set of queried identifier spaces (ie. tables)	WITHOUT_CLASSIFICATION	0.9999950805829256	WITHOUT_CLASSIFICATION	4.919417074384122E-6	DESIGN
//ie. no select clause	WITHOUT_CLASSIFICATION	0.9999999820687301	WITHOUT_CLASSIFICATION	1.79312698500926E-8	DESIGN
//there _was_ a select clause	WITHOUT_CLASSIFICATION	0.9999999707923218	WITHOUT_CLASSIFICATION	2.9207678193367738E-8	DESIGN
// return the concrete type, or the underlying type if a concrete type // was not specified	WITHOUT_CLASSIFICATION	0.9999702103018385	WITHOUT_CLASSIFICATION	2.978969816145686E-5	DESIGN
//many-to-many	WITHOUT_CLASSIFICATION	0.9998056355163824	WITHOUT_CLASSIFICATION	1.9436448361769812E-4	DESIGN
//q.addCollection(collectionName, collectionRole);	WITHOUT_CLASSIFICATION	0.9999997461916437	WITHOUT_CLASSIFICATION	2.538083562998853E-7	DESIGN
// classic parser does not support bulk manipulation statements	WITHOUT_CLASSIFICATION	0.99999461018298	WITHOUT_CLASSIFICATION	5.389817020051578E-6	DESIGN
// can't cache this stuff either (per-invocation)	WITHOUT_CLASSIFICATION	0.9999989275238504	WITHOUT_CLASSIFICATION	1.0724761495562303E-6	DESIGN
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.984833022431034	WITHOUT_CLASSIFICATION	0.015166977568965945	DESIGN
// This is the legacy behaviour for HQL queries...	WITHOUT_CLASSIFICATION	0.9997782884312286	WITHOUT_CLASSIFICATION	2.2171156877136625E-4	DESIGN
// not known!	WITHOUT_CLASSIFICATION	0.9979255175209144	WITHOUT_CLASSIFICATION	0.0020744824790855155	DESIGN
// not known!	WITHOUT_CLASSIFICATION	0.9979255175209144	WITHOUT_CLASSIFICATION	0.0020744824790855155	DESIGN
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999943804756269	WITHOUT_CLASSIFICATION	5.619524373129289E-6	DESIGN
// not known!	WITHOUT_CLASSIFICATION	0.9979255175209144	WITHOUT_CLASSIFICATION	0.0020744824790855155	DESIGN
// not known!	WITHOUT_CLASSIFICATION	0.9979255175209144	WITHOUT_CLASSIFICATION	0.0020744824790855155	DESIGN
//Need this, since join condition can appear inside parens!	WITHOUT_CLASSIFICATION	0.8749499626483697	DESIGN	0.1250500373516304	WITHOUT_CLASSIFICATION
//tokens that close a sub expression //tokens that open a sub expression //tokens that would indicate a sub expression is a boolean expression	WITHOUT_CLASSIFICATION	0.9999997987231073	WITHOUT_CLASSIFICATION	2.0127689270938413E-7	DESIGN
//expressionTerminators.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.9998606437510701	WITHOUT_CLASSIFICATION	1.393562489299445E-4	DESIGN
//expressionOpeners.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.9999764999910093	WITHOUT_CLASSIFICATION	2.3500008990550724E-5	DESIGN
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource) // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9848451729293808	WITHOUT_CLASSIFICATION	0.015154827070619187	DESIGN
// otherwise, a trim-specification and/or a trim-character // have been specified;  we need to decide which options // are present and "do the right thing" // should leading trim-characters be trimmed? // should trailing trim-characters be trimmed? // the trim-character (what is to be trimmed off?) // the trim-source (from where should it be trimmed?)	WITHOUT_CLASSIFICATION	0.9990643635128683	WITHOUT_CLASSIFICATION	9.356364871318356E-4	DESIGN
//Inside a BETWEEN ... AND ... expression	WITHOUT_CLASSIFICATION	0.999985317061655	WITHOUT_CLASSIFICATION	1.4682938345039981E-5	DESIGN
//were an odd or even number of NOTs encountered //the join string built up by compound paths inside this expression //a flag indicating if the subexpression is known to be boolean	WITHOUT_CLASSIFICATION	0.9999999689264601	WITHOUT_CLASSIFICATION	3.107353982349949E-8	DESIGN
//ie. a many-to-many	WITHOUT_CLASSIFICATION	0.9999002909055398	WITHOUT_CLASSIFICATION	9.970909446024139E-5	DESIGN
//Cope with [,]	WITHOUT_CLASSIFICATION	0.9998764984212924	WITHOUT_CLASSIFICATION	1.2350157870751969E-4	DESIGN
//Cope with a continued path expression (ie. ].baz)	WITHOUT_CLASSIFICATION	0.9989456152273605	WITHOUT_CLASSIFICATION	0.0010543847726395873	DESIGN
//NOTE: early return	WITHOUT_CLASSIFICATION	0.9997606654945316	WITHOUT_CLASSIFICATION	2.3933450546836143E-4	DESIGN
//Cope with a subselect	WITHOUT_CLASSIFICATION	0.9999560593429553	WITHOUT_CLASSIFICATION	4.3940657044710865E-5	DESIGN
//Cope with special cases of AND, NOT, ()	WITHOUT_CLASSIFICATION	0.9999932462842431	WITHOUT_CLASSIFICATION	6.753715756797735E-6	DESIGN
//Close extra brackets we opened	WITHOUT_CLASSIFICATION	0.9999952704198838	WITHOUT_CLASSIFICATION	4.729580116198863E-6	DESIGN
//take note when this is a boolean expression	WITHOUT_CLASSIFICATION	0.9998395675084151	WITHOUT_CLASSIFICATION	1.6043249158492078E-4	DESIGN
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999999921253561	WITHOUT_CLASSIFICATION	7.874644002762775E-9	DESIGN
//process a token, mapping OO path expressions to SQL expressions	WITHOUT_CLASSIFICATION	0.9999999965230852	WITHOUT_CLASSIFICATION	3.4769148075331554E-9	DESIGN
//Open any extra brackets we might need.	WITHOUT_CLASSIFICATION	0.9135901101352576	WITHOUT_CLASSIFICATION	0.08640988986474234	DESIGN
//Cope with special cases of AND, NOT, )	WITHOUT_CLASSIFICATION	0.9999629938654937	WITHOUT_CLASSIFICATION	3.700613450635318E-5	DESIGN
// the next one up must also be	WITHOUT_CLASSIFICATION	0.9999588165983967	WITHOUT_CLASSIFICATION	4.118340160336965E-5	DESIGN
// Add any joins	WITHOUT_CLASSIFICATION	0.9999989613383224	WITHOUT_CLASSIFICATION	1.038661677646648E-6	DESIGN
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999999921253561	WITHOUT_CLASSIFICATION	7.874644002762775E-9	DESIGN
//named query parameter	WITHOUT_CLASSIFICATION	0.9993589725873858	WITHOUT_CLASSIFICATION	6.410274126142239E-4	DESIGN
//path expression	WITHOUT_CLASSIFICATION	0.9999961803709079	WITHOUT_CLASSIFICATION	3.819629092232609E-6	DESIGN
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999999159694061	WITHOUT_CLASSIFICATION	8.403059392212091E-8	DESIGN
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.999999155889224	WITHOUT_CLASSIFICATION	8.441107760907967E-7	DESIGN
//anything else	WITHOUT_CLASSIFICATION	0.9999996855477865	WITHOUT_CLASSIFICATION	3.1445221349712104E-7	DESIGN
// the path expression continues after a ]	WITHOUT_CLASSIFICATION	0.9999959131192571	WITHOUT_CLASSIFICATION	4.086880742956964E-6	DESIGN
// careful with this!	WITHOUT_CLASSIFICATION	0.9999771943410287	WITHOUT_CLASSIFICATION	2.28056589712369E-5	DESIGN
// the path expression ends at the ]	WITHOUT_CLASSIFICATION	0.99999126369841	WITHOUT_CLASSIFICATION	8.73630159007256E-6	DESIGN
// "finish off" the join	WITHOUT_CLASSIFICATION	0.9999994686549855	WITHOUT_CLASSIFICATION	5.313450145323612E-7	DESIGN
//NOTICE: no " or . since they are part of (compound) identifiers	WITHOUT_CLASSIFICATION	0.9992788631507915	WITHOUT_CLASSIFICATION	7.211368492085659E-4	DESIGN
//cannot instantiate	WITHOUT_CLASSIFICATION	0.9995398381164955	WITHOUT_CLASSIFICATION	4.601618835045706E-4	DESIGN
// start by looking for HQL keywords...	WITHOUT_CLASSIFICATION	0.9999998671917905	WITHOUT_CLASSIFICATION	1.3280820950160304E-7	DESIGN
// inner joins can be abbreviated to 'join'	WITHOUT_CLASSIFICATION	0.9999833025083735	WITHOUT_CLASSIFICATION	1.6697491626489935E-5	DESIGN
// 'outer' is optional and is ignored	WITHOUT_CLASSIFICATION	0.9999999996583078	WITHOUT_CLASSIFICATION	3.4169229198130157E-10	DESIGN
// now anything that is not a HQL keyword	WITHOUT_CLASSIFICATION	0.9999923004784842	WITHOUT_CLASSIFICATION	7.699521515860143E-6	DESIGN
// process the "old" HQL style where aliases appear _first_ // ie. using the IN or IN CLASS constructions	WITHOUT_CLASSIFICATION	0.9999989682395138	WITHOUT_CLASSIFICATION	1.0317604861746332E-6	DESIGN
// treat it as a classname	WITHOUT_CLASSIFICATION	0.9999907034592829	WITHOUT_CLASSIFICATION	9.296540717054945E-6	DESIGN
// treat it as a path expression	WITHOUT_CLASSIFICATION	0.999999519747559	WITHOUT_CLASSIFICATION	4.80252441074332E-7	DESIGN
// starts with the name of a mapped class (new style)	WITHOUT_CLASSIFICATION	0.9999911825301556	WITHOUT_CLASSIFICATION	8.817469844399134E-6	DESIGN
// starts with a path expression (new style)	WITHOUT_CLASSIFICATION	0.9999990279814656	WITHOUT_CLASSIFICATION	9.720185343772478E-7	DESIGN
//allow ODMG OQL style: from Person p, p.cars c	WITHOUT_CLASSIFICATION	0.9959329864774489	WITHOUT_CLASSIFICATION	0.004067013522551087	DESIGN
//handle quoted strings	WITHOUT_CLASSIFICATION	0.9999870646571064	WITHOUT_CLASSIFICATION	1.2935342893612656E-5	DESIGN
// Object insertions, updates, and deletions have list semantics because // they must happen in the right order so as to respect referential // integrity	WITHOUT_CLASSIFICATION	0.9999983496431625	WITHOUT_CLASSIFICATION	1.6503568376242173E-6	DESIGN
// "finish off" the join	WITHOUT_CLASSIFICATION	0.9999994686549855	WITHOUT_CLASSIFICATION	5.313450145323612E-7	DESIGN
//ignore whitespace	WITHOUT_CLASSIFICATION	0.9999972627790623	WITHOUT_CLASSIFICATION	2.7372209376162E-6	DESIGN
//do replacements	WITHOUT_CLASSIFICATION	0.9999797090816169	WITHOUT_CLASSIFICATION	2.0290918383045285E-5	DESIGN
//handle HQL2 collection syntax	WITHOUT_CLASSIFICATION	0.9999872986334687	WITHOUT_CLASSIFICATION	1.2701366531239746E-5	DESIGN
// uuid.hex is deprecated	WITHOUT_CLASSIFICATION	0.9921809311794878	WITHOUT_CLASSIFICATION	0.007819068820512195	DESIGN
// AbstractSelectingDelegate impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996031027195	WITHOUT_CLASSIFICATION	3.9689728056344033E-7	DESIGN
//hilo params	WITHOUT_CLASSIFICATION	0.9999910144420773	WITHOUT_CLASSIFICATION	8.985557922683308E-6	DESIGN
//sql = query;	WITHOUT_CLASSIFICATION	0.9999869905098738	WITHOUT_CLASSIFICATION	1.3009490126222159E-5	DESIGN
// performance opt	WITHOUT_CLASSIFICATION	0.9999916100734125	WITHOUT_CLASSIFICATION	8.389926587500997E-6	DESIGN
//sql = update;	WITHOUT_CLASSIFICATION	0.9999949492365393	WITHOUT_CLASSIFICATION	5.050763460598043E-6	DESIGN
//hilo config	WITHOUT_CLASSIFICATION	0.9999364186601152	WITHOUT_CLASSIFICATION	6.35813398847839E-5	DESIGN
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.999999469237473	WITHOUT_CLASSIFICATION	5.307625270912827E-7	DESIGN
// don't allow comments on these insert statements as comments totally // blow up the Oracle getGeneratedKeys "support" :(	WITHOUT_CLASSIFICATION	0.9999999441372883	WITHOUT_CLASSIFICATION	5.586271160941255E-8	DESIGN
//abort the save (the object is already saved by a circular cascade)	WITHOUT_CLASSIFICATION	0.9491411098587452	WITHOUT_CLASSIFICATION	0.05085889014125472	DESIGN
//throw new IdentifierGenerationException("save associated object first, or disable cascade for inverse association");	WITHOUT_CLASSIFICATION	0.9999999956772501	WITHOUT_CLASSIFICATION	4.322750000453752E-9	DESIGN
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999778855744089	WITHOUT_CLASSIFICATION	2.2114425591113192E-5	DESIGN
//do nothing to avoid a lazy property initialization	WITHOUT_CLASSIFICATION	0.999996710065228	WITHOUT_CLASSIFICATION	3.2899347720882955E-6	DESIGN
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999958614193998	WITHOUT_CLASSIFICATION	4.138580600223798E-6	DESIGN
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.999999469237473	WITHOUT_CLASSIFICATION	5.307625270912827E-7	DESIGN
// do nothing until we hit the rsult set containing the generated id	WITHOUT_CLASSIFICATION	0.9999909059300341	WITHOUT_CLASSIFICATION	9.094069965752977E-6	DESIGN
/* COLUMN and TABLE should be renamed but it would break the public API */	WITHOUT_CLASSIFICATION	0.824769855334131	WITHOUT_CLASSIFICATION	0.1752301446658688	DESIGN
// Loaded entity instances, by EntityKey	WITHOUT_CLASSIFICATION	0.9999992392244724	WITHOUT_CLASSIFICATION	7.607755275745696E-7	DESIGN
// if the given name is un-qualified we may neen to qualify it	WITHOUT_CLASSIFICATION	0.9998891972977575	WITHOUT_CLASSIFICATION	1.1080270224251615E-4	DESIGN
// the default...	WITHOUT_CLASSIFICATION	0.9999683458847055	WITHOUT_CLASSIFICATION	3.165411529453913E-5	DESIGN
// unfortunately not really safe to normalize this // to 1 as an initial value like we do the others // because we would not be able to control this if // we are using a sequence...	WITHOUT_CLASSIFICATION	0.9999986741505634	WITHOUT_CLASSIFICATION	1.3258494365936848E-6	DESIGN
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999778855744089	WITHOUT_CLASSIFICATION	2.2114425591113192E-5	DESIGN
// Identity map of CollectionEntry instances, by the collection wrapper	WITHOUT_CLASSIFICATION	0.9999999859391013	WITHOUT_CLASSIFICATION	1.406089866709206E-8	DESIGN
// general purpose parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999168432272	WITHOUT_CLASSIFICATION	8.315677284479728E-8	DESIGN
// table-specific parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998281386522	WITHOUT_CLASSIFICATION	1.7186134779774576E-7	DESIGN
// Configurable implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999910109003117	WITHOUT_CLASSIFICATION	8.989099688248385E-6	DESIGN
// IdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99999852356617	WITHOUT_CLASSIFICATION	1.4764338299113144E-6	DESIGN
// PersistentIdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999975627719363	WITHOUT_CLASSIFICATION	2.437228063645875E-6	DESIGN
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999999622442396	WITHOUT_CLASSIFICATION	3.775576030820643E-8	DESIGN
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999999622442396	WITHOUT_CLASSIFICATION	3.775576030820643E-8	DESIGN
//fetch the generated id in a separate query	WITHOUT_CLASSIFICATION	0.9981156456431425	WITHOUT_CLASSIFICATION	0.0018843543568575567	DESIGN
// we just hit the last position	WITHOUT_CLASSIFICATION	0.9999992315271878	WITHOUT_CLASSIFICATION	7.684728122302124E-7	DESIGN
// scroll ahead	WITHOUT_CLASSIFICATION	0.9999929704726062	WITHOUT_CLASSIFICATION	7.029527393879687E-6	DESIGN
// scroll backward	WITHOUT_CLASSIFICATION	0.9999984999489907	WITHOUT_CLASSIFICATION	1.5000510094108405E-6	DESIGN
// we have not yet hit the last result...	WITHOUT_CLASSIFICATION	0.9999911242370815	WITHOUT_CLASSIFICATION	8.875762918476748E-6	DESIGN
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999891905741605	WITHOUT_CLASSIFICATION	1.0809425839471884E-5	DESIGN
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999990725398771	WITHOUT_CLASSIFICATION	9.274601228858665E-7	DESIGN
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999986065630624	WITHOUT_CLASSIFICATION	1.3934369376469482E-6	DESIGN
// do this when all the properties are updateable since there is // a certain likelihood that the information will already be // snapshot-cached.	WITHOUT_CLASSIFICATION	0.9997981160825978	WITHOUT_CLASSIFICATION	2.0188391740222586E-4	DESIGN
// Inner classes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999718139091	WITHOUT_CLASSIFICATION	2.8186090902537363E-8	DESIGN
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999891905741605	WITHOUT_CLASSIFICATION	1.0809425839471884E-5	DESIGN
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999990725398771	WITHOUT_CLASSIFICATION	9.274601228858665E-7	DESIGN
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999986065630624	WITHOUT_CLASSIFICATION	1.3934369376469482E-6	DESIGN
// Caches	WITHOUT_CLASSIFICATION	0.9999965986326145	WITHOUT_CLASSIFICATION	3.4013673854709574E-6	DESIGN
//Generators:	WITHOUT_CLASSIFICATION	0.9982714875726946	WITHOUT_CLASSIFICATION	0.0017285124273053747	DESIGN
// cache region is defined by the root-class in the hierarchy...	WITHOUT_CLASSIFICATION	0.9999852457340642	WITHOUT_CLASSIFICATION	1.4754265935759231E-5	DESIGN
//check if the detached object being merged is the parent	WITHOUT_CLASSIFICATION	0.9994280516535203	WITHOUT_CLASSIFICATION	5.71948346479663E-4	DESIGN
// after *all* persisters and named queries are registered	WITHOUT_CLASSIFICATION	0.9999979376176406	WITHOUT_CLASSIFICATION	2.062382359504794E-6	DESIGN
// if we get here, it is possible that we have a proxy 'in the way' of the merge map resolution... // 	WITHOUT_CLASSIFICATION	0.9999998332602142	WITHOUT_CLASSIFICATION	1.6673978585076784E-7	DESIGN
//JNDI + Serialization:	WITHOUT_CLASSIFICATION	0.9999995412771172	WITHOUT_CLASSIFICATION	4.5872288279787507E-7	DESIGN
//checking for named queries	WITHOUT_CLASSIFICATION	0.9876149350765852	WITHOUT_CLASSIFICATION	0.01238506492341494	DESIGN
//stats	WITHOUT_CLASSIFICATION	0.9996994059133268	WITHOUT_CLASSIFICATION	3.005940866731547E-4	DESIGN
// EntityNotFoundDelegate	WITHOUT_CLASSIFICATION	0.9999318319891508	WITHOUT_CLASSIFICATION	6.816801084911382E-5	DESIGN
// Check named HQL queries	WITHOUT_CLASSIFICATION	0.9999916815025608	WITHOUT_CLASSIFICATION	8.318497439198738E-6	DESIGN
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9340224355872228	WITHOUT_CLASSIFICATION	0.06597756441277723	DESIGN
//prevents this session from adding things to cache	WITHOUT_CLASSIFICATION	0.9994279037658598	WITHOUT_CLASSIFICATION	5.720962341402101E-4	DESIGN
// from javax.naming.Referenceable	WITHOUT_CLASSIFICATION	0.999940969515501	WITHOUT_CLASSIFICATION	5.903048449893812E-5	DESIGN
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999289207381173	WITHOUT_CLASSIFICATION	7.107926188263906E-5	DESIGN
//for a dynamic-class	WITHOUT_CLASSIFICATION	0.9999906314246109	WITHOUT_CLASSIFICATION	9.368575389231824E-6	DESIGN
//test this entity to see if we must query it	WITHOUT_CLASSIFICATION	0.9996556704067476	WITHOUT_CLASSIFICATION	3.443295932523594E-4	DESIGN
//NOTE EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999647966026579	WITHOUT_CLASSIFICATION	3.520339734203645E-5	DESIGN
// for backward-compatability	WITHOUT_CLASSIFICATION	0.9999793469727443	WITHOUT_CLASSIFICATION	2.065302725576468E-5	DESIGN
// ignore this error for now	WITHOUT_CLASSIFICATION	0.9999999812939353	WITHOUT_CLASSIFICATION	1.8706064727107253E-8	DESIGN
//to stop the class from being unloaded	WITHOUT_CLASSIFICATION	0.9999983103566135	WITHOUT_CLASSIFICATION	1.6896433865820827E-6	DESIGN
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9068591775977839	WITHOUT_CLASSIFICATION	0.0931408224022161	DESIGN
//must add to JNDI _after_ adding to HashMaps, because some JNDI servers use serialization	WITHOUT_CLASSIFICATION	0.9999999547232401	WITHOUT_CLASSIFICATION	4.5276759930353906E-8	DESIGN
// Make sure this is a defined parameter and check the incoming value type	WITHOUT_CLASSIFICATION	0.9999937927429182	WITHOUT_CLASSIFICATION	6.207257081758847E-6	DESIGN
// for each of the defined parameters, make sure its value // has been set	WITHOUT_CLASSIFICATION	0.9999990529715872	WITHOUT_CLASSIFICATION	9.470284128427616E-7	DESIGN
//we never need to apply locks to the SQL	WITHOUT_CLASSIFICATION	0.9998950554754789	WITHOUT_CLASSIFICATION	1.0494452452114256E-4	DESIGN
// inserts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999990644421344	WITHOUT_CLASSIFICATION	9.355578656622643E-7	DESIGN
// deletes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999977318840435	WITHOUT_CLASSIFICATION	2.2681159564048523E-6	DESIGN
// during deserialization, we need to reconnect all proxies and // collections to this session, as well as the EntityEntry and // CollectionEntry instances; these associations are transient // because serialization is used for different things.	WITHOUT_CLASSIFICATION	0.9999116766736877	WITHOUT_CLASSIFICATION	8.832332631228626E-5	DESIGN
// updates ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999979872301832	WITHOUT_CLASSIFICATION	2.01276981680978E-6	DESIGN
// loading ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999617501549	WITHOUT_CLASSIFICATION	3.824984507813044E-8	DESIGN
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999993011979624	WITHOUT_CLASSIFICATION	6.9880203755336E-7	DESIGN
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999993011979624	WITHOUT_CLASSIFICATION	6.9880203755336E-7	DESIGN
// first, try to load it from the temp PC associated to this SS	WITHOUT_CLASSIFICATION	0.99999533999487	WITHOUT_CLASSIFICATION	4.660005130018746E-6	DESIGN
// if the metadata allowed proxy creation and caller did not request forceful eager loading, // generate a proxy	WITHOUT_CLASSIFICATION	0.9999999999740169	WITHOUT_CLASSIFICATION	2.5983109850917767E-11	DESIGN
// otherwise immediately materialize it	WITHOUT_CLASSIFICATION	0.9999817752711101	WITHOUT_CLASSIFICATION	1.8224728889910844E-5	DESIGN
/////////////////////////////////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9998519790339709	WITHOUT_CLASSIFICATION	1.480209660290664E-4	DESIGN
// no auto-flushing to support in stateless session	WITHOUT_CLASSIFICATION	0.9998508156814598	WITHOUT_CLASSIFICATION	1.4918431854028813E-4	DESIGN
//after setting values to object, entityMode	WITHOUT_CLASSIFICATION	0.9996010380440654	WITHOUT_CLASSIFICATION	3.9896195593453073E-4	DESIGN
//for EJB3	WITHOUT_CLASSIFICATION	0.9999318448405636	WITHOUT_CLASSIFICATION	6.815515943637884E-5	DESIGN
// just ignore	WITHOUT_CLASSIFICATION	0.9999997339699966	WITHOUT_CLASSIFICATION	2.6603000326967604E-7	DESIGN
// do a check	WITHOUT_CLASSIFICATION	0.9999799182422564	WITHOUT_CLASSIFICATION	2.008175774354304E-5	DESIGN
// saveOrUpdate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999673359696	WITHOUT_CLASSIFICATION	3.266403033886028E-8	DESIGN
// update() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996473495955	WITHOUT_CLASSIFICATION	3.526504045389327E-7	DESIGN
// lock() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999640273997	WITHOUT_CLASSIFICATION	3.597260041843982E-8	DESIGN
// persist() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998121336551	WITHOUT_CLASSIFICATION	1.8786634501949418E-7	DESIGN
// persistOnFlush() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998612646931	WITHOUT_CLASSIFICATION	1.3873530693315955E-7	DESIGN
// merge() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999237254183	WITHOUT_CLASSIFICATION	7.627458169153686E-8	DESIGN
// saveOrUpdateCopy() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999348238867	WITHOUT_CLASSIFICATION	6.517611334098905E-8	DESIGN
// delete() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998654346808	WITHOUT_CLASSIFICATION	1.3456531927539871E-7	DESIGN
// load()/get() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999876443807	WITHOUT_CLASSIFICATION	1.2355619163422483E-8	DESIGN
// refresh() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997823659407	WITHOUT_CLASSIFICATION	2.1763405925898125E-7	DESIGN
// replicate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993964107975	WITHOUT_CLASSIFICATION	6.035892024121086E-7	DESIGN
// do not auto-flush while outside a transaction	WITHOUT_CLASSIFICATION	0.9999790678895033	WITHOUT_CLASSIFICATION	2.0932110496661414E-5	DESIGN
// this is an internal error of some sort...	WITHOUT_CLASSIFICATION	0.999976068876897	WITHOUT_CLASSIFICATION	2.393112310297638E-5	DESIGN
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9787136125197403	WITHOUT_CLASSIFICATION	0.02128638748025968	DESIGN
//only collections belonging to deleted entities are allowed to be dereferenced in the case of orphan delete	WITHOUT_CLASSIFICATION	0.9999677455691025	WITHOUT_CLASSIFICATION	3.225443089751273E-5	DESIGN
// if it was previously unreferenced, we need to flush in order to // get its state into the database in order to execute query	WITHOUT_CLASSIFICATION	0.9999445120414339	WITHOUT_CLASSIFICATION	5.5487958566089317E-5	DESIGN
// not for internal use:	WITHOUT_CLASSIFICATION	0.9905292742103219	WITHOUT_CLASSIFICATION	0.009470725789678155	DESIGN
// otherwise, we only need to flush if there are in-memory changes // to the queried tables	WITHOUT_CLASSIFICATION	0.9999999839580416	WITHOUT_CLASSIFICATION	1.604195840023272E-8	DESIGN
// might need to run a different filter entirely after the flush // because the collection role may have changed	WITHOUT_CLASSIFICATION	0.9999722518954429	WITHOUT_CLASSIFICATION	2.7748104556975077E-5	DESIGN
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9787136125197403	WITHOUT_CLASSIFICATION	0.02128638748025968	DESIGN
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9787136125197403	WITHOUT_CLASSIFICATION	0.02128638748025968	DESIGN
//if it is initialized, see if the underlying //instance is contained, since we need to  //account for the fact that it might have been //evicted	WITHOUT_CLASSIFICATION	0.9983480700137198	WITHOUT_CLASSIFICATION	0.0016519299862801378	DESIGN
// basically just an adapted copy of find(CriteriaImpl)	WITHOUT_CLASSIFICATION	0.9999999675506294	WITHOUT_CLASSIFICATION	3.2449370689644134E-8	DESIGN
// it is possible for this method to be called during flush processing, // so make certain that we do not accidently initialize an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999970559792445	WITHOUT_CLASSIFICATION	2.944020755517482E-6	DESIGN
// nothing to do in a stateful session	WITHOUT_CLASSIFICATION	0.9999842525150825	WITHOUT_CLASSIFICATION	1.5747484917494183E-5	DESIGN
// ignore	WITHOUT_CLASSIFICATION	0.9999998176961284	WITHOUT_CLASSIFICATION	1.8230387158018292E-7	DESIGN
// ignore this error for now	WITHOUT_CLASSIFICATION	0.9999999812939353	WITHOUT_CLASSIFICATION	1.8706064727107253E-8	DESIGN
// we need to writeObject() on this since interceptor is user defined	WITHOUT_CLASSIFICATION	0.9999988647901529	WITHOUT_CLASSIFICATION	1.1352098471398422E-6	DESIGN
// the old-time stand-by...	WITHOUT_CLASSIFICATION	0.9999985012231153	WITHOUT_CLASSIFICATION	1.498776884737277E-6	DESIGN
// parameter bind values...	WITHOUT_CLASSIFICATION	0.9999737761274886	WITHOUT_CLASSIFICATION	2.622387251140468E-5	DESIGN
// Parameter handling code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999831332822945	WITHOUT_CLASSIFICATION	1.6866717705589482E-5	DESIGN
// prepend value and type list with null for any positions before the wanted position.	WITHOUT_CLASSIFICATION	0.9999996103008648	WITHOUT_CLASSIFICATION	3.896991352828245E-7	DESIGN
// Execution methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999859311191833	WITHOUT_CLASSIFICATION	1.4068880816771359E-5	DESIGN
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9979987384375508	WITHOUT_CLASSIFICATION	0.002001261562449168	DESIGN
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9979987384375508	WITHOUT_CLASSIFICATION	0.002001261562449168	DESIGN
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9993382226499989	WITHOUT_CLASSIFICATION	6.617773500010278E-4	DESIGN
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9993382226499989	WITHOUT_CLASSIFICATION	6.617773500010278E-4	DESIGN
// FieldInterceptor impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999943505295279	WITHOUT_CLASSIFICATION	5.649470472107105E-6	DESIGN
// subclass accesses ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999978668988806	WITHOUT_CLASSIFICATION	2.1331011193248455E-6	DESIGN
//let's assume that there is only one lazy fetch group, for now!	WITHOUT_CLASSIFICATION	0.9999941243832378	WITHOUT_CLASSIFICATION	5.875616762362226E-6	DESIGN
// FieldHandler impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999152758909872	WITHOUT_CLASSIFICATION	8.472410901285705E-5	DESIGN
// should *not* need to grow beyond the size of the total number of columns in the rs	WITHOUT_CLASSIFICATION	0.9997027340831878	WITHOUT_CLASSIFICATION	2.9726591681220076E-4	DESIGN
// should probably no-op commit/rollback here, at least in JTA scenarios	WITHOUT_CLASSIFICATION	0.7989464182393953	DESIGN	0.20105358176060467	WITHOUT_CLASSIFICATION
// Base Expectation impls ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998847539673	WITHOUT_CLASSIFICATION	1.1524603263771918E-7	DESIGN
// Various Expectation instances ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999985237045294	WITHOUT_CLASSIFICATION	1.4762954706462692E-6	DESIGN
// explicitly perform no checking...	WITHOUT_CLASSIFICATION	0.9720858592629341	WITHOUT_CLASSIFICATION	0.02791414073706582	DESIGN
// used from testsuite	WITHOUT_CLASSIFICATION	0.9998784152987886	WITHOUT_CLASSIFICATION	1.2158470121125945E-4	DESIGN
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.999999950499644	WITHOUT_CLASSIFICATION	4.950035608215387E-8	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.9998094328207842	WITHOUT_CLASSIFICATION	1.9056717921580864E-4	DESIGN
// register synch; stats.connect()	WITHOUT_CLASSIFICATION	0.9999919574685378	WITHOUT_CLASSIFICATION	8.042531462341057E-6	DESIGN
//noncritical, swallow and let the other propagate!	WITHOUT_CLASSIFICATION	0.9997858457165001	WITHOUT_CLASSIFICATION	2.141542835000111E-4	DESIGN
// calls executeBatch()	WITHOUT_CLASSIFICATION	0.9999998417594671	WITHOUT_CLASSIFICATION	1.582405329618662E-7	DESIGN
//no big deal	WITHOUT_CLASSIFICATION	0.9999920943367925	WITHOUT_CLASSIFICATION	7.905663207604438E-6	DESIGN
// no big deal	WITHOUT_CLASSIFICATION	0.999985481772204	WITHOUT_CLASSIFICATION	1.4518227796103846E-5	DESIGN
// no big deal	WITHOUT_CLASSIFICATION	0.999985481772204	WITHOUT_CLASSIFICATION	1.4518227796103846E-5	DESIGN
// sybase driver (jConnect) throwing NPE here in certain // cases, but we'll just handle the general "unexpected" case	WITHOUT_CLASSIFICATION	0.9999996832846393	WITHOUT_CLASSIFICATION	3.1671536073408163E-7	DESIGN
// see explanation above...	WITHOUT_CLASSIFICATION	0.9999988254050182	WITHOUT_CLASSIFICATION	1.1745949817945523E-6	DESIGN
// If we are in the process of releasing, no sense // checking for aggressive-release possibility.	WITHOUT_CLASSIFICATION	0.9999978626677609	WITHOUT_CLASSIFICATION	2.137332239064989E-6	DESIGN
// EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999136733548845	WITHOUT_CLASSIFICATION	8.632664511555466E-5	DESIGN
// ResultSet impl ("overridden") ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999276978696636	WITHOUT_CLASSIFICATION	7.230213033630634E-5	DESIGN
// ResultSet impl (delegated) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999526505675269	WITHOUT_CLASSIFICATION	4.7349432473167084E-5	DESIGN
// refer to comment in StatefulPersistenceContext.addCollection()	WITHOUT_CLASSIFICATION	0.9999999544794227	WITHOUT_CLASSIFICATION	4.5520577275037225E-8	DESIGN
// ConnectionManager.Callback implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998834425287185	WITHOUT_CLASSIFICATION	1.1655747128156444E-4	DESIGN
// Note : success = false, because we don't know the outcome of the transaction	WITHOUT_CLASSIFICATION	0.9999882397764804	WITHOUT_CLASSIFICATION	1.1760223519558291E-5	DESIGN
// we already have a callback registered; either a local // (org.hibernate.Transaction) transaction has accepted // callback responsibilities, or we have previously // registered a transaction synch.	WITHOUT_CLASSIFICATION	0.9996505928670347	WITHOUT_CLASSIFICATION	3.4940713296523586E-4	DESIGN
// the configured transaction-factory says it only supports // local callback mode, so no sense attempting to register a // JTA Synchronization	WITHOUT_CLASSIFICATION	0.9993025615081007	WITHOUT_CLASSIFICATION	6.9743849189918E-4	DESIGN
// transactions marked for rollback-only cause some TM impls to throw exceptions	WITHOUT_CLASSIFICATION	0.9999891289165967	WITHOUT_CLASSIFICATION	1.0871083403319636E-5	DESIGN
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999336806485	WITHOUT_CLASSIFICATION	6.63193514295537E-8	DESIGN
//postInitialize() will be called after initialization	WITHOUT_CLASSIFICATION	0.9999999476897644	WITHOUT_CLASSIFICATION	5.231023564457337E-8	DESIGN
// cannot handle single quotes	WITHOUT_CLASSIFICATION	0.9999965947335558	WITHOUT_CLASSIFICATION	3.4052664441458947E-6	DESIGN
// todo : for 4.0 //	WITHOUT_CLASSIFICATION	0.9997454374002362	WITHOUT_CLASSIFICATION	2.545625997637809E-4	DESIGN
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999992869363615	WITHOUT_CLASSIFICATION	7.130636384232727E-7	DESIGN
// don't even bother trying to read further	WITHOUT_CLASSIFICATION	0.999984020089523	WITHOUT_CLASSIFICATION	1.597991047698712E-5	DESIGN
// don't even bother trying to read any further	WITHOUT_CLASSIFICATION	0.9999806607395885	WITHOUT_CLASSIFICATION	1.9339260411516887E-5	DESIGN
// position cursor to the last row	WITHOUT_CLASSIFICATION	0.9999999972308901	WITHOUT_CLASSIFICATION	2.769109876943092E-9	DESIGN
// sequentially read the result set in reverse until we recognize // a change in the key value.  At that point, we are pointed at // the last physical sequential row for the logical row in which // we are interested in processing	WITHOUT_CLASSIFICATION	0.99999998381973	WITHOUT_CLASSIFICATION	1.618026993415742E-8	DESIGN
// Read backwards until we read past the first physical sequential // row with the key we are interested in loading	WITHOUT_CLASSIFICATION	0.9999999999774181	WITHOUT_CLASSIFICATION	2.258186786565216E-11	DESIGN
// Finally, read ahead one row to position result set cursor // at the first physical row we are interested in loading	WITHOUT_CLASSIFICATION	0.9999992591022989	WITHOUT_CLASSIFICATION	7.408977011127635E-7	DESIGN
// now get an existing proxy for each row element (if there is one)	WITHOUT_CLASSIFICATION	0.999999953062866	WITHOUT_CLASSIFICATION	4.693713404717617E-8	DESIGN
// force the proxy to resolve itself	WITHOUT_CLASSIFICATION	0.9999996221516734	WITHOUT_CLASSIFICATION	3.7784832654847154E-7	DESIGN
// this is equivalent to the old behavior...	WITHOUT_CLASSIFICATION	0.9999714725123117	WITHOUT_CLASSIFICATION	2.852748768845904E-5	DESIGN
//if null, owner will be retrieved from session	WITHOUT_CLASSIFICATION	0.9999117166869068	WITHOUT_CLASSIFICATION	8.828331309312596E-5	DESIGN
//final String queryString, 	WITHOUT_CLASSIFICATION	0.9998664785565211	WITHOUT_CLASSIFICATION	1.3352144347881167E-4	DESIGN
// if it was a reference to self, don't need to nullify // unless we are using native id generation, in which // case we definitely need to nullify	WITHOUT_CLASSIFICATION	0.9999999988898021	WITHOUT_CLASSIFICATION	1.1101979783566378E-9	DESIGN
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.999976431221904	WITHOUT_CLASSIFICATION	2.3568778096004354E-5	DESIGN
// in an effort to avoid concurrent-modification-exceptions (from // potential recursive calls back through here as a result of the // eventual call to PersistentCollection#endRead), we scan the // internal loadingCollections map for matches and store those matches // in a temp collection.  the temp collection is then used to "drive" // the #endRead processing.	WITHOUT_CLASSIFICATION	0.9999999992808499	WITHOUT_CLASSIFICATION	7.191499858696577E-10	DESIGN
//we can reuse it for each row	WITHOUT_CLASSIFICATION	0.9999999043474141	WITHOUT_CLASSIFICATION	9.565258579414361E-8	DESIGN
//can't reuse in this case	WITHOUT_CLASSIFICATION	0.9982216320137043	WITHOUT_CLASSIFICATION	0.0017783679862957724	DESIGN
// First we need to suspend any current JTA transaction and obtain // a JDBC connection	WITHOUT_CLASSIFICATION	0.9998068993391692	WITHOUT_CLASSIFICATION	1.9310066083084613E-4	DESIGN
//getResultList(results);	WITHOUT_CLASSIFICATION	0.9999992918577343	WITHOUT_CLASSIFICATION	7.081422656765233E-7	DESIGN
//if we only returned one entity, query by key is more efficient	WITHOUT_CLASSIFICATION	0.9993337346433511	WITHOUT_CLASSIFICATION	6.662653566488717E-4	DESIGN
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999999263184276	WITHOUT_CLASSIFICATION	7.368157240670024E-8	DESIGN
// handle empty collection	WITHOUT_CLASSIFICATION	0.9994178428210068	WITHOUT_CLASSIFICATION	5.821571789931573E-4	DESIGN
// else no collection element, but also no owner	WITHOUT_CLASSIFICATION	0.9999999917504241	WITHOUT_CLASSIFICATION	8.249575993854286E-9	DESIGN
//handle empty collections	WITHOUT_CLASSIFICATION	0.9999881002234823	WITHOUT_CLASSIFICATION	1.189977651779465E-5	DESIGN
// else this is not a collection initializer (and empty collections will // be detected by looking for the owner's identifier in the result set)	WITHOUT_CLASSIFICATION	0.9999972879310751	WITHOUT_CLASSIFICATION	2.7120689249127116E-6	DESIGN
// validate() instances of Validatable	WITHOUT_CLASSIFICATION	0.9999995339367432	WITHOUT_CLASSIFICATION	4.6606325673718853E-7	DESIGN
// if we know there is exactly 1 row, we can skip. // it would be great if we could _always_ skip this; // it is a problem for <key-many-to-one>	WITHOUT_CLASSIFICATION	0.5297763859280343	DESIGN	0.47022361407196583	WITHOUT_CLASSIFICATION
// remove all collections for the entity from the session-level cache	WITHOUT_CLASSIFICATION	0.9999862741887617	WITHOUT_CLASSIFICATION	1.3725811238225855E-5	DESIGN
//null version means the object is in the process of being loaded somewhere else in the ResultSet	WITHOUT_CLASSIFICATION	0.9999881734502918	WITHOUT_CLASSIFICATION	1.1826549708215694E-5	DESIGN
//problematic for <key-many-to-one>!	WITHOUT_CLASSIFICATION	0.9998936104518348	WITHOUT_CLASSIFICATION	1.0638954816524223E-4	DESIGN
//use the id passed in	WITHOUT_CLASSIFICATION	0.999994040062092	WITHOUT_CLASSIFICATION	5.959937907981457E-6	DESIGN
//do nothing	WITHOUT_CLASSIFICATION	0.9999924083219551	WITHOUT_CLASSIFICATION	7.591678044961442E-6	DESIGN
// prefer re-generation of identity!	WITHOUT_CLASSIFICATION	0.9999893562222485	WITHOUT_CLASSIFICATION	1.0643777751592133E-5	DESIGN
//no point doing this if NONE was requested	WITHOUT_CLASSIFICATION	0.999996080799088	WITHOUT_CLASSIFICATION	3.919200911964046E-6	DESIGN
//If the object is already loaded, return the loaded one	WITHOUT_CLASSIFICATION	0.9999703289669614	WITHOUT_CLASSIFICATION	2.9671033038689285E-5	DESIGN
//its already loaded so don't need to hydrate it	WITHOUT_CLASSIFICATION	0.9999969546809271	WITHOUT_CLASSIFICATION	3.0453190729426753E-6	DESIGN
// cascade the refresh prior to refreshing this entity	WITHOUT_CLASSIFICATION	0.9998683122426704	WITHOUT_CLASSIFICATION	1.3168775732968173E-4	DESIGN
//the load() which takes an entity does not pass an entityName	WITHOUT_CLASSIFICATION	0.9999998617655128	WITHOUT_CLASSIFICATION	1.382344872624364E-7	DESIGN
//we only check the version when _upgrading_ lock modes	WITHOUT_CLASSIFICATION	0.9999998367331127	WITHOUT_CLASSIFICATION	1.632668873858929E-7	DESIGN
// look for a proxy	WITHOUT_CLASSIFICATION	0.999997928117486	WITHOUT_CLASSIFICATION	2.0718825139078076E-6	DESIGN
//we need to upgrade the lock mode to the mode requested	WITHOUT_CLASSIFICATION	0.9959572088752963	WITHOUT_CLASSIFICATION	0.004042791124703677	DESIGN
//its the given optional object	WITHOUT_CLASSIFICATION	0.9999993485388029	WITHOUT_CLASSIFICATION	6.514611971392002E-7	DESIGN
// instantiate a new instance	WITHOUT_CLASSIFICATION	0.9999470480529171	WITHOUT_CLASSIFICATION	5.295194708296525E-5	DESIGN
//need to hydrate it.	WITHOUT_CLASSIFICATION	0.9942999098778662	WITHOUT_CLASSIFICATION	0.005700090122133744	DESIGN
// return a newly loaded object	WITHOUT_CLASSIFICATION	0.9999787228104587	WITHOUT_CLASSIFICATION	2.1277189541302524E-5	DESIGN
//will be ignored, using the existing Entry instead	WITHOUT_CLASSIFICATION	0.9999998807253524	WITHOUT_CLASSIFICATION	1.1927464766507513E-7	DESIGN
// key is an entity involved with the operation performed by the listener; // value can be either a copy of the entity or the entity itself	WITHOUT_CLASSIFICATION	0.9999999960908937	WITHOUT_CLASSIFICATION	3.90910623942561E-9	DESIGN
//materialize associations (and initialize the object) later	WITHOUT_CLASSIFICATION	0.9996021830559817	WITHOUT_CLASSIFICATION	3.9781694401831355E-4	DESIGN
// Get the persister for the _subclass_	WITHOUT_CLASSIFICATION	0.9999997395679783	WITHOUT_CLASSIFICATION	2.6043202176308566E-7	DESIGN
// ok in normal Hibernate usage to delete a detached entity; JPA however // forbids it, thus this is a hook for HEM to affect this behavior	WITHOUT_CLASSIFICATION	0.9921757442417436	WITHOUT_CLASSIFICATION	0.007824255758256356	DESIGN
// the entry will be removed after the flush, and will no longer // override the stale snapshot // This is now handled by removeEntity() in EntityDeleteAction //persistenceContext.removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999970770291774	WITHOUT_CLASSIFICATION	2.922970822680156E-6	DESIGN
//addInitializedCollection(collection, persister, id);	WITHOUT_CLASSIFICATION	0.9999998899697765	WITHOUT_CLASSIFICATION	1.1003022353082971E-7	DESIGN
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999693757856706	WITHOUT_CLASSIFICATION	3.0624214329312446E-5	DESIGN
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999693757856706	WITHOUT_CLASSIFICATION	3.0624214329312446E-5	DESIGN
/*|| oj.getJoinable().consumesCollectionAlias() */	WITHOUT_CLASSIFICATION	0.9999999859531615	WITHOUT_CLASSIFICATION	1.4046838528267451E-8	DESIGN
// here we do not bother with the discriminator.	WITHOUT_CLASSIFICATION	0.9979523180364258	WITHOUT_CLASSIFICATION	0.0020476819635741462	DESIGN
// Code to handle subclasses of topClass	WITHOUT_CLASSIFICATION	0.9999732956665581	WITHOUT_CLASSIFICATION	2.670433344180573E-5	DESIGN
//woops we got an instance of another class hierarchy branch	WITHOUT_CLASSIFICATION	0.9983833166778405	WITHOUT_CLASSIFICATION	0.0016166833221594832	DESIGN
// we can go straight to the first required row	WITHOUT_CLASSIFICATION	0.9999997481978443	WITHOUT_CLASSIFICATION	2.5180215562966015E-7	DESIGN
// we need to step through the rows one row at a time (slow)	WITHOUT_CLASSIFICATION	0.9997615494488514	WITHOUT_CLASSIFICATION	2.384505511485723E-4	DESIGN
// synchronized to avoid multi-thread access issues; defined as method synch to avoid // potential deadlock issues due to nature of code.	WITHOUT_CLASSIFICATION	0.9999161621753329	WITHOUT_CLASSIFICATION	8.383782466718012E-5	DESIGN
// Allows various loaders (ok mainly the QueryLoader :) to check // whether scrolling of their result set should be allowed. // // By default it is allowed.	WITHOUT_CLASSIFICATION	0.9999997743515902	WITHOUT_CLASSIFICATION	2.2564840971915052E-7	DESIGN
//before adding to collection!	WITHOUT_CLASSIFICATION	0.9998008428450699	WITHOUT_CLASSIFICATION	1.9915715493017857E-4	DESIGN
// if the current depth is 0, the root thing being loaded is the // many-to-many collection itself.  Here, it is alright to use // an inner join...	WITHOUT_CLASSIFICATION	0.9999995035685644	WITHOUT_CLASSIFICATION	4.964314357025625E-7	DESIGN
//operations which cascade as far as the collection also cascade to collection elements	WITHOUT_CLASSIFICATION	0.9999999553400301	WITHOUT_CLASSIFICATION	4.4659969890859296E-8	DESIGN
// simple, because we can't have a one-to-one or a collection  // (or even a property-ref) in a composite-element:	WITHOUT_CLASSIFICATION	0.9999996865481007	WITHOUT_CLASSIFICATION	3.1345189933750456E-7	DESIGN
//a composite key	WITHOUT_CLASSIFICATION	0.999999193624719	WITHOUT_CLASSIFICATION	8.063752810931017E-7	DESIGN
// if no batch, use "foo = ? and bar = ?"	WITHOUT_CLASSIFICATION	0.9999995051649897	WITHOUT_CLASSIFICATION	4.948350102417027E-7	DESIGN
//it must be a collection fetch	WITHOUT_CLASSIFICATION	0.9999661902584427	WITHOUT_CLASSIFICATION	3.380974155724765E-5	DESIGN
// needed later for many-to-many/filter application	WITHOUT_CLASSIFICATION	0.949093830177627	WITHOUT_CLASSIFICATION	0.050906169822372914	DESIGN
/*&& etype.isReferenceToPrimaryKey()*/	WITHOUT_CLASSIFICATION	0.9999813840546191	WITHOUT_CLASSIFICATION	1.861594538088395E-5	DESIGN
// it might still need to apply a collection ordering based on a // many-to-many defined order-by...	WITHOUT_CLASSIFICATION	0.9998189921806175	WITHOUT_CLASSIFICATION	1.8100781938244127E-4	DESIGN
// if a composite key, use "( (foo = ? and bar = ?) or (foo = ? and bar = ?) )" for batching //TODO: unnecessary for databases with ANSI-style joins	WITHOUT_CLASSIFICATION	0.9988654487433698	WITHOUT_CLASSIFICATION	0.0011345512566301895	DESIGN
// belong to other persister // belong to other persister	WITHOUT_CLASSIFICATION	0.9999869011249155	WITHOUT_CLASSIFICATION	1.3098875084458864E-5	DESIGN
// we found it	WITHOUT_CLASSIFICATION	0.9999692883738054	WITHOUT_CLASSIFICATION	3.0711626194517644E-5	DESIGN
//we can use an inner join for the many-to-many	WITHOUT_CLASSIFICATION	0.9999801914433563	WITHOUT_CLASSIFICATION	1.9808556643678895E-5	DESIGN
//disable a join back to this same association	WITHOUT_CLASSIFICATION	0.9984347554828353	WITHOUT_CLASSIFICATION	0.0015652445171646095	DESIGN
//NOTE: unlike all other Loaders, this one is NOT //      multithreaded, or cacheable!!	WITHOUT_CLASSIFICATION	0.9971328179494982	WITHOUT_CLASSIFICATION	0.0028671820505018052	DESIGN
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999999996789893	WITHOUT_CLASSIFICATION	3.210107481944284E-10	DESIGN
//root entity comes *last*	WITHOUT_CLASSIFICATION	0.9996085178196191	WITHOUT_CLASSIFICATION	3.914821803808515E-4	DESIGN
//deliberately ignore return value!	WITHOUT_CLASSIFICATION	0.9999997390380463	WITHOUT_CLASSIFICATION	2.6096195375079494E-7	DESIGN
//alias may be null //EARLY EXIT	WITHOUT_CLASSIFICATION	0.999998007213981	WITHOUT_CLASSIFICATION	1.9927860190179575E-6	DESIGN
// if it is a compound path	WITHOUT_CLASSIFICATION	0.999963155478721	WITHOUT_CLASSIFICATION	3.684452127891525E-5	DESIGN
// otherwise assume the parent is the the criteria that created us	WITHOUT_CLASSIFICATION	0.9999428389196829	WITHOUT_CLASSIFICATION	5.716108031700791E-5	DESIGN
// if its the root criteria, we are done	WITHOUT_CLASSIFICATION	0.9999984722857345	WITHOUT_CLASSIFICATION	1.5277142655305192E-6	DESIGN
// otherwise, recurse	WITHOUT_CLASSIFICATION	0.9999722891336851	WITHOUT_CLASSIFICATION	2.77108663148196E-5	DESIGN
//the criteria instance	WITHOUT_CLASSIFICATION	0.9998711841823965	WITHOUT_CLASSIFICATION	1.2881581760349267E-4	DESIGN
// the entity name	WITHOUT_CLASSIFICATION	0.9999654762851439	WITHOUT_CLASSIFICATION	3.4523714856236456E-5	DESIGN
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9996998217358218	WITHOUT_CLASSIFICATION	3.00178264178107E-4	DESIGN
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9996998217358218	WITHOUT_CLASSIFICATION	3.00178264178107E-4	DESIGN
//it refers to an alias of a projection	WITHOUT_CLASSIFICATION	0.9999991979056579	WITHOUT_CLASSIFICATION	8.020943420272633E-7	DESIGN
//should never happen, i think	WITHOUT_CLASSIFICATION	0.999060707907902	WITHOUT_CLASSIFICATION	9.392920920979324E-4	DESIGN
// Detect discriminator values...	WITHOUT_CLASSIFICATION	0.9999675417782604	WITHOUT_CLASSIFICATION	3.245822173955796E-5	DESIGN
// Convert the string value into the proper type.	WITHOUT_CLASSIFICATION	0.9999850148233812	WITHOUT_CLASSIFICATION	1.4985176618767925E-5	DESIGN
// and the qualifier is not the alias of this criteria //      -> check to see if we belong to some criteria other //          than the one that created us	WITHOUT_CLASSIFICATION	0.9999999597414512	WITHOUT_CLASSIFICATION	4.025854891283709E-8	DESIGN
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.9999418938852895	WITHOUT_CLASSIFICATION	5.810611471036044E-5	DESIGN
// Otherwise, this is an ordinary value.	WITHOUT_CLASSIFICATION	0.9999971494908069	WITHOUT_CLASSIFICATION	2.850509193249205E-6	DESIGN
// Currently *not* cachable if autodiscover types is in effect (e.g. "select * ...")	WITHOUT_CLASSIFICATION	0.9999980398637425	WITHOUT_CLASSIFICATION	1.9601362574514976E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.9966662531954268	WITHOUT_CLASSIFICATION	0.003333746804573307	DESIGN
// this is only needed (afaict) for ResultTransformer processing...	WITHOUT_CLASSIFICATION	0.9738616991341832	WITHOUT_CLASSIFICATION	0.026138300865816887	DESIGN
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999997354228501	WITHOUT_CLASSIFICATION	2.645771498906442E-7	DESIGN
// build an array with indices equal to the total number // of actual returns in the result Hibernate will return // for this query (scalars + non-scalars)	WITHOUT_CLASSIFICATION	0.9999997550018118	WITHOUT_CLASSIFICATION	2.449981881892865E-7	DESIGN
// replace {....} with corresponding column aliases	WITHOUT_CLASSIFICATION	0.9999636892007666	WITHOUT_CLASSIFICATION	3.6310799233364586E-5	DESIGN
// No additional open braces found in the string, append the // rest of the string in its entirty and quit this loop	WITHOUT_CLASSIFICATION	0.9999190293549891	WITHOUT_CLASSIFICATION	8.097064501088482E-5	DESIGN
// apend everything up until the next encountered open brace	WITHOUT_CLASSIFICATION	0.999943599898205	WITHOUT_CLASSIFICATION	5.640010179493348E-5	DESIGN
// it is a simple table alias {foo}	WITHOUT_CLASSIFICATION	0.9999999907595745	WITHOUT_CLASSIFICATION	9.240425548638885E-9	DESIGN
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9999216245900773	WITHOUT_CLASSIFICATION	7.837540992270145E-5	DESIGN
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9999216245900773	WITHOUT_CLASSIFICATION	7.837540992270145E-5	DESIGN
// The current alias is referencing the collection to be eagerly fetched	WITHOUT_CLASSIFICATION	0.9999963667125729	WITHOUT_CLASSIFICATION	3.6332874269961187E-6	DESIGN
// it is a property reference {foo.bar}	WITHOUT_CLASSIFICATION	0.9999991963882401	WITHOUT_CLASSIFICATION	8.036117599453799E-7	DESIGN
// Possibly handle :something parameters for the query ?	WITHOUT_CLASSIFICATION	0.9955127086754569	WITHOUT_CLASSIFICATION	0.004487291324543056	DESIGN
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.999995009578453	WITHOUT_CLASSIFICATION	4.990421547071751E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.9966662531954268	WITHOUT_CLASSIFICATION	0.003333746804573307	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.9998094328207842	WITHOUT_CLASSIFICATION	1.9056717921580864E-4	DESIGN
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9997294890768703	WITHOUT_CLASSIFICATION	2.7051092312971477E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9966662531954268	WITHOUT_CLASSIFICATION	0.003333746804573307	DESIGN
// Now, process the returns	WITHOUT_CLASSIFICATION	0.9999988796059774	WITHOUT_CLASSIFICATION	1.1203940225205066E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.9966662531954268	WITHOUT_CLASSIFICATION	0.003333746804573307	DESIGN
// already been processed...	WITHOUT_CLASSIFICATION	0.9999807887402468	WITHOUT_CLASSIFICATION	1.9211259753337508E-5	DESIGN
// already been processed...	WITHOUT_CLASSIFICATION	0.9999807887402468	WITHOUT_CLASSIFICATION	1.9211259753337508E-5	DESIGN
// Make sure the owner alias is known...	WITHOUT_CLASSIFICATION	0.9999989684030726	WITHOUT_CLASSIFICATION	1.0315969274197948E-6	DESIGN
// first, break down the returns into maps keyed by alias // so that role returns can be more easily resolved to their owners	WITHOUT_CLASSIFICATION	0.9998322133358547	WITHOUT_CLASSIFICATION	1.6778666414535921E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9966662531954268	WITHOUT_CLASSIFICATION	0.003333746804573307	DESIGN
// If this return's alias has not been processed yet, do so b4 further processing of this return	WITHOUT_CLASSIFICATION	0.9999997843243816	WITHOUT_CLASSIFICATION	2.1567561833769528E-7	DESIGN
//	WITHOUT_CLASSIFICATION	0.9966662531954268	WITHOUT_CLASSIFICATION	0.003333746804573307	DESIGN
// for merging of versioned entities, we consider the version having // been changed only when: // 1) the two version values are different; //      *AND* // 2) The target actually represents database state! // // This second condition is a special case which allows // an entity to be merged during the same transaction // (though during a seperate operation) in which it was // originally persisted/saved	WITHOUT_CLASSIFICATION	0.99999912600051	WITHOUT_CLASSIFICATION	8.739994899758606E-7	DESIGN
// this is the second pass through on a merge op, so here we limit the // replacement to associations types (value types were already replaced // during the first pass)	WITHOUT_CLASSIFICATION	0.9554445388116192	WITHOUT_CLASSIFICATION	0.044555461188380746	DESIGN
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999807061704155	WITHOUT_CLASSIFICATION	1.9293829584521432E-5	DESIGN
// cascade-save to collections AFTER the collection owner was saved	WITHOUT_CLASSIFICATION	0.9999332493074332	WITHOUT_CLASSIFICATION	6.675069256679784E-5	DESIGN
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999997714231132	WITHOUT_CLASSIFICATION	2.2857688673583325E-7	DESIGN
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999993115166119	WITHOUT_CLASSIFICATION	6.884833880811894E-7	DESIGN
// currently only the Hibernate-supplied DbTimestampType is supported here	WITHOUT_CLASSIFICATION	0.9998346545955427	WITHOUT_CLASSIFICATION	1.6534540445728172E-4	DESIGN
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9991964284939131	WITHOUT_CLASSIFICATION	8.035715060868445E-4	DESIGN
// make a new one	WITHOUT_CLASSIFICATION	0.9999969703451622	WITHOUT_CLASSIFICATION	3.0296548378524416E-6	DESIGN
// not so sure this is even valid subtree.  but if it was, it'd // represent two unrelated table references...	WITHOUT_CLASSIFICATION	0.999523710829946	WITHOUT_CLASSIFICATION	4.762891700540903E-4	DESIGN
// (NOT (GT a b) ) => (LE a b)	WITHOUT_CLASSIFICATION	0.999973781869085	WITHOUT_CLASSIFICATION	2.6218130914852464E-5	DESIGN
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9996606701864167	WITHOUT_CLASSIFICATION	3.393298135833713E-4	DESIGN
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9999434447255832	WITHOUT_CLASSIFICATION	5.6555274416786376E-5	DESIGN
//sqlResultTypes = selectClause.getSqlResultTypes();	WITHOUT_CLASSIFICATION	0.9999999886789632	WITHOUT_CLASSIFICATION	1.1321036776032119E-8	DESIGN
//by default	WITHOUT_CLASSIFICATION	0.9998789197160264	WITHOUT_CLASSIFICATION	1.2108028397368526E-4	DESIGN
// This is now handled earlier in this method.	WITHOUT_CLASSIFICATION	0.9994310910076993	WITHOUT_CLASSIFICATION	5.68908992300781E-4	DESIGN
// -- Loader implementation --	WITHOUT_CLASSIFICATION	0.9999990922886212	WITHOUT_CLASSIFICATION	9.07711378847239E-7	DESIGN
// -- Loader overrides --	WITHOUT_CLASSIFICATION	0.999999974398834	WITHOUT_CLASSIFICATION	2.5601165962014455E-8	DESIGN
// (NOT (IS_NULL a b) ) => (IS_NOT_NULL a b)	WITHOUT_CLASSIFICATION	0.9999888170750965	WITHOUT_CLASSIFICATION	1.1182924903528718E-5	DESIGN
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.999984004888074	WITHOUT_CLASSIFICATION	1.5995111925965033E-5	DESIGN
// meant to handle dynamic instantiation queries...	WITHOUT_CLASSIFICATION	0.9999776174240392	WITHOUT_CLASSIFICATION	2.2382575960736356E-5	DESIGN
// --- Query translator methods ---	WITHOUT_CLASSIFICATION	0.999994260494243	WITHOUT_CLASSIFICATION	5.73950575700446E-6	DESIGN
// -- Implementation private methods --	WITHOUT_CLASSIFICATION	0.9999980776050836	WITHOUT_CLASSIFICATION	1.9223949164151624E-6	DESIGN
//deduplicate unique constraints sharing the same columns //this is needed by Hibernate Annotations since it creates automagically // unique constraints for the user	WITHOUT_CLASSIFICATION	0.9999883240184975	WITHOUT_CLASSIFICATION	1.1675981502408075E-5	DESIGN
// Try to find out the name of the primary key to create it as identity if the IdentityGenerator is used	WITHOUT_CLASSIFICATION	0.9997543229188702	WITHOUT_CLASSIFICATION	2.4567708112979014E-4	DESIGN
// to support dialects that have their own identity data type	WITHOUT_CLASSIFICATION	0.9999860734014578	WITHOUT_CLASSIFICATION	1.392659854206267E-5	DESIGN
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999999815760092	WITHOUT_CLASSIFICATION	1.842399070076226E-8	DESIGN
//used also for generation of FK names!	WITHOUT_CLASSIFICATION	0.997470870192125	WITHOUT_CLASSIFICATION	0.002529129807875021	DESIGN
//usually useless	WITHOUT_CLASSIFICATION	0.9998973213538606	WITHOUT_CLASSIFICATION	1.0267864613941081E-4	DESIGN
// added this caching as I noticed that getType() is being called multiple times...	WITHOUT_CLASSIFICATION	0.9999562342650337	WITHOUT_CLASSIFICATION	4.376573496640349E-5	DESIGN
//do not add unique constraint on DB not supporting unique and nullable columns	WITHOUT_CLASSIFICATION	0.9999999974450123	WITHOUT_CLASSIFICATION	2.5549876997250557E-9	DESIGN
//for backward compatibility, disable this:	WITHOUT_CLASSIFICATION	0.9999992875265985	WITHOUT_CLASSIFICATION	7.124734014214266E-7	DESIGN
//may be final //may be final //may be final	WITHOUT_CLASSIFICATION	0.9999454341282669	WITHOUT_CLASSIFICATION	5.45658717331737E-5	DESIGN
//may be final	WITHOUT_CLASSIFICATION	0.9991349232696661	WITHOUT_CLASSIFICATION	8.650767303337967E-4	DESIGN
// may be final	WITHOUT_CLASSIFICATION	0.9999554661635451	WITHOUT_CLASSIFICATION	4.4533836454976086E-5	DESIGN
// Custom SQL	WITHOUT_CLASSIFICATION	0.9999939901880296	WITHOUT_CLASSIFICATION	6.009811970439981E-6	DESIGN
//Primary key constraint	WITHOUT_CLASSIFICATION	0.9999981547070358	WITHOUT_CLASSIFICATION	1.8452929641942632E-6	DESIGN
// the root of the incoming property path matched one // of the embedded composite identifier properties	WITHOUT_CLASSIFICATION	0.999999959038464	WITHOUT_CLASSIFICATION	4.096153603598849E-8	DESIGN
// ignore it...	WITHOUT_CLASSIFICATION	0.9999982158577975	WITHOUT_CLASSIFICATION	1.7841422025159534E-6	DESIGN
//flat recursive algorithm	WITHOUT_CLASSIFICATION	0.9999062580106294	WITHOUT_CLASSIFICATION	9.374198937065526E-5	DESIGN
//an identifier mapper => getKey will be included in the getNonDuplicatedPropertyIterator() //and checked later, so it needs to be excluded	WITHOUT_CLASSIFICATION	0.9999999721681904	WITHOUT_CLASSIFICATION	2.7831809729064835E-8	DESIGN
//if the hibernate-mapping did not specify a schema/catalog, use the defaults //specified by properties - but note that if the schema/catalog were specified //in hibernate-mapping, or as params, they will already be initialized and //will override the values set here (they are in identifierGeneratorProperties)	WITHOUT_CLASSIFICATION	0.9999999999998935	WITHOUT_CLASSIFICATION	1.0648312538461031E-13	DESIGN
//pass the entity-name, if not a collection-id	WITHOUT_CLASSIFICATION	0.9999990093260788	WITHOUT_CLASSIFICATION	9.906739212231528E-7	DESIGN
// Custom SQL	WITHOUT_CLASSIFICATION	0.9999939901880296	WITHOUT_CLASSIFICATION	6.009811970439981E-6	DESIGN
//Primary key constraint	WITHOUT_CLASSIFICATION	0.9999981547070358	WITHOUT_CLASSIFICATION	1.8452929641942632E-6	DESIGN
//pass the column name (a generated id almost always has a single column)	WITHOUT_CLASSIFICATION	0.9999932198431101	WITHOUT_CLASSIFICATION	6.780156889958414E-6	DESIGN
//needed to satisfy KeyValue	WITHOUT_CLASSIFICATION	0.9996599209343613	WITHOUT_CLASSIFICATION	3.400790656387114E-4	DESIGN
// empty means no scoping	WITHOUT_CLASSIFICATION	0.99999382550169	WITHOUT_CLASSIFICATION	6.174498309890542E-6	DESIGN
// index should be last column listed	WITHOUT_CLASSIFICATION	0.9999996000146308	WITHOUT_CLASSIFICATION	3.999853691074332E-7	DESIGN
//if it is a formula index, use the element columns in the PK	WITHOUT_CLASSIFICATION	0.9999998005740868	WITHOUT_CLASSIFICATION	1.9942591322602344E-7	DESIGN
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns	WITHOUT_CLASSIFICATION	0.9999896947360842	WITHOUT_CLASSIFICATION	1.0305263915841953E-5	DESIGN
/*ArrayList list = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999996291335524	WITHOUT_CLASSIFICATION	3.708664476160642E-7	DESIGN
// }	WITHOUT_CLASSIFICATION	0.9999952703269257	WITHOUT_CLASSIFICATION	4.729673074219777E-6	DESIGN
// no foreign key element of for a one-to-many	WITHOUT_CLASSIFICATION	0.9999988400012141	WITHOUT_CLASSIFICATION	1.1599987858829087E-6	DESIGN
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.7073019124551688	DESIGN	0.29269808754483123	WITHOUT_CLASSIFICATION
// the case of a foreign key to something other than the pk is handled in createPropertyRefConstraints	WITHOUT_CLASSIFICATION	0.9999999997574556	WITHOUT_CLASSIFICATION	2.425444699637348E-10	DESIGN
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.7073019124551688	DESIGN	0.29269808754483123	WITHOUT_CLASSIFICATION
// if the property mapping consists of all formulas,  // make it non-updateable	WITHOUT_CLASSIFICATION	0.9999999996542426	WITHOUT_CLASSIFICATION	3.457575235077057E-10	DESIGN
//columnUpdateability.length==0 ||	WITHOUT_CLASSIFICATION	0.9999954626736263	WITHOUT_CLASSIFICATION	4.537326373626109E-6	DESIGN
// if the property mapping consists of all formulas,  // make it insertable	WITHOUT_CLASSIFICATION	0.9999999939641356	WITHOUT_CLASSIFICATION	6.035864328716406E-9	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999990413589989	WITHOUT_CLASSIFICATION	9.586410010584523E-7	DESIGN
// expected type is intrinsic here...	WITHOUT_CLASSIFICATION	0.9999823995916829	WITHOUT_CLASSIFICATION	1.7600408317036464E-5	DESIGN
//}	WITHOUT_CLASSIFICATION	0.9999412174490871	WITHOUT_CLASSIFICATION	5.878255091289976E-5	DESIGN
//}	WITHOUT_CLASSIFICATION	0.9999412174490871	WITHOUT_CLASSIFICATION	5.878255091289976E-5	DESIGN
//return memberPersister.getPropertyType(propertyName);	WITHOUT_CLASSIFICATION	0.9999906995120992	WITHOUT_CLASSIFICATION	9.300487900757738E-6	DESIGN
//return memberPersister.toColumns(alias, propertyName);	WITHOUT_CLASSIFICATION	0.9999792913922135	WITHOUT_CLASSIFICATION	2.0708607786458625E-5	DESIGN
//return memberPersister.getType();	WITHOUT_CLASSIFICATION	0.9999974882684544	WITHOUT_CLASSIFICATION	2.51173154562951E-6	DESIGN
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9999962561817355	WITHOUT_CLASSIFICATION	3.7438182644049637E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.9966662531954268	WITHOUT_CLASSIFICATION	0.003333746804573307	DESIGN
//instanceof AssociationType;	WITHOUT_CLASSIFICATION	0.9997495145273124	WITHOUT_CLASSIFICATION	2.504854726875874E-4	DESIGN
// we need to determine the best way to know that two joinables // represent a single many-to-many...	WITHOUT_CLASSIFICATION	0.8488571957808245	WITHOUT_CLASSIFICATION	0.15114280421917548	DESIGN
//strip leading ','	WITHOUT_CLASSIFICATION	0.9999987817438655	WITHOUT_CLASSIFICATION	1.218256134523356E-6	DESIGN
//public boolean isSubselectLoadable();	WITHOUT_CLASSIFICATION	0.9999997047954065	WITHOUT_CLASSIFICATION	2.95204593586178E-7	DESIGN
// KEY	WITHOUT_CLASSIFICATION	0.9999904310308224	WITHOUT_CLASSIFICATION	9.568969177541546E-6	DESIGN
//columns	WITHOUT_CLASSIFICATION	0.9999545648959468	WITHOUT_CLASSIFICATION	4.543510405314003E-5	DESIGN
//SQL statements	WITHOUT_CLASSIFICATION	0.9999850875477093	WITHOUT_CLASSIFICATION	1.4912452290603982E-5	DESIGN
//extra information about the element type	WITHOUT_CLASSIFICATION	0.9999999031299467	WITHOUT_CLASSIFICATION	9.687005320247083E-8	DESIGN
//types	WITHOUT_CLASSIFICATION	0.9996803774776974	WITHOUT_CLASSIFICATION	3.196225223025415E-4	DESIGN
// custom sql	WITHOUT_CLASSIFICATION	0.9999994208137751	WITHOUT_CLASSIFICATION	5.791862248776407E-7	DESIGN
//private final String unquotedIdentifierColumnName;	WITHOUT_CLASSIFICATION	0.9999945114225399	WITHOUT_CLASSIFICATION	5.488577460102367E-6	DESIGN
// dynamic filters specifically for many-to-many inside the collection	WITHOUT_CLASSIFICATION	0.9999993912492775	WITHOUT_CLASSIFICATION	6.087507225268055E-7	DESIGN
// dynamic filters for the collection	WITHOUT_CLASSIFICATION	0.9999998419564815	WITHOUT_CLASSIFICATION	1.5804351843431708E-7	DESIGN
// NativeSQL: collect key column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999910950838127	WITHOUT_CLASSIFICATION	8.904916187232927E-6	DESIGN
//unquotedKeyColumnNames = StringHelper.unQuote(keyColumnAliases);	WITHOUT_CLASSIFICATION	0.9999999869960651	WITHOUT_CLASSIFICATION	1.3003934820434591E-8	DESIGN
//ELEMENT	WITHOUT_CLASSIFICATION	0.9998595742638283	WITHOUT_CLASSIFICATION	1.4042573617163004E-4	DESIGN
// NativeSQL: collect element column and auto-aliases	WITHOUT_CLASSIFICATION	0.9998740060869437	WITHOUT_CLASSIFICATION	1.2599391305636023E-4	DESIGN
// INDEX AND ROW SELECT	WITHOUT_CLASSIFICATION	0.9999996306842766	WITHOUT_CLASSIFICATION	3.693157233946605E-7	DESIGN
// NativeSQL: collect index column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999791413118969	WITHOUT_CLASSIFICATION	2.0858688103037595E-5	DESIGN
//unquotedIdentifierColumnName = identifierColumnAlias;	WITHOUT_CLASSIFICATION	0.9999996638399765	WITHOUT_CLASSIFICATION	3.3616002348777614E-7	DESIGN
//unquotedIdentifierColumnName = null;	WITHOUT_CLASSIFICATION	0.9999987091406825	WITHOUT_CLASSIFICATION	1.2908593175656062E-6	DESIGN
//GENERATE THE SQL:	WITHOUT_CLASSIFICATION	0.9998437443228053	WITHOUT_CLASSIFICATION	1.5625567719465848E-4	DESIGN
// for non-arrays, we don't need to know the element class //elementType.returnedClass();	WITHOUT_CLASSIFICATION	0.9999878000508305	WITHOUT_CLASSIFICATION	1.2199949169546218E-5	DESIGN
//not all classpersisters implement PropertyMapping!	WITHOUT_CLASSIFICATION	0.9996745767164384	WITHOUT_CLASSIFICATION	3.2542328356158337E-4	DESIGN
// Handle any filters applied to this collection	WITHOUT_CLASSIFICATION	0.8965984958583534	WITHOUT_CLASSIFICATION	0.10340150414164666	DESIGN
// Handle any filters applied to this collection for many-to-many	WITHOUT_CLASSIFICATION	0.9350246639903701	WITHOUT_CLASSIFICATION	0.06497533600962983	DESIGN
//if there is a user-specified loader, return that //TODO: filters!?	WITHOUT_CLASSIFICATION	0.7118583116405192	DESIGN	0.28814168835948084	WITHOUT_CLASSIFICATION
// Take care of any entities that might have // been evicted!	WITHOUT_CLASSIFICATION	0.998682823622883	WITHOUT_CLASSIFICATION	0.0013171763771171303	DESIGN
//strip leading ','	WITHOUT_CLASSIFICATION	0.9999987817438655	WITHOUT_CLASSIFICATION	1.218256134523356E-6	DESIGN
// Run a subquery loader	WITHOUT_CLASSIFICATION	0.999989378161383	WITHOUT_CLASSIFICATION	1.0621838617000125E-5	DESIGN
//needed by arrays	WITHOUT_CLASSIFICATION	0.9999850606176046	WITHOUT_CLASSIFICATION	1.4939382395456217E-5	DESIGN
//TODO: something with formulas...	WITHOUT_CLASSIFICATION	0.9473045540041921	WITHOUT_CLASSIFICATION	0.05269544599580791	DESIGN
//an assertion	WITHOUT_CLASSIFICATION	0.9999999055756188	WITHOUT_CLASSIFICATION	9.442438120416131E-8	DESIGN
// Remove all the old entries	WITHOUT_CLASSIFICATION	0.9999927723471262	WITHOUT_CLASSIFICATION	7.2276528737820375E-6	DESIGN
//create all the new entries	WITHOUT_CLASSIFICATION	0.9999988465703609	WITHOUT_CLASSIFICATION	1.153429639170736E-6	DESIGN
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9999962561817355	WITHOUT_CLASSIFICATION	3.7438182644049637E-6	DESIGN
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9999962561817355	WITHOUT_CLASSIFICATION	3.7438182644049637E-6	DESIGN
//delete all the deleted entries	WITHOUT_CLASSIFICATION	0.9999990323358404	WITHOUT_CLASSIFICATION	9.676641595529657E-7	DESIGN
//insert all the new entries	WITHOUT_CLASSIFICATION	0.9999993489265133	WITHOUT_CLASSIFICATION	6.510734866986738E-7	DESIGN
//==elementType ??	WITHOUT_CLASSIFICATION	0.9988284151744765	WITHOUT_CLASSIFICATION	0.0011715848255234793	DESIGN
//update all the modified entries	WITHOUT_CLASSIFICATION	0.9999967650963316	WITHOUT_CLASSIFICATION	3.2349036683176483E-6	DESIGN
//identifier collections not supported for 1-to-many	WITHOUT_CLASSIFICATION	0.9999953177552713	WITHOUT_CLASSIFICATION	4.6822447286173645E-6	DESIGN
// update removed rows fks to null	WITHOUT_CLASSIFICATION	0.9997074263119458	WITHOUT_CLASSIFICATION	2.9257368805417886E-4	DESIGN
// will still be issued when it used to be null	WITHOUT_CLASSIFICATION	0.9920030460851318	WITHOUT_CLASSIFICATION	0.007996953914868172	DESIGN
// now update all changed or added rows fks	WITHOUT_CLASSIFICATION	0.9999991060420321	WITHOUT_CLASSIFICATION	8.939579678913511E-7	DESIGN
//	WITHOUT_CLASSIFICATION	0.9966662531954268	WITHOUT_CLASSIFICATION	0.003333746804573307	DESIGN
//use suffix for the entity columns	WITHOUT_CLASSIFICATION	0.9997916238911716	WITHOUT_CLASSIFICATION	2.0837610882834662E-4	DESIGN
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999922922612737	WITHOUT_CLASSIFICATION	7.707738726153602E-6	DESIGN
//private final String rootTableName;	WITHOUT_CLASSIFICATION	0.9999830728756776	WITHOUT_CLASSIFICATION	1.6927124322421063E-5	DESIGN
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9999875053006952	WITHOUT_CLASSIFICATION	1.2494699304792678E-5	DESIGN
//Custom SQL	WITHOUT_CLASSIFICATION	0.9998856135498795	WITHOUT_CLASSIFICATION	1.1438645012046401E-4	DESIGN
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999922922612737	WITHOUT_CLASSIFICATION	7.707738726153602E-6	DESIGN
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.999988226839982	WITHOUT_CLASSIFICATION	1.1773160018083064E-5	DESIGN
// This could also just be true all the time...	WITHOUT_CLASSIFICATION	0.995881551757323	WITHOUT_CLASSIFICATION	0.004118448242677017	DESIGN
//chop the last union (all)	WITHOUT_CLASSIFICATION	0.9999951114366622	WITHOUT_CLASSIFICATION	4.88856333789277E-6	DESIGN
//TODO: check this....	WITHOUT_CLASSIFICATION	0.9790486487406868	DESIGN	0.02095135125931328	WITHOUT_CLASSIFICATION
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9999875053006952	WITHOUT_CLASSIFICATION	1.2494699304792678E-5	DESIGN
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.999994852974869	WITHOUT_CLASSIFICATION	5.147025130952212E-6	DESIGN
// the closure of all properties in the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999975812690831	WITHOUT_CLASSIFICATION	2.41873091696465E-6	DESIGN
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999996770255736	WITHOUT_CLASSIFICATION	3.2297442645751664E-7	DESIGN
// subclass discrimination works by assigning particular // values to certain combinations of null primary key // values in the outer join using an SQL CASE	WITHOUT_CLASSIFICATION	0.9999948083635367	WITHOUT_CLASSIFICATION	5.191636463282895E-6	DESIGN
//MULTITABLES	WITHOUT_CLASSIFICATION	0.9998887261499397	WITHOUT_CLASSIFICATION	1.1127385006019264E-4	DESIGN
// Custom sql	WITHOUT_CLASSIFICATION	0.9999991283527822	WITHOUT_CLASSIFICATION	8.716472177282186E-7	DESIGN
// subclass closure properties	WITHOUT_CLASSIFICATION	0.9999980640420912	WITHOUT_CLASSIFICATION	1.935957908662479E-6	DESIGN
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999935533483776	WITHOUT_CLASSIFICATION	6.446651622435506E-6	DESIGN
//( (Column) model.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999154979768836	WITHOUT_CLASSIFICATION	8.450202311634311E-5	DESIGN
//( (Column) sc.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999921687148882	WITHOUT_CLASSIFICATION	7.831285111873094E-6	DESIGN
// don't need subclass tables, because they can't appear in conditions	WITHOUT_CLASSIFICATION	0.9791433946313398	WITHOUT_CLASSIFICATION	0.02085660536866009	DESIGN
// special case where we need to force incloude all subclass joins	WITHOUT_CLASSIFICATION	0.9998911542628484	WITHOUT_CLASSIFICATION	1.0884573715161494E-4	DESIGN
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999922922612737	WITHOUT_CLASSIFICATION	7.707738726153602E-6	DESIGN
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.999994852974869	WITHOUT_CLASSIFICATION	5.147025130952212E-6	DESIGN
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999996770255736	WITHOUT_CLASSIFICATION	3.2297442645751664E-7	DESIGN
//get em on the second pass!	WITHOUT_CLASSIFICATION	0.999984681770986	WITHOUT_CLASSIFICATION	1.5318229013961666E-5	DESIGN
// now look up the object we are really interested in! // (this lets us correctly handle proxies and multi-row // or multi-column queries)	WITHOUT_CLASSIFICATION	0.99991033754372	WITHOUT_CLASSIFICATION	8.966245628003269E-5	DESIGN
// discriminator column	WITHOUT_CLASSIFICATION	0.9999899864915407	WITHOUT_CLASSIFICATION	1.0013508459282874E-5	DESIGN
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9999875053006952	WITHOUT_CLASSIFICATION	1.2494699304792678E-5	DESIGN
//private final Map propertyTableNumbersByName = new HashMap();	WITHOUT_CLASSIFICATION	0.9999894123490811	WITHOUT_CLASSIFICATION	1.0587650918841702E-5	DESIGN
// CLASS + TABLE	WITHOUT_CLASSIFICATION	0.9999998793286028	WITHOUT_CLASSIFICATION	1.2067139722722516E-7	DESIGN
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999950921041799	WITHOUT_CLASSIFICATION	4.907895820048863E-6	DESIGN
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999892312933035	WITHOUT_CLASSIFICATION	1.0768706696421083E-5	DESIGN
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999935533483776	WITHOUT_CLASSIFICATION	6.446651622435506E-6	DESIGN
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.999988226839982	WITHOUT_CLASSIFICATION	1.1773160018083064E-5	DESIGN
// JOINS	WITHOUT_CLASSIFICATION	0.9999991995721562	WITHOUT_CLASSIFICATION	8.004278437173474E-7	DESIGN
//propertyTableNumbersByName.put( prop.getName(), join );	WITHOUT_CLASSIFICATION	0.9999995043165576	WITHOUT_CLASSIFICATION	4.9568344240847E-7	DESIGN
//Access cached SQL	WITHOUT_CLASSIFICATION	0.9998707483387461	WITHOUT_CLASSIFICATION	1.2925166125389337E-4	DESIGN
//figure out which tables need to be fetched	WITHOUT_CLASSIFICATION	0.9988935739297835	WITHOUT_CLASSIFICATION	0.0011064260702164709	DESIGN
//figure out which columns are needed	WITHOUT_CLASSIFICATION	0.9975846389503567	WITHOUT_CLASSIFICATION	0.002415361049643345	DESIGN
//figure out which formulas are needed	WITHOUT_CLASSIFICATION	0.9999479933790709	WITHOUT_CLASSIFICATION	5.2006620929174664E-5	DESIGN
//render the SQL	WITHOUT_CLASSIFICATION	0.9991609751110551	WITHOUT_CLASSIFICATION	8.390248889449297E-4	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999990413589989	WITHOUT_CLASSIFICATION	9.586410010584523E-7	DESIGN
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997551339589262	WITHOUT_CLASSIFICATION	2.4486604107373485E-4	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999987441345871	WITHOUT_CLASSIFICATION	1.255865412910474E-6	DESIGN
// The optional SQL string defined in the where attribute	WITHOUT_CLASSIFICATION	0.9999982304189436	WITHOUT_CLASSIFICATION	1.7695810563089113E-6	DESIGN
//information about lazy properties of this class	WITHOUT_CLASSIFICATION	0.9999560545299874	WITHOUT_CLASSIFICATION	4.3945470012673916E-5	DESIGN
//information about all properties in class hierarchy	WITHOUT_CLASSIFICATION	0.9999997982588521	WITHOUT_CLASSIFICATION	2.0174114790891814E-7	DESIGN
//information about all columns/formulas in class hierarchy	WITHOUT_CLASSIFICATION	0.9999999565565376	WITHOUT_CLASSIFICATION	4.3443462405624275E-8	DESIGN
// dynamic filters attached to the class-level	WITHOUT_CLASSIFICATION	0.9999996602741621	WITHOUT_CLASSIFICATION	3.3972583794888683E-7	DESIGN
// SQL strings	WITHOUT_CLASSIFICATION	0.999999032418624	WITHOUT_CLASSIFICATION	9.675813759698018E-7	DESIGN
// for objects that came in via update()	WITHOUT_CLASSIFICATION	0.9999999490783675	WITHOUT_CLASSIFICATION	5.092163246946741E-8	DESIGN
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999892312933035	WITHOUT_CLASSIFICATION	1.0768706696421083E-5	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999987441345871	WITHOUT_CLASSIFICATION	1.255865412910474E-6	DESIGN
// IDENTIFIER	WITHOUT_CLASSIFICATION	0.9999992015337029	WITHOUT_CLASSIFICATION	7.984662969940469E-7	DESIGN
// VERSION	WITHOUT_CLASSIFICATION	0.9999993560806999	WITHOUT_CLASSIFICATION	6.43919300087819E-7	DESIGN
//WHERE STRING	WITHOUT_CLASSIFICATION	0.9999956446004012	WITHOUT_CLASSIFICATION	4.355399598803867E-6	DESIGN
// SUBCLASS PROPERTY CLOSURE	WITHOUT_CLASSIFICATION	0.9999951450709331	WITHOUT_CLASSIFICATION	4.854929066865972E-6	DESIGN
//before add :-)	WITHOUT_CLASSIFICATION	0.9952255974030327	WITHOUT_CLASSIFICATION	0.004774402596967289	DESIGN
// Handle any filters applied to the class level	WITHOUT_CLASSIFICATION	0.998241354228044	WITHOUT_CLASSIFICATION	0.0017586457719559344	DESIGN
// only one-to-one is lazy fetched	WITHOUT_CLASSIFICATION	0.9999985091507877	WITHOUT_CLASSIFICATION	1.4908492123265138E-6	DESIGN
//note early exit here:	WITHOUT_CLASSIFICATION	0.9977861124012478	WITHOUT_CLASSIFICATION	0.0022138875987521077	DESIGN
// object have been loaded with setReadOnly(true); HHH-2236	WITHOUT_CLASSIFICATION	0.9999990273820105	WITHOUT_CLASSIFICATION	9.726179895129326E-7	DESIGN
// NOTE: this assumes something about how propertySelectFragment is implemented by the subclass!	WITHOUT_CLASSIFICATION	0.9946013148360024	WITHOUT_CLASSIFICATION	0.005398685163997573	DESIGN
//strip leading ", "	WITHOUT_CLASSIFICATION	0.9999993151957092	WITHOUT_CLASSIFICATION	6.848042908814423E-7	DESIGN
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999973902434208	WITHOUT_CLASSIFICATION	2.609756579226756E-6	DESIGN
//otherwise return the "hydrated" state (ie. associations are not resolved)	WITHOUT_CLASSIFICATION	0.9508550841319948	WITHOUT_CLASSIFICATION	0.04914491586800514	DESIGN
//null owner ok??	WITHOUT_CLASSIFICATION	0.9999827611166978	WITHOUT_CLASSIFICATION	1.7238883302233504E-5	DESIGN
// null sql means that the only lazy properties // are shared PK one-to-one associations which are // handled differently in the Type#nullSafeGet code...	WITHOUT_CLASSIFICATION	0.9998941801288789	WITHOUT_CLASSIFICATION	1.0581987112110038E-4	DESIGN
// Create a new FROM node for the referenced class.	WITHOUT_CLASSIFICATION	0.9999988710326396	WITHOUT_CLASSIFICATION	1.1289673603627851E-6	DESIGN
// the difficulty here is exactly what do we update in order to // force the version to be incremented in the db...	WITHOUT_CLASSIFICATION	0.9588768914329047	WITHOUT_CLASSIFICATION	0.04112310856709537	DESIGN
// performance op to avoid the array search	WITHOUT_CLASSIFICATION	0.99999741422791	WITHOUT_CLASSIFICATION	2.585772089972089E-6	DESIGN
// properly handle property-ref-based associations	WITHOUT_CLASSIFICATION	0.9999909970071025	WITHOUT_CLASSIFICATION	9.002992897509277E-6	DESIGN
//Enable for HHH-440, which we don't like:	WITHOUT_CLASSIFICATION	0.9991047807318534	WITHOUT_CLASSIFICATION	8.952192681467063E-4	DESIGN
// ALIASES	WITHOUT_CLASSIFICATION	0.9999970353591603	WITHOUT_CLASSIFICATION	2.9646408397786973E-6	DESIGN
// aliases named identifier ( alias.idname )	WITHOUT_CLASSIFICATION	0.9999728445687488	WITHOUT_CLASSIFICATION	2.7155431251204208E-5	DESIGN
// aliases for composite-id's	WITHOUT_CLASSIFICATION	0.9999999821838462	WITHOUT_CLASSIFICATION	1.781615373150859E-8	DESIGN
// Fetch embedded identifiers propertynames from the "virtual" identifier component	WITHOUT_CLASSIFICATION	0.9999999722307322	WITHOUT_CLASSIFICATION	2.776926785495936E-8	DESIGN
// embedded composite ids ( alias.idname1, alias.idname2 )	WITHOUT_CLASSIFICATION	0.9999998205352343	WITHOUT_CLASSIFICATION	1.7946476566821923E-7	DESIGN
// TODO: skip formulas?	WITHOUT_CLASSIFICATION	0.6768442979859284	DESIGN	0.3231557020140716	WITHOUT_CLASSIFICATION
//don't need filters for the static loaders	WITHOUT_CLASSIFICATION	0.99999231617093	WITHOUT_CLASSIFICATION	7.683829069968117E-6	DESIGN
//do two passes, for collection property-ref!	WITHOUT_CLASSIFICATION	0.9999999074526789	WITHOUT_CLASSIFICATION	9.254732114509236E-8	DESIGN
// select the correct row by either pk or rowid	WITHOUT_CLASSIFICATION	0.9999919627659569	WITHOUT_CLASSIFICATION	8.037234043144526E-6	DESIGN
//TODO: eventually, rowIdName[j]	WITHOUT_CLASSIFICATION	0.9187127050051495	WITHOUT_CLASSIFICATION	0.08128729499485063	DESIGN
// this is a property of the table, which we are updating	WITHOUT_CLASSIFICATION	0.9999531454176266	WITHOUT_CLASSIFICATION	4.685458237338436E-5	DESIGN
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9994577024578979	WITHOUT_CLASSIFICATION	5.42297542102037E-4	DESIGN
// we are using "all" or "dirty" property-based optimistic locking	WITHOUT_CLASSIFICATION	0.9999421747420006	WITHOUT_CLASSIFICATION	5.782525799931016E-5	DESIGN
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9843238715282769	WITHOUT_CLASSIFICATION	0.015676128471723127	DESIGN
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999838396233587	WITHOUT_CLASSIFICATION	1.616037664132754E-5	DESIGN
// add normal properties	WITHOUT_CLASSIFICATION	0.9999999319370713	WITHOUT_CLASSIFICATION	6.806292871937793E-8	DESIGN
// add the discriminator	WITHOUT_CLASSIFICATION	0.9999397992363833	WITHOUT_CLASSIFICATION	6.020076361660612E-5	DESIGN
// more specifically : "? [op] datetime" //      1) if the operator is MINUS, the param needs to be of //          some datetime type //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.7928468253769255	WITHOUT_CLASSIFICATION	0.20715317462307453	DESIGN
// add normal properties	WITHOUT_CLASSIFICATION	0.9999999319370713	WITHOUT_CLASSIFICATION	6.806292871937793E-8	DESIGN
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999838396233587	WITHOUT_CLASSIFICATION	1.616037664132754E-5	DESIGN
// add the discriminator	WITHOUT_CLASSIFICATION	0.9999397992363833	WITHOUT_CLASSIFICATION	6.020076361660612E-5	DESIGN
// add the primary key	WITHOUT_CLASSIFICATION	0.999981576919828	WITHOUT_CLASSIFICATION	1.8423080172028284E-5	DESIGN
// delegate already handles PK columns	WITHOUT_CLASSIFICATION	0.9999907253821005	WITHOUT_CLASSIFICATION	9.274617899398858E-6	DESIGN
// we can't batch joined inserts, *especially* not if it is an identity insert; // nor can we batch statements where the expectation is based on an output param	WITHOUT_CLASSIFICATION	0.9999999819096607	WITHOUT_CLASSIFICATION	1.8090339378197416E-8	DESIGN
// Render the SQL query	WITHOUT_CLASSIFICATION	0.9979248811575336	WITHOUT_CLASSIFICATION	0.0020751188424663644	DESIGN
// Write the values of fields onto the prepared statement - we MUST use the state at the time the // insert was issued (cos of foreign key constraints). Not necessarily the object's current state	WITHOUT_CLASSIFICATION	0.9999680139003887	WITHOUT_CLASSIFICATION	3.198609961141629E-5	DESIGN
// TODO : shouldnt inserts be Expectations.NONE?	WITHOUT_CLASSIFICATION	0.9998221448808243	DESIGN	1.7785511917565246E-4	WITHOUT_CLASSIFICATION
//don't bother trying to update, we know there is no row there yet	WITHOUT_CLASSIFICATION	0.6456296543339711	DESIGN	0.3543703456660289	WITHOUT_CLASSIFICATION
//if all fields are null, we might need to delete existing row	WITHOUT_CLASSIFICATION	0.9998638107858885	WITHOUT_CLASSIFICATION	1.3618921411155246E-4	DESIGN
//there is probably a row there, so try to update //if no rows were updated, we will find out	WITHOUT_CLASSIFICATION	0.999893099821267	WITHOUT_CLASSIFICATION	1.0690017873297396E-4	DESIGN
//note: updates to joined tables can't be batched...	WITHOUT_CLASSIFICATION	0.9999969941640366	WITHOUT_CLASSIFICATION	3.005835963456207E-6	DESIGN
// starting index	WITHOUT_CLASSIFICATION	0.9999978577108984	WITHOUT_CLASSIFICATION	2.1422891015861442E-6	DESIGN
//Now write the values of fields onto the prepared statement	WITHOUT_CLASSIFICATION	0.9998230231560182	WITHOUT_CLASSIFICATION	1.7697684398182374E-4	DESIGN
// Write any appropriate versioning conditional parameters	WITHOUT_CLASSIFICATION	0.9999901824839429	WITHOUT_CLASSIFICATION	9.817516057092627E-6	DESIGN
//Render the SQL query	WITHOUT_CLASSIFICATION	0.9969724618492238	WITHOUT_CLASSIFICATION	0.003027538150776281	DESIGN
// Do the key. The key is immutable so we can use the _current_ object state - not necessarily // the state at the time the delete was issued	WITHOUT_CLASSIFICATION	0.9999996280354755	WITHOUT_CLASSIFICATION	3.7196452458269477E-7	DESIGN
// We should use the _current_ object state (ie. after any updates that occurred during flush)	WITHOUT_CLASSIFICATION	0.9999998624209107	WITHOUT_CLASSIFICATION	1.37579089341476E-7	DESIGN
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999689745976148	WITHOUT_CLASSIFICATION	3.102540238513348E-5	DESIGN
//note: dirtyFields==null means we had no snapshot, and we couldn't get one using select-before-update //	WITHOUT_CLASSIFICATION	0.9999746455408131	WITHOUT_CLASSIFICATION	2.5354459186934307E-5	DESIGN
// more specifically : "datetime [op] ?" //      1) if the operator is MINUS, we really cannot determine //          the expected type as either another datetime or //          numeric would be valid //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.9997789566097907	WITHOUT_CLASSIFICATION	2.210433902093187E-4	DESIGN
// For the case of dynamic-update="true", we need to generate the UPDATE SQL	WITHOUT_CLASSIFICATION	0.9999996324703316	WITHOUT_CLASSIFICATION	3.675296683584632E-7	DESIGN
// don't need to check laziness (dirty checking algorithm handles that)	WITHOUT_CLASSIFICATION	0.6433539321883565	DESIGN	0.35664606781164365	WITHOUT_CLASSIFICATION
// For the case of dynamic-update="false", or no snapshot, we use the static SQL	WITHOUT_CLASSIFICATION	0.9999999790053761	WITHOUT_CLASSIFICATION	2.099462387790829E-8	DESIGN
// if not "get", then try "is"	WITHOUT_CLASSIFICATION	0.9999756594313307	WITHOUT_CLASSIFICATION	2.4340568669349776E-5	DESIGN
// Now update only the tables with dirty properties (and the table with the version number)	WITHOUT_CLASSIFICATION	0.9999998695097541	WITHOUT_CLASSIFICATION	1.304902459232164E-7	DESIGN
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999993535232278	WITHOUT_CLASSIFICATION	6.464767721688955E-7	DESIGN
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999993535232278	WITHOUT_CLASSIFICATION	6.464767721688955E-7	DESIGN
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999999945273671	WITHOUT_CLASSIFICATION	5.4726329521557246E-9	DESIGN
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999999945273671	WITHOUT_CLASSIFICATION	5.4726329521557246E-9	DESIGN
// not supported	WITHOUT_CLASSIFICATION	0.9988600571909372	WITHOUT_CLASSIFICATION	0.0011399428090628158	DESIGN
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999689745976148	WITHOUT_CLASSIFICATION	3.102540238513348E-5	DESIGN
// we need to utilize dynamic delete statements	WITHOUT_CLASSIFICATION	0.9999431188945428	WITHOUT_CLASSIFICATION	5.688110545731181E-5	DESIGN
// otherwise, utilize the static delete statements	WITHOUT_CLASSIFICATION	0.9999984067900206	WITHOUT_CLASSIFICATION	1.5932099792830267E-6	DESIGN
//just a performance opt!	WITHOUT_CLASSIFICATION	0.9996986065286232	WITHOUT_CLASSIFICATION	3.013934713768309E-4	DESIGN
//just a performance opt!	WITHOUT_CLASSIFICATION	0.9996986065286232	WITHOUT_CLASSIFICATION	3.013934713768309E-4	DESIGN
//all joins join to the pk of the driving table	WITHOUT_CLASSIFICATION	0.9999997345293111	WITHOUT_CLASSIFICATION	2.6547068885546867E-7	DESIGN
//notice that we skip the first table; it is the driving table!	WITHOUT_CLASSIFICATION	0.9999952280562022	WITHOUT_CLASSIFICATION	4.771943797847206E-6	DESIGN
//we can inner join to superclass tables (the row MUST be there) //we can never inner join to subclass tables	WITHOUT_CLASSIFICATION	0.9998263154617917	WITHOUT_CLASSIFICATION	1.7368453820835572E-4	DESIGN
//skip the driving table	WITHOUT_CLASSIFICATION	0.9999988667784345	WITHOUT_CLASSIFICATION	1.133221565366465E-6	DESIGN
//get 'em in the right order (not that it really matters)	WITHOUT_CLASSIFICATION	0.7788265687960234	WITHOUT_CLASSIFICATION	0.2211734312039766	DESIGN
// here, we work under the following assumptions: //      ------------ valid cases -------------------------------------- //      1) datetime + {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      2) datetime - datetime : always results in a DOUBLE //      3) datetime - {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      ------------ invalid cases ------------------------------------ //      4) datetime + datetime //      5) {something other than datetime} - datetime //      6) datetime * {any type} //      7) datetime / {any type} //      8) {any type} / datetime // doing so allows us to properly handle parameters as either the left // or right side here in the majority of cases	WITHOUT_CLASSIFICATION	0.9999889147744206	WITHOUT_CLASSIFICATION	1.1085225579389516E-5	DESIGN
//render the where and from parts	WITHOUT_CLASSIFICATION	0.9997346694414667	WITHOUT_CLASSIFICATION	2.6533055853319293E-4	DESIGN
//we *could* regerate this inside each called method!	WITHOUT_CLASSIFICATION	0.951490159932994	WITHOUT_CLASSIFICATION	0.04850984006700589	DESIGN
//now render the joins	WITHOUT_CLASSIFICATION	0.9994030318819469	WITHOUT_CLASSIFICATION	5.969681180531184E-4	DESIGN
// This will add the new from element to the origin.	WITHOUT_CLASSIFICATION	0.9999908911560891	WITHOUT_CLASSIFICATION	9.108843910834387E-6	DESIGN
//now render the select clause	WITHOUT_CLASSIFICATION	0.9999994961670375	WITHOUT_CLASSIFICATION	5.038329623952114E-7	DESIGN
//now tie it all together	WITHOUT_CLASSIFICATION	0.999987061743559	WITHOUT_CLASSIFICATION	1.2938256441010093E-5	DESIGN
//insert/update/delete SQL	WITHOUT_CLASSIFICATION	0.9999934673727139	WITHOUT_CLASSIFICATION	6.532627286171066E-6	DESIGN
//select SQL	WITHOUT_CLASSIFICATION	0.9999853694203602	WITHOUT_CLASSIFICATION	1.4630579639906545E-5	DESIGN
//no need to check laziness, dirty checking handles that	WITHOUT_CLASSIFICATION	0.9952458771100404	WITHOUT_CLASSIFICATION	0.004754122889959546	DESIGN
// Fully resolve the map reference, create implicit joins.	WITHOUT_CLASSIFICATION	0.9999075153195115	WITHOUT_CLASSIFICATION	9.248468048852274E-5	DESIGN
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995557236937657	WITHOUT_CLASSIFICATION	4.4427630623424636E-4	DESIGN
// The basic implementation is to simply use the node's text	WITHOUT_CLASSIFICATION	0.9999957328195924	WITHOUT_CLASSIFICATION	4.267180407605102E-6	DESIGN
// for dialects which are known to not support ANSI-SQL row-value-constructor syntax, // we should mutate the tree.	WITHOUT_CLASSIFICATION	0.999978556971122	WITHOUT_CLASSIFICATION	2.1443028877872456E-5	DESIGN
// Due to the complexity in initializing the SelectClause, do not generate one here. // If it is not found; simply return null... // // Also, do not cache since it gets generated well after we are created.	WITHOUT_CLASSIFICATION	0.9999999976458883	WITHOUT_CLASSIFICATION	2.3541116504494378E-9	DESIGN
// check the version unsaved-value, if appropriate	WITHOUT_CLASSIFICATION	0.9999943252593788	WITHOUT_CLASSIFICATION	5.674740621160732E-6	DESIGN
// let this take precedence if defined, since it works for // assigned identifiers	WITHOUT_CLASSIFICATION	0.999999997118237	WITHOUT_CLASSIFICATION	2.8817629568831964E-9	DESIGN
// check the id unsaved-value	WITHOUT_CLASSIFICATION	0.9999970822795027	WITHOUT_CLASSIFICATION	2.917720497299208E-6	DESIGN
// check to see if it is in the second-level cache	WITHOUT_CLASSIFICATION	0.9999986459899984	WITHOUT_CLASSIFICATION	1.3540100015109149E-6	DESIGN
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9998519790339709	WITHOUT_CLASSIFICATION	1.480209660290664E-4	DESIGN
// For property references generate <tablealias>.<columnname> as <projectionalias>	WITHOUT_CLASSIFICATION	0.9999999131990458	WITHOUT_CLASSIFICATION	8.680095416491096E-8	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999987441345871	WITHOUT_CLASSIFICATION	1.255865412910474E-6	DESIGN
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999973902434208	WITHOUT_CLASSIFICATION	2.609756579226756E-6	DESIGN
//force immediate execution of the insert	WITHOUT_CLASSIFICATION	0.9999999498269849	WITHOUT_CLASSIFICATION	5.017301505977454E-8	DESIGN
// If this from element is a collection and the path is a collection property (maxIndex, etc.) then // generate a sub-query.	WITHOUT_CLASSIFICATION	0.9999986283158526	WITHOUT_CLASSIFICATION	1.3716841473689262E-6	DESIGN
// entities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999848508612309	WITHOUT_CLASSIFICATION	1.5149138769178232E-5	DESIGN
// collections ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997357204842	WITHOUT_CLASSIFICATION	2.6427951585727974E-7	DESIGN
//cannot occur	WITHOUT_CLASSIFICATION	0.9997423638074591	WITHOUT_CLASSIFICATION	2.5763619254100766E-4	DESIGN
//cannot occur	WITHOUT_CLASSIFICATION	0.9997423638074591	WITHOUT_CLASSIFICATION	2.5763619254100766E-4	DESIGN
// only carry on if the method has no parameters	WITHOUT_CLASSIFICATION	0.9999975489198355	WITHOUT_CLASSIFICATION	2.451080164486272E-6	DESIGN
// try "get"	WITHOUT_CLASSIFICATION	0.9999945090300895	WITHOUT_CLASSIFICATION	5.490969910581728E-6	DESIGN
// do nothing...	WITHOUT_CLASSIFICATION	0.999822541373734	WITHOUT_CLASSIFICATION	1.7745862626604634E-4	DESIGN
// do nothing...	WITHOUT_CLASSIFICATION	0.999822541373734	WITHOUT_CLASSIFICATION	1.7745862626604634E-4	DESIGN
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9999896396331601	WITHOUT_CLASSIFICATION	1.0360366839891176E-5	DESIGN
// this page intentionally left blank :)	WITHOUT_CLASSIFICATION	0.9999601428651583	WITHOUT_CLASSIFICATION	3.9857134841696756E-5	DESIGN
// do not do anything	WITHOUT_CLASSIFICATION	0.9999984860902249	WITHOUT_CLASSIFICATION	1.5139097750266839E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.9966662531954268	WITHOUT_CLASSIFICATION	0.003333746804573307	DESIGN
// ignore	WITHOUT_CLASSIFICATION	0.9999998176961284	WITHOUT_CLASSIFICATION	1.8230387158018292E-7	DESIGN
//cant instantiate	WITHOUT_CLASSIFICATION	0.9982292256212308	WITHOUT_CLASSIFICATION	0.0017707743787691622	DESIGN
//if it is a property of an embedded component, invoke on the "identifier"	WITHOUT_CLASSIFICATION	0.9999357883038011	WITHOUT_CLASSIFICATION	6.421169619885461E-5	DESIGN
// otherwise:	WITHOUT_CLASSIFICATION	0.9982738033276293	WITHOUT_CLASSIFICATION	0.0017261966723706823	DESIGN
// skip finalize methods	WITHOUT_CLASSIFICATION	0.9999479420902597	WITHOUT_CLASSIFICATION	5.2057909740146056E-5	DESIGN
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9893472334665702	WITHOUT_CLASSIFICATION	0.010652766533429791	DESIGN
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9893472334665702	WITHOUT_CLASSIFICATION	0.010652766533429791	DESIGN
// HHH-2481 make sure the callback gets cleared, otherwise the instance stays in a static thread local.	WITHOUT_CLASSIFICATION	0.9856837066495268	WITHOUT_CLASSIFICATION	0.014316293350473158	DESIGN
// while constructor is running	WITHOUT_CLASSIFICATION	0.9999731558763225	WITHOUT_CLASSIFICATION	2.6844123677390865E-5	DESIGN
// while constructor is running	WITHOUT_CLASSIFICATION	0.9999731558763225	WITHOUT_CLASSIFICATION	2.6844123677390865E-5	DESIGN
// note: interface is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9993393814114684	WITHOUT_CLASSIFICATION	6.606185885316641E-4	DESIGN
// interfaces // arguments	WITHOUT_CLASSIFICATION	0.9999974782431928	WITHOUT_CLASSIFICATION	2.521756807122137E-6	DESIGN
//TODO!	WITHOUT_CLASSIFICATION	0.9152052574947123	WITHOUT_CLASSIFICATION	0.08479474250528773	DESIGN
// Get the caller	WITHOUT_CLASSIFICATION	0.999999712549092	WITHOUT_CLASSIFICATION	2.874509079146621E-7	DESIGN
// Get the caller principals	WITHOUT_CLASSIFICATION	0.9999998072648345	WITHOUT_CLASSIFICATION	1.927351655213575E-7	DESIGN
//private static final Alias DEFAULT_ALIAS = new Alias(10, null);	WITHOUT_CLASSIFICATION	0.999999998840863	WITHOUT_CLASSIFICATION	1.1591370393141927E-9	DESIGN
// Needed to bump this up to DotNode, because that is the only thing which currently // knows about the property-ref path in the correct format; it is either this, or // recurse over the DotNodes constructing the property path just like DotNode does // internally	WITHOUT_CLASSIFICATION	0.9999998088611144	WITHOUT_CLASSIFICATION	1.9113888553613052E-7	DESIGN
//if the identifier is quoted, remove the quotes	WITHOUT_CLASSIFICATION	0.9999890729176683	WITHOUT_CLASSIFICATION	1.0927082331764E-5	DESIGN
//truncate the identifier to the max alias length, less the suffix length	WITHOUT_CLASSIFICATION	0.9999994065075537	WITHOUT_CLASSIFICATION	5.934924462408436E-7	DESIGN
//full joins are not supported.. yet!	WITHOUT_CLASSIFICATION	0.9989692349218984	WITHOUT_CLASSIFICATION	0.0010307650781015247	DESIGN
// null is not considered the same type as Integer. //$NON-NLS-1 //$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999995256931641	WITHOUT_CLASSIFICATION	4.7430683588010844E-7	DESIGN
// the outerJoinsAfterWhere needs to come before where clause to properly // handle dynamic filters	WITHOUT_CLASSIFICATION	0.9999974414201636	WITHOUT_CLASSIFICATION	2.5585798364288253E-6	DESIGN
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999720271702015	WITHOUT_CLASSIFICATION	2.7972829798459186E-5	DESIGN
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999720271702015	WITHOUT_CLASSIFICATION	2.7972829798459186E-5	DESIGN
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999720271702015	WITHOUT_CLASSIFICATION	2.7972829798459186E-5	DESIGN
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999720271702015	WITHOUT_CLASSIFICATION	2.7972829798459186E-5	DESIGN
// strip off any leading 'and' token	WITHOUT_CLASSIFICATION	0.9999999319642859	WITHOUT_CLASSIFICATION	6.803571408017947E-8	DESIGN
// if the condition is not already there...	WITHOUT_CLASSIFICATION	0.999949789354987	WITHOUT_CLASSIFICATION	5.021064501300771E-5	DESIGN
//dontSpace.add("'");	WITHOUT_CLASSIFICATION	0.9999939344697832	WITHOUT_CLASSIFICATION	6.0655302167015585E-6	DESIGN
//for MySQL	WITHOUT_CLASSIFICATION	0.9996288580411261	WITHOUT_CLASSIFICATION	3.7114195887381646E-4	DESIGN
//HashMap columnsUnique = new HashMap();	WITHOUT_CLASSIFICATION	0.9999997862724629	WITHOUT_CLASSIFICATION	2.137275370152044E-7	DESIGN
//null caused some problems	WITHOUT_CLASSIFICATION	0.9984154102622064	WITHOUT_CLASSIFICATION	0.0015845897377936614	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.9998094328207842	WITHOUT_CLASSIFICATION	1.9056717921580864E-4	DESIGN
//not sure if this would ever be null but wanted to be careful	WITHOUT_CLASSIFICATION	0.9982869033898929	WITHOUT_CLASSIFICATION	0.0017130966101070383	DESIGN
//even on inverse="true"	WITHOUT_CLASSIFICATION	0.9999962306456067	WITHOUT_CLASSIFICATION	3.769354393322993E-6	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.9998094328207842	WITHOUT_CLASSIFICATION	1.9056717921580864E-4	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.9998094328207842	WITHOUT_CLASSIFICATION	1.9056717921580864E-4	DESIGN
// If true then execute db updates, otherwise just generate and display updates	WITHOUT_CLASSIFICATION	0.9999999631497278	WITHOUT_CLASSIFICATION	3.685027221164905E-8	DESIGN
// we only release the connection	WITHOUT_CLASSIFICATION	0.9999998355979353	WITHOUT_CLASSIFICATION	1.6440206481557424E-7	DESIGN
// deprecated option...	WITHOUT_CLASSIFICATION	0.9969032672654207	WITHOUT_CLASSIFICATION	0.0030967327345793956	DESIGN
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9998974180690403	WITHOUT_CLASSIFICATION	1.0258193095972038E-4	DESIGN
//actually, this last test is probably unnecessary, since  //beforeCompletion() doesn't get called during rollback	WITHOUT_CLASSIFICATION	0.9999973619588558	WITHOUT_CLASSIFICATION	2.6380411442414338E-6	DESIGN
// this one only really needed for badly-behaved applications! // (if the TransactionManager has a Sychronization registered, // its a noop) // (actually we do need it for downgrading locks)	WITHOUT_CLASSIFICATION	0.9999999765623105	WITHOUT_CLASSIFICATION	2.343768938155677E-8	DESIGN
// Create an DotNode AST for the path and resolve it.	WITHOUT_CLASSIFICATION	0.9999221501061919	WITHOUT_CLASSIFICATION	7.78498938080497E-5	DESIGN
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9998974180690403	WITHOUT_CLASSIFICATION	1.0258193095972038E-4	DESIGN
//if we could not register a synchronization, //do the before/after completion callbacks //ourself (but we need to let jdbcContext //know that this is what we are going to //do, so it doesn't keep trying to register //synchronizations)	WITHOUT_CLASSIFICATION	0.9999999527023996	WITHOUT_CLASSIFICATION	4.729760036979822E-8	DESIGN
// swallow it, and continue to roll back JTA transaction	WITHOUT_CLASSIFICATION	0.9998528611501543	WITHOUT_CLASSIFICATION	1.4713884984579457E-4	DESIGN
// so the transaction is already rolled back, by JTA spec	WITHOUT_CLASSIFICATION	0.9999993947681604	WITHOUT_CLASSIFICATION	6.052318397105467E-7	DESIGN
// this method is a noop if there is a Synchronization!	WITHOUT_CLASSIFICATION	0.9997234166996107	WITHOUT_CLASSIFICATION	2.7658330038935304E-4	DESIGN
// two conditions where we need to transform this to a theta-join syntax: //      1) 'elem' is the "root from-element" in correlated subqueries //      2) The DotNode.useThetaStyleImplicitJoins has been set to true //          and 'elem' represents an implicit join	WITHOUT_CLASSIFICATION	0.999955437040235	WITHOUT_CLASSIFICATION	4.456295976492199E-5	DESIGN
// WebSphere, however, is not a sane JEE/JTA container...	WITHOUT_CLASSIFICATION	0.9968902105806592	WITHOUT_CLASSIFICATION	0.003109789419340866	DESIGN
// for sane JEE/JTA containers, the transaction itself functions as its identifier...	WITHOUT_CLASSIFICATION	0.9999969363205011	WITHOUT_CLASSIFICATION	3.0636794989245745E-6	DESIGN
//swallow, the transaction was finished	WITHOUT_CLASSIFICATION	0.99999448634876	WITHOUT_CLASSIFICATION	5.51365124004848E-6	DESIGN
// all AliasToEntityMapResultTransformer are considered equal ~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992809524424	WITHOUT_CLASSIFICATION	7.190475576513346E-7	DESIGN
// Create the join element under the from element.	WITHOUT_CLASSIFICATION	0.9999974026875899	WITHOUT_CLASSIFICATION	2.5973124101922058E-6	DESIGN
// all DistinctRootEntityResultTransformer are considered equal ~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997702730324	WITHOUT_CLASSIFICATION	2.2972696754700931E-7	DESIGN
// map of EntityMode -> Tuplizer	WITHOUT_CLASSIFICATION	0.9999995053544408	WITHOUT_CLASSIFICATION	4.946455591386515E-7	DESIGN
// this is a virtual id property...	WITHOUT_CLASSIFICATION	0.9987020779924615	WITHOUT_CLASSIFICATION	0.001297922007538473	DESIGN
//this one needed only for guessEntityMode()	WITHOUT_CLASSIFICATION	0.9471997490918183	WITHOUT_CLASSIFICATION	0.05280025090818167	DESIGN
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999890332496316	WITHOUT_CLASSIFICATION	1.0966750368327342E-5	DESIGN
// todo : move this to SF per HHH-3517; also see HHH-1907 and ComponentMetamodel	WITHOUT_CLASSIFICATION	0.9264431821264231	WITHOUT_CLASSIFICATION	0.07355681787357701	DESIGN
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.999993472169022	WITHOUT_CLASSIFICATION	6.527830977905049E-6	DESIGN
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999947205107607	WITHOUT_CLASSIFICATION	5.279489239302427E-6	DESIGN
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.999953912411976	WITHOUT_CLASSIFICATION	4.608758802403294E-5	DESIGN
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999947205107607	WITHOUT_CLASSIFICATION	5.279489239302427E-6	DESIGN
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999999823648694	WITHOUT_CLASSIFICATION	1.763513065263261E-8	DESIGN
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9998830329541228	WITHOUT_CLASSIFICATION	1.1696704587710372E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9966662531954268	WITHOUT_CLASSIFICATION	0.003333746804573307	DESIGN
// cached for efficiency...	WITHOUT_CLASSIFICATION	0.9994823200044184	WITHOUT_CLASSIFICATION	5.176799955815699E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9966662531954268	WITHOUT_CLASSIFICATION	0.003333746804573307	DESIGN
//	WITHOUT_CLASSIFICATION	0.9966662531954268	WITHOUT_CLASSIFICATION	0.003333746804573307	DESIGN
//it was not embedded, so the argument is just an id	WITHOUT_CLASSIFICATION	0.9998009161358006	WITHOUT_CLASSIFICATION	1.9908386419954373E-4	DESIGN
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.999993472169022	WITHOUT_CLASSIFICATION	6.527830977905049E-6	DESIGN
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.999953912411976	WITHOUT_CLASSIFICATION	4.608758802403294E-5	DESIGN
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999999823648694	WITHOUT_CLASSIFICATION	1.763513065263261E-8	DESIGN
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999164799479922	WITHOUT_CLASSIFICATION	8.352005200780357E-5	DESIGN
//return currentId;	WITHOUT_CLASSIFICATION	0.9999719048876807	WITHOUT_CLASSIFICATION	2.8095112319196883E-5	DESIGN
//reset the id	WITHOUT_CLASSIFICATION	0.9998698012829049	WITHOUT_CLASSIFICATION	1.301987170949958E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9966662531954268	WITHOUT_CLASSIFICATION	0.003333746804573307	DESIGN
//reset the version	WITHOUT_CLASSIFICATION	0.9999861972144702	WITHOUT_CLASSIFICATION	1.380278552963348E-5	DESIGN
// the default is to simply not lazy fetch properties for now...	WITHOUT_CLASSIFICATION	0.9962794874131806	WITHOUT_CLASSIFICATION	0.003720512586819341	DESIGN
// Add the second join, the one that ends in the destination table.	WITHOUT_CLASSIFICATION	0.9999999749865685	WITHOUT_CLASSIFICATION	2.5013431562544334E-8	DESIGN
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995557236937657	WITHOUT_CLASSIFICATION	4.4427630623424636E-4	DESIGN
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9998830329541228	WITHOUT_CLASSIFICATION	1.1696704587710372E-4	DESIGN
// determine the id getter and setter methods from the proxy interface (if any) // determine all interfaces needed by the resulting proxy	WITHOUT_CLASSIFICATION	0.9998785508716385	WITHOUT_CLASSIFICATION	1.2144912836154186E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9966662531954268	WITHOUT_CLASSIFICATION	0.003333746804573307	DESIGN
//not final because proxy factory creation can fail	WITHOUT_CLASSIFICATION	0.9999317813774655	WITHOUT_CLASSIFICATION	6.821862253450317E-5	DESIGN
// superclass entity-name	WITHOUT_CLASSIFICATION	0.9999950498776955	WITHOUT_CLASSIFICATION	4.95012230453934E-6	DESIGN
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995557236937657	WITHOUT_CLASSIFICATION	4.4427630623424636E-4	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999987441345871	WITHOUT_CLASSIFICATION	1.255865412910474E-6	DESIGN
//init the aliases, after initing the constructornode	WITHOUT_CLASSIFICATION	0.9999838311533839	WITHOUT_CLASSIFICATION	1.6168846616142726E-5	DESIGN
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995557236937657	WITHOUT_CLASSIFICATION	4.4427630623424636E-4	DESIGN
// legacy behavior (with no abstract attribute specified)	WITHOUT_CLASSIFICATION	0.9999997377599924	WITHOUT_CLASSIFICATION	2.6224000760801684E-7	DESIGN
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.999999869350375	WITHOUT_CLASSIFICATION	1.3064962508875784E-7	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999987441345871	WITHOUT_CLASSIFICATION	1.255865412910474E-6	DESIGN
//note: this affects the return value!	WITHOUT_CLASSIFICATION	0.9999856487509154	WITHOUT_CLASSIFICATION	1.4351249084605703E-5	DESIGN
// Need to account for allowable '_' within the variant	WITHOUT_CLASSIFICATION	0.9999993614400235	WITHOUT_CLASSIFICATION	6.385599764496381E-7	DESIGN
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999965251944113	WITHOUT_CLASSIFICATION	3.474805588683976E-6	DESIGN
// Collection Types:	WITHOUT_CLASSIFICATION	0.9999955810216505	WITHOUT_CLASSIFICATION	4.418978349533974E-6	DESIGN
// convenience methods relating to operations across arrays of types...	WITHOUT_CLASSIFICATION	0.9999579491118682	WITHOUT_CLASSIFICATION	4.2050888131809245E-5	DESIGN
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999919523058588	WITHOUT_CLASSIFICATION	8.047694141225108E-6	DESIGN
//Blobs are ignored by merge()	WITHOUT_CLASSIFICATION	0.9999998127859063	WITHOUT_CLASSIFICATION	1.8721409378806592E-7	DESIGN
//value is the entity name	WITHOUT_CLASSIFICATION	0.9995873344141044	WITHOUT_CLASSIFICATION	4.1266558589564964E-4	DESIGN
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999693757856706	WITHOUT_CLASSIFICATION	3.0624214329312446E-5	DESIGN
// generate id select fragment and then property select fragment for // each expression, just like generateSelectFragments().	WITHOUT_CLASSIFICATION	0.9999992547058941	WITHOUT_CLASSIFICATION	7.45294105821296E-7	DESIGN
//TODO!	WITHOUT_CLASSIFICATION	0.9152052574947123	WITHOUT_CLASSIFICATION	0.08479474250528773	DESIGN
//xml is the entity name	WITHOUT_CLASSIFICATION	0.9996388032151561	WITHOUT_CLASSIFICATION	3.611967848438729E-4	DESIGN
//special case ... this is the leaf of the containment graph, even though not immutable	WITHOUT_CLASSIFICATION	0.9993725517944531	WITHOUT_CLASSIFICATION	6.27448205546906E-4	DESIGN
//tolerates nulls	WITHOUT_CLASSIFICATION	0.9999693517415932	WITHOUT_CLASSIFICATION	3.064825840681438E-5	DESIGN
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9999414769123106	WITHOUT_CLASSIFICATION	5.852308768942169E-5	DESIGN
// metaType is assumed to be single-column type	WITHOUT_CLASSIFICATION	0.9999950496694402	WITHOUT_CLASSIFICATION	4.950330559757271E-6	DESIGN
// Get all the select expressions (that we just generated) and render the select.	WITHOUT_CLASSIFICATION	0.9999975781065916	WITHOUT_CLASSIFICATION	2.421893408478198E-6	DESIGN
// Look through the FromElement's children to find any collections of values that should be fetched...	WITHOUT_CLASSIFICATION	0.9999976058406045	WITHOUT_CLASSIFICATION	2.3941593955475853E-6	DESIGN
//return AssociationType.FOREIGN_KEY_TO_PARENT; //this is better but causes a transient object exception...	WITHOUT_CLASSIFICATION	0.9614629417487138	WITHOUT_CLASSIFICATION	0.038537058251286144	DESIGN
// Use the lower case function name. // Remember whether we're in a SELECT clause or not.	WITHOUT_CLASSIFICATION	0.9999995083059497	WITHOUT_CLASSIFICATION	4.916940502337533E-7	DESIGN
// IDENT might be the name of a class.	WITHOUT_CLASSIFICATION	0.999937593162367	WITHOUT_CLASSIFICATION	6.240683763310555E-5	DESIGN
//TODO!!!	WITHOUT_CLASSIFICATION	0.6118843587730386	WITHOUT_CLASSIFICATION	0.3881156412269614	DESIGN
//st.setTimestamp( index,  new Timestamp( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9999988611428505	WITHOUT_CLASSIFICATION	1.1388571494774552E-6	DESIGN
//st.setDate( index,  new Date( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9999919897005746	WITHOUT_CLASSIFICATION	8.01029942543283E-6	DESIGN
// both are Timestamps	WITHOUT_CLASSIFICATION	0.9999998455435695	WITHOUT_CLASSIFICATION	1.5445643056849073E-7	DESIGN
// at least one is a plain old Date	WITHOUT_CLASSIFICATION	0.999991946890434	WITHOUT_CLASSIFICATION	8.053109566034679E-6	DESIGN
//noop	WITHOUT_CLASSIFICATION	0.9999666301833641	WITHOUT_CLASSIFICATION	3.33698166358793E-5	DESIGN
// if the corresponding SQL value is NULL, the reader we got is NULL as well	WITHOUT_CLASSIFICATION	0.9999991984890086	WITHOUT_CLASSIFICATION	8.015109913312196E-7	DESIGN
// Fetch Reader content up to the end - and put characters in a StringBuffer	WITHOUT_CLASSIFICATION	0.9998471153659264	WITHOUT_CLASSIFICATION	1.5288463407350575E-4	DESIGN
// Return StringBuffer content as a large String	WITHOUT_CLASSIFICATION	0.9999990351799303	WITHOUT_CLASSIFICATION	9.64820069741813E-7	DESIGN
//or Types.LONGVARCHAR?	WITHOUT_CLASSIFICATION	0.9983705617308503	WITHOUT_CLASSIFICATION	0.0016294382691497721	DESIGN
//Not called at runtime so doesn't matter if its slow :)	WITHOUT_CLASSIFICATION	0.9993197844757972	WITHOUT_CLASSIFICATION	6.80215524202752E-4	DESIGN
//TODO	WITHOUT_CLASSIFICATION	0.9973361991312466	WITHOUT_CLASSIFICATION	0.002663800868753343	DESIGN
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999999568200346	WITHOUT_CLASSIFICATION	4.317996528794524E-8	DESIGN
//different nullability rules for pk/fk	WITHOUT_CLASSIFICATION	0.9994354257096463	WITHOUT_CLASSIFICATION	5.645742903536676E-4	DESIGN
//cache this	WITHOUT_CLASSIFICATION	0.9977337979801313	WITHOUT_CLASSIFICATION	0.002266202019868817	DESIGN
//only really need new array during semiresolve!	WITHOUT_CLASSIFICATION	0.9999902325209648	WITHOUT_CLASSIFICATION	9.767479035263383E-6	DESIGN
// Forcefully remove leading ands from where fragments; the grammar will // handle adding them	WITHOUT_CLASSIFICATION	0.9998816291442576	WITHOUT_CLASSIFICATION	1.1837085574231756E-4	DESIGN
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.766581998187349	WITHOUT_CLASSIFICATION	0.2334180018126511	DESIGN
// Create a new FILTERS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999999113810547	WITHOUT_CLASSIFICATION	8.861894532344302E-8	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999987441345871	WITHOUT_CLASSIFICATION	1.255865412910474E-6	DESIGN
//public Object instantiate(Object parent, SessionImplementor session) throws HibernateException;	WITHOUT_CLASSIFICATION	0.6117618389323641	DESIGN	0.3882381610676358	WITHOUT_CLASSIFICATION
//nothing to do	WITHOUT_CLASSIFICATION	0.9999747335005352	WITHOUT_CLASSIFICATION	2.5266499464653865E-5	DESIGN
//nothing to do	WITHOUT_CLASSIFICATION	0.9999747335005352	WITHOUT_CLASSIFICATION	2.5266499464653865E-5	DESIGN
// VersionType impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //      Note : simply returns null for seed() and next() as the only known //      application of binary types for versioning is for use with the //      TIMESTAMP datatype supported by Sybase and SQL Server, which //      are completely db-generated values...	WITHOUT_CLASSIFICATION	0.9999999718973289	WITHOUT_CLASSIFICATION	2.810267100323658E-8	DESIGN
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999919523058588	WITHOUT_CLASSIFICATION	8.047694141225108E-6	DESIGN
//not really necessary, I guess...	WITHOUT_CLASSIFICATION	0.9153308205105695	WITHOUT_CLASSIFICATION	0.08466917948943059	DESIGN
//Clobs are ignored by merge() operation	WITHOUT_CLASSIFICATION	0.9999999203348731	WITHOUT_CLASSIFICATION	7.966512696822887E-8	DESIGN
// we do not have to worry about queued additions to uninitialized // collections, since they can only occur for inverse collections!	WITHOUT_CLASSIFICATION	0.999999938341213	WITHOUT_CLASSIFICATION	6.165878695537905E-8	DESIGN
// collections cannot be compared	WITHOUT_CLASSIFICATION	0.9999999646477276	WITHOUT_CLASSIFICATION	3.5352272485474874E-8	DESIGN
//remember the uk value	WITHOUT_CLASSIFICATION	0.999972406919953	WITHOUT_CLASSIFICATION	2.7593080046948174E-5	DESIGN
//NOOP	WITHOUT_CLASSIFICATION	0.9998838712800703	WITHOUT_CLASSIFICATION	1.1612871992973018E-4	DESIGN
//processCollectionProperty(token, q.getCollectionPersister(collectionRole), collectionName);	WITHOUT_CLASSIFICATION	0.9999999473106872	WITHOUT_CLASSIFICATION	5.268931282922566E-8	DESIGN
//we must use the "remembered" uk value, since it is  //not available from the EntityEntry during assembly	WITHOUT_CLASSIFICATION	0.9999614579928079	WITHOUT_CLASSIFICATION	3.854200719214983E-5	DESIGN
// collections don't dirty an unversioned parent entity	WITHOUT_CLASSIFICATION	0.9986128209071645	WITHOUT_CLASSIFICATION	0.0013871790928355206	DESIGN
// return false;	WITHOUT_CLASSIFICATION	0.9999775479890938	WITHOUT_CLASSIFICATION	2.245201090628637E-5	DESIGN
// This just handles a particular case of component // projection, perhaps get rid of it and throw an exception	WITHOUT_CLASSIFICATION	0.5933522929047543	DESIGN	0.4066477070952456	WITHOUT_CLASSIFICATION
//NOTE: we avoid joining to the next table if the named property is just the foreign key value	WITHOUT_CLASSIFICATION	0.9999991125450017	WITHOUT_CLASSIFICATION	8.874549982545201E-7	DESIGN
// the key is the owning entity itself, so get the ID from the key	WITHOUT_CLASSIFICATION	0.999985385508434	WITHOUT_CLASSIFICATION	1.461449156613469E-5	DESIGN
// if the original is a PersistentCollection, and that original // was not flagged as dirty, then reset the target's dirty flag // here after the copy operation. // </p> // One thing to be careful of here is a "bare" original collection // in which case we should never ever ever reset the dirty flag // on the target because we simply do not know...	WITHOUT_CLASSIFICATION	0.9999998921707963	WITHOUT_CLASSIFICATION	1.0782920362651017E-7	DESIGN
//ignore subselect keywords	WITHOUT_CLASSIFICATION	0.9999999988638052	WITHOUT_CLASSIFICATION	1.1361947225446943E-9	DESIGN
// copy elements into newly empty target collection	WITHOUT_CLASSIFICATION	0.9999999939339312	WITHOUT_CLASSIFICATION	6.066068748813359E-9	DESIGN
// for a null target, or a target which is the same as the original, we // need to put the merged elements in a new collection	WITHOUT_CLASSIFICATION	0.9999989130082926	WITHOUT_CLASSIFICATION	1.0869917074882192E-6	DESIGN
// by default just use an unanticipated capacity since we don't // know how to extract the capacity to use from original here...	WITHOUT_CLASSIFICATION	0.9957341502262816	WITHOUT_CLASSIFICATION	0.004265849773718364	DESIGN
// get the elements back into the target making sure to handle dirty flag	WITHOUT_CLASSIFICATION	0.9999988300165152	WITHOUT_CLASSIFICATION	1.169983484795217E-6	DESIGN
// check if collection is currently being loaded	WITHOUT_CLASSIFICATION	0.9999858519437089	WITHOUT_CLASSIFICATION	1.4148056290955498E-5	DESIGN
// check if it is already completely loaded, but unowned	WITHOUT_CLASSIFICATION	0.9999998931096017	WITHOUT_CLASSIFICATION	1.0689039822170169E-7	DESIGN
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999999543596255	WITHOUT_CLASSIFICATION	4.564037446497796E-8	DESIGN
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.766581998187349	WITHOUT_CLASSIFICATION	0.2334180018126511	DESIGN
// create a new collection wrapper, to be initialized later	WITHOUT_CLASSIFICATION	0.9999907839048083	WITHOUT_CLASSIFICATION	9.216095191654399E-6	DESIGN
// Some JDBC drivers erroneously return an empty array here for a null DB value :/	WITHOUT_CLASSIFICATION	0.99999190087902	WITHOUT_CLASSIFICATION	8.099120979967006E-6	DESIGN
// our column span is the number of columns in the PK	WITHOUT_CLASSIFICATION	0.9999999588847854	WITHOUT_CLASSIFICATION	4.111521455543148E-8	DESIGN
//cannot batch fetch by unique key (property-ref associations)	WITHOUT_CLASSIFICATION	0.9999988476929025	WITHOUT_CLASSIFICATION	1.152307097456721E-6	DESIGN
// we already know current is not null...	WITHOUT_CLASSIFICATION	0.9996568773521126	WITHOUT_CLASSIFICATION	3.431226478873686E-4	DESIGN
// the ids are fully resolved, so compare them with isDirty(), not isModified()	WITHOUT_CLASSIFICATION	0.9999914185746439	WITHOUT_CLASSIFICATION	8.581425356005392E-6	DESIGN
//the owner of the association is not the owner of the id	WITHOUT_CLASSIFICATION	0.9999979498783066	WITHOUT_CLASSIFICATION	2.0501216934580944E-6	DESIGN
// ----------------------------------------------------------- Constructors	WITHOUT_CLASSIFICATION	0.9999992786827779	WITHOUT_CLASSIFICATION	7.213172221648538E-7	DESIGN
// ----------------------------------------------------- Instance Variables	WITHOUT_CLASSIFICATION	0.9999999765105502	WITHOUT_CLASSIFICATION	2.348944980091137E-8	DESIGN
//	WITHOUT_CLASSIFICATION	0.9966662531954268	WITHOUT_CLASSIFICATION	0.003333746804573307	DESIGN
// --------------------------------------------------------- Public Methods	WITHOUT_CLASSIFICATION	0.9999930529863799	WITHOUT_CLASSIFICATION	6.947013620161998E-6	DESIGN
// Compare the two maps for equality	WITHOUT_CLASSIFICATION	0.9999999687810359	WITHOUT_CLASSIFICATION	3.121896411853969E-8	DESIGN
// Simple tests that require no synchronization	WITHOUT_CLASSIFICATION	0.9999999926236668	WITHOUT_CLASSIFICATION	7.376333330953964E-9	DESIGN
//Sybase fail if we don't do that, sigh...	WITHOUT_CLASSIFICATION	0.9984732133631293	WITHOUT_CLASSIFICATION	0.001526786636870711	DESIGN
// Handles things like: // a and b or c // a and ( b or c ) // not a and not b // not ( a and b ) // x between y and z            (overloaded "and") // x in ( a, b, c )             (overloaded brackets) // not not a // a is not null                (overloaded "not") // etc...... // and expressions like // foo = bar                    (maps to: foo.id = bar.id) // foo.Bar = 'foo'              (maps to: foo.bar = 'foo') // foo.Bar.Baz = 1.0            (maps to: foo.bar = bar.id and bar.baz = 1.0) // 1.0 = foo.Bar.Baz            (maps to: bar.baz = 1.0 and foo.Bar = bar.id) // foo.Bar.Baz = a.B.C          (maps to: bar.Baz = b.C and foo.Bar = bar.id and a.B = b.id) // foo.Bar.Baz + a.B.C          (maps to: bar.Baz + b.C and foo.Bar = bar.id and a.B = b.id) // ( foo.Bar.Baz + 1.0 ) < 2.0  (maps to: ( bar.Baz + 1.0 ) < 2.0 and foo.Bar = bar.id)	WITHOUT_CLASSIFICATION	0.9998770037199043	WITHOUT_CLASSIFICATION	1.2299628009577828E-4	DESIGN
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9999695221510779	WITHOUT_CLASSIFICATION	3.047784892205481E-5	DESIGN
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9999695221510779	WITHOUT_CLASSIFICATION	3.047784892205481E-5	DESIGN
// try to "pretty print" it	WITHOUT_CLASSIFICATION	0.9999377210451471	WITHOUT_CLASSIFICATION	6.227895485292027E-5	DESIGN
// otherwise, just dump it	WITHOUT_CLASSIFICATION	0.9999207063523516	WITHOUT_CLASSIFICATION	7.929364764842332E-5	DESIGN
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9999238202651931	WITHOUT_CLASSIFICATION	7.617973480691717E-5	DESIGN
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9999238202651931	WITHOUT_CLASSIFICATION	7.617973480691717E-5	DESIGN
// use default behavior	WITHOUT_CLASSIFICATION	0.9999557605935285	WITHOUT_CLASSIFICATION	4.423940647156444E-5	DESIGN
//NOTE: early return	WITHOUT_CLASSIFICATION	0.9997606654945316	WITHOUT_CLASSIFICATION	2.3933450546836143E-4	DESIGN
// the MRU cache used to keep hard references to the most recently used query plans; // note : LRU here is a bit of a misnomer, it indicates that LRU entries are removed, the // actual kept entries are the MRU entries	WITHOUT_CLASSIFICATION	0.8741246457515933	WITHOUT_CLASSIFICATION	0.1258753542484067	DESIGN
// we want to be able to just use the defaults, // if JNDI environment properties are not supplied // so don't put null in anywhere	WITHOUT_CLASSIFICATION	0.9999996429388114	WITHOUT_CLASSIFICATION	3.5706118864238515E-7	DESIGN
// Clone //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999999713907587	WITHOUT_CLASSIFICATION	2.8609241392920183E-8	DESIGN
// Serialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999999846807798	WITHOUT_CLASSIFICATION	1.5319220241182666E-8	DESIGN
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999988623276369	WITHOUT_CLASSIFICATION	1.137672363093399E-6	DESIGN
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999988623276369	WITHOUT_CLASSIFICATION	1.137672363093399E-6	DESIGN
// Deserialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.999999983633912	WITHOUT_CLASSIFICATION	1.6366087992147277E-8	DESIGN
/* static methods only - hide constructor */	WITHOUT_CLASSIFICATION	0.9965052665186411	WITHOUT_CLASSIFICATION	0.003494733481358964	DESIGN
/*&& !('_'==character)*/	WITHOUT_CLASSIFICATION	0.9999946304641945	WITHOUT_CLASSIFICATION	5.369535805544029E-6	DESIGN
// returnign null!	WITHOUT_CLASSIFICATION	0.999990135394642	WITHOUT_CLASSIFICATION	9.864605358026953E-6	DESIGN
// returnign null!	WITHOUT_CLASSIFICATION	0.999990135394642	WITHOUT_CLASSIFICATION	9.864605358026953E-6	DESIGN
// includes last '.'	WITHOUT_CLASSIFICATION	0.9999999338787668	WITHOUT_CLASSIFICATION	6.612123319234739E-8	DESIGN
// +1 to include the following '.'	WITHOUT_CLASSIFICATION	0.9999999207805722	WITHOUT_CLASSIFICATION	7.921942779510611E-8	DESIGN
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.998138797278522	WITHOUT_CLASSIFICATION	0.0018612027214781333	DESIGN
// first time we find match!	WITHOUT_CLASSIFICATION	0.999998979203682	WITHOUT_CLASSIFICATION	1.0207963180559171E-6	DESIGN
// entityNames may now include slashes for the representations //classname may be an inner class	WITHOUT_CLASSIFICATION	0.9999723138015182	WITHOUT_CLASSIFICATION	2.7686198481861615E-5	DESIGN
// wrapped iterators	WITHOUT_CLASSIFICATION	0.9999865534765984	WITHOUT_CLASSIFICATION	1.3446523401685137E-5	DESIGN
// index of current iterator in the wrapped iterators array	WITHOUT_CLASSIFICATION	0.9999319492795509	WITHOUT_CLASSIFICATION	6.805072044915411E-5	DESIGN
// the current iterator	WITHOUT_CLASSIFICATION	0.9999645327188857	WITHOUT_CLASSIFICATION	3.54672811142539E-5	DESIGN
// the last used iterator	WITHOUT_CLASSIFICATION	0.9991886536745679	WITHOUT_CLASSIFICATION	8.113463254320685E-4	DESIGN
//it was a boolean expression	WITHOUT_CLASSIFICATION	0.9999891415106387	WITHOUT_CLASSIFICATION	1.0858489361210977E-5	DESIGN
/*public static Object[] clone(Class elementClass, Object[] array) {	WITHOUT_CLASSIFICATION	0.9896957180024031	WITHOUT_CLASSIFICATION	0.010304281997596896	DESIGN
// call this before any Iterator method to make sure that the current Iterator // is not exhausted	WITHOUT_CLASSIFICATION	0.9977097942488325	WITHOUT_CLASSIFICATION	0.002290205751167523	DESIGN
//doable if needed	WITHOUT_CLASSIFICATION	0.9999554395755994	WITHOUT_CLASSIFICATION	4.456042440049751E-5	DESIGN
// set last used iterator here, in case the user calls remove // before calling hasNext() or next() (although they shouldn't)	WITHOUT_CLASSIFICATION	0.9997156968914543	WITHOUT_CLASSIFICATION	2.8430310854572885E-4	DESIGN
// peek ahead	WITHOUT_CLASSIFICATION	0.9999908201943287	WITHOUT_CLASSIFICATION	9.17980567124719E-6	DESIGN
// if we reach the end of the string w/o finding the // matching end, that is an exception	WITHOUT_CLASSIFICATION	0.9999999859941366	WITHOUT_CLASSIFICATION	1.4005863405561222E-8	DESIGN
// we have a placeholder, spin forward till we find the end	WITHOUT_CLASSIFICATION	0.9999985560398531	WITHOUT_CLASSIFICATION	1.443960146867605E-6	DESIGN
// make sure spinning forward did not put us past the end of the buffer...	WITHOUT_CLASSIFICATION	0.9999999997613676	WITHOUT_CLASSIFICATION	2.386324477699533E-10	DESIGN
// First, try to locate this resource through the current // context classloader.	WITHOUT_CLASSIFICATION	0.9999813039455954	WITHOUT_CLASSIFICATION	1.8696054404613798E-5	DESIGN
// Next, try to locate this resource through this class's classloader	WITHOUT_CLASSIFICATION	0.9999389543368904	WITHOUT_CLASSIFICATION	6.104566310958318E-5	DESIGN
// Next, try to locate this resource through the system classloader	WITHOUT_CLASSIFICATION	0.9999579173165324	WITHOUT_CLASSIFICATION	4.208268346767019E-5	DESIGN
// Anywhere else we should look?	WITHOUT_CLASSIFICATION	0.9995457176598774	WITHOUT_CLASSIFICATION	4.542823401225598E-4	DESIGN
// would need an IdentitySet for this!	WITHOUT_CLASSIFICATION	0.9972206862685187	WITHOUT_CLASSIFICATION	0.0027793137314813467	DESIGN
//Arrays.asList doesn't do primitive arrays	WITHOUT_CLASSIFICATION	0.9999999719664099	WITHOUT_CLASSIFICATION	2.803359012473845E-8	DESIGN
//faster?	WITHOUT_CLASSIFICATION	0.9705359865152834	WITHOUT_CLASSIFICATION	0.029464013484716587	DESIGN
// the name of a class	WITHOUT_CLASSIFICATION	0.9999502326157186	WITHOUT_CLASSIFICATION	4.97673842813795E-5	DESIGN
// Its the listener class name	WITHOUT_CLASSIFICATION	0.9999915250194492	WITHOUT_CLASSIFICATION	8.47498055075355E-6	DESIGN
//allow 9,8,7,6,5,4,3,2,1	WITHOUT_CLASSIFICATION	0.9999993038924821	WITHOUT_CLASSIFICATION	6.961075177804695E-7	DESIGN
// default to element set if no elements() specified	WITHOUT_CLASSIFICATION	0.9999999900960631	WITHOUT_CLASSIFICATION	9.9039369043882E-9	DESIGN
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999289207381173	WITHOUT_CLASSIFICATION	7.107926188263906E-5	DESIGN
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9068591775977839	WITHOUT_CLASSIFICATION	0.0931408224022161	DESIGN
// first, lets determine whether to apply cglib or javassist based instrumentation...	WITHOUT_CLASSIFICATION	0.9999985004100918	WITHOUT_CLASSIFICATION	1.4995899082022637E-6	DESIGN
// Make sure we don't override previous set values	WITHOUT_CLASSIFICATION	0.9999994492231511	WITHOUT_CLASSIFICATION	5.507768489108392E-7	DESIGN
//entirely optional!!	WITHOUT_CLASSIFICATION	0.9999034188141988	WITHOUT_CLASSIFICATION	9.65811858012644E-5	DESIGN
// Its the listener instance (or better be)	WITHOUT_CLASSIFICATION	0.9999099320376357	WITHOUT_CLASSIFICATION	9.006796236436996E-5	DESIGN
//context.unbind(boundName);	WITHOUT_CLASSIFICATION	0.9999537696005405	WITHOUT_CLASSIFICATION	4.623039945943909E-5	DESIGN
//readResolveObject	WITHOUT_CLASSIFICATION	0.9991849137101051	WITHOUT_CLASSIFICATION	8.150862898950263E-4	DESIGN
//cfg.setProperty("hibernate.show_sql", "true");	WITHOUT_CLASSIFICATION	0.9999999766752337	WITHOUT_CLASSIFICATION	2.332476635564673E-8	DESIGN
// Defensive, convenience methods	WITHOUT_CLASSIFICATION	0.9999988660403464	WITHOUT_CLASSIFICATION	1.1339596536523587E-6	DESIGN
// Create the SessionFactory from hibernate.cfg.xml	WITHOUT_CLASSIFICATION	0.999996058838731	WITHOUT_CLASSIFICATION	3.9411612690511765E-6	DESIGN
// Make sure you log the exception, as it might be swallowed	WITHOUT_CLASSIFICATION	0.9991746807889682	WITHOUT_CLASSIFICATION	8.253192110317594E-4	DESIGN
// Begin unit of work	WITHOUT_CLASSIFICATION	0.9999891332917168	WITHOUT_CLASSIFICATION	1.0866708283238155E-5	DESIGN
// Write HTML header	WITHOUT_CLASSIFICATION	0.9999173194230313	WITHOUT_CLASSIFICATION	8.268057696863769E-5	DESIGN
// Handle actions	WITHOUT_CLASSIFICATION	0.9999017395737493	WITHOUT_CLASSIFICATION	9.826042625070685E-5	DESIGN
// Print page	WITHOUT_CLASSIFICATION	0.9999996643373389	WITHOUT_CLASSIFICATION	3.356626611672623E-7	DESIGN
// Write HTML footer	WITHOUT_CLASSIFICATION	0.9999898748987035	WITHOUT_CLASSIFICATION	1.012510129657355E-5	DESIGN
// End unit of work	WITHOUT_CLASSIFICATION	0.9999704735318423	WITHOUT_CLASSIFICATION	2.9526468157749466E-5	DESIGN
// Start the session to be used for this request	WITHOUT_CLASSIFICATION	0.9924455879845154	WITHOUT_CLASSIFICATION	0.00755441201548449	DESIGN
// make the session available to the session factory's "current context"	WITHOUT_CLASSIFICATION	0.9999993384694064	WITHOUT_CLASSIFICATION	6.615305935356796E-7	DESIGN
// pass control along to the rest of the processing chain	WITHOUT_CLASSIFICATION	0.9999999993394127	WITHOUT_CLASSIFICATION	6.605872295922505E-10	DESIGN
// remove session from "current context"	WITHOUT_CLASSIFICATION	0.9996783569052203	WITHOUT_CLASSIFICATION	3.216430947796793E-4	DESIGN
// Eager fetch the collection so we can use it detached	WITHOUT_CLASSIFICATION	0.9999703796363275	WITHOUT_CLASSIFICATION	2.962036367245125E-5	DESIGN
// If we want to handle it bidirectional and detached, we also need to load this // collection with an eager outer-join fetch, this time with Criteria and not HQL:	WITHOUT_CLASSIFICATION	0.9999999989615519	WITHOUT_CLASSIFICATION	1.038448157621761E-9	DESIGN
/*        Event anEvent = (Event) session                .createCriteria(Event.class).setFetchMode("participants", FetchMode.JOIN)                .add( Expression.eq("id", eventId) )                .uniqueResult(); // Eager fetch the colleciton so we can use it detached        */	WITHOUT_CLASSIFICATION	0.9999999997363228	WITHOUT_CLASSIFICATION	2.636772290570081E-10	DESIGN
// End of first unit of work	WITHOUT_CLASSIFICATION	0.9999896256251297	WITHOUT_CLASSIFICATION	1.0374374870398143E-5	DESIGN
// or bidirectional safety method, setting both sides: aPerson.addToEvent(anEvent);	WITHOUT_CLASSIFICATION	0.9999899079082368	WITHOUT_CLASSIFICATION	1.0092091763069927E-5	DESIGN
// Begin second unit of work	WITHOUT_CLASSIFICATION	0.9999698369054425	WITHOUT_CLASSIFICATION	3.016309455754242E-5	DESIGN
// Reattachment of aPerson	WITHOUT_CLASSIFICATION	0.9999772120419678	WITHOUT_CLASSIFICATION	2.2787958032193284E-5	DESIGN
// The getEmailAddresses() might trigger a lazy load of the collection	WITHOUT_CLASSIFICATION	0.9996438487511791	WITHOUT_CLASSIFICATION	3.5615124882092293E-4	DESIGN
// We need our tm, so get it now and avoid doing other work // if there is a problem	WITHOUT_CLASSIFICATION	0.9999453949589376	WITHOUT_CLASSIFICATION	5.4605041062501045E-5	DESIGN
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999999970925642	WITHOUT_CLASSIFICATION	2.907435798612523E-9	DESIGN
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999999970925642	WITHOUT_CLASSIFICATION	2.907435798612523E-9	DESIGN
// JBC put a version in the node when it created as part of // some internal operation. We are always newer, but if // the JBC version is > 1 something odd has happened	WITHOUT_CLASSIFICATION	0.9999996543050375	WITHOUT_CLASSIFICATION	3.456949625847406E-7	DESIGN
//swaldman 2006-08-28: define c3p0-style configuration parameters for properties with //                     hibernate-specific overrides to detect and warn about conflicting //                     declarations	WITHOUT_CLASSIFICATION	0.9999852815992426	WITHOUT_CLASSIFICATION	1.4718400757321165E-5	DESIGN
// Not null if the Isolation level has been specified in the configuration file. // Otherwise, it is left to the Driver's default value.	WITHOUT_CLASSIFICATION	0.9999999643219667	WITHOUT_CLASSIFICATION	3.567803331841776E-8	DESIGN
// Configured outside of Hibernate (i.e. Servlet container, or Java Bean Container // already has Proxool pools running, and this provider is to just borrow one of these	WITHOUT_CLASSIFICATION	0.9998071727204745	WITHOUT_CLASSIFICATION	1.9282727952554392E-4	DESIGN
// If you're closing down the ConnectionProvider chances are an // is not a real big deal, just warn	WITHOUT_CLASSIFICATION	0.9999969136748856	WITHOUT_CLASSIFICATION	3.086325114438975E-6	DESIGN
// (AS is always optional, for consistency with SQL/OQL)	WITHOUT_CLASSIFICATION	0.99999944190934	WITHOUT_CLASSIFICATION	5.5809065992613E-7	DESIGN
// process the "new" HQL style where aliases are assigned // _after_ the class name or path expression ie. using // the AS construction	WITHOUT_CLASSIFICATION	0.9999922539561643	WITHOUT_CLASSIFICATION	7.746043835716901E-6	DESIGN
// the loaded owner will be set to null after the collection is removed, // so capture its value as the affected owner so it is accessible to // both pre- and post- events	WITHOUT_CLASSIFICATION	0.999999999995279	WITHOUT_CLASSIFICATION	4.721076175319525E-12	DESIGN
// is a primitive type // invokespecial	WITHOUT_CLASSIFICATION	0.9999995665967932	WITHOUT_CLASSIFICATION	4.334032067087272E-7	DESIGN
// array of primitive type // do nothing	WITHOUT_CLASSIFICATION	0.9999995852768336	WITHOUT_CLASSIFICATION	4.1472316639810776E-7	DESIGN
// handle a path expression or class name that // appears at the start, in the "new" HQL // style or an alias that appears at the start // in the "old" HQL style	WITHOUT_CLASSIFICATION	0.9982530687528915	WITHOUT_CLASSIFICATION	0.0017469312471084413	DESIGN
//handle <=, >=, !=, is not, not between, not in	WITHOUT_CLASSIFICATION	0.9999222395510692	WITHOUT_CLASSIFICATION	7.776044893086916E-5	DESIGN
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999999684098274	WITHOUT_CLASSIFICATION	3.159017258881419E-8	DESIGN
// transfer an explicitly defined entity name // handle the lazy attribute	WITHOUT_CLASSIFICATION	0.9972286800709578	WITHOUT_CLASSIFICATION	0.0027713199290422715	DESIGN
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999958614193998	WITHOUT_CLASSIFICATION	4.138580600223798E-6	DESIGN
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999958614193998	WITHOUT_CLASSIFICATION	4.138580600223798E-6	DESIGN
// get meta's from // <joined-subclass>	WITHOUT_CLASSIFICATION	0.9999997204232014	WITHOUT_CLASSIFICATION	2.7957679870426935E-7	DESIGN
// parameters on the property mapping should // override parameters in the typedef	WITHOUT_CLASSIFICATION	0.9999994024985741	WITHOUT_CLASSIFICATION	5.975014259880819E-7	DESIGN
//fetch="join" overrides default laziness //fetch="join" overrides default laziness	WITHOUT_CLASSIFICATION	0.9999999965549653	WITHOUT_CLASSIFICATION	3.445034660961218E-9	DESIGN
//NOTE SPECIAL CASE: // default to join and non-lazy for the "second join" // of the many-to-many	WITHOUT_CLASSIFICATION	0.9999999807861388	WITHOUT_CLASSIFICATION	1.9213861188946483E-8	DESIGN
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.999999469237473	WITHOUT_CLASSIFICATION	5.307625270912827E-7	DESIGN
// state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999952534530742	WITHOUT_CLASSIFICATION	4.746546925932149E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.9966662531954268	WITHOUT_CLASSIFICATION	0.003333746804573307	DESIGN
//element //index -> id	WITHOUT_CLASSIFICATION	0.99999952525503	WITHOUT_CLASSIFICATION	4.747449699614812E-7	DESIGN
// note that it might be better to iterate the snapshot but this is safe, // assuming the user implements equals() properly, as required by the Set // contract!	WITHOUT_CLASSIFICATION	0.9753445670793055	WITHOUT_CLASSIFICATION	0.02465543292069452	DESIGN
// collections detect changes made via their public interface and mark // themselves as dirty as a performance optimization	WITHOUT_CLASSIFICATION	0.9999542662449372	WITHOUT_CLASSIFICATION	4.573375506272593E-5	DESIGN
// essentially, if the real session is closed allow any // method call to pass through since the real session // will complain by throwing an appropriate exception; // NOTE that allowing close() above has the same basic effect, //   but we capture that there simply to perform the unbind...	WITHOUT_CLASSIFICATION	0.99999999911323	WITHOUT_CLASSIFICATION	8.867699289682675E-10	DESIGN
// The default SQLExceptionConverter for all dialects is based on SQLState // since SQLErrorCode is extremely vendor-specific.  Specific Dialects // may override to return whatever is most appropriate for that vendor.	WITHOUT_CLASSIFICATION	0.9999999999436229	WITHOUT_CLASSIFICATION	5.637725998176284E-11	DESIGN
//only necessary for postgre < 7.4 //http://anoncvs.postgresql.org/cvsweb.cgi/pgsql/doc/src/sgml/ref/create_sequence.sgml	WITHOUT_CLASSIFICATION	0.9999999797130278	WITHOUT_CLASSIFICATION	2.0286972229855274E-8	DESIGN
// select topic, syntax from information_schema.help // where section like 'Function%' order by section, topic // // see also ->  http://www.h2database.com/html/functions.html	WITHOUT_CLASSIFICATION	0.9999999999199101	WITHOUT_CLASSIFICATION	8.008992139299015E-11	DESIGN
// registerColumnType(Types.VARBINARY, "CHARACTER($l)"); // registerColumnType(Types.BLOB, "CHARACTER($l)" );  // For use prior to CP 11.0 // registerColumnType(Types.CLOB, "CHARACTER($l)" );	WITHOUT_CLASSIFICATION	0.9999936703394788	WITHOUT_CLASSIFICATION	6.329660521075176E-6	DESIGN
//the BLOB type requires a size arguement - this defaults to //bytes - no arg defaults to 1 whole byte! //other argument mods include K - kilobyte, M - megabyte, G - gigabyte. //refer to the PBdevelopers guide for more info.	WITHOUT_CLASSIFICATION	0.9932672327976806	DESIGN	0.006732767202319464	WITHOUT_CLASSIFICATION
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.9966767564797142	WITHOUT_CLASSIFICATION	0.0033232435202856844	DESIGN
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.9075408114380008	WITHOUT_CLASSIFICATION	0.09245918856199921	DESIGN
// add the comment // nest the main query in an outer select // add the rownnumber bit into the outer query select list	WITHOUT_CLASSIFICATION	0.9999645892468272	WITHOUT_CLASSIFICATION	3.541075317268622E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9966662531954268	WITHOUT_CLASSIFICATION	0.003333746804573307	DESIGN
// Note: For object <-> SQL datatype mappings see: //	WITHOUT_CLASSIFICATION	0.9999998372732137	WITHOUT_CLASSIFICATION	1.627267862824855E-7	DESIGN
// TRIM(end_keyword string-expression-1 FROM string-expression-2) // use Hibernate implementation "From" is one of the parameters they pass in position ?3 //registerFunction( "trim", new SQLFunctionTemplate(Hibernate.STRING, "trim(?1 ?2 from ?3)") );	WITHOUT_CLASSIFICATION	0.9999999995181882	WITHOUT_CLASSIFICATION	4.818117765528713E-10	DESIGN
// Whether this dialect has an Identity clause added to the data type or a completely seperate identity // data type	WITHOUT_CLASSIFICATION	0.9999495245047509	WITHOUT_CLASSIFICATION	5.047549524907222E-5	DESIGN
// According to both the ANSI-SQL and JPA specs, trim takes a variable number of parameters between 1 and 4. // at least one paramer (trimSource) is required.  From the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If <trim specification> is omitted, BOTH is assumed. // If <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999999999972495	WITHOUT_CLASSIFICATION	2.750390674394572E-12	DESIGN
/////////////////////////////////////////////////////////////////////// // Prepare persisters and link them up with their cache // region/access-strategy	WITHOUT_CLASSIFICATION	0.999993192094392	WITHOUT_CLASSIFICATION	6.80790560799286E-6	DESIGN
//Named Queries:	WITHOUT_CLASSIFICATION	0.9998944959990432	WITHOUT_CLASSIFICATION	1.0550400095673103E-4	DESIGN
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9340224355872228	WITHOUT_CLASSIFICATION	0.06597756441277723	DESIGN
// does not handle arrays (thats ok, cos they can't be lazy) // or newly instantiated collections, so we can do the cast	WITHOUT_CLASSIFICATION	0.9948173752772052	WITHOUT_CLASSIFICATION	0.0051826247227948746	DESIGN
// collection deletions are a special case since update() can add // deletions of collections not loaded by the session.	WITHOUT_CLASSIFICATION	0.9999999991921389	WITHOUT_CLASSIFICATION	8.078611802994929E-10	DESIGN
// we can do the cast since orphan-delete does not apply to: // 1. newly instantiated collections // 2. arrays (we can't track orphans for detached arrays)	WITHOUT_CLASSIFICATION	0.9999727103912073	WITHOUT_CLASSIFICATION	2.728960879273762E-5	DESIGN
// if the natural-id is marked as non-mutable, it is not retrieved during a // normal database-snapshot operation...	WITHOUT_CLASSIFICATION	0.9999928220465105	WITHOUT_CLASSIFICATION	7.177953489401346E-6	DESIGN
// watch out for a case where old is still referenced // somewhere in the object graph! (which is a user error)	WITHOUT_CLASSIFICATION	0.9999358806261837	WITHOUT_CLASSIFICATION	6.411937381632825E-5	DESIGN
//slice, to get the columns for this component //property	WITHOUT_CLASSIFICATION	0.9996551364171778	WITHOUT_CLASSIFICATION	3.4486358282211457E-4	DESIGN
//int result = 17; //result = 37 * result + type.hashCode(); //result = 37 * result + ( value==null ? 0 : value.hashCode() ); //return result;	WITHOUT_CLASSIFICATION	0.9999999796381169	WITHOUT_CLASSIFICATION	2.0361882980356068E-8	DESIGN
// The CollectionEntry.isReached() stuff is just to detect any silly users   // who set up circular or shared references between/to collections.	WITHOUT_CLASSIFICATION	0.9999495160786652	WITHOUT_CLASSIFICATION	5.048392133473127E-5	DESIGN
// detached collection wrappers that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999998502482734	WITHOUT_CLASSIFICATION	1.4975172652963534E-7	DESIGN
// The unique property value represented here may or may not be // serializable, so we do an explicit check here in order to generate // a better error message	WITHOUT_CLASSIFICATION	0.5912106630358264	WITHOUT_CLASSIFICATION	0.40878933696417363	DESIGN
// if the version of a newly instantiated object is not the same // as the version seed value, use that as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999633533690718	WITHOUT_CLASSIFICATION	3.664663092821536E-5	DESIGN
// ie. we never have to null out a reference to // an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999973684112634	WITHOUT_CLASSIFICATION	2.6315887365443895E-6	DESIGN
// ignore this row, the collection is in process of // being loaded somewhere further "up" the stack	WITHOUT_CLASSIFICATION	0.9999999666997971	WITHOUT_CLASSIFICATION	3.3300202921777244E-8	DESIGN
// Entity load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // 	WITHOUT_CLASSIFICATION	0.9999986396701721	WITHOUT_CLASSIFICATION	1.3603298278995158E-6	DESIGN
// should be ok performance-wise to generate new delegate instances for each // request since these are locally stack-scoped.  Besides, it makes the code // much easier to read than the old TransactionHelper stuff...	WITHOUT_CLASSIFICATION	0.9860156357935954	WITHOUT_CLASSIFICATION	0.013984364206404653	DESIGN
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9995470456227453	WITHOUT_CLASSIFICATION	4.529543772546958E-4	DESIGN
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9995470456227453	WITHOUT_CLASSIFICATION	4.529543772546958E-4	DESIGN
// wrap up any new collections directly referenced by the object // or its components	WITHOUT_CLASSIFICATION	0.9999999939871965	WITHOUT_CLASSIFICATION	6.012803423358662E-9	DESIGN
// remove any snapshot, not really for memory management purposes, but // rather because it might now be stale, and there is no longer any  // EntityEntry to take precedence // This is now handled by removeEntity() //session.getPersistenceContext().removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9977690539122497	WITHOUT_CLASSIFICATION	0.002230946087750317	DESIGN
// skip this check for composite-ids relating to dom4j entity-mode; // alternatively, we could add a check to make sure the incoming id value is // an instance of Element...	WITHOUT_CLASSIFICATION	0.919187652557929	WITHOUT_CLASSIFICATION	0.08081234744207104	DESIGN
// upgrade the lock if necessary: //lock(result, lockMode);	WITHOUT_CLASSIFICATION	0.9989553994622633	WITHOUT_CLASSIFICATION	0.0010446005377367483	DESIGN
// now, any collections that are initialized // inside this block do not get updated - they // are ignored until the next flush	WITHOUT_CLASSIFICATION	0.9999954662666446	WITHOUT_CLASSIFICATION	4.533733355420472E-6	DESIGN
//we must clone embedded composite identifiers, or  //we will get back the same instance that we pass in	WITHOUT_CLASSIFICATION	0.9999944701426388	WITHOUT_CLASSIFICATION	5.529857361225915E-6	DESIGN
// Sub-insertions should occur before containing insertion so // Try to do the callback now	WITHOUT_CLASSIFICATION	0.9999986171313641	WITHOUT_CLASSIFICATION	1.382868636006737E-6	DESIGN
//the entity is not associated with the session, so //try interceptor and unsaved-value	WITHOUT_CLASSIFICATION	0.9999987921177083	WITHOUT_CLASSIFICATION	1.2078822917259766E-6	DESIGN
//scan the query string for class names appearing in the from clause and replace //with all persistent implementors of the class/interface, returning multiple //query strings (make sure we don't pick up a class in the select clause!)	WITHOUT_CLASSIFICATION	0.9782916275118115	DESIGN	0.02170837248818845	WITHOUT_CLASSIFICATION
// save() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997284763977	WITHOUT_CLASSIFICATION	2.715236023428804E-7	DESIGN
// evict() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997829694428	WITHOUT_CLASSIFICATION	2.1703055726433033E-7	DESIGN
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9787136125197403	WITHOUT_CLASSIFICATION	0.02128638748025968	DESIGN
//if it is an uninitialized proxy, pointing //with this session, then when it is accessed, //the underlying instance will be "contained"	WITHOUT_CLASSIFICATION	0.999999979175777	WITHOUT_CLASSIFICATION	2.082422299020943E-8	DESIGN
// Generate an explicit join for the root dot node.   The implied joins will be collected and passed up // to the root dot node.	WITHOUT_CLASSIFICATION	0.9999999740641251	WITHOUT_CLASSIFICATION	2.5935874836874482E-8	DESIGN
// A session is considered to contain an entity only if the entity has // an entry in the session's persistence context and the entry reports // that the entity has not been removed	WITHOUT_CLASSIFICATION	0.9999960340561207	WITHOUT_CLASSIFICATION	3.9659438792744514E-6	DESIGN
// Does the collection referenced by this FromElement // specify an order-by attribute?  If so, attach it to // the query's order-by	WITHOUT_CLASSIFICATION	0.9995300586752797	WITHOUT_CLASSIFICATION	4.6994132472035914E-4	DESIGN
// ... and the token could be an identifer and the error is // a mismatched token error ...	WITHOUT_CLASSIFICATION	0.9994883343257701	WITHOUT_CLASSIFICATION	5.116656742298168E-4	DESIGN
// If a where clause was specified in the update/delete query, use it to limit the // returned ids here...	WITHOUT_CLASSIFICATION	0.9999999707870387	WITHOUT_CLASSIFICATION	2.9212961279190357E-8	DESIGN
//	WITHOUT_CLASSIFICATION	0.9966662531954268	WITHOUT_CLASSIFICATION	0.003333746804573307	DESIGN
// Default implementation: // If this node has a data type, and that data type is not an association, then this is scalar.	WITHOUT_CLASSIFICATION	0.9999999262118683	WITHOUT_CLASSIFICATION	7.378813174414482E-8	DESIGN
// Resolve the LHS fully, generate implicit joins.  Pass in the property name so that the resolver can // discover foreign key (id) properties.	WITHOUT_CLASSIFICATION	0.9999172884229016	WITHOUT_CLASSIFICATION	8.271157709841128E-5	DESIGN
// If the propertyType is null and there isn't a parent, just // stop now... there was a problem resolving the node anyway.	WITHOUT_CLASSIFICATION	0.9853675844894756	WITHOUT_CLASSIFICATION	0.014632415510524487	DESIGN
//We do not look for an existing join on the same path, because //it makes sense to join twice on the same collection role	WITHOUT_CLASSIFICATION	0.9999860060852079	WITHOUT_CLASSIFICATION	1.3993914791991555E-5	DESIGN
// our parent is another dot node, meaning we are being further dereferenced. // thus we need to generate a join unless the parent refers to the associated // entity's PK (because 'our' table would know the FK).	WITHOUT_CLASSIFICATION	0.9996996810837103	WITHOUT_CLASSIFICATION	3.0031891628965737E-4	DESIGN
/*public final Currency getCurrency(int col) throws HibernateException {	WITHOUT_CLASSIFICATION	0.9201086298909351	WITHOUT_CLASSIFICATION	0.0798913701090649	DESIGN
// here, we have two possibilities: // 	WITHOUT_CLASSIFICATION	0.981855824222645	WITHOUT_CLASSIFICATION	0.018144175777355064	DESIGN
// Set the unresolved path in this node and the parent. // Set the text for the parent.	WITHOUT_CLASSIFICATION	0.9997037023810933	WITHOUT_CLASSIFICATION	2.9629761890669504E-4	DESIGN
// Get the first child to be considered.  Sub-classes may do this differently in order to skip nodes that // are not select expressions (e.g. DISTINCT).	WITHOUT_CLASSIFICATION	0.9999995568786674	WITHOUT_CLASSIFICATION	4.431213325950236E-7	DESIGN
// If this is an entity and the property is the identifier property, then use getIdentifierType(). //      Note that the propertyName.equals( propertyPath ) checks whether we have a component //      key reference, where the component class property name is the same as the //      entity id property name; if the two are not equal, this is the case and //      we'd need to "fall through" to using the property mapping.	WITHOUT_CLASSIFICATION	0.999999999936206	WITHOUT_CLASSIFICATION	6.379398710387611E-11	DESIGN
// for a subquery, the alias to use depends on a few things (we // already know this is not an overall SELECT): //      1) if this FROM_ELEMENT represents a correlation to the //          outer-most query //              A) if the outer query represents a multi-table //                  persister, we need to use the given alias //                  in anticipation of one of the multi-table //                  executors being used (as this subquery will //                  actually be used in the "id select" phase //                  of that multi-table executor) //              B) otherwise, we need to use the persister's //                  table name as the column qualification //      2) otherwise (not correlated), use the given alias	WITHOUT_CLASSIFICATION	0.9999999857098759	WITHOUT_CLASSIFICATION	1.4290124026662116E-8	DESIGN
// Not a collection? // Return the entity property mapping.	WITHOUT_CLASSIFICATION	0.999964856042597	WITHOUT_CLASSIFICATION	3.514395740294348E-5	DESIGN
// collection of <many-to-any/> mappings... // used to circumvent the component-collection check below...	WITHOUT_CLASSIFICATION	0.9999750008421582	WITHOUT_CLASSIFICATION	2.4999157841795273E-5	DESIGN
// Otherwise, the destination node was implied by the FROM clause and the FROM clause processor // will automatically add it in the right place.	WITHOUT_CLASSIFICATION	0.9998436314217618	WITHOUT_CLASSIFICATION	1.5636857823828017E-4	DESIGN
// If the first identifier in the path referrs to the class alias (not the class name), then this // is a correlated subselect.  If it's a correlated sub-select, use the existing table alias.  Otherwise // generate a new one.	WITHOUT_CLASSIFICATION	0.999973865040331	WITHOUT_CLASSIFICATION	2.613495966898778E-5	DESIGN
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999997430009393	WITHOUT_CLASSIFICATION	2.5699906068631354E-7	DESIGN
// An ident node can represent an index expression if the ident // represents a naked property ref //      *Note: this makes the assumption (which is currently the case //      in the hql-sql grammar) that the ident is first resolved //      itself (addrExpr -> resolve()).  The other option, if that //      changes, is to call resolve from here; but it is //      currently un-needed overhead.	WITHOUT_CLASSIFICATION	0.9999933260358308	WITHOUT_CLASSIFICATION	6.673964169274672E-6	DESIGN
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9999366360222806	WITHOUT_CLASSIFICATION	6.336397771945914E-5	DESIGN
// If this is an implied join in a FROM clause, then use ANSI-style joining, and set the // flag on the FromElement that indicates that it was implied in the FROM clause itself.	WITHOUT_CLASSIFICATION	0.9999990980736742	WITHOUT_CLASSIFICATION	9.019263257323081E-7	DESIGN
//	WITHOUT_CLASSIFICATION	0.9966662531954268	WITHOUT_CLASSIFICATION	0.003333746804573307	DESIGN
// For an explicit many-to-many relationship, add a second join from the intermediate  // (many-to-many) table to the destination table.  Also, make sure that the from element's  // idea of the destination is the destination table.	WITHOUT_CLASSIFICATION	0.9999999973440361	WITHOUT_CLASSIFICATION	2.655963932066044E-9	DESIGN
// Reset the node type, because the rest of the system is expecting FROM_FRAGMENT, all we wanted was // for the factory to create the right sub-class.  This might get reset again later on anyway to make the // SQL generation simpler.	WITHOUT_CLASSIFICATION	0.9996950351883708	WITHOUT_CLASSIFICATION	3.0496481162918537E-4	DESIGN
//explicit = true;	WITHOUT_CLASSIFICATION	0.9999924081715371	WITHOUT_CLASSIFICATION	7.591828462891626E-6	DESIGN
//sqlResultTypeList.add( type ); // Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999998702348337	WITHOUT_CLASSIFICATION	1.2976516632881283E-7	DESIGN
// If the expression list has exactly one expression, and the type of the expression is a collection // then this might be a collection function, such as index(c) or size(c).	WITHOUT_CLASSIFICATION	0.9999932473384618	WITHOUT_CLASSIFICATION	6.7526615382123585E-6	DESIGN
// Need to parse off the column qualifiers; this is assuming (which is true as of now) // that this is only used from update and delete HQL statement parsing	WITHOUT_CLASSIFICATION	0.9999998415812781	WITHOUT_CLASSIFICATION	1.5841872190696336E-7	DESIGN
// for regression testing against output from the old parser... // found it easiest to simply reorder the FromElements here into ascending order // in terms of injecting them into the resulting sql ast in orders relative to those // expected by the old parser; this is definitely another of those "only needed // for regression purposes".  The SyntheticAndFactory, then, simply injects them as it // encounters them.	WITHOUT_CLASSIFICATION	0.9999999999941633	WITHOUT_CLASSIFICATION	5.83661333058482E-12	DESIGN
// The uber-rule here is that we need to include  subclass joins if // the FromElement is in any way dereferenced by a property from // the subclass table; otherwise we end up with column references // qualified by a non-existent table reference in the resulting SQL...	WITHOUT_CLASSIFICATION	0.9999638651444146	WITHOUT_CLASSIFICATION	3.6134855585502426E-5	DESIGN
// classic translator does not support collection of ordinal // param metadata	WITHOUT_CLASSIFICATION	0.9996882953656776	WITHOUT_CLASSIFICATION	3.117046343223947E-4	DESIGN
// The following variables are stacks that keep information about each subexpression // in the list of nested subexpressions we are currently processing.	WITHOUT_CLASSIFICATION	0.999985902678317	WITHOUT_CLASSIFICATION	1.4097321682939339E-5	DESIGN
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999999684098274	WITHOUT_CLASSIFICATION	3.159017258881419E-8	DESIGN
// should not be able to reach last without maxPosition being set // unless there are no results	WITHOUT_CLASSIFICATION	0.9999999997562304	WITHOUT_CLASSIFICATION	2.437695221588739E-10	DESIGN
// we found it in the temp PC.  Should indicate we are in the midst of processing a result set // containing eager fetches via join fetch	WITHOUT_CLASSIFICATION	0.9999999987482652	WITHOUT_CLASSIFICATION	1.2517347671416076E-9	DESIGN
//do not use proxiesByKey, since not all //proxies that point to this session's //instances are in that collection!	WITHOUT_CLASSIFICATION	0.9999829878042676	WITHOUT_CLASSIFICATION	1.7012195732379966E-5	DESIGN
// if there is no TM configured, we will not be able to access // the javax.transaction.Transaction object in order to // register a synch anyway.	WITHOUT_CLASSIFICATION	0.965043827988269	WITHOUT_CLASSIFICATION	0.034956172011730985	DESIGN
// Since the result set cursor is always left at the first // physical row after the "last processed", we need to jump // back one position to get the key value we are interested // in skipping	WITHOUT_CLASSIFICATION	0.9999999997681328	WITHOUT_CLASSIFICATION	2.3186730306119526E-10	DESIGN
//true if this is a query and we are loading multiple instances of the same collection role //otherwise this is a CollectionInitializer and we are loading up a single collection or batch	WITHOUT_CLASSIFICATION	0.9999490132934367	WITHOUT_CLASSIFICATION	5.098670656336458E-5	DESIGN
// we don't need to worry about existing version being uninitialized // because this block isn't called by a re-entrant load (re-entrant // loads _always_ have lock mode NONE)	WITHOUT_CLASSIFICATION	0.999998996826197	WITHOUT_CLASSIFICATION	1.0031738030675976E-6	DESIGN
// add temp entry so that the next step is circular-reference // safe - only needed because some types don't take proper // advantage of two-phase-load (esp. components)	WITHOUT_CLASSIFICATION	0.9999999880580042	WITHOUT_CLASSIFICATION	1.194199590216759E-8	DESIGN
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.999999950499644	WITHOUT_CLASSIFICATION	4.950035608215387E-8	DESIGN
// log a message about potential connection leaks	WITHOUT_CLASSIFICATION	0.999999964796172	WITHOUT_CLASSIFICATION	3.520382806496859E-8	DESIGN
//	WITHOUT_CLASSIFICATION	0.9966662531954268	WITHOUT_CLASSIFICATION	0.003333746804573307	DESIGN
// this has been shown to happen occasionally in rare cases // when using a transaction manager + transaction-timeout // where the timeout calls back through Hibernate's // registered transaction synchronization on a separate // "reaping" thread.  In cases where that reaping thread // executes through this block at the same time the main // application thread does we can get into situations where // these CMEs occur.  And though it is not "allowed" per-se, // the end result without handling it specifically is infinite // looping.  So here, we simply break the loop	WITHOUT_CLASSIFICATION	0.9999999672549453	WITHOUT_CLASSIFICATION	3.274505460518835E-8	DESIGN
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.984833022431034	WITHOUT_CLASSIFICATION	0.015166977568965945	DESIGN
// can't cache this stuff either (per-invocation) // we are given a map of user-alias -> lock mode // create a new map of sql-alias -> lock mode	WITHOUT_CLASSIFICATION	0.9999999649025375	WITHOUT_CLASSIFICATION	3.509746255291113E-8	DESIGN
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns //getCollectionTable().createUniqueKey( getIdentifier().getConstraintColumns() );	WITHOUT_CLASSIFICATION	0.9999996771221095	WITHOUT_CLASSIFICATION	3.2287789057608237E-7	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999777437202	WITHOUT_CLASSIFICATION	2.2256279786723678E-7	DESIGN
//isSet = collection.isSet(); //isSorted = collection.isSorted();	WITHOUT_CLASSIFICATION	0.9999999905635353	WITHOUT_CLASSIFICATION	9.436464723573193E-9	DESIGN
//lists, arrays //sets, maps, bags	WITHOUT_CLASSIFICATION	0.9999999945873046	WITHOUT_CLASSIFICATION	5.412695386364742E-9	DESIGN
// we finish all the "removes" first to take care of possible unique // constraints and so that we can take better advantage of batching	WITHOUT_CLASSIFICATION	0.9999999285814243	WITHOUT_CLASSIFICATION	7.141857579065034E-8	DESIGN
//use a combination of foreign key columns and pk columns, since //the ordering of removal and addition is not guaranteed when //a child moves from one parent to another	WITHOUT_CLASSIFICATION	0.9997858433263812	WITHOUT_CLASSIFICATION	2.1415667361883507E-4	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999777437202	WITHOUT_CLASSIFICATION	2.2256279786723678E-7	DESIGN
//information about properties of this class, //including inherited properties //(only really needed for updatable/insertable properties)	WITHOUT_CLASSIFICATION	0.9999994752577945	WITHOUT_CLASSIFICATION	5.247422054274487E-7	DESIGN
// all this only really needs to consider properties // of this class, not its subclasses, but since we // are reusing code used for sequential selects, we // use the subclass closure	WITHOUT_CLASSIFICATION	0.9999999981255373	WITHOUT_CLASSIFICATION	1.874462571734916E-9	DESIGN
// Here we render the select column list based on the properties defined as being generated. // For partial component generation, we currently just re-select the whole component // rather than trying to handle the individual generated portions.	WITHOUT_CLASSIFICATION	0.9998951568070424	WITHOUT_CLASSIFICATION	1.048431929576221E-4	DESIGN
// this is the root (versioned) table, and we are using version-based // optimistic locking;  if we are not updating the version, also don't // check it (unless this is a "generated" version column)!	WITHOUT_CLASSIFICATION	0.9999993586535721	WITHOUT_CLASSIFICATION	6.413464278128059E-7	DESIGN
//optimistic-lock="all", include all updatable properties //optimistic-lock="dirty", include all properties we are updating this time	WITHOUT_CLASSIFICATION	0.9999930761382935	WITHOUT_CLASSIFICATION	6.923861706544167E-6	DESIGN
// this property belongs to the table, and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.999892930801579	WITHOUT_CLASSIFICATION	1.0706919842097624E-4	DESIGN
// check to see if the connection is in auto-commit  // mode (no connection means aggressive connection // release outside a JTA transaction context, so MUST // be autocommit mode)	WITHOUT_CLASSIFICATION	0.9999998070100243	WITHOUT_CLASSIFICATION	1.9298997573845904E-7	DESIGN
// need to treat this as if it where optimistic-lock="all" (dirty does *not* make sense); // first we need to locate the "loaded" state // // Note, it potentially could be a proxy, so perform the location the safe way...	WITHOUT_CLASSIFICATION	0.994557005948883	WITHOUT_CLASSIFICATION	0.005442994051116993	DESIGN
// we *always* assume an instance with a null // identifier or no identifier property is unsaved!	WITHOUT_CLASSIFICATION	0.9999999831136682	WITHOUT_CLASSIFICATION	1.68863317686143E-8	DESIGN
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.9999994367034195	WITHOUT_CLASSIFICATION	5.632965805383889E-7	DESIGN
//allow any identifier quoted with backtick //only recognizes identifiers beginning with a letter	WITHOUT_CLASSIFICATION	0.9999982110838908	WITHOUT_CLASSIFICATION	1.7889161092692246E-6	DESIGN
//following doesn't handle (null, not null) but unnecessary //since this would mean all rows	WITHOUT_CLASSIFICATION	0.9885724376635451	WITHOUT_CLASSIFICATION	0.011427562336455022	DESIGN
// IMPL NOTE : due to the delayed population of setters (setters cached // 	WITHOUT_CLASSIFICATION	0.9999909455395865	WITHOUT_CLASSIFICATION	9.054460413558329E-6	DESIGN
// we need to dirty check collections, since they can cause an owner // version number increment	WITHOUT_CLASSIFICATION	0.9999925495524263	WITHOUT_CLASSIFICATION	7.450447573681421E-6	DESIGN
//return the id, so we can use it to reset the proxy id //return result;	WITHOUT_CLASSIFICATION	0.9999957807769214	WITHOUT_CLASSIFICATION	4.21922307864542E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.9966662531954268	WITHOUT_CLASSIFICATION	0.003333746804573307	DESIGN
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999999543596255	WITHOUT_CLASSIFICATION	4.564037446497796E-8	DESIGN
// We now have the value of the property-ref we reference.  However, // we need to dig a little deeper, as that property might also be // an entity type, in which case we need to resolve its identitifier	WITHOUT_CLASSIFICATION	0.9999999560081789	WITHOUT_CLASSIFICATION	4.39918212114398E-8	DESIGN
// Retrieve the value of the designated column in the current row of this // ResultSet object as a java.io.Reader object	WITHOUT_CLASSIFICATION	0.9999999509776206	WITHOUT_CLASSIFICATION	4.902237935302001E-8	DESIGN
//not absolutely necessary, but helps for some //equals()/hashCode() implementations	WITHOUT_CLASSIFICATION	0.9998751843980043	WITHOUT_CLASSIFICATION	1.248156019957894E-4	DESIGN
//this should be a call to resolve(), not resolveIdentifier(),  //'cos it might be a property-ref, and we did not cache the //referenced value	WITHOUT_CLASSIFICATION	0.7795258573253342	WITHOUT_CLASSIFICATION	0.22047414267466595	DESIGN
// If we have <tt>not-found="ignore"</tt> association mapped to a // formula, we always need to dirty check it, so we can update the // second-level cache	WITHOUT_CLASSIFICATION	0.9999998569153352	WITHOUT_CLASSIFICATION	1.4308466469107852E-7	DESIGN
// can't just return null here, since that would // cause an owning component to become null	WITHOUT_CLASSIFICATION	0.9999999145131574	WITHOUT_CLASSIFICATION	8.548684262867852E-8	DESIGN
//for arrays, replaceElements() may return a different reference, since //the array length might not match	WITHOUT_CLASSIFICATION	0.9999999513344057	WITHOUT_CLASSIFICATION	4.866559438928373E-8	DESIGN
// actual cache of the entries.  soft references are used for both the keys and the // values here since the values pertaining to the MRU entries are kept in a // seperate hard reference cache (to avoid their enqueuement/garbage-collection).	WITHOUT_CLASSIFICATION	0.9999999999328508	WITHOUT_CLASSIFICATION	6.714922648766456E-11	DESIGN
// as soon as we encounter our first letter, return the substring // from that position	WITHOUT_CLASSIFICATION	0.9999999998891912	WITHOUT_CLASSIFICATION	1.1080871651304604E-10	DESIGN
// Note : expected in the syntax: //      type=listenerClass //          ({sep}type=listenerClass)* // where {sep} is any whitespace or comma	WITHOUT_CLASSIFICATION	0.9999999996065524	WITHOUT_CLASSIFICATION	3.9344760805235023E-10	DESIGN
// isTransactionCallbackRegistered denotes whether any Hibernate // Transaction has registered as a callback against this // JDBCContext; only one such callback is allowed.  Directly // serializing this value causes problems with JDBCTransaction, // or really any Transaction impl where the callback is local // to the Transaction instance itself, since that Transaction // is not serialized along with the JDBCContext.  Thus we // handle that fact here explicitly...	WITHOUT_CLASSIFICATION	0.9999703882097378	WITHOUT_CLASSIFICATION	2.9611790262043922E-5	DESIGN
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999992869363615	WITHOUT_CLASSIFICATION	7.130636384232727E-7	DESIGN
// We call getKeyFromResultSet() here so that we can know the // key value upon which to perform the breaking logic.  However, // it is also then called from getRowFromResultSet() which is certainly // not the most efficient.  But the call here is needed, and there // currently is no other way without refactoring of the doQuery()/getRowFromResultSet() // methods	WITHOUT_CLASSIFICATION	0.9988275250154532	WITHOUT_CLASSIFICATION	0.0011724749845467223	DESIGN
// This check is needed since processing leaves the cursor // after the last physical row for the current logical row; // thus if we are after the last physical row, this might be // caused by either: //      1) scrolling to the last logical row //      2) scrolling past the last logical row // In the latter scenario, the previous logical row // really is the last logical row. // // In all other cases, we should process back two // logical records (the current logic row, plus the // previous logical row).	WITHOUT_CLASSIFICATION	0.9999725245784462	WITHOUT_CLASSIFICATION	2.7475421553755703E-5	DESIGN
// and perform the load	WITHOUT_CLASSIFICATION	0.9999994051344099	WITHOUT_CLASSIFICATION	5.948655901720626E-7	DESIGN
//important: reuse the same event instances for performance!	WITHOUT_CLASSIFICATION	0.8366970343258416	WITHOUT_CLASSIFICATION	0.16330296567415833	DESIGN
//this is a query and we are loading multiple instances of the same collection role	WITHOUT_CLASSIFICATION	0.9978428938634315	WITHOUT_CLASSIFICATION	0.0021571061365684013	DESIGN
// we found a collection element in the result set	WITHOUT_CLASSIFICATION	0.9999655448940383	WITHOUT_CLASSIFICATION	3.4455105961706736E-5	DESIGN
// we did not find a collection element in the result set, so we // ensure that a collection is created with the owner's identifier, // since what we have is an empty collection	WITHOUT_CLASSIFICATION	0.9999999977994073	WITHOUT_CLASSIFICATION	2.200592782386119E-9	DESIGN
// this is a collection initializer, so we must create a collection // for each of the passed-in keys, to account for the possibility // that the collection is empty and has no rows in the result set	WITHOUT_CLASSIFICATION	0.999999453861119	WITHOUT_CLASSIFICATION	5.461388809664205E-7	DESIGN
// grab its state from the ResultSet and keep it in the Session // (but don't yet initialize the object itself) // note that we acquire LockMode.READ even if it was not requested	WITHOUT_CLASSIFICATION	0.9999617395443408	WITHOUT_CLASSIFICATION	3.8260455659183436E-5	DESIGN
// a many-to-many; // decrement currentDepth here to allow join across the association table // without exceeding MAX_FETCH_DEPTH (i.e. the "currentDepth - 1" bit)	WITHOUT_CLASSIFICATION	0.9954498349315227	WITHOUT_CLASSIFICATION	0.0045501650684771746	DESIGN
// if not a composite key, use "foo in (?, ?, ?)" for batching // if no batch, and not a composite key, use "foo = ?"	WITHOUT_CLASSIFICATION	0.9999999924531162	WITHOUT_CLASSIFICATION	7.546883781903583E-9	DESIGN
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999999996789893	WITHOUT_CLASSIFICATION	3.210107481944284E-10	DESIGN
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9999947122808044	WITHOUT_CLASSIFICATION	5.287719195602717E-6	DESIGN
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9999947122808044	WITHOUT_CLASSIFICATION	5.287719195602717E-6	DESIGN
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.9999418938852895	WITHOUT_CLASSIFICATION	5.810611471036044E-5	DESIGN
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999997354228501	WITHOUT_CLASSIFICATION	2.645771498906442E-7	DESIGN
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.999995009578453	WITHOUT_CLASSIFICATION	4.990421547071751E-6	DESIGN
/**	WITHOUT_CLASSIFICATION	0.9098463739076227	DESIGN	0.09015362609237733	WITHOUT_CLASSIFICATION
// ignore	WITHOUT_CLASSIFICATION	0.9999998176961284	WITHOUT_CLASSIFICATION	1.8230387158018292E-7	DESIGN
// ignore	WITHOUT_CLASSIFICATION	0.9999998176961284	WITHOUT_CLASSIFICATION	1.8230387158018292E-7	DESIGN
//        }	WITHOUT_CLASSIFICATION	0.9999983599727531	WITHOUT_CLASSIFICATION	1.6400272469104716E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.9966662531954268	WITHOUT_CLASSIFICATION	0.003333746804573307	DESIGN
//	WITHOUT_CLASSIFICATION	0.9966662531954268	WITHOUT_CLASSIFICATION	0.003333746804573307	DESIGN
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9999434447255832	WITHOUT_CLASSIFICATION	5.6555274416786376E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9966662531954268	WITHOUT_CLASSIFICATION	0.003333746804573307	DESIGN
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.999984004888074	WITHOUT_CLASSIFICATION	1.5995111925965033E-5	DESIGN
// at this point we have (drivingSqlAlias) the SQL alias of the driving table // corresponding to the given user alias.  However, the driving table is not // (necessarily) the table against which we want to apply locks.  Mainly, // the exception case here is joined-subclass hierarchies where we instead // want to apply the lock against the root table (for all other strategies, // it just happens that driving and root are the same).	WITHOUT_CLASSIFICATION	0.9999999736792946	WITHOUT_CLASSIFICATION	2.6320705417164987E-8	DESIGN
// the column doesnt exist at all.	WITHOUT_CLASSIFICATION	0.9999989853666822	WITHOUT_CLASSIFICATION	1.0146333178172418E-6	DESIGN
// we have a mapped identifier property and the root of // the incoming property path matched that identifier // property	WITHOUT_CLASSIFICATION	0.9999987097289722	WITHOUT_CLASSIFICATION	1.2902710277236956E-6	DESIGN
// we have an embedded composite identifier	WITHOUT_CLASSIFICATION	0.9999994428694851	WITHOUT_CLASSIFICATION	5.571305149414113E-7	DESIGN
// both many-to-one and one-to-one are represented as a // Property.  EntityPersister is relying on this value to // determine "lazy fetch groups" in terms of field-level // interception.  So we need to make sure that we return // true here for the case of many-to-one and one-to-one // with lazy="no-proxy" // // * impl note - lazy="no-proxy" currently forces both // lazy and unwrap to be set to true.  The other case we // are extremely interested in here is that of lazy="proxy" // where lazy is set to true, but unwrap is set to false. // thus we use both here under the assumption that this // return is really only ever used during persister // construction to determine the lazy property/field fetch // groupings.  If that assertion changes then this check // needs to change as well.  Partially, this is an issue with // the overloading of the term "lazy" here...	WITHOUT_CLASSIFICATION	0.9999999639535766	WITHOUT_CLASSIFICATION	3.604642344134629E-8	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992955718436	WITHOUT_CLASSIFICATION	7.044281563898861E-7	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992955718436	WITHOUT_CLASSIFICATION	7.044281563898861E-7	DESIGN
/*rootTableName = persistentClass.getRootTable().getQualifiedName( 	WITHOUT_CLASSIFICATION	0.9999257272043579	WITHOUT_CLASSIFICATION	7.427279564208325E-5	DESIGN
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999935533483776	WITHOUT_CLASSIFICATION	6.446651622435506E-6	DESIGN
// Custom sql	WITHOUT_CLASSIFICATION	0.9999991283527822	WITHOUT_CLASSIFICATION	8.716472177282186E-7	DESIGN
/*protected void initPropertyPaths(	WITHOUT_CLASSIFICATION	0.7828454434896078	WITHOUT_CLASSIFICATION	0.21715455651039217	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999987441345871	WITHOUT_CLASSIFICATION	1.255865412910474E-6	DESIGN
//Custom SQL (would be better if these were private)	WITHOUT_CLASSIFICATION	0.8308160786815549	WITHOUT_CLASSIFICATION	0.16918392131844512	DESIGN
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997551339589262	WITHOUT_CLASSIFICATION	2.4486604107373485E-4	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999987441345871	WITHOUT_CLASSIFICATION	1.255865412910474E-6	DESIGN
// aliases for identifier ( alias.id ); skip if the entity defines a non-id property named 'id'	WITHOUT_CLASSIFICATION	0.9999997428489827	WITHOUT_CLASSIFICATION	2.5715101726798903E-7	DESIGN
//decide which ResultSet to get the property value from:	WITHOUT_CLASSIFICATION	0.9999198672915275	WITHOUT_CLASSIFICATION	8.013270847247967E-5	DESIGN
//note: it is conceptually possible that a UserType could map null to //	WITHOUT_CLASSIFICATION	0.8934398142975291	WITHOUT_CLASSIFICATION	0.10656018570247097	DESIGN
// the contract of EntityTuplizer.determineConcreteSubclassEntityName says that returning null // is an indication that the specified entity-name (this.getEntityName) should be used.	WITHOUT_CLASSIFICATION	0.9469186488855805	WITHOUT_CLASSIFICATION	0.053081351114419376	DESIGN
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.9999994367034195	WITHOUT_CLASSIFICATION	5.632965805383889E-7	DESIGN
// cache these since they are stateless // this one could even be static...	WITHOUT_CLASSIFICATION	0.5955712271336855	WITHOUT_CLASSIFICATION	0.40442877286631446	DESIGN
//"as" is not in KEYWORDS	WITHOUT_CLASSIFICATION	0.9999194796197339	WITHOUT_CLASSIFICATION	8.052038026605253E-5	DESIGN
// --Commented out by Inspection (12/4/04 9:10 AM): public abstract void addCondition(String alias, String[] columns, String condition);	WITHOUT_CLASSIFICATION	0.9999999872166887	WITHOUT_CLASSIFICATION	1.278331134252591E-8	DESIGN
//use the id column alias	WITHOUT_CLASSIFICATION	0.9999849701932254	WITHOUT_CLASSIFICATION	1.5029806774539574E-5	DESIGN
//private List aliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.999999999392568	WITHOUT_CLASSIFICATION	6.074320287545287E-10	DESIGN
//columns.add(columnName); //aliases.add(tableAlias);	WITHOUT_CLASSIFICATION	0.9999971853436371	WITHOUT_CLASSIFICATION	2.8146563628790807E-6	DESIGN
//where fragment must be empty!	WITHOUT_CLASSIFICATION	0.9544593767351408	WITHOUT_CLASSIFICATION	0.04554062326485921	DESIGN
// revert to traditional hibernate behavior of setting initialPoolSize to minPoolSize // unless otherwise specified with a c3p0.*-style parameter.	WITHOUT_CLASSIFICATION	0.9999191846516083	WITHOUT_CLASSIFICATION	8.081534839161416E-5	DESIGN
//arbitrary on clause ignored!!	WITHOUT_CLASSIFICATION	0.9999999539149355	WITHOUT_CLASSIFICATION	4.6085064460011007E-8	DESIGN
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9998536831746903	WITHOUT_CLASSIFICATION	1.4631682530972137E-4	DESIGN
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9998536831746903	WITHOUT_CLASSIFICATION	1.4631682530972137E-4	DESIGN
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9998974180690403	WITHOUT_CLASSIFICATION	1.0258193095972038E-4	DESIGN
// Essentially: // 1) If we have a local (Hibernate) transaction in progress //      and it already has the UserTransaction cached, use that //      UserTransaction to determine the status. // 2) If a transaction manager has been located, use //      that transaction manager to determine the status. // 3) Finally, as the last resort, try to lookup the //      UserTransaction via JNDI and use that to determine the //      status.	WITHOUT_CLASSIFICATION	0.999999993239953	WITHOUT_CLASSIFICATION	6.7600469881955775E-9	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.9998094328207842	WITHOUT_CLASSIFICATION	1.9056717921580864E-4	DESIGN
//swallow it (the transaction _was_ successful or successfully rolled back)	WITHOUT_CLASSIFICATION	0.9999729730128284	WITHOUT_CLASSIFICATION	2.7026987171714376E-5	DESIGN
// ignore it	WITHOUT_CLASSIFICATION	0.9999998907169921	WITHOUT_CLASSIFICATION	1.0928300783400715E-7	DESIGN
// we need to dirty check many-to-ones with not-found="ignore" in order  // to update the cache (not the database), since in this case a null // entity reference can lose information	WITHOUT_CLASSIFICATION	0.9999877012890453	WITHOUT_CLASSIFICATION	1.2298710954760043E-5	DESIGN
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999890332496316	WITHOUT_CLASSIFICATION	1.0966750368327342E-5	DESIGN
// Regions can get instantiated in the course of normal work (e.g. // a named query region will be created the first time the query is // executed), so suspend any ongoing tx	WITHOUT_CLASSIFICATION	0.9999329703734509	WITHOUT_CLASSIFICATION	6.702962654920013E-5	DESIGN
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999164799479922	WITHOUT_CLASSIFICATION	8.352005200780357E-5	DESIGN
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999867837464526	WITHOUT_CLASSIFICATION	1.3216253547526426E-5	DESIGN
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995557236937657	WITHOUT_CLASSIFICATION	4.4427630623424636E-4	DESIGN
// NOTE : this is being used from the process of shutting down a // SessionFactory. Specific things to consider: // (1) this clearing of the region should not propagate to // other nodes on the cluster (if any); this is the // cache-mode-local option bit... // (2) really just trying a best effort to cleanup after // ourselves; lock failures, etc are not critical here; // this is the fail-silently option bit...	WITHOUT_CLASSIFICATION	0.9990497630119267	DESIGN	9.502369880733842E-4	WITHOUT_CLASSIFICATION
// need to extract the component values and check for subtype replacements...	WITHOUT_CLASSIFICATION	0.7255213584594772	WITHOUT_CLASSIFICATION	0.27447864154052265	DESIGN
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.999999965789723	WITHOUT_CLASSIFICATION	3.4210276968639444E-8	DESIGN
// for now, just "re-flatten" the metamodel since this is temporary stuff anyway (HHH-1907)	WITHOUT_CLASSIFICATION	0.9838878223716365	WITHOUT_CLASSIFICATION	0.016112177628363554	DESIGN
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999044249334755	WITHOUT_CLASSIFICATION	9.557506652452269E-5	DESIGN
//This solution would allow us to eliminate the owner arg to disassemble(), but //what if the collection was null, and then later had elements added? seems unsafe //session.getPersistenceContext().getCollectionEntry( (PersistentCollection) value ).getKey();	WITHOUT_CLASSIFICATION	0.719895280816593	DESIGN	0.28010471918340696	WITHOUT_CLASSIFICATION
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999993055751027	WITHOUT_CLASSIFICATION	6.94424897291631E-7	DESIGN
// some collections are not lazy:	WITHOUT_CLASSIFICATION	0.9999947797345563	WITHOUT_CLASSIFICATION	5.220265443695292E-6	DESIGN
// Here we don't want to suspend the tx. If we do: // 1) We might be caching query results that reflect uncommitted // changes. No tx == no WL on cache node, so other threads // can prematurely see those query results // 2) No tx == immediate replication. More overhead, plus we // spread issue #1 above around the cluster	WITHOUT_CLASSIFICATION	0.9999671084421343	WITHOUT_CLASSIFICATION	3.2891557865745726E-5	DESIGN
// return the (fully resolved) identifier value, but do not resolve // to the actual referenced entity instance // NOTE: the owner of the association is not really the owner of the id!	WITHOUT_CLASSIFICATION	0.9999995447030542	WITHOUT_CLASSIFICATION	4.5529694571998604E-7	DESIGN
// Add a zero (or quite low) timeout option so we don't block. // Ignore any TimeoutException. Basically we forego caching the // query result in order to avoid blocking. // Reads are done with suspended tx, so they should not hold the // lock for long.  Not caching the query result is OK, since // any subsequent read will just see the old result with its // out-of-date timestamp; that result will be discarded and the // db query performed again.	WITHOUT_CLASSIFICATION	0.9999993741601765	WITHOUT_CLASSIFICATION	6.258398235144512E-7	DESIGN
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.998138797278522	WITHOUT_CLASSIFICATION	0.0018612027214781333	DESIGN
// We have the JBCWriteMutex, so no other *local* thread will  // be trying to write this key.  // It's possible here some remote thread has come in and // changed the values again, but since we are reading the // values to write to JBC right now, we know we are writing // the latest values; i.e. we don't assume that what we cached // in entry.update() above is what we should write to JBC *now*. // Our write could be redundant, i.e. we are writing what // some remote thread just came in an wrote.  There is a chance  // that yet another remote thread will update us, and we'll then // overwrite that later data in JBC.  But, all remote nodes will // ignore that change in their localCache; the only place it  // will live will be in JBC, where it can only effect the  // initial state transfer values on newly joined nodes  // (i.e. populateLocalCache()).	WITHOUT_CLASSIFICATION	0.99999992160395	WITHOUT_CLASSIFICATION	7.839604997914468E-8	DESIGN
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999974994602332	WITHOUT_CLASSIFICATION	2.5005397667585143E-6	DESIGN
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999974994602332	WITHOUT_CLASSIFICATION	2.5005397667585143E-6	DESIGN
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9992883015226379	WITHOUT_CLASSIFICATION	7.116984773621135E-4	DESIGN
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9492579515149033	WITHOUT_CLASSIFICATION	0.05074204848509672	DESIGN
// we need to obtain the lock before any actions are // executed, since this may be an inverse="true" // bidirectional association and it is one of the // earlier entity actions which actually updates // the database (this action is resposible for // second-level cache invalidation only)	WITHOUT_CLASSIFICATION	0.9999911370809281	WITHOUT_CLASSIFICATION	8.862919071925935E-6	DESIGN
//postDelete: // After actually deleting a row, record the fact that the instance no longer  // exists on the database (needed for identity-column key generation), and // remove it from the session cache	WITHOUT_CLASSIFICATION	0.999988841474721	WITHOUT_CLASSIFICATION	1.1158525278947443E-5	DESIGN
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999778855744089	WITHOUT_CLASSIFICATION	2.2114425591113192E-5	DESIGN
// todo : what else to do here?	DESIGN	0.9950883421443351	WITHOUT_CLASSIFICATION	0.004911657855664939	DESIGN
//put() has nowait semantics, is this really appropriate? //note that it needs to be async replication, never local or sync	DESIGN	0.9239576397599439	WITHOUT_CLASSIFICATION	0.07604236024005612	DESIGN
// 'hibernate.temp.use_jdbc_metadata_defaults' is a temporary magic value. // The need for it is intended to be alleviated with future developement, thus it is // not defined as an Environment constant... // // it is used to control whether we should consult the JDBC metadata to determine // certain Settings default values; it is useful to *not* do this when the database // may not be available (mainly in tools usage).	DESIGN	0.6539055531206793	WITHOUT_CLASSIFICATION	0.3460944468793207	DESIGN
//TODO: get SQL rendering out of this package!	DESIGN	0.9414313376154936	DESIGN	0.05856866238450632	WITHOUT_CLASSIFICATION
//TODO: get SQL rendering out of this package!	DESIGN	0.9414313376154936	DESIGN	0.05856866238450632	WITHOUT_CLASSIFICATION
// todo : eventually merge this with TreeCache and just add optional opt-lock support there.	DESIGN	0.9999680905044999	WITHOUT_CLASSIFICATION	3.1909495500110285E-5	DESIGN
// can happen because of the multiple ways Cache.remove() // can be invoked :(	DESIGN	0.9996131210468673	WITHOUT_CLASSIFICATION	3.868789531327374E-4	DESIGN
// work around the "feature" where tree cache is validating the // inserted node during the next transaction.  no idea...	DESIGN	0.5576244825649145	DESIGN	0.4423755174350855	WITHOUT_CLASSIFICATION
/**     * FIXME Per the RegionFactory class Javadoc, this constructor version     * should not be necessary.     *      * @param props The configuration properties     */	DESIGN	0.999992409374061	DESIGN	7.590625939125532E-6	WITHOUT_CLASSIFICATION
/**     * FIXME Per the RegionFactory class Javadoc, this constructor version     * should not be necessary.     *      * @param props The configuration properties     */	DESIGN	0.999992409374061	DESIGN	7.590625939125532E-6	WITHOUT_CLASSIFICATION
// FIXME Hacky workaround to JBCACHE-1202	DESIGN	0.9999999984596225	DESIGN	1.5403775893870338E-9	WITHOUT_CLASSIFICATION
// FIXME Hacky workaround to JBCACHE-1202	DESIGN	0.9999999984596225	DESIGN	1.5403775893870338E-9	WITHOUT_CLASSIFICATION
// TODO: I considered validating TS cache config here, // but decided to defer unti getTimestampsCacheInstance() in case the  // cache is never actually used	DESIGN	0.9998455543738107	DESIGN	1.544456261892183E-4	WITHOUT_CLASSIFICATION
// TODO Is this a valid operation on a timestamps cache?	DESIGN	0.9957142173672481	DESIGN	0.004285782632751934	WITHOUT_CLASSIFICATION
// TODO Is this a valid operation on a timestamps cache?	DESIGN	0.9957142173672481	DESIGN	0.004285782632751934	WITHOUT_CLASSIFICATION
// TODO Why not use the timestamp in a DataVersion?	DESIGN	0.999999911447849	DESIGN	8.855215096899919E-8	WITHOUT_CLASSIFICATION
// can happen because of the multiple ways Cache.remove() // can be invoked :(	DESIGN	0.9996131210468673	WITHOUT_CLASSIFICATION	3.868789531327374E-4	DESIGN
// work around the "feature" where tree cache is validating the // inserted node during the next transaction. no idea...	DESIGN	0.658402665999987	WITHOUT_CLASSIFICATION	0.34159733400001296	DESIGN
//swaldman 2004-02-07: modify to allow null values to signify fall through to c3p0 PoolConfig defaults	DESIGN	0.9999768152197545	WITHOUT_CLASSIFICATION	2.318478024562773E-5	DESIGN
// turn hibernate.c3p0.* into c3p0.*, so c3p0 // gets a chance to see all hibernate.c3p0.*	DESIGN	0.9999941152275137	WITHOUT_CLASSIFICATION	5.88477248634459E-6	DESIGN
//TODO: this bit actually has to be called after all cascades! //      but since identity insert is called *synchronously*, //      instead of asynchronously as other actions, it isn't	DESIGN	0.8129147662851516	WITHOUT_CLASSIFICATION	0.1870852337148484	DESIGN
//TODO: reenable if we also fix the above todo	DESIGN	0.9940487604275796	DESIGN	0.005951239572420354	WITHOUT_CLASSIFICATION
//TODO: inefficient if that cache is just going to ignore the updated state!	DESIGN	0.9820389022535491	WITHOUT_CLASSIFICATION	0.017961097746451	DESIGN
// we may be screwed here since the collection action is about to execute // and we do not know the final owner key value	DESIGN	0.9999989620758779	WITHOUT_CLASSIFICATION	1.0379241221311318E-6	DESIGN
/** Create an action that will evict collection and entity regions based on queryspaces (table names).	DESIGN	0.9616871695764753	WITHOUT_CLASSIFICATION	0.03831283042352482	DESIGN
// todo : what else to do here?	DESIGN	0.9950883421443351	WITHOUT_CLASSIFICATION	0.004911657855664939	DESIGN
// todo : modify the class definition if not already transformed...	DESIGN	0.9998175676827123	WITHOUT_CLASSIFICATION	1.8243231728775968E-4	DESIGN
// todo : what else to do here?	DESIGN	0.9950883421443351	WITHOUT_CLASSIFICATION	0.004911657855664939	DESIGN
// this is called by SessionFactory irregardless; we just disregard here; // could also add a check to SessionFactory to only conditionally call start	DESIGN	0.9582293664362143	WITHOUT_CLASSIFICATION	0.04177063356378562	DESIGN
// this is called by SessionFactory irregardless; we just disregard here; // could also add a check to SessionFactory to only conditionally call stop	DESIGN	0.9849742288759555	WITHOUT_CLASSIFICATION	0.015025771124044435	DESIGN
//TODO: to handle concurrent writes correctly, this should return a Lock to the client	DESIGN	0.9999891273028821	DESIGN	1.0872697117898489E-5	WITHOUT_CLASSIFICATION
//put() has nowait semantics, is this really appropriate? //note that it needs to be async replication, never local or sync	DESIGN	0.9239576397599439	WITHOUT_CLASSIFICATION	0.07604236024005612	DESIGN
//TODO: to handle concurrent writes correctly, the client should pass in a Lock	DESIGN	0.9142225839790978	DESIGN	0.0857774160209021	WITHOUT_CLASSIFICATION
//TODO: assumes all collections disassemble to an array!	DESIGN	0.9999662501903976	WITHOUT_CLASSIFICATION	3.374980960248119E-5	DESIGN
//TODO: reuse the PreLoadEvent	DESIGN	0.595568982628859	DESIGN	0.4044310173711409	WITHOUT_CLASSIFICATION
// todo: this was added to support initializing an entity's EntityEntry snapshot during reattach; // this should be refactored to instead expose a method to assemble a EntityEntry based on this // state for return.	DESIGN	0.8536165176436391	WITHOUT_CLASSIFICATION	0.1463834823563609	DESIGN
// todo : what is the implication of this?	DESIGN	0.7028482944159272	WITHOUT_CLASSIFICATION	0.29715170558407283	DESIGN
// use COUNT as the default.  This mimics the old behavior, although // NONE might be a better option moving forward in the case of callable	DESIGN	0.9067485377513117	WITHOUT_CLASSIFICATION	0.09325146224868838	DESIGN
/* TODO: joinKeyColumnName & foreignKeyColumnName should be called either here or at a	DESIGN	0.9845850906029021	DESIGN	0.015414909397097887	WITHOUT_CLASSIFICATION
//TODO: suck this into initLaziness!	DESIGN	0.9995387255879777	DESIGN	4.612744120222022E-4	WITHOUT_CLASSIFICATION
// we have to set up the table later!! yuck	DESIGN	0.9976364429392337	WITHOUT_CLASSIFICATION	0.0023635570607663235	DESIGN
//TODO: better to degrade to lazy="false" if uninstrumented	DESIGN	0.6689153342662016	DESIGN	0.3310846657337983	WITHOUT_CLASSIFICATION
// todo : again, how *should* this work for non-pojo entities?	DESIGN	0.9662111187772002	DESIGN	0.03378888122279982	WITHOUT_CLASSIFICATION
// TODO: this is a bit of copy/paste from IndexedCollection.createPrimaryKey()	DESIGN	0.9979978502760278	DESIGN	0.0020021497239722263	WITHOUT_CLASSIFICATION
// This inner class implements a case statement....perhaps im being a bit over-clever here	DESIGN	0.9797632612726933	DESIGN	0.020236738727306736	WITHOUT_CLASSIFICATION
//TODO: bad implementation, cos it depends upon ordering of mapping doc //      fixing this requires that Collection/PersistentClass gain access //      to the Mappings reference from Configuration (or the filterDefinitions //      map directly) sometime during Configuration.buildSessionFactory //      (after all the types/filter-defs are known and before building //      persisters).	DESIGN	0.9930345271477975	DESIGN	0.0069654728522024105	WITHOUT_CLASSIFICATION
//use of a stringbuffer to workaround a JDK bug	DESIGN	0.999475007158492	DESIGN	5.249928415080356E-4	WITHOUT_CLASSIFICATION
// hack/workaround as sqlquery impl depend on having a key.	DESIGN	0.9999999875858593	DESIGN	1.241414065114925E-8	WITHOUT_CLASSIFICATION
//FIXME: get the PersistentClass	DESIGN	0.5789332416107935	WITHOUT_CLASSIFICATION	0.4210667583892064	DESIGN
//FIXME: get the PersistentClass	DESIGN	0.5789332416107935	WITHOUT_CLASSIFICATION	0.4210667583892064	DESIGN
//Icky workaround for MySQL bug:	DESIGN	0.9976388475335278	DESIGN	0.002361152466472219	WITHOUT_CLASSIFICATION
//TODO: Somehow add the newly created foreign keys to the internal collection	DESIGN	0.9550405605573026	WITHOUT_CLASSIFICATION	0.04495943944269745	DESIGN
//TODO possibly relax that	DESIGN	0.7325209986723604	DESIGN	0.2674790013276395	WITHOUT_CLASSIFICATION
//TODO possibly relax that	DESIGN	0.7325209986723604	DESIGN	0.2674790013276395	WITHOUT_CLASSIFICATION
//TODO possibly relax that	DESIGN	0.7325209986723604	DESIGN	0.2674790013276395	WITHOUT_CLASSIFICATION
//use of a stringbuffer to workaround a JDK bug	DESIGN	0.999475007158492	DESIGN	5.249928415080356E-4	WITHOUT_CLASSIFICATION
//use a degenerated strategy for backward compatibility	DESIGN	0.9977996999156755	WITHOUT_CLASSIFICATION	0.002200300084324423	DESIGN
// Sets can be just a view of a part of another collection. // do we need to copy it to be sure it won't be changing // underneath us? // ie. this.set.addAll(set);	DESIGN	0.6022102213897622	WITHOUT_CLASSIFICATION	0.39778977861023773	DESIGN
//note that i parameter is now unused (delete it?)	DESIGN	0.9908425717703792	DESIGN	0.009157428229620951	WITHOUT_CLASSIFICATION
//just to help out during the load (ugly, i know)	DESIGN	0.9995803271939276	WITHOUT_CLASSIFICATION	4.1967280607227626E-4	DESIGN
// TODO : safe to interpret "map.remove(key) == null" as non-dirty?	DESIGN	0.5385216905012234	DESIGN	0.46147830949877666	WITHOUT_CLASSIFICATION
// yick!  need this for proper serialization/deserialization handling...	DESIGN	0.8993838434774306	WITHOUT_CLASSIFICATION	0.10061615652256939	DESIGN
//TODO: get SQL rendering out of this package!	DESIGN	0.9414313376154936	DESIGN	0.05856866238450632	WITHOUT_CLASSIFICATION
//TODO: get SQL rendering out of this package!	DESIGN	0.9414313376154936	DESIGN	0.05856866238450632	WITHOUT_CLASSIFICATION
//yuck!	DESIGN	0.9606031012113311	WITHOUT_CLASSIFICATION	0.039396898788668935	DESIGN
//TODO: get SQL rendering out of this package!	DESIGN	0.9414313376154936	DESIGN	0.05856866238450632	WITHOUT_CLASSIFICATION
// TODO : not sure this is correct, could not find docs on how to do this.	DESIGN	0.9999999704899095	DESIGN	2.951009053115287E-8	WITHOUT_CLASSIFICATION
//HSQL has no Blob/Clob support .... but just put these here for now!	DESIGN	0.9968632435646088	WITHOUT_CLASSIFICATION	0.003136756435391242	DESIGN
// does this need holdlock also? : return tableName + " with (updlock, rowlock, holdlock)";	DESIGN	0.8597467988601606	DESIGN	0.14025320113983944	WITHOUT_CLASSIFICATION
// sql-server, at least needed this dropped after use; strange!	DESIGN	0.9995504956186565	WITHOUT_CLASSIFICATION	4.495043813434317E-4	DESIGN
// todo : is there really any reason to kkeep trying if this fails once?	DESIGN	0.9089436148564194	WITHOUT_CLASSIFICATION	0.0910563851435807	DESIGN
// TBD should this be varbinary($1)? //	DESIGN	0.9905294761988845	WITHOUT_CLASSIFICATION	0.009470523801115363	DESIGN
// is it necessary to register %exact since it can only appear in a where clause?	DESIGN	0.9956896226506671	WITHOUT_CLASSIFICATION	0.004310377349332953	DESIGN
// xmlforest requires a new kind of function constructor	DESIGN	0.9999985934247971	WITHOUT_CLASSIFICATION	1.4065752028472712E-6	DESIGN
// Does this dialect support the ALTER TABLE syntax?	DESIGN	0.9984065742288205	WITHOUT_CLASSIFICATION	0.0015934257711794925	DESIGN
// Do we need to qualify index names with the schema name?	DESIGN	0.9998880428271827	WITHOUT_CLASSIFICATION	1.1195717281727419E-4	DESIGN
// Does this dialect support the UNIQUE column syntax?	DESIGN	0.997640849874059	WITHOUT_CLASSIFICATION	0.002359150125941044	DESIGN
// Does this dialect support check constraints?	DESIGN	0.9930939488729084	WITHOUT_CLASSIFICATION	0.006906051127091607	DESIGN
// Do we need to drop constraints before dropping tables in this dialect?	DESIGN	0.956966146073861	WITHOUT_CLASSIFICATION	0.043033853926139065	DESIGN
// Does this dialect support the FOR UPDATE syntax?	DESIGN	0.9792439519534885	WITHOUT_CLASSIFICATION	0.020756048046511526	DESIGN
// Does this dialect support the Oracle-style FOR UPDATE NOWAIT syntax?	DESIGN	0.9915602101235392	WITHOUT_CLASSIFICATION	0.008439789876460687	DESIGN
// Does this dialect support FOR UPDATE OF, allowing particular rows to be locked?	DESIGN	0.9987462279286643	DESIGN	0.0012537720713356843	WITHOUT_CLASSIFICATION
//note there is a wierd implementation in the client side	DESIGN	0.9999761641549146	WITHOUT_CLASSIFICATION	2.3835845085360087E-5	DESIGN
//TODO: never reached, since getTypeName() actually throws an exception!	DESIGN	0.6495488517570568	WITHOUT_CLASSIFICATION	0.3504511482429432	DESIGN
// todo : should we additionally check the current isolation mode explicitly?	DESIGN	0.9762793253604852	DESIGN	0.0237206746395148	WITHOUT_CLASSIFICATION
// todo : remove this and just have subclasses use Isolater/IsolatedWork directly...	DESIGN	0.7941881080283861	DESIGN	0.20581189197161384	WITHOUT_CLASSIFICATION
//TODO: should orphans really be deleted during lock???	DESIGN	0.9775572220398131	DESIGN	0.022442777960186837	WITHOUT_CLASSIFICATION
// orphans should not be deleted during merge??	DESIGN	0.9997899076236999	WITHOUT_CLASSIFICATION	2.100923763001415E-4	DESIGN
// orphans should not be deleted during copy??	DESIGN	0.9998404554499492	WITHOUT_CLASSIFICATION	1.5954455005080196E-4	DESIGN
//I suppose?	DESIGN	0.9907032174764908	WITHOUT_CLASSIFICATION	0.009296782523509186	DESIGN
//TODO: suck this logic into the collection!	DESIGN	0.9996072861289124	DESIGN	3.9271387108757484E-4	WITHOUT_CLASSIFICATION
// TODO: an alternative is to check if the owner has changed; if it hasn't then // get the ID from collection.getOwner()	DESIGN	0.7303414405901435	WITHOUT_CLASSIFICATION	0.2696585594098565	DESIGN
//TODO:refactor + make this method private	DESIGN	0.9990884823126979	DESIGN	9.115176873020909E-4	WITHOUT_CLASSIFICATION
// todo : we can actually just determine this from the incoming EntityEntry-s	DESIGN	0.9998835347660138	WITHOUT_CLASSIFICATION	1.1646523398630786E-4	DESIGN
//TODO: Should this be an InitializeEntityEventListener??? (watch out for performance!)	DESIGN	0.9984937985377006	DESIGN	0.00150620146229938	WITHOUT_CLASSIFICATION
//TODO: better to pass the id in as an argument?	DESIGN	0.9992782431504591	DESIGN	7.217568495409125E-4	WITHOUT_CLASSIFICATION
// todo : potentially look at optimizing these two arrays	DESIGN	0.9992981752684469	WITHOUT_CLASSIFICATION	7.018247315530629E-4	DESIGN
/* trim done to workaround stupid oracle bug that cant handle whitespaces before a { in a sp */	DESIGN	0.9999875835463279	DESIGN	1.2416453672123458E-5	WITHOUT_CLASSIFICATION
/* trim done to workaround stupid oracle bug that cant handle whitespaces before a { in a sp */	DESIGN	0.9999875835463279	DESIGN	1.2416453672123458E-5	WITHOUT_CLASSIFICATION
//TODO: temporary	DESIGN	0.9983057068280148	DESIGN	0.001694293171985216	WITHOUT_CLASSIFICATION
//TODO: not quite sure about the full implications of this!	DESIGN	0.8405283853166263	WITHOUT_CLASSIFICATION	0.1594716146833736	DESIGN
//TODO: not quite sure about the full implications of this!	DESIGN	0.8405283853166263	WITHOUT_CLASSIFICATION	0.1594716146833736	DESIGN
//TODO: ugly here:	DESIGN	0.99981180379039	DESIGN	1.8819620961005076E-4	WITHOUT_CLASSIFICATION
//this is kinda the best we can do...	DESIGN	0.9848837392244938	WITHOUT_CLASSIFICATION	0.01511626077550616	DESIGN
//TODO: this needn't exclude subclasses...	DESIGN	0.9968172748750576	DESIGN	0.0031827251249425446	WITHOUT_CLASSIFICATION
// todo : need map? the prob is a proper key, right?	DESIGN	0.945251834807153	DESIGN	0.05474816519284705	WITHOUT_CLASSIFICATION
// todo : i'd much rather have this done from #endLoadingCollection(CollectionPersister,LoadingCollectionEntry)...	DESIGN	0.9956065419679289	WITHOUT_CLASSIFICATION	0.004393458032071106	DESIGN
// todo : hack!!! // NOTE : here we cleanup the load context when we have no more local // LCE entries.  This "works" for the time being because really // only the collection load contexts are implemented.  Long term, // this cleanup should become part of the "close result set" // processing from the (sandbox/jdbc) jdbc-container code.	DESIGN	0.9998154821521955	DESIGN	1.845178478044514E-4	WITHOUT_CLASSIFICATION
// todo : should really move this log statement to CollectionType, where this is used from...	DESIGN	0.842481739763557	DESIGN	0.15751826023644305	WITHOUT_CLASSIFICATION
// TODO : keep seperate notions of QT[] here for shallow/non-shallow queries...	DESIGN	0.9975973577585721	DESIGN	0.0024026422414279206	WITHOUT_CLASSIFICATION
// TODO : add this info to the translator and aggregate it here...	DESIGN	0.9998251369661426	DESIGN	1.7486303385737397E-4	WITHOUT_CLASSIFICATION
//TODO: move into collection type, so we can use polymorphism!	DESIGN	0.9886315247338994	DESIGN	0.011368475266100731	WITHOUT_CLASSIFICATION
// todo : should we check the current isolation mode explicitly?	DESIGN	0.7552458600015605	WITHOUT_CLASSIFICATION	0.24475413999843956	DESIGN
//TODO: suck into event class	DESIGN	0.9999442703127382	DESIGN	5.5729687261737294E-5	WITHOUT_CLASSIFICATION
//do we even really need this? the update will fail anyway....	DESIGN	0.576322942512775	DESIGN	0.423677057487225	WITHOUT_CLASSIFICATION
//hum ... should we cascade anyway? throw an exception? fine like it is?	DESIGN	0.9999970373010879	DESIGN	2.9626989120080564E-6	WITHOUT_CLASSIFICATION
//TODO: would it be better to do a refresh from db?	DESIGN	0.9999697919350645	DESIGN	3.0208064935398207E-5	WITHOUT_CLASSIFICATION
//TODO: we use two visitors here, inefficient!	DESIGN	0.9991749208675403	DESIGN	8.250791324597741E-4	WITHOUT_CLASSIFICATION
// this class has no proxies (so do a shortcut)	DESIGN	0.9999800529465328	WITHOUT_CLASSIFICATION	1.9947053467238138E-5	DESIGN
//PostLoad is needed for EJB3 //TODO: reuse the PostLoadEvent...	DESIGN	0.7616594944479057	WITHOUT_CLASSIFICATION	0.23834050555209435	DESIGN
//TODO: put this stuff back in to read snapshot from //      the second-level cache (needs some extra work)	DESIGN	0.9960183815425757	DESIGN	0.003981618457424305	WITHOUT_CLASSIFICATION
// null or brand new collection // this will also (inefficiently) handle arrays, which have // no snapshot, so we can't do any better	DESIGN	0.9472142886089776	WITHOUT_CLASSIFICATION	0.0527857113910223	DESIGN
//TODO: is this 100% correct?	DESIGN	0.9975381256911338	DESIGN	0.0024618743088661694	WITHOUT_CLASSIFICATION
// TODO: iteratively get transient entities and retry merge until one of the following conditions: //       1) transientCopyCache.size() == 0 //       2) transientCopyCache.size() is not decreasing and copyCache.size() is not increasing // TODO: find out if retrying can add entities to copyCache (don't think it can...) // For now, just retry once; throw TransientObjectException if there are still any transient entities	DESIGN	0.9659852774821601	DESIGN	0.03401472251783989	WITHOUT_CLASSIFICATION
// entity name will not be available for non-POJO entities // TODO: cache the entity name somewhere so that it is available to this exception	DESIGN	0.9993477190928808	DESIGN	6.522809071192008E-4	WITHOUT_CLASSIFICATION
//TODO: we should throw an exception if we really *know* for sure   //      that this is a detached instance, rather than just assuming //throw new StaleObjectStateException(entityName, id);	DESIGN	0.9834250952758271	DESIGN	0.016574904724172883	WITHOUT_CLASSIFICATION
// TODO : perhaps we should additionally require that the incoming entity // version be equivalent to the defined unsaved-value?	DESIGN	0.9999999869033671	DESIGN	1.3096632887406996E-8	WITHOUT_CLASSIFICATION
// perhaps this should be an exception since it is only ever used // in the above method?	DESIGN	0.9945746663475241	DESIGN	0.005425333652475808	WITHOUT_CLASSIFICATION
// Put a placeholder in entries, so we don't recurse back and try to save() the // same object again. QUESTION: should this be done before onSave() is called? // likewise, should it be done before onUpdate()?	DESIGN	0.9823768795627585	WITHOUT_CLASSIFICATION	0.017623120437241433	DESIGN
//TODO: merge into one method!	DESIGN	0.9684190808921733	DESIGN	0.03158091910782669	WITHOUT_CLASSIFICATION
//TODO: refactor to .sql package	DESIGN	0.9879415532658954	DESIGN	0.012058446734104639	WITHOUT_CLASSIFICATION
/** * Provides query splitting methods, which were originally in QueryTranslator. * <br> * TODO: This will need to be refactored at some point. * * @author josh */	DESIGN	0.9999999495808817	DESIGN	5.04191182053231E-8	WITHOUT_CLASSIFICATION
//TODO: this is one of the ugliest and most fragile pieces of code in Hibernate....	DESIGN	0.9999932454883151	DESIGN	6.754511684859474E-6	WITHOUT_CLASSIFICATION
// todo : temporary //      needed because currently persister is the one that //      creates and renders the join fragments for inheritence //      hierarchies...	DESIGN	0.7796550357274393	DESIGN	0.22034496427256073	WITHOUT_CLASSIFICATION
// TODO : better way?!?	DESIGN	0.9999999962269126	DESIGN	3.7730874440181415E-9	WITHOUT_CLASSIFICATION
// Not possible to simply re-use the versionPropertyNode here as it causes // OOM errors due to circularity :(	DESIGN	0.9999993483203816	WITHOUT_CLASSIFICATION	6.51679618388365E-7	DESIGN
//TODO:this is only needed during compilation .. can we eliminate the instvar?	DESIGN	0.9973059588807088	DESIGN	0.0026940411192911255	WITHOUT_CLASSIFICATION
// TODO : this is a bit dodgy, come up with a better way to check this (plus see above comment)	DESIGN	0.9999999940337602	DESIGN	5.966239855660608E-9	WITHOUT_CLASSIFICATION
// even here, if only properties mapped to the "base table" are referenced // in the set and where clauses, this could be handled by the BasicDelegate. // TODO : decide if it is better performance-wise to perform that check, or to simply use the MultiTableUpdateDelegate	DESIGN	0.9999999914006915	DESIGN	8.599308509748003E-9	WITHOUT_CLASSIFICATION
//TODO: switch statements are always evil! We already had bugs because  //      of forgotten token types. Use polymorphism for this!	DESIGN	0.9678955144079882	DESIGN	0.032104485592011775	WITHOUT_CLASSIFICATION
// TODO : we really need to be able to deal with component paths here also; // this is difficult because the hql-sql grammar expects all those node types // to be FromReferenceNodes.  One potential fix here would be to convert the // IntoClause to just use a FromClause/FromElement combo (as a child of the // InsertStatement) and move all this logic into the InsertStatement.  That's // probably the easiest approach (read: least amount of changes to the grammar // and code), but just doesn't feel right as then an insert would contain // 2 from-clauses	DESIGN	0.9814719676716512	DESIGN	0.018528032328348872	WITHOUT_CLASSIFICATION
// really there are two situations where it should be ok to allow the insertion // into properties defined on a superclass: //      1) union-subclass with an abstract root entity //      2) discrim-subclass // // #1 is handled already because of the fact that // UnionSubclassPersister alreay always returns 0 // for this call... // // we may want to disallow it for discrim-subclass just for // consistency-sake (currently does not work anyway)...	DESIGN	0.9999999957925735	WITHOUT_CLASSIFICATION	4.2074265426010625E-9	DESIGN
//yuck!	DESIGN	0.9606031012113311	WITHOUT_CLASSIFICATION	0.039396898788668935	DESIGN
// implicit joins are always(?) ok to reuse	DESIGN	0.9959986703720326	WITHOUT_CLASSIFICATION	0.004001329627967336	DESIGN
// TODO : we may also want to check that the types here map to exactly one column/JDBC-type //      can't think of a situation where arithmetic expression between multi-column mappings //      makes any sense.	DESIGN	0.999524007957928	DESIGN	4.759920420720736E-4	WITHOUT_CLASSIFICATION
// we do not know either type //BLIND GUESS!	DESIGN	0.9997866058393466	WITHOUT_CLASSIFICATION	2.1339416065330855E-4	DESIGN
//TODO: used to be exprNoParens! was this needed?	DESIGN	0.9999999952523557	DESIGN	4.747644301682921E-9	WITHOUT_CLASSIFICATION
// TODO: Replace this with a more elegant solution.	DESIGN	0.9999685057505232	DESIGN	3.149424947677025E-5	WITHOUT_CLASSIFICATION
// TODO: Should this really return null?  If not, figure out something better to do here.	DESIGN	0.9999998440693132	DESIGN	1.5593068691982507E-7	WITHOUT_CLASSIFICATION
//TODO: get SQL rendering out of this package!	DESIGN	0.9414313376154936	DESIGN	0.05856866238450632	WITHOUT_CLASSIFICATION
// yuck!	DESIGN	0.9988972306511545	WITHOUT_CLASSIFICATION	0.001102769348845454	DESIGN
// ignore it; the incoming property could not be found so we // cannot be sure what to do here.  At the very least, the // safest is to simply not apply any dereference toggling...	DESIGN	0.9697958294711242	WITHOUT_CLASSIFICATION	0.03020417052887582	DESIGN
// TODO : most of below was taken verbatim from DotNode; should either delegate this logic or super-type it	DESIGN	0.999969380986495	DESIGN	3.0619013505069865E-5	WITHOUT_CLASSIFICATION
// otherwise, a trim-specification and/or a trim-character // have been specified;  we need to decide which options // are present and "do the right thing" // should leading trim-characters be trimmed? // should trailing trim-characters be trimmed? // the trim-character // the trim-source	DESIGN	0.999876609703253	WITHOUT_CLASSIFICATION	1.2339029674712096E-4	DESIGN
// todo: we should really just collect these from the various SelectExpressions, rather than regenerating here	DESIGN	0.9345040939866782	WITHOUT_CLASSIFICATION	0.06549590601332188	DESIGN
//TODO: is this a bit ugly?	DESIGN	0.9999996121268426	DESIGN	3.878731574272616E-7	WITHOUT_CLASSIFICATION
// Need a better way to define the suffixes here...	DESIGN	0.7462658509740508	DESIGN	0.25373414902594904	WITHOUT_CLASSIFICATION
// TODO: something much better - look at the type of the other expression! // TODO: Have comparisonExpression and/or arithmeticExpression rules complete the resolution of boolean nodes.	DESIGN	0.999981639188065	DESIGN	1.836081193499384E-5	WITHOUT_CLASSIFICATION
// TODO : what amount of significant digits need to be supported here? //      - from the DecimalFormat docs: //          [significant digits] = [minimum integer digits] + [maximum fraction digits]	DESIGN	0.9969455792561053	DESIGN	0.0030544207438947366	WITHOUT_CLASSIFICATION
// Needed the "clazz_" check to work around union-subclasses // TODO : is there a way to tell whether a persister is truly discrim-column based inheritence?	DESIGN	0.9999269266517791	DESIGN	7.307334822090106E-5	WITHOUT_CLASSIFICATION
//We should actually rework this class to not implement Parser //and just process path expressions in the most convenient way.	DESIGN	0.7532061099767594	DESIGN	0.2467938900232407	WITHOUT_CLASSIFICATION
//The class is now way to complex!	DESIGN	0.9996871219969602	WITHOUT_CLASSIFICATION	3.1287800303981693E-4	DESIGN
//TODO: get SQL rendering out of here	DESIGN	0.9706059066206185	DESIGN	0.0293940933793815	WITHOUT_CLASSIFICATION
//TODO: is there a better way?	DESIGN	0.9999997073104594	DESIGN	2.9268954053997883E-7	WITHOUT_CLASSIFICATION
//Must be done here because of side-effect! yuck...	DESIGN	0.9683782495411731	WITHOUT_CLASSIFICATION	0.031621750458826835	DESIGN
//name from a super query (a bit inelegant that it shows up here)	DESIGN	0.7773833968675502	DESIGN	0.22261660313244985	WITHOUT_CLASSIFICATION
// We should reengineer this class so that, rather than the current ad - // hoc linear approach to processing a stream of tokens, we instead // build up a tree of expressions.	DESIGN	0.6726294965612876	WITHOUT_CLASSIFICATION	0.3273705034387124	DESIGN
// this is ugly here, but needed because its a subquery	DESIGN	0.5482847778257001	WITHOUT_CLASSIFICATION	0.4517152221742999	DESIGN
// unhappy about this being public ... is there a better way?	DESIGN	0.9999970988633321	DESIGN	2.9011366678790273E-6	WITHOUT_CLASSIFICATION
// Make sure this is a defined parameter and check the incoming value type // TODO: what should be the actual exception type here?	DESIGN	0.9996122662464431	DESIGN	3.8773375355694885E-4	WITHOUT_CLASSIFICATION
// TODO : this constructor form is *only* used from constructor directly below us; can it go away?	DESIGN	0.9999999965925106	DESIGN	3.407489303684326E-9	WITHOUT_CLASSIFICATION
//TODO: COPY/PASTE FROM SessionImpl, pull up!	DESIGN	0.959497072403766	WITHOUT_CLASSIFICATION	0.040502927596233994	DESIGN
// TODO : should remove this exposure //  and have all references to the session's batcher use the ConnectionManager.	DESIGN	0.9999792461794091	DESIGN	2.0753820590907368E-5	WITHOUT_CLASSIFICATION
// todo : should this get moved to PersistentContext? // logically, is PersistentContext the "thing" to which an interceptor gets attached?	DESIGN	0.9560817926990491	DESIGN	0.043918207300950904	WITHOUT_CLASSIFICATION
// TODO: what type?	DESIGN	0.9926697506438313	DESIGN	0.007330249356168668	WITHOUT_CLASSIFICATION
// todo : should seriously consider not allowing a txn to begin from a child session //      can always route the request to the root session...	DESIGN	0.9969815490689174	WITHOUT_CLASSIFICATION	0.0030184509310824405	DESIGN
// short-circuit for performance...	DESIGN	0.9999799453829065	WITHOUT_CLASSIFICATION	2.005461709349739E-5	DESIGN
// not absolutely necessary, but does help with aggressive release	DESIGN	0.9999565977468418	WITHOUT_CLASSIFICATION	4.3402253158221886E-5	DESIGN
// TODO : remove these last two as batcher is no longer managing connections	DESIGN	0.9654464731443352	DESIGN	0.03455352685566477	WITHOUT_CLASSIFICATION
//work around a bug in all known connection pools....	DESIGN	0.8155583185647528	DESIGN	0.18444168143524717	WITHOUT_CLASSIFICATION
// TODO : make this the factory for "entity mode related" sessions; // also means making this the target of transaction-synch and the // thing that knows how to cascade things between related sessions // // At that point, perhaps this thing is a "SessionContext", and // ConnectionManager is a "JDBCContext"?  A "SessionContext" should // live in the impl package...	DESIGN	0.9999999999572371	DESIGN	4.2762850991884305E-11	WITHOUT_CLASSIFICATION
//TODO: does this really need to be here? //      does the collection already have //      it's own up-to-date snapshot?	DESIGN	0.9944129624650708	DESIGN	0.005587037534929154	WITHOUT_CLASSIFICATION
//TODO: the i==entitySpan-1 bit depends upon subclass implementation (very bad)	DESIGN	0.9997831511049549	DESIGN	2.168488950450924E-4	WITHOUT_CLASSIFICATION
/**	DESIGN	0.9098463739076227	DESIGN	0.09015362609237733	WITHOUT_CLASSIFICATION
// todo : add the notion of enabled filters to the CacheKey to differentiate filtered collections from non-filtered; //      but CacheKey is currently used for both collections and entities; would ideally need to define two seperate ones; //      currently this works in conjuction with the check on //      DefaultInitializeCollectionEventHandler.initializeCollectionFromCache() (which makes sure to not read from //      cache with enabled filters). // EARLY EXIT!!!!!	DESIGN	0.9653415504720657	WITHOUT_CLASSIFICATION	0.034658449527934364	DESIGN
//for sets, we should end the collection load after resolving //the entities, since we might call hashCode() on the elements //TODO: or we could do this polymorphically, and have two //      different operations implemented differently for arrays	DESIGN	0.9939048148985363	DESIGN	0.00609518510146375	WITHOUT_CLASSIFICATION
//This is not very nice (and quite slow):	DESIGN	0.6493820190136067	WITHOUT_CLASSIFICATION	0.3506179809863933	DESIGN
//use of trim() here is ugly?	DESIGN	0.5814716153032053	WITHOUT_CLASSIFICATION	0.4185283846967947	DESIGN
//TODO: this is too conservative; if all preceding joins were  //      also inner joins, we could use an inner join here	DESIGN	0.9995204419432643	DESIGN	4.795580567357396E-4	WITHOUT_CLASSIFICATION
//TODO: look at the owning property and check that it  //      isn't lazy (by instrumentation)	DESIGN	0.9957763496454902	WITHOUT_CLASSIFICATION	0.0042236503545097105	DESIGN
//TODO: inefficient	DESIGN	0.9929904000758748	DESIGN	0.007009599924125266	WITHOUT_CLASSIFICATION
// why does this matter?	DESIGN	0.750840782311139	DESIGN	0.24915921768886093	WITHOUT_CLASSIFICATION
// from the collection of associations, locate OJA for the // ManyToOne corresponding to this persister to fully // define the many-to-many; we need that OJA so that we can // use its alias here // TODO : is there a better way here?	DESIGN	0.9999997880979926	DESIGN	2.119020074274712E-7	WITHOUT_CLASSIFICATION
//TODO: this class depends directly upon CriteriaImpl,  //      in the impl package ... add a CriteriaImplementor  //      interface	DESIGN	0.9999997815494825	DESIGN	2.1845051757469316E-7	WITHOUT_CLASSIFICATION
//TODO: add a CriteriaImplementor interface //      this class depends directly upon CriteriaImpl in the impl package...	DESIGN	0.9999357720949652	DESIGN	6.422790503477575E-5	WITHOUT_CLASSIFICATION
// TODO : not so sure this is needed...	DESIGN	0.9999961426706063	DESIGN	3.857329393654581E-6	WITHOUT_CLASSIFICATION
// meant to handle dynamic instantiation queries...(Copy from QueryLoader)	DESIGN	0.9999626338426914	WITHOUT_CLASSIFICATION	3.7366157308686586E-5	DESIGN
// TODO: The order in which entities are saved may matter (e.g., a particular transient entity //       may need to be saved before other transient entities can be saved; //       Keep retrying the batch of transient entities until either: //       1) there are no transient entities left in transientCopyCache //       or 2) no transient entities were saved in the last batch // For now, just run through the transient entities and retry the merge	DESIGN	0.9640897860856781	DESIGN	0.03591021391432199	WITHOUT_CLASSIFICATION
// todo: this might really even be moved into the cfg package and used as the basis for all things which are configurable.	DESIGN	0.9930612081367771	DESIGN	0.006938791863222969	WITHOUT_CLASSIFICATION
// todo : currently expects that the individual with expressions apply to the same sql table join. //      This may not be the case for joined-subclass where the property values //      might be coming from different tables in the joined hierarchy.  At some //      point we should expand this to support that capability.  However, that has //      some difficulties: //          1) the biggest is how to handle ORs when the individual comparisons are //              linked to different sql joins. //          2) here we would need to track each comparison individually, along with //              the join alias to which it applies and then pass that information //              back to the FromElement so it can pass it along to the JoinSequence	DESIGN	0.5783094924756752	DESIGN	0.4216905075243248	WITHOUT_CLASSIFICATION
// this function has a template -> restore output, apply the template and write the result out // TODO: Downcast to avoid using an interface?  Yuck.	DESIGN	0.9997561918731994	DESIGN	2.4380812680060117E-4	WITHOUT_CLASSIFICATION
// at some point the generate phase needs to be moved out of here, // because a single object-level DML might spawn multiple SQL DML // command executions. // // Possible to just move the sql generation for dml stuff, but for // consistency-sake probably best to just move responsiblity for // the generation phase completely into the delegates // (QueryLoader/StatementExecutor) themselves.  Also, not sure why // QueryLoader currently even has a dependency on this at all; does // it need it?  Ideally like to see the walker itself given to the delegates directly...	DESIGN	0.9999999867226291	DESIGN	1.3277370976729693E-8	WITHOUT_CLASSIFICATION
// get the right object from the list ... would it be easier to just call getEntity() ??	DESIGN	0.5717287529407853	WITHOUT_CLASSIFICATION	0.4282712470592147	DESIGN
// TODO should we just collect these like with the collections above?	DESIGN	0.9999840630497309	DESIGN	1.593695026914571E-5	WITHOUT_CLASSIFICATION
// todo : better to handle dynamic filters through implicit DynamicFilterParameterSpecification // see the discussion there in DynamicFilterParameterSpecification's javadocs as to why // it is currently not done that way.	DESIGN	0.8582909211777898	WITHOUT_CLASSIFICATION	0.14170907882221023	DESIGN
/////////////////////////////////////////////////////////////////////////// // USED ONLY FOR REGRESSION TESTING!!!! // // todo : obviously get rid of all this junk ;) ///////////////////////////////////////////////////////////////////////////	DESIGN	0.9151138950995147	WITHOUT_CLASSIFICATION	0.08488610490048537	DESIGN
//create an index on the key columns??	DESIGN	0.9999979729229319	WITHOUT_CLASSIFICATION	2.0270770681226363E-6	DESIGN
//TODO: deprecated, remove eventually	DESIGN	0.980074714676397	DESIGN	0.019925285323602965	WITHOUT_CLASSIFICATION
//create an index on the key columns??	DESIGN	0.9999979729229319	WITHOUT_CLASSIFICATION	2.0270770681226363E-6	DESIGN
//TODO: improve this hack!	DESIGN	0.9999999140956001	DESIGN	8.590439992657903E-8	WITHOUT_CLASSIFICATION
// inheritance cycle detection (paranoid check)	DESIGN	0.9999820908207075	WITHOUT_CLASSIFICATION	1.790917929251779E-5	DESIGN
//TODO: remove use of instanceof!	DESIGN	0.9910897928976611	DESIGN	0.008910207102338953	WITHOUT_CLASSIFICATION
//shortcut	DESIGN	0.9993779917005661	WITHOUT_CLASSIFICATION	6.220082994339386E-4	DESIGN
//TODO: handle the case of a foreign key to something other than the pk	DESIGN	0.9979163984222775	WITHOUT_CLASSIFICATION	0.002083601577722491	DESIGN
// create an index on the key columns??	DESIGN	0.9999997647314045	WITHOUT_CLASSIFICATION	2.352685956184743E-7	DESIGN
// todo : remove	DESIGN	0.9841095648017856	WITHOUT_CLASSIFICATION	0.015890435198214477	DESIGN
// todo : remove	DESIGN	0.9841095648017856	WITHOUT_CLASSIFICATION	0.015890435198214477	DESIGN
// todo : remove	DESIGN	0.9841095648017856	WITHOUT_CLASSIFICATION	0.015890435198214477	DESIGN
// todo : throw exception?	DESIGN	0.8425299503990167	WITHOUT_CLASSIFICATION	0.15747004960098338	DESIGN
// todo : throw exception?  maybe warn if not the same?	DESIGN	0.696416788394349	DESIGN	0.303583211605651	WITHOUT_CLASSIFICATION
//TODO: make EntityPersister *not* depend on SessionFactoryImplementor //interface, if possible	DESIGN	0.997514801164994	DESIGN	0.002485198835005971	WITHOUT_CLASSIFICATION
//TODO: is there a more elegant way than downcasting?	DESIGN	0.9999952946855188	DESIGN	4.705314481135996E-6	WITHOUT_CLASSIFICATION
// TODO: encapsulate the protected instance variables!	DESIGN	0.6862140105976795	DESIGN	0.31378598940232055	WITHOUT_CLASSIFICATION
// should indicate that we are processing an INSERT/UPDATE/DELETE // query with a subquery implied via a collection property // function. Here, we need to use the table name itself as the // qualification alias. // TODO : verify this works for all databases... // TODO : is this also the case in non-"indexed" scenarios?	DESIGN	0.9999968829825471	DESIGN	3.117017452952296E-6	WITHOUT_CLASSIFICATION
//TODO: copy/paste from insertRows()	DESIGN	0.5188740184712552	WITHOUT_CLASSIFICATION	0.4811259815287447	DESIGN
//TODO: copy/paste from recreate()	DESIGN	0.5276841880521028	WITHOUT_CLASSIFICATION	0.4723158119478973	DESIGN
//should this interface extend PropertyMapping?	DESIGN	0.9034167437895474	DESIGN	0.09658325621045259	WITHOUT_CLASSIFICATION
//ie. the subquery! yuck!	DESIGN	0.9801741983954738	WITHOUT_CLASSIFICATION	0.01982580160452621	DESIGN
//TODO: move to .sql package!!	DESIGN	0.9830916136660183	DESIGN	0.01690838633398177	WITHOUT_CLASSIFICATION
//TODO: code duplication with SingleTableEntityPersister	DESIGN	0.9896204289960472	DESIGN	0.010379571003952783	WITHOUT_CLASSIFICATION
// TODO: It would be really, really nice to use this to also model components!	DESIGN	0.9999999826959487	DESIGN	1.730405129504891E-8	WITHOUT_CLASSIFICATION
//TODO: *two* hashmap lookups here is one too many...	DESIGN	0.5199132218659476	DESIGN	0.4800867781340523	WITHOUT_CLASSIFICATION
//TODO: code duplication with JoinedSubclassEntityPersister	DESIGN	0.9409107540940198	DESIGN	0.05908924590598012	WITHOUT_CLASSIFICATION
//perhaps not really necessary...	DESIGN	0.7977605886416865	WITHOUT_CLASSIFICATION	0.20223941135831347	DESIGN
// NOTE: this assumes something about how propertySelectFragment is implemented by the subclass! // was toUnqotedAliasStrings( getIdentiferColumnNames() ) before - now tried // to remove that unqoting and missing aliases..	DESIGN	0.6746784469111072	WITHOUT_CLASSIFICATION	0.32532155308889277	DESIGN
// NOTE: this assumes something about how propertySelectFragment is implemented by the subclass! // was toUnqotedAliasStrings( getdiscriminatorColumnName() ) before - now tried // to remove that unqoting and missing aliases..	DESIGN	0.6108178036644386	WITHOUT_CLASSIFICATION	0.38918219633556145	DESIGN
//TODO: should we use SELECT .. FOR UPDATE?	DESIGN	0.9998941871051847	DESIGN	1.0581289481524504E-4	WITHOUT_CLASSIFICATION
//TODO: optimize this better!	DESIGN	0.9991013726291004	DESIGN	8.986273708996447E-4	WITHOUT_CLASSIFICATION
//TODO: should we allow suffixes on these ?	DESIGN	0.9997861261541626	DESIGN	2.138738458372646E-4	WITHOUT_CLASSIFICATION
//This is really ugly, but necessary:	DESIGN	0.9517248711437165	DESIGN	0.048275128856283475	WITHOUT_CLASSIFICATION
//ugly little workaround for fact that createUniqueKeyLoaders() does not handle component properties	DESIGN	0.999999789240621	DESIGN	2.1075937885641284E-7	WITHOUT_CLASSIFICATION
//TODO: disable batch loading if lockMode > READ?	DESIGN	0.9911302085037403	WITHOUT_CLASSIFICATION	0.008869791496259615	DESIGN
// append the SQL to return the generated identifier //TODO: suck into Insert	DESIGN	0.8877489352221648	DESIGN	0.11225106477783521	WITHOUT_CLASSIFICATION
//TODO: I am not so sure about the exception handling in this bit!	DESIGN	0.9998445309996695	DESIGN	1.5546900033054116E-4	WITHOUT_CLASSIFICATION
//TODO: is this really necessary????	DESIGN	0.9990176058468784	DESIGN	9.823941531215967E-4	WITHOUT_CLASSIFICATION
//TODO: move to .sql package, and refactor with similar things!	DESIGN	0.9995045396264394	DESIGN	4.954603735605899E-4	WITHOUT_CLASSIFICATION
//TODO: implement functionality //  this might be painful to do here, as the "join post processing" for //  the subquery has already been performed (meaning that for //  theta-join dialects, the join conditions have already been moved //  over to the where clause).  A "simple" solution here might to //  perform "join post processing" once for the entire query (including //  any subqueries) at one fell swoop	DESIGN	0.9999944198792857	DESIGN	5.580120714237079E-6	WITHOUT_CLASSIFICATION
// todo : this eventually needs to be removed	DESIGN	0.9439768392317329	WITHOUT_CLASSIFICATION	0.05602316076826713	DESIGN
//kinda ugly, but needed for collections with a "." node mapping	DESIGN	0.9999413632821432	WITHOUT_CLASSIFICATION	5.863671785683877E-5	DESIGN
//is this ok?	DESIGN	0.9931166291595959	WITHOUT_CLASSIFICATION	0.006883370840404114	DESIGN
//TODO: perhaps this should be some other RuntimeException...	DESIGN	0.999999927494365	DESIGN	7.250563513501464E-8	WITHOUT_CLASSIFICATION
//TODO: make this a bit nicer	DESIGN	0.9998902054049191	DESIGN	1.097945950809757E-4	WITHOUT_CLASSIFICATION
//Yuck:	DESIGN	0.7650912954574225	WITHOUT_CLASSIFICATION	0.23490870454257753	DESIGN
//TODO: we should provide some way to get keys of collection of statistics to make it easier to retrieve from a GUI perspective	DESIGN	0.9999999959634904	DESIGN	4.036509628276521E-9	WITHOUT_CLASSIFICATION
/**	DESIGN	0.9098463739076227	DESIGN	0.09015362609237733	WITHOUT_CLASSIFICATION
// TODO : will need reference to session factory to fully complete HHH-1907	DESIGN	0.9997027887987121	DESIGN	2.9721120128788233E-4	WITHOUT_CLASSIFICATION
//TODO: currently keeps Getters and Setters (instead of PropertyAccessors) because of the way getGetter() and getSetter() are implemented currently; yuck!	DESIGN	0.9999998630531276	DESIGN	1.3694687245887878E-7	WITHOUT_CLASSIFICATION
//TODO: redesign how PropertyAccessors are acquired...	DESIGN	0.9989104395492356	DESIGN	0.0010895604507643812	WITHOUT_CLASSIFICATION
// todo : YUCK!!!	DESIGN	0.9902226047811115	WITHOUT_CLASSIFICATION	0.009777395218888494	DESIGN
// TODO : YUCK!!!  fix after HHH-1907 is complete	DESIGN	0.999977052295155	DESIGN	2.294770484497292E-5	WITHOUT_CLASSIFICATION
//TODO: need to make the majority of this functionality into a top-level support class for custom impl support	DESIGN	0.9999319685238983	DESIGN	6.803147610162084E-5	WITHOUT_CLASSIFICATION
//TODO: design new lifecycle for ProxyFactory	DESIGN	0.9002376510239327	WITHOUT_CLASSIFICATION	0.09976234897606724	DESIGN
//TODO: would be nice to handle proxy classes elegantly!	DESIGN	0.99852727277813	DESIGN	0.0014727272218699782	WITHOUT_CLASSIFICATION
// TODO: copy/paste from ManyToOneType	DESIGN	0.7663406571564345	DESIGN	0.23365934284356546	WITHOUT_CLASSIFICATION
//TODO: should this be Session.instantiate(Persister, ...)?	DESIGN	0.9951428927709852	DESIGN	0.004857107229014807	WITHOUT_CLASSIFICATION
//TODO: this is a bit arbitrary, expose a switch to the user?	DESIGN	0.905304498613872	DESIGN	0.09469550138612809	WITHOUT_CLASSIFICATION
//TODO: implement caching?! proxies?!	DESIGN	0.9947134266617769	DESIGN	0.005286573338223081	WITHOUT_CLASSIFICATION
//TODO: is this right??	DESIGN	0.9999901587022593	DESIGN	9.841297740768375E-6	WITHOUT_CLASSIFICATION
// is this really necessary?	DESIGN	0.8751059372114693	WITHOUT_CLASSIFICATION	0.12489406278853067	DESIGN
//TODO: move these to a new JoinableType abstract class, //extended by EntityType and PersistentCollectionType:	DESIGN	0.9648082210470877	DESIGN	0.035191778952912214	WITHOUT_CLASSIFICATION
// TODO: this is very suboptimal for some subclasses (namely components), // since it does not take advantage of two-phase-load	DESIGN	0.8303220425373408	DESIGN	0.1696779574626592	WITHOUT_CLASSIFICATION
// worrying about proxies is perhaps a little bit of overkill here...	DESIGN	0.9967685267848099	DESIGN	0.003231473215190091	WITHOUT_CLASSIFICATION
// NOTE VERY HACKISH WORKAROUND!! // TODO: Fix this so it will work for non-POJO entity mode	DESIGN	0.9999999999997884	DESIGN	2.114597940097657E-13	WITHOUT_CLASSIFICATION
// TODO: Fix this so it will work for non-POJO entity mode	DESIGN	0.9999996978495292	DESIGN	3.021504707408039E-7	WITHOUT_CLASSIFICATION
// We would probably refactor to have LogicParser (builds a tree of simple // expressions connected by and, or, not), ExpressionParser (translates // from OO terms like foo, foo.Bar, foo.Bar.Baz to SQL terms like // FOOS.ID, FOOS.BAR_ID, etc) and PathExpressionParser (which does much // the same thing it does now)	DESIGN	0.9992538943372934	WITHOUT_CLASSIFICATION	7.461056627065963E-4	DESIGN
//TODO: this is a little inefficient, don't need to do a whole //      deep replaceElements() call	DESIGN	0.9999994249627294	DESIGN	5.75037270500514E-7	WITHOUT_CLASSIFICATION
//workaround for WebLogic	DESIGN	0.9920257984790574	DESIGN	0.007974201520942626	WITHOUT_CLASSIFICATION
//TODO: this dependency is kinda Bad	DESIGN	0.9999881855060752	DESIGN	1.1814493924815747E-5	WITHOUT_CLASSIFICATION
//ick!	DESIGN	0.9998753583432138	WITHOUT_CLASSIFICATION	1.2464165678605663E-4	DESIGN
// short cut check...	DESIGN	0.99944252751634	WITHOUT_CLASSIFICATION	5.574724836600303E-4	DESIGN
// todo : move to StringHelper?	DESIGN	0.9871269910236914	WITHOUT_CLASSIFICATION	0.012873008976308605	DESIGN
//yukky! Don't you have subclasses for that! //TODO race conditions can happen here	DESIGN	0.9999309561705637	DESIGN	6.904382943629978E-5	WITHOUT_CLASSIFICATION
//TODO: We probably should have a StatisticsNotPublishedException, to make it clean	DESIGN	0.9998257212844678	DESIGN	1.7427871553221818E-4	WITHOUT_CLASSIFICATION
// FIXME hack to work around fact that calling // Node added = root.addChild( fqn ); doesn't  // properly set the version on the node	DESIGN	0.9999999997580978	DESIGN	2.4190216137845375E-10	WITHOUT_CLASSIFICATION
// TODO: I considered validating the presence of the TS cache here, // but decided to defer unti getQueryCacheInstance() in case the  // cache is never actually used	DESIGN	0.9999210389190198	DESIGN	7.896108098015131E-5	WITHOUT_CLASSIFICATION
//need to do that here rather than in the save event listener to let //the post insert events to have a id-filled entity when IDENTITY is used (EJB3)	DESIGN	0.9811782435981652	WITHOUT_CLASSIFICATION	0.018821756401834828	DESIGN
//TODO: simply remove this override //      if we fix the above todos	DESIGN	0.5548370903456524	WITHOUT_CLASSIFICATION	0.4451629096543476	DESIGN
// This, is used by SessionFactoryImpl to hand to the generated SessionImpl; // was the only reason I could see that we cannot just use null as // Settings.cacheProvider	DESIGN	0.8146290137298983	WITHOUT_CLASSIFICATION	0.18537098627010168	DESIGN
// this is done here 'cos we might only know the type here (ugly!) // TODO: improve this a lot:	DESIGN	0.99999999931987	DESIGN	6.801298267623079E-10	WITHOUT_CLASSIFICATION
// todo : would love to have this work on a notification basis //    where the successful binding of an entity/subclass would //    emit a notification which the extendsQueue entries could //    react to...	DESIGN	0.9968695519820752	WITHOUT_CLASSIFICATION	0.003130448017924825	DESIGN
// TODO : not sure the best way to handle this. // The non-performant way :	DESIGN	0.9999358755658638	DESIGN	6.412443413615469E-5	WITHOUT_CLASSIFICATION
// would be better to use the element-type to determine // whether the old and the new are equal here; the problem being // we do not necessarily have access to the element type in all // cases	DESIGN	0.999978203957161	WITHOUT_CLASSIFICATION	2.1796042838970275E-5	DESIGN
// This next bit is to allow for both unsaved-value="negative" // and for "older" behavior where version number did not get // seeded if it was already set in the object // TODO: shift it into unsaved-value strategy	DESIGN	0.9915156091926783	DESIGN	0.008484390807321631	WITHOUT_CLASSIFICATION
// merges don't cascade to uninitialized collections //	DESIGN	0.9999976073159219	WITHOUT_CLASSIFICATION	2.3926840780952315E-6	DESIGN
// TODO: an alternative is to check if the owner has changed; if it hasn't then // return collection.getOwner()	DESIGN	0.857625336034579	WITHOUT_CLASSIFICATION	0.14237466396542095	DESIGN
//it is possible that the tree-walking in OuterJoinLoader can get to //an association defined by a subclass, in which case the property-ref //might refer to a property defined on a subclass of the current class //in this case, the table name is not known - this temporary solution  //assumes that the property-ref refers to a property of the subclass //table that the association belongs to (a reasonable guess) //TODO: fix this, add: OuterJoinLoadable.getSubclassPropertyTableName(String propertyName)	DESIGN	0.9999999993715628	DESIGN	6.284372407047333E-10	WITHOUT_CLASSIFICATION
// this only works because collection entries are kept in a sequenced // map by persistence context (maybe we should do like entities and // keep a separate sequences set...) //TODO: calling entrySet on an IdentityMap is SLOW!!	DESIGN	0.9999757638170634	DESIGN	2.4236182936480346E-5	WITHOUT_CLASSIFICATION
// important, to account for newly saved entities in query // todo : some kind of check for new status...	DESIGN	0.6724745841469087	DESIGN	0.3275254158530913	WITHOUT_CLASSIFICATION
// brand new collection //TODO: or an array!! we can't lock objects with arrays now??	DESIGN	0.9628178563890157	WITHOUT_CLASSIFICATION	0.03718214361098418	DESIGN
//TODO: if object was an uninitialized proxy, this is inefficient, //      resulting in two SQL selects	DESIGN	0.9931893149112258	WITHOUT_CLASSIFICATION	0.006810685088774301	DESIGN
//before cascade! //TODO: should this be Session.instantiate(Persister, ...)?	DESIGN	0.9957127180519338	DESIGN	0.004287281948066213	WITHOUT_CLASSIFICATION
// TODO : absolutely no usages of this constructor form; can it go away?	DESIGN	0.9999996448636231	DESIGN	3.551363768443621E-7	WITHOUT_CLASSIFICATION
// todo : need to find a clean way to handle the "event source" role // a seperate classs responsible for generating/dispatching events just duplicates most of the Session methods... // passing around seperate reto interceptor, factory, actionQueue, and persistentContext is not manageable...	DESIGN	0.7817462895066636	WITHOUT_CLASSIFICATION	0.21825371049333653	DESIGN
// todo : remove	DESIGN	0.9841095648017856	WITHOUT_CLASSIFICATION	0.015890435198214477	DESIGN
//aliasRefNode.resolve( false, false, aliasRefNode.getText() ); //TODO: is it kosher to do it here? //TODO: is it kosher to do it here?	DESIGN	0.9945428937609936	DESIGN	0.005457106239006439	WITHOUT_CLASSIFICATION
// No explicit select expression; render the id and properties // projection lists for every persister in the from clause into // a single 'token node'. //TODO: the only reason we need this stuff now is collection filters, //      we should get rid of derived select clause completely!	DESIGN	0.9997921415022568	DESIGN	2.078584977432142E-4	WITHOUT_CLASSIFICATION
// TODO : an optimization here would be to consider cascade deletes and not gen those delete statements; //      the difficulty is the ordering of the tables here vs the cascade attributes on the persisters -> //          the table info gotten here should really be self-contained (i.e., a class representation //          defining all the needed attributes), then we could then get an array of those	DESIGN	0.9999851841502295	DESIGN	1.4815849770579593E-5	WITHOUT_CLASSIFICATION
// TODO: get SQL rendering out of here, create an AST for the join expressions. // Use the SQL generator grammar to generate the SQL text for the index expression.	DESIGN	0.9509193677846683	WITHOUT_CLASSIFICATION	0.049080632215331765	DESIGN
// TODO : this really needs to be delayed unitl after we definitively know all node types // where this is currently a problem is parameters for which where we cannot unequivocally // resolve an expected type	DESIGN	0.9999983119373282	DESIGN	1.688062671778984E-6	WITHOUT_CLASSIFICATION
// TODO: Figure out a better way to get the FROM elements in a proper tree structure. // If this is not the destination of a many-to-many, add it as a child of the origin.	DESIGN	0.941485574660917	DESIGN	0.0585144253390831	WITHOUT_CLASSIFICATION
// work around that crazy issue where the tree contains // "empty" FromElements (no text); afaict, this is caused // by FromElementFactory.createCollectionJoin()	DESIGN	0.6004423141923726	DESIGN	0.3995576858076275	WITHOUT_CLASSIFICATION
//TODO: this class does too many things! we need a different //kind of path expression parser for each of the diffferent //ways in which path expressions can occur	DESIGN	0.9985019684590716	DESIGN	0.0014980315409284758	WITHOUT_CLASSIFICATION
//real hacky... // used to count the nesting of parentheses	DESIGN	0.9999828838291089	DESIGN	1.711617089102417E-5	WITHOUT_CLASSIFICATION
// TODO : would be really nice to cache the spec on the query-def so as to not have to re-calc the hash; // currently not doable though because of the resultset-ref stuff...	DESIGN	0.9764932568323426	DESIGN	0.02350674316765744	WITHOUT_CLASSIFICATION
//for arrays, we should end the collection load before resolving //the entities, since the actual array instances are not instantiated //during loading //TODO: or we could do this polymorphically, and have two //      different operations implemented differently for arrays	DESIGN	0.9975984324396429	DESIGN	0.002401567560357039	WITHOUT_CLASSIFICATION
// polymorphism not really handled completely correctly, // perhaps...well, actually its ok, assuming that the // entity name used in the lookup is the same as the // the one used here, which it will be	DESIGN	0.5782753860872653	DESIGN	0.42172461391273464	WITHOUT_CLASSIFICATION
// TODO: should "record" how many properties we have reffered to - and if we  //       don't get'em'all we throw an exception! Way better than trial and error ;)	DESIGN	0.9975716952139648	DESIGN	0.0024283047860351376	WITHOUT_CLASSIFICATION
// VERY IMPORTANT!!!! - This class needs to be free of any static references // to any CGLIB or Javassist classes.  Otherwise, users will always need both // on their classpaths no matter which (if either) they use. // // Another option here would be to remove the Hibernate.isPropertyInitialized() // method and have the users go through the SessionFactory to get this information.	DESIGN	0.9999998777037062	WITHOUT_CLASSIFICATION	1.2229629376649962E-7	DESIGN
// TODO: is it really neceassry to provide Configuration to CollectionPersisters ? Should it not be enough with associated class ? // or why does EntityPersister's not get access to configuration ? // // The only reason I could see that Configuration gets passed to collection persisters // is so that they can look up the dom4j node name of the entity element in case // no explicit node name was applied at the collection element level.  Are you kidding me? // Trivial to fix then.  Just store and expose the node name on the entity persister // (which the collection persister looks up anyway via other means...).	DESIGN	0.999994873187464	DESIGN	5.1268125358950835E-6	WITHOUT_CLASSIFICATION
//for backward compatibility, allow a set with no not-null  //element columns, using all columns in the row locater SQL //TODO: create an implicit not null constraint on all cols?	DESIGN	0.5701559379635006	DESIGN	0.4298440620364993	WITHOUT_CLASSIFICATION
//SPACES //TODO: i'm not sure, but perhaps we should exclude //      abstract denormalized tables?	DESIGN	0.9999994600651314	DESIGN	5.399348686230182E-7	WITHOUT_CLASSIFICATION
//workaround, for backward compatibility of sets with no //not-null columns, assume all columns are used in the //row locator SQL	DESIGN	0.9652532437589691	WITHOUT_CLASSIFICATION	0.03474675624103084	DESIGN
//note that this method could easily be moved up to BasicEntityPersister, //if we ever needed to reuse it from other subclasses	DESIGN	0.9935133434458757	DESIGN	0.00648665655412421	WITHOUT_CLASSIFICATION
//index += getPropertyColumnSpan( i ); //TODO:  this is kinda slow...	DESIGN	0.9960778183825132	DESIGN	0.003922181617486757	WITHOUT_CLASSIFICATION
//TODO: need some caching scheme? really comes down to decision  //      regarding amount of state (if any) kept on PropertyAccessors	DESIGN	0.9910271745650815	DESIGN	0.008972825434918534	WITHOUT_CLASSIFICATION
// TODO: here is why we need to make bytecode provider global :( // TODO : again, fix this after HHH-1907 is complete	DESIGN	0.9999999999810705	DESIGN	1.8929512666062365E-11	WITHOUT_CLASSIFICATION
//TODO: Yuck! This is not quite good enough, it's a quick //hack around the problem of having a to-one association //that refers to an embedded component:	DESIGN	0.9999999994761242	DESIGN	5.238758237260213E-10	WITHOUT_CLASSIFICATION
// for DOM4J "collections" only // TODO: it would be better if this was done at the higher level by Printer	DESIGN	0.5364829399614953	DESIGN	0.46351706003850457	WITHOUT_CLASSIFICATION
// would be great to move all this below here into another method that could also be used // from the new scrolling stuff. // // Would need to change the way the max-row stuff is handled (i.e. behind an interface) so // that I could do the control breaking at the means to know when to stop	DESIGN	0.9999841912377274	DESIGN	1.5808762272607457E-5	WITHOUT_CLASSIFICATION
//TODO: can we *always* use the "null property" approach for everything?	DESIGN	0.9761093427697987	DESIGN	0.02389065723020139	WITHOUT_CLASSIFICATION
//polymorphism comment above	DESIGN	0.9999414797224182	WITHOUT_CLASSIFICATION	5.8520277581819464E-5	DESIGN
// some messy, complex stuff here, since createCriteria() can take an // aliased path, or a path rooted at the creating criteria instance	DESIGN	0.9999998518186733	WITHOUT_CLASSIFICATION	1.4818132669330934E-7	DESIGN
//TODO: really bad, evil hack to fix!!!	DESIGN	0.99999999995344	DESIGN	4.6559975330199143E-11	WITHOUT_CLASSIFICATION
// ugly hack for cases like "elements(foo.bar.collection)" // (multi-part path expression ending in elements or indices)	DESIGN	0.9991261185884579	DESIGN	8.738814115419967E-4	WITHOUT_CLASSIFICATION
// try block is a hack around fact that currently tuplizers are not // given the opportunity to resolve a subclass entity name.  this // allows the (we assume custom) interceptor the ability to // influence this decision if we were not able to based on the // given entityName	DESIGN	0.9999949701771085	DESIGN	5.029822891541286E-6	WITHOUT_CLASSIFICATION
/////////////////////////////////////////////////////////////////////// // HACK ALERT !!!!!!!!!!!!!!!!!!!!!!!!!!!! // Attempt to work around "ghost" ImpliedFromElements that occasionally // show up between the actual things being joined.  This consistently // occurs from index nodes (at least against many-to-many).  Not sure // if there are other conditions // // Essentially, look-ahead to the next FromElement that actually // writes something to the SQL	DESIGN	0.9997594484104979	DESIGN	2.4055158950198188E-4	WITHOUT_CLASSIFICATION
//init the table here instead of earlier, so that we can get a quoted table name //TODO: would it be better to simply pass the qualified table name, instead of //      splitting it up into schema/catalog/table names	DESIGN	0.9995701636301987	DESIGN	4.298363698014094E-4	WITHOUT_CLASSIFICATION
// TODO : would be great to have a Mapping#hasNonIdentifierPropertyNamedId method // I don't believe that Mapping#getReferencedPropertyType accounts for the identifier property; so // if it returns for a property named 'id', then we should have a non-id field named id	DESIGN	0.9311041413201389	DESIGN	0.0688958586798611	WITHOUT_CLASSIFICATION
//TODO: is this really necessary????	DESIGN	0.9990176058468784	DESIGN	9.823941531215967E-4	WITHOUT_CLASSIFICATION
//TODO: ideally we need the construction of PropertyAccessor to take the following: //      1) EntityMode //      2) EntityMode-specific data (i.e., the classname for pojo entities) //      3) Property-specific data based on the EntityMode (i.e., property-name or dom4j-node-name) // The easiest way, with the introduction of the new runtime-metamodel classes, would be the // the following predicates: //      1) PropertyAccessorFactory.getPropertyAccessor() takes references to both a //          org.hibernate.metadata.EntityModeMetadata and org.hibernate.metadata.Property //      2) What is now termed a "PropertyAccessor" stores any values needed from those two //          pieces of information //      3) Code can then simply call PropertyAccess.getGetter() with no parameters; likewise with //          PropertyAccessor.getSetter()	DESIGN	0.6120282355045196	WITHOUT_CLASSIFICATION	0.3879717644954806	DESIGN
//TODO: this is temporary in that the end result will probably not take a Property reference per-se.	DESIGN	0.9999998320654866	DESIGN	1.679345134097925E-7	WITHOUT_CLASSIFICATION
// todo : this eventually needs to be removed	DESIGN	0.9439768392317329	WITHOUT_CLASSIFICATION	0.05602316076826713	DESIGN
//TODO: make this a bit nicer	DESIGN	0.9998902054049191	DESIGN	1.097945950809757E-4	WITHOUT_CLASSIFICATION
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.9946974195644752	DESIGN	0.0053025804355247095	WITHOUT_CLASSIFICATION
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.9946974195644752	DESIGN	0.0053025804355247095	WITHOUT_CLASSIFICATION
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.9946974195644752	DESIGN	0.0053025804355247095	WITHOUT_CLASSIFICATION
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.9946974195644752	DESIGN	0.0053025804355247095	WITHOUT_CLASSIFICATION
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.9946974195644752	DESIGN	0.0053025804355247095	WITHOUT_CLASSIFICATION
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.9946974195644752	DESIGN	0.0053025804355247095	WITHOUT_CLASSIFICATION
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.9946974195644752	DESIGN	0.0053025804355247095	WITHOUT_CLASSIFICATION
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.9946974195644752	DESIGN	0.0053025804355247095	WITHOUT_CLASSIFICATION
/**     * FIXME Per the RegionFactory class Javadoc, this constructor version     * should not be necessary.     *      * @param props The configuration properties     */	DESIGN	0.999992409374061	DESIGN	7.590625939125532E-6	WITHOUT_CLASSIFICATION
/**     * FIXME Per the RegionFactory class Javadoc, this constructor version     * should not be necessary.     *      * @param props The configuration properties     */	DESIGN	0.999992409374061	DESIGN	7.590625939125532E-6	WITHOUT_CLASSIFICATION
/**     * FIXME Per the RegionFactory class Javadoc, this constructor version     * should not be necessary.     *      * @param props The configuration properties     */	DESIGN	0.999992409374061	DESIGN	7.590625939125532E-6	WITHOUT_CLASSIFICATION
// TODO : probably better to calculate these and pass them in, as it'll be more performant	DESIGN	0.9999999407005118	DESIGN	5.929948813518149E-8	WITHOUT_CLASSIFICATION
