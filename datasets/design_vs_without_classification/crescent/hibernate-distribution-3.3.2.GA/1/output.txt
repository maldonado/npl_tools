//test out the optimizer:	WITHOUT_CLASSIFICATION	0.9999383435762718	WITHOUT_CLASSIFICATION	6.165642372827204E-5	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.9999466053375201	WITHOUT_CLASSIFICATION	5.339466247981895E-5	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.9999466053375201	WITHOUT_CLASSIFICATION	5.339466247981895E-5	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.9999466053375201	WITHOUT_CLASSIFICATION	5.339466247981895E-5	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.9999466053375201	WITHOUT_CLASSIFICATION	5.339466247981895E-5	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.9999466053375201	WITHOUT_CLASSIFICATION	5.339466247981895E-5	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.9999466053375201	WITHOUT_CLASSIFICATION	5.339466247981895E-5	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.9999466053375201	WITHOUT_CLASSIFICATION	5.339466247981895E-5	DESIGN
// return	WITHOUT_CLASSIFICATION	0.9999641203172493	WITHOUT_CLASSIFICATION	3.587968275066E-5	DESIGN
// return	WITHOUT_CLASSIFICATION	0.9999641203172493	WITHOUT_CLASSIFICATION	3.587968275066E-5	DESIGN
/* | this | bean | args | raw bean | */	WITHOUT_CLASSIFICATION	0.9994252124670124	WITHOUT_CLASSIFICATION	5.747875329876295E-4	DESIGN
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999873061263959	WITHOUT_CLASSIFICATION	1.2693873604090916E-5	DESIGN
// astore 4 // store the raw bean	WITHOUT_CLASSIFICATION	0.9998659179583209	WITHOUT_CLASSIFICATION	1.340820416791878E-4	DESIGN
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999883403388068	WITHOUT_CLASSIFICATION	1.1659661193145419E-5	DESIGN
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999883403388068	WITHOUT_CLASSIFICATION	1.1659661193145419E-5	DESIGN
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.999948610163509	WITHOUT_CLASSIFICATION	5.138983649088662E-5	DESIGN
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999836611735601	WITHOUT_CLASSIFICATION	1.6338826439921812E-5	DESIGN
// putfield // new value of the field	WITHOUT_CLASSIFICATION	0.9999878026930658	WITHOUT_CLASSIFICATION	1.2197306934109768E-5	DESIGN
// reference type	WITHOUT_CLASSIFICATION	0.9999630138442799	WITHOUT_CLASSIFICATION	3.6986155720096636E-5	DESIGN
// double	WITHOUT_CLASSIFICATION	0.9999148996315688	WITHOUT_CLASSIFICATION	8.510036843115959E-5	DESIGN
// double	WITHOUT_CLASSIFICATION	0.9999148996315688	WITHOUT_CLASSIFICATION	8.510036843115959E-5	DESIGN
// long	WITHOUT_CLASSIFICATION	0.9998750526767566	WITHOUT_CLASSIFICATION	1.2494732324343E-4	DESIGN
// just decrement the lock, don't recache // (we don't know which transaction won)	WITHOUT_CLASSIFICATION	0.999832628594432	WITHOUT_CLASSIFICATION	1.6737140556791005E-4	DESIGN
// decode row selection...	WITHOUT_CLASSIFICATION	0.9996788923771773	WITHOUT_CLASSIFICATION	3.2110762282267516E-4	DESIGN
//disassembled state gets put in a new array (we write to cache by value!)	WITHOUT_CLASSIFICATION	0.9999554993677401	WITHOUT_CLASSIFICATION	4.450063225986402E-5	DESIGN
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999760604130743	WITHOUT_CLASSIFICATION	2.393958692573784E-5	DESIGN
// CHECK	WITHOUT_CLASSIFICATION	0.9997798886283066	WITHOUT_CLASSIFICATION	2.2011137169348127E-4	DESIGN
// ROW ID	WITHOUT_CLASSIFICATION	0.9997632878701075	WITHOUT_CLASSIFICATION	2.3671212989246382E-4	DESIGN
// COMPOSITE-ID	WITHOUT_CLASSIFICATION	0.9996642459348007	WITHOUT_CLASSIFICATION	3.357540651993249E-4	DESIGN
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9994652177161089	WITHOUT_CLASSIFICATION	5.347822838911256E-4	DESIGN
/*	WITHOUT_CLASSIFICATION	0.9964298771530864	WITHOUT_CLASSIFICATION	0.0035701228469137494	DESIGN
// DYNAMIC INSERT	WITHOUT_CLASSIFICATION	0.9997138113838978	WITHOUT_CLASSIFICATION	2.861886161022098E-4	DESIGN
// PERSISTER	WITHOUT_CLASSIFICATION	0.9998221698380704	WITHOUT_CLASSIFICATION	1.778301619296627E-4	DESIGN
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9995917709365963	WITHOUT_CLASSIFICATION	4.082290634036411E-4	DESIGN
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9998712483704834	WITHOUT_CLASSIFICATION	1.2875162951655903E-4	DESIGN
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9998712483704834	WITHOUT_CLASSIFICATION	1.2875162951655903E-4	DESIGN
// generated properties can *never* be insertable...	WITHOUT_CLASSIFICATION	0.9999983709401856	WITHOUT_CLASSIFICATION	1.6290598144138126E-6	DESIGN
// TABLE	WITHOUT_CLASSIFICATION	0.9990582136386942	WITHOUT_CLASSIFICATION	9.417863613057736E-4	DESIGN
//by default, natural-ids are "immutable" (constant)	WITHOUT_CLASSIFICATION	0.9999974262479228	WITHOUT_CLASSIFICATION	2.5737520772728576E-6	DESIGN
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999799746217168	WITHOUT_CLASSIFICATION	2.0025378283162402E-5	DESIGN
// we found some extends attributes referencing entities which were // not already processed.  here we need to locate all entity-names // and class-names contained in this document itself, making sure // that these get removed from the extendz list such that only // extends names which require us to delay processing (i.e. // external to this document and not yet processed) are contained // in the returned result	WITHOUT_CLASSIFICATION	0.9811803686252362	WITHOUT_CLASSIFICATION	0.01881963137476377	DESIGN
/**	WITHOUT_CLASSIFICATION	0.9966739556456018	WITHOUT_CLASSIFICATION	0.003326044354398164	DESIGN
//	WITHOUT_CLASSIFICATION	0.9992342288671854	WITHOUT_CLASSIFICATION	7.657711328146887E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9992342288671854	WITHOUT_CLASSIFICATION	7.657711328146887E-4	DESIGN
/**	WITHOUT_CLASSIFICATION	0.9966739556456018	WITHOUT_CLASSIFICATION	0.003326044354398164	DESIGN
//	WITHOUT_CLASSIFICATION	0.9992342288671854	WITHOUT_CLASSIFICATION	7.657711328146887E-4	DESIGN
// If close() is called, guarantee unbind()	WITHOUT_CLASSIFICATION	0.9999293609770548	WITHOUT_CLASSIFICATION	7.063902294521697E-5	DESIGN
// if a ThreadLocalSessionContext-bound session happens to get // serialized, to be completely correct, we need to make sure // that unbinding of that session occurs.	WITHOUT_CLASSIFICATION	0.999997078658538	WITHOUT_CLASSIFICATION	2.9213414619009727E-6	DESIGN
// on the inverse, it makes sense that if a ThreadLocalSessionContext- // bound session then gets deserialized to go ahead and re-bind it to // the ThreadLocalSessionContext session map.	WITHOUT_CLASSIFICATION	0.9999964319853434	WITHOUT_CLASSIFICATION	3.5680146565920415E-6	DESIGN
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9995694243813223	WITHOUT_CLASSIFICATION	4.3057561867757444E-4	DESIGN
// 60 second lock timeout	WITHOUT_CLASSIFICATION	0.9993156949178985	WITHOUT_CLASSIFICATION	6.843050821014663E-4	DESIGN
// OptimisticCache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999746593348617	WITHOUT_CLASSIFICATION	2.5340665138173578E-5	DESIGN
// Cache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999845377531772	WITHOUT_CLASSIFICATION	1.5462246822843592E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9992342288671854	WITHOUT_CLASSIFICATION	7.657711328146887E-4	DESIGN
// do the put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9998038159833569	WITHOUT_CLASSIFICATION	1.96184016643047E-4	DESIGN
//ignore!	WITHOUT_CLASSIFICATION	0.9998682034696735	WITHOUT_CLASSIFICATION	1.3179653032652127E-4	DESIGN
// tree cache in optimistic mode seems to have as very difficult // time with remove calls on non-existent nodes (NPEs)...	WITHOUT_CLASSIFICATION	0.9999801668058793	WITHOUT_CLASSIFICATION	1.9833194120604924E-5	DESIGN
//60 seconds	WITHOUT_CLASSIFICATION	0.9982488003075537	WITHOUT_CLASSIFICATION	0.0017511996924463905	DESIGN
//ignore!	WITHOUT_CLASSIFICATION	0.9998682034696735	WITHOUT_CLASSIFICATION	1.3179653032652127E-4	DESIGN
//60 seconds	WITHOUT_CLASSIFICATION	0.9982488003075537	WITHOUT_CLASSIFICATION	0.0017511996924463905	DESIGN
//do the failfast put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.999363688682688	WITHOUT_CLASSIFICATION	6.363113173120466E-4	DESIGN
// NOTE : evict() operates locally only (i.e., does not propogate // to any other nodes in the potential cluster).  This is // exactly what is needed when we destroy() here; destroy() is used // as part of the process of shutting down a SessionFactory; thus // these removals should not be propogated	WITHOUT_CLASSIFICATION	0.8225632808013641	DESIGN	0.17743671919863593	WITHOUT_CLASSIFICATION
//    protected RegionRootListener listener;	WITHOUT_CLASSIFICATION	0.9999985714614504	WITHOUT_CLASSIFICATION	1.4285385495477569E-6	DESIGN
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999809604639441	WITHOUT_CLASSIFICATION	1.9039536055807357E-5	DESIGN
// If we've been blocking for the mutex, perhaps another // thread has already reestablished the root. // In case the node was reestablised via replication, confirm it's  // marked "resident" (a status which doesn't replicate)	WITHOUT_CLASSIFICATION	0.9994063595406686	WITHOUT_CLASSIFICATION	5.936404593313951E-4	DESIGN
// For pessimistic locking, we just want to toss out our ref // to any old invalid root node and get the latest (may be null)            	WITHOUT_CLASSIFICATION	0.9999970361815719	WITHOUT_CLASSIFICATION	2.9638184281546223E-6	DESIGN
// The rest only matters for optimistic locking, where we // need to establish the proper data version on the region root	WITHOUT_CLASSIFICATION	0.9999967067570451	WITHOUT_CLASSIFICATION	3.293242954924814E-6	DESIGN
// Don't hold a transactional lock for this 	WITHOUT_CLASSIFICATION	0.999372387328006	WITHOUT_CLASSIFICATION	6.276126719939056E-4	DESIGN
// Make sure the root node for the region exists and  // has a DataVersion that never complains	WITHOUT_CLASSIFICATION	0.9999920686968858	WITHOUT_CLASSIFICATION	7.931303114149307E-6	DESIGN
// Never evict this node	WITHOUT_CLASSIFICATION	0.9992425002067569	WITHOUT_CLASSIFICATION	7.57499793243017E-4	DESIGN
// Fix up the resident flag	WITHOUT_CLASSIFICATION	0.9999679580622182	WITHOUT_CLASSIFICATION	3.2041937781860765E-5	DESIGN
// 60 seconds	WITHOUT_CLASSIFICATION	0.9996310490876151	WITHOUT_CLASSIFICATION	3.689509123849312E-4	DESIGN
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.99998618395447	WITHOUT_CLASSIFICATION	1.381604552989144E-5	DESIGN
// no-op. We don't own the cache so we shouldn't stop it.	WITHOUT_CLASSIFICATION	0.9998741467131458	WITHOUT_CLASSIFICATION	1.2585328685418831E-4	DESIGN
// This should only be possible if the caches are constructor injected 	WITHOUT_CLASSIFICATION	0.9988398160366272	WITHOUT_CLASSIFICATION	0.0011601839633728103	DESIGN
// We only build caches if *none* were passed in.  Passing in // caches counts as a clear statement of exactly what is wanted	WITHOUT_CLASSIFICATION	0.9998783987537959	WITHOUT_CLASSIFICATION	1.2160124620401181E-4	DESIGN
// Set up the cache factory	WITHOUT_CLASSIFICATION	0.9997994392064237	WITHOUT_CLASSIFICATION	2.005607935762508E-4	DESIGN
// See if the user configured a multiplexer stack	WITHOUT_CLASSIFICATION	0.9998932755744051	WITHOUT_CLASSIFICATION	1.0672442559491119E-4	DESIGN
// Default to collections sharing entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999973772164754	WITHOUT_CLASSIFICATION	2.62278352450905E-6	DESIGN
// Default to sharing the entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999958505275859	WITHOUT_CLASSIFICATION	4.149472414114803E-6	DESIGN
// For Timestamps, we default to a separate config	WITHOUT_CLASSIFICATION	0.9997003027581569	WITHOUT_CLASSIFICATION	2.996972418430709E-4	DESIGN
// We can't change the TM on a running cache; just check // if the cache has no TM and we're OK with that	WITHOUT_CLASSIFICATION	0.9993490928577401	WITHOUT_CLASSIFICATION	6.509071422599367E-4	DESIGN
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999612070183543	WITHOUT_CLASSIFICATION	3.879298164562207E-5	DESIGN
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999822422915141	WITHOUT_CLASSIFICATION	1.775770848586176E-5	DESIGN
// This method should be implemented assuming it's valid to  // do start/stop/start -- leave state appropriate for another start	WITHOUT_CLASSIFICATION	0.9927619264140105	WITHOUT_CLASSIFICATION	0.0072380735859895245	DESIGN
// Make sure we don't re-release the same cache	WITHOUT_CLASSIFICATION	0.9999242513136986	WITHOUT_CLASSIFICATION	7.574868630148516E-5	DESIGN
// We use a different delegate than the non-optimistic superclass default	WITHOUT_CLASSIFICATION	0.9999963481339685	WITHOUT_CLASSIFICATION	3.6518660315991084E-6	DESIGN
// Following methods we don't delegate since they have so little logic // it's clearer to just implement them here	WITHOUT_CLASSIFICATION	0.9998126105910748	WITHOUT_CLASSIFICATION	1.873894089252109E-4	DESIGN
// If JBC is using INVALIDATION, we don't want to propagate changes. // We use the Timestamps cache to manage invalidation	WITHOUT_CLASSIFICATION	0.9996700885127899	WITHOUT_CLASSIFICATION	3.299114872100418E-4	DESIGN
// We don't want to waste effort setting an option if JBC is // already in LOCAL mode. If JBC is REPL_(A)SYNC then check // if they passed an config option to disable query replication	WITHOUT_CLASSIFICATION	0.99998108883718	WITHOUT_CLASSIFICATION	1.891116281997824E-5	DESIGN
// Don't hold the JBC node lock throughout the tx, as that // prevents updates // Add a zero (or low) timeout option so we don't block // waiting for tx's that did a put to commit	WITHOUT_CLASSIFICATION	0.9999833749191971	WITHOUT_CLASSIFICATION	1.6625080802806135E-5	DESIGN
// Double check the distributed cache	WITHOUT_CLASSIFICATION	0.999991053147326	WITHOUT_CLASSIFICATION	8.946852673926392E-6	DESIGN
// Get an exclusive right to update JBC for this key from this node.	WITHOUT_CLASSIFICATION	0.9786334284064759	WITHOUT_CLASSIFICATION	0.02136657159352404	DESIGN
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999841518490449	WITHOUT_CLASSIFICATION	1.5848150955194526E-5	DESIGN
// Initial load from JBC	WITHOUT_CLASSIFICATION	0.9998302345747133	WITHOUT_CLASSIFICATION	1.6976542528668578E-4	DESIGN
// See if we had a 2nd invalidation from the same initial // preinvalidation timestamp. If so, only increment // if the new current value is an increase	WITHOUT_CLASSIFICATION	0.9999975642541905	WITHOUT_CLASSIFICATION	2.435745809500874E-6	DESIGN
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999841518490449	WITHOUT_CLASSIFICATION	1.5848150955194526E-5	DESIGN
// If the workspace node has null as well, OK; if not we've // been modified in a non-comparable manner, which we have to // treat as us being newer	WITHOUT_CLASSIFICATION	0.9988384727427525	WITHOUT_CLASSIFICATION	0.001161527257247484	DESIGN
// The standard comparator types are not Serializable but are singletons	WITHOUT_CLASSIFICATION	0.999976853039813	WITHOUT_CLASSIFICATION	2.314696018696005E-5	DESIGN
// ignore!	WITHOUT_CLASSIFICATION	0.9999767878233448	WITHOUT_CLASSIFICATION	2.321217665525317E-5	DESIGN
// ignore it	WITHOUT_CLASSIFICATION	0.9999944994547033	WITHOUT_CLASSIFICATION	5.50054529671742E-6	DESIGN
// construct the cache	WITHOUT_CLASSIFICATION	0.9999317635088436	WITHOUT_CLASSIFICATION	6.823649115645913E-5	DESIGN
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999600060918792	WITHOUT_CLASSIFICATION	3.999390812084333E-5	DESIGN
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999600060918792	WITHOUT_CLASSIFICATION	3.999390812084333E-5	DESIGN
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9993321532872211	WITHOUT_CLASSIFICATION	6.67846712778916E-4	DESIGN
//swaldman 2006-08-28: define c3p0-style configuration parameters for initialPoolSize, which //                     hibernate sensibly lets default to minPoolSize, but we'll let users //                     override it with the c3p0-style property if they want.	WITHOUT_CLASSIFICATION	0.9999620188953865	WITHOUT_CLASSIFICATION	3.7981104613460656E-5	DESIGN
/*DataSource unpooled = DataSources.unpooledDataSource(	WITHOUT_CLASSIFICATION	0.9999411733374279	WITHOUT_CLASSIFICATION	5.882666257207628E-5	DESIGN
// TRUE if the pool is borrowed from the outside, FALSE if we used to create it	WITHOUT_CLASSIFICATION	0.9971727667040624	WITHOUT_CLASSIFICATION	0.0028272332959376834	DESIGN
// get a connection from the pool (thru DriverManager, cfr. Proxool doc)	WITHOUT_CLASSIFICATION	0.9999729532331241	WITHOUT_CLASSIFICATION	2.70467668760302E-5	DESIGN
// set the Transaction Isolation if defined	WITHOUT_CLASSIFICATION	0.9999840656090475	WITHOUT_CLASSIFICATION	1.5934390952554178E-5	DESIGN
// toggle autoCommit to false if set	WITHOUT_CLASSIFICATION	0.9999828477431983	WITHOUT_CLASSIFICATION	1.7152256801703178E-5	DESIGN
// return the connection	WITHOUT_CLASSIFICATION	0.9999865059332733	WITHOUT_CLASSIFICATION	1.3494066726609035E-5	DESIGN
// Get the configurator files (if available)	WITHOUT_CLASSIFICATION	0.9999897240864138	WITHOUT_CLASSIFICATION	1.0275913586021108E-5	DESIGN
// Default the Proxool alias setting	WITHOUT_CLASSIFICATION	0.9999862607582279	WITHOUT_CLASSIFICATION	1.3739241771974238E-5	DESIGN
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9998224294348286	WITHOUT_CLASSIFICATION	1.7757056517137866E-4	DESIGN
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9998224294348286	WITHOUT_CLASSIFICATION	1.7757056517137866E-4	DESIGN
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999962261900063	WITHOUT_CLASSIFICATION	3.7738099935835027E-6	DESIGN
// Set the existing pool flag to true	WITHOUT_CLASSIFICATION	0.9999843585360809	WITHOUT_CLASSIFICATION	1.5641463919097363E-5	DESIGN
// Configured using the JAXP Configurator	WITHOUT_CLASSIFICATION	0.999982406476166	WITHOUT_CLASSIFICATION	1.75935238340705E-5	DESIGN
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9998224294348286	WITHOUT_CLASSIFICATION	1.7757056517137866E-4	DESIGN
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999962261900063	WITHOUT_CLASSIFICATION	3.7738099935835027E-6	DESIGN
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999962261900063	WITHOUT_CLASSIFICATION	3.7738099935835027E-6	DESIGN
// Configured using the Properties File Configurator	WITHOUT_CLASSIFICATION	0.9999955301664379	WITHOUT_CLASSIFICATION	4.469833562091203E-6	DESIGN
// Remember Isolation level	WITHOUT_CLASSIFICATION	0.999972055282786	WITHOUT_CLASSIFICATION	2.7944717214061306E-5	DESIGN
// If the provider was leeching off an existing pool don't close it	WITHOUT_CLASSIFICATION	0.9999965405606659	WITHOUT_CLASSIFICATION	3.45943933403728E-6	DESIGN
// We have created the pool ourselves, so shut it down	WITHOUT_CLASSIFICATION	0.9999923331350461	WITHOUT_CLASSIFICATION	7.666864953855102E-6	DESIGN
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.9999651047016129	WITHOUT_CLASSIFICATION	3.489529838702586E-5	DESIGN
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.9999651047016129	WITHOUT_CLASSIFICATION	3.489529838702586E-5	DESIGN
//always overwrite nonversioned data	WITHOUT_CLASSIFICATION	0.9999948275291785	WITHOUT_CLASSIFICATION	5.172470821568248E-6	DESIGN
//public Currency getCurrency(int col) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9995148264423922	WITHOUT_CLASSIFICATION	4.851735576078253E-4	DESIGN
// default is POJO	WITHOUT_CLASSIFICATION	0.9999285980070206	WITHOUT_CLASSIFICATION	7.14019929793504E-5	DESIGN
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999901761858166	WITHOUT_CLASSIFICATION	9.823814183437586E-6	DESIGN
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999901761858166	WITHOUT_CLASSIFICATION	9.823814183437586E-6	DESIGN
//private CacheEntry cacheEntry;	WITHOUT_CLASSIFICATION	0.9999790549414675	WITHOUT_CLASSIFICATION	2.0945058532492042E-5	DESIGN
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.999984526749564	WITHOUT_CLASSIFICATION	1.547325043601728E-5	DESIGN
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9998248499849939	WITHOUT_CLASSIFICATION	1.751500150060577E-4	DESIGN
// get the updated snapshot of the entity state by cloning current state; // it is safe to copy in place, since by this time no-one else (should have) // has a reference  to the array	WITHOUT_CLASSIFICATION	0.9995581099419238	WITHOUT_CLASSIFICATION	4.418900580761118E-4	DESIGN
// this entity defines proeprty generation, so process those generated // values...	WITHOUT_CLASSIFICATION	0.9999064601221742	WITHOUT_CLASSIFICATION	9.35398778257595E-5	DESIGN
// have the entity entry perform post-update processing, passing it the // update state and the new version (if one).	WITHOUT_CLASSIFICATION	0.9999985583779769	WITHOUT_CLASSIFICATION	1.4416220231025713E-6	DESIGN
/*!persister.isCacheInvalidationRequired()*/	WITHOUT_CLASSIFICATION	0.9999771869771185	WITHOUT_CLASSIFICATION	2.2813022881552074E-5	DESIGN
// need to look it up from the persistence-context	WITHOUT_CLASSIFICATION	0.9999937614297684	WITHOUT_CLASSIFICATION	6.238570231706962E-6	DESIGN
//sort first by role name	WITHOUT_CLASSIFICATION	0.999917218707477	WITHOUT_CLASSIFICATION	8.278129252298101E-5	DESIGN
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9998248499849939	WITHOUT_CLASSIFICATION	1.751500150060577E-4	DESIGN
//then by fk	WITHOUT_CLASSIFICATION	0.9998983389835756	WITHOUT_CLASSIFICATION	1.0166101642445918E-4	DESIGN
// nothing to do	WITHOUT_CLASSIFICATION	0.9997302664868012	WITHOUT_CLASSIFICATION	2.6973351319877707E-4	DESIGN
// nothing to do	WITHOUT_CLASSIFICATION	0.9997302664868012	WITHOUT_CLASSIFICATION	2.6973351319877707E-4	DESIGN
// an existing collection that was either non-empty or uninitialized // is replaced by null or a different collection // (if the collection is uninitialized, hibernate has no way of // knowing if the collection is actually empty without querying the db)	WITHOUT_CLASSIFICATION	0.9999932518358671	WITHOUT_CLASSIFICATION	6.7481641329765646E-6	DESIGN
// this method is called when a new non-null collection is persisted // or when an existing (non-null) collection is moved to a new owner	WITHOUT_CLASSIFICATION	0.9998348782350684	WITHOUT_CLASSIFICATION	1.651217649315345E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9992342288671854	WITHOUT_CLASSIFICATION	7.657711328146887E-4	DESIGN
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9999999004719912	WITHOUT_CLASSIFICATION	9.952800877924812E-8	DESIGN
//do nothing - we only need to notify the cache...	WITHOUT_CLASSIFICATION	0.999962823030409	WITHOUT_CLASSIFICATION	3.717696959102021E-5	DESIGN
//sort first by entity name	WITHOUT_CLASSIFICATION	0.9999574909267381	WITHOUT_CLASSIFICATION	4.250907326192998E-5	DESIGN
//then by id	WITHOUT_CLASSIFICATION	0.9998702092616018	WITHOUT_CLASSIFICATION	1.2979073839817246E-4	DESIGN
// to be safe...	WITHOUT_CLASSIFICATION	0.9998390030395015	WITHOUT_CLASSIFICATION	1.6099696049856437E-4	DESIGN
// no transformations took place, so handle it as we would a // non-instrumented class	WITHOUT_CLASSIFICATION	0.9996599174854973	WITHOUT_CLASSIFICATION	3.4008251450267605E-4	DESIGN
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999931171360231	WITHOUT_CLASSIFICATION	6.882863976865636E-6	DESIGN
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999931171360231	WITHOUT_CLASSIFICATION	6.882863976865636E-6	DESIGN
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999720026914372	WITHOUT_CLASSIFICATION	2.799730856281029E-5	DESIGN
//test out the optimizer:	WITHOUT_CLASSIFICATION	0.9999383435762718	WITHOUT_CLASSIFICATION	6.165642372827204E-5	DESIGN
// set the name of bulk accessor.	WITHOUT_CLASSIFICATION	0.99997196386601	WITHOUT_CLASSIFICATION	2.8036133990063474E-5	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.9999466053375201	WITHOUT_CLASSIFICATION	5.339466247981895E-5	DESIGN
// invokespecial	WITHOUT_CLASSIFICATION	0.9999740688881565	WITHOUT_CLASSIFICATION	2.5931111843432227E-5	DESIGN
// return	WITHOUT_CLASSIFICATION	0.9999641203172493	WITHOUT_CLASSIFICATION	3.587968275066E-5	DESIGN
// aload_1 // load bean	WITHOUT_CLASSIFICATION	0.999842782770834	WITHOUT_CLASSIFICATION	1.572172291660295E-4	DESIGN
// checkcast // cast bean	WITHOUT_CLASSIFICATION	0.9996218332213428	WITHOUT_CLASSIFICATION	3.7816677865728024E-4	DESIGN
// astore_3 // store bean	WITHOUT_CLASSIFICATION	0.9999271522033821	WITHOUT_CLASSIFICATION	7.284779661785086E-5	DESIGN
// aload_2 // args	WITHOUT_CLASSIFICATION	0.9999866063151195	WITHOUT_CLASSIFICATION	1.3393684880571994E-5	DESIGN
// iconst_i // continue to aastore // growing stack is 1	WITHOUT_CLASSIFICATION	0.9995872825714471	WITHOUT_CLASSIFICATION	4.12717428552805E-4	DESIGN
// new	WITHOUT_CLASSIFICATION	0.9999190624500048	WITHOUT_CLASSIFICATION	8.093754999513681E-5	DESIGN
// dup	WITHOUT_CLASSIFICATION	0.9998724234296626	WITHOUT_CLASSIFICATION	1.2757657033733304E-4	DESIGN
// aload_3 // load the raw bean	WITHOUT_CLASSIFICATION	0.999974926484994	WITHOUT_CLASSIFICATION	2.5073515006121054E-5	DESIGN
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999873061263959	WITHOUT_CLASSIFICATION	1.2693873604090916E-5	DESIGN
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999879361024618	WITHOUT_CLASSIFICATION	1.20638975380662E-5	DESIGN
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999879361024618	WITHOUT_CLASSIFICATION	1.20638975380662E-5	DESIGN
// aastore // args	WITHOUT_CLASSIFICATION	0.9999910978807776	WITHOUT_CLASSIFICATION	8.902119222412135E-6	DESIGN
/* | this | bean | args | i | raw bean | exception | */	WITHOUT_CLASSIFICATION	0.996409765270968	WITHOUT_CLASSIFICATION	0.003590234729032005	DESIGN
// required to exception table // iconst_0 // i	WITHOUT_CLASSIFICATION	0.9999868206314392	WITHOUT_CLASSIFICATION	1.3179368560764331E-5	DESIGN
// istore_3 // store i	WITHOUT_CLASSIFICATION	0.9999286932478303	WITHOUT_CLASSIFICATION	7.130675216959901E-5	DESIGN
// aload_1 // load the bean	WITHOUT_CLASSIFICATION	0.9999605565918005	WITHOUT_CLASSIFICATION	3.944340819958664E-5	DESIGN
// checkcast // cast the bean into a raw bean	WITHOUT_CLASSIFICATION	0.9989981009811865	WITHOUT_CLASSIFICATION	0.001001899018813473	DESIGN
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999883403388068	WITHOUT_CLASSIFICATION	1.1659661193145419E-5	DESIGN
// start region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.993140684012575	WITHOUT_CLASSIFICATION	0.006859315987425021	DESIGN
// iinc 3, 1	WITHOUT_CLASSIFICATION	0.999858689534724	WITHOUT_CLASSIFICATION	1.4131046527594864E-4	DESIGN
// aload 4 // load the raw bean	WITHOUT_CLASSIFICATION	0.999972608566364	WITHOUT_CLASSIFICATION	2.739143363592649E-5	DESIGN
// aload_2 // load the args	WITHOUT_CLASSIFICATION	0.9999909987786338	WITHOUT_CLASSIFICATION	9.001221366190155E-6	DESIGN
// iconst_i	WITHOUT_CLASSIFICATION	0.9998678304429016	WITHOUT_CLASSIFICATION	1.321695570982965E-4	DESIGN
// aaload	WITHOUT_CLASSIFICATION	0.9998966509112805	WITHOUT_CLASSIFICATION	1.0334908871952382E-4	DESIGN
// checkcast	WITHOUT_CLASSIFICATION	0.9999469570899014	WITHOUT_CLASSIFICATION	5.304291009862334E-5	DESIGN
// checkcast (case of primitive type) // invokevirtual (case of primitive type)	WITHOUT_CLASSIFICATION	0.999979076262989	WITHOUT_CLASSIFICATION	2.0923737010964346E-5	DESIGN
// checkcast (case of reference type)	WITHOUT_CLASSIFICATION	0.9999429672454251	WITHOUT_CLASSIFICATION	5.703275457492409E-5	DESIGN
/* current stack len = 2 */	WITHOUT_CLASSIFICATION	0.9999899014345777	WITHOUT_CLASSIFICATION	1.009856542227014E-5	DESIGN
// end region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9970175618989747	WITHOUT_CLASSIFICATION	0.0029824381010253444	DESIGN
// register in exception table	WITHOUT_CLASSIFICATION	0.9999489819099464	WITHOUT_CLASSIFICATION	5.1018090053588256E-5	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.9999466053375201	WITHOUT_CLASSIFICATION	5.339466247981895E-5	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.9999466053375201	WITHOUT_CLASSIFICATION	5.339466247981895E-5	DESIGN
// return	WITHOUT_CLASSIFICATION	0.9999641203172493	WITHOUT_CLASSIFICATION	3.587968275066E-5	DESIGN
// return	WITHOUT_CLASSIFICATION	0.9999641203172493	WITHOUT_CLASSIFICATION	3.587968275066E-5	DESIGN
// dup	WITHOUT_CLASSIFICATION	0.9998724234296626	WITHOUT_CLASSIFICATION	1.2757657033733304E-4	DESIGN
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999879361024618	WITHOUT_CLASSIFICATION	1.20638975380662E-5	DESIGN
// checkcast	WITHOUT_CLASSIFICATION	0.9999469570899014	WITHOUT_CLASSIFICATION	5.304291009862334E-5	DESIGN
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.999948610163509	WITHOUT_CLASSIFICATION	5.138983649088662E-5	DESIGN
// astore 5 // store exception	WITHOUT_CLASSIFICATION	0.9995373410120355	WITHOUT_CLASSIFICATION	4.626589879644672E-4	DESIGN
// new // BulkAccessorException	WITHOUT_CLASSIFICATION	0.9993079491852263	WITHOUT_CLASSIFICATION	6.920508147737848E-4	DESIGN
// aload 5 // load exception	WITHOUT_CLASSIFICATION	0.999666523110407	WITHOUT_CLASSIFICATION	3.334768895929083E-4	DESIGN
// iload_3 // i	WITHOUT_CLASSIFICATION	0.9999446950672416	WITHOUT_CLASSIFICATION	5.530493275827474E-5	DESIGN
// invokespecial // BulkAccessorException.<init>	WITHOUT_CLASSIFICATION	0.999672444820941	WITHOUT_CLASSIFICATION	3.275551790590421E-4	DESIGN
// athrow	WITHOUT_CLASSIFICATION	0.9999601808628984	WITHOUT_CLASSIFICATION	3.981913710167704E-5	DESIGN
// WARNING: classfile only	WITHOUT_CLASSIFICATION	0.9999317216641693	WITHOUT_CLASSIFICATION	6.827833583070119E-5	DESIGN
//swallow	WITHOUT_CLASSIFICATION	0.9990423880924525	WITHOUT_CLASSIFICATION	9.576119075475932E-4	DESIGN
/* local variable | this | */	WITHOUT_CLASSIFICATION	0.9980231942795673	WITHOUT_CLASSIFICATION	0.0019768057204327338	DESIGN
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.9997384385208092	WITHOUT_CLASSIFICATION	2.615614791907559E-4	DESIGN
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.9997384385208092	WITHOUT_CLASSIFICATION	2.615614791907559E-4	DESIGN
// getfield // get field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999240708448176	WITHOUT_CLASSIFICATION	7.592915518237068E-5	DESIGN
// areturn // return the value of the field	WITHOUT_CLASSIFICATION	0.9999874259538213	WITHOUT_CLASSIFICATION	1.2574046178673277E-5	DESIGN
/* local variables | this | callback | */	WITHOUT_CLASSIFICATION	0.9906851525496535	WITHOUT_CLASSIFICATION	0.009314847450346558	DESIGN
// aload_1 // load callback	WITHOUT_CLASSIFICATION	0.9977886400431103	WITHOUT_CLASSIFICATION	0.002211359956889691	DESIGN
// putfield // put field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999705544558314	WITHOUT_CLASSIFICATION	2.9445544168571257E-5	DESIGN
// case of non-static field	WITHOUT_CLASSIFICATION	0.9997358813525489	WITHOUT_CLASSIFICATION	2.641186474511274E-4	DESIGN
// getfield // get each field	WITHOUT_CLASSIFICATION	0.9998406132635828	WITHOUT_CLASSIFICATION	1.5938673641728164E-4	DESIGN
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999836611735601	WITHOUT_CLASSIFICATION	1.6338826439921812E-5	DESIGN
// ifnonnull	WITHOUT_CLASSIFICATION	0.9998595502550836	WITHOUT_CLASSIFICATION	1.404497449164011E-4	DESIGN
// *return // each type	WITHOUT_CLASSIFICATION	0.9999798325532435	WITHOUT_CLASSIFICATION	2.016744675650909E-5	DESIGN
// *return // each type	WITHOUT_CLASSIFICATION	0.9999798325532435	WITHOUT_CLASSIFICATION	2.016744675650909E-5	DESIGN
// *store_1 // each type	WITHOUT_CLASSIFICATION	0.9999856461109783	WITHOUT_CLASSIFICATION	1.435388902164177E-5	DESIGN
// ldc // name of the field	WITHOUT_CLASSIFICATION	0.9999034061667683	WITHOUT_CLASSIFICATION	9.659383323173693E-5	DESIGN
// *load_1 // each type	WITHOUT_CLASSIFICATION	0.9999803694858597	WITHOUT_CLASSIFICATION	1.963051414022725E-5	DESIGN
// invokeinterface // invoke Callback.read*() // each type	WITHOUT_CLASSIFICATION	0.9999640458159709	WITHOUT_CLASSIFICATION	3.595418402906228E-5	DESIGN
// int	WITHOUT_CLASSIFICATION	0.9998725591124584	WITHOUT_CLASSIFICATION	1.2744088754151078E-4	DESIGN
// return	WITHOUT_CLASSIFICATION	0.9999641203172493	WITHOUT_CLASSIFICATION	3.587968275066E-5	DESIGN
// dup	WITHOUT_CLASSIFICATION	0.9998724234296626	WITHOUT_CLASSIFICATION	1.2757657033733304E-4	DESIGN
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999873061263959	WITHOUT_CLASSIFICATION	1.2693873604090916E-5	DESIGN
// checkcast	WITHOUT_CLASSIFICATION	0.9999469570899014	WITHOUT_CLASSIFICATION	5.304291009862334E-5	DESIGN
// checkcast	WITHOUT_CLASSIFICATION	0.9999469570899014	WITHOUT_CLASSIFICATION	5.304291009862334E-5	DESIGN
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999913158402318	WITHOUT_CLASSIFICATION	8.684159768245548E-6	DESIGN
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999913158402318	WITHOUT_CLASSIFICATION	8.684159768245548E-6	DESIGN
// ifnonnull (label1)	WITHOUT_CLASSIFICATION	0.9971313337682781	WITHOUT_CLASSIFICATION	0.002868666231721745	DESIGN
// *load_1	WITHOUT_CLASSIFICATION	0.9999639687670295	WITHOUT_CLASSIFICATION	3.603123297047282E-5	DESIGN
// *load_1	WITHOUT_CLASSIFICATION	0.9999639687670295	WITHOUT_CLASSIFICATION	3.603123297047282E-5	DESIGN
// putfield	WITHOUT_CLASSIFICATION	0.9999819272590973	WITHOUT_CLASSIFICATION	1.807274090269329E-5	DESIGN
// return ;	WITHOUT_CLASSIFICATION	0.9999757890942238	WITHOUT_CLASSIFICATION	2.4210905776115137E-5	DESIGN
// ldc // field name	WITHOUT_CLASSIFICATION	0.9999178960498284	WITHOUT_CLASSIFICATION	8.210395017151419E-5	DESIGN
// getfield // old value of the field	WITHOUT_CLASSIFICATION	0.9999574631084848	WITHOUT_CLASSIFICATION	4.2536891515176875E-5	DESIGN
// invokeinterface // callback.write*(..)	WITHOUT_CLASSIFICATION	0.9998613916484157	WITHOUT_CLASSIFICATION	1.3860835158432591E-4	DESIGN
// reference type	WITHOUT_CLASSIFICATION	0.9999630138442799	WITHOUT_CLASSIFICATION	3.6986155720096636E-5	DESIGN
// reference type	WITHOUT_CLASSIFICATION	0.9999630138442799	WITHOUT_CLASSIFICATION	3.6986155720096636E-5	DESIGN
// not array	WITHOUT_CLASSIFICATION	0.9999885961428413	WITHOUT_CLASSIFICATION	1.1403857158717894E-5	DESIGN
// array of reference type	WITHOUT_CLASSIFICATION	0.9999338536679938	WITHOUT_CLASSIFICATION	6.61463320061902E-5	DESIGN
// boolean	WITHOUT_CLASSIFICATION	0.9999718079762735	WITHOUT_CLASSIFICATION	2.8192023726539492E-5	DESIGN
// byte	WITHOUT_CLASSIFICATION	0.9999711772698815	WITHOUT_CLASSIFICATION	2.8822730118434982E-5	DESIGN
// char	WITHOUT_CLASSIFICATION	0.9999149018084368	WITHOUT_CLASSIFICATION	8.509819156320702E-5	DESIGN
// short	WITHOUT_CLASSIFICATION	0.9998614068573332	WITHOUT_CLASSIFICATION	1.3859314266681343E-4	DESIGN
// double	WITHOUT_CLASSIFICATION	0.9999148996315688	WITHOUT_CLASSIFICATION	8.510036843115959E-5	DESIGN
// float	WITHOUT_CLASSIFICATION	0.9999660705928692	WITHOUT_CLASSIFICATION	3.3929407130718515E-5	DESIGN
// float	WITHOUT_CLASSIFICATION	0.9999660705928692	WITHOUT_CLASSIFICATION	3.3929407130718515E-5	DESIGN
// long	WITHOUT_CLASSIFICATION	0.9998750526767566	WITHOUT_CLASSIFICATION	1.2494732324343E-4	DESIGN
// long	WITHOUT_CLASSIFICATION	0.9998750526767566	WITHOUT_CLASSIFICATION	1.2494732324343E-4	DESIGN
// bad type	WITHOUT_CLASSIFICATION	0.999959896629565	WITHOUT_CLASSIFICATION	4.0103370435076255E-5	DESIGN
// bad type	WITHOUT_CLASSIFICATION	0.999959896629565	WITHOUT_CLASSIFICATION	4.0103370435076255E-5	DESIGN
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999860140997344	WITHOUT_CLASSIFICATION	1.3985900265554117E-5	DESIGN
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999860140997344	WITHOUT_CLASSIFICATION	1.3985900265554117E-5	DESIGN
// reference type	WITHOUT_CLASSIFICATION	0.9999630138442799	WITHOUT_CLASSIFICATION	3.6986155720096636E-5	DESIGN
// double	WITHOUT_CLASSIFICATION	0.9999148996315688	WITHOUT_CLASSIFICATION	8.510036843115959E-5	DESIGN
// float	WITHOUT_CLASSIFICATION	0.9999660705928692	WITHOUT_CLASSIFICATION	3.3929407130718515E-5	DESIGN
// float	WITHOUT_CLASSIFICATION	0.9999660705928692	WITHOUT_CLASSIFICATION	3.3929407130718515E-5	DESIGN
// long	WITHOUT_CLASSIFICATION	0.9998750526767566	WITHOUT_CLASSIFICATION	1.2494732324343E-4	DESIGN
// bad type	WITHOUT_CLASSIFICATION	0.999959896629565	WITHOUT_CLASSIFICATION	4.0103370435076255E-5	DESIGN
// bad type	WITHOUT_CLASSIFICATION	0.999959896629565	WITHOUT_CLASSIFICATION	4.0103370435076255E-5	DESIGN
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999860140997344	WITHOUT_CLASSIFICATION	1.3985900265554117E-5	DESIGN
// skip finalize methods	WITHOUT_CLASSIFICATION	0.9998147042631103	WITHOUT_CLASSIFICATION	1.852957368897915E-4	DESIGN
//Mainly for OSCache	WITHOUT_CLASSIFICATION	0.9999298540130415	WITHOUT_CLASSIFICATION	7.014598695850654E-5	DESIGN
//decrement the lock	WITHOUT_CLASSIFICATION	0.9999156445800548	WITHOUT_CLASSIFICATION	8.435541994524647E-5	DESIGN
// create new lock that times out immediately	WITHOUT_CLASSIFICATION	0.9999528736979	WITHOUT_CLASSIFICATION	4.7126302100099096E-5	DESIGN
//recache the updated state	WITHOUT_CLASSIFICATION	0.999865959410403	WITHOUT_CLASSIFICATION	1.3404058959692622E-4	DESIGN
// noop	WITHOUT_CLASSIFICATION	0.9999126625500261	WITHOUT_CLASSIFICATION	8.733744997386197E-5	DESIGN
//null clientLock is remotely possible but will never happen in practice	WITHOUT_CLASSIFICATION	0.9999578980024277	WITHOUT_CLASSIFICATION	4.210199757231678E-5	DESIGN
// we really could refresh the item if it // is not a lock, but it might be slower //return freshTimestamp < txTimestamp	WITHOUT_CLASSIFICATION	0.7472323668687874	WITHOUT_CLASSIFICATION	0.25276763313121264	DESIGN
//by requiring <, we rely on lock timeout in the case of an unsuccessful update!	WITHOUT_CLASSIFICATION	0.999691661693839	WITHOUT_CLASSIFICATION	3.0833830616097576E-4	DESIGN
// the user provided resulttransformer, not the one used with "select new". Here to avoid mangling // transformed/non-transformed results.	WITHOUT_CLASSIFICATION	0.9999806288511524	WITHOUT_CLASSIFICATION	1.9371148847736638E-5	DESIGN
// disassemble positional parameters	WITHOUT_CLASSIFICATION	0.9999975089198332	WITHOUT_CLASSIFICATION	2.49108016681421E-6	DESIGN
// disassemble named parameters	WITHOUT_CLASSIFICATION	0.9999973062451418	WITHOUT_CLASSIFICATION	2.6937548581928384E-6	DESIGN
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9993321532872211	WITHOUT_CLASSIFICATION	6.67846712778916E-4	DESIGN
// noop	WITHOUT_CLASSIFICATION	0.9999126625500261	WITHOUT_CLASSIFICATION	8.733744997386197E-5	DESIGN
//noop	WITHOUT_CLASSIFICATION	0.9987302885427921	WITHOUT_CLASSIFICATION	0.0012697114572079004	DESIGN
//noop	WITHOUT_CLASSIFICATION	0.9987302885427921	WITHOUT_CLASSIFICATION	0.0012697114572079004	DESIGN
// this is called from SettingsFactory irregardless; trivial to simply disregard	WITHOUT_CLASSIFICATION	0.9960643620131967	WITHOUT_CLASSIFICATION	0.003935637986803269	DESIGN
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999835436265576	WITHOUT_CLASSIFICATION	1.645637344237764E-5	DESIGN
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999835436265576	WITHOUT_CLASSIFICATION	1.645637344237764E-5	DESIGN
//throw new UnsupportedOperationException("Can't write to a readonly object");	WITHOUT_CLASSIFICATION	0.996597949348719	WITHOUT_CLASSIFICATION	0.0034020506512809955	DESIGN
//assembled state gets put in a new array (we read from cache by value!)	WITHOUT_CLASSIFICATION	0.9981450544195077	WITHOUT_CLASSIFICATION	0.0018549455804922398	DESIGN
//persister.setIdentifier(result, id); //before calling interceptor, for consistency with normal load	WITHOUT_CLASSIFICATION	0.9999523282566305	WITHOUT_CLASSIFICATION	4.767174336952585E-5	DESIGN
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9996937025204197	WITHOUT_CLASSIFICATION	3.0629747958039306E-4	DESIGN
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9996937025204197	WITHOUT_CLASSIFICATION	3.0629747958039306E-4	DESIGN
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999760604130743	WITHOUT_CLASSIFICATION	2.393958692573784E-5	DESIGN
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9997886495721068	WITHOUT_CLASSIFICATION	2.1135042789330387E-4	DESIGN
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9997886495721068	WITHOUT_CLASSIFICATION	2.1135042789330387E-4	DESIGN
// classes mentioned in extends not available - so put it in queue	WITHOUT_CLASSIFICATION	0.999995865336563	WITHOUT_CLASSIFICATION	4.13466343692329E-6	DESIGN
// get meta's from <hibernate-mapping>	WITHOUT_CLASSIFICATION	0.9999481416538611	WITHOUT_CLASSIFICATION	5.1858346138945594E-5	DESIGN
// get meta's from <class>	WITHOUT_CLASSIFICATION	0.9996961316075085	WITHOUT_CLASSIFICATION	3.0386839249159326E-4	DESIGN
// DB-OBJECTNAME	WITHOUT_CLASSIFICATION	0.9996905754730595	WITHOUT_CLASSIFICATION	3.0942452694055525E-4	DESIGN
// MUTABLE	WITHOUT_CLASSIFICATION	0.9993935984748291	WITHOUT_CLASSIFICATION	6.064015251707995E-4	DESIGN
// WHERE	WITHOUT_CLASSIFICATION	0.9997670741436154	WITHOUT_CLASSIFICATION	2.3292585638461381E-4	DESIGN
// CHECK	WITHOUT_CLASSIFICATION	0.9997798886283066	WITHOUT_CLASSIFICATION	2.2011137169348127E-4	DESIGN
// POLYMORPHISM	WITHOUT_CLASSIFICATION	0.9997530910918745	WITHOUT_CLASSIFICATION	2.469089081254262E-4	DESIGN
// TODO:	WITHOUT_CLASSIFICATION	0.9507264262950443	WITHOUT_CLASSIFICATION	0.04927357370495572	DESIGN
// ID	WITHOUT_CLASSIFICATION	0.99988663958811	WITHOUT_CLASSIFICATION	1.1336041188995538E-4	DESIGN
// VERSION / TIMESTAMP	WITHOUT_CLASSIFICATION	0.9988928845336661	WITHOUT_CLASSIFICATION	0.0011071154663339188	DESIGN
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9994652177161089	WITHOUT_CLASSIFICATION	5.347822838911256E-4	DESIGN
// Primary key constraint	WITHOUT_CLASSIFICATION	0.9999891330976647	WITHOUT_CLASSIFICATION	1.0866902335261053E-5	DESIGN
// this is either a <version/> tag with no type attribute, // or a <timestamp/> tag	WITHOUT_CLASSIFICATION	0.9997509382337592	WITHOUT_CLASSIFICATION	2.490617662408709E-4	DESIGN
// for version properties marked as being generated, make sure they are "always" // generated; aka, "insert" is invalid; this is dis-allowed by the DTD, // but just to make sure...	WITHOUT_CLASSIFICATION	0.9999752058793315	WITHOUT_CLASSIFICATION	2.4794120668482635E-5	DESIGN
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9994652177161089	WITHOUT_CLASSIFICATION	5.347822838911256E-4	DESIGN
// ( (Column) discrim.getColumnIterator().next() ).setType(type);	WITHOUT_CLASSIFICATION	0.9999913803457864	WITHOUT_CLASSIFICATION	8.61965421364498E-6	DESIGN
// go ahead and set the lazy here, since pojo.proxy can override it.	WITHOUT_CLASSIFICATION	0.9999705014738555	WITHOUT_CLASSIFICATION	2.9498526144527345E-5	DESIGN
// DYNAMIC UPDATE	WITHOUT_CLASSIFICATION	0.9993886418713849	WITHOUT_CLASSIFICATION	6.11358128615069E-4	DESIGN
// IMPORT	WITHOUT_CLASSIFICATION	0.9997643694076621	WITHOUT_CLASSIFICATION	2.35630592337904E-4	DESIGN
// BATCH SIZE	WITHOUT_CLASSIFICATION	0.9988941743833021	WITHOUT_CLASSIFICATION	0.0011058256166979236	DESIGN
// SELECT BEFORE UPDATE	WITHOUT_CLASSIFICATION	0.99745587466366	WITHOUT_CLASSIFICATION	0.002544125336339995	DESIGN
// OPTIMISTIC LOCK MODE	WITHOUT_CLASSIFICATION	0.9972949880320607	WITHOUT_CLASSIFICATION	0.002705011967939319	DESIGN
// PERSISTER	WITHOUT_CLASSIFICATION	0.9998221698380704	WITHOUT_CLASSIFICATION	1.778301619296627E-4	DESIGN
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9996680213304773	WITHOUT_CLASSIFICATION	3.3197866952283276E-4	DESIGN
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9995917709365963	WITHOUT_CLASSIFICATION	4.082290634036411E-4	DESIGN
// properties	WITHOUT_CLASSIFICATION	0.9999881037062711	WITHOUT_CLASSIFICATION	1.1896293728893905E-5	DESIGN
// joined subclasses	WITHOUT_CLASSIFICATION	0.9998869506348097	WITHOUT_CLASSIFICATION	1.1304936519031616E-4	DESIGN
// KEY	WITHOUT_CLASSIFICATION	0.9997280554290789	WITHOUT_CLASSIFICATION	2.719445709210857E-4	DESIGN
// CHECK	WITHOUT_CLASSIFICATION	0.9997798886283066	WITHOUT_CLASSIFICATION	2.2011137169348127E-4	DESIGN
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9996680213304773	WITHOUT_CLASSIFICATION	3.3197866952283276E-4	DESIGN
// properties	WITHOUT_CLASSIFICATION	0.9999881037062711	WITHOUT_CLASSIFICATION	1.1896293728893905E-5	DESIGN
// KEY	WITHOUT_CLASSIFICATION	0.9997280554290789	WITHOUT_CLASSIFICATION	2.719445709210857E-4	DESIGN
// model.getKey().setType( new Type( model.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999977630162833	WITHOUT_CLASSIFICATION	2.2369837166468724E-6	DESIGN
// TABLENAME	WITHOUT_CLASSIFICATION	0.9990819292168395	WITHOUT_CLASSIFICATION	9.180707831604871E-4	DESIGN
// join.getKey().setType( new Type( lazz.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.99999774308642	WITHOUT_CLASSIFICATION	2.2569135800762915E-6	DESIGN
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9998712483704834	WITHOUT_CLASSIFICATION	1.2875162951655903E-4	DESIGN
// COLUMN(S)	WITHOUT_CLASSIFICATION	0.9999341044404843	WITHOUT_CLASSIFICATION	6.589555951578699E-5	DESIGN
// column index	WITHOUT_CLASSIFICATION	0.9997094619154011	WITHOUT_CLASSIFICATION	2.9053808459888607E-4	DESIGN
//column unique-key	WITHOUT_CLASSIFICATION	0.9998337615361327	WITHOUT_CLASSIFICATION	1.6623846386728503E-4	DESIGN
// automatically makes a column with the default name if none is specifed by XML	WITHOUT_CLASSIFICATION	0.9998341303183385	WITHOUT_CLASSIFICATION	1.658696816614387E-4	DESIGN
// for an any	WITHOUT_CLASSIFICATION	0.9999886184672777	WITHOUT_CLASSIFICATION	1.1381532722318313E-5	DESIGN
// insertable simply because that is the user did not specify // anything; just override it	WITHOUT_CLASSIFICATION	0.9999998209812158	WITHOUT_CLASSIFICATION	1.790187841850596E-7	DESIGN
// the user specifically supplied insert="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999690736919497	WITHOUT_CLASSIFICATION	3.09263080502227E-5	DESIGN
// properties generated on update can never be updateable...	WITHOUT_CLASSIFICATION	0.9999964770923296	WITHOUT_CLASSIFICATION	3.522907670283669E-6	DESIGN
// updateable only because the user did not specify  // anything; just override it	WITHOUT_CLASSIFICATION	0.9999992216111246	WITHOUT_CLASSIFICATION	7.783888753156602E-7	DESIGN
// the user specifically supplied update="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999607854888558	WITHOUT_CLASSIFICATION	3.921451114419606E-5	DESIGN
// ROLENAME	WITHOUT_CLASSIFICATION	0.9998090207824334	WITHOUT_CLASSIFICATION	1.9097921756653928E-4	DESIGN
// FETCH STRATEGY	WITHOUT_CLASSIFICATION	0.9998151328817863	WITHOUT_CLASSIFICATION	1.848671182137542E-4	DESIGN
// TABLE	WITHOUT_CLASSIFICATION	0.9990582136386942	WITHOUT_CLASSIFICATION	9.417863613057736E-4	DESIGN
//tableName = mappings.getNamingStrategy().propertyToTableName( className, path );	WITHOUT_CLASSIFICATION	0.9999996565340987	WITHOUT_CLASSIFICATION	3.434659012990483E-7	DESIGN
// SORT	WITHOUT_CLASSIFICATION	0.9997438627905799	WITHOUT_CLASSIFICATION	2.56137209420063E-4	DESIGN
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9996680213304773	WITHOUT_CLASSIFICATION	3.3197866952283276E-4	DESIGN
// unsorted, natural, comparator.class.name	WITHOUT_CLASSIFICATION	0.9999846109147336	WITHOUT_CLASSIFICATION	1.5389085266454282E-5	DESIGN
// ORPHAN DELETE (used for programmer error detection)	WITHOUT_CLASSIFICATION	0.9997653032739854	WITHOUT_CLASSIFICATION	2.3469672601454422E-4	DESIGN
// set up second pass	WITHOUT_CLASSIFICATION	0.999404533667929	WITHOUT_CLASSIFICATION	5.954663320710354E-4	DESIGN
// an "embedded" component (composite ids and unique) // note that this does not handle nested components	WITHOUT_CLASSIFICATION	0.9997714395177881	WITHOUT_CLASSIFICATION	2.28560482211986E-4	DESIGN
// a nested composite element	WITHOUT_CLASSIFICATION	0.9999911790984214	WITHOUT_CLASSIFICATION	8.820901578578718E-6	DESIGN
// for an any // we will have to use reflection	WITHOUT_CLASSIFICATION	0.999971958849427	WITHOUT_CLASSIFICATION	2.804115057300808E-5	DESIGN
//NOTE SPECIAL CASE: // one-to-one constrained=false cannot be proxied, // so default to join and non-lazy	WITHOUT_CLASSIFICATION	0.9999962118480743	WITHOUT_CLASSIFICATION	3.7881519257814912E-6	DESIGN
// use old (HB 2.1) defaults if outer-join is specified	WITHOUT_CLASSIFICATION	0.9998723130438355	WITHOUT_CLASSIFICATION	1.276869561645423E-4	DESIGN
//lazy = !join;	WITHOUT_CLASSIFICATION	0.9999228660903356	WITHOUT_CLASSIFICATION	7.71339096643607E-5	DESIGN
// GENERATOR	WITHOUT_CLASSIFICATION	0.9997275104744343	WITHOUT_CLASSIFICATION	2.724895255656303E-4	DESIGN
// ID UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9998547630504436	WITHOUT_CLASSIFICATION	1.4523694955628828E-4	DESIGN
// VERSION UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9995975169319467	WITHOUT_CLASSIFICATION	4.024830680532566E-4	DESIGN
// not necessarily a *unique* property reference	WITHOUT_CLASSIFICATION	0.9999942805815529	WITHOUT_CLASSIFICATION	5.7194184470567024E-6	DESIGN
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999799746217168	WITHOUT_CLASSIFICATION	2.0025378283162402E-5	DESIGN
// contained elements:	WITHOUT_CLASSIFICATION	0.9999400336664284	WITHOUT_CLASSIFICATION	5.9966333571630985E-5	DESIGN
// for non-inverse one-to-many, with a not-null fk, add a backref!	WITHOUT_CLASSIFICATION	0.9999899935740771	WITHOUT_CLASSIFICATION	1.0006425922870844E-5	DESIGN
// Bind the where	WITHOUT_CLASSIFICATION	0.999916856420878	WITHOUT_CLASSIFICATION	8.314357912207613E-5	DESIGN
// Bind the order-by	WITHOUT_CLASSIFICATION	0.9999850610445784	WITHOUT_CLASSIFICATION	1.4938955421573642E-5	DESIGN
// Bind the filters	WITHOUT_CLASSIFICATION	0.9999493930157716	WITHOUT_CLASSIFICATION	5.0606984228543273E-5	DESIGN
// overriding inherited meta attribute. HBX-621 & HBX-793	WITHOUT_CLASSIFICATION	0.9999730574963164	WITHOUT_CLASSIFICATION	2.694250368355389E-5	DESIGN
// first, iterate over all elements capable of defining an extends attribute // collecting all found extends references if they cannot be resolved // against the already processed mappings.	WITHOUT_CLASSIFICATION	0.9999154234162235	WITHOUT_CLASSIFICATION	8.457658377653061E-5	DESIGN
// mappings might contain either the "raw" extends name (in the case of // an entity-name mapping) or a FQN (in the case of a POJO mapping).	WITHOUT_CLASSIFICATION	0.9999988147822648	WITHOUT_CLASSIFICATION	1.1852177351221423E-6	DESIGN
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9996198888733981	WITHOUT_CLASSIFICATION	3.8011112660184644E-4	DESIGN
//SessionFactory name:	WITHOUT_CLASSIFICATION	0.9991238393787409	WITHOUT_CLASSIFICATION	8.761606212589739E-4	DESIGN
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.999910875626532	WITHOUT_CLASSIFICATION	8.912437346805945E-5	DESIGN
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.999910875626532	WITHOUT_CLASSIFICATION	8.912437346805945E-5	DESIGN
//Interrogate JDBC metadata	WITHOUT_CLASSIFICATION	0.9996278856079023	WITHOUT_CLASSIFICATION	3.721143920977219E-4	DESIGN
// user supplied JDBC connections	WITHOUT_CLASSIFICATION	0.9999878366512731	WITHOUT_CLASSIFICATION	1.216334872697546E-5	DESIGN
//use dialect default properties	WITHOUT_CLASSIFICATION	0.999950504105446	WITHOUT_CLASSIFICATION	4.949589455401449E-5	DESIGN
// Transaction settings:	WITHOUT_CLASSIFICATION	0.9999317393259377	WITHOUT_CLASSIFICATION	6.826067406228025E-5	DESIGN
//SQL Generation settings:	WITHOUT_CLASSIFICATION	0.9997995175844037	WITHOUT_CLASSIFICATION	2.004824155963472E-4	DESIGN
//Query parser settings:	WITHOUT_CLASSIFICATION	0.9999709290941605	WITHOUT_CLASSIFICATION	2.907090583951615E-5	DESIGN
// Second-level / query cache:	WITHOUT_CLASSIFICATION	0.9994307283811068	WITHOUT_CLASSIFICATION	5.692716188932527E-4	DESIGN
// The cache provider is needed when we either have second-level cache enabled // or query cache enabled.  Note that useSecondLevelCache is enabled by default	WITHOUT_CLASSIFICATION	0.9998353765849323	WITHOUT_CLASSIFICATION	1.6462341506781006E-4	DESIGN
//SQL Exception converter:	WITHOUT_CLASSIFICATION	0.9992682235498146	WITHOUT_CLASSIFICATION	7.317764501853497E-4	DESIGN
//Statistics and logging:	WITHOUT_CLASSIFICATION	0.9996685019286733	WITHOUT_CLASSIFICATION	3.31498071326636E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9992342288671854	WITHOUT_CLASSIFICATION	7.657711328146887E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9992342288671854	WITHOUT_CLASSIFICATION	7.657711328146887E-4	DESIGN
//Schema export:	WITHOUT_CLASSIFICATION	0.999780242004512	WITHOUT_CLASSIFICATION	2.197579954879317E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9992342288671854	WITHOUT_CLASSIFICATION	7.657711328146887E-4	DESIGN
// legacy behavior, apply the bridge...	WITHOUT_CLASSIFICATION	0.9999956430032478	WITHOUT_CLASSIFICATION	4.356996752131076E-6	DESIGN
// maybe a concrete SQLpropertyresult type, but Map is exactly what is required at the moment	WITHOUT_CLASSIFICATION	0.999975535818152	WITHOUT_CLASSIFICATION	2.4464181847961753E-5	DESIGN
//if dotted and not load-collection nor return-join //regular property	WITHOUT_CLASSIFICATION	0.9999922212695785	WITHOUT_CLASSIFICATION	7.778730421398984E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.9992342288671854	WITHOUT_CLASSIFICATION	7.657711328146887E-4	DESIGN
// public getters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999652833822996	WITHOUT_CLASSIFICATION	3.471661770033312E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9992342288671854	WITHOUT_CLASSIFICATION	7.657711328146887E-4	DESIGN
// package protected setters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999302209207263	WITHOUT_CLASSIFICATION	6.977907927367197E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9992342288671854	WITHOUT_CLASSIFICATION	7.657711328146887E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9992342288671854	WITHOUT_CLASSIFICATION	7.657711328146887E-4	DESIGN
// using local since the inheritedMetas at this point is not the correct map since it is always the empty map	WITHOUT_CLASSIFICATION	0.9998816863667135	WITHOUT_CLASSIFICATION	1.1831363328648811E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9992342288671854	WITHOUT_CLASSIFICATION	7.657711328146887E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9992342288671854	WITHOUT_CLASSIFICATION	7.657711328146887E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9992342288671854	WITHOUT_CLASSIFICATION	7.657711328146887E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9992342288671854	WITHOUT_CLASSIFICATION	7.657711328146887E-4	DESIGN
// if doc is null, then for whatever reason, the cached file cannot be used...	WITHOUT_CLASSIFICATION	0.9976607144984018	WITHOUT_CLASSIFICATION	0.0023392855015982477	DESIGN
// drop them in reverse order in case db needs it done that way...	WITHOUT_CLASSIFICATION	0.9997491561441071	WITHOUT_CLASSIFICATION	2.5084385589291784E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9992342288671854	WITHOUT_CLASSIFICATION	7.657711328146887E-4	DESIGN
// This method may be called many times!!	WITHOUT_CLASSIFICATION	0.9979837227402236	WITHOUT_CLASSIFICATION	0.0020162772597763765	DESIGN
//	WITHOUT_CLASSIFICATION	0.9992342288671854	WITHOUT_CLASSIFICATION	7.657711328146887E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9992342288671854	WITHOUT_CLASSIFICATION	7.657711328146887E-4	DESIGN
// found	WITHOUT_CLASSIFICATION	0.9962280586434733	WITHOUT_CLASSIFICATION	0.0037719413565267257	DESIGN
// found	WITHOUT_CLASSIFICATION	0.9962280586434733	WITHOUT_CLASSIFICATION	0.0037719413565267257	DESIGN
//	WITHOUT_CLASSIFICATION	0.9992342288671854	WITHOUT_CLASSIFICATION	7.657711328146887E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9992342288671854	WITHOUT_CLASSIFICATION	7.657711328146887E-4	DESIGN
//<String, String>	WITHOUT_CLASSIFICATION	0.9999108122245252	WITHOUT_CLASSIFICATION	8.918777547480096E-5	DESIGN
//<String, String>	WITHOUT_CLASSIFICATION	0.9999108122245252	WITHOUT_CLASSIFICATION	8.918777547480096E-5	DESIGN
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9996198888733981	WITHOUT_CLASSIFICATION	3.8011112660184644E-4	DESIGN
//Set USE_REFLECTION_OPTIMIZER to false to fix HHH-227	WITHOUT_CLASSIFICATION	0.9993473583666809	WITHOUT_CLASSIFICATION	6.52641633319252E-4	DESIGN
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9996711742783971	WITHOUT_CLASSIFICATION	3.288257216028564E-4	DESIGN
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9999957169374245	WITHOUT_CLASSIFICATION	4.283062575555923E-6	DESIGN
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999720026914372	WITHOUT_CLASSIFICATION	2.799730856281029E-5	DESIGN
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9996711742783971	WITHOUT_CLASSIFICATION	3.288257216028564E-4	DESIGN
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9999957169374245	WITHOUT_CLASSIFICATION	4.283062575555923E-6	DESIGN
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9998108144046075	WITHOUT_CLASSIFICATION	1.8918559539258972E-4	DESIGN
//maintain correct duplication if loaded in a cartesian product	WITHOUT_CLASSIFICATION	0.9999867500898696	WITHOUT_CLASSIFICATION	1.3249910130363028E-5	DESIGN
// the element has been removed from the set	WITHOUT_CLASSIFICATION	0.9995727570422311	WITHOUT_CLASSIFICATION	4.2724295776885456E-4	DESIGN
// the element has changed	WITHOUT_CLASSIFICATION	0.9997677025531406	WITHOUT_CLASSIFICATION	2.3229744685932045E-4	DESIGN
//Careful: these methods do not initialize the collection.	WITHOUT_CLASSIFICATION	0.9998697549839463	WITHOUT_CLASSIFICATION	1.3024501605375235E-4	DESIGN
//needed so that we remove this collection from the second-level cache	WITHOUT_CLASSIFICATION	0.9610622941746405	WITHOUT_CLASSIFICATION	0.038937705825359416	DESIGN
// override on some subclasses	WITHOUT_CLASSIFICATION	0.9998367403694659	WITHOUT_CLASSIFICATION	1.632596305341359E-4	DESIGN
//override on some subclasses	WITHOUT_CLASSIFICATION	0.9990333641738143	WITHOUT_CLASSIFICATION	9.6663582618577E-4	DESIGN
//do this bit after setting initialized to true or it will recurse	WITHOUT_CLASSIFICATION	0.9997862174398465	WITHOUT_CLASSIFICATION	2.137825601535624E-4	DESIGN
// short-circuit(s) // no new elements, the old list contains only Orphans // no old elements, so no Orphans neither	WITHOUT_CLASSIFICATION	0.9999986933756062	WITHOUT_CLASSIFICATION	1.306624393851087E-6	DESIGN
// create the collection holding the Orphans	WITHOUT_CLASSIFICATION	0.9999629095506918	WITHOUT_CLASSIFICATION	3.709044930820627E-5	DESIGN
// collect EntityIdentifier(s) of the *current* elements - add them into a HashSet for fast access	WITHOUT_CLASSIFICATION	0.9999652722374454	WITHOUT_CLASSIFICATION	3.472776255467034E-5	DESIGN
// iterate over the *old* list	WITHOUT_CLASSIFICATION	0.9999914277215234	WITHOUT_CLASSIFICATION	8.572278476538682E-6	DESIGN
/*(array==null) ? tempList.size() :*/	WITHOUT_CLASSIFICATION	0.9998527697646198	WITHOUT_CLASSIFICATION	1.4723023538031613E-4	DESIGN
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999720026914372	WITHOUT_CLASSIFICATION	2.799730856281029E-5	DESIGN
/*(array==null) ? tempList.get(i) :*/	WITHOUT_CLASSIFICATION	0.9998518305955708	WITHOUT_CLASSIFICATION	1.4816940442928154E-4	DESIGN
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9985720768524634	WITHOUT_CLASSIFICATION	0.0014279231475365375	DESIGN
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9985720768524634	WITHOUT_CLASSIFICATION	0.0014279231475365375	DESIGN
// amazingly, these two will work because AbstractCollection // uses iterator() to fill the array	WITHOUT_CLASSIFICATION	0.9995235541946734	WITHOUT_CLASSIFICATION	4.7644580532653943E-4	DESIGN
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9998108144046075	WITHOUT_CLASSIFICATION	1.8918559539258972E-4	DESIGN
// finally, what it's all about...	WITHOUT_CLASSIFICATION	0.9977612229072611	WITHOUT_CLASSIFICATION	0.0022387770927389038	DESIGN
// note that if we load this collection from a cartesian product // the multiplicity would be broken ... so use an idbag instead	WITHOUT_CLASSIFICATION	0.8906124483521323	WITHOUT_CLASSIFICATION	0.10938755164786776	DESIGN
// Anyway, here we implement <set> semantics for a // <one-to-many> <bag>!	WITHOUT_CLASSIFICATION	0.9999961843529579	WITHOUT_CLASSIFICATION	3.815647042184797E-6	DESIGN
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999390249123652	WITHOUT_CLASSIFICATION	6.0975087634773534E-5	DESIGN
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9996372644533389	WITHOUT_CLASSIFICATION	3.627355466610836E-4	DESIGN
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9998108144046075	WITHOUT_CLASSIFICATION	1.8918559539258972E-4	DESIGN
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999390249123652	WITHOUT_CLASSIFICATION	6.0975087634773534E-5	DESIGN
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9996372644533389	WITHOUT_CLASSIFICATION	3.627355466610836E-4	DESIGN
/*public boolean equals(Object other) {	WITHOUT_CLASSIFICATION	0.9999915646475803	WITHOUT_CLASSIFICATION	8.435352419666805E-6	DESIGN
// List OPERATIONS:	WITHOUT_CLASSIFICATION	0.9999466875402178	WITHOUT_CLASSIFICATION	5.3312459782302645E-5	DESIGN
//pad with nulls from the current last element up to the new index	WITHOUT_CLASSIFICATION	0.9999575791180334	WITHOUT_CLASSIFICATION	4.242088196664772E-5	DESIGN
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9998108144046075	WITHOUT_CLASSIFICATION	1.8918559539258972E-4	DESIGN
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9998108144046075	WITHOUT_CLASSIFICATION	1.8918559539258972E-4	DESIGN
// from Map	WITHOUT_CLASSIFICATION	0.9999255030526919	WITHOUT_CLASSIFICATION	7.449694730803452E-5	DESIGN
// from SortedMap	WITHOUT_CLASSIFICATION	0.9999064224404056	WITHOUT_CLASSIFICATION	9.357755959439007E-5	DESIGN
//inject the data	WITHOUT_CLASSIFICATION	0.9999165345907295	WITHOUT_CLASSIFICATION	8.34654092704021E-5	DESIGN
// cannot be instantiated	WITHOUT_CLASSIFICATION	0.9996406937826081	WITHOUT_CLASSIFICATION	3.5930621739193116E-4	DESIGN
//default pool size 20	WITHOUT_CLASSIFICATION	0.9997197658020349	WITHOUT_CLASSIFICATION	2.8023419796506863E-4	DESIGN
// trying via forName() first to be as close to DriverManager's semantics	WITHOUT_CLASSIFICATION	0.9999934689325962	WITHOUT_CLASSIFICATION	6.531067403765305E-6	DESIGN
// if debug level is enabled, then log the password, otherwise mask it	WITHOUT_CLASSIFICATION	0.9999775216881587	WITHOUT_CLASSIFICATION	2.2478311841293423E-5	DESIGN
// register a cleanup synch	WITHOUT_CLASSIFICATION	0.9999871347160006	WITHOUT_CLASSIFICATION	1.2865283999292336E-5	DESIGN
// wrap the session in the transaction-protection proxy	WITHOUT_CLASSIFICATION	0.9999929352753796	WITHOUT_CLASSIFICATION	7.064724620393075E-6	DESIGN
// then bind it	WITHOUT_CLASSIFICATION	0.9999357019387041	WITHOUT_CLASSIFICATION	6.42980612959693E-5	DESIGN
// try to make sure we don't wrap and already wrapped session	WITHOUT_CLASSIFICATION	0.9999890699168761	WITHOUT_CLASSIFICATION	1.0930083123892833E-5	DESIGN
// allow these to go through the the real session no matter what	WITHOUT_CLASSIFICATION	0.9987123387148199	WITHOUT_CLASSIFICATION	0.0012876612851800842	DESIGN
// limit the methods available if no transaction is active	WITHOUT_CLASSIFICATION	0.9999957929061541	WITHOUT_CLASSIFICATION	4.207093845850054E-6	DESIGN
// allow these (deprecated) methods to pass through	WITHOUT_CLASSIFICATION	0.9998052807844255	WITHOUT_CLASSIFICATION	1.947192155744693E-4	DESIGN
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999902453092386	WITHOUT_CLASSIFICATION	9.754690761412342E-6	DESIGN
// We could register the session against the transaction even though it is // not started, but we'd have no guarentee of ever getting the map // entries cleaned up (aside from spawning threads).	WITHOUT_CLASSIFICATION	0.999982635383791	WITHOUT_CLASSIFICATION	1.7364616209062622E-5	DESIGN
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9995694243813223	WITHOUT_CLASSIFICATION	4.3057561867757444E-4	DESIGN
//private String propertyName;	WITHOUT_CLASSIFICATION	0.9999557845879934	WITHOUT_CLASSIFICATION	4.421541200671765E-5	DESIGN
/*public PropertyProjection project() {	WITHOUT_CLASSIFICATION	0.9996290904666483	WITHOUT_CLASSIFICATION	3.7090953335167315E-4	DESIGN
//String[] fk = StringHelper.qualify( "collection_", cp.getKeyColumnNames() );	WITHOUT_CLASSIFICATION	0.9999973839644714	WITHOUT_CLASSIFICATION	2.616035528716089E-6	DESIGN
//" collection_ where " +	WITHOUT_CLASSIFICATION	0.999893425091525	WITHOUT_CLASSIFICATION	1.0657490847498888E-4	DESIGN
//unsupported	WITHOUT_CLASSIFICATION	0.9994426289653049	WITHOUT_CLASSIFICATION	5.573710346952229E-4	DESIGN
//unsupported	WITHOUT_CLASSIFICATION	0.9994426289653049	WITHOUT_CLASSIFICATION	5.573710346952229E-4	DESIGN
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9995694243813223	WITHOUT_CLASSIFICATION	4.3057561867757444E-4	DESIGN
//the following two lines were added to ensure that this.params is not null, which //can happen with two-deep nested subqueries	WITHOUT_CLASSIFICATION	0.9999027467552094	WITHOUT_CLASSIFICATION	9.725324479059272E-5	DESIGN
//with two-deep subqueries, the same alias would get generated for //both using the old method (criteriaQuery.generateSQLAlias()), so //that is now used as a fallback if the main criteria alias isn't set	WITHOUT_CLASSIFICATION	0.665743371250686	WITHOUT_CLASSIFICATION	0.334256628749314	DESIGN
//implicit polymorphism not supported (would need a union)	WITHOUT_CLASSIFICATION	0.9995339542179037	WITHOUT_CLASSIFICATION	4.6604578209633165E-4	DESIGN
//pull off the last ", "	WITHOUT_CLASSIFICATION	0.9993474773539682	WITHOUT_CLASSIFICATION	6.525226460318188E-4	DESIGN
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999415659743717	WITHOUT_CLASSIFICATION	5.843402562831749E-5	DESIGN
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces	WITHOUT_CLASSIFICATION	0.9998660639197481	WITHOUT_CLASSIFICATION	1.3393608025191658E-4	DESIGN
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource)	WITHOUT_CLASSIFICATION	0.9997415615867529	WITHOUT_CLASSIFICATION	2.5843841324711973E-4	DESIGN
// NOT_SUPPORTED_SHOULD_USE_JDBC3_PreparedStatement.getGeneratedKeys_method	WITHOUT_CLASSIFICATION	0.9999396823972563	WITHOUT_CLASSIFICATION	6.0317602743785816E-5	DESIGN
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999601338829962	WITHOUT_CLASSIFICATION	3.9866117003835325E-5	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999943396600975	WITHOUT_CLASSIFICATION	5.6603399024099825E-6	DESIGN
// Oracle did add support for ANSI CASE statements in 9i	WITHOUT_CLASSIFICATION	0.999975479046211	WITHOUT_CLASSIFICATION	2.4520953788973426E-5	DESIGN
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999932703522489	WITHOUT_CLASSIFICATION	6.729647751060412E-6	DESIGN
// Informix doesn't have a bit type	WITHOUT_CLASSIFICATION	0.9999440075094518	WITHOUT_CLASSIFICATION	5.5992490548248576E-5	DESIGN
// or BYTE // or TEXT? // or MONEY	WITHOUT_CLASSIFICATION	0.9994892733814917	WITHOUT_CLASSIFICATION	5.107266185082495E-4	DESIGN
// strip table-owner because Informix always returns constraint names as "<table-owner>.<constraint-name>"	WITHOUT_CLASSIFICATION	0.9999988607883317	WITHOUT_CLASSIFICATION	1.1392116683458675E-6	DESIGN
// build the map of standard ANSI SQL aggregation functions ~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999970503093585	WITHOUT_CLASSIFICATION	2.949690641526375E-6	DESIGN
//pre H3.2 behavior: super.getReturnType(ct, m);	WITHOUT_CLASSIFICATION	0.9999259027455896	WITHOUT_CLASSIFICATION	7.409725441042124E-5	DESIGN
// finally use the sqltype if == on Hibernate types did not find a match.	WITHOUT_CLASSIFICATION	0.9996496847251454	WITHOUT_CLASSIFICATION	3.503152748545728E-4	DESIGN
//because numeric can be anything	WITHOUT_CLASSIFICATION	0.9994815587136544	WITHOUT_CLASSIFICATION	5.184412863456024E-4	DESIGN
// constructors and factory methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9982041705125929	WITHOUT_CLASSIFICATION	0.0017958294874070178	DESIGN
// standard sql92 functions (can be overridden by subclasses)	WITHOUT_CLASSIFICATION	0.9999969059604288	WITHOUT_CLASSIFICATION	3.0940395712102632E-6	DESIGN
//map second/minute/hour/day/month/year to ANSI extract(), override on subclasses	WITHOUT_CLASSIFICATION	0.999850408987573	WITHOUT_CLASSIFICATION	1.49591012427001E-4	DESIGN
// register hibernate types for default use in scalar sqlquery type auto detection	WITHOUT_CLASSIFICATION	0.9995744574337702	WITHOUT_CLASSIFICATION	4.255425662298196E-4	DESIGN
// database type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999747192222713	WITHOUT_CLASSIFICATION	2.5280777728658403E-5	DESIGN
// hibernate type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998204343360528	WITHOUT_CLASSIFICATION	1.7956566394725727E-4	DESIGN
// keyword support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998955610111415	WITHOUT_CLASSIFICATION	1.0443898885849184E-4	DESIGN
// native identifier generatiion ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999995404975839	WITHOUT_CLASSIFICATION	4.59502416094133E-6	DESIGN
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999180747988318	WITHOUT_CLASSIFICATION	8.192520116824756E-5	DESIGN
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998991107448235	WITHOUT_CLASSIFICATION	1.0088925517645824E-4	DESIGN
// GUID support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998438796380004	WITHOUT_CLASSIFICATION	1.5612036199965827E-4	DESIGN
// limit/offset support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999849025488858	WITHOUT_CLASSIFICATION	1.5097451114178491E-5	DESIGN
// by default we report no support	WITHOUT_CLASSIFICATION	0.999937529247485	WITHOUT_CLASSIFICATION	6.24707525149326E-5	DESIGN
// by default we report no support for NOWAIT lock semantics	WITHOUT_CLASSIFICATION	0.9999455046892411	WITHOUT_CLASSIFICATION	5.449531075895541E-5	DESIGN
// table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999968994584179	WITHOUT_CLASSIFICATION	3.10054158210176E-5	DESIGN
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999157105956135	WITHOUT_CLASSIFICATION	8.428940438659334E-5	DESIGN
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992326155195095	WITHOUT_CLASSIFICATION	7.673844804905047E-4	DESIGN
// current timestamp support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999916519875576	WITHOUT_CLASSIFICATION	8.348012442314423E-6	DESIGN
// SQLException support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996112979410505	WITHOUT_CLASSIFICATION	3.88702058949563E-4	DESIGN
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998672282544631	WITHOUT_CLASSIFICATION	1.327717455369368E-4	DESIGN
// identifier quoting support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999776748653052	WITHOUT_CLASSIFICATION	2.2325134694807083E-5	DESIGN
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999472622675089	WITHOUT_CLASSIFICATION	5.273773249115831E-5	DESIGN
// grrr... for differentiation of mysql storage engines	WITHOUT_CLASSIFICATION	0.9999987884276405	WITHOUT_CLASSIFICATION	1.2115723595573644E-6	DESIGN
// Informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999895433624355	WITHOUT_CLASSIFICATION	1.0456637564441598E-5	DESIGN
// return false here, as most databases do not properly support this construct...	WITHOUT_CLASSIFICATION	0.9991753277801695	WITHOUT_CLASSIFICATION	8.246722198305249E-4	DESIGN
// Mckoi has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9993816783189364	WITHOUT_CLASSIFICATION	6.183216810636226E-4	DESIGN
// Oracle8 and previous define only a "DATE" type which //      is used to represent all aspects of date/time	WITHOUT_CLASSIFICATION	0.9998916917018107	WITHOUT_CLASSIFICATION	1.0830829818920802E-4	DESIGN
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999694429461405	WITHOUT_CLASSIFICATION	3.0557053859525915E-5	DESIGN
//" cascade";	WITHOUT_CLASSIFICATION	0.998759280537262	WITHOUT_CLASSIFICATION	0.001240719462737944	DESIGN
//trim off the length/precision/scale	WITHOUT_CLASSIFICATION	0.9999739246575405	WITHOUT_CLASSIFICATION	2.6075342459391994E-5	DESIGN
/*public boolean dropTemporaryTableAfterUse() {	WITHOUT_CLASSIFICATION	0.9991110982227074	WITHOUT_CLASSIFICATION	8.889017772926823E-4	DESIGN
// CHECK VIOLATION	WITHOUT_CLASSIFICATION	0.9998322602997589	WITHOUT_CLASSIFICATION	1.677397002410979E-4	DESIGN
// UNIQUE VIOLATION	WITHOUT_CLASSIFICATION	0.9993950511068628	WITHOUT_CLASSIFICATION	6.049488931371799E-4	DESIGN
// FOREIGN KEY VIOLATION	WITHOUT_CLASSIFICATION	0.999767919609967	WITHOUT_CLASSIFICATION	2.320803900329367E-4	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999943396600975	WITHOUT_CLASSIFICATION	5.6603399024099825E-6	DESIGN
// NOT NULL VIOLATION	WITHOUT_CLASSIFICATION	0.9996806342579935	WITHOUT_CLASSIFICATION	3.193657420064446E-4	DESIGN
// ALL OTHER	WITHOUT_CLASSIFICATION	0.9998416736710701	WITHOUT_CLASSIFICATION	1.5832632892986582E-4	DESIGN
// Register the type of the out param - PostgreSQL uses Types.OTHER	WITHOUT_CLASSIFICATION	0.9999650815641399	WITHOUT_CLASSIFICATION	3.49184358600531E-5	DESIGN
// seems to not really... //	WITHOUT_CLASSIFICATION	0.9998224052611564	WITHOUT_CLASSIFICATION	1.7759473884366373E-4	DESIGN
// seems to have spotty LOB suppport	WITHOUT_CLASSIFICATION	0.9999528122844561	WITHOUT_CLASSIFICATION	4.7187715543975926E-5	DESIGN
// HHH-2300	WITHOUT_CLASSIFICATION	0.9998199275881929	WITHOUT_CLASSIFICATION	1.8007241180698733E-4	DESIGN
// ignore (probably H2 not in the classpath)	WITHOUT_CLASSIFICATION	0.9999837136559746	WITHOUT_CLASSIFICATION	1.62863440253167E-5	DESIGN
// Numeric Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999817350379921	WITHOUT_CLASSIFICATION	1.8264962007860718E-5	DESIGN
// String Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999720240961449	WITHOUT_CLASSIFICATION	2.797590385506883E-5	DESIGN
// Time and Date Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998326366665945	WITHOUT_CLASSIFICATION	1.6736333340544989E-4	DESIGN
// System Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999396933946648	WITHOUT_CLASSIFICATION	6.030660533504495E-5	DESIGN
// not null is implicit	WITHOUT_CLASSIFICATION	0.9994324774644483	WITHOUT_CLASSIFICATION	5.675225355517169E-4	DESIGN
// 23000: Check constraint violation: {0} // 23001: Unique index or primary key violation: {0}	WITHOUT_CLASSIFICATION	0.9999986397072523	WITHOUT_CLASSIFICATION	1.3602927476848835E-6	DESIGN
// Display the dialect version.	WITHOUT_CLASSIFICATION	0.999998406029099	WITHOUT_CLASSIFICATION	1.5939709010613577E-6	DESIGN
// The RDMS concat() function only supports 2 parameters	WITHOUT_CLASSIFICATION	0.9995746577017773	WITHOUT_CLASSIFICATION	4.2534229822263983E-4	DESIGN
// Dialect method overrides ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999867050793323	WITHOUT_CLASSIFICATION	1.329492066764865E-5	DESIGN
// Original Dialect.java returns " for update";	WITHOUT_CLASSIFICATION	0.999994183654491	WITHOUT_CLASSIFICATION	5.816345508981388E-6	DESIGN
// Verify the state of this new method in Hibernate 3.0 Dialect.java	WITHOUT_CLASSIFICATION	0.9996091721219463	WITHOUT_CLASSIFICATION	3.908278780536524E-4	DESIGN
// Origial Dialect.java returns true;	WITHOUT_CLASSIFICATION	0.9999953449796329	WITHOUT_CLASSIFICATION	4.655020367129873E-6	DESIGN
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9985656031663918	WITHOUT_CLASSIFICATION	0.0014343968336081973	DESIGN
// *** Sequence methods - start. The RDMS dialect needs these	WITHOUT_CLASSIFICATION	0.9993272517658753	WITHOUT_CLASSIFICATION	6.727482341247863E-4	DESIGN
// methods to make it possible to use the Native Id generator	WITHOUT_CLASSIFICATION	0.9997338242797505	WITHOUT_CLASSIFICATION	2.6617572024949E-4	DESIGN
// The where clause was added to eliminate this statement from Brute Force Searches.	WITHOUT_CLASSIFICATION	0.9947114781965141	WITHOUT_CLASSIFICATION	0.005288521803485994	DESIGN
// *** Sequence methods - end	WITHOUT_CLASSIFICATION	0.9986919235458396	WITHOUT_CLASSIFICATION	0.0013080764541604218	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999943396600975	WITHOUT_CLASSIFICATION	5.6603399024099825E-6	DESIGN
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999694429461405	WITHOUT_CLASSIFICATION	3.0557053859525915E-5	DESIGN
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.9918039810565209	WITHOUT_CLASSIFICATION	0.008196018943479098	DESIGN
// Used with DROP TABLE to delete all records in the table.	WITHOUT_CLASSIFICATION	0.9978652103846742	WITHOUT_CLASSIFICATION	0.002134789615325777	DESIGN
// RDMS supports the UNION ALL clause.	WITHOUT_CLASSIFICATION	0.9993647691852985	WITHOUT_CLASSIFICATION	6.352308147015899E-4	DESIGN
// RDMS has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9914747627711378	WITHOUT_CLASSIFICATION	0.008525237228862228	DESIGN
// Multi-param dialect functions...	WITHOUT_CLASSIFICATION	0.9999931651753571	WITHOUT_CLASSIFICATION	6.834824642973405E-6	DESIGN
// function templates	WITHOUT_CLASSIFICATION	0.9999699614977038	WITHOUT_CLASSIFICATION	3.003850229620964E-5	DESIGN
//not null is implicit	WITHOUT_CLASSIFICATION	0.9961952437385365	WITHOUT_CLASSIFICATION	0.0038047562614633625	DESIGN
// this assumes schema support, which is present in 1.8.0 and later...	WITHOUT_CLASSIFICATION	0.9972727973615776	WITHOUT_CLASSIFICATION	0.002727202638422305	DESIGN
// HSQLDB only supports READ_UNCOMMITTED transaction isolation	WITHOUT_CLASSIFICATION	0.9998427259353341	WITHOUT_CLASSIFICATION	1.572740646658271E-4	DESIGN
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999938439525409	WITHOUT_CLASSIFICATION	6.156047459188537E-6	DESIGN
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9999852354353009	WITHOUT_CLASSIFICATION	1.4764564698983588E-5	DESIGN
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999924372764601	WITHOUT_CLASSIFICATION	7.562723539878995E-6	DESIGN
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999986901604054	WITHOUT_CLASSIFICATION	1.3098395945734972E-6	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999943396600975	WITHOUT_CLASSIFICATION	5.6603399024099825E-6	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999943396600975	WITHOUT_CLASSIFICATION	5.6603399024099825E-6	DESIGN
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9996644021465579	WITHOUT_CLASSIFICATION	3.355978534420619E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9992342288671854	WITHOUT_CLASSIFICATION	7.657711328146887E-4	DESIGN
// TimesTen has no BLOB/CLOB support, but these types may be suitable  // for some applications. The length is limited to 4 million bytes.	WITHOUT_CLASSIFICATION	0.9999923616087342	WITHOUT_CLASSIFICATION	7.638391265777836E-6	DESIGN
// new methods in dialect3	WITHOUT_CLASSIFICATION	0.999460632533874	WITHOUT_CLASSIFICATION	5.39367466125925E-4	DESIGN
/*public boolean supportsForUpdateNowait() {	WITHOUT_CLASSIFICATION	0.9999227344884476	WITHOUT_CLASSIFICATION	7.7265511552396E-5	DESIGN
// TimesTen has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9994023163530117	WITHOUT_CLASSIFICATION	5.97683646988258E-4	DESIGN
// iterate entries ordered by capacity to find first fit	WITHOUT_CLASSIFICATION	0.9999968416933567	WITHOUT_CLASSIFICATION	3.158306643271809E-6	DESIGN
// add new ordered map	WITHOUT_CLASSIFICATION	0.9999941917920473	WITHOUT_CLASSIFICATION	5.8082079527098E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.9992342288671854	WITHOUT_CLASSIFICATION	7.657711328146887E-4	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999943396600975	WITHOUT_CLASSIFICATION	5.6603399024099825E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.9992342288671854	WITHOUT_CLASSIFICATION	7.657711328146887E-4	DESIGN
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999571150099297	WITHOUT_CLASSIFICATION	4.28849900704334E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9992342288671854	WITHOUT_CLASSIFICATION	7.657711328146887E-4	DESIGN
//registerColumnType data types	WITHOUT_CLASSIFICATION	0.9999701452475008	WITHOUT_CLASSIFICATION	2.9854752499119202E-5	DESIGN
// hibernate seems to ignore this type...	WITHOUT_CLASSIFICATION	0.9996621536178507	WITHOUT_CLASSIFICATION	3.378463821492865E-4	DESIGN
// IBID for current_time and current_date	WITHOUT_CLASSIFICATION	0.9999919678971776	WITHOUT_CLASSIFICATION	8.032102822391256E-6	DESIGN
// Tell hibernate to use getBytes instead of getBinaryStream	WITHOUT_CLASSIFICATION	0.9352269827319413	WITHOUT_CLASSIFICATION	0.06477301726805867	DESIGN
// No batch statements	WITHOUT_CLASSIFICATION	0.9999774665684942	WITHOUT_CLASSIFICATION	2.2533431505816236E-5	DESIGN
/*	WITHOUT_CLASSIFICATION	0.9964298771530864	WITHOUT_CLASSIFICATION	0.0035701228469137494	DESIGN
//no pointbase BIT	WITHOUT_CLASSIFICATION	0.999831712262486	WITHOUT_CLASSIFICATION	1.682877375139748E-4	DESIGN
//no pointbase TINYINT	WITHOUT_CLASSIFICATION	0.999806972031031	WITHOUT_CLASSIFICATION	1.9302796896903724E-4	DESIGN
// Pointbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9998881376978741	WITHOUT_CLASSIFICATION	1.1186230212594707E-4	DESIGN
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999694429461405	WITHOUT_CLASSIFICATION	3.0557053859525915E-5	DESIGN
// The current_timestamp is more accurate, but only known to be supported // in SQL Server 7.0 and later (i.e., Sybase not known to support it at all)	WITHOUT_CLASSIFICATION	0.9999989538743908	WITHOUT_CLASSIFICATION	1.0461256092226863E-6	DESIGN
// SQL Server (at least up through 2005) does not support defining // cascade delete constraints which can circel back to the mutating // table	WITHOUT_CLASSIFICATION	0.9991296977477269	WITHOUT_CLASSIFICATION	8.70302252273214E-4	DESIGN
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.8947155321648288	WITHOUT_CLASSIFICATION	0.10528446783517124	DESIGN
//	WITHOUT_CLASSIFICATION	0.9992342288671854	WITHOUT_CLASSIFICATION	7.657711328146887E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9992342288671854	WITHOUT_CLASSIFICATION	7.657711328146887E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9992342288671854	WITHOUT_CLASSIFICATION	7.657711328146887E-4	DESIGN
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999694429461405	WITHOUT_CLASSIFICATION	3.0557053859525915E-5	DESIGN
/* package-private */	WITHOUT_CLASSIFICATION	0.9999618232028379	WITHOUT_CLASSIFICATION	3.817679716201727E-5	DESIGN
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999571150099297	WITHOUT_CLASSIFICATION	4.28849900704334E-5	DESIGN
//Sybase BIT type does not support null values	WITHOUT_CLASSIFICATION	0.9979089422553503	WITHOUT_CLASSIFICATION	0.002091057744649645	DESIGN
//	WITHOUT_CLASSIFICATION	0.9992342288671854	WITHOUT_CLASSIFICATION	7.657711328146887E-4	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999943396600975	WITHOUT_CLASSIFICATION	5.6603399024099825E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.9992342288671854	WITHOUT_CLASSIFICATION	7.657711328146887E-4	DESIGN
//not null ... (start with 1) is implicit	WITHOUT_CLASSIFICATION	0.999625555699377	WITHOUT_CLASSIFICATION	3.744443006229649E-4	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999943396600975	WITHOUT_CLASSIFICATION	5.6603399024099825E-6	DESIGN
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.999986113239241	WITHOUT_CLASSIFICATION	1.3886760758978129E-5	DESIGN
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999938439525409	WITHOUT_CLASSIFICATION	6.156047459188537E-6	DESIGN
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9999852354353009	WITHOUT_CLASSIFICATION	1.4764564698983588E-5	DESIGN
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999924372764601	WITHOUT_CLASSIFICATION	7.562723539878995E-6	DESIGN
// add another (inner) nested select // add the main query // close off the inner nested select	WITHOUT_CLASSIFICATION	0.999999675879006	WITHOUT_CLASSIFICATION	3.2412099405275244E-7	DESIGN
// add the main query	WITHOUT_CLASSIFICATION	0.9999948796107462	WITHOUT_CLASSIFICATION	5.120389253879435E-6	DESIGN
//add the restriction to the outer select	WITHOUT_CLASSIFICATION	0.9999914416845047	WITHOUT_CLASSIFICATION	8.558315495244694E-6	DESIGN
// This assumes you will want to ignore any update counts 	WITHOUT_CLASSIFICATION	0.9990624388534837	WITHOUT_CLASSIFICATION	9.375611465162767E-4	DESIGN
// You may still have other ResultSets or update counts left to process here  // but you can't do it now or the ResultSet you just got will be closed 	WITHOUT_CLASSIFICATION	0.9999729316040984	WITHOUT_CLASSIFICATION	2.706839590162182E-5	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999943396600975	WITHOUT_CLASSIFICATION	5.6603399024099825E-6	DESIGN
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999694429461405	WITHOUT_CLASSIFICATION	3.0557053859525915E-5	DESIGN
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999986901604054	WITHOUT_CLASSIFICATION	1.3098395945734972E-6	DESIGN
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9996644021465579	WITHOUT_CLASSIFICATION	3.355978534420619E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9992342288671854	WITHOUT_CLASSIFICATION	7.657711328146887E-4	DESIGN
// features which change between 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999526042869821	WITHOUT_CLASSIFICATION	4.739571301793524E-5	DESIGN
// features which remain constant across 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999857667333331	WITHOUT_CLASSIFICATION	1.4233266666917928E-5	DESIGN
// binary %Stream // character %Stream	WITHOUT_CLASSIFICATION	0.9999933459442113	WITHOUT_CLASSIFICATION	6.654055788729373E-6	DESIGN
//getDefaultProperties().setProperty(Environment.STATEMENT_BATCH_SIZE, NO_BATCH);	WITHOUT_CLASSIFICATION	0.9999244565674328	WITHOUT_CLASSIFICATION	7.554343256713344E-5	DESIGN
// hibernate impelemnts cast in Dialect.java	WITHOUT_CLASSIFICATION	0.9999540667822427	WITHOUT_CLASSIFICATION	4.59332177571753E-5	DESIGN
// aggregate functions shouldn't be registered, right? //registerFunction( "list", new StandardSQLFunction("list",Hibernate.STRING) ); // stopped on $list	WITHOUT_CLASSIFICATION	0.9994336050257999	WITHOUT_CLASSIFICATION	5.663949741999892E-4	DESIGN
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999472622675089	WITHOUT_CLASSIFICATION	5.273773249115831E-5	DESIGN
// below is for Cache' that don't have str in 2007.1 there is str and we register str directly	WITHOUT_CLASSIFICATION	0.999996872052532	WITHOUT_CLASSIFICATION	3.127947468058526E-6	DESIGN
// note that %string is deprecated	WITHOUT_CLASSIFICATION	0.998982047997277	WITHOUT_CLASSIFICATION	0.0010179520027231174	DESIGN
// %upper is deprecated	WITHOUT_CLASSIFICATION	0.9993479002604578	WITHOUT_CLASSIFICATION	6.520997395421037E-4	DESIGN
// The syntax used to add a foreign key constraint to a table.	WITHOUT_CLASSIFICATION	0.9999764135165289	WITHOUT_CLASSIFICATION	2.358648347113943E-5	DESIGN
// identifier-commalist	WITHOUT_CLASSIFICATION	0.9999963678422865	WITHOUT_CLASSIFICATION	3.632157713599487E-6	DESIGN
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999180747988318	WITHOUT_CLASSIFICATION	8.192520116824756E-5	DESIGN
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998991107448235	WITHOUT_CLASSIFICATION	1.0088925517645824E-4	DESIGN
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999157105956135	WITHOUT_CLASSIFICATION	8.428940438659334E-5	DESIGN
// identifier-commalist	WITHOUT_CLASSIFICATION	0.9999963678422865	WITHOUT_CLASSIFICATION	3.632157713599487E-6	DESIGN
// The syntax used to add a column to a table	WITHOUT_CLASSIFICATION	0.9993548704653726	WITHOUT_CLASSIFICATION	6.451295346273861E-4	DESIGN
// Completely optional cascading drop clause.	WITHOUT_CLASSIFICATION	0.9999695502502333	WITHOUT_CLASSIFICATION	3.0449749766694357E-5	DESIGN
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999636694208288	WITHOUT_CLASSIFICATION	3.633057917109751E-5	DESIGN
// LIMIT support (ala TOP) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993732983538813	WITHOUT_CLASSIFICATION	6.26701646118638E-4	DESIGN
// InterSystems Cache' does not current support "SELECT ... FOR UPDATE" syntax... // Set your transaction mode to READ_COMMITTED before using	WITHOUT_CLASSIFICATION	0.9999819691972444	WITHOUT_CLASSIFICATION	1.8030802755682052E-5	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999943396600975	WITHOUT_CLASSIFICATION	5.6603399024099825E-6	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999943396600975	WITHOUT_CLASSIFICATION	5.6603399024099825E-6	DESIGN
/*<String>*/	WITHOUT_CLASSIFICATION	0.9998582084307709	WITHOUT_CLASSIFICATION	1.4179156922900998E-4	DESIGN
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992326155195095	WITHOUT_CLASSIFICATION	7.673844804905047E-4	DESIGN
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998672282544631	WITHOUT_CLASSIFICATION	1.327717455369368E-4	DESIGN
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9985656031663918	WITHOUT_CLASSIFICATION	0.0014343968336081973	DESIGN
// Does the LIMIT clause come at the start of the SELECT statement, rather than at the end?	WITHOUT_CLASSIFICATION	0.9971466773575212	WITHOUT_CLASSIFICATION	0.002853322642478823	DESIGN
// Does the LIMIT clause take a "maximum" row number instead of a total number of returned rows?	WITHOUT_CLASSIFICATION	0.9934982716818513	WITHOUT_CLASSIFICATION	0.0065017283181486325	DESIGN
// The name of the SQL function that transforms a string to lowercase	WITHOUT_CLASSIFICATION	0.9999611275677015	WITHOUT_CLASSIFICATION	3.8872432298476194E-5	DESIGN
// Create an OuterJoinGenerator for this dialect.	WITHOUT_CLASSIFICATION	0.999970136643499	WITHOUT_CLASSIFICATION	2.986335650089954E-5	DESIGN
// The keyword used to insert a row without specifying // any column values	WITHOUT_CLASSIFICATION	0.9985214870249303	WITHOUT_CLASSIFICATION	0.001478512975069822	DESIGN
//registerFunction( "trim", new StandardSQLFunction( "trim", Hibernate.STRING ) );	WITHOUT_CLASSIFICATION	0.9999739972466655	WITHOUT_CLASSIFICATION	2.6002753334504864E-5	DESIGN
//skip the FROM keyword in params	WITHOUT_CLASSIFICATION	0.9999457587702101	WITHOUT_CLASSIFICATION	5.424122978989189E-5	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.9991752457914114	WITHOUT_CLASSIFICATION	8.247542085885454E-4	DESIGN
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999601338829962	WITHOUT_CLASSIFICATION	3.9866117003835325E-5	DESIGN
// SQLFunction implementation	WITHOUT_CLASSIFICATION	0.9999929922682027	WITHOUT_CLASSIFICATION	7.00773179737975E-6	DESIGN
// conceivable that the dialect ctor could throw HibernateExceptions, so don't re-wrap	WITHOUT_CLASSIFICATION	0.9987166384163397	WITHOUT_CLASSIFICATION	0.0012833615836603364	DESIGN
// register the standard dialect resolver	WITHOUT_CLASSIFICATION	0.9999981384055658	WITHOUT_CLASSIFICATION	1.861594434223323E-6	DESIGN
// register resolvers set via Environment property	WITHOUT_CLASSIFICATION	0.9999974510353505	WITHOUT_CLASSIFICATION	2.548964649479872E-6	DESIGN
// kept for backward compatibility until after the 3.1beta5 release of HA	WITHOUT_CLASSIFICATION	0.9999961028347103	WITHOUT_CLASSIFICATION	3.897165289717675E-6	DESIGN
//cache the hashcode	WITHOUT_CLASSIFICATION	0.9962769514430353	WITHOUT_CLASSIFICATION	0.0037230485569646676	DESIGN
// the CascadingAction contract ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999796933680968	WITHOUT_CLASSIFICATION	2.0306631903220666E-5	DESIGN
// the CascadingAction implementations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999876344456602	WITHOUT_CLASSIFICATION	1.2365554339723507E-5	DESIGN
// delete does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999303573577177	WITHOUT_CLASSIFICATION	6.964264228228718E-5	DESIGN
// orphans should be deleted during delete	WITHOUT_CLASSIFICATION	0.999832967683343	WITHOUT_CLASSIFICATION	1.6703231665705717E-4	DESIGN
/*(LockMode) anything*/	WITHOUT_CLASSIFICATION	0.998663202281946	WITHOUT_CLASSIFICATION	0.0013367977180539679	DESIGN
// lock doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999034726842613	WITHOUT_CLASSIFICATION	9.652731573867654E-5	DESIGN
// refresh doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999630260567075	WITHOUT_CLASSIFICATION	3.697394329259943E-5	DESIGN
// evicts don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999794791608373	WITHOUT_CLASSIFICATION	2.0520839162691456E-5	DESIGN
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999816054315432	WITHOUT_CLASSIFICATION	1.83945684567177E-5	DESIGN
// orphans should be deleted during save/update	WITHOUT_CLASSIFICATION	0.9999194103835328	WITHOUT_CLASSIFICATION	8.058961646717228E-5	DESIGN
// for deprecated saveOrUpdateCopy()	WITHOUT_CLASSIFICATION	0.9999595500483196	WITHOUT_CLASSIFICATION	4.044995168048481E-5	DESIGN
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.999995674254031	WITHOUT_CLASSIFICATION	4.325745969011823E-6	DESIGN
//a proxy cannot be transient and it breaks ForeignKeys.isTransient	WITHOUT_CLASSIFICATION	0.9999861522137066	WITHOUT_CLASSIFICATION	1.3847786293364769E-5	DESIGN
// replicate does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999795324984648	WITHOUT_CLASSIFICATION	2.0467501535187813E-5	DESIGN
// static helper methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999475956716047	WITHOUT_CLASSIFICATION	5.240432839533086E-5	DESIGN
// handles arrays and newly instantiated collections	WITHOUT_CLASSIFICATION	0.9999979789289147	WITHOUT_CLASSIFICATION	2.0210710852669514E-6	DESIGN
// Actually the semantics of the next three are really "Bag" // Note that, unlike objects, collection insertions, updates, // deletions are not really remembered between flushes. We // just re-use the same Lists for convenience.	WITHOUT_CLASSIFICATION	0.9999998310638671	WITHOUT_CLASSIFICATION	1.689361329221499E-7	DESIGN
// Add these directly to the executions queue	WITHOUT_CLASSIFICATION	0.9999998584813427	WITHOUT_CLASSIFICATION	1.4151865728098082E-7	DESIGN
// continue loop	WITHOUT_CLASSIFICATION	0.9999459404138517	WITHOUT_CLASSIFICATION	5.4059586148397585E-5	DESIGN
//sort the updates by fk	WITHOUT_CLASSIFICATION	0.9996720937708412	WITHOUT_CLASSIFICATION	3.279062291587347E-4	DESIGN
//sort the updates by pk	WITHOUT_CLASSIFICATION	0.9998324453306926	WITHOUT_CLASSIFICATION	1.6755466930746304E-4	DESIGN
// the mapping of entity names to their latest batch numbers.	WITHOUT_CLASSIFICATION	0.9999995909593502	WITHOUT_CLASSIFICATION	4.090406497350193E-7	DESIGN
// the map of batch numbers to EntityInsertAction lists	WITHOUT_CLASSIFICATION	0.9999994682794848	WITHOUT_CLASSIFICATION	5.317205151085291E-7	DESIGN
//optimize the hash size to eliminate a rehash.	WITHOUT_CLASSIFICATION	0.9993604268790546	WITHOUT_CLASSIFICATION	6.395731209455277E-4	DESIGN
// the list of entity names that indicate the batch number	WITHOUT_CLASSIFICATION	0.999987025646751	WITHOUT_CLASSIFICATION	1.2974353248885883E-5	DESIGN
// remove the current element from insertions. It will be added back later.	WITHOUT_CLASSIFICATION	0.9993963561223123	WITHOUT_CLASSIFICATION	6.036438776878037E-4	DESIGN
// the entity associated with the current action.	WITHOUT_CLASSIFICATION	0.9999996745405431	WITHOUT_CLASSIFICATION	3.2545945691644025E-7	DESIGN
// There is already an existing batch for this type of entity. // Check to see if the latest batch is acceptable.	WITHOUT_CLASSIFICATION	0.9999886624995694	WITHOUT_CLASSIFICATION	1.1337500430492084E-5	DESIGN
// now rebuild the insertions list. There is a batch for each entry in the name list.	WITHOUT_CLASSIFICATION	0.999996252818793	WITHOUT_CLASSIFICATION	3.747181206890845E-6	DESIGN
// the current batch number is the latest batch for this entity type.	WITHOUT_CLASSIFICATION	0.9999981530377814	WITHOUT_CLASSIFICATION	1.8469622186045187E-6	DESIGN
// loop through all the associations of the current entity and make sure that they are processed // before the current batch number	WITHOUT_CLASSIFICATION	0.9999979570663012	WITHOUT_CLASSIFICATION	2.042933698802885E-6	DESIGN
// find the batch number associated with the current association, if any.	WITHOUT_CLASSIFICATION	0.9999986077136076	WITHOUT_CLASSIFICATION	1.3922863924914783E-6	DESIGN
// create a new batch for this type. The batch number is the number of current batches.	WITHOUT_CLASSIFICATION	0.9999774596274845	WITHOUT_CLASSIFICATION	2.254037251545904E-5	DESIGN
// loop through all the associated entities and make sure they have been // processed before the latest // batch associated with this entity type.	WITHOUT_CLASSIFICATION	0.9999183640044748	WITHOUT_CLASSIFICATION	8.163599552525156E-5	DESIGN
// since this entity will now be processed in the latest possible batch, // we can be assured that it will come after all other associations, // there's not need to continue checking.	WITHOUT_CLASSIFICATION	0.9999517528406087	WITHOUT_CLASSIFICATION	4.8247159391350874E-5	DESIGN
//cascade to current collection elements	WITHOUT_CLASSIFICATION	0.9999765206097299	WITHOUT_CLASSIFICATION	2.3479390270161552E-5	DESIGN
//not really necessary, but good for consistency...	WITHOUT_CLASSIFICATION	0.9986983940861223	WITHOUT_CLASSIFICATION	0.0013016059138777835	DESIGN
// we can't cascade to non-embedded elements	WITHOUT_CLASSIFICATION	0.9999484129228353	WITHOUT_CLASSIFICATION	5.1587077164667335E-5	DESIGN
//a newly instantiated collection can't have orphans	WITHOUT_CLASSIFICATION	0.9999967309112678	WITHOUT_CLASSIFICATION	3.269088732193038E-6	DESIGN
// handle orphaned entities!!	WITHOUT_CLASSIFICATION	0.9999807693633725	WITHOUT_CLASSIFICATION	1.923063662745577E-5	DESIGN
// Loaded entity instances, by EntityUniqueKey	WITHOUT_CLASSIFICATION	0.9999898065825457	WITHOUT_CLASSIFICATION	1.0193417454297879E-5	DESIGN
// Identity map of EntityEntry instances, by the entity instance	WITHOUT_CLASSIFICATION	0.9999993285830016	WITHOUT_CLASSIFICATION	6.714169984303095E-7	DESIGN
// Entity proxies, by EntityKey	WITHOUT_CLASSIFICATION	0.999983863529434	WITHOUT_CLASSIFICATION	1.613647056596237E-5	DESIGN
// Snapshots of current database state for entities // that have *not* been loaded	WITHOUT_CLASSIFICATION	0.9999984801198329	WITHOUT_CLASSIFICATION	1.5198801669551509E-6	DESIGN
// Identity map of array holder ArrayHolder instances, by the array instance	WITHOUT_CLASSIFICATION	0.9999985167313619	WITHOUT_CLASSIFICATION	1.4832686380640916E-6	DESIGN
// Collection wrappers, by the CollectionKey //key=CollectionKey, value=PersistentCollection	WITHOUT_CLASSIFICATION	0.9999998092508586	WITHOUT_CLASSIFICATION	1.907491412979356E-7	DESIGN
// Set of EntityKeys of deleted objects	WITHOUT_CLASSIFICATION	0.9999860324712041	WITHOUT_CLASSIFICATION	1.3967528795993247E-5	DESIGN
// properties that we have tried to load, and not found in the database	WITHOUT_CLASSIFICATION	0.999980217486003	WITHOUT_CLASSIFICATION	1.9782513997096423E-5	DESIGN
// A list of collection wrappers that were instantiating during result set // processing, that we will need to initialize at the end of the query	WITHOUT_CLASSIFICATION	0.9999998412523782	WITHOUT_CLASSIFICATION	1.5874762174468994E-7	DESIGN
// A container for collections we load up when the owning entity is not // yet loaded ... for now, this is purely transient!	WITHOUT_CLASSIFICATION	0.9999445034120463	WITHOUT_CLASSIFICATION	5.549658795373538E-5	DESIGN
// Downgrade locks	WITHOUT_CLASSIFICATION	0.9999562018068742	WITHOUT_CLASSIFICATION	4.3798193125943165E-5	DESIGN
// any earlier proxy takes precedence	WITHOUT_CLASSIFICATION	0.9999961167864195	WITHOUT_CLASSIFICATION	3.883213580392134E-6	DESIGN
//unwrap the object	WITHOUT_CLASSIFICATION	0.9999780143299377	WITHOUT_CLASSIFICATION	2.1985670062282146E-5	DESIGN
//initialize + unwrap the object	WITHOUT_CLASSIFICATION	0.9999882514752413	WITHOUT_CLASSIFICATION	1.174852475872461E-5	DESIGN
//return the proxied object	WITHOUT_CLASSIFICATION	0.9999438003774943	WITHOUT_CLASSIFICATION	5.619962250571592E-5	DESIGN
//overwrite old proxy	WITHOUT_CLASSIFICATION	0.9998295325077206	WITHOUT_CLASSIFICATION	1.7046749227937836E-4	DESIGN
// early exit...	WITHOUT_CLASSIFICATION	0.999992445587695	WITHOUT_CLASSIFICATION	7.5544123050072355E-6	DESIGN
// or should it actually throw an exception?	WITHOUT_CLASSIFICATION	0.9931169874319771	WITHOUT_CLASSIFICATION	0.006883012568022828	DESIGN
//treat it just like a new collection	WITHOUT_CLASSIFICATION	0.9999837956260267	WITHOUT_CLASSIFICATION	1.6204373973381596E-5	DESIGN
//do this work only at the very highest level of the load //don't let this method be called recursively	WITHOUT_CLASSIFICATION	0.9838538061544481	WITHOUT_CLASSIFICATION	0.01614619384555194	DESIGN
//note that each iteration of the loop may add new elements	WITHOUT_CLASSIFICATION	0.9999712441715259	WITHOUT_CLASSIFICATION	2.8755828473993413E-5	DESIGN
//it might be an unwrapped collection reference! //try to find a wrapper (slowish)	WITHOUT_CLASSIFICATION	0.9996875624401744	WITHOUT_CLASSIFICATION	3.124375598256271E-4	DESIGN
/*public boolean isNonExistant(EntityKey key) {	WITHOUT_CLASSIFICATION	0.9999687078494645	WITHOUT_CLASSIFICATION	3.129215053557464E-5	DESIGN
/*public boolean isNonExistant(EntityUniqueKey key) {	WITHOUT_CLASSIFICATION	0.9999536804552517	WITHOUT_CLASSIFICATION	4.631954474831944E-5	DESIGN
// iterate all the entities currently associated with the persistence context.	WITHOUT_CLASSIFICATION	0.9999984601733247	WITHOUT_CLASSIFICATION	1.539826675272392E-6	DESIGN
// does this entity entry pertain to the entity persister in which we are interested (owner)?	WITHOUT_CLASSIFICATION	0.9999798192747209	WITHOUT_CLASSIFICATION	2.018072527903684E-5	DESIGN
//check if the managed object is the parent	WITHOUT_CLASSIFICATION	0.9999965267934956	WITHOUT_CLASSIFICATION	3.4732065043880067E-6	DESIGN
// otherwise, the proxy was pruned during the serialization process	WITHOUT_CLASSIFICATION	0.9999939170674347	WITHOUT_CLASSIFICATION	6.08293256527824E-6	DESIGN
// adds remove as a sort-of alias for delete...	WITHOUT_CLASSIFICATION	0.9998208125340264	WITHOUT_CLASSIFICATION	1.791874659736847E-4	DESIGN
//bad cast	WITHOUT_CLASSIFICATION	0.9971875439281328	WITHOUT_CLASSIFICATION	0.0028124560718671763	DESIGN
//return lhsPersister.getSubclassPropertyColumnNames(property);	WITHOUT_CLASSIFICATION	0.9999242664046164	WITHOUT_CLASSIFICATION	7.573359538358449E-5	DESIGN
//property-refs for associations defined on a //component are not supported, so no need to slice	WITHOUT_CLASSIFICATION	0.999997880866936	WITHOUT_CLASSIFICATION	2.1191330640005957E-6	DESIGN
//if there is no property-ref, assume the join //is to the subclass table (ie. the table of the //subclass that the association belongs to)	WITHOUT_CLASSIFICATION	0.9999783786465574	WITHOUT_CLASSIFICATION	2.1621353442626588E-5	DESIGN
//handle a property-ref	WITHOUT_CLASSIFICATION	0.9996776063982489	WITHOUT_CLASSIFICATION	3.223936017510434E-4	DESIGN
/*NativeSQLQueryReturn*/	WITHOUT_CLASSIFICATION	0.9998263064574455	WITHOUT_CLASSIFICATION	1.7369354255440374E-4	DESIGN
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.999974536124576	WITHOUT_CLASSIFICATION	2.5463875423974936E-5	DESIGN
// why is all others non final ?	WITHOUT_CLASSIFICATION	0.9995363697431788	WITHOUT_CLASSIFICATION	4.6363025682125456E-4	DESIGN
//this.forceCacheRefresh = forceCacheRefresh;	WITHOUT_CLASSIFICATION	0.9999574068877896	WITHOUT_CLASSIFICATION	4.259311221049909E-5	DESIGN
// HELLA IMPORTANT OPTIMIZATION!!!	WITHOUT_CLASSIFICATION	0.9993424193959582	WITHOUT_CLASSIFICATION	6.575806040417895E-4	DESIGN
/*return that.type.equals(type) && 	WITHOUT_CLASSIFICATION	0.9999600879662	WITHOUT_CLASSIFICATION	3.99120338000796E-5	DESIGN
//Must occur after resolving identifiers!	WITHOUT_CLASSIFICATION	0.9999720980024142	WITHOUT_CLASSIFICATION	2.7901997585969634E-5	DESIGN
//take a snapshot	WITHOUT_CLASSIFICATION	0.9996243977726113	WITHOUT_CLASSIFICATION	3.756022273886711E-4	DESIGN
// do a check	WITHOUT_CLASSIFICATION	0.9999528570909016	WITHOUT_CLASSIFICATION	4.7142909098402654E-5	DESIGN
// the owning entity may have been deleted and its identifier unset due to // identifier-rollback; in which case, try to look up its identifier from // the persistence context	WITHOUT_CLASSIFICATION	0.9999930372200219	WITHOUT_CLASSIFICATION	6.962779978156316E-6	DESIGN
// do the work	WITHOUT_CLASSIFICATION	0.999580773068699	WITHOUT_CLASSIFICATION	4.1922693130095576E-4	DESIGN
// We've been here before	WITHOUT_CLASSIFICATION	0.9999514587232903	WITHOUT_CLASSIFICATION	4.8541276709725074E-5	DESIGN
// it is or was referenced _somewhere_	WITHOUT_CLASSIFICATION	0.9992422150608081	WITHOUT_CLASSIFICATION	7.577849391918346E-4	DESIGN
// do the work	WITHOUT_CLASSIFICATION	0.999580773068699	WITHOUT_CLASSIFICATION	4.1922693130095576E-4	DESIGN
// if either its role changed,	WITHOUT_CLASSIFICATION	0.9999840654957554	WITHOUT_CLASSIFICATION	1.5934504244627488E-5	DESIGN
// or its key changed	WITHOUT_CLASSIFICATION	0.9999681651877736	WITHOUT_CLASSIFICATION	3.183481222626491E-5	DESIGN
// we will need to create new entries	WITHOUT_CLASSIFICATION	0.99999777952267	WITHOUT_CLASSIFICATION	2.2204773300918314E-6	DESIGN
// we will need to remove ye olde entries	WITHOUT_CLASSIFICATION	0.9999847000003264	WITHOUT_CLASSIFICATION	1.5299999673649257E-5	DESIGN
// force initialize!	WITHOUT_CLASSIFICATION	0.9999885192656265	WITHOUT_CLASSIFICATION	1.1480734373471605E-5	DESIGN
// else if it's elements changed	WITHOUT_CLASSIFICATION	0.9999849270795335	WITHOUT_CLASSIFICATION	1.5072920466581373E-5	DESIGN
//ATTRIBUTES MAINTAINED BETWEEN FLUSH CYCLES	WITHOUT_CLASSIFICATION	0.997253005544487	WITHOUT_CLASSIFICATION	0.002746994455512908	DESIGN
// session-start/post-flush persistent state	WITHOUT_CLASSIFICATION	0.9999948197478666	WITHOUT_CLASSIFICATION	5.180252133404101E-6	DESIGN
// allow the CollectionSnapshot to be serialized	WITHOUT_CLASSIFICATION	0.9999953826396708	WITHOUT_CLASSIFICATION	4.617360329175971E-6	DESIGN
// ATTRIBUTES USED ONLY DURING FLUSH CYCLE	WITHOUT_CLASSIFICATION	0.9995852896191961	WITHOUT_CLASSIFICATION	4.147103808038891E-4	DESIGN
// "current" means the reference that was found during flush() 	WITHOUT_CLASSIFICATION	0.9998135302643687	WITHOUT_CLASSIFICATION	1.8646973563125077E-4	DESIGN
// "loaded" means the reference that is consistent  // with the current database state	WITHOUT_CLASSIFICATION	0.9999591353128988	WITHOUT_CLASSIFICATION	4.086468710122252E-5	DESIGN
// during flush, we navigate the object graph to // collections and decide what to do with them	WITHOUT_CLASSIFICATION	0.9999897716698296	WITHOUT_CLASSIFICATION	1.0228330170349466E-5	DESIGN
// if we instantiate a collection during the flush() process, // we must ignore it for the rest of the flush()	WITHOUT_CLASSIFICATION	0.9999873930062565	WITHOUT_CLASSIFICATION	1.2606993743579949E-5	DESIGN
// new collections that get found + wrapped // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999536123634869	WITHOUT_CLASSIFICATION	4.6387636513122186E-5	DESIGN
//a newly wrapped collection is NOT dirty (or we get unnecessary version updates)	WITHOUT_CLASSIFICATION	0.9999735190051563	WITHOUT_CLASSIFICATION	2.6480994843746842E-5	DESIGN
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9999196965889287	WITHOUT_CLASSIFICATION	8.030341107128566E-5	DESIGN
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9999196965889287	WITHOUT_CLASSIFICATION	8.030341107128566E-5	DESIGN
// detached collections that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9997832740791227	WITHOUT_CLASSIFICATION	2.1672592087738148E-4	DESIGN
//optimization	WITHOUT_CLASSIFICATION	0.9996861243010906	WITHOUT_CLASSIFICATION	3.138756989093705E-4	DESIGN
//optimization //optimization	WITHOUT_CLASSIFICATION	0.9997203167746755	WITHOUT_CLASSIFICATION	2.7968322532453873E-4	DESIGN
//re-snapshot	WITHOUT_CLASSIFICATION	0.9998719376067537	WITHOUT_CLASSIFICATION	1.2806239324628194E-4	DESIGN
// for convenience to save some lookups	WITHOUT_CLASSIFICATION	0.999871764187317	WITHOUT_CLASSIFICATION	1.2823581268290557E-4	DESIGN
//NOTE: this is not updated when properties are fetched lazily!	WITHOUT_CLASSIFICATION	0.977012098718354	WITHOUT_CLASSIFICATION	0.022987901281645986	DESIGN
//memory optimization	WITHOUT_CLASSIFICATION	0.9998849409219466	WITHOUT_CLASSIFICATION	1.1505907805346186E-4	DESIGN
// use the id value of a newly instantiated instance as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999975326865522	WITHOUT_CLASSIFICATION	2.4673134478670414E-6	DESIGN
// copied from Session:	WITHOUT_CLASSIFICATION	0.9879065163986889	WITHOUT_CLASSIFICATION	0.012093483601311177	DESIGN
// this should not happen since the DTD prevents it	WITHOUT_CLASSIFICATION	0.9982653528531397	WITHOUT_CLASSIFICATION	0.0017346471468602475	DESIGN
// JoinProcessor needs to know if the where clause fragment came from a dynamic filter or not so it // can put the where clause fragment in the right place in the SQL AST.   'hasFilterCondition' keeps track // of that fact.	WITHOUT_CLASSIFICATION	0.9542318808856427	WITHOUT_CLASSIFICATION	0.04576811911435731	DESIGN
// the current join represents the join between a many-to-many association table // and its "target" table.  Here we need to apply any additional filters // defined specifically on the many-to-many	WITHOUT_CLASSIFICATION	0.9999997232481808	WITHOUT_CLASSIFICATION	2.767518191825805E-7	DESIGN
//check basic level one nullablilty	WITHOUT_CLASSIFICATION	0.9999748094427519	WITHOUT_CLASSIFICATION	2.51905572482064E-5	DESIGN
//values is not null and is checkable, we'll look deeper	WITHOUT_CLASSIFICATION	0.9985442907484886	WITHOUT_CLASSIFICATION	0.0014557092515113705	DESIGN
//for non null args, check for components and elements containing components	WITHOUT_CLASSIFICATION	0.9999877235028893	WITHOUT_CLASSIFICATION	1.2276497110688699E-5	DESIGN
//cache the hashcode	WITHOUT_CLASSIFICATION	0.9962769514430353	WITHOUT_CLASSIFICATION	0.0037230485569646676	DESIGN
//persistent collections may have components	WITHOUT_CLASSIFICATION	0.9999987491820237	WITHOUT_CLASSIFICATION	1.250817976283396E-6	DESIGN
//check for all components values in the collection	WITHOUT_CLASSIFICATION	0.9999927857265968	WITHOUT_CLASSIFICATION	7.214273403149535E-6	DESIGN
/* will check current level if some of them are not null	WITHOUT_CLASSIFICATION	0.9997692958660384	WITHOUT_CLASSIFICATION	2.307041339616291E-4	DESIGN
//do the test	WITHOUT_CLASSIFICATION	0.9998415557939433	WITHOUT_CLASSIFICATION	1.5844420605663865E-4	DESIGN
// if its an uninitialized proxy it can't be transient	WITHOUT_CLASSIFICATION	0.9999971244113712	WITHOUT_CLASSIFICATION	2.8755886287733117E-6	DESIGN
//unwrap it	WITHOUT_CLASSIFICATION	0.9998365382927518	WITHOUT_CLASSIFICATION	1.634617072482052E-4	DESIGN
// See if the entity is already bound to this session, if not look at the // entity identifier and assume that the entity is persistent if the // id is not "unsaved" (that is, we rely on foreign keys to keep // database integrity)	WITHOUT_CLASSIFICATION	0.9999939749311092	WITHOUT_CLASSIFICATION	6.0250688907474495E-6	DESIGN
// an unfetched association can only point to // an entity that already exists in the db	WITHOUT_CLASSIFICATION	0.9999996231356413	WITHOUT_CLASSIFICATION	3.7686435868925785E-7	DESIGN
// let the interceptor inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999771803990112	WITHOUT_CLASSIFICATION	2.281960098880201E-5	DESIGN
// let the persister inspect the instance to decide	WITHOUT_CLASSIFICATION	0.999994665240505	WITHOUT_CLASSIFICATION	5.334759495115199E-6	DESIGN
// we use the assumed value, if there is one, to avoid hitting // the database	WITHOUT_CLASSIFICATION	0.9998240768838157	WITHOUT_CLASSIFICATION	1.7592311618432415E-4	DESIGN
// hit the database, after checking the session cache for a snapshot	WITHOUT_CLASSIFICATION	0.9999405672260505	WITHOUT_CLASSIFICATION	5.9432773949337E-5	DESIGN
// context-entity-identifier returns null explicitly if the entity // is not associated with the persistence context; so make some // deeper checks...	WITHOUT_CLASSIFICATION	0.9999963753665817	WITHOUT_CLASSIFICATION	3.624633418307471E-6	DESIGN
//int count = 0;	WITHOUT_CLASSIFICATION	0.9996677074229491	WITHOUT_CLASSIFICATION	3.3229257705084296E-4	DESIGN
//the first key found after the given key	WITHOUT_CLASSIFICATION	0.999903541721196	WITHOUT_CLASSIFICATION	9.645827880399076E-5	DESIGN
//checkForEnd = false;	WITHOUT_CLASSIFICATION	0.9995636901787426	WITHOUT_CLASSIFICATION	4.3630982125741923E-4	DESIGN
//count++;	WITHOUT_CLASSIFICATION	0.9977186604572853	WITHOUT_CLASSIFICATION	0.0022813395427147974	DESIGN
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9997896576052939	WITHOUT_CLASSIFICATION	2.1034239470610775E-4	DESIGN
//we ran out of keys to try	WITHOUT_CLASSIFICATION	0.9996877114531234	WITHOUT_CLASSIFICATION	3.1228854687664334E-4	DESIGN
//first element of array is reserved for the actual instance we are loading!	WITHOUT_CLASSIFICATION	0.9999528054793586	WITHOUT_CLASSIFICATION	4.7194520641318275E-5	DESIGN
//the first id found after the given id	WITHOUT_CLASSIFICATION	0.9996435673863543	WITHOUT_CLASSIFICATION	3.564326136456331E-4	DESIGN
//we ran out of ids to try	WITHOUT_CLASSIFICATION	0.9991775937280143	WITHOUT_CLASSIFICATION	8.224062719857244E-4	DESIGN
// look for existing collection as part of the persistence context	WITHOUT_CLASSIFICATION	0.999999414355056	WITHOUT_CLASSIFICATION	5.856449438976061E-7	DESIGN
// ignore this row of results! Note the early exit	WITHOUT_CLASSIFICATION	0.9998896799518295	WITHOUT_CLASSIFICATION	1.1032004817053867E-4	DESIGN
// initialize this collection	WITHOUT_CLASSIFICATION	0.9989555686242115	WITHOUT_CLASSIFICATION	0.0010444313757884383	DESIGN
// create one	WITHOUT_CLASSIFICATION	0.9999888974767523	WITHOUT_CLASSIFICATION	1.1102523247533763E-5	DESIGN
// warning: can cause a recursive calls! (proxy initialization)	WITHOUT_CLASSIFICATION	0.9999003199132439	WITHOUT_CLASSIFICATION	9.968008675610575E-5	DESIGN
// there were no queued additions // and the role has a cache	WITHOUT_CLASSIFICATION	0.9999848205086384	WITHOUT_CLASSIFICATION	1.5179491361731427E-5	DESIGN
// and this is not a forced initialization during flush	WITHOUT_CLASSIFICATION	0.9986338586714232	WITHOUT_CLASSIFICATION	0.0013661413285768597	DESIGN
// some filters affecting the collection are enabled on the session, so do not do the put into the cache.	WITHOUT_CLASSIFICATION	0.9999611251522446	WITHOUT_CLASSIFICATION	3.887484775537664E-5	DESIGN
// cleanup code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999443657481105	WITHOUT_CLASSIFICATION	5.563425188950571E-4	DESIGN
// loading collection xrefs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999824581748908	WITHOUT_CLASSIFICATION	1.7541825109061188E-5	DESIGN
// Collection load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999979470796855	WITHOUT_CLASSIFICATION	2.052920314585413E-6	DESIGN
// simple cache of param metadata based on query string.  Ideally, the // original "user-supplied query" string should be used to retreive this // metadata (i.e., not the para-list-expanded query string) to avoid // unnecessary cache entries. // Used solely for caching param metadata for native-sql queries, see // getSQLParameterMetadata() for a discussion as to why...	WITHOUT_CLASSIFICATION	0.998946954408469	WITHOUT_CLASSIFICATION	0.001053045591531004	DESIGN
// the cache of the actual plans...	WITHOUT_CLASSIFICATION	0.9999922855753124	WITHOUT_CLASSIFICATION	7.714424687617758E-6	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.9991752457914114	WITHOUT_CLASSIFICATION	8.247542085885454E-4	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.9991752457914114	WITHOUT_CLASSIFICATION	8.247542085885454E-4	DESIGN
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999403613264882	WITHOUT_CLASSIFICATION	5.9638673511883574E-5	DESIGN
// for native-sql queries, the param metadata is determined outside // any relation to a query plan, because query plan creation and/or // retreival for a native-sql query depends on all of the return // types having been set, which might not be the case up-front when // param metadata would be most useful	WITHOUT_CLASSIFICATION	0.989506082681575	WITHOUT_CLASSIFICATION	0.010493917318424965	DESIGN
// don't care...	WITHOUT_CLASSIFICATION	0.9999123655375489	WITHOUT_CLASSIFICATION	8.76344624511031E-5	DESIGN
// Recognition code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99986639227124	WITHOUT_CLASSIFICATION	1.336077287600089E-4	DESIGN
// don't care...	WITHOUT_CLASSIFICATION	0.9999123655375489	WITHOUT_CLASSIFICATION	8.76344624511031E-5	DESIGN
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9989402098227228	WITHOUT_CLASSIFICATION	0.0010597901772772924	DESIGN
// break the outer loop !!!	WITHOUT_CLASSIFICATION	0.9999671513435948	WITHOUT_CLASSIFICATION	3.284865640513921E-5	DESIGN
// named parameter	WITHOUT_CLASSIFICATION	0.9999953782551398	WITHOUT_CLASSIFICATION	4.621744860140116E-6	DESIGN
// could be either an ordinal or JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999948314332244	WITHOUT_CLASSIFICATION	5.168566775476557E-6	DESIGN
// a peek ahead showed this as an JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9997068619348581	WITHOUT_CLASSIFICATION	2.931380651418533E-4	DESIGN
// make sure this "name" is an integral	WITHOUT_CLASSIFICATION	0.9998415974274735	WITHOUT_CLASSIFICATION	1.5840257252642084E-4	DESIGN
// pre-determine and cache the hashcode	WITHOUT_CLASSIFICATION	0.9999630493778627	WITHOUT_CLASSIFICATION	3.6950622137321786E-5	DESIGN
// perform the actual work	WITHOUT_CLASSIFICATION	0.9997851198523922	WITHOUT_CLASSIFICATION	2.1488014760772813E-4	DESIGN
// if everything went ok, commit the transaction and close the obtained // connection handle...	WITHOUT_CLASSIFICATION	0.9999992072125589	WITHOUT_CLASSIFICATION	7.927874411735504E-7	DESIGN
// at some point the processing went bad, so we need to: //      1) make sure the connection handle gets released //      2) try to cleanup the JTA context as much as possible	WITHOUT_CLASSIFICATION	0.9999371967629684	WITHOUT_CLASSIFICATION	6.280323703154638E-5	DESIGN
// finally handle the exception	WITHOUT_CLASSIFICATION	0.9974119924735049	WITHOUT_CLASSIFICATION	0.0025880075264950657	DESIGN
// a "detached" collection that belonged to a different entity	WITHOUT_CLASSIFICATION	0.9999997250385062	WITHOUT_CLASSIFICATION	2.7496149384589627E-7	DESIGN
//saveOrUpdateCopy() is deprecated!	WITHOUT_CLASSIFICATION	0.9990164335764093	WITHOUT_CLASSIFICATION	9.835664235905619E-4	DESIGN
// collectionPersister should not be null, but we don't want to throw // an exception if it is null	WITHOUT_CLASSIFICATION	0.9979120186770658	WITHOUT_CLASSIFICATION	0.0020879813229340944	DESIGN
// otherwise a null or brand new collection // this will also (inefficiently) handle arrays, which // have no snapshot, so we can't do any better //processArrayOrNewCollection(collection, type);	WITHOUT_CLASSIFICATION	0.9971125859286708	WITHOUT_CLASSIFICATION	0.002887414071329207	DESIGN
// a "detached" collection that originally belonged to the same entity	WITHOUT_CLASSIFICATION	0.999999855898306	WITHOUT_CLASSIFICATION	1.4410169408135582E-7	DESIGN
//do nothing	WITHOUT_CLASSIFICATION	0.9994107558340095	WITHOUT_CLASSIFICATION	5.892441659906124E-4	DESIGN
//do nothing	WITHOUT_CLASSIFICATION	0.9994107558340095	WITHOUT_CLASSIFICATION	5.892441659906124E-4	DESIGN
//Force a substitution!	WITHOUT_CLASSIFICATION	0.9995616679677811	WITHOUT_CLASSIFICATION	4.38332032218847E-4	DESIGN
// The user requested a "greater" (i.e. more restrictive) form of // pessimistic lock	WITHOUT_CLASSIFICATION	0.9999912584158581	WITHOUT_CLASSIFICATION	8.741584141976341E-6	DESIGN
// the database now holds a lock + the object is flushed from the cache, // so release the soft lock	WITHOUT_CLASSIFICATION	0.999377084244581	WITHOUT_CLASSIFICATION	6.229157554190206E-4	DESIGN
// now update the object .. has to be outside the main if block above (because of collections)	WITHOUT_CLASSIFICATION	0.9997903678116322	WITHOUT_CLASSIFICATION	2.096321883678454E-4	DESIGN
// Search for collections by reachability, updating their role. // We don't want to touch collections reachable from a deleted object	WITHOUT_CLASSIFICATION	0.9999967933165815	WITHOUT_CLASSIFICATION	3.20668341852337E-6	DESIGN
// this is a situation where the entity id is assigned by a post-insert generator // and was saved outside the transaction forcing it to be delayed	WITHOUT_CLASSIFICATION	0.9999603804871208	WITHOUT_CLASSIFICATION	3.961951287929011E-5	DESIGN
// NOTE: we need to do the wrap here even if its not "dirty", // because collections need wrapping but changes to _them_ // don't dirty the container. Also, for versioned data, we // need to wrap before calling searchForDirtyCollections	WITHOUT_CLASSIFICATION	0.9999999353426361	WITHOUT_CLASSIFICATION	6.465736394646837E-8	DESIGN
//grab its state saved at deletion	WITHOUT_CLASSIFICATION	0.9999726002433554	WITHOUT_CLASSIFICATION	2.7399756644531596E-5	DESIGN
// grab its current state	WITHOUT_CLASSIFICATION	0.999990664744213	WITHOUT_CLASSIFICATION	9.335255786986475E-6	DESIGN
// schedule the update // note that we intentionally do _not_ pass in currentPersistentState!	WITHOUT_CLASSIFICATION	0.9999943609891863	WITHOUT_CLASSIFICATION	5.63901081368516E-6	DESIGN
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9997449067115964	WITHOUT_CLASSIFICATION	2.5509328840355025E-4	DESIGN
// give the Interceptor a chance to process property values, if the properties // were modified by the Interceptor, we need to set them back to the object	WITHOUT_CLASSIFICATION	0.9999958273818977	WITHOUT_CLASSIFICATION	4.172618102276445E-6	DESIGN
// compare to cached state (ignoring collections unless versioned)	WITHOUT_CLASSIFICATION	0.9999985116456954	WITHOUT_CLASSIFICATION	1.4883543046150485E-6	DESIGN
// if it was dirtied by a collection only	WITHOUT_CLASSIFICATION	0.9999973673410396	WITHOUT_CLASSIFICATION	2.6326589603165375E-6	DESIGN
// increment the version number (if necessary)	WITHOUT_CLASSIFICATION	0.9999960839333458	WITHOUT_CLASSIFICATION	3.916066654140108E-6	DESIGN
// check nullability but do not perform command execute // we'll use scheduled updates for that.	WITHOUT_CLASSIFICATION	0.9999990393713213	WITHOUT_CLASSIFICATION	9.606286788145588E-7	DESIGN
//give the Interceptor a chance to modify property values	WITHOUT_CLASSIFICATION	0.999757561680081	WITHOUT_CLASSIFICATION	2.4243831991892163E-4	DESIGN
//now we might need to recalculate the dirtyProperties array	WITHOUT_CLASSIFICATION	0.9995377803945257	WITHOUT_CLASSIFICATION	4.6221960547427514E-4	DESIGN
//use the current version	WITHOUT_CLASSIFICATION	0.9999566799899307	WITHOUT_CLASSIFICATION	4.3320010069367024E-5	DESIGN
// Interceptor returned null, so do the dirtycheck ourself, if possible	WITHOUT_CLASSIFICATION	0.9999973514227878	WITHOUT_CLASSIFICATION	2.648577212196292E-6	DESIGN
// object loaded by update()	WITHOUT_CLASSIFICATION	0.9999969269664228	WITHOUT_CLASSIFICATION	3.0730335772214277E-6	DESIGN
// dirty check against the usual snapshot of the entity	WITHOUT_CLASSIFICATION	0.9999997907749494	WITHOUT_CLASSIFICATION	2.0922505055763323E-7	DESIGN
// dirty check against the database snapshot, if possible/necessary	WITHOUT_CLASSIFICATION	0.999999599228013	WITHOUT_CLASSIFICATION	4.007719871394115E-7	DESIGN
// the Interceptor handled the dirty checking	WITHOUT_CLASSIFICATION	0.9999944409631205	WITHOUT_CLASSIFICATION	5.559036879590173E-6	DESIGN
//even process null collections	WITHOUT_CLASSIFICATION	0.9998707393360029	WITHOUT_CLASSIFICATION	1.2926066399712247E-4	DESIGN
// get the id from the object	WITHOUT_CLASSIFICATION	0.9999335216883706	WITHOUT_CLASSIFICATION	6.647831162934721E-5	DESIGN
//always do an INSERT, and let it fail by constraint violation	WITHOUT_CLASSIFICATION	0.9999739595764151	WITHOUT_CLASSIFICATION	2.6040423584887077E-5	DESIGN
//what is the version on the database?	WITHOUT_CLASSIFICATION	0.9991839000367561	WITHOUT_CLASSIFICATION	8.160999632439466E-4	DESIGN
/// HHH-2378	WITHOUT_CLASSIFICATION	0.9997690711142142	WITHOUT_CLASSIFICATION	2.3092888578572318E-4	DESIGN
//will result in a SQL UPDATE:	WITHOUT_CLASSIFICATION	0.9935960998529063	WITHOUT_CLASSIFICATION	0.006403900147093714	DESIGN
//else do nothing (don't even reassociate object!)	WITHOUT_CLASSIFICATION	0.9997984970550531	WITHOUT_CLASSIFICATION	2.0150294494698033E-4	DESIGN
// no existing row - do an insert	WITHOUT_CLASSIFICATION	0.9999862000180174	WITHOUT_CLASSIFICATION	1.3799981982593132E-5	DESIGN
//refresh() does not pass an entityName	WITHOUT_CLASSIFICATION	0.9999849514332615	WITHOUT_CLASSIFICATION	1.5048566738601934E-5	DESIGN
//do not return a proxy! //(this option indicates we are initializing a proxy)	WITHOUT_CLASSIFICATION	0.9981809704812994	WITHOUT_CLASSIFICATION	0.0018190295187006122	DESIGN
//return a proxy if appropriate	WITHOUT_CLASSIFICATION	0.9999581992364894	WITHOUT_CLASSIFICATION	4.1800763510524586E-5	DESIGN
// return existing object or initialized proxy (unless deleted)	WITHOUT_CLASSIFICATION	0.999997642650648	WITHOUT_CLASSIFICATION	2.357349351905257E-6	DESIGN
// return new uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999970091044448	WITHOUT_CLASSIFICATION	2.990895555127226E-6	DESIGN
// this object was already loaded	WITHOUT_CLASSIFICATION	0.999861185011678	WITHOUT_CLASSIFICATION	1.3881498832204092E-4	DESIGN
// Entity was found in second-level cache...	WITHOUT_CLASSIFICATION	0.9975388839555535	WITHOUT_CLASSIFICATION	0.0024611160444465816	DESIGN
// make it circular-reference safe	WITHOUT_CLASSIFICATION	0.9999196348840497	WITHOUT_CLASSIFICATION	8.036511595023678E-5	DESIGN
// intializes result by side-effect	WITHOUT_CLASSIFICATION	0.9999868106185253	WITHOUT_CLASSIFICATION	1.3189381474715801E-5	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Pre-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999773922704643	WITHOUT_CLASSIFICATION	2.2607729535725865E-5	DESIGN
//some statistics	WITHOUT_CLASSIFICATION	0.9996426153492982	WITHOUT_CLASSIFICATION	3.573846507017852E-4	DESIGN
//safe from concurrent modification because of how entryList() is implemented on IdentityMap	WITHOUT_CLASSIFICATION	0.9990261523354367	WITHOUT_CLASSIFICATION	9.738476645632075E-4	DESIGN
// Initialize dirty flags for arrays + collections with composite elements // and reset reached, doupdate, etc.	WITHOUT_CLASSIFICATION	0.9999998757656777	WITHOUT_CLASSIFICATION	1.2423432221955237E-7	DESIGN
// Among other things, updateReachables() will recursively load all // collections that are moving roles. This might cause entities to // be loaded.	WITHOUT_CLASSIFICATION	0.9980854128294016	WITHOUT_CLASSIFICATION	0.0019145871705984407	DESIGN
// So this needs to be safe from concurrent modification problems. // It is safe because of how IdentityMap implements entrySet()	WITHOUT_CLASSIFICATION	0.9989440596748701	WITHOUT_CLASSIFICATION	0.0010559403251299	DESIGN
// Update the status of the object and if necessary, schedule an update	WITHOUT_CLASSIFICATION	0.9999855144120224	WITHOUT_CLASSIFICATION	1.4485587977677066E-5	DESIGN
// Schedule updates to collections:	WITHOUT_CLASSIFICATION	0.9999606535070859	WITHOUT_CLASSIFICATION	3.9346492914213785E-5	DESIGN
// we need to lock the collection caches before // executing entity inserts/updates in order to // account for bidi associations	WITHOUT_CLASSIFICATION	0.999999856916732	WITHOUT_CLASSIFICATION	1.430832679988433E-7	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Post-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999609197299378	WITHOUT_CLASSIFICATION	3.90802700621147E-5	DESIGN
//the database has changed now, so the subselect results need to be invalidated	WITHOUT_CLASSIFICATION	0.9999872350848338	WITHOUT_CLASSIFICATION	1.2764915166239038E-5	DESIGN
//if the collection is dereferenced, remove from the session cache //iter.remove(); //does not work, since the entrySet is not backed by the set	WITHOUT_CLASSIFICATION	0.9631828470374629	WITHOUT_CLASSIFICATION	0.03681715296253712	DESIGN
//otherwise recreate the mapping between the collection and its key	WITHOUT_CLASSIFICATION	0.9999982561397038	WITHOUT_CLASSIFICATION	1.7438602961815436E-6	DESIGN
//get a snapshot	WITHOUT_CLASSIFICATION	0.9996384963158667	WITHOUT_CLASSIFICATION	3.6150368413341924E-4	DESIGN
/* package-private */	WITHOUT_CLASSIFICATION	0.9999618232028379	WITHOUT_CLASSIFICATION	3.817679716201727E-5	DESIGN
/* package-private */	WITHOUT_CLASSIFICATION	0.9999618232028379	WITHOUT_CLASSIFICATION	3.817679716201727E-5	DESIGN
// key is an entity involved with the operation performed by the listener; // value is a flag indicating if the listener explicitly operates on the entity	WITHOUT_CLASSIFICATION	0.9999985759751486	WITHOUT_CLASSIFICATION	1.4240248513451635E-6	DESIGN
// EARLY EXIT!!!	WITHOUT_CLASSIFICATION	0.9992159670091181	WITHOUT_CLASSIFICATION	7.840329908818887E-4	DESIGN
//ie. the entity came in from update()	WITHOUT_CLASSIFICATION	0.9999148729929329	WITHOUT_CLASSIFICATION	8.512700706701407E-5	DESIGN
// before any callbacks, etc, so subdeletions see that this deletion happened first	WITHOUT_CLASSIFICATION	0.9998989455337799	WITHOUT_CLASSIFICATION	1.0105446622014215E-4	DESIGN
// Ensures that containing deletions happen before sub-deletions	WITHOUT_CLASSIFICATION	0.9999895548229399	WITHOUT_CLASSIFICATION	1.0445177059992169E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9992342288671854	WITHOUT_CLASSIFICATION	7.657711328146887E-4	DESIGN
// cascade-delete to collections BEFORE the collection owner is deleted	WITHOUT_CLASSIFICATION	0.9999090873706704	WITHOUT_CLASSIFICATION	9.091262932969984E-5	DESIGN
// cascade-delete to many-to-one AFTER the parent was deleted	WITHOUT_CLASSIFICATION	0.9999685818581632	WITHOUT_CLASSIFICATION	3.141814183685976E-5	DESIGN
// if it is an initialized proxy, let cascade // handle it later on	WITHOUT_CLASSIFICATION	0.9999083615405654	WITHOUT_CLASSIFICATION	9.163845943454118E-5	DESIGN
//assign the requested id to the proxy, *before* //reassociating the proxy	WITHOUT_CLASSIFICATION	0.9999927616074751	WITHOUT_CLASSIFICATION	7.2383925248468555E-6	DESIGN
// an uninitialized proxy, noop, don't even need to // return an id, since it is never a save()	WITHOUT_CLASSIFICATION	0.9999988040949365	WITHOUT_CLASSIFICATION	1.1959050635082618E-6	DESIGN
//initialize properties of the event:	WITHOUT_CLASSIFICATION	0.9999574355527259	WITHOUT_CLASSIFICATION	4.2564447274162946E-5	DESIGN
//return the id in the event object	WITHOUT_CLASSIFICATION	0.9999656796794476	WITHOUT_CLASSIFICATION	3.4320320552358586E-5	DESIGN
//TRANSIENT or DELETED	WITHOUT_CLASSIFICATION	0.9992532575250435	WITHOUT_CLASSIFICATION	7.467424749565353E-4	DESIGN
// use the id assigned to the instance	WITHOUT_CLASSIFICATION	0.9999915208640675	WITHOUT_CLASSIFICATION	8.479135932427286E-6	DESIGN
// assume this is a newly instantiated transient object // which should be saved rather than updated	WITHOUT_CLASSIFICATION	0.9983282499072349	WITHOUT_CLASSIFICATION	0.001671750092765147	DESIGN
// this is a transient object with existing persistent state not loaded by the session	WITHOUT_CLASSIFICATION	0.9999929051495415	WITHOUT_CLASSIFICATION	7.094850458518509E-6	DESIGN
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999983459815007	WITHOUT_CLASSIFICATION	1.6540184993668483E-6	DESIGN
//cachedState,	WITHOUT_CLASSIFICATION	0.9996596628313791	WITHOUT_CLASSIFICATION	3.403371686208437E-4	DESIGN
//assume true, since we don't really know, and it doesn't matter	WITHOUT_CLASSIFICATION	0.5159092751970317	DESIGN	0.4840907248029683	WITHOUT_CLASSIFICATION
//a "detached" collection!	WITHOUT_CLASSIFICATION	0.9999111122310443	WITHOUT_CLASSIFICATION	8.888776895563104E-5	DESIGN
// if the collection belonged to a different entity, // clean up the existing state of the collection	WITHOUT_CLASSIFICATION	0.999996836243856	WITHOUT_CLASSIFICATION	3.163756143929101E-6	DESIGN
//log.debug( "calling onLoad()" );	WITHOUT_CLASSIFICATION	0.9997676585887963	WITHOUT_CLASSIFICATION	2.323414112035082E-4	DESIGN
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.999121485730232	WITHOUT_CLASSIFICATION	8.785142697680937E-4	DESIGN
// note: performExecutions() clears all collectionXxxxtion  // collections (the collection actions) in the session	WITHOUT_CLASSIFICATION	0.9999795491565097	WITHOUT_CLASSIFICATION	2.0450843490377526E-5	DESIGN
// if no array holder we found an unwrappered array (this can't occur, // because we now always call wrap() before getting to here) // return (ah==null) ? true : searchForDirtyCollections(ah, type);	WITHOUT_CLASSIFICATION	0.993961407554025	WITHOUT_CLASSIFICATION	0.006038592445975032	DESIGN
// if not wrappered yet, its dirty (this can't occur, because // we now always call wrap() before getting to here) // return ( ! (obj instanceof PersistentCollection) ) ? //true : searchForDirtyCollections( (PersistentCollection) obj, type );	WITHOUT_CLASSIFICATION	0.999969002666127	WITHOUT_CLASSIFICATION	3.0997333873057376E-5	DESIGN
//we need to check even if it was not initialized, because of delayed adds!	WITHOUT_CLASSIFICATION	0.999927397965367	WITHOUT_CLASSIFICATION	7.260203463291926E-5	DESIGN
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9980537465139203	WITHOUT_CLASSIFICATION	0.0019462534860795625	DESIGN
// find any entities that are still transient after retry	WITHOUT_CLASSIFICATION	0.9999981602319441	WITHOUT_CLASSIFICATION	1.8397680558643819E-6	DESIGN
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.999121485730232	WITHOUT_CLASSIFICATION	8.785142697680937E-4	DESIGN
// Check the persistence context for an entry relating to this // entity to be merged...	WITHOUT_CLASSIFICATION	0.9999994439889638	WITHOUT_CLASSIFICATION	5.56011036251126E-7	DESIGN
// we have specialized case of a detached entity from the // perspective of the merge operation.  Specifically, we // have an incoming entity instance which has a corresponding // entry in the current persistence context, but registered // under a different entity instance	WITHOUT_CLASSIFICATION	0.9999979150254326	WITHOUT_CLASSIFICATION	2.084974567459752E-6	DESIGN
//DELETED	WITHOUT_CLASSIFICATION	0.9948320759437052	WITHOUT_CLASSIFICATION	0.005167924056294882	DESIGN
//before cascade!	WITHOUT_CLASSIFICATION	0.9995585871168645	WITHOUT_CLASSIFICATION	4.4141288313558313E-4	DESIGN
// cascade first, so that all unsaved objects get their // copy created before we actually copy //cascadeOnMerge(event, persister, entity, copyCache, Cascades.CASCADE_BEFORE_MERGE);	WITHOUT_CLASSIFICATION	0.9999991696404857	WITHOUT_CLASSIFICATION	8.303595142530183E-7	DESIGN
//this bit is only *really* absolutely necessary for handling //requestedId, but is also good if we merge multiple object //graphs, since it helps ensure uniqueness	WITHOUT_CLASSIFICATION	0.9995636202497274	WITHOUT_CLASSIFICATION	4.3637975027247563E-4	DESIGN
// continue...; we'll find out if it ends up not getting saved later	WITHOUT_CLASSIFICATION	0.99910472412573	WITHOUT_CLASSIFICATION	8.952758742699696E-4	DESIGN
// cascade first, so that all unsaved objects get their // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999900190389053	WITHOUT_CLASSIFICATION	9.98096109474867E-6	DESIGN
// check that entity id = requestedId	WITHOUT_CLASSIFICATION	0.9999943545951492	WITHOUT_CLASSIFICATION	5.645404850861216E-6	DESIGN
//before cascade!	WITHOUT_CLASSIFICATION	0.9995585871168645	WITHOUT_CLASSIFICATION	4.4141288313558313E-4	DESIGN
// we got here because we assumed that an instance // with an assigned id was detached, when it was // really persistent	WITHOUT_CLASSIFICATION	0.9999904029045605	WITHOUT_CLASSIFICATION	9.597095439406977E-6	DESIGN
// cascade first, so that all unsaved objects get their  // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999799455862113	WITHOUT_CLASSIFICATION	2.0054413788774758E-5	DESIGN
//copyValues works by reflection, so explicitly mark the entity instance dirty	WITHOUT_CLASSIFICATION	0.9998500408845873	WITHOUT_CLASSIFICATION	1.4995911541270467E-4	DESIGN
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.9990617562109451	WITHOUT_CLASSIFICATION	9.382437890548611E-4	DESIGN
//source.getBatcher().executeBatch(); //found another way to ensure that all batched joined inserts have been executed	WITHOUT_CLASSIFICATION	0.999998318347096	WITHOUT_CLASSIFICATION	1.6816529040625248E-6	DESIGN
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9997449067115964	WITHOUT_CLASSIFICATION	2.5509328840355025E-4	DESIGN
//now done in EntityIdentityInsertAction //persister.setIdentifier( entity, id, source.getEntityMode() );	WITHOUT_CLASSIFICATION	0.9999946086025873	WITHOUT_CLASSIFICATION	5.39139741269252E-6	DESIGN
//source.getPersistenceContext().removeNonExist( new EntityKey( id, persister, source.getEntityMode() ) );	WITHOUT_CLASSIFICATION	0.9999374093516452	WITHOUT_CLASSIFICATION	6.259064835475176E-5	DESIGN
//keep the existing version number in the case of replicate!	WITHOUT_CLASSIFICATION	0.9999553449015114	WITHOUT_CLASSIFICATION	4.4655098488505795E-5	DESIGN
// cascade-save to many-to-one BEFORE the parent is saved	WITHOUT_CLASSIFICATION	0.9999519148876372	WITHOUT_CLASSIFICATION	4.8085112362785395E-5	DESIGN
//pass this as an argument only to avoid double looking	WITHOUT_CLASSIFICATION	0.9997621901450304	WITHOUT_CLASSIFICATION	2.378098549695713E-4	DESIGN
// the object is persistent	WITHOUT_CLASSIFICATION	0.9999945737471885	WITHOUT_CLASSIFICATION	5.426252811627684E-6	DESIGN
//the entity is associated with the session, so check its status	WITHOUT_CLASSIFICATION	0.9999432821423568	WITHOUT_CLASSIFICATION	5.671785764322344E-5	DESIGN
// do nothing for persistent instances	WITHOUT_CLASSIFICATION	0.9999888165649757	WITHOUT_CLASSIFICATION	1.1183435024146037E-5	DESIGN
//ie. e.status==DELETED	WITHOUT_CLASSIFICATION	0.9997922662564619	WITHOUT_CLASSIFICATION	2.0773374353804638E-4	DESIGN
// the object is transient or detached	WITHOUT_CLASSIFICATION	0.9999983252229407	WITHOUT_CLASSIFICATION	1.674777059230715E-6	DESIGN
//NOTE EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9988710079719731	WITHOUT_CLASSIFICATION	0.0011289920280268871	DESIGN
// Private constructor - stops checkstyle from complaining.	WITHOUT_CLASSIFICATION	0.9999869523527267	WITHOUT_CLASSIFICATION	1.3047647273278521E-5	DESIGN
// First, try to find a matching constructor accepting a ViolatedConstraintNameExtracter param...	WITHOUT_CLASSIFICATION	0.9999988612572492	WITHOUT_CLASSIFICATION	1.1387427507813318E-6	DESIGN
// eat it and try next	WITHOUT_CLASSIFICATION	0.9999962210749807	WITHOUT_CLASSIFICATION	3.778925019452022E-6	DESIGN
// Otherwise, try to use the no-arg constructor	WITHOUT_CLASSIFICATION	0.99998774446151	WITHOUT_CLASSIFICATION	1.2255538489930181E-5	DESIGN
// oracle sql-state code for deadlock	WITHOUT_CLASSIFICATION	0.9998567768860029	WITHOUT_CLASSIFICATION	1.4322311399705747E-4	DESIGN
// CollectionPropertyMapping processes everything except 'index'.	WITHOUT_CLASSIFICATION	0.9999522346653291	WITHOUT_CLASSIFICATION	4.776533467084278E-5	DESIGN
// remove initial ", "	WITHOUT_CLASSIFICATION	0.9998855178023337	WITHOUT_CLASSIFICATION	1.1448219766635139E-4	DESIGN
// remove initial " and "	WITHOUT_CLASSIFICATION	0.9999276780694064	WITHOUT_CLASSIFICATION	7.232193059351825E-5	DESIGN
//beforeClassTokens.add("new"); DEFINITELY DON'T HAVE THIS!!	WITHOUT_CLASSIFICATION	0.9980456888116876	WITHOUT_CLASSIFICATION	0.00195431118831231	DESIGN
//notAfterClassTokens.add(",");	WITHOUT_CLASSIFICATION	0.999762984433414	WITHOUT_CLASSIFICATION	2.370155665860154E-4	DESIGN
// just especially for the trivial collection filter	WITHOUT_CLASSIFICATION	0.9999975967815123	WITHOUT_CLASSIFICATION	2.403218487603729E-6	DESIGN
//update last non-whitespace token, if necessary	WITHOUT_CLASSIFICATION	0.9997944249367886	WITHOUT_CLASSIFICATION	2.0557506321151317E-4	DESIGN
// select-range is terminated by declaration of "from"	WITHOUT_CLASSIFICATION	0.999989832452431	WITHOUT_CLASSIFICATION	1.0167547569041183E-5	DESIGN
//scan for next non-whitespace token	WITHOUT_CLASSIFICATION	0.999934872271577	WITHOUT_CLASSIFICATION	6.512772842305053E-5	DESIGN
// Note this!!	WITHOUT_CLASSIFICATION	0.9996359425276742	WITHOUT_CLASSIFICATION	3.640574723258144E-4	DESIGN
// Error message constants.	WITHOUT_CLASSIFICATION	0.9998598883722702	WITHOUT_CLASSIFICATION	1.4011162772979095E-4	DESIGN
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996159232907031	WITHOUT_CLASSIFICATION	3.8407670929682946E-4	DESIGN
// semantic action handling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998792694154484	WITHOUT_CLASSIFICATION	1.2073058455166952E-4	DESIGN
// Handle collection-fiter compilation. // IMPORTANT NOTE: This is modifying the INPUT (HQL) tree, not the output tree!	WITHOUT_CLASSIFICATION	0.9996776169915993	WITHOUT_CLASSIFICATION	3.223830084006992E-4	DESIGN
// Show the modified AST.	WITHOUT_CLASSIFICATION	0.9998565896132869	WITHOUT_CLASSIFICATION	1.434103867130028E-4	DESIGN
// Create a parameter specification for the collection filter...	WITHOUT_CLASSIFICATION	0.9999993153293995	WITHOUT_CLASSIFICATION	6.846706006362382E-7	DESIGN
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9998636069507886	WITHOUT_CLASSIFICATION	1.363930492113344E-4	DESIGN
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9998636069507886	WITHOUT_CLASSIFICATION	1.363930492113344E-4	DESIGN
// Get the names of the columns used to link between the collection // owner and the collection elements.	WITHOUT_CLASSIFICATION	0.9999971298335436	WITHOUT_CLASSIFICATION	2.8701664562678517E-6	DESIGN
// The path AST should be a DotNode, and it should have been evaluated already.	WITHOUT_CLASSIFICATION	0.9992497873886824	WITHOUT_CLASSIFICATION	7.502126113175218E-4	DESIGN
// Tell the dot node about the join type.	WITHOUT_CLASSIFICATION	0.9996663492295997	WITHOUT_CLASSIFICATION	3.336507704003572E-4	DESIGN
// Re-arrange the tree so that the collection function is the root and the lhs is the path.	WITHOUT_CLASSIFICATION	0.9999995871618107	WITHOUT_CLASSIFICATION	4.1283818934646605E-7	DESIGN
// Don't forget to resolve the argument! // Resolve the collection function now.	WITHOUT_CLASSIFICATION	0.9999972983136709	WITHOUT_CLASSIFICATION	2.7016863291426024E-6	DESIGN
// Resolve everything up to this dot, but don't resolve the placeholders yet.	WITHOUT_CLASSIFICATION	0.9994899582821016	WITHOUT_CLASSIFICATION	5.100417178984237E-4	DESIGN
// Should mean that no such property was found	WITHOUT_CLASSIFICATION	0.997420362060359	WITHOUT_CLASSIFICATION	0.0025796379396410304	DESIGN
// Was there an explicit select expression?	WITHOUT_CLASSIFICATION	0.999990883753026	WITHOUT_CLASSIFICATION	9.116246973947235E-6	DESIGN
// Attach any mapping-defined "ORDER BY" fragments	WITHOUT_CLASSIFICATION	0.9999972851715132	WITHOUT_CLASSIFICATION	2.7148284868037864E-6	DESIGN
// Use the explicitly declared select expression; determine the // return types indicated by each select token	WITHOUT_CLASSIFICATION	0.9999800455100241	WITHOUT_CLASSIFICATION	1.99544899759543E-5	DESIGN
// After that, process the JOINs. // Invoke a delegate to do the work, as this is farily complex.	WITHOUT_CLASSIFICATION	0.9918967059627937	WITHOUT_CLASSIFICATION	0.008103294037206348	DESIGN
// Make #@%$^#^&# sure no alias is applied to the table name	WITHOUT_CLASSIFICATION	0.9999962251634625	WITHOUT_CLASSIFICATION	3.774836537335355E-6	DESIGN
// We need to generate ids as part of this bulk insert. // // Note that this is only supported for sequence-style generators and // post-insert-style generators; basically, only in-db generators	WITHOUT_CLASSIFICATION	0.9999817846881693	WITHOUT_CLASSIFICATION	1.8215311830700494E-5	DESIGN
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9998636069507886	WITHOUT_CLASSIFICATION	1.363930492113344E-4	DESIGN
// We need to seed the version value as part of this bulk insert	WITHOUT_CLASSIFICATION	0.9999963313438229	WITHOUT_CLASSIFICATION	3.6686561770098064E-6	DESIGN
// we need to wrtap the param in a cast()	WITHOUT_CLASSIFICATION	0.9999873123855177	WITHOUT_CLASSIFICATION	1.2687614482269584E-5	DESIGN
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9914563647931826	WITHOUT_CLASSIFICATION	0.008543635206817364	DESIGN
// Generate implicit joins, only if necessary.	WITHOUT_CLASSIFICATION	0.99999799706575	WITHOUT_CLASSIFICATION	2.0029342500350327E-6	DESIGN
// Notify the FROM element that it is being referenced by the select.	WITHOUT_CLASSIFICATION	0.9999739083532174	WITHOUT_CLASSIFICATION	2.609164678264903E-5	DESIGN
// Turn off includeSubclasses on all FromElements.	WITHOUT_CLASSIFICATION	0.9996547531750496	WITHOUT_CLASSIFICATION	3.4524682495033055E-4	DESIGN
// create the node initially with the param name so that it shows // appropriately in the "original text" attribute	WITHOUT_CLASSIFICATION	0.999901322051738	WITHOUT_CLASSIFICATION	9.867794826205084E-5	DESIGN
// Use the delegate, resolve identifiers as FROM element aliases.	WITHOUT_CLASSIFICATION	0.9999658462756362	WITHOUT_CLASSIFICATION	3.4153724363815915E-5	DESIGN
// select clauses for insert statements should alwasy be treated as shallow	WITHOUT_CLASSIFICATION	0.9999303311230026	WITHOUT_CLASSIFICATION	6.966887699747139E-5	DESIGN
// no need to even collect this information if the persister is considered multi-table	WITHOUT_CLASSIFICATION	0.9999961454201652	WITHOUT_CLASSIFICATION	3.854579834835596E-6	DESIGN
// Make sure that the persister is versioned	WITHOUT_CLASSIFICATION	0.9999821519527279	WITHOUT_CLASSIFICATION	1.7848047272133103E-5	DESIGN
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996159232907031	WITHOUT_CLASSIFICATION	3.8407670929682946E-4	DESIGN
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9998636069507886	WITHOUT_CLASSIFICATION	1.363930492113344E-4	DESIGN
// --Commented out by Inspection (12/11/04 10:56 AM): int getWarningCount();	WITHOUT_CLASSIFICATION	0.9999961414055544	WITHOUT_CLASSIFICATION	3.858594445595236E-6	DESIGN
// Alias references and identifiers use the same node class.	WITHOUT_CLASSIFICATION	0.9999825610583258	WITHOUT_CLASSIFICATION	1.743894167412519E-5	DESIGN
// switch	WITHOUT_CLASSIFICATION	0.9999036817475875	WITHOUT_CLASSIFICATION	9.631825241247632E-5	DESIGN
// make a new one	WITHOUT_CLASSIFICATION	0.9999591111820484	WITHOUT_CLASSIFICATION	4.088881795156452E-5	DESIGN
// just do the regular thing if you can't find the ctor // Your AST must have default ctor to use this.	WITHOUT_CLASSIFICATION	0.9982754524925331	WITHOUT_CLASSIFICATION	0.0017245475074668302	DESIGN
// Initialize SQL nodes here.	WITHOUT_CLASSIFICATION	0.9999749491158835	WITHOUT_CLASSIFICATION	2.5050884116534655E-5	DESIGN
// semantic action processing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998051028019284	WITHOUT_CLASSIFICATION	1.9489719807176553E-4	DESIGN
// if template is null we just write the function out as it appears in the hql statement	WITHOUT_CLASSIFICATION	0.999702460994852	WITHOUT_CLASSIFICATION	2.9753900514789566E-4	DESIGN
// this function has a template -> redirect output and catch the arguments	WITHOUT_CLASSIFICATION	0.9999749572204241	WITHOUT_CLASSIFICATION	2.504277957599523E-5	DESIGN
// --- Inner classes (moved here from sql-gen.g) ---	WITHOUT_CLASSIFICATION	0.9991133901758927	WITHOUT_CLASSIFICATION	8.866098241071452E-4	DESIGN
// check two "adjecent" nodes at the top of the from-clause tree	WITHOUT_CLASSIFICATION	0.9999663150863451	WITHOUT_CLASSIFICATION	3.368491365493553E-5	DESIGN
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9995769085686194	WITHOUT_CLASSIFICATION	4.230914313806368E-4	DESIGN
// these are just two unrelated table references	WITHOUT_CLASSIFICATION	0.9999895627898295	WITHOUT_CLASSIFICATION	1.0437210170389403E-5	DESIGN
// again, both should be FromElements	WITHOUT_CLASSIFICATION	0.9998368833088359	WITHOUT_CLASSIFICATION	1.6311669116416132E-4	DESIGN
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9989402098227228	WITHOUT_CLASSIFICATION	0.0010597901772772924	DESIGN
// right represents a joins originating from left; or // both right and left reprersent joins originating from the same FromElement	WITHOUT_CLASSIFICATION	0.999968839436892	WITHOUT_CLASSIFICATION	3.116056310800107E-5	DESIGN
// check a set of parent/child nodes in the from-clause tree // to determine if a comma is required between them	WITHOUT_CLASSIFICATION	0.999988743063631	WITHOUT_CLASSIFICATION	1.1256936369092004E-5	DESIGN
// right represents a joins originating from left...	WITHOUT_CLASSIFICATION	0.9997247709928457	WITHOUT_CLASSIFICATION	2.75229007154357E-4	DESIGN
// all clear	WITHOUT_CLASSIFICATION	0.9999582313670787	WITHOUT_CLASSIFICATION	4.1768632921339034E-5	DESIGN
// Ignore the token class name parameter, and use a specific token class.	WITHOUT_CLASSIFICATION	0.9999973067294711	WITHOUT_CLASSIFICATION	2.693270529010167E-6	DESIGN
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999617550848683	WITHOUT_CLASSIFICATION	3.824491513177798E-5	DESIGN
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999617550848683	WITHOUT_CLASSIFICATION	3.824491513177798E-5	DESIGN
// remember that ordinal parameters numbers are 1-based!!!	WITHOUT_CLASSIFICATION	0.9999942576443406	WITHOUT_CLASSIFICATION	5.74235565935193E-6	DESIGN
// don't care about other param types here, just those explicitly user-defined...	WITHOUT_CLASSIFICATION	0.999995590729126	WITHOUT_CLASSIFICATION	4.409270873959365E-6	DESIGN
// If the query is already compiled, skip the compilation.	WITHOUT_CLASSIFICATION	0.9999975599794111	WITHOUT_CLASSIFICATION	2.440020588861982E-6	DESIGN
// Remember the parameters for the compilation.	WITHOUT_CLASSIFICATION	0.9999990772536362	WITHOUT_CLASSIFICATION	9.227463637652753E-7	DESIGN
// PHASE 1 : Parse the HQL into an AST.	WITHOUT_CLASSIFICATION	0.9997034694562509	WITHOUT_CLASSIFICATION	2.965305437490721E-4	DESIGN
// PHASE 2 : Analyze the HQL AST, and produce an SQL AST.	WITHOUT_CLASSIFICATION	0.9997429716275871	WITHOUT_CLASSIFICATION	2.570283724128657E-4	DESIGN
// PHASE 3 : Generate the SQL.	WITHOUT_CLASSIFICATION	0.9996250311971944	WITHOUT_CLASSIFICATION	3.7496880280563246E-4	DESIGN
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9991205489438681	WITHOUT_CLASSIFICATION	8.79451056131921E-4	DESIGN
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9991205489438681	WITHOUT_CLASSIFICATION	8.79451056131921E-4	DESIGN
//only needed during compilation phase...	WITHOUT_CLASSIFICATION	0.9999921226502303	WITHOUT_CLASSIFICATION	7.8773497697204E-6	DESIGN
// Transform the tree.	WITHOUT_CLASSIFICATION	0.9999733128302706	WITHOUT_CLASSIFICATION	2.6687169729405688E-5	DESIGN
// Parse the query string into an HQL AST.	WITHOUT_CLASSIFICATION	0.9998901793695492	WITHOUT_CLASSIFICATION	1.0982063045085145E-4	DESIGN
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999961030939953	WITHOUT_CLASSIFICATION	3.896906004639515E-6	DESIGN
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999961030939953	WITHOUT_CLASSIFICATION	3.896906004639515E-6	DESIGN
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999961030939953	WITHOUT_CLASSIFICATION	3.896906004639515E-6	DESIGN
// NOTE : ( max - 1 ) because first is zero-based while max is not...	WITHOUT_CLASSIFICATION	0.999091493023297	WITHOUT_CLASSIFICATION	9.085069767028865E-4	DESIGN
// -- Package local methods for the QueryLoader delegate --	WITHOUT_CLASSIFICATION	0.9999222517821567	WITHOUT_CLASSIFICATION	7.774821784329863E-5	DESIGN
// If there are no collection fetches, then no further checks are needed	WITHOUT_CLASSIFICATION	0.9999990221979643	WITHOUT_CLASSIFICATION	9.778020356082576E-7	DESIGN
// A shallow query is ok (although technically there should be no fetching here...)	WITHOUT_CLASSIFICATION	0.9917950053916245	WITHOUT_CLASSIFICATION	0.008204994608375517	DESIGN
// should be the first, but just to be safe...	WITHOUT_CLASSIFICATION	0.9993123015286992	WITHOUT_CLASSIFICATION	6.876984713008952E-4	DESIGN
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9998636069507886	WITHOUT_CLASSIFICATION	1.363930492113344E-4	DESIGN
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9998636069507886	WITHOUT_CLASSIFICATION	1.363930492113344E-4	DESIGN
// Impl Note: allows multiple collection fetches as long as the // entire fecthed graph still "points back" to a single // root entity for return	WITHOUT_CLASSIFICATION	0.99999604579379	WITHOUT_CLASSIFICATION	3.954206209951167E-6	DESIGN
// Otherwise, we have a non-scalar select with defined collection fetch(es). // Make sure that there is only a single root entity in the return (no tuples)	WITHOUT_CLASSIFICATION	0.9999991331032859	WITHOUT_CLASSIFICATION	8.668967141374464E-7	DESIGN
// This is not strictly true.  We actually just need to make sure that // it is ordered by root-entity PK and that that order-by comes before // any non-root-entity ordering...	WITHOUT_CLASSIFICATION	0.9999915501720525	WITHOUT_CLASSIFICATION	8.449827947370738E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.9992342288671854	WITHOUT_CLASSIFICATION	7.657711328146887E-4	DESIGN
// we are already processing a dot-structure	WITHOUT_CLASSIFICATION	0.9990783119018397	WITHOUT_CLASSIFICATION	9.216880981601976E-4	DESIGN
// igndore it...	WITHOUT_CLASSIFICATION	0.9999838702773207	WITHOUT_CLASSIFICATION	1.6129722679251024E-5	DESIGN
// we are now at a new tree level	WITHOUT_CLASSIFICATION	0.9999944625229501	WITHOUT_CLASSIFICATION	5.537477049910036E-6	DESIGN
// [jsd] The fix for HHH-558...	WITHOUT_CLASSIFICATION	0.9997929071350664	WITHOUT_CLASSIFICATION	2.070928649335263E-4	DESIGN
// If the token can tell us if it could be an identifier...	WITHOUT_CLASSIFICATION	0.9998874593199073	WITHOUT_CLASSIFICATION	1.1254068009270123E-4	DESIGN
// ... and the expected token type was an identifier, then:	WITHOUT_CLASSIFICATION	0.9999987192932617	WITHOUT_CLASSIFICATION	1.2807067383507726E-6	DESIGN
// Use the token as an identifier.	WITHOUT_CLASSIFICATION	0.999967554537764	WITHOUT_CLASSIFICATION	3.2445462235967844E-5	DESIGN
// Add the token to the AST.	WITHOUT_CLASSIFICATION	0.9999718100328648	WITHOUT_CLASSIFICATION	2.818996713519481E-5	DESIGN
// (NOT (EQ a b) ) => (NE a b)	WITHOUT_CLASSIFICATION	0.9995493442952323	WITHOUT_CLASSIFICATION	4.50655704767694E-4	DESIGN
// (NOT (NE a b) ) => (EQ a b)	WITHOUT_CLASSIFICATION	0.9995493442952323	WITHOUT_CLASSIFICATION	4.50655704767694E-4	DESIGN
// (NOT (LT a b) ) => (GE a b)	WITHOUT_CLASSIFICATION	0.9995995731915763	WITHOUT_CLASSIFICATION	4.00426808423587E-4	DESIGN
// (NOT (GE a b) ) => (LT a b)	WITHOUT_CLASSIFICATION	0.9995995731915763	WITHOUT_CLASSIFICATION	4.00426808423587E-4	DESIGN
// (NOT (LE a b) ) => (GT a b)	WITHOUT_CLASSIFICATION	0.9995960942151727	WITHOUT_CLASSIFICATION	4.03905784827288E-4	DESIGN
// (NOT (LIKE a b) ) => (NOT_LIKE a b)	WITHOUT_CLASSIFICATION	0.9997663152642259	WITHOUT_CLASSIFICATION	2.336847357741659E-4	DESIGN
// (NOT (NOT_LIKE a b) ) => (LIKE a b)	WITHOUT_CLASSIFICATION	0.9997663152642259	WITHOUT_CLASSIFICATION	2.336847357741659E-4	DESIGN
// (NOT (IS_NOT_NULL a b) ) => (IS_NULL a b)	WITHOUT_CLASSIFICATION	0.9996805878114438	WITHOUT_CLASSIFICATION	3.194121885562099E-4	DESIGN
// (NOT (BETWEEN a b) ) => (NOT_BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9997865254767724	WITHOUT_CLASSIFICATION	2.1347452322753523E-4	DESIGN
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999601950799372	WITHOUT_CLASSIFICATION	3.980492006293886E-5	DESIGN
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999617550848683	WITHOUT_CLASSIFICATION	3.824491513177798E-5	DESIGN
// if // if // Otherwise, handle the error normally.	WITHOUT_CLASSIFICATION	0.9997523528911308	WITHOUT_CLASSIFICATION	2.47647108869156E-4	DESIGN
// (NOT (NOT_BETWEEN a b) ) => (BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9997865254767724	WITHOUT_CLASSIFICATION	2.1347452322753523E-4	DESIGN
/* This can never happen because this rule will always eliminate the child NOT.	WITHOUT_CLASSIFICATION	0.9997602995793125	WITHOUT_CLASSIFICATION	2.3970042068760216E-4	DESIGN
// Just add a 'not' parent.	WITHOUT_CLASSIFICATION	0.9999953484084037	WITHOUT_CLASSIFICATION	4.651591596326213E-6	DESIGN
// (EQ NULL b) => (IS_NULL b)	WITHOUT_CLASSIFICATION	0.9997353697122289	WITHOUT_CLASSIFICATION	2.6463028777114434E-4	DESIGN
// (EQ a NULL) => (IS_NULL a)	WITHOUT_CLASSIFICATION	0.9997315642225225	WITHOUT_CLASSIFICATION	2.6843577747755453E-4	DESIGN
// NOTE: Because we're using ASTUtil.createParent(), the tree must be created from the bottom up. // IS EMPTY x => (EXISTS (QUERY (SELECT_FROM (FROM x) ) ) )	WITHOUT_CLASSIFICATION	0.9998648350005446	WITHOUT_CLASSIFICATION	1.3516499945547979E-4	DESIGN
// Add NOT if it's negated.	WITHOUT_CLASSIFICATION	0.9999282967818018	WITHOUT_CLASSIFICATION	7.170321819816864E-5	DESIGN
// Create nodes that track line and column number.	WITHOUT_CLASSIFICATION	0.9999974330444966	WITHOUT_CLASSIFICATION	2.5669555034656426E-6	DESIGN
// Case 1: Multi token keywords GROUP BY and ORDER BY // The next token ( LT(2) ) should be 'by'... otherwise, this is just an ident.	WITHOUT_CLASSIFICATION	0.9990387852608877	WITHOUT_CLASSIFICATION	9.612147391121942E-4	DESIGN
// Case 2: The current token is after FROM and before '.'.	WITHOUT_CLASSIFICATION	0.9999943109177694	WITHOUT_CLASSIFICATION	5.689082230573938E-6	DESIGN
// This handles HHH-354, where there is a strange property name in a where clause. // If the lookahead contains a DOT then something that isn't an IDENT...	WITHOUT_CLASSIFICATION	0.9755804820955297	WITHOUT_CLASSIFICATION	0.02441951790447035	DESIGN
// See if the second lookahed token can be an identifier.	WITHOUT_CLASSIFICATION	0.9999915900429392	WITHOUT_CLASSIFICATION	8.409957060756543E-6	DESIGN
// Set it!	WITHOUT_CLASSIFICATION	0.9998757459466684	WITHOUT_CLASSIFICATION	1.2425405333167053E-4	DESIGN
// ignore	WITHOUT_CLASSIFICATION	0.9999770031580442	WITHOUT_CLASSIFICATION	2.2996841955798397E-5	DESIGN
// strip the " where "	WITHOUT_CLASSIFICATION	0.9999817262339435	WITHOUT_CLASSIFICATION	1.8273766056435747E-5	DESIGN
// Don't really know all the codes required to adequately decipher returned jdbc exceptions here. // simply allow the failure to be eaten and the subsequent insert-selects/deletes should fail	WITHOUT_CLASSIFICATION	0.9997881966273792	WITHOUT_CLASSIFICATION	2.11803372620893E-4	DESIGN
// at the very least cleanup the data :)	WITHOUT_CLASSIFICATION	0.9999950387205692	WITHOUT_CLASSIFICATION	4.961279430795842E-6	DESIGN
// First, save off the pertinent ids, as the return value	WITHOUT_CLASSIFICATION	0.9999989927273039	WITHOUT_CLASSIFICATION	1.0072726961473244E-6	DESIGN
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999334982292569	WITHOUT_CLASSIFICATION	6.650177074306835E-5	DESIGN
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999334982292569	WITHOUT_CLASSIFICATION	6.650177074306835E-5	DESIGN
// Start performing the updates	WITHOUT_CLASSIFICATION	0.9999849267440419	WITHOUT_CLASSIFICATION	1.5073255958022063E-5	DESIGN
// First, save off the pertinent ids, saving the number of pertinent ids for return	WITHOUT_CLASSIFICATION	0.9999983865109149	WITHOUT_CLASSIFICATION	1.6134890851518237E-6	DESIGN
// Start performing the deletes	WITHOUT_CLASSIFICATION	0.999987970184639	WITHOUT_CLASSIFICATION	1.2029815360999307E-5	DESIGN
// otherwise, everything ok.	WITHOUT_CLASSIFICATION	0.9999750016965536	WITHOUT_CLASSIFICATION	2.499830344646717E-5	DESIGN
// visit width-first, then depth	WITHOUT_CLASSIFICATION	0.9999175539117289	WITHOUT_CLASSIFICATION	8.24460882711456E-5	DESIGN
// if the types report logical equivalence, return true...	WITHOUT_CLASSIFICATION	0.9999395459838131	WITHOUT_CLASSIFICATION	6.045401618692536E-5	DESIGN
// otherwise, perform a "deep equivalence" check...	WITHOUT_CLASSIFICATION	0.999998785173396	WITHOUT_CLASSIFICATION	1.2148266039776243E-6	DESIGN
// If there is no WHERE node, make one.	WITHOUT_CLASSIFICATION	0.9999702773709612	WITHOUT_CLASSIFICATION	2.9722629038765264E-5	DESIGN
// inject the WHERE after the parent	WITHOUT_CLASSIFICATION	0.9999986920579219	WITHOUT_CLASSIFICATION	1.3079420780601126E-6	DESIGN
// Never include subclasses for implied from elements.	WITHOUT_CLASSIFICATION	0.9999854224406921	WITHOUT_CLASSIFICATION	1.457755930801006E-5	DESIGN
// Moved here from SelectClause [jsd]	WITHOUT_CLASSIFICATION	0.9993417776413616	WITHOUT_CLASSIFICATION	6.582223586384991E-4	DESIGN
///////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9995769085686194	WITHOUT_CLASSIFICATION	4.230914313806368E-4	DESIGN
// Use the table fromElement and the property name to get the array of column names.	WITHOUT_CLASSIFICATION	0.999971930761082	WITHOUT_CLASSIFICATION	2.8069238918009873E-5	DESIGN
// Set the attributes of the property reference expression.	WITHOUT_CLASSIFICATION	0.9998782851117546	WITHOUT_CLASSIFICATION	1.2171488824537514E-4	DESIGN
// If the uresolved property path isn't set yet, just use the property name.	WITHOUT_CLASSIFICATION	0.9999970198746775	WITHOUT_CLASSIFICATION	2.9801253224126366E-6	DESIGN
// The 'from element' that the property is in.	WITHOUT_CLASSIFICATION	0.9999051038944116	WITHOUT_CLASSIFICATION	9.489610558839093E-5	DESIGN
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999813224736542	WITHOUT_CLASSIFICATION	1.867752634581439E-5	DESIGN
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999813224736542	WITHOUT_CLASSIFICATION	1.867752634581439E-5	DESIGN
// If this dot has already been resolved, stop now.	WITHOUT_CLASSIFICATION	0.9993779441972588	WITHOUT_CLASSIFICATION	6.22055802741313E-4	DESIGN
// If there is no data type for this node, and we're at the end of the path (top most dot node), then // this might be a Java constant.	WITHOUT_CLASSIFICATION	0.9999214242378676	WITHOUT_CLASSIFICATION	7.857576213241822E-5	DESIGN
// The property is a collection...	WITHOUT_CLASSIFICATION	0.9998784597978451	WITHOUT_CLASSIFICATION	1.2154020215500712E-4	DESIGN
// The property is a component...	WITHOUT_CLASSIFICATION	0.9998782378929408	WITHOUT_CLASSIFICATION	1.2176210705910235E-4	DESIGN
// The property is another class..	WITHOUT_CLASSIFICATION	0.9996451141359288	WITHOUT_CLASSIFICATION	3.5488586407118243E-4	DESIGN
// Otherwise, this is a primitive type.	WITHOUT_CLASSIFICATION	0.9995525977458242	WITHOUT_CLASSIFICATION	4.4740225417587697E-4	DESIGN
//foo.bars.size (also handles deprecated stuff like foo.bars.maxelement for backwardness)	WITHOUT_CLASSIFICATION	0.9996901910875544	WITHOUT_CLASSIFICATION	3.0980891244549374E-4	DESIGN
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9985959149705476	WITHOUT_CLASSIFICATION	0.0014040850294524969	DESIGN
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999957341030091	WITHOUT_CLASSIFICATION	4.265896990821444E-6	DESIGN
// in non-select queries, the only time we should need to join is if we are in a subquery from clause	WITHOUT_CLASSIFICATION	0.9992934200888354	WITHOUT_CLASSIFICATION	7.065799111647048E-4	DESIGN
// this is the regression style determination which matches the logic of the classic translator	WITHOUT_CLASSIFICATION	0.9986310995441066	WITHOUT_CLASSIFICATION	0.0013689004558934629	DESIGN
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9985959149705476	WITHOUT_CLASSIFICATION	0.0014040850294524969	DESIGN
// even though we might find a pre-existing element by join path, we may not be able to reuse it...	WITHOUT_CLASSIFICATION	0.9995531269698346	WITHOUT_CLASSIFICATION	4.4687303016552066E-4	DESIGN
// NOTE : addDuplicateAlias() already performs nullness checks on the alias.	WITHOUT_CLASSIFICATION	0.9999961961787874	WITHOUT_CLASSIFICATION	3.8038212125717754E-6	DESIGN
// if the from-clauses are the same, we can be a little more aggressive in terms of what we reuse	WITHOUT_CLASSIFICATION	0.9980018967890723	WITHOUT_CLASSIFICATION	0.001998103210927799	DESIGN
// again, null != null here	WITHOUT_CLASSIFICATION	0.9999558101715251	WITHOUT_CLASSIFICATION	4.418982847492835E-5	DESIGN
// If this is an implied join in a from element, then use the impled join type which is part of the // tree parser's state (set by the gramamar actions).	WITHOUT_CLASSIFICATION	0.9999959738803154	WITHOUT_CLASSIFICATION	4.026119684699893E-6	DESIGN
// otherwise (subquery case) dont reuse the fromElement if we are processing the from-clause of the subquery	WITHOUT_CLASSIFICATION	0.9979654151783292	WITHOUT_CLASSIFICATION	0.00203458482167089	DESIGN
// we know only the lhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999707443188717	WITHOUT_CLASSIFICATION	2.9255681128388934E-5	DESIGN
// the referenced node text is the special 'id'	WITHOUT_CLASSIFICATION	0.9999196337948313	WITHOUT_CLASSIFICATION	8.03662051687233E-5	DESIGN
// only the identifier property field name can be a reference to the associated entity's PK...	WITHOUT_CLASSIFICATION	0.9999912243418714	WITHOUT_CLASSIFICATION	8.775658128738364E-6	DESIGN
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.999994970477321	WITHOUT_CLASSIFICATION	5.029522678975018E-6	DESIGN
// Append the new property name onto the unresolved path.	WITHOUT_CLASSIFICATION	0.999999315056121	WITHOUT_CLASSIFICATION	6.849438789456722E-7	DESIGN
// If the lhs is a collection, use CollectionPropertyMapping	WITHOUT_CLASSIFICATION	0.999824058835839	WITHOUT_CLASSIFICATION	1.759411641610452E-4	DESIGN
// Tell the destination fromElement to 'includeSubclasses'.	WITHOUT_CLASSIFICATION	0.9996149890051325	WITHOUT_CLASSIFICATION	3.850109948675089E-4	DESIGN
// Use theta style (for regression) // Move the node up, after the origin node.	WITHOUT_CLASSIFICATION	0.9995329951507206	WITHOUT_CLASSIFICATION	4.670048492793912E-4	DESIGN
// Don't resolve the node again.	WITHOUT_CLASSIFICATION	0.9999824774190066	WITHOUT_CLASSIFICATION	1.7522580993379152E-5	DESIGN
// for expected parameter type injection, we expect that the lhs represents // some form of property ref and that the children of the in-list represent // one-or-more params.	WITHOUT_CLASSIFICATION	0.9999999759316692	WITHOUT_CLASSIFICATION	2.4068330730304108E-8	DESIGN
// we need to strip off the embedded parens so that sql-gen does not double these up	WITHOUT_CLASSIFICATION	0.9999981717272761	WITHOUT_CLASSIFICATION	1.8282727238891019E-6	DESIGN
// we have something like : "? [op] rhs"	WITHOUT_CLASSIFICATION	0.9989338435341063	WITHOUT_CLASSIFICATION	0.0010661564658936697	DESIGN
// we have something like : "lhs [op] ?"	WITHOUT_CLASSIFICATION	0.9987620458396097	WITHOUT_CLASSIFICATION	0.0012379541603903096	DESIGN
// we know only the rhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999820461396804	WITHOUT_CLASSIFICATION	1.795386031948989E-5	DESIGN
// handle the (assumed) valid cases: // #1 - the only valid datetime addition synatx is one or the other is a datetime (but not both)	WITHOUT_CLASSIFICATION	0.9998732170022633	WITHOUT_CLASSIFICATION	1.2678299773664808E-4	DESIGN
// one or the other needs to be a datetime for us to get into this method in the first place...	WITHOUT_CLASSIFICATION	0.9998383088064223	WITHOUT_CLASSIFICATION	1.6169119357768794E-4	DESIGN
// #3 - note that this is also true of "datetime - :param"...	WITHOUT_CLASSIFICATION	0.9998092887964762	WITHOUT_CLASSIFICATION	1.907112035238249E-4	DESIGN
// #2	WITHOUT_CLASSIFICATION	0.9998971051334337	WITHOUT_CLASSIFICATION	1.0289486656632793E-4	DESIGN
// Generate the inner join -- The elements need to be joined to the collection they are in.	WITHOUT_CLASSIFICATION	0.9999988519971724	WITHOUT_CLASSIFICATION	1.1480028276112686E-6	DESIGN
// nothing to do	WITHOUT_CLASSIFICATION	0.9997302664868012	WITHOUT_CLASSIFICATION	2.6973351319877707E-4	DESIGN
// The 'from element' that represents the elements of the collection.	WITHOUT_CLASSIFICATION	0.9999785802081019	WITHOUT_CLASSIFICATION	2.1419791898015318E-5	DESIGN
// Add the condition to the join sequence that qualifies the indexed element.	WITHOUT_CLASSIFICATION	0.9999982921616449	WITHOUT_CLASSIFICATION	1.7078383549925845E-6	DESIGN
// Sometimes use the element table alias, sometimes use the... umm... collection table alias (many to many)	WITHOUT_CLASSIFICATION	0.9999784445427825	WITHOUT_CLASSIFICATION	2.1555457217516177E-5	DESIGN
// Now, set the text for this node.  It should be the element columns.	WITHOUT_CLASSIFICATION	0.9705188011567625	WITHOUT_CLASSIFICATION	0.02948119884323753	DESIGN
// Get the function return value type, based on the type of the first argument.	WITHOUT_CLASSIFICATION	0.9999958822062432	WITHOUT_CLASSIFICATION	4.11779375677135E-6	DESIGN
// This will call initialize(tok)!	WITHOUT_CLASSIFICATION	0.990964183653332	WITHOUT_CLASSIFICATION	0.009035816346667851	DESIGN
// mutation depends on the types of nodes invloved...	WITHOUT_CLASSIFICATION	0.9991614281831961	WITHOUT_CLASSIFICATION	8.385718168039888E-4	DESIGN
// "pass along" our initial embedded parameter node(s) to the first generated // sql fragment so that it can be handled later for parameter binding...	WITHOUT_CLASSIFICATION	0.9999946558263615	WITHOUT_CLASSIFICATION	5.344173638487394E-6	DESIGN
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999921611098193	WITHOUT_CLASSIFICATION	7.83889018086282E-6	DESIGN
// Generated select expressions are already resolved, nothing to do.	WITHOUT_CLASSIFICATION	0.9999612273697226	WITHOUT_CLASSIFICATION	3.8772630277366174E-5	DESIGN
// The path may be a reference to an alias defined in the parent query.	WITHOUT_CLASSIFICATION	0.9999855324948226	WITHOUT_CLASSIFICATION	1.4467505177268885E-5	DESIGN
// The HQL class alias refers to the class name.	WITHOUT_CLASSIFICATION	0.9998855572577677	WITHOUT_CLASSIFICATION	1.1444274223230696E-4	DESIGN
// Associate the table alias with the element.	WITHOUT_CLASSIFICATION	0.9999523205888585	WITHOUT_CLASSIFICATION	4.767941114145358E-5	DESIGN
// try the parent FromClause...	WITHOUT_CLASSIFICATION	0.9999984781682061	WITHOUT_CLASSIFICATION	1.5218317938740635E-6	DESIGN
// Add the new node to the map so that we don't create it twice.	WITHOUT_CLASSIFICATION	0.9999982012477984	WITHOUT_CLASSIFICATION	1.7987522017114666E-6	DESIGN
// Make sure that all from elements registered with this FROM clause are actually in the AST.	WITHOUT_CLASSIFICATION	0.9991029194157184	WITHOUT_CLASSIFICATION	8.970805842816355E-4	DESIGN
// Invoke setScalarColumnText on each constructor argument.	WITHOUT_CLASSIFICATION	0.9999843549069541	WITHOUT_CLASSIFICATION	1.564509304584286E-5	DESIGN
// Collect the select expressions, skip the first child because it is the class name.	WITHOUT_CLASSIFICATION	0.9999972469574371	WITHOUT_CLASSIFICATION	2.753042562887879E-6	DESIGN
// return an empty Type array	WITHOUT_CLASSIFICATION	0.9999820569368081	WITHOUT_CLASSIFICATION	1.794306319188296E-5	DESIGN
// Constructors are always considered scalar results.	WITHOUT_CLASSIFICATION	0.9999372518732674	WITHOUT_CLASSIFICATION	6.274812673256342E-5	DESIGN
// this is the exception returned by ReflectHelper.getConstructor() if it cannot // locate an appropriate constructor	WITHOUT_CLASSIFICATION	0.9967904852732828	WITHOUT_CLASSIFICATION	0.0032095147267171553	DESIGN
// if there is no order by, make one	WITHOUT_CLASSIFICATION	0.999985725063092	WITHOUT_CLASSIFICATION	1.4274936908071339E-5	DESIGN
// Find the WHERE; if there is no WHERE, find the FROM...	WITHOUT_CLASSIFICATION	0.9998701914831943	WITHOUT_CLASSIFICATION	1.2980851680573208E-4	DESIGN
// Now, inject the newly built ORDER BY into the tree	WITHOUT_CLASSIFICATION	0.9999952993704028	WITHOUT_CLASSIFICATION	4.700629597288356E-6	DESIGN
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999990184793536	WITHOUT_CLASSIFICATION	9.815206464862966E-7	DESIGN
// logic operators by definition resolve to boolean.	WITHOUT_CLASSIFICATION	0.9999912409634177	WITHOUT_CLASSIFICATION	8.7590365822342E-6	DESIGN
// Render the identifier select fragment using the table alias.	WITHOUT_CLASSIFICATION	0.9999196112354429	WITHOUT_CLASSIFICATION	8.038876455706077E-5	DESIGN
// Class names in the FROM clause result in a JoinSequence (the old FromParser does this).	WITHOUT_CLASSIFICATION	0.995023071839306	WITHOUT_CLASSIFICATION	0.004976928160693933	DESIGN
// For many-to-many joins, use the tablename from the queryable collection for the default text.	WITHOUT_CLASSIFICATION	0.9999941606871664	WITHOUT_CLASSIFICATION	5.839312833621261E-6	DESIGN
// Otherwise, use the property mapping.	WITHOUT_CLASSIFICATION	0.9999976159365538	WITHOUT_CLASSIFICATION	2.3840634462143293E-6	DESIGN
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9995405442815186	WITHOUT_CLASSIFICATION	4.5945571848141905E-4	DESIGN
// If the property is a special collection property name, return a CollectionPropertyMapping.	WITHOUT_CLASSIFICATION	0.9999931281849365	WITHOUT_CLASSIFICATION	6.871815063533822E-6	DESIGN
// Collection of components.	WITHOUT_CLASSIFICATION	0.9999970443097133	WITHOUT_CLASSIFICATION	2.955690286751484E-6	DESIGN
// make sure the lhs is "assignable"...	WITHOUT_CLASSIFICATION	0.9999265436880221	WITHOUT_CLASSIFICATION	7.34563119778876E-5	DESIGN
// false indicates to not generate parens around the assignment	WITHOUT_CLASSIFICATION	0.9999525872612746	WITHOUT_CLASSIFICATION	4.741273872539476E-5	DESIGN
// Register the FromElement with the FROM clause, now that we have the names and aliases.	WITHOUT_CLASSIFICATION	0.9999304098547603	WITHOUT_CLASSIFICATION	6.959014523964963E-5	DESIGN
// currently allowed...	WITHOUT_CLASSIFICATION	0.9999665639068512	WITHOUT_CLASSIFICATION	3.343609314883018E-5	DESIGN
// HHH-276 : implied joins in a subselect where clause - The destination needs to be added // to the destination's from clause. // Not sure if this is will fix everything, but it works.	WITHOUT_CLASSIFICATION	0.9902849681683056	WITHOUT_CLASSIFICATION	0.009715031831694304	DESIGN
//return classAlias == null ? className : classAlias;	WITHOUT_CLASSIFICATION	0.9997609178543142	WITHOUT_CLASSIFICATION	2.3908214568571485E-4	DESIGN
// This is an explicit FROM element.	WITHOUT_CLASSIFICATION	0.9995405457048434	WITHOUT_CLASSIFICATION	4.594542951565224E-4	DESIGN
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999990184793536	WITHOUT_CLASSIFICATION	9.815206464862966E-7	DESIGN
// Fetch can't be used with scroll() or iterate().	WITHOUT_CLASSIFICATION	0.9998757579401744	WITHOUT_CLASSIFICATION	1.2424205982561708E-4	DESIGN
// If it's not implied or it is implied and it's a many to many join where the target wasn't found.	WITHOUT_CLASSIFICATION	0.9998109003297933	WITHOUT_CLASSIFICATION	1.8909967020684036E-4	DESIGN
// Since this is an explicit FROM element, it can't be implied in the FROM clause.	WITHOUT_CLASSIFICATION	0.9986935196821575	WITHOUT_CLASSIFICATION	0.0013064803178425694	DESIGN
// Do nothing, eplicit from elements are *always* in the projection list.	WITHOUT_CLASSIFICATION	0.9999989221358841	WITHOUT_CLASSIFICATION	1.0778641158113416E-6	DESIGN
// propertyName refers to something like collection.size...	WITHOUT_CLASSIFICATION	0.9999524930194539	WITHOUT_CLASSIFICATION	4.75069805460302E-5	DESIGN
// property name is a sub-path of a component...	WITHOUT_CLASSIFICATION	0.9999894737139329	WITHOUT_CLASSIFICATION	1.0526286067100344E-5	DESIGN
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999957341030091	WITHOUT_CLASSIFICATION	4.265896990821444E-6	DESIGN
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999357572391224	WITHOUT_CLASSIFICATION	6.424276087756642E-5	DESIGN
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999921611098193	WITHOUT_CLASSIFICATION	7.83889018086282E-6	DESIGN
// DotNode uses null here...	WITHOUT_CLASSIFICATION	0.9997138185291056	WITHOUT_CLASSIFICATION	2.86181470894461E-4	DESIGN
// We represent a from-clause alias	WITHOUT_CLASSIFICATION	0.9999376601188339	WITHOUT_CLASSIFICATION	6.233988116609558E-5	DESIGN
// we are the LHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9995192420098026	WITHOUT_CLASSIFICATION	4.8075799019734166E-4	DESIGN
// we are the RHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9993381158567936	WITHOUT_CLASSIFICATION	6.61884143206509E-4	DESIGN
// we represent a naked (simple) prop-ref	WITHOUT_CLASSIFICATION	0.9999635808271419	WITHOUT_CLASSIFICATION	3.641917285822479E-5	DESIGN
// EARLY EXIT!!!  return so the resolve call explicitly coming from DotNode can // resolve this...	WITHOUT_CLASSIFICATION	0.947951726372202	WITHOUT_CLASSIFICATION	0.052048273627797854	DESIGN
// assume this ident's text does *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9987808904329896	WITHOUT_CLASSIFICATION	0.0012191095670104392	DESIGN
// just ignore it for now, it'll get resolved later...	WITHOUT_CLASSIFICATION	0.9999522883633664	WITHOUT_CLASSIFICATION	4.771163663358997E-5	DESIGN
// This is not actually a constant, but a reference to FROM element.	WITHOUT_CLASSIFICATION	0.9966693790729797	WITHOUT_CLASSIFICATION	0.0033306209270201814	DESIGN
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999985591775495	WITHOUT_CLASSIFICATION	1.4408224505122817E-6	DESIGN
// these pieces are needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9999767893139785	WITHOUT_CLASSIFICATION	2.3210686021533403E-5	DESIGN
// used to set the type of the parent dot node	WITHOUT_CLASSIFICATION	0.9999920519339781	WITHOUT_CLASSIFICATION	7.948066021847099E-6	DESIGN
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999185700132805	WITHOUT_CLASSIFICATION	8.142998671950895E-5	DESIGN
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999185700132805	WITHOUT_CLASSIFICATION	8.142998671950895E-5	DESIGN
// naked property-refs cannot be used with an aliased from element	WITHOUT_CLASSIFICATION	0.9998016694066008	WITHOUT_CLASSIFICATION	1.9833059339931485E-4	DESIGN
// this piece is needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9983481836360284	WITHOUT_CLASSIFICATION	0.0016518163639716293	DESIGN
// do *not* over-write the column text, as that has already been // "rendered" during resolve	WITHOUT_CLASSIFICATION	0.9999942272206614	WITHOUT_CLASSIFICATION	5.7727793385747595E-6	DESIGN
// for some reason the antlr.CommonAST initialization routines force // this method to get called twice.  The first time with an empty string	WITHOUT_CLASSIFICATION	0.9996567205877611	WITHOUT_CLASSIFICATION	3.432794122388726E-4	DESIGN
// Look up class name using the first identifier in the path.	WITHOUT_CLASSIFICATION	0.9999967141607998	WITHOUT_CLASSIFICATION	3.285839200260131E-6	DESIGN
// Add to the query spaces.	WITHOUT_CLASSIFICATION	0.999983256262652	WITHOUT_CLASSIFICATION	1.6743737347971707E-5	DESIGN
// If the from element isn't in the same clause, create a new from element.	WITHOUT_CLASSIFICATION	0.9998672343964253	WITHOUT_CLASSIFICATION	1.3276560357471616E-4	DESIGN
// This is the root level node. // Generate an explicit from clause at the root.	WITHOUT_CLASSIFICATION	0.9976717228192687	WITHOUT_CLASSIFICATION	0.002328277180731283	DESIGN
// Correlated subqueries create 'special' implied from nodes // because correlated subselects can't use an ANSI-style join	WITHOUT_CLASSIFICATION	0.9999947195234995	WITHOUT_CLASSIFICATION	5.28047650052927E-6	DESIGN
// super-duper-classic-parser-regression-testing-mojo-magic...	WITHOUT_CLASSIFICATION	0.9999875996352933	WITHOUT_CLASSIFICATION	1.2400364706780868E-5	DESIGN
// A collection of entities...	WITHOUT_CLASSIFICATION	0.9999876669460808	WITHOUT_CLASSIFICATION	1.2333053919214442E-5	DESIGN
// A collection of components...	WITHOUT_CLASSIFICATION	0.9999968633447107	WITHOUT_CLASSIFICATION	3.1366552893388393E-6	DESIGN
// A collection of scalar elements...	WITHOUT_CLASSIFICATION	0.9999849080240093	WITHOUT_CLASSIFICATION	1.5091975990736766E-5	DESIGN
// according to both the ANSI-SQL and EJB3 specs, trim can either take // exactly one parameter or a variable number of parameters between 1 and 4. // from the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If only <trim specification> is omitted, BOTH is assumed; // if <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999682143651247	WITHOUT_CLASSIFICATION	3.1785634875185865E-5	DESIGN
// Don't include sub-classes for implied collection joins or subquery joins.	WITHOUT_CLASSIFICATION	0.999998853465088	WITHOUT_CLASSIFICATION	1.146534912091846E-6	DESIGN
// Treat explict from elements in sub-queries properly.	WITHOUT_CLASSIFICATION	0.9997844278568214	WITHOUT_CLASSIFICATION	2.155721431785099E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9992342288671854	WITHOUT_CLASSIFICATION	7.657711328146887E-4	DESIGN
// the "root from-element" in correlated subqueries do need this piece	WITHOUT_CLASSIFICATION	0.9999922222268	WITHOUT_CLASSIFICATION	7.777773200153243E-6	DESIGN
// Create the FROM element for the target (the elements of the collection).	WITHOUT_CLASSIFICATION	0.9999990090781479	WITHOUT_CLASSIFICATION	9.909218521192938E-7	DESIGN
// If the join is implied, then don't include sub-classes on the element.	WITHOUT_CLASSIFICATION	0.9999588040064159	WITHOUT_CLASSIFICATION	4.1195993584121894E-5	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999943396600975	WITHOUT_CLASSIFICATION	5.6603399024099825E-6	DESIGN
// The associated entity is implied, but it must be included in the FROM. // The collection alias is the role.	WITHOUT_CLASSIFICATION	0.9999976255281788	WITHOUT_CLASSIFICATION	2.374471821042661E-6	DESIGN
// Tag this node as a JOIN. // Don't include subclasses in the join. // This is a clollection join.	WITHOUT_CLASSIFICATION	0.98826910038705	WITHOUT_CLASSIFICATION	0.01173089961295004	DESIGN
// Get the class name of the associated entity.	WITHOUT_CLASSIFICATION	0.9999962902077091	WITHOUT_CLASSIFICATION	3.7097922910121377E-6	DESIGN
//  origin, path, implied, columns, classAlias,	WITHOUT_CLASSIFICATION	0.9999864869731282	WITHOUT_CLASSIFICATION	1.3513026871843191E-5	DESIGN
/*implied*/	WITHOUT_CLASSIFICATION	0.9998008480203393	WITHOUT_CLASSIFICATION	1.991519796607068E-4	DESIGN
// For implied many-to-many, just add the end join.	WITHOUT_CLASSIFICATION	0.999999557918489	WITHOUT_CLASSIFICATION	4.4208151089388723E-7	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999943396600975	WITHOUT_CLASSIFICATION	5.6603399024099825E-6	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999943396600975	WITHOUT_CLASSIFICATION	5.6603399024099825E-6	DESIGN
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999932703522489	WITHOUT_CLASSIFICATION	6.729647751060412E-6	DESIGN
// This causes the factory to instantiate the desired class.	WITHOUT_CLASSIFICATION	0.9980270699758211	WITHOUT_CLASSIFICATION	0.001972930024178847	DESIGN
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9999552417048729	WITHOUT_CLASSIFICATION	4.475829512710822E-5	DESIGN
// Frontbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9998167462565665	WITHOUT_CLASSIFICATION	1.8325374343358336E-4	DESIGN
/*	WITHOUT_CLASSIFICATION	0.9964298771530864	WITHOUT_CLASSIFICATION	0.0035701228469137494	DESIGN
/*public Type[] getSqlResultTypes() {	WITHOUT_CLASSIFICATION	0.9995030853283068	WITHOUT_CLASSIFICATION	4.96914671693188E-4	DESIGN
// First, collect all of the select expressions. // NOTE: This must be done *before* invoking setScalarColumnText() because setScalarColumnText() // changes the AST!!!	WITHOUT_CLASSIFICATION	0.9999848259857774	WITHOUT_CLASSIFICATION	1.5174014222599538E-5	DESIGN
// First allow the actual type to control the return value. (the actual underlying sqltype could actually be different)	WITHOUT_CLASSIFICATION	0.9999914674422583	WITHOUT_CLASSIFICATION	8.53255774165115E-6	DESIGN
//sqlResultTypeList.addAll( constructorArgumentTypeList );	WITHOUT_CLASSIFICATION	0.9999190031808013	WITHOUT_CLASSIFICATION	8.099681919864176E-5	DESIGN
// If the data type is not an association type, it could not have been in the FROM clause.	WITHOUT_CLASSIFICATION	0.9997668923613687	WITHOUT_CLASSIFICATION	2.3310763863122785E-4	DESIGN
//sqlResultTypeList.add( type );	WITHOUT_CLASSIFICATION	0.9999502394515294	WITHOUT_CLASSIFICATION	4.976054847056848E-5	DESIGN
// Always add the type to the return type list.	WITHOUT_CLASSIFICATION	0.999992634513877	WITHOUT_CLASSIFICATION	7.365486122970208E-6	DESIGN
// add the fetched entities	WITHOUT_CLASSIFICATION	0.9999920162329272	WITHOUT_CLASSIFICATION	7.983767072678174E-6	DESIGN
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9998853643957554	WITHOUT_CLASSIFICATION	1.1463560424466665E-4	DESIGN
// function support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999073787618616	WITHOUT_CLASSIFICATION	9.262123813837002E-5	DESIGN
// If there are any scalars (non-entities) selected, render the select column aliases.	WITHOUT_CLASSIFICATION	0.9999952402057862	WITHOUT_CLASSIFICATION	4.759794213767243E-6	DESIGN
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9996641214692782	WITHOUT_CLASSIFICATION	3.3587853072174987E-4	DESIGN
/*ArrayList sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9999602713971699	WITHOUT_CLASSIFICATION	3.972860283016925E-5	DESIGN
//sqlResultTypes = ( Type[] ) sqlResultTypeList.toArray( new Type[sqlResultTypeList.size()] );	WITHOUT_CLASSIFICATION	0.999979074850852	WITHOUT_CLASSIFICATION	2.0925149147951033E-5	DESIGN
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999636694208288	WITHOUT_CLASSIFICATION	3.633057917109751E-5	DESIGN
//TODO:	WITHOUT_CLASSIFICATION	0.961067388424281	WITHOUT_CLASSIFICATION	0.03893261157571912	DESIGN
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999925132155205	WITHOUT_CLASSIFICATION	7.486784479498226E-6	DESIGN
// Generate an 2d array of column names, the first dimension is parallel with the // return types array.  The second dimension is the list of column names for each // type.	WITHOUT_CLASSIFICATION	0.9999918784341089	WITHOUT_CLASSIFICATION	8.121565891174344E-6	DESIGN
// Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999866697330713	WITHOUT_CLASSIFICATION	1.3330266928715614E-5	DESIGN
// union subclass support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999334793767746	WITHOUT_CLASSIFICATION	6.652062322542115E-5	DESIGN
// Skip 'DISTINCT' and 'ALL', so we return the first expression node.	WITHOUT_CLASSIFICATION	0.999776271726065	WITHOUT_CLASSIFICATION	2.2372827393509758E-4	DESIGN
// Create SQL_TOKEN nodes for the columns.	WITHOUT_CLASSIFICATION	0.9999752826425572	WITHOUT_CLASSIFICATION	2.4717357442859224E-5	DESIGN
// Generate the property select tokens.	WITHOUT_CLASSIFICATION	0.9999945233414114	WITHOUT_CLASSIFICATION	5.4766585886451525E-6	DESIGN
// Get the function name node.	WITHOUT_CLASSIFICATION	0.9996665758949995	WITHOUT_CLASSIFICATION	3.3342410500047356E-4	DESIGN
// Method expressions in a SELECT should always be considered scalar.	WITHOUT_CLASSIFICATION	0.9892441966621129	WITHOUT_CLASSIFICATION	0.010755803337887093	DESIGN
// If this is 'elements' then create a new FROM element.	WITHOUT_CLASSIFICATION	0.9998734105935173	WITHOUT_CLASSIFICATION	1.265894064826594E-4	DESIGN
// Not elements(x)	WITHOUT_CLASSIFICATION	0.9999902584069136	WITHOUT_CLASSIFICATION	9.741593086471753E-6	DESIGN
// Dialect function	WITHOUT_CLASSIFICATION	0.9999846994087855	WITHOUT_CLASSIFICATION	1.530059121446325E-5	DESIGN
// Collection 'property function'	WITHOUT_CLASSIFICATION	0.9999968163747475	WITHOUT_CLASSIFICATION	3.1836252525500933E-6	DESIGN
// If the constant is an IDENT, figure out what it means...	WITHOUT_CLASSIFICATION	0.9999749131185035	WITHOUT_CLASSIFICATION	2.508688149648568E-5	DESIGN
// IDENT is a class alias in the FROM.	WITHOUT_CLASSIFICATION	0.9997290684578575	WITHOUT_CLASSIFICATION	2.7093154214255895E-4	DESIGN
// Resolve to an identity column.	WITHOUT_CLASSIFICATION	0.9999700009598823	WITHOUT_CLASSIFICATION	2.9999040117763056E-5	DESIGN
// Otherwise, it's a literal.	WITHOUT_CLASSIFICATION	0.9999732879035733	WITHOUT_CLASSIFICATION	2.6712096426667914E-5	DESIGN
// the name of an entity class	WITHOUT_CLASSIFICATION	0.9999954831751557	WITHOUT_CLASSIFICATION	4.516824844191252E-6	DESIGN
//the class discriminator value	WITHOUT_CLASSIFICATION	0.999890730333407	WITHOUT_CLASSIFICATION	1.0926966659297448E-4	DESIGN
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999948880603796	WITHOUT_CLASSIFICATION	5.111939620356016E-6	DESIGN
// Add a space before the display text.	WITHOUT_CLASSIFICATION	0.9999875786842232	WITHOUT_CLASSIFICATION	1.2421315776910966E-5	DESIGN
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9997473822840475	WITHOUT_CLASSIFICATION	2.5261771595250975E-4	DESIGN
// child == parent.getFirstChild()	WITHOUT_CLASSIFICATION	0.999999675767244	WITHOUT_CLASSIFICATION	3.2423275593046355E-7	DESIGN
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9997473822840475	WITHOUT_CLASSIFICATION	2.5261771595250975E-4	DESIGN
// Filter conditions need to be inserted before the HQL where condition and the // theta join node.  This is because org.hibernate.loader.Loader binds the filter parameters first, // then it binds all the HQL query parameters, see org.hibernate.loader.Loader.processFilterParameters().	WITHOUT_CLASSIFICATION	0.9999845991443527	WITHOUT_CLASSIFICATION	1.5400855647318242E-5	DESIGN
// Put the FILTERS node before the HQL condition and theta joins	WITHOUT_CLASSIFICATION	0.9999841284627261	WITHOUT_CLASSIFICATION	1.5871537273820815E-5	DESIGN
// add the current fragment to the FILTERS node	WITHOUT_CLASSIFICATION	0.9999965049869145	WITHOUT_CLASSIFICATION	3.4950130855322005E-6	DESIGN
// Create a new THETA_JOINS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999775827573018	WITHOUT_CLASSIFICATION	2.241724269823245E-5	DESIGN
// Put the THETA_JOINS node before the HQL condition, after the filters.	WITHOUT_CLASSIFICATION	0.9994015323096438	WITHOUT_CLASSIFICATION	5.98467690356238E-4	DESIGN
// add the current fragment to the THETA_JOINS node	WITHOUT_CLASSIFICATION	0.9999833906957787	WITHOUT_CLASSIFICATION	1.6609304221311506E-5	DESIGN
// First, try to get the persister using the given name directly.	WITHOUT_CLASSIFICATION	0.9999992294241361	WITHOUT_CLASSIFICATION	7.705758638899451E-7	DESIGN
// unable to locate it using this name	WITHOUT_CLASSIFICATION	0.9930943897758654	WITHOUT_CLASSIFICATION	0.00690561022413467	DESIGN
// If that didn't work, try using the 'import' name.	WITHOUT_CLASSIFICATION	0.9998623476682309	WITHOUT_CLASSIFICATION	1.3765233176910038E-4	DESIGN
// Implicit joins use theta style (WHERE pk = fk), explicit joins use JOIN (after from)	WITHOUT_CLASSIFICATION	0.9999909238155232	WITHOUT_CLASSIFICATION	9.076184476702305E-6	DESIGN
// locate the registered function by the given name	WITHOUT_CLASSIFICATION	0.9999846186363146	WITHOUT_CLASSIFICATION	1.5381363685337773E-5	DESIGN
// determine the type of the first argument...	WITHOUT_CLASSIFICATION	0.9999924193456331	WITHOUT_CLASSIFICATION	7.580654366906479E-6	DESIGN
// Use the DOT node to emit the first column name. // Create the column names, folled by the column aliases.	WITHOUT_CLASSIFICATION	0.999974293894406	WITHOUT_CLASSIFICATION	2.570610559402589E-5	DESIGN
// Note: this simply constructs a "raw" SQL_TOKEN representing the // where fragment and injects this into the tree.  This "works"; // however it is probably not the best long-term solution. // // At some point we probably want to apply an additional grammar to // properly tokenize this where fragment into constituent parts // focused on the operators embedded within the fragment.	WITHOUT_CLASSIFICATION	0.9944038934148207	WITHOUT_CLASSIFICATION	0.005596106585179295	DESIGN
// Append the text of the current node.	WITHOUT_CLASSIFICATION	0.9999941867847032	WITHOUT_CLASSIFICATION	5.813215296705253E-6	DESIGN
// If the node has a first child, recurse into the first child.	WITHOUT_CLASSIFICATION	0.9999746157823626	WITHOUT_CLASSIFICATION	2.5384217637453828E-5	DESIGN
// If there is a second child (RHS), recurse into that child.	WITHOUT_CLASSIFICATION	0.9999079216158249	WITHOUT_CLASSIFICATION	9.207838417513637E-5	DESIGN
// Iterate through the alias,JoinSequence pairs and generate SQL token nodes.	WITHOUT_CLASSIFICATION	0.9999904830485964	WITHOUT_CLASSIFICATION	9.516951403548764E-6	DESIGN
// If the from element represents a JOIN_FRAGMENT and it is // a theta-style join, convert its type from JOIN_FRAGMENT // to FROM_FRAGMENT	WITHOUT_CLASSIFICATION	0.9999640289463539	WITHOUT_CLASSIFICATION	3.597105364614692E-5	DESIGN
// this is used during SqlGenerator processing	WITHOUT_CLASSIFICATION	0.8969771249264014	WITHOUT_CLASSIFICATION	0.10302287507359856	DESIGN
// If there is a FROM fragment and the FROM element is an explicit, then add the from part.	WITHOUT_CLASSIFICATION	0.9999983604650585	WITHOUT_CLASSIFICATION	1.6395349415275433E-6	DESIGN
/*&& StringHelper.isNotEmpty( frag )*/	WITHOUT_CLASSIFICATION	0.9999524781622894	WITHOUT_CLASSIFICATION	4.7521837710632356E-5	DESIGN
// The FROM fragment will probably begin with ', '.  Remove this if it is present.	WITHOUT_CLASSIFICATION	0.9625431319182389	WITHOUT_CLASSIFICATION	0.03745686808176106	DESIGN
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9998533027556101	WITHOUT_CLASSIFICATION	1.4669724438988143E-4	DESIGN
// SELECT p FROM p IN CLASS eg.Person ORDER BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999689534240029	WITHOUT_CLASSIFICATION	3.104657599702607E-5	DESIGN
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.9713801465963695	WITHOUT_CLASSIFICATION	0.02861985340363043	DESIGN
//named query parameter	WITHOUT_CLASSIFICATION	0.9999711694593086	WITHOUT_CLASSIFICATION	2.883054069147693E-5	DESIGN
//default mode	WITHOUT_CLASSIFICATION	0.999666750894466	WITHOUT_CLASSIFICATION	3.332491055340118E-4	DESIGN
//QueryJoinFragment join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999861030438733	WITHOUT_CLASSIFICATION	1.3896956126808283E-5	DESIGN
//reset the dotcount (but not the path) //after reset!	WITHOUT_CLASSIFICATION	0.9999538432813799	WITHOUT_CLASSIFICATION	4.6156718620092947E-5	DESIGN
//after reset!	WITHOUT_CLASSIFICATION	0.9999468245663098	WITHOUT_CLASSIFICATION	5.317543369017853E-5	DESIGN
// we don't need to worry about any condition in the ON clause // here (toFromFragmentString), since anything in the ON condition // is already applied to the whole query	WITHOUT_CLASSIFICATION	0.9998989087667315	WITHOUT_CLASSIFICATION	1.010912332685259E-4	DESIGN
// bit_length feels a bit broken to me. We have to cast to char in order to // pass when a numeric value is supplied. But of course the answers given will // be wildly different for these two datatypes. 1234.5678 will be 9 bytes as // a char string but will be 8 or 16 bytes as a true numeric. // Jay Nance 2006-09-22	WITHOUT_CLASSIFICATION	0.9999999656237455	WITHOUT_CLASSIFICATION	3.4376254583207964E-8	DESIGN
// dotcount>=2	WITHOUT_CLASSIFICATION	0.999869553036147	WITHOUT_CLASSIFICATION	1.304469638529748E-4	DESIGN
// Do the corresponding RHS	WITHOUT_CLASSIFICATION	0.9999537668013407	WITHOUT_CLASSIFICATION	4.6233198659271714E-5	DESIGN
//if its "id"	WITHOUT_CLASSIFICATION	0.9997971127411116	WITHOUT_CLASSIFICATION	2.0288725888834754E-4	DESIGN
//or its the id property name	WITHOUT_CLASSIFICATION	0.9998761777851088	WITHOUT_CLASSIFICATION	1.2382221489108767E-4	DESIGN
//join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999772706944148	WITHOUT_CLASSIFICATION	2.272930558523566E-5	DESIGN
//important!!	WITHOUT_CLASSIFICATION	0.9998963130405806	WITHOUT_CLASSIFICATION	1.0368695941937005E-4	DESIGN
//String[] keyCols = collPersister.getKeyColumnNames();	WITHOUT_CLASSIFICATION	0.9999854862600117	WITHOUT_CLASSIFICATION	1.4513739988265355E-5	DESIGN
// an association	WITHOUT_CLASSIFICATION	0.9999601193352724	WITHOUT_CLASSIFICATION	3.9880664727584165E-5	DESIGN
//allow index() function:	WITHOUT_CLASSIFICATION	0.9985502219684309	WITHOUT_CLASSIFICATION	0.0014497780315691207	DESIGN
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.8947155321648288	WITHOUT_CLASSIFICATION	0.10528446783517124	DESIGN
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.9713801465963695	WITHOUT_CLASSIFICATION	0.02861985340363043	DESIGN
//many-to-many	WITHOUT_CLASSIFICATION	0.9997766168056639	WITHOUT_CLASSIFICATION	2.2338319433610495E-4	DESIGN
// collections of values	WITHOUT_CLASSIFICATION	0.9999653973347478	WITHOUT_CLASSIFICATION	3.4602665252343655E-5	DESIGN
//opening paren in new Foo ( ... )	WITHOUT_CLASSIFICATION	0.9999725324008811	WITHOUT_CLASSIFICATION	2.7467599118776904E-5	DESIGN
//if we are inside a new Result(), but not inside a nested function	WITHOUT_CLASSIFICATION	0.9997559228781688	WITHOUT_CLASSIFICATION	2.4407712183104678E-4	DESIGN
//special case	WITHOUT_CLASSIFICATION	0.9996985641557068	WITHOUT_CLASSIFICATION	3.014358442932799E-4	DESIGN
// the name of an SQL function	WITHOUT_CLASSIFICATION	0.9999695890216276	WITHOUT_CLASSIFICATION	3.041097837242351E-5	DESIGN
//null child could occur for no from clause in a filter	WITHOUT_CLASSIFICATION	0.9966997024462003	WITHOUT_CLASSIFICATION	0.0033002975537996717	DESIGN
//this is basically a copy/paste of OrderByParser ... might be worth refactoring	WITHOUT_CLASSIFICATION	0.9456316409005937	DESIGN	0.054368359099406335	WITHOUT_CLASSIFICATION
// SELECT p FROM p IN CLASS eg.Person GROUP BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999623347542006	WITHOUT_CLASSIFICATION	3.76652457994272E-5	DESIGN
// return aliases not supported in classic translator!	WITHOUT_CLASSIFICATION	0.9999758796531041	WITHOUT_CLASSIFICATION	2.4120346896002334E-5	DESIGN
//register collection role	WITHOUT_CLASSIFICATION	0.9999185983505607	WITHOUT_CLASSIFICATION	8.14016494392242E-5	DESIGN
// The keyword used to specify an identity column, if identity column key generation is supported.	WITHOUT_CLASSIFICATION	0.9999376060323311	WITHOUT_CLASSIFICATION	6.239396766885013E-5	DESIGN
//.getElementPropertyMapping();	WITHOUT_CLASSIFICATION	0.9999883193881862	WITHOUT_CLASSIFICATION	1.1680611813833972E-5	DESIGN
//crossJoins.add(name);	WITHOUT_CLASSIFICATION	0.999488257489545	WITHOUT_CLASSIFICATION	5.117425104549953E-4	DESIGN
//ie no select clause in HQL	WITHOUT_CLASSIFICATION	0.9991749278407932	WITHOUT_CLASSIFICATION	8.250721592067262E-4	DESIGN
// initialize the Set of queried identifier spaces (ie. tables)	WITHOUT_CLASSIFICATION	0.9999949175751742	WITHOUT_CLASSIFICATION	5.08242482573491E-6	DESIGN
//ie. no select clause	WITHOUT_CLASSIFICATION	0.9996301826960505	WITHOUT_CLASSIFICATION	3.6981730394942025E-4	DESIGN
//there _was_ a select clause	WITHOUT_CLASSIFICATION	0.9994926688270839	WITHOUT_CLASSIFICATION	5.073311729161577E-4	DESIGN
// return the concrete type, or the underlying type if a concrete type // was not specified	WITHOUT_CLASSIFICATION	0.9998909738055956	WITHOUT_CLASSIFICATION	1.0902619440443821E-4	DESIGN
//many-to-many	WITHOUT_CLASSIFICATION	0.9997766168056639	WITHOUT_CLASSIFICATION	2.2338319433610495E-4	DESIGN
//q.addCollection(collectionName, collectionRole);	WITHOUT_CLASSIFICATION	0.9999914834113556	WITHOUT_CLASSIFICATION	8.516588644457855E-6	DESIGN
// classic parser does not support bulk manipulation statements	WITHOUT_CLASSIFICATION	0.9999328535155809	WITHOUT_CLASSIFICATION	6.714648441916983E-5	DESIGN
// can't cache this stuff either (per-invocation)	WITHOUT_CLASSIFICATION	0.9997826664752847	WITHOUT_CLASSIFICATION	2.1733352471535643E-4	DESIGN
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9999065705660998	WITHOUT_CLASSIFICATION	9.342943390022048E-5	DESIGN
// This is the legacy behaviour for HQL queries...	WITHOUT_CLASSIFICATION	0.9997808714496295	WITHOUT_CLASSIFICATION	2.1912855037068077E-4	DESIGN
// not known!	WITHOUT_CLASSIFICATION	0.9998109665769004	WITHOUT_CLASSIFICATION	1.8903342309960303E-4	DESIGN
// not known!	WITHOUT_CLASSIFICATION	0.9998109665769004	WITHOUT_CLASSIFICATION	1.8903342309960303E-4	DESIGN
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9986509020940896	WITHOUT_CLASSIFICATION	0.0013490979059103676	DESIGN
// not known!	WITHOUT_CLASSIFICATION	0.9998109665769004	WITHOUT_CLASSIFICATION	1.8903342309960303E-4	DESIGN
// not known!	WITHOUT_CLASSIFICATION	0.9998109665769004	WITHOUT_CLASSIFICATION	1.8903342309960303E-4	DESIGN
//Need this, since join condition can appear inside parens!	WITHOUT_CLASSIFICATION	0.999862079192514	WITHOUT_CLASSIFICATION	1.37920807485911E-4	DESIGN
//tokens that close a sub expression //tokens that open a sub expression //tokens that would indicate a sub expression is a boolean expression	WITHOUT_CLASSIFICATION	0.9966803337735745	WITHOUT_CLASSIFICATION	0.0033196662264254983	DESIGN
//expressionTerminators.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.9999300212393446	WITHOUT_CLASSIFICATION	6.997876065537834E-5	DESIGN
//expressionOpeners.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.9999837549084662	WITHOUT_CLASSIFICATION	1.6245091533766695E-5	DESIGN
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource) // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9973241430378953	WITHOUT_CLASSIFICATION	0.0026758569621047348	DESIGN
// otherwise, a trim-specification and/or a trim-character // have been specified;  we need to decide which options // are present and "do the right thing" // should leading trim-characters be trimmed? // should trailing trim-characters be trimmed? // the trim-character (what is to be trimmed off?) // the trim-source (from where should it be trimmed?)	WITHOUT_CLASSIFICATION	0.9994408379343926	WITHOUT_CLASSIFICATION	5.591620656072907E-4	DESIGN
//Inside a BETWEEN ... AND ... expression	WITHOUT_CLASSIFICATION	0.9997860131364236	WITHOUT_CLASSIFICATION	2.1398686357650644E-4	DESIGN
//were an odd or even number of NOTs encountered //the join string built up by compound paths inside this expression //a flag indicating if the subexpression is known to be boolean	WITHOUT_CLASSIFICATION	0.997041242813532	WITHOUT_CLASSIFICATION	0.0029587571864679767	DESIGN
//ie. a many-to-many	WITHOUT_CLASSIFICATION	0.9999441137376405	WITHOUT_CLASSIFICATION	5.588626235945525E-5	DESIGN
//Cope with [,]	WITHOUT_CLASSIFICATION	0.9997676027552133	WITHOUT_CLASSIFICATION	2.3239724478672292E-4	DESIGN
//Cope with a continued path expression (ie. ].baz)	WITHOUT_CLASSIFICATION	0.9999469514908855	WITHOUT_CLASSIFICATION	5.3048509114425705E-5	DESIGN
//NOTE: early return	WITHOUT_CLASSIFICATION	0.9997578371690901	WITHOUT_CLASSIFICATION	2.421628309098427E-4	DESIGN
//Cope with a subselect	WITHOUT_CLASSIFICATION	0.998788416044375	WITHOUT_CLASSIFICATION	0.0012115839556250888	DESIGN
//Cope with special cases of AND, NOT, ()	WITHOUT_CLASSIFICATION	0.9976817043463875	WITHOUT_CLASSIFICATION	0.0023182956536125254	DESIGN
//Close extra brackets we opened	WITHOUT_CLASSIFICATION	0.9999169926846943	WITHOUT_CLASSIFICATION	8.300731530579844E-5	DESIGN
//take note when this is a boolean expression	WITHOUT_CLASSIFICATION	0.9987325881817021	WITHOUT_CLASSIFICATION	0.0012674118182979999	DESIGN
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999403613264882	WITHOUT_CLASSIFICATION	5.9638673511883574E-5	DESIGN
//process a token, mapping OO path expressions to SQL expressions	WITHOUT_CLASSIFICATION	0.9997357184847284	WITHOUT_CLASSIFICATION	2.64281515271543E-4	DESIGN
//Open any extra brackets we might need.	WITHOUT_CLASSIFICATION	0.9992244484344884	WITHOUT_CLASSIFICATION	7.755515655116381E-4	DESIGN
//Cope with special cases of AND, NOT, )	WITHOUT_CLASSIFICATION	0.9981245197387306	WITHOUT_CLASSIFICATION	0.0018754802612693325	DESIGN
// the next one up must also be	WITHOUT_CLASSIFICATION	0.999998269150012	WITHOUT_CLASSIFICATION	1.7308499879857418E-6	DESIGN
// Add any joins	WITHOUT_CLASSIFICATION	0.999973660365387	WITHOUT_CLASSIFICATION	2.6339634612969467E-5	DESIGN
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999403613264882	WITHOUT_CLASSIFICATION	5.9638673511883574E-5	DESIGN
//named query parameter	WITHOUT_CLASSIFICATION	0.9999711694593086	WITHOUT_CLASSIFICATION	2.883054069147693E-5	DESIGN
//path expression	WITHOUT_CLASSIFICATION	0.9999571030427347	WITHOUT_CLASSIFICATION	4.289695726546689E-5	DESIGN
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999816054315432	WITHOUT_CLASSIFICATION	1.83945684567177E-5	DESIGN
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.999995674254031	WITHOUT_CLASSIFICATION	4.325745969011823E-6	DESIGN
//anything else	WITHOUT_CLASSIFICATION	0.9996486925264726	WITHOUT_CLASSIFICATION	3.513074735274422E-4	DESIGN
// the path expression continues after a ]	WITHOUT_CLASSIFICATION	0.9999952592256182	WITHOUT_CLASSIFICATION	4.740774381781318E-6	DESIGN
// careful with this!	WITHOUT_CLASSIFICATION	0.9974861964945013	WITHOUT_CLASSIFICATION	0.002513803505498718	DESIGN
// the path expression ends at the ]	WITHOUT_CLASSIFICATION	0.9999942609869009	WITHOUT_CLASSIFICATION	5.739013099015289E-6	DESIGN
// "finish off" the join	WITHOUT_CLASSIFICATION	0.9999405834004266	WITHOUT_CLASSIFICATION	5.941659957348413E-5	DESIGN
//NOTICE: no " or . since they are part of (compound) identifiers	WITHOUT_CLASSIFICATION	0.9999649106011288	WITHOUT_CLASSIFICATION	3.508939887117504E-5	DESIGN
//cannot instantiate	WITHOUT_CLASSIFICATION	0.9998688519719482	WITHOUT_CLASSIFICATION	1.3114802805174264E-4	DESIGN
// start by looking for HQL keywords...	WITHOUT_CLASSIFICATION	0.9999650252401086	WITHOUT_CLASSIFICATION	3.497475989154037E-5	DESIGN
// inner joins can be abbreviated to 'join'	WITHOUT_CLASSIFICATION	0.9999799780389443	WITHOUT_CLASSIFICATION	2.0021961055739724E-5	DESIGN
// 'outer' is optional and is ignored	WITHOUT_CLASSIFICATION	0.9999853353351468	WITHOUT_CLASSIFICATION	1.4664664853314434E-5	DESIGN
// now anything that is not a HQL keyword	WITHOUT_CLASSIFICATION	0.9992412518052911	WITHOUT_CLASSIFICATION	7.587481947089788E-4	DESIGN
// process the "old" HQL style where aliases appear _first_ // ie. using the IN or IN CLASS constructions	WITHOUT_CLASSIFICATION	0.999890332562748	WITHOUT_CLASSIFICATION	1.0966743725207639E-4	DESIGN
// treat it as a classname	WITHOUT_CLASSIFICATION	0.9998563947823099	WITHOUT_CLASSIFICATION	1.436052176900146E-4	DESIGN
// treat it as a path expression	WITHOUT_CLASSIFICATION	0.9999857493561499	WITHOUT_CLASSIFICATION	1.4250643850060178E-5	DESIGN
// starts with the name of a mapped class (new style)	WITHOUT_CLASSIFICATION	0.9999987337247677	WITHOUT_CLASSIFICATION	1.2662752323562303E-6	DESIGN
// starts with a path expression (new style)	WITHOUT_CLASSIFICATION	0.9999980419613218	WITHOUT_CLASSIFICATION	1.958038678239458E-6	DESIGN
//allow ODMG OQL style: from Person p, p.cars c	WITHOUT_CLASSIFICATION	0.9957027150263259	WITHOUT_CLASSIFICATION	0.004297284973674082	DESIGN
//handle quoted strings	WITHOUT_CLASSIFICATION	0.9998618849190082	WITHOUT_CLASSIFICATION	1.381150809917826E-4	DESIGN
// Object insertions, updates, and deletions have list semantics because // they must happen in the right order so as to respect referential // integrity	WITHOUT_CLASSIFICATION	0.9999997118605418	WITHOUT_CLASSIFICATION	2.881394582101056E-7	DESIGN
// "finish off" the join	WITHOUT_CLASSIFICATION	0.9999405834004266	WITHOUT_CLASSIFICATION	5.941659957348413E-5	DESIGN
//ignore whitespace	WITHOUT_CLASSIFICATION	0.9999131546158389	WITHOUT_CLASSIFICATION	8.684538416114162E-5	DESIGN
//do replacements	WITHOUT_CLASSIFICATION	0.9999325922248574	WITHOUT_CLASSIFICATION	6.740777514254572E-5	DESIGN
//handle HQL2 collection syntax	WITHOUT_CLASSIFICATION	0.9997955999871267	WITHOUT_CLASSIFICATION	2.0440001287334557E-4	DESIGN
// uuid.hex is deprecated	WITHOUT_CLASSIFICATION	0.9994713297100414	WITHOUT_CLASSIFICATION	5.286702899587341E-4	DESIGN
// AbstractSelectingDelegate impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999949026419586	WITHOUT_CLASSIFICATION	5.097358041439046E-6	DESIGN
//hilo params	WITHOUT_CLASSIFICATION	0.999983577594446	WITHOUT_CLASSIFICATION	1.6422405553991126E-5	DESIGN
//sql = query;	WITHOUT_CLASSIFICATION	0.9999528823473505	WITHOUT_CLASSIFICATION	4.711765264948852E-5	DESIGN
// performance opt	WITHOUT_CLASSIFICATION	0.999995773646403	WITHOUT_CLASSIFICATION	4.226353596923686E-6	DESIGN
//sql = update;	WITHOUT_CLASSIFICATION	0.999887488308236	WITHOUT_CLASSIFICATION	1.1251169176395129E-4	DESIGN
//hilo config	WITHOUT_CLASSIFICATION	0.9997344789831348	WITHOUT_CLASSIFICATION	2.655210168651485E-4	DESIGN
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999802146037272	WITHOUT_CLASSIFICATION	1.9785396272802107E-5	DESIGN
// don't allow comments on these insert statements as comments totally // blow up the Oracle getGeneratedKeys "support" :(	WITHOUT_CLASSIFICATION	0.999992594343797	WITHOUT_CLASSIFICATION	7.405656202994108E-6	DESIGN
//abort the save (the object is already saved by a circular cascade)	WITHOUT_CLASSIFICATION	0.999897755818843	WITHOUT_CLASSIFICATION	1.0224418115701965E-4	DESIGN
//throw new IdentifierGenerationException("save associated object first, or disable cascade for inverse association");	WITHOUT_CLASSIFICATION	0.9999978458367268	WITHOUT_CLASSIFICATION	2.1541632732383683E-6	DESIGN
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999720026914372	WITHOUT_CLASSIFICATION	2.799730856281029E-5	DESIGN
//do nothing to avoid a lazy property initialization	WITHOUT_CLASSIFICATION	0.9997195511300141	WITHOUT_CLASSIFICATION	2.804488699858672E-4	DESIGN
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9997639931491823	WITHOUT_CLASSIFICATION	2.360068508178003E-4	DESIGN
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999802146037272	WITHOUT_CLASSIFICATION	1.9785396272802107E-5	DESIGN
// do nothing until we hit the rsult set containing the generated id	WITHOUT_CLASSIFICATION	0.9999755349324719	WITHOUT_CLASSIFICATION	2.4465067528149044E-5	DESIGN
/* COLUMN and TABLE should be renamed but it would break the public API */	WITHOUT_CLASSIFICATION	0.969907129471455	WITHOUT_CLASSIFICATION	0.030092870528545042	DESIGN
// Loaded entity instances, by EntityKey	WITHOUT_CLASSIFICATION	0.9999944008490712	WITHOUT_CLASSIFICATION	5.599150928893376E-6	DESIGN
// if the given name is un-qualified we may neen to qualify it	WITHOUT_CLASSIFICATION	0.999996428108387	WITHOUT_CLASSIFICATION	3.571891613017653E-6	DESIGN
// the default...	WITHOUT_CLASSIFICATION	0.9999418918076955	WITHOUT_CLASSIFICATION	5.8108192304455265E-5	DESIGN
// unfortunately not really safe to normalize this // to 1 as an initial value like we do the others // because we would not be able to control this if // we are using a sequence...	WITHOUT_CLASSIFICATION	0.9430068293057514	WITHOUT_CLASSIFICATION	0.05699317069424865	DESIGN
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999720026914372	WITHOUT_CLASSIFICATION	2.799730856281029E-5	DESIGN
// Identity map of CollectionEntry instances, by the collection wrapper	WITHOUT_CLASSIFICATION	0.999999952739601	WITHOUT_CLASSIFICATION	4.726039896932655E-8	DESIGN
// general purpose parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994140009126	WITHOUT_CLASSIFICATION	5.859990873878454E-7	DESIGN
// table-specific parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999982167297725	WITHOUT_CLASSIFICATION	1.7832702274627687E-6	DESIGN
// Configurable implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994554732256	WITHOUT_CLASSIFICATION	5.445267744113601E-7	DESIGN
// IdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999980754273042	WITHOUT_CLASSIFICATION	1.924572695756407E-6	DESIGN
// PersistentIdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999977379135239	WITHOUT_CLASSIFICATION	2.2620864761501328E-6	DESIGN
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999937164737949	WITHOUT_CLASSIFICATION	6.283526205124946E-6	DESIGN
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999937164737949	WITHOUT_CLASSIFICATION	6.283526205124946E-6	DESIGN
//fetch the generated id in a separate query	WITHOUT_CLASSIFICATION	0.9999374116812547	WITHOUT_CLASSIFICATION	6.258831874525883E-5	DESIGN
// we just hit the last position	WITHOUT_CLASSIFICATION	0.9999510880373988	WITHOUT_CLASSIFICATION	4.8911962601108706E-5	DESIGN
// scroll ahead	WITHOUT_CLASSIFICATION	0.9998147316219793	WITHOUT_CLASSIFICATION	1.8526837802059764E-4	DESIGN
// scroll backward	WITHOUT_CLASSIFICATION	0.9996694334981462	WITHOUT_CLASSIFICATION	3.3056650185386166E-4	DESIGN
// we have not yet hit the last result...	WITHOUT_CLASSIFICATION	0.9999672012398563	WITHOUT_CLASSIFICATION	3.279876014368507E-5	DESIGN
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999906096167006	WITHOUT_CLASSIFICATION	9.390383299403846E-5	DESIGN
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999516468041928	WITHOUT_CLASSIFICATION	4.835319580721836E-5	DESIGN
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999945391000425	WITHOUT_CLASSIFICATION	5.460899957552135E-6	DESIGN
// do this when all the properties are updateable since there is // a certain likelihood that the information will already be // snapshot-cached.	WITHOUT_CLASSIFICATION	0.9999912724419169	WITHOUT_CLASSIFICATION	8.727558083240236E-6	DESIGN
// Inner classes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999464138802943	WITHOUT_CLASSIFICATION	5.3586119705737664E-5	DESIGN
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999906096167006	WITHOUT_CLASSIFICATION	9.390383299403846E-5	DESIGN
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999516468041928	WITHOUT_CLASSIFICATION	4.835319580721836E-5	DESIGN
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999945391000425	WITHOUT_CLASSIFICATION	5.460899957552135E-6	DESIGN
// Caches	WITHOUT_CLASSIFICATION	0.9999724146978434	WITHOUT_CLASSIFICATION	2.7585302156535108E-5	DESIGN
//Generators:	WITHOUT_CLASSIFICATION	0.9997672586557594	WITHOUT_CLASSIFICATION	2.3274134424053138E-4	DESIGN
// cache region is defined by the root-class in the hierarchy...	WITHOUT_CLASSIFICATION	0.9999091553754463	WITHOUT_CLASSIFICATION	9.08446245537074E-5	DESIGN
//check if the detached object being merged is the parent	WITHOUT_CLASSIFICATION	0.9999903025294067	WITHOUT_CLASSIFICATION	9.697470593310716E-6	DESIGN
// after *all* persisters and named queries are registered	WITHOUT_CLASSIFICATION	0.9999958450495878	WITHOUT_CLASSIFICATION	4.154950412141348E-6	DESIGN
// if we get here, it is possible that we have a proxy 'in the way' of the merge map resolution... // 	WITHOUT_CLASSIFICATION	0.9999862492657021	WITHOUT_CLASSIFICATION	1.3750734297821434E-5	DESIGN
//JNDI + Serialization:	WITHOUT_CLASSIFICATION	0.9997776266806851	WITHOUT_CLASSIFICATION	2.2237331931496888E-4	DESIGN
//checking for named queries	WITHOUT_CLASSIFICATION	0.9996762511367274	WITHOUT_CLASSIFICATION	3.2374886327261957E-4	DESIGN
//stats	WITHOUT_CLASSIFICATION	0.9997494629764038	WITHOUT_CLASSIFICATION	2.505370235962229E-4	DESIGN
// EntityNotFoundDelegate	WITHOUT_CLASSIFICATION	0.9998603145295618	WITHOUT_CLASSIFICATION	1.3968547043817476E-4	DESIGN
// Check named HQL queries	WITHOUT_CLASSIFICATION	0.9999793180491333	WITHOUT_CLASSIFICATION	2.068195086667255E-5	DESIGN
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9979824285842632	WITHOUT_CLASSIFICATION	0.0020175714157367793	DESIGN
//prevents this session from adding things to cache	WITHOUT_CLASSIFICATION	0.9987705799323144	WITHOUT_CLASSIFICATION	0.001229420067685617	DESIGN
// from javax.naming.Referenceable	WITHOUT_CLASSIFICATION	0.9999765132501113	WITHOUT_CLASSIFICATION	2.3486749888807695E-5	DESIGN
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999896571384207	WITHOUT_CLASSIFICATION	1.0342861579228492E-5	DESIGN
//for a dynamic-class	WITHOUT_CLASSIFICATION	0.9995275457442668	WITHOUT_CLASSIFICATION	4.72454255733228E-4	DESIGN
//test this entity to see if we must query it	WITHOUT_CLASSIFICATION	0.9998479176168799	WITHOUT_CLASSIFICATION	1.5208238312015734E-4	DESIGN
//NOTE EARLY EXIT	WITHOUT_CLASSIFICATION	0.9987942692111651	WITHOUT_CLASSIFICATION	0.001205730788834907	DESIGN
// for backward-compatability	WITHOUT_CLASSIFICATION	0.999993688560891	WITHOUT_CLASSIFICATION	6.311439108969594E-6	DESIGN
// ignore this error for now	WITHOUT_CLASSIFICATION	0.9989180240590908	WITHOUT_CLASSIFICATION	0.0010819759409091284	DESIGN
//to stop the class from being unloaded	WITHOUT_CLASSIFICATION	0.9984614619723289	WITHOUT_CLASSIFICATION	0.0015385380276710828	DESIGN
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9999735684729917	WITHOUT_CLASSIFICATION	2.6431527008266655E-5	DESIGN
//must add to JNDI _after_ adding to HashMaps, because some JNDI servers use serialization	WITHOUT_CLASSIFICATION	0.9998701155204823	WITHOUT_CLASSIFICATION	1.2988447951758664E-4	DESIGN
// Make sure this is a defined parameter and check the incoming value type	WITHOUT_CLASSIFICATION	0.9999185517589809	WITHOUT_CLASSIFICATION	8.144824101912055E-5	DESIGN
// for each of the defined parameters, make sure its value // has been set	WITHOUT_CLASSIFICATION	0.9999982932597061	WITHOUT_CLASSIFICATION	1.7067402939771618E-6	DESIGN
//we never need to apply locks to the SQL	WITHOUT_CLASSIFICATION	0.9999962409676414	WITHOUT_CLASSIFICATION	3.7590323587018077E-6	DESIGN
// inserts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999749794385395	WITHOUT_CLASSIFICATION	2.5020561460524243E-5	DESIGN
// deletes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999460428916347	WITHOUT_CLASSIFICATION	5.395710836533836E-5	DESIGN
// during deserialization, we need to reconnect all proxies and // collections to this session, as well as the EntityEntry and // CollectionEntry instances; these associations are transient // because serialization is used for different things.	WITHOUT_CLASSIFICATION	0.9999988579700608	WITHOUT_CLASSIFICATION	1.1420299392329386E-6	DESIGN
// updates ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999941012600102	WITHOUT_CLASSIFICATION	5.89873998979328E-5	DESIGN
// loading ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997859534666697	WITHOUT_CLASSIFICATION	2.140465333303453E-4	DESIGN
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.999974536124576	WITHOUT_CLASSIFICATION	2.5463875423974936E-5	DESIGN
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.999974536124576	WITHOUT_CLASSIFICATION	2.5463875423974936E-5	DESIGN
// first, try to load it from the temp PC associated to this SS	WITHOUT_CLASSIFICATION	0.9999809140484907	WITHOUT_CLASSIFICATION	1.9085951509419153E-5	DESIGN
// if the metadata allowed proxy creation and caller did not request forceful eager loading, // generate a proxy	WITHOUT_CLASSIFICATION	0.99997494411398	WITHOUT_CLASSIFICATION	2.5055886020004824E-5	DESIGN
// otherwise immediately materialize it	WITHOUT_CLASSIFICATION	0.9999968473759355	WITHOUT_CLASSIFICATION	3.1526240644206753E-6	DESIGN
/////////////////////////////////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9995769085686194	WITHOUT_CLASSIFICATION	4.230914313806368E-4	DESIGN
// no auto-flushing to support in stateless session	WITHOUT_CLASSIFICATION	0.9998999215109083	WITHOUT_CLASSIFICATION	1.0007848909173142E-4	DESIGN
//after setting values to object, entityMode	WITHOUT_CLASSIFICATION	0.9999122341006104	WITHOUT_CLASSIFICATION	8.776589938962344E-5	DESIGN
//for EJB3	WITHOUT_CLASSIFICATION	0.9996182813619721	WITHOUT_CLASSIFICATION	3.817186380279692E-4	DESIGN
// just ignore	WITHOUT_CLASSIFICATION	0.9999899861027001	WITHOUT_CLASSIFICATION	1.0013897299898165E-5	DESIGN
// do a check	WITHOUT_CLASSIFICATION	0.9999528570909016	WITHOUT_CLASSIFICATION	4.7142909098402654E-5	DESIGN
// saveOrUpdate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999974750270449	WITHOUT_CLASSIFICATION	2.5249729550965997E-5	DESIGN
// update() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999667773068364	WITHOUT_CLASSIFICATION	3.3222693163671286E-5	DESIGN
// lock() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999833932470971	WITHOUT_CLASSIFICATION	1.6606752903029523E-5	DESIGN
// persist() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999822546992005	WITHOUT_CLASSIFICATION	1.7745300799399346E-5	DESIGN
// persistOnFlush() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999844169506302	WITHOUT_CLASSIFICATION	1.5583049369676837E-5	DESIGN
// merge() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999822190932875	WITHOUT_CLASSIFICATION	1.7780906712429536E-5	DESIGN
// saveOrUpdateCopy() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999805079840884	WITHOUT_CLASSIFICATION	1.949201591153175E-5	DESIGN
// delete() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999858174995158	WITHOUT_CLASSIFICATION	1.4182500484269676E-5	DESIGN
// load()/get() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999794787727528	WITHOUT_CLASSIFICATION	2.052122724726346E-5	DESIGN
// refresh() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999984313109971	WITHOUT_CLASSIFICATION	1.5686890028906378E-5	DESIGN
// replicate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999880498937707	WITHOUT_CLASSIFICATION	1.1950106229345887E-5	DESIGN
// do not auto-flush while outside a transaction	WITHOUT_CLASSIFICATION	0.9999889425417317	WITHOUT_CLASSIFICATION	1.1057458268387001E-5	DESIGN
// this is an internal error of some sort...	WITHOUT_CLASSIFICATION	0.9939037165105501	WITHOUT_CLASSIFICATION	0.006096283489449921	DESIGN
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.6236343568287291	WITHOUT_CLASSIFICATION	0.37636564317127086	DESIGN
//only collections belonging to deleted entities are allowed to be dereferenced in the case of orphan delete	WITHOUT_CLASSIFICATION	0.9999577672189813	WITHOUT_CLASSIFICATION	4.2232781018750255E-5	DESIGN
// if it was previously unreferenced, we need to flush in order to // get its state into the database in order to execute query	WITHOUT_CLASSIFICATION	0.9999992929025544	WITHOUT_CLASSIFICATION	7.070974456728194E-7	DESIGN
// not for internal use:	WITHOUT_CLASSIFICATION	0.9997394532718988	WITHOUT_CLASSIFICATION	2.6054672810116953E-4	DESIGN
// otherwise, we only need to flush if there are in-memory changes // to the queried tables	WITHOUT_CLASSIFICATION	0.9999990892669085	WITHOUT_CLASSIFICATION	9.107330915006122E-7	DESIGN
// might need to run a different filter entirely after the flush // because the collection role may have changed	WITHOUT_CLASSIFICATION	0.999995225964911	WITHOUT_CLASSIFICATION	4.774035088955738E-6	DESIGN
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.6236343568287291	WITHOUT_CLASSIFICATION	0.37636564317127086	DESIGN
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.6236343568287291	WITHOUT_CLASSIFICATION	0.37636564317127086	DESIGN
//if it is initialized, see if the underlying //instance is contained, since we need to  //account for the fact that it might have been //evicted	WITHOUT_CLASSIFICATION	0.9978492777113103	WITHOUT_CLASSIFICATION	0.0021507222886897274	DESIGN
// basically just an adapted copy of find(CriteriaImpl)	WITHOUT_CLASSIFICATION	0.9999735047023314	WITHOUT_CLASSIFICATION	2.6495297668631094E-5	DESIGN
// it is possible for this method to be called during flush processing, // so make certain that we do not accidently initialize an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9984555593647833	WITHOUT_CLASSIFICATION	0.001544440635216714	DESIGN
// nothing to do in a stateful session	WITHOUT_CLASSIFICATION	0.9996818354593577	WITHOUT_CLASSIFICATION	3.181645406422832E-4	DESIGN
// ignore	WITHOUT_CLASSIFICATION	0.9999770031580442	WITHOUT_CLASSIFICATION	2.2996841955798397E-5	DESIGN
// ignore this error for now	WITHOUT_CLASSIFICATION	0.9989180240590908	WITHOUT_CLASSIFICATION	0.0010819759409091284	DESIGN
// we need to writeObject() on this since interceptor is user defined	WITHOUT_CLASSIFICATION	0.9987752545037084	WITHOUT_CLASSIFICATION	0.0012247454962915868	DESIGN
// the old-time stand-by...	WITHOUT_CLASSIFICATION	0.9999286642391911	WITHOUT_CLASSIFICATION	7.133576080877844E-5	DESIGN
// parameter bind values...	WITHOUT_CLASSIFICATION	0.9999897068439489	WITHOUT_CLASSIFICATION	1.0293156051070592E-5	DESIGN
// Parameter handling code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998768235806899	WITHOUT_CLASSIFICATION	1.2317641931022116E-4	DESIGN
// prepend value and type list with null for any positions before the wanted position.	WITHOUT_CLASSIFICATION	0.9999987809757439	WITHOUT_CLASSIFICATION	1.2190242561005295E-6	DESIGN
// Execution methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996458699810413	WITHOUT_CLASSIFICATION	3.5413001895871743E-4	DESIGN
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9999590401175518	WITHOUT_CLASSIFICATION	4.095988244831946E-5	DESIGN
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9999590401175518	WITHOUT_CLASSIFICATION	4.095988244831946E-5	DESIGN
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999645156671987	WITHOUT_CLASSIFICATION	3.548433280127735E-5	DESIGN
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999645156671987	WITHOUT_CLASSIFICATION	3.548433280127735E-5	DESIGN
// FieldInterceptor impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999744337763314	WITHOUT_CLASSIFICATION	2.5566223668580174E-5	DESIGN
// subclass accesses ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997105550540482	WITHOUT_CLASSIFICATION	2.894449459518957E-4	DESIGN
//let's assume that there is only one lazy fetch group, for now!	WITHOUT_CLASSIFICATION	0.9997212584420619	WITHOUT_CLASSIFICATION	2.787415579381122E-4	DESIGN
// FieldHandler impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999882003427433	WITHOUT_CLASSIFICATION	1.1799657256691194E-5	DESIGN
// should *not* need to grow beyond the size of the total number of columns in the rs	WITHOUT_CLASSIFICATION	0.999263970856175	WITHOUT_CLASSIFICATION	7.360291438250316E-4	DESIGN
// should probably no-op commit/rollback here, at least in JTA scenarios	WITHOUT_CLASSIFICATION	0.9992639021241608	WITHOUT_CLASSIFICATION	7.360978758391187E-4	DESIGN
// Base Expectation impls ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999719319440038	WITHOUT_CLASSIFICATION	2.8068055996234477E-5	DESIGN
// Various Expectation instances ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999588501019925	WITHOUT_CLASSIFICATION	4.114989800745764E-5	DESIGN
// explicitly perform no checking...	WITHOUT_CLASSIFICATION	0.9999996425436942	WITHOUT_CLASSIFICATION	3.5745630572740703E-7	DESIGN
// used from testsuite	WITHOUT_CLASSIFICATION	0.9985937638825269	WITHOUT_CLASSIFICATION	0.0014062361174731256	DESIGN
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999400228638078	WITHOUT_CLASSIFICATION	5.997713619222852E-5	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.9991752457914114	WITHOUT_CLASSIFICATION	8.247542085885454E-4	DESIGN
// register synch; stats.connect()	WITHOUT_CLASSIFICATION	0.9999948756801937	WITHOUT_CLASSIFICATION	5.124319806237079E-6	DESIGN
//noncritical, swallow and let the other propagate!	WITHOUT_CLASSIFICATION	0.9999639893364862	WITHOUT_CLASSIFICATION	3.6010663513849396E-5	DESIGN
// calls executeBatch()	WITHOUT_CLASSIFICATION	0.9995498755420104	WITHOUT_CLASSIFICATION	4.5012445798973196E-4	DESIGN
//no big deal	WITHOUT_CLASSIFICATION	0.9990997532827687	WITHOUT_CLASSIFICATION	9.002467172313608E-4	DESIGN
// no big deal	WITHOUT_CLASSIFICATION	0.9998945268576417	WITHOUT_CLASSIFICATION	1.0547314235825573E-4	DESIGN
// no big deal	WITHOUT_CLASSIFICATION	0.9998945268576417	WITHOUT_CLASSIFICATION	1.0547314235825573E-4	DESIGN
// sybase driver (jConnect) throwing NPE here in certain // cases, but we'll just handle the general "unexpected" case	WITHOUT_CLASSIFICATION	0.9997137573182883	WITHOUT_CLASSIFICATION	2.8624268171182303E-4	DESIGN
// see explanation above...	WITHOUT_CLASSIFICATION	0.999695533789391	WITHOUT_CLASSIFICATION	3.044662106090571E-4	DESIGN
// If we are in the process of releasing, no sense // checking for aggressive-release possibility.	WITHOUT_CLASSIFICATION	0.999990483229449	WITHOUT_CLASSIFICATION	9.516770551010594E-6	DESIGN
// EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9992159670091181	WITHOUT_CLASSIFICATION	7.840329908818887E-4	DESIGN
// ResultSet impl ("overridden") ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999797743690975	WITHOUT_CLASSIFICATION	2.022563090257119E-5	DESIGN
// ResultSet impl (delegated) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999654246806541	WITHOUT_CLASSIFICATION	3.457531934589465E-5	DESIGN
// refer to comment in StatefulPersistenceContext.addCollection()	WITHOUT_CLASSIFICATION	0.9999984820596346	WITHOUT_CLASSIFICATION	1.5179403653802927E-6	DESIGN
// ConnectionManager.Callback implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999987227296391	WITHOUT_CLASSIFICATION	1.2772703609459201E-6	DESIGN
// Note : success = false, because we don't know the outcome of the transaction	WITHOUT_CLASSIFICATION	0.9987651974481817	WITHOUT_CLASSIFICATION	0.0012348025518182956	DESIGN
// we already have a callback registered; either a local // (org.hibernate.Transaction) transaction has accepted // callback responsibilities, or we have previously // registered a transaction synch.	WITHOUT_CLASSIFICATION	0.9999501082515734	WITHOUT_CLASSIFICATION	4.989174842673201E-5	DESIGN
// the configured transaction-factory says it only supports // local callback mode, so no sense attempting to register a // JTA Synchronization	WITHOUT_CLASSIFICATION	0.9999546876049509	WITHOUT_CLASSIFICATION	4.531239504903813E-5	DESIGN
// transactions marked for rollback-only cause some TM impls to throw exceptions	WITHOUT_CLASSIFICATION	0.9986325073995301	WITHOUT_CLASSIFICATION	0.0013674926004699274	DESIGN
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999902453092386	WITHOUT_CLASSIFICATION	9.754690761412342E-6	DESIGN
//postInitialize() will be called after initialization	WITHOUT_CLASSIFICATION	0.9998500743288345	WITHOUT_CLASSIFICATION	1.4992567116537314E-4	DESIGN
// cannot handle single quotes	WITHOUT_CLASSIFICATION	0.9935846443834754	WITHOUT_CLASSIFICATION	0.006415355616524627	DESIGN
// todo : for 4.0 //	WITHOUT_CLASSIFICATION	0.9999558573844708	WITHOUT_CLASSIFICATION	4.414261552914568E-5	DESIGN
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999981209999437	WITHOUT_CLASSIFICATION	1.8790000562842405E-6	DESIGN
// don't even bother trying to read further	WITHOUT_CLASSIFICATION	0.999887969703148	WITHOUT_CLASSIFICATION	1.1203029685213971E-4	DESIGN
// don't even bother trying to read any further	WITHOUT_CLASSIFICATION	0.9999507629559734	WITHOUT_CLASSIFICATION	4.9237044026663774E-5	DESIGN
// position cursor to the last row	WITHOUT_CLASSIFICATION	0.9999889418936968	WITHOUT_CLASSIFICATION	1.1058106303136608E-5	DESIGN
// sequentially read the result set in reverse until we recognize // a change in the key value.  At that point, we are pointed at // the last physical sequential row for the logical row in which // we are interested in processing	WITHOUT_CLASSIFICATION	0.9999749535612387	WITHOUT_CLASSIFICATION	2.5046438761295434E-5	DESIGN
// Read backwards until we read past the first physical sequential // row with the key we are interested in loading	WITHOUT_CLASSIFICATION	0.9999721639507784	WITHOUT_CLASSIFICATION	2.783604922164591E-5	DESIGN
// Finally, read ahead one row to position result set cursor // at the first physical row we are interested in loading	WITHOUT_CLASSIFICATION	0.9999788519563143	WITHOUT_CLASSIFICATION	2.114804368571162E-5	DESIGN
// now get an existing proxy for each row element (if there is one)	WITHOUT_CLASSIFICATION	0.9999991730359228	WITHOUT_CLASSIFICATION	8.269640771101938E-7	DESIGN
// force the proxy to resolve itself	WITHOUT_CLASSIFICATION	0.9999956481429134	WITHOUT_CLASSIFICATION	4.351857086505871E-6	DESIGN
// this is equivalent to the old behavior...	WITHOUT_CLASSIFICATION	0.9996643437814693	WITHOUT_CLASSIFICATION	3.356562185307114E-4	DESIGN
//if null, owner will be retrieved from session	WITHOUT_CLASSIFICATION	0.9987758060792437	WITHOUT_CLASSIFICATION	0.0012241939207563717	DESIGN
//final String queryString, 	WITHOUT_CLASSIFICATION	0.999920665388773	WITHOUT_CLASSIFICATION	7.933461122690764E-5	DESIGN
// if it was a reference to self, don't need to nullify // unless we are using native id generation, in which // case we definitely need to nullify	WITHOUT_CLASSIFICATION	0.9942085667925945	WITHOUT_CLASSIFICATION	0.00579143320740554	DESIGN
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9997896576052939	WITHOUT_CLASSIFICATION	2.1034239470610775E-4	DESIGN
// in an effort to avoid concurrent-modification-exceptions (from // potential recursive calls back through here as a result of the // eventual call to PersistentCollection#endRead), we scan the // internal loadingCollections map for matches and store those matches // in a temp collection.  the temp collection is then used to "drive" // the #endRead processing.	WITHOUT_CLASSIFICATION	0.9816351350518333	WITHOUT_CLASSIFICATION	0.018364864948166706	DESIGN
//we can reuse it for each row	WITHOUT_CLASSIFICATION	0.9988410718457524	WITHOUT_CLASSIFICATION	0.0011589281542474692	DESIGN
//can't reuse in this case	WITHOUT_CLASSIFICATION	0.977989818986004	WITHOUT_CLASSIFICATION	0.022010181013996086	DESIGN
// First we need to suspend any current JTA transaction and obtain // a JDBC connection	WITHOUT_CLASSIFICATION	0.999999320263476	WITHOUT_CLASSIFICATION	6.797365239235643E-7	DESIGN
//getResultList(results);	WITHOUT_CLASSIFICATION	0.999938370915239	WITHOUT_CLASSIFICATION	6.162908476100932E-5	DESIGN
//if we only returned one entity, query by key is more efficient	WITHOUT_CLASSIFICATION	0.9999766909040401	WITHOUT_CLASSIFICATION	2.3309095959963334E-5	DESIGN
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999983459815007	WITHOUT_CLASSIFICATION	1.6540184993668483E-6	DESIGN
// handle empty collection	WITHOUT_CLASSIFICATION	0.9998862576119354	WITHOUT_CLASSIFICATION	1.137423880645296E-4	DESIGN
// else no collection element, but also no owner	WITHOUT_CLASSIFICATION	0.9999996649006195	WITHOUT_CLASSIFICATION	3.3509938045755714E-7	DESIGN
//handle empty collections	WITHOUT_CLASSIFICATION	0.9997779836002473	WITHOUT_CLASSIFICATION	2.220163997527212E-4	DESIGN
// else this is not a collection initializer (and empty collections will // be detected by looking for the owner's identifier in the result set)	WITHOUT_CLASSIFICATION	0.9999891080728216	WITHOUT_CLASSIFICATION	1.0891927178469348E-5	DESIGN
// validate() instances of Validatable	WITHOUT_CLASSIFICATION	0.9999800756448705	WITHOUT_CLASSIFICATION	1.99243551294845E-5	DESIGN
// if we know there is exactly 1 row, we can skip. // it would be great if we could _always_ skip this; // it is a problem for <key-many-to-one>	WITHOUT_CLASSIFICATION	0.9902957303654917	WITHOUT_CLASSIFICATION	0.009704269634508312	DESIGN
// remove all collections for the entity from the session-level cache	WITHOUT_CLASSIFICATION	0.9999800925757624	WITHOUT_CLASSIFICATION	1.990742423762422E-5	DESIGN
//null version means the object is in the process of being loaded somewhere else in the ResultSet	WITHOUT_CLASSIFICATION	0.9994348279390541	WITHOUT_CLASSIFICATION	5.651720609458943E-4	DESIGN
//problematic for <key-many-to-one>!	WITHOUT_CLASSIFICATION	0.9999779127999703	WITHOUT_CLASSIFICATION	2.2087200029754476E-5	DESIGN
//use the id passed in	WITHOUT_CLASSIFICATION	0.9986315043376877	WITHOUT_CLASSIFICATION	0.0013684956623123952	DESIGN
//do nothing	WITHOUT_CLASSIFICATION	0.9994107558340095	WITHOUT_CLASSIFICATION	5.892441659906124E-4	DESIGN
// prefer re-generation of identity!	WITHOUT_CLASSIFICATION	0.9999985973367331	WITHOUT_CLASSIFICATION	1.402663266862891E-6	DESIGN
//no point doing this if NONE was requested	WITHOUT_CLASSIFICATION	0.9934125278555055	WITHOUT_CLASSIFICATION	0.0065874721444944976	DESIGN
//If the object is already loaded, return the loaded one	WITHOUT_CLASSIFICATION	0.9999464352260184	WITHOUT_CLASSIFICATION	5.3564773981473385E-5	DESIGN
//its already loaded so don't need to hydrate it	WITHOUT_CLASSIFICATION	0.9999874848408425	WITHOUT_CLASSIFICATION	1.2515159157391384E-5	DESIGN
// cascade the refresh prior to refreshing this entity	WITHOUT_CLASSIFICATION	0.999365931308106	WITHOUT_CLASSIFICATION	6.3406869189406E-4	DESIGN
//the load() which takes an entity does not pass an entityName	WITHOUT_CLASSIFICATION	0.9999583564191322	WITHOUT_CLASSIFICATION	4.1643580867748155E-5	DESIGN
//we only check the version when _upgrading_ lock modes	WITHOUT_CLASSIFICATION	0.9999899723448151	WITHOUT_CLASSIFICATION	1.0027655184833407E-5	DESIGN
// look for a proxy	WITHOUT_CLASSIFICATION	0.9999911662612461	WITHOUT_CLASSIFICATION	8.833738754039337E-6	DESIGN
//we need to upgrade the lock mode to the mode requested	WITHOUT_CLASSIFICATION	0.9999463223263695	WITHOUT_CLASSIFICATION	5.3677673630417494E-5	DESIGN
//its the given optional object	WITHOUT_CLASSIFICATION	0.9999899070303523	WITHOUT_CLASSIFICATION	1.009296964780701E-5	DESIGN
// instantiate a new instance	WITHOUT_CLASSIFICATION	0.9999332290013496	WITHOUT_CLASSIFICATION	6.677099865028813E-5	DESIGN
//need to hydrate it.	WITHOUT_CLASSIFICATION	0.9998840073532064	WITHOUT_CLASSIFICATION	1.1599264679353874E-4	DESIGN
// return a newly loaded object	WITHOUT_CLASSIFICATION	0.9999952005354439	WITHOUT_CLASSIFICATION	4.799464556145607E-6	DESIGN
//will be ignored, using the existing Entry instead	WITHOUT_CLASSIFICATION	0.9997869679382296	WITHOUT_CLASSIFICATION	2.1303206177027538E-4	DESIGN
// key is an entity involved with the operation performed by the listener; // value can be either a copy of the entity or the entity itself	WITHOUT_CLASSIFICATION	0.999999182948199	WITHOUT_CLASSIFICATION	8.170518009680009E-7	DESIGN
//materialize associations (and initialize the object) later	WITHOUT_CLASSIFICATION	0.9999596493211754	WITHOUT_CLASSIFICATION	4.035067882459767E-5	DESIGN
// Get the persister for the _subclass_	WITHOUT_CLASSIFICATION	0.9999880109859242	WITHOUT_CLASSIFICATION	1.1989014075853017E-5	DESIGN
// ok in normal Hibernate usage to delete a detached entity; JPA however // forbids it, thus this is a hook for HEM to affect this behavior	WITHOUT_CLASSIFICATION	0.9921549922063699	WITHOUT_CLASSIFICATION	0.007845007793629965	DESIGN
// the entry will be removed after the flush, and will no longer // override the stale snapshot // This is now handled by removeEntity() in EntityDeleteAction //persistenceContext.removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.998929332733826	WITHOUT_CLASSIFICATION	0.0010706672661740728	DESIGN
//addInitializedCollection(collection, persister, id);	WITHOUT_CLASSIFICATION	0.9999622174459077	WITHOUT_CLASSIFICATION	3.778255409227498E-5	DESIGN
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.999121485730232	WITHOUT_CLASSIFICATION	8.785142697680937E-4	DESIGN
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.999121485730232	WITHOUT_CLASSIFICATION	8.785142697680937E-4	DESIGN
/*|| oj.getJoinable().consumesCollectionAlias() */	WITHOUT_CLASSIFICATION	0.9999805361835646	WITHOUT_CLASSIFICATION	1.9463816435449655E-5	DESIGN
// here we do not bother with the discriminator.	WITHOUT_CLASSIFICATION	0.9999443655398441	WITHOUT_CLASSIFICATION	5.563446015596551E-5	DESIGN
// Code to handle subclasses of topClass	WITHOUT_CLASSIFICATION	0.9990841650769322	WITHOUT_CLASSIFICATION	9.15834923067789E-4	DESIGN
//woops we got an instance of another class hierarchy branch	WITHOUT_CLASSIFICATION	0.9998642466978519	WITHOUT_CLASSIFICATION	1.3575330214806914E-4	DESIGN
// we can go straight to the first required row	WITHOUT_CLASSIFICATION	0.9998884329801697	WITHOUT_CLASSIFICATION	1.1156701983031562E-4	DESIGN
// we need to step through the rows one row at a time (slow)	WITHOUT_CLASSIFICATION	0.9999858286774093	WITHOUT_CLASSIFICATION	1.4171322590715973E-5	DESIGN
// synchronized to avoid multi-thread access issues; defined as method synch to avoid // potential deadlock issues due to nature of code.	WITHOUT_CLASSIFICATION	0.9979855707338269	WITHOUT_CLASSIFICATION	0.0020144292661731537	DESIGN
// Allows various loaders (ok mainly the QueryLoader :) to check // whether scrolling of their result set should be allowed. // // By default it is allowed.	WITHOUT_CLASSIFICATION	0.9992709059369869	WITHOUT_CLASSIFICATION	7.290940630131532E-4	DESIGN
//before adding to collection!	WITHOUT_CLASSIFICATION	0.9999370034497911	WITHOUT_CLASSIFICATION	6.29965502088977E-5	DESIGN
// if the current depth is 0, the root thing being loaded is the // many-to-many collection itself.  Here, it is alright to use // an inner join...	WITHOUT_CLASSIFICATION	0.999992220888095	WITHOUT_CLASSIFICATION	7.779111904894456E-6	DESIGN
//operations which cascade as far as the collection also cascade to collection elements	WITHOUT_CLASSIFICATION	0.99980768770626	WITHOUT_CLASSIFICATION	1.923122937399099E-4	DESIGN
// simple, because we can't have a one-to-one or a collection  // (or even a property-ref) in a composite-element:	WITHOUT_CLASSIFICATION	0.9999953602251257	WITHOUT_CLASSIFICATION	4.639774874397374E-6	DESIGN
//a composite key	WITHOUT_CLASSIFICATION	0.9999565353863232	WITHOUT_CLASSIFICATION	4.3464613676647424E-5	DESIGN
// if no batch, use "foo = ? and bar = ?"	WITHOUT_CLASSIFICATION	0.9999449455853235	WITHOUT_CLASSIFICATION	5.505441467639556E-5	DESIGN
//it must be a collection fetch	WITHOUT_CLASSIFICATION	0.9998690310424542	WITHOUT_CLASSIFICATION	1.309689575458862E-4	DESIGN
// needed later for many-to-many/filter application	WITHOUT_CLASSIFICATION	0.999998881279768	WITHOUT_CLASSIFICATION	1.1187202319887913E-6	DESIGN
/*&& etype.isReferenceToPrimaryKey()*/	WITHOUT_CLASSIFICATION	0.9998845624463899	WITHOUT_CLASSIFICATION	1.1543755361004371E-4	DESIGN
// it might still need to apply a collection ordering based on a // many-to-many defined order-by...	WITHOUT_CLASSIFICATION	0.9999360788349272	WITHOUT_CLASSIFICATION	6.392116507280043E-5	DESIGN
// if a composite key, use "( (foo = ? and bar = ?) or (foo = ? and bar = ?) )" for batching //TODO: unnecessary for databases with ANSI-style joins	WITHOUT_CLASSIFICATION	0.9992316748469703	WITHOUT_CLASSIFICATION	7.683251530295929E-4	DESIGN
// belong to other persister // belong to other persister	WITHOUT_CLASSIFICATION	0.9999780907842224	WITHOUT_CLASSIFICATION	2.1909215777556003E-5	DESIGN
// we found it	WITHOUT_CLASSIFICATION	0.9994019131491256	WITHOUT_CLASSIFICATION	5.980868508744158E-4	DESIGN
//we can use an inner join for the many-to-many	WITHOUT_CLASSIFICATION	0.9997816375326444	WITHOUT_CLASSIFICATION	2.1836246735558736E-4	DESIGN
//disable a join back to this same association	WITHOUT_CLASSIFICATION	0.9983698905929186	WITHOUT_CLASSIFICATION	0.0016301094070814114	DESIGN
//NOTE: unlike all other Loaders, this one is NOT //      multithreaded, or cacheable!!	WITHOUT_CLASSIFICATION	0.9973643905341498	WITHOUT_CLASSIFICATION	0.002635609465850197	DESIGN
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.999911127663477	WITHOUT_CLASSIFICATION	8.88723365229009E-5	DESIGN
//root entity comes *last*	WITHOUT_CLASSIFICATION	0.9999443232647657	WITHOUT_CLASSIFICATION	5.567673523428024E-5	DESIGN
//deliberately ignore return value!	WITHOUT_CLASSIFICATION	0.9999437229165274	WITHOUT_CLASSIFICATION	5.627708347247138E-5	DESIGN
//alias may be null //EARLY EXIT	WITHOUT_CLASSIFICATION	0.9996990437017375	WITHOUT_CLASSIFICATION	3.0095629826255545E-4	DESIGN
// if it is a compound path	WITHOUT_CLASSIFICATION	0.9992297141367177	WITHOUT_CLASSIFICATION	7.702858632822696E-4	DESIGN
// otherwise assume the parent is the the criteria that created us	WITHOUT_CLASSIFICATION	0.9999971981775182	WITHOUT_CLASSIFICATION	2.8018224818115466E-6	DESIGN
// if its the root criteria, we are done	WITHOUT_CLASSIFICATION	0.9999460984502451	WITHOUT_CLASSIFICATION	5.390154975493123E-5	DESIGN
// otherwise, recurse	WITHOUT_CLASSIFICATION	0.9999887330728465	WITHOUT_CLASSIFICATION	1.1266927153440817E-5	DESIGN
//the criteria instance	WITHOUT_CLASSIFICATION	0.999883671525043	WITHOUT_CLASSIFICATION	1.1632847495708226E-4	DESIGN
// the entity name	WITHOUT_CLASSIFICATION	0.9999933093451154	WITHOUT_CLASSIFICATION	6.69065488451913E-6	DESIGN
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9998919949515828	WITHOUT_CLASSIFICATION	1.0800504841720976E-4	DESIGN
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9998919949515828	WITHOUT_CLASSIFICATION	1.0800504841720976E-4	DESIGN
//it refers to an alias of a projection	WITHOUT_CLASSIFICATION	0.9999101669974882	WITHOUT_CLASSIFICATION	8.983300251180435E-5	DESIGN
//should never happen, i think	WITHOUT_CLASSIFICATION	0.9985960926804112	WITHOUT_CLASSIFICATION	0.001403907319588818	DESIGN
// Detect discriminator values...	WITHOUT_CLASSIFICATION	0.9999841282839348	WITHOUT_CLASSIFICATION	1.587171606519861E-5	DESIGN
// Convert the string value into the proper type.	WITHOUT_CLASSIFICATION	0.9999978515778196	WITHOUT_CLASSIFICATION	2.148422180363497E-6	DESIGN
// and the qualifier is not the alias of this criteria //      -> check to see if we belong to some criteria other //          than the one that created us	WITHOUT_CLASSIFICATION	0.9999702835201728	WITHOUT_CLASSIFICATION	2.9716479827206395E-5	DESIGN
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.9996664466886943	WITHOUT_CLASSIFICATION	3.335533113056599E-4	DESIGN
// Otherwise, this is an ordinary value.	WITHOUT_CLASSIFICATION	0.9998933763850166	WITHOUT_CLASSIFICATION	1.0662361498330503E-4	DESIGN
// Currently *not* cachable if autodiscover types is in effect (e.g. "select * ...")	WITHOUT_CLASSIFICATION	0.9999936454143971	WITHOUT_CLASSIFICATION	6.35458560298552E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.9992342288671854	WITHOUT_CLASSIFICATION	7.657711328146887E-4	DESIGN
// this is only needed (afaict) for ResultTransformer processing...	WITHOUT_CLASSIFICATION	0.9993229027764884	WITHOUT_CLASSIFICATION	6.770972235116665E-4	DESIGN
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999990788387307	WITHOUT_CLASSIFICATION	9.211612691854803E-7	DESIGN
// build an array with indices equal to the total number // of actual returns in the result Hibernate will return // for this query (scalars + non-scalars)	WITHOUT_CLASSIFICATION	0.9980377588477392	WITHOUT_CLASSIFICATION	0.0019622411522609105	DESIGN
// replace {....} with corresponding column aliases	WITHOUT_CLASSIFICATION	0.9999727593207471	WITHOUT_CLASSIFICATION	2.724067925287008E-5	DESIGN
// No additional open braces found in the string, append the // rest of the string in its entirty and quit this loop	WITHOUT_CLASSIFICATION	0.9999984547924309	WITHOUT_CLASSIFICATION	1.5452075691437136E-6	DESIGN
// apend everything up until the next encountered open brace	WITHOUT_CLASSIFICATION	0.9999945680428625	WITHOUT_CLASSIFICATION	5.431957137573981E-6	DESIGN
// it is a simple table alias {foo}	WITHOUT_CLASSIFICATION	0.9999646066575029	WITHOUT_CLASSIFICATION	3.5393342497061275E-5	DESIGN
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9979491810366966	WITHOUT_CLASSIFICATION	0.0020508189633033345	DESIGN
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9979491810366966	WITHOUT_CLASSIFICATION	0.0020508189633033345	DESIGN
// The current alias is referencing the collection to be eagerly fetched	WITHOUT_CLASSIFICATION	0.9997820944799257	WITHOUT_CLASSIFICATION	2.1790552007426245E-4	DESIGN
// it is a property reference {foo.bar}	WITHOUT_CLASSIFICATION	0.9998903823301766	WITHOUT_CLASSIFICATION	1.0961766982336431E-4	DESIGN
// Possibly handle :something parameters for the query ?	WITHOUT_CLASSIFICATION	0.9997571714996009	WITHOUT_CLASSIFICATION	2.42828500399186E-4	DESIGN
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999933566585679	WITHOUT_CLASSIFICATION	6.643341432070226E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.9992342288671854	WITHOUT_CLASSIFICATION	7.657711328146887E-4	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.9991752457914114	WITHOUT_CLASSIFICATION	8.247542085885454E-4	DESIGN
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9980537465139203	WITHOUT_CLASSIFICATION	0.0019462534860795625	DESIGN
//	WITHOUT_CLASSIFICATION	0.9992342288671854	WITHOUT_CLASSIFICATION	7.657711328146887E-4	DESIGN
// Now, process the returns	WITHOUT_CLASSIFICATION	0.9996134519599393	WITHOUT_CLASSIFICATION	3.8654804006065316E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9992342288671854	WITHOUT_CLASSIFICATION	7.657711328146887E-4	DESIGN
// already been processed...	WITHOUT_CLASSIFICATION	0.9992266186476649	WITHOUT_CLASSIFICATION	7.733813523351211E-4	DESIGN
// already been processed...	WITHOUT_CLASSIFICATION	0.9992266186476649	WITHOUT_CLASSIFICATION	7.733813523351211E-4	DESIGN
// Make sure the owner alias is known...	WITHOUT_CLASSIFICATION	0.999952444558577	WITHOUT_CLASSIFICATION	4.755544142302807E-5	DESIGN
// first, break down the returns into maps keyed by alias // so that role returns can be more easily resolved to their owners	WITHOUT_CLASSIFICATION	0.9999984686993022	WITHOUT_CLASSIFICATION	1.5313006978481402E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.9992342288671854	WITHOUT_CLASSIFICATION	7.657711328146887E-4	DESIGN
// If this return's alias has not been processed yet, do so b4 further processing of this return	WITHOUT_CLASSIFICATION	0.9952531641045922	WITHOUT_CLASSIFICATION	0.004746835895407731	DESIGN
//	WITHOUT_CLASSIFICATION	0.9992342288671854	WITHOUT_CLASSIFICATION	7.657711328146887E-4	DESIGN
// for merging of versioned entities, we consider the version having // been changed only when: // 1) the two version values are different; //      *AND* // 2) The target actually represents database state! // // This second condition is a special case which allows // an entity to be merged during the same transaction // (though during a seperate operation) in which it was // originally persisted/saved	WITHOUT_CLASSIFICATION	0.9999888048570494	WITHOUT_CLASSIFICATION	1.1195142950539644E-5	DESIGN
// this is the second pass through on a merge op, so here we limit the // replacement to associations types (value types were already replaced // during the first pass)	WITHOUT_CLASSIFICATION	0.9991702536192297	WITHOUT_CLASSIFICATION	8.297463807702307E-4	DESIGN
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.9990617562109451	WITHOUT_CLASSIFICATION	9.382437890548611E-4	DESIGN
// cascade-save to collections AFTER the collection owner was saved	WITHOUT_CLASSIFICATION	0.9999453393500104	WITHOUT_CLASSIFICATION	5.466064998958511E-5	DESIGN
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999601950799372	WITHOUT_CLASSIFICATION	3.980492006293886E-5	DESIGN
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9998636069507886	WITHOUT_CLASSIFICATION	1.363930492113344E-4	DESIGN
// currently only the Hibernate-supplied DbTimestampType is supported here	WITHOUT_CLASSIFICATION	0.9999897399266807	WITHOUT_CLASSIFICATION	1.0260073319208813E-5	DESIGN
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9914563647931826	WITHOUT_CLASSIFICATION	0.008543635206817364	DESIGN
// make a new one	WITHOUT_CLASSIFICATION	0.9999591111820484	WITHOUT_CLASSIFICATION	4.088881795156452E-5	DESIGN
// not so sure this is even valid subtree.  but if it was, it'd // represent two unrelated table references...	WITHOUT_CLASSIFICATION	0.9997739742168862	WITHOUT_CLASSIFICATION	2.2602578311388776E-4	DESIGN
// (NOT (GT a b) ) => (LE a b)	WITHOUT_CLASSIFICATION	0.9995960942151727	WITHOUT_CLASSIFICATION	4.03905784827288E-4	DESIGN
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9999552417048729	WITHOUT_CLASSIFICATION	4.475829512710822E-5	DESIGN
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9996474807828586	WITHOUT_CLASSIFICATION	3.5251921714145253E-4	DESIGN
//sqlResultTypes = selectClause.getSqlResultTypes();	WITHOUT_CLASSIFICATION	0.9999291158550357	WITHOUT_CLASSIFICATION	7.088414496432793E-5	DESIGN
//by default	WITHOUT_CLASSIFICATION	0.9998954476549567	WITHOUT_CLASSIFICATION	1.0455234504334743E-4	DESIGN
// This is now handled earlier in this method.	WITHOUT_CLASSIFICATION	0.9691991978776441	WITHOUT_CLASSIFICATION	0.030800802122355905	DESIGN
// -- Loader implementation --	WITHOUT_CLASSIFICATION	0.9999957372617869	WITHOUT_CLASSIFICATION	4.262738213094744E-6	DESIGN
// -- Loader overrides --	WITHOUT_CLASSIFICATION	0.9999664060841593	WITHOUT_CLASSIFICATION	3.359391584066225E-5	DESIGN
// (NOT (IS_NULL a b) ) => (IS_NOT_NULL a b)	WITHOUT_CLASSIFICATION	0.9996805878114438	WITHOUT_CLASSIFICATION	3.194121885562099E-4	DESIGN
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.999931380718353	WITHOUT_CLASSIFICATION	6.861928164702722E-5	DESIGN
// meant to handle dynamic instantiation queries...	WITHOUT_CLASSIFICATION	0.9999718412131219	WITHOUT_CLASSIFICATION	2.8158786878097844E-5	DESIGN
// --- Query translator methods ---	WITHOUT_CLASSIFICATION	0.9999549832125307	WITHOUT_CLASSIFICATION	4.501678746933441E-5	DESIGN
// -- Implementation private methods --	WITHOUT_CLASSIFICATION	0.9999809330964599	WITHOUT_CLASSIFICATION	1.9066903540171074E-5	DESIGN
//deduplicate unique constraints sharing the same columns //this is needed by Hibernate Annotations since it creates automagically // unique constraints for the user	WITHOUT_CLASSIFICATION	0.9990885881793315	WITHOUT_CLASSIFICATION	9.114118206684635E-4	DESIGN
// Try to find out the name of the primary key to create it as identity if the IdentityGenerator is used	WITHOUT_CLASSIFICATION	0.9994088010391716	WITHOUT_CLASSIFICATION	5.911989608284441E-4	DESIGN
// to support dialects that have their own identity data type	WITHOUT_CLASSIFICATION	0.9999986009051923	WITHOUT_CLASSIFICATION	1.3990948076753866E-6	DESIGN
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999813224736542	WITHOUT_CLASSIFICATION	1.867752634581439E-5	DESIGN
//used also for generation of FK names!	WITHOUT_CLASSIFICATION	0.99971826907361	WITHOUT_CLASSIFICATION	2.817309263898737E-4	DESIGN
//usually useless	WITHOUT_CLASSIFICATION	0.9993629106611492	WITHOUT_CLASSIFICATION	6.370893388507144E-4	DESIGN
// added this caching as I noticed that getType() is being called multiple times...	WITHOUT_CLASSIFICATION	0.9659425728084025	WITHOUT_CLASSIFICATION	0.03405742719159758	DESIGN
//do not add unique constraint on DB not supporting unique and nullable columns	WITHOUT_CLASSIFICATION	0.9999861663510583	WITHOUT_CLASSIFICATION	1.3833648941780322E-5	DESIGN
//for backward compatibility, disable this:	WITHOUT_CLASSIFICATION	0.9999601589320987	WITHOUT_CLASSIFICATION	3.9841067901340455E-5	DESIGN
//may be final //may be final //may be final	WITHOUT_CLASSIFICATION	0.9998893769686577	WITHOUT_CLASSIFICATION	1.1062303134240147E-4	DESIGN
//may be final	WITHOUT_CLASSIFICATION	0.9999126445806763	WITHOUT_CLASSIFICATION	8.73554193237059E-5	DESIGN
// may be final	WITHOUT_CLASSIFICATION	0.9999823764277606	WITHOUT_CLASSIFICATION	1.762357223942585E-5	DESIGN
// Custom SQL	WITHOUT_CLASSIFICATION	0.9999322705407353	WITHOUT_CLASSIFICATION	6.772945926468748E-5	DESIGN
//Primary key constraint	WITHOUT_CLASSIFICATION	0.9999241438957183	WITHOUT_CLASSIFICATION	7.585610428174021E-5	DESIGN
// the root of the incoming property path matched one // of the embedded composite identifier properties	WITHOUT_CLASSIFICATION	0.9999997566835798	WITHOUT_CLASSIFICATION	2.4331642015048215E-7	DESIGN
// ignore it...	WITHOUT_CLASSIFICATION	0.9999941875685407	WITHOUT_CLASSIFICATION	5.812431459230483E-6	DESIGN
//flat recursive algorithm	WITHOUT_CLASSIFICATION	0.9997742685584439	WITHOUT_CLASSIFICATION	2.2573144155613046E-4	DESIGN
//an identifier mapper => getKey will be included in the getNonDuplicatedPropertyIterator() //and checked later, so it needs to be excluded	WITHOUT_CLASSIFICATION	0.9999727968409498	WITHOUT_CLASSIFICATION	2.720315905018241E-5	DESIGN
//if the hibernate-mapping did not specify a schema/catalog, use the defaults //specified by properties - but note that if the schema/catalog were specified //in hibernate-mapping, or as params, they will already be initialized and //will override the values set here (they are in identifierGeneratorProperties)	WITHOUT_CLASSIFICATION	0.9999990661660223	WITHOUT_CLASSIFICATION	9.338339776094177E-7	DESIGN
//pass the entity-name, if not a collection-id	WITHOUT_CLASSIFICATION	0.9999737640091308	WITHOUT_CLASSIFICATION	2.6235990869219414E-5	DESIGN
// Custom SQL	WITHOUT_CLASSIFICATION	0.9999322705407353	WITHOUT_CLASSIFICATION	6.772945926468748E-5	DESIGN
//Primary key constraint	WITHOUT_CLASSIFICATION	0.9999241438957183	WITHOUT_CLASSIFICATION	7.585610428174021E-5	DESIGN
//pass the column name (a generated id almost always has a single column)	WITHOUT_CLASSIFICATION	0.9998836056690238	WITHOUT_CLASSIFICATION	1.1639433097611865E-4	DESIGN
//needed to satisfy KeyValue	WITHOUT_CLASSIFICATION	0.999764605706077	WITHOUT_CLASSIFICATION	2.3539429392300303E-4	DESIGN
// empty means no scoping	WITHOUT_CLASSIFICATION	0.9997286948742204	WITHOUT_CLASSIFICATION	2.713051257796254E-4	DESIGN
// index should be last column listed	WITHOUT_CLASSIFICATION	0.9954411016744521	WITHOUT_CLASSIFICATION	0.004558898325547887	DESIGN
//if it is a formula index, use the element columns in the PK	WITHOUT_CLASSIFICATION	0.9932176413331203	WITHOUT_CLASSIFICATION	0.0067823586668797385	DESIGN
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns	WITHOUT_CLASSIFICATION	0.9999229422083461	WITHOUT_CLASSIFICATION	7.705779165388365E-5	DESIGN
/*ArrayList list = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999724799807981	WITHOUT_CLASSIFICATION	2.752001920192016E-5	DESIGN
// }	WITHOUT_CLASSIFICATION	0.9998962496598125	WITHOUT_CLASSIFICATION	1.037503401874502E-4	DESIGN
// no foreign key element of for a one-to-many	WITHOUT_CLASSIFICATION	0.999999800436893	WITHOUT_CLASSIFICATION	1.9956310703885556E-7	DESIGN
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.6595916928896697	WITHOUT_CLASSIFICATION	0.34040830711033027	DESIGN
// the case of a foreign key to something other than the pk is handled in createPropertyRefConstraints	WITHOUT_CLASSIFICATION	0.9999949418534663	WITHOUT_CLASSIFICATION	5.058146533697718E-6	DESIGN
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.6595916928896697	WITHOUT_CLASSIFICATION	0.34040830711033027	DESIGN
// if the property mapping consists of all formulas,  // make it non-updateable	WITHOUT_CLASSIFICATION	0.9999889891178884	WITHOUT_CLASSIFICATION	1.101088211164059E-5	DESIGN
//columnUpdateability.length==0 ||	WITHOUT_CLASSIFICATION	0.9999715352210811	WITHOUT_CLASSIFICATION	2.8464778918933297E-5	DESIGN
// if the property mapping consists of all formulas,  // make it insertable	WITHOUT_CLASSIFICATION	0.9999882381849347	WITHOUT_CLASSIFICATION	1.1761815065351827E-5	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999976915913503	WITHOUT_CLASSIFICATION	2.3084086497007654E-5	DESIGN
// expected type is intrinsic here...	WITHOUT_CLASSIFICATION	0.9999726321082563	WITHOUT_CLASSIFICATION	2.736789174379502E-5	DESIGN
//}	WITHOUT_CLASSIFICATION	0.999062293469325	WITHOUT_CLASSIFICATION	9.377065306750758E-4	DESIGN
//}	WITHOUT_CLASSIFICATION	0.999062293469325	WITHOUT_CLASSIFICATION	9.377065306750758E-4	DESIGN
//return memberPersister.getPropertyType(propertyName);	WITHOUT_CLASSIFICATION	0.9998823750578162	WITHOUT_CLASSIFICATION	1.1762494218382966E-4	DESIGN
//return memberPersister.toColumns(alias, propertyName);	WITHOUT_CLASSIFICATION	0.9999730318139832	WITHOUT_CLASSIFICATION	2.6968186016759857E-5	DESIGN
//return memberPersister.getType();	WITHOUT_CLASSIFICATION	0.9998908752732562	WITHOUT_CLASSIFICATION	1.0912472674393751E-4	DESIGN
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.999655963155241	WITHOUT_CLASSIFICATION	3.440368447590486E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9992342288671854	WITHOUT_CLASSIFICATION	7.657711328146887E-4	DESIGN
//instanceof AssociationType;	WITHOUT_CLASSIFICATION	0.9997128789781622	WITHOUT_CLASSIFICATION	2.871210218378704E-4	DESIGN
// we need to determine the best way to know that two joinables // represent a single many-to-many...	WITHOUT_CLASSIFICATION	0.9999931386459451	WITHOUT_CLASSIFICATION	6.861354054869201E-6	DESIGN
//strip leading ','	WITHOUT_CLASSIFICATION	0.9998322441699856	WITHOUT_CLASSIFICATION	1.6775583001439064E-4	DESIGN
//public boolean isSubselectLoadable();	WITHOUT_CLASSIFICATION	0.9999319547385601	WITHOUT_CLASSIFICATION	6.804526143988858E-5	DESIGN
// KEY	WITHOUT_CLASSIFICATION	0.9997280554290789	WITHOUT_CLASSIFICATION	2.719445709210857E-4	DESIGN
//columns	WITHOUT_CLASSIFICATION	0.9984025517607085	WITHOUT_CLASSIFICATION	0.0015974482392915718	DESIGN
//SQL statements	WITHOUT_CLASSIFICATION	0.9999049266189443	WITHOUT_CLASSIFICATION	9.507338105579215E-5	DESIGN
//extra information about the element type	WITHOUT_CLASSIFICATION	0.999991124330565	WITHOUT_CLASSIFICATION	8.875669435060009E-6	DESIGN
//types	WITHOUT_CLASSIFICATION	0.9998068229408595	WITHOUT_CLASSIFICATION	1.9317705914049624E-4	DESIGN
// custom sql	WITHOUT_CLASSIFICATION	0.9998757358112028	WITHOUT_CLASSIFICATION	1.2426418879709202E-4	DESIGN
//private final String unquotedIdentifierColumnName;	WITHOUT_CLASSIFICATION	0.9999943313747338	WITHOUT_CLASSIFICATION	5.668625266183425E-6	DESIGN
// dynamic filters specifically for many-to-many inside the collection	WITHOUT_CLASSIFICATION	0.9999533541291651	WITHOUT_CLASSIFICATION	4.6645870835002875E-5	DESIGN
// dynamic filters for the collection	WITHOUT_CLASSIFICATION	0.9999916793419702	WITHOUT_CLASSIFICATION	8.320658029824115E-6	DESIGN
// NativeSQL: collect key column and auto-aliases	WITHOUT_CLASSIFICATION	0.999985318925228	WITHOUT_CLASSIFICATION	1.468107477199749E-5	DESIGN
//unquotedKeyColumnNames = StringHelper.unQuote(keyColumnAliases);	WITHOUT_CLASSIFICATION	0.9999834913708543	WITHOUT_CLASSIFICATION	1.6508629145784446E-5	DESIGN
//ELEMENT	WITHOUT_CLASSIFICATION	0.9985775508296811	WITHOUT_CLASSIFICATION	0.0014224491703188754	DESIGN
// NativeSQL: collect element column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999819950017228	WITHOUT_CLASSIFICATION	1.8004998277160262E-5	DESIGN
// INDEX AND ROW SELECT	WITHOUT_CLASSIFICATION	0.9997060342102337	WITHOUT_CLASSIFICATION	2.939657897662862E-4	DESIGN
// NativeSQL: collect index column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999827915750963	WITHOUT_CLASSIFICATION	1.720842490368293E-5	DESIGN
//unquotedIdentifierColumnName = identifierColumnAlias;	WITHOUT_CLASSIFICATION	0.9999920340577144	WITHOUT_CLASSIFICATION	7.965942285606057E-6	DESIGN
//unquotedIdentifierColumnName = null;	WITHOUT_CLASSIFICATION	0.99999527518272	WITHOUT_CLASSIFICATION	4.724817279959421E-6	DESIGN
//GENERATE THE SQL:	WITHOUT_CLASSIFICATION	0.9986318260366791	WITHOUT_CLASSIFICATION	0.0013681739633209806	DESIGN
// for non-arrays, we don't need to know the element class //elementType.returnedClass();	WITHOUT_CLASSIFICATION	0.9999935017552123	WITHOUT_CLASSIFICATION	6.498244787714595E-6	DESIGN
//not all classpersisters implement PropertyMapping!	WITHOUT_CLASSIFICATION	0.9999061208160178	WITHOUT_CLASSIFICATION	9.387918398227816E-5	DESIGN
// Handle any filters applied to this collection	WITHOUT_CLASSIFICATION	0.9998850557336834	WITHOUT_CLASSIFICATION	1.1494426631663144E-4	DESIGN
// Handle any filters applied to this collection for many-to-many	WITHOUT_CLASSIFICATION	0.9999420962332494	WITHOUT_CLASSIFICATION	5.790376675069027E-5	DESIGN
//if there is a user-specified loader, return that //TODO: filters!?	WITHOUT_CLASSIFICATION	0.8571936055628291	WITHOUT_CLASSIFICATION	0.14280639443717086	DESIGN
// Take care of any entities that might have // been evicted!	WITHOUT_CLASSIFICATION	0.9997816987646609	WITHOUT_CLASSIFICATION	2.183012353391603E-4	DESIGN
//strip leading ','	WITHOUT_CLASSIFICATION	0.9998322441699856	WITHOUT_CLASSIFICATION	1.6775583001439064E-4	DESIGN
// Run a subquery loader	WITHOUT_CLASSIFICATION	0.9998965297527177	WITHOUT_CLASSIFICATION	1.0347024728232283E-4	DESIGN
//needed by arrays	WITHOUT_CLASSIFICATION	0.9999676770326578	WITHOUT_CLASSIFICATION	3.232296734232627E-5	DESIGN
//TODO: something with formulas...	WITHOUT_CLASSIFICATION	0.941953071310852	WITHOUT_CLASSIFICATION	0.058046928689147896	DESIGN
//an assertion	WITHOUT_CLASSIFICATION	0.9999330060423972	WITHOUT_CLASSIFICATION	6.699395760286177E-5	DESIGN
// Remove all the old entries	WITHOUT_CLASSIFICATION	0.9997552724243096	WITHOUT_CLASSIFICATION	2.44727575690341E-4	DESIGN
//create all the new entries	WITHOUT_CLASSIFICATION	0.9999640332070316	WITHOUT_CLASSIFICATION	3.5966792968399454E-5	DESIGN
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.999655963155241	WITHOUT_CLASSIFICATION	3.440368447590486E-4	DESIGN
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.999655963155241	WITHOUT_CLASSIFICATION	3.440368447590486E-4	DESIGN
//delete all the deleted entries	WITHOUT_CLASSIFICATION	0.999960774077405	WITHOUT_CLASSIFICATION	3.922592259500771E-5	DESIGN
//insert all the new entries	WITHOUT_CLASSIFICATION	0.9999655384526666	WITHOUT_CLASSIFICATION	3.4461547333450434E-5	DESIGN
//==elementType ??	WITHOUT_CLASSIFICATION	0.9994716456548929	WITHOUT_CLASSIFICATION	5.283543451072182E-4	DESIGN
//update all the modified entries	WITHOUT_CLASSIFICATION	0.9999809223530399	WITHOUT_CLASSIFICATION	1.9077646960078308E-5	DESIGN
//identifier collections not supported for 1-to-many	WITHOUT_CLASSIFICATION	0.9999944456152843	WITHOUT_CLASSIFICATION	5.554384715663573E-6	DESIGN
// update removed rows fks to null	WITHOUT_CLASSIFICATION	0.9995794989459923	WITHOUT_CLASSIFICATION	4.205010540078113E-4	DESIGN
// will still be issued when it used to be null	WITHOUT_CLASSIFICATION	0.9995852838182452	WITHOUT_CLASSIFICATION	4.147161817547742E-4	DESIGN
// now update all changed or added rows fks	WITHOUT_CLASSIFICATION	0.9999470477875524	WITHOUT_CLASSIFICATION	5.2952212447474174E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9992342288671854	WITHOUT_CLASSIFICATION	7.657711328146887E-4	DESIGN
//use suffix for the entity columns	WITHOUT_CLASSIFICATION	0.9999568444725079	WITHOUT_CLASSIFICATION	4.315552749223794E-5	DESIGN
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999760727711667	WITHOUT_CLASSIFICATION	2.3927228833319697E-5	DESIGN
//private final String rootTableName;	WITHOUT_CLASSIFICATION	0.9999768073134009	WITHOUT_CLASSIFICATION	2.3192686599131422E-5	DESIGN
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9991958407547594	WITHOUT_CLASSIFICATION	8.041592452406388E-4	DESIGN
//Custom SQL	WITHOUT_CLASSIFICATION	0.9994862407632881	WITHOUT_CLASSIFICATION	5.137592367119031E-4	DESIGN
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999760727711667	WITHOUT_CLASSIFICATION	2.3927228833319697E-5	DESIGN
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.9998696574334512	WITHOUT_CLASSIFICATION	1.3034256654873808E-4	DESIGN
// This could also just be true all the time...	WITHOUT_CLASSIFICATION	0.9974496006687599	WITHOUT_CLASSIFICATION	0.0025503993312401226	DESIGN
//chop the last union (all)	WITHOUT_CLASSIFICATION	0.9979581875876194	WITHOUT_CLASSIFICATION	0.0020418124123805902	DESIGN
//TODO: check this....	WITHOUT_CLASSIFICATION	0.9074565114525754	WITHOUT_CLASSIFICATION	0.09254348854742452	DESIGN
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9991958407547594	WITHOUT_CLASSIFICATION	8.041592452406388E-4	DESIGN
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.999429636961363	WITHOUT_CLASSIFICATION	5.703630386369137E-4	DESIGN
// the closure of all properties in the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9997136929068873	WITHOUT_CLASSIFICATION	2.8630709311270523E-4	DESIGN
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.999777460794368	WITHOUT_CLASSIFICATION	2.2253920563190016E-4	DESIGN
// subclass discrimination works by assigning particular // values to certain combinations of null primary key // values in the outer join using an SQL CASE	WITHOUT_CLASSIFICATION	0.9999372191886652	WITHOUT_CLASSIFICATION	6.278081133485492E-5	DESIGN
//MULTITABLES	WITHOUT_CLASSIFICATION	0.9953403997433157	WITHOUT_CLASSIFICATION	0.004659600256684267	DESIGN
// Custom sql	WITHOUT_CLASSIFICATION	0.999965197072947	WITHOUT_CLASSIFICATION	3.480292705305346E-5	DESIGN
// subclass closure properties	WITHOUT_CLASSIFICATION	0.9999795701960315	WITHOUT_CLASSIFICATION	2.0429803968605384E-5	DESIGN
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.999790199858376	WITHOUT_CLASSIFICATION	2.0980014162396375E-4	DESIGN
//( (Column) model.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.99995522944792	WITHOUT_CLASSIFICATION	4.4770552080031776E-5	DESIGN
//( (Column) sc.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999665803909411	WITHOUT_CLASSIFICATION	3.34196090589599E-5	DESIGN
// don't need subclass tables, because they can't appear in conditions	WITHOUT_CLASSIFICATION	0.9999729095787079	WITHOUT_CLASSIFICATION	2.7090421292087973E-5	DESIGN
// special case where we need to force incloude all subclass joins	WITHOUT_CLASSIFICATION	0.9999822027797298	WITHOUT_CLASSIFICATION	1.779722027012872E-5	DESIGN
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999760727711667	WITHOUT_CLASSIFICATION	2.3927228833319697E-5	DESIGN
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.999429636961363	WITHOUT_CLASSIFICATION	5.703630386369137E-4	DESIGN
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.999777460794368	WITHOUT_CLASSIFICATION	2.2253920563190016E-4	DESIGN
//get em on the second pass!	WITHOUT_CLASSIFICATION	0.9984848201687592	WITHOUT_CLASSIFICATION	0.0015151798312408311	DESIGN
// now look up the object we are really interested in! // (this lets us correctly handle proxies and multi-row // or multi-column queries)	WITHOUT_CLASSIFICATION	0.9998764579174567	WITHOUT_CLASSIFICATION	1.2354208254328466E-4	DESIGN
// discriminator column	WITHOUT_CLASSIFICATION	0.9997703110332946	WITHOUT_CLASSIFICATION	2.296889667054557E-4	DESIGN
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9991958407547594	WITHOUT_CLASSIFICATION	8.041592452406388E-4	DESIGN
//private final Map propertyTableNumbersByName = new HashMap();	WITHOUT_CLASSIFICATION	0.9999658877591123	WITHOUT_CLASSIFICATION	3.4112240887632264E-5	DESIGN
// CLASS + TABLE	WITHOUT_CLASSIFICATION	0.9996650040761702	WITHOUT_CLASSIFICATION	3.349959238298005E-4	DESIGN
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9994652177161089	WITHOUT_CLASSIFICATION	5.347822838911256E-4	DESIGN
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9998712483704834	WITHOUT_CLASSIFICATION	1.2875162951655903E-4	DESIGN
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.999790199858376	WITHOUT_CLASSIFICATION	2.0980014162396375E-4	DESIGN
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.9998696574334512	WITHOUT_CLASSIFICATION	1.3034256654873808E-4	DESIGN
// JOINS	WITHOUT_CLASSIFICATION	0.9998891954220624	WITHOUT_CLASSIFICATION	1.108045779376171E-4	DESIGN
//propertyTableNumbersByName.put( prop.getName(), join );	WITHOUT_CLASSIFICATION	0.9999893827114635	WITHOUT_CLASSIFICATION	1.0617288536490289E-5	DESIGN
//Access cached SQL	WITHOUT_CLASSIFICATION	0.9985579159980708	WITHOUT_CLASSIFICATION	0.0014420840019292492	DESIGN
//figure out which tables need to be fetched	WITHOUT_CLASSIFICATION	0.9999320850775717	WITHOUT_CLASSIFICATION	6.791492242829319E-5	DESIGN
//figure out which columns are needed	WITHOUT_CLASSIFICATION	0.999738685102459	WITHOUT_CLASSIFICATION	2.613148975410547E-4	DESIGN
//figure out which formulas are needed	WITHOUT_CLASSIFICATION	0.9997947543053712	WITHOUT_CLASSIFICATION	2.0524569462868574E-4	DESIGN
//render the SQL	WITHOUT_CLASSIFICATION	0.9999075283795504	WITHOUT_CLASSIFICATION	9.247162044954094E-5	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999976915913503	WITHOUT_CLASSIFICATION	2.3084086497007654E-5	DESIGN
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999296901773457	WITHOUT_CLASSIFICATION	7.030982265425354E-5	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998851776312128	WITHOUT_CLASSIFICATION	1.1482236878727718E-4	DESIGN
// The optional SQL string defined in the where attribute	WITHOUT_CLASSIFICATION	0.9996006762146895	WITHOUT_CLASSIFICATION	3.993237853104984E-4	DESIGN
//information about lazy properties of this class	WITHOUT_CLASSIFICATION	0.9984611255952406	WITHOUT_CLASSIFICATION	0.001538874404759321	DESIGN
//information about all properties in class hierarchy	WITHOUT_CLASSIFICATION	0.9994884211279539	WITHOUT_CLASSIFICATION	5.115788720460205E-4	DESIGN
//information about all columns/formulas in class hierarchy	WITHOUT_CLASSIFICATION	0.9995132556159073	WITHOUT_CLASSIFICATION	4.8674438409261E-4	DESIGN
// dynamic filters attached to the class-level	WITHOUT_CLASSIFICATION	0.9999953276033907	WITHOUT_CLASSIFICATION	4.672396609261208E-6	DESIGN
// SQL strings	WITHOUT_CLASSIFICATION	0.9999852523369618	WITHOUT_CLASSIFICATION	1.4747663038219367E-5	DESIGN
// for objects that came in via update()	WITHOUT_CLASSIFICATION	0.9999842359748145	WITHOUT_CLASSIFICATION	1.576402518556297E-5	DESIGN
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9998712483704834	WITHOUT_CLASSIFICATION	1.2875162951655903E-4	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998851776312128	WITHOUT_CLASSIFICATION	1.1482236878727718E-4	DESIGN
// IDENTIFIER	WITHOUT_CLASSIFICATION	0.9999563989255026	WITHOUT_CLASSIFICATION	4.3601074497359505E-5	DESIGN
// VERSION	WITHOUT_CLASSIFICATION	0.99986313810013	WITHOUT_CLASSIFICATION	1.3686189987002916E-4	DESIGN
//WHERE STRING	WITHOUT_CLASSIFICATION	0.9991197546966564	WITHOUT_CLASSIFICATION	8.802453033436837E-4	DESIGN
// SUBCLASS PROPERTY CLOSURE	WITHOUT_CLASSIFICATION	0.9990667150597627	WITHOUT_CLASSIFICATION	9.332849402372511E-4	DESIGN
//before add :-)	WITHOUT_CLASSIFICATION	0.9999594092122013	WITHOUT_CLASSIFICATION	4.059078779864889E-5	DESIGN
// Handle any filters applied to the class level	WITHOUT_CLASSIFICATION	0.9999920231651889	WITHOUT_CLASSIFICATION	7.976834811120852E-6	DESIGN
// only one-to-one is lazy fetched	WITHOUT_CLASSIFICATION	0.9999786920317449	WITHOUT_CLASSIFICATION	2.1307968255011435E-5	DESIGN
//note early exit here:	WITHOUT_CLASSIFICATION	0.9997568747161493	WITHOUT_CLASSIFICATION	2.4312528385061425E-4	DESIGN
// object have been loaded with setReadOnly(true); HHH-2236	WITHOUT_CLASSIFICATION	0.9999979298118837	WITHOUT_CLASSIFICATION	2.0701881162731294E-6	DESIGN
// NOTE: this assumes something about how propertySelectFragment is implemented by the subclass!	WITHOUT_CLASSIFICATION	0.9728440234041241	WITHOUT_CLASSIFICATION	0.027155976595875837	DESIGN
//strip leading ", "	WITHOUT_CLASSIFICATION	0.9998138247175052	WITHOUT_CLASSIFICATION	1.8617528249475734E-4	DESIGN
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9992292065010854	WITHOUT_CLASSIFICATION	7.707934989145954E-4	DESIGN
//otherwise return the "hydrated" state (ie. associations are not resolved)	WITHOUT_CLASSIFICATION	0.9999624319095602	WITHOUT_CLASSIFICATION	3.756809043980346E-5	DESIGN
//null owner ok??	WITHOUT_CLASSIFICATION	0.9991105620363393	WITHOUT_CLASSIFICATION	8.894379636606014E-4	DESIGN
// null sql means that the only lazy properties // are shared PK one-to-one associations which are // handled differently in the Type#nullSafeGet code...	WITHOUT_CLASSIFICATION	0.9995683057353583	WITHOUT_CLASSIFICATION	4.316942646418077E-4	DESIGN
// Create a new FROM node for the referenced class.	WITHOUT_CLASSIFICATION	0.9998963953525098	WITHOUT_CLASSIFICATION	1.0360464749007076E-4	DESIGN
// the difficulty here is exactly what do we update in order to // force the version to be incremented in the db...	WITHOUT_CLASSIFICATION	0.9999967258860772	WITHOUT_CLASSIFICATION	3.27411392282205E-6	DESIGN
// performance op to avoid the array search	WITHOUT_CLASSIFICATION	0.9999980853141707	WITHOUT_CLASSIFICATION	1.9146858292372825E-6	DESIGN
// properly handle property-ref-based associations	WITHOUT_CLASSIFICATION	0.9999619217998222	WITHOUT_CLASSIFICATION	3.807820017773896E-5	DESIGN
//Enable for HHH-440, which we don't like:	WITHOUT_CLASSIFICATION	0.9988269150216241	WITHOUT_CLASSIFICATION	0.0011730849783758795	DESIGN
// ALIASES	WITHOUT_CLASSIFICATION	0.9998581232589239	WITHOUT_CLASSIFICATION	1.4187674107615406E-4	DESIGN
// aliases named identifier ( alias.idname )	WITHOUT_CLASSIFICATION	0.9999974410475286	WITHOUT_CLASSIFICATION	2.558952471340532E-6	DESIGN
// aliases for composite-id's	WITHOUT_CLASSIFICATION	0.9999879303476129	WITHOUT_CLASSIFICATION	1.206965238706072E-5	DESIGN
// Fetch embedded identifiers propertynames from the "virtual" identifier component	WITHOUT_CLASSIFICATION	0.9999984549223467	WITHOUT_CLASSIFICATION	1.5450776532519703E-6	DESIGN
// embedded composite ids ( alias.idname1, alias.idname2 )	WITHOUT_CLASSIFICATION	0.999989464518122	WITHOUT_CLASSIFICATION	1.0535481878052097E-5	DESIGN
// TODO: skip formulas?	WITHOUT_CLASSIFICATION	0.7562079090686271	WITHOUT_CLASSIFICATION	0.24379209093137297	DESIGN
//don't need filters for the static loaders	WITHOUT_CLASSIFICATION	0.9999570506868426	WITHOUT_CLASSIFICATION	4.294931315740875E-5	DESIGN
//do two passes, for collection property-ref!	WITHOUT_CLASSIFICATION	0.9999214320642698	WITHOUT_CLASSIFICATION	7.856793573019935E-5	DESIGN
// select the correct row by either pk or rowid	WITHOUT_CLASSIFICATION	0.999999136541331	WITHOUT_CLASSIFICATION	8.634586691006164E-7	DESIGN
//TODO: eventually, rowIdName[j]	WITHOUT_CLASSIFICATION	0.9940443779426668	WITHOUT_CLASSIFICATION	0.005955622057333185	DESIGN
// this is a property of the table, which we are updating	WITHOUT_CLASSIFICATION	0.9972389424954197	WITHOUT_CLASSIFICATION	0.0027610575045803423	DESIGN
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.999994970477321	WITHOUT_CLASSIFICATION	5.029522678975018E-6	DESIGN
// we are using "all" or "dirty" property-based optimistic locking	WITHOUT_CLASSIFICATION	0.9998835958749015	WITHOUT_CLASSIFICATION	1.1640412509850963E-4	DESIGN
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999357572391224	WITHOUT_CLASSIFICATION	6.424276087756642E-5	DESIGN
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999704094734948	WITHOUT_CLASSIFICATION	2.9590526505185986E-5	DESIGN
// add normal properties	WITHOUT_CLASSIFICATION	0.9999919805667998	WITHOUT_CLASSIFICATION	8.019433200147031E-6	DESIGN
// add the discriminator	WITHOUT_CLASSIFICATION	0.9999743917480914	WITHOUT_CLASSIFICATION	2.560825190850939E-5	DESIGN
// more specifically : "? [op] datetime" //      1) if the operator is MINUS, the param needs to be of //          some datetime type //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.9951864736730285	WITHOUT_CLASSIFICATION	0.004813526326971447	DESIGN
// add normal properties	WITHOUT_CLASSIFICATION	0.9999919805667998	WITHOUT_CLASSIFICATION	8.019433200147031E-6	DESIGN
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999704094734948	WITHOUT_CLASSIFICATION	2.9590526505185986E-5	DESIGN
// add the discriminator	WITHOUT_CLASSIFICATION	0.9999743917480914	WITHOUT_CLASSIFICATION	2.560825190850939E-5	DESIGN
// add the primary key	WITHOUT_CLASSIFICATION	0.9999970494570349	WITHOUT_CLASSIFICATION	2.9505429651647143E-6	DESIGN
// delegate already handles PK columns	WITHOUT_CLASSIFICATION	0.999860930161467	WITHOUT_CLASSIFICATION	1.3906983853290025E-4	DESIGN
// we can't batch joined inserts, *especially* not if it is an identity insert; // nor can we batch statements where the expectation is based on an output param	WITHOUT_CLASSIFICATION	0.9999984248858251	WITHOUT_CLASSIFICATION	1.5751141748463917E-6	DESIGN
// Render the SQL query	WITHOUT_CLASSIFICATION	0.9999680706315599	WITHOUT_CLASSIFICATION	3.192936844013583E-5	DESIGN
// Write the values of fields onto the prepared statement - we MUST use the state at the time the // insert was issued (cos of foreign key constraints). Not necessarily the object's current state	WITHOUT_CLASSIFICATION	0.9999995663332123	WITHOUT_CLASSIFICATION	4.336667877108274E-7	DESIGN
// TODO : shouldnt inserts be Expectations.NONE?	WITHOUT_CLASSIFICATION	0.5719909868890469	DESIGN	0.4280090131109531	WITHOUT_CLASSIFICATION
//don't bother trying to update, we know there is no row there yet	WITHOUT_CLASSIFICATION	0.9996089934003395	WITHOUT_CLASSIFICATION	3.91006599660533E-4	DESIGN
//if all fields are null, we might need to delete existing row	WITHOUT_CLASSIFICATION	0.996372219523242	WITHOUT_CLASSIFICATION	0.003627780476757936	DESIGN
//there is probably a row there, so try to update //if no rows were updated, we will find out	WITHOUT_CLASSIFICATION	0.9999206113617982	WITHOUT_CLASSIFICATION	7.938863820179123E-5	DESIGN
//note: updates to joined tables can't be batched...	WITHOUT_CLASSIFICATION	0.9998125267997928	WITHOUT_CLASSIFICATION	1.874732002071779E-4	DESIGN
// starting index	WITHOUT_CLASSIFICATION	0.9999331309969375	WITHOUT_CLASSIFICATION	6.68690030626159E-5	DESIGN
//Now write the values of fields onto the prepared statement	WITHOUT_CLASSIFICATION	0.9999464598245767	WITHOUT_CLASSIFICATION	5.3540175423255775E-5	DESIGN
// Write any appropriate versioning conditional parameters	WITHOUT_CLASSIFICATION	0.9999956835487296	WITHOUT_CLASSIFICATION	4.316451270432746E-6	DESIGN
//Render the SQL query	WITHOUT_CLASSIFICATION	0.9998592978721458	WITHOUT_CLASSIFICATION	1.4070212785425692E-4	DESIGN
// Do the key. The key is immutable so we can use the _current_ object state - not necessarily // the state at the time the delete was issued	WITHOUT_CLASSIFICATION	0.9999564284846006	WITHOUT_CLASSIFICATION	4.3571515399284144E-5	DESIGN
// We should use the _current_ object state (ie. after any updates that occurred during flush)	WITHOUT_CLASSIFICATION	0.9999979018674733	WITHOUT_CLASSIFICATION	2.0981325266950387E-6	DESIGN
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9990270163229257	WITHOUT_CLASSIFICATION	9.729836770743744E-4	DESIGN
//note: dirtyFields==null means we had no snapshot, and we couldn't get one using select-before-update //	WITHOUT_CLASSIFICATION	0.9998406452327986	WITHOUT_CLASSIFICATION	1.5935476720142956E-4	DESIGN
// more specifically : "datetime [op] ?" //      1) if the operator is MINUS, we really cannot determine //          the expected type as either another datetime or //          numeric would be valid //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.7859297958087911	WITHOUT_CLASSIFICATION	0.21407020419120903	DESIGN
// For the case of dynamic-update="true", we need to generate the UPDATE SQL	WITHOUT_CLASSIFICATION	0.9999791203050508	WITHOUT_CLASSIFICATION	2.0879694949185337E-5	DESIGN
// don't need to check laziness (dirty checking algorithm handles that)	WITHOUT_CLASSIFICATION	0.9999920593579587	WITHOUT_CLASSIFICATION	7.94064204144805E-6	DESIGN
// For the case of dynamic-update="false", or no snapshot, we use the static SQL	WITHOUT_CLASSIFICATION	0.999966132711121	WITHOUT_CLASSIFICATION	3.38672888790698E-5	DESIGN
// if not "get", then try "is"	WITHOUT_CLASSIFICATION	0.9999809959675175	WITHOUT_CLASSIFICATION	1.900403248250989E-5	DESIGN
// Now update only the tables with dirty properties (and the table with the version number)	WITHOUT_CLASSIFICATION	0.9999995504055392	WITHOUT_CLASSIFICATION	4.495944607910137E-7	DESIGN
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999979219308475	WITHOUT_CLASSIFICATION	2.0780691525304637E-6	DESIGN
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999979219308475	WITHOUT_CLASSIFICATION	2.0780691525304637E-6	DESIGN
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999840167960793	WITHOUT_CLASSIFICATION	1.598320392076762E-5	DESIGN
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999840167960793	WITHOUT_CLASSIFICATION	1.598320392076762E-5	DESIGN
// not supported	WITHOUT_CLASSIFICATION	0.9999285923184035	WITHOUT_CLASSIFICATION	7.140768159648347E-5	DESIGN
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9990270163229257	WITHOUT_CLASSIFICATION	9.729836770743744E-4	DESIGN
// we need to utilize dynamic delete statements	WITHOUT_CLASSIFICATION	0.999995532537835	WITHOUT_CLASSIFICATION	4.46746216502722E-6	DESIGN
// otherwise, utilize the static delete statements	WITHOUT_CLASSIFICATION	0.9999958428562525	WITHOUT_CLASSIFICATION	4.157143747471081E-6	DESIGN
//just a performance opt!	WITHOUT_CLASSIFICATION	0.9999348682109455	WITHOUT_CLASSIFICATION	6.513178905462375E-5	DESIGN
//just a performance opt!	WITHOUT_CLASSIFICATION	0.9999348682109455	WITHOUT_CLASSIFICATION	6.513178905462375E-5	DESIGN
//all joins join to the pk of the driving table	WITHOUT_CLASSIFICATION	0.9999466385334262	WITHOUT_CLASSIFICATION	5.33614665736854E-5	DESIGN
//notice that we skip the first table; it is the driving table!	WITHOUT_CLASSIFICATION	0.9994710737234832	WITHOUT_CLASSIFICATION	5.289262765168182E-4	DESIGN
//we can inner join to superclass tables (the row MUST be there) //we can never inner join to subclass tables	WITHOUT_CLASSIFICATION	0.9994794370587055	WITHOUT_CLASSIFICATION	5.205629412945916E-4	DESIGN
//skip the driving table	WITHOUT_CLASSIFICATION	0.9999141052967242	WITHOUT_CLASSIFICATION	8.589470327578338E-5	DESIGN
//get 'em in the right order (not that it really matters)	WITHOUT_CLASSIFICATION	0.9706310390225701	WITHOUT_CLASSIFICATION	0.0293689609774299	DESIGN
// here, we work under the following assumptions: //      ------------ valid cases -------------------------------------- //      1) datetime + {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      2) datetime - datetime : always results in a DOUBLE //      3) datetime - {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      ------------ invalid cases ------------------------------------ //      4) datetime + datetime //      5) {something other than datetime} - datetime //      6) datetime * {any type} //      7) datetime / {any type} //      8) {any type} / datetime // doing so allows us to properly handle parameters as either the left // or right side here in the majority of cases	WITHOUT_CLASSIFICATION	0.9714239779095817	WITHOUT_CLASSIFICATION	0.02857602209041836	DESIGN
//render the where and from parts	WITHOUT_CLASSIFICATION	0.9999332255510621	WITHOUT_CLASSIFICATION	6.677444893789221E-5	DESIGN
//we *could* regerate this inside each called method!	WITHOUT_CLASSIFICATION	0.8462540758452165	WITHOUT_CLASSIFICATION	0.15374592415478355	DESIGN
//now render the joins	WITHOUT_CLASSIFICATION	0.9996554108236533	WITHOUT_CLASSIFICATION	3.445891763467723E-4	DESIGN
// This will add the new from element to the origin.	WITHOUT_CLASSIFICATION	0.99997527879258	WITHOUT_CLASSIFICATION	2.4721207420021692E-5	DESIGN
//now render the select clause	WITHOUT_CLASSIFICATION	0.9988648645199959	WITHOUT_CLASSIFICATION	0.0011351354800041226	DESIGN
//now tie it all together	WITHOUT_CLASSIFICATION	0.9997809130355142	WITHOUT_CLASSIFICATION	2.1908696448586933E-4	DESIGN
//insert/update/delete SQL	WITHOUT_CLASSIFICATION	0.9998716291175961	WITHOUT_CLASSIFICATION	1.283708824039227E-4	DESIGN
//select SQL	WITHOUT_CLASSIFICATION	0.9998598447556225	WITHOUT_CLASSIFICATION	1.401552443774925E-4	DESIGN
//no need to check laziness, dirty checking handles that	WITHOUT_CLASSIFICATION	0.9999825747807279	WITHOUT_CLASSIFICATION	1.7425219272022973E-5	DESIGN
// Fully resolve the map reference, create implicit joins.	WITHOUT_CLASSIFICATION	0.9999949987951698	WITHOUT_CLASSIFICATION	5.00120483007556E-6	DESIGN
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999123048532337	WITHOUT_CLASSIFICATION	8.769514676638583E-5	DESIGN
// The basic implementation is to simply use the node's text	WITHOUT_CLASSIFICATION	0.9997921684203573	WITHOUT_CLASSIFICATION	2.0783157964265647E-4	DESIGN
// for dialects which are known to not support ANSI-SQL row-value-constructor syntax, // we should mutate the tree.	WITHOUT_CLASSIFICATION	0.9998597385186868	WITHOUT_CLASSIFICATION	1.402614813131438E-4	DESIGN
// Due to the complexity in initializing the SelectClause, do not generate one here. // If it is not found; simply return null... // // Also, do not cache since it gets generated well after we are created.	WITHOUT_CLASSIFICATION	0.9999935308470635	WITHOUT_CLASSIFICATION	6.469152936394327E-6	DESIGN
// check the version unsaved-value, if appropriate	WITHOUT_CLASSIFICATION	0.9999967983677102	WITHOUT_CLASSIFICATION	3.2016322898566795E-6	DESIGN
// let this take precedence if defined, since it works for // assigned identifiers	WITHOUT_CLASSIFICATION	0.9999727787497581	WITHOUT_CLASSIFICATION	2.722125024183457E-5	DESIGN
// check the id unsaved-value	WITHOUT_CLASSIFICATION	0.9999617653021379	WITHOUT_CLASSIFICATION	3.823469786207856E-5	DESIGN
// check to see if it is in the second-level cache	WITHOUT_CLASSIFICATION	0.9992241381116213	WITHOUT_CLASSIFICATION	7.758618883787725E-4	DESIGN
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9995769085686194	WITHOUT_CLASSIFICATION	4.230914313806368E-4	DESIGN
// For property references generate <tablealias>.<columnname> as <projectionalias>	WITHOUT_CLASSIFICATION	0.9999987379884302	WITHOUT_CLASSIFICATION	1.262011569818305E-6	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998851776312128	WITHOUT_CLASSIFICATION	1.1482236878727718E-4	DESIGN
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9992292065010854	WITHOUT_CLASSIFICATION	7.707934989145954E-4	DESIGN
//force immediate execution of the insert	WITHOUT_CLASSIFICATION	0.9999610361293613	WITHOUT_CLASSIFICATION	3.89638706387831E-5	DESIGN
// If this from element is a collection and the path is a collection property (maxIndex, etc.) then // generate a sub-query.	WITHOUT_CLASSIFICATION	0.9999934579757662	WITHOUT_CLASSIFICATION	6.542024233773331E-6	DESIGN
// entities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999797589110895	WITHOUT_CLASSIFICATION	2.024108891058464E-5	DESIGN
// collections ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999969194760169	WITHOUT_CLASSIFICATION	3.080523983103287E-5	DESIGN
//cannot occur	WITHOUT_CLASSIFICATION	0.9998982730244373	WITHOUT_CLASSIFICATION	1.0172697556272417E-4	DESIGN
//cannot occur	WITHOUT_CLASSIFICATION	0.9998982730244373	WITHOUT_CLASSIFICATION	1.0172697556272417E-4	DESIGN
// only carry on if the method has no parameters	WITHOUT_CLASSIFICATION	0.9999891729841174	WITHOUT_CLASSIFICATION	1.0827015882665146E-5	DESIGN
// try "get"	WITHOUT_CLASSIFICATION	0.9999939796871017	WITHOUT_CLASSIFICATION	6.020312898266009E-6	DESIGN
// do nothing...	WITHOUT_CLASSIFICATION	0.9999443670020282	WITHOUT_CLASSIFICATION	5.563299797178822E-5	DESIGN
// do nothing...	WITHOUT_CLASSIFICATION	0.9999443670020282	WITHOUT_CLASSIFICATION	5.563299797178822E-5	DESIGN
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9995405442815186	WITHOUT_CLASSIFICATION	4.5945571848141905E-4	DESIGN
// this page intentionally left blank :)	WITHOUT_CLASSIFICATION	0.9998976827848962	WITHOUT_CLASSIFICATION	1.0231721510380052E-4	DESIGN
// do not do anything	WITHOUT_CLASSIFICATION	0.9998750669576566	WITHOUT_CLASSIFICATION	1.2493304234332772E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9992342288671854	WITHOUT_CLASSIFICATION	7.657711328146887E-4	DESIGN
// ignore	WITHOUT_CLASSIFICATION	0.9999770031580442	WITHOUT_CLASSIFICATION	2.2996841955798397E-5	DESIGN
//cant instantiate	WITHOUT_CLASSIFICATION	0.9998896738610195	WITHOUT_CLASSIFICATION	1.1032613898056679E-4	DESIGN
//if it is a property of an embedded component, invoke on the "identifier"	WITHOUT_CLASSIFICATION	0.9999972509443013	WITHOUT_CLASSIFICATION	2.7490556987195745E-6	DESIGN
// otherwise:	WITHOUT_CLASSIFICATION	0.9999872039632277	WITHOUT_CLASSIFICATION	1.2796036772160785E-5	DESIGN
// skip finalize methods	WITHOUT_CLASSIFICATION	0.9998147042631103	WITHOUT_CLASSIFICATION	1.852957368897915E-4	DESIGN
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9966058368672	WITHOUT_CLASSIFICATION	0.0033941631328001202	DESIGN
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9966058368672	WITHOUT_CLASSIFICATION	0.0033941631328001202	DESIGN
// HHH-2481 make sure the callback gets cleared, otherwise the instance stays in a static thread local.	WITHOUT_CLASSIFICATION	0.9990907885257384	WITHOUT_CLASSIFICATION	9.092114742616039E-4	DESIGN
// while constructor is running	WITHOUT_CLASSIFICATION	0.9989974156916517	WITHOUT_CLASSIFICATION	0.0010025843083483522	DESIGN
// while constructor is running	WITHOUT_CLASSIFICATION	0.9989974156916517	WITHOUT_CLASSIFICATION	0.0010025843083483522	DESIGN
// note: interface is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9988917994646616	WITHOUT_CLASSIFICATION	0.0011082005353384376	DESIGN
// interfaces // arguments	WITHOUT_CLASSIFICATION	0.999962583480939	WITHOUT_CLASSIFICATION	3.741651906096544E-5	DESIGN
//TODO!	WITHOUT_CLASSIFICATION	0.96565795544027	WITHOUT_CLASSIFICATION	0.034342044559730084	DESIGN
// Get the caller	WITHOUT_CLASSIFICATION	0.9999698141077799	WITHOUT_CLASSIFICATION	3.0185892220139062E-5	DESIGN
// Get the caller principals	WITHOUT_CLASSIFICATION	0.9999736042824651	WITHOUT_CLASSIFICATION	2.639571753495821E-5	DESIGN
//private static final Alias DEFAULT_ALIAS = new Alias(10, null);	WITHOUT_CLASSIFICATION	0.9999142927251982	WITHOUT_CLASSIFICATION	8.570727480181941E-5	DESIGN
// Needed to bump this up to DotNode, because that is the only thing which currently // knows about the property-ref path in the correct format; it is either this, or // recurse over the DotNodes constructing the property path just like DotNode does // internally	WITHOUT_CLASSIFICATION	0.9999995457601388	WITHOUT_CLASSIFICATION	4.542398610758867E-7	DESIGN
//if the identifier is quoted, remove the quotes	WITHOUT_CLASSIFICATION	0.9995340267548916	WITHOUT_CLASSIFICATION	4.6597324510850517E-4	DESIGN
//truncate the identifier to the max alias length, less the suffix length	WITHOUT_CLASSIFICATION	0.9999877126865028	WITHOUT_CLASSIFICATION	1.2287313497277226E-5	DESIGN
//full joins are not supported.. yet!	WITHOUT_CLASSIFICATION	0.999926565627452	WITHOUT_CLASSIFICATION	7.343437254802447E-5	DESIGN
// null is not considered the same type as Integer. //$NON-NLS-1 //$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999951768470573	WITHOUT_CLASSIFICATION	4.82315294270183E-6	DESIGN
// the outerJoinsAfterWhere needs to come before where clause to properly // handle dynamic filters	WITHOUT_CLASSIFICATION	0.9989211900108605	WITHOUT_CLASSIFICATION	0.0010788099891394611	DESIGN
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999415659743717	WITHOUT_CLASSIFICATION	5.843402562831749E-5	DESIGN
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999415659743717	WITHOUT_CLASSIFICATION	5.843402562831749E-5	DESIGN
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999415659743717	WITHOUT_CLASSIFICATION	5.843402562831749E-5	DESIGN
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999415659743717	WITHOUT_CLASSIFICATION	5.843402562831749E-5	DESIGN
// strip off any leading 'and' token	WITHOUT_CLASSIFICATION	0.9999883597572464	WITHOUT_CLASSIFICATION	1.164024275353337E-5	DESIGN
// if the condition is not already there...	WITHOUT_CLASSIFICATION	0.9997642450100532	WITHOUT_CLASSIFICATION	2.3575498994676317E-4	DESIGN
//dontSpace.add("'");	WITHOUT_CLASSIFICATION	0.9996517036823427	WITHOUT_CLASSIFICATION	3.482963176572782E-4	DESIGN
//for MySQL	WITHOUT_CLASSIFICATION	0.9997774418597593	WITHOUT_CLASSIFICATION	2.2255814024074624E-4	DESIGN
//HashMap columnsUnique = new HashMap();	WITHOUT_CLASSIFICATION	0.9996071460755178	WITHOUT_CLASSIFICATION	3.9285392448220246E-4	DESIGN
//null caused some problems	WITHOUT_CLASSIFICATION	0.9745498212452068	WITHOUT_CLASSIFICATION	0.025450178754793173	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.9991752457914114	WITHOUT_CLASSIFICATION	8.247542085885454E-4	DESIGN
//not sure if this would ever be null but wanted to be careful	WITHOUT_CLASSIFICATION	0.9828085822522575	WITHOUT_CLASSIFICATION	0.017191417747742466	DESIGN
//even on inverse="true"	WITHOUT_CLASSIFICATION	0.9999030910832228	WITHOUT_CLASSIFICATION	9.690891677715056E-5	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.9991752457914114	WITHOUT_CLASSIFICATION	8.247542085885454E-4	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.9991752457914114	WITHOUT_CLASSIFICATION	8.247542085885454E-4	DESIGN
// If true then execute db updates, otherwise just generate and display updates	WITHOUT_CLASSIFICATION	0.9999999434973468	WITHOUT_CLASSIFICATION	5.6502653247053814E-8	DESIGN
// we only release the connection	WITHOUT_CLASSIFICATION	0.9999969528825462	WITHOUT_CLASSIFICATION	3.0471174537162707E-6	DESIGN
// deprecated option...	WITHOUT_CLASSIFICATION	0.9998779553753468	WITHOUT_CLASSIFICATION	1.2204462465314477E-4	DESIGN
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9799499706590226	WITHOUT_CLASSIFICATION	0.020050029340977382	DESIGN
//actually, this last test is probably unnecessary, since  //beforeCompletion() doesn't get called during rollback	WITHOUT_CLASSIFICATION	0.9871480978778376	WITHOUT_CLASSIFICATION	0.012851902122162332	DESIGN
// this one only really needed for badly-behaved applications! // (if the TransactionManager has a Sychronization registered, // its a noop) // (actually we do need it for downgrading locks)	WITHOUT_CLASSIFICATION	0.9993681970557671	WITHOUT_CLASSIFICATION	6.318029442328654E-4	DESIGN
// Create an DotNode AST for the path and resolve it.	WITHOUT_CLASSIFICATION	0.9999988822815936	WITHOUT_CLASSIFICATION	1.117718406325711E-6	DESIGN
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9799499706590226	WITHOUT_CLASSIFICATION	0.020050029340977382	DESIGN
//if we could not register a synchronization, //do the before/after completion callbacks //ourself (but we need to let jdbcContext //know that this is what we are going to //do, so it doesn't keep trying to register //synchronizations)	WITHOUT_CLASSIFICATION	0.998843597778166	WITHOUT_CLASSIFICATION	0.0011564022218339453	DESIGN
// swallow it, and continue to roll back JTA transaction	WITHOUT_CLASSIFICATION	0.9999535981187152	WITHOUT_CLASSIFICATION	4.640188128483135E-5	DESIGN
// so the transaction is already rolled back, by JTA spec	WITHOUT_CLASSIFICATION	0.9999847570158323	WITHOUT_CLASSIFICATION	1.5242984167566743E-5	DESIGN
// this method is a noop if there is a Synchronization!	WITHOUT_CLASSIFICATION	0.9995981710592091	WITHOUT_CLASSIFICATION	4.01828940790813E-4	DESIGN
// two conditions where we need to transform this to a theta-join syntax: //      1) 'elem' is the "root from-element" in correlated subqueries //      2) The DotNode.useThetaStyleImplicitJoins has been set to true //          and 'elem' represents an implicit join	WITHOUT_CLASSIFICATION	0.999979055306431	WITHOUT_CLASSIFICATION	2.094469356895019E-5	DESIGN
// WebSphere, however, is not a sane JEE/JTA container...	WITHOUT_CLASSIFICATION	0.9986724269435082	WITHOUT_CLASSIFICATION	0.0013275730564918646	DESIGN
// for sane JEE/JTA containers, the transaction itself functions as its identifier...	WITHOUT_CLASSIFICATION	0.9999960690604615	WITHOUT_CLASSIFICATION	3.9309395385852294E-6	DESIGN
//swallow, the transaction was finished	WITHOUT_CLASSIFICATION	0.9996963090010844	WITHOUT_CLASSIFICATION	3.036909989156605E-4	DESIGN
// all AliasToEntityMapResultTransformer are considered equal ~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999985489851667	WITHOUT_CLASSIFICATION	1.4510148332312087E-6	DESIGN
// Create the join element under the from element.	WITHOUT_CLASSIFICATION	0.9999669052721905	WITHOUT_CLASSIFICATION	3.30947278095251E-5	DESIGN
// all DistinctRootEntityResultTransformer are considered equal ~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999984462576628	WITHOUT_CLASSIFICATION	1.5537423371732466E-6	DESIGN
// map of EntityMode -> Tuplizer	WITHOUT_CLASSIFICATION	0.9999931532961046	WITHOUT_CLASSIFICATION	6.846703895432109E-6	DESIGN
// this is a virtual id property...	WITHOUT_CLASSIFICATION	0.9968493596315919	WITHOUT_CLASSIFICATION	0.0031506403684080954	DESIGN
//this one needed only for guessEntityMode()	WITHOUT_CLASSIFICATION	0.999941034083143	WITHOUT_CLASSIFICATION	5.896591685702478E-5	DESIGN
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999905978817284	WITHOUT_CLASSIFICATION	9.402118271628113E-6	DESIGN
// todo : move this to SF per HHH-3517; also see HHH-1907 and ComponentMetamodel	WITHOUT_CLASSIFICATION	0.9999188487805983	WITHOUT_CLASSIFICATION	8.11512194017171E-5	DESIGN
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999983664499397	WITHOUT_CLASSIFICATION	1.633550060300151E-6	DESIGN
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999881438781688	WITHOUT_CLASSIFICATION	1.1856121831194494E-5	DESIGN
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999958693532393	WITHOUT_CLASSIFICATION	4.1306467606635115E-6	DESIGN
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999881438781688	WITHOUT_CLASSIFICATION	1.1856121831194494E-5	DESIGN
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999934563629407	WITHOUT_CLASSIFICATION	6.543637059293973E-6	DESIGN
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.99992848486029	WITHOUT_CLASSIFICATION	7.151513971006448E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9992342288671854	WITHOUT_CLASSIFICATION	7.657711328146887E-4	DESIGN
// cached for efficiency...	WITHOUT_CLASSIFICATION	0.9994885677130987	WITHOUT_CLASSIFICATION	5.11432286901302E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9992342288671854	WITHOUT_CLASSIFICATION	7.657711328146887E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9992342288671854	WITHOUT_CLASSIFICATION	7.657711328146887E-4	DESIGN
//it was not embedded, so the argument is just an id	WITHOUT_CLASSIFICATION	0.9998460061941528	WITHOUT_CLASSIFICATION	1.5399380584727723E-4	DESIGN
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999983664499397	WITHOUT_CLASSIFICATION	1.633550060300151E-6	DESIGN
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999958693532393	WITHOUT_CLASSIFICATION	4.1306467606635115E-6	DESIGN
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999934563629407	WITHOUT_CLASSIFICATION	6.543637059293973E-6	DESIGN
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999880521594511	WITHOUT_CLASSIFICATION	1.1947840548899E-5	DESIGN
//return currentId;	WITHOUT_CLASSIFICATION	0.9999454653383208	WITHOUT_CLASSIFICATION	5.45346616791276E-5	DESIGN
//reset the id	WITHOUT_CLASSIFICATION	0.9999196093464617	WITHOUT_CLASSIFICATION	8.039065353829128E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9992342288671854	WITHOUT_CLASSIFICATION	7.657711328146887E-4	DESIGN
//reset the version	WITHOUT_CLASSIFICATION	0.9999841580275503	WITHOUT_CLASSIFICATION	1.5841972449685938E-5	DESIGN
// the default is to simply not lazy fetch properties for now...	WITHOUT_CLASSIFICATION	0.9998077939607418	WITHOUT_CLASSIFICATION	1.9220603925807996E-4	DESIGN
// Add the second join, the one that ends in the destination table.	WITHOUT_CLASSIFICATION	0.9999696427560404	WITHOUT_CLASSIFICATION	3.035724395965837E-5	DESIGN
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999123048532337	WITHOUT_CLASSIFICATION	8.769514676638583E-5	DESIGN
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.99992848486029	WITHOUT_CLASSIFICATION	7.151513971006448E-5	DESIGN
// determine the id getter and setter methods from the proxy interface (if any) // determine all interfaces needed by the resulting proxy	WITHOUT_CLASSIFICATION	0.9996845562236503	WITHOUT_CLASSIFICATION	3.1544377634979613E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9992342288671854	WITHOUT_CLASSIFICATION	7.657711328146887E-4	DESIGN
//not final because proxy factory creation can fail	WITHOUT_CLASSIFICATION	0.9999000487651843	WITHOUT_CLASSIFICATION	9.995123481574689E-5	DESIGN
// superclass entity-name	WITHOUT_CLASSIFICATION	0.9999887012592424	WITHOUT_CLASSIFICATION	1.1298740757683404E-5	DESIGN
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999123048532337	WITHOUT_CLASSIFICATION	8.769514676638583E-5	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998851776312128	WITHOUT_CLASSIFICATION	1.1482236878727718E-4	DESIGN
//init the aliases, after initing the constructornode	WITHOUT_CLASSIFICATION	0.99946787121029	WITHOUT_CLASSIFICATION	5.321287897099583E-4	DESIGN
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999123048532337	WITHOUT_CLASSIFICATION	8.769514676638583E-5	DESIGN
// legacy behavior (with no abstract attribute specified)	WITHOUT_CLASSIFICATION	0.9999897464282997	WITHOUT_CLASSIFICATION	1.0253571700197111E-5	DESIGN
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9998853643957554	WITHOUT_CLASSIFICATION	1.1463560424466665E-4	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998851776312128	WITHOUT_CLASSIFICATION	1.1482236878727718E-4	DESIGN
//note: this affects the return value!	WITHOUT_CLASSIFICATION	0.9982465100406617	WITHOUT_CLASSIFICATION	0.0017534899593383447	DESIGN
// Need to account for allowable '_' within the variant	WITHOUT_CLASSIFICATION	0.9999927356033239	WITHOUT_CLASSIFICATION	7.264396676038828E-6	DESIGN
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999925132155205	WITHOUT_CLASSIFICATION	7.486784479498226E-6	DESIGN
// Collection Types:	WITHOUT_CLASSIFICATION	0.9999938625132773	WITHOUT_CLASSIFICATION	6.137486722666128E-6	DESIGN
// convenience methods relating to operations across arrays of types...	WITHOUT_CLASSIFICATION	0.9998496213506934	WITHOUT_CLASSIFICATION	1.5037864930666218E-4	DESIGN
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9997069288489013	WITHOUT_CLASSIFICATION	2.9307115109872967E-4	DESIGN
//Blobs are ignored by merge()	WITHOUT_CLASSIFICATION	0.9999534214329977	WITHOUT_CLASSIFICATION	4.65785670022931E-5	DESIGN
//value is the entity name	WITHOUT_CLASSIFICATION	0.9999395362775412	WITHOUT_CLASSIFICATION	6.046372245882486E-5	DESIGN
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.999121485730232	WITHOUT_CLASSIFICATION	8.785142697680937E-4	DESIGN
// generate id select fragment and then property select fragment for // each expression, just like generateSelectFragments().	WITHOUT_CLASSIFICATION	0.9999985174810874	WITHOUT_CLASSIFICATION	1.4825189126319692E-6	DESIGN
//TODO!	WITHOUT_CLASSIFICATION	0.96565795544027	WITHOUT_CLASSIFICATION	0.034342044559730084	DESIGN
//xml is the entity name	WITHOUT_CLASSIFICATION	0.9997973183691831	WITHOUT_CLASSIFICATION	2.0268163081696067E-4	DESIGN
//special case ... this is the leaf of the containment graph, even though not immutable	WITHOUT_CLASSIFICATION	0.9994170410009813	WITHOUT_CLASSIFICATION	5.82958999018613E-4	DESIGN
//tolerates nulls	WITHOUT_CLASSIFICATION	0.9999274560948325	WITHOUT_CLASSIFICATION	7.254390516757497E-5	DESIGN
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9996641214692782	WITHOUT_CLASSIFICATION	3.3587853072174987E-4	DESIGN
// metaType is assumed to be single-column type	WITHOUT_CLASSIFICATION	0.9997620251374542	WITHOUT_CLASSIFICATION	2.379748625458374E-4	DESIGN
// Get all the select expressions (that we just generated) and render the select.	WITHOUT_CLASSIFICATION	0.9999968323169252	WITHOUT_CLASSIFICATION	3.1676830749476545E-6	DESIGN
// Look through the FromElement's children to find any collections of values that should be fetched...	WITHOUT_CLASSIFICATION	0.9999815184439018	WITHOUT_CLASSIFICATION	1.8481556098259544E-5	DESIGN
//return AssociationType.FOREIGN_KEY_TO_PARENT; //this is better but causes a transient object exception...	WITHOUT_CLASSIFICATION	0.9209112258050275	WITHOUT_CLASSIFICATION	0.07908877419497248	DESIGN
// Use the lower case function name. // Remember whether we're in a SELECT clause or not.	WITHOUT_CLASSIFICATION	0.9950548787157292	WITHOUT_CLASSIFICATION	0.004945121284270863	DESIGN
// IDENT might be the name of a class.	WITHOUT_CLASSIFICATION	0.9991796363263731	WITHOUT_CLASSIFICATION	8.203636736269058E-4	DESIGN
//TODO!!!	WITHOUT_CLASSIFICATION	0.96565795544027	WITHOUT_CLASSIFICATION	0.034342044559730084	DESIGN
//st.setTimestamp( index,  new Timestamp( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9996756428909588	WITHOUT_CLASSIFICATION	3.243571090412332E-4	DESIGN
//st.setDate( index,  new Date( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9996828958235529	WITHOUT_CLASSIFICATION	3.1710417644715964E-4	DESIGN
// both are Timestamps	WITHOUT_CLASSIFICATION	0.9999869865620205	WITHOUT_CLASSIFICATION	1.3013437979469385E-5	DESIGN
// at least one is a plain old Date	WITHOUT_CLASSIFICATION	0.9999686434065291	WITHOUT_CLASSIFICATION	3.135659347086816E-5	DESIGN
//noop	WITHOUT_CLASSIFICATION	0.9987302885427921	WITHOUT_CLASSIFICATION	0.0012697114572079004	DESIGN
// if the corresponding SQL value is NULL, the reader we got is NULL as well	WITHOUT_CLASSIFICATION	0.9978702080623494	WITHOUT_CLASSIFICATION	0.0021297919376505733	DESIGN
// Fetch Reader content up to the end - and put characters in a StringBuffer	WITHOUT_CLASSIFICATION	0.9999943696841816	WITHOUT_CLASSIFICATION	5.6303158183951406E-6	DESIGN
// Return StringBuffer content as a large String	WITHOUT_CLASSIFICATION	0.9999481500850262	WITHOUT_CLASSIFICATION	5.18499149737833E-5	DESIGN
//or Types.LONGVARCHAR?	WITHOUT_CLASSIFICATION	0.9980006471295629	WITHOUT_CLASSIFICATION	0.0019993528704370968	DESIGN
//Not called at runtime so doesn't matter if its slow :)	WITHOUT_CLASSIFICATION	0.9907313555668281	WITHOUT_CLASSIFICATION	0.009268644433171847	DESIGN
//TODO	WITHOUT_CLASSIFICATION	0.9918487430440549	WITHOUT_CLASSIFICATION	0.008151256955945088	DESIGN
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999948880603796	WITHOUT_CLASSIFICATION	5.111939620356016E-6	DESIGN
//different nullability rules for pk/fk	WITHOUT_CLASSIFICATION	0.9999809449397269	WITHOUT_CLASSIFICATION	1.9055060273068007E-5	DESIGN
//cache this	WITHOUT_CLASSIFICATION	0.9984827245760021	WITHOUT_CLASSIFICATION	0.0015172754239979088	DESIGN
//only really need new array during semiresolve!	WITHOUT_CLASSIFICATION	0.9996851187247735	WITHOUT_CLASSIFICATION	3.1488127522647695E-4	DESIGN
// Forcefully remove leading ands from where fragments; the grammar will // handle adding them	WITHOUT_CLASSIFICATION	0.9950331748581882	WITHOUT_CLASSIFICATION	0.004966825141811803	DESIGN
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9748325395826959	WITHOUT_CLASSIFICATION	0.025167460417304187	DESIGN
// Create a new FILTERS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999952113623931	WITHOUT_CLASSIFICATION	4.78863760687679E-6	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998851776312128	WITHOUT_CLASSIFICATION	1.1482236878727718E-4	DESIGN
//public Object instantiate(Object parent, SessionImplementor session) throws HibernateException;	WITHOUT_CLASSIFICATION	0.999825372309267	WITHOUT_CLASSIFICATION	1.7462769073308312E-4	DESIGN
//nothing to do	WITHOUT_CLASSIFICATION	0.9979755825721962	WITHOUT_CLASSIFICATION	0.0020244174278037813	DESIGN
//nothing to do	WITHOUT_CLASSIFICATION	0.9979755825721962	WITHOUT_CLASSIFICATION	0.0020244174278037813	DESIGN
// VersionType impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //      Note : simply returns null for seed() and next() as the only known //      application of binary types for versioning is for use with the //      TIMESTAMP datatype supported by Sybase and SQL Server, which //      are completely db-generated values...	WITHOUT_CLASSIFICATION	0.9999966485534999	WITHOUT_CLASSIFICATION	3.3514465002217095E-6	DESIGN
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9997069288489013	WITHOUT_CLASSIFICATION	2.9307115109872967E-4	DESIGN
//not really necessary, I guess...	WITHOUT_CLASSIFICATION	0.9989097973751329	WITHOUT_CLASSIFICATION	0.001090202624867155	DESIGN
//Clobs are ignored by merge() operation	WITHOUT_CLASSIFICATION	0.999990321095455	WITHOUT_CLASSIFICATION	9.678904544979324E-6	DESIGN
// we do not have to worry about queued additions to uninitialized // collections, since they can only occur for inverse collections!	WITHOUT_CLASSIFICATION	0.9999870352129047	WITHOUT_CLASSIFICATION	1.296478709529525E-5	DESIGN
// collections cannot be compared	WITHOUT_CLASSIFICATION	0.9999866284562166	WITHOUT_CLASSIFICATION	1.337154378348624E-5	DESIGN
//remember the uk value	WITHOUT_CLASSIFICATION	0.9999093400981971	WITHOUT_CLASSIFICATION	9.065990180293142E-5	DESIGN
//NOOP	WITHOUT_CLASSIFICATION	0.99897934524713	WITHOUT_CLASSIFICATION	0.001020654752870064	DESIGN
//processCollectionProperty(token, q.getCollectionPersister(collectionRole), collectionName);	WITHOUT_CLASSIFICATION	0.9999797461123925	WITHOUT_CLASSIFICATION	2.0253887607547697E-5	DESIGN
//we must use the "remembered" uk value, since it is  //not available from the EntityEntry during assembly	WITHOUT_CLASSIFICATION	0.9987253985035228	WITHOUT_CLASSIFICATION	0.0012746014964771012	DESIGN
// collections don't dirty an unversioned parent entity	WITHOUT_CLASSIFICATION	0.9999999471124691	WITHOUT_CLASSIFICATION	5.288753097035213E-8	DESIGN
// return false;	WITHOUT_CLASSIFICATION	0.9999599376140631	WITHOUT_CLASSIFICATION	4.006238593694913E-5	DESIGN
// This just handles a particular case of component // projection, perhaps get rid of it and throw an exception	WITHOUT_CLASSIFICATION	0.9967251518581844	WITHOUT_CLASSIFICATION	0.0032748481418155644	DESIGN
//NOTE: we avoid joining to the next table if the named property is just the foreign key value	WITHOUT_CLASSIFICATION	0.9999841606987809	WITHOUT_CLASSIFICATION	1.583930121909764E-5	DESIGN
// the key is the owning entity itself, so get the ID from the key	WITHOUT_CLASSIFICATION	0.9999568734777724	WITHOUT_CLASSIFICATION	4.312652222769041E-5	DESIGN
// if the original is a PersistentCollection, and that original // was not flagged as dirty, then reset the target's dirty flag // here after the copy operation. // </p> // One thing to be careful of here is a "bare" original collection // in which case we should never ever ever reset the dirty flag // on the target because we simply do not know...	WITHOUT_CLASSIFICATION	0.9996801599659804	WITHOUT_CLASSIFICATION	3.1984003401953854E-4	DESIGN
//ignore subselect keywords	WITHOUT_CLASSIFICATION	0.9997147864047295	WITHOUT_CLASSIFICATION	2.8521359527040153E-4	DESIGN
// copy elements into newly empty target collection	WITHOUT_CLASSIFICATION	0.9999670421721135	WITHOUT_CLASSIFICATION	3.2957827886501415E-5	DESIGN
// for a null target, or a target which is the same as the original, we // need to put the merged elements in a new collection	WITHOUT_CLASSIFICATION	0.9999990723294461	WITHOUT_CLASSIFICATION	9.276705539303005E-7	DESIGN
// by default just use an unanticipated capacity since we don't // know how to extract the capacity to use from original here...	WITHOUT_CLASSIFICATION	0.9999878732765026	WITHOUT_CLASSIFICATION	1.212672349747154E-5	DESIGN
// get the elements back into the target making sure to handle dirty flag	WITHOUT_CLASSIFICATION	0.9997957006024802	WITHOUT_CLASSIFICATION	2.0429939751976026E-4	DESIGN
// check if collection is currently being loaded	WITHOUT_CLASSIFICATION	0.9999897575673069	WITHOUT_CLASSIFICATION	1.0242432692999655E-5	DESIGN
// check if it is already completely loaded, but unowned	WITHOUT_CLASSIFICATION	0.9999910370858361	WITHOUT_CLASSIFICATION	8.9629141638147E-6	DESIGN
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9994572868749263	WITHOUT_CLASSIFICATION	5.427131250737881E-4	DESIGN
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9748325395826959	WITHOUT_CLASSIFICATION	0.025167460417304187	DESIGN
// create a new collection wrapper, to be initialized later	WITHOUT_CLASSIFICATION	0.9999953708695408	WITHOUT_CLASSIFICATION	4.629130459124012E-6	DESIGN
// Some JDBC drivers erroneously return an empty array here for a null DB value :/	WITHOUT_CLASSIFICATION	0.9999902590938452	WITHOUT_CLASSIFICATION	9.740906154820157E-6	DESIGN
// our column span is the number of columns in the PK	WITHOUT_CLASSIFICATION	0.9997842900952845	WITHOUT_CLASSIFICATION	2.157099047155186E-4	DESIGN
//cannot batch fetch by unique key (property-ref associations)	WITHOUT_CLASSIFICATION	0.9999671650956681	WITHOUT_CLASSIFICATION	3.2834904331912805E-5	DESIGN
// we already know current is not null...	WITHOUT_CLASSIFICATION	0.9997939046479897	WITHOUT_CLASSIFICATION	2.060953520103827E-4	DESIGN
// the ids are fully resolved, so compare them with isDirty(), not isModified()	WITHOUT_CLASSIFICATION	0.9998666206544707	WITHOUT_CLASSIFICATION	1.3337934552931673E-4	DESIGN
//the owner of the association is not the owner of the id	WITHOUT_CLASSIFICATION	0.9994576880855401	WITHOUT_CLASSIFICATION	5.423119144598131E-4	DESIGN
// ----------------------------------------------------------- Constructors	WITHOUT_CLASSIFICATION	0.9998862662845882	WITHOUT_CLASSIFICATION	1.137337154118236E-4	DESIGN
// ----------------------------------------------------- Instance Variables	WITHOUT_CLASSIFICATION	0.9999785931106938	WITHOUT_CLASSIFICATION	2.1406889306189705E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9992342288671854	WITHOUT_CLASSIFICATION	7.657711328146887E-4	DESIGN
// --------------------------------------------------------- Public Methods	WITHOUT_CLASSIFICATION	0.9998672647455732	WITHOUT_CLASSIFICATION	1.327352544269189E-4	DESIGN
// Compare the two maps for equality	WITHOUT_CLASSIFICATION	0.9999990476301496	WITHOUT_CLASSIFICATION	9.523698504494535E-7	DESIGN
// Simple tests that require no synchronization	WITHOUT_CLASSIFICATION	0.9999975792006512	WITHOUT_CLASSIFICATION	2.4207993487105615E-6	DESIGN
//Sybase fail if we don't do that, sigh...	WITHOUT_CLASSIFICATION	0.9994002661929084	WITHOUT_CLASSIFICATION	5.997338070915074E-4	DESIGN
// Handles things like: // a and b or c // a and ( b or c ) // not a and not b // not ( a and b ) // x between y and z            (overloaded "and") // x in ( a, b, c )             (overloaded brackets) // not not a // a is not null                (overloaded "not") // etc...... // and expressions like // foo = bar                    (maps to: foo.id = bar.id) // foo.Bar = 'foo'              (maps to: foo.bar = 'foo') // foo.Bar.Baz = 1.0            (maps to: foo.bar = bar.id and bar.baz = 1.0) // 1.0 = foo.Bar.Baz            (maps to: bar.baz = 1.0 and foo.Bar = bar.id) // foo.Bar.Baz = a.B.C          (maps to: bar.Baz = b.C and foo.Bar = bar.id and a.B = b.id) // foo.Bar.Baz + a.B.C          (maps to: bar.Baz + b.C and foo.Bar = bar.id and a.B = b.id) // ( foo.Bar.Baz + 1.0 ) < 2.0  (maps to: ( bar.Baz + 1.0 ) < 2.0 and foo.Bar = bar.id)	WITHOUT_CLASSIFICATION	0.9999213806579003	WITHOUT_CLASSIFICATION	7.861934209972808E-5	DESIGN
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9999636091187187	WITHOUT_CLASSIFICATION	3.6390881281200924E-5	DESIGN
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9999636091187187	WITHOUT_CLASSIFICATION	3.6390881281200924E-5	DESIGN
// try to "pretty print" it	WITHOUT_CLASSIFICATION	0.999993870904385	WITHOUT_CLASSIFICATION	6.129095615075896E-6	DESIGN
// otherwise, just dump it	WITHOUT_CLASSIFICATION	0.9999852959384699	WITHOUT_CLASSIFICATION	1.4704061530229737E-5	DESIGN
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9981780359256048	WITHOUT_CLASSIFICATION	0.0018219640743951208	DESIGN
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9981780359256048	WITHOUT_CLASSIFICATION	0.0018219640743951208	DESIGN
// use default behavior	WITHOUT_CLASSIFICATION	0.9999097218008925	WITHOUT_CLASSIFICATION	9.027819910749768E-5	DESIGN
//NOTE: early return	WITHOUT_CLASSIFICATION	0.9997578371690901	WITHOUT_CLASSIFICATION	2.421628309098427E-4	DESIGN
// the MRU cache used to keep hard references to the most recently used query plans; // note : LRU here is a bit of a misnomer, it indicates that LRU entries are removed, the // actual kept entries are the MRU entries	WITHOUT_CLASSIFICATION	0.9997153456326804	WITHOUT_CLASSIFICATION	2.846543673195993E-4	DESIGN
// we want to be able to just use the defaults, // if JNDI environment properties are not supplied // so don't put null in anywhere	WITHOUT_CLASSIFICATION	0.9999549178968471	WITHOUT_CLASSIFICATION	4.508210315300192E-5	DESIGN
// Clone //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999912104723089	WITHOUT_CLASSIFICATION	8.789527691154878E-6	DESIGN
// Serialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999841090038621	WITHOUT_CLASSIFICATION	1.5890996137761225E-5	DESIGN
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.999971640366524	WITHOUT_CLASSIFICATION	2.8359633476065428E-5	DESIGN
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.999971640366524	WITHOUT_CLASSIFICATION	2.8359633476065428E-5	DESIGN
// Deserialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999919193561763	WITHOUT_CLASSIFICATION	8.080643823784913E-6	DESIGN
/* static methods only - hide constructor */	WITHOUT_CLASSIFICATION	0.9997932668680987	WITHOUT_CLASSIFICATION	2.0673313190124832E-4	DESIGN
/*&& !('_'==character)*/	WITHOUT_CLASSIFICATION	0.9999404180118747	WITHOUT_CLASSIFICATION	5.9581988125263624E-5	DESIGN
// returnign null!	WITHOUT_CLASSIFICATION	0.9999914279176411	WITHOUT_CLASSIFICATION	8.572082358887024E-6	DESIGN
// returnign null!	WITHOUT_CLASSIFICATION	0.9999914279176411	WITHOUT_CLASSIFICATION	8.572082358887024E-6	DESIGN
// includes last '.'	WITHOUT_CLASSIFICATION	0.9999504675816555	WITHOUT_CLASSIFICATION	4.953241834444144E-5	DESIGN
// +1 to include the following '.'	WITHOUT_CLASSIFICATION	0.9998066065526137	WITHOUT_CLASSIFICATION	1.933934473864767E-4	DESIGN
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9966752517695041	WITHOUT_CLASSIFICATION	0.0033247482304959654	DESIGN
// first time we find match!	WITHOUT_CLASSIFICATION	0.9997943119734545	WITHOUT_CLASSIFICATION	2.0568802654560237E-4	DESIGN
// entityNames may now include slashes for the representations //classname may be an inner class	WITHOUT_CLASSIFICATION	0.9999958888402444	WITHOUT_CLASSIFICATION	4.111159755633963E-6	DESIGN
// wrapped iterators	WITHOUT_CLASSIFICATION	0.9999810439726324	WITHOUT_CLASSIFICATION	1.8956027367558773E-5	DESIGN
// index of current iterator in the wrapped iterators array	WITHOUT_CLASSIFICATION	0.9999894030026039	WITHOUT_CLASSIFICATION	1.0596997396174893E-5	DESIGN
// the current iterator	WITHOUT_CLASSIFICATION	0.9999824102040739	WITHOUT_CLASSIFICATION	1.7589795926056326E-5	DESIGN
// the last used iterator	WITHOUT_CLASSIFICATION	0.9976505676087708	WITHOUT_CLASSIFICATION	0.0023494323912291344	DESIGN
//it was a boolean expression	WITHOUT_CLASSIFICATION	0.9997598510189986	WITHOUT_CLASSIFICATION	2.4014898100145586E-4	DESIGN
/*public static Object[] clone(Class elementClass, Object[] array) {	WITHOUT_CLASSIFICATION	0.9999822232317578	WITHOUT_CLASSIFICATION	1.7776768242270743E-5	DESIGN
// call this before any Iterator method to make sure that the current Iterator // is not exhausted	WITHOUT_CLASSIFICATION	0.9848580046438653	WITHOUT_CLASSIFICATION	0.015141995356134703	DESIGN
//doable if needed	WITHOUT_CLASSIFICATION	0.9997762798961802	WITHOUT_CLASSIFICATION	2.2372010381973935E-4	DESIGN
// set last used iterator here, in case the user calls remove // before calling hasNext() or next() (although they shouldn't)	WITHOUT_CLASSIFICATION	0.9119876069922797	WITHOUT_CLASSIFICATION	0.08801239300772036	DESIGN
// peek ahead	WITHOUT_CLASSIFICATION	0.9998945231712376	WITHOUT_CLASSIFICATION	1.0547682876234486E-4	DESIGN
// if we reach the end of the string w/o finding the // matching end, that is an exception	WITHOUT_CLASSIFICATION	0.9956569764703848	WITHOUT_CLASSIFICATION	0.0043430235296151865	DESIGN
// we have a placeholder, spin forward till we find the end	WITHOUT_CLASSIFICATION	0.9996135023612139	WITHOUT_CLASSIFICATION	3.8649763878607327E-4	DESIGN
// make sure spinning forward did not put us past the end of the buffer...	WITHOUT_CLASSIFICATION	0.9999351019233657	WITHOUT_CLASSIFICATION	6.489807663431222E-5	DESIGN
// First, try to locate this resource through the current // context classloader.	WITHOUT_CLASSIFICATION	0.9999934956553331	WITHOUT_CLASSIFICATION	6.5043446669083265E-6	DESIGN
// Next, try to locate this resource through this class's classloader	WITHOUT_CLASSIFICATION	0.9999306198447633	WITHOUT_CLASSIFICATION	6.938015523667859E-5	DESIGN
// Next, try to locate this resource through the system classloader	WITHOUT_CLASSIFICATION	0.9999256863225371	WITHOUT_CLASSIFICATION	7.431367746285685E-5	DESIGN
// Anywhere else we should look?	WITHOUT_CLASSIFICATION	0.9953872180622164	WITHOUT_CLASSIFICATION	0.004612781937783603	DESIGN
// would need an IdentitySet for this!	WITHOUT_CLASSIFICATION	0.9995244730599517	WITHOUT_CLASSIFICATION	4.755269400483117E-4	DESIGN
//Arrays.asList doesn't do primitive arrays	WITHOUT_CLASSIFICATION	0.9999233142313587	WITHOUT_CLASSIFICATION	7.668576864122852E-5	DESIGN
//faster?	WITHOUT_CLASSIFICATION	0.9976390335983365	WITHOUT_CLASSIFICATION	0.002360966401663472	DESIGN
// the name of a class	WITHOUT_CLASSIFICATION	0.9999200802972654	WITHOUT_CLASSIFICATION	7.991970273454511E-5	DESIGN
// Its the listener class name	WITHOUT_CLASSIFICATION	0.9999771013887846	WITHOUT_CLASSIFICATION	2.2898611215472962E-5	DESIGN
//allow 9,8,7,6,5,4,3,2,1	WITHOUT_CLASSIFICATION	0.9996565690087102	WITHOUT_CLASSIFICATION	3.4343099128968693E-4	DESIGN
// default to element set if no elements() specified	WITHOUT_CLASSIFICATION	0.9999877171617966	WITHOUT_CLASSIFICATION	1.228283820345104E-5	DESIGN
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999896571384207	WITHOUT_CLASSIFICATION	1.0342861579228492E-5	DESIGN
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9999735684729917	WITHOUT_CLASSIFICATION	2.6431527008266655E-5	DESIGN
// first, lets determine whether to apply cglib or javassist based instrumentation...	WITHOUT_CLASSIFICATION	0.9999994146970662	WITHOUT_CLASSIFICATION	5.85302933789878E-7	DESIGN
// Make sure we don't override previous set values	WITHOUT_CLASSIFICATION	0.999994748321715	WITHOUT_CLASSIFICATION	5.251678285020484E-6	DESIGN
//entirely optional!!	WITHOUT_CLASSIFICATION	0.9999827851539136	WITHOUT_CLASSIFICATION	1.7214846086337102E-5	DESIGN
// Its the listener instance (or better be)	WITHOUT_CLASSIFICATION	0.9999635235551189	WITHOUT_CLASSIFICATION	3.647644488118352E-5	DESIGN
//context.unbind(boundName);	WITHOUT_CLASSIFICATION	0.9992861176483924	WITHOUT_CLASSIFICATION	7.138823516075136E-4	DESIGN
//readResolveObject	WITHOUT_CLASSIFICATION	0.9996841147054198	WITHOUT_CLASSIFICATION	3.158852945801637E-4	DESIGN
//cfg.setProperty("hibernate.show_sql", "true");	WITHOUT_CLASSIFICATION	0.9998818163588286	WITHOUT_CLASSIFICATION	1.1818364117146364E-4	DESIGN
// Defensive, convenience methods	WITHOUT_CLASSIFICATION	0.9996214523340596	WITHOUT_CLASSIFICATION	3.7854766594032303E-4	DESIGN
// Create the SessionFactory from hibernate.cfg.xml	WITHOUT_CLASSIFICATION	0.9999282629702109	WITHOUT_CLASSIFICATION	7.173702978914181E-5	DESIGN
// Make sure you log the exception, as it might be swallowed	WITHOUT_CLASSIFICATION	0.8983063545417819	WITHOUT_CLASSIFICATION	0.10169364545821816	DESIGN
// Begin unit of work	WITHOUT_CLASSIFICATION	0.997703957922615	WITHOUT_CLASSIFICATION	0.002296042077384934	DESIGN
// Write HTML header	WITHOUT_CLASSIFICATION	0.9997559547500362	WITHOUT_CLASSIFICATION	2.440452499636887E-4	DESIGN
// Handle actions	WITHOUT_CLASSIFICATION	0.9999038399256023	WITHOUT_CLASSIFICATION	9.616007439768573E-5	DESIGN
// Print page	WITHOUT_CLASSIFICATION	0.9999945221695568	WITHOUT_CLASSIFICATION	5.477830443268089E-6	DESIGN
// Write HTML footer	WITHOUT_CLASSIFICATION	0.9999239690908764	WITHOUT_CLASSIFICATION	7.60309091236149E-5	DESIGN
// End unit of work	WITHOUT_CLASSIFICATION	0.9960939052034428	WITHOUT_CLASSIFICATION	0.0039060947965572435	DESIGN
// Start the session to be used for this request	WITHOUT_CLASSIFICATION	0.9989225145044456	WITHOUT_CLASSIFICATION	0.0010774854955544952	DESIGN
// make the session available to the session factory's "current context"	WITHOUT_CLASSIFICATION	0.9999944735121804	WITHOUT_CLASSIFICATION	5.52648781963693E-6	DESIGN
// pass control along to the rest of the processing chain	WITHOUT_CLASSIFICATION	0.9999766313482438	WITHOUT_CLASSIFICATION	2.3368651756156298E-5	DESIGN
// remove session from "current context"	WITHOUT_CLASSIFICATION	0.9998588768400921	WITHOUT_CLASSIFICATION	1.4112315990782334E-4	DESIGN
// Eager fetch the collection so we can use it detached	WITHOUT_CLASSIFICATION	0.9997855332317674	WITHOUT_CLASSIFICATION	2.1446676823246922E-4	DESIGN
// If we want to handle it bidirectional and detached, we also need to load this // collection with an eager outer-join fetch, this time with Criteria and not HQL:	WITHOUT_CLASSIFICATION	0.9999900787710074	WITHOUT_CLASSIFICATION	9.921228992542087E-6	DESIGN
/*        Event anEvent = (Event) session                .createCriteria(Event.class).setFetchMode("participants", FetchMode.JOIN)                .add( Expression.eq("id", eventId) )                .uniqueResult(); // Eager fetch the colleciton so we can use it detached        */	WITHOUT_CLASSIFICATION	0.9999995073241618	WITHOUT_CLASSIFICATION	4.926758382055953E-7	DESIGN
// End of first unit of work	WITHOUT_CLASSIFICATION	0.9600180969131722	WITHOUT_CLASSIFICATION	0.03998190308682775	DESIGN
// or bidirectional safety method, setting both sides: aPerson.addToEvent(anEvent);	WITHOUT_CLASSIFICATION	0.9999940711145426	WITHOUT_CLASSIFICATION	5.928885457359027E-6	DESIGN
// Begin second unit of work	WITHOUT_CLASSIFICATION	0.9837123646215428	WITHOUT_CLASSIFICATION	0.01628763537845719	DESIGN
// Reattachment of aPerson	WITHOUT_CLASSIFICATION	0.9999734156977306	WITHOUT_CLASSIFICATION	2.658430226951386E-5	DESIGN
// The getEmailAddresses() might trigger a lazy load of the collection	WITHOUT_CLASSIFICATION	0.999624133331447	WITHOUT_CLASSIFICATION	3.7586666855304765E-4	DESIGN
// We need our tm, so get it now and avoid doing other work // if there is a problem	WITHOUT_CLASSIFICATION	0.9990760615707115	WITHOUT_CLASSIFICATION	9.23938429288631E-4	DESIGN
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9997797901532399	WITHOUT_CLASSIFICATION	2.2020984676005397E-4	DESIGN
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9997797901532399	WITHOUT_CLASSIFICATION	2.2020984676005397E-4	DESIGN
// JBC put a version in the node when it created as part of // some internal operation. We are always newer, but if // the JBC version is > 1 something odd has happened	WITHOUT_CLASSIFICATION	0.9999953134073645	WITHOUT_CLASSIFICATION	4.686592635554476E-6	DESIGN
//swaldman 2006-08-28: define c3p0-style configuration parameters for properties with //                     hibernate-specific overrides to detect and warn about conflicting //                     declarations	WITHOUT_CLASSIFICATION	0.9999870590674199	WITHOUT_CLASSIFICATION	1.2940932580188373E-5	DESIGN
// Not null if the Isolation level has been specified in the configuration file. // Otherwise, it is left to the Driver's default value.	WITHOUT_CLASSIFICATION	0.9999982745069822	WITHOUT_CLASSIFICATION	1.7254930177819436E-6	DESIGN
// Configured outside of Hibernate (i.e. Servlet container, or Java Bean Container // already has Proxool pools running, and this provider is to just borrow one of these	WITHOUT_CLASSIFICATION	0.9999430395969306	WITHOUT_CLASSIFICATION	5.6960403069325174E-5	DESIGN
// If you're closing down the ConnectionProvider chances are an // is not a real big deal, just warn	WITHOUT_CLASSIFICATION	0.9974681784773672	WITHOUT_CLASSIFICATION	0.002531821522632778	DESIGN
// (AS is always optional, for consistency with SQL/OQL)	WITHOUT_CLASSIFICATION	0.9999590840026169	WITHOUT_CLASSIFICATION	4.091599738296493E-5	DESIGN
// process the "new" HQL style where aliases are assigned // _after_ the class name or path expression ie. using // the AS construction	WITHOUT_CLASSIFICATION	0.9999808124216772	WITHOUT_CLASSIFICATION	1.918757832272156E-5	DESIGN
// the loaded owner will be set to null after the collection is removed, // so capture its value as the affected owner so it is accessible to // both pre- and post- events	WITHOUT_CLASSIFICATION	0.9999930204531905	WITHOUT_CLASSIFICATION	6.9795468094848905E-6	DESIGN
// is a primitive type // invokespecial	WITHOUT_CLASSIFICATION	0.9999586818683369	WITHOUT_CLASSIFICATION	4.131813166311254E-5	DESIGN
// array of primitive type // do nothing	WITHOUT_CLASSIFICATION	0.9999859922199587	WITHOUT_CLASSIFICATION	1.4007780041320004E-5	DESIGN
// handle a path expression or class name that // appears at the start, in the "new" HQL // style or an alias that appears at the start // in the "old" HQL style	WITHOUT_CLASSIFICATION	0.9999800159473681	WITHOUT_CLASSIFICATION	1.998405263203069E-5	DESIGN
//handle <=, >=, !=, is not, not between, not in	WITHOUT_CLASSIFICATION	0.9958178123738182	WITHOUT_CLASSIFICATION	0.004182187626181866	DESIGN
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999100380497026	WITHOUT_CLASSIFICATION	8.99619502973726E-5	DESIGN
// transfer an explicitly defined entity name // handle the lazy attribute	WITHOUT_CLASSIFICATION	0.9999787692409655	WITHOUT_CLASSIFICATION	2.1230759034404762E-5	DESIGN
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9997639931491823	WITHOUT_CLASSIFICATION	2.360068508178003E-4	DESIGN
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9997639931491823	WITHOUT_CLASSIFICATION	2.360068508178003E-4	DESIGN
// get meta's from // <joined-subclass>	WITHOUT_CLASSIFICATION	0.9997876617861793	WITHOUT_CLASSIFICATION	2.1233821382068532E-4	DESIGN
// parameters on the property mapping should // override parameters in the typedef	WITHOUT_CLASSIFICATION	0.9999806905576952	WITHOUT_CLASSIFICATION	1.9309442304818545E-5	DESIGN
//fetch="join" overrides default laziness //fetch="join" overrides default laziness	WITHOUT_CLASSIFICATION	0.9999660998399098	WITHOUT_CLASSIFICATION	3.39001600901144E-5	DESIGN
//NOTE SPECIAL CASE: // default to join and non-lazy for the "second join" // of the many-to-many	WITHOUT_CLASSIFICATION	0.9999610595593769	WITHOUT_CLASSIFICATION	3.8940440623259826E-5	DESIGN
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999802146037272	WITHOUT_CLASSIFICATION	1.9785396272802107E-5	DESIGN
// state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999550619082079	WITHOUT_CLASSIFICATION	4.493809179201706E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9992342288671854	WITHOUT_CLASSIFICATION	7.657711328146887E-4	DESIGN
//element //index -> id	WITHOUT_CLASSIFICATION	0.9998176145125951	WITHOUT_CLASSIFICATION	1.82385487404831E-4	DESIGN
// note that it might be better to iterate the snapshot but this is safe, // assuming the user implements equals() properly, as required by the Set // contract!	WITHOUT_CLASSIFICATION	0.943104043419738	WITHOUT_CLASSIFICATION	0.05689595658026215	DESIGN
// collections detect changes made via their public interface and mark // themselves as dirty as a performance optimization	WITHOUT_CLASSIFICATION	0.9999977864553807	WITHOUT_CLASSIFICATION	2.2135446192859103E-6	DESIGN
// essentially, if the real session is closed allow any // method call to pass through since the real session // will complain by throwing an appropriate exception; // NOTE that allowing close() above has the same basic effect, //   but we capture that there simply to perform the unbind...	WITHOUT_CLASSIFICATION	0.996569978864533	WITHOUT_CLASSIFICATION	0.0034300211354670557	DESIGN
// The default SQLExceptionConverter for all dialects is based on SQLState // since SQLErrorCode is extremely vendor-specific.  Specific Dialects // may override to return whatever is most appropriate for that vendor.	WITHOUT_CLASSIFICATION	0.9997548958904011	WITHOUT_CLASSIFICATION	2.4510410959888726E-4	DESIGN
//only necessary for postgre < 7.4 //http://anoncvs.postgresql.org/cvsweb.cgi/pgsql/doc/src/sgml/ref/create_sequence.sgml	WITHOUT_CLASSIFICATION	0.9999988572920899	WITHOUT_CLASSIFICATION	1.1427079100316902E-6	DESIGN
// select topic, syntax from information_schema.help // where section like 'Function%' order by section, topic // // see also ->  http://www.h2database.com/html/functions.html	WITHOUT_CLASSIFICATION	0.9999996699880784	WITHOUT_CLASSIFICATION	3.300119216024637E-7	DESIGN
// registerColumnType(Types.VARBINARY, "CHARACTER($l)"); // registerColumnType(Types.BLOB, "CHARACTER($l)" );  // For use prior to CP 11.0 // registerColumnType(Types.CLOB, "CHARACTER($l)" );	WITHOUT_CLASSIFICATION	0.9999960182659392	WITHOUT_CLASSIFICATION	3.981734060863724E-6	DESIGN
//the BLOB type requires a size arguement - this defaults to //bytes - no arg defaults to 1 whole byte! //other argument mods include K - kilobyte, M - megabyte, G - gigabyte. //refer to the PBdevelopers guide for more info.	WITHOUT_CLASSIFICATION	0.9992138304271436	WITHOUT_CLASSIFICATION	7.861695728563167E-4	DESIGN
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.9918039810565209	WITHOUT_CLASSIFICATION	0.008196018943479098	DESIGN
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.999986113239241	WITHOUT_CLASSIFICATION	1.3886760758978129E-5	DESIGN
// add the comment // nest the main query in an outer select // add the rownnumber bit into the outer query select list	WITHOUT_CLASSIFICATION	0.9999997200772142	WITHOUT_CLASSIFICATION	2.7992278586284755E-7	DESIGN
//	WITHOUT_CLASSIFICATION	0.9992342288671854	WITHOUT_CLASSIFICATION	7.657711328146887E-4	DESIGN
// Note: For object <-> SQL datatype mappings see: //	WITHOUT_CLASSIFICATION	0.9999997634027055	WITHOUT_CLASSIFICATION	2.3659729459883092E-7	DESIGN
// TRIM(end_keyword string-expression-1 FROM string-expression-2) // use Hibernate implementation "From" is one of the parameters they pass in position ?3 //registerFunction( "trim", new SQLFunctionTemplate(Hibernate.STRING, "trim(?1 ?2 from ?3)") );	WITHOUT_CLASSIFICATION	0.999994488714062	WITHOUT_CLASSIFICATION	5.511285937969267E-6	DESIGN
// Whether this dialect has an Identity clause added to the data type or a completely seperate identity // data type	WITHOUT_CLASSIFICATION	0.9999973462095052	WITHOUT_CLASSIFICATION	2.653790494864464E-6	DESIGN
// According to both the ANSI-SQL and JPA specs, trim takes a variable number of parameters between 1 and 4. // at least one paramer (trimSource) is required.  From the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If <trim specification> is omitted, BOTH is assumed. // If <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9998453536357477	WITHOUT_CLASSIFICATION	1.546463642522754E-4	DESIGN
/////////////////////////////////////////////////////////////////////// // Prepare persisters and link them up with their cache // region/access-strategy	WITHOUT_CLASSIFICATION	0.9999786027422766	WITHOUT_CLASSIFICATION	2.1397257723455846E-5	DESIGN
//Named Queries:	WITHOUT_CLASSIFICATION	0.9999369211630662	WITHOUT_CLASSIFICATION	6.307883693373515E-5	DESIGN
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9979824285842632	WITHOUT_CLASSIFICATION	0.0020175714157367793	DESIGN
// does not handle arrays (thats ok, cos they can't be lazy) // or newly instantiated collections, so we can do the cast	WITHOUT_CLASSIFICATION	0.9999807972983651	WITHOUT_CLASSIFICATION	1.9202701634989346E-5	DESIGN
// collection deletions are a special case since update() can add // deletions of collections not loaded by the session.	WITHOUT_CLASSIFICATION	0.9999880262739481	WITHOUT_CLASSIFICATION	1.1973726051810974E-5	DESIGN
// we can do the cast since orphan-delete does not apply to: // 1. newly instantiated collections // 2. arrays (we can't track orphans for detached arrays)	WITHOUT_CLASSIFICATION	0.999999905994201	WITHOUT_CLASSIFICATION	9.400579902485483E-8	DESIGN
// if the natural-id is marked as non-mutable, it is not retrieved during a // normal database-snapshot operation...	WITHOUT_CLASSIFICATION	0.999996533940142	WITHOUT_CLASSIFICATION	3.4660598580333316E-6	DESIGN
// watch out for a case where old is still referenced // somewhere in the object graph! (which is a user error)	WITHOUT_CLASSIFICATION	0.9998354223514676	WITHOUT_CLASSIFICATION	1.6457764853234985E-4	DESIGN
//slice, to get the columns for this component //property	WITHOUT_CLASSIFICATION	0.9999070373989137	WITHOUT_CLASSIFICATION	9.296260108632104E-5	DESIGN
//int result = 17; //result = 37 * result + type.hashCode(); //result = 37 * result + ( value==null ? 0 : value.hashCode() ); //return result;	WITHOUT_CLASSIFICATION	0.9999139943125104	WITHOUT_CLASSIFICATION	8.600568748963998E-5	DESIGN
// The CollectionEntry.isReached() stuff is just to detect any silly users   // who set up circular or shared references between/to collections.	WITHOUT_CLASSIFICATION	0.9997324849229839	WITHOUT_CLASSIFICATION	2.675150770160977E-4	DESIGN
// detached collection wrappers that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9998837902249157	WITHOUT_CLASSIFICATION	1.162097750843656E-4	DESIGN
// The unique property value represented here may or may not be // serializable, so we do an explicit check here in order to generate // a better error message	WITHOUT_CLASSIFICATION	0.999964726611646	WITHOUT_CLASSIFICATION	3.527338835403488E-5	DESIGN
// if the version of a newly instantiated object is not the same // as the version seed value, use that as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999996588835245	WITHOUT_CLASSIFICATION	3.411164755587843E-7	DESIGN
// ie. we never have to null out a reference to // an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999895502296016	WITHOUT_CLASSIFICATION	1.044977039838496E-5	DESIGN
// ignore this row, the collection is in process of // being loaded somewhere further "up" the stack	WITHOUT_CLASSIFICATION	0.9906031729732785	WITHOUT_CLASSIFICATION	0.009396827026721562	DESIGN
// Entity load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // 	WITHOUT_CLASSIFICATION	0.99998522413	WITHOUT_CLASSIFICATION	1.477586999999091E-5	DESIGN
// should be ok performance-wise to generate new delegate instances for each // request since these are locally stack-scoped.  Besides, it makes the code // much easier to read than the old TransactionHelper stuff...	WITHOUT_CLASSIFICATION	0.9987567865887832	WITHOUT_CLASSIFICATION	0.0012432134112168734	DESIGN
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9999999731827428	WITHOUT_CLASSIFICATION	2.6817257193287704E-8	DESIGN
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9999999731827428	WITHOUT_CLASSIFICATION	2.6817257193287704E-8	DESIGN
// wrap up any new collections directly referenced by the object // or its components	WITHOUT_CLASSIFICATION	0.9999999126251397	WITHOUT_CLASSIFICATION	8.737486032878421E-8	DESIGN
// remove any snapshot, not really for memory management purposes, but // rather because it might now be stale, and there is no longer any  // EntityEntry to take precedence // This is now handled by removeEntity() //session.getPersistenceContext().removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9771601889289546	WITHOUT_CLASSIFICATION	0.022839811071045428	DESIGN
// skip this check for composite-ids relating to dom4j entity-mode; // alternatively, we could add a check to make sure the incoming id value is // an instance of Element...	WITHOUT_CLASSIFICATION	0.9994097002982638	WITHOUT_CLASSIFICATION	5.902997017360642E-4	DESIGN
// upgrade the lock if necessary: //lock(result, lockMode);	WITHOUT_CLASSIFICATION	0.9999723477299997	WITHOUT_CLASSIFICATION	2.7652270000457368E-5	DESIGN
// now, any collections that are initialized // inside this block do not get updated - they // are ignored until the next flush	WITHOUT_CLASSIFICATION	0.9999989667395557	WITHOUT_CLASSIFICATION	1.0332604443067756E-6	DESIGN
//we must clone embedded composite identifiers, or  //we will get back the same instance that we pass in	WITHOUT_CLASSIFICATION	0.9999834265952423	WITHOUT_CLASSIFICATION	1.6573404757650816E-5	DESIGN
// Sub-insertions should occur before containing insertion so // Try to do the callback now	WITHOUT_CLASSIFICATION	0.9987750131314409	WITHOUT_CLASSIFICATION	0.0012249868685591057	DESIGN
//the entity is not associated with the session, so //try interceptor and unsaved-value	WITHOUT_CLASSIFICATION	0.9999723356065433	WITHOUT_CLASSIFICATION	2.766439345672848E-5	DESIGN
//scan the query string for class names appearing in the from clause and replace //with all persistent implementors of the class/interface, returning multiple //query strings (make sure we don't pick up a class in the select clause!)	WITHOUT_CLASSIFICATION	0.9966869522631211	WITHOUT_CLASSIFICATION	0.003313047736878996	DESIGN
// save() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999854726646276	WITHOUT_CLASSIFICATION	1.4527335372336857E-5	DESIGN
// evict() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999542563111693	WITHOUT_CLASSIFICATION	4.574368883067578E-5	DESIGN
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.6236343568287291	WITHOUT_CLASSIFICATION	0.37636564317127086	DESIGN
//if it is an uninitialized proxy, pointing //with this session, then when it is accessed, //the underlying instance will be "contained"	WITHOUT_CLASSIFICATION	0.9993595909848861	WITHOUT_CLASSIFICATION	6.404090151138101E-4	DESIGN
// Generate an explicit join for the root dot node.   The implied joins will be collected and passed up // to the root dot node.	WITHOUT_CLASSIFICATION	0.9999488886791564	WITHOUT_CLASSIFICATION	5.111132084352414E-5	DESIGN
// A session is considered to contain an entity only if the entity has // an entry in the session's persistence context and the entry reports // that the entity has not been removed	WITHOUT_CLASSIFICATION	0.9999992409400987	WITHOUT_CLASSIFICATION	7.590599012863238E-7	DESIGN
// Does the collection referenced by this FromElement // specify an order-by attribute?  If so, attach it to // the query's order-by	WITHOUT_CLASSIFICATION	0.999981205381408	WITHOUT_CLASSIFICATION	1.8794618591896856E-5	DESIGN
// ... and the token could be an identifer and the error is // a mismatched token error ...	WITHOUT_CLASSIFICATION	0.9999841674069351	WITHOUT_CLASSIFICATION	1.5832593064917153E-5	DESIGN
// If a where clause was specified in the update/delete query, use it to limit the // returned ids here...	WITHOUT_CLASSIFICATION	0.9999964846271563	WITHOUT_CLASSIFICATION	3.515372843746594E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.9992342288671854	WITHOUT_CLASSIFICATION	7.657711328146887E-4	DESIGN
// Default implementation: // If this node has a data type, and that data type is not an association, then this is scalar.	WITHOUT_CLASSIFICATION	0.99946875684151	WITHOUT_CLASSIFICATION	5.312431584900239E-4	DESIGN
// Resolve the LHS fully, generate implicit joins.  Pass in the property name so that the resolver can // discover foreign key (id) properties.	WITHOUT_CLASSIFICATION	0.999993129480129	WITHOUT_CLASSIFICATION	6.8705198709991296E-6	DESIGN
// If the propertyType is null and there isn't a parent, just // stop now... there was a problem resolving the node anyway.	WITHOUT_CLASSIFICATION	0.9999754479760201	WITHOUT_CLASSIFICATION	2.4552023979883256E-5	DESIGN
//We do not look for an existing join on the same path, because //it makes sense to join twice on the same collection role	WITHOUT_CLASSIFICATION	0.9999979109799995	WITHOUT_CLASSIFICATION	2.089020000564757E-6	DESIGN
// our parent is another dot node, meaning we are being further dereferenced. // thus we need to generate a join unless the parent refers to the associated // entity's PK (because 'our' table would know the FK).	WITHOUT_CLASSIFICATION	0.999928488951552	WITHOUT_CLASSIFICATION	7.15110484480978E-5	DESIGN
/*public final Currency getCurrency(int col) throws HibernateException {	WITHOUT_CLASSIFICATION	0.9978741924556224	WITHOUT_CLASSIFICATION	0.00212580754437764	DESIGN
// here, we have two possibilities: // 	WITHOUT_CLASSIFICATION	0.99998078747292	WITHOUT_CLASSIFICATION	1.9212527080000575E-5	DESIGN
// Set the unresolved path in this node and the parent. // Set the text for the parent.	WITHOUT_CLASSIFICATION	0.9999937316082137	WITHOUT_CLASSIFICATION	6.268391786330847E-6	DESIGN
// Get the first child to be considered.  Sub-classes may do this differently in order to skip nodes that // are not select expressions (e.g. DISTINCT).	WITHOUT_CLASSIFICATION	0.9999990695698969	WITHOUT_CLASSIFICATION	9.304301031267295E-7	DESIGN
// If this is an entity and the property is the identifier property, then use getIdentifierType(). //      Note that the propertyName.equals( propertyPath ) checks whether we have a component //      key reference, where the component class property name is the same as the //      entity id property name; if the two are not equal, this is the case and //      we'd need to "fall through" to using the property mapping.	WITHOUT_CLASSIFICATION	0.9999954828815493	WITHOUT_CLASSIFICATION	4.517118450760602E-6	DESIGN
// for a subquery, the alias to use depends on a few things (we // already know this is not an overall SELECT): //      1) if this FROM_ELEMENT represents a correlation to the //          outer-most query //              A) if the outer query represents a multi-table //                  persister, we need to use the given alias //                  in anticipation of one of the multi-table //                  executors being used (as this subquery will //                  actually be used in the "id select" phase //                  of that multi-table executor) //              B) otherwise, we need to use the persister's //                  table name as the column qualification //      2) otherwise (not correlated), use the given alias	WITHOUT_CLASSIFICATION	0.9999426851446329	WITHOUT_CLASSIFICATION	5.731485536717958E-5	DESIGN
// Not a collection? // Return the entity property mapping.	WITHOUT_CLASSIFICATION	0.9999993571294086	WITHOUT_CLASSIFICATION	6.428705913897318E-7	DESIGN
// collection of <many-to-any/> mappings... // used to circumvent the component-collection check below...	WITHOUT_CLASSIFICATION	0.9999999194262218	WITHOUT_CLASSIFICATION	8.057377826607406E-8	DESIGN
// Otherwise, the destination node was implied by the FROM clause and the FROM clause processor // will automatically add it in the right place.	WITHOUT_CLASSIFICATION	0.9998231802972244	WITHOUT_CLASSIFICATION	1.7681970277566832E-4	DESIGN
// If the first identifier in the path referrs to the class alias (not the class name), then this // is a correlated subselect.  If it's a correlated sub-select, use the existing table alias.  Otherwise // generate a new one.	WITHOUT_CLASSIFICATION	0.9999997523253141	WITHOUT_CLASSIFICATION	2.4767468578080974E-7	DESIGN
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999985591775495	WITHOUT_CLASSIFICATION	1.4408224505122817E-6	DESIGN
// An ident node can represent an index expression if the ident // represents a naked property ref //      *Note: this makes the assumption (which is currently the case //      in the hql-sql grammar) that the ident is first resolved //      itself (addrExpr -> resolve()).  The other option, if that //      changes, is to call resolve from here; but it is //      currently un-needed overhead.	WITHOUT_CLASSIFICATION	0.999925421097659	WITHOUT_CLASSIFICATION	7.457890234099469E-5	DESIGN
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9998533027556101	WITHOUT_CLASSIFICATION	1.4669724438988143E-4	DESIGN
// If this is an implied join in a FROM clause, then use ANSI-style joining, and set the // flag on the FromElement that indicates that it was implied in the FROM clause itself.	WITHOUT_CLASSIFICATION	0.9999713522543665	WITHOUT_CLASSIFICATION	2.8647745633482148E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9992342288671854	WITHOUT_CLASSIFICATION	7.657711328146887E-4	DESIGN
// For an explicit many-to-many relationship, add a second join from the intermediate  // (many-to-many) table to the destination table.  Also, make sure that the from element's  // idea of the destination is the destination table.	WITHOUT_CLASSIFICATION	0.99999332317801	WITHOUT_CLASSIFICATION	6.676821989973145E-6	DESIGN
// Reset the node type, because the rest of the system is expecting FROM_FRAGMENT, all we wanted was // for the factory to create the right sub-class.  This might get reset again later on anyway to make the // SQL generation simpler.	WITHOUT_CLASSIFICATION	0.9977587697708191	WITHOUT_CLASSIFICATION	0.002241230229180991	DESIGN
//explicit = true;	WITHOUT_CLASSIFICATION	0.9999865103052532	WITHOUT_CLASSIFICATION	1.3489694746715174E-5	DESIGN
//sqlResultTypeList.add( type ); // Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999786357265864	WITHOUT_CLASSIFICATION	2.136427341357389E-5	DESIGN
// If the expression list has exactly one expression, and the type of the expression is a collection // then this might be a collection function, such as index(c) or size(c).	WITHOUT_CLASSIFICATION	0.9989324166933967	WITHOUT_CLASSIFICATION	0.0010675833066033447	DESIGN
// Need to parse off the column qualifiers; this is assuming (which is true as of now) // that this is only used from update and delete HQL statement parsing	WITHOUT_CLASSIFICATION	0.9984113094175044	WITHOUT_CLASSIFICATION	0.0015886905824955078	DESIGN
// for regression testing against output from the old parser... // found it easiest to simply reorder the FromElements here into ascending order // in terms of injecting them into the resulting sql ast in orders relative to those // expected by the old parser; this is definitely another of those "only needed // for regression purposes".  The SyntheticAndFactory, then, simply injects them as it // encounters them.	WITHOUT_CLASSIFICATION	0.9999846209476222	WITHOUT_CLASSIFICATION	1.537905237781889E-5	DESIGN
// The uber-rule here is that we need to include  subclass joins if // the FromElement is in any way dereferenced by a property from // the subclass table; otherwise we end up with column references // qualified by a non-existent table reference in the resulting SQL...	WITHOUT_CLASSIFICATION	0.9999962551006283	WITHOUT_CLASSIFICATION	3.744899371774664E-6	DESIGN
// classic translator does not support collection of ordinal // param metadata	WITHOUT_CLASSIFICATION	0.9999644083055662	WITHOUT_CLASSIFICATION	3.559169443386887E-5	DESIGN
// The following variables are stacks that keep information about each subexpression // in the list of nested subexpressions we are currently processing.	WITHOUT_CLASSIFICATION	0.9996706203519949	WITHOUT_CLASSIFICATION	3.293796480050166E-4	DESIGN
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999100380497026	WITHOUT_CLASSIFICATION	8.99619502973726E-5	DESIGN
// should not be able to reach last without maxPosition being set // unless there are no results	WITHOUT_CLASSIFICATION	0.9997983432908941	WITHOUT_CLASSIFICATION	2.0165670910592625E-4	DESIGN
// we found it in the temp PC.  Should indicate we are in the midst of processing a result set // containing eager fetches via join fetch	WITHOUT_CLASSIFICATION	0.968755540253437	WITHOUT_CLASSIFICATION	0.031244459746562942	DESIGN
//do not use proxiesByKey, since not all //proxies that point to this session's //instances are in that collection!	WITHOUT_CLASSIFICATION	0.9997753907462525	WITHOUT_CLASSIFICATION	2.2460925374739426E-4	DESIGN
// if there is no TM configured, we will not be able to access // the javax.transaction.Transaction object in order to // register a synch anyway.	WITHOUT_CLASSIFICATION	0.9999823471501957	WITHOUT_CLASSIFICATION	1.7652849804370834E-5	DESIGN
// Since the result set cursor is always left at the first // physical row after the "last processed", we need to jump // back one position to get the key value we are interested // in skipping	WITHOUT_CLASSIFICATION	0.9999960418046192	WITHOUT_CLASSIFICATION	3.9581953808088185E-6	DESIGN
//true if this is a query and we are loading multiple instances of the same collection role //otherwise this is a CollectionInitializer and we are loading up a single collection or batch	WITHOUT_CLASSIFICATION	0.9989929927256523	WITHOUT_CLASSIFICATION	0.0010070072743477286	DESIGN
// we don't need to worry about existing version being uninitialized // because this block isn't called by a re-entrant load (re-entrant // loads _always_ have lock mode NONE)	WITHOUT_CLASSIFICATION	0.9989866238830217	WITHOUT_CLASSIFICATION	0.0010133761169782425	DESIGN
// add temp entry so that the next step is circular-reference // safe - only needed because some types don't take proper // advantage of two-phase-load (esp. components)	WITHOUT_CLASSIFICATION	0.9999960383415851	WITHOUT_CLASSIFICATION	3.96165841490101E-6	DESIGN
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999400228638078	WITHOUT_CLASSIFICATION	5.997713619222852E-5	DESIGN
// log a message about potential connection leaks	WITHOUT_CLASSIFICATION	0.999981360154934	WITHOUT_CLASSIFICATION	1.8639845066045965E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9992342288671854	WITHOUT_CLASSIFICATION	7.657711328146887E-4	DESIGN
// this has been shown to happen occasionally in rare cases // when using a transaction manager + transaction-timeout // where the timeout calls back through Hibernate's // registered transaction synchronization on a separate // "reaping" thread.  In cases where that reaping thread // executes through this block at the same time the main // application thread does we can get into situations where // these CMEs occur.  And though it is not "allowed" per-se, // the end result without handling it specifically is infinite // looping.  So here, we simply break the loop	WITHOUT_CLASSIFICATION	0.9670432260392982	WITHOUT_CLASSIFICATION	0.03295677396070185	DESIGN
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9999065705660998	WITHOUT_CLASSIFICATION	9.342943390022048E-5	DESIGN
// can't cache this stuff either (per-invocation) // we are given a map of user-alias -> lock mode // create a new map of sql-alias -> lock mode	WITHOUT_CLASSIFICATION	0.9996821986621859	WITHOUT_CLASSIFICATION	3.1780133781419197E-4	DESIGN
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns //getCollectionTable().createUniqueKey( getIdentifier().getConstraintColumns() );	WITHOUT_CLASSIFICATION	0.999999014881647	WITHOUT_CLASSIFICATION	9.851183530658253E-7	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999898163045965	WITHOUT_CLASSIFICATION	1.0183695403514999E-5	DESIGN
//isSet = collection.isSet(); //isSorted = collection.isSorted();	WITHOUT_CLASSIFICATION	0.9999823459876702	WITHOUT_CLASSIFICATION	1.7654012329746264E-5	DESIGN
//lists, arrays //sets, maps, bags	WITHOUT_CLASSIFICATION	0.9999978773027306	WITHOUT_CLASSIFICATION	2.1226972694388314E-6	DESIGN
// we finish all the "removes" first to take care of possible unique // constraints and so that we can take better advantage of batching	WITHOUT_CLASSIFICATION	0.9999707741294657	WITHOUT_CLASSIFICATION	2.9225870534413902E-5	DESIGN
//use a combination of foreign key columns and pk columns, since //the ordering of removal and addition is not guaranteed when //a child moves from one parent to another	WITHOUT_CLASSIFICATION	0.9999614441889365	WITHOUT_CLASSIFICATION	3.855581106360057E-5	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999898163045965	WITHOUT_CLASSIFICATION	1.0183695403514999E-5	DESIGN
//information about properties of this class, //including inherited properties //(only really needed for updatable/insertable properties)	WITHOUT_CLASSIFICATION	0.9965579144644772	WITHOUT_CLASSIFICATION	0.00344208553552287	DESIGN
// all this only really needs to consider properties // of this class, not its subclasses, but since we // are reusing code used for sequential selects, we // use the subclass closure	WITHOUT_CLASSIFICATION	0.9936308784780131	WITHOUT_CLASSIFICATION	0.006369121521986921	DESIGN
// Here we render the select column list based on the properties defined as being generated. // For partial component generation, we currently just re-select the whole component // rather than trying to handle the individual generated portions.	WITHOUT_CLASSIFICATION	0.9999927407986144	WITHOUT_CLASSIFICATION	7.259201385491161E-6	DESIGN
// this is the root (versioned) table, and we are using version-based // optimistic locking;  if we are not updating the version, also don't // check it (unless this is a "generated" version column)!	WITHOUT_CLASSIFICATION	0.9997083904036784	WITHOUT_CLASSIFICATION	2.916095963215233E-4	DESIGN
//optimistic-lock="all", include all updatable properties //optimistic-lock="dirty", include all properties we are updating this time	WITHOUT_CLASSIFICATION	0.9993554982549886	WITHOUT_CLASSIFICATION	6.445017450114157E-4	DESIGN
// this property belongs to the table, and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9991533342879061	WITHOUT_CLASSIFICATION	8.466657120939421E-4	DESIGN
// check to see if the connection is in auto-commit  // mode (no connection means aggressive connection // release outside a JTA transaction context, so MUST // be autocommit mode)	WITHOUT_CLASSIFICATION	0.9999877866345818	WITHOUT_CLASSIFICATION	1.2213365418159234E-5	DESIGN
// need to treat this as if it where optimistic-lock="all" (dirty does *not* make sense); // first we need to locate the "loaded" state // // Note, it potentially could be a proxy, so perform the location the safe way...	WITHOUT_CLASSIFICATION	0.9999922169025657	WITHOUT_CLASSIFICATION	7.783097434300367E-6	DESIGN
// we *always* assume an instance with a null // identifier or no identifier property is unsaved!	WITHOUT_CLASSIFICATION	0.9999911820749291	WITHOUT_CLASSIFICATION	8.81792507085526E-6	DESIGN
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.9999799851982245	WITHOUT_CLASSIFICATION	2.0014801775464314E-5	DESIGN
//allow any identifier quoted with backtick //only recognizes identifiers beginning with a letter	WITHOUT_CLASSIFICATION	0.9999378622524232	WITHOUT_CLASSIFICATION	6.213774757677984E-5	DESIGN
//following doesn't handle (null, not null) but unnecessary //since this would mean all rows	WITHOUT_CLASSIFICATION	0.8892528470073362	DESIGN	0.1107471529926639	WITHOUT_CLASSIFICATION
// IMPL NOTE : due to the delayed population of setters (setters cached // 	WITHOUT_CLASSIFICATION	0.9999340307115765	WITHOUT_CLASSIFICATION	6.59692884235672E-5	DESIGN
// we need to dirty check collections, since they can cause an owner // version number increment	WITHOUT_CLASSIFICATION	0.9999998619553672	WITHOUT_CLASSIFICATION	1.380446327983798E-7	DESIGN
//return the id, so we can use it to reset the proxy id //return result;	WITHOUT_CLASSIFICATION	0.9999736251536664	WITHOUT_CLASSIFICATION	2.637484633361977E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9992342288671854	WITHOUT_CLASSIFICATION	7.657711328146887E-4	DESIGN
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9994572868749263	WITHOUT_CLASSIFICATION	5.427131250737881E-4	DESIGN
// We now have the value of the property-ref we reference.  However, // we need to dig a little deeper, as that property might also be // an entity type, in which case we need to resolve its identitifier	WITHOUT_CLASSIFICATION	0.9999653853035843	WITHOUT_CLASSIFICATION	3.461469641576343E-5	DESIGN
// Retrieve the value of the designated column in the current row of this // ResultSet object as a java.io.Reader object	WITHOUT_CLASSIFICATION	0.9999945270032806	WITHOUT_CLASSIFICATION	5.47299671934678E-6	DESIGN
//not absolutely necessary, but helps for some //equals()/hashCode() implementations	WITHOUT_CLASSIFICATION	0.9999515232517461	WITHOUT_CLASSIFICATION	4.8476748253836775E-5	DESIGN
//this should be a call to resolve(), not resolveIdentifier(),  //'cos it might be a property-ref, and we did not cache the //referenced value	WITHOUT_CLASSIFICATION	0.7875662461864327	DESIGN	0.21243375381356727	WITHOUT_CLASSIFICATION
// If we have <tt>not-found="ignore"</tt> association mapped to a // formula, we always need to dirty check it, so we can update the // second-level cache	WITHOUT_CLASSIFICATION	0.9999985991006634	WITHOUT_CLASSIFICATION	1.4008993367073989E-6	DESIGN
// can't just return null here, since that would // cause an owning component to become null	WITHOUT_CLASSIFICATION	0.9988625433529359	WITHOUT_CLASSIFICATION	0.001137456647064098	DESIGN
//for arrays, replaceElements() may return a different reference, since //the array length might not match	WITHOUT_CLASSIFICATION	0.9999274134843052	WITHOUT_CLASSIFICATION	7.25865156947158E-5	DESIGN
// actual cache of the entries.  soft references are used for both the keys and the // values here since the values pertaining to the MRU entries are kept in a // seperate hard reference cache (to avoid their enqueuement/garbage-collection).	WITHOUT_CLASSIFICATION	0.9999333832202161	WITHOUT_CLASSIFICATION	6.661677978389375E-5	DESIGN
// as soon as we encounter our first letter, return the substring // from that position	WITHOUT_CLASSIFICATION	0.9998233660526548	WITHOUT_CLASSIFICATION	1.7663394734525843E-4	DESIGN
// Note : expected in the syntax: //      type=listenerClass //          ({sep}type=listenerClass)* // where {sep} is any whitespace or comma	WITHOUT_CLASSIFICATION	0.9999954427336615	WITHOUT_CLASSIFICATION	4.55726633846832E-6	DESIGN
// isTransactionCallbackRegistered denotes whether any Hibernate // Transaction has registered as a callback against this // JDBCContext; only one such callback is allowed.  Directly // serializing this value causes problems with JDBCTransaction, // or really any Transaction impl where the callback is local // to the Transaction instance itself, since that Transaction // is not serialized along with the JDBCContext.  Thus we // handle that fact here explicitly...	WITHOUT_CLASSIFICATION	0.9909014781470644	WITHOUT_CLASSIFICATION	0.009098521852935549	DESIGN
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999981209999437	WITHOUT_CLASSIFICATION	1.8790000562842405E-6	DESIGN
// We call getKeyFromResultSet() here so that we can know the // key value upon which to perform the breaking logic.  However, // it is also then called from getRowFromResultSet() which is certainly // not the most efficient.  But the call here is needed, and there // currently is no other way without refactoring of the doQuery()/getRowFromResultSet() // methods	WITHOUT_CLASSIFICATION	0.9998559407200629	WITHOUT_CLASSIFICATION	1.4405927993718358E-4	DESIGN
// This check is needed since processing leaves the cursor // after the last physical row for the current logical row; // thus if we are after the last physical row, this might be // caused by either: //      1) scrolling to the last logical row //      2) scrolling past the last logical row // In the latter scenario, the previous logical row // really is the last logical row. // // In all other cases, we should process back two // logical records (the current logic row, plus the // previous logical row).	WITHOUT_CLASSIFICATION	0.77479249623387	DESIGN	0.22520750376612997	WITHOUT_CLASSIFICATION
// and perform the load	WITHOUT_CLASSIFICATION	0.9999905319182457	WITHOUT_CLASSIFICATION	9.468081754347053E-6	DESIGN
//important: reuse the same event instances for performance!	WITHOUT_CLASSIFICATION	0.9998834365198516	WITHOUT_CLASSIFICATION	1.1656348014847503E-4	DESIGN
//this is a query and we are loading multiple instances of the same collection role	WITHOUT_CLASSIFICATION	0.994462295271732	WITHOUT_CLASSIFICATION	0.005537704728268011	DESIGN
// we found a collection element in the result set	WITHOUT_CLASSIFICATION	0.9998617443926445	WITHOUT_CLASSIFICATION	1.3825560735542647E-4	DESIGN
// we did not find a collection element in the result set, so we // ensure that a collection is created with the owner's identifier, // since what we have is an empty collection	WITHOUT_CLASSIFICATION	0.9999993897787965	WITHOUT_CLASSIFICATION	6.102212034817005E-7	DESIGN
// this is a collection initializer, so we must create a collection // for each of the passed-in keys, to account for the possibility // that the collection is empty and has no rows in the result set	WITHOUT_CLASSIFICATION	0.9999149488960068	WITHOUT_CLASSIFICATION	8.505110399316308E-5	DESIGN
// grab its state from the ResultSet and keep it in the Session // (but don't yet initialize the object itself) // note that we acquire LockMode.READ even if it was not requested	WITHOUT_CLASSIFICATION	0.9997175852177793	WITHOUT_CLASSIFICATION	2.8241478222074454E-4	DESIGN
// a many-to-many; // decrement currentDepth here to allow join across the association table // without exceeding MAX_FETCH_DEPTH (i.e. the "currentDepth - 1" bit)	WITHOUT_CLASSIFICATION	0.9999878428338563	WITHOUT_CLASSIFICATION	1.215716614372647E-5	DESIGN
// if not a composite key, use "foo in (?, ?, ?)" for batching // if no batch, and not a composite key, use "foo = ?"	WITHOUT_CLASSIFICATION	0.999942509344037	WITHOUT_CLASSIFICATION	5.749065596308288E-5	DESIGN
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.999911127663477	WITHOUT_CLASSIFICATION	8.88723365229009E-5	DESIGN
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9999345534406824	WITHOUT_CLASSIFICATION	6.544655931759808E-5	DESIGN
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9999345534406824	WITHOUT_CLASSIFICATION	6.544655931759808E-5	DESIGN
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.9996664466886943	WITHOUT_CLASSIFICATION	3.335533113056599E-4	DESIGN
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999990788387307	WITHOUT_CLASSIFICATION	9.211612691854803E-7	DESIGN
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999933566585679	WITHOUT_CLASSIFICATION	6.643341432070226E-6	DESIGN
/**	WITHOUT_CLASSIFICATION	0.9966739556456018	WITHOUT_CLASSIFICATION	0.003326044354398164	DESIGN
// ignore	WITHOUT_CLASSIFICATION	0.9999770031580442	WITHOUT_CLASSIFICATION	2.2996841955798397E-5	DESIGN
// ignore	WITHOUT_CLASSIFICATION	0.9999770031580442	WITHOUT_CLASSIFICATION	2.2996841955798397E-5	DESIGN
//        }	WITHOUT_CLASSIFICATION	0.9998976631376592	WITHOUT_CLASSIFICATION	1.0233686234091472E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9992342288671854	WITHOUT_CLASSIFICATION	7.657711328146887E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9992342288671854	WITHOUT_CLASSIFICATION	7.657711328146887E-4	DESIGN
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9996474807828586	WITHOUT_CLASSIFICATION	3.5251921714145253E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9992342288671854	WITHOUT_CLASSIFICATION	7.657711328146887E-4	DESIGN
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.999931380718353	WITHOUT_CLASSIFICATION	6.861928164702722E-5	DESIGN
// at this point we have (drivingSqlAlias) the SQL alias of the driving table // corresponding to the given user alias.  However, the driving table is not // (necessarily) the table against which we want to apply locks.  Mainly, // the exception case here is joined-subclass hierarchies where we instead // want to apply the lock against the root table (for all other strategies, // it just happens that driving and root are the same).	WITHOUT_CLASSIFICATION	0.9998086588897825	WITHOUT_CLASSIFICATION	1.9134111021745342E-4	DESIGN
// the column doesnt exist at all.	WITHOUT_CLASSIFICATION	0.9999275016860687	WITHOUT_CLASSIFICATION	7.249831393132773E-5	DESIGN
// we have a mapped identifier property and the root of // the incoming property path matched that identifier // property	WITHOUT_CLASSIFICATION	0.9999998890095456	WITHOUT_CLASSIFICATION	1.109904543932666E-7	DESIGN
// we have an embedded composite identifier	WITHOUT_CLASSIFICATION	0.9999971154535447	WITHOUT_CLASSIFICATION	2.884546455241405E-6	DESIGN
// both many-to-one and one-to-one are represented as a // Property.  EntityPersister is relying on this value to // determine "lazy fetch groups" in terms of field-level // interception.  So we need to make sure that we return // true here for the case of many-to-one and one-to-one // with lazy="no-proxy" // // * impl note - lazy="no-proxy" currently forces both // lazy and unwrap to be set to true.  The other case we // are extremely interested in here is that of lazy="proxy" // where lazy is set to true, but unwrap is set to false. // thus we use both here under the assumption that this // return is really only ever used during persister // construction to determine the lazy property/field fetch // groupings.  If that assertion changes then this check // needs to change as well.  Partially, this is an issue with // the overloading of the term "lazy" here...	WITHOUT_CLASSIFICATION	0.9998493762776323	WITHOUT_CLASSIFICATION	1.5062372236777281E-4	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999979703402331	WITHOUT_CLASSIFICATION	2.0296597668894586E-5	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999979703402331	WITHOUT_CLASSIFICATION	2.0296597668894586E-5	DESIGN
/*rootTableName = persistentClass.getRootTable().getQualifiedName( 	WITHOUT_CLASSIFICATION	0.9999941496007653	WITHOUT_CLASSIFICATION	5.850399234808603E-6	DESIGN
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.999790199858376	WITHOUT_CLASSIFICATION	2.0980014162396375E-4	DESIGN
// Custom sql	WITHOUT_CLASSIFICATION	0.999965197072947	WITHOUT_CLASSIFICATION	3.480292705305346E-5	DESIGN
/*protected void initPropertyPaths(	WITHOUT_CLASSIFICATION	0.9995325861727771	WITHOUT_CLASSIFICATION	4.674138272228593E-4	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998851776312128	WITHOUT_CLASSIFICATION	1.1482236878727718E-4	DESIGN
//Custom SQL (would be better if these were private)	WITHOUT_CLASSIFICATION	0.9903114019390336	WITHOUT_CLASSIFICATION	0.0096885980609664	DESIGN
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999296901773457	WITHOUT_CLASSIFICATION	7.030982265425354E-5	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998851776312128	WITHOUT_CLASSIFICATION	1.1482236878727718E-4	DESIGN
// aliases for identifier ( alias.id ); skip if the entity defines a non-id property named 'id'	WITHOUT_CLASSIFICATION	0.9999991539848155	WITHOUT_CLASSIFICATION	8.460151844941777E-7	DESIGN
//decide which ResultSet to get the property value from:	WITHOUT_CLASSIFICATION	0.9997574395326116	WITHOUT_CLASSIFICATION	2.425604673883286E-4	DESIGN
//note: it is conceptually possible that a UserType could map null to //	WITHOUT_CLASSIFICATION	0.9179741412071943	WITHOUT_CLASSIFICATION	0.08202585879280566	DESIGN
// the contract of EntityTuplizer.determineConcreteSubclassEntityName says that returning null // is an indication that the specified entity-name (this.getEntityName) should be used.	WITHOUT_CLASSIFICATION	0.9990410550268087	WITHOUT_CLASSIFICATION	9.589449731912122E-4	DESIGN
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.9999799851982245	WITHOUT_CLASSIFICATION	2.0014801775464314E-5	DESIGN
// cache these since they are stateless // this one could even be static...	WITHOUT_CLASSIFICATION	0.9997610520313258	WITHOUT_CLASSIFICATION	2.3894796867407874E-4	DESIGN
//"as" is not in KEYWORDS	WITHOUT_CLASSIFICATION	0.9760967039181624	WITHOUT_CLASSIFICATION	0.023903296081837694	DESIGN
// --Commented out by Inspection (12/4/04 9:10 AM): public abstract void addCondition(String alias, String[] columns, String condition);	WITHOUT_CLASSIFICATION	0.9999995931651944	WITHOUT_CLASSIFICATION	4.068348056603189E-7	DESIGN
//use the id column alias	WITHOUT_CLASSIFICATION	0.9990314047684499	WITHOUT_CLASSIFICATION	9.685952315500566E-4	DESIGN
//private List aliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999928271658162	WITHOUT_CLASSIFICATION	7.172834183885959E-6	DESIGN
//columns.add(columnName); //aliases.add(tableAlias);	WITHOUT_CLASSIFICATION	0.9999561207721559	WITHOUT_CLASSIFICATION	4.387922784406428E-5	DESIGN
//where fragment must be empty!	WITHOUT_CLASSIFICATION	0.9997630230889079	WITHOUT_CLASSIFICATION	2.3697691109202926E-4	DESIGN
// revert to traditional hibernate behavior of setting initialPoolSize to minPoolSize // unless otherwise specified with a c3p0.*-style parameter.	WITHOUT_CLASSIFICATION	0.9999989887295248	WITHOUT_CLASSIFICATION	1.0112704752018267E-6	DESIGN
//arbitrary on clause ignored!!	WITHOUT_CLASSIFICATION	0.9999696972740397	WITHOUT_CLASSIFICATION	3.030272596029774E-5	DESIGN
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9999248712938121	WITHOUT_CLASSIFICATION	7.512870618789092E-5	DESIGN
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9999248712938121	WITHOUT_CLASSIFICATION	7.512870618789092E-5	DESIGN
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9799499706590226	WITHOUT_CLASSIFICATION	0.020050029340977382	DESIGN
// Essentially: // 1) If we have a local (Hibernate) transaction in progress //      and it already has the UserTransaction cached, use that //      UserTransaction to determine the status. // 2) If a transaction manager has been located, use //      that transaction manager to determine the status. // 3) Finally, as the last resort, try to lookup the //      UserTransaction via JNDI and use that to determine the //      status.	WITHOUT_CLASSIFICATION	0.9998851472837303	WITHOUT_CLASSIFICATION	1.1485271626970225E-4	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.9991752457914114	WITHOUT_CLASSIFICATION	8.247542085885454E-4	DESIGN
//swallow it (the transaction _was_ successful or successfully rolled back)	WITHOUT_CLASSIFICATION	0.9998026470863831	WITHOUT_CLASSIFICATION	1.9735291361681393E-4	DESIGN
// ignore it	WITHOUT_CLASSIFICATION	0.9999944994547033	WITHOUT_CLASSIFICATION	5.50054529671742E-6	DESIGN
// we need to dirty check many-to-ones with not-found="ignore" in order  // to update the cache (not the database), since in this case a null // entity reference can lose information	WITHOUT_CLASSIFICATION	0.9999944119088846	WITHOUT_CLASSIFICATION	5.588091115420239E-6	DESIGN
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999905978817284	WITHOUT_CLASSIFICATION	9.402118271628113E-6	DESIGN
// Regions can get instantiated in the course of normal work (e.g. // a named query region will be created the first time the query is // executed), so suspend any ongoing tx	WITHOUT_CLASSIFICATION	0.9999953293020953	WITHOUT_CLASSIFICATION	4.670697904629209E-6	DESIGN
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999880521594511	WITHOUT_CLASSIFICATION	1.1947840548899E-5	DESIGN
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999809604639441	WITHOUT_CLASSIFICATION	1.9039536055807357E-5	DESIGN
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999123048532337	WITHOUT_CLASSIFICATION	8.769514676638583E-5	DESIGN
// NOTE : this is being used from the process of shutting down a // SessionFactory. Specific things to consider: // (1) this clearing of the region should not propagate to // other nodes on the cluster (if any); this is the // cache-mode-local option bit... // (2) really just trying a best effort to cleanup after // ourselves; lock failures, etc are not critical here; // this is the fail-silently option bit...	WITHOUT_CLASSIFICATION	0.9136603496352286	DESIGN	0.08633965036477141	WITHOUT_CLASSIFICATION
// need to extract the component values and check for subtype replacements...	WITHOUT_CLASSIFICATION	0.9999997943643906	WITHOUT_CLASSIFICATION	2.0563560936489556E-7	DESIGN
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.99998618395447	WITHOUT_CLASSIFICATION	1.381604552989144E-5	DESIGN
// for now, just "re-flatten" the metamodel since this is temporary stuff anyway (HHH-1907)	WITHOUT_CLASSIFICATION	0.987616549651927	WITHOUT_CLASSIFICATION	0.012383450348073031	DESIGN
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999612070183543	WITHOUT_CLASSIFICATION	3.879298164562207E-5	DESIGN
//This solution would allow us to eliminate the owner arg to disassemble(), but //what if the collection was null, and then later had elements added? seems unsafe //session.getPersistenceContext().getCollectionEntry( (PersistentCollection) value ).getKey();	WITHOUT_CLASSIFICATION	0.9998062977057214	WITHOUT_CLASSIFICATION	1.9370229427858929E-4	DESIGN
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999822422915141	WITHOUT_CLASSIFICATION	1.775770848586176E-5	DESIGN
// some collections are not lazy:	WITHOUT_CLASSIFICATION	0.9999724654480651	WITHOUT_CLASSIFICATION	2.7534551935012133E-5	DESIGN
// Here we don't want to suspend the tx. If we do: // 1) We might be caching query results that reflect uncommitted // changes. No tx == no WL on cache node, so other threads // can prematurely see those query results // 2) No tx == immediate replication. More overhead, plus we // spread issue #1 above around the cluster	WITHOUT_CLASSIFICATION	0.9916925009917982	WITHOUT_CLASSIFICATION	0.008307499008201913	DESIGN
// return the (fully resolved) identifier value, but do not resolve // to the actual referenced entity instance // NOTE: the owner of the association is not really the owner of the id!	WITHOUT_CLASSIFICATION	0.9999891405993847	WITHOUT_CLASSIFICATION	1.0859400615341189E-5	DESIGN
// Add a zero (or quite low) timeout option so we don't block. // Ignore any TimeoutException. Basically we forego caching the // query result in order to avoid blocking. // Reads are done with suspended tx, so they should not hold the // lock for long.  Not caching the query result is OK, since // any subsequent read will just see the old result with its // out-of-date timestamp; that result will be discarded and the // db query performed again.	WITHOUT_CLASSIFICATION	0.999945067979153	WITHOUT_CLASSIFICATION	5.493202084713434E-5	DESIGN
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9966752517695041	WITHOUT_CLASSIFICATION	0.0033247482304959654	DESIGN
// We have the JBCWriteMutex, so no other *local* thread will  // be trying to write this key.  // It's possible here some remote thread has come in and // changed the values again, but since we are reading the // values to write to JBC right now, we know we are writing // the latest values; i.e. we don't assume that what we cached // in entry.update() above is what we should write to JBC *now*. // Our write could be redundant, i.e. we are writing what // some remote thread just came in an wrote.  There is a chance  // that yet another remote thread will update us, and we'll then // overwrite that later data in JBC.  But, all remote nodes will // ignore that change in their localCache; the only place it  // will live will be in JBC, where it can only effect the  // initial state transfer values on newly joined nodes  // (i.e. populateLocalCache()).	WITHOUT_CLASSIFICATION	0.6013855950788253	WITHOUT_CLASSIFICATION	0.39861440492117467	DESIGN
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999600060918792	WITHOUT_CLASSIFICATION	3.999390812084333E-5	DESIGN
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999600060918792	WITHOUT_CLASSIFICATION	3.999390812084333E-5	DESIGN
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.999984526749564	WITHOUT_CLASSIFICATION	1.547325043601728E-5	DESIGN
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9999999004719912	WITHOUT_CLASSIFICATION	9.952800877924812E-8	DESIGN
// we need to obtain the lock before any actions are // executed, since this may be an inverse="true" // bidirectional association and it is one of the // earlier entity actions which actually updates // the database (this action is resposible for // second-level cache invalidation only)	WITHOUT_CLASSIFICATION	0.9999999353317622	WITHOUT_CLASSIFICATION	6.466823775282224E-8	DESIGN
//postDelete: // After actually deleting a row, record the fact that the instance no longer  // exists on the database (needed for identity-column key generation), and // remove it from the session cache	WITHOUT_CLASSIFICATION	0.9999957338581067	WITHOUT_CLASSIFICATION	4.2661418933452565E-6	DESIGN
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999720026914372	WITHOUT_CLASSIFICATION	2.799730856281029E-5	DESIGN
// todo : what else to do here?	DESIGN	0.9992954446020635	WITHOUT_CLASSIFICATION	7.04555397936512E-4	DESIGN
//put() has nowait semantics, is this really appropriate? //note that it needs to be async replication, never local or sync	DESIGN	0.5660011260656868	DESIGN	0.4339988739343133	WITHOUT_CLASSIFICATION
// 'hibernate.temp.use_jdbc_metadata_defaults' is a temporary magic value. // The need for it is intended to be alleviated with future developement, thus it is // not defined as an Environment constant... // // it is used to control whether we should consult the JDBC metadata to determine // certain Settings default values; it is useful to *not* do this when the database // may not be available (mainly in tools usage).	DESIGN	0.9999537900414948	WITHOUT_CLASSIFICATION	4.6209958505169276E-5	DESIGN
//TODO: get SQL rendering out of this package!	DESIGN	0.693104717861377	WITHOUT_CLASSIFICATION	0.3068952821386231	DESIGN
//TODO: get SQL rendering out of this package!	DESIGN	0.693104717861377	WITHOUT_CLASSIFICATION	0.3068952821386231	DESIGN
// todo : eventually merge this with TreeCache and just add optional opt-lock support there.	DESIGN	0.9999239525234644	WITHOUT_CLASSIFICATION	7.604747653559045E-5	DESIGN
// can happen because of the multiple ways Cache.remove() // can be invoked :(	DESIGN	0.9997445120556355	WITHOUT_CLASSIFICATION	2.554879443645367E-4	DESIGN
// work around the "feature" where tree cache is validating the // inserted node during the next transaction.  no idea...	DESIGN	0.9999805284812607	WITHOUT_CLASSIFICATION	1.947151873922808E-5	DESIGN
/**     * FIXME Per the RegionFactory class Javadoc, this constructor version     * should not be necessary.     *      * @param props The configuration properties     */	DESIGN	0.9985713925034047	WITHOUT_CLASSIFICATION	0.001428607496595314	DESIGN
/**     * FIXME Per the RegionFactory class Javadoc, this constructor version     * should not be necessary.     *      * @param props The configuration properties     */	DESIGN	0.9985713925034047	WITHOUT_CLASSIFICATION	0.001428607496595314	DESIGN
// FIXME Hacky workaround to JBCACHE-1202	DESIGN	0.7138292631048013	WITHOUT_CLASSIFICATION	0.2861707368951986	DESIGN
// FIXME Hacky workaround to JBCACHE-1202	DESIGN	0.7138292631048013	WITHOUT_CLASSIFICATION	0.2861707368951986	DESIGN
// TODO: I considered validating TS cache config here, // but decided to defer unti getTimestampsCacheInstance() in case the  // cache is never actually used	DESIGN	0.72531332163372	WITHOUT_CLASSIFICATION	0.2746866783662801	DESIGN
// TODO Is this a valid operation on a timestamps cache?	DESIGN	0.7726440004641275	DESIGN	0.2273559995358725	WITHOUT_CLASSIFICATION
// TODO Is this a valid operation on a timestamps cache?	DESIGN	0.7726440004641275	DESIGN	0.2273559995358725	WITHOUT_CLASSIFICATION
// TODO Why not use the timestamp in a DataVersion?	DESIGN	0.8918339156296838	DESIGN	0.10816608437031625	WITHOUT_CLASSIFICATION
// can happen because of the multiple ways Cache.remove() // can be invoked :(	DESIGN	0.9997445120556355	WITHOUT_CLASSIFICATION	2.554879443645367E-4	DESIGN
// work around the "feature" where tree cache is validating the // inserted node during the next transaction. no idea...	DESIGN	0.9999841562880187	WITHOUT_CLASSIFICATION	1.5843711981258452E-5	DESIGN
//swaldman 2004-02-07: modify to allow null values to signify fall through to c3p0 PoolConfig defaults	DESIGN	0.9998354671135911	WITHOUT_CLASSIFICATION	1.6453288640896885E-4	DESIGN
// turn hibernate.c3p0.* into c3p0.*, so c3p0 // gets a chance to see all hibernate.c3p0.*	DESIGN	0.9998949811085023	WITHOUT_CLASSIFICATION	1.0501889149764636E-4	DESIGN
//TODO: this bit actually has to be called after all cascades! //      but since identity insert is called *synchronously*, //      instead of asynchronously as other actions, it isn't	DESIGN	0.8455001082403216	WITHOUT_CLASSIFICATION	0.15449989175967838	DESIGN
//TODO: reenable if we also fix the above todo	DESIGN	0.6843200197981921	WITHOUT_CLASSIFICATION	0.31567998020180793	DESIGN
//TODO: inefficient if that cache is just going to ignore the updated state!	DESIGN	0.9913583686342132	WITHOUT_CLASSIFICATION	0.008641631365786743	DESIGN
// we may be screwed here since the collection action is about to execute // and we do not know the final owner key value	DESIGN	0.9999944834538078	WITHOUT_CLASSIFICATION	5.516546192132395E-6	DESIGN
/** Create an action that will evict collection and entity regions based on queryspaces (table names).	DESIGN	0.999995528014033	WITHOUT_CLASSIFICATION	4.47198596696397E-6	DESIGN
// todo : what else to do here?	DESIGN	0.9992954446020635	WITHOUT_CLASSIFICATION	7.04555397936512E-4	DESIGN
// todo : modify the class definition if not already transformed...	DESIGN	0.999988914365104	WITHOUT_CLASSIFICATION	1.10856348960853E-5	DESIGN
// todo : what else to do here?	DESIGN	0.9992954446020635	WITHOUT_CLASSIFICATION	7.04555397936512E-4	DESIGN
// this is called by SessionFactory irregardless; we just disregard here; // could also add a check to SessionFactory to only conditionally call start	DESIGN	0.9912916641596061	WITHOUT_CLASSIFICATION	0.008708335840393799	DESIGN
// this is called by SessionFactory irregardless; we just disregard here; // could also add a check to SessionFactory to only conditionally call stop	DESIGN	0.9892616226558059	WITHOUT_CLASSIFICATION	0.010738377344194219	DESIGN
//TODO: to handle concurrent writes correctly, this should return a Lock to the client	DESIGN	0.8271451430522839	WITHOUT_CLASSIFICATION	0.17285485694771607	DESIGN
//put() has nowait semantics, is this really appropriate? //note that it needs to be async replication, never local or sync	DESIGN	0.5660011260656868	DESIGN	0.4339988739343133	WITHOUT_CLASSIFICATION
//TODO: to handle concurrent writes correctly, the client should pass in a Lock	DESIGN	0.9413363289583315	WITHOUT_CLASSIFICATION	0.05866367104166847	DESIGN
//TODO: assumes all collections disassemble to an array!	DESIGN	0.9805812322832818	WITHOUT_CLASSIFICATION	0.01941876771671818	DESIGN
//TODO: reuse the PreLoadEvent	DESIGN	0.9638740919507618	WITHOUT_CLASSIFICATION	0.036125908049238126	DESIGN
// todo: this was added to support initializing an entity's EntityEntry snapshot during reattach; // this should be refactored to instead expose a method to assemble a EntityEntry based on this // state for return.	DESIGN	0.973995938512164	WITHOUT_CLASSIFICATION	0.026004061487836017	DESIGN
// todo : what is the implication of this?	DESIGN	0.9956772045440753	WITHOUT_CLASSIFICATION	0.004322795455924706	DESIGN
// use COUNT as the default.  This mimics the old behavior, although // NONE might be a better option moving forward in the case of callable	DESIGN	0.7678734625598601	DESIGN	0.23212653744013986	WITHOUT_CLASSIFICATION
/* TODO: joinKeyColumnName & foreignKeyColumnName should be called either here or at a	DESIGN	0.9158749427324322	WITHOUT_CLASSIFICATION	0.08412505726756783	DESIGN
//TODO: suck this into initLaziness!	DESIGN	0.6960289481436642	DESIGN	0.3039710518563358	WITHOUT_CLASSIFICATION
// we have to set up the table later!! yuck	DESIGN	0.999912440342522	WITHOUT_CLASSIFICATION	8.755965747804685E-5	DESIGN
//TODO: better to degrade to lazy="false" if uninstrumented	DESIGN	0.9232318483856464	WITHOUT_CLASSIFICATION	0.07676815161435364	DESIGN
// todo : again, how *should* this work for non-pojo entities?	DESIGN	0.9105330363818336	WITHOUT_CLASSIFICATION	0.08946696361816633	DESIGN
// TODO: this is a bit of copy/paste from IndexedCollection.createPrimaryKey()	DESIGN	0.8005572209624329	DESIGN	0.19944277903756713	WITHOUT_CLASSIFICATION
// This inner class implements a case statement....perhaps im being a bit over-clever here	DESIGN	0.9998764410559481	WITHOUT_CLASSIFICATION	1.2355894405196555E-4	DESIGN
//TODO: bad implementation, cos it depends upon ordering of mapping doc //      fixing this requires that Collection/PersistentClass gain access //      to the Mappings reference from Configuration (or the filterDefinitions //      map directly) sometime during Configuration.buildSessionFactory //      (after all the types/filter-defs are known and before building //      persisters).	DESIGN	0.973977203029442	WITHOUT_CLASSIFICATION	0.026022796970557985	DESIGN
//use of a stringbuffer to workaround a JDK bug	DESIGN	0.7078507430048842	DESIGN	0.29214925699511585	WITHOUT_CLASSIFICATION
// hack/workaround as sqlquery impl depend on having a key.	DESIGN	0.6550036229144744	DESIGN	0.34499637708552544	WITHOUT_CLASSIFICATION
//FIXME: get the PersistentClass	DESIGN	0.9998891984160307	WITHOUT_CLASSIFICATION	1.1080158396925415E-4	DESIGN
//FIXME: get the PersistentClass	DESIGN	0.9998891984160307	WITHOUT_CLASSIFICATION	1.1080158396925415E-4	DESIGN
//Icky workaround for MySQL bug:	DESIGN	0.7337947685514816	DESIGN	0.2662052314485184	WITHOUT_CLASSIFICATION
//TODO: Somehow add the newly created foreign keys to the internal collection	DESIGN	0.9999087210206042	WITHOUT_CLASSIFICATION	9.1278979395873E-5	DESIGN
//TODO possibly relax that	DESIGN	0.9681417224126184	WITHOUT_CLASSIFICATION	0.031858277587381544	DESIGN
//TODO possibly relax that	DESIGN	0.9681417224126184	WITHOUT_CLASSIFICATION	0.031858277587381544	DESIGN
//TODO possibly relax that	DESIGN	0.9681417224126184	WITHOUT_CLASSIFICATION	0.031858277587381544	DESIGN
//use of a stringbuffer to workaround a JDK bug	DESIGN	0.7078507430048842	DESIGN	0.29214925699511585	WITHOUT_CLASSIFICATION
//use a degenerated strategy for backward compatibility	DESIGN	0.999992045207263	WITHOUT_CLASSIFICATION	7.954792736881002E-6	DESIGN
// Sets can be just a view of a part of another collection. // do we need to copy it to be sure it won't be changing // underneath us? // ie. this.set.addAll(set);	DESIGN	0.9999919827401866	WITHOUT_CLASSIFICATION	8.017259813356013E-6	DESIGN
//note that i parameter is now unused (delete it?)	DESIGN	0.9877835850200166	WITHOUT_CLASSIFICATION	0.012216414979983365	DESIGN
//just to help out during the load (ugly, i know)	DESIGN	0.9997281937360144	WITHOUT_CLASSIFICATION	2.7180626398559936E-4	DESIGN
// TODO : safe to interpret "map.remove(key) == null" as non-dirty?	DESIGN	0.6211092285110384	WITHOUT_CLASSIFICATION	0.37889077148896166	DESIGN
// yick!  need this for proper serialization/deserialization handling...	DESIGN	0.9998828931621659	WITHOUT_CLASSIFICATION	1.1710683783405365E-4	DESIGN
//TODO: get SQL rendering out of this package!	DESIGN	0.693104717861377	WITHOUT_CLASSIFICATION	0.3068952821386231	DESIGN
//TODO: get SQL rendering out of this package!	DESIGN	0.693104717861377	WITHOUT_CLASSIFICATION	0.3068952821386231	DESIGN
//yuck!	DESIGN	0.998115583892742	WITHOUT_CLASSIFICATION	0.0018844161072579626	DESIGN
//TODO: get SQL rendering out of this package!	DESIGN	0.693104717861377	WITHOUT_CLASSIFICATION	0.3068952821386231	DESIGN
// TODO : not sure this is correct, could not find docs on how to do this.	DESIGN	0.9768002055070053	DESIGN	0.02319979449299479	WITHOUT_CLASSIFICATION
//HSQL has no Blob/Clob support .... but just put these here for now!	DESIGN	0.9999435460498075	WITHOUT_CLASSIFICATION	5.645395019247384E-5	DESIGN
// does this need holdlock also? : return tableName + " with (updlock, rowlock, holdlock)";	DESIGN	0.9926650475369718	WITHOUT_CLASSIFICATION	0.007334952463028106	DESIGN
// sql-server, at least needed this dropped after use; strange!	DESIGN	0.9999500050310606	WITHOUT_CLASSIFICATION	4.999496893951227E-5	DESIGN
// todo : is there really any reason to kkeep trying if this fails once?	DESIGN	0.9864725320791528	WITHOUT_CLASSIFICATION	0.013527467920847238	DESIGN
// TBD should this be varbinary($1)? //	DESIGN	0.820513233520034	WITHOUT_CLASSIFICATION	0.17948676647996592	DESIGN
// is it necessary to register %exact since it can only appear in a where clause?	DESIGN	0.9994299907401589	WITHOUT_CLASSIFICATION	5.700092598411312E-4	DESIGN
// xmlforest requires a new kind of function constructor	DESIGN	0.9998743699624261	WITHOUT_CLASSIFICATION	1.256300375739344E-4	DESIGN
// Does this dialect support the ALTER TABLE syntax?	DESIGN	0.9997448373292895	WITHOUT_CLASSIFICATION	2.5516267071046283E-4	DESIGN
// Do we need to qualify index names with the schema name?	DESIGN	0.9999588818261715	WITHOUT_CLASSIFICATION	4.111817382847147E-5	DESIGN
// Does this dialect support the UNIQUE column syntax?	DESIGN	0.9996731613407238	WITHOUT_CLASSIFICATION	3.268386592761611E-4	DESIGN
// Does this dialect support check constraints?	DESIGN	0.9998848789216317	WITHOUT_CLASSIFICATION	1.1512107836824853E-4	DESIGN
// Do we need to drop constraints before dropping tables in this dialect?	DESIGN	0.99987111272385	WITHOUT_CLASSIFICATION	1.2888727614996428E-4	DESIGN
// Does this dialect support the FOR UPDATE syntax?	DESIGN	0.999504050130778	WITHOUT_CLASSIFICATION	4.959498692219344E-4	DESIGN
// Does this dialect support the Oracle-style FOR UPDATE NOWAIT syntax?	DESIGN	0.9996704181081314	WITHOUT_CLASSIFICATION	3.295818918686575E-4	DESIGN
// Does this dialect support FOR UPDATE OF, allowing particular rows to be locked?	DESIGN	0.9571358606043706	WITHOUT_CLASSIFICATION	0.04286413939562935	DESIGN
//note there is a wierd implementation in the client side	DESIGN	0.9999589497259637	WITHOUT_CLASSIFICATION	4.105027403638602E-5	DESIGN
//TODO: never reached, since getTypeName() actually throws an exception!	DESIGN	0.9696974951327808	WITHOUT_CLASSIFICATION	0.03030250486721929	DESIGN
// todo : should we additionally check the current isolation mode explicitly?	DESIGN	0.999662051399771	WITHOUT_CLASSIFICATION	3.3794860022901506E-4	DESIGN
// todo : remove this and just have subclasses use Isolater/IsolatedWork directly...	DESIGN	0.995102978924508	WITHOUT_CLASSIFICATION	0.004897021075492012	DESIGN
//TODO: should orphans really be deleted during lock???	DESIGN	0.5986193062206643	DESIGN	0.4013806937793358	WITHOUT_CLASSIFICATION
// orphans should not be deleted during merge??	DESIGN	0.9985429549413402	WITHOUT_CLASSIFICATION	0.0014570450586598664	DESIGN
// orphans should not be deleted during copy??	DESIGN	0.9979688366301968	WITHOUT_CLASSIFICATION	0.0020311633698031554	DESIGN
//I suppose?	DESIGN	0.9985072271504755	WITHOUT_CLASSIFICATION	0.0014927728495245463	DESIGN
//TODO: suck this logic into the collection!	DESIGN	0.9355545077695705	WITHOUT_CLASSIFICATION	0.0644454922304294	DESIGN
// TODO: an alternative is to check if the owner has changed; if it hasn't then // get the ID from collection.getOwner()	DESIGN	0.9846696858240012	WITHOUT_CLASSIFICATION	0.015330314175998703	DESIGN
//TODO:refactor + make this method private	DESIGN	0.8097800480909285	WITHOUT_CLASSIFICATION	0.19021995190907146	DESIGN
// todo : we can actually just determine this from the incoming EntityEntry-s	DESIGN	0.9973352649426565	WITHOUT_CLASSIFICATION	0.0026647350573435783	DESIGN
//TODO: Should this be an InitializeEntityEventListener??? (watch out for performance!)	DESIGN	0.9913838938353301	WITHOUT_CLASSIFICATION	0.008616106164669981	DESIGN
//TODO: better to pass the id in as an argument?	DESIGN	0.9267170817619755	WITHOUT_CLASSIFICATION	0.07328291823802442	DESIGN
// todo : potentially look at optimizing these two arrays	DESIGN	0.9999887482429215	WITHOUT_CLASSIFICATION	1.1251757078420796E-5	DESIGN
/* trim done to workaround stupid oracle bug that cant handle whitespaces before a { in a sp */	DESIGN	0.7512631235226542	DESIGN	0.2487368764773457	WITHOUT_CLASSIFICATION
/* trim done to workaround stupid oracle bug that cant handle whitespaces before a { in a sp */	DESIGN	0.7512631235226542	DESIGN	0.2487368764773457	WITHOUT_CLASSIFICATION
//TODO: temporary	DESIGN	0.9867113145560514	WITHOUT_CLASSIFICATION	0.013288685443948522	DESIGN
//TODO: not quite sure about the full implications of this!	DESIGN	0.9626159807738743	WITHOUT_CLASSIFICATION	0.0373840192261257	DESIGN
//TODO: not quite sure about the full implications of this!	DESIGN	0.9626159807738743	WITHOUT_CLASSIFICATION	0.0373840192261257	DESIGN
//TODO: ugly here:	DESIGN	0.9960913595618954	WITHOUT_CLASSIFICATION	0.003908640438104482	DESIGN
//this is kinda the best we can do...	DESIGN	0.9536626293599676	WITHOUT_CLASSIFICATION	0.04633737064003235	DESIGN
//TODO: this needn't exclude subclasses...	DESIGN	0.5839935373623899	WITHOUT_CLASSIFICATION	0.4160064626376101	DESIGN
// todo : need map? the prob is a proper key, right?	DESIGN	0.9983203273179173	WITHOUT_CLASSIFICATION	0.0016796726820826732	DESIGN
// todo : i'd much rather have this done from #endLoadingCollection(CollectionPersister,LoadingCollectionEntry)...	DESIGN	0.9996629712727756	WITHOUT_CLASSIFICATION	3.370287272244075E-4	DESIGN
// todo : hack!!! // NOTE : here we cleanup the load context when we have no more local // LCE entries.  This "works" for the time being because really // only the collection load contexts are implemented.  Long term, // this cleanup should become part of the "close result set" // processing from the (sandbox/jdbc) jdbc-container code.	DESIGN	0.5635761740653537	WITHOUT_CLASSIFICATION	0.4364238259346463	DESIGN
// todo : should really move this log statement to CollectionType, where this is used from...	DESIGN	0.7390517637384487	DESIGN	0.26094823626155134	WITHOUT_CLASSIFICATION
// TODO : keep seperate notions of QT[] here for shallow/non-shallow queries...	DESIGN	0.9130499005496868	WITHOUT_CLASSIFICATION	0.08695009945031322	DESIGN
// TODO : add this info to the translator and aggregate it here...	DESIGN	0.7416225729135598	WITHOUT_CLASSIFICATION	0.25837742708644024	DESIGN
//TODO: move into collection type, so we can use polymorphism!	DESIGN	0.9458867262832247	WITHOUT_CLASSIFICATION	0.05411327371677532	DESIGN
// todo : should we check the current isolation mode explicitly?	DESIGN	0.9997297253271122	WITHOUT_CLASSIFICATION	2.702746728877258E-4	DESIGN
//TODO: suck into event class	DESIGN	0.8066717485316667	WITHOUT_CLASSIFICATION	0.1933282514683333	DESIGN
//do we even really need this? the update will fail anyway....	DESIGN	0.9960033583722171	WITHOUT_CLASSIFICATION	0.0039966416277829875	DESIGN
//hum ... should we cascade anyway? throw an exception? fine like it is?	DESIGN	0.9269406715602815	WITHOUT_CLASSIFICATION	0.07305932843971848	DESIGN
//TODO: would it be better to do a refresh from db?	DESIGN	0.9898862958942833	DESIGN	0.010113704105716605	WITHOUT_CLASSIFICATION
//TODO: we use two visitors here, inefficient!	DESIGN	0.8075981675416506	WITHOUT_CLASSIFICATION	0.1924018324583495	DESIGN
// this class has no proxies (so do a shortcut)	DESIGN	0.9976770223040053	WITHOUT_CLASSIFICATION	0.002322977695994768	DESIGN
//PostLoad is needed for EJB3 //TODO: reuse the PostLoadEvent...	DESIGN	0.980575072084727	WITHOUT_CLASSIFICATION	0.019424927915272876	DESIGN
//TODO: put this stuff back in to read snapshot from //      the second-level cache (needs some extra work)	DESIGN	0.9959328619297819	DESIGN	0.004067138070218073	WITHOUT_CLASSIFICATION
// null or brand new collection // this will also (inefficiently) handle arrays, which have // no snapshot, so we can't do any better	DESIGN	0.9990071802529535	WITHOUT_CLASSIFICATION	9.928197470463688E-4	DESIGN
//TODO: is this 100% correct?	DESIGN	0.7525308399447135	WITHOUT_CLASSIFICATION	0.2474691600552865	DESIGN
// TODO: iteratively get transient entities and retry merge until one of the following conditions: //       1) transientCopyCache.size() == 0 //       2) transientCopyCache.size() is not decreasing and copyCache.size() is not increasing // TODO: find out if retrying can add entities to copyCache (don't think it can...) // For now, just retry once; throw TransientObjectException if there are still any transient entities	DESIGN	0.5337000263334919	DESIGN	0.46629997366650805	WITHOUT_CLASSIFICATION
// entity name will not be available for non-POJO entities // TODO: cache the entity name somewhere so that it is available to this exception	DESIGN	0.7512372984211089	WITHOUT_CLASSIFICATION	0.24876270157889116	DESIGN
//TODO: we should throw an exception if we really *know* for sure   //      that this is a detached instance, rather than just assuming //throw new StaleObjectStateException(entityName, id);	DESIGN	0.5514187762099936	DESIGN	0.4485812237900064	WITHOUT_CLASSIFICATION
// TODO : perhaps we should additionally require that the incoming entity // version be equivalent to the defined unsaved-value?	DESIGN	0.7318973887057061	WITHOUT_CLASSIFICATION	0.26810261129429386	DESIGN
// perhaps this should be an exception since it is only ever used // in the above method?	DESIGN	0.6609173810031628	DESIGN	0.33908261899683717	WITHOUT_CLASSIFICATION
// Put a placeholder in entries, so we don't recurse back and try to save() the // same object again. QUESTION: should this be done before onSave() is called? // likewise, should it be done before onUpdate()?	DESIGN	0.9998789200506413	WITHOUT_CLASSIFICATION	1.2107994935860858E-4	DESIGN
//TODO: merge into one method!	DESIGN	0.9556793507804504	WITHOUT_CLASSIFICATION	0.04432064921954955	DESIGN
//TODO: refactor to .sql package	DESIGN	0.9876342585027938	WITHOUT_CLASSIFICATION	0.012365741497206062	DESIGN
/** * Provides query splitting methods, which were originally in QueryTranslator. * <br> * TODO: This will need to be refactored at some point. * * @author josh */	DESIGN	0.6725661667731638	WITHOUT_CLASSIFICATION	0.32743383322683606	DESIGN
//TODO: this is one of the ugliest and most fragile pieces of code in Hibernate....	DESIGN	0.7303694835337374	WITHOUT_CLASSIFICATION	0.26963051646626257	DESIGN
// todo : temporary //      needed because currently persister is the one that //      creates and renders the join fragments for inheritence //      hierarchies...	DESIGN	0.999995360126251	WITHOUT_CLASSIFICATION	4.639873748945398E-6	DESIGN
// TODO : better way?!?	DESIGN	0.9645285380257422	DESIGN	0.03547146197425775	WITHOUT_CLASSIFICATION
// Not possible to simply re-use the versionPropertyNode here as it causes // OOM errors due to circularity :(	DESIGN	0.9998315555582525	WITHOUT_CLASSIFICATION	1.684444417475314E-4	DESIGN
//TODO:this is only needed during compilation .. can we eliminate the instvar?	DESIGN	0.9685276991916947	WITHOUT_CLASSIFICATION	0.03147230080830531	DESIGN
// TODO : this is a bit dodgy, come up with a better way to check this (plus see above comment)	DESIGN	0.9992544770666062	DESIGN	7.455229333937431E-4	WITHOUT_CLASSIFICATION
// even here, if only properties mapped to the "base table" are referenced // in the set and where clauses, this could be handled by the BasicDelegate. // TODO : decide if it is better performance-wise to perform that check, or to simply use the MultiTableUpdateDelegate	DESIGN	0.9020933397064347	WITHOUT_CLASSIFICATION	0.09790666029356522	DESIGN
//TODO: switch statements are always evil! We already had bugs because  //      of forgotten token types. Use polymorphism for this!	DESIGN	0.9872687752303078	WITHOUT_CLASSIFICATION	0.012731224769692202	DESIGN
// TODO : we really need to be able to deal with component paths here also; // this is difficult because the hql-sql grammar expects all those node types // to be FromReferenceNodes.  One potential fix here would be to convert the // IntoClause to just use a FromClause/FromElement combo (as a child of the // InsertStatement) and move all this logic into the InsertStatement.  That's // probably the easiest approach (read: least amount of changes to the grammar // and code), but just doesn't feel right as then an insert would contain // 2 from-clauses	DESIGN	0.999225396900381	DESIGN	7.746030996190735E-4	WITHOUT_CLASSIFICATION
// really there are two situations where it should be ok to allow the insertion // into properties defined on a superclass: //      1) union-subclass with an abstract root entity //      2) discrim-subclass // // #1 is handled already because of the fact that // UnionSubclassPersister alreay always returns 0 // for this call... // // we may want to disallow it for discrim-subclass just for // consistency-sake (currently does not work anyway)...	DESIGN	0.847326889522735	WITHOUT_CLASSIFICATION	0.15267311047726495	DESIGN
//yuck!	DESIGN	0.998115583892742	WITHOUT_CLASSIFICATION	0.0018844161072579626	DESIGN
// implicit joins are always(?) ok to reuse	DESIGN	0.9999020348804416	WITHOUT_CLASSIFICATION	9.796511955838603E-5	DESIGN
// TODO : we may also want to check that the types here map to exactly one column/JDBC-type //      can't think of a situation where arithmetic expression between multi-column mappings //      makes any sense.	DESIGN	0.9635723852984076	WITHOUT_CLASSIFICATION	0.036427614701592344	DESIGN
// we do not know either type //BLIND GUESS!	DESIGN	0.9999006840632053	WITHOUT_CLASSIFICATION	9.931593679471199E-5	DESIGN
//TODO: used to be exprNoParens! was this needed?	DESIGN	0.7599605512575451	DESIGN	0.240039448742455	WITHOUT_CLASSIFICATION
// TODO: Replace this with a more elegant solution.	DESIGN	0.8009677791981006	WITHOUT_CLASSIFICATION	0.19903222080189945	DESIGN
// TODO: Should this really return null?  If not, figure out something better to do here.	DESIGN	0.9992265067555188	DESIGN	7.734932444812266E-4	WITHOUT_CLASSIFICATION
//TODO: get SQL rendering out of this package!	DESIGN	0.693104717861377	WITHOUT_CLASSIFICATION	0.3068952821386231	DESIGN
// yuck!	DESIGN	0.9997725396318669	WITHOUT_CLASSIFICATION	2.2746036813307258E-4	DESIGN
// ignore it; the incoming property could not be found so we // cannot be sure what to do here.  At the very least, the // safest is to simply not apply any dereference toggling...	DESIGN	0.9997858571109177	WITHOUT_CLASSIFICATION	2.1414288908241003E-4	DESIGN
// TODO : most of below was taken verbatim from DotNode; should either delegate this logic or super-type it	DESIGN	0.9365477303851146	DESIGN	0.06345226961488548	WITHOUT_CLASSIFICATION
// otherwise, a trim-specification and/or a trim-character // have been specified;  we need to decide which options // are present and "do the right thing" // should leading trim-characters be trimmed? // should trailing trim-characters be trimmed? // the trim-character // the trim-source	DESIGN	0.9999619226746272	WITHOUT_CLASSIFICATION	3.8077325372708744E-5	DESIGN
// todo: we should really just collect these from the various SelectExpressions, rather than regenerating here	DESIGN	0.9879462357618931	WITHOUT_CLASSIFICATION	0.012053764238106786	DESIGN
//TODO: is this a bit ugly?	DESIGN	0.8331109657792136	DESIGN	0.16688903422078638	WITHOUT_CLASSIFICATION
// Need a better way to define the suffixes here...	DESIGN	0.9991490867027819	WITHOUT_CLASSIFICATION	8.509132972180985E-4	DESIGN
// TODO: something much better - look at the type of the other expression! // TODO: Have comparisonExpression and/or arithmeticExpression rules complete the resolution of boolean nodes.	DESIGN	0.7230286466025694	WITHOUT_CLASSIFICATION	0.27697135339743073	DESIGN
// TODO : what amount of significant digits need to be supported here? //      - from the DecimalFormat docs: //          [significant digits] = [minimum integer digits] + [maximum fraction digits]	DESIGN	0.966966519386766	WITHOUT_CLASSIFICATION	0.033033480613234065	DESIGN
// Needed the "clazz_" check to work around union-subclasses // TODO : is there a way to tell whether a persister is truly discrim-column based inheritence?	DESIGN	0.6962296321314596	DESIGN	0.3037703678685404	WITHOUT_CLASSIFICATION
//We should actually rework this class to not implement Parser //and just process path expressions in the most convenient way.	DESIGN	0.9185241766223159	WITHOUT_CLASSIFICATION	0.08147582337768404	DESIGN
//The class is now way to complex!	DESIGN	0.9993884250954548	WITHOUT_CLASSIFICATION	6.115749045452779E-4	DESIGN
//TODO: get SQL rendering out of here	DESIGN	0.9345499034074156	WITHOUT_CLASSIFICATION	0.0654500965925845	DESIGN
//TODO: is there a better way?	DESIGN	0.7689709788374872	DESIGN	0.23102902116251284	WITHOUT_CLASSIFICATION
//Must be done here because of side-effect! yuck...	DESIGN	0.9998029698794764	WITHOUT_CLASSIFICATION	1.97030120523689E-4	DESIGN
//name from a super query (a bit inelegant that it shows up here)	DESIGN	0.9992915277758848	WITHOUT_CLASSIFICATION	7.084722241150725E-4	DESIGN
// We should reengineer this class so that, rather than the current ad - // hoc linear approach to processing a stream of tokens, we instead // build up a tree of expressions.	DESIGN	0.9998313812426822	WITHOUT_CLASSIFICATION	1.6861875731778513E-4	DESIGN
// this is ugly here, but needed because its a subquery	DESIGN	0.9997938819625652	WITHOUT_CLASSIFICATION	2.061180374348398E-4	DESIGN
// unhappy about this being public ... is there a better way?	DESIGN	0.9967967345583684	WITHOUT_CLASSIFICATION	0.00320326544163152	DESIGN
// Make sure this is a defined parameter and check the incoming value type // TODO: what should be the actual exception type here?	DESIGN	0.98948131705232	DESIGN	0.010518682947679884	WITHOUT_CLASSIFICATION
// TODO : this constructor form is *only* used from constructor directly below us; can it go away?	DESIGN	0.9970144152503478	DESIGN	0.0029855847496520656	WITHOUT_CLASSIFICATION
//TODO: COPY/PASTE FROM SessionImpl, pull up!	DESIGN	0.9699195482647133	WITHOUT_CLASSIFICATION	0.030080451735286735	DESIGN
// TODO : should remove this exposure //  and have all references to the session's batcher use the ConnectionManager.	DESIGN	0.9793930151980597	DESIGN	0.02060698480194039	WITHOUT_CLASSIFICATION
// todo : should this get moved to PersistentContext? // logically, is PersistentContext the "thing" to which an interceptor gets attached?	DESIGN	0.7653595567429698	WITHOUT_CLASSIFICATION	0.23464044325703015	DESIGN
// TODO: what type?	DESIGN	0.8558756315595876	WITHOUT_CLASSIFICATION	0.14412436844041238	DESIGN
// todo : should seriously consider not allowing a txn to begin from a child session //      can always route the request to the root session...	DESIGN	0.9984096515055563	WITHOUT_CLASSIFICATION	0.0015903484944438018	DESIGN
// short-circuit for performance...	DESIGN	0.999991559347524	WITHOUT_CLASSIFICATION	8.440652475874639E-6	DESIGN
// not absolutely necessary, but does help with aggressive release	DESIGN	0.9998635798227419	WITHOUT_CLASSIFICATION	1.364201772580497E-4	DESIGN
// TODO : remove these last two as batcher is no longer managing connections	DESIGN	0.7977354759664538	DESIGN	0.20226452403354622	WITHOUT_CLASSIFICATION
//work around a bug in all known connection pools....	DESIGN	0.960007789339665	WITHOUT_CLASSIFICATION	0.03999221066033495	DESIGN
// TODO : make this the factory for "entity mode related" sessions; // also means making this the target of transaction-synch and the // thing that knows how to cascade things between related sessions // // At that point, perhaps this thing is a "SessionContext", and // ConnectionManager is a "JDBCContext"?  A "SessionContext" should // live in the impl package...	DESIGN	0.6022367237419378	WITHOUT_CLASSIFICATION	0.3977632762580622	DESIGN
//TODO: does this really need to be here? //      does the collection already have //      it's own up-to-date snapshot?	DESIGN	0.8756655331338858	WITHOUT_CLASSIFICATION	0.12433446686611425	DESIGN
//TODO: the i==entitySpan-1 bit depends upon subclass implementation (very bad)	DESIGN	0.9980824183218416	WITHOUT_CLASSIFICATION	0.0019175816781582394	DESIGN
/**	DESIGN	0.9966739556456018	WITHOUT_CLASSIFICATION	0.003326044354398164	DESIGN
// todo : add the notion of enabled filters to the CacheKey to differentiate filtered collections from non-filtered; //      but CacheKey is currently used for both collections and entities; would ideally need to define two seperate ones; //      currently this works in conjuction with the check on //      DefaultInitializeCollectionEventHandler.initializeCollectionFromCache() (which makes sure to not read from //      cache with enabled filters). // EARLY EXIT!!!!!	DESIGN	0.9558801430105416	WITHOUT_CLASSIFICATION	0.044119856989458486	DESIGN
//for sets, we should end the collection load after resolving //the entities, since we might call hashCode() on the elements //TODO: or we could do this polymorphically, and have two //      different operations implemented differently for arrays	DESIGN	0.6364081573019712	WITHOUT_CLASSIFICATION	0.36359184269802874	DESIGN
//This is not very nice (and quite slow):	DESIGN	0.9919247975919002	WITHOUT_CLASSIFICATION	0.008075202408099762	DESIGN
//use of trim() here is ugly?	DESIGN	0.9992930612056019	WITHOUT_CLASSIFICATION	7.069387943981692E-4	DESIGN
//TODO: this is too conservative; if all preceding joins were  //      also inner joins, we could use an inner join here	DESIGN	0.5398335910493313	WITHOUT_CLASSIFICATION	0.4601664089506688	DESIGN
//TODO: look at the owning property and check that it  //      isn't lazy (by instrumentation)	DESIGN	0.9994272349675317	WITHOUT_CLASSIFICATION	5.7276503246833E-4	DESIGN
//TODO: inefficient	DESIGN	0.9781691960608986	WITHOUT_CLASSIFICATION	0.021830803939101442	DESIGN
// why does this matter?	DESIGN	0.9708294224171513	WITHOUT_CLASSIFICATION	0.02917057758284859	DESIGN
// from the collection of associations, locate OJA for the // ManyToOne corresponding to this persister to fully // define the many-to-many; we need that OJA so that we can // use its alias here // TODO : is there a better way here?	DESIGN	0.5239124803555517	WITHOUT_CLASSIFICATION	0.4760875196444482	DESIGN
//TODO: this class depends directly upon CriteriaImpl,  //      in the impl package ... add a CriteriaImplementor  //      interface	DESIGN	0.9782625489534286	WITHOUT_CLASSIFICATION	0.021737451046571432	DESIGN
//TODO: add a CriteriaImplementor interface //      this class depends directly upon CriteriaImpl in the impl package...	DESIGN	0.9584781246702159	WITHOUT_CLASSIFICATION	0.04152187532978411	DESIGN
// TODO : not so sure this is needed...	DESIGN	0.9729503948478972	DESIGN	0.027049605152102762	WITHOUT_CLASSIFICATION
// meant to handle dynamic instantiation queries...(Copy from QueryLoader)	DESIGN	0.9999769941514289	WITHOUT_CLASSIFICATION	2.300584857105658E-5	DESIGN
// TODO: The order in which entities are saved may matter (e.g., a particular transient entity //       may need to be saved before other transient entities can be saved; //       Keep retrying the batch of transient entities until either: //       1) there are no transient entities left in transientCopyCache //       or 2) no transient entities were saved in the last batch // For now, just run through the transient entities and retry the merge	DESIGN	0.9995668811475849	WITHOUT_CLASSIFICATION	4.331188524151885E-4	DESIGN
// todo: this might really even be moved into the cfg package and used as the basis for all things which are configurable.	DESIGN	0.8474460995738189	WITHOUT_CLASSIFICATION	0.1525539004261811	DESIGN
// todo : currently expects that the individual with expressions apply to the same sql table join. //      This may not be the case for joined-subclass where the property values //      might be coming from different tables in the joined hierarchy.  At some //      point we should expand this to support that capability.  However, that has //      some difficulties: //          1) the biggest is how to handle ORs when the individual comparisons are //              linked to different sql joins. //          2) here we would need to track each comparison individually, along with //              the join alias to which it applies and then pass that information //              back to the FromElement so it can pass it along to the JoinSequence	DESIGN	0.9904549272103585	WITHOUT_CLASSIFICATION	0.009545072789641462	DESIGN
// this function has a template -> restore output, apply the template and write the result out // TODO: Downcast to avoid using an interface?  Yuck.	DESIGN	0.5804336895677084	WITHOUT_CLASSIFICATION	0.4195663104322918	DESIGN
// at some point the generate phase needs to be moved out of here, // because a single object-level DML might spawn multiple SQL DML // command executions. // // Possible to just move the sql generation for dml stuff, but for // consistency-sake probably best to just move responsiblity for // the generation phase completely into the delegates // (QueryLoader/StatementExecutor) themselves.  Also, not sure why // QueryLoader currently even has a dependency on this at all; does // it need it?  Ideally like to see the walker itself given to the delegates directly...	DESIGN	0.8892844286304926	WITHOUT_CLASSIFICATION	0.11071557136950738	DESIGN
// get the right object from the list ... would it be easier to just call getEntity() ??	DESIGN	0.9588224469163884	WITHOUT_CLASSIFICATION	0.04117755308361151	DESIGN
// TODO should we just collect these like with the collections above?	DESIGN	0.8744599170156198	DESIGN	0.12554008298438016	WITHOUT_CLASSIFICATION
// todo : better to handle dynamic filters through implicit DynamicFilterParameterSpecification // see the discussion there in DynamicFilterParameterSpecification's javadocs as to why // it is currently not done that way.	DESIGN	0.9996967240630301	WITHOUT_CLASSIFICATION	3.0327593696998016E-4	DESIGN
/////////////////////////////////////////////////////////////////////////// // USED ONLY FOR REGRESSION TESTING!!!! // // todo : obviously get rid of all this junk ;) ///////////////////////////////////////////////////////////////////////////	DESIGN	0.9683145019167098	WITHOUT_CLASSIFICATION	0.031685498083290166	DESIGN
//create an index on the key columns??	DESIGN	0.9998903704243011	WITHOUT_CLASSIFICATION	1.0962957569897261E-4	DESIGN
//TODO: deprecated, remove eventually	DESIGN	0.8293587079351172	WITHOUT_CLASSIFICATION	0.1706412920648828	DESIGN
//create an index on the key columns??	DESIGN	0.9998903704243011	WITHOUT_CLASSIFICATION	1.0962957569897261E-4	DESIGN
//TODO: improve this hack!	DESIGN	0.8695262801859458	DESIGN	0.1304737198140542	WITHOUT_CLASSIFICATION
// inheritance cycle detection (paranoid check)	DESIGN	0.9999973877726084	WITHOUT_CLASSIFICATION	2.6122273916726387E-6	DESIGN
//TODO: remove use of instanceof!	DESIGN	0.9304598910062898	WITHOUT_CLASSIFICATION	0.06954010899371021	DESIGN
//shortcut	DESIGN	0.9992748514169779	WITHOUT_CLASSIFICATION	7.251485830220384E-4	DESIGN
//TODO: handle the case of a foreign key to something other than the pk	DESIGN	0.9811100766504771	WITHOUT_CLASSIFICATION	0.018889923349522927	DESIGN
// create an index on the key columns??	DESIGN	0.9999647724130485	WITHOUT_CLASSIFICATION	3.522758695147871E-5	DESIGN
// todo : remove	DESIGN	0.9992152813455017	WITHOUT_CLASSIFICATION	7.847186544982344E-4	DESIGN
// todo : remove	DESIGN	0.9992152813455017	WITHOUT_CLASSIFICATION	7.847186544982344E-4	DESIGN
// todo : remove	DESIGN	0.9992152813455017	WITHOUT_CLASSIFICATION	7.847186544982344E-4	DESIGN
// todo : throw exception?	DESIGN	0.9912616154758499	WITHOUT_CLASSIFICATION	0.008738384524150052	DESIGN
// todo : throw exception?  maybe warn if not the same?	DESIGN	0.9898201725217254	WITHOUT_CLASSIFICATION	0.01017982747827458	DESIGN
//TODO: make EntityPersister *not* depend on SessionFactoryImplementor //interface, if possible	DESIGN	0.9867448042530904	WITHOUT_CLASSIFICATION	0.013255195746909431	DESIGN
//TODO: is there a more elegant way than downcasting?	DESIGN	0.9700122287286972	WITHOUT_CLASSIFICATION	0.029987771271302838	DESIGN
// TODO: encapsulate the protected instance variables!	DESIGN	0.9917174638168532	WITHOUT_CLASSIFICATION	0.008282536183146684	DESIGN
// should indicate that we are processing an INSERT/UPDATE/DELETE // query with a subquery implied via a collection property // function. Here, we need to use the table name itself as the // qualification alias. // TODO : verify this works for all databases... // TODO : is this also the case in non-"indexed" scenarios?	DESIGN	0.5567057612881718	DESIGN	0.4432942387118281	WITHOUT_CLASSIFICATION
//TODO: copy/paste from insertRows()	DESIGN	0.8533149392805779	WITHOUT_CLASSIFICATION	0.14668506071942214	DESIGN
//TODO: copy/paste from recreate()	DESIGN	0.9658058655238803	WITHOUT_CLASSIFICATION	0.03419413447611973	DESIGN
//should this interface extend PropertyMapping?	DESIGN	0.9616565897196188	WITHOUT_CLASSIFICATION	0.03834341028038123	DESIGN
//ie. the subquery! yuck!	DESIGN	0.9998357569070305	WITHOUT_CLASSIFICATION	1.642430929693768E-4	DESIGN
//TODO: move to .sql package!!	DESIGN	0.9396863188994173	WITHOUT_CLASSIFICATION	0.06031368110058276	DESIGN
//TODO: code duplication with SingleTableEntityPersister	DESIGN	0.9886417800394541	WITHOUT_CLASSIFICATION	0.011358219960545863	DESIGN
// TODO: It would be really, really nice to use this to also model components!	DESIGN	0.9994945936232986	DESIGN	5.054063767014523E-4	WITHOUT_CLASSIFICATION
//TODO: *two* hashmap lookups here is one too many...	DESIGN	0.9970459554721092	WITHOUT_CLASSIFICATION	0.002954044527890869	DESIGN
//TODO: code duplication with JoinedSubclassEntityPersister	DESIGN	0.9840333425563214	WITHOUT_CLASSIFICATION	0.015966657443678686	DESIGN
//perhaps not really necessary...	DESIGN	0.9990732889072911	WITHOUT_CLASSIFICATION	9.26711092708866E-4	DESIGN
// NOTE: this assumes something about how propertySelectFragment is implemented by the subclass! // was toUnqotedAliasStrings( getIdentiferColumnNames() ) before - now tried // to remove that unqoting and missing aliases..	DESIGN	0.9734904000591401	WITHOUT_CLASSIFICATION	0.02650959994085987	DESIGN
// NOTE: this assumes something about how propertySelectFragment is implemented by the subclass! // was toUnqotedAliasStrings( getdiscriminatorColumnName() ) before - now tried // to remove that unqoting and missing aliases..	DESIGN	0.975075100597554	WITHOUT_CLASSIFICATION	0.02492489940244598	DESIGN
//TODO: should we use SELECT .. FOR UPDATE?	DESIGN	0.8501741595148913	DESIGN	0.1498258404851087	WITHOUT_CLASSIFICATION
//TODO: optimize this better!	DESIGN	0.6547934865909291	DESIGN	0.3452065134090709	WITHOUT_CLASSIFICATION
//TODO: should we allow suffixes on these ?	DESIGN	0.6929258424827361	WITHOUT_CLASSIFICATION	0.30707415751726386	DESIGN
//This is really ugly, but necessary:	DESIGN	0.991896290892163	WITHOUT_CLASSIFICATION	0.008103709107837061	DESIGN
//ugly little workaround for fact that createUniqueKeyLoaders() does not handle component properties	DESIGN	0.5732097035752866	WITHOUT_CLASSIFICATION	0.42679029642471344	DESIGN
//TODO: disable batch loading if lockMode > READ?	DESIGN	0.7217169846240743	WITHOUT_CLASSIFICATION	0.27828301537592576	DESIGN
// append the SQL to return the generated identifier //TODO: suck into Insert	DESIGN	0.9999414602881089	WITHOUT_CLASSIFICATION	5.853971189115796E-5	DESIGN
//TODO: I am not so sure about the exception handling in this bit!	DESIGN	0.7734811990570387	DESIGN	0.22651880094296115	WITHOUT_CLASSIFICATION
//TODO: is this really necessary????	DESIGN	0.680128750473839	DESIGN	0.31987124952616086	WITHOUT_CLASSIFICATION
//TODO: move to .sql package, and refactor with similar things!	DESIGN	0.82919271246507	WITHOUT_CLASSIFICATION	0.1708072875349299	DESIGN
//TODO: implement functionality //  this might be painful to do here, as the "join post processing" for //  the subquery has already been performed (meaning that for //  theta-join dialects, the join conditions have already been moved //  over to the where clause).  A "simple" solution here might to //  perform "join post processing" once for the entire query (including //  any subqueries) at one fell swoop	DESIGN	0.998071620312233	WITHOUT_CLASSIFICATION	0.0019283796877669784	DESIGN
// todo : this eventually needs to be removed	DESIGN	0.980973179379661	WITHOUT_CLASSIFICATION	0.019026820620339044	DESIGN
//kinda ugly, but needed for collections with a "." node mapping	DESIGN	0.9999940922286459	WITHOUT_CLASSIFICATION	5.9077713541061955E-6	DESIGN
//is this ok?	DESIGN	0.9904344207916933	WITHOUT_CLASSIFICATION	0.00956557920830667	DESIGN
//TODO: perhaps this should be some other RuntimeException...	DESIGN	0.779766425932799	DESIGN	0.220233574067201	WITHOUT_CLASSIFICATION
//TODO: make this a bit nicer	DESIGN	0.6730461764754536	DESIGN	0.3269538235245463	WITHOUT_CLASSIFICATION
//Yuck:	DESIGN	0.997217251059365	WITHOUT_CLASSIFICATION	0.0027827489406351278	DESIGN
//TODO: we should provide some way to get keys of collection of statistics to make it easier to retrieve from a GUI perspective	DESIGN	0.9364745440746258	DESIGN	0.06352545592537412	WITHOUT_CLASSIFICATION
/**	DESIGN	0.9966739556456018	WITHOUT_CLASSIFICATION	0.003326044354398164	DESIGN
// TODO : will need reference to session factory to fully complete HHH-1907	DESIGN	0.607852436239388	WITHOUT_CLASSIFICATION	0.392147563760612	DESIGN
//TODO: currently keeps Getters and Setters (instead of PropertyAccessors) because of the way getGetter() and getSetter() are implemented currently; yuck!	DESIGN	0.6198603475651394	WITHOUT_CLASSIFICATION	0.38013965243486075	DESIGN
//TODO: redesign how PropertyAccessors are acquired...	DESIGN	0.7474973153919569	WITHOUT_CLASSIFICATION	0.2525026846080432	DESIGN
// todo : YUCK!!!	DESIGN	0.9995462771134856	WITHOUT_CLASSIFICATION	4.5372288651437725E-4	DESIGN
// TODO : YUCK!!!  fix after HHH-1907 is complete	DESIGN	0.794171964398669	WITHOUT_CLASSIFICATION	0.20582803560133087	DESIGN
//TODO: need to make the majority of this functionality into a top-level support class for custom impl support	DESIGN	0.8943166287816644	WITHOUT_CLASSIFICATION	0.10568337121833556	DESIGN
//TODO: design new lifecycle for ProxyFactory	DESIGN	0.9964485344196047	WITHOUT_CLASSIFICATION	0.003551465580395302	DESIGN
//TODO: would be nice to handle proxy classes elegantly!	DESIGN	0.897130069714808	DESIGN	0.10286993028519205	WITHOUT_CLASSIFICATION
// TODO: copy/paste from ManyToOneType	DESIGN	0.7737929200721174	WITHOUT_CLASSIFICATION	0.22620707992788258	DESIGN
//TODO: should this be Session.instantiate(Persister, ...)?	DESIGN	0.6831451720559228	DESIGN	0.3168548279440771	WITHOUT_CLASSIFICATION
//TODO: this is a bit arbitrary, expose a switch to the user?	DESIGN	0.6086434767025387	WITHOUT_CLASSIFICATION	0.3913565232974613	DESIGN
//TODO: implement caching?! proxies?!	DESIGN	0.9952471779928657	WITHOUT_CLASSIFICATION	0.004752822007134371	DESIGN
//TODO: is this right??	DESIGN	0.8705034465525502	DESIGN	0.1294965534474498	WITHOUT_CLASSIFICATION
// is this really necessary?	DESIGN	0.981779245481111	WITHOUT_CLASSIFICATION	0.018220754518889052	DESIGN
//TODO: move these to a new JoinableType abstract class, //extended by EntityType and PersistentCollectionType:	DESIGN	0.9996137904358037	WITHOUT_CLASSIFICATION	3.862095641963498E-4	DESIGN
// TODO: this is very suboptimal for some subclasses (namely components), // since it does not take advantage of two-phase-load	DESIGN	0.8083906600286401	DESIGN	0.19160933997135987	WITHOUT_CLASSIFICATION
// worrying about proxies is perhaps a little bit of overkill here...	DESIGN	0.9989015629806658	WITHOUT_CLASSIFICATION	0.0010984370193341509	DESIGN
// NOTE VERY HACKISH WORKAROUND!! // TODO: Fix this so it will work for non-POJO entity mode	DESIGN	0.9954618715392685	DESIGN	0.004538128460731502	WITHOUT_CLASSIFICATION
// TODO: Fix this so it will work for non-POJO entity mode	DESIGN	0.8788458333965602	DESIGN	0.1211541666034398	WITHOUT_CLASSIFICATION
// We would probably refactor to have LogicParser (builds a tree of simple // expressions connected by and, or, not), ExpressionParser (translates // from OO terms like foo, foo.Bar, foo.Bar.Baz to SQL terms like // FOOS.ID, FOOS.BAR_ID, etc) and PathExpressionParser (which does much // the same thing it does now)	DESIGN	0.9904297808789649	WITHOUT_CLASSIFICATION	0.00957021912103505	DESIGN
//TODO: this is a little inefficient, don't need to do a whole //      deep replaceElements() call	DESIGN	0.6836880302626872	DESIGN	0.31631196973731285	WITHOUT_CLASSIFICATION
//workaround for WebLogic	DESIGN	0.5160901413440232	WITHOUT_CLASSIFICATION	0.48390985865597674	DESIGN
//TODO: this dependency is kinda Bad	DESIGN	0.6340836563761959	DESIGN	0.3659163436238042	WITHOUT_CLASSIFICATION
//ick!	DESIGN	0.9983274924541409	WITHOUT_CLASSIFICATION	0.0016725075458591237	DESIGN
// short cut check...	DESIGN	0.9998869435131594	WITHOUT_CLASSIFICATION	1.1305648684053982E-4	DESIGN
// todo : move to StringHelper?	DESIGN	0.9990764052017476	WITHOUT_CLASSIFICATION	9.235947982523549E-4	DESIGN
//yukky! Don't you have subclasses for that! //TODO race conditions can happen here	DESIGN	0.8808051880737965	WITHOUT_CLASSIFICATION	0.11919481192620357	DESIGN
//TODO: We probably should have a StatisticsNotPublishedException, to make it clean	DESIGN	0.5564216898768011	DESIGN	0.4435783101231988	WITHOUT_CLASSIFICATION
// FIXME hack to work around fact that calling // Node added = root.addChild( fqn ); doesn't  // properly set the version on the node	DESIGN	0.9723074215563545	WITHOUT_CLASSIFICATION	0.027692578443645446	DESIGN
// TODO: I considered validating the presence of the TS cache here, // but decided to defer unti getQueryCacheInstance() in case the  // cache is never actually used	DESIGN	0.8727110409289763	WITHOUT_CLASSIFICATION	0.1272889590710236	DESIGN
//need to do that here rather than in the save event listener to let //the post insert events to have a id-filled entity when IDENTITY is used (EJB3)	DESIGN	0.9999986946703844	WITHOUT_CLASSIFICATION	1.3053296156330493E-6	DESIGN
//TODO: simply remove this override //      if we fix the above todos	DESIGN	0.7789382435258004	WITHOUT_CLASSIFICATION	0.22106175647419954	DESIGN
// This, is used by SessionFactoryImpl to hand to the generated SessionImpl; // was the only reason I could see that we cannot just use null as // Settings.cacheProvider	DESIGN	0.9977027412434476	WITHOUT_CLASSIFICATION	0.002297258756552285	DESIGN
// this is done here 'cos we might only know the type here (ugly!) // TODO: improve this a lot:	DESIGN	0.9811816631621505	DESIGN	0.018818336837849496	WITHOUT_CLASSIFICATION
// todo : would love to have this work on a notification basis //    where the successful binding of an entity/subclass would //    emit a notification which the extendsQueue entries could //    react to...	DESIGN	0.789259469014623	WITHOUT_CLASSIFICATION	0.21074053098537704	DESIGN
// TODO : not sure the best way to handle this. // The non-performant way :	DESIGN	0.7569375260752546	WITHOUT_CLASSIFICATION	0.24306247392474553	DESIGN
// would be better to use the element-type to determine // whether the old and the new are equal here; the problem being // we do not necessarily have access to the element type in all // cases	DESIGN	0.9924218221213291	WITHOUT_CLASSIFICATION	0.007578177878670843	DESIGN
// This next bit is to allow for both unsaved-value="negative" // and for "older" behavior where version number did not get // seeded if it was already set in the object // TODO: shift it into unsaved-value strategy	DESIGN	0.9991922585172758	WITHOUT_CLASSIFICATION	8.077414827241927E-4	DESIGN
// merges don't cascade to uninitialized collections //	DESIGN	0.9999797513061598	WITHOUT_CLASSIFICATION	2.0248693840214866E-5	DESIGN
// TODO: an alternative is to check if the owner has changed; if it hasn't then // return collection.getOwner()	DESIGN	0.9965541610716964	WITHOUT_CLASSIFICATION	0.0034458389283037404	DESIGN
//it is possible that the tree-walking in OuterJoinLoader can get to //an association defined by a subclass, in which case the property-ref //might refer to a property defined on a subclass of the current class //in this case, the table name is not known - this temporary solution  //assumes that the property-ref refers to a property of the subclass //table that the association belongs to (a reasonable guess) //TODO: fix this, add: OuterJoinLoadable.getSubclassPropertyTableName(String propertyName)	DESIGN	0.9658901024200628	DESIGN	0.034109897579937085	WITHOUT_CLASSIFICATION
// this only works because collection entries are kept in a sequenced // map by persistence context (maybe we should do like entities and // keep a separate sequences set...) //TODO: calling entrySet on an IdentityMap is SLOW!!	DESIGN	0.9197671139402056	WITHOUT_CLASSIFICATION	0.0802328860597944	DESIGN
// important, to account for newly saved entities in query // todo : some kind of check for new status...	DESIGN	0.9998520900497668	WITHOUT_CLASSIFICATION	1.479099502331172E-4	DESIGN
// brand new collection //TODO: or an array!! we can't lock objects with arrays now??	DESIGN	0.9996653521720588	WITHOUT_CLASSIFICATION	3.3464782794132914E-4	DESIGN
//TODO: if object was an uninitialized proxy, this is inefficient, //      resulting in two SQL selects	DESIGN	0.9673769479902588	WITHOUT_CLASSIFICATION	0.032623052009741194	DESIGN
//before cascade! //TODO: should this be Session.instantiate(Persister, ...)?	DESIGN	0.6844607924872929	DESIGN	0.31553920751270714	WITHOUT_CLASSIFICATION
// TODO : absolutely no usages of this constructor form; can it go away?	DESIGN	0.9985600029844525	DESIGN	0.0014399970155474905	WITHOUT_CLASSIFICATION
// todo : need to find a clean way to handle the "event source" role // a seperate classs responsible for generating/dispatching events just duplicates most of the Session methods... // passing around seperate reto interceptor, factory, actionQueue, and persistentContext is not manageable...	DESIGN	0.9992271512487514	WITHOUT_CLASSIFICATION	7.728487512486893E-4	DESIGN
// todo : remove	DESIGN	0.9992152813455017	WITHOUT_CLASSIFICATION	7.847186544982344E-4	DESIGN
//aliasRefNode.resolve( false, false, aliasRefNode.getText() ); //TODO: is it kosher to do it here? //TODO: is it kosher to do it here?	DESIGN	0.7222827176155835	WITHOUT_CLASSIFICATION	0.2777172823844166	DESIGN
// No explicit select expression; render the id and properties // projection lists for every persister in the from clause into // a single 'token node'. //TODO: the only reason we need this stuff now is collection filters, //      we should get rid of derived select clause completely!	DESIGN	0.985067331155278	WITHOUT_CLASSIFICATION	0.01493266884472207	DESIGN
// TODO : an optimization here would be to consider cascade deletes and not gen those delete statements; //      the difficulty is the ordering of the tables here vs the cascade attributes on the persisters -> //          the table info gotten here should really be self-contained (i.e., a class representation //          defining all the needed attributes), then we could then get an array of those	DESIGN	0.8820996951884047	DESIGN	0.11790030481159536	WITHOUT_CLASSIFICATION
// TODO: get SQL rendering out of here, create an AST for the join expressions. // Use the SQL generator grammar to generate the SQL text for the index expression.	DESIGN	0.9652065767842214	WITHOUT_CLASSIFICATION	0.03479342321577864	DESIGN
// TODO : this really needs to be delayed unitl after we definitively know all node types // where this is currently a problem is parameters for which where we cannot unequivocally // resolve an expected type	DESIGN	0.9888733427657578	DESIGN	0.01112665723424218	WITHOUT_CLASSIFICATION
// TODO: Figure out a better way to get the FROM elements in a proper tree structure. // If this is not the destination of a many-to-many, add it as a child of the origin.	DESIGN	0.6960422266567228	DESIGN	0.3039577733432773	WITHOUT_CLASSIFICATION
// work around that crazy issue where the tree contains // "empty" FromElements (no text); afaict, this is caused // by FromElementFactory.createCollectionJoin()	DESIGN	0.994289750545832	WITHOUT_CLASSIFICATION	0.005710249454167918	DESIGN
//TODO: this class does too many things! we need a different //kind of path expression parser for each of the diffferent //ways in which path expressions can occur	DESIGN	0.9287062991532911	WITHOUT_CLASSIFICATION	0.07129370084670893	DESIGN
//real hacky... // used to count the nesting of parentheses	DESIGN	0.9998826055609409	WITHOUT_CLASSIFICATION	1.1739443905907163E-4	DESIGN
// TODO : would be really nice to cache the spec on the query-def so as to not have to re-calc the hash; // currently not doable though because of the resultset-ref stuff...	DESIGN	0.9916190899709169	DESIGN	0.008380910029083092	WITHOUT_CLASSIFICATION
//for arrays, we should end the collection load before resolving //the entities, since the actual array instances are not instantiated //during loading //TODO: or we could do this polymorphically, and have two //      different operations implemented differently for arrays	DESIGN	0.9894833509022006	WITHOUT_CLASSIFICATION	0.010516649097799383	DESIGN
// polymorphism not really handled completely correctly, // perhaps...well, actually its ok, assuming that the // entity name used in the lookup is the same as the // the one used here, which it will be	DESIGN	0.9998554516060516	WITHOUT_CLASSIFICATION	1.4454839394839323E-4	DESIGN
// TODO: should "record" how many properties we have reffered to - and if we  //       don't get'em'all we throw an exception! Way better than trial and error ;)	DESIGN	0.9759452002811125	DESIGN	0.024054799718887458	WITHOUT_CLASSIFICATION
// VERY IMPORTANT!!!! - This class needs to be free of any static references // to any CGLIB or Javassist classes.  Otherwise, users will always need both // on their classpaths no matter which (if either) they use. // // Another option here would be to remove the Hibernate.isPropertyInitialized() // method and have the users go through the SessionFactory to get this information.	DESIGN	0.8518620866768757	DESIGN	0.14813791332312426	WITHOUT_CLASSIFICATION
// TODO: is it really neceassry to provide Configuration to CollectionPersisters ? Should it not be enough with associated class ? // or why does EntityPersister's not get access to configuration ? // // The only reason I could see that Configuration gets passed to collection persisters // is so that they can look up the dom4j node name of the entity element in case // no explicit node name was applied at the collection element level.  Are you kidding me? // Trivial to fix then.  Just store and expose the node name on the entity persister // (which the collection persister looks up anyway via other means...).	DESIGN	0.8947195949733223	WITHOUT_CLASSIFICATION	0.10528040502667768	DESIGN
//for backward compatibility, allow a set with no not-null  //element columns, using all columns in the row locater SQL //TODO: create an implicit not null constraint on all cols?	DESIGN	0.994612047843737	WITHOUT_CLASSIFICATION	0.005387952156262967	DESIGN
//SPACES //TODO: i'm not sure, but perhaps we should exclude //      abstract denormalized tables?	DESIGN	0.9764199890830384	WITHOUT_CLASSIFICATION	0.02358001091696169	DESIGN
//workaround, for backward compatibility of sets with no //not-null columns, assume all columns are used in the //row locator SQL	DESIGN	0.8402329648797205	WITHOUT_CLASSIFICATION	0.1597670351202795	DESIGN
//note that this method could easily be moved up to BasicEntityPersister, //if we ever needed to reuse it from other subclasses	DESIGN	0.9865492180754757	WITHOUT_CLASSIFICATION	0.013450781924524313	DESIGN
//index += getPropertyColumnSpan( i ); //TODO:  this is kinda slow...	DESIGN	0.6949606254750847	WITHOUT_CLASSIFICATION	0.3050393745249153	DESIGN
//TODO: need some caching scheme? really comes down to decision  //      regarding amount of state (if any) kept on PropertyAccessors	DESIGN	0.8011732152111909	DESIGN	0.19882678478880902	WITHOUT_CLASSIFICATION
// TODO: here is why we need to make bytecode provider global :( // TODO : again, fix this after HHH-1907 is complete	DESIGN	0.6236124431216087	DESIGN	0.3763875568783912	WITHOUT_CLASSIFICATION
//TODO: Yuck! This is not quite good enough, it's a quick //hack around the problem of having a to-one association //that refers to an embedded component:	DESIGN	0.892826623349955	DESIGN	0.10717337665004496	WITHOUT_CLASSIFICATION
// for DOM4J "collections" only // TODO: it would be better if this was done at the higher level by Printer	DESIGN	0.694477426133668	DESIGN	0.3055225738663319	WITHOUT_CLASSIFICATION
// would be great to move all this below here into another method that could also be used // from the new scrolling stuff. // // Would need to change the way the max-row stuff is handled (i.e. behind an interface) so // that I could do the control breaking at the means to know when to stop	DESIGN	0.9829125294433931	WITHOUT_CLASSIFICATION	0.01708747055660681	DESIGN
//TODO: can we *always* use the "null property" approach for everything?	DESIGN	0.9752238535777656	WITHOUT_CLASSIFICATION	0.024776146422234423	DESIGN
//polymorphism comment above	DESIGN	0.9987849165117486	WITHOUT_CLASSIFICATION	0.0012150834882514447	DESIGN
// some messy, complex stuff here, since createCriteria() can take an // aliased path, or a path rooted at the creating criteria instance	DESIGN	0.9999978771675206	WITHOUT_CLASSIFICATION	2.1228324792991085E-6	DESIGN
//TODO: really bad, evil hack to fix!!!	DESIGN	0.6537674315047689	DESIGN	0.34623256849523115	WITHOUT_CLASSIFICATION
// ugly hack for cases like "elements(foo.bar.collection)" // (multi-part path expression ending in elements or indices)	DESIGN	0.999945584214688	WITHOUT_CLASSIFICATION	5.4415785311872836E-5	DESIGN
// try block is a hack around fact that currently tuplizers are not // given the opportunity to resolve a subclass entity name.  this // allows the (we assume custom) interceptor the ability to // influence this decision if we were not able to based on the // given entityName	DESIGN	0.9909833031779395	WITHOUT_CLASSIFICATION	0.009016696822060506	DESIGN
/////////////////////////////////////////////////////////////////////// // HACK ALERT !!!!!!!!!!!!!!!!!!!!!!!!!!!! // Attempt to work around "ghost" ImpliedFromElements that occasionally // show up between the actual things being joined.  This consistently // occurs from index nodes (at least against many-to-many).  Not sure // if there are other conditions // // Essentially, look-ahead to the next FromElement that actually // writes something to the SQL	DESIGN	0.77766779767658	WITHOUT_CLASSIFICATION	0.22233220232341996	DESIGN
//init the table here instead of earlier, so that we can get a quoted table name //TODO: would it be better to simply pass the qualified table name, instead of //      splitting it up into schema/catalog/table names	DESIGN	0.6749306609144701	WITHOUT_CLASSIFICATION	0.3250693390855299	DESIGN
// TODO : would be great to have a Mapping#hasNonIdentifierPropertyNamedId method // I don't believe that Mapping#getReferencedPropertyType accounts for the identifier property; so // if it returns for a property named 'id', then we should have a non-id field named id	DESIGN	0.8114961194966028	DESIGN	0.18850388050339714	WITHOUT_CLASSIFICATION
//TODO: is this really necessary????	DESIGN	0.680128750473839	DESIGN	0.31987124952616086	WITHOUT_CLASSIFICATION
//TODO: ideally we need the construction of PropertyAccessor to take the following: //      1) EntityMode //      2) EntityMode-specific data (i.e., the classname for pojo entities) //      3) Property-specific data based on the EntityMode (i.e., property-name or dom4j-node-name) // The easiest way, with the introduction of the new runtime-metamodel classes, would be the // the following predicates: //      1) PropertyAccessorFactory.getPropertyAccessor() takes references to both a //          org.hibernate.metadata.EntityModeMetadata and org.hibernate.metadata.Property //      2) What is now termed a "PropertyAccessor" stores any values needed from those two //          pieces of information //      3) Code can then simply call PropertyAccess.getGetter() with no parameters; likewise with //          PropertyAccessor.getSetter()	DESIGN	0.9029973808663013	DESIGN	0.09700261913369873	WITHOUT_CLASSIFICATION
//TODO: this is temporary in that the end result will probably not take a Property reference per-se.	DESIGN	0.688099314345119	DESIGN	0.311900685654881	WITHOUT_CLASSIFICATION
// todo : this eventually needs to be removed	DESIGN	0.980973179379661	WITHOUT_CLASSIFICATION	0.019026820620339044	DESIGN
//TODO: make this a bit nicer	DESIGN	0.6730461764754536	DESIGN	0.3269538235245463	WITHOUT_CLASSIFICATION
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.9142272136575497	WITHOUT_CLASSIFICATION	0.08577278634245024	DESIGN
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.9142272136575497	WITHOUT_CLASSIFICATION	0.08577278634245024	DESIGN
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.9142272136575497	WITHOUT_CLASSIFICATION	0.08577278634245024	DESIGN
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.9142272136575497	WITHOUT_CLASSIFICATION	0.08577278634245024	DESIGN
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.9142272136575497	WITHOUT_CLASSIFICATION	0.08577278634245024	DESIGN
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.9142272136575497	WITHOUT_CLASSIFICATION	0.08577278634245024	DESIGN
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.9142272136575497	WITHOUT_CLASSIFICATION	0.08577278634245024	DESIGN
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.9142272136575497	WITHOUT_CLASSIFICATION	0.08577278634245024	DESIGN
/**     * FIXME Per the RegionFactory class Javadoc, this constructor version     * should not be necessary.     *      * @param props The configuration properties     */	DESIGN	0.9985713925034047	WITHOUT_CLASSIFICATION	0.001428607496595314	DESIGN
/**     * FIXME Per the RegionFactory class Javadoc, this constructor version     * should not be necessary.     *      * @param props The configuration properties     */	DESIGN	0.9985713925034047	WITHOUT_CLASSIFICATION	0.001428607496595314	DESIGN
/**     * FIXME Per the RegionFactory class Javadoc, this constructor version     * should not be necessary.     *      * @param props The configuration properties     */	DESIGN	0.9985713925034047	WITHOUT_CLASSIFICATION	0.001428607496595314	DESIGN
// TODO : probably better to calculate these and pass them in, as it'll be more performant	DESIGN	0.7253716552370371	DESIGN	0.274628344762963	WITHOUT_CLASSIFICATION
