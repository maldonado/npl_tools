//test out the optimizer:	WITHOUT_CLASSIFICATION	0.9998837082823888	WITHOUT_CLASSIFICATION	1.1629171761114268E-4	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.9999721494320568	WITHOUT_CLASSIFICATION	2.785056794318593E-5	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.9999721494320568	WITHOUT_CLASSIFICATION	2.785056794318593E-5	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.9999721494320568	WITHOUT_CLASSIFICATION	2.785056794318593E-5	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.9999721494320568	WITHOUT_CLASSIFICATION	2.785056794318593E-5	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.9999721494320568	WITHOUT_CLASSIFICATION	2.785056794318593E-5	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.9999721494320568	WITHOUT_CLASSIFICATION	2.785056794318593E-5	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.9999721494320568	WITHOUT_CLASSIFICATION	2.785056794318593E-5	DESIGN
// return	WITHOUT_CLASSIFICATION	0.9999788674127507	WITHOUT_CLASSIFICATION	2.1132587249354898E-5	DESIGN
// return	WITHOUT_CLASSIFICATION	0.9999788674127507	WITHOUT_CLASSIFICATION	2.1132587249354898E-5	DESIGN
/* | this | bean | args | raw bean | */	WITHOUT_CLASSIFICATION	0.9999559389160292	WITHOUT_CLASSIFICATION	4.4061083970858306E-5	DESIGN
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999969827615703	WITHOUT_CLASSIFICATION	3.017238429515216E-6	DESIGN
// astore 4 // store the raw bean	WITHOUT_CLASSIFICATION	0.9999863580059575	WITHOUT_CLASSIFICATION	1.3641994042545861E-5	DESIGN
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999886112199243	WITHOUT_CLASSIFICATION	1.1388780075746777E-5	DESIGN
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999886112199243	WITHOUT_CLASSIFICATION	1.1388780075746777E-5	DESIGN
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.9999995934112316	WITHOUT_CLASSIFICATION	4.065887684141169E-7	DESIGN
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999928987851697	WITHOUT_CLASSIFICATION	7.1012148302324535E-6	DESIGN
// putfield // new value of the field	WITHOUT_CLASSIFICATION	0.9999922619200005	WITHOUT_CLASSIFICATION	7.738079999562296E-6	DESIGN
// reference type	WITHOUT_CLASSIFICATION	0.9999958654834828	WITHOUT_CLASSIFICATION	4.13451651722436E-6	DESIGN
// double	WITHOUT_CLASSIFICATION	0.9999178933239308	WITHOUT_CLASSIFICATION	8.210667606919503E-5	DESIGN
// double	WITHOUT_CLASSIFICATION	0.9999178933239308	WITHOUT_CLASSIFICATION	8.210667606919503E-5	DESIGN
// long	WITHOUT_CLASSIFICATION	0.9999747894511817	WITHOUT_CLASSIFICATION	2.52105488182616E-5	DESIGN
// just decrement the lock, don't recache // (we don't know which transaction won)	WITHOUT_CLASSIFICATION	0.9999256137140712	WITHOUT_CLASSIFICATION	7.43862859287861E-5	DESIGN
// decode row selection...	WITHOUT_CLASSIFICATION	0.999380622948211	WITHOUT_CLASSIFICATION	6.193770517890332E-4	DESIGN
//disassembled state gets put in a new array (we write to cache by value!)	WITHOUT_CLASSIFICATION	0.9999441615254316	WITHOUT_CLASSIFICATION	5.5838474568372246E-5	DESIGN
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999033410742743	WITHOUT_CLASSIFICATION	9.665892572577985E-5	DESIGN
// CHECK	WITHOUT_CLASSIFICATION	0.9998452721558182	WITHOUT_CLASSIFICATION	1.5472784418184648E-4	DESIGN
// ROW ID	WITHOUT_CLASSIFICATION	0.9999449813895215	WITHOUT_CLASSIFICATION	5.501861047860052E-5	DESIGN
// COMPOSITE-ID	WITHOUT_CLASSIFICATION	0.9998841714143415	WITHOUT_CLASSIFICATION	1.1582858565843287E-4	DESIGN
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9998862684915977	WITHOUT_CLASSIFICATION	1.1373150840242492E-4	DESIGN
/*	WITHOUT_CLASSIFICATION	0.9986553605278979	WITHOUT_CLASSIFICATION	0.0013446394721020986	DESIGN
// DYNAMIC INSERT	WITHOUT_CLASSIFICATION	0.9999100632789694	WITHOUT_CLASSIFICATION	8.993672103062171E-5	DESIGN
// PERSISTER	WITHOUT_CLASSIFICATION	0.999860511409401	WITHOUT_CLASSIFICATION	1.3948859059895803E-4	DESIGN
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9995206377739443	WITHOUT_CLASSIFICATION	4.7936222605569667E-4	DESIGN
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9998802076712581	WITHOUT_CLASSIFICATION	1.1979232874185692E-4	DESIGN
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9998802076712581	WITHOUT_CLASSIFICATION	1.1979232874185692E-4	DESIGN
// generated properties can *never* be insertable...	WITHOUT_CLASSIFICATION	0.9999939313433986	WITHOUT_CLASSIFICATION	6.068656601369233E-6	DESIGN
// TABLE	WITHOUT_CLASSIFICATION	0.99944435427749	WITHOUT_CLASSIFICATION	5.556457225099569E-4	DESIGN
//by default, natural-ids are "immutable" (constant)	WITHOUT_CLASSIFICATION	0.9999993182689746	WITHOUT_CLASSIFICATION	6.817310254085443E-7	DESIGN
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999926813351157	WITHOUT_CLASSIFICATION	7.318664884332837E-6	DESIGN
// we found some extends attributes referencing entities which were // not already processed.  here we need to locate all entity-names // and class-names contained in this document itself, making sure // that these get removed from the extendz list such that only // extends names which require us to delay processing (i.e. // external to this document and not yet processed) are contained // in the returned result	WITHOUT_CLASSIFICATION	0.9315916142741653	WITHOUT_CLASSIFICATION	0.06840838572583473	DESIGN
/**	WITHOUT_CLASSIFICATION	0.998151460456067	WITHOUT_CLASSIFICATION	0.0018485395439330262	DESIGN
//	WITHOUT_CLASSIFICATION	0.9997835908563089	WITHOUT_CLASSIFICATION	2.164091436910978E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9997835908563089	WITHOUT_CLASSIFICATION	2.164091436910978E-4	DESIGN
/**	WITHOUT_CLASSIFICATION	0.998151460456067	WITHOUT_CLASSIFICATION	0.0018485395439330262	DESIGN
//	WITHOUT_CLASSIFICATION	0.9997835908563089	WITHOUT_CLASSIFICATION	2.164091436910978E-4	DESIGN
// If close() is called, guarantee unbind()	WITHOUT_CLASSIFICATION	0.9999151006720246	WITHOUT_CLASSIFICATION	8.489932797547919E-5	DESIGN
// if a ThreadLocalSessionContext-bound session happens to get // serialized, to be completely correct, we need to make sure // that unbinding of that session occurs.	WITHOUT_CLASSIFICATION	0.9999257106341334	WITHOUT_CLASSIFICATION	7.428936586658093E-5	DESIGN
// on the inverse, it makes sense that if a ThreadLocalSessionContext- // bound session then gets deserialized to go ahead and re-bind it to // the ThreadLocalSessionContext session map.	WITHOUT_CLASSIFICATION	0.999996263977575	WITHOUT_CLASSIFICATION	3.736022424845038E-6	DESIGN
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9998130410999274	WITHOUT_CLASSIFICATION	1.8695890007250203E-4	DESIGN
// 60 second lock timeout	WITHOUT_CLASSIFICATION	0.9999084509161185	WITHOUT_CLASSIFICATION	9.154908388150252E-5	DESIGN
// OptimisticCache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999829505346494	WITHOUT_CLASSIFICATION	1.7049465350665597E-5	DESIGN
// Cache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999991500690087	WITHOUT_CLASSIFICATION	8.499309913020486E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.9997835908563089	WITHOUT_CLASSIFICATION	2.164091436910978E-4	DESIGN
// do the put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9941680516012148	WITHOUT_CLASSIFICATION	0.005831948398785222	DESIGN
//ignore!	WITHOUT_CLASSIFICATION	0.9999649536301272	WITHOUT_CLASSIFICATION	3.5046369872806045E-5	DESIGN
// tree cache in optimistic mode seems to have as very difficult // time with remove calls on non-existent nodes (NPEs)...	WITHOUT_CLASSIFICATION	0.999996936248181	WITHOUT_CLASSIFICATION	3.0637518191296757E-6	DESIGN
//60 seconds	WITHOUT_CLASSIFICATION	0.9999566027334148	WITHOUT_CLASSIFICATION	4.339726658529189E-5	DESIGN
//ignore!	WITHOUT_CLASSIFICATION	0.9999649536301272	WITHOUT_CLASSIFICATION	3.5046369872806045E-5	DESIGN
//60 seconds	WITHOUT_CLASSIFICATION	0.9999566027334148	WITHOUT_CLASSIFICATION	4.339726658529189E-5	DESIGN
//do the failfast put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9996176457828341	WITHOUT_CLASSIFICATION	3.823542171659271E-4	DESIGN
// NOTE : evict() operates locally only (i.e., does not propogate // to any other nodes in the potential cluster).  This is // exactly what is needed when we destroy() here; destroy() is used // as part of the process of shutting down a SessionFactory; thus // these removals should not be propogated	WITHOUT_CLASSIFICATION	0.6084703502879804	WITHOUT_CLASSIFICATION	0.39152964971201965	DESIGN
//    protected RegionRootListener listener;	WITHOUT_CLASSIFICATION	0.9999893649687009	WITHOUT_CLASSIFICATION	1.0635031299109826E-5	DESIGN
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999969687476741	WITHOUT_CLASSIFICATION	3.0312523259101414E-6	DESIGN
// If we've been blocking for the mutex, perhaps another // thread has already reestablished the root. // In case the node was reestablised via replication, confirm it's  // marked "resident" (a status which doesn't replicate)	WITHOUT_CLASSIFICATION	0.9966355035240964	WITHOUT_CLASSIFICATION	0.003364496475903508	DESIGN
// For pessimistic locking, we just want to toss out our ref // to any old invalid root node and get the latest (may be null)            	WITHOUT_CLASSIFICATION	0.9991366979647073	WITHOUT_CLASSIFICATION	8.633020352927902E-4	DESIGN
// The rest only matters for optimistic locking, where we // need to establish the proper data version on the region root	WITHOUT_CLASSIFICATION	0.9983767773232121	WITHOUT_CLASSIFICATION	0.0016232226767879847	DESIGN
// Don't hold a transactional lock for this 	WITHOUT_CLASSIFICATION	0.9999883158387783	WITHOUT_CLASSIFICATION	1.1684161221577331E-5	DESIGN
// Make sure the root node for the region exists and  // has a DataVersion that never complains	WITHOUT_CLASSIFICATION	0.9999999143815649	WITHOUT_CLASSIFICATION	8.561843505296162E-8	DESIGN
// Never evict this node	WITHOUT_CLASSIFICATION	0.9999475693080936	WITHOUT_CLASSIFICATION	5.2430691906439205E-5	DESIGN
// Fix up the resident flag	WITHOUT_CLASSIFICATION	0.9998570797288616	WITHOUT_CLASSIFICATION	1.4292027113845977E-4	DESIGN
// 60 seconds	WITHOUT_CLASSIFICATION	0.9999849825984047	WITHOUT_CLASSIFICATION	1.501740159527007E-5	DESIGN
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999403778963731	WITHOUT_CLASSIFICATION	5.96221036269227E-5	DESIGN
// no-op. We don't own the cache so we shouldn't stop it.	WITHOUT_CLASSIFICATION	0.9983621245837988	WITHOUT_CLASSIFICATION	0.0016378754162011016	DESIGN
// This should only be possible if the caches are constructor injected 	WITHOUT_CLASSIFICATION	0.9996831464405692	WITHOUT_CLASSIFICATION	3.168535594308944E-4	DESIGN
// We only build caches if *none* were passed in.  Passing in // caches counts as a clear statement of exactly what is wanted	WITHOUT_CLASSIFICATION	0.9967749917813454	WITHOUT_CLASSIFICATION	0.0032250082186546457	DESIGN
// Set up the cache factory	WITHOUT_CLASSIFICATION	0.9999766718268581	WITHOUT_CLASSIFICATION	2.3328173141837257E-5	DESIGN
// See if the user configured a multiplexer stack	WITHOUT_CLASSIFICATION	0.9998836718610118	WITHOUT_CLASSIFICATION	1.1632813898820879E-4	DESIGN
// Default to collections sharing entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999999083164661	WITHOUT_CLASSIFICATION	9.168353379163767E-8	DESIGN
// Default to sharing the entity cache if there is one	WITHOUT_CLASSIFICATION	0.999999863972494	WITHOUT_CLASSIFICATION	1.3602750602960035E-7	DESIGN
// For Timestamps, we default to a separate config	WITHOUT_CLASSIFICATION	0.9992717320725646	WITHOUT_CLASSIFICATION	7.28267927435461E-4	DESIGN
// We can't change the TM on a running cache; just check // if the cache has no TM and we're OK with that	WITHOUT_CLASSIFICATION	0.9999969812846843	WITHOUT_CLASSIFICATION	3.0187153156829095E-6	DESIGN
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9997756543405478	WITHOUT_CLASSIFICATION	2.2434565945226402E-4	DESIGN
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999990636041427	WITHOUT_CLASSIFICATION	9.363958572296924E-7	DESIGN
// This method should be implemented assuming it's valid to  // do start/stop/start -- leave state appropriate for another start	WITHOUT_CLASSIFICATION	0.9751918982489967	WITHOUT_CLASSIFICATION	0.02480810175100333	DESIGN
// Make sure we don't re-release the same cache	WITHOUT_CLASSIFICATION	0.9999739943639349	WITHOUT_CLASSIFICATION	2.600563606505741E-5	DESIGN
// We use a different delegate than the non-optimistic superclass default	WITHOUT_CLASSIFICATION	0.9999852555511287	WITHOUT_CLASSIFICATION	1.4744448871275305E-5	DESIGN
// Following methods we don't delegate since they have so little logic // it's clearer to just implement them here	WITHOUT_CLASSIFICATION	0.9439735288381331	WITHOUT_CLASSIFICATION	0.056026471161866896	DESIGN
// If JBC is using INVALIDATION, we don't want to propagate changes. // We use the Timestamps cache to manage invalidation	WITHOUT_CLASSIFICATION	0.9964954195200338	WITHOUT_CLASSIFICATION	0.00350458047996618	DESIGN
// We don't want to waste effort setting an option if JBC is // already in LOCAL mode. If JBC is REPL_(A)SYNC then check // if they passed an config option to disable query replication	WITHOUT_CLASSIFICATION	0.9999964097953074	WITHOUT_CLASSIFICATION	3.5902046926065137E-6	DESIGN
// Don't hold the JBC node lock throughout the tx, as that // prevents updates // Add a zero (or low) timeout option so we don't block // waiting for tx's that did a put to commit	WITHOUT_CLASSIFICATION	0.9999996651537093	WITHOUT_CLASSIFICATION	3.348462907642888E-7	DESIGN
// Double check the distributed cache	WITHOUT_CLASSIFICATION	0.9999896142435319	WITHOUT_CLASSIFICATION	1.0385756468069334E-5	DESIGN
// Get an exclusive right to update JBC for this key from this node.	WITHOUT_CLASSIFICATION	0.9934430085251424	WITHOUT_CLASSIFICATION	0.006556991474857623	DESIGN
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999810246038432	WITHOUT_CLASSIFICATION	1.897539615681943E-5	DESIGN
// Initial load from JBC	WITHOUT_CLASSIFICATION	0.9997482540975883	WITHOUT_CLASSIFICATION	2.5174590241172596E-4	DESIGN
// See if we had a 2nd invalidation from the same initial // preinvalidation timestamp. If so, only increment // if the new current value is an increase	WITHOUT_CLASSIFICATION	0.9999874266917375	WITHOUT_CLASSIFICATION	1.257330826256028E-5	DESIGN
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999810246038432	WITHOUT_CLASSIFICATION	1.897539615681943E-5	DESIGN
// If the workspace node has null as well, OK; if not we've // been modified in a non-comparable manner, which we have to // treat as us being newer	WITHOUT_CLASSIFICATION	0.9999992959963917	WITHOUT_CLASSIFICATION	7.040036083488424E-7	DESIGN
// The standard comparator types are not Serializable but are singletons	WITHOUT_CLASSIFICATION	0.9999142041779036	WITHOUT_CLASSIFICATION	8.579582209636378E-5	DESIGN
// ignore!	WITHOUT_CLASSIFICATION	0.9999904899381782	WITHOUT_CLASSIFICATION	9.510061821791107E-6	DESIGN
// ignore it	WITHOUT_CLASSIFICATION	0.9999978269128299	WITHOUT_CLASSIFICATION	2.1730871701319146E-6	DESIGN
// construct the cache	WITHOUT_CLASSIFICATION	0.9999936627523022	WITHOUT_CLASSIFICATION	6.337247697858286E-6	DESIGN
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.999946042637162	WITHOUT_CLASSIFICATION	5.395736283803214E-5	DESIGN
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.999946042637162	WITHOUT_CLASSIFICATION	5.395736283803214E-5	DESIGN
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999829860409106	WITHOUT_CLASSIFICATION	1.7013959089375476E-5	DESIGN
//swaldman 2006-08-28: define c3p0-style configuration parameters for initialPoolSize, which //                     hibernate sensibly lets default to minPoolSize, but we'll let users //                     override it with the c3p0-style property if they want.	WITHOUT_CLASSIFICATION	0.9987166973602851	WITHOUT_CLASSIFICATION	0.0012833026397148538	DESIGN
/*DataSource unpooled = DataSources.unpooledDataSource(	WITHOUT_CLASSIFICATION	0.9999647728858898	WITHOUT_CLASSIFICATION	3.522711411007816E-5	DESIGN
// TRUE if the pool is borrowed from the outside, FALSE if we used to create it	WITHOUT_CLASSIFICATION	0.9118335810137244	WITHOUT_CLASSIFICATION	0.08816641898627567	DESIGN
// get a connection from the pool (thru DriverManager, cfr. Proxool doc)	WITHOUT_CLASSIFICATION	0.9994603583975901	WITHOUT_CLASSIFICATION	5.396416024099521E-4	DESIGN
// set the Transaction Isolation if defined	WITHOUT_CLASSIFICATION	0.999997620445995	WITHOUT_CLASSIFICATION	2.379554004866688E-6	DESIGN
// toggle autoCommit to false if set	WITHOUT_CLASSIFICATION	0.9999825762002084	WITHOUT_CLASSIFICATION	1.7423799791580954E-5	DESIGN
// return the connection	WITHOUT_CLASSIFICATION	0.9999958483887368	WITHOUT_CLASSIFICATION	4.151611263217838E-6	DESIGN
// Get the configurator files (if available)	WITHOUT_CLASSIFICATION	0.9999990730874985	WITHOUT_CLASSIFICATION	9.269125014711531E-7	DESIGN
// Default the Proxool alias setting	WITHOUT_CLASSIFICATION	0.9999997172079781	WITHOUT_CLASSIFICATION	2.8279202195298055E-7	DESIGN
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9996727971525606	WITHOUT_CLASSIFICATION	3.272028474393137E-4	DESIGN
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9996727971525606	WITHOUT_CLASSIFICATION	3.272028474393137E-4	DESIGN
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999962346498189	WITHOUT_CLASSIFICATION	3.7653501811432917E-6	DESIGN
// Set the existing pool flag to true	WITHOUT_CLASSIFICATION	0.9999961504076224	WITHOUT_CLASSIFICATION	3.849592377726804E-6	DESIGN
// Configured using the JAXP Configurator	WITHOUT_CLASSIFICATION	0.9999359899766561	WITHOUT_CLASSIFICATION	6.401002334391833E-5	DESIGN
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9996727971525606	WITHOUT_CLASSIFICATION	3.272028474393137E-4	DESIGN
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999962346498189	WITHOUT_CLASSIFICATION	3.7653501811432917E-6	DESIGN
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999962346498189	WITHOUT_CLASSIFICATION	3.7653501811432917E-6	DESIGN
// Configured using the Properties File Configurator	WITHOUT_CLASSIFICATION	0.9999923325248927	WITHOUT_CLASSIFICATION	7.667475107293942E-6	DESIGN
// Remember Isolation level	WITHOUT_CLASSIFICATION	0.9999891332082429	WITHOUT_CLASSIFICATION	1.0866791756998391E-5	DESIGN
// If the provider was leeching off an existing pool don't close it	WITHOUT_CLASSIFICATION	0.9999261069796338	WITHOUT_CLASSIFICATION	7.389302036621478E-5	DESIGN
// We have created the pool ourselves, so shut it down	WITHOUT_CLASSIFICATION	0.9998545746258132	WITHOUT_CLASSIFICATION	1.4542537418687495E-4	DESIGN
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.9999881950635465	WITHOUT_CLASSIFICATION	1.1804936453516903E-5	DESIGN
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.9999881950635465	WITHOUT_CLASSIFICATION	1.1804936453516903E-5	DESIGN
//always overwrite nonversioned data	WITHOUT_CLASSIFICATION	0.9999992689303123	WITHOUT_CLASSIFICATION	7.310696876787391E-7	DESIGN
//public Currency getCurrency(int col) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9891202118323266	WITHOUT_CLASSIFICATION	0.010879788167673436	DESIGN
// default is POJO	WITHOUT_CLASSIFICATION	0.9999909969320572	WITHOUT_CLASSIFICATION	9.003067942827695E-6	DESIGN
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999992940083359	WITHOUT_CLASSIFICATION	7.059916641974431E-7	DESIGN
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999992940083359	WITHOUT_CLASSIFICATION	7.059916641974431E-7	DESIGN
//private CacheEntry cacheEntry;	WITHOUT_CLASSIFICATION	0.9998800331129872	WITHOUT_CLASSIFICATION	1.1996688701274746E-4	DESIGN
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9999972554783805	WITHOUT_CLASSIFICATION	2.7445216195034865E-6	DESIGN
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9996726700269706	WITHOUT_CLASSIFICATION	3.273299730294571E-4	DESIGN
// get the updated snapshot of the entity state by cloning current state; // it is safe to copy in place, since by this time no-one else (should have) // has a reference  to the array	WITHOUT_CLASSIFICATION	0.9929188546988513	WITHOUT_CLASSIFICATION	0.007081145301148642	DESIGN
// this entity defines proeprty generation, so process those generated // values...	WITHOUT_CLASSIFICATION	0.9999370767573726	WITHOUT_CLASSIFICATION	6.292324262738892E-5	DESIGN
// have the entity entry perform post-update processing, passing it the // update state and the new version (if one).	WITHOUT_CLASSIFICATION	0.9999999847612691	WITHOUT_CLASSIFICATION	1.5238730892074985E-8	DESIGN
/*!persister.isCacheInvalidationRequired()*/	WITHOUT_CLASSIFICATION	0.9999561460175281	WITHOUT_CLASSIFICATION	4.385398247179602E-5	DESIGN
// need to look it up from the persistence-context	WITHOUT_CLASSIFICATION	0.9996858164695497	WITHOUT_CLASSIFICATION	3.141835304502672E-4	DESIGN
//sort first by role name	WITHOUT_CLASSIFICATION	0.9998435173431173	WITHOUT_CLASSIFICATION	1.564826568827924E-4	DESIGN
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9996726700269706	WITHOUT_CLASSIFICATION	3.273299730294571E-4	DESIGN
//then by fk	WITHOUT_CLASSIFICATION	0.9999432249641326	WITHOUT_CLASSIFICATION	5.677503586750476E-5	DESIGN
// nothing to do	WITHOUT_CLASSIFICATION	0.9981163008388473	WITHOUT_CLASSIFICATION	0.0018836991611527775	DESIGN
// nothing to do	WITHOUT_CLASSIFICATION	0.9981163008388473	WITHOUT_CLASSIFICATION	0.0018836991611527775	DESIGN
// an existing collection that was either non-empty or uninitialized // is replaced by null or a different collection // (if the collection is uninitialized, hibernate has no way of // knowing if the collection is actually empty without querying the db)	WITHOUT_CLASSIFICATION	0.9999549376002732	WITHOUT_CLASSIFICATION	4.506239972677732E-5	DESIGN
// this method is called when a new non-null collection is persisted // or when an existing (non-null) collection is moved to a new owner	WITHOUT_CLASSIFICATION	0.9999979576797836	WITHOUT_CLASSIFICATION	2.042320216303023E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.9997835908563089	WITHOUT_CLASSIFICATION	2.164091436910978E-4	DESIGN
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.999999517754368	WITHOUT_CLASSIFICATION	4.822456320511221E-7	DESIGN
//do nothing - we only need to notify the cache...	WITHOUT_CLASSIFICATION	0.9950748057161827	WITHOUT_CLASSIFICATION	0.004925194283817295	DESIGN
//sort first by entity name	WITHOUT_CLASSIFICATION	0.9999492232354359	WITHOUT_CLASSIFICATION	5.077676456401703E-5	DESIGN
//then by id	WITHOUT_CLASSIFICATION	0.9997380503768091	WITHOUT_CLASSIFICATION	2.619496231909642E-4	DESIGN
// to be safe...	WITHOUT_CLASSIFICATION	0.9998268532977818	WITHOUT_CLASSIFICATION	1.731467022181691E-4	DESIGN
// no transformations took place, so handle it as we would a // non-instrumented class	WITHOUT_CLASSIFICATION	0.9999470987044633	WITHOUT_CLASSIFICATION	5.29012955366574E-5	DESIGN
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999997412513325	WITHOUT_CLASSIFICATION	2.5874866746909457E-7	DESIGN
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999997412513325	WITHOUT_CLASSIFICATION	2.5874866746909457E-7	DESIGN
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999911866733564	WITHOUT_CLASSIFICATION	8.813326643567616E-6	DESIGN
//test out the optimizer:	WITHOUT_CLASSIFICATION	0.9998837082823888	WITHOUT_CLASSIFICATION	1.1629171761114268E-4	DESIGN
// set the name of bulk accessor.	WITHOUT_CLASSIFICATION	0.9999990797156474	WITHOUT_CLASSIFICATION	9.202843527445607E-7	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.9999721494320568	WITHOUT_CLASSIFICATION	2.785056794318593E-5	DESIGN
// invokespecial	WITHOUT_CLASSIFICATION	0.9999952309489872	WITHOUT_CLASSIFICATION	4.769051012834469E-6	DESIGN
// return	WITHOUT_CLASSIFICATION	0.9999788674127507	WITHOUT_CLASSIFICATION	2.1132587249354898E-5	DESIGN
// aload_1 // load bean	WITHOUT_CLASSIFICATION	0.999952235788274	WITHOUT_CLASSIFICATION	4.776421172610103E-5	DESIGN
// checkcast // cast bean	WITHOUT_CLASSIFICATION	0.999975464261048	WITHOUT_CLASSIFICATION	2.4535738951894424E-5	DESIGN
// astore_3 // store bean	WITHOUT_CLASSIFICATION	0.999990306091569	WITHOUT_CLASSIFICATION	9.693908430955143E-6	DESIGN
// aload_2 // args	WITHOUT_CLASSIFICATION	0.9999955754906759	WITHOUT_CLASSIFICATION	4.424509324196076E-6	DESIGN
// iconst_i // continue to aastore // growing stack is 1	WITHOUT_CLASSIFICATION	0.9996103540611995	WITHOUT_CLASSIFICATION	3.8964593880061937E-4	DESIGN
// new	WITHOUT_CLASSIFICATION	0.9999615088792234	WITHOUT_CLASSIFICATION	3.849112077663669E-5	DESIGN
// dup	WITHOUT_CLASSIFICATION	0.9999228514710423	WITHOUT_CLASSIFICATION	7.714852895765791E-5	DESIGN
// aload_3 // load the raw bean	WITHOUT_CLASSIFICATION	0.9999929938866527	WITHOUT_CLASSIFICATION	7.006113347298404E-6	DESIGN
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999969827615703	WITHOUT_CLASSIFICATION	3.017238429515216E-6	DESIGN
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999922741718702	WITHOUT_CLASSIFICATION	7.725828129725591E-6	DESIGN
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999922741718702	WITHOUT_CLASSIFICATION	7.725828129725591E-6	DESIGN
// aastore // args	WITHOUT_CLASSIFICATION	0.9999981515273327	WITHOUT_CLASSIFICATION	1.848472667279885E-6	DESIGN
/* | this | bean | args | i | raw bean | exception | */	WITHOUT_CLASSIFICATION	0.9999477037481328	WITHOUT_CLASSIFICATION	5.2296251867200404E-5	DESIGN
// required to exception table // iconst_0 // i	WITHOUT_CLASSIFICATION	0.9999973651420683	WITHOUT_CLASSIFICATION	2.6348579317722322E-6	DESIGN
// istore_3 // store i	WITHOUT_CLASSIFICATION	0.9999536256300084	WITHOUT_CLASSIFICATION	4.637436999147207E-5	DESIGN
// aload_1 // load the bean	WITHOUT_CLASSIFICATION	0.9999894465518788	WITHOUT_CLASSIFICATION	1.0553448121076127E-5	DESIGN
// checkcast // cast the bean into a raw bean	WITHOUT_CLASSIFICATION	0.9998192619709115	WITHOUT_CLASSIFICATION	1.8073802908847875E-4	DESIGN
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999886112199243	WITHOUT_CLASSIFICATION	1.1388780075746777E-5	DESIGN
// start region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9998343256172193	WITHOUT_CLASSIFICATION	1.6567438278080444E-4	DESIGN
// iinc 3, 1	WITHOUT_CLASSIFICATION	0.9999755680396246	WITHOUT_CLASSIFICATION	2.4431960375374668E-5	DESIGN
// aload 4 // load the raw bean	WITHOUT_CLASSIFICATION	0.9999839126932033	WITHOUT_CLASSIFICATION	1.608730679678196E-5	DESIGN
// aload_2 // load the args	WITHOUT_CLASSIFICATION	0.999998051364182	WITHOUT_CLASSIFICATION	1.9486358181147043E-6	DESIGN
// iconst_i	WITHOUT_CLASSIFICATION	0.9999371712946425	WITHOUT_CLASSIFICATION	6.282870535736017E-5	DESIGN
// aaload	WITHOUT_CLASSIFICATION	0.9999498190696643	WITHOUT_CLASSIFICATION	5.018093033573458E-5	DESIGN
// checkcast	WITHOUT_CLASSIFICATION	0.9999876268497998	WITHOUT_CLASSIFICATION	1.2373150200255289E-5	DESIGN
// checkcast (case of primitive type) // invokevirtual (case of primitive type)	WITHOUT_CLASSIFICATION	0.9999817729237465	WITHOUT_CLASSIFICATION	1.8227076253627514E-5	DESIGN
// checkcast (case of reference type)	WITHOUT_CLASSIFICATION	0.9999953860479843	WITHOUT_CLASSIFICATION	4.613952015737332E-6	DESIGN
/* current stack len = 2 */	WITHOUT_CLASSIFICATION	0.9999915028539943	WITHOUT_CLASSIFICATION	8.497146005582336E-6	DESIGN
// end region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.999788833954106	WITHOUT_CLASSIFICATION	2.1116604589399E-4	DESIGN
// register in exception table	WITHOUT_CLASSIFICATION	0.9999959028307069	WITHOUT_CLASSIFICATION	4.097169292958563E-6	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.9999721494320568	WITHOUT_CLASSIFICATION	2.785056794318593E-5	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.9999721494320568	WITHOUT_CLASSIFICATION	2.785056794318593E-5	DESIGN
// return	WITHOUT_CLASSIFICATION	0.9999788674127507	WITHOUT_CLASSIFICATION	2.1132587249354898E-5	DESIGN
// return	WITHOUT_CLASSIFICATION	0.9999788674127507	WITHOUT_CLASSIFICATION	2.1132587249354898E-5	DESIGN
// dup	WITHOUT_CLASSIFICATION	0.9999228514710423	WITHOUT_CLASSIFICATION	7.714852895765791E-5	DESIGN
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999922741718702	WITHOUT_CLASSIFICATION	7.725828129725591E-6	DESIGN
// checkcast	WITHOUT_CLASSIFICATION	0.9999876268497998	WITHOUT_CLASSIFICATION	1.2373150200255289E-5	DESIGN
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.9999995934112316	WITHOUT_CLASSIFICATION	4.065887684141169E-7	DESIGN
// astore 5 // store exception	WITHOUT_CLASSIFICATION	0.9999675281379179	WITHOUT_CLASSIFICATION	3.2471862082032836E-5	DESIGN
// new // BulkAccessorException	WITHOUT_CLASSIFICATION	0.9999373556415669	WITHOUT_CLASSIFICATION	6.264435843314524E-5	DESIGN
// aload 5 // load exception	WITHOUT_CLASSIFICATION	0.9999253099368274	WITHOUT_CLASSIFICATION	7.469006317265483E-5	DESIGN
// iload_3 // i	WITHOUT_CLASSIFICATION	0.9999444569689321	WITHOUT_CLASSIFICATION	5.554303106787039E-5	DESIGN
// invokespecial // BulkAccessorException.<init>	WITHOUT_CLASSIFICATION	0.9999867462189076	WITHOUT_CLASSIFICATION	1.3253781092324995E-5	DESIGN
// athrow	WITHOUT_CLASSIFICATION	0.99999081226928	WITHOUT_CLASSIFICATION	9.187730719979352E-6	DESIGN
// WARNING: classfile only	WITHOUT_CLASSIFICATION	0.999976140309038	WITHOUT_CLASSIFICATION	2.3859690962027293E-5	DESIGN
//swallow	WITHOUT_CLASSIFICATION	0.9995877516168026	WITHOUT_CLASSIFICATION	4.1224838319738267E-4	DESIGN
/* local variable | this | */	WITHOUT_CLASSIFICATION	0.9999478222377518	WITHOUT_CLASSIFICATION	5.217776224818102E-5	DESIGN
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.9999166221247978	WITHOUT_CLASSIFICATION	8.337787520220087E-5	DESIGN
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.9999166221247978	WITHOUT_CLASSIFICATION	8.337787520220087E-5	DESIGN
// getfield // get field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999692377222786	WITHOUT_CLASSIFICATION	3.076227772144384E-5	DESIGN
// areturn // return the value of the field	WITHOUT_CLASSIFICATION	0.9999982990018244	WITHOUT_CLASSIFICATION	1.7009981757169634E-6	DESIGN
/* local variables | this | callback | */	WITHOUT_CLASSIFICATION	0.9997660966305908	WITHOUT_CLASSIFICATION	2.339033694093503E-4	DESIGN
// aload_1 // load callback	WITHOUT_CLASSIFICATION	0.999196532703908	WITHOUT_CLASSIFICATION	8.034672960921141E-4	DESIGN
// putfield // put field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999422602633196	WITHOUT_CLASSIFICATION	5.773973668045042E-5	DESIGN
// case of non-static field	WITHOUT_CLASSIFICATION	0.9999525340389863	WITHOUT_CLASSIFICATION	4.746596101372123E-5	DESIGN
// getfield // get each field	WITHOUT_CLASSIFICATION	0.9999819126337588	WITHOUT_CLASSIFICATION	1.808736624115901E-5	DESIGN
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999928987851697	WITHOUT_CLASSIFICATION	7.1012148302324535E-6	DESIGN
// ifnonnull	WITHOUT_CLASSIFICATION	0.9999890168922263	WITHOUT_CLASSIFICATION	1.0983107773803941E-5	DESIGN
// *return // each type	WITHOUT_CLASSIFICATION	0.9999958480764349	WITHOUT_CLASSIFICATION	4.151923565117041E-6	DESIGN
// *return // each type	WITHOUT_CLASSIFICATION	0.9999958480764349	WITHOUT_CLASSIFICATION	4.151923565117041E-6	DESIGN
// *store_1 // each type	WITHOUT_CLASSIFICATION	0.9999951265033388	WITHOUT_CLASSIFICATION	4.8734966611937584E-6	DESIGN
// ldc // name of the field	WITHOUT_CLASSIFICATION	0.9999803360932233	WITHOUT_CLASSIFICATION	1.9663906776716043E-5	DESIGN
// *load_1 // each type	WITHOUT_CLASSIFICATION	0.9999870033051244	WITHOUT_CLASSIFICATION	1.2996694875615212E-5	DESIGN
// invokeinterface // invoke Callback.read*() // each type	WITHOUT_CLASSIFICATION	0.9999838192954729	WITHOUT_CLASSIFICATION	1.6180704527129118E-5	DESIGN
// int	WITHOUT_CLASSIFICATION	0.9999329414414014	WITHOUT_CLASSIFICATION	6.705855859861343E-5	DESIGN
// return	WITHOUT_CLASSIFICATION	0.9999788674127507	WITHOUT_CLASSIFICATION	2.1132587249354898E-5	DESIGN
// dup	WITHOUT_CLASSIFICATION	0.9999228514710423	WITHOUT_CLASSIFICATION	7.714852895765791E-5	DESIGN
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999969827615703	WITHOUT_CLASSIFICATION	3.017238429515216E-6	DESIGN
// checkcast	WITHOUT_CLASSIFICATION	0.9999876268497998	WITHOUT_CLASSIFICATION	1.2373150200255289E-5	DESIGN
// checkcast	WITHOUT_CLASSIFICATION	0.9999876268497998	WITHOUT_CLASSIFICATION	1.2373150200255289E-5	DESIGN
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.999995176964843	WITHOUT_CLASSIFICATION	4.823035157105555E-6	DESIGN
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.999995176964843	WITHOUT_CLASSIFICATION	4.823035157105555E-6	DESIGN
// ifnonnull (label1)	WITHOUT_CLASSIFICATION	0.9997007791081011	WITHOUT_CLASSIFICATION	2.9922089189897226E-4	DESIGN
// *load_1	WITHOUT_CLASSIFICATION	0.9999134474785184	WITHOUT_CLASSIFICATION	8.655252148156887E-5	DESIGN
// *load_1	WITHOUT_CLASSIFICATION	0.9999134474785184	WITHOUT_CLASSIFICATION	8.655252148156887E-5	DESIGN
// putfield	WITHOUT_CLASSIFICATION	0.9999585740588263	WITHOUT_CLASSIFICATION	4.142594117365836E-5	DESIGN
// return ;	WITHOUT_CLASSIFICATION	0.9999885167057734	WITHOUT_CLASSIFICATION	1.1483294226708811E-5	DESIGN
// ldc // field name	WITHOUT_CLASSIFICATION	0.9999867435504519	WITHOUT_CLASSIFICATION	1.325644954805601E-5	DESIGN
// getfield // old value of the field	WITHOUT_CLASSIFICATION	0.9999860041405467	WITHOUT_CLASSIFICATION	1.3995859453232387E-5	DESIGN
// invokeinterface // callback.write*(..)	WITHOUT_CLASSIFICATION	0.999571196358644	WITHOUT_CLASSIFICATION	4.288036413559236E-4	DESIGN
// reference type	WITHOUT_CLASSIFICATION	0.9999958654834828	WITHOUT_CLASSIFICATION	4.13451651722436E-6	DESIGN
// reference type	WITHOUT_CLASSIFICATION	0.9999958654834828	WITHOUT_CLASSIFICATION	4.13451651722436E-6	DESIGN
// not array	WITHOUT_CLASSIFICATION	0.9999499561162968	WITHOUT_CLASSIFICATION	5.0043883703214814E-5	DESIGN
// array of reference type	WITHOUT_CLASSIFICATION	0.9999929394398646	WITHOUT_CLASSIFICATION	7.060560135496702E-6	DESIGN
// boolean	WITHOUT_CLASSIFICATION	0.9999870301885194	WITHOUT_CLASSIFICATION	1.2969811480499882E-5	DESIGN
// byte	WITHOUT_CLASSIFICATION	0.9999848625455665	WITHOUT_CLASSIFICATION	1.5137454433426003E-5	DESIGN
// char	WITHOUT_CLASSIFICATION	0.9999829408924656	WITHOUT_CLASSIFICATION	1.7059107534317877E-5	DESIGN
// short	WITHOUT_CLASSIFICATION	0.9999765416987862	WITHOUT_CLASSIFICATION	2.3458301213741735E-5	DESIGN
// double	WITHOUT_CLASSIFICATION	0.9999178933239308	WITHOUT_CLASSIFICATION	8.210667606919503E-5	DESIGN
// float	WITHOUT_CLASSIFICATION	0.9999614423628325	WITHOUT_CLASSIFICATION	3.855763716748012E-5	DESIGN
// float	WITHOUT_CLASSIFICATION	0.9999614423628325	WITHOUT_CLASSIFICATION	3.855763716748012E-5	DESIGN
// long	WITHOUT_CLASSIFICATION	0.9999747894511817	WITHOUT_CLASSIFICATION	2.52105488182616E-5	DESIGN
// long	WITHOUT_CLASSIFICATION	0.9999747894511817	WITHOUT_CLASSIFICATION	2.52105488182616E-5	DESIGN
// bad type	WITHOUT_CLASSIFICATION	0.999988971074544	WITHOUT_CLASSIFICATION	1.1028925456117544E-5	DESIGN
// bad type	WITHOUT_CLASSIFICATION	0.999988971074544	WITHOUT_CLASSIFICATION	1.1028925456117544E-5	DESIGN
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999854853038683	WITHOUT_CLASSIFICATION	1.4514696131684798E-5	DESIGN
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999854853038683	WITHOUT_CLASSIFICATION	1.4514696131684798E-5	DESIGN
// reference type	WITHOUT_CLASSIFICATION	0.9999958654834828	WITHOUT_CLASSIFICATION	4.13451651722436E-6	DESIGN
// double	WITHOUT_CLASSIFICATION	0.9999178933239308	WITHOUT_CLASSIFICATION	8.210667606919503E-5	DESIGN
// float	WITHOUT_CLASSIFICATION	0.9999614423628325	WITHOUT_CLASSIFICATION	3.855763716748012E-5	DESIGN
// float	WITHOUT_CLASSIFICATION	0.9999614423628325	WITHOUT_CLASSIFICATION	3.855763716748012E-5	DESIGN
// long	WITHOUT_CLASSIFICATION	0.9999747894511817	WITHOUT_CLASSIFICATION	2.52105488182616E-5	DESIGN
// bad type	WITHOUT_CLASSIFICATION	0.999988971074544	WITHOUT_CLASSIFICATION	1.1028925456117544E-5	DESIGN
// bad type	WITHOUT_CLASSIFICATION	0.999988971074544	WITHOUT_CLASSIFICATION	1.1028925456117544E-5	DESIGN
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999854853038683	WITHOUT_CLASSIFICATION	1.4514696131684798E-5	DESIGN
// skip finalize methods	WITHOUT_CLASSIFICATION	0.9999816077492845	WITHOUT_CLASSIFICATION	1.8392250715562812E-5	DESIGN
//Mainly for OSCache	WITHOUT_CLASSIFICATION	0.9999623506478083	WITHOUT_CLASSIFICATION	3.7649352191783365E-5	DESIGN
//decrement the lock	WITHOUT_CLASSIFICATION	0.9999820999801791	WITHOUT_CLASSIFICATION	1.7900019820923187E-5	DESIGN
// create new lock that times out immediately	WITHOUT_CLASSIFICATION	0.9999949690622238	WITHOUT_CLASSIFICATION	5.030937776206594E-6	DESIGN
//recache the updated state	WITHOUT_CLASSIFICATION	0.9999684464369158	WITHOUT_CLASSIFICATION	3.155356308419874E-5	DESIGN
// noop	WITHOUT_CLASSIFICATION	0.999939630487034	WITHOUT_CLASSIFICATION	6.036951296594198E-5	DESIGN
//null clientLock is remotely possible but will never happen in practice	WITHOUT_CLASSIFICATION	0.995347533490149	WITHOUT_CLASSIFICATION	0.004652466509850926	DESIGN
// we really could refresh the item if it // is not a lock, but it might be slower //return freshTimestamp < txTimestamp	WITHOUT_CLASSIFICATION	0.8005699364453183	WITHOUT_CLASSIFICATION	0.19943006355468176	DESIGN
//by requiring <, we rely on lock timeout in the case of an unsuccessful update!	WITHOUT_CLASSIFICATION	0.9999981303119161	WITHOUT_CLASSIFICATION	1.8696880839634762E-6	DESIGN
// the user provided resulttransformer, not the one used with "select new". Here to avoid mangling // transformed/non-transformed results.	WITHOUT_CLASSIFICATION	0.99999843173653	WITHOUT_CLASSIFICATION	1.5682634700234617E-6	DESIGN
// disassemble positional parameters	WITHOUT_CLASSIFICATION	0.99999969387609	WITHOUT_CLASSIFICATION	3.061239100688524E-7	DESIGN
// disassemble named parameters	WITHOUT_CLASSIFICATION	0.9999971420973326	WITHOUT_CLASSIFICATION	2.8579026674387646E-6	DESIGN
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999829860409106	WITHOUT_CLASSIFICATION	1.7013959089375476E-5	DESIGN
// noop	WITHOUT_CLASSIFICATION	0.999939630487034	WITHOUT_CLASSIFICATION	6.036951296594198E-5	DESIGN
//noop	WITHOUT_CLASSIFICATION	0.9998419111911909	WITHOUT_CLASSIFICATION	1.58088808809062E-4	DESIGN
//noop	WITHOUT_CLASSIFICATION	0.9998419111911909	WITHOUT_CLASSIFICATION	1.58088808809062E-4	DESIGN
// this is called from SettingsFactory irregardless; trivial to simply disregard	WITHOUT_CLASSIFICATION	0.9945818512704835	WITHOUT_CLASSIFICATION	0.005418148729516473	DESIGN
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9989582844846248	WITHOUT_CLASSIFICATION	0.0010417155153752736	DESIGN
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9989582844846248	WITHOUT_CLASSIFICATION	0.0010417155153752736	DESIGN
//throw new UnsupportedOperationException("Can't write to a readonly object");	WITHOUT_CLASSIFICATION	0.9996866635267538	WITHOUT_CLASSIFICATION	3.1333647324622514E-4	DESIGN
//assembled state gets put in a new array (we read from cache by value!)	WITHOUT_CLASSIFICATION	0.9987643291160739	WITHOUT_CLASSIFICATION	0.0012356708839260516	DESIGN
//persister.setIdentifier(result, id); //before calling interceptor, for consistency with normal load	WITHOUT_CLASSIFICATION	0.9998765769540054	WITHOUT_CLASSIFICATION	1.234230459946E-4	DESIGN
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9935201767440753	WITHOUT_CLASSIFICATION	0.0064798232559245906	DESIGN
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9935201767440753	WITHOUT_CLASSIFICATION	0.0064798232559245906	DESIGN
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999033410742743	WITHOUT_CLASSIFICATION	9.665892572577985E-5	DESIGN
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9858355670227038	WITHOUT_CLASSIFICATION	0.01416443297729611	DESIGN
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9858355670227038	WITHOUT_CLASSIFICATION	0.01416443297729611	DESIGN
// classes mentioned in extends not available - so put it in queue	WITHOUT_CLASSIFICATION	0.9999900440434906	WITHOUT_CLASSIFICATION	9.95595650946572E-6	DESIGN
// get meta's from <hibernate-mapping>	WITHOUT_CLASSIFICATION	0.9999192721188446	WITHOUT_CLASSIFICATION	8.07278811553411E-5	DESIGN
// get meta's from <class>	WITHOUT_CLASSIFICATION	0.9998212878957603	WITHOUT_CLASSIFICATION	1.7871210423983533E-4	DESIGN
// DB-OBJECTNAME	WITHOUT_CLASSIFICATION	0.9998688338391964	WITHOUT_CLASSIFICATION	1.3116616080349064E-4	DESIGN
// MUTABLE	WITHOUT_CLASSIFICATION	0.9996236779275648	WITHOUT_CLASSIFICATION	3.763220724351202E-4	DESIGN
// WHERE	WITHOUT_CLASSIFICATION	0.9997357766259519	WITHOUT_CLASSIFICATION	2.6422337404807545E-4	DESIGN
// CHECK	WITHOUT_CLASSIFICATION	0.9998452721558182	WITHOUT_CLASSIFICATION	1.5472784418184648E-4	DESIGN
// POLYMORPHISM	WITHOUT_CLASSIFICATION	0.99989940672121	WITHOUT_CLASSIFICATION	1.005932787899369E-4	DESIGN
// TODO:	WITHOUT_CLASSIFICATION	0.8970997666950564	WITHOUT_CLASSIFICATION	0.1029002333049436	DESIGN
// ID	WITHOUT_CLASSIFICATION	0.9999653972410294	WITHOUT_CLASSIFICATION	3.460275897073811E-5	DESIGN
// VERSION / TIMESTAMP	WITHOUT_CLASSIFICATION	0.9997029497643886	WITHOUT_CLASSIFICATION	2.9705023561144375E-4	DESIGN
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9998862684915977	WITHOUT_CLASSIFICATION	1.1373150840242492E-4	DESIGN
// Primary key constraint	WITHOUT_CLASSIFICATION	0.9999773808528053	WITHOUT_CLASSIFICATION	2.261914719470267E-5	DESIGN
// this is either a <version/> tag with no type attribute, // or a <timestamp/> tag	WITHOUT_CLASSIFICATION	0.9999907625629061	WITHOUT_CLASSIFICATION	9.237437093906272E-6	DESIGN
// for version properties marked as being generated, make sure they are "always" // generated; aka, "insert" is invalid; this is dis-allowed by the DTD, // but just to make sure...	WITHOUT_CLASSIFICATION	0.9982095981748325	WITHOUT_CLASSIFICATION	0.0017904018251675327	DESIGN
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9998862684915977	WITHOUT_CLASSIFICATION	1.1373150840242492E-4	DESIGN
// ( (Column) discrim.getColumnIterator().next() ).setType(type);	WITHOUT_CLASSIFICATION	0.9999236951928316	WITHOUT_CLASSIFICATION	7.63048071682945E-5	DESIGN
// go ahead and set the lazy here, since pojo.proxy can override it.	WITHOUT_CLASSIFICATION	0.9999387629790149	WITHOUT_CLASSIFICATION	6.123702098523701E-5	DESIGN
// DYNAMIC UPDATE	WITHOUT_CLASSIFICATION	0.999758714322127	WITHOUT_CLASSIFICATION	2.4128567787291393E-4	DESIGN
// IMPORT	WITHOUT_CLASSIFICATION	0.9999248767949772	WITHOUT_CLASSIFICATION	7.51232050227339E-5	DESIGN
// BATCH SIZE	WITHOUT_CLASSIFICATION	0.9995351275703086	WITHOUT_CLASSIFICATION	4.648724296913002E-4	DESIGN
// SELECT BEFORE UPDATE	WITHOUT_CLASSIFICATION	0.9988892112865655	WITHOUT_CLASSIFICATION	0.0011107887134345657	DESIGN
// OPTIMISTIC LOCK MODE	WITHOUT_CLASSIFICATION	0.9993414317965832	WITHOUT_CLASSIFICATION	6.58568203416738E-4	DESIGN
// PERSISTER	WITHOUT_CLASSIFICATION	0.999860511409401	WITHOUT_CLASSIFICATION	1.3948859059895803E-4	DESIGN
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9998871594685793	WITHOUT_CLASSIFICATION	1.1284053142072936E-4	DESIGN
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9995206377739443	WITHOUT_CLASSIFICATION	4.7936222605569667E-4	DESIGN
// properties	WITHOUT_CLASSIFICATION	0.9999755730868958	WITHOUT_CLASSIFICATION	2.442691310427648E-5	DESIGN
// joined subclasses	WITHOUT_CLASSIFICATION	0.9998993302317466	WITHOUT_CLASSIFICATION	1.006697682533238E-4	DESIGN
// KEY	WITHOUT_CLASSIFICATION	0.9999229210978067	WITHOUT_CLASSIFICATION	7.707890219335225E-5	DESIGN
// CHECK	WITHOUT_CLASSIFICATION	0.9998452721558182	WITHOUT_CLASSIFICATION	1.5472784418184648E-4	DESIGN
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9998871594685793	WITHOUT_CLASSIFICATION	1.1284053142072936E-4	DESIGN
// properties	WITHOUT_CLASSIFICATION	0.9999755730868958	WITHOUT_CLASSIFICATION	2.442691310427648E-5	DESIGN
// KEY	WITHOUT_CLASSIFICATION	0.9999229210978067	WITHOUT_CLASSIFICATION	7.707890219335225E-5	DESIGN
// model.getKey().setType( new Type( model.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999968942202735	WITHOUT_CLASSIFICATION	3.105779726358692E-6	DESIGN
// TABLENAME	WITHOUT_CLASSIFICATION	0.9995010878950018	WITHOUT_CLASSIFICATION	4.989121049981581E-4	DESIGN
// join.getKey().setType( new Type( lazz.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.999995740182995	WITHOUT_CLASSIFICATION	4.259817004973031E-6	DESIGN
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9998802076712581	WITHOUT_CLASSIFICATION	1.1979232874185692E-4	DESIGN
// COLUMN(S)	WITHOUT_CLASSIFICATION	0.9999747342633692	WITHOUT_CLASSIFICATION	2.526573663073005E-5	DESIGN
// column index	WITHOUT_CLASSIFICATION	0.9999453224794354	WITHOUT_CLASSIFICATION	5.4677520564563174E-5	DESIGN
//column unique-key	WITHOUT_CLASSIFICATION	0.9999430460909409	WITHOUT_CLASSIFICATION	5.695390905911926E-5	DESIGN
// automatically makes a column with the default name if none is specifed by XML	WITHOUT_CLASSIFICATION	0.9999931973562013	WITHOUT_CLASSIFICATION	6.802643798709478E-6	DESIGN
// for an any	WITHOUT_CLASSIFICATION	0.9999973650282216	WITHOUT_CLASSIFICATION	2.634971778329695E-6	DESIGN
// insertable simply because that is the user did not specify // anything; just override it	WITHOUT_CLASSIFICATION	0.9999999202706853	WITHOUT_CLASSIFICATION	7.972931478542014E-8	DESIGN
// the user specifically supplied insert="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.999998308433109	WITHOUT_CLASSIFICATION	1.6915668911042961E-6	DESIGN
// properties generated on update can never be updateable...	WITHOUT_CLASSIFICATION	0.9999940668739005	WITHOUT_CLASSIFICATION	5.933126099528017E-6	DESIGN
// updateable only because the user did not specify  // anything; just override it	WITHOUT_CLASSIFICATION	0.9999997643847262	WITHOUT_CLASSIFICATION	2.3561527380792585E-7	DESIGN
// the user specifically supplied update="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999962097619406	WITHOUT_CLASSIFICATION	3.790238059419843E-6	DESIGN
// ROLENAME	WITHOUT_CLASSIFICATION	0.9999223933669429	WITHOUT_CLASSIFICATION	7.760663305717377E-5	DESIGN
// FETCH STRATEGY	WITHOUT_CLASSIFICATION	0.9998516147175281	WITHOUT_CLASSIFICATION	1.483852824718691E-4	DESIGN
// TABLE	WITHOUT_CLASSIFICATION	0.99944435427749	WITHOUT_CLASSIFICATION	5.556457225099569E-4	DESIGN
//tableName = mappings.getNamingStrategy().propertyToTableName( className, path );	WITHOUT_CLASSIFICATION	0.9999989967677996	WITHOUT_CLASSIFICATION	1.0032322005109376E-6	DESIGN
// SORT	WITHOUT_CLASSIFICATION	0.9999238785463082	WITHOUT_CLASSIFICATION	7.612145369180141E-5	DESIGN
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9998871594685793	WITHOUT_CLASSIFICATION	1.1284053142072936E-4	DESIGN
// unsorted, natural, comparator.class.name	WITHOUT_CLASSIFICATION	0.9999971530997196	WITHOUT_CLASSIFICATION	2.846900280291225E-6	DESIGN
// ORPHAN DELETE (used for programmer error detection)	WITHOUT_CLASSIFICATION	0.9994707823525592	WITHOUT_CLASSIFICATION	5.29217647440799E-4	DESIGN
// set up second pass	WITHOUT_CLASSIFICATION	0.9999595874245669	WITHOUT_CLASSIFICATION	4.04125754330279E-5	DESIGN
// an "embedded" component (composite ids and unique) // note that this does not handle nested components	WITHOUT_CLASSIFICATION	0.9996050064862453	WITHOUT_CLASSIFICATION	3.949935137546926E-4	DESIGN
// a nested composite element	WITHOUT_CLASSIFICATION	0.9999781832110116	WITHOUT_CLASSIFICATION	2.1816788988372488E-5	DESIGN
// for an any // we will have to use reflection	WITHOUT_CLASSIFICATION	0.9997720291683142	WITHOUT_CLASSIFICATION	2.2797083168585885E-4	DESIGN
//NOTE SPECIAL CASE: // one-to-one constrained=false cannot be proxied, // so default to join and non-lazy	WITHOUT_CLASSIFICATION	0.9999944180119299	WITHOUT_CLASSIFICATION	5.581988070079786E-6	DESIGN
// use old (HB 2.1) defaults if outer-join is specified	WITHOUT_CLASSIFICATION	0.999987129717684	WITHOUT_CLASSIFICATION	1.2870282316067644E-5	DESIGN
//lazy = !join;	WITHOUT_CLASSIFICATION	0.9999281291861285	WITHOUT_CLASSIFICATION	7.187081387145455E-5	DESIGN
// GENERATOR	WITHOUT_CLASSIFICATION	0.9998955234659178	WITHOUT_CLASSIFICATION	1.0447653408215865E-4	DESIGN
// ID UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999789101941057	WITHOUT_CLASSIFICATION	2.1089805894387554E-5	DESIGN
// VERSION UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999341528284121	WITHOUT_CLASSIFICATION	6.584717158784973E-5	DESIGN
// not necessarily a *unique* property reference	WITHOUT_CLASSIFICATION	0.9999403224702629	WITHOUT_CLASSIFICATION	5.967752973719798E-5	DESIGN
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999926813351157	WITHOUT_CLASSIFICATION	7.318664884332837E-6	DESIGN
// contained elements:	WITHOUT_CLASSIFICATION	0.9999351930023088	WITHOUT_CLASSIFICATION	6.480699769113595E-5	DESIGN
// for non-inverse one-to-many, with a not-null fk, add a backref!	WITHOUT_CLASSIFICATION	0.9999966697190904	WITHOUT_CLASSIFICATION	3.330280909613562E-6	DESIGN
// Bind the where	WITHOUT_CLASSIFICATION	0.9998259332291684	WITHOUT_CLASSIFICATION	1.7406677083173182E-4	DESIGN
// Bind the order-by	WITHOUT_CLASSIFICATION	0.9999925156759405	WITHOUT_CLASSIFICATION	7.484324059461517E-6	DESIGN
// Bind the filters	WITHOUT_CLASSIFICATION	0.9999936037913068	WITHOUT_CLASSIFICATION	6.396208693277093E-6	DESIGN
// overriding inherited meta attribute. HBX-621 & HBX-793	WITHOUT_CLASSIFICATION	0.9993358389424132	WITHOUT_CLASSIFICATION	6.641610575868444E-4	DESIGN
// first, iterate over all elements capable of defining an extends attribute // collecting all found extends references if they cannot be resolved // against the already processed mappings.	WITHOUT_CLASSIFICATION	0.999999850218356	WITHOUT_CLASSIFICATION	1.4978164399117182E-7	DESIGN
// mappings might contain either the "raw" extends name (in the case of // an entity-name mapping) or a FQN (in the case of a POJO mapping).	WITHOUT_CLASSIFICATION	0.9999999418562694	WITHOUT_CLASSIFICATION	5.814373060994005E-8	DESIGN
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9933061036184035	WITHOUT_CLASSIFICATION	0.006693896381596403	DESIGN
//SessionFactory name:	WITHOUT_CLASSIFICATION	0.9999696245796746	WITHOUT_CLASSIFICATION	3.0375420325453696E-5	DESIGN
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9999852647121552	WITHOUT_CLASSIFICATION	1.473528784486711E-5	DESIGN
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9999852647121552	WITHOUT_CLASSIFICATION	1.473528784486711E-5	DESIGN
//Interrogate JDBC metadata	WITHOUT_CLASSIFICATION	0.9998109487536572	WITHOUT_CLASSIFICATION	1.890512463427674E-4	DESIGN
// user supplied JDBC connections	WITHOUT_CLASSIFICATION	0.9999956454967874	WITHOUT_CLASSIFICATION	4.3545032125829575E-6	DESIGN
//use dialect default properties	WITHOUT_CLASSIFICATION	0.9999938788388959	WITHOUT_CLASSIFICATION	6.121161104057408E-6	DESIGN
// Transaction settings:	WITHOUT_CLASSIFICATION	0.9999677921940321	WITHOUT_CLASSIFICATION	3.220780596791305E-5	DESIGN
//SQL Generation settings:	WITHOUT_CLASSIFICATION	0.9999731338228136	WITHOUT_CLASSIFICATION	2.686617718643125E-5	DESIGN
//Query parser settings:	WITHOUT_CLASSIFICATION	0.9999522777055235	WITHOUT_CLASSIFICATION	4.772229447642728E-5	DESIGN
// Second-level / query cache:	WITHOUT_CLASSIFICATION	0.9981765204033849	WITHOUT_CLASSIFICATION	0.001823479596615127	DESIGN
// The cache provider is needed when we either have second-level cache enabled // or query cache enabled.  Note that useSecondLevelCache is enabled by default	WITHOUT_CLASSIFICATION	0.9994061798607119	WITHOUT_CLASSIFICATION	5.93820139288162E-4	DESIGN
//SQL Exception converter:	WITHOUT_CLASSIFICATION	0.9997761957171489	WITHOUT_CLASSIFICATION	2.2380428285098303E-4	DESIGN
//Statistics and logging:	WITHOUT_CLASSIFICATION	0.9998848593619986	WITHOUT_CLASSIFICATION	1.1514063800146082E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9997835908563089	WITHOUT_CLASSIFICATION	2.164091436910978E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9997835908563089	WITHOUT_CLASSIFICATION	2.164091436910978E-4	DESIGN
//Schema export:	WITHOUT_CLASSIFICATION	0.9999866596536163	WITHOUT_CLASSIFICATION	1.3340346383640989E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9997835908563089	WITHOUT_CLASSIFICATION	2.164091436910978E-4	DESIGN
// legacy behavior, apply the bridge...	WITHOUT_CLASSIFICATION	0.9998917992094929	WITHOUT_CLASSIFICATION	1.082007905071592E-4	DESIGN
// maybe a concrete SQLpropertyresult type, but Map is exactly what is required at the moment	WITHOUT_CLASSIFICATION	0.990826137398154	WITHOUT_CLASSIFICATION	0.009173862601845972	DESIGN
//if dotted and not load-collection nor return-join //regular property	WITHOUT_CLASSIFICATION	0.9999925402816965	WITHOUT_CLASSIFICATION	7.4597183034527035E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.9997835908563089	WITHOUT_CLASSIFICATION	2.164091436910978E-4	DESIGN
// public getters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9981892112525663	WITHOUT_CLASSIFICATION	0.0018107887474336458	DESIGN
//	WITHOUT_CLASSIFICATION	0.9997835908563089	WITHOUT_CLASSIFICATION	2.164091436910978E-4	DESIGN
// package protected setters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9988509009933638	WITHOUT_CLASSIFICATION	0.0011490990066361907	DESIGN
//	WITHOUT_CLASSIFICATION	0.9997835908563089	WITHOUT_CLASSIFICATION	2.164091436910978E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9997835908563089	WITHOUT_CLASSIFICATION	2.164091436910978E-4	DESIGN
// using local since the inheritedMetas at this point is not the correct map since it is always the empty map	WITHOUT_CLASSIFICATION	0.999997632758494	WITHOUT_CLASSIFICATION	2.3672415060170673E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.9997835908563089	WITHOUT_CLASSIFICATION	2.164091436910978E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9997835908563089	WITHOUT_CLASSIFICATION	2.164091436910978E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9997835908563089	WITHOUT_CLASSIFICATION	2.164091436910978E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9997835908563089	WITHOUT_CLASSIFICATION	2.164091436910978E-4	DESIGN
// if doc is null, then for whatever reason, the cached file cannot be used...	WITHOUT_CLASSIFICATION	0.9995651310797115	WITHOUT_CLASSIFICATION	4.348689202885104E-4	DESIGN
// drop them in reverse order in case db needs it done that way...	WITHOUT_CLASSIFICATION	0.9890704652045854	WITHOUT_CLASSIFICATION	0.010929534795414489	DESIGN
//	WITHOUT_CLASSIFICATION	0.9997835908563089	WITHOUT_CLASSIFICATION	2.164091436910978E-4	DESIGN
// This method may be called many times!!	WITHOUT_CLASSIFICATION	0.9983422155205494	WITHOUT_CLASSIFICATION	0.0016577844794506628	DESIGN
//	WITHOUT_CLASSIFICATION	0.9997835908563089	WITHOUT_CLASSIFICATION	2.164091436910978E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9997835908563089	WITHOUT_CLASSIFICATION	2.164091436910978E-4	DESIGN
// found	WITHOUT_CLASSIFICATION	0.9995333943449772	WITHOUT_CLASSIFICATION	4.6660565502282334E-4	DESIGN
// found	WITHOUT_CLASSIFICATION	0.9995333943449772	WITHOUT_CLASSIFICATION	4.6660565502282334E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9997835908563089	WITHOUT_CLASSIFICATION	2.164091436910978E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9997835908563089	WITHOUT_CLASSIFICATION	2.164091436910978E-4	DESIGN
//<String, String>	WITHOUT_CLASSIFICATION	0.9999863912331911	WITHOUT_CLASSIFICATION	1.3608766808895427E-5	DESIGN
//<String, String>	WITHOUT_CLASSIFICATION	0.9999863912331911	WITHOUT_CLASSIFICATION	1.3608766808895427E-5	DESIGN
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9933061036184035	WITHOUT_CLASSIFICATION	0.006693896381596403	DESIGN
//Set USE_REFLECTION_OPTIMIZER to false to fix HHH-227	WITHOUT_CLASSIFICATION	0.9987185064442426	WITHOUT_CLASSIFICATION	0.001281493555757364	DESIGN
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9972985597105598	WITHOUT_CLASSIFICATION	0.002701440289440195	DESIGN
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.999913183377587	WITHOUT_CLASSIFICATION	8.681662241303901E-5	DESIGN
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999911866733564	WITHOUT_CLASSIFICATION	8.813326643567616E-6	DESIGN
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9972985597105598	WITHOUT_CLASSIFICATION	0.002701440289440195	DESIGN
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.999913183377587	WITHOUT_CLASSIFICATION	8.681662241303901E-5	DESIGN
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9997706292572051	WITHOUT_CLASSIFICATION	2.2937074279490122E-4	DESIGN
//maintain correct duplication if loaded in a cartesian product	WITHOUT_CLASSIFICATION	0.9999978550085857	WITHOUT_CLASSIFICATION	2.1449914141445345E-6	DESIGN
// the element has been removed from the set	WITHOUT_CLASSIFICATION	0.9999841260652358	WITHOUT_CLASSIFICATION	1.5873934764199227E-5	DESIGN
// the element has changed	WITHOUT_CLASSIFICATION	0.9999741727829132	WITHOUT_CLASSIFICATION	2.582721708679271E-5	DESIGN
//Careful: these methods do not initialize the collection.	WITHOUT_CLASSIFICATION	0.9999162031468297	WITHOUT_CLASSIFICATION	8.379685317026589E-5	DESIGN
//needed so that we remove this collection from the second-level cache	WITHOUT_CLASSIFICATION	0.9873648923638687	WITHOUT_CLASSIFICATION	0.01263510763613135	DESIGN
// override on some subclasses	WITHOUT_CLASSIFICATION	0.9999563357627127	WITHOUT_CLASSIFICATION	4.366423728723396E-5	DESIGN
//override on some subclasses	WITHOUT_CLASSIFICATION	0.9998834435609727	WITHOUT_CLASSIFICATION	1.165564390272129E-4	DESIGN
//do this bit after setting initialized to true or it will recurse	WITHOUT_CLASSIFICATION	0.9996829170183279	WITHOUT_CLASSIFICATION	3.1708298167213925E-4	DESIGN
// short-circuit(s) // no new elements, the old list contains only Orphans // no old elements, so no Orphans neither	WITHOUT_CLASSIFICATION	0.9999997793264521	WITHOUT_CLASSIFICATION	2.2067354790948215E-7	DESIGN
// create the collection holding the Orphans	WITHOUT_CLASSIFICATION	0.9999992904988291	WITHOUT_CLASSIFICATION	7.095011710049967E-7	DESIGN
// collect EntityIdentifier(s) of the *current* elements - add them into a HashSet for fast access	WITHOUT_CLASSIFICATION	0.9999907100079523	WITHOUT_CLASSIFICATION	9.289992047796555E-6	DESIGN
// iterate over the *old* list	WITHOUT_CLASSIFICATION	0.9999730637557656	WITHOUT_CLASSIFICATION	2.6936244234468845E-5	DESIGN
/*(array==null) ? tempList.size() :*/	WITHOUT_CLASSIFICATION	0.9993034619062813	WITHOUT_CLASSIFICATION	6.965380937188253E-4	DESIGN
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999911866733564	WITHOUT_CLASSIFICATION	8.813326643567616E-6	DESIGN
/*(array==null) ? tempList.get(i) :*/	WITHOUT_CLASSIFICATION	0.9995777242340548	WITHOUT_CLASSIFICATION	4.222757659452165E-4	DESIGN
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9973214132823048	WITHOUT_CLASSIFICATION	0.0026785867176951665	DESIGN
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9973214132823048	WITHOUT_CLASSIFICATION	0.0026785867176951665	DESIGN
// amazingly, these two will work because AbstractCollection // uses iterator() to fill the array	WITHOUT_CLASSIFICATION	0.9865836942142678	WITHOUT_CLASSIFICATION	0.01341630578573217	DESIGN
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9997706292572051	WITHOUT_CLASSIFICATION	2.2937074279490122E-4	DESIGN
// finally, what it's all about...	WITHOUT_CLASSIFICATION	0.9917789064815745	WITHOUT_CLASSIFICATION	0.008221093518425494	DESIGN
// note that if we load this collection from a cartesian product // the multiplicity would be broken ... so use an idbag instead	WITHOUT_CLASSIFICATION	0.5025061975149968	DESIGN	0.49749380248500313	WITHOUT_CLASSIFICATION
// Anyway, here we implement <set> semantics for a // <one-to-many> <bag>!	WITHOUT_CLASSIFICATION	0.9999937129483165	WITHOUT_CLASSIFICATION	6.28705168344006E-6	DESIGN
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999953747832153	WITHOUT_CLASSIFICATION	4.625216784773368E-6	DESIGN
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9999851826517526	WITHOUT_CLASSIFICATION	1.481734824740379E-5	DESIGN
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9997706292572051	WITHOUT_CLASSIFICATION	2.2937074279490122E-4	DESIGN
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999953747832153	WITHOUT_CLASSIFICATION	4.625216784773368E-6	DESIGN
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9999851826517526	WITHOUT_CLASSIFICATION	1.481734824740379E-5	DESIGN
/*public boolean equals(Object other) {	WITHOUT_CLASSIFICATION	0.9999519235580452	WITHOUT_CLASSIFICATION	4.807644195487338E-5	DESIGN
// List OPERATIONS:	WITHOUT_CLASSIFICATION	0.9999677830059077	WITHOUT_CLASSIFICATION	3.221699409232208E-5	DESIGN
//pad with nulls from the current last element up to the new index	WITHOUT_CLASSIFICATION	0.9999995228290209	WITHOUT_CLASSIFICATION	4.771709790350164E-7	DESIGN
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9997706292572051	WITHOUT_CLASSIFICATION	2.2937074279490122E-4	DESIGN
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9997706292572051	WITHOUT_CLASSIFICATION	2.2937074279490122E-4	DESIGN
// from Map	WITHOUT_CLASSIFICATION	0.999936416863976	WITHOUT_CLASSIFICATION	6.358313602387881E-5	DESIGN
// from SortedMap	WITHOUT_CLASSIFICATION	0.9999769657366356	WITHOUT_CLASSIFICATION	2.3034263364349836E-5	DESIGN
//inject the data	WITHOUT_CLASSIFICATION	0.9999860752006015	WITHOUT_CLASSIFICATION	1.3924799398520396E-5	DESIGN
// cannot be instantiated	WITHOUT_CLASSIFICATION	0.9998704281936878	WITHOUT_CLASSIFICATION	1.2957180631225615E-4	DESIGN
//default pool size 20	WITHOUT_CLASSIFICATION	0.9999878734249417	WITHOUT_CLASSIFICATION	1.2126575058437454E-5	DESIGN
// trying via forName() first to be as close to DriverManager's semantics	WITHOUT_CLASSIFICATION	0.9999990362034935	WITHOUT_CLASSIFICATION	9.637965063907278E-7	DESIGN
// if debug level is enabled, then log the password, otherwise mask it	WITHOUT_CLASSIFICATION	0.9999956643217374	WITHOUT_CLASSIFICATION	4.3356782626572094E-6	DESIGN
// register a cleanup synch	WITHOUT_CLASSIFICATION	0.9999284786021729	WITHOUT_CLASSIFICATION	7.152139782703735E-5	DESIGN
// wrap the session in the transaction-protection proxy	WITHOUT_CLASSIFICATION	0.9999997510617402	WITHOUT_CLASSIFICATION	2.489382598307444E-7	DESIGN
// then bind it	WITHOUT_CLASSIFICATION	0.9999421661543477	WITHOUT_CLASSIFICATION	5.783384565224727E-5	DESIGN
// try to make sure we don't wrap and already wrapped session	WITHOUT_CLASSIFICATION	0.9999863468529633	WITHOUT_CLASSIFICATION	1.3653147036800697E-5	DESIGN
// allow these to go through the the real session no matter what	WITHOUT_CLASSIFICATION	0.9999861695435606	WITHOUT_CLASSIFICATION	1.3830456439505593E-5	DESIGN
// limit the methods available if no transaction is active	WITHOUT_CLASSIFICATION	0.999999980195469	WITHOUT_CLASSIFICATION	1.9804531002854177E-8	DESIGN
// allow these (deprecated) methods to pass through	WITHOUT_CLASSIFICATION	0.9999720432618169	WITHOUT_CLASSIFICATION	2.7956738183114913E-5	DESIGN
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999953710599989	WITHOUT_CLASSIFICATION	4.628940001061313E-6	DESIGN
// We could register the session against the transaction even though it is // not started, but we'd have no guarentee of ever getting the map // entries cleaned up (aside from spawning threads).	WITHOUT_CLASSIFICATION	0.9999948774853531	WITHOUT_CLASSIFICATION	5.12251464691638E-6	DESIGN
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9998130410999274	WITHOUT_CLASSIFICATION	1.8695890007250203E-4	DESIGN
//private String propertyName;	WITHOUT_CLASSIFICATION	0.9999550457847256	WITHOUT_CLASSIFICATION	4.495421527440814E-5	DESIGN
/*public PropertyProjection project() {	WITHOUT_CLASSIFICATION	0.9912786164114564	WITHOUT_CLASSIFICATION	0.008721383588543602	DESIGN
//String[] fk = StringHelper.qualify( "collection_", cp.getKeyColumnNames() );	WITHOUT_CLASSIFICATION	0.9999985817315109	WITHOUT_CLASSIFICATION	1.418268489143928E-6	DESIGN
//" collection_ where " +	WITHOUT_CLASSIFICATION	0.9999403798364009	WITHOUT_CLASSIFICATION	5.9620163599177074E-5	DESIGN
//unsupported	WITHOUT_CLASSIFICATION	0.999953743830888	WITHOUT_CLASSIFICATION	4.6256169112131856E-5	DESIGN
//unsupported	WITHOUT_CLASSIFICATION	0.999953743830888	WITHOUT_CLASSIFICATION	4.6256169112131856E-5	DESIGN
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9998130410999274	WITHOUT_CLASSIFICATION	1.8695890007250203E-4	DESIGN
//the following two lines were added to ensure that this.params is not null, which //can happen with two-deep nested subqueries	WITHOUT_CLASSIFICATION	0.9997718085560828	WITHOUT_CLASSIFICATION	2.2819144391717676E-4	DESIGN
//with two-deep subqueries, the same alias would get generated for //both using the old method (criteriaQuery.generateSQLAlias()), so //that is now used as a fallback if the main criteria alias isn't set	WITHOUT_CLASSIFICATION	0.89344612046105	WITHOUT_CLASSIFICATION	0.10655387953895	DESIGN
//implicit polymorphism not supported (would need a union)	WITHOUT_CLASSIFICATION	0.9926023247140081	WITHOUT_CLASSIFICATION	0.007397675285991887	DESIGN
//pull off the last ", "	WITHOUT_CLASSIFICATION	0.999986711159987	WITHOUT_CLASSIFICATION	1.3288840012819107E-5	DESIGN
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999816775490331	WITHOUT_CLASSIFICATION	1.8322450966938758E-5	DESIGN
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces	WITHOUT_CLASSIFICATION	0.9997555657324086	WITHOUT_CLASSIFICATION	2.444342675913825E-4	DESIGN
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource)	WITHOUT_CLASSIFICATION	0.9739918924607777	WITHOUT_CLASSIFICATION	0.026008107539222315	DESIGN
// NOT_SUPPORTED_SHOULD_USE_JDBC3_PreparedStatement.getGeneratedKeys_method	WITHOUT_CLASSIFICATION	0.9999909151469759	WITHOUT_CLASSIFICATION	9.084853024152912E-6	DESIGN
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999970119457651	WITHOUT_CLASSIFICATION	2.9880542349003342E-6	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999953214055792	WITHOUT_CLASSIFICATION	4.678594420818495E-6	DESIGN
// Oracle did add support for ANSI CASE statements in 9i	WITHOUT_CLASSIFICATION	0.999861517018296	WITHOUT_CLASSIFICATION	1.3848298170399316E-4	DESIGN
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999995466808667	WITHOUT_CLASSIFICATION	4.533191333239269E-7	DESIGN
// Informix doesn't have a bit type	WITHOUT_CLASSIFICATION	0.9999661542531338	WITHOUT_CLASSIFICATION	3.384574686612215E-5	DESIGN
// or BYTE // or TEXT? // or MONEY	WITHOUT_CLASSIFICATION	0.999401103863585	WITHOUT_CLASSIFICATION	5.988961364148833E-4	DESIGN
// strip table-owner because Informix always returns constraint names as "<table-owner>.<constraint-name>"	WITHOUT_CLASSIFICATION	0.9999999563858778	WITHOUT_CLASSIFICATION	4.3614122171831905E-8	DESIGN
// build the map of standard ANSI SQL aggregation functions ~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999835212683	WITHOUT_CLASSIFICATION	1.6478731713241762E-8	DESIGN
//pre H3.2 behavior: super.getReturnType(ct, m);	WITHOUT_CLASSIFICATION	0.999168338505718	WITHOUT_CLASSIFICATION	8.316614942821206E-4	DESIGN
// finally use the sqltype if == on Hibernate types did not find a match.	WITHOUT_CLASSIFICATION	0.9998373251419884	WITHOUT_CLASSIFICATION	1.626748580116314E-4	DESIGN
//because numeric can be anything	WITHOUT_CLASSIFICATION	0.9998807778081161	WITHOUT_CLASSIFICATION	1.1922219188388895E-4	DESIGN
// constructors and factory methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999714812205511	WITHOUT_CLASSIFICATION	2.8518779448897858E-5	DESIGN
// standard sql92 functions (can be overridden by subclasses)	WITHOUT_CLASSIFICATION	0.999993250599552	WITHOUT_CLASSIFICATION	6.749400448006229E-6	DESIGN
//map second/minute/hour/day/month/year to ANSI extract(), override on subclasses	WITHOUT_CLASSIFICATION	0.9999836707834464	WITHOUT_CLASSIFICATION	1.6329216553541452E-5	DESIGN
// register hibernate types for default use in scalar sqlquery type auto detection	WITHOUT_CLASSIFICATION	0.9998879264061291	WITHOUT_CLASSIFICATION	1.1207359387095459E-4	DESIGN
// database type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99999780730075	WITHOUT_CLASSIFICATION	2.1926992499296707E-6	DESIGN
// hibernate type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999716601651396	WITHOUT_CLASSIFICATION	2.8339834860517023E-5	DESIGN
// keyword support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999089848382103	WITHOUT_CLASSIFICATION	9.101516178960932E-5	DESIGN
// native identifier generatiion ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999980755010587	WITHOUT_CLASSIFICATION	1.924498941290319E-6	DESIGN
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999976362924407	WITHOUT_CLASSIFICATION	2.363707559304076E-5	DESIGN
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999691523961971	WITHOUT_CLASSIFICATION	3.0847603802876395E-5	DESIGN
// GUID support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999342117558101	WITHOUT_CLASSIFICATION	6.578824418986562E-5	DESIGN
// limit/offset support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999800471228931	WITHOUT_CLASSIFICATION	1.9952877106980675E-5	DESIGN
// by default we report no support	WITHOUT_CLASSIFICATION	0.9999196113670494	WITHOUT_CLASSIFICATION	8.038863295053845E-5	DESIGN
// by default we report no support for NOWAIT lock semantics	WITHOUT_CLASSIFICATION	0.999978839803817	WITHOUT_CLASSIFICATION	2.1160196183067893E-5	DESIGN
// table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999982532985106	WITHOUT_CLASSIFICATION	1.7467014894379155E-6	DESIGN
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999817725981975	WITHOUT_CLASSIFICATION	1.8227401802392777E-5	DESIGN
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999163546219481	WITHOUT_CLASSIFICATION	8.364537805190505E-5	DESIGN
// current timestamp support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999981743964343	WITHOUT_CLASSIFICATION	1.825603565550415E-6	DESIGN
// SQLException support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999528234579069	WITHOUT_CLASSIFICATION	4.717654209310845E-5	DESIGN
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999158582914701	WITHOUT_CLASSIFICATION	8.414170852990416E-5	DESIGN
// identifier quoting support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999799287254633	WITHOUT_CLASSIFICATION	2.0071274536812037E-5	DESIGN
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999802251110496	WITHOUT_CLASSIFICATION	1.9774888950445146E-5	DESIGN
// grrr... for differentiation of mysql storage engines	WITHOUT_CLASSIFICATION	0.9999944289509477	WITHOUT_CLASSIFICATION	5.57104905227467E-6	DESIGN
// Informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999996518028099	WITHOUT_CLASSIFICATION	3.481971901021145E-6	DESIGN
// return false here, as most databases do not properly support this construct...	WITHOUT_CLASSIFICATION	0.8785664479083356	WITHOUT_CLASSIFICATION	0.12143355209166448	DESIGN
// Mckoi has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9997534943727926	WITHOUT_CLASSIFICATION	2.4650562720733826E-4	DESIGN
// Oracle8 and previous define only a "DATE" type which //      is used to represent all aspects of date/time	WITHOUT_CLASSIFICATION	0.999977066670761	WITHOUT_CLASSIFICATION	2.2933329238900742E-5	DESIGN
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999236951313388	WITHOUT_CLASSIFICATION	7.630486866125455E-5	DESIGN
//" cascade";	WITHOUT_CLASSIFICATION	0.999794710464183	WITHOUT_CLASSIFICATION	2.0528953581695978E-4	DESIGN
//trim off the length/precision/scale	WITHOUT_CLASSIFICATION	0.99999610495957	WITHOUT_CLASSIFICATION	3.895040429931991E-6	DESIGN
/*public boolean dropTemporaryTableAfterUse() {	WITHOUT_CLASSIFICATION	0.9327341906244269	WITHOUT_CLASSIFICATION	0.0672658093755732	DESIGN
// CHECK VIOLATION	WITHOUT_CLASSIFICATION	0.9999513659868919	WITHOUT_CLASSIFICATION	4.863401310798513E-5	DESIGN
// UNIQUE VIOLATION	WITHOUT_CLASSIFICATION	0.9998832943243237	WITHOUT_CLASSIFICATION	1.1670567567629847E-4	DESIGN
// FOREIGN KEY VIOLATION	WITHOUT_CLASSIFICATION	0.999938412416332	WITHOUT_CLASSIFICATION	6.158758366800648E-5	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999953214055792	WITHOUT_CLASSIFICATION	4.678594420818495E-6	DESIGN
// NOT NULL VIOLATION	WITHOUT_CLASSIFICATION	0.9999376357271703	WITHOUT_CLASSIFICATION	6.236427282973549E-5	DESIGN
// ALL OTHER	WITHOUT_CLASSIFICATION	0.9999278365902987	WITHOUT_CLASSIFICATION	7.216340970131795E-5	DESIGN
// Register the type of the out param - PostgreSQL uses Types.OTHER	WITHOUT_CLASSIFICATION	0.9999925810539693	WITHOUT_CLASSIFICATION	7.418946030707637E-6	DESIGN
// seems to not really... //	WITHOUT_CLASSIFICATION	0.9996703813383194	WITHOUT_CLASSIFICATION	3.296186616804816E-4	DESIGN
// seems to have spotty LOB suppport	WITHOUT_CLASSIFICATION	0.9999527045181587	WITHOUT_CLASSIFICATION	4.729548184137147E-5	DESIGN
// HHH-2300	WITHOUT_CLASSIFICATION	0.9998340535443772	WITHOUT_CLASSIFICATION	1.659464556229768E-4	DESIGN
// ignore (probably H2 not in the classpath)	WITHOUT_CLASSIFICATION	0.9998542900415747	WITHOUT_CLASSIFICATION	1.4570995842542707E-4	DESIGN
// Numeric Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999996725164788	WITHOUT_CLASSIFICATION	3.274835212036564E-6	DESIGN
// String Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992259210431	WITHOUT_CLASSIFICATION	7.740789569274379E-7	DESIGN
// Time and Date Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999854646684424	WITHOUT_CLASSIFICATION	1.4535331557628724E-5	DESIGN
// System Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999945132335173	WITHOUT_CLASSIFICATION	5.486766482730075E-6	DESIGN
// not null is implicit	WITHOUT_CLASSIFICATION	0.9993584759787381	WITHOUT_CLASSIFICATION	6.415240212619401E-4	DESIGN
// 23000: Check constraint violation: {0} // 23001: Unique index or primary key violation: {0}	WITHOUT_CLASSIFICATION	0.9999848788412864	WITHOUT_CLASSIFICATION	1.5121158713590415E-5	DESIGN
// Display the dialect version.	WITHOUT_CLASSIFICATION	0.9999965665769971	WITHOUT_CLASSIFICATION	3.4334230030130436E-6	DESIGN
// The RDMS concat() function only supports 2 parameters	WITHOUT_CLASSIFICATION	0.9994239401448469	WITHOUT_CLASSIFICATION	5.760598551530053E-4	DESIGN
// Dialect method overrides ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999104381145	WITHOUT_CLASSIFICATION	8.956188550023535E-7	DESIGN
// Original Dialect.java returns " for update";	WITHOUT_CLASSIFICATION	0.999983052173056	WITHOUT_CLASSIFICATION	1.6947826943896E-5	DESIGN
// Verify the state of this new method in Hibernate 3.0 Dialect.java	WITHOUT_CLASSIFICATION	0.9999591223836569	WITHOUT_CLASSIFICATION	4.0877616342954045E-5	DESIGN
// Origial Dialect.java returns true;	WITHOUT_CLASSIFICATION	0.9999968283063029	WITHOUT_CLASSIFICATION	3.171693697251172E-6	DESIGN
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9998311004200339	WITHOUT_CLASSIFICATION	1.6889957996602214E-4	DESIGN
// *** Sequence methods - start. The RDMS dialect needs these	WITHOUT_CLASSIFICATION	0.9989066115484081	WITHOUT_CLASSIFICATION	0.0010933884515918451	DESIGN
// methods to make it possible to use the Native Id generator	WITHOUT_CLASSIFICATION	0.999988179072604	WITHOUT_CLASSIFICATION	1.182092739616309E-5	DESIGN
// The where clause was added to eliminate this statement from Brute Force Searches.	WITHOUT_CLASSIFICATION	0.997026852677564	WITHOUT_CLASSIFICATION	0.0029731473224360173	DESIGN
// *** Sequence methods - end	WITHOUT_CLASSIFICATION	0.9998097031014889	WITHOUT_CLASSIFICATION	1.9029689851124147E-4	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999953214055792	WITHOUT_CLASSIFICATION	4.678594420818495E-6	DESIGN
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999236951313388	WITHOUT_CLASSIFICATION	7.630486866125455E-5	DESIGN
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.9846133021950367	WITHOUT_CLASSIFICATION	0.015386697804963339	DESIGN
// Used with DROP TABLE to delete all records in the table.	WITHOUT_CLASSIFICATION	0.9998472040001374	WITHOUT_CLASSIFICATION	1.527959998625644E-4	DESIGN
// RDMS supports the UNION ALL clause.	WITHOUT_CLASSIFICATION	0.9999026174667986	WITHOUT_CLASSIFICATION	9.738253320135741E-5	DESIGN
// RDMS has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9943978379731402	WITHOUT_CLASSIFICATION	0.005602162026859835	DESIGN
// Multi-param dialect functions...	WITHOUT_CLASSIFICATION	0.9999448706050483	WITHOUT_CLASSIFICATION	5.5129394951786973E-5	DESIGN
// function templates	WITHOUT_CLASSIFICATION	0.999999083223901	WITHOUT_CLASSIFICATION	9.167760990786035E-7	DESIGN
//not null is implicit	WITHOUT_CLASSIFICATION	0.99954373408666	WITHOUT_CLASSIFICATION	4.562659133399103E-4	DESIGN
// this assumes schema support, which is present in 1.8.0 and later...	WITHOUT_CLASSIFICATION	0.9992572148630063	WITHOUT_CLASSIFICATION	7.427851369936357E-4	DESIGN
// HSQLDB only supports READ_UNCOMMITTED transaction isolation	WITHOUT_CLASSIFICATION	0.9998086872453833	WITHOUT_CLASSIFICATION	1.913127546167348E-4	DESIGN
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999797989560893	WITHOUT_CLASSIFICATION	2.0201043910633368E-5	DESIGN
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.999841374089739	WITHOUT_CLASSIFICATION	1.5862591026092948E-4	DESIGN
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999482968991413	WITHOUT_CLASSIFICATION	5.170310085873279E-5	DESIGN
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999563511712025	WITHOUT_CLASSIFICATION	4.364882879745641E-5	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999953214055792	WITHOUT_CLASSIFICATION	4.678594420818495E-6	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999953214055792	WITHOUT_CLASSIFICATION	4.678594420818495E-6	DESIGN
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9974345688413577	WITHOUT_CLASSIFICATION	0.0025654311586423006	DESIGN
//	WITHOUT_CLASSIFICATION	0.9997835908563089	WITHOUT_CLASSIFICATION	2.164091436910978E-4	DESIGN
// TimesTen has no BLOB/CLOB support, but these types may be suitable  // for some applications. The length is limited to 4 million bytes.	WITHOUT_CLASSIFICATION	0.999995405917941	WITHOUT_CLASSIFICATION	4.594082059078683E-6	DESIGN
// new methods in dialect3	WITHOUT_CLASSIFICATION	0.9999440106571262	WITHOUT_CLASSIFICATION	5.598934287380411E-5	DESIGN
/*public boolean supportsForUpdateNowait() {	WITHOUT_CLASSIFICATION	0.9997381785030717	WITHOUT_CLASSIFICATION	2.61821496928349E-4	DESIGN
// TimesTen has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.999722295115775	WITHOUT_CLASSIFICATION	2.777048842249387E-4	DESIGN
// iterate entries ordered by capacity to find first fit	WITHOUT_CLASSIFICATION	0.9999818253492329	WITHOUT_CLASSIFICATION	1.8174650767116036E-5	DESIGN
// add new ordered map	WITHOUT_CLASSIFICATION	0.9999924478734638	WITHOUT_CLASSIFICATION	7.552126536288479E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.9997835908563089	WITHOUT_CLASSIFICATION	2.164091436910978E-4	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999953214055792	WITHOUT_CLASSIFICATION	4.678594420818495E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.9997835908563089	WITHOUT_CLASSIFICATION	2.164091436910978E-4	DESIGN
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999671095734258	WITHOUT_CLASSIFICATION	3.289042657413519E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9997835908563089	WITHOUT_CLASSIFICATION	2.164091436910978E-4	DESIGN
//registerColumnType data types	WITHOUT_CLASSIFICATION	0.9999638902645881	WITHOUT_CLASSIFICATION	3.610973541190688E-5	DESIGN
// hibernate seems to ignore this type...	WITHOUT_CLASSIFICATION	0.999795850520455	WITHOUT_CLASSIFICATION	2.0414947954500398E-4	DESIGN
// IBID for current_time and current_date	WITHOUT_CLASSIFICATION	0.9999974768204595	WITHOUT_CLASSIFICATION	2.52317954058921E-6	DESIGN
// Tell hibernate to use getBytes instead of getBinaryStream	WITHOUT_CLASSIFICATION	0.9868392806903902	WITHOUT_CLASSIFICATION	0.013160719309609823	DESIGN
// No batch statements	WITHOUT_CLASSIFICATION	0.99999942365499	WITHOUT_CLASSIFICATION	5.763450099953195E-7	DESIGN
/*	WITHOUT_CLASSIFICATION	0.9986553605278979	WITHOUT_CLASSIFICATION	0.0013446394721020986	DESIGN
//no pointbase BIT	WITHOUT_CLASSIFICATION	0.9999920848337813	WITHOUT_CLASSIFICATION	7.915166218680236E-6	DESIGN
//no pointbase TINYINT	WITHOUT_CLASSIFICATION	0.9999920540879801	WITHOUT_CLASSIFICATION	7.945912019861993E-6	DESIGN
// Pointbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999277143445053	WITHOUT_CLASSIFICATION	7.228565549458797E-5	DESIGN
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999236951313388	WITHOUT_CLASSIFICATION	7.630486866125455E-5	DESIGN
// The current_timestamp is more accurate, but only known to be supported // in SQL Server 7.0 and later (i.e., Sybase not known to support it at all)	WITHOUT_CLASSIFICATION	0.9999913036331635	WITHOUT_CLASSIFICATION	8.69636683644503E-6	DESIGN
// SQL Server (at least up through 2005) does not support defining // cascade delete constraints which can circel back to the mutating // table	WITHOUT_CLASSIFICATION	0.9999885316030079	WITHOUT_CLASSIFICATION	1.1468396992143243E-5	DESIGN
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.995549585425134	WITHOUT_CLASSIFICATION	0.004450414574865921	DESIGN
//	WITHOUT_CLASSIFICATION	0.9997835908563089	WITHOUT_CLASSIFICATION	2.164091436910978E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9997835908563089	WITHOUT_CLASSIFICATION	2.164091436910978E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9997835908563089	WITHOUT_CLASSIFICATION	2.164091436910978E-4	DESIGN
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999236951313388	WITHOUT_CLASSIFICATION	7.630486866125455E-5	DESIGN
/* package-private */	WITHOUT_CLASSIFICATION	0.9999276601596846	WITHOUT_CLASSIFICATION	7.233984031541613E-5	DESIGN
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999671095734258	WITHOUT_CLASSIFICATION	3.289042657413519E-5	DESIGN
//Sybase BIT type does not support null values	WITHOUT_CLASSIFICATION	0.9999914311731756	WITHOUT_CLASSIFICATION	8.568826824513807E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.9997835908563089	WITHOUT_CLASSIFICATION	2.164091436910978E-4	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999953214055792	WITHOUT_CLASSIFICATION	4.678594420818495E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.9997835908563089	WITHOUT_CLASSIFICATION	2.164091436910978E-4	DESIGN
//not null ... (start with 1) is implicit	WITHOUT_CLASSIFICATION	0.99992441620635	WITHOUT_CLASSIFICATION	7.558379365009287E-5	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999953214055792	WITHOUT_CLASSIFICATION	4.678594420818495E-6	DESIGN
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999946889118789	WITHOUT_CLASSIFICATION	5.311088121085895E-6	DESIGN
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999797989560893	WITHOUT_CLASSIFICATION	2.0201043910633368E-5	DESIGN
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.999841374089739	WITHOUT_CLASSIFICATION	1.5862591026092948E-4	DESIGN
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999482968991413	WITHOUT_CLASSIFICATION	5.170310085873279E-5	DESIGN
// add another (inner) nested select // add the main query // close off the inner nested select	WITHOUT_CLASSIFICATION	0.9999944812580601	WITHOUT_CLASSIFICATION	5.518741939888808E-6	DESIGN
// add the main query	WITHOUT_CLASSIFICATION	0.9999797375048174	WITHOUT_CLASSIFICATION	2.026249518259526E-5	DESIGN
//add the restriction to the outer select	WITHOUT_CLASSIFICATION	0.9999979658205518	WITHOUT_CLASSIFICATION	2.0341794481543314E-6	DESIGN
// This assumes you will want to ignore any update counts 	WITHOUT_CLASSIFICATION	0.990382749794376	WITHOUT_CLASSIFICATION	0.009617250205624022	DESIGN
// You may still have other ResultSets or update counts left to process here  // but you can't do it now or the ResultSet you just got will be closed 	WITHOUT_CLASSIFICATION	0.9935664037793795	WITHOUT_CLASSIFICATION	0.006433596220620455	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999953214055792	WITHOUT_CLASSIFICATION	4.678594420818495E-6	DESIGN
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999236951313388	WITHOUT_CLASSIFICATION	7.630486866125455E-5	DESIGN
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999563511712025	WITHOUT_CLASSIFICATION	4.364882879745641E-5	DESIGN
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9974345688413577	WITHOUT_CLASSIFICATION	0.0025654311586423006	DESIGN
//	WITHOUT_CLASSIFICATION	0.9997835908563089	WITHOUT_CLASSIFICATION	2.164091436910978E-4	DESIGN
// features which change between 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999308501016524	WITHOUT_CLASSIFICATION	6.914989834761194E-5	DESIGN
// features which remain constant across 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999969762307691	WITHOUT_CLASSIFICATION	3.0237692308007855E-6	DESIGN
// binary %Stream // character %Stream	WITHOUT_CLASSIFICATION	0.999980218566815	WITHOUT_CLASSIFICATION	1.9781433185027988E-5	DESIGN
//getDefaultProperties().setProperty(Environment.STATEMENT_BATCH_SIZE, NO_BATCH);	WITHOUT_CLASSIFICATION	0.9999547543990053	WITHOUT_CLASSIFICATION	4.524560099481703E-5	DESIGN
// hibernate impelemnts cast in Dialect.java	WITHOUT_CLASSIFICATION	0.999968306800464	WITHOUT_CLASSIFICATION	3.1693199535993214E-5	DESIGN
// aggregate functions shouldn't be registered, right? //registerFunction( "list", new StandardSQLFunction("list",Hibernate.STRING) ); // stopped on $list	WITHOUT_CLASSIFICATION	0.9999578428232384	WITHOUT_CLASSIFICATION	4.215717676152495E-5	DESIGN
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999802251110496	WITHOUT_CLASSIFICATION	1.9774888950445146E-5	DESIGN
// below is for Cache' that don't have str in 2007.1 there is str and we register str directly	WITHOUT_CLASSIFICATION	0.9999776308918583	WITHOUT_CLASSIFICATION	2.236910814179054E-5	DESIGN
// note that %string is deprecated	WITHOUT_CLASSIFICATION	0.9941135687887442	WITHOUT_CLASSIFICATION	0.005886431211255777	DESIGN
// %upper is deprecated	WITHOUT_CLASSIFICATION	0.980015494346301	WITHOUT_CLASSIFICATION	0.019984505653699046	DESIGN
// The syntax used to add a foreign key constraint to a table.	WITHOUT_CLASSIFICATION	0.9998634416814679	WITHOUT_CLASSIFICATION	1.3655831853213353E-4	DESIGN
// identifier-commalist	WITHOUT_CLASSIFICATION	0.9999900425292035	WITHOUT_CLASSIFICATION	9.957470796510475E-6	DESIGN
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999976362924407	WITHOUT_CLASSIFICATION	2.363707559304076E-5	DESIGN
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999691523961971	WITHOUT_CLASSIFICATION	3.0847603802876395E-5	DESIGN
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999817725981975	WITHOUT_CLASSIFICATION	1.8227401802392777E-5	DESIGN
// identifier-commalist	WITHOUT_CLASSIFICATION	0.9999900425292035	WITHOUT_CLASSIFICATION	9.957470796510475E-6	DESIGN
// The syntax used to add a column to a table	WITHOUT_CLASSIFICATION	0.9907859720504592	WITHOUT_CLASSIFICATION	0.00921402794954081	DESIGN
// Completely optional cascading drop clause.	WITHOUT_CLASSIFICATION	0.9999804561711817	WITHOUT_CLASSIFICATION	1.954382881821583E-5	DESIGN
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999930023644236	WITHOUT_CLASSIFICATION	6.997635576438178E-6	DESIGN
// LIMIT support (ala TOP) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9989215580176671	WITHOUT_CLASSIFICATION	0.001078441982332911	DESIGN
// InterSystems Cache' does not current support "SELECT ... FOR UPDATE" syntax... // Set your transaction mode to READ_COMMITTED before using	WITHOUT_CLASSIFICATION	0.9999971473492956	WITHOUT_CLASSIFICATION	2.8526507044464407E-6	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999953214055792	WITHOUT_CLASSIFICATION	4.678594420818495E-6	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999953214055792	WITHOUT_CLASSIFICATION	4.678594420818495E-6	DESIGN
/*<String>*/	WITHOUT_CLASSIFICATION	0.9999880032340887	WITHOUT_CLASSIFICATION	1.1996765911397605E-5	DESIGN
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999163546219481	WITHOUT_CLASSIFICATION	8.364537805190505E-5	DESIGN
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999158582914701	WITHOUT_CLASSIFICATION	8.414170852990416E-5	DESIGN
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9998311004200339	WITHOUT_CLASSIFICATION	1.6889957996602214E-4	DESIGN
// Does the LIMIT clause come at the start of the SELECT statement, rather than at the end?	WITHOUT_CLASSIFICATION	0.999924030976763	WITHOUT_CLASSIFICATION	7.596902323699417E-5	DESIGN
// Does the LIMIT clause take a "maximum" row number instead of a total number of returned rows?	WITHOUT_CLASSIFICATION	0.998663291962401	WITHOUT_CLASSIFICATION	0.001336708037598954	DESIGN
// The name of the SQL function that transforms a string to lowercase	WITHOUT_CLASSIFICATION	0.9999994777386273	WITHOUT_CLASSIFICATION	5.222613726813719E-7	DESIGN
// Create an OuterJoinGenerator for this dialect.	WITHOUT_CLASSIFICATION	0.9999661947113775	WITHOUT_CLASSIFICATION	3.3805288622404445E-5	DESIGN
// The keyword used to insert a row without specifying // any column values	WITHOUT_CLASSIFICATION	0.9998467154929859	WITHOUT_CLASSIFICATION	1.5328450701426407E-4	DESIGN
//registerFunction( "trim", new StandardSQLFunction( "trim", Hibernate.STRING ) );	WITHOUT_CLASSIFICATION	0.9999995722981114	WITHOUT_CLASSIFICATION	4.277018885878401E-7	DESIGN
//skip the FROM keyword in params	WITHOUT_CLASSIFICATION	0.9999799179859771	WITHOUT_CLASSIFICATION	2.0082014022964917E-5	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.9998081652754702	WITHOUT_CLASSIFICATION	1.9183472452976072E-4	DESIGN
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999970119457651	WITHOUT_CLASSIFICATION	2.9880542349003342E-6	DESIGN
// SQLFunction implementation	WITHOUT_CLASSIFICATION	0.9999988064280794	WITHOUT_CLASSIFICATION	1.1935719206118681E-6	DESIGN
// conceivable that the dialect ctor could throw HibernateExceptions, so don't re-wrap	WITHOUT_CLASSIFICATION	0.995787035433308	WITHOUT_CLASSIFICATION	0.004212964566691897	DESIGN
// register the standard dialect resolver	WITHOUT_CLASSIFICATION	0.9999989025459055	WITHOUT_CLASSIFICATION	1.0974540944612459E-6	DESIGN
// register resolvers set via Environment property	WITHOUT_CLASSIFICATION	0.9999885536125328	WITHOUT_CLASSIFICATION	1.144638746720602E-5	DESIGN
// kept for backward compatibility until after the 3.1beta5 release of HA	WITHOUT_CLASSIFICATION	0.9999348088934329	WITHOUT_CLASSIFICATION	6.519110656702855E-5	DESIGN
//cache the hashcode	WITHOUT_CLASSIFICATION	0.9998604355618749	WITHOUT_CLASSIFICATION	1.3956443812509773E-4	DESIGN
// the CascadingAction contract ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999884638809061	WITHOUT_CLASSIFICATION	1.1536119093857354E-5	DESIGN
// the CascadingAction implementations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999953438517158	WITHOUT_CLASSIFICATION	4.65614828415553E-6	DESIGN
// delete does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999691545984394	WITHOUT_CLASSIFICATION	3.0845401560525744E-5	DESIGN
// orphans should be deleted during delete	WITHOUT_CLASSIFICATION	0.9999168303653538	WITHOUT_CLASSIFICATION	8.316963464622838E-5	DESIGN
/*(LockMode) anything*/	WITHOUT_CLASSIFICATION	0.9997497802524634	WITHOUT_CLASSIFICATION	2.502197475366118E-4	DESIGN
// lock doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999527561929302	WITHOUT_CLASSIFICATION	4.7243807069792055E-5	DESIGN
// refresh doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999885121947351	WITHOUT_CLASSIFICATION	1.1487805265003225E-5	DESIGN
// evicts don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.999913317426161	WITHOUT_CLASSIFICATION	8.668257383896431E-5	DESIGN
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999512657085807	WITHOUT_CLASSIFICATION	4.8734291419348916E-5	DESIGN
// orphans should be deleted during save/update	WITHOUT_CLASSIFICATION	0.9999347652619421	WITHOUT_CLASSIFICATION	6.523473805785776E-5	DESIGN
// for deprecated saveOrUpdateCopy()	WITHOUT_CLASSIFICATION	0.9983684366416423	WITHOUT_CLASSIFICATION	0.001631563358357645	DESIGN
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9998279212839035	WITHOUT_CLASSIFICATION	1.7207871609638967E-4	DESIGN
//a proxy cannot be transient and it breaks ForeignKeys.isTransient	WITHOUT_CLASSIFICATION	0.9999911282734509	WITHOUT_CLASSIFICATION	8.871726549080129E-6	DESIGN
// replicate does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999801770894775	WITHOUT_CLASSIFICATION	1.9822910522485687E-5	DESIGN
// static helper methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999693876194125	WITHOUT_CLASSIFICATION	3.0612380587648315E-5	DESIGN
// handles arrays and newly instantiated collections	WITHOUT_CLASSIFICATION	0.9999993443643564	WITHOUT_CLASSIFICATION	6.556356434434512E-7	DESIGN
// Actually the semantics of the next three are really "Bag" // Note that, unlike objects, collection insertions, updates, // deletions are not really remembered between flushes. We // just re-use the same Lists for convenience.	WITHOUT_CLASSIFICATION	0.9999999493223164	WITHOUT_CLASSIFICATION	5.0677683700298763E-8	DESIGN
// Add these directly to the executions queue	WITHOUT_CLASSIFICATION	0.9999990900997517	WITHOUT_CLASSIFICATION	9.099002483092864E-7	DESIGN
// continue loop	WITHOUT_CLASSIFICATION	0.99999156501267	WITHOUT_CLASSIFICATION	8.434987330115752E-6	DESIGN
//sort the updates by fk	WITHOUT_CLASSIFICATION	0.999925931196021	WITHOUT_CLASSIFICATION	7.406880397901777E-5	DESIGN
//sort the updates by pk	WITHOUT_CLASSIFICATION	0.9999445550875073	WITHOUT_CLASSIFICATION	5.544491249269183E-5	DESIGN
// the mapping of entity names to their latest batch numbers.	WITHOUT_CLASSIFICATION	0.9999999610754506	WITHOUT_CLASSIFICATION	3.892454936890771E-8	DESIGN
// the map of batch numbers to EntityInsertAction lists	WITHOUT_CLASSIFICATION	0.9999999897046988	WITHOUT_CLASSIFICATION	1.029530110221041E-8	DESIGN
//optimize the hash size to eliminate a rehash.	WITHOUT_CLASSIFICATION	0.999944022723679	WITHOUT_CLASSIFICATION	5.5977276321002E-5	DESIGN
// the list of entity names that indicate the batch number	WITHOUT_CLASSIFICATION	0.9999994126191163	WITHOUT_CLASSIFICATION	5.873808837408949E-7	DESIGN
// remove the current element from insertions. It will be added back later.	WITHOUT_CLASSIFICATION	0.9989698964202637	WITHOUT_CLASSIFICATION	0.001030103579736387	DESIGN
// the entity associated with the current action.	WITHOUT_CLASSIFICATION	0.9999999919110805	WITHOUT_CLASSIFICATION	8.088919579301903E-9	DESIGN
// There is already an existing batch for this type of entity. // Check to see if the latest batch is acceptable.	WITHOUT_CLASSIFICATION	0.9999995373353152	WITHOUT_CLASSIFICATION	4.6266468486884467E-7	DESIGN
// now rebuild the insertions list. There is a batch for each entry in the name list.	WITHOUT_CLASSIFICATION	0.9999996696281386	WITHOUT_CLASSIFICATION	3.30371861367766E-7	DESIGN
// the current batch number is the latest batch for this entity type.	WITHOUT_CLASSIFICATION	0.9999996040246093	WITHOUT_CLASSIFICATION	3.959753906926749E-7	DESIGN
// loop through all the associations of the current entity and make sure that they are processed // before the current batch number	WITHOUT_CLASSIFICATION	0.9999999988354912	WITHOUT_CLASSIFICATION	1.1645088002136802E-9	DESIGN
// find the batch number associated with the current association, if any.	WITHOUT_CLASSIFICATION	0.9999999910474281	WITHOUT_CLASSIFICATION	8.952571880175725E-9	DESIGN
// create a new batch for this type. The batch number is the number of current batches.	WITHOUT_CLASSIFICATION	0.9999992583544474	WITHOUT_CLASSIFICATION	7.416455527192646E-7	DESIGN
// loop through all the associated entities and make sure they have been // processed before the latest // batch associated with this entity type.	WITHOUT_CLASSIFICATION	0.9999998388655426	WITHOUT_CLASSIFICATION	1.611344574481658E-7	DESIGN
// since this entity will now be processed in the latest possible batch, // we can be assured that it will come after all other associations, // there's not need to continue checking.	WITHOUT_CLASSIFICATION	0.9999893344209534	WITHOUT_CLASSIFICATION	1.0665579046494597E-5	DESIGN
//cascade to current collection elements	WITHOUT_CLASSIFICATION	0.9999985740639817	WITHOUT_CLASSIFICATION	1.425936018274179E-6	DESIGN
//not really necessary, but good for consistency...	WITHOUT_CLASSIFICATION	0.9951300173068102	WITHOUT_CLASSIFICATION	0.004869982693189838	DESIGN
// we can't cascade to non-embedded elements	WITHOUT_CLASSIFICATION	0.9999932556815998	WITHOUT_CLASSIFICATION	6.7443184001544935E-6	DESIGN
//a newly instantiated collection can't have orphans	WITHOUT_CLASSIFICATION	0.9999988105376303	WITHOUT_CLASSIFICATION	1.189462369684902E-6	DESIGN
// handle orphaned entities!!	WITHOUT_CLASSIFICATION	0.9999500213954575	WITHOUT_CLASSIFICATION	4.997860454241969E-5	DESIGN
// Loaded entity instances, by EntityUniqueKey	WITHOUT_CLASSIFICATION	0.9999688109120203	WITHOUT_CLASSIFICATION	3.118908797975378E-5	DESIGN
// Identity map of EntityEntry instances, by the entity instance	WITHOUT_CLASSIFICATION	0.9999997837442312	WITHOUT_CLASSIFICATION	2.1625576880928917E-7	DESIGN
// Entity proxies, by EntityKey	WITHOUT_CLASSIFICATION	0.999806281619657	WITHOUT_CLASSIFICATION	1.9371838034291513E-4	DESIGN
// Snapshots of current database state for entities // that have *not* been loaded	WITHOUT_CLASSIFICATION	0.9999999233534356	WITHOUT_CLASSIFICATION	7.664656438496867E-8	DESIGN
// Identity map of array holder ArrayHolder instances, by the array instance	WITHOUT_CLASSIFICATION	0.999975978082823	WITHOUT_CLASSIFICATION	2.402191717697096E-5	DESIGN
// Collection wrappers, by the CollectionKey //key=CollectionKey, value=PersistentCollection	WITHOUT_CLASSIFICATION	0.9999982445625647	WITHOUT_CLASSIFICATION	1.755437435240788E-6	DESIGN
// Set of EntityKeys of deleted objects	WITHOUT_CLASSIFICATION	0.9999975935233026	WITHOUT_CLASSIFICATION	2.4064766973801753E-6	DESIGN
// properties that we have tried to load, and not found in the database	WITHOUT_CLASSIFICATION	0.9998367617546818	WITHOUT_CLASSIFICATION	1.6323824531813593E-4	DESIGN
// A list of collection wrappers that were instantiating during result set // processing, that we will need to initialize at the end of the query	WITHOUT_CLASSIFICATION	0.9999997755891192	WITHOUT_CLASSIFICATION	2.2441088074855435E-7	DESIGN
// A container for collections we load up when the owning entity is not // yet loaded ... for now, this is purely transient!	WITHOUT_CLASSIFICATION	0.9979655937611658	WITHOUT_CLASSIFICATION	0.002034406238834182	DESIGN
// Downgrade locks	WITHOUT_CLASSIFICATION	0.9999953586901391	WITHOUT_CLASSIFICATION	4.64130986092602E-6	DESIGN
// any earlier proxy takes precedence	WITHOUT_CLASSIFICATION	0.9999997128298646	WITHOUT_CLASSIFICATION	2.871701354405306E-7	DESIGN
//unwrap the object	WITHOUT_CLASSIFICATION	0.9999963749035327	WITHOUT_CLASSIFICATION	3.62509646726876E-6	DESIGN
//initialize + unwrap the object	WITHOUT_CLASSIFICATION	0.9999860569238461	WITHOUT_CLASSIFICATION	1.394307615397333E-5	DESIGN
//return the proxied object	WITHOUT_CLASSIFICATION	0.9996950156530121	WITHOUT_CLASSIFICATION	3.049843469879041E-4	DESIGN
//overwrite old proxy	WITHOUT_CLASSIFICATION	0.9994107589058048	WITHOUT_CLASSIFICATION	5.8924109419513E-4	DESIGN
// early exit...	WITHOUT_CLASSIFICATION	0.9999463478678542	WITHOUT_CLASSIFICATION	5.365213214577697E-5	DESIGN
// or should it actually throw an exception?	WITHOUT_CLASSIFICATION	0.990450584958683	WITHOUT_CLASSIFICATION	0.009549415041317042	DESIGN
//treat it just like a new collection	WITHOUT_CLASSIFICATION	0.9999979576719983	WITHOUT_CLASSIFICATION	2.0423280017584296E-6	DESIGN
//do this work only at the very highest level of the load //don't let this method be called recursively	WITHOUT_CLASSIFICATION	0.9949214845313779	WITHOUT_CLASSIFICATION	0.005078515468622145	DESIGN
//note that each iteration of the loop may add new elements	WITHOUT_CLASSIFICATION	0.9999997270318172	WITHOUT_CLASSIFICATION	2.729681827826174E-7	DESIGN
//it might be an unwrapped collection reference! //try to find a wrapper (slowish)	WITHOUT_CLASSIFICATION	0.9987541897529971	WITHOUT_CLASSIFICATION	0.0012458102470029534	DESIGN
/*public boolean isNonExistant(EntityKey key) {	WITHOUT_CLASSIFICATION	0.9993810320505592	WITHOUT_CLASSIFICATION	6.189679494408362E-4	DESIGN
/*public boolean isNonExistant(EntityUniqueKey key) {	WITHOUT_CLASSIFICATION	0.9988903127590593	WITHOUT_CLASSIFICATION	0.0011096872409407535	DESIGN
// iterate all the entities currently associated with the persistence context.	WITHOUT_CLASSIFICATION	0.9999996678031277	WITHOUT_CLASSIFICATION	3.3219687234018135E-7	DESIGN
// does this entity entry pertain to the entity persister in which we are interested (owner)?	WITHOUT_CLASSIFICATION	0.9998889131445134	WITHOUT_CLASSIFICATION	1.1108685548649173E-4	DESIGN
//check if the managed object is the parent	WITHOUT_CLASSIFICATION	0.9999979205128033	WITHOUT_CLASSIFICATION	2.079487196602072E-6	DESIGN
// otherwise, the proxy was pruned during the serialization process	WITHOUT_CLASSIFICATION	0.9999992683224949	WITHOUT_CLASSIFICATION	7.316775052122973E-7	DESIGN
// adds remove as a sort-of alias for delete...	WITHOUT_CLASSIFICATION	0.9989862973020593	WITHOUT_CLASSIFICATION	0.0010137026979406337	DESIGN
//bad cast	WITHOUT_CLASSIFICATION	0.9981568925676579	WITHOUT_CLASSIFICATION	0.0018431074323419453	DESIGN
//return lhsPersister.getSubclassPropertyColumnNames(property);	WITHOUT_CLASSIFICATION	0.9998682259071289	WITHOUT_CLASSIFICATION	1.317740928711447E-4	DESIGN
//property-refs for associations defined on a //component are not supported, so no need to slice	WITHOUT_CLASSIFICATION	0.9999723065466544	WITHOUT_CLASSIFICATION	2.769345334566318E-5	DESIGN
//if there is no property-ref, assume the join //is to the subclass table (ie. the table of the //subclass that the association belongs to)	WITHOUT_CLASSIFICATION	0.9999964896992641	WITHOUT_CLASSIFICATION	3.5103007359565195E-6	DESIGN
//handle a property-ref	WITHOUT_CLASSIFICATION	0.9987050604108475	WITHOUT_CLASSIFICATION	0.0012949395891525325	DESIGN
/*NativeSQLQueryReturn*/	WITHOUT_CLASSIFICATION	0.9999377763110555	WITHOUT_CLASSIFICATION	6.222368894444819E-5	DESIGN
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999988156554708	WITHOUT_CLASSIFICATION	1.1843445292193164E-6	DESIGN
// why is all others non final ?	WITHOUT_CLASSIFICATION	0.9995572833097174	WITHOUT_CLASSIFICATION	4.4271669028261244E-4	DESIGN
//this.forceCacheRefresh = forceCacheRefresh;	WITHOUT_CLASSIFICATION	0.9999923476604775	WITHOUT_CLASSIFICATION	7.652339522525567E-6	DESIGN
// HELLA IMPORTANT OPTIMIZATION!!!	WITHOUT_CLASSIFICATION	0.9996109075767162	WITHOUT_CLASSIFICATION	3.890924232837673E-4	DESIGN
/*return that.type.equals(type) && 	WITHOUT_CLASSIFICATION	0.999955043971172	WITHOUT_CLASSIFICATION	4.495602882796284E-5	DESIGN
//Must occur after resolving identifiers!	WITHOUT_CLASSIFICATION	0.9999967881193482	WITHOUT_CLASSIFICATION	3.2118806517543933E-6	DESIGN
//take a snapshot	WITHOUT_CLASSIFICATION	0.9999451356040534	WITHOUT_CLASSIFICATION	5.486439594656739E-5	DESIGN
// do a check	WITHOUT_CLASSIFICATION	0.9999257747697758	WITHOUT_CLASSIFICATION	7.422523022419198E-5	DESIGN
// the owning entity may have been deleted and its identifier unset due to // identifier-rollback; in which case, try to look up its identifier from // the persistence context	WITHOUT_CLASSIFICATION	0.999933799805179	WITHOUT_CLASSIFICATION	6.620019482096223E-5	DESIGN
// do the work	WITHOUT_CLASSIFICATION	0.9976935058216257	WITHOUT_CLASSIFICATION	0.0023064941783742794	DESIGN
// We've been here before	WITHOUT_CLASSIFICATION	0.9999581396872962	WITHOUT_CLASSIFICATION	4.186031270380933E-5	DESIGN
// it is or was referenced _somewhere_	WITHOUT_CLASSIFICATION	0.9991363306334476	WITHOUT_CLASSIFICATION	8.636693665523744E-4	DESIGN
// do the work	WITHOUT_CLASSIFICATION	0.9976935058216257	WITHOUT_CLASSIFICATION	0.0023064941783742794	DESIGN
// if either its role changed,	WITHOUT_CLASSIFICATION	0.9999460755409842	WITHOUT_CLASSIFICATION	5.3924459015755934E-5	DESIGN
// or its key changed	WITHOUT_CLASSIFICATION	0.9996992931126248	WITHOUT_CLASSIFICATION	3.007068873751178E-4	DESIGN
// we will need to create new entries	WITHOUT_CLASSIFICATION	0.9999963635580981	WITHOUT_CLASSIFICATION	3.636441901817242E-6	DESIGN
// we will need to remove ye olde entries	WITHOUT_CLASSIFICATION	0.9998593340114992	WITHOUT_CLASSIFICATION	1.406659885008573E-4	DESIGN
// force initialize!	WITHOUT_CLASSIFICATION	0.9999873420630193	WITHOUT_CLASSIFICATION	1.2657936980748297E-5	DESIGN
// else if it's elements changed	WITHOUT_CLASSIFICATION	0.999992970926434	WITHOUT_CLASSIFICATION	7.029073566014049E-6	DESIGN
//ATTRIBUTES MAINTAINED BETWEEN FLUSH CYCLES	WITHOUT_CLASSIFICATION	0.999507449237693	WITHOUT_CLASSIFICATION	4.925507623069997E-4	DESIGN
// session-start/post-flush persistent state	WITHOUT_CLASSIFICATION	0.9999997624335184	WITHOUT_CLASSIFICATION	2.375664815338663E-7	DESIGN
// allow the CollectionSnapshot to be serialized	WITHOUT_CLASSIFICATION	0.9999973006039767	WITHOUT_CLASSIFICATION	2.6993960233465106E-6	DESIGN
// ATTRIBUTES USED ONLY DURING FLUSH CYCLE	WITHOUT_CLASSIFICATION	0.9999217985554588	WITHOUT_CLASSIFICATION	7.820144454122835E-5	DESIGN
// "current" means the reference that was found during flush() 	WITHOUT_CLASSIFICATION	0.9999938855575754	WITHOUT_CLASSIFICATION	6.114442424634125E-6	DESIGN
// "loaded" means the reference that is consistent  // with the current database state	WITHOUT_CLASSIFICATION	0.9999986980507999	WITHOUT_CLASSIFICATION	1.3019492001072523E-6	DESIGN
// during flush, we navigate the object graph to // collections and decide what to do with them	WITHOUT_CLASSIFICATION	0.9999926745097892	WITHOUT_CLASSIFICATION	7.3254902107808655E-6	DESIGN
// if we instantiate a collection during the flush() process, // we must ignore it for the rest of the flush()	WITHOUT_CLASSIFICATION	0.9999990403590936	WITHOUT_CLASSIFICATION	9.596409064225757E-7	DESIGN
// new collections that get found + wrapped // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999970660983918	WITHOUT_CLASSIFICATION	2.9339016082713113E-6	DESIGN
//a newly wrapped collection is NOT dirty (or we get unnecessary version updates)	WITHOUT_CLASSIFICATION	0.9999530217987849	WITHOUT_CLASSIFICATION	4.697820121515406E-5	DESIGN
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9997189893436623	WITHOUT_CLASSIFICATION	2.810106563376382E-4	DESIGN
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9997189893436623	WITHOUT_CLASSIFICATION	2.810106563376382E-4	DESIGN
// detached collections that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999971834156849	WITHOUT_CLASSIFICATION	2.8165843152360353E-6	DESIGN
//optimization	WITHOUT_CLASSIFICATION	0.9999583617229658	WITHOUT_CLASSIFICATION	4.1638277034298025E-5	DESIGN
//optimization //optimization	WITHOUT_CLASSIFICATION	0.9999700453502418	WITHOUT_CLASSIFICATION	2.9954649758134905E-5	DESIGN
//re-snapshot	WITHOUT_CLASSIFICATION	0.9999408187118848	WITHOUT_CLASSIFICATION	5.918128811535823E-5	DESIGN
// for convenience to save some lookups	WITHOUT_CLASSIFICATION	0.9998932293874075	WITHOUT_CLASSIFICATION	1.0677061259241945E-4	DESIGN
//NOTE: this is not updated when properties are fetched lazily!	WITHOUT_CLASSIFICATION	0.8915923293728876	WITHOUT_CLASSIFICATION	0.10840767062711237	DESIGN
//memory optimization	WITHOUT_CLASSIFICATION	0.9999772685238707	WITHOUT_CLASSIFICATION	2.2731476129215447E-5	DESIGN
// use the id value of a newly instantiated instance as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999995066930135	WITHOUT_CLASSIFICATION	4.933069864476385E-7	DESIGN
// copied from Session:	WITHOUT_CLASSIFICATION	0.9963756216113934	WITHOUT_CLASSIFICATION	0.0036243783886067216	DESIGN
// this should not happen since the DTD prevents it	WITHOUT_CLASSIFICATION	0.998708454986255	WITHOUT_CLASSIFICATION	0.0012915450137449473	DESIGN
// JoinProcessor needs to know if the where clause fragment came from a dynamic filter or not so it // can put the where clause fragment in the right place in the SQL AST.   'hasFilterCondition' keeps track // of that fact.	WITHOUT_CLASSIFICATION	0.6709034237571708	WITHOUT_CLASSIFICATION	0.3290965762428291	DESIGN
// the current join represents the join between a many-to-many association table // and its "target" table.  Here we need to apply any additional filters // defined specifically on the many-to-many	WITHOUT_CLASSIFICATION	0.9999999936484057	WITHOUT_CLASSIFICATION	6.351594244838501E-9	DESIGN
//check basic level one nullablilty	WITHOUT_CLASSIFICATION	0.9999970168719899	WITHOUT_CLASSIFICATION	2.9831280099629635E-6	DESIGN
//values is not null and is checkable, we'll look deeper	WITHOUT_CLASSIFICATION	0.9998788026597781	WITHOUT_CLASSIFICATION	1.2119734022189949E-4	DESIGN
//for non null args, check for components and elements containing components	WITHOUT_CLASSIFICATION	0.9999995500789175	WITHOUT_CLASSIFICATION	4.499210824566345E-7	DESIGN
//cache the hashcode	WITHOUT_CLASSIFICATION	0.9998604355618749	WITHOUT_CLASSIFICATION	1.3956443812509773E-4	DESIGN
//persistent collections may have components	WITHOUT_CLASSIFICATION	0.9999868590378256	WITHOUT_CLASSIFICATION	1.314096217436294E-5	DESIGN
//check for all components values in the collection	WITHOUT_CLASSIFICATION	0.9999974672134769	WITHOUT_CLASSIFICATION	2.5327865231208805E-6	DESIGN
/* will check current level if some of them are not null	WITHOUT_CLASSIFICATION	0.9997969920222083	WITHOUT_CLASSIFICATION	2.0300797779162428E-4	DESIGN
//do the test	WITHOUT_CLASSIFICATION	0.99990031623048	WITHOUT_CLASSIFICATION	9.968376952005476E-5	DESIGN
// if its an uninitialized proxy it can't be transient	WITHOUT_CLASSIFICATION	0.9999972542768739	WITHOUT_CLASSIFICATION	2.7457231262039237E-6	DESIGN
//unwrap it	WITHOUT_CLASSIFICATION	0.9999215793706755	WITHOUT_CLASSIFICATION	7.842062932456904E-5	DESIGN
// See if the entity is already bound to this session, if not look at the // entity identifier and assume that the entity is persistent if the // id is not "unsaved" (that is, we rely on foreign keys to keep // database integrity)	WITHOUT_CLASSIFICATION	0.9999996653564778	WITHOUT_CLASSIFICATION	3.346435222552323E-7	DESIGN
// an unfetched association can only point to // an entity that already exists in the db	WITHOUT_CLASSIFICATION	0.9999998551901303	WITHOUT_CLASSIFICATION	1.4480986969656327E-7	DESIGN
// let the interceptor inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999887163943862	WITHOUT_CLASSIFICATION	1.1283605613708191E-5	DESIGN
// let the persister inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999860686116829	WITHOUT_CLASSIFICATION	1.3931388317189428E-5	DESIGN
// we use the assumed value, if there is one, to avoid hitting // the database	WITHOUT_CLASSIFICATION	0.9999344349738739	WITHOUT_CLASSIFICATION	6.556502612610273E-5	DESIGN
// hit the database, after checking the session cache for a snapshot	WITHOUT_CLASSIFICATION	0.9999985980473346	WITHOUT_CLASSIFICATION	1.4019526653949378E-6	DESIGN
// context-entity-identifier returns null explicitly if the entity // is not associated with the persistence context; so make some // deeper checks...	WITHOUT_CLASSIFICATION	0.9999944131734991	WITHOUT_CLASSIFICATION	5.5868265008082105E-6	DESIGN
//int count = 0;	WITHOUT_CLASSIFICATION	0.9999379800862128	WITHOUT_CLASSIFICATION	6.201991378727419E-5	DESIGN
//the first key found after the given key	WITHOUT_CLASSIFICATION	0.999995533171166	WITHOUT_CLASSIFICATION	4.466828834030799E-6	DESIGN
//checkForEnd = false;	WITHOUT_CLASSIFICATION	0.9999634143607288	WITHOUT_CLASSIFICATION	3.6585639271252426E-5	DESIGN
//count++;	WITHOUT_CLASSIFICATION	0.9991166230956499	WITHOUT_CLASSIFICATION	8.8337690435015E-4	DESIGN
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999278080449755	WITHOUT_CLASSIFICATION	7.219195502448537E-5	DESIGN
//we ran out of keys to try	WITHOUT_CLASSIFICATION	0.9999627918339254	WITHOUT_CLASSIFICATION	3.720816607452964E-5	DESIGN
//first element of array is reserved for the actual instance we are loading!	WITHOUT_CLASSIFICATION	0.9999488327967158	WITHOUT_CLASSIFICATION	5.116720328430023E-5	DESIGN
//the first id found after the given id	WITHOUT_CLASSIFICATION	0.9999827426682344	WITHOUT_CLASSIFICATION	1.7257331765679125E-5	DESIGN
//we ran out of ids to try	WITHOUT_CLASSIFICATION	0.9995585090585941	WITHOUT_CLASSIFICATION	4.4149094140589617E-4	DESIGN
// look for existing collection as part of the persistence context	WITHOUT_CLASSIFICATION	0.9999999871388813	WITHOUT_CLASSIFICATION	1.2861118700638841E-8	DESIGN
// ignore this row of results! Note the early exit	WITHOUT_CLASSIFICATION	0.9999883940909655	WITHOUT_CLASSIFICATION	1.1605909034589168E-5	DESIGN
// initialize this collection	WITHOUT_CLASSIFICATION	0.9996825054206455	WITHOUT_CLASSIFICATION	3.1749457935449654E-4	DESIGN
// create one	WITHOUT_CLASSIFICATION	0.9999989199838326	WITHOUT_CLASSIFICATION	1.0800161673422802E-6	DESIGN
// warning: can cause a recursive calls! (proxy initialization)	WITHOUT_CLASSIFICATION	0.9996821341796648	WITHOUT_CLASSIFICATION	3.17865820335155E-4	DESIGN
// there were no queued additions // and the role has a cache	WITHOUT_CLASSIFICATION	0.999955046453681	WITHOUT_CLASSIFICATION	4.495354631892815E-5	DESIGN
// and this is not a forced initialization during flush	WITHOUT_CLASSIFICATION	0.9999177577564904	WITHOUT_CLASSIFICATION	8.224224350961743E-5	DESIGN
// some filters affecting the collection are enabled on the session, so do not do the put into the cache.	WITHOUT_CLASSIFICATION	0.9999927558567568	WITHOUT_CLASSIFICATION	7.244143243173687E-6	DESIGN
// cleanup code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997923920190019	WITHOUT_CLASSIFICATION	2.0760798099803094E-4	DESIGN
// loading collection xrefs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999940407840902	WITHOUT_CLASSIFICATION	5.959215909882373E-6	DESIGN
// Collection load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999979846226879	WITHOUT_CLASSIFICATION	2.015377312108658E-6	DESIGN
// simple cache of param metadata based on query string.  Ideally, the // original "user-supplied query" string should be used to retreive this // metadata (i.e., not the para-list-expanded query string) to avoid // unnecessary cache entries. // Used solely for caching param metadata for native-sql queries, see // getSQLParameterMetadata() for a discussion as to why...	WITHOUT_CLASSIFICATION	0.9995662025630057	WITHOUT_CLASSIFICATION	4.337974369943859E-4	DESIGN
// the cache of the actual plans...	WITHOUT_CLASSIFICATION	0.9999931750830117	WITHOUT_CLASSIFICATION	6.824916988262983E-6	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.9998081652754702	WITHOUT_CLASSIFICATION	1.9183472452976072E-4	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.9998081652754702	WITHOUT_CLASSIFICATION	1.9183472452976072E-4	DESIGN
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.999999672314493	WITHOUT_CLASSIFICATION	3.2768550695169456E-7	DESIGN
// for native-sql queries, the param metadata is determined outside // any relation to a query plan, because query plan creation and/or // retreival for a native-sql query depends on all of the return // types having been set, which might not be the case up-front when // param metadata would be most useful	WITHOUT_CLASSIFICATION	0.9998953096160663	WITHOUT_CLASSIFICATION	1.0469038393377548E-4	DESIGN
// don't care...	WITHOUT_CLASSIFICATION	0.9997711293900713	WITHOUT_CLASSIFICATION	2.288706099287009E-4	DESIGN
// Recognition code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999741952676363	WITHOUT_CLASSIFICATION	2.580473236369663E-5	DESIGN
// don't care...	WITHOUT_CLASSIFICATION	0.9997711293900713	WITHOUT_CLASSIFICATION	2.288706099287009E-4	DESIGN
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9989231191667722	WITHOUT_CLASSIFICATION	0.0010768808332277961	DESIGN
// break the outer loop !!!	WITHOUT_CLASSIFICATION	0.9999881359736698	WITHOUT_CLASSIFICATION	1.186402633023851E-5	DESIGN
// named parameter	WITHOUT_CLASSIFICATION	0.9999909587471274	WITHOUT_CLASSIFICATION	9.04125287255883E-6	DESIGN
// could be either an ordinal or JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999990858494916	WITHOUT_CLASSIFICATION	9.141505083259084E-7	DESIGN
// a peek ahead showed this as an JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999889260504586	WITHOUT_CLASSIFICATION	1.107394954136775E-5	DESIGN
// make sure this "name" is an integral	WITHOUT_CLASSIFICATION	0.9999954057536566	WITHOUT_CLASSIFICATION	4.59424634331169E-6	DESIGN
// pre-determine and cache the hashcode	WITHOUT_CLASSIFICATION	0.9999902099886354	WITHOUT_CLASSIFICATION	9.790011364618942E-6	DESIGN
// perform the actual work	WITHOUT_CLASSIFICATION	0.999910862989149	WITHOUT_CLASSIFICATION	8.913701085090975E-5	DESIGN
// if everything went ok, commit the transaction and close the obtained // connection handle...	WITHOUT_CLASSIFICATION	0.9999982210114441	WITHOUT_CLASSIFICATION	1.7789885559699342E-6	DESIGN
// at some point the processing went bad, so we need to: //      1) make sure the connection handle gets released //      2) try to cleanup the JTA context as much as possible	WITHOUT_CLASSIFICATION	0.999989884276945	WITHOUT_CLASSIFICATION	1.0115723054878983E-5	DESIGN
// finally handle the exception	WITHOUT_CLASSIFICATION	0.9996287562811293	WITHOUT_CLASSIFICATION	3.7124371887064107E-4	DESIGN
// a "detached" collection that belonged to a different entity	WITHOUT_CLASSIFICATION	0.9999984219653628	WITHOUT_CLASSIFICATION	1.5780346372202543E-6	DESIGN
//saveOrUpdateCopy() is deprecated!	WITHOUT_CLASSIFICATION	0.9137770849094256	WITHOUT_CLASSIFICATION	0.08622291509057445	DESIGN
// collectionPersister should not be null, but we don't want to throw // an exception if it is null	WITHOUT_CLASSIFICATION	0.9978882625987736	WITHOUT_CLASSIFICATION	0.0021117374012264026	DESIGN
// otherwise a null or brand new collection // this will also (inefficiently) handle arrays, which // have no snapshot, so we can't do any better //processArrayOrNewCollection(collection, type);	WITHOUT_CLASSIFICATION	0.9981253883602839	WITHOUT_CLASSIFICATION	0.001874611639716138	DESIGN
// a "detached" collection that originally belonged to the same entity	WITHOUT_CLASSIFICATION	0.9999987621297464	WITHOUT_CLASSIFICATION	1.2378702536774716E-6	DESIGN
//do nothing	WITHOUT_CLASSIFICATION	0.9997775003821698	WITHOUT_CLASSIFICATION	2.2249961783024058E-4	DESIGN
//do nothing	WITHOUT_CLASSIFICATION	0.9997775003821698	WITHOUT_CLASSIFICATION	2.2249961783024058E-4	DESIGN
//Force a substitution!	WITHOUT_CLASSIFICATION	0.9998590152185484	WITHOUT_CLASSIFICATION	1.4098478145167171E-4	DESIGN
// The user requested a "greater" (i.e. more restrictive) form of // pessimistic lock	WITHOUT_CLASSIFICATION	0.9999820306758547	WITHOUT_CLASSIFICATION	1.796932414525029E-5	DESIGN
// the database now holds a lock + the object is flushed from the cache, // so release the soft lock	WITHOUT_CLASSIFICATION	0.9999924249371833	WITHOUT_CLASSIFICATION	7.575062816710762E-6	DESIGN
// now update the object .. has to be outside the main if block above (because of collections)	WITHOUT_CLASSIFICATION	0.9999517298995293	WITHOUT_CLASSIFICATION	4.827010047059177E-5	DESIGN
// Search for collections by reachability, updating their role. // We don't want to touch collections reachable from a deleted object	WITHOUT_CLASSIFICATION	0.9999087027685932	WITHOUT_CLASSIFICATION	9.129723140685691E-5	DESIGN
// this is a situation where the entity id is assigned by a post-insert generator // and was saved outside the transaction forcing it to be delayed	WITHOUT_CLASSIFICATION	0.9999923678576529	WITHOUT_CLASSIFICATION	7.632142347076583E-6	DESIGN
// NOTE: we need to do the wrap here even if its not "dirty", // because collections need wrapping but changes to _them_ // don't dirty the container. Also, for versioned data, we // need to wrap before calling searchForDirtyCollections	WITHOUT_CLASSIFICATION	0.9998953251128926	WITHOUT_CLASSIFICATION	1.0467488710742294E-4	DESIGN
//grab its state saved at deletion	WITHOUT_CLASSIFICATION	0.9999844353269669	WITHOUT_CLASSIFICATION	1.5564673033060634E-5	DESIGN
// grab its current state	WITHOUT_CLASSIFICATION	0.9999972727380756	WITHOUT_CLASSIFICATION	2.727261924453988E-6	DESIGN
// schedule the update // note that we intentionally do _not_ pass in currentPersistentState!	WITHOUT_CLASSIFICATION	0.9999956623119284	WITHOUT_CLASSIFICATION	4.33768807158159E-6	DESIGN
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9995942713299848	WITHOUT_CLASSIFICATION	4.0572867001512075E-4	DESIGN
// give the Interceptor a chance to process property values, if the properties // were modified by the Interceptor, we need to set them back to the object	WITHOUT_CLASSIFICATION	0.9999496186361312	WITHOUT_CLASSIFICATION	5.038136386890671E-5	DESIGN
// compare to cached state (ignoring collections unless versioned)	WITHOUT_CLASSIFICATION	0.9999998422488895	WITHOUT_CLASSIFICATION	1.5775111047006194E-7	DESIGN
// if it was dirtied by a collection only	WITHOUT_CLASSIFICATION	0.999993438438154	WITHOUT_CLASSIFICATION	6.561561846011775E-6	DESIGN
// increment the version number (if necessary)	WITHOUT_CLASSIFICATION	0.9999998715064499	WITHOUT_CLASSIFICATION	1.2849355006481263E-7	DESIGN
// check nullability but do not perform command execute // we'll use scheduled updates for that.	WITHOUT_CLASSIFICATION	0.9999869261010236	WITHOUT_CLASSIFICATION	1.3073898976397606E-5	DESIGN
//give the Interceptor a chance to modify property values	WITHOUT_CLASSIFICATION	0.9992510822126014	WITHOUT_CLASSIFICATION	7.489177873985335E-4	DESIGN
//now we might need to recalculate the dirtyProperties array	WITHOUT_CLASSIFICATION	0.9990851827769226	WITHOUT_CLASSIFICATION	9.148172230773259E-4	DESIGN
//use the current version	WITHOUT_CLASSIFICATION	0.9999963251871045	WITHOUT_CLASSIFICATION	3.674812895486951E-6	DESIGN
// Interceptor returned null, so do the dirtycheck ourself, if possible	WITHOUT_CLASSIFICATION	0.9999930544425295	WITHOUT_CLASSIFICATION	6.945557470418655E-6	DESIGN
// object loaded by update()	WITHOUT_CLASSIFICATION	0.999981904686987	WITHOUT_CLASSIFICATION	1.809531301304638E-5	DESIGN
// dirty check against the usual snapshot of the entity	WITHOUT_CLASSIFICATION	0.9999986040641994	WITHOUT_CLASSIFICATION	1.395935800662755E-6	DESIGN
// dirty check against the database snapshot, if possible/necessary	WITHOUT_CLASSIFICATION	0.9999996483063522	WITHOUT_CLASSIFICATION	3.5169364771601785E-7	DESIGN
// the Interceptor handled the dirty checking	WITHOUT_CLASSIFICATION	0.999963523269062	WITHOUT_CLASSIFICATION	3.647673093799233E-5	DESIGN
//even process null collections	WITHOUT_CLASSIFICATION	0.9999996537874749	WITHOUT_CLASSIFICATION	3.4621252508693377E-7	DESIGN
// get the id from the object	WITHOUT_CLASSIFICATION	0.9999076518541176	WITHOUT_CLASSIFICATION	9.234814588248765E-5	DESIGN
//always do an INSERT, and let it fail by constraint violation	WITHOUT_CLASSIFICATION	0.9999743480637227	WITHOUT_CLASSIFICATION	2.565193627729775E-5	DESIGN
//what is the version on the database?	WITHOUT_CLASSIFICATION	0.9984052206542872	WITHOUT_CLASSIFICATION	0.0015947793457127936	DESIGN
/// HHH-2378	WITHOUT_CLASSIFICATION	0.999865390182906	WITHOUT_CLASSIFICATION	1.3460981709407355E-4	DESIGN
//will result in a SQL UPDATE:	WITHOUT_CLASSIFICATION	0.9981217048886769	WITHOUT_CLASSIFICATION	0.001878295111323046	DESIGN
//else do nothing (don't even reassociate object!)	WITHOUT_CLASSIFICATION	0.999981613856583	WITHOUT_CLASSIFICATION	1.8386143416975934E-5	DESIGN
// no existing row - do an insert	WITHOUT_CLASSIFICATION	0.9998813385444525	WITHOUT_CLASSIFICATION	1.1866145554752914E-4	DESIGN
//refresh() does not pass an entityName	WITHOUT_CLASSIFICATION	0.9999987895381454	WITHOUT_CLASSIFICATION	1.2104618546099808E-6	DESIGN
//do not return a proxy! //(this option indicates we are initializing a proxy)	WITHOUT_CLASSIFICATION	0.9747058999065366	WITHOUT_CLASSIFICATION	0.02529410009346354	DESIGN
//return a proxy if appropriate	WITHOUT_CLASSIFICATION	0.9999826955405829	WITHOUT_CLASSIFICATION	1.7304459416990388E-5	DESIGN
// return existing object or initialized proxy (unless deleted)	WITHOUT_CLASSIFICATION	0.9999380398362806	WITHOUT_CLASSIFICATION	6.196016371936925E-5	DESIGN
// return new uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999304346169415	WITHOUT_CLASSIFICATION	6.956538305856184E-5	DESIGN
// this object was already loaded	WITHOUT_CLASSIFICATION	0.9999724381116246	WITHOUT_CLASSIFICATION	2.756188837537077E-5	DESIGN
// Entity was found in second-level cache...	WITHOUT_CLASSIFICATION	0.993007588118388	WITHOUT_CLASSIFICATION	0.006992411881612048	DESIGN
// make it circular-reference safe	WITHOUT_CLASSIFICATION	0.9999841042654543	WITHOUT_CLASSIFICATION	1.589573454571934E-5	DESIGN
// intializes result by side-effect	WITHOUT_CLASSIFICATION	0.9999918093968703	WITHOUT_CLASSIFICATION	8.190603129684645E-6	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Pre-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999988655762184	WITHOUT_CLASSIFICATION	1.1344237814897234E-6	DESIGN
//some statistics	WITHOUT_CLASSIFICATION	0.9998138516714512	WITHOUT_CLASSIFICATION	1.8614832854873536E-4	DESIGN
//safe from concurrent modification because of how entryList() is implemented on IdentityMap	WITHOUT_CLASSIFICATION	0.9948839172055348	WITHOUT_CLASSIFICATION	0.005116082794465186	DESIGN
// Initialize dirty flags for arrays + collections with composite elements // and reset reached, doupdate, etc.	WITHOUT_CLASSIFICATION	0.9999996789752763	WITHOUT_CLASSIFICATION	3.2102472376653997E-7	DESIGN
// Among other things, updateReachables() will recursively load all // collections that are moving roles. This might cause entities to // be loaded.	WITHOUT_CLASSIFICATION	0.9990528423933976	WITHOUT_CLASSIFICATION	9.471576066023985E-4	DESIGN
// So this needs to be safe from concurrent modification problems. // It is safe because of how IdentityMap implements entrySet()	WITHOUT_CLASSIFICATION	0.9974421597184084	WITHOUT_CLASSIFICATION	0.0025578402815915552	DESIGN
// Update the status of the object and if necessary, schedule an update	WITHOUT_CLASSIFICATION	0.9999999735762534	WITHOUT_CLASSIFICATION	2.6423746600129637E-8	DESIGN
// Schedule updates to collections:	WITHOUT_CLASSIFICATION	0.9999967788118267	WITHOUT_CLASSIFICATION	3.2211881733096223E-6	DESIGN
// we need to lock the collection caches before // executing entity inserts/updates in order to // account for bidi associations	WITHOUT_CLASSIFICATION	0.9999997729895332	WITHOUT_CLASSIFICATION	2.2701046680541657E-7	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Post-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999956380556861	WITHOUT_CLASSIFICATION	4.361944313794957E-6	DESIGN
//the database has changed now, so the subselect results need to be invalidated	WITHOUT_CLASSIFICATION	0.9998031250803405	WITHOUT_CLASSIFICATION	1.968749196595368E-4	DESIGN
//if the collection is dereferenced, remove from the session cache //iter.remove(); //does not work, since the entrySet is not backed by the set	WITHOUT_CLASSIFICATION	0.9999125995749258	WITHOUT_CLASSIFICATION	8.740042507419775E-5	DESIGN
//otherwise recreate the mapping between the collection and its key	WITHOUT_CLASSIFICATION	0.9999995880095568	WITHOUT_CLASSIFICATION	4.1199044321403537E-7	DESIGN
//get a snapshot	WITHOUT_CLASSIFICATION	0.9999201467514086	WITHOUT_CLASSIFICATION	7.985324859141993E-5	DESIGN
/* package-private */	WITHOUT_CLASSIFICATION	0.9999276601596846	WITHOUT_CLASSIFICATION	7.233984031541613E-5	DESIGN
/* package-private */	WITHOUT_CLASSIFICATION	0.9999276601596846	WITHOUT_CLASSIFICATION	7.233984031541613E-5	DESIGN
// key is an entity involved with the operation performed by the listener; // value is a flag indicating if the listener explicitly operates on the entity	WITHOUT_CLASSIFICATION	0.9999999194103009	WITHOUT_CLASSIFICATION	8.058969918522939E-8	DESIGN
// EARLY EXIT!!!	WITHOUT_CLASSIFICATION	0.9992501948748279	WITHOUT_CLASSIFICATION	7.498051251721384E-4	DESIGN
//ie. the entity came in from update()	WITHOUT_CLASSIFICATION	0.999506694054767	WITHOUT_CLASSIFICATION	4.933059452330216E-4	DESIGN
// before any callbacks, etc, so subdeletions see that this deletion happened first	WITHOUT_CLASSIFICATION	0.9983576144895321	WITHOUT_CLASSIFICATION	0.001642385510467825	DESIGN
// Ensures that containing deletions happen before sub-deletions	WITHOUT_CLASSIFICATION	0.9999966029125869	WITHOUT_CLASSIFICATION	3.3970874131704336E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.9997835908563089	WITHOUT_CLASSIFICATION	2.164091436910978E-4	DESIGN
// cascade-delete to collections BEFORE the collection owner is deleted	WITHOUT_CLASSIFICATION	0.9999698566086611	WITHOUT_CLASSIFICATION	3.0143391338987805E-5	DESIGN
// cascade-delete to many-to-one AFTER the parent was deleted	WITHOUT_CLASSIFICATION	0.9997139003319172	WITHOUT_CLASSIFICATION	2.8609966808287743E-4	DESIGN
// if it is an initialized proxy, let cascade // handle it later on	WITHOUT_CLASSIFICATION	0.9998782470573774	WITHOUT_CLASSIFICATION	1.2175294262256099E-4	DESIGN
//assign the requested id to the proxy, *before* //reassociating the proxy	WITHOUT_CLASSIFICATION	0.9999876516830737	WITHOUT_CLASSIFICATION	1.2348316926313688E-5	DESIGN
// an uninitialized proxy, noop, don't even need to // return an id, since it is never a save()	WITHOUT_CLASSIFICATION	0.9999831636654963	WITHOUT_CLASSIFICATION	1.6836334503615975E-5	DESIGN
//initialize properties of the event:	WITHOUT_CLASSIFICATION	0.9999282701501158	WITHOUT_CLASSIFICATION	7.172984988417824E-5	DESIGN
//return the id in the event object	WITHOUT_CLASSIFICATION	0.9999843875643563	WITHOUT_CLASSIFICATION	1.5612435643711672E-5	DESIGN
//TRANSIENT or DELETED	WITHOUT_CLASSIFICATION	0.9998751682950852	WITHOUT_CLASSIFICATION	1.2483170491474986E-4	DESIGN
// use the id assigned to the instance	WITHOUT_CLASSIFICATION	0.9999926296973201	WITHOUT_CLASSIFICATION	7.370302679835618E-6	DESIGN
// assume this is a newly instantiated transient object // which should be saved rather than updated	WITHOUT_CLASSIFICATION	0.9998124445979722	WITHOUT_CLASSIFICATION	1.875554020278265E-4	DESIGN
// this is a transient object with existing persistent state not loaded by the session	WITHOUT_CLASSIFICATION	0.9999986354384381	WITHOUT_CLASSIFICATION	1.364561561866922E-6	DESIGN
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999971795854781	WITHOUT_CLASSIFICATION	2.82041452184412E-6	DESIGN
//cachedState,	WITHOUT_CLASSIFICATION	0.9999607150982219	WITHOUT_CLASSIFICATION	3.928490177802006E-5	DESIGN
//assume true, since we don't really know, and it doesn't matter	WITHOUT_CLASSIFICATION	0.9906681721798389	WITHOUT_CLASSIFICATION	0.009331827820160997	DESIGN
//a "detached" collection!	WITHOUT_CLASSIFICATION	0.999989811942843	WITHOUT_CLASSIFICATION	1.0188057157044573E-5	DESIGN
// if the collection belonged to a different entity, // clean up the existing state of the collection	WITHOUT_CLASSIFICATION	0.9999867465626662	WITHOUT_CLASSIFICATION	1.3253437333815375E-5	DESIGN
//log.debug( "calling onLoad()" );	WITHOUT_CLASSIFICATION	0.9999811390311679	WITHOUT_CLASSIFICATION	1.886096883211101E-5	DESIGN
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9995325146869931	WITHOUT_CLASSIFICATION	4.6748531300699425E-4	DESIGN
// note: performExecutions() clears all collectionXxxxtion  // collections (the collection actions) in the session	WITHOUT_CLASSIFICATION	0.999992006722598	WITHOUT_CLASSIFICATION	7.993277402044953E-6	DESIGN
// if no array holder we found an unwrappered array (this can't occur, // because we now always call wrap() before getting to here) // return (ah==null) ? true : searchForDirtyCollections(ah, type);	WITHOUT_CLASSIFICATION	0.9980924764861406	WITHOUT_CLASSIFICATION	0.0019075235138594486	DESIGN
// if not wrappered yet, its dirty (this can't occur, because // we now always call wrap() before getting to here) // return ( ! (obj instanceof PersistentCollection) ) ? //true : searchForDirtyCollections( (PersistentCollection) obj, type );	WITHOUT_CLASSIFICATION	0.9986070429519421	WITHOUT_CLASSIFICATION	0.001392957048057886	DESIGN
//we need to check even if it was not initialized, because of delayed adds!	WITHOUT_CLASSIFICATION	0.9978544106422592	WITHOUT_CLASSIFICATION	0.002145589357740818	DESIGN
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9991804103666441	WITHOUT_CLASSIFICATION	8.195896333559992E-4	DESIGN
// find any entities that are still transient after retry	WITHOUT_CLASSIFICATION	0.999999894611541	WITHOUT_CLASSIFICATION	1.0538845894782155E-7	DESIGN
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9995325146869931	WITHOUT_CLASSIFICATION	4.6748531300699425E-4	DESIGN
// Check the persistence context for an entry relating to this // entity to be merged...	WITHOUT_CLASSIFICATION	0.999941250586215	WITHOUT_CLASSIFICATION	5.874941378506043E-5	DESIGN
// we have specialized case of a detached entity from the // perspective of the merge operation.  Specifically, we // have an incoming entity instance which has a corresponding // entry in the current persistence context, but registered // under a different entity instance	WITHOUT_CLASSIFICATION	0.9999876644151122	WITHOUT_CLASSIFICATION	1.2335584887725837E-5	DESIGN
//DELETED	WITHOUT_CLASSIFICATION	0.9979277582988246	WITHOUT_CLASSIFICATION	0.0020722417011754713	DESIGN
//before cascade!	WITHOUT_CLASSIFICATION	0.99988088124218	WITHOUT_CLASSIFICATION	1.1911875782003114E-4	DESIGN
// cascade first, so that all unsaved objects get their // copy created before we actually copy //cascadeOnMerge(event, persister, entity, copyCache, Cascades.CASCADE_BEFORE_MERGE);	WITHOUT_CLASSIFICATION	0.9999826816441473	WITHOUT_CLASSIFICATION	1.731835585270585E-5	DESIGN
//this bit is only *really* absolutely necessary for handling //requestedId, but is also good if we merge multiple object //graphs, since it helps ensure uniqueness	WITHOUT_CLASSIFICATION	0.9999233696428798	WITHOUT_CLASSIFICATION	7.663035712019429E-5	DESIGN
// continue...; we'll find out if it ends up not getting saved later	WITHOUT_CLASSIFICATION	0.9993544823884423	WITHOUT_CLASSIFICATION	6.455176115576634E-4	DESIGN
// cascade first, so that all unsaved objects get their // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999765166515892	WITHOUT_CLASSIFICATION	2.3483348410837546E-5	DESIGN
// check that entity id = requestedId	WITHOUT_CLASSIFICATION	0.999992102049529	WITHOUT_CLASSIFICATION	7.897950470993747E-6	DESIGN
//before cascade!	WITHOUT_CLASSIFICATION	0.99988088124218	WITHOUT_CLASSIFICATION	1.1911875782003114E-4	DESIGN
// we got here because we assumed that an instance // with an assigned id was detached, when it was // really persistent	WITHOUT_CLASSIFICATION	0.9999929427698051	WITHOUT_CLASSIFICATION	7.057230194816967E-6	DESIGN
// cascade first, so that all unsaved objects get their  // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999156340581764	WITHOUT_CLASSIFICATION	8.436594182363716E-5	DESIGN
//copyValues works by reflection, so explicitly mark the entity instance dirty	WITHOUT_CLASSIFICATION	0.9999217017474278	WITHOUT_CLASSIFICATION	7.829825257217821E-5	DESIGN
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.9995056509653923	WITHOUT_CLASSIFICATION	4.943490346075623E-4	DESIGN
//source.getBatcher().executeBatch(); //found another way to ensure that all batched joined inserts have been executed	WITHOUT_CLASSIFICATION	0.9999652978396214	WITHOUT_CLASSIFICATION	3.4702160378588604E-5	DESIGN
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9995942713299848	WITHOUT_CLASSIFICATION	4.0572867001512075E-4	DESIGN
//now done in EntityIdentityInsertAction //persister.setIdentifier( entity, id, source.getEntityMode() );	WITHOUT_CLASSIFICATION	0.9999951883761601	WITHOUT_CLASSIFICATION	4.811623839959711E-6	DESIGN
//source.getPersistenceContext().removeNonExist( new EntityKey( id, persister, source.getEntityMode() ) );	WITHOUT_CLASSIFICATION	0.9993067215799097	WITHOUT_CLASSIFICATION	6.932784200903566E-4	DESIGN
//keep the existing version number in the case of replicate!	WITHOUT_CLASSIFICATION	0.999996905666323	WITHOUT_CLASSIFICATION	3.094333676923839E-6	DESIGN
// cascade-save to many-to-one BEFORE the parent is saved	WITHOUT_CLASSIFICATION	0.9998240747446692	WITHOUT_CLASSIFICATION	1.7592525533089736E-4	DESIGN
//pass this as an argument only to avoid double looking	WITHOUT_CLASSIFICATION	0.9996026677288814	WITHOUT_CLASSIFICATION	3.9733227111856073E-4	DESIGN
// the object is persistent	WITHOUT_CLASSIFICATION	0.9999973849045655	WITHOUT_CLASSIFICATION	2.6150954345053796E-6	DESIGN
//the entity is associated with the session, so check its status	WITHOUT_CLASSIFICATION	0.999999466263473	WITHOUT_CLASSIFICATION	5.337365269751845E-7	DESIGN
// do nothing for persistent instances	WITHOUT_CLASSIFICATION	0.9999481933411571	WITHOUT_CLASSIFICATION	5.180665884285936E-5	DESIGN
//ie. e.status==DELETED	WITHOUT_CLASSIFICATION	0.9999536030998761	WITHOUT_CLASSIFICATION	4.639690012382394E-5	DESIGN
// the object is transient or detached	WITHOUT_CLASSIFICATION	0.9999995853602153	WITHOUT_CLASSIFICATION	4.146397847474997E-7	DESIGN
//NOTE EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9997356857449725	WITHOUT_CLASSIFICATION	2.6431425502746066E-4	DESIGN
// Private constructor - stops checkstyle from complaining.	WITHOUT_CLASSIFICATION	0.9998657481359503	WITHOUT_CLASSIFICATION	1.342518640496829E-4	DESIGN
// First, try to find a matching constructor accepting a ViolatedConstraintNameExtracter param...	WITHOUT_CLASSIFICATION	0.9998731261639838	WITHOUT_CLASSIFICATION	1.2687383601627444E-4	DESIGN
// eat it and try next	WITHOUT_CLASSIFICATION	0.9999847305546236	WITHOUT_CLASSIFICATION	1.526944537647772E-5	DESIGN
// Otherwise, try to use the no-arg constructor	WITHOUT_CLASSIFICATION	0.9999630874145304	WITHOUT_CLASSIFICATION	3.691258546954654E-5	DESIGN
// oracle sql-state code for deadlock	WITHOUT_CLASSIFICATION	0.9998894051588783	WITHOUT_CLASSIFICATION	1.1059484112179779E-4	DESIGN
// CollectionPropertyMapping processes everything except 'index'.	WITHOUT_CLASSIFICATION	0.9999978321931958	WITHOUT_CLASSIFICATION	2.167806804193749E-6	DESIGN
// remove initial ", "	WITHOUT_CLASSIFICATION	0.9998242673130469	WITHOUT_CLASSIFICATION	1.7573268695310102E-4	DESIGN
// remove initial " and "	WITHOUT_CLASSIFICATION	0.999895842299122	WITHOUT_CLASSIFICATION	1.0415770087802798E-4	DESIGN
//beforeClassTokens.add("new"); DEFINITELY DON'T HAVE THIS!!	WITHOUT_CLASSIFICATION	0.9942380744514505	WITHOUT_CLASSIFICATION	0.0057619255485495185	DESIGN
//notAfterClassTokens.add(",");	WITHOUT_CLASSIFICATION	0.999750257972131	WITHOUT_CLASSIFICATION	2.4974202786898366E-4	DESIGN
// just especially for the trivial collection filter	WITHOUT_CLASSIFICATION	0.9999999297940403	WITHOUT_CLASSIFICATION	7.02059596803576E-8	DESIGN
//update last non-whitespace token, if necessary	WITHOUT_CLASSIFICATION	0.9999928816595941	WITHOUT_CLASSIFICATION	7.118340405811897E-6	DESIGN
// select-range is terminated by declaration of "from"	WITHOUT_CLASSIFICATION	0.9999874640693882	WITHOUT_CLASSIFICATION	1.253593061185633E-5	DESIGN
//scan for next non-whitespace token	WITHOUT_CLASSIFICATION	0.9999562847350151	WITHOUT_CLASSIFICATION	4.3715264984872766E-5	DESIGN
// Note this!!	WITHOUT_CLASSIFICATION	0.9999487413801135	WITHOUT_CLASSIFICATION	5.125861988662652E-5	DESIGN
// Error message constants.	WITHOUT_CLASSIFICATION	0.999932431431346	WITHOUT_CLASSIFICATION	6.756856865395769E-5	DESIGN
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999549921842142	WITHOUT_CLASSIFICATION	4.500781578581709E-5	DESIGN
// semantic action handling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999916124182882	WITHOUT_CLASSIFICATION	8.387581711895468E-6	DESIGN
// Handle collection-fiter compilation. // IMPORTANT NOTE: This is modifying the INPUT (HQL) tree, not the output tree!	WITHOUT_CLASSIFICATION	0.9956270174762167	WITHOUT_CLASSIFICATION	0.004372982523783239	DESIGN
// Show the modified AST.	WITHOUT_CLASSIFICATION	0.9997044088871232	WITHOUT_CLASSIFICATION	2.9559111287681987E-4	DESIGN
// Create a parameter specification for the collection filter...	WITHOUT_CLASSIFICATION	0.9999995651440705	WITHOUT_CLASSIFICATION	4.3485592954071817E-7	DESIGN
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999508129042932	WITHOUT_CLASSIFICATION	4.918709570679092E-5	DESIGN
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999508129042932	WITHOUT_CLASSIFICATION	4.918709570679092E-5	DESIGN
// Get the names of the columns used to link between the collection // owner and the collection elements.	WITHOUT_CLASSIFICATION	0.9999995770548205	WITHOUT_CLASSIFICATION	4.229451795336976E-7	DESIGN
// The path AST should be a DotNode, and it should have been evaluated already.	WITHOUT_CLASSIFICATION	0.9940664069101781	WITHOUT_CLASSIFICATION	0.0059335930898218444	DESIGN
// Tell the dot node about the join type.	WITHOUT_CLASSIFICATION	0.9999222388516348	WITHOUT_CLASSIFICATION	7.776114836518815E-5	DESIGN
// Re-arrange the tree so that the collection function is the root and the lhs is the path.	WITHOUT_CLASSIFICATION	0.9999982618650395	WITHOUT_CLASSIFICATION	1.73813496044132E-6	DESIGN
// Don't forget to resolve the argument! // Resolve the collection function now.	WITHOUT_CLASSIFICATION	0.9999988429948545	WITHOUT_CLASSIFICATION	1.1570051454370332E-6	DESIGN
// Resolve everything up to this dot, but don't resolve the placeholders yet.	WITHOUT_CLASSIFICATION	0.9869712141436396	WITHOUT_CLASSIFICATION	0.01302878585636037	DESIGN
// Should mean that no such property was found	WITHOUT_CLASSIFICATION	0.9994586880240832	WITHOUT_CLASSIFICATION	5.413119759167805E-4	DESIGN
// Was there an explicit select expression?	WITHOUT_CLASSIFICATION	0.9999993750281774	WITHOUT_CLASSIFICATION	6.249718226218857E-7	DESIGN
// Attach any mapping-defined "ORDER BY" fragments	WITHOUT_CLASSIFICATION	0.9999988705040455	WITHOUT_CLASSIFICATION	1.1294959546026026E-6	DESIGN
// Use the explicitly declared select expression; determine the // return types indicated by each select token	WITHOUT_CLASSIFICATION	0.9999979300437788	WITHOUT_CLASSIFICATION	2.0699562212290644E-6	DESIGN
// After that, process the JOINs. // Invoke a delegate to do the work, as this is farily complex.	WITHOUT_CLASSIFICATION	0.9415181363888168	WITHOUT_CLASSIFICATION	0.058481863611183175	DESIGN
// Make #@%$^#^&# sure no alias is applied to the table name	WITHOUT_CLASSIFICATION	0.9999989483672534	WITHOUT_CLASSIFICATION	1.0516327465645602E-6	DESIGN
// We need to generate ids as part of this bulk insert. // // Note that this is only supported for sequence-style generators and // post-insert-style generators; basically, only in-db generators	WITHOUT_CLASSIFICATION	0.999998677637882	WITHOUT_CLASSIFICATION	1.3223621180590378E-6	DESIGN
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999508129042932	WITHOUT_CLASSIFICATION	4.918709570679092E-5	DESIGN
// We need to seed the version value as part of this bulk insert	WITHOUT_CLASSIFICATION	0.9999994205380345	WITHOUT_CLASSIFICATION	5.794619654810181E-7	DESIGN
// we need to wrtap the param in a cast()	WITHOUT_CLASSIFICATION	0.9989910031692136	WITHOUT_CLASSIFICATION	0.0010089968307863805	DESIGN
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9953427478788398	WITHOUT_CLASSIFICATION	0.004657252121160117	DESIGN
// Generate implicit joins, only if necessary.	WITHOUT_CLASSIFICATION	0.999999506043873	WITHOUT_CLASSIFICATION	4.939561270436579E-7	DESIGN
// Notify the FROM element that it is being referenced by the select.	WITHOUT_CLASSIFICATION	0.9999876689554984	WITHOUT_CLASSIFICATION	1.2331044501598366E-5	DESIGN
// Turn off includeSubclasses on all FromElements.	WITHOUT_CLASSIFICATION	0.9999973436324717	WITHOUT_CLASSIFICATION	2.6563675283252704E-6	DESIGN
// create the node initially with the param name so that it shows // appropriately in the "original text" attribute	WITHOUT_CLASSIFICATION	0.9998843768832817	WITHOUT_CLASSIFICATION	1.1562311671828837E-4	DESIGN
// Use the delegate, resolve identifiers as FROM element aliases.	WITHOUT_CLASSIFICATION	0.9999977997989542	WITHOUT_CLASSIFICATION	2.20020104582778E-6	DESIGN
// select clauses for insert statements should alwasy be treated as shallow	WITHOUT_CLASSIFICATION	0.9999950396180013	WITHOUT_CLASSIFICATION	4.960381998604718E-6	DESIGN
// no need to even collect this information if the persister is considered multi-table	WITHOUT_CLASSIFICATION	0.9999689017620951	WITHOUT_CLASSIFICATION	3.1098237904988006E-5	DESIGN
// Make sure that the persister is versioned	WITHOUT_CLASSIFICATION	0.9999802675632049	WITHOUT_CLASSIFICATION	1.973243679516886E-5	DESIGN
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999549921842142	WITHOUT_CLASSIFICATION	4.500781578581709E-5	DESIGN
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999508129042932	WITHOUT_CLASSIFICATION	4.918709570679092E-5	DESIGN
// --Commented out by Inspection (12/11/04 10:56 AM): int getWarningCount();	WITHOUT_CLASSIFICATION	0.9999967232579727	WITHOUT_CLASSIFICATION	3.276742027227352E-6	DESIGN
// Alias references and identifiers use the same node class.	WITHOUT_CLASSIFICATION	0.999998889341078	WITHOUT_CLASSIFICATION	1.1106589221005423E-6	DESIGN
// switch	WITHOUT_CLASSIFICATION	0.999946466045753	WITHOUT_CLASSIFICATION	5.3533954246946425E-5	DESIGN
// make a new one	WITHOUT_CLASSIFICATION	0.9999987335584417	WITHOUT_CLASSIFICATION	1.266441558295234E-6	DESIGN
// just do the regular thing if you can't find the ctor // Your AST must have default ctor to use this.	WITHOUT_CLASSIFICATION	0.9973641256483567	WITHOUT_CLASSIFICATION	0.0026358743516432916	DESIGN
// Initialize SQL nodes here.	WITHOUT_CLASSIFICATION	0.9999863835141525	WITHOUT_CLASSIFICATION	1.361648584748847E-5	DESIGN
// semantic action processing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999986800399432	WITHOUT_CLASSIFICATION	1.319960056834911E-6	DESIGN
// if template is null we just write the function out as it appears in the hql statement	WITHOUT_CLASSIFICATION	0.999998034992586	WITHOUT_CLASSIFICATION	1.965007414002774E-6	DESIGN
// this function has a template -> redirect output and catch the arguments	WITHOUT_CLASSIFICATION	0.999999149095526	WITHOUT_CLASSIFICATION	8.509044739886994E-7	DESIGN
// --- Inner classes (moved here from sql-gen.g) ---	WITHOUT_CLASSIFICATION	0.9991412369161811	WITHOUT_CLASSIFICATION	8.587630838189958E-4	DESIGN
// check two "adjecent" nodes at the top of the from-clause tree	WITHOUT_CLASSIFICATION	0.999999160108373	WITHOUT_CLASSIFICATION	8.39891627017077E-7	DESIGN
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9998439500587284	WITHOUT_CLASSIFICATION	1.5604994127160722E-4	DESIGN
// these are just two unrelated table references	WITHOUT_CLASSIFICATION	0.9999975429110503	WITHOUT_CLASSIFICATION	2.4570889497589764E-6	DESIGN
// again, both should be FromElements	WITHOUT_CLASSIFICATION	0.9999688007943826	WITHOUT_CLASSIFICATION	3.119920561755459E-5	DESIGN
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9989231191667722	WITHOUT_CLASSIFICATION	0.0010768808332277961	DESIGN
// right represents a joins originating from left; or // both right and left reprersent joins originating from the same FromElement	WITHOUT_CLASSIFICATION	0.9998979603806851	WITHOUT_CLASSIFICATION	1.020396193148579E-4	DESIGN
// check a set of parent/child nodes in the from-clause tree // to determine if a comma is required between them	WITHOUT_CLASSIFICATION	0.9999989605937594	WITHOUT_CLASSIFICATION	1.03940624067919E-6	DESIGN
// right represents a joins originating from left...	WITHOUT_CLASSIFICATION	0.9981500487673356	WITHOUT_CLASSIFICATION	0.0018499512326643724	DESIGN
// all clear	WITHOUT_CLASSIFICATION	0.9999922226400344	WITHOUT_CLASSIFICATION	7.777359965538314E-6	DESIGN
// Ignore the token class name parameter, and use a specific token class.	WITHOUT_CLASSIFICATION	0.999999589919212	WITHOUT_CLASSIFICATION	4.1008078798706864E-7	DESIGN
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999893483654397	WITHOUT_CLASSIFICATION	1.065163456019936E-5	DESIGN
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999893483654397	WITHOUT_CLASSIFICATION	1.065163456019936E-5	DESIGN
// remember that ordinal parameters numbers are 1-based!!!	WITHOUT_CLASSIFICATION	0.9999997535589874	WITHOUT_CLASSIFICATION	2.464410126573445E-7	DESIGN
// don't care about other param types here, just those explicitly user-defined...	WITHOUT_CLASSIFICATION	0.9999950784794226	WITHOUT_CLASSIFICATION	4.9215205773680915E-6	DESIGN
// If the query is already compiled, skip the compilation.	WITHOUT_CLASSIFICATION	0.9999995210401242	WITHOUT_CLASSIFICATION	4.789598758353336E-7	DESIGN
// Remember the parameters for the compilation.	WITHOUT_CLASSIFICATION	0.999999722452334	WITHOUT_CLASSIFICATION	2.7754766599743963E-7	DESIGN
// PHASE 1 : Parse the HQL into an AST.	WITHOUT_CLASSIFICATION	0.9995667246967821	WITHOUT_CLASSIFICATION	4.3327530321800496E-4	DESIGN
// PHASE 2 : Analyze the HQL AST, and produce an SQL AST.	WITHOUT_CLASSIFICATION	0.9987766548242795	WITHOUT_CLASSIFICATION	0.0012233451757204612	DESIGN
// PHASE 3 : Generate the SQL.	WITHOUT_CLASSIFICATION	0.9996933120632384	WITHOUT_CLASSIFICATION	3.066879367616754E-4	DESIGN
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9585450308690286	WITHOUT_CLASSIFICATION	0.041454969130971284	DESIGN
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9585450308690286	WITHOUT_CLASSIFICATION	0.041454969130971284	DESIGN
//only needed during compilation phase...	WITHOUT_CLASSIFICATION	0.9999778557372825	WITHOUT_CLASSIFICATION	2.2144262717417686E-5	DESIGN
// Transform the tree.	WITHOUT_CLASSIFICATION	0.9999984847061929	WITHOUT_CLASSIFICATION	1.515293807158016E-6	DESIGN
// Parse the query string into an HQL AST.	WITHOUT_CLASSIFICATION	0.9997511182347396	WITHOUT_CLASSIFICATION	2.4888176526047663E-4	DESIGN
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999500749404236	WITHOUT_CLASSIFICATION	4.992505957638144E-5	DESIGN
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999500749404236	WITHOUT_CLASSIFICATION	4.992505957638144E-5	DESIGN
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999500749404236	WITHOUT_CLASSIFICATION	4.992505957638144E-5	DESIGN
// NOTE : ( max - 1 ) because first is zero-based while max is not...	WITHOUT_CLASSIFICATION	0.9191520141696073	WITHOUT_CLASSIFICATION	0.08084798583039264	DESIGN
// -- Package local methods for the QueryLoader delegate --	WITHOUT_CLASSIFICATION	0.9999920552443473	WITHOUT_CLASSIFICATION	7.944755652691355E-6	DESIGN
// If there are no collection fetches, then no further checks are needed	WITHOUT_CLASSIFICATION	0.9999994330680311	WITHOUT_CLASSIFICATION	5.669319689798015E-7	DESIGN
// A shallow query is ok (although technically there should be no fetching here...)	WITHOUT_CLASSIFICATION	0.9736500761297399	WITHOUT_CLASSIFICATION	0.02634992387026015	DESIGN
// should be the first, but just to be safe...	WITHOUT_CLASSIFICATION	0.99047895077819	WITHOUT_CLASSIFICATION	0.009521049221809911	DESIGN
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999508129042932	WITHOUT_CLASSIFICATION	4.918709570679092E-5	DESIGN
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999508129042932	WITHOUT_CLASSIFICATION	4.918709570679092E-5	DESIGN
// Impl Note: allows multiple collection fetches as long as the // entire fecthed graph still "points back" to a single // root entity for return	WITHOUT_CLASSIFICATION	0.9999995208369707	WITHOUT_CLASSIFICATION	4.791630292283707E-7	DESIGN
// Otherwise, we have a non-scalar select with defined collection fetch(es). // Make sure that there is only a single root entity in the return (no tuples)	WITHOUT_CLASSIFICATION	0.9999983404224704	WITHOUT_CLASSIFICATION	1.6595775295838046E-6	DESIGN
// This is not strictly true.  We actually just need to make sure that // it is ordered by root-entity PK and that that order-by comes before // any non-root-entity ordering...	WITHOUT_CLASSIFICATION	0.9993319141598506	WITHOUT_CLASSIFICATION	6.680858401494551E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9997835908563089	WITHOUT_CLASSIFICATION	2.164091436910978E-4	DESIGN
// we are already processing a dot-structure	WITHOUT_CLASSIFICATION	0.9981735940109155	WITHOUT_CLASSIFICATION	0.0018264059890844195	DESIGN
// igndore it...	WITHOUT_CLASSIFICATION	0.9999752811823928	WITHOUT_CLASSIFICATION	2.47188176072557E-5	DESIGN
// we are now at a new tree level	WITHOUT_CLASSIFICATION	0.9999994483576411	WITHOUT_CLASSIFICATION	5.516423588742723E-7	DESIGN
// [jsd] The fix for HHH-558...	WITHOUT_CLASSIFICATION	0.96707678377124	WITHOUT_CLASSIFICATION	0.032923216228760085	DESIGN
// If the token can tell us if it could be an identifier...	WITHOUT_CLASSIFICATION	0.99995494461102	WITHOUT_CLASSIFICATION	4.505538898000471E-5	DESIGN
// ... and the expected token type was an identifier, then:	WITHOUT_CLASSIFICATION	0.99999972219856	WITHOUT_CLASSIFICATION	2.7780144007047584E-7	DESIGN
// Use the token as an identifier.	WITHOUT_CLASSIFICATION	0.9999970362901577	WITHOUT_CLASSIFICATION	2.963709842342049E-6	DESIGN
// Add the token to the AST.	WITHOUT_CLASSIFICATION	0.9999728733379879	WITHOUT_CLASSIFICATION	2.712666201200935E-5	DESIGN
// (NOT (EQ a b) ) => (NE a b)	WITHOUT_CLASSIFICATION	0.9996580558416525	WITHOUT_CLASSIFICATION	3.4194415834747386E-4	DESIGN
// (NOT (NE a b) ) => (EQ a b)	WITHOUT_CLASSIFICATION	0.9996580558416525	WITHOUT_CLASSIFICATION	3.4194415834747386E-4	DESIGN
// (NOT (LT a b) ) => (GE a b)	WITHOUT_CLASSIFICATION	0.9996792323787285	WITHOUT_CLASSIFICATION	3.207676212715271E-4	DESIGN
// (NOT (GE a b) ) => (LT a b)	WITHOUT_CLASSIFICATION	0.9996792323787285	WITHOUT_CLASSIFICATION	3.207676212715271E-4	DESIGN
// (NOT (LE a b) ) => (GT a b)	WITHOUT_CLASSIFICATION	0.9995815111630382	WITHOUT_CLASSIFICATION	4.1848883696174905E-4	DESIGN
// (NOT (LIKE a b) ) => (NOT_LIKE a b)	WITHOUT_CLASSIFICATION	0.9998583738112562	WITHOUT_CLASSIFICATION	1.416261887437381E-4	DESIGN
// (NOT (NOT_LIKE a b) ) => (LIKE a b)	WITHOUT_CLASSIFICATION	0.9998583738112562	WITHOUT_CLASSIFICATION	1.416261887437381E-4	DESIGN
// (NOT (IS_NOT_NULL a b) ) => (IS_NULL a b)	WITHOUT_CLASSIFICATION	0.9998275813423257	WITHOUT_CLASSIFICATION	1.7241865767426065E-4	DESIGN
// (NOT (BETWEEN a b) ) => (NOT_BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9998860804709369	WITHOUT_CLASSIFICATION	1.139195290631174E-4	DESIGN
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999466864660584	WITHOUT_CLASSIFICATION	5.33135339415876E-5	DESIGN
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999893483654397	WITHOUT_CLASSIFICATION	1.065163456019936E-5	DESIGN
// if // if // Otherwise, handle the error normally.	WITHOUT_CLASSIFICATION	0.9969346210154231	WITHOUT_CLASSIFICATION	0.0030653789845769687	DESIGN
// (NOT (NOT_BETWEEN a b) ) => (BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9998860804709369	WITHOUT_CLASSIFICATION	1.139195290631174E-4	DESIGN
/* This can never happen because this rule will always eliminate the child NOT.	WITHOUT_CLASSIFICATION	0.999899232051482	WITHOUT_CLASSIFICATION	1.0076794851807765E-4	DESIGN
// Just add a 'not' parent.	WITHOUT_CLASSIFICATION	0.9999861570897107	WITHOUT_CLASSIFICATION	1.384291028917202E-5	DESIGN
// (EQ NULL b) => (IS_NULL b)	WITHOUT_CLASSIFICATION	0.999904676180672	WITHOUT_CLASSIFICATION	9.532381932798056E-5	DESIGN
// (EQ a NULL) => (IS_NULL a)	WITHOUT_CLASSIFICATION	0.9999264894108691	WITHOUT_CLASSIFICATION	7.351058913088732E-5	DESIGN
// NOTE: Because we're using ASTUtil.createParent(), the tree must be created from the bottom up. // IS EMPTY x => (EXISTS (QUERY (SELECT_FROM (FROM x) ) ) )	WITHOUT_CLASSIFICATION	0.9996879390666926	WITHOUT_CLASSIFICATION	3.120609333074266E-4	DESIGN
// Add NOT if it's negated.	WITHOUT_CLASSIFICATION	0.9999915441580594	WITHOUT_CLASSIFICATION	8.455841940605197E-6	DESIGN
// Create nodes that track line and column number.	WITHOUT_CLASSIFICATION	0.9999984313233068	WITHOUT_CLASSIFICATION	1.5686766932156592E-6	DESIGN
// Case 1: Multi token keywords GROUP BY and ORDER BY // The next token ( LT(2) ) should be 'by'... otherwise, this is just an ident.	WITHOUT_CLASSIFICATION	0.9607867376146507	WITHOUT_CLASSIFICATION	0.03921326238534918	DESIGN
// Case 2: The current token is after FROM and before '.'.	WITHOUT_CLASSIFICATION	0.9999976080145719	WITHOUT_CLASSIFICATION	2.3919854280092617E-6	DESIGN
// This handles HHH-354, where there is a strange property name in a where clause. // If the lookahead contains a DOT then something that isn't an IDENT...	WITHOUT_CLASSIFICATION	0.5754701795478459	WITHOUT_CLASSIFICATION	0.424529820452154	DESIGN
// See if the second lookahed token can be an identifier.	WITHOUT_CLASSIFICATION	0.9999997106768578	WITHOUT_CLASSIFICATION	2.89323142198949E-7	DESIGN
// Set it!	WITHOUT_CLASSIFICATION	0.9999169460372409	WITHOUT_CLASSIFICATION	8.305396275909676E-5	DESIGN
// ignore	WITHOUT_CLASSIFICATION	0.9999895196549758	WITHOUT_CLASSIFICATION	1.0480345024145823E-5	DESIGN
// strip the " where "	WITHOUT_CLASSIFICATION	0.9999819964958067	WITHOUT_CLASSIFICATION	1.8003504193346213E-5	DESIGN
// Don't really know all the codes required to adequately decipher returned jdbc exceptions here. // simply allow the failure to be eaten and the subsequent insert-selects/deletes should fail	WITHOUT_CLASSIFICATION	0.9999997002596811	WITHOUT_CLASSIFICATION	2.9974031892442523E-7	DESIGN
// at the very least cleanup the data :)	WITHOUT_CLASSIFICATION	0.9999177071077153	WITHOUT_CLASSIFICATION	8.22928922847427E-5	DESIGN
// First, save off the pertinent ids, as the return value	WITHOUT_CLASSIFICATION	0.9999951372061002	WITHOUT_CLASSIFICATION	4.862793899776977E-6	DESIGN
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999866404838985	WITHOUT_CLASSIFICATION	1.335951610157514E-5	DESIGN
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999866404838985	WITHOUT_CLASSIFICATION	1.335951610157514E-5	DESIGN
// Start performing the updates	WITHOUT_CLASSIFICATION	0.9999997192715481	WITHOUT_CLASSIFICATION	2.807284520091191E-7	DESIGN
// First, save off the pertinent ids, saving the number of pertinent ids for return	WITHOUT_CLASSIFICATION	0.9999680127229146	WITHOUT_CLASSIFICATION	3.198727708537884E-5	DESIGN
// Start performing the deletes	WITHOUT_CLASSIFICATION	0.9999994999084716	WITHOUT_CLASSIFICATION	5.000915283850904E-7	DESIGN
// otherwise, everything ok.	WITHOUT_CLASSIFICATION	0.9998691767275557	WITHOUT_CLASSIFICATION	1.3082327244428463E-4	DESIGN
// visit width-first, then depth	WITHOUT_CLASSIFICATION	0.999024179612829	WITHOUT_CLASSIFICATION	9.758203871710047E-4	DESIGN
// if the types report logical equivalence, return true...	WITHOUT_CLASSIFICATION	0.9999956210438705	WITHOUT_CLASSIFICATION	4.378956129564746E-6	DESIGN
// otherwise, perform a "deep equivalence" check...	WITHOUT_CLASSIFICATION	0.9999844402873461	WITHOUT_CLASSIFICATION	1.5559712653868377E-5	DESIGN
// If there is no WHERE node, make one.	WITHOUT_CLASSIFICATION	0.9999971824833972	WITHOUT_CLASSIFICATION	2.8175166029023594E-6	DESIGN
// inject the WHERE after the parent	WITHOUT_CLASSIFICATION	0.9999984314271325	WITHOUT_CLASSIFICATION	1.5685728674242714E-6	DESIGN
// Never include subclasses for implied from elements.	WITHOUT_CLASSIFICATION	0.9999854238583642	WITHOUT_CLASSIFICATION	1.4576141635952442E-5	DESIGN
// Moved here from SelectClause [jsd]	WITHOUT_CLASSIFICATION	0.9995894011950001	WITHOUT_CLASSIFICATION	4.105988049998804E-4	DESIGN
///////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9998439500587284	WITHOUT_CLASSIFICATION	1.5604994127160722E-4	DESIGN
// Use the table fromElement and the property name to get the array of column names.	WITHOUT_CLASSIFICATION	0.9996428440519614	WITHOUT_CLASSIFICATION	3.5715594803854584E-4	DESIGN
// Set the attributes of the property reference expression.	WITHOUT_CLASSIFICATION	0.9999971898124351	WITHOUT_CLASSIFICATION	2.8101875648658057E-6	DESIGN
// If the uresolved property path isn't set yet, just use the property name.	WITHOUT_CLASSIFICATION	0.9997650984879088	WITHOUT_CLASSIFICATION	2.3490151209116914E-4	DESIGN
// The 'from element' that the property is in.	WITHOUT_CLASSIFICATION	0.9955136077407502	WITHOUT_CLASSIFICATION	0.004486392259249788	DESIGN
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999950220689323	WITHOUT_CLASSIFICATION	4.977931067676897E-6	DESIGN
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999950220689323	WITHOUT_CLASSIFICATION	4.977931067676897E-6	DESIGN
// If this dot has already been resolved, stop now.	WITHOUT_CLASSIFICATION	0.9993258598696771	WITHOUT_CLASSIFICATION	6.741401303229319E-4	DESIGN
// If there is no data type for this node, and we're at the end of the path (top most dot node), then // this might be a Java constant.	WITHOUT_CLASSIFICATION	0.9999610125092293	WITHOUT_CLASSIFICATION	3.8987490770694386E-5	DESIGN
// The property is a collection...	WITHOUT_CLASSIFICATION	0.973587398666537	WITHOUT_CLASSIFICATION	0.026412601333463008	DESIGN
// The property is a component...	WITHOUT_CLASSIFICATION	0.8695301016262988	WITHOUT_CLASSIFICATION	0.13046989837370107	DESIGN
// The property is another class..	WITHOUT_CLASSIFICATION	0.8824341038251116	WITHOUT_CLASSIFICATION	0.11756589617488844	DESIGN
// Otherwise, this is a primitive type.	WITHOUT_CLASSIFICATION	0.9993489901410488	WITHOUT_CLASSIFICATION	6.510098589512343E-4	DESIGN
//foo.bars.size (also handles deprecated stuff like foo.bars.maxelement for backwardness)	WITHOUT_CLASSIFICATION	0.9944235294864021	WITHOUT_CLASSIFICATION	0.00557647051359783	DESIGN
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9996524220139694	WITHOUT_CLASSIFICATION	3.4757798603060196E-4	DESIGN
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999921677001546	WITHOUT_CLASSIFICATION	7.832299845363264E-6	DESIGN
// in non-select queries, the only time we should need to join is if we are in a subquery from clause	WITHOUT_CLASSIFICATION	0.9870137127609123	WITHOUT_CLASSIFICATION	0.012986287239087655	DESIGN
// this is the regression style determination which matches the logic of the classic translator	WITHOUT_CLASSIFICATION	0.9999839892012705	WITHOUT_CLASSIFICATION	1.6010798729506184E-5	DESIGN
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9996524220139694	WITHOUT_CLASSIFICATION	3.4757798603060196E-4	DESIGN
// even though we might find a pre-existing element by join path, we may not be able to reuse it...	WITHOUT_CLASSIFICATION	0.9993369635571436	WITHOUT_CLASSIFICATION	6.630364428564032E-4	DESIGN
// NOTE : addDuplicateAlias() already performs nullness checks on the alias.	WITHOUT_CLASSIFICATION	0.999999544910087	WITHOUT_CLASSIFICATION	4.5508991291748674E-7	DESIGN
// if the from-clauses are the same, we can be a little more aggressive in terms of what we reuse	WITHOUT_CLASSIFICATION	0.9992264478036036	WITHOUT_CLASSIFICATION	7.73552196396289E-4	DESIGN
// again, null != null here	WITHOUT_CLASSIFICATION	0.9999889188050973	WITHOUT_CLASSIFICATION	1.1081194902637648E-5	DESIGN
// If this is an implied join in a from element, then use the impled join type which is part of the // tree parser's state (set by the gramamar actions).	WITHOUT_CLASSIFICATION	0.9999993992745753	WITHOUT_CLASSIFICATION	6.007254246593956E-7	DESIGN
// otherwise (subquery case) dont reuse the fromElement if we are processing the from-clause of the subquery	WITHOUT_CLASSIFICATION	0.9737361971750531	WITHOUT_CLASSIFICATION	0.026263802824946957	DESIGN
// we know only the lhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999572685628962	WITHOUT_CLASSIFICATION	4.2731437103707485E-5	DESIGN
// the referenced node text is the special 'id'	WITHOUT_CLASSIFICATION	0.9999971278247355	WITHOUT_CLASSIFICATION	2.8721752646151118E-6	DESIGN
// only the identifier property field name can be a reference to the associated entity's PK...	WITHOUT_CLASSIFICATION	0.9999848786757364	WITHOUT_CLASSIFICATION	1.5121324263666275E-5	DESIGN
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9999991526592892	WITHOUT_CLASSIFICATION	8.473407107400291E-7	DESIGN
// Append the new property name onto the unresolved path.	WITHOUT_CLASSIFICATION	0.9999330799034336	WITHOUT_CLASSIFICATION	6.692009656642061E-5	DESIGN
// If the lhs is a collection, use CollectionPropertyMapping	WITHOUT_CLASSIFICATION	0.998063514330694	WITHOUT_CLASSIFICATION	0.0019364856693060422	DESIGN
// Tell the destination fromElement to 'includeSubclasses'.	WITHOUT_CLASSIFICATION	0.9998809918791305	WITHOUT_CLASSIFICATION	1.1900812086944122E-4	DESIGN
// Use theta style (for regression) // Move the node up, after the origin node.	WITHOUT_CLASSIFICATION	0.9998641819599667	WITHOUT_CLASSIFICATION	1.358180400331639E-4	DESIGN
// Don't resolve the node again.	WITHOUT_CLASSIFICATION	0.9999964924224197	WITHOUT_CLASSIFICATION	3.5075775803210345E-6	DESIGN
// for expected parameter type injection, we expect that the lhs represents // some form of property ref and that the children of the in-list represent // one-or-more params.	WITHOUT_CLASSIFICATION	0.9999996142025374	WITHOUT_CLASSIFICATION	3.857974625947461E-7	DESIGN
// we need to strip off the embedded parens so that sql-gen does not double these up	WITHOUT_CLASSIFICATION	0.9999946024439349	WITHOUT_CLASSIFICATION	5.397556065103866E-6	DESIGN
// we have something like : "? [op] rhs"	WITHOUT_CLASSIFICATION	0.9822435107438724	WITHOUT_CLASSIFICATION	0.01775648925612771	DESIGN
// we have something like : "lhs [op] ?"	WITHOUT_CLASSIFICATION	0.9879578132288809	WITHOUT_CLASSIFICATION	0.0120421867711191	DESIGN
// we know only the rhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.999964072554455	WITHOUT_CLASSIFICATION	3.592744554504744E-5	DESIGN
// handle the (assumed) valid cases: // #1 - the only valid datetime addition synatx is one or the other is a datetime (but not both)	WITHOUT_CLASSIFICATION	0.9896672216543796	WITHOUT_CLASSIFICATION	0.010332778345620503	DESIGN
// one or the other needs to be a datetime for us to get into this method in the first place...	WITHOUT_CLASSIFICATION	0.997933551755507	WITHOUT_CLASSIFICATION	0.002066448244492968	DESIGN
// #3 - note that this is also true of "datetime - :param"...	WITHOUT_CLASSIFICATION	0.998931767645405	WITHOUT_CLASSIFICATION	0.0010682323545950097	DESIGN
// #2	WITHOUT_CLASSIFICATION	0.999956851736226	WITHOUT_CLASSIFICATION	4.314826377398747E-5	DESIGN
// Generate the inner join -- The elements need to be joined to the collection they are in.	WITHOUT_CLASSIFICATION	0.9999988580531248	WITHOUT_CLASSIFICATION	1.1419468751456282E-6	DESIGN
// nothing to do	WITHOUT_CLASSIFICATION	0.9981163008388473	WITHOUT_CLASSIFICATION	0.0018836991611527775	DESIGN
// The 'from element' that represents the elements of the collection.	WITHOUT_CLASSIFICATION	0.9999951279883297	WITHOUT_CLASSIFICATION	4.872011670412704E-6	DESIGN
// Add the condition to the join sequence that qualifies the indexed element.	WITHOUT_CLASSIFICATION	0.99999970040855	WITHOUT_CLASSIFICATION	2.9959144991590473E-7	DESIGN
// Sometimes use the element table alias, sometimes use the... umm... collection table alias (many to many)	WITHOUT_CLASSIFICATION	0.9999984528803184	WITHOUT_CLASSIFICATION	1.5471196816802652E-6	DESIGN
// Now, set the text for this node.  It should be the element columns.	WITHOUT_CLASSIFICATION	0.9972081812353746	WITHOUT_CLASSIFICATION	0.002791818764625554	DESIGN
// Get the function return value type, based on the type of the first argument.	WITHOUT_CLASSIFICATION	0.9999997861518524	WITHOUT_CLASSIFICATION	2.1384814765493882E-7	DESIGN
// This will call initialize(tok)!	WITHOUT_CLASSIFICATION	0.7352222104045518	WITHOUT_CLASSIFICATION	0.2647777895954482	DESIGN
// mutation depends on the types of nodes invloved...	WITHOUT_CLASSIFICATION	0.999938774067365	WITHOUT_CLASSIFICATION	6.12259326350893E-5	DESIGN
// "pass along" our initial embedded parameter node(s) to the first generated // sql fragment so that it can be handled later for parameter binding...	WITHOUT_CLASSIFICATION	0.9994534953144992	WITHOUT_CLASSIFICATION	5.465046855007304E-4	DESIGN
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999968108688986	WITHOUT_CLASSIFICATION	3.189131101375314E-6	DESIGN
// Generated select expressions are already resolved, nothing to do.	WITHOUT_CLASSIFICATION	0.9999830594036201	WITHOUT_CLASSIFICATION	1.6940596379875585E-5	DESIGN
// The path may be a reference to an alias defined in the parent query.	WITHOUT_CLASSIFICATION	0.9998023003727715	WITHOUT_CLASSIFICATION	1.9769962722856243E-4	DESIGN
// The HQL class alias refers to the class name.	WITHOUT_CLASSIFICATION	0.9999602642662142	WITHOUT_CLASSIFICATION	3.9735733785772824E-5	DESIGN
// Associate the table alias with the element.	WITHOUT_CLASSIFICATION	0.9999998762323314	WITHOUT_CLASSIFICATION	1.237676685937139E-7	DESIGN
// try the parent FromClause...	WITHOUT_CLASSIFICATION	0.9999928857307578	WITHOUT_CLASSIFICATION	7.1142692422102605E-6	DESIGN
// Add the new node to the map so that we don't create it twice.	WITHOUT_CLASSIFICATION	0.999997676837311	WITHOUT_CLASSIFICATION	2.3231626890814944E-6	DESIGN
// Make sure that all from elements registered with this FROM clause are actually in the AST.	WITHOUT_CLASSIFICATION	0.9998709466572767	WITHOUT_CLASSIFICATION	1.2905334272334058E-4	DESIGN
// Invoke setScalarColumnText on each constructor argument.	WITHOUT_CLASSIFICATION	0.999990135718384	WITHOUT_CLASSIFICATION	9.864281616060238E-6	DESIGN
// Collect the select expressions, skip the first child because it is the class name.	WITHOUT_CLASSIFICATION	0.9999999228001781	WITHOUT_CLASSIFICATION	7.719982189064124E-8	DESIGN
// return an empty Type array	WITHOUT_CLASSIFICATION	0.9999397297301189	WITHOUT_CLASSIFICATION	6.0270269881150296E-5	DESIGN
// Constructors are always considered scalar results.	WITHOUT_CLASSIFICATION	0.9999545822835063	WITHOUT_CLASSIFICATION	4.541771649357999E-5	DESIGN
// this is the exception returned by ReflectHelper.getConstructor() if it cannot // locate an appropriate constructor	WITHOUT_CLASSIFICATION	0.9985238896976937	WITHOUT_CLASSIFICATION	0.001476110302306347	DESIGN
// if there is no order by, make one	WITHOUT_CLASSIFICATION	0.9999995462760747	WITHOUT_CLASSIFICATION	4.537239252616521E-7	DESIGN
// Find the WHERE; if there is no WHERE, find the FROM...	WITHOUT_CLASSIFICATION	0.999651939284301	WITHOUT_CLASSIFICATION	3.480607156989911E-4	DESIGN
// Now, inject the newly built ORDER BY into the tree	WITHOUT_CLASSIFICATION	0.9999939268406487	WITHOUT_CLASSIFICATION	6.07315935132118E-6	DESIGN
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999995861934181	WITHOUT_CLASSIFICATION	4.1380658189970125E-6	DESIGN
// logic operators by definition resolve to boolean.	WITHOUT_CLASSIFICATION	0.9999945279983681	WITHOUT_CLASSIFICATION	5.472001631948205E-6	DESIGN
// Render the identifier select fragment using the table alias.	WITHOUT_CLASSIFICATION	0.9999990292375402	WITHOUT_CLASSIFICATION	9.70762459729643E-7	DESIGN
// Class names in the FROM clause result in a JoinSequence (the old FromParser does this).	WITHOUT_CLASSIFICATION	0.9999656389535883	WITHOUT_CLASSIFICATION	3.436104641177388E-5	DESIGN
// For many-to-many joins, use the tablename from the queryable collection for the default text.	WITHOUT_CLASSIFICATION	0.9999988772283444	WITHOUT_CLASSIFICATION	1.1227716556348045E-6	DESIGN
// Otherwise, use the property mapping.	WITHOUT_CLASSIFICATION	0.9998993303980944	WITHOUT_CLASSIFICATION	1.006696019056168E-4	DESIGN
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9999292906821223	WITHOUT_CLASSIFICATION	7.070931787762383E-5	DESIGN
// If the property is a special collection property name, return a CollectionPropertyMapping.	WITHOUT_CLASSIFICATION	0.9999927150696386	WITHOUT_CLASSIFICATION	7.284930361310974E-6	DESIGN
// Collection of components.	WITHOUT_CLASSIFICATION	0.9999923834803758	WITHOUT_CLASSIFICATION	7.616519624153698E-6	DESIGN
// make sure the lhs is "assignable"...	WITHOUT_CLASSIFICATION	0.9999692202982016	WITHOUT_CLASSIFICATION	3.077970179843102E-5	DESIGN
// false indicates to not generate parens around the assignment	WITHOUT_CLASSIFICATION	0.9999639636220053	WITHOUT_CLASSIFICATION	3.60363779945588E-5	DESIGN
// Register the FromElement with the FROM clause, now that we have the names and aliases.	WITHOUT_CLASSIFICATION	0.9999909217801103	WITHOUT_CLASSIFICATION	9.078219889748071E-6	DESIGN
// currently allowed...	WITHOUT_CLASSIFICATION	0.9993393843130077	WITHOUT_CLASSIFICATION	6.60615686992208E-4	DESIGN
// HHH-276 : implied joins in a subselect where clause - The destination needs to be added // to the destination's from clause. // Not sure if this is will fix everything, but it works.	WITHOUT_CLASSIFICATION	0.9979608366012542	DESIGN	0.0020391633987457214	WITHOUT_CLASSIFICATION
//return classAlias == null ? className : classAlias;	WITHOUT_CLASSIFICATION	0.9999385719413223	WITHOUT_CLASSIFICATION	6.142805867762886E-5	DESIGN
// This is an explicit FROM element.	WITHOUT_CLASSIFICATION	0.9993288464927922	WITHOUT_CLASSIFICATION	6.711535072077011E-4	DESIGN
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999995861934181	WITHOUT_CLASSIFICATION	4.1380658189970125E-6	DESIGN
// Fetch can't be used with scroll() or iterate().	WITHOUT_CLASSIFICATION	0.9998836432341802	WITHOUT_CLASSIFICATION	1.1635676581988636E-4	DESIGN
// If it's not implied or it is implied and it's a many to many join where the target wasn't found.	WITHOUT_CLASSIFICATION	0.9996960547550862	WITHOUT_CLASSIFICATION	3.0394524491388986E-4	DESIGN
// Since this is an explicit FROM element, it can't be implied in the FROM clause.	WITHOUT_CLASSIFICATION	0.9998905008838838	WITHOUT_CLASSIFICATION	1.0949911611629758E-4	DESIGN
// Do nothing, eplicit from elements are *always* in the projection list.	WITHOUT_CLASSIFICATION	0.9999489591845327	WITHOUT_CLASSIFICATION	5.104081546717014E-5	DESIGN
// propertyName refers to something like collection.size...	WITHOUT_CLASSIFICATION	0.9996968859048971	WITHOUT_CLASSIFICATION	3.0311409510276523E-4	DESIGN
// property name is a sub-path of a component...	WITHOUT_CLASSIFICATION	0.9949369592973933	WITHOUT_CLASSIFICATION	0.005063040702606567	DESIGN
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999921677001546	WITHOUT_CLASSIFICATION	7.832299845363264E-6	DESIGN
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9561763588430642	WITHOUT_CLASSIFICATION	0.04382364115693587	DESIGN
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999968108688986	WITHOUT_CLASSIFICATION	3.189131101375314E-6	DESIGN
// DotNode uses null here...	WITHOUT_CLASSIFICATION	0.9999436686956681	WITHOUT_CLASSIFICATION	5.633130433196496E-5	DESIGN
// We represent a from-clause alias	WITHOUT_CLASSIFICATION	0.9999259550280223	WITHOUT_CLASSIFICATION	7.404497197763923E-5	DESIGN
// we are the LHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9998779718168618	WITHOUT_CLASSIFICATION	1.2202818313819442E-4	DESIGN
// we are the RHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9998885901528951	WITHOUT_CLASSIFICATION	1.1140984710482875E-4	DESIGN
// we represent a naked (simple) prop-ref	WITHOUT_CLASSIFICATION	0.9997745864565679	WITHOUT_CLASSIFICATION	2.2541354343199918E-4	DESIGN
// EARLY EXIT!!!  return so the resolve call explicitly coming from DotNode can // resolve this...	WITHOUT_CLASSIFICATION	0.8809009944245861	DESIGN	0.11909900557541385	WITHOUT_CLASSIFICATION
// assume this ident's text does *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9998842672791378	WITHOUT_CLASSIFICATION	1.1573272086209991E-4	DESIGN
// just ignore it for now, it'll get resolved later...	WITHOUT_CLASSIFICATION	0.998081715644393	WITHOUT_CLASSIFICATION	0.0019182843556070541	DESIGN
// This is not actually a constant, but a reference to FROM element.	WITHOUT_CLASSIFICATION	0.9702018674031865	WITHOUT_CLASSIFICATION	0.0297981325968135	DESIGN
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999983694004182	WITHOUT_CLASSIFICATION	1.6305995818137706E-6	DESIGN
// these pieces are needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9999852485080534	WITHOUT_CLASSIFICATION	1.4751491946547834E-5	DESIGN
// used to set the type of the parent dot node	WITHOUT_CLASSIFICATION	0.9999861355437446	WITHOUT_CLASSIFICATION	1.386445625537282E-5	DESIGN
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9997146069162487	WITHOUT_CLASSIFICATION	2.853930837513234E-4	DESIGN
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9997146069162487	WITHOUT_CLASSIFICATION	2.853930837513234E-4	DESIGN
// naked property-refs cannot be used with an aliased from element	WITHOUT_CLASSIFICATION	0.9994940963434779	WITHOUT_CLASSIFICATION	5.059036565221868E-4	DESIGN
// this piece is needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9998082733958343	WITHOUT_CLASSIFICATION	1.91726604165632E-4	DESIGN
// do *not* over-write the column text, as that has already been // "rendered" during resolve	WITHOUT_CLASSIFICATION	0.9999986029740959	WITHOUT_CLASSIFICATION	1.397025904097823E-6	DESIGN
// for some reason the antlr.CommonAST initialization routines force // this method to get called twice.  The first time with an empty string	WITHOUT_CLASSIFICATION	0.9975072812931431	WITHOUT_CLASSIFICATION	0.0024927187068569216	DESIGN
// Look up class name using the first identifier in the path.	WITHOUT_CLASSIFICATION	0.9999978475770396	WITHOUT_CLASSIFICATION	2.15242296033463E-6	DESIGN
// Add to the query spaces.	WITHOUT_CLASSIFICATION	0.9998296416819266	WITHOUT_CLASSIFICATION	1.7035831807343183E-4	DESIGN
// If the from element isn't in the same clause, create a new from element.	WITHOUT_CLASSIFICATION	0.9999822839968974	WITHOUT_CLASSIFICATION	1.7716003102621232E-5	DESIGN
// This is the root level node. // Generate an explicit from clause at the root.	WITHOUT_CLASSIFICATION	0.9761028639674153	WITHOUT_CLASSIFICATION	0.02389713603258478	DESIGN
// Correlated subqueries create 'special' implied from nodes // because correlated subselects can't use an ANSI-style join	WITHOUT_CLASSIFICATION	0.9999832963201123	WITHOUT_CLASSIFICATION	1.67036798877513E-5	DESIGN
// super-duper-classic-parser-regression-testing-mojo-magic...	WITHOUT_CLASSIFICATION	0.9998474502335394	WITHOUT_CLASSIFICATION	1.5254976646066965E-4	DESIGN
// A collection of entities...	WITHOUT_CLASSIFICATION	0.9999389314412249	WITHOUT_CLASSIFICATION	6.106855877501047E-5	DESIGN
// A collection of components...	WITHOUT_CLASSIFICATION	0.9999680459431993	WITHOUT_CLASSIFICATION	3.195405680058281E-5	DESIGN
// A collection of scalar elements...	WITHOUT_CLASSIFICATION	0.9999784807774789	WITHOUT_CLASSIFICATION	2.151922252102838E-5	DESIGN
// according to both the ANSI-SQL and EJB3 specs, trim can either take // exactly one parameter or a variable number of parameters between 1 and 4. // from the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If only <trim specification> is omitted, BOTH is assumed; // if <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999998184172284	WITHOUT_CLASSIFICATION	1.8158277169129433E-7	DESIGN
// Don't include sub-classes for implied collection joins or subquery joins.	WITHOUT_CLASSIFICATION	0.9999995422063882	WITHOUT_CLASSIFICATION	4.5779361172280635E-7	DESIGN
// Treat explict from elements in sub-queries properly.	WITHOUT_CLASSIFICATION	0.99524558460599	WITHOUT_CLASSIFICATION	0.0047544153940100135	DESIGN
//	WITHOUT_CLASSIFICATION	0.9997835908563089	WITHOUT_CLASSIFICATION	2.164091436910978E-4	DESIGN
// the "root from-element" in correlated subqueries do need this piece	WITHOUT_CLASSIFICATION	0.9998010437928423	WITHOUT_CLASSIFICATION	1.9895620715774918E-4	DESIGN
// Create the FROM element for the target (the elements of the collection).	WITHOUT_CLASSIFICATION	0.9999999429078507	WITHOUT_CLASSIFICATION	5.7092149342519217E-8	DESIGN
// If the join is implied, then don't include sub-classes on the element.	WITHOUT_CLASSIFICATION	0.9999990391765946	WITHOUT_CLASSIFICATION	9.608234053614754E-7	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999953214055792	WITHOUT_CLASSIFICATION	4.678594420818495E-6	DESIGN
// The associated entity is implied, but it must be included in the FROM. // The collection alias is the role.	WITHOUT_CLASSIFICATION	0.9999984535517178	WITHOUT_CLASSIFICATION	1.5464482822038895E-6	DESIGN
// Tag this node as a JOIN. // Don't include subclasses in the join. // This is a clollection join.	WITHOUT_CLASSIFICATION	0.9997032441227922	WITHOUT_CLASSIFICATION	2.967558772078331E-4	DESIGN
// Get the class name of the associated entity.	WITHOUT_CLASSIFICATION	0.9999983889275013	WITHOUT_CLASSIFICATION	1.6110724987740317E-6	DESIGN
//  origin, path, implied, columns, classAlias,	WITHOUT_CLASSIFICATION	0.9998632205818627	WITHOUT_CLASSIFICATION	1.3677941813730358E-4	DESIGN
/*implied*/	WITHOUT_CLASSIFICATION	0.9998970054050544	WITHOUT_CLASSIFICATION	1.0299459494558504E-4	DESIGN
// For implied many-to-many, just add the end join.	WITHOUT_CLASSIFICATION	0.99999751362708	WITHOUT_CLASSIFICATION	2.4863729200607446E-6	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999953214055792	WITHOUT_CLASSIFICATION	4.678594420818495E-6	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999953214055792	WITHOUT_CLASSIFICATION	4.678594420818495E-6	DESIGN
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999995466808667	WITHOUT_CLASSIFICATION	4.533191333239269E-7	DESIGN
// This causes the factory to instantiate the desired class.	WITHOUT_CLASSIFICATION	0.9984505201955567	WITHOUT_CLASSIFICATION	0.0015494798044432768	DESIGN
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9998711730328277	WITHOUT_CLASSIFICATION	1.2882696717229496E-4	DESIGN
// Frontbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9998330218187711	WITHOUT_CLASSIFICATION	1.6697818122892268E-4	DESIGN
/*	WITHOUT_CLASSIFICATION	0.9986553605278979	WITHOUT_CLASSIFICATION	0.0013446394721020986	DESIGN
/*public Type[] getSqlResultTypes() {	WITHOUT_CLASSIFICATION	0.9899360741845248	WITHOUT_CLASSIFICATION	0.010063925815475291	DESIGN
// First, collect all of the select expressions. // NOTE: This must be done *before* invoking setScalarColumnText() because setScalarColumnText() // changes the AST!!!	WITHOUT_CLASSIFICATION	0.999994911907084	WITHOUT_CLASSIFICATION	5.088092916060652E-6	DESIGN
// First allow the actual type to control the return value. (the actual underlying sqltype could actually be different)	WITHOUT_CLASSIFICATION	0.9999765972750262	WITHOUT_CLASSIFICATION	2.340272497381715E-5	DESIGN
//sqlResultTypeList.addAll( constructorArgumentTypeList );	WITHOUT_CLASSIFICATION	0.9989902980568286	WITHOUT_CLASSIFICATION	0.001009701943171484	DESIGN
// If the data type is not an association type, it could not have been in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999865703380089	WITHOUT_CLASSIFICATION	1.3429661991233127E-5	DESIGN
//sqlResultTypeList.add( type );	WITHOUT_CLASSIFICATION	0.9995663039431073	WITHOUT_CLASSIFICATION	4.336960568927766E-4	DESIGN
// Always add the type to the return type list.	WITHOUT_CLASSIFICATION	0.9999674506950521	WITHOUT_CLASSIFICATION	3.2549304947808456E-5	DESIGN
// add the fetched entities	WITHOUT_CLASSIFICATION	0.9999963673131421	WITHOUT_CLASSIFICATION	3.6326868579012715E-6	DESIGN
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9998792568540811	WITHOUT_CLASSIFICATION	1.2074314591898792E-4	DESIGN
// function support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999910147064375	WITHOUT_CLASSIFICATION	8.985293562516297E-6	DESIGN
// If there are any scalars (non-entities) selected, render the select column aliases.	WITHOUT_CLASSIFICATION	0.9999991342963309	WITHOUT_CLASSIFICATION	8.657036690124897E-7	DESIGN
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9995799363200861	WITHOUT_CLASSIFICATION	4.200636799139136E-4	DESIGN
/*ArrayList sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9999395907888791	WITHOUT_CLASSIFICATION	6.0409211120984475E-5	DESIGN
//sqlResultTypes = ( Type[] ) sqlResultTypeList.toArray( new Type[sqlResultTypeList.size()] );	WITHOUT_CLASSIFICATION	0.9998349891463779	WITHOUT_CLASSIFICATION	1.6501085362209434E-4	DESIGN
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999930023644236	WITHOUT_CLASSIFICATION	6.997635576438178E-6	DESIGN
//TODO:	WITHOUT_CLASSIFICATION	0.9240251546170141	WITHOUT_CLASSIFICATION	0.07597484538298596	DESIGN
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999858165828087	WITHOUT_CLASSIFICATION	1.4183417191210678E-5	DESIGN
// Generate an 2d array of column names, the first dimension is parallel with the // return types array.  The second dimension is the list of column names for each // type.	WITHOUT_CLASSIFICATION	0.9999998885339085	WITHOUT_CLASSIFICATION	1.1146609156324451E-7	DESIGN
// Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999999321269127	WITHOUT_CLASSIFICATION	6.787308734498139E-8	DESIGN
// union subclass support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999807401070366	WITHOUT_CLASSIFICATION	1.9259892963383165E-5	DESIGN
// Skip 'DISTINCT' and 'ALL', so we return the first expression node.	WITHOUT_CLASSIFICATION	0.9999896205889184	WITHOUT_CLASSIFICATION	1.037941108156185E-5	DESIGN
// Create SQL_TOKEN nodes for the columns.	WITHOUT_CLASSIFICATION	0.9999971077854506	WITHOUT_CLASSIFICATION	2.8922145493572507E-6	DESIGN
// Generate the property select tokens.	WITHOUT_CLASSIFICATION	0.999947617921965	WITHOUT_CLASSIFICATION	5.2382078034970325E-5	DESIGN
// Get the function name node.	WITHOUT_CLASSIFICATION	0.999973145338007	WITHOUT_CLASSIFICATION	2.6854661993035602E-5	DESIGN
// Method expressions in a SELECT should always be considered scalar.	WITHOUT_CLASSIFICATION	0.999855289958296	WITHOUT_CLASSIFICATION	1.4471004170398536E-4	DESIGN
// If this is 'elements' then create a new FROM element.	WITHOUT_CLASSIFICATION	0.9999693469410998	WITHOUT_CLASSIFICATION	3.0653058900071424E-5	DESIGN
// Not elements(x)	WITHOUT_CLASSIFICATION	0.9999933933872398	WITHOUT_CLASSIFICATION	6.606612760224521E-6	DESIGN
// Dialect function	WITHOUT_CLASSIFICATION	0.9999988736257543	WITHOUT_CLASSIFICATION	1.126374245634357E-6	DESIGN
// Collection 'property function'	WITHOUT_CLASSIFICATION	0.9999856762615446	WITHOUT_CLASSIFICATION	1.4323738455452603E-5	DESIGN
// If the constant is an IDENT, figure out what it means...	WITHOUT_CLASSIFICATION	0.9954332696026646	WITHOUT_CLASSIFICATION	0.004566730397335407	DESIGN
// IDENT is a class alias in the FROM.	WITHOUT_CLASSIFICATION	0.9997511681900267	WITHOUT_CLASSIFICATION	2.4883180997334846E-4	DESIGN
// Resolve to an identity column.	WITHOUT_CLASSIFICATION	0.9997460935395409	WITHOUT_CLASSIFICATION	2.539064604591097E-4	DESIGN
// Otherwise, it's a literal.	WITHOUT_CLASSIFICATION	0.9998287839966207	WITHOUT_CLASSIFICATION	1.7121600337926252E-4	DESIGN
// the name of an entity class	WITHOUT_CLASSIFICATION	0.9999971273209598	WITHOUT_CLASSIFICATION	2.8726790400870456E-6	DESIGN
//the class discriminator value	WITHOUT_CLASSIFICATION	0.9999184601465056	WITHOUT_CLASSIFICATION	8.153985349436619E-5	DESIGN
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999993882281586	WITHOUT_CLASSIFICATION	6.117718413462315E-7	DESIGN
// Add a space before the display text.	WITHOUT_CLASSIFICATION	0.9999279936046557	WITHOUT_CLASSIFICATION	7.200639534423055E-5	DESIGN
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999025527998672	WITHOUT_CLASSIFICATION	9.744720013274552E-5	DESIGN
// child == parent.getFirstChild()	WITHOUT_CLASSIFICATION	0.9999990667360815	WITHOUT_CLASSIFICATION	9.332639183872328E-7	DESIGN
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999025527998672	WITHOUT_CLASSIFICATION	9.744720013274552E-5	DESIGN
// Filter conditions need to be inserted before the HQL where condition and the // theta join node.  This is because org.hibernate.loader.Loader binds the filter parameters first, // then it binds all the HQL query parameters, see org.hibernate.loader.Loader.processFilterParameters().	WITHOUT_CLASSIFICATION	0.999765000560241	WITHOUT_CLASSIFICATION	2.3499943975894408E-4	DESIGN
// Put the FILTERS node before the HQL condition and theta joins	WITHOUT_CLASSIFICATION	0.9999962620052861	WITHOUT_CLASSIFICATION	3.7379947139339337E-6	DESIGN
// add the current fragment to the FILTERS node	WITHOUT_CLASSIFICATION	0.9999976818275633	WITHOUT_CLASSIFICATION	2.3181724366626348E-6	DESIGN
// Create a new THETA_JOINS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.999999839086453	WITHOUT_CLASSIFICATION	1.6091354701804422E-7	DESIGN
// Put the THETA_JOINS node before the HQL condition, after the filters.	WITHOUT_CLASSIFICATION	0.9998433014503392	WITHOUT_CLASSIFICATION	1.566985496607548E-4	DESIGN
// add the current fragment to the THETA_JOINS node	WITHOUT_CLASSIFICATION	0.9999942081276011	WITHOUT_CLASSIFICATION	5.791872398985845E-6	DESIGN
// First, try to get the persister using the given name directly.	WITHOUT_CLASSIFICATION	0.9999349552421366	WITHOUT_CLASSIFICATION	6.504475786337417E-5	DESIGN
// unable to locate it using this name	WITHOUT_CLASSIFICATION	0.9998977598822908	WITHOUT_CLASSIFICATION	1.0224011770925098E-4	DESIGN
// If that didn't work, try using the 'import' name.	WITHOUT_CLASSIFICATION	0.9999520056233594	WITHOUT_CLASSIFICATION	4.799437664062645E-5	DESIGN
// Implicit joins use theta style (WHERE pk = fk), explicit joins use JOIN (after from)	WITHOUT_CLASSIFICATION	0.9999871561132675	WITHOUT_CLASSIFICATION	1.284388673245017E-5	DESIGN
// locate the registered function by the given name	WITHOUT_CLASSIFICATION	0.9999986867460842	WITHOUT_CLASSIFICATION	1.3132539158773076E-6	DESIGN
// determine the type of the first argument...	WITHOUT_CLASSIFICATION	0.9999674236704488	WITHOUT_CLASSIFICATION	3.2576329551167396E-5	DESIGN
// Use the DOT node to emit the first column name. // Create the column names, folled by the column aliases.	WITHOUT_CLASSIFICATION	0.9999916446582079	WITHOUT_CLASSIFICATION	8.355341792231806E-6	DESIGN
// Note: this simply constructs a "raw" SQL_TOKEN representing the // where fragment and injects this into the tree.  This "works"; // however it is probably not the best long-term solution. // // At some point we probably want to apply an additional grammar to // properly tokenize this where fragment into constituent parts // focused on the operators embedded within the fragment.	WITHOUT_CLASSIFICATION	0.9962076218818303	WITHOUT_CLASSIFICATION	0.0037923781181696493	DESIGN
// Append the text of the current node.	WITHOUT_CLASSIFICATION	0.999999408340875	WITHOUT_CLASSIFICATION	5.916591250817491E-7	DESIGN
// If the node has a first child, recurse into the first child.	WITHOUT_CLASSIFICATION	0.9999985723154932	WITHOUT_CLASSIFICATION	1.4276845068266176E-6	DESIGN
// If there is a second child (RHS), recurse into that child.	WITHOUT_CLASSIFICATION	0.9999738786052024	WITHOUT_CLASSIFICATION	2.6121394797613254E-5	DESIGN
// Iterate through the alias,JoinSequence pairs and generate SQL token nodes.	WITHOUT_CLASSIFICATION	0.9999999676103096	WITHOUT_CLASSIFICATION	3.238969039578273E-8	DESIGN
// If the from element represents a JOIN_FRAGMENT and it is // a theta-style join, convert its type from JOIN_FRAGMENT // to FROM_FRAGMENT	WITHOUT_CLASSIFICATION	0.9997965747710664	WITHOUT_CLASSIFICATION	2.0342522893363585E-4	DESIGN
// this is used during SqlGenerator processing	WITHOUT_CLASSIFICATION	0.9974510107752759	WITHOUT_CLASSIFICATION	0.002548989224724109	DESIGN
// If there is a FROM fragment and the FROM element is an explicit, then add the from part.	WITHOUT_CLASSIFICATION	0.999998583607811	WITHOUT_CLASSIFICATION	1.416392188979649E-6	DESIGN
/*&& StringHelper.isNotEmpty( frag )*/	WITHOUT_CLASSIFICATION	0.999912898664006	WITHOUT_CLASSIFICATION	8.710133599400038E-5	DESIGN
// The FROM fragment will probably begin with ', '.  Remove this if it is present.	WITHOUT_CLASSIFICATION	0.9110461719571387	WITHOUT_CLASSIFICATION	0.08895382804286137	DESIGN
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9889502494476521	WITHOUT_CLASSIFICATION	0.01104975055234794	DESIGN
// SELECT p FROM p IN CLASS eg.Person ORDER BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999842348728611	WITHOUT_CLASSIFICATION	1.5765127138844502E-5	DESIGN
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.9879308697415536	WITHOUT_CLASSIFICATION	0.012069130258446333	DESIGN
//named query parameter	WITHOUT_CLASSIFICATION	0.9999486567277084	WITHOUT_CLASSIFICATION	5.134327229168319E-5	DESIGN
//default mode	WITHOUT_CLASSIFICATION	0.9999889967778703	WITHOUT_CLASSIFICATION	1.1003222129790667E-5	DESIGN
//QueryJoinFragment join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999882206398867	WITHOUT_CLASSIFICATION	1.177936011339685E-5	DESIGN
//reset the dotcount (but not the path) //after reset!	WITHOUT_CLASSIFICATION	0.9996340925181868	WITHOUT_CLASSIFICATION	3.6590748181317465E-4	DESIGN
//after reset!	WITHOUT_CLASSIFICATION	0.9999973371804524	WITHOUT_CLASSIFICATION	2.6628195475756106E-6	DESIGN
// we don't need to worry about any condition in the ON clause // here (toFromFragmentString), since anything in the ON condition // is already applied to the whole query	WITHOUT_CLASSIFICATION	0.9999833703698467	WITHOUT_CLASSIFICATION	1.6629630153171556E-5	DESIGN
// bit_length feels a bit broken to me. We have to cast to char in order to // pass when a numeric value is supplied. But of course the answers given will // be wildly different for these two datatypes. 1234.5678 will be 9 bytes as // a char string but will be 8 or 16 bytes as a true numeric. // Jay Nance 2006-09-22	WITHOUT_CLASSIFICATION	0.9999999413675388	WITHOUT_CLASSIFICATION	5.863246106408856E-8	DESIGN
// dotcount>=2	WITHOUT_CLASSIFICATION	0.999864616988854	WITHOUT_CLASSIFICATION	1.3538301114594987E-4	DESIGN
// Do the corresponding RHS	WITHOUT_CLASSIFICATION	0.9998966947990143	WITHOUT_CLASSIFICATION	1.0330520098567855E-4	DESIGN
//if its "id"	WITHOUT_CLASSIFICATION	0.9999844002020495	WITHOUT_CLASSIFICATION	1.5599797950521506E-5	DESIGN
//or its the id property name	WITHOUT_CLASSIFICATION	0.9985909957470013	WITHOUT_CLASSIFICATION	0.0014090042529987636	DESIGN
//join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999883871730212	WITHOUT_CLASSIFICATION	1.1612826978891958E-5	DESIGN
//important!!	WITHOUT_CLASSIFICATION	0.9999742640427947	WITHOUT_CLASSIFICATION	2.573595720527556E-5	DESIGN
//String[] keyCols = collPersister.getKeyColumnNames();	WITHOUT_CLASSIFICATION	0.9999940319899705	WITHOUT_CLASSIFICATION	5.968010029463532E-6	DESIGN
// an association	WITHOUT_CLASSIFICATION	0.999999329290212	WITHOUT_CLASSIFICATION	6.707097879617201E-7	DESIGN
//allow index() function:	WITHOUT_CLASSIFICATION	0.9998584822095281	WITHOUT_CLASSIFICATION	1.4151779047187006E-4	DESIGN
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.995549585425134	WITHOUT_CLASSIFICATION	0.004450414574865921	DESIGN
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.9879308697415536	WITHOUT_CLASSIFICATION	0.012069130258446333	DESIGN
//many-to-many	WITHOUT_CLASSIFICATION	0.9999478255557458	WITHOUT_CLASSIFICATION	5.217444425412275E-5	DESIGN
// collections of values	WITHOUT_CLASSIFICATION	0.9999992460120203	WITHOUT_CLASSIFICATION	7.539879797334562E-7	DESIGN
//opening paren in new Foo ( ... )	WITHOUT_CLASSIFICATION	0.9999205024628316	WITHOUT_CLASSIFICATION	7.94975371684017E-5	DESIGN
//if we are inside a new Result(), but not inside a nested function	WITHOUT_CLASSIFICATION	0.9997068308841172	WITHOUT_CLASSIFICATION	2.931691158827646E-4	DESIGN
//special case	WITHOUT_CLASSIFICATION	0.9999699815062283	WITHOUT_CLASSIFICATION	3.0018493771793167E-5	DESIGN
// the name of an SQL function	WITHOUT_CLASSIFICATION	0.9999993592289823	WITHOUT_CLASSIFICATION	6.407710177440444E-7	DESIGN
//null child could occur for no from clause in a filter	WITHOUT_CLASSIFICATION	0.9997378524141998	WITHOUT_CLASSIFICATION	2.6214758580025114E-4	DESIGN
//this is basically a copy/paste of OrderByParser ... might be worth refactoring	WITHOUT_CLASSIFICATION	0.7001014506814766	WITHOUT_CLASSIFICATION	0.29989854931852344	DESIGN
// SELECT p FROM p IN CLASS eg.Person GROUP BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999869343438905	WITHOUT_CLASSIFICATION	1.3065656109396933E-5	DESIGN
// return aliases not supported in classic translator!	WITHOUT_CLASSIFICATION	0.9999910533615217	WITHOUT_CLASSIFICATION	8.946638478290693E-6	DESIGN
//register collection role	WITHOUT_CLASSIFICATION	0.9999789976217308	WITHOUT_CLASSIFICATION	2.1002378269255342E-5	DESIGN
// The keyword used to specify an identity column, if identity column key generation is supported.	WITHOUT_CLASSIFICATION	0.9999895366708953	WITHOUT_CLASSIFICATION	1.046332910466919E-5	DESIGN
//.getElementPropertyMapping();	WITHOUT_CLASSIFICATION	0.9998326408440625	WITHOUT_CLASSIFICATION	1.6735915593747843E-4	DESIGN
//crossJoins.add(name);	WITHOUT_CLASSIFICATION	0.9998488613114469	WITHOUT_CLASSIFICATION	1.5113868855311924E-4	DESIGN
//ie no select clause in HQL	WITHOUT_CLASSIFICATION	0.9998650607034363	WITHOUT_CLASSIFICATION	1.349392965637632E-4	DESIGN
// initialize the Set of queried identifier spaces (ie. tables)	WITHOUT_CLASSIFICATION	0.9999971941597828	WITHOUT_CLASSIFICATION	2.8058402170917595E-6	DESIGN
//ie. no select clause	WITHOUT_CLASSIFICATION	0.9999651670975962	WITHOUT_CLASSIFICATION	3.483290240379177E-5	DESIGN
//there _was_ a select clause	WITHOUT_CLASSIFICATION	0.9998767130928873	WITHOUT_CLASSIFICATION	1.2328690711263884E-4	DESIGN
// return the concrete type, or the underlying type if a concrete type // was not specified	WITHOUT_CLASSIFICATION	0.9999986975380196	WITHOUT_CLASSIFICATION	1.3024619803575165E-6	DESIGN
//many-to-many	WITHOUT_CLASSIFICATION	0.9999478255557458	WITHOUT_CLASSIFICATION	5.217444425412275E-5	DESIGN
//q.addCollection(collectionName, collectionRole);	WITHOUT_CLASSIFICATION	0.9999938835096762	WITHOUT_CLASSIFICATION	6.116490323681977E-6	DESIGN
// classic parser does not support bulk manipulation statements	WITHOUT_CLASSIFICATION	0.9999986408845921	WITHOUT_CLASSIFICATION	1.359115407797338E-6	DESIGN
// can't cache this stuff either (per-invocation)	WITHOUT_CLASSIFICATION	0.9998054368848592	WITHOUT_CLASSIFICATION	1.9456311514072578E-4	DESIGN
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9990773413157843	WITHOUT_CLASSIFICATION	9.226586842157121E-4	DESIGN
// This is the legacy behaviour for HQL queries...	WITHOUT_CLASSIFICATION	0.9417849301708567	WITHOUT_CLASSIFICATION	0.05821506982914332	DESIGN
// not known!	WITHOUT_CLASSIFICATION	0.999660099450671	WITHOUT_CLASSIFICATION	3.3990054932896314E-4	DESIGN
// not known!	WITHOUT_CLASSIFICATION	0.999660099450671	WITHOUT_CLASSIFICATION	3.3990054932896314E-4	DESIGN
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9956059499958568	WITHOUT_CLASSIFICATION	0.004394050004143182	DESIGN
// not known!	WITHOUT_CLASSIFICATION	0.999660099450671	WITHOUT_CLASSIFICATION	3.3990054932896314E-4	DESIGN
// not known!	WITHOUT_CLASSIFICATION	0.999660099450671	WITHOUT_CLASSIFICATION	3.3990054932896314E-4	DESIGN
//Need this, since join condition can appear inside parens!	WITHOUT_CLASSIFICATION	0.9997274523409211	WITHOUT_CLASSIFICATION	2.7254765907891687E-4	DESIGN
//tokens that close a sub expression //tokens that open a sub expression //tokens that would indicate a sub expression is a boolean expression	WITHOUT_CLASSIFICATION	0.9995392110744591	WITHOUT_CLASSIFICATION	4.6078892554096587E-4	DESIGN
//expressionTerminators.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.9999405691647436	WITHOUT_CLASSIFICATION	5.943083525648985E-5	DESIGN
//expressionOpeners.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.9999808997856126	WITHOUT_CLASSIFICATION	1.910021438741204E-5	DESIGN
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource) // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.7715409830212153	WITHOUT_CLASSIFICATION	0.2284590169787848	DESIGN
// otherwise, a trim-specification and/or a trim-character // have been specified;  we need to decide which options // are present and "do the right thing" // should leading trim-characters be trimmed? // should trailing trim-characters be trimmed? // the trim-character (what is to be trimmed off?) // the trim-source (from where should it be trimmed?)	WITHOUT_CLASSIFICATION	0.9790118067756118	WITHOUT_CLASSIFICATION	0.020988193224388184	DESIGN
//Inside a BETWEEN ... AND ... expression	WITHOUT_CLASSIFICATION	0.9999827078179574	WITHOUT_CLASSIFICATION	1.7292182042690126E-5	DESIGN
//were an odd or even number of NOTs encountered //the join string built up by compound paths inside this expression //a flag indicating if the subexpression is known to be boolean	WITHOUT_CLASSIFICATION	0.9999569168758078	WITHOUT_CLASSIFICATION	4.308312419225423E-5	DESIGN
//ie. a many-to-many	WITHOUT_CLASSIFICATION	0.9999870594355685	WITHOUT_CLASSIFICATION	1.294056443148647E-5	DESIGN
//Cope with [,]	WITHOUT_CLASSIFICATION	0.9998984853407041	WITHOUT_CLASSIFICATION	1.0151465929580675E-4	DESIGN
//Cope with a continued path expression (ie. ].baz)	WITHOUT_CLASSIFICATION	0.9998984957046976	WITHOUT_CLASSIFICATION	1.0150429530243617E-4	DESIGN
//NOTE: early return	WITHOUT_CLASSIFICATION	0.9998935135241289	WITHOUT_CLASSIFICATION	1.0648647587098048E-4	DESIGN
//Cope with a subselect	WITHOUT_CLASSIFICATION	0.9990106685514959	WITHOUT_CLASSIFICATION	9.893314485041004E-4	DESIGN
//Cope with special cases of AND, NOT, ()	WITHOUT_CLASSIFICATION	0.9999740807035595	WITHOUT_CLASSIFICATION	2.5919296440507524E-5	DESIGN
//Close extra brackets we opened	WITHOUT_CLASSIFICATION	0.9990077928515425	WITHOUT_CLASSIFICATION	9.922071484575478E-4	DESIGN
//take note when this is a boolean expression	WITHOUT_CLASSIFICATION	0.9997916466116673	WITHOUT_CLASSIFICATION	2.0835338833281446E-4	DESIGN
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.999999672314493	WITHOUT_CLASSIFICATION	3.2768550695169456E-7	DESIGN
//process a token, mapping OO path expressions to SQL expressions	WITHOUT_CLASSIFICATION	0.9999998054900585	WITHOUT_CLASSIFICATION	1.9450994149064602E-7	DESIGN
//Open any extra brackets we might need.	WITHOUT_CLASSIFICATION	0.9986919231299582	WITHOUT_CLASSIFICATION	0.001308076870041738	DESIGN
//Cope with special cases of AND, NOT, )	WITHOUT_CLASSIFICATION	0.9999769970597265	WITHOUT_CLASSIFICATION	2.3002940273474368E-5	DESIGN
// the next one up must also be	WITHOUT_CLASSIFICATION	0.9999978640213045	WITHOUT_CLASSIFICATION	2.1359786955127703E-6	DESIGN
// Add any joins	WITHOUT_CLASSIFICATION	0.999991610218606	WITHOUT_CLASSIFICATION	8.389781393974001E-6	DESIGN
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.999999672314493	WITHOUT_CLASSIFICATION	3.2768550695169456E-7	DESIGN
//named query parameter	WITHOUT_CLASSIFICATION	0.9999486567277084	WITHOUT_CLASSIFICATION	5.134327229168319E-5	DESIGN
//path expression	WITHOUT_CLASSIFICATION	0.9999992405781103	WITHOUT_CLASSIFICATION	7.594218896012596E-7	DESIGN
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999512657085807	WITHOUT_CLASSIFICATION	4.8734291419348916E-5	DESIGN
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9998279212839035	WITHOUT_CLASSIFICATION	1.7207871609638967E-4	DESIGN
//anything else	WITHOUT_CLASSIFICATION	0.9999901644188915	WITHOUT_CLASSIFICATION	9.83558110853544E-6	DESIGN
// the path expression continues after a ]	WITHOUT_CLASSIFICATION	0.9999999269315035	WITHOUT_CLASSIFICATION	7.306849654736172E-8	DESIGN
// careful with this!	WITHOUT_CLASSIFICATION	0.999540779344403	WITHOUT_CLASSIFICATION	4.5922065559705026E-4	DESIGN
// the path expression ends at the ]	WITHOUT_CLASSIFICATION	0.9999998191255163	WITHOUT_CLASSIFICATION	1.8087448378026869E-7	DESIGN
// "finish off" the join	WITHOUT_CLASSIFICATION	0.999966600466223	WITHOUT_CLASSIFICATION	3.339953377698389E-5	DESIGN
//NOTICE: no " or . since they are part of (compound) identifiers	WITHOUT_CLASSIFICATION	0.9999955307657665	WITHOUT_CLASSIFICATION	4.469234233520252E-6	DESIGN
//cannot instantiate	WITHOUT_CLASSIFICATION	0.9999556524430773	WITHOUT_CLASSIFICATION	4.4347556922758785E-5	DESIGN
// start by looking for HQL keywords...	WITHOUT_CLASSIFICATION	0.9998436123270305	WITHOUT_CLASSIFICATION	1.5638767296943153E-4	DESIGN
// inner joins can be abbreviated to 'join'	WITHOUT_CLASSIFICATION	0.9999937002135277	WITHOUT_CLASSIFICATION	6.299786472262053E-6	DESIGN
// 'outer' is optional and is ignored	WITHOUT_CLASSIFICATION	0.9999978133254175	WITHOUT_CLASSIFICATION	2.186674582549999E-6	DESIGN
// now anything that is not a HQL keyword	WITHOUT_CLASSIFICATION	0.9996942407044365	WITHOUT_CLASSIFICATION	3.057592955634381E-4	DESIGN
// process the "old" HQL style where aliases appear _first_ // ie. using the IN or IN CLASS constructions	WITHOUT_CLASSIFICATION	0.9999931896634685	WITHOUT_CLASSIFICATION	6.810336531384228E-6	DESIGN
// treat it as a classname	WITHOUT_CLASSIFICATION	0.999946818428089	WITHOUT_CLASSIFICATION	5.318157191099931E-5	DESIGN
// treat it as a path expression	WITHOUT_CLASSIFICATION	0.9999998798255691	WITHOUT_CLASSIFICATION	1.201744309116366E-7	DESIGN
// starts with the name of a mapped class (new style)	WITHOUT_CLASSIFICATION	0.9999982231539863	WITHOUT_CLASSIFICATION	1.7768460136427907E-6	DESIGN
// starts with a path expression (new style)	WITHOUT_CLASSIFICATION	0.9999998962151734	WITHOUT_CLASSIFICATION	1.0378482670117952E-7	DESIGN
//allow ODMG OQL style: from Person p, p.cars c	WITHOUT_CLASSIFICATION	0.9989990417752407	WITHOUT_CLASSIFICATION	0.0010009582247593504	DESIGN
//handle quoted strings	WITHOUT_CLASSIFICATION	0.9999306062666645	WITHOUT_CLASSIFICATION	6.939373333546392E-5	DESIGN
// Object insertions, updates, and deletions have list semantics because // they must happen in the right order so as to respect referential // integrity	WITHOUT_CLASSIFICATION	0.9999999966168684	WITHOUT_CLASSIFICATION	3.3831315549083187E-9	DESIGN
// "finish off" the join	WITHOUT_CLASSIFICATION	0.999966600466223	WITHOUT_CLASSIFICATION	3.339953377698389E-5	DESIGN
//ignore whitespace	WITHOUT_CLASSIFICATION	0.9999445749634264	WITHOUT_CLASSIFICATION	5.542503657363203E-5	DESIGN
//do replacements	WITHOUT_CLASSIFICATION	0.9999906147756167	WITHOUT_CLASSIFICATION	9.385224383386038E-6	DESIGN
//handle HQL2 collection syntax	WITHOUT_CLASSIFICATION	0.999910562831732	WITHOUT_CLASSIFICATION	8.943716826805337E-5	DESIGN
// uuid.hex is deprecated	WITHOUT_CLASSIFICATION	0.9881808329636583	WITHOUT_CLASSIFICATION	0.011819167036341798	DESIGN
// AbstractSelectingDelegate impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999981036679708	WITHOUT_CLASSIFICATION	1.896332029128564E-6	DESIGN
//hilo params	WITHOUT_CLASSIFICATION	0.9999911123235476	WITHOUT_CLASSIFICATION	8.88767645240254E-6	DESIGN
//sql = query;	WITHOUT_CLASSIFICATION	0.9998960901827004	WITHOUT_CLASSIFICATION	1.0390981729960039E-4	DESIGN
// performance opt	WITHOUT_CLASSIFICATION	0.9999986755543369	WITHOUT_CLASSIFICATION	1.324445663137079E-6	DESIGN
//sql = update;	WITHOUT_CLASSIFICATION	0.9999264854638494	WITHOUT_CLASSIFICATION	7.351453615062368E-5	DESIGN
//hilo config	WITHOUT_CLASSIFICATION	0.9999048304415323	WITHOUT_CLASSIFICATION	9.516955846760882E-5	DESIGN
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999722323439849	WITHOUT_CLASSIFICATION	2.7767656015055145E-5	DESIGN
// don't allow comments on these insert statements as comments totally // blow up the Oracle getGeneratedKeys "support" :(	WITHOUT_CLASSIFICATION	0.9999998102422084	WITHOUT_CLASSIFICATION	1.897577916330762E-7	DESIGN
//abort the save (the object is already saved by a circular cascade)	WITHOUT_CLASSIFICATION	0.9998595123822293	WITHOUT_CLASSIFICATION	1.4048761777070323E-4	DESIGN
//throw new IdentifierGenerationException("save associated object first, or disable cascade for inverse association");	WITHOUT_CLASSIFICATION	0.9999998878210482	WITHOUT_CLASSIFICATION	1.1217895180184621E-7	DESIGN
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999911866733564	WITHOUT_CLASSIFICATION	8.813326643567616E-6	DESIGN
//do nothing to avoid a lazy property initialization	WITHOUT_CLASSIFICATION	0.9934566545213943	WITHOUT_CLASSIFICATION	0.006543345478605742	DESIGN
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.999929216165994	WITHOUT_CLASSIFICATION	7.078383400609874E-5	DESIGN
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999722323439849	WITHOUT_CLASSIFICATION	2.7767656015055145E-5	DESIGN
// do nothing until we hit the rsult set containing the generated id	WITHOUT_CLASSIFICATION	0.9971323840733066	WITHOUT_CLASSIFICATION	0.0028676159266933935	DESIGN
/* COLUMN and TABLE should be renamed but it would break the public API */	WITHOUT_CLASSIFICATION	0.6489286437606717	DESIGN	0.35107135623932817	WITHOUT_CLASSIFICATION
// Loaded entity instances, by EntityKey	WITHOUT_CLASSIFICATION	0.9999849996865618	WITHOUT_CLASSIFICATION	1.5000313438114902E-5	DESIGN
// if the given name is un-qualified we may neen to qualify it	WITHOUT_CLASSIFICATION	0.9999726566848012	WITHOUT_CLASSIFICATION	2.7343315198819657E-5	DESIGN
// the default...	WITHOUT_CLASSIFICATION	0.9999762682738484	WITHOUT_CLASSIFICATION	2.3731726151645047E-5	DESIGN
// unfortunately not really safe to normalize this // to 1 as an initial value like we do the others // because we would not be able to control this if // we are using a sequence...	WITHOUT_CLASSIFICATION	0.9098590676924369	WITHOUT_CLASSIFICATION	0.0901409323075631	DESIGN
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999911866733564	WITHOUT_CLASSIFICATION	8.813326643567616E-6	DESIGN
// Identity map of CollectionEntry instances, by the collection wrapper	WITHOUT_CLASSIFICATION	0.9999998163328009	WITHOUT_CLASSIFICATION	1.8366719905648948E-7	DESIGN
// general purpose parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992081437995	WITHOUT_CLASSIFICATION	7.91856200576488E-7	DESIGN
// table-specific parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999514909867	WITHOUT_CLASSIFICATION	4.850901315056142E-8	DESIGN
// Configurable implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999990979668771	WITHOUT_CLASSIFICATION	9.020331230089694E-7	DESIGN
// IdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993412119293	WITHOUT_CLASSIFICATION	6.587880706551916E-7	DESIGN
// PersistentIdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999984914860223	WITHOUT_CLASSIFICATION	1.5085139776999072E-6	DESIGN
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999975017587921	WITHOUT_CLASSIFICATION	2.498241207884997E-6	DESIGN
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999975017587921	WITHOUT_CLASSIFICATION	2.498241207884997E-6	DESIGN
//fetch the generated id in a separate query	WITHOUT_CLASSIFICATION	0.9999805918591108	WITHOUT_CLASSIFICATION	1.940814088924073E-5	DESIGN
// we just hit the last position	WITHOUT_CLASSIFICATION	0.9999746912772954	WITHOUT_CLASSIFICATION	2.530872270462305E-5	DESIGN
// scroll ahead	WITHOUT_CLASSIFICATION	0.9999683072140743	WITHOUT_CLASSIFICATION	3.169278592577889E-5	DESIGN
// scroll backward	WITHOUT_CLASSIFICATION	0.9999703056997292	WITHOUT_CLASSIFICATION	2.9694300270772633E-5	DESIGN
// we have not yet hit the last result...	WITHOUT_CLASSIFICATION	0.9964710129137508	WITHOUT_CLASSIFICATION	0.003528987086249205	DESIGN
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999657469014523	WITHOUT_CLASSIFICATION	3.4253098547606055E-5	DESIGN
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999882635062158	WITHOUT_CLASSIFICATION	1.1736493784162063E-5	DESIGN
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999923392631332	WITHOUT_CLASSIFICATION	7.660736866696095E-6	DESIGN
// do this when all the properties are updateable since there is // a certain likelihood that the information will already be // snapshot-cached.	WITHOUT_CLASSIFICATION	0.9999961038485873	WITHOUT_CLASSIFICATION	3.896151412779456E-6	DESIGN
// Inner classes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999909711120281	WITHOUT_CLASSIFICATION	9.02888797193436E-6	DESIGN
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999657469014523	WITHOUT_CLASSIFICATION	3.4253098547606055E-5	DESIGN
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999882635062158	WITHOUT_CLASSIFICATION	1.1736493784162063E-5	DESIGN
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999923392631332	WITHOUT_CLASSIFICATION	7.660736866696095E-6	DESIGN
// Caches	WITHOUT_CLASSIFICATION	0.9999941546515285	WITHOUT_CLASSIFICATION	5.845348471456477E-6	DESIGN
//Generators:	WITHOUT_CLASSIFICATION	0.9998716300420527	WITHOUT_CLASSIFICATION	1.283699579471756E-4	DESIGN
// cache region is defined by the root-class in the hierarchy...	WITHOUT_CLASSIFICATION	0.9972015387271268	WITHOUT_CLASSIFICATION	0.002798461272873142	DESIGN
//check if the detached object being merged is the parent	WITHOUT_CLASSIFICATION	0.9999961063439882	WITHOUT_CLASSIFICATION	3.893656011863924E-6	DESIGN
// after *all* persisters and named queries are registered	WITHOUT_CLASSIFICATION	0.9999994426342803	WITHOUT_CLASSIFICATION	5.573657196792549E-7	DESIGN
// if we get here, it is possible that we have a proxy 'in the way' of the merge map resolution... // 	WITHOUT_CLASSIFICATION	0.9999826595007685	WITHOUT_CLASSIFICATION	1.7340499231493246E-5	DESIGN
//JNDI + Serialization:	WITHOUT_CLASSIFICATION	0.9999178301084857	WITHOUT_CLASSIFICATION	8.216989151431982E-5	DESIGN
//checking for named queries	WITHOUT_CLASSIFICATION	0.9998875635139589	WITHOUT_CLASSIFICATION	1.1243648604108273E-4	DESIGN
//stats	WITHOUT_CLASSIFICATION	0.9997335092361509	WITHOUT_CLASSIFICATION	2.6649076384910526E-4	DESIGN
// EntityNotFoundDelegate	WITHOUT_CLASSIFICATION	0.9997717862443387	WITHOUT_CLASSIFICATION	2.2821375566134316E-4	DESIGN
// Check named HQL queries	WITHOUT_CLASSIFICATION	0.9999475375627914	WITHOUT_CLASSIFICATION	5.246243720862449E-5	DESIGN
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9794249979962925	WITHOUT_CLASSIFICATION	0.020575002003707567	DESIGN
//prevents this session from adding things to cache	WITHOUT_CLASSIFICATION	0.999783900810994	WITHOUT_CLASSIFICATION	2.1609918900609613E-4	DESIGN
// from javax.naming.Referenceable	WITHOUT_CLASSIFICATION	0.9999777752186552	WITHOUT_CLASSIFICATION	2.2224781344882454E-5	DESIGN
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999860174297753	WITHOUT_CLASSIFICATION	1.3982570224756627E-5	DESIGN
//for a dynamic-class	WITHOUT_CLASSIFICATION	0.9995847083987511	WITHOUT_CLASSIFICATION	4.1529160124881834E-4	DESIGN
//test this entity to see if we must query it	WITHOUT_CLASSIFICATION	0.9992759313410359	WITHOUT_CLASSIFICATION	7.240686589640888E-4	DESIGN
//NOTE EARLY EXIT	WITHOUT_CLASSIFICATION	0.9997204938435305	WITHOUT_CLASSIFICATION	2.795061564696138E-4	DESIGN
// for backward-compatability	WITHOUT_CLASSIFICATION	0.9999242004138041	WITHOUT_CLASSIFICATION	7.579958619583052E-5	DESIGN
// ignore this error for now	WITHOUT_CLASSIFICATION	0.999588756869253	WITHOUT_CLASSIFICATION	4.112431307470225E-4	DESIGN
//to stop the class from being unloaded	WITHOUT_CLASSIFICATION	0.9990239501747206	WITHOUT_CLASSIFICATION	9.760498252793418E-4	DESIGN
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9993777147152333	WITHOUT_CLASSIFICATION	6.222852847667076E-4	DESIGN
//must add to JNDI _after_ adding to HashMaps, because some JNDI servers use serialization	WITHOUT_CLASSIFICATION	0.9999400351651249	WITHOUT_CLASSIFICATION	5.9964834875023366E-5	DESIGN
// Make sure this is a defined parameter and check the incoming value type	WITHOUT_CLASSIFICATION	0.9999783235472419	WITHOUT_CLASSIFICATION	2.167645275808331E-5	DESIGN
// for each of the defined parameters, make sure its value // has been set	WITHOUT_CLASSIFICATION	0.9999998652206243	WITHOUT_CLASSIFICATION	1.3477937564511496E-7	DESIGN
//we never need to apply locks to the SQL	WITHOUT_CLASSIFICATION	0.9999583805581471	WITHOUT_CLASSIFICATION	4.1619441852823395E-5	DESIGN
// inserts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999918993534508	WITHOUT_CLASSIFICATION	8.10064654924051E-6	DESIGN
// deletes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999714967545387	WITHOUT_CLASSIFICATION	2.8503245461365428E-5	DESIGN
// during deserialization, we need to reconnect all proxies and // collections to this session, as well as the EntityEntry and // CollectionEntry instances; these associations are transient // because serialization is used for different things.	WITHOUT_CLASSIFICATION	0.9999988314018866	WITHOUT_CLASSIFICATION	1.1685981134342312E-6	DESIGN
// updates ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999985157854148	WITHOUT_CLASSIFICATION	1.4842145851957371E-5	DESIGN
// loading ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997822367201838	WITHOUT_CLASSIFICATION	2.1776327981618652E-4	DESIGN
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999988156554708	WITHOUT_CLASSIFICATION	1.1843445292193164E-6	DESIGN
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999988156554708	WITHOUT_CLASSIFICATION	1.1843445292193164E-6	DESIGN
// first, try to load it from the temp PC associated to this SS	WITHOUT_CLASSIFICATION	0.9999838793058117	WITHOUT_CLASSIFICATION	1.612069418837456E-5	DESIGN
// if the metadata allowed proxy creation and caller did not request forceful eager loading, // generate a proxy	WITHOUT_CLASSIFICATION	0.9998749685688035	WITHOUT_CLASSIFICATION	1.2503143119652865E-4	DESIGN
// otherwise immediately materialize it	WITHOUT_CLASSIFICATION	0.9998983819291407	WITHOUT_CLASSIFICATION	1.0161807085927558E-4	DESIGN
/////////////////////////////////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9998439500587284	WITHOUT_CLASSIFICATION	1.5604994127160722E-4	DESIGN
// no auto-flushing to support in stateless session	WITHOUT_CLASSIFICATION	0.9999994071299397	WITHOUT_CLASSIFICATION	5.92870060368939E-7	DESIGN
//after setting values to object, entityMode	WITHOUT_CLASSIFICATION	0.9999965199022852	WITHOUT_CLASSIFICATION	3.48009771473848E-6	DESIGN
//for EJB3	WITHOUT_CLASSIFICATION	0.9999205029068611	WITHOUT_CLASSIFICATION	7.949709313886174E-5	DESIGN
// just ignore	WITHOUT_CLASSIFICATION	0.9999940906796575	WITHOUT_CLASSIFICATION	5.909320342585227E-6	DESIGN
// do a check	WITHOUT_CLASSIFICATION	0.9999257747697758	WITHOUT_CLASSIFICATION	7.422523022419198E-5	DESIGN
// saveOrUpdate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999583264249868	WITHOUT_CLASSIFICATION	4.167357501329639E-5	DESIGN
// update() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999551671891185	WITHOUT_CLASSIFICATION	4.4832810881492066E-5	DESIGN
// lock() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999893476794531	WITHOUT_CLASSIFICATION	1.065232054684057E-5	DESIGN
// persist() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999698857314742	WITHOUT_CLASSIFICATION	3.0114268525876905E-5	DESIGN
// persistOnFlush() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999799510353596	WITHOUT_CLASSIFICATION	2.004896464032359E-5	DESIGN
// merge() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999873267197978	WITHOUT_CLASSIFICATION	1.2673280202181294E-5	DESIGN
// saveOrUpdateCopy() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999350016676976	WITHOUT_CLASSIFICATION	6.499833230243836E-5	DESIGN
// delete() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999656779809044	WITHOUT_CLASSIFICATION	3.432201909563713E-5	DESIGN
// load()/get() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999627049804818	WITHOUT_CLASSIFICATION	3.7295019518200886E-5	DESIGN
// refresh() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999906652780604	WITHOUT_CLASSIFICATION	9.334721939772035E-6	DESIGN
// replicate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999664334384394	WITHOUT_CLASSIFICATION	3.356656156067963E-5	DESIGN
// do not auto-flush while outside a transaction	WITHOUT_CLASSIFICATION	0.9999925589367435	WITHOUT_CLASSIFICATION	7.44106325644907E-6	DESIGN
// this is an internal error of some sort...	WITHOUT_CLASSIFICATION	0.9956877926168737	WITHOUT_CLASSIFICATION	0.004312207383126307	DESIGN
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.7111672647989951	WITHOUT_CLASSIFICATION	0.28883273520100483	DESIGN
//only collections belonging to deleted entities are allowed to be dereferenced in the case of orphan delete	WITHOUT_CLASSIFICATION	0.9999871028211014	WITHOUT_CLASSIFICATION	1.2897178898525671E-5	DESIGN
// if it was previously unreferenced, we need to flush in order to // get its state into the database in order to execute query	WITHOUT_CLASSIFICATION	0.9999779578129848	WITHOUT_CLASSIFICATION	2.2042187015137134E-5	DESIGN
// not for internal use:	WITHOUT_CLASSIFICATION	0.9993147337154453	WITHOUT_CLASSIFICATION	6.8526628455461E-4	DESIGN
// otherwise, we only need to flush if there are in-memory changes // to the queried tables	WITHOUT_CLASSIFICATION	0.999985286346764	WITHOUT_CLASSIFICATION	1.4713653235980058E-5	DESIGN
// might need to run a different filter entirely after the flush // because the collection role may have changed	WITHOUT_CLASSIFICATION	0.9999831496539573	WITHOUT_CLASSIFICATION	1.6850346042686957E-5	DESIGN
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.7111672647989951	WITHOUT_CLASSIFICATION	0.28883273520100483	DESIGN
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.7111672647989951	WITHOUT_CLASSIFICATION	0.28883273520100483	DESIGN
//if it is initialized, see if the underlying //instance is contained, since we need to  //account for the fact that it might have been //evicted	WITHOUT_CLASSIFICATION	0.9943177573789148	WITHOUT_CLASSIFICATION	0.00568224262108518	DESIGN
// basically just an adapted copy of find(CriteriaImpl)	WITHOUT_CLASSIFICATION	0.9999733614899609	WITHOUT_CLASSIFICATION	2.6638510039130886E-5	DESIGN
// it is possible for this method to be called during flush processing, // so make certain that we do not accidently initialize an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9982975165293394	WITHOUT_CLASSIFICATION	0.0017024834706606139	DESIGN
// nothing to do in a stateful session	WITHOUT_CLASSIFICATION	0.999916206929817	WITHOUT_CLASSIFICATION	8.379307018304998E-5	DESIGN
// ignore	WITHOUT_CLASSIFICATION	0.9999895196549758	WITHOUT_CLASSIFICATION	1.0480345024145823E-5	DESIGN
// ignore this error for now	WITHOUT_CLASSIFICATION	0.999588756869253	WITHOUT_CLASSIFICATION	4.112431307470225E-4	DESIGN
// we need to writeObject() on this since interceptor is user defined	WITHOUT_CLASSIFICATION	0.9998082788645148	WITHOUT_CLASSIFICATION	1.9172113548518086E-4	DESIGN
// the old-time stand-by...	WITHOUT_CLASSIFICATION	0.999774419413252	WITHOUT_CLASSIFICATION	2.2558058674794504E-4	DESIGN
// parameter bind values...	WITHOUT_CLASSIFICATION	0.9994338171522916	WITHOUT_CLASSIFICATION	5.661828477083043E-4	DESIGN
// Parameter handling code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999374650767903	WITHOUT_CLASSIFICATION	6.253492320966567E-5	DESIGN
// prepend value and type list with null for any positions before the wanted position.	WITHOUT_CLASSIFICATION	0.9999999203712403	WITHOUT_CLASSIFICATION	7.962875976785156E-8	DESIGN
// Execution methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999776600257332	WITHOUT_CLASSIFICATION	2.2339974266766367E-5	DESIGN
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9983975443519146	WITHOUT_CLASSIFICATION	0.001602455648085293	DESIGN
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9983975443519146	WITHOUT_CLASSIFICATION	0.001602455648085293	DESIGN
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9996994051216277	WITHOUT_CLASSIFICATION	3.0059487837225314E-4	DESIGN
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9996994051216277	WITHOUT_CLASSIFICATION	3.0059487837225314E-4	DESIGN
// FieldInterceptor impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999744046400211	WITHOUT_CLASSIFICATION	2.5595359978857593E-5	DESIGN
// subclass accesses ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999830139788725	WITHOUT_CLASSIFICATION	1.6986021127504294E-5	DESIGN
//let's assume that there is only one lazy fetch group, for now!	WITHOUT_CLASSIFICATION	0.9999846010044382	WITHOUT_CLASSIFICATION	1.539899556178422E-5	DESIGN
// FieldHandler impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999744502147128	WITHOUT_CLASSIFICATION	2.5549785287228482E-5	DESIGN
// should *not* need to grow beyond the size of the total number of columns in the rs	WITHOUT_CLASSIFICATION	0.999693283722032	WITHOUT_CLASSIFICATION	3.067162779679112E-4	DESIGN
// should probably no-op commit/rollback here, at least in JTA scenarios	WITHOUT_CLASSIFICATION	0.9992179388012971	WITHOUT_CLASSIFICATION	7.8206119870299E-4	DESIGN
// Base Expectation impls ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999969716539787	WITHOUT_CLASSIFICATION	3.0283460211862857E-6	DESIGN
// Various Expectation instances ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999933636851134	WITHOUT_CLASSIFICATION	6.636314886657914E-6	DESIGN
// explicitly perform no checking...	WITHOUT_CLASSIFICATION	0.999987250702967	WITHOUT_CLASSIFICATION	1.2749297032896654E-5	DESIGN
// used from testsuite	WITHOUT_CLASSIFICATION	0.9950843416447382	WITHOUT_CLASSIFICATION	0.004915658355261759	DESIGN
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999938883889923	WITHOUT_CLASSIFICATION	6.1116110077026645E-6	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.9998081652754702	WITHOUT_CLASSIFICATION	1.9183472452976072E-4	DESIGN
// register synch; stats.connect()	WITHOUT_CLASSIFICATION	0.9999883897834285	WITHOUT_CLASSIFICATION	1.1610216571580572E-5	DESIGN
//noncritical, swallow and let the other propagate!	WITHOUT_CLASSIFICATION	0.9999799905330835	WITHOUT_CLASSIFICATION	2.000946691647314E-5	DESIGN
// calls executeBatch()	WITHOUT_CLASSIFICATION	0.9999689838296288	WITHOUT_CLASSIFICATION	3.1016170371175923E-5	DESIGN
//no big deal	WITHOUT_CLASSIFICATION	0.9998127582436436	WITHOUT_CLASSIFICATION	1.8724175635648023E-4	DESIGN
// no big deal	WITHOUT_CLASSIFICATION	0.9998681215119885	WITHOUT_CLASSIFICATION	1.3187848801151934E-4	DESIGN
// no big deal	WITHOUT_CLASSIFICATION	0.9998681215119885	WITHOUT_CLASSIFICATION	1.3187848801151934E-4	DESIGN
// sybase driver (jConnect) throwing NPE here in certain // cases, but we'll just handle the general "unexpected" case	WITHOUT_CLASSIFICATION	0.9999699833443563	WITHOUT_CLASSIFICATION	3.001665564369836E-5	DESIGN
// see explanation above...	WITHOUT_CLASSIFICATION	0.9999483572485256	WITHOUT_CLASSIFICATION	5.164275147440023E-5	DESIGN
// If we are in the process of releasing, no sense // checking for aggressive-release possibility.	WITHOUT_CLASSIFICATION	0.9999273289112847	WITHOUT_CLASSIFICATION	7.267108871527362E-5	DESIGN
// EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9992501948748279	WITHOUT_CLASSIFICATION	7.498051251721384E-4	DESIGN
// ResultSet impl ("overridden") ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999738435930563	WITHOUT_CLASSIFICATION	2.615640694361844E-5	DESIGN
// ResultSet impl (delegated) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999785102985301	WITHOUT_CLASSIFICATION	2.148970146990567E-5	DESIGN
// refer to comment in StatefulPersistenceContext.addCollection()	WITHOUT_CLASSIFICATION	0.999999524906691	WITHOUT_CLASSIFICATION	4.7509330905468523E-7	DESIGN
// ConnectionManager.Callback implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999985487879974	WITHOUT_CLASSIFICATION	1.4512120026022374E-5	DESIGN
// Note : success = false, because we don't know the outcome of the transaction	WITHOUT_CLASSIFICATION	0.9999708052465253	WITHOUT_CLASSIFICATION	2.9194753474733322E-5	DESIGN
// we already have a callback registered; either a local // (org.hibernate.Transaction) transaction has accepted // callback responsibilities, or we have previously // registered a transaction synch.	WITHOUT_CLASSIFICATION	0.9756347079982804	WITHOUT_CLASSIFICATION	0.024365292001719635	DESIGN
// the configured transaction-factory says it only supports // local callback mode, so no sense attempting to register a // JTA Synchronization	WITHOUT_CLASSIFICATION	0.9999966355332434	WITHOUT_CLASSIFICATION	3.3644667567094005E-6	DESIGN
// transactions marked for rollback-only cause some TM impls to throw exceptions	WITHOUT_CLASSIFICATION	0.9994535606346817	WITHOUT_CLASSIFICATION	5.4643936531832E-4	DESIGN
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999953710599989	WITHOUT_CLASSIFICATION	4.628940001061313E-6	DESIGN
//postInitialize() will be called after initialization	WITHOUT_CLASSIFICATION	0.9993606159805476	WITHOUT_CLASSIFICATION	6.393840194524535E-4	DESIGN
// cannot handle single quotes	WITHOUT_CLASSIFICATION	0.9968920446187697	WITHOUT_CLASSIFICATION	0.003107955381230356	DESIGN
// todo : for 4.0 //	WITHOUT_CLASSIFICATION	0.9999667006201202	WITHOUT_CLASSIFICATION	3.329937987992257E-5	DESIGN
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999996885126775	WITHOUT_CLASSIFICATION	3.114873225185712E-7	DESIGN
// don't even bother trying to read further	WITHOUT_CLASSIFICATION	0.9999833862773224	WITHOUT_CLASSIFICATION	1.6613722677511155E-5	DESIGN
// don't even bother trying to read any further	WITHOUT_CLASSIFICATION	0.999997161969987	WITHOUT_CLASSIFICATION	2.838030012854107E-6	DESIGN
// position cursor to the last row	WITHOUT_CLASSIFICATION	0.9999885738808202	WITHOUT_CLASSIFICATION	1.1426119179883373E-5	DESIGN
// sequentially read the result set in reverse until we recognize // a change in the key value.  At that point, we are pointed at // the last physical sequential row for the logical row in which // we are interested in processing	WITHOUT_CLASSIFICATION	0.9999945499016253	WITHOUT_CLASSIFICATION	5.450098374608401E-6	DESIGN
// Read backwards until we read past the first physical sequential // row with the key we are interested in loading	WITHOUT_CLASSIFICATION	0.9999936808049138	WITHOUT_CLASSIFICATION	6.319195086280889E-6	DESIGN
// Finally, read ahead one row to position result set cursor // at the first physical row we are interested in loading	WITHOUT_CLASSIFICATION	0.99992452419711	WITHOUT_CLASSIFICATION	7.547580289006837E-5	DESIGN
// now get an existing proxy for each row element (if there is one)	WITHOUT_CLASSIFICATION	0.9999986117646237	WITHOUT_CLASSIFICATION	1.38823537634139E-6	DESIGN
// force the proxy to resolve itself	WITHOUT_CLASSIFICATION	0.9999877896349393	WITHOUT_CLASSIFICATION	1.2210365060611814E-5	DESIGN
// this is equivalent to the old behavior...	WITHOUT_CLASSIFICATION	0.9961516254353607	WITHOUT_CLASSIFICATION	0.0038483745646391418	DESIGN
//if null, owner will be retrieved from session	WITHOUT_CLASSIFICATION	0.9999610114035508	WITHOUT_CLASSIFICATION	3.8988596449267966E-5	DESIGN
//final String queryString, 	WITHOUT_CLASSIFICATION	0.9999834567314809	WITHOUT_CLASSIFICATION	1.6543268519079748E-5	DESIGN
// if it was a reference to self, don't need to nullify // unless we are using native id generation, in which // case we definitely need to nullify	WITHOUT_CLASSIFICATION	0.9999524391296534	WITHOUT_CLASSIFICATION	4.756087034676451E-5	DESIGN
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999278080449755	WITHOUT_CLASSIFICATION	7.219195502448537E-5	DESIGN
// in an effort to avoid concurrent-modification-exceptions (from // potential recursive calls back through here as a result of the // eventual call to PersistentCollection#endRead), we scan the // internal loadingCollections map for matches and store those matches // in a temp collection.  the temp collection is then used to "drive" // the #endRead processing.	WITHOUT_CLASSIFICATION	0.9999978909133965	WITHOUT_CLASSIFICATION	2.1090866034749103E-6	DESIGN
//we can reuse it for each row	WITHOUT_CLASSIFICATION	0.9998798863353855	WITHOUT_CLASSIFICATION	1.2011366461452628E-4	DESIGN
//can't reuse in this case	WITHOUT_CLASSIFICATION	0.9969650057658422	WITHOUT_CLASSIFICATION	0.003034994234157851	DESIGN
// First we need to suspend any current JTA transaction and obtain // a JDBC connection	WITHOUT_CLASSIFICATION	0.9999973215643251	WITHOUT_CLASSIFICATION	2.678435674953734E-6	DESIGN
//getResultList(results);	WITHOUT_CLASSIFICATION	0.9999409343027813	WITHOUT_CLASSIFICATION	5.906569721869963E-5	DESIGN
//if we only returned one entity, query by key is more efficient	WITHOUT_CLASSIFICATION	0.9999243401719072	WITHOUT_CLASSIFICATION	7.565982809275995E-5	DESIGN
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999971795854781	WITHOUT_CLASSIFICATION	2.82041452184412E-6	DESIGN
// handle empty collection	WITHOUT_CLASSIFICATION	0.9997959280688089	WITHOUT_CLASSIFICATION	2.040719311910688E-4	DESIGN
// else no collection element, but also no owner	WITHOUT_CLASSIFICATION	0.9999995246941188	WITHOUT_CLASSIFICATION	4.753058812551344E-7	DESIGN
//handle empty collections	WITHOUT_CLASSIFICATION	0.9998757123190879	WITHOUT_CLASSIFICATION	1.2428768091215538E-4	DESIGN
// else this is not a collection initializer (and empty collections will // be detected by looking for the owner's identifier in the result set)	WITHOUT_CLASSIFICATION	0.9998567339305151	WITHOUT_CLASSIFICATION	1.432660694850001E-4	DESIGN
// validate() instances of Validatable	WITHOUT_CLASSIFICATION	0.9999954380084645	WITHOUT_CLASSIFICATION	4.561991535609907E-6	DESIGN
// if we know there is exactly 1 row, we can skip. // it would be great if we could _always_ skip this; // it is a problem for <key-many-to-one>	WITHOUT_CLASSIFICATION	0.9823562152091203	WITHOUT_CLASSIFICATION	0.01764378479087962	DESIGN
// remove all collections for the entity from the session-level cache	WITHOUT_CLASSIFICATION	0.9999986115791905	WITHOUT_CLASSIFICATION	1.3884208095469395E-6	DESIGN
//null version means the object is in the process of being loaded somewhere else in the ResultSet	WITHOUT_CLASSIFICATION	0.9999995454122417	WITHOUT_CLASSIFICATION	4.545877583475495E-7	DESIGN
//problematic for <key-many-to-one>!	WITHOUT_CLASSIFICATION	0.9999829564549684	WITHOUT_CLASSIFICATION	1.7043545031678904E-5	DESIGN
//use the id passed in	WITHOUT_CLASSIFICATION	0.999530762919805	WITHOUT_CLASSIFICATION	4.6923708019505216E-4	DESIGN
//do nothing	WITHOUT_CLASSIFICATION	0.9997775003821698	WITHOUT_CLASSIFICATION	2.2249961783024058E-4	DESIGN
// prefer re-generation of identity!	WITHOUT_CLASSIFICATION	0.9999961787991186	WITHOUT_CLASSIFICATION	3.8212008813857516E-6	DESIGN
//no point doing this if NONE was requested	WITHOUT_CLASSIFICATION	0.9998410303151941	WITHOUT_CLASSIFICATION	1.589696848058775E-4	DESIGN
//If the object is already loaded, return the loaded one	WITHOUT_CLASSIFICATION	0.9999919960864718	WITHOUT_CLASSIFICATION	8.003913528250892E-6	DESIGN
//its already loaded so don't need to hydrate it	WITHOUT_CLASSIFICATION	0.9999584868411392	WITHOUT_CLASSIFICATION	4.151315886075828E-5	DESIGN
// cascade the refresh prior to refreshing this entity	WITHOUT_CLASSIFICATION	0.9999178582092884	WITHOUT_CLASSIFICATION	8.214179071163076E-5	DESIGN
//the load() which takes an entity does not pass an entityName	WITHOUT_CLASSIFICATION	0.9999922809524673	WITHOUT_CLASSIFICATION	7.719047532754844E-6	DESIGN
//we only check the version when _upgrading_ lock modes	WITHOUT_CLASSIFICATION	0.9999969211751247	WITHOUT_CLASSIFICATION	3.078824875345631E-6	DESIGN
// look for a proxy	WITHOUT_CLASSIFICATION	0.9999911101052404	WITHOUT_CLASSIFICATION	8.889894759538062E-6	DESIGN
//we need to upgrade the lock mode to the mode requested	WITHOUT_CLASSIFICATION	0.9996389599698512	WITHOUT_CLASSIFICATION	3.610400301487836E-4	DESIGN
//its the given optional object	WITHOUT_CLASSIFICATION	0.9999998564952335	WITHOUT_CLASSIFICATION	1.4350476642441955E-7	DESIGN
// instantiate a new instance	WITHOUT_CLASSIFICATION	0.9999906618974574	WITHOUT_CLASSIFICATION	9.338102542616985E-6	DESIGN
//need to hydrate it.	WITHOUT_CLASSIFICATION	0.9995471958677687	WITHOUT_CLASSIFICATION	4.528041322313119E-4	DESIGN
// return a newly loaded object	WITHOUT_CLASSIFICATION	0.9999854376660412	WITHOUT_CLASSIFICATION	1.4562333958930978E-5	DESIGN
//will be ignored, using the existing Entry instead	WITHOUT_CLASSIFICATION	0.9998974070134613	WITHOUT_CLASSIFICATION	1.0259298653876321E-4	DESIGN
// key is an entity involved with the operation performed by the listener; // value can be either a copy of the entity or the entity itself	WITHOUT_CLASSIFICATION	0.9999994024959469	WITHOUT_CLASSIFICATION	5.97504053215415E-7	DESIGN
//materialize associations (and initialize the object) later	WITHOUT_CLASSIFICATION	0.9999975213596688	WITHOUT_CLASSIFICATION	2.47864033128395E-6	DESIGN
// Get the persister for the _subclass_	WITHOUT_CLASSIFICATION	0.9999255131464886	WITHOUT_CLASSIFICATION	7.448685351148537E-5	DESIGN
// ok in normal Hibernate usage to delete a detached entity; JPA however // forbids it, thus this is a hook for HEM to affect this behavior	WITHOUT_CLASSIFICATION	0.6760772018012567	DESIGN	0.32392279819874326	WITHOUT_CLASSIFICATION
// the entry will be removed after the flush, and will no longer // override the stale snapshot // This is now handled by removeEntity() in EntityDeleteAction //persistenceContext.removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999913540067443	WITHOUT_CLASSIFICATION	8.6459932557284E-6	DESIGN
//addInitializedCollection(collection, persister, id);	WITHOUT_CLASSIFICATION	0.9998771065140115	WITHOUT_CLASSIFICATION	1.228934859884448E-4	DESIGN
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9995325146869931	WITHOUT_CLASSIFICATION	4.6748531300699425E-4	DESIGN
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9995325146869931	WITHOUT_CLASSIFICATION	4.6748531300699425E-4	DESIGN
/*|| oj.getJoinable().consumesCollectionAlias() */	WITHOUT_CLASSIFICATION	0.9999969907055621	WITHOUT_CLASSIFICATION	3.0092944378593935E-6	DESIGN
// here we do not bother with the discriminator.	WITHOUT_CLASSIFICATION	0.9998383467626014	WITHOUT_CLASSIFICATION	1.6165323739847544E-4	DESIGN
// Code to handle subclasses of topClass	WITHOUT_CLASSIFICATION	0.9999703453883414	WITHOUT_CLASSIFICATION	2.965461165856798E-5	DESIGN
//woops we got an instance of another class hierarchy branch	WITHOUT_CLASSIFICATION	0.9997488358945402	WITHOUT_CLASSIFICATION	2.5116410545980014E-4	DESIGN
// we can go straight to the first required row	WITHOUT_CLASSIFICATION	0.9999867323509143	WITHOUT_CLASSIFICATION	1.3267649085818189E-5	DESIGN
// we need to step through the rows one row at a time (slow)	WITHOUT_CLASSIFICATION	0.9999514081745984	WITHOUT_CLASSIFICATION	4.8591825401639855E-5	DESIGN
// synchronized to avoid multi-thread access issues; defined as method synch to avoid // potential deadlock issues due to nature of code.	WITHOUT_CLASSIFICATION	0.9996192968564998	WITHOUT_CLASSIFICATION	3.807031435001426E-4	DESIGN
// Allows various loaders (ok mainly the QueryLoader :) to check // whether scrolling of their result set should be allowed. // // By default it is allowed.	WITHOUT_CLASSIFICATION	0.9983497962544198	WITHOUT_CLASSIFICATION	0.0016502037455801994	DESIGN
//before adding to collection!	WITHOUT_CLASSIFICATION	0.9999261648425851	WITHOUT_CLASSIFICATION	7.383515741483488E-5	DESIGN
// if the current depth is 0, the root thing being loaded is the // many-to-many collection itself.  Here, it is alright to use // an inner join...	WITHOUT_CLASSIFICATION	0.9999712493118162	WITHOUT_CLASSIFICATION	2.8750688183773823E-5	DESIGN
//operations which cascade as far as the collection also cascade to collection elements	WITHOUT_CLASSIFICATION	0.9999383852014521	WITHOUT_CLASSIFICATION	6.161479854785261E-5	DESIGN
// simple, because we can't have a one-to-one or a collection  // (or even a property-ref) in a composite-element:	WITHOUT_CLASSIFICATION	0.9999702019469292	WITHOUT_CLASSIFICATION	2.9798053070774753E-5	DESIGN
//a composite key	WITHOUT_CLASSIFICATION	0.999981736674499	WITHOUT_CLASSIFICATION	1.8263325500969438E-5	DESIGN
// if no batch, use "foo = ? and bar = ?"	WITHOUT_CLASSIFICATION	0.9999985194171158	WITHOUT_CLASSIFICATION	1.4805828841445976E-6	DESIGN
//it must be a collection fetch	WITHOUT_CLASSIFICATION	0.999983042396942	WITHOUT_CLASSIFICATION	1.6957603057973435E-5	DESIGN
// needed later for many-to-many/filter application	WITHOUT_CLASSIFICATION	0.9999944695171206	WITHOUT_CLASSIFICATION	5.530482879422544E-6	DESIGN
/*&& etype.isReferenceToPrimaryKey()*/	WITHOUT_CLASSIFICATION	0.9999458837401493	WITHOUT_CLASSIFICATION	5.4116259850629005E-5	DESIGN
// it might still need to apply a collection ordering based on a // many-to-many defined order-by...	WITHOUT_CLASSIFICATION	0.9999320401148943	WITHOUT_CLASSIFICATION	6.795988510564998E-5	DESIGN
// if a composite key, use "( (foo = ? and bar = ?) or (foo = ? and bar = ?) )" for batching //TODO: unnecessary for databases with ANSI-style joins	WITHOUT_CLASSIFICATION	0.999918428214092	WITHOUT_CLASSIFICATION	8.157178590791434E-5	DESIGN
// belong to other persister // belong to other persister	WITHOUT_CLASSIFICATION	0.9999312656730126	WITHOUT_CLASSIFICATION	6.873432698731113E-5	DESIGN
// we found it	WITHOUT_CLASSIFICATION	0.9996619639320177	WITHOUT_CLASSIFICATION	3.3803606798231964E-4	DESIGN
//we can use an inner join for the many-to-many	WITHOUT_CLASSIFICATION	0.9999201732563083	WITHOUT_CLASSIFICATION	7.982674369162467E-5	DESIGN
//disable a join back to this same association	WITHOUT_CLASSIFICATION	0.9998417839435589	WITHOUT_CLASSIFICATION	1.5821605644100517E-4	DESIGN
//NOTE: unlike all other Loaders, this one is NOT //      multithreaded, or cacheable!!	WITHOUT_CLASSIFICATION	0.999539846563191	WITHOUT_CLASSIFICATION	4.601534368090642E-4	DESIGN
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9994094144419791	WITHOUT_CLASSIFICATION	5.905855580208952E-4	DESIGN
//root entity comes *last*	WITHOUT_CLASSIFICATION	0.9998900086629409	WITHOUT_CLASSIFICATION	1.099913370591082E-4	DESIGN
//deliberately ignore return value!	WITHOUT_CLASSIFICATION	0.999962391065533	WITHOUT_CLASSIFICATION	3.7608934467125936E-5	DESIGN
//alias may be null //EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999195579197532	WITHOUT_CLASSIFICATION	8.044208024683962E-5	DESIGN
// if it is a compound path	WITHOUT_CLASSIFICATION	0.9985252434534105	WITHOUT_CLASSIFICATION	0.0014747565465895408	DESIGN
// otherwise assume the parent is the the criteria that created us	WITHOUT_CLASSIFICATION	0.999991681448701	WITHOUT_CLASSIFICATION	8.31855129904123E-6	DESIGN
// if its the root criteria, we are done	WITHOUT_CLASSIFICATION	0.9999095304174939	WITHOUT_CLASSIFICATION	9.046958250621465E-5	DESIGN
// otherwise, recurse	WITHOUT_CLASSIFICATION	0.9999850851172091	WITHOUT_CLASSIFICATION	1.491488279106412E-5	DESIGN
//the criteria instance	WITHOUT_CLASSIFICATION	0.9999397278983658	WITHOUT_CLASSIFICATION	6.02721016342039E-5	DESIGN
// the entity name	WITHOUT_CLASSIFICATION	0.9999964080997235	WITHOUT_CLASSIFICATION	3.5919002765250203E-6	DESIGN
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9999516253549414	WITHOUT_CLASSIFICATION	4.837464505869909E-5	DESIGN
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9999516253549414	WITHOUT_CLASSIFICATION	4.837464505869909E-5	DESIGN
//it refers to an alias of a projection	WITHOUT_CLASSIFICATION	0.9999944590486204	WITHOUT_CLASSIFICATION	5.540951379663389E-6	DESIGN
//should never happen, i think	WITHOUT_CLASSIFICATION	0.9865021470229294	WITHOUT_CLASSIFICATION	0.013497852977070637	DESIGN
// Detect discriminator values...	WITHOUT_CLASSIFICATION	0.9998984365278635	WITHOUT_CLASSIFICATION	1.0156347213648039E-4	DESIGN
// Convert the string value into the proper type.	WITHOUT_CLASSIFICATION	0.9999695985494351	WITHOUT_CLASSIFICATION	3.0401450564801048E-5	DESIGN
// and the qualifier is not the alias of this criteria //      -> check to see if we belong to some criteria other //          than the one that created us	WITHOUT_CLASSIFICATION	0.999997038449458	WITHOUT_CLASSIFICATION	2.9615505419541278E-6	DESIGN
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.9999249274125366	WITHOUT_CLASSIFICATION	7.507258746340407E-5	DESIGN
// Otherwise, this is an ordinary value.	WITHOUT_CLASSIFICATION	0.9998278794654538	WITHOUT_CLASSIFICATION	1.7212053454632178E-4	DESIGN
// Currently *not* cachable if autodiscover types is in effect (e.g. "select * ...")	WITHOUT_CLASSIFICATION	0.9999653587688412	WITHOUT_CLASSIFICATION	3.464123115879883E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9997835908563089	WITHOUT_CLASSIFICATION	2.164091436910978E-4	DESIGN
// this is only needed (afaict) for ResultTransformer processing...	WITHOUT_CLASSIFICATION	0.9973818393863205	WITHOUT_CLASSIFICATION	0.002618160613679583	DESIGN
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999990687540239	WITHOUT_CLASSIFICATION	9.312459760970334E-7	DESIGN
// build an array with indices equal to the total number // of actual returns in the result Hibernate will return // for this query (scalars + non-scalars)	WITHOUT_CLASSIFICATION	0.9981271065406614	WITHOUT_CLASSIFICATION	0.0018728934593385043	DESIGN
// replace {....} with corresponding column aliases	WITHOUT_CLASSIFICATION	0.9999770214759397	WITHOUT_CLASSIFICATION	2.297852406033328E-5	DESIGN
// No additional open braces found in the string, append the // rest of the string in its entirty and quit this loop	WITHOUT_CLASSIFICATION	0.9999995820437068	WITHOUT_CLASSIFICATION	4.179562932608552E-7	DESIGN
// apend everything up until the next encountered open brace	WITHOUT_CLASSIFICATION	0.9999933037594155	WITHOUT_CLASSIFICATION	6.6962405844707455E-6	DESIGN
// it is a simple table alias {foo}	WITHOUT_CLASSIFICATION	0.9999980009101215	WITHOUT_CLASSIFICATION	1.999089878608323E-6	DESIGN
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9984214126698572	WITHOUT_CLASSIFICATION	0.0015785873301427133	DESIGN
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9984214126698572	WITHOUT_CLASSIFICATION	0.0015785873301427133	DESIGN
// The current alias is referencing the collection to be eagerly fetched	WITHOUT_CLASSIFICATION	0.9999621990151236	WITHOUT_CLASSIFICATION	3.780098487636029E-5	DESIGN
// it is a property reference {foo.bar}	WITHOUT_CLASSIFICATION	0.9998194433922216	WITHOUT_CLASSIFICATION	1.8055660777834825E-4	DESIGN
// Possibly handle :something parameters for the query ?	WITHOUT_CLASSIFICATION	0.9944690346778176	WITHOUT_CLASSIFICATION	0.005530965322182378	DESIGN
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9996935519314952	WITHOUT_CLASSIFICATION	3.0644806850481046E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9997835908563089	WITHOUT_CLASSIFICATION	2.164091436910978E-4	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.9998081652754702	WITHOUT_CLASSIFICATION	1.9183472452976072E-4	DESIGN
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9991804103666441	WITHOUT_CLASSIFICATION	8.195896333559992E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9997835908563089	WITHOUT_CLASSIFICATION	2.164091436910978E-4	DESIGN
// Now, process the returns	WITHOUT_CLASSIFICATION	0.9999910829049707	WITHOUT_CLASSIFICATION	8.917095029202087E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.9997835908563089	WITHOUT_CLASSIFICATION	2.164091436910978E-4	DESIGN
// already been processed...	WITHOUT_CLASSIFICATION	0.9997498771907959	WITHOUT_CLASSIFICATION	2.5012280920410723E-4	DESIGN
// already been processed...	WITHOUT_CLASSIFICATION	0.9997498771907959	WITHOUT_CLASSIFICATION	2.5012280920410723E-4	DESIGN
// Make sure the owner alias is known...	WITHOUT_CLASSIFICATION	0.9999570850519154	WITHOUT_CLASSIFICATION	4.2914948084604655E-5	DESIGN
// first, break down the returns into maps keyed by alias // so that role returns can be more easily resolved to their owners	WITHOUT_CLASSIFICATION	0.9999775839336336	WITHOUT_CLASSIFICATION	2.241606636643763E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9997835908563089	WITHOUT_CLASSIFICATION	2.164091436910978E-4	DESIGN
// If this return's alias has not been processed yet, do so b4 further processing of this return	WITHOUT_CLASSIFICATION	0.999640909239855	WITHOUT_CLASSIFICATION	3.590907601449903E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9997835908563089	WITHOUT_CLASSIFICATION	2.164091436910978E-4	DESIGN
// for merging of versioned entities, we consider the version having // been changed only when: // 1) the two version values are different; //      *AND* // 2) The target actually represents database state! // // This second condition is a special case which allows // an entity to be merged during the same transaction // (though during a seperate operation) in which it was // originally persisted/saved	WITHOUT_CLASSIFICATION	0.9998779407290604	WITHOUT_CLASSIFICATION	1.2205927093943025E-4	DESIGN
// this is the second pass through on a merge op, so here we limit the // replacement to associations types (value types were already replaced // during the first pass)	WITHOUT_CLASSIFICATION	0.9997448952582557	WITHOUT_CLASSIFICATION	2.551047417442681E-4	DESIGN
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.9995056509653923	WITHOUT_CLASSIFICATION	4.943490346075623E-4	DESIGN
// cascade-save to collections AFTER the collection owner was saved	WITHOUT_CLASSIFICATION	0.9998654495838942	WITHOUT_CLASSIFICATION	1.345504161057294E-4	DESIGN
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999466864660584	WITHOUT_CLASSIFICATION	5.33135339415876E-5	DESIGN
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999508129042932	WITHOUT_CLASSIFICATION	4.918709570679092E-5	DESIGN
// currently only the Hibernate-supplied DbTimestampType is supported here	WITHOUT_CLASSIFICATION	0.999803720108696	WITHOUT_CLASSIFICATION	1.9627989130397179E-4	DESIGN
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9953427478788398	WITHOUT_CLASSIFICATION	0.004657252121160117	DESIGN
// make a new one	WITHOUT_CLASSIFICATION	0.9999987335584417	WITHOUT_CLASSIFICATION	1.266441558295234E-6	DESIGN
// not so sure this is even valid subtree.  but if it was, it'd // represent two unrelated table references...	WITHOUT_CLASSIFICATION	0.7504383360885147	WITHOUT_CLASSIFICATION	0.24956166391148538	DESIGN
// (NOT (GT a b) ) => (LE a b)	WITHOUT_CLASSIFICATION	0.9995815111630382	WITHOUT_CLASSIFICATION	4.1848883696174905E-4	DESIGN
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9998711730328277	WITHOUT_CLASSIFICATION	1.2882696717229496E-4	DESIGN
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.999727315491154	WITHOUT_CLASSIFICATION	2.726845088459918E-4	DESIGN
//sqlResultTypes = selectClause.getSqlResultTypes();	WITHOUT_CLASSIFICATION	0.9999826253034448	WITHOUT_CLASSIFICATION	1.737469655515933E-5	DESIGN
//by default	WITHOUT_CLASSIFICATION	0.9999475105691457	WITHOUT_CLASSIFICATION	5.248943085427135E-5	DESIGN
// This is now handled earlier in this method.	WITHOUT_CLASSIFICATION	0.9916789074098601	WITHOUT_CLASSIFICATION	0.008321092590139842	DESIGN
// -- Loader implementation --	WITHOUT_CLASSIFICATION	0.9999971315141258	WITHOUT_CLASSIFICATION	2.8684858741185596E-6	DESIGN
// -- Loader overrides --	WITHOUT_CLASSIFICATION	0.9999924940280995	WITHOUT_CLASSIFICATION	7.505971900431169E-6	DESIGN
// (NOT (IS_NULL a b) ) => (IS_NOT_NULL a b)	WITHOUT_CLASSIFICATION	0.9998275813423257	WITHOUT_CLASSIFICATION	1.7241865767426065E-4	DESIGN
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.9999851269320092	WITHOUT_CLASSIFICATION	1.4873067990818917E-5	DESIGN
// meant to handle dynamic instantiation queries...	WITHOUT_CLASSIFICATION	0.9989419104859776	WITHOUT_CLASSIFICATION	0.0010580895140223756	DESIGN
// --- Query translator methods ---	WITHOUT_CLASSIFICATION	0.9999976401881601	WITHOUT_CLASSIFICATION	2.35981183986035E-6	DESIGN
// -- Implementation private methods --	WITHOUT_CLASSIFICATION	0.9999965310561472	WITHOUT_CLASSIFICATION	3.468943852820279E-6	DESIGN
//deduplicate unique constraints sharing the same columns //this is needed by Hibernate Annotations since it creates automagically // unique constraints for the user	WITHOUT_CLASSIFICATION	0.999874844536776	WITHOUT_CLASSIFICATION	1.2515546322402896E-4	DESIGN
// Try to find out the name of the primary key to create it as identity if the IdentityGenerator is used	WITHOUT_CLASSIFICATION	0.9980237011357234	WITHOUT_CLASSIFICATION	0.001976298864276696	DESIGN
// to support dialects that have their own identity data type	WITHOUT_CLASSIFICATION	0.9999987629154742	WITHOUT_CLASSIFICATION	1.2370845258393523E-6	DESIGN
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999950220689323	WITHOUT_CLASSIFICATION	4.977931067676897E-6	DESIGN
//used also for generation of FK names!	WITHOUT_CLASSIFICATION	0.9998889084344419	WITHOUT_CLASSIFICATION	1.1109156555801859E-4	DESIGN
//usually useless	WITHOUT_CLASSIFICATION	0.9999729045537599	WITHOUT_CLASSIFICATION	2.7095446240209647E-5	DESIGN
// added this caching as I noticed that getType() is being called multiple times...	WITHOUT_CLASSIFICATION	0.8357501087629026	WITHOUT_CLASSIFICATION	0.1642498912370975	DESIGN
//do not add unique constraint on DB not supporting unique and nullable columns	WITHOUT_CLASSIFICATION	0.9999986169225016	WITHOUT_CLASSIFICATION	1.383077498399568E-6	DESIGN
//for backward compatibility, disable this:	WITHOUT_CLASSIFICATION	0.9998598308959954	WITHOUT_CLASSIFICATION	1.401691040045718E-4	DESIGN
//may be final //may be final //may be final	WITHOUT_CLASSIFICATION	0.99995732706753	WITHOUT_CLASSIFICATION	4.2672932470060714E-5	DESIGN
//may be final	WITHOUT_CLASSIFICATION	0.999964644634479	WITHOUT_CLASSIFICATION	3.535536552103687E-5	DESIGN
// may be final	WITHOUT_CLASSIFICATION	0.9999857021820139	WITHOUT_CLASSIFICATION	1.4297817986014913E-5	DESIGN
// Custom SQL	WITHOUT_CLASSIFICATION	0.9999777318912937	WITHOUT_CLASSIFICATION	2.2268108706295533E-5	DESIGN
//Primary key constraint	WITHOUT_CLASSIFICATION	0.9999467830730223	WITHOUT_CLASSIFICATION	5.321692697775296E-5	DESIGN
// the root of the incoming property path matched one // of the embedded composite identifier properties	WITHOUT_CLASSIFICATION	0.9999998681101532	WITHOUT_CLASSIFICATION	1.3188984683887456E-7	DESIGN
// ignore it...	WITHOUT_CLASSIFICATION	0.999987913245264	WITHOUT_CLASSIFICATION	1.2086754735958291E-5	DESIGN
//flat recursive algorithm	WITHOUT_CLASSIFICATION	0.9999296293866801	WITHOUT_CLASSIFICATION	7.03706133199194E-5	DESIGN
//an identifier mapper => getKey will be included in the getNonDuplicatedPropertyIterator() //and checked later, so it needs to be excluded	WITHOUT_CLASSIFICATION	0.9999981187666228	WITHOUT_CLASSIFICATION	1.8812333772802423E-6	DESIGN
//if the hibernate-mapping did not specify a schema/catalog, use the defaults //specified by properties - but note that if the schema/catalog were specified //in hibernate-mapping, or as params, they will already be initialized and //will override the values set here (they are in identifierGeneratorProperties)	WITHOUT_CLASSIFICATION	0.9999997625204207	WITHOUT_CLASSIFICATION	2.3747957926686246E-7	DESIGN
//pass the entity-name, if not a collection-id	WITHOUT_CLASSIFICATION	0.9999917278480885	WITHOUT_CLASSIFICATION	8.272151911449182E-6	DESIGN
// Custom SQL	WITHOUT_CLASSIFICATION	0.9999777318912937	WITHOUT_CLASSIFICATION	2.2268108706295533E-5	DESIGN
//Primary key constraint	WITHOUT_CLASSIFICATION	0.9999467830730223	WITHOUT_CLASSIFICATION	5.321692697775296E-5	DESIGN
//pass the column name (a generated id almost always has a single column)	WITHOUT_CLASSIFICATION	0.9998173445694213	WITHOUT_CLASSIFICATION	1.8265543057869265E-4	DESIGN
//needed to satisfy KeyValue	WITHOUT_CLASSIFICATION	0.9998221323945617	WITHOUT_CLASSIFICATION	1.7786760543814491E-4	DESIGN
// empty means no scoping	WITHOUT_CLASSIFICATION	0.9999003561985627	WITHOUT_CLASSIFICATION	9.964380143730542E-5	DESIGN
// index should be last column listed	WITHOUT_CLASSIFICATION	0.9993602694900131	WITHOUT_CLASSIFICATION	6.397305099869656E-4	DESIGN
//if it is a formula index, use the element columns in the PK	WITHOUT_CLASSIFICATION	0.9998573480177481	WITHOUT_CLASSIFICATION	1.426519822519772E-4	DESIGN
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns	WITHOUT_CLASSIFICATION	0.9999981919186767	WITHOUT_CLASSIFICATION	1.808081323244421E-6	DESIGN
/*ArrayList list = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999766840777993	WITHOUT_CLASSIFICATION	2.3315922200746417E-5	DESIGN
// }	WITHOUT_CLASSIFICATION	0.9999545210035536	WITHOUT_CLASSIFICATION	4.547899644634747E-5	DESIGN
// no foreign key element of for a one-to-many	WITHOUT_CLASSIFICATION	0.9999997033061476	WITHOUT_CLASSIFICATION	2.9669385233411367E-7	DESIGN
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.8944414808142936	DESIGN	0.10555851918570633	WITHOUT_CLASSIFICATION
// the case of a foreign key to something other than the pk is handled in createPropertyRefConstraints	WITHOUT_CLASSIFICATION	0.9999720935177103	WITHOUT_CLASSIFICATION	2.7906482289723305E-5	DESIGN
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.8944414808142936	DESIGN	0.10555851918570633	WITHOUT_CLASSIFICATION
// if the property mapping consists of all formulas,  // make it non-updateable	WITHOUT_CLASSIFICATION	0.9999968256114861	WITHOUT_CLASSIFICATION	3.1743885138986378E-6	DESIGN
//columnUpdateability.length==0 ||	WITHOUT_CLASSIFICATION	0.9995916462584132	WITHOUT_CLASSIFICATION	4.083537415868313E-4	DESIGN
// if the property mapping consists of all formulas,  // make it insertable	WITHOUT_CLASSIFICATION	0.999997083554391	WITHOUT_CLASSIFICATION	2.9164456090317242E-6	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998936392762053	WITHOUT_CLASSIFICATION	1.0636072379462778E-4	DESIGN
// expected type is intrinsic here...	WITHOUT_CLASSIFICATION	0.99988753380191	WITHOUT_CLASSIFICATION	1.1246619808996692E-4	DESIGN
//}	WITHOUT_CLASSIFICATION	0.9996844162881963	WITHOUT_CLASSIFICATION	3.1558371180379904E-4	DESIGN
//}	WITHOUT_CLASSIFICATION	0.9996844162881963	WITHOUT_CLASSIFICATION	3.1558371180379904E-4	DESIGN
//return memberPersister.getPropertyType(propertyName);	WITHOUT_CLASSIFICATION	0.9999045059965872	WITHOUT_CLASSIFICATION	9.549400341274765E-5	DESIGN
//return memberPersister.toColumns(alias, propertyName);	WITHOUT_CLASSIFICATION	0.9997674426380352	WITHOUT_CLASSIFICATION	2.325573619649267E-4	DESIGN
//return memberPersister.getType();	WITHOUT_CLASSIFICATION	0.9998649161929644	WITHOUT_CLASSIFICATION	1.350838070356628E-4	DESIGN
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9999369930737076	WITHOUT_CLASSIFICATION	6.300692629234931E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9997835908563089	WITHOUT_CLASSIFICATION	2.164091436910978E-4	DESIGN
//instanceof AssociationType;	WITHOUT_CLASSIFICATION	0.9999830364062644	WITHOUT_CLASSIFICATION	1.6963593735620714E-5	DESIGN
// we need to determine the best way to know that two joinables // represent a single many-to-many...	WITHOUT_CLASSIFICATION	0.9705280948612481	WITHOUT_CLASSIFICATION	0.029471905138751774	DESIGN
//strip leading ','	WITHOUT_CLASSIFICATION	0.9998291556064499	WITHOUT_CLASSIFICATION	1.7084439355011426E-4	DESIGN
//public boolean isSubselectLoadable();	WITHOUT_CLASSIFICATION	0.999927695796695	WITHOUT_CLASSIFICATION	7.230420330497606E-5	DESIGN
// KEY	WITHOUT_CLASSIFICATION	0.9999229210978067	WITHOUT_CLASSIFICATION	7.707890219335225E-5	DESIGN
//columns	WITHOUT_CLASSIFICATION	0.9997547926419209	WITHOUT_CLASSIFICATION	2.4520735807906493E-4	DESIGN
//SQL statements	WITHOUT_CLASSIFICATION	0.9999956451641207	WITHOUT_CLASSIFICATION	4.354835879346986E-6	DESIGN
//extra information about the element type	WITHOUT_CLASSIFICATION	0.9999995309997262	WITHOUT_CLASSIFICATION	4.6900027374206493E-7	DESIGN
//types	WITHOUT_CLASSIFICATION	0.99993408901035	WITHOUT_CLASSIFICATION	6.591098965004952E-5	DESIGN
// custom sql	WITHOUT_CLASSIFICATION	0.9999537485867611	WITHOUT_CLASSIFICATION	4.625141323883391E-5	DESIGN
//private final String unquotedIdentifierColumnName;	WITHOUT_CLASSIFICATION	0.9999987910228445	WITHOUT_CLASSIFICATION	1.2089771554607008E-6	DESIGN
// dynamic filters specifically for many-to-many inside the collection	WITHOUT_CLASSIFICATION	0.999998361984429	WITHOUT_CLASSIFICATION	1.6380155710079588E-6	DESIGN
// dynamic filters for the collection	WITHOUT_CLASSIFICATION	0.9999936181918948	WITHOUT_CLASSIFICATION	6.381808105250765E-6	DESIGN
// NativeSQL: collect key column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999975144201511	WITHOUT_CLASSIFICATION	2.4855798489338823E-6	DESIGN
//unquotedKeyColumnNames = StringHelper.unQuote(keyColumnAliases);	WITHOUT_CLASSIFICATION	0.9999964429505729	WITHOUT_CLASSIFICATION	3.557049427135528E-6	DESIGN
//ELEMENT	WITHOUT_CLASSIFICATION	0.9994285033876876	WITHOUT_CLASSIFICATION	5.714966123123152E-4	DESIGN
// NativeSQL: collect element column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999986411504495	WITHOUT_CLASSIFICATION	1.3588495505595345E-6	DESIGN
// INDEX AND ROW SELECT	WITHOUT_CLASSIFICATION	0.9998002682380668	WITHOUT_CLASSIFICATION	1.9973176193331747E-4	DESIGN
// NativeSQL: collect index column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999984127502372	WITHOUT_CLASSIFICATION	1.587249762783919E-6	DESIGN
//unquotedIdentifierColumnName = identifierColumnAlias;	WITHOUT_CLASSIFICATION	0.9999950683473419	WITHOUT_CLASSIFICATION	4.931652658089197E-6	DESIGN
//unquotedIdentifierColumnName = null;	WITHOUT_CLASSIFICATION	0.999998973426074	WITHOUT_CLASSIFICATION	1.0265739260534183E-6	DESIGN
//GENERATE THE SQL:	WITHOUT_CLASSIFICATION	0.9995270029390247	WITHOUT_CLASSIFICATION	4.729970609752473E-4	DESIGN
// for non-arrays, we don't need to know the element class //elementType.returnedClass();	WITHOUT_CLASSIFICATION	0.9999245836036347	WITHOUT_CLASSIFICATION	7.541639636536922E-5	DESIGN
//not all classpersisters implement PropertyMapping!	WITHOUT_CLASSIFICATION	0.9999500436524068	WITHOUT_CLASSIFICATION	4.995634759327982E-5	DESIGN
// Handle any filters applied to this collection	WITHOUT_CLASSIFICATION	0.9998427049600345	WITHOUT_CLASSIFICATION	1.5729503996549918E-4	DESIGN
// Handle any filters applied to this collection for many-to-many	WITHOUT_CLASSIFICATION	0.9999228333876203	WITHOUT_CLASSIFICATION	7.716661237959022E-5	DESIGN
//if there is a user-specified loader, return that //TODO: filters!?	WITHOUT_CLASSIFICATION	0.962987243097483	WITHOUT_CLASSIFICATION	0.037012756902517006	DESIGN
// Take care of any entities that might have // been evicted!	WITHOUT_CLASSIFICATION	0.9999938131754197	WITHOUT_CLASSIFICATION	6.186824580239653E-6	DESIGN
//strip leading ','	WITHOUT_CLASSIFICATION	0.9998291556064499	WITHOUT_CLASSIFICATION	1.7084439355011426E-4	DESIGN
// Run a subquery loader	WITHOUT_CLASSIFICATION	0.9996092705973043	WITHOUT_CLASSIFICATION	3.9072940269566157E-4	DESIGN
//needed by arrays	WITHOUT_CLASSIFICATION	0.9999815230784093	WITHOUT_CLASSIFICATION	1.8476921590694618E-5	DESIGN
//TODO: something with formulas...	WITHOUT_CLASSIFICATION	0.571896969042976	DESIGN	0.42810303095702384	WITHOUT_CLASSIFICATION
//an assertion	WITHOUT_CLASSIFICATION	0.9999993250312814	WITHOUT_CLASSIFICATION	6.749687186437136E-7	DESIGN
// Remove all the old entries	WITHOUT_CLASSIFICATION	0.9999590844709342	WITHOUT_CLASSIFICATION	4.091552906583541E-5	DESIGN
//create all the new entries	WITHOUT_CLASSIFICATION	0.9999986744958419	WITHOUT_CLASSIFICATION	1.3255041580253205E-6	DESIGN
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9999369930737076	WITHOUT_CLASSIFICATION	6.300692629234931E-5	DESIGN
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9999369930737076	WITHOUT_CLASSIFICATION	6.300692629234931E-5	DESIGN
//delete all the deleted entries	WITHOUT_CLASSIFICATION	0.9999970141519371	WITHOUT_CLASSIFICATION	2.985848062909704E-6	DESIGN
//insert all the new entries	WITHOUT_CLASSIFICATION	0.9999994973571108	WITHOUT_CLASSIFICATION	5.026428892498067E-7	DESIGN
//==elementType ??	WITHOUT_CLASSIFICATION	0.9989692884469937	WITHOUT_CLASSIFICATION	0.0010307115530062136	DESIGN
//update all the modified entries	WITHOUT_CLASSIFICATION	0.9999984235437399	WITHOUT_CLASSIFICATION	1.5764562601278459E-6	DESIGN
//identifier collections not supported for 1-to-many	WITHOUT_CLASSIFICATION	0.9999979765654297	WITHOUT_CLASSIFICATION	2.0234345702901543E-6	DESIGN
// update removed rows fks to null	WITHOUT_CLASSIFICATION	0.9991480737306938	WITHOUT_CLASSIFICATION	8.519262693061405E-4	DESIGN
// will still be issued when it used to be null	WITHOUT_CLASSIFICATION	0.9994295870229144	WITHOUT_CLASSIFICATION	5.704129770856747E-4	DESIGN
// now update all changed or added rows fks	WITHOUT_CLASSIFICATION	0.9998738895237625	WITHOUT_CLASSIFICATION	1.2611047623745805E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9997835908563089	WITHOUT_CLASSIFICATION	2.164091436910978E-4	DESIGN
//use suffix for the entity columns	WITHOUT_CLASSIFICATION	0.9996122999560846	WITHOUT_CLASSIFICATION	3.8770004391548333E-4	DESIGN
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999037736767127	WITHOUT_CLASSIFICATION	9.622632328736079E-5	DESIGN
//private final String rootTableName;	WITHOUT_CLASSIFICATION	0.9999982459233561	WITHOUT_CLASSIFICATION	1.754076643936039E-6	DESIGN
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9997784585736027	WITHOUT_CLASSIFICATION	2.2154142639724814E-4	DESIGN
//Custom SQL	WITHOUT_CLASSIFICATION	0.9999112893851749	WITHOUT_CLASSIFICATION	8.871061482502822E-5	DESIGN
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999037736767127	WITHOUT_CLASSIFICATION	9.622632328736079E-5	DESIGN
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999801274492374	WITHOUT_CLASSIFICATION	1.9872550762625335E-5	DESIGN
// This could also just be true all the time...	WITHOUT_CLASSIFICATION	0.9950991103614741	WITHOUT_CLASSIFICATION	0.004900889638525787	DESIGN
//chop the last union (all)	WITHOUT_CLASSIFICATION	0.9999302108481091	WITHOUT_CLASSIFICATION	6.978915189095422E-5	DESIGN
//TODO: check this....	WITHOUT_CLASSIFICATION	0.8871034215597589	DESIGN	0.11289657844024109	WITHOUT_CLASSIFICATION
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9997784585736027	WITHOUT_CLASSIFICATION	2.2154142639724814E-4	DESIGN
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9997307658990686	WITHOUT_CLASSIFICATION	2.6923410093140123E-4	DESIGN
// the closure of all properties in the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999718983458232	WITHOUT_CLASSIFICATION	2.8101654176764378E-5	DESIGN
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999370328367342	WITHOUT_CLASSIFICATION	6.296716326574054E-5	DESIGN
// subclass discrimination works by assigning particular // values to certain combinations of null primary key // values in the outer join using an SQL CASE	WITHOUT_CLASSIFICATION	0.9999865457960468	WITHOUT_CLASSIFICATION	1.3454203953152967E-5	DESIGN
//MULTITABLES	WITHOUT_CLASSIFICATION	0.9986227349008195	WITHOUT_CLASSIFICATION	0.0013772650991804656	DESIGN
// Custom sql	WITHOUT_CLASSIFICATION	0.9999682863563883	WITHOUT_CLASSIFICATION	3.171364361160349E-5	DESIGN
// subclass closure properties	WITHOUT_CLASSIFICATION	0.9995332508212578	WITHOUT_CLASSIFICATION	4.6674917874217305E-4	DESIGN
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.999827625245005	WITHOUT_CLASSIFICATION	1.723747549948889E-4	DESIGN
//( (Column) model.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999696464839785	WITHOUT_CLASSIFICATION	3.0353516021475403E-5	DESIGN
//( (Column) sc.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999840924247548	WITHOUT_CLASSIFICATION	1.59075752451453E-5	DESIGN
// don't need subclass tables, because they can't appear in conditions	WITHOUT_CLASSIFICATION	0.999971245219001	WITHOUT_CLASSIFICATION	2.8754780998975747E-5	DESIGN
// special case where we need to force incloude all subclass joins	WITHOUT_CLASSIFICATION	0.9998124007090055	WITHOUT_CLASSIFICATION	1.8759929099463642E-4	DESIGN
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999037736767127	WITHOUT_CLASSIFICATION	9.622632328736079E-5	DESIGN
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9997307658990686	WITHOUT_CLASSIFICATION	2.6923410093140123E-4	DESIGN
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999370328367342	WITHOUT_CLASSIFICATION	6.296716326574054E-5	DESIGN
//get em on the second pass!	WITHOUT_CLASSIFICATION	0.9999632884361358	WITHOUT_CLASSIFICATION	3.671156386422192E-5	DESIGN
// now look up the object we are really interested in! // (this lets us correctly handle proxies and multi-row // or multi-column queries)	WITHOUT_CLASSIFICATION	0.9937901031148336	WITHOUT_CLASSIFICATION	0.006209896885166463	DESIGN
// discriminator column	WITHOUT_CLASSIFICATION	0.9997882295687647	WITHOUT_CLASSIFICATION	2.1177043123529193E-4	DESIGN
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9997784585736027	WITHOUT_CLASSIFICATION	2.2154142639724814E-4	DESIGN
//private final Map propertyTableNumbersByName = new HashMap();	WITHOUT_CLASSIFICATION	0.9999886068044812	WITHOUT_CLASSIFICATION	1.139319551883114E-5	DESIGN
// CLASS + TABLE	WITHOUT_CLASSIFICATION	0.9996398297314086	WITHOUT_CLASSIFICATION	3.601702685913412E-4	DESIGN
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9998862684915977	WITHOUT_CLASSIFICATION	1.1373150840242492E-4	DESIGN
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9998802076712581	WITHOUT_CLASSIFICATION	1.1979232874185692E-4	DESIGN
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.999827625245005	WITHOUT_CLASSIFICATION	1.723747549948889E-4	DESIGN
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999801274492374	WITHOUT_CLASSIFICATION	1.9872550762625335E-5	DESIGN
// JOINS	WITHOUT_CLASSIFICATION	0.9999860926609923	WITHOUT_CLASSIFICATION	1.3907339007700785E-5	DESIGN
//propertyTableNumbersByName.put( prop.getName(), join );	WITHOUT_CLASSIFICATION	0.9999539598047742	WITHOUT_CLASSIFICATION	4.604019522579036E-5	DESIGN
//Access cached SQL	WITHOUT_CLASSIFICATION	0.9999730649817152	WITHOUT_CLASSIFICATION	2.6935018284857388E-5	DESIGN
//figure out which tables need to be fetched	WITHOUT_CLASSIFICATION	0.9999551287433719	WITHOUT_CLASSIFICATION	4.487125662811506E-5	DESIGN
//figure out which columns are needed	WITHOUT_CLASSIFICATION	0.9991976703944062	WITHOUT_CLASSIFICATION	8.02329605593677E-4	DESIGN
//figure out which formulas are needed	WITHOUT_CLASSIFICATION	0.999885273937496	WITHOUT_CLASSIFICATION	1.1472606250400254E-4	DESIGN
//render the SQL	WITHOUT_CLASSIFICATION	0.9999720365877169	WITHOUT_CLASSIFICATION	2.7963412283055416E-5	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998936392762053	WITHOUT_CLASSIFICATION	1.0636072379462778E-4	DESIGN
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9990158009986356	WITHOUT_CLASSIFICATION	9.841990013643828E-4	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999349667012849	WITHOUT_CLASSIFICATION	6.503329871514451E-5	DESIGN
// The optional SQL string defined in the where attribute	WITHOUT_CLASSIFICATION	0.999944015197648	WITHOUT_CLASSIFICATION	5.598480235203953E-5	DESIGN
//information about lazy properties of this class	WITHOUT_CLASSIFICATION	0.9999741015829112	WITHOUT_CLASSIFICATION	2.58984170887525E-5	DESIGN
//information about all properties in class hierarchy	WITHOUT_CLASSIFICATION	0.999990589250895	WITHOUT_CLASSIFICATION	9.410749104933108E-6	DESIGN
//information about all columns/formulas in class hierarchy	WITHOUT_CLASSIFICATION	0.9999967379729842	WITHOUT_CLASSIFICATION	3.262027015967432E-6	DESIGN
// dynamic filters attached to the class-level	WITHOUT_CLASSIFICATION	0.9999749743653897	WITHOUT_CLASSIFICATION	2.50256346103018E-5	DESIGN
// SQL strings	WITHOUT_CLASSIFICATION	0.9999976304835287	WITHOUT_CLASSIFICATION	2.3695164712953685E-6	DESIGN
// for objects that came in via update()	WITHOUT_CLASSIFICATION	0.9999890726915025	WITHOUT_CLASSIFICATION	1.0927308497561099E-5	DESIGN
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9998802076712581	WITHOUT_CLASSIFICATION	1.1979232874185692E-4	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999349667012849	WITHOUT_CLASSIFICATION	6.503329871514451E-5	DESIGN
// IDENTIFIER	WITHOUT_CLASSIFICATION	0.9999867502573971	WITHOUT_CLASSIFICATION	1.3249742602844991E-5	DESIGN
// VERSION	WITHOUT_CLASSIFICATION	0.9999850583759841	WITHOUT_CLASSIFICATION	1.4941624015891678E-5	DESIGN
//WHERE STRING	WITHOUT_CLASSIFICATION	0.9998609249100514	WITHOUT_CLASSIFICATION	1.390750899486209E-4	DESIGN
// SUBCLASS PROPERTY CLOSURE	WITHOUT_CLASSIFICATION	0.997567783650536	WITHOUT_CLASSIFICATION	0.0024322163494641005	DESIGN
//before add :-)	WITHOUT_CLASSIFICATION	0.9993253880717419	WITHOUT_CLASSIFICATION	6.746119282581386E-4	DESIGN
// Handle any filters applied to the class level	WITHOUT_CLASSIFICATION	0.9999705208281098	WITHOUT_CLASSIFICATION	2.947917189025215E-5	DESIGN
// only one-to-one is lazy fetched	WITHOUT_CLASSIFICATION	0.9999773815180676	WITHOUT_CLASSIFICATION	2.261848193233579E-5	DESIGN
//note early exit here:	WITHOUT_CLASSIFICATION	0.9998758392712639	WITHOUT_CLASSIFICATION	1.2416072873605404E-4	DESIGN
// object have been loaded with setReadOnly(true); HHH-2236	WITHOUT_CLASSIFICATION	0.9999950654124705	WITHOUT_CLASSIFICATION	4.934587529492299E-6	DESIGN
// NOTE: this assumes something about how propertySelectFragment is implemented by the subclass!	WITHOUT_CLASSIFICATION	0.9722017530059769	WITHOUT_CLASSIFICATION	0.027798246994023106	DESIGN
//strip leading ", "	WITHOUT_CLASSIFICATION	0.9998615466666789	WITHOUT_CLASSIFICATION	1.384533333210049E-4	DESIGN
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999927180434457	WITHOUT_CLASSIFICATION	7.281956554290078E-6	DESIGN
//otherwise return the "hydrated" state (ie. associations are not resolved)	WITHOUT_CLASSIFICATION	0.9999564559638886	WITHOUT_CLASSIFICATION	4.354403611132785E-5	DESIGN
//null owner ok??	WITHOUT_CLASSIFICATION	0.9998664245090702	WITHOUT_CLASSIFICATION	1.335754909297811E-4	DESIGN
// null sql means that the only lazy properties // are shared PK one-to-one associations which are // handled differently in the Type#nullSafeGet code...	WITHOUT_CLASSIFICATION	0.9997798548482065	WITHOUT_CLASSIFICATION	2.2014515179353522E-4	DESIGN
// Create a new FROM node for the referenced class.	WITHOUT_CLASSIFICATION	0.9999796354228926	WITHOUT_CLASSIFICATION	2.0364577107398166E-5	DESIGN
// the difficulty here is exactly what do we update in order to // force the version to be incremented in the db...	WITHOUT_CLASSIFICATION	0.9992422256973932	WITHOUT_CLASSIFICATION	7.57774302606837E-4	DESIGN
// performance op to avoid the array search	WITHOUT_CLASSIFICATION	0.9999973746029617	WITHOUT_CLASSIFICATION	2.625397038227942E-6	DESIGN
// properly handle property-ref-based associations	WITHOUT_CLASSIFICATION	0.999915200963593	WITHOUT_CLASSIFICATION	8.479903640694907E-5	DESIGN
//Enable for HHH-440, which we don't like:	WITHOUT_CLASSIFICATION	0.9988074598393835	WITHOUT_CLASSIFICATION	0.0011925401606166042	DESIGN
// ALIASES	WITHOUT_CLASSIFICATION	0.9999615294217072	WITHOUT_CLASSIFICATION	3.847057829284309E-5	DESIGN
// aliases named identifier ( alias.idname )	WITHOUT_CLASSIFICATION	0.9999963688663722	WITHOUT_CLASSIFICATION	3.6311336278879844E-6	DESIGN
// aliases for composite-id's	WITHOUT_CLASSIFICATION	0.9999974908833144	WITHOUT_CLASSIFICATION	2.509116685672921E-6	DESIGN
// Fetch embedded identifiers propertynames from the "virtual" identifier component	WITHOUT_CLASSIFICATION	0.9999971686294622	WITHOUT_CLASSIFICATION	2.83137053788964E-6	DESIGN
// embedded composite ids ( alias.idname1, alias.idname2 )	WITHOUT_CLASSIFICATION	0.9999720698305381	WITHOUT_CLASSIFICATION	2.7930169461930747E-5	DESIGN
// TODO: skip formulas?	WITHOUT_CLASSIFICATION	0.5609071096091383	WITHOUT_CLASSIFICATION	0.4390928903908619	DESIGN
//don't need filters for the static loaders	WITHOUT_CLASSIFICATION	0.9999910444915159	WITHOUT_CLASSIFICATION	8.955508484204117E-6	DESIGN
//do two passes, for collection property-ref!	WITHOUT_CLASSIFICATION	0.9998357514740784	WITHOUT_CLASSIFICATION	1.6424852592152945E-4	DESIGN
// select the correct row by either pk or rowid	WITHOUT_CLASSIFICATION	0.9999874921232452	WITHOUT_CLASSIFICATION	1.2507876754771505E-5	DESIGN
//TODO: eventually, rowIdName[j]	WITHOUT_CLASSIFICATION	0.9713247962898326	WITHOUT_CLASSIFICATION	0.028675203710167445	DESIGN
// this is a property of the table, which we are updating	WITHOUT_CLASSIFICATION	0.9926196644983556	WITHOUT_CLASSIFICATION	0.007380335501644402	DESIGN
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9999991526592892	WITHOUT_CLASSIFICATION	8.473407107400291E-7	DESIGN
// we are using "all" or "dirty" property-based optimistic locking	WITHOUT_CLASSIFICATION	0.9994221348390191	WITHOUT_CLASSIFICATION	5.778651609810256E-4	DESIGN
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9561763588430642	WITHOUT_CLASSIFICATION	0.04382364115693587	DESIGN
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999966473267845	WITHOUT_CLASSIFICATION	3.3526732154808716E-6	DESIGN
// add normal properties	WITHOUT_CLASSIFICATION	0.9999501688167819	WITHOUT_CLASSIFICATION	4.983118321804998E-5	DESIGN
// add the discriminator	WITHOUT_CLASSIFICATION	0.9999922428525506	WITHOUT_CLASSIFICATION	7.75714744942073E-6	DESIGN
// more specifically : "? [op] datetime" //      1) if the operator is MINUS, the param needs to be of //          some datetime type //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.9909905627260354	WITHOUT_CLASSIFICATION	0.009009437273964626	DESIGN
// add normal properties	WITHOUT_CLASSIFICATION	0.9999501688167819	WITHOUT_CLASSIFICATION	4.983118321804998E-5	DESIGN
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999966473267845	WITHOUT_CLASSIFICATION	3.3526732154808716E-6	DESIGN
// add the discriminator	WITHOUT_CLASSIFICATION	0.9999922428525506	WITHOUT_CLASSIFICATION	7.75714744942073E-6	DESIGN
// add the primary key	WITHOUT_CLASSIFICATION	0.9999767895679862	WITHOUT_CLASSIFICATION	2.3210432013820862E-5	DESIGN
// delegate already handles PK columns	WITHOUT_CLASSIFICATION	0.9999351618816041	WITHOUT_CLASSIFICATION	6.483811839583198E-5	DESIGN
// we can't batch joined inserts, *especially* not if it is an identity insert; // nor can we batch statements where the expectation is based on an output param	WITHOUT_CLASSIFICATION	0.9999993496359517	WITHOUT_CLASSIFICATION	6.503640482651951E-7	DESIGN
// Render the SQL query	WITHOUT_CLASSIFICATION	0.9999495997408622	WITHOUT_CLASSIFICATION	5.040025913789339E-5	DESIGN
// Write the values of fields onto the prepared statement - we MUST use the state at the time the // insert was issued (cos of foreign key constraints). Not necessarily the object's current state	WITHOUT_CLASSIFICATION	0.999999862065057	WITHOUT_CLASSIFICATION	1.3793494297305715E-7	DESIGN
// TODO : shouldnt inserts be Expectations.NONE?	WITHOUT_CLASSIFICATION	0.7471424375183338	DESIGN	0.25285756248166635	WITHOUT_CLASSIFICATION
//don't bother trying to update, we know there is no row there yet	WITHOUT_CLASSIFICATION	0.9999232774816756	WITHOUT_CLASSIFICATION	7.672251832446306E-5	DESIGN
//if all fields are null, we might need to delete existing row	WITHOUT_CLASSIFICATION	0.9997356979051043	WITHOUT_CLASSIFICATION	2.643020948956674E-4	DESIGN
//there is probably a row there, so try to update //if no rows were updated, we will find out	WITHOUT_CLASSIFICATION	0.999707739532382	WITHOUT_CLASSIFICATION	2.922604676180022E-4	DESIGN
//note: updates to joined tables can't be batched...	WITHOUT_CLASSIFICATION	0.9999853067409789	WITHOUT_CLASSIFICATION	1.469325902113924E-5	DESIGN
// starting index	WITHOUT_CLASSIFICATION	0.9999906636649215	WITHOUT_CLASSIFICATION	9.336335078563878E-6	DESIGN
//Now write the values of fields onto the prepared statement	WITHOUT_CLASSIFICATION	0.9999924818582541	WITHOUT_CLASSIFICATION	7.518141745990214E-6	DESIGN
// Write any appropriate versioning conditional parameters	WITHOUT_CLASSIFICATION	0.9999992031199033	WITHOUT_CLASSIFICATION	7.968800966177303E-7	DESIGN
//Render the SQL query	WITHOUT_CLASSIFICATION	0.9998880642727402	WITHOUT_CLASSIFICATION	1.1193572725982255E-4	DESIGN
// Do the key. The key is immutable so we can use the _current_ object state - not necessarily // the state at the time the delete was issued	WITHOUT_CLASSIFICATION	0.9999747842728012	WITHOUT_CLASSIFICATION	2.5215727198779853E-5	DESIGN
// We should use the _current_ object state (ie. after any updates that occurred during flush)	WITHOUT_CLASSIFICATION	0.9999993047195808	WITHOUT_CLASSIFICATION	6.95280419251574E-7	DESIGN
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9998371682818954	WITHOUT_CLASSIFICATION	1.6283171810457418E-4	DESIGN
//note: dirtyFields==null means we had no snapshot, and we couldn't get one using select-before-update //	WITHOUT_CLASSIFICATION	0.9999392507118595	WITHOUT_CLASSIFICATION	6.07492881404318E-5	DESIGN
// more specifically : "datetime [op] ?" //      1) if the operator is MINUS, we really cannot determine //          the expected type as either another datetime or //          numeric would be valid //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.7953077882334406	WITHOUT_CLASSIFICATION	0.20469221176655933	DESIGN
// For the case of dynamic-update="true", we need to generate the UPDATE SQL	WITHOUT_CLASSIFICATION	0.9998054756129521	WITHOUT_CLASSIFICATION	1.9452438704791665E-4	DESIGN
// don't need to check laziness (dirty checking algorithm handles that)	WITHOUT_CLASSIFICATION	0.9998762653327098	WITHOUT_CLASSIFICATION	1.2373466729018686E-4	DESIGN
// For the case of dynamic-update="false", or no snapshot, we use the static SQL	WITHOUT_CLASSIFICATION	0.9999877623576501	WITHOUT_CLASSIFICATION	1.2237642349861136E-5	DESIGN
// if not "get", then try "is"	WITHOUT_CLASSIFICATION	0.9999923936069979	WITHOUT_CLASSIFICATION	7.606393002078834E-6	DESIGN
// Now update only the tables with dirty properties (and the table with the version number)	WITHOUT_CLASSIFICATION	0.9999999657687316	WITHOUT_CLASSIFICATION	3.423126837004771E-8	DESIGN
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999912375263444	WITHOUT_CLASSIFICATION	8.762473655581067E-6	DESIGN
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999912375263444	WITHOUT_CLASSIFICATION	8.762473655581067E-6	DESIGN
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999964116607304	WITHOUT_CLASSIFICATION	3.588339269526985E-6	DESIGN
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999964116607304	WITHOUT_CLASSIFICATION	3.588339269526985E-6	DESIGN
// not supported	WITHOUT_CLASSIFICATION	0.9998624924253643	WITHOUT_CLASSIFICATION	1.3750757463583852E-4	DESIGN
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9998371682818954	WITHOUT_CLASSIFICATION	1.6283171810457418E-4	DESIGN
// we need to utilize dynamic delete statements	WITHOUT_CLASSIFICATION	0.9992766824594244	WITHOUT_CLASSIFICATION	7.233175405755911E-4	DESIGN
// otherwise, utilize the static delete statements	WITHOUT_CLASSIFICATION	0.9999777718219737	WITHOUT_CLASSIFICATION	2.222817802633404E-5	DESIGN
//just a performance opt!	WITHOUT_CLASSIFICATION	0.9999950033035434	WITHOUT_CLASSIFICATION	4.996696456577739E-6	DESIGN
//just a performance opt!	WITHOUT_CLASSIFICATION	0.9999950033035434	WITHOUT_CLASSIFICATION	4.996696456577739E-6	DESIGN
//all joins join to the pk of the driving table	WITHOUT_CLASSIFICATION	0.99998991850506	WITHOUT_CLASSIFICATION	1.0081494939969712E-5	DESIGN
//notice that we skip the first table; it is the driving table!	WITHOUT_CLASSIFICATION	0.9999056495094862	WITHOUT_CLASSIFICATION	9.43504905137718E-5	DESIGN
//we can inner join to superclass tables (the row MUST be there) //we can never inner join to subclass tables	WITHOUT_CLASSIFICATION	0.9987859895962679	WITHOUT_CLASSIFICATION	0.0012140104037320996	DESIGN
//skip the driving table	WITHOUT_CLASSIFICATION	0.999981111200355	WITHOUT_CLASSIFICATION	1.8888799644912284E-5	DESIGN
//get 'em in the right order (not that it really matters)	WITHOUT_CLASSIFICATION	0.7229024628290556	WITHOUT_CLASSIFICATION	0.27709753717094454	DESIGN
// here, we work under the following assumptions: //      ------------ valid cases -------------------------------------- //      1) datetime + {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      2) datetime - datetime : always results in a DOUBLE //      3) datetime - {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      ------------ invalid cases ------------------------------------ //      4) datetime + datetime //      5) {something other than datetime} - datetime //      6) datetime * {any type} //      7) datetime / {any type} //      8) {any type} / datetime // doing so allows us to properly handle parameters as either the left // or right side here in the majority of cases	WITHOUT_CLASSIFICATION	0.9902918091933892	WITHOUT_CLASSIFICATION	0.009708190806610874	DESIGN
//render the where and from parts	WITHOUT_CLASSIFICATION	0.9998532980398146	WITHOUT_CLASSIFICATION	1.467019601853646E-4	DESIGN
//we *could* regerate this inside each called method!	WITHOUT_CLASSIFICATION	0.963748838506076	WITHOUT_CLASSIFICATION	0.036251161493923954	DESIGN
//now render the joins	WITHOUT_CLASSIFICATION	0.999699986529219	WITHOUT_CLASSIFICATION	3.000134707809561E-4	DESIGN
// This will add the new from element to the origin.	WITHOUT_CLASSIFICATION	0.9991012043200178	WITHOUT_CLASSIFICATION	8.987956799822762E-4	DESIGN
//now render the select clause	WITHOUT_CLASSIFICATION	0.9999353816066927	WITHOUT_CLASSIFICATION	6.461839330724681E-5	DESIGN
//now tie it all together	WITHOUT_CLASSIFICATION	0.9999830406700911	WITHOUT_CLASSIFICATION	1.6959329908821688E-5	DESIGN
//insert/update/delete SQL	WITHOUT_CLASSIFICATION	0.9999857098693374	WITHOUT_CLASSIFICATION	1.4290130662574758E-5	DESIGN
//select SQL	WITHOUT_CLASSIFICATION	0.999981927226692	WITHOUT_CLASSIFICATION	1.8072773308052476E-5	DESIGN
//no need to check laziness, dirty checking handles that	WITHOUT_CLASSIFICATION	0.9999250741677528	WITHOUT_CLASSIFICATION	7.492583224719305E-5	DESIGN
// Fully resolve the map reference, create implicit joins.	WITHOUT_CLASSIFICATION	0.9999802015917723	WITHOUT_CLASSIFICATION	1.979840822777652E-5	DESIGN
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999096150449347	WITHOUT_CLASSIFICATION	9.038495506534557E-5	DESIGN
// The basic implementation is to simply use the node's text	WITHOUT_CLASSIFICATION	0.9998163393343804	WITHOUT_CLASSIFICATION	1.8366066561968422E-4	DESIGN
// for dialects which are known to not support ANSI-SQL row-value-constructor syntax, // we should mutate the tree.	WITHOUT_CLASSIFICATION	0.9995553969054765	WITHOUT_CLASSIFICATION	4.44603094523454E-4	DESIGN
// Due to the complexity in initializing the SelectClause, do not generate one here. // If it is not found; simply return null... // // Also, do not cache since it gets generated well after we are created.	WITHOUT_CLASSIFICATION	0.999997682806666	WITHOUT_CLASSIFICATION	2.317193334033319E-6	DESIGN
// check the version unsaved-value, if appropriate	WITHOUT_CLASSIFICATION	0.9999995453527127	WITHOUT_CLASSIFICATION	4.5464728722441557E-7	DESIGN
// let this take precedence if defined, since it works for // assigned identifiers	WITHOUT_CLASSIFICATION	0.9999986112878945	WITHOUT_CLASSIFICATION	1.388712105617847E-6	DESIGN
// check the id unsaved-value	WITHOUT_CLASSIFICATION	0.999961437783574	WITHOUT_CLASSIFICATION	3.8562216425870675E-5	DESIGN
// check to see if it is in the second-level cache	WITHOUT_CLASSIFICATION	0.9999449114732144	WITHOUT_CLASSIFICATION	5.508852678547826E-5	DESIGN
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9998439500587284	WITHOUT_CLASSIFICATION	1.5604994127160722E-4	DESIGN
// For property references generate <tablealias>.<columnname> as <projectionalias>	WITHOUT_CLASSIFICATION	0.9999998668426148	WITHOUT_CLASSIFICATION	1.3315738518372407E-7	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999349667012849	WITHOUT_CLASSIFICATION	6.503329871514451E-5	DESIGN
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999927180434457	WITHOUT_CLASSIFICATION	7.281956554290078E-6	DESIGN
//force immediate execution of the insert	WITHOUT_CLASSIFICATION	0.999999461276687	WITHOUT_CLASSIFICATION	5.38723313011888E-7	DESIGN
// If this from element is a collection and the path is a collection property (maxIndex, etc.) then // generate a sub-query.	WITHOUT_CLASSIFICATION	0.999260379123316	WITHOUT_CLASSIFICATION	7.396208766839697E-4	DESIGN
// entities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999841668970938	WITHOUT_CLASSIFICATION	1.5833102906171034E-5	DESIGN
// collections ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999957683952163	WITHOUT_CLASSIFICATION	4.231604783684139E-6	DESIGN
//cannot occur	WITHOUT_CLASSIFICATION	0.9999831222119889	WITHOUT_CLASSIFICATION	1.6877788011023382E-5	DESIGN
//cannot occur	WITHOUT_CLASSIFICATION	0.9999831222119889	WITHOUT_CLASSIFICATION	1.6877788011023382E-5	DESIGN
// only carry on if the method has no parameters	WITHOUT_CLASSIFICATION	0.9999993905689826	WITHOUT_CLASSIFICATION	6.094310175122844E-7	DESIGN
// try "get"	WITHOUT_CLASSIFICATION	0.9999985715230126	WITHOUT_CLASSIFICATION	1.4284769873388744E-6	DESIGN
// do nothing...	WITHOUT_CLASSIFICATION	0.9983448544313043	WITHOUT_CLASSIFICATION	0.0016551455686956947	DESIGN
// do nothing...	WITHOUT_CLASSIFICATION	0.9983448544313043	WITHOUT_CLASSIFICATION	0.0016551455686956947	DESIGN
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9999292906821223	WITHOUT_CLASSIFICATION	7.070931787762383E-5	DESIGN
// this page intentionally left blank :)	WITHOUT_CLASSIFICATION	0.9999841591341179	WITHOUT_CLASSIFICATION	1.5840865882186573E-5	DESIGN
// do not do anything	WITHOUT_CLASSIFICATION	0.9997732123036298	WITHOUT_CLASSIFICATION	2.2678769637015384E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9997835908563089	WITHOUT_CLASSIFICATION	2.164091436910978E-4	DESIGN
// ignore	WITHOUT_CLASSIFICATION	0.9999895196549758	WITHOUT_CLASSIFICATION	1.0480345024145823E-5	DESIGN
//cant instantiate	WITHOUT_CLASSIFICATION	0.999969049163298	WITHOUT_CLASSIFICATION	3.0950836702046874E-5	DESIGN
//if it is a property of an embedded component, invoke on the "identifier"	WITHOUT_CLASSIFICATION	0.9999837649607201	WITHOUT_CLASSIFICATION	1.6235039279936155E-5	DESIGN
// otherwise:	WITHOUT_CLASSIFICATION	0.9999523050242172	WITHOUT_CLASSIFICATION	4.769497578279877E-5	DESIGN
// skip finalize methods	WITHOUT_CLASSIFICATION	0.9999816077492845	WITHOUT_CLASSIFICATION	1.8392250715562812E-5	DESIGN
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9702708686381653	WITHOUT_CLASSIFICATION	0.029729131361834762	DESIGN
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9702708686381653	WITHOUT_CLASSIFICATION	0.029729131361834762	DESIGN
// HHH-2481 make sure the callback gets cleared, otherwise the instance stays in a static thread local.	WITHOUT_CLASSIFICATION	0.9967482202236728	WITHOUT_CLASSIFICATION	0.0032517797763272145	DESIGN
// while constructor is running	WITHOUT_CLASSIFICATION	0.9994471018241107	WITHOUT_CLASSIFICATION	5.528981758893835E-4	DESIGN
// while constructor is running	WITHOUT_CLASSIFICATION	0.9994471018241107	WITHOUT_CLASSIFICATION	5.528981758893835E-4	DESIGN
// note: interface is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9943518602894923	WITHOUT_CLASSIFICATION	0.005648139710507751	DESIGN
// interfaces // arguments	WITHOUT_CLASSIFICATION	0.9999957037653419	WITHOUT_CLASSIFICATION	4.29623465806951E-6	DESIGN
//TODO!	WITHOUT_CLASSIFICATION	0.9672621784528063	WITHOUT_CLASSIFICATION	0.03273782154719373	DESIGN
// Get the caller	WITHOUT_CLASSIFICATION	0.999994459066229	WITHOUT_CLASSIFICATION	5.54093377101421E-6	DESIGN
// Get the caller principals	WITHOUT_CLASSIFICATION	0.9999917442575851	WITHOUT_CLASSIFICATION	8.255742414943009E-6	DESIGN
//private static final Alias DEFAULT_ALIAS = new Alias(10, null);	WITHOUT_CLASSIFICATION	0.9999964720880703	WITHOUT_CLASSIFICATION	3.527911929694474E-6	DESIGN
// Needed to bump this up to DotNode, because that is the only thing which currently // knows about the property-ref path in the correct format; it is either this, or // recurse over the DotNodes constructing the property path just like DotNode does // internally	WITHOUT_CLASSIFICATION	0.9999950288829934	WITHOUT_CLASSIFICATION	4.9711170066011145E-6	DESIGN
//if the identifier is quoted, remove the quotes	WITHOUT_CLASSIFICATION	0.9999703281430977	WITHOUT_CLASSIFICATION	2.9671856902207155E-5	DESIGN
//truncate the identifier to the max alias length, less the suffix length	WITHOUT_CLASSIFICATION	0.9999987317011355	WITHOUT_CLASSIFICATION	1.2682988645123178E-6	DESIGN
//full joins are not supported.. yet!	WITHOUT_CLASSIFICATION	0.9998705156928772	WITHOUT_CLASSIFICATION	1.294843071227642E-4	DESIGN
// null is not considered the same type as Integer. //$NON-NLS-1 //$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999995680255386	WITHOUT_CLASSIFICATION	4.319744613514822E-7	DESIGN
// the outerJoinsAfterWhere needs to come before where clause to properly // handle dynamic filters	WITHOUT_CLASSIFICATION	0.9739454207134777	WITHOUT_CLASSIFICATION	0.026054579286522373	DESIGN
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999816775490331	WITHOUT_CLASSIFICATION	1.8322450966938758E-5	DESIGN
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999816775490331	WITHOUT_CLASSIFICATION	1.8322450966938758E-5	DESIGN
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999816775490331	WITHOUT_CLASSIFICATION	1.8322450966938758E-5	DESIGN
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999816775490331	WITHOUT_CLASSIFICATION	1.8322450966938758E-5	DESIGN
// strip off any leading 'and' token	WITHOUT_CLASSIFICATION	0.999997800112703	WITHOUT_CLASSIFICATION	2.1998872970421258E-6	DESIGN
// if the condition is not already there...	WITHOUT_CLASSIFICATION	0.9997168875334219	WITHOUT_CLASSIFICATION	2.8311246657802125E-4	DESIGN
//dontSpace.add("'");	WITHOUT_CLASSIFICATION	0.999952844201886	WITHOUT_CLASSIFICATION	4.7155798114094736E-5	DESIGN
//for MySQL	WITHOUT_CLASSIFICATION	0.9999372007710708	WITHOUT_CLASSIFICATION	6.279922892913465E-5	DESIGN
//HashMap columnsUnique = new HashMap();	WITHOUT_CLASSIFICATION	0.9999411920614202	WITHOUT_CLASSIFICATION	5.8807938579863706E-5	DESIGN
//null caused some problems	WITHOUT_CLASSIFICATION	0.995126463948997	WITHOUT_CLASSIFICATION	0.0048735360510030095	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.9998081652754702	WITHOUT_CLASSIFICATION	1.9183472452976072E-4	DESIGN
//not sure if this would ever be null but wanted to be careful	WITHOUT_CLASSIFICATION	0.9821321287420048	WITHOUT_CLASSIFICATION	0.0178678712579952	DESIGN
//even on inverse="true"	WITHOUT_CLASSIFICATION	0.9999928776585272	WITHOUT_CLASSIFICATION	7.122341472781158E-6	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.9998081652754702	WITHOUT_CLASSIFICATION	1.9183472452976072E-4	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.9998081652754702	WITHOUT_CLASSIFICATION	1.9183472452976072E-4	DESIGN
// If true then execute db updates, otherwise just generate and display updates	WITHOUT_CLASSIFICATION	0.9999999628288557	WITHOUT_CLASSIFICATION	3.717114414722253E-8	DESIGN
// we only release the connection	WITHOUT_CLASSIFICATION	0.9999991833042202	WITHOUT_CLASSIFICATION	8.166957798136191E-7	DESIGN
// deprecated option...	WITHOUT_CLASSIFICATION	0.998358347917438	WITHOUT_CLASSIFICATION	0.0016416520825619427	DESIGN
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9997447741304892	WITHOUT_CLASSIFICATION	2.5522586951072474E-4	DESIGN
//actually, this last test is probably unnecessary, since  //beforeCompletion() doesn't get called during rollback	WITHOUT_CLASSIFICATION	0.9999500043118404	WITHOUT_CLASSIFICATION	4.999568815957273E-5	DESIGN
// this one only really needed for badly-behaved applications! // (if the TransactionManager has a Sychronization registered, // its a noop) // (actually we do need it for downgrading locks)	WITHOUT_CLASSIFICATION	0.9999517186387533	WITHOUT_CLASSIFICATION	4.828136124664007E-5	DESIGN
// Create an DotNode AST for the path and resolve it.	WITHOUT_CLASSIFICATION	0.999998523358666	WITHOUT_CLASSIFICATION	1.4766413339836002E-6	DESIGN
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9997447741304892	WITHOUT_CLASSIFICATION	2.5522586951072474E-4	DESIGN
//if we could not register a synchronization, //do the before/after completion callbacks //ourself (but we need to let jdbcContext //know that this is what we are going to //do, so it doesn't keep trying to register //synchronizations)	WITHOUT_CLASSIFICATION	0.9959603907465163	WITHOUT_CLASSIFICATION	0.004039609253483739	DESIGN
// swallow it, and continue to roll back JTA transaction	WITHOUT_CLASSIFICATION	0.9999845817507336	WITHOUT_CLASSIFICATION	1.5418249266449736E-5	DESIGN
// so the transaction is already rolled back, by JTA spec	WITHOUT_CLASSIFICATION	0.9999961464519769	WITHOUT_CLASSIFICATION	3.853548023175072E-6	DESIGN
// this method is a noop if there is a Synchronization!	WITHOUT_CLASSIFICATION	0.9999941951085167	WITHOUT_CLASSIFICATION	5.804891483292816E-6	DESIGN
// two conditions where we need to transform this to a theta-join syntax: //      1) 'elem' is the "root from-element" in correlated subqueries //      2) The DotNode.useThetaStyleImplicitJoins has been set to true //          and 'elem' represents an implicit join	WITHOUT_CLASSIFICATION	0.9999020187868127	WITHOUT_CLASSIFICATION	9.798121318733994E-5	DESIGN
// WebSphere, however, is not a sane JEE/JTA container...	WITHOUT_CLASSIFICATION	0.9513545864446508	WITHOUT_CLASSIFICATION	0.048645413555349314	DESIGN
// for sane JEE/JTA containers, the transaction itself functions as its identifier...	WITHOUT_CLASSIFICATION	0.9999988687727914	WITHOUT_CLASSIFICATION	1.1312272086584545E-6	DESIGN
//swallow, the transaction was finished	WITHOUT_CLASSIFICATION	0.9999947555599219	WITHOUT_CLASSIFICATION	5.244440078179314E-6	DESIGN
// all AliasToEntityMapResultTransformer are considered equal ~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999989188236087	WITHOUT_CLASSIFICATION	1.0811763912880818E-6	DESIGN
// Create the join element under the from element.	WITHOUT_CLASSIFICATION	0.9998905532312301	WITHOUT_CLASSIFICATION	1.0944676876990334E-4	DESIGN
// all DistinctRootEntityResultTransformer are considered equal ~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993179794234	WITHOUT_CLASSIFICATION	6.820205766048626E-7	DESIGN
// map of EntityMode -> Tuplizer	WITHOUT_CLASSIFICATION	0.9999907026455653	WITHOUT_CLASSIFICATION	9.297354434641199E-6	DESIGN
// this is a virtual id property...	WITHOUT_CLASSIFICATION	0.7957517601296267	WITHOUT_CLASSIFICATION	0.2042482398703733	DESIGN
//this one needed only for guessEntityMode()	WITHOUT_CLASSIFICATION	0.9997457067994726	WITHOUT_CLASSIFICATION	2.5429320052746415E-4	DESIGN
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999871212004855	WITHOUT_CLASSIFICATION	1.2878799514584022E-5	DESIGN
// todo : move this to SF per HHH-3517; also see HHH-1907 and ComponentMetamodel	WITHOUT_CLASSIFICATION	0.9906541155173945	WITHOUT_CLASSIFICATION	0.009345884482605515	DESIGN
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999996879030129	WITHOUT_CLASSIFICATION	3.1209698705266435E-7	DESIGN
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999156493896292	WITHOUT_CLASSIFICATION	8.435061037087367E-5	DESIGN
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999994941623064	WITHOUT_CLASSIFICATION	5.058376935004766E-7	DESIGN
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999156493896292	WITHOUT_CLASSIFICATION	8.435061037087367E-5	DESIGN
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999889498414576	WITHOUT_CLASSIFICATION	1.105015854229492E-5	DESIGN
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9454218543001793	WITHOUT_CLASSIFICATION	0.05457814569982065	DESIGN
//	WITHOUT_CLASSIFICATION	0.9997835908563089	WITHOUT_CLASSIFICATION	2.164091436910978E-4	DESIGN
// cached for efficiency...	WITHOUT_CLASSIFICATION	0.9984400057654738	WITHOUT_CLASSIFICATION	0.0015599942345262087	DESIGN
//	WITHOUT_CLASSIFICATION	0.9997835908563089	WITHOUT_CLASSIFICATION	2.164091436910978E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9997835908563089	WITHOUT_CLASSIFICATION	2.164091436910978E-4	DESIGN
//it was not embedded, so the argument is just an id	WITHOUT_CLASSIFICATION	0.999672649393487	WITHOUT_CLASSIFICATION	3.2735060651294557E-4	DESIGN
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999996879030129	WITHOUT_CLASSIFICATION	3.1209698705266435E-7	DESIGN
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999994941623064	WITHOUT_CLASSIFICATION	5.058376935004766E-7	DESIGN
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999889498414576	WITHOUT_CLASSIFICATION	1.105015854229492E-5	DESIGN
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999632090223625	WITHOUT_CLASSIFICATION	3.6790977637642795E-5	DESIGN
//return currentId;	WITHOUT_CLASSIFICATION	0.9999828020918816	WITHOUT_CLASSIFICATION	1.7197908118404962E-5	DESIGN
//reset the id	WITHOUT_CLASSIFICATION	0.9999542046455744	WITHOUT_CLASSIFICATION	4.5795354425712355E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9997835908563089	WITHOUT_CLASSIFICATION	2.164091436910978E-4	DESIGN
//reset the version	WITHOUT_CLASSIFICATION	0.999997959807694	WITHOUT_CLASSIFICATION	2.040192305915081E-6	DESIGN
// the default is to simply not lazy fetch properties for now...	WITHOUT_CLASSIFICATION	0.9938483070989017	WITHOUT_CLASSIFICATION	0.006151692901098276	DESIGN
// Add the second join, the one that ends in the destination table.	WITHOUT_CLASSIFICATION	0.9999997504048107	WITHOUT_CLASSIFICATION	2.495951892204748E-7	DESIGN
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999096150449347	WITHOUT_CLASSIFICATION	9.038495506534557E-5	DESIGN
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9454218543001793	WITHOUT_CLASSIFICATION	0.05457814569982065	DESIGN
// determine the id getter and setter methods from the proxy interface (if any) // determine all interfaces needed by the resulting proxy	WITHOUT_CLASSIFICATION	0.9999880155561325	WITHOUT_CLASSIFICATION	1.1984443867546436E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9997835908563089	WITHOUT_CLASSIFICATION	2.164091436910978E-4	DESIGN
//not final because proxy factory creation can fail	WITHOUT_CLASSIFICATION	0.9999395925826965	WITHOUT_CLASSIFICATION	6.0407417303572685E-5	DESIGN
// superclass entity-name	WITHOUT_CLASSIFICATION	0.9999254304282159	WITHOUT_CLASSIFICATION	7.45695717840965E-5	DESIGN
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999096150449347	WITHOUT_CLASSIFICATION	9.038495506534557E-5	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999349667012849	WITHOUT_CLASSIFICATION	6.503329871514451E-5	DESIGN
//init the aliases, after initing the constructornode	WITHOUT_CLASSIFICATION	0.9999543857592968	WITHOUT_CLASSIFICATION	4.5614240703128E-5	DESIGN
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999096150449347	WITHOUT_CLASSIFICATION	9.038495506534557E-5	DESIGN
// legacy behavior (with no abstract attribute specified)	WITHOUT_CLASSIFICATION	0.9999989116164659	WITHOUT_CLASSIFICATION	1.0883835340787737E-6	DESIGN
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9998792568540811	WITHOUT_CLASSIFICATION	1.2074314591898792E-4	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999349667012849	WITHOUT_CLASSIFICATION	6.503329871514451E-5	DESIGN
//note: this affects the return value!	WITHOUT_CLASSIFICATION	0.999802212503327	WITHOUT_CLASSIFICATION	1.977874966730733E-4	DESIGN
// Need to account for allowable '_' within the variant	WITHOUT_CLASSIFICATION	0.9999922700581504	WITHOUT_CLASSIFICATION	7.729941849653692E-6	DESIGN
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999858165828087	WITHOUT_CLASSIFICATION	1.4183417191210678E-5	DESIGN
// Collection Types:	WITHOUT_CLASSIFICATION	0.9999900882461193	WITHOUT_CLASSIFICATION	9.911753880573577E-6	DESIGN
// convenience methods relating to operations across arrays of types...	WITHOUT_CLASSIFICATION	0.9998432094707205	WITHOUT_CLASSIFICATION	1.5679052927959568E-4	DESIGN
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999473424594941	WITHOUT_CLASSIFICATION	5.265754050579834E-5	DESIGN
//Blobs are ignored by merge()	WITHOUT_CLASSIFICATION	0.9998926111880524	WITHOUT_CLASSIFICATION	1.0738881194751257E-4	DESIGN
//value is the entity name	WITHOUT_CLASSIFICATION	0.9999681855616507	WITHOUT_CLASSIFICATION	3.18144383492434E-5	DESIGN
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9995325146869931	WITHOUT_CLASSIFICATION	4.6748531300699425E-4	DESIGN
// generate id select fragment and then property select fragment for // each expression, just like generateSelectFragments().	WITHOUT_CLASSIFICATION	0.999999881019564	WITHOUT_CLASSIFICATION	1.1898043594417407E-7	DESIGN
//TODO!	WITHOUT_CLASSIFICATION	0.9672621784528063	WITHOUT_CLASSIFICATION	0.03273782154719373	DESIGN
//xml is the entity name	WITHOUT_CLASSIFICATION	0.9998247808216838	WITHOUT_CLASSIFICATION	1.7521917831612129E-4	DESIGN
//special case ... this is the leaf of the containment graph, even though not immutable	WITHOUT_CLASSIFICATION	0.9999778855948652	WITHOUT_CLASSIFICATION	2.2114405134792934E-5	DESIGN
//tolerates nulls	WITHOUT_CLASSIFICATION	0.9999977232801895	WITHOUT_CLASSIFICATION	2.2767198103930464E-6	DESIGN
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9995799363200861	WITHOUT_CLASSIFICATION	4.200636799139136E-4	DESIGN
// metaType is assumed to be single-column type	WITHOUT_CLASSIFICATION	0.9998131135543912	WITHOUT_CLASSIFICATION	1.8688644560873908E-4	DESIGN
// Get all the select expressions (that we just generated) and render the select.	WITHOUT_CLASSIFICATION	0.9999998100233677	WITHOUT_CLASSIFICATION	1.8997663226286682E-7	DESIGN
// Look through the FromElement's children to find any collections of values that should be fetched...	WITHOUT_CLASSIFICATION	0.9999995635442818	WITHOUT_CLASSIFICATION	4.364557183047231E-7	DESIGN
//return AssociationType.FOREIGN_KEY_TO_PARENT; //this is better but causes a transient object exception...	WITHOUT_CLASSIFICATION	0.9821680474849307	WITHOUT_CLASSIFICATION	0.017831952515069246	DESIGN
// Use the lower case function name. // Remember whether we're in a SELECT clause or not.	WITHOUT_CLASSIFICATION	0.9984248882744549	WITHOUT_CLASSIFICATION	0.0015751117255452176	DESIGN
// IDENT might be the name of a class.	WITHOUT_CLASSIFICATION	0.9999418778499324	WITHOUT_CLASSIFICATION	5.8122150067524586E-5	DESIGN
//TODO!!!	WITHOUT_CLASSIFICATION	0.9660515023098231	WITHOUT_CLASSIFICATION	0.033948497690176965	DESIGN
//st.setTimestamp( index,  new Timestamp( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9817406822224981	WITHOUT_CLASSIFICATION	0.018259317777501886	DESIGN
//st.setDate( index,  new Date( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9899827590807937	WITHOUT_CLASSIFICATION	0.010017240919206374	DESIGN
// both are Timestamps	WITHOUT_CLASSIFICATION	0.9999840456687362	WITHOUT_CLASSIFICATION	1.595433126381944E-5	DESIGN
// at least one is a plain old Date	WITHOUT_CLASSIFICATION	0.9999983960509715	WITHOUT_CLASSIFICATION	1.603949028502606E-6	DESIGN
//noop	WITHOUT_CLASSIFICATION	0.9998419111911909	WITHOUT_CLASSIFICATION	1.58088808809062E-4	DESIGN
// if the corresponding SQL value is NULL, the reader we got is NULL as well	WITHOUT_CLASSIFICATION	0.9998459377055944	WITHOUT_CLASSIFICATION	1.5406229440552562E-4	DESIGN
// Fetch Reader content up to the end - and put characters in a StringBuffer	WITHOUT_CLASSIFICATION	0.9999968430118897	WITHOUT_CLASSIFICATION	3.1569881103027866E-6	DESIGN
// Return StringBuffer content as a large String	WITHOUT_CLASSIFICATION	0.999999321618555	WITHOUT_CLASSIFICATION	6.783814449342286E-7	DESIGN
//or Types.LONGVARCHAR?	WITHOUT_CLASSIFICATION	0.9970455844624122	WITHOUT_CLASSIFICATION	0.0029544155375878073	DESIGN
//Not called at runtime so doesn't matter if its slow :)	WITHOUT_CLASSIFICATION	0.9853757008598016	WITHOUT_CLASSIFICATION	0.014624299140198431	DESIGN
//TODO	WITHOUT_CLASSIFICATION	0.99247239412815	WITHOUT_CLASSIFICATION	0.007527605871849956	DESIGN
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999993882281586	WITHOUT_CLASSIFICATION	6.117718413462315E-7	DESIGN
//different nullability rules for pk/fk	WITHOUT_CLASSIFICATION	0.9997290744136179	WITHOUT_CLASSIFICATION	2.7092558638216243E-4	DESIGN
//cache this	WITHOUT_CLASSIFICATION	0.9998669566952281	WITHOUT_CLASSIFICATION	1.3304330477196868E-4	DESIGN
//only really need new array during semiresolve!	WITHOUT_CLASSIFICATION	0.9995815116897951	WITHOUT_CLASSIFICATION	4.184883102048083E-4	DESIGN
// Forcefully remove leading ands from where fragments; the grammar will // handle adding them	WITHOUT_CLASSIFICATION	0.9741035740072804	WITHOUT_CLASSIFICATION	0.025896425992719546	DESIGN
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9784004689325352	WITHOUT_CLASSIFICATION	0.021599531067464886	DESIGN
// Create a new FILTERS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999999335691636	WITHOUT_CLASSIFICATION	6.643083637194255E-8	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999349667012849	WITHOUT_CLASSIFICATION	6.503329871514451E-5	DESIGN
//public Object instantiate(Object parent, SessionImplementor session) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9999210897962459	WITHOUT_CLASSIFICATION	7.891020375413549E-5	DESIGN
//nothing to do	WITHOUT_CLASSIFICATION	0.9984496168810373	WITHOUT_CLASSIFICATION	0.0015503831189627745	DESIGN
//nothing to do	WITHOUT_CLASSIFICATION	0.9984496168810373	WITHOUT_CLASSIFICATION	0.0015503831189627745	DESIGN
// VersionType impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //      Note : simply returns null for seed() and next() as the only known //      application of binary types for versioning is for use with the //      TIMESTAMP datatype supported by Sybase and SQL Server, which //      are completely db-generated values...	WITHOUT_CLASSIFICATION	0.999999481801171	WITHOUT_CLASSIFICATION	5.18198828877056E-7	DESIGN
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999473424594941	WITHOUT_CLASSIFICATION	5.265754050579834E-5	DESIGN
//not really necessary, I guess...	WITHOUT_CLASSIFICATION	0.9970414664597692	WITHOUT_CLASSIFICATION	0.0029585335402309144	DESIGN
//Clobs are ignored by merge() operation	WITHOUT_CLASSIFICATION	0.999967512812282	WITHOUT_CLASSIFICATION	3.2487187717934285E-5	DESIGN
// we do not have to worry about queued additions to uninitialized // collections, since they can only occur for inverse collections!	WITHOUT_CLASSIFICATION	0.9999363304585569	WITHOUT_CLASSIFICATION	6.366954144303683E-5	DESIGN
// collections cannot be compared	WITHOUT_CLASSIFICATION	0.9999989956946029	WITHOUT_CLASSIFICATION	1.0043053970183112E-6	DESIGN
//remember the uk value	WITHOUT_CLASSIFICATION	0.9999695344234237	WITHOUT_CLASSIFICATION	3.0465576576166982E-5	DESIGN
//NOOP	WITHOUT_CLASSIFICATION	0.9998316314824287	WITHOUT_CLASSIFICATION	1.6836851757141572E-4	DESIGN
//processCollectionProperty(token, q.getCollectionPersister(collectionRole), collectionName);	WITHOUT_CLASSIFICATION	0.9999936347284889	WITHOUT_CLASSIFICATION	6.365271511019478E-6	DESIGN
//we must use the "remembered" uk value, since it is  //not available from the EntityEntry during assembly	WITHOUT_CLASSIFICATION	0.9999850208047757	WITHOUT_CLASSIFICATION	1.497919522426415E-5	DESIGN
// collections don't dirty an unversioned parent entity	WITHOUT_CLASSIFICATION	0.9999994603508882	WITHOUT_CLASSIFICATION	5.396491118512935E-7	DESIGN
// return false;	WITHOUT_CLASSIFICATION	0.9999863122023749	WITHOUT_CLASSIFICATION	1.3687797625039569E-5	DESIGN
// This just handles a particular case of component // projection, perhaps get rid of it and throw an exception	WITHOUT_CLASSIFICATION	0.9087717862848537	WITHOUT_CLASSIFICATION	0.09122821371514632	DESIGN
//NOTE: we avoid joining to the next table if the named property is just the foreign key value	WITHOUT_CLASSIFICATION	0.9999063973445794	WITHOUT_CLASSIFICATION	9.360265542053518E-5	DESIGN
// the key is the owning entity itself, so get the ID from the key	WITHOUT_CLASSIFICATION	0.9999622885553862	WITHOUT_CLASSIFICATION	3.7711444613908345E-5	DESIGN
// if the original is a PersistentCollection, and that original // was not flagged as dirty, then reset the target's dirty flag // here after the copy operation. // </p> // One thing to be careful of here is a "bare" original collection // in which case we should never ever ever reset the dirty flag // on the target because we simply do not know...	WITHOUT_CLASSIFICATION	0.9991873370601184	WITHOUT_CLASSIFICATION	8.126629398814544E-4	DESIGN
//ignore subselect keywords	WITHOUT_CLASSIFICATION	0.9999706333755086	WITHOUT_CLASSIFICATION	2.9366624491377203E-5	DESIGN
// copy elements into newly empty target collection	WITHOUT_CLASSIFICATION	0.9999807915554948	WITHOUT_CLASSIFICATION	1.9208444505274514E-5	DESIGN
// for a null target, or a target which is the same as the original, we // need to put the merged elements in a new collection	WITHOUT_CLASSIFICATION	0.9999989109878927	WITHOUT_CLASSIFICATION	1.0890121072797265E-6	DESIGN
// by default just use an unanticipated capacity since we don't // know how to extract the capacity to use from original here...	WITHOUT_CLASSIFICATION	0.9881034894546871	WITHOUT_CLASSIFICATION	0.011896510545312962	DESIGN
// get the elements back into the target making sure to handle dirty flag	WITHOUT_CLASSIFICATION	0.999458363377332	WITHOUT_CLASSIFICATION	5.416366226680455E-4	DESIGN
// check if collection is currently being loaded	WITHOUT_CLASSIFICATION	0.9999930019039772	WITHOUT_CLASSIFICATION	6.998096022752177E-6	DESIGN
// check if it is already completely loaded, but unowned	WITHOUT_CLASSIFICATION	0.9999439462433055	WITHOUT_CLASSIFICATION	5.605375669444433E-5	DESIGN
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9978772042045606	WITHOUT_CLASSIFICATION	0.002122795795439397	DESIGN
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9784004689325352	WITHOUT_CLASSIFICATION	0.021599531067464886	DESIGN
// create a new collection wrapper, to be initialized later	WITHOUT_CLASSIFICATION	0.9999928966187546	WITHOUT_CLASSIFICATION	7.103381245506583E-6	DESIGN
// Some JDBC drivers erroneously return an empty array here for a null DB value :/	WITHOUT_CLASSIFICATION	0.9999935338939759	WITHOUT_CLASSIFICATION	6.466106024163968E-6	DESIGN
// our column span is the number of columns in the PK	WITHOUT_CLASSIFICATION	0.9999536735921819	WITHOUT_CLASSIFICATION	4.632640781809222E-5	DESIGN
//cannot batch fetch by unique key (property-ref associations)	WITHOUT_CLASSIFICATION	0.9999930743588252	WITHOUT_CLASSIFICATION	6.925641174732981E-6	DESIGN
// we already know current is not null...	WITHOUT_CLASSIFICATION	0.998320056658355	WITHOUT_CLASSIFICATION	0.0016799433416448905	DESIGN
// the ids are fully resolved, so compare them with isDirty(), not isModified()	WITHOUT_CLASSIFICATION	0.9994460470417884	WITHOUT_CLASSIFICATION	5.53952958211582E-4	DESIGN
//the owner of the association is not the owner of the id	WITHOUT_CLASSIFICATION	0.9999894780686287	WITHOUT_CLASSIFICATION	1.0521931371256065E-5	DESIGN
// ----------------------------------------------------------- Constructors	WITHOUT_CLASSIFICATION	0.9999825380538749	WITHOUT_CLASSIFICATION	1.7461946124961804E-5	DESIGN
// ----------------------------------------------------- Instance Variables	WITHOUT_CLASSIFICATION	0.9999994366750613	WITHOUT_CLASSIFICATION	5.633249386672383E-7	DESIGN
//	WITHOUT_CLASSIFICATION	0.9997835908563089	WITHOUT_CLASSIFICATION	2.164091436910978E-4	DESIGN
// --------------------------------------------------------- Public Methods	WITHOUT_CLASSIFICATION	0.9999319945999298	WITHOUT_CLASSIFICATION	6.800540007030598E-5	DESIGN
// Compare the two maps for equality	WITHOUT_CLASSIFICATION	0.9999826120760241	WITHOUT_CLASSIFICATION	1.738792397581476E-5	DESIGN
// Simple tests that require no synchronization	WITHOUT_CLASSIFICATION	0.9999989224456662	WITHOUT_CLASSIFICATION	1.077554333771271E-6	DESIGN
//Sybase fail if we don't do that, sigh...	WITHOUT_CLASSIFICATION	0.9988637826314277	WITHOUT_CLASSIFICATION	0.0011362173685722926	DESIGN
// Handles things like: // a and b or c // a and ( b or c ) // not a and not b // not ( a and b ) // x between y and z            (overloaded "and") // x in ( a, b, c )             (overloaded brackets) // not not a // a is not null                (overloaded "not") // etc...... // and expressions like // foo = bar                    (maps to: foo.id = bar.id) // foo.Bar = 'foo'              (maps to: foo.bar = 'foo') // foo.Bar.Baz = 1.0            (maps to: foo.bar = bar.id and bar.baz = 1.0) // 1.0 = foo.Bar.Baz            (maps to: bar.baz = 1.0 and foo.Bar = bar.id) // foo.Bar.Baz = a.B.C          (maps to: bar.Baz = b.C and foo.Bar = bar.id and a.B = b.id) // foo.Bar.Baz + a.B.C          (maps to: bar.Baz + b.C and foo.Bar = bar.id and a.B = b.id) // ( foo.Bar.Baz + 1.0 ) < 2.0  (maps to: ( bar.Baz + 1.0 ) < 2.0 and foo.Bar = bar.id)	WITHOUT_CLASSIFICATION	0.9999537702940972	WITHOUT_CLASSIFICATION	4.6229705902828616E-5	DESIGN
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9999237286907623	WITHOUT_CLASSIFICATION	7.627130923775331E-5	DESIGN
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9999237286907623	WITHOUT_CLASSIFICATION	7.627130923775331E-5	DESIGN
// try to "pretty print" it	WITHOUT_CLASSIFICATION	0.9999661242550436	WITHOUT_CLASSIFICATION	3.387574495641554E-5	DESIGN
// otherwise, just dump it	WITHOUT_CLASSIFICATION	0.9998868159245493	WITHOUT_CLASSIFICATION	1.1318407545067994E-4	DESIGN
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9992253858289998	WITHOUT_CLASSIFICATION	7.746141710002969E-4	DESIGN
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9992253858289998	WITHOUT_CLASSIFICATION	7.746141710002969E-4	DESIGN
// use default behavior	WITHOUT_CLASSIFICATION	0.9999913252793946	WITHOUT_CLASSIFICATION	8.674720605455654E-6	DESIGN
//NOTE: early return	WITHOUT_CLASSIFICATION	0.9998935135241289	WITHOUT_CLASSIFICATION	1.0648647587098048E-4	DESIGN
// the MRU cache used to keep hard references to the most recently used query plans; // note : LRU here is a bit of a misnomer, it indicates that LRU entries are removed, the // actual kept entries are the MRU entries	WITHOUT_CLASSIFICATION	0.9971884067773965	WITHOUT_CLASSIFICATION	0.0028115932226035743	DESIGN
// we want to be able to just use the defaults, // if JNDI environment properties are not supplied // so don't put null in anywhere	WITHOUT_CLASSIFICATION	0.99998620680221	WITHOUT_CLASSIFICATION	1.379319778996011E-5	DESIGN
// Clone //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999953320076199	WITHOUT_CLASSIFICATION	4.6679923801701E-6	DESIGN
// Serialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999796011790006	WITHOUT_CLASSIFICATION	2.0398820999399904E-5	DESIGN
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999302827825494	WITHOUT_CLASSIFICATION	6.971721745061231E-5	DESIGN
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999302827825494	WITHOUT_CLASSIFICATION	6.971721745061231E-5	DESIGN
// Deserialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999934461365172	WITHOUT_CLASSIFICATION	6.553863482710587E-6	DESIGN
/* static methods only - hide constructor */	WITHOUT_CLASSIFICATION	0.9999760199297051	WITHOUT_CLASSIFICATION	2.3980070294866283E-5	DESIGN
/*&& !('_'==character)*/	WITHOUT_CLASSIFICATION	0.9999774517829559	WITHOUT_CLASSIFICATION	2.2548217044073742E-5	DESIGN
// returnign null!	WITHOUT_CLASSIFICATION	0.9999961103403607	WITHOUT_CLASSIFICATION	3.889659639292252E-6	DESIGN
// returnign null!	WITHOUT_CLASSIFICATION	0.9999961103403607	WITHOUT_CLASSIFICATION	3.889659639292252E-6	DESIGN
// includes last '.'	WITHOUT_CLASSIFICATION	0.9999991445089333	WITHOUT_CLASSIFICATION	8.554910666582095E-7	DESIGN
// +1 to include the following '.'	WITHOUT_CLASSIFICATION	0.9999821279423096	WITHOUT_CLASSIFICATION	1.7872057690454543E-5	DESIGN
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.6162536534426084	WITHOUT_CLASSIFICATION	0.38374634655739176	DESIGN
// first time we find match!	WITHOUT_CLASSIFICATION	0.9999230394118072	WITHOUT_CLASSIFICATION	7.696058819289116E-5	DESIGN
// entityNames may now include slashes for the representations //classname may be an inner class	WITHOUT_CLASSIFICATION	0.9999998537978712	WITHOUT_CLASSIFICATION	1.462021287327311E-7	DESIGN
// wrapped iterators	WITHOUT_CLASSIFICATION	0.9999804739766749	WITHOUT_CLASSIFICATION	1.9526023325013933E-5	DESIGN
// index of current iterator in the wrapped iterators array	WITHOUT_CLASSIFICATION	0.9999674184507218	WITHOUT_CLASSIFICATION	3.258154927825804E-5	DESIGN
// the current iterator	WITHOUT_CLASSIFICATION	0.9999961702813334	WITHOUT_CLASSIFICATION	3.8297186666795615E-6	DESIGN
// the last used iterator	WITHOUT_CLASSIFICATION	0.9996585154909587	WITHOUT_CLASSIFICATION	3.414845090412581E-4	DESIGN
//it was a boolean expression	WITHOUT_CLASSIFICATION	0.9999936515704629	WITHOUT_CLASSIFICATION	6.348429537045959E-6	DESIGN
/*public static Object[] clone(Class elementClass, Object[] array) {	WITHOUT_CLASSIFICATION	0.9999153190042314	WITHOUT_CLASSIFICATION	8.468099576856704E-5	DESIGN
// call this before any Iterator method to make sure that the current Iterator // is not exhausted	WITHOUT_CLASSIFICATION	0.999600198534862	WITHOUT_CLASSIFICATION	3.9980146513794463E-4	DESIGN
//doable if needed	WITHOUT_CLASSIFICATION	0.9999891962613009	WITHOUT_CLASSIFICATION	1.0803738699051707E-5	DESIGN
// set last used iterator here, in case the user calls remove // before calling hasNext() or next() (although they shouldn't)	WITHOUT_CLASSIFICATION	0.9919008787835142	WITHOUT_CLASSIFICATION	0.00809912121648581	DESIGN
// peek ahead	WITHOUT_CLASSIFICATION	0.9999413076049853	WITHOUT_CLASSIFICATION	5.869239501463273E-5	DESIGN
// if we reach the end of the string w/o finding the // matching end, that is an exception	WITHOUT_CLASSIFICATION	0.9999428450025061	WITHOUT_CLASSIFICATION	5.715499749385768E-5	DESIGN
// we have a placeholder, spin forward till we find the end	WITHOUT_CLASSIFICATION	0.999933170314889	WITHOUT_CLASSIFICATION	6.682968511093224E-5	DESIGN
// make sure spinning forward did not put us past the end of the buffer...	WITHOUT_CLASSIFICATION	0.9996646997928712	WITHOUT_CLASSIFICATION	3.3530020712879807E-4	DESIGN
// First, try to locate this resource through the current // context classloader.	WITHOUT_CLASSIFICATION	0.9999758205234751	WITHOUT_CLASSIFICATION	2.4179476524917704E-5	DESIGN
// Next, try to locate this resource through this class's classloader	WITHOUT_CLASSIFICATION	0.9999409919230371	WITHOUT_CLASSIFICATION	5.90080769629068E-5	DESIGN
// Next, try to locate this resource through the system classloader	WITHOUT_CLASSIFICATION	0.999963834198988	WITHOUT_CLASSIFICATION	3.6165801012014195E-5	DESIGN
// Anywhere else we should look?	WITHOUT_CLASSIFICATION	0.9935506507112914	WITHOUT_CLASSIFICATION	0.006449349288708611	DESIGN
// would need an IdentitySet for this!	WITHOUT_CLASSIFICATION	0.9995010017569743	WITHOUT_CLASSIFICATION	4.989982430256573E-4	DESIGN
//Arrays.asList doesn't do primitive arrays	WITHOUT_CLASSIFICATION	0.9999520588942388	WITHOUT_CLASSIFICATION	4.7941105761157374E-5	DESIGN
//faster?	WITHOUT_CLASSIFICATION	0.9989957769671446	WITHOUT_CLASSIFICATION	0.0010042230328554773	DESIGN
// the name of a class	WITHOUT_CLASSIFICATION	0.999981853897677	WITHOUT_CLASSIFICATION	1.8146102323008992E-5	DESIGN
// Its the listener class name	WITHOUT_CLASSIFICATION	0.9999800222283279	WITHOUT_CLASSIFICATION	1.997777167210782E-5	DESIGN
//allow 9,8,7,6,5,4,3,2,1	WITHOUT_CLASSIFICATION	0.9999596021878128	WITHOUT_CLASSIFICATION	4.0397812187288886E-5	DESIGN
// default to element set if no elements() specified	WITHOUT_CLASSIFICATION	0.9999997243602246	WITHOUT_CLASSIFICATION	2.75639775455267E-7	DESIGN
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999860174297753	WITHOUT_CLASSIFICATION	1.3982570224756627E-5	DESIGN
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9993777147152333	WITHOUT_CLASSIFICATION	6.222852847667076E-4	DESIGN
// first, lets determine whether to apply cglib or javassist based instrumentation...	WITHOUT_CLASSIFICATION	0.9997963914509618	WITHOUT_CLASSIFICATION	2.0360854903823657E-4	DESIGN
// Make sure we don't override previous set values	WITHOUT_CLASSIFICATION	0.9999653722445098	WITHOUT_CLASSIFICATION	3.462775549015889E-5	DESIGN
//entirely optional!!	WITHOUT_CLASSIFICATION	0.9999910053988675	WITHOUT_CLASSIFICATION	8.994601132413806E-6	DESIGN
// Its the listener instance (or better be)	WITHOUT_CLASSIFICATION	0.9996355549234871	WITHOUT_CLASSIFICATION	3.6444507651288665E-4	DESIGN
//context.unbind(boundName);	WITHOUT_CLASSIFICATION	0.9997204658285049	WITHOUT_CLASSIFICATION	2.7953417149501785E-4	DESIGN
//readResolveObject	WITHOUT_CLASSIFICATION	0.9998729116034754	WITHOUT_CLASSIFICATION	1.27088396524683E-4	DESIGN
//cfg.setProperty("hibernate.show_sql", "true");	WITHOUT_CLASSIFICATION	0.9999192684338003	WITHOUT_CLASSIFICATION	8.07315661997233E-5	DESIGN
// Defensive, convenience methods	WITHOUT_CLASSIFICATION	0.9999675837069238	WITHOUT_CLASSIFICATION	3.241629307618469E-5	DESIGN
// Create the SessionFactory from hibernate.cfg.xml	WITHOUT_CLASSIFICATION	0.9999911414090605	WITHOUT_CLASSIFICATION	8.858590939501677E-6	DESIGN
// Make sure you log the exception, as it might be swallowed	WITHOUT_CLASSIFICATION	0.9978496158482347	WITHOUT_CLASSIFICATION	0.002150384151765308	DESIGN
// Begin unit of work	WITHOUT_CLASSIFICATION	0.9986357862934833	WITHOUT_CLASSIFICATION	0.0013642137065167713	DESIGN
// Write HTML header	WITHOUT_CLASSIFICATION	0.9995437586563133	WITHOUT_CLASSIFICATION	4.5624134368669615E-4	DESIGN
// Handle actions	WITHOUT_CLASSIFICATION	0.9999744577744394	WITHOUT_CLASSIFICATION	2.5542225560614078E-5	DESIGN
// Print page	WITHOUT_CLASSIFICATION	0.9999960834077063	WITHOUT_CLASSIFICATION	3.916592293707073E-6	DESIGN
// Write HTML footer	WITHOUT_CLASSIFICATION	0.9999296193629261	WITHOUT_CLASSIFICATION	7.038063707386244E-5	DESIGN
// End unit of work	WITHOUT_CLASSIFICATION	0.9946036980637564	WITHOUT_CLASSIFICATION	0.005396301936243701	DESIGN
// Start the session to be used for this request	WITHOUT_CLASSIFICATION	0.9999610560417289	WITHOUT_CLASSIFICATION	3.894395827120009E-5	DESIGN
// make the session available to the session factory's "current context"	WITHOUT_CLASSIFICATION	0.9999999756598626	WITHOUT_CLASSIFICATION	2.4340137382002786E-8	DESIGN
// pass control along to the rest of the processing chain	WITHOUT_CLASSIFICATION	0.9999961529070585	WITHOUT_CLASSIFICATION	3.8470929416284295E-6	DESIGN
// remove session from "current context"	WITHOUT_CLASSIFICATION	0.9999658519631508	WITHOUT_CLASSIFICATION	3.414803684920935E-5	DESIGN
// Eager fetch the collection so we can use it detached	WITHOUT_CLASSIFICATION	0.9998903183613751	WITHOUT_CLASSIFICATION	1.0968163862480128E-4	DESIGN
// If we want to handle it bidirectional and detached, we also need to load this // collection with an eager outer-join fetch, this time with Criteria and not HQL:	WITHOUT_CLASSIFICATION	0.9998618774067557	WITHOUT_CLASSIFICATION	1.381225932442975E-4	DESIGN
/*        Event anEvent = (Event) session                .createCriteria(Event.class).setFetchMode("participants", FetchMode.JOIN)                .add( Expression.eq("id", eventId) )                .uniqueResult(); // Eager fetch the colleciton so we can use it detached        */	WITHOUT_CLASSIFICATION	0.9999994692345114	WITHOUT_CLASSIFICATION	5.307654886252287E-7	DESIGN
// End of first unit of work	WITHOUT_CLASSIFICATION	0.9518285800468773	WITHOUT_CLASSIFICATION	0.048171419953122685	DESIGN
// or bidirectional safety method, setting both sides: aPerson.addToEvent(anEvent);	WITHOUT_CLASSIFICATION	0.999990985193545	WITHOUT_CLASSIFICATION	9.014806454997199E-6	DESIGN
// Begin second unit of work	WITHOUT_CLASSIFICATION	0.9969668789738564	WITHOUT_CLASSIFICATION	0.0030331210261435987	DESIGN
// Reattachment of aPerson	WITHOUT_CLASSIFICATION	0.9999911692699976	WITHOUT_CLASSIFICATION	8.830730002249528E-6	DESIGN
// The getEmailAddresses() might trigger a lazy load of the collection	WITHOUT_CLASSIFICATION	0.9998550189025978	WITHOUT_CLASSIFICATION	1.449810974022153E-4	DESIGN
// We need our tm, so get it now and avoid doing other work // if there is a problem	WITHOUT_CLASSIFICATION	0.9770143484872942	WITHOUT_CLASSIFICATION	0.022985651512705804	DESIGN
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999994857601083	WITHOUT_CLASSIFICATION	5.142398916331579E-7	DESIGN
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999994857601083	WITHOUT_CLASSIFICATION	5.142398916331579E-7	DESIGN
// JBC put a version in the node when it created as part of // some internal operation. We are always newer, but if // the JBC version is > 1 something odd has happened	WITHOUT_CLASSIFICATION	0.9999967915928292	WITHOUT_CLASSIFICATION	3.208407170847464E-6	DESIGN
//swaldman 2006-08-28: define c3p0-style configuration parameters for properties with //                     hibernate-specific overrides to detect and warn about conflicting //                     declarations	WITHOUT_CLASSIFICATION	0.9999947476936464	WITHOUT_CLASSIFICATION	5.252306353690939E-6	DESIGN
// Not null if the Isolation level has been specified in the configuration file. // Otherwise, it is left to the Driver's default value.	WITHOUT_CLASSIFICATION	0.9999999897152099	WITHOUT_CLASSIFICATION	1.0284790142988227E-8	DESIGN
// Configured outside of Hibernate (i.e. Servlet container, or Java Bean Container // already has Proxool pools running, and this provider is to just borrow one of these	WITHOUT_CLASSIFICATION	0.9924954885889681	WITHOUT_CLASSIFICATION	0.007504511411031918	DESIGN
// If you're closing down the ConnectionProvider chances are an // is not a real big deal, just warn	WITHOUT_CLASSIFICATION	0.9843059133389417	WITHOUT_CLASSIFICATION	0.015694086661058444	DESIGN
// (AS is always optional, for consistency with SQL/OQL)	WITHOUT_CLASSIFICATION	0.9999986555356906	WITHOUT_CLASSIFICATION	1.3444643094702477E-6	DESIGN
// process the "new" HQL style where aliases are assigned // _after_ the class name or path expression ie. using // the AS construction	WITHOUT_CLASSIFICATION	0.9999996117669769	WITHOUT_CLASSIFICATION	3.882330231233843E-7	DESIGN
// the loaded owner will be set to null after the collection is removed, // so capture its value as the affected owner so it is accessible to // both pre- and post- events	WITHOUT_CLASSIFICATION	0.9999999685982258	WITHOUT_CLASSIFICATION	3.140177413531588E-8	DESIGN
// is a primitive type // invokespecial	WITHOUT_CLASSIFICATION	0.9999910888032848	WITHOUT_CLASSIFICATION	8.911196715221998E-6	DESIGN
// array of primitive type // do nothing	WITHOUT_CLASSIFICATION	0.999864821995218	WITHOUT_CLASSIFICATION	1.3517800478197905E-4	DESIGN
// handle a path expression or class name that // appears at the start, in the "new" HQL // style or an alias that appears at the start // in the "old" HQL style	WITHOUT_CLASSIFICATION	0.999999975352634	WITHOUT_CLASSIFICATION	2.4647365946478787E-8	DESIGN
//handle <=, >=, !=, is not, not between, not in	WITHOUT_CLASSIFICATION	0.9984944699922851	WITHOUT_CLASSIFICATION	0.0015055300077149749	DESIGN
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.999993355215279	WITHOUT_CLASSIFICATION	6.644784721017546E-6	DESIGN
// transfer an explicitly defined entity name // handle the lazy attribute	WITHOUT_CLASSIFICATION	0.9999909610730565	WITHOUT_CLASSIFICATION	9.038926943554449E-6	DESIGN
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.999929216165994	WITHOUT_CLASSIFICATION	7.078383400609874E-5	DESIGN
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.999929216165994	WITHOUT_CLASSIFICATION	7.078383400609874E-5	DESIGN
// get meta's from // <joined-subclass>	WITHOUT_CLASSIFICATION	0.9992907997580722	WITHOUT_CLASSIFICATION	7.092002419277195E-4	DESIGN
// parameters on the property mapping should // override parameters in the typedef	WITHOUT_CLASSIFICATION	0.9999855712349323	WITHOUT_CLASSIFICATION	1.4428765067832612E-5	DESIGN
//fetch="join" overrides default laziness //fetch="join" overrides default laziness	WITHOUT_CLASSIFICATION	0.9999992357427937	WITHOUT_CLASSIFICATION	7.642572062681723E-7	DESIGN
//NOTE SPECIAL CASE: // default to join and non-lazy for the "second join" // of the many-to-many	WITHOUT_CLASSIFICATION	0.9999977147523886	WITHOUT_CLASSIFICATION	2.2852476112597738E-6	DESIGN
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999722323439849	WITHOUT_CLASSIFICATION	2.7767656015055145E-5	DESIGN
// state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999780103549546	WITHOUT_CLASSIFICATION	2.1989645045465683E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9997835908563089	WITHOUT_CLASSIFICATION	2.164091436910978E-4	DESIGN
//element //index -> id	WITHOUT_CLASSIFICATION	0.9999308423832355	WITHOUT_CLASSIFICATION	6.915761676442503E-5	DESIGN
// note that it might be better to iterate the snapshot but this is safe, // assuming the user implements equals() properly, as required by the Set // contract!	WITHOUT_CLASSIFICATION	0.9127993398414299	WITHOUT_CLASSIFICATION	0.08720066015857016	DESIGN
// collections detect changes made via their public interface and mark // themselves as dirty as a performance optimization	WITHOUT_CLASSIFICATION	0.9999877392760562	WITHOUT_CLASSIFICATION	1.2260723943691174E-5	DESIGN
// essentially, if the real session is closed allow any // method call to pass through since the real session // will complain by throwing an appropriate exception; // NOTE that allowing close() above has the same basic effect, //   but we capture that there simply to perform the unbind...	WITHOUT_CLASSIFICATION	0.9996094442443245	WITHOUT_CLASSIFICATION	3.9055575567557247E-4	DESIGN
// The default SQLExceptionConverter for all dialects is based on SQLState // since SQLErrorCode is extremely vendor-specific.  Specific Dialects // may override to return whatever is most appropriate for that vendor.	WITHOUT_CLASSIFICATION	0.9999981860238669	WITHOUT_CLASSIFICATION	1.8139761331071463E-6	DESIGN
//only necessary for postgre < 7.4 //http://anoncvs.postgresql.org/cvsweb.cgi/pgsql/doc/src/sgml/ref/create_sequence.sgml	WITHOUT_CLASSIFICATION	0.9999994719755038	WITHOUT_CLASSIFICATION	5.280244963582423E-7	DESIGN
// select topic, syntax from information_schema.help // where section like 'Function%' order by section, topic // // see also ->  http://www.h2database.com/html/functions.html	WITHOUT_CLASSIFICATION	0.9999986235194414	WITHOUT_CLASSIFICATION	1.3764805587002441E-6	DESIGN
// registerColumnType(Types.VARBINARY, "CHARACTER($l)"); // registerColumnType(Types.BLOB, "CHARACTER($l)" );  // For use prior to CP 11.0 // registerColumnType(Types.CLOB, "CHARACTER($l)" );	WITHOUT_CLASSIFICATION	0.9993807052467131	WITHOUT_CLASSIFICATION	6.192947532870168E-4	DESIGN
//the BLOB type requires a size arguement - this defaults to //bytes - no arg defaults to 1 whole byte! //other argument mods include K - kilobyte, M - megabyte, G - gigabyte. //refer to the PBdevelopers guide for more info.	WITHOUT_CLASSIFICATION	0.9979299585760664	WITHOUT_CLASSIFICATION	0.0020700414239335357	DESIGN
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.9846133021950367	WITHOUT_CLASSIFICATION	0.015386697804963339	DESIGN
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999946889118789	WITHOUT_CLASSIFICATION	5.311088121085895E-6	DESIGN
// add the comment // nest the main query in an outer select // add the rownnumber bit into the outer query select list	WITHOUT_CLASSIFICATION	0.9999887224270015	WITHOUT_CLASSIFICATION	1.1277572998551206E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9997835908563089	WITHOUT_CLASSIFICATION	2.164091436910978E-4	DESIGN
// Note: For object <-> SQL datatype mappings see: //	WITHOUT_CLASSIFICATION	0.9999999810442264	WITHOUT_CLASSIFICATION	1.8955773661224294E-8	DESIGN
// TRIM(end_keyword string-expression-1 FROM string-expression-2) // use Hibernate implementation "From" is one of the parameters they pass in position ?3 //registerFunction( "trim", new SQLFunctionTemplate(Hibernate.STRING, "trim(?1 ?2 from ?3)") );	WITHOUT_CLASSIFICATION	0.9999997549472547	WITHOUT_CLASSIFICATION	2.4505274525812407E-7	DESIGN
// Whether this dialect has an Identity clause added to the data type or a completely seperate identity // data type	WITHOUT_CLASSIFICATION	0.9990382882793082	WITHOUT_CLASSIFICATION	9.617117206917899E-4	DESIGN
// According to both the ANSI-SQL and JPA specs, trim takes a variable number of parameters between 1 and 4. // at least one paramer (trimSource) is required.  From the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If <trim specification> is omitted, BOTH is assumed. // If <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999999738834445	WITHOUT_CLASSIFICATION	2.6116555455589752E-8	DESIGN
/////////////////////////////////////////////////////////////////////// // Prepare persisters and link them up with their cache // region/access-strategy	WITHOUT_CLASSIFICATION	0.9999990495278859	WITHOUT_CLASSIFICATION	9.50472114021879E-7	DESIGN
//Named Queries:	WITHOUT_CLASSIFICATION	0.9999507395664388	WITHOUT_CLASSIFICATION	4.926043356126439E-5	DESIGN
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9794249979962925	WITHOUT_CLASSIFICATION	0.020575002003707567	DESIGN
// does not handle arrays (thats ok, cos they can't be lazy) // or newly instantiated collections, so we can do the cast	WITHOUT_CLASSIFICATION	0.9999749283443542	WITHOUT_CLASSIFICATION	2.5071655645851444E-5	DESIGN
// collection deletions are a special case since update() can add // deletions of collections not loaded by the session.	WITHOUT_CLASSIFICATION	0.9999999363592023	WITHOUT_CLASSIFICATION	6.364079776900035E-8	DESIGN
// we can do the cast since orphan-delete does not apply to: // 1. newly instantiated collections // 2. arrays (we can't track orphans for detached arrays)	WITHOUT_CLASSIFICATION	0.9999997008369603	WITHOUT_CLASSIFICATION	2.9916303964048767E-7	DESIGN
// if the natural-id is marked as non-mutable, it is not retrieved during a // normal database-snapshot operation...	WITHOUT_CLASSIFICATION	0.999976834219236	WITHOUT_CLASSIFICATION	2.3165780764044677E-5	DESIGN
// watch out for a case where old is still referenced // somewhere in the object graph! (which is a user error)	WITHOUT_CLASSIFICATION	0.9995090699525674	WITHOUT_CLASSIFICATION	4.909300474325491E-4	DESIGN
//slice, to get the columns for this component //property	WITHOUT_CLASSIFICATION	0.9825844439315036	WITHOUT_CLASSIFICATION	0.017415556068496443	DESIGN
//int result = 17; //result = 37 * result + type.hashCode(); //result = 37 * result + ( value==null ? 0 : value.hashCode() ); //return result;	WITHOUT_CLASSIFICATION	0.9998401325773725	WITHOUT_CLASSIFICATION	1.598674226274348E-4	DESIGN
// The CollectionEntry.isReached() stuff is just to detect any silly users   // who set up circular or shared references between/to collections.	WITHOUT_CLASSIFICATION	0.999431047493413	WITHOUT_CLASSIFICATION	5.68952506586917E-4	DESIGN
// detached collection wrappers that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999956207685713	WITHOUT_CLASSIFICATION	4.379231428707098E-6	DESIGN
// The unique property value represented here may or may not be // serializable, so we do an explicit check here in order to generate // a better error message	WITHOUT_CLASSIFICATION	0.9171003113091994	WITHOUT_CLASSIFICATION	0.0828996886908006	DESIGN
// if the version of a newly instantiated object is not the same // as the version seed value, use that as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999999884891188	WITHOUT_CLASSIFICATION	1.1510881255503685E-8	DESIGN
// ie. we never have to null out a reference to // an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9998196488161931	WITHOUT_CLASSIFICATION	1.803511838069597E-4	DESIGN
// ignore this row, the collection is in process of // being loaded somewhere further "up" the stack	WITHOUT_CLASSIFICATION	0.9998398542619119	WITHOUT_CLASSIFICATION	1.601457380881162E-4	DESIGN
// Entity load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // 	WITHOUT_CLASSIFICATION	0.9999137221902774	WITHOUT_CLASSIFICATION	8.627780972256004E-5	DESIGN
// should be ok performance-wise to generate new delegate instances for each // request since these are locally stack-scoped.  Besides, it makes the code // much easier to read than the old TransactionHelper stuff...	WITHOUT_CLASSIFICATION	0.9995969321612409	WITHOUT_CLASSIFICATION	4.0306783875918343E-4	DESIGN
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9999377077900206	WITHOUT_CLASSIFICATION	6.229220997944654E-5	DESIGN
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9999377077900206	WITHOUT_CLASSIFICATION	6.229220997944654E-5	DESIGN
// wrap up any new collections directly referenced by the object // or its components	WITHOUT_CLASSIFICATION	0.99999988623144	WITHOUT_CLASSIFICATION	1.1376855997402212E-7	DESIGN
// remove any snapshot, not really for memory management purposes, but // rather because it might now be stale, and there is no longer any  // EntityEntry to take precedence // This is now handled by removeEntity() //session.getPersistenceContext().removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.8562110442321632	WITHOUT_CLASSIFICATION	0.14378895576783676	DESIGN
// skip this check for composite-ids relating to dom4j entity-mode; // alternatively, we could add a check to make sure the incoming id value is // an instance of Element...	WITHOUT_CLASSIFICATION	0.8520397742428562	WITHOUT_CLASSIFICATION	0.14796022575714377	DESIGN
// upgrade the lock if necessary: //lock(result, lockMode);	WITHOUT_CLASSIFICATION	0.9999938902130469	WITHOUT_CLASSIFICATION	6.109786953165363E-6	DESIGN
// now, any collections that are initialized // inside this block do not get updated - they // are ignored until the next flush	WITHOUT_CLASSIFICATION	0.9998860320759481	WITHOUT_CLASSIFICATION	1.1396792405186075E-4	DESIGN
//we must clone embedded composite identifiers, or  //we will get back the same instance that we pass in	WITHOUT_CLASSIFICATION	0.9999835832613075	WITHOUT_CLASSIFICATION	1.64167386924927E-5	DESIGN
// Sub-insertions should occur before containing insertion so // Try to do the callback now	WITHOUT_CLASSIFICATION	0.9960250624018231	WITHOUT_CLASSIFICATION	0.0039749375981768175	DESIGN
//the entity is not associated with the session, so //try interceptor and unsaved-value	WITHOUT_CLASSIFICATION	0.9999999545503963	WITHOUT_CLASSIFICATION	4.544960379603247E-8	DESIGN
//scan the query string for class names appearing in the from clause and replace //with all persistent implementors of the class/interface, returning multiple //query strings (make sure we don't pick up a class in the select clause!)	WITHOUT_CLASSIFICATION	0.9982666748935931	WITHOUT_CLASSIFICATION	0.001733325106406896	DESIGN
// save() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999711421126273	WITHOUT_CLASSIFICATION	2.8857887372693485E-5	DESIGN
// evict() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999667542394763	WITHOUT_CLASSIFICATION	3.3245760523769027E-5	DESIGN
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.7111672647989951	WITHOUT_CLASSIFICATION	0.28883273520100483	DESIGN
//if it is an uninitialized proxy, pointing //with this session, then when it is accessed, //the underlying instance will be "contained"	WITHOUT_CLASSIFICATION	0.9999862412092284	WITHOUT_CLASSIFICATION	1.3758790771500743E-5	DESIGN
// Generate an explicit join for the root dot node.   The implied joins will be collected and passed up // to the root dot node.	WITHOUT_CLASSIFICATION	0.99943870051492	WITHOUT_CLASSIFICATION	5.612994850799322E-4	DESIGN
// A session is considered to contain an entity only if the entity has // an entry in the session's persistence context and the entry reports // that the entity has not been removed	WITHOUT_CLASSIFICATION	0.9999999993256141	WITHOUT_CLASSIFICATION	6.743860013929094E-10	DESIGN
// Does the collection referenced by this FromElement // specify an order-by attribute?  If so, attach it to // the query's order-by	WITHOUT_CLASSIFICATION	0.9999987808118728	WITHOUT_CLASSIFICATION	1.2191881271780983E-6	DESIGN
// ... and the token could be an identifer and the error is // a mismatched token error ...	WITHOUT_CLASSIFICATION	0.9998668163345504	WITHOUT_CLASSIFICATION	1.331836654495692E-4	DESIGN
// If a where clause was specified in the update/delete query, use it to limit the // returned ids here...	WITHOUT_CLASSIFICATION	0.9999944635593296	WITHOUT_CLASSIFICATION	5.536440670375152E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.9997835908563089	WITHOUT_CLASSIFICATION	2.164091436910978E-4	DESIGN
// Default implementation: // If this node has a data type, and that data type is not an association, then this is scalar.	WITHOUT_CLASSIFICATION	0.9999918287033459	WITHOUT_CLASSIFICATION	8.171296654062467E-6	DESIGN
// Resolve the LHS fully, generate implicit joins.  Pass in the property name so that the resolver can // discover foreign key (id) properties.	WITHOUT_CLASSIFICATION	0.9993001358867896	WITHOUT_CLASSIFICATION	6.998641132105408E-4	DESIGN
// If the propertyType is null and there isn't a parent, just // stop now... there was a problem resolving the node anyway.	WITHOUT_CLASSIFICATION	0.9999897923459324	WITHOUT_CLASSIFICATION	1.0207654067572497E-5	DESIGN
//We do not look for an existing join on the same path, because //it makes sense to join twice on the same collection role	WITHOUT_CLASSIFICATION	0.9999966248135213	WITHOUT_CLASSIFICATION	3.3751864787022223E-6	DESIGN
// our parent is another dot node, meaning we are being further dereferenced. // thus we need to generate a join unless the parent refers to the associated // entity's PK (because 'our' table would know the FK).	WITHOUT_CLASSIFICATION	0.9999795105741707	WITHOUT_CLASSIFICATION	2.0489425829286088E-5	DESIGN
/*public final Currency getCurrency(int col) throws HibernateException {	WITHOUT_CLASSIFICATION	0.9889371250507423	WITHOUT_CLASSIFICATION	0.011062874949257692	DESIGN
// here, we have two possibilities: // 	WITHOUT_CLASSIFICATION	0.9752646121440821	WITHOUT_CLASSIFICATION	0.024735387855917834	DESIGN
// Set the unresolved path in this node and the parent. // Set the text for the parent.	WITHOUT_CLASSIFICATION	0.9999924637127192	WITHOUT_CLASSIFICATION	7.536287280751183E-6	DESIGN
// Get the first child to be considered.  Sub-classes may do this differently in order to skip nodes that // are not select expressions (e.g. DISTINCT).	WITHOUT_CLASSIFICATION	0.9999950064356693	WITHOUT_CLASSIFICATION	4.993564330686965E-6	DESIGN
// If this is an entity and the property is the identifier property, then use getIdentifierType(). //      Note that the propertyName.equals( propertyPath ) checks whether we have a component //      key reference, where the component class property name is the same as the //      entity id property name; if the two are not equal, this is the case and //      we'd need to "fall through" to using the property mapping.	WITHOUT_CLASSIFICATION	0.9972393480258729	WITHOUT_CLASSIFICATION	0.0027606519741271486	DESIGN
// for a subquery, the alias to use depends on a few things (we // already know this is not an overall SELECT): //      1) if this FROM_ELEMENT represents a correlation to the //          outer-most query //              A) if the outer query represents a multi-table //                  persister, we need to use the given alias //                  in anticipation of one of the multi-table //                  executors being used (as this subquery will //                  actually be used in the "id select" phase //                  of that multi-table executor) //              B) otherwise, we need to use the persister's //                  table name as the column qualification //      2) otherwise (not correlated), use the given alias	WITHOUT_CLASSIFICATION	0.9999941259125726	WITHOUT_CLASSIFICATION	5.874087427277215E-6	DESIGN
// Not a collection? // Return the entity property mapping.	WITHOUT_CLASSIFICATION	0.9999939526082093	WITHOUT_CLASSIFICATION	6.047391790653786E-6	DESIGN
// collection of <many-to-any/> mappings... // used to circumvent the component-collection check below...	WITHOUT_CLASSIFICATION	0.9999902558948942	WITHOUT_CLASSIFICATION	9.744105105855987E-6	DESIGN
// Otherwise, the destination node was implied by the FROM clause and the FROM clause processor // will automatically add it in the right place.	WITHOUT_CLASSIFICATION	0.9996557266536247	WITHOUT_CLASSIFICATION	3.4427334637522795E-4	DESIGN
// If the first identifier in the path referrs to the class alias (not the class name), then this // is a correlated subselect.  If it's a correlated sub-select, use the existing table alias.  Otherwise // generate a new one.	WITHOUT_CLASSIFICATION	0.9999998586716176	WITHOUT_CLASSIFICATION	1.4132838231539795E-7	DESIGN
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999983694004182	WITHOUT_CLASSIFICATION	1.6305995818137706E-6	DESIGN
// An ident node can represent an index expression if the ident // represents a naked property ref //      *Note: this makes the assumption (which is currently the case //      in the hql-sql grammar) that the ident is first resolved //      itself (addrExpr -> resolve()).  The other option, if that //      changes, is to call resolve from here; but it is //      currently un-needed overhead.	WITHOUT_CLASSIFICATION	0.9221970733900897	WITHOUT_CLASSIFICATION	0.07780292660991028	DESIGN
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9889502494476521	WITHOUT_CLASSIFICATION	0.01104975055234794	DESIGN
// If this is an implied join in a FROM clause, then use ANSI-style joining, and set the // flag on the FromElement that indicates that it was implied in the FROM clause itself.	WITHOUT_CLASSIFICATION	0.9999797250769674	WITHOUT_CLASSIFICATION	2.02749230326028E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9997835908563089	WITHOUT_CLASSIFICATION	2.164091436910978E-4	DESIGN
// For an explicit many-to-many relationship, add a second join from the intermediate  // (many-to-many) table to the destination table.  Also, make sure that the from element's  // idea of the destination is the destination table.	WITHOUT_CLASSIFICATION	0.9999802977731703	WITHOUT_CLASSIFICATION	1.9702226829673895E-5	DESIGN
// Reset the node type, because the rest of the system is expecting FROM_FRAGMENT, all we wanted was // for the factory to create the right sub-class.  This might get reset again later on anyway to make the // SQL generation simpler.	WITHOUT_CLASSIFICATION	0.9998371072245383	WITHOUT_CLASSIFICATION	1.6289277546167432E-4	DESIGN
//explicit = true;	WITHOUT_CLASSIFICATION	0.9999982118813606	WITHOUT_CLASSIFICATION	1.7881186394065733E-6	DESIGN
//sqlResultTypeList.add( type ); // Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999936978498495	WITHOUT_CLASSIFICATION	6.302150150428536E-6	DESIGN
// If the expression list has exactly one expression, and the type of the expression is a collection // then this might be a collection function, such as index(c) or size(c).	WITHOUT_CLASSIFICATION	0.9999984981832469	WITHOUT_CLASSIFICATION	1.5018167529854457E-6	DESIGN
// Need to parse off the column qualifiers; this is assuming (which is true as of now) // that this is only used from update and delete HQL statement parsing	WITHOUT_CLASSIFICATION	0.9985683303104438	WITHOUT_CLASSIFICATION	0.0014316696895561992	DESIGN
// for regression testing against output from the old parser... // found it easiest to simply reorder the FromElements here into ascending order // in terms of injecting them into the resulting sql ast in orders relative to those // expected by the old parser; this is definitely another of those "only needed // for regression purposes".  The SyntheticAndFactory, then, simply injects them as it // encounters them.	WITHOUT_CLASSIFICATION	0.999997912524472	WITHOUT_CLASSIFICATION	2.0874755280088266E-6	DESIGN
// The uber-rule here is that we need to include  subclass joins if // the FromElement is in any way dereferenced by a property from // the subclass table; otherwise we end up with column references // qualified by a non-existent table reference in the resulting SQL...	WITHOUT_CLASSIFICATION	0.9998536451375017	WITHOUT_CLASSIFICATION	1.4635486249823924E-4	DESIGN
// classic translator does not support collection of ordinal // param metadata	WITHOUT_CLASSIFICATION	0.9999975559115466	WITHOUT_CLASSIFICATION	2.4440884532994634E-6	DESIGN
// The following variables are stacks that keep information about each subexpression // in the list of nested subexpressions we are currently processing.	WITHOUT_CLASSIFICATION	0.9999404281808807	WITHOUT_CLASSIFICATION	5.957181911946825E-5	DESIGN
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.999993355215279	WITHOUT_CLASSIFICATION	6.644784721017546E-6	DESIGN
// should not be able to reach last without maxPosition being set // unless there are no results	WITHOUT_CLASSIFICATION	0.9999999341844105	WITHOUT_CLASSIFICATION	6.58155895586117E-8	DESIGN
// we found it in the temp PC.  Should indicate we are in the midst of processing a result set // containing eager fetches via join fetch	WITHOUT_CLASSIFICATION	0.9998484378464692	WITHOUT_CLASSIFICATION	1.5156215353073063E-4	DESIGN
//do not use proxiesByKey, since not all //proxies that point to this session's //instances are in that collection!	WITHOUT_CLASSIFICATION	0.9999981323681199	WITHOUT_CLASSIFICATION	1.867631880124565E-6	DESIGN
// if there is no TM configured, we will not be able to access // the javax.transaction.Transaction object in order to // register a synch anyway.	WITHOUT_CLASSIFICATION	0.999999865092392	WITHOUT_CLASSIFICATION	1.3490760794959446E-7	DESIGN
// Since the result set cursor is always left at the first // physical row after the "last processed", we need to jump // back one position to get the key value we are interested // in skipping	WITHOUT_CLASSIFICATION	0.9999996315370429	WITHOUT_CLASSIFICATION	3.6846295718228047E-7	DESIGN
//true if this is a query and we are loading multiple instances of the same collection role //otherwise this is a CollectionInitializer and we are loading up a single collection or batch	WITHOUT_CLASSIFICATION	0.9977539553240793	WITHOUT_CLASSIFICATION	0.0022460446759208037	DESIGN
// we don't need to worry about existing version being uninitialized // because this block isn't called by a re-entrant load (re-entrant // loads _always_ have lock mode NONE)	WITHOUT_CLASSIFICATION	0.999022394896247	WITHOUT_CLASSIFICATION	9.776051037529683E-4	DESIGN
// add temp entry so that the next step is circular-reference // safe - only needed because some types don't take proper // advantage of two-phase-load (esp. components)	WITHOUT_CLASSIFICATION	0.9991566982908063	WITHOUT_CLASSIFICATION	8.433017091935916E-4	DESIGN
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999938883889923	WITHOUT_CLASSIFICATION	6.1116110077026645E-6	DESIGN
// log a message about potential connection leaks	WITHOUT_CLASSIFICATION	0.9999999244745275	WITHOUT_CLASSIFICATION	7.552547259251624E-8	DESIGN
//	WITHOUT_CLASSIFICATION	0.9997835908563089	WITHOUT_CLASSIFICATION	2.164091436910978E-4	DESIGN
// this has been shown to happen occasionally in rare cases // when using a transaction manager + transaction-timeout // where the timeout calls back through Hibernate's // registered transaction synchronization on a separate // "reaping" thread.  In cases where that reaping thread // executes through this block at the same time the main // application thread does we can get into situations where // these CMEs occur.  And though it is not "allowed" per-se, // the end result without handling it specifically is infinite // looping.  So here, we simply break the loop	WITHOUT_CLASSIFICATION	0.9999999991016439	WITHOUT_CLASSIFICATION	8.983560429919158E-10	DESIGN
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9990773413157843	WITHOUT_CLASSIFICATION	9.226586842157121E-4	DESIGN
// can't cache this stuff either (per-invocation) // we are given a map of user-alias -> lock mode // create a new map of sql-alias -> lock mode	WITHOUT_CLASSIFICATION	0.9999941818463794	WITHOUT_CLASSIFICATION	5.818153620523131E-6	DESIGN
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns //getCollectionTable().createUniqueKey( getIdentifier().getConstraintColumns() );	WITHOUT_CLASSIFICATION	0.9999999412769847	WITHOUT_CLASSIFICATION	5.8723015183900273E-8	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999746166820791	WITHOUT_CLASSIFICATION	2.5383317920999152E-5	DESIGN
//isSet = collection.isSet(); //isSorted = collection.isSorted();	WITHOUT_CLASSIFICATION	0.9999970418090903	WITHOUT_CLASSIFICATION	2.958190909737528E-6	DESIGN
//lists, arrays //sets, maps, bags	WITHOUT_CLASSIFICATION	0.9999933772031002	WITHOUT_CLASSIFICATION	6.622796899883459E-6	DESIGN
// we finish all the "removes" first to take care of possible unique // constraints and so that we can take better advantage of batching	WITHOUT_CLASSIFICATION	0.9999971462504306	WITHOUT_CLASSIFICATION	2.853749569428839E-6	DESIGN
//use a combination of foreign key columns and pk columns, since //the ordering of removal and addition is not guaranteed when //a child moves from one parent to another	WITHOUT_CLASSIFICATION	0.9997617449895562	WITHOUT_CLASSIFICATION	2.3825501044375682E-4	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999746166820791	WITHOUT_CLASSIFICATION	2.5383317920999152E-5	DESIGN
//information about properties of this class, //including inherited properties //(only really needed for updatable/insertable properties)	WITHOUT_CLASSIFICATION	0.9997879215180135	WITHOUT_CLASSIFICATION	2.120784819865633E-4	DESIGN
// all this only really needs to consider properties // of this class, not its subclasses, but since we // are reusing code used for sequential selects, we // use the subclass closure	WITHOUT_CLASSIFICATION	0.9427720457415731	WITHOUT_CLASSIFICATION	0.057227954258426944	DESIGN
// Here we render the select column list based on the properties defined as being generated. // For partial component generation, we currently just re-select the whole component // rather than trying to handle the individual generated portions.	WITHOUT_CLASSIFICATION	0.9999679232240928	WITHOUT_CLASSIFICATION	3.2076775907201386E-5	DESIGN
// this is the root (versioned) table, and we are using version-based // optimistic locking;  if we are not updating the version, also don't // check it (unless this is a "generated" version column)!	WITHOUT_CLASSIFICATION	0.998519768687479	WITHOUT_CLASSIFICATION	0.0014802313125209026	DESIGN
//optimistic-lock="all", include all updatable properties //optimistic-lock="dirty", include all properties we are updating this time	WITHOUT_CLASSIFICATION	0.999853444184241	WITHOUT_CLASSIFICATION	1.465558157589359E-4	DESIGN
// this property belongs to the table, and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.999770797957443	WITHOUT_CLASSIFICATION	2.292020425570212E-4	DESIGN
// check to see if the connection is in auto-commit  // mode (no connection means aggressive connection // release outside a JTA transaction context, so MUST // be autocommit mode)	WITHOUT_CLASSIFICATION	0.9999998608163556	WITHOUT_CLASSIFICATION	1.3918364434392795E-7	DESIGN
// need to treat this as if it where optimistic-lock="all" (dirty does *not* make sense); // first we need to locate the "loaded" state // // Note, it potentially could be a proxy, so perform the location the safe way...	WITHOUT_CLASSIFICATION	0.9987098877899074	WITHOUT_CLASSIFICATION	0.001290112210092495	DESIGN
// we *always* assume an instance with a null // identifier or no identifier property is unsaved!	WITHOUT_CLASSIFICATION	0.999996555611457	WITHOUT_CLASSIFICATION	3.444388543055713E-6	DESIGN
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.9999929238460519	WITHOUT_CLASSIFICATION	7.076153948129892E-6	DESIGN
//allow any identifier quoted with backtick //only recognizes identifiers beginning with a letter	WITHOUT_CLASSIFICATION	0.999991121154463	WITHOUT_CLASSIFICATION	8.878845537048015E-6	DESIGN
//following doesn't handle (null, not null) but unnecessary //since this would mean all rows	WITHOUT_CLASSIFICATION	0.9701218045325246	WITHOUT_CLASSIFICATION	0.029878195467475378	DESIGN
// IMPL NOTE : due to the delayed population of setters (setters cached // 	WITHOUT_CLASSIFICATION	0.9999014009715715	WITHOUT_CLASSIFICATION	9.859902842848057E-5	DESIGN
// we need to dirty check collections, since they can cause an owner // version number increment	WITHOUT_CLASSIFICATION	0.9999980274031065	WITHOUT_CLASSIFICATION	1.972596893404062E-6	DESIGN
//return the id, so we can use it to reset the proxy id //return result;	WITHOUT_CLASSIFICATION	0.9994004421809631	WITHOUT_CLASSIFICATION	5.995578190368749E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9997835908563089	WITHOUT_CLASSIFICATION	2.164091436910978E-4	DESIGN
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9978772042045606	WITHOUT_CLASSIFICATION	0.002122795795439397	DESIGN
// We now have the value of the property-ref we reference.  However, // we need to dig a little deeper, as that property might also be // an entity type, in which case we need to resolve its identitifier	WITHOUT_CLASSIFICATION	0.9984811209187835	WITHOUT_CLASSIFICATION	0.0015188790812165002	DESIGN
// Retrieve the value of the designated column in the current row of this // ResultSet object as a java.io.Reader object	WITHOUT_CLASSIFICATION	0.9999995771501095	WITHOUT_CLASSIFICATION	4.228498904962583E-7	DESIGN
//not absolutely necessary, but helps for some //equals()/hashCode() implementations	WITHOUT_CLASSIFICATION	0.9999924735424449	WITHOUT_CLASSIFICATION	7.526457555107379E-6	DESIGN
//this should be a call to resolve(), not resolveIdentifier(),  //'cos it might be a property-ref, and we did not cache the //referenced value	WITHOUT_CLASSIFICATION	0.988655266200676	DESIGN	0.011344733799323927	WITHOUT_CLASSIFICATION
// If we have <tt>not-found="ignore"</tt> association mapped to a // formula, we always need to dirty check it, so we can update the // second-level cache	WITHOUT_CLASSIFICATION	0.9999709838015147	WITHOUT_CLASSIFICATION	2.901619848528051E-5	DESIGN
// can't just return null here, since that would // cause an owning component to become null	WITHOUT_CLASSIFICATION	0.9999595079278647	WITHOUT_CLASSIFICATION	4.049207213522099E-5	DESIGN
//for arrays, replaceElements() may return a different reference, since //the array length might not match	WITHOUT_CLASSIFICATION	0.9998092336887325	WITHOUT_CLASSIFICATION	1.9076631126744745E-4	DESIGN
// actual cache of the entries.  soft references are used for both the keys and the // values here since the values pertaining to the MRU entries are kept in a // seperate hard reference cache (to avoid their enqueuement/garbage-collection).	WITHOUT_CLASSIFICATION	0.9999999485837169	WITHOUT_CLASSIFICATION	5.1416283234551235E-8	DESIGN
// as soon as we encounter our first letter, return the substring // from that position	WITHOUT_CLASSIFICATION	0.9999971583985531	WITHOUT_CLASSIFICATION	2.8416014470131293E-6	DESIGN
// Note : expected in the syntax: //      type=listenerClass //          ({sep}type=listenerClass)* // where {sep} is any whitespace or comma	WITHOUT_CLASSIFICATION	0.9999990552465884	WITHOUT_CLASSIFICATION	9.447534116521412E-7	DESIGN
// isTransactionCallbackRegistered denotes whether any Hibernate // Transaction has registered as a callback against this // JDBCContext; only one such callback is allowed.  Directly // serializing this value causes problems with JDBCTransaction, // or really any Transaction impl where the callback is local // to the Transaction instance itself, since that Transaction // is not serialized along with the JDBCContext.  Thus we // handle that fact here explicitly...	WITHOUT_CLASSIFICATION	0.9997548843931379	WITHOUT_CLASSIFICATION	2.4511560686207124E-4	DESIGN
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999996885126775	WITHOUT_CLASSIFICATION	3.114873225185712E-7	DESIGN
// We call getKeyFromResultSet() here so that we can know the // key value upon which to perform the breaking logic.  However, // it is also then called from getRowFromResultSet() which is certainly // not the most efficient.  But the call here is needed, and there // currently is no other way without refactoring of the doQuery()/getRowFromResultSet() // methods	WITHOUT_CLASSIFICATION	0.9999774886416871	WITHOUT_CLASSIFICATION	2.2511358312873585E-5	DESIGN
// This check is needed since processing leaves the cursor // after the last physical row for the current logical row; // thus if we are after the last physical row, this might be // caused by either: //      1) scrolling to the last logical row //      2) scrolling past the last logical row // In the latter scenario, the previous logical row // really is the last logical row. // // In all other cases, we should process back two // logical records (the current logic row, plus the // previous logical row).	WITHOUT_CLASSIFICATION	0.6810288221446756	DESIGN	0.31897117785532436	WITHOUT_CLASSIFICATION
// and perform the load	WITHOUT_CLASSIFICATION	0.9999961597557702	WITHOUT_CLASSIFICATION	3.840244229805583E-6	DESIGN
//important: reuse the same event instances for performance!	WITHOUT_CLASSIFICATION	0.9999797475969215	WITHOUT_CLASSIFICATION	2.025240307850271E-5	DESIGN
//this is a query and we are loading multiple instances of the same collection role	WITHOUT_CLASSIFICATION	0.9951069109226203	WITHOUT_CLASSIFICATION	0.0048930890773796415	DESIGN
// we found a collection element in the result set	WITHOUT_CLASSIFICATION	0.9999798400099034	WITHOUT_CLASSIFICATION	2.0159990096710355E-5	DESIGN
// we did not find a collection element in the result set, so we // ensure that a collection is created with the owner's identifier, // since what we have is an empty collection	WITHOUT_CLASSIFICATION	0.9999993284794793	WITHOUT_CLASSIFICATION	6.715205207148657E-7	DESIGN
// this is a collection initializer, so we must create a collection // for each of the passed-in keys, to account for the possibility // that the collection is empty and has no rows in the result set	WITHOUT_CLASSIFICATION	0.9631750225384509	WITHOUT_CLASSIFICATION	0.03682497746154908	DESIGN
// grab its state from the ResultSet and keep it in the Session // (but don't yet initialize the object itself) // note that we acquire LockMode.READ even if it was not requested	WITHOUT_CLASSIFICATION	0.9999702636568752	WITHOUT_CLASSIFICATION	2.9736343124743443E-5	DESIGN
// a many-to-many; // decrement currentDepth here to allow join across the association table // without exceeding MAX_FETCH_DEPTH (i.e. the "currentDepth - 1" bit)	WITHOUT_CLASSIFICATION	0.9999983698162151	WITHOUT_CLASSIFICATION	1.6301837847981777E-6	DESIGN
// if not a composite key, use "foo in (?, ?, ?)" for batching // if no batch, and not a composite key, use "foo = ?"	WITHOUT_CLASSIFICATION	0.9999709154225926	WITHOUT_CLASSIFICATION	2.908457740743853E-5	DESIGN
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9994094144419791	WITHOUT_CLASSIFICATION	5.905855580208952E-4	DESIGN
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9999972635240753	WITHOUT_CLASSIFICATION	2.7364759247129293E-6	DESIGN
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9999972635240753	WITHOUT_CLASSIFICATION	2.7364759247129293E-6	DESIGN
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.9999249274125366	WITHOUT_CLASSIFICATION	7.507258746340407E-5	DESIGN
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999990687540239	WITHOUT_CLASSIFICATION	9.312459760970334E-7	DESIGN
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9996935519314952	WITHOUT_CLASSIFICATION	3.0644806850481046E-4	DESIGN
/**	WITHOUT_CLASSIFICATION	0.998151460456067	WITHOUT_CLASSIFICATION	0.0018485395439330262	DESIGN
// ignore	WITHOUT_CLASSIFICATION	0.9999895196549758	WITHOUT_CLASSIFICATION	1.0480345024145823E-5	DESIGN
// ignore	WITHOUT_CLASSIFICATION	0.9999895196549758	WITHOUT_CLASSIFICATION	1.0480345024145823E-5	DESIGN
//        }	WITHOUT_CLASSIFICATION	0.9999406095441725	WITHOUT_CLASSIFICATION	5.9390455827470745E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9997835908563089	WITHOUT_CLASSIFICATION	2.164091436910978E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9997835908563089	WITHOUT_CLASSIFICATION	2.164091436910978E-4	DESIGN
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.999727315491154	WITHOUT_CLASSIFICATION	2.726845088459918E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9997835908563089	WITHOUT_CLASSIFICATION	2.164091436910978E-4	DESIGN
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.9999851269320092	WITHOUT_CLASSIFICATION	1.4873067990818917E-5	DESIGN
// at this point we have (drivingSqlAlias) the SQL alias of the driving table // corresponding to the given user alias.  However, the driving table is not // (necessarily) the table against which we want to apply locks.  Mainly, // the exception case here is joined-subclass hierarchies where we instead // want to apply the lock against the root table (for all other strategies, // it just happens that driving and root are the same).	WITHOUT_CLASSIFICATION	0.9999973183848023	WITHOUT_CLASSIFICATION	2.6816151977456743E-6	DESIGN
// the column doesnt exist at all.	WITHOUT_CLASSIFICATION	0.9999928274146588	WITHOUT_CLASSIFICATION	7.172585341233955E-6	DESIGN
// we have a mapped identifier property and the root of // the incoming property path matched that identifier // property	WITHOUT_CLASSIFICATION	0.9999972979002089	WITHOUT_CLASSIFICATION	2.7020997910883855E-6	DESIGN
// we have an embedded composite identifier	WITHOUT_CLASSIFICATION	0.9999914082749405	WITHOUT_CLASSIFICATION	8.591725059557508E-6	DESIGN
// both many-to-one and one-to-one are represented as a // Property.  EntityPersister is relying on this value to // determine "lazy fetch groups" in terms of field-level // interception.  So we need to make sure that we return // true here for the case of many-to-one and one-to-one // with lazy="no-proxy" // // * impl note - lazy="no-proxy" currently forces both // lazy and unwrap to be set to true.  The other case we // are extremely interested in here is that of lazy="proxy" // where lazy is set to true, but unwrap is set to false. // thus we use both here under the assumption that this // return is really only ever used during persister // construction to determine the lazy property/field fetch // groupings.  If that assertion changes then this check // needs to change as well.  Partially, this is an issue with // the overloading of the term "lazy" here...	WITHOUT_CLASSIFICATION	0.9999956950071288	WITHOUT_CLASSIFICATION	4.304992871228822E-6	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999559027338246	WITHOUT_CLASSIFICATION	4.4097266175319214E-5	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999559027338246	WITHOUT_CLASSIFICATION	4.4097266175319214E-5	DESIGN
/*rootTableName = persistentClass.getRootTable().getQualifiedName( 	WITHOUT_CLASSIFICATION	0.9999856924177981	WITHOUT_CLASSIFICATION	1.4307582201750586E-5	DESIGN
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.999827625245005	WITHOUT_CLASSIFICATION	1.723747549948889E-4	DESIGN
// Custom sql	WITHOUT_CLASSIFICATION	0.9999682863563883	WITHOUT_CLASSIFICATION	3.171364361160349E-5	DESIGN
/*protected void initPropertyPaths(	WITHOUT_CLASSIFICATION	0.9911240449131246	WITHOUT_CLASSIFICATION	0.008875955086875473	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999349667012849	WITHOUT_CLASSIFICATION	6.503329871514451E-5	DESIGN
//Custom SQL (would be better if these were private)	WITHOUT_CLASSIFICATION	0.9151089555551396	WITHOUT_CLASSIFICATION	0.08489104444486048	DESIGN
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9990158009986356	WITHOUT_CLASSIFICATION	9.841990013643828E-4	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999349667012849	WITHOUT_CLASSIFICATION	6.503329871514451E-5	DESIGN
// aliases for identifier ( alias.id ); skip if the entity defines a non-id property named 'id'	WITHOUT_CLASSIFICATION	0.9999947183444754	WITHOUT_CLASSIFICATION	5.281655524635696E-6	DESIGN
//decide which ResultSet to get the property value from:	WITHOUT_CLASSIFICATION	0.9817551107485721	WITHOUT_CLASSIFICATION	0.01824488925142781	DESIGN
//note: it is conceptually possible that a UserType could map null to //	WITHOUT_CLASSIFICATION	0.9801212204302434	WITHOUT_CLASSIFICATION	0.019878779569756602	DESIGN
// the contract of EntityTuplizer.determineConcreteSubclassEntityName says that returning null // is an indication that the specified entity-name (this.getEntityName) should be used.	WITHOUT_CLASSIFICATION	0.9999064056721512	WITHOUT_CLASSIFICATION	9.359432784884295E-5	DESIGN
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.9999929238460519	WITHOUT_CLASSIFICATION	7.076153948129892E-6	DESIGN
// cache these since they are stateless // this one could even be static...	WITHOUT_CLASSIFICATION	0.9999932029960727	WITHOUT_CLASSIFICATION	6.797003927368874E-6	DESIGN
//"as" is not in KEYWORDS	WITHOUT_CLASSIFICATION	0.9995143896448508	WITHOUT_CLASSIFICATION	4.856103551491286E-4	DESIGN
// --Commented out by Inspection (12/4/04 9:10 AM): public abstract void addCondition(String alias, String[] columns, String condition);	WITHOUT_CLASSIFICATION	0.9999900866987018	WITHOUT_CLASSIFICATION	9.913301298137425E-6	DESIGN
//use the id column alias	WITHOUT_CLASSIFICATION	0.9999209733965639	WITHOUT_CLASSIFICATION	7.902660343601409E-5	DESIGN
//private List aliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999968281522637	WITHOUT_CLASSIFICATION	3.1718477363402047E-6	DESIGN
//columns.add(columnName); //aliases.add(tableAlias);	WITHOUT_CLASSIFICATION	0.9999844467387029	WITHOUT_CLASSIFICATION	1.5553261297100922E-5	DESIGN
//where fragment must be empty!	WITHOUT_CLASSIFICATION	0.9993641770697547	WITHOUT_CLASSIFICATION	6.358229302453295E-4	DESIGN
// revert to traditional hibernate behavior of setting initialPoolSize to minPoolSize // unless otherwise specified with a c3p0.*-style parameter.	WITHOUT_CLASSIFICATION	0.9999998452297283	WITHOUT_CLASSIFICATION	1.547702716730997E-7	DESIGN
//arbitrary on clause ignored!!	WITHOUT_CLASSIFICATION	0.9999812897090496	WITHOUT_CLASSIFICATION	1.8710290950397366E-5	DESIGN
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.999987900047173	WITHOUT_CLASSIFICATION	1.2099952827046036E-5	DESIGN
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.999987900047173	WITHOUT_CLASSIFICATION	1.2099952827046036E-5	DESIGN
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9997447741304892	WITHOUT_CLASSIFICATION	2.5522586951072474E-4	DESIGN
// Essentially: // 1) If we have a local (Hibernate) transaction in progress //      and it already has the UserTransaction cached, use that //      UserTransaction to determine the status. // 2) If a transaction manager has been located, use //      that transaction manager to determine the status. // 3) Finally, as the last resort, try to lookup the //      UserTransaction via JNDI and use that to determine the //      status.	WITHOUT_CLASSIFICATION	0.9999449065731463	WITHOUT_CLASSIFICATION	5.509342685362616E-5	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.9998081652754702	WITHOUT_CLASSIFICATION	1.9183472452976072E-4	DESIGN
//swallow it (the transaction _was_ successful or successfully rolled back)	WITHOUT_CLASSIFICATION	0.9999743849887857	WITHOUT_CLASSIFICATION	2.5615011214365765E-5	DESIGN
// ignore it	WITHOUT_CLASSIFICATION	0.9999978269128299	WITHOUT_CLASSIFICATION	2.1730871701319146E-6	DESIGN
// we need to dirty check many-to-ones with not-found="ignore" in order  // to update the cache (not the database), since in this case a null // entity reference can lose information	WITHOUT_CLASSIFICATION	0.9999894831121078	WITHOUT_CLASSIFICATION	1.051688789218724E-5	DESIGN
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999871212004855	WITHOUT_CLASSIFICATION	1.2878799514584022E-5	DESIGN
// Regions can get instantiated in the course of normal work (e.g. // a named query region will be created the first time the query is // executed), so suspend any ongoing tx	WITHOUT_CLASSIFICATION	0.9999998771722447	WITHOUT_CLASSIFICATION	1.228277552461468E-7	DESIGN
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999632090223625	WITHOUT_CLASSIFICATION	3.6790977637642795E-5	DESIGN
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999969687476741	WITHOUT_CLASSIFICATION	3.0312523259101414E-6	DESIGN
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999096150449347	WITHOUT_CLASSIFICATION	9.038495506534557E-5	DESIGN
// NOTE : this is being used from the process of shutting down a // SessionFactory. Specific things to consider: // (1) this clearing of the region should not propagate to // other nodes on the cluster (if any); this is the // cache-mode-local option bit... // (2) really just trying a best effort to cleanup after // ourselves; lock failures, etc are not critical here; // this is the fail-silently option bit...	WITHOUT_CLASSIFICATION	0.8975673063288361	WITHOUT_CLASSIFICATION	0.1024326936711639	DESIGN
// need to extract the component values and check for subtype replacements...	WITHOUT_CLASSIFICATION	0.9996612413257895	WITHOUT_CLASSIFICATION	3.387586742104209E-4	DESIGN
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999403778963731	WITHOUT_CLASSIFICATION	5.96221036269227E-5	DESIGN
// for now, just "re-flatten" the metamodel since this is temporary stuff anyway (HHH-1907)	WITHOUT_CLASSIFICATION	0.9844277991798855	WITHOUT_CLASSIFICATION	0.015572200820114545	DESIGN
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9997756543405478	WITHOUT_CLASSIFICATION	2.2434565945226402E-4	DESIGN
//This solution would allow us to eliminate the owner arg to disassemble(), but //what if the collection was null, and then later had elements added? seems unsafe //session.getPersistenceContext().getCollectionEntry( (PersistentCollection) value ).getKey();	WITHOUT_CLASSIFICATION	0.9999786792049623	WITHOUT_CLASSIFICATION	2.1320795037582988E-5	DESIGN
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999990636041427	WITHOUT_CLASSIFICATION	9.363958572296924E-7	DESIGN
// some collections are not lazy:	WITHOUT_CLASSIFICATION	0.9999449614781699	WITHOUT_CLASSIFICATION	5.5038521830016485E-5	DESIGN
// Here we don't want to suspend the tx. If we do: // 1) We might be caching query results that reflect uncommitted // changes. No tx == no WL on cache node, so other threads // can prematurely see those query results // 2) No tx == immediate replication. More overhead, plus we // spread issue #1 above around the cluster	WITHOUT_CLASSIFICATION	0.9989211227334386	WITHOUT_CLASSIFICATION	0.0010788772665614938	DESIGN
// return the (fully resolved) identifier value, but do not resolve // to the actual referenced entity instance // NOTE: the owner of the association is not really the owner of the id!	WITHOUT_CLASSIFICATION	0.9999810247523685	WITHOUT_CLASSIFICATION	1.89752476314752E-5	DESIGN
// Add a zero (or quite low) timeout option so we don't block. // Ignore any TimeoutException. Basically we forego caching the // query result in order to avoid blocking. // Reads are done with suspended tx, so they should not hold the // lock for long.  Not caching the query result is OK, since // any subsequent read will just see the old result with its // out-of-date timestamp; that result will be discarded and the // db query performed again.	WITHOUT_CLASSIFICATION	0.9999969996260063	WITHOUT_CLASSIFICATION	3.0003739937557564E-6	DESIGN
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.6162536534426084	WITHOUT_CLASSIFICATION	0.38374634655739176	DESIGN
// We have the JBCWriteMutex, so no other *local* thread will  // be trying to write this key.  // It's possible here some remote thread has come in and // changed the values again, but since we are reading the // values to write to JBC right now, we know we are writing // the latest values; i.e. we don't assume that what we cached // in entry.update() above is what we should write to JBC *now*. // Our write could be redundant, i.e. we are writing what // some remote thread just came in an wrote.  There is a chance  // that yet another remote thread will update us, and we'll then // overwrite that later data in JBC.  But, all remote nodes will // ignore that change in their localCache; the only place it  // will live will be in JBC, where it can only effect the  // initial state transfer values on newly joined nodes  // (i.e. populateLocalCache()).	WITHOUT_CLASSIFICATION	0.9584537238191022	WITHOUT_CLASSIFICATION	0.04154627618089774	DESIGN
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.999946042637162	WITHOUT_CLASSIFICATION	5.395736283803214E-5	DESIGN
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.999946042637162	WITHOUT_CLASSIFICATION	5.395736283803214E-5	DESIGN
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9999972554783805	WITHOUT_CLASSIFICATION	2.7445216195034865E-6	DESIGN
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.999999517754368	WITHOUT_CLASSIFICATION	4.822456320511221E-7	DESIGN
// we need to obtain the lock before any actions are // executed, since this may be an inverse="true" // bidirectional association and it is one of the // earlier entity actions which actually updates // the database (this action is resposible for // second-level cache invalidation only)	WITHOUT_CLASSIFICATION	0.9999999908224615	WITHOUT_CLASSIFICATION	9.177538427947336E-9	DESIGN
//postDelete: // After actually deleting a row, record the fact that the instance no longer  // exists on the database (needed for identity-column key generation), and // remove it from the session cache	WITHOUT_CLASSIFICATION	0.9999985120897009	WITHOUT_CLASSIFICATION	1.4879102990885261E-6	DESIGN
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999911866733564	WITHOUT_CLASSIFICATION	8.813326643567616E-6	DESIGN
// todo : what else to do here?	DESIGN	0.9107455349194766	WITHOUT_CLASSIFICATION	0.0892544650805234	DESIGN
//put() has nowait semantics, is this really appropriate? //note that it needs to be async replication, never local or sync	DESIGN	0.7526839895081208	WITHOUT_CLASSIFICATION	0.24731601049187926	DESIGN
// 'hibernate.temp.use_jdbc_metadata_defaults' is a temporary magic value. // The need for it is intended to be alleviated with future developement, thus it is // not defined as an Environment constant... // // it is used to control whether we should consult the JDBC metadata to determine // certain Settings default values; it is useful to *not* do this when the database // may not be available (mainly in tools usage).	DESIGN	0.9137859943859702	WITHOUT_CLASSIFICATION	0.08621400561402978	DESIGN
//TODO: get SQL rendering out of this package!	DESIGN	0.6021992359715107	WITHOUT_CLASSIFICATION	0.3978007640284893	DESIGN
//TODO: get SQL rendering out of this package!	DESIGN	0.6021992359715107	WITHOUT_CLASSIFICATION	0.3978007640284893	DESIGN
// todo : eventually merge this with TreeCache and just add optional opt-lock support there.	DESIGN	0.9999532995821699	WITHOUT_CLASSIFICATION	4.670041783015525E-5	DESIGN
// can happen because of the multiple ways Cache.remove() // can be invoked :(	DESIGN	0.9820190958654829	WITHOUT_CLASSIFICATION	0.017980904134517098	DESIGN
// work around the "feature" where tree cache is validating the // inserted node during the next transaction.  no idea...	DESIGN	0.9999940557234658	WITHOUT_CLASSIFICATION	5.944276534243234E-6	DESIGN
/**     * FIXME Per the RegionFactory class Javadoc, this constructor version     * should not be necessary.     *      * @param props The configuration properties     */	DESIGN	0.9805791461741109	WITHOUT_CLASSIFICATION	0.01942085382588908	DESIGN
/**     * FIXME Per the RegionFactory class Javadoc, this constructor version     * should not be necessary.     *      * @param props The configuration properties     */	DESIGN	0.9805791461741109	WITHOUT_CLASSIFICATION	0.01942085382588908	DESIGN
// FIXME Hacky workaround to JBCACHE-1202	DESIGN	0.9794394296544219	DESIGN	0.020560570345578018	WITHOUT_CLASSIFICATION
// FIXME Hacky workaround to JBCACHE-1202	DESIGN	0.9794394296544219	DESIGN	0.020560570345578018	WITHOUT_CLASSIFICATION
// TODO: I considered validating TS cache config here, // but decided to defer unti getTimestampsCacheInstance() in case the  // cache is never actually used	DESIGN	0.981648829864838	DESIGN	0.01835117013516202	WITHOUT_CLASSIFICATION
// TODO Is this a valid operation on a timestamps cache?	DESIGN	0.9337913271314072	DESIGN	0.06620867286859275	WITHOUT_CLASSIFICATION
// TODO Is this a valid operation on a timestamps cache?	DESIGN	0.9337913271314072	DESIGN	0.06620867286859275	WITHOUT_CLASSIFICATION
// TODO Why not use the timestamp in a DataVersion?	DESIGN	0.9578694384635342	DESIGN	0.04213056153646567	WITHOUT_CLASSIFICATION
// can happen because of the multiple ways Cache.remove() // can be invoked :(	DESIGN	0.9820190958654829	WITHOUT_CLASSIFICATION	0.017980904134517098	DESIGN
// work around the "feature" where tree cache is validating the // inserted node during the next transaction. no idea...	DESIGN	0.999995944941908	WITHOUT_CLASSIFICATION	4.0550580919857296E-6	DESIGN
//swaldman 2004-02-07: modify to allow null values to signify fall through to c3p0 PoolConfig defaults	DESIGN	0.9999973836137047	WITHOUT_CLASSIFICATION	2.61638629528432E-6	DESIGN
// turn hibernate.c3p0.* into c3p0.*, so c3p0 // gets a chance to see all hibernate.c3p0.*	DESIGN	0.9999691065926132	WITHOUT_CLASSIFICATION	3.08934073868345E-5	DESIGN
//TODO: this bit actually has to be called after all cascades! //      but since identity insert is called *synchronously*, //      instead of asynchronously as other actions, it isn't	DESIGN	0.600634407039474	DESIGN	0.39936559296052593	WITHOUT_CLASSIFICATION
//TODO: reenable if we also fix the above todo	DESIGN	0.8561195288705229	DESIGN	0.14388047112947708	WITHOUT_CLASSIFICATION
//TODO: inefficient if that cache is just going to ignore the updated state!	DESIGN	0.9971615698074552	WITHOUT_CLASSIFICATION	0.002838430192544795	DESIGN
// we may be screwed here since the collection action is about to execute // and we do not know the final owner key value	DESIGN	0.9999999546397385	WITHOUT_CLASSIFICATION	4.536026155989819E-8	DESIGN
/** Create an action that will evict collection and entity regions based on queryspaces (table names).	DESIGN	0.9999994316939119	WITHOUT_CLASSIFICATION	5.683060880920339E-7	DESIGN
// todo : what else to do here?	DESIGN	0.9107455349194766	WITHOUT_CLASSIFICATION	0.0892544650805234	DESIGN
// todo : modify the class definition if not already transformed...	DESIGN	0.9999862614014344	WITHOUT_CLASSIFICATION	1.373859856558717E-5	DESIGN
// todo : what else to do here?	DESIGN	0.9107455349194766	WITHOUT_CLASSIFICATION	0.0892544650805234	DESIGN
// this is called by SessionFactory irregardless; we just disregard here; // could also add a check to SessionFactory to only conditionally call start	DESIGN	0.7971445895642975	WITHOUT_CLASSIFICATION	0.20285541043570257	DESIGN
// this is called by SessionFactory irregardless; we just disregard here; // could also add a check to SessionFactory to only conditionally call stop	DESIGN	0.5199854236872196	WITHOUT_CLASSIFICATION	0.48001457631278055	DESIGN
//TODO: to handle concurrent writes correctly, this should return a Lock to the client	DESIGN	0.8607304974680874	DESIGN	0.13926950253191256	WITHOUT_CLASSIFICATION
//put() has nowait semantics, is this really appropriate? //note that it needs to be async replication, never local or sync	DESIGN	0.7526839895081208	WITHOUT_CLASSIFICATION	0.24731601049187926	DESIGN
//TODO: to handle concurrent writes correctly, the client should pass in a Lock	DESIGN	0.5396717882312673	DESIGN	0.4603282117687327	WITHOUT_CLASSIFICATION
//TODO: assumes all collections disassemble to an array!	DESIGN	0.9890176730851508	WITHOUT_CLASSIFICATION	0.01098232691484921	DESIGN
//TODO: reuse the PreLoadEvent	DESIGN	0.9587215706150473	WITHOUT_CLASSIFICATION	0.04127842938495282	DESIGN
// todo: this was added to support initializing an entity's EntityEntry snapshot during reattach; // this should be refactored to instead expose a method to assemble a EntityEntry based on this // state for return.	DESIGN	0.9453229312981271	WITHOUT_CLASSIFICATION	0.05467706870187294	DESIGN
// todo : what is the implication of this?	DESIGN	0.9709390925411214	WITHOUT_CLASSIFICATION	0.02906090745887861	DESIGN
// use COUNT as the default.  This mimics the old behavior, although // NONE might be a better option moving forward in the case of callable	DESIGN	0.9921496594808498	WITHOUT_CLASSIFICATION	0.007850340519150211	DESIGN
/* TODO: joinKeyColumnName & foreignKeyColumnName should be called either here or at a	DESIGN	0.6804054635303329	WITHOUT_CLASSIFICATION	0.319594536469667	DESIGN
//TODO: suck this into initLaziness!	DESIGN	0.906862576836131	DESIGN	0.09313742316386907	WITHOUT_CLASSIFICATION
// we have to set up the table later!! yuck	DESIGN	0.9999004285528376	WITHOUT_CLASSIFICATION	9.957144716241659E-5	DESIGN
//TODO: better to degrade to lazy="false" if uninstrumented	DESIGN	0.6483023590846223	DESIGN	0.3516976409153777	WITHOUT_CLASSIFICATION
// todo : again, how *should* this work for non-pojo entities?	DESIGN	0.6335347976557567	WITHOUT_CLASSIFICATION	0.36646520234424335	DESIGN
// TODO: this is a bit of copy/paste from IndexedCollection.createPrimaryKey()	DESIGN	0.9926252223363656	DESIGN	0.007374777663634405	WITHOUT_CLASSIFICATION
// This inner class implements a case statement....perhaps im being a bit over-clever here	DESIGN	0.9608895041810281	WITHOUT_CLASSIFICATION	0.03911049581897193	DESIGN
//TODO: bad implementation, cos it depends upon ordering of mapping doc //      fixing this requires that Collection/PersistentClass gain access //      to the Mappings reference from Configuration (or the filterDefinitions //      map directly) sometime during Configuration.buildSessionFactory //      (after all the types/filter-defs are known and before building //      persisters).	DESIGN	0.9930733448752683	WITHOUT_CLASSIFICATION	0.0069266551247316325	DESIGN
//use of a stringbuffer to workaround a JDK bug	DESIGN	0.6909301014806358	DESIGN	0.3090698985193642	WITHOUT_CLASSIFICATION
// hack/workaround as sqlquery impl depend on having a key.	DESIGN	0.9092569911776279	DESIGN	0.09074300882237214	WITHOUT_CLASSIFICATION
//FIXME: get the PersistentClass	DESIGN	0.9998671511317133	WITHOUT_CLASSIFICATION	1.3284886828659006E-4	DESIGN
//FIXME: get the PersistentClass	DESIGN	0.9998671511317133	WITHOUT_CLASSIFICATION	1.3284886828659006E-4	DESIGN
//Icky workaround for MySQL bug:	DESIGN	0.9091140261406571	DESIGN	0.09088597385934298	WITHOUT_CLASSIFICATION
//TODO: Somehow add the newly created foreign keys to the internal collection	DESIGN	0.9996434370875843	WITHOUT_CLASSIFICATION	3.565629124156812E-4	DESIGN
//TODO possibly relax that	DESIGN	0.8176672261071063	WITHOUT_CLASSIFICATION	0.1823327738928937	DESIGN
//TODO possibly relax that	DESIGN	0.8176672261071063	WITHOUT_CLASSIFICATION	0.1823327738928937	DESIGN
//TODO possibly relax that	DESIGN	0.8176672261071063	WITHOUT_CLASSIFICATION	0.1823327738928937	DESIGN
//use of a stringbuffer to workaround a JDK bug	DESIGN	0.6909301014806358	DESIGN	0.3090698985193642	WITHOUT_CLASSIFICATION
//use a degenerated strategy for backward compatibility	DESIGN	0.9997716582260548	WITHOUT_CLASSIFICATION	2.2834177394514686E-4	DESIGN
// Sets can be just a view of a part of another collection. // do we need to copy it to be sure it won't be changing // underneath us? // ie. this.set.addAll(set);	DESIGN	0.9996596410711134	WITHOUT_CLASSIFICATION	3.40358928886623E-4	DESIGN
//note that i parameter is now unused (delete it?)	DESIGN	0.994797850960457	WITHOUT_CLASSIFICATION	0.0052021490395429155	DESIGN
//just to help out during the load (ugly, i know)	DESIGN	0.9859880052307912	WITHOUT_CLASSIFICATION	0.014011994769208651	DESIGN
// TODO : safe to interpret "map.remove(key) == null" as non-dirty?	DESIGN	0.5482238836428724	WITHOUT_CLASSIFICATION	0.45177611635712767	DESIGN
// yick!  need this for proper serialization/deserialization handling...	DESIGN	0.9872019918027858	WITHOUT_CLASSIFICATION	0.01279800819721419	DESIGN
//TODO: get SQL rendering out of this package!	DESIGN	0.6021992359715107	WITHOUT_CLASSIFICATION	0.3978007640284893	DESIGN
//TODO: get SQL rendering out of this package!	DESIGN	0.6021992359715107	WITHOUT_CLASSIFICATION	0.3978007640284893	DESIGN
//yuck!	DESIGN	0.9988738249980504	WITHOUT_CLASSIFICATION	0.0011261750019495506	DESIGN
//TODO: get SQL rendering out of this package!	DESIGN	0.6021992359715107	WITHOUT_CLASSIFICATION	0.3978007640284893	DESIGN
// TODO : not sure this is correct, could not find docs on how to do this.	DESIGN	0.9998101384272091	DESIGN	1.898615727908911E-4	WITHOUT_CLASSIFICATION
//HSQL has no Blob/Clob support .... but just put these here for now!	DESIGN	0.9996493768514866	WITHOUT_CLASSIFICATION	3.50623148513509E-4	DESIGN
// does this need holdlock also? : return tableName + " with (updlock, rowlock, holdlock)";	DESIGN	0.9938837078743263	WITHOUT_CLASSIFICATION	0.006116292125673705	DESIGN
// sql-server, at least needed this dropped after use; strange!	DESIGN	0.9999277151522799	WITHOUT_CLASSIFICATION	7.228484772014933E-5	DESIGN
// todo : is there really any reason to kkeep trying if this fails once?	DESIGN	0.9984150702253873	WITHOUT_CLASSIFICATION	0.0015849297746125665	DESIGN
// TBD should this be varbinary($1)? //	DESIGN	0.7875810173994529	WITHOUT_CLASSIFICATION	0.21241898260054715	DESIGN
// is it necessary to register %exact since it can only appear in a where clause?	DESIGN	0.9996878461906904	WITHOUT_CLASSIFICATION	3.121538093095913E-4	DESIGN
// xmlforest requires a new kind of function constructor	DESIGN	0.9999988611740994	WITHOUT_CLASSIFICATION	1.1388259005379008E-6	DESIGN
// Does this dialect support the ALTER TABLE syntax?	DESIGN	0.9972267201772699	WITHOUT_CLASSIFICATION	0.0027732798227300248	DESIGN
// Do we need to qualify index names with the schema name?	DESIGN	0.9995000050794309	WITHOUT_CLASSIFICATION	4.99994920569064E-4	DESIGN
// Does this dialect support the UNIQUE column syntax?	DESIGN	0.9990273869709655	WITHOUT_CLASSIFICATION	9.726130290345664E-4	DESIGN
// Does this dialect support check constraints?	DESIGN	0.9998254067773394	WITHOUT_CLASSIFICATION	1.7459322266042673E-4	DESIGN
// Do we need to drop constraints before dropping tables in this dialect?	DESIGN	0.9912218324906464	WITHOUT_CLASSIFICATION	0.008778167509353608	DESIGN
// Does this dialect support the FOR UPDATE syntax?	DESIGN	0.9964848678874143	WITHOUT_CLASSIFICATION	0.0035151321125856385	DESIGN
// Does this dialect support the Oracle-style FOR UPDATE NOWAIT syntax?	DESIGN	0.9979358538214572	WITHOUT_CLASSIFICATION	0.00206414617854275	DESIGN
// Does this dialect support FOR UPDATE OF, allowing particular rows to be locked?	DESIGN	0.966545021407652	WITHOUT_CLASSIFICATION	0.03345497859234804	DESIGN
//note there is a wierd implementation in the client side	DESIGN	0.9999925788919432	WITHOUT_CLASSIFICATION	7.421108056853325E-6	DESIGN
//TODO: never reached, since getTypeName() actually throws an exception!	DESIGN	0.9868524418665745	WITHOUT_CLASSIFICATION	0.013147558133425446	DESIGN
// todo : should we additionally check the current isolation mode explicitly?	DESIGN	0.9931339894621346	WITHOUT_CLASSIFICATION	0.006866010537865403	DESIGN
// todo : remove this and just have subclasses use Isolater/IsolatedWork directly...	DESIGN	0.8423787142061702	WITHOUT_CLASSIFICATION	0.15762128579382986	DESIGN
//TODO: should orphans really be deleted during lock???	DESIGN	0.855490332953455	DESIGN	0.14450966704654503	WITHOUT_CLASSIFICATION
// orphans should not be deleted during merge??	DESIGN	0.9948221843976993	WITHOUT_CLASSIFICATION	0.005177815602300708	DESIGN
// orphans should not be deleted during copy??	DESIGN	0.9916623764291216	WITHOUT_CLASSIFICATION	0.008337623570878529	DESIGN
//I suppose?	DESIGN	0.9925334418291496	WITHOUT_CLASSIFICATION	0.007466558170850449	DESIGN
//TODO: suck this logic into the collection!	DESIGN	0.6466837474419439	WITHOUT_CLASSIFICATION	0.35331625255805604	DESIGN
// TODO: an alternative is to check if the owner has changed; if it hasn't then // get the ID from collection.getOwner()	DESIGN	0.8642088829670848	WITHOUT_CLASSIFICATION	0.1357911170329153	DESIGN
//TODO:refactor + make this method private	DESIGN	0.8088098541457927	WITHOUT_CLASSIFICATION	0.19119014585420727	DESIGN
// todo : we can actually just determine this from the incoming EntityEntry-s	DESIGN	0.9983445645672284	WITHOUT_CLASSIFICATION	0.001655435432771601	DESIGN
//TODO: Should this be an InitializeEntityEventListener??? (watch out for performance!)	DESIGN	0.8675709155051136	WITHOUT_CLASSIFICATION	0.13242908449488644	DESIGN
//TODO: better to pass the id in as an argument?	DESIGN	0.7750999412656843	DESIGN	0.2249000587343157	WITHOUT_CLASSIFICATION
// todo : potentially look at optimizing these two arrays	DESIGN	0.9999859615405926	WITHOUT_CLASSIFICATION	1.4038459407451324E-5	DESIGN
/* trim done to workaround stupid oracle bug that cant handle whitespaces before a { in a sp */	DESIGN	0.8979887400192538	DESIGN	0.10201125998074623	WITHOUT_CLASSIFICATION
/* trim done to workaround stupid oracle bug that cant handle whitespaces before a { in a sp */	DESIGN	0.8979887400192538	DESIGN	0.10201125998074623	WITHOUT_CLASSIFICATION
//TODO: temporary	DESIGN	0.9375517563037512	WITHOUT_CLASSIFICATION	0.062448243696248705	DESIGN
//TODO: not quite sure about the full implications of this!	DESIGN	0.9808991906974074	WITHOUT_CLASSIFICATION	0.019100809302592617	DESIGN
//TODO: not quite sure about the full implications of this!	DESIGN	0.9808991906974074	WITHOUT_CLASSIFICATION	0.019100809302592617	DESIGN
//TODO: ugly here:	DESIGN	0.6378509896899752	DESIGN	0.3621490103100247	WITHOUT_CLASSIFICATION
//this is kinda the best we can do...	DESIGN	0.8430573212414076	WITHOUT_CLASSIFICATION	0.1569426787585924	DESIGN
//TODO: this needn't exclude subclasses...	DESIGN	0.949586316268106	DESIGN	0.050413683731894074	WITHOUT_CLASSIFICATION
// todo : need map? the prob is a proper key, right?	DESIGN	0.7199190038280838	WITHOUT_CLASSIFICATION	0.28008099617191623	DESIGN
// todo : i'd much rather have this done from #endLoadingCollection(CollectionPersister,LoadingCollectionEntry)...	DESIGN	0.9682324817103368	WITHOUT_CLASSIFICATION	0.0317675182896631	DESIGN
// todo : hack!!! // NOTE : here we cleanup the load context when we have no more local // LCE entries.  This "works" for the time being because really // only the collection load contexts are implemented.  Long term, // this cleanup should become part of the "close result set" // processing from the (sandbox/jdbc) jdbc-container code.	DESIGN	0.6466861696330605	DESIGN	0.35331383036693953	WITHOUT_CLASSIFICATION
// todo : should really move this log statement to CollectionType, where this is used from...	DESIGN	0.985870916397909	DESIGN	0.014129083602090893	WITHOUT_CLASSIFICATION
// TODO : keep seperate notions of QT[] here for shallow/non-shallow queries...	DESIGN	0.6641738629179611	DESIGN	0.3358261370820389	WITHOUT_CLASSIFICATION
// TODO : add this info to the translator and aggregate it here...	DESIGN	0.8972878560888256	DESIGN	0.10271214391117449	WITHOUT_CLASSIFICATION
//TODO: move into collection type, so we can use polymorphism!	DESIGN	0.5532515574212997	WITHOUT_CLASSIFICATION	0.44674844257870033	DESIGN
// todo : should we check the current isolation mode explicitly?	DESIGN	0.9970259657207525	WITHOUT_CLASSIFICATION	0.0029740342792474194	DESIGN
//TODO: suck into event class	DESIGN	0.7304633755736126	DESIGN	0.2695366244263873	WITHOUT_CLASSIFICATION
//do we even really need this? the update will fail anyway....	DESIGN	0.6762821958337576	WITHOUT_CLASSIFICATION	0.32371780416624235	DESIGN
//hum ... should we cascade anyway? throw an exception? fine like it is?	DESIGN	0.9032369891398533	WITHOUT_CLASSIFICATION	0.09676301086014673	DESIGN
//TODO: would it be better to do a refresh from db?	DESIGN	0.9997566384099675	DESIGN	2.43361590032353E-4	WITHOUT_CLASSIFICATION
//TODO: we use two visitors here, inefficient!	DESIGN	0.8757727150936925	DESIGN	0.1242272849063075	WITHOUT_CLASSIFICATION
// this class has no proxies (so do a shortcut)	DESIGN	0.9951263911775049	WITHOUT_CLASSIFICATION	0.004873608822495046	DESIGN
//PostLoad is needed for EJB3 //TODO: reuse the PostLoadEvent...	DESIGN	0.7238910576596206	WITHOUT_CLASSIFICATION	0.2761089423403795	DESIGN
//TODO: put this stuff back in to read snapshot from //      the second-level cache (needs some extra work)	DESIGN	0.9999964711533593	DESIGN	3.5288466405523995E-6	WITHOUT_CLASSIFICATION
// null or brand new collection // this will also (inefficiently) handle arrays, which have // no snapshot, so we can't do any better	DESIGN	0.9935196471380683	WITHOUT_CLASSIFICATION	0.006480352861931724	DESIGN
//TODO: is this 100% correct?	DESIGN	0.8268117097879956	DESIGN	0.1731882902120045	WITHOUT_CLASSIFICATION
// TODO: iteratively get transient entities and retry merge until one of the following conditions: //       1) transientCopyCache.size() == 0 //       2) transientCopyCache.size() is not decreasing and copyCache.size() is not increasing // TODO: find out if retrying can add entities to copyCache (don't think it can...) // For now, just retry once; throw TransientObjectException if there are still any transient entities	DESIGN	0.8269351752792748	DESIGN	0.1730648247207251	WITHOUT_CLASSIFICATION
// entity name will not be available for non-POJO entities // TODO: cache the entity name somewhere so that it is available to this exception	DESIGN	0.6667974930971642	DESIGN	0.3332025069028358	WITHOUT_CLASSIFICATION
//TODO: we should throw an exception if we really *know* for sure   //      that this is a detached instance, rather than just assuming //throw new StaleObjectStateException(entityName, id);	DESIGN	0.9531571566027358	DESIGN	0.046842843397264085	WITHOUT_CLASSIFICATION
// TODO : perhaps we should additionally require that the incoming entity // version be equivalent to the defined unsaved-value?	DESIGN	0.9727235128146897	DESIGN	0.027276487185310245	WITHOUT_CLASSIFICATION
// perhaps this should be an exception since it is only ever used // in the above method?	DESIGN	0.7530854412332079	WITHOUT_CLASSIFICATION	0.2469145587667922	DESIGN
// Put a placeholder in entries, so we don't recurse back and try to save() the // same object again. QUESTION: should this be done before onSave() is called? // likewise, should it be done before onUpdate()?	DESIGN	0.9994142123847767	WITHOUT_CLASSIFICATION	5.857876152232937E-4	DESIGN
//TODO: merge into one method!	DESIGN	0.8935747379323308	WITHOUT_CLASSIFICATION	0.1064252620676692	DESIGN
//TODO: refactor to .sql package	DESIGN	0.9377215105224497	WITHOUT_CLASSIFICATION	0.062278489477550394	DESIGN
/** * Provides query splitting methods, which were originally in QueryTranslator. * <br> * TODO: This will need to be refactored at some point. * * @author josh */	DESIGN	0.9978512740190812	DESIGN	0.0021487259809187228	WITHOUT_CLASSIFICATION
//TODO: this is one of the ugliest and most fragile pieces of code in Hibernate....	DESIGN	0.9548337173395175	DESIGN	0.04516628266048239	WITHOUT_CLASSIFICATION
// todo : temporary //      needed because currently persister is the one that //      creates and renders the join fragments for inheritence //      hierarchies...	DESIGN	0.9965962416275608	WITHOUT_CLASSIFICATION	0.003403758372439257	DESIGN
// TODO : better way?!?	DESIGN	0.9997859656872115	DESIGN	2.140343127886483E-4	WITHOUT_CLASSIFICATION
// Not possible to simply re-use the versionPropertyNode here as it causes // OOM errors due to circularity :(	DESIGN	0.9999052577474937	WITHOUT_CLASSIFICATION	9.474225250626071E-5	DESIGN
//TODO:this is only needed during compilation .. can we eliminate the instvar?	DESIGN	0.5276024760548974	WITHOUT_CLASSIFICATION	0.47239752394510254	DESIGN
// TODO : this is a bit dodgy, come up with a better way to check this (plus see above comment)	DESIGN	0.999998985913139	DESIGN	1.014086861016917E-6	WITHOUT_CLASSIFICATION
// even here, if only properties mapped to the "base table" are referenced // in the set and where clauses, this could be handled by the BasicDelegate. // TODO : decide if it is better performance-wise to perform that check, or to simply use the MultiTableUpdateDelegate	DESIGN	0.5942826474237087	DESIGN	0.4057173525762914	WITHOUT_CLASSIFICATION
//TODO: switch statements are always evil! We already had bugs because  //      of forgotten token types. Use polymorphism for this!	DESIGN	0.5424976826205961	WITHOUT_CLASSIFICATION	0.45750231737940394	DESIGN
// TODO : we really need to be able to deal with component paths here also; // this is difficult because the hql-sql grammar expects all those node types // to be FromReferenceNodes.  One potential fix here would be to convert the // IntoClause to just use a FromClause/FromElement combo (as a child of the // InsertStatement) and move all this logic into the InsertStatement.  That's // probably the easiest approach (read: least amount of changes to the grammar // and code), but just doesn't feel right as then an insert would contain // 2 from-clauses	DESIGN	0.9998914231841776	DESIGN	1.0857681582253126E-4	WITHOUT_CLASSIFICATION
// really there are two situations where it should be ok to allow the insertion // into properties defined on a superclass: //      1) union-subclass with an abstract root entity //      2) discrim-subclass // // #1 is handled already because of the fact that // UnionSubclassPersister alreay always returns 0 // for this call... // // we may want to disallow it for discrim-subclass just for // consistency-sake (currently does not work anyway)...	DESIGN	0.9696307731807223	WITHOUT_CLASSIFICATION	0.030369226819277614	DESIGN
//yuck!	DESIGN	0.9988738249980504	WITHOUT_CLASSIFICATION	0.0011261750019495506	DESIGN
// implicit joins are always(?) ok to reuse	DESIGN	0.9998895172581007	WITHOUT_CLASSIFICATION	1.1048274189931317E-4	DESIGN
// TODO : we may also want to check that the types here map to exactly one column/JDBC-type //      can't think of a situation where arithmetic expression between multi-column mappings //      makes any sense.	DESIGN	0.8312826963133517	WITHOUT_CLASSIFICATION	0.16871730368664825	DESIGN
// we do not know either type //BLIND GUESS!	DESIGN	0.9996900230113163	WITHOUT_CLASSIFICATION	3.0997698868367535E-4	DESIGN
//TODO: used to be exprNoParens! was this needed?	DESIGN	0.9590714876006169	DESIGN	0.040928512399383055	WITHOUT_CLASSIFICATION
// TODO: Replace this with a more elegant solution.	DESIGN	0.6101979693399282	DESIGN	0.3898020306600717	WITHOUT_CLASSIFICATION
// TODO: Should this really return null?  If not, figure out something better to do here.	DESIGN	0.9999991482532616	DESIGN	8.517467384029763E-7	WITHOUT_CLASSIFICATION
//TODO: get SQL rendering out of this package!	DESIGN	0.6021992359715107	WITHOUT_CLASSIFICATION	0.3978007640284893	DESIGN
// yuck!	DESIGN	0.9997791219042227	WITHOUT_CLASSIFICATION	2.2087809577740877E-4	DESIGN
// ignore it; the incoming property could not be found so we // cannot be sure what to do here.  At the very least, the // safest is to simply not apply any dereference toggling...	DESIGN	0.5689010565094383	DESIGN	0.43109894349056166	WITHOUT_CLASSIFICATION
// TODO : most of below was taken verbatim from DotNode; should either delegate this logic or super-type it	DESIGN	0.9967134850886311	DESIGN	0.0032865149113689147	WITHOUT_CLASSIFICATION
// otherwise, a trim-specification and/or a trim-character // have been specified;  we need to decide which options // are present and "do the right thing" // should leading trim-characters be trimmed? // should trailing trim-characters be trimmed? // the trim-character // the trim-source	DESIGN	0.9999518008477116	WITHOUT_CLASSIFICATION	4.81991522884039E-5	DESIGN
// todo: we should really just collect these from the various SelectExpressions, rather than regenerating here	DESIGN	0.9943234369057445	WITHOUT_CLASSIFICATION	0.00567656309425554	DESIGN
//TODO: is this a bit ugly?	DESIGN	0.9998194353855397	DESIGN	1.8056461446020193E-4	WITHOUT_CLASSIFICATION
// Need a better way to define the suffixes here...	DESIGN	0.5543960962418141	WITHOUT_CLASSIFICATION	0.445603903758186	DESIGN
// TODO: something much better - look at the type of the other expression! // TODO: Have comparisonExpression and/or arithmeticExpression rules complete the resolution of boolean nodes.	DESIGN	0.9495097004043652	WITHOUT_CLASSIFICATION	0.05049029959563476	DESIGN
// TODO : what amount of significant digits need to be supported here? //      - from the DecimalFormat docs: //          [significant digits] = [minimum integer digits] + [maximum fraction digits]	DESIGN	0.9433856243883958	DESIGN	0.056614375611604054	WITHOUT_CLASSIFICATION
// Needed the "clazz_" check to work around union-subclasses // TODO : is there a way to tell whether a persister is truly discrim-column based inheritence?	DESIGN	0.9973568308236769	DESIGN	0.0026431691763232445	WITHOUT_CLASSIFICATION
//We should actually rework this class to not implement Parser //and just process path expressions in the most convenient way.	DESIGN	0.9843422296993162	WITHOUT_CLASSIFICATION	0.015657770300683826	DESIGN
//The class is now way to complex!	DESIGN	0.9929605337315203	WITHOUT_CLASSIFICATION	0.007039466268479774	DESIGN
//TODO: get SQL rendering out of here	DESIGN	0.8300315967021251	WITHOUT_CLASSIFICATION	0.16996840329787483	DESIGN
//TODO: is there a better way?	DESIGN	0.9994931736794762	DESIGN	5.068263205237592E-4	WITHOUT_CLASSIFICATION
//Must be done here because of side-effect! yuck...	DESIGN	0.998597250876165	WITHOUT_CLASSIFICATION	0.001402749123834985	DESIGN
//name from a super query (a bit inelegant that it shows up here)	DESIGN	0.6047789364128636	WITHOUT_CLASSIFICATION	0.39522106358713627	DESIGN
// We should reengineer this class so that, rather than the current ad - // hoc linear approach to processing a stream of tokens, we instead // build up a tree of expressions.	DESIGN	0.9999703956137235	WITHOUT_CLASSIFICATION	2.9604386276428896E-5	DESIGN
// this is ugly here, but needed because its a subquery	DESIGN	0.5345444910339436	WITHOUT_CLASSIFICATION	0.46545550896605636	DESIGN
// unhappy about this being public ... is there a better way?	DESIGN	0.891547286035171	DESIGN	0.1084527139648291	WITHOUT_CLASSIFICATION
// Make sure this is a defined parameter and check the incoming value type // TODO: what should be the actual exception type here?	DESIGN	0.9992234755747663	DESIGN	7.765244252336943E-4	WITHOUT_CLASSIFICATION
// TODO : this constructor form is *only* used from constructor directly below us; can it go away?	DESIGN	0.9999965594759515	DESIGN	3.4405240485227556E-6	WITHOUT_CLASSIFICATION
//TODO: COPY/PASTE FROM SessionImpl, pull up!	DESIGN	0.991032231080122	WITHOUT_CLASSIFICATION	0.008967768919877982	DESIGN
// TODO : should remove this exposure //  and have all references to the session's batcher use the ConnectionManager.	DESIGN	0.9827399665429755	DESIGN	0.017260033457024548	WITHOUT_CLASSIFICATION
// todo : should this get moved to PersistentContext? // logically, is PersistentContext the "thing" to which an interceptor gets attached?	DESIGN	0.723557139777818	DESIGN	0.276442860222182	WITHOUT_CLASSIFICATION
// TODO: what type?	DESIGN	0.9312643471779128	DESIGN	0.06873565282208711	WITHOUT_CLASSIFICATION
// todo : should seriously consider not allowing a txn to begin from a child session //      can always route the request to the root session...	DESIGN	0.9881696635430509	WITHOUT_CLASSIFICATION	0.011830336456949211	DESIGN
// short-circuit for performance...	DESIGN	0.9999932661310924	WITHOUT_CLASSIFICATION	6.7338689076222185E-6	DESIGN
// not absolutely necessary, but does help with aggressive release	DESIGN	0.9999642567183061	WITHOUT_CLASSIFICATION	3.57432816939253E-5	DESIGN
// TODO : remove these last two as batcher is no longer managing connections	DESIGN	0.9165824494230433	WITHOUT_CLASSIFICATION	0.08341755057695659	DESIGN
//work around a bug in all known connection pools....	DESIGN	0.9706285939945483	WITHOUT_CLASSIFICATION	0.029371406005451725	DESIGN
// TODO : make this the factory for "entity mode related" sessions; // also means making this the target of transaction-synch and the // thing that knows how to cascade things between related sessions // // At that point, perhaps this thing is a "SessionContext", and // ConnectionManager is a "JDBCContext"?  A "SessionContext" should // live in the impl package...	DESIGN	0.5788412809504576	WITHOUT_CLASSIFICATION	0.4211587190495425	DESIGN
//TODO: does this really need to be here? //      does the collection already have //      it's own up-to-date snapshot?	DESIGN	0.9892363314800271	DESIGN	0.01076366851997291	WITHOUT_CLASSIFICATION
//TODO: the i==entitySpan-1 bit depends upon subclass implementation (very bad)	DESIGN	0.9353560123791824	WITHOUT_CLASSIFICATION	0.06464398762081759	DESIGN
/**	DESIGN	0.998151460456067	WITHOUT_CLASSIFICATION	0.0018485395439330262	DESIGN
// todo : add the notion of enabled filters to the CacheKey to differentiate filtered collections from non-filtered; //      but CacheKey is currently used for both collections and entities; would ideally need to define two seperate ones; //      currently this works in conjuction with the check on //      DefaultInitializeCollectionEventHandler.initializeCollectionFromCache() (which makes sure to not read from //      cache with enabled filters). // EARLY EXIT!!!!!	DESIGN	0.9981914982627859	DESIGN	0.0018085017372141254	WITHOUT_CLASSIFICATION
//for sets, we should end the collection load after resolving //the entities, since we might call hashCode() on the elements //TODO: or we could do this polymorphically, and have two //      different operations implemented differently for arrays	DESIGN	0.914870714152632	DESIGN	0.085129285847368	WITHOUT_CLASSIFICATION
//This is not very nice (and quite slow):	DESIGN	0.8319018636045143	DESIGN	0.16809813639548563	WITHOUT_CLASSIFICATION
//use of trim() here is ugly?	DESIGN	0.9516525666387455	WITHOUT_CLASSIFICATION	0.04834743336125444	DESIGN
//TODO: this is too conservative; if all preceding joins were  //      also inner joins, we could use an inner join here	DESIGN	0.998958288225593	DESIGN	0.001041711774407023	WITHOUT_CLASSIFICATION
//TODO: look at the owning property and check that it  //      isn't lazy (by instrumentation)	DESIGN	0.8880566657865354	WITHOUT_CLASSIFICATION	0.11194333421346461	DESIGN
//TODO: inefficient	DESIGN	0.9456959873352963	WITHOUT_CLASSIFICATION	0.05430401266470381	DESIGN
// why does this matter?	DESIGN	0.7939993794480685	WITHOUT_CLASSIFICATION	0.2060006205519315	DESIGN
// from the collection of associations, locate OJA for the // ManyToOne corresponding to this persister to fully // define the many-to-many; we need that OJA so that we can // use its alias here // TODO : is there a better way here?	DESIGN	0.9999187917633081	DESIGN	8.120823669195102E-5	WITHOUT_CLASSIFICATION
//TODO: this class depends directly upon CriteriaImpl,  //      in the impl package ... add a CriteriaImplementor  //      interface	DESIGN	0.9557382447290766	DESIGN	0.044261755270923325	WITHOUT_CLASSIFICATION
//TODO: add a CriteriaImplementor interface //      this class depends directly upon CriteriaImpl in the impl package...	DESIGN	0.9911403391892223	DESIGN	0.008859660810777652	WITHOUT_CLASSIFICATION
// TODO : not so sure this is needed...	DESIGN	0.9997253296941448	DESIGN	2.746703058550612E-4	WITHOUT_CLASSIFICATION
// meant to handle dynamic instantiation queries...(Copy from QueryLoader)	DESIGN	0.9984591795722927	WITHOUT_CLASSIFICATION	0.001540820427707327	DESIGN
// TODO: The order in which entities are saved may matter (e.g., a particular transient entity //       may need to be saved before other transient entities can be saved; //       Keep retrying the batch of transient entities until either: //       1) there are no transient entities left in transientCopyCache //       or 2) no transient entities were saved in the last batch // For now, just run through the transient entities and retry the merge	DESIGN	0.9902239914664964	WITHOUT_CLASSIFICATION	0.009776008533503619	DESIGN
// todo: this might really even be moved into the cfg package and used as the basis for all things which are configurable.	DESIGN	0.6957287038478038	WITHOUT_CLASSIFICATION	0.30427129615219606	DESIGN
// todo : currently expects that the individual with expressions apply to the same sql table join. //      This may not be the case for joined-subclass where the property values //      might be coming from different tables in the joined hierarchy.  At some //      point we should expand this to support that capability.  However, that has //      some difficulties: //          1) the biggest is how to handle ORs when the individual comparisons are //              linked to different sql joins. //          2) here we would need to track each comparison individually, along with //              the join alias to which it applies and then pass that information //              back to the FromElement so it can pass it along to the JoinSequence	DESIGN	0.8889580390369277	DESIGN	0.11104196096307223	WITHOUT_CLASSIFICATION
// this function has a template -> restore output, apply the template and write the result out // TODO: Downcast to avoid using an interface?  Yuck.	DESIGN	0.6733745747153635	DESIGN	0.32662542528463656	WITHOUT_CLASSIFICATION
// at some point the generate phase needs to be moved out of here, // because a single object-level DML might spawn multiple SQL DML // command executions. // // Possible to just move the sql generation for dml stuff, but for // consistency-sake probably best to just move responsiblity for // the generation phase completely into the delegates // (QueryLoader/StatementExecutor) themselves.  Also, not sure why // QueryLoader currently even has a dependency on this at all; does // it need it?  Ideally like to see the walker itself given to the delegates directly...	DESIGN	0.7948939886864756	DESIGN	0.20510601131352427	WITHOUT_CLASSIFICATION
// get the right object from the list ... would it be easier to just call getEntity() ??	DESIGN	0.8058151857414035	WITHOUT_CLASSIFICATION	0.1941848142585965	DESIGN
// TODO should we just collect these like with the collections above?	DESIGN	0.8688307933131125	DESIGN	0.13116920668688756	WITHOUT_CLASSIFICATION
// todo : better to handle dynamic filters through implicit DynamicFilterParameterSpecification // see the discussion there in DynamicFilterParameterSpecification's javadocs as to why // it is currently not done that way.	DESIGN	0.999626769789969	WITHOUT_CLASSIFICATION	3.732302100308892E-4	DESIGN
/////////////////////////////////////////////////////////////////////////// // USED ONLY FOR REGRESSION TESTING!!!! // // todo : obviously get rid of all this junk ;) ///////////////////////////////////////////////////////////////////////////	DESIGN	0.9529203681988919	WITHOUT_CLASSIFICATION	0.04707963180110814	DESIGN
//create an index on the key columns??	DESIGN	0.999929631645661	WITHOUT_CLASSIFICATION	7.036835433904811E-5	DESIGN
//TODO: deprecated, remove eventually	DESIGN	0.9136655453852088	DESIGN	0.0863344546147912	WITHOUT_CLASSIFICATION
//create an index on the key columns??	DESIGN	0.999929631645661	WITHOUT_CLASSIFICATION	7.036835433904811E-5	DESIGN
//TODO: improve this hack!	DESIGN	0.9905600594594712	DESIGN	0.009439940540528685	WITHOUT_CLASSIFICATION
// inheritance cycle detection (paranoid check)	DESIGN	0.9999922970592896	WITHOUT_CLASSIFICATION	7.70294071030012E-6	DESIGN
//TODO: remove use of instanceof!	DESIGN	0.7129574833571983	WITHOUT_CLASSIFICATION	0.2870425166428016	DESIGN
//shortcut	DESIGN	0.999666199545104	WITHOUT_CLASSIFICATION	3.338004548959191E-4	DESIGN
//TODO: handle the case of a foreign key to something other than the pk	DESIGN	0.7614742957506199	WITHOUT_CLASSIFICATION	0.2385257042493802	DESIGN
// create an index on the key columns??	DESIGN	0.9999776908937861	WITHOUT_CLASSIFICATION	2.2309106213967816E-5	DESIGN
// todo : remove	DESIGN	0.9992881071551032	WITHOUT_CLASSIFICATION	7.11892844896893E-4	DESIGN
// todo : remove	DESIGN	0.9992881071551032	WITHOUT_CLASSIFICATION	7.11892844896893E-4	DESIGN
// todo : remove	DESIGN	0.9992881071551032	WITHOUT_CLASSIFICATION	7.11892844896893E-4	DESIGN
// todo : throw exception?	DESIGN	0.9928952910903874	WITHOUT_CLASSIFICATION	0.007104708909612501	DESIGN
// todo : throw exception?  maybe warn if not the same?	DESIGN	0.9107683361402109	WITHOUT_CLASSIFICATION	0.08923166385978919	DESIGN
//TODO: make EntityPersister *not* depend on SessionFactoryImplementor //interface, if possible	DESIGN	0.9954392094400787	WITHOUT_CLASSIFICATION	0.004560790559921259	DESIGN
//TODO: is there a more elegant way than downcasting?	DESIGN	0.9909680102682099	DESIGN	0.00903198973179012	WITHOUT_CLASSIFICATION
// TODO: encapsulate the protected instance variables!	DESIGN	0.8146727900704033	WITHOUT_CLASSIFICATION	0.18532720992959678	DESIGN
// should indicate that we are processing an INSERT/UPDATE/DELETE // query with a subquery implied via a collection property // function. Here, we need to use the table name itself as the // qualification alias. // TODO : verify this works for all databases... // TODO : is this also the case in non-"indexed" scenarios?	DESIGN	0.9939316868359305	DESIGN	0.006068313164069539	WITHOUT_CLASSIFICATION
//TODO: copy/paste from insertRows()	DESIGN	0.7825751773715581	DESIGN	0.21742482262844193	WITHOUT_CLASSIFICATION
//TODO: copy/paste from recreate()	DESIGN	0.6928202392087291	WITHOUT_CLASSIFICATION	0.30717976079127085	DESIGN
//should this interface extend PropertyMapping?	DESIGN	0.6965855283221118	WITHOUT_CLASSIFICATION	0.3034144716778881	DESIGN
//ie. the subquery! yuck!	DESIGN	0.9998441598174984	WITHOUT_CLASSIFICATION	1.5584018250167526E-4	DESIGN
//TODO: move to .sql package!!	DESIGN	0.5662817774322287	DESIGN	0.4337182225677712	WITHOUT_CLASSIFICATION
//TODO: code duplication with SingleTableEntityPersister	DESIGN	0.9778785782599849	WITHOUT_CLASSIFICATION	0.022121421740015156	DESIGN
// TODO: It would be really, really nice to use this to also model components!	DESIGN	0.9999953799335725	DESIGN	4.620066427583784E-6	WITHOUT_CLASSIFICATION
//TODO: *two* hashmap lookups here is one too many...	DESIGN	0.9849230335971001	WITHOUT_CLASSIFICATION	0.015076966402900013	DESIGN
//TODO: code duplication with JoinedSubclassEntityPersister	DESIGN	0.9880832379825484	WITHOUT_CLASSIFICATION	0.011916762017451567	DESIGN
//perhaps not really necessary...	DESIGN	0.9924817889471863	WITHOUT_CLASSIFICATION	0.007518211052813654	DESIGN
// NOTE: this assumes something about how propertySelectFragment is implemented by the subclass! // was toUnqotedAliasStrings( getIdentiferColumnNames() ) before - now tried // to remove that unqoting and missing aliases..	DESIGN	0.9038780410002442	WITHOUT_CLASSIFICATION	0.09612195899975583	DESIGN
// NOTE: this assumes something about how propertySelectFragment is implemented by the subclass! // was toUnqotedAliasStrings( getdiscriminatorColumnName() ) before - now tried // to remove that unqoting and missing aliases..	DESIGN	0.9404540537339847	WITHOUT_CLASSIFICATION	0.059545946266015296	DESIGN
//TODO: should we use SELECT .. FOR UPDATE?	DESIGN	0.9972204482802457	DESIGN	0.0027795517197542587	WITHOUT_CLASSIFICATION
//TODO: optimize this better!	DESIGN	0.7735015566046669	DESIGN	0.22649844339533315	WITHOUT_CLASSIFICATION
//TODO: should we allow suffixes on these ?	DESIGN	0.509986794759123	DESIGN	0.4900132052408771	WITHOUT_CLASSIFICATION
//This is really ugly, but necessary:	DESIGN	0.6388830594155863	WITHOUT_CLASSIFICATION	0.3611169405844138	DESIGN
//ugly little workaround for fact that createUniqueKeyLoaders() does not handle component properties	DESIGN	0.9995709356920728	DESIGN	4.2906430792721774E-4	WITHOUT_CLASSIFICATION
//TODO: disable batch loading if lockMode > READ?	DESIGN	0.8509695596222376	WITHOUT_CLASSIFICATION	0.1490304403777624	DESIGN
// append the SQL to return the generated identifier //TODO: suck into Insert	DESIGN	0.9999513103751747	WITHOUT_CLASSIFICATION	4.8689624825357104E-5	DESIGN
//TODO: I am not so sure about the exception handling in this bit!	DESIGN	0.9055878387304087	DESIGN	0.09441216126959129	WITHOUT_CLASSIFICATION
//TODO: is this really necessary????	DESIGN	0.8939714288257116	DESIGN	0.10602857117428847	WITHOUT_CLASSIFICATION
//TODO: move to .sql package, and refactor with similar things!	DESIGN	0.6431370010868885	DESIGN	0.35686299891311146	WITHOUT_CLASSIFICATION
//TODO: implement functionality //  this might be painful to do here, as the "join post processing" for //  the subquery has already been performed (meaning that for //  theta-join dialects, the join conditions have already been moved //  over to the where clause).  A "simple" solution here might to //  perform "join post processing" once for the entire query (including //  any subqueries) at one fell swoop	DESIGN	0.9960111371841169	WITHOUT_CLASSIFICATION	0.003988862815883064	DESIGN
// todo : this eventually needs to be removed	DESIGN	0.8454626240197135	WITHOUT_CLASSIFICATION	0.1545373759802865	DESIGN
//kinda ugly, but needed for collections with a "." node mapping	DESIGN	0.9998118576099155	WITHOUT_CLASSIFICATION	1.8814239008454082E-4	DESIGN
//is this ok?	DESIGN	0.9978505094587684	WITHOUT_CLASSIFICATION	0.0021494905412316628	DESIGN
//TODO: perhaps this should be some other RuntimeException...	DESIGN	0.9991276157160623	DESIGN	8.723842839374959E-4	WITHOUT_CLASSIFICATION
//TODO: make this a bit nicer	DESIGN	0.9062296839506238	DESIGN	0.09377031604937625	WITHOUT_CLASSIFICATION
//Yuck:	DESIGN	0.9982765033410647	WITHOUT_CLASSIFICATION	0.0017234966589353246	DESIGN
//TODO: we should provide some way to get keys of collection of statistics to make it easier to retrieve from a GUI perspective	DESIGN	0.9988144708082988	DESIGN	0.0011855291917011737	WITHOUT_CLASSIFICATION
/**	DESIGN	0.998151460456067	WITHOUT_CLASSIFICATION	0.0018485395439330262	DESIGN
// TODO : will need reference to session factory to fully complete HHH-1907	DESIGN	0.8892979267116032	DESIGN	0.11070207328839685	WITHOUT_CLASSIFICATION
//TODO: currently keeps Getters and Setters (instead of PropertyAccessors) because of the way getGetter() and getSetter() are implemented currently; yuck!	DESIGN	0.994695736651304	DESIGN	0.0053042633486959645	WITHOUT_CLASSIFICATION
//TODO: redesign how PropertyAccessors are acquired...	DESIGN	0.6331236213146219	DESIGN	0.36687637868537815	WITHOUT_CLASSIFICATION
// todo : YUCK!!!	DESIGN	0.9997619938804105	WITHOUT_CLASSIFICATION	2.3800611958953294E-4	DESIGN
// TODO : YUCK!!!  fix after HHH-1907 is complete	DESIGN	0.8990108511933744	DESIGN	0.10098914880662556	WITHOUT_CLASSIFICATION
//TODO: need to make the majority of this functionality into a top-level support class for custom impl support	DESIGN	0.9107669173275211	DESIGN	0.0892330826724788	WITHOUT_CLASSIFICATION
//TODO: design new lifecycle for ProxyFactory	DESIGN	0.9861538665669779	WITHOUT_CLASSIFICATION	0.013846133433022214	DESIGN
//TODO: would be nice to handle proxy classes elegantly!	DESIGN	0.9982244266392238	DESIGN	0.0017755733607761287	WITHOUT_CLASSIFICATION
// TODO: copy/paste from ManyToOneType	DESIGN	0.5512761539315039	DESIGN	0.44872384606849597	WITHOUT_CLASSIFICATION
//TODO: should this be Session.instantiate(Persister, ...)?	DESIGN	0.5332410794093692	WITHOUT_CLASSIFICATION	0.4667589205906307	DESIGN
//TODO: this is a bit arbitrary, expose a switch to the user?	DESIGN	0.9756824616918991	DESIGN	0.02431753830810094	WITHOUT_CLASSIFICATION
//TODO: implement caching?! proxies?!	DESIGN	0.7785682953918802	WITHOUT_CLASSIFICATION	0.2214317046081198	DESIGN
//TODO: is this right??	DESIGN	0.9682783653969825	DESIGN	0.0317216346030175	WITHOUT_CLASSIFICATION
// is this really necessary?	DESIGN	0.9896299538066834	WITHOUT_CLASSIFICATION	0.010370046193316685	DESIGN
//TODO: move these to a new JoinableType abstract class, //extended by EntityType and PersistentCollectionType:	DESIGN	0.9973881737515883	WITHOUT_CLASSIFICATION	0.002611826248411723	DESIGN
// TODO: this is very suboptimal for some subclasses (namely components), // since it does not take advantage of two-phase-load	DESIGN	0.9969986583689188	DESIGN	0.003001341631081224	WITHOUT_CLASSIFICATION
// worrying about proxies is perhaps a little bit of overkill here...	DESIGN	0.5218465060581219	WITHOUT_CLASSIFICATION	0.4781534939418781	DESIGN
// NOTE VERY HACKISH WORKAROUND!! // TODO: Fix this so it will work for non-POJO entity mode	DESIGN	0.9999868438359248	DESIGN	1.3156164075181536E-5	WITHOUT_CLASSIFICATION
// TODO: Fix this so it will work for non-POJO entity mode	DESIGN	0.9996380606479602	DESIGN	3.619393520397066E-4	WITHOUT_CLASSIFICATION
// We would probably refactor to have LogicParser (builds a tree of simple // expressions connected by and, or, not), ExpressionParser (translates // from OO terms like foo, foo.Bar, foo.Bar.Baz to SQL terms like // FOOS.ID, FOOS.BAR_ID, etc) and PathExpressionParser (which does much // the same thing it does now)	DESIGN	0.9999948168862014	WITHOUT_CLASSIFICATION	5.183113798553882E-6	DESIGN
//TODO: this is a little inefficient, don't need to do a whole //      deep replaceElements() call	DESIGN	0.9999851568009691	DESIGN	1.4843199030849981E-5	WITHOUT_CLASSIFICATION
//workaround for WebLogic	DESIGN	0.6762229180567103	DESIGN	0.3237770819432897	WITHOUT_CLASSIFICATION
//TODO: this dependency is kinda Bad	DESIGN	0.903382994893282	DESIGN	0.09661700510671807	WITHOUT_CLASSIFICATION
//ick!	DESIGN	0.999105851728155	WITHOUT_CLASSIFICATION	8.941482718450152E-4	DESIGN
// short cut check...	DESIGN	0.9998937886921181	WITHOUT_CLASSIFICATION	1.062113078818654E-4	DESIGN
// todo : move to StringHelper?	DESIGN	0.9966277919063459	WITHOUT_CLASSIFICATION	0.003372208093654141	DESIGN
//yukky! Don't you have subclasses for that! //TODO race conditions can happen here	DESIGN	0.5303549161206056	DESIGN	0.4696450838793943	WITHOUT_CLASSIFICATION
//TODO: We probably should have a StatisticsNotPublishedException, to make it clean	DESIGN	0.9991929625621057	DESIGN	8.070374378943232E-4	WITHOUT_CLASSIFICATION
// FIXME hack to work around fact that calling // Node added = root.addChild( fqn ); doesn't  // properly set the version on the node	DESIGN	0.9334025769391043	DESIGN	0.06659742306089567	WITHOUT_CLASSIFICATION
// TODO: I considered validating the presence of the TS cache here, // but decided to defer unti getQueryCacheInstance() in case the  // cache is never actually used	DESIGN	0.9495227838703463	DESIGN	0.05047721612965371	WITHOUT_CLASSIFICATION
//need to do that here rather than in the save event listener to let //the post insert events to have a id-filled entity when IDENTITY is used (EJB3)	DESIGN	0.9997059152227671	WITHOUT_CLASSIFICATION	2.940847772329477E-4	DESIGN
//TODO: simply remove this override //      if we fix the above todos	DESIGN	0.9373493116036599	DESIGN	0.0626506883963402	WITHOUT_CLASSIFICATION
// This, is used by SessionFactoryImpl to hand to the generated SessionImpl; // was the only reason I could see that we cannot just use null as // Settings.cacheProvider	DESIGN	0.9981416713600063	WITHOUT_CLASSIFICATION	0.0018583286399936221	DESIGN
// this is done here 'cos we might only know the type here (ugly!) // TODO: improve this a lot:	DESIGN	0.999970938267243	DESIGN	2.9061732756936486E-5	WITHOUT_CLASSIFICATION
// todo : would love to have this work on a notification basis //    where the successful binding of an entity/subclass would //    emit a notification which the extendsQueue entries could //    react to...	DESIGN	0.9635661725263203	WITHOUT_CLASSIFICATION	0.03643382747367972	DESIGN
// TODO : not sure the best way to handle this. // The non-performant way :	DESIGN	0.9994329730475465	DESIGN	5.670269524535714E-4	WITHOUT_CLASSIFICATION
// would be better to use the element-type to determine // whether the old and the new are equal here; the problem being // we do not necessarily have access to the element type in all // cases	DESIGN	0.9797392600361675	WITHOUT_CLASSIFICATION	0.02026073996383246	DESIGN
// This next bit is to allow for both unsaved-value="negative" // and for "older" behavior where version number did not get // seeded if it was already set in the object // TODO: shift it into unsaved-value strategy	DESIGN	0.9991172937443821	WITHOUT_CLASSIFICATION	8.827062556178451E-4	DESIGN
// merges don't cascade to uninitialized collections //	DESIGN	0.9999473783596088	WITHOUT_CLASSIFICATION	5.2621640391100964E-5	DESIGN
// TODO: an alternative is to check if the owner has changed; if it hasn't then // return collection.getOwner()	DESIGN	0.9830476246542862	WITHOUT_CLASSIFICATION	0.016952375345713845	DESIGN
//it is possible that the tree-walking in OuterJoinLoader can get to //an association defined by a subclass, in which case the property-ref //might refer to a property defined on a subclass of the current class //in this case, the table name is not known - this temporary solution  //assumes that the property-ref refers to a property of the subclass //table that the association belongs to (a reasonable guess) //TODO: fix this, add: OuterJoinLoadable.getSubclassPropertyTableName(String propertyName)	DESIGN	0.8666985537553233	DESIGN	0.1333014462446766	WITHOUT_CLASSIFICATION
// this only works because collection entries are kept in a sequenced // map by persistence context (maybe we should do like entities and // keep a separate sequences set...) //TODO: calling entrySet on an IdentityMap is SLOW!!	DESIGN	0.8602213035117745	WITHOUT_CLASSIFICATION	0.13977869648822555	DESIGN
// important, to account for newly saved entities in query // todo : some kind of check for new status...	DESIGN	0.9845267600630148	WITHOUT_CLASSIFICATION	0.015473239936985187	DESIGN
// brand new collection //TODO: or an array!! we can't lock objects with arrays now??	DESIGN	0.9997403312746045	WITHOUT_CLASSIFICATION	2.596687253954801E-4	DESIGN
//TODO: if object was an uninitialized proxy, this is inefficient, //      resulting in two SQL selects	DESIGN	0.924854648924666	WITHOUT_CLASSIFICATION	0.07514535107533407	DESIGN
//before cascade! //TODO: should this be Session.instantiate(Persister, ...)?	DESIGN	0.5397751292387232	WITHOUT_CLASSIFICATION	0.4602248707612769	DESIGN
// TODO : absolutely no usages of this constructor form; can it go away?	DESIGN	0.9998087696317802	DESIGN	1.9123036821985798E-4	WITHOUT_CLASSIFICATION
// todo : need to find a clean way to handle the "event source" role // a seperate classs responsible for generating/dispatching events just duplicates most of the Session methods... // passing around seperate reto interceptor, factory, actionQueue, and persistentContext is not manageable...	DESIGN	0.9972599695956107	WITHOUT_CLASSIFICATION	0.0027400304043892617	DESIGN
// todo : remove	DESIGN	0.9992881071551032	WITHOUT_CLASSIFICATION	7.11892844896893E-4	DESIGN
//aliasRefNode.resolve( false, false, aliasRefNode.getText() ); //TODO: is it kosher to do it here? //TODO: is it kosher to do it here?	DESIGN	0.9987754315006123	DESIGN	0.0012245684993877006	WITHOUT_CLASSIFICATION
// No explicit select expression; render the id and properties // projection lists for every persister in the from clause into // a single 'token node'. //TODO: the only reason we need this stuff now is collection filters, //      we should get rid of derived select clause completely!	DESIGN	0.9935721783387395	DESIGN	0.006427821661260571	WITHOUT_CLASSIFICATION
// TODO : an optimization here would be to consider cascade deletes and not gen those delete statements; //      the difficulty is the ordering of the tables here vs the cascade attributes on the persisters -> //          the table info gotten here should really be self-contained (i.e., a class representation //          defining all the needed attributes), then we could then get an array of those	DESIGN	0.9369742578681777	DESIGN	0.0630257421318222	WITHOUT_CLASSIFICATION
// TODO: get SQL rendering out of here, create an AST for the join expressions. // Use the SQL generator grammar to generate the SQL text for the index expression.	DESIGN	0.9958519961817796	WITHOUT_CLASSIFICATION	0.004148003818220507	DESIGN
// TODO : this really needs to be delayed unitl after we definitively know all node types // where this is currently a problem is parameters for which where we cannot unequivocally // resolve an expected type	DESIGN	0.9937247523315507	DESIGN	0.00627524766844936	WITHOUT_CLASSIFICATION
// TODO: Figure out a better way to get the FROM elements in a proper tree structure. // If this is not the destination of a many-to-many, add it as a child of the origin.	DESIGN	0.9999675240517599	DESIGN	3.247594824007184E-5	WITHOUT_CLASSIFICATION
// work around that crazy issue where the tree contains // "empty" FromElements (no text); afaict, this is caused // by FromElementFactory.createCollectionJoin()	DESIGN	0.972371884873222	WITHOUT_CLASSIFICATION	0.027628115126778024	DESIGN
//TODO: this class does too many things! we need a different //kind of path expression parser for each of the diffferent //ways in which path expressions can occur	DESIGN	0.9237577327481769	WITHOUT_CLASSIFICATION	0.07624226725182322	DESIGN
//real hacky... // used to count the nesting of parentheses	DESIGN	0.9757724625773984	WITHOUT_CLASSIFICATION	0.024227537422601635	DESIGN
// TODO : would be really nice to cache the spec on the query-def so as to not have to re-calc the hash; // currently not doable though because of the resultset-ref stuff...	DESIGN	0.9980643394332221	DESIGN	0.0019356605667778539	WITHOUT_CLASSIFICATION
//for arrays, we should end the collection load before resolving //the entities, since the actual array instances are not instantiated //during loading //TODO: or we could do this polymorphically, and have two //      different operations implemented differently for arrays	DESIGN	0.6639541462274202	DESIGN	0.33604585377257984	WITHOUT_CLASSIFICATION
// polymorphism not really handled completely correctly, // perhaps...well, actually its ok, assuming that the // entity name used in the lookup is the same as the // the one used here, which it will be	DESIGN	0.9971867255767992	WITHOUT_CLASSIFICATION	0.0028132744232007454	DESIGN
// TODO: should "record" how many properties we have reffered to - and if we  //       don't get'em'all we throw an exception! Way better than trial and error ;)	DESIGN	0.9999203489394228	DESIGN	7.965106057719429E-5	WITHOUT_CLASSIFICATION
// VERY IMPORTANT!!!! - This class needs to be free of any static references // to any CGLIB or Javassist classes.  Otherwise, users will always need both // on their classpaths no matter which (if either) they use. // // Another option here would be to remove the Hibernate.isPropertyInitialized() // method and have the users go through the SessionFactory to get this information.	DESIGN	0.980010158170618	WITHOUT_CLASSIFICATION	0.01998984182938206	DESIGN
// TODO: is it really neceassry to provide Configuration to CollectionPersisters ? Should it not be enough with associated class ? // or why does EntityPersister's not get access to configuration ? // // The only reason I could see that Configuration gets passed to collection persisters // is so that they can look up the dom4j node name of the entity element in case // no explicit node name was applied at the collection element level.  Are you kidding me? // Trivial to fix then.  Just store and expose the node name on the entity persister // (which the collection persister looks up anyway via other means...).	DESIGN	0.9986811568748681	DESIGN	0.0013188431251318846	WITHOUT_CLASSIFICATION
//for backward compatibility, allow a set with no not-null  //element columns, using all columns in the row locater SQL //TODO: create an implicit not null constraint on all cols?	DESIGN	0.994078603260289	WITHOUT_CLASSIFICATION	0.005921396739711043	DESIGN
//SPACES //TODO: i'm not sure, but perhaps we should exclude //      abstract denormalized tables?	DESIGN	0.9993715425610846	DESIGN	6.284574389154535E-4	WITHOUT_CLASSIFICATION
//workaround, for backward compatibility of sets with no //not-null columns, assume all columns are used in the //row locator SQL	DESIGN	0.912292182515351	WITHOUT_CLASSIFICATION	0.08770781748464887	DESIGN
//note that this method could easily be moved up to BasicEntityPersister, //if we ever needed to reuse it from other subclasses	DESIGN	0.9828859614377149	WITHOUT_CLASSIFICATION	0.017114038562285095	DESIGN
//index += getPropertyColumnSpan( i ); //TODO:  this is kinda slow...	DESIGN	0.999530827860547	DESIGN	4.691721394530876E-4	WITHOUT_CLASSIFICATION
//TODO: need some caching scheme? really comes down to decision  //      regarding amount of state (if any) kept on PropertyAccessors	DESIGN	0.9420422764346122	DESIGN	0.0579577235653877	WITHOUT_CLASSIFICATION
// TODO: here is why we need to make bytecode provider global :( // TODO : again, fix this after HHH-1907 is complete	DESIGN	0.9999960676886414	DESIGN	3.932311358672038E-6	WITHOUT_CLASSIFICATION
//TODO: Yuck! This is not quite good enough, it's a quick //hack around the problem of having a to-one association //that refers to an embedded component:	DESIGN	0.9936814712100716	DESIGN	0.006318528789928524	WITHOUT_CLASSIFICATION
// for DOM4J "collections" only // TODO: it would be better if this was done at the higher level by Printer	DESIGN	0.7298170115097732	DESIGN	0.2701829884902267	WITHOUT_CLASSIFICATION
// would be great to move all this below here into another method that could also be used // from the new scrolling stuff. // // Would need to change the way the max-row stuff is handled (i.e. behind an interface) so // that I could do the control breaking at the means to know when to stop	DESIGN	0.9467807881791137	WITHOUT_CLASSIFICATION	0.053219211820886354	DESIGN
//TODO: can we *always* use the "null property" approach for everything?	DESIGN	0.5017535328348522	WITHOUT_CLASSIFICATION	0.4982464671651479	DESIGN
//polymorphism comment above	DESIGN	0.9984230982079689	WITHOUT_CLASSIFICATION	0.0015769017920309995	DESIGN
// some messy, complex stuff here, since createCriteria() can take an // aliased path, or a path rooted at the creating criteria instance	DESIGN	0.9999991822975404	WITHOUT_CLASSIFICATION	8.177024596721553E-7	DESIGN
//TODO: really bad, evil hack to fix!!!	DESIGN	0.9965969015022184	DESIGN	0.003403098497781636	WITHOUT_CLASSIFICATION
// ugly hack for cases like "elements(foo.bar.collection)" // (multi-part path expression ending in elements or indices)	DESIGN	0.9992649073536428	WITHOUT_CLASSIFICATION	7.350926463572197E-4	DESIGN
// try block is a hack around fact that currently tuplizers are not // given the opportunity to resolve a subclass entity name.  this // allows the (we assume custom) interceptor the ability to // influence this decision if we were not able to based on the // given entityName	DESIGN	0.9946710086270212	WITHOUT_CLASSIFICATION	0.005328991372978879	DESIGN
/////////////////////////////////////////////////////////////////////// // HACK ALERT !!!!!!!!!!!!!!!!!!!!!!!!!!!! // Attempt to work around "ghost" ImpliedFromElements that occasionally // show up between the actual things being joined.  This consistently // occurs from index nodes (at least against many-to-many).  Not sure // if there are other conditions // // Essentially, look-ahead to the next FromElement that actually // writes something to the SQL	DESIGN	0.8963444103770958	WITHOUT_CLASSIFICATION	0.10365558962290423	DESIGN
//init the table here instead of earlier, so that we can get a quoted table name //TODO: would it be better to simply pass the qualified table name, instead of //      splitting it up into schema/catalog/table names	DESIGN	0.8881395764702338	DESIGN	0.11186042352976619	WITHOUT_CLASSIFICATION
// TODO : would be great to have a Mapping#hasNonIdentifierPropertyNamedId method // I don't believe that Mapping#getReferencedPropertyType accounts for the identifier property; so // if it returns for a property named 'id', then we should have a non-id field named id	DESIGN	0.8943641734884232	DESIGN	0.10563582651157674	WITHOUT_CLASSIFICATION
//TODO: is this really necessary????	DESIGN	0.8939714288257116	DESIGN	0.10602857117428847	WITHOUT_CLASSIFICATION
//TODO: ideally we need the construction of PropertyAccessor to take the following: //      1) EntityMode //      2) EntityMode-specific data (i.e., the classname for pojo entities) //      3) Property-specific data based on the EntityMode (i.e., property-name or dom4j-node-name) // The easiest way, with the introduction of the new runtime-metamodel classes, would be the // the following predicates: //      1) PropertyAccessorFactory.getPropertyAccessor() takes references to both a //          org.hibernate.metadata.EntityModeMetadata and org.hibernate.metadata.Property //      2) What is now termed a "PropertyAccessor" stores any values needed from those two //          pieces of information //      3) Code can then simply call PropertyAccess.getGetter() with no parameters; likewise with //          PropertyAccessor.getSetter()	DESIGN	0.7234113009798173	WITHOUT_CLASSIFICATION	0.2765886990201827	DESIGN
//TODO: this is temporary in that the end result will probably not take a Property reference per-se.	DESIGN	0.9856952970029634	DESIGN	0.014304702997036654	WITHOUT_CLASSIFICATION
// todo : this eventually needs to be removed	DESIGN	0.8454626240197135	WITHOUT_CLASSIFICATION	0.1545373759802865	DESIGN
//TODO: make this a bit nicer	DESIGN	0.9062296839506238	DESIGN	0.09377031604937625	WITHOUT_CLASSIFICATION
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.8953718974133404	DESIGN	0.10462810258665955	WITHOUT_CLASSIFICATION
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.8953718974133404	DESIGN	0.10462810258665955	WITHOUT_CLASSIFICATION
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.8953718974133404	DESIGN	0.10462810258665955	WITHOUT_CLASSIFICATION
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.8953718974133404	DESIGN	0.10462810258665955	WITHOUT_CLASSIFICATION
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.8953718974133404	DESIGN	0.10462810258665955	WITHOUT_CLASSIFICATION
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.8953718974133404	DESIGN	0.10462810258665955	WITHOUT_CLASSIFICATION
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.8953718974133404	DESIGN	0.10462810258665955	WITHOUT_CLASSIFICATION
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.8953718974133404	DESIGN	0.10462810258665955	WITHOUT_CLASSIFICATION
/**     * FIXME Per the RegionFactory class Javadoc, this constructor version     * should not be necessary.     *      * @param props The configuration properties     */	DESIGN	0.9805791461741109	WITHOUT_CLASSIFICATION	0.01942085382588908	DESIGN
/**     * FIXME Per the RegionFactory class Javadoc, this constructor version     * should not be necessary.     *      * @param props The configuration properties     */	DESIGN	0.9805791461741109	WITHOUT_CLASSIFICATION	0.01942085382588908	DESIGN
/**     * FIXME Per the RegionFactory class Javadoc, this constructor version     * should not be necessary.     *      * @param props The configuration properties     */	DESIGN	0.9805791461741109	WITHOUT_CLASSIFICATION	0.01942085382588908	DESIGN
// TODO : probably better to calculate these and pass them in, as it'll be more performant	DESIGN	0.9905896077996422	DESIGN	0.009410392200357767	WITHOUT_CLASSIFICATION
