//test out the optimizer:	WITHOUT_CLASSIFICATION	0.9999950800157767	WITHOUT_CLASSIFICATION	4.919984223308857E-6	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.9999989479253423	WITHOUT_CLASSIFICATION	1.0520746577541953E-6	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.9999989479253423	WITHOUT_CLASSIFICATION	1.0520746577541953E-6	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.9999989479253423	WITHOUT_CLASSIFICATION	1.0520746577541953E-6	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.9999989479253423	WITHOUT_CLASSIFICATION	1.0520746577541953E-6	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.9999989479253423	WITHOUT_CLASSIFICATION	1.0520746577541953E-6	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.9999989479253423	WITHOUT_CLASSIFICATION	1.0520746577541953E-6	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.9999989479253423	WITHOUT_CLASSIFICATION	1.0520746577541953E-6	DESIGN
// return	WITHOUT_CLASSIFICATION	0.999987541684293	WITHOUT_CLASSIFICATION	1.2458315706985565E-5	DESIGN
// return	WITHOUT_CLASSIFICATION	0.999987541684293	WITHOUT_CLASSIFICATION	1.2458315706985565E-5	DESIGN
/* | this | bean | args | raw bean | */	WITHOUT_CLASSIFICATION	0.9984772555572831	WITHOUT_CLASSIFICATION	0.00152274444271685	DESIGN
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999859560736556	WITHOUT_CLASSIFICATION	1.4043926344384166E-5	DESIGN
// astore 4 // store the raw bean	WITHOUT_CLASSIFICATION	0.9999996437431647	WITHOUT_CLASSIFICATION	3.5625683517961926E-7	DESIGN
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999921408555138	WITHOUT_CLASSIFICATION	7.859144486193872E-6	DESIGN
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999921408555138	WITHOUT_CLASSIFICATION	7.859144486193872E-6	DESIGN
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.9999998889281785	WITHOUT_CLASSIFICATION	1.1107182154167428E-7	DESIGN
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999995313778687	WITHOUT_CLASSIFICATION	4.686221311952566E-7	DESIGN
// putfield // new value of the field	WITHOUT_CLASSIFICATION	0.9999741068917712	WITHOUT_CLASSIFICATION	2.58931082287137E-5	DESIGN
// reference type	WITHOUT_CLASSIFICATION	0.9999562143525658	WITHOUT_CLASSIFICATION	4.378564743411575E-5	DESIGN
// double	WITHOUT_CLASSIFICATION	0.9999919307678035	WITHOUT_CLASSIFICATION	8.06923219647317E-6	DESIGN
// double	WITHOUT_CLASSIFICATION	0.9999919307678035	WITHOUT_CLASSIFICATION	8.06923219647317E-6	DESIGN
// long	WITHOUT_CLASSIFICATION	0.9999988221577673	WITHOUT_CLASSIFICATION	1.1778422327151616E-6	DESIGN
// just decrement the lock, don't recache // (we don't know which transaction won)	WITHOUT_CLASSIFICATION	0.9999826404248273	WITHOUT_CLASSIFICATION	1.7359575172680982E-5	DESIGN
// decode row selection...	WITHOUT_CLASSIFICATION	0.9997182429703454	WITHOUT_CLASSIFICATION	2.8175702965457377E-4	DESIGN
//disassembled state gets put in a new array (we write to cache by value!)	WITHOUT_CLASSIFICATION	0.9999963206137935	WITHOUT_CLASSIFICATION	3.6793862063902328E-6	DESIGN
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999779727479939	WITHOUT_CLASSIFICATION	2.2027252005968953E-5	DESIGN
// CHECK	WITHOUT_CLASSIFICATION	0.9999465208033083	WITHOUT_CLASSIFICATION	5.347919669180734E-5	DESIGN
// ROW ID	WITHOUT_CLASSIFICATION	0.9999740011128447	WITHOUT_CLASSIFICATION	2.599888715520597E-5	DESIGN
// COMPOSITE-ID	WITHOUT_CLASSIFICATION	0.9999818854197614	WITHOUT_CLASSIFICATION	1.8114580238676672E-5	DESIGN
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999851373989568	WITHOUT_CLASSIFICATION	1.4862601043209079E-5	DESIGN
/*	WITHOUT_CLASSIFICATION	0.9199843986423561	WITHOUT_CLASSIFICATION	0.08001560135764392	DESIGN
// DYNAMIC INSERT	WITHOUT_CLASSIFICATION	0.9999925543801754	WITHOUT_CLASSIFICATION	7.4456198244603084E-6	DESIGN
// PERSISTER	WITHOUT_CLASSIFICATION	0.9999659631981314	WITHOUT_CLASSIFICATION	3.4036801868581576E-5	DESIGN
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.999994734549639	WITHOUT_CLASSIFICATION	5.265450360941013E-6	DESIGN
// PROPERTIES	WITHOUT_CLASSIFICATION	0.999944418026813	WITHOUT_CLASSIFICATION	5.558197318706873E-5	DESIGN
// PROPERTIES	WITHOUT_CLASSIFICATION	0.999944418026813	WITHOUT_CLASSIFICATION	5.558197318706873E-5	DESIGN
// generated properties can *never* be insertable...	WITHOUT_CLASSIFICATION	0.9999962332968396	WITHOUT_CLASSIFICATION	3.766703160264489E-6	DESIGN
// TABLE	WITHOUT_CLASSIFICATION	0.999936749432989	WITHOUT_CLASSIFICATION	6.325056701094366E-5	DESIGN
//by default, natural-ids are "immutable" (constant)	WITHOUT_CLASSIFICATION	0.9999999948453073	WITHOUT_CLASSIFICATION	5.1546926812989925E-9	DESIGN
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999984429853762	WITHOUT_CLASSIFICATION	1.5570146237677232E-6	DESIGN
// we found some extends attributes referencing entities which were // not already processed.  here we need to locate all entity-names // and class-names contained in this document itself, making sure // that these get removed from the extendz list such that only // extends names which require us to delay processing (i.e. // external to this document and not yet processed) are contained // in the returned result	WITHOUT_CLASSIFICATION	0.8579904681200362	WITHOUT_CLASSIFICATION	0.14200953187996376	DESIGN
/**	WITHOUT_CLASSIFICATION	0.9616571996252745	DESIGN	0.038342800374725525	WITHOUT_CLASSIFICATION
//	WITHOUT_CLASSIFICATION	0.9999538292619589	WITHOUT_CLASSIFICATION	4.617073804128677E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999538292619589	WITHOUT_CLASSIFICATION	4.617073804128677E-5	DESIGN
/**	WITHOUT_CLASSIFICATION	0.9616571996252745	DESIGN	0.038342800374725525	WITHOUT_CLASSIFICATION
//	WITHOUT_CLASSIFICATION	0.9999538292619589	WITHOUT_CLASSIFICATION	4.617073804128677E-5	DESIGN
// If close() is called, guarantee unbind()	WITHOUT_CLASSIFICATION	0.9999999761586986	WITHOUT_CLASSIFICATION	2.384130134974599E-8	DESIGN
// if a ThreadLocalSessionContext-bound session happens to get // serialized, to be completely correct, we need to make sure // that unbinding of that session occurs.	WITHOUT_CLASSIFICATION	0.9999989618364462	WITHOUT_CLASSIFICATION	1.0381635538122242E-6	DESIGN
// on the inverse, it makes sense that if a ThreadLocalSessionContext- // bound session then gets deserialized to go ahead and re-bind it to // the ThreadLocalSessionContext session map.	WITHOUT_CLASSIFICATION	0.9999999891986674	WITHOUT_CLASSIFICATION	1.0801332689750806E-8	DESIGN
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9995905531488893	WITHOUT_CLASSIFICATION	4.094468511106442E-4	DESIGN
// 60 second lock timeout	WITHOUT_CLASSIFICATION	0.9999909563679195	WITHOUT_CLASSIFICATION	9.043632080538561E-6	DESIGN
// OptimisticCache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999797595331369	WITHOUT_CLASSIFICATION	2.0240466863071354E-5	DESIGN
// Cache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999888821949763	WITHOUT_CLASSIFICATION	1.1117805023718385E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999538292619589	WITHOUT_CLASSIFICATION	4.617073804128677E-5	DESIGN
// do the put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999539739938408	WITHOUT_CLASSIFICATION	4.602600615920349E-5	DESIGN
//ignore!	WITHOUT_CLASSIFICATION	0.99997892788016	WITHOUT_CLASSIFICATION	2.107211984000106E-5	DESIGN
// tree cache in optimistic mode seems to have as very difficult // time with remove calls on non-existent nodes (NPEs)...	WITHOUT_CLASSIFICATION	0.9999974470506882	WITHOUT_CLASSIFICATION	2.5529493119475126E-6	DESIGN
//60 seconds	WITHOUT_CLASSIFICATION	0.9999874800048423	WITHOUT_CLASSIFICATION	1.2519995157664963E-5	DESIGN
//ignore!	WITHOUT_CLASSIFICATION	0.99997892788016	WITHOUT_CLASSIFICATION	2.107211984000106E-5	DESIGN
//60 seconds	WITHOUT_CLASSIFICATION	0.9999874800048423	WITHOUT_CLASSIFICATION	1.2519995157664963E-5	DESIGN
//do the failfast put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999993279198788	WITHOUT_CLASSIFICATION	6.720801212791025E-7	DESIGN
// NOTE : evict() operates locally only (i.e., does not propogate // to any other nodes in the potential cluster).  This is // exactly what is needed when we destroy() here; destroy() is used // as part of the process of shutting down a SessionFactory; thus // these removals should not be propogated	WITHOUT_CLASSIFICATION	0.9888998558973547	DESIGN	0.011100144102645272	WITHOUT_CLASSIFICATION
//    protected RegionRootListener listener;	WITHOUT_CLASSIFICATION	0.9999999554925838	WITHOUT_CLASSIFICATION	4.450741617559677E-8	DESIGN
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999848437879262	WITHOUT_CLASSIFICATION	1.515621207380112E-5	DESIGN
// If we've been blocking for the mutex, perhaps another // thread has already reestablished the root. // In case the node was reestablised via replication, confirm it's  // marked "resident" (a status which doesn't replicate)	WITHOUT_CLASSIFICATION	0.9998374471418575	WITHOUT_CLASSIFICATION	1.6255285814256696E-4	DESIGN
// For pessimistic locking, we just want to toss out our ref // to any old invalid root node and get the latest (may be null)            	WITHOUT_CLASSIFICATION	0.9950231404290732	WITHOUT_CLASSIFICATION	0.004976859570926806	DESIGN
// The rest only matters for optimistic locking, where we // need to establish the proper data version on the region root	WITHOUT_CLASSIFICATION	0.9800874161035618	WITHOUT_CLASSIFICATION	0.01991258389643829	DESIGN
// Don't hold a transactional lock for this 	WITHOUT_CLASSIFICATION	0.9990166275257926	WITHOUT_CLASSIFICATION	9.833724742074272E-4	DESIGN
// Make sure the root node for the region exists and  // has a DataVersion that never complains	WITHOUT_CLASSIFICATION	0.9999999948642385	WITHOUT_CLASSIFICATION	5.1357614236112995E-9	DESIGN
// Never evict this node	WITHOUT_CLASSIFICATION	0.9995051579559946	WITHOUT_CLASSIFICATION	4.948420440055311E-4	DESIGN
// Fix up the resident flag	WITHOUT_CLASSIFICATION	0.9997231415962853	WITHOUT_CLASSIFICATION	2.768584037146597E-4	DESIGN
// 60 seconds	WITHOUT_CLASSIFICATION	0.9999968998543702	WITHOUT_CLASSIFICATION	3.100145629859018E-6	DESIGN
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999996172304636	WITHOUT_CLASSIFICATION	3.827695363845635E-7	DESIGN
// no-op. We don't own the cache so we shouldn't stop it.	WITHOUT_CLASSIFICATION	0.9987320970493672	WITHOUT_CLASSIFICATION	0.001267902950632798	DESIGN
// This should only be possible if the caches are constructor injected 	WITHOUT_CLASSIFICATION	0.8774485083903361	WITHOUT_CLASSIFICATION	0.12255149160966397	DESIGN
// We only build caches if *none* were passed in.  Passing in // caches counts as a clear statement of exactly what is wanted	WITHOUT_CLASSIFICATION	0.983446621213606	WITHOUT_CLASSIFICATION	0.016553378786393968	DESIGN
// Set up the cache factory	WITHOUT_CLASSIFICATION	0.9999814048012722	WITHOUT_CLASSIFICATION	1.8595198727816068E-5	DESIGN
// See if the user configured a multiplexer stack	WITHOUT_CLASSIFICATION	0.9999961272317031	WITHOUT_CLASSIFICATION	3.872768296836794E-6	DESIGN
// Default to collections sharing entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999999905151367	WITHOUT_CLASSIFICATION	9.484863288420116E-9	DESIGN
// Default to sharing the entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999999892334097	WITHOUT_CLASSIFICATION	1.0766590171637029E-8	DESIGN
// For Timestamps, we default to a separate config	WITHOUT_CLASSIFICATION	0.9999918493498833	WITHOUT_CLASSIFICATION	8.150650116818801E-6	DESIGN
// We can't change the TM on a running cache; just check // if the cache has no TM and we're OK with that	WITHOUT_CLASSIFICATION	0.9999952583954131	WITHOUT_CLASSIFICATION	4.74160458694835E-6	DESIGN
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.999913334757452	WITHOUT_CLASSIFICATION	8.666524254803444E-5	DESIGN
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999998694643332	WITHOUT_CLASSIFICATION	1.3053566679490279E-7	DESIGN
// This method should be implemented assuming it's valid to  // do start/stop/start -- leave state appropriate for another start	WITHOUT_CLASSIFICATION	0.9920154350018969	DESIGN	0.007984564998103093	WITHOUT_CLASSIFICATION
// Make sure we don't re-release the same cache	WITHOUT_CLASSIFICATION	0.9999983754111688	WITHOUT_CLASSIFICATION	1.624588831329919E-6	DESIGN
// We use a different delegate than the non-optimistic superclass default	WITHOUT_CLASSIFICATION	0.9999999826006638	WITHOUT_CLASSIFICATION	1.7399336263881607E-8	DESIGN
// Following methods we don't delegate since they have so little logic // it's clearer to just implement them here	WITHOUT_CLASSIFICATION	0.7101512142638089	DESIGN	0.2898487857361911	WITHOUT_CLASSIFICATION
// If JBC is using INVALIDATION, we don't want to propagate changes. // We use the Timestamps cache to manage invalidation	WITHOUT_CLASSIFICATION	0.9999993334630884	WITHOUT_CLASSIFICATION	6.665369116533963E-7	DESIGN
// We don't want to waste effort setting an option if JBC is // already in LOCAL mode. If JBC is REPL_(A)SYNC then check // if they passed an config option to disable query replication	WITHOUT_CLASSIFICATION	0.9998755840268908	WITHOUT_CLASSIFICATION	1.244159731091337E-4	DESIGN
// Don't hold the JBC node lock throughout the tx, as that // prevents updates // Add a zero (or low) timeout option so we don't block // waiting for tx's that did a put to commit	WITHOUT_CLASSIFICATION	0.9999999916908885	WITHOUT_CLASSIFICATION	8.309111544667891E-9	DESIGN
// Double check the distributed cache	WITHOUT_CLASSIFICATION	0.9999991424612413	WITHOUT_CLASSIFICATION	8.575387586244523E-7	DESIGN
// Get an exclusive right to update JBC for this key from this node.	WITHOUT_CLASSIFICATION	0.9988318248023135	WITHOUT_CLASSIFICATION	0.0011681751976865126	DESIGN
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999995475221908	WITHOUT_CLASSIFICATION	4.5247780919325716E-7	DESIGN
// Initial load from JBC	WITHOUT_CLASSIFICATION	0.9999934828946834	WITHOUT_CLASSIFICATION	6.517105316526226E-6	DESIGN
// See if we had a 2nd invalidation from the same initial // preinvalidation timestamp. If so, only increment // if the new current value is an increase	WITHOUT_CLASSIFICATION	0.9999997711285923	WITHOUT_CLASSIFICATION	2.2887140774418603E-7	DESIGN
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999995475221908	WITHOUT_CLASSIFICATION	4.5247780919325716E-7	DESIGN
// If the workspace node has null as well, OK; if not we've // been modified in a non-comparable manner, which we have to // treat as us being newer	WITHOUT_CLASSIFICATION	0.999999863149509	WITHOUT_CLASSIFICATION	1.3685049113498682E-7	DESIGN
// The standard comparator types are not Serializable but are singletons	WITHOUT_CLASSIFICATION	0.9999839453818208	WITHOUT_CLASSIFICATION	1.605461817921389E-5	DESIGN
// ignore!	WITHOUT_CLASSIFICATION	0.9999962899555914	WITHOUT_CLASSIFICATION	3.7100444085021662E-6	DESIGN
// ignore it	WITHOUT_CLASSIFICATION	0.9999993824651696	WITHOUT_CLASSIFICATION	6.175348303847167E-7	DESIGN
// construct the cache	WITHOUT_CLASSIFICATION	0.9999950666636557	WITHOUT_CLASSIFICATION	4.933336344393349E-6	DESIGN
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999997358143876	WITHOUT_CLASSIFICATION	2.6418561236021183E-7	DESIGN
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999997358143876	WITHOUT_CLASSIFICATION	2.6418561236021183E-7	DESIGN
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999901550768018	WITHOUT_CLASSIFICATION	9.844923198218421E-6	DESIGN
//swaldman 2006-08-28: define c3p0-style configuration parameters for initialPoolSize, which //                     hibernate sensibly lets default to minPoolSize, but we'll let users //                     override it with the c3p0-style property if they want.	WITHOUT_CLASSIFICATION	0.999856661236735	WITHOUT_CLASSIFICATION	1.433387632650691E-4	DESIGN
/*DataSource unpooled = DataSources.unpooledDataSource(	WITHOUT_CLASSIFICATION	0.9999875918696554	WITHOUT_CLASSIFICATION	1.2408130344732692E-5	DESIGN
// TRUE if the pool is borrowed from the outside, FALSE if we used to create it	WITHOUT_CLASSIFICATION	0.9985247941560818	WITHOUT_CLASSIFICATION	0.0014752058439183	DESIGN
// get a connection from the pool (thru DriverManager, cfr. Proxool doc)	WITHOUT_CLASSIFICATION	0.9999998575622672	WITHOUT_CLASSIFICATION	1.4243773285379553E-7	DESIGN
// set the Transaction Isolation if defined	WITHOUT_CLASSIFICATION	0.9999999814239385	WITHOUT_CLASSIFICATION	1.857606139341397E-8	DESIGN
// toggle autoCommit to false if set	WITHOUT_CLASSIFICATION	0.9999992290273472	WITHOUT_CLASSIFICATION	7.709726528528023E-7	DESIGN
// return the connection	WITHOUT_CLASSIFICATION	0.9999962302869204	WITHOUT_CLASSIFICATION	3.769713079654223E-6	DESIGN
// Get the configurator files (if available)	WITHOUT_CLASSIFICATION	0.9999998071793718	WITHOUT_CLASSIFICATION	1.928206282300792E-7	DESIGN
// Default the Proxool alias setting	WITHOUT_CLASSIFICATION	0.9999999372228251	WITHOUT_CLASSIFICATION	6.277717486641947E-8	DESIGN
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999894704868963	WITHOUT_CLASSIFICATION	1.0529513103678276E-5	DESIGN
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999894704868963	WITHOUT_CLASSIFICATION	1.0529513103678276E-5	DESIGN
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999999680394887	WITHOUT_CLASSIFICATION	3.1960511310177566E-8	DESIGN
// Set the existing pool flag to true	WITHOUT_CLASSIFICATION	0.9999999463400682	WITHOUT_CLASSIFICATION	5.365993186566856E-8	DESIGN
// Configured using the JAXP Configurator	WITHOUT_CLASSIFICATION	0.9998642667024389	WITHOUT_CLASSIFICATION	1.357332975611708E-4	DESIGN
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999894704868963	WITHOUT_CLASSIFICATION	1.0529513103678276E-5	DESIGN
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999999680394887	WITHOUT_CLASSIFICATION	3.1960511310177566E-8	DESIGN
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999999680394887	WITHOUT_CLASSIFICATION	3.1960511310177566E-8	DESIGN
// Configured using the Properties File Configurator	WITHOUT_CLASSIFICATION	0.9999318210178851	WITHOUT_CLASSIFICATION	6.817898211489631E-5	DESIGN
// Remember Isolation level	WITHOUT_CLASSIFICATION	0.999992021102151	WITHOUT_CLASSIFICATION	7.978897849076934E-6	DESIGN
// If the provider was leeching off an existing pool don't close it	WITHOUT_CLASSIFICATION	0.9999998244836412	WITHOUT_CLASSIFICATION	1.755163586544351E-7	DESIGN
// We have created the pool ourselves, so shut it down	WITHOUT_CLASSIFICATION	0.9999791514462233	WITHOUT_CLASSIFICATION	2.084855377674745E-5	DESIGN
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.9998188333588874	WITHOUT_CLASSIFICATION	1.811666411124776E-4	DESIGN
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.9998188333588874	WITHOUT_CLASSIFICATION	1.811666411124776E-4	DESIGN
//always overwrite nonversioned data	WITHOUT_CLASSIFICATION	0.9999999993897796	WITHOUT_CLASSIFICATION	6.102203471539881E-10	DESIGN
//public Currency getCurrency(int col) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9985221465026318	WITHOUT_CLASSIFICATION	0.0014778534973681728	DESIGN
// default is POJO	WITHOUT_CLASSIFICATION	0.9999958081868194	WITHOUT_CLASSIFICATION	4.191813180617313E-6	DESIGN
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999985448703509	WITHOUT_CLASSIFICATION	1.4551296491367794E-6	DESIGN
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999985448703509	WITHOUT_CLASSIFICATION	1.4551296491367794E-6	DESIGN
//private CacheEntry cacheEntry;	WITHOUT_CLASSIFICATION	0.9999856950375295	WITHOUT_CLASSIFICATION	1.430496247041746E-5	DESIGN
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9999842654536958	WITHOUT_CLASSIFICATION	1.573454630422809E-5	DESIGN
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.999152068242942	WITHOUT_CLASSIFICATION	8.479317570581217E-4	DESIGN
// get the updated snapshot of the entity state by cloning current state; // it is safe to copy in place, since by this time no-one else (should have) // has a reference  to the array	WITHOUT_CLASSIFICATION	0.9965792837918258	WITHOUT_CLASSIFICATION	0.0034207162081742984	DESIGN
// this entity defines proeprty generation, so process those generated // values...	WITHOUT_CLASSIFICATION	0.9997234383457216	WITHOUT_CLASSIFICATION	2.765616542784597E-4	DESIGN
// have the entity entry perform post-update processing, passing it the // update state and the new version (if one).	WITHOUT_CLASSIFICATION	0.9999999571562069	WITHOUT_CLASSIFICATION	4.2843793118553914E-8	DESIGN
/*!persister.isCacheInvalidationRequired()*/	WITHOUT_CLASSIFICATION	0.9999994425599791	WITHOUT_CLASSIFICATION	5.574400209528803E-7	DESIGN
// need to look it up from the persistence-context	WITHOUT_CLASSIFICATION	0.9999477843126472	WITHOUT_CLASSIFICATION	5.22156873527157E-5	DESIGN
//sort first by role name	WITHOUT_CLASSIFICATION	0.9999144522575747	WITHOUT_CLASSIFICATION	8.55477424253198E-5	DESIGN
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.999152068242942	WITHOUT_CLASSIFICATION	8.479317570581217E-4	DESIGN
//then by fk	WITHOUT_CLASSIFICATION	0.9999002717525298	WITHOUT_CLASSIFICATION	9.972824747020574E-5	DESIGN
// nothing to do	WITHOUT_CLASSIFICATION	0.9998966613450669	WITHOUT_CLASSIFICATION	1.0333865493307205E-4	DESIGN
// nothing to do	WITHOUT_CLASSIFICATION	0.9998966613450669	WITHOUT_CLASSIFICATION	1.0333865493307205E-4	DESIGN
// an existing collection that was either non-empty or uninitialized // is replaced by null or a different collection // (if the collection is uninitialized, hibernate has no way of // knowing if the collection is actually empty without querying the db)	WITHOUT_CLASSIFICATION	0.9999965495020025	WITHOUT_CLASSIFICATION	3.4504979974593477E-6	DESIGN
// this method is called when a new non-null collection is persisted // or when an existing (non-null) collection is moved to a new owner	WITHOUT_CLASSIFICATION	0.9999990482020205	WITHOUT_CLASSIFICATION	9.517979794222523E-7	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999538292619589	WITHOUT_CLASSIFICATION	4.617073804128677E-5	DESIGN
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9999842168744698	WITHOUT_CLASSIFICATION	1.5783125530157532E-5	DESIGN
//do nothing - we only need to notify the cache...	WITHOUT_CLASSIFICATION	0.9999820301591436	WITHOUT_CLASSIFICATION	1.7969840856474215E-5	DESIGN
//sort first by entity name	WITHOUT_CLASSIFICATION	0.9998890868995861	WITHOUT_CLASSIFICATION	1.10913100413842E-4	DESIGN
//then by id	WITHOUT_CLASSIFICATION	0.9996075922571764	WITHOUT_CLASSIFICATION	3.9240774282364976E-4	DESIGN
// to be safe...	WITHOUT_CLASSIFICATION	0.9995355755891677	WITHOUT_CLASSIFICATION	4.644244108323178E-4	DESIGN
// no transformations took place, so handle it as we would a // non-instrumented class	WITHOUT_CLASSIFICATION	0.9993889936538443	WITHOUT_CLASSIFICATION	6.110063461557222E-4	DESIGN
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999999105963877	WITHOUT_CLASSIFICATION	8.940361233499877E-8	DESIGN
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999999105963877	WITHOUT_CLASSIFICATION	8.940361233499877E-8	DESIGN
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999900424544527	WITHOUT_CLASSIFICATION	9.957545547326572E-6	DESIGN
//test out the optimizer:	WITHOUT_CLASSIFICATION	0.9999950800157767	WITHOUT_CLASSIFICATION	4.919984223308857E-6	DESIGN
// set the name of bulk accessor.	WITHOUT_CLASSIFICATION	0.9999999571925265	WITHOUT_CLASSIFICATION	4.280747348945598E-8	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.9999989479253423	WITHOUT_CLASSIFICATION	1.0520746577541953E-6	DESIGN
// invokespecial	WITHOUT_CLASSIFICATION	0.9999847384104186	WITHOUT_CLASSIFICATION	1.5261589581373064E-5	DESIGN
// return	WITHOUT_CLASSIFICATION	0.999987541684293	WITHOUT_CLASSIFICATION	1.2458315706985565E-5	DESIGN
// aload_1 // load bean	WITHOUT_CLASSIFICATION	0.999999256446396	WITHOUT_CLASSIFICATION	7.435536040814907E-7	DESIGN
// checkcast // cast bean	WITHOUT_CLASSIFICATION	0.9999969290647127	WITHOUT_CLASSIFICATION	3.070935287301515E-6	DESIGN
// astore_3 // store bean	WITHOUT_CLASSIFICATION	0.9999983289813662	WITHOUT_CLASSIFICATION	1.6710186338118698E-6	DESIGN
// aload_2 // args	WITHOUT_CLASSIFICATION	0.9999979146084399	WITHOUT_CLASSIFICATION	2.085391560225297E-6	DESIGN
// iconst_i // continue to aastore // growing stack is 1	WITHOUT_CLASSIFICATION	0.9999987852062251	WITHOUT_CLASSIFICATION	1.2147937748155037E-6	DESIGN
// new	WITHOUT_CLASSIFICATION	0.9999792992285869	WITHOUT_CLASSIFICATION	2.0700771413156377E-5	DESIGN
// dup	WITHOUT_CLASSIFICATION	0.9999182648380351	WITHOUT_CLASSIFICATION	8.173516196485436E-5	DESIGN
// aload_3 // load the raw bean	WITHOUT_CLASSIFICATION	0.999999944551862	WITHOUT_CLASSIFICATION	5.544813801839246E-8	DESIGN
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999859560736556	WITHOUT_CLASSIFICATION	1.4043926344384166E-5	DESIGN
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999993397496952	WITHOUT_CLASSIFICATION	6.602503048164934E-7	DESIGN
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999993397496952	WITHOUT_CLASSIFICATION	6.602503048164934E-7	DESIGN
// aastore // args	WITHOUT_CLASSIFICATION	0.9999960465559862	WITHOUT_CLASSIFICATION	3.953444013793865E-6	DESIGN
/* | this | bean | args | i | raw bean | exception | */	WITHOUT_CLASSIFICATION	0.9979654093630812	WITHOUT_CLASSIFICATION	0.0020345906369188026	DESIGN
// required to exception table // iconst_0 // i	WITHOUT_CLASSIFICATION	0.9999992252861444	WITHOUT_CLASSIFICATION	7.747138555871849E-7	DESIGN
// istore_3 // store i	WITHOUT_CLASSIFICATION	0.9999872077390264	WITHOUT_CLASSIFICATION	1.2792260973611081E-5	DESIGN
// aload_1 // load the bean	WITHOUT_CLASSIFICATION	0.9999997853002658	WITHOUT_CLASSIFICATION	2.146997342341641E-7	DESIGN
// checkcast // cast the bean into a raw bean	WITHOUT_CLASSIFICATION	0.9999998132710066	WITHOUT_CLASSIFICATION	1.8672899334312694E-7	DESIGN
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999921408555138	WITHOUT_CLASSIFICATION	7.859144486193872E-6	DESIGN
// start region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9999901247740911	WITHOUT_CLASSIFICATION	9.875225908969274E-6	DESIGN
// iinc 3, 1	WITHOUT_CLASSIFICATION	0.9999952076367888	WITHOUT_CLASSIFICATION	4.792363211226985E-6	DESIGN
// aload 4 // load the raw bean	WITHOUT_CLASSIFICATION	0.9999998709633147	WITHOUT_CLASSIFICATION	1.2903668538210955E-7	DESIGN
// aload_2 // load the args	WITHOUT_CLASSIFICATION	0.9999998465590568	WITHOUT_CLASSIFICATION	1.5344094312285054E-7	DESIGN
// iconst_i	WITHOUT_CLASSIFICATION	0.9999923847827528	WITHOUT_CLASSIFICATION	7.615217247203666E-6	DESIGN
// aaload	WITHOUT_CLASSIFICATION	0.9999928203459943	WITHOUT_CLASSIFICATION	7.179654005719165E-6	DESIGN
// checkcast	WITHOUT_CLASSIFICATION	0.9999925581517219	WITHOUT_CLASSIFICATION	7.441848278099212E-6	DESIGN
// checkcast (case of primitive type) // invokevirtual (case of primitive type)	WITHOUT_CLASSIFICATION	0.9999999696618211	WITHOUT_CLASSIFICATION	3.0338178743051944E-8	DESIGN
// checkcast (case of reference type)	WITHOUT_CLASSIFICATION	0.9999991457428031	WITHOUT_CLASSIFICATION	8.542571969717346E-7	DESIGN
/* current stack len = 2 */	WITHOUT_CLASSIFICATION	0.9999949637447503	WITHOUT_CLASSIFICATION	5.036255249760407E-6	DESIGN
// end region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9999931145349484	WITHOUT_CLASSIFICATION	6.885465051519039E-6	DESIGN
// register in exception table	WITHOUT_CLASSIFICATION	0.9999909148573898	WITHOUT_CLASSIFICATION	9.085142610238607E-6	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.9999989479253423	WITHOUT_CLASSIFICATION	1.0520746577541953E-6	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.9999989479253423	WITHOUT_CLASSIFICATION	1.0520746577541953E-6	DESIGN
// return	WITHOUT_CLASSIFICATION	0.999987541684293	WITHOUT_CLASSIFICATION	1.2458315706985565E-5	DESIGN
// return	WITHOUT_CLASSIFICATION	0.999987541684293	WITHOUT_CLASSIFICATION	1.2458315706985565E-5	DESIGN
// dup	WITHOUT_CLASSIFICATION	0.9999182648380351	WITHOUT_CLASSIFICATION	8.173516196485436E-5	DESIGN
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999993397496952	WITHOUT_CLASSIFICATION	6.602503048164934E-7	DESIGN
// checkcast	WITHOUT_CLASSIFICATION	0.9999925581517219	WITHOUT_CLASSIFICATION	7.441848278099212E-6	DESIGN
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.9999998889281785	WITHOUT_CLASSIFICATION	1.1107182154167428E-7	DESIGN
// astore 5 // store exception	WITHOUT_CLASSIFICATION	0.9999886924323598	WITHOUT_CLASSIFICATION	1.1307567640243183E-5	DESIGN
// new // BulkAccessorException	WITHOUT_CLASSIFICATION	0.9999978049879695	WITHOUT_CLASSIFICATION	2.195012030512523E-6	DESIGN
// aload 5 // load exception	WITHOUT_CLASSIFICATION	0.9999905005695661	WITHOUT_CLASSIFICATION	9.499430433907614E-6	DESIGN
// iload_3 // i	WITHOUT_CLASSIFICATION	0.9999890802557414	WITHOUT_CLASSIFICATION	1.0919744258633206E-5	DESIGN
// invokespecial // BulkAccessorException.<init>	WITHOUT_CLASSIFICATION	0.9999997404516267	WITHOUT_CLASSIFICATION	2.595483733697158E-7	DESIGN
// athrow	WITHOUT_CLASSIFICATION	0.9999979340567704	WITHOUT_CLASSIFICATION	2.065943229577565E-6	DESIGN
// WARNING: classfile only	WITHOUT_CLASSIFICATION	0.9999592222383201	WITHOUT_CLASSIFICATION	4.07777616799148E-5	DESIGN
//swallow	WITHOUT_CLASSIFICATION	0.9999961508350966	WITHOUT_CLASSIFICATION	3.849164903394264E-6	DESIGN
/* local variable | this | */	WITHOUT_CLASSIFICATION	0.9999507251666582	WITHOUT_CLASSIFICATION	4.9274833341879053E-5	DESIGN
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.9998106364087127	WITHOUT_CLASSIFICATION	1.8936359128715038E-4	DESIGN
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.9998106364087127	WITHOUT_CLASSIFICATION	1.8936359128715038E-4	DESIGN
// getfield // get field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999998068622018	WITHOUT_CLASSIFICATION	1.9313779819246865E-7	DESIGN
// areturn // return the value of the field	WITHOUT_CLASSIFICATION	0.9999986992282066	WITHOUT_CLASSIFICATION	1.3007717933709568E-6	DESIGN
/* local variables | this | callback | */	WITHOUT_CLASSIFICATION	0.9994842335643267	WITHOUT_CLASSIFICATION	5.157664356734244E-4	DESIGN
// aload_1 // load callback	WITHOUT_CLASSIFICATION	0.9999861921958857	WITHOUT_CLASSIFICATION	1.380780411433004E-5	DESIGN
// putfield // put field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999992615035259	WITHOUT_CLASSIFICATION	7.384964740374622E-7	DESIGN
// case of non-static field	WITHOUT_CLASSIFICATION	0.9999805839277325	WITHOUT_CLASSIFICATION	1.9416072267628888E-5	DESIGN
// getfield // get each field	WITHOUT_CLASSIFICATION	0.999960911441447	WITHOUT_CLASSIFICATION	3.908855855291556E-5	DESIGN
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999995313778687	WITHOUT_CLASSIFICATION	4.686221311952566E-7	DESIGN
// ifnonnull	WITHOUT_CLASSIFICATION	0.9999962768914761	WITHOUT_CLASSIFICATION	3.7231085239706965E-6	DESIGN
// *return // each type	WITHOUT_CLASSIFICATION	0.9999981250227845	WITHOUT_CLASSIFICATION	1.8749772154826456E-6	DESIGN
// *return // each type	WITHOUT_CLASSIFICATION	0.9999981250227845	WITHOUT_CLASSIFICATION	1.8749772154826456E-6	DESIGN
// *store_1 // each type	WITHOUT_CLASSIFICATION	0.9999993798324144	WITHOUT_CLASSIFICATION	6.201675857124839E-7	DESIGN
// ldc // name of the field	WITHOUT_CLASSIFICATION	0.9999846501768385	WITHOUT_CLASSIFICATION	1.534982316154706E-5	DESIGN
// *load_1 // each type	WITHOUT_CLASSIFICATION	0.9999990659291447	WITHOUT_CLASSIFICATION	9.340708552869935E-7	DESIGN
// invokeinterface // invoke Callback.read*() // each type	WITHOUT_CLASSIFICATION	0.9999753696765752	WITHOUT_CLASSIFICATION	2.463032342470167E-5	DESIGN
// int	WITHOUT_CLASSIFICATION	0.9999684074606905	WITHOUT_CLASSIFICATION	3.1592539309537924E-5	DESIGN
// return	WITHOUT_CLASSIFICATION	0.999987541684293	WITHOUT_CLASSIFICATION	1.2458315706985565E-5	DESIGN
// dup	WITHOUT_CLASSIFICATION	0.9999182648380351	WITHOUT_CLASSIFICATION	8.173516196485436E-5	DESIGN
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999859560736556	WITHOUT_CLASSIFICATION	1.4043926344384166E-5	DESIGN
// checkcast	WITHOUT_CLASSIFICATION	0.9999925581517219	WITHOUT_CLASSIFICATION	7.441848278099212E-6	DESIGN
// checkcast	WITHOUT_CLASSIFICATION	0.9999925581517219	WITHOUT_CLASSIFICATION	7.441848278099212E-6	DESIGN
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.999999712913913	WITHOUT_CLASSIFICATION	2.8708608702465126E-7	DESIGN
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.999999712913913	WITHOUT_CLASSIFICATION	2.8708608702465126E-7	DESIGN
// ifnonnull (label1)	WITHOUT_CLASSIFICATION	0.9999990124456186	WITHOUT_CLASSIFICATION	9.875543813481721E-7	DESIGN
// *load_1	WITHOUT_CLASSIFICATION	0.9999960238835349	WITHOUT_CLASSIFICATION	3.976116464988924E-6	DESIGN
// *load_1	WITHOUT_CLASSIFICATION	0.9999960238835349	WITHOUT_CLASSIFICATION	3.976116464988924E-6	DESIGN
// putfield	WITHOUT_CLASSIFICATION	0.9999343179776156	WITHOUT_CLASSIFICATION	6.568202238440974E-5	DESIGN
// return ;	WITHOUT_CLASSIFICATION	0.9999853743651314	WITHOUT_CLASSIFICATION	1.4625634868603147E-5	DESIGN
// ldc // field name	WITHOUT_CLASSIFICATION	0.9999896531866678	WITHOUT_CLASSIFICATION	1.0346813332258046E-5	DESIGN
// getfield // old value of the field	WITHOUT_CLASSIFICATION	0.9999866623024641	WITHOUT_CLASSIFICATION	1.3337697535896864E-5	DESIGN
// invokeinterface // callback.write*(..)	WITHOUT_CLASSIFICATION	0.9999541530903111	WITHOUT_CLASSIFICATION	4.584690968889259E-5	DESIGN
// reference type	WITHOUT_CLASSIFICATION	0.9999562143525658	WITHOUT_CLASSIFICATION	4.378564743411575E-5	DESIGN
// reference type	WITHOUT_CLASSIFICATION	0.9999562143525658	WITHOUT_CLASSIFICATION	4.378564743411575E-5	DESIGN
// not array	WITHOUT_CLASSIFICATION	0.9999225042511997	WITHOUT_CLASSIFICATION	7.74957488003629E-5	DESIGN
// array of reference type	WITHOUT_CLASSIFICATION	0.9999781693241512	WITHOUT_CLASSIFICATION	2.1830675848908172E-5	DESIGN
// boolean	WITHOUT_CLASSIFICATION	0.9999997317914677	WITHOUT_CLASSIFICATION	2.682085322438136E-7	DESIGN
// byte	WITHOUT_CLASSIFICATION	0.9999955519601577	WITHOUT_CLASSIFICATION	4.4480398423998655E-6	DESIGN
// char	WITHOUT_CLASSIFICATION	0.9999939591787463	WITHOUT_CLASSIFICATION	6.04082125365243E-6	DESIGN
// short	WITHOUT_CLASSIFICATION	0.9999732503341905	WITHOUT_CLASSIFICATION	2.6749665809499508E-5	DESIGN
// double	WITHOUT_CLASSIFICATION	0.9999919307678035	WITHOUT_CLASSIFICATION	8.06923219647317E-6	DESIGN
// float	WITHOUT_CLASSIFICATION	0.999992294442462	WITHOUT_CLASSIFICATION	7.70555753807828E-6	DESIGN
// float	WITHOUT_CLASSIFICATION	0.999992294442462	WITHOUT_CLASSIFICATION	7.70555753807828E-6	DESIGN
// long	WITHOUT_CLASSIFICATION	0.9999988221577673	WITHOUT_CLASSIFICATION	1.1778422327151616E-6	DESIGN
// long	WITHOUT_CLASSIFICATION	0.9999988221577673	WITHOUT_CLASSIFICATION	1.1778422327151616E-6	DESIGN
// bad type	WITHOUT_CLASSIFICATION	0.9999247130305945	WITHOUT_CLASSIFICATION	7.528696940547249E-5	DESIGN
// bad type	WITHOUT_CLASSIFICATION	0.9999247130305945	WITHOUT_CLASSIFICATION	7.528696940547249E-5	DESIGN
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999999737731465	WITHOUT_CLASSIFICATION	2.6226853419143855E-8	DESIGN
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999999737731465	WITHOUT_CLASSIFICATION	2.6226853419143855E-8	DESIGN
// reference type	WITHOUT_CLASSIFICATION	0.9999562143525658	WITHOUT_CLASSIFICATION	4.378564743411575E-5	DESIGN
// double	WITHOUT_CLASSIFICATION	0.9999919307678035	WITHOUT_CLASSIFICATION	8.06923219647317E-6	DESIGN
// float	WITHOUT_CLASSIFICATION	0.999992294442462	WITHOUT_CLASSIFICATION	7.70555753807828E-6	DESIGN
// float	WITHOUT_CLASSIFICATION	0.999992294442462	WITHOUT_CLASSIFICATION	7.70555753807828E-6	DESIGN
// long	WITHOUT_CLASSIFICATION	0.9999988221577673	WITHOUT_CLASSIFICATION	1.1778422327151616E-6	DESIGN
// bad type	WITHOUT_CLASSIFICATION	0.9999247130305945	WITHOUT_CLASSIFICATION	7.528696940547249E-5	DESIGN
// bad type	WITHOUT_CLASSIFICATION	0.9999247130305945	WITHOUT_CLASSIFICATION	7.528696940547249E-5	DESIGN
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999999737731465	WITHOUT_CLASSIFICATION	2.6226853419143855E-8	DESIGN
// skip finalize methods	WITHOUT_CLASSIFICATION	0.9997308106404063	WITHOUT_CLASSIFICATION	2.691893595937074E-4	DESIGN
//Mainly for OSCache	WITHOUT_CLASSIFICATION	0.9999656139192489	WITHOUT_CLASSIFICATION	3.438608075109229E-5	DESIGN
//decrement the lock	WITHOUT_CLASSIFICATION	0.9999965435805813	WITHOUT_CLASSIFICATION	3.4564194186877657E-6	DESIGN
// create new lock that times out immediately	WITHOUT_CLASSIFICATION	0.9999995537424247	WITHOUT_CLASSIFICATION	4.462575753965915E-7	DESIGN
//recache the updated state	WITHOUT_CLASSIFICATION	0.9995804530434935	WITHOUT_CLASSIFICATION	4.195469565064255E-4	DESIGN
// noop	WITHOUT_CLASSIFICATION	0.9999694700195002	WITHOUT_CLASSIFICATION	3.052998049981373E-5	DESIGN
//null clientLock is remotely possible but will never happen in practice	WITHOUT_CLASSIFICATION	0.9998273764286779	WITHOUT_CLASSIFICATION	1.72623571322048E-4	DESIGN
// we really could refresh the item if it // is not a lock, but it might be slower //return freshTimestamp < txTimestamp	WITHOUT_CLASSIFICATION	0.9914482187904055	DESIGN	0.008551781209594546	WITHOUT_CLASSIFICATION
//by requiring <, we rely on lock timeout in the case of an unsuccessful update!	WITHOUT_CLASSIFICATION	0.9999821232995599	WITHOUT_CLASSIFICATION	1.7876700440014898E-5	DESIGN
// the user provided resulttransformer, not the one used with "select new". Here to avoid mangling // transformed/non-transformed results.	WITHOUT_CLASSIFICATION	0.999994156932502	WITHOUT_CLASSIFICATION	5.843067497953457E-6	DESIGN
// disassemble positional parameters	WITHOUT_CLASSIFICATION	0.9999999796161636	WITHOUT_CLASSIFICATION	2.0383836466526507E-8	DESIGN
// disassemble named parameters	WITHOUT_CLASSIFICATION	0.9999984632433213	WITHOUT_CLASSIFICATION	1.5367566786409338E-6	DESIGN
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999901550768018	WITHOUT_CLASSIFICATION	9.844923198218421E-6	DESIGN
// noop	WITHOUT_CLASSIFICATION	0.9999694700195002	WITHOUT_CLASSIFICATION	3.052998049981373E-5	DESIGN
//noop	WITHOUT_CLASSIFICATION	0.9999693617870373	WITHOUT_CLASSIFICATION	3.063821296266297E-5	DESIGN
//noop	WITHOUT_CLASSIFICATION	0.9999693617870373	WITHOUT_CLASSIFICATION	3.063821296266297E-5	DESIGN
// this is called from SettingsFactory irregardless; trivial to simply disregard	WITHOUT_CLASSIFICATION	0.9835505865712882	WITHOUT_CLASSIFICATION	0.01644941342871172	DESIGN
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999168464119275	WITHOUT_CLASSIFICATION	8.315358807262798E-5	DESIGN
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999168464119275	WITHOUT_CLASSIFICATION	8.315358807262798E-5	DESIGN
//throw new UnsupportedOperationException("Can't write to a readonly object");	WITHOUT_CLASSIFICATION	0.9999705884269141	WITHOUT_CLASSIFICATION	2.941157308591714E-5	DESIGN
//assembled state gets put in a new array (we read from cache by value!)	WITHOUT_CLASSIFICATION	0.9999569231210775	WITHOUT_CLASSIFICATION	4.307687892253325E-5	DESIGN
//persister.setIdentifier(result, id); //before calling interceptor, for consistency with normal load	WITHOUT_CLASSIFICATION	0.9999987984215026	WITHOUT_CLASSIFICATION	1.201578497446201E-6	DESIGN
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9987988417064765	WITHOUT_CLASSIFICATION	0.0012011582935234756	DESIGN
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9987988417064765	WITHOUT_CLASSIFICATION	0.0012011582935234756	DESIGN
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999779727479939	WITHOUT_CLASSIFICATION	2.2027252005968953E-5	DESIGN
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9948834184339617	WITHOUT_CLASSIFICATION	0.005116581566038401	DESIGN
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9948834184339617	WITHOUT_CLASSIFICATION	0.005116581566038401	DESIGN
// classes mentioned in extends not available - so put it in queue	WITHOUT_CLASSIFICATION	0.9999971107506019	WITHOUT_CLASSIFICATION	2.8892493980167963E-6	DESIGN
// get meta's from <hibernate-mapping>	WITHOUT_CLASSIFICATION	0.9999949221803621	WITHOUT_CLASSIFICATION	5.0778196378924634E-6	DESIGN
// get meta's from <class>	WITHOUT_CLASSIFICATION	0.9999972672916024	WITHOUT_CLASSIFICATION	2.7327083976171566E-6	DESIGN
// DB-OBJECTNAME	WITHOUT_CLASSIFICATION	0.9999910179733017	WITHOUT_CLASSIFICATION	8.982026698244357E-6	DESIGN
// MUTABLE	WITHOUT_CLASSIFICATION	0.9999714512594882	WITHOUT_CLASSIFICATION	2.8548740511727887E-5	DESIGN
// WHERE	WITHOUT_CLASSIFICATION	0.9998601226278566	WITHOUT_CLASSIFICATION	1.3987737214345521E-4	DESIGN
// CHECK	WITHOUT_CLASSIFICATION	0.9999465208033083	WITHOUT_CLASSIFICATION	5.347919669180734E-5	DESIGN
// POLYMORPHISM	WITHOUT_CLASSIFICATION	0.9999695935944175	WITHOUT_CLASSIFICATION	3.0406405582561642E-5	DESIGN
// TODO:	WITHOUT_CLASSIFICATION	0.8381875661609618	DESIGN	0.16181243383903812	WITHOUT_CLASSIFICATION
// ID	WITHOUT_CLASSIFICATION	0.9999911954372518	WITHOUT_CLASSIFICATION	8.804562748120375E-6	DESIGN
// VERSION / TIMESTAMP	WITHOUT_CLASSIFICATION	0.9999612862768416	WITHOUT_CLASSIFICATION	3.871372315848545E-5	DESIGN
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999851373989568	WITHOUT_CLASSIFICATION	1.4862601043209079E-5	DESIGN
// Primary key constraint	WITHOUT_CLASSIFICATION	0.9999978194556514	WITHOUT_CLASSIFICATION	2.180544348724381E-6	DESIGN
// this is either a <version/> tag with no type attribute, // or a <timestamp/> tag	WITHOUT_CLASSIFICATION	0.999998429270345	WITHOUT_CLASSIFICATION	1.5707296550488047E-6	DESIGN
// for version properties marked as being generated, make sure they are "always" // generated; aka, "insert" is invalid; this is dis-allowed by the DTD, // but just to make sure...	WITHOUT_CLASSIFICATION	0.9999999702531619	WITHOUT_CLASSIFICATION	2.9746838012060776E-8	DESIGN
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999851373989568	WITHOUT_CLASSIFICATION	1.4862601043209079E-5	DESIGN
// ( (Column) discrim.getColumnIterator().next() ).setType(type);	WITHOUT_CLASSIFICATION	0.999999779787475	WITHOUT_CLASSIFICATION	2.2021252501762812E-7	DESIGN
// go ahead and set the lazy here, since pojo.proxy can override it.	WITHOUT_CLASSIFICATION	0.9999997244544547	WITHOUT_CLASSIFICATION	2.7554554529455877E-7	DESIGN
// DYNAMIC UPDATE	WITHOUT_CLASSIFICATION	0.9999720830826806	WITHOUT_CLASSIFICATION	2.791691731937753E-5	DESIGN
// IMPORT	WITHOUT_CLASSIFICATION	0.9999825944521413	WITHOUT_CLASSIFICATION	1.7405547858675188E-5	DESIGN
// BATCH SIZE	WITHOUT_CLASSIFICATION	0.9999716271172339	WITHOUT_CLASSIFICATION	2.837288276624714E-5	DESIGN
// SELECT BEFORE UPDATE	WITHOUT_CLASSIFICATION	0.9999393001070532	WITHOUT_CLASSIFICATION	6.0699892946673366E-5	DESIGN
// OPTIMISTIC LOCK MODE	WITHOUT_CLASSIFICATION	0.9999198055221468	WITHOUT_CLASSIFICATION	8.019447785330223E-5	DESIGN
// PERSISTER	WITHOUT_CLASSIFICATION	0.9999659631981314	WITHOUT_CLASSIFICATION	3.4036801868581576E-5	DESIGN
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999283351810572	WITHOUT_CLASSIFICATION	7.166481894282391E-5	DESIGN
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.999994734549639	WITHOUT_CLASSIFICATION	5.265450360941013E-6	DESIGN
// properties	WITHOUT_CLASSIFICATION	0.999986429881704	WITHOUT_CLASSIFICATION	1.3570118295882239E-5	DESIGN
// joined subclasses	WITHOUT_CLASSIFICATION	0.9999757224022195	WITHOUT_CLASSIFICATION	2.4277597780401122E-5	DESIGN
// KEY	WITHOUT_CLASSIFICATION	0.999968773998792	WITHOUT_CLASSIFICATION	3.1226001208058266E-5	DESIGN
// CHECK	WITHOUT_CLASSIFICATION	0.9999465208033083	WITHOUT_CLASSIFICATION	5.347919669180734E-5	DESIGN
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999283351810572	WITHOUT_CLASSIFICATION	7.166481894282391E-5	DESIGN
// properties	WITHOUT_CLASSIFICATION	0.999986429881704	WITHOUT_CLASSIFICATION	1.3570118295882239E-5	DESIGN
// KEY	WITHOUT_CLASSIFICATION	0.999968773998792	WITHOUT_CLASSIFICATION	3.1226001208058266E-5	DESIGN
// model.getKey().setType( new Type( model.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999999378579221	WITHOUT_CLASSIFICATION	6.214207787593538E-8	DESIGN
// TABLENAME	WITHOUT_CLASSIFICATION	0.9999281600981221	WITHOUT_CLASSIFICATION	7.183990187792513E-5	DESIGN
// join.getKey().setType( new Type( lazz.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999999372145453	WITHOUT_CLASSIFICATION	6.27854547493412E-8	DESIGN
// PROPERTIES	WITHOUT_CLASSIFICATION	0.999944418026813	WITHOUT_CLASSIFICATION	5.558197318706873E-5	DESIGN
// COLUMN(S)	WITHOUT_CLASSIFICATION	0.9999940544820476	WITHOUT_CLASSIFICATION	5.945517952408623E-6	DESIGN
// column index	WITHOUT_CLASSIFICATION	0.9999998274879816	WITHOUT_CLASSIFICATION	1.7251201845933015E-7	DESIGN
//column unique-key	WITHOUT_CLASSIFICATION	0.9999861292370045	WITHOUT_CLASSIFICATION	1.3870762995540048E-5	DESIGN
// automatically makes a column with the default name if none is specifed by XML	WITHOUT_CLASSIFICATION	0.9999941595689303	WITHOUT_CLASSIFICATION	5.840431069621133E-6	DESIGN
// for an any	WITHOUT_CLASSIFICATION	0.9999978434934154	WITHOUT_CLASSIFICATION	2.1565065846928558E-6	DESIGN
// insertable simply because that is the user did not specify // anything; just override it	WITHOUT_CLASSIFICATION	0.9999999943362887	WITHOUT_CLASSIFICATION	5.6637112991925345E-9	DESIGN
// the user specifically supplied insert="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999997216145652	WITHOUT_CLASSIFICATION	2.7838543475387896E-7	DESIGN
// properties generated on update can never be updateable...	WITHOUT_CLASSIFICATION	0.9997996613261659	WITHOUT_CLASSIFICATION	2.0033867383408818E-4	DESIGN
// updateable only because the user did not specify  // anything; just override it	WITHOUT_CLASSIFICATION	0.9999999824245708	WITHOUT_CLASSIFICATION	1.7575429318629434E-8	DESIGN
// the user specifically supplied update="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999991323106474	WITHOUT_CLASSIFICATION	8.67689352605703E-7	DESIGN
// ROLENAME	WITHOUT_CLASSIFICATION	0.9999830298830387	WITHOUT_CLASSIFICATION	1.697011696135867E-5	DESIGN
// FETCH STRATEGY	WITHOUT_CLASSIFICATION	0.9999174919231364	WITHOUT_CLASSIFICATION	8.250807686366187E-5	DESIGN
// TABLE	WITHOUT_CLASSIFICATION	0.999936749432989	WITHOUT_CLASSIFICATION	6.325056701094366E-5	DESIGN
//tableName = mappings.getNamingStrategy().propertyToTableName( className, path );	WITHOUT_CLASSIFICATION	0.9999999922126351	WITHOUT_CLASSIFICATION	7.787364840623264E-9	DESIGN
// SORT	WITHOUT_CLASSIFICATION	0.9999483181681074	WITHOUT_CLASSIFICATION	5.168183189269841E-5	DESIGN
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999283351810572	WITHOUT_CLASSIFICATION	7.166481894282391E-5	DESIGN
// unsorted, natural, comparator.class.name	WITHOUT_CLASSIFICATION	0.9999998439631189	WITHOUT_CLASSIFICATION	1.5603688100202613E-7	DESIGN
// ORPHAN DELETE (used for programmer error detection)	WITHOUT_CLASSIFICATION	0.9999988437523757	WITHOUT_CLASSIFICATION	1.1562476242159602E-6	DESIGN
// set up second pass	WITHOUT_CLASSIFICATION	0.9999802570866215	WITHOUT_CLASSIFICATION	1.9742913378469238E-5	DESIGN
// an "embedded" component (composite ids and unique) // note that this does not handle nested components	WITHOUT_CLASSIFICATION	0.9998025620943047	WITHOUT_CLASSIFICATION	1.974379056951944E-4	DESIGN
// a nested composite element	WITHOUT_CLASSIFICATION	0.9999872721567706	WITHOUT_CLASSIFICATION	1.2727843229327263E-5	DESIGN
// for an any // we will have to use reflection	WITHOUT_CLASSIFICATION	0.9999686769146691	WITHOUT_CLASSIFICATION	3.1323085331041195E-5	DESIGN
//NOTE SPECIAL CASE: // one-to-one constrained=false cannot be proxied, // so default to join and non-lazy	WITHOUT_CLASSIFICATION	0.9999998873494887	WITHOUT_CLASSIFICATION	1.1265051125963469E-7	DESIGN
// use old (HB 2.1) defaults if outer-join is specified	WITHOUT_CLASSIFICATION	0.9999999915177353	WITHOUT_CLASSIFICATION	8.482264758214921E-9	DESIGN
//lazy = !join;	WITHOUT_CLASSIFICATION	0.9999238333263334	WITHOUT_CLASSIFICATION	7.616667366663889E-5	DESIGN
// GENERATOR	WITHOUT_CLASSIFICATION	0.9999668643069395	WITHOUT_CLASSIFICATION	3.3135693060543E-5	DESIGN
// ID UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999989416125609	WITHOUT_CLASSIFICATION	1.0583874392076893E-6	DESIGN
// VERSION UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999976616157487	WITHOUT_CLASSIFICATION	2.338384251326128E-6	DESIGN
// not necessarily a *unique* property reference	WITHOUT_CLASSIFICATION	0.9998330796744337	WITHOUT_CLASSIFICATION	1.6692032556625015E-4	DESIGN
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999984429853762	WITHOUT_CLASSIFICATION	1.5570146237677232E-6	DESIGN
// contained elements:	WITHOUT_CLASSIFICATION	0.9999983934266073	WITHOUT_CLASSIFICATION	1.6065733926384935E-6	DESIGN
// for non-inverse one-to-many, with a not-null fk, add a backref!	WITHOUT_CLASSIFICATION	0.9999952765773554	WITHOUT_CLASSIFICATION	4.7234226445168256E-6	DESIGN
// Bind the where	WITHOUT_CLASSIFICATION	0.9999938473661238	WITHOUT_CLASSIFICATION	6.1526338761887645E-6	DESIGN
// Bind the order-by	WITHOUT_CLASSIFICATION	0.999999802384764	WITHOUT_CLASSIFICATION	1.9761523591426652E-7	DESIGN
// Bind the filters	WITHOUT_CLASSIFICATION	0.9999995779941314	WITHOUT_CLASSIFICATION	4.2200586866396917E-7	DESIGN
// overriding inherited meta attribute. HBX-621 & HBX-793	WITHOUT_CLASSIFICATION	0.9999561968884358	WITHOUT_CLASSIFICATION	4.3803111564176904E-5	DESIGN
// first, iterate over all elements capable of defining an extends attribute // collecting all found extends references if they cannot be resolved // against the already processed mappings.	WITHOUT_CLASSIFICATION	0.9999999992321681	WITHOUT_CLASSIFICATION	7.678319259707298E-10	DESIGN
// mappings might contain either the "raw" extends name (in the case of // an entity-name mapping) or a FQN (in the case of a POJO mapping).	WITHOUT_CLASSIFICATION	0.9999999995484371	WITHOUT_CLASSIFICATION	4.515628204312888E-10	DESIGN
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.8592271909101697	WITHOUT_CLASSIFICATION	0.1407728090898303	DESIGN
//SessionFactory name:	WITHOUT_CLASSIFICATION	0.9999841015345969	WITHOUT_CLASSIFICATION	1.5898465403050577E-5	DESIGN
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9998943619229579	WITHOUT_CLASSIFICATION	1.0563807704220777E-4	DESIGN
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9998943619229579	WITHOUT_CLASSIFICATION	1.0563807704220777E-4	DESIGN
//Interrogate JDBC metadata	WITHOUT_CLASSIFICATION	0.9999977816307832	WITHOUT_CLASSIFICATION	2.2183692168511304E-6	DESIGN
// user supplied JDBC connections	WITHOUT_CLASSIFICATION	0.9999984929235942	WITHOUT_CLASSIFICATION	1.5070764056832543E-6	DESIGN
//use dialect default properties	WITHOUT_CLASSIFICATION	0.9999992418642608	WITHOUT_CLASSIFICATION	7.581357392885897E-7	DESIGN
// Transaction settings:	WITHOUT_CLASSIFICATION	0.9995574567798575	WITHOUT_CLASSIFICATION	4.425432201424326E-4	DESIGN
//SQL Generation settings:	WITHOUT_CLASSIFICATION	0.998566734028786	WITHOUT_CLASSIFICATION	0.0014332659712139775	DESIGN
//Query parser settings:	WITHOUT_CLASSIFICATION	0.9926588475889118	WITHOUT_CLASSIFICATION	0.00734115241108821	DESIGN
// Second-level / query cache:	WITHOUT_CLASSIFICATION	0.9999645728291615	WITHOUT_CLASSIFICATION	3.5427170838500205E-5	DESIGN
// The cache provider is needed when we either have second-level cache enabled // or query cache enabled.  Note that useSecondLevelCache is enabled by default	WITHOUT_CLASSIFICATION	0.9999901099831959	WITHOUT_CLASSIFICATION	9.89001680415872E-6	DESIGN
//SQL Exception converter:	WITHOUT_CLASSIFICATION	0.9998390450397612	WITHOUT_CLASSIFICATION	1.6095496023887227E-4	DESIGN
//Statistics and logging:	WITHOUT_CLASSIFICATION	0.9991492321226246	WITHOUT_CLASSIFICATION	8.507678773752371E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999538292619589	WITHOUT_CLASSIFICATION	4.617073804128677E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999538292619589	WITHOUT_CLASSIFICATION	4.617073804128677E-5	DESIGN
//Schema export:	WITHOUT_CLASSIFICATION	0.9999972092679215	WITHOUT_CLASSIFICATION	2.7907320785152187E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999538292619589	WITHOUT_CLASSIFICATION	4.617073804128677E-5	DESIGN
// legacy behavior, apply the bridge...	WITHOUT_CLASSIFICATION	0.9999997594961331	WITHOUT_CLASSIFICATION	2.405038669397937E-7	DESIGN
// maybe a concrete SQLpropertyresult type, but Map is exactly what is required at the moment	WITHOUT_CLASSIFICATION	0.9992738625380949	WITHOUT_CLASSIFICATION	7.26137461905129E-4	DESIGN
//if dotted and not load-collection nor return-join //regular property	WITHOUT_CLASSIFICATION	0.9999983370698378	WITHOUT_CLASSIFICATION	1.662930162243788E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999538292619589	WITHOUT_CLASSIFICATION	4.617073804128677E-5	DESIGN
// public getters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995571517950491	WITHOUT_CLASSIFICATION	4.428482049509724E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999538292619589	WITHOUT_CLASSIFICATION	4.617073804128677E-5	DESIGN
// package protected setters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998938208904465	WITHOUT_CLASSIFICATION	1.061791095535003E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999538292619589	WITHOUT_CLASSIFICATION	4.617073804128677E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999538292619589	WITHOUT_CLASSIFICATION	4.617073804128677E-5	DESIGN
// using local since the inheritedMetas at this point is not the correct map since it is always the empty map	WITHOUT_CLASSIFICATION	0.9999998125953676	WITHOUT_CLASSIFICATION	1.8740463230573105E-7	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999538292619589	WITHOUT_CLASSIFICATION	4.617073804128677E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999538292619589	WITHOUT_CLASSIFICATION	4.617073804128677E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999538292619589	WITHOUT_CLASSIFICATION	4.617073804128677E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999538292619589	WITHOUT_CLASSIFICATION	4.617073804128677E-5	DESIGN
// if doc is null, then for whatever reason, the cached file cannot be used...	WITHOUT_CLASSIFICATION	0.9999264214512846	WITHOUT_CLASSIFICATION	7.3578548715312E-5	DESIGN
// drop them in reverse order in case db needs it done that way...	WITHOUT_CLASSIFICATION	0.8557112441476045	WITHOUT_CLASSIFICATION	0.1442887558523956	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999538292619589	WITHOUT_CLASSIFICATION	4.617073804128677E-5	DESIGN
// This method may be called many times!!	WITHOUT_CLASSIFICATION	0.7569547025550771	WITHOUT_CLASSIFICATION	0.24304529744492298	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999538292619589	WITHOUT_CLASSIFICATION	4.617073804128677E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999538292619589	WITHOUT_CLASSIFICATION	4.617073804128677E-5	DESIGN
// found	WITHOUT_CLASSIFICATION	0.9999068768033089	WITHOUT_CLASSIFICATION	9.31231966909892E-5	DESIGN
// found	WITHOUT_CLASSIFICATION	0.9999068768033089	WITHOUT_CLASSIFICATION	9.31231966909892E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999538292619589	WITHOUT_CLASSIFICATION	4.617073804128677E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999538292619589	WITHOUT_CLASSIFICATION	4.617073804128677E-5	DESIGN
//<String, String>	WITHOUT_CLASSIFICATION	0.999915388866369	WITHOUT_CLASSIFICATION	8.461113363100612E-5	DESIGN
//<String, String>	WITHOUT_CLASSIFICATION	0.999915388866369	WITHOUT_CLASSIFICATION	8.461113363100612E-5	DESIGN
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.8592271909101697	WITHOUT_CLASSIFICATION	0.1407728090898303	DESIGN
//Set USE_REFLECTION_OPTIMIZER to false to fix HHH-227	WITHOUT_CLASSIFICATION	0.999994836429985	WITHOUT_CLASSIFICATION	5.163570014958279E-6	DESIGN
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9998468319130551	WITHOUT_CLASSIFICATION	1.531680869449128E-4	DESIGN
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.999999681182954	WITHOUT_CLASSIFICATION	3.188170460287647E-7	DESIGN
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999900424544527	WITHOUT_CLASSIFICATION	9.957545547326572E-6	DESIGN
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9998468319130551	WITHOUT_CLASSIFICATION	1.531680869449128E-4	DESIGN
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.999999681182954	WITHOUT_CLASSIFICATION	3.188170460287647E-7	DESIGN
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999949784342528	WITHOUT_CLASSIFICATION	5.021565747260551E-6	DESIGN
//maintain correct duplication if loaded in a cartesian product	WITHOUT_CLASSIFICATION	0.9999997589980962	WITHOUT_CLASSIFICATION	2.4100190377286004E-7	DESIGN
// the element has been removed from the set	WITHOUT_CLASSIFICATION	0.9999864223779197	WITHOUT_CLASSIFICATION	1.3577622080344333E-5	DESIGN
// the element has changed	WITHOUT_CLASSIFICATION	0.9999992467579213	WITHOUT_CLASSIFICATION	7.53242078832833E-7	DESIGN
//Careful: these methods do not initialize the collection.	WITHOUT_CLASSIFICATION	0.9933078582162514	WITHOUT_CLASSIFICATION	0.006692141783748526	DESIGN
//needed so that we remove this collection from the second-level cache	WITHOUT_CLASSIFICATION	0.9992838445279268	WITHOUT_CLASSIFICATION	7.161554720731632E-4	DESIGN
// override on some subclasses	WITHOUT_CLASSIFICATION	0.9999941471414169	WITHOUT_CLASSIFICATION	5.8528585830994185E-6	DESIGN
//override on some subclasses	WITHOUT_CLASSIFICATION	0.9999180577130927	WITHOUT_CLASSIFICATION	8.19422869072757E-5	DESIGN
//do this bit after setting initialized to true or it will recurse	WITHOUT_CLASSIFICATION	0.9971819773637828	WITHOUT_CLASSIFICATION	0.002818022636217242	DESIGN
// short-circuit(s) // no new elements, the old list contains only Orphans // no old elements, so no Orphans neither	WITHOUT_CLASSIFICATION	0.999999996264915	WITHOUT_CLASSIFICATION	3.735085032547265E-9	DESIGN
// create the collection holding the Orphans	WITHOUT_CLASSIFICATION	0.9999999051617093	WITHOUT_CLASSIFICATION	9.483829063091519E-8	DESIGN
// collect EntityIdentifier(s) of the *current* elements - add them into a HashSet for fast access	WITHOUT_CLASSIFICATION	0.9999999498564307	WITHOUT_CLASSIFICATION	5.014356923729715E-8	DESIGN
// iterate over the *old* list	WITHOUT_CLASSIFICATION	0.9999987330083429	WITHOUT_CLASSIFICATION	1.266991657212112E-6	DESIGN
/*(array==null) ? tempList.size() :*/	WITHOUT_CLASSIFICATION	0.9999678884176122	WITHOUT_CLASSIFICATION	3.211158238777806E-5	DESIGN
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999900424544527	WITHOUT_CLASSIFICATION	9.957545547326572E-6	DESIGN
/*(array==null) ? tempList.get(i) :*/	WITHOUT_CLASSIFICATION	0.9999779676907075	WITHOUT_CLASSIFICATION	2.2032309292479105E-5	DESIGN
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9998307368972033	WITHOUT_CLASSIFICATION	1.6926310279670597E-4	DESIGN
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9998307368972033	WITHOUT_CLASSIFICATION	1.6926310279670597E-4	DESIGN
// amazingly, these two will work because AbstractCollection // uses iterator() to fill the array	WITHOUT_CLASSIFICATION	0.9853296437989434	WITHOUT_CLASSIFICATION	0.014670356201056674	DESIGN
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999949784342528	WITHOUT_CLASSIFICATION	5.021565747260551E-6	DESIGN
// finally, what it's all about...	WITHOUT_CLASSIFICATION	0.9960146072551824	WITHOUT_CLASSIFICATION	0.00398539274481757	DESIGN
// note that if we load this collection from a cartesian product // the multiplicity would be broken ... so use an idbag instead	WITHOUT_CLASSIFICATION	0.999191386177515	DESIGN	8.086138224849124E-4	WITHOUT_CLASSIFICATION
// Anyway, here we implement <set> semantics for a // <one-to-many> <bag>!	WITHOUT_CLASSIFICATION	0.9996362254495481	WITHOUT_CLASSIFICATION	3.6377455045191417E-4	DESIGN
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999965245887721	WITHOUT_CLASSIFICATION	3.4754112278693823E-6	DESIGN
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9998038837782623	WITHOUT_CLASSIFICATION	1.9611622173759864E-4	DESIGN
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999949784342528	WITHOUT_CLASSIFICATION	5.021565747260551E-6	DESIGN
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999965245887721	WITHOUT_CLASSIFICATION	3.4754112278693823E-6	DESIGN
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9998038837782623	WITHOUT_CLASSIFICATION	1.9611622173759864E-4	DESIGN
/*public boolean equals(Object other) {	WITHOUT_CLASSIFICATION	0.9999898157747938	WITHOUT_CLASSIFICATION	1.0184225206152681E-5	DESIGN
// List OPERATIONS:	WITHOUT_CLASSIFICATION	0.9999979884819562	WITHOUT_CLASSIFICATION	2.01151804382222E-6	DESIGN
//pad with nulls from the current last element up to the new index	WITHOUT_CLASSIFICATION	0.999999887289454	WITHOUT_CLASSIFICATION	1.1271054599642175E-7	DESIGN
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999949784342528	WITHOUT_CLASSIFICATION	5.021565747260551E-6	DESIGN
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999949784342528	WITHOUT_CLASSIFICATION	5.021565747260551E-6	DESIGN
// from Map	WITHOUT_CLASSIFICATION	0.9999804697359012	WITHOUT_CLASSIFICATION	1.9530264098783076E-5	DESIGN
// from SortedMap	WITHOUT_CLASSIFICATION	0.9999949355134866	WITHOUT_CLASSIFICATION	5.06448651337505E-6	DESIGN
//inject the data	WITHOUT_CLASSIFICATION	0.9999862537354277	WITHOUT_CLASSIFICATION	1.3746264572393999E-5	DESIGN
// cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999518969431014	WITHOUT_CLASSIFICATION	4.810305689874258E-5	DESIGN
//default pool size 20	WITHOUT_CLASSIFICATION	0.9999995680283291	WITHOUT_CLASSIFICATION	4.319716708680972E-7	DESIGN
// trying via forName() first to be as close to DriverManager's semantics	WITHOUT_CLASSIFICATION	0.999999995840575	WITHOUT_CLASSIFICATION	4.15942498545014E-9	DESIGN
// if debug level is enabled, then log the password, otherwise mask it	WITHOUT_CLASSIFICATION	0.9999999963339479	WITHOUT_CLASSIFICATION	3.6660522278680362E-9	DESIGN
// register a cleanup synch	WITHOUT_CLASSIFICATION	0.9997442328947064	WITHOUT_CLASSIFICATION	2.5576710529363065E-4	DESIGN
// wrap the session in the transaction-protection proxy	WITHOUT_CLASSIFICATION	0.9999999779986676	WITHOUT_CLASSIFICATION	2.2001332362817255E-8	DESIGN
// then bind it	WITHOUT_CLASSIFICATION	0.9998030208555941	WITHOUT_CLASSIFICATION	1.969791444059711E-4	DESIGN
// try to make sure we don't wrap and already wrapped session	WITHOUT_CLASSIFICATION	0.9999998670727882	WITHOUT_CLASSIFICATION	1.3292721179883847E-7	DESIGN
// allow these to go through the the real session no matter what	WITHOUT_CLASSIFICATION	0.9999966730801598	WITHOUT_CLASSIFICATION	3.326919840133909E-6	DESIGN
// limit the methods available if no transaction is active	WITHOUT_CLASSIFICATION	0.9999997120532834	WITHOUT_CLASSIFICATION	2.879467165950623E-7	DESIGN
// allow these (deprecated) methods to pass through	WITHOUT_CLASSIFICATION	0.9999980246135673	WITHOUT_CLASSIFICATION	1.975386432640818E-6	DESIGN
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999985877474703	WITHOUT_CLASSIFICATION	1.4122525296373883E-6	DESIGN
// We could register the session against the transaction even though it is // not started, but we'd have no guarentee of ever getting the map // entries cleaned up (aside from spawning threads).	WITHOUT_CLASSIFICATION	0.9999996410393972	WITHOUT_CLASSIFICATION	3.5896060276760507E-7	DESIGN
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9995905531488893	WITHOUT_CLASSIFICATION	4.094468511106442E-4	DESIGN
//private String propertyName;	WITHOUT_CLASSIFICATION	0.9999953730111004	WITHOUT_CLASSIFICATION	4.626988899585429E-6	DESIGN
/*public PropertyProjection project() {	WITHOUT_CLASSIFICATION	0.9876529604387193	WITHOUT_CLASSIFICATION	0.01234703956128077	DESIGN
//String[] fk = StringHelper.qualify( "collection_", cp.getKeyColumnNames() );	WITHOUT_CLASSIFICATION	0.9999999930854611	WITHOUT_CLASSIFICATION	6.914538858484429E-9	DESIGN
//" collection_ where " +	WITHOUT_CLASSIFICATION	0.9999994945371602	WITHOUT_CLASSIFICATION	5.054628398199682E-7	DESIGN
//unsupported	WITHOUT_CLASSIFICATION	0.9999835324792802	WITHOUT_CLASSIFICATION	1.6467520719777468E-5	DESIGN
//unsupported	WITHOUT_CLASSIFICATION	0.9999835324792802	WITHOUT_CLASSIFICATION	1.6467520719777468E-5	DESIGN
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9995905531488893	WITHOUT_CLASSIFICATION	4.094468511106442E-4	DESIGN
//the following two lines were added to ensure that this.params is not null, which //can happen with two-deep nested subqueries	WITHOUT_CLASSIFICATION	0.9999996015537577	WITHOUT_CLASSIFICATION	3.9844624241097043E-7	DESIGN
//with two-deep subqueries, the same alias would get generated for //both using the old method (criteriaQuery.generateSQLAlias()), so //that is now used as a fallback if the main criteria alias isn't set	WITHOUT_CLASSIFICATION	0.8024740507041999	WITHOUT_CLASSIFICATION	0.1975259492958002	DESIGN
//implicit polymorphism not supported (would need a union)	WITHOUT_CLASSIFICATION	0.9805333998013346	WITHOUT_CLASSIFICATION	0.01946660019866544	DESIGN
//pull off the last ", "	WITHOUT_CLASSIFICATION	0.9999997708766121	WITHOUT_CLASSIFICATION	2.2912338804257125E-7	DESIGN
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999754925790446	WITHOUT_CLASSIFICATION	2.4507420955422814E-5	DESIGN
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces	WITHOUT_CLASSIFICATION	0.9999951509055188	WITHOUT_CLASSIFICATION	4.849094481114093E-6	DESIGN
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource)	WITHOUT_CLASSIFICATION	0.9969956842950058	WITHOUT_CLASSIFICATION	0.00300431570499424	DESIGN
// NOT_SUPPORTED_SHOULD_USE_JDBC3_PreparedStatement.getGeneratedKeys_method	WITHOUT_CLASSIFICATION	0.9999882539866806	WITHOUT_CLASSIFICATION	1.1746013319404501E-5	DESIGN
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.999999944260234	WITHOUT_CLASSIFICATION	5.5739765956683794E-8	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994902236211	WITHOUT_CLASSIFICATION	5.097763788709591E-7	DESIGN
// Oracle did add support for ANSI CASE statements in 9i	WITHOUT_CLASSIFICATION	0.9999880946284938	WITHOUT_CLASSIFICATION	1.190537150615221E-5	DESIGN
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.999989565016394	WITHOUT_CLASSIFICATION	1.043498360606989E-5	DESIGN
// Informix doesn't have a bit type	WITHOUT_CLASSIFICATION	0.9999622425600343	WITHOUT_CLASSIFICATION	3.775743996579377E-5	DESIGN
// or BYTE // or TEXT? // or MONEY	WITHOUT_CLASSIFICATION	0.9999889278533	WITHOUT_CLASSIFICATION	1.1072146699973514E-5	DESIGN
// strip table-owner because Informix always returns constraint names as "<table-owner>.<constraint-name>"	WITHOUT_CLASSIFICATION	0.9999999996703876	WITHOUT_CLASSIFICATION	3.29612531436236E-10	DESIGN
// build the map of standard ANSI SQL aggregation functions ~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999967682334	WITHOUT_CLASSIFICATION	3.231766720249573E-9	DESIGN
//pre H3.2 behavior: super.getReturnType(ct, m);	WITHOUT_CLASSIFICATION	0.9999924054455468	WITHOUT_CLASSIFICATION	7.594554453319228E-6	DESIGN
// finally use the sqltype if == on Hibernate types did not find a match.	WITHOUT_CLASSIFICATION	0.9999994810948898	WITHOUT_CLASSIFICATION	5.18905110274445E-7	DESIGN
//because numeric can be anything	WITHOUT_CLASSIFICATION	0.9999789039362461	WITHOUT_CLASSIFICATION	2.1096063753896923E-5	DESIGN
// constructors and factory methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.995985154301954	WITHOUT_CLASSIFICATION	0.004014845698045973	DESIGN
// standard sql92 functions (can be overridden by subclasses)	WITHOUT_CLASSIFICATION	0.9999998985170397	WITHOUT_CLASSIFICATION	1.0148296034891316E-7	DESIGN
//map second/minute/hour/day/month/year to ANSI extract(), override on subclasses	WITHOUT_CLASSIFICATION	0.9999996658589511	WITHOUT_CLASSIFICATION	3.341410488319785E-7	DESIGN
// register hibernate types for default use in scalar sqlquery type auto detection	WITHOUT_CLASSIFICATION	0.9999991704503298	WITHOUT_CLASSIFICATION	8.295496701475124E-7	DESIGN
// database type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999990704427452	WITHOUT_CLASSIFICATION	9.295572547828587E-7	DESIGN
// hibernate type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999864642523778	WITHOUT_CLASSIFICATION	1.3535747622175551E-5	DESIGN
// keyword support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999819305587624	WITHOUT_CLASSIFICATION	1.8069441237650447E-5	DESIGN
// native identifier generatiion ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999723679053151	WITHOUT_CLASSIFICATION	2.7632094684957732E-5	DESIGN
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999965609787012	WITHOUT_CLASSIFICATION	3.439021298707865E-6	DESIGN
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999787922165594	WITHOUT_CLASSIFICATION	2.1207783440565354E-5	DESIGN
// GUID support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998802047920882	WITHOUT_CLASSIFICATION	1.1979520791179317E-4	DESIGN
// limit/offset support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999987018305341	WITHOUT_CLASSIFICATION	1.2981694659125594E-6	DESIGN
// by default we report no support	WITHOUT_CLASSIFICATION	0.9999234698817943	WITHOUT_CLASSIFICATION	7.653011820574501E-5	DESIGN
// by default we report no support for NOWAIT lock semantics	WITHOUT_CLASSIFICATION	0.9998536148566657	WITHOUT_CLASSIFICATION	1.4638514333436658E-4	DESIGN
// table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999451242445	WITHOUT_CLASSIFICATION	5.487575549495407E-7	DESIGN
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999968166687108	WITHOUT_CLASSIFICATION	3.183331289171651E-6	DESIGN
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999846799923848	WITHOUT_CLASSIFICATION	1.532000761517534E-5	DESIGN
// current timestamp support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999989193448574	WITHOUT_CLASSIFICATION	1.0806551425701862E-6	DESIGN
// SQLException support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999448990295164	WITHOUT_CLASSIFICATION	5.510097048353313E-5	DESIGN
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999975842992237	WITHOUT_CLASSIFICATION	2.4157007763025863E-6	DESIGN
// identifier quoting support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999948109698635	WITHOUT_CLASSIFICATION	5.189030136458449E-6	DESIGN
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999947996171434	WITHOUT_CLASSIFICATION	5.200382856579075E-6	DESIGN
// grrr... for differentiation of mysql storage engines	WITHOUT_CLASSIFICATION	0.9999995890487965	WITHOUT_CLASSIFICATION	4.1095120353336567E-7	DESIGN
// Informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998558600292	WITHOUT_CLASSIFICATION	1.4413997087469407E-7	DESIGN
// return false here, as most databases do not properly support this construct...	WITHOUT_CLASSIFICATION	0.8194154886333233	WITHOUT_CLASSIFICATION	0.1805845113666768	DESIGN
// Mckoi has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999809409945499	WITHOUT_CLASSIFICATION	1.9059005450138782E-5	DESIGN
// Oracle8 and previous define only a "DATE" type which //      is used to represent all aspects of date/time	WITHOUT_CLASSIFICATION	0.9999999599691662	WITHOUT_CLASSIFICATION	4.003083375763698E-8	DESIGN
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9956726024488606	WITHOUT_CLASSIFICATION	0.004327397551139358	DESIGN
//" cascade";	WITHOUT_CLASSIFICATION	0.9999803728652553	WITHOUT_CLASSIFICATION	1.9627134744651787E-5	DESIGN
//trim off the length/precision/scale	WITHOUT_CLASSIFICATION	0.9999993743834119	WITHOUT_CLASSIFICATION	6.256165881295222E-7	DESIGN
/*public boolean dropTemporaryTableAfterUse() {	WITHOUT_CLASSIFICATION	0.9796007835665136	WITHOUT_CLASSIFICATION	0.020399216433486408	DESIGN
// CHECK VIOLATION	WITHOUT_CLASSIFICATION	0.999972593380869	WITHOUT_CLASSIFICATION	2.7406619130993498E-5	DESIGN
// UNIQUE VIOLATION	WITHOUT_CLASSIFICATION	0.9999597191907172	WITHOUT_CLASSIFICATION	4.028080928276832E-5	DESIGN
// FOREIGN KEY VIOLATION	WITHOUT_CLASSIFICATION	0.9999603188133546	WITHOUT_CLASSIFICATION	3.968118664547081E-5	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994902236211	WITHOUT_CLASSIFICATION	5.097763788709591E-7	DESIGN
// NOT NULL VIOLATION	WITHOUT_CLASSIFICATION	0.9998199684225346	WITHOUT_CLASSIFICATION	1.8003157746535132E-4	DESIGN
// ALL OTHER	WITHOUT_CLASSIFICATION	0.9999812025554226	WITHOUT_CLASSIFICATION	1.8797444577517212E-5	DESIGN
// Register the type of the out param - PostgreSQL uses Types.OTHER	WITHOUT_CLASSIFICATION	0.9999998483653594	WITHOUT_CLASSIFICATION	1.5163464057240346E-7	DESIGN
// seems to not really... //	WITHOUT_CLASSIFICATION	0.999947615481805	WITHOUT_CLASSIFICATION	5.2384518195043196E-5	DESIGN
// seems to have spotty LOB suppport	WITHOUT_CLASSIFICATION	0.9999983827962222	WITHOUT_CLASSIFICATION	1.617203777698575E-6	DESIGN
// HHH-2300	WITHOUT_CLASSIFICATION	0.9999243938108572	WITHOUT_CLASSIFICATION	7.560618914273851E-5	DESIGN
// ignore (probably H2 not in the classpath)	WITHOUT_CLASSIFICATION	0.9993735579998846	WITHOUT_CLASSIFICATION	6.264420001153912E-4	DESIGN
// Numeric Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993315370105	WITHOUT_CLASSIFICATION	6.684629894604583E-7	DESIGN
// String Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999988771483578	WITHOUT_CLASSIFICATION	1.1228516422292437E-6	DESIGN
// Time and Date Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999991693919078	WITHOUT_CLASSIFICATION	8.306080922226805E-7	DESIGN
// System Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999967145587589	WITHOUT_CLASSIFICATION	3.2854412410037446E-6	DESIGN
// not null is implicit	WITHOUT_CLASSIFICATION	0.997821998103154	WITHOUT_CLASSIFICATION	0.002178001896846033	DESIGN
// 23000: Check constraint violation: {0} // 23001: Unique index or primary key violation: {0}	WITHOUT_CLASSIFICATION	0.9999999247212182	WITHOUT_CLASSIFICATION	7.527878174386887E-8	DESIGN
// Display the dialect version.	WITHOUT_CLASSIFICATION	0.9999999062914282	WITHOUT_CLASSIFICATION	9.370857180829601E-8	DESIGN
// The RDMS concat() function only supports 2 parameters	WITHOUT_CLASSIFICATION	0.9999043911281593	WITHOUT_CLASSIFICATION	9.560887184068447E-5	DESIGN
// Dialect method overrides ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995254855105	WITHOUT_CLASSIFICATION	4.7451448946631595E-7	DESIGN
// Original Dialect.java returns " for update";	WITHOUT_CLASSIFICATION	0.9999962701280481	WITHOUT_CLASSIFICATION	3.729871951887548E-6	DESIGN
// Verify the state of this new method in Hibernate 3.0 Dialect.java	WITHOUT_CLASSIFICATION	0.9998195372680662	WITHOUT_CLASSIFICATION	1.8046273193374207E-4	DESIGN
// Origial Dialect.java returns true;	WITHOUT_CLASSIFICATION	0.9999977797574652	WITHOUT_CLASSIFICATION	2.220242534808362E-6	DESIGN
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999563253311793	WITHOUT_CLASSIFICATION	4.367466882079243E-5	DESIGN
// *** Sequence methods - start. The RDMS dialect needs these	WITHOUT_CLASSIFICATION	0.9970718555714682	WITHOUT_CLASSIFICATION	0.002928144428531842	DESIGN
// methods to make it possible to use the Native Id generator	WITHOUT_CLASSIFICATION	0.998271522472573	WITHOUT_CLASSIFICATION	0.0017284775274270712	DESIGN
// The where clause was added to eliminate this statement from Brute Force Searches.	WITHOUT_CLASSIFICATION	0.99978781691342	WITHOUT_CLASSIFICATION	2.1218308657998438E-4	DESIGN
// *** Sequence methods - end	WITHOUT_CLASSIFICATION	0.9995415135472441	WITHOUT_CLASSIFICATION	4.584864527560109E-4	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994902236211	WITHOUT_CLASSIFICATION	5.097763788709591E-7	DESIGN
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9956726024488606	WITHOUT_CLASSIFICATION	0.004327397551139358	DESIGN
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.998952852248285	WITHOUT_CLASSIFICATION	0.0010471477517149598	DESIGN
// Used with DROP TABLE to delete all records in the table.	WITHOUT_CLASSIFICATION	0.9999996659063656	WITHOUT_CLASSIFICATION	3.3409363446326905E-7	DESIGN
// RDMS supports the UNION ALL clause.	WITHOUT_CLASSIFICATION	0.999999503915093	WITHOUT_CLASSIFICATION	4.960849070985867E-7	DESIGN
// RDMS has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9993795239940605	WITHOUT_CLASSIFICATION	6.204760059396078E-4	DESIGN
// Multi-param dialect functions...	WITHOUT_CLASSIFICATION	0.9999982259491659	WITHOUT_CLASSIFICATION	1.7740508340888055E-6	DESIGN
// function templates	WITHOUT_CLASSIFICATION	0.9999913146667538	WITHOUT_CLASSIFICATION	8.685333246177019E-6	DESIGN
//not null is implicit	WITHOUT_CLASSIFICATION	0.99869279060852	WITHOUT_CLASSIFICATION	0.001307209391480037	DESIGN
// this assumes schema support, which is present in 1.8.0 and later...	WITHOUT_CLASSIFICATION	0.9994152553981384	WITHOUT_CLASSIFICATION	5.847446018616592E-4	DESIGN
// HSQLDB only supports READ_UNCOMMITTED transaction isolation	WITHOUT_CLASSIFICATION	0.9999942848737219	WITHOUT_CLASSIFICATION	5.71512627805569E-6	DESIGN
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999981463360396	WITHOUT_CLASSIFICATION	1.8536639604987434E-6	DESIGN
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9999948963642538	WITHOUT_CLASSIFICATION	5.10363574626536E-6	DESIGN
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999989945081476	WITHOUT_CLASSIFICATION	1.0054918524788777E-6	DESIGN
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999339465488278	WITHOUT_CLASSIFICATION	6.605345117217818E-5	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994902236211	WITHOUT_CLASSIFICATION	5.097763788709591E-7	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994902236211	WITHOUT_CLASSIFICATION	5.097763788709591E-7	DESIGN
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9999972797801263	WITHOUT_CLASSIFICATION	2.720219873614224E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999538292619589	WITHOUT_CLASSIFICATION	4.617073804128677E-5	DESIGN
// TimesTen has no BLOB/CLOB support, but these types may be suitable  // for some applications. The length is limited to 4 million bytes.	WITHOUT_CLASSIFICATION	0.9988945605568663	WITHOUT_CLASSIFICATION	0.0011054394431337096	DESIGN
// new methods in dialect3	WITHOUT_CLASSIFICATION	0.9996533081207449	WITHOUT_CLASSIFICATION	3.466918792550269E-4	DESIGN
/*public boolean supportsForUpdateNowait() {	WITHOUT_CLASSIFICATION	0.9998943363785344	WITHOUT_CLASSIFICATION	1.0566362146563497E-4	DESIGN
// TimesTen has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999740441176687	WITHOUT_CLASSIFICATION	2.5955882331278906E-5	DESIGN
// iterate entries ordered by capacity to find first fit	WITHOUT_CLASSIFICATION	0.999999912376138	WITHOUT_CLASSIFICATION	8.762386199782127E-8	DESIGN
// add new ordered map	WITHOUT_CLASSIFICATION	0.9999998260513777	WITHOUT_CLASSIFICATION	1.7394862228789543E-7	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999538292619589	WITHOUT_CLASSIFICATION	4.617073804128677E-5	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994902236211	WITHOUT_CLASSIFICATION	5.097763788709591E-7	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999538292619589	WITHOUT_CLASSIFICATION	4.617073804128677E-5	DESIGN
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999971815306364	WITHOUT_CLASSIFICATION	2.818469363562448E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999538292619589	WITHOUT_CLASSIFICATION	4.617073804128677E-5	DESIGN
//registerColumnType data types	WITHOUT_CLASSIFICATION	0.9999993196215803	WITHOUT_CLASSIFICATION	6.803784197760816E-7	DESIGN
// hibernate seems to ignore this type...	WITHOUT_CLASSIFICATION	0.9996305725764836	WITHOUT_CLASSIFICATION	3.6942742351646026E-4	DESIGN
// IBID for current_time and current_date	WITHOUT_CLASSIFICATION	0.9999999003601466	WITHOUT_CLASSIFICATION	9.963985334576587E-8	DESIGN
// Tell hibernate to use getBytes instead of getBinaryStream	WITHOUT_CLASSIFICATION	0.998734963454628	WITHOUT_CLASSIFICATION	0.001265036545371993	DESIGN
// No batch statements	WITHOUT_CLASSIFICATION	0.9999992977802674	WITHOUT_CLASSIFICATION	7.022197325876E-7	DESIGN
/*	WITHOUT_CLASSIFICATION	0.9199843986423561	WITHOUT_CLASSIFICATION	0.08001560135764392	DESIGN
//no pointbase BIT	WITHOUT_CLASSIFICATION	0.9999978975281533	WITHOUT_CLASSIFICATION	2.1024718467293177E-6	DESIGN
//no pointbase TINYINT	WITHOUT_CLASSIFICATION	0.9999978646947691	WITHOUT_CLASSIFICATION	2.135305230906539E-6	DESIGN
// Pointbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999958141800181	WITHOUT_CLASSIFICATION	4.1858199818535155E-6	DESIGN
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9956726024488606	WITHOUT_CLASSIFICATION	0.004327397551139358	DESIGN
// The current_timestamp is more accurate, but only known to be supported // in SQL Server 7.0 and later (i.e., Sybase not known to support it at all)	WITHOUT_CLASSIFICATION	0.9998679819262	WITHOUT_CLASSIFICATION	1.320180737999144E-4	DESIGN
// SQL Server (at least up through 2005) does not support defining // cascade delete constraints which can circel back to the mutating // table	WITHOUT_CLASSIFICATION	0.9999961631366772	WITHOUT_CLASSIFICATION	3.836863322837038E-6	DESIGN
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9986590321136114	WITHOUT_CLASSIFICATION	0.0013409678863886918	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999538292619589	WITHOUT_CLASSIFICATION	4.617073804128677E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999538292619589	WITHOUT_CLASSIFICATION	4.617073804128677E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999538292619589	WITHOUT_CLASSIFICATION	4.617073804128677E-5	DESIGN
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9956726024488606	WITHOUT_CLASSIFICATION	0.004327397551139358	DESIGN
/* package-private */	WITHOUT_CLASSIFICATION	0.9999402858148194	WITHOUT_CLASSIFICATION	5.9714185180517037E-5	DESIGN
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999971815306364	WITHOUT_CLASSIFICATION	2.818469363562448E-6	DESIGN
//Sybase BIT type does not support null values	WITHOUT_CLASSIFICATION	0.9999087929006412	WITHOUT_CLASSIFICATION	9.120709935889398E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999538292619589	WITHOUT_CLASSIFICATION	4.617073804128677E-5	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994902236211	WITHOUT_CLASSIFICATION	5.097763788709591E-7	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999538292619589	WITHOUT_CLASSIFICATION	4.617073804128677E-5	DESIGN
//not null ... (start with 1) is implicit	WITHOUT_CLASSIFICATION	0.9966673912254247	WITHOUT_CLASSIFICATION	0.0033326087745753526	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994902236211	WITHOUT_CLASSIFICATION	5.097763788709591E-7	DESIGN
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.9998925910065587	WITHOUT_CLASSIFICATION	1.0740899344120946E-4	DESIGN
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999981463360396	WITHOUT_CLASSIFICATION	1.8536639604987434E-6	DESIGN
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9999948963642538	WITHOUT_CLASSIFICATION	5.10363574626536E-6	DESIGN
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999989945081476	WITHOUT_CLASSIFICATION	1.0054918524788777E-6	DESIGN
// add another (inner) nested select // add the main query // close off the inner nested select	WITHOUT_CLASSIFICATION	0.9999999379522666	WITHOUT_CLASSIFICATION	6.204773340378305E-8	DESIGN
// add the main query	WITHOUT_CLASSIFICATION	0.9999967802760023	WITHOUT_CLASSIFICATION	3.21972399781613E-6	DESIGN
//add the restriction to the outer select	WITHOUT_CLASSIFICATION	0.9999975631401224	WITHOUT_CLASSIFICATION	2.4368598775526864E-6	DESIGN
// This assumes you will want to ignore any update counts 	WITHOUT_CLASSIFICATION	0.9872035413780097	WITHOUT_CLASSIFICATION	0.01279645862199036	DESIGN
// You may still have other ResultSets or update counts left to process here  // but you can't do it now or the ResultSet you just got will be closed 	WITHOUT_CLASSIFICATION	0.9997205879506474	WITHOUT_CLASSIFICATION	2.7941204935252146E-4	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994902236211	WITHOUT_CLASSIFICATION	5.097763788709591E-7	DESIGN
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9956726024488606	WITHOUT_CLASSIFICATION	0.004327397551139358	DESIGN
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999339465488278	WITHOUT_CLASSIFICATION	6.605345117217818E-5	DESIGN
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9999972797801263	WITHOUT_CLASSIFICATION	2.720219873614224E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999538292619589	WITHOUT_CLASSIFICATION	4.617073804128677E-5	DESIGN
// features which change between 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999491565156973	WITHOUT_CLASSIFICATION	5.0843484302665104E-5	DESIGN
// features which remain constant across 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999982791452507	WITHOUT_CLASSIFICATION	1.720854749200192E-6	DESIGN
// binary %Stream // character %Stream	WITHOUT_CLASSIFICATION	0.9999965077987784	WITHOUT_CLASSIFICATION	3.4922012216416803E-6	DESIGN
//getDefaultProperties().setProperty(Environment.STATEMENT_BATCH_SIZE, NO_BATCH);	WITHOUT_CLASSIFICATION	0.9999999076851136	WITHOUT_CLASSIFICATION	9.231488637599685E-8	DESIGN
// hibernate impelemnts cast in Dialect.java	WITHOUT_CLASSIFICATION	0.9999726261729494	WITHOUT_CLASSIFICATION	2.737382705068193E-5	DESIGN
// aggregate functions shouldn't be registered, right? //registerFunction( "list", new StandardSQLFunction("list",Hibernate.STRING) ); // stopped on $list	WITHOUT_CLASSIFICATION	0.999912167320177	WITHOUT_CLASSIFICATION	8.78326798230331E-5	DESIGN
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999947996171434	WITHOUT_CLASSIFICATION	5.200382856579075E-6	DESIGN
// below is for Cache' that don't have str in 2007.1 there is str and we register str directly	WITHOUT_CLASSIFICATION	0.9999801272768846	WITHOUT_CLASSIFICATION	1.9872723115372064E-5	DESIGN
// note that %string is deprecated	WITHOUT_CLASSIFICATION	0.9978453321420203	WITHOUT_CLASSIFICATION	0.0021546678579797466	DESIGN
// %upper is deprecated	WITHOUT_CLASSIFICATION	0.993307852885077	WITHOUT_CLASSIFICATION	0.006692147114923013	DESIGN
// The syntax used to add a foreign key constraint to a table.	WITHOUT_CLASSIFICATION	0.9999930635515216	WITHOUT_CLASSIFICATION	6.936448478427266E-6	DESIGN
// identifier-commalist	WITHOUT_CLASSIFICATION	0.999998777858029	WITHOUT_CLASSIFICATION	1.2221419709068706E-6	DESIGN
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999965609787012	WITHOUT_CLASSIFICATION	3.439021298707865E-6	DESIGN
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999787922165594	WITHOUT_CLASSIFICATION	2.1207783440565354E-5	DESIGN
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999968166687108	WITHOUT_CLASSIFICATION	3.183331289171651E-6	DESIGN
// identifier-commalist	WITHOUT_CLASSIFICATION	0.999998777858029	WITHOUT_CLASSIFICATION	1.2221419709068706E-6	DESIGN
// The syntax used to add a column to a table	WITHOUT_CLASSIFICATION	0.9997316407215607	WITHOUT_CLASSIFICATION	2.683592784392253E-4	DESIGN
// Completely optional cascading drop clause.	WITHOUT_CLASSIFICATION	0.9999998017744265	WITHOUT_CLASSIFICATION	1.982255735623766E-7	DESIGN
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999978435844799	WITHOUT_CLASSIFICATION	2.156415520051881E-6	DESIGN
// LIMIT support (ala TOP) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999686549243159	WITHOUT_CLASSIFICATION	3.13450756841944E-5	DESIGN
// InterSystems Cache' does not current support "SELECT ... FOR UPDATE" syntax... // Set your transaction mode to READ_COMMITTED before using	WITHOUT_CLASSIFICATION	0.9999645041208512	WITHOUT_CLASSIFICATION	3.549587914871587E-5	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994902236211	WITHOUT_CLASSIFICATION	5.097763788709591E-7	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994902236211	WITHOUT_CLASSIFICATION	5.097763788709591E-7	DESIGN
/*<String>*/	WITHOUT_CLASSIFICATION	0.9998952670471741	WITHOUT_CLASSIFICATION	1.04732952825824E-4	DESIGN
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999846799923848	WITHOUT_CLASSIFICATION	1.532000761517534E-5	DESIGN
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999975842992237	WITHOUT_CLASSIFICATION	2.4157007763025863E-6	DESIGN
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999563253311793	WITHOUT_CLASSIFICATION	4.367466882079243E-5	DESIGN
// Does the LIMIT clause come at the start of the SELECT statement, rather than at the end?	WITHOUT_CLASSIFICATION	0.9999188469534144	WITHOUT_CLASSIFICATION	8.115304658566843E-5	DESIGN
// Does the LIMIT clause take a "maximum" row number instead of a total number of returned rows?	WITHOUT_CLASSIFICATION	0.9999210574571572	WITHOUT_CLASSIFICATION	7.89425428427656E-5	DESIGN
// The name of the SQL function that transforms a string to lowercase	WITHOUT_CLASSIFICATION	0.9999993291932548	WITHOUT_CLASSIFICATION	6.708067451768066E-7	DESIGN
// Create an OuterJoinGenerator for this dialect.	WITHOUT_CLASSIFICATION	0.9999942839131881	WITHOUT_CLASSIFICATION	5.716086811869164E-6	DESIGN
// The keyword used to insert a row without specifying // any column values	WITHOUT_CLASSIFICATION	0.9983646800030518	WITHOUT_CLASSIFICATION	0.0016353199969481463	DESIGN
//registerFunction( "trim", new StandardSQLFunction( "trim", Hibernate.STRING ) );	WITHOUT_CLASSIFICATION	0.9999999900519096	WITHOUT_CLASSIFICATION	9.948090306928408E-9	DESIGN
//skip the FROM keyword in params	WITHOUT_CLASSIFICATION	0.9999503969316172	WITHOUT_CLASSIFICATION	4.9603068382763766E-5	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.9994521443640757	WITHOUT_CLASSIFICATION	5.478556359242642E-4	DESIGN
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.999999944260234	WITHOUT_CLASSIFICATION	5.5739765956683794E-8	DESIGN
// SQLFunction implementation	WITHOUT_CLASSIFICATION	0.9999961144744836	WITHOUT_CLASSIFICATION	3.8855255164577384E-6	DESIGN
// conceivable that the dialect ctor could throw HibernateExceptions, so don't re-wrap	WITHOUT_CLASSIFICATION	0.9995840656804778	WITHOUT_CLASSIFICATION	4.1593431952228766E-4	DESIGN
// register the standard dialect resolver	WITHOUT_CLASSIFICATION	0.9999966377026988	WITHOUT_CLASSIFICATION	3.3622973012969548E-6	DESIGN
// register resolvers set via Environment property	WITHOUT_CLASSIFICATION	0.9999985395861535	WITHOUT_CLASSIFICATION	1.4604138464947505E-6	DESIGN
// kept for backward compatibility until after the 3.1beta5 release of HA	WITHOUT_CLASSIFICATION	0.9999857292480596	WITHOUT_CLASSIFICATION	1.4270751940301132E-5	DESIGN
//cache the hashcode	WITHOUT_CLASSIFICATION	0.9998783727690722	WITHOUT_CLASSIFICATION	1.2162723092787824E-4	DESIGN
// the CascadingAction contract ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999982486772292	WITHOUT_CLASSIFICATION	1.7513227707847975E-6	DESIGN
// the CascadingAction implementations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999958656964414	WITHOUT_CLASSIFICATION	4.134303558520938E-6	DESIGN
// delete does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999928548003699	WITHOUT_CLASSIFICATION	7.145199630130006E-6	DESIGN
// orphans should be deleted during delete	WITHOUT_CLASSIFICATION	0.9999684849870984	WITHOUT_CLASSIFICATION	3.1515012901596606E-5	DESIGN
/*(LockMode) anything*/	WITHOUT_CLASSIFICATION	0.9993821606263771	WITHOUT_CLASSIFICATION	6.178393736229582E-4	DESIGN
// lock doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999907114669574	WITHOUT_CLASSIFICATION	9.288533042598455E-6	DESIGN
// refresh doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999909423166551	WITHOUT_CLASSIFICATION	9.057683344826886E-6	DESIGN
// evicts don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999951809589953	WITHOUT_CLASSIFICATION	4.8190410046432606E-6	DESIGN
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999704576137131	WITHOUT_CLASSIFICATION	2.9542386286841777E-5	DESIGN
// orphans should be deleted during save/update	WITHOUT_CLASSIFICATION	0.9999867565265707	WITHOUT_CLASSIFICATION	1.3243473429365931E-5	DESIGN
// for deprecated saveOrUpdateCopy()	WITHOUT_CLASSIFICATION	0.9999800850757485	WITHOUT_CLASSIFICATION	1.9914924251380544E-5	DESIGN
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.999944159597944	WITHOUT_CLASSIFICATION	5.584040205582065E-5	DESIGN
//a proxy cannot be transient and it breaks ForeignKeys.isTransient	WITHOUT_CLASSIFICATION	0.9998810059313455	WITHOUT_CLASSIFICATION	1.1899406865437986E-4	DESIGN
// replicate does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999881610465438	WITHOUT_CLASSIFICATION	1.1838953456305257E-5	DESIGN
// static helper methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998559404173231	WITHOUT_CLASSIFICATION	1.4405958267688237E-4	DESIGN
// handles arrays and newly instantiated collections	WITHOUT_CLASSIFICATION	0.9999991268691916	WITHOUT_CLASSIFICATION	8.731308084043455E-7	DESIGN
// Actually the semantics of the next three are really "Bag" // Note that, unlike objects, collection insertions, updates, // deletions are not really remembered between flushes. We // just re-use the same Lists for convenience.	WITHOUT_CLASSIFICATION	0.9999999946077209	WITHOUT_CLASSIFICATION	5.392279071849606E-9	DESIGN
// Add these directly to the executions queue	WITHOUT_CLASSIFICATION	0.9999998932574712	WITHOUT_CLASSIFICATION	1.0674252888274075E-7	DESIGN
// continue loop	WITHOUT_CLASSIFICATION	0.9999997280146329	WITHOUT_CLASSIFICATION	2.7198536711964173E-7	DESIGN
//sort the updates by fk	WITHOUT_CLASSIFICATION	0.9950310426267147	WITHOUT_CLASSIFICATION	0.004968957373285304	DESIGN
//sort the updates by pk	WITHOUT_CLASSIFICATION	0.9889697583833448	WITHOUT_CLASSIFICATION	0.011030241616655246	DESIGN
// the mapping of entity names to their latest batch numbers.	WITHOUT_CLASSIFICATION	0.9999999944082533	WITHOUT_CLASSIFICATION	5.591746694449273E-9	DESIGN
// the map of batch numbers to EntityInsertAction lists	WITHOUT_CLASSIFICATION	0.9999999785423003	WITHOUT_CLASSIFICATION	2.1457699723767074E-8	DESIGN
//optimize the hash size to eliminate a rehash.	WITHOUT_CLASSIFICATION	0.9999984628055681	WITHOUT_CLASSIFICATION	1.537194431885011E-6	DESIGN
// the list of entity names that indicate the batch number	WITHOUT_CLASSIFICATION	0.9999998468592527	WITHOUT_CLASSIFICATION	1.5314074740185934E-7	DESIGN
// remove the current element from insertions. It will be added back later.	WITHOUT_CLASSIFICATION	0.9997527478974493	WITHOUT_CLASSIFICATION	2.472521025507216E-4	DESIGN
// the entity associated with the current action.	WITHOUT_CLASSIFICATION	0.9999983339404527	WITHOUT_CLASSIFICATION	1.6660595473614285E-6	DESIGN
// There is already an existing batch for this type of entity. // Check to see if the latest batch is acceptable.	WITHOUT_CLASSIFICATION	0.9999999978082434	WITHOUT_CLASSIFICATION	2.1917566107815147E-9	DESIGN
// now rebuild the insertions list. There is a batch for each entry in the name list.	WITHOUT_CLASSIFICATION	0.9999994369508727	WITHOUT_CLASSIFICATION	5.630491273584143E-7	DESIGN
// the current batch number is the latest batch for this entity type.	WITHOUT_CLASSIFICATION	0.9999997493065933	WITHOUT_CLASSIFICATION	2.5069340665381726E-7	DESIGN
// loop through all the associations of the current entity and make sure that they are processed // before the current batch number	WITHOUT_CLASSIFICATION	0.9999995677044549	WITHOUT_CLASSIFICATION	4.322955451071592E-7	DESIGN
// find the batch number associated with the current association, if any.	WITHOUT_CLASSIFICATION	0.9999998982487157	WITHOUT_CLASSIFICATION	1.017512842311692E-7	DESIGN
// create a new batch for this type. The batch number is the number of current batches.	WITHOUT_CLASSIFICATION	0.9999997723753156	WITHOUT_CLASSIFICATION	2.276246845249611E-7	DESIGN
// loop through all the associated entities and make sure they have been // processed before the latest // batch associated with this entity type.	WITHOUT_CLASSIFICATION	0.9999999954609649	WITHOUT_CLASSIFICATION	4.539035185736541E-9	DESIGN
// since this entity will now be processed in the latest possible batch, // we can be assured that it will come after all other associations, // there's not need to continue checking.	WITHOUT_CLASSIFICATION	0.9998542745461799	WITHOUT_CLASSIFICATION	1.4572545382013816E-4	DESIGN
//cascade to current collection elements	WITHOUT_CLASSIFICATION	0.9999998363235645	WITHOUT_CLASSIFICATION	1.6367643555427825E-7	DESIGN
//not really necessary, but good for consistency...	WITHOUT_CLASSIFICATION	0.9989394605782441	WITHOUT_CLASSIFICATION	0.0010605394217558914	DESIGN
// we can't cascade to non-embedded elements	WITHOUT_CLASSIFICATION	0.9999978519356242	WITHOUT_CLASSIFICATION	2.1480643757457344E-6	DESIGN
//a newly instantiated collection can't have orphans	WITHOUT_CLASSIFICATION	0.9999986600819405	WITHOUT_CLASSIFICATION	1.3399180595463774E-6	DESIGN
// handle orphaned entities!!	WITHOUT_CLASSIFICATION	0.9986376527227754	WITHOUT_CLASSIFICATION	0.0013623472772246736	DESIGN
// Loaded entity instances, by EntityUniqueKey	WITHOUT_CLASSIFICATION	0.9999777985028692	WITHOUT_CLASSIFICATION	2.2201497130797004E-5	DESIGN
// Identity map of EntityEntry instances, by the entity instance	WITHOUT_CLASSIFICATION	0.9999999620002651	WITHOUT_CLASSIFICATION	3.799973490477434E-8	DESIGN
// Entity proxies, by EntityKey	WITHOUT_CLASSIFICATION	0.9999615336331331	WITHOUT_CLASSIFICATION	3.8466366866838226E-5	DESIGN
// Snapshots of current database state for entities // that have *not* been loaded	WITHOUT_CLASSIFICATION	0.9999995616261687	WITHOUT_CLASSIFICATION	4.3837383141830034E-7	DESIGN
// Identity map of array holder ArrayHolder instances, by the array instance	WITHOUT_CLASSIFICATION	0.9999995209551512	WITHOUT_CLASSIFICATION	4.790448487514219E-7	DESIGN
// Collection wrappers, by the CollectionKey //key=CollectionKey, value=PersistentCollection	WITHOUT_CLASSIFICATION	0.9999999971332785	WITHOUT_CLASSIFICATION	2.8667214840202448E-9	DESIGN
// Set of EntityKeys of deleted objects	WITHOUT_CLASSIFICATION	0.999999654870095	WITHOUT_CLASSIFICATION	3.451299049257422E-7	DESIGN
// properties that we have tried to load, and not found in the database	WITHOUT_CLASSIFICATION	0.9999989596503631	WITHOUT_CLASSIFICATION	1.0403496368471937E-6	DESIGN
// A list of collection wrappers that were instantiating during result set // processing, that we will need to initialize at the end of the query	WITHOUT_CLASSIFICATION	0.9999999990715914	WITHOUT_CLASSIFICATION	9.28408553386573E-10	DESIGN
// A container for collections we load up when the owning entity is not // yet loaded ... for now, this is purely transient!	WITHOUT_CLASSIFICATION	0.9999642873014293	WITHOUT_CLASSIFICATION	3.571269857070705E-5	DESIGN
// Downgrade locks	WITHOUT_CLASSIFICATION	0.9999996110913877	WITHOUT_CLASSIFICATION	3.8890861236369985E-7	DESIGN
// any earlier proxy takes precedence	WITHOUT_CLASSIFICATION	0.9999969312963479	WITHOUT_CLASSIFICATION	3.0687036520212424E-6	DESIGN
//unwrap the object	WITHOUT_CLASSIFICATION	0.9999977072398456	WITHOUT_CLASSIFICATION	2.2927601543649018E-6	DESIGN
//initialize + unwrap the object	WITHOUT_CLASSIFICATION	0.9999975041231807	WITHOUT_CLASSIFICATION	2.495876819363316E-6	DESIGN
//return the proxied object	WITHOUT_CLASSIFICATION	0.9996189603642746	WITHOUT_CLASSIFICATION	3.8103963572551385E-4	DESIGN
//overwrite old proxy	WITHOUT_CLASSIFICATION	0.9999474641148798	WITHOUT_CLASSIFICATION	5.25358851201553E-5	DESIGN
// early exit...	WITHOUT_CLASSIFICATION	0.9999087804146514	WITHOUT_CLASSIFICATION	9.121958534860918E-5	DESIGN
// or should it actually throw an exception?	WITHOUT_CLASSIFICATION	0.9971951572502307	WITHOUT_CLASSIFICATION	0.002804842749769305	DESIGN
//treat it just like a new collection	WITHOUT_CLASSIFICATION	0.9999999219938474	WITHOUT_CLASSIFICATION	7.800615264040626E-8	DESIGN
//do this work only at the very highest level of the load //don't let this method be called recursively	WITHOUT_CLASSIFICATION	0.5384280607356503	WITHOUT_CLASSIFICATION	0.46157193926434964	DESIGN
//note that each iteration of the loop may add new elements	WITHOUT_CLASSIFICATION	0.9999999595700684	WITHOUT_CLASSIFICATION	4.0429931566236615E-8	DESIGN
//it might be an unwrapped collection reference! //try to find a wrapper (slowish)	WITHOUT_CLASSIFICATION	0.9984386560756913	WITHOUT_CLASSIFICATION	0.0015613439243086578	DESIGN
/*public boolean isNonExistant(EntityKey key) {	WITHOUT_CLASSIFICATION	0.999929434827308	WITHOUT_CLASSIFICATION	7.056517269200353E-5	DESIGN
/*public boolean isNonExistant(EntityUniqueKey key) {	WITHOUT_CLASSIFICATION	0.9998864424505244	WITHOUT_CLASSIFICATION	1.1355754947555781E-4	DESIGN
// iterate all the entities currently associated with the persistence context.	WITHOUT_CLASSIFICATION	0.9999998539549201	WITHOUT_CLASSIFICATION	1.4604507992226462E-7	DESIGN
// does this entity entry pertain to the entity persister in which we are interested (owner)?	WITHOUT_CLASSIFICATION	0.999745007853553	WITHOUT_CLASSIFICATION	2.5499214644696914E-4	DESIGN
//check if the managed object is the parent	WITHOUT_CLASSIFICATION	0.9996963976666968	WITHOUT_CLASSIFICATION	3.036023333032215E-4	DESIGN
// otherwise, the proxy was pruned during the serialization process	WITHOUT_CLASSIFICATION	0.9999995956564922	WITHOUT_CLASSIFICATION	4.043435078823922E-7	DESIGN
// adds remove as a sort-of alias for delete...	WITHOUT_CLASSIFICATION	0.9999970045648322	WITHOUT_CLASSIFICATION	2.9954351678409978E-6	DESIGN
//bad cast	WITHOUT_CLASSIFICATION	0.9884672896974833	WITHOUT_CLASSIFICATION	0.011532710302516626	DESIGN
//return lhsPersister.getSubclassPropertyColumnNames(property);	WITHOUT_CLASSIFICATION	0.9999998680266755	WITHOUT_CLASSIFICATION	1.319733244216106E-7	DESIGN
//property-refs for associations defined on a //component are not supported, so no need to slice	WITHOUT_CLASSIFICATION	0.9999998448384466	WITHOUT_CLASSIFICATION	1.5516155346800922E-7	DESIGN
//if there is no property-ref, assume the join //is to the subclass table (ie. the table of the //subclass that the association belongs to)	WITHOUT_CLASSIFICATION	0.9999995092925545	WITHOUT_CLASSIFICATION	4.907074454773216E-7	DESIGN
//handle a property-ref	WITHOUT_CLASSIFICATION	0.9999774936540132	WITHOUT_CLASSIFICATION	2.2506345986775895E-5	DESIGN
/*NativeSQLQueryReturn*/	WITHOUT_CLASSIFICATION	0.9994138463964701	WITHOUT_CLASSIFICATION	5.861536035298566E-4	DESIGN
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999998593285978	WITHOUT_CLASSIFICATION	1.406714021599695E-7	DESIGN
// why is all others non final ?	WITHOUT_CLASSIFICATION	0.9994211650607832	WITHOUT_CLASSIFICATION	5.788349392167898E-4	DESIGN
//this.forceCacheRefresh = forceCacheRefresh;	WITHOUT_CLASSIFICATION	0.9999985947425553	WITHOUT_CLASSIFICATION	1.4052574447516883E-6	DESIGN
// HELLA IMPORTANT OPTIMIZATION!!!	WITHOUT_CLASSIFICATION	0.9999372850761498	WITHOUT_CLASSIFICATION	6.271492385030708E-5	DESIGN
/*return that.type.equals(type) && 	WITHOUT_CLASSIFICATION	0.9999483065197282	WITHOUT_CLASSIFICATION	5.1693480271723244E-5	DESIGN
//Must occur after resolving identifiers!	WITHOUT_CLASSIFICATION	0.999997238775082	WITHOUT_CLASSIFICATION	2.761224918139846E-6	DESIGN
//take a snapshot	WITHOUT_CLASSIFICATION	0.99996619015481	WITHOUT_CLASSIFICATION	3.3809845189981995E-5	DESIGN
// do a check	WITHOUT_CLASSIFICATION	0.9999976186551212	WITHOUT_CLASSIFICATION	2.3813448787677616E-6	DESIGN
// the owning entity may have been deleted and its identifier unset due to // identifier-rollback; in which case, try to look up its identifier from // the persistence context	WITHOUT_CLASSIFICATION	0.9999662160990265	WITHOUT_CLASSIFICATION	3.3783900973622936E-5	DESIGN
// do the work	WITHOUT_CLASSIFICATION	0.9999134235639635	WITHOUT_CLASSIFICATION	8.657643603659857E-5	DESIGN
// We've been here before	WITHOUT_CLASSIFICATION	0.9999410072674456	WITHOUT_CLASSIFICATION	5.899273255448469E-5	DESIGN
// it is or was referenced _somewhere_	WITHOUT_CLASSIFICATION	0.9998575154686613	WITHOUT_CLASSIFICATION	1.4248453133879185E-4	DESIGN
// do the work	WITHOUT_CLASSIFICATION	0.9999134235639635	WITHOUT_CLASSIFICATION	8.657643603659857E-5	DESIGN
// if either its role changed,	WITHOUT_CLASSIFICATION	0.9999963555108408	WITHOUT_CLASSIFICATION	3.6444891592406706E-6	DESIGN
// or its key changed	WITHOUT_CLASSIFICATION	0.9999920963149527	WITHOUT_CLASSIFICATION	7.903685047330762E-6	DESIGN
// we will need to create new entries	WITHOUT_CLASSIFICATION	0.9999956836376008	WITHOUT_CLASSIFICATION	4.31636239911181E-6	DESIGN
// we will need to remove ye olde entries	WITHOUT_CLASSIFICATION	0.9999942446345064	WITHOUT_CLASSIFICATION	5.755365493617158E-6	DESIGN
// force initialize!	WITHOUT_CLASSIFICATION	0.9999902957446386	WITHOUT_CLASSIFICATION	9.704255361308544E-6	DESIGN
// else if it's elements changed	WITHOUT_CLASSIFICATION	0.9999999688357745	WITHOUT_CLASSIFICATION	3.11642256326695E-8	DESIGN
//ATTRIBUTES MAINTAINED BETWEEN FLUSH CYCLES	WITHOUT_CLASSIFICATION	0.9999885346538168	WITHOUT_CLASSIFICATION	1.146534618334032E-5	DESIGN
// session-start/post-flush persistent state	WITHOUT_CLASSIFICATION	0.9999999826993069	WITHOUT_CLASSIFICATION	1.7300693083408706E-8	DESIGN
// allow the CollectionSnapshot to be serialized	WITHOUT_CLASSIFICATION	0.9999999307151594	WITHOUT_CLASSIFICATION	6.928484066852053E-8	DESIGN
// ATTRIBUTES USED ONLY DURING FLUSH CYCLE	WITHOUT_CLASSIFICATION	0.9999969898117346	WITHOUT_CLASSIFICATION	3.010188265376621E-6	DESIGN
// "current" means the reference that was found during flush() 	WITHOUT_CLASSIFICATION	0.9999998854067877	WITHOUT_CLASSIFICATION	1.1459321226435804E-7	DESIGN
// "loaded" means the reference that is consistent  // with the current database state	WITHOUT_CLASSIFICATION	0.9999984703289774	WITHOUT_CLASSIFICATION	1.5296710226387288E-6	DESIGN
// during flush, we navigate the object graph to // collections and decide what to do with them	WITHOUT_CLASSIFICATION	0.9999997208551678	WITHOUT_CLASSIFICATION	2.791448322034583E-7	DESIGN
// if we instantiate a collection during the flush() process, // we must ignore it for the rest of the flush()	WITHOUT_CLASSIFICATION	0.9999999996211948	WITHOUT_CLASSIFICATION	3.788052045567465E-10	DESIGN
// new collections that get found + wrapped // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999983433625412	WITHOUT_CLASSIFICATION	1.656637458680087E-6	DESIGN
//a newly wrapped collection is NOT dirty (or we get unnecessary version updates)	WITHOUT_CLASSIFICATION	0.9998067369524664	WITHOUT_CLASSIFICATION	1.9326304753373595E-4	DESIGN
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9999684481962572	WITHOUT_CLASSIFICATION	3.155180374275885E-5	DESIGN
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9999684481962572	WITHOUT_CLASSIFICATION	3.155180374275885E-5	DESIGN
// detached collections that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999824638148506	WITHOUT_CLASSIFICATION	1.753618514947208E-5	DESIGN
//optimization	WITHOUT_CLASSIFICATION	0.9999364105658242	WITHOUT_CLASSIFICATION	6.358943417581537E-5	DESIGN
//optimization //optimization	WITHOUT_CLASSIFICATION	0.9999436585991948	WITHOUT_CLASSIFICATION	5.634140080537037E-5	DESIGN
//re-snapshot	WITHOUT_CLASSIFICATION	0.999929015051682	WITHOUT_CLASSIFICATION	7.098494831797528E-5	DESIGN
// for convenience to save some lookups	WITHOUT_CLASSIFICATION	0.999978396064814	WITHOUT_CLASSIFICATION	2.1603935186029E-5	DESIGN
//NOTE: this is not updated when properties are fetched lazily!	WITHOUT_CLASSIFICATION	0.9952355549891175	DESIGN	0.004764445010882534	WITHOUT_CLASSIFICATION
//memory optimization	WITHOUT_CLASSIFICATION	0.9999814751975856	WITHOUT_CLASSIFICATION	1.8524802414422316E-5	DESIGN
// use the id value of a newly instantiated instance as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999998205745462	WITHOUT_CLASSIFICATION	1.7942545388145116E-7	DESIGN
// copied from Session:	WITHOUT_CLASSIFICATION	0.9997603960714984	WITHOUT_CLASSIFICATION	2.3960392850174705E-4	DESIGN
// this should not happen since the DTD prevents it	WITHOUT_CLASSIFICATION	0.9999224297707302	WITHOUT_CLASSIFICATION	7.757022926979766E-5	DESIGN
// JoinProcessor needs to know if the where clause fragment came from a dynamic filter or not so it // can put the where clause fragment in the right place in the SQL AST.   'hasFilterCondition' keeps track // of that fact.	WITHOUT_CLASSIFICATION	0.5794843287409386	WITHOUT_CLASSIFICATION	0.4205156712590615	DESIGN
// the current join represents the join between a many-to-many association table // and its "target" table.  Here we need to apply any additional filters // defined specifically on the many-to-many	WITHOUT_CLASSIFICATION	0.9999999859209499	WITHOUT_CLASSIFICATION	1.407905013378858E-8	DESIGN
//check basic level one nullablilty	WITHOUT_CLASSIFICATION	0.9999982308225766	WITHOUT_CLASSIFICATION	1.7691774234435082E-6	DESIGN
//values is not null and is checkable, we'll look deeper	WITHOUT_CLASSIFICATION	0.9992458457631368	WITHOUT_CLASSIFICATION	7.541542368632009E-4	DESIGN
//for non null args, check for components and elements containing components	WITHOUT_CLASSIFICATION	0.999999709602749	WITHOUT_CLASSIFICATION	2.903972509480838E-7	DESIGN
//cache the hashcode	WITHOUT_CLASSIFICATION	0.9998783727690722	WITHOUT_CLASSIFICATION	1.2162723092787824E-4	DESIGN
//persistent collections may have components	WITHOUT_CLASSIFICATION	0.9999996791822142	WITHOUT_CLASSIFICATION	3.2081778576315095E-7	DESIGN
//check for all components values in the collection	WITHOUT_CLASSIFICATION	0.9999993646908475	WITHOUT_CLASSIFICATION	6.353091524077678E-7	DESIGN
/* will check current level if some of them are not null	WITHOUT_CLASSIFICATION	0.976478206681621	WITHOUT_CLASSIFICATION	0.02352179331837899	DESIGN
//do the test	WITHOUT_CLASSIFICATION	0.999992141161904	WITHOUT_CLASSIFICATION	7.858838095997531E-6	DESIGN
// if its an uninitialized proxy it can't be transient	WITHOUT_CLASSIFICATION	0.9993926246979368	WITHOUT_CLASSIFICATION	6.073753020632081E-4	DESIGN
//unwrap it	WITHOUT_CLASSIFICATION	0.9999430569154971	WITHOUT_CLASSIFICATION	5.694308450281422E-5	DESIGN
// See if the entity is already bound to this session, if not look at the // entity identifier and assume that the entity is persistent if the // id is not "unsaved" (that is, we rely on foreign keys to keep // database integrity)	WITHOUT_CLASSIFICATION	0.9999998814892377	WITHOUT_CLASSIFICATION	1.1851076232747141E-7	DESIGN
// an unfetched association can only point to // an entity that already exists in the db	WITHOUT_CLASSIFICATION	0.9999995055754987	WITHOUT_CLASSIFICATION	4.944245013193503E-7	DESIGN
// let the interceptor inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999999837854086	WITHOUT_CLASSIFICATION	1.621459136831876E-8	DESIGN
// let the persister inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999998079544902	WITHOUT_CLASSIFICATION	1.9204550990574034E-7	DESIGN
// we use the assumed value, if there is one, to avoid hitting // the database	WITHOUT_CLASSIFICATION	0.9998392411060398	WITHOUT_CLASSIFICATION	1.607588939602656E-4	DESIGN
// hit the database, after checking the session cache for a snapshot	WITHOUT_CLASSIFICATION	0.9995778494941702	WITHOUT_CLASSIFICATION	4.2215050582977275E-4	DESIGN
// context-entity-identifier returns null explicitly if the entity // is not associated with the persistence context; so make some // deeper checks...	WITHOUT_CLASSIFICATION	0.9999915361498983	WITHOUT_CLASSIFICATION	8.463850101575424E-6	DESIGN
//int count = 0;	WITHOUT_CLASSIFICATION	0.9999872116664101	WITHOUT_CLASSIFICATION	1.2788333589952967E-5	DESIGN
//the first key found after the given key	WITHOUT_CLASSIFICATION	0.9999997718468474	WITHOUT_CLASSIFICATION	2.2815315265302406E-7	DESIGN
//checkForEnd = false;	WITHOUT_CLASSIFICATION	0.9999961947391885	WITHOUT_CLASSIFICATION	3.8052608114807908E-6	DESIGN
//count++;	WITHOUT_CLASSIFICATION	0.9999205099394627	WITHOUT_CLASSIFICATION	7.949006053729771E-5	DESIGN
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999961285213759	WITHOUT_CLASSIFICATION	3.8714786241114616E-6	DESIGN
//we ran out of keys to try	WITHOUT_CLASSIFICATION	0.9999388389911948	WITHOUT_CLASSIFICATION	6.116100880519509E-5	DESIGN
//first element of array is reserved for the actual instance we are loading!	WITHOUT_CLASSIFICATION	0.9999945010390389	WITHOUT_CLASSIFICATION	5.498960961177149E-6	DESIGN
//the first id found after the given id	WITHOUT_CLASSIFICATION	0.9999998434280045	WITHOUT_CLASSIFICATION	1.565719953753085E-7	DESIGN
//we ran out of ids to try	WITHOUT_CLASSIFICATION	0.9971887492882803	WITHOUT_CLASSIFICATION	0.0028112507117196406	DESIGN
// look for existing collection as part of the persistence context	WITHOUT_CLASSIFICATION	0.9999999753875637	WITHOUT_CLASSIFICATION	2.4612436300979432E-8	DESIGN
// ignore this row of results! Note the early exit	WITHOUT_CLASSIFICATION	0.9999212180398117	WITHOUT_CLASSIFICATION	7.878196018822953E-5	DESIGN
// initialize this collection	WITHOUT_CLASSIFICATION	0.9998272824249149	WITHOUT_CLASSIFICATION	1.7271757508497963E-4	DESIGN
// create one	WITHOUT_CLASSIFICATION	0.9999980639722765	WITHOUT_CLASSIFICATION	1.9360277234883908E-6	DESIGN
// warning: can cause a recursive calls! (proxy initialization)	WITHOUT_CLASSIFICATION	0.9997976158448454	WITHOUT_CLASSIFICATION	2.0238415515454165E-4	DESIGN
// there were no queued additions // and the role has a cache	WITHOUT_CLASSIFICATION	0.9999990791400295	WITHOUT_CLASSIFICATION	9.208599705194556E-7	DESIGN
// and this is not a forced initialization during flush	WITHOUT_CLASSIFICATION	0.9999798944953429	WITHOUT_CLASSIFICATION	2.010550465711219E-5	DESIGN
// some filters affecting the collection are enabled on the session, so do not do the put into the cache.	WITHOUT_CLASSIFICATION	0.9999986720590786	WITHOUT_CLASSIFICATION	1.3279409214716221E-6	DESIGN
// cleanup code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996508398953725	WITHOUT_CLASSIFICATION	3.4916010462745904E-4	DESIGN
// loading collection xrefs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999643180382	WITHOUT_CLASSIFICATION	3.56819619149208E-8	DESIGN
// Collection load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998914847815	WITHOUT_CLASSIFICATION	1.0851521853918692E-7	DESIGN
// simple cache of param metadata based on query string.  Ideally, the // original "user-supplied query" string should be used to retreive this // metadata (i.e., not the para-list-expanded query string) to avoid // unnecessary cache entries. // Used solely for caching param metadata for native-sql queries, see // getSQLParameterMetadata() for a discussion as to why...	WITHOUT_CLASSIFICATION	0.9999793551535494	WITHOUT_CLASSIFICATION	2.0644846450651616E-5	DESIGN
// the cache of the actual plans...	WITHOUT_CLASSIFICATION	0.9999999835134826	WITHOUT_CLASSIFICATION	1.6486517397222935E-8	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.9994521443640757	WITHOUT_CLASSIFICATION	5.478556359242642E-4	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.9994521443640757	WITHOUT_CLASSIFICATION	5.478556359242642E-4	DESIGN
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999999870389705	WITHOUT_CLASSIFICATION	1.2961029526778411E-8	DESIGN
// for native-sql queries, the param metadata is determined outside // any relation to a query plan, because query plan creation and/or // retreival for a native-sql query depends on all of the return // types having been set, which might not be the case up-front when // param metadata would be most useful	WITHOUT_CLASSIFICATION	0.9999872932524418	WITHOUT_CLASSIFICATION	1.27067475580903E-5	DESIGN
// don't care...	WITHOUT_CLASSIFICATION	0.9997100057542214	WITHOUT_CLASSIFICATION	2.899942457785125E-4	DESIGN
// Recognition code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999776939710607	WITHOUT_CLASSIFICATION	2.2306028939238988E-5	DESIGN
// don't care...	WITHOUT_CLASSIFICATION	0.9997100057542214	WITHOUT_CLASSIFICATION	2.899942457785125E-4	DESIGN
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9960042253661068	WITHOUT_CLASSIFICATION	0.003995774633893223	DESIGN
// break the outer loop !!!	WITHOUT_CLASSIFICATION	0.9997160167159937	WITHOUT_CLASSIFICATION	2.8398328400632965E-4	DESIGN
// named parameter	WITHOUT_CLASSIFICATION	0.9995053680519733	WITHOUT_CLASSIFICATION	4.946319480266362E-4	DESIGN
// could be either an ordinal or JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999914462325754	WITHOUT_CLASSIFICATION	8.553767424642345E-6	DESIGN
// a peek ahead showed this as an JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999952601065966	WITHOUT_CLASSIFICATION	4.739893403419748E-6	DESIGN
// make sure this "name" is an integral	WITHOUT_CLASSIFICATION	0.9999997085218324	WITHOUT_CLASSIFICATION	2.9147816756302183E-7	DESIGN
// pre-determine and cache the hashcode	WITHOUT_CLASSIFICATION	0.9999978125967974	WITHOUT_CLASSIFICATION	2.1874032025547977E-6	DESIGN
// perform the actual work	WITHOUT_CLASSIFICATION	0.9999999331212761	WITHOUT_CLASSIFICATION	6.687872396079892E-8	DESIGN
// if everything went ok, commit the transaction and close the obtained // connection handle...	WITHOUT_CLASSIFICATION	0.999999362195255	WITHOUT_CLASSIFICATION	6.378047450607274E-7	DESIGN
// at some point the processing went bad, so we need to: //      1) make sure the connection handle gets released //      2) try to cleanup the JTA context as much as possible	WITHOUT_CLASSIFICATION	0.9999774141360875	WITHOUT_CLASSIFICATION	2.2585863912480715E-5	DESIGN
// finally handle the exception	WITHOUT_CLASSIFICATION	0.9997852871140601	WITHOUT_CLASSIFICATION	2.1471288593985432E-4	DESIGN
// a "detached" collection that belonged to a different entity	WITHOUT_CLASSIFICATION	0.9999999488394062	WITHOUT_CLASSIFICATION	5.116059365531259E-8	DESIGN
//saveOrUpdateCopy() is deprecated!	WITHOUT_CLASSIFICATION	0.9980654165914942	WITHOUT_CLASSIFICATION	0.0019345834085058257	DESIGN
// collectionPersister should not be null, but we don't want to throw // an exception if it is null	WITHOUT_CLASSIFICATION	0.9984618600446821	WITHOUT_CLASSIFICATION	0.0015381399553180111	DESIGN
// otherwise a null or brand new collection // this will also (inefficiently) handle arrays, which // have no snapshot, so we can't do any better //processArrayOrNewCollection(collection, type);	WITHOUT_CLASSIFICATION	0.999909410607512	WITHOUT_CLASSIFICATION	9.058939248789179E-5	DESIGN
// a "detached" collection that originally belonged to the same entity	WITHOUT_CLASSIFICATION	0.9999991132069121	WITHOUT_CLASSIFICATION	8.867930879104368E-7	DESIGN
//do nothing	WITHOUT_CLASSIFICATION	0.9997771642449576	WITHOUT_CLASSIFICATION	2.228357550425077E-4	DESIGN
//do nothing	WITHOUT_CLASSIFICATION	0.9997771642449576	WITHOUT_CLASSIFICATION	2.228357550425077E-4	DESIGN
//Force a substitution!	WITHOUT_CLASSIFICATION	0.9998648688976913	WITHOUT_CLASSIFICATION	1.3513110230869627E-4	DESIGN
// The user requested a "greater" (i.e. more restrictive) form of // pessimistic lock	WITHOUT_CLASSIFICATION	0.9999999248849988	WITHOUT_CLASSIFICATION	7.511500125802819E-8	DESIGN
// the database now holds a lock + the object is flushed from the cache, // so release the soft lock	WITHOUT_CLASSIFICATION	0.9999925774592162	WITHOUT_CLASSIFICATION	7.422540783689329E-6	DESIGN
// now update the object .. has to be outside the main if block above (because of collections)	WITHOUT_CLASSIFICATION	0.999999775649065	WITHOUT_CLASSIFICATION	2.2435093504857008E-7	DESIGN
// Search for collections by reachability, updating their role. // We don't want to touch collections reachable from a deleted object	WITHOUT_CLASSIFICATION	0.701729843322541	WITHOUT_CLASSIFICATION	0.29827015667745904	DESIGN
// this is a situation where the entity id is assigned by a post-insert generator // and was saved outside the transaction forcing it to be delayed	WITHOUT_CLASSIFICATION	0.999999841110434	WITHOUT_CLASSIFICATION	1.5888956599092288E-7	DESIGN
// NOTE: we need to do the wrap here even if its not "dirty", // because collections need wrapping but changes to _them_ // don't dirty the container. Also, for versioned data, we // need to wrap before calling searchForDirtyCollections	WITHOUT_CLASSIFICATION	0.9999941601134464	WITHOUT_CLASSIFICATION	5.839886553587895E-6	DESIGN
//grab its state saved at deletion	WITHOUT_CLASSIFICATION	0.9999990024477421	WITHOUT_CLASSIFICATION	9.975522578876218E-7	DESIGN
// grab its current state	WITHOUT_CLASSIFICATION	0.9999971911346388	WITHOUT_CLASSIFICATION	2.8088653612273453E-6	DESIGN
// schedule the update // note that we intentionally do _not_ pass in currentPersistentState!	WITHOUT_CLASSIFICATION	0.9999990972542511	WITHOUT_CLASSIFICATION	9.027457489514906E-7	DESIGN
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999930845808577	WITHOUT_CLASSIFICATION	6.915419142233585E-6	DESIGN
// give the Interceptor a chance to process property values, if the properties // were modified by the Interceptor, we need to set them back to the object	WITHOUT_CLASSIFICATION	0.999999240490526	WITHOUT_CLASSIFICATION	7.595094739647925E-7	DESIGN
// compare to cached state (ignoring collections unless versioned)	WITHOUT_CLASSIFICATION	0.9999999850867136	WITHOUT_CLASSIFICATION	1.491328632528331E-8	DESIGN
// if it was dirtied by a collection only	WITHOUT_CLASSIFICATION	0.999999765783746	WITHOUT_CLASSIFICATION	2.342162539046538E-7	DESIGN
// increment the version number (if necessary)	WITHOUT_CLASSIFICATION	0.999996296990741	WITHOUT_CLASSIFICATION	3.7030092590038876E-6	DESIGN
// check nullability but do not perform command execute // we'll use scheduled updates for that.	WITHOUT_CLASSIFICATION	0.9999378413473147	WITHOUT_CLASSIFICATION	6.215865268532023E-5	DESIGN
//give the Interceptor a chance to modify property values	WITHOUT_CLASSIFICATION	0.9999504377073206	WITHOUT_CLASSIFICATION	4.9562292679395155E-5	DESIGN
//now we might need to recalculate the dirtyProperties array	WITHOUT_CLASSIFICATION	0.9998810537559032	WITHOUT_CLASSIFICATION	1.189462440968323E-4	DESIGN
//use the current version	WITHOUT_CLASSIFICATION	0.9999950993637889	WITHOUT_CLASSIFICATION	4.90063621102775E-6	DESIGN
// Interceptor returned null, so do the dirtycheck ourself, if possible	WITHOUT_CLASSIFICATION	0.9999999992984926	WITHOUT_CLASSIFICATION	7.01507403355802E-10	DESIGN
// object loaded by update()	WITHOUT_CLASSIFICATION	0.9999981447863308	WITHOUT_CLASSIFICATION	1.8552136692446138E-6	DESIGN
// dirty check against the usual snapshot of the entity	WITHOUT_CLASSIFICATION	0.9999999299308755	WITHOUT_CLASSIFICATION	7.00691243911569E-8	DESIGN
// dirty check against the database snapshot, if possible/necessary	WITHOUT_CLASSIFICATION	0.9999999935728492	WITHOUT_CLASSIFICATION	6.427150753406946E-9	DESIGN
// the Interceptor handled the dirty checking	WITHOUT_CLASSIFICATION	0.9982605849803371	WITHOUT_CLASSIFICATION	0.0017394150196629544	DESIGN
//even process null collections	WITHOUT_CLASSIFICATION	0.999999952994667	WITHOUT_CLASSIFICATION	4.700533283223597E-8	DESIGN
// get the id from the object	WITHOUT_CLASSIFICATION	0.999984239680568	WITHOUT_CLASSIFICATION	1.576031943189544E-5	DESIGN
//always do an INSERT, and let it fail by constraint violation	WITHOUT_CLASSIFICATION	0.9999999907323944	WITHOUT_CLASSIFICATION	9.26760565711651E-9	DESIGN
//what is the version on the database?	WITHOUT_CLASSIFICATION	0.9915906704677325	WITHOUT_CLASSIFICATION	0.008409329532267399	DESIGN
/// HHH-2378	WITHOUT_CLASSIFICATION	0.9999006107455184	WITHOUT_CLASSIFICATION	9.938925448172819E-5	DESIGN
//will result in a SQL UPDATE:	WITHOUT_CLASSIFICATION	0.9998095902023244	WITHOUT_CLASSIFICATION	1.9040979767558837E-4	DESIGN
//else do nothing (don't even reassociate object!)	WITHOUT_CLASSIFICATION	0.9999957349444084	WITHOUT_CLASSIFICATION	4.265055591558253E-6	DESIGN
// no existing row - do an insert	WITHOUT_CLASSIFICATION	0.9999882492029186	WITHOUT_CLASSIFICATION	1.1750797081342213E-5	DESIGN
//refresh() does not pass an entityName	WITHOUT_CLASSIFICATION	0.9999983331661662	WITHOUT_CLASSIFICATION	1.666833833877156E-6	DESIGN
//do not return a proxy! //(this option indicates we are initializing a proxy)	WITHOUT_CLASSIFICATION	0.9947224756706258	WITHOUT_CLASSIFICATION	0.0052775243293741985	DESIGN
//return a proxy if appropriate	WITHOUT_CLASSIFICATION	0.9999998518951114	WITHOUT_CLASSIFICATION	1.4810488854426934E-7	DESIGN
// return existing object or initialized proxy (unless deleted)	WITHOUT_CLASSIFICATION	0.9999733704202334	WITHOUT_CLASSIFICATION	2.6629579766624248E-5	DESIGN
// return new uninitialized proxy	WITHOUT_CLASSIFICATION	0.9998137801360653	WITHOUT_CLASSIFICATION	1.862198639347291E-4	DESIGN
// this object was already loaded	WITHOUT_CLASSIFICATION	0.9998583860643978	WITHOUT_CLASSIFICATION	1.4161393560215444E-4	DESIGN
// Entity was found in second-level cache...	WITHOUT_CLASSIFICATION	0.9969495267178523	WITHOUT_CLASSIFICATION	0.0030504732821476552	DESIGN
// make it circular-reference safe	WITHOUT_CLASSIFICATION	0.9999884838379546	WITHOUT_CLASSIFICATION	1.1516162045367025E-5	DESIGN
// intializes result by side-effect	WITHOUT_CLASSIFICATION	0.9999994186641458	WITHOUT_CLASSIFICATION	5.8133585419819E-7	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Pre-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999963385012	WITHOUT_CLASSIFICATION	3.661498808619142E-8	DESIGN
//some statistics	WITHOUT_CLASSIFICATION	0.9989973763042289	WITHOUT_CLASSIFICATION	0.0010026236957710883	DESIGN
//safe from concurrent modification because of how entryList() is implemented on IdentityMap	WITHOUT_CLASSIFICATION	0.9986383941529129	WITHOUT_CLASSIFICATION	0.0013616058470870508	DESIGN
// Initialize dirty flags for arrays + collections with composite elements // and reset reached, doupdate, etc.	WITHOUT_CLASSIFICATION	0.9999998900167113	WITHOUT_CLASSIFICATION	1.0998328862681551E-7	DESIGN
// Among other things, updateReachables() will recursively load all // collections that are moving roles. This might cause entities to // be loaded.	WITHOUT_CLASSIFICATION	0.9998252698837108	WITHOUT_CLASSIFICATION	1.7473011628910639E-4	DESIGN
// So this needs to be safe from concurrent modification problems. // It is safe because of how IdentityMap implements entrySet()	WITHOUT_CLASSIFICATION	0.8601573159932109	WITHOUT_CLASSIFICATION	0.13984268400678906	DESIGN
// Update the status of the object and if necessary, schedule an update	WITHOUT_CLASSIFICATION	0.99999779922361	WITHOUT_CLASSIFICATION	2.2007763900094676E-6	DESIGN
// Schedule updates to collections:	WITHOUT_CLASSIFICATION	0.9999966415796295	WITHOUT_CLASSIFICATION	3.3584203704966018E-6	DESIGN
// we need to lock the collection caches before // executing entity inserts/updates in order to // account for bidi associations	WITHOUT_CLASSIFICATION	0.9999972190612888	WITHOUT_CLASSIFICATION	2.7809387112894297E-6	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Post-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999678263071	WITHOUT_CLASSIFICATION	3.217369292038766E-8	DESIGN
//the database has changed now, so the subselect results need to be invalidated	WITHOUT_CLASSIFICATION	0.9999993906574203	WITHOUT_CLASSIFICATION	6.093425796607485E-7	DESIGN
//if the collection is dereferenced, remove from the session cache //iter.remove(); //does not work, since the entrySet is not backed by the set	WITHOUT_CLASSIFICATION	0.9999998528472314	WITHOUT_CLASSIFICATION	1.4715276856597116E-7	DESIGN
//otherwise recreate the mapping between the collection and its key	WITHOUT_CLASSIFICATION	0.9999998800958393	WITHOUT_CLASSIFICATION	1.1990416069484657E-7	DESIGN
//get a snapshot	WITHOUT_CLASSIFICATION	0.9999665366852052	WITHOUT_CLASSIFICATION	3.346331479487491E-5	DESIGN
/* package-private */	WITHOUT_CLASSIFICATION	0.9999402858148194	WITHOUT_CLASSIFICATION	5.9714185180517037E-5	DESIGN
/* package-private */	WITHOUT_CLASSIFICATION	0.9999402858148194	WITHOUT_CLASSIFICATION	5.9714185180517037E-5	DESIGN
// key is an entity involved with the operation performed by the listener; // value is a flag indicating if the listener explicitly operates on the entity	WITHOUT_CLASSIFICATION	0.9999989569265656	WITHOUT_CLASSIFICATION	1.0430734344797101E-6	DESIGN
// EARLY EXIT!!!	WITHOUT_CLASSIFICATION	0.9949840280871419	WITHOUT_CLASSIFICATION	0.005015971912858064	DESIGN
//ie. the entity came in from update()	WITHOUT_CLASSIFICATION	0.9995484838082785	WITHOUT_CLASSIFICATION	4.5151619172139376E-4	DESIGN
// before any callbacks, etc, so subdeletions see that this deletion happened first	WITHOUT_CLASSIFICATION	0.9999741976050375	WITHOUT_CLASSIFICATION	2.580239496256413E-5	DESIGN
// Ensures that containing deletions happen before sub-deletions	WITHOUT_CLASSIFICATION	0.9999999673630361	WITHOUT_CLASSIFICATION	3.2636963871240495E-8	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999538292619589	WITHOUT_CLASSIFICATION	4.617073804128677E-5	DESIGN
// cascade-delete to collections BEFORE the collection owner is deleted	WITHOUT_CLASSIFICATION	0.9999999210999051	WITHOUT_CLASSIFICATION	7.89000949351372E-8	DESIGN
// cascade-delete to many-to-one AFTER the parent was deleted	WITHOUT_CLASSIFICATION	0.999974852686196	WITHOUT_CLASSIFICATION	2.5147313803995028E-5	DESIGN
// if it is an initialized proxy, let cascade // handle it later on	WITHOUT_CLASSIFICATION	0.9999844769410096	WITHOUT_CLASSIFICATION	1.552305899044106E-5	DESIGN
//assign the requested id to the proxy, *before* //reassociating the proxy	WITHOUT_CLASSIFICATION	0.9999506861832514	WITHOUT_CLASSIFICATION	4.9313816748644804E-5	DESIGN
// an uninitialized proxy, noop, don't even need to // return an id, since it is never a save()	WITHOUT_CLASSIFICATION	0.9999974795884736	WITHOUT_CLASSIFICATION	2.520411526341678E-6	DESIGN
//initialize properties of the event:	WITHOUT_CLASSIFICATION	0.9999820773134519	WITHOUT_CLASSIFICATION	1.7922686548023285E-5	DESIGN
//return the id in the event object	WITHOUT_CLASSIFICATION	0.9999163706304937	WITHOUT_CLASSIFICATION	8.362936950635268E-5	DESIGN
//TRANSIENT or DELETED	WITHOUT_CLASSIFICATION	0.9999956517393741	WITHOUT_CLASSIFICATION	4.348260625891458E-6	DESIGN
// use the id assigned to the instance	WITHOUT_CLASSIFICATION	0.9999966228513598	WITHOUT_CLASSIFICATION	3.377148640048865E-6	DESIGN
// assume this is a newly instantiated transient object // which should be saved rather than updated	WITHOUT_CLASSIFICATION	0.9632248314487064	WITHOUT_CLASSIFICATION	0.03677516855129355	DESIGN
// this is a transient object with existing persistent state not loaded by the session	WITHOUT_CLASSIFICATION	0.999996555679204	WITHOUT_CLASSIFICATION	3.444320796088874E-6	DESIGN
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999957605157297	WITHOUT_CLASSIFICATION	4.239484270258239E-6	DESIGN
//cachedState,	WITHOUT_CLASSIFICATION	0.9999613430343276	WITHOUT_CLASSIFICATION	3.865696567243631E-5	DESIGN
//assume true, since we don't really know, and it doesn't matter	WITHOUT_CLASSIFICATION	0.9947062938396789	WITHOUT_CLASSIFICATION	0.005293706160321052	DESIGN
//a "detached" collection!	WITHOUT_CLASSIFICATION	0.9999993940802864	WITHOUT_CLASSIFICATION	6.059197135896274E-7	DESIGN
// if the collection belonged to a different entity, // clean up the existing state of the collection	WITHOUT_CLASSIFICATION	0.9999994516594709	WITHOUT_CLASSIFICATION	5.483405291713601E-7	DESIGN
//log.debug( "calling onLoad()" );	WITHOUT_CLASSIFICATION	0.9999999049871465	WITHOUT_CLASSIFICATION	9.501285346535765E-8	DESIGN
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9984900082489934	WITHOUT_CLASSIFICATION	0.001509991751006678	DESIGN
// note: performExecutions() clears all collectionXxxxtion  // collections (the collection actions) in the session	WITHOUT_CLASSIFICATION	0.9999919357401489	WITHOUT_CLASSIFICATION	8.06425985116183E-6	DESIGN
// if no array holder we found an unwrappered array (this can't occur, // because we now always call wrap() before getting to here) // return (ah==null) ? true : searchForDirtyCollections(ah, type);	WITHOUT_CLASSIFICATION	0.9999346996319174	WITHOUT_CLASSIFICATION	6.53003680826302E-5	DESIGN
// if not wrappered yet, its dirty (this can't occur, because // we now always call wrap() before getting to here) // return ( ! (obj instanceof PersistentCollection) ) ? //true : searchForDirtyCollections( (PersistentCollection) obj, type );	WITHOUT_CLASSIFICATION	0.9980118250496774	WITHOUT_CLASSIFICATION	0.0019881749503224792	DESIGN
//we need to check even if it was not initialized, because of delayed adds!	WITHOUT_CLASSIFICATION	0.9998971572075271	WITHOUT_CLASSIFICATION	1.0284279247288571E-4	DESIGN
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.953391176089087	WITHOUT_CLASSIFICATION	0.04660882391091291	DESIGN
// find any entities that are still transient after retry	WITHOUT_CLASSIFICATION	0.9999997221779475	WITHOUT_CLASSIFICATION	2.7782205238939313E-7	DESIGN
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9984900082489934	WITHOUT_CLASSIFICATION	0.001509991751006678	DESIGN
// Check the persistence context for an entry relating to this // entity to be merged...	WITHOUT_CLASSIFICATION	0.9999159563132759	WITHOUT_CLASSIFICATION	8.404368672402306E-5	DESIGN
// we have specialized case of a detached entity from the // perspective of the merge operation.  Specifically, we // have an incoming entity instance which has a corresponding // entry in the current persistence context, but registered // under a different entity instance	WITHOUT_CLASSIFICATION	0.9972431697139458	WITHOUT_CLASSIFICATION	0.0027568302860541635	DESIGN
//DELETED	WITHOUT_CLASSIFICATION	0.9996335249258516	WITHOUT_CLASSIFICATION	3.6647507414849453E-4	DESIGN
//before cascade!	WITHOUT_CLASSIFICATION	0.9998532450181078	WITHOUT_CLASSIFICATION	1.4675498189219328E-4	DESIGN
// cascade first, so that all unsaved objects get their // copy created before we actually copy //cascadeOnMerge(event, persister, entity, copyCache, Cascades.CASCADE_BEFORE_MERGE);	WITHOUT_CLASSIFICATION	0.9999999608964079	WITHOUT_CLASSIFICATION	3.9103592149126165E-8	DESIGN
//this bit is only *really* absolutely necessary for handling //requestedId, but is also good if we merge multiple object //graphs, since it helps ensure uniqueness	WITHOUT_CLASSIFICATION	0.9997397511523747	WITHOUT_CLASSIFICATION	2.602488476253827E-4	DESIGN
// continue...; we'll find out if it ends up not getting saved later	WITHOUT_CLASSIFICATION	0.9996630835823543	WITHOUT_CLASSIFICATION	3.369164176455625E-4	DESIGN
// cascade first, so that all unsaved objects get their // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999996017265822	WITHOUT_CLASSIFICATION	3.9827341775957276E-7	DESIGN
// check that entity id = requestedId	WITHOUT_CLASSIFICATION	0.9999016750393083	WITHOUT_CLASSIFICATION	9.832496069175026E-5	DESIGN
//before cascade!	WITHOUT_CLASSIFICATION	0.9998532450181078	WITHOUT_CLASSIFICATION	1.4675498189219328E-4	DESIGN
// we got here because we assumed that an instance // with an assigned id was detached, when it was // really persistent	WITHOUT_CLASSIFICATION	0.9999992743953698	WITHOUT_CLASSIFICATION	7.256046302060613E-7	DESIGN
// cascade first, so that all unsaved objects get their  // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.999997105613279	WITHOUT_CLASSIFICATION	2.8943867210118015E-6	DESIGN
//copyValues works by reflection, so explicitly mark the entity instance dirty	WITHOUT_CLASSIFICATION	0.9998685115524099	WITHOUT_CLASSIFICATION	1.314884475901581E-4	DESIGN
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.9995157325605941	WITHOUT_CLASSIFICATION	4.8426743940583667E-4	DESIGN
//source.getBatcher().executeBatch(); //found another way to ensure that all batched joined inserts have been executed	WITHOUT_CLASSIFICATION	0.9999999959124688	WITHOUT_CLASSIFICATION	4.087531163962448E-9	DESIGN
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999930845808577	WITHOUT_CLASSIFICATION	6.915419142233585E-6	DESIGN
//now done in EntityIdentityInsertAction //persister.setIdentifier( entity, id, source.getEntityMode() );	WITHOUT_CLASSIFICATION	0.9999997855145163	WITHOUT_CLASSIFICATION	2.1448548378213155E-7	DESIGN
//source.getPersistenceContext().removeNonExist( new EntityKey( id, persister, source.getEntityMode() ) );	WITHOUT_CLASSIFICATION	0.9999991268600245	WITHOUT_CLASSIFICATION	8.731399755474335E-7	DESIGN
//keep the existing version number in the case of replicate!	WITHOUT_CLASSIFICATION	0.99899557256883	WITHOUT_CLASSIFICATION	0.0010044274311700057	DESIGN
// cascade-save to many-to-one BEFORE the parent is saved	WITHOUT_CLASSIFICATION	0.9999658449694903	WITHOUT_CLASSIFICATION	3.415503050975732E-5	DESIGN
//pass this as an argument only to avoid double looking	WITHOUT_CLASSIFICATION	0.9799322727638388	WITHOUT_CLASSIFICATION	0.020067727236161282	DESIGN
// the object is persistent	WITHOUT_CLASSIFICATION	0.9999804041307473	WITHOUT_CLASSIFICATION	1.9595869252730987E-5	DESIGN
//the entity is associated with the session, so check its status	WITHOUT_CLASSIFICATION	0.9999889323591249	WITHOUT_CLASSIFICATION	1.1067640875080136E-5	DESIGN
// do nothing for persistent instances	WITHOUT_CLASSIFICATION	0.9999916956453527	WITHOUT_CLASSIFICATION	8.304354647216176E-6	DESIGN
//ie. e.status==DELETED	WITHOUT_CLASSIFICATION	0.9999774295218182	WITHOUT_CLASSIFICATION	2.2570478181785698E-5	DESIGN
// the object is transient or detached	WITHOUT_CLASSIFICATION	0.9999994090732495	WITHOUT_CLASSIFICATION	5.909267504912058E-7	DESIGN
//NOTE EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9981219785581624	WITHOUT_CLASSIFICATION	0.0018780214418375766	DESIGN
// Private constructor - stops checkstyle from complaining.	WITHOUT_CLASSIFICATION	0.9999995127097222	WITHOUT_CLASSIFICATION	4.87290277788569E-7	DESIGN
// First, try to find a matching constructor accepting a ViolatedConstraintNameExtracter param...	WITHOUT_CLASSIFICATION	0.9999962395259722	WITHOUT_CLASSIFICATION	3.76047402771984E-6	DESIGN
// eat it and try next	WITHOUT_CLASSIFICATION	0.9995623457315401	WITHOUT_CLASSIFICATION	4.3765426845987905E-4	DESIGN
// Otherwise, try to use the no-arg constructor	WITHOUT_CLASSIFICATION	0.9997661462745585	WITHOUT_CLASSIFICATION	2.3385372544146852E-4	DESIGN
// oracle sql-state code for deadlock	WITHOUT_CLASSIFICATION	0.9999968278230955	WITHOUT_CLASSIFICATION	3.1721769044320397E-6	DESIGN
// CollectionPropertyMapping processes everything except 'index'.	WITHOUT_CLASSIFICATION	0.9999999903436467	WITHOUT_CLASSIFICATION	9.656353342840712E-9	DESIGN
// remove initial ", "	WITHOUT_CLASSIFICATION	0.9999883475062211	WITHOUT_CLASSIFICATION	1.1652493778799483E-5	DESIGN
// remove initial " and "	WITHOUT_CLASSIFICATION	0.9999902012116948	WITHOUT_CLASSIFICATION	9.79878830518607E-6	DESIGN
//beforeClassTokens.add("new"); DEFINITELY DON'T HAVE THIS!!	WITHOUT_CLASSIFICATION	0.9980010788700389	WITHOUT_CLASSIFICATION	0.0019989211299611493	DESIGN
//notAfterClassTokens.add(",");	WITHOUT_CLASSIFICATION	0.999994814927572	WITHOUT_CLASSIFICATION	5.185072427964089E-6	DESIGN
// just especially for the trivial collection filter	WITHOUT_CLASSIFICATION	0.9999997514454803	WITHOUT_CLASSIFICATION	2.4855451964972427E-7	DESIGN
//update last non-whitespace token, if necessary	WITHOUT_CLASSIFICATION	0.9999995263640259	WITHOUT_CLASSIFICATION	4.736359740154244E-7	DESIGN
// select-range is terminated by declaration of "from"	WITHOUT_CLASSIFICATION	0.999970916270251	WITHOUT_CLASSIFICATION	2.9083729748976317E-5	DESIGN
//scan for next non-whitespace token	WITHOUT_CLASSIFICATION	0.9999879023815843	WITHOUT_CLASSIFICATION	1.2097618415683215E-5	DESIGN
// Note this!!	WITHOUT_CLASSIFICATION	0.9994458503602591	WITHOUT_CLASSIFICATION	5.541496397408276E-4	DESIGN
// Error message constants.	WITHOUT_CLASSIFICATION	0.9999997906897615	WITHOUT_CLASSIFICATION	2.0931023857484503E-7	DESIGN
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999813040299872	WITHOUT_CLASSIFICATION	1.8695970012762337E-5	DESIGN
// semantic action handling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999991206620283	WITHOUT_CLASSIFICATION	8.793379716304699E-7	DESIGN
// Handle collection-fiter compilation. // IMPORTANT NOTE: This is modifying the INPUT (HQL) tree, not the output tree!	WITHOUT_CLASSIFICATION	0.9990572038587531	WITHOUT_CLASSIFICATION	9.427961412469799E-4	DESIGN
// Show the modified AST.	WITHOUT_CLASSIFICATION	0.9999235601976172	WITHOUT_CLASSIFICATION	7.64398023829014E-5	DESIGN
// Create a parameter specification for the collection filter...	WITHOUT_CLASSIFICATION	0.9999997303455765	WITHOUT_CLASSIFICATION	2.696544235252448E-7	DESIGN
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999983711453937	WITHOUT_CLASSIFICATION	1.6288546062877238E-6	DESIGN
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999983711453937	WITHOUT_CLASSIFICATION	1.6288546062877238E-6	DESIGN
// Get the names of the columns used to link between the collection // owner and the collection elements.	WITHOUT_CLASSIFICATION	0.9999995905692451	WITHOUT_CLASSIFICATION	4.094307547978304E-7	DESIGN
// The path AST should be a DotNode, and it should have been evaluated already.	WITHOUT_CLASSIFICATION	0.9999958483464406	WITHOUT_CLASSIFICATION	4.1516535593542785E-6	DESIGN
// Tell the dot node about the join type.	WITHOUT_CLASSIFICATION	0.9999996970138664	WITHOUT_CLASSIFICATION	3.0298613364225563E-7	DESIGN
// Re-arrange the tree so that the collection function is the root and the lhs is the path.	WITHOUT_CLASSIFICATION	0.999999927582914	WITHOUT_CLASSIFICATION	7.241708605721067E-8	DESIGN
// Don't forget to resolve the argument! // Resolve the collection function now.	WITHOUT_CLASSIFICATION	0.9999574043027241	WITHOUT_CLASSIFICATION	4.259569727592565E-5	DESIGN
// Resolve everything up to this dot, but don't resolve the placeholders yet.	WITHOUT_CLASSIFICATION	0.9809016893063978	WITHOUT_CLASSIFICATION	0.0190983106936023	DESIGN
// Should mean that no such property was found	WITHOUT_CLASSIFICATION	0.9708801223016637	WITHOUT_CLASSIFICATION	0.02911987769833637	DESIGN
// Was there an explicit select expression?	WITHOUT_CLASSIFICATION	0.9999998432352145	WITHOUT_CLASSIFICATION	1.5676478554089716E-7	DESIGN
// Attach any mapping-defined "ORDER BY" fragments	WITHOUT_CLASSIFICATION	0.9999999938551122	WITHOUT_CLASSIFICATION	6.144887747685444E-9	DESIGN
// Use the explicitly declared select expression; determine the // return types indicated by each select token	WITHOUT_CLASSIFICATION	0.9999997204778641	WITHOUT_CLASSIFICATION	2.795221359004195E-7	DESIGN
// After that, process the JOINs. // Invoke a delegate to do the work, as this is farily complex.	WITHOUT_CLASSIFICATION	0.9999985109682978	WITHOUT_CLASSIFICATION	1.489031702237373E-6	DESIGN
// Make #@%$^#^&# sure no alias is applied to the table name	WITHOUT_CLASSIFICATION	0.999999741104631	WITHOUT_CLASSIFICATION	2.5889536901644277E-7	DESIGN
// We need to generate ids as part of this bulk insert. // // Note that this is only supported for sequence-style generators and // post-insert-style generators; basically, only in-db generators	WITHOUT_CLASSIFICATION	0.9996209687169124	WITHOUT_CLASSIFICATION	3.7903128308760587E-4	DESIGN
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999983711453937	WITHOUT_CLASSIFICATION	1.6288546062877238E-6	DESIGN
// We need to seed the version value as part of this bulk insert	WITHOUT_CLASSIFICATION	0.9998718492149787	WITHOUT_CLASSIFICATION	1.281507850212642E-4	DESIGN
// we need to wrtap the param in a cast()	WITHOUT_CLASSIFICATION	0.9999849402912224	WITHOUT_CLASSIFICATION	1.505970877757998E-5	DESIGN
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9931810621799098	WITHOUT_CLASSIFICATION	0.006818937820090166	DESIGN
// Generate implicit joins, only if necessary.	WITHOUT_CLASSIFICATION	0.9999991048781414	WITHOUT_CLASSIFICATION	8.9512185860604E-7	DESIGN
// Notify the FROM element that it is being referenced by the select.	WITHOUT_CLASSIFICATION	0.9999733376937262	WITHOUT_CLASSIFICATION	2.6662306273848754E-5	DESIGN
// Turn off includeSubclasses on all FromElements.	WITHOUT_CLASSIFICATION	0.999999932546763	WITHOUT_CLASSIFICATION	6.745323691805827E-8	DESIGN
// create the node initially with the param name so that it shows // appropriately in the "original text" attribute	WITHOUT_CLASSIFICATION	0.9999839877730945	WITHOUT_CLASSIFICATION	1.6012226905557865E-5	DESIGN
// Use the delegate, resolve identifiers as FROM element aliases.	WITHOUT_CLASSIFICATION	0.9999931448040414	WITHOUT_CLASSIFICATION	6.855195958553568E-6	DESIGN
// select clauses for insert statements should alwasy be treated as shallow	WITHOUT_CLASSIFICATION	0.9999207239972251	WITHOUT_CLASSIFICATION	7.92760027749001E-5	DESIGN
// no need to even collect this information if the persister is considered multi-table	WITHOUT_CLASSIFICATION	0.9999464158259233	WITHOUT_CLASSIFICATION	5.3584174076814494E-5	DESIGN
// Make sure that the persister is versioned	WITHOUT_CLASSIFICATION	0.9999253539211144	WITHOUT_CLASSIFICATION	7.464607888562411E-5	DESIGN
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999813040299872	WITHOUT_CLASSIFICATION	1.8695970012762337E-5	DESIGN
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999983711453937	WITHOUT_CLASSIFICATION	1.6288546062877238E-6	DESIGN
// --Commented out by Inspection (12/11/04 10:56 AM): int getWarningCount();	WITHOUT_CLASSIFICATION	0.9999999815052765	WITHOUT_CLASSIFICATION	1.8494723506928155E-8	DESIGN
// Alias references and identifiers use the same node class.	WITHOUT_CLASSIFICATION	0.9999984192973752	WITHOUT_CLASSIFICATION	1.5807026247528877E-6	DESIGN
// switch	WITHOUT_CLASSIFICATION	0.9999176822733457	WITHOUT_CLASSIFICATION	8.231772665434223E-5	DESIGN
// make a new one	WITHOUT_CLASSIFICATION	0.9999983841488504	WITHOUT_CLASSIFICATION	1.615851149590621E-6	DESIGN
// just do the regular thing if you can't find the ctor // Your AST must have default ctor to use this.	WITHOUT_CLASSIFICATION	0.9997332724621417	WITHOUT_CLASSIFICATION	2.6672753785819616E-4	DESIGN
// Initialize SQL nodes here.	WITHOUT_CLASSIFICATION	0.9999891889214313	WITHOUT_CLASSIFICATION	1.0811078568696995E-5	DESIGN
// semantic action processing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996824366817	WITHOUT_CLASSIFICATION	3.1756331832362446E-7	DESIGN
// if template is null we just write the function out as it appears in the hql statement	WITHOUT_CLASSIFICATION	0.9999996575691439	WITHOUT_CLASSIFICATION	3.424308561290557E-7	DESIGN
// this function has a template -> redirect output and catch the arguments	WITHOUT_CLASSIFICATION	0.9999982704566589	WITHOUT_CLASSIFICATION	1.729543341126932E-6	DESIGN
// --- Inner classes (moved here from sql-gen.g) ---	WITHOUT_CLASSIFICATION	0.9999675079511129	WITHOUT_CLASSIFICATION	3.249204888711486E-5	DESIGN
// check two "adjecent" nodes at the top of the from-clause tree	WITHOUT_CLASSIFICATION	0.9999987097851311	WITHOUT_CLASSIFICATION	1.2902148688633463E-6	DESIGN
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9999860785196982	WITHOUT_CLASSIFICATION	1.392148030177787E-5	DESIGN
// these are just two unrelated table references	WITHOUT_CLASSIFICATION	0.9996450462486214	WITHOUT_CLASSIFICATION	3.5495375137856665E-4	DESIGN
// again, both should be FromElements	WITHOUT_CLASSIFICATION	0.9999996408838289	WITHOUT_CLASSIFICATION	3.59116171118271E-7	DESIGN
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9960042253661068	WITHOUT_CLASSIFICATION	0.003995774633893223	DESIGN
// right represents a joins originating from left; or // both right and left reprersent joins originating from the same FromElement	WITHOUT_CLASSIFICATION	0.9997000458692961	WITHOUT_CLASSIFICATION	2.999541307039561E-4	DESIGN
// check a set of parent/child nodes in the from-clause tree // to determine if a comma is required between them	WITHOUT_CLASSIFICATION	0.9999999718041251	WITHOUT_CLASSIFICATION	2.819587492970331E-8	DESIGN
// right represents a joins originating from left...	WITHOUT_CLASSIFICATION	0.9994550675647429	WITHOUT_CLASSIFICATION	5.449324352571094E-4	DESIGN
// all clear	WITHOUT_CLASSIFICATION	0.9999911695668061	WITHOUT_CLASSIFICATION	8.830433193904025E-6	DESIGN
// Ignore the token class name parameter, and use a specific token class.	WITHOUT_CLASSIFICATION	0.9999999252184174	WITHOUT_CLASSIFICATION	7.478158262018996E-8	DESIGN
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999986530191723	WITHOUT_CLASSIFICATION	1.346980827689815E-6	DESIGN
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999986530191723	WITHOUT_CLASSIFICATION	1.346980827689815E-6	DESIGN
// remember that ordinal parameters numbers are 1-based!!!	WITHOUT_CLASSIFICATION	0.9998962826180512	WITHOUT_CLASSIFICATION	1.0371738194875725E-4	DESIGN
// don't care about other param types here, just those explicitly user-defined...	WITHOUT_CLASSIFICATION	0.9999999510741593	WITHOUT_CLASSIFICATION	4.89258407751557E-8	DESIGN
// If the query is already compiled, skip the compilation.	WITHOUT_CLASSIFICATION	0.9999999917209609	WITHOUT_CLASSIFICATION	8.279039172332056E-9	DESIGN
// Remember the parameters for the compilation.	WITHOUT_CLASSIFICATION	0.9999994623015862	WITHOUT_CLASSIFICATION	5.376984137422267E-7	DESIGN
// PHASE 1 : Parse the HQL into an AST.	WITHOUT_CLASSIFICATION	0.9999956239994124	WITHOUT_CLASSIFICATION	4.37600058752577E-6	DESIGN
// PHASE 2 : Analyze the HQL AST, and produce an SQL AST.	WITHOUT_CLASSIFICATION	0.9999348037823114	WITHOUT_CLASSIFICATION	6.519621768869421E-5	DESIGN
// PHASE 3 : Generate the SQL.	WITHOUT_CLASSIFICATION	0.9998303654882791	WITHOUT_CLASSIFICATION	1.696345117209812E-4	DESIGN
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9999997538856595	WITHOUT_CLASSIFICATION	2.4611434051464916E-7	DESIGN
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9999997538856595	WITHOUT_CLASSIFICATION	2.4611434051464916E-7	DESIGN
//only needed during compilation phase...	WITHOUT_CLASSIFICATION	0.9999944376278757	WITHOUT_CLASSIFICATION	5.562372124323056E-6	DESIGN
// Transform the tree.	WITHOUT_CLASSIFICATION	0.9999998522935006	WITHOUT_CLASSIFICATION	1.4770649933313927E-7	DESIGN
// Parse the query string into an HQL AST.	WITHOUT_CLASSIFICATION	0.9999957421645738	WITHOUT_CLASSIFICATION	4.257835426218363E-6	DESIGN
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999995250085142	WITHOUT_CLASSIFICATION	4.7499148588543084E-7	DESIGN
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999995250085142	WITHOUT_CLASSIFICATION	4.7499148588543084E-7	DESIGN
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999995250085142	WITHOUT_CLASSIFICATION	4.7499148588543084E-7	DESIGN
// NOTE : ( max - 1 ) because first is zero-based while max is not...	WITHOUT_CLASSIFICATION	0.9824109344194092	WITHOUT_CLASSIFICATION	0.01758906558059084	DESIGN
// -- Package local methods for the QueryLoader delegate --	WITHOUT_CLASSIFICATION	0.9999999232817902	WITHOUT_CLASSIFICATION	7.671820975102375E-8	DESIGN
// If there are no collection fetches, then no further checks are needed	WITHOUT_CLASSIFICATION	0.9999993904862093	WITHOUT_CLASSIFICATION	6.095137906372317E-7	DESIGN
// A shallow query is ok (although technically there should be no fetching here...)	WITHOUT_CLASSIFICATION	0.9697896755986543	WITHOUT_CLASSIFICATION	0.03021032440134576	DESIGN
// should be the first, but just to be safe...	WITHOUT_CLASSIFICATION	0.9987634969112591	WITHOUT_CLASSIFICATION	0.0012365030887409123	DESIGN
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999983711453937	WITHOUT_CLASSIFICATION	1.6288546062877238E-6	DESIGN
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999983711453937	WITHOUT_CLASSIFICATION	1.6288546062877238E-6	DESIGN
// Impl Note: allows multiple collection fetches as long as the // entire fecthed graph still "points back" to a single // root entity for return	WITHOUT_CLASSIFICATION	0.9999998266876599	WITHOUT_CLASSIFICATION	1.733123402287916E-7	DESIGN
// Otherwise, we have a non-scalar select with defined collection fetch(es). // Make sure that there is only a single root entity in the return (no tuples)	WITHOUT_CLASSIFICATION	0.9999899003007093	WITHOUT_CLASSIFICATION	1.0099699290698094E-5	DESIGN
// This is not strictly true.  We actually just need to make sure that // it is ordered by root-entity PK and that that order-by comes before // any non-root-entity ordering...	WITHOUT_CLASSIFICATION	0.9968242456831489	WITHOUT_CLASSIFICATION	0.003175754316851264	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999538292619589	WITHOUT_CLASSIFICATION	4.617073804128677E-5	DESIGN
// we are already processing a dot-structure	WITHOUT_CLASSIFICATION	0.9999875049136175	WITHOUT_CLASSIFICATION	1.2495086382541394E-5	DESIGN
// igndore it...	WITHOUT_CLASSIFICATION	0.9999967560299607	WITHOUT_CLASSIFICATION	3.243970039304903E-6	DESIGN
// we are now at a new tree level	WITHOUT_CLASSIFICATION	0.9999999180264293	WITHOUT_CLASSIFICATION	8.19735706152492E-8	DESIGN
// [jsd] The fix for HHH-558...	WITHOUT_CLASSIFICATION	0.9972679894872636	WITHOUT_CLASSIFICATION	0.002732010512736495	DESIGN
// If the token can tell us if it could be an identifier...	WITHOUT_CLASSIFICATION	0.9999428189688474	WITHOUT_CLASSIFICATION	5.718103115260231E-5	DESIGN
// ... and the expected token type was an identifier, then:	WITHOUT_CLASSIFICATION	0.9999999650444678	WITHOUT_CLASSIFICATION	3.495553224714739E-8	DESIGN
// Use the token as an identifier.	WITHOUT_CLASSIFICATION	0.9999995718048106	WITHOUT_CLASSIFICATION	4.281951894646679E-7	DESIGN
// Add the token to the AST.	WITHOUT_CLASSIFICATION	0.9999963883150788	WITHOUT_CLASSIFICATION	3.6116849211528534E-6	DESIGN
// (NOT (EQ a b) ) => (NE a b)	WITHOUT_CLASSIFICATION	0.9997935886209061	WITHOUT_CLASSIFICATION	2.0641137909390372E-4	DESIGN
// (NOT (NE a b) ) => (EQ a b)	WITHOUT_CLASSIFICATION	0.9997935886209061	WITHOUT_CLASSIFICATION	2.0641137909390372E-4	DESIGN
// (NOT (LT a b) ) => (GE a b)	WITHOUT_CLASSIFICATION	0.9997430085956194	WITHOUT_CLASSIFICATION	2.569914043806753E-4	DESIGN
// (NOT (GE a b) ) => (LT a b)	WITHOUT_CLASSIFICATION	0.9997430085956194	WITHOUT_CLASSIFICATION	2.569914043806753E-4	DESIGN
// (NOT (LE a b) ) => (GT a b)	WITHOUT_CLASSIFICATION	0.9994961506701383	WITHOUT_CLASSIFICATION	5.038493298617914E-4	DESIGN
// (NOT (LIKE a b) ) => (NOT_LIKE a b)	WITHOUT_CLASSIFICATION	0.999965514228702	WITHOUT_CLASSIFICATION	3.448577129804869E-5	DESIGN
// (NOT (NOT_LIKE a b) ) => (LIKE a b)	WITHOUT_CLASSIFICATION	0.999965514228702	WITHOUT_CLASSIFICATION	3.448577129804869E-5	DESIGN
// (NOT (IS_NOT_NULL a b) ) => (IS_NULL a b)	WITHOUT_CLASSIFICATION	0.9999689962550988	WITHOUT_CLASSIFICATION	3.100374490126425E-5	DESIGN
// (NOT (BETWEEN a b) ) => (NOT_BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999879437936134	WITHOUT_CLASSIFICATION	1.2056206386497161E-5	DESIGN
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999998846343539	WITHOUT_CLASSIFICATION	1.1536564604595916E-7	DESIGN
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999986530191723	WITHOUT_CLASSIFICATION	1.346980827689815E-6	DESIGN
// if // if // Otherwise, handle the error normally.	WITHOUT_CLASSIFICATION	0.9999988385322331	WITHOUT_CLASSIFICATION	1.1614677669103925E-6	DESIGN
// (NOT (NOT_BETWEEN a b) ) => (BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999879437936134	WITHOUT_CLASSIFICATION	1.2056206386497161E-5	DESIGN
/* This can never happen because this rule will always eliminate the child NOT.	WITHOUT_CLASSIFICATION	0.9928145809824346	WITHOUT_CLASSIFICATION	0.0071854190175654024	DESIGN
// Just add a 'not' parent.	WITHOUT_CLASSIFICATION	0.9999650511604264	WITHOUT_CLASSIFICATION	3.494883957351317E-5	DESIGN
// (EQ NULL b) => (IS_NULL b)	WITHOUT_CLASSIFICATION	0.999989653083919	WITHOUT_CLASSIFICATION	1.034691608096998E-5	DESIGN
// (EQ a NULL) => (IS_NULL a)	WITHOUT_CLASSIFICATION	0.9999940408284632	WITHOUT_CLASSIFICATION	5.959171536737729E-6	DESIGN
// NOTE: Because we're using ASTUtil.createParent(), the tree must be created from the bottom up. // IS EMPTY x => (EXISTS (QUERY (SELECT_FROM (FROM x) ) ) )	WITHOUT_CLASSIFICATION	0.9999977312269607	WITHOUT_CLASSIFICATION	2.268773039372954E-6	DESIGN
// Add NOT if it's negated.	WITHOUT_CLASSIFICATION	0.9993977558373621	WITHOUT_CLASSIFICATION	6.022441626379086E-4	DESIGN
// Create nodes that track line and column number.	WITHOUT_CLASSIFICATION	0.9999992354555562	WITHOUT_CLASSIFICATION	7.645444437613298E-7	DESIGN
// Case 1: Multi token keywords GROUP BY and ORDER BY // The next token ( LT(2) ) should be 'by'... otherwise, this is just an ident.	WITHOUT_CLASSIFICATION	0.9512108504788456	WITHOUT_CLASSIFICATION	0.04878914952115444	DESIGN
// Case 2: The current token is after FROM and before '.'.	WITHOUT_CLASSIFICATION	0.9999970376584071	WITHOUT_CLASSIFICATION	2.9623415930011037E-6	DESIGN
// This handles HHH-354, where there is a strange property name in a where clause. // If the lookahead contains a DOT then something that isn't an IDENT...	WITHOUT_CLASSIFICATION	0.6535617932474878	WITHOUT_CLASSIFICATION	0.3464382067525123	DESIGN
// See if the second lookahed token can be an identifier.	WITHOUT_CLASSIFICATION	0.9999999825473931	WITHOUT_CLASSIFICATION	1.74526069148823E-8	DESIGN
// Set it!	WITHOUT_CLASSIFICATION	0.9999416096377247	WITHOUT_CLASSIFICATION	5.839036227534312E-5	DESIGN
// ignore	WITHOUT_CLASSIFICATION	0.9999978563314406	WITHOUT_CLASSIFICATION	2.1436685594845756E-6	DESIGN
// strip the " where "	WITHOUT_CLASSIFICATION	0.9999975551037592	WITHOUT_CLASSIFICATION	2.4448962406696143E-6	DESIGN
// Don't really know all the codes required to adequately decipher returned jdbc exceptions here. // simply allow the failure to be eaten and the subsequent insert-selects/deletes should fail	WITHOUT_CLASSIFICATION	0.9999980524678646	WITHOUT_CLASSIFICATION	1.947532135515014E-6	DESIGN
// at the very least cleanup the data :)	WITHOUT_CLASSIFICATION	0.9987523766228171	WITHOUT_CLASSIFICATION	0.0012476233771828932	DESIGN
// First, save off the pertinent ids, as the return value	WITHOUT_CLASSIFICATION	0.9999933823777768	WITHOUT_CLASSIFICATION	6.617622223221428E-6	DESIGN
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999500032771028	WITHOUT_CLASSIFICATION	4.9996722897095165E-5	DESIGN
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999500032771028	WITHOUT_CLASSIFICATION	4.9996722897095165E-5	DESIGN
// Start performing the updates	WITHOUT_CLASSIFICATION	0.999988736840036	WITHOUT_CLASSIFICATION	1.1263159964019482E-5	DESIGN
// First, save off the pertinent ids, saving the number of pertinent ids for return	WITHOUT_CLASSIFICATION	0.9998509561156621	WITHOUT_CLASSIFICATION	1.490438843379365E-4	DESIGN
// Start performing the deletes	WITHOUT_CLASSIFICATION	0.999998547336297	WITHOUT_CLASSIFICATION	1.4526637029077835E-6	DESIGN
// otherwise, everything ok.	WITHOUT_CLASSIFICATION	0.9999883996850614	WITHOUT_CLASSIFICATION	1.1600314938592258E-5	DESIGN
// visit width-first, then depth	WITHOUT_CLASSIFICATION	0.999944737491635	WITHOUT_CLASSIFICATION	5.5262508364924254E-5	DESIGN
// if the types report logical equivalence, return true...	WITHOUT_CLASSIFICATION	0.9999995923574942	WITHOUT_CLASSIFICATION	4.076425057352397E-7	DESIGN
// otherwise, perform a "deep equivalence" check...	WITHOUT_CLASSIFICATION	0.9999999821834888	WITHOUT_CLASSIFICATION	1.7816511149179336E-8	DESIGN
// If there is no WHERE node, make one.	WITHOUT_CLASSIFICATION	0.9999901126332521	WITHOUT_CLASSIFICATION	9.887366747957887E-6	DESIGN
// inject the WHERE after the parent	WITHOUT_CLASSIFICATION	0.999896283701969	WITHOUT_CLASSIFICATION	1.0371629803089779E-4	DESIGN
// Never include subclasses for implied from elements.	WITHOUT_CLASSIFICATION	0.9999906314763626	WITHOUT_CLASSIFICATION	9.368523637389035E-6	DESIGN
// Moved here from SelectClause [jsd]	WITHOUT_CLASSIFICATION	0.9999357149629067	WITHOUT_CLASSIFICATION	6.428503709332154E-5	DESIGN
///////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9999860785196982	WITHOUT_CLASSIFICATION	1.392148030177787E-5	DESIGN
// Use the table fromElement and the property name to get the array of column names.	WITHOUT_CLASSIFICATION	0.9999893955091996	WITHOUT_CLASSIFICATION	1.0604490800327595E-5	DESIGN
// Set the attributes of the property reference expression.	WITHOUT_CLASSIFICATION	0.9999996487961728	WITHOUT_CLASSIFICATION	3.512038272790354E-7	DESIGN
// If the uresolved property path isn't set yet, just use the property name.	WITHOUT_CLASSIFICATION	0.9988698642325458	WITHOUT_CLASSIFICATION	0.0011301357674543132	DESIGN
// The 'from element' that the property is in.	WITHOUT_CLASSIFICATION	0.9988673831153474	WITHOUT_CLASSIFICATION	0.001132616884652624	DESIGN
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999999907302674	WITHOUT_CLASSIFICATION	9.269732650979788E-9	DESIGN
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999999907302674	WITHOUT_CLASSIFICATION	9.269732650979788E-9	DESIGN
// If this dot has already been resolved, stop now.	WITHOUT_CLASSIFICATION	0.9997400808802799	WITHOUT_CLASSIFICATION	2.599191197200836E-4	DESIGN
// If there is no data type for this node, and we're at the end of the path (top most dot node), then // this might be a Java constant.	WITHOUT_CLASSIFICATION	0.999999657036933	WITHOUT_CLASSIFICATION	3.4296306690989513E-7	DESIGN
// The property is a collection...	WITHOUT_CLASSIFICATION	0.9991713881675033	WITHOUT_CLASSIFICATION	8.286118324967014E-4	DESIGN
// The property is a component...	WITHOUT_CLASSIFICATION	0.9960239980776495	WITHOUT_CLASSIFICATION	0.00397600192235055	DESIGN
// The property is another class..	WITHOUT_CLASSIFICATION	0.9938830905712488	WITHOUT_CLASSIFICATION	0.006116909428751183	DESIGN
// Otherwise, this is a primitive type.	WITHOUT_CLASSIFICATION	0.9998315859330424	WITHOUT_CLASSIFICATION	1.6841406695748847E-4	DESIGN
//foo.bars.size (also handles deprecated stuff like foo.bars.maxelement for backwardness)	WITHOUT_CLASSIFICATION	0.9999968509425216	WITHOUT_CLASSIFICATION	3.1490574785316607E-6	DESIGN
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9998654869816954	WITHOUT_CLASSIFICATION	1.3451301830469603E-4	DESIGN
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999999267632065	WITHOUT_CLASSIFICATION	7.32367935352555E-8	DESIGN
// in non-select queries, the only time we should need to join is if we are in a subquery from clause	WITHOUT_CLASSIFICATION	0.9999605440908309	WITHOUT_CLASSIFICATION	3.945590916910157E-5	DESIGN
// this is the regression style determination which matches the logic of the classic translator	WITHOUT_CLASSIFICATION	0.9998233806461877	WITHOUT_CLASSIFICATION	1.7661935381233545E-4	DESIGN
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9998654869816954	WITHOUT_CLASSIFICATION	1.3451301830469603E-4	DESIGN
// even though we might find a pre-existing element by join path, we may not be able to reuse it...	WITHOUT_CLASSIFICATION	0.9947831732688747	WITHOUT_CLASSIFICATION	0.005216826731125357	DESIGN
// NOTE : addDuplicateAlias() already performs nullness checks on the alias.	WITHOUT_CLASSIFICATION	0.9999998916625779	WITHOUT_CLASSIFICATION	1.0833742218299858E-7	DESIGN
// if the from-clauses are the same, we can be a little more aggressive in terms of what we reuse	WITHOUT_CLASSIFICATION	0.9980089566283203	WITHOUT_CLASSIFICATION	0.001991043371679555	DESIGN
// again, null != null here	WITHOUT_CLASSIFICATION	0.9999980706758689	WITHOUT_CLASSIFICATION	1.9293241311690892E-6	DESIGN
// If this is an implied join in a from element, then use the impled join type which is part of the // tree parser's state (set by the gramamar actions).	WITHOUT_CLASSIFICATION	0.9999998972822262	WITHOUT_CLASSIFICATION	1.0271777383737879E-7	DESIGN
// otherwise (subquery case) dont reuse the fromElement if we are processing the from-clause of the subquery	WITHOUT_CLASSIFICATION	0.9999893716258328	WITHOUT_CLASSIFICATION	1.0628374167206412E-5	DESIGN
// we know only the lhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999985940926828	WITHOUT_CLASSIFICATION	1.4059073173245823E-6	DESIGN
// the referenced node text is the special 'id'	WITHOUT_CLASSIFICATION	0.9999993175198514	WITHOUT_CLASSIFICATION	6.82480148529797E-7	DESIGN
// only the identifier property field name can be a reference to the associated entity's PK...	WITHOUT_CLASSIFICATION	0.9999474394850612	WITHOUT_CLASSIFICATION	5.256051493887245E-5	DESIGN
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9999955343817195	WITHOUT_CLASSIFICATION	4.465618280519705E-6	DESIGN
// Append the new property name onto the unresolved path.	WITHOUT_CLASSIFICATION	0.9999735329573171	WITHOUT_CLASSIFICATION	2.6467042683007132E-5	DESIGN
// If the lhs is a collection, use CollectionPropertyMapping	WITHOUT_CLASSIFICATION	0.9999640769291643	WITHOUT_CLASSIFICATION	3.5923070835687984E-5	DESIGN
// Tell the destination fromElement to 'includeSubclasses'.	WITHOUT_CLASSIFICATION	0.9999928713443	WITHOUT_CLASSIFICATION	7.128655700031258E-6	DESIGN
// Use theta style (for regression) // Move the node up, after the origin node.	WITHOUT_CLASSIFICATION	0.9999888049276638	WITHOUT_CLASSIFICATION	1.1195072336171028E-5	DESIGN
// Don't resolve the node again.	WITHOUT_CLASSIFICATION	0.999999593062818	WITHOUT_CLASSIFICATION	4.0693718192691504E-7	DESIGN
// for expected parameter type injection, we expect that the lhs represents // some form of property ref and that the children of the in-list represent // one-or-more params.	WITHOUT_CLASSIFICATION	0.9999993479272623	WITHOUT_CLASSIFICATION	6.520727376184418E-7	DESIGN
// we need to strip off the embedded parens so that sql-gen does not double these up	WITHOUT_CLASSIFICATION	0.9994107148315305	WITHOUT_CLASSIFICATION	5.892851684694765E-4	DESIGN
// we have something like : "? [op] rhs"	WITHOUT_CLASSIFICATION	0.9872172987871556	WITHOUT_CLASSIFICATION	0.012782701212844265	DESIGN
// we have something like : "lhs [op] ?"	WITHOUT_CLASSIFICATION	0.9930352795936614	WITHOUT_CLASSIFICATION	0.00696472040633865	DESIGN
// we know only the rhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999982369750534	WITHOUT_CLASSIFICATION	1.7630249466220432E-6	DESIGN
// handle the (assumed) valid cases: // #1 - the only valid datetime addition synatx is one or the other is a datetime (but not both)	WITHOUT_CLASSIFICATION	0.9988036937795891	WITHOUT_CLASSIFICATION	0.0011963062204108333	DESIGN
// one or the other needs to be a datetime for us to get into this method in the first place...	WITHOUT_CLASSIFICATION	0.999242610027538	WITHOUT_CLASSIFICATION	7.57389972461937E-4	DESIGN
// #3 - note that this is also true of "datetime - :param"...	WITHOUT_CLASSIFICATION	0.9999404422775654	WITHOUT_CLASSIFICATION	5.955772243445798E-5	DESIGN
// #2	WITHOUT_CLASSIFICATION	0.9999859143020678	WITHOUT_CLASSIFICATION	1.4085697932159087E-5	DESIGN
// Generate the inner join -- The elements need to be joined to the collection they are in.	WITHOUT_CLASSIFICATION	0.9999989654196065	WITHOUT_CLASSIFICATION	1.0345803934424838E-6	DESIGN
// nothing to do	WITHOUT_CLASSIFICATION	0.9998966613450669	WITHOUT_CLASSIFICATION	1.0333865493307205E-4	DESIGN
// The 'from element' that represents the elements of the collection.	WITHOUT_CLASSIFICATION	0.9999915563340529	WITHOUT_CLASSIFICATION	8.443665947071529E-6	DESIGN
// Add the condition to the join sequence that qualifies the indexed element.	WITHOUT_CLASSIFICATION	0.9999999208125675	WITHOUT_CLASSIFICATION	7.918743248762096E-8	DESIGN
// Sometimes use the element table alias, sometimes use the... umm... collection table alias (many to many)	WITHOUT_CLASSIFICATION	0.9999994600374285	WITHOUT_CLASSIFICATION	5.399625715436468E-7	DESIGN
// Now, set the text for this node.  It should be the element columns.	WITHOUT_CLASSIFICATION	0.9980723663090757	WITHOUT_CLASSIFICATION	0.00192763369092435	DESIGN
// Get the function return value type, based on the type of the first argument.	WITHOUT_CLASSIFICATION	0.9999998392746726	WITHOUT_CLASSIFICATION	1.607253273958604E-7	DESIGN
// This will call initialize(tok)!	WITHOUT_CLASSIFICATION	0.9499261988735425	WITHOUT_CLASSIFICATION	0.050073801126457464	DESIGN
// mutation depends on the types of nodes invloved...	WITHOUT_CLASSIFICATION	0.9999710047781195	WITHOUT_CLASSIFICATION	2.8995221880521707E-5	DESIGN
// "pass along" our initial embedded parameter node(s) to the first generated // sql fragment so that it can be handled later for parameter binding...	WITHOUT_CLASSIFICATION	0.9974998878909699	WITHOUT_CLASSIFICATION	0.002500112109030055	DESIGN
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999950844560715	WITHOUT_CLASSIFICATION	4.9155439285142836E-6	DESIGN
// Generated select expressions are already resolved, nothing to do.	WITHOUT_CLASSIFICATION	0.9999996008566042	WITHOUT_CLASSIFICATION	3.991433957554025E-7	DESIGN
// The path may be a reference to an alias defined in the parent query.	WITHOUT_CLASSIFICATION	0.9980065749433777	WITHOUT_CLASSIFICATION	0.001993425056622159	DESIGN
// The HQL class alias refers to the class name.	WITHOUT_CLASSIFICATION	0.9999975450597866	WITHOUT_CLASSIFICATION	2.454940213498105E-6	DESIGN
// Associate the table alias with the element.	WITHOUT_CLASSIFICATION	0.9999999852819903	WITHOUT_CLASSIFICATION	1.4718009769645843E-8	DESIGN
// try the parent FromClause...	WITHOUT_CLASSIFICATION	0.9999504825462777	WITHOUT_CLASSIFICATION	4.951745372224568E-5	DESIGN
// Add the new node to the map so that we don't create it twice.	WITHOUT_CLASSIFICATION	0.9999967542514837	WITHOUT_CLASSIFICATION	3.2457485163504937E-6	DESIGN
// Make sure that all from elements registered with this FROM clause are actually in the AST.	WITHOUT_CLASSIFICATION	0.9999914436023484	WITHOUT_CLASSIFICATION	8.556397651671303E-6	DESIGN
// Invoke setScalarColumnText on each constructor argument.	WITHOUT_CLASSIFICATION	0.999973431993441	WITHOUT_CLASSIFICATION	2.65680065590349E-5	DESIGN
// Collect the select expressions, skip the first child because it is the class name.	WITHOUT_CLASSIFICATION	0.999999997822236	WITHOUT_CLASSIFICATION	2.1777638945326266E-9	DESIGN
// return an empty Type array	WITHOUT_CLASSIFICATION	0.9999849529260018	WITHOUT_CLASSIFICATION	1.5047073998141028E-5	DESIGN
// Constructors are always considered scalar results.	WITHOUT_CLASSIFICATION	0.9999958375536411	WITHOUT_CLASSIFICATION	4.162446358911525E-6	DESIGN
// this is the exception returned by ReflectHelper.getConstructor() if it cannot // locate an appropriate constructor	WITHOUT_CLASSIFICATION	0.9999948613794408	WITHOUT_CLASSIFICATION	5.13862055914873E-6	DESIGN
// if there is no order by, make one	WITHOUT_CLASSIFICATION	0.9999911539429935	WITHOUT_CLASSIFICATION	8.846057006545363E-6	DESIGN
// Find the WHERE; if there is no WHERE, find the FROM...	WITHOUT_CLASSIFICATION	0.99998857037946	WITHOUT_CLASSIFICATION	1.1429620539936784E-5	DESIGN
// Now, inject the newly built ORDER BY into the tree	WITHOUT_CLASSIFICATION	0.9999991773118904	WITHOUT_CLASSIFICATION	8.226881096032732E-7	DESIGN
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993325481226	WITHOUT_CLASSIFICATION	6.674518774390682E-7	DESIGN
// logic operators by definition resolve to boolean.	WITHOUT_CLASSIFICATION	0.9999980112275876	WITHOUT_CLASSIFICATION	1.9887724124782587E-6	DESIGN
// Render the identifier select fragment using the table alias.	WITHOUT_CLASSIFICATION	0.9999969030308957	WITHOUT_CLASSIFICATION	3.0969691042598865E-6	DESIGN
// Class names in the FROM clause result in a JoinSequence (the old FromParser does this).	WITHOUT_CLASSIFICATION	0.9999999774649251	WITHOUT_CLASSIFICATION	2.2535074881998957E-8	DESIGN
// For many-to-many joins, use the tablename from the queryable collection for the default text.	WITHOUT_CLASSIFICATION	0.9999999453559344	WITHOUT_CLASSIFICATION	5.46440656415248E-8	DESIGN
// Otherwise, use the property mapping.	WITHOUT_CLASSIFICATION	0.9999978182770175	WITHOUT_CLASSIFICATION	2.181722982595735E-6	DESIGN
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9996240736182824	WITHOUT_CLASSIFICATION	3.759263817176604E-4	DESIGN
// If the property is a special collection property name, return a CollectionPropertyMapping.	WITHOUT_CLASSIFICATION	0.9999940341693099	WITHOUT_CLASSIFICATION	5.965830690135348E-6	DESIGN
// Collection of components.	WITHOUT_CLASSIFICATION	0.999998716237836	WITHOUT_CLASSIFICATION	1.2837621640118998E-6	DESIGN
// make sure the lhs is "assignable"...	WITHOUT_CLASSIFICATION	0.9999998910858616	WITHOUT_CLASSIFICATION	1.0891413842218928E-7	DESIGN
// false indicates to not generate parens around the assignment	WITHOUT_CLASSIFICATION	0.999891007740212	WITHOUT_CLASSIFICATION	1.0899225978802908E-4	DESIGN
// Register the FromElement with the FROM clause, now that we have the names and aliases.	WITHOUT_CLASSIFICATION	0.9999953361461406	WITHOUT_CLASSIFICATION	4.663853859380709E-6	DESIGN
// currently allowed...	WITHOUT_CLASSIFICATION	0.9999974343545117	WITHOUT_CLASSIFICATION	2.56564548834239E-6	DESIGN
// HHH-276 : implied joins in a subselect where clause - The destination needs to be added // to the destination's from clause. // Not sure if this is will fix everything, but it works.	WITHOUT_CLASSIFICATION	0.9999990406820289	DESIGN	9.593179710430915E-7	WITHOUT_CLASSIFICATION
//return classAlias == null ? className : classAlias;	WITHOUT_CLASSIFICATION	0.9998742457189982	WITHOUT_CLASSIFICATION	1.257542810018456E-4	DESIGN
// This is an explicit FROM element.	WITHOUT_CLASSIFICATION	0.9995752172282834	WITHOUT_CLASSIFICATION	4.247827717166292E-4	DESIGN
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993325481226	WITHOUT_CLASSIFICATION	6.674518774390682E-7	DESIGN
// Fetch can't be used with scroll() or iterate().	WITHOUT_CLASSIFICATION	0.9997667791847697	WITHOUT_CLASSIFICATION	2.3322081523023187E-4	DESIGN
// If it's not implied or it is implied and it's a many to many join where the target wasn't found.	WITHOUT_CLASSIFICATION	0.9999519209132842	WITHOUT_CLASSIFICATION	4.807908671574586E-5	DESIGN
// Since this is an explicit FROM element, it can't be implied in the FROM clause.	WITHOUT_CLASSIFICATION	0.968465721485381	WITHOUT_CLASSIFICATION	0.03153427851461903	DESIGN
// Do nothing, eplicit from elements are *always* in the projection list.	WITHOUT_CLASSIFICATION	0.9999404723457466	WITHOUT_CLASSIFICATION	5.9527654253453085E-5	DESIGN
// propertyName refers to something like collection.size...	WITHOUT_CLASSIFICATION	0.9999517812592392	WITHOUT_CLASSIFICATION	4.821874076080463E-5	DESIGN
// property name is a sub-path of a component...	WITHOUT_CLASSIFICATION	0.9993159570166011	WITHOUT_CLASSIFICATION	6.840429833988502E-4	DESIGN
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999999267632065	WITHOUT_CLASSIFICATION	7.32367935352555E-8	DESIGN
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9351094712989391	WITHOUT_CLASSIFICATION	0.06489052870106099	DESIGN
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999950844560715	WITHOUT_CLASSIFICATION	4.9155439285142836E-6	DESIGN
// DotNode uses null here...	WITHOUT_CLASSIFICATION	0.9999246504832932	WITHOUT_CLASSIFICATION	7.534951670691984E-5	DESIGN
// We represent a from-clause alias	WITHOUT_CLASSIFICATION	0.9999736974919275	WITHOUT_CLASSIFICATION	2.6302508072522263E-5	DESIGN
// we are the LHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.999789702273581	WITHOUT_CLASSIFICATION	2.1029772641888015E-4	DESIGN
// we are the RHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9998143448595271	WITHOUT_CLASSIFICATION	1.8565514047279042E-4	DESIGN
// we represent a naked (simple) prop-ref	WITHOUT_CLASSIFICATION	0.9991465547246314	WITHOUT_CLASSIFICATION	8.534452753686758E-4	DESIGN
// EARLY EXIT!!!  return so the resolve call explicitly coming from DotNode can // resolve this...	WITHOUT_CLASSIFICATION	0.6145816404795957	WITHOUT_CLASSIFICATION	0.38541835952040426	DESIGN
// assume this ident's text does *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999936364159411	WITHOUT_CLASSIFICATION	6.363584058922497E-6	DESIGN
// just ignore it for now, it'll get resolved later...	WITHOUT_CLASSIFICATION	0.9991838238562671	WITHOUT_CLASSIFICATION	8.16176143732812E-4	DESIGN
// This is not actually a constant, but a reference to FROM element.	WITHOUT_CLASSIFICATION	0.9972026926438082	WITHOUT_CLASSIFICATION	0.002797307356191796	DESIGN
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999999936161491	WITHOUT_CLASSIFICATION	6.383850902574177E-9	DESIGN
// these pieces are needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9909270869324153	WITHOUT_CLASSIFICATION	0.009072913067584747	DESIGN
// used to set the type of the parent dot node	WITHOUT_CLASSIFICATION	0.999922569509372	WITHOUT_CLASSIFICATION	7.743049062806962E-5	DESIGN
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999757410304347	WITHOUT_CLASSIFICATION	2.4258969565236247E-5	DESIGN
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999757410304347	WITHOUT_CLASSIFICATION	2.4258969565236247E-5	DESIGN
// naked property-refs cannot be used with an aliased from element	WITHOUT_CLASSIFICATION	0.9605405016813635	WITHOUT_CLASSIFICATION	0.03945949831863661	DESIGN
// this piece is needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9983428247934979	WITHOUT_CLASSIFICATION	0.0016571752065020595	DESIGN
// do *not* over-write the column text, as that has already been // "rendered" during resolve	WITHOUT_CLASSIFICATION	0.999999965908572	WITHOUT_CLASSIFICATION	3.409142805313592E-8	DESIGN
// for some reason the antlr.CommonAST initialization routines force // this method to get called twice.  The first time with an empty string	WITHOUT_CLASSIFICATION	0.8805334305458611	WITHOUT_CLASSIFICATION	0.11946656945413898	DESIGN
// Look up class name using the first identifier in the path.	WITHOUT_CLASSIFICATION	0.9999924463225283	WITHOUT_CLASSIFICATION	7.5536774716102046E-6	DESIGN
// Add to the query spaces.	WITHOUT_CLASSIFICATION	0.9999551233289864	WITHOUT_CLASSIFICATION	4.4876671013533754E-5	DESIGN
// If the from element isn't in the same clause, create a new from element.	WITHOUT_CLASSIFICATION	0.9999957680287569	WITHOUT_CLASSIFICATION	4.231971243179439E-6	DESIGN
// This is the root level node. // Generate an explicit from clause at the root.	WITHOUT_CLASSIFICATION	0.9959241573956379	WITHOUT_CLASSIFICATION	0.0040758426043620835	DESIGN
// Correlated subqueries create 'special' implied from nodes // because correlated subselects can't use an ANSI-style join	WITHOUT_CLASSIFICATION	0.9997735361443536	WITHOUT_CLASSIFICATION	2.264638556463376E-4	DESIGN
// super-duper-classic-parser-regression-testing-mojo-magic...	WITHOUT_CLASSIFICATION	0.99998124014476	WITHOUT_CLASSIFICATION	1.875985524012923E-5	DESIGN
// A collection of entities...	WITHOUT_CLASSIFICATION	0.9999909770266592	WITHOUT_CLASSIFICATION	9.022973340783096E-6	DESIGN
// A collection of components...	WITHOUT_CLASSIFICATION	0.9999998596445903	WITHOUT_CLASSIFICATION	1.4035540977534613E-7	DESIGN
// A collection of scalar elements...	WITHOUT_CLASSIFICATION	0.9999998853326956	WITHOUT_CLASSIFICATION	1.1466730439779963E-7	DESIGN
// according to both the ANSI-SQL and EJB3 specs, trim can either take // exactly one parameter or a variable number of parameters between 1 and 4. // from the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If only <trim specification> is omitted, BOTH is assumed; // if <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999999999703084	WITHOUT_CLASSIFICATION	2.969165211516575E-11	DESIGN
// Don't include sub-classes for implied collection joins or subquery joins.	WITHOUT_CLASSIFICATION	0.9999988903197634	WITHOUT_CLASSIFICATION	1.1096802366239334E-6	DESIGN
// Treat explict from elements in sub-queries properly.	WITHOUT_CLASSIFICATION	0.9999741872012045	WITHOUT_CLASSIFICATION	2.5812798795532486E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999538292619589	WITHOUT_CLASSIFICATION	4.617073804128677E-5	DESIGN
// the "root from-element" in correlated subqueries do need this piece	WITHOUT_CLASSIFICATION	0.9999815359313856	WITHOUT_CLASSIFICATION	1.846406861438526E-5	DESIGN
// Create the FROM element for the target (the elements of the collection).	WITHOUT_CLASSIFICATION	0.9999999988132552	WITHOUT_CLASSIFICATION	1.1867448010985E-9	DESIGN
// If the join is implied, then don't include sub-classes on the element.	WITHOUT_CLASSIFICATION	0.9999998995137725	WITHOUT_CLASSIFICATION	1.0048622747242476E-7	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994902236211	WITHOUT_CLASSIFICATION	5.097763788709591E-7	DESIGN
// The associated entity is implied, but it must be included in the FROM. // The collection alias is the role.	WITHOUT_CLASSIFICATION	0.9999958687956474	WITHOUT_CLASSIFICATION	4.131204352670027E-6	DESIGN
// Tag this node as a JOIN. // Don't include subclasses in the join. // This is a clollection join.	WITHOUT_CLASSIFICATION	0.9999657068440924	WITHOUT_CLASSIFICATION	3.429315590775147E-5	DESIGN
// Get the class name of the associated entity.	WITHOUT_CLASSIFICATION	0.9999937962683493	WITHOUT_CLASSIFICATION	6.203731650781955E-6	DESIGN
//  origin, path, implied, columns, classAlias,	WITHOUT_CLASSIFICATION	0.9999849188436958	WITHOUT_CLASSIFICATION	1.5081156304345003E-5	DESIGN
/*implied*/	WITHOUT_CLASSIFICATION	0.9986624289945695	WITHOUT_CLASSIFICATION	0.00133757100543056	DESIGN
// For implied many-to-many, just add the end join.	WITHOUT_CLASSIFICATION	0.9999992829995206	WITHOUT_CLASSIFICATION	7.170004793999185E-7	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994902236211	WITHOUT_CLASSIFICATION	5.097763788709591E-7	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994902236211	WITHOUT_CLASSIFICATION	5.097763788709591E-7	DESIGN
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.999989565016394	WITHOUT_CLASSIFICATION	1.043498360606989E-5	DESIGN
// This causes the factory to instantiate the desired class.	WITHOUT_CLASSIFICATION	0.9999483423140185	WITHOUT_CLASSIFICATION	5.165768598152272E-5	DESIGN
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9999965585917716	WITHOUT_CLASSIFICATION	3.4414082282534445E-6	DESIGN
// Frontbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999573672989422	WITHOUT_CLASSIFICATION	4.2632701057804664E-5	DESIGN
/*	WITHOUT_CLASSIFICATION	0.9199843986423561	WITHOUT_CLASSIFICATION	0.08001560135764392	DESIGN
/*public Type[] getSqlResultTypes() {	WITHOUT_CLASSIFICATION	0.9873716042143451	WITHOUT_CLASSIFICATION	0.012628395785654807	DESIGN
// First, collect all of the select expressions. // NOTE: This must be done *before* invoking setScalarColumnText() because setScalarColumnText() // changes the AST!!!	WITHOUT_CLASSIFICATION	0.999909589949424	WITHOUT_CLASSIFICATION	9.04100505759519E-5	DESIGN
// First allow the actual type to control the return value. (the actual underlying sqltype could actually be different)	WITHOUT_CLASSIFICATION	0.9999966896236411	WITHOUT_CLASSIFICATION	3.3103763589393092E-6	DESIGN
//sqlResultTypeList.addAll( constructorArgumentTypeList );	WITHOUT_CLASSIFICATION	0.9998877504012904	WITHOUT_CLASSIFICATION	1.1224959870965741E-4	DESIGN
// If the data type is not an association type, it could not have been in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999955040559835	WITHOUT_CLASSIFICATION	4.4959440165228176E-6	DESIGN
//sqlResultTypeList.add( type );	WITHOUT_CLASSIFICATION	0.9999333208101854	WITHOUT_CLASSIFICATION	6.66791898145527E-5	DESIGN
// Always add the type to the return type list.	WITHOUT_CLASSIFICATION	0.9999994760764037	WITHOUT_CLASSIFICATION	5.239235962942429E-7	DESIGN
// add the fetched entities	WITHOUT_CLASSIFICATION	0.9999587854974318	WITHOUT_CLASSIFICATION	4.121450256823777E-5	DESIGN
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999936306659699	WITHOUT_CLASSIFICATION	6.3693340301770885E-6	DESIGN
// function support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999899268939739	WITHOUT_CLASSIFICATION	1.0073106026089687E-4	DESIGN
// If there are any scalars (non-entities) selected, render the select column aliases.	WITHOUT_CLASSIFICATION	0.9999999696742978	WITHOUT_CLASSIFICATION	3.032570209560816E-8	DESIGN
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.999830561278517	WITHOUT_CLASSIFICATION	1.694387214830608E-4	DESIGN
/*ArrayList sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9999975885709153	WITHOUT_CLASSIFICATION	2.4114290848069903E-6	DESIGN
//sqlResultTypes = ( Type[] ) sqlResultTypeList.toArray( new Type[sqlResultTypeList.size()] );	WITHOUT_CLASSIFICATION	0.9999997793267812	WITHOUT_CLASSIFICATION	2.2067321877988643E-7	DESIGN
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999978435844799	WITHOUT_CLASSIFICATION	2.156415520051881E-6	DESIGN
//TODO:	WITHOUT_CLASSIFICATION	0.9837192486435412	DESIGN	0.01628075135645881	WITHOUT_CLASSIFICATION
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.999998726684897	WITHOUT_CLASSIFICATION	1.2733151030468416E-6	DESIGN
// Generate an 2d array of column names, the first dimension is parallel with the // return types array.  The second dimension is the list of column names for each // type.	WITHOUT_CLASSIFICATION	0.9999998136402692	WITHOUT_CLASSIFICATION	1.8635973079030205E-7	DESIGN
// Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999999971879903	WITHOUT_CLASSIFICATION	2.8120096862818833E-9	DESIGN
// union subclass support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999276773456027	WITHOUT_CLASSIFICATION	7.232265439732416E-5	DESIGN
// Skip 'DISTINCT' and 'ALL', so we return the first expression node.	WITHOUT_CLASSIFICATION	0.9999991909523561	WITHOUT_CLASSIFICATION	8.090476439048674E-7	DESIGN
// Create SQL_TOKEN nodes for the columns.	WITHOUT_CLASSIFICATION	0.9999999261740805	WITHOUT_CLASSIFICATION	7.382591949572459E-8	DESIGN
// Generate the property select tokens.	WITHOUT_CLASSIFICATION	0.9999941975839068	WITHOUT_CLASSIFICATION	5.802416093146999E-6	DESIGN
// Get the function name node.	WITHOUT_CLASSIFICATION	0.9999452488447894	WITHOUT_CLASSIFICATION	5.475115521056625E-5	DESIGN
// Method expressions in a SELECT should always be considered scalar.	WITHOUT_CLASSIFICATION	0.9999992094615292	WITHOUT_CLASSIFICATION	7.905384707836925E-7	DESIGN
// If this is 'elements' then create a new FROM element.	WITHOUT_CLASSIFICATION	0.9999957618101091	WITHOUT_CLASSIFICATION	4.238189890939929E-6	DESIGN
// Not elements(x)	WITHOUT_CLASSIFICATION	0.9999996537898967	WITHOUT_CLASSIFICATION	3.4621010321186166E-7	DESIGN
// Dialect function	WITHOUT_CLASSIFICATION	0.999998941087069	WITHOUT_CLASSIFICATION	1.058912931024651E-6	DESIGN
// Collection 'property function'	WITHOUT_CLASSIFICATION	0.9999901836436329	WITHOUT_CLASSIFICATION	9.816356367059508E-6	DESIGN
// If the constant is an IDENT, figure out what it means...	WITHOUT_CLASSIFICATION	0.9999854469891131	WITHOUT_CLASSIFICATION	1.4553010886901535E-5	DESIGN
// IDENT is a class alias in the FROM.	WITHOUT_CLASSIFICATION	0.9999983944544362	WITHOUT_CLASSIFICATION	1.6055455638487096E-6	DESIGN
// Resolve to an identity column.	WITHOUT_CLASSIFICATION	0.9998761881664994	WITHOUT_CLASSIFICATION	1.2381183350068116E-4	DESIGN
// Otherwise, it's a literal.	WITHOUT_CLASSIFICATION	0.9999437120792457	WITHOUT_CLASSIFICATION	5.628792075418574E-5	DESIGN
// the name of an entity class	WITHOUT_CLASSIFICATION	0.9999958556507321	WITHOUT_CLASSIFICATION	4.144349267879614E-6	DESIGN
//the class discriminator value	WITHOUT_CLASSIFICATION	0.9999955032252731	WITHOUT_CLASSIFICATION	4.496774726898396E-6	DESIGN
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999996944447247	WITHOUT_CLASSIFICATION	3.055552753596402E-7	DESIGN
// Add a space before the display text.	WITHOUT_CLASSIFICATION	0.9999998781120905	WITHOUT_CLASSIFICATION	1.2188790954079578E-7	DESIGN
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999972199582959	WITHOUT_CLASSIFICATION	2.7800417040946277E-6	DESIGN
// child == parent.getFirstChild()	WITHOUT_CLASSIFICATION	0.9999997508999792	WITHOUT_CLASSIFICATION	2.491000207841501E-7	DESIGN
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999972199582959	WITHOUT_CLASSIFICATION	2.7800417040946277E-6	DESIGN
// Filter conditions need to be inserted before the HQL where condition and the // theta join node.  This is because org.hibernate.loader.Loader binds the filter parameters first, // then it binds all the HQL query parameters, see org.hibernate.loader.Loader.processFilterParameters().	WITHOUT_CLASSIFICATION	0.9999113625456119	WITHOUT_CLASSIFICATION	8.863745438822283E-5	DESIGN
// Put the FILTERS node before the HQL condition and theta joins	WITHOUT_CLASSIFICATION	0.9999938762630892	WITHOUT_CLASSIFICATION	6.123736910687863E-6	DESIGN
// add the current fragment to the FILTERS node	WITHOUT_CLASSIFICATION	0.9999996815227069	WITHOUT_CLASSIFICATION	3.1847729314938633E-7	DESIGN
// Create a new THETA_JOINS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999998863307947	WITHOUT_CLASSIFICATION	1.1366920539419639E-7	DESIGN
// Put the THETA_JOINS node before the HQL condition, after the filters.	WITHOUT_CLASSIFICATION	0.9999995669422245	WITHOUT_CLASSIFICATION	4.330577755880306E-7	DESIGN
// add the current fragment to the THETA_JOINS node	WITHOUT_CLASSIFICATION	0.9999999438875684	WITHOUT_CLASSIFICATION	5.611243165550123E-8	DESIGN
// First, try to get the persister using the given name directly.	WITHOUT_CLASSIFICATION	0.9999958435725009	WITHOUT_CLASSIFICATION	4.1564274990842565E-6	DESIGN
// unable to locate it using this name	WITHOUT_CLASSIFICATION	0.9997978307831826	WITHOUT_CLASSIFICATION	2.0216921681736295E-4	DESIGN
// If that didn't work, try using the 'import' name.	WITHOUT_CLASSIFICATION	0.9999607146254623	WITHOUT_CLASSIFICATION	3.9285374537741344E-5	DESIGN
// Implicit joins use theta style (WHERE pk = fk), explicit joins use JOIN (after from)	WITHOUT_CLASSIFICATION	0.9999890894440111	WITHOUT_CLASSIFICATION	1.091055598891729E-5	DESIGN
// locate the registered function by the given name	WITHOUT_CLASSIFICATION	0.9999996465561912	WITHOUT_CLASSIFICATION	3.5344380876447144E-7	DESIGN
// determine the type of the first argument...	WITHOUT_CLASSIFICATION	0.9999761682696641	WITHOUT_CLASSIFICATION	2.3831730335969625E-5	DESIGN
// Use the DOT node to emit the first column name. // Create the column names, folled by the column aliases.	WITHOUT_CLASSIFICATION	0.9999997543289907	WITHOUT_CLASSIFICATION	2.456710093148607E-7	DESIGN
// Note: this simply constructs a "raw" SQL_TOKEN representing the // where fragment and injects this into the tree.  This "works"; // however it is probably not the best long-term solution. // // At some point we probably want to apply an additional grammar to // properly tokenize this where fragment into constituent parts // focused on the operators embedded within the fragment.	WITHOUT_CLASSIFICATION	0.8439787089863355	DESIGN	0.15602129101366452	WITHOUT_CLASSIFICATION
// Append the text of the current node.	WITHOUT_CLASSIFICATION	0.9999999881814208	WITHOUT_CLASSIFICATION	1.1818579221202571E-8	DESIGN
// If the node has a first child, recurse into the first child.	WITHOUT_CLASSIFICATION	0.9999999917761049	WITHOUT_CLASSIFICATION	8.223895137758032E-9	DESIGN
// If there is a second child (RHS), recurse into that child.	WITHOUT_CLASSIFICATION	0.9999881022843395	WITHOUT_CLASSIFICATION	1.189771566040222E-5	DESIGN
// Iterate through the alias,JoinSequence pairs and generate SQL token nodes.	WITHOUT_CLASSIFICATION	0.9999999640686326	WITHOUT_CLASSIFICATION	3.5931367447963546E-8	DESIGN
// If the from element represents a JOIN_FRAGMENT and it is // a theta-style join, convert its type from JOIN_FRAGMENT // to FROM_FRAGMENT	WITHOUT_CLASSIFICATION	0.9999808036521035	WITHOUT_CLASSIFICATION	1.919634789649793E-5	DESIGN
// this is used during SqlGenerator processing	WITHOUT_CLASSIFICATION	0.9989759505012298	WITHOUT_CLASSIFICATION	0.001024049498770255	DESIGN
// If there is a FROM fragment and the FROM element is an explicit, then add the from part.	WITHOUT_CLASSIFICATION	0.9999997470352306	WITHOUT_CLASSIFICATION	2.529647694363527E-7	DESIGN
/*&& StringHelper.isNotEmpty( frag )*/	WITHOUT_CLASSIFICATION	0.9999939128904687	WITHOUT_CLASSIFICATION	6.08710953130979E-6	DESIGN
// The FROM fragment will probably begin with ', '.  Remove this if it is present.	WITHOUT_CLASSIFICATION	0.9052129236013984	DESIGN	0.09478707639860161	WITHOUT_CLASSIFICATION
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9951685047138931	WITHOUT_CLASSIFICATION	0.004831495286107029	DESIGN
// SELECT p FROM p IN CLASS eg.Person ORDER BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999989301310235	WITHOUT_CLASSIFICATION	1.0698689765207739E-6	DESIGN
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.9906715155675776	WITHOUT_CLASSIFICATION	0.009328484432422365	DESIGN
//named query parameter	WITHOUT_CLASSIFICATION	0.999362380678922	WITHOUT_CLASSIFICATION	6.376193210779071E-4	DESIGN
//default mode	WITHOUT_CLASSIFICATION	0.9999971680394784	WITHOUT_CLASSIFICATION	2.831960521766535E-6	DESIGN
//QueryJoinFragment join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999997927031088	WITHOUT_CLASSIFICATION	2.072968912414727E-7	DESIGN
//reset the dotcount (but not the path) //after reset!	WITHOUT_CLASSIFICATION	0.9999296408568165	WITHOUT_CLASSIFICATION	7.035914318362195E-5	DESIGN
//after reset!	WITHOUT_CLASSIFICATION	0.9999719537768537	WITHOUT_CLASSIFICATION	2.8046223146413876E-5	DESIGN
// we don't need to worry about any condition in the ON clause // here (toFromFragmentString), since anything in the ON condition // is already applied to the whole query	WITHOUT_CLASSIFICATION	0.9999656460149882	WITHOUT_CLASSIFICATION	3.4353985011915743E-5	DESIGN
// bit_length feels a bit broken to me. We have to cast to char in order to // pass when a numeric value is supplied. But of course the answers given will // be wildly different for these two datatypes. 1234.5678 will be 9 bytes as // a char string but will be 8 or 16 bytes as a true numeric. // Jay Nance 2006-09-22	WITHOUT_CLASSIFICATION	0.9998266630794841	WITHOUT_CLASSIFICATION	1.7333692051587976E-4	DESIGN
// dotcount>=2	WITHOUT_CLASSIFICATION	0.9999921650623167	WITHOUT_CLASSIFICATION	7.83493768336362E-6	DESIGN
// Do the corresponding RHS	WITHOUT_CLASSIFICATION	0.9999799627118389	WITHOUT_CLASSIFICATION	2.0037288161168858E-5	DESIGN
//if its "id"	WITHOUT_CLASSIFICATION	0.9999636397102701	WITHOUT_CLASSIFICATION	3.6360289729847445E-5	DESIGN
//or its the id property name	WITHOUT_CLASSIFICATION	0.995755882872271	WITHOUT_CLASSIFICATION	0.004244117127728945	DESIGN
//join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.999999933916659	WITHOUT_CLASSIFICATION	6.608334110088752E-8	DESIGN
//important!!	WITHOUT_CLASSIFICATION	0.999892080499418	WITHOUT_CLASSIFICATION	1.0791950058201377E-4	DESIGN
//String[] keyCols = collPersister.getKeyColumnNames();	WITHOUT_CLASSIFICATION	0.9999996489723186	WITHOUT_CLASSIFICATION	3.5102768134418775E-7	DESIGN
// an association	WITHOUT_CLASSIFICATION	0.9999980635158693	WITHOUT_CLASSIFICATION	1.936484130783273E-6	DESIGN
//allow index() function:	WITHOUT_CLASSIFICATION	0.9999983187067283	WITHOUT_CLASSIFICATION	1.681293271707832E-6	DESIGN
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9986590321136114	WITHOUT_CLASSIFICATION	0.0013409678863886918	DESIGN
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.9906715155675776	WITHOUT_CLASSIFICATION	0.009328484432422365	DESIGN
//many-to-many	WITHOUT_CLASSIFICATION	0.9999735800315889	WITHOUT_CLASSIFICATION	2.6419968411187127E-5	DESIGN
// collections of values	WITHOUT_CLASSIFICATION	0.9999979261734063	WITHOUT_CLASSIFICATION	2.0738265937827005E-6	DESIGN
//opening paren in new Foo ( ... )	WITHOUT_CLASSIFICATION	0.9993342281994103	WITHOUT_CLASSIFICATION	6.657718005896166E-4	DESIGN
//if we are inside a new Result(), but not inside a nested function	WITHOUT_CLASSIFICATION	0.9999877597876791	WITHOUT_CLASSIFICATION	1.2240212320962879E-5	DESIGN
//special case	WITHOUT_CLASSIFICATION	0.9999617776050431	WITHOUT_CLASSIFICATION	3.8222394956885015E-5	DESIGN
// the name of an SQL function	WITHOUT_CLASSIFICATION	0.9999982239584712	WITHOUT_CLASSIFICATION	1.7760415288389642E-6	DESIGN
//null child could occur for no from clause in a filter	WITHOUT_CLASSIFICATION	0.9992043661901047	WITHOUT_CLASSIFICATION	7.956338098953361E-4	DESIGN
//this is basically a copy/paste of OrderByParser ... might be worth refactoring	WITHOUT_CLASSIFICATION	0.6170278218027456	WITHOUT_CLASSIFICATION	0.3829721781972545	DESIGN
// SELECT p FROM p IN CLASS eg.Person GROUP BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999962688997325	WITHOUT_CLASSIFICATION	3.7311002673940037E-6	DESIGN
// return aliases not supported in classic translator!	WITHOUT_CLASSIFICATION	0.9998736860358113	WITHOUT_CLASSIFICATION	1.263139641887491E-4	DESIGN
//register collection role	WITHOUT_CLASSIFICATION	0.9999986795488324	WITHOUT_CLASSIFICATION	1.3204511676393228E-6	DESIGN
// The keyword used to specify an identity column, if identity column key generation is supported.	WITHOUT_CLASSIFICATION	0.9999994116203753	WITHOUT_CLASSIFICATION	5.883796246401158E-7	DESIGN
//.getElementPropertyMapping();	WITHOUT_CLASSIFICATION	0.9999984421497158	WITHOUT_CLASSIFICATION	1.55785028416939E-6	DESIGN
//crossJoins.add(name);	WITHOUT_CLASSIFICATION	0.9999715347628476	WITHOUT_CLASSIFICATION	2.8465237152327127E-5	DESIGN
//ie no select clause in HQL	WITHOUT_CLASSIFICATION	0.9999006216929607	WITHOUT_CLASSIFICATION	9.937830703928569E-5	DESIGN
// initialize the Set of queried identifier spaces (ie. tables)	WITHOUT_CLASSIFICATION	0.9999998681897928	WITHOUT_CLASSIFICATION	1.318102073075119E-7	DESIGN
//ie. no select clause	WITHOUT_CLASSIFICATION	0.999974940712605	WITHOUT_CLASSIFICATION	2.505928739502278E-5	DESIGN
//there _was_ a select clause	WITHOUT_CLASSIFICATION	0.999967328431795	WITHOUT_CLASSIFICATION	3.2671568204942E-5	DESIGN
// return the concrete type, or the underlying type if a concrete type // was not specified	WITHOUT_CLASSIFICATION	0.9999989622636039	WITHOUT_CLASSIFICATION	1.037736396210174E-6	DESIGN
//many-to-many	WITHOUT_CLASSIFICATION	0.9999735800315889	WITHOUT_CLASSIFICATION	2.6419968411187127E-5	DESIGN
//q.addCollection(collectionName, collectionRole);	WITHOUT_CLASSIFICATION	0.999999945841468	WITHOUT_CLASSIFICATION	5.415853194629083E-8	DESIGN
// classic parser does not support bulk manipulation statements	WITHOUT_CLASSIFICATION	0.9999970748268232	WITHOUT_CLASSIFICATION	2.9251731768540913E-6	DESIGN
// can't cache this stuff either (per-invocation)	WITHOUT_CLASSIFICATION	0.99961753129647	WITHOUT_CLASSIFICATION	3.824687035300764E-4	DESIGN
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.7006493767241516	DESIGN	0.29935062327584844	WITHOUT_CLASSIFICATION
// This is the legacy behaviour for HQL queries...	WITHOUT_CLASSIFICATION	0.9999446802274392	WITHOUT_CLASSIFICATION	5.53197725607679E-5	DESIGN
// not known!	WITHOUT_CLASSIFICATION	0.9944707939833821	WITHOUT_CLASSIFICATION	0.005529206016617892	DESIGN
// not known!	WITHOUT_CLASSIFICATION	0.9944707939833821	WITHOUT_CLASSIFICATION	0.005529206016617892	DESIGN
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9992272771045403	WITHOUT_CLASSIFICATION	7.727228954596969E-4	DESIGN
// not known!	WITHOUT_CLASSIFICATION	0.9944707939833821	WITHOUT_CLASSIFICATION	0.005529206016617892	DESIGN
// not known!	WITHOUT_CLASSIFICATION	0.9944707939833821	WITHOUT_CLASSIFICATION	0.005529206016617892	DESIGN
//Need this, since join condition can appear inside parens!	WITHOUT_CLASSIFICATION	0.9860576929822824	WITHOUT_CLASSIFICATION	0.013942307017717643	DESIGN
//tokens that close a sub expression //tokens that open a sub expression //tokens that would indicate a sub expression is a boolean expression	WITHOUT_CLASSIFICATION	0.9999989404588419	WITHOUT_CLASSIFICATION	1.0595411581786242E-6	DESIGN
//expressionTerminators.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.9999868247006262	WITHOUT_CLASSIFICATION	1.3175299373938747E-5	DESIGN
//expressionOpeners.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.9999991726325834	WITHOUT_CLASSIFICATION	8.273674165163197E-7	DESIGN
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource) // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.6335929452259799	WITHOUT_CLASSIFICATION	0.36640705477402014	DESIGN
// otherwise, a trim-specification and/or a trim-character // have been specified;  we need to decide which options // are present and "do the right thing" // should leading trim-characters be trimmed? // should trailing trim-characters be trimmed? // the trim-character (what is to be trimmed off?) // the trim-source (from where should it be trimmed?)	WITHOUT_CLASSIFICATION	0.9960412314258046	WITHOUT_CLASSIFICATION	0.003958768574195466	DESIGN
//Inside a BETWEEN ... AND ... expression	WITHOUT_CLASSIFICATION	0.9999999793549107	WITHOUT_CLASSIFICATION	2.0645089322453696E-8	DESIGN
//were an odd or even number of NOTs encountered //the join string built up by compound paths inside this expression //a flag indicating if the subexpression is known to be boolean	WITHOUT_CLASSIFICATION	0.9999910407614881	WITHOUT_CLASSIFICATION	8.9592385118923E-6	DESIGN
//ie. a many-to-many	WITHOUT_CLASSIFICATION	0.999990883969827	WITHOUT_CLASSIFICATION	9.116030172970153E-6	DESIGN
//Cope with [,]	WITHOUT_CLASSIFICATION	0.9998971320158422	WITHOUT_CLASSIFICATION	1.028679841578051E-4	DESIGN
//Cope with a continued path expression (ie. ].baz)	WITHOUT_CLASSIFICATION	0.999984588945851	WITHOUT_CLASSIFICATION	1.541105414905384E-5	DESIGN
//NOTE: early return	WITHOUT_CLASSIFICATION	0.986520954420748	WITHOUT_CLASSIFICATION	0.013479045579251949	DESIGN
//Cope with a subselect	WITHOUT_CLASSIFICATION	0.999679147295787	WITHOUT_CLASSIFICATION	3.2085270421299363E-4	DESIGN
//Cope with special cases of AND, NOT, ()	WITHOUT_CLASSIFICATION	0.9999810777281701	WITHOUT_CLASSIFICATION	1.8922271829872887E-5	DESIGN
//Close extra brackets we opened	WITHOUT_CLASSIFICATION	0.9999262053562524	WITHOUT_CLASSIFICATION	7.379464374758979E-5	DESIGN
//take note when this is a boolean expression	WITHOUT_CLASSIFICATION	0.9999995164208209	WITHOUT_CLASSIFICATION	4.835791792206723E-7	DESIGN
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999999870389705	WITHOUT_CLASSIFICATION	1.2961029526778411E-8	DESIGN
//process a token, mapping OO path expressions to SQL expressions	WITHOUT_CLASSIFICATION	0.9999999761637376	WITHOUT_CLASSIFICATION	2.3836262521065185E-8	DESIGN
//Open any extra brackets we might need.	WITHOUT_CLASSIFICATION	0.9941916732545723	WITHOUT_CLASSIFICATION	0.005808326745427733	DESIGN
//Cope with special cases of AND, NOT, )	WITHOUT_CLASSIFICATION	0.9999550917078093	WITHOUT_CLASSIFICATION	4.49082921906905E-5	DESIGN
// the next one up must also be	WITHOUT_CLASSIFICATION	0.99999870954109	WITHOUT_CLASSIFICATION	1.2904589099433525E-6	DESIGN
// Add any joins	WITHOUT_CLASSIFICATION	0.9999612227899193	WITHOUT_CLASSIFICATION	3.877721008061934E-5	DESIGN
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999999870389705	WITHOUT_CLASSIFICATION	1.2961029526778411E-8	DESIGN
//named query parameter	WITHOUT_CLASSIFICATION	0.999362380678922	WITHOUT_CLASSIFICATION	6.376193210779071E-4	DESIGN
//path expression	WITHOUT_CLASSIFICATION	0.999999660122955	WITHOUT_CLASSIFICATION	3.398770449121218E-7	DESIGN
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999704576137131	WITHOUT_CLASSIFICATION	2.9542386286841777E-5	DESIGN
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.999944159597944	WITHOUT_CLASSIFICATION	5.584040205582065E-5	DESIGN
//anything else	WITHOUT_CLASSIFICATION	0.9999984757581418	WITHOUT_CLASSIFICATION	1.5242418580910528E-6	DESIGN
// the path expression continues after a ]	WITHOUT_CLASSIFICATION	0.9999999209242314	WITHOUT_CLASSIFICATION	7.907576863358187E-8	DESIGN
// careful with this!	WITHOUT_CLASSIFICATION	0.9985144498651952	WITHOUT_CLASSIFICATION	0.00148555013480484	DESIGN
// the path expression ends at the ]	WITHOUT_CLASSIFICATION	0.9999987674211265	WITHOUT_CLASSIFICATION	1.232578873458614E-6	DESIGN
// "finish off" the join	WITHOUT_CLASSIFICATION	0.9999973411723899	WITHOUT_CLASSIFICATION	2.6588276101766977E-6	DESIGN
//NOTICE: no " or . since they are part of (compound) identifiers	WITHOUT_CLASSIFICATION	0.9997257853420323	WITHOUT_CLASSIFICATION	2.742146579677485E-4	DESIGN
//cannot instantiate	WITHOUT_CLASSIFICATION	0.9999486813071716	WITHOUT_CLASSIFICATION	5.1318692828257464E-5	DESIGN
// start by looking for HQL keywords...	WITHOUT_CLASSIFICATION	0.9999750903104837	WITHOUT_CLASSIFICATION	2.490968951627941E-5	DESIGN
// inner joins can be abbreviated to 'join'	WITHOUT_CLASSIFICATION	0.9999970808636914	WITHOUT_CLASSIFICATION	2.919136308680124E-6	DESIGN
// 'outer' is optional and is ignored	WITHOUT_CLASSIFICATION	0.9999997562788024	WITHOUT_CLASSIFICATION	2.4372119755599837E-7	DESIGN
// now anything that is not a HQL keyword	WITHOUT_CLASSIFICATION	0.9997718306289718	WITHOUT_CLASSIFICATION	2.2816937102814654E-4	DESIGN
// process the "old" HQL style where aliases appear _first_ // ie. using the IN or IN CLASS constructions	WITHOUT_CLASSIFICATION	0.9999999947099228	WITHOUT_CLASSIFICATION	5.290077065172421E-9	DESIGN
// treat it as a classname	WITHOUT_CLASSIFICATION	0.9999340412871706	WITHOUT_CLASSIFICATION	6.595871282937812E-5	DESIGN
// treat it as a path expression	WITHOUT_CLASSIFICATION	0.9999999282514072	WITHOUT_CLASSIFICATION	7.174859285385128E-8	DESIGN
// starts with the name of a mapped class (new style)	WITHOUT_CLASSIFICATION	0.9999995343241794	WITHOUT_CLASSIFICATION	4.6567582058470404E-7	DESIGN
// starts with a path expression (new style)	WITHOUT_CLASSIFICATION	0.999999943224175	WITHOUT_CLASSIFICATION	5.677582497222533E-8	DESIGN
//allow ODMG OQL style: from Person p, p.cars c	WITHOUT_CLASSIFICATION	0.9995563849240884	WITHOUT_CLASSIFICATION	4.436150759116029E-4	DESIGN
//handle quoted strings	WITHOUT_CLASSIFICATION	0.9999912407347089	WITHOUT_CLASSIFICATION	8.759265291034676E-6	DESIGN
// Object insertions, updates, and deletions have list semantics because // they must happen in the right order so as to respect referential // integrity	WITHOUT_CLASSIFICATION	0.9999999971246678	WITHOUT_CLASSIFICATION	2.8753322385490374E-9	DESIGN
// "finish off" the join	WITHOUT_CLASSIFICATION	0.9999973411723899	WITHOUT_CLASSIFICATION	2.6588276101766977E-6	DESIGN
//ignore whitespace	WITHOUT_CLASSIFICATION	0.9999616143397192	WITHOUT_CLASSIFICATION	3.8385660280915304E-5	DESIGN
//do replacements	WITHOUT_CLASSIFICATION	0.9999851174965709	WITHOUT_CLASSIFICATION	1.4882503428994819E-5	DESIGN
//handle HQL2 collection syntax	WITHOUT_CLASSIFICATION	0.9999987628383156	WITHOUT_CLASSIFICATION	1.237161684470949E-6	DESIGN
// uuid.hex is deprecated	WITHOUT_CLASSIFICATION	0.9968929656149621	WITHOUT_CLASSIFICATION	0.0031070343850378	DESIGN
// AbstractSelectingDelegate impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999473441771	WITHOUT_CLASSIFICATION	5.2655822938974755E-8	DESIGN
//hilo params	WITHOUT_CLASSIFICATION	0.9999856940742043	WITHOUT_CLASSIFICATION	1.4305925795609074E-5	DESIGN
//sql = query;	WITHOUT_CLASSIFICATION	0.9999855514572621	WITHOUT_CLASSIFICATION	1.4448542737922888E-5	DESIGN
// performance opt	WITHOUT_CLASSIFICATION	0.9999983522547	WITHOUT_CLASSIFICATION	1.6477452999537553E-6	DESIGN
//sql = update;	WITHOUT_CLASSIFICATION	0.9999389446598471	WITHOUT_CLASSIFICATION	6.105534015296611E-5	DESIGN
//hilo config	WITHOUT_CLASSIFICATION	0.9997532174300834	WITHOUT_CLASSIFICATION	2.4678256991667583E-4	DESIGN
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999995053033692	WITHOUT_CLASSIFICATION	4.946966308032713E-7	DESIGN
// don't allow comments on these insert statements as comments totally // blow up the Oracle getGeneratedKeys "support" :(	WITHOUT_CLASSIFICATION	0.9999996707907861	WITHOUT_CLASSIFICATION	3.2920921394161087E-7	DESIGN
//abort the save (the object is already saved by a circular cascade)	WITHOUT_CLASSIFICATION	0.999991938764904	WITHOUT_CLASSIFICATION	8.061235096076947E-6	DESIGN
//throw new IdentifierGenerationException("save associated object first, or disable cascade for inverse association");	WITHOUT_CLASSIFICATION	0.9999999953455431	WITHOUT_CLASSIFICATION	4.6544568960059194E-9	DESIGN
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999900424544527	WITHOUT_CLASSIFICATION	9.957545547326572E-6	DESIGN
//do nothing to avoid a lazy property initialization	WITHOUT_CLASSIFICATION	0.9990684285248943	WITHOUT_CLASSIFICATION	9.315714751056595E-4	DESIGN
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.99999990846779	WITHOUT_CLASSIFICATION	9.153221013034206E-8	DESIGN
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999995053033692	WITHOUT_CLASSIFICATION	4.946966308032713E-7	DESIGN
// do nothing until we hit the rsult set containing the generated id	WITHOUT_CLASSIFICATION	0.9999016841437799	WITHOUT_CLASSIFICATION	9.831585622016875E-5	DESIGN
/* COLUMN and TABLE should be renamed but it would break the public API */	WITHOUT_CLASSIFICATION	0.9618358317685753	DESIGN	0.03816416823142475	WITHOUT_CLASSIFICATION
// Loaded entity instances, by EntityKey	WITHOUT_CLASSIFICATION	0.9999890168676644	WITHOUT_CLASSIFICATION	1.0983132335507474E-5	DESIGN
// if the given name is un-qualified we may neen to qualify it	WITHOUT_CLASSIFICATION	0.9999902040231339	WITHOUT_CLASSIFICATION	9.795976866243826E-6	DESIGN
// the default...	WITHOUT_CLASSIFICATION	0.9999889004432533	WITHOUT_CLASSIFICATION	1.1099556746702033E-5	DESIGN
// unfortunately not really safe to normalize this // to 1 as an initial value like we do the others // because we would not be able to control this if // we are using a sequence...	WITHOUT_CLASSIFICATION	0.9994342215624578	WITHOUT_CLASSIFICATION	5.657784375422704E-4	DESIGN
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999900424544527	WITHOUT_CLASSIFICATION	9.957545547326572E-6	DESIGN
// Identity map of CollectionEntry instances, by the collection wrapper	WITHOUT_CLASSIFICATION	0.9999999990635977	WITHOUT_CLASSIFICATION	9.364023268858429E-10	DESIGN
// general purpose parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999798983866	WITHOUT_CLASSIFICATION	2.0101613447730508E-8	DESIGN
// table-specific parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998718834242	WITHOUT_CLASSIFICATION	1.281165758675185E-7	DESIGN
// Configurable implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999784124303391	WITHOUT_CLASSIFICATION	2.1587569660782527E-5	DESIGN
// IdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999965727725945	WITHOUT_CLASSIFICATION	3.4272274056438486E-6	DESIGN
// PersistentIdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999997740735261	WITHOUT_CLASSIFICATION	2.259264738970858E-6	DESIGN
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.999998898455175	WITHOUT_CLASSIFICATION	1.1015448249769347E-6	DESIGN
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.999998898455175	WITHOUT_CLASSIFICATION	1.1015448249769347E-6	DESIGN
//fetch the generated id in a separate query	WITHOUT_CLASSIFICATION	0.999944584816839	WITHOUT_CLASSIFICATION	5.5415183160899103E-5	DESIGN
// we just hit the last position	WITHOUT_CLASSIFICATION	0.999998975563676	WITHOUT_CLASSIFICATION	1.0244363240277807E-6	DESIGN
// scroll ahead	WITHOUT_CLASSIFICATION	0.999986871564651	WITHOUT_CLASSIFICATION	1.3128435348852595E-5	DESIGN
// scroll backward	WITHOUT_CLASSIFICATION	0.9999949385759728	WITHOUT_CLASSIFICATION	5.06142402732953E-6	DESIGN
// we have not yet hit the last result...	WITHOUT_CLASSIFICATION	0.9999466482386277	WITHOUT_CLASSIFICATION	5.3351761372376534E-5	DESIGN
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999312402186527	WITHOUT_CLASSIFICATION	6.87597813473225E-5	DESIGN
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999978159785744	WITHOUT_CLASSIFICATION	2.1840214256150805E-6	DESIGN
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999970909273529	WITHOUT_CLASSIFICATION	2.9090726471274E-6	DESIGN
// do this when all the properties are updateable since there is // a certain likelihood that the information will already be // snapshot-cached.	WITHOUT_CLASSIFICATION	0.9999915439630366	WITHOUT_CLASSIFICATION	8.45603696348413E-6	DESIGN
// Inner classes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999986890331807	WITHOUT_CLASSIFICATION	1.3109668193793357E-6	DESIGN
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999312402186527	WITHOUT_CLASSIFICATION	6.87597813473225E-5	DESIGN
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999978159785744	WITHOUT_CLASSIFICATION	2.1840214256150805E-6	DESIGN
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999970909273529	WITHOUT_CLASSIFICATION	2.9090726471274E-6	DESIGN
// Caches	WITHOUT_CLASSIFICATION	0.9999749653465191	WITHOUT_CLASSIFICATION	2.503465348096584E-5	DESIGN
//Generators:	WITHOUT_CLASSIFICATION	0.9998496606629222	WITHOUT_CLASSIFICATION	1.5033933707763207E-4	DESIGN
// cache region is defined by the root-class in the hierarchy...	WITHOUT_CLASSIFICATION	0.9999797776063372	WITHOUT_CLASSIFICATION	2.0222393662760512E-5	DESIGN
//check if the detached object being merged is the parent	WITHOUT_CLASSIFICATION	0.9990726584971844	WITHOUT_CLASSIFICATION	9.273415028154598E-4	DESIGN
// after *all* persisters and named queries are registered	WITHOUT_CLASSIFICATION	0.9999998152473463	WITHOUT_CLASSIFICATION	1.847526537899273E-7	DESIGN
// if we get here, it is possible that we have a proxy 'in the way' of the merge map resolution... // 	WITHOUT_CLASSIFICATION	0.9999992163158817	WITHOUT_CLASSIFICATION	7.836841182890194E-7	DESIGN
//JNDI + Serialization:	WITHOUT_CLASSIFICATION	0.99998984045558	WITHOUT_CLASSIFICATION	1.015954441990557E-5	DESIGN
//checking for named queries	WITHOUT_CLASSIFICATION	0.9751244485554047	WITHOUT_CLASSIFICATION	0.024875551444595224	DESIGN
//stats	WITHOUT_CLASSIFICATION	0.9995227388987359	WITHOUT_CLASSIFICATION	4.7726110126414473E-4	DESIGN
// EntityNotFoundDelegate	WITHOUT_CLASSIFICATION	0.9999938195189397	WITHOUT_CLASSIFICATION	6.180481060318056E-6	DESIGN
// Check named HQL queries	WITHOUT_CLASSIFICATION	0.9997611707179794	WITHOUT_CLASSIFICATION	2.3882928202050423E-4	DESIGN
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9818914829446106	WITHOUT_CLASSIFICATION	0.018108517055389385	DESIGN
//prevents this session from adding things to cache	WITHOUT_CLASSIFICATION	0.9999690834772927	WITHOUT_CLASSIFICATION	3.091652270725418E-5	DESIGN
// from javax.naming.Referenceable	WITHOUT_CLASSIFICATION	0.9999911707544165	WITHOUT_CLASSIFICATION	8.829245583611667E-6	DESIGN
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999936421396863	WITHOUT_CLASSIFICATION	6.3578603137479784E-6	DESIGN
//for a dynamic-class	WITHOUT_CLASSIFICATION	0.9999829709161192	WITHOUT_CLASSIFICATION	1.7029083880881698E-5	DESIGN
//test this entity to see if we must query it	WITHOUT_CLASSIFICATION	0.9999918162797352	WITHOUT_CLASSIFICATION	8.18372026485908E-6	DESIGN
//NOTE EARLY EXIT	WITHOUT_CLASSIFICATION	0.9993975514100372	WITHOUT_CLASSIFICATION	6.024485899628809E-4	DESIGN
// for backward-compatability	WITHOUT_CLASSIFICATION	0.9998835208866489	WITHOUT_CLASSIFICATION	1.1647911335115094E-4	DESIGN
// ignore this error for now	WITHOUT_CLASSIFICATION	0.9999650287761684	WITHOUT_CLASSIFICATION	3.497122383150918E-5	DESIGN
//to stop the class from being unloaded	WITHOUT_CLASSIFICATION	0.9999533208107018	WITHOUT_CLASSIFICATION	4.667918929811422E-5	DESIGN
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9869492331692152	WITHOUT_CLASSIFICATION	0.013050766830784884	DESIGN
//must add to JNDI _after_ adding to HashMaps, because some JNDI servers use serialization	WITHOUT_CLASSIFICATION	0.9999993747160196	WITHOUT_CLASSIFICATION	6.25283980343758E-7	DESIGN
// Make sure this is a defined parameter and check the incoming value type	WITHOUT_CLASSIFICATION	0.9999743170576486	WITHOUT_CLASSIFICATION	2.5682942351427277E-5	DESIGN
// for each of the defined parameters, make sure its value // has been set	WITHOUT_CLASSIFICATION	0.9999883809676611	WITHOUT_CLASSIFICATION	1.1619032338947262E-5	DESIGN
//we never need to apply locks to the SQL	WITHOUT_CLASSIFICATION	0.9999986596936054	WITHOUT_CLASSIFICATION	1.3403063946894465E-6	DESIGN
// inserts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999982624692966	WITHOUT_CLASSIFICATION	1.7375307034883145E-6	DESIGN
// deletes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999929432230321	WITHOUT_CLASSIFICATION	7.056776967865042E-6	DESIGN
// during deserialization, we need to reconnect all proxies and // collections to this session, as well as the EntityEntry and // CollectionEntry instances; these associations are transient // because serialization is used for different things.	WITHOUT_CLASSIFICATION	0.9999042954093065	WITHOUT_CLASSIFICATION	9.570459069352795E-5	DESIGN
// updates ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999336131896441	WITHOUT_CLASSIFICATION	6.638681035587569E-5	DESIGN
// loading ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999991506684449	WITHOUT_CLASSIFICATION	8.493315550019742E-7	DESIGN
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999998593285978	WITHOUT_CLASSIFICATION	1.406714021599695E-7	DESIGN
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999998593285978	WITHOUT_CLASSIFICATION	1.406714021599695E-7	DESIGN
// first, try to load it from the temp PC associated to this SS	WITHOUT_CLASSIFICATION	0.9999981186934739	WITHOUT_CLASSIFICATION	1.8813065260650492E-6	DESIGN
// if the metadata allowed proxy creation and caller did not request forceful eager loading, // generate a proxy	WITHOUT_CLASSIFICATION	0.9999997739044652	WITHOUT_CLASSIFICATION	2.2609553484796984E-7	DESIGN
// otherwise immediately materialize it	WITHOUT_CLASSIFICATION	0.9999993750297592	WITHOUT_CLASSIFICATION	6.24970240860513E-7	DESIGN
/////////////////////////////////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9999860785196982	WITHOUT_CLASSIFICATION	1.392148030177787E-5	DESIGN
// no auto-flushing to support in stateless session	WITHOUT_CLASSIFICATION	0.9999996771951072	WITHOUT_CLASSIFICATION	3.228048927963346E-7	DESIGN
//after setting values to object, entityMode	WITHOUT_CLASSIFICATION	0.9999492913487767	WITHOUT_CLASSIFICATION	5.0708651223258393E-5	DESIGN
//for EJB3	WITHOUT_CLASSIFICATION	0.9999883327872984	WITHOUT_CLASSIFICATION	1.1667212701679663E-5	DESIGN
// just ignore	WITHOUT_CLASSIFICATION	0.9999984383054671	WITHOUT_CLASSIFICATION	1.5616945329377024E-6	DESIGN
// do a check	WITHOUT_CLASSIFICATION	0.9999976186551212	WITHOUT_CLASSIFICATION	2.3813448787677616E-6	DESIGN
// saveOrUpdate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999988662700896	WITHOUT_CLASSIFICATION	1.1337299103318662E-6	DESIGN
// update() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999949605007781	WITHOUT_CLASSIFICATION	5.039499221866457E-6	DESIGN
// lock() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999209337258	WITHOUT_CLASSIFICATION	7.906627419629827E-8	DESIGN
// persist() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994337877542	WITHOUT_CLASSIFICATION	5.662122457078545E-7	DESIGN
// persistOnFlush() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996597570274	WITHOUT_CLASSIFICATION	3.402429725581571E-7	DESIGN
// merge() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997331977251	WITHOUT_CLASSIFICATION	2.6680227486282463E-7	DESIGN
// saveOrUpdateCopy() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999977010281018	WITHOUT_CLASSIFICATION	2.2989718982484333E-6	DESIGN
// delete() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993418339022	WITHOUT_CLASSIFICATION	6.581660979178113E-7	DESIGN
// load()/get() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999237447892	WITHOUT_CLASSIFICATION	7.62552108730836E-8	DESIGN
// refresh() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999997428437329	WITHOUT_CLASSIFICATION	2.5715626709914876E-6	DESIGN
// replicate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99999859798983	WITHOUT_CLASSIFICATION	1.4020101699419877E-6	DESIGN
// do not auto-flush while outside a transaction	WITHOUT_CLASSIFICATION	0.9999999322421073	WITHOUT_CLASSIFICATION	6.775789281368076E-8	DESIGN
// this is an internal error of some sort...	WITHOUT_CLASSIFICATION	0.999068773812948	WITHOUT_CLASSIFICATION	9.312261870520412E-4	DESIGN
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.5302002791232797	WITHOUT_CLASSIFICATION	0.4697997208767203	DESIGN
//only collections belonging to deleted entities are allowed to be dereferenced in the case of orphan delete	WITHOUT_CLASSIFICATION	0.9999985456590957	WITHOUT_CLASSIFICATION	1.4543409042653648E-6	DESIGN
// if it was previously unreferenced, we need to flush in order to // get its state into the database in order to execute query	WITHOUT_CLASSIFICATION	0.9999998845947905	WITHOUT_CLASSIFICATION	1.1540520941391866E-7	DESIGN
// not for internal use:	WITHOUT_CLASSIFICATION	0.9997017730404585	WITHOUT_CLASSIFICATION	2.9822695954146995E-4	DESIGN
// otherwise, we only need to flush if there are in-memory changes // to the queried tables	WITHOUT_CLASSIFICATION	0.9999999861744598	WITHOUT_CLASSIFICATION	1.3825540262751362E-8	DESIGN
// might need to run a different filter entirely after the flush // because the collection role may have changed	WITHOUT_CLASSIFICATION	0.9999999811607827	WITHOUT_CLASSIFICATION	1.8839217306679433E-8	DESIGN
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.5302002791232797	WITHOUT_CLASSIFICATION	0.4697997208767203	DESIGN
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.5302002791232797	WITHOUT_CLASSIFICATION	0.4697997208767203	DESIGN
//if it is initialized, see if the underlying //instance is contained, since we need to  //account for the fact that it might have been //evicted	WITHOUT_CLASSIFICATION	0.9999523264803216	WITHOUT_CLASSIFICATION	4.7673519678306405E-5	DESIGN
// basically just an adapted copy of find(CriteriaImpl)	WITHOUT_CLASSIFICATION	0.999999952257362	WITHOUT_CLASSIFICATION	4.7742637857532125E-8	DESIGN
// it is possible for this method to be called during flush processing, // so make certain that we do not accidently initialize an uninitialized proxy	WITHOUT_CLASSIFICATION	0.999302494769994	WITHOUT_CLASSIFICATION	6.975052300061023E-4	DESIGN
// nothing to do in a stateful session	WITHOUT_CLASSIFICATION	0.9999996141250886	WITHOUT_CLASSIFICATION	3.8587491133931544E-7	DESIGN
// ignore	WITHOUT_CLASSIFICATION	0.9999978563314406	WITHOUT_CLASSIFICATION	2.1436685594845756E-6	DESIGN
// ignore this error for now	WITHOUT_CLASSIFICATION	0.9999650287761684	WITHOUT_CLASSIFICATION	3.497122383150918E-5	DESIGN
// we need to writeObject() on this since interceptor is user defined	WITHOUT_CLASSIFICATION	0.9999945990139336	WITHOUT_CLASSIFICATION	5.400986066406491E-6	DESIGN
// the old-time stand-by...	WITHOUT_CLASSIFICATION	0.9999929734101151	WITHOUT_CLASSIFICATION	7.026589884893099E-6	DESIGN
// parameter bind values...	WITHOUT_CLASSIFICATION	0.9989416139356242	WITHOUT_CLASSIFICATION	0.001058386064375764	DESIGN
// Parameter handling code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999967366547012	WITHOUT_CLASSIFICATION	3.2633452987738116E-6	DESIGN
// prepend value and type list with null for any positions before the wanted position.	WITHOUT_CLASSIFICATION	0.9999999476431742	WITHOUT_CLASSIFICATION	5.2356825887343196E-8	DESIGN
// Execution methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999724681475407	WITHOUT_CLASSIFICATION	2.7531852459277752E-5	DESIGN
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9989143181296845	WITHOUT_CLASSIFICATION	0.0010856818703155534	DESIGN
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9989143181296845	WITHOUT_CLASSIFICATION	0.0010856818703155534	DESIGN
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999838458923996	WITHOUT_CLASSIFICATION	1.6154107600387596E-5	DESIGN
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999838458923996	WITHOUT_CLASSIFICATION	1.6154107600387596E-5	DESIGN
// FieldInterceptor impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999951368178462	WITHOUT_CLASSIFICATION	4.863182153712379E-6	DESIGN
// subclass accesses ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999986000948532	WITHOUT_CLASSIFICATION	1.3999051467662372E-6	DESIGN
//let's assume that there is only one lazy fetch group, for now!	WITHOUT_CLASSIFICATION	0.9998014775175603	WITHOUT_CLASSIFICATION	1.9852248243967325E-4	DESIGN
// FieldHandler impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999284336423326	WITHOUT_CLASSIFICATION	7.156635766739826E-5	DESIGN
// should *not* need to grow beyond the size of the total number of columns in the rs	WITHOUT_CLASSIFICATION	0.9997391565575614	WITHOUT_CLASSIFICATION	2.608434424385962E-4	DESIGN
// should probably no-op commit/rollback here, at least in JTA scenarios	WITHOUT_CLASSIFICATION	0.9346171962407861	DESIGN	0.06538280375921386	WITHOUT_CLASSIFICATION
// Base Expectation impls ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998591209464	WITHOUT_CLASSIFICATION	1.408790537137135E-7	DESIGN
// Various Expectation instances ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994086327346	WITHOUT_CLASSIFICATION	5.913672654648814E-7	DESIGN
// explicitly perform no checking...	WITHOUT_CLASSIFICATION	0.9939074660450626	WITHOUT_CLASSIFICATION	0.006092533954937465	DESIGN
// used from testsuite	WITHOUT_CLASSIFICATION	0.9971707478758534	WITHOUT_CLASSIFICATION	0.0028292521241466534	DESIGN
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999996736075387	WITHOUT_CLASSIFICATION	3.2639246128573035E-7	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.9994521443640757	WITHOUT_CLASSIFICATION	5.478556359242642E-4	DESIGN
// register synch; stats.connect()	WITHOUT_CLASSIFICATION	0.9999997774629333	WITHOUT_CLASSIFICATION	2.225370666669973E-7	DESIGN
//noncritical, swallow and let the other propagate!	WITHOUT_CLASSIFICATION	0.9999992628662326	WITHOUT_CLASSIFICATION	7.371337673944629E-7	DESIGN
// calls executeBatch()	WITHOUT_CLASSIFICATION	0.9999997963937297	WITHOUT_CLASSIFICATION	2.0360627033395907E-7	DESIGN
//no big deal	WITHOUT_CLASSIFICATION	0.9998928424356952	WITHOUT_CLASSIFICATION	1.0715756430467691E-4	DESIGN
// no big deal	WITHOUT_CLASSIFICATION	0.9998273229650688	WITHOUT_CLASSIFICATION	1.7267703493111352E-4	DESIGN
// no big deal	WITHOUT_CLASSIFICATION	0.9998273229650688	WITHOUT_CLASSIFICATION	1.7267703493111352E-4	DESIGN
// sybase driver (jConnect) throwing NPE here in certain // cases, but we'll just handle the general "unexpected" case	WITHOUT_CLASSIFICATION	0.9999999087387178	WITHOUT_CLASSIFICATION	9.12612821775925E-8	DESIGN
// see explanation above...	WITHOUT_CLASSIFICATION	0.9999938849444043	WITHOUT_CLASSIFICATION	6.1150555957419815E-6	DESIGN
// If we are in the process of releasing, no sense // checking for aggressive-release possibility.	WITHOUT_CLASSIFICATION	0.9973286025600916	WITHOUT_CLASSIFICATION	0.0026713974399083552	DESIGN
// EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9949841178037985	WITHOUT_CLASSIFICATION	0.005015882196201555	DESIGN
// ResultSet impl ("overridden") ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993909846614	WITHOUT_CLASSIFICATION	6.090153384907849E-7	DESIGN
// ResultSet impl (delegated) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999989691628742	WITHOUT_CLASSIFICATION	1.0308371258207426E-6	DESIGN
// refer to comment in StatefulPersistenceContext.addCollection()	WITHOUT_CLASSIFICATION	0.9999999861957132	WITHOUT_CLASSIFICATION	1.380428676785027E-8	DESIGN
// ConnectionManager.Callback implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997388842472109	WITHOUT_CLASSIFICATION	2.6111575278917596E-4	DESIGN
// Note : success = false, because we don't know the outcome of the transaction	WITHOUT_CLASSIFICATION	0.9999850377012893	WITHOUT_CLASSIFICATION	1.4962298710671197E-5	DESIGN
// we already have a callback registered; either a local // (org.hibernate.Transaction) transaction has accepted // callback responsibilities, or we have previously // registered a transaction synch.	WITHOUT_CLASSIFICATION	0.9999226311219599	WITHOUT_CLASSIFICATION	7.736887804015349E-5	DESIGN
// the configured transaction-factory says it only supports // local callback mode, so no sense attempting to register a // JTA Synchronization	WITHOUT_CLASSIFICATION	0.9999554174462524	WITHOUT_CLASSIFICATION	4.4582553747629E-5	DESIGN
// transactions marked for rollback-only cause some TM impls to throw exceptions	WITHOUT_CLASSIFICATION	0.998437731863463	WITHOUT_CLASSIFICATION	0.0015622681365370552	DESIGN
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999985877474703	WITHOUT_CLASSIFICATION	1.4122525296373883E-6	DESIGN
//postInitialize() will be called after initialization	WITHOUT_CLASSIFICATION	0.9999878151747987	WITHOUT_CLASSIFICATION	1.218482520129626E-5	DESIGN
// cannot handle single quotes	WITHOUT_CLASSIFICATION	0.9999341592000238	WITHOUT_CLASSIFICATION	6.58407999761762E-5	DESIGN
// todo : for 4.0 //	WITHOUT_CLASSIFICATION	0.9999801224078698	WITHOUT_CLASSIFICATION	1.9877592130163027E-5	DESIGN
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999997977013275	WITHOUT_CLASSIFICATION	2.0229867260779895E-7	DESIGN
// don't even bother trying to read further	WITHOUT_CLASSIFICATION	0.9997105745875474	WITHOUT_CLASSIFICATION	2.8942541245262555E-4	DESIGN
// don't even bother trying to read any further	WITHOUT_CLASSIFICATION	0.9999229389556185	WITHOUT_CLASSIFICATION	7.706104438152928E-5	DESIGN
// position cursor to the last row	WITHOUT_CLASSIFICATION	0.9999999376875953	WITHOUT_CLASSIFICATION	6.231240473626496E-8	DESIGN
// sequentially read the result set in reverse until we recognize // a change in the key value.  At that point, we are pointed at // the last physical sequential row for the logical row in which // we are interested in processing	WITHOUT_CLASSIFICATION	0.9999976315567146	WITHOUT_CLASSIFICATION	2.3684432853972655E-6	DESIGN
// Read backwards until we read past the first physical sequential // row with the key we are interested in loading	WITHOUT_CLASSIFICATION	0.9999961518756688	WITHOUT_CLASSIFICATION	3.848124331162534E-6	DESIGN
// Finally, read ahead one row to position result set cursor // at the first physical row we are interested in loading	WITHOUT_CLASSIFICATION	0.9999951450305451	WITHOUT_CLASSIFICATION	4.854969454816198E-6	DESIGN
// now get an existing proxy for each row element (if there is one)	WITHOUT_CLASSIFICATION	0.9999999178414826	WITHOUT_CLASSIFICATION	8.215851738715436E-8	DESIGN
// force the proxy to resolve itself	WITHOUT_CLASSIFICATION	0.9999808380929388	WITHOUT_CLASSIFICATION	1.9161907061180596E-5	DESIGN
// this is equivalent to the old behavior...	WITHOUT_CLASSIFICATION	0.9999956301331708	WITHOUT_CLASSIFICATION	4.369866829156814E-6	DESIGN
//if null, owner will be retrieved from session	WITHOUT_CLASSIFICATION	0.9999932694746343	WITHOUT_CLASSIFICATION	6.730525365804344E-6	DESIGN
//final String queryString, 	WITHOUT_CLASSIFICATION	0.9998870422717684	WITHOUT_CLASSIFICATION	1.1295772823162065E-4	DESIGN
// if it was a reference to self, don't need to nullify // unless we are using native id generation, in which // case we definitely need to nullify	WITHOUT_CLASSIFICATION	0.9999703506193209	WITHOUT_CLASSIFICATION	2.9649380679089597E-5	DESIGN
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999961285213759	WITHOUT_CLASSIFICATION	3.8714786241114616E-6	DESIGN
// in an effort to avoid concurrent-modification-exceptions (from // potential recursive calls back through here as a result of the // eventual call to PersistentCollection#endRead), we scan the // internal loadingCollections map for matches and store those matches // in a temp collection.  the temp collection is then used to "drive" // the #endRead processing.	WITHOUT_CLASSIFICATION	0.9999999998681705	WITHOUT_CLASSIFICATION	1.3182949457932905E-10	DESIGN
//we can reuse it for each row	WITHOUT_CLASSIFICATION	0.9999952143257664	WITHOUT_CLASSIFICATION	4.7856742335236915E-6	DESIGN
//can't reuse in this case	WITHOUT_CLASSIFICATION	0.8268200117905907	WITHOUT_CLASSIFICATION	0.17317998820940922	DESIGN
// First we need to suspend any current JTA transaction and obtain // a JDBC connection	WITHOUT_CLASSIFICATION	0.9999998058975463	WITHOUT_CLASSIFICATION	1.9410245360726857E-7	DESIGN
//getResultList(results);	WITHOUT_CLASSIFICATION	0.9999940825048976	WITHOUT_CLASSIFICATION	5.917495102459257E-6	DESIGN
//if we only returned one entity, query by key is more efficient	WITHOUT_CLASSIFICATION	0.9991557463156552	WITHOUT_CLASSIFICATION	8.442536843447636E-4	DESIGN
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999957605157297	WITHOUT_CLASSIFICATION	4.239484270258239E-6	DESIGN
// handle empty collection	WITHOUT_CLASSIFICATION	0.9998060278843471	WITHOUT_CLASSIFICATION	1.9397211565290714E-4	DESIGN
// else no collection element, but also no owner	WITHOUT_CLASSIFICATION	0.9999999912040313	WITHOUT_CLASSIFICATION	8.795968711434387E-9	DESIGN
//handle empty collections	WITHOUT_CLASSIFICATION	0.999977500928725	WITHOUT_CLASSIFICATION	2.249907127503861E-5	DESIGN
// else this is not a collection initializer (and empty collections will // be detected by looking for the owner's identifier in the result set)	WITHOUT_CLASSIFICATION	0.9991343905601116	WITHOUT_CLASSIFICATION	8.656094398884454E-4	DESIGN
// validate() instances of Validatable	WITHOUT_CLASSIFICATION	0.9999998254278539	WITHOUT_CLASSIFICATION	1.7457214600608208E-7	DESIGN
// if we know there is exactly 1 row, we can skip. // it would be great if we could _always_ skip this; // it is a problem for <key-many-to-one>	WITHOUT_CLASSIFICATION	0.9780584601535057	WITHOUT_CLASSIFICATION	0.021941539846494242	DESIGN
// remove all collections for the entity from the session-level cache	WITHOUT_CLASSIFICATION	0.9999998486730084	WITHOUT_CLASSIFICATION	1.513269915842742E-7	DESIGN
//null version means the object is in the process of being loaded somewhere else in the ResultSet	WITHOUT_CLASSIFICATION	0.9999987343445927	WITHOUT_CLASSIFICATION	1.2656554072545655E-6	DESIGN
//problematic for <key-many-to-one>!	WITHOUT_CLASSIFICATION	0.9999751621397869	WITHOUT_CLASSIFICATION	2.4837860213167038E-5	DESIGN
//use the id passed in	WITHOUT_CLASSIFICATION	0.9995341504456178	WITHOUT_CLASSIFICATION	4.658495543822632E-4	DESIGN
//do nothing	WITHOUT_CLASSIFICATION	0.9997771642449576	WITHOUT_CLASSIFICATION	2.228357550425077E-4	DESIGN
// prefer re-generation of identity!	WITHOUT_CLASSIFICATION	0.999885142979035	WITHOUT_CLASSIFICATION	1.1485702096496556E-4	DESIGN
//no point doing this if NONE was requested	WITHOUT_CLASSIFICATION	0.9999432767126603	WITHOUT_CLASSIFICATION	5.672328733971309E-5	DESIGN
//If the object is already loaded, return the loaded one	WITHOUT_CLASSIFICATION	0.9999836337390151	WITHOUT_CLASSIFICATION	1.6366260984889484E-5	DESIGN
//its already loaded so don't need to hydrate it	WITHOUT_CLASSIFICATION	0.9999996419786362	WITHOUT_CLASSIFICATION	3.5802136377480157E-7	DESIGN
// cascade the refresh prior to refreshing this entity	WITHOUT_CLASSIFICATION	0.999981435903663	WITHOUT_CLASSIFICATION	1.8564096337017354E-5	DESIGN
//the load() which takes an entity does not pass an entityName	WITHOUT_CLASSIFICATION	0.9999998659481882	WITHOUT_CLASSIFICATION	1.3405181178483126E-7	DESIGN
//we only check the version when _upgrading_ lock modes	WITHOUT_CLASSIFICATION	0.9999998374112681	WITHOUT_CLASSIFICATION	1.6258873185486682E-7	DESIGN
// look for a proxy	WITHOUT_CLASSIFICATION	0.9999930019028648	WITHOUT_CLASSIFICATION	6.998097135159765E-6	DESIGN
//we need to upgrade the lock mode to the mode requested	WITHOUT_CLASSIFICATION	0.9994510307523709	WITHOUT_CLASSIFICATION	5.489692476291097E-4	DESIGN
//its the given optional object	WITHOUT_CLASSIFICATION	0.9999998689308063	WITHOUT_CLASSIFICATION	1.3106919377240316E-7	DESIGN
// instantiate a new instance	WITHOUT_CLASSIFICATION	0.9999959806483173	WITHOUT_CLASSIFICATION	4.0193516828128194E-6	DESIGN
//need to hydrate it.	WITHOUT_CLASSIFICATION	0.9999336175930035	WITHOUT_CLASSIFICATION	6.638240699658796E-5	DESIGN
// return a newly loaded object	WITHOUT_CLASSIFICATION	0.9999865928900664	WITHOUT_CLASSIFICATION	1.3407109933682944E-5	DESIGN
//will be ignored, using the existing Entry instead	WITHOUT_CLASSIFICATION	0.9999980807572294	WITHOUT_CLASSIFICATION	1.9192427706437917E-6	DESIGN
// key is an entity involved with the operation performed by the listener; // value can be either a copy of the entity or the entity itself	WITHOUT_CLASSIFICATION	0.9999774663298987	WITHOUT_CLASSIFICATION	2.25336701012327E-5	DESIGN
//materialize associations (and initialize the object) later	WITHOUT_CLASSIFICATION	0.9999993619108897	WITHOUT_CLASSIFICATION	6.380891103724087E-7	DESIGN
// Get the persister for the _subclass_	WITHOUT_CLASSIFICATION	0.9999969787990091	WITHOUT_CLASSIFICATION	3.021200990942164E-6	DESIGN
// ok in normal Hibernate usage to delete a detached entity; JPA however // forbids it, thus this is a hook for HEM to affect this behavior	WITHOUT_CLASSIFICATION	0.9975025660346685	WITHOUT_CLASSIFICATION	0.002497433965331589	DESIGN
// the entry will be removed after the flush, and will no longer // override the stale snapshot // This is now handled by removeEntity() in EntityDeleteAction //persistenceContext.removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999999614961658	WITHOUT_CLASSIFICATION	3.850383421568232E-8	DESIGN
//addInitializedCollection(collection, persister, id);	WITHOUT_CLASSIFICATION	0.9999996132176245	WITHOUT_CLASSIFICATION	3.867823754157044E-7	DESIGN
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9984900082489934	WITHOUT_CLASSIFICATION	0.001509991751006678	DESIGN
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9984900082489934	WITHOUT_CLASSIFICATION	0.001509991751006678	DESIGN
/*|| oj.getJoinable().consumesCollectionAlias() */	WITHOUT_CLASSIFICATION	0.9999999422469223	WITHOUT_CLASSIFICATION	5.77530776392998E-8	DESIGN
// here we do not bother with the discriminator.	WITHOUT_CLASSIFICATION	0.9998343914503186	WITHOUT_CLASSIFICATION	1.6560854968138795E-4	DESIGN
// Code to handle subclasses of topClass	WITHOUT_CLASSIFICATION	0.9999949693388693	WITHOUT_CLASSIFICATION	5.030661130699708E-6	DESIGN
//woops we got an instance of another class hierarchy branch	WITHOUT_CLASSIFICATION	0.9998667980149537	WITHOUT_CLASSIFICATION	1.332019850461943E-4	DESIGN
// we can go straight to the first required row	WITHOUT_CLASSIFICATION	0.9999994534019377	WITHOUT_CLASSIFICATION	5.465980622809792E-7	DESIGN
// we need to step through the rows one row at a time (slow)	WITHOUT_CLASSIFICATION	0.9999834133932951	WITHOUT_CLASSIFICATION	1.6586606704856916E-5	DESIGN
// synchronized to avoid multi-thread access issues; defined as method synch to avoid // potential deadlock issues due to nature of code.	WITHOUT_CLASSIFICATION	0.999951149109704	WITHOUT_CLASSIFICATION	4.885089029611782E-5	DESIGN
// Allows various loaders (ok mainly the QueryLoader :) to check // whether scrolling of their result set should be allowed. // // By default it is allowed.	WITHOUT_CLASSIFICATION	0.9999238418945698	WITHOUT_CLASSIFICATION	7.615810543010277E-5	DESIGN
//before adding to collection!	WITHOUT_CLASSIFICATION	0.9999817536680959	WITHOUT_CLASSIFICATION	1.8246331904006318E-5	DESIGN
// if the current depth is 0, the root thing being loaded is the // many-to-many collection itself.  Here, it is alright to use // an inner join...	WITHOUT_CLASSIFICATION	0.99994418047258	WITHOUT_CLASSIFICATION	5.58195274199054E-5	DESIGN
//operations which cascade as far as the collection also cascade to collection elements	WITHOUT_CLASSIFICATION	0.9999999122659583	WITHOUT_CLASSIFICATION	8.773404166682667E-8	DESIGN
// simple, because we can't have a one-to-one or a collection  // (or even a property-ref) in a composite-element:	WITHOUT_CLASSIFICATION	0.9999998430191915	WITHOUT_CLASSIFICATION	1.5698080838305637E-7	DESIGN
//a composite key	WITHOUT_CLASSIFICATION	0.9999987905065387	WITHOUT_CLASSIFICATION	1.209493461270043E-6	DESIGN
// if no batch, use "foo = ? and bar = ?"	WITHOUT_CLASSIFICATION	0.9999998863967792	WITHOUT_CLASSIFICATION	1.136032208445946E-7	DESIGN
//it must be a collection fetch	WITHOUT_CLASSIFICATION	0.9999994985109839	WITHOUT_CLASSIFICATION	5.0148901609086E-7	DESIGN
// needed later for many-to-many/filter application	WITHOUT_CLASSIFICATION	0.9999878296508055	WITHOUT_CLASSIFICATION	1.2170349194548133E-5	DESIGN
/*&& etype.isReferenceToPrimaryKey()*/	WITHOUT_CLASSIFICATION	0.9999568784365263	WITHOUT_CLASSIFICATION	4.312156347376284E-5	DESIGN
// it might still need to apply a collection ordering based on a // many-to-many defined order-by...	WITHOUT_CLASSIFICATION	0.9999998331291474	WITHOUT_CLASSIFICATION	1.6687085263510923E-7	DESIGN
// if a composite key, use "( (foo = ? and bar = ?) or (foo = ? and bar = ?) )" for batching //TODO: unnecessary for databases with ANSI-style joins	WITHOUT_CLASSIFICATION	0.9898780628333631	WITHOUT_CLASSIFICATION	0.010121937166636853	DESIGN
// belong to other persister // belong to other persister	WITHOUT_CLASSIFICATION	0.9999972019547444	WITHOUT_CLASSIFICATION	2.7980452556437536E-6	DESIGN
// we found it	WITHOUT_CLASSIFICATION	0.999880122397319	WITHOUT_CLASSIFICATION	1.1987760268096266E-4	DESIGN
//we can use an inner join for the many-to-many	WITHOUT_CLASSIFICATION	0.9999846006288943	WITHOUT_CLASSIFICATION	1.5399371105690255E-5	DESIGN
//disable a join back to this same association	WITHOUT_CLASSIFICATION	0.9995265197662847	WITHOUT_CLASSIFICATION	4.7348023371523155E-4	DESIGN
//NOTE: unlike all other Loaders, this one is NOT //      multithreaded, or cacheable!!	WITHOUT_CLASSIFICATION	0.9817578629648406	WITHOUT_CLASSIFICATION	0.01824213703515942	DESIGN
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999999344074295	WITHOUT_CLASSIFICATION	6.559257043056569E-8	DESIGN
//root entity comes *last*	WITHOUT_CLASSIFICATION	0.9999227771586892	WITHOUT_CLASSIFICATION	7.722284131088909E-5	DESIGN
//deliberately ignore return value!	WITHOUT_CLASSIFICATION	0.9999947067045851	WITHOUT_CLASSIFICATION	5.293295414856105E-6	DESIGN
//alias may be null //EARLY EXIT	WITHOUT_CLASSIFICATION	0.9998705336572888	WITHOUT_CLASSIFICATION	1.2946634271108088E-4	DESIGN
// if it is a compound path	WITHOUT_CLASSIFICATION	0.9982561870035305	WITHOUT_CLASSIFICATION	0.0017438129964696231	DESIGN
// otherwise assume the parent is the the criteria that created us	WITHOUT_CLASSIFICATION	0.9998664755857247	WITHOUT_CLASSIFICATION	1.3352441427525973E-4	DESIGN
// if its the root criteria, we are done	WITHOUT_CLASSIFICATION	0.9999874931141806	WITHOUT_CLASSIFICATION	1.2506885819482824E-5	DESIGN
// otherwise, recurse	WITHOUT_CLASSIFICATION	0.9999982189435864	WITHOUT_CLASSIFICATION	1.7810564135530434E-6	DESIGN
//the criteria instance	WITHOUT_CLASSIFICATION	0.9998545649587564	WITHOUT_CLASSIFICATION	1.4543504124369462E-4	DESIGN
// the entity name	WITHOUT_CLASSIFICATION	0.999948957091171	WITHOUT_CLASSIFICATION	5.1042908829084794E-5	DESIGN
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9999822288048734	WITHOUT_CLASSIFICATION	1.777119512660209E-5	DESIGN
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9999822288048734	WITHOUT_CLASSIFICATION	1.777119512660209E-5	DESIGN
//it refers to an alias of a projection	WITHOUT_CLASSIFICATION	0.99999964441725	WITHOUT_CLASSIFICATION	3.555827500138976E-7	DESIGN
//should never happen, i think	WITHOUT_CLASSIFICATION	0.9984910204851015	WITHOUT_CLASSIFICATION	0.0015089795148984612	DESIGN
// Detect discriminator values...	WITHOUT_CLASSIFICATION	0.9999982859869122	WITHOUT_CLASSIFICATION	1.7140130878066656E-6	DESIGN
// Convert the string value into the proper type.	WITHOUT_CLASSIFICATION	0.9999770781755742	WITHOUT_CLASSIFICATION	2.2921824425806587E-5	DESIGN
// and the qualifier is not the alias of this criteria //      -> check to see if we belong to some criteria other //          than the one that created us	WITHOUT_CLASSIFICATION	0.9999990866238057	WITHOUT_CLASSIFICATION	9.13376194213485E-7	DESIGN
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.9998962936397295	WITHOUT_CLASSIFICATION	1.0370636027042955E-4	DESIGN
// Otherwise, this is an ordinary value.	WITHOUT_CLASSIFICATION	0.9998102120104596	WITHOUT_CLASSIFICATION	1.8978798954033988E-4	DESIGN
// Currently *not* cachable if autodiscover types is in effect (e.g. "select * ...")	WITHOUT_CLASSIFICATION	0.9999999461434289	WITHOUT_CLASSIFICATION	5.385657114255079E-8	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999538292619589	WITHOUT_CLASSIFICATION	4.617073804128677E-5	DESIGN
// this is only needed (afaict) for ResultTransformer processing...	WITHOUT_CLASSIFICATION	0.9984618632888521	WITHOUT_CLASSIFICATION	0.0015381367111479299	DESIGN
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999995762669784	WITHOUT_CLASSIFICATION	4.237330216416529E-7	DESIGN
// build an array with indices equal to the total number // of actual returns in the result Hibernate will return // for this query (scalars + non-scalars)	WITHOUT_CLASSIFICATION	0.9999985169433125	WITHOUT_CLASSIFICATION	1.4830566875015665E-6	DESIGN
// replace {....} with corresponding column aliases	WITHOUT_CLASSIFICATION	0.999954468911173	WITHOUT_CLASSIFICATION	4.553108882695313E-5	DESIGN
// No additional open braces found in the string, append the // rest of the string in its entirty and quit this loop	WITHOUT_CLASSIFICATION	0.9999894165332186	WITHOUT_CLASSIFICATION	1.0583466781286822E-5	DESIGN
// apend everything up until the next encountered open brace	WITHOUT_CLASSIFICATION	0.9999883908104579	WITHOUT_CLASSIFICATION	1.1609189542069823E-5	DESIGN
// it is a simple table alias {foo}	WITHOUT_CLASSIFICATION	0.99999978320398	WITHOUT_CLASSIFICATION	2.1679602001795982E-7	DESIGN
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9988322249598929	WITHOUT_CLASSIFICATION	0.0011677750401070817	DESIGN
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9988322249598929	WITHOUT_CLASSIFICATION	0.0011677750401070817	DESIGN
// The current alias is referencing the collection to be eagerly fetched	WITHOUT_CLASSIFICATION	0.9997708087614111	WITHOUT_CLASSIFICATION	2.2919123858894345E-4	DESIGN
// it is a property reference {foo.bar}	WITHOUT_CLASSIFICATION	0.9999093007688702	WITHOUT_CLASSIFICATION	9.069923112980585E-5	DESIGN
// Possibly handle :something parameters for the query ?	WITHOUT_CLASSIFICATION	0.9968046538417336	WITHOUT_CLASSIFICATION	0.0031953461582663848	DESIGN
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999979712719275	WITHOUT_CLASSIFICATION	2.028728072449365E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999538292619589	WITHOUT_CLASSIFICATION	4.617073804128677E-5	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.9994521443640757	WITHOUT_CLASSIFICATION	5.478556359242642E-4	DESIGN
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.953391176089087	WITHOUT_CLASSIFICATION	0.04660882391091291	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999538292619589	WITHOUT_CLASSIFICATION	4.617073804128677E-5	DESIGN
// Now, process the returns	WITHOUT_CLASSIFICATION	0.9999969692765713	WITHOUT_CLASSIFICATION	3.030723428661035E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999538292619589	WITHOUT_CLASSIFICATION	4.617073804128677E-5	DESIGN
// already been processed...	WITHOUT_CLASSIFICATION	0.9999853594681347	WITHOUT_CLASSIFICATION	1.4640531865199608E-5	DESIGN
// already been processed...	WITHOUT_CLASSIFICATION	0.9999853594681347	WITHOUT_CLASSIFICATION	1.4640531865199608E-5	DESIGN
// Make sure the owner alias is known...	WITHOUT_CLASSIFICATION	0.999994792908208	WITHOUT_CLASSIFICATION	5.207091791885927E-6	DESIGN
// first, break down the returns into maps keyed by alias // so that role returns can be more easily resolved to their owners	WITHOUT_CLASSIFICATION	0.999988427875996	WITHOUT_CLASSIFICATION	1.1572124003979116E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999538292619589	WITHOUT_CLASSIFICATION	4.617073804128677E-5	DESIGN
// If this return's alias has not been processed yet, do so b4 further processing of this return	WITHOUT_CLASSIFICATION	0.9998816569190497	WITHOUT_CLASSIFICATION	1.1834308095038095E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999538292619589	WITHOUT_CLASSIFICATION	4.617073804128677E-5	DESIGN
// for merging of versioned entities, we consider the version having // been changed only when: // 1) the two version values are different; //      *AND* // 2) The target actually represents database state! // // This second condition is a special case which allows // an entity to be merged during the same transaction // (though during a seperate operation) in which it was // originally persisted/saved	WITHOUT_CLASSIFICATION	0.9998291531719301	WITHOUT_CLASSIFICATION	1.708468280698117E-4	DESIGN
// this is the second pass through on a merge op, so here we limit the // replacement to associations types (value types were already replaced // during the first pass)	WITHOUT_CLASSIFICATION	0.9990156570195035	WITHOUT_CLASSIFICATION	9.84342980496581E-4	DESIGN
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.9995157325605941	WITHOUT_CLASSIFICATION	4.8426743940583667E-4	DESIGN
// cascade-save to collections AFTER the collection owner was saved	WITHOUT_CLASSIFICATION	0.9999991139899269	WITHOUT_CLASSIFICATION	8.86010073134764E-7	DESIGN
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999998846343539	WITHOUT_CLASSIFICATION	1.1536564604595916E-7	DESIGN
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999983711453937	WITHOUT_CLASSIFICATION	1.6288546062877238E-6	DESIGN
// currently only the Hibernate-supplied DbTimestampType is supported here	WITHOUT_CLASSIFICATION	0.999994174337557	WITHOUT_CLASSIFICATION	5.825662443037692E-6	DESIGN
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9931810621799098	WITHOUT_CLASSIFICATION	0.006818937820090166	DESIGN
// make a new one	WITHOUT_CLASSIFICATION	0.9999983841488504	WITHOUT_CLASSIFICATION	1.615851149590621E-6	DESIGN
// not so sure this is even valid subtree.  but if it was, it'd // represent two unrelated table references...	WITHOUT_CLASSIFICATION	0.5008947378130095	DESIGN	0.4991052621869905	WITHOUT_CLASSIFICATION
// (NOT (GT a b) ) => (LE a b)	WITHOUT_CLASSIFICATION	0.9994961506701383	WITHOUT_CLASSIFICATION	5.038493298617914E-4	DESIGN
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9999965585917716	WITHOUT_CLASSIFICATION	3.4414082282534445E-6	DESIGN
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9999970680154336	WITHOUT_CLASSIFICATION	2.931984566282148E-6	DESIGN
//sqlResultTypes = selectClause.getSqlResultTypes();	WITHOUT_CLASSIFICATION	0.9999996175741942	WITHOUT_CLASSIFICATION	3.8242580583902536E-7	DESIGN
//by default	WITHOUT_CLASSIFICATION	0.9999344544752137	WITHOUT_CLASSIFICATION	6.554552478630753E-5	DESIGN
// This is now handled earlier in this method.	WITHOUT_CLASSIFICATION	0.7068458799042937	WITHOUT_CLASSIFICATION	0.2931541200957063	DESIGN
// -- Loader implementation --	WITHOUT_CLASSIFICATION	0.9999961853188867	WITHOUT_CLASSIFICATION	3.8146811132491667E-6	DESIGN
// -- Loader overrides --	WITHOUT_CLASSIFICATION	0.9999995018729194	WITHOUT_CLASSIFICATION	4.981270806033794E-7	DESIGN
// (NOT (IS_NULL a b) ) => (IS_NOT_NULL a b)	WITHOUT_CLASSIFICATION	0.9999689962550988	WITHOUT_CLASSIFICATION	3.100374490126425E-5	DESIGN
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.9999825541303863	WITHOUT_CLASSIFICATION	1.7445869613708354E-5	DESIGN
// meant to handle dynamic instantiation queries...	WITHOUT_CLASSIFICATION	0.9999992190201811	WITHOUT_CLASSIFICATION	7.809798189794176E-7	DESIGN
// --- Query translator methods ---	WITHOUT_CLASSIFICATION	0.9999966446609656	WITHOUT_CLASSIFICATION	3.3553390342646726E-6	DESIGN
// -- Implementation private methods --	WITHOUT_CLASSIFICATION	0.9999863620765382	WITHOUT_CLASSIFICATION	1.3637923461873063E-5	DESIGN
//deduplicate unique constraints sharing the same columns //this is needed by Hibernate Annotations since it creates automagically // unique constraints for the user	WITHOUT_CLASSIFICATION	0.9999646704452956	WITHOUT_CLASSIFICATION	3.5329554704453506E-5	DESIGN
// Try to find out the name of the primary key to create it as identity if the IdentityGenerator is used	WITHOUT_CLASSIFICATION	0.9998986592571142	WITHOUT_CLASSIFICATION	1.0134074288580512E-4	DESIGN
// to support dialects that have their own identity data type	WITHOUT_CLASSIFICATION	0.9999996844112982	WITHOUT_CLASSIFICATION	3.1558870178456356E-7	DESIGN
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999999907302674	WITHOUT_CLASSIFICATION	9.269732650979788E-9	DESIGN
//used also for generation of FK names!	WITHOUT_CLASSIFICATION	0.9955453344942243	WITHOUT_CLASSIFICATION	0.004454665505775688	DESIGN
//usually useless	WITHOUT_CLASSIFICATION	0.9999766207044465	WITHOUT_CLASSIFICATION	2.3379295553448652E-5	DESIGN
// added this caching as I noticed that getType() is being called multiple times...	WITHOUT_CLASSIFICATION	0.9993724387217027	WITHOUT_CLASSIFICATION	6.275612782973422E-4	DESIGN
//do not add unique constraint on DB not supporting unique and nullable columns	WITHOUT_CLASSIFICATION	0.9999999700029072	WITHOUT_CLASSIFICATION	2.999709280945245E-8	DESIGN
//for backward compatibility, disable this:	WITHOUT_CLASSIFICATION	0.9999053982580093	WITHOUT_CLASSIFICATION	9.460174199074898E-5	DESIGN
//may be final //may be final //may be final	WITHOUT_CLASSIFICATION	0.9997223475860925	WITHOUT_CLASSIFICATION	2.776524139076033E-4	DESIGN
//may be final	WITHOUT_CLASSIFICATION	0.9982317096048797	WITHOUT_CLASSIFICATION	0.0017682903951203675	DESIGN
// may be final	WITHOUT_CLASSIFICATION	0.9997198628872791	WITHOUT_CLASSIFICATION	2.801371127208742E-4	DESIGN
// Custom SQL	WITHOUT_CLASSIFICATION	0.9999989066866085	WITHOUT_CLASSIFICATION	1.0933133915876934E-6	DESIGN
//Primary key constraint	WITHOUT_CLASSIFICATION	0.999991837850886	WITHOUT_CLASSIFICATION	8.162149114059283E-6	DESIGN
// the root of the incoming property path matched one // of the embedded composite identifier properties	WITHOUT_CLASSIFICATION	0.9999991000624968	WITHOUT_CLASSIFICATION	8.999375031851221E-7	DESIGN
// ignore it...	WITHOUT_CLASSIFICATION	0.9999981912273574	WITHOUT_CLASSIFICATION	1.808772642542228E-6	DESIGN
//flat recursive algorithm	WITHOUT_CLASSIFICATION	0.9999672083288556	WITHOUT_CLASSIFICATION	3.2791671144359155E-5	DESIGN
//an identifier mapper => getKey will be included in the getNonDuplicatedPropertyIterator() //and checked later, so it needs to be excluded	WITHOUT_CLASSIFICATION	0.9999996895227116	WITHOUT_CLASSIFICATION	3.10477288414144E-7	DESIGN
//if the hibernate-mapping did not specify a schema/catalog, use the defaults //specified by properties - but note that if the schema/catalog were specified //in hibernate-mapping, or as params, they will already be initialized and //will override the values set here (they are in identifierGeneratorProperties)	WITHOUT_CLASSIFICATION	0.999999999448589	WITHOUT_CLASSIFICATION	5.514111489348859E-10	DESIGN
//pass the entity-name, if not a collection-id	WITHOUT_CLASSIFICATION	0.9999999471713226	WITHOUT_CLASSIFICATION	5.2828677313753354E-8	DESIGN
// Custom SQL	WITHOUT_CLASSIFICATION	0.9999989066866085	WITHOUT_CLASSIFICATION	1.0933133915876934E-6	DESIGN
//Primary key constraint	WITHOUT_CLASSIFICATION	0.999991837850886	WITHOUT_CLASSIFICATION	8.162149114059283E-6	DESIGN
//pass the column name (a generated id almost always has a single column)	WITHOUT_CLASSIFICATION	0.9999994620361392	WITHOUT_CLASSIFICATION	5.379638607858694E-7	DESIGN
//needed to satisfy KeyValue	WITHOUT_CLASSIFICATION	0.99993589286649	WITHOUT_CLASSIFICATION	6.410713350997283E-5	DESIGN
// empty means no scoping	WITHOUT_CLASSIFICATION	0.9994048169999918	WITHOUT_CLASSIFICATION	5.951830000081121E-4	DESIGN
// index should be last column listed	WITHOUT_CLASSIFICATION	0.9999953250176952	WITHOUT_CLASSIFICATION	4.674982304774057E-6	DESIGN
//if it is a formula index, use the element columns in the PK	WITHOUT_CLASSIFICATION	0.9999946497742439	WITHOUT_CLASSIFICATION	5.350225756133228E-6	DESIGN
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns	WITHOUT_CLASSIFICATION	0.9999602264929933	WITHOUT_CLASSIFICATION	3.977350700664877E-5	DESIGN
/*ArrayList list = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999894038819693	WITHOUT_CLASSIFICATION	1.0596118030560975E-5	DESIGN
// }	WITHOUT_CLASSIFICATION	0.999987481317891	WITHOUT_CLASSIFICATION	1.2518682109076646E-5	DESIGN
// no foreign key element of for a one-to-many	WITHOUT_CLASSIFICATION	0.9999997658514074	WITHOUT_CLASSIFICATION	2.341485927506548E-7	DESIGN
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9999889212682425	DESIGN	1.1078731757580834E-5	WITHOUT_CLASSIFICATION
// the case of a foreign key to something other than the pk is handled in createPropertyRefConstraints	WITHOUT_CLASSIFICATION	0.9999988763998957	WITHOUT_CLASSIFICATION	1.1236001042649177E-6	DESIGN
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9999889212682425	DESIGN	1.1078731757580834E-5	WITHOUT_CLASSIFICATION
// if the property mapping consists of all formulas,  // make it non-updateable	WITHOUT_CLASSIFICATION	0.9999997691136346	WITHOUT_CLASSIFICATION	2.3088636532445152E-7	DESIGN
//columnUpdateability.length==0 ||	WITHOUT_CLASSIFICATION	0.9990037554981795	WITHOUT_CLASSIFICATION	9.962445018204514E-4	DESIGN
// if the property mapping consists of all formulas,  // make it insertable	WITHOUT_CLASSIFICATION	0.999999910253898	WITHOUT_CLASSIFICATION	8.974610199411748E-8	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992683488214233	WITHOUT_CLASSIFICATION	7.316511785766001E-4	DESIGN
// expected type is intrinsic here...	WITHOUT_CLASSIFICATION	0.9999938751380983	WITHOUT_CLASSIFICATION	6.124861901666826E-6	DESIGN
//}	WITHOUT_CLASSIFICATION	0.999953971274478	WITHOUT_CLASSIFICATION	4.602872552182739E-5	DESIGN
//}	WITHOUT_CLASSIFICATION	0.999953971274478	WITHOUT_CLASSIFICATION	4.602872552182739E-5	DESIGN
//return memberPersister.getPropertyType(propertyName);	WITHOUT_CLASSIFICATION	0.9999997777517012	WITHOUT_CLASSIFICATION	2.222482987830163E-7	DESIGN
//return memberPersister.toColumns(alias, propertyName);	WITHOUT_CLASSIFICATION	0.999999701931989	WITHOUT_CLASSIFICATION	2.9806801099615606E-7	DESIGN
//return memberPersister.getType();	WITHOUT_CLASSIFICATION	0.9999994565244098	WITHOUT_CLASSIFICATION	5.434755901795073E-7	DESIGN
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9999821897134599	WITHOUT_CLASSIFICATION	1.7810286540092415E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999538292619589	WITHOUT_CLASSIFICATION	4.617073804128677E-5	DESIGN
//instanceof AssociationType;	WITHOUT_CLASSIFICATION	0.9999573184371917	WITHOUT_CLASSIFICATION	4.2681562808238334E-5	DESIGN
// we need to determine the best way to know that two joinables // represent a single many-to-many...	WITHOUT_CLASSIFICATION	0.8562677199936839	WITHOUT_CLASSIFICATION	0.14373228000631605	DESIGN
//strip leading ','	WITHOUT_CLASSIFICATION	0.9999352551477689	WITHOUT_CLASSIFICATION	6.474485223106572E-5	DESIGN
//public boolean isSubselectLoadable();	WITHOUT_CLASSIFICATION	0.9999994945102314	WITHOUT_CLASSIFICATION	5.054897685187689E-7	DESIGN
// KEY	WITHOUT_CLASSIFICATION	0.999968773998792	WITHOUT_CLASSIFICATION	3.1226001208058266E-5	DESIGN
//columns	WITHOUT_CLASSIFICATION	0.9999723337371108	WITHOUT_CLASSIFICATION	2.7666262889152768E-5	DESIGN
//SQL statements	WITHOUT_CLASSIFICATION	0.9999914893061781	WITHOUT_CLASSIFICATION	8.510693822014422E-6	DESIGN
//extra information about the element type	WITHOUT_CLASSIFICATION	0.9999999557696335	WITHOUT_CLASSIFICATION	4.4230366373437944E-8	DESIGN
//types	WITHOUT_CLASSIFICATION	0.9999257525339434	WITHOUT_CLASSIFICATION	7.42474660564883E-5	DESIGN
// custom sql	WITHOUT_CLASSIFICATION	0.9999992595505581	WITHOUT_CLASSIFICATION	7.404494419050742E-7	DESIGN
//private final String unquotedIdentifierColumnName;	WITHOUT_CLASSIFICATION	0.9999998505708271	WITHOUT_CLASSIFICATION	1.494291728563411E-7	DESIGN
// dynamic filters specifically for many-to-many inside the collection	WITHOUT_CLASSIFICATION	0.9999999849844469	WITHOUT_CLASSIFICATION	1.5015553201815036E-8	DESIGN
// dynamic filters for the collection	WITHOUT_CLASSIFICATION	0.9999998466315574	WITHOUT_CLASSIFICATION	1.5336844269153627E-7	DESIGN
// NativeSQL: collect key column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999962199351543	WITHOUT_CLASSIFICATION	3.7800648456812096E-6	DESIGN
//unquotedKeyColumnNames = StringHelper.unQuote(keyColumnAliases);	WITHOUT_CLASSIFICATION	0.999999953178648	WITHOUT_CLASSIFICATION	4.682135199765984E-8	DESIGN
//ELEMENT	WITHOUT_CLASSIFICATION	0.999788691261159	WITHOUT_CLASSIFICATION	2.1130873884093223E-4	DESIGN
// NativeSQL: collect element column and auto-aliases	WITHOUT_CLASSIFICATION	0.99999171237574	WITHOUT_CLASSIFICATION	8.287624259863522E-6	DESIGN
// INDEX AND ROW SELECT	WITHOUT_CLASSIFICATION	0.9999856689094959	WITHOUT_CLASSIFICATION	1.4331090504071015E-5	DESIGN
// NativeSQL: collect index column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999986165401781	WITHOUT_CLASSIFICATION	1.3834598219658624E-6	DESIGN
//unquotedIdentifierColumnName = identifierColumnAlias;	WITHOUT_CLASSIFICATION	0.9999998897873268	WITHOUT_CLASSIFICATION	1.1021267313891674E-7	DESIGN
//unquotedIdentifierColumnName = null;	WITHOUT_CLASSIFICATION	0.999999883996098	WITHOUT_CLASSIFICATION	1.1600390196359852E-7	DESIGN
//GENERATE THE SQL:	WITHOUT_CLASSIFICATION	0.99991978530712	WITHOUT_CLASSIFICATION	8.021469287996928E-5	DESIGN
// for non-arrays, we don't need to know the element class //elementType.returnedClass();	WITHOUT_CLASSIFICATION	0.9999964764527479	WITHOUT_CLASSIFICATION	3.5235472520465924E-6	DESIGN
//not all classpersisters implement PropertyMapping!	WITHOUT_CLASSIFICATION	0.9999704277740575	WITHOUT_CLASSIFICATION	2.9572225942379007E-5	DESIGN
// Handle any filters applied to this collection	WITHOUT_CLASSIFICATION	0.9963744678432946	WITHOUT_CLASSIFICATION	0.0036255321567053816	DESIGN
// Handle any filters applied to this collection for many-to-many	WITHOUT_CLASSIFICATION	0.9985702262317547	WITHOUT_CLASSIFICATION	0.0014297737682451798	DESIGN
//if there is a user-specified loader, return that //TODO: filters!?	WITHOUT_CLASSIFICATION	0.9998708595897663	DESIGN	1.291404102337025E-4	WITHOUT_CLASSIFICATION
// Take care of any entities that might have // been evicted!	WITHOUT_CLASSIFICATION	0.9999180107659199	WITHOUT_CLASSIFICATION	8.198923408012344E-5	DESIGN
//strip leading ','	WITHOUT_CLASSIFICATION	0.9999352551477689	WITHOUT_CLASSIFICATION	6.474485223106572E-5	DESIGN
// Run a subquery loader	WITHOUT_CLASSIFICATION	0.9999909663200355	WITHOUT_CLASSIFICATION	9.033679964390645E-6	DESIGN
//needed by arrays	WITHOUT_CLASSIFICATION	0.999996092655311	WITHOUT_CLASSIFICATION	3.90734468895067E-6	DESIGN
//TODO: something with formulas...	WITHOUT_CLASSIFICATION	0.9999056916112434	DESIGN	9.430838875650204E-5	WITHOUT_CLASSIFICATION
//an assertion	WITHOUT_CLASSIFICATION	0.9999996536034065	WITHOUT_CLASSIFICATION	3.4639659347203945E-7	DESIGN
// Remove all the old entries	WITHOUT_CLASSIFICATION	0.9999908376727213	WITHOUT_CLASSIFICATION	9.162327278619981E-6	DESIGN
//create all the new entries	WITHOUT_CLASSIFICATION	0.9999993158769543	WITHOUT_CLASSIFICATION	6.841230455575613E-7	DESIGN
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9999821897134599	WITHOUT_CLASSIFICATION	1.7810286540092415E-5	DESIGN
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9999821897134599	WITHOUT_CLASSIFICATION	1.7810286540092415E-5	DESIGN
//delete all the deleted entries	WITHOUT_CLASSIFICATION	0.9999992001040722	WITHOUT_CLASSIFICATION	7.998959278036245E-7	DESIGN
//insert all the new entries	WITHOUT_CLASSIFICATION	0.999999185026569	WITHOUT_CLASSIFICATION	8.149734309838887E-7	DESIGN
//==elementType ??	WITHOUT_CLASSIFICATION	0.9994854839201675	WITHOUT_CLASSIFICATION	5.145160798325693E-4	DESIGN
//update all the modified entries	WITHOUT_CLASSIFICATION	0.999998686132432	WITHOUT_CLASSIFICATION	1.3138675679803526E-6	DESIGN
//identifier collections not supported for 1-to-many	WITHOUT_CLASSIFICATION	0.999999453796614	WITHOUT_CLASSIFICATION	5.462033859747946E-7	DESIGN
// update removed rows fks to null	WITHOUT_CLASSIFICATION	0.9983946611946695	WITHOUT_CLASSIFICATION	0.0016053388053305828	DESIGN
// will still be issued when it used to be null	WITHOUT_CLASSIFICATION	0.9938205759133398	WITHOUT_CLASSIFICATION	0.006179424086660168	DESIGN
// now update all changed or added rows fks	WITHOUT_CLASSIFICATION	0.9999988972399092	WITHOUT_CLASSIFICATION	1.1027600908207355E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999538292619589	WITHOUT_CLASSIFICATION	4.617073804128677E-5	DESIGN
//use suffix for the entity columns	WITHOUT_CLASSIFICATION	0.9998986204021932	WITHOUT_CLASSIFICATION	1.0137959780669261E-4	DESIGN
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9996519961382668	WITHOUT_CLASSIFICATION	3.480038617332543E-4	DESIGN
//private final String rootTableName;	WITHOUT_CLASSIFICATION	0.9999997846145655	WITHOUT_CLASSIFICATION	2.153854343505446E-7	DESIGN
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9999392698370867	WITHOUT_CLASSIFICATION	6.073016291320075E-5	DESIGN
//Custom SQL	WITHOUT_CLASSIFICATION	0.9999914060253536	WITHOUT_CLASSIFICATION	8.593974646435057E-6	DESIGN
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9996519961382668	WITHOUT_CLASSIFICATION	3.480038617332543E-4	DESIGN
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999987325869742	WITHOUT_CLASSIFICATION	1.2674130257011824E-6	DESIGN
// This could also just be true all the time...	WITHOUT_CLASSIFICATION	0.9972330984109163	WITHOUT_CLASSIFICATION	0.0027669015890836954	DESIGN
//chop the last union (all)	WITHOUT_CLASSIFICATION	0.9999954361050392	WITHOUT_CLASSIFICATION	4.56389496081429E-6	DESIGN
//TODO: check this....	WITHOUT_CLASSIFICATION	0.9999964222872436	DESIGN	3.5777127563212162E-6	WITHOUT_CLASSIFICATION
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9999392698370867	WITHOUT_CLASSIFICATION	6.073016291320075E-5	DESIGN
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9999082937388832	WITHOUT_CLASSIFICATION	9.170626111684427E-5	DESIGN
// the closure of all properties in the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.999999115299667	WITHOUT_CLASSIFICATION	8.847003330058479E-7	DESIGN
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999988937624187	WITHOUT_CLASSIFICATION	1.1062375813366443E-6	DESIGN
// subclass discrimination works by assigning particular // values to certain combinations of null primary key // values in the outer join using an SQL CASE	WITHOUT_CLASSIFICATION	0.9999997496176039	WITHOUT_CLASSIFICATION	2.503823962002235E-7	DESIGN
//MULTITABLES	WITHOUT_CLASSIFICATION	0.9997029474903464	WITHOUT_CLASSIFICATION	2.97052509653622E-4	DESIGN
// Custom sql	WITHOUT_CLASSIFICATION	0.9999991718602759	WITHOUT_CLASSIFICATION	8.281397241198623E-7	DESIGN
// subclass closure properties	WITHOUT_CLASSIFICATION	0.9999852300095404	WITHOUT_CLASSIFICATION	1.4769990459592378E-5	DESIGN
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.999935450066091	WITHOUT_CLASSIFICATION	6.45499339091059E-5	DESIGN
//( (Column) model.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999960851627026	WITHOUT_CLASSIFICATION	3.9148372974302075E-6	DESIGN
//( (Column) sc.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999989516384441	WITHOUT_CLASSIFICATION	1.0483615558967718E-6	DESIGN
// don't need subclass tables, because they can't appear in conditions	WITHOUT_CLASSIFICATION	0.9998890182869412	WITHOUT_CLASSIFICATION	1.1098171305878982E-4	DESIGN
// special case where we need to force incloude all subclass joins	WITHOUT_CLASSIFICATION	0.9999709078744039	WITHOUT_CLASSIFICATION	2.9092125596184777E-5	DESIGN
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9996519961382668	WITHOUT_CLASSIFICATION	3.480038617332543E-4	DESIGN
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9999082937388832	WITHOUT_CLASSIFICATION	9.170626111684427E-5	DESIGN
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999988937624187	WITHOUT_CLASSIFICATION	1.1062375813366443E-6	DESIGN
//get em on the second pass!	WITHOUT_CLASSIFICATION	0.999971409519779	WITHOUT_CLASSIFICATION	2.8590480220963908E-5	DESIGN
// now look up the object we are really interested in! // (this lets us correctly handle proxies and multi-row // or multi-column queries)	WITHOUT_CLASSIFICATION	0.9969345524135514	WITHOUT_CLASSIFICATION	0.00306544758644852	DESIGN
// discriminator column	WITHOUT_CLASSIFICATION	0.9999859874893101	WITHOUT_CLASSIFICATION	1.4012510689849425E-5	DESIGN
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9999392698370867	WITHOUT_CLASSIFICATION	6.073016291320075E-5	DESIGN
//private final Map propertyTableNumbersByName = new HashMap();	WITHOUT_CLASSIFICATION	0.9999998749253637	WITHOUT_CLASSIFICATION	1.2507463637757304E-7	DESIGN
// CLASS + TABLE	WITHOUT_CLASSIFICATION	0.9999747897179176	WITHOUT_CLASSIFICATION	2.5210282082387363E-5	DESIGN
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999851373989568	WITHOUT_CLASSIFICATION	1.4862601043209079E-5	DESIGN
// PROPERTIES	WITHOUT_CLASSIFICATION	0.999944418026813	WITHOUT_CLASSIFICATION	5.558197318706873E-5	DESIGN
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.999935450066091	WITHOUT_CLASSIFICATION	6.45499339091059E-5	DESIGN
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999987325869742	WITHOUT_CLASSIFICATION	1.2674130257011824E-6	DESIGN
// JOINS	WITHOUT_CLASSIFICATION	0.9999969737857745	WITHOUT_CLASSIFICATION	3.0262142255099847E-6	DESIGN
//propertyTableNumbersByName.put( prop.getName(), join );	WITHOUT_CLASSIFICATION	0.9999995461318869	WITHOUT_CLASSIFICATION	4.5386811306565295E-7	DESIGN
//Access cached SQL	WITHOUT_CLASSIFICATION	0.9999594904977707	WITHOUT_CLASSIFICATION	4.050950222936843E-5	DESIGN
//figure out which tables need to be fetched	WITHOUT_CLASSIFICATION	0.9999563892521923	WITHOUT_CLASSIFICATION	4.361074780769076E-5	DESIGN
//figure out which columns are needed	WITHOUT_CLASSIFICATION	0.9999453149058284	WITHOUT_CLASSIFICATION	5.46850941715236E-5	DESIGN
//figure out which formulas are needed	WITHOUT_CLASSIFICATION	0.9999989182326591	WITHOUT_CLASSIFICATION	1.0817673409295205E-6	DESIGN
//render the SQL	WITHOUT_CLASSIFICATION	0.9999158869478422	WITHOUT_CLASSIFICATION	8.411305215779176E-5	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992683488214233	WITHOUT_CLASSIFICATION	7.316511785766001E-4	DESIGN
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994851511526724	WITHOUT_CLASSIFICATION	5.148488473276481E-4	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999894766461872	WITHOUT_CLASSIFICATION	1.0523353812698034E-5	DESIGN
// The optional SQL string defined in the where attribute	WITHOUT_CLASSIFICATION	0.9999982501600237	WITHOUT_CLASSIFICATION	1.7498399762553278E-6	DESIGN
//information about lazy properties of this class	WITHOUT_CLASSIFICATION	0.9999865954571686	WITHOUT_CLASSIFICATION	1.3404542831293276E-5	DESIGN
//information about all properties in class hierarchy	WITHOUT_CLASSIFICATION	0.9999997361317459	WITHOUT_CLASSIFICATION	2.6386825408001546E-7	DESIGN
//information about all columns/formulas in class hierarchy	WITHOUT_CLASSIFICATION	0.9999996592365842	WITHOUT_CLASSIFICATION	3.4076341582390534E-7	DESIGN
// dynamic filters attached to the class-level	WITHOUT_CLASSIFICATION	0.9999907931982942	WITHOUT_CLASSIFICATION	9.206801705806841E-6	DESIGN
// SQL strings	WITHOUT_CLASSIFICATION	0.9999772077204685	WITHOUT_CLASSIFICATION	2.2792279531508256E-5	DESIGN
// for objects that came in via update()	WITHOUT_CLASSIFICATION	0.9999967873881378	WITHOUT_CLASSIFICATION	3.2126118622749727E-6	DESIGN
// PROPERTIES	WITHOUT_CLASSIFICATION	0.999944418026813	WITHOUT_CLASSIFICATION	5.558197318706873E-5	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999894766461872	WITHOUT_CLASSIFICATION	1.0523353812698034E-5	DESIGN
// IDENTIFIER	WITHOUT_CLASSIFICATION	0.9999946154553221	WITHOUT_CLASSIFICATION	5.384544677957457E-6	DESIGN
// VERSION	WITHOUT_CLASSIFICATION	0.9999973025345027	WITHOUT_CLASSIFICATION	2.6974654972331095E-6	DESIGN
//WHERE STRING	WITHOUT_CLASSIFICATION	0.9998843397281009	WITHOUT_CLASSIFICATION	1.1566027189911066E-4	DESIGN
// SUBCLASS PROPERTY CLOSURE	WITHOUT_CLASSIFICATION	0.9997235089608768	WITHOUT_CLASSIFICATION	2.764910391232272E-4	DESIGN
//before add :-)	WITHOUT_CLASSIFICATION	0.99967882765336	WITHOUT_CLASSIFICATION	3.211723466399189E-4	DESIGN
// Handle any filters applied to the class level	WITHOUT_CLASSIFICATION	0.9997452802614097	WITHOUT_CLASSIFICATION	2.547197385902268E-4	DESIGN
// only one-to-one is lazy fetched	WITHOUT_CLASSIFICATION	0.9999975540564551	WITHOUT_CLASSIFICATION	2.445943544926149E-6	DESIGN
//note early exit here:	WITHOUT_CLASSIFICATION	0.9998585567338715	WITHOUT_CLASSIFICATION	1.4144326612846054E-4	DESIGN
// object have been loaded with setReadOnly(true); HHH-2236	WITHOUT_CLASSIFICATION	0.9999994023040972	WITHOUT_CLASSIFICATION	5.976959027268513E-7	DESIGN
// NOTE: this assumes something about how propertySelectFragment is implemented by the subclass!	WITHOUT_CLASSIFICATION	0.9661701904036776	WITHOUT_CLASSIFICATION	0.03382980959632244	DESIGN
//strip leading ", "	WITHOUT_CLASSIFICATION	0.9999844072499535	WITHOUT_CLASSIFICATION	1.5592750046494303E-5	DESIGN
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999786717711702	WITHOUT_CLASSIFICATION	2.1328228829825917E-5	DESIGN
//otherwise return the "hydrated" state (ie. associations are not resolved)	WITHOUT_CLASSIFICATION	0.9999687239064338	WITHOUT_CLASSIFICATION	3.1276093566230186E-5	DESIGN
//null owner ok??	WITHOUT_CLASSIFICATION	0.9999153159982643	WITHOUT_CLASSIFICATION	8.468400173563737E-5	DESIGN
// null sql means that the only lazy properties // are shared PK one-to-one associations which are // handled differently in the Type#nullSafeGet code...	WITHOUT_CLASSIFICATION	0.9999933388398781	WITHOUT_CLASSIFICATION	6.661160121955583E-6	DESIGN
// Create a new FROM node for the referenced class.	WITHOUT_CLASSIFICATION	0.999998972300064	WITHOUT_CLASSIFICATION	1.027699936019938E-6	DESIGN
// the difficulty here is exactly what do we update in order to // force the version to be incremented in the db...	WITHOUT_CLASSIFICATION	0.6889116085525397	WITHOUT_CLASSIFICATION	0.31108839144746026	DESIGN
// performance op to avoid the array search	WITHOUT_CLASSIFICATION	0.999999740824235	WITHOUT_CLASSIFICATION	2.591757649294617E-7	DESIGN
// properly handle property-ref-based associations	WITHOUT_CLASSIFICATION	0.9998688152377022	WITHOUT_CLASSIFICATION	1.311847622976891E-4	DESIGN
//Enable for HHH-440, which we don't like:	WITHOUT_CLASSIFICATION	0.9999559739756853	WITHOUT_CLASSIFICATION	4.402602431480344E-5	DESIGN
// ALIASES	WITHOUT_CLASSIFICATION	0.999992763504832	WITHOUT_CLASSIFICATION	7.236495167987215E-6	DESIGN
// aliases named identifier ( alias.idname )	WITHOUT_CLASSIFICATION	0.9999976808668596	WITHOUT_CLASSIFICATION	2.3191331404340183E-6	DESIGN
// aliases for composite-id's	WITHOUT_CLASSIFICATION	0.9999999378765014	WITHOUT_CLASSIFICATION	6.212349847581847E-8	DESIGN
// Fetch embedded identifiers propertynames from the "virtual" identifier component	WITHOUT_CLASSIFICATION	0.9999999957734138	WITHOUT_CLASSIFICATION	4.226586218030803E-9	DESIGN
// embedded composite ids ( alias.idname1, alias.idname2 )	WITHOUT_CLASSIFICATION	0.999999977348249	WITHOUT_CLASSIFICATION	2.265175104538816E-8	DESIGN
// TODO: skip formulas?	WITHOUT_CLASSIFICATION	0.9998777079192329	DESIGN	1.222920807670768E-4	WITHOUT_CLASSIFICATION
//don't need filters for the static loaders	WITHOUT_CLASSIFICATION	0.9999925766438279	WITHOUT_CLASSIFICATION	7.423356172010221E-6	DESIGN
//do two passes, for collection property-ref!	WITHOUT_CLASSIFICATION	0.9999921276488664	WITHOUT_CLASSIFICATION	7.872351133595482E-6	DESIGN
// select the correct row by either pk or rowid	WITHOUT_CLASSIFICATION	0.9999873270937384	WITHOUT_CLASSIFICATION	1.2672906261651703E-5	DESIGN
//TODO: eventually, rowIdName[j]	WITHOUT_CLASSIFICATION	0.9803302349243554	DESIGN	0.019669765075644524	WITHOUT_CLASSIFICATION
// this is a property of the table, which we are updating	WITHOUT_CLASSIFICATION	0.982932810771873	WITHOUT_CLASSIFICATION	0.017067189228126934	DESIGN
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9999955343817195	WITHOUT_CLASSIFICATION	4.465618280519705E-6	DESIGN
// we are using "all" or "dirty" property-based optimistic locking	WITHOUT_CLASSIFICATION	0.9998728825693176	WITHOUT_CLASSIFICATION	1.271174306823585E-4	DESIGN
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9351094712989391	WITHOUT_CLASSIFICATION	0.06489052870106099	DESIGN
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999942518233574	WITHOUT_CLASSIFICATION	5.748176642503372E-6	DESIGN
// add normal properties	WITHOUT_CLASSIFICATION	0.9999996235855275	WITHOUT_CLASSIFICATION	3.764144723606537E-7	DESIGN
// add the discriminator	WITHOUT_CLASSIFICATION	0.9999910931802569	WITHOUT_CLASSIFICATION	8.906819743125103E-6	DESIGN
// more specifically : "? [op] datetime" //      1) if the operator is MINUS, the param needs to be of //          some datetime type //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.9950824550085844	WITHOUT_CLASSIFICATION	0.004917544991415618	DESIGN
// add normal properties	WITHOUT_CLASSIFICATION	0.9999996235855275	WITHOUT_CLASSIFICATION	3.764144723606537E-7	DESIGN
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999942518233574	WITHOUT_CLASSIFICATION	5.748176642503372E-6	DESIGN
// add the discriminator	WITHOUT_CLASSIFICATION	0.9999910931802569	WITHOUT_CLASSIFICATION	8.906819743125103E-6	DESIGN
// add the primary key	WITHOUT_CLASSIFICATION	0.9999686764479253	WITHOUT_CLASSIFICATION	3.1323552074661734E-5	DESIGN
// delegate already handles PK columns	WITHOUT_CLASSIFICATION	0.9999989046219789	WITHOUT_CLASSIFICATION	1.0953780210196596E-6	DESIGN
// we can't batch joined inserts, *especially* not if it is an identity insert; // nor can we batch statements where the expectation is based on an output param	WITHOUT_CLASSIFICATION	0.9999974043496082	WITHOUT_CLASSIFICATION	2.595650391791732E-6	DESIGN
// Render the SQL query	WITHOUT_CLASSIFICATION	0.9999350430423906	WITHOUT_CLASSIFICATION	6.495695760943365E-5	DESIGN
// Write the values of fields onto the prepared statement - we MUST use the state at the time the // insert was issued (cos of foreign key constraints). Not necessarily the object's current state	WITHOUT_CLASSIFICATION	0.9999844658627846	WITHOUT_CLASSIFICATION	1.5534137215486675E-5	DESIGN
// TODO : shouldnt inserts be Expectations.NONE?	WITHOUT_CLASSIFICATION	0.9983647157799886	DESIGN	0.001635284220011313	WITHOUT_CLASSIFICATION
//don't bother trying to update, we know there is no row there yet	WITHOUT_CLASSIFICATION	0.9767708302844172	WITHOUT_CLASSIFICATION	0.023229169715582733	DESIGN
//if all fields are null, we might need to delete existing row	WITHOUT_CLASSIFICATION	0.9999925970239529	WITHOUT_CLASSIFICATION	7.4029760470112885E-6	DESIGN
//there is probably a row there, so try to update //if no rows were updated, we will find out	WITHOUT_CLASSIFICATION	0.9864236081746948	WITHOUT_CLASSIFICATION	0.013576391825305213	DESIGN
//note: updates to joined tables can't be batched...	WITHOUT_CLASSIFICATION	0.999964506905571	WITHOUT_CLASSIFICATION	3.549309442896597E-5	DESIGN
// starting index	WITHOUT_CLASSIFICATION	0.9999723125167492	WITHOUT_CLASSIFICATION	2.768748325070687E-5	DESIGN
//Now write the values of fields onto the prepared statement	WITHOUT_CLASSIFICATION	0.9990125462665291	WITHOUT_CLASSIFICATION	9.874537334707816E-4	DESIGN
// Write any appropriate versioning conditional parameters	WITHOUT_CLASSIFICATION	0.9999998247118465	WITHOUT_CLASSIFICATION	1.7528815360228868E-7	DESIGN
//Render the SQL query	WITHOUT_CLASSIFICATION	0.9999009315877035	WITHOUT_CLASSIFICATION	9.906841229647216E-5	DESIGN
// Do the key. The key is immutable so we can use the _current_ object state - not necessarily // the state at the time the delete was issued	WITHOUT_CLASSIFICATION	0.9999909482203923	WITHOUT_CLASSIFICATION	9.051779607805933E-6	DESIGN
// We should use the _current_ object state (ie. after any updates that occurred during flush)	WITHOUT_CLASSIFICATION	0.9999831030495226	WITHOUT_CLASSIFICATION	1.6896950477412202E-5	DESIGN
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999378953207783	WITHOUT_CLASSIFICATION	6.210467922173849E-5	DESIGN
//note: dirtyFields==null means we had no snapshot, and we couldn't get one using select-before-update //	WITHOUT_CLASSIFICATION	0.9979578115794636	WITHOUT_CLASSIFICATION	0.002042188420536379	DESIGN
// more specifically : "datetime [op] ?" //      1) if the operator is MINUS, we really cannot determine //          the expected type as either another datetime or //          numeric would be valid //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.910610680750901	WITHOUT_CLASSIFICATION	0.0893893192490989	DESIGN
// For the case of dynamic-update="true", we need to generate the UPDATE SQL	WITHOUT_CLASSIFICATION	0.9999901127144853	WITHOUT_CLASSIFICATION	9.887285514686948E-6	DESIGN
// don't need to check laziness (dirty checking algorithm handles that)	WITHOUT_CLASSIFICATION	0.9964564320457875	WITHOUT_CLASSIFICATION	0.003543567954212485	DESIGN
// For the case of dynamic-update="false", or no snapshot, we use the static SQL	WITHOUT_CLASSIFICATION	0.9999996811342279	WITHOUT_CLASSIFICATION	3.1886577208653634E-7	DESIGN
// if not "get", then try "is"	WITHOUT_CLASSIFICATION	0.9999946084706934	WITHOUT_CLASSIFICATION	5.391529306471265E-6	DESIGN
// Now update only the tables with dirty properties (and the table with the version number)	WITHOUT_CLASSIFICATION	0.9999998720774431	WITHOUT_CLASSIFICATION	1.2792255687109303E-7	DESIGN
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999998395779306	WITHOUT_CLASSIFICATION	1.6042206949362692E-7	DESIGN
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999998395779306	WITHOUT_CLASSIFICATION	1.6042206949362692E-7	DESIGN
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999999305166742	WITHOUT_CLASSIFICATION	6.948332564707719E-8	DESIGN
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999999305166742	WITHOUT_CLASSIFICATION	6.948332564707719E-8	DESIGN
// not supported	WITHOUT_CLASSIFICATION	0.9998092480473815	WITHOUT_CLASSIFICATION	1.907519526184876E-4	DESIGN
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999378953207783	WITHOUT_CLASSIFICATION	6.210467922173849E-5	DESIGN
// we need to utilize dynamic delete statements	WITHOUT_CLASSIFICATION	0.9998747631815182	WITHOUT_CLASSIFICATION	1.2523681848171822E-4	DESIGN
// otherwise, utilize the static delete statements	WITHOUT_CLASSIFICATION	0.9999996988496818	WITHOUT_CLASSIFICATION	3.011503182680215E-7	DESIGN
//just a performance opt!	WITHOUT_CLASSIFICATION	0.9999881355799288	WITHOUT_CLASSIFICATION	1.1864420071155852E-5	DESIGN
//just a performance opt!	WITHOUT_CLASSIFICATION	0.9999881355799288	WITHOUT_CLASSIFICATION	1.1864420071155852E-5	DESIGN
//all joins join to the pk of the driving table	WITHOUT_CLASSIFICATION	0.9999993690199233	WITHOUT_CLASSIFICATION	6.309800766920759E-7	DESIGN
//notice that we skip the first table; it is the driving table!	WITHOUT_CLASSIFICATION	0.9999938876337959	WITHOUT_CLASSIFICATION	6.112366204071371E-6	DESIGN
//we can inner join to superclass tables (the row MUST be there) //we can never inner join to subclass tables	WITHOUT_CLASSIFICATION	0.9997358963385102	WITHOUT_CLASSIFICATION	2.6410366148967127E-4	DESIGN
//skip the driving table	WITHOUT_CLASSIFICATION	0.999998678465758	WITHOUT_CLASSIFICATION	1.3215342419724669E-6	DESIGN
//get 'em in the right order (not that it really matters)	WITHOUT_CLASSIFICATION	0.9611727579089445	WITHOUT_CLASSIFICATION	0.03882724209105547	DESIGN
// here, we work under the following assumptions: //      ------------ valid cases -------------------------------------- //      1) datetime + {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      2) datetime - datetime : always results in a DOUBLE //      3) datetime - {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      ------------ invalid cases ------------------------------------ //      4) datetime + datetime //      5) {something other than datetime} - datetime //      6) datetime * {any type} //      7) datetime / {any type} //      8) {any type} / datetime // doing so allows us to properly handle parameters as either the left // or right side here in the majority of cases	WITHOUT_CLASSIFICATION	0.9999799393424453	WITHOUT_CLASSIFICATION	2.0060657554739738E-5	DESIGN
//render the where and from parts	WITHOUT_CLASSIFICATION	0.9995771904686055	WITHOUT_CLASSIFICATION	4.228095313944923E-4	DESIGN
//we *could* regerate this inside each called method!	WITHOUT_CLASSIFICATION	0.9009198716599585	WITHOUT_CLASSIFICATION	0.09908012834004155	DESIGN
//now render the joins	WITHOUT_CLASSIFICATION	0.9986930475555976	WITHOUT_CLASSIFICATION	0.001306952444402415	DESIGN
// This will add the new from element to the origin.	WITHOUT_CLASSIFICATION	0.9997926546202098	WITHOUT_CLASSIFICATION	2.0734537979005759E-4	DESIGN
//now render the select clause	WITHOUT_CLASSIFICATION	0.999788764651517	WITHOUT_CLASSIFICATION	2.1123534848301192E-4	DESIGN
//now tie it all together	WITHOUT_CLASSIFICATION	0.9999976375094354	WITHOUT_CLASSIFICATION	2.362490564608639E-6	DESIGN
//insert/update/delete SQL	WITHOUT_CLASSIFICATION	0.9999931824889409	WITHOUT_CLASSIFICATION	6.8175110592001614E-6	DESIGN
//select SQL	WITHOUT_CLASSIFICATION	0.9999943484506175	WITHOUT_CLASSIFICATION	5.6515493824449725E-6	DESIGN
//no need to check laziness, dirty checking handles that	WITHOUT_CLASSIFICATION	0.9981930139980002	WITHOUT_CLASSIFICATION	0.0018069860019997387	DESIGN
// Fully resolve the map reference, create implicit joins.	WITHOUT_CLASSIFICATION	0.9963677411422168	WITHOUT_CLASSIFICATION	0.0036322588577831615	DESIGN
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999678568905912	WITHOUT_CLASSIFICATION	3.214310940877471E-5	DESIGN
// The basic implementation is to simply use the node's text	WITHOUT_CLASSIFICATION	0.9999739343922331	WITHOUT_CLASSIFICATION	2.6065607766799865E-5	DESIGN
// for dialects which are known to not support ANSI-SQL row-value-constructor syntax, // we should mutate the tree.	WITHOUT_CLASSIFICATION	0.9996368394831665	WITHOUT_CLASSIFICATION	3.6316051683341305E-4	DESIGN
// Due to the complexity in initializing the SelectClause, do not generate one here. // If it is not found; simply return null... // // Also, do not cache since it gets generated well after we are created.	WITHOUT_CLASSIFICATION	0.9999696895840556	WITHOUT_CLASSIFICATION	3.0310415944272494E-5	DESIGN
// check the version unsaved-value, if appropriate	WITHOUT_CLASSIFICATION	0.9999999917063601	WITHOUT_CLASSIFICATION	8.293639938591297E-9	DESIGN
// let this take precedence if defined, since it works for // assigned identifiers	WITHOUT_CLASSIFICATION	0.9999999990751907	WITHOUT_CLASSIFICATION	9.248092830345213E-10	DESIGN
// check the id unsaved-value	WITHOUT_CLASSIFICATION	0.9999903192206369	WITHOUT_CLASSIFICATION	9.680779363065568E-6	DESIGN
// check to see if it is in the second-level cache	WITHOUT_CLASSIFICATION	0.9999985569245026	WITHOUT_CLASSIFICATION	1.443075497514367E-6	DESIGN
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9999860785196982	WITHOUT_CLASSIFICATION	1.392148030177787E-5	DESIGN
// For property references generate <tablealias>.<columnname> as <projectionalias>	WITHOUT_CLASSIFICATION	0.9999997632650857	WITHOUT_CLASSIFICATION	2.3673491436903678E-7	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999894766461872	WITHOUT_CLASSIFICATION	1.0523353812698034E-5	DESIGN
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999786717711702	WITHOUT_CLASSIFICATION	2.1328228829825917E-5	DESIGN
//force immediate execution of the insert	WITHOUT_CLASSIFICATION	0.9999997968284724	WITHOUT_CLASSIFICATION	2.0317152751816319E-7	DESIGN
// If this from element is a collection and the path is a collection property (maxIndex, etc.) then // generate a sub-query.	WITHOUT_CLASSIFICATION	0.999999789431292	WITHOUT_CLASSIFICATION	2.1056870797207834E-7	DESIGN
// entities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999893291230615	WITHOUT_CLASSIFICATION	1.0670876938520773E-5	DESIGN
// collections ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999270371096	WITHOUT_CLASSIFICATION	7.296289039410465E-8	DESIGN
//cannot occur	WITHOUT_CLASSIFICATION	0.999892842102363	WITHOUT_CLASSIFICATION	1.0715789763701675E-4	DESIGN
//cannot occur	WITHOUT_CLASSIFICATION	0.999892842102363	WITHOUT_CLASSIFICATION	1.0715789763701675E-4	DESIGN
// only carry on if the method has no parameters	WITHOUT_CLASSIFICATION	0.9999999494152387	WITHOUT_CLASSIFICATION	5.05847612202307E-8	DESIGN
// try "get"	WITHOUT_CLASSIFICATION	0.999996624466606	WITHOUT_CLASSIFICATION	3.3755333941085247E-6	DESIGN
// do nothing...	WITHOUT_CLASSIFICATION	0.997868191030855	WITHOUT_CLASSIFICATION	0.0021318089691449806	DESIGN
// do nothing...	WITHOUT_CLASSIFICATION	0.997868191030855	WITHOUT_CLASSIFICATION	0.0021318089691449806	DESIGN
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9996240736182824	WITHOUT_CLASSIFICATION	3.759263817176604E-4	DESIGN
// this page intentionally left blank :)	WITHOUT_CLASSIFICATION	0.9998614373884348	WITHOUT_CLASSIFICATION	1.385626115652418E-4	DESIGN
// do not do anything	WITHOUT_CLASSIFICATION	0.9998297609361122	WITHOUT_CLASSIFICATION	1.7023906388769565E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999538292619589	WITHOUT_CLASSIFICATION	4.617073804128677E-5	DESIGN
// ignore	WITHOUT_CLASSIFICATION	0.9999978563314406	WITHOUT_CLASSIFICATION	2.1436685594845756E-6	DESIGN
//cant instantiate	WITHOUT_CLASSIFICATION	0.9999247201809338	WITHOUT_CLASSIFICATION	7.527981906625867E-5	DESIGN
//if it is a property of an embedded component, invoke on the "identifier"	WITHOUT_CLASSIFICATION	0.9999476832893684	WITHOUT_CLASSIFICATION	5.231671063152117E-5	DESIGN
// otherwise:	WITHOUT_CLASSIFICATION	0.9999935639313725	WITHOUT_CLASSIFICATION	6.436068627449757E-6	DESIGN
// skip finalize methods	WITHOUT_CLASSIFICATION	0.9997308106404063	WITHOUT_CLASSIFICATION	2.691893595937074E-4	DESIGN
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9532465983816402	WITHOUT_CLASSIFICATION	0.04675340161835976	DESIGN
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9532465983816402	WITHOUT_CLASSIFICATION	0.04675340161835976	DESIGN
// HHH-2481 make sure the callback gets cleared, otherwise the instance stays in a static thread local.	WITHOUT_CLASSIFICATION	0.9999349686621594	WITHOUT_CLASSIFICATION	6.50313378407421E-5	DESIGN
// while constructor is running	WITHOUT_CLASSIFICATION	0.9982554575366034	WITHOUT_CLASSIFICATION	0.0017445424633966754	DESIGN
// while constructor is running	WITHOUT_CLASSIFICATION	0.9982554575366034	WITHOUT_CLASSIFICATION	0.0017445424633966754	DESIGN
// note: interface is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9950989027876238	WITHOUT_CLASSIFICATION	0.004901097212376204	DESIGN
// interfaces // arguments	WITHOUT_CLASSIFICATION	0.9998856076593271	WITHOUT_CLASSIFICATION	1.143923406728862E-4	DESIGN
//TODO!	WITHOUT_CLASSIFICATION	0.9242651749244375	DESIGN	0.07573482507556248	WITHOUT_CLASSIFICATION
// Get the caller	WITHOUT_CLASSIFICATION	0.9999969262305342	WITHOUT_CLASSIFICATION	3.0737694657612346E-6	DESIGN
// Get the caller principals	WITHOUT_CLASSIFICATION	0.9999979126389777	WITHOUT_CLASSIFICATION	2.0873610222837065E-6	DESIGN
//private static final Alias DEFAULT_ALIAS = new Alias(10, null);	WITHOUT_CLASSIFICATION	0.9999999917202052	WITHOUT_CLASSIFICATION	8.27979476581092E-9	DESIGN
// Needed to bump this up to DotNode, because that is the only thing which currently // knows about the property-ref path in the correct format; it is either this, or // recurse over the DotNodes constructing the property path just like DotNode does // internally	WITHOUT_CLASSIFICATION	0.9999967332133158	WITHOUT_CLASSIFICATION	3.2667866842051367E-6	DESIGN
//if the identifier is quoted, remove the quotes	WITHOUT_CLASSIFICATION	0.9999961188352763	WITHOUT_CLASSIFICATION	3.881164723685182E-6	DESIGN
//truncate the identifier to the max alias length, less the suffix length	WITHOUT_CLASSIFICATION	0.9999998502106371	WITHOUT_CLASSIFICATION	1.497893629578789E-7	DESIGN
//full joins are not supported.. yet!	WITHOUT_CLASSIFICATION	0.9998181945281372	WITHOUT_CLASSIFICATION	1.8180547186279086E-4	DESIGN
// null is not considered the same type as Integer. //$NON-NLS-1 //$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999999958032882	WITHOUT_CLASSIFICATION	4.1967118055756906E-9	DESIGN
// the outerJoinsAfterWhere needs to come before where clause to properly // handle dynamic filters	WITHOUT_CLASSIFICATION	0.9980688406773955	WITHOUT_CLASSIFICATION	0.0019311593226044041	DESIGN
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999754925790446	WITHOUT_CLASSIFICATION	2.4507420955422814E-5	DESIGN
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999754925790446	WITHOUT_CLASSIFICATION	2.4507420955422814E-5	DESIGN
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999754925790446	WITHOUT_CLASSIFICATION	2.4507420955422814E-5	DESIGN
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999754925790446	WITHOUT_CLASSIFICATION	2.4507420955422814E-5	DESIGN
// strip off any leading 'and' token	WITHOUT_CLASSIFICATION	0.9999953587619067	WITHOUT_CLASSIFICATION	4.641238093361394E-6	DESIGN
// if the condition is not already there...	WITHOUT_CLASSIFICATION	0.9998987090003446	WITHOUT_CLASSIFICATION	1.012909996553745E-4	DESIGN
//dontSpace.add("'");	WITHOUT_CLASSIFICATION	0.9999857154998187	WITHOUT_CLASSIFICATION	1.4284500181328131E-5	DESIGN
//for MySQL	WITHOUT_CLASSIFICATION	0.9999658432392874	WITHOUT_CLASSIFICATION	3.4156760712623735E-5	DESIGN
//HashMap columnsUnique = new HashMap();	WITHOUT_CLASSIFICATION	0.9999996306413179	WITHOUT_CLASSIFICATION	3.693586821300227E-7	DESIGN
//null caused some problems	WITHOUT_CLASSIFICATION	0.9953900642073007	WITHOUT_CLASSIFICATION	0.004609935792699262	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.9994521443640757	WITHOUT_CLASSIFICATION	5.478556359242642E-4	DESIGN
//not sure if this would ever be null but wanted to be careful	WITHOUT_CLASSIFICATION	0.9300420313156907	WITHOUT_CLASSIFICATION	0.06995796868430926	DESIGN
//even on inverse="true"	WITHOUT_CLASSIFICATION	0.9999958058539461	WITHOUT_CLASSIFICATION	4.194146053948539E-6	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.9994521443640757	WITHOUT_CLASSIFICATION	5.478556359242642E-4	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.9994521443640757	WITHOUT_CLASSIFICATION	5.478556359242642E-4	DESIGN
// If true then execute db updates, otherwise just generate and display updates	WITHOUT_CLASSIFICATION	0.9999999998545637	WITHOUT_CLASSIFICATION	1.4543635489771233E-10	DESIGN
// we only release the connection	WITHOUT_CLASSIFICATION	0.9999992350349101	WITHOUT_CLASSIFICATION	7.64965089934939E-7	DESIGN
// deprecated option...	WITHOUT_CLASSIFICATION	0.9988518041788169	WITHOUT_CLASSIFICATION	0.0011481958211831077	DESIGN
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999798310020909	WITHOUT_CLASSIFICATION	2.0168997909113925E-5	DESIGN
//actually, this last test is probably unnecessary, since  //beforeCompletion() doesn't get called during rollback	WITHOUT_CLASSIFICATION	0.9996863764532147	WITHOUT_CLASSIFICATION	3.1362354678525484E-4	DESIGN
// this one only really needed for badly-behaved applications! // (if the TransactionManager has a Sychronization registered, // its a noop) // (actually we do need it for downgrading locks)	WITHOUT_CLASSIFICATION	0.9999999839674744	WITHOUT_CLASSIFICATION	1.6032525720285974E-8	DESIGN
// Create an DotNode AST for the path and resolve it.	WITHOUT_CLASSIFICATION	0.9999996092594386	WITHOUT_CLASSIFICATION	3.9074056137865744E-7	DESIGN
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999798310020909	WITHOUT_CLASSIFICATION	2.0168997909113925E-5	DESIGN
//if we could not register a synchronization, //do the before/after completion callbacks //ourself (but we need to let jdbcContext //know that this is what we are going to //do, so it doesn't keep trying to register //synchronizations)	WITHOUT_CLASSIFICATION	0.9999991414278883	WITHOUT_CLASSIFICATION	8.585721116648889E-7	DESIGN
// swallow it, and continue to roll back JTA transaction	WITHOUT_CLASSIFICATION	0.9999978766956213	WITHOUT_CLASSIFICATION	2.1233043786901905E-6	DESIGN
// so the transaction is already rolled back, by JTA spec	WITHOUT_CLASSIFICATION	0.9999998520387869	WITHOUT_CLASSIFICATION	1.479612129253284E-7	DESIGN
// this method is a noop if there is a Synchronization!	WITHOUT_CLASSIFICATION	0.9934493194174923	WITHOUT_CLASSIFICATION	0.006550680582507724	DESIGN
// two conditions where we need to transform this to a theta-join syntax: //      1) 'elem' is the "root from-element" in correlated subqueries //      2) The DotNode.useThetaStyleImplicitJoins has been set to true //          and 'elem' represents an implicit join	WITHOUT_CLASSIFICATION	0.9999993188514084	WITHOUT_CLASSIFICATION	6.811485916637062E-7	DESIGN
// WebSphere, however, is not a sane JEE/JTA container...	WITHOUT_CLASSIFICATION	0.9969223061611562	WITHOUT_CLASSIFICATION	0.003077693838843707	DESIGN
// for sane JEE/JTA containers, the transaction itself functions as its identifier...	WITHOUT_CLASSIFICATION	0.9999994050252614	WITHOUT_CLASSIFICATION	5.949747385622934E-7	DESIGN
//swallow, the transaction was finished	WITHOUT_CLASSIFICATION	0.999999938337382	WITHOUT_CLASSIFICATION	6.166261806464218E-8	DESIGN
// all AliasToEntityMapResultTransformer are considered equal ~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999894045432	WITHOUT_CLASSIFICATION	1.0595456748596398E-8	DESIGN
// Create the join element under the from element.	WITHOUT_CLASSIFICATION	0.9999702358251712	WITHOUT_CLASSIFICATION	2.9764174828808675E-5	DESIGN
// all DistinctRootEntityResultTransformer are considered equal ~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999961975171	WITHOUT_CLASSIFICATION	3.802482915409063E-9	DESIGN
// map of EntityMode -> Tuplizer	WITHOUT_CLASSIFICATION	0.9999989734987799	WITHOUT_CLASSIFICATION	1.0265012201819152E-6	DESIGN
// this is a virtual id property...	WITHOUT_CLASSIFICATION	0.9916426342234036	WITHOUT_CLASSIFICATION	0.008357365776596452	DESIGN
//this one needed only for guessEntityMode()	WITHOUT_CLASSIFICATION	0.9994270429951311	WITHOUT_CLASSIFICATION	5.729570048689267E-4	DESIGN
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999623264819687	WITHOUT_CLASSIFICATION	3.76735180312627E-5	DESIGN
// todo : move this to SF per HHH-3517; also see HHH-1907 and ComponentMetamodel	WITHOUT_CLASSIFICATION	0.5600182186936291	WITHOUT_CLASSIFICATION	0.4399817813063709	DESIGN
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.999999026111087	WITHOUT_CLASSIFICATION	9.738889129911462E-7	DESIGN
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999946624168301	WITHOUT_CLASSIFICATION	5.337583170008928E-6	DESIGN
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999934206224231	WITHOUT_CLASSIFICATION	6.5793775768494114E-6	DESIGN
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999946624168301	WITHOUT_CLASSIFICATION	5.337583170008928E-6	DESIGN
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999999471120742	WITHOUT_CLASSIFICATION	5.288792575164876E-8	DESIGN
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9959818148282124	WITHOUT_CLASSIFICATION	0.004018185171787603	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999538292619589	WITHOUT_CLASSIFICATION	4.617073804128677E-5	DESIGN
// cached for efficiency...	WITHOUT_CLASSIFICATION	0.9983488670390628	WITHOUT_CLASSIFICATION	0.001651132960937296	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999538292619589	WITHOUT_CLASSIFICATION	4.617073804128677E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999538292619589	WITHOUT_CLASSIFICATION	4.617073804128677E-5	DESIGN
//it was not embedded, so the argument is just an id	WITHOUT_CLASSIFICATION	0.9999770673079917	WITHOUT_CLASSIFICATION	2.2932692008315586E-5	DESIGN
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.999999026111087	WITHOUT_CLASSIFICATION	9.738889129911462E-7	DESIGN
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999934206224231	WITHOUT_CLASSIFICATION	6.5793775768494114E-6	DESIGN
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999999471120742	WITHOUT_CLASSIFICATION	5.288792575164876E-8	DESIGN
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999979074838403	WITHOUT_CLASSIFICATION	2.092516159700035E-6	DESIGN
//return currentId;	WITHOUT_CLASSIFICATION	0.9999652834389824	WITHOUT_CLASSIFICATION	3.4716561017736225E-5	DESIGN
//reset the id	WITHOUT_CLASSIFICATION	0.9999443426195058	WITHOUT_CLASSIFICATION	5.565738049416112E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999538292619589	WITHOUT_CLASSIFICATION	4.617073804128677E-5	DESIGN
//reset the version	WITHOUT_CLASSIFICATION	0.9999988141480001	WITHOUT_CLASSIFICATION	1.1858519999546053E-6	DESIGN
// the default is to simply not lazy fetch properties for now...	WITHOUT_CLASSIFICATION	0.9992925704342003	WITHOUT_CLASSIFICATION	7.074295657997148E-4	DESIGN
// Add the second join, the one that ends in the destination table.	WITHOUT_CLASSIFICATION	0.9999984327028536	WITHOUT_CLASSIFICATION	1.5672971463066353E-6	DESIGN
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999678568905912	WITHOUT_CLASSIFICATION	3.214310940877471E-5	DESIGN
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9959818148282124	WITHOUT_CLASSIFICATION	0.004018185171787603	DESIGN
// determine the id getter and setter methods from the proxy interface (if any) // determine all interfaces needed by the resulting proxy	WITHOUT_CLASSIFICATION	0.9995696111970298	WITHOUT_CLASSIFICATION	4.3038880297016673E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999538292619589	WITHOUT_CLASSIFICATION	4.617073804128677E-5	DESIGN
//not final because proxy factory creation can fail	WITHOUT_CLASSIFICATION	0.9994834540544268	WITHOUT_CLASSIFICATION	5.165459455732157E-4	DESIGN
// superclass entity-name	WITHOUT_CLASSIFICATION	0.9999595623302134	WITHOUT_CLASSIFICATION	4.0437669786587574E-5	DESIGN
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999678568905912	WITHOUT_CLASSIFICATION	3.214310940877471E-5	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999894766461872	WITHOUT_CLASSIFICATION	1.0523353812698034E-5	DESIGN
//init the aliases, after initing the constructornode	WITHOUT_CLASSIFICATION	0.9999819592466661	WITHOUT_CLASSIFICATION	1.8040753333927693E-5	DESIGN
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999678568905912	WITHOUT_CLASSIFICATION	3.214310940877471E-5	DESIGN
// legacy behavior (with no abstract attribute specified)	WITHOUT_CLASSIFICATION	0.9999999793979778	WITHOUT_CLASSIFICATION	2.0602022134245837E-8	DESIGN
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999936306659699	WITHOUT_CLASSIFICATION	6.3693340301770885E-6	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999894766461872	WITHOUT_CLASSIFICATION	1.0523353812698034E-5	DESIGN
//note: this affects the return value!	WITHOUT_CLASSIFICATION	0.999941634442997	WITHOUT_CLASSIFICATION	5.8365557003100355E-5	DESIGN
// Need to account for allowable '_' within the variant	WITHOUT_CLASSIFICATION	0.9999999050723875	WITHOUT_CLASSIFICATION	9.492761244680589E-8	DESIGN
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.999998726684897	WITHOUT_CLASSIFICATION	1.2733151030468416E-6	DESIGN
// Collection Types:	WITHOUT_CLASSIFICATION	0.9999975580337851	WITHOUT_CLASSIFICATION	2.4419662148565537E-6	DESIGN
// convenience methods relating to operations across arrays of types...	WITHOUT_CLASSIFICATION	0.9996197705115075	WITHOUT_CLASSIFICATION	3.8022948849242646E-4	DESIGN
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9998980383010544	WITHOUT_CLASSIFICATION	1.0196169894551492E-4	DESIGN
//Blobs are ignored by merge()	WITHOUT_CLASSIFICATION	0.9999789101534473	WITHOUT_CLASSIFICATION	2.1089846552696166E-5	DESIGN
//value is the entity name	WITHOUT_CLASSIFICATION	0.9998343473950647	WITHOUT_CLASSIFICATION	1.6565260493528025E-4	DESIGN
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9984900082489934	WITHOUT_CLASSIFICATION	0.001509991751006678	DESIGN
// generate id select fragment and then property select fragment for // each expression, just like generateSelectFragments().	WITHOUT_CLASSIFICATION	0.9999999999072644	WITHOUT_CLASSIFICATION	9.27355742271557E-11	DESIGN
//TODO!	WITHOUT_CLASSIFICATION	0.9242651749244375	DESIGN	0.07573482507556248	WITHOUT_CLASSIFICATION
//xml is the entity name	WITHOUT_CLASSIFICATION	0.9995428249701495	WITHOUT_CLASSIFICATION	4.5717502985049587E-4	DESIGN
//special case ... this is the leaf of the containment graph, even though not immutable	WITHOUT_CLASSIFICATION	0.999991724302268	WITHOUT_CLASSIFICATION	8.275697731999488E-6	DESIGN
//tolerates nulls	WITHOUT_CLASSIFICATION	0.9999956739188878	WITHOUT_CLASSIFICATION	4.326081112274866E-6	DESIGN
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.999830561278517	WITHOUT_CLASSIFICATION	1.694387214830608E-4	DESIGN
// metaType is assumed to be single-column type	WITHOUT_CLASSIFICATION	0.9998286029707368	WITHOUT_CLASSIFICATION	1.71397029263201E-4	DESIGN
// Get all the select expressions (that we just generated) and render the select.	WITHOUT_CLASSIFICATION	0.9999998332118205	WITHOUT_CLASSIFICATION	1.6678817944694388E-7	DESIGN
// Look through the FromElement's children to find any collections of values that should be fetched...	WITHOUT_CLASSIFICATION	0.9999990977052801	WITHOUT_CLASSIFICATION	9.022947198505896E-7	DESIGN
//return AssociationType.FOREIGN_KEY_TO_PARENT; //this is better but causes a transient object exception...	WITHOUT_CLASSIFICATION	0.8161974112963905	WITHOUT_CLASSIFICATION	0.18380258870360955	DESIGN
// Use the lower case function name. // Remember whether we're in a SELECT clause or not.	WITHOUT_CLASSIFICATION	0.9999581744818833	WITHOUT_CLASSIFICATION	4.182551811669225E-5	DESIGN
// IDENT might be the name of a class.	WITHOUT_CLASSIFICATION	0.9999979457899572	WITHOUT_CLASSIFICATION	2.0542100428236285E-6	DESIGN
//TODO!!!	WITHOUT_CLASSIFICATION	0.9691228848797921	DESIGN	0.030877115120207882	WITHOUT_CLASSIFICATION
//st.setTimestamp( index,  new Timestamp( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9999893314170331	WITHOUT_CLASSIFICATION	1.0668582966931273E-5	DESIGN
//st.setDate( index,  new Date( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9999975458712902	WITHOUT_CLASSIFICATION	2.454128709804259E-6	DESIGN
// both are Timestamps	WITHOUT_CLASSIFICATION	0.9999967751974399	WITHOUT_CLASSIFICATION	3.2248025600828644E-6	DESIGN
// at least one is a plain old Date	WITHOUT_CLASSIFICATION	0.9999993324243499	WITHOUT_CLASSIFICATION	6.675756500319918E-7	DESIGN
//noop	WITHOUT_CLASSIFICATION	0.9999693617870373	WITHOUT_CLASSIFICATION	3.063821296266297E-5	DESIGN
// if the corresponding SQL value is NULL, the reader we got is NULL as well	WITHOUT_CLASSIFICATION	0.9999846689353772	WITHOUT_CLASSIFICATION	1.533106462273703E-5	DESIGN
// Fetch Reader content up to the end - and put characters in a StringBuffer	WITHOUT_CLASSIFICATION	0.9999903772572063	WITHOUT_CLASSIFICATION	9.622742793744732E-6	DESIGN
// Return StringBuffer content as a large String	WITHOUT_CLASSIFICATION	0.9999991099960013	WITHOUT_CLASSIFICATION	8.900039987254133E-7	DESIGN
//or Types.LONGVARCHAR?	WITHOUT_CLASSIFICATION	0.9993811438722059	WITHOUT_CLASSIFICATION	6.188561277941196E-4	DESIGN
//Not called at runtime so doesn't matter if its slow :)	WITHOUT_CLASSIFICATION	0.9994185973024774	WITHOUT_CLASSIFICATION	5.814026975225599E-4	DESIGN
//TODO	WITHOUT_CLASSIFICATION	0.9065035708752841	WITHOUT_CLASSIFICATION	0.0934964291247159	DESIGN
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999996944447247	WITHOUT_CLASSIFICATION	3.055552753596402E-7	DESIGN
//different nullability rules for pk/fk	WITHOUT_CLASSIFICATION	0.9980817228704438	WITHOUT_CLASSIFICATION	0.001918277129556261	DESIGN
//cache this	WITHOUT_CLASSIFICATION	0.9944142409667746	WITHOUT_CLASSIFICATION	0.005585759033225524	DESIGN
//only really need new array during semiresolve!	WITHOUT_CLASSIFICATION	0.999856878592005	WITHOUT_CLASSIFICATION	1.4312140799499062E-4	DESIGN
// Forcefully remove leading ands from where fragments; the grammar will // handle adding them	WITHOUT_CLASSIFICATION	0.9998945311856249	WITHOUT_CLASSIFICATION	1.0546881437509339E-4	DESIGN
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9697048611844006	DESIGN	0.030295138815599476	WITHOUT_CLASSIFICATION
// Create a new FILTERS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999993679506725	WITHOUT_CLASSIFICATION	6.320493274795466E-7	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999894766461872	WITHOUT_CLASSIFICATION	1.0523353812698034E-5	DESIGN
//public Object instantiate(Object parent, SessionImplementor session) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9988647011958238	WITHOUT_CLASSIFICATION	0.0011352988041762192	DESIGN
//nothing to do	WITHOUT_CLASSIFICATION	0.9999542077786421	WITHOUT_CLASSIFICATION	4.579222135795225E-5	DESIGN
//nothing to do	WITHOUT_CLASSIFICATION	0.9999542077786421	WITHOUT_CLASSIFICATION	4.579222135795225E-5	DESIGN
// VersionType impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //      Note : simply returns null for seed() and next() as the only known //      application of binary types for versioning is for use with the //      TIMESTAMP datatype supported by Sybase and SQL Server, which //      are completely db-generated values...	WITHOUT_CLASSIFICATION	0.9999996714600836	WITHOUT_CLASSIFICATION	3.2853991635112567E-7	DESIGN
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9998980383010544	WITHOUT_CLASSIFICATION	1.0196169894551492E-4	DESIGN
//not really necessary, I guess...	WITHOUT_CLASSIFICATION	0.9837806026884425	WITHOUT_CLASSIFICATION	0.016219397311557495	DESIGN
//Clobs are ignored by merge() operation	WITHOUT_CLASSIFICATION	0.9999933449007951	WITHOUT_CLASSIFICATION	6.655099204971387E-6	DESIGN
// we do not have to worry about queued additions to uninitialized // collections, since they can only occur for inverse collections!	WITHOUT_CLASSIFICATION	0.9999892878666928	WITHOUT_CLASSIFICATION	1.0712133307094562E-5	DESIGN
// collections cannot be compared	WITHOUT_CLASSIFICATION	0.9999998934440218	WITHOUT_CLASSIFICATION	1.0655597816000226E-7	DESIGN
//remember the uk value	WITHOUT_CLASSIFICATION	0.9998740807099893	WITHOUT_CLASSIFICATION	1.259192900106998E-4	DESIGN
//NOOP	WITHOUT_CLASSIFICATION	0.9999463946322306	WITHOUT_CLASSIFICATION	5.360536776945419E-5	DESIGN
//processCollectionProperty(token, q.getCollectionPersister(collectionRole), collectionName);	WITHOUT_CLASSIFICATION	0.9999999878179555	WITHOUT_CLASSIFICATION	1.218204438921857E-8	DESIGN
//we must use the "remembered" uk value, since it is  //not available from the EntityEntry during assembly	WITHOUT_CLASSIFICATION	0.9999984265714815	WITHOUT_CLASSIFICATION	1.5734285184442003E-6	DESIGN
// collections don't dirty an unversioned parent entity	WITHOUT_CLASSIFICATION	0.9998431447313304	WITHOUT_CLASSIFICATION	1.5685526866954485E-4	DESIGN
// return false;	WITHOUT_CLASSIFICATION	0.9999952803624715	WITHOUT_CLASSIFICATION	4.719637528429447E-6	DESIGN
// This just handles a particular case of component // projection, perhaps get rid of it and throw an exception	WITHOUT_CLASSIFICATION	0.9429267410319547	WITHOUT_CLASSIFICATION	0.05707325896804524	DESIGN
//NOTE: we avoid joining to the next table if the named property is just the foreign key value	WITHOUT_CLASSIFICATION	0.9996590063618505	WITHOUT_CLASSIFICATION	3.409936381494809E-4	DESIGN
// the key is the owning entity itself, so get the ID from the key	WITHOUT_CLASSIFICATION	0.9999983579050717	WITHOUT_CLASSIFICATION	1.6420949282512746E-6	DESIGN
// if the original is a PersistentCollection, and that original // was not flagged as dirty, then reset the target's dirty flag // here after the copy operation. // </p> // One thing to be careful of here is a "bare" original collection // in which case we should never ever ever reset the dirty flag // on the target because we simply do not know...	WITHOUT_CLASSIFICATION	0.998772801857051	WITHOUT_CLASSIFICATION	0.0012271981429490754	DESIGN
//ignore subselect keywords	WITHOUT_CLASSIFICATION	0.9999977687145919	WITHOUT_CLASSIFICATION	2.231285408178071E-6	DESIGN
// copy elements into newly empty target collection	WITHOUT_CLASSIFICATION	0.9999993683274505	WITHOUT_CLASSIFICATION	6.316725495347622E-7	DESIGN
// for a null target, or a target which is the same as the original, we // need to put the merged elements in a new collection	WITHOUT_CLASSIFICATION	0.9999999891971633	WITHOUT_CLASSIFICATION	1.0802836825723363E-8	DESIGN
// by default just use an unanticipated capacity since we don't // know how to extract the capacity to use from original here...	WITHOUT_CLASSIFICATION	0.9789698098271478	WITHOUT_CLASSIFICATION	0.02103019017285234	DESIGN
// get the elements back into the target making sure to handle dirty flag	WITHOUT_CLASSIFICATION	0.9999341865950604	WITHOUT_CLASSIFICATION	6.58134049395292E-5	DESIGN
// check if collection is currently being loaded	WITHOUT_CLASSIFICATION	0.9999993191269243	WITHOUT_CLASSIFICATION	6.808730756081424E-7	DESIGN
// check if it is already completely loaded, but unowned	WITHOUT_CLASSIFICATION	0.9999996452304656	WITHOUT_CLASSIFICATION	3.547695344550393E-7	DESIGN
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9998344109317423	WITHOUT_CLASSIFICATION	1.6558906825775348E-4	DESIGN
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9697048611844006	DESIGN	0.030295138815599476	WITHOUT_CLASSIFICATION
// create a new collection wrapper, to be initialized later	WITHOUT_CLASSIFICATION	0.9999994431126648	WITHOUT_CLASSIFICATION	5.568873352469985E-7	DESIGN
// Some JDBC drivers erroneously return an empty array here for a null DB value :/	WITHOUT_CLASSIFICATION	0.9999996621371281	WITHOUT_CLASSIFICATION	3.378628718658857E-7	DESIGN
// our column span is the number of columns in the PK	WITHOUT_CLASSIFICATION	0.9999995236870889	WITHOUT_CLASSIFICATION	4.7631291105577016E-7	DESIGN
//cannot batch fetch by unique key (property-ref associations)	WITHOUT_CLASSIFICATION	0.9999987090030953	WITHOUT_CLASSIFICATION	1.2909969046716884E-6	DESIGN
// we already know current is not null...	WITHOUT_CLASSIFICATION	0.9992982314648963	WITHOUT_CLASSIFICATION	7.017685351038016E-4	DESIGN
// the ids are fully resolved, so compare them with isDirty(), not isModified()	WITHOUT_CLASSIFICATION	0.9876952354017031	WITHOUT_CLASSIFICATION	0.012304764598296953	DESIGN
//the owner of the association is not the owner of the id	WITHOUT_CLASSIFICATION	0.9999619163516449	WITHOUT_CLASSIFICATION	3.8083648355050455E-5	DESIGN
// ----------------------------------------------------------- Constructors	WITHOUT_CLASSIFICATION	0.9999972496017067	WITHOUT_CLASSIFICATION	2.7503982933234717E-6	DESIGN
// ----------------------------------------------------- Instance Variables	WITHOUT_CLASSIFICATION	0.9999999891096594	WITHOUT_CLASSIFICATION	1.0890340755838412E-8	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999538292619589	WITHOUT_CLASSIFICATION	4.617073804128677E-5	DESIGN
// --------------------------------------------------------- Public Methods	WITHOUT_CLASSIFICATION	0.9999974428446787	WITHOUT_CLASSIFICATION	2.5571553212948974E-6	DESIGN
// Compare the two maps for equality	WITHOUT_CLASSIFICATION	0.999999030988411	WITHOUT_CLASSIFICATION	9.690115890149528E-7	DESIGN
// Simple tests that require no synchronization	WITHOUT_CLASSIFICATION	0.999999964028015	WITHOUT_CLASSIFICATION	3.5971984969783884E-8	DESIGN
//Sybase fail if we don't do that, sigh...	WITHOUT_CLASSIFICATION	0.9999049381376577	WITHOUT_CLASSIFICATION	9.506186234224468E-5	DESIGN
// Handles things like: // a and b or c // a and ( b or c ) // not a and not b // not ( a and b ) // x between y and z            (overloaded "and") // x in ( a, b, c )             (overloaded brackets) // not not a // a is not null                (overloaded "not") // etc...... // and expressions like // foo = bar                    (maps to: foo.id = bar.id) // foo.Bar = 'foo'              (maps to: foo.bar = 'foo') // foo.Bar.Baz = 1.0            (maps to: foo.bar = bar.id and bar.baz = 1.0) // 1.0 = foo.Bar.Baz            (maps to: bar.baz = 1.0 and foo.Bar = bar.id) // foo.Bar.Baz = a.B.C          (maps to: bar.Baz = b.C and foo.Bar = bar.id and a.B = b.id) // foo.Bar.Baz + a.B.C          (maps to: bar.Baz + b.C and foo.Bar = bar.id and a.B = b.id) // ( foo.Bar.Baz + 1.0 ) < 2.0  (maps to: ( bar.Baz + 1.0 ) < 2.0 and foo.Bar = bar.id)	WITHOUT_CLASSIFICATION	0.99999995782119	WITHOUT_CLASSIFICATION	4.2178810012581836E-8	DESIGN
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9931650053644435	WITHOUT_CLASSIFICATION	0.006834994635556474	DESIGN
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9931650053644435	WITHOUT_CLASSIFICATION	0.006834994635556474	DESIGN
// try to "pretty print" it	WITHOUT_CLASSIFICATION	0.9999912615160508	WITHOUT_CLASSIFICATION	8.738483949233383E-6	DESIGN
// otherwise, just dump it	WITHOUT_CLASSIFICATION	0.999997192634897	WITHOUT_CLASSIFICATION	2.8073651030087225E-6	DESIGN
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9914714196439303	WITHOUT_CLASSIFICATION	0.008528580356069827	DESIGN
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9914714196439303	WITHOUT_CLASSIFICATION	0.008528580356069827	DESIGN
// use default behavior	WITHOUT_CLASSIFICATION	0.9999981910860345	WITHOUT_CLASSIFICATION	1.8089139655153845E-6	DESIGN
//NOTE: early return	WITHOUT_CLASSIFICATION	0.986520954420748	WITHOUT_CLASSIFICATION	0.013479045579251949	DESIGN
// the MRU cache used to keep hard references to the most recently used query plans; // note : LRU here is a bit of a misnomer, it indicates that LRU entries are removed, the // actual kept entries are the MRU entries	WITHOUT_CLASSIFICATION	0.7964853303971432	WITHOUT_CLASSIFICATION	0.2035146696028568	DESIGN
// we want to be able to just use the defaults, // if JNDI environment properties are not supplied // so don't put null in anywhere	WITHOUT_CLASSIFICATION	0.9999977378716284	WITHOUT_CLASSIFICATION	2.262128371611582E-6	DESIGN
// Clone //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999997029381223	WITHOUT_CLASSIFICATION	2.970618776902815E-7	DESIGN
// Serialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999995970380534	WITHOUT_CLASSIFICATION	4.0296194649189926E-7	DESIGN
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.999990486736382	WITHOUT_CLASSIFICATION	9.513263617887424E-6	DESIGN
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.999990486736382	WITHOUT_CLASSIFICATION	9.513263617887424E-6	DESIGN
// Deserialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.999999656344043	WITHOUT_CLASSIFICATION	3.436559570016593E-7	DESIGN
/* static methods only - hide constructor */	WITHOUT_CLASSIFICATION	0.9974242098262689	WITHOUT_CLASSIFICATION	0.002575790173731103	DESIGN
/*&& !('_'==character)*/	WITHOUT_CLASSIFICATION	0.9999651381629098	WITHOUT_CLASSIFICATION	3.486183709018803E-5	DESIGN
// returnign null!	WITHOUT_CLASSIFICATION	0.9999723151501475	WITHOUT_CLASSIFICATION	2.768484985252065E-5	DESIGN
// returnign null!	WITHOUT_CLASSIFICATION	0.9999723151501475	WITHOUT_CLASSIFICATION	2.768484985252065E-5	DESIGN
// includes last '.'	WITHOUT_CLASSIFICATION	0.9999999150082075	WITHOUT_CLASSIFICATION	8.499179239263072E-8	DESIGN
// +1 to include the following '.'	WITHOUT_CLASSIFICATION	0.999999984515945	WITHOUT_CLASSIFICATION	1.5484055097691456E-8	DESIGN
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.7713961273061873	DESIGN	0.2286038726938126	WITHOUT_CLASSIFICATION
// first time we find match!	WITHOUT_CLASSIFICATION	0.9999876322607367	WITHOUT_CLASSIFICATION	1.2367739263173283E-5	DESIGN
// entityNames may now include slashes for the representations //classname may be an inner class	WITHOUT_CLASSIFICATION	0.9999816055570112	WITHOUT_CLASSIFICATION	1.839444298871818E-5	DESIGN
// wrapped iterators	WITHOUT_CLASSIFICATION	0.9999973702098651	WITHOUT_CLASSIFICATION	2.6297901348562938E-6	DESIGN
// index of current iterator in the wrapped iterators array	WITHOUT_CLASSIFICATION	0.9999960322908495	WITHOUT_CLASSIFICATION	3.967709150429085E-6	DESIGN
// the current iterator	WITHOUT_CLASSIFICATION	0.9999513058735936	WITHOUT_CLASSIFICATION	4.869412640651899E-5	DESIGN
// the last used iterator	WITHOUT_CLASSIFICATION	0.998821836580671	WITHOUT_CLASSIFICATION	0.0011781634193290102	DESIGN
//it was a boolean expression	WITHOUT_CLASSIFICATION	0.9999998623690475	WITHOUT_CLASSIFICATION	1.3763095241126092E-7	DESIGN
/*public static Object[] clone(Class elementClass, Object[] array) {	WITHOUT_CLASSIFICATION	0.9982094832208946	WITHOUT_CLASSIFICATION	0.0017905167791052751	DESIGN
// call this before any Iterator method to make sure that the current Iterator // is not exhausted	WITHOUT_CLASSIFICATION	0.9979187202162362	WITHOUT_CLASSIFICATION	0.002081279783763772	DESIGN
//doable if needed	WITHOUT_CLASSIFICATION	0.999998950968339	WITHOUT_CLASSIFICATION	1.0490316609982621E-6	DESIGN
// set last used iterator here, in case the user calls remove // before calling hasNext() or next() (although they shouldn't)	WITHOUT_CLASSIFICATION	0.9892681085773726	WITHOUT_CLASSIFICATION	0.010731891422627477	DESIGN
// peek ahead	WITHOUT_CLASSIFICATION	0.9998309002815502	WITHOUT_CLASSIFICATION	1.6909971844978735E-4	DESIGN
// if we reach the end of the string w/o finding the // matching end, that is an exception	WITHOUT_CLASSIFICATION	0.9999988526578704	WITHOUT_CLASSIFICATION	1.1473421296535842E-6	DESIGN
// we have a placeholder, spin forward till we find the end	WITHOUT_CLASSIFICATION	0.9999999675457725	WITHOUT_CLASSIFICATION	3.2454227461507215E-8	DESIGN
// make sure spinning forward did not put us past the end of the buffer...	WITHOUT_CLASSIFICATION	0.9999988996153617	WITHOUT_CLASSIFICATION	1.1003846383106807E-6	DESIGN
// First, try to locate this resource through the current // context classloader.	WITHOUT_CLASSIFICATION	0.9999693957481114	WITHOUT_CLASSIFICATION	3.060425188858753E-5	DESIGN
// Next, try to locate this resource through this class's classloader	WITHOUT_CLASSIFICATION	0.999565004214654	WITHOUT_CLASSIFICATION	4.349957853459567E-4	DESIGN
// Next, try to locate this resource through the system classloader	WITHOUT_CLASSIFICATION	0.9998970641399064	WITHOUT_CLASSIFICATION	1.0293586009366544E-4	DESIGN
// Anywhere else we should look?	WITHOUT_CLASSIFICATION	0.9923515010295437	WITHOUT_CLASSIFICATION	0.007648498970456312	DESIGN
// would need an IdentitySet for this!	WITHOUT_CLASSIFICATION	0.9996317083605366	WITHOUT_CLASSIFICATION	3.682916394633734E-4	DESIGN
//Arrays.asList doesn't do primitive arrays	WITHOUT_CLASSIFICATION	0.9999997438135375	WITHOUT_CLASSIFICATION	2.5618646246379596E-7	DESIGN
//faster?	WITHOUT_CLASSIFICATION	0.9966967507407343	WITHOUT_CLASSIFICATION	0.0033032492592655963	DESIGN
// the name of a class	WITHOUT_CLASSIFICATION	0.9999976733545874	WITHOUT_CLASSIFICATION	2.3266454125291693E-6	DESIGN
// Its the listener class name	WITHOUT_CLASSIFICATION	0.9999951663268558	WITHOUT_CLASSIFICATION	4.833673144216553E-6	DESIGN
//allow 9,8,7,6,5,4,3,2,1	WITHOUT_CLASSIFICATION	0.9999997502691726	WITHOUT_CLASSIFICATION	2.497308273130103E-7	DESIGN
// default to element set if no elements() specified	WITHOUT_CLASSIFICATION	0.9999999950480692	WITHOUT_CLASSIFICATION	4.9519307848944286E-9	DESIGN
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999936421396863	WITHOUT_CLASSIFICATION	6.3578603137479784E-6	DESIGN
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9869492331692152	WITHOUT_CLASSIFICATION	0.013050766830784884	DESIGN
// first, lets determine whether to apply cglib or javassist based instrumentation...	WITHOUT_CLASSIFICATION	0.9999979668195481	WITHOUT_CLASSIFICATION	2.0331804518686516E-6	DESIGN
// Make sure we don't override previous set values	WITHOUT_CLASSIFICATION	0.99999922399864	WITHOUT_CLASSIFICATION	7.760013599004896E-7	DESIGN
//entirely optional!!	WITHOUT_CLASSIFICATION	0.9999746294682341	WITHOUT_CLASSIFICATION	2.537053176592515E-5	DESIGN
// Its the listener instance (or better be)	WITHOUT_CLASSIFICATION	0.9999783400667881	WITHOUT_CLASSIFICATION	2.1659933211935635E-5	DESIGN
//context.unbind(boundName);	WITHOUT_CLASSIFICATION	0.9999950513481847	WITHOUT_CLASSIFICATION	4.9486518153098785E-6	DESIGN
//readResolveObject	WITHOUT_CLASSIFICATION	0.9997257710410589	WITHOUT_CLASSIFICATION	2.742289589411565E-4	DESIGN
//cfg.setProperty("hibernate.show_sql", "true");	WITHOUT_CLASSIFICATION	0.9999998089923524	WITHOUT_CLASSIFICATION	1.9100764751804313E-7	DESIGN
// Defensive, convenience methods	WITHOUT_CLASSIFICATION	0.9999552905712958	WITHOUT_CLASSIFICATION	4.4709428704033226E-5	DESIGN
// Create the SessionFactory from hibernate.cfg.xml	WITHOUT_CLASSIFICATION	0.9999995616502492	WITHOUT_CLASSIFICATION	4.38349750826257E-7	DESIGN
// Make sure you log the exception, as it might be swallowed	WITHOUT_CLASSIFICATION	0.9996150567008173	WITHOUT_CLASSIFICATION	3.8494329918271913E-4	DESIGN
// Begin unit of work	WITHOUT_CLASSIFICATION	0.9999564404247967	WITHOUT_CLASSIFICATION	4.355957520329107E-5	DESIGN
// Write HTML header	WITHOUT_CLASSIFICATION	0.9998167129564574	WITHOUT_CLASSIFICATION	1.8328704354276398E-4	DESIGN
// Handle actions	WITHOUT_CLASSIFICATION	0.999988944936663	WITHOUT_CLASSIFICATION	1.1055063337039247E-5	DESIGN
// Print page	WITHOUT_CLASSIFICATION	0.9999987425126529	WITHOUT_CLASSIFICATION	1.2574873470479702E-6	DESIGN
// Write HTML footer	WITHOUT_CLASSIFICATION	0.99998067585765	WITHOUT_CLASSIFICATION	1.9324142349952308E-5	DESIGN
// End unit of work	WITHOUT_CLASSIFICATION	0.9985228432497891	WITHOUT_CLASSIFICATION	0.0014771567502109117	DESIGN
// Start the session to be used for this request	WITHOUT_CLASSIFICATION	0.9124216263228234	WITHOUT_CLASSIFICATION	0.08757837367717657	DESIGN
// make the session available to the session factory's "current context"	WITHOUT_CLASSIFICATION	0.9999999590514466	WITHOUT_CLASSIFICATION	4.0948553447102104E-8	DESIGN
// pass control along to the rest of the processing chain	WITHOUT_CLASSIFICATION	0.9999999914530171	WITHOUT_CLASSIFICATION	8.546982965653181E-9	DESIGN
// remove session from "current context"	WITHOUT_CLASSIFICATION	0.9999963897000929	WITHOUT_CLASSIFICATION	3.6102999071668326E-6	DESIGN
// Eager fetch the collection so we can use it detached	WITHOUT_CLASSIFICATION	0.9999906615122663	WITHOUT_CLASSIFICATION	9.338487733612381E-6	DESIGN
// If we want to handle it bidirectional and detached, we also need to load this // collection with an eager outer-join fetch, this time with Criteria and not HQL:	WITHOUT_CLASSIFICATION	0.9999999362433044	WITHOUT_CLASSIFICATION	6.375669548111704E-8	DESIGN
/*        Event anEvent = (Event) session                .createCriteria(Event.class).setFetchMode("participants", FetchMode.JOIN)                .add( Expression.eq("id", eventId) )                .uniqueResult(); // Eager fetch the colleciton so we can use it detached        */	WITHOUT_CLASSIFICATION	0.9999999962131841	WITHOUT_CLASSIFICATION	3.786815810564447E-9	DESIGN
// End of first unit of work	WITHOUT_CLASSIFICATION	0.9981860478408979	WITHOUT_CLASSIFICATION	0.0018139521591021294	DESIGN
// or bidirectional safety method, setting both sides: aPerson.addToEvent(anEvent);	WITHOUT_CLASSIFICATION	0.9999991205925943	WITHOUT_CLASSIFICATION	8.794074056864687E-7	DESIGN
// Begin second unit of work	WITHOUT_CLASSIFICATION	0.999906452361474	WITHOUT_CLASSIFICATION	9.354763852598272E-5	DESIGN
// Reattachment of aPerson	WITHOUT_CLASSIFICATION	0.9999921643942671	WITHOUT_CLASSIFICATION	7.83560573286044E-6	DESIGN
// The getEmailAddresses() might trigger a lazy load of the collection	WITHOUT_CLASSIFICATION	0.9987744366116394	WITHOUT_CLASSIFICATION	0.0012255633883604844	DESIGN
// We need our tm, so get it now and avoid doing other work // if there is a problem	WITHOUT_CLASSIFICATION	0.9856781159405847	WITHOUT_CLASSIFICATION	0.0143218840594152	DESIGN
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999999619175572	WITHOUT_CLASSIFICATION	3.808244265181256E-8	DESIGN
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999999619175572	WITHOUT_CLASSIFICATION	3.808244265181256E-8	DESIGN
// JBC put a version in the node when it created as part of // some internal operation. We are always newer, but if // the JBC version is > 1 something odd has happened	WITHOUT_CLASSIFICATION	0.9999995098580369	WITHOUT_CLASSIFICATION	4.901419631477608E-7	DESIGN
//swaldman 2006-08-28: define c3p0-style configuration parameters for properties with //                     hibernate-specific overrides to detect and warn about conflicting //                     declarations	WITHOUT_CLASSIFICATION	0.999947225352503	WITHOUT_CLASSIFICATION	5.277464749706335E-5	DESIGN
// Not null if the Isolation level has been specified in the configuration file. // Otherwise, it is left to the Driver's default value.	WITHOUT_CLASSIFICATION	0.9999999997061687	WITHOUT_CLASSIFICATION	2.9383126673565804E-10	DESIGN
// Configured outside of Hibernate (i.e. Servlet container, or Java Bean Container // already has Proxool pools running, and this provider is to just borrow one of these	WITHOUT_CLASSIFICATION	0.9999946578200573	WITHOUT_CLASSIFICATION	5.34217994278007E-6	DESIGN
// If you're closing down the ConnectionProvider chances are an // is not a real big deal, just warn	WITHOUT_CLASSIFICATION	0.9973981890343117	WITHOUT_CLASSIFICATION	0.002601810965688362	DESIGN
// (AS is always optional, for consistency with SQL/OQL)	WITHOUT_CLASSIFICATION	0.9999999780950356	WITHOUT_CLASSIFICATION	2.1904964384056923E-8	DESIGN
// process the "new" HQL style where aliases are assigned // _after_ the class name or path expression ie. using // the AS construction	WITHOUT_CLASSIFICATION	0.9999999923864586	WITHOUT_CLASSIFICATION	7.613541326367895E-9	DESIGN
// the loaded owner will be set to null after the collection is removed, // so capture its value as the affected owner so it is accessible to // both pre- and post- events	WITHOUT_CLASSIFICATION	0.9999999999967557	WITHOUT_CLASSIFICATION	3.2442954045320624E-12	DESIGN
// is a primitive type // invokespecial	WITHOUT_CLASSIFICATION	0.9999431306944683	WITHOUT_CLASSIFICATION	5.6869305531647576E-5	DESIGN
// array of primitive type // do nothing	WITHOUT_CLASSIFICATION	0.9999643705761116	WITHOUT_CLASSIFICATION	3.5629423888407916E-5	DESIGN
// handle a path expression or class name that // appears at the start, in the "new" HQL // style or an alias that appears at the start // in the "old" HQL style	WITHOUT_CLASSIFICATION	0.9999999372664302	WITHOUT_CLASSIFICATION	6.273356984442265E-8	DESIGN
//handle <=, >=, !=, is not, not between, not in	WITHOUT_CLASSIFICATION	0.9999513583530004	WITHOUT_CLASSIFICATION	4.8641646999623084E-5	DESIGN
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.9986559519624745	WITHOUT_CLASSIFICATION	0.0013440480375255348	DESIGN
// transfer an explicitly defined entity name // handle the lazy attribute	WITHOUT_CLASSIFICATION	0.9993525184481894	WITHOUT_CLASSIFICATION	6.474815518105634E-4	DESIGN
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.99999990846779	WITHOUT_CLASSIFICATION	9.153221013034206E-8	DESIGN
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.99999990846779	WITHOUT_CLASSIFICATION	9.153221013034206E-8	DESIGN
// get meta's from // <joined-subclass>	WITHOUT_CLASSIFICATION	0.999995774237728	WITHOUT_CLASSIFICATION	4.2257622720569E-6	DESIGN
// parameters on the property mapping should // override parameters in the typedef	WITHOUT_CLASSIFICATION	0.9999966950343281	WITHOUT_CLASSIFICATION	3.3049656719258225E-6	DESIGN
//fetch="join" overrides default laziness //fetch="join" overrides default laziness	WITHOUT_CLASSIFICATION	0.999999991249207	WITHOUT_CLASSIFICATION	8.750793111341664E-9	DESIGN
//NOTE SPECIAL CASE: // default to join and non-lazy for the "second join" // of the many-to-many	WITHOUT_CLASSIFICATION	0.9999997717974985	WITHOUT_CLASSIFICATION	2.2820250156825226E-7	DESIGN
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999995053033692	WITHOUT_CLASSIFICATION	4.946966308032713E-7	DESIGN
// state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999950511193427	WITHOUT_CLASSIFICATION	4.948880657316698E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999538292619589	WITHOUT_CLASSIFICATION	4.617073804128677E-5	DESIGN
//element //index -> id	WITHOUT_CLASSIFICATION	0.9999974513077188	WITHOUT_CLASSIFICATION	2.5486922812175525E-6	DESIGN
// note that it might be better to iterate the snapshot but this is safe, // assuming the user implements equals() properly, as required by the Set // contract!	WITHOUT_CLASSIFICATION	0.998752711882564	WITHOUT_CLASSIFICATION	0.00124728811743595	DESIGN
// collections detect changes made via their public interface and mark // themselves as dirty as a performance optimization	WITHOUT_CLASSIFICATION	0.999796824528159	WITHOUT_CLASSIFICATION	2.0317547184114007E-4	DESIGN
// essentially, if the real session is closed allow any // method call to pass through since the real session // will complain by throwing an appropriate exception; // NOTE that allowing close() above has the same basic effect, //   but we capture that there simply to perform the unbind...	WITHOUT_CLASSIFICATION	0.9999999976153857	WITHOUT_CLASSIFICATION	2.3846141504508153E-9	DESIGN
// The default SQLExceptionConverter for all dialects is based on SQLState // since SQLErrorCode is extremely vendor-specific.  Specific Dialects // may override to return whatever is most appropriate for that vendor.	WITHOUT_CLASSIFICATION	0.9999999760341748	WITHOUT_CLASSIFICATION	2.3965825238231942E-8	DESIGN
//only necessary for postgre < 7.4 //http://anoncvs.postgresql.org/cvsweb.cgi/pgsql/doc/src/sgml/ref/create_sequence.sgml	WITHOUT_CLASSIFICATION	0.9999997665908046	WITHOUT_CLASSIFICATION	2.3340919536497733E-7	DESIGN
// select topic, syntax from information_schema.help // where section like 'Function%' order by section, topic // // see also ->  http://www.h2database.com/html/functions.html	WITHOUT_CLASSIFICATION	0.9999999979886023	WITHOUT_CLASSIFICATION	2.0113976344649637E-9	DESIGN
// registerColumnType(Types.VARBINARY, "CHARACTER($l)"); // registerColumnType(Types.BLOB, "CHARACTER($l)" );  // For use prior to CP 11.0 // registerColumnType(Types.CLOB, "CHARACTER($l)" );	WITHOUT_CLASSIFICATION	0.9999997864272823	WITHOUT_CLASSIFICATION	2.1357271778445096E-7	DESIGN
//the BLOB type requires a size arguement - this defaults to //bytes - no arg defaults to 1 whole byte! //other argument mods include K - kilobyte, M - megabyte, G - gigabyte. //refer to the PBdevelopers guide for more info.	WITHOUT_CLASSIFICATION	0.947663855978398	WITHOUT_CLASSIFICATION	0.05233614402160203	DESIGN
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.998952852248285	WITHOUT_CLASSIFICATION	0.0010471477517149598	DESIGN
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.9998925910065587	WITHOUT_CLASSIFICATION	1.0740899344120946E-4	DESIGN
// add the comment // nest the main query in an outer select // add the rownnumber bit into the outer query select list	WITHOUT_CLASSIFICATION	0.9999695009628207	WITHOUT_CLASSIFICATION	3.0499037179417714E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999538292619589	WITHOUT_CLASSIFICATION	4.617073804128677E-5	DESIGN
// Note: For object <-> SQL datatype mappings see: //	WITHOUT_CLASSIFICATION	0.9999999780668771	WITHOUT_CLASSIFICATION	2.193312279316719E-8	DESIGN
// TRIM(end_keyword string-expression-1 FROM string-expression-2) // use Hibernate implementation "From" is one of the parameters they pass in position ?3 //registerFunction( "trim", new SQLFunctionTemplate(Hibernate.STRING, "trim(?1 ?2 from ?3)") );	WITHOUT_CLASSIFICATION	0.9999997298581476	WITHOUT_CLASSIFICATION	2.701418525026933E-7	DESIGN
// Whether this dialect has an Identity clause added to the data type or a completely seperate identity // data type	WITHOUT_CLASSIFICATION	0.9998244266567162	WITHOUT_CLASSIFICATION	1.75573343283861E-4	DESIGN
// According to both the ANSI-SQL and JPA specs, trim takes a variable number of parameters between 1 and 4. // at least one paramer (trimSource) is required.  From the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If <trim specification> is omitted, BOTH is assumed. // If <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999999999723337	WITHOUT_CLASSIFICATION	2.7666318351917504E-11	DESIGN
/////////////////////////////////////////////////////////////////////// // Prepare persisters and link them up with their cache // region/access-strategy	WITHOUT_CLASSIFICATION	0.9999240985233686	WITHOUT_CLASSIFICATION	7.590147663147445E-5	DESIGN
//Named Queries:	WITHOUT_CLASSIFICATION	0.9998066699695902	WITHOUT_CLASSIFICATION	1.9333003040986093E-4	DESIGN
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9818914829446106	WITHOUT_CLASSIFICATION	0.018108517055389385	DESIGN
// does not handle arrays (thats ok, cos they can't be lazy) // or newly instantiated collections, so we can do the cast	WITHOUT_CLASSIFICATION	0.9999990450033314	WITHOUT_CLASSIFICATION	9.549966686300832E-7	DESIGN
// collection deletions are a special case since update() can add // deletions of collections not loaded by the session.	WITHOUT_CLASSIFICATION	0.9999999816788477	WITHOUT_CLASSIFICATION	1.832115224701385E-8	DESIGN
// we can do the cast since orphan-delete does not apply to: // 1. newly instantiated collections // 2. arrays (we can't track orphans for detached arrays)	WITHOUT_CLASSIFICATION	0.9999999193931202	WITHOUT_CLASSIFICATION	8.060687992564263E-8	DESIGN
// if the natural-id is marked as non-mutable, it is not retrieved during a // normal database-snapshot operation...	WITHOUT_CLASSIFICATION	0.9999994819555419	WITHOUT_CLASSIFICATION	5.180444581392927E-7	DESIGN
// watch out for a case where old is still referenced // somewhere in the object graph! (which is a user error)	WITHOUT_CLASSIFICATION	0.9999114842365391	WITHOUT_CLASSIFICATION	8.851576346097372E-5	DESIGN
//slice, to get the columns for this component //property	WITHOUT_CLASSIFICATION	0.9992119817586826	WITHOUT_CLASSIFICATION	7.880182413174014E-4	DESIGN
//int result = 17; //result = 37 * result + type.hashCode(); //result = 37 * result + ( value==null ? 0 : value.hashCode() ); //return result;	WITHOUT_CLASSIFICATION	0.9999866496916718	WITHOUT_CLASSIFICATION	1.3350308328152493E-5	DESIGN
// The CollectionEntry.isReached() stuff is just to detect any silly users   // who set up circular or shared references between/to collections.	WITHOUT_CLASSIFICATION	0.9999504841799145	WITHOUT_CLASSIFICATION	4.95158200855416E-5	DESIGN
// detached collection wrappers that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999971480458723	WITHOUT_CLASSIFICATION	2.851954127875037E-6	DESIGN
// The unique property value represented here may or may not be // serializable, so we do an explicit check here in order to generate // a better error message	WITHOUT_CLASSIFICATION	0.5464876484434011	DESIGN	0.4535123515565988	WITHOUT_CLASSIFICATION
// if the version of a newly instantiated object is not the same // as the version seed value, use that as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999995287576572	WITHOUT_CLASSIFICATION	4.7124234278314623E-7	DESIGN
// ie. we never have to null out a reference to // an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9997228554427574	WITHOUT_CLASSIFICATION	2.7714455724259E-4	DESIGN
// ignore this row, the collection is in process of // being loaded somewhere further "up" the stack	WITHOUT_CLASSIFICATION	0.9999845150430341	WITHOUT_CLASSIFICATION	1.548495696592489E-5	DESIGN
// Entity load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // 	WITHOUT_CLASSIFICATION	0.9999828917045722	WITHOUT_CLASSIFICATION	1.71082954277995E-5	DESIGN
// should be ok performance-wise to generate new delegate instances for each // request since these are locally stack-scoped.  Besides, it makes the code // much easier to read than the old TransactionHelper stuff...	WITHOUT_CLASSIFICATION	0.9987743066878416	WITHOUT_CLASSIFICATION	0.0012256933121584065	DESIGN
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9959856593316989	WITHOUT_CLASSIFICATION	0.004014340668301012	DESIGN
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9959856593316989	WITHOUT_CLASSIFICATION	0.004014340668301012	DESIGN
// wrap up any new collections directly referenced by the object // or its components	WITHOUT_CLASSIFICATION	0.9999999692254394	WITHOUT_CLASSIFICATION	3.077456055313316E-8	DESIGN
// remove any snapshot, not really for memory management purposes, but // rather because it might now be stale, and there is no longer any  // EntityEntry to take precedence // This is now handled by removeEntity() //session.getPersistenceContext().removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9998822897607832	WITHOUT_CLASSIFICATION	1.1771023921676242E-4	DESIGN
// skip this check for composite-ids relating to dom4j entity-mode; // alternatively, we could add a check to make sure the incoming id value is // an instance of Element...	WITHOUT_CLASSIFICATION	0.9636900254270544	WITHOUT_CLASSIFICATION	0.03630997457294565	DESIGN
// upgrade the lock if necessary: //lock(result, lockMode);	WITHOUT_CLASSIFICATION	0.9999844839595396	WITHOUT_CLASSIFICATION	1.551604046028044E-5	DESIGN
// now, any collections that are initialized // inside this block do not get updated - they // are ignored until the next flush	WITHOUT_CLASSIFICATION	0.9998688463006032	WITHOUT_CLASSIFICATION	1.3115369939671712E-4	DESIGN
//we must clone embedded composite identifiers, or  //we will get back the same instance that we pass in	WITHOUT_CLASSIFICATION	0.9999954250396184	WITHOUT_CLASSIFICATION	4.5749603816290215E-6	DESIGN
// Sub-insertions should occur before containing insertion so // Try to do the callback now	WITHOUT_CLASSIFICATION	0.9997498819515743	WITHOUT_CLASSIFICATION	2.5011804842567994E-4	DESIGN
//the entity is not associated with the session, so //try interceptor and unsaved-value	WITHOUT_CLASSIFICATION	0.9999997067607682	WITHOUT_CLASSIFICATION	2.9323923185431723E-7	DESIGN
//scan the query string for class names appearing in the from clause and replace //with all persistent implementors of the class/interface, returning multiple //query strings (make sure we don't pick up a class in the select clause!)	WITHOUT_CLASSIFICATION	0.5954564852696252	DESIGN	0.4045435147303747	WITHOUT_CLASSIFICATION
// save() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994398746526	WITHOUT_CLASSIFICATION	5.601253474288715E-7	DESIGN
// evict() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997037915266	WITHOUT_CLASSIFICATION	2.962084733818161E-7	DESIGN
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.5302002791232797	WITHOUT_CLASSIFICATION	0.4697997208767203	DESIGN
//if it is an uninitialized proxy, pointing //with this session, then when it is accessed, //the underlying instance will be "contained"	WITHOUT_CLASSIFICATION	0.9999996608421542	WITHOUT_CLASSIFICATION	3.3915784577765416E-7	DESIGN
// Generate an explicit join for the root dot node.   The implied joins will be collected and passed up // to the root dot node.	WITHOUT_CLASSIFICATION	0.9999229277728992	WITHOUT_CLASSIFICATION	7.707222710079723E-5	DESIGN
// A session is considered to contain an entity only if the entity has // an entry in the session's persistence context and the entry reports // that the entity has not been removed	WITHOUT_CLASSIFICATION	0.9999999998764364	WITHOUT_CLASSIFICATION	1.2356359303183693E-10	DESIGN
// Does the collection referenced by this FromElement // specify an order-by attribute?  If so, attach it to // the query's order-by	WITHOUT_CLASSIFICATION	0.9999992566392345	WITHOUT_CLASSIFICATION	7.433607654962369E-7	DESIGN
// ... and the token could be an identifer and the error is // a mismatched token error ...	WITHOUT_CLASSIFICATION	0.9995814406468386	WITHOUT_CLASSIFICATION	4.1855935316149293E-4	DESIGN
// If a where clause was specified in the update/delete query, use it to limit the // returned ids here...	WITHOUT_CLASSIFICATION	0.9999835472108922	WITHOUT_CLASSIFICATION	1.6452789107817963E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999538292619589	WITHOUT_CLASSIFICATION	4.617073804128677E-5	DESIGN
// Default implementation: // If this node has a data type, and that data type is not an association, then this is scalar.	WITHOUT_CLASSIFICATION	0.9999972844055693	WITHOUT_CLASSIFICATION	2.7155944306271214E-6	DESIGN
// Resolve the LHS fully, generate implicit joins.  Pass in the property name so that the resolver can // discover foreign key (id) properties.	WITHOUT_CLASSIFICATION	0.9860368675554403	WITHOUT_CLASSIFICATION	0.013963132444559748	DESIGN
// If the propertyType is null and there isn't a parent, just // stop now... there was a problem resolving the node anyway.	WITHOUT_CLASSIFICATION	0.9996025289832199	WITHOUT_CLASSIFICATION	3.9747101678006566E-4	DESIGN
//We do not look for an existing join on the same path, because //it makes sense to join twice on the same collection role	WITHOUT_CLASSIFICATION	0.9986958773062804	WITHOUT_CLASSIFICATION	0.0013041226937195824	DESIGN
// our parent is another dot node, meaning we are being further dereferenced. // thus we need to generate a join unless the parent refers to the associated // entity's PK (because 'our' table would know the FK).	WITHOUT_CLASSIFICATION	0.9971392514622783	WITHOUT_CLASSIFICATION	0.0028607485377217237	DESIGN
/*public final Currency getCurrency(int col) throws HibernateException {	WITHOUT_CLASSIFICATION	0.8749783006362932	WITHOUT_CLASSIFICATION	0.12502169936370672	DESIGN
// here, we have two possibilities: // 	WITHOUT_CLASSIFICATION	0.7284922658533325	WITHOUT_CLASSIFICATION	0.2715077341466675	DESIGN
// Set the unresolved path in this node and the parent. // Set the text for the parent.	WITHOUT_CLASSIFICATION	0.999570716170922	WITHOUT_CLASSIFICATION	4.2928382907810123E-4	DESIGN
// Get the first child to be considered.  Sub-classes may do this differently in order to skip nodes that // are not select expressions (e.g. DISTINCT).	WITHOUT_CLASSIFICATION	0.9999999827680108	WITHOUT_CLASSIFICATION	1.723198910574579E-8	DESIGN
// If this is an entity and the property is the identifier property, then use getIdentifierType(). //      Note that the propertyName.equals( propertyPath ) checks whether we have a component //      key reference, where the component class property name is the same as the //      entity id property name; if the two are not equal, this is the case and //      we'd need to "fall through" to using the property mapping.	WITHOUT_CLASSIFICATION	0.9999996887839193	WITHOUT_CLASSIFICATION	3.112160806937683E-7	DESIGN
// for a subquery, the alias to use depends on a few things (we // already know this is not an overall SELECT): //      1) if this FROM_ELEMENT represents a correlation to the //          outer-most query //              A) if the outer query represents a multi-table //                  persister, we need to use the given alias //                  in anticipation of one of the multi-table //                  executors being used (as this subquery will //                  actually be used in the "id select" phase //                  of that multi-table executor) //              B) otherwise, we need to use the persister's //                  table name as the column qualification //      2) otherwise (not correlated), use the given alias	WITHOUT_CLASSIFICATION	0.9999897158798616	WITHOUT_CLASSIFICATION	1.0284120138363242E-5	DESIGN
// Not a collection? // Return the entity property mapping.	WITHOUT_CLASSIFICATION	0.9999993914407401	WITHOUT_CLASSIFICATION	6.085592598073949E-7	DESIGN
// collection of <many-to-any/> mappings... // used to circumvent the component-collection check below...	WITHOUT_CLASSIFICATION	0.999966801629587	WITHOUT_CLASSIFICATION	3.319837041307751E-5	DESIGN
// Otherwise, the destination node was implied by the FROM clause and the FROM clause processor // will automatically add it in the right place.	WITHOUT_CLASSIFICATION	0.9970186344610413	WITHOUT_CLASSIFICATION	0.002981365538958619	DESIGN
// If the first identifier in the path referrs to the class alias (not the class name), then this // is a correlated subselect.  If it's a correlated sub-select, use the existing table alias.  Otherwise // generate a new one.	WITHOUT_CLASSIFICATION	0.9999984126279436	WITHOUT_CLASSIFICATION	1.587372056302839E-6	DESIGN
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999999936161491	WITHOUT_CLASSIFICATION	6.383850902574177E-9	DESIGN
// An ident node can represent an index expression if the ident // represents a naked property ref //      *Note: this makes the assumption (which is currently the case //      in the hql-sql grammar) that the ident is first resolved //      itself (addrExpr -> resolve()).  The other option, if that //      changes, is to call resolve from here; but it is //      currently un-needed overhead.	WITHOUT_CLASSIFICATION	0.9999064666050729	WITHOUT_CLASSIFICATION	9.353339492716667E-5	DESIGN
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9951685047138931	WITHOUT_CLASSIFICATION	0.004831495286107029	DESIGN
// If this is an implied join in a FROM clause, then use ANSI-style joining, and set the // flag on the FromElement that indicates that it was implied in the FROM clause itself.	WITHOUT_CLASSIFICATION	0.9999847739909622	WITHOUT_CLASSIFICATION	1.5226009037828286E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999538292619589	WITHOUT_CLASSIFICATION	4.617073804128677E-5	DESIGN
// For an explicit many-to-many relationship, add a second join from the intermediate  // (many-to-many) table to the destination table.  Also, make sure that the from element's  // idea of the destination is the destination table.	WITHOUT_CLASSIFICATION	0.9999084141257863	WITHOUT_CLASSIFICATION	9.158587421366704E-5	DESIGN
// Reset the node type, because the rest of the system is expecting FROM_FRAGMENT, all we wanted was // for the factory to create the right sub-class.  This might get reset again later on anyway to make the // SQL generation simpler.	WITHOUT_CLASSIFICATION	0.9864685299665379	WITHOUT_CLASSIFICATION	0.013531470033462046	DESIGN
//explicit = true;	WITHOUT_CLASSIFICATION	0.9999962422453368	WITHOUT_CLASSIFICATION	3.7577546632498025E-6	DESIGN
//sqlResultTypeList.add( type ); // Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999998011079656	WITHOUT_CLASSIFICATION	1.9889203432801467E-7	DESIGN
// If the expression list has exactly one expression, and the type of the expression is a collection // then this might be a collection function, such as index(c) or size(c).	WITHOUT_CLASSIFICATION	0.9999999818205805	WITHOUT_CLASSIFICATION	1.8179419538828625E-8	DESIGN
// Need to parse off the column qualifiers; this is assuming (which is true as of now) // that this is only used from update and delete HQL statement parsing	WITHOUT_CLASSIFICATION	0.9997409074495861	WITHOUT_CLASSIFICATION	2.590925504138262E-4	DESIGN
// for regression testing against output from the old parser... // found it easiest to simply reorder the FromElements here into ascending order // in terms of injecting them into the resulting sql ast in orders relative to those // expected by the old parser; this is definitely another of those "only needed // for regression purposes".  The SyntheticAndFactory, then, simply injects them as it // encounters them.	WITHOUT_CLASSIFICATION	0.9999999998591059	WITHOUT_CLASSIFICATION	1.4089400315717645E-10	DESIGN
// The uber-rule here is that we need to include  subclass joins if // the FromElement is in any way dereferenced by a property from // the subclass table; otherwise we end up with column references // qualified by a non-existent table reference in the resulting SQL...	WITHOUT_CLASSIFICATION	0.9999973526125943	WITHOUT_CLASSIFICATION	2.6473874058302467E-6	DESIGN
// classic translator does not support collection of ordinal // param metadata	WITHOUT_CLASSIFICATION	0.9999932595642425	WITHOUT_CLASSIFICATION	6.74043575749839E-6	DESIGN
// The following variables are stacks that keep information about each subexpression // in the list of nested subexpressions we are currently processing.	WITHOUT_CLASSIFICATION	0.9999997661983758	WITHOUT_CLASSIFICATION	2.338016240510029E-7	DESIGN
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.9986559519624745	WITHOUT_CLASSIFICATION	0.0013440480375255348	DESIGN
// should not be able to reach last without maxPosition being set // unless there are no results	WITHOUT_CLASSIFICATION	0.999999878088144	WITHOUT_CLASSIFICATION	1.2191185610310076E-7	DESIGN
// we found it in the temp PC.  Should indicate we are in the midst of processing a result set // containing eager fetches via join fetch	WITHOUT_CLASSIFICATION	0.9999983381698505	WITHOUT_CLASSIFICATION	1.6618301494753567E-6	DESIGN
//do not use proxiesByKey, since not all //proxies that point to this session's //instances are in that collection!	WITHOUT_CLASSIFICATION	0.999972636109139	WITHOUT_CLASSIFICATION	2.736389086100157E-5	DESIGN
// if there is no TM configured, we will not be able to access // the javax.transaction.Transaction object in order to // register a synch anyway.	WITHOUT_CLASSIFICATION	0.9999998660015184	WITHOUT_CLASSIFICATION	1.3399848173800176E-7	DESIGN
// Since the result set cursor is always left at the first // physical row after the "last processed", we need to jump // back one position to get the key value we are interested // in skipping	WITHOUT_CLASSIFICATION	0.9999999893956972	WITHOUT_CLASSIFICATION	1.0604302765581555E-8	DESIGN
//true if this is a query and we are loading multiple instances of the same collection role //otherwise this is a CollectionInitializer and we are loading up a single collection or batch	WITHOUT_CLASSIFICATION	0.9836860972874093	WITHOUT_CLASSIFICATION	0.016313902712590627	DESIGN
// we don't need to worry about existing version being uninitialized // because this block isn't called by a re-entrant load (re-entrant // loads _always_ have lock mode NONE)	WITHOUT_CLASSIFICATION	0.999897470913535	WITHOUT_CLASSIFICATION	1.0252908646506302E-4	DESIGN
// add temp entry so that the next step is circular-reference // safe - only needed because some types don't take proper // advantage of two-phase-load (esp. components)	WITHOUT_CLASSIFICATION	0.9999985012480227	WITHOUT_CLASSIFICATION	1.4987519773037531E-6	DESIGN
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999996736075387	WITHOUT_CLASSIFICATION	3.2639246128573035E-7	DESIGN
// log a message about potential connection leaks	WITHOUT_CLASSIFICATION	0.9999999997038079	WITHOUT_CLASSIFICATION	2.961920491939297E-10	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999538292619589	WITHOUT_CLASSIFICATION	4.617073804128677E-5	DESIGN
// this has been shown to happen occasionally in rare cases // when using a transaction manager + transaction-timeout // where the timeout calls back through Hibernate's // registered transaction synchronization on a separate // "reaping" thread.  In cases where that reaping thread // executes through this block at the same time the main // application thread does we can get into situations where // these CMEs occur.  And though it is not "allowed" per-se, // the end result without handling it specifically is infinite // looping.  So here, we simply break the loop	WITHOUT_CLASSIFICATION	0.9999999999893896	WITHOUT_CLASSIFICATION	1.0610411880113505E-11	DESIGN
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.7006493767241516	DESIGN	0.29935062327584844	WITHOUT_CLASSIFICATION
// can't cache this stuff either (per-invocation) // we are given a map of user-alias -> lock mode // create a new map of sql-alias -> lock mode	WITHOUT_CLASSIFICATION	0.9999931559177528	WITHOUT_CLASSIFICATION	6.844082247204019E-6	DESIGN
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns //getCollectionTable().createUniqueKey( getIdentifier().getConstraintColumns() );	WITHOUT_CLASSIFICATION	0.9999996271239698	WITHOUT_CLASSIFICATION	3.728760301109455E-7	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999596322506833	WITHOUT_CLASSIFICATION	4.0367749316679595E-5	DESIGN
//isSet = collection.isSet(); //isSorted = collection.isSorted();	WITHOUT_CLASSIFICATION	0.9999999950712463	WITHOUT_CLASSIFICATION	4.928753762185435E-9	DESIGN
//lists, arrays //sets, maps, bags	WITHOUT_CLASSIFICATION	0.999999722535995	WITHOUT_CLASSIFICATION	2.7746400499249616E-7	DESIGN
// we finish all the "removes" first to take care of possible unique // constraints and so that we can take better advantage of batching	WITHOUT_CLASSIFICATION	0.999999999577011	WITHOUT_CLASSIFICATION	4.2298902805383455E-10	DESIGN
//use a combination of foreign key columns and pk columns, since //the ordering of removal and addition is not guaranteed when //a child moves from one parent to another	WITHOUT_CLASSIFICATION	0.9998785515836496	WITHOUT_CLASSIFICATION	1.2144841635044745E-4	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999596322506833	WITHOUT_CLASSIFICATION	4.0367749316679595E-5	DESIGN
//information about properties of this class, //including inherited properties //(only really needed for updatable/insertable properties)	WITHOUT_CLASSIFICATION	0.9999971723114536	WITHOUT_CLASSIFICATION	2.8276885464816956E-6	DESIGN
// all this only really needs to consider properties // of this class, not its subclasses, but since we // are reusing code used for sequential selects, we // use the subclass closure	WITHOUT_CLASSIFICATION	0.9981277496366606	WITHOUT_CLASSIFICATION	0.0018722503633394306	DESIGN
// Here we render the select column list based on the properties defined as being generated. // For partial component generation, we currently just re-select the whole component // rather than trying to handle the individual generated portions.	WITHOUT_CLASSIFICATION	0.9999663182517916	WITHOUT_CLASSIFICATION	3.36817482083934E-5	DESIGN
// this is the root (versioned) table, and we are using version-based // optimistic locking;  if we are not updating the version, also don't // check it (unless this is a "generated" version column)!	WITHOUT_CLASSIFICATION	0.9963208894044505	WITHOUT_CLASSIFICATION	0.0036791105955493544	DESIGN
//optimistic-lock="all", include all updatable properties //optimistic-lock="dirty", include all properties we are updating this time	WITHOUT_CLASSIFICATION	0.9998412074767532	WITHOUT_CLASSIFICATION	1.5879252324685618E-4	DESIGN
// this property belongs to the table, and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999212797273094	WITHOUT_CLASSIFICATION	7.87202726906802E-5	DESIGN
// check to see if the connection is in auto-commit  // mode (no connection means aggressive connection // release outside a JTA transaction context, so MUST // be autocommit mode)	WITHOUT_CLASSIFICATION	0.9999999999806346	WITHOUT_CLASSIFICATION	1.9365303182311637E-11	DESIGN
// need to treat this as if it where optimistic-lock="all" (dirty does *not* make sense); // first we need to locate the "loaded" state // // Note, it potentially could be a proxy, so perform the location the safe way...	WITHOUT_CLASSIFICATION	0.998322795587095	WITHOUT_CLASSIFICATION	0.0016772044129049733	DESIGN
// we *always* assume an instance with a null // identifier or no identifier property is unsaved!	WITHOUT_CLASSIFICATION	0.9999981840722818	WITHOUT_CLASSIFICATION	1.815927718199167E-6	DESIGN
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.9996404837655833	WITHOUT_CLASSIFICATION	3.5951623441661773E-4	DESIGN
//allow any identifier quoted with backtick //only recognizes identifiers beginning with a letter	WITHOUT_CLASSIFICATION	0.9999883771382566	WITHOUT_CLASSIFICATION	1.1622861743362015E-5	DESIGN
//following doesn't handle (null, not null) but unnecessary //since this would mean all rows	WITHOUT_CLASSIFICATION	0.9661797658904306	WITHOUT_CLASSIFICATION	0.0338202341095693	DESIGN
// IMPL NOTE : due to the delayed population of setters (setters cached // 	WITHOUT_CLASSIFICATION	0.99399741689962	WITHOUT_CLASSIFICATION	0.006002583100380024	DESIGN
// we need to dirty check collections, since they can cause an owner // version number increment	WITHOUT_CLASSIFICATION	0.9998577957499571	WITHOUT_CLASSIFICATION	1.4220425004283666E-4	DESIGN
//return the id, so we can use it to reset the proxy id //return result;	WITHOUT_CLASSIFICATION	0.9999241270640089	WITHOUT_CLASSIFICATION	7.58729359910966E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999538292619589	WITHOUT_CLASSIFICATION	4.617073804128677E-5	DESIGN
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9998344109317423	WITHOUT_CLASSIFICATION	1.6558906825775348E-4	DESIGN
// We now have the value of the property-ref we reference.  However, // we need to dig a little deeper, as that property might also be // an entity type, in which case we need to resolve its identitifier	WITHOUT_CLASSIFICATION	0.999685715838959	WITHOUT_CLASSIFICATION	3.1428416104090675E-4	DESIGN
// Retrieve the value of the designated column in the current row of this // ResultSet object as a java.io.Reader object	WITHOUT_CLASSIFICATION	0.9999985806144314	WITHOUT_CLASSIFICATION	1.4193855686384778E-6	DESIGN
//not absolutely necessary, but helps for some //equals()/hashCode() implementations	WITHOUT_CLASSIFICATION	0.9998568035478146	WITHOUT_CLASSIFICATION	1.431964521853253E-4	DESIGN
//this should be a call to resolve(), not resolveIdentifier(),  //'cos it might be a property-ref, and we did not cache the //referenced value	WITHOUT_CLASSIFICATION	0.9959573775319909	DESIGN	0.004042622468009028	WITHOUT_CLASSIFICATION
// If we have <tt>not-found="ignore"</tt> association mapped to a // formula, we always need to dirty check it, so we can update the // second-level cache	WITHOUT_CLASSIFICATION	0.9999999799773226	WITHOUT_CLASSIFICATION	2.00226773879891E-8	DESIGN
// can't just return null here, since that would // cause an owning component to become null	WITHOUT_CLASSIFICATION	0.9997946561054525	WITHOUT_CLASSIFICATION	2.0534389454758355E-4	DESIGN
//for arrays, replaceElements() may return a different reference, since //the array length might not match	WITHOUT_CLASSIFICATION	0.9999990415257359	WITHOUT_CLASSIFICATION	9.584742641007074E-7	DESIGN
// actual cache of the entries.  soft references are used for both the keys and the // values here since the values pertaining to the MRU entries are kept in a // seperate hard reference cache (to avoid their enqueuement/garbage-collection).	WITHOUT_CLASSIFICATION	0.9999999989049994	WITHOUT_CLASSIFICATION	1.0950007019186304E-9	DESIGN
// as soon as we encounter our first letter, return the substring // from that position	WITHOUT_CLASSIFICATION	0.9999999716737262	WITHOUT_CLASSIFICATION	2.8326273786505825E-8	DESIGN
// Note : expected in the syntax: //      type=listenerClass //          ({sep}type=listenerClass)* // where {sep} is any whitespace or comma	WITHOUT_CLASSIFICATION	0.999999993420949	WITHOUT_CLASSIFICATION	6.579051009685375E-9	DESIGN
// isTransactionCallbackRegistered denotes whether any Hibernate // Transaction has registered as a callback against this // JDBCContext; only one such callback is allowed.  Directly // serializing this value causes problems with JDBCTransaction, // or really any Transaction impl where the callback is local // to the Transaction instance itself, since that Transaction // is not serialized along with the JDBCContext.  Thus we // handle that fact here explicitly...	WITHOUT_CLASSIFICATION	0.9998603214555543	WITHOUT_CLASSIFICATION	1.3967854444568487E-4	DESIGN
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999997977013275	WITHOUT_CLASSIFICATION	2.0229867260779895E-7	DESIGN
// We call getKeyFromResultSet() here so that we can know the // key value upon which to perform the breaking logic.  However, // it is also then called from getRowFromResultSet() which is certainly // not the most efficient.  But the call here is needed, and there // currently is no other way without refactoring of the doQuery()/getRowFromResultSet() // methods	WITHOUT_CLASSIFICATION	0.9999782147977793	WITHOUT_CLASSIFICATION	2.178520222072567E-5	DESIGN
// This check is needed since processing leaves the cursor // after the last physical row for the current logical row; // thus if we are after the last physical row, this might be // caused by either: //      1) scrolling to the last logical row //      2) scrolling past the last logical row // In the latter scenario, the previous logical row // really is the last logical row. // // In all other cases, we should process back two // logical records (the current logic row, plus the // previous logical row).	WITHOUT_CLASSIFICATION	0.9997067358896689	WITHOUT_CLASSIFICATION	2.9326411033113903E-4	DESIGN
// and perform the load	WITHOUT_CLASSIFICATION	0.9999994228170638	WITHOUT_CLASSIFICATION	5.771829361696392E-7	DESIGN
//important: reuse the same event instances for performance!	WITHOUT_CLASSIFICATION	0.9745417075690403	WITHOUT_CLASSIFICATION	0.025458292430959723	DESIGN
//this is a query and we are loading multiple instances of the same collection role	WITHOUT_CLASSIFICATION	0.9811120378567155	WITHOUT_CLASSIFICATION	0.018887962143284504	DESIGN
// we found a collection element in the result set	WITHOUT_CLASSIFICATION	0.9999741331411572	WITHOUT_CLASSIFICATION	2.5866858842664507E-5	DESIGN
// we did not find a collection element in the result set, so we // ensure that a collection is created with the owner's identifier, // since what we have is an empty collection	WITHOUT_CLASSIFICATION	0.999998891478949	WITHOUT_CLASSIFICATION	1.108521050874672E-6	DESIGN
// this is a collection initializer, so we must create a collection // for each of the passed-in keys, to account for the possibility // that the collection is empty and has no rows in the result set	WITHOUT_CLASSIFICATION	0.9990493928338374	WITHOUT_CLASSIFICATION	9.50607166162643E-4	DESIGN
// grab its state from the ResultSet and keep it in the Session // (but don't yet initialize the object itself) // note that we acquire LockMode.READ even if it was not requested	WITHOUT_CLASSIFICATION	0.9999963318203452	WITHOUT_CLASSIFICATION	3.6681796547831484E-6	DESIGN
// a many-to-many; // decrement currentDepth here to allow join across the association table // without exceeding MAX_FETCH_DEPTH (i.e. the "currentDepth - 1" bit)	WITHOUT_CLASSIFICATION	0.9999999565527012	WITHOUT_CLASSIFICATION	4.3447298778470806E-8	DESIGN
// if not a composite key, use "foo in (?, ?, ?)" for batching // if no batch, and not a composite key, use "foo = ?"	WITHOUT_CLASSIFICATION	0.9999999823540047	WITHOUT_CLASSIFICATION	1.7645995422050435E-8	DESIGN
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999999344074295	WITHOUT_CLASSIFICATION	6.559257043056569E-8	DESIGN
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9999956979166589	WITHOUT_CLASSIFICATION	4.302083341155568E-6	DESIGN
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9999956979166589	WITHOUT_CLASSIFICATION	4.302083341155568E-6	DESIGN
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.9998962936397295	WITHOUT_CLASSIFICATION	1.0370636027042955E-4	DESIGN
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999995762669784	WITHOUT_CLASSIFICATION	4.237330216416529E-7	DESIGN
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999979712719275	WITHOUT_CLASSIFICATION	2.028728072449365E-6	DESIGN
/**	WITHOUT_CLASSIFICATION	0.9616571996252745	DESIGN	0.038342800374725525	WITHOUT_CLASSIFICATION
// ignore	WITHOUT_CLASSIFICATION	0.9999978563314406	WITHOUT_CLASSIFICATION	2.1436685594845756E-6	DESIGN
// ignore	WITHOUT_CLASSIFICATION	0.9999978563314406	WITHOUT_CLASSIFICATION	2.1436685594845756E-6	DESIGN
//        }	WITHOUT_CLASSIFICATION	0.9999828461380578	WITHOUT_CLASSIFICATION	1.7153861942258683E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999538292619589	WITHOUT_CLASSIFICATION	4.617073804128677E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999538292619589	WITHOUT_CLASSIFICATION	4.617073804128677E-5	DESIGN
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9999970680154336	WITHOUT_CLASSIFICATION	2.931984566282148E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999538292619589	WITHOUT_CLASSIFICATION	4.617073804128677E-5	DESIGN
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.9999825541303863	WITHOUT_CLASSIFICATION	1.7445869613708354E-5	DESIGN
// at this point we have (drivingSqlAlias) the SQL alias of the driving table // corresponding to the given user alias.  However, the driving table is not // (necessarily) the table against which we want to apply locks.  Mainly, // the exception case here is joined-subclass hierarchies where we instead // want to apply the lock against the root table (for all other strategies, // it just happens that driving and root are the same).	WITHOUT_CLASSIFICATION	0.9999999996902053	WITHOUT_CLASSIFICATION	3.097947979985322E-10	DESIGN
// the column doesnt exist at all.	WITHOUT_CLASSIFICATION	0.9999998951062159	WITHOUT_CLASSIFICATION	1.048937840354557E-7	DESIGN
// we have a mapped identifier property and the root of // the incoming property path matched that identifier // property	WITHOUT_CLASSIFICATION	0.9999994996388976	WITHOUT_CLASSIFICATION	5.00361102458265E-7	DESIGN
// we have an embedded composite identifier	WITHOUT_CLASSIFICATION	0.999999330830752	WITHOUT_CLASSIFICATION	6.691692480373986E-7	DESIGN
// both many-to-one and one-to-one are represented as a // Property.  EntityPersister is relying on this value to // determine "lazy fetch groups" in terms of field-level // interception.  So we need to make sure that we return // true here for the case of many-to-one and one-to-one // with lazy="no-proxy" // // * impl note - lazy="no-proxy" currently forces both // lazy and unwrap to be set to true.  The other case we // are extremely interested in here is that of lazy="proxy" // where lazy is set to true, but unwrap is set to false. // thus we use both here under the assumption that this // return is really only ever used during persister // construction to determine the lazy property/field fetch // groupings.  If that assertion changes then this check // needs to change as well.  Partially, this is an issue with // the overloading of the term "lazy" here...	WITHOUT_CLASSIFICATION	0.9996081650214277	WITHOUT_CLASSIFICATION	3.9183497857232964E-4	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994251303514873	WITHOUT_CLASSIFICATION	5.748696485126499E-4	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994251303514873	WITHOUT_CLASSIFICATION	5.748696485126499E-4	DESIGN
/*rootTableName = persistentClass.getRootTable().getQualifiedName( 	WITHOUT_CLASSIFICATION	0.9999676154087955	WITHOUT_CLASSIFICATION	3.2384591204513005E-5	DESIGN
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.999935450066091	WITHOUT_CLASSIFICATION	6.45499339091059E-5	DESIGN
// Custom sql	WITHOUT_CLASSIFICATION	0.9999991718602759	WITHOUT_CLASSIFICATION	8.281397241198623E-7	DESIGN
/*protected void initPropertyPaths(	WITHOUT_CLASSIFICATION	0.9757749566519369	WITHOUT_CLASSIFICATION	0.02422504334806304	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999894766461872	WITHOUT_CLASSIFICATION	1.0523353812698034E-5	DESIGN
//Custom SQL (would be better if these were private)	WITHOUT_CLASSIFICATION	0.9320499235367138	WITHOUT_CLASSIFICATION	0.0679500764632862	DESIGN
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994851511526724	WITHOUT_CLASSIFICATION	5.148488473276481E-4	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999894766461872	WITHOUT_CLASSIFICATION	1.0523353812698034E-5	DESIGN
// aliases for identifier ( alias.id ); skip if the entity defines a non-id property named 'id'	WITHOUT_CLASSIFICATION	0.9999991432722776	WITHOUT_CLASSIFICATION	8.567277224377084E-7	DESIGN
//decide which ResultSet to get the property value from:	WITHOUT_CLASSIFICATION	0.9999460422126576	WITHOUT_CLASSIFICATION	5.395778734229852E-5	DESIGN
//note: it is conceptually possible that a UserType could map null to //	WITHOUT_CLASSIFICATION	0.9972004531068089	WITHOUT_CLASSIFICATION	0.0027995468931911183	DESIGN
// the contract of EntityTuplizer.determineConcreteSubclassEntityName says that returning null // is an indication that the specified entity-name (this.getEntityName) should be used.	WITHOUT_CLASSIFICATION	0.999293254291154	WITHOUT_CLASSIFICATION	7.067457088459285E-4	DESIGN
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.9996404837655833	WITHOUT_CLASSIFICATION	3.5951623441661773E-4	DESIGN
// cache these since they are stateless // this one could even be static...	WITHOUT_CLASSIFICATION	0.8836637744391905	WITHOUT_CLASSIFICATION	0.11633622556080943	DESIGN
//"as" is not in KEYWORDS	WITHOUT_CLASSIFICATION	0.9997289179457383	WITHOUT_CLASSIFICATION	2.7108205426174355E-4	DESIGN
// --Commented out by Inspection (12/4/04 9:10 AM): public abstract void addCondition(String alias, String[] columns, String condition);	WITHOUT_CLASSIFICATION	0.9999999951465866	WITHOUT_CLASSIFICATION	4.85341342721645E-9	DESIGN
//use the id column alias	WITHOUT_CLASSIFICATION	0.9999881713659736	WITHOUT_CLASSIFICATION	1.1828634026250896E-5	DESIGN
//private List aliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999999871745765	WITHOUT_CLASSIFICATION	1.2825423526036842E-8	DESIGN
//columns.add(columnName); //aliases.add(tableAlias);	WITHOUT_CLASSIFICATION	0.9999982147361415	WITHOUT_CLASSIFICATION	1.785263858512735E-6	DESIGN
//where fragment must be empty!	WITHOUT_CLASSIFICATION	0.9990862376461502	WITHOUT_CLASSIFICATION	9.137623538497831E-4	DESIGN
// revert to traditional hibernate behavior of setting initialPoolSize to minPoolSize // unless otherwise specified with a c3p0.*-style parameter.	WITHOUT_CLASSIFICATION	0.9997531153978579	WITHOUT_CLASSIFICATION	2.468846021420818E-4	DESIGN
//arbitrary on clause ignored!!	WITHOUT_CLASSIFICATION	0.9999869016700533	WITHOUT_CLASSIFICATION	1.3098329946781576E-5	DESIGN
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9999971185826817	WITHOUT_CLASSIFICATION	2.881417318361045E-6	DESIGN
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9999971185826817	WITHOUT_CLASSIFICATION	2.881417318361045E-6	DESIGN
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999798310020909	WITHOUT_CLASSIFICATION	2.0168997909113925E-5	DESIGN
// Essentially: // 1) If we have a local (Hibernate) transaction in progress //      and it already has the UserTransaction cached, use that //      UserTransaction to determine the status. // 2) If a transaction manager has been located, use //      that transaction manager to determine the status. // 3) Finally, as the last resort, try to lookup the //      UserTransaction via JNDI and use that to determine the //      status.	WITHOUT_CLASSIFICATION	0.9999905840574519	WITHOUT_CLASSIFICATION	9.415942548018845E-6	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.9994521443640757	WITHOUT_CLASSIFICATION	5.478556359242642E-4	DESIGN
//swallow it (the transaction _was_ successful or successfully rolled back)	WITHOUT_CLASSIFICATION	0.9999979704132174	WITHOUT_CLASSIFICATION	2.0295867826479782E-6	DESIGN
// ignore it	WITHOUT_CLASSIFICATION	0.9999993824651696	WITHOUT_CLASSIFICATION	6.175348303847167E-7	DESIGN
// we need to dirty check many-to-ones with not-found="ignore" in order  // to update the cache (not the database), since in this case a null // entity reference can lose information	WITHOUT_CLASSIFICATION	0.9999437320826248	WITHOUT_CLASSIFICATION	5.626791737519509E-5	DESIGN
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999623264819687	WITHOUT_CLASSIFICATION	3.76735180312627E-5	DESIGN
// Regions can get instantiated in the course of normal work (e.g. // a named query region will be created the first time the query is // executed), so suspend any ongoing tx	WITHOUT_CLASSIFICATION	0.9999999944692681	WITHOUT_CLASSIFICATION	5.530731818663878E-9	DESIGN
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999979074838403	WITHOUT_CLASSIFICATION	2.092516159700035E-6	DESIGN
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999848437879262	WITHOUT_CLASSIFICATION	1.515621207380112E-5	DESIGN
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999678568905912	WITHOUT_CLASSIFICATION	3.214310940877471E-5	DESIGN
// NOTE : this is being used from the process of shutting down a // SessionFactory. Specific things to consider: // (1) this clearing of the region should not propagate to // other nodes on the cluster (if any); this is the // cache-mode-local option bit... // (2) really just trying a best effort to cleanup after // ourselves; lock failures, etc are not critical here; // this is the fail-silently option bit...	WITHOUT_CLASSIFICATION	0.8684525501527547	DESIGN	0.13154744984724534	WITHOUT_CLASSIFICATION
// need to extract the component values and check for subtype replacements...	WITHOUT_CLASSIFICATION	0.9993332281311501	WITHOUT_CLASSIFICATION	6.667718688498934E-4	DESIGN
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999996172304636	WITHOUT_CLASSIFICATION	3.827695363845635E-7	DESIGN
// for now, just "re-flatten" the metamodel since this is temporary stuff anyway (HHH-1907)	WITHOUT_CLASSIFICATION	0.9999716302367947	WITHOUT_CLASSIFICATION	2.8369763205314596E-5	DESIGN
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.999913334757452	WITHOUT_CLASSIFICATION	8.666524254803444E-5	DESIGN
//This solution would allow us to eliminate the owner arg to disassemble(), but //what if the collection was null, and then later had elements added? seems unsafe //session.getPersistenceContext().getCollectionEntry( (PersistentCollection) value ).getKey();	WITHOUT_CLASSIFICATION	0.9999986265179543	WITHOUT_CLASSIFICATION	1.3734820455704877E-6	DESIGN
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999998694643332	WITHOUT_CLASSIFICATION	1.3053566679490279E-7	DESIGN
// some collections are not lazy:	WITHOUT_CLASSIFICATION	0.9999914995034724	WITHOUT_CLASSIFICATION	8.500496527570326E-6	DESIGN
// Here we don't want to suspend the tx. If we do: // 1) We might be caching query results that reflect uncommitted // changes. No tx == no WL on cache node, so other threads // can prematurely see those query results // 2) No tx == immediate replication. More overhead, plus we // spread issue #1 above around the cluster	WITHOUT_CLASSIFICATION	0.9996944825213725	WITHOUT_CLASSIFICATION	3.0551747862747337E-4	DESIGN
// return the (fully resolved) identifier value, but do not resolve // to the actual referenced entity instance // NOTE: the owner of the association is not really the owner of the id!	WITHOUT_CLASSIFICATION	0.9929865696286893	WITHOUT_CLASSIFICATION	0.007013430371310719	DESIGN
// Add a zero (or quite low) timeout option so we don't block. // Ignore any TimeoutException. Basically we forego caching the // query result in order to avoid blocking. // Reads are done with suspended tx, so they should not hold the // lock for long.  Not caching the query result is OK, since // any subsequent read will just see the old result with its // out-of-date timestamp; that result will be discarded and the // db query performed again.	WITHOUT_CLASSIFICATION	0.9999977535214302	WITHOUT_CLASSIFICATION	2.2464785698165445E-6	DESIGN
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.7713961273061873	DESIGN	0.2286038726938126	WITHOUT_CLASSIFICATION
// We have the JBCWriteMutex, so no other *local* thread will  // be trying to write this key.  // It's possible here some remote thread has come in and // changed the values again, but since we are reading the // values to write to JBC right now, we know we are writing // the latest values; i.e. we don't assume that what we cached // in entry.update() above is what we should write to JBC *now*. // Our write could be redundant, i.e. we are writing what // some remote thread just came in an wrote.  There is a chance  // that yet another remote thread will update us, and we'll then // overwrite that later data in JBC.  But, all remote nodes will // ignore that change in their localCache; the only place it  // will live will be in JBC, where it can only effect the  // initial state transfer values on newly joined nodes  // (i.e. populateLocalCache()).	WITHOUT_CLASSIFICATION	0.9913253120117331	WITHOUT_CLASSIFICATION	0.008674687988266904	DESIGN
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999997358143876	WITHOUT_CLASSIFICATION	2.6418561236021183E-7	DESIGN
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999997358143876	WITHOUT_CLASSIFICATION	2.6418561236021183E-7	DESIGN
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9999842654536958	WITHOUT_CLASSIFICATION	1.573454630422809E-5	DESIGN
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9999842168744698	WITHOUT_CLASSIFICATION	1.5783125530157532E-5	DESIGN
// we need to obtain the lock before any actions are // executed, since this may be an inverse="true" // bidirectional association and it is one of the // earlier entity actions which actually updates // the database (this action is resposible for // second-level cache invalidation only)	WITHOUT_CLASSIFICATION	0.9999983036044712	WITHOUT_CLASSIFICATION	1.696395528742866E-6	DESIGN
//postDelete: // After actually deleting a row, record the fact that the instance no longer  // exists on the database (needed for identity-column key generation), and // remove it from the session cache	WITHOUT_CLASSIFICATION	0.9999997209013427	WITHOUT_CLASSIFICATION	2.790986573899107E-7	DESIGN
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999900424544527	WITHOUT_CLASSIFICATION	9.957545547326572E-6	DESIGN
// todo : what else to do here?	DESIGN	0.963035824903827	WITHOUT_CLASSIFICATION	0.036964175096173044	DESIGN
//put() has nowait semantics, is this really appropriate? //note that it needs to be async replication, never local or sync	DESIGN	0.999197845319227	WITHOUT_CLASSIFICATION	8.021546807730468E-4	DESIGN
// 'hibernate.temp.use_jdbc_metadata_defaults' is a temporary magic value. // The need for it is intended to be alleviated with future developement, thus it is // not defined as an Environment constant... // // it is used to control whether we should consult the JDBC metadata to determine // certain Settings default values; it is useful to *not* do this when the database // may not be available (mainly in tools usage).	DESIGN	0.8160502329173565	WITHOUT_CLASSIFICATION	0.18394976708264354	DESIGN
//TODO: get SQL rendering out of this package!	DESIGN	0.9999971478949088	DESIGN	2.8521050913249E-6	WITHOUT_CLASSIFICATION
//TODO: get SQL rendering out of this package!	DESIGN	0.9999971478949088	DESIGN	2.8521050913249E-6	WITHOUT_CLASSIFICATION
// todo : eventually merge this with TreeCache and just add optional opt-lock support there.	DESIGN	0.9971039606587239	WITHOUT_CLASSIFICATION	0.0028960393412760977	DESIGN
// can happen because of the multiple ways Cache.remove() // can be invoked :(	DESIGN	0.9913183645934254	WITHOUT_CLASSIFICATION	0.00868163540657466	DESIGN
// work around the "feature" where tree cache is validating the // inserted node during the next transaction.  no idea...	DESIGN	0.9988216333354181	WITHOUT_CLASSIFICATION	0.0011783666645819848	DESIGN
/**     * FIXME Per the RegionFactory class Javadoc, this constructor version     * should not be necessary.     *      * @param props The configuration properties     */	DESIGN	0.9994989151114101	DESIGN	5.010848885898876E-4	WITHOUT_CLASSIFICATION
/**     * FIXME Per the RegionFactory class Javadoc, this constructor version     * should not be necessary.     *      * @param props The configuration properties     */	DESIGN	0.9994989151114101	DESIGN	5.010848885898876E-4	WITHOUT_CLASSIFICATION
// FIXME Hacky workaround to JBCACHE-1202	DESIGN	0.9999978501003114	DESIGN	2.1498996886029076E-6	WITHOUT_CLASSIFICATION
// FIXME Hacky workaround to JBCACHE-1202	DESIGN	0.9999978501003114	DESIGN	2.1498996886029076E-6	WITHOUT_CLASSIFICATION
// TODO: I considered validating TS cache config here, // but decided to defer unti getTimestampsCacheInstance() in case the  // cache is never actually used	DESIGN	0.9999944140878405	DESIGN	5.58591215951146E-6	WITHOUT_CLASSIFICATION
// TODO Is this a valid operation on a timestamps cache?	DESIGN	0.9803838292295969	DESIGN	0.01961617077040308	WITHOUT_CLASSIFICATION
// TODO Is this a valid operation on a timestamps cache?	DESIGN	0.9803838292295969	DESIGN	0.01961617077040308	WITHOUT_CLASSIFICATION
// TODO Why not use the timestamp in a DataVersion?	DESIGN	0.9998222851160624	DESIGN	1.7771488393761176E-4	WITHOUT_CLASSIFICATION
// can happen because of the multiple ways Cache.remove() // can be invoked :(	DESIGN	0.9913183645934254	WITHOUT_CLASSIFICATION	0.00868163540657466	DESIGN
// work around the "feature" where tree cache is validating the // inserted node during the next transaction. no idea...	DESIGN	0.9992646660175781	WITHOUT_CLASSIFICATION	7.353339824219964E-4	DESIGN
//swaldman 2004-02-07: modify to allow null values to signify fall through to c3p0 PoolConfig defaults	DESIGN	0.999999834745085	WITHOUT_CLASSIFICATION	1.6525491507232567E-7	DESIGN
// turn hibernate.c3p0.* into c3p0.*, so c3p0 // gets a chance to see all hibernate.c3p0.*	DESIGN	0.9999998286806152	WITHOUT_CLASSIFICATION	1.7131938485320042E-7	DESIGN
//TODO: this bit actually has to be called after all cascades! //      but since identity insert is called *synchronously*, //      instead of asynchronously as other actions, it isn't	DESIGN	0.9924614079158384	DESIGN	0.007538592084161676	WITHOUT_CLASSIFICATION
//TODO: reenable if we also fix the above todo	DESIGN	0.9999188087759798	DESIGN	8.119122402017249E-5	WITHOUT_CLASSIFICATION
//TODO: inefficient if that cache is just going to ignore the updated state!	DESIGN	0.9998428190865979	DESIGN	1.5718091340207322E-4	WITHOUT_CLASSIFICATION
// we may be screwed here since the collection action is about to execute // and we do not know the final owner key value	DESIGN	0.9999987100203277	WITHOUT_CLASSIFICATION	1.2899796722164257E-6	DESIGN
/** Create an action that will evict collection and entity regions based on queryspaces (table names).	DESIGN	0.9998913978387093	WITHOUT_CLASSIFICATION	1.0860216129061686E-4	DESIGN
// todo : what else to do here?	DESIGN	0.963035824903827	WITHOUT_CLASSIFICATION	0.036964175096173044	DESIGN
// todo : modify the class definition if not already transformed...	DESIGN	0.9999989925686932	WITHOUT_CLASSIFICATION	1.0074313067790784E-6	DESIGN
// todo : what else to do here?	DESIGN	0.963035824903827	WITHOUT_CLASSIFICATION	0.036964175096173044	DESIGN
// this is called by SessionFactory irregardless; we just disregard here; // could also add a check to SessionFactory to only conditionally call start	DESIGN	0.9917352109990358	WITHOUT_CLASSIFICATION	0.008264789000964222	DESIGN
// this is called by SessionFactory irregardless; we just disregard here; // could also add a check to SessionFactory to only conditionally call stop	DESIGN	0.990491203571487	WITHOUT_CLASSIFICATION	0.009508796428513048	DESIGN
//TODO: to handle concurrent writes correctly, this should return a Lock to the client	DESIGN	0.9999999716567529	DESIGN	2.8343247007091307E-8	WITHOUT_CLASSIFICATION
//put() has nowait semantics, is this really appropriate? //note that it needs to be async replication, never local or sync	DESIGN	0.999197845319227	WITHOUT_CLASSIFICATION	8.021546807730468E-4	DESIGN
//TODO: to handle concurrent writes correctly, the client should pass in a Lock	DESIGN	0.9999718032391873	DESIGN	2.8196760812743395E-5	WITHOUT_CLASSIFICATION
//TODO: assumes all collections disassemble to an array!	DESIGN	0.7079963481269002	DESIGN	0.29200365187309973	WITHOUT_CLASSIFICATION
//TODO: reuse the PreLoadEvent	DESIGN	0.9998609115989139	DESIGN	1.390884010860328E-4	WITHOUT_CLASSIFICATION
// todo: this was added to support initializing an entity's EntityEntry snapshot during reattach; // this should be refactored to instead expose a method to assemble a EntityEntry based on this // state for return.	DESIGN	0.8350290874941317	WITHOUT_CLASSIFICATION	0.16497091250586823	DESIGN
// todo : what is the implication of this?	DESIGN	0.98931598838032	DESIGN	0.010684011619680005	WITHOUT_CLASSIFICATION
// use COUNT as the default.  This mimics the old behavior, although // NONE might be a better option moving forward in the case of callable	DESIGN	0.9862324825404599	WITHOUT_CLASSIFICATION	0.013767517459539963	DESIGN
/* TODO: joinKeyColumnName & foreignKeyColumnName should be called either here or at a	DESIGN	0.9999996846730638	DESIGN	3.1532693625123893E-7	WITHOUT_CLASSIFICATION
//TODO: suck this into initLaziness!	DESIGN	0.9999999482392212	DESIGN	5.1760778750394824E-8	WITHOUT_CLASSIFICATION
// we have to set up the table later!! yuck	DESIGN	0.9999165268059352	WITHOUT_CLASSIFICATION	8.34731940647774E-5	DESIGN
//TODO: better to degrade to lazy="false" if uninstrumented	DESIGN	0.9973420707888283	DESIGN	0.0026579292111717223	WITHOUT_CLASSIFICATION
// todo : again, how *should* this work for non-pojo entities?	DESIGN	0.9986428889507869	DESIGN	0.0013571110492131258	WITHOUT_CLASSIFICATION
// TODO: this is a bit of copy/paste from IndexedCollection.createPrimaryKey()	DESIGN	0.9999891787753884	DESIGN	1.0821224611507853E-5	WITHOUT_CLASSIFICATION
// This inner class implements a case statement....perhaps im being a bit over-clever here	DESIGN	0.6838017396960422	WITHOUT_CLASSIFICATION	0.31619826030395787	DESIGN
//TODO: bad implementation, cos it depends upon ordering of mapping doc //      fixing this requires that Collection/PersistentClass gain access //      to the Mappings reference from Configuration (or the filterDefinitions //      map directly) sometime during Configuration.buildSessionFactory //      (after all the types/filter-defs are known and before building //      persisters).	DESIGN	0.6858789213008258	DESIGN	0.31412107869917405	WITHOUT_CLASSIFICATION
//use of a stringbuffer to workaround a JDK bug	DESIGN	0.998160684018998	DESIGN	0.0018393159810019338	WITHOUT_CLASSIFICATION
// hack/workaround as sqlquery impl depend on having a key.	DESIGN	0.999947533045935	DESIGN	5.2466954065074585E-5	WITHOUT_CLASSIFICATION
//FIXME: get the PersistentClass	DESIGN	0.9913938127147175	WITHOUT_CLASSIFICATION	0.008606187285282533	DESIGN
//FIXME: get the PersistentClass	DESIGN	0.9913938127147175	WITHOUT_CLASSIFICATION	0.008606187285282533	DESIGN
//Icky workaround for MySQL bug:	DESIGN	0.9925088729123975	DESIGN	0.007491127087602555	WITHOUT_CLASSIFICATION
//TODO: Somehow add the newly created foreign keys to the internal collection	DESIGN	0.8534262203981333	DESIGN	0.14657377960186677	WITHOUT_CLASSIFICATION
//TODO possibly relax that	DESIGN	0.9828502259282453	DESIGN	0.01714977407175473	WITHOUT_CLASSIFICATION
//TODO possibly relax that	DESIGN	0.9828502259282453	DESIGN	0.01714977407175473	WITHOUT_CLASSIFICATION
//TODO possibly relax that	DESIGN	0.9828502259282453	DESIGN	0.01714977407175473	WITHOUT_CLASSIFICATION
//use of a stringbuffer to workaround a JDK bug	DESIGN	0.998160684018998	DESIGN	0.0018393159810019338	WITHOUT_CLASSIFICATION
//use a degenerated strategy for backward compatibility	DESIGN	0.999198837449194	WITHOUT_CLASSIFICATION	8.011625508058518E-4	DESIGN
// Sets can be just a view of a part of another collection. // do we need to copy it to be sure it won't be changing // underneath us? // ie. this.set.addAll(set);	DESIGN	0.9578183269385564	WITHOUT_CLASSIFICATION	0.042181673061443624	DESIGN
//note that i parameter is now unused (delete it?)	DESIGN	0.598048086017788	WITHOUT_CLASSIFICATION	0.40195191398221186	DESIGN
//just to help out during the load (ugly, i know)	DESIGN	0.9999829996267714	WITHOUT_CLASSIFICATION	1.7000373228654918E-5	DESIGN
// TODO : safe to interpret "map.remove(key) == null" as non-dirty?	DESIGN	0.6034662182997396	WITHOUT_CLASSIFICATION	0.39653378170026055	DESIGN
// yick!  need this for proper serialization/deserialization handling...	DESIGN	0.6335585026205225	WITHOUT_CLASSIFICATION	0.36644149737947757	DESIGN
//TODO: get SQL rendering out of this package!	DESIGN	0.9999971478949088	DESIGN	2.8521050913249E-6	WITHOUT_CLASSIFICATION
//TODO: get SQL rendering out of this package!	DESIGN	0.9999971478949088	DESIGN	2.8521050913249E-6	WITHOUT_CLASSIFICATION
//yuck!	DESIGN	0.9662125493821172	WITHOUT_CLASSIFICATION	0.03378745061788278	DESIGN
//TODO: get SQL rendering out of this package!	DESIGN	0.9999971478949088	DESIGN	2.8521050913249E-6	WITHOUT_CLASSIFICATION
// TODO : not sure this is correct, could not find docs on how to do this.	DESIGN	0.9996293301285017	DESIGN	3.7066987149825357E-4	WITHOUT_CLASSIFICATION
//HSQL has no Blob/Clob support .... but just put these here for now!	DESIGN	0.9960722986369442	WITHOUT_CLASSIFICATION	0.003927701363055728	DESIGN
// does this need holdlock also? : return tableName + " with (updlock, rowlock, holdlock)";	DESIGN	0.8936600732023149	WITHOUT_CLASSIFICATION	0.10633992679768521	DESIGN
// sql-server, at least needed this dropped after use; strange!	DESIGN	0.9999988102253667	WITHOUT_CLASSIFICATION	1.189774633278952E-6	DESIGN
// todo : is there really any reason to kkeep trying if this fails once?	DESIGN	0.6288017748030517	WITHOUT_CLASSIFICATION	0.37119822519694845	DESIGN
// TBD should this be varbinary($1)? //	DESIGN	0.5766018025148657	WITHOUT_CLASSIFICATION	0.4233981974851343	DESIGN
// is it necessary to register %exact since it can only appear in a where clause?	DESIGN	0.9999964233996413	WITHOUT_CLASSIFICATION	3.5766003587404063E-6	DESIGN
// xmlforest requires a new kind of function constructor	DESIGN	0.999967449469689	WITHOUT_CLASSIFICATION	3.255053031113332E-5	DESIGN
// Does this dialect support the ALTER TABLE syntax?	DESIGN	0.9982655510324288	WITHOUT_CLASSIFICATION	0.001734448967571333	DESIGN
// Do we need to qualify index names with the schema name?	DESIGN	0.9999974283178676	WITHOUT_CLASSIFICATION	2.5716821322992045E-6	DESIGN
// Does this dialect support the UNIQUE column syntax?	DESIGN	0.9981468953275507	WITHOUT_CLASSIFICATION	0.0018531046724492197	DESIGN
// Does this dialect support check constraints?	DESIGN	0.9975107365993632	WITHOUT_CLASSIFICATION	0.002489263400636785	DESIGN
// Do we need to drop constraints before dropping tables in this dialect?	DESIGN	0.9869221552673291	WITHOUT_CLASSIFICATION	0.013077844732670891	DESIGN
// Does this dialect support the FOR UPDATE syntax?	DESIGN	0.9935511204026994	WITHOUT_CLASSIFICATION	0.006448879597300627	DESIGN
// Does this dialect support the Oracle-style FOR UPDATE NOWAIT syntax?	DESIGN	0.9890695048533528	WITHOUT_CLASSIFICATION	0.010930495146647214	DESIGN
// Does this dialect support FOR UPDATE OF, allowing particular rows to be locked?	DESIGN	0.7625647924950614	DESIGN	0.2374352075049386	WITHOUT_CLASSIFICATION
//note there is a wierd implementation in the client side	DESIGN	0.9999767095145792	WITHOUT_CLASSIFICATION	2.3290485420842593E-5	DESIGN
//TODO: never reached, since getTypeName() actually throws an exception!	DESIGN	0.9932058561318856	DESIGN	0.0067941438681144	WITHOUT_CLASSIFICATION
// todo : should we additionally check the current isolation mode explicitly?	DESIGN	0.9161596621617386	DESIGN	0.08384033783826139	WITHOUT_CLASSIFICATION
// todo : remove this and just have subclasses use Isolater/IsolatedWork directly...	DESIGN	0.801035552040782	DESIGN	0.19896444795921803	WITHOUT_CLASSIFICATION
//TODO: should orphans really be deleted during lock???	DESIGN	0.9999999497161427	DESIGN	5.028385721536557E-8	WITHOUT_CLASSIFICATION
// orphans should not be deleted during merge??	DESIGN	0.9955422059517032	WITHOUT_CLASSIFICATION	0.004457794048296818	DESIGN
// orphans should not be deleted during copy??	DESIGN	0.9957857005474733	WITHOUT_CLASSIFICATION	0.004214299452526772	DESIGN
//I suppose?	DESIGN	0.9977060445638282	WITHOUT_CLASSIFICATION	0.0022939554361719044	DESIGN
//TODO: suck this logic into the collection!	DESIGN	0.999998688921051	DESIGN	1.311078948939368E-6	WITHOUT_CLASSIFICATION
// TODO: an alternative is to check if the owner has changed; if it hasn't then // get the ID from collection.getOwner()	DESIGN	0.6756084642154936	WITHOUT_CLASSIFICATION	0.32439153578450636	DESIGN
//TODO:refactor + make this method private	DESIGN	0.9999936812330597	DESIGN	6.318766940304476E-6	WITHOUT_CLASSIFICATION
// todo : we can actually just determine this from the incoming EntityEntry-s	DESIGN	0.9991994327018764	WITHOUT_CLASSIFICATION	8.005672981235743E-4	DESIGN
//TODO: Should this be an InitializeEntityEventListener??? (watch out for performance!)	DESIGN	0.9999325258622284	DESIGN	6.747413777165072E-5	WITHOUT_CLASSIFICATION
//TODO: better to pass the id in as an argument?	DESIGN	0.9999987630619374	DESIGN	1.2369380626682806E-6	WITHOUT_CLASSIFICATION
// todo : potentially look at optimizing these two arrays	DESIGN	0.9885758033720383	WITHOUT_CLASSIFICATION	0.011424196627961706	DESIGN
/* trim done to workaround stupid oracle bug that cant handle whitespaces before a { in a sp */	DESIGN	0.9999930261290206	DESIGN	6.973870979422138E-6	WITHOUT_CLASSIFICATION
/* trim done to workaround stupid oracle bug that cant handle whitespaces before a { in a sp */	DESIGN	0.9999930261290206	DESIGN	6.973870979422138E-6	WITHOUT_CLASSIFICATION
//TODO: temporary	DESIGN	0.9996858073581728	DESIGN	3.1419264182718057E-4	WITHOUT_CLASSIFICATION
//TODO: not quite sure about the full implications of this!	DESIGN	0.9619693183397969	DESIGN	0.038030681660203076	WITHOUT_CLASSIFICATION
//TODO: not quite sure about the full implications of this!	DESIGN	0.9619693183397969	DESIGN	0.038030681660203076	WITHOUT_CLASSIFICATION
//TODO: ugly here:	DESIGN	0.9999986006291484	DESIGN	1.3993708516831267E-6	WITHOUT_CLASSIFICATION
//this is kinda the best we can do...	DESIGN	0.9947264059416825	WITHOUT_CLASSIFICATION	0.005273594058317559	DESIGN
//TODO: this needn't exclude subclasses...	DESIGN	0.9999797638296354	DESIGN	2.0236170364572534E-5	WITHOUT_CLASSIFICATION
// todo : need map? the prob is a proper key, right?	DESIGN	0.9819070118342361	DESIGN	0.01809298816576388	WITHOUT_CLASSIFICATION
// todo : i'd much rather have this done from #endLoadingCollection(CollectionPersister,LoadingCollectionEntry)...	DESIGN	0.9960963514908346	WITHOUT_CLASSIFICATION	0.00390364850916538	DESIGN
// todo : hack!!! // NOTE : here we cleanup the load context when we have no more local // LCE entries.  This "works" for the time being because really // only the collection load contexts are implemented.  Long term, // this cleanup should become part of the "close result set" // processing from the (sandbox/jdbc) jdbc-container code.	DESIGN	0.9994758576684227	DESIGN	5.241423315773819E-4	WITHOUT_CLASSIFICATION
// todo : should really move this log statement to CollectionType, where this is used from...	DESIGN	0.9999249366025311	DESIGN	7.506339746892353E-5	WITHOUT_CLASSIFICATION
// TODO : keep seperate notions of QT[] here for shallow/non-shallow queries...	DESIGN	0.6873048369712592	WITHOUT_CLASSIFICATION	0.3126951630287409	DESIGN
// TODO : add this info to the translator and aggregate it here...	DESIGN	0.9958092980787259	DESIGN	0.004190701921274223	WITHOUT_CLASSIFICATION
//TODO: move into collection type, so we can use polymorphism!	DESIGN	0.9999961971805654	DESIGN	3.802819434484363E-6	WITHOUT_CLASSIFICATION
// todo : should we check the current isolation mode explicitly?	DESIGN	0.7830799855540004	DESIGN	0.21692001444599962	WITHOUT_CLASSIFICATION
//TODO: suck into event class	DESIGN	0.999999872962886	DESIGN	1.270371140270505E-7	WITHOUT_CLASSIFICATION
//do we even really need this? the update will fail anyway....	DESIGN	0.9730632607429597	DESIGN	0.026936739257040383	WITHOUT_CLASSIFICATION
//hum ... should we cascade anyway? throw an exception? fine like it is?	DESIGN	0.9678319871757459	DESIGN	0.03216801282425414	WITHOUT_CLASSIFICATION
//TODO: would it be better to do a refresh from db?	DESIGN	0.9999999923576366	DESIGN	7.642363360593747E-9	WITHOUT_CLASSIFICATION
//TODO: we use two visitors here, inefficient!	DESIGN	0.9999999118551844	DESIGN	8.814481561356885E-8	WITHOUT_CLASSIFICATION
// this class has no proxies (so do a shortcut)	DESIGN	0.9999834906351309	WITHOUT_CLASSIFICATION	1.6509364869083644E-5	DESIGN
//PostLoad is needed for EJB3 //TODO: reuse the PostLoadEvent...	DESIGN	0.9946923041326066	DESIGN	0.005307695867393491	WITHOUT_CLASSIFICATION
//TODO: put this stuff back in to read snapshot from //      the second-level cache (needs some extra work)	DESIGN	0.9999999947468675	DESIGN	5.253132407126046E-9	WITHOUT_CLASSIFICATION
// null or brand new collection // this will also (inefficiently) handle arrays, which have // no snapshot, so we can't do any better	DESIGN	0.9991320685676679	WITHOUT_CLASSIFICATION	8.67931432332048E-4	DESIGN
//TODO: is this 100% correct?	DESIGN	0.9999988554783766	DESIGN	1.1445216233469712E-6	WITHOUT_CLASSIFICATION
// TODO: iteratively get transient entities and retry merge until one of the following conditions: //       1) transientCopyCache.size() == 0 //       2) transientCopyCache.size() is not decreasing and copyCache.size() is not increasing // TODO: find out if retrying can add entities to copyCache (don't think it can...) // For now, just retry once; throw TransientObjectException if there are still any transient entities	DESIGN	0.9998678282287979	DESIGN	1.3217177120216297E-4	WITHOUT_CLASSIFICATION
// entity name will not be available for non-POJO entities // TODO: cache the entity name somewhere so that it is available to this exception	DESIGN	0.9999217882490287	DESIGN	7.821175097135444E-5	WITHOUT_CLASSIFICATION
//TODO: we should throw an exception if we really *know* for sure   //      that this is a detached instance, rather than just assuming //throw new StaleObjectStateException(entityName, id);	DESIGN	0.9999995574691468	DESIGN	4.425308532477117E-7	WITHOUT_CLASSIFICATION
// TODO : perhaps we should additionally require that the incoming entity // version be equivalent to the defined unsaved-value?	DESIGN	0.9999997830601693	DESIGN	2.1693983058286518E-7	WITHOUT_CLASSIFICATION
// perhaps this should be an exception since it is only ever used // in the above method?	DESIGN	0.961348031246598	DESIGN	0.038651968753402	WITHOUT_CLASSIFICATION
// Put a placeholder in entries, so we don't recurse back and try to save() the // same object again. QUESTION: should this be done before onSave() is called? // likewise, should it be done before onUpdate()?	DESIGN	0.9936759334248045	WITHOUT_CLASSIFICATION	0.00632406657519551	DESIGN
//TODO: merge into one method!	DESIGN	0.9999667061732935	DESIGN	3.329382670651838E-5	WITHOUT_CLASSIFICATION
//TODO: refactor to .sql package	DESIGN	0.9998524200846636	DESIGN	1.475799153364142E-4	WITHOUT_CLASSIFICATION
/** * Provides query splitting methods, which were originally in QueryTranslator. * <br> * TODO: This will need to be refactored at some point. * * @author josh */	DESIGN	0.9999999998115807	DESIGN	1.8841924263278474E-10	WITHOUT_CLASSIFICATION
//TODO: this is one of the ugliest and most fragile pieces of code in Hibernate....	DESIGN	0.9999999535419616	DESIGN	4.645803844001347E-8	WITHOUT_CLASSIFICATION
// todo : temporary //      needed because currently persister is the one that //      creates and renders the join fragments for inheritence //      hierarchies...	DESIGN	0.9937418331231201	WITHOUT_CLASSIFICATION	0.006258166876879844	DESIGN
// TODO : better way?!?	DESIGN	0.9999999078974083	DESIGN	9.210259170872159E-8	WITHOUT_CLASSIFICATION
// Not possible to simply re-use the versionPropertyNode here as it causes // OOM errors due to circularity :(	DESIGN	0.9999100675295242	WITHOUT_CLASSIFICATION	8.993247047590508E-5	DESIGN
//TODO:this is only needed during compilation .. can we eliminate the instvar?	DESIGN	0.9994878554561489	DESIGN	5.121445438510078E-4	WITHOUT_CLASSIFICATION
// TODO : this is a bit dodgy, come up with a better way to check this (plus see above comment)	DESIGN	0.9999999823116974	DESIGN	1.768830264079566E-8	WITHOUT_CLASSIFICATION
// even here, if only properties mapped to the "base table" are referenced // in the set and where clauses, this could be handled by the BasicDelegate. // TODO : decide if it is better performance-wise to perform that check, or to simply use the MultiTableUpdateDelegate	DESIGN	0.9995605411170948	DESIGN	4.394588829052256E-4	WITHOUT_CLASSIFICATION
//TODO: switch statements are always evil! We already had bugs because  //      of forgotten token types. Use polymorphism for this!	DESIGN	0.999994413839178	DESIGN	5.586160821968377E-6	WITHOUT_CLASSIFICATION
// TODO : we really need to be able to deal with component paths here also; // this is difficult because the hql-sql grammar expects all those node types // to be FromReferenceNodes.  One potential fix here would be to convert the // IntoClause to just use a FromClause/FromElement combo (as a child of the // InsertStatement) and move all this logic into the InsertStatement.  That's // probably the easiest approach (read: least amount of changes to the grammar // and code), but just doesn't feel right as then an insert would contain // 2 from-clauses	DESIGN	0.9999979892010222	DESIGN	2.010798977766503E-6	WITHOUT_CLASSIFICATION
// really there are two situations where it should be ok to allow the insertion // into properties defined on a superclass: //      1) union-subclass with an abstract root entity //      2) discrim-subclass // // #1 is handled already because of the fact that // UnionSubclassPersister alreay always returns 0 // for this call... // // we may want to disallow it for discrim-subclass just for // consistency-sake (currently does not work anyway)...	DESIGN	0.999985403932367	WITHOUT_CLASSIFICATION	1.459606763297635E-5	DESIGN
//yuck!	DESIGN	0.9662125493821172	WITHOUT_CLASSIFICATION	0.03378745061788278	DESIGN
// implicit joins are always(?) ok to reuse	DESIGN	0.9998143156499444	WITHOUT_CLASSIFICATION	1.8568435005569594E-4	DESIGN
// TODO : we may also want to check that the types here map to exactly one column/JDBC-type //      can't think of a situation where arithmetic expression between multi-column mappings //      makes any sense.	DESIGN	0.994746462415622	DESIGN	0.005253537584377937	WITHOUT_CLASSIFICATION
// we do not know either type //BLIND GUESS!	DESIGN	0.9932555880283757	WITHOUT_CLASSIFICATION	0.00674441197162443	DESIGN
//TODO: used to be exprNoParens! was this needed?	DESIGN	0.9999999777751966	DESIGN	2.2224803397798266E-8	WITHOUT_CLASSIFICATION
// TODO: Replace this with a more elegant solution.	DESIGN	0.9999231223414033	DESIGN	7.687765859664997E-5	WITHOUT_CLASSIFICATION
// TODO: Should this really return null?  If not, figure out something better to do here.	DESIGN	0.9999999999895912	DESIGN	1.0408813732082059E-11	WITHOUT_CLASSIFICATION
//TODO: get SQL rendering out of this package!	DESIGN	0.9999971478949088	DESIGN	2.8521050913249E-6	WITHOUT_CLASSIFICATION
// yuck!	DESIGN	0.9959834166301097	WITHOUT_CLASSIFICATION	0.0040165833698902476	DESIGN
// ignore it; the incoming property could not be found so we // cannot be sure what to do here.  At the very least, the // safest is to simply not apply any dereference toggling...	DESIGN	0.9373740499030053	DESIGN	0.06262595009699465	WITHOUT_CLASSIFICATION
// TODO : most of below was taken verbatim from DotNode; should either delegate this logic or super-type it	DESIGN	0.9998188719057319	DESIGN	1.8112809426813867E-4	WITHOUT_CLASSIFICATION
// otherwise, a trim-specification and/or a trim-character // have been specified;  we need to decide which options // are present and "do the right thing" // should leading trim-characters be trimmed? // should trailing trim-characters be trimmed? // the trim-character // the trim-source	DESIGN	0.9999843260032971	WITHOUT_CLASSIFICATION	1.5673996702886576E-5	DESIGN
// todo: we should really just collect these from the various SelectExpressions, rather than regenerating here	DESIGN	0.8968365933103054	WITHOUT_CLASSIFICATION	0.10316340668969454	DESIGN
//TODO: is this a bit ugly?	DESIGN	0.9999999999603024	DESIGN	3.96975933108824E-11	WITHOUT_CLASSIFICATION
// Need a better way to define the suffixes here...	DESIGN	0.6187313788517751	WITHOUT_CLASSIFICATION	0.3812686211482249	DESIGN
// TODO: something much better - look at the type of the other expression! // TODO: Have comparisonExpression and/or arithmeticExpression rules complete the resolution of boolean nodes.	DESIGN	0.9999482319866968	DESIGN	5.176801330324854E-5	WITHOUT_CLASSIFICATION
// TODO : what amount of significant digits need to be supported here? //      - from the DecimalFormat docs: //          [significant digits] = [minimum integer digits] + [maximum fraction digits]	DESIGN	0.9938536651035365	DESIGN	0.006146334896463659	WITHOUT_CLASSIFICATION
// Needed the "clazz_" check to work around union-subclasses // TODO : is there a way to tell whether a persister is truly discrim-column based inheritence?	DESIGN	0.9988332409594212	DESIGN	0.0011667590405787629	WITHOUT_CLASSIFICATION
//We should actually rework this class to not implement Parser //and just process path expressions in the most convenient way.	DESIGN	0.7663927084887766	WITHOUT_CLASSIFICATION	0.23360729151122334	DESIGN
//The class is now way to complex!	DESIGN	0.9975461097525983	WITHOUT_CLASSIFICATION	0.002453890247401636	DESIGN
//TODO: get SQL rendering out of here	DESIGN	0.9994351635211586	DESIGN	5.648364788414552E-4	WITHOUT_CLASSIFICATION
//TODO: is there a better way?	DESIGN	0.9999999982432464	DESIGN	1.7567536314297802E-9	WITHOUT_CLASSIFICATION
//Must be done here because of side-effect! yuck...	DESIGN	0.9817535966766665	WITHOUT_CLASSIFICATION	0.018246403323333427	DESIGN
//name from a super query (a bit inelegant that it shows up here)	DESIGN	0.5470212595532417	WITHOUT_CLASSIFICATION	0.4529787404467584	DESIGN
// We should reengineer this class so that, rather than the current ad - // hoc linear approach to processing a stream of tokens, we instead // build up a tree of expressions.	DESIGN	0.9999894863468983	WITHOUT_CLASSIFICATION	1.0513653101787499E-5	DESIGN
// this is ugly here, but needed because its a subquery	DESIGN	0.5053694352074579	DESIGN	0.49463056479254197	WITHOUT_CLASSIFICATION
// unhappy about this being public ... is there a better way?	DESIGN	0.983976715760366	DESIGN	0.01602328423963389	WITHOUT_CLASSIFICATION
// Make sure this is a defined parameter and check the incoming value type // TODO: what should be the actual exception type here?	DESIGN	0.9999999322561522	DESIGN	6.774384767537702E-8	WITHOUT_CLASSIFICATION
// TODO : this constructor form is *only* used from constructor directly below us; can it go away?	DESIGN	0.9999999192663439	DESIGN	8.0733656062153E-8	WITHOUT_CLASSIFICATION
//TODO: COPY/PASTE FROM SessionImpl, pull up!	DESIGN	0.9772485007039196	DESIGN	0.02275149929608036	WITHOUT_CLASSIFICATION
// TODO : should remove this exposure //  and have all references to the session's batcher use the ConnectionManager.	DESIGN	0.9998734677459569	DESIGN	1.2653225404306838E-4	WITHOUT_CLASSIFICATION
// todo : should this get moved to PersistentContext? // logically, is PersistentContext the "thing" to which an interceptor gets attached?	DESIGN	0.6525378534145136	DESIGN	0.3474621465854864	WITHOUT_CLASSIFICATION
// TODO: what type?	DESIGN	0.9999957110993068	DESIGN	4.288900693137691E-6	WITHOUT_CLASSIFICATION
// todo : should seriously consider not allowing a txn to begin from a child session //      can always route the request to the root session...	DESIGN	0.9999721792453061	WITHOUT_CLASSIFICATION	2.7820754693931502E-5	DESIGN
// short-circuit for performance...	DESIGN	0.9999919697582104	WITHOUT_CLASSIFICATION	8.030241789622067E-6	DESIGN
// not absolutely necessary, but does help with aggressive release	DESIGN	0.9998014599026832	WITHOUT_CLASSIFICATION	1.9854009731670884E-4	DESIGN
// TODO : remove these last two as batcher is no longer managing connections	DESIGN	0.9989479064394987	DESIGN	0.0010520935605012362	WITHOUT_CLASSIFICATION
//work around a bug in all known connection pools....	DESIGN	0.7421663688287196	DESIGN	0.25783363117128044	WITHOUT_CLASSIFICATION
// TODO : make this the factory for "entity mode related" sessions; // also means making this the target of transaction-synch and the // thing that knows how to cascade things between related sessions // // At that point, perhaps this thing is a "SessionContext", and // ConnectionManager is a "JDBCContext"?  A "SessionContext" should // live in the impl package...	DESIGN	0.9999941972741397	DESIGN	5.80272586024566E-6	WITHOUT_CLASSIFICATION
//TODO: does this really need to be here? //      does the collection already have //      it's own up-to-date snapshot?	DESIGN	0.9999999713234001	DESIGN	2.867659992966586E-8	WITHOUT_CLASSIFICATION
//TODO: the i==entitySpan-1 bit depends upon subclass implementation (very bad)	DESIGN	0.9999581816866103	DESIGN	4.1818313389696265E-5	WITHOUT_CLASSIFICATION
/**	DESIGN	0.9616571996252745	DESIGN	0.038342800374725525	WITHOUT_CLASSIFICATION
// todo : add the notion of enabled filters to the CacheKey to differentiate filtered collections from non-filtered; //      but CacheKey is currently used for both collections and entities; would ideally need to define two seperate ones; //      currently this works in conjuction with the check on //      DefaultInitializeCollectionEventHandler.initializeCollectionFromCache() (which makes sure to not read from //      cache with enabled filters). // EARLY EXIT!!!!!	DESIGN	0.9962287268299407	DESIGN	0.003771273170059456	WITHOUT_CLASSIFICATION
//for sets, we should end the collection load after resolving //the entities, since we might call hashCode() on the elements //TODO: or we could do this polymorphically, and have two //      different operations implemented differently for arrays	DESIGN	0.9999885805315156	DESIGN	1.1419468484268415E-5	WITHOUT_CLASSIFICATION
//This is not very nice (and quite slow):	DESIGN	0.7209005265399009	DESIGN	0.27909947346009906	WITHOUT_CLASSIFICATION
//use of trim() here is ugly?	DESIGN	0.6458461719758548	WITHOUT_CLASSIFICATION	0.35415382802414525	DESIGN
//TODO: this is too conservative; if all preceding joins were  //      also inner joins, we could use an inner join here	DESIGN	0.9999999896818539	DESIGN	1.0318146086108635E-8	WITHOUT_CLASSIFICATION
//TODO: look at the owning property and check that it  //      isn't lazy (by instrumentation)	DESIGN	0.9998919151652466	DESIGN	1.0808483475353462E-4	WITHOUT_CLASSIFICATION
//TODO: inefficient	DESIGN	0.999990966803291	DESIGN	9.033196708995545E-6	WITHOUT_CLASSIFICATION
// why does this matter?	DESIGN	0.6420365963251062	DESIGN	0.35796340367489377	WITHOUT_CLASSIFICATION
// from the collection of associations, locate OJA for the // ManyToOne corresponding to this persister to fully // define the many-to-many; we need that OJA so that we can // use its alias here // TODO : is there a better way here?	DESIGN	0.9999997545080033	DESIGN	2.4549199672872404E-7	WITHOUT_CLASSIFICATION
//TODO: this class depends directly upon CriteriaImpl,  //      in the impl package ... add a CriteriaImplementor  //      interface	DESIGN	0.9999999910939518	DESIGN	8.906048184376472E-9	WITHOUT_CLASSIFICATION
//TODO: add a CriteriaImplementor interface //      this class depends directly upon CriteriaImpl in the impl package...	DESIGN	0.9999999856564428	DESIGN	1.4343557189677445E-8	WITHOUT_CLASSIFICATION
// TODO : not so sure this is needed...	DESIGN	0.9994852852176703	DESIGN	5.147147823296877E-4	WITHOUT_CLASSIFICATION
// meant to handle dynamic instantiation queries...(Copy from QueryLoader)	DESIGN	0.9999960971964531	WITHOUT_CLASSIFICATION	3.902803546918728E-6	DESIGN
// TODO: The order in which entities are saved may matter (e.g., a particular transient entity //       may need to be saved before other transient entities can be saved; //       Keep retrying the batch of transient entities until either: //       1) there are no transient entities left in transientCopyCache //       or 2) no transient entities were saved in the last batch // For now, just run through the transient entities and retry the merge	DESIGN	0.9924969349108151	DESIGN	0.007503065089184778	WITHOUT_CLASSIFICATION
// todo: this might really even be moved into the cfg package and used as the basis for all things which are configurable.	DESIGN	0.8540617670417685	DESIGN	0.14593823295823158	WITHOUT_CLASSIFICATION
// todo : currently expects that the individual with expressions apply to the same sql table join. //      This may not be the case for joined-subclass where the property values //      might be coming from different tables in the joined hierarchy.  At some //      point we should expand this to support that capability.  However, that has //      some difficulties: //          1) the biggest is how to handle ORs when the individual comparisons are //              linked to different sql joins. //          2) here we would need to track each comparison individually, along with //              the join alias to which it applies and then pass that information //              back to the FromElement so it can pass it along to the JoinSequence	DESIGN	0.9672504798308096	WITHOUT_CLASSIFICATION	0.03274952016919031	DESIGN
// this function has a template -> restore output, apply the template and write the result out // TODO: Downcast to avoid using an interface?  Yuck.	DESIGN	0.9999473797993	DESIGN	5.262020069996639E-5	WITHOUT_CLASSIFICATION
// at some point the generate phase needs to be moved out of here, // because a single object-level DML might spawn multiple SQL DML // command executions. // // Possible to just move the sql generation for dml stuff, but for // consistency-sake probably best to just move responsiblity for // the generation phase completely into the delegates // (QueryLoader/StatementExecutor) themselves.  Also, not sure why // QueryLoader currently even has a dependency on this at all; does // it need it?  Ideally like to see the walker itself given to the delegates directly...	DESIGN	0.9999858937042077	DESIGN	1.410629579230677E-5	WITHOUT_CLASSIFICATION
// get the right object from the list ... would it be easier to just call getEntity() ??	DESIGN	0.9733454864829276	WITHOUT_CLASSIFICATION	0.026654513517072338	DESIGN
// TODO should we just collect these like with the collections above?	DESIGN	0.9999602587911867	DESIGN	3.9741208813264095E-5	WITHOUT_CLASSIFICATION
// todo : better to handle dynamic filters through implicit DynamicFilterParameterSpecification // see the discussion there in DynamicFilterParameterSpecification's javadocs as to why // it is currently not done that way.	DESIGN	0.9977804271607997	WITHOUT_CLASSIFICATION	0.0022195728392001867	DESIGN
/////////////////////////////////////////////////////////////////////////// // USED ONLY FOR REGRESSION TESTING!!!! // // todo : obviously get rid of all this junk ;) ///////////////////////////////////////////////////////////////////////////	DESIGN	0.8803729943375455	WITHOUT_CLASSIFICATION	0.11962700566245461	DESIGN
//create an index on the key columns??	DESIGN	0.9999979250172657	WITHOUT_CLASSIFICATION	2.074982734282243E-6	DESIGN
//TODO: deprecated, remove eventually	DESIGN	0.999456957042294	DESIGN	5.430429577059542E-4	WITHOUT_CLASSIFICATION
//create an index on the key columns??	DESIGN	0.9999979250172657	WITHOUT_CLASSIFICATION	2.074982734282243E-6	DESIGN
//TODO: improve this hack!	DESIGN	0.9999999999865755	DESIGN	1.3424559921752635E-11	WITHOUT_CLASSIFICATION
// inheritance cycle detection (paranoid check)	DESIGN	0.9999995308345027	WITHOUT_CLASSIFICATION	4.691654973818945E-7	DESIGN
//TODO: remove use of instanceof!	DESIGN	0.999972997171703	DESIGN	2.7002828297025843E-5	WITHOUT_CLASSIFICATION
//shortcut	DESIGN	0.9998000595575434	WITHOUT_CLASSIFICATION	1.99940442456575E-4	DESIGN
//TODO: handle the case of a foreign key to something other than the pk	DESIGN	0.9949262736480804	DESIGN	0.005073726351919535	WITHOUT_CLASSIFICATION
// create an index on the key columns??	DESIGN	0.9999996518307391	WITHOUT_CLASSIFICATION	3.481692608061316E-7	DESIGN
// todo : remove	DESIGN	0.9956745865051063	WITHOUT_CLASSIFICATION	0.004325413494893693	DESIGN
// todo : remove	DESIGN	0.9956745865051063	WITHOUT_CLASSIFICATION	0.004325413494893693	DESIGN
// todo : remove	DESIGN	0.9956745865051063	WITHOUT_CLASSIFICATION	0.004325413494893693	DESIGN
// todo : throw exception?	DESIGN	0.9639416069412186	WITHOUT_CLASSIFICATION	0.036058393058781515	DESIGN
// todo : throw exception?  maybe warn if not the same?	DESIGN	0.8460933841430518	WITHOUT_CLASSIFICATION	0.15390661585694815	DESIGN
//TODO: make EntityPersister *not* depend on SessionFactoryImplementor //interface, if possible	DESIGN	0.9920935174477938	DESIGN	0.007906482552206178	WITHOUT_CLASSIFICATION
//TODO: is there a more elegant way than downcasting?	DESIGN	0.9999992885419744	DESIGN	7.114580256158192E-7	WITHOUT_CLASSIFICATION
// TODO: encapsulate the protected instance variables!	DESIGN	0.5078900181377193	DESIGN	0.4921099818622808	WITHOUT_CLASSIFICATION
// should indicate that we are processing an INSERT/UPDATE/DELETE // query with a subquery implied via a collection property // function. Here, we need to use the table name itself as the // qualification alias. // TODO : verify this works for all databases... // TODO : is this also the case in non-"indexed" scenarios?	DESIGN	0.9999988169323687	DESIGN	1.1830676313627617E-6	WITHOUT_CLASSIFICATION
//TODO: copy/paste from insertRows()	DESIGN	0.9998141077601899	DESIGN	1.8589223981028307E-4	WITHOUT_CLASSIFICATION
//TODO: copy/paste from recreate()	DESIGN	0.9997409448044073	DESIGN	2.5905519559272876E-4	WITHOUT_CLASSIFICATION
//should this interface extend PropertyMapping?	DESIGN	0.9084726195100831	DESIGN	0.09152738048991696	WITHOUT_CLASSIFICATION
//ie. the subquery! yuck!	DESIGN	0.99201034526501	WITHOUT_CLASSIFICATION	0.007989654734989941	DESIGN
//TODO: move to .sql package!!	DESIGN	0.9999919782135316	DESIGN	8.021786468382139E-6	WITHOUT_CLASSIFICATION
//TODO: code duplication with SingleTableEntityPersister	DESIGN	0.9999040605053727	DESIGN	9.593949462722474E-5	WITHOUT_CLASSIFICATION
// TODO: It would be really, really nice to use this to also model components!	DESIGN	0.9999999999863184	DESIGN	1.3681559621272893E-11	WITHOUT_CLASSIFICATION
//TODO: *two* hashmap lookups here is one too many...	DESIGN	0.9996120489647983	DESIGN	3.879510352017599E-4	WITHOUT_CLASSIFICATION
//TODO: code duplication with JoinedSubclassEntityPersister	DESIGN	0.996513851878131	DESIGN	0.003486148121869022	WITHOUT_CLASSIFICATION
//perhaps not really necessary...	DESIGN	0.992554346995007	WITHOUT_CLASSIFICATION	0.007445653004993124	DESIGN
// NOTE: this assumes something about how propertySelectFragment is implemented by the subclass! // was toUnqotedAliasStrings( getIdentiferColumnNames() ) before - now tried // to remove that unqoting and missing aliases..	DESIGN	0.5283398227456735	DESIGN	0.4716601772543265	WITHOUT_CLASSIFICATION
// NOTE: this assumes something about how propertySelectFragment is implemented by the subclass! // was toUnqotedAliasStrings( getdiscriminatorColumnName() ) before - now tried // to remove that unqoting and missing aliases..	DESIGN	0.5045842107513778	WITHOUT_CLASSIFICATION	0.4954157892486223	DESIGN
//TODO: should we use SELECT .. FOR UPDATE?	DESIGN	0.9999999684176539	DESIGN	3.158234605797375E-8	WITHOUT_CLASSIFICATION
//TODO: optimize this better!	DESIGN	0.9999994161130661	DESIGN	5.838869339172667E-7	WITHOUT_CLASSIFICATION
//TODO: should we allow suffixes on these ?	DESIGN	0.999999895377422	DESIGN	1.0462257804380938E-7	WITHOUT_CLASSIFICATION
//This is really ugly, but necessary:	DESIGN	0.8904540372168134	DESIGN	0.1095459627831867	WITHOUT_CLASSIFICATION
//ugly little workaround for fact that createUniqueKeyLoaders() does not handle component properties	DESIGN	0.99999931520973	DESIGN	6.847902701560073E-7	WITHOUT_CLASSIFICATION
//TODO: disable batch loading if lockMode > READ?	DESIGN	0.9778682786881142	DESIGN	0.022131721311885844	WITHOUT_CLASSIFICATION
// append the SQL to return the generated identifier //TODO: suck into Insert	DESIGN	0.96171602006452	DESIGN	0.038283979935480016	WITHOUT_CLASSIFICATION
//TODO: I am not so sure about the exception handling in this bit!	DESIGN	0.9999920505180853	DESIGN	7.949481914814665E-6	WITHOUT_CLASSIFICATION
//TODO: is this really necessary????	DESIGN	0.9999999417788779	DESIGN	5.822112216971827E-8	WITHOUT_CLASSIFICATION
//TODO: move to .sql package, and refactor with similar things!	DESIGN	0.9999999838291855	DESIGN	1.617081442870677E-8	WITHOUT_CLASSIFICATION
//TODO: implement functionality //  this might be painful to do here, as the "join post processing" for //  the subquery has already been performed (meaning that for //  theta-join dialects, the join conditions have already been moved //  over to the where clause).  A "simple" solution here might to //  perform "join post processing" once for the entire query (including //  any subqueries) at one fell swoop	DESIGN	0.993390237136225	DESIGN	0.006609762863775038	WITHOUT_CLASSIFICATION
// todo : this eventually needs to be removed	DESIGN	0.6741603105300507	DESIGN	0.32583968946994923	WITHOUT_CLASSIFICATION
//kinda ugly, but needed for collections with a "." node mapping	DESIGN	0.9999877272452645	WITHOUT_CLASSIFICATION	1.2272754735409353E-5	DESIGN
//is this ok?	DESIGN	0.9507765665240003	WITHOUT_CLASSIFICATION	0.049223433475999626	DESIGN
//TODO: perhaps this should be some other RuntimeException...	DESIGN	0.9999999961273742	DESIGN	3.872625799539274E-9	WITHOUT_CLASSIFICATION
//TODO: make this a bit nicer	DESIGN	0.9999999950501812	DESIGN	4.949818760743328E-9	WITHOUT_CLASSIFICATION
//Yuck:	DESIGN	0.9867526937666314	WITHOUT_CLASSIFICATION	0.013247306233368448	DESIGN
//TODO: we should provide some way to get keys of collection of statistics to make it easier to retrieve from a GUI perspective	DESIGN	0.9999999999951068	DESIGN	4.893236422788436E-12	WITHOUT_CLASSIFICATION
/**	DESIGN	0.9616571996252745	DESIGN	0.038342800374725525	WITHOUT_CLASSIFICATION
// TODO : will need reference to session factory to fully complete HHH-1907	DESIGN	0.999433348106999	DESIGN	5.666518930009684E-4	WITHOUT_CLASSIFICATION
//TODO: currently keeps Getters and Setters (instead of PropertyAccessors) because of the way getGetter() and getSetter() are implemented currently; yuck!	DESIGN	0.9999999170026209	DESIGN	8.299737907237718E-8	WITHOUT_CLASSIFICATION
//TODO: redesign how PropertyAccessors are acquired...	DESIGN	0.9998136746699335	DESIGN	1.863253300664783E-4	WITHOUT_CLASSIFICATION
// todo : YUCK!!!	DESIGN	0.9900771797318054	WITHOUT_CLASSIFICATION	0.009922820268194632	DESIGN
// TODO : YUCK!!!  fix after HHH-1907 is complete	DESIGN	0.9963252032143762	DESIGN	0.0036747967856236834	WITHOUT_CLASSIFICATION
//TODO: need to make the majority of this functionality into a top-level support class for custom impl support	DESIGN	0.9999999226101499	DESIGN	7.738985001393228E-8	WITHOUT_CLASSIFICATION
//TODO: design new lifecycle for ProxyFactory	DESIGN	0.9903146601261427	DESIGN	0.009685339873857366	WITHOUT_CLASSIFICATION
//TODO: would be nice to handle proxy classes elegantly!	DESIGN	0.9999998863119332	DESIGN	1.1368806679211904E-7	WITHOUT_CLASSIFICATION
// TODO: copy/paste from ManyToOneType	DESIGN	0.9916986771089165	DESIGN	0.008301322891083483	WITHOUT_CLASSIFICATION
//TODO: should this be Session.instantiate(Persister, ...)?	DESIGN	0.9998347197005357	DESIGN	1.6528029946432898E-4	WITHOUT_CLASSIFICATION
//TODO: this is a bit arbitrary, expose a switch to the user?	DESIGN	0.9999982047524713	DESIGN	1.7952475287141572E-6	WITHOUT_CLASSIFICATION
//TODO: implement caching?! proxies?!	DESIGN	0.9999964920750941	DESIGN	3.5079249058580087E-6	WITHOUT_CLASSIFICATION
//TODO: is this right??	DESIGN	0.9999999987521794	DESIGN	1.2478205371369534E-9	WITHOUT_CLASSIFICATION
// is this really necessary?	DESIGN	0.5930541150129857	DESIGN	0.4069458849870143	WITHOUT_CLASSIFICATION
//TODO: move these to a new JoinableType abstract class, //extended by EntityType and PersistentCollectionType:	DESIGN	0.9813438077327724	DESIGN	0.01865619226722763	WITHOUT_CLASSIFICATION
// TODO: this is very suboptimal for some subclasses (namely components), // since it does not take advantage of two-phase-load	DESIGN	0.9999507621413123	DESIGN	4.923785868762158E-5	WITHOUT_CLASSIFICATION
// worrying about proxies is perhaps a little bit of overkill here...	DESIGN	0.7875859040275434	WITHOUT_CLASSIFICATION	0.21241409597245658	DESIGN
// NOTE VERY HACKISH WORKAROUND!! // TODO: Fix this so it will work for non-POJO entity mode	DESIGN	0.9999999999783877	DESIGN	2.1612217633282902E-11	WITHOUT_CLASSIFICATION
// TODO: Fix this so it will work for non-POJO entity mode	DESIGN	0.9999999677055319	DESIGN	3.229446813139569E-8	WITHOUT_CLASSIFICATION
// We would probably refactor to have LogicParser (builds a tree of simple // expressions connected by and, or, not), ExpressionParser (translates // from OO terms like foo, foo.Bar, foo.Bar.Baz to SQL terms like // FOOS.ID, FOOS.BAR_ID, etc) and PathExpressionParser (which does much // the same thing it does now)	DESIGN	0.9999584565980737	WITHOUT_CLASSIFICATION	4.154340192625602E-5	DESIGN
//TODO: this is a little inefficient, don't need to do a whole //      deep replaceElements() call	DESIGN	0.9999999994834838	DESIGN	5.16516197111601E-10	WITHOUT_CLASSIFICATION
//workaround for WebLogic	DESIGN	0.9981382833586643	DESIGN	0.001861716641335643	WITHOUT_CLASSIFICATION
//TODO: this dependency is kinda Bad	DESIGN	0.9999997563291538	DESIGN	2.4367084620702196E-7	WITHOUT_CLASSIFICATION
//ick!	DESIGN	0.9980453939553539	WITHOUT_CLASSIFICATION	0.00195460604464608	DESIGN
// short cut check...	DESIGN	0.9994402612836704	WITHOUT_CLASSIFICATION	5.597387163296798E-4	DESIGN
// todo : move to StringHelper?	DESIGN	0.9571237395734632	WITHOUT_CLASSIFICATION	0.042876260426536805	DESIGN
//yukky! Don't you have subclasses for that! //TODO race conditions can happen here	DESIGN	0.9991901804492699	DESIGN	8.09819550730098E-4	WITHOUT_CLASSIFICATION
//TODO: We probably should have a StatisticsNotPublishedException, to make it clean	DESIGN	0.9999999998970179	DESIGN	1.0298200578592289E-10	WITHOUT_CLASSIFICATION
// FIXME hack to work around fact that calling // Node added = root.addChild( fqn ); doesn't  // properly set the version on the node	DESIGN	0.9999999996097735	DESIGN	3.9022659996230104E-10	WITHOUT_CLASSIFICATION
// TODO: I considered validating the presence of the TS cache here, // but decided to defer unti getQueryCacheInstance() in case the  // cache is never actually used	DESIGN	0.9999976034874379	DESIGN	2.3965125621836955E-6	WITHOUT_CLASSIFICATION
//need to do that here rather than in the save event listener to let //the post insert events to have a id-filled entity when IDENTITY is used (EJB3)	DESIGN	0.9999996934260674	WITHOUT_CLASSIFICATION	3.065739326305355E-7	DESIGN
//TODO: simply remove this override //      if we fix the above todos	DESIGN	0.9999942344556388	DESIGN	5.765544361125042E-6	WITHOUT_CLASSIFICATION
// This, is used by SessionFactoryImpl to hand to the generated SessionImpl; // was the only reason I could see that we cannot just use null as // Settings.cacheProvider	DESIGN	0.6896116201162853	DESIGN	0.3103883798837146	WITHOUT_CLASSIFICATION
// this is done here 'cos we might only know the type here (ugly!) // TODO: improve this a lot:	DESIGN	0.9999999998780492	DESIGN	1.219508212733808E-10	WITHOUT_CLASSIFICATION
// todo : would love to have this work on a notification basis //    where the successful binding of an entity/subclass would //    emit a notification which the extendsQueue entries could //    react to...	DESIGN	0.9294378740122456	WITHOUT_CLASSIFICATION	0.0705621259877543	DESIGN
// TODO : not sure the best way to handle this. // The non-performant way :	DESIGN	0.9981228053307002	DESIGN	0.0018771946692998141	WITHOUT_CLASSIFICATION
// would be better to use the element-type to determine // whether the old and the new are equal here; the problem being // we do not necessarily have access to the element type in all // cases	DESIGN	0.9489755107359438	WITHOUT_CLASSIFICATION	0.05102448926405632	DESIGN
// This next bit is to allow for both unsaved-value="negative" // and for "older" behavior where version number did not get // seeded if it was already set in the object // TODO: shift it into unsaved-value strategy	DESIGN	0.9916320934434069	WITHOUT_CLASSIFICATION	0.008367906556593132	DESIGN
// merges don't cascade to uninitialized collections //	DESIGN	0.9999981489569244	WITHOUT_CLASSIFICATION	1.8510430755972095E-6	DESIGN
// TODO: an alternative is to check if the owner has changed; if it hasn't then // return collection.getOwner()	DESIGN	0.6874769683965715	DESIGN	0.3125230316034284	WITHOUT_CLASSIFICATION
//it is possible that the tree-walking in OuterJoinLoader can get to //an association defined by a subclass, in which case the property-ref //might refer to a property defined on a subclass of the current class //in this case, the table name is not known - this temporary solution  //assumes that the property-ref refers to a property of the subclass //table that the association belongs to (a reasonable guess) //TODO: fix this, add: OuterJoinLoadable.getSubclassPropertyTableName(String propertyName)	DESIGN	0.9999826375578819	DESIGN	1.73624421182042E-5	WITHOUT_CLASSIFICATION
// this only works because collection entries are kept in a sequenced // map by persistence context (maybe we should do like entities and // keep a separate sequences set...) //TODO: calling entrySet on an IdentityMap is SLOW!!	DESIGN	0.9999253645314572	DESIGN	7.46354685428297E-5	WITHOUT_CLASSIFICATION
// important, to account for newly saved entities in query // todo : some kind of check for new status...	DESIGN	0.9612239070321379	WITHOUT_CLASSIFICATION	0.03877609296786207	DESIGN
// brand new collection //TODO: or an array!! we can't lock objects with arrays now??	DESIGN	0.9368563691046166	DESIGN	0.06314363089538344	WITHOUT_CLASSIFICATION
//TODO: if object was an uninitialized proxy, this is inefficient, //      resulting in two SQL selects	DESIGN	0.999999944664727	DESIGN	5.533527299418317E-8	WITHOUT_CLASSIFICATION
//before cascade! //TODO: should this be Session.instantiate(Persister, ...)?	DESIGN	0.9998870120559205	DESIGN	1.1298794407946991E-4	WITHOUT_CLASSIFICATION
// TODO : absolutely no usages of this constructor form; can it go away?	DESIGN	0.9999965422428472	DESIGN	3.457757152780465E-6	WITHOUT_CLASSIFICATION
// todo : need to find a clean way to handle the "event source" role // a seperate classs responsible for generating/dispatching events just duplicates most of the Session methods... // passing around seperate reto interceptor, factory, actionQueue, and persistentContext is not manageable...	DESIGN	0.9996066236580736	WITHOUT_CLASSIFICATION	3.933763419264779E-4	DESIGN
// todo : remove	DESIGN	0.9956745865051063	WITHOUT_CLASSIFICATION	0.004325413494893693	DESIGN
//aliasRefNode.resolve( false, false, aliasRefNode.getText() ); //TODO: is it kosher to do it here? //TODO: is it kosher to do it here?	DESIGN	0.9999987548608252	DESIGN	1.2451391747527084E-6	WITHOUT_CLASSIFICATION
// No explicit select expression; render the id and properties // projection lists for every persister in the from clause into // a single 'token node'. //TODO: the only reason we need this stuff now is collection filters, //      we should get rid of derived select clause completely!	DESIGN	0.999999994242653	DESIGN	5.757347075625297E-9	WITHOUT_CLASSIFICATION
// TODO : an optimization here would be to consider cascade deletes and not gen those delete statements; //      the difficulty is the ordering of the tables here vs the cascade attributes on the persisters -> //          the table info gotten here should really be self-contained (i.e., a class representation //          defining all the needed attributes), then we could then get an array of those	DESIGN	0.9919966911655012	DESIGN	0.008003308834498938	WITHOUT_CLASSIFICATION
// TODO: get SQL rendering out of here, create an AST for the join expressions. // Use the SQL generator grammar to generate the SQL text for the index expression.	DESIGN	0.9922291348525487	WITHOUT_CLASSIFICATION	0.00777086514745121	DESIGN
// TODO : this really needs to be delayed unitl after we definitively know all node types // where this is currently a problem is parameters for which where we cannot unequivocally // resolve an expected type	DESIGN	0.9999868934792975	DESIGN	1.310652070258946E-5	WITHOUT_CLASSIFICATION
// TODO: Figure out a better way to get the FROM elements in a proper tree structure. // If this is not the destination of a many-to-many, add it as a child of the origin.	DESIGN	0.9999998265689896	DESIGN	1.7343101042740737E-7	WITHOUT_CLASSIFICATION
// work around that crazy issue where the tree contains // "empty" FromElements (no text); afaict, this is caused // by FromElementFactory.createCollectionJoin()	DESIGN	0.9905180738219939	WITHOUT_CLASSIFICATION	0.009481926178006129	DESIGN
//TODO: this class does too many things! we need a different //kind of path expression parser for each of the diffferent //ways in which path expressions can occur	DESIGN	0.9996512373429232	DESIGN	3.4876265707694073E-4	WITHOUT_CLASSIFICATION
//real hacky... // used to count the nesting of parentheses	DESIGN	0.9998345962704012	DESIGN	1.654037295987482E-4	WITHOUT_CLASSIFICATION
// TODO : would be really nice to cache the spec on the query-def so as to not have to re-calc the hash; // currently not doable though because of the resultset-ref stuff...	DESIGN	0.9999840909996361	DESIGN	1.5909000363877744E-5	WITHOUT_CLASSIFICATION
//for arrays, we should end the collection load before resolving //the entities, since the actual array instances are not instantiated //during loading //TODO: or we could do this polymorphically, and have two //      different operations implemented differently for arrays	DESIGN	0.9999828471204611	DESIGN	1.7152879538916004E-5	WITHOUT_CLASSIFICATION
// polymorphism not really handled completely correctly, // perhaps...well, actually its ok, assuming that the // entity name used in the lookup is the same as the // the one used here, which it will be	DESIGN	0.8899221696209815	WITHOUT_CLASSIFICATION	0.11007783037901847	DESIGN
// TODO: should "record" how many properties we have reffered to - and if we  //       don't get'em'all we throw an exception! Way better than trial and error ;)	DESIGN	0.9999997817446036	DESIGN	2.182553964115032E-7	WITHOUT_CLASSIFICATION
// VERY IMPORTANT!!!! - This class needs to be free of any static references // to any CGLIB or Javassist classes.  Otherwise, users will always need both // on their classpaths no matter which (if either) they use. // // Another option here would be to remove the Hibernate.isPropertyInitialized() // method and have the users go through the SessionFactory to get this information.	DESIGN	0.9999980585976297	WITHOUT_CLASSIFICATION	1.9414023704344335E-6	DESIGN
// TODO: is it really neceassry to provide Configuration to CollectionPersisters ? Should it not be enough with associated class ? // or why does EntityPersister's not get access to configuration ? // // The only reason I could see that Configuration gets passed to collection persisters // is so that they can look up the dom4j node name of the entity element in case // no explicit node name was applied at the collection element level.  Are you kidding me? // Trivial to fix then.  Just store and expose the node name on the entity persister // (which the collection persister looks up anyway via other means...).	DESIGN	0.9999999986913023	DESIGN	1.308697745497503E-9	WITHOUT_CLASSIFICATION
//for backward compatibility, allow a set with no not-null  //element columns, using all columns in the row locater SQL //TODO: create an implicit not null constraint on all cols?	DESIGN	0.9992669140070901	DESIGN	7.330859929098311E-4	WITHOUT_CLASSIFICATION
//SPACES //TODO: i'm not sure, but perhaps we should exclude //      abstract denormalized tables?	DESIGN	0.9999999920833008	DESIGN	7.916699117762513E-9	WITHOUT_CLASSIFICATION
//workaround, for backward compatibility of sets with no //not-null columns, assume all columns are used in the //row locator SQL	DESIGN	0.5329381302008723	DESIGN	0.4670618697991277	WITHOUT_CLASSIFICATION
//note that this method could easily be moved up to BasicEntityPersister, //if we ever needed to reuse it from other subclasses	DESIGN	0.8460445114165993	DESIGN	0.15395548858340063	WITHOUT_CLASSIFICATION
//index += getPropertyColumnSpan( i ); //TODO:  this is kinda slow...	DESIGN	0.9999993142780678	DESIGN	6.857219323009281E-7	WITHOUT_CLASSIFICATION
//TODO: need some caching scheme? really comes down to decision  //      regarding amount of state (if any) kept on PropertyAccessors	DESIGN	0.9993310686516582	DESIGN	6.689313483417656E-4	WITHOUT_CLASSIFICATION
// TODO: here is why we need to make bytecode provider global :( // TODO : again, fix this after HHH-1907 is complete	DESIGN	0.9999999983433696	DESIGN	1.656630381415193E-9	WITHOUT_CLASSIFICATION
//TODO: Yuck! This is not quite good enough, it's a quick //hack around the problem of having a to-one association //that refers to an embedded component:	DESIGN	0.9999999969694892	DESIGN	3.030510803377851E-9	WITHOUT_CLASSIFICATION
// for DOM4J "collections" only // TODO: it would be better if this was done at the higher level by Printer	DESIGN	0.9971844145828153	DESIGN	0.0028155854171846772	WITHOUT_CLASSIFICATION
// would be great to move all this below here into another method that could also be used // from the new scrolling stuff. // // Would need to change the way the max-row stuff is handled (i.e. behind an interface) so // that I could do the control breaking at the means to know when to stop	DESIGN	0.9126419526330597	DESIGN	0.0873580473669403	WITHOUT_CLASSIFICATION
//TODO: can we *always* use the "null property" approach for everything?	DESIGN	0.9691357581469718	DESIGN	0.030864241853028152	WITHOUT_CLASSIFICATION
//polymorphism comment above	DESIGN	0.9990278822283541	WITHOUT_CLASSIFICATION	9.721177716459466E-4	DESIGN
// some messy, complex stuff here, since createCriteria() can take an // aliased path, or a path rooted at the creating criteria instance	DESIGN	0.9999935931574543	WITHOUT_CLASSIFICATION	6.4068425458366075E-6	DESIGN
//TODO: really bad, evil hack to fix!!!	DESIGN	0.9999999999919535	DESIGN	8.046481105479913E-12	WITHOUT_CLASSIFICATION
// ugly hack for cases like "elements(foo.bar.collection)" // (multi-part path expression ending in elements or indices)	DESIGN	0.7251829451573437	WITHOUT_CLASSIFICATION	0.2748170548426564	DESIGN
// try block is a hack around fact that currently tuplizers are not // given the opportunity to resolve a subclass entity name.  this // allows the (we assume custom) interceptor the ability to // influence this decision if we were not able to based on the // given entityName	DESIGN	0.991318357721223	DESIGN	0.008681642278777008	WITHOUT_CLASSIFICATION
/////////////////////////////////////////////////////////////////////// // HACK ALERT !!!!!!!!!!!!!!!!!!!!!!!!!!!! // Attempt to work around "ghost" ImpliedFromElements that occasionally // show up between the actual things being joined.  This consistently // occurs from index nodes (at least against many-to-many).  Not sure // if there are other conditions // // Essentially, look-ahead to the next FromElement that actually // writes something to the SQL	DESIGN	0.5302239567964282	DESIGN	0.46977604320357175	WITHOUT_CLASSIFICATION
//init the table here instead of earlier, so that we can get a quoted table name //TODO: would it be better to simply pass the qualified table name, instead of //      splitting it up into schema/catalog/table names	DESIGN	0.9999997796212502	DESIGN	2.2037874972340474E-7	WITHOUT_CLASSIFICATION
// TODO : would be great to have a Mapping#hasNonIdentifierPropertyNamedId method // I don't believe that Mapping#getReferencedPropertyType accounts for the identifier property; so // if it returns for a property named 'id', then we should have a non-id field named id	DESIGN	0.8617208659638574	DESIGN	0.1382791340361426	WITHOUT_CLASSIFICATION
//TODO: is this really necessary????	DESIGN	0.9999999417788779	DESIGN	5.822112216971827E-8	WITHOUT_CLASSIFICATION
//TODO: ideally we need the construction of PropertyAccessor to take the following: //      1) EntityMode //      2) EntityMode-specific data (i.e., the classname for pojo entities) //      3) Property-specific data based on the EntityMode (i.e., property-name or dom4j-node-name) // The easiest way, with the introduction of the new runtime-metamodel classes, would be the // the following predicates: //      1) PropertyAccessorFactory.getPropertyAccessor() takes references to both a //          org.hibernate.metadata.EntityModeMetadata and org.hibernate.metadata.Property //      2) What is now termed a "PropertyAccessor" stores any values needed from those two //          pieces of information //      3) Code can then simply call PropertyAccess.getGetter() with no parameters; likewise with //          PropertyAccessor.getSetter()	DESIGN	0.9989262412620596	DESIGN	0.0010737587379403642	WITHOUT_CLASSIFICATION
//TODO: this is temporary in that the end result will probably not take a Property reference per-se.	DESIGN	0.999999997749122	DESIGN	2.2508779632372156E-9	WITHOUT_CLASSIFICATION
// todo : this eventually needs to be removed	DESIGN	0.6741603105300507	DESIGN	0.32583968946994923	WITHOUT_CLASSIFICATION
//TODO: make this a bit nicer	DESIGN	0.9999999950501812	DESIGN	4.949818760743328E-9	WITHOUT_CLASSIFICATION
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.9650579960569723	DESIGN	0.0349420039430276	WITHOUT_CLASSIFICATION
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.9650579960569723	DESIGN	0.0349420039430276	WITHOUT_CLASSIFICATION
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.9650579960569723	DESIGN	0.0349420039430276	WITHOUT_CLASSIFICATION
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.9650579960569723	DESIGN	0.0349420039430276	WITHOUT_CLASSIFICATION
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.9650579960569723	DESIGN	0.0349420039430276	WITHOUT_CLASSIFICATION
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.9650579960569723	DESIGN	0.0349420039430276	WITHOUT_CLASSIFICATION
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.9650579960569723	DESIGN	0.0349420039430276	WITHOUT_CLASSIFICATION
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.9650579960569723	DESIGN	0.0349420039430276	WITHOUT_CLASSIFICATION
/**     * FIXME Per the RegionFactory class Javadoc, this constructor version     * should not be necessary.     *      * @param props The configuration properties     */	DESIGN	0.9994989151114101	DESIGN	5.010848885898876E-4	WITHOUT_CLASSIFICATION
/**     * FIXME Per the RegionFactory class Javadoc, this constructor version     * should not be necessary.     *      * @param props The configuration properties     */	DESIGN	0.9994989151114101	DESIGN	5.010848885898876E-4	WITHOUT_CLASSIFICATION
/**     * FIXME Per the RegionFactory class Javadoc, this constructor version     * should not be necessary.     *      * @param props The configuration properties     */	DESIGN	0.9994989151114101	DESIGN	5.010848885898876E-4	WITHOUT_CLASSIFICATION
// TODO : probably better to calculate these and pass them in, as it'll be more performant	DESIGN	0.9999999570725052	DESIGN	4.292749480810849E-8	WITHOUT_CLASSIFICATION
