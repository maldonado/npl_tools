WITHOUT_CLASSIFICATION	//test out the optimizer:
WITHOUT_CLASSIFICATION	// aload_0
WITHOUT_CLASSIFICATION	// aload_0
WITHOUT_CLASSIFICATION	// aload_0
WITHOUT_CLASSIFICATION	// aload_0
WITHOUT_CLASSIFICATION	// aload_0
WITHOUT_CLASSIFICATION	// aload_0
WITHOUT_CLASSIFICATION	// aload_0
WITHOUT_CLASSIFICATION	// return
WITHOUT_CLASSIFICATION	// return
WITHOUT_CLASSIFICATION	/* | this | bean | args | raw bean | */
WITHOUT_CLASSIFICATION	// invokeinterface
WITHOUT_CLASSIFICATION	// astore 4 // store the raw bean
WITHOUT_CLASSIFICATION	/* current stack len = 0 */
WITHOUT_CLASSIFICATION	/* current stack len = 0 */
WITHOUT_CLASSIFICATION	/* local variables | target obj | each oldvalue | */
WITHOUT_CLASSIFICATION	// invokeinterface // invoke Enabled.getInterceptFieldCallback()
WITHOUT_CLASSIFICATION	// putfield // new value of the field
WITHOUT_CLASSIFICATION	// reference type
WITHOUT_CLASSIFICATION	// double
WITHOUT_CLASSIFICATION	// double
WITHOUT_CLASSIFICATION	// long
WITHOUT_CLASSIFICATION	// just decrement the lock, don't recache // (we don't know which transaction won)
WITHOUT_CLASSIFICATION	// decode row selection...
WITHOUT_CLASSIFICATION	//disassembled state gets put in a new array (we write to cache by value!)
WITHOUT_CLASSIFICATION	// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.
WITHOUT_CLASSIFICATION	// CHECK
WITHOUT_CLASSIFICATION	// ROW ID
WITHOUT_CLASSIFICATION	// COMPOSITE-ID
WITHOUT_CLASSIFICATION	// DISCRIMINATOR
WITHOUT_CLASSIFICATION	/*				 * Property prop = new Property(); prop.setName("id");				 * prop.setPropertyAccessorName("embedded"); prop.setValue(id);				 * entity.setIdentifierProperty(prop);				 */
WITHOUT_CLASSIFICATION	// DYNAMIC INSERT
WITHOUT_CLASSIFICATION	// PERSISTER
WITHOUT_CLASSIFICATION	// get meta's from <subclass>
WITHOUT_CLASSIFICATION	// PROPERTIES
WITHOUT_CLASSIFICATION	// PROPERTIES
WITHOUT_CLASSIFICATION	// generated properties can *never* be insertable...
WITHOUT_CLASSIFICATION	// TABLE
WITHOUT_CLASSIFICATION	//by default, natural-ids are "immutable" (constant)
WITHOUT_CLASSIFICATION	// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);
WITHOUT_CLASSIFICATION	// we found some extends attributes referencing entities which were // not already processed.  here we need to locate all entity-names // and class-names contained in this document itself, making sure // that these get removed from the extendz list such that only // extends names which require us to delay processing (i.e. // external to this document and not yet processed) are contained // in the returned result
WITHOUT_CLASSIFICATION	/**	 * Build a ResultSetMappingDefinition given a containing element for the "return-XXX" elements	 *	 * @param resultSetElem The element containing the return definitions.	 * @param path No clue...	 * @param mappings The current processing state.	 * @return The description of the mappings...	 */
WITHOUT_CLASSIFICATION	//	private boolean showSql; //	private boolean formatSql;
WITHOUT_CLASSIFICATION	//	public boolean isShowSqlEnabled() { //		return showSql; //	} // //	public boolean isFormatSqlEnabled() { //		return formatSql; //	}
WITHOUT_CLASSIFICATION	/**	 * Set a custom entity resolver. This entity resolver must be	 * set before addXXX(misc) call.	 * Default value is {@link org.hibernate.util.DTDEntityResolver}	 *	 * @param entityResolver entity resolver to use	 */
WITHOUT_CLASSIFICATION	//			final List extendsQueue,
WITHOUT_CLASSIFICATION	// If close() is called, guarantee unbind()
WITHOUT_CLASSIFICATION	// if a ThreadLocalSessionContext-bound session happens to get // serialized, to be completely correct, we need to make sure // that unbinding of that session occurs.
WITHOUT_CLASSIFICATION	// on the inverse, it makes sense that if a ThreadLocalSessionContext- // bound session then gets deserialized to go ahead and re-bind it to // the ThreadLocalSessionContext session map.
WITHOUT_CLASSIFICATION	//cannot be instantiated
WITHOUT_CLASSIFICATION	// 60 second lock timeout
WITHOUT_CLASSIFICATION	// OptimisticCache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// Cache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	//			option.setDataVersion( NonLockingDataVersion.INSTANCE );
WITHOUT_CLASSIFICATION	// do the put outside the scope of the JTA txn
WITHOUT_CLASSIFICATION	//ignore!
WITHOUT_CLASSIFICATION	// tree cache in optimistic mode seems to have as very difficult // time with remove calls on non-existent nodes (NPEs)...
WITHOUT_CLASSIFICATION	//60 seconds
WITHOUT_CLASSIFICATION	//ignore!
WITHOUT_CLASSIFICATION	//60 seconds
WITHOUT_CLASSIFICATION	//do the failfast put outside the scope of the JTA txn
WITHOUT_CLASSIFICATION	// NOTE : evict() operates locally only (i.e., does not propogate // to any other nodes in the potential cluster).  This is // exactly what is needed when we destroy() here; destroy() is used // as part of the process of shutting down a SessionFactory; thus // these removals should not be propogated
WITHOUT_CLASSIFICATION	//    protected RegionRootListener listener;
WITHOUT_CLASSIFICATION	// Establish the region root node with a non-locking data version
WITHOUT_CLASSIFICATION	// If we've been blocking for the mutex, perhaps another // thread has already reestablished the root. // In case the node was reestablised via replication, confirm it's  // marked "resident" (a status which doesn't replicate)
WITHOUT_CLASSIFICATION	// For pessimistic locking, we just want to toss out our ref // to any old invalid root node and get the latest (may be null)            
WITHOUT_CLASSIFICATION	// The rest only matters for optimistic locking, where we // need to establish the proper data version on the region root
WITHOUT_CLASSIFICATION	// Don't hold a transactional lock for this 
WITHOUT_CLASSIFICATION	// Make sure the root node for the region exists and  // has a DataVersion that never complains
WITHOUT_CLASSIFICATION	// Never evict this node
WITHOUT_CLASSIFICATION	// Fix up the resident flag
WITHOUT_CLASSIFICATION	// 60 seconds
WITHOUT_CLASSIFICATION	// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists
WITHOUT_CLASSIFICATION	// no-op. We don't own the cache so we shouldn't stop it.
WITHOUT_CLASSIFICATION	// This should only be possible if the caches are constructor injected 
WITHOUT_CLASSIFICATION	// We only build caches if *none* were passed in.  Passing in // caches counts as a clear statement of exactly what is wanted
WITHOUT_CLASSIFICATION	// Set up the cache factory
WITHOUT_CLASSIFICATION	// See if the user configured a multiplexer stack
WITHOUT_CLASSIFICATION	// Default to collections sharing entity cache if there is one
WITHOUT_CLASSIFICATION	// Default to sharing the entity cache if there is one
WITHOUT_CLASSIFICATION	// For Timestamps, we default to a separate config
WITHOUT_CLASSIFICATION	// We can't change the TM on a running cache; just check // if the cache has no TM and we're OK with that
WITHOUT_CLASSIFICATION	// Configure the cache to use our TM
WITHOUT_CLASSIFICATION	// Make sure JBC doesn't look one up
WITHOUT_CLASSIFICATION	// This method should be implemented assuming it's valid to  // do start/stop/start -- leave state appropriate for another start
WITHOUT_CLASSIFICATION	// Make sure we don't re-release the same cache
WITHOUT_CLASSIFICATION	// We use a different delegate than the non-optimistic superclass default
WITHOUT_CLASSIFICATION	// Following methods we don't delegate since they have so little logic // it's clearer to just implement them here
WITHOUT_CLASSIFICATION	// If JBC is using INVALIDATION, we don't want to propagate changes. // We use the Timestamps cache to manage invalidation
WITHOUT_CLASSIFICATION	// We don't want to waste effort setting an option if JBC is // already in LOCAL mode. If JBC is REPL_(A)SYNC then check // if they passed an config option to disable query replication
WITHOUT_CLASSIFICATION	// Don't hold the JBC node lock throughout the tx, as that // prevents updates // Add a zero (or low) timeout option so we don't block // waiting for tx's that did a put to commit
WITHOUT_CLASSIFICATION	// Double check the distributed cache
WITHOUT_CLASSIFICATION	// Get an exclusive right to update JBC for this key from this node.
WITHOUT_CLASSIFICATION	// We ensure ASYNC semantics (JBCACHE-1175)
WITHOUT_CLASSIFICATION	// Initial load from JBC
WITHOUT_CLASSIFICATION	// See if we had a 2nd invalidation from the same initial // preinvalidation timestamp. If so, only increment // if the new current value is an increase
WITHOUT_CLASSIFICATION	// We ensure ASYNC semantics (JBCACHE-1175)
WITHOUT_CLASSIFICATION	// If the workspace node has null as well, OK; if not we've // been modified in a non-comparable manner, which we have to // treat as us being newer
WITHOUT_CLASSIFICATION	// The standard comparator types are not Serializable but are singletons
WITHOUT_CLASSIFICATION	// ignore!
WITHOUT_CLASSIFICATION	// ignore it
WITHOUT_CLASSIFICATION	// construct the cache
WITHOUT_CLASSIFICATION	// local cache, so we use synchronization
WITHOUT_CLASSIFICATION	// local cache, so we use synchronization
WITHOUT_CLASSIFICATION	//ie. 60 seconds
WITHOUT_CLASSIFICATION	//swaldman 2006-08-28: define c3p0-style configuration parameters for initialPoolSize, which //                     hibernate sensibly lets default to minPoolSize, but we'll let users //                     override it with the c3p0-style property if they want.
WITHOUT_CLASSIFICATION	/*DataSource unpooled = DataSources.unpooledDataSource(				jdbcUrl, props.getProperty(Environment.USER), props.getProperty(Environment.PASS)			);*/
WITHOUT_CLASSIFICATION	// TRUE if the pool is borrowed from the outside, FALSE if we used to create it
WITHOUT_CLASSIFICATION	// get a connection from the pool (thru DriverManager, cfr. Proxool doc)
WITHOUT_CLASSIFICATION	// set the Transaction Isolation if defined
WITHOUT_CLASSIFICATION	// toggle autoCommit to false if set
WITHOUT_CLASSIFICATION	// return the connection
WITHOUT_CLASSIFICATION	// Get the configurator files (if available)
WITHOUT_CLASSIFICATION	// Default the Proxool alias setting
WITHOUT_CLASSIFICATION	// Validate that an alias name was provided to determine which pool to use
WITHOUT_CLASSIFICATION	// Validate that an alias name was provided to determine which pool to use
WITHOUT_CLASSIFICATION	// Append the stem to the proxool pool alias
WITHOUT_CLASSIFICATION	// Set the existing pool flag to true
WITHOUT_CLASSIFICATION	// Configured using the JAXP Configurator
WITHOUT_CLASSIFICATION	// Validate that an alias name was provided to determine which pool to use
WITHOUT_CLASSIFICATION	// Append the stem to the proxool pool alias
WITHOUT_CLASSIFICATION	// Append the stem to the proxool pool alias
WITHOUT_CLASSIFICATION	// Configured using the Properties File Configurator
WITHOUT_CLASSIFICATION	// Remember Isolation level
WITHOUT_CLASSIFICATION	// If the provider was leeching off an existing pool don't close it
WITHOUT_CLASSIFICATION	// We have created the pool ourselves, so shut it down
WITHOUT_CLASSIFICATION	// not really a many-to-one association *necessarily*
WITHOUT_CLASSIFICATION	// not really a many-to-one association *necessarily*
WITHOUT_CLASSIFICATION	//always overwrite nonversioned data
WITHOUT_CLASSIFICATION	//public Currency getCurrency(int col) throws HibernateException;
WITHOUT_CLASSIFICATION	// default is POJO
WITHOUT_CLASSIFICATION	// use setParameter for null values
WITHOUT_CLASSIFICATION	// use setParameter for null values
WITHOUT_CLASSIFICATION	//private CacheEntry cacheEntry;
WITHOUT_CLASSIFICATION	// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail
WITHOUT_CLASSIFICATION	//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!
WITHOUT_CLASSIFICATION	// get the updated snapshot of the entity state by cloning current state; // it is safe to copy in place, since by this time no-one else (should have) // has a reference  to the array
WITHOUT_CLASSIFICATION	// this entity defines proeprty generation, so process those generated // values...
WITHOUT_CLASSIFICATION	// have the entity entry perform post-update processing, passing it the // update state and the new version (if one).
WITHOUT_CLASSIFICATION	/*!persister.isCacheInvalidationRequired()*/
WITHOUT_CLASSIFICATION	// need to look it up from the persistence-context
WITHOUT_CLASSIFICATION	//sort first by role name
WITHOUT_CLASSIFICATION	//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!
WITHOUT_CLASSIFICATION	//then by fk
WITHOUT_CLASSIFICATION	// nothing to do		
WITHOUT_CLASSIFICATION	// nothing to do
WITHOUT_CLASSIFICATION	// an existing collection that was either non-empty or uninitialized // is replaced by null or a different collection // (if the collection is uninitialized, hibernate has no way of // knowing if the collection is actually empty without querying the db)
WITHOUT_CLASSIFICATION	// this method is called when a new non-null collection is persisted // or when an existing (non-null) collection is moved to a new owner
WITHOUT_CLASSIFICATION	//			boolean put = persister.getCache().insert(ck, cacheEntry);
WITHOUT_CLASSIFICATION	// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush
WITHOUT_CLASSIFICATION	//do nothing - we only need to notify the cache...
WITHOUT_CLASSIFICATION	//sort first by entity name
WITHOUT_CLASSIFICATION	//then by id
WITHOUT_CLASSIFICATION	// to be safe...
WITHOUT_CLASSIFICATION	// no transformations took place, so handle it as we would a // non-instrumented class
WITHOUT_CLASSIFICATION	// see if the entry represents a class file
WITHOUT_CLASSIFICATION	// see if the entry represents a class file
WITHOUT_CLASSIFICATION	// intentionally empty
WITHOUT_CLASSIFICATION	//test out the optimizer:
WITHOUT_CLASSIFICATION	// set the name of bulk accessor.
WITHOUT_CLASSIFICATION	// aload_0
WITHOUT_CLASSIFICATION	// invokespecial
WITHOUT_CLASSIFICATION	// return
WITHOUT_CLASSIFICATION	// aload_1 // load bean
WITHOUT_CLASSIFICATION	// checkcast // cast bean
WITHOUT_CLASSIFICATION	// astore_3 // store bean
WITHOUT_CLASSIFICATION	// aload_2 // args
WITHOUT_CLASSIFICATION	// iconst_i // continue to aastore // growing stack is 1
WITHOUT_CLASSIFICATION	// new
WITHOUT_CLASSIFICATION	// dup
WITHOUT_CLASSIFICATION	// aload_3 // load the raw bean
WITHOUT_CLASSIFICATION	// invokeinterface
WITHOUT_CLASSIFICATION	// invokevirtual
WITHOUT_CLASSIFICATION	// invokevirtual
WITHOUT_CLASSIFICATION	// aastore // args
WITHOUT_CLASSIFICATION	/* | this | bean | args | i | raw bean | exception | */
WITHOUT_CLASSIFICATION	// required to exception table // iconst_0 // i
WITHOUT_CLASSIFICATION	// istore_3 // store i
WITHOUT_CLASSIFICATION	// aload_1 // load the bean
WITHOUT_CLASSIFICATION	// checkcast // cast the bean into a raw bean
WITHOUT_CLASSIFICATION	/* current stack len = 0 */
WITHOUT_CLASSIFICATION	// start region to handling exception (BulkAccessorException)
WITHOUT_CLASSIFICATION	// iinc 3, 1
WITHOUT_CLASSIFICATION	// aload 4 // load the raw bean
WITHOUT_CLASSIFICATION	// aload_2 // load the args
WITHOUT_CLASSIFICATION	// iconst_i
WITHOUT_CLASSIFICATION	// aaload
WITHOUT_CLASSIFICATION	// checkcast
WITHOUT_CLASSIFICATION	// checkcast (case of primitive type) // invokevirtual (case of primitive type)
WITHOUT_CLASSIFICATION	// checkcast (case of reference type)
WITHOUT_CLASSIFICATION	/* current stack len = 2 */
WITHOUT_CLASSIFICATION	// end region to handling exception (BulkAccessorException)
WITHOUT_CLASSIFICATION	// register in exception table
WITHOUT_CLASSIFICATION	// aload_0
WITHOUT_CLASSIFICATION	// aload_0
WITHOUT_CLASSIFICATION	// return
WITHOUT_CLASSIFICATION	// return
WITHOUT_CLASSIFICATION	// dup
WITHOUT_CLASSIFICATION	// invokevirtual
WITHOUT_CLASSIFICATION	// checkcast
WITHOUT_CLASSIFICATION	/* local variables | target obj | each oldvalue | */
WITHOUT_CLASSIFICATION	// astore 5 // store exception
WITHOUT_CLASSIFICATION	// new // BulkAccessorException
WITHOUT_CLASSIFICATION	// aload 5 // load exception
WITHOUT_CLASSIFICATION	// iload_3 // i
WITHOUT_CLASSIFICATION	// invokespecial // BulkAccessorException.<init>
WITHOUT_CLASSIFICATION	// athrow
WITHOUT_CLASSIFICATION	// WARNING: classfile only
WITHOUT_CLASSIFICATION	//swallow
WITHOUT_CLASSIFICATION	/* local variable | this | */
WITHOUT_CLASSIFICATION	// aload_0 // load this
WITHOUT_CLASSIFICATION	// aload_0 // load this
WITHOUT_CLASSIFICATION	// getfield // get field "$JAVASSIST_CALLBACK" defined already
WITHOUT_CLASSIFICATION	// areturn // return the value of the field
WITHOUT_CLASSIFICATION	/* local variables | this | callback | */
WITHOUT_CLASSIFICATION	// aload_1 // load callback
WITHOUT_CLASSIFICATION	// putfield // put field "$JAVASSIST_CALLBACK" defined already
WITHOUT_CLASSIFICATION	// case of non-static field
WITHOUT_CLASSIFICATION	// getfield // get each field
WITHOUT_CLASSIFICATION	// invokeinterface // invoke Enabled.getInterceptFieldCallback()
WITHOUT_CLASSIFICATION	// ifnonnull
WITHOUT_CLASSIFICATION	// *return // each type
WITHOUT_CLASSIFICATION	// *return // each type
WITHOUT_CLASSIFICATION	// *store_1 // each type
WITHOUT_CLASSIFICATION	// ldc // name of the field
WITHOUT_CLASSIFICATION	// *load_1 // each type
WITHOUT_CLASSIFICATION	// invokeinterface // invoke Callback.read*() // each type
WITHOUT_CLASSIFICATION	// int
WITHOUT_CLASSIFICATION	// return
WITHOUT_CLASSIFICATION	// dup
WITHOUT_CLASSIFICATION	// invokeinterface
WITHOUT_CLASSIFICATION	// checkcast
WITHOUT_CLASSIFICATION	// checkcast
WITHOUT_CLASSIFICATION	// invokeinterface // enabled.getInterceptFieldCallback()
WITHOUT_CLASSIFICATION	// invokeinterface // enabled.getInterceptFieldCallback()
WITHOUT_CLASSIFICATION	// ifnonnull (label1)
WITHOUT_CLASSIFICATION	// *load_1
WITHOUT_CLASSIFICATION	// *load_1
WITHOUT_CLASSIFICATION	// putfield
WITHOUT_CLASSIFICATION	// return ;
WITHOUT_CLASSIFICATION	// ldc // field name
WITHOUT_CLASSIFICATION	// getfield // old value of the field
WITHOUT_CLASSIFICATION	// invokeinterface // callback.write*(..)
WITHOUT_CLASSIFICATION	// reference type
WITHOUT_CLASSIFICATION	// reference type
WITHOUT_CLASSIFICATION	// not array
WITHOUT_CLASSIFICATION	// array of reference type
WITHOUT_CLASSIFICATION	// boolean
WITHOUT_CLASSIFICATION	// byte
WITHOUT_CLASSIFICATION	// char
WITHOUT_CLASSIFICATION	// short
WITHOUT_CLASSIFICATION	// double
WITHOUT_CLASSIFICATION	// float
WITHOUT_CLASSIFICATION	// float
WITHOUT_CLASSIFICATION	// long
WITHOUT_CLASSIFICATION	// long
WITHOUT_CLASSIFICATION	// bad type
WITHOUT_CLASSIFICATION	// bad type
WITHOUT_CLASSIFICATION	// boolean, byte, char, int, short
WITHOUT_CLASSIFICATION	// boolean, byte, char, int, short
WITHOUT_CLASSIFICATION	// reference type
WITHOUT_CLASSIFICATION	// double
WITHOUT_CLASSIFICATION	// float
WITHOUT_CLASSIFICATION	// float
WITHOUT_CLASSIFICATION	// long
WITHOUT_CLASSIFICATION	// bad type
WITHOUT_CLASSIFICATION	// bad type
WITHOUT_CLASSIFICATION	// boolean, byte, char, int, short
WITHOUT_CLASSIFICATION	// skip finalize methods
WITHOUT_CLASSIFICATION	//Mainly for OSCache
WITHOUT_CLASSIFICATION	//decrement the lock
WITHOUT_CLASSIFICATION	// create new lock that times out immediately
WITHOUT_CLASSIFICATION	//recache the updated state
WITHOUT_CLASSIFICATION	// noop
WITHOUT_CLASSIFICATION	//null clientLock is remotely possible but will never happen in practice
WITHOUT_CLASSIFICATION	// we really could refresh the item if it // is not a lock, but it might be slower //return freshTimestamp < txTimestamp
WITHOUT_CLASSIFICATION	//by requiring <, we rely on lock timeout in the case of an unsuccessful update!
WITHOUT_CLASSIFICATION	// the user provided resulttransformer, not the one used with "select new". Here to avoid mangling // transformed/non-transformed results.
WITHOUT_CLASSIFICATION	// disassemble positional parameters
WITHOUT_CLASSIFICATION	// disassemble named parameters
WITHOUT_CLASSIFICATION	//ie. 60 seconds
WITHOUT_CLASSIFICATION	// noop
WITHOUT_CLASSIFICATION	//noop
WITHOUT_CLASSIFICATION	//noop
WITHOUT_CLASSIFICATION	// this is called from SettingsFactory irregardless; trivial to simply disregard
WITHOUT_CLASSIFICATION	// Do nothing; subclasses may override.
WITHOUT_CLASSIFICATION	// Do nothing; subclasses may override.
WITHOUT_CLASSIFICATION	//throw new UnsupportedOperationException("Can't write to a readonly object");
WITHOUT_CLASSIFICATION	//assembled state gets put in a new array (we read from cache by value!)
WITHOUT_CLASSIFICATION	//persister.setIdentifier(result, id); //before calling interceptor, for consistency with normal load
WITHOUT_CLASSIFICATION	// no-op; CCS did not have such a concept
WITHOUT_CLASSIFICATION	// no-op; CCS did not have such a concept
WITHOUT_CLASSIFICATION	// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.
WITHOUT_CLASSIFICATION	// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction
WITHOUT_CLASSIFICATION	// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction
WITHOUT_CLASSIFICATION	// classes mentioned in extends not available - so put it in queue
WITHOUT_CLASSIFICATION	// get meta's from <hibernate-mapping>
WITHOUT_CLASSIFICATION	// get meta's from <class>
WITHOUT_CLASSIFICATION	// DB-OBJECTNAME
WITHOUT_CLASSIFICATION	// MUTABLE
WITHOUT_CLASSIFICATION	// WHERE
WITHOUT_CLASSIFICATION	// CHECK
WITHOUT_CLASSIFICATION	// POLYMORPHISM
WITHOUT_CLASSIFICATION	// TODO:
WITHOUT_CLASSIFICATION	// ID
WITHOUT_CLASSIFICATION	// VERSION / TIMESTAMP
WITHOUT_CLASSIFICATION	// DISCRIMINATOR
WITHOUT_CLASSIFICATION	// Primary key constraint
WITHOUT_CLASSIFICATION	// this is either a <version/> tag with no type attribute, // or a <timestamp/> tag
WITHOUT_CLASSIFICATION	// for version properties marked as being generated, make sure they are "always" // generated; aka, "insert" is invalid; this is dis-allowed by the DTD, // but just to make sure...
WITHOUT_CLASSIFICATION	// DISCRIMINATOR
WITHOUT_CLASSIFICATION	// ( (Column) discrim.getColumnIterator().next() ).setType(type);
WITHOUT_CLASSIFICATION	// go ahead and set the lazy here, since pojo.proxy can override it.
WITHOUT_CLASSIFICATION	// DYNAMIC UPDATE
WITHOUT_CLASSIFICATION	// IMPORT
WITHOUT_CLASSIFICATION	// BATCH SIZE
WITHOUT_CLASSIFICATION	// SELECT BEFORE UPDATE
WITHOUT_CLASSIFICATION	// OPTIMISTIC LOCK MODE
WITHOUT_CLASSIFICATION	// PERSISTER
WITHOUT_CLASSIFICATION	// CUSTOM SQL
WITHOUT_CLASSIFICATION	// get meta's from <subclass>
WITHOUT_CLASSIFICATION	// properties
WITHOUT_CLASSIFICATION	// joined subclasses
WITHOUT_CLASSIFICATION	// KEY
WITHOUT_CLASSIFICATION	// CHECK
WITHOUT_CLASSIFICATION	// CUSTOM SQL
WITHOUT_CLASSIFICATION	// properties
WITHOUT_CLASSIFICATION	// KEY
WITHOUT_CLASSIFICATION	// model.getKey().setType( new Type( model.getIdentifier() ) );
WITHOUT_CLASSIFICATION	// TABLENAME
WITHOUT_CLASSIFICATION	// join.getKey().setType( new Type( lazz.getIdentifier() ) );
WITHOUT_CLASSIFICATION	// PROPERTIES
WITHOUT_CLASSIFICATION	// COLUMN(S)
WITHOUT_CLASSIFICATION	// column index
WITHOUT_CLASSIFICATION	//column unique-key
WITHOUT_CLASSIFICATION	// automatically makes a column with the default name if none is specifed by XML
WITHOUT_CLASSIFICATION	// for an any
WITHOUT_CLASSIFICATION	// insertable simply because that is the user did not specify // anything; just override it
WITHOUT_CLASSIFICATION	// the user specifically supplied insert="true", // which constitutes an illegal combo
WITHOUT_CLASSIFICATION	// properties generated on update can never be updateable...
WITHOUT_CLASSIFICATION	// updateable only because the user did not specify  // anything; just override it
WITHOUT_CLASSIFICATION	// the user specifically supplied update="true", // which constitutes an illegal combo
WITHOUT_CLASSIFICATION	// ROLENAME
WITHOUT_CLASSIFICATION	// FETCH STRATEGY
WITHOUT_CLASSIFICATION	// TABLE
WITHOUT_CLASSIFICATION	//tableName = mappings.getNamingStrategy().propertyToTableName( className, path );
WITHOUT_CLASSIFICATION	// SORT
WITHOUT_CLASSIFICATION	// CUSTOM SQL
WITHOUT_CLASSIFICATION	// unsorted, natural, comparator.class.name
WITHOUT_CLASSIFICATION	// ORPHAN DELETE (used for programmer error detection)
WITHOUT_CLASSIFICATION	// set up second pass
WITHOUT_CLASSIFICATION	// an "embedded" component (composite ids and unique) // note that this does not handle nested components
WITHOUT_CLASSIFICATION	// a nested composite element
WITHOUT_CLASSIFICATION	// for an any // we will have to use reflection
WITHOUT_CLASSIFICATION	//NOTE SPECIAL CASE: // one-to-one constrained=false cannot be proxied, // so default to join and non-lazy
WITHOUT_CLASSIFICATION	// use old (HB 2.1) defaults if outer-join is specified
WITHOUT_CLASSIFICATION	//lazy = !join;
WITHOUT_CLASSIFICATION	// GENERATOR
WITHOUT_CLASSIFICATION	// ID UNSAVED-VALUE
WITHOUT_CLASSIFICATION	// VERSION UNSAVED-VALUE
WITHOUT_CLASSIFICATION	// not necessarily a *unique* property reference
WITHOUT_CLASSIFICATION	// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);
WITHOUT_CLASSIFICATION	// contained elements:
WITHOUT_CLASSIFICATION	// for non-inverse one-to-many, with a not-null fk, add a backref!
WITHOUT_CLASSIFICATION	// Bind the where
WITHOUT_CLASSIFICATION	// Bind the order-by
WITHOUT_CLASSIFICATION	// Bind the filters
WITHOUT_CLASSIFICATION	// overriding inherited meta attribute. HBX-621 & HBX-793			
WITHOUT_CLASSIFICATION	// first, iterate over all elements capable of defining an extends attribute // collecting all found extends references if they cannot be resolved // against the already processed mappings.
WITHOUT_CLASSIFICATION	// mappings might contain either the "raw" extends name (in the case of // an entity-name mapping) or a FQN (in the case of a POJO mapping).
WITHOUT_CLASSIFICATION	//+ "_" + referencedColumnName not used for backward compatibility
WITHOUT_CLASSIFICATION	//SessionFactory name:
WITHOUT_CLASSIFICATION	//JDBC and connection settings:
WITHOUT_CLASSIFICATION	//JDBC and connection settings:
WITHOUT_CLASSIFICATION	//Interrogate JDBC metadata
WITHOUT_CLASSIFICATION	// user supplied JDBC connections
WITHOUT_CLASSIFICATION	//use dialect default properties
WITHOUT_CLASSIFICATION	// Transaction settings:
WITHOUT_CLASSIFICATION	//SQL Generation settings:
WITHOUT_CLASSIFICATION	//Query parser settings:
WITHOUT_CLASSIFICATION	// Second-level / query cache:
WITHOUT_CLASSIFICATION	// The cache provider is needed when we either have second-level cache enabled // or query cache enabled.  Note that useSecondLevelCache is enabled by default
WITHOUT_CLASSIFICATION	//SQL Exception converter:
WITHOUT_CLASSIFICATION	//Statistics and logging:
WITHOUT_CLASSIFICATION	//		settings.setShowSqlEnabled(showSql);
WITHOUT_CLASSIFICATION	//		settings.setFormatSqlEnabled(formatSql);
WITHOUT_CLASSIFICATION	//Schema export:
WITHOUT_CLASSIFICATION	//		String provider = properties.getProperty( Environment.BYTECODE_PROVIDER ); //		log.info( "Bytecode provider name : " + provider ); //		BytecodeProvider bytecodeProvider = buildBytecodeProvider( provider ); //		settings.setBytecodeProvider( bytecodeProvider );
WITHOUT_CLASSIFICATION	// legacy behavior, apply the bridge...
WITHOUT_CLASSIFICATION	// maybe a concrete SQLpropertyresult type, but Map is exactly what is required at the moment
WITHOUT_CLASSIFICATION	//if dotted and not load-collection nor return-join //regular property
WITHOUT_CLASSIFICATION	//	private ComponentTuplizerFactory componentTuplizerFactory; todo : HHH-3517 and HHH-1907 //	private BytecodeProvider bytecodeProvider;
WITHOUT_CLASSIFICATION	// public getters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	//	public ComponentTuplizerFactory getComponentTuplizerFactory() { //		return componentTuplizerFactory; //	}
WITHOUT_CLASSIFICATION	// package protected setters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	//	void setShowSqlEnabled(boolean b) { //		showSql = b; //	} // //	void setFormatSqlEnabled(boolean b) { //		formatSql = b; //	}
WITHOUT_CLASSIFICATION	//	public BytecodeProvider getBytecodeProvider() { //		return bytecodeProvider; //	} // //	void setBytecodeProvider(BytecodeProvider bytecodeProvider) { //		this.bytecodeProvider = bytecodeProvider; //	}
WITHOUT_CLASSIFICATION	// using local since the inheritedMetas at this point is not the correct map since it is always the empty map
WITHOUT_CLASSIFICATION	//	private ComponentTuplizerFactory componentTuplizerFactory; todo : HHH-3517 and HHH-1907
WITHOUT_CLASSIFICATION	//	protected List extendsQueue;
WITHOUT_CLASSIFICATION	//		extendsQueue = new ArrayList();
WITHOUT_CLASSIFICATION	//		componentTuplizerFactory = new ComponentTuplizerFactory();
WITHOUT_CLASSIFICATION	// if doc is null, then for whatever reason, the cached file cannot be used...
WITHOUT_CLASSIFICATION	// drop them in reverse order in case db needs it done that way...
WITHOUT_CLASSIFICATION	//	public ComponentTuplizerFactory getComponentTuplizerFactory() { //		return componentTuplizerFactory; //	}
WITHOUT_CLASSIFICATION	// This method may be called many times!!
WITHOUT_CLASSIFICATION	//			Iterator iterator = extendsQueue.iterator();
WITHOUT_CLASSIFICATION	//		Iterator iter = extendsQueue.iterator();
WITHOUT_CLASSIFICATION	// found
WITHOUT_CLASSIFICATION	// found
WITHOUT_CLASSIFICATION	//		settings.setComponentTuplizerFactory( this.getComponentTuplizerFactory() );
WITHOUT_CLASSIFICATION	//	private final List extendsQueue;
WITHOUT_CLASSIFICATION	//<String, String>
WITHOUT_CLASSIFICATION	//<String, String>
WITHOUT_CLASSIFICATION	//+ "_" + referencedColumnName not used for backward compatibility
WITHOUT_CLASSIFICATION	//Set USE_REFLECTION_OPTIMIZER to false to fix HHH-227
WITHOUT_CLASSIFICATION	//orphan delete not supported for EntityMode.DOM4J
WITHOUT_CLASSIFICATION	//element = XMLHelper.generateDom4jElement( persister.getNodeName() );
WITHOUT_CLASSIFICATION	// intentionally empty
WITHOUT_CLASSIFICATION	//orphan delete not supported for EntityMode.DOM4J
WITHOUT_CLASSIFICATION	//element = XMLHelper.generateDom4jElement( persister.getNodeName() );
WITHOUT_CLASSIFICATION	//needed for SOAP libraries, etc
WITHOUT_CLASSIFICATION	//maintain correct duplication if loaded in a cartesian product
WITHOUT_CLASSIFICATION	// the element has been removed from the set
WITHOUT_CLASSIFICATION	// the element has changed
WITHOUT_CLASSIFICATION	//Careful: these methods do not initialize the collection.
WITHOUT_CLASSIFICATION	//needed so that we remove this collection from the second-level cache
WITHOUT_CLASSIFICATION	// override on some subclasses
WITHOUT_CLASSIFICATION	//override on some subclasses
WITHOUT_CLASSIFICATION	//do this bit after setting initialized to true or it will recurse
WITHOUT_CLASSIFICATION	// short-circuit(s) // no new elements, the old list contains only Orphans // no old elements, so no Orphans neither
WITHOUT_CLASSIFICATION	// create the collection holding the Orphans
WITHOUT_CLASSIFICATION	// collect EntityIdentifier(s) of the *current* elements - add them into a HashSet for fast access
WITHOUT_CLASSIFICATION	// iterate over the *old* list
WITHOUT_CLASSIFICATION	/*(array==null) ? tempList.size() :*/
WITHOUT_CLASSIFICATION	// intentionally empty
WITHOUT_CLASSIFICATION	/*(array==null) ? tempList.get(i) :*/
WITHOUT_CLASSIFICATION	//write(); -- doesn't
WITHOUT_CLASSIFICATION	//write(); -- doesn't
WITHOUT_CLASSIFICATION	// amazingly, these two will work because AbstractCollection // uses iterator() to fill the array
WITHOUT_CLASSIFICATION	//needed for SOAP libraries, etc
WITHOUT_CLASSIFICATION	// finally, what it's all about...
WITHOUT_CLASSIFICATION	// note that if we load this collection from a cartesian product // the multiplicity would be broken ... so use an idbag instead
WITHOUT_CLASSIFICATION	// Anyway, here we implement <set> semantics for a // <one-to-many> <bag>!
WITHOUT_CLASSIFICATION	//a shortcut if its location didn't change!
WITHOUT_CLASSIFICATION	//search for it //note that this code is incorrect for other than one-to-many
WITHOUT_CLASSIFICATION	//needed for SOAP libraries, etc
WITHOUT_CLASSIFICATION	//a shortcut if its location didn't change!
WITHOUT_CLASSIFICATION	//search for it //note that this code is incorrect for other than one-to-many
WITHOUT_CLASSIFICATION	/*public boolean equals(Object other) {		read();		return bag.equals(other);	}	public int hashCode(Object other) {		read();		return bag.hashCode();	}*/
WITHOUT_CLASSIFICATION	// List OPERATIONS:
WITHOUT_CLASSIFICATION	//pad with nulls from the current last element up to the new index
WITHOUT_CLASSIFICATION	//needed for SOAP libraries, etc
WITHOUT_CLASSIFICATION	//needed for SOAP libraries, etc
WITHOUT_CLASSIFICATION	// from Map
WITHOUT_CLASSIFICATION	// from SortedMap
WITHOUT_CLASSIFICATION	//inject the data
WITHOUT_CLASSIFICATION	// cannot be instantiated
WITHOUT_CLASSIFICATION	//default pool size 20
WITHOUT_CLASSIFICATION	// trying via forName() first to be as close to DriverManager's semantics
WITHOUT_CLASSIFICATION	// if debug level is enabled, then log the password, otherwise mask it
WITHOUT_CLASSIFICATION	// register a cleanup synch
WITHOUT_CLASSIFICATION	// wrap the session in the transaction-protection proxy
WITHOUT_CLASSIFICATION	// then bind it
WITHOUT_CLASSIFICATION	// try to make sure we don't wrap and already wrapped session
WITHOUT_CLASSIFICATION	// allow these to go through the the real session no matter what
WITHOUT_CLASSIFICATION	// limit the methods available if no transaction is active
WITHOUT_CLASSIFICATION	// allow these (deprecated) methods to pass through
WITHOUT_CLASSIFICATION	// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// We could register the session against the transaction even though it is // not started, but we'd have no guarentee of ever getting the map // entries cleaned up (aside from spawning threads).
WITHOUT_CLASSIFICATION	//cannot be instantiated
WITHOUT_CLASSIFICATION	//private String propertyName;
WITHOUT_CLASSIFICATION	/*public PropertyProjection project() {		return Projections.property(getPropertyName());	}*/
WITHOUT_CLASSIFICATION	//String[] fk = StringHelper.qualify( "collection_", cp.getKeyColumnNames() );
WITHOUT_CLASSIFICATION	//" collection_ where " +
WITHOUT_CLASSIFICATION	//unsupported
WITHOUT_CLASSIFICATION	//unsupported
WITHOUT_CLASSIFICATION	//cannot be instantiated
WITHOUT_CLASSIFICATION	//the following two lines were added to ensure that this.params is not null, which //can happen with two-deep nested subqueries
WITHOUT_CLASSIFICATION	//with two-deep subqueries, the same alias would get generated for //both using the old method (criteriaQuery.generateSQLAlias()), so //that is now used as a fallback if the main criteria alias isn't set
WITHOUT_CLASSIFICATION	//implicit polymorphism not supported (would need a union)
WITHOUT_CLASSIFICATION	//pull off the last ", "
WITHOUT_CLASSIFICATION	//$NON-NLS-1
WITHOUT_CLASSIFICATION	// we have the form: trim(trimSource) //      so we trim leading and trailing spaces
WITHOUT_CLASSIFICATION	// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource)
WITHOUT_CLASSIFICATION	// NOT_SUPPORTED_SHOULD_USE_JDBC3_PreparedStatement.getGeneratedKeys_method
WITHOUT_CLASSIFICATION	// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly
WITHOUT_CLASSIFICATION	// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// Oracle did add support for ANSI CASE statements in 9i
WITHOUT_CLASSIFICATION	// the standard SQL function name is current_timestamp...
WITHOUT_CLASSIFICATION	// Informix doesn't have a bit type
WITHOUT_CLASSIFICATION	// or BYTE // or TEXT? // or MONEY
WITHOUT_CLASSIFICATION	// strip table-owner because Informix always returns constraint names as "<table-owner>.<constraint-name>"
WITHOUT_CLASSIFICATION	// build the map of standard ANSI SQL aggregation functions ~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	//pre H3.2 behavior: super.getReturnType(ct, m);
WITHOUT_CLASSIFICATION	// finally use the sqltype if == on Hibernate types did not find a match.
WITHOUT_CLASSIFICATION	//because numeric can be anything
WITHOUT_CLASSIFICATION	// constructors and factory methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// standard sql92 functions (can be overridden by subclasses)
WITHOUT_CLASSIFICATION	//map second/minute/hour/day/month/year to ANSI extract(), override on subclasses
WITHOUT_CLASSIFICATION	// register hibernate types for default use in scalar sqlquery type auto detection
WITHOUT_CLASSIFICATION	// database type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// hibernate type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// keyword support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// native identifier generatiion ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// GUID support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// limit/offset support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// by default we report no support
WITHOUT_CLASSIFICATION	// by default we report no support for NOWAIT lock semantics
WITHOUT_CLASSIFICATION	// table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// current timestamp support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// SQLException support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// identifier quoting support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// grrr... for differentiation of mysql storage engines
WITHOUT_CLASSIFICATION	// Informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// return false here, as most databases do not properly support this construct...
WITHOUT_CLASSIFICATION	// Mckoi has no known variation of a "SELECT ... FOR UPDATE" syntax...
WITHOUT_CLASSIFICATION	// Oracle8 and previous define only a "DATE" type which //      is used to represent all aspects of date/time
WITHOUT_CLASSIFICATION	//starts with 1, implicitly
WITHOUT_CLASSIFICATION	//" cascade";
WITHOUT_CLASSIFICATION	//trim off the length/precision/scale
WITHOUT_CLASSIFICATION	/*public boolean dropTemporaryTableAfterUse() {		//we have to, because postgres sets current tx		//to rollback only after a failed create table		return true;	}*/
WITHOUT_CLASSIFICATION	// CHECK VIOLATION
WITHOUT_CLASSIFICATION	// UNIQUE VIOLATION
WITHOUT_CLASSIFICATION	// FOREIGN KEY VIOLATION
WITHOUT_CLASSIFICATION	// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// NOT NULL VIOLATION
WITHOUT_CLASSIFICATION	// ALL OTHER
WITHOUT_CLASSIFICATION	// Register the type of the out param - PostgreSQL uses Types.OTHER
WITHOUT_CLASSIFICATION	// seems to not really... //	public boolean supportsRowValueConstructorSyntax() { //		return true; //	}
WITHOUT_CLASSIFICATION	// seems to have spotty LOB suppport
WITHOUT_CLASSIFICATION	// HHH-2300
WITHOUT_CLASSIFICATION	// ignore (probably H2 not in the classpath)
WITHOUT_CLASSIFICATION	// Numeric Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// String Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// Time and Date Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// System Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// not null is implicit
WITHOUT_CLASSIFICATION	// 23000: Check constraint violation: {0} // 23001: Unique index or primary key violation: {0}
WITHOUT_CLASSIFICATION	// Display the dialect version.
WITHOUT_CLASSIFICATION	// The RDMS concat() function only supports 2 parameters
WITHOUT_CLASSIFICATION	// Dialect method overrides ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// Original Dialect.java returns " for update";
WITHOUT_CLASSIFICATION	// Verify the state of this new method in Hibernate 3.0 Dialect.java
WITHOUT_CLASSIFICATION	// Origial Dialect.java returns true;
WITHOUT_CLASSIFICATION	// The keyword used to specify a nullable column.
WITHOUT_CLASSIFICATION	// *** Sequence methods - start. The RDMS dialect needs these
WITHOUT_CLASSIFICATION	// methods to make it possible to use the Native Id generator
WITHOUT_CLASSIFICATION	// The where clause was added to eliminate this statement from Brute Force Searches.
WITHOUT_CLASSIFICATION	// *** Sequence methods - end
WITHOUT_CLASSIFICATION	// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	//starts with 1, implicitly
WITHOUT_CLASSIFICATION	// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400
WITHOUT_CLASSIFICATION	// Used with DROP TABLE to delete all records in the table.
WITHOUT_CLASSIFICATION	// RDMS supports the UNION ALL clause.
WITHOUT_CLASSIFICATION	// RDMS has no known variation of a "SELECT ... FOR UPDATE" syntax...
WITHOUT_CLASSIFICATION	// Multi-param dialect functions...
WITHOUT_CLASSIFICATION	// function templates
WITHOUT_CLASSIFICATION	//not null is implicit
WITHOUT_CLASSIFICATION	// this assumes schema support, which is present in 1.8.0 and later...
WITHOUT_CLASSIFICATION	// HSQLDB only supports READ_UNCOMMITTED transaction isolation
WITHOUT_CLASSIFICATION	// Multi-param string dialect functions...
WITHOUT_CLASSIFICATION	// Multi-param numeric dialect functions...
WITHOUT_CLASSIFICATION	// Multi-param date dialect functions...
WITHOUT_CLASSIFICATION	// simple nullability constraint
WITHOUT_CLASSIFICATION	// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// not final-static to avoid possible classcast exceptions if using different oracle drivers.
WITHOUT_CLASSIFICATION	//	register the type of the out param - an Oracle specific type
WITHOUT_CLASSIFICATION	// TimesTen has no BLOB/CLOB support, but these types may be suitable  // for some applications. The length is limited to 4 million bytes.
WITHOUT_CLASSIFICATION	// new methods in dialect3
WITHOUT_CLASSIFICATION	/*public boolean supportsForUpdateNowait() {		return false;	}*/
WITHOUT_CLASSIFICATION	// TimesTen has no known variation of a "SELECT ... FOR UPDATE" syntax...
WITHOUT_CLASSIFICATION	// iterate entries ordered by capacity to find first fit
WITHOUT_CLASSIFICATION	// add new ordered map
WITHOUT_CLASSIFICATION	//		registerColumnType( Types.VARCHAR, 16777215, "mediumtext" );
WITHOUT_CLASSIFICATION	// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	//		 This assumes you will want to ignore any update counts 
WITHOUT_CLASSIFICATION	// sql server just returns automatically
WITHOUT_CLASSIFICATION	//		return "select CURRENT_TIMESTAMP from RDB$DATABASE";
WITHOUT_CLASSIFICATION	//registerColumnType data types
WITHOUT_CLASSIFICATION	// hibernate seems to ignore this type...
WITHOUT_CLASSIFICATION	// IBID for current_time and current_date
WITHOUT_CLASSIFICATION	// Tell hibernate to use getBytes instead of getBinaryStream
WITHOUT_CLASSIFICATION	// No batch statements
WITHOUT_CLASSIFICATION	/*		 * We might want a special case for 19,2. This is very common for money types		 * and here it is converted to 18,1		 */
WITHOUT_CLASSIFICATION	//no pointbase BIT
WITHOUT_CLASSIFICATION	//no pointbase TINYINT
WITHOUT_CLASSIFICATION	// Pointbase has no known variation of a "SELECT ... FOR UPDATE" syntax...
WITHOUT_CLASSIFICATION	//starts with 1, implicitly
WITHOUT_CLASSIFICATION	// The current_timestamp is more accurate, but only known to be supported // in SQL Server 7.0 and later (i.e., Sybase not known to support it at all)
WITHOUT_CLASSIFICATION	// SQL Server (at least up through 2005) does not support defining // cascade delete constraints which can circel back to the mutating // table
WITHOUT_CLASSIFICATION	// here assume SQLServer2005 using snapshot isolation, which does not have this problem
WITHOUT_CLASSIFICATION	//		registerColumnType( Types.BLOB, 16777215, "mediumblob" ); //		registerColumnType( Types.BLOB, 65535, "blob" );
WITHOUT_CLASSIFICATION	//		registerColumnType( Types.CLOB, 16777215, "mediumtext" ); //		registerColumnType( Types.CLOB, 65535, "text" );
WITHOUT_CLASSIFICATION	//		registerColumnType( Types.VARCHAR, 16777215, "mediumtext" ); //		registerColumnType( Types.VARCHAR, 65535, "text" );
WITHOUT_CLASSIFICATION	//starts with 1, implicitly
WITHOUT_CLASSIFICATION	/* package-private */
WITHOUT_CLASSIFICATION	// sql server just returns automatically
WITHOUT_CLASSIFICATION	//Sybase BIT type does not support null values
WITHOUT_CLASSIFICATION	//		 This assumes you will want to ignore any update counts
WITHOUT_CLASSIFICATION	// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	//		 You may still have other ResultSets or update counts left to process here //		 but you can't do it now or the ResultSet you just got will be closed
WITHOUT_CLASSIFICATION	//not null ... (start with 1) is implicit
WITHOUT_CLASSIFICATION	// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.
WITHOUT_CLASSIFICATION	// Multi-param string dialect functions...
WITHOUT_CLASSIFICATION	// Multi-param numeric dialect functions...
WITHOUT_CLASSIFICATION	// Multi-param date dialect functions...
WITHOUT_CLASSIFICATION	// add another (inner) nested select // add the main query // close off the inner nested select
WITHOUT_CLASSIFICATION	// add the main query
WITHOUT_CLASSIFICATION	//add the restriction to the outer select
WITHOUT_CLASSIFICATION	// This assumes you will want to ignore any update counts 
WITHOUT_CLASSIFICATION	// You may still have other ResultSets or update counts left to process here  // but you can't do it now or the ResultSet you just got will be closed 
WITHOUT_CLASSIFICATION	// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	//starts with 1, implicitly
WITHOUT_CLASSIFICATION	// simple nullability constraint
WITHOUT_CLASSIFICATION	// not final-static to avoid possible classcast exceptions if using different oracle drivers.
WITHOUT_CLASSIFICATION	//	register the type of the out param - an Oracle specific type
WITHOUT_CLASSIFICATION	// features which change between 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// features which remain constant across 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// binary %Stream // character %Stream
WITHOUT_CLASSIFICATION	//getDefaultProperties().setProperty(Environment.STATEMENT_BATCH_SIZE, NO_BATCH);
WITHOUT_CLASSIFICATION	// hibernate impelemnts cast in Dialect.java
WITHOUT_CLASSIFICATION	// aggregate functions shouldn't be registered, right? //registerFunction( "list", new StandardSQLFunction("list",Hibernate.STRING) ); // stopped on $list
WITHOUT_CLASSIFICATION	// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// below is for Cache' that don't have str in 2007.1 there is str and we register str directly
WITHOUT_CLASSIFICATION	// note that %string is deprecated
WITHOUT_CLASSIFICATION	// %upper is deprecated
WITHOUT_CLASSIFICATION	// The syntax used to add a foreign key constraint to a table.
WITHOUT_CLASSIFICATION	// identifier-commalist
WITHOUT_CLASSIFICATION	// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// identifier-commalist
WITHOUT_CLASSIFICATION	// The syntax used to add a column to a table
WITHOUT_CLASSIFICATION	// Completely optional cascading drop clause.
WITHOUT_CLASSIFICATION	// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// LIMIT support (ala TOP) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// InterSystems Cache' does not current support "SELECT ... FOR UPDATE" syntax... // Set your transaction mode to READ_COMMITTED before using
WITHOUT_CLASSIFICATION	// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	/*<String>*/
WITHOUT_CLASSIFICATION	// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// The keyword used to specify a nullable column.
WITHOUT_CLASSIFICATION	// Does the LIMIT clause come at the start of the SELECT statement, rather than at the end?
WITHOUT_CLASSIFICATION	// Does the LIMIT clause take a "maximum" row number instead of a total number of returned rows?
WITHOUT_CLASSIFICATION	// The name of the SQL function that transforms a string to lowercase
WITHOUT_CLASSIFICATION	// Create an OuterJoinGenerator for this dialect.
WITHOUT_CLASSIFICATION	// The keyword used to insert a row without specifying // any column values
WITHOUT_CLASSIFICATION	//registerFunction( "trim", new StandardSQLFunction( "trim", Hibernate.STRING ) );
WITHOUT_CLASSIFICATION	//skip the FROM keyword in params
WITHOUT_CLASSIFICATION	/*package*/
WITHOUT_CLASSIFICATION	// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly
WITHOUT_CLASSIFICATION	// SQLFunction implementation
WITHOUT_CLASSIFICATION	// conceivable that the dialect ctor could throw HibernateExceptions, so don't re-wrap
WITHOUT_CLASSIFICATION	// register the standard dialect resolver
WITHOUT_CLASSIFICATION	// register resolvers set via Environment property
WITHOUT_CLASSIFICATION	// kept for backward compatibility until after the 3.1beta5 release of HA
WITHOUT_CLASSIFICATION	//cache the hashcode
WITHOUT_CLASSIFICATION	// the CascadingAction contract ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// the CascadingAction implementations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// delete does cascade to uninitialized collections
WITHOUT_CLASSIFICATION	// orphans should be deleted during delete
WITHOUT_CLASSIFICATION	/*(LockMode) anything*/
WITHOUT_CLASSIFICATION	// lock doesn't cascade to uninitialized collections
WITHOUT_CLASSIFICATION	// refresh doesn't cascade to uninitialized collections
WITHOUT_CLASSIFICATION	// evicts don't cascade to uninitialized collections
WITHOUT_CLASSIFICATION	// saves / updates don't cascade to uninitialized collections
WITHOUT_CLASSIFICATION	// orphans should be deleted during save/update
WITHOUT_CLASSIFICATION	// for deprecated saveOrUpdateCopy()
WITHOUT_CLASSIFICATION	// persists don't cascade to uninitialized collections
WITHOUT_CLASSIFICATION	//a proxy cannot be transient and it breaks ForeignKeys.isTransient
WITHOUT_CLASSIFICATION	// replicate does cascade to uninitialized collections
WITHOUT_CLASSIFICATION	// static helper methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// handles arrays and newly instantiated collections
WITHOUT_CLASSIFICATION	// Actually the semantics of the next three are really "Bag" // Note that, unlike objects, collection insertions, updates, // deletions are not really remembered between flushes. We // just re-use the same Lists for convenience.
WITHOUT_CLASSIFICATION	// Add these directly to the executions queue
WITHOUT_CLASSIFICATION	// continue loop
WITHOUT_CLASSIFICATION	//sort the updates by fk
WITHOUT_CLASSIFICATION	//sort the updates by pk
WITHOUT_CLASSIFICATION	// the mapping of entity names to their latest batch numbers.
WITHOUT_CLASSIFICATION	// the map of batch numbers to EntityInsertAction lists
WITHOUT_CLASSIFICATION	//optimize the hash size to eliminate a rehash.
WITHOUT_CLASSIFICATION	// the list of entity names that indicate the batch number
WITHOUT_CLASSIFICATION	// remove the current element from insertions. It will be added back later.
WITHOUT_CLASSIFICATION	// the entity associated with the current action.
WITHOUT_CLASSIFICATION	// There is already an existing batch for this type of entity. // Check to see if the latest batch is acceptable.
WITHOUT_CLASSIFICATION	// now rebuild the insertions list. There is a batch for each entry in the name list.
WITHOUT_CLASSIFICATION	// the current batch number is the latest batch for this entity type.
WITHOUT_CLASSIFICATION	// loop through all the associations of the current entity and make sure that they are processed // before the current batch number
WITHOUT_CLASSIFICATION	// find the batch number associated with the current association, if any.
WITHOUT_CLASSIFICATION	// create a new batch for this type. The batch number is the number of current batches.
WITHOUT_CLASSIFICATION	// loop through all the associated entities and make sure they have been // processed before the latest // batch associated with this entity type.
WITHOUT_CLASSIFICATION	// since this entity will now be processed in the latest possible batch, // we can be assured that it will come after all other associations, // there's not need to continue checking.
WITHOUT_CLASSIFICATION	//cascade to current collection elements
WITHOUT_CLASSIFICATION	//not really necessary, but good for consistency...
WITHOUT_CLASSIFICATION	// we can't cascade to non-embedded elements
WITHOUT_CLASSIFICATION	//a newly instantiated collection can't have orphans
WITHOUT_CLASSIFICATION	// handle orphaned entities!!
WITHOUT_CLASSIFICATION	// Loaded entity instances, by EntityUniqueKey
WITHOUT_CLASSIFICATION	// Identity map of EntityEntry instances, by the entity instance
WITHOUT_CLASSIFICATION	// Entity proxies, by EntityKey
WITHOUT_CLASSIFICATION	// Snapshots of current database state for entities // that have *not* been loaded
WITHOUT_CLASSIFICATION	// Identity map of array holder ArrayHolder instances, by the array instance
WITHOUT_CLASSIFICATION	// Collection wrappers, by the CollectionKey //key=CollectionKey, value=PersistentCollection
WITHOUT_CLASSIFICATION	// Set of EntityKeys of deleted objects
WITHOUT_CLASSIFICATION	// properties that we have tried to load, and not found in the database
WITHOUT_CLASSIFICATION	// A list of collection wrappers that were instantiating during result set // processing, that we will need to initialize at the end of the query
WITHOUT_CLASSIFICATION	// A container for collections we load up when the owning entity is not // yet loaded ... for now, this is purely transient!
WITHOUT_CLASSIFICATION	// Downgrade locks
WITHOUT_CLASSIFICATION	// any earlier proxy takes precedence
WITHOUT_CLASSIFICATION	//unwrap the object
WITHOUT_CLASSIFICATION	//initialize + unwrap the object
WITHOUT_CLASSIFICATION	//return the proxied object
WITHOUT_CLASSIFICATION	//overwrite old proxy
WITHOUT_CLASSIFICATION	// early exit...
WITHOUT_CLASSIFICATION	// or should it actually throw an exception?
WITHOUT_CLASSIFICATION	//treat it just like a new collection
WITHOUT_CLASSIFICATION	//do this work only at the very highest level of the load //don't let this method be called recursively
WITHOUT_CLASSIFICATION	//note that each iteration of the loop may add new elements
WITHOUT_CLASSIFICATION	//it might be an unwrapped collection reference! //try to find a wrapper (slowish)
WITHOUT_CLASSIFICATION	/*public boolean isNonExistant(EntityKey key) {		return nonExistantEntityKeys.contains(key);	}*/
WITHOUT_CLASSIFICATION	/*public boolean isNonExistant(EntityUniqueKey key) {		return nonExistentEntityUniqueKeys.contains(key);	}*/
WITHOUT_CLASSIFICATION	// iterate all the entities currently associated with the persistence context.
WITHOUT_CLASSIFICATION	// does this entity entry pertain to the entity persister in which we are interested (owner)?
WITHOUT_CLASSIFICATION	//check if the managed object is the parent
WITHOUT_CLASSIFICATION	// otherwise, the proxy was pruned during the serialization process
WITHOUT_CLASSIFICATION	// adds remove as a sort-of alias for delete...
WITHOUT_CLASSIFICATION	//bad cast
WITHOUT_CLASSIFICATION	//return lhsPersister.getSubclassPropertyColumnNames(property);
WITHOUT_CLASSIFICATION	//property-refs for associations defined on a //component are not supported, so no need to slice
WITHOUT_CLASSIFICATION	//if there is no property-ref, assume the join //is to the subclass table (ie. the table of the //subclass that the association belongs to)
WITHOUT_CLASSIFICATION	//handle a property-ref
WITHOUT_CLASSIFICATION	/*NativeSQLQueryReturn*/
WITHOUT_CLASSIFICATION	//final boolean forceCacheRefresh,
WITHOUT_CLASSIFICATION	// why is all others non final ?
WITHOUT_CLASSIFICATION	//this.forceCacheRefresh = forceCacheRefresh;
WITHOUT_CLASSIFICATION	// HELLA IMPORTANT OPTIMIZATION!!!
WITHOUT_CLASSIFICATION	/*return that.type.equals(type) && 			EqualsHelper.equals(that.value, value);*/
WITHOUT_CLASSIFICATION	//Must occur after resolving identifiers!
WITHOUT_CLASSIFICATION	//take a snapshot
WITHOUT_CLASSIFICATION	// do a check
WITHOUT_CLASSIFICATION	// the owning entity may have been deleted and its identifier unset due to // identifier-rollback; in which case, try to look up its identifier from // the persistence context
WITHOUT_CLASSIFICATION	// do the work
WITHOUT_CLASSIFICATION	// We've been here before
WITHOUT_CLASSIFICATION	// it is or was referenced _somewhere_
WITHOUT_CLASSIFICATION	// do the work
WITHOUT_CLASSIFICATION	// if either its role changed,
WITHOUT_CLASSIFICATION	// or its key changed
WITHOUT_CLASSIFICATION	// we will need to create new entries
WITHOUT_CLASSIFICATION	// we will need to remove ye olde entries
WITHOUT_CLASSIFICATION	// force initialize!
WITHOUT_CLASSIFICATION	// else if it's elements changed
WITHOUT_CLASSIFICATION	//ATTRIBUTES MAINTAINED BETWEEN FLUSH CYCLES
WITHOUT_CLASSIFICATION	// session-start/post-flush persistent state
WITHOUT_CLASSIFICATION	// allow the CollectionSnapshot to be serialized
WITHOUT_CLASSIFICATION	// ATTRIBUTES USED ONLY DURING FLUSH CYCLE
WITHOUT_CLASSIFICATION	// "current" means the reference that was found during flush() 
WITHOUT_CLASSIFICATION	// "loaded" means the reference that is consistent  // with the current database state
WITHOUT_CLASSIFICATION	// during flush, we navigate the object graph to // collections and decide what to do with them
WITHOUT_CLASSIFICATION	// if we instantiate a collection during the flush() process, // we must ignore it for the rest of the flush()
WITHOUT_CLASSIFICATION	// new collections that get found + wrapped // during flush shouldn't be ignored
WITHOUT_CLASSIFICATION	//a newly wrapped collection is NOT dirty (or we get unnecessary version updates)
WITHOUT_CLASSIFICATION	//collection.clearDirty()
WITHOUT_CLASSIFICATION	//collection.clearDirty()
WITHOUT_CLASSIFICATION	// detached collections that get found + reattached // during flush shouldn't be ignored
WITHOUT_CLASSIFICATION	//optimization
WITHOUT_CLASSIFICATION	//optimization //optimization
WITHOUT_CLASSIFICATION	//re-snapshot
WITHOUT_CLASSIFICATION	// for convenience to save some lookups
WITHOUT_CLASSIFICATION	//NOTE: this is not updated when properties are fetched lazily!
WITHOUT_CLASSIFICATION	//memory optimization
WITHOUT_CLASSIFICATION	// use the id value of a newly instantiated instance as the unsaved-value
WITHOUT_CLASSIFICATION	// copied from Session:
WITHOUT_CLASSIFICATION	// this should not happen since the DTD prevents it
WITHOUT_CLASSIFICATION	// JoinProcessor needs to know if the where clause fragment came from a dynamic filter or not so it // can put the where clause fragment in the right place in the SQL AST.   'hasFilterCondition' keeps track // of that fact.
WITHOUT_CLASSIFICATION	// the current join represents the join between a many-to-many association table // and its "target" table.  Here we need to apply any additional filters // defined specifically on the many-to-many
WITHOUT_CLASSIFICATION	//check basic level one nullablilty
WITHOUT_CLASSIFICATION	//values is not null and is checkable, we'll look deeper
WITHOUT_CLASSIFICATION	//for non null args, check for components and elements containing components
WITHOUT_CLASSIFICATION	//cache the hashcode
WITHOUT_CLASSIFICATION	//persistent collections may have components
WITHOUT_CLASSIFICATION	//check for all components values in the collection
WITHOUT_CLASSIFICATION	/* will check current level if some of them are not null		 * or sublevels if they exist		 */
WITHOUT_CLASSIFICATION	//do the test
WITHOUT_CLASSIFICATION	// if its an uninitialized proxy it can't be transient
WITHOUT_CLASSIFICATION	//unwrap it
WITHOUT_CLASSIFICATION	// See if the entity is already bound to this session, if not look at the // entity identifier and assume that the entity is persistent if the // id is not "unsaved" (that is, we rely on foreign keys to keep // database integrity)
WITHOUT_CLASSIFICATION	// an unfetched association can only point to // an entity that already exists in the db
WITHOUT_CLASSIFICATION	// let the interceptor inspect the instance to decide
WITHOUT_CLASSIFICATION	// let the persister inspect the instance to decide
WITHOUT_CLASSIFICATION	// we use the assumed value, if there is one, to avoid hitting // the database
WITHOUT_CLASSIFICATION	// hit the database, after checking the session cache for a snapshot
WITHOUT_CLASSIFICATION	// context-entity-identifier returns null explicitly if the entity // is not associated with the persistence context; so make some // deeper checks...
WITHOUT_CLASSIFICATION	//int count = 0;
WITHOUT_CLASSIFICATION	//the first key found after the given key
WITHOUT_CLASSIFICATION	//checkForEnd = false;
WITHOUT_CLASSIFICATION	//count++;
WITHOUT_CLASSIFICATION	//end of array, start filling again from start
WITHOUT_CLASSIFICATION	//we ran out of keys to try
WITHOUT_CLASSIFICATION	//first element of array is reserved for the actual instance we are loading!
WITHOUT_CLASSIFICATION	//the first id found after the given id
WITHOUT_CLASSIFICATION	//we ran out of ids to try
WITHOUT_CLASSIFICATION	// look for existing collection as part of the persistence context
WITHOUT_CLASSIFICATION	// ignore this row of results! Note the early exit
WITHOUT_CLASSIFICATION	// initialize this collection
WITHOUT_CLASSIFICATION	// create one
WITHOUT_CLASSIFICATION	// warning: can cause a recursive calls! (proxy initialization)
WITHOUT_CLASSIFICATION	// there were no queued additions // and the role has a cache
WITHOUT_CLASSIFICATION	// and this is not a forced initialization during flush
WITHOUT_CLASSIFICATION	// some filters affecting the collection are enabled on the session, so do not do the put into the cache.
WITHOUT_CLASSIFICATION	// cleanup code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// loading collection xrefs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// Collection load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// simple cache of param metadata based on query string.  Ideally, the // original "user-supplied query" string should be used to retreive this // metadata (i.e., not the para-list-expanded query string) to avoid // unnecessary cache entries. // Used solely for caching param metadata for native-sql queries, see // getSQLParameterMetadata() for a discussion as to why...
WITHOUT_CLASSIFICATION	// the cache of the actual plans...
WITHOUT_CLASSIFICATION	/*package*/
WITHOUT_CLASSIFICATION	/*package*/
WITHOUT_CLASSIFICATION	// assumes that types are all of span 1
WITHOUT_CLASSIFICATION	// for native-sql queries, the param metadata is determined outside // any relation to a query plan, because query plan creation and/or // retreival for a native-sql query depends on all of the return // types having been set, which might not be the case up-front when // param metadata would be most useful
WITHOUT_CLASSIFICATION	// don't care...
WITHOUT_CLASSIFICATION	// Recognition code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// don't care...
WITHOUT_CLASSIFICATION	// NOTE : firstRow is zero-based
WITHOUT_CLASSIFICATION	// break the outer loop !!!
WITHOUT_CLASSIFICATION	// named parameter
WITHOUT_CLASSIFICATION	// could be either an ordinal or JPA-positional parameter
WITHOUT_CLASSIFICATION	// a peek ahead showed this as an JPA-positional parameter
WITHOUT_CLASSIFICATION	// make sure this "name" is an integral
WITHOUT_CLASSIFICATION	// pre-determine and cache the hashcode
WITHOUT_CLASSIFICATION	// perform the actual work
WITHOUT_CLASSIFICATION	// if everything went ok, commit the transaction and close the obtained // connection handle...
WITHOUT_CLASSIFICATION	// at some point the processing went bad, so we need to: //      1) make sure the connection handle gets released //      2) try to cleanup the JTA context as much as possible
WITHOUT_CLASSIFICATION	// finally handle the exception
WITHOUT_CLASSIFICATION	// a "detached" collection that belonged to a different entity
WITHOUT_CLASSIFICATION	//saveOrUpdateCopy() is deprecated!
WITHOUT_CLASSIFICATION	// collectionPersister should not be null, but we don't want to throw // an exception if it is null
WITHOUT_CLASSIFICATION	// otherwise a null or brand new collection // this will also (inefficiently) handle arrays, which // have no snapshot, so we can't do any better //processArrayOrNewCollection(collection, type);
WITHOUT_CLASSIFICATION	// a "detached" collection that originally belonged to the same entity
WITHOUT_CLASSIFICATION	//do nothing
WITHOUT_CLASSIFICATION	//do nothing
WITHOUT_CLASSIFICATION	//Force a substitution!
WITHOUT_CLASSIFICATION	// The user requested a "greater" (i.e. more restrictive) form of // pessimistic lock
WITHOUT_CLASSIFICATION	// the database now holds a lock + the object is flushed from the cache, // so release the soft lock
WITHOUT_CLASSIFICATION	// now update the object .. has to be outside the main if block above (because of collections)
WITHOUT_CLASSIFICATION	// Search for collections by reachability, updating their role. // We don't want to touch collections reachable from a deleted object
WITHOUT_CLASSIFICATION	// this is a situation where the entity id is assigned by a post-insert generator // and was saved outside the transaction forcing it to be delayed
WITHOUT_CLASSIFICATION	// NOTE: we need to do the wrap here even if its not "dirty", // because collections need wrapping but changes to _them_ // don't dirty the container. Also, for versioned data, we // need to wrap before calling searchForDirtyCollections
WITHOUT_CLASSIFICATION	//grab its state saved at deletion
WITHOUT_CLASSIFICATION	// grab its current state
WITHOUT_CLASSIFICATION	// schedule the update // note that we intentionally do _not_ pass in currentPersistentState!
WITHOUT_CLASSIFICATION	// substitutes into values by side-effect
WITHOUT_CLASSIFICATION	// give the Interceptor a chance to process property values, if the properties // were modified by the Interceptor, we need to set them back to the object
WITHOUT_CLASSIFICATION	// compare to cached state (ignoring collections unless versioned)
WITHOUT_CLASSIFICATION	// if it was dirtied by a collection only
WITHOUT_CLASSIFICATION	// increment the version number (if necessary)
WITHOUT_CLASSIFICATION	// check nullability but do not perform command execute // we'll use scheduled updates for that.
WITHOUT_CLASSIFICATION	//give the Interceptor a chance to modify property values
WITHOUT_CLASSIFICATION	//now we might need to recalculate the dirtyProperties array
WITHOUT_CLASSIFICATION	//use the current version
WITHOUT_CLASSIFICATION	// Interceptor returned null, so do the dirtycheck ourself, if possible
WITHOUT_CLASSIFICATION	// object loaded by update()
WITHOUT_CLASSIFICATION	// dirty check against the usual snapshot of the entity
WITHOUT_CLASSIFICATION	// dirty check against the database snapshot, if possible/necessary
WITHOUT_CLASSIFICATION	// the Interceptor handled the dirty checking
WITHOUT_CLASSIFICATION	//even process null collections
WITHOUT_CLASSIFICATION	// get the id from the object
WITHOUT_CLASSIFICATION	//always do an INSERT, and let it fail by constraint violation
WITHOUT_CLASSIFICATION	//what is the version on the database?
WITHOUT_CLASSIFICATION	/// HHH-2378
WITHOUT_CLASSIFICATION	//will result in a SQL UPDATE:
WITHOUT_CLASSIFICATION	//else do nothing (don't even reassociate object!)
WITHOUT_CLASSIFICATION	// no existing row - do an insert
WITHOUT_CLASSIFICATION	//refresh() does not pass an entityName
WITHOUT_CLASSIFICATION	//do not return a proxy! //(this option indicates we are initializing a proxy)
WITHOUT_CLASSIFICATION	//return a proxy if appropriate
WITHOUT_CLASSIFICATION	// return existing object or initialized proxy (unless deleted)
WITHOUT_CLASSIFICATION	// return new uninitialized proxy
WITHOUT_CLASSIFICATION	// this object was already loaded
WITHOUT_CLASSIFICATION	// Entity was found in second-level cache...
WITHOUT_CLASSIFICATION	// make it circular-reference safe
WITHOUT_CLASSIFICATION	// intializes result by side-effect
WITHOUT_CLASSIFICATION	// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Pre-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	//some statistics
WITHOUT_CLASSIFICATION	//safe from concurrent modification because of how entryList() is implemented on IdentityMap
WITHOUT_CLASSIFICATION	// Initialize dirty flags for arrays + collections with composite elements // and reset reached, doupdate, etc.
WITHOUT_CLASSIFICATION	// Among other things, updateReachables() will recursively load all // collections that are moving roles. This might cause entities to // be loaded.
WITHOUT_CLASSIFICATION	// So this needs to be safe from concurrent modification problems. // It is safe because of how IdentityMap implements entrySet()
WITHOUT_CLASSIFICATION	// Update the status of the object and if necessary, schedule an update
WITHOUT_CLASSIFICATION	// Schedule updates to collections:
WITHOUT_CLASSIFICATION	// we need to lock the collection caches before // executing entity inserts/updates in order to // account for bidi associations
WITHOUT_CLASSIFICATION	// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Post-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	//the database has changed now, so the subselect results need to be invalidated
WITHOUT_CLASSIFICATION	//if the collection is dereferenced, remove from the session cache //iter.remove(); //does not work, since the entrySet is not backed by the set
WITHOUT_CLASSIFICATION	//otherwise recreate the mapping between the collection and its key
WITHOUT_CLASSIFICATION	//get a snapshot
WITHOUT_CLASSIFICATION	/* package-private */
WITHOUT_CLASSIFICATION	/* package-private */
WITHOUT_CLASSIFICATION	// key is an entity involved with the operation performed by the listener; // value is a flag indicating if the listener explicitly operates on the entity
WITHOUT_CLASSIFICATION	// EARLY EXIT!!!
WITHOUT_CLASSIFICATION	//ie. the entity came in from update()
WITHOUT_CLASSIFICATION	// before any callbacks, etc, so subdeletions see that this deletion happened first
WITHOUT_CLASSIFICATION	// Ensures that containing deletions happen before sub-deletions
WITHOUT_CLASSIFICATION	//		TypeFactory.deepCopy( currentState, propTypes, persister.getPropertyUpdateability(), deletedState, session );
WITHOUT_CLASSIFICATION	// cascade-delete to collections BEFORE the collection owner is deleted
WITHOUT_CLASSIFICATION	// cascade-delete to many-to-one AFTER the parent was deleted
WITHOUT_CLASSIFICATION	// if it is an initialized proxy, let cascade // handle it later on
WITHOUT_CLASSIFICATION	//assign the requested id to the proxy, *before* //reassociating the proxy
WITHOUT_CLASSIFICATION	// an uninitialized proxy, noop, don't even need to // return an id, since it is never a save()
WITHOUT_CLASSIFICATION	//initialize properties of the event:
WITHOUT_CLASSIFICATION	//return the id in the event object
WITHOUT_CLASSIFICATION	//TRANSIENT or DELETED
WITHOUT_CLASSIFICATION	// use the id assigned to the instance
WITHOUT_CLASSIFICATION	// assume this is a newly instantiated transient object // which should be saved rather than updated
WITHOUT_CLASSIFICATION	// this is a transient object with existing persistent state not loaded by the session
WITHOUT_CLASSIFICATION	// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()
WITHOUT_CLASSIFICATION	//cachedState,
WITHOUT_CLASSIFICATION	//assume true, since we don't really know, and it doesn't matter
WITHOUT_CLASSIFICATION	//a "detached" collection!
WITHOUT_CLASSIFICATION	// if the collection belonged to a different entity, // clean up the existing state of the collection
WITHOUT_CLASSIFICATION	//log.debug( "calling onLoad()" );
WITHOUT_CLASSIFICATION	//EARLY EXIT!
WITHOUT_CLASSIFICATION	// note: performExecutions() clears all collectionXxxxtion  // collections (the collection actions) in the session
WITHOUT_CLASSIFICATION	// if no array holder we found an unwrappered array (this can't occur, // because we now always call wrap() before getting to here) // return (ah==null) ? true : searchForDirtyCollections(ah, type);
WITHOUT_CLASSIFICATION	// if not wrappered yet, its dirty (this can't occur, because // we now always call wrap() before getting to here) // return ( ! (obj instanceof PersistentCollection) ) ? //true : searchForDirtyCollections( (PersistentCollection) obj, type );
WITHOUT_CLASSIFICATION	//we need to check even if it was not initialized, because of delayed adds!
WITHOUT_CLASSIFICATION	//NOTE: EARLY EXIT!
WITHOUT_CLASSIFICATION	// find any entities that are still transient after retry
WITHOUT_CLASSIFICATION	//EARLY EXIT!
WITHOUT_CLASSIFICATION	// Check the persistence context for an entry relating to this // entity to be merged...
WITHOUT_CLASSIFICATION	// we have specialized case of a detached entity from the // perspective of the merge operation.  Specifically, we // have an incoming entity instance which has a corresponding // entry in the current persistence context, but registered // under a different entity instance
WITHOUT_CLASSIFICATION	//DELETED
WITHOUT_CLASSIFICATION	//before cascade!
WITHOUT_CLASSIFICATION	// cascade first, so that all unsaved objects get their // copy created before we actually copy //cascadeOnMerge(event, persister, entity, copyCache, Cascades.CASCADE_BEFORE_MERGE);
WITHOUT_CLASSIFICATION	//this bit is only *really* absolutely necessary for handling //requestedId, but is also good if we merge multiple object //graphs, since it helps ensure uniqueness
WITHOUT_CLASSIFICATION	// continue...; we'll find out if it ends up not getting saved later
WITHOUT_CLASSIFICATION	// cascade first, so that all unsaved objects get their // copy created before we actually copy
WITHOUT_CLASSIFICATION	// check that entity id = requestedId
WITHOUT_CLASSIFICATION	//before cascade!
WITHOUT_CLASSIFICATION	// we got here because we assumed that an instance // with an assigned id was detached, when it was // really persistent
WITHOUT_CLASSIFICATION	// cascade first, so that all unsaved objects get their  // copy created before we actually copy
WITHOUT_CLASSIFICATION	//copyValues works by reflection, so explicitly mark the entity instance dirty
WITHOUT_CLASSIFICATION	//EARLY EXIT
WITHOUT_CLASSIFICATION	//source.getBatcher().executeBatch(); //found another way to ensure that all batched joined inserts have been executed
WITHOUT_CLASSIFICATION	// substitutes into values by side-effect
WITHOUT_CLASSIFICATION	//now done in EntityIdentityInsertAction //persister.setIdentifier( entity, id, source.getEntityMode() );
WITHOUT_CLASSIFICATION	//source.getPersistenceContext().removeNonExist( new EntityKey( id, persister, source.getEntityMode() ) );
WITHOUT_CLASSIFICATION	//keep the existing version number in the case of replicate!
WITHOUT_CLASSIFICATION	// cascade-save to many-to-one BEFORE the parent is saved
WITHOUT_CLASSIFICATION	//pass this as an argument only to avoid double looking
WITHOUT_CLASSIFICATION	// the object is persistent
WITHOUT_CLASSIFICATION	//the entity is associated with the session, so check its status
WITHOUT_CLASSIFICATION	// do nothing for persistent instances
WITHOUT_CLASSIFICATION	//ie. e.status==DELETED
WITHOUT_CLASSIFICATION	// the object is transient or detached
WITHOUT_CLASSIFICATION	//NOTE EARLY EXIT!
WITHOUT_CLASSIFICATION	// Private constructor - stops checkstyle from complaining.
WITHOUT_CLASSIFICATION	// First, try to find a matching constructor accepting a ViolatedConstraintNameExtracter param...
WITHOUT_CLASSIFICATION	// eat it and try next
WITHOUT_CLASSIFICATION	// Otherwise, try to use the no-arg constructor
WITHOUT_CLASSIFICATION	// oracle sql-state code for deadlock
WITHOUT_CLASSIFICATION	// CollectionPropertyMapping processes everything except 'index'.
WITHOUT_CLASSIFICATION	// remove initial ", "
WITHOUT_CLASSIFICATION	// remove initial " and "
WITHOUT_CLASSIFICATION	//beforeClassTokens.add("new"); DEFINITELY DON'T HAVE THIS!!
WITHOUT_CLASSIFICATION	//notAfterClassTokens.add(",");
WITHOUT_CLASSIFICATION	// just especially for the trivial collection filter
WITHOUT_CLASSIFICATION	//update last non-whitespace token, if necessary
WITHOUT_CLASSIFICATION	// select-range is terminated by declaration of "from"
WITHOUT_CLASSIFICATION	//scan for next non-whitespace token
WITHOUT_CLASSIFICATION	// Note this!!
WITHOUT_CLASSIFICATION	// Error message constants.
WITHOUT_CLASSIFICATION	// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// semantic action handling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// Handle collection-fiter compilation. // IMPORTANT NOTE: This is modifying the INPUT (HQL) tree, not the output tree!
WITHOUT_CLASSIFICATION	// Show the modified AST.
WITHOUT_CLASSIFICATION	// Create a parameter specification for the collection filter...
WITHOUT_CLASSIFICATION	// Use the delegate.
WITHOUT_CLASSIFICATION	// Use the delegate.
WITHOUT_CLASSIFICATION	// Get the names of the columns used to link between the collection // owner and the collection elements.
WITHOUT_CLASSIFICATION	// The path AST should be a DotNode, and it should have been evaluated already.
WITHOUT_CLASSIFICATION	// Tell the dot node about the join type.
WITHOUT_CLASSIFICATION	// Re-arrange the tree so that the collection function is the root and the lhs is the path.
WITHOUT_CLASSIFICATION	// Don't forget to resolve the argument! // Resolve the collection function now.
WITHOUT_CLASSIFICATION	// Resolve everything up to this dot, but don't resolve the placeholders yet.
WITHOUT_CLASSIFICATION	// Should mean that no such property was found
WITHOUT_CLASSIFICATION	// Was there an explicit select expression?
WITHOUT_CLASSIFICATION	// Attach any mapping-defined "ORDER BY" fragments
WITHOUT_CLASSIFICATION	// Use the explicitly declared select expression; determine the // return types indicated by each select token
WITHOUT_CLASSIFICATION	// After that, process the JOINs. // Invoke a delegate to do the work, as this is farily complex.
WITHOUT_CLASSIFICATION	// Make #@%$^#^&# sure no alias is applied to the table name
WITHOUT_CLASSIFICATION	// We need to generate ids as part of this bulk insert. // // Note that this is only supported for sequence-style generators and // post-insert-style generators; basically, only in-db generators
WITHOUT_CLASSIFICATION	// Use the delegate.
WITHOUT_CLASSIFICATION	// We need to seed the version value as part of this bulk insert
WITHOUT_CLASSIFICATION	// we need to wrtap the param in a cast()
WITHOUT_CLASSIFICATION	// This is called when it's time to fully resolve a path expression.
WITHOUT_CLASSIFICATION	// Generate implicit joins, only if necessary.
WITHOUT_CLASSIFICATION	// Notify the FROM element that it is being referenced by the select.
WITHOUT_CLASSIFICATION	// Turn off includeSubclasses on all FromElements.
WITHOUT_CLASSIFICATION	// create the node initially with the param name so that it shows // appropriately in the "original text" attribute
WITHOUT_CLASSIFICATION	// Use the delegate, resolve identifiers as FROM element aliases.
WITHOUT_CLASSIFICATION	// select clauses for insert statements should alwasy be treated as shallow
WITHOUT_CLASSIFICATION	// no need to even collect this information if the persister is considered multi-table
WITHOUT_CLASSIFICATION	// Make sure that the persister is versioned
WITHOUT_CLASSIFICATION	// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// Use the delegate.
WITHOUT_CLASSIFICATION	// --Commented out by Inspection (12/11/04 10:56 AM): int getWarningCount();
WITHOUT_CLASSIFICATION	// Alias references and identifiers use the same node class.
WITHOUT_CLASSIFICATION	// switch
WITHOUT_CLASSIFICATION	// make a new one
WITHOUT_CLASSIFICATION	// just do the regular thing if you can't find the ctor // Your AST must have default ctor to use this.
WITHOUT_CLASSIFICATION	// Initialize SQL nodes here.
WITHOUT_CLASSIFICATION	// semantic action processing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// if template is null we just write the function out as it appears in the hql statement
WITHOUT_CLASSIFICATION	// this function has a template -> redirect output and catch the arguments
WITHOUT_CLASSIFICATION	// --- Inner classes (moved here from sql-gen.g) ---
WITHOUT_CLASSIFICATION	// check two "adjecent" nodes at the top of the from-clause tree
WITHOUT_CLASSIFICATION	///////////////////////////////////////////////////////////////////////
WITHOUT_CLASSIFICATION	// these are just two unrelated table references
WITHOUT_CLASSIFICATION	// again, both should be FromElements
WITHOUT_CLASSIFICATION	// NOTE : firstRow is zero-based
WITHOUT_CLASSIFICATION	// right represents a joins originating from left; or // both right and left reprersent joins originating from the same FromElement
WITHOUT_CLASSIFICATION	// check a set of parent/child nodes in the from-clause tree // to determine if a comma is required between them
WITHOUT_CLASSIFICATION	// right represents a joins originating from left...
WITHOUT_CLASSIFICATION	// all clear
WITHOUT_CLASSIFICATION	// Ignore the token class name parameter, and use a specific token class.
WITHOUT_CLASSIFICATION	//overriden to avoid System.exit
WITHOUT_CLASSIFICATION	//overriden to avoid System.exit
WITHOUT_CLASSIFICATION	// remember that ordinal parameters numbers are 1-based!!!
WITHOUT_CLASSIFICATION	// don't care about other param types here, just those explicitly user-defined...
WITHOUT_CLASSIFICATION	// If the query is already compiled, skip the compilation.
WITHOUT_CLASSIFICATION	// Remember the parameters for the compilation.
WITHOUT_CLASSIFICATION	// PHASE 1 : Parse the HQL into an AST.
WITHOUT_CLASSIFICATION	// PHASE 2 : Analyze the HQL AST, and produce an SQL AST.
WITHOUT_CLASSIFICATION	// PHASE 3 : Generate the SQL.
WITHOUT_CLASSIFICATION	// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes
WITHOUT_CLASSIFICATION	// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes
WITHOUT_CLASSIFICATION	//only needed during compilation phase...
WITHOUT_CLASSIFICATION	// Transform the tree.
WITHOUT_CLASSIFICATION	// Parse the query string into an HQL AST.
WITHOUT_CLASSIFICATION	// Delegate to the QueryLoader...
WITHOUT_CLASSIFICATION	// Delegate to the QueryLoader...
WITHOUT_CLASSIFICATION	// Delegate to the QueryLoader...
WITHOUT_CLASSIFICATION	// NOTE : ( max - 1 ) because first is zero-based while max is not...
WITHOUT_CLASSIFICATION	// -- Package local methods for the QueryLoader delegate --
WITHOUT_CLASSIFICATION	// If there are no collection fetches, then no further checks are needed
WITHOUT_CLASSIFICATION	// A shallow query is ok (although technically there should be no fetching here...)
WITHOUT_CLASSIFICATION	// should be the first, but just to be safe...
WITHOUT_CLASSIFICATION	// Use the delegate.
WITHOUT_CLASSIFICATION	// Use the delegate.
WITHOUT_CLASSIFICATION	// Impl Note: allows multiple collection fetches as long as the // entire fecthed graph still "points back" to a single // root entity for return
WITHOUT_CLASSIFICATION	// Otherwise, we have a non-scalar select with defined collection fetch(es). // Make sure that there is only a single root entity in the return (no tuples)
WITHOUT_CLASSIFICATION	// This is not strictly true.  We actually just need to make sure that // it is ordered by root-entity PK and that that order-by comes before // any non-root-entity ordering...
WITHOUT_CLASSIFICATION	//			paramTranslations = new ParameterTranslationsImpl( collectedParameterSpecifications );
WITHOUT_CLASSIFICATION	// we are already processing a dot-structure
WITHOUT_CLASSIFICATION	// igndore it...
WITHOUT_CLASSIFICATION	// we are now at a new tree level
WITHOUT_CLASSIFICATION	// [jsd] The fix for HHH-558...
WITHOUT_CLASSIFICATION	// If the token can tell us if it could be an identifier...
WITHOUT_CLASSIFICATION	// ... and the expected token type was an identifier, then:
WITHOUT_CLASSIFICATION	// Use the token as an identifier.
WITHOUT_CLASSIFICATION	// Add the token to the AST.
WITHOUT_CLASSIFICATION	// (NOT (EQ a b) ) => (NE a b)
WITHOUT_CLASSIFICATION	// (NOT (NE a b) ) => (EQ a b)
WITHOUT_CLASSIFICATION	// (NOT (LT a b) ) => (GE a b)
WITHOUT_CLASSIFICATION	// (NOT (GE a b) ) => (LT a b)
WITHOUT_CLASSIFICATION	// (NOT (LE a b) ) => (GT a b)
WITHOUT_CLASSIFICATION	// (NOT (LIKE a b) ) => (NOT_LIKE a b)
WITHOUT_CLASSIFICATION	// (NOT (NOT_LIKE a b) ) => (LIKE a b)
WITHOUT_CLASSIFICATION	// (NOT (IS_NOT_NULL a b) ) => (IS_NULL a b)
WITHOUT_CLASSIFICATION	// (NOT (BETWEEN a b) ) => (NOT_BETWEEN a b)
WITHOUT_CLASSIFICATION	// Initialize the error handling delegate.
WITHOUT_CLASSIFICATION	//overriden to avoid System.exit
WITHOUT_CLASSIFICATION	// if // if // Otherwise, handle the error normally.
WITHOUT_CLASSIFICATION	// (NOT (NOT_BETWEEN a b) ) => (BETWEEN a b)
WITHOUT_CLASSIFICATION	/* This can never happen because this rule will always eliminate the child NOT.			case NOT:				return x.getFirstChild();			// (NOT (NOT x) ) => (x)*/
WITHOUT_CLASSIFICATION	// Just add a 'not' parent.
WITHOUT_CLASSIFICATION	// (EQ NULL b) => (IS_NULL b)
WITHOUT_CLASSIFICATION	// (EQ a NULL) => (IS_NULL a)
WITHOUT_CLASSIFICATION	// NOTE: Because we're using ASTUtil.createParent(), the tree must be created from the bottom up. // IS EMPTY x => (EXISTS (QUERY (SELECT_FROM (FROM x) ) ) )
WITHOUT_CLASSIFICATION	// Add NOT if it's negated.
WITHOUT_CLASSIFICATION	// Create nodes that track line and column number.
WITHOUT_CLASSIFICATION	// Case 1: Multi token keywords GROUP BY and ORDER BY // The next token ( LT(2) ) should be 'by'... otherwise, this is just an ident.
WITHOUT_CLASSIFICATION	// Case 2: The current token is after FROM and before '.'.
WITHOUT_CLASSIFICATION	// This handles HHH-354, where there is a strange property name in a where clause. // If the lookahead contains a DOT then something that isn't an IDENT...
WITHOUT_CLASSIFICATION	// See if the second lookahed token can be an identifier.
WITHOUT_CLASSIFICATION	// Set it!
WITHOUT_CLASSIFICATION	// ignore
WITHOUT_CLASSIFICATION	// strip the " where "
WITHOUT_CLASSIFICATION	// Don't really know all the codes required to adequately decipher returned jdbc exceptions here. // simply allow the failure to be eaten and the subsequent insert-selects/deletes should fail
WITHOUT_CLASSIFICATION	// at the very least cleanup the data :)
WITHOUT_CLASSIFICATION	// First, save off the pertinent ids, as the return value
WITHOUT_CLASSIFICATION	// jdbc params are 1-based
WITHOUT_CLASSIFICATION	// jdbc params are 1-based
WITHOUT_CLASSIFICATION	// Start performing the updates
WITHOUT_CLASSIFICATION	// First, save off the pertinent ids, saving the number of pertinent ids for return
WITHOUT_CLASSIFICATION	// Start performing the deletes
WITHOUT_CLASSIFICATION	// otherwise, everything ok.
WITHOUT_CLASSIFICATION	// visit width-first, then depth
WITHOUT_CLASSIFICATION	// if the types report logical equivalence, return true...
WITHOUT_CLASSIFICATION	// otherwise, perform a "deep equivalence" check...
WITHOUT_CLASSIFICATION	// If there is no WHERE node, make one.
WITHOUT_CLASSIFICATION	// inject the WHERE after the parent
WITHOUT_CLASSIFICATION	// Never include subclasses for implied from elements.
WITHOUT_CLASSIFICATION	// Moved here from SelectClause [jsd]
WITHOUT_CLASSIFICATION	///////////////////////////////////////////////////////////////////////////
WITHOUT_CLASSIFICATION	// Use the table fromElement and the property name to get the array of column names.
WITHOUT_CLASSIFICATION	// Set the attributes of the property reference expression.
WITHOUT_CLASSIFICATION	// If the uresolved property path isn't set yet, just use the property name.
WITHOUT_CLASSIFICATION	// The 'from element' that the property is in.
WITHOUT_CLASSIFICATION	// Prepare the left hand side and get the data type.
WITHOUT_CLASSIFICATION	// Prepare the left hand side and get the data type.
WITHOUT_CLASSIFICATION	// If this dot has already been resolved, stop now.
WITHOUT_CLASSIFICATION	// If there is no data type for this node, and we're at the end of the path (top most dot node), then // this might be a Java constant.
WITHOUT_CLASSIFICATION	// The property is a collection...
WITHOUT_CLASSIFICATION	// The property is a component...
WITHOUT_CLASSIFICATION	// The property is another class..
WITHOUT_CLASSIFICATION	// Otherwise, this is a primitive type.
WITHOUT_CLASSIFICATION	//foo.bars.size (also handles deprecated stuff like foo.bars.maxelement for backwardness)
WITHOUT_CLASSIFICATION	// This 'dot' expression now refers to the resulting from element.
WITHOUT_CLASSIFICATION	// Always add the collection's query spaces.
WITHOUT_CLASSIFICATION	// in non-select queries, the only time we should need to join is if we are in a subquery from clause
WITHOUT_CLASSIFICATION	// this is the regression style determination which matches the logic of the classic translator
WITHOUT_CLASSIFICATION	// This 'dot' expression now refers to the resulting from element.
WITHOUT_CLASSIFICATION	// even though we might find a pre-existing element by join path, we may not be able to reuse it...
WITHOUT_CLASSIFICATION	// NOTE : addDuplicateAlias() already performs nullness checks on the alias.
WITHOUT_CLASSIFICATION	// if the from-clauses are the same, we can be a little more aggressive in terms of what we reuse
WITHOUT_CLASSIFICATION	// again, null != null here
WITHOUT_CLASSIFICATION	// If this is an implied join in a from element, then use the impled join type which is part of the // tree parser's state (set by the gramamar actions).
WITHOUT_CLASSIFICATION	// otherwise (subquery case) dont reuse the fromElement if we are processing the from-clause of the subquery
WITHOUT_CLASSIFICATION	// we know only the lhs-hand type, so use that
WITHOUT_CLASSIFICATION	// the referenced node text is the special 'id'
WITHOUT_CLASSIFICATION	// only the identifier property field name can be a reference to the associated entity's PK...
WITHOUT_CLASSIFICATION	// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression
WITHOUT_CLASSIFICATION	// Append the new property name onto the unresolved path.
WITHOUT_CLASSIFICATION	// If the lhs is a collection, use CollectionPropertyMapping
WITHOUT_CLASSIFICATION	// Tell the destination fromElement to 'includeSubclasses'.
WITHOUT_CLASSIFICATION	// Use theta style (for regression) // Move the node up, after the origin node.
WITHOUT_CLASSIFICATION	// Don't resolve the node again.
WITHOUT_CLASSIFICATION	// for expected parameter type injection, we expect that the lhs represents // some form of property ref and that the children of the in-list represent // one-or-more params.
WITHOUT_CLASSIFICATION	// we need to strip off the embedded parens so that sql-gen does not double these up
WITHOUT_CLASSIFICATION	// we have something like : "? [op] rhs"
WITHOUT_CLASSIFICATION	// we have something like : "lhs [op] ?"
WITHOUT_CLASSIFICATION	// we know only the rhs-hand type, so use that
WITHOUT_CLASSIFICATION	// handle the (assumed) valid cases: // #1 - the only valid datetime addition synatx is one or the other is a datetime (but not both)
WITHOUT_CLASSIFICATION	// one or the other needs to be a datetime for us to get into this method in the first place...
WITHOUT_CLASSIFICATION	// #3 - note that this is also true of "datetime - :param"...
WITHOUT_CLASSIFICATION	// #2
WITHOUT_CLASSIFICATION	// Generate the inner join -- The elements need to be joined to the collection they are in.
WITHOUT_CLASSIFICATION	// nothing to do
WITHOUT_CLASSIFICATION	// The 'from element' that represents the elements of the collection.
WITHOUT_CLASSIFICATION	// Add the condition to the join sequence that qualifies the indexed element.
WITHOUT_CLASSIFICATION	// Sometimes use the element table alias, sometimes use the... umm... collection table alias (many to many)
WITHOUT_CLASSIFICATION	// Now, set the text for this node.  It should be the element columns.
WITHOUT_CLASSIFICATION	// Get the function return value type, based on the type of the first argument.
WITHOUT_CLASSIFICATION	// This will call initialize(tok)!
WITHOUT_CLASSIFICATION	// mutation depends on the types of nodes invloved...
WITHOUT_CLASSIFICATION	// "pass along" our initial embedded parameter node(s) to the first generated // sql fragment so that it can be handled later for parameter binding...
WITHOUT_CLASSIFICATION	// logic operators by definition resolve to booleans
WITHOUT_CLASSIFICATION	// Generated select expressions are already resolved, nothing to do.
WITHOUT_CLASSIFICATION	// The path may be a reference to an alias defined in the parent query.
WITHOUT_CLASSIFICATION	// The HQL class alias refers to the class name.
WITHOUT_CLASSIFICATION	// Associate the table alias with the element.
WITHOUT_CLASSIFICATION	// try the parent FromClause...
WITHOUT_CLASSIFICATION	// Add the new node to the map so that we don't create it twice.
WITHOUT_CLASSIFICATION	// Make sure that all from elements registered with this FROM clause are actually in the AST.
WITHOUT_CLASSIFICATION	// Invoke setScalarColumnText on each constructor argument.
WITHOUT_CLASSIFICATION	// Collect the select expressions, skip the first child because it is the class name.
WITHOUT_CLASSIFICATION	// return an empty Type array
WITHOUT_CLASSIFICATION	// Constructors are always considered scalar results.
WITHOUT_CLASSIFICATION	// this is the exception returned by ReflectHelper.getConstructor() if it cannot // locate an appropriate constructor
WITHOUT_CLASSIFICATION	// if there is no order by, make one
WITHOUT_CLASSIFICATION	// Find the WHERE; if there is no WHERE, find the FROM...
WITHOUT_CLASSIFICATION	// Now, inject the newly built ORDER BY into the tree
WITHOUT_CLASSIFICATION	// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// logic operators by definition resolve to boolean.
WITHOUT_CLASSIFICATION	// Render the identifier select fragment using the table alias.
WITHOUT_CLASSIFICATION	// Class names in the FROM clause result in a JoinSequence (the old FromParser does this).
WITHOUT_CLASSIFICATION	// For many-to-many joins, use the tablename from the queryable collection for the default text.
WITHOUT_CLASSIFICATION	// Otherwise, use the property mapping.
WITHOUT_CLASSIFICATION	// should be safe to only ever expect EntityPersister references here
WITHOUT_CLASSIFICATION	// If the property is a special collection property name, return a CollectionPropertyMapping.
WITHOUT_CLASSIFICATION	// Collection of components.
WITHOUT_CLASSIFICATION	// make sure the lhs is "assignable"...
WITHOUT_CLASSIFICATION	// false indicates to not generate parens around the assignment
WITHOUT_CLASSIFICATION	// Register the FromElement with the FROM clause, now that we have the names and aliases.
WITHOUT_CLASSIFICATION	// currently allowed...
WITHOUT_CLASSIFICATION	// HHH-276 : implied joins in a subselect where clause - The destination needs to be added // to the destination's from clause. // Not sure if this is will fix everything, but it works.
WITHOUT_CLASSIFICATION	//return classAlias == null ? className : classAlias;
WITHOUT_CLASSIFICATION	// This is an explicit FROM element.
WITHOUT_CLASSIFICATION	// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// Fetch can't be used with scroll() or iterate().
WITHOUT_CLASSIFICATION	// If it's not implied or it is implied and it's a many to many join where the target wasn't found.
WITHOUT_CLASSIFICATION	// Since this is an explicit FROM element, it can't be implied in the FROM clause.
WITHOUT_CLASSIFICATION	// Do nothing, eplicit from elements are *always* in the projection list.
WITHOUT_CLASSIFICATION	// propertyName refers to something like collection.size...
WITHOUT_CLASSIFICATION	// property name is a sub-path of a component...
WITHOUT_CLASSIFICATION	// Always add the collection's query spaces.
WITHOUT_CLASSIFICATION	// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here
WITHOUT_CLASSIFICATION	// logic operators by definition resolve to booleans
WITHOUT_CLASSIFICATION	// DotNode uses null here...
WITHOUT_CLASSIFICATION	// We represent a from-clause alias
WITHOUT_CLASSIFICATION	// we are the LHS of the DOT representing a naked comp-prop-ref
WITHOUT_CLASSIFICATION	// we are the RHS of the DOT representing a naked comp-prop-ref
WITHOUT_CLASSIFICATION	// we represent a naked (simple) prop-ref
WITHOUT_CLASSIFICATION	// EARLY EXIT!!!  return so the resolve call explicitly coming from DotNode can // resolve this...
WITHOUT_CLASSIFICATION	// assume this ident's text does *not* refer to a property on the given persister
WITHOUT_CLASSIFICATION	// just ignore it for now, it'll get resolved later...
WITHOUT_CLASSIFICATION	// This is not actually a constant, but a reference to FROM element.
WITHOUT_CLASSIFICATION	// check to see if our "propPath" actually // represents a property on the persister
WITHOUT_CLASSIFICATION	// these pieces are needed for usage in select clause
WITHOUT_CLASSIFICATION	// used to set the type of the parent dot node
WITHOUT_CLASSIFICATION	// assume we do *not* refer to a property on the given persister
WITHOUT_CLASSIFICATION	// assume we do *not* refer to a property on the given persister
WITHOUT_CLASSIFICATION	// naked property-refs cannot be used with an aliased from element
WITHOUT_CLASSIFICATION	// this piece is needed for usage in select clause
WITHOUT_CLASSIFICATION	// do *not* over-write the column text, as that has already been // "rendered" during resolve
WITHOUT_CLASSIFICATION	// for some reason the antlr.CommonAST initialization routines force // this method to get called twice.  The first time with an empty string
WITHOUT_CLASSIFICATION	// Look up class name using the first identifier in the path.
WITHOUT_CLASSIFICATION	// Add to the query spaces.
WITHOUT_CLASSIFICATION	// If the from element isn't in the same clause, create a new from element.
WITHOUT_CLASSIFICATION	// This is the root level node. // Generate an explicit from clause at the root.
WITHOUT_CLASSIFICATION	// Correlated subqueries create 'special' implied from nodes // because correlated subselects can't use an ANSI-style join
WITHOUT_CLASSIFICATION	// super-duper-classic-parser-regression-testing-mojo-magic...
WITHOUT_CLASSIFICATION	// A collection of entities...
WITHOUT_CLASSIFICATION	// A collection of components...
WITHOUT_CLASSIFICATION	// A collection of scalar elements...
WITHOUT_CLASSIFICATION	// according to both the ANSI-SQL and EJB3 specs, trim can either take // exactly one parameter or a variable number of parameters between 1 and 4. // from the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If only <trim specification> is omitted, BOTH is assumed; // if <trim character> is omitted, space is assumed
WITHOUT_CLASSIFICATION	// Don't include sub-classes for implied collection joins or subquery joins.
WITHOUT_CLASSIFICATION	// Treat explict from elements in sub-queries properly.
WITHOUT_CLASSIFICATION	//			        ( implied && DotNode.useThetaStyleImplicitJoins ) ) {
WITHOUT_CLASSIFICATION	// the "root from-element" in correlated subqueries do need this piece
WITHOUT_CLASSIFICATION	// Create the FROM element for the target (the elements of the collection).
WITHOUT_CLASSIFICATION	// If the join is implied, then don't include sub-classes on the element.
WITHOUT_CLASSIFICATION	// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// The associated entity is implied, but it must be included in the FROM. // The collection alias is the role.
WITHOUT_CLASSIFICATION	// Tag this node as a JOIN. // Don't include subclasses in the join. // This is a clollection join.
WITHOUT_CLASSIFICATION	// Get the class name of the associated entity.
WITHOUT_CLASSIFICATION	//  origin, path, implied, columns, classAlias,
WITHOUT_CLASSIFICATION	/*implied*/
WITHOUT_CLASSIFICATION	// For implied many-to-many, just add the end join.
WITHOUT_CLASSIFICATION	// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// the standard SQL function name is current_timestamp...
WITHOUT_CLASSIFICATION	// This causes the factory to instantiate the desired class.
WITHOUT_CLASSIFICATION	//private Type[] sqlResultTypes;
WITHOUT_CLASSIFICATION	// Frontbase has no known variation of a "SELECT ... FOR UPDATE" syntax...
WITHOUT_CLASSIFICATION	/*	 * The types represented in the SQL result set.	 *	 * @return The types represented in the SQL result set.	 */
WITHOUT_CLASSIFICATION	/*public Type[] getSqlResultTypes() {		return sqlResultTypes;	}*/
WITHOUT_CLASSIFICATION	// First, collect all of the select expressions. // NOTE: This must be done *before* invoking setScalarColumnText() because setScalarColumnText() // changes the AST!!!
WITHOUT_CLASSIFICATION	// First allow the actual type to control the return value. (the actual underlying sqltype could actually be different)
WITHOUT_CLASSIFICATION	//sqlResultTypeList.addAll( constructorArgumentTypeList );
WITHOUT_CLASSIFICATION	// If the data type is not an association type, it could not have been in the FROM clause.
WITHOUT_CLASSIFICATION	//sqlResultTypeList.add( type );
WITHOUT_CLASSIFICATION	// Always add the type to the return type list.
WITHOUT_CLASSIFICATION	// add the fetched entities
WITHOUT_CLASSIFICATION	// Get ready to start adding nodes.
WITHOUT_CLASSIFICATION	// function support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// If there are any scalars (non-entities) selected, render the select column aliases.
WITHOUT_CLASSIFICATION	/*sqlResultTypeList,*/
WITHOUT_CLASSIFICATION	/*ArrayList sqlResultTypeList,*/
WITHOUT_CLASSIFICATION	//sqlResultTypes = ( Type[] ) sqlResultTypeList.toArray( new Type[sqlResultTypeList.size()] );
WITHOUT_CLASSIFICATION	// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	//TODO:
WITHOUT_CLASSIFICATION	// Add the type to the list of returned sqlResultTypes.
WITHOUT_CLASSIFICATION	// Generate an 2d array of column names, the first dimension is parallel with the // return types array.  The second dimension is the list of column names for each // type.
WITHOUT_CLASSIFICATION	// Generate the select expression.
WITHOUT_CLASSIFICATION	// union subclass support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// Skip 'DISTINCT' and 'ALL', so we return the first expression node.
WITHOUT_CLASSIFICATION	// Create SQL_TOKEN nodes for the columns.
WITHOUT_CLASSIFICATION	// Generate the property select tokens.
WITHOUT_CLASSIFICATION	// Get the function name node.
WITHOUT_CLASSIFICATION	// Method expressions in a SELECT should always be considered scalar.
WITHOUT_CLASSIFICATION	// If this is 'elements' then create a new FROM element.
WITHOUT_CLASSIFICATION	// Not elements(x)
WITHOUT_CLASSIFICATION	// Dialect function
WITHOUT_CLASSIFICATION	// Collection 'property function'
WITHOUT_CLASSIFICATION	// If the constant is an IDENT, figure out what it means...
WITHOUT_CLASSIFICATION	// IDENT is a class alias in the FROM.
WITHOUT_CLASSIFICATION	// Resolve to an identity column.
WITHOUT_CLASSIFICATION	// Otherwise, it's a literal.
WITHOUT_CLASSIFICATION	// the name of an entity class
WITHOUT_CLASSIFICATION	//the class discriminator value
WITHOUT_CLASSIFICATION	// Chop off the rest of the tree.
WITHOUT_CLASSIFICATION	// Add a space before the display text.
WITHOUT_CLASSIFICATION	// Find or create the WHERE clause
WITHOUT_CLASSIFICATION	// child == parent.getFirstChild()
WITHOUT_CLASSIFICATION	// Find or create the WHERE clause
WITHOUT_CLASSIFICATION	// Filter conditions need to be inserted before the HQL where condition and the // theta join node.  This is because org.hibernate.loader.Loader binds the filter parameters first, // then it binds all the HQL query parameters, see org.hibernate.loader.Loader.processFilterParameters().
WITHOUT_CLASSIFICATION	// Put the FILTERS node before the HQL condition and theta joins
WITHOUT_CLASSIFICATION	// add the current fragment to the FILTERS node
WITHOUT_CLASSIFICATION	// Create a new THETA_JOINS node as a parent of all filters
WITHOUT_CLASSIFICATION	// Put the THETA_JOINS node before the HQL condition, after the filters.
WITHOUT_CLASSIFICATION	// add the current fragment to the THETA_JOINS node
WITHOUT_CLASSIFICATION	// First, try to get the persister using the given name directly.
WITHOUT_CLASSIFICATION	// unable to locate it using this name
WITHOUT_CLASSIFICATION	// If that didn't work, try using the 'import' name.
WITHOUT_CLASSIFICATION	// Implicit joins use theta style (WHERE pk = fk), explicit joins use JOIN (after from)
WITHOUT_CLASSIFICATION	// locate the registered function by the given name
WITHOUT_CLASSIFICATION	// determine the type of the first argument...
WITHOUT_CLASSIFICATION	// Use the DOT node to emit the first column name. // Create the column names, folled by the column aliases.
WITHOUT_CLASSIFICATION	// Note: this simply constructs a "raw" SQL_TOKEN representing the // where fragment and injects this into the tree.  This "works"; // however it is probably not the best long-term solution. // // At some point we probably want to apply an additional grammar to // properly tokenize this where fragment into constituent parts // focused on the operators embedded within the fragment.
WITHOUT_CLASSIFICATION	// Append the text of the current node.
WITHOUT_CLASSIFICATION	// If the node has a first child, recurse into the first child.
WITHOUT_CLASSIFICATION	// If there is a second child (RHS), recurse into that child.
WITHOUT_CLASSIFICATION	// Iterate through the alias,JoinSequence pairs and generate SQL token nodes.
WITHOUT_CLASSIFICATION	// If the from element represents a JOIN_FRAGMENT and it is // a theta-style join, convert its type from JOIN_FRAGMENT // to FROM_FRAGMENT
WITHOUT_CLASSIFICATION	// this is used during SqlGenerator processing
WITHOUT_CLASSIFICATION	// If there is a FROM fragment and the FROM element is an explicit, then add the from part.
WITHOUT_CLASSIFICATION	/*&& StringHelper.isNotEmpty( frag )*/
WITHOUT_CLASSIFICATION	// The FROM fragment will probably begin with ', '.  Remove this if it is present.
WITHOUT_CLASSIFICATION	// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:
WITHOUT_CLASSIFICATION	// SELECT p FROM p IN CLASS eg.Person ORDER BY p.Name, p.Address, p
WITHOUT_CLASSIFICATION	// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.
WITHOUT_CLASSIFICATION	//named query parameter
WITHOUT_CLASSIFICATION	//default mode
WITHOUT_CLASSIFICATION	//QueryJoinFragment join = q.createJoinFragment(useThetaStyleJoin);
WITHOUT_CLASSIFICATION	//reset the dotcount (but not the path) //after reset!
WITHOUT_CLASSIFICATION	//after reset!
WITHOUT_CLASSIFICATION	// we don't need to worry about any condition in the ON clause // here (toFromFragmentString), since anything in the ON condition // is already applied to the whole query
WITHOUT_CLASSIFICATION	// bit_length feels a bit broken to me. We have to cast to char in order to // pass when a numeric value is supplied. But of course the answers given will // be wildly different for these two datatypes. 1234.5678 will be 9 bytes as // a char string but will be 8 or 16 bytes as a true numeric. // Jay Nance 2006-09-22
WITHOUT_CLASSIFICATION	// dotcount>=2
WITHOUT_CLASSIFICATION	// Do the corresponding RHS
WITHOUT_CLASSIFICATION	//if its "id"
WITHOUT_CLASSIFICATION	//or its the id property name
WITHOUT_CLASSIFICATION	//join = q.createJoinFragment(useThetaStyleJoin);
WITHOUT_CLASSIFICATION	//important!!
WITHOUT_CLASSIFICATION	//String[] keyCols = collPersister.getKeyColumnNames();
WITHOUT_CLASSIFICATION	// an association
WITHOUT_CLASSIFICATION	//allow index() function:
WITHOUT_CLASSIFICATION	// here assume SQLServer2005 using snapshot isolation, which does not have this problem
WITHOUT_CLASSIFICATION	// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.
WITHOUT_CLASSIFICATION	//many-to-many
WITHOUT_CLASSIFICATION	// collections of values
WITHOUT_CLASSIFICATION	//opening paren in new Foo ( ... )
WITHOUT_CLASSIFICATION	//if we are inside a new Result(), but not inside a nested function
WITHOUT_CLASSIFICATION	//special case
WITHOUT_CLASSIFICATION	// the name of an SQL function
WITHOUT_CLASSIFICATION	//null child could occur for no from clause in a filter
WITHOUT_CLASSIFICATION	//this is basically a copy/paste of OrderByParser ... might be worth refactoring
WITHOUT_CLASSIFICATION	// SELECT p FROM p IN CLASS eg.Person GROUP BY p.Name, p.Address, p
WITHOUT_CLASSIFICATION	// return aliases not supported in classic translator!
WITHOUT_CLASSIFICATION	//register collection role
WITHOUT_CLASSIFICATION	// The keyword used to specify an identity column, if identity column key generation is supported.
WITHOUT_CLASSIFICATION	//.getElementPropertyMapping();
WITHOUT_CLASSIFICATION	//crossJoins.add(name);
WITHOUT_CLASSIFICATION	//ie no select clause in HQL
WITHOUT_CLASSIFICATION	// initialize the Set of queried identifier spaces (ie. tables)
WITHOUT_CLASSIFICATION	//ie. no select clause
WITHOUT_CLASSIFICATION	//there _was_ a select clause
WITHOUT_CLASSIFICATION	// return the concrete type, or the underlying type if a concrete type // was not specified
WITHOUT_CLASSIFICATION	//many-to-many
WITHOUT_CLASSIFICATION	//q.addCollection(collectionName, collectionRole);
WITHOUT_CLASSIFICATION	// classic parser does not support bulk manipulation statements
WITHOUT_CLASSIFICATION	// can't cache this stuff either (per-invocation)
WITHOUT_CLASSIFICATION	// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance
WITHOUT_CLASSIFICATION	// This is the legacy behaviour for HQL queries...
WITHOUT_CLASSIFICATION	// not known!
WITHOUT_CLASSIFICATION	// not known!
WITHOUT_CLASSIFICATION	// we have the form: trim(trimSource) //      so we trim leading and trailing spaces // EARLY EXIT!!!!
WITHOUT_CLASSIFICATION	// not known!
WITHOUT_CLASSIFICATION	// not known!
WITHOUT_CLASSIFICATION	//Need this, since join condition can appear inside parens!
WITHOUT_CLASSIFICATION	//tokens that close a sub expression //tokens that open a sub expression //tokens that would indicate a sub expression is a boolean expression
WITHOUT_CLASSIFICATION	//expressionTerminators.add(","); // deliberately excluded
WITHOUT_CLASSIFICATION	//expressionOpeners.add(","); // deliberately excluded
WITHOUT_CLASSIFICATION	// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource) // EARLY EXIT!!!!
WITHOUT_CLASSIFICATION	// otherwise, a trim-specification and/or a trim-character // have been specified;  we need to decide which options // are present and "do the right thing" // should leading trim-characters be trimmed? // should trailing trim-characters be trimmed? // the trim-character (what is to be trimmed off?) // the trim-source (from where should it be trimmed?)
WITHOUT_CLASSIFICATION	//Inside a BETWEEN ... AND ... expression
WITHOUT_CLASSIFICATION	//were an odd or even number of NOTs encountered //the join string built up by compound paths inside this expression //a flag indicating if the subexpression is known to be boolean
WITHOUT_CLASSIFICATION	//ie. a many-to-many
WITHOUT_CLASSIFICATION	//Cope with [,]
WITHOUT_CLASSIFICATION	//Cope with a continued path expression (ie. ].baz)
WITHOUT_CLASSIFICATION	//NOTE: early return
WITHOUT_CLASSIFICATION	//Cope with a subselect
WITHOUT_CLASSIFICATION	//Cope with special cases of AND, NOT, ()
WITHOUT_CLASSIFICATION	//Close extra brackets we opened
WITHOUT_CLASSIFICATION	//take note when this is a boolean expression
WITHOUT_CLASSIFICATION	// assumes that types are all of span 1
WITHOUT_CLASSIFICATION	//process a token, mapping OO path expressions to SQL expressions
WITHOUT_CLASSIFICATION	//Open any extra brackets we might need.
WITHOUT_CLASSIFICATION	//Cope with special cases of AND, NOT, )
WITHOUT_CLASSIFICATION	// the next one up must also be
WITHOUT_CLASSIFICATION	// Add any joins
WITHOUT_CLASSIFICATION	// assumes that types are all of span 1
WITHOUT_CLASSIFICATION	//named query parameter
WITHOUT_CLASSIFICATION	//path expression
WITHOUT_CLASSIFICATION	// saves / updates don't cascade to uninitialized collections
WITHOUT_CLASSIFICATION	// persists don't cascade to uninitialized collections
WITHOUT_CLASSIFICATION	//anything else
WITHOUT_CLASSIFICATION	// the path expression continues after a ]
WITHOUT_CLASSIFICATION	// careful with this!
WITHOUT_CLASSIFICATION	// the path expression ends at the ]
WITHOUT_CLASSIFICATION	// "finish off" the join
WITHOUT_CLASSIFICATION	//NOTICE: no " or . since they are part of (compound) identifiers
WITHOUT_CLASSIFICATION	//cannot instantiate
WITHOUT_CLASSIFICATION	// start by looking for HQL keywords...
WITHOUT_CLASSIFICATION	// inner joins can be abbreviated to 'join'
WITHOUT_CLASSIFICATION	// 'outer' is optional and is ignored
WITHOUT_CLASSIFICATION	// now anything that is not a HQL keyword
WITHOUT_CLASSIFICATION	// process the "old" HQL style where aliases appear _first_ // ie. using the IN or IN CLASS constructions
WITHOUT_CLASSIFICATION	// treat it as a classname
WITHOUT_CLASSIFICATION	// treat it as a path expression
WITHOUT_CLASSIFICATION	// starts with the name of a mapped class (new style)
WITHOUT_CLASSIFICATION	// starts with a path expression (new style)
WITHOUT_CLASSIFICATION	//allow ODMG OQL style: from Person p, p.cars c
WITHOUT_CLASSIFICATION	//handle quoted strings
WITHOUT_CLASSIFICATION	// Object insertions, updates, and deletions have list semantics because // they must happen in the right order so as to respect referential // integrity
WITHOUT_CLASSIFICATION	// "finish off" the join
WITHOUT_CLASSIFICATION	//ignore whitespace
WITHOUT_CLASSIFICATION	//do replacements
WITHOUT_CLASSIFICATION	//handle HQL2 collection syntax
WITHOUT_CLASSIFICATION	// uuid.hex is deprecated
WITHOUT_CLASSIFICATION	// AbstractSelectingDelegate impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	//hilo params
WITHOUT_CLASSIFICATION	//sql = query;
WITHOUT_CLASSIFICATION	// performance opt
WITHOUT_CLASSIFICATION	//sql = update;
WITHOUT_CLASSIFICATION	//hilo config
WITHOUT_CLASSIFICATION	// so we "clock over" on the first invocation
WITHOUT_CLASSIFICATION	// don't allow comments on these insert statements as comments totally // blow up the Oracle getGeneratedKeys "support" :(
WITHOUT_CLASSIFICATION	//abort the save (the object is already saved by a circular cascade)
WITHOUT_CLASSIFICATION	//throw new IdentifierGenerationException("save associated object first, or disable cascade for inverse association");
WITHOUT_CLASSIFICATION	// intentionally empty
WITHOUT_CLASSIFICATION	//do nothing to avoid a lazy property initialization
WITHOUT_CLASSIFICATION	//keep the behavior consistent even for boundary usages
WITHOUT_CLASSIFICATION	// so we "clock over" on the first invocation
WITHOUT_CLASSIFICATION	// do nothing until we hit the rsult set containing the generated id
WITHOUT_CLASSIFICATION	/* COLUMN and TABLE should be renamed but it would break the public API */
WITHOUT_CLASSIFICATION	// Loaded entity instances, by EntityKey
WITHOUT_CLASSIFICATION	// if the given name is un-qualified we may neen to qualify it
WITHOUT_CLASSIFICATION	// the default...
WITHOUT_CLASSIFICATION	// unfortunately not really safe to normalize this // to 1 as an initial value like we do the others // because we would not be able to control this if // we are using a sequence...
WITHOUT_CLASSIFICATION	// intentionally empty
WITHOUT_CLASSIFICATION	// Identity map of CollectionEntry instances, by the collection wrapper
WITHOUT_CLASSIFICATION	// general purpose parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// table-specific parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// Configurable implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// IdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// PersistentIdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// prepare and execute the insert
WITHOUT_CLASSIFICATION	// prepare and execute the insert
WITHOUT_CLASSIFICATION	//fetch the generated id in a separate query
WITHOUT_CLASSIFICATION	// we just hit the last position
WITHOUT_CLASSIFICATION	// scroll ahead
WITHOUT_CLASSIFICATION	// scroll backward
WITHOUT_CLASSIFICATION	// we have not yet hit the last result...
WITHOUT_CLASSIFICATION	// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// do this when all the properties are updateable since there is // a certain likelihood that the information will already be // snapshot-cached.
WITHOUT_CLASSIFICATION	// Inner classes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// Caches
WITHOUT_CLASSIFICATION	//Generators:
WITHOUT_CLASSIFICATION	// cache region is defined by the root-class in the hierarchy...
WITHOUT_CLASSIFICATION	//check if the detached object being merged is the parent
WITHOUT_CLASSIFICATION	// after *all* persisters and named queries are registered
WITHOUT_CLASSIFICATION	// if we get here, it is possible that we have a proxy 'in the way' of the merge map resolution... // 		NOTE: decided to put this here rather than in the above loop as I was nervous about the performance //		of the loop-in-loop especially considering this is far more likely the 'edge case'
WITHOUT_CLASSIFICATION	//JNDI + Serialization:
WITHOUT_CLASSIFICATION	//checking for named queries
WITHOUT_CLASSIFICATION	//stats
WITHOUT_CLASSIFICATION	// EntityNotFoundDelegate
WITHOUT_CLASSIFICATION	// Check named HQL queries
WITHOUT_CLASSIFICATION	// this will throw an error if there's something wrong.
WITHOUT_CLASSIFICATION	//prevents this session from adding things to cache
WITHOUT_CLASSIFICATION	// from javax.naming.Referenceable
WITHOUT_CLASSIFICATION	// look for the instance by uuid
WITHOUT_CLASSIFICATION	//for a dynamic-class
WITHOUT_CLASSIFICATION	//test this entity to see if we must query it
WITHOUT_CLASSIFICATION	//NOTE EARLY EXIT
WITHOUT_CLASSIFICATION	// for backward-compatability
WITHOUT_CLASSIFICATION	// ignore this error for now
WITHOUT_CLASSIFICATION	//to stop the class from being unloaded
WITHOUT_CLASSIFICATION	// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)
WITHOUT_CLASSIFICATION	//must add to JNDI _after_ adding to HashMaps, because some JNDI servers use serialization
WITHOUT_CLASSIFICATION	// Make sure this is a defined parameter and check the incoming value type
WITHOUT_CLASSIFICATION	// for each of the defined parameters, make sure its value // has been set
WITHOUT_CLASSIFICATION	//we never need to apply locks to the SQL
WITHOUT_CLASSIFICATION	// inserts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// deletes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// during deserialization, we need to reconnect all proxies and // collections to this session, as well as the EntityEntry and // CollectionEntry instances; these associations are transient // because serialization is used for different things.
WITHOUT_CLASSIFICATION	// updates ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// loading ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	//final boolean forceCacheRefresh,
WITHOUT_CLASSIFICATION	//final boolean forceCacheRefresh,
WITHOUT_CLASSIFICATION	// first, try to load it from the temp PC associated to this SS
WITHOUT_CLASSIFICATION	// if the metadata allowed proxy creation and caller did not request forceful eager loading, // generate a proxy
WITHOUT_CLASSIFICATION	// otherwise immediately materialize it
WITHOUT_CLASSIFICATION	/////////////////////////////////////////////////////////////////////////////////////////////////////
WITHOUT_CLASSIFICATION	// no auto-flushing to support in stateless session
WITHOUT_CLASSIFICATION	//after setting values to object, entityMode
WITHOUT_CLASSIFICATION	//for EJB3
WITHOUT_CLASSIFICATION	// just ignore
WITHOUT_CLASSIFICATION	// do a check
WITHOUT_CLASSIFICATION	// saveOrUpdate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// update() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// lock() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// persist() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// persistOnFlush() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// merge() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// saveOrUpdateCopy() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// delete() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// load()/get() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// refresh() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// replicate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// do not auto-flush while outside a transaction
WITHOUT_CLASSIFICATION	// this is an internal error of some sort...
WITHOUT_CLASSIFICATION	//stops flush being called multiple times if this method is recursively called
WITHOUT_CLASSIFICATION	//only collections belonging to deleted entities are allowed to be dereferenced in the case of orphan delete
WITHOUT_CLASSIFICATION	// if it was previously unreferenced, we need to flush in order to // get its state into the database in order to execute query
WITHOUT_CLASSIFICATION	// not for internal use:
WITHOUT_CLASSIFICATION	// otherwise, we only need to flush if there are in-memory changes // to the queried tables
WITHOUT_CLASSIFICATION	// might need to run a different filter entirely after the flush // because the collection role may have changed
WITHOUT_CLASSIFICATION	//stops flush being called multiple times if this method is recursively called
WITHOUT_CLASSIFICATION	//stops flush being called multiple times if this method is recursively called
WITHOUT_CLASSIFICATION	//if it is initialized, see if the underlying //instance is contained, since we need to  //account for the fact that it might have been //evicted
WITHOUT_CLASSIFICATION	// basically just an adapted copy of find(CriteriaImpl)
WITHOUT_CLASSIFICATION	// it is possible for this method to be called during flush processing, // so make certain that we do not accidently initialize an uninitialized proxy
WITHOUT_CLASSIFICATION	// nothing to do in a stateful session
WITHOUT_CLASSIFICATION	// ignore
WITHOUT_CLASSIFICATION	// ignore this error for now
WITHOUT_CLASSIFICATION	// we need to writeObject() on this since interceptor is user defined
WITHOUT_CLASSIFICATION	// the old-time stand-by...
WITHOUT_CLASSIFICATION	// parameter bind values...
WITHOUT_CLASSIFICATION	// Parameter handling code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// prepend value and type list with null for any positions before the wanted position.
WITHOUT_CLASSIFICATION	// Execution methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// we have a CGLIB enhanced entity
WITHOUT_CLASSIFICATION	// we have a CGLIB enhanced entity
WITHOUT_CLASSIFICATION	// we have a Javassist enhanced entity
WITHOUT_CLASSIFICATION	// we have a Javassist enhanced entity
WITHOUT_CLASSIFICATION	// FieldInterceptor impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// subclass accesses ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	//let's assume that there is only one lazy fetch group, for now!
WITHOUT_CLASSIFICATION	// FieldHandler impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// should *not* need to grow beyond the size of the total number of columns in the rs
WITHOUT_CLASSIFICATION	// should probably no-op commit/rollback here, at least in JTA scenarios
WITHOUT_CLASSIFICATION	// Base Expectation impls ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// Various Expectation instances ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// explicitly perform no checking...
WITHOUT_CLASSIFICATION	// used from testsuite
WITHOUT_CLASSIFICATION	// assume we are in an auto-commit state
WITHOUT_CLASSIFICATION	/*package*/
WITHOUT_CLASSIFICATION	// register synch; stats.connect()
WITHOUT_CLASSIFICATION	//noncritical, swallow and let the other propagate!
WITHOUT_CLASSIFICATION	// calls executeBatch()
WITHOUT_CLASSIFICATION	//no big deal
WITHOUT_CLASSIFICATION	// no big deal
WITHOUT_CLASSIFICATION	// no big deal
WITHOUT_CLASSIFICATION	// sybase driver (jConnect) throwing NPE here in certain // cases, but we'll just handle the general "unexpected" case
WITHOUT_CLASSIFICATION	// see explanation above...
WITHOUT_CLASSIFICATION	// If we are in the process of releasing, no sense // checking for aggressive-release possibility.
WITHOUT_CLASSIFICATION	// EARLY EXIT!!!!
WITHOUT_CLASSIFICATION	// ResultSet impl ("overridden") ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// ResultSet impl (delegated) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// refer to comment in StatefulPersistenceContext.addCollection()
WITHOUT_CLASSIFICATION	// ConnectionManager.Callback implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// Note : success = false, because we don't know the outcome of the transaction
WITHOUT_CLASSIFICATION	// we already have a callback registered; either a local // (org.hibernate.Transaction) transaction has accepted // callback responsibilities, or we have previously // registered a transaction synch.
WITHOUT_CLASSIFICATION	// the configured transaction-factory says it only supports // local callback mode, so no sense attempting to register a // JTA Synchronization
WITHOUT_CLASSIFICATION	// transactions marked for rollback-only cause some TM impls to throw exceptions
WITHOUT_CLASSIFICATION	// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	//postInitialize() will be called after initialization
WITHOUT_CLASSIFICATION	// cannot handle single quotes
WITHOUT_CLASSIFICATION	// todo : for 4.0 //	private static final Logger log = LoggerFactory.getLogger( SQLStatementLogger.class ); // this is the legacy logging 'category'...
WITHOUT_CLASSIFICATION	// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"
WITHOUT_CLASSIFICATION	// don't even bother trying to read further
WITHOUT_CLASSIFICATION	// don't even bother trying to read any further
WITHOUT_CLASSIFICATION	// position cursor to the last row
WITHOUT_CLASSIFICATION	// sequentially read the result set in reverse until we recognize // a change in the key value.  At that point, we are pointed at // the last physical sequential row for the logical row in which // we are interested in processing
WITHOUT_CLASSIFICATION	// Read backwards until we read past the first physical sequential // row with the key we are interested in loading
WITHOUT_CLASSIFICATION	// Finally, read ahead one row to position result set cursor // at the first physical row we are interested in loading
WITHOUT_CLASSIFICATION	// now get an existing proxy for each row element (if there is one)
WITHOUT_CLASSIFICATION	// force the proxy to resolve itself
WITHOUT_CLASSIFICATION	// this is equivalent to the old behavior...
WITHOUT_CLASSIFICATION	//if null, owner will be retrieved from session
WITHOUT_CLASSIFICATION	//final String queryString, 
WITHOUT_CLASSIFICATION	// if it was a reference to self, don't need to nullify // unless we are using native id generation, in which // case we definitely need to nullify
WITHOUT_CLASSIFICATION	//end of array, start filling again from start
WITHOUT_CLASSIFICATION	// in an effort to avoid concurrent-modification-exceptions (from // potential recursive calls back through here as a result of the // eventual call to PersistentCollection#endRead), we scan the // internal loadingCollections map for matches and store those matches // in a temp collection.  the temp collection is then used to "drive" // the #endRead processing.
WITHOUT_CLASSIFICATION	//we can reuse it for each row
WITHOUT_CLASSIFICATION	//can't reuse in this case
WITHOUT_CLASSIFICATION	// First we need to suspend any current JTA transaction and obtain // a JDBC connection
WITHOUT_CLASSIFICATION	//getResultList(results);
WITHOUT_CLASSIFICATION	//if we only returned one entity, query by key is more efficient
WITHOUT_CLASSIFICATION	// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()
WITHOUT_CLASSIFICATION	// handle empty collection
WITHOUT_CLASSIFICATION	// else no collection element, but also no owner
WITHOUT_CLASSIFICATION	//handle empty collections
WITHOUT_CLASSIFICATION	// else this is not a collection initializer (and empty collections will // be detected by looking for the owner's identifier in the result set)
WITHOUT_CLASSIFICATION	// validate() instances of Validatable
WITHOUT_CLASSIFICATION	// if we know there is exactly 1 row, we can skip. // it would be great if we could _always_ skip this; // it is a problem for <key-many-to-one>
WITHOUT_CLASSIFICATION	// remove all collections for the entity from the session-level cache
WITHOUT_CLASSIFICATION	//null version means the object is in the process of being loaded somewhere else in the ResultSet
WITHOUT_CLASSIFICATION	//problematic for <key-many-to-one>!
WITHOUT_CLASSIFICATION	//use the id passed in
WITHOUT_CLASSIFICATION	//do nothing
WITHOUT_CLASSIFICATION	// prefer re-generation of identity!
WITHOUT_CLASSIFICATION	//no point doing this if NONE was requested
WITHOUT_CLASSIFICATION	//If the object is already loaded, return the loaded one
WITHOUT_CLASSIFICATION	//its already loaded so don't need to hydrate it
WITHOUT_CLASSIFICATION	// cascade the refresh prior to refreshing this entity
WITHOUT_CLASSIFICATION	//the load() which takes an entity does not pass an entityName
WITHOUT_CLASSIFICATION	//we only check the version when _upgrading_ lock modes
WITHOUT_CLASSIFICATION	// look for a proxy
WITHOUT_CLASSIFICATION	//we need to upgrade the lock mode to the mode requested
WITHOUT_CLASSIFICATION	//its the given optional object
WITHOUT_CLASSIFICATION	// instantiate a new instance
WITHOUT_CLASSIFICATION	//need to hydrate it.
WITHOUT_CLASSIFICATION	// return a newly loaded object
WITHOUT_CLASSIFICATION	//will be ignored, using the existing Entry instead
WITHOUT_CLASSIFICATION	// key is an entity involved with the operation performed by the listener; // value can be either a copy of the entity or the entity itself
WITHOUT_CLASSIFICATION	//materialize associations (and initialize the object) later
WITHOUT_CLASSIFICATION	// Get the persister for the _subclass_
WITHOUT_CLASSIFICATION	// ok in normal Hibernate usage to delete a detached entity; JPA however // forbids it, thus this is a hook for HEM to affect this behavior
WITHOUT_CLASSIFICATION	// the entry will be removed after the flush, and will no longer // override the stale snapshot // This is now handled by removeEntity() in EntityDeleteAction //persistenceContext.removeDatabaseSnapshot(key);
WITHOUT_CLASSIFICATION	//addInitializedCollection(collection, persister, id);
WITHOUT_CLASSIFICATION	//EARLY EXIT!
WITHOUT_CLASSIFICATION	//EARLY EXIT!
WITHOUT_CLASSIFICATION	/*|| oj.getJoinable().consumesCollectionAlias() */
WITHOUT_CLASSIFICATION	// here we do not bother with the discriminator.
WITHOUT_CLASSIFICATION	// Code to handle subclasses of topClass
WITHOUT_CLASSIFICATION	//woops we got an instance of another class hierarchy branch
WITHOUT_CLASSIFICATION	// we can go straight to the first required row
WITHOUT_CLASSIFICATION	// we need to step through the rows one row at a time (slow)
WITHOUT_CLASSIFICATION	// synchronized to avoid multi-thread access issues; defined as method synch to avoid // potential deadlock issues due to nature of code.
WITHOUT_CLASSIFICATION	// Allows various loaders (ok mainly the QueryLoader :) to check // whether scrolling of their result set should be allowed. // // By default it is allowed.
WITHOUT_CLASSIFICATION	//before adding to collection!
WITHOUT_CLASSIFICATION	// if the current depth is 0, the root thing being loaded is the // many-to-many collection itself.  Here, it is alright to use // an inner join...
WITHOUT_CLASSIFICATION	//operations which cascade as far as the collection also cascade to collection elements
WITHOUT_CLASSIFICATION	// simple, because we can't have a one-to-one or a collection  // (or even a property-ref) in a composite-element:
WITHOUT_CLASSIFICATION	//a composite key
WITHOUT_CLASSIFICATION	// if no batch, use "foo = ? and bar = ?"
WITHOUT_CLASSIFICATION	//it must be a collection fetch
WITHOUT_CLASSIFICATION	// needed later for many-to-many/filter application
WITHOUT_CLASSIFICATION	/*&& etype.isReferenceToPrimaryKey()*/
WITHOUT_CLASSIFICATION	// it might still need to apply a collection ordering based on a // many-to-many defined order-by...
WITHOUT_CLASSIFICATION	// if a composite key, use "( (foo = ? and bar = ?) or (foo = ? and bar = ?) )" for batching //TODO: unnecessary for databases with ANSI-style joins
WITHOUT_CLASSIFICATION	// belong to other persister // belong to other persister
WITHOUT_CLASSIFICATION	// we found it
WITHOUT_CLASSIFICATION	//we can use an inner join for the many-to-many
WITHOUT_CLASSIFICATION	//disable a join back to this same association
WITHOUT_CLASSIFICATION	//NOTE: unlike all other Loaders, this one is NOT //      multithreaded, or cacheable!!
WITHOUT_CLASSIFICATION	//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases
WITHOUT_CLASSIFICATION	//root entity comes *last*
WITHOUT_CLASSIFICATION	//deliberately ignore return value!
WITHOUT_CLASSIFICATION	//alias may be null //EARLY EXIT
WITHOUT_CLASSIFICATION	// if it is a compound path
WITHOUT_CLASSIFICATION	// otherwise assume the parent is the the criteria that created us
WITHOUT_CLASSIFICATION	// if its the root criteria, we are done
WITHOUT_CLASSIFICATION	// otherwise, recurse
WITHOUT_CLASSIFICATION	//the criteria instance
WITHOUT_CLASSIFICATION	// the entity name
WITHOUT_CLASSIFICATION	//not found in inner query , try the outer query
WITHOUT_CLASSIFICATION	//not found in inner query , try the outer query
WITHOUT_CLASSIFICATION	//it refers to an alias of a projection
WITHOUT_CLASSIFICATION	//should never happen, i think
WITHOUT_CLASSIFICATION	// Detect discriminator values...
WITHOUT_CLASSIFICATION	// Convert the string value into the proper type.
WITHOUT_CLASSIFICATION	// and the qualifier is not the alias of this criteria //      -> check to see if we belong to some criteria other //          than the one that created us
WITHOUT_CLASSIFICATION	//it does not refer to an alias of a projection, //look for a property
WITHOUT_CLASSIFICATION	// Otherwise, this is an ordinary value.
WITHOUT_CLASSIFICATION	// Currently *not* cachable if autodiscover types is in effect (e.g. "select * ...")
WITHOUT_CLASSIFICATION	//	private final String[] sqlAliases; //	private final String[] sqlAliasSuffixes;
WITHOUT_CLASSIFICATION	// this is only needed (afaict) for ResultTransformer processing...
WITHOUT_CLASSIFICATION	// determine if the collection elements are entities...
WITHOUT_CLASSIFICATION	// build an array with indices equal to the total number // of actual returns in the result Hibernate will return // for this query (scalars + non-scalars)
WITHOUT_CLASSIFICATION	// replace {....} with corresponding column aliases
WITHOUT_CLASSIFICATION	// No additional open braces found in the string, append the // rest of the string in its entirty and quit this loop
WITHOUT_CLASSIFICATION	// apend everything up until the next encountered open brace
WITHOUT_CLASSIFICATION	// it is a simple table alias {foo}
WITHOUT_CLASSIFICATION	// passing through anything we do not know : to support jdbc escape sequences HB-898
WITHOUT_CLASSIFICATION	// passing through anything we do not know : to support jdbc escape sequences HB-898
WITHOUT_CLASSIFICATION	// The current alias is referencing the collection to be eagerly fetched
WITHOUT_CLASSIFICATION	// it is a property reference {foo.bar}
WITHOUT_CLASSIFICATION	// Possibly handle :something parameters for the query ?
WITHOUT_CLASSIFICATION	// Let return-propertys override whatever the persister has for aliases.
WITHOUT_CLASSIFICATION	//	private final List persisters = new ArrayList();
WITHOUT_CLASSIFICATION	/*package*/
WITHOUT_CLASSIFICATION	//NOTE: EARLY EXIT!
WITHOUT_CLASSIFICATION	//	private final List scalarTypes = new ArrayList(); //	private final List scalarColumnAliases = new ArrayList();
WITHOUT_CLASSIFICATION	// Now, process the returns
WITHOUT_CLASSIFICATION	//	private List collectionOwnerAliases = new ArrayList(); //	private List collectionAliases = new ArrayList(); //	private List collectionPersisters = new ArrayList(); //	private List collectionResults = new ArrayList();
WITHOUT_CLASSIFICATION	// already been processed...
WITHOUT_CLASSIFICATION	// already been processed...
WITHOUT_CLASSIFICATION	// Make sure the owner alias is known...
WITHOUT_CLASSIFICATION	// first, break down the returns into maps keyed by alias // so that role returns can be more easily resolved to their owners
WITHOUT_CLASSIFICATION	//		scalarColumnAliases.add( typeReturn.getColumnAlias() ); //		scalarTypes.add( typeReturn.getType() );
WITHOUT_CLASSIFICATION	// If this return's alias has not been processed yet, do so b4 further processing of this return
WITHOUT_CLASSIFICATION	//			collectionOwnerAliases.add( ownerAlias );
WITHOUT_CLASSIFICATION	// for merging of versioned entities, we consider the version having // been changed only when: // 1) the two version values are different; //      *AND* // 2) The target actually represents database state! // // This second condition is a special case which allows // an entity to be merged during the same transaction // (though during a seperate operation) in which it was // originally persisted/saved
WITHOUT_CLASSIFICATION	// this is the second pass through on a merge op, so here we limit the // replacement to associations types (value types were already replaced // during the first pass)
WITHOUT_CLASSIFICATION	//EARLY EXIT
WITHOUT_CLASSIFICATION	// cascade-save to collections AFTER the collection owner was saved
WITHOUT_CLASSIFICATION	// Initialize the error handling delegate.
WITHOUT_CLASSIFICATION	// Use the delegate.
WITHOUT_CLASSIFICATION	// currently only the Hibernate-supplied DbTimestampType is supported here
WITHOUT_CLASSIFICATION	// This is called when it's time to fully resolve a path expression.
WITHOUT_CLASSIFICATION	// make a new one
WITHOUT_CLASSIFICATION	// not so sure this is even valid subtree.  but if it was, it'd // represent two unrelated table references...
WITHOUT_CLASSIFICATION	// (NOT (GT a b) ) => (LE a b)
WITHOUT_CLASSIFICATION	//private Type[] sqlResultTypes;
WITHOUT_CLASSIFICATION	//include the discriminator and class-level where, but not filters
WITHOUT_CLASSIFICATION	//sqlResultTypes = selectClause.getSqlResultTypes();
WITHOUT_CLASSIFICATION	//by default
WITHOUT_CLASSIFICATION	// This is now handled earlier in this method.
WITHOUT_CLASSIFICATION	// -- Loader implementation --
WITHOUT_CLASSIFICATION	// -- Loader overrides --
WITHOUT_CLASSIFICATION	// (NOT (IS_NULL a b) ) => (IS_NOT_NULL a b)
WITHOUT_CLASSIFICATION	//NONE, because its the requested lock mode, not the actual! 
WITHOUT_CLASSIFICATION	// meant to handle dynamic instantiation queries...
WITHOUT_CLASSIFICATION	// --- Query translator methods ---
WITHOUT_CLASSIFICATION	// -- Implementation private methods --
WITHOUT_CLASSIFICATION	//deduplicate unique constraints sharing the same columns //this is needed by Hibernate Annotations since it creates automagically // unique constraints for the user
WITHOUT_CLASSIFICATION	// Try to find out the name of the primary key to create it as identity if the IdentityGenerator is used
WITHOUT_CLASSIFICATION	// to support dialects that have their own identity data type
WITHOUT_CLASSIFICATION	// Prepare the left hand side and get the data type.
WITHOUT_CLASSIFICATION	//used also for generation of FK names!
WITHOUT_CLASSIFICATION	//usually useless
WITHOUT_CLASSIFICATION	// added this caching as I noticed that getType() is being called multiple times...
WITHOUT_CLASSIFICATION	//do not add unique constraint on DB not supporting unique and nullable columns
WITHOUT_CLASSIFICATION	//for backward compatibility, disable this:
WITHOUT_CLASSIFICATION	//may be final //may be final //may be final
WITHOUT_CLASSIFICATION	//may be final
WITHOUT_CLASSIFICATION	// may be final
WITHOUT_CLASSIFICATION	// Custom SQL
WITHOUT_CLASSIFICATION	//Primary key constraint
WITHOUT_CLASSIFICATION	// the root of the incoming property path matched one // of the embedded composite identifier properties
WITHOUT_CLASSIFICATION	// ignore it...
WITHOUT_CLASSIFICATION	//flat recursive algorithm
WITHOUT_CLASSIFICATION	//an identifier mapper => getKey will be included in the getNonDuplicatedPropertyIterator() //and checked later, so it needs to be excluded
WITHOUT_CLASSIFICATION	//if the hibernate-mapping did not specify a schema/catalog, use the defaults //specified by properties - but note that if the schema/catalog were specified //in hibernate-mapping, or as params, they will already be initialized and //will override the values set here (they are in identifierGeneratorProperties)
WITHOUT_CLASSIFICATION	//pass the entity-name, if not a collection-id
WITHOUT_CLASSIFICATION	// Custom SQL
WITHOUT_CLASSIFICATION	//Primary key constraint
WITHOUT_CLASSIFICATION	//pass the column name (a generated id almost always has a single column)
WITHOUT_CLASSIFICATION	//needed to satisfy KeyValue
WITHOUT_CLASSIFICATION	// empty means no scoping
WITHOUT_CLASSIFICATION	// index should be last column listed
WITHOUT_CLASSIFICATION	//if it is a formula index, use the element columns in the PK
WITHOUT_CLASSIFICATION	// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns
WITHOUT_CLASSIFICATION	/*ArrayList list = new ArrayList();			list.addAll( getKey().getConstraintColumns() );			list.addAll( getIndex().getConstraintColumns() );			getCollectionTable().createUniqueKey(list);*/
WITHOUT_CLASSIFICATION	// }
WITHOUT_CLASSIFICATION	// no foreign key element of for a one-to-many
WITHOUT_CLASSIFICATION	//TODO: we could just return all false...
WITHOUT_CLASSIFICATION	// the case of a foreign key to something other than the pk is handled in createPropertyRefConstraints
WITHOUT_CLASSIFICATION	//TODO: we could just return all false...
WITHOUT_CLASSIFICATION	// if the property mapping consists of all formulas,  // make it non-updateable
WITHOUT_CLASSIFICATION	//columnUpdateability.length==0 ||
WITHOUT_CLASSIFICATION	// if the property mapping consists of all formulas,  // make it insertable
WITHOUT_CLASSIFICATION	// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// expected type is intrinsic here...
WITHOUT_CLASSIFICATION	//}
WITHOUT_CLASSIFICATION	//}
WITHOUT_CLASSIFICATION	//return memberPersister.getPropertyType(propertyName);
WITHOUT_CLASSIFICATION	//return memberPersister.toColumns(alias, propertyName);
WITHOUT_CLASSIFICATION	//return memberPersister.getType();
WITHOUT_CLASSIFICATION	/*&& !indexIsFormula*/
WITHOUT_CLASSIFICATION	//		return !isOneToMany();
WITHOUT_CLASSIFICATION	//instanceof AssociationType;
WITHOUT_CLASSIFICATION	// we need to determine the best way to know that two joinables // represent a single many-to-many...
WITHOUT_CLASSIFICATION	//strip leading ','
WITHOUT_CLASSIFICATION	//public boolean isSubselectLoadable();
WITHOUT_CLASSIFICATION	// KEY
WITHOUT_CLASSIFICATION	//columns
WITHOUT_CLASSIFICATION	//SQL statements
WITHOUT_CLASSIFICATION	//extra information about the element type
WITHOUT_CLASSIFICATION	//types
WITHOUT_CLASSIFICATION	// custom sql
WITHOUT_CLASSIFICATION	//private final String unquotedIdentifierColumnName;
WITHOUT_CLASSIFICATION	// dynamic filters specifically for many-to-many inside the collection
WITHOUT_CLASSIFICATION	// dynamic filters for the collection
WITHOUT_CLASSIFICATION	// NativeSQL: collect key column and auto-aliases
WITHOUT_CLASSIFICATION	//unquotedKeyColumnNames = StringHelper.unQuote(keyColumnAliases);
WITHOUT_CLASSIFICATION	//ELEMENT
WITHOUT_CLASSIFICATION	// NativeSQL: collect element column and auto-aliases
WITHOUT_CLASSIFICATION	// INDEX AND ROW SELECT
WITHOUT_CLASSIFICATION	// NativeSQL: collect index column and auto-aliases
WITHOUT_CLASSIFICATION	//unquotedIdentifierColumnName = identifierColumnAlias;
WITHOUT_CLASSIFICATION	//unquotedIdentifierColumnName = null;
WITHOUT_CLASSIFICATION	//GENERATE THE SQL:
WITHOUT_CLASSIFICATION	// for non-arrays, we don't need to know the element class //elementType.returnedClass();
WITHOUT_CLASSIFICATION	//not all classpersisters implement PropertyMapping!
WITHOUT_CLASSIFICATION	// Handle any filters applied to this collection
WITHOUT_CLASSIFICATION	// Handle any filters applied to this collection for many-to-many
WITHOUT_CLASSIFICATION	//if there is a user-specified loader, return that //TODO: filters!?
WITHOUT_CLASSIFICATION	// Take care of any entities that might have // been evicted!	
WITHOUT_CLASSIFICATION	//strip leading ','
WITHOUT_CLASSIFICATION	// Run a subquery loader
WITHOUT_CLASSIFICATION	//needed by arrays
WITHOUT_CLASSIFICATION	//TODO: something with formulas...
WITHOUT_CLASSIFICATION	//an assertion
WITHOUT_CLASSIFICATION	// Remove all the old entries
WITHOUT_CLASSIFICATION	//create all the new entries
WITHOUT_CLASSIFICATION	/*&& !indexIsFormula*/
WITHOUT_CLASSIFICATION	/*&& !indexIsFormula*/
WITHOUT_CLASSIFICATION	//delete all the deleted entries
WITHOUT_CLASSIFICATION	//insert all the new entries
WITHOUT_CLASSIFICATION	//==elementType ??
WITHOUT_CLASSIFICATION	//update all the modified entries
WITHOUT_CLASSIFICATION	//identifier collections not supported for 1-to-many
WITHOUT_CLASSIFICATION	// update removed rows fks to null
WITHOUT_CLASSIFICATION	// will still be issued when it used to be null
WITHOUT_CLASSIFICATION	// now update all changed or added rows fks
WITHOUT_CLASSIFICATION	//			buf.append( selectFragment( lhsAlias, "" ) )//ignore suffix for collection columns!
WITHOUT_CLASSIFICATION	//use suffix for the entity columns
WITHOUT_CLASSIFICATION	// the class hierarchy structure
WITHOUT_CLASSIFICATION	//private final String rootTableName;
WITHOUT_CLASSIFICATION	//INITIALIZATION:
WITHOUT_CLASSIFICATION	//Custom SQL
WITHOUT_CLASSIFICATION	// the class hierarchy structure
WITHOUT_CLASSIFICATION	// Execute the SQL:
WITHOUT_CLASSIFICATION	// This could also just be true all the time...
WITHOUT_CLASSIFICATION	//chop the last union (all)
WITHOUT_CLASSIFICATION	//TODO: check this....
WITHOUT_CLASSIFICATION	//INITIALIZATION:
WITHOUT_CLASSIFICATION	// properties of this class, including inherited properties
WITHOUT_CLASSIFICATION	// the closure of all properties in the entire hierarchy including // subclasses and superclasses of this class
WITHOUT_CLASSIFICATION	// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class
WITHOUT_CLASSIFICATION	// subclass discrimination works by assigning particular // values to certain combinations of null primary key // values in the outer join using an SQL CASE
WITHOUT_CLASSIFICATION	//MULTITABLES
WITHOUT_CLASSIFICATION	// Custom sql
WITHOUT_CLASSIFICATION	// subclass closure properties
WITHOUT_CLASSIFICATION	// SUBCLASSES
WITHOUT_CLASSIFICATION	//( (Column) model.getTable().getPrimaryKey().getColumnIterator().next() ).getName();
WITHOUT_CLASSIFICATION	//( (Column) sc.getTable().getPrimaryKey().getColumnIterator().next() ).getName();
WITHOUT_CLASSIFICATION	// don't need subclass tables, because they can't appear in conditions
WITHOUT_CLASSIFICATION	// special case where we need to force incloude all subclass joins
WITHOUT_CLASSIFICATION	// the class hierarchy structure
WITHOUT_CLASSIFICATION	// properties of this class, including inherited properties
WITHOUT_CLASSIFICATION	// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class
WITHOUT_CLASSIFICATION	//get em on the second pass!
WITHOUT_CLASSIFICATION	// now look up the object we are really interested in! // (this lets us correctly handle proxies and multi-row // or multi-column queries)
WITHOUT_CLASSIFICATION	// discriminator column
WITHOUT_CLASSIFICATION	//INITIALIZATION:
WITHOUT_CLASSIFICATION	//private final Map propertyTableNumbersByName = new HashMap();
WITHOUT_CLASSIFICATION	// CLASS + TABLE
WITHOUT_CLASSIFICATION	// DISCRIMINATOR
WITHOUT_CLASSIFICATION	// PROPERTIES
WITHOUT_CLASSIFICATION	// SUBCLASSES
WITHOUT_CLASSIFICATION	// Execute the SQL:
WITHOUT_CLASSIFICATION	// JOINS
WITHOUT_CLASSIFICATION	//propertyTableNumbersByName.put( prop.getName(), join );
WITHOUT_CLASSIFICATION	//Access cached SQL
WITHOUT_CLASSIFICATION	//figure out which tables need to be fetched
WITHOUT_CLASSIFICATION	//figure out which columns are needed
WITHOUT_CLASSIFICATION	//figure out which formulas are needed
WITHOUT_CLASSIFICATION	//render the SQL
WITHOUT_CLASSIFICATION	// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// The optional SQL string defined in the where attribute
WITHOUT_CLASSIFICATION	//information about lazy properties of this class
WITHOUT_CLASSIFICATION	//information about all properties in class hierarchy
WITHOUT_CLASSIFICATION	//information about all columns/formulas in class hierarchy
WITHOUT_CLASSIFICATION	// dynamic filters attached to the class-level
WITHOUT_CLASSIFICATION	// SQL strings
WITHOUT_CLASSIFICATION	// for objects that came in via update()
WITHOUT_CLASSIFICATION	// PROPERTIES
WITHOUT_CLASSIFICATION	// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// IDENTIFIER
WITHOUT_CLASSIFICATION	// VERSION
WITHOUT_CLASSIFICATION	//WHERE STRING
WITHOUT_CLASSIFICATION	// SUBCLASS PROPERTY CLOSURE
WITHOUT_CLASSIFICATION	//before add :-)
WITHOUT_CLASSIFICATION	// Handle any filters applied to the class level
WITHOUT_CLASSIFICATION	// only one-to-one is lazy fetched
WITHOUT_CLASSIFICATION	//note early exit here:
WITHOUT_CLASSIFICATION	// object have been loaded with setReadOnly(true); HHH-2236
WITHOUT_CLASSIFICATION	// NOTE: this assumes something about how propertySelectFragment is implemented by the subclass!
WITHOUT_CLASSIFICATION	//strip leading ", "
WITHOUT_CLASSIFICATION	//if there is no resulting row, return null
WITHOUT_CLASSIFICATION	//otherwise return the "hydrated" state (ie. associations are not resolved)
WITHOUT_CLASSIFICATION	//null owner ok??
WITHOUT_CLASSIFICATION	// null sql means that the only lazy properties // are shared PK one-to-one associations which are // handled differently in the Type#nullSafeGet code...
WITHOUT_CLASSIFICATION	// Create a new FROM node for the referenced class.
WITHOUT_CLASSIFICATION	// the difficulty here is exactly what do we update in order to // force the version to be incremented in the db...
WITHOUT_CLASSIFICATION	// performance op to avoid the array search
WITHOUT_CLASSIFICATION	// properly handle property-ref-based associations
WITHOUT_CLASSIFICATION	//Enable for HHH-440, which we don't like:
WITHOUT_CLASSIFICATION	// ALIASES
WITHOUT_CLASSIFICATION	// aliases named identifier ( alias.idname )
WITHOUT_CLASSIFICATION	// aliases for composite-id's
WITHOUT_CLASSIFICATION	// Fetch embedded identifiers propertynames from the "virtual" identifier component
WITHOUT_CLASSIFICATION	// embedded composite ids ( alias.idname1, alias.idname2 )
WITHOUT_CLASSIFICATION	// TODO: skip formulas?
WITHOUT_CLASSIFICATION	//don't need filters for the static loaders
WITHOUT_CLASSIFICATION	//do two passes, for collection property-ref!
WITHOUT_CLASSIFICATION	// select the correct row by either pk or rowid
WITHOUT_CLASSIFICATION	//TODO: eventually, rowIdName[j]
WITHOUT_CLASSIFICATION	// this is a property of the table, which we are updating
WITHOUT_CLASSIFICATION	// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression
WITHOUT_CLASSIFICATION	// we are using "all" or "dirty" property-based optimistic locking
WITHOUT_CLASSIFICATION	// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here
WITHOUT_CLASSIFICATION	// this property belongs on the table and is to be inserted
WITHOUT_CLASSIFICATION	// add normal properties
WITHOUT_CLASSIFICATION	// add the discriminator
WITHOUT_CLASSIFICATION	// more specifically : "? [op] datetime" //      1) if the operator is MINUS, the param needs to be of //          some datetime type //      2) if the operator is PLUS, the param needs to be of //          some numeric type
WITHOUT_CLASSIFICATION	// add normal properties
WITHOUT_CLASSIFICATION	// this property belongs on the table and is to be inserted
WITHOUT_CLASSIFICATION	// add the discriminator
WITHOUT_CLASSIFICATION	// add the primary key
WITHOUT_CLASSIFICATION	// delegate already handles PK columns
WITHOUT_CLASSIFICATION	// we can't batch joined inserts, *especially* not if it is an identity insert; // nor can we batch statements where the expectation is based on an output param
WITHOUT_CLASSIFICATION	// Render the SQL query
WITHOUT_CLASSIFICATION	// Write the values of fields onto the prepared statement - we MUST use the state at the time the // insert was issued (cos of foreign key constraints). Not necessarily the object's current state
WITHOUT_CLASSIFICATION	// TODO : shouldnt inserts be Expectations.NONE?
WITHOUT_CLASSIFICATION	//don't bother trying to update, we know there is no row there yet
WITHOUT_CLASSIFICATION	//if all fields are null, we might need to delete existing row
WITHOUT_CLASSIFICATION	//there is probably a row there, so try to update //if no rows were updated, we will find out
WITHOUT_CLASSIFICATION	//note: updates to joined tables can't be batched...
WITHOUT_CLASSIFICATION	// starting index
WITHOUT_CLASSIFICATION	//Now write the values of fields onto the prepared statement
WITHOUT_CLASSIFICATION	// Write any appropriate versioning conditional parameters
WITHOUT_CLASSIFICATION	//Render the SQL query
WITHOUT_CLASSIFICATION	// Do the key. The key is immutable so we can use the _current_ object state - not necessarily // the state at the time the delete was issued
WITHOUT_CLASSIFICATION	// We should use the _current_ object state (ie. after any updates that occurred during flush)
WITHOUT_CLASSIFICATION	// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"
WITHOUT_CLASSIFICATION	//note: dirtyFields==null means we had no snapshot, and we couldn't get one using select-before-update //	  oldFields==null just means we had no snapshot to begin with (we might have used select-before-update to get the dirtyFields)
WITHOUT_CLASSIFICATION	// more specifically : "datetime [op] ?" //      1) if the operator is MINUS, we really cannot determine //          the expected type as either another datetime or //          numeric would be valid //      2) if the operator is PLUS, the param needs to be of //          some numeric type
WITHOUT_CLASSIFICATION	// For the case of dynamic-update="true", we need to generate the UPDATE SQL
WITHOUT_CLASSIFICATION	// don't need to check laziness (dirty checking algorithm handles that)
WITHOUT_CLASSIFICATION	// For the case of dynamic-update="false", or no snapshot, we use the static SQL
WITHOUT_CLASSIFICATION	// if not "get", then try "is"
WITHOUT_CLASSIFICATION	// Now update only the tables with dirty properties (and the table with the version number)
WITHOUT_CLASSIFICATION	// For the case of dynamic-insert="true", we need to generate the INSERT SQL
WITHOUT_CLASSIFICATION	// For the case of dynamic-insert="true", we need to generate the INSERT SQL
WITHOUT_CLASSIFICATION	// For the case of dynamic-insert="false", use the static SQL
WITHOUT_CLASSIFICATION	// For the case of dynamic-insert="false", use the static SQL
WITHOUT_CLASSIFICATION	// not supported
WITHOUT_CLASSIFICATION	// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"
WITHOUT_CLASSIFICATION	// we need to utilize dynamic delete statements
WITHOUT_CLASSIFICATION	// otherwise, utilize the static delete statements
WITHOUT_CLASSIFICATION	//just a performance opt!
WITHOUT_CLASSIFICATION	//just a performance opt!
WITHOUT_CLASSIFICATION	//all joins join to the pk of the driving table
WITHOUT_CLASSIFICATION	//notice that we skip the first table; it is the driving table!
WITHOUT_CLASSIFICATION	//we can inner join to superclass tables (the row MUST be there) //we can never inner join to subclass tables
WITHOUT_CLASSIFICATION	//skip the driving table
WITHOUT_CLASSIFICATION	//get 'em in the right order (not that it really matters)
WITHOUT_CLASSIFICATION	// here, we work under the following assumptions: //      ------------ valid cases -------------------------------------- //      1) datetime + {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      2) datetime - datetime : always results in a DOUBLE //      3) datetime - {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      ------------ invalid cases ------------------------------------ //      4) datetime + datetime //      5) {something other than datetime} - datetime //      6) datetime * {any type} //      7) datetime / {any type} //      8) {any type} / datetime // doing so allows us to properly handle parameters as either the left // or right side here in the majority of cases
WITHOUT_CLASSIFICATION	//render the where and from parts
WITHOUT_CLASSIFICATION	//we *could* regerate this inside each called method!
WITHOUT_CLASSIFICATION	//now render the joins
WITHOUT_CLASSIFICATION	// This will add the new from element to the origin.
WITHOUT_CLASSIFICATION	//now render the select clause
WITHOUT_CLASSIFICATION	//now tie it all together
WITHOUT_CLASSIFICATION	//insert/update/delete SQL
WITHOUT_CLASSIFICATION	//select SQL
WITHOUT_CLASSIFICATION	//no need to check laziness, dirty checking handles that
WITHOUT_CLASSIFICATION	// Fully resolve the map reference, create implicit joins.
WITHOUT_CLASSIFICATION	// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// The basic implementation is to simply use the node's text
WITHOUT_CLASSIFICATION	// for dialects which are known to not support ANSI-SQL row-value-constructor syntax, // we should mutate the tree.
WITHOUT_CLASSIFICATION	// Due to the complexity in initializing the SelectClause, do not generate one here. // If it is not found; simply return null... // // Also, do not cache since it gets generated well after we are created.
WITHOUT_CLASSIFICATION	// check the version unsaved-value, if appropriate
WITHOUT_CLASSIFICATION	// let this take precedence if defined, since it works for // assigned identifiers
WITHOUT_CLASSIFICATION	// check the id unsaved-value
WITHOUT_CLASSIFICATION	// check to see if it is in the second-level cache
WITHOUT_CLASSIFICATION	///////////////////////////////////////////////////////////////////////
WITHOUT_CLASSIFICATION	// For property references generate <tablealias>.<columnname> as <projectionalias>
WITHOUT_CLASSIFICATION	// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	//if there is no resulting row, return null
WITHOUT_CLASSIFICATION	//force immediate execution of the insert
WITHOUT_CLASSIFICATION	// If this from element is a collection and the path is a collection property (maxIndex, etc.) then // generate a sub-query.
WITHOUT_CLASSIFICATION	// entities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// collections ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	//cannot occur
WITHOUT_CLASSIFICATION	//cannot occur
WITHOUT_CLASSIFICATION	// only carry on if the method has no parameters
WITHOUT_CLASSIFICATION	// try "get"
WITHOUT_CLASSIFICATION	// do nothing...
WITHOUT_CLASSIFICATION	// do nothing...
WITHOUT_CLASSIFICATION	// should be safe to only ever expect EntityPersister references here
WITHOUT_CLASSIFICATION	// this page intentionally left blank :)
WITHOUT_CLASSIFICATION	// do not do anything
WITHOUT_CLASSIFICATION	//
WITHOUT_CLASSIFICATION	// ignore
WITHOUT_CLASSIFICATION	//cant instantiate
WITHOUT_CLASSIFICATION	//if it is a property of an embedded component, invoke on the "identifier"
WITHOUT_CLASSIFICATION	// otherwise:
WITHOUT_CLASSIFICATION	// skip finalize methods
WITHOUT_CLASSIFICATION	// note: interfaces is assumed to already contain HibernateProxy.class
WITHOUT_CLASSIFICATION	// note: interfaces is assumed to already contain HibernateProxy.class
WITHOUT_CLASSIFICATION	// HHH-2481 make sure the callback gets cleared, otherwise the instance stays in a static thread local.
WITHOUT_CLASSIFICATION	// while constructor is running
WITHOUT_CLASSIFICATION	// while constructor is running
WITHOUT_CLASSIFICATION	// note: interface is assumed to already contain HibernateProxy.class
WITHOUT_CLASSIFICATION	// interfaces // arguments
WITHOUT_CLASSIFICATION	//TODO!
WITHOUT_CLASSIFICATION	// Get the caller
WITHOUT_CLASSIFICATION	// Get the caller principals
WITHOUT_CLASSIFICATION	//private static final Alias DEFAULT_ALIAS = new Alias(10, null);
WITHOUT_CLASSIFICATION	// Needed to bump this up to DotNode, because that is the only thing which currently // knows about the property-ref path in the correct format; it is either this, or // recurse over the DotNodes constructing the property path just like DotNode does // internally
WITHOUT_CLASSIFICATION	//if the identifier is quoted, remove the quotes
WITHOUT_CLASSIFICATION	//truncate the identifier to the max alias length, less the suffix length
WITHOUT_CLASSIFICATION	//full joins are not supported.. yet!
WITHOUT_CLASSIFICATION	// null is not considered the same type as Integer. //$NON-NLS-1 //$NON-NLS-1
WITHOUT_CLASSIFICATION	// the outerJoinsAfterWhere needs to come before where clause to properly // handle dynamic filters
WITHOUT_CLASSIFICATION	//$NON-NLS-1
WITHOUT_CLASSIFICATION	//$NON-NLS-1
WITHOUT_CLASSIFICATION	//$NON-NLS-1
WITHOUT_CLASSIFICATION	//$NON-NLS-1
WITHOUT_CLASSIFICATION	// strip off any leading 'and' token
WITHOUT_CLASSIFICATION	// if the condition is not already there...
WITHOUT_CLASSIFICATION	//dontSpace.add("'");
WITHOUT_CLASSIFICATION	//for MySQL
WITHOUT_CLASSIFICATION	//HashMap columnsUnique = new HashMap();
WITHOUT_CLASSIFICATION	//null caused some problems
WITHOUT_CLASSIFICATION	/*package*/
WITHOUT_CLASSIFICATION	//not sure if this would ever be null but wanted to be careful
WITHOUT_CLASSIFICATION	//even on inverse="true"
WITHOUT_CLASSIFICATION	/*package*/
WITHOUT_CLASSIFICATION	/*package*/
WITHOUT_CLASSIFICATION	// If true then execute db updates, otherwise just generate and display updates
WITHOUT_CLASSIFICATION	// we only release the connection
WITHOUT_CLASSIFICATION	// deprecated option...
WITHOUT_CLASSIFICATION	//if an exception occurs during flush, user must call rollback()
WITHOUT_CLASSIFICATION	//actually, this last test is probably unnecessary, since  //beforeCompletion() doesn't get called during rollback
WITHOUT_CLASSIFICATION	// this one only really needed for badly-behaved applications! // (if the TransactionManager has a Sychronization registered, // its a noop) // (actually we do need it for downgrading locks)
WITHOUT_CLASSIFICATION	// Create an DotNode AST for the path and resolve it.
WITHOUT_CLASSIFICATION	//if an exception occurs during flush, user must call rollback()
WITHOUT_CLASSIFICATION	//if we could not register a synchronization, //do the before/after completion callbacks //ourself (but we need to let jdbcContext //know that this is what we are going to //do, so it doesn't keep trying to register //synchronizations)
WITHOUT_CLASSIFICATION	// swallow it, and continue to roll back JTA transaction
WITHOUT_CLASSIFICATION	// so the transaction is already rolled back, by JTA spec
WITHOUT_CLASSIFICATION	// this method is a noop if there is a Synchronization!
WITHOUT_CLASSIFICATION	// two conditions where we need to transform this to a theta-join syntax: //      1) 'elem' is the "root from-element" in correlated subqueries //      2) The DotNode.useThetaStyleImplicitJoins has been set to true //          and 'elem' represents an implicit join
WITHOUT_CLASSIFICATION	// WebSphere, however, is not a sane JEE/JTA container...
WITHOUT_CLASSIFICATION	// for sane JEE/JTA containers, the transaction itself functions as its identifier...
WITHOUT_CLASSIFICATION	//swallow, the transaction was finished
WITHOUT_CLASSIFICATION	// all AliasToEntityMapResultTransformer are considered equal ~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// Create the join element under the from element.
WITHOUT_CLASSIFICATION	// all DistinctRootEntityResultTransformer are considered equal ~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// map of EntityMode -> Tuplizer
WITHOUT_CLASSIFICATION	// this is a virtual id property...
WITHOUT_CLASSIFICATION	//this one needed only for guessEntityMode()
WITHOUT_CLASSIFICATION	// create our own copy of the user-supplied tuplizer impl map
WITHOUT_CLASSIFICATION	// todo : move this to SF per HHH-3517; also see HHH-1907 and ComponentMetamodel
WITHOUT_CLASSIFICATION	// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available
WITHOUT_CLASSIFICATION	// Build the dynamic-map tuplizer...
WITHOUT_CLASSIFICATION	// then dom4j tuplizer, if dom4j representation is available
WITHOUT_CLASSIFICATION	// Build the dynamic-map tuplizer...
WITHOUT_CLASSIFICATION	// put the "standard" tuplizers into the tuplizer map first
WITHOUT_CLASSIFICATION	// found a ctor, but it was not publicly accessible so try to request accessibility
WITHOUT_CLASSIFICATION	//	private final SessionFactoryImplementor sessionFactory;
WITHOUT_CLASSIFICATION	// cached for efficiency...
WITHOUT_CLASSIFICATION	//	public ComponentMetamodel(Component component, SessionFactoryImplementor sessionFactory) {
WITHOUT_CLASSIFICATION	//		this.sessionFactory = sessionFactory;
WITHOUT_CLASSIFICATION	//it was not embedded, so the argument is just an id
WITHOUT_CLASSIFICATION	// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available
WITHOUT_CLASSIFICATION	// then dom4j tuplizer, if dom4j representation is available
WITHOUT_CLASSIFICATION	// put the "standard" tuplizers into the tuplizer map first
WITHOUT_CLASSIFICATION	// then handle any user-defined entity modes...
WITHOUT_CLASSIFICATION	//return currentId;
WITHOUT_CLASSIFICATION	//reset the id
WITHOUT_CLASSIFICATION	//		origin.addDestination( destination ); // This was the cause of HHH-242 //		origin.setType( FROM_FRAGMENT );			// Set the parent node type so that the AST is properly formed. // The destination node will have all the FROM text. // The parent node is a collection join too (voodoo - see JoinProcessor)
WITHOUT_CLASSIFICATION	//reset the version
WITHOUT_CLASSIFICATION	// the default is to simply not lazy fetch properties for now...
WITHOUT_CLASSIFICATION	// Add the second join, the one that ends in the destination table.
WITHOUT_CLASSIFICATION	// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// found a ctor, but it was not publicly accessible so try to request accessibility
WITHOUT_CLASSIFICATION	// determine the id getter and setter methods from the proxy interface (if any) // determine all interfaces needed by the resulting proxy
WITHOUT_CLASSIFICATION	//		return getFactory().getSettings().getBytecodeProvider().getProxyFactoryFactory().buildProxyFactory();
WITHOUT_CLASSIFICATION	//not final because proxy factory creation can fail
WITHOUT_CLASSIFICATION	// superclass entity-name
WITHOUT_CLASSIFICATION	// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	//init the aliases, after initing the constructornode
WITHOUT_CLASSIFICATION	// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// legacy behavior (with no abstract attribute specified)
WITHOUT_CLASSIFICATION	// Get ready to start adding nodes.
WITHOUT_CLASSIFICATION	// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	//note: this affects the return value!
WITHOUT_CLASSIFICATION	// Need to account for allowable '_' within the variant
WITHOUT_CLASSIFICATION	// Add the type to the list of returned sqlResultTypes.
WITHOUT_CLASSIFICATION	// Collection Types:
WITHOUT_CLASSIFICATION	// convenience methods relating to operations across arrays of types...
WITHOUT_CLASSIFICATION	//lobs cannot be compared
WITHOUT_CLASSIFICATION	//Blobs are ignored by merge()
WITHOUT_CLASSIFICATION	//value is the entity name
WITHOUT_CLASSIFICATION	//EARLY EXIT!
WITHOUT_CLASSIFICATION	// generate id select fragment and then property select fragment for // each expression, just like generateSelectFragments().
WITHOUT_CLASSIFICATION	//TODO!
WITHOUT_CLASSIFICATION	//xml is the entity name
WITHOUT_CLASSIFICATION	//special case ... this is the leaf of the containment graph, even though not immutable
WITHOUT_CLASSIFICATION	//tolerates nulls
WITHOUT_CLASSIFICATION	/*sqlResultTypeList,*/
WITHOUT_CLASSIFICATION	// metaType is assumed to be single-column type
WITHOUT_CLASSIFICATION	// Get all the select expressions (that we just generated) and render the select.
WITHOUT_CLASSIFICATION	// Look through the FromElement's children to find any collections of values that should be fetched...
WITHOUT_CLASSIFICATION	//return AssociationType.FOREIGN_KEY_TO_PARENT; //this is better but causes a transient object exception...
WITHOUT_CLASSIFICATION	// Use the lower case function name. // Remember whether we're in a SELECT clause or not.
WITHOUT_CLASSIFICATION	// IDENT might be the name of a class.
WITHOUT_CLASSIFICATION	//TODO!!!
WITHOUT_CLASSIFICATION	//st.setTimestamp( index,  new Timestamp( cal.getTimeInMillis() ), cal ); //JDK 1.5 only
WITHOUT_CLASSIFICATION	//st.setDate( index,  new Date( cal.getTimeInMillis() ), cal ); //JDK 1.5 only
WITHOUT_CLASSIFICATION	// both are Timestamps
WITHOUT_CLASSIFICATION	// at least one is a plain old Date
WITHOUT_CLASSIFICATION	//noop
WITHOUT_CLASSIFICATION	// if the corresponding SQL value is NULL, the reader we got is NULL as well
WITHOUT_CLASSIFICATION	// Fetch Reader content up to the end - and put characters in a StringBuffer
WITHOUT_CLASSIFICATION	// Return StringBuffer content as a large String
WITHOUT_CLASSIFICATION	//or Types.LONGVARCHAR?
WITHOUT_CLASSIFICATION	//Not called at runtime so doesn't matter if its slow :)
WITHOUT_CLASSIFICATION	//TODO
WITHOUT_CLASSIFICATION	// Chop off the rest of the tree.
WITHOUT_CLASSIFICATION	//different nullability rules for pk/fk
WITHOUT_CLASSIFICATION	//cache this
WITHOUT_CLASSIFICATION	//only really need new array during semiresolve!
WITHOUT_CLASSIFICATION	// Forcefully remove leading ands from where fragments; the grammar will // handle adding them
WITHOUT_CLASSIFICATION	//TODO!!!!!!!
WITHOUT_CLASSIFICATION	// Create a new FILTERS node as a parent of all filters
WITHOUT_CLASSIFICATION	// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	//public Object instantiate(Object parent, SessionImplementor session) throws HibernateException;
WITHOUT_CLASSIFICATION	//nothing to do
WITHOUT_CLASSIFICATION	//nothing to do
WITHOUT_CLASSIFICATION	// VersionType impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //      Note : simply returns null for seed() and next() as the only known //      application of binary types for versioning is for use with the //      TIMESTAMP datatype supported by Sybase and SQL Server, which //      are completely db-generated values...
WITHOUT_CLASSIFICATION	//lobs cannot be compared
WITHOUT_CLASSIFICATION	//not really necessary, I guess...
WITHOUT_CLASSIFICATION	//Clobs are ignored by merge() operation
WITHOUT_CLASSIFICATION	// we do not have to worry about queued additions to uninitialized // collections, since they can only occur for inverse collections!
WITHOUT_CLASSIFICATION	// collections cannot be compared
WITHOUT_CLASSIFICATION	//remember the uk value
WITHOUT_CLASSIFICATION	//NOOP
WITHOUT_CLASSIFICATION	//processCollectionProperty(token, q.getCollectionPersister(collectionRole), collectionName);
WITHOUT_CLASSIFICATION	//we must use the "remembered" uk value, since it is  //not available from the EntityEntry during assembly
WITHOUT_CLASSIFICATION	// collections don't dirty an unversioned parent entity
WITHOUT_CLASSIFICATION	// return false;
WITHOUT_CLASSIFICATION	// This just handles a particular case of component // projection, perhaps get rid of it and throw an exception
WITHOUT_CLASSIFICATION	//NOTE: we avoid joining to the next table if the named property is just the foreign key value
WITHOUT_CLASSIFICATION	// the key is the owning entity itself, so get the ID from the key
WITHOUT_CLASSIFICATION	// if the original is a PersistentCollection, and that original // was not flagged as dirty, then reset the target's dirty flag // here after the copy operation. // </p> // One thing to be careful of here is a "bare" original collection // in which case we should never ever ever reset the dirty flag // on the target because we simply do not know...
WITHOUT_CLASSIFICATION	//ignore subselect keywords
WITHOUT_CLASSIFICATION	// copy elements into newly empty target collection
WITHOUT_CLASSIFICATION	// for a null target, or a target which is the same as the original, we // need to put the merged elements in a new collection
WITHOUT_CLASSIFICATION	// by default just use an unanticipated capacity since we don't // know how to extract the capacity to use from original here...
WITHOUT_CLASSIFICATION	// get the elements back into the target making sure to handle dirty flag
WITHOUT_CLASSIFICATION	// check if collection is currently being loaded
WITHOUT_CLASSIFICATION	// check if it is already completely loaded, but unowned
WITHOUT_CLASSIFICATION	// cache the actual id of the object, not the value of the // property-ref, which might not be initialized
WITHOUT_CLASSIFICATION	//TODO!!!!!!!
WITHOUT_CLASSIFICATION	// create a new collection wrapper, to be initialized later
WITHOUT_CLASSIFICATION	// Some JDBC drivers erroneously return an empty array here for a null DB value :/
WITHOUT_CLASSIFICATION	// our column span is the number of columns in the PK
WITHOUT_CLASSIFICATION	//cannot batch fetch by unique key (property-ref associations)
WITHOUT_CLASSIFICATION	// we already know current is not null...
WITHOUT_CLASSIFICATION	// the ids are fully resolved, so compare them with isDirty(), not isModified()
WITHOUT_CLASSIFICATION	//the owner of the association is not the owner of the id
WITHOUT_CLASSIFICATION	// ----------------------------------------------------------- Constructors
WITHOUT_CLASSIFICATION	// ----------------------------------------------------- Instance Variables
WITHOUT_CLASSIFICATION	//	public static JDBCException newJDBCException(String string, SQLException root, String sql) { //		string = string + " [" + sql + ']'; //		log.error(string, root); //		logExceptions(root); //		return new JDBCException(string, root, sql); //	} // //	public static JDBCException newJDBCException(String string, SQLException root) { //		log.error(string, root); //		logExceptions(root); //		return new JDBCException(string, root); //	}
WITHOUT_CLASSIFICATION	// --------------------------------------------------------- Public Methods
WITHOUT_CLASSIFICATION	// Compare the two maps for equality
WITHOUT_CLASSIFICATION	// Simple tests that require no synchronization
WITHOUT_CLASSIFICATION	//Sybase fail if we don't do that, sigh...
WITHOUT_CLASSIFICATION	// Handles things like: // a and b or c // a and ( b or c ) // not a and not b // not ( a and b ) // x between y and z            (overloaded "and") // x in ( a, b, c )             (overloaded brackets) // not not a // a is not null                (overloaded "not") // etc...... // and expressions like // foo = bar                    (maps to: foo.id = bar.id) // foo.Bar = 'foo'              (maps to: foo.bar = 'foo') // foo.Bar.Baz = 1.0            (maps to: foo.bar = bar.id and bar.baz = 1.0) // 1.0 = foo.Bar.Baz            (maps to: bar.baz = 1.0 and foo.Bar = bar.id) // foo.Bar.Baz = a.B.C          (maps to: bar.Baz = b.C and foo.Bar = bar.id and a.B = b.id) // foo.Bar.Baz + a.B.C          (maps to: bar.Baz + b.C and foo.Bar = bar.id and a.B = b.id) // ( foo.Bar.Baz + 1.0 ) < 2.0  (maps to: ( bar.Baz + 1.0 ) < 2.0 and foo.Bar = bar.id)
WITHOUT_CLASSIFICATION	// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders
WITHOUT_CLASSIFICATION	// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders
WITHOUT_CLASSIFICATION	// try to "pretty print" it
WITHOUT_CLASSIFICATION	// otherwise, just dump it
WITHOUT_CLASSIFICATION	//its an interface so we can't really tell anything...
WITHOUT_CLASSIFICATION	//its an interface so we can't really tell anything...
WITHOUT_CLASSIFICATION	// use default behavior
WITHOUT_CLASSIFICATION	//NOTE: early return
WITHOUT_CLASSIFICATION	// the MRU cache used to keep hard references to the most recently used query plans; // note : LRU here is a bit of a misnomer, it indicates that LRU entries are removed, the // actual kept entries are the MRU entries
WITHOUT_CLASSIFICATION	// we want to be able to just use the defaults, // if JNDI environment properties are not supplied // so don't put null in anywhere
WITHOUT_CLASSIFICATION	// Clone //-----------------------------------------------------------------------
WITHOUT_CLASSIFICATION	// Serialize //-----------------------------------------------------------------------
WITHOUT_CLASSIFICATION	// stream closed in the finally
WITHOUT_CLASSIFICATION	// stream closed in the finally
WITHOUT_CLASSIFICATION	// Deserialize //-----------------------------------------------------------------------
WITHOUT_CLASSIFICATION	/* static methods only - hide constructor */
WITHOUT_CLASSIFICATION	/*&& !('_'==character)*/
WITHOUT_CLASSIFICATION	// returnign null!
WITHOUT_CLASSIFICATION	// returnign null!
WITHOUT_CLASSIFICATION	// includes last '.'
WITHOUT_CLASSIFICATION	// +1 to include the following '.'
WITHOUT_CLASSIFICATION	// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...
WITHOUT_CLASSIFICATION	// first time we find match!
WITHOUT_CLASSIFICATION	// entityNames may now include slashes for the representations //classname may be an inner class
WITHOUT_CLASSIFICATION	// wrapped iterators
WITHOUT_CLASSIFICATION	// index of current iterator in the wrapped iterators array
WITHOUT_CLASSIFICATION	// the current iterator
WITHOUT_CLASSIFICATION	// the last used iterator
WITHOUT_CLASSIFICATION	//it was a boolean expression
WITHOUT_CLASSIFICATION	/*public static Object[] clone(Class elementClass, Object[] array) {		Object[] result = (Object[]) Array.newInstance( elementClass, array.length );		System.arraycopy(array, 0, result, 0, array.length);		return result;	}*/
WITHOUT_CLASSIFICATION	// call this before any Iterator method to make sure that the current Iterator // is not exhausted
WITHOUT_CLASSIFICATION	//doable if needed
WITHOUT_CLASSIFICATION	// set last used iterator here, in case the user calls remove // before calling hasNext() or next() (although they shouldn't)
WITHOUT_CLASSIFICATION	// peek ahead
WITHOUT_CLASSIFICATION	// if we reach the end of the string w/o finding the // matching end, that is an exception
WITHOUT_CLASSIFICATION	// we have a placeholder, spin forward till we find the end
WITHOUT_CLASSIFICATION	// make sure spinning forward did not put us past the end of the buffer...
WITHOUT_CLASSIFICATION	// First, try to locate this resource through the current // context classloader.
WITHOUT_CLASSIFICATION	// Next, try to locate this resource through this class's classloader
WITHOUT_CLASSIFICATION	// Next, try to locate this resource through the system classloader
WITHOUT_CLASSIFICATION	// Anywhere else we should look?
WITHOUT_CLASSIFICATION	// would need an IdentitySet for this!
WITHOUT_CLASSIFICATION	//Arrays.asList doesn't do primitive arrays
WITHOUT_CLASSIFICATION	//faster?
WITHOUT_CLASSIFICATION	// the name of a class
WITHOUT_CLASSIFICATION	// Its the listener class name
WITHOUT_CLASSIFICATION	//allow 9,8,7,6,5,4,3,2,1
WITHOUT_CLASSIFICATION	// default to element set if no elements() specified
WITHOUT_CLASSIFICATION	// look for the instance by uuid
WITHOUT_CLASSIFICATION	// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)
WITHOUT_CLASSIFICATION	// first, lets determine whether to apply cglib or javassist based instrumentation...
WITHOUT_CLASSIFICATION	// Make sure we don't override previous set values
WITHOUT_CLASSIFICATION	//entirely optional!!
WITHOUT_CLASSIFICATION	// Its the listener instance (or better be)
WITHOUT_CLASSIFICATION	//context.unbind(boundName);
WITHOUT_CLASSIFICATION	//readResolveObject
WITHOUT_CLASSIFICATION	//cfg.setProperty("hibernate.show_sql", "true");
WITHOUT_CLASSIFICATION	// Defensive, convenience methods
WITHOUT_CLASSIFICATION	// Create the SessionFactory from hibernate.cfg.xml
WITHOUT_CLASSIFICATION	// Make sure you log the exception, as it might be swallowed
WITHOUT_CLASSIFICATION	// Begin unit of work
WITHOUT_CLASSIFICATION	// Write HTML header
WITHOUT_CLASSIFICATION	// Handle actions
WITHOUT_CLASSIFICATION	// Print page
WITHOUT_CLASSIFICATION	// Write HTML footer
WITHOUT_CLASSIFICATION	// End unit of work
WITHOUT_CLASSIFICATION	// Start the session to be used for this request
WITHOUT_CLASSIFICATION	// make the session available to the session factory's "current context"
WITHOUT_CLASSIFICATION	// pass control along to the rest of the processing chain
WITHOUT_CLASSIFICATION	// remove session from "current context"
WITHOUT_CLASSIFICATION	// Eager fetch the collection so we can use it detached
WITHOUT_CLASSIFICATION	// If we want to handle it bidirectional and detached, we also need to load this // collection with an eager outer-join fetch, this time with Criteria and not HQL:
WITHOUT_CLASSIFICATION	/*        Event anEvent = (Event) session                .createCriteria(Event.class).setFetchMode("participants", FetchMode.JOIN)                .add( Expression.eq("id", eventId) )                .uniqueResult(); // Eager fetch the colleciton so we can use it detached        */
WITHOUT_CLASSIFICATION	// End of first unit of work
WITHOUT_CLASSIFICATION	// or bidirectional safety method, setting both sides: aPerson.addToEvent(anEvent);
WITHOUT_CLASSIFICATION	// Begin second unit of work
WITHOUT_CLASSIFICATION	// Reattachment of aPerson
WITHOUT_CLASSIFICATION	// The getEmailAddresses() might trigger a lazy load of the collection
WITHOUT_CLASSIFICATION	// We need our tm, so get it now and avoid doing other work // if there is a problem
WITHOUT_CLASSIFICATION	// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates
WITHOUT_CLASSIFICATION	// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates
WITHOUT_CLASSIFICATION	// JBC put a version in the node when it created as part of // some internal operation. We are always newer, but if // the JBC version is > 1 something odd has happened
WITHOUT_CLASSIFICATION	//swaldman 2006-08-28: define c3p0-style configuration parameters for properties with //                     hibernate-specific overrides to detect and warn about conflicting //                     declarations
WITHOUT_CLASSIFICATION	// Not null if the Isolation level has been specified in the configuration file. // Otherwise, it is left to the Driver's default value.
WITHOUT_CLASSIFICATION	// Configured outside of Hibernate (i.e. Servlet container, or Java Bean Container // already has Proxool pools running, and this provider is to just borrow one of these
WITHOUT_CLASSIFICATION	// If you're closing down the ConnectionProvider chances are an // is not a real big deal, just warn
WITHOUT_CLASSIFICATION	// (AS is always optional, for consistency with SQL/OQL)
WITHOUT_CLASSIFICATION	// process the "new" HQL style where aliases are assigned // _after_ the class name or path expression ie. using // the AS construction
WITHOUT_CLASSIFICATION	// the loaded owner will be set to null after the collection is removed, // so capture its value as the affected owner so it is accessible to // both pre- and post- events
WITHOUT_CLASSIFICATION	// is a primitive type // invokespecial
WITHOUT_CLASSIFICATION	// array of primitive type // do nothing
WITHOUT_CLASSIFICATION	// handle a path expression or class name that // appears at the start, in the "new" HQL // style or an alias that appears at the start // in the "old" HQL style
WITHOUT_CLASSIFICATION	//handle <=, >=, !=, is not, not between, not in
WITHOUT_CLASSIFICATION	// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level
WITHOUT_CLASSIFICATION	// transfer an explicitly defined entity name // handle the lazy attribute
WITHOUT_CLASSIFICATION	//keep the behavior consistent even for boundary usages
WITHOUT_CLASSIFICATION	//keep the behavior consistent even for boundary usages
WITHOUT_CLASSIFICATION	// get meta's from // <joined-subclass>
WITHOUT_CLASSIFICATION	// parameters on the property mapping should // override parameters in the typedef
WITHOUT_CLASSIFICATION	//fetch="join" overrides default laziness //fetch="join" overrides default laziness
WITHOUT_CLASSIFICATION	//NOTE SPECIAL CASE: // default to join and non-lazy for the "second join" // of the many-to-many
WITHOUT_CLASSIFICATION	// so we "clock over" on the first invocation
WITHOUT_CLASSIFICATION	// state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	//	void setComponentTuplizerFactory(ComponentTuplizerFactory componentTuplizerFactory) { //		this.componentTuplizerFactory = componentTuplizerFactory; //	}
WITHOUT_CLASSIFICATION	//element //index -> id
WITHOUT_CLASSIFICATION	// note that it might be better to iterate the snapshot but this is safe, // assuming the user implements equals() properly, as required by the Set // contract!
WITHOUT_CLASSIFICATION	// collections detect changes made via their public interface and mark // themselves as dirty as a performance optimization
WITHOUT_CLASSIFICATION	// essentially, if the real session is closed allow any // method call to pass through since the real session // will complain by throwing an appropriate exception; // NOTE that allowing close() above has the same basic effect, //   but we capture that there simply to perform the unbind...
WITHOUT_CLASSIFICATION	// The default SQLExceptionConverter for all dialects is based on SQLState // since SQLErrorCode is extremely vendor-specific.  Specific Dialects // may override to return whatever is most appropriate for that vendor.
WITHOUT_CLASSIFICATION	//only necessary for postgre < 7.4 //http://anoncvs.postgresql.org/cvsweb.cgi/pgsql/doc/src/sgml/ref/create_sequence.sgml
WITHOUT_CLASSIFICATION	// select topic, syntax from information_schema.help // where section like 'Function%' order by section, topic // // see also ->  http://www.h2database.com/html/functions.html
WITHOUT_CLASSIFICATION	// registerColumnType(Types.VARBINARY, "CHARACTER($l)"); // registerColumnType(Types.BLOB, "CHARACTER($l)" );  // For use prior to CP 11.0 // registerColumnType(Types.CLOB, "CHARACTER($l)" );
WITHOUT_CLASSIFICATION	//the BLOB type requires a size arguement - this defaults to //bytes - no arg defaults to 1 whole byte! //other argument mods include K - kilobyte, M - megabyte, G - gigabyte. //refer to the PBdevelopers guide for more info.
WITHOUT_CLASSIFICATION	// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400
WITHOUT_CLASSIFICATION	// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.
WITHOUT_CLASSIFICATION	// add the comment // nest the main query in an outer select // add the rownnumber bit into the outer query select list
WITHOUT_CLASSIFICATION	//		 You may still have other ResultSets or update counts left to process here  //		 but you can't do it now or the ResultSet you just got will be closed 
WITHOUT_CLASSIFICATION	// Note: For object <-> SQL datatype mappings see: //	 Configuration Manager | Advanced | SQL | System DDL Datatype Mappings // //	TBD	registerColumnType(Types.BINARY,        "binary($1)"); // changed 08-11-2005, jsl
WITHOUT_CLASSIFICATION	// TRIM(end_keyword string-expression-1 FROM string-expression-2) // use Hibernate implementation "From" is one of the parameters they pass in position ?3 //registerFunction( "trim", new SQLFunctionTemplate(Hibernate.STRING, "trim(?1 ?2 from ?3)") );
WITHOUT_CLASSIFICATION	// Whether this dialect has an Identity clause added to the data type or a completely seperate identity // data type
WITHOUT_CLASSIFICATION	// According to both the ANSI-SQL and JPA specs, trim takes a variable number of parameters between 1 and 4. // at least one paramer (trimSource) is required.  From the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If <trim specification> is omitted, BOTH is assumed. // If <trim character> is omitted, space is assumed
WITHOUT_CLASSIFICATION	/////////////////////////////////////////////////////////////////////// // Prepare persisters and link them up with their cache // region/access-strategy
WITHOUT_CLASSIFICATION	//Named Queries:
WITHOUT_CLASSIFICATION	// this will throw an error if there's something wrong.
WITHOUT_CLASSIFICATION	// does not handle arrays (thats ok, cos they can't be lazy) // or newly instantiated collections, so we can do the cast
WITHOUT_CLASSIFICATION	// collection deletions are a special case since update() can add // deletions of collections not loaded by the session.
WITHOUT_CLASSIFICATION	// we can do the cast since orphan-delete does not apply to: // 1. newly instantiated collections // 2. arrays (we can't track orphans for detached arrays)
WITHOUT_CLASSIFICATION	// if the natural-id is marked as non-mutable, it is not retrieved during a // normal database-snapshot operation...
WITHOUT_CLASSIFICATION	// watch out for a case where old is still referenced // somewhere in the object graph! (which is a user error)
WITHOUT_CLASSIFICATION	//slice, to get the columns for this component //property
WITHOUT_CLASSIFICATION	//int result = 17; //result = 37 * result + type.hashCode(); //result = 37 * result + ( value==null ? 0 : value.hashCode() ); //return result;
WITHOUT_CLASSIFICATION	// The CollectionEntry.isReached() stuff is just to detect any silly users   // who set up circular or shared references between/to collections.
WITHOUT_CLASSIFICATION	// detached collection wrappers that get found + reattached // during flush shouldn't be ignored
WITHOUT_CLASSIFICATION	// The unique property value represented here may or may not be // serializable, so we do an explicit check here in order to generate // a better error message
WITHOUT_CLASSIFICATION	// if the version of a newly instantiated object is not the same // as the version seed value, use that as the unsaved-value
WITHOUT_CLASSIFICATION	// ie. we never have to null out a reference to // an uninitialized proxy
WITHOUT_CLASSIFICATION	// ignore this row, the collection is in process of // being loaded somewhere further "up" the stack
WITHOUT_CLASSIFICATION	// Entity load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // 	* currently, not yet used...
WITHOUT_CLASSIFICATION	// should be ok performance-wise to generate new delegate instances for each // request since these are locally stack-scoped.  Besides, it makes the code // much easier to read than the old TransactionHelper stuff...
WITHOUT_CLASSIFICATION	// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility
WITHOUT_CLASSIFICATION	// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility
WITHOUT_CLASSIFICATION	// wrap up any new collections directly referenced by the object // or its components
WITHOUT_CLASSIFICATION	// remove any snapshot, not really for memory management purposes, but // rather because it might now be stale, and there is no longer any  // EntityEntry to take precedence // This is now handled by removeEntity() //session.getPersistenceContext().removeDatabaseSnapshot(key);
WITHOUT_CLASSIFICATION	// skip this check for composite-ids relating to dom4j entity-mode; // alternatively, we could add a check to make sure the incoming id value is // an instance of Element...
WITHOUT_CLASSIFICATION	// upgrade the lock if necessary: //lock(result, lockMode);
WITHOUT_CLASSIFICATION	// now, any collections that are initialized // inside this block do not get updated - they // are ignored until the next flush
WITHOUT_CLASSIFICATION	//we must clone embedded composite identifiers, or  //we will get back the same instance that we pass in
WITHOUT_CLASSIFICATION	// Sub-insertions should occur before containing insertion so // Try to do the callback now
WITHOUT_CLASSIFICATION	//the entity is not associated with the session, so //try interceptor and unsaved-value
WITHOUT_CLASSIFICATION	//scan the query string for class names appearing in the from clause and replace //with all persistent implementors of the class/interface, returning multiple //query strings (make sure we don't pick up a class in the select clause!)
WITHOUT_CLASSIFICATION	// save() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// evict() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	//stops flush being called multiple times if this method is recursively called
WITHOUT_CLASSIFICATION	//if it is an uninitialized proxy, pointing //with this session, then when it is accessed, //the underlying instance will be "contained"
WITHOUT_CLASSIFICATION	// Generate an explicit join for the root dot node.   The implied joins will be collected and passed up // to the root dot node.
WITHOUT_CLASSIFICATION	// A session is considered to contain an entity only if the entity has // an entry in the session's persistence context and the entry reports // that the entity has not been removed
WITHOUT_CLASSIFICATION	// Does the collection referenced by this FromElement // specify an order-by attribute?  If so, attach it to // the query's order-by
WITHOUT_CLASSIFICATION	// ... and the token could be an identifer and the error is // a mismatched token error ...
WITHOUT_CLASSIFICATION	// If a where clause was specified in the update/delete query, use it to limit the // returned ids here...
WITHOUT_CLASSIFICATION	//					int parameterStart = getWalker().getNumberOfParametersInSetClause(); //					List allParams = getIdSelectParameterSpecifications(); //					Iterator whereParams = allParams.subList( parameterStart, allParams.size() ).iterator();
WITHOUT_CLASSIFICATION	// Default implementation: // If this node has a data type, and that data type is not an association, then this is scalar.
WITHOUT_CLASSIFICATION	// Resolve the LHS fully, generate implicit joins.  Pass in the property name so that the resolver can // discover foreign key (id) properties.
WITHOUT_CLASSIFICATION	// If the propertyType is null and there isn't a parent, just // stop now... there was a problem resolving the node anyway.
WITHOUT_CLASSIFICATION	//We do not look for an existing join on the same path, because //it makes sense to join twice on the same collection role
WITHOUT_CLASSIFICATION	// our parent is another dot node, meaning we are being further dereferenced. // thus we need to generate a join unless the parent refers to the associated // entity's PK (because 'our' table would know the FK).
WITHOUT_CLASSIFICATION	/*public final Currency getCurrency(int col) throws HibernateException {		return (Currency) get(col);	}*/
WITHOUT_CLASSIFICATION	// here, we have two possibilities: // 		1) the property-name matches the explicitly identifier property name //		2) the property-name matches the implicit 'id' property name
WITHOUT_CLASSIFICATION	// Set the unresolved path in this node and the parent. // Set the text for the parent.
WITHOUT_CLASSIFICATION	// Get the first child to be considered.  Sub-classes may do this differently in order to skip nodes that // are not select expressions (e.g. DISTINCT).
WITHOUT_CLASSIFICATION	// If this is an entity and the property is the identifier property, then use getIdentifierType(). //      Note that the propertyName.equals( propertyPath ) checks whether we have a component //      key reference, where the component class property name is the same as the //      entity id property name; if the two are not equal, this is the case and //      we'd need to "fall through" to using the property mapping.
WITHOUT_CLASSIFICATION	// for a subquery, the alias to use depends on a few things (we // already know this is not an overall SELECT): //      1) if this FROM_ELEMENT represents a correlation to the //          outer-most query //              A) if the outer query represents a multi-table //                  persister, we need to use the given alias //                  in anticipation of one of the multi-table //                  executors being used (as this subquery will //                  actually be used in the "id select" phase //                  of that multi-table executor) //              B) otherwise, we need to use the persister's //                  table name as the column qualification //      2) otherwise (not correlated), use the given alias
WITHOUT_CLASSIFICATION	// Not a collection? // Return the entity property mapping.
WITHOUT_CLASSIFICATION	// collection of <many-to-any/> mappings... // used to circumvent the component-collection check below...
WITHOUT_CLASSIFICATION	// Otherwise, the destination node was implied by the FROM clause and the FROM clause processor // will automatically add it in the right place.
WITHOUT_CLASSIFICATION	// If the first identifier in the path referrs to the class alias (not the class name), then this // is a correlated subselect.  If it's a correlated sub-select, use the existing table alias.  Otherwise // generate a new one.
WITHOUT_CLASSIFICATION	// check to see if our "propPath" actually // represents a property on the persister
WITHOUT_CLASSIFICATION	// An ident node can represent an index expression if the ident // represents a naked property ref //      *Note: this makes the assumption (which is currently the case //      in the hql-sql grammar) that the ident is first resolved //      itself (addrExpr -> resolve()).  The other option, if that //      changes, is to call resolve from here; but it is //      currently un-needed overhead.
WITHOUT_CLASSIFICATION	// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:
WITHOUT_CLASSIFICATION	// If this is an implied join in a FROM clause, then use ANSI-style joining, and set the // flag on the FromElement that indicates that it was implied in the FROM clause itself.
WITHOUT_CLASSIFICATION	//		origin.addDestination(destination); // Add the query spaces.
WITHOUT_CLASSIFICATION	// For an explicit many-to-many relationship, add a second join from the intermediate  // (many-to-many) table to the destination table.  Also, make sure that the from element's  // idea of the destination is the destination table.
WITHOUT_CLASSIFICATION	// Reset the node type, because the rest of the system is expecting FROM_FRAGMENT, all we wanted was // for the factory to create the right sub-class.  This might get reset again later on anyway to make the // SQL generation simpler.
WITHOUT_CLASSIFICATION	//explicit = true;	// This is an explict Select. //ArrayList sqlResultTypeList = new ArrayList();
WITHOUT_CLASSIFICATION	//sqlResultTypeList.add( type ); // Generate the select expression.
WITHOUT_CLASSIFICATION	// If the expression list has exactly one expression, and the type of the expression is a collection // then this might be a collection function, such as index(c) or size(c).
WITHOUT_CLASSIFICATION	// Need to parse off the column qualifiers; this is assuming (which is true as of now) // that this is only used from update and delete HQL statement parsing
WITHOUT_CLASSIFICATION	// for regression testing against output from the old parser... // found it easiest to simply reorder the FromElements here into ascending order // in terms of injecting them into the resulting sql ast in orders relative to those // expected by the old parser; this is definitely another of those "only needed // for regression purposes".  The SyntheticAndFactory, then, simply injects them as it // encounters them.
WITHOUT_CLASSIFICATION	// The uber-rule here is that we need to include  subclass joins if // the FromElement is in any way dereferenced by a property from // the subclass table; otherwise we end up with column references // qualified by a non-existent table reference in the resulting SQL...
WITHOUT_CLASSIFICATION	// classic translator does not support collection of ordinal // param metadata
WITHOUT_CLASSIFICATION	// The following variables are stacks that keep information about each subexpression // in the list of nested subexpressions we are currently processing.
WITHOUT_CLASSIFICATION	// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level
WITHOUT_CLASSIFICATION	// should not be able to reach last without maxPosition being set // unless there are no results
WITHOUT_CLASSIFICATION	// we found it in the temp PC.  Should indicate we are in the midst of processing a result set // containing eager fetches via join fetch
WITHOUT_CLASSIFICATION	//do not use proxiesByKey, since not all //proxies that point to this session's //instances are in that collection!
WITHOUT_CLASSIFICATION	// if there is no TM configured, we will not be able to access // the javax.transaction.Transaction object in order to // register a synch anyway.
WITHOUT_CLASSIFICATION	// Since the result set cursor is always left at the first // physical row after the "last processed", we need to jump // back one position to get the key value we are interested // in skipping
WITHOUT_CLASSIFICATION	//true if this is a query and we are loading multiple instances of the same collection role //otherwise this is a CollectionInitializer and we are loading up a single collection or batch
WITHOUT_CLASSIFICATION	// we don't need to worry about existing version being uninitialized // because this block isn't called by a re-entrant load (re-entrant // loads _always_ have lock mode NONE)
WITHOUT_CLASSIFICATION	// add temp entry so that the next step is circular-reference // safe - only needed because some types don't take proper // advantage of two-phase-load (esp. components)
WITHOUT_CLASSIFICATION	// assume we are in an auto-commit state
WITHOUT_CLASSIFICATION	// log a message about potential connection leaks
WITHOUT_CLASSIFICATION	//			ps.close(); //just close it; do NOT try to return it to the pool! //NOTE: early exit!
WITHOUT_CLASSIFICATION	// this has been shown to happen occasionally in rare cases // when using a transaction manager + transaction-timeout // where the timeout calls back through Hibernate's // registered transaction synchronization on a separate // "reaping" thread.  In cases where that reaping thread // executes through this block at the same time the main // application thread does we can get into situations where // these CMEs occur.  And though it is not "allowed" per-se, // the end result without handling it specifically is infinite // looping.  So here, we simply break the loop
WITHOUT_CLASSIFICATION	// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance
WITHOUT_CLASSIFICATION	// can't cache this stuff either (per-invocation) // we are given a map of user-alias -> lock mode // create a new map of sql-alias -> lock mode
WITHOUT_CLASSIFICATION	// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns //getCollectionTable().createUniqueKey( getIdentifier().getConstraintColumns() );
WITHOUT_CLASSIFICATION	// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	//isSet = collection.isSet(); //isSorted = collection.isSorted();
WITHOUT_CLASSIFICATION	//lists, arrays //sets, maps, bags
WITHOUT_CLASSIFICATION	// we finish all the "removes" first to take care of possible unique // constraints and so that we can take better advantage of batching
WITHOUT_CLASSIFICATION	//use a combination of foreign key columns and pk columns, since //the ordering of removal and addition is not guaranteed when //a child moves from one parent to another
WITHOUT_CLASSIFICATION	// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	//information about properties of this class, //including inherited properties //(only really needed for updatable/insertable properties)
WITHOUT_CLASSIFICATION	// all this only really needs to consider properties // of this class, not its subclasses, but since we // are reusing code used for sequential selects, we // use the subclass closure
WITHOUT_CLASSIFICATION	// Here we render the select column list based on the properties defined as being generated. // For partial component generation, we currently just re-select the whole component // rather than trying to handle the individual generated portions.
WITHOUT_CLASSIFICATION	// this is the root (versioned) table, and we are using version-based // optimistic locking;  if we are not updating the version, also don't // check it (unless this is a "generated" version column)!
WITHOUT_CLASSIFICATION	//optimistic-lock="all", include all updatable properties //optimistic-lock="dirty", include all properties we are updating this time
WITHOUT_CLASSIFICATION	// this property belongs to the table, and it is not specifically // excluded from optimistic locking by optimistic-lock="false"
WITHOUT_CLASSIFICATION	// check to see if the connection is in auto-commit  // mode (no connection means aggressive connection // release outside a JTA transaction context, so MUST // be autocommit mode)
WITHOUT_CLASSIFICATION	// need to treat this as if it where optimistic-lock="all" (dirty does *not* make sense); // first we need to locate the "loaded" state // // Note, it potentially could be a proxy, so perform the location the safe way...
WITHOUT_CLASSIFICATION	// we *always* assume an instance with a null // identifier or no identifier property is unsaved!
WITHOUT_CLASSIFICATION	// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...
WITHOUT_CLASSIFICATION	//allow any identifier quoted with backtick //only recognizes identifiers beginning with a letter
WITHOUT_CLASSIFICATION	//following doesn't handle (null, not null) but unnecessary //since this would mean all rows
WITHOUT_CLASSIFICATION	// IMPL NOTE : due to the delayed population of setters (setters cached // 		for performance), we really cannot pro0perly define equality for // 		this transformer
WITHOUT_CLASSIFICATION	// we need to dirty check collections, since they can cause an owner // version number increment
WITHOUT_CLASSIFICATION	//return the id, so we can use it to reset the proxy id //return result;
WITHOUT_CLASSIFICATION	//			optimizer = getFactory().getSettings().getBytecodeProvider().getReflectionOptimizer( //					mappedClass, getterNames, setterNames, propTypes //			);
WITHOUT_CLASSIFICATION	// cache the actual id of the object, not the value of the // property-ref, which might not be initialized
WITHOUT_CLASSIFICATION	// We now have the value of the property-ref we reference.  However, // we need to dig a little deeper, as that property might also be // an entity type, in which case we need to resolve its identitifier
WITHOUT_CLASSIFICATION	// Retrieve the value of the designated column in the current row of this // ResultSet object as a java.io.Reader object
WITHOUT_CLASSIFICATION	//not absolutely necessary, but helps for some //equals()/hashCode() implementations
WITHOUT_CLASSIFICATION	//this should be a call to resolve(), not resolveIdentifier(),  //'cos it might be a property-ref, and we did not cache the //referenced value
WITHOUT_CLASSIFICATION	// If we have <tt>not-found="ignore"</tt> association mapped to a // formula, we always need to dirty check it, so we can update the // second-level cache
WITHOUT_CLASSIFICATION	// can't just return null here, since that would // cause an owning component to become null
WITHOUT_CLASSIFICATION	//for arrays, replaceElements() may return a different reference, since //the array length might not match
WITHOUT_CLASSIFICATION	// actual cache of the entries.  soft references are used for both the keys and the // values here since the values pertaining to the MRU entries are kept in a // seperate hard reference cache (to avoid their enqueuement/garbage-collection).
WITHOUT_CLASSIFICATION	// as soon as we encounter our first letter, return the substring // from that position
WITHOUT_CLASSIFICATION	// Note : expected in the syntax: //      type=listenerClass //          ({sep}type=listenerClass)* // where {sep} is any whitespace or comma
WITHOUT_CLASSIFICATION	// isTransactionCallbackRegistered denotes whether any Hibernate // Transaction has registered as a callback against this // JDBCContext; only one such callback is allowed.  Directly // serializing this value causes problems with JDBCTransaction, // or really any Transaction impl where the callback is local // to the Transaction instance itself, since that Transaction // is not serialized along with the JDBCContext.  Thus we // handle that fact here explicitly...
WITHOUT_CLASSIFICATION	// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"
WITHOUT_CLASSIFICATION	// We call getKeyFromResultSet() here so that we can know the // key value upon which to perform the breaking logic.  However, // it is also then called from getRowFromResultSet() which is certainly // not the most efficient.  But the call here is needed, and there // currently is no other way without refactoring of the doQuery()/getRowFromResultSet() // methods
WITHOUT_CLASSIFICATION	// This check is needed since processing leaves the cursor // after the last physical row for the current logical row; // thus if we are after the last physical row, this might be // caused by either: //      1) scrolling to the last logical row //      2) scrolling past the last logical row // In the latter scenario, the previous logical row // really is the last logical row. // // In all other cases, we should process back two // logical records (the current logic row, plus the // previous logical row).
WITHOUT_CLASSIFICATION	// and perform the load
WITHOUT_CLASSIFICATION	//important: reuse the same event instances for performance!
WITHOUT_CLASSIFICATION	//this is a query and we are loading multiple instances of the same collection role
WITHOUT_CLASSIFICATION	// we found a collection element in the result set
WITHOUT_CLASSIFICATION	// we did not find a collection element in the result set, so we // ensure that a collection is created with the owner's identifier, // since what we have is an empty collection
WITHOUT_CLASSIFICATION	// this is a collection initializer, so we must create a collection // for each of the passed-in keys, to account for the possibility // that the collection is empty and has no rows in the result set
WITHOUT_CLASSIFICATION	// grab its state from the ResultSet and keep it in the Session // (but don't yet initialize the object itself) // note that we acquire LockMode.READ even if it was not requested
WITHOUT_CLASSIFICATION	// a many-to-many; // decrement currentDepth here to allow join across the association table // without exceeding MAX_FETCH_DEPTH (i.e. the "currentDepth - 1" bit)
WITHOUT_CLASSIFICATION	// if not a composite key, use "foo in (?, ?, ?)" for batching // if no batch, and not a composite key, use "foo = ?"
WITHOUT_CLASSIFICATION	//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases
WITHOUT_CLASSIFICATION	//first look for a reference to a projection alias
WITHOUT_CLASSIFICATION	//first look for a reference to a projection alias
WITHOUT_CLASSIFICATION	//it does not refer to an alias of a projection, //look for a property
WITHOUT_CLASSIFICATION	// determine if the collection elements are entities...
WITHOUT_CLASSIFICATION	// Let return-propertys override whatever the persister has for aliases.
WITHOUT_CLASSIFICATION	/**	 * Translates an AST join type (i.e., the token type) into a JoinFragment.XXX join type.	 *	 * @param astJoinType The AST join type (from HqlSqlTokenTypes or SqlTokenTypes)	 * @return a JoinFragment.XXX join type.	 * @see JoinFragment	 * @see SqlTokenTypes	 */
WITHOUT_CLASSIFICATION	// ignore
WITHOUT_CLASSIFICATION	// ignore
WITHOUT_CLASSIFICATION	//        }
WITHOUT_CLASSIFICATION	//	public List getCollectionAliases() { //		return collectionAliases; //	} // //	/*public List getCollectionOwners() { //		return collectionOwners; //	}*/ // //	public List getCollectionOwnerAliases() { //		return collectionOwnerAliases; //	} // //	public List getCollectionPersisters() { //		return collectionPersisters; //	} // //	public Map getAlias2Persister() { //		return alias2Persister; //	} // //	/*public boolean isCollectionInitializer() { //		return isCollectionInitializer; //	}*/ // ////	public List getPersisters() { ////		return persisters; ////	} // //	public Map getAlias2OwnerAlias() { //		return alias2OwnerAlias; //	} // //	public List getScalarTypes() { //		return scalarTypes; //	} //	public List getScalarColumnAliases() { //		return scalarColumnAliases; //	} // //	public List getPropertyResults() { //		return propertyResults; //	} // //	public List getCollectionPropertyResults() { //		return collectionResults; //	} // // //	public Map getAlias2Return() { //		return alias2Return; //	}
WITHOUT_CLASSIFICATION	//		SQLQueryParser parser = new SQLQueryParser( //				sqlQuery, //				processor.getAlias2Persister(), //				processor.getAlias2Return(), //				aliases, //				collAliases, //				collPersisters, //				suffixes, //				collSuffixes //		); // //		sql = parser.process(); // //		namedParameterBindPoints = parser.getNamedParameters();
WITHOUT_CLASSIFICATION	//include the discriminator and class-level where, but not filters
WITHOUT_CLASSIFICATION	//			sqlAliasSuffixes[i] = element.getColumnAliasSuffix();
WITHOUT_CLASSIFICATION	//NONE, because its the requested lock mode, not the actual! 
WITHOUT_CLASSIFICATION	// at this point we have (drivingSqlAlias) the SQL alias of the driving table // corresponding to the given user alias.  However, the driving table is not // (necessarily) the table against which we want to apply locks.  Mainly, // the exception case here is joined-subclass hierarchies where we instead // want to apply the lock against the root table (for all other strategies, // it just happens that driving and root are the same).
WITHOUT_CLASSIFICATION	// the column doesnt exist at all.
WITHOUT_CLASSIFICATION	// we have a mapped identifier property and the root of // the incoming property path matched that identifier // property
WITHOUT_CLASSIFICATION	// we have an embedded composite identifier
WITHOUT_CLASSIFICATION	// both many-to-one and one-to-one are represented as a // Property.  EntityPersister is relying on this value to // determine "lazy fetch groups" in terms of field-level // interception.  So we need to make sure that we return // true here for the case of many-to-one and one-to-one // with lazy="no-proxy" // // * impl note - lazy="no-proxy" currently forces both // lazy and unwrap to be set to true.  The other case we // are extremely interested in here is that of lazy="proxy" // where lazy is set to true, but unwrap is set to false. // thus we use both here under the assumption that this // return is really only ever used during persister // construction to determine the lazy property/field fetch // groupings.  If that assertion changes then this check // needs to change as well.  Partially, this is an issue with // the overloading of the term "lazy" here...
WITHOUT_CLASSIFICATION	// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	/*rootTableName = persistentClass.getRootTable().getQualifiedName( 				factory.getDialect(), 				factory.getDefaultCatalog(), 				factory.getDefaultSchema() 		);*/
WITHOUT_CLASSIFICATION	// SUBCLASSES
WITHOUT_CLASSIFICATION	// Custom sql
WITHOUT_CLASSIFICATION	/*protected void initPropertyPaths(			final String path,			final Type type,			final String[] columns,			final String[] formulaTemplates,			final Mapping factory)	throws MappingException {		//addFormulaPropertyPath(path, type, formulaTemplates);		initPropertyPaths(path, type, columns, formulaTemplates, factory);	}*/
WITHOUT_CLASSIFICATION	// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	//Custom SQL (would be better if these were private)
WITHOUT_CLASSIFICATION	// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// aliases for identifier ( alias.id ); skip if the entity defines a non-id property named 'id'
WITHOUT_CLASSIFICATION	//decide which ResultSet to get the property value from:
WITHOUT_CLASSIFICATION	//note: it is conceptually possible that a UserType could map null to //	  a non-null value, so the following is arguable:
WITHOUT_CLASSIFICATION	// the contract of EntityTuplizer.determineConcreteSubclassEntityName says that returning null // is an indication that the specified entity-name (this.getEntityName) should be used.
WITHOUT_CLASSIFICATION	// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...
WITHOUT_CLASSIFICATION	// cache these since they are stateless // this one could even be static...
WITHOUT_CLASSIFICATION	//"as" is not in KEYWORDS
WITHOUT_CLASSIFICATION	// --Commented out by Inspection (12/4/04 9:10 AM): public abstract void addCondition(String alias, String[] columns, String condition);
WITHOUT_CLASSIFICATION	//use the id column alias
WITHOUT_CLASSIFICATION	//private List aliases = new ArrayList();
WITHOUT_CLASSIFICATION	//columns.add(columnName); //aliases.add(tableAlias);
WITHOUT_CLASSIFICATION	//where fragment must be empty!
WITHOUT_CLASSIFICATION	// revert to traditional hibernate behavior of setting initialPoolSize to minPoolSize // unless otherwise specified with a c3p0.*-style parameter.
WITHOUT_CLASSIFICATION	//arbitrary on clause ignored!!
WITHOUT_CLASSIFICATION	// might happen with a managed connection
WITHOUT_CLASSIFICATION	// might happen with a managed connection
WITHOUT_CLASSIFICATION	//if an exception occurs during flush, user must call rollback()
WITHOUT_CLASSIFICATION	// Essentially: // 1) If we have a local (Hibernate) transaction in progress //      and it already has the UserTransaction cached, use that //      UserTransaction to determine the status. // 2) If a transaction manager has been located, use //      that transaction manager to determine the status. // 3) Finally, as the last resort, try to lookup the //      UserTransaction via JNDI and use that to determine the //      status.
WITHOUT_CLASSIFICATION	/*package*/
WITHOUT_CLASSIFICATION	//swallow it (the transaction _was_ successful or successfully rolled back)
WITHOUT_CLASSIFICATION	// ignore it
WITHOUT_CLASSIFICATION	// we need to dirty check many-to-ones with not-found="ignore" in order  // to update the cache (not the database), since in this case a null // entity reference can lose information
WITHOUT_CLASSIFICATION	// create our own copy of the user-supplied tuplizer impl map
WITHOUT_CLASSIFICATION	// Regions can get instantiated in the course of normal work (e.g. // a named query region will be created the first time the query is // executed), so suspend any ongoing tx
WITHOUT_CLASSIFICATION	// then handle any user-defined entity modes...
WITHOUT_CLASSIFICATION	// Establish the region root node with a non-locking data version
WITHOUT_CLASSIFICATION	// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// NOTE : this is being used from the process of shutting down a // SessionFactory. Specific things to consider: // (1) this clearing of the region should not propagate to // other nodes on the cluster (if any); this is the // cache-mode-local option bit... // (2) really just trying a best effort to cleanup after // ourselves; lock failures, etc are not critical here; // this is the fail-silently option bit...
WITHOUT_CLASSIFICATION	// need to extract the component values and check for subtype replacements...
WITHOUT_CLASSIFICATION	// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists
WITHOUT_CLASSIFICATION	// for now, just "re-flatten" the metamodel since this is temporary stuff anyway (HHH-1907)
WITHOUT_CLASSIFICATION	// Configure the cache to use our TM
WITHOUT_CLASSIFICATION	//This solution would allow us to eliminate the owner arg to disassemble(), but //what if the collection was null, and then later had elements added? seems unsafe //session.getPersistenceContext().getCollectionEntry( (PersistentCollection) value ).getKey();
WITHOUT_CLASSIFICATION	// Make sure JBC doesn't look one up
WITHOUT_CLASSIFICATION	// some collections are not lazy:
WITHOUT_CLASSIFICATION	// Here we don't want to suspend the tx. If we do: // 1) We might be caching query results that reflect uncommitted // changes. No tx == no WL on cache node, so other threads // can prematurely see those query results // 2) No tx == immediate replication. More overhead, plus we // spread issue #1 above around the cluster
WITHOUT_CLASSIFICATION	// return the (fully resolved) identifier value, but do not resolve // to the actual referenced entity instance // NOTE: the owner of the association is not really the owner of the id!
WITHOUT_CLASSIFICATION	// Add a zero (or quite low) timeout option so we don't block. // Ignore any TimeoutException. Basically we forego caching the // query result in order to avoid blocking. // Reads are done with suspended tx, so they should not hold the // lock for long.  Not caching the query result is OK, since // any subsequent read will just see the old result with its // out-of-date timestamp; that result will be discarded and the // db query performed again.
WITHOUT_CLASSIFICATION	// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...
WITHOUT_CLASSIFICATION	// We have the JBCWriteMutex, so no other *local* thread will  // be trying to write this key.  // It's possible here some remote thread has come in and // changed the values again, but since we are reading the // values to write to JBC right now, we know we are writing // the latest values; i.e. we don't assume that what we cached // in entry.update() above is what we should write to JBC *now*. // Our write could be redundant, i.e. we are writing what // some remote thread just came in an wrote.  There is a chance  // that yet another remote thread will update us, and we'll then // overwrite that later data in JBC.  But, all remote nodes will // ignore that change in their localCache; the only place it  // will live will be in JBC, where it can only effect the  // initial state transfer values on newly joined nodes  // (i.e. populateLocalCache()).
WITHOUT_CLASSIFICATION	// local cache, so we use synchronization
WITHOUT_CLASSIFICATION	// local cache, so we use synchronization
WITHOUT_CLASSIFICATION	// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail
WITHOUT_CLASSIFICATION	// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush
WITHOUT_CLASSIFICATION	// we need to obtain the lock before any actions are // executed, since this may be an inverse="true" // bidirectional association and it is one of the // earlier entity actions which actually updates // the database (this action is resposible for // second-level cache invalidation only)
WITHOUT_CLASSIFICATION	//postDelete: // After actually deleting a row, record the fact that the instance no longer  // exists on the database (needed for identity-column key generation), and // remove it from the session cache
WITHOUT_CLASSIFICATION	// intentionally empty
DESIGN	// todo : what else to do here?
DESIGN	//put() has nowait semantics, is this really appropriate? //note that it needs to be async replication, never local or sync
DESIGN	// 'hibernate.temp.use_jdbc_metadata_defaults' is a temporary magic value. // The need for it is intended to be alleviated with future developement, thus it is // not defined as an Environment constant... // // it is used to control whether we should consult the JDBC metadata to determine // certain Settings default values; it is useful to *not* do this when the database // may not be available (mainly in tools usage).
DESIGN	//TODO: get SQL rendering out of this package!
DESIGN	//TODO: get SQL rendering out of this package!
DESIGN	// todo : eventually merge this with TreeCache and just add optional opt-lock support there.
DESIGN	// can happen because of the multiple ways Cache.remove() // can be invoked :(
DESIGN	// work around the "feature" where tree cache is validating the // inserted node during the next transaction.  no idea...
DESIGN	/**     * FIXME Per the RegionFactory class Javadoc, this constructor version     * should not be necessary.     *      * @param props The configuration properties     */
DESIGN	/**     * FIXME Per the RegionFactory class Javadoc, this constructor version     * should not be necessary.     *      * @param props The configuration properties     */
DESIGN	// FIXME Hacky workaround to JBCACHE-1202
DESIGN	// FIXME Hacky workaround to JBCACHE-1202
DESIGN	// TODO: I considered validating TS cache config here, // but decided to defer unti getTimestampsCacheInstance() in case the  // cache is never actually used
DESIGN	// TODO Is this a valid operation on a timestamps cache?
DESIGN	// TODO Is this a valid operation on a timestamps cache?
DESIGN	// TODO Why not use the timestamp in a DataVersion?
DESIGN	// can happen because of the multiple ways Cache.remove() // can be invoked :(
DESIGN	// work around the "feature" where tree cache is validating the // inserted node during the next transaction. no idea...
DESIGN	//swaldman 2004-02-07: modify to allow null values to signify fall through to c3p0 PoolConfig defaults
DESIGN	// turn hibernate.c3p0.* into c3p0.*, so c3p0 // gets a chance to see all hibernate.c3p0.*
DESIGN	//TODO: this bit actually has to be called after all cascades! //      but since identity insert is called *synchronously*, //      instead of asynchronously as other actions, it isn't
DESIGN	//TODO: reenable if we also fix the above todo
DESIGN	//TODO: inefficient if that cache is just going to ignore the updated state!
DESIGN	// we may be screwed here since the collection action is about to execute // and we do not know the final owner key value
DESIGN	/** Create an action that will evict collection and entity regions based on queryspaces (table names).	 *  TODO: cache the autodetected information and pass it in instead.	 **/
DESIGN	// todo : what else to do here?
DESIGN	// todo : modify the class definition if not already transformed...
DESIGN	// todo : what else to do here?
DESIGN	// this is called by SessionFactory irregardless; we just disregard here; // could also add a check to SessionFactory to only conditionally call start
DESIGN	// this is called by SessionFactory irregardless; we just disregard here; // could also add a check to SessionFactory to only conditionally call stop
DESIGN	//TODO: to handle concurrent writes correctly, this should return a Lock to the client
DESIGN	//put() has nowait semantics, is this really appropriate? //note that it needs to be async replication, never local or sync
DESIGN	//TODO: to handle concurrent writes correctly, the client should pass in a Lock
DESIGN	//TODO: assumes all collections disassemble to an array!
DESIGN	//TODO: reuse the PreLoadEvent
DESIGN	// todo: this was added to support initializing an entity's EntityEntry snapshot during reattach; // this should be refactored to instead expose a method to assemble a EntityEntry based on this // state for return.
DESIGN	// todo : what is the implication of this?
DESIGN	// use COUNT as the default.  This mimics the old behavior, although // NONE might be a better option moving forward in the case of callable
DESIGN	/* TODO: joinKeyColumnName & foreignKeyColumnName should be called either here or at a			 * slightly higer level in the stack (to get all the information we need)			 * Right now HbmBinder does not support the			 */
DESIGN	//TODO: suck this into initLaziness!
DESIGN	// we have to set up the table later!! yuck
DESIGN	//TODO: better to degrade to lazy="false" if uninstrumented
DESIGN	// todo : again, how *should* this work for non-pojo entities?
DESIGN	// TODO: this is a bit of copy/paste from IndexedCollection.createPrimaryKey()
DESIGN	// This inner class implements a case statement....perhaps im being a bit over-clever here
DESIGN	//TODO: bad implementation, cos it depends upon ordering of mapping doc //      fixing this requires that Collection/PersistentClass gain access //      to the Mappings reference from Configuration (or the filterDefinitions //      map directly) sometime during Configuration.buildSessionFactory //      (after all the types/filter-defs are known and before building //      persisters).
DESIGN	//use of a stringbuffer to workaround a JDK bug
DESIGN	// hack/workaround as sqlquery impl depend on having a key.
DESIGN	//FIXME: get the PersistentClass
DESIGN	//FIXME: get the PersistentClass
DESIGN	//Icky workaround for MySQL bug:
DESIGN	//TODO: Somehow add the newly created foreign keys to the internal collection
DESIGN	//TODO possibly relax that
DESIGN	//TODO possibly relax that
DESIGN	//TODO possibly relax that
DESIGN	//use of a stringbuffer to workaround a JDK bug
DESIGN	//use a degenerated strategy for backward compatibility
DESIGN	// Sets can be just a view of a part of another collection. // do we need to copy it to be sure it won't be changing // underneath us? // ie. this.set.addAll(set);
DESIGN	//note that i parameter is now unused (delete it?)
DESIGN	//just to help out during the load (ugly, i know)
DESIGN	// TODO : safe to interpret "map.remove(key) == null" as non-dirty?
DESIGN	// yick!  need this for proper serialization/deserialization handling...
DESIGN	//TODO: get SQL rendering out of this package!
DESIGN	//TODO: get SQL rendering out of this package!
DESIGN	//yuck!
DESIGN	//TODO: get SQL rendering out of this package!
DESIGN	// TODO : not sure this is correct, could not find docs on how to do this.
DESIGN	//HSQL has no Blob/Clob support .... but just put these here for now!
DESIGN	// does this need holdlock also? : return tableName + " with (updlock, rowlock, holdlock)";
DESIGN	// sql-server, at least needed this dropped after use; strange!
DESIGN	// todo : is there really any reason to kkeep trying if this fails once?
DESIGN	// TBD should this be varbinary($1)? //		registerColumnType(Types.VARBINARY,     "binary($1)");
DESIGN	// is it necessary to register %exact since it can only appear in a where clause?
DESIGN	// xmlforest requires a new kind of function constructor
DESIGN	// Does this dialect support the ALTER TABLE syntax?
DESIGN	// Do we need to qualify index names with the schema name?
DESIGN	// Does this dialect support the UNIQUE column syntax?
DESIGN	// Does this dialect support check constraints?
DESIGN	// Do we need to drop constraints before dropping tables in this dialect?
DESIGN	// Does this dialect support the FOR UPDATE syntax?
DESIGN	// Does this dialect support the Oracle-style FOR UPDATE NOWAIT syntax?
DESIGN	// Does this dialect support FOR UPDATE OF, allowing particular rows to be locked?
DESIGN	//note there is a wierd implementation in the client side
DESIGN	//TODO: never reached, since getTypeName() actually throws an exception!
DESIGN	// todo : should we additionally check the current isolation mode explicitly?
DESIGN	// todo : remove this and just have subclasses use Isolater/IsolatedWork directly...
DESIGN	//TODO: should orphans really be deleted during lock???
DESIGN	// orphans should not be deleted during merge??
DESIGN	// orphans should not be deleted during copy??
DESIGN	//I suppose?
DESIGN	//TODO: suck this logic into the collection!
DESIGN	// TODO: an alternative is to check if the owner has changed; if it hasn't then // get the ID from collection.getOwner()
DESIGN	//TODO:refactor + make this method private
DESIGN	// todo : we can actually just determine this from the incoming EntityEntry-s
DESIGN	//TODO: Should this be an InitializeEntityEventListener??? (watch out for performance!)
DESIGN	//TODO: better to pass the id in as an argument?
DESIGN	// todo : potentially look at optimizing these two arrays
DESIGN	/* trim done to workaround stupid oracle bug that cant handle whitespaces before a { in a sp */
DESIGN	/* trim done to workaround stupid oracle bug that cant handle whitespaces before a { in a sp */
DESIGN	//TODO: temporary
DESIGN	//TODO: not quite sure about the full implications of this!
DESIGN	//TODO: not quite sure about the full implications of this!
DESIGN	//TODO: ugly here:
DESIGN	//this is kinda the best we can do...
DESIGN	//TODO: this needn't exclude subclasses...
DESIGN	// todo : need map? the prob is a proper key, right?
DESIGN	// todo : i'd much rather have this done from #endLoadingCollection(CollectionPersister,LoadingCollectionEntry)...
DESIGN	// todo : hack!!! // NOTE : here we cleanup the load context when we have no more local // LCE entries.  This "works" for the time being because really // only the collection load contexts are implemented.  Long term, // this cleanup should become part of the "close result set" // processing from the (sandbox/jdbc) jdbc-container code.
DESIGN	// todo : should really move this log statement to CollectionType, where this is used from...
DESIGN	// TODO : keep seperate notions of QT[] here for shallow/non-shallow queries...
DESIGN	// TODO : add this info to the translator and aggregate it here...
DESIGN	//TODO: move into collection type, so we can use polymorphism!
DESIGN	// todo : should we check the current isolation mode explicitly?
DESIGN	//TODO: suck into event class
DESIGN	//do we even really need this? the update will fail anyway....
DESIGN	//hum ... should we cascade anyway? throw an exception? fine like it is?
DESIGN	//TODO: would it be better to do a refresh from db?
DESIGN	//TODO: we use two visitors here, inefficient!
DESIGN	// this class has no proxies (so do a shortcut)
DESIGN	//PostLoad is needed for EJB3 //TODO: reuse the PostLoadEvent...
DESIGN	//TODO: put this stuff back in to read snapshot from //      the second-level cache (needs some extra work)
DESIGN	// null or brand new collection // this will also (inefficiently) handle arrays, which have // no snapshot, so we can't do any better
DESIGN	//TODO: is this 100% correct?
DESIGN	// TODO: iteratively get transient entities and retry merge until one of the following conditions: //       1) transientCopyCache.size() == 0 //       2) transientCopyCache.size() is not decreasing and copyCache.size() is not increasing // TODO: find out if retrying can add entities to copyCache (don't think it can...) // For now, just retry once; throw TransientObjectException if there are still any transient entities
DESIGN	// entity name will not be available for non-POJO entities // TODO: cache the entity name somewhere so that it is available to this exception
DESIGN	//TODO: we should throw an exception if we really *know* for sure   //      that this is a detached instance, rather than just assuming //throw new StaleObjectStateException(entityName, id);
DESIGN	// TODO : perhaps we should additionally require that the incoming entity // version be equivalent to the defined unsaved-value?
DESIGN	// perhaps this should be an exception since it is only ever used // in the above method?
DESIGN	// Put a placeholder in entries, so we don't recurse back and try to save() the // same object again. QUESTION: should this be done before onSave() is called? // likewise, should it be done before onUpdate()?
DESIGN	//TODO: merge into one method!
DESIGN	//TODO: refactor to .sql package
DESIGN	/** * Provides query splitting methods, which were originally in QueryTranslator. * <br> * TODO: This will need to be refactored at some point. * * @author josh */
DESIGN	//TODO: this is one of the ugliest and most fragile pieces of code in Hibernate....
DESIGN	// todo : temporary //      needed because currently persister is the one that //      creates and renders the join fragments for inheritence //      hierarchies...
DESIGN	// TODO : better way?!?
DESIGN	// Not possible to simply re-use the versionPropertyNode here as it causes // OOM errors due to circularity :(
DESIGN	//TODO:this is only needed during compilation .. can we eliminate the instvar?
DESIGN	// TODO : this is a bit dodgy, come up with a better way to check this (plus see above comment)
DESIGN	// even here, if only properties mapped to the "base table" are referenced // in the set and where clauses, this could be handled by the BasicDelegate. // TODO : decide if it is better performance-wise to perform that check, or to simply use the MultiTableUpdateDelegate
DESIGN	//TODO: switch statements are always evil! We already had bugs because  //      of forgotten token types. Use polymorphism for this!
DESIGN	// TODO : we really need to be able to deal with component paths here also; // this is difficult because the hql-sql grammar expects all those node types // to be FromReferenceNodes.  One potential fix here would be to convert the // IntoClause to just use a FromClause/FromElement combo (as a child of the // InsertStatement) and move all this logic into the InsertStatement.  That's // probably the easiest approach (read: least amount of changes to the grammar // and code), but just doesn't feel right as then an insert would contain // 2 from-clauses
DESIGN	// really there are two situations where it should be ok to allow the insertion // into properties defined on a superclass: //      1) union-subclass with an abstract root entity //      2) discrim-subclass // // #1 is handled already because of the fact that // UnionSubclassPersister alreay always returns 0 // for this call... // // we may want to disallow it for discrim-subclass just for // consistency-sake (currently does not work anyway)...
DESIGN	//yuck!
DESIGN	// implicit joins are always(?) ok to reuse
DESIGN	// TODO : we may also want to check that the types here map to exactly one column/JDBC-type //      can't think of a situation where arithmetic expression between multi-column mappings //      makes any sense.
DESIGN	// we do not know either type //BLIND GUESS!
DESIGN	//TODO: used to be exprNoParens! was this needed?
DESIGN	// TODO: Replace this with a more elegant solution.
DESIGN	// TODO: Should this really return null?  If not, figure out something better to do here.
DESIGN	//TODO: get SQL rendering out of this package!
DESIGN	// yuck!
DESIGN	// ignore it; the incoming property could not be found so we // cannot be sure what to do here.  At the very least, the // safest is to simply not apply any dereference toggling...
DESIGN	// TODO : most of below was taken verbatim from DotNode; should either delegate this logic or super-type it
DESIGN	// otherwise, a trim-specification and/or a trim-character // have been specified;  we need to decide which options // are present and "do the right thing" // should leading trim-characters be trimmed? // should trailing trim-characters be trimmed? // the trim-character // the trim-source
DESIGN	// todo: we should really just collect these from the various SelectExpressions, rather than regenerating here
DESIGN	//TODO: is this a bit ugly?
DESIGN	// Need a better way to define the suffixes here...
DESIGN	// TODO: something much better - look at the type of the other expression! // TODO: Have comparisonExpression and/or arithmeticExpression rules complete the resolution of boolean nodes.
DESIGN	// TODO : what amount of significant digits need to be supported here? //      - from the DecimalFormat docs: //          [significant digits] = [minimum integer digits] + [maximum fraction digits]
DESIGN	// Needed the "clazz_" check to work around union-subclasses // TODO : is there a way to tell whether a persister is truly discrim-column based inheritence?
DESIGN	//We should actually rework this class to not implement Parser //and just process path expressions in the most convenient way.
DESIGN	//The class is now way to complex!
DESIGN	//TODO: get SQL rendering out of here
DESIGN	//TODO: is there a better way?
DESIGN	//Must be done here because of side-effect! yuck...
DESIGN	//name from a super query (a bit inelegant that it shows up here)
DESIGN	// We should reengineer this class so that, rather than the current ad - // hoc linear approach to processing a stream of tokens, we instead // build up a tree of expressions.
DESIGN	// this is ugly here, but needed because its a subquery
DESIGN	// unhappy about this being public ... is there a better way?
DESIGN	// Make sure this is a defined parameter and check the incoming value type // TODO: what should be the actual exception type here?
DESIGN	// TODO : this constructor form is *only* used from constructor directly below us; can it go away?
DESIGN	//TODO: COPY/PASTE FROM SessionImpl, pull up!
DESIGN	// TODO : should remove this exposure //  and have all references to the session's batcher use the ConnectionManager.
DESIGN	// todo : should this get moved to PersistentContext? // logically, is PersistentContext the "thing" to which an interceptor gets attached?
DESIGN	// TODO: what type?
DESIGN	// todo : should seriously consider not allowing a txn to begin from a child session //      can always route the request to the root session...
DESIGN	// short-circuit for performance...
DESIGN	// not absolutely necessary, but does help with aggressive release
DESIGN	// TODO : remove these last two as batcher is no longer managing connections
DESIGN	//work around a bug in all known connection pools....
DESIGN	// TODO : make this the factory for "entity mode related" sessions; // also means making this the target of transaction-synch and the // thing that knows how to cascade things between related sessions // // At that point, perhaps this thing is a "SessionContext", and // ConnectionManager is a "JDBCContext"?  A "SessionContext" should // live in the impl package...
DESIGN	//TODO: does this really need to be here? //      does the collection already have //      it's own up-to-date snapshot?
DESIGN	//TODO: the i==entitySpan-1 bit depends upon subclass implementation (very bad)
DESIGN	/**	 * This form used from annotations (?).  Essentially the same as the above using a	 * resultset-mapping reference, but without cacheMode, readOnly, and comment.	 *	 * FIXME: annotations do not use it, so it can be remove from my POV	 * @deprecated	 *	 *	 * @param query The sql query string	 * @param resultSetRef The result-set-mapping name	 * @param querySpaces Any specified query spaces (used for auto-flushing)	 * @param cacheable Whether the query results are cacheable	 * @param cacheRegion If cacheable, the region into which to store the results	 * @param timeout A JDBC-level timeout to be applied	 * @param fetchSize A JDBC-level fetch-size to be applied	 * @param flushMode The flush mode to use for this query	 * @param parameterTypes parameter type map	 * @param callable Does the query string represent a callable object (i.e., proc)	 */
DESIGN	// todo : add the notion of enabled filters to the CacheKey to differentiate filtered collections from non-filtered; //      but CacheKey is currently used for both collections and entities; would ideally need to define two seperate ones; //      currently this works in conjuction with the check on //      DefaultInitializeCollectionEventHandler.initializeCollectionFromCache() (which makes sure to not read from //      cache with enabled filters). // EARLY EXIT!!!!!
DESIGN	//for sets, we should end the collection load after resolving //the entities, since we might call hashCode() on the elements //TODO: or we could do this polymorphically, and have two //      different operations implemented differently for arrays
DESIGN	//This is not very nice (and quite slow):
DESIGN	//use of trim() here is ugly?
DESIGN	//TODO: this is too conservative; if all preceding joins were  //      also inner joins, we could use an inner join here
DESIGN	//TODO: look at the owning property and check that it  //      isn't lazy (by instrumentation)
DESIGN	//TODO: inefficient
DESIGN	// why does this matter?
DESIGN	// from the collection of associations, locate OJA for the // ManyToOne corresponding to this persister to fully // define the many-to-many; we need that OJA so that we can // use its alias here // TODO : is there a better way here?
DESIGN	//TODO: this class depends directly upon CriteriaImpl,  //      in the impl package ... add a CriteriaImplementor  //      interface
DESIGN	//TODO: add a CriteriaImplementor interface //      this class depends directly upon CriteriaImpl in the impl package...
DESIGN	// TODO : not so sure this is needed...
DESIGN	// meant to handle dynamic instantiation queries...(Copy from QueryLoader)
DESIGN	// TODO: The order in which entities are saved may matter (e.g., a particular transient entity //       may need to be saved before other transient entities can be saved; //       Keep retrying the batch of transient entities until either: //       1) there are no transient entities left in transientCopyCache //       or 2) no transient entities were saved in the last batch // For now, just run through the transient entities and retry the merge
DESIGN	// todo: this might really even be moved into the cfg package and used as the basis for all things which are configurable.
DESIGN	// todo : currently expects that the individual with expressions apply to the same sql table join. //      This may not be the case for joined-subclass where the property values //      might be coming from different tables in the joined hierarchy.  At some //      point we should expand this to support that capability.  However, that has //      some difficulties: //          1) the biggest is how to handle ORs when the individual comparisons are //              linked to different sql joins. //          2) here we would need to track each comparison individually, along with //              the join alias to which it applies and then pass that information //              back to the FromElement so it can pass it along to the JoinSequence
DESIGN	// this function has a template -> restore output, apply the template and write the result out // TODO: Downcast to avoid using an interface?  Yuck.
DESIGN	// at some point the generate phase needs to be moved out of here, // because a single object-level DML might spawn multiple SQL DML // command executions. // // Possible to just move the sql generation for dml stuff, but for // consistency-sake probably best to just move responsiblity for // the generation phase completely into the delegates // (QueryLoader/StatementExecutor) themselves.  Also, not sure why // QueryLoader currently even has a dependency on this at all; does // it need it?  Ideally like to see the walker itself given to the delegates directly...
DESIGN	// get the right object from the list ... would it be easier to just call getEntity() ??
DESIGN	// TODO should we just collect these like with the collections above?
DESIGN	// todo : better to handle dynamic filters through implicit DynamicFilterParameterSpecification // see the discussion there in DynamicFilterParameterSpecification's javadocs as to why // it is currently not done that way.
DESIGN	/////////////////////////////////////////////////////////////////////////// // USED ONLY FOR REGRESSION TESTING!!!! // // todo : obviously get rid of all this junk ;) ///////////////////////////////////////////////////////////////////////////
DESIGN	//create an index on the key columns??
DESIGN	//TODO: deprecated, remove eventually
DESIGN	//create an index on the key columns??
DESIGN	//TODO: improve this hack!
DESIGN	// inheritance cycle detection (paranoid check)
DESIGN	//TODO: remove use of instanceof!
DESIGN	//shortcut
DESIGN	//TODO: handle the case of a foreign key to something other than the pk
DESIGN	// create an index on the key columns??
DESIGN	// todo : remove
DESIGN	// todo : remove
DESIGN	// todo : remove
DESIGN	// todo : throw exception?
DESIGN	// todo : throw exception?  maybe warn if not the same?
DESIGN	//TODO: make EntityPersister *not* depend on SessionFactoryImplementor //interface, if possible
DESIGN	//TODO: is there a more elegant way than downcasting?
DESIGN	// TODO: encapsulate the protected instance variables!
DESIGN	// should indicate that we are processing an INSERT/UPDATE/DELETE // query with a subquery implied via a collection property // function. Here, we need to use the table name itself as the // qualification alias. // TODO : verify this works for all databases... // TODO : is this also the case in non-"indexed" scenarios?
DESIGN	//TODO: copy/paste from insertRows()
DESIGN	//TODO: copy/paste from recreate()
DESIGN	//should this interface extend PropertyMapping?
DESIGN	//ie. the subquery! yuck!
DESIGN	//TODO: move to .sql package!!
DESIGN	//TODO: code duplication with SingleTableEntityPersister
DESIGN	// TODO: It would be really, really nice to use this to also model components!
DESIGN	//TODO: *two* hashmap lookups here is one too many...
DESIGN	//TODO: code duplication with JoinedSubclassEntityPersister
DESIGN	//perhaps not really necessary...
DESIGN	// NOTE: this assumes something about how propertySelectFragment is implemented by the subclass! // was toUnqotedAliasStrings( getIdentiferColumnNames() ) before - now tried // to remove that unqoting and missing aliases..
DESIGN	// NOTE: this assumes something about how propertySelectFragment is implemented by the subclass! // was toUnqotedAliasStrings( getdiscriminatorColumnName() ) before - now tried // to remove that unqoting and missing aliases..
DESIGN	//TODO: should we use SELECT .. FOR UPDATE?
DESIGN	//TODO: optimize this better!
DESIGN	//TODO: should we allow suffixes on these ?
DESIGN	//This is really ugly, but necessary:
DESIGN	//ugly little workaround for fact that createUniqueKeyLoaders() does not handle component properties
DESIGN	//TODO: disable batch loading if lockMode > READ?
DESIGN	// append the SQL to return the generated identifier //TODO: suck into Insert
DESIGN	//TODO: I am not so sure about the exception handling in this bit!
DESIGN	//TODO: is this really necessary????
DESIGN	//TODO: move to .sql package, and refactor with similar things!
DESIGN	//TODO: implement functionality //  this might be painful to do here, as the "join post processing" for //  the subquery has already been performed (meaning that for //  theta-join dialects, the join conditions have already been moved //  over to the where clause).  A "simple" solution here might to //  perform "join post processing" once for the entire query (including //  any subqueries) at one fell swoop
DESIGN	// todo : this eventually needs to be removed
DESIGN	//kinda ugly, but needed for collections with a "." node mapping
DESIGN	//is this ok?
DESIGN	//TODO: perhaps this should be some other RuntimeException...
DESIGN	//TODO: make this a bit nicer
DESIGN	//Yuck:
DESIGN	//TODO: we should provide some way to get keys of collection of statistics to make it easier to retrieve from a GUI perspective
DESIGN	/**	 * @return collection removal	 * FIXME: even if isInverse="true"?	 */
DESIGN	// TODO : will need reference to session factory to fully complete HHH-1907
DESIGN	//TODO: currently keeps Getters and Setters (instead of PropertyAccessors) because of the way getGetter() and getSetter() are implemented currently; yuck!
DESIGN	//TODO: redesign how PropertyAccessors are acquired...
DESIGN	// todo : YUCK!!!
DESIGN	// TODO : YUCK!!!  fix after HHH-1907 is complete
DESIGN	//TODO: need to make the majority of this functionality into a top-level support class for custom impl support
DESIGN	//TODO: design new lifecycle for ProxyFactory
DESIGN	//TODO: would be nice to handle proxy classes elegantly!
DESIGN	// TODO: copy/paste from ManyToOneType
DESIGN	//TODO: should this be Session.instantiate(Persister, ...)?
DESIGN	//TODO: this is a bit arbitrary, expose a switch to the user?
DESIGN	//TODO: implement caching?! proxies?!
DESIGN	//TODO: is this right??
DESIGN	// is this really necessary?
DESIGN	//TODO: move these to a new JoinableType abstract class, //extended by EntityType and PersistentCollectionType:
DESIGN	// TODO: this is very suboptimal for some subclasses (namely components), // since it does not take advantage of two-phase-load
DESIGN	// worrying about proxies is perhaps a little bit of overkill here...
DESIGN	// NOTE VERY HACKISH WORKAROUND!! // TODO: Fix this so it will work for non-POJO entity mode
DESIGN	// TODO: Fix this so it will work for non-POJO entity mode
DESIGN	// We would probably refactor to have LogicParser (builds a tree of simple // expressions connected by and, or, not), ExpressionParser (translates // from OO terms like foo, foo.Bar, foo.Bar.Baz to SQL terms like // FOOS.ID, FOOS.BAR_ID, etc) and PathExpressionParser (which does much // the same thing it does now)
DESIGN	//TODO: this is a little inefficient, don't need to do a whole //      deep replaceElements() call
DESIGN	//workaround for WebLogic
DESIGN	//TODO: this dependency is kinda Bad
DESIGN	//ick!
DESIGN	// short cut check...
DESIGN	// todo : move to StringHelper?
DESIGN	//yukky! Don't you have subclasses for that! //TODO race conditions can happen here
DESIGN	//TODO: We probably should have a StatisticsNotPublishedException, to make it clean
DESIGN	// FIXME hack to work around fact that calling // Node added = root.addChild( fqn ); doesn't  // properly set the version on the node
DESIGN	// TODO: I considered validating the presence of the TS cache here, // but decided to defer unti getQueryCacheInstance() in case the  // cache is never actually used
DESIGN	//need to do that here rather than in the save event listener to let //the post insert events to have a id-filled entity when IDENTITY is used (EJB3)
DESIGN	//TODO: simply remove this override //      if we fix the above todos
DESIGN	// This, is used by SessionFactoryImpl to hand to the generated SessionImpl; // was the only reason I could see that we cannot just use null as // Settings.cacheProvider
DESIGN	// this is done here 'cos we might only know the type here (ugly!) // TODO: improve this a lot:
DESIGN	// todo : would love to have this work on a notification basis //    where the successful binding of an entity/subclass would //    emit a notification which the extendsQueue entries could //    react to...
DESIGN	// TODO : not sure the best way to handle this. // The non-performant way :
DESIGN	// would be better to use the element-type to determine // whether the old and the new are equal here; the problem being // we do not necessarily have access to the element type in all // cases
DESIGN	// This next bit is to allow for both unsaved-value="negative" // and for "older" behavior where version number did not get // seeded if it was already set in the object // TODO: shift it into unsaved-value strategy
DESIGN	// merges don't cascade to uninitialized collections //			//TODO: perhaps this does need to cascade after all....
DESIGN	// TODO: an alternative is to check if the owner has changed; if it hasn't then // return collection.getOwner()
DESIGN	//it is possible that the tree-walking in OuterJoinLoader can get to //an association defined by a subclass, in which case the property-ref //might refer to a property defined on a subclass of the current class //in this case, the table name is not known - this temporary solution  //assumes that the property-ref refers to a property of the subclass //table that the association belongs to (a reasonable guess) //TODO: fix this, add: OuterJoinLoadable.getSubclassPropertyTableName(String propertyName)
DESIGN	// this only works because collection entries are kept in a sequenced // map by persistence context (maybe we should do like entities and // keep a separate sequences set...) //TODO: calling entrySet on an IdentityMap is SLOW!!
DESIGN	// important, to account for newly saved entities in query // todo : some kind of check for new status...
DESIGN	// brand new collection //TODO: or an array!! we can't lock objects with arrays now??
DESIGN	//TODO: if object was an uninitialized proxy, this is inefficient, //      resulting in two SQL selects
DESIGN	//before cascade! //TODO: should this be Session.instantiate(Persister, ...)?
DESIGN	// TODO : absolutely no usages of this constructor form; can it go away?
DESIGN	// todo : need to find a clean way to handle the "event source" role // a seperate classs responsible for generating/dispatching events just duplicates most of the Session methods... // passing around seperate reto interceptor, factory, actionQueue, and persistentContext is not manageable...
DESIGN	// todo : remove
DESIGN	//aliasRefNode.resolve( false, false, aliasRefNode.getText() ); //TODO: is it kosher to do it here? //TODO: is it kosher to do it here?
DESIGN	// No explicit select expression; render the id and properties // projection lists for every persister in the from clause into // a single 'token node'. //TODO: the only reason we need this stuff now is collection filters, //      we should get rid of derived select clause completely!
DESIGN	// TODO : an optimization here would be to consider cascade deletes and not gen those delete statements; //      the difficulty is the ordering of the tables here vs the cascade attributes on the persisters -> //          the table info gotten here should really be self-contained (i.e., a class representation //          defining all the needed attributes), then we could then get an array of those
DESIGN	// TODO: get SQL rendering out of here, create an AST for the join expressions. // Use the SQL generator grammar to generate the SQL text for the index expression.
DESIGN	// TODO : this really needs to be delayed unitl after we definitively know all node types // where this is currently a problem is parameters for which where we cannot unequivocally // resolve an expected type
DESIGN	// TODO: Figure out a better way to get the FROM elements in a proper tree structure. // If this is not the destination of a many-to-many, add it as a child of the origin.
DESIGN	// work around that crazy issue where the tree contains // "empty" FromElements (no text); afaict, this is caused // by FromElementFactory.createCollectionJoin()
DESIGN	//TODO: this class does too many things! we need a different //kind of path expression parser for each of the diffferent //ways in which path expressions can occur
DESIGN	//real hacky... // used to count the nesting of parentheses
DESIGN	// TODO : would be really nice to cache the spec on the query-def so as to not have to re-calc the hash; // currently not doable though because of the resultset-ref stuff...
DESIGN	//for arrays, we should end the collection load before resolving //the entities, since the actual array instances are not instantiated //during loading //TODO: or we could do this polymorphically, and have two //      different operations implemented differently for arrays
DESIGN	// polymorphism not really handled completely correctly, // perhaps...well, actually its ok, assuming that the // entity name used in the lookup is the same as the // the one used here, which it will be
DESIGN	// TODO: should "record" how many properties we have reffered to - and if we  //       don't get'em'all we throw an exception! Way better than trial and error ;)
DESIGN	// VERY IMPORTANT!!!! - This class needs to be free of any static references // to any CGLIB or Javassist classes.  Otherwise, users will always need both // on their classpaths no matter which (if either) they use. // // Another option here would be to remove the Hibernate.isPropertyInitialized() // method and have the users go through the SessionFactory to get this information.
DESIGN	// TODO: is it really neceassry to provide Configuration to CollectionPersisters ? Should it not be enough with associated class ? // or why does EntityPersister's not get access to configuration ? // // The only reason I could see that Configuration gets passed to collection persisters // is so that they can look up the dom4j node name of the entity element in case // no explicit node name was applied at the collection element level.  Are you kidding me? // Trivial to fix then.  Just store and expose the node name on the entity persister // (which the collection persister looks up anyway via other means...).
DESIGN	//for backward compatibility, allow a set with no not-null  //element columns, using all columns in the row locater SQL //TODO: create an implicit not null constraint on all cols?
DESIGN	//SPACES //TODO: i'm not sure, but perhaps we should exclude //      abstract denormalized tables?
DESIGN	//workaround, for backward compatibility of sets with no //not-null columns, assume all columns are used in the //row locator SQL
DESIGN	//note that this method could easily be moved up to BasicEntityPersister, //if we ever needed to reuse it from other subclasses
DESIGN	//index += getPropertyColumnSpan( i ); //TODO:  this is kinda slow...
DESIGN	//TODO: need some caching scheme? really comes down to decision  //      regarding amount of state (if any) kept on PropertyAccessors
DESIGN	// TODO: here is why we need to make bytecode provider global :( // TODO : again, fix this after HHH-1907 is complete
DESIGN	//TODO: Yuck! This is not quite good enough, it's a quick //hack around the problem of having a to-one association //that refers to an embedded component:
DESIGN	// for DOM4J "collections" only // TODO: it would be better if this was done at the higher level by Printer
DESIGN	// would be great to move all this below here into another method that could also be used // from the new scrolling stuff. // // Would need to change the way the max-row stuff is handled (i.e. behind an interface) so // that I could do the control breaking at the means to know when to stop
DESIGN	//TODO: can we *always* use the "null property" approach for everything?
DESIGN	//polymorphism comment above
DESIGN	// some messy, complex stuff here, since createCriteria() can take an // aliased path, or a path rooted at the creating criteria instance
DESIGN	//TODO: really bad, evil hack to fix!!!
DESIGN	// ugly hack for cases like "elements(foo.bar.collection)" // (multi-part path expression ending in elements or indices)
DESIGN	// try block is a hack around fact that currently tuplizers are not // given the opportunity to resolve a subclass entity name.  this // allows the (we assume custom) interceptor the ability to // influence this decision if we were not able to based on the // given entityName
DESIGN	/////////////////////////////////////////////////////////////////////// // HACK ALERT !!!!!!!!!!!!!!!!!!!!!!!!!!!! // Attempt to work around "ghost" ImpliedFromElements that occasionally // show up between the actual things being joined.  This consistently // occurs from index nodes (at least against many-to-many).  Not sure // if there are other conditions // // Essentially, look-ahead to the next FromElement that actually // writes something to the SQL
DESIGN	//init the table here instead of earlier, so that we can get a quoted table name //TODO: would it be better to simply pass the qualified table name, instead of //      splitting it up into schema/catalog/table names
DESIGN	// TODO : would be great to have a Mapping#hasNonIdentifierPropertyNamedId method // I don't believe that Mapping#getReferencedPropertyType accounts for the identifier property; so // if it returns for a property named 'id', then we should have a non-id field named id
DESIGN	//TODO: is this really necessary????
DESIGN	//TODO: ideally we need the construction of PropertyAccessor to take the following: //      1) EntityMode //      2) EntityMode-specific data (i.e., the classname for pojo entities) //      3) Property-specific data based on the EntityMode (i.e., property-name or dom4j-node-name) // The easiest way, with the introduction of the new runtime-metamodel classes, would be the // the following predicates: //      1) PropertyAccessorFactory.getPropertyAccessor() takes references to both a //          org.hibernate.metadata.EntityModeMetadata and org.hibernate.metadata.Property //      2) What is now termed a "PropertyAccessor" stores any values needed from those two //          pieces of information //      3) Code can then simply call PropertyAccess.getGetter() with no parameters; likewise with //          PropertyAccessor.getSetter()
DESIGN	//TODO: this is temporary in that the end result will probably not take a Property reference per-se.
DESIGN	// todo : this eventually needs to be removed
DESIGN	//TODO: make this a bit nicer
DESIGN	// todo : we can remove this once the deprecated ctor can be made private...
DESIGN	// todo : we can remove this once the deprecated ctor can be made private...
DESIGN	// todo : we can remove this once the deprecated ctor can be made private...
DESIGN	// todo : we can remove this once the deprecated ctor can be made private...
DESIGN	// todo : we can remove this once the deprecated ctor can be made private...
DESIGN	// todo : we can remove this once the deprecated ctor can be made private...
DESIGN	// todo : we can remove this once the deprecated ctor can be made private...
DESIGN	// todo : we can remove this once the deprecated ctor can be made private...
DESIGN	/**     * FIXME Per the RegionFactory class Javadoc, this constructor version     * should not be necessary.     *      * @param props The configuration properties     */
DESIGN	/**     * FIXME Per the RegionFactory class Javadoc, this constructor version     * should not be necessary.     *      * @param props The configuration properties     */
DESIGN	/**     * FIXME Per the RegionFactory class Javadoc, this constructor version     * should not be necessary.     *      * @param props The configuration properties     */
DESIGN	// TODO : probably better to calculate these and pass them in, as it'll be more performant
WITHOUT_CLASSIFICATION	// set constants now that they're initialized
WITHOUT_CLASSIFICATION	// line 335
WITHOUT_CLASSIFICATION	//yyLen 542
WITHOUT_CLASSIFICATION	//yyLen 542
WITHOUT_CLASSIFICATION	//yyDefRed 945
WITHOUT_CLASSIFICATION	//yyDefRed 945
WITHOUT_CLASSIFICATION	//yyDgoto 152
WITHOUT_CLASSIFICATION	// Figure end-char.  '\0' is special to indicate begin=end and that no nesting?
WITHOUT_CLASSIFICATION	// line 362
WITHOUT_CLASSIFICATION	// line 372
WITHOUT_CLASSIFICATION	//yySindex 945
WITHOUT_CLASSIFICATION	//yySindex 945
WITHOUT_CLASSIFICATION	// line 391
WITHOUT_CLASSIFICATION	//yyRindex 945
WITHOUT_CLASSIFICATION	//yyRindex 945
WITHOUT_CLASSIFICATION	/* ^D */
WITHOUT_CLASSIFICATION	/* ^Z */
WITHOUT_CLASSIFICATION	//yyLen 496
WITHOUT_CLASSIFICATION	//yyLen 496
WITHOUT_CLASSIFICATION	//yyLen 496
WITHOUT_CLASSIFICATION	//yyLen 496
WITHOUT_CLASSIFICATION	//yyLen 496
WITHOUT_CLASSIFICATION	//yyLen 496
WITHOUT_CLASSIFICATION	//yyLen 496
WITHOUT_CLASSIFICATION	//yyDefRed 889
WITHOUT_CLASSIFICATION	//yyDefRed 889
WITHOUT_CLASSIFICATION	//yyDefRed 889
WITHOUT_CLASSIFICATION	//yyDefRed 889
WITHOUT_CLASSIFICATION	//yyDefRed 889
WITHOUT_CLASSIFICATION	//yyDefRed 889
WITHOUT_CLASSIFICATION	//yyDefRed 889
WITHOUT_CLASSIFICATION	//yyDgoto 136
WITHOUT_CLASSIFICATION	//yyDgoto 136
WITHOUT_CLASSIFICATION	//yyDgoto 136
WITHOUT_CLASSIFICATION	//yyDgoto 136
WITHOUT_CLASSIFICATION	//yyDgoto 136
WITHOUT_CLASSIFICATION	//yyDgoto 136
WITHOUT_CLASSIFICATION	//yySindex 889
WITHOUT_CLASSIFICATION	//yySindex 889
WITHOUT_CLASSIFICATION	//yySindex 889
WITHOUT_CLASSIFICATION	//yySindex 889
WITHOUT_CLASSIFICATION	//yySindex 889
WITHOUT_CLASSIFICATION	//yySindex 889
WITHOUT_CLASSIFICATION	//yyRindex 889
WITHOUT_CLASSIFICATION	//yyRindex 889
WITHOUT_CLASSIFICATION	//yyRindex 889
WITHOUT_CLASSIFICATION	//yyRindex 889
WITHOUT_CLASSIFICATION	//yyRindex 889
WITHOUT_CLASSIFICATION	//yyRindex 889
WITHOUT_CLASSIFICATION	//yyRindex 889
WITHOUT_CLASSIFICATION	//yyGindex 136
WITHOUT_CLASSIFICATION	//yyGindex 136
WITHOUT_CLASSIFICATION	//yyGindex 136
WITHOUT_CLASSIFICATION	//yyGindex 136
WITHOUT_CLASSIFICATION	//Do nothing
WITHOUT_CLASSIFICATION	//Do nothing
WITHOUT_CLASSIFICATION	// switch
WITHOUT_CLASSIFICATION	// switch
WITHOUT_CLASSIFICATION	// switch
WITHOUT_CLASSIFICATION	// switch
WITHOUT_CLASSIFICATION	// switch
WITHOUT_CLASSIFICATION	// switch
WITHOUT_CLASSIFICATION	// switch
WITHOUT_CLASSIFICATION	// switch
WITHOUT_CLASSIFICATION	// switch
WITHOUT_CLASSIFICATION	// switch
WITHOUT_CLASSIFICATION	// switch
WITHOUT_CLASSIFICATION	// switch
WITHOUT_CLASSIFICATION	// switch
WITHOUT_CLASSIFICATION	// switch
WITHOUT_CLASSIFICATION	// switch
WITHOUT_CLASSIFICATION	// switch
WITHOUT_CLASSIFICATION	// switch
WITHOUT_CLASSIFICATION	// switch
WITHOUT_CLASSIFICATION	// switch
WITHOUT_CLASSIFICATION	// switch
WITHOUT_CLASSIFICATION	// switch
WITHOUT_CLASSIFICATION	// switch
WITHOUT_CLASSIFICATION	// switch
WITHOUT_CLASSIFICATION	// switch
WITHOUT_CLASSIFICATION	// switch
WITHOUT_CLASSIFICATION	// switch
WITHOUT_CLASSIFICATION	// switch
WITHOUT_CLASSIFICATION	// switch
WITHOUT_CLASSIFICATION	// switch
WITHOUT_CLASSIFICATION	// switch
WITHOUT_CLASSIFICATION	// switch
WITHOUT_CLASSIFICATION	// switch
WITHOUT_CLASSIFICATION	// switch
WITHOUT_CLASSIFICATION	// switch
WITHOUT_CLASSIFICATION	// switch
WITHOUT_CLASSIFICATION	// switch
WITHOUT_CLASSIFICATION	// return result
WITHOUT_CLASSIFICATION	// name
WITHOUT_CLASSIFICATION	// Define System.getProperties() in ENV_JAVA
WITHOUT_CLASSIFICATION	// Accessor methods.
WITHOUT_CLASSIFICATION	// MRI behavior
WITHOUT_CLASSIFICATION	// MRI behavior
WITHOUT_CLASSIFICATION	// MRI behavior
WITHOUT_CLASSIFICATION	// MRI behavior
WITHOUT_CLASSIFICATION	// call getpwent to fail early if unsupported
WITHOUT_CLASSIFICATION	// fall back on env entry for USER
WITHOUT_CLASSIFICATION	// try to read grent to fail fast
WITHOUT_CLASSIFICATION	// define ARGV and $* for this runtime
WITHOUT_CLASSIFICATION	// Version information:
WITHOUT_CLASSIFICATION	// after defn of $stderr as the call may produce warnings
WITHOUT_CLASSIFICATION	// ARGF, $< object
WITHOUT_CLASSIFICATION	// if the environment variables can't be obtained, define an empty ENV
WITHOUT_CLASSIFICATION	// On platforms without a c-library accessable through JNA, getpid will return hashCode  // as $$ used to. Using $$ to kill processes could take down many runtimes, but by basing // $$ on getpid() where available, we have the same semantics as MRI.
WITHOUT_CLASSIFICATION	//$@ returns nil if $!.backtrace is not an array
WITHOUT_CLASSIFICATION	// include its parent (and in turn that module's parents)
WITHOUT_CLASSIFICATION	// MRI behavior: just plain '//' or '\\\\' are considered illegal on Windows.
WITHOUT_CLASSIFICATION	// this _is_ legal (when removing an undef)
WITHOUT_CLASSIFICATION	// What we passed to the constructor for method 'path'
WITHOUT_CLASSIFICATION	// ----- Ruby Class Methods ----------------------------------------------------
WITHOUT_CLASSIFICATION	// // CONSTANT TABLE METHODS - pass to delegate //
WITHOUT_CLASSIFICATION	// We get canonical path to try and flatten the path out. // a dir '/subdir/..' should return as '/' // cnutter: Do we want to flatten path out?
WITHOUT_CLASSIFICATION	// MRI behavior
WITHOUT_CLASSIFICATION	// ----- Ruby Instance Methods -------------------------------------------------
WITHOUT_CLASSIFICATION	// Make sure any read()s after close fail.
WITHOUT_CLASSIFICATION	// ----- Helper Methods --------------------------------------------------------
WITHOUT_CLASSIFICATION	// try to use POSIX for this first
WITHOUT_CLASSIFICATION	// otherwise fall back on the old way
WITHOUT_CLASSIFICATION	// Proc class
WITHOUT_CLASSIFICATION	// No passed in block, lets check next outer frame for one ('Proc.new')
WITHOUT_CLASSIFICATION	// modify the block with a new backref/lastline-grabbing scope
WITHOUT_CLASSIFICATION	// for future compatibility as constructors move toward not accepting metaclass?
WITHOUT_CLASSIFICATION	//        case RUBY_HYBRID: //            backtrace = ThreadContext.createRubyHybridBacktrace(getRuntime(), backtraceFrames, javaStackTrace, getRuntime().getDebug().isTrue()); //            break;
WITHOUT_CLASSIFICATION	// This looks wrong, but it's the way MRI does it.
WITHOUT_CLASSIFICATION	// rb_exc_new3
WITHOUT_CLASSIFICATION	// NOTE: The indicies here match exactly the signal values; do not reorder
WITHOUT_CLASSIFICATION	//registerThreadDumpSignalHandler(runtime);
WITHOUT_CLASSIFICATION	// IOT is also 6
WITHOUT_CLASSIFICATION	// CLD is also 20
WITHOUT_CLASSIFICATION	// RubySignal
WITHOUT_CLASSIFICATION	// ZStream actually *isn't* allocatable
WITHOUT_CLASSIFICATION	// MRI behavior, enforced by tests
WITHOUT_CLASSIFICATION	// it's safe since adler.update doesn't modify the array
WITHOUT_CLASSIFICATION	// MRI behavior: in finished mode, we work as pass-through
WITHOUT_CLASSIFICATION	// SYNC_FLUSH
WITHOUT_CLASSIFICATION	// By default, NO_FLUSH
WITHOUT_CLASSIFICATION	//io.finish();
WITHOUT_CLASSIFICATION	// should invoke seek on realIo
WITHOUT_CLASSIFICATION	// hmm...
WITHOUT_CLASSIFICATION	// Called before any write to make sure the // header is always written before the first bytes
WITHOUT_CLASSIFICATION	// For JDK 1.4 we can use "cal.getTimeInMillis()"
WITHOUT_CLASSIFICATION	// We can just use dt, since it is immutable
WITHOUT_CLASSIFICATION	// float number of seconds
WITHOUT_CLASSIFICATION	// modified to match how hash is calculated in 1.8.2
WITHOUT_CLASSIFICATION	// dump usec, not msec
WITHOUT_CLASSIFICATION	/* Time class methods */
WITHOUT_CLASSIFICATION	// marsaling dumps usec, not msec
WITHOUT_CLASSIFICATION	// MRI accepts additional wday argument which appears to be ignored.
WITHOUT_CLASSIFICATION	// set up with min values and then add to allow rolling over
WITHOUT_CLASSIFICATION	// the instant at which we will ask dtz what the difference between DST and // standard time is
WITHOUT_CLASSIFICATION	// if we might be moving this time from !DST -> DST, the offset is assumed // to be the same as it was just before we last moved from DST -> !DST
WITHOUT_CLASSIFICATION	// Ignores usec if 8 args (for compatibility with parsedate) or if not supplied.
WITHOUT_CLASSIFICATION	/*  ================     *  Utility Methods     *  ================      */
WITHOUT_CLASSIFICATION	/* If the value will fit in a Fixnum, return one of those. */
WITHOUT_CLASSIFICATION	/*  ================     *  Instance Methods     *  ================      */
WITHOUT_CLASSIFICATION	// MRI issuses warning here on (RBIGNUM(x)->len * SIZEOF_BDIGITS * yy > 1024*1024)
WITHOUT_CLASSIFICATION	// num2int is also implemented
WITHOUT_CLASSIFICATION	// num2int is also implemented
WITHOUT_CLASSIFICATION	// no bignorm here needed
WITHOUT_CLASSIFICATION	// wow, the only time we can use the java protocol ;)
WITHOUT_CLASSIFICATION	// Pad with a 0
WITHOUT_CLASSIFICATION	// BigInteger required a sign byte in incoming array
WITHOUT_CLASSIFICATION	// This should only be called by this and RubyFile. // It allows this object to be created without a IOHandler.
WITHOUT_CLASSIFICATION	// We do this b/c make_tmpname might be overridden
WITHOUT_CLASSIFICATION	// ???
WITHOUT_CLASSIFICATION	// PID
WITHOUT_CLASSIFICATION	/*  ================     *  Instance Methods     *  ================      */
WITHOUT_CLASSIFICATION	// elements and trailing nils
WITHOUT_CLASSIFICATION	// Dir::tmpdir
WITHOUT_CLASSIFICATION	// volatile to ensure that initial nil-fill is visible to other threads
WITHOUT_CLASSIFICATION	/* Ruby arrays default to holding 16 elements, so we create an         * ArrayList of the same size if we're not told otherwise         */
WITHOUT_CLASSIFICATION	/* rb_ary_new2     * just allocates the internal array     */
WITHOUT_CLASSIFICATION	/*      * plain internal array assignment     */
WITHOUT_CLASSIFICATION	/*      * plain internal array assignment     */
WITHOUT_CLASSIFICATION	/*      * plain internal array assignment     */
WITHOUT_CLASSIFICATION	/* Array constructors taking the MetaClass to fulfil MRI Array subclass behaviour     *      */
WITHOUT_CLASSIFICATION	/* NEWOBJ and OBJSETUP equivalent     * fastest one, for shared arrays, optional objectspace     */
WITHOUT_CLASSIFICATION	// Create global constants and variables
WITHOUT_CLASSIFICATION	// not reached
WITHOUT_CLASSIFICATION	// not reached
WITHOUT_CLASSIFICATION	// Windows does not support these functions, so we won't even try // This also matches Ruby behavior for JRUBY-2353.
WITHOUT_CLASSIFICATION	// There are two different popular TZ formats: legacy (AST+3:00:00, GMT-3), and // newer one (US/Pacific, America/Los_Angeles). This pattern is to detect // the legacy TZ format in order to convert it to the newer format // understood by Java API.
WITHOUT_CLASSIFICATION	// not reached
WITHOUT_CLASSIFICATION	// 1.9 seems to just do inspect for to_s now
WITHOUT_CLASSIFICATION	// possibly should not in object space
WITHOUT_CLASSIFICATION	// only fill if there actually will remain trailing storage
WITHOUT_CLASSIFICATION	// rb_ary_new4
WITHOUT_CLASSIFICATION	// rb_ary_new4
WITHOUT_CLASSIFICATION	// from DUP_SETUP
WITHOUT_CLASSIFICATION	// If already inspecting, there is no need to register/unregister again.
WITHOUT_CLASSIFICATION	// See [ruby-core:17483]
WITHOUT_CLASSIFICATION	// See [ruby-core:17483]
WITHOUT_CLASSIFICATION	// Satisfy java.util.List interface (for Java integration)
WITHOUT_CLASSIFICATION	// pre-set for the sake of terminating recursive calls
WITHOUT_CLASSIFICATION	/* root fiber */
WITHOUT_CLASSIFICATION	// GMT+00:00 --> Etc/GMT, see "MRI behavior" // comment below.
WITHOUT_CLASSIFICATION	//  See http://www.gzip.org/zlib/rfc-gzip.html
WITHOUT_CLASSIFICATION	// extras flag
WITHOUT_CLASSIFICATION	// Zlib::NO_FLUSH
WITHOUT_CLASSIFICATION	// ...nothing
WITHOUT_CLASSIFICATION	// utility method
WITHOUT_CLASSIFICATION	// Prepare LoadService and load path
WITHOUT_CLASSIFICATION	/*  ================     *  Instance Methods     *  ================      */
WITHOUT_CLASSIFICATION	// flags // 4 bytes of modified time
WITHOUT_CLASSIFICATION	// range_each_func(range, step_i, b, e, args);
WITHOUT_CLASSIFICATION	// 1.8 "include?"
WITHOUT_CLASSIFICATION	// any BigInteger is bigger than Fixnum and we don't have FIXABLE
WITHOUT_CLASSIFICATION	// beneath are rewritten coercions that reflect MRI logic, the aboves are used only by RubyBigDecimal
WITHOUT_CLASSIFICATION	// MRI does it!
WITHOUT_CLASSIFICATION	// won't hurt fixnums
WITHOUT_CLASSIFICATION	// it won't hurt fixnums
WITHOUT_CLASSIFICATION	// RubyClassPathVariable
WITHOUT_CLASSIFICATION	// not to be confused with RubyObject's flags
WITHOUT_CLASSIFICATION	// second argument is allowed, but ignored (MRI)
WITHOUT_CLASSIFICATION	// we are presumably running a precompiled class; load directly
WITHOUT_CLASSIFICATION	// terminate; tryCompile will have printed out an error and we're done
WITHOUT_CLASSIFICATION	// Used for the 'redo' command
WITHOUT_CLASSIFICATION	// do nothing, this iteration restarts
WITHOUT_CLASSIFICATION	// recheck condition
WITHOUT_CLASSIFICATION	// Get the main threadcontext (gets constructed for us)
WITHOUT_CLASSIFICATION	// Construct key services
WITHOUT_CLASSIFICATION	// initialize the root of the class hierarchy completely
WITHOUT_CLASSIFICATION	// Construct the top-level execution frame and scope for the main thread
WITHOUT_CLASSIFICATION	// Initialize all the core classes
WITHOUT_CLASSIFICATION	// Initialize the "dummy" class used as a marker
WITHOUT_CLASSIFICATION	// Initialize Kernel and include into Object
WITHOUT_CLASSIFICATION	// Object is ready, create top self
WITHOUT_CLASSIFICATION	// Pre-create all the core classes potentially referenced during startup
WITHOUT_CLASSIFICATION	// Math depends on all numeric types
WITHOUT_CLASSIFICATION	// depends on IO, FileTest
WITHOUT_CLASSIFICATION	// initialize builtin libraries
WITHOUT_CLASSIFICATION	// Require in all libraries specified on command line
WITHOUT_CLASSIFICATION	// Bootstrap the top of the hierarchy
WITHOUT_CLASSIFICATION	// we try to get the classloader that loaded JRuby, falling back on System
WITHOUT_CLASSIFICATION	// determine spacing
WITHOUT_CLASSIFICATION	/* should alter global state */
WITHOUT_CLASSIFICATION	// For JSR 223 support: see http://scripting.java.net/
WITHOUT_CLASSIFICATION	// use this for JRuby-internal finalizers
WITHOUT_CLASSIFICATION	// this method is for finalizers registered via ObjectSpace
WITHOUT_CLASSIFICATION	// new factory methods ------------------------------------------------------------------------
WITHOUT_CLASSIFICATION	//        assert internedName == internedName.intern() : internedName + " is not interned";
WITHOUT_CLASSIFICATION	// Equivalent of Data_Wrap_Struct
WITHOUT_CLASSIFICATION	// default: don't retain
WITHOUT_CLASSIFICATION	// ChannelDescriptors opened by sysopen are cached to avoid collection
WITHOUT_CLASSIFICATION	// Default objects
WITHOUT_CLASSIFICATION	// record separator var, to speed up io ops that use it
WITHOUT_CLASSIFICATION	// former java.lang.System concepts now internalized for MVM
WITHOUT_CLASSIFICATION	// Java support
WITHOUT_CLASSIFICATION	// Parser stats
WITHOUT_CLASSIFICATION	// Compilation
WITHOUT_CLASSIFICATION	// can't read non-standard properties
WITHOUT_CLASSIFICATION	// can't create custom classloaders
WITHOUT_CLASSIFICATION	// mutex that controls modifications of user-defined finalizers
WITHOUT_CLASSIFICATION	// mutex that controls modifications of internal finalizers
WITHOUT_CLASSIFICATION	// A thread pool to use for executing this runtime's Ruby threads
WITHOUT_CLASSIFICATION	// A global object lock for class hierarchy mutations
WITHOUT_CLASSIFICATION	// initial spaces // spaces before "at"
WITHOUT_CLASSIFICATION	// event name // filename // line numbers should be 1-based
WITHOUT_CLASSIFICATION	// The method is intentionally not public, since it typically should // not be used outside of the core.
WITHOUT_CLASSIFICATION	// Note: this field and the following static initializer // must be located be in this order!
WITHOUT_CLASSIFICATION	// Contains a list of all blocks (as Procs) that should be called when // the runtime environment exits.
WITHOUT_CLASSIFICATION	// quoted-printable
WITHOUT_CLASSIFICATION	// default options
WITHOUT_CLASSIFICATION	// iso-2022-jp
WITHOUT_CLASSIFICATION	// iso-2022-jp
WITHOUT_CLASSIFICATION	// Shift_JIS
WITHOUT_CLASSIFICATION	// Shift_JIS
WITHOUT_CLASSIFICATION	// EUC-JP
WITHOUT_CLASSIFICATION	// EUC-JP
WITHOUT_CLASSIFICATION	// UTF-8
WITHOUT_CLASSIFICATION	// UTF-8
WITHOUT_CLASSIFICATION	// long name option
WITHOUT_CLASSIFICATION	// conversion
WITHOUT_CLASSIFICATION	/*  ================     *  Singleton Methods     *  ================      */
WITHOUT_CLASSIFICATION	// string doesn't share any resources
WITHOUT_CLASSIFICATION	// string has it's own ByteList, but it's pointing to a shared buffer (byte[])
WITHOUT_CLASSIFICATION	// string doesn't have it's own ByteList (values)
WITHOUT_CLASSIFICATION	// ENC_CODERANGE_ASCIIONLY
WITHOUT_CLASSIFICATION	// rb_enc_str_asciionly_p
WITHOUT_CLASSIFICATION	// rb_enc_str_coderange
WITHOUT_CLASSIFICATION	// rb_str_hash_cmp
WITHOUT_CLASSIFICATION	// Deprecated String construction routines
WITHOUT_CLASSIFICATION	// String construction routines by NOT byte[] buffer and NOT making the target String shared 
WITHOUT_CLASSIFICATION	/* rb_str_subseq */
WITHOUT_CLASSIFICATION	// no need to assign encoding, same bytelist shared
WITHOUT_CLASSIFICATION	// if len == 0 then shared empty
WITHOUT_CLASSIFICATION	/* rb_str_cmp_m */
WITHOUT_CLASSIFICATION	// we limit to int because ByteBuffer can only allocate int sizes
WITHOUT_CLASSIFICATION	// // rb_str_buf_append
WITHOUT_CLASSIFICATION	// encoding doesn't have to be copied.
WITHOUT_CLASSIFICATION	// this really needs to be inlined here
WITHOUT_CLASSIFICATION	// must not reallocate
WITHOUT_CLASSIFICATION	// Illegal combination
WITHOUT_CLASSIFICATION	// use 1.8 impl
WITHOUT_CLASSIFICATION	/* RubyString aka rb_string_value */
WITHOUT_CLASSIFICATION	/* bang: true, no match, no substitution */
WITHOUT_CLASSIFICATION	// out of byte range // there will be no match for sure
WITHOUT_CLASSIFICATION	/* len + margin */
WITHOUT_CLASSIFICATION	// block given
WITHOUT_CLASSIFICATION	// block given
WITHOUT_CLASSIFICATION	/* copy pre-match substr */
WITHOUT_CLASSIFICATION	// string given
WITHOUT_CLASSIFICATION	// hash given
WITHOUT_CLASSIFICATION	// This represents left most digit in a set of incremented // values?  Therefore leftmost numeric must be '1' and not '0' // 999 -> 1000, not 999 -> 0000.  whereas chars should be // zzz -> aaaa and non-alnum byte values should be "\377" -> "\001\000"
WITHOUT_CLASSIFICATION	/* substring longer than string */
WITHOUT_CLASSIFICATION	/* rb_str_substr */
WITHOUT_CLASSIFICATION	// nothing
WITHOUT_CLASSIFICATION	// nothing
WITHOUT_CLASSIFICATION	/* rb_str_splice */
WITHOUT_CLASSIFICATION	// TODO: keep cr // TODO: rb_str_splice_0
WITHOUT_CLASSIFICATION	// keep cr ?
WITHOUT_CLASSIFICATION	// keep cr ?
WITHOUT_CLASSIFICATION	/* wrapped to \0...\0.  search next valid char. */
WITHOUT_CLASSIFICATION	// only this case affects backrefs 
WITHOUT_CLASSIFICATION	// only this case affects backrefs 
WITHOUT_CLASSIFICATION	// modified
WITHOUT_CLASSIFICATION	// modified
WITHOUT_CLASSIFICATION	// 1.8
WITHOUT_CLASSIFICATION	// 1.8
WITHOUT_CLASSIFICATION	// QTRUE
WITHOUT_CLASSIFICATION	/* retrieve last replacer */
WITHOUT_CLASSIFICATION	// Check the length every iteration, since // the block can modify this string.
WITHOUT_CLASSIFICATION	// long size * bits in byte
WITHOUT_CLASSIFICATION	// from encoding, special-casing ASCII* to ASCII
WITHOUT_CLASSIFICATION	// to encoding, same special-casing
WITHOUT_CLASSIFICATION	// create a lightweight thunk
WITHOUT_CLASSIFICATION	// decode from "from" and encode to "to"
WITHOUT_CLASSIFICATION	// create a lightweight thunk
WITHOUT_CLASSIFICATION	//Kernel is the only Module that doesn't need an implementor
WITHOUT_CLASSIFICATION	// no binding given, use (eval)
WITHOUT_CLASSIFICATION	// interned, OK for "fast" methods
WITHOUT_CLASSIFICATION	// File to be loaded by autoload has already been or is being loaded.
WITHOUT_CLASSIFICATION	// rb_cstr_to_dbl case
WITHOUT_CLASSIFICATION	// We break if we know this sleep was explicitly woken up/interrupted
WITHOUT_CLASSIFICATION	// exec process, create IO with process
WITHOUT_CLASSIFICATION	// Zero sleeps forever
WITHOUT_CLASSIFICATION	// file given, use it and force it into binding
WITHOUT_CLASSIFICATION	// Explicit zero in MRI returns immediately
WITHOUT_CLASSIFICATION	// Spurious wakeup-loop
WITHOUT_CLASSIFICATION	// adjusts paths started with '/' or '\\', on windows.
WITHOUT_CLASSIFICATION	// file not given
WITHOUT_CLASSIFICATION	// string to eval
WITHOUT_CLASSIFICATION	// binding given, use binding's file
WITHOUT_CLASSIFICATION	// ?g  | boolean | True if file1 has the \CF{setgid} bit
WITHOUT_CLASSIFICATION	// bomb out, it's not a binding or a proc
WITHOUT_CLASSIFICATION	// Ordering of array traversal not important, just intuitive
WITHOUT_CLASSIFICATION	//Catch active, throw for catch to handle
WITHOUT_CLASSIFICATION	// No catch active for this throw
WITHOUT_CLASSIFICATION	// without full tracing, many events will not fire
WITHOUT_CLASSIFICATION	// ignore if it's not a global var
WITHOUT_CLASSIFICATION	// MRI behavior: use first byte of string value if len > 0
WITHOUT_CLASSIFICATION	// MRI behavior: now check arg count
WITHOUT_CLASSIFICATION	// ?A  | Time    | Last access time for file1
WITHOUT_CLASSIFICATION	// ?b  | boolean | True if file1 is a block device
WITHOUT_CLASSIFICATION	// ?c  | boolean | True if file1 is a character device
WITHOUT_CLASSIFICATION	// ?C  | Time    | Last change time for file1
WITHOUT_CLASSIFICATION	// ?d  | boolean | True if file1 exists and is a directory
WITHOUT_CLASSIFICATION	// ?e  | boolean | True if file1 exists
WITHOUT_CLASSIFICATION	// ?f  | boolean | True if file1 exists and is a regular file
WITHOUT_CLASSIFICATION	// ?G  | boolean | True if file1 exists and has a group ownership equal to the caller's group
WITHOUT_CLASSIFICATION	// ?k  | boolean | True if file1 exists and has the sticky bit set
WITHOUT_CLASSIFICATION	// ?M  | Time    | Last modification time for file1
WITHOUT_CLASSIFICATION	// ?o  | boolean | True if file1 exists and is owned by the caller's effective uid
WITHOUT_CLASSIFICATION	// ?O  | boolean | True if file1 exists and is owned by the caller's real uid 
WITHOUT_CLASSIFICATION	// ?p  | boolean | True if file1 exists and is a fifo
WITHOUT_CLASSIFICATION	// ?r  | boolean | True if file1 is readable by the effective uid/gid of the caller
WITHOUT_CLASSIFICATION	// ?s  | int/nil | If file1 has nonzero size, return the size, otherwise nil
WITHOUT_CLASSIFICATION	// ?S  | boolean | True if file1 exists and is a socket
WITHOUT_CLASSIFICATION	// ?u  | boolean | True if file1 has the setuid bit set
WITHOUT_CLASSIFICATION	// ?x  | boolean | True if file1 exists and is executable by the effective uid/gid
WITHOUT_CLASSIFICATION	// ?X  | boolean | True if file1 exists and is executable by the real uid/gid
WITHOUT_CLASSIFICATION	// ?z  | boolean | True if file1 exists and has a zero length
WITHOUT_CLASSIFICATION	// ?=  | boolean | True if the modification times of file1 and file2 are equal
WITHOUT_CLASSIFICATION	// ?<  | boolean | True if the modification time of file1 is prior to that of file2
WITHOUT_CLASSIFICATION	// ?>  | boolean | True if the modification time of file1 is after that of file2
WITHOUT_CLASSIFICATION	// ?-  | boolean | True if file1 and file2 are identical
WITHOUT_CLASSIFICATION	// @JRubyMethod(name = "new", meta = true, visibility = Visibility.PRIVATE)
WITHOUT_CLASSIFICATION	// Error info is per-thread
WITHOUT_CLASSIFICATION	// init errorInfo to nil
WITHOUT_CLASSIFICATION	// if we're already aborting, we can receive no further mail
WITHOUT_CLASSIFICATION	// If this thread is sleeping or stopped, wake it
WITHOUT_CLASSIFICATION	// new interrupt, to hopefully wake it out of any blocking IO
WITHOUT_CLASSIFICATION	// set to default thread group
WITHOUT_CLASSIFICATION	// set to default thread group
WITHOUT_CLASSIFICATION	// JRUBY-2380, associate future early so it shows up in Thread.list right away, in case it doesn't run immediately
WITHOUT_CLASSIFICATION	// JRUBY-2380, associate thread early so it shows up in Thread.list right away, in case it doesn't run immediately
WITHOUT_CLASSIFICATION	// for Thread::start, which does not call the subclass's initialize
WITHOUT_CLASSIFICATION	// JRUBY-3568, inherit threadgroup or use default
WITHOUT_CLASSIFICATION	// MRI behavior: value given in seconds; converted to Float; less // than or equal to zero returns immediately; returns nil
WITHOUT_CLASSIFICATION	// If the target thread is sleeping or stopped, wake it
WITHOUT_CLASSIFICATION	// We need this loop in order to be able to "unblock" the // join call without actually calling interrupt.
WITHOUT_CLASSIFICATION	// attempt to decriticalize all if we're the critical thread
WITHOUT_CLASSIFICATION	// not valid for "dead" state
WITHOUT_CLASSIFICATION	// If the killee thread is the same as the killer thread, just die
WITHOUT_CLASSIFICATION	// check for thread events, in case we've been woken up to die
WITHOUT_CLASSIFICATION	// check for thread events, in case we've been woken up to die
WITHOUT_CLASSIFICATION	// ignore; I don't like doing it, but it seems like we // really just need to make all channels non-blocking by // default and use select when implementing blocking ops, // so if this remains set non-blocking, perhaps it's not // such a big deal...
WITHOUT_CLASSIFICATION	// can't select, just have to do a blocking call
WITHOUT_CLASSIFICATION	// compensate for missing slash after drive letter on windows
WITHOUT_CLASSIFICATION	// Create Constants class
WITHOUT_CLASSIFICATION	// Create constants for open flags
WITHOUT_CLASSIFICATION	// Strip off the O_ prefix, so they become File::RDONLY, and so on
WITHOUT_CLASSIFICATION	// Create constants for flock
WITHOUT_CLASSIFICATION	// File::Constants module is included in IO.
WITHOUT_CLASSIFICATION	// Make sure any existing lock is released before we try and close the file
WITHOUT_CLASSIFICATION	// null channel always succeeds for all locking operations
WITHOUT_CLASSIFICATION	// Paths which end in "/" or "\\" must be stripped off.
WITHOUT_CLASSIFICATION	// Special case for handling ACCMODE, since constantine will generate // an invalid value if it is not defined by the platform.
WITHOUT_CLASSIFICATION	// Return false here
WITHOUT_CLASSIFICATION	// Return false here
WITHOUT_CLASSIFICATION	// We're not actually a real file, so we can't flock
WITHOUT_CLASSIFICATION	// Should we do anything?
WITHOUT_CLASSIFICATION	/* File class methods */
WITHOUT_CLASSIFICATION	// MRI-compatible basename handling for windows drive letter paths
WITHOUT_CLASSIFICATION	// strip c: away from relative-pathed name
WITHOUT_CLASSIFICATION	// C:\ is returned unchanged
WITHOUT_CLASSIFICATION	// -1 no match; 0 it is dot file not extension
WITHOUT_CLASSIFICATION	// trim trailing slashes
WITHOUT_CLASSIFICATION	// Dot is not at beginning and not at end of filename. 
WITHOUT_CLASSIFICATION	// Handle ~user paths 
WITHOUT_CLASSIFICATION	// compensate for missing slash after drive letter on windows
WITHOUT_CLASSIFICATION	// Include additional path separator // (so that dirname of "C:\file.txt" is  "C:\", not "C:")
WITHOUT_CLASSIFICATION	// FNFException can be thrown in both cases, when the file // is not found, or when permission is denied.
WITHOUT_CLASSIFICATION	// No directory delimeter.  Rest of string is username
WITHOUT_CLASSIFICATION	// If there's a second argument, it's the path to which the first  // argument is relative.
WITHOUT_CLASSIFICATION	// Handle ~user paths.
WITHOUT_CLASSIFICATION	// If there's no second argument, simply use the working directory  // of the runtime.
WITHOUT_CLASSIFICATION	// Find out which string to check.
WITHOUT_CLASSIFICATION	// Single '~' as whole path to expand
WITHOUT_CLASSIFICATION	// Count number of extra slashes in the beginning of the string.
WITHOUT_CLASSIFICATION	// '~user/...' as path to expand
WITHOUT_CLASSIFICATION	// '~/...' as path to expand
WITHOUT_CLASSIFICATION	// Prepare a string with the same number of redundant slashes so that  // we easily can prepend it to the result.
WITHOUT_CLASSIFICATION	// If there are N slashes, then we want N-1.
WITHOUT_CLASSIFICATION	// no canonical path yet or length is zero, and we have a / followed by a dot...
WITHOUT_CLASSIFICATION	// we don't have another slash after this, so replace /. with /
WITHOUT_CLASSIFICATION	// we do have another slash; omit both / and . (JRUBY-1606)
WITHOUT_CLASSIFICATION	// do nothing, we should not delete the drive letter
WITHOUT_CLASSIFICATION	/* rb: check_modifiable */
WITHOUT_CLASSIFICATION	/* rb: readable */
WITHOUT_CLASSIFICATION	// rename is successful
WITHOUT_CLASSIFICATION	// rename via Java API call wasn't successful, let's try some tricks, similar to MRI 
WITHOUT_CLASSIFICATION	// try to rename one more time
WITHOUT_CLASSIFICATION	// Can we produce IOError which bypasses a close?
WITHOUT_CLASSIFICATION	// Fast path since JNA stat is about 10x slower than this
WITHOUT_CLASSIFICATION	// RubyContinuation
WITHOUT_CLASSIFICATION	/*     *  Constructor for internal usage (mainly for Array#|, Array#&, Array#- and Array#uniq)     *  it doesn't initialize ifNone field     */
WITHOUT_CLASSIFICATION	// 16 ?
WITHOUT_CLASSIFICATION	// generation count for O(1) clears
WITHOUT_CLASSIFICATION	// size + 1;
WITHOUT_CLASSIFICATION	// suboptimal for large hashes (> 1073741824 + 85 entries) not very likely to happen
WITHOUT_CLASSIFICATION	// ------------------------------
WITHOUT_CLASSIFICATION	// ------------------------------
WITHOUT_CLASSIFICATION	// put implementation
WITHOUT_CLASSIFICATION	// get implementation
WITHOUT_CLASSIFICATION	// specialized for value
WITHOUT_CLASSIFICATION	// delete implementation
WITHOUT_CLASSIFICATION	// n.b. we need to recompute the hash in case the key object was modified
WITHOUT_CLASSIFICATION	/* ============================     * End of hash internals     * ============================     */
WITHOUT_CLASSIFICATION	/*  ================     *  Instance Methods     *  ================     */
WITHOUT_CLASSIFICATION	// update the hash value
WITHOUT_CLASSIFICATION	// other hash does not contain key
WITHOUT_CLASSIFICATION	// rb_yield_values(2,...) equivalent
WITHOUT_CLASSIFICATION	// Satisfy java.util.Set interface (for Java integration)
WITHOUT_CLASSIFICATION	// remain where we are
WITHOUT_CLASSIFICATION	// We use file test since it is faster than a stat; also euid == uid in Java always
WITHOUT_CLASSIFICATION	// default: don't retain
WITHOUT_CLASSIFICATION	// once hasNext has been called, we commit to next() returning // the entry it found, even if it were subsequently deleted
WITHOUT_CLASSIFICATION	// Not exposed by filetest, but so similiar in nature that it is stored here
WITHOUT_CLASSIFICATION	// We do both writable and writable_real through the same method because // in our java process effective and real userid will always be the same.
WITHOUT_CLASSIFICATION	// first try as directory
WITHOUT_CLASSIFICATION	// next as regular file
WITHOUT_CLASSIFICATION	// We only want IO objects with valid streams (better to error now). 
WITHOUT_CLASSIFICATION	// NIO-based
WITHOUT_CLASSIFICATION	// NIO-based
WITHOUT_CLASSIFICATION	// Stream-based
WITHOUT_CLASSIFICATION	// special constructor that accepts stream, not channel
WITHOUT_CLASSIFICATION	/*     * We use FILE versus IO to match T_FILE in MRI.     */
WITHOUT_CLASSIFICATION	// Constants for seek
WITHOUT_CLASSIFICATION	// confirm we're not reopening self's channel
WITHOUT_CLASSIFICATION	// check if we're a stdio IO, and ensure we're not badly mutilated
WITHOUT_CLASSIFICATION	// dup2 new fd into self to preserve fileno and references to it
WITHOUT_CLASSIFICATION	// re-register, since fileno points at something new now
WITHOUT_CLASSIFICATION	// re-register the descriptor
WITHOUT_CLASSIFICATION	// since we're not actually duping the incoming channel into our handler, we need to // copy the original sync behavior from the other handler
WITHOUT_CLASSIFICATION	// re-register
WITHOUT_CLASSIFICATION	// A potentially previously close IO is being 'reopened'.
WITHOUT_CLASSIFICATION	/*     * Ensure that separator is valid otherwise give it the default paragraph separator.     */
WITHOUT_CLASSIFICATION	// loop until we see the nth separator char
WITHOUT_CLASSIFICATION	// if we hit EOF or reached limit then we're done
WITHOUT_CLASSIFICATION	// this is for a range check, near as I can tell
WITHOUT_CLASSIFICATION	// IO class methods.
WITHOUT_CLASSIFICATION	// use original modes
WITHOUT_CLASSIFICATION	// See if we already have this descriptor open. // If so then we can mostly share the handler (keep open // file, but possibly change the mode).
WITHOUT_CLASSIFICATION	// redundant, done above as well
WITHOUT_CLASSIFICATION	// MRI behavior: swallow StandardErorrs
WITHOUT_CLASSIFICATION	// -1 == don't set permissions
WITHOUT_CLASSIFICATION	// isRetained=true
WITHOUT_CLASSIFICATION	// This appears to be some windows-only mode.  On a java platform this is a no-op
WITHOUT_CLASSIFICATION	// if not sync, we switch to write buffered mode
WITHOUT_CLASSIFICATION	/*     * Throw bad file descriptor is we can not read on supplied descriptor.     */
WITHOUT_CLASSIFICATION	//Everything written
WITHOUT_CLASSIFICATION	//            return len - n;
WITHOUT_CLASSIFICATION	// Claims conversion is done via 'to_s' in docs.
WITHOUT_CLASSIFICATION	// Of course this isn't particularly useful.
WITHOUT_CLASSIFICATION	// Must be back on first line on rewind.
WITHOUT_CLASSIFICATION	// Register the new descriptor
WITHOUT_CLASSIFICATION	// cleanup, raising errors if any
WITHOUT_CLASSIFICATION	// hmmmm
WITHOUT_CLASSIFICATION	// I believe Ruby bails out with a "bug" if closing fails
WITHOUT_CLASSIFICATION	// Do nothing.  FD_CLOEXEC has no meaning in JVM since we cannot really exec. // And why the hell does webrick pass this in as a first argument!!!!!
WITHOUT_CLASSIFICATION	// Do nothing.  FD_CLOEXEC has no meaning in JVM since we cannot really exec.
WITHOUT_CLASSIFICATION	// Length to read
WITHOUT_CLASSIFICATION	// String/Buffer to read it into
WITHOUT_CLASSIFICATION	// cryptic for the uninitiated...
WITHOUT_CLASSIFICATION	// select until read is ready
WITHOUT_CLASSIFICATION	//        ByteList buffer = null;
WITHOUT_CLASSIFICATION	//            buffer = str.getByteList();
WITHOUT_CLASSIFICATION	// READ_CHECK from MRI io.c
WITHOUT_CLASSIFICATION	/* rb: writable */
WITHOUT_CLASSIFICATION	// READ_CHECK from MRI io.c
WITHOUT_CLASSIFICATION	// All errors to sysread should be SystemCallErrors, but on a closed stream // Ruby returns an IOError.  Java throws same exception for all errors so // we resort to this hack...
WITHOUT_CLASSIFICATION	// TODO: read into buffer using all the fread logic //        int read = openFile.getMainStream().fread(buffer);
WITHOUT_CLASSIFICATION	// truncate buffer string to zero, if provided
WITHOUT_CLASSIFICATION	// TODO: READ_CHECK from MRI
WITHOUT_CLASSIFICATION	/* class methods for IO */
WITHOUT_CLASSIFICATION	// save blocking state
WITHOUT_CLASSIFICATION	// write
WITHOUT_CLASSIFICATION	// Java's select doesn't do anything about this, so we leave it be.
WITHOUT_CLASSIFICATION	// make all sockets blocking as configured again // close unregisters all channels, so we can safely reset blocking modes
WITHOUT_CLASSIFICATION	// FIXME: process options
WITHOUT_CLASSIFICATION	// Enebo: annotation processing forced me to do pangea method here...
WITHOUT_CLASSIFICATION	// NIO based pipe
WITHOUT_CLASSIFICATION	// not using remove(Object) here to avoid the equals() call
WITHOUT_CLASSIFICATION	// raise will also wake the thread from selection
WITHOUT_CLASSIFICATION	/* may need to handle ENC_CODERANGE_BROKEN */
WITHOUT_CLASSIFICATION	// TODO: rb_usascii_str_new2
WITHOUT_CLASSIFICATION	// If we know what method was being called, strip everything // before the call. This hides the JRuby and reflection internals.
WITHOUT_CLASSIFICATION	// The class of this object
WITHOUT_CLASSIFICATION	// zeroed by jvm
WITHOUT_CLASSIFICATION	//objectClass.defineAnnotatedMethods(BasicObjectMethods.class);
WITHOUT_CLASSIFICATION	// JRUBY-4113: callers should not call setTaint on immediate objects
WITHOUT_CLASSIFICATION	// rb_class_boot
WITHOUT_CLASSIFICATION	/* 6:tags 16:addr 1:eos */
WITHOUT_CLASSIFICATION	// 1.9 rb_check_to_integer
WITHOUT_CLASSIFICATION	// for interface impls
WITHOUT_CLASSIFICATION	// We're cloning ourselves, so we know the result should be a RubyObject
WITHOUT_CLASSIFICATION	// Methods of the Object class (rb_obj_*):
WITHOUT_CLASSIFICATION	// can't use -v and stdin
WITHOUT_CLASSIFICATION	// include its parent (and in turn that module's parents)
WITHOUT_CLASSIFICATION	// Equivalent of Data_Get_Struct // This will first check that the object in question is actually a T_DATA equivalent.
WITHOUT_CLASSIFICATION	// // COMMON VARIABLE METHODS //
WITHOUT_CLASSIFICATION	// // INTERNAL VARIABLE METHODS //
WITHOUT_CLASSIFICATION	// // INSTANCE VARIABLE API METHODS //
WITHOUT_CLASSIFICATION	// Struct methods
WITHOUT_CLASSIFICATION	//runtime.getWarnings().warn(ID.STRUCT_CONSTANT_REDEFINED, frame.getFile(), frame.getLine(), "redefining constant Struct::" + name, name);
WITHOUT_CLASSIFICATION	// define access methods.
WITHOUT_CLASSIFICATION	// if we are storing a name as well, index is one too high for values
WITHOUT_CLASSIFICATION	// Struct bodies should be public by default, so set block visibility to public. JRUBY-1185.
WITHOUT_CLASSIFICATION	// For binding purposes on the newly created struct types
WITHOUT_CLASSIFICATION	// OBJ_INFECT        
WITHOUT_CLASSIFICATION	// These call* assume ThreadContext = receiver.getRuntime().getCurrentContext()
WITHOUT_CLASSIFICATION	// Execute iterateMethod again.
WITHOUT_CLASSIFICATION	/*     * @param nv number of times to cycle or -1 to cycle indefinitely     */
WITHOUT_CLASSIFICATION	// Atomic ?
WITHOUT_CLASSIFICATION	// Atomic ?
WITHOUT_CLASSIFICATION	// MUST NOT be used across threads
WITHOUT_CLASSIFICATION	// superClass may be null.
WITHOUT_CLASSIFICATION	// Containing class...The parent of Object is null. Object should always be last in chain.
WITHOUT_CLASSIFICATION	// ClassId is the name of the class/module sans where it is located. // If it is null, then it an anonymous class.
WITHOUT_CLASSIFICATION	// ClassProviders return Java class/module (in #defineOrGetClassUnder and // #defineOrGetModuleUnder) when class/module is opened using colon syntax. 
WITHOUT_CLASSIFICATION	// update superclass reference
WITHOUT_CLASSIFICATION	// Make sure the module we include does not already exist
WITHOUT_CLASSIFICATION	// MRI checks all types first:
WITHOUT_CLASSIFICATION	// we need full traces, use default (slow) populator
WITHOUT_CLASSIFICATION	// module/singleton methods are all defined public
WITHOUT_CLASSIFICATION	// See if module is in chain...Cannot match against itself so start at superClass.
WITHOUT_CLASSIFICATION	// We can safely reference methods here instead of doing getMethods() since if we // are adding we are not using a IncludedModuleWrapper.
WITHOUT_CLASSIFICATION	// we grab serial number first; the worst that will happen is we cache a later // update with an earlier serial number, which would just flush anyway
WITHOUT_CLASSIFICATION	// update all hierarchies into which this module has been included
WITHOUT_CLASSIFICATION	// This method is intended only for defining new classes in Ruby code, // so it uses the allocator of the specified superclass or default to // the Object allocator. It should NOT be used to define classes that require a native allocator.
WITHOUT_CLASSIFICATION	// need to skip IncludedModuleWrappers
WITHOUT_CLASSIFICATION	// superClazz = null;
WITHOUT_CLASSIFICATION	// reopen a java class
WITHOUT_CLASSIFICATION	// This method is intended only for defining new modules in Ruby code
WITHOUT_CLASSIFICATION	// reopen a java module
WITHOUT_CLASSIFICATION	//FIXME warning
WITHOUT_CLASSIFICATION	// FIXME warning
WITHOUT_CLASSIFICATION	// a normal block passed to define_method changes to do arity checking; make it a lambda
WITHOUT_CLASSIFICATION	// for zsupers in define_method (blech!) we tell the proc scope to act as the "argument" scope
WITHOUT_CLASSIFICATION	// just using required is broken...but no more broken than before zsuper refactoring
WITHOUT_CLASSIFICATION	// class and module bodies default to public, so make the block's visibility public. JRUBY-1185.
WITHOUT_CLASSIFICATION	// Check the visibility of the previous frame, which will be the frame in which the class is being eval'ed
WITHOUT_CLASSIFICATION	// MRI error message says Class, even though Module is ok 
WITHOUT_CLASSIFICATION	// scan class hierarchy for module
WITHOUT_CLASSIFICATION	/* Module class methods */
WITHOUT_CLASSIFICATION	// Note: we change current frames visibility here because the methods which call // this method are all "fast" (e.g. they do not created their own frame).
WITHOUT_CLASSIFICATION	// next in hierarchy is an included version of the module we're attempting, // so we skip including it
WITHOUT_CLASSIFICATION	// if we haven't encountered a real superclass, use the found module as the new inclusion point
WITHOUT_CLASSIFICATION	// build a list of all modules to consider for inclusion
WITHOUT_CLASSIFICATION	// if the insertion point is a class, update subclass lists
WITHOUT_CLASSIFICATION	// if there's a non-null superclass, we're including into a normal class hierarchy; // update subclass relationships to avoid stale parent/child relationships
WITHOUT_CLASSIFICATION	// ////////////////// CLASS VARIABLE RUBY METHODS //////////////// //
WITHOUT_CLASSIFICATION	// ////////////////// CONSTANT RUBY METHODS //////////////// //
WITHOUT_CLASSIFICATION	// Note: includes part of fix for JRUBY-1339
WITHOUT_CLASSIFICATION	// ////////////////// CLASS VARIABLE API METHODS //////////////// //
WITHOUT_CLASSIFICATION	// Wrong Parameter ?
WITHOUT_CLASSIFICATION	// not actually called anywhere (all known uses call the fast version)
WITHOUT_CLASSIFICATION	// Not that is loaded loop around to resolve it next pass
WITHOUT_CLASSIFICATION	// if adding a module under a constant name, set that module's basename to the constant name
WITHOUT_CLASSIFICATION	// Fix for JRUBY-1339 - search hierarchy for constant
WITHOUT_CLASSIFICATION	// returns the stored value without processing undefs (autoloads)
WITHOUT_CLASSIFICATION	// removes and returns the stored value without processing undefs (autoloads)
WITHOUT_CLASSIFICATION	// we can't rename a file while it's open in windows
WITHOUT_CLASSIFICATION	//reopen
WITHOUT_CLASSIFICATION	// ARGF methods
WITHOUT_CLASSIFICATION	//         data.currentFile.callMethod(context, "lineno=", line);
WITHOUT_CLASSIFICATION	// one optional, one required args
WITHOUT_CLASSIFICATION	// one optional and no required args
WITHOUT_CLASSIFICATION	// try to get errno value out of the class
WITHOUT_CLASSIFICATION	// we got a valid errno value
WITHOUT_CLASSIFICATION	// Ensure we're not running on GCJ, since it's not supported and leads to weird errors
WITHOUT_CLASSIFICATION	// print out as a nice Ruby backtrace
WITHOUT_CLASSIFICATION	// produce a nicer error since Rubyists aren't used to seeing this
WITHOUT_CLASSIFICATION	// set thread context JRuby classloader here, for the main thread
WITHOUT_CLASSIFICATION	// can't set TC classloader
WITHOUT_CLASSIFICATION	// no script to run, return success below
WITHOUT_CLASSIFICATION	// Skip /usr/bin/env if it's first
WITHOUT_CLASSIFICATION	// Skip any assignments if /usr/bin/env is in play
WITHOUT_CLASSIFICATION	// Skip any commandline args if /usr/bin/env is in play
WITHOUT_CLASSIFICATION	// ignore error
WITHOUT_CLASSIFICATION	// ////////////////// COMMON CONSTANT / CVAR METHODS //////////////// //
WITHOUT_CLASSIFICATION	// ////////////////// INTERNAL MODULE VARIABLE API METHODS //////////////// //
WITHOUT_CLASSIFICATION	// ////////////////// LOW-LEVEL CONSTANT INTERFACE //////////////// // // fetch/store/list constants for this module //
WITHOUT_CLASSIFICATION	// odd
WITHOUT_CLASSIFICATION	// JRubyClient
WITHOUT_CLASSIFICATION	/*     * x = mantissa * 2 ** exponent     *     * Where mantissa is in the range of [.5, 1)     *     */
WITHOUT_CLASSIFICATION	// Make mantissa same sign so we only have one code path.
WITHOUT_CLASSIFICATION	// Increase value to hit lower range.
WITHOUT_CLASSIFICATION	/*     * r = x * 2 ** y     */
WITHOUT_CLASSIFICATION	/*  0! */
WITHOUT_CLASSIFICATION	/*  1! */
WITHOUT_CLASSIFICATION	/*  2! */
WITHOUT_CLASSIFICATION	/*  3! */
WITHOUT_CLASSIFICATION	/*  4! */
WITHOUT_CLASSIFICATION	/*  5! */
WITHOUT_CLASSIFICATION	/*  6! */
WITHOUT_CLASSIFICATION	/*  7! */
WITHOUT_CLASSIFICATION	/*  8! */
WITHOUT_CLASSIFICATION	/*  9! */
WITHOUT_CLASSIFICATION	/* 11! */
WITHOUT_CLASSIFICATION	/* 12! */
WITHOUT_CLASSIFICATION	/* 13! */
WITHOUT_CLASSIFICATION	/* 15! */
WITHOUT_CLASSIFICATION	/* 16! */
WITHOUT_CLASSIFICATION	/* 17! */
WITHOUT_CLASSIFICATION	/* 19! */
WITHOUT_CLASSIFICATION	/* 20! */
WITHOUT_CLASSIFICATION	/* 21! */
WITHOUT_CLASSIFICATION	// Static constants
WITHOUT_CLASSIFICATION	// Clean-up string representation so that it could be understood // by Java's BigDecimal. Not terribly efficient for now. // 1. MRI allows d and D as exponent separators
WITHOUT_CLASSIFICATION	// 2. MRI allows underscores anywhere
WITHOUT_CLASSIFICATION	// 3. MRI ignores the trailing junk
WITHOUT_CLASSIFICATION	// MRI behavior: -0 and +0 are two different things
WITHOUT_CLASSIFICATION	// Java and MRI definitions of modulo are different.
WITHOUT_CLASSIFICATION	// Java and MRI definitions of remainder are the same.
WITHOUT_CLASSIFICATION	// Note: MRI has a very non-trivial way of calculating the precision, // so we use very simple approximation here:
WITHOUT_CLASSIFICATION	// Iteration variables, for the square root x and the reciprocal v // initial x:  x0 ~ sqrt() // initial v:  v0 = 1/(2*x)
WITHOUT_CLASSIFICATION	// it doesn't handle special cases
WITHOUT_CLASSIFICATION	// TODO: why this: .setResult();
WITHOUT_CLASSIFICATION	// integer division
WITHOUT_CLASSIFICATION	// MRI behavior: "If digits is 0, the result is the same as the / operator."
WITHOUT_CLASSIFICATION	// rounding neccessary
WITHOUT_CLASSIFICATION	// rounding neccessary
WITHOUT_CLASSIFICATION	// Java and MRI definitions of divmod are different.        
WITHOUT_CLASSIFICATION	// JRUBY-914: Java 1.4 BigDecimal does not allow a negative scale, so we have to simulate it
WITHOUT_CLASSIFICATION	// shift the decimal point just to the right of the digit to be rounded to (divide by 10**(abs(scale))) // -1 -> 10's digit, -2 -> 100's digit, etc.
WITHOUT_CLASSIFICATION	// ...round to that digit
WITHOUT_CLASSIFICATION	// ...and shift the result back to the left (multiply by 10**(abs(scale)))
WITHOUT_CLASSIFICATION	//this relies on the Ruby rounding enumerations == Java ones, which they (currently) all are
WITHOUT_CLASSIFICATION	// sign
WITHOUT_CLASSIFICATION	// significant digits and exponent
WITHOUT_CLASSIFICATION	// normalize the value
WITHOUT_CLASSIFICATION	// base
WITHOUT_CLASSIFICATION	// NOTE: MRI's sqrt precision is limited by 100, // but we allow values more than 100.
WITHOUT_CLASSIFICATION	// just in case, add a bit of extra precision
WITHOUT_CLASSIFICATION	// eh?!
WITHOUT_CLASSIFICATION	// Note: #fix has only no-arg form, but truncate allows optional parameter.
WITHOUT_CLASSIFICATION	// General number and precision checking
WITHOUT_CLASSIFICATION	// the requested precision
WITHOUT_CLASSIFICATION	// Proc class
WITHOUT_CLASSIFICATION	//.append("  -x[directory]   strip off text before #!ruby line and perhaps cd to directory\n")
WITHOUT_CLASSIFICATION	// even shift.. // ..floors to 62 or 63 bit BigInteger
WITHOUT_CLASSIFICATION	// 5 -> 2, -5 -> -3 need half a scale more..
WITHOUT_CLASSIFICATION	// ..where 100 -> 10 shifts the scale
WITHOUT_CLASSIFICATION	// Initial x - use double root - multiply by halfBack to unshift - set new scale
WITHOUT_CLASSIFICATION	// x0 ~ sqrt()
WITHOUT_CLASSIFICATION	// for prec 15 root x0 must surely be OK // return small prec roots without iterations
WITHOUT_CLASSIFICATION	// Initial v - the reciprocal // v0 = 1/(2*x)
WITHOUT_CLASSIFICATION	// Collect iteration precisions beforehand
WITHOUT_CLASSIFICATION	// assume nInit = 16 <= prec
WITHOUT_CLASSIFICATION	// The loop of "Square Root by Coupled Newton Iteration"
WITHOUT_CLASSIFICATION	// Increase precision - next iteration supplies n exact digits
WITHOUT_CLASSIFICATION	// Next x                                        // e = d - x^2
WITHOUT_CLASSIFICATION	// x += e*v     ~ sqrt()
WITHOUT_CLASSIFICATION	// root x is ready!
WITHOUT_CLASSIFICATION	// Next v                                        // g = 1 - 2*x*v
WITHOUT_CLASSIFICATION	// v += g*v     ~ 1/2/sqrt()
WITHOUT_CLASSIFICATION	// RubyBigdecimal
WITHOUT_CLASSIFICATION	// c: bind_eval
WITHOUT_CLASSIFICATION	/*  ================     *  Module Methods     *  ================      */
WITHOUT_CLASSIFICATION	// from CommandlineParser
WITHOUT_CLASSIFICATION	// This property is a Boolean, to allow three values, so it can match MRI's nil, false and true
WITHOUT_CLASSIFICATION	// default ClassCache using jitMax as a soft upper bound
WITHOUT_CLASSIFICATION	// Until we get a little more solid on 1.9 support we will only run interpreted mode
WITHOUT_CLASSIFICATION	// Setting the loader needs to reset the class cache
WITHOUT_CLASSIFICATION	// try the normal property first
WITHOUT_CLASSIFICATION	// verify it if it's there
WITHOUT_CLASSIFICATION	// verify it if it's there
WITHOUT_CLASSIFICATION	// try loading from classloader resources
WITHOUT_CLASSIFICATION	// otherwise fall back on system temp location
WITHOUT_CLASSIFICATION	// We require the home directory to be absolute
WITHOUT_CLASSIFICATION	//consume the file name
WITHOUT_CLASSIFICATION	// Specify something that can't separate
WITHOUT_CLASSIFICATION	// try cwd first
WITHOUT_CLASSIFICATION	// ruby interpreter compatibilty // Usage: ruby [switches] [--] [programfile] [arguments])
WITHOUT_CLASSIFICATION	// KCode.NONE is used because KCODE does not affect parse in Ruby 1.8 // if Ruby 2.0 encoding pragmas are implemented, this will need to change
WITHOUT_CLASSIFICATION	// @JRubyMethod(name = "complex?")
WITHOUT_CLASSIFICATION	// @JRubyMethod(name = "exact?")
WITHOUT_CLASSIFICATION	// @JRubyMethod(name = "inexact?")
WITHOUT_CLASSIFICATION	// symbol string *must* be interned
WITHOUT_CLASSIFICATION	//        assert internedSymbol == internedSymbol.intern() : internedSymbol + " is not interned";
WITHOUT_CLASSIFICATION	/* Symbol class methods.     *      */
WITHOUT_CLASSIFICATION	// TODO: 1.9 rb_enc_symname_p
WITHOUT_CLASSIFICATION	// This is needed to unpack stuff
WITHOUT_CLASSIFICATION	// we already confirmed above that length > 0
WITHOUT_CLASSIFICATION	// *must* be power of 2!
WITHOUT_CLASSIFICATION	// note all fields are final -- rehash creates new entries when necessary. // as documented in java.util.concurrent.ConcurrentHashMap.java, that will // statistically affect only a small percentage (< 20%) of entries for a given rehash.
WITHOUT_CLASSIFICATION	//            assert internedName == internedName.intern() : internedName + " is not interned";
WITHOUT_CLASSIFICATION	// try lookup again under lock
WITHOUT_CLASSIFICATION	// try lookup again under lock
WITHOUT_CLASSIFICATION	// write-volatile
WITHOUT_CLASSIFICATION	// write-volatile
WITHOUT_CLASSIFICATION	// backwards-compatibility, but threadsafe now
WITHOUT_CLASSIFICATION	//  Single node on list
WITHOUT_CLASSIFICATION	// Reuse trailing consecutive sequence at same slot
WITHOUT_CLASSIFICATION	// Clone all remaining nodes
WITHOUT_CLASSIFICATION	// Check the length every iteration, since // the block can modify this string.
WITHOUT_CLASSIFICATION	// we set scope-aware to true to force heap-based locals
WITHOUT_CLASSIFICATION	// not so backwards-compatible here, but no one should have been // calling this anyway.
WITHOUT_CLASSIFICATION	// Profile
WITHOUT_CLASSIFICATION	//static private final String TRANSLIT = "//translit";
WITHOUT_CLASSIFICATION	// treat start and end as start...end for end >= 0, start..end for end < 0
WITHOUT_CLASSIFICATION	// invalid ranges result in an empty string
WITHOUT_CLASSIFICATION	// Methods of the Nil Class (nil_*):
WITHOUT_CLASSIFICATION	// Has read/write been closed or is it still open for business
WITHOUT_CLASSIFICATION	// Support IO modes that this object was opened with
WITHOUT_CLASSIFICATION	// must let original string know we're modifying, so shared buffers aren't damaged
WITHOUT_CLASSIFICATION	// reset the state
WITHOUT_CLASSIFICATION	// Tainting here if we ever want it. (secure 4)
WITHOUT_CLASSIFICATION	// rb_match_busy
WITHOUT_CLASSIFICATION	//str is frozen
WITHOUT_CLASSIFICATION	// MRI also does a pointer comparison here
WITHOUT_CLASSIFICATION	// JRubyServer
WITHOUT_CLASSIFICATION	// Class.allocate object is not allocatable before it is initialized
WITHOUT_CLASSIFICATION	// boot the Object class 
WITHOUT_CLASSIFICATION	// Methods of the Object class (rb_obj_*):
WITHOUT_CLASSIFICATION	// update superclass reference
WITHOUT_CLASSIFICATION	// undo check
WITHOUT_CLASSIFICATION	// This is a non-standard method; have we decided to start extending Ruby? //classClass.defineFastMethod("subclasses", callbackFactory.getFastOptMethod("subclasses"));
WITHOUT_CLASSIFICATION	// boot the Module and Class classes
WITHOUT_CLASSIFICATION	// this is the only case it might be null here (in MetaClass construction)
WITHOUT_CLASSIFICATION	// use parent's marshal
WITHOUT_CLASSIFICATION	// use parent's marshal
WITHOUT_CLASSIFICATION	// could be pulled down to RubyClass in future // rb_class_boot
WITHOUT_CLASSIFICATION	// remove us from old superclass's child classes
WITHOUT_CLASSIFICATION	// add us to new superclass's child classes
WITHOUT_CLASSIFICATION	// update all subclasses
WITHOUT_CLASSIFICATION	// fields to hold Ruby and RubyClass references
WITHOUT_CLASSIFICATION	// static initializing method
WITHOUT_CLASSIFICATION	// standard constructor that accepts Ruby, RubyClass
WITHOUT_CLASSIFICATION	// no-arg constructor using static references to Ruby and RubyClass
WITHOUT_CLASSIFICATION	// non-signature signature with just IRubyObject
WITHOUT_CLASSIFICATION	// indices for temp values
WITHOUT_CLASSIFICATION	// self // method name
WITHOUT_CLASSIFICATION	// the default allocator
WITHOUT_CLASSIFICATION	// Equivalent of T_DATA
WITHOUT_CLASSIFICATION	// do nothing, leave empty
WITHOUT_CLASSIFICATION	// Double.MAX_EXPONENT since Java 1.6
WITHOUT_CLASSIFICATION	/*  ================     *  Singleton Methods     *  ================      */
WITHOUT_CLASSIFICATION	// Ruby uses Qnil here, we use "dummy" because we need a class
WITHOUT_CLASSIFICATION	// Make sure all arguments are modules before calling the callbacks
WITHOUT_CLASSIFICATION	// MRI extends in order from last to first
WITHOUT_CLASSIFICATION	// NOTE: Serialization is primarily supported for testing purposes, and there is no general // guarantee that serialization will work correctly. Specifically, instance variables pointing // at symbols, threads, modules, classes, and other unserializable types are not detected.
WITHOUT_CLASSIFICATION	// write out ivar count followed by name/value pairs
WITHOUT_CLASSIFICATION	// rest in ivar count followed by name/value pairs
WITHOUT_CLASSIFICATION	// 0x3fff_ffff // -0x4000_0000
WITHOUT_CLASSIFICATION	// a gotcha
WITHOUT_CLASSIFICATION	// Java / and % are not the same as ruby
WITHOUT_CLASSIFICATION	// A gotcha for Long.MIN_VALUE: value = -value
WITHOUT_CLASSIFICATION	// Piece of mri rb_to_id
WITHOUT_CLASSIFICATION	// Java Doubles are 64 bit long:            
WITHOUT_CLASSIFICATION	// Double.MAX_EXPONENT since Java 1.6            
WITHOUT_CLASSIFICATION	// don't override Numeric#div !
WITHOUT_CLASSIFICATION	// Modelled after c ruby implementation (java /,% not same as ruby)
WITHOUT_CLASSIFICATION	// MRI behavior:
WITHOUT_CLASSIFICATION	// Numeric.equal            
WITHOUT_CLASSIFICATION	// provider is not available
WITHOUT_CLASSIFICATION	// bouncy castle doesn't support algorithm
WITHOUT_CLASSIFICATION	// fall back to system JCA providers
WITHOUT_CLASSIFICATION	// RubyDigest
WITHOUT_CLASSIFICATION	// ENEBO: Can these be fast?
WITHOUT_CLASSIFICATION	// synchronize on the RubyThread for threadgroup updates
WITHOUT_CLASSIFICATION	// we only add live threads
WITHOUT_CLASSIFICATION	// use same ClassIndex as metaclass, since we're technically still of that type
WITHOUT_CLASSIFICATION	// handle everything after -- as arguments to the jruby process
WITHOUT_CLASSIFICATION	// JRubyService
WITHOUT_CLASSIFICATION	// while
WITHOUT_CLASSIFICATION	/* \OOO */
WITHOUT_CLASSIFICATION	// CRuby uses sprintf(buf, "%.*g", FLOAT_DIG, d); // This pattern adjusts the output of String.pattern("%g") to mimic // the C version.
WITHOUT_CLASSIFICATION	// mask off "once" flag
WITHOUT_CLASSIFICATION	// used only by the compiler/interpreter (will set the literal flag)
WITHOUT_CLASSIFICATION	// internal usage (Complex/Rational)
WITHOUT_CLASSIFICATION	// silent ?
WITHOUT_CLASSIFICATION	/* \xHH */
WITHOUT_CLASSIFICATION	/* \M-X, \M-\C-X, \M-\cX */
WITHOUT_CLASSIFICATION	/* \C-X, \C-\M-X */
WITHOUT_CLASSIFICATION	/* \cX, \c\M-X */
WITHOUT_CLASSIFICATION	/* \O, \OO, \OOO or backref */
WITHOUT_CLASSIFICATION	// MBCLEN_NEEDMORE_P
WITHOUT_CLASSIFICATION	// MBCLEN_INVALID_P
WITHOUT_CLASSIFICATION	// Unicode is can be only 21 bits long, int is enough
WITHOUT_CLASSIFICATION	/* Surrogates */
WITHOUT_CLASSIFICATION	// do not load the class if not used
WITHOUT_CLASSIFICATION	/* \0, \0O, \0OO */
WITHOUT_CLASSIFICATION	/* \xHH */
WITHOUT_CLASSIFICATION	/* \C-X, \C-\M-X */
WITHOUT_CLASSIFICATION	/* \M-X, \M-\C-X, \M-\cX */
WITHOUT_CLASSIFICATION	/* \\u{H HH HHH HHHH HHHHH HHHHHH ...} */
WITHOUT_CLASSIFICATION	/* \\uHHHH */
WITHOUT_CLASSIFICATION	/* \p{Hiragana} */
WITHOUT_CLASSIFICATION	// inner switch
WITHOUT_CLASSIFICATION	// newInstance here
WITHOUT_CLASSIFICATION	// rb_reg_raise
WITHOUT_CLASSIFICATION	// rb_reg_desc
WITHOUT_CLASSIFICATION	// rb_enc_reg_raise
WITHOUT_CLASSIFICATION	// rb_enc_reg_error_desc
WITHOUT_CLASSIFICATION	// rb_reg_initialize_str
WITHOUT_CLASSIFICATION	// rb_reg_initialize
WITHOUT_CLASSIFICATION	// JRUBY-3625: delay setting backref until the MatchData is completely initialized
WITHOUT_CLASSIFICATION	// rb_reg_expr_str
WITHOUT_CLASSIFICATION	// option_to_str
WITHOUT_CLASSIFICATION	// Don't initialize with class // Don't put in object space and don't taint
WITHOUT_CLASSIFICATION	// args should be before block
WITHOUT_CLASSIFICATION	// args should be at end
WITHOUT_CLASSIFICATION	// minus one more for IRubyObject[]
WITHOUT_CLASSIFICATION	// minus one more for IRubyObject[]
WITHOUT_CLASSIFICATION	// skip anything not related to jruby
WITHOUT_CLASSIFICATION	// start a new populator
WITHOUT_CLASSIFICATION	// check for frame field reads or writes
WITHOUT_CLASSIFICATION	// add all names for this annotation
WITHOUT_CLASSIFICATION	// no annotated methods found, skip
WITHOUT_CLASSIFICATION	// write out a static initializer for frame names, so it only fires once
WITHOUT_CLASSIFICATION	// single method, use normal logic
WITHOUT_CLASSIFICATION	// multimethod, new logic
WITHOUT_CLASSIFICATION	// declared type returns the qualified name without $ for inner classes!!!
WITHOUT_CLASSIFICATION	// inner class, use $ to delimit
WITHOUT_CLASSIFICATION	//                        RubyModule singletonClass = module.getSingletonClass();
WITHOUT_CLASSIFICATION	//                }
WITHOUT_CLASSIFICATION	// fallback on non-pregenerated logic
WITHOUT_CLASSIFICATION	// refresh call adapter, since it matters if this is iter-based or not
WITHOUT_CLASSIFICATION	// If we have more than one arg, make sure the array created to contain them is not ObjectSpaced
WITHOUT_CLASSIFICATION	// attribute set.
WITHOUT_CLASSIFICATION	// element set
WITHOUT_CLASSIFICATION	// If reciever is self then we do the call the same way as vcall
WITHOUT_CLASSIFICATION	// If reciever is self then we do the call the same way as vcall
WITHOUT_CLASSIFICATION	// colon3
WITHOUT_CLASSIFICATION	// Colon3
WITHOUT_CLASSIFICATION	// array created for rescue args doesn't need to be in ObjectSpace.
WITHOUT_CLASSIFICATION	// For b.foo
WITHOUT_CLASSIFICATION	// instance config for the script run
WITHOUT_CLASSIFICATION	// If reciever is self then we do the call the same way as vcall
WITHOUT_CLASSIFICATION	// If reciever is self then we do the call the same way as vcall
WITHOUT_CLASSIFICATION	// For 'b.foo()'.  Args are only significant in maintaining backwards compatible AST structure
WITHOUT_CLASSIFICATION	// For 'b.foo()'.  Args are only significant in maintaining backwards compatible AST structure
WITHOUT_CLASSIFICATION	//RubyModule module = context.getRubyClass();
WITHOUT_CLASSIFICATION	// For 'b.foo'
WITHOUT_CLASSIFICATION	// We define an actual list to get around bug in java integration (1387115)
WITHOUT_CLASSIFICATION	// something in here is used to build up ruby stack trace...
WITHOUT_CLASSIFICATION	// Ruby Grammar productions return plenty of nulls.
WITHOUT_CLASSIFICATION	// Ruby Grammar productions return plenty of nulls.
WITHOUT_CLASSIFICATION	// do nothing, allow loop to retry
WITHOUT_CLASSIFICATION	// We can callsite cache const_missing if we want
WITHOUT_CLASSIFICATION	// Store to temp so it does null out on us mid-stream
WITHOUT_CLASSIFICATION	// never visited, should be fine
WITHOUT_CLASSIFICATION	// For 'foo()'.  Args are only significant in maintaining backwards compatible AST structure
WITHOUT_CLASSIFICATION	// The name of the variable
WITHOUT_CLASSIFICATION	// If we have more than one argument, then make sure the array is not ObjectSpaced.
WITHOUT_CLASSIFICATION	// Only in ruby 1.9 methods
WITHOUT_CLASSIFICATION	// Bind 'normal' parameter values to the local scope for this method.
WITHOUT_CLASSIFICATION	// no arg grouping, just use bulk assignment methods
WITHOUT_CLASSIFICATION	// optArgs and restArgs require more work, so isolate them and ArrayList creation here
WITHOUT_CLASSIFICATION	//        arity.checkArity(runtime, argsLength);
WITHOUT_CLASSIFICATION	// no more values to stick in rest arg
WITHOUT_CLASSIFICATION	// set argv from main's args
WITHOUT_CLASSIFICATION	// attribute set.
WITHOUT_CLASSIFICATION	// If reciever is self then we do the call the same way as vcall
WITHOUT_CLASSIFICATION	// For 'b.foo()'.  Args are only significant in maintaining backwards compatible AST structure
WITHOUT_CLASSIFICATION	// The name of the variable
WITHOUT_CLASSIFICATION	// A scoped location of this variable (high 16 bits is how many scopes down and low 16 bits // is what index in the right scope to set the value.
WITHOUT_CLASSIFICATION	// A scoped location of this variable (high 16 bits is how many scopes down and low 16 bits // is what index in the right scope to set the value.
WITHOUT_CLASSIFICATION	// block.yield depends on null to represent empty and nil to represent nil - [nil] vs [] //assert argsNode != null : "argsNode is not null";
WITHOUT_CLASSIFICATION	// assign given optional arguments to their variables
WITHOUT_CLASSIFICATION	// in-frame EvalState should already have receiver set as self, continue to use it
WITHOUT_CLASSIFICATION	// assign the default values, adding to the end of allArgs
WITHOUT_CLASSIFICATION	// Make sure the appropriate scope has proper size. See JRUBY-2046.
WITHOUT_CLASSIFICATION	// Experimental class reification support, to create real Java classes // for Ruby classes after the first opening
WITHOUT_CLASSIFICATION	// This should never happen past parse, but just bulletproof this just in case
WITHOUT_CLASSIFICATION	// Make a nil node if no body.  Notice this is not part of AST.
WITHOUT_CLASSIFICATION	// 'class << state.self' and 'class << obj' uses defn as opposed to defs
WITHOUT_CLASSIFICATION	// now used as an interpreter event
WITHOUT_CLASSIFICATION	// never visited, should be ok
WITHOUT_CLASSIFICATION	// If no explicit block passed to super, then use the one passed in, unless it's explicitly cleared with nil
WITHOUT_CLASSIFICATION	// JRUBY-530 until case
WITHOUT_CLASSIFICATION	// element set
WITHOUT_CLASSIFICATION	// For 'b.foo()'.  Args are only significant in maintaining backwards compatible AST structure
WITHOUT_CLASSIFICATION	// We can callsite cache const_missing if we want
WITHOUT_CLASSIFICATION	// Store to temp so it does null out on us mid-stream
WITHOUT_CLASSIFICATION	// Store to temp so it does null out on us mid-stream
WITHOUT_CLASSIFICATION	// For 'foo()'.  Args are only significant in maintaining backwards compatible AST structure
WITHOUT_CLASSIFICATION	// The name of the variable
WITHOUT_CLASSIFICATION	// The name of the variable
WITHOUT_CLASSIFICATION	// A scoped location of this variable (high 16 bits is how many scopes down and low 16 bits // is what index in the right scope to set the value.
WITHOUT_CLASSIFICATION	// Empirical Observations: // null -> Some arity // argsNode == this.argsNode then check for arity changes // newline(splatnode) -> argspushnode
WITHOUT_CLASSIFICATION	//assert !(value instanceof RubyArray)  : "Not an array";
WITHOUT_CLASSIFICATION	// Serialization killed our dynamic scope.  We can just create an empty one // since serialization cannot serialize an eval (which is the only thing // which is capable of having a non-empty dynamic scope).
WITHOUT_CLASSIFICATION	// Each root node has a top-level scope that we need to push
WITHOUT_CLASSIFICATION	// We could probably also detect if LHS value came out of cache and avoid some of this
WITHOUT_CLASSIFICATION	//        assert thenBody != null : "thenBody is not null"; //        assert elseBody != null : "elseBody is not null";
WITHOUT_CLASSIFICATION	// add in reverse order
WITHOUT_CLASSIFICATION	// in order to make pragma's noops we set location to a special value
WITHOUT_CLASSIFICATION	// ignore compiler pragmas
WITHOUT_CLASSIFICATION	// We can callsite cache const_missing if we want
WITHOUT_CLASSIFICATION	// Store to temp so it does null out on us mid-stream
WITHOUT_CLASSIFICATION	// Store to temp so it does null out on us mid-stream
WITHOUT_CLASSIFICATION	// For 'foo()'.  Args are only significant in maintaining backwards compatible AST structure
WITHOUT_CLASSIFICATION	// Make a nil node if no body.  Notice this is not part of AST.
WITHOUT_CLASSIFICATION	// now used as an interpreter event
WITHOUT_CLASSIFICATION	// No actual test, so do 'when' if when expression is not nil
WITHOUT_CLASSIFICATION	// save entering the try if there's nothing to ensure
WITHOUT_CLASSIFICATION	// For 'foo'
WITHOUT_CLASSIFICATION	// For 'foo'
WITHOUT_CLASSIFICATION	// admittedly inefficient
WITHOUT_CLASSIFICATION	// JRUBY-530, while case
WITHOUT_CLASSIFICATION	// What static scoping relationship exists when it comes into being.
WITHOUT_CLASSIFICATION	// let RescuedBlock continue
WITHOUT_CLASSIFICATION	// just rethrow
WITHOUT_CLASSIFICATION	// just rethrow
WITHOUT_CLASSIFICATION	// clear exception when handled or retried
WITHOUT_CLASSIFICATION	// clear exception when handled or retried
WITHOUT_CLASSIFICATION	// no takers; bubble up
WITHOUT_CLASSIFICATION	// no takers; bubble up
WITHOUT_CLASSIFICATION	// Execute rescue block
WITHOUT_CLASSIFICATION	// If no exception is thrown execute else block
WITHOUT_CLASSIFICATION	// index of variable for this arg
WITHOUT_CLASSIFICATION	// only a marker interface
WITHOUT_CLASSIFICATION	// don't attempt to coerce to array, just wrap and return
WITHOUT_CLASSIFICATION	// pragmas
WITHOUT_CLASSIFICATION	// The method also needs a scope, do both
WITHOUT_CLASSIFICATION	// We're doing normal framed compilation or the method needs a frame
WITHOUT_CLASSIFICATION	// The method doesn't need a scope or static scope; frame only
WITHOUT_CLASSIFICATION	// The method doesn't need a scope, but has static scope needs; use a dummy scope
WITHOUT_CLASSIFICATION	// Proc.new needs the caller's block to instantiate a proc
WITHOUT_CLASSIFICATION	// check for Proc.new, an especially magic method
WITHOUT_CLASSIFICATION	// long, slow way causes disabling
WITHOUT_CLASSIFICATION	// ok, we have fast paths
WITHOUT_CLASSIFICATION	// ok, we have fast paths
WITHOUT_CLASSIFICATION	// long, slow way causes disabling for defined
WITHOUT_CLASSIFICATION	// we set scope-aware to true to force heap-based locals
WITHOUT_CLASSIFICATION	// Because Regexp#=== sets backref, we have to make this backref-aware
WITHOUT_CLASSIFICATION	// encountered a node we don't recognize, set everything to true to disable optz
WITHOUT_CLASSIFICATION	// only arrays that are "lightweight" are being used as args arrays
WITHOUT_CLASSIFICATION	// otherwise, it's a literal array
WITHOUT_CLASSIFICATION	// use array as-is, it's a literal array
WITHOUT_CLASSIFICATION	// unwrap newline nodes to get their actual type
WITHOUT_CLASSIFICATION	// compile first node as non-expr and then second node
WITHOUT_CLASSIFICATION	// last node, either !instanceof WhenNode or null, is the else
WITHOUT_CLASSIFICATION	// compile first node only
WITHOUT_CLASSIFICATION	// splatted when, can't do it yet
WITHOUT_CLASSIFICATION	// if __send__ with a literal symbol, compile it as a direct fcall
WITHOUT_CLASSIFICATION	// NOTE: Currently this optimization is limited to the following situations: // * All expressions must be int-ranged literal fixnums // It also still emits the code for the "safe" when logic, which is rather // wasteful (since it essentially doubles each code body). As such it is // normally disabled, but it serves as an example of how this optimization // could be done. Ideally, it should be combined with the when processing // to improve code reuse before it's generally available.
WITHOUT_CLASSIFICATION	// aggregate when nodes into a list, unfortunately, this is no
WITHOUT_CLASSIFICATION	// one arg but it's an array, treat it as a proper array
WITHOUT_CLASSIFICATION	// can't do it
WITHOUT_CLASSIFICATION	// otherwise, use normal args compiler
WITHOUT_CLASSIFICATION	// colon3, assign in Object
WITHOUT_CLASSIFICATION	// colon3, assign in Object
WITHOUT_CLASSIFICATION	// these are all simple cases that don't require the heavier defined logic
WITHOUT_CLASSIFICATION	//[IRubyObject, RubyClass, Visibility] //[IRubyObject, RubyClass] //[IRubyObject]
WITHOUT_CLASSIFICATION	//[]
WITHOUT_CLASSIFICATION	//[]
WITHOUT_CLASSIFICATION	//          context.swapValues(); //context.consumeCurrentValue();
WITHOUT_CLASSIFICATION	//[RubyClass] //[RubyClass, RubyClass] //[RubyClass] //[] //[self] //[RubyClass] //[RubyClass, RubyClass]
WITHOUT_CLASSIFICATION	//[RubyClass]
WITHOUT_CLASSIFICATION	//[RubyClass] //[RubyClass, RubyClass] //[RubyClass] //[]
WITHOUT_CLASSIFICATION	// if root of method is rescue, compile as a light rescue
WITHOUT_CLASSIFICATION	// inspect body and args
WITHOUT_CLASSIFICATION	// inspect body and args
WITHOUT_CLASSIFICATION	// check args first, since body inspection can depend on args
WITHOUT_CLASSIFICATION	// if root of method is rescue, compile as light rescue
WITHOUT_CLASSIFICATION	// invoke run with threadcontext and topself
WITHOUT_CLASSIFICATION	//[IRubyObject] //[IRubyObject, IRubyObject] //[IRubyObject, RubyClass] //[IRubyObject, RubyClass, RubyClass] //[IRubyObject, RubyClass, Visibility] //[IRubyObject, RubyClass, Visibility, Visibility]
WITHOUT_CLASSIFICATION	//[IRubyObject, RubyClass, Visibility] //[IRubyObject, RubyClass] //[IRubyObject]
WITHOUT_CLASSIFICATION	//[RubyClass] //[]
WITHOUT_CLASSIFICATION	//[String] //[String, String] //[String] //[String, RubyClass] //[String, RubyClass, RubyClass] //[String, RubyClass]
WITHOUT_CLASSIFICATION	//[String] //[String, String] //[String] //[String, RubyClass] //[String, RubyClass, RubyClass] //[String, RubyClass]
WITHOUT_CLASSIFICATION	// no args, do not pass args processor
WITHOUT_CLASSIFICATION	// create the closure class and instantiate it
WITHOUT_CLASSIFICATION	// create the closure class and instantiate it
WITHOUT_CLASSIFICATION	// not an expression, only compile the elements
WITHOUT_CLASSIFICATION	// not an expression, only compile the elements
WITHOUT_CLASSIFICATION	// not an expression, only compile the elements
WITHOUT_CLASSIFICATION	// create the closure class and instantiate it
WITHOUT_CLASSIFICATION	// create the closure class and instantiate it
WITHOUT_CLASSIFICATION	// no args, do not pass args processor
WITHOUT_CLASSIFICATION	// force heap-scope behavior, since it uses parent's scope
WITHOUT_CLASSIFICATION	// always false or nil
WITHOUT_CLASSIFICATION	// optimizations if we know ahead of time it will always be true or false
WITHOUT_CLASSIFICATION	// normal
WITHOUT_CLASSIFICATION	// compile condition as non-expr and just compile "then" body
WITHOUT_CLASSIFICATION	// need the array, use unoptz version
WITHOUT_CLASSIFICATION	// just push nil for pragmas
WITHOUT_CLASSIFICATION	// "assignment" means the value is already on the stack
WITHOUT_CLASSIFICATION	// compile first node only
WITHOUT_CLASSIFICATION	// create the closure class and instantiate it
WITHOUT_CLASSIFICATION	// create the closure class and instantiate it
WITHOUT_CLASSIFICATION	// eval new value, call operator on old value, and assign
WITHOUT_CLASSIFICATION	// try optz version
WITHOUT_CLASSIFICATION	// sizes must match
WITHOUT_CLASSIFICATION	// expect value to be an array of nodes
WITHOUT_CLASSIFICATION	// normal items at the "head" of the masgn
WITHOUT_CLASSIFICATION	// head must not be null and there must be no "args" (like *arg)
WITHOUT_CLASSIFICATION	// "head" must have no non-trivial assigns (array groupings, basically)
WITHOUT_CLASSIFICATION	// only supports simple parallel assignment of up to 10 values to the same number of assignees
WITHOUT_CLASSIFICATION	// perform assignment for the next node
WITHOUT_CLASSIFICATION	// if we get here, no optz cases work; fall back on unoptz.
WITHOUT_CLASSIFICATION	//RedoNode redoNode = (RedoNode)node;
WITHOUT_CLASSIFICATION	// done processing args
WITHOUT_CLASSIFICATION	// all these types are immediately considered "defined"
WITHOUT_CLASSIFICATION	// assign to appropriate variable
WITHOUT_CLASSIFICATION	// if arity 1, just compile the one element to save us the array cost
WITHOUT_CLASSIFICATION	// [recv]
WITHOUT_CLASSIFICATION	// [recv]
WITHOUT_CLASSIFICATION	// [recv]
WITHOUT_CLASSIFICATION	// compile into array
WITHOUT_CLASSIFICATION	// compile first node as non-expr and compile second node
WITHOUT_CLASSIFICATION	// check if it's an immediate, and don't outline
WITHOUT_CLASSIFICATION	// condition is always true, just compile it and not body
WITHOUT_CLASSIFICATION	// force static scope to claim restarg at 0, so it only implements the [] version of __file__
WITHOUT_CLASSIFICATION	// create method for toplevel of script
WITHOUT_CLASSIFICATION	// it's a multiple-statement body, iterate over all elements in turn and chain if it get too long
WITHOUT_CLASSIFICATION	// send it along as arity-specific, we don't need the array
WITHOUT_CLASSIFICATION	// single-statement body, just compile it
WITHOUT_CLASSIFICATION	// leave as a normal array
WITHOUT_CLASSIFICATION	// This method has JITed already or has been abandoned. Bail out.
WITHOUT_CLASSIFICATION	// The cache is full. Abandon JIT for this method and bail out.
WITHOUT_CLASSIFICATION	// check args first, since body inspection can depend on args
WITHOUT_CLASSIFICATION	// create the closure class and instantiate it
WITHOUT_CLASSIFICATION	// create the closure class and instantiate it
WITHOUT_CLASSIFICATION	// no args, do not pass args processor
WITHOUT_CLASSIFICATION	// need the array, use unoptz version
WITHOUT_CLASSIFICATION	// try optz version
WITHOUT_CLASSIFICATION	// expect value to be an array of nodes
WITHOUT_CLASSIFICATION	// head must not be null and there must be no "args" (like *arg)
WITHOUT_CLASSIFICATION	// sizes must match
WITHOUT_CLASSIFICATION	// "head" must have no non-trivial assigns (array groupings, basically)
WITHOUT_CLASSIFICATION	// if we get here, no optz cases work; fall back on unoptz.
WITHOUT_CLASSIFICATION	// perform assignment for the next node
WITHOUT_CLASSIFICATION	// done processing args
WITHOUT_CLASSIFICATION	// Check if the method has been explicitly excluded
WITHOUT_CLASSIFICATION	// class could not be found nor generated; give up on JIT and bail out
WITHOUT_CLASSIFICATION	// successfully got back a jitted method
WITHOUT_CLASSIFICATION	// finally, grab the script
WITHOUT_CLASSIFICATION	// logEvery n methods based on configuration
WITHOUT_CLASSIFICATION	// Time the compilation
WITHOUT_CLASSIFICATION	// we have a body, do a full-on method
WITHOUT_CLASSIFICATION	// If we don't have a body, check for required or opt args // if opt args, they could have side effects // if required args, need to raise errors if too few args passed // otherwise, method does nothing, make it a nop
WITHOUT_CLASSIFICATION	// if we haven't already decided on a do-nothing call
WITHOUT_CLASSIFICATION	// only supports simple parallel assignment of up to 4 values to the same number of assignees
WITHOUT_CLASSIFICATION	// normal items at the front or back of the masgn
WITHOUT_CLASSIFICATION	// set up a local IRuby variable
WITHOUT_CLASSIFICATION	// grab nil for local variables
WITHOUT_CLASSIFICATION	// visit a label to start scoping for local vars in this method
WITHOUT_CLASSIFICATION	// return last value from execution
WITHOUT_CLASSIFICATION	// end of variable scope
WITHOUT_CLASSIFICATION	// method is done, declare all variables
WITHOUT_CLASSIFICATION	// Define the annotation for the method
WITHOUT_CLASSIFICATION	// check arity in the variable-arity version
WITHOUT_CLASSIFICATION	// load block from [] version of method
WITHOUT_CLASSIFICATION	// normal return for method body. return jump for within a begin/rescue/ensure
WITHOUT_CLASSIFICATION	// in method body with no containing loop, issue jump error // load runtime and value, issue jump error
WITHOUT_CLASSIFICATION	// in method body with no containing loop, issue jump error // load runtime and value, issue jump error
WITHOUT_CLASSIFICATION	// value is already on stack, save it for later
WITHOUT_CLASSIFICATION	// receiver first, so we know which call site to use
WITHOUT_CLASSIFICATION	/*receiver*/
WITHOUT_CLASSIFICATION	/*receiver*/
WITHOUT_CLASSIFICATION	/*receiver*/
WITHOUT_CLASSIFICATION	/*self*/
WITHOUT_CLASSIFICATION	/*self*/
WITHOUT_CLASSIFICATION	/*self*/
WITHOUT_CLASSIFICATION	/*self*/
WITHOUT_CLASSIFICATION	/*arg0*/
WITHOUT_CLASSIFICATION	/*arg0*/
WITHOUT_CLASSIFICATION	/*arg0*/
WITHOUT_CLASSIFICATION	/*arg1*/
WITHOUT_CLASSIFICATION	/*arg1*/
WITHOUT_CLASSIFICATION	/*arg2*/
WITHOUT_CLASSIFICATION	/*args*/
WITHOUT_CLASSIFICATION	// receiver first, so we know which call site to use
WITHOUT_CLASSIFICATION	// select appropriate call site // dup receiver // load self
WITHOUT_CLASSIFICATION	/*receiver*/
WITHOUT_CLASSIFICATION	/*receiver*/
WITHOUT_CLASSIFICATION	/*self*/
WITHOUT_CLASSIFICATION	/*self*/
WITHOUT_CLASSIFICATION	/*self*/
WITHOUT_CLASSIFICATION	/*arg0*/
WITHOUT_CLASSIFICATION	/*arg0*/
WITHOUT_CLASSIFICATION	/*arg1*/
WITHOUT_CLASSIFICATION	/*args*/
WITHOUT_CLASSIFICATION	// get call site and thread context
WITHOUT_CLASSIFICATION	// get call site and thread context
WITHOUT_CLASSIFICATION	// evaluate and save receiver and args
WITHOUT_CLASSIFICATION	// evaluate and save receiver and args
WITHOUT_CLASSIFICATION	// invoke
WITHOUT_CLASSIFICATION	// invoke
WITHOUT_CLASSIFICATION	// check if it's true, ending if so
WITHOUT_CLASSIFICATION	// not true, eval value and assign
WITHOUT_CLASSIFICATION	// not true, eval value and assign
WITHOUT_CLASSIFICATION	// thread context, receiver and original args
WITHOUT_CLASSIFICATION	// thread context, receiver and original args
WITHOUT_CLASSIFICATION	// eval value for assignment
WITHOUT_CLASSIFICATION	// call site
WITHOUT_CLASSIFICATION	// call site
WITHOUT_CLASSIFICATION	// depending on size of original args, call appropriate utility method
WITHOUT_CLASSIFICATION	// check if it's true, ending if not
WITHOUT_CLASSIFICATION	// eval value and save it
WITHOUT_CLASSIFICATION	/*self*/
WITHOUT_CLASSIFICATION	/*self*/
WITHOUT_CLASSIFICATION	// depending on size of original args, call appropriate utility method
WITHOUT_CLASSIFICATION	// receiver, args, result, value
WITHOUT_CLASSIFICATION	// [adapter, tc]
WITHOUT_CLASSIFICATION	// [adapter, tc]
WITHOUT_CLASSIFICATION	// [adapter, tc]
WITHOUT_CLASSIFICATION	// super uses current block if none given
WITHOUT_CLASSIFICATION	// args
WITHOUT_CLASSIFICATION	// block
WITHOUT_CLASSIFICATION	// block
WITHOUT_CLASSIFICATION	// no args, no block
WITHOUT_CLASSIFICATION	// no args, with block
WITHOUT_CLASSIFICATION	// with args, no block
WITHOUT_CLASSIFICATION	// with args, with block
WITHOUT_CLASSIFICATION	// adapter, tc, recv, args{0,1}, block{0,1}]
WITHOUT_CLASSIFICATION	// pop extra attr value
WITHOUT_CLASSIFICATION	// pop extra attr value
WITHOUT_CLASSIFICATION	// arg and receiver already present on the stack
WITHOUT_CLASSIFICATION	/*arg*/
WITHOUT_CLASSIFICATION	/*arg*/
WITHOUT_CLASSIFICATION	/*self*/
WITHOUT_CLASSIFICATION	// [adapter, tc]
WITHOUT_CLASSIFICATION	// args
WITHOUT_CLASSIFICATION	// block
WITHOUT_CLASSIFICATION	// no args, no block
WITHOUT_CLASSIFICATION	// no args, with block
WITHOUT_CLASSIFICATION	// with args, no block
WITHOUT_CLASSIFICATION	// with args, with block
WITHOUT_CLASSIFICATION	/*arg*/
WITHOUT_CLASSIFICATION	// retrieve scope from scopes array
WITHOUT_CLASSIFICATION	// use numbered access method
WITHOUT_CLASSIFICATION	// retrieve call site from sites array
WITHOUT_CLASSIFICATION	// add name to call site list
WITHOUT_CLASSIFICATION	// module is on top of stack
WITHOUT_CLASSIFICATION	// build scope names string
WITHOUT_CLASSIFICATION	// build descriptor string
WITHOUT_CLASSIFICATION	// build descriptor string
WITHOUT_CLASSIFICATION	// generate call sites initialization code
WITHOUT_CLASSIFICATION	// generate symbols initialization code
WITHOUT_CLASSIFICATION	// generate fixnums initialization code
WITHOUT_CLASSIFICATION	// generate constants initialization code
WITHOUT_CLASSIFICATION	// generate regexps initialization code
WITHOUT_CLASSIFICATION	// generate regexps initialization code
WITHOUT_CLASSIFICATION	// generate variable readers initialization code
WITHOUT_CLASSIFICATION	// generate variable writers initialization code
WITHOUT_CLASSIFICATION	// generate block bodies initialization code
WITHOUT_CLASSIFICATION	// generate block bodies initialization code
WITHOUT_CLASSIFICATION	// generate bytelists initialization code
WITHOUT_CLASSIFICATION	// generate method cache initialization code
WITHOUT_CLASSIFICATION	// adapter, tc, recv, args{0,1}, block{0,1}]
WITHOUT_CLASSIFICATION	// use IRubyObject[]
WITHOUT_CLASSIFICATION	// do nothing, fall back on default compiler below
WITHOUT_CLASSIFICATION	// if more than 4 locals, get the locals array too
WITHOUT_CLASSIFICATION	// No point in updating number if last number was same value.
WITHOUT_CLASSIFICATION	// load Object under value
WITHOUT_CLASSIFICATION	// put under object array already present
WITHOUT_CLASSIFICATION	// if element count is less than 6, use helper methods
WITHOUT_CLASSIFICATION	// This is pretty inefficient for building an array, so just raise an error if someone's using it for a lot of elements
WITHOUT_CLASSIFICATION	// if we have a specific-arity helper to construct an array for us, use that
WITHOUT_CLASSIFICATION	// if we have a specific-arity helper to construct an array for us, use that
WITHOUT_CLASSIFICATION	// brute force construction inline
WITHOUT_CLASSIFICATION	// brute force construction inline
WITHOUT_CLASSIFICATION	// use specific-arity for as much as possible
WITHOUT_CLASSIFICATION	// call isTrue on the result
WITHOUT_CLASSIFICATION	// call isTrue on the result
WITHOUT_CLASSIFICATION	// call isTrue on the result
WITHOUT_CLASSIFICATION	// EQ == 0 (i.e. false)
WITHOUT_CLASSIFICATION	// dup it since we need to return appropriately if it's false
WITHOUT_CLASSIFICATION	// dup it since we need to return appropriately if it's false
WITHOUT_CLASSIFICATION	// clear body or next result after each successful loop
WITHOUT_CLASSIFICATION	// check the condition
WITHOUT_CLASSIFICATION	// NE == nonzero (i.e. true)
WITHOUT_CLASSIFICATION	// skip catch block
WITHOUT_CLASSIFICATION	// catch logic for flow-control: next, break
WITHOUT_CLASSIFICATION	// next jump
WITHOUT_CLASSIFICATION	// exceptionNext target is for a next that doesn't push a new value, like this one
WITHOUT_CLASSIFICATION	// grab nil for local variables
WITHOUT_CLASSIFICATION	// grab nil for local variables
WITHOUT_CLASSIFICATION	// EQ == 0 (i.e. false)
WITHOUT_CLASSIFICATION	// clear body or next result after each successful loop
WITHOUT_CLASSIFICATION	// EQ == 0 (i.e. false) // pop the extra result and replace with the send part of the AND
WITHOUT_CLASSIFICATION	// check the condition
WITHOUT_CLASSIFICATION	// NE == nonzero (i.e. true)
WITHOUT_CLASSIFICATION	// synthetic methods always have zero arg parameters
WITHOUT_CLASSIFICATION	// break jump
WITHOUT_CLASSIFICATION	// Done with closure compilation
WITHOUT_CLASSIFICATION	//[reg]
WITHOUT_CLASSIFICATION	// for regular expressions with the /o flag
WITHOUT_CLASSIFICATION	// inside a loop, jump to body
WITHOUT_CLASSIFICATION	// inside a loop, jump to conditional
WITHOUT_CLASSIFICATION	// synthetic methods always have zero arg parameters
WITHOUT_CLASSIFICATION	// store previous exception for restoration if we rescue something
WITHOUT_CLASSIFICATION	// store previous exception for restoration if we rescue something
WITHOUT_CLASSIFICATION	// if more than 4 vars, get values array too
WITHOUT_CLASSIFICATION	// retry handling in the rescue block
WITHOUT_CLASSIFICATION	// any exceptions raised must continue to be raised, skipping $! restoration
WITHOUT_CLASSIFICATION	// and remaining jump exceptions should restore $!
WITHOUT_CLASSIFICATION	// restore the original exception
WITHOUT_CLASSIFICATION	// Handle Flow exceptions, just propagating them
WITHOUT_CLASSIFICATION	// rethrow to outer flow catcher
WITHOUT_CLASSIFICATION	// Handle Ruby exceptions (RaiseException)
WITHOUT_CLASSIFICATION	// inside a loop, break out of it // go to end of loop, leaving break value on stack
WITHOUT_CLASSIFICATION	// false // zero
WITHOUT_CLASSIFICATION	// load all arguments straight through
WITHOUT_CLASSIFICATION	// and remaining jump exceptions should restore $!
WITHOUT_CLASSIFICATION	// restore the original exception
WITHOUT_CLASSIFICATION	// retry handling in the rescue blocks
WITHOUT_CLASSIFICATION	// push false
WITHOUT_CLASSIFICATION	//method.invokeinterface(p(IRubyObject.class), "getInstanceVariable", sig(IRubyObject.class, params(String.class)));
WITHOUT_CLASSIFICATION	//method.ifnonnull(trueLabel);
WITHOUT_CLASSIFICATION	// EQ == 0 (i.e. false)   //[C]
WITHOUT_CLASSIFICATION	//[C, C] //[C, C, String] //[C, null|C]
WITHOUT_CLASSIFICATION	//[C]
WITHOUT_CLASSIFICATION	// push true
WITHOUT_CLASSIFICATION	// EQ != 0 (i.e. true)
WITHOUT_CLASSIFICATION	//[?, ?] //[?, boolean]
WITHOUT_CLASSIFICATION	//[RubyModule] //[RubyModule, String]
WITHOUT_CLASSIFICATION	//[boolean]
WITHOUT_CLASSIFICATION	// no receiver for singleton class
WITHOUT_CLASSIFICATION	// but there's a superclass passed in, use it
WITHOUT_CLASSIFICATION	// we re-set self to the class, but store the old self in a temporary local variable // this is to prevent it GCing in case the singleton is short-lived
WITHOUT_CLASSIFICATION	// set self to the class
WITHOUT_CLASSIFICATION	// CLASS BODY
WITHOUT_CLASSIFICATION	// static scope
WITHOUT_CLASSIFICATION	// Here starts the logic for the class definition
WITHOUT_CLASSIFICATION	// new instance to invoke run against
WITHOUT_CLASSIFICATION	// CLASS BODY
WITHOUT_CLASSIFICATION	// static scope
WITHOUT_CLASSIFICATION	// Here starts the logic for the class definition
WITHOUT_CLASSIFICATION	// finally with exception
WITHOUT_CLASSIFICATION	// prepare to call class definition method
WITHOUT_CLASSIFICATION	// otherwise, there's a receiver, so we pass that in directly for the sclass logic
WITHOUT_CLASSIFICATION	// original exception is on stack
WITHOUT_CLASSIFICATION	// RaiseException is on stack, get RubyException out
WITHOUT_CLASSIFICATION	// updating position for same line; skip
WITHOUT_CLASSIFICATION	// callbacks to fill in method body
WITHOUT_CLASSIFICATION	// prepare to call "def" utility method to handle def logic
WITHOUT_CLASSIFICATION	// script object
WITHOUT_CLASSIFICATION	// arities
WITHOUT_CLASSIFICATION	// TODO assuming case is a fixnum
WITHOUT_CLASSIFICATION	// we have an input case, prepare branching logic
WITHOUT_CLASSIFICATION	// we have optimized switch cases, build a lookupswitch
WITHOUT_CLASSIFICATION	// checkcast the value; if match, fast path; otherwise proceed to slow logic
WITHOUT_CLASSIFICATION	// expression-based tests + bodies
WITHOUT_CLASSIFICATION	// normal case, create a new label
WITHOUT_CLASSIFICATION	// last conditional case, use defaultCase
WITHOUT_CLASSIFICATION	// do nothing; arity check is done before call
WITHOUT_CLASSIFICATION	// just confirm minimum args provided
WITHOUT_CLASSIFICATION	// just confirm args length == required
WITHOUT_CLASSIFICATION	// extract item from array
WITHOUT_CLASSIFICATION	// index for the item
WITHOUT_CLASSIFICATION	// index for the item
WITHOUT_CLASSIFICATION	// prepare labels for opt logic
WITHOUT_CLASSIFICATION	// prepare labels for opt logic
WITHOUT_CLASSIFICATION	// next, iterate over all optional args, until no more arguments
WITHOUT_CLASSIFICATION	// next, iterate over all optional args, until no more arguments
WITHOUT_CLASSIFICATION	// now logic for each optional value
WITHOUT_CLASSIFICATION	// otherwise no items left available, use the code for default
WITHOUT_CLASSIFICATION	// pop extra failed value from first cycle and we're done
WITHOUT_CLASSIFICATION	// if there's args left and we want them, assign to rest arg
WITHOUT_CLASSIFICATION	// assign remaining elements as an array for rest args (or empty array)
WITHOUT_CLASSIFICATION	// block argument assignment, if there's a block arg
WITHOUT_CLASSIFICATION	// first, iterate over all pre args
WITHOUT_CLASSIFICATION	// then optional args
WITHOUT_CLASSIFICATION	// grab nil for local variables
WITHOUT_CLASSIFICATION	// now logic for each optional value
WITHOUT_CLASSIFICATION	// otherwise no items left available, use the code for default
WITHOUT_CLASSIFICATION	// pop extra failed value from first cycle and we're done
WITHOUT_CLASSIFICATION	// assign remaining elements as an array for rest args (or empty array)
WITHOUT_CLASSIFICATION	// block argument assignment, if there's a block arg
WITHOUT_CLASSIFICATION	// if rest args, excluding post args
WITHOUT_CLASSIFICATION	// finally, post args
WITHOUT_CLASSIFICATION	// not an expression, don't want result; pop it
WITHOUT_CLASSIFICATION	// not an expression, don't want result; pop it
WITHOUT_CLASSIFICATION	// unwrap scopes to appropriate depth
WITHOUT_CLASSIFICATION	// fill in all vars with nil so compiler is happy about future accesses
WITHOUT_CLASSIFICATION	// chain to the next segment of this giant method
WITHOUT_CLASSIFICATION	// temp locals must start after last real local
WITHOUT_CLASSIFICATION	// temp locals must start after last real local
WITHOUT_CLASSIFICATION	// declare locals for Java debugging purposes
WITHOUT_CLASSIFICATION	// class bodies prepare their own dynamic scope, so let it do that
WITHOUT_CLASSIFICATION	// store the local vars in a local variable
WITHOUT_CLASSIFICATION	// load args[0] which will be the IRubyObject representing block args
WITHOUT_CLASSIFICATION	// return in a class body raises error
WITHOUT_CLASSIFICATION	// visit a label to start scoping for local vars in this method
WITHOUT_CLASSIFICATION	// return last value from execution
WITHOUT_CLASSIFICATION	// end of variable scope
WITHOUT_CLASSIFICATION	// method is done, declare all variables
WITHOUT_CLASSIFICATION	// load block from [] version of method
WITHOUT_CLASSIFICATION	// normal return for method body. return jump for within a begin/rescue/ensure
WITHOUT_CLASSIFICATION	// declare locals for Java debugging purposes
WITHOUT_CLASSIFICATION	// class bodies prepare their own dynamic scope, so let it do that
WITHOUT_CLASSIFICATION	// load args[0] which will be the IRubyObject representing block args
WITHOUT_CLASSIFICATION	// we force argParamCount to 1 since we always know we'll have [] args
WITHOUT_CLASSIFICATION	// chain to the next segment of this giant method
WITHOUT_CLASSIFICATION	// chain to the next segment of this giant method
WITHOUT_CLASSIFICATION	// load all arguments straight through
WITHOUT_CLASSIFICATION	// load all arguments straight through
WITHOUT_CLASSIFICATION	// we append an index to ensure two identical method names will not conflict
WITHOUT_CLASSIFICATION	// we append an index to ensure two identical method names will not conflict
WITHOUT_CLASSIFICATION	// store the local vars in a local variable if there are any
WITHOUT_CLASSIFICATION	// if more than 4 locals, get and populate the locals array too
WITHOUT_CLASSIFICATION	// fill local vars with nil, to avoid checking every access.
WITHOUT_CLASSIFICATION	// default for starting tempVariableIndex is ok
WITHOUT_CLASSIFICATION	// store the local vars in a local variable for preparing the class (using previous scope)
WITHOUT_CLASSIFICATION	// store the new local vars in a local variable
WITHOUT_CLASSIFICATION	// in 1.8 mode, this will be a RubyArray containing the arguments // in 1.9 mode, this will be an IRubyObject[]
WITHOUT_CLASSIFICATION	// no variable initialization, because we're reusing parent's scope (flat)
WITHOUT_CLASSIFICATION	// for specific-index cases, clean up non-expression values
WITHOUT_CLASSIFICATION	// set up a local Ruby variable
WITHOUT_CLASSIFICATION	// if that succeeds, the others should as well
WITHOUT_CLASSIFICATION	// verify the class
WITHOUT_CLASSIFICATION	// create dir if necessary
WITHOUT_CLASSIFICATION	// Create the class with the appropriate class name and source file
WITHOUT_CLASSIFICATION	// add setPosition impl, which stores filename as constant to speed updates
WITHOUT_CLASSIFICATION	// thread context
WITHOUT_CLASSIFICATION	// line number
WITHOUT_CLASSIFICATION	// invoke __file__ with threadcontext, self, args (null), and block (null)
WITHOUT_CLASSIFICATION	// load always uses IRubyObject[], so simple closure offset calculation here
WITHOUT_CLASSIFICATION	// return last value from execution
WITHOUT_CLASSIFICATION	// method is done, declare all variables
WITHOUT_CLASSIFICATION	// in method body with no containing loop, issue jump error // load runtime and value, issue jump error
WITHOUT_CLASSIFICATION	// block
WITHOUT_CLASSIFICATION	// block
WITHOUT_CLASSIFICATION	// we force argParamCount to 1 since we always know we'll have [] args
WITHOUT_CLASSIFICATION	// chain to the next segment of this giant method
WITHOUT_CLASSIFICATION	// load all arguments straight through
WITHOUT_CLASSIFICATION	// we append an index to ensure two identical method names will not conflict
WITHOUT_CLASSIFICATION	// add Script#run impl, used for running this script with a specified threadcontext and self // root method of a script is always in __file__ method
WITHOUT_CLASSIFICATION	// add main impl, used for detached or command-line execution of this script with a new runtime // root method of a script is always in stub0, method0
WITHOUT_CLASSIFICATION	// construct static scope list of names
WITHOUT_CLASSIFICATION	// JRUBY-3014: make __FILE__ dynamically determined at load time, but // we provide a reasonable default here
WITHOUT_CLASSIFICATION	// ignore; we won't use invokedynamic
WITHOUT_CLASSIFICATION	// ignore; we won't use invokedynamic
WITHOUT_CLASSIFICATION	// lazily create class init only if necessary
WITHOUT_CLASSIFICATION	// boxed arg list __file__
WITHOUT_CLASSIFICATION	// invoke static __file__
WITHOUT_CLASSIFICATION	// exact arg list __file__
WITHOUT_CLASSIFICATION	// declare the field
WITHOUT_CLASSIFICATION	// declare the field
WITHOUT_CLASSIFICATION	// not using a new scope, use saved one for a flat closure
WITHOUT_CLASSIFICATION	// normal closure
WITHOUT_CLASSIFICATION	// end of scoping for closure's vars
WITHOUT_CLASSIFICATION	// we only need full-on redo exception handling if there's logic that might produce it
WITHOUT_CLASSIFICATION	// handle redos by restarting the block
WITHOUT_CLASSIFICATION	// jump back to the top of the main body of this closure
WITHOUT_CLASSIFICATION	// Ruby name 
WITHOUT_CLASSIFICATION	// Accumulate call arguments
WITHOUT_CLASSIFICATION	// Fix FileNameCompletor to work mid-line
WITHOUT_CLASSIFICATION	// We need to ensure that the variable names generated here cannot conflict with ruby variable names! // Hence the "%" tthat is appended to the beginning!
WITHOUT_CLASSIFICATION	// Does this method define code?  // Default is yes -- which basically leads to pessimistic but safe optimizations // But, for library and internal methods, this might be false.
WITHOUT_CLASSIFICATION	// Map of constants defined in this scope (not valid for methods!)
WITHOUT_CLASSIFICATION	// NOTE: Since we are processing ASTs, loop bodies are processed in depth-first manner // with outer loops encountered before inner loops, and inner loops finished before outer ones. // // So, we can keep track of loops in a loop stack which  keeps track of loops as they are encountered. // This lets us implement next/redo/break/retry easily for the non-closure cases
WITHOUT_CLASSIFICATION	// Map keep track of the next available variable index for a particular prefix
WITHOUT_CLASSIFICATION	// Control flow graph for this scope
WITHOUT_CLASSIFICATION	//        _lexicalNestingLevel = lexicalParent == null ? 0 : ((IR_ScopeImpl)lexicalParent)._lexicalNestingLevel + 1;
WITHOUT_CLASSIFICATION	// List of modules, classes, and methods defined in this scope!
WITHOUT_CLASSIFICATION	// Returns the containing parent scope!
WITHOUT_CLASSIFICATION	// Insert nesting level to ensure variable names don't conflict across nested scopes! // i.e. definition of %v_1 in a closure shouldn't override the use of %v_1 from the parent scope! //        return new Variable(prefix + _lexicalNestingLevel + "_" + idx);
WITHOUT_CLASSIFICATION	// get "self"
WITHOUT_CLASSIFICATION	// variable is never read, variable is never live
WITHOUT_CLASSIFICATION	// inline script
WITHOUT_CLASSIFICATION	// inline script
WITHOUT_CLASSIFICATION	// This method is called to build assignments for a multiple-assignment instruction
WITHOUT_CLASSIFICATION	// Build the class body!
WITHOUT_CLASSIFICATION	// unwrap newline nodes to get their actual type
WITHOUT_CLASSIFICATION	// unwrap newline nodes to get their actual type
WITHOUT_CLASSIFICATION	// SSS FIXME: Can this ever be null?
WITHOUT_CLASSIFICATION	// Run the pass on the passed in scope!
WITHOUT_CLASSIFICATION	// done // done // done // done
WITHOUT_CLASSIFICATION	// NOTE: if 's' happens to the a class, this is effectively an assignment of a class instance variable
WITHOUT_CLASSIFICATION	// NOTE: if 's' happens to the a class, this is effectively an assignment of a class instance variable
WITHOUT_CLASSIFICATION	// This method is called to build arguments for a block!
WITHOUT_CLASSIFICATION	// build first node (and ignore its result) and then second node
WITHOUT_CLASSIFICATION	// build first node only and return false
WITHOUT_CLASSIFICATION	// Value of the last expression in the block 
WITHOUT_CLASSIFICATION	// If this is not a closure, the break is equivalent to jumping to the loop end label
WITHOUT_CLASSIFICATION	// get the incoming case value
WITHOUT_CLASSIFICATION	// the CASE instruction
WITHOUT_CLASSIFICATION	// lists to aggregate variables and bodies for whens
WITHOUT_CLASSIFICATION	// build each "when"
WITHOUT_CLASSIFICATION	// multiple conditions for when
WITHOUT_CLASSIFICATION	// build "else" if it exists
WITHOUT_CLASSIFICATION	// now emit bodies
WITHOUT_CLASSIFICATION	// close it out
WITHOUT_CLASSIFICATION	// By default, the container for this class is 's'
WITHOUT_CLASSIFICATION	// Do we have a dynamic container?
WITHOUT_CLASSIFICATION	// Return a meta object corresponding to the class
WITHOUT_CLASSIFICATION	// 1. Load the module first (lhs of node) // 2. Then load the constant from the module
WITHOUT_CLASSIFICATION	// Build IR for args
WITHOUT_CLASSIFICATION	// Build IR for body
WITHOUT_CLASSIFICATION	// if root of method is rescue, build as a light rescue
WITHOUT_CLASSIFICATION	// Instance method
WITHOUT_CLASSIFICATION	// Class method
WITHOUT_CLASSIFICATION	// Other args begin at index 1
WITHOUT_CLASSIFICATION	// Both for fixed arity and variable arity methods
WITHOUT_CLASSIFICATION	// Now for the rest
WITHOUT_CLASSIFICATION	// Jump to 'l' if this arg is not null.  If null, fall through and build the default value!
WITHOUT_CLASSIFICATION	// This is not an expression that computes anything
WITHOUT_CLASSIFICATION	// Create a new closure context
WITHOUT_CLASSIFICATION	// Build args
WITHOUT_CLASSIFICATION	// Build closure body and return the result of the closure
WITHOUT_CLASSIFICATION	// Assign the closure to the block variable in the parent scope and return it
WITHOUT_CLASSIFICATION	// By default, the container for this class is 's'
WITHOUT_CLASSIFICATION	// Create a new closure context
WITHOUT_CLASSIFICATION	// Build args
WITHOUT_CLASSIFICATION	// Assign the closure to the block variable in the parent scope and return it
WITHOUT_CLASSIFICATION	// Get the container for this new module
WITHOUT_CLASSIFICATION	// Build the new module
WITHOUT_CLASSIFICATION	// Build the module body
WITHOUT_CLASSIFICATION	// First, build an assignment for a splat, if any, with the rest of the args!
WITHOUT_CLASSIFICATION	// rest of the argument array!
WITHOUT_CLASSIFICATION	// If a closure, the next is simply a return from the closure! // If a regular loop, the next is simply a jump to the end of the iteration
WITHOUT_CLASSIFICATION	// get attr
WITHOUT_CLASSIFICATION	// call operator
WITHOUT_CLASSIFICATION	// set attr
WITHOUT_CLASSIFICATION	// Translate "x &&= y" --> "x = (is_true(x) ? y : false)" --> //  //    x = -- build(x) should return a variable! -- //    f = is_true(x) //    beq(f, false, L) //    x = -- build(y) -- // L: //
WITHOUT_CLASSIFICATION	// This does the assignment!
WITHOUT_CLASSIFICATION	// This does the assignment!
WITHOUT_CLASSIFICATION	// if v1 is defined and true, we are done! 
WITHOUT_CLASSIFICATION	// build first node only and return true
WITHOUT_CLASSIFICATION	// build first node as non-expr and build second node
WITHOUT_CLASSIFICATION	// Top-level script!
WITHOUT_CLASSIFICATION	// we won't enter the loop -- just build the condition node
WITHOUT_CLASSIFICATION	/* ----------- Private Interface ------------ */
WITHOUT_CLASSIFICATION	// What handles warnings
WITHOUT_CLASSIFICATION	// Tries to load at compile-time the constant referred to by 'constRef'. // This might be possible if the constant is defined and is not a forward reference // to a value that will be defined later in the class.
WITHOUT_CLASSIFICATION	// For closures, a redo is a jump to the beginning of the closure // For non-closures, a redo is a jump to the beginning of the loop
WITHOUT_CLASSIFICATION	// The "root" method of a class -- the scope in which all definitions, and class code executes, equivalent to java clinit
WITHOUT_CLASSIFICATION	// Dummy top-level method for the class
WITHOUT_CLASSIFICATION	// Build a dummy static method for the class -- the scope in which all definitions, and class code executes, equivalent to java clinit
WITHOUT_CLASSIFICATION	// ------ Define the operations below ----
WITHOUT_CLASSIFICATION	// value copy and type conversion operations
WITHOUT_CLASSIFICATION	// alu operations
WITHOUT_CLASSIFICATION	// method handle, arg receive, return value, and  call instructions
WITHOUT_CLASSIFICATION	// closure instructions
WITHOUT_CLASSIFICATION	// eval instructions
WITHOUT_CLASSIFICATION	// def instructions
WITHOUT_CLASSIFICATION	// exception instructions
WITHOUT_CLASSIFICATION	// Loads
WITHOUT_CLASSIFICATION	// Stores
WITHOUT_CLASSIFICATION	// jump and branch operations
WITHOUT_CLASSIFICATION	// others
WITHOUT_CLASSIFICATION	// a case/when branch
WITHOUT_CLASSIFICATION	// optimization guards
WITHOUT_CLASSIFICATION	// By default, call instructions cannot be deleted even if their results aren't used by anyone // unless we know more about what the call is, what it does, etc. // Similarly for evals, stores, returns.
WITHOUT_CLASSIFICATION	// Returns the containing parent scope -- can be a dynamic value (hence Operand)!
WITHOUT_CLASSIFICATION	// scripts
WITHOUT_CLASSIFICATION	// scripts and modules
WITHOUT_CLASSIFICATION	// scripts, classes, and modules
WITHOUT_CLASSIFICATION	// methods and closures
WITHOUT_CLASSIFICATION	// create a new variable using the prefix
WITHOUT_CLASSIFICATION	// create a new temporary variable
WITHOUT_CLASSIFICATION	// Get a new label using a generic prefix
WITHOUT_CLASSIFICATION	// Build the CFG for this scope -- supported only by methods & closures
WITHOUT_CLASSIFICATION	// Get the control flow graph for this scope -- only valid for methods & closures
WITHOUT_CLASSIFICATION	// While processing loops, this returns the loop that we are processing.
WITHOUT_CLASSIFICATION	// Record the loop we are beginning to process
WITHOUT_CLASSIFICATION	// Indicate that we are done processing the loop
WITHOUT_CLASSIFICATION	// Run the passed in compiler pass on this scope!
WITHOUT_CLASSIFICATION	// Should we run this pass on the current scope before running it on nested scopes?
WITHOUT_CLASSIFICATION	// Readline
WITHOUT_CLASSIFICATION	// If the cfg of the method is around, print the CFG!
WITHOUT_CLASSIFICATION	// Optimize some core class method calls for constant values
WITHOUT_CLASSIFICATION	// If 'r' is not a constant, it could actually be a compound value! // Look in our value map to see if we have a simplified value for the receiver.
WITHOUT_CLASSIFICATION	// Check if we can optimize this call based on the receiving method and receiver type // Use the simplified receiver!
WITHOUT_CLASSIFICATION	// If we got a simplified value, mark the call dead and insert a copy in its place!
WITHOUT_CLASSIFICATION	// If the call has been optimized away in the previous step, it is no longer a hard boundary for opts!
WITHOUT_CLASSIFICATION	/* ----------- Public abstract methods ---------- */
WITHOUT_CLASSIFICATION	/* ----------- Public methods with a default implementation ---------- */
WITHOUT_CLASSIFICATION	// Compute meet over all "sources" and compute "destination" basic blocks that should then be processed.  // sources & targets depends on direction of the data flow problem
WITHOUT_CLASSIFICATION	// If the solution has changed, add "dsts" to the work list. // No duplicates please which is why we have bbset.
WITHOUT_CLASSIFICATION	/* --------- Protected fields/methods below --------- */
WITHOUT_CLASSIFICATION	// Dataflow problem with which this node is associated // CFG node for which this node contains info.
WITHOUT_CLASSIFICATION	/* -------------- Public fields and methods below ---------------- */
WITHOUT_CLASSIFICATION	// ------- Abstract methods without a default implementation -------
WITHOUT_CLASSIFICATION	// ------- Default implementation methods below -------
WITHOUT_CLASSIFICATION	/* Compute Meet Over All Paths solution for this dataflow problem on the input CFG.     * This implements a standard worklist algorithm. */
WITHOUT_CLASSIFICATION	/* Individual analyses should override this */
WITHOUT_CLASSIFICATION	/* Individual analyses should override this */
WITHOUT_CLASSIFICATION	/* -------------- Packaged/protected fields and methods below ---------------- */
WITHOUT_CLASSIFICATION	// We want unique ids for dataflow variables
WITHOUT_CLASSIFICATION	/* -------------- Protected fields and methods below ---------------- */
WITHOUT_CLASSIFICATION	/* -------------- Private fields and methods below ---------------- */
WITHOUT_CLASSIFICATION	// Initialize all flow graph nodes 
WITHOUT_CLASSIFICATION	/* Lattice TOP, BOTTOM, ANY values -- these will be used during dataflow analyses */
WITHOUT_CLASSIFICATION	/* ******************** PUBLIC INTERFACE ******************* */
WITHOUT_CLASSIFICATION	// Unique ID assigned to this variable
WITHOUT_CLASSIFICATION	// start out with a default RubyObject allocator
WITHOUT_CLASSIFICATION	// switch to an allocator based on a default constructor
WITHOUT_CLASSIFICATION	/* ----------- Public Interface ------------ */
WITHOUT_CLASSIFICATION	// class or module
WITHOUT_CLASSIFICATION	// OUT = UNION(IN(succs))
WITHOUT_CLASSIFICATION	// Traverse the instructions in this basic block in reverse order!
WITHOUT_CLASSIFICATION	// v is defined => It is no longer live before 'i'
WITHOUT_CLASSIFICATION	// IN is the same!
WITHOUT_CLASSIFICATION	// IN changed!
WITHOUT_CLASSIFICATION	/* ---------- Protected / package fields, methods --------- */
WITHOUT_CLASSIFICATION	// If 'v' is not live at the instruction site, and it has no side effects, mark it dead!
WITHOUT_CLASSIFICATION	// Do not mark this instruction's operands live if the instruction itself is dead!
WITHOUT_CLASSIFICATION	/* ---------- Private fields, methods --------- */
WITHOUT_CLASSIFICATION	// Variables live at entry of this node // Variables live at exit of node // Temporary set of live variables // Size of the "_in" and "_out" bit sets 
WITHOUT_CLASSIFICATION	// Used during optimization passes to propagate type and other information
WITHOUT_CLASSIFICATION	// Does this instruction have side effects as a result of its operation // This information is used in optimization phases to impact dead code elimination // and other optimization passes
WITHOUT_CLASSIFICATION	/* --------- "Abstract"/"please-override" methods --------- */
WITHOUT_CLASSIFICATION	/* Array of all operands for this instruction */
WITHOUT_CLASSIFICATION	/* List of all variables used by all operands of this instruction */
WITHOUT_CLASSIFICATION	/*      * This method takes as input a map of operands to their values, and outputs     *     * If the value map provides a value for any of the instruction's operands     * this method is expected to replace the original operands with the simplified values.     * It is not required that it do so -- code correctness is not compromised by failure     * to simplify     */
WITHOUT_CLASSIFICATION	// By default, no simplifications!
WITHOUT_CLASSIFICATION	// Can this call lead to ruby code getting modified?   // If we don't know what method we are calling, we assume it can (pessimistic, but safe!) // If we do know the target method, we ask the method itself whether it modifies ruby code
WITHOUT_CLASSIFICATION	// By default, return instructions cannot be deleted
WITHOUT_CLASSIFICATION	// If true, returns the rest of the array starting at the index
WITHOUT_CLASSIFICATION	// ---------- These methods below are used during compile-time optimizations ------- 
WITHOUT_CLASSIFICATION	// Map of label & basic blocks with that label
WITHOUT_CLASSIFICATION	// ---------- These methods below are used during compile-time optimizations ------- 
WITHOUT_CLASSIFICATION	// You can only value-replace atomic values
WITHOUT_CLASSIFICATION	// If divisor is zero, don't simplify!
WITHOUT_CLASSIFICATION	// If divisor is zero, don't simplify!
WITHOUT_CLASSIFICATION	// If divisor is zero, don't simplify!
WITHOUT_CLASSIFICATION	// For simplification, get the target value, even if compound
WITHOUT_CLASSIFICATION	// For simplification, get the target value, even if compound
WITHOUT_CLASSIFICATION	// The operand that this attribute targets //    DEFERRED //    AttributeValue _val;       // Attribute value
WITHOUT_CLASSIFICATION	// Arrays, Ranges, etc. are compound values // Variables, fixnums, floats, etc. are "atomic" values
WITHOUT_CLASSIFICATION	// Get the target class of this operand, if we know it!
WITHOUT_CLASSIFICATION	// The following constants capture pre-known static call sites -- used to implement ruby internals
WITHOUT_CLASSIFICATION	/* Nothing to do by default */
WITHOUT_CLASSIFICATION	// Map of label & basic blocks which are waiting for a bb with that label
WITHOUT_CLASSIFICATION	// Init before building basic blocks below!
WITHOUT_CLASSIFICATION	// ignore
WITHOUT_CLASSIFICATION	// Scope (method/closure) to which this cfg belongs // Entry BB -- dummy // Exit BB -- dummy // The actual graph // Next available basic block id
WITHOUT_CLASSIFICATION	// Jump instruction bbs dont add an edge to the succeeding bb by default
WITHOUT_CLASSIFICATION	// Add forward ref. edges
WITHOUT_CLASSIFICATION	// currBB cannot be null!
WITHOUT_CLASSIFICATION	// Add a forward reference from tgt -> currBB
WITHOUT_CLASSIFICATION	// root-level logic
WITHOUT_CLASSIFICATION	// root-level methods
WITHOUT_CLASSIFICATION	// root-level classes
WITHOUT_CLASSIFICATION	//        case 4: //            signature = sig(Object.class, Object.class, Object.class, Object.class, Object.class); //            break; //        case 5: //            signature = sig(Object.class, Object.class, Object.class, Object.class, Object.class, Object.class); //            break;
WITHOUT_CLASSIFICATION	// load receiver
WITHOUT_CLASSIFICATION	// load receiver
WITHOUT_CLASSIFICATION	// receiver
WITHOUT_CLASSIFICATION	// load arguments
WITHOUT_CLASSIFICATION	// load arguments
WITHOUT_CLASSIFICATION	//        case 4: //        case 5:
WITHOUT_CLASSIFICATION	// Object[] args
WITHOUT_CLASSIFICATION	// load handle
WITHOUT_CLASSIFICATION	// args array
WITHOUT_CLASSIFICATION	// i'th argument
WITHOUT_CLASSIFICATION	// invoke specific arity version
WITHOUT_CLASSIFICATION	// Object arg0
WITHOUT_CLASSIFICATION	// useful for code completion inside the IRB
WITHOUT_CLASSIFICATION	// No editing before startPos
WITHOUT_CLASSIFICATION	// no silly ticks!
WITHOUT_CLASSIFICATION	// no candidates? Fail.
WITHOUT_CLASSIFICATION	// at end
WITHOUT_CLASSIFICATION	// undo check
WITHOUT_CLASSIFICATION	// Explicit reference to these vars as symbols...
WITHOUT_CLASSIFICATION	// ignore
WITHOUT_CLASSIFICATION	//\t\n\"\\'`@$><=;|&{(
WITHOUT_CLASSIFICATION	// Assign the values.
WITHOUT_CLASSIFICATION	// no check for '*'
WITHOUT_CLASSIFICATION	// no check for '*'
WITHOUT_CLASSIFICATION	// Binding provided for scope, use it
WITHOUT_CLASSIFICATION	// this is ensured by the callers
WITHOUT_CLASSIFICATION	// no binding, just eval in "current" frame (caller's frame)
WITHOUT_CLASSIFICATION	// restore position
WITHOUT_CLASSIFICATION	/* Something like cvar_cbase() from eval.c, factored out for the benefit     * of all the classvar-related node evaluations */
WITHOUT_CLASSIFICATION	// Used by the compiler to simplify arg processing
WITHOUT_CLASSIFICATION	// JRUBY-2673: if wrapping a NativeException, use the actual Java exception's trace as our Java trace
WITHOUT_CLASSIFICATION	// MRI does similar thing on MacOS X with 'EditLine wrapper'.
WITHOUT_CLASSIFICATION	// We lazily initialize this in case Readline.readline has been overridden in ruby (s_readline)
WITHOUT_CLASSIFICATION	// JRUBY-852, ignore escape key (it causes IRB to quit if we pass it out through readline)
WITHOUT_CLASSIFICATION	// not overridden, let's go
WITHOUT_CLASSIFICATION	/* Explicitly use UTF-8 here. c.f. history.addToHistory using line.asUTF8() */
WITHOUT_CLASSIFICATION	// FIXME: JRUBY-3604
WITHOUT_CLASSIFICATION	// Complete using a Proc object
WITHOUT_CLASSIFICATION	// clear basename so it's anonymous when raising
WITHOUT_CLASSIFICATION	// These are not really used by timeout, but exposed for compatibility
WITHOUT_CLASSIFICATION	// Timeout module methods
WITHOUT_CLASSIFICATION	// Toplevel defines
WITHOUT_CLASSIFICATION	// No seconds, just yield
WITHOUT_CLASSIFICATION	// No timeout in critical section
WITHOUT_CLASSIFICATION	// if it's the exception we're expecting
WITHOUT_CLASSIFICATION	// and we were given a specific exception
WITHOUT_CLASSIFICATION	// otherwise, rethrow
WITHOUT_CLASSIFICATION	// // Remove the Executor task now, to avoid cancelled tasks accumulating // until an Executor thread can schedule and remove them //
WITHOUT_CLASSIFICATION	// // If the task was scheduled, wait for it to finish before polling // for the exception it would have thrown. //
WITHOUT_CLASSIFICATION	// NetProtocolBufferedIO
WITHOUT_CLASSIFICATION	/* When a length is given, read_string acts like get_bytes */
WITHOUT_CLASSIFICATION	// Replace memory object with one that throws an exception on any access
WITHOUT_CLASSIFICATION	// ARRAY and STRUCT are only used internally
WITHOUT_CLASSIFICATION	// If no release method is defined, then memory leaks will result.
WITHOUT_CLASSIFICATION	/*     * This variant of newStruct is called from StructLayoutBuilder     */
WITHOUT_CLASSIFICATION	// This also handles unsigned int -> negative signed int conversion
WITHOUT_CLASSIFICATION	// Windows is LLP64
WITHOUT_CLASSIFICATION	// Older JDK on linux map 'c' to 'libc.so' which doesn't work
WITHOUT_CLASSIFICATION	// Ensure room for terminating zero byte
WITHOUT_CLASSIFICATION	// $blah
WITHOUT_CLASSIFICATION	// Replace memory object with one that throws an exception on any access
WITHOUT_CLASSIFICATION	// // A specific version was requested - use as is for search //
WITHOUT_CLASSIFICATION	// Ensure room for terminating zero byte
WITHOUT_CLASSIFICATION	// // Keep a reference to the temporary memory in the cache so it does // not get freed by the GC until the struct is freed //
WITHOUT_CLASSIFICATION	// Add Pointer::NULL as a constant
WITHOUT_CLASSIFICATION	// Create the ordered list of field names from the map
WITHOUT_CLASSIFICATION	// Assemble a [ :name, offset ] array
WITHOUT_CLASSIFICATION	//                case FLOAT:
WITHOUT_CLASSIFICATION	// keep a reference to avoid the memory being freed
WITHOUT_CLASSIFICATION	// keep a reference to avoid the memory being freed
WITHOUT_CLASSIFICATION	// No auto cleanup needed
WITHOUT_CLASSIFICATION	// Wire up Function#call(*args) to use the super-fast native invokers
WITHOUT_CLASSIFICATION	// Get the convention from the options hash
WITHOUT_CLASSIFICATION	// Get the convention from the options hash
WITHOUT_CLASSIFICATION	/*         * If there is exactly _one_ callback argument to the function,         * then a block can be given and automatically subsituted for the callback         * parameter.         */
WITHOUT_CLASSIFICATION	/*------------------------------------------------------------------------*/
WITHOUT_CLASSIFICATION	//AF_INET
WITHOUT_CLASSIFICATION	//AF_INET
WITHOUT_CLASSIFICATION	// RubyUNIXServer
WITHOUT_CLASSIFICATION	// line 321
WITHOUT_CLASSIFICATION	// // Set up for potentially fast-int operations //
WITHOUT_CLASSIFICATION	// // Hook up the MemoryPointer class if its not already there //
WITHOUT_CLASSIFICATION	// This is a bit convoluted because (1) SocketChannel.bind is only in jdk 7 and // (2) Socket.getChannel() seems to return null in some cases
WITHOUT_CLASSIFICATION	// no UNIXSockets on Windows
WITHOUT_CLASSIFICATION	// Sockaddr_un has different structure on different platforms. // See JRUBY-2213 for more details.
WITHOUT_CLASSIFICATION	// There is something valid in the sun_path component
WITHOUT_CLASSIFICATION	// RubyIPSocket
WITHOUT_CLASSIFICATION	// host is nil or the empty string, bind to INADDR_ANY
WITHOUT_CLASSIFICATION	// host and port given
WITHOUT_CLASSIFICATION	// RubyUDPSocket
WITHOUT_CLASSIFICATION	// By default we always reverse lookup unless do_not_reverse_lookup set.
WITHOUT_CLASSIFICATION	// make sure descriptor is registered
WITHOUT_CLASSIFICATION	// continue with normal initialization
WITHOUT_CLASSIFICATION	// recv returns nil on EOF
WITHOUT_CLASSIFICATION	// Can't support the rest with Java
WITHOUT_CLASSIFICATION	// RubyBasicSocket
WITHOUT_CLASSIFICATION	// we don't have to define any that we don't support; see socket.c
WITHOUT_CLASSIFICATION	// mandatory constants we haven't implemented
WITHOUT_CLASSIFICATION	// constants webrick crashes without
WITHOUT_CLASSIFICATION	// More constants needed by specs
WITHOUT_CLASSIFICATION	// normal file descriptor..try to work with it
WITHOUT_CLASSIFICATION	// AF_INET
WITHOUT_CLASSIFICATION	// 255.255.255.255
WITHOUT_CLASSIFICATION	// 0.0.0.0
WITHOUT_CLASSIFICATION	//def self.getaddrinfo(host, port, family = nil, socktype = nil, protocol = nil, flags = nil)
WITHOUT_CLASSIFICATION	// line 323
WITHOUT_CLASSIFICATION	// can't set TC classloader
WITHOUT_CLASSIFICATION	// can't set TC classloader
WITHOUT_CLASSIFICATION	// ok, it's a socket...set values accordingly // just using AF_INET since we can't tell from SocketChannel...
WITHOUT_CLASSIFICATION	// datagram, set accordingly // again, AF_INET
WITHOUT_CLASSIFICATION	//IRubyObject family = args[2];
WITHOUT_CLASSIFICATION	// When Socket::AI_PASSIVE and host is nil, return 'any' address. 
WITHOUT_CLASSIFICATION	// The value of 1 is for Socket::AI_PASSIVE.
WITHOUT_CLASSIFICATION	// RubySocket
WITHOUT_CLASSIFICATION	// numeric host, use it for port
WITHOUT_CLASSIFICATION	//            e.printStackTrace();
WITHOUT_CLASSIFICATION	// we were woken up without being selected...poll for thread events and go back to sleep
WITHOUT_CLASSIFICATION	// otherwise one key has been selected (ours) so we get the channel and hand it off
WITHOUT_CLASSIFICATION	// no connection immediately accepted, let them try again
WITHOUT_CLASSIFICATION	// do nothing, just exit
WITHOUT_CLASSIFICATION	//nativeThread.setPriority(priority);
WITHOUT_CLASSIFICATION	// set thread context JRuby classloader here, for Ruby-owned thread
WITHOUT_CLASSIFICATION	// uber-ThreadKill catcher, since it should always just mean "be dead"
WITHOUT_CLASSIFICATION	// Call the thread's code
WITHOUT_CLASSIFICATION	// Someone called exit!, so we need to kill the main thread
WITHOUT_CLASSIFICATION	// restore context classloader, in case we're using a thread pool
WITHOUT_CLASSIFICATION	// be dead
WITHOUT_CLASSIFICATION	// loop until a context is available, to clean up softrefs that might have been collected
WITHOUT_CLASSIFICATION	// all threads in ruby thread group plus main thread
WITHOUT_CLASSIFICATION	// thread is not alive, skip it
WITHOUT_CLASSIFICATION	// future is done or cancelled, skip it
WITHOUT_CLASSIFICATION	// first, check if the sender has unreceived mail
WITHOUT_CLASSIFICATION	// then deliver mail to the target
WITHOUT_CLASSIFICATION	// UndefinedMethod should be immutable
WITHOUT_CLASSIFICATION	// Define a second version that doesn't take a block, so we have unique code paths for both cases.
WITHOUT_CLASSIFICATION	// invoke pre method stuff
WITHOUT_CLASSIFICATION	// main body
WITHOUT_CLASSIFICATION	// return jump handling
WITHOUT_CLASSIFICATION	// finally
WITHOUT_CLASSIFICATION	// return result if we're still good
WITHOUT_CLASSIFICATION	// redo jump handling
WITHOUT_CLASSIFICATION	// clear the redo
WITHOUT_CLASSIFICATION	// get runtime, create jump error, and throw it
WITHOUT_CLASSIFICATION	// throw redo error if we're still good
WITHOUT_CLASSIFICATION	// finally handling for abnormal exit
WITHOUT_CLASSIFICATION	//call post method stuff (exception raised)
WITHOUT_CLASSIFICATION	// No required specified, check actual number of required args
WITHOUT_CLASSIFICATION	// actual required is less than 3, so we use specific arity
WITHOUT_CLASSIFICATION	// actual required is greater than 3, raise error (we don't support actual required > 3)
WITHOUT_CLASSIFICATION	// simple path, no multimethod
WITHOUT_CLASSIFICATION	// in debug mode we append _DBG to class name to force it to regenerate (or use pre-generated debug version)
WITHOUT_CLASSIFICATION	// in debug mode we append _DBG to class name to force it to regenerate (or use pre-generated debug version)
WITHOUT_CLASSIFICATION	// normal all-rest method
WITHOUT_CLASSIFICATION	// for zero, one, two, three arities, JavaMethod.JavaMethod*.call(...IRubyObject[] args...) will check
WITHOUT_CLASSIFICATION	// promise to implement zero to N
WITHOUT_CLASSIFICATION	// return
WITHOUT_CLASSIFICATION	// just confirm minimum args provided
WITHOUT_CLASSIFICATION	// just confirm args length == required
WITHOUT_CLASSIFICATION	// confirm minimum args provided
WITHOUT_CLASSIFICATION	// confirm maximum not greater than optional
WITHOUT_CLASSIFICATION	// Raise an error if arity does not match requirements
WITHOUT_CLASSIFICATION	// tc
WITHOUT_CLASSIFICATION	// self // name
WITHOUT_CLASSIFICATION	// no args
WITHOUT_CLASSIFICATION	// variable args with block
WITHOUT_CLASSIFICATION	// variable args no block, load null block
WITHOUT_CLASSIFICATION	// zero args, no block; load NULL_BLOCK
WITHOUT_CLASSIFICATION	// one arg with block
WITHOUT_CLASSIFICATION	// one arg, no block; load NULL_BLOCK
WITHOUT_CLASSIFICATION	// two args with block
WITHOUT_CLASSIFICATION	// two args, no block; load NULL_BLOCK
WITHOUT_CLASSIFICATION	// three args with block
WITHOUT_CLASSIFICATION	// three args, no block; load NULL_BLOCK
WITHOUT_CLASSIFICATION	// load block if it accepts block
WITHOUT_CLASSIFICATION	// all other arg cases with block
WITHOUT_CLASSIFICATION	// all other arg cases without block
WITHOUT_CLASSIFICATION	// one arg, no block; do nothing
WITHOUT_CLASSIFICATION	// two args, no block; do nothing
WITHOUT_CLASSIFICATION	// three args, no block; do nothing
WITHOUT_CLASSIFICATION	// load target for invocations
WITHOUT_CLASSIFICATION	// load receiver as original type for virtual invocation
WITHOUT_CLASSIFICATION	// static invocation
WITHOUT_CLASSIFICATION	// virtual invocation
WITHOUT_CLASSIFICATION	// void return type, so we need to load a nil for returning below
WITHOUT_CLASSIFICATION	// normal finally and exit
WITHOUT_CLASSIFICATION	// promise to implement one to N
WITHOUT_CLASSIFICATION	//call post method stuff (exception raised)
WITHOUT_CLASSIFICATION	// these are only needed if we have a non-noop call config
WITHOUT_CLASSIFICATION	// method itself // ThreadContext // invoked name
WITHOUT_CLASSIFICATION	// method itself // ThreadContext // invoked name
WITHOUT_CLASSIFICATION	// singleton classes don't get their own visibility domain
WITHOUT_CLASSIFICATION	// For visibility we need real meta class and not anonymous one from class << self
WITHOUT_CLASSIFICATION	// SimpleInvocationMethod
WITHOUT_CLASSIFICATION	// never reached
WITHOUT_CLASSIFICATION	// promise to implement N with block
WITHOUT_CLASSIFICATION	// promise to implement zero to N with block
WITHOUT_CLASSIFICATION	// promise to implement one to N with block
WITHOUT_CLASSIFICATION	// promise to implement two to N with block
WITHOUT_CLASSIFICATION	// promise to implement zero to three with block
WITHOUT_CLASSIFICATION	// promise to implement one to three with block
WITHOUT_CLASSIFICATION	// promise to implement two to three with block
WITHOUT_CLASSIFICATION	// promise to implement three with block
WITHOUT_CLASSIFICATION	// promise to implement N
WITHOUT_CLASSIFICATION	// DumpingInvocationMethodFactory
WITHOUT_CLASSIFICATION	// We promote our box to being its own box since we're changing // visibilities, and need it to be reflected on this method object // independent of any other sharing the box.
WITHOUT_CLASSIFICATION	// Normally we could leave these to fall back on the superclass, but // since it dispatches through the [] version below, which may // dispatch through the []+block version, we can save it a couple hops // by overriding these here.
WITHOUT_CLASSIFICATION	// promise to implement two to N
WITHOUT_CLASSIFICATION	// promise to implement three to N
WITHOUT_CLASSIFICATION	// promise to implement zero to three
WITHOUT_CLASSIFICATION	// promise to implement one to three
WITHOUT_CLASSIFICATION	// promise to implement two to three
WITHOUT_CLASSIFICATION	// promise to implement three
WITHOUT_CLASSIFICATION	// all other arities use "n" dispatch path
WITHOUT_CLASSIFICATION	// load up object and add a few useful methods
WITHOUT_CLASSIFICATION	// open up the 'to_java' and 'as' coercion methods on Ruby Objects, via Kernel
WITHOUT_CLASSIFICATION	// construct the class, implementing all supertypes
WITHOUT_CLASSIFICATION	// fields needed for dispatch and such
WITHOUT_CLASSIFICATION	// create constructor
WITHOUT_CLASSIFICATION	// wrap self and store the wrapper
WITHOUT_CLASSIFICATION	// end constructor
WITHOUT_CLASSIFICATION	// start setup method
WITHOUT_CLASSIFICATION	// set RubyClass
WITHOUT_CLASSIFICATION	// set Ruby
WITHOUT_CLASSIFICATION	// all methods dispatch to the simple version by default, which is method_missing normally
WITHOUT_CLASSIFICATION	// try specific name first, falling back on simple name
WITHOUT_CLASSIFICATION	// get current context
WITHOUT_CLASSIFICATION	// load self, class, and name
WITHOUT_CLASSIFICATION	// construct the class, implementing all supertypes
WITHOUT_CLASSIFICATION	// fields needed for dispatch and such
WITHOUT_CLASSIFICATION	// create constructor
WITHOUT_CLASSIFICATION	// end constructor
WITHOUT_CLASSIFICATION	// for each simple method name, implement the complex methods, calling the simple version
WITHOUT_CLASSIFICATION	// load arguments into IRubyObject[] for dispatch
WITHOUT_CLASSIFICATION	// convert to IRubyObject
WITHOUT_CLASSIFICATION	// load null block
WITHOUT_CLASSIFICATION	// invoke method
WITHOUT_CLASSIFICATION	// if we expect a return value, unwrap it
WITHOUT_CLASSIFICATION	// end setup method
WITHOUT_CLASSIFICATION	// end class
WITHOUT_CLASSIFICATION	// create static init, for a monitor object
WITHOUT_CLASSIFICATION	// store the wrapper
WITHOUT_CLASSIFICATION	// prepare temp locals
WITHOUT_CLASSIFICATION	// Try to look up field for simple name // get field; if nonnull, go straight to dispatch
WITHOUT_CLASSIFICATION	// field is null, lock class and try to populate
WITHOUT_CLASSIFICATION	// try/finally block to ensure unlock
WITHOUT_CLASSIFICATION	// store it
WITHOUT_CLASSIFICATION	// end of try block
WITHOUT_CLASSIFICATION	// finally block to release monitor
WITHOUT_CLASSIFICATION	// exception handling for monitor release
WITHOUT_CLASSIFICATION	// re-get, re-check method; if not null now, go to dispatch
WITHOUT_CLASSIFICATION	// load self, class, and name
WITHOUT_CLASSIFICATION	// load arguments into IRubyObject[] for dispatch
WITHOUT_CLASSIFICATION	// convert to IRubyObject
WITHOUT_CLASSIFICATION	// invoke method
WITHOUT_CLASSIFICATION	// if we expect a return value, unwrap it
WITHOUT_CLASSIFICATION	// end setup method
WITHOUT_CLASSIFICATION	// end class
WITHOUT_CLASSIFICATION	// create the class
WITHOUT_CLASSIFICATION	// method still not available, call method_missing
WITHOUT_CLASSIFICATION	// perform the dispatch
WITHOUT_CLASSIFICATION	// try to load the specified name; only if that fails, try to define the class
WITHOUT_CLASSIFICATION	// up two slots, for long's two halves
WITHOUT_CLASSIFICATION	// up two slots, for long's two halves
WITHOUT_CLASSIFICATION	// setup the class
WITHOUT_CLASSIFICATION	// now, create a method_added that can replace the DynamicMethod fields as they're redefined
WITHOUT_CLASSIFICATION	// do nothing, it's a non-impl method
WITHOUT_CLASSIFICATION	// probably a primitive
WITHOUT_CLASSIFICATION	// interfaces are handled as modules
WITHOUT_CLASSIFICATION	// construct the mirror class and parent classes
WITHOUT_CLASSIFICATION	// set the full name
WITHOUT_CLASSIFICATION	// include all interfaces
WITHOUT_CLASSIFICATION	// if it's an array, only add methods for aref, aset, and length
WITHOUT_CLASSIFICATION	// add array construction methods
WITHOUT_CLASSIFICATION	// add all public constructors (note: getConstructors only returns public ones)
WITHOUT_CLASSIFICATION	// add all instance and static methods
WITHOUT_CLASSIFICATION	// proxy is complete, return it
WITHOUT_CLASSIFICATION	// too much array creation!
WITHOUT_CLASSIFICATION	// only include static methods if specified
WITHOUT_CLASSIFICATION	// add a few type-specific special methods
WITHOUT_CLASSIFICATION	// add all static variables
WITHOUT_CLASSIFICATION	// only public static fields that are valid constants
WITHOUT_CLASSIFICATION	// looks like someone's trying to raise a Java exception. Let them.
WITHOUT_CLASSIFICATION	// NOTE: The five match methods are arity-split to avoid the cost of boxing arguments // when there's already a cached match. Do not condense them into a single // method.
WITHOUT_CLASSIFICATION	// TODO: This is where we would want to do precision checks to see // if it's non-destructive to coerce a given type into the target // integral primitive
WITHOUT_CLASSIFICATION	// long first because it's what Fixnum claims to be
WITHOUT_CLASSIFICATION	// double first because it's what float claims to be
WITHOUT_CLASSIFICATION	// TODO: varargs?
WITHOUT_CLASSIFICATION	// read-volatile
WITHOUT_CLASSIFICATION	// initialize cache of parameter types to method
WITHOUT_CLASSIFICATION	// we set all Java methods to optional, since many/most have overloads
WITHOUT_CLASSIFICATION	// If we hold a Java object, we need a java_class accessor
WITHOUT_CLASSIFICATION	// line 326
WITHOUT_CLASSIFICATION	// read-volatile
WITHOUT_CLASSIFICATION	// initialize cache of parameter types to method
WITHOUT_CLASSIFICATION	// too much array creation!
WITHOUT_CLASSIFICATION	// construct new array proxy (ArrayJavaProxy)
WITHOUT_CLASSIFICATION	// Get map of all fields we want to define.  
WITHOUT_CLASSIFICATION	// Look through all mappings to find a match entry for this field
WITHOUT_CLASSIFICATION	// Hit a non-java proxy class (included Modules can be a cause of this...skip)
WITHOUT_CLASSIFICATION	// We could not find all of them print out first one (we could print them all?)
WITHOUT_CLASSIFICATION	// dummy bodies for default impls
WITHOUT_CLASSIFICATION	// initialize this if it hasn't been
WITHOUT_CLASSIFICATION	// initialize these if they haven't been
WITHOUT_CLASSIFICATION	// not allowed for original (non-generated) Java classes // note: not allowing for any previously created class right now; // this restriction might be loosened later for generated classes
WITHOUT_CLASSIFICATION	// setup new, etc unless this is a ConcreteJavaProxy subclass
WITHOUT_CLASSIFICATION	// First we make modifications to the class, to adapt it to being // both a Ruby class and a proxy for a Java type
WITHOUT_CLASSIFICATION	// list of interfaces we implement
WITHOUT_CLASSIFICATION	// We capture the original "new" and make it private
WITHOUT_CLASSIFICATION	// The replacement "new" allocates and inits the Ruby object as before, but // also instantiates our proxified Java object by calling __jcreate!
WITHOUT_CLASSIFICATION	// Next, we define a few private methods that we'll use to manipulate // the Java object contained within this Ruby object
WITHOUT_CLASSIFICATION	// jcreate instantiates the proxy object which implements all interfaces // and which is wrapped and implemented by this object
WITHOUT_CLASSIFICATION	// Now we add an "implement" and "implement_all" methods to the class
WITHOUT_CLASSIFICATION	// implement all forces implementation of all interfaces we intend // for this class to implement
WITHOUT_CLASSIFICATION	// we've already done the above priming logic, just add another interface // to the list of intentions unless we're past the point of no return or // already intend to implement the given interface
WITHOUT_CLASSIFICATION	// walk all superclasses aggregating interfaces
WITHOUT_CLASSIFICATION	// construct the new interface impl and set it into the object
WITHOUT_CLASSIFICATION	// assuming the user wants a collection of interfaces that can be // included together. make it so.
WITHOUT_CLASSIFICATION	// not allowed for existing Java interface modules
WITHOUT_CLASSIFICATION	// To turn a module into an "interface collection" we add a class instance // variable to hold the list of interfaces, and modify append_features // for this module to call append_features on each of those interfaces as // well
WITHOUT_CLASSIFICATION	// already set up append_features, just add the interface if we haven't already
WITHOUT_CLASSIFICATION	// array-of-interface-type creation/identity
WITHOUT_CLASSIFICATION	// keep this variant for kind_of? testing
WITHOUT_CLASSIFICATION	// array creation should use this variant
WITHOUT_CLASSIFICATION	// parent.setConstant(name, proxyClass); // where the name should come from ?
WITHOUT_CLASSIFICATION	// including interface module so old-style interface "subclasses" will // respond correctly to #kind_of?, etc.
WITHOUT_CLASSIFICATION	// add reference to interface module
WITHOUT_CLASSIFICATION	// Need to initialize
WITHOUT_CLASSIFICATION	// Need to initialize
WITHOUT_CLASSIFICATION	// proxy is complete, return it
WITHOUT_CLASSIFICATION	// same as argument_types, but matches name in java.lang.reflect.Constructor/Method
WITHOUT_CLASSIFICATION	// This point is only reached if there was an exception handler installed.
WITHOUT_CLASSIFICATION	// weakly reserved names
WITHOUT_CLASSIFICATION	// called only by initializing thread; no synchronization required
WITHOUT_CLASSIFICATION	// called only by initializing thread; no synchronization required
WITHOUT_CLASSIFICATION	// modified only by addMethod; no synchronization required
WITHOUT_CLASSIFICATION	// if there's no constructor, we must prevent construction
WITHOUT_CLASSIFICATION	// caching constructors, as they're accessed for each new instance
WITHOUT_CLASSIFICATION	// proxy module for interfaces
WITHOUT_CLASSIFICATION	// proxy class for concrete classes.  also used for // "concrete" interfaces, which is why we have two fields
WITHOUT_CLASSIFICATION	// readable only by thread building proxy, so don't need to be // volatile. used to handle recursive calls to getProxyClass/Module // while proxy is being constructed (usually when a constant // defined by a class is of the same type as that class).
WITHOUT_CLASSIFICATION	// allow proxy to be read without synchronization. if proxy // is under construction, only the building thread can see it.
WITHOUT_CLASSIFICATION	// Now add all aliases for the static methods (fields) as appropriate
WITHOUT_CLASSIFICATION	// proxy is under construction, building thread can // safely read non-volatile value
WITHOUT_CLASSIFICATION	// Add property name aliases
WITHOUT_CLASSIFICATION	// getFoo      => foo // getFoo(int) => foo(int)
WITHOUT_CLASSIFICATION	// setFoo(Foo) => foo=(Foo)
WITHOUT_CLASSIFICATION	// isFoo() => foo, isFoo(*) => foo(*)
WITHOUT_CLASSIFICATION	// Additionally add ?-postfixed aliases to any boolean methods and properties.
WITHOUT_CLASSIFICATION	// is_something?, contains_thing?
WITHOUT_CLASSIFICATION	// something?
WITHOUT_CLASSIFICATION	// setup constants for public inner classes
WITHOUT_CLASSIFICATION	// setup constants for public inner classes
WITHOUT_CLASSIFICATION	// Ignore bad constant named inner classes pending JRUBY-697
WITHOUT_CLASSIFICATION	// Ignore bad constant named inner classes pending JRUBY-697
WITHOUT_CLASSIFICATION	// create constructorInstaller; if there are no constructors, it will disable construction
WITHOUT_CLASSIFICATION	// we need to collect all methods, though we'll only // install the ones that are named in this class
WITHOUT_CLASSIFICATION	// Install direct java methods with mangled name so 'send' can call them directly.
WITHOUT_CLASSIFICATION	// now iterate over all installers and make sure they also have appropriate aliases
WITHOUT_CLASSIFICATION	// old (quasi-deprecated) interface class
WITHOUT_CLASSIFICATION	// 1.9 support for encodings
WITHOUT_CLASSIFICATION	// double-check the cache now that we're synchronized
WITHOUT_CLASSIFICATION	// setFoo(Foo) => foo=(Foo)
WITHOUT_CLASSIFICATION	// isFoo() => foo, isFoo(*) => foo(*)
WITHOUT_CLASSIFICATION	// is_something?, contains_thing?
WITHOUT_CLASSIFICATION	// one word type name that starts lower-case...it may be a primitive type
WITHOUT_CLASSIFICATION	// Java.getProxyClass deals with sync issues, so we won't duplicate the logic here
WITHOUT_CLASSIFICATION	// note: intentionally returning the actual array returned from Java, rather // than wrapping it in a RubyArray. wave of the future, when java_class will // return the actual class, rather than a JavaClass wrapper.
WITHOUT_CLASSIFICATION	// see note above re: return type
WITHOUT_CLASSIFICATION	// restrictive security policy; no matter, we only want public // classes anyway
WITHOUT_CLASSIFICATION	// very restrictive policy (disallows Member.PUBLIC) // we'd never actually get this far in that case
WITHOUT_CLASSIFICATION	// one-dimensional array
WITHOUT_CLASSIFICATION	// n-dimensional array
WITHOUT_CLASSIFICATION	// if it's an array of arrays, recurse with the component type
WITHOUT_CLASSIFICATION	// we all all superclasses, but avoid adding superclass methods with same name+signature as subclass methods // see JRUBY-3130
WITHOUT_CLASSIFICATION	// Proc implementing an interface, pull in the catch-all code that lets the proc get invoked // no matter what method is called on the interface
WITHOUT_CLASSIFICATION	// can't be converted any more, return it
WITHOUT_CLASSIFICATION	// getFooBar() => fooBar?, foo_bar?(*)
WITHOUT_CLASSIFICATION	// If not a property, but is boolean add ?-postfixed aliases.
WITHOUT_CLASSIFICATION	// many cases are ok to convert to float; if not one of these, error
WITHOUT_CLASSIFICATION	// for Object, default to natural wrapper type
WITHOUT_CLASSIFICATION	// rubyObject is already of the required jruby class (or subclass)
WITHOUT_CLASSIFICATION	// the converters handle not only primitive types but also their boxed versions, so we should check // if we have a converter before checking for isPrimitive()
WITHOUT_CLASSIFICATION	// it's not one of the types we convert, so just pass it out as-is without wrapping
WITHOUT_CLASSIFICATION	// we've found a Java type to which we've coerced the Ruby value, wrap it
WITHOUT_CLASSIFICATION	// set of utility methods for Java-based proxy objects
WITHOUT_CLASSIFICATION	// the proxy (wrapper) type hierarchy
WITHOUT_CLASSIFICATION	//InterfaceJavaProxy.createInterfaceJavaProxy(context);
WITHOUT_CLASSIFICATION	// also create the JavaProxy* classes
WITHOUT_CLASSIFICATION	// The template for interface modules
WITHOUT_CLASSIFICATION	// Now attach Java-related extras to core classes
WITHOUT_CLASSIFICATION	// add all name-to-class mappings
WITHOUT_CLASSIFICATION	// add some base Java classes everyone will need
WITHOUT_CLASSIFICATION	// finally, set JavaSupport.isEnabled to true
WITHOUT_CLASSIFICATION	// shouldn't happen, but if a superclass is specified, it's not ours
WITHOUT_CLASSIFICATION	// include any interfaces we extend
WITHOUT_CLASSIFICATION	// java.lang.Object is added at root of java proxy classes
WITHOUT_CLASSIFICATION	// other java proxy classes added under their superclass' java proxy
WITHOUT_CLASSIFICATION	// include interface modules into the proxy class
WITHOUT_CLASSIFICATION	// JRUBY-2938 the proxy class might already exist
WITHOUT_CLASSIFICATION	// add java_method for unbound use
WITHOUT_CLASSIFICATION	// add alias to meta
WITHOUT_CLASSIFICATION	// we'll only map conventional class names to modules 
WITHOUT_CLASSIFICATION	/* expected */
WITHOUT_CLASSIFICATION	// Haven't found a class, continue on as though it were a package
WITHOUT_CLASSIFICATION	// upper case name, so most likely a class
WITHOUT_CLASSIFICATION	// This point is only reached if there was an exception handler installed.
WITHOUT_CLASSIFICATION	// add alias to meta
WITHOUT_CLASSIFICATION	// this is where we'll get connected when classes are opened using // package module syntax.
WITHOUT_CLASSIFICATION	// save package module as ivar in parent, and add method to parent so // we don't have to come back here.
WITHOUT_CLASSIFICATION	// this covers primitives and (unlikely) lower-case class names
WITHOUT_CLASSIFICATION	/* not primitive or lc class */
WITHOUT_CLASSIFICATION	/* not primitive or lc class */
WITHOUT_CLASSIFICATION	// Is there a supplied proc argument or do we assume a block was supplied
WITHOUT_CLASSIFICATION	// Create list of interfaces to proxy (and make sure they really are interfaces)
WITHOUT_CLASSIFICATION	// hashcode is a combination of the interfaces and the Ruby class we're using // to implement them
WITHOUT_CLASSIFICATION	// if it's a singleton class and the real class is proc, we're doing closure conversion // so just use Proc's hashcode
WITHOUT_CLASSIFICATION	// normal new class implementing interfaces
WITHOUT_CLASSIFICATION	/*         * Initialize some components.         */
WITHOUT_CLASSIFICATION	// not synchronizing these methods, no harm if these values get set more // than once. // (also note that there's no chance of getting a partially initialized // class/module, as happens-before is guaranteed by volatile write/read // of constants table.)
WITHOUT_CLASSIFICATION	// Java reflection does not allow retrieving constructors like methods
WITHOUT_CLASSIFICATION	// for zero args case we can stop searching
WITHOUT_CLASSIFICATION	// for zero args case we can stop searching
WITHOUT_CLASSIFICATION	// no matching ctor found
WITHOUT_CLASSIFICATION	// Create Ruby proxies for any input arguments that are not primitives.
WITHOUT_CLASSIFICATION	// prepare a faster handle if handles are enabled and the method and class are public
WITHOUT_CLASSIFICATION	// must be a public method
WITHOUT_CLASSIFICATION	// must be a public class
WITHOUT_CLASSIFICATION	// must have been loaded from our known classloader hierarchy
WITHOUT_CLASSIFICATION	// Special classes like Collections.EMPTY_LIST are inner classes that are private but  // implement public interfaces.  Their methods are all public methods for the public  // interface.  Let these public methods execute via setAccessible(true). 
WITHOUT_CLASSIFICATION	// search through all declared methods to find a closest match
WITHOUT_CLASSIFICATION	// no matching method found
WITHOUT_CLASSIFICATION	// this test really means, that this is a ruby-defined subclass of a java class
WITHOUT_CLASSIFICATION	/*         * First we need to register the JRuby engine.         */
WITHOUT_CLASSIFICATION	/*         * Now we create a new BSFManager.         */
WITHOUT_CLASSIFICATION	/*         * Initialize a simple Frame.          */
WITHOUT_CLASSIFICATION	//e.printStackTrace();
WITHOUT_CLASSIFICATION	//e.printStackTrace();
WITHOUT_CLASSIFICATION	// JRUBY-530, while case
WITHOUT_CLASSIFICATION	// end class
WITHOUT_CLASSIFICATION	// // this test really means, that this is a ruby-defined subclass of a java class //
WITHOUT_CLASSIFICATION	// for our purposes, Accessibles are also Members, and vice-versa, // so we'll include Member methods here.
WITHOUT_CLASSIFICATION	/*             * Declare those components as beans in BSF. Then it will be             * possible to access those components in Ruby as global             * variables ($frame, $menubar, ...)             */
WITHOUT_CLASSIFICATION	/*              * Execute a Ruby script (add the menubar to the frame).             */
WITHOUT_CLASSIFICATION	/*                     * Execute Ruby statements.                     */
WITHOUT_CLASSIFICATION	/*                     * Evaluates a Ruby expression and display the result.                     */
WITHOUT_CLASSIFICATION	// Populate values for the parameter names
WITHOUT_CLASSIFICATION	/* package scope */
WITHOUT_CLASSIFICATION	// This point is only reached if there was an exception handler // installed.
WITHOUT_CLASSIFICATION	// // Ruby-level methods //
WITHOUT_CLASSIFICATION	// need names ordered for key generation later
WITHOUT_CLASSIFICATION	// we only collect methods and interfaces for  // user-defined proxy classes.
WITHOUT_CLASSIFICATION	// get JavaClass if this is the new proxy class; verify it // matches if this is a superclass proxy.
WITHOUT_CLASSIFICATION	// get any included interfaces
WITHOUT_CLASSIFICATION	// lock in the overridden methods for the new class, and any as-yet // uninstantiated ancestor class.
WITHOUT_CLASSIFICATION	// statically initialized below
WITHOUT_CLASSIFICATION	// finish class initializer
WITHOUT_CLASSIFICATION	// trigger class initialization for the class
WITHOUT_CLASSIFICATION	// should not happen!
WITHOUT_CLASSIFICATION	// start class
WITHOUT_CLASSIFICATION	// make getter for handler
WITHOUT_CLASSIFICATION	// make getter for proxy class
WITHOUT_CLASSIFICATION	// add (potentially) overridden names to the key. // TODO: see note above re: optimizations
WITHOUT_CLASSIFICATION	// We generate all constructors and let some fail during invocation later
WITHOUT_CLASSIFICATION	// create static private method field
WITHOUT_CLASSIFICATION	// load static empty array
WITHOUT_CLASSIFICATION	// box arguments
WITHOUT_CLASSIFICATION	// this is a simple rethrow handler
WITHOUT_CLASSIFICATION	// // construct the super-proxy method //
WITHOUT_CLASSIFICATION	// do a void return
WITHOUT_CLASSIFICATION	// // utility methods //
WITHOUT_CLASSIFICATION	// Is there a supplied proc argument or do we assume a block was // supplied
WITHOUT_CLASSIFICATION	// store call information so method_missing impl can use it
WITHOUT_CLASSIFICATION	// use the same logic as in EvaluationState
WITHOUT_CLASSIFICATION	// no opt, no rest, exact match
WITHOUT_CLASSIFICATION	// only rest, must be at least required
WITHOUT_CLASSIFICATION	// opt but no rest, must be at least required and no more than required + opt
WITHOUT_CLASSIFICATION	// opt and rest, must be at least required
WITHOUT_CLASSIFICATION	// No block from a nil proc
WITHOUT_CLASSIFICATION	// If not already a proc then we should try and make it one.
WITHOUT_CLASSIFICATION	// The current block is already associated with proc.  No need to create a new one
WITHOUT_CLASSIFICATION	// Has the method that is calling super received a block argument
WITHOUT_CLASSIFICATION	/* NUL */
WITHOUT_CLASSIFICATION	// Reuse trailing consecutive sequence at same slot
WITHOUT_CLASSIFICATION	// Clone all remaining nodes
WITHOUT_CLASSIFICATION	// 'class << state.self' and 'class << obj' uses defn as opposed to defs
WITHOUT_CLASSIFICATION	// Each root node has a top-level scope that we need to push
WITHOUT_CLASSIFICATION	// read-volatile
WITHOUT_CLASSIFICATION	// read-volatile
WITHOUT_CLASSIFICATION	// classes are directly in the hierarchy, so no special logic is necessary for implementer
WITHOUT_CLASSIFICATION	// must be power of 2 // must be power of 2
WITHOUT_CLASSIFICATION	// Find power-of-two sizes best matching arguments
WITHOUT_CLASSIFICATION	// note segmentShift differs from ConcurrentHashMap's calculation due to // issues with System.identityHashCode (upper n bits always 0, at least  // under Java 1.6 / WinXP)
WITHOUT_CLASSIFICATION	//      System.err.println("***ObjectProxyCache " + id + " started at "+ new java.util.Date());
WITHOUT_CLASSIFICATION	//    protected void finalize() throws Throwable { //        System.err.println("***ObjectProxyCache " + id + " finalized at "+ new java.util.Date()); //    }
WITHOUT_CLASSIFICATION	// EntryRefs include hash with key to facilitate lookup by Segment#expunge // after ref is removed from ReferenceQueue
WITHOUT_CLASSIFICATION	// Unlike WeakHashMap, our Entry does not subclass WeakReference, but rather // makes it a final field.  The theory is that doing so should force a happens-before // relationship WRT the WeakReference constructor, guaranteeing that the key will be // visibile to other threads (unless it's been GC'ed).  See JLS 17.5 (final fields) and // 17.4.5 (Happens-before order) to confirm or refute my reasoning here.
WITHOUT_CLASSIFICATION	// references to the Java object and its proxy will either both be // weak or both be soft, since the proxy contains a strong reference // to the object, so it wouldn't make sense for the reference types // to differ.
WITHOUT_CLASSIFICATION	// ctor used by remove/rehash
WITHOUT_CLASSIFICATION	// must be called under lock
WITHOUT_CLASSIFICATION	// must be called under lock
WITHOUT_CLASSIFICATION	// must be called under lock
WITHOUT_CLASSIFICATION	// note that we'll potentially see the refs for both the java object and // proxy -- whichever we see first will cause the entry to be removed; // the other will not match an entry and will be ignored.
WITHOUT_CLASSIFICATION	// temp method to verify tableSize value // must be called under lock
WITHOUT_CLASSIFICATION	// Single node in list
WITHOUT_CLASSIFICATION	// indirect read-/write- volatile
WITHOUT_CLASSIFICATION	// indirect read-/write- volatile
WITHOUT_CLASSIFICATION	// entry exists, proxy has been gc'ed. replace entry.
WITHOUT_CLASSIFICATION	// Where we get new positions from.
WITHOUT_CLASSIFICATION	// Start of string ([, (, {, <, ', ", \n) 
WITHOUT_CLASSIFICATION	// Number of newlines read from the reader
WITHOUT_CLASSIFICATION	// How many bytes into the source are we?
WITHOUT_CLASSIFICATION	// For 'list' and only populated if list is not null.
WITHOUT_CLASSIFICATION	// Last full line read.
WITHOUT_CLASSIFICATION	// Save sourceLine for error reporting to display line where error occurred
WITHOUT_CLASSIFICATION	// Get rest of line. lineBuffer filled as side-effect...
WITHOUT_CLASSIFICATION	// Expand variables, Indentation of final marker
WITHOUT_CLASSIFICATION	// Expand variables, Indentation of final marker
WITHOUT_CLASSIFICATION	// End of string (], ), }, >, ', ", \0)
WITHOUT_CLASSIFICATION	// How many strings are nested in the current string term
WITHOUT_CLASSIFICATION	// Single-quote fast path
WITHOUT_CLASSIFICATION	// Regexp engine 'java'
WITHOUT_CLASSIFICATION	// Was a goto in original ruby lexer
WITHOUT_CLASSIFICATION	/* just ignore */
WITHOUT_CLASSIFICATION	/* octal constant */
WITHOUT_CLASSIFICATION	/* hex constant */
WITHOUT_CLASSIFICATION	// PUSH(1)
WITHOUT_CLASSIFICATION	// POP
WITHOUT_CLASSIFICATION	// PUSH(0).  If you look at original macro: stack |= (n&1) => stack |= 0 => no-change.
WITHOUT_CLASSIFICATION	// LEXPOP
WITHOUT_CLASSIFICATION	// SET_P
WITHOUT_CLASSIFICATION	// Marker delimiting heredoc boundary
WITHOUT_CLASSIFICATION	// Found end marker for this heredoc
WITHOUT_CLASSIFICATION	// Put back lastLine for any elements past start of heredoc marker
WITHOUT_CLASSIFICATION	// Last token read via yylex().
WITHOUT_CLASSIFICATION	// Value of last token which had a value associated with it.
WITHOUT_CLASSIFICATION	// Stream of data that yylex() examines.
WITHOUT_CLASSIFICATION	// Used for tiny smidgen of grammar in lexer (see setParserSupport())
WITHOUT_CLASSIFICATION	// Give a name to a value.  Enebo: This should be used more.
WITHOUT_CLASSIFICATION	// When the heredoc identifier specifies <<-EOF that indents before ident. are ok (the '-').
WITHOUT_CLASSIFICATION	// Are we lexing Ruby 1.8 or 1.9+ syntax
WITHOUT_CLASSIFICATION	// Count of nested parentheses (1.9 only)
WITHOUT_CLASSIFICATION	// 1.9 only
WITHOUT_CLASSIFICATION	// Short-hand (e.g. %{,%.,%!,... versus %Q{).
WITHOUT_CLASSIFICATION	// Long-hand (e.g. %Q{}).
WITHOUT_CLASSIFICATION	/* no mb || ismbchar(term)*/
WITHOUT_CLASSIFICATION	/*     * Not normally used, but is left in here since it can be useful in debugging     * grammar and lexing problems.     *     */
WITHOUT_CLASSIFICATION	// DEBUGGING HELP 
WITHOUT_CLASSIFICATION	/* '\v' */
WITHOUT_CLASSIFICATION	/* end of script. */
WITHOUT_CLASSIFICATION	/* white spaces */
WITHOUT_CLASSIFICATION	/* '\v' */
WITHOUT_CLASSIFICATION	/* it's a comment */
WITHOUT_CLASSIFICATION	// Replace a string of newlines with a single one
WITHOUT_CLASSIFICATION	/* $\: output record separator */
WITHOUT_CLASSIFICATION	// EOF (ENEBO: After default?
WITHOUT_CLASSIFICATION	// documentation nodes
WITHOUT_CLASSIFICATION	// In case last next was the newline.
WITHOUT_CLASSIFICATION	// Just a plain bang
WITHOUT_CLASSIFICATION	/* $_: last read line string */
WITHOUT_CLASSIFICATION	/* $~: match-data */
WITHOUT_CLASSIFICATION	/* $*: argv */
WITHOUT_CLASSIFICATION	/* $$: pid */
WITHOUT_CLASSIFICATION	/* $?: last status */
WITHOUT_CLASSIFICATION	/* $!: error string */
WITHOUT_CLASSIFICATION	/* $@: error position */
WITHOUT_CLASSIFICATION	/* $/: input record separator */
WITHOUT_CLASSIFICATION	/* $;: field separator */
WITHOUT_CLASSIFICATION	/* $,: output field separator */
WITHOUT_CLASSIFICATION	/* $.: last read line number */
WITHOUT_CLASSIFICATION	/* $=: ignorecase */
WITHOUT_CLASSIFICATION	/* $:: load path */
WITHOUT_CLASSIFICATION	/* $<: reading filename */
WITHOUT_CLASSIFICATION	/* $": already loaded files */
WITHOUT_CLASSIFICATION	/* $&: last match */
WITHOUT_CLASSIFICATION	/* $`: string before last match */
WITHOUT_CLASSIFICATION	/* $': string after last match */
WITHOUT_CLASSIFICATION	// methods 'foo!' and 'foo?' are possible but if followed by '=' it is relop
WITHOUT_CLASSIFICATION	/* See if it is a reserved word.  */
WITHOUT_CLASSIFICATION	// enum lex_state
WITHOUT_CLASSIFICATION	// block (primary)
WITHOUT_CLASSIFICATION	// block (expr)
WITHOUT_CLASSIFICATION	// hash
WITHOUT_CLASSIFICATION	// ENEBO: 1.9 is IS_ARG, but we need to break apart for 1.8 support.
WITHOUT_CLASSIFICATION	// FIXME: peek('u') utf8 stuff for 1.9
WITHOUT_CLASSIFICATION	// We don't append '+' since Java number parser gets confused
WITHOUT_CLASSIFICATION	//  hexadecimal
WITHOUT_CLASSIFICATION	// binary
WITHOUT_CLASSIFICATION	// decimal
WITHOUT_CLASSIFICATION	//Octal
WITHOUT_CLASSIFICATION	//  '_' in number just ignored
WITHOUT_CLASSIFICATION	// backslash
WITHOUT_CLASSIFICATION	// newline
WITHOUT_CLASSIFICATION	// horizontal tab
WITHOUT_CLASSIFICATION	// form feed
WITHOUT_CLASSIFICATION	// vertical tab
WITHOUT_CLASSIFICATION	// alarm(bell)
WITHOUT_CLASSIFICATION	// escape
WITHOUT_CLASSIFICATION	// hex constant
WITHOUT_CLASSIFICATION	//char hexValue = scanHex(2);
WITHOUT_CLASSIFICATION	// If \r\n then just pass along \n (windows).  // If \r[^\n] then pass along \n (MAC).
WITHOUT_CLASSIFICATION	// space
WITHOUT_CLASSIFICATION	// Where we started this marker match
WITHOUT_CLASSIFICATION	// Position within source must reflect the actual offset and column.  Since // we ate an extra character here (this accounting is normally done in read // ), we should update position info.
WITHOUT_CLASSIFICATION	// We use offset here to keep track of extra newlines for windows
WITHOUT_CLASSIFICATION	// If \r\n then just pass along \n (windows).  // If \r[^\n] then pass along \n (MAC).
WITHOUT_CLASSIFICATION	// FIXME: Old Mac format strings?
WITHOUT_CLASSIFICATION	// FIXME: Old Mac format strings?
WITHOUT_CLASSIFICATION	// Where we get our newest char's
WITHOUT_CLASSIFICATION	// Our readback/pushback buffer.
WITHOUT_CLASSIFICATION	// index of last character in pushback buffer
WITHOUT_CLASSIFICATION	// Character read before previous read
WITHOUT_CLASSIFICATION	// keep value of twoAgo around so we can restore after we unread
WITHOUT_CLASSIFICATION	// NetProtocolBufferedIOLibrary
WITHOUT_CLASSIFICATION	// BigDecimalLibrary
WITHOUT_CLASSIFICATION	// TODO: FD_CLOEXEC is mysterious and we are not sure how constantine should include this. // We did it here for now
WITHOUT_CLASSIFICATION	// Ruby's designation for some platforms, minus version numbers in some cases
WITHOUT_CLASSIFICATION	// that's what JDK5 produces on Windows Vista
WITHOUT_CLASSIFICATION	// Rubygems is too specific on host cpu so until we have real need lets default to universal //setConfig(configHash, "arch", System.getProperty("os.arch") + "-java" + System.getProperty("java.specification.version"));
WITHOUT_CLASSIFICATION	// Our shell scripts pass in non-canonicalized paths, but even if we didn't // anyone who did would become unhappy because Ruby apps expect no relative // operators in the pathname (rubygems, for example).
WITHOUT_CLASSIFICATION	// this set is only for darwin
WITHOUT_CLASSIFICATION	// DigestLibrary
WITHOUT_CLASSIFICATION	// all errors, just info; do not prevent loading // IKVM does not support JMX, and throws an error
WITHOUT_CLASSIFICATION	// all errors, just info; do not prevent unloading // IKVM does not support JMX, and throws an error
WITHOUT_CLASSIFICATION	// do nothing, return dummy version below
WITHOUT_CLASSIFICATION	//yyLhs 496
WITHOUT_CLASSIFICATION	//yyLhs 496
WITHOUT_CLASSIFICATION	//yyLhs 496
WITHOUT_CLASSIFICATION	//yyLhs 496
WITHOUT_CLASSIFICATION	//yyLhs 496
WITHOUT_CLASSIFICATION	// line 329
WITHOUT_CLASSIFICATION	//new Exception().printStackTrace();
WITHOUT_CLASSIFICATION	//yyGindex 152
WITHOUT_CLASSIFICATION	// dynamically increase
WITHOUT_CLASSIFICATION	// discarding a token does not change stack
WITHOUT_CLASSIFICATION	// else [default] reduce (yyN)
WITHOUT_CLASSIFICATION	// shift to yyN
WITHOUT_CLASSIFICATION	// reduce (yyN)
WITHOUT_CLASSIFICATION	// leave stack alone
WITHOUT_CLASSIFICATION	// line 271
WITHOUT_CLASSIFICATION	// line 274
WITHOUT_CLASSIFICATION	// line 303
WITHOUT_CLASSIFICATION	// line 311
WITHOUT_CLASSIFICATION	// line 314
WITHOUT_CLASSIFICATION	// line 317
WITHOUT_CLASSIFICATION	// line 332
WITHOUT_CLASSIFICATION	// line 338
WITHOUT_CLASSIFICATION	// line 341
WITHOUT_CLASSIFICATION	// line 344
WITHOUT_CLASSIFICATION	// line 351
WITHOUT_CLASSIFICATION	// line 358
WITHOUT_CLASSIFICATION	// line 367
WITHOUT_CLASSIFICATION	// line 372
WITHOUT_CLASSIFICATION	// line 378
WITHOUT_CLASSIFICATION	// line 382
WITHOUT_CLASSIFICATION	// line 407
WITHOUT_CLASSIFICATION	// line 411
WITHOUT_CLASSIFICATION	// line 414
WITHOUT_CLASSIFICATION	// line 417
WITHOUT_CLASSIFICATION	// line 420
WITHOUT_CLASSIFICATION	// line 426
WITHOUT_CLASSIFICATION	// line 434
WITHOUT_CLASSIFICATION	// line 443
WITHOUT_CLASSIFICATION	// line 446
WITHOUT_CLASSIFICATION	// line 452
WITHOUT_CLASSIFICATION	// line 457
WITHOUT_CLASSIFICATION	// line 464
WITHOUT_CLASSIFICATION	// line 467
WITHOUT_CLASSIFICATION	// line 470
WITHOUT_CLASSIFICATION	// line 479
WITHOUT_CLASSIFICATION	// line 484
WITHOUT_CLASSIFICATION	// line 486
WITHOUT_CLASSIFICATION	// line 492
WITHOUT_CLASSIFICATION	// line 498
WITHOUT_CLASSIFICATION	// line 501
WITHOUT_CLASSIFICATION	// line 504
WITHOUT_CLASSIFICATION	// line 507
WITHOUT_CLASSIFICATION	// line 510
WITHOUT_CLASSIFICATION	// line 519
WITHOUT_CLASSIFICATION	// line 525
WITHOUT_CLASSIFICATION	//yyGindex 152
WITHOUT_CLASSIFICATION	// line 537
WITHOUT_CLASSIFICATION	// line 540
WITHOUT_CLASSIFICATION	// line 543
WITHOUT_CLASSIFICATION	// line 546
WITHOUT_CLASSIFICATION	// line 556
WITHOUT_CLASSIFICATION	// line 559
WITHOUT_CLASSIFICATION	// line 563
WITHOUT_CLASSIFICATION	// line 566
WITHOUT_CLASSIFICATION	// line 569
WITHOUT_CLASSIFICATION	// line 575
WITHOUT_CLASSIFICATION	// line 578
WITHOUT_CLASSIFICATION	// line 587
WITHOUT_CLASSIFICATION	// line 596
WITHOUT_CLASSIFICATION	// line 604
WITHOUT_CLASSIFICATION	// line 607
WITHOUT_CLASSIFICATION	// line 610
WITHOUT_CLASSIFICATION	// line 613
WITHOUT_CLASSIFICATION	// line 616
WITHOUT_CLASSIFICATION	// line 634
WITHOUT_CLASSIFICATION	// line 638
WITHOUT_CLASSIFICATION	// line 643
WITHOUT_CLASSIFICATION	// line 646
WITHOUT_CLASSIFICATION	// line 655
WITHOUT_CLASSIFICATION	// line 660
WITHOUT_CLASSIFICATION	// line 667
WITHOUT_CLASSIFICATION	// line 670
WITHOUT_CLASSIFICATION	// line 672
WITHOUT_CLASSIFICATION	// line 696
WITHOUT_CLASSIFICATION	// line 701
WITHOUT_CLASSIFICATION	// line 717
WITHOUT_CLASSIFICATION	// line 720
WITHOUT_CLASSIFICATION	// line 726
WITHOUT_CLASSIFICATION	// line 729
WITHOUT_CLASSIFICATION	// line 732
WITHOUT_CLASSIFICATION	// line 735
WITHOUT_CLASSIFICATION	// line 738
WITHOUT_CLASSIFICATION	// line 751
WITHOUT_CLASSIFICATION	// line 754
WITHOUT_CLASSIFICATION	// line 757
WITHOUT_CLASSIFICATION	// line 760
WITHOUT_CLASSIFICATION	// line 763
WITHOUT_CLASSIFICATION	// line 769
WITHOUT_CLASSIFICATION	// line 772
WITHOUT_CLASSIFICATION	// line 775
WITHOUT_CLASSIFICATION	// line 782
WITHOUT_CLASSIFICATION	// line 788
WITHOUT_CLASSIFICATION	// line 791
WITHOUT_CLASSIFICATION	// line 794
WITHOUT_CLASSIFICATION	// line 797
WITHOUT_CLASSIFICATION	// line 803
WITHOUT_CLASSIFICATION	// line 806
WITHOUT_CLASSIFICATION	// line 809
WITHOUT_CLASSIFICATION	// line 815
WITHOUT_CLASSIFICATION	// line 818
WITHOUT_CLASSIFICATION	// line 821
WITHOUT_CLASSIFICATION	// line 824
WITHOUT_CLASSIFICATION	// line 830
WITHOUT_CLASSIFICATION	// line 833
WITHOUT_CLASSIFICATION	// line 836
WITHOUT_CLASSIFICATION	// line 839
WITHOUT_CLASSIFICATION	// line 842
WITHOUT_CLASSIFICATION	// line 848
WITHOUT_CLASSIFICATION	// line 852
WITHOUT_CLASSIFICATION	// line 858
WITHOUT_CLASSIFICATION	// line 861
WITHOUT_CLASSIFICATION	// line 868
WITHOUT_CLASSIFICATION	// line 871
WITHOUT_CLASSIFICATION	// line 876
WITHOUT_CLASSIFICATION	// line 879
WITHOUT_CLASSIFICATION	// line 883
WITHOUT_CLASSIFICATION	// line 893
WITHOUT_CLASSIFICATION	// line 896
WITHOUT_CLASSIFICATION	// line 899
WITHOUT_CLASSIFICATION	// line 903
WITHOUT_CLASSIFICATION	// line 907
WITHOUT_CLASSIFICATION	// line 915
WITHOUT_CLASSIFICATION	// line 920
WITHOUT_CLASSIFICATION	// line 923
WITHOUT_CLASSIFICATION	// line 926
WITHOUT_CLASSIFICATION	// line 932
WITHOUT_CLASSIFICATION	// line 936
WITHOUT_CLASSIFICATION	// line 940
WITHOUT_CLASSIFICATION	// line 944
WITHOUT_CLASSIFICATION	// line 948
WITHOUT_CLASSIFICATION	// line 956
WITHOUT_CLASSIFICATION	// line 960
WITHOUT_CLASSIFICATION	// line 964
WITHOUT_CLASSIFICATION	// line 967
WITHOUT_CLASSIFICATION	// line 972
WITHOUT_CLASSIFICATION	// line 978
WITHOUT_CLASSIFICATION	// line 980
WITHOUT_CLASSIFICATION	// line 984
WITHOUT_CLASSIFICATION	// line 986
WITHOUT_CLASSIFICATION	// line 996
WITHOUT_CLASSIFICATION	// line 1001
WITHOUT_CLASSIFICATION	// line 1004
WITHOUT_CLASSIFICATION	// line 1008
WITHOUT_CLASSIFICATION	// line 1014
WITHOUT_CLASSIFICATION	// line 1029
WITHOUT_CLASSIFICATION	// line 1032
WITHOUT_CLASSIFICATION	// line 1034
WITHOUT_CLASSIFICATION	// line 1045
WITHOUT_CLASSIFICATION	// line 1048
WITHOUT_CLASSIFICATION	// line 1051
WITHOUT_CLASSIFICATION	// line 1058
WITHOUT_CLASSIFICATION	// line 1070
WITHOUT_CLASSIFICATION	// line 1073
WITHOUT_CLASSIFICATION	// line 1076
WITHOUT_CLASSIFICATION	// line 1079
WITHOUT_CLASSIFICATION	// line 1082
WITHOUT_CLASSIFICATION	// line 1089
WITHOUT_CLASSIFICATION	// line 1097
WITHOUT_CLASSIFICATION	// line 1100
WITHOUT_CLASSIFICATION	// line 1103
WITHOUT_CLASSIFICATION	// line 1107
WITHOUT_CLASSIFICATION	// line 1111
WITHOUT_CLASSIFICATION	// line 1113
WITHOUT_CLASSIFICATION	// line 1115
WITHOUT_CLASSIFICATION	// line 1119
WITHOUT_CLASSIFICATION	// line 1130
WITHOUT_CLASSIFICATION	// line 1133
WITHOUT_CLASSIFICATION	// line 1135
WITHOUT_CLASSIFICATION	// line 1137
WITHOUT_CLASSIFICATION	// line 1140
WITHOUT_CLASSIFICATION	// line 1151
WITHOUT_CLASSIFICATION	// line 1154
WITHOUT_CLASSIFICATION	// line 1158
WITHOUT_CLASSIFICATION	// line 1164
WITHOUT_CLASSIFICATION	// line 1175
WITHOUT_CLASSIFICATION	// line 1178
WITHOUT_CLASSIFICATION	// line 1187
WITHOUT_CLASSIFICATION	// line 1189
WITHOUT_CLASSIFICATION	// line 1193
WITHOUT_CLASSIFICATION	// line 1204
WITHOUT_CLASSIFICATION	// line 1207
WITHOUT_CLASSIFICATION	// line 1210
WITHOUT_CLASSIFICATION	// line 1214
WITHOUT_CLASSIFICATION	// line 1234
WITHOUT_CLASSIFICATION	// line 1239
WITHOUT_CLASSIFICATION	// line 1243
WITHOUT_CLASSIFICATION	// line 1247
WITHOUT_CLASSIFICATION	// line 1251
WITHOUT_CLASSIFICATION	// line 1263
WITHOUT_CLASSIFICATION	// line 1269
WITHOUT_CLASSIFICATION	// line 1280
WITHOUT_CLASSIFICATION	// line 1283
WITHOUT_CLASSIFICATION	// line 1290
WITHOUT_CLASSIFICATION	// line 1296
WITHOUT_CLASSIFICATION	// line 1299
WITHOUT_CLASSIFICATION	// line 1302
WITHOUT_CLASSIFICATION	// line 1309
WITHOUT_CLASSIFICATION	// line 1313
WITHOUT_CLASSIFICATION	// line 1315
WITHOUT_CLASSIFICATION	// line 1320
WITHOUT_CLASSIFICATION	// line 1328
WITHOUT_CLASSIFICATION	// line 1335
WITHOUT_CLASSIFICATION	// line 1348
WITHOUT_CLASSIFICATION	// line 1352
WITHOUT_CLASSIFICATION	// line 1358
WITHOUT_CLASSIFICATION	// line 1374
WITHOUT_CLASSIFICATION	// line 1381
WITHOUT_CLASSIFICATION	// line 1387
WITHOUT_CLASSIFICATION	// line 1392
WITHOUT_CLASSIFICATION	// line 1415
WITHOUT_CLASSIFICATION	// line 1431
WITHOUT_CLASSIFICATION	// line 1434
WITHOUT_CLASSIFICATION	// line 1440
WITHOUT_CLASSIFICATION	// line 1443
WITHOUT_CLASSIFICATION	// line 1453
WITHOUT_CLASSIFICATION	// line 1456
WITHOUT_CLASSIFICATION	// line 1462
WITHOUT_CLASSIFICATION	// line 1465
WITHOUT_CLASSIFICATION	// line 1470
WITHOUT_CLASSIFICATION	// line 1477
WITHOUT_CLASSIFICATION	// line 1480
WITHOUT_CLASSIFICATION	// line 1485
WITHOUT_CLASSIFICATION	// line 1488
WITHOUT_CLASSIFICATION	// line 1496
WITHOUT_CLASSIFICATION	// line 1502
WITHOUT_CLASSIFICATION	// line 1510
WITHOUT_CLASSIFICATION	// line 1513
WITHOUT_CLASSIFICATION	// line 1516
WITHOUT_CLASSIFICATION	// line 1533
WITHOUT_CLASSIFICATION	// line 1550
WITHOUT_CLASSIFICATION	// line 1553
WITHOUT_CLASSIFICATION	// line 1556
WITHOUT_CLASSIFICATION	// line 1565
WITHOUT_CLASSIFICATION	// line 1568
WITHOUT_CLASSIFICATION	// line 1571
WITHOUT_CLASSIFICATION	// line 1574
WITHOUT_CLASSIFICATION	// line 1577
WITHOUT_CLASSIFICATION	// line 1587
WITHOUT_CLASSIFICATION	// line 1595
WITHOUT_CLASSIFICATION	// line 1598
WITHOUT_CLASSIFICATION	// line 1600
WITHOUT_CLASSIFICATION	// line 1609
WITHOUT_CLASSIFICATION	// line 1623
WITHOUT_CLASSIFICATION	// line 1626
WITHOUT_CLASSIFICATION	// line 1629
WITHOUT_CLASSIFICATION	// line 1632
WITHOUT_CLASSIFICATION	// line 1638
WITHOUT_CLASSIFICATION	// line 1641
WITHOUT_CLASSIFICATION	// line 1644
WITHOUT_CLASSIFICATION	// line 1649
WITHOUT_CLASSIFICATION	// line 1655
WITHOUT_CLASSIFICATION	// line 1658
WITHOUT_CLASSIFICATION	// line 1661
WITHOUT_CLASSIFICATION	// line 1672
WITHOUT_CLASSIFICATION	// line 1677
WITHOUT_CLASSIFICATION	// line 1687
WITHOUT_CLASSIFICATION	// line 1694
WITHOUT_CLASSIFICATION	// line 1705
WITHOUT_CLASSIFICATION	// line 1708
WITHOUT_CLASSIFICATION	// line 1725
WITHOUT_CLASSIFICATION	// line 1733
WITHOUT_CLASSIFICATION	// line 1742
WITHOUT_CLASSIFICATION	// line 1745
WITHOUT_CLASSIFICATION	// line 1749
WITHOUT_CLASSIFICATION	// line 1757
WITHOUT_CLASSIFICATION	// line 1769
WITHOUT_CLASSIFICATION	// line 1772
WITHOUT_CLASSIFICATION	// line 1775
WITHOUT_CLASSIFICATION	// line 1784
WITHOUT_CLASSIFICATION	// line 1808
WITHOUT_CLASSIFICATION	// line 1814
WITHOUT_CLASSIFICATION	// line 1818
WITHOUT_CLASSIFICATION	// line 1822
WITHOUT_CLASSIFICATION	/* force for args */
WITHOUT_CLASSIFICATION	/*XXX 0;*/
WITHOUT_CLASSIFICATION	/*                      $$ = $3;*/
WITHOUT_CLASSIFICATION	/*                  }*/
WITHOUT_CLASSIFICATION	/* last expression should not be void */
WITHOUT_CLASSIFICATION	/* compstmt position includes both parens around it*/
WITHOUT_CLASSIFICATION	/*$8 == null ? NilImplicitNode.NIL : $8;*/
WITHOUT_CLASSIFICATION	/*$5 == null ? NilImplicitNode.NIL : $5;*/
WITHOUT_CLASSIFICATION	/* NOEX_PRIVATE for toplevel */
WITHOUT_CLASSIFICATION	/*mirko: check*/
WITHOUT_CLASSIFICATION	/* Include pipes on multiple arg type*/
WITHOUT_CLASSIFICATION	// line 529
WITHOUT_CLASSIFICATION	/* .setPosFrom($2);*/
WITHOUT_CLASSIFICATION	/* XXX*/
WITHOUT_CLASSIFICATION	/* zero length array */
WITHOUT_CLASSIFICATION	/* DStrNode: :"some text #{some expression}"*/
WITHOUT_CLASSIFICATION	/* StrNode: :"some text"*/
WITHOUT_CLASSIFICATION	/* EvStrNode :"#{some expression}"*/
WITHOUT_CLASSIFICATION	// line 1827 "DefaultRubyParser.y"
WITHOUT_CLASSIFICATION	// ignore, no debugger present
WITHOUT_CLASSIFICATION	//yyparse(lexer, new jay.yydebug.yyAnim("JRuby", 9));
WITHOUT_CLASSIFICATION	// line 7713 "-"
WITHOUT_CLASSIFICATION	// local scopes are argument scopes by default
WITHOUT_CLASSIFICATION	// mark as captured if from containing scope
WITHOUT_CLASSIFICATION	// mark as captured if from containing scope
WITHOUT_CLASSIFICATION	// We know this is a block scope because a local scope cannot be within a local scope // If topScope was itself it would have created a LocalAsgnNode above.
WITHOUT_CLASSIFICATION	// ENEBO: 1.9 has CURR nodes for local/block variables.  We don't.  I believe we follow proper logic
WITHOUT_CLASSIFICATION	// odd...but it is odd in ruby too.
WITHOUT_CLASSIFICATION	// What linenumber will the source think it starts from?
WITHOUT_CLASSIFICATION	// Is this inline source (aka -e "...source...")
WITHOUT_CLASSIFICATION	// We parse evals more often in source so assume an eval parse.
WITHOUT_CLASSIFICATION	// Should positions added extra IDE-friendly information and leave in all newline nodes
WITHOUT_CLASSIFICATION	// Will parser parse Duby grammar Extensions
WITHOUT_CLASSIFICATION	// Should we display extra debug information while parsing?
WITHOUT_CLASSIFICATION	// __END__ marker offset (-1 means none present)
WITHOUT_CLASSIFICATION	// Parser states:
WITHOUT_CLASSIFICATION	// Is the parser current within a singleton (value is number of nested singletons)
WITHOUT_CLASSIFICATION	// Is the parser currently within a method definition
WITHOUT_CLASSIFICATION	// LOCALVAR
WITHOUT_CLASSIFICATION	// CONSTANT
WITHOUT_CLASSIFICATION	// INSTANCE VARIABLE
WITHOUT_CLASSIFICATION	// Add real top to new top (unless this top is empty [only begin/end nodes or truly empty])
WITHOUT_CLASSIFICATION	/* MRI: block_append */
WITHOUT_CLASSIFICATION	// Reduces overhead in interp by not set position every single line we encounter. 
WITHOUT_CLASSIFICATION	// Assumption: tail is never a list node
WITHOUT_CLASSIFICATION	//        return new CallOneArgNode(firstNode.getPosition(), firstNode, operator, new ArrayNode(secondNode.getPosition(), secondNode));
WITHOUT_CLASSIFICATION	// Node
WITHOUT_CLASSIFICATION	// FIXME: Temporarily disabling because this fires way too much running Rails tests. JRUBY-518
WITHOUT_CLASSIFICATION	/*case CONSTNODE:                handleUselessWarn(node, "a constant"); return;*/
WITHOUT_CLASSIFICATION	// FIXME: Temporarily disabling because this fires way too much running Rails tests. JRUBY-518
WITHOUT_CLASSIFICATION	/*case CLASSNODE: case COLON2NODE:                handleUselessWarn(node, "::"); return;*/
WITHOUT_CLASSIFICATION	/*case SELFNODE:                handleUselessWarn(node, "self"); return;*/
WITHOUT_CLASSIFICATION	// FIXME: DSTR,EVSTR,STR: warning "string literal in condition"
WITHOUT_CLASSIFICATION	/* MRI: range_op */
WITHOUT_CLASSIFICATION	// Block and block pass passed in at same time....uh oh
WITHOUT_CLASSIFICATION	// foo()
WITHOUT_CLASSIFICATION	// foo()
WITHOUT_CLASSIFICATION	// foo()
WITHOUT_CLASSIFICATION	// tail must be EvStrNode at this point 
WITHOUT_CLASSIFICATION	//Do not add an empty string node
WITHOUT_CLASSIFICATION	// Zero-Argument declaration
WITHOUT_CLASSIFICATION	//yyLhs 542
WITHOUT_CLASSIFICATION	//yyLhs 542
WITHOUT_CLASSIFICATION	//yyLhs 542
WITHOUT_CLASSIFICATION	//yyLhs 542
WITHOUT_CLASSIFICATION	//yyLhs 542
WITHOUT_CLASSIFICATION	//yyLhs 542
WITHOUT_CLASSIFICATION	//yyLen 542
WITHOUT_CLASSIFICATION	//yyLen 542
WITHOUT_CLASSIFICATION	//yyLen 542
WITHOUT_CLASSIFICATION	//yyLen 542
WITHOUT_CLASSIFICATION	//yyLen 542
WITHOUT_CLASSIFICATION	//yyDefRed 945
WITHOUT_CLASSIFICATION	//yyDefRed 945
WITHOUT_CLASSIFICATION	//yyDefRed 945
WITHOUT_CLASSIFICATION	//yyDefRed 945
WITHOUT_CLASSIFICATION	//yyDefRed 945
WITHOUT_CLASSIFICATION	//yyDgoto 152
WITHOUT_CLASSIFICATION	//yyDgoto 152
WITHOUT_CLASSIFICATION	//yyDgoto 152
WITHOUT_CLASSIFICATION	//yyDgoto 152
WITHOUT_CLASSIFICATION	//yyDgoto 152
WITHOUT_CLASSIFICATION	//yyDgoto 152
WITHOUT_CLASSIFICATION	//yySindex 945
WITHOUT_CLASSIFICATION	//yySindex 945
WITHOUT_CLASSIFICATION	//yySindex 945
WITHOUT_CLASSIFICATION	//yySindex 945
WITHOUT_CLASSIFICATION	//yySindex 945
WITHOUT_CLASSIFICATION	//yyRindex 945
WITHOUT_CLASSIFICATION	//yyRindex 945
WITHOUT_CLASSIFICATION	//yyRindex 945
WITHOUT_CLASSIFICATION	//yyRindex 945
WITHOUT_CLASSIFICATION	//yyRindex 945
WITHOUT_CLASSIFICATION	//yyGindex 152
WITHOUT_CLASSIFICATION	//yyGindex 152
WITHOUT_CLASSIFICATION	//yyGindex 152
WITHOUT_CLASSIFICATION	//yyGindex 152
WITHOUT_CLASSIFICATION	//yyGindex 152
WITHOUT_CLASSIFICATION	// dynamically increase
WITHOUT_CLASSIFICATION	// else [default] reduce (yyN)
WITHOUT_CLASSIFICATION	// shift to yyN
WITHOUT_CLASSIFICATION	// reduce (yyN)
WITHOUT_CLASSIFICATION	// leave stack alone
WITHOUT_CLASSIFICATION	// line 321
WITHOUT_CLASSIFICATION	// line 351
WITHOUT_CLASSIFICATION	// line 382
WITHOUT_CLASSIFICATION	// line 417
WITHOUT_CLASSIFICATION	// line 420
WITHOUT_CLASSIFICATION	// line 423
WITHOUT_CLASSIFICATION	// line 426
WITHOUT_CLASSIFICATION	// line 280
WITHOUT_CLASSIFICATION	// line 283
WITHOUT_CLASSIFICATION	// line 296
WITHOUT_CLASSIFICATION	// line 324
WITHOUT_CLASSIFICATION	// line 327
WITHOUT_CLASSIFICATION	// line 331
WITHOUT_CLASSIFICATION	// line 333
WITHOUT_CLASSIFICATION	// line 336
WITHOUT_CLASSIFICATION	// line 342
WITHOUT_CLASSIFICATION	// line 345
WITHOUT_CLASSIFICATION	// line 348
WITHOUT_CLASSIFICATION	// line 354
WITHOUT_CLASSIFICATION	// line 368
WITHOUT_CLASSIFICATION	// line 377
WITHOUT_CLASSIFICATION	// line 388
WITHOUT_CLASSIFICATION	// line 392
WITHOUT_CLASSIFICATION	// line 397
WITHOUT_CLASSIFICATION	// line 429
WITHOUT_CLASSIFICATION	// line 432
WITHOUT_CLASSIFICATION	// line 436
WITHOUT_CLASSIFICATION	// line 445
WITHOUT_CLASSIFICATION	// line 448
WITHOUT_CLASSIFICATION	// line 454
WITHOUT_CLASSIFICATION	// line 459
WITHOUT_CLASSIFICATION	// line 466
WITHOUT_CLASSIFICATION	// line 469
WITHOUT_CLASSIFICATION	// line 478
WITHOUT_CLASSIFICATION	// line 481
WITHOUT_CLASSIFICATION	// line 488
WITHOUT_CLASSIFICATION	// line 494
WITHOUT_CLASSIFICATION	// line 497
WITHOUT_CLASSIFICATION	// line 503
WITHOUT_CLASSIFICATION	// line 506
WITHOUT_CLASSIFICATION	// line 509
WITHOUT_CLASSIFICATION	// line 512
WITHOUT_CLASSIFICATION	// line 521
WITHOUT_CLASSIFICATION	// line 526
WITHOUT_CLASSIFICATION	// line 540
WITHOUT_CLASSIFICATION	// line 543
WITHOUT_CLASSIFICATION	// line 546
WITHOUT_CLASSIFICATION	// line 566
WITHOUT_CLASSIFICATION	// line 610
WITHOUT_CLASSIFICATION	// line 672
WITHOUT_CLASSIFICATION	// line 691
WITHOUT_CLASSIFICATION	// line 696
WITHOUT_CLASSIFICATION	// line 772
WITHOUT_CLASSIFICATION	// line 782
WITHOUT_CLASSIFICATION	// line 785
WITHOUT_CLASSIFICATION	// line 788
WITHOUT_CLASSIFICATION	// line 791
WITHOUT_CLASSIFICATION	// line 534
WITHOUT_CLASSIFICATION	// line 549
WITHOUT_CLASSIFICATION	// line 552
WITHOUT_CLASSIFICATION	// line 558
WITHOUT_CLASSIFICATION	// line 561
WITHOUT_CLASSIFICATION	// line 571
WITHOUT_CLASSIFICATION	// line 574
WITHOUT_CLASSIFICATION	// line 579
WITHOUT_CLASSIFICATION	// line 586
WITHOUT_CLASSIFICATION	// line 589
WITHOUT_CLASSIFICATION	// line 592
WITHOUT_CLASSIFICATION	// line 595
WITHOUT_CLASSIFICATION	// line 598
WITHOUT_CLASSIFICATION	// line 623
WITHOUT_CLASSIFICATION	// line 627
WITHOUT_CLASSIFICATION	// line 630
WITHOUT_CLASSIFICATION	// line 633
WITHOUT_CLASSIFICATION	// line 639
WITHOUT_CLASSIFICATION	// line 648
WITHOUT_CLASSIFICATION	// line 657
WITHOUT_CLASSIFICATION	// line 661
WITHOUT_CLASSIFICATION	// line 666
WITHOUT_CLASSIFICATION	// line 678
WITHOUT_CLASSIFICATION	// line 682
WITHOUT_CLASSIFICATION	// line 688
WITHOUT_CLASSIFICATION	// line 699
WITHOUT_CLASSIFICATION	// line 706
WITHOUT_CLASSIFICATION	// line 708
WITHOUT_CLASSIFICATION	// line 727
WITHOUT_CLASSIFICATION	// line 737
WITHOUT_CLASSIFICATION	// line 753
WITHOUT_CLASSIFICATION	// line 779
WITHOUT_CLASSIFICATION	// line 801
WITHOUT_CLASSIFICATION	// line 808
WITHOUT_CLASSIFICATION	// line 811
WITHOUT_CLASSIFICATION	// line 817
WITHOUT_CLASSIFICATION	// line 842
WITHOUT_CLASSIFICATION	// line 845
WITHOUT_CLASSIFICATION	// line 848
WITHOUT_CLASSIFICATION	// line 893
WITHOUT_CLASSIFICATION	// line 899
WITHOUT_CLASSIFICATION	// line 932
WITHOUT_CLASSIFICATION	// line 944
WITHOUT_CLASSIFICATION	// line 960
WITHOUT_CLASSIFICATION	// line 980
WITHOUT_CLASSIFICATION	// line 1004
WITHOUT_CLASSIFICATION	// line 1038
WITHOUT_CLASSIFICATION	// line 820
WITHOUT_CLASSIFICATION	// line 826
WITHOUT_CLASSIFICATION	// line 829
WITHOUT_CLASSIFICATION	// line 832
WITHOUT_CLASSIFICATION	// line 851
WITHOUT_CLASSIFICATION	// line 857
WITHOUT_CLASSIFICATION	// line 860
WITHOUT_CLASSIFICATION	// line 863
WITHOUT_CLASSIFICATION	// line 866
WITHOUT_CLASSIFICATION	// line 869
WITHOUT_CLASSIFICATION	// line 875
WITHOUT_CLASSIFICATION	// line 884
WITHOUT_CLASSIFICATION	// line 887
WITHOUT_CLASSIFICATION	// line 890
WITHOUT_CLASSIFICATION	// line 902
WITHOUT_CLASSIFICATION	// line 909
WITHOUT_CLASSIFICATION	// line 912
WITHOUT_CLASSIFICATION	// line 916
WITHOUT_CLASSIFICATION	// line 922
WITHOUT_CLASSIFICATION	// line 928
WITHOUT_CLASSIFICATION	// line 941
WITHOUT_CLASSIFICATION	// line 947
WITHOUT_CLASSIFICATION	// line 951
WITHOUT_CLASSIFICATION	// line 955
WITHOUT_CLASSIFICATION	// line 965
WITHOUT_CLASSIFICATION	// line 969
WITHOUT_CLASSIFICATION	// line 977
WITHOUT_CLASSIFICATION	// line 983
WITHOUT_CLASSIFICATION	// line 1013
WITHOUT_CLASSIFICATION	// line 1023
WITHOUT_CLASSIFICATION	// line 1035
WITHOUT_CLASSIFICATION	// line 1041
WITHOUT_CLASSIFICATION	// line 1043
WITHOUT_CLASSIFICATION	// line 1054
WITHOUT_CLASSIFICATION	// line 1057
WITHOUT_CLASSIFICATION	// line 1060
WITHOUT_CLASSIFICATION	// line 1069
WITHOUT_CLASSIFICATION	// line 1075
WITHOUT_CLASSIFICATION	// line 1105
WITHOUT_CLASSIFICATION	// line 1111
WITHOUT_CLASSIFICATION	// line 1122
WITHOUT_CLASSIFICATION	// line 1130
WITHOUT_CLASSIFICATION	// line 1140
WITHOUT_CLASSIFICATION	// line 1158
WITHOUT_CLASSIFICATION	// line 1204
WITHOUT_CLASSIFICATION	// line 1207
WITHOUT_CLASSIFICATION	// line 1247
WITHOUT_CLASSIFICATION	// line 1251
WITHOUT_CLASSIFICATION	// line 1261
WITHOUT_CLASSIFICATION	// line 1078
WITHOUT_CLASSIFICATION	// line 1084
WITHOUT_CLASSIFICATION	// line 1087
WITHOUT_CLASSIFICATION	// line 1090
WITHOUT_CLASSIFICATION	// line 1093
WITHOUT_CLASSIFICATION	// line 1114
WITHOUT_CLASSIFICATION	// line 1116
WITHOUT_CLASSIFICATION	// line 1118
WITHOUT_CLASSIFICATION	// line 1124
WITHOUT_CLASSIFICATION	// line 1126
WITHOUT_CLASSIFICATION	// line 1138
WITHOUT_CLASSIFICATION	// line 1144
WITHOUT_CLASSIFICATION	// line 1149
WITHOUT_CLASSIFICATION	// line 1155
WITHOUT_CLASSIFICATION	// line 1162
WITHOUT_CLASSIFICATION	// line 1173
WITHOUT_CLASSIFICATION	// line 1179
WITHOUT_CLASSIFICATION	// line 1182
WITHOUT_CLASSIFICATION	// line 1190
WITHOUT_CLASSIFICATION	// line 1196
WITHOUT_CLASSIFICATION	// line 1213
WITHOUT_CLASSIFICATION	// line 1217
WITHOUT_CLASSIFICATION	// line 1231
WITHOUT_CLASSIFICATION	// line 1236
WITHOUT_CLASSIFICATION	// line 1244
WITHOUT_CLASSIFICATION	// line 1254
WITHOUT_CLASSIFICATION	// line 1258
WITHOUT_CLASSIFICATION	// line 1264
WITHOUT_CLASSIFICATION	// line 1270
WITHOUT_CLASSIFICATION	// line 1273
WITHOUT_CLASSIFICATION	// line 1276
WITHOUT_CLASSIFICATION	// line 1279
WITHOUT_CLASSIFICATION	// line 1282
WITHOUT_CLASSIFICATION	// line 1289
WITHOUT_CLASSIFICATION	// line 1292
WITHOUT_CLASSIFICATION	// line 1295
WITHOUT_CLASSIFICATION	// line 1298
WITHOUT_CLASSIFICATION	// line 1305
WITHOUT_CLASSIFICATION	// line 1348
WITHOUT_CLASSIFICATION	// line 1387
WITHOUT_CLASSIFICATION	// line 1392
WITHOUT_CLASSIFICATION	// line 1448
WITHOUT_CLASSIFICATION	// line 1462
WITHOUT_CLASSIFICATION	// line 1470
WITHOUT_CLASSIFICATION	// line 1496
WITHOUT_CLASSIFICATION	// line 1502
WITHOUT_CLASSIFICATION	// line 1595
WITHOUT_CLASSIFICATION	// line 1598
WITHOUT_CLASSIFICATION	// line 1308
WITHOUT_CLASSIFICATION	// line 1311
WITHOUT_CLASSIFICATION	// line 1317
WITHOUT_CLASSIFICATION	// line 1323
WITHOUT_CLASSIFICATION	// line 1326
WITHOUT_CLASSIFICATION	// line 1329
WITHOUT_CLASSIFICATION	// line 1337
WITHOUT_CLASSIFICATION	// line 1342
WITHOUT_CLASSIFICATION	// line 1345
WITHOUT_CLASSIFICATION	// line 1354
WITHOUT_CLASSIFICATION	// line 1359
WITHOUT_CLASSIFICATION	// line 1366
WITHOUT_CLASSIFICATION	// line 1369
WITHOUT_CLASSIFICATION	// line 1373
WITHOUT_CLASSIFICATION	// line 1377
WITHOUT_CLASSIFICATION	// line 1383
WITHOUT_CLASSIFICATION	// line 1399
WITHOUT_CLASSIFICATION	// line 1401
WITHOUT_CLASSIFICATION	// line 1406
WITHOUT_CLASSIFICATION	// line 1417
WITHOUT_CLASSIFICATION	// line 1424
WITHOUT_CLASSIFICATION	// line 1427
WITHOUT_CLASSIFICATION	// line 1430
WITHOUT_CLASSIFICATION	// line 1433
WITHOUT_CLASSIFICATION	// line 1436
WITHOUT_CLASSIFICATION	// line 1442
WITHOUT_CLASSIFICATION	// line 1445
WITHOUT_CLASSIFICATION	// line 1458
WITHOUT_CLASSIFICATION	// line 1464
WITHOUT_CLASSIFICATION	// line 1489
WITHOUT_CLASSIFICATION	// line 1493
WITHOUT_CLASSIFICATION	// line 1507
WITHOUT_CLASSIFICATION	// line 1519
WITHOUT_CLASSIFICATION	// line 1532
WITHOUT_CLASSIFICATION	// line 1538
WITHOUT_CLASSIFICATION	// line 1542
WITHOUT_CLASSIFICATION	// line 1557
WITHOUT_CLASSIFICATION	// line 1573
WITHOUT_CLASSIFICATION	// line 1591
WITHOUT_CLASSIFICATION	// line 1615
WITHOUT_CLASSIFICATION	// line 1629
WITHOUT_CLASSIFICATION	// line 1632
WITHOUT_CLASSIFICATION	// line 1705
WITHOUT_CLASSIFICATION	// line 1716
WITHOUT_CLASSIFICATION	// line 1725
WITHOUT_CLASSIFICATION	// line 1742
WITHOUT_CLASSIFICATION	// line 1749
WITHOUT_CLASSIFICATION	// line 1818
WITHOUT_CLASSIFICATION	// line 1822
WITHOUT_CLASSIFICATION	// line 1607
WITHOUT_CLASSIFICATION	// line 1610
WITHOUT_CLASSIFICATION	// line 1622
WITHOUT_CLASSIFICATION	// line 1625
WITHOUT_CLASSIFICATION	// line 1636
WITHOUT_CLASSIFICATION	// line 1639
WITHOUT_CLASSIFICATION	// line 1647
WITHOUT_CLASSIFICATION	// line 1651
WITHOUT_CLASSIFICATION	// line 1657
WITHOUT_CLASSIFICATION	// line 1660
WITHOUT_CLASSIFICATION	// line 1663
WITHOUT_CLASSIFICATION	// line 1678
WITHOUT_CLASSIFICATION	// line 1702
WITHOUT_CLASSIFICATION	// line 1711
WITHOUT_CLASSIFICATION	// line 1719
WITHOUT_CLASSIFICATION	// line 1722
WITHOUT_CLASSIFICATION	// line 1731
WITHOUT_CLASSIFICATION	// line 1734
WITHOUT_CLASSIFICATION	// line 1738
WITHOUT_CLASSIFICATION	// line 1746
WITHOUT_CLASSIFICATION	// line 1756
WITHOUT_CLASSIFICATION	// line 1758
WITHOUT_CLASSIFICATION	// line 1761
WITHOUT_CLASSIFICATION	// line 1767
WITHOUT_CLASSIFICATION	// line 1776
WITHOUT_CLASSIFICATION	// line 1782
WITHOUT_CLASSIFICATION	// line 1785
WITHOUT_CLASSIFICATION	// line 1788
WITHOUT_CLASSIFICATION	// line 1791
WITHOUT_CLASSIFICATION	// line 1797
WITHOUT_CLASSIFICATION	// line 1800
WITHOUT_CLASSIFICATION	// line 1803
WITHOUT_CLASSIFICATION	// line 1806
WITHOUT_CLASSIFICATION	// line 1809
WITHOUT_CLASSIFICATION	// line 1815
WITHOUT_CLASSIFICATION	// line 1825
WITHOUT_CLASSIFICATION	// line 1828
WITHOUT_CLASSIFICATION	// line 1831
WITHOUT_CLASSIFICATION	// line 1847
WITHOUT_CLASSIFICATION	/*$8 == null ? NilImplicitNode.NIL : $8;*/
WITHOUT_CLASSIFICATION	/*$5 == null ? NilImplicitNode.NIL : $5;*/
WITHOUT_CLASSIFICATION	/* .setPosFrom($2);*/
WITHOUT_CLASSIFICATION	/* zero length array */
WITHOUT_CLASSIFICATION	/* DStrNode: :"some text #{some expression}"*/
WITHOUT_CLASSIFICATION	/* StrNode: :"some text"*/
WITHOUT_CLASSIFICATION	/* EvStrNode :"#{some expression}"*/
WITHOUT_CLASSIFICATION	// // INSTANCE VARIABLE METHODS //
WITHOUT_CLASSIFICATION	// line 1854
WITHOUT_CLASSIFICATION	// line 1869
WITHOUT_CLASSIFICATION	// line 1872
WITHOUT_CLASSIFICATION	// line 1877
WITHOUT_CLASSIFICATION	// line 1886
WITHOUT_CLASSIFICATION	// line 1898
WITHOUT_CLASSIFICATION	// line 1902
WITHOUT_CLASSIFICATION	// line 1905
WITHOUT_CLASSIFICATION	// line 1911
WITHOUT_CLASSIFICATION	// line 1918
WITHOUT_CLASSIFICATION	// line 1935
WITHOUT_CLASSIFICATION	// line 1938
WITHOUT_CLASSIFICATION	// line 1942
WITHOUT_CLASSIFICATION	// line 1948
WITHOUT_CLASSIFICATION	// line 1960
WITHOUT_CLASSIFICATION	// line 1963
WITHOUT_CLASSIFICATION	// line 1968
WITHOUT_CLASSIFICATION	// line 1972
WITHOUT_CLASSIFICATION	// line 1982
WITHOUT_CLASSIFICATION	// line 1995
WITHOUT_CLASSIFICATION	// line 2000
WITHOUT_CLASSIFICATION	// line 2006
WITHOUT_CLASSIFICATION	// line 2010
WITHOUT_CLASSIFICATION	/* We may need to subtract addition offset off of first */
WITHOUT_CLASSIFICATION	/* string fragment (we optimistically take one off in*/
WITHOUT_CLASSIFICATION	/* ParserSupport.literal_concat).  Check token length*/
WITHOUT_CLASSIFICATION	/* and subtract as neeeded.*/
WITHOUT_CLASSIFICATION	/*                    $$ = new ArgAuxiliaryNode($1.getPosition(), (String) $1.getValue(), 1);  */
WITHOUT_CLASSIFICATION	/* ENEBO: arg surrounded by in_defined set/unset*/
WITHOUT_CLASSIFICATION	// ignore, no debugger present
WITHOUT_CLASSIFICATION	//yyparse(lexer, new jay.yydebug.yyAnim("JRuby", 9));
WITHOUT_CLASSIFICATION	// mark as captured if from containing scope
WITHOUT_CLASSIFICATION	// mark as captured if from containing scope
WITHOUT_CLASSIFICATION	/* ENEBO: Removed !compile_for_eval which probably is to reduce warnings*/
WITHOUT_CLASSIFICATION	/* was $$ = null;*/
WITHOUT_CLASSIFICATION	// line 2019 "Ruby19Parser.y"
WITHOUT_CLASSIFICATION	// line 8143 "-"
WITHOUT_CLASSIFICATION	// we know variables cannot be null since localstaticscope will create a 0 length one.
WITHOUT_CLASSIFICATION	// No bit math to store level since we know level is zero for this case
WITHOUT_CLASSIFICATION	// Next immediate scope.  Variable and constant scoping rules make use of this variable // in different ways.
WITHOUT_CLASSIFICATION	// Live reference to module
WITHOUT_CLASSIFICATION	// Next CRef down the lexical structure
WITHOUT_CLASSIFICATION	// Our name holder (offsets are assigned as variables are added
WITHOUT_CLASSIFICATION	// number of variables in this scope representing required arguments
WITHOUT_CLASSIFICATION	// number of variables in this scope representing optional arguments
WITHOUT_CLASSIFICATION	// index of variable that represents a "rest" arg
WITHOUT_CLASSIFICATION	// Note that this object equality check is intentional, to ensure // the string and its interned version are the same object.
WITHOUT_CLASSIFICATION	// Returns slot of variable
WITHOUT_CLASSIFICATION	// Returns slot of variable
WITHOUT_CLASSIFICATION	/* Note: Only used by compiler until it can use getConstant again or use some other refactoring */
WITHOUT_CLASSIFICATION	// If we could not find the constant from cref..then try getting from inheritence hierarchy
WITHOUT_CLASSIFICATION	/* Try and unload the autoload specified from internedName */
WITHOUT_CLASSIFICATION	// We override that the logic which uses this
WITHOUT_CLASSIFICATION	// This while loop is for restarting the block call in case a 'redo' fires.
WITHOUT_CLASSIFICATION	// do nothing, allow loop to redo
WITHOUT_CLASSIFICATION	// source extensions
WITHOUT_CLASSIFICATION	// do nothing, allow loop to redo
WITHOUT_CLASSIFICATION	// . Array given to rest should pass itself // . Array with rest + other args should extract array // . Array with multiple values and NO rest should extract args if there are more than one argument
WITHOUT_CLASSIFICATION	// A 'next' is like a local return from the block, ending this call or yield.
WITHOUT_CLASSIFICATION	// Is this thread currently with in a function trace?
WITHOUT_CLASSIFICATION	// Is this thread currently doing an defined? defined should set things like $!
WITHOUT_CLASSIFICATION	//private UnsynchronizedStack parentStack;
WITHOUT_CLASSIFICATION	//private UnsynchronizedStack frameStack;
WITHOUT_CLASSIFICATION	// List of active dynamic scopes.  Each of these may have captured other dynamic scopes // to implement closures.
WITHOUT_CLASSIFICATION	// File where current executing unit is being evaluated
WITHOUT_CLASSIFICATION	// Line where current executing unit is being evaluated
WITHOUT_CLASSIFICATION	// In certain places, like grep, we don't use real frames for the // call blocks. This has the effect of not setting the backref in // the correct frame - this delta is activated to the place where // the grep is running in so that the backref will be set in an // appropriate place.
WITHOUT_CLASSIFICATION	// TOPLEVEL self and a few others want a top-level scope.  We create this one right // away and then pass it into top-level parse so it ends up being the top level.
WITHOUT_CLASSIFICATION	//////////////////// CATCH MANAGEMENT ////////////////////////
WITHOUT_CLASSIFICATION	//////////////////// FRAME MANAGEMENT ////////////////////////
WITHOUT_CLASSIFICATION	// happens with native exceptions, should not filter those out
WITHOUT_CLASSIFICATION	// assert level == 0;
WITHOUT_CLASSIFICATION	// assert level == 0;
WITHOUT_CLASSIFICATION	// look for mangling markers for compiled Ruby in method name
WITHOUT_CLASSIFICATION	// if it's not a rescue or ensure, there's a frame associated, so decrement
WITHOUT_CLASSIFICATION	// look for __file__ method name for compiled roots
WITHOUT_CLASSIFICATION	// All entries following removed node can stay // in list, but all preceding ones need to be // cloned.
WITHOUT_CLASSIFICATION	// required and optional only
WITHOUT_CLASSIFICATION	// do nothing, allow loop to redo
WITHOUT_CLASSIFICATION	// look for mangling markers for bound, unframed methods in class name
WITHOUT_CLASSIFICATION	// set the binding's frame's "previous" file and line to current, so // trace will show who called the block
WITHOUT_CLASSIFICATION	// framed invokers will have Ruby frames associated with them
WITHOUT_CLASSIFICATION	// look for mangling markers for bound, framed methods in class name
WITHOUT_CLASSIFICATION	// unframed invokers have no Ruby frames, so pull from class name // but use current frame as file and line
WITHOUT_CLASSIFICATION	// try to mine out a Ruby frame using our list of interpreter entry-point markers
WITHOUT_CLASSIFICATION	// Frame matches one of our markers for "interpreted" calls
WITHOUT_CLASSIFICATION	// Frame is extraneous runtime information, skip it unless debug
WITHOUT_CLASSIFICATION	/*     * Determine what sort of assigner should be used for the provided 'iter' (e.g. block).     * Assigner provides just the right logic for assigning values to local parameters of the     * block.     *     * This method also has a second optimization which is to set 'noargblock' in the case that     * the block is a block which accepts no arguments.  The primary reason for this second     * optimization is that in the case of a yield with a RubyArray we will bypass some logic     * processing the RubyArray into a proper form (only to then not do anythign with it).  A     * secondary benefit is that a simple boolean seems to optimize by hotspot much faster     * than the zero arg assigner.     */
WITHOUT_CLASSIFICATION	// new scope for this invocation of the block, based on parent scope
WITHOUT_CLASSIFICATION	// No argument blocks
WITHOUT_CLASSIFICATION	// just push the same empty scope, since we won't use one
WITHOUT_CLASSIFICATION	// Not sure if this is actually possible, but better safe than sorry
WITHOUT_CLASSIFICATION	// rest arg must be splatted
WITHOUT_CLASSIFICATION	// This should only be called by 1.8 (1.9 subclasses this to handle unusedBlock).
WITHOUT_CLASSIFICATION	// Highest reserved id
WITHOUT_CLASSIFICATION	// binary typed calls
WITHOUT_CLASSIFICATION	// id must always be even
WITHOUT_CLASSIFICATION	// with block pass
WITHOUT_CLASSIFICATION	// no block
WITHOUT_CLASSIFICATION	// with block literal (iter)
WITHOUT_CLASSIFICATION	//            assert false : "can this happen?";
WITHOUT_CLASSIFICATION	// if we have multiple asgn with just *args, need a special type for that
WITHOUT_CLASSIFICATION	// && args.getMaxArgumentsCount() != 1) {
WITHOUT_CLASSIFICATION	//            return warnMultiReturnNil(ruby);
WITHOUT_CLASSIFICATION	// ensure zero is devoted to no method name
WITHOUT_CLASSIFICATION	// predefine a few other methods we invoke directly elsewhere
WITHOUT_CLASSIFICATION	// fast and safe respond_to? call site logic
WITHOUT_CLASSIFICATION	// Static scoping information for this scope
WITHOUT_CLASSIFICATION	// Captured dynamic scopes
WITHOUT_CLASSIFICATION	// Backref for $~, $1, etc
WITHOUT_CLASSIFICATION	// Lastline
WITHOUT_CLASSIFICATION	// No binding scope so we should create one
WITHOUT_CLASSIFICATION	// bindings scopes must always be ManyVars scopes since evals can grow them
WITHOUT_CLASSIFICATION	// Helper function to give a good view of current dynamic scope with captured scopes
WITHOUT_CLASSIFICATION	// try count specific args to determine required
WITHOUT_CLASSIFICATION	// Some helper functions:
WITHOUT_CLASSIFICATION	// silently ignore
WITHOUT_CLASSIFICATION	// used by compiler
WITHOUT_CLASSIFICATION	// initialize the static settings to determine which factory to use
WITHOUT_CLASSIFICATION	// // INSTANCE VARIABLE METHODS //
WITHOUT_CLASSIFICATION	// We need to guarantee that any existing reads of old Map can //  proceed. So we cannot yet null out each bin.
WITHOUT_CLASSIFICATION	//  Single node on list
WITHOUT_CLASSIFICATION	// Reuse trailing consecutive sequence at same slot
WITHOUT_CLASSIFICATION	// Clone all remaining nodes
WITHOUT_CLASSIFICATION	// A 'next' is like a local return from the block, ending this call or yield.
WITHOUT_CLASSIFICATION	// Note: In Ruby 1.9 all of this logic can go away since they will require explicit // bindings for evals.
WITHOUT_CLASSIFICATION	// We only define one special dynamic scope per 'logical' binding.  So all bindings for // the same scope should share the same dynamic scope.  This allows multiple evals with // different different bindings in the same scope to see the same stuff.
WITHOUT_CLASSIFICATION	// If the next scope out has the same binding scope as this scope it means // we are evaling within an eval and in that case we should be sharing the same // binding scope.
WITHOUT_CLASSIFICATION	// Populate up to shorter of calling arguments or local parameters in the block
WITHOUT_CLASSIFICATION	// Populate up to shorter of calling arguments or local parameters in the block
WITHOUT_CLASSIFICATION	// nil pad since we provided less values than block parms
WITHOUT_CLASSIFICATION	// nil pad since we provided less values than block parms
WITHOUT_CLASSIFICATION	// nil pad since we provided less values than block parms
WITHOUT_CLASSIFICATION	// no extra args for rest
WITHOUT_CLASSIFICATION	// no extra args for rest
WITHOUT_CLASSIFICATION	// extra args for rest
WITHOUT_CLASSIFICATION	// extra args for rest
WITHOUT_CLASSIFICATION	/*     * This is the proper behavior for all non-expanded assigners which have a pre > 0.  The rest     * override this.     */
WITHOUT_CLASSIFICATION	/*     * This is the proper behavior for all non-expanded assigners.     */
WITHOUT_CLASSIFICATION	// prefill ?
WITHOUT_CLASSIFICATION	// prefill ?
WITHOUT_CLASSIFICATION	// MUST be called from synchronized/locked block! // should only be called by variableTableStore/variableTableFastStore
WITHOUT_CLASSIFICATION	// retrieve method // module // name
WITHOUT_CLASSIFICATION	// call is ok, punch it!
WITHOUT_CLASSIFICATION	// if undefined, branch to method_missing
WITHOUT_CLASSIFICATION	// if we're not attempting to invoke method_missing and method is not visible, branch to method_missing
WITHOUT_CLASSIFICATION	// method object already present, push various args // tc // self // klazz // name
WITHOUT_CLASSIFICATION	// if it's method_missing, just invoke it
WITHOUT_CLASSIFICATION	// invoke callMethodMissing
WITHOUT_CLASSIFICATION	// caller
WITHOUT_CLASSIFICATION	// calltype // block
WITHOUT_CLASSIFICATION	// if no exception raised, jump to end to leave result on stack for return
WITHOUT_CLASSIFICATION	// load arity for check
WITHOUT_CLASSIFICATION	// throw
WITHOUT_CLASSIFICATION	// load arity for error
WITHOUT_CLASSIFICATION	// arity ok, continue
WITHOUT_CLASSIFICATION	//InvocationCallbackFactory
WITHOUT_CLASSIFICATION	// ENEBO: Perhaps slow but simple for now
WITHOUT_CLASSIFICATION	// FastInvocationCallback
WITHOUT_CLASSIFICATION	// InvocationCallback
WITHOUT_CLASSIFICATION	//DumpingInvocationCallbackFactory
WITHOUT_CLASSIFICATION	// for fast lookup: encoding entry => org.jruby.RubyEncoding
WITHOUT_CLASSIFICATION	// for fast lookup: org.joni.encoding.Encoding => org.jruby.RubyEncoding
WITHOUT_CLASSIFICATION	// load the encoding
WITHOUT_CLASSIFICATION	// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String
WITHOUT_CLASSIFICATION	// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String
WITHOUT_CLASSIFICATION	// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String
WITHOUT_CLASSIFICATION	// IRubyObject, DynamicMethod, ThreadContext, IRubyObject, RubyModule, String, IRubyObject
WITHOUT_CLASSIFICATION	// IRubyObject, DynamicMethod, ThreadContext, IRubyObject, RubyClass, String, IRubyObject
WITHOUT_CLASSIFICATION	// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, IRubyObject
WITHOUT_CLASSIFICATION	// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, IRubyObject
WITHOUT_CLASSIFICATION	// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, IRubyObject
WITHOUT_CLASSIFICATION	// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args
WITHOUT_CLASSIFICATION	// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args
WITHOUT_CLASSIFICATION	// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args
WITHOUT_CLASSIFICATION	// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args
WITHOUT_CLASSIFICATION	// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args
WITHOUT_CLASSIFICATION	// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args
WITHOUT_CLASSIFICATION	// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args
WITHOUT_CLASSIFICATION	// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args
WITHOUT_CLASSIFICATION	// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args
WITHOUT_CLASSIFICATION	// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args
WITHOUT_CLASSIFICATION	// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args
WITHOUT_CLASSIFICATION	// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args
WITHOUT_CLASSIFICATION	// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args
WITHOUT_CLASSIFICATION	// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args
WITHOUT_CLASSIFICATION	// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args
WITHOUT_CLASSIFICATION	// If we're running in 1.9 compat mode, add Ruby 1.9 libs to path before 1.8 libs
WITHOUT_CLASSIFICATION	// BreakJump, ThreadContext
WITHOUT_CLASSIFICATION	// ThreadContext
WITHOUT_CLASSIFICATION	// BreakJump, CacheEntry, ThreadContext, IRubyObject, IRubyObject
WITHOUT_CLASSIFICATION	// Make Java class files in the jar reachable from Ruby
WITHOUT_CLASSIFICATION	// RetryJump, CacheEntry, ThreadContext, IRubyObject, IRubyObject
WITHOUT_CLASSIFICATION	// add all startup load paths to the list first
WITHOUT_CLASSIFICATION	// if it's a compiled JRuby script, instantiate and run it
WITHOUT_CLASSIFICATION	// wrap in try/catch for security exceptions in an applet
WITHOUT_CLASSIFICATION	// add $RUBYLIB paths
WITHOUT_CLASSIFICATION	// Empty paths do not need to be added
WITHOUT_CLASSIFICATION	// "." dir is used for relative path loads from a given file, as in require '../foo/bar'
WITHOUT_CLASSIFICATION	// Add 1.8 libs
WITHOUT_CLASSIFICATION	// Create package name, by splitting on / and joining all but the last elements with a ".", and downcasing them.
WITHOUT_CLASSIFICATION	// Library has already been loaded in some form, bail out
WITHOUT_CLASSIFICATION	// We don't want a package name beginning with dots, so we remove them
WITHOUT_CLASSIFICATION	// If there is a jar-file with the required name, we add this to the class path.
WITHOUT_CLASSIFICATION	// quietly try to load the class
WITHOUT_CLASSIFICATION	// If there was a good library before, we go back to that
WITHOUT_CLASSIFICATION	// no library or extension found, try to load directly as a class
WITHOUT_CLASSIFICATION	// if an extension is specified, try more targetted searches
WITHOUT_CLASSIFICATION	// signed short, big-endian
WITHOUT_CLASSIFICATION	// source extensions
WITHOUT_CLASSIFICATION	// We don't support .so, but some stdlib require .so directly // replace it with .jar to look for an extension type we do support
WITHOUT_CLASSIFICATION	// This code exploits the fact that all .jar files will be found for the JarredScript feature. // This is where the basic extension mechanism gets fixed
WITHOUT_CLASSIFICATION	// Make the class name look nice, by splitting on _ and capitalize each segment, then joining // the, together without anything separating them, and last put on "Service" at the end.
WITHOUT_CLASSIFICATION	// It's _really_ expensive to check that the class actually exists in the Jar, so // we don't do that now.
WITHOUT_CLASSIFICATION	// trim extension to try other options
WITHOUT_CLASSIFICATION	// extension extensions
WITHOUT_CLASSIFICATION	// unknown extension, fall back to search with extensions
WITHOUT_CLASSIFICATION	// try all extensions
WITHOUT_CLASSIFICATION	// if a source extension is specified, try all source extensions
WITHOUT_CLASSIFICATION	// unknown extension, fall back to exact search
WITHOUT_CLASSIFICATION	// try only literal search
WITHOUT_CLASSIFICATION	// attempt to load the found library
WITHOUT_CLASSIFICATION	// otherwise load the library we've found
WITHOUT_CLASSIFICATION	// allow MainExitException to propagate out for exec and friends
WITHOUT_CLASSIFICATION	// Remove any relative prefix, e.g. "./foo/bar" becomes "foo/bar".
WITHOUT_CLASSIFICATION	// check current directory; if file exists, retrieve URL and return resource
WITHOUT_CLASSIFICATION	// if a jar or file URL, return load service resource directly without further searching
WITHOUT_CLASSIFICATION	// end suffix iteration
WITHOUT_CLASSIFICATION	// if it's a ./ baseName, use CWD logic
WITHOUT_CLASSIFICATION	// if given path is absolute, just try it as-is (with extensions) and no load path
WITHOUT_CLASSIFICATION	// we check length == 0 for 'load', which does not use load path
WITHOUT_CLASSIFICATION	// we check length == 0 for 'load', which does not use load path
WITHOUT_CLASSIFICATION	// it's an absolute path, use it as-is
WITHOUT_CLASSIFICATION	// it's an absolute path, use it as-is
WITHOUT_CLASSIFICATION	// prepend ./ if . is not already there, since we're loading based on CWD
WITHOUT_CLASSIFICATION	// prepend ./ if . is not already there, since we're loading based on CWD
WITHOUT_CLASSIFICATION	//                    actualPath = new File(RubyFile.expandUserPath(runtime.getCurrentContext(), reportedPath));
WITHOUT_CLASSIFICATION	// handle security-sensitive case
WITHOUT_CLASSIFICATION	// if entry is an empty string, skip it
WITHOUT_CLASSIFICATION	// if entry starts with a slash, skip it since classloader resources never start with a /
WITHOUT_CLASSIFICATION	// otherwise, try to load from classpath (Note: Jar resources always uses '/')
WITHOUT_CLASSIFICATION	// Make sure this is not a directory or unavailable in some way
WITHOUT_CLASSIFICATION	// signed short, native
WITHOUT_CLASSIFICATION	// If we fail to find as a normal Ruby script, we try to find as an extension, // checking for a builtin first.
WITHOUT_CLASSIFICATION	// write `I' instance var signet if class is NOT a direct subclass of Object
WITHOUT_CLASSIFICATION	// if name starts with a / we're done (classloader resources won't load with an initial /)
WITHOUT_CLASSIFICATION	// Look in classpath next (we do not use File as a test since UNC names will match) // Note: Jar resources must NEVER begin with an '/'. (previous code said "always begin with a /")
WITHOUT_CLASSIFICATION	/* Directories and unavailable resources are not able to open a stream. */
WITHOUT_CLASSIFICATION	// Try to load from classpath without prefix. "A/b.rb" will not load as  // "./A/b.rb" in a jar file.
WITHOUT_CLASSIFICATION	// object has instance vars and isn't a class, get a snapshot to be marshalled // and output the ivar header here
WITHOUT_CLASSIFICATION	// flush afer whole dump is complete
WITHOUT_CLASSIFICATION	//            write('S');
WITHOUT_CLASSIFICATION	// switch on the object's *native type*. This allows use-defined // classes that have extended core native types to piggyback on their // marshalling logic.
WITHOUT_CLASSIFICATION	// object is a custom class that extended one of the native types other than Object
WITHOUT_CLASSIFICATION	// We do not want to capture cached methods
WITHOUT_CLASSIFICATION	// w_symbol
WITHOUT_CLASSIFICATION	// w_unique
WITHOUT_CLASSIFICATION	// call the proc, but not for symbols
WITHOUT_CLASSIFICATION	// Major // Minor
WITHOUT_CLASSIFICATION	// any ivars, since we don't have __attached__ ivar now
WITHOUT_CLASSIFICATION	// "hashdef" object, a hash with a default
WITHOUT_CLASSIFICATION	// All "C" marshalled objects descend from core classes, which are all RubyObject
WITHOUT_CLASSIFICATION	// sic
WITHOUT_CLASSIFICATION	// if we're not the "argument scope" for zsuper, try our parent
WITHOUT_CLASSIFICATION	// if we're not the "argument scope" for zsuper, try our parent
WITHOUT_CLASSIFICATION	// if we're not the "argument scope" for zsuper, try our parent
WITHOUT_CLASSIFICATION	// copy and splat arguments out of the scope to use for zsuper call
WITHOUT_CLASSIFICATION	// copy and splat arguments out of the scope to use for zsuper call
WITHOUT_CLASSIFICATION	// rest arg must be splatted
WITHOUT_CLASSIFICATION	// rest arg must be splatted
WITHOUT_CLASSIFICATION	/*     * If we are setting post arguments we can assume there are no pre or others     */
WITHOUT_CLASSIFICATION	// XXX: 0xffff0000 on BE?
WITHOUT_CLASSIFICATION	// unsigned short, native
WITHOUT_CLASSIFICATION	// int, native // long, native
WITHOUT_CLASSIFICATION	// if we're not the "argument scope" for zsuper, try our parent
WITHOUT_CLASSIFICATION	// if we're not the "argument scope" for zsuper, try our parent
WITHOUT_CLASSIFICATION	// if we're not the "argument scope" for zsuper, try our parent
WITHOUT_CLASSIFICATION	// copy and splat arguments out of the scope to use for zsuper call
WITHOUT_CLASSIFICATION	// copy and splat arguments out of the scope to use for zsuper call
WITHOUT_CLASSIFICATION	// copy and splat arguments out of the scope to use for zsuper call
WITHOUT_CLASSIFICATION	// rest arg must be splatted
WITHOUT_CLASSIFICATION	// rest arg must be splatted
WITHOUT_CLASSIFICATION	// Look for slash, starting from 'start' position, until 'end'.
WITHOUT_CLASSIFICATION	// Our values holder (name of variables are kept in staticScope)
WITHOUT_CLASSIFICATION	// &foo are not getting set from somewhere...I want the following assert to be true though //assert variableValues[offset] != null : "Getting unassigned: " + staticScope.getVariables()[offset];
WITHOUT_CLASSIFICATION	// &foo are not getting set from somewhere...I want the following assert to be true though //assert variableValues[offset] != null : "Getting unassigned: " + staticScope.getVariables()[offset];
WITHOUT_CLASSIFICATION	// &foo are not getting set from somewhere...I want the following assert to be true though //assert variableValues[offset] != null : "Getting unassigned: " + staticScope.getVariables()[offset];
WITHOUT_CLASSIFICATION	// &foo are not getting set from somewhere...I want the following assert to be true though //assert variableValues[offset] != null : "Getting unassigned: " + staticScope.getVariables()[offset];
WITHOUT_CLASSIFICATION	// &foo are not getting set from somewhere...I want the following assert to be true though //assert variableValues[offset] != null : "Getting unassigned: " + staticScope.getVariables()[offset];
WITHOUT_CLASSIFICATION	// SunSignalFacade
WITHOUT_CLASSIFICATION	// All braces pushed..
WITHOUT_CLASSIFICATION	/* failed : try next recursion */
WITHOUT_CLASSIFICATION	// leftToken made us start as nest 1
WITHOUT_CLASSIFICATION	// are we at '**/'
WITHOUT_CLASSIFICATION	// No or mismatched braces..Move along..nothing to see here
WITHOUT_CLASSIFICATION	// not enough bytes
WITHOUT_CLASSIFICATION	// Get index of last read byte
WITHOUT_CLASSIFICATION	// skip inner braces
WITHOUT_CLASSIFICATION	/*     * Process {}'s (example: Dir.glob("{jruby,jython}/README*")      */
WITHOUT_CLASSIFICATION	/* complete, according to Posix.2 */
WITHOUT_CLASSIFICATION	/* Only accept an open brace if there is a close */
WITHOUT_CLASSIFICATION	/* brace to match it.  Bracket expressions must be */
WITHOUT_CLASSIFICATION	// index of left-most brace // index of right-most brace
WITHOUT_CLASSIFICATION	// Length check is a hack.  We should not be reeiving "" as a filename ever. 
WITHOUT_CLASSIFICATION	// NOT REACHED HERE
WITHOUT_CLASSIFICATION	// NOT REACHED HERE
WITHOUT_CLASSIFICATION	// NOT REACHED HERE
WITHOUT_CLASSIFICATION	// Pickaxe says @ must be followed by a name character, but MRI // does not require this.
WITHOUT_CLASSIFICATION	// Pickaxe says @@ must be followed by a name character, but MRI // does not require this.
WITHOUT_CLASSIFICATION	// SimpleSampler
WITHOUT_CLASSIFICATION	/*     * convert into longs, returning unsigned 64-bit values as signed longs     * ( num2long raises a RangeError on values > Long.MAX_VALUE )     */
WITHOUT_CLASSIFICATION	// b64_xtable for decoding Base 64
WITHOUT_CLASSIFICATION	// single precision, little-endian
WITHOUT_CLASSIFICATION	// single precision, big-endian
WITHOUT_CLASSIFICATION	// single precision, native
WITHOUT_CLASSIFICATION	// single precision, native // single precision, native
WITHOUT_CLASSIFICATION	// double precision, little-endian
WITHOUT_CLASSIFICATION	// double precision, big-endian
WITHOUT_CLASSIFICATION	// double precision, native
WITHOUT_CLASSIFICATION	// signed short, little-endian
WITHOUT_CLASSIFICATION	// signed char
WITHOUT_CLASSIFICATION	// unsigned char
WITHOUT_CLASSIFICATION	// long, little-endian
WITHOUT_CLASSIFICATION	// long, big-endian
WITHOUT_CLASSIFICATION	// unsigned int, native
WITHOUT_CLASSIFICATION	// int, native
WITHOUT_CLASSIFICATION	// 64-bit number, native (as fixnum)
WITHOUT_CLASSIFICATION	// How many occurrences of 'type' we want
WITHOUT_CLASSIFICATION	// See if we have a converter for the job...
WITHOUT_CLASSIFICATION	// Otherwise the unpack should be here...
WITHOUT_CLASSIFICATION	// Possible Checksum Byte
WITHOUT_CLASSIFICATION	// obtain a
WITHOUT_CLASSIFICATION	// obtain b
WITHOUT_CLASSIFICATION	// obtain c
WITHOUT_CLASSIFICATION	// obtain d
WITHOUT_CLASSIFICATION	/*encode.limit() - */
WITHOUT_CLASSIFICATION	/* 1 */
WITHOUT_CLASSIFICATION	/* 2 */
WITHOUT_CLASSIFICATION	/* 3 */
WITHOUT_CLASSIFICATION	/* 4 */
WITHOUT_CLASSIFICATION	/* 5 */
WITHOUT_CLASSIFICATION	/* 6 */
WITHOUT_CLASSIFICATION	/* 7 */
WITHOUT_CLASSIFICATION	// Skip all whitespace in pack format string
WITHOUT_CLASSIFICATION	// Skip embedded comments in pack format string
WITHOUT_CLASSIFICATION	// In case when the number of occurences is // explicitly specified, we have to read up // the remaining garbage after the '\0' to // satisfy the requested pattern.
WITHOUT_CLASSIFICATION	//normal exit, this should be faster than a test at each iterations for string with more than //about 40 char
WITHOUT_CLASSIFICATION	// We encountered '\0' when // were reading the buffer above, // increment the number of read bytes.
WITHOUT_CLASSIFICATION	// MRI behavior: Contrary to what seems to be logical, // when '*' is given, MRI calculates the distance // to the end, in order to go backwards.
WITHOUT_CLASSIFICATION	// Determine how many of type are needed (default: 1)
WITHOUT_CLASSIFICATION	// 'Z' adds extra null pad (versus 'a')
WITHOUT_CLASSIFICATION	//if the low bit is set //set the high bit of the result
WITHOUT_CLASSIFICATION	//if the index is not a multiple of 8, we are not on a byte boundary //shift the byte
WITHOUT_CLASSIFICATION	//if the length is not a multiple of 8 //we need to pad the last byte
WITHOUT_CLASSIFICATION	//if the length is not a multiple of 8 //we need to pad the last byte
WITHOUT_CLASSIFICATION	//do some padding, I don't understand the padding strategy
WITHOUT_CLASSIFICATION	// we filled up current byte; append it and create next one
WITHOUT_CLASSIFICATION	//if the index is not a multiple of 8, we are not on a byte boundary
WITHOUT_CLASSIFICATION	//this test may be too lax but it is the same as in MRI
WITHOUT_CLASSIFICATION	// we don't deal with negatives.
WITHOUT_CLASSIFICATION	// populate commandline with NG-provided stuff
WITHOUT_CLASSIFICATION	// are we recursing?
WITHOUT_CLASSIFICATION	// snip off ruby or jruby command from list of arguments // leave alone if the command is the name of a script
WITHOUT_CLASSIFICATION	// default PidGetter
WITHOUT_CLASSIFICATION	// ignore and try windows version
WITHOUT_CLASSIFICATION	// ignore and use hashcode
WITHOUT_CLASSIFICATION	// ignore and use hashcode
WITHOUT_CLASSIFICATION	// ignore and use hashcode
WITHOUT_CLASSIFICATION	// ignore and use hashcode
WITHOUT_CLASSIFICATION	// try both
WITHOUT_CLASSIFICATION	// just unix
WITHOUT_CLASSIFICATION	// just windows
WITHOUT_CLASSIFICATION	// neither
WITHOUT_CLASSIFICATION	// CON: popen is a case where I think we should just always shell out.
WITHOUT_CLASSIFICATION	// single string command, pass to sh to expand wildcards
WITHOUT_CLASSIFICATION	// direct invocation of the command
WITHOUT_CLASSIFICATION	// break out if we've dug as deep as we can
WITHOUT_CLASSIFICATION	// break out if we've dug as deep as we can
WITHOUT_CLASSIFICATION	// close process output // See JRUBY-3405; hooking up to parent process stdin caused // problems for IRB etc using stdin.
WITHOUT_CLASSIFICATION	// ignore, we're on the way out
WITHOUT_CLASSIFICATION	// processes seem to have some peculiar locking sequences, so we // need to ensure nobody is trying to close/destroy while we are
WITHOUT_CLASSIFICATION	// popen callers wants to be able to read, provide subprocess in directly
WITHOUT_CLASSIFICATION	// popen callers wants to be able to read, provide subprocess in directly
WITHOUT_CLASSIFICATION	// popen caller wants to be able to write, provide subprocess out directly
WITHOUT_CLASSIFICATION	// no read requested, hook up read to parents output
WITHOUT_CLASSIFICATION	// no read requested, hook up read to parents output
WITHOUT_CLASSIFICATION	// execute command with sh -c // this does shell expansion of wildcards
WITHOUT_CLASSIFICATION	// We need to close the out, since some // processes would just wait for the stream // to be closed before they process its content, // and produce the output. E.g.: "cat".
WITHOUT_CLASSIFICATION	// we only close out if it's the slave stream, to avoid // closing a directly-mapped stream from parent process
WITHOUT_CLASSIFICATION	// The assumption here is that the 'in' stream provides // proper available() support. If available() always // returns 0, we'll hang!
WITHOUT_CLASSIFICATION	// Force t3 to quit, just in case if it's stuck. // Note: On some platforms, even interrupt might not // have an effect if the thread is IO blocked.
WITHOUT_CLASSIFICATION	// Check for special shell characters [<>|] at the beginning // and end of each command word and don't run in process if we find them.
WITHOUT_CLASSIFICATION	// Note: this method produces meaningful results // only for RubyIO objects. For everything else returns 0.
WITHOUT_CLASSIFICATION	//sequential
WITHOUT_CLASSIFICATION	// reverse the entire area of the array selected if it's reversed.
WITHOUT_CLASSIFICATION	// do median of 7 if the array is over 200 elements.
WITHOUT_CLASSIFICATION	// if it's less than 200 do median of 3
WITHOUT_CLASSIFICATION	// SignalFacade
WITHOUT_CLASSIFICATION	// this is the order in which MRI does these two tests
WITHOUT_CLASSIFICATION	// this is the order in which MRI does these tests
WITHOUT_CLASSIFICATION	// basically just forcing a TypeError here to match MRI
WITHOUT_CLASSIFICATION	// not saving DFS instance, as it will only be used once (at most) per call
WITHOUT_CLASSIFICATION	// Args
WITHOUT_CLASSIFICATION	// static methods only
WITHOUT_CLASSIFICATION	//System.err.println(" calculateLength()/str=" + str);
WITHOUT_CLASSIFICATION	// MRI 1.8.6 behavior: null byte after '%' // leads to "%" string. Null byte in // other places, like "%5\0", leads to error.
WITHOUT_CLASSIFICATION	// last index (+1) accessed by next() // last index (+1) accessed by get()
WITHOUT_CLASSIFICATION	// Special form of sprintf that returns a RubyString and handles // tainted strings correctly.
WITHOUT_CLASSIFICATION	// Special form of sprintf that returns a RubyString and handles // tainted strings correctly. Version for 1.9.
WITHOUT_CLASSIFICATION	// MRI doesn't flag it as an error if width is given multiple // times as a number (but it does for *)
WITHOUT_CLASSIFICATION	// let the width (if any), get processed in the next loop, // so any leading 0 gets treated correctly 
WITHOUT_CLASSIFICATION	// MRI 1.8.5-p12 doesn't support 1-char strings, but // YARV 0.4.1 does. I don't think it hurts to include // this; sprintf('%c','a') is nicer than sprintf('%c','a'[0])
WITHOUT_CLASSIFICATION	// 'd' and 'i' are the same
WITHOUT_CLASSIFICATION	// 'u' with space or plus flags is same as 'd'
WITHOUT_CLASSIFICATION	// We depart here from strict adherence to MRI code, as MRI // uses C-sprintf, in part, to format numeric output, while // we'll use Java's numeric formatting code (and our own).
WITHOUT_CLASSIFICATION	// skip '-' in bytes, will add where appropriate
WITHOUT_CLASSIFICATION	// ..
WITHOUT_CLASSIFICATION	// the 1 is for the stripped sign char
WITHOUT_CLASSIFICATION	// FIXME: what is correct 'recv' argument? // (this does produce the desired behavior)
WITHOUT_CLASSIFICATION	// gotta have at least a zero...
WITHOUT_CLASSIFICATION	// OK, we now have the significand in digits[0...nDigits] // and the exponent in exponent.  We're ready to format.
WITHOUT_CLASSIFICATION	// intDigits isn't used here, but if it were, it would be 1
WITHOUT_CLASSIFICATION	/* intDigits = 1; */
WITHOUT_CLASSIFICATION	//System.err.println(" stringToLong/reading c=" + data[s]);
WITHOUT_CLASSIFICATION	//System.err.println(" stringToLong/converted c=" + c);
WITHOUT_CLASSIFICATION	// intDigits isn't used here, but if it were, it would be 1
WITHOUT_CLASSIFICATION	/* intDigits = 1; */
WITHOUT_CLASSIFICATION	// precision for G/g includes integer digits
WITHOUT_CLASSIFICATION	// deal with length/width
WITHOUT_CLASSIFICATION	// deal with length/width
WITHOUT_CLASSIFICATION	// first digit is always printed
WITHOUT_CLASSIFICATION	// MRI behavior: Be default, 2 digits // in the exponent. Use 3 digits // only when necessary. // See comment for writeExp method for more details.
WITHOUT_CLASSIFICATION	// 5 -> e+nnn / e-nnn
WITHOUT_CLASSIFICATION	// 4 -> e+nn / e-nn
WITHOUT_CLASSIFICATION	// in this mode, '.' is always printed
WITHOUT_CLASSIFICATION	// MRI behavior: In this mode // trailing zeroes are removed: // 1.500E+05 -> 1.5E+05 
WITHOUT_CLASSIFICATION	// '.' is printed
WITHOUT_CLASSIFICATION	// all precision numebers printed
WITHOUT_CLASSIFICATION	// now some data...
WITHOUT_CLASSIFICATION	// '.'
WITHOUT_CLASSIFICATION	// decimal form, like (but not *just* like!) 'f'
WITHOUT_CLASSIFICATION	// digits array shifted, update all
WITHOUT_CLASSIFICATION	// will have a trailing '.' // g fills trailing zeroes if #
WITHOUT_CLASSIFICATION	// s/b true, since intLength > 0
WITHOUT_CLASSIFICATION	// s/b true, since intLength > 0
WITHOUT_CLASSIFICATION	// always need at least a 0
WITHOUT_CLASSIFICATION	// always need at least a 0
WITHOUT_CLASSIFICATION	// digits arr shifted, update all
WITHOUT_CLASSIFICATION	// (1|intlen).prec
WITHOUT_CLASSIFICATION	// (1|intlen)
WITHOUT_CLASSIFICATION	// will have a trailing '.'
WITHOUT_CLASSIFICATION	// fill up the rest with zeroes
WITHOUT_CLASSIFICATION	//System.err.println(" main/len=" + len);
WITHOUT_CLASSIFICATION	// 5 -> e+nnn / e-nnn
WITHOUT_CLASSIFICATION	// 4 -> e+nn / e-nn
WITHOUT_CLASSIFICATION	// now some data...
WITHOUT_CLASSIFICATION	// '.'
WITHOUT_CLASSIFICATION	// equivalent to MRI case '\0':
WITHOUT_CLASSIFICATION	// '.' and all precision digits printed
WITHOUT_CLASSIFICATION	// \v
WITHOUT_CLASSIFICATION	// dangling '%' char
WITHOUT_CLASSIFICATION	// main while loop (offset < length)
WITHOUT_CLASSIFICATION	// debugging code, keeping for now
WITHOUT_CLASSIFICATION	// MRI rounds up on nnn5nnn, but not nnn5 -- // except for when they do
WITHOUT_CLASSIFICATION	// "%.0f" % 0.99
WITHOUT_CLASSIFICATION	// limit the length of negatives if possible (also faster)
WITHOUT_CLASSIFICATION	// negative values
WITHOUT_CLASSIFICATION	// calculation for negatives when %u specified // for values >= Integer.MIN_VALUE * 2, MRI uses (the equivalent of) //   long neg_u = (((long)Integer.MAX_VALUE + 1) << 1) + val // for smaller values, BigInteger math is required to conform to MRI's // result.
WITHOUT_CLASSIFICATION	// relatively cheap test for 32-bit values
WITHOUT_CLASSIFICATION	// no such luck...
WITHOUT_CLASSIFICATION	// ok, now it gets expensive...
WITHOUT_CLASSIFICATION	// go through negated powers of 32 until we find one small enough 
WITHOUT_CLASSIFICATION	// add to the corresponding positive power of 32 for the result. // meaningful? no. conformant? yes. I just write the code...
WITHOUT_CLASSIFICATION	/* constant vector a */
WITHOUT_CLASSIFICATION	/* most significant w-r bits */
WITHOUT_CLASSIFICATION	/* least significant r bits */
WITHOUT_CLASSIFICATION	// state[j] &= 0xffffffffL;
WITHOUT_CLASSIFICATION	// state[i] &= 0xffffffffL;
WITHOUT_CLASSIFICATION	// state[i] &= 0xffffffffL;
WITHOUT_CLASSIFICATION	/* MSB is 1; assuring non-zero initial array */
WITHOUT_CLASSIFICATION	/* Tempering */
WITHOUT_CLASSIFICATION	// MRI behavior: Week values are monotonous. // So, weeks that effectively belong to previous year, // will get the value of 0, not 52 or 53, as in Java.
WITHOUT_CLASSIFICATION	//System.err.println("byteListToInum(" + str + ")");
WITHOUT_CLASSIFICATION	//System.err.println("byteListToInum(" + str + ")");
WITHOUT_CLASSIFICATION	// \v
WITHOUT_CLASSIFICATION	//System.err.println("getSign()");
WITHOUT_CLASSIFICATION	//System.err.println(" getSign/" + sign);
WITHOUT_CLASSIFICATION	//System.err.println("figureOutBase()/base=" + base);
WITHOUT_CLASSIFICATION	//System.err.println(" figureOutBase/base=" + base);
WITHOUT_CLASSIFICATION	//System.err.println("calculateLength()/str=" + str);
WITHOUT_CLASSIFICATION	//switch
WITHOUT_CLASSIFICATION	//System.err.println(" stringToLong=" + val);
WITHOUT_CLASSIFICATION	// no number
WITHOUT_CLASSIFICATION	// trailing garbage
WITHOUT_CLASSIFICATION	//System.err.println("ADDING CHAR: " + (char)cx + " with number: " + cx);
WITHOUT_CLASSIFICATION	// it was not found at all!
WITHOUT_CLASSIFICATION	// can be overridden to be informed when objects are removed
WITHOUT_CLASSIFICATION	// we reached the end of a list
WITHOUT_CLASSIFICATION	// goto next bucket
WITHOUT_CLASSIFICATION	// we reached the end
WITHOUT_CLASSIFICATION	// entry is the first element of this bucket
WITHOUT_CLASSIFICATION	// states
WITHOUT_CLASSIFICATION	// remove leading whitespace (includes _ for lax) // get sign, if any
WITHOUT_CLASSIFICATION	// optimistic pass - calculate value as digits are processed // digits - lax rules // decimal digits - lax rules // exponent sign/digits - lax rules // digits - strict rules // decimal digits - strict rules // exponent sign/digits - strict rules // complete calculation if possible
WITHOUT_CLASSIFICATION	// fields used for direct (optimistic) calculation // number of significant digits, updated as parsed // zeroes that may go to significand or exponent // offset of decimal pt from start (-1 -> no decimal) // significand, updated as parsed // exponent, updated as parsed
WITHOUT_CLASSIFICATION	// drop through for sign
WITHOUT_CLASSIFICATION	// switch // will use this if we have to go back the slow way
WITHOUT_CLASSIFICATION	// drop through for non-strict digits
WITHOUT_CLASSIFICATION	// first char must be digit or decimal point
WITHOUT_CLASSIFICATION	// ignore leading zeroes // switch
WITHOUT_CLASSIFICATION	// no digits, go calc (will return +/- 0.0 for lax)
WITHOUT_CLASSIFICATION	// ignore leading zeroes
WITHOUT_CLASSIFICATION	// just save a count of zeroes for now; if no digit // ends up following them, they'll be applied to the // exponent rather than the significand (and our max // length for optimistic calc).
WITHOUT_CLASSIFICATION	// ok, got a non-zero, have to own up to our horded zeroes
WITHOUT_CLASSIFICATION	// else catch oversize below
WITHOUT_CLASSIFICATION	// else catch oversize below
WITHOUT_CLASSIFICATION	// oh, well, it was worth a try. go let // Double/FloatingDecimal handle it 
WITHOUT_CLASSIFICATION	// ignore // switch
WITHOUT_CLASSIFICATION	// ignore // switch
WITHOUT_CLASSIFICATION	// end of parseable data, go to calc
WITHOUT_CLASSIFICATION	// end of parseable data, go to calc
WITHOUT_CLASSIFICATION	// switch // for
WITHOUT_CLASSIFICATION	// first non_underscore char must be digit
WITHOUT_CLASSIFICATION	// no dec digits, end of parseable data, go to calc
WITHOUT_CLASSIFICATION	// switch // if
WITHOUT_CLASSIFICATION	// difficult case, send to Double/FloatingDecimal
WITHOUT_CLASSIFICATION	// block
WITHOUT_CLASSIFICATION	// block
WITHOUT_CLASSIFICATION	// first char must be digit or decimal point
WITHOUT_CLASSIFICATION	// first char must be digit or decimal point
WITHOUT_CLASSIFICATION	// first char must be digit or decimal point
WITHOUT_CLASSIFICATION	// ignore leading zeroes // switch
WITHOUT_CLASSIFICATION	// else catch oversize below
WITHOUT_CLASSIFICATION	// else catch oversize below
WITHOUT_CLASSIFICATION	// else catch oversize below
WITHOUT_CLASSIFICATION	// switch // for
WITHOUT_CLASSIFICATION	// switch // for
WITHOUT_CLASSIFICATION	// switch // for
WITHOUT_CLASSIFICATION	// switch // if
WITHOUT_CLASSIFICATION	// switch // if
WITHOUT_CLASSIFICATION	// lax (str.to_f) allows underscores between e/E and sign
WITHOUT_CLASSIFICATION	// switch // for // no exponent, so drop through for calculation
WITHOUT_CLASSIFICATION	// switch // for // no more data, OK for strict to go calc
WITHOUT_CLASSIFICATION	// TODO: it's not clear to me why, in FloatingDecimal, the // "slop" calculation performed above for positive exponents // isn't used for negative exponents as well. Will find out...
WITHOUT_CLASSIFICATION	// no digits, error
WITHOUT_CLASSIFICATION	// too big for us
WITHOUT_CLASSIFICATION	// too big for us
WITHOUT_CLASSIFICATION	// must be at least one digit for strict
WITHOUT_CLASSIFICATION	//switch
WITHOUT_CLASSIFICATION	//switch
WITHOUT_CLASSIFICATION	//switch
WITHOUT_CLASSIFICATION	//switch
WITHOUT_CLASSIFICATION	//switch
WITHOUT_CLASSIFICATION	// only whitespace allowed after value for strict
WITHOUT_CLASSIFICATION	// only whitespace allowed after value for strict
WITHOUT_CLASSIFICATION	// only whitespace allowed after value for strict
WITHOUT_CLASSIFICATION	// first char must be digit
WITHOUT_CLASSIFICATION	// no dec digits after '.', error for strict
WITHOUT_CLASSIFICATION	// ignore leading zeroes // switch
WITHOUT_CLASSIFICATION	// switch // for
WITHOUT_CLASSIFICATION	// switch // for
WITHOUT_CLASSIFICATION	//switch
WITHOUT_CLASSIFICATION	//switch
WITHOUT_CLASSIFICATION	// only whitespace allowed after value for strict
WITHOUT_CLASSIFICATION	// must be at least one digit for strict
WITHOUT_CLASSIFICATION	// // Copy out any buffered bytes //
WITHOUT_CLASSIFICATION	// switch //while
WITHOUT_CLASSIFICATION	/*     * All the positive powers of 10 that can be     * represented exactly in double/float.     * (From sun.misc.FloatingDecimal.java)     */
WITHOUT_CLASSIFICATION	// Zlib behavior: negative win_bits means no header and no checksum.
WITHOUT_CLASSIFICATION	// rb_enc_mbclen
WITHOUT_CLASSIFICATION	// rb_enc_precise_mbclen
WITHOUT_CLASSIFICATION	/*utf8 lead byte*/
WITHOUT_CLASSIFICATION	// arg cannot be negative
WITHOUT_CLASSIFICATION	// NoFunctionalitySignalFacade
WITHOUT_CLASSIFICATION	// Change visibility so others can see it
WITHOUT_CLASSIFICATION	// could not get canonical path, just use given path
WITHOUT_CLASSIFICATION	// strip off "_dot_rb" for .rb files
WITHOUT_CLASSIFICATION	// Makes sure the key is not already in the hashtable.
WITHOUT_CLASSIFICATION	// Rehash the table if the threshold is exceeded
WITHOUT_CLASSIFICATION	// Creates the new entry.
WITHOUT_CLASSIFICATION	// next entry to return // current slot // current entry
WITHOUT_CLASSIFICATION	// advance to first entry
WITHOUT_CLASSIFICATION	// The reason why we need the stream is to be able to invoke available() on it. // STDIN in Java is non-interruptible, non-selectable, and attempt to read // on such stream might lead to thread being blocked without *any* way to unblock it. // That's where available() comes it, so at least we could check whether // anything is available to be read without blocking.
WITHOUT_CLASSIFICATION	/*package-protected*/
WITHOUT_CLASSIFICATION	// raw file URL, just open directly
WITHOUT_CLASSIFICATION	// We always open this rw since we can only open it r or rw.
WITHOUT_CLASSIFICATION	// if refcount is at or below zero, we're no longer valid
WITHOUT_CLASSIFICATION	// if channel is already closed, we're no longer valid
WITHOUT_CLASSIFICATION	// otherwise decrement and possibly close as normal
WITHOUT_CLASSIFICATION	// r/w buffer // are we reading or writing?
WITHOUT_CLASSIFICATION	// this constructor is used by fdopen, so we don't increment descriptor ref count
WITHOUT_CLASSIFICATION	// unread back
WITHOUT_CLASSIFICATION	// iterate over remainder of buffer until we find a match
WITHOUT_CLASSIFICATION	// terminate and advance buffer when we find our char
WITHOUT_CLASSIFICATION	// no match, append remainder of buffer and continue with next block
WITHOUT_CLASSIFICATION	// found a match above, check if remaining separator characters match, appending as we go
WITHOUT_CLASSIFICATION	// // Check file size - special files in /proc have zero size and need to be // handled by the generic read path. //
WITHOUT_CLASSIFICATION	// // Copy any buffered data (including ungetc byte) //
WITHOUT_CLASSIFICATION	// // Now read unbuffered directly from the file //
WITHOUT_CLASSIFICATION	// // Copy out any buffered bytes //
WITHOUT_CLASSIFICATION	// // Need to clamp source (buffer) size to avoid overrun //
WITHOUT_CLASSIFICATION	// not closing from finalize
WITHOUT_CLASSIFICATION	// clear runtime so it doesn't get stuck in memory (JRUBY-2933)
WITHOUT_CLASSIFICATION	// silence
WITHOUT_CLASSIFICATION	// silence
WITHOUT_CLASSIFICATION	// Don't bother
WITHOUT_CLASSIFICATION	// Don't bother
WITHOUT_CLASSIFICATION	// For Sockets, only write as much as will fit.
WITHOUT_CLASSIFICATION	// Correct position for read / write buffering (we could invalidate, but expensive)
WITHOUT_CLASSIFICATION	// Adjust for buffered data
WITHOUT_CLASSIFICATION	// for SEEK_CUR, need to adjust for buffered data
WITHOUT_CLASSIFICATION	// libc flushes writes on any read from the actual file, so we flush here
WITHOUT_CLASSIFICATION	// we have read ahead, and need to back up
WITHOUT_CLASSIFICATION	// 128K seems to be the minimum at which the stat+seek is faster than reallocation
WITHOUT_CLASSIFICATION	// // limit each iteration to a max of BULK_READ_SIZE to avoid over-size allocations //
WITHOUT_CLASSIFICATION	// append what we read into our buffer and allow the loop to continue
WITHOUT_CLASSIFICATION	// // Copy what is in the buffer, if there is some buffered data //
WITHOUT_CLASSIFICATION	// // Avoid double-copying for reads that are larger than the buffer size //
WITHOUT_CLASSIFICATION	// // Complete the request by filling the read buffer first //
WITHOUT_CLASSIFICATION	// // Complete the request by filling the read buffer first //
WITHOUT_CLASSIFICATION	// // Avoid double-copying for reads that are larger than the buffer size, or // the destination is a direct buffer. //
WITHOUT_CLASSIFICATION	// // We limit reads to BULK_READ_SIZED chunks to avoid NIO allocating // a huge temporary native buffer, when doing reads into a heap buffer // If the dst buffer is direct, then no need to limit. //
WITHOUT_CLASSIFICATION	// Ruby ignores empty syswrites
WITHOUT_CLASSIFICATION	// Ruby ignores empty syswrites
WITHOUT_CLASSIFICATION	// Doesn't fit in buffer. Write immediately. // ensure nothing left to write
WITHOUT_CLASSIFICATION	// truncate can't lengthen files, so we save position, seek/write, and go back
WITHOUT_CLASSIFICATION	// how far ahead we are when reading
WITHOUT_CLASSIFICATION	// if the read buffer is ahead, back up
WITHOUT_CLASSIFICATION	// close without removing from finalizers
WITHOUT_CLASSIFICATION	// putting a bit back, so we're not at EOF anymore
WITHOUT_CLASSIFICATION	// save the ungot
WITHOUT_CLASSIFICATION	// otherwise, we try an unbuffered read to get whatever's available
WITHOUT_CLASSIFICATION	// ignore this; select() will set the correct mode when it is finished
WITHOUT_CLASSIFICATION	// flush first
WITHOUT_CLASSIFICATION	// // Wake up any channels that became unblocked //
WITHOUT_CLASSIFICATION	// // Register any new blocking I/O requests //
WITHOUT_CLASSIFICATION	// Now clear out any previously selected channels
WITHOUT_CLASSIFICATION	// // Wait for I/O on any channel //
WITHOUT_CLASSIFICATION	// Do not open as 'rw' by default since a file with read-only permissions will fail on 'rw'
WITHOUT_CLASSIFICATION	// Java requires "w" for creating a file that does not exist
WITHOUT_CLASSIFICATION	// seek to force underlying buffer to flush
WITHOUT_CLASSIFICATION	// seek to force read buffer to invalidate
WITHOUT_CLASSIFICATION	/*        result = eval("arr = Array::['c', 200]; p arr");        assertEquals("[\"c\", 200]", result);        result = eval("arr = Array.['d', 200]; p arr");        assertEquals("[\"d\", 200]", result);        */
WITHOUT_CLASSIFICATION	// MRI ignores seek errors, presumably for unseekable files like // serial ports (JRUBY-2979), so we shall too.
WITHOUT_CLASSIFICATION	// TODO: Ruby logic is somewhat more complicated here, see comments after
WITHOUT_CLASSIFICATION	// make sure the pipe stream is set to null
WITHOUT_CLASSIFICATION	// make sure the main stream is set to null
WITHOUT_CLASSIFICATION	// first try our custom-generated Unsafe
WITHOUT_CLASSIFICATION	// then try Sun's Unsafe
WITHOUT_CLASSIFICATION	// if we get here, the class and field exist; construct our Unsafe impl // that calls it directly
WITHOUT_CLASSIFICATION	// else leave it null
WITHOUT_CLASSIFICATION	// TypeMatcher
WITHOUT_CLASSIFICATION	// This is now needed, since module Java // isn't in by default
WITHOUT_CLASSIFICATION	// Iterate over the RubyHash keySet, simultaneously iterating over the values()
WITHOUT_CLASSIFICATION	// Get the value from the map via the key
WITHOUT_CLASSIFICATION	// Get the value from the map via the values iterator
WITHOUT_CLASSIFICATION	// Check the 2 values obtained via different means
WITHOUT_CLASSIFICATION	// Set a value in the RubyHash
WITHOUT_CLASSIFICATION	// Set a value in the RubyHash
WITHOUT_CLASSIFICATION	// Check the entry.setValue values come back out ok
WITHOUT_CLASSIFICATION	// If we're running from within an IDE we may not have // the .rb files in our classpath. Try to find them // in the filesystem instead.
WITHOUT_CLASSIFICATION	//assertEquals("\"foo\"\n\"bar\"", eval("$h.each {|val| p val}")); //assertEquals("[\"foo\", \"bar\"]", eval("p $h.each {|val| }"));
WITHOUT_CLASSIFICATION	// Init
WITHOUT_CLASSIFICATION	// Block
WITHOUT_CLASSIFICATION	// Copy constructor
WITHOUT_CLASSIFICATION	// presumably this require should fail
WITHOUT_CLASSIFICATION	// JRUBY-646 // presumably this require should fail
WITHOUT_CLASSIFICATION	// Test that requiring a normal Java class raises an error (JRUBY-3214
WITHOUT_CLASSIFICATION	// ok
WITHOUT_CLASSIFICATION	// Function not used...but it gets rid of unused warnings in Eclipse (we do call those methods // from Ruby so they are not really unused).
WITHOUT_CLASSIFICATION	//load should work several times in a row
WITHOUT_CLASSIFICATION	//reset the $loadTestvar
WITHOUT_CLASSIFICATION	//call throwException via JRuby
WITHOUT_CLASSIFICATION	// Notify the calling thread that we're about to go to sleep the first time
WITHOUT_CLASSIFICATION	// wait for the go signal
WITHOUT_CLASSIFICATION	// run ten separate calls into Ruby, with delay and explicit GC
WITHOUT_CLASSIFICATION	// wait until thread has initialized
WITHOUT_CLASSIFICATION	// notify thread to proceed
WITHOUT_CLASSIFICATION	// wait until thread has completed
WITHOUT_CLASSIFICATION	// we do preand post load outside the "body" versions to pre-prepare // and pre-push the dynamic scope we need for lastline
WITHOUT_CLASSIFICATION	// out of byte range // there will be no match for sure
WITHOUT_CLASSIFICATION	// MRI behavior: raise ArgumentError for 'unknown command' before // checking number of args.
WITHOUT_CLASSIFICATION	// if any exceptions were raised, we fail
WITHOUT_CLASSIFICATION	// there should only be one more thread in thread group than before we started
WITHOUT_CLASSIFICATION	// construct a new cache with thread's classloader and no limit
WITHOUT_CLASSIFICATION	//        Class<?> script1 = ((DefaultMethod) runtime1.getObject().getMethods().get("foo")).getJITCompilerScript().getClass(); //        Class<?> script2 = ((DefaultMethod) runtime2.getObject().getMethods().get("foo")).getJITCompilerScript().getClass();
WITHOUT_CLASSIFICATION	//        assertSame(script1, script2);
WITHOUT_CLASSIFICATION	// void methods should work
WITHOUT_CLASSIFICATION	// methods with required = 4 or higher should bind and be callable using reflection // JRUBY-3649
WITHOUT_CLASSIFICATION	// Since we don't have any other error reporting mechanism, we // add the error message as an always-failing test to the test suite.
WITHOUT_CLASSIFICATION	// Ensure we have a new interpreter for each test. Previous we were using the //  same interpreter which caused problems as soon as one test failed.
WITHOUT_CLASSIFICATION	// Without a flush Ant will miss some of our output
WITHOUT_CLASSIFICATION	// assertTrue(rubyObject.kind_of(ruby.getClasses().getStringClass()).isFalse());
WITHOUT_CLASSIFICATION	//        int n = 10;
WITHOUT_CLASSIFICATION	// there might be more test classes in a single file, so we iterate over them
WITHOUT_CLASSIFICATION	//No ClassCastException!
WITHOUT_CLASSIFICATION	// value equality
WITHOUT_CLASSIFICATION	// identity equality
WITHOUT_CLASSIFICATION	// bench straight-up integer fib(30)
WITHOUT_CLASSIFICATION	// bench Integer fib
WITHOUT_CLASSIFICATION	// bench fully-boxed fib
WITHOUT_CLASSIFICATION	// bench fully-boxed fib
WITHOUT_CLASSIFICATION	// bench fixnum-boxed fib
WITHOUT_CLASSIFICATION	// bench straight-up long fib(30)
WITHOUT_CLASSIFICATION	// bench Long fib
WITHOUT_CLASSIFICATION	// skip this one, probably no 'ls' (windows)
WITHOUT_CLASSIFICATION	// start off with a neutral parent
WITHOUT_CLASSIFICATION	/*            public class Hello {                public static String getMessage() {                    return ".....";                }            }            */
WITHOUT_CLASSIFICATION	// in method body with no containing loop, issue jump error // load runtime and value, issue jump error
WITHOUT_CLASSIFICATION	// Note: We can't use file.exists() to check whether the symlink // exists or not, because that method returns false for existing // but broken symlink. So, we try without the existence check, // but in the try-catch block. // MRI behavior: symlink? on broken symlink should return true.
WITHOUT_CLASSIFICATION	// We are creating a new IO object that shares the same // IOHandler (and fileno).
WITHOUT_CLASSIFICATION	// a while node could receive non-local flow control from any of these: // * a closure within the loop // * an eval within the loop // * a block-arg-based proc called within the loop
WITHOUT_CLASSIFICATION	//[IRubyObject] //[IRubyObject, IRubyObject] //[IRubyObject, RubyClass] //[IRubyObject, RubyClass, RubyClass] //[IRubyObject, RubyClass, Visibility] //[IRubyObject, RubyClass, Visibility, Visibility]
WITHOUT_CLASSIFICATION	// select appropriate call site // dup receiver // load self
WITHOUT_CLASSIFICATION	// Translate "x || y" --> "x = (is_true(x) ? x : y)" --> //  //    x = -- build(x) should return a variable! -- //    f = is_true(x) //    beq(f, true, L) //    x = -- build(y) -- // L: //
WITHOUT_CLASSIFICATION	// // Force the client socket to be blocking //
WITHOUT_CLASSIFICATION	// Additional context surrounding tokens that both the lexer and // grammar use.
WITHOUT_CLASSIFICATION	// Enebo:  c can never be antrhign but '.' // Why did I put this here?
WITHOUT_CLASSIFICATION	// save package module as ivar in parent, and add method to parent so // we don't have to come back here.
WITHOUT_CLASSIFICATION	//[C,C] //[C, boolean]
WITHOUT_CLASSIFICATION	// Label for the start of the closure (used to implement redo) // Label for the end of the closure (used to implement retry)
WITHOUT_CLASSIFICATION	// ignore; job was cancelled // FIXME: is this ok?
WITHOUT_CLASSIFICATION	//                    // check arity //                    checkArity(mv, scope);
WITHOUT_CLASSIFICATION	// rethrow exception // rethrow it
WITHOUT_CLASSIFICATION	// we take the first method found as our "n" method, since for any non-specific // arity they'll all error the same. If an actual "n" method is created, we // use that.
WITHOUT_CLASSIFICATION	// Used by our duck-typification of Proc into interface types, to allow // coercing a simple proc into an interface parameter.
WITHOUT_CLASSIFICATION	// proxy is under construction, building thread can // safely read non-volatile value
WITHOUT_CLASSIFICATION	// it's either as converted as we can make it via above logic or it's // not one of the types we convert, so just pass it out as-is without wrapping
WITHOUT_CLASSIFICATION	// package scheme 2: separate module for each full package name, constructed  // from the camel-cased package segments: Java::JavaLang::Object, 
WITHOUT_CLASSIFICATION	// // construct the proxy method //
WITHOUT_CLASSIFICATION	// line 159 "-" // %token constants
WITHOUT_CLASSIFICATION	// +++ // Helper Methods
WITHOUT_CLASSIFICATION	// line 152 "-" // %token constants
WITHOUT_CLASSIFICATION	// initial size // state stack // value stack // current input // #tokens to shift
WITHOUT_CLASSIFICATION	// +++ // Helper Methods
WITHOUT_CLASSIFICATION	// We only need to pass in current scope if we are evaluating as a block (which // is only done for evals).  We need to pass this in so that we can appropriately scope // down to captured scopes when we are parsing.
WITHOUT_CLASSIFICATION	// let the width (if any), get processed in the next loop, // so any leading 0 gets treated correctly 
WITHOUT_CLASSIFICATION	// A place to store that special hiding space that bindings need to implement things like: // eval("a = 1", binding); eval("p a").  All binding instances must get access to this // hidden shared scope.  We store it here.  This will be null if no binding has yet // been called.
WITHOUT_CLASSIFICATION	// TODO: make it 16 now ? // MUST be power of 2!
WITHOUT_CLASSIFICATION	// check visibility // dup method
WITHOUT_CLASSIFICATION	// &foo are not getting set from somewhere...I want the following assert to be true though //assert variableValues[offset] != null : "Getting unassigned: " + staticScope.getVariables()[offset];
WITHOUT_CLASSIFICATION	// unsigned int, native // unsigned long, native
WITHOUT_CLASSIFICATION	//need padding //I'm fairly sure there is a library call to create a //string filled with a given char with a given length but I couldn't find it
WITHOUT_CLASSIFICATION	// MRI behavior: Be default, 2 digits // in the exponent. Use 3 digits // only when necessary. // See comment for writeExp method for more details.
WITHOUT_CLASSIFICATION	// MRI ignores seek errors, presumably for unseekable files like // serial ports (JRUBY-2979), so we shall too.
WITHOUT_CLASSIFICATION	// switch // for // no more data, OK for strict to go calc
WITHOUT_CLASSIFICATION	// A scoped location of this variable (high 16 bits is how many scopes down and low 16 bits // is what index in the right scope to set the value.
WITHOUT_CLASSIFICATION	// Estimate the square root with the foremost 62 bits of squarD // bi and scale are a tandem
WITHOUT_CLASSIFICATION	// captures // begin and end are used when not groups defined // source string
WITHOUT_CLASSIFICATION	// // INSTANCE VARIABLE RUBY METHODS //
WITHOUT_CLASSIFICATION	// switch // while
WITHOUT_CLASSIFICATION	// For nodes do not have their own scope so we pass null to indicate this. // 'For's are implemented as blocks in evaluation, but they have no scope so we // just deal with this lack of scope throughout its lifespan.  We should probably // change the way this works to get rid of multiple null checks.
WITHOUT_CLASSIFICATION	// This field is used during argument processing to avoid putting RubyArray // instances that are purely for utility purposes into ObjectSpace.
WITHOUT_CLASSIFICATION	// Parent container for this context (can be dynamic!!) // If dynamic, at runtime, this will be the meta-object corresponding to a class/script/module/method/closure // List of IR instructions for this method
WITHOUT_CLASSIFICATION	// Translate "ret = (a && b)" --> "ret = (a ? b : false)" --> //  //    v1 = -- build(a) -- //       OPT: ret can be set to v1, but effectively v1 is false if we take the branch to L. //            while this info can be inferred by using attributes, why bother if we can do this? //    ret = false    //    beq(v1, false, L) //    v2 = -- build(b) -- //    ret = v2 // L: //
WITHOUT_CLASSIFICATION	// expected
WITHOUT_CLASSIFICATION	// Do nothing
WITHOUT_CLASSIFICATION	// constructor
WITHOUT_CLASSIFICATION	// If a line is followed by a blank line put // it back.
WITHOUT_CLASSIFICATION	/* $>: default output handle */
WITHOUT_CLASSIFICATION	// line 423
WITHOUT_CLASSIFICATION	// line 486
WITHOUT_CLASSIFICATION	// Signal uses sun.misc.* classes, this is not allowed // in the security-sensitive environments
WITHOUT_CLASSIFICATION	// re-register, since fileno points at something new now
WITHOUT_CLASSIFICATION	// produce a nicer error since Rubyists aren't used to seeing this
WITHOUT_CLASSIFICATION	// produce a nicer error since Rubyists aren't used to seeing this
WITHOUT_CLASSIFICATION	// colon3, assign in Object
WITHOUT_CLASSIFICATION	// if there's no receiver, evaluate and pass in the superclass, or // pass self if it no superclass
WITHOUT_CLASSIFICATION	// Wire up Function#call(*args) to use the super-fast native invokers
WITHOUT_CLASSIFICATION	// TODO: varargs?
WITHOUT_CLASSIFICATION	// TODO: varargs?
WITHOUT_CLASSIFICATION	// TODO: varargs?
WITHOUT_CLASSIFICATION	// TODO: varargs?
WITHOUT_CLASSIFICATION	// Decrease value to hit upper range.  
WITHOUT_CLASSIFICATION	// assign to appropriate variable
WITHOUT_CLASSIFICATION	// "else" body
WITHOUT_CLASSIFICATION	// done // done // done // Nothing to do for 1.8 // done // done // done // done // done // done // done? // done // done // done // done // done // done // done // done // done // done // done //            case DEFINEDNODE: return buildDefined(node, m); // Incomplete // done // done // done // done // done // done // done // done //            case ENSURENODE: return buildEnsureNode(node, m); // DEFERRED // done // done // done // done //            case FLIPNODE: return buildFlip(node, m); // SSS FIXME: What code generates this AST? // done // done // done // done // done // done // done // done // done // done // done // done // done // done // done // done // done // done? // done // done // done // done // done // done -- partially //            case OPELEMENTASGNNODE: return buildOpElementAsgn(node, m); // DEFERRED SSS FIXME: What code generates this AST? // done //            case POSTEXENODE: return buildPostExe(node, m); // DEFERRED //            case PREEXENODE: return buildPreExe(node, m); // DEFERRED // done?? // done
WITHOUT_CLASSIFICATION	// read-volatile
WITHOUT_CLASSIFICATION	/* $+: string matches last paren. */
WITHOUT_CLASSIFICATION	/* should alter global state */
WITHOUT_CLASSIFICATION	/* should alter global state */
WITHOUT_CLASSIFICATION	// Ruby code frequently uses a platform check to choose "NUL:" on windows // but since that check doesn't work well on JRuby, we help it out
WITHOUT_CLASSIFICATION	/* 10! */
WITHOUT_CLASSIFICATION	//            case RESCUENODE: return buildRescue(node, m); // DEFERRED //            case RETRYNODE: return buildRetry(node, m); // DEFERRED // done
WITHOUT_CLASSIFICATION	// Is this instruction live or dead?  During optimization passes, if this instruction // causes no side-effects and the result of the instruction is not needed by anyone else, // we can remove this instruction altogether without affecting program correctness.
WITHOUT_CLASSIFICATION	// all these types are immediately considered "defined"
WITHOUT_CLASSIFICATION	// first, iterate over all required args
WITHOUT_CLASSIFICATION	// // Determine if the parameter might be passed as a 32bit int parameter. // This just applies to buffer/pointer types. //
WITHOUT_CLASSIFICATION	//Keyword keyword = Keyword.getKeyword(tempVal, tempVal.length());
WITHOUT_CLASSIFICATION	//yyLhs 496
WITHOUT_CLASSIFICATION	//yyLhs 496
WITHOUT_CLASSIFICATION	// initial size // state stack // value stack // current input // #tokens to shift
WITHOUT_CLASSIFICATION	// line 449
WITHOUT_CLASSIFICATION	// line 495
WITHOUT_CLASSIFICATION	// Management/monitoring
WITHOUT_CLASSIFICATION	// if we've found the last char of the separator, // and we've found at least as many characters as separator length, // and the last n characters of our buffer match the separator, we're done
WITHOUT_CLASSIFICATION	/* 14! */
WITHOUT_CLASSIFICATION	// Process any set of annotations // No supported options
WITHOUT_CLASSIFICATION	// add to the jitted methods set
WITHOUT_CLASSIFICATION	// extract item from array
WITHOUT_CLASSIFICATION	// extract item from array
WITHOUT_CLASSIFICATION	//            case SCLASSNODE: return buildSClass(node, m); // DEFERRED // done // done // done // done // done // done // done // done //            case UNDEFNODE: return buildUndef(node, m); // DEFERRED // done //            case VALIASNODE: return buildVAlias(node, m); // DEFERRED // done // done
WITHOUT_CLASSIFICATION	// // Adding a post-invoke for the cb result serves to both keep it alive // until after the function returns, and allows us to clean up the native // trampoline early, instead of letting them accumulate until a GC run //
WITHOUT_CLASSIFICATION	/* The Java method doesn't care what class it is, but we need to               know what to convert it to, so we use the object's own class.               If that doesn't help, we use String to force a call to the               object's "to_s" method. */
WITHOUT_CLASSIFICATION	// index for the item
WITHOUT_CLASSIFICATION	// Atomic integers for symbol and method IDs
WITHOUT_CLASSIFICATION	/* 18! */
WITHOUT_CLASSIFICATION	// If we have more than one arg, make sure the array created to contain them is not ObjectSpaced
WITHOUT_CLASSIFICATION	// set up a local IRuby variable
WITHOUT_CLASSIFICATION	// set up a local IRuby variable
WITHOUT_CLASSIFICATION	// set up a local IRuby variable
WITHOUT_CLASSIFICATION	// set up a local IRuby variable
WITHOUT_CLASSIFICATION	// NOTE: if 's' happens to the a class, this is effectively an assignment of a class instance variable
WITHOUT_CLASSIFICATION	/*      * This method takes as input a map of operands to their values, and outputs     * the result of this instruction.     *     * If the value map provides a value for any of the instruction's operands     * the expectation is that the operand will be replaced with the simplified value.     * It is not required that it do so -- code correctness is not compromised by failure     * to simplify.     *     * @param valueMap Mapping from operands to their simplified values     * @returns simplified result / output of this instruction     */
WITHOUT_CLASSIFICATION	// Can't support the rest with Java
WITHOUT_CLASSIFICATION	// An atomic long for generating DynamicMethod serial numbers
WITHOUT_CLASSIFICATION	// MRI behavior: always check whether the file is writable // or not, even if we are to write 0 bytes.
WITHOUT_CLASSIFICATION	/* 22! */
WITHOUT_CLASSIFICATION	// attribute set.
WITHOUT_CLASSIFICATION	// grab nil for local variables
WITHOUT_CLASSIFICATION	// grab nil for local variables
WITHOUT_CLASSIFICATION	// grab nil for local variables
WITHOUT_CLASSIFICATION	// fill in all vars with nil so compiler is happy about future accesses
WITHOUT_CLASSIFICATION	// Build a new class and add it to the current scope (could be a script / module / class)
WITHOUT_CLASSIFICATION	// ---------- These methods below are used during compile-time optimizations ------- 
WITHOUT_CLASSIFICATION	// ---------- These methods below are used during compile-time optimizations ------- 
WITHOUT_CLASSIFICATION	// AF_INET
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////////////////// // Now we provide default impls of a number of signatures. For each arity, // we first generate a non-block version of the method, which just adds // NULL_BLOCK and re-calls, allowing e.g. compiled code, which always can // potentially take a block, to only generate the block-receiving signature // and still avoid arg boxing. // // We then provide default implementations of each block-accepting method // that in turn call the IRubyObject[]+Block version of call. This then // finally falls back on the minimum implementation requirement for // dynamic method handles. ////////////////////////////////////////////////////////////////////////////
WITHOUT_CLASSIFICATION	// Because we implement Java interfaces now, we need a new === that's // aware of those additional "virtual" supertypes
WITHOUT_CLASSIFICATION	// BASE64
WITHOUT_CLASSIFICATION	/* note nemes_gamma can return Double.POSITIVE_INFINITY or Double.NEGATIVE_INFINITY         * when value is an integer less than 1.         * We treat 0 as a special case to avoid Domain error.         */
WITHOUT_CLASSIFICATION	// element set
WITHOUT_CLASSIFICATION	// visit a label to start scoping for local vars in this method
WITHOUT_CLASSIFICATION	// visit a label to start scoping for local vars in this method
WITHOUT_CLASSIFICATION	// temp locals must start after last real local
WITHOUT_CLASSIFICATION	// SSS: Looks like we receive the arg in buildBlockArgsAssignment via the IterNode // We won't get here for argument receives!  So, buildDasgn is called for // assignments to block variables within a block.  As far as the IR is concerned, // this is just a simple copy
WITHOUT_CLASSIFICATION	// getSimplifiedOperand returns the value of this operand, fully simplified // getSimplifiedOperand returns the operand in a form that can be materialized into bytecode, if it cannot be completely optimized away // // The value is used during optimizations and propagated through the IR.  But, it is thrown away after that. // But, the operand form is used for constructing the compound objects represented by the operand. // // Example: a = [1], b = [3,4], c = [a,b], d = [2,c] //   -- getValue(c) = [1,[3,4]];     getSimplifiedOperand(c) = [1, b] //   -- getValue(d) = [2,[1,[3,4]]]; getSimplifiedOperand(d) = [2, c] // // Note that a,b,c,d are all objects, and c has a reference to objects a and b, and d has a reference to c. // So, if contents of a or b is modified, the "simplified value"s of c and d also change!  This difference // is captured by these two methods.
WITHOUT_CLASSIFICATION	//IRubyObject protocol = args[4];
WITHOUT_CLASSIFICATION	// promise to implement three to N with block
WITHOUT_CLASSIFICATION	// Ruby's OMG capture all source in a Hash feature // Add each line to buffer when encountering newline or EOF for first time.
WITHOUT_CLASSIFICATION	// carriage return
WITHOUT_CLASSIFICATION	//yyDgoto 136
WITHOUT_CLASSIFICATION	// discarding a token does not change stack
WITHOUT_CLASSIFICATION	// String construction routines by NOT byte[] buffer and making the target String shared 
WITHOUT_CLASSIFICATION	// insert all nodes in sequence, hash them in the final instruction // KEY
WITHOUT_CLASSIFICATION	// return last value from execution
WITHOUT_CLASSIFICATION	// we append an index to ensure two identical method names will not conflict
WITHOUT_CLASSIFICATION	// Basic Block id // CFG that this basic block belongs to // All basic blocks have a starting label // List of non-label instructions
WITHOUT_CLASSIFICATION	// otherwise one key has been selected (ours) so we get the channel and hand it off
WITHOUT_CLASSIFICATION	// For all uninitialized specific arities, we defer to the "n" method which // should raise appropriate error in all cases.
WITHOUT_CLASSIFICATION	// implement is called to force this class to create stubs for all // methods in the given interface, so they'll show up in the list // of methods and be invocable without passing through method_missing
WITHOUT_CLASSIFICATION	// CASE IR instructions are dummy instructions  // -- all when/then clauses have been converted into if-then-else blocks
WITHOUT_CLASSIFICATION	// check arity in the variable-arity version
WITHOUT_CLASSIFICATION	// leave it null and fall back on our normal invocation logic
WITHOUT_CLASSIFICATION	// Build closure body and return the result of the closure
WITHOUT_CLASSIFICATION	// for each simple method name, implement the complex methods, calling the simple version
WITHOUT_CLASSIFICATION	// Need to initialize
WITHOUT_CLASSIFICATION	// Need to initialize
WITHOUT_CLASSIFICATION	// Need to initialize
WITHOUT_CLASSIFICATION	// Need to initialize
WITHOUT_CLASSIFICATION	// Need to initialize
WITHOUT_CLASSIFICATION	// Need to initialize
WITHOUT_CLASSIFICATION	// Need to initialize
WITHOUT_CLASSIFICATION	// Need to initialize
WITHOUT_CLASSIFICATION	// Install direct java methods with mangled name so 'send' can call them directly.
WITHOUT_CLASSIFICATION	/* fall through */
WITHOUT_CLASSIFICATION	// deal with case when "other" is not a string
WITHOUT_CLASSIFICATION	// All errors to sysread should be SystemCallErrors, but on a closed stream // Ruby returns an IOError.  Java throws same exception for all errors so // we resort to this hack...
WITHOUT_CLASSIFICATION	// in method body with no containing loop, issue jump error // load runtime and value, issue jump error
WITHOUT_CLASSIFICATION	// in method body with no containing loop, issue jump error // load runtime and value, issue jump error
WITHOUT_CLASSIFICATION	// store argument count information into scope
WITHOUT_CLASSIFICATION	// the load method is used for loading as a top-level script, and prepares appropriate scoping around the code
WITHOUT_CLASSIFICATION	// First, build assignments for specific named arguments
WITHOUT_CLASSIFICATION	//        public Object invoke(Object receiver, Object arg0, Object arg1, Object arg2, Object arg3) { throw fail(); } //        public Object invoke(Object receiver, Object arg0, Object arg1, Object arg2, Object arg3, Object arg4) { throw fail(); }
WITHOUT_CLASSIFICATION	// get current context
WITHOUT_CLASSIFICATION	// octal constant
WITHOUT_CLASSIFICATION	// read
WITHOUT_CLASSIFICATION	// this really needs to be inlined here
WITHOUT_CLASSIFICATION	// it doesn't handle special cases
WITHOUT_CLASSIFICATION	// If reciever is self then we do the call the same way as vcall
WITHOUT_CLASSIFICATION	// If reciever is self then we do the call the same way as vcall
WITHOUT_CLASSIFICATION	// If reciever is self then we do the call the same way as vcall
WITHOUT_CLASSIFICATION	/*receiver*/
WITHOUT_CLASSIFICATION	/*receiver*/
WITHOUT_CLASSIFICATION	/*receiver*/
WITHOUT_CLASSIFICATION	/*receiver*/
WITHOUT_CLASSIFICATION	/*receiver*/
WITHOUT_CLASSIFICATION	/*receiver*/
WITHOUT_CLASSIFICATION	/*receiver*/
WITHOUT_CLASSIFICATION	/*receiver*/
WITHOUT_CLASSIFICATION	/*receiver*/
WITHOUT_CLASSIFICATION	// ignore; we won't use invokedynamic
WITHOUT_CLASSIFICATION	// at end
WITHOUT_CLASSIFICATION	/* bang: true, no match, no substitution */
WITHOUT_CLASSIFICATION	// save blocking state
WITHOUT_CLASSIFICATION	/*receiver*/
WITHOUT_CLASSIFICATION	/*receiver*/
WITHOUT_CLASSIFICATION	/*receiver*/
WITHOUT_CLASSIFICATION	// invoke static __file__
WITHOUT_CLASSIFICATION	// rest of the argument array!
WITHOUT_CLASSIFICATION	// fall back on empty env when security disallows environment var access (like in an applet)
WITHOUT_CLASSIFICATION	// UndefinedMethod should be immutable
WITHOUT_CLASSIFICATION	// UndefinedMethod should be immutable
WITHOUT_CLASSIFICATION	// load null block
WITHOUT_CLASSIFICATION	// This point is only reached if there was an exception handler installed.
WITHOUT_CLASSIFICATION	// nothing else to here - the module version will be // included in the class.
WITHOUT_CLASSIFICATION	// JRUBY-1000, fail early when attempting to subclass a final Java class; // solved here by adding an exception-throwing "inherited"
WITHOUT_CLASSIFICATION	// block given
WITHOUT_CLASSIFICATION	// block given
WITHOUT_CLASSIFICATION	// Translate ret = (a || b) to ret = (a ? true : b) as follows //  //    v1 = -- build(a) -- //       OPT: ret can be set to v1, but effectively v1 is true if we take the branch to L. //            while this info can be inferred by using attributes, why bother if we can do this? //    ret = true //    beq(v1, true, L) //    v2 = -- build(b) -- //    ret = v2 // L: //
WITHOUT_CLASSIFICATION	// Initial precision is that of double numbers 2^63/2 ~ 4E18 // 63-1 an even number of number bits // precision seems 16 to 18 digits
WITHOUT_CLASSIFICATION	// We can callsite cache const_missing if we want
WITHOUT_CLASSIFICATION	/*self*/
WITHOUT_CLASSIFICATION	/*self*/
WITHOUT_CLASSIFICATION	/*self*/
WITHOUT_CLASSIFICATION	// declare the field
WITHOUT_CLASSIFICATION	// Assign the values.
WITHOUT_CLASSIFICATION	// Assign the values.
WITHOUT_CLASSIFICATION	// check arity
WITHOUT_CLASSIFICATION	// check arity
WITHOUT_CLASSIFICATION	// create the class
WITHOUT_CLASSIFICATION	// called only by initializing thread; no synchronization required
WITHOUT_CLASSIFICATION	// No hex value after the 'x'.
WITHOUT_CLASSIFICATION	// 1.8
WITHOUT_CLASSIFICATION	/* 6:tags 16:addr 1:eos */
WITHOUT_CLASSIFICATION	// Let m be the exact digits precision in an earlier! loop
WITHOUT_CLASSIFICATION	// For 'foo()'.  Args are only significant in maintaining backwards compatible AST structure
WITHOUT_CLASSIFICATION	// block
WITHOUT_CLASSIFICATION	// Label for the start of the method // Label for the end of the method
WITHOUT_CLASSIFICATION	// comparisons & checks // checks if the operand is non-null and non-false // EQQ a === call used only for its conditional results, as in case/when, begin/rescue, ...
WITHOUT_CLASSIFICATION	// FIXME: JRUBY-3604
WITHOUT_CLASSIFICATION	// invoke pre method stuff
WITHOUT_CLASSIFICATION	// all done with lookup attempts, release monitor
WITHOUT_CLASSIFICATION	// allow proxy to be read without synchronization. if proxy // is under construction, only the building thread can see it.
WITHOUT_CLASSIFICATION	// Create list of interface names to proxy (and make sure they really are interfaces) // Also build a hashcode from all classes to use for retrieving previously-created impl
WITHOUT_CLASSIFICATION	// Construct local variables based on parameter names passed in
WITHOUT_CLASSIFICATION	// Value of "TZ" property is of a bit different format, // which confuses the Java's TimeZone.getTimeZone(id) method, // and so, we need to convert it.
WITHOUT_CLASSIFICATION	// file given, use it and force it into binding
WITHOUT_CLASSIFICATION	// ensure the object is associated with the wrapper we found it in, // so that if it comes back we don't re-wrap it
WITHOUT_CLASSIFICATION	// return sqrt(squarD) with precision of rootMC
WITHOUT_CLASSIFICATION	// A scoped location of this variable (high 16 bits is how many scopes down and low 16 bits // is what index in the right scope to set the value.
WITHOUT_CLASSIFICATION	/*arg*/
WITHOUT_CLASSIFICATION	// Get a new label using the provided label prefix
WITHOUT_CLASSIFICATION	// normal exit, perform finally and return
WITHOUT_CLASSIFICATION	// coerce arguments
WITHOUT_CLASSIFICATION	// 0.0 is ok // float range // inverted float range? // NaN // +infinity // -infinity
WITHOUT_CLASSIFICATION	/* expected */
WITHOUT_CLASSIFICATION	// set this class's method names in var @__java_ovrd_methods if this // is the new class; otherwise, get method names from there if this is // a proxy superclass.
WITHOUT_CLASSIFICATION	/* ignore backslashed spaces in %w */
WITHOUT_CLASSIFICATION	// Invert the sign, since TZ format and Java format // use opposite signs, sigh... Also, Java API requires // the sign to be always present, be it "+" or "-".
WITHOUT_CLASSIFICATION	// no binding given, use 0 for both
WITHOUT_CLASSIFICATION	// <=> may return nil in many circumstances, e.g. 3 <=> NaN        
WITHOUT_CLASSIFICATION	// use numbered access method
WITHOUT_CLASSIFICATION	// Always use "GMT" since that's required by Java API.
WITHOUT_CLASSIFICATION	// ignore if it's not a global var
WITHOUT_CLASSIFICATION	// The dataStruct is a place where custom information can be // contained for core implementations that doesn't necessarily // want to go to the trouble of creating a subclass of // RubyObject. The OpenSSL implementation uses this heavily to // save holder objects containing Java cryptography objects. // Java integration uses this to store the Java object ref. //protected transient Object dataStruct;
WITHOUT_CLASSIFICATION	// Remaining arguments are for the script itself
WITHOUT_CLASSIFICATION	// arg grouping, use slower arg walking logic
WITHOUT_CLASSIFICATION	// build scope names string
WITHOUT_CLASSIFICATION	// Tries to load at compile-time the constant referred to by 'constRef'. // This might be possible if the constant is defined and is not a forward reference // to a value that will be defined later in the class.
WITHOUT_CLASSIFICATION	// Here we create an "anonymous" exception type used for unrolling the stack. // MRI creates a new one for *every call* to timeout, which can be costly. // We opt to use a single exception type for all cases to avoid this overhead.
WITHOUT_CLASSIFICATION	// finally
WITHOUT_CLASSIFICATION	// MRI behavior: With TZ equal to "GMT" or "UTC", Time.now // is *NOT* considered as a proper GMT/UTC time: //   ENV['TZ']="GMT" //   Time.now.gmt? ==> false //   ENV['TZ']="UTC" //   Time.now.utc? ==> false // Hence, we need to adjust for that.
WITHOUT_CLASSIFICATION	// ?l  | boolean | True if file1 exists and is a symbolic link
WITHOUT_CLASSIFICATION	// This try/catch is to allow failing over to the "commands" logic // when running from within a jruby-complete jar file, which has // jruby.home = a jar file URL that does not resolve correctly with // JRubyFile.create.
WITHOUT_CLASSIFICATION	// Each root node has a top-level scope that we need to push
WITHOUT_CLASSIFICATION	// specific arity
WITHOUT_CLASSIFICATION	// In the case of two arguments, MRI will discard the portion of // the first argument after a decimal point (i.e., "floor"). // However in the case of a single argument, any portion after // the decimal point is honored.
WITHOUT_CLASSIFICATION	// ?w  | boolean | True if file1 exists and is writable by effective uid/gid
WITHOUT_CLASSIFICATION	// // COMMON VARIABLE METHODS //
WITHOUT_CLASSIFICATION	/*    @JRubyMethod    public IRubyObject to_proc() {        return RubyProc.newProc(getRuntime(),                                CallBlock.newCallClosure(this, getRuntime().getSymbol(), Arity.noArguments(), new ToProcCallback(this), getRuntime().getCurrentContext()),                                Block.Type.PROC);    }    */
WITHOUT_CLASSIFICATION	// let RescuedBlock continue
WITHOUT_CLASSIFICATION	// let RescuedBlock continue
WITHOUT_CLASSIFICATION	// do nothing, fall back on default compiler below
WITHOUT_CLASSIFICATION	// do nothing, fall back on default compiler below
WITHOUT_CLASSIFICATION	// Should we run this pass on the current scope before running it on nested scopes?
WITHOUT_CLASSIFICATION	// Should we run this pass on the current scope before running it on nested scopes?
WITHOUT_CLASSIFICATION	/*  ================     *  Utility Methods     *  ================      */
WITHOUT_CLASSIFICATION	/*  ================     *  Utility Methods     *  ================      */
WITHOUT_CLASSIFICATION	// write-volatile
WITHOUT_CLASSIFICATION	// write-volatile
WITHOUT_CLASSIFICATION	// write-volatile
WITHOUT_CLASSIFICATION	// write-volatile
WITHOUT_CLASSIFICATION	// write-volatile
WITHOUT_CLASSIFICATION	// write-volatile
WITHOUT_CLASSIFICATION	// write-volatile
WITHOUT_CLASSIFICATION	// write-volatile
WITHOUT_CLASSIFICATION	// write-volatile
WITHOUT_CLASSIFICATION	// if more than 4 locals, get the locals array too
WITHOUT_CLASSIFICATION	// if more than 4 locals, get the locals array too
WITHOUT_CLASSIFICATION	// if more than 4 locals, get the locals array too
WITHOUT_CLASSIFICATION	// Add property name aliases
WITHOUT_CLASSIFICATION	/*  ================     *  Instance Methods     *  ================      */
WITHOUT_CLASSIFICATION	/*  ================     *  Instance Methods     *  ================      */
WITHOUT_CLASSIFICATION	/*  ================     *  Instance Methods     *  ================      */
WITHOUT_CLASSIFICATION	// @JRubyMethod(name = "new", meta = true, visibility = Visibility.PRIVATE)
WITHOUT_CLASSIFICATION	// @JRubyMethod(name = "new", meta = true, visibility = Visibility.PRIVATE)
WITHOUT_CLASSIFICATION	// @JRubyMethod(name = "new", meta = true, visibility = Visibility.PRIVATE)
WITHOUT_CLASSIFICATION	// // INTERNAL VARIABLE METHODS //
WITHOUT_CLASSIFICATION	// backspace
WITHOUT_CLASSIFICATION	//yySindex 889
WITHOUT_CLASSIFICATION	//yyGindex 136
WITHOUT_CLASSIFICATION	//yyGindex 136
WITHOUT_CLASSIFICATION	//yyGindex 136
WITHOUT_CLASSIFICATION	/* package-private */
WITHOUT_CLASSIFICATION	// fall through
WITHOUT_CLASSIFICATION	// fall through
WITHOUT_CLASSIFICATION	// MRI issuses warning here on (RBIGNUM(x)->len * SIZEOF_BDIGITS * yy > 1024*1024)
WITHOUT_CLASSIFICATION	// interrupt the target thread in case it's blocking or waiting // WARNING: We no longer interrupt the target thread, since this usually means // interrupting IO and with NIO that means the channel is no longer usable. // We either need a new way to handle waking a target thread that's waiting // on IO, or we need to accept that we can't wake such threads and must wait // for them to complete their operation. //threadImpl.interrupt();
WITHOUT_CLASSIFICATION	// interrupt the target thread in case it's blocking or waiting // WARNING: We no longer interrupt the target thread, since this usually means // interrupting IO and with NIO that means the channel is no longer usable. // We either need a new way to handle waking a target thread that's waiting // on IO, or we need to accept that we can't wake such threads and must wait // for them to complete their operation. //threadImpl.interrupt();
WITHOUT_CLASSIFICATION	/**      * Nested class whose instances act as thunks reacting to to_str method     * called from (Exception#to_str, Exception#message)     * MRI equivalent: rb_cNameErrorMesg, class name: "message", construction method: "!",     * to_str implementation: "name_err_mesg_to_str"     *     * TODO: this class should not be lookupable     */
WITHOUT_CLASSIFICATION	// We need to guarantee that any existing reads of old Map can //  proceed. So we cannot yet null out each bin.
WITHOUT_CLASSIFICATION	// The name of this source (e.g. a filename: foo.rb)
WITHOUT_CLASSIFICATION	// EQ == 0 (i.e. false)
WITHOUT_CLASSIFICATION	// EQ == 0 (i.e. false)
WITHOUT_CLASSIFICATION	// This should only be called by this and RubyFile. // It allows this object to be created without a IOHandler.
WITHOUT_CLASSIFICATION	// We yield here to hopefully permit the target thread to schedule // MRI immediately schedules it, so this is close but not exact
WITHOUT_CLASSIFICATION	// note that addMethod now does its own put, so any change made to // functionality here should be made there as well 
WITHOUT_CLASSIFICATION	/* Currently dead code, but useful when we figure out how to actually perform translit.    private static boolean isTranslit(String encoding) {        return encoding.toLowerCase().indexOf(TRANSLIT) != -1 ? true : false;    }*/
WITHOUT_CLASSIFICATION	// empirically it appears that to_ary coersions always return array or nil, so this // should always be an array by now.
WITHOUT_CLASSIFICATION	// EQ == 0 (i.e. false)
WITHOUT_CLASSIFICATION	// EQ == 0 (i.e. false)
WITHOUT_CLASSIFICATION	// EQ == 0 (i.e. false)
WITHOUT_CLASSIFICATION	// EQ == 0 (i.e. false)
WITHOUT_CLASSIFICATION	// EQ == 0 (i.e. false)
WITHOUT_CLASSIFICATION	// No seconds, just yield
WITHOUT_CLASSIFICATION	// finally handling for abnormal exit
WITHOUT_CLASSIFICATION	// if it's an inner class and it's not public, we can't access it; // skip population of declared elements
WITHOUT_CLASSIFICATION	// getFoo      => foo // getFoo(int) => foo(int)
WITHOUT_CLASSIFICATION	// not reached
WITHOUT_CLASSIFICATION	// not reached
WITHOUT_CLASSIFICATION	// not reached
WITHOUT_CLASSIFICATION	// not reached
WITHOUT_CLASSIFICATION	// not reached
WITHOUT_CLASSIFICATION	// not reached
WITHOUT_CLASSIFICATION	// not reached
WITHOUT_CLASSIFICATION	// not reached
WITHOUT_CLASSIFICATION	// not reached
WITHOUT_CLASSIFICATION	// not reached
WITHOUT_CLASSIFICATION	// not reached
WITHOUT_CLASSIFICATION	// not reached
WITHOUT_CLASSIFICATION	// not reached
WITHOUT_CLASSIFICATION	// not reached
WITHOUT_CLASSIFICATION	// not reached
WITHOUT_CLASSIFICATION	// not reached
WITHOUT_CLASSIFICATION	// not reached
WITHOUT_CLASSIFICATION	// MRI behavior on Windows: it treats '/' as a root of // a current drive (but only if SINGLE slash is present!): // E.g., if current work directory is // 'D:/home/directory', then '/' means 'D:/'. // // Basically, '/path' is treated as a *RELATIVE* path, // relative to the current drive. '//path' is treated // as absolute one.
WITHOUT_CLASSIFICATION	// not reached
WITHOUT_CLASSIFICATION	// not reached
WITHOUT_CLASSIFICATION	// not reached
WITHOUT_CLASSIFICATION	// not reached
WITHOUT_CLASSIFICATION	// not reached
WITHOUT_CLASSIFICATION	// not reached
WITHOUT_CLASSIFICATION	// not reached
WITHOUT_CLASSIFICATION	// not reached
WITHOUT_CLASSIFICATION	// not reached
WITHOUT_CLASSIFICATION	// not reached
WITHOUT_CLASSIFICATION	// not reached
WITHOUT_CLASSIFICATION	// This is needed when the enclosing class or module is a singleton. // In that case, we generated a name such as null::Foo, which broke  // Marshalling, among others. The correct thing to do in this situation  // is to insert the generate the name of form #<Class:01xasdfasd> if  // it's a singleton module/class, which this code accomplishes.
WITHOUT_CLASSIFICATION	// this is the only case it might be null here (in MetaClass construction)
WITHOUT_CLASSIFICATION	// EQ == 0 (i.e. false) // pop the extra result and replace with the send part of the AND
WITHOUT_CLASSIFICATION	// get "self"
WITHOUT_CLASSIFICATION	// No timeout in critical section
WITHOUT_CLASSIFICATION	// rethrow exception // rethrow it
WITHOUT_CLASSIFICATION	// only public methods
WITHOUT_CLASSIFICATION	// If already inspecting, there is no need to register/unregister again.
WITHOUT_CLASSIFICATION	// First try to use drive letter from supplied dir value, // then try current work dir.
WITHOUT_CLASSIFICATION	// JRUBY-2435: Aliasing eval and other "special" methods should display a warning // We warn because we treat certain method names as "special" for purposes of // optimization. Hopefully this will be enough to convince people not to alias // them.
WITHOUT_CLASSIFICATION	// generate a real method signature for the method, with to/from coercions
WITHOUT_CLASSIFICATION	// block argument to the method // closure present // class present // method table mutations, def, defs, undef, alias // likely call to eval // makes calls that are aware of the frame // makes calls that are aware of the frame's self // makes calls that are aware of the frame's visibility // makes calls that are aware of the frame's block // makes calls that are aware of the frame's name // makes calls that set or get backref // makes calls that set or get lastline // makes calls that are aware of the frame's class // optional arguments to the method // rest arg to the method // makes calls that are aware of the scope // makes a zero-argument super call // accesses or sets constants // accesses or sets class variables // makes normal super call // contains a retry
WITHOUT_CLASSIFICATION	// // Add aliases in Type::*, NativeType::* and FFI::TYPE_* //
WITHOUT_CLASSIFICATION	// Create constants for flock
WITHOUT_CLASSIFICATION	// double-testing args.length here, but it avoids duplicating the proc-setup code in two places
WITHOUT_CLASSIFICATION	// indices for temp values
WITHOUT_CLASSIFICATION	// a while node could receive non-local flow control from any of these: // * a closure within the loop // * an eval within the loop // * a block-arg-based proc called within the loop
WITHOUT_CLASSIFICATION	// Done with closure compilation
WITHOUT_CLASSIFICATION	// Done with closure compilation
WITHOUT_CLASSIFICATION	// Done with closure compilation
WITHOUT_CLASSIFICATION	// Done with closure compilation
WITHOUT_CLASSIFICATION	// snapshot of contents of directory // current position in directory
WITHOUT_CLASSIFICATION	// Exclusive locks in Java require the channel to be writable, otherwise // an exception is thrown (terminating JRuby execution). // But flock behavior of MRI is that it allows // exclusive locks even on non-writable file. So we convert exclusive // lock to shared lock if the channel is not writable, to better match // the MRI behavior.
WITHOUT_CLASSIFICATION	// explode array, it's an internal "args" array
WITHOUT_CLASSIFICATION	// explode array, it's an internal "args" array
WITHOUT_CLASSIFICATION	// set self to the class
WITHOUT_CLASSIFICATION	/* ---------- Public fields, methods --------- */
WITHOUT_CLASSIFICATION	// // A specific version was requested - use as is for search //
WITHOUT_CLASSIFICATION	// zero args, no block; do nothing
WITHOUT_CLASSIFICATION	// we need to collect all methods, though we'll only // install the ones that are named in this class
WITHOUT_CLASSIFICATION	// Store each line into this list if not null.
WITHOUT_CLASSIFICATION	// Portion of line right after beginning marker
WITHOUT_CLASSIFICATION	// do nothing
WITHOUT_CLASSIFICATION	// do nothing
WITHOUT_CLASSIFICATION	// do nothing
WITHOUT_CLASSIFICATION	// do nothing
WITHOUT_CLASSIFICATION	// If an IO exception occurs (something odd, but possible) // A directory may return null.
WITHOUT_CLASSIFICATION	// Check the visibility of the previous frame, which will be the frame in which the class is being eval'ed
WITHOUT_CLASSIFICATION	// Check the visibility of the previous frame, which will be the frame in which the class is being eval'ed
WITHOUT_CLASSIFICATION	// Check the visibility of the previous frame, which will be the frame in which the class is being eval'ed
WITHOUT_CLASSIFICATION	// use array as-is, it's a literal array
WITHOUT_CLASSIFICATION	// finally with no exception
WITHOUT_CLASSIFICATION	// Now, for all variables used by 'i' mark them live before 'i'
WITHOUT_CLASSIFICATION	// TODO: varargs?
WITHOUT_CLASSIFICATION	// TODO: varargs?
WITHOUT_CLASSIFICATION	/* The counting of slashes that follows is simply a way to adhere to          * Ruby's UNC (or something) compatibility. When Ruby's expand_path is          * called with "//foo//bar" it will return "//foo/bar". JRuby uses          * java.io.File, and hence returns "/foo/bar". In order to retain          * java.io.File in the lower layers and provide full Ruby          * compatibility, the number of extra slashes must be counted and          * prepended to the result.         */
WITHOUT_CLASSIFICATION	// This is almost always already interned, since it will be called with a symbol in most cases // but when created from Java code, we might get an argument that needs to be interned. // addAccessor has as a precondition that the string MUST be interned
WITHOUT_CLASSIFICATION	/* not a class */
WITHOUT_CLASSIFICATION	/* not a class */
WITHOUT_CLASSIFICATION	// Ruby uses Qnil here, we use "dummy" because we need a class
WITHOUT_CLASSIFICATION	// Ruby uses Qnil here, we use "dummy" because we need a class
WITHOUT_CLASSIFICATION	// io.available() only returns 0 after EOF is encountered // so we need to differentiate between the empty string and EOF
WITHOUT_CLASSIFICATION	// In the current logic, if we get here we know that module is not an // IncludedModuleWrapper, so there's no need to fish out the delegate. But just // in case the logic should change later, let's do it anyway
WITHOUT_CLASSIFICATION	// rb_iterate((VALUE(*)_((VALUE)))str_step, (VALUE)args, step_i, (VALUE)iter);
WITHOUT_CLASSIFICATION	// Broken symlinks considered by exists() as non-existing, // so we need to check for symlinks explicitly.
WITHOUT_CLASSIFICATION	// ////////////////// CONSTANT API METHODS //////////////// //
WITHOUT_CLASSIFICATION	// create the default thread group
WITHOUT_CLASSIFICATION	// range_each_func(range, step_i, b, e, args);
WITHOUT_CLASSIFICATION	/* ============================     * Here are hash internals     * (This could be extracted to a separate class but it's not too large though)     * ============================     */
WITHOUT_CLASSIFICATION	// ////////////////// LOW-LEVEL CLASS VARIABLE INTERFACE //////////////// // // fetch/store/list class variables for this module //
WITHOUT_CLASSIFICATION	// used only by the compiler/interpreter (will set the literal flag)
WITHOUT_CLASSIFICATION	// used only by the compiler/interpreter (will set the literal flag)
WITHOUT_CLASSIFICATION	// Used for the 'redo' command
WITHOUT_CLASSIFICATION	// Used for the 'redo' command
WITHOUT_CLASSIFICATION	// retuns null when not found to avoid unnecessary getRuntime().getNil() call
WITHOUT_CLASSIFICATION	// returns the stored value without processing undefs (autoloads)
WITHOUT_CLASSIFICATION	/* \cX, \c\M-X */
WITHOUT_CLASSIFICATION	//new Exception().printStackTrace();
WITHOUT_CLASSIFICATION	//new Exception().printStackTrace();
WITHOUT_CLASSIFICATION	//new Exception().printStackTrace();
WITHOUT_CLASSIFICATION	// line 286
WITHOUT_CLASSIFICATION	// line 476
WITHOUT_CLASSIFICATION	// line 513
WITHOUT_CLASSIFICATION	// line 530
WITHOUT_CLASSIFICATION	// line 533
WITHOUT_CLASSIFICATION	// line 537
WITHOUT_CLASSIFICATION	// line 551
WITHOUT_CLASSIFICATION	// end loop
WITHOUT_CLASSIFICATION	// MRI behavior: we don't print errno for actual Errno errors
WITHOUT_CLASSIFICATION	// prepare to call class definition method
WITHOUT_CLASSIFICATION	// Traverse the instructions in this basic block in reverse order! // Mark as dead all instructions whose results are not used! 
WITHOUT_CLASSIFICATION	// // fields should really be an immutable map as it is never modified after construction //
WITHOUT_CLASSIFICATION	// load self object as IRubyObject, for recv param
WITHOUT_CLASSIFICATION	// TODO: varargs?
WITHOUT_CLASSIFICATION	// If we define a class in Ruby, but later want to allow it to be defined in Java, // the allocator needs to be updated
WITHOUT_CLASSIFICATION	// We only want IO objects with valid streams (better to error now). 
WITHOUT_CLASSIFICATION	// produce a nicer error since Rubyists aren't used to seeing this
WITHOUT_CLASSIFICATION	/*value*/
WITHOUT_CLASSIFICATION	/*value*/
WITHOUT_CLASSIFICATION	/*value*/
WITHOUT_CLASSIFICATION	/*value*/
WITHOUT_CLASSIFICATION	/*value*/
WITHOUT_CLASSIFICATION	//yyLhs 542
WITHOUT_CLASSIFICATION	/*value*/
WITHOUT_CLASSIFICATION	/*value*/
WITHOUT_CLASSIFICATION	/*value*/
WITHOUT_CLASSIFICATION	// MRI has extra pointer which makes our code look a little bit // more strange in // comparison
WITHOUT_CLASSIFICATION	// Tempory buffer to build up a potential token.  Consumer takes responsibility to reset  // this before use.
WITHOUT_CLASSIFICATION	//tmpPosition is required because getPosition()'s side effects. //if the warning is generated, the getPosition() on line 954 (this line + 18) will create //a wrong position if the "inclusive" flag is not set.
WITHOUT_CLASSIFICATION	/* What is \v in C?                    case '\v':                        c2 = 'v';                        break;                        */
WITHOUT_CLASSIFICATION	/* Consider Thread aspects of this */
WITHOUT_CLASSIFICATION	// Position within source must reflect the actual offset and column.  Since // we ate an extra character here (this accounting is normally done in read // ), we should update position info.
WITHOUT_CLASSIFICATION	// An interrupt or timeout may have caused us to miss // a notify that we consumed, so do another notify in // case someone else is available to pick it up.
WITHOUT_CLASSIFICATION	// line 572
WITHOUT_CLASSIFICATION	// line 601
WITHOUT_CLASSIFICATION	// line 601
WITHOUT_CLASSIFICATION	// line 625
WITHOUT_CLASSIFICATION	// line 649
WITHOUT_CLASSIFICATION	// line 691
WITHOUT_CLASSIFICATION	// line 723
WITHOUT_CLASSIFICATION	// line 732
WITHOUT_CLASSIFICATION	// line 745
WITHOUT_CLASSIFICATION	// line 766
WITHOUT_CLASSIFICATION	// line 785
WITHOUT_CLASSIFICATION	// line 794
WITHOUT_CLASSIFICATION	// line 800
WITHOUT_CLASSIFICATION	// line 812
WITHOUT_CLASSIFICATION	// line 827
WITHOUT_CLASSIFICATION	// line 839
WITHOUT_CLASSIFICATION	// line 845
WITHOUT_CLASSIFICATION	// line 864
WITHOUT_CLASSIFICATION	// line 886
WITHOUT_CLASSIFICATION	// line 896
WITHOUT_CLASSIFICATION	// line 911
WITHOUT_CLASSIFICATION	// line 929
WITHOUT_CLASSIFICATION	// line 952
WITHOUT_CLASSIFICATION	// line 970
WITHOUT_CLASSIFICATION	// line 972
WITHOUT_CLASSIFICATION	// line 991
WITHOUT_CLASSIFICATION	// line 1011
WITHOUT_CLASSIFICATION	// line 1026
WITHOUT_CLASSIFICATION	// line 1038
WITHOUT_CLASSIFICATION	// line 1067
WITHOUT_CLASSIFICATION	// line 1085
WITHOUT_CLASSIFICATION	// line 1097
WITHOUT_CLASSIFICATION	// line 1105
WITHOUT_CLASSIFICATION	// line 1122
WITHOUT_CLASSIFICATION	// line 1133
WITHOUT_CLASSIFICATION	// line 1145
WITHOUT_CLASSIFICATION	// line 1169
WITHOUT_CLASSIFICATION	// line 1201
WITHOUT_CLASSIFICATION	// line 1210
WITHOUT_CLASSIFICATION	// line 1229
WITHOUT_CLASSIFICATION	// line 1261
WITHOUT_CLASSIFICATION	// line 1287
WITHOUT_CLASSIFICATION	// line 1293
WITHOUT_CLASSIFICATION	// line 1307
WITHOUT_CLASSIFICATION	// line 1320
WITHOUT_CLASSIFICATION	// line 1325
WITHOUT_CLASSIFICATION	// line 1363
WITHOUT_CLASSIFICATION	// line 1398
WITHOUT_CLASSIFICATION	// line 1448
WITHOUT_CLASSIFICATION	// line 1456
WITHOUT_CLASSIFICATION	// line 1473
WITHOUT_CLASSIFICATION	// line 1492
WITHOUT_CLASSIFICATION	// line 1513
WITHOUT_CLASSIFICATION	// line 1523
WITHOUT_CLASSIFICATION	// line 1562
WITHOUT_CLASSIFICATION	// line 1582
WITHOUT_CLASSIFICATION	// line 1603
WITHOUT_CLASSIFICATION	// line 1603
WITHOUT_CLASSIFICATION	// line 1615
WITHOUT_CLASSIFICATION	// line 1620
WITHOUT_CLASSIFICATION	// line 1635
WITHOUT_CLASSIFICATION	// line 1652
WITHOUT_CLASSIFICATION	// line 1681
WITHOUT_CLASSIFICATION	// line 1708
WITHOUT_CLASSIFICATION	// line 1716
WITHOUT_CLASSIFICATION	// line 1755
WITHOUT_CLASSIFICATION	// line 1772
WITHOUT_CLASSIFICATION	// line 1789
WITHOUT_CLASSIFICATION	// ACTIONS_END
WITHOUT_CLASSIFICATION	// ACTIONS_END
WITHOUT_CLASSIFICATION	/* force for args */
WITHOUT_CLASSIFICATION	/* last expression should not be void */
WITHOUT_CLASSIFICATION	/* compstmt position includes both parens around it*/
WITHOUT_CLASSIFICATION	// We can assign if we already have variable of that name here or we are the only // scope in the chain (which Local scopes always are).
WITHOUT_CLASSIFICATION	// ignore, no debugger present
WITHOUT_CLASSIFICATION	// ignore, no debugger present
WITHOUT_CLASSIFICATION	// ignore, no debugger present
WITHOUT_CLASSIFICATION	// ignore, no debugger present
WITHOUT_CLASSIFICATION	// FIXME: Temporarily disabling because this fires way too much running Rails tests. JRUBY-518
WITHOUT_CLASSIFICATION	/*     * This method exists for us to break up multiple expression when nodes (e.g. when 1,2,3:)     * into individual whenNodes.  The primary reason for this is to ensure lazy evaluation of     * the arguments (when foo,bar,gar:) to prevent side-effects.  In the old code this was done     * using nested when statements, which was awful for interpreter and compilation.     *     * Notes: This has semantic equivalence but will not be lexically equivalent.  Compiler     * needs to detect same bodies to simplify bytecode generated.     */
WITHOUT_CLASSIFICATION	// line 313
WITHOUT_CLASSIFICATION	// line 339
WITHOUT_CLASSIFICATION	// line 361
WITHOUT_CLASSIFICATION	// line 413
WITHOUT_CLASSIFICATION	// line 451
WITHOUT_CLASSIFICATION	// line 472
WITHOUT_CLASSIFICATION	// line 500
WITHOUT_CLASSIFICATION	// line 515
WITHOUT_CLASSIFICATION	// line 555
WITHOUT_CLASSIFICATION	// line 582
WITHOUT_CLASSIFICATION	// line 619
WITHOUT_CLASSIFICATION	// line 636
WITHOUT_CLASSIFICATION	// line 669
WITHOUT_CLASSIFICATION	// line 703
WITHOUT_CLASSIFICATION	// line 776
WITHOUT_CLASSIFICATION	// line 814
WITHOUT_CLASSIFICATION	// line 823
WITHOUT_CLASSIFICATION	// line 854
WITHOUT_CLASSIFICATION	// line 872
WITHOUT_CLASSIFICATION	// line 905
WITHOUT_CLASSIFICATION	// line 925
WITHOUT_CLASSIFICATION	// line 958
WITHOUT_CLASSIFICATION	// line 992
WITHOUT_CLASSIFICATION	// line 1047
WITHOUT_CLASSIFICATION	// line 1072
WITHOUT_CLASSIFICATION	// line 1081
WITHOUT_CLASSIFICATION	// line 1108
WITHOUT_CLASSIFICATION	// line 1136
WITHOUT_CLASSIFICATION	// line 1168
WITHOUT_CLASSIFICATION	// line 1192
WITHOUT_CLASSIFICATION	// line 1241
WITHOUT_CLASSIFICATION	// line 1267
WITHOUT_CLASSIFICATION	// line 1286
WITHOUT_CLASSIFICATION	// line 1301
WITHOUT_CLASSIFICATION	// line 1314
WITHOUT_CLASSIFICATION	// line 1333
WITHOUT_CLASSIFICATION	// line 1362
WITHOUT_CLASSIFICATION	// line 1395
WITHOUT_CLASSIFICATION	// line 1420
WITHOUT_CLASSIFICATION	// line 1439
WITHOUT_CLASSIFICATION	// line 1476
WITHOUT_CLASSIFICATION	// line 1535
WITHOUT_CLASSIFICATION	// line 1588
WITHOUT_CLASSIFICATION	// line 1618
WITHOUT_CLASSIFICATION	// line 1643
WITHOUT_CLASSIFICATION	// line 1669
WITHOUT_CLASSIFICATION	// line 1728
WITHOUT_CLASSIFICATION	// line 1753
WITHOUT_CLASSIFICATION	// line 1779
WITHOUT_CLASSIFICATION	// line 1794
WITHOUT_CLASSIFICATION	// line 1812
WITHOUT_CLASSIFICATION	// line 1837
WITHOUT_CLASSIFICATION	// line 1895
WITHOUT_CLASSIFICATION	// line 1925
WITHOUT_CLASSIFICATION	// line 1950
WITHOUT_CLASSIFICATION	// line 1992
WITHOUT_CLASSIFICATION	// line 2014
WITHOUT_CLASSIFICATION	// Whether this scope is used as the "argument scope" for e.g. zsuper
WITHOUT_CLASSIFICATION	// If we could not find the constant from cref..then try getting from inheritence hierarchy
WITHOUT_CLASSIFICATION	// This while loop is for restarting the block call in case a 'redo' fires.
WITHOUT_CLASSIFICATION	// This while loop is for restarting the block call in case a 'redo' fires.
WITHOUT_CLASSIFICATION	// This while loop is for restarting the block call in case a 'redo' fires.
WITHOUT_CLASSIFICATION	// This while loop is for restarting the block call in case a 'redo' fires.
WITHOUT_CLASSIFICATION	// This while loop is for restarting the block call in case a 'redo' fires.
WITHOUT_CLASSIFICATION	// This while loop is for restarting the block call in case a 'redo' fires.
WITHOUT_CLASSIFICATION	// This while loop is for restarting the block call in case a 'redo' fires.
WITHOUT_CLASSIFICATION	// A 'next' is like a local return from the block, ending this call or yield.
WITHOUT_CLASSIFICATION	// A 'next' is like a local return from the block, ending this call or yield.
WITHOUT_CLASSIFICATION	// A 'next' is like a local return from the block, ending this call or yield.
WITHOUT_CLASSIFICATION	// A 'next' is like a local return from the block, ending this call or yield.
WITHOUT_CLASSIFICATION	// happens with native exceptions, should not filter those out
WITHOUT_CLASSIFICATION	// happens with native exceptions, should not filter those out
WITHOUT_CLASSIFICATION	// We create one extra dynamicScope on a binding so that when we 'eval "b=1", binding' the // 'b' will get put into this new dynamic scope.  The original scope does not see the new // 'b' and successive evals with this binding will.  I take it having the ability to have  // succesive binding evals be able to share same scope makes sense from a programmers  // perspective.   One crappy outcome of this design is it requires Dynamic and Static  // scopes to be mutable for this one case.
WITHOUT_CLASSIFICATION	// Populate up to shorter of calling arguments or local parameters in the block
WITHOUT_CLASSIFICATION	// Populate up to shorter of calling arguments or local parameters in the block
WITHOUT_CLASSIFICATION	// tc // under method // self // under method // name // args
WITHOUT_CLASSIFICATION	// allow it to bubble up
WITHOUT_CLASSIFICATION	// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args
WITHOUT_CLASSIFICATION	// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args
WITHOUT_CLASSIFICATION	// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args
WITHOUT_CLASSIFICATION	// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args
WITHOUT_CLASSIFICATION	// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args
WITHOUT_CLASSIFICATION	// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args
WITHOUT_CLASSIFICATION	// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args
WITHOUT_CLASSIFICATION	// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args
WITHOUT_CLASSIFICATION	// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args
WITHOUT_CLASSIFICATION	// trim extension to try other options
WITHOUT_CLASSIFICATION	// trim extension to try other options
WITHOUT_CLASSIFICATION	// Check for a builtin first.
WITHOUT_CLASSIFICATION	// end suffix iteration
WITHOUT_CLASSIFICATION	// end suffix iteration
WITHOUT_CLASSIFICATION	// Unfortunately, the number of digits in the exponent is // not clearly defined in Ruby documentation. This is a // platform/version-dependent behavior. On Linux/Mac/Cygwin/*nix, // two digits are used. On Windows, 3 digits are used. // It is desirable for JRuby to have consistent behavior, and // the two digits behavior was selected. This is also in sync // with "Java-native" sprintf behavior (java.util.Formatter). // E or e
WITHOUT_CLASSIFICATION	/** * Represents the the dynamic portion of scoping information.  The variableValues are the * values of assigned local or block variables.  The staticScope identifies which sort of * scope this is (block or local). *  * Properties of Dynamic Scopes: * 1. static and dynamic scopes have the same number of names to values * 2. size of variables (and thus names) is determined during parsing.  So those structured do *    not need to change * * FIXME: When creating dynamic scopes we sometimes accidentally pass in extra parents.  This * is harmless (other than wasting memory), but we should not do that.  We can fix this in two * ways: * 1. Fix all callers * 2. Check parent that is passed in and make if new instance is local, then its parent is not local */
WITHOUT_CLASSIFICATION	// This method handles '**/' patterns and delegates to // fnmatch_helper for the main work.
WITHOUT_CLASSIFICATION	// Peel onion...make subpatterns out of outer layer of glob and recall with each subpattern  // Example: foo{a{c},b}bar -> fooa{c}bar, foobbar
WITHOUT_CLASSIFICATION	// double precision, native // double precision, native
WITHOUT_CLASSIFICATION	// 64-bit number, native (as bignum)
WITHOUT_CLASSIFICATION	// Next indicates to decode using native encoding format
WITHOUT_CLASSIFICATION	// calculate based on a, b, c and d
WITHOUT_CLASSIFICATION	// processes seem to have some peculiar locking sequences, so we // need to ensure nobody is trying to close/destroy while we are
WITHOUT_CLASSIFICATION	// MRI behavior:  for 'Q', do not add trailing nils
WITHOUT_CLASSIFICATION	//this test may be too lax but it is the same as in MRI
WITHOUT_CLASSIFICATION	// exec needs to behave differently in-process, because it's technically // supposed to replace the calling process. So if we're supposed to run // in-process, we allow it to use the default streams and not use // pumpers at all. See JRUBY-2156 and JRUBY-2154.
WITHOUT_CLASSIFICATION	// snip off ruby or jruby command from list of arguments // leave alone if the command is the name of a script
WITHOUT_CLASSIFICATION	// The problem we trying to solve below: STDIN in Java // is blocked and non-interruptible, so if we invoke read // on it, we might never be able to interrupt such thread. // So, we use in.available() to see if there is any input // ready, and only then read it. But this approach can't // tell whether the end of stream reached or not, so we // might end up looping right at the end of the stream. // Well, at least, we can improve the situation by checking // if some input was ever available, and if so, not // checking for available anymore, and just go to read.
WITHOUT_CLASSIFICATION	// first digit is always printed
WITHOUT_CLASSIFICATION	// an empirically derived rule: precision applies to // significand length, irrespective of exponent
WITHOUT_CLASSIFICATION	// an official rule, clarified: if the exponent // <clarif>after adjusting for exponent form</clarif> // is < -4,  or the exponent <clarif>after adjusting  // for exponent form</clarif> is greater than the // precision, use exponent form
WITHOUT_CLASSIFICATION	// in this mode, '.' is always printed
WITHOUT_CLASSIFICATION	// now some data...
WITHOUT_CLASSIFICATION	// now some data...
WITHOUT_CLASSIFICATION	// MRI behavior: validate only the unnumbered arguments
WITHOUT_CLASSIFICATION	// else catch oversize below
WITHOUT_CLASSIFICATION	// calculation for simple (and typical) case, // adapted from sun.misc.FloatingDecimal
WITHOUT_CLASSIFICATION	//switch
WITHOUT_CLASSIFICATION	/*utf8 lead byte*/
WITHOUT_CLASSIFICATION	/*utf8 lead byte*/
WITHOUT_CLASSIFICATION	/*utf8 lead byte*/
WITHOUT_CLASSIFICATION	// could not get canonical path, just use given path
WITHOUT_CLASSIFICATION	// We always open this rw since we can only open it r or rw.
WITHOUT_CLASSIFICATION	// call chmod after we created the RandomAccesFile // because otherwise, the file could be read-only
WITHOUT_CLASSIFICATION	// attempt to set the permissions, if we have been passed a POSIX instance, // and only if the file was created in this call.
WITHOUT_CLASSIFICATION	// // When reading into a heap buffer, the jvm allocates a temporary // direct ByteBuffer of the requested size.  To avoid allocating // a huge direct buffer when doing ludicrous reads (e.g. 1G or more) // we split the read up into chunks of no more than 1M //
WITHOUT_CLASSIFICATION	// // If it is a file channel, then we can pre-allocate the output buffer // to the total size of buffered + remaining bytes in file //
WITHOUT_CLASSIFICATION	// // Cannot discern the total read length - allocate at least enough for the buffered data //
WITHOUT_CLASSIFICATION	// // Copy what is in the buffer, if there is some buffered data //
WITHOUT_CLASSIFICATION	// append what we read into our buffer and allow the loop to continue
WITHOUT_CLASSIFICATION	// already have some bytes buffered, just return those
WITHOUT_CLASSIFICATION	// reset buffer
WITHOUT_CLASSIFICATION	// // Synchronize and re-check to avoid creating more than one Selector per provider //
WITHOUT_CLASSIFICATION	// TODO: Ruby logic is somewhat more complicated here, see comments after
WITHOUT_CLASSIFICATION	// Is there something built into JRuby to do this?
WITHOUT_CLASSIFICATION	// Note that WE CAN'T say the following, because of the on-the-fly conversion of Fixnum to Long // assertTrue(value == valueViaValuesIterator);
WITHOUT_CLASSIFICATION	// value equality //result = eval("key = 3; arr = []; arr[key] = 'one'; arr.store(3, 'two'); puts arr[key]"); //assertEquals("two", result);
WITHOUT_CLASSIFICATION	// Uncomment the "puts" lines if you want to see more detail
WITHOUT_CLASSIFICATION	// Since we don't have any other error reporting mechanism, we // add the error message as an always-failing test to the test suite.
WITHOUT_CLASSIFICATION	// change the thread context to include the class
DESIGN	// Fixme: Do we need the check or does Main.java not call this...they should consolidate 
DESIGN	// FIXME: move out of this class!
DESIGN	// this is a rather ugly hack, but similar to MRI. See hash.c:ruby_setenv and similar in MRI // we search all keys for a case-insensitive match, and use that
DESIGN	// FIXME: legal here? may want UnsupportedOperationException
DESIGN	// FIXME: Don't allow multiple threads to do this at once
DESIGN	// TODO: eliminate?
DESIGN	// TODO: People extending GzipWriter/reader will break.  Find better way here.
DESIGN	// For JRUBY-2759, when MET choose CET timezone to work around Joda
DESIGN	// we might need to perform a DST correction
DESIGN	// rb_copy_generic_ivar from DUP_SETUP here ...unlikely..
DESIGN	/** rb_ary_push_m     * FIXME: Whis is this named "push_m"?     */
DESIGN	// from DUP_SETUP // rb_copy_generic_ivar from DUP_SETUP here ...unlikely..
DESIGN	//TODO: ary_sort_check should be done here
DESIGN	//TODO: ary_sort_check should be done here
DESIGN	// TODO: is this correct ?
DESIGN	// TODO: make more efficient by not creating IRubyArray[]
DESIGN	// TODO: list.subList(from, to).clear() is supposed to clear the sublist from the list. // How can we support this operation?
DESIGN	// TODO: NOT_ALLOCATABLE_ALLOCATOR is probably ok here. Confirm. JRUBY-415
DESIGN	// FIXME: This table will get moved into POSIX library so we can get all actual supported // signals.  This is a quick fix to support basic signals until that happens.
DESIGN	// The implementations of these are all bonus (see TODO above)  I was going // to throw an error from these, but it appears to be the wrong place to // do it.
DESIGN	// TODO: number formatting here, MRI uses "%-.10g", 1.4 API is a must?
DESIGN	// TODO: remove
DESIGN	// FIXME moved this here to get what's obviously a utility method out of IRubyObject. // perhaps security methods should find their own centralized home at some point.
DESIGN	// FIXME: Get rid of laziness and handle restricted access elsewhere
DESIGN	// TODO: Should frozen error have its own distinct class?  If not should more share?
DESIGN	// TODO: this is kinda gross
DESIGN	// Not sure how well this works, but it works much better than // just currentTimeMillis by itself.
DESIGN	// TODO: exec should replace the current process. // This could be possible with JNA. 
DESIGN	// FIXME: In order for Thread to play well with the standard 'new' behavior, // it must provide an allocator that can create empty object instances which // initialize then fills with appropriate data.
DESIGN	// TODO: not sure that we should skip calling join() altogether. // Thread.join() has some implications for Java Memory Model, etc.
DESIGN	// FIXME: There's some code duplication here with RubyObject#inspect
DESIGN	// FIXME: This should probably do some translation from Ruby priority levels to Java priority levels (until we have green threads)
DESIGN	// TODO: no java stringity
DESIGN	// need to reexamine this
DESIGN	// TODO: These were missing, so we're not handling them elsewhere?
DESIGN	// TODO: why are we duplicating the constants here, and then in // File::Constants below? File::Constants is included in IO.
DESIGN	// TODO: this method is not present in MRI!
DESIGN	// TODO: This is also defined in the MetaClass too...Consolidate somewhere.
DESIGN	// Something wrong we don't know the cwd... // TODO: Is this behavior really desirable? /mov
DESIGN	/*     * Fixme:  This does not have exact same semantics as RubyArray.join, but they     * probably could be consolidated (perhaps as join(args[], sep, doChomp)).     */
DESIGN	// TODO should this be deprecated ? (to be efficient, internals should deal with RubyHash directly)
DESIGN	// TODO: Implement tty? and isatty.  We have no real capability to // determine this from java, but if we could set tty status, then // we could invoke jruby differently to allow stdin to return true // on this.  This would allow things like cgi.rb to work properly.
DESIGN	// TODO: better error handling
DESIGN	// this seems unlikely to happen unless it's a totally bogus fileno // ...so do we even need to bother trying to create one?
DESIGN	// IN FACT, we should probably raise an error, yes?
DESIGN	// TODO: Ruby reuses this logic for other "write" behavior by checking if it's an IO and calling write again
DESIGN	// FIXME we should probably still be dyncalling 'write' here
DESIGN	// TODO: This version differs from ioctl by checking whether fcntl exists // and raising notimplemented if it doesn't; perhaps no difference for us?
DESIGN	// FIXME: I don't like the null checks here
DESIGN	// TODO: handle writing into original buffer better
DESIGN	// TODO: is this the right thing to do?
DESIGN	// TODO: This isn't an exact port of MRI's pipe behavior, so revisit
DESIGN	// FIXME: If NativeException is expected to be used from Ruby code, it should provide // a real allocator to be used. Otherwise Class.new will fail, as will marshalling. JRUBY-415
DESIGN	/* FIXME: finalizer should be dupped here */
DESIGN	/** rb_obj_id     *     * Return the internal id of an object.     *     * FIXME: Should this be renamed to match its ruby name?     */
DESIGN	// FIXME: Obvious issue that not all platforms can display all attributes.  Ugly hacks. // Using generic posix library makes pushing inspect behavior into specific system impls // rather painful.
DESIGN	// Workaround for JRUBY-4149
DESIGN	// TODO: NOT_ALLOCATABLE_ALLOCATOR may be ok here, but it's unclear how Structs // work with marshalling. Confirm behavior and ensure we're doing this correctly. JRUBY-415
DESIGN	// FIXME: This is copied code from RubyArray.  Both RE, Struct, and Array should share one impl // This is also hacky since I construct ruby objects to access ruby arrays through aref instead // of something lower.
DESIGN	// FIXME: We should not be regenerating this over and over
DESIGN	// FIXME: This is probably not very efficient, since it loads all methods for each call
DESIGN	// TODO: Consider a better way of synchronizing 
DESIGN	// FIXME: Why was this using a FullFunctionCallbackMethod before that did callSuper?
DESIGN	// A cloned method now belongs to a new class.  Set it. // TODO: Make DynamicMethod immutable
DESIGN	// FIXME: figure out why we get null sometimes
DESIGN	// FIXME: Can get optimized for IEqlNode
DESIGN	/** rb_mod_remove_cvar     *     * FIXME: any good reason to have two identical methods? (same as remove_class_variable)     */
DESIGN	// FIXME: these descriptions should probably be moved out, // to Constantine project which deals with all platform-dependent constants.
DESIGN	// TODO: what about n arg?
DESIGN	// TODO: rounding mode should not be hard-coded. See #mode.
DESIGN	// regular division with some default precision // TODO: proper algorithm to set the precision
DESIGN	// TODO: better algorithm to set precision needed
DESIGN	// FIXME: what should these really be? Numeric?       assert x instanceof RubyComplex && y instanceof RubyComplex;
DESIGN	// FIXME: what should this really be?       assert x instanceof RubyComplex;
DESIGN	// FIXME: the code below is a copy of RubyIO.puts, // and we should avoid copy-paste.
DESIGN	// Yow...this is still ugly
DESIGN	// end hack
DESIGN	//TODO: Should next and return also catch here?
DESIGN	// TODO: Generalize this type-checking code into IRubyObject helper.
DESIGN	// TODO: newTypeError does not offer enough for ruby error string...
DESIGN	// FIXME: If true array is common enough we should pre-allocate and stick somewhere
DESIGN	// TODO: This is almost RubyModule#instance_methods on the metaClass.  Perhaps refactor.
DESIGN	// The following three methods must be defined fast, since they expect to modify the current frame // (i.e. they expect no frame will be allocated for them). JRUBY-1185.
DESIGN	// FIXME: I think this chunk is equivalent to MRI id2name (and not our public method  // id2name).  Make into method if used more than once.  
DESIGN	// TODO: confirm expected args are IRubyObject (or similar)
DESIGN	// TODO: confirm expected args are IRubyObject (or similar)
DESIGN	// TODO: confirm expected args are IRubyObject (or similar)
DESIGN	// optional args, so we have IRubyObject[] // TODO: confirm
DESIGN	// TODO: Split this into two sub-classes so that name and constNode can be specified seperately.
DESIGN	// TODO: wire into new exception handling mechanism
DESIGN	// FIXME: ConstDecl could be two seperate classes (or done differently since constNode and name // never exist at the same time.
DESIGN	// TODO: do above but not below for additional newline nodes
DESIGN	// TODO: Figure out how this can happen and possibly remove
DESIGN	// TODO: At least ParserSupport.attrset passes argsNode as null.  ImplicitNil is wrong magic for  // setupArgs since it will IRubyObject[] { nil }.  So we need to figure out a nice fast // null pattern for setupArgs. // assert argsNode != null : "receiverNode is not null";
DESIGN	// FIXME: JRUBY-3188 ends up with condition returning null...quick fix until I can dig into it
DESIGN	// FIXME: I use a for block to implement END node because we need a proc which captures // its enclosing scope.   ForBlock now represents these node and should be renamed.
DESIGN	// method has more than 500 lines; we'll need to split it // and therefore need to use a heap-based scope
DESIGN	// TODO: callback for value would be more efficient, but unlikely to be a big cost (constants are rarely assigned)
DESIGN	// If it's a single-arg when but contains an array, we know it's a real literal array // FIXME: This is a gross way to figure it out; parser help similar to yield argument passing (expandArguments) would be better
DESIGN	// TODO: callback for value would be more efficient, but unlikely to be a big cost (constants are rarely assigned)
DESIGN	// XXX: const lookup can trigger const_missing; is that enough to warrant it always being executed?
DESIGN	// if body is a rescue node, inspect its pieces separately to avoid it disabling all optz // TODO: this is gross.
DESIGN	// if body is a rescue node, inspect its pieces separately to avoid it disabling all optz // TODO: this is gross.
DESIGN	// FIXME: Somehow I'd feel better if this could get the appropriate var index from the ArgumentNode
DESIGN	// TODO: This filtering is kind of gross...it would be nice to get some parser help here
DESIGN	// FIXME: Somehow I'd feel better if this could get the appropriate var index from the ArgumentNode
DESIGN	// arguments compilers always create IRubyObject[], but we want to use RubyArray.concat here; // FIXME: as a result, this is NOT efficient, since it creates and then later unwraps an array
DESIGN	// FIXME: This is temporary since the variable compilers assume we want // args already on stack for assignment. We just pop and continue with // 1.9 args logic.
DESIGN	// TODO: reads/writes from frame // TODO: information on scoping // TODO: visibility?
DESIGN	// for visibility checking without requiring frame self // TODO: don't bother passing when fcall or vcall, and adjust callsite appropriately
DESIGN	// TODO: cache?
DESIGN	// TODO: cache?
DESIGN	// index for the item // this could probably be more efficient, bailing out on assigning args past the end?
DESIGN	// if we don't have opt args, start after args (they will be assigned later) // this is for crap like def foo(a = (b = true; 1)) which numbers b before a // FIXME: only starting after required args, since opt args may access others // and rest args conflicts with compileRoot using "0" to indicate [] signature.
DESIGN	// FIXME: this really ought to be in clinit, but it doesn't matter much
DESIGN	// install invokedynamic bootstrapper // TODO need to abstract this setup behind another compiler interface
DESIGN	// FIXME: This isn't right for within ensured/rescued code
DESIGN	// SSS FIXME: Deprecated!  Going forward, all instructions should come from the CFG
DESIGN	/* SSS FIXME: Do we need to check if l is same as whatever popped? */
DESIGN	// SSS FIXME: What is the difference between ClassVarAsgnNode & ClassVarDeclNode
DESIGN	// SSS FIXME: I added this in.  Is this correct?
DESIGN	// SSS FIXME: What is the difference between ClassVarAsgnNode & ClassVarDeclNode
DESIGN	// SSS FIXME: Are we guaranteed that we splats dont head to multiple-assignment nodes!  i.e. |*(a,b)|?
DESIGN	// SSS FIXME: Can this return anything other than nil?
DESIGN	// SSS FIXME: What happens to the add class in this case??
DESIGN	// CON FIXME: I don't know how to make case be an expression...does that // logic need to go here?
DESIGN	// SSS FIXME: Where is this set up?  How is this diff from ClassVarDeclNode??
DESIGN	// SSS FIXME: Is this correct?
DESIGN	/** * SSS FIXME: Used anywhere?  I don't see calls to this anywhere    public Operand buildDAsgnAssignment(Node node, IR_Scope s) {        DAsgnNode dasgnNode = (DAsgnNode) node;        s.getVariableCompiler().assignLocalVariable(dasgnNode.getIndex(), dasgnNode.getDepth());    }**/
DESIGN	// SSS FIXME: Receiver -- this is the class meta object basically? // Operand receiver = build(defsNode.getReceiverNode(), s);
DESIGN	// self = args[0] // SSS FIXME: Verify that this is correct
DESIGN	// SSS FIXME: Is this correct?
DESIGN	// SSS FIXME: 1. Is the ordering correct? (poll before next)
DESIGN	// add a "self" recv here // TODO: is this right?
DESIGN	// SSS FIXME: Is this correctly placed ... at the end of the loop iteration?
DESIGN	// SSS FIXME: Where does this go? // m.setLinePosition(arrayNode.getPosition());
DESIGN	// SSS FIXME: I could make IR_Loop a scope too ... semantically, it is a scope, but, functionally, not sure if this is required yet ...
DESIGN	// SSS FIXME: Should this be a string literal or a string? // Dummy class for the script
DESIGN	// SSS FIXME: Does int suffice, or do we need long?
DESIGN	// SSS FIXME: Correct?  Where does closure arg come from?
DESIGN	// SSS FIXME: Should I have a reference to the IR_loop that is being retried?
DESIGN	// Simplify the variables too -- to keep these variables in sync with what is actually used in the when clauses // This is not required for correctness reasons, but only for performance reasons.
DESIGN	// SSS FIXME: This should never get called for constant svalues
DESIGN	// SSS FIXME: Should this be Operand or CompoundString? // Can it happen that symbols are built out of other than compound strings?   // Or can it happen during optimizations that this becomes a generic operand?
DESIGN	// TODO: need to get this back into the method signature...now is too late...
DESIGN	/* Hack in to replace usual readline with this */
DESIGN	// bit risky if someone changes completor, but useful for method calls
DESIGN	// FIXME:  This determine module is in a strange location and should somehow be in block
DESIGN	// Create block for this iter node // FIXME: We shouldn't use the current scope if it's not actually from the same hierarchy of static scopes
DESIGN	// we basically ignore protocol. let someone report it...
DESIGN	// Workaround for a bug in Sun's JDK 1.5.x, see // http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6303753
DESIGN	// context is null, wipe out the SoftReference (this could be done with a reference queue)
DESIGN	// FIXME we want to eliminate these type casts when possible
DESIGN	// TODO: Determine whether we should perhaps store non-singleton class // in the implementationClass
DESIGN	// FIXME: set up a CallConfiguration for this
DESIGN	// FIXME: set up a call configuration for this
DESIGN	// TODO: make this do specific-arity calling
DESIGN	// add 'new' with full signature, so it's guaranteed to be directly accessible // TODO: no need for this to be a full, formal JVM signature
DESIGN	// add method with full signature, so it's guaranteed to be directly accessible // TODO: no need for this to be a full, formal JVM signature
DESIGN	// FIXME This whole thing could probably be implemented as a module and // mixed into appropriate classes, especially if it uses either // IOInput/OutputStream or is smart about the kind of IO-like object // it's being used against.
DESIGN	// using IOInputStream may not be the most performance way, but it's easy.
DESIGN	// using IOOutputStream may not be the most performance way, but it's easy.
DESIGN	// using IOChannel may not be the most performant way, but it's easy.
DESIGN	// these extra arrays are really unfortunate; split some of these paths out to eliminate?
DESIGN	// TODO: WRONG - get interfaces from class
DESIGN	// TODO: catch exception if constant is already set by other // thread
DESIGN	// TODO: public only?
DESIGN	// see note below re: 2-field kludge
DESIGN	// TODO: protected methods.  this is going to require a rework // of some of the mechanism.
DESIGN	// TODO: protected methods.  this is going to require a rework of some of the mechanism.
DESIGN	// FIXME: do we really want 'declared' methods?  includes private/protected, and does _not_ // include superclass methods
DESIGN	// FIXME: This doesn't actually support anything but String
DESIGN	// again, shouldn't happen. TODO: might want to throw exception instead.
DESIGN	// again, shouldn't happen. TODO: might want to throw exception instead.
DESIGN	// this needs to be split, since conditional calling #inherited doesn't fit standard ruby semantics
DESIGN	// TODO: decompose getJavaPackageModule so we don't parse fullName
DESIGN	// TODO: decompose getJavaPackageModule so we don't parse fullName
DESIGN	// this covers the rare case of lower-case class names (and thus will // fail 99.999% of the time). fortunately, we'll only do this once per // package name. (and seriously, folks, look into best practices...)
DESIGN	// FIXME: we should also support orgs that use capitalized package // names (including, embarrassingly, the one I work for), but this // should be enabled by a system property, as the expected default // behavior for an upper-case value should be (and is) to treat it // as a class name, and raise an exception if it's not found 
DESIGN	// TODO: check for Java reserved names and raise exception if encountered
DESIGN	// upper-case package name // TODO: top-level upper-case package was supported in the previous (Ruby-based) // implementation, so leaving as is.  see note at #getProxyOrPackageUnderPackage // re: future approach below the top-level.
DESIGN	// FIXME: wtf is this? Why would these use the class?
DESIGN	// FIXME: needs to be rethought
DESIGN	// TODO: specifying soft refs, may want to compare memory consumption, // behavior with weak refs (specify WEAK in place of SOFT below)
DESIGN	// TODO: NOT_ALLOCATABLE_ALLOCATOR is probably ok here, since we don't intend for people to monkey with // this type and it can't be marshalled. Confirm. JRUBY-415
DESIGN	// TODO: NOT_ALLOCATABLE_ALLOCATOR is probably ok here, since we don't intend for people to monkey with // this type and it can't be marshalled. Confirm. JRUBY-415
DESIGN	// if we get here, we found a matching method, use it // TODO: choose narrowest method by continuing to search
DESIGN	// TODO: Only setAccessible to account for pattern found by // accessing constants included from a non-public interface. // (aka java.util.zip.ZipConstants being implemented by many // classes)
DESIGN	// TODO: Only setAccessible to account for pattern found by // accessing constants included from a non-public interface. // (aka java.util.zip.ZipConstants being implemented by many // classes) // TODO: not sure we need this at all, since we only expose // public fields. //field.setAccessible(true);
DESIGN	// FIXME: NOT_ALLOCATABLE_ALLOCATOR is probably not right here, since we might // eventually want JavaArray to be marshallable. JRUBY-414
DESIGN	// FIXME: do we really want 'declared' methods?  includes private/protected, and does _not_ // include superclass methods.  also, the getDeclared calls may throw SecurityException if // we're running under a restrictive security policy.
DESIGN	// don't bother to check if final method, it won't // be there (not generated, can't be!)
DESIGN	// super calls from proxies must use reflected method // FIXME: possible to make handles do the superclass call?
DESIGN	// actual type does not exactly match method return type, re-get converter // FIXME: when the only autoconversions are primitives, this won't be needed
DESIGN	// FIXME: Ideally JavaObject instances should be marshallable, which means that // the JavaObject metaclass should have an appropriate allocator. JRUBY-414
DESIGN	// FIXME: shouldn't need @__java_ovrd_methods, just query locally defined methods.
DESIGN	// We always prepend an org.jruby.proxy package to the beginning // because java and javax packages are protected and signed // jars prevent us generating new classes with those package // names. See JRUBY-2439.
DESIGN	// TODO: Only used by interface implementation; eliminate it
DESIGN	// Create block for this iter node // FIXME: We shouldn't use the current scope if it's not actually from the same hierarchy of static scopes
DESIGN	// modules are included with a shim class; we must find that shim to handle super() appropriately
DESIGN	// lame generics issues: making Segment class static and manually // inserting cache reference to work around various problems generically // referencing methods/vars across classes.
DESIGN	// entry exists, proxy doesn't match. replace. // this could happen if old proxy was gc'ed // TODO: raise exception if stored proxy is non-null? (not gc'ed)
DESIGN	// FIXME: How much more obtuse can this be? // Heredoc already parsed this and saved string...Do not parse..just return
DESIGN	// ruby constants for strings (should this be moved somewhere else?)
DESIGN	// Hacky: Advance position to eat newline here....
DESIGN	// FIXME: Not sure what the semantics of transfer are //cFiber.defineFastMethod("transfer", cb.getFastOptMethod("transfer"));
DESIGN	// ignore...bean doesn't get registered // TODO: Why does that bother me?
DESIGN	// ignore...bean doesn't get registered // TODO: Why does that bother me?
DESIGN	// ENEBO: Totally weird naming (in MRI is not allocated and is a local var name)
DESIGN	// FIXME: Remove this from grammars.
DESIGN	/* FIXME: Consider fixing node_assign itself rather than single case*/
DESIGN	/* Workaround for JRUBY-2326 (MRI does not enter this production for some reason)*/
DESIGN	/* FIXME: lose syntactical elements here (and others like this)*/
DESIGN	/* ENEBO: Lots of optz in 1.9 parser here*/
DESIGN	// This is perhaps innefficient timewise?  Optimal spacewise
DESIGN	// This is a dummy scope; we should find a way to make that more explicit
DESIGN	// We clone dynamic scope because this will be a new instance of a block.  Any previously // captured instances of this block may still be around and we do not want to start // overwriting those values when we create a new one. // ENEBO: Once we make self, lastClass, and lastMethod immutable we can remove duplicate
DESIGN	// TODO: This probably isn't the best hack, but it works until we can have different // root frame setup for 1.9 easily.
DESIGN	// FIXME: This is currently only here because of some problems with IOOutputStream writing to a "bare" runtime without a proper scope
DESIGN	// FIXME: I think we need these pushed somewhere?
DESIGN	// FIXME: This is currently only here because of some problems with IOOutputStream writing to a "bare" runtime without a proper scope
DESIGN	// FIXME: This is currently only here because of some problems with IOOutputStream writing to a "bare" runtime without a proper scope
DESIGN	// XXX: Again, screwy evaling under previous frame's scope
DESIGN	/** * FIXME: This version is faster than the previous, but both suffer from a * crucial flaw: It is impossible to create an ObjectSpace with an iterator * that doesn't either: a. hold on to objects that might otherwise be collected * or b. have no way to guarantee that a call to hasNext() will be correct or * that a subsequent call to next() will produce an object. For our purposes, * for now, this may be acceptable. */
DESIGN	// FIXME: Maybe not best place, but move it to a good home
DESIGN	// FIXME: This is gross. Don't do this.
DESIGN	/** * * @author headius * FIXME convert to enum ? */
DESIGN	// FIXME: No, I don't like it.
DESIGN	// TODO: This is probably BAD...
DESIGN	// FIXME: not very efficient
DESIGN	// invoke callMethodMissing method directly // TODO: this could be further optimized, since some DSLs hit method_missing pretty hard...
DESIGN	// TODO this is really ineffient, and potentially a problem everytime anyone require's something. // we should try to make LoadPath a special array object.
DESIGN	// FIXME: inefficient; constructing a bignum just for dumping?
DESIGN	// FIXME: not very efficient
DESIGN	// FIXME: not very efficient
DESIGN	// FIXME: not very efficient
DESIGN	// FIXME: not very efficient
DESIGN	// FIXME: this should go somewhere more generic -- maybe IdUtil
DESIGN	// FIXME: potentially could just use ByteList here?
DESIGN	// FIXME: This is almost entirely duplicated from Main.java
DESIGN	// TODO: factor this chunk as in MRI/YARV GETASTER
DESIGN	// TODO: factor this chunk as in MRI/YARV GETASTER
DESIGN	// grrr, arghh, want to subclass sun.misc.FloatingDecimal, but can't, // so we must do all this (the next 70 lines of code), which has already // been done by FloatingDecimal.
DESIGN	// it would be nice (and logical!) if exponent form  // behaved like E/e, and decimal form behaved like f, // but no such luck. hence: 
DESIGN	// This is GROSS, but Java API's aren't ISO 8601 compliant at all
DESIGN	// This is GROSS, but Java API's aren't ISO 8601 compliant at all
DESIGN	// TODO: get rid of this (lax returns 0.0, strict will throw)
DESIGN	// TODO: turn off the negative? will return -0.0 in lax mode
DESIGN	// FIXME: this probably belongs in a different package.
DESIGN	// TODO: It would be nice to throw a better error for this
DESIGN	// TODO: It would be nice to throw a better error for this
DESIGN	// FIXME: I don't like this
DESIGN	// TODO: It's perhaps just a coincidence that all the channels for // which we should raise are instanceof SelectableChannel, since // stdio is not...so this bothers me slightly. -CON
DESIGN	// FIXME: Clearing read buffer here...is this appropriate?
DESIGN	// TODO this should entry into error handling somewhere
DESIGN	// FIXME: This worries me a bit, since it could allocate a lot with a large newLength
DESIGN	// We use a highly uncommon string to represent the paragraph delimiter (100% soln not worth it) 
DESIGN	// TODO: Ruby does not seem to care about invalid numeric mode values // I am not sure if ruby overflows here also...
DESIGN	// TODO: Make this more intelligible value
DESIGN	// XXX: do something?
DESIGN	// for visibility checking without requiring frame self // TODO: don't bother passing when fcall or vcall, and adjust callsite appropriately
DESIGN	// for visibility checking without requiring frame self // TODO: don't bother passing when fcall or vcall, and adjust callsite appropriately
DESIGN	// up to ten, stuff into tmp locals, load in reverse order, and assign // FIXME: There's probably a slightly smarter way, but is it important?
DESIGN	// index for the item // this could probably be more efficient, bailing out on assigning args past the end?
DESIGN	// if we don't have opt args, start after args (they will be assigned later) // this is for crap like def foo(a = (b = true; 1)) which numbers b before a // FIXME: only starting after required args, since opt args may access others // and rest args conflicts with compileRoot using "0" to indicate [] signature.
DESIGN	// SSS FIXME: These should get normally compiled or initialized some other way ...  // SSS FIXME: Parent/super-type info is incorrect! // These are just placeholders for now .. this needs to be updated with *real* class objects later!
DESIGN	// SSS FIXME: Move this code to some utils area .. or probably there is already a method for this in some jruby utils class // Holy cow!  Just to append two darned arrays!
DESIGN	// SSS FIXME: This method (at least in the context of multiple assignment) is a little weird. // It calls regular to_ary on the object.  But, if it encounters a method_missing, the value // is inserted into an 1-element array! // try "a,b,c = 1" first; then define Fixnum.to_ary method and try it again. // Ex: http://gist.github.com/163551
DESIGN	// This is for JRUBY-2988, since after a suspend the terminal seems // to need to be reinitialized. Since we can't easily detect suspension, // initialize after every readline. Probably not fast, but this is for // interactive terminals anyway...so who cares?
DESIGN	// set up a field for the CacheEntry // TODO: make this an array so it's not as much class metadata; similar to AbstractScript stuff
DESIGN	// exit monitor before making call // FIXME: this not being in a finally is a little worrisome
DESIGN	// FIXME: Added this because marshal_spec seemed to reconstitute objects without calling dataWrapStruct // this resulted in object being null after unmarshalling...
DESIGN	// if we get here, we found a matching method, use it // TODO: choose narrowest method by continuing to search
DESIGN	// We clone dynamic scope because this will be a new instance of a block.  Any previously // captured instances of this block may still be around and we do not want to start // overwriting those values when we create a new one. // ENEBO: Once we make self, lastClass, and lastMethod immutable we can remove duplicate
DESIGN	// TODO: This is actually now returning the scope of whoever called Method#to_proc // which is obviously wrong; but there's no scope to provide for many methods. // It fixes JRUBY-2237, but needs a better solution.
DESIGN	// FIXME: We should be getting this from the runtime rather than assume none? //return runtime.getEncodingService().getEncoding(runtime.getDefaultExternalEncoding());
DESIGN	// ignore...bean doesn't get registered // TODO: Why does that bother me?
DESIGN	// This is a fairly specific hack for empty string, but it does the job
DESIGN	// XXX This constructor is a hack to implement the __END__ syntax. //     Converting a reader back into an InputStream doesn't generally work.
DESIGN	// FIXME:  Total hack to get flash in Rails marshalling/unmarshalling in session ok...We need // to totally change marshalling to work with overridden core classes.
DESIGN	// FIXME: This is an ugly hack to resolve JRUBY-1381; I'm not proud of it
DESIGN	// We're not setting the provider or anything, but it seems that BouncyCastle does some internal things in its // provider's constructor which require it to be executed in a secure context. // Ideally this hack should be removed. See JRUBY-3919 and this BC bug: //   http://www.bouncycastle.org/jira/browse/BJA-227
DESIGN	// FIXME: Big fat hack here, because scope names are expected to be interned strings by the parser
DESIGN	// FIXME: Big fat hack here, because scope names are expected to be interned strings by the parser
DESIGN	// hack to get right style for input
DESIGN	// Object#to_a is obsolete.  We match Ruby's hack until to_a goes away.  Then we can  // remove this hack too.
DESIGN	// small hack to save a cast later on
DESIGN	// temporary hack to handle non-Ruby values // will come up with better solution shortly
DESIGN	// Object#to_a is obsolete.  We match Ruby's hack until to_a goes away.  Then we can  // remove this hack too.
DESIGN	// HACK: in order to have stdout/err act like ttys and flush always, // we set anything assigned to stdout/stderr to sync
DESIGN	// HACK: force clinit to be created
DESIGN	// FIXME: This is pretty gross; we should have a cleaner initialization // that doesn't depend on package-visible fields and ideally is atomic, // probably using an immutable structure we replace all at once. // lazy, null when no groups defined
DESIGN	// TODO: should probably apply the null object pattern for a // non-allowed class, rather than null
DESIGN	// TODO: set our metaclass to target's class (i.e. scary!)
DESIGN	// TODO: confirm expected args are IRubyObject (or similar)
DESIGN	// ignore...bean doesn't get registered // TODO: Why does that bother me?
DESIGN	// optional args, so we have IRubyObject[] // TODO: confirm
DESIGN	// not intended to be called directly by users (private) // OLD TODO from Ruby code: // This should be implemented in JavaClass.java, where we can // check for reserved Ruby names, conflicting methods, etc.
DESIGN	// TODO? I think this ends up propagating from normal Java exceptions // sys_fail(openFile.getPath())
DESIGN	// TODO: Make callCoerced work in block context...then fix downto, step, and upto.
DESIGN	// TODO: the rest of this...seeking to same position is unnecessary since we share a channel // but some of this may be needed?
DESIGN	// TODO: This version differs from ioctl by checking whether fcntl exists // and raising notimplemented if it doesn't; perhaps no difference for us?
DESIGN	// FIXME this below is temporary, but its much safer for COW (it prevents not shared Strings with begin != 0) // this allows now e.g.: ByteList#set not to be begin aware
DESIGN	// ignore; job was cancelled // FIXME: Is this ok?
DESIGN	// TODO: // MRI behavior: Call "+" or "add", depending on the call. // But this leads to exceptions when Floats are added. See: // http://blade.nagaokaut.ac.jp/cgi-bin/scat.rb/ruby/ruby-core/17374 // return callCoerced(context, op, b, true); -- this is MRI behavior. // We'll use ours for now, thus providing an ability to add Floats.
DESIGN	// Must be called from main thread (it is currently, but this bothers me)
DESIGN	// TODO: wire into new exception handling mechanism
DESIGN	// TODO: NOT_ALLOCATABLE_ALLOCATOR is probably ok here, since we don't intend for people to monkey with // this type and it can't be marshalled. Confirm. JRUBY-415
DESIGN	// TODO: NOT_ALLOCATABLE_ALLOCATOR is probably ok here. Confirm. JRUBY-415
DESIGN	// TODO: NOT_ALLOCATABLE_ALLOCATOR is probably ok here. Confirm. JRUBY-415
DESIGN	// TODO: NOT_ALLOCATABLE_ALLOCATOR is probably ok here. Confirm. JRUBY-415
DESIGN	// FIXME: Determine if a real allocator is needed here. Do people want to extend // JavaClass? Do we want them to do that? Can you Class.new(JavaClass)? Should // you be able to? // TODO: NOT_ALLOCATABLE_ALLOCATOR is probably ok here, since we don't intend for people to monkey with // this type and it can't be marshalled. Confirm. JRUBY-415
DESIGN	// SSS FIXME: Token can be final for a method -- implying that the token is only for this particular implementation of the method // But, if the mehod is modified, we create a new method object which in turn gets a new token.  What makes sense??  Intuitively, // it seems the first one ... but let us see ... // Current code version token for this method -- can change during execution as methods get redefined!
DESIGN	// FIXME weakref.rb also does caller(2) here for the backtrace
DESIGN	// FIXME: bit of a kludge here (non-interface classes assigned to both // class and module fields). simplifies proxy extender code, will go away // when JI is overhauled (and proxy extenders are deprecated).
DESIGN	// There's not a compelling reason to keep JavaClass instances in a weak map // (any proxies created are [were] kept in a non-weak map, so in most cases they will // stick around anyway), and some good reasons not to (JavaClass creation is // expensive, for one; many lookups are performed when passing parameters to/from // methods; etc.). // TODO: faster custom concurrent map
DESIGN	// TODO: we should be able to optimize this quite a bit post-1.0.  JavaClass already // has all the methods organized by method name; the next version (supporting protected // methods/fields) will have them organized even further. So collectMethods here can // just lookup the overridden methods in the JavaClass map, should be much faster.
DESIGN	/* FIXME: finalizer should be dupped here */
DESIGN	// FIXME: null check is removable once we figure out how to assign to unset named block args
DESIGN	/** rb_obj_id     *     * Return the internal id of an object.     *     * FIXME: Should this be renamed to match its ruby name?     */
DESIGN	// TODO: Bleeding runtime into parser.  Arity may be should be in parser (to keep bleeding oneway)
DESIGN	// SSS FIXME: Maybe this is not really a concern after all ... // Nesting level of this scope in the lexical nesting of scopes in the current file -- this is not to be confused // with semantic nesting of scopes across files. // // Consider this code in a file f // class M1::M2::M3::C  //   ... // end // // So, C is at lexical nesting level of 1 (the file script is at 0) in the file 'f' // Semantically it is at level 3 (M1, M2, M3 are at 0,1,2). // // This is primarily used to ensure that variable names don't clash! // i.e. definition of %v_1 in a closure shouldn't override the use of %v_1 from the parent scope! //    private int _lexicalNestingLevel;
DESIGN	// Sometimes the value can be retrieved at "compile time".  If we succeed, nothing like it!   // We might not .. for the following reasons: // 1. The constant is missing, // 2. The reference is a forward-reference, // 3. The constant's value is only known at run-time on first-access (but, this is runtime, isn't it??) // 4. Our compiler isn't able to right away infer that this is a constant. // // SSS FIXME: // 1. The operand can be a literal array, range, or hash -- hence Operand //    because Array, Range, and Hash derive from Operand and not Constant ... //    Is there a way to fix this impedance mismatch? // 2. It should be possible to handle the forward-reference case by creating a new //    ForwardReference operand and then inform the scope of the forward reference //    which the scope can fix up when the reference gets defined.  At code-gen time, //    if the reference is unresolved, when a value is retrieved for the forward-ref //    and we get a null, we can throw a ConstMissing exception!  Not sure! //
DESIGN	// Reset value map if this instruction is the start/end of a basic block // // Right now, calls are considered hard boundaries for optimization and // information cannot be propagated across them! // // SSS FIXME: Rather than treat all calls with a broad brush, what we need // is to capture different attributes about a call : //   - uses closures //   - known call target //   - can modify scope, //   - etc. // // This information is probably already present in the AST Inspector
DESIGN	// FIXME: legal here? may want UnsupportedOperationException
DESIGN	// XXX: This check previously used callMethod("==") to check for equality between classes // when scanning the hierarchy. However the == check may be safe; we should only ever have // one instance bound to a given type/constant. If it's found to be unsafe, examine ways // to avoid the == call.
DESIGN	// end hack
DESIGN	// if not overloaded, we add a method that guesses at which signature to use // TODO: just adding first one right now...add in signature-guessing logic
DESIGN	// FIXME: This is an ugly hack to resolve JRUBY-1381; I'm not proud of it
DESIGN	/*         * TODO: This version is better than the hackish previous one. Windows         *       behavior needs to be defined though. I suppose this version         *       could be improved more too.         * TODO: /etc/passwd is also inadequate for MacOSX since it does not         *       use /etc/passwd for regular user accounts         */
DESIGN	//TODO: Should next and return also catch here?
DESIGN	// Let's only generate methods for those the user may actually  // intend to override.  That includes any defined in the current // class, and any ancestors that are also JavaProxyClasses (but none // from any other ancestor classes). Methods defined in mixins will // be considered intentionally overridden, except those from Kernel, // Java, and JavaProxyMethods, as well as Enumerable.  // TODO: may want to exclude other common mixins?
DESIGN	/* FIXME: Consider fixing node_assign itself rather than single case*/
DESIGN	/* Workaround for JRUBY-2326 (MRI does not enter this production for some reason)*/
DESIGN	// FIXME: We should really not be creating the dynamic scope for the root // of the AST before parsing.  This makes us end up needing to readjust // this dynamic scope coming out of parse (and for local static scopes it // will always happen because of $~ and $_). // FIXME: Because we end up adjusting this after-the-fact, we can't use // any of the specific-size scopes.
DESIGN	/* FIXME: Resolve what the hell is going on*/
DESIGN	// This is perhaps innefficient timewise?  Optimal spacewise
DESIGN	// If variables were added then we may need to grow the dynamic scope to match the static // one. // FIXME: Make this so we only need to check this for blockScope != null.  We cannot // currently since we create the DynamicScope for a LocalStaticScope before parse begins. // Refactoring should make this fixable.
DESIGN	// FIXME: This is currently only here because of some problems with IOOutputStream writing to a "bare" runtime without a proper scope
DESIGN	// FIXME: This is currently only here because of some problems with IOOutputStream writing to a "bare" runtime without a proper scope
DESIGN	// we're depending on the side effect of the load, which loads the class but does not turn it into a script // I don't like it, but until we restructure the code a bit more, we'll need to quietly let it by here.
DESIGN	// TODO: for now, we use a faithful // reimplementation of MRI's algorithm, // but should use UTF8Encoding facilities // from Joni, once it starts prefroming // UTF-8 content validation. 
DESIGN	/**     * Process streams get Channel.newChannel()ed into FileChannel but are not actually     * seekable. So instead of just the isSeekable check doing instanceof FileChannel,     * we must also add this boolean to check, which we set to false when it's known     * that the incoming channel is from a process.     *      * FIXME: This is gross, and it's NIO's fault for not providing a nice way to     * tell if a channel is "really" seekable.     */
WITHOUT_CLASSIFICATION	//???
WITHOUT_CLASSIFICATION	/*     * Class to be used to create the Method.     * Will be non-null if either Class or Object was provided during construction.     *     *  Can be used instead of invokee, e.g. when using interfaces.    */
WITHOUT_CLASSIFICATION	// If invokee was provided, then clazz has been set up
WITHOUT_CLASSIFICATION	// Now eliminate any classpath entries that do not "match" the search
WITHOUT_CLASSIFICATION	/*     * Finds all classes that extend the classes in the listSuperClasses     * ArrayList, searching in the listAllClasses ArrayList.     *     * @param superClasses     *            the base classes to find subclasses for     * @param listAllClasses     *            the collection of classes to search in     * @param innerClasses     *            indicate whether to include inner classes in the search     * @return ArrayList of the subclasses     */
WITHOUT_CLASSIFICATION	/*     * Finds all classes that extend the class, searching in the listAllClasses     * ArrayList.     *     * @param theClass     *            the parent class     * @param listAllClasses     *            the collection of classes to search in     * @param listSubClasses     *            the collection of discovered subclasses     * @param innerClasses     *            indicates whether inners classes should be included in the     *            search     */
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// THREAD PROPERTIES
WITHOUT_CLASSIFICATION	// NUMBER OF THREADS
WITHOUT_CLASSIFICATION	// RAMP-UP
WITHOUT_CLASSIFICATION	// LOOP COUNT
WITHOUT_CLASSIFICATION	// mainPanel.add(threadPropsPanel, BorderLayout.NORTH); // add(mainPanel, BorderLayout.CENTER);
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// Sampler error action buttons
WITHOUT_CLASSIFICATION	// Defaults to continue
WITHOUT_CLASSIFICATION	/*     * ------------------------------------------------------------------------     * Fields     * ------------------------------------------------------------------------     */
WITHOUT_CLASSIFICATION	// ------------------------------------------- // Methods // -------------------------------------------
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	/*-------------------------------------------------------------------------     * Methods implemented from org.xml.sax.ContentHandler     *----------------------------------------------------------------------- */
WITHOUT_CLASSIFICATION	// An additional note on using HashSets to store URLs: I just // discovered that obtaining the hashCode of a java.net.URL implies // a domain-name resolution process. This means significant delays // can occur, even more so if the domain name is not resolvable. // Whether this can be a problem in practical situations I can't tell, // but // thought I'd keep a note just in case... // BTW, note that using a List and removing duplicates via scan // would not help, since URL.equals requires name resolution too. // The above problem has now been addressed with the URLString and // URLCollection classes.
WITHOUT_CLASSIFICATION	/*     * A dummy class to pass the pointer of URL.     */
WITHOUT_CLASSIFICATION	// Now parse the DOM tree
WITHOUT_CLASSIFICATION	// Clear maps
WITHOUT_CLASSIFICATION	// Defaults
WITHOUT_CLASSIFICATION	// If it was a HTTP GET request, then all parameters in the URL // has been handled by the sampler.setPath above, so we just need // to do parse the rest of the request if it is not a GET request
WITHOUT_CLASSIFICATION	// Check if it was a multipart http post request
WITHOUT_CLASSIFICATION	// Get the post data using the content encoding of the request
WITHOUT_CLASSIFICATION	// we start to iterate through the elements
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// synchronize with FixedQueueExecutor
WITHOUT_CLASSIFICATION	// JMSMessageID cannot be null
WITHOUT_CLASSIFICATION	//++ These are JMX file names and must not be changed //$NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	//+JMX file attribute names - do not change any values! // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// This will only work with an Applet .class file. // Ideally, this should be upgraded to work with Objects (IE) // and archives (.jar and .zip) files as well.
WITHOUT_CLASSIFICATION	// Instantiate the sampler
WITHOUT_CLASSIFICATION	// OK, because find only returns correct element types
WITHOUT_CLASSIFICATION	// Property was found in a config element. Whether or not // it matched the value in the sampler, we're done with // this property -- don't look at lower-priority configs:
WITHOUT_CLASSIFICATION	// HashMap to save ssl connection between Jmeter proxy and browser
WITHOUT_CLASSIFICATION	// get the component parts // Assume domains must have at least 2 parts, e.g. apache.org // Don't try matching against *.org; however we don't check *.co.uk here
WITHOUT_CLASSIFICATION	// Check if we found an accept-charset attribute on the form
WITHOUT_CLASSIFICATION	/* The next line looks odd, but proxied HTTP requests look like:         * GET http://www.apache.org/foundation/ HTTP/1.1         * i.e. url starts with "http:", not "/"         * whereas HTTPS proxy requests look like:         * CONNECT www.google.co.uk:443 HTTP/1.1         * followed by         * GET /?gws_rd=cr HTTP/1.1         */
WITHOUT_CLASSIFICATION	/*         * A HTTP RESPONSE HEADER LOOKS ALOT LIKE:         *         * HTTP/1.0 200 OK Date: Wednesday, 02-Feb-94 23:04:12 GMT Server:         * NCSA/1.1 MIME-version: 1.0 Last-modified: Monday, 15-Nov-93 23:33:16         * GMT Content-Type: text/html Content-Length: 2345 \r\n         */
WITHOUT_CLASSIFICATION	// Count the retries as well in the time
WITHOUT_CLASSIFICATION	// for result
WITHOUT_CLASSIFICATION	// Make sure the sample start time and sample end time are recorded // in order not to confuse the statistics calculation methods: if //  an error occurs and an exception is thrown it is possible that // the result.sampleStart() or result.sampleEnd() won't be called
WITHOUT_CLASSIFICATION	// We've finished with the request, so we can add the LocalAddress to it for display
WITHOUT_CLASSIFICATION	// Handle the various methods
WITHOUT_CLASSIFICATION	// Set up the local address if one exists
WITHOUT_CLASSIFICATION	// a well-behaved browser is supposed to send 'Connection: close' // with the last request to an HTTP server. Instead, most browsers // leave it to the server to close the connection after their // timeout period. Leave it to the JMeter user to decide.
WITHOUT_CLASSIFICATION	// encoding does not really matter here
WITHOUT_CLASSIFICATION	// Add any files // Cannot retrieve parts once added to the MultiPartEntity, so have to save them here.
WITHOUT_CLASSIFICATION	// We get the posted bytes using the encoding used to create it
WITHOUT_CLASSIFICATION	// In a post request which is not multipart, we only support // parameters, no file upload is allowed
WITHOUT_CLASSIFICATION	// Just append all the parameter values, and use that as the post body
WITHOUT_CLASSIFICATION	// Allow the mimetype of the file to control the content type // This is not obvious in GUI if you are not uploading any files, // but just sending the content of nameless parameters
WITHOUT_CLASSIFICATION	// Allow the mimetype of the file to control the content type // This is not obvious in GUI if you are not uploading any files, // but just sending the content of nameless parameters
WITHOUT_CLASSIFICATION	// We use the encoding which should be used according to the HTTP spec, which is UTF-8
WITHOUT_CLASSIFICATION	/*             * N.B. Revision 323346 introduced the ClassCast check, but then used iter.next()             * to fetch the item to be cast, thus skipping the element that did not cast.             * Reverted to work more like the original code, but with the check in place.             * Added a warning message so can track whether it is necessary             */
WITHOUT_CLASSIFICATION	// Don't break the world just because this failed:
WITHOUT_CLASSIFICATION	// if concurrent download emb. resources, add to a list for async gets later
WITHOUT_CLASSIFICATION	// Thread pool Executor to get resources  // use a LinkedBlockingQueue, note: max pool size doesn't effect
WITHOUT_CLASSIFICATION	// The following three can be discussed: should they be from the // first request or from the final one? I chose to do it this way // because that's what browsers do: they show the final URL of the // redirect chain in the location field.
WITHOUT_CLASSIFICATION	// Commons HttpClient only
WITHOUT_CLASSIFICATION	// Set the content length
WITHOUT_CLASSIFICATION	// Make the connection ready for sending post data
WITHOUT_CLASSIFICATION	// Check if target of merge is reasonable
WITHOUT_CLASSIFICATION	// We must ask the user if it is ok to close current project // i.e. it is OPEN
WITHOUT_CLASSIFICATION	// don't change name if merging
WITHOUT_CLASSIFICATION	// Allow for missing optional jars
WITHOUT_CLASSIFICATION	// Does not appear to be used externally; called by #loadProjectFile()
WITHOUT_CLASSIFICATION	// convertTree(tree);
WITHOUT_CLASSIFICATION	// If we are loading a new test plan, initialize the tree with the testplan node we are loading
WITHOUT_CLASSIFICATION	// These are handled specially by addToTree
WITHOUT_CLASSIFICATION	// Document doc = null;
WITHOUT_CLASSIFICATION	// write to file
WITHOUT_CLASSIFICATION	// Make the connection ready for sending post data
WITHOUT_CLASSIFICATION	// Make the connection ready for sending post data
WITHOUT_CLASSIFICATION	/*     * @see org.apache.jmeter.gui.action.Command#getActionNames()     */
WITHOUT_CLASSIFICATION	// boolean toReturn = true;
WITHOUT_CLASSIFICATION	// don't automatically expand when merging
WITHOUT_CLASSIFICATION	//+JMX file attributes - do not change values! // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ //-JMX file attributes
WITHOUT_CLASSIFICATION	// Called by JMeter#startGui()
WITHOUT_CLASSIFICATION	// no error as default
WITHOUT_CLASSIFICATION	// Helper method to simplify code
WITHOUT_CLASSIFICATION	// one builder for all requests in a thread
WITHOUT_CLASSIFICATION	// but we do trap this error to make tests work better
WITHOUT_CLASSIFICATION	// may well happen
WITHOUT_CLASSIFICATION	// should never happen
WITHOUT_CLASSIFICATION	// Note: initialised with error = failure = false
WITHOUT_CLASSIFICATION	// HC3.1 does not have the method
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// should never happen
WITHOUT_CLASSIFICATION	// means counting from end
WITHOUT_CLASSIFICATION	// No point continuing // Mainly for bsh.EvalError
WITHOUT_CLASSIFICATION	// create a parser:
WITHOUT_CLASSIFICATION	// doc =
WITHOUT_CLASSIFICATION	// if everything went fine then xml schema validation is valid
WITHOUT_CLASSIFICATION	// Only set message if error not yet flagged
WITHOUT_CLASSIFICATION	// Helper method to construct SAX error details
WITHOUT_CLASSIFICATION	/*         * Can be caused by: - failure to read XSD file - xml does not match XSD         */
WITHOUT_CLASSIFICATION	/*         * Can be caused by: - premature end of file - non-whitespace content         * after trailer         */
WITHOUT_CLASSIFICATION	// * Static int to signify the type of logical comparitor to assert
WITHOUT_CLASSIFICATION	// is the Sample the correct size?
WITHOUT_CLASSIFICATION	// $NON-NLS-1$  // $NON-NLS-2$
WITHOUT_CLASSIFICATION	// Use the name of the test element, otherwise cannot enable/disable debug from the GUI
WITHOUT_CLASSIFICATION	// $NON-NLS-1$  // $NON-NLS-2$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// the signer certificate
WITHOUT_CLASSIFICATION	/*     * @param response @return     */
WITHOUT_CLASSIFICATION	// has the Sample lasted too long?
WITHOUT_CLASSIFICATION	// ensure the manager is initialised // we don't currently need to do anything further, as this sets the default https protocol
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ $NON-NLS-2$ $NON-NLS-3$ //$NON-NLS-1$ $NON-NLS-2$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$ // These are the names of the get/set methods
WITHOUT_CLASSIFICATION	// no point in checking if we don't have anything to compare against
WITHOUT_CLASSIFICATION	// no error as default
WITHOUT_CLASSIFICATION	// create parser
WITHOUT_CLASSIFICATION	// String md5Result = DigestUtils.md5Hex(resultData);
WITHOUT_CLASSIFICATION	// evaluate result
WITHOUT_CLASSIFICATION	// package protected so can be accessed by test class
WITHOUT_CLASSIFICATION	// return with an error
WITHOUT_CLASSIFICATION	// These constants are used both for the JMX file and for the setters/getters // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// return with an error
WITHOUT_CLASSIFICATION	// flush
WITHOUT_CLASSIFICATION	/*         * Run tidy.         */
WITHOUT_CLASSIFICATION	// return with no error
WITHOUT_CLASSIFICATION	// write output to file
WITHOUT_CLASSIFICATION	// return with no error
WITHOUT_CLASSIFICATION	// check if filename defined
WITHOUT_CLASSIFICATION	// close file
WITHOUT_CLASSIFICATION	// open file
WITHOUT_CLASSIFICATION	//"" is not the same as no realm
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// no error as default
WITHOUT_CLASSIFICATION	// Mask should contain all types (but not NOT)
WITHOUT_CLASSIFICATION	// The string to check (Url or data)
WITHOUT_CLASSIFICATION	// Allow testing of failure codes
WITHOUT_CLASSIFICATION	// What are we testing against?
WITHOUT_CLASSIFICATION	// Assume it is the URL
WITHOUT_CLASSIFICATION	// Assume it is the URL
WITHOUT_CLASSIFICATION	// do it once outside loop
WITHOUT_CLASSIFICATION	// Not should always succeed against an empty result
WITHOUT_CLASSIFICATION	// Get the Matcher for this thread
WITHOUT_CLASSIFICATION	// should never happen...
WITHOUT_CLASSIFICATION	//+ JMX file attributes // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ //- JMX file attributes
WITHOUT_CLASSIFICATION	// reset the bsh.Interpreter before each execution
WITHOUT_CLASSIFICATION	// script file name (if present)
WITHOUT_CLASSIFICATION	// parameters to pass to script file (or script)
WITHOUT_CLASSIFICATION	// script area
WITHOUT_CLASSIFICATION	// Don't let the input field shrink too much
WITHOUT_CLASSIFICATION	/*     * Send POST data from <code>Entry</code> to the open connection.     *     * @param connection     *            <code>URLConnection</code> where POST data should be sent     * @return a String show what was posted. Will not contain actual file upload content     * @exception IOException     *                if an I/O exception occurs     */
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	// file panel //$NON-NLS-1$ //$NON-NLS-2$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	// Assume it is the URL
WITHOUT_CLASSIFICATION	// USER_INPUT
WITHOUT_CLASSIFICATION	// class attributes
WITHOUT_CLASSIFICATION	// USER_INPUT
WITHOUT_CLASSIFICATION	// USER_INPUT
WITHOUT_CLASSIFICATION	// USER_INPUT
WITHOUT_CLASSIFICATION	// doctype
WITHOUT_CLASSIFICATION	// doctype
WITHOUT_CLASSIFICATION	// Names for the fields // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// instance attributes
WITHOUT_CLASSIFICATION	// format (HMTL, XHTML, XML)
WITHOUT_CLASSIFICATION	// errors only
WITHOUT_CLASSIFICATION	// thresholds
WITHOUT_CLASSIFICATION	// NOOP
WITHOUT_CLASSIFICATION	// NOOP
WITHOUT_CLASSIFICATION	// NOOP
WITHOUT_CLASSIFICATION	// Drop the last character:
WITHOUT_CLASSIFICATION	// store the operator
WITHOUT_CLASSIFICATION	// default
WITHOUT_CLASSIFICATION	// Put the check boxes in a column in a panel
WITHOUT_CLASSIFICATION	/* Implements JMeterGUIComponent.createTestElement() */
WITHOUT_CLASSIFICATION	/* Implements JMeterGUIComponent.modifyTestElement(TestElement) */
WITHOUT_CLASSIFICATION	// Assume URL
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	// USER_INPUT
WITHOUT_CLASSIFICATION	// USER_INPUT
WITHOUT_CLASSIFICATION	// initialize to empty string, this will fail the assertion
WITHOUT_CLASSIFICATION	// md5HexInput.addFocusListener(this);
WITHOUT_CLASSIFICATION	/*     * @return     */
WITHOUT_CLASSIFICATION	// Should Tidy be quiet?
WITHOUT_CLASSIFICATION	/*     * @param element     */
WITHOUT_CLASSIFICATION	// Should we download external DTDs?
WITHOUT_CLASSIFICATION	// Called by XPathAssertionGui
WITHOUT_CLASSIFICATION	// Report Tidy errors as Assertion failure?
WITHOUT_CLASSIFICATION	// Process tolerant settings
WITHOUT_CLASSIFICATION	// Show Tidy warnings ?
WITHOUT_CLASSIFICATION	// Called by XPathAssertionGui
WITHOUT_CLASSIFICATION	// Non-Tidy options
WITHOUT_CLASSIFICATION	// Tidy options
WITHOUT_CLASSIFICATION	// Called by XPathExtractorGui
WITHOUT_CLASSIFICATION	// Called by XPathExtractorGui
WITHOUT_CLASSIFICATION	/*             * samp.setDomain(this.getDomain()); samp.setPort(this.getPort());             */
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// panel.add(signerCheckByFile);
WITHOUT_CLASSIFICATION	// Access needed from CSVDataSet
WITHOUT_CLASSIFICATION	// Store the resource keys
WITHOUT_CLASSIFICATION	// default (e.g. if test plan does not have definition)
WITHOUT_CLASSIFICATION	/*     *  N.B. this class is shared between threads (NoThreadClone) so all access to variables     *  needs to be protected by a lock (either sync. or volatile) to ensure safe publication.     */
WITHOUT_CLASSIFICATION	// This class is not cloned per thread, so this is shared
WITHOUT_CLASSIFICATION	// Used for per-thread/user numbers // Cannot be static, as random numbers are not to be shared between instances
WITHOUT_CLASSIFICATION	/*     * nextInt(n) returns values in the range [0,n),     * so n must be set to max-min+1     */
WITHOUT_CLASSIFICATION	// This can overflow
WITHOUT_CLASSIFICATION	// This is used as an error indicator
WITHOUT_CLASSIFICATION	// check for overflow too
WITHOUT_CLASSIFICATION	// Cannot use getThreadContext() as we are not cloned per thread
WITHOUT_CLASSIFICATION	// Use format to create number; if it fails, use the default
WITHOUT_CLASSIFICATION	// The original name of the property
WITHOUT_CLASSIFICATION	// variables are unlikely to contain spaces, so most likely a translation
WITHOUT_CLASSIFICATION	// reset the value
WITHOUT_CLASSIFICATION	// user-specified key
WITHOUT_CLASSIFICATION	// treat the same as EOF
WITHOUT_CLASSIFICATION	// i.e. EOF
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ $NON-NLS-2$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$       
WITHOUT_CLASSIFICATION	// N.B. Must be in this class for the TestBean code to work
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// Allow for missing optional jars
WITHOUT_CLASSIFICATION	// NOOP
WITHOUT_CLASSIFICATION	// NOOP
WITHOUT_CLASSIFICATION	// These variable names must have .displayName properties and agree with the getXXX()/setXXX() methods // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// These group names must have .displayName properties // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	//if we found a TestPlan, then we are on our way to the TestFragment
WITHOUT_CLASSIFICATION	// only try to load the JMX test plan if there is one
WITHOUT_CLASSIFICATION	// filter the tree for a TestFragment.
WITHOUT_CLASSIFICATION	// ensure counts are updated correctly
WITHOUT_CLASSIFICATION	// These items are shared between threads in a group by the clone() method // They are initialised by testStarted() so don't need to be serialised
WITHOUT_CLASSIFICATION	// TODO ?? (JMeterTreeNode) selectedNode.clone();
WITHOUT_CLASSIFICATION	// Ensure global counters and lock are shared across threads in the group
WITHOUT_CLASSIFICATION	// Insert the subControllersAndSamplers into random list positions.
WITHOUT_CLASSIFICATION	// nodePath.add(selectedNode.getName());
WITHOUT_CLASSIFICATION	// We clone to avoid enabling existing node
WITHOUT_CLASSIFICATION	/*     * Returns the selection value as a int,     * with the value set to zero if it is out of range.     */
WITHOUT_CLASSIFICATION	// Set the selection once per iteration
WITHOUT_CLASSIFICATION	// Create a new list containing numElements null elements.
WITHOUT_CLASSIFICATION	// Replace subControllersAndSamplers with reordered copy.
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	// Retrieve the formatted data using the same encoding used to create it
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	/* Implements JMeterGUIComponent.createTestElement() */
WITHOUT_CLASSIFICATION	/* Implements JMeterGUIComponent.modifyTestElement(TestElement) */
WITHOUT_CLASSIFICATION	// Set the position when next is first called, and don't overwrite // until reInitialize is called.
WITHOUT_CLASSIFICATION	// setDone(true);
WITHOUT_CLASSIFICATION	// We've gone through the whole list and are now back at the start // point of our search.
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // throughput.addActionListener(this);
WITHOUT_CLASSIFICATION	// start/end index default value for string getters and setters
WITHOUT_CLASSIFICATION	// implements UnsharedComponent
WITHOUT_CLASSIFICATION	// Although the default is not the same as for the string value, it is only used internally
WITHOUT_CLASSIFICATION	// Although the default is not the same as for the string value, it is only used internally
WITHOUT_CLASSIFICATION	// Prevent entry if nothing to do
WITHOUT_CLASSIFICATION	// These must not be static, otherwise Language change does not work // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// PERTHREAD FIELD
WITHOUT_CLASSIFICATION	// In case we are converting back from floating point, drop the decimal fraction // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// TYPE FIELD
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// TEXT FIELD
WITHOUT_CLASSIFICATION	// TEXT FIELD
WITHOUT_CLASSIFICATION	// TEXT FIELD
WITHOUT_CLASSIFICATION	// TEXT FIELD
WITHOUT_CLASSIFICATION	// TEXT FIELD
WITHOUT_CLASSIFICATION	// Standalone
WITHOUT_CLASSIFICATION	// Embedded
WITHOUT_CLASSIFICATION	// JPanel loopPanel = new JPanel(new BorderLayout(5, 0));
WITHOUT_CLASSIFICATION	// Only replace default if it is provided
WITHOUT_CLASSIFICATION	// may be null for PUT // In an application/x-www-form-urlencoded request, we only support // parameters, no file upload is allowed
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// ignored
WITHOUT_CLASSIFICATION	// Should not happen
WITHOUT_CLASSIFICATION	// implements UnsharedComponent
WITHOUT_CLASSIFICATION	// Fetch some variables
WITHOUT_CLASSIFICATION	// LOOP LABEL // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	//+ JMX file attributes // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ //- JMX file attributes
WITHOUT_CLASSIFICATION	// Checkbox // $NON-NLS-1$
WITHOUT_CLASSIFICATION	/*================= internal business =================*/
WITHOUT_CLASSIFICATION	// DROP-DOWN MENU
WITHOUT_CLASSIFICATION	// number of previous matches
WITHOUT_CLASSIFICATION	// reset previous result
WITHOUT_CLASSIFICATION	// e.g. DTD not reachable
WITHOUT_CLASSIFICATION	// this method assumes UTF-8 input data
WITHOUT_CLASSIFICATION	// Can happen for bad input document
WITHOUT_CLASSIFICATION	/*============= object properties ================*/
WITHOUT_CLASSIFICATION	/*     * Permissible values:     *  true - match against headers     *  false or absent - match against body (this was the original default)     *  URL - match against URL     *  These are passed to the setUseField() method     *     *  Do not change these values!    */
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// Will already have been logged by XPathUtil // fail the sample
WITHOUT_CLASSIFICATION	// Just in case // Clear any other remaining variables
WITHOUT_CLASSIFICATION	// What to match against. N.B. do not change the string value or test plans will break! // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// NOTE: responseData encoding is server specific //       Therefore we do byte -> unicode -> byte conversion //       to ensure UTF-8 encoding as required by XPathUtil // convert unicode String -> UTF-8 bytes // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// ensure old value is not left defined
WITHOUT_CLASSIFICATION	// ensure old value is not left defined
WITHOUT_CLASSIFICATION	// Fetch some variables
WITHOUT_CLASSIFICATION	// Only replace default if it is provided
WITHOUT_CLASSIFICATION	//Note: match.groups() includes group 0
WITHOUT_CLASSIFICATION	// refname has already been set to the default (if present)
WITHOUT_CLASSIFICATION	// Number of refName_n variable sets to keep
WITHOUT_CLASSIFICATION	// Number of refName_n variable sets to keep
WITHOUT_CLASSIFICATION	// Save the count
WITHOUT_CLASSIFICATION	// Original match behaviour
WITHOUT_CLASSIFICATION	// Original match behaviour
WITHOUT_CLASSIFICATION	// < 0 means we save all the matches
WITHOUT_CLASSIFICATION	// remove any single matches
WITHOUT_CLASSIFICATION	// Remove any left-over variables
WITHOUT_CLASSIFICATION	// no need to process further
WITHOUT_CLASSIFICATION	// Remove the group count
WITHOUT_CLASSIFICATION	// How many groups are there?
WITHOUT_CLASSIFICATION	// remove the remaining _gn vars
WITHOUT_CLASSIFICATION	// trailing string is not empty
WITHOUT_CLASSIFICATION	// Contains Strings and Integers
WITHOUT_CLASSIFICATION	// remove the g0,g1...gn vars
WITHOUT_CLASSIFICATION	// add match as Integer
WITHOUT_CLASSIFICATION	// string is not empty
WITHOUT_CLASSIFICATION	// Allow for property not yet being set (probably only applies to Test cases)
WITHOUT_CLASSIFICATION	// Random match
WITHOUT_CLASSIFICATION	// for request Data
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // e.g. "Transfer-Encoding: chunked", which is processed automatically by the underlying protocol // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ pseudo-header for reporting Local Address // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // For handling caching // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ //e.g. public, max-age=259200 //e.g. Date Header of response 
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$         //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	// Use format to create number; if it fails, use the default
WITHOUT_CLASSIFICATION	// < 0 means we save all the matches
WITHOUT_CLASSIFICATION	// Save the count
WITHOUT_CLASSIFICATION	// Remove any left-over variables
WITHOUT_CLASSIFICATION	// no need to process further
WITHOUT_CLASSIFICATION	// Random match
WITHOUT_CLASSIFICATION	// Next line
WITHOUT_CLASSIFICATION	// Next line
WITHOUT_CLASSIFICATION	// Used for per-thread/user storage of increment in Thread Group Main loop
WITHOUT_CLASSIFICATION	// So we know which button is selected
WITHOUT_CLASSIFICATION	// reset
WITHOUT_CLASSIFICATION	// Used for per-thread/user numbers
WITHOUT_CLASSIFICATION	// Cannot use getThreadContext() as not cloned per thread
WITHOUT_CLASSIFICATION	// get to 'path' part of the URL, preserving schema, auth, host if // present
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// can be specified in jmeter.properties //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// This class is not cloned per thread, so this is shared //@GuardedBy("this")
WITHOUT_CLASSIFICATION	/*     * Although the lock appears to be an instance lock, in fact the lock is     * shared between all threads in a thread group, but different thread groups     * have different locks - see the clone() method below     *     * The lock ensures that all the variables are processed together, which is     * important for functions such as __CSVRead and _StringFromFile.     */
WITHOUT_CLASSIFICATION	// Lock object must exist
WITHOUT_CLASSIFICATION	// ensure that clones share the same lock object
WITHOUT_CLASSIFICATION	// super.mergeIn(element);
WITHOUT_CLASSIFICATION	// Don't process the NAME column
WITHOUT_CLASSIFICATION	// Enable DELETE (which may already be enabled, but it won't hurt)
WITHOUT_CLASSIFICATION	// Enable DELETE (which may already be enabled, but it won't hurt)
WITHOUT_CLASSIFICATION	// Highlight (select) the appropriate row.
WITHOUT_CLASSIFICATION	// Highlight (select) the appropriate row.
WITHOUT_CLASSIFICATION	// Disable DELETE if there are no rows in the table to delete.
WITHOUT_CLASSIFICATION	// Disable DELETE if there are no rows in the table to delete.
WITHOUT_CLASSIFICATION	// Verify for a ".." component at next iteration
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	// Table still contains one or more rows, so highlight (select) // the appropriate one.
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// Table still contains one or more rows, so highlight (select) // the appropriate one.
WITHOUT_CLASSIFICATION	// paramTable.setRowSelectionAllowed(true); // paramTable.setColumnSelectionAllowed(true);
WITHOUT_CLASSIFICATION	// property values are strings
WITHOUT_CLASSIFICATION	// paramTable.setCellSelectionEnabled(true); // paramTable.setPreferredScrollableViewportSize(new Dimension(100, // 70));
WITHOUT_CLASSIFICATION	// Send the mail ...
WITHOUT_CLASSIFICATION	// Send the mail ...
WITHOUT_CLASSIFICATION	// create some properties and get the default Session
WITHOUT_CLASSIFICATION	// create a message
WITHOUT_CLASSIFICATION	// This can't happen (how should utf8 not be supported!?!), // so just throw an Error:
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// NOOP
WITHOUT_CLASSIFICATION	// NOOP
WITHOUT_CLASSIFICATION	// for request Data
WITHOUT_CLASSIFICATION	// //////////////////////////////////////////////////////////// // // setter/getter - JavaDoc-Comments not needed... // // ////////////////////////////////////////////////////////////
WITHOUT_CLASSIFICATION	// -1 is the code for a failed sample. //
WITHOUT_CLASSIFICATION	// private void setSuccessCount(long count) // { // this.successCount = count; // }
WITHOUT_CLASSIFICATION	// private void setFailureCount(long count) // { // this.failureCount = count; // }
WITHOUT_CLASSIFICATION	// sends the result to the visualiser // updates the model used for sending e-mails
WITHOUT_CLASSIFICATION	// Actions
WITHOUT_CLASSIFICATION	// Action targets
WITHOUT_CLASSIFICATION	// public static final int THREAD_GROUP = 1;
WITHOUT_CLASSIFICATION	// This means no sample is saved
WITHOUT_CLASSIFICATION	// take copy so cannot get NPE
WITHOUT_CLASSIFICATION	// Gui components
WITHOUT_CLASSIFICATION	// private ButtonGroup actionButtons;
WITHOUT_CLASSIFICATION	// State variables
WITHOUT_CLASSIFICATION	// Target
WITHOUT_CLASSIFICATION	// Action
WITHOUT_CLASSIFICATION	// Duration
WITHOUT_CLASSIFICATION	// The property name to be used to look up the display string
WITHOUT_CLASSIFICATION	//For calculating throughput across all threads
WITHOUT_CLASSIFICATION	//For holding the ThrougputInfo objects for all ThreadGroups. Keyed by AbstractThreadGroup objects
WITHOUT_CLASSIFICATION	/*         * If previous time is zero, then target will be in the past.         * This is what we want, so first sample is run without a delay.        */
WITHOUT_CLASSIFICATION	// assume the sample will run as soon as the delay has expired
WITHOUT_CLASSIFICATION	// Calculate the delay based on the mode
WITHOUT_CLASSIFICATION	// N.B. we fetch the throughput each time, as it may vary during a test
WITHOUT_CLASSIFICATION	// Total number of threads
WITHOUT_CLASSIFICATION	// Active threads in this group
WITHOUT_CLASSIFICATION	// All threads - alternate calculation
WITHOUT_CLASSIFICATION	//All threads in this group - alternate calculation
WITHOUT_CLASSIFICATION	// no need to sync as one per instance
WITHOUT_CLASSIFICATION	// Add to cache
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// ignored
WITHOUT_CLASSIFICATION	// can be specified in jmeter.properties //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	// NOOP
WITHOUT_CLASSIFICATION	//Cannot happen
WITHOUT_CLASSIFICATION	// String in the panel // Do not make these static, otherwise language changes don't work // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// We did not replace the entry // so use the existing one
WITHOUT_CLASSIFICATION	// e.g. 0 // i.e. * 1
WITHOUT_CLASSIFICATION	// We're behind schedule -- try to catch up: // assume the sample will run immediately
WITHOUT_CLASSIFICATION	// For access from test code
WITHOUT_CLASSIFICATION	//Synchronize on the info object's MUTEX to ensure //Multiple threads don't update the scheduled time simultaneously
WITHOUT_CLASSIFICATION	//NOOP
WITHOUT_CLASSIFICATION	//NOOP
WITHOUT_CLASSIFICATION	// For access from test code
WITHOUT_CLASSIFICATION	// Unique Barrier creation ensured by synchronized setup
WITHOUT_CLASSIFICATION	// must be defined
WITHOUT_CLASSIFICATION	// Instantiate requestview classes
WITHOUT_CLASSIFICATION	// Ensure transient object is created by the server
WITHOUT_CLASSIFICATION	// DELAY DEVIATION
WITHOUT_CLASSIFICATION	// Lazy init
WITHOUT_CLASSIFICATION	// use later
WITHOUT_CLASSIFICATION	// AVG DELAY
WITHOUT_CLASSIFICATION	// Prepare the Request tabbed pane
WITHOUT_CLASSIFICATION	// place raw tab in first position (first tab)
WITHOUT_CLASSIFICATION	// Hint to background color on bottom tabs (grey, not blue)
WITHOUT_CLASSIFICATION	// We assume the argument value is encoded according to the HTTP spec, i.e. UTF-8
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// NOOP
WITHOUT_CLASSIFICATION	// NOOP
WITHOUT_CLASSIFICATION	// NOOP
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ $NON-NLS-2$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ $NON-NLS-2$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ $NON-NLS-2$
WITHOUT_CLASSIFICATION	// Create the panels for the regexp tab
WITHOUT_CLASSIFICATION	// go to first line
WITHOUT_CLASSIFICATION	// Construct a multi-line string with all matches
WITHOUT_CLASSIFICATION	// Add regexp tester pane // $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// nothing to do
WITHOUT_CLASSIFICATION	// private static final int LIMIT_STR_SIZE = 100; // private boolean isRoot;
WITHOUT_CLASSIFICATION	// if other node type, we will just skip it
WITHOUT_CLASSIFICATION	// MAIN PANEL
WITHOUT_CLASSIFICATION	// NAME
WITHOUT_CLASSIFICATION	// description Panel
WITHOUT_CLASSIFICATION	// number Panel
WITHOUT_CLASSIFICATION	// information display Panel
WITHOUT_CLASSIFICATION	// boolean resized = true;
WITHOUT_CLASSIFICATION	// rounds!
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ $NON-NLS-2$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// MAIN PANEL
WITHOUT_CLASSIFICATION	// NAME
WITHOUT_CLASSIFICATION	// Set up the table itself
WITHOUT_CLASSIFICATION	// everyone is free to swing on its side :) // add(infoPanel, BorderLayout.EAST);
WITHOUT_CLASSIFICATION	// Note: the resource string won't respond to locale-changes, // however this does not matter as it is only used when pasting to the clipboard
WITHOUT_CLASSIFICATION	// dimension of the SplineGraph is the same // resized = false;
WITHOUT_CLASSIFICATION	// Sample number (string) // Start Time // Thread Name // Label // Sample Time // Status // Bytes
WITHOUT_CLASSIFICATION	// dimension changed // resized = true;
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// Add the main panel and the graph
WITHOUT_CLASSIFICATION	// Column renderers
WITHOUT_CLASSIFICATION	// The object used for each row
WITHOUT_CLASSIFICATION	// table.getTableHeader().setReorderingAllowed(false);
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// Make a internal list of all results to allow reload data with filter or interval
WITHOUT_CLASSIFICATION	// Default checked // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// Set up footer of table which displays numerics of the graphs
WITHOUT_CLASSIFICATION	// Generate x-axis label and associated color
WITHOUT_CLASSIFICATION	// Set up the table with footer
WITHOUT_CLASSIFICATION	// Sampler selection
WITHOUT_CLASSIFICATION	// internal list of all results
WITHOUT_CLASSIFICATION	// Use for x-axis scale
WITHOUT_CLASSIFICATION	// we check the count to see if we have exceeded // the number of lines to parse. There's no way // to know where to stop in the file. Therefore // we use break to escape the while loop when // we've reached the count.
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// MAIN PANEL
WITHOUT_CLASSIFICATION	// reset colors index
WITHOUT_CLASSIFICATION	// List of value by sampler
WITHOUT_CLASSIFICATION	// We want to retain insertion order, so LinkedHashMap is necessary
WITHOUT_CLASSIFICATION	// canvas size
WITHOUT_CLASSIFICATION	// Draw the graph
WITHOUT_CLASSIFICATION	// Test can't have a duration more than 2^31 secs (cast from long to int)
WITHOUT_CLASSIFICATION	// Calculate intermediate values (if needed)
WITHOUT_CLASSIFICATION	// log.debug("data["+s+"]["+idx+"]: " + data[s][idx]);
WITHOUT_CLASSIFICATION	// If clic on the Graph tab, make the graph (without apply interval or filter)
WITHOUT_CLASSIFICATION	// if use dynamic graph size is checked, we disable the dimension fields
WITHOUT_CLASSIFICATION	// Force reload data
WITHOUT_CLASSIFICATION	// Not 'else if' because forceReloadData 
WITHOUT_CLASSIFICATION	// Reload data from file
WITHOUT_CLASSIFICATION	// Reload data form internal list of results
WITHOUT_CLASSIFICATION	// Calculate the test duration. Needs to xAxis Labels and getData.
WITHOUT_CLASSIFICATION	// Button
WITHOUT_CLASSIFICATION	// Button
WITHOUT_CLASSIFICATION	// Search field
WITHOUT_CLASSIFICATION	// checkboxes
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // default: bold
WITHOUT_CLASSIFICATION	// default: circle
WITHOUT_CLASSIFICATION	// default option
WITHOUT_CLASSIFICATION	// Keep copies of the two editors needed
WITHOUT_CLASSIFICATION	// could be <HTML lang=""> // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// Look for a case variation
WITHOUT_CLASSIFICATION	// ditto // $NON-NLS-1$
WITHOUT_CLASSIFICATION	/*         * To disable downloading and rendering of images and frames, enable the         * editor-kit. The Stream property can then be         */
WITHOUT_CLASSIFICATION	// Must be done before setContentType
WITHOUT_CLASSIFICATION	// now we create the compiled pattern and // add it to the arraylist
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// the child to be removed will always be 0 'cos as the nodes are // removed the nth node will become (n-1)th
WITHOUT_CLASSIFICATION	// get the text response and image icon // to determine which is NOT null
WITHOUT_CLASSIFICATION	// Bug can generate RTE
WITHOUT_CLASSIFICATION	// number of nodes
WITHOUT_CLASSIFICATION	// number of non extreme nodes (_m-2)
WITHOUT_CLASSIFICATION	// the number of nodes is defined by the length of r
WITHOUT_CLASSIFICATION	// grab the nodes
WITHOUT_CLASSIFICATION	// computes interpolation coefficients
WITHOUT_CLASSIFICATION	// creation of the interpolation structure
WITHOUT_CLASSIFICATION	// local variables
WITHOUT_CLASSIFICATION	// local variables
WITHOUT_CLASSIFICATION	// initialize system structures (just to be safe)
WITHOUT_CLASSIFICATION	// initialize the diagonal of the system matrix (A) to 4
WITHOUT_CLASSIFICATION	// initialize the two minor diagonals of A to 1
WITHOUT_CLASSIFICATION	// initialize B
WITHOUT_CLASSIFICATION	// di (degree 0)
WITHOUT_CLASSIFICATION	// ci (degree 1)
WITHOUT_CLASSIFICATION	// bi (degree 2)
WITHOUT_CLASSIFICATION	// ai (degree 3)
WITHOUT_CLASSIFICATION	// intermediate arrays
WITHOUT_CLASSIFICATION	// Jacobi convergence test
WITHOUT_CLASSIFICATION	// init newX and oldX arrays to 0
WITHOUT_CLASSIFICATION	// main iteration
WITHOUT_CLASSIFICATION	// verify t belongs to the curve (range [0, _m-1])
WITHOUT_CLASSIFICATION	// silent error, consider the curve is constant outside its range
WITHOUT_CLASSIFICATION	// seek the good interval for t and get the piece of curve on it
WITHOUT_CLASSIFICATION	// the polynomial calculation is done by the (fast) Euler method
WITHOUT_CLASSIFICATION	// computes auto-scaling and absolute plots
WITHOUT_CLASSIFICATION	// shouldn't draw negative values
WITHOUT_CLASSIFICATION	// we want to return the context that is actually in the map // if it's the first put we will have a null result
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// NOOP
WITHOUT_CLASSIFICATION	// NOOP
WITHOUT_CLASSIFICATION	// NOOP
WITHOUT_CLASSIFICATION	// MAIN PANEL
WITHOUT_CLASSIFICATION	// Settings panes
WITHOUT_CLASSIFICATION	// the number of non extreme nodes is the number of intervals // minus 1, i.e. the length of r minus 2
WITHOUT_CLASSIFICATION	// the upper limit of the curve range belongs by definition // to the last interval
WITHOUT_CLASSIFICATION	// Jacobi system resolving // results are stored in _rS // computes the coefficients (di, ci, bi, ai) from the results
WITHOUT_CLASSIFICATION	// computes relative auto-scaled plots to fit in the specified area
WITHOUT_CLASSIFICATION	// computes the value of the curve at the pecified abscissa // and relative to the beginning of the right piece of Spline curve
WITHOUT_CLASSIFICATION	// return label
WITHOUT_CLASSIFICATION	// initialize GUI.
WITHOUT_CLASSIFICATION	// show the grid lines, to turn it off, set it to zero
WITHOUT_CLASSIFICATION	// Test mail button
WITHOUT_CLASSIFICATION	// reset the paint counter
WITHOUT_CLASSIFICATION	// Failures count
WITHOUT_CLASSIFICATION	// set the Y Axis to round
WITHOUT_CLASSIFICATION	// Does not need to be synch. because it is only accessed from the sampler thread // The ClientPool does access it in a different thread, but ClientPool is fully synch.
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// Used by Request Panel //$NON-NLS-1$
WITHOUT_CLASSIFICATION	/* (non-Javadoc)     * @see org.apache.jmeter.visualizers.request.RequestView#init()     */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)     * @see org.apache.jmeter.visualizers.request.RequestView#clearData()     */
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// go to first line
WITHOUT_CLASSIFICATION	// Construct a multi-line string with all matches
WITHOUT_CLASSIFICATION	// nothing to do
WITHOUT_CLASSIFICATION	// Don't display Request headers label if rh is null or empty
WITHOUT_CLASSIFICATION	// //////////////////////////////////////////////////////////// // // Implementation of the ActionListener-Interface. // // ////////////////////////////////////////////////////////////
WITHOUT_CLASSIFICATION	// //////////////////////////////////////////////////////////// // // Methods used to store and retrieve the MailerVisualizer. // // ////////////////////////////////////////////////////////////
WITHOUT_CLASSIFICATION	// //////////////////////////////////////////////////////////// // // Methods to implement the ModelListener. // // ////////////////////////////////////////////////////////////
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // don't set empty to keep cssJquery // cssJqueryField.setText(""); // $NON-NLS-1$ // $NON-NLS-1$ // don't set empty to keep attribute // this.attributeField.setText(""); // $NON-NLS-1$ // don't change impl // this.cssJqueryLabeledChoice.setText(HtmlExtractor.DEFAULT_EXTRACTOR);
WITHOUT_CLASSIFICATION	// Create the panels for the cssJquery tab
WITHOUT_CLASSIFICATION	// most current subclasses can process text
WITHOUT_CLASSIFICATION	// Could be SampleResult or AssertionResult
WITHOUT_CLASSIFICATION	// add a message when no request data (ex. Java request)
WITHOUT_CLASSIFICATION	// to save last select tab (raw/parsed)
WITHOUT_CLASSIFICATION	// Result column renderers
WITHOUT_CLASSIFICATION	// Response headers column renderers
WITHOUT_CLASSIFICATION	// Response fields column renderers
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// The object used for each row
WITHOUT_CLASSIFICATION	// The object used for each row
WITHOUT_CLASSIFICATION	// Add cssJquery tester pane // $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// N.B. these are not multi-threaded, so don't make it static // ISO format $NON-NLS-1$
WITHOUT_CLASSIFICATION	// one space for blank header // $NON-NLS-1$  // one space for blank header  // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// Key // Value
WITHOUT_CLASSIFICATION	// Key // Value
WITHOUT_CLASSIFICATION	// Key // Value
WITHOUT_CLASSIFICATION	// create tables // The object used for each row
WITHOUT_CLASSIFICATION	// Response Data // $NON-NLS-1$ // Request Data // $NON-NLS-1$ // Sampler result // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // Create the panels for the other tabs
WITHOUT_CLASSIFICATION	// Clear all data before display a new
WITHOUT_CLASSIFICATION	// We are displaying a SampleResult
WITHOUT_CLASSIFICATION	// reset for reuse
WITHOUT_CLASSIFICATION	// reset for reuse
WITHOUT_CLASSIFICATION	// no need to change the foreground color
WITHOUT_CLASSIFICATION	// response message label
WITHOUT_CLASSIFICATION	// Done
WITHOUT_CLASSIFICATION	// Parsed response headers
WITHOUT_CLASSIFICATION	// Reset search
WITHOUT_CLASSIFICATION	// restore tabbed pane parsed if needed
WITHOUT_CLASSIFICATION	// restore last selected tab
WITHOUT_CLASSIFICATION	// Remove the other (parsed) tab if present
WITHOUT_CLASSIFICATION	// Cache for object-message, only used when parsing from a file because in text-area // property replacement might have been used
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// Hint to background color on bottom tabs (grey, not blue)
WITHOUT_CLASSIFICATION	// Set up the 1st table Result with empty headers
WITHOUT_CLASSIFICATION	// quieten Findbugs // default - do nothing
WITHOUT_CLASSIFICATION	// Add styles to use for different types of status messages
WITHOUT_CLASSIFICATION	// Prepare the Results tabbed pane
WITHOUT_CLASSIFICATION	// Set up the 3rd table 
WITHOUT_CLASSIFICATION	// Set up the 2nd table 
WITHOUT_CLASSIFICATION	// Create the split pane
WITHOUT_CLASSIFICATION	// Create the split pane
WITHOUT_CLASSIFICATION	// Add search text extension
WITHOUT_CLASSIFICATION	// Maximum size that we will display
WITHOUT_CLASSIFICATION	// Add sample
WITHOUT_CLASSIFICATION	// Add any assertion that failed as children of the sample node
WITHOUT_CLASSIFICATION	// Add any assertion that failed as children of the sample node
WITHOUT_CLASSIFICATION	// Prepare the common tab
WITHOUT_CLASSIFICATION	// init right side with first render
WITHOUT_CLASSIFICATION	// to restore last tab used
WITHOUT_CLASSIFICATION	// drop-down list for renderer
WITHOUT_CLASSIFICATION	// if no results render in jmeter.properties, load Standard (default)
WITHOUT_CLASSIFICATION	// Instantiate render classes
WITHOUT_CLASSIFICATION	// preset to "Text" option
WITHOUT_CLASSIFICATION	// to restore last selected tab (better user-friendly)
WITHOUT_CLASSIFICATION	// Remove old right side
WITHOUT_CLASSIFICATION	// create and add a new right side
WITHOUT_CLASSIFICATION	// To display current sampler result before change
WITHOUT_CLASSIFICATION	// in the case the test uses a file, we set it locally and // prevent loading the file repeatedly
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	// MAIN PANEL
WITHOUT_CLASSIFICATION	// NAME
WITHOUT_CLASSIFICATION	// the child to be removed will always be 0 'cos as the nodes are // removed the nth node will become (n-1)th
WITHOUT_CLASSIFICATION	// Processes Assertions // display a SampleResult
WITHOUT_CLASSIFICATION	// Set the status for the node
WITHOUT_CLASSIFICATION	// NOOP state is held by component
WITHOUT_CLASSIFICATION	// TEXTAREA LABEL
WITHOUT_CLASSIFICATION	// TEXTAREA
WITHOUT_CLASSIFICATION	// define max scale y axis
WITHOUT_CLASSIFICATION	// if the title graph is empty, we can assume some default
WITHOUT_CLASSIFICATION	// replace _xAxisTitle to null (don't display x axis title)
WITHOUT_CLASSIFICATION	// Stroke and shape line settings
WITHOUT_CLASSIFICATION	// Lines colors
WITHOUT_CLASSIFICATION	// Define chart type (line)
WITHOUT_CLASSIFICATION	// Y Axis ruler
WITHOUT_CLASSIFICATION	// ~a tic every 50 px
WITHOUT_CLASSIFICATION	// Increment cannot be < 1
WITHOUT_CLASSIFICATION	// Manage legend placement
WITHOUT_CLASSIFICATION	// return new Dimension(width, 400);
WITHOUT_CLASSIFICATION	// int width = getWidth();
WITHOUT_CLASSIFICATION	// will always be within range of an int: as must be < width
WITHOUT_CLASSIFICATION	// Don't start yet if stop between samples
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// NOOP
WITHOUT_CLASSIFICATION	// NOOP
WITHOUT_CLASSIFICATION	// NOOP
WITHOUT_CLASSIFICATION	// We want to retain insertion order, so LinkedHashMap is necessary
WITHOUT_CLASSIFICATION	// define max scale y axis
WITHOUT_CLASSIFICATION	// replace _xAxisTitle to null (don't display x axis title)
WITHOUT_CLASSIFICATION	// if the "Title of Graph" is empty, we can assume some default
WITHOUT_CLASSIFICATION	// Same ViewResultsTree
WITHOUT_CLASSIFICATION	// Needed by Visualizer interface
WITHOUT_CLASSIFICATION	// Educated guess
WITHOUT_CLASSIFICATION	// if the labels are too long, they'll be "squeezed" to make the chart viewable.
WITHOUT_CLASSIFICATION	// Y Axis
WITHOUT_CLASSIFICATION	//new Font("SansSerif", Font.PLAIN, 10)
WITHOUT_CLASSIFICATION	// enable embedded html resources
WITHOUT_CLASSIFICATION	// ----------- get/set methods ------------------- //
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// MAIN PANEL
WITHOUT_CLASSIFICATION	// Column renderers
WITHOUT_CLASSIFICATION	// TODO Charset ?
WITHOUT_CLASSIFICATION	/*                 * Synch is needed because multiple threads can update the counts.                 */
WITHOUT_CLASSIFICATION	// SortFilterModel mySortedModel = // new SortFilterModel(myStatTableModel);
WITHOUT_CLASSIFICATION	// Search field
WITHOUT_CLASSIFICATION	// prepare highlighter to show text find with search command
WITHOUT_CLASSIFICATION	// new search?
WITHOUT_CLASSIFICATION	// save search position
WITHOUT_CLASSIFICATION	// Display not found message and reset search
WITHOUT_CLASSIFICATION	// add listener to intercept texttofind changes and reset search
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// MAIN PANEL
WITHOUT_CLASSIFICATION	// Column renderers
WITHOUT_CLASSIFICATION	// checkboxes
WITHOUT_CLASSIFICATION	// Reset search
WITHOUT_CLASSIFICATION	/*                 * Synch is needed because multiple threads can update the counts.                 */
WITHOUT_CLASSIFICATION	// Buttons
WITHOUT_CLASSIFICATION	// when Enter is pressed, search start
WITHOUT_CLASSIFICATION	// default not visible
WITHOUT_CLASSIFICATION	// Search text in response data
WITHOUT_CLASSIFICATION	// DocumentListener method
WITHOUT_CLASSIFICATION	// DocumentListener method
WITHOUT_CLASSIFICATION	// DocumentListener method
WITHOUT_CLASSIFICATION	// desactivate or not specials regexp char
WITHOUT_CLASSIFICATION	// Label // count // Mean // Min // Max // Std Dev. // Error %age // Throughput // kB/sec // avg. pageSize
WITHOUT_CLASSIFICATION	// All rows have this class
WITHOUT_CLASSIFICATION	//Synch is needed because a clear can occur while add occurs
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// MAIN PANEL
WITHOUT_CLASSIFICATION	// Add the main panel and the graph
WITHOUT_CLASSIFICATION	//    /** A button for adding new arguments to the table. */ //    private JButton add; // //    /** A button for removing arguments from the table. */ //    private JButton delete;
WITHOUT_CLASSIFICATION	// Force a minimum table height of 70 pixels
WITHOUT_CLASSIFICATION	//p.add(makeButtonPanel(), BorderLayout.SOUTH);
WITHOUT_CLASSIFICATION	//new Functor("setName"), // $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// OK, because used in synchronised method
WITHOUT_CLASSIFICATION	// We have received one more sample
WITHOUT_CLASSIFICATION	// Set up the graph with header, footer, Y axis and graph display
WITHOUT_CLASSIFICATION	// Methods used in creating the GUI
WITHOUT_CLASSIFICATION	/*     * protected void initializeTableModel() { tableModel = new     * ObjectTableModel( new String[] { ArgumentsPanel.COLUMN_NAMES_0,     * ArgumentsPanel.COLUMN_NAMES_1, ENCODE_OR_NOT, INCLUDE_EQUALS }, new     * Functor[] { new Functor("getName"), new Functor("getValue"), new     * Functor("isAlwaysEncoded"), new Functor("isUseEquals") }, new Functor[] {     * new Functor("setName"), new Functor("setValue"), new     * Functor("setAlwaysEncoded"), new Functor("setUseEquals") }, new Class[] {     * String.class, String.class, Boolean.class, Boolean.class }); }     */
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// Column renderers
WITHOUT_CLASSIFICATION	// Default checked // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// Default checked // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// Default checked // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// The text field should expand horizontally, but have // a fixed height
WITHOUT_CLASSIFICATION	// This column actually consists of a row with two sub-columns // The first column contains the labels, and the second // column contains the fields.
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// nothing to do
WITHOUT_CLASSIFICATION	// MAIN PANEL
WITHOUT_CLASSIFICATION	// Sampler selection
WITHOUT_CLASSIFICATION	// canvas size
WITHOUT_CLASSIFICATION	// If clic on the Graph tab, make the graph (without apply interval or filter)
WITHOUT_CLASSIFICATION	// if use dynamic graph size is checked, we disable the dimension fields
WITHOUT_CLASSIFICATION	// Force reload data
WITHOUT_CLASSIFICATION	// Not 'else if' because forceReloadData 
WITHOUT_CLASSIFICATION	// Button
WITHOUT_CLASSIFICATION	// Button
WITHOUT_CLASSIFICATION	// Search field
WITHOUT_CLASSIFICATION	// checkboxes
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // default: bold
WITHOUT_CLASSIFICATION	// default option
WITHOUT_CLASSIFICATION	// TODO Charset ?
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // default: normal
WITHOUT_CLASSIFICATION	// Label // count // Mean // median // 90% // Min // Max // Error %age // Throughpur // pageSize
WITHOUT_CLASSIFICATION	// API expects null, not empty array
WITHOUT_CLASSIFICATION	// API expects null, not empty array
WITHOUT_CLASSIFICATION	// Changing color for column
WITHOUT_CLASSIFICATION	// called from ctor, so must not be overridable
WITHOUT_CLASSIFICATION	// first lets draw the grid
WITHOUT_CLASSIFICATION	// draw the X axis
WITHOUT_CLASSIFICATION	// draw the Y axis
WITHOUT_CLASSIFICATION	// now draw the bar chart
WITHOUT_CLASSIFICATION	// we sort the objects
WITHOUT_CLASSIFICATION	// calculate the height
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// ignored
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// the test plan has to have more than 200 samples // for it to generate half way decent distribution // graph. the larger the sample, the better the // results.
WITHOUT_CLASSIFICATION	// if the height is less than one, we set it // to one pixel
WITHOUT_CLASSIFICATION	// draw a red line for 90% point
WITHOUT_CLASSIFICATION	// draw an orange line for 50% point
WITHOUT_CLASSIFICATION	//"<?xml "
WITHOUT_CLASSIFICATION	// Skip the leading bytes (if any)
WITHOUT_CLASSIFICATION	// there is also a javax.swing.text.Document class.
WITHOUT_CLASSIFICATION	// clear result tab on Ctrl-E
WITHOUT_CLASSIFICATION	// Must return a valid node, or may generate an NPE
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// MAIN PANEL
WITHOUT_CLASSIFICATION	// Add the main panel and the graph
WITHOUT_CLASSIFICATION	// We have received one more sample
WITHOUT_CLASSIFICATION	// Set up the graph with header, footer, Y axis and graph display
WITHOUT_CLASSIFICATION	// Methods used in creating the GUI
WITHOUT_CLASSIFICATION	// These are not currently updated
WITHOUT_CLASSIFICATION	//@GuardedBy("this")
WITHOUT_CLASSIFICATION	//@GuardedBy("this")
WITHOUT_CLASSIFICATION	//@GuardedBy("this")
WITHOUT_CLASSIFICATION	// this.graph.clear();
WITHOUT_CLASSIFICATION	// compute the new Spline curve
WITHOUT_CLASSIFICATION	// do nothing, wait for the next pile to complete
WITHOUT_CLASSIFICATION	// made currentSample volatile
WITHOUT_CLASSIFICATION	// Find JMeter home dir from the initial classpath
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// Java on Mac OS can add a second entry to the initial classpath // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// e.g. started from IDE with full classpath // Allow override $NON-NLS-1$ $NON-NLS-2$
WITHOUT_CLASSIFICATION	// Add standard jar locations to initial classpath
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ $NON-NLS-2$ // $NON-NLS-1$ $NON-NLS-2$ // $NON-NLS-1$ $NON-NLS-2$
WITHOUT_CLASSIFICATION	// only accept jar files // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ $NON-NLS-2$ // $NON-NLS-1$ // $NON-NLS-1$ $NON-NLS-2$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// usesUNC
WITHOUT_CLASSIFICATION	// ClassFinder needs the classpath
WITHOUT_CLASSIFICATION	// Ensure that directory URLs end in "/" // $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// ClassFinder needs this
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ $NON-NLS-2$ // $NON-NLS-1$ $NON-NLS-2$
WITHOUT_CLASSIFICATION	// Make the addURL method visible
WITHOUT_CLASSIFICATION	// needed for ShutdownClient
WITHOUT_CLASSIFICATION	// If the -t flag is to "LAST", then the last loaded file (if any) is used
WITHOUT_CLASSIFICATION	// Set it
WITHOUT_CLASSIFICATION	// Reset it
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // jmeter.log // $NON-NLS-1$ // sample result log file // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// Properties to be sent to remote servers
WITHOUT_CLASSIFICATION	// should remote engines be stopped at end of non-GUI test?
WITHOUT_CLASSIFICATION	// Check option combinations
WITHOUT_CLASSIFICATION	// Also initialises JMeter logging
WITHOUT_CLASSIFICATION	/*             * The following is needed for HTTPClient.             * (originally tried doing this in HTTPSampler2,             * but it appears that it was done too late when running in GUI mode)             * Set the commons logging default to Avalon Logkit, if not already defined             */
WITHOUT_CLASSIFICATION	// Set some (hopefully!) useful properties
WITHOUT_CLASSIFICATION	// Start the server
WITHOUT_CLASSIFICATION	// most recent
WITHOUT_CLASSIFICATION	// Update classloader if necessary
WITHOUT_CLASSIFICATION	//bshinit,log);
WITHOUT_CLASSIFICATION	//Do what would be done earlier
WITHOUT_CLASSIFICATION	//Do what would be done earlier
WITHOUT_CLASSIFICATION	// Should not have any text arguments
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// Set it
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-1$ $NON-NLS-2$
WITHOUT_CLASSIFICATION	//for Httpclient //for Httpclient
WITHOUT_CLASSIFICATION	// Process command line property definitions // These can potentially occur multiple times
WITHOUT_CLASSIFICATION	// Set it
WITHOUT_CLASSIFICATION	// Reset it
WITHOUT_CLASSIFICATION	// Set category
WITHOUT_CLASSIFICATION	// Set root level
WITHOUT_CLASSIFICATION	/*     * Checks for LAST or LASTsuffix.     * Returns the LAST name with .JMX replaced by suffix.     */
WITHOUT_CLASSIFICATION	// most recent // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// run test in batch mode
WITHOUT_CLASSIFICATION	// only add Summariser if it can not be shared with the ResultCollector
WITHOUT_CLASSIFICATION	// not Replaceable Controller
WITHOUT_CLASSIFICATION	// Not enabled
WITHOUT_CLASSIFICATION	// Not enabled
WITHOUT_CLASSIFICATION	// Not a TestElement
WITHOUT_CLASSIFICATION	// Not a ReplaceableController
WITHOUT_CLASSIFICATION	/*     * Listen to test and handle tidyup after non-GUI test completes.     * If running a remote test, then after waiting a few seconds for listeners to finish files,     * it calls ClientJMeterEngine.tidyRMI() to deal with the Naming Timer Thread.     */
WITHOUT_CLASSIFICATION	// keep track of remote tests
WITHOUT_CLASSIFICATION	//NOT YET USED private JMeter _parent;
WITHOUT_CLASSIFICATION	//_parent = unused;
WITHOUT_CLASSIFICATION	// it will be null unless remoteStop = true
WITHOUT_CLASSIFICATION	// Allow listeners to close files
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ 
WITHOUT_CLASSIFICATION	// Allow enough time for JVM to exit
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// Replacement only needs to occur when starting the engine // @see StandardJMeterEngine.run()
WITHOUT_CLASSIFICATION	// Highlight (select) the appropriate row.
WITHOUT_CLASSIFICATION	// Deliberate use of deprecated ctor // Create non-GUI version to avoid headless problems
WITHOUT_CLASSIFICATION	// Remove the disabled items // For GUI runs this is done in Start.java
WITHOUT_CLASSIFICATION	// This cannot be a JMeter class variable, because properties // are not initialised until later.
WITHOUT_CLASSIFICATION	// This is a daemon thread, which should only reach here if there are other // non-daemon threads still active
WITHOUT_CLASSIFICATION	// Only accept commands from the local host
WITHOUT_CLASSIFICATION	// Needs to be public for tests
WITHOUT_CLASSIFICATION	// needs to be public for testing
WITHOUT_CLASSIFICATION	// Skip parameters with a blank name (allows use of optional variables in parameter lists)
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	/* Implements JMeterGUIComponent.createTestElement() */
WITHOUT_CLASSIFICATION	/* Implements JMeterGUIComponent.createTestElement() */
WITHOUT_CLASSIFICATION	/* Implements JMeterGUIComponent.modifyTestElement(TestElement) */
WITHOUT_CLASSIFICATION	// Enable DELETE (which may already be enabled, but it won't hurt)
WITHOUT_CLASSIFICATION	// Enable DELETE (which may already be enabled, but it won't hurt)
WITHOUT_CLASSIFICATION	// Highlight (select) the appropriate row.
WITHOUT_CLASSIFICATION	// Disable DELETE if there are no rows in the table to delete.
WITHOUT_CLASSIFICATION	// Disable DELETE if there are no rows in the table to delete.
WITHOUT_CLASSIFICATION	// Disable DELETE if there are no rows in the table to delete.
WITHOUT_CLASSIFICATION	// Disable DELETE if there are no rows in the table to delete.
WITHOUT_CLASSIFICATION	// Because CollectionProperty.mergeIn will not prevent adding two // properties of the same name, we need to select the first value so // that this element's values prevail over defaults provided by // configuration // elements:
WITHOUT_CLASSIFICATION	// will only contain Argument or HTTPArgument
WITHOUT_CLASSIFICATION	//add(makeTitlePanel(), BorderLayout.NORTH);
WITHOUT_CLASSIFICATION	// Force the table to be at least 70 pixels high
WITHOUT_CLASSIFICATION	// only contains Argument (or HTTPArgument)
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	/* Implements JMeterGUIComponent.createTestElement() */
WITHOUT_CLASSIFICATION	/* Implements JMeterGUIComponent.modifyTestElement(TestElement) */
WITHOUT_CLASSIFICATION	// Enable DELETE (which may already be enabled, but it won't hurt)
WITHOUT_CLASSIFICATION	// Table still contains one or more rows, so highlight (select) // the appropriate one.
WITHOUT_CLASSIFICATION	// Table still contains one or more rows, so highlight (select) // the appropriate one.
WITHOUT_CLASSIFICATION	// Force a minimum table height of 70 pixels
WITHOUT_CLASSIFICATION	// If a table cell is being edited, we should accept the current value // and stop the editing before adding a new row.
WITHOUT_CLASSIFICATION	/*     * Evaluate the condition, which can be:     * blank or LAST = was the last sampler OK?     * otherwise, evaluate the condition to see if it is not "false"     * If blank, only evaluate at the end of the loop     *     * Must only be called at start and end of loop     *     * @param loopEnd - are we at loop end?     * @return true means OK to continue     */
WITHOUT_CLASSIFICATION	// If a table cell is being edited, we must cancel the editing before // deleting the row
WITHOUT_CLASSIFICATION	// If a table cell is being edited, we must cancel the editing before // deleting the row
WITHOUT_CLASSIFICATION	// Highlight (select) the appropriate rows.
WITHOUT_CLASSIFICATION	// Hide Window on ESC
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-2$
WITHOUT_CLASSIFICATION	// change to false after the first insert
WITHOUT_CLASSIFICATION	// Do update on Enter
WITHOUT_CLASSIFICATION	/*     * In spite of the name, this is actually used to determine if the loop controller is repeatable.     *     * The value is only used in nextIsNull() when the loop end condition has been detected:     * If forever==true, then it calls resetLoopCount(), otherwise it calls setDone(true).     *     * Loop Controllers always set forever=true, so that they will be executed next time     * the parent invokes them.     *     * Thread Group sets the value false, so nextIsNull() sets done, and the Thread Group will not be repeated.     * However, it's not clear that a Thread Group could ever be repeated.     */
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// for unit test code @see TestIfController
WITHOUT_CLASSIFICATION	// NOOP
WITHOUT_CLASSIFICATION	// NOOP
WITHOUT_CLASSIFICATION	// If blank, only check previous sample when at end of loop // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// cnd may be null if next() called us // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// Evaluation occurs when nbLoops is not yet evaluated  // or when nbLoops is equal to special value INFINITE_LOOP_COUNT
WITHOUT_CLASSIFICATION	// now evaluate the condition using JavaScript
WITHOUT_CLASSIFICATION	// We should only evalute the condition if it is the first // time ( first "iteration" ) we are called. // For subsequent calls, we are inside the IfControllerGroup, // so then we just pass the control to the next item inside the if control
WITHOUT_CLASSIFICATION	// If-test is false, need to re-initialize indexes
WITHOUT_CLASSIFICATION	// for getIterCount
WITHOUT_CLASSIFICATION	// Runtime is zero - no point staying around
WITHOUT_CLASSIFICATION	// ??
WITHOUT_CLASSIFICATION	/*     * This is needed for OnceOnly to work like other Loop Controllers     */
WITHOUT_CLASSIFICATION	// Only create the map if it is required
WITHOUT_CLASSIFICATION	// May be replaced by RandomOrderController
WITHOUT_CLASSIFICATION	// incrementCurrent();
WITHOUT_CLASSIFICATION	// must be a controller
WITHOUT_CLASSIFICATION	// must be a controller
WITHOUT_CLASSIFICATION	// can only match once
WITHOUT_CLASSIFICATION	// i.e. "true"
WITHOUT_CLASSIFICATION	// default true for compatibility
WITHOUT_CLASSIFICATION	///////////////// Transaction Controller - parent ////////////////
WITHOUT_CLASSIFICATION	// Check if transaction is done
WITHOUT_CLASSIFICATION	// This transaction is done
WITHOUT_CLASSIFICATION	// Sample the children of the transaction
WITHOUT_CLASSIFICATION	// If we do not get any sub samplers, the transaction is done
WITHOUT_CLASSIFICATION	////////////////////// Transaction Controller - additional sample //////////////////////////////
WITHOUT_CLASSIFICATION	// must be the start of the subtree
WITHOUT_CLASSIFICATION	// Assume success
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	/* Implements JMeterGUIComponent.createTestElement() */
WITHOUT_CLASSIFICATION	/* Implements JMeterGUIComponent.createTestElement() */
WITHOUT_CLASSIFICATION	/* Implements JMeterGUIComponent.modifyTestElement(TestElement) */
WITHOUT_CLASSIFICATION	/* Implements JMeterGUIComponent.modifyTestElement(TestElement) */
WITHOUT_CLASSIFICATION	// Standalone
WITHOUT_CLASSIFICATION	// Embedded
WITHOUT_CLASSIFICATION	// This transaction is done
WITHOUT_CLASSIFICATION	// Assume success
WITHOUT_CLASSIFICATION	// Check if it is the start of a new transaction // must be the start of the subtree
WITHOUT_CLASSIFICATION	// We need to call the super.next, instead of this.next, which is done in GenericController, // because if we call this.next(), it will return the TransactionSampler, and we do not want that. // We need to get the next real sampler or controller
WITHOUT_CLASSIFICATION	// Must be the end of the controller
WITHOUT_CLASSIFICATION	// We have sampled one of our children
WITHOUT_CLASSIFICATION	// We must set res to null now, before sending the event for the transaction, // so that we can ignore that event in our sampleOccured method
WITHOUT_CLASSIFICATION	// Check if we are still sampling our children
WITHOUT_CLASSIFICATION	// Accumulate waiting time for later
WITHOUT_CLASSIFICATION	//log.warn("Constructor only intended for use in testing");
WITHOUT_CLASSIFICATION	// ensure name is available for debugging
WITHOUT_CLASSIFICATION	// It is the JMeterThread which knows how to sample a real sampler
WITHOUT_CLASSIFICATION	// Another subsample for the transaction
WITHOUT_CLASSIFICATION	// Set Response code of transaction
WITHOUT_CLASSIFICATION	// The transaction fails if any sub sample fails
WITHOUT_CLASSIFICATION	// Add the sub result to the transaction result
WITHOUT_CLASSIFICATION	// Add current time to total for later use (exclude pause time)
WITHOUT_CLASSIFICATION	// If selected, then generate parent sample, otherwise as per original controller
WITHOUT_CLASSIFICATION	// if selected, add duration of timers to total runtime
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	/* Implements JMeterGUIComponent.createTestElement() */
WITHOUT_CLASSIFICATION	/* Implements JMeterGUIComponent.createTestElement() */
WITHOUT_CLASSIFICATION	/* Implements JMeterGUIComponent.createTestElement() */
WITHOUT_CLASSIFICATION	/* Implements JMeterGUIComponent.createTestElement() */
WITHOUT_CLASSIFICATION	/* Implements JMeterGUIComponent.modifyTestElement(TestElement) */
WITHOUT_CLASSIFICATION	/* Implements JMeterGUIComponent.modifyTestElement(TestElement) */
WITHOUT_CLASSIFICATION	/* Implements JMeterGUIComponent.modifyTestElement(TestElement) */
WITHOUT_CLASSIFICATION	/* Implements JMeterGUIComponent.modifyTestElement(TestElement) */
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ $NON-NLS-2$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ $NON-NLS-2$
WITHOUT_CLASSIFICATION	// The Loop Controller panel can be displayed standalone or inside // another panel. For standalone, we want to display the TITLE, NAME, // etc. (everything). However, if we want to display it within another // panel, we just display the Loop Count fields (not the TITLE and // NAME).
WITHOUT_CLASSIFICATION	// The Loop Controller panel can be displayed standalone or inside // another panel. For standalone, we want to display the TITLE, NAME, // etc. (everything). However, if we want to display it within another // panel, we just display the Loop Count fields (not the TITLE and // NAME).
WITHOUT_CLASSIFICATION	// Standalone
WITHOUT_CLASSIFICATION	// Standalone
WITHOUT_CLASSIFICATION	// Embedded
WITHOUT_CLASSIFICATION	// Embedded
WITHOUT_CLASSIFICATION	// TEXT FIELD // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// LOOP LABEL // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// SECONDS LABEL // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// TEXT FIELD // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// This check-box defines whether to save  WorkBench content or not
WITHOUT_CLASSIFICATION	// FOREVER CHECKBOX // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// Don't wrap this error - display it as is
WITHOUT_CLASSIFICATION	// Condition LABEL
WITHOUT_CLASSIFICATION	// limit the changes to client only test elements
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ $NON-NLS-2$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ $NON-NLS-2$
WITHOUT_CLASSIFICATION	// TEXT FIELD // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// Use expression instead of Javascript // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// Evaluate All checkbox // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// TEXT FIELD // This means exit if last sample failed // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ $NON-NLS-2$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	//   Used by both StandardJMeterEngine and ClientJMeterEngine. //   In the latter case, only ResultCollectors are updated, //   as only these are relevant to the client, and updating //   other elements causes all sorts of problems. // skip certain processing for remote tests
WITHOUT_CLASSIFICATION	// Called by JMeter ListenToTest if remoteStop is true
WITHOUT_CLASSIFICATION	// Sent later
WITHOUT_CLASSIFICATION	// Should we create our own copy of the RMI registry?
WITHOUT_CLASSIFICATION	// Create this object using the specified port (0 means anonymous)
WITHOUT_CLASSIFICATION	// should perhaps be log.warn, but this causes the client-server test to fail
WITHOUT_CLASSIFICATION	// Throw an Exception to ensure caller knows ...
WITHOUT_CLASSIFICATION	// close window where another remote client might jump in
WITHOUT_CLASSIFICATION	// sets active = true
WITHOUT_CLASSIFICATION	// Mail on userlist reported NPE here - looks like only happens if there are network errors, but check anyway
WITHOUT_CLASSIFICATION	/*     * Called by:     * - ClientJMeterEngine.exe() which is called on remoteStop      */
WITHOUT_CLASSIFICATION	// Tidy up any objects we created
WITHOUT_CLASSIFICATION	// Help with garbage control
WITHOUT_CLASSIFICATION	// The list of current thread groups; may be setUp, main, or tearDown.
WITHOUT_CLASSIFICATION	// May be null if called from Unit test
WITHOUT_CLASSIFICATION	// May be null if called from Unit test
WITHOUT_CLASSIFICATION	// e.g. not yet started
WITHOUT_CLASSIFICATION	// ConcurrentHashMap does not need synch. here
WITHOUT_CLASSIFICATION	// End of code to allow engine to be controlled remotely
WITHOUT_CLASSIFICATION	// Is testplan serialised?
WITHOUT_CLASSIFICATION	// Can't use for loop here because we remove elements
WITHOUT_CLASSIFICATION	// Deliberate use of deprecated method
WITHOUT_CLASSIFICATION	// we totally failed to stop the test
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// ConcurrentHashMap does not need synch. here
WITHOUT_CLASSIFICATION	// Allow engine and threads to be stopped from outside a thread // e.g. from beanshell server // Assumes that there is only one instance of the engine // at any one time so it is not guaranteed to work ...
WITHOUT_CLASSIFICATION	// ConcurrentHashMap does not need synch. here
WITHOUT_CLASSIFICATION	// ConcurrentHashMap does not need synch. here
WITHOUT_CLASSIFICATION	// else will be done by threadFinished()
WITHOUT_CLASSIFICATION	// no point continuing
WITHOUT_CLASSIFICATION	// TL - S&E
WITHOUT_CLASSIFICATION	// Merge in any additional test listeners // currently only used by the function parser
WITHOUT_CLASSIFICATION	// no longer needed
WITHOUT_CLASSIFICATION	// for each thread group, generate threads // hand each thread the sampler controller // and the listeners, and the timer
WITHOUT_CLASSIFICATION	//for each setup thread group
WITHOUT_CLASSIFICATION	//for each setup thread group
WITHOUT_CLASSIFICATION	//wait for all Setup Threads To Exit
WITHOUT_CLASSIFICATION	// The groups have all completed now                
WITHOUT_CLASSIFICATION	/*         * Here's where the test really starts. Run a Full GC now: it's no harm         * at all (just delays test start by a tiny amount) and hitting one too         * early in the test can impair results for short tests.         */
WITHOUT_CLASSIFICATION	// still running at this point, i.e. setUp was not cancelled // for each thread group
WITHOUT_CLASSIFICATION	//wait for all Test Threads To Exit
WITHOUT_CLASSIFICATION	// The groups have all completed now            
WITHOUT_CLASSIFICATION	// wait for Post threads to stop
WITHOUT_CLASSIFICATION	// ConcurrentHashMap does not need protecting
WITHOUT_CLASSIFICATION	// Will be null if StopTest thread has started
WITHOUT_CLASSIFICATION	// Needs to be run in a separate thread to allow RMI call to return OK
WITHOUT_CLASSIFICATION	// Allow RMI to complete
WITHOUT_CLASSIFICATION	// TL - all
WITHOUT_CLASSIFICATION	// don't add the timer
WITHOUT_CLASSIFICATION	// Should we match using regexes?
WITHOUT_CLASSIFICATION	// Created during class init; not modified thereafter 
WITHOUT_CLASSIFICATION	// ignore self
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ $NON-NLS-2$
WITHOUT_CLASSIFICATION	// i.e. shutdown/stopped during main thread groups // re-enable for tearDown if necessary
WITHOUT_CLASSIFICATION	//ignore Setup and Post here.  We could have filtered the searcher. but then //future Thread Group objects wouldn't execute.
WITHOUT_CLASSIFICATION	// Must not convert TestElement.gui_class etc
WITHOUT_CLASSIFICATION	// end of thread groups // No TGs found
WITHOUT_CLASSIFICATION	// This should be enough to allow server to exit. // default is false
WITHOUT_CLASSIFICATION	// Remote exit // Called by RemoteJMeterEngineImpl.rexit() // and by notifyTestListenersOfEnd() iff exitAfterTest is true; // in turn that is called by the run() method and the StopTest class // also called
WITHOUT_CLASSIFICATION	// Classnames must contain this string [.functions.] // $NON-NLS-1$ // Classnames must not contain this string [.gui.] // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// Check can cast for clone // Don't clone NoThreadClone unless honourNoThreadClone == false
WITHOUT_CLASSIFICATION	// clone will produce correct type
WITHOUT_CLASSIFICATION	// Dummy methods needed by Function interface
WITHOUT_CLASSIFICATION	// For use by FunctionHelper
WITHOUT_CLASSIFICATION	// For use by FunctionHelper
WITHOUT_CLASSIFICATION	// Handle escapes
WITHOUT_CLASSIFICATION	// found "${"
WITHOUT_CLASSIFICATION	// i.e. '\\'
WITHOUT_CLASSIFICATION	// save leading text
WITHOUT_CLASSIFICATION	// set to start of string
WITHOUT_CLASSIFICATION	// Function does not exist, so treat as per missing variable
WITHOUT_CLASSIFICATION	// variable, or function with no parameter list
WITHOUT_CLASSIFICATION	// ensure that setParameters() is called.
WITHOUT_CLASSIFICATION	// end of buffer
WITHOUT_CLASSIFICATION	// store the following character
WITHOUT_CLASSIFICATION	// Detect functionName() so this does not generate empty string as the parameter
WITHOUT_CLASSIFICATION	// Normal exit occurs here
WITHOUT_CLASSIFICATION	// Should not happen with StringReader
WITHOUT_CLASSIFICATION	// Dropped out, i.e. did not find closing ')'
WITHOUT_CLASSIFICATION	// Needed for serialisation testing
WITHOUT_CLASSIFICATION	// The default title for the Menu bar
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// NOOP
WITHOUT_CLASSIFICATION	// NOOP
WITHOUT_CLASSIFICATION	// NOOP
WITHOUT_CLASSIFICATION	// NOOP
WITHOUT_CLASSIFICATION	// Process escaped characters // Store the \
WITHOUT_CLASSIFICATION	// The application name // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// This is used to keep track of local (non-remote) tests // The name is chosen to be an unlikely host-name // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// Allow display/hide LoggerPanel
WITHOUT_CLASSIFICATION	// Transparent JButton with no border
WITHOUT_CLASSIFICATION	// Allow display/hide toolbar
WITHOUT_CLASSIFICATION	// file New operation may set to null, so just return app name
WITHOUT_CLASSIFICATION	// Allow display/hide Log Error/Fatal counter
WITHOUT_CLASSIFICATION	// TestStateListener implementation
WITHOUT_CLASSIFICATION	// enable drag&drop, install a custom transfer handler
WITHOUT_CLASSIFICATION	// add the toolbar
WITHOUT_CLASSIFICATION	// Check for file lists specifically
WITHOUT_CLASSIFICATION	// used by AbstractReportGui
WITHOUT_CLASSIFICATION	// helper method - also used by constructor
WITHOUT_CLASSIFICATION	// This stores the state of the TestElement
WITHOUT_CLASSIFICATION	// Ensure we use default bundle
WITHOUT_CLASSIFICATION	// Sampler error action buttons
WITHOUT_CLASSIFICATION	// are we saving the whole tree?
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// N.B. originally called clear() // @see also Clearable
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// TEXTAREA
WITHOUT_CLASSIFICATION	// allow for windows / chars in filename // $NON-NLS-1$ // $NON-NLS-2$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-2$
WITHOUT_CLASSIFICATION	// BeanInfo objects also contain locale-sensitive data -- flush them // away:
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // define AWT WM_CLASS string
WITHOUT_CLASSIFICATION	// throws HeadlessException
WITHOUT_CLASSIFICATION	// Defaults to continue
WITHOUT_CLASSIFICATION	// space between borders and text
WITHOUT_CLASSIFICATION	/** * Generates Configure pop-up dialogue for Listeners from all methods in SampleSaveConfiguration * with the signature "boolean saveXXX()". * There must be a corresponding "void setXXX(boolean)" method, and a property save_XXX which is * used to name the field on the dialogue. * */
WITHOUT_CLASSIFICATION	// Target server panel
WITHOUT_CLASSIFICATION	// Limit length of log content
WITHOUT_CLASSIFICATION	// If LOGGER_PANEL_MAX_LENGTH is 0, it means all log events are kept
WITHOUT_CLASSIFICATION	// The current node is now updated
WITHOUT_CLASSIFICATION	// Probably a missing jar
WITHOUT_CLASSIFICATION	// Forget about all GUIs we've created so far: we'll need to re-created // them all!
WITHOUT_CLASSIFICATION	// FIrst make sure we save the content of the current GUI (since we // will flush it away):
WITHOUT_CLASSIFICATION	// Should we allow directories?
WITHOUT_CLASSIFICATION	// Enable file revert action if a file is used
WITHOUT_CLASSIFICATION	// If saveWorkBench 
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	/*     * @see org.apache.jmeter.gui.action.Command#getActionNames()     */
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// Now put the current GUI in place. [This code was copied from the // EditCommand action -- we can't just trigger the action because that // would populate the current node with the contents of the new GUI -- // which is empty.] // Fetch once // Probably caused by unit testing on headless system
WITHOUT_CLASSIFICATION	// strPathsOrJars - pathnames or jarfiles to search for classes // classNames - required parent class(es) or annotations // $NON-NLS-1$ // innerClasses - should we include inner classes? // contains - classname should contain this string // Ignore the classes which are specific to the reporting tool // $NON-NLS-1$ // notContains - classname should not contain this string // annotations - true if classnames are annotations
WITHOUT_CLASSIFICATION	// Whether to skip the delete confirmation dialogue // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// Save parent node for later
WITHOUT_CLASSIFICATION	//Ignored
WITHOUT_CLASSIFICATION	// set the window visible immediately
WITHOUT_CLASSIFICATION	// N.B. this only reloads if necessary (ignores the reference)
WITHOUT_CLASSIFICATION	// Add this node
WITHOUT_CLASSIFICATION	// Add all the child nodes of the node we are adding
WITHOUT_CLASSIFICATION	// Ensure the dialog is only created when it is first needed // In turn this avoids scanning the templates until first needed
WITHOUT_CLASSIFICATION	// Make sure the file ends with proper extension
WITHOUT_CLASSIFICATION	// Check if the user is trying to save to an existing file
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// Prevent instantiation
WITHOUT_CLASSIFICATION	// Prevent instantiation
WITHOUT_CLASSIFICATION	// VK_PLUS + CTRL_DOWN_MASK did not work...
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// Note: Windows user preferences are stored relative to: HKEY_CURRENT_USER\Software\JavaSoft\Prefs
WITHOUT_CLASSIFICATION	// Do not save, user does not want to overwrite
WITHOUT_CLASSIFICATION	// Only update the stored copy of the tree for a full save // refetch, because convertSubTree affects it
WITHOUT_CLASSIFICATION	// package protected to allow access from test code
WITHOUT_CLASSIFICATION	// requires JMeterTreeNode
WITHOUT_CLASSIFICATION	// we can only move a single node
WITHOUT_CLASSIFICATION	// move to the parent
WITHOUT_CLASSIFICATION	// move as a child of the next sibling
WITHOUT_CLASSIFICATION	// Commented as per sebb  // http://mail-archives.apache.org/mod_mbox/jmeter-dev/201307.mbox/%3CCAOGo0VZ0z3GMbfsq_gSB%2Bp7nTUqLng6Gy2ecvYbD8_AKb-Dt5w%40mail.gmail.com%3E
WITHOUT_CLASSIFICATION	// So elements can only be added as children
WITHOUT_CLASSIFICATION	// select the node
WITHOUT_CLASSIFICATION	// We must ask the user if it is ok to close current project
WITHOUT_CLASSIFICATION	// Load the file for this recent file command
WITHOUT_CLASSIFICATION	// Get the preference for the recent files
WITHOUT_CLASSIFICATION	// Create the menu item
WITHOUT_CLASSIFICATION	// Use the index as the name, used when processing the action
WITHOUT_CLASSIFICATION	// Set the KeyStroke to use
WITHOUT_CLASSIFICATION	// Add the menu item
WITHOUT_CLASSIFICATION	// Add separator as the last item
WITHOUT_CLASSIFICATION	// Update menu items to reflect recent files
WITHOUT_CLASSIFICATION	// Update menu items to reflect recent files
WITHOUT_CLASSIFICATION	// Check if the new file is already in the recent list
WITHOUT_CLASSIFICATION	// Add the new file at the start of the list
WITHOUT_CLASSIFICATION	// Remove the last item from the list if it was a brand new file
WITHOUT_CLASSIFICATION	// Store the recent files
WITHOUT_CLASSIFICATION	// Assume no recent files
WITHOUT_CLASSIFICATION	// Update the menu items
WITHOUT_CLASSIFICATION	// Get the menu item
WITHOUT_CLASSIFICATION	// At least one recent file menu item is visible
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$ // reduce font
WITHOUT_CLASSIFICATION	/* (non-Javadoc)     * @see org.apache.jmeter.gui.action.AbstractAction#getActionNames()     */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)     * @see org.apache.jmeter.gui.action.AbstractAction#doAction(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ $NON-NLS-2$
WITHOUT_CLASSIFICATION	// reset previous result
WITHOUT_CLASSIFICATION	// Hide Window on ESC
WITHOUT_CLASSIFICATION	// Do not save, user does not want to overwrite
WITHOUT_CLASSIFICATION	// Note: Windows user preferences are stored relative to: HKEY_CURRENT_USER\Software\JavaSoft\Prefs
WITHOUT_CLASSIFICATION	// Limit the length of the menu text if needed
WITHOUT_CLASSIFICATION	// If we are merging in another test plan, we know the test plan is dirty now
WITHOUT_CLASSIFICATION	// Only check if we have not found any differences so far
WITHOUT_CLASSIFICATION	// Do search on Enter
WITHOUT_CLASSIFICATION	// do search
WITHOUT_CLASSIFICATION	// Don't clear the plan
WITHOUT_CLASSIFICATION	// Get the file name of the current project
WITHOUT_CLASSIFICATION	// Check if the user has loaded any file
WITHOUT_CLASSIFICATION	// Check if the user wants to drop any changes
WITHOUT_CLASSIFICATION	// Check if the user wants to revert
WITHOUT_CLASSIFICATION	// Close the current project
WITHOUT_CLASSIFICATION	// Reload the project
WITHOUT_CLASSIFICATION	// Spaces are not allowed in property names read from files
WITHOUT_CLASSIFICATION	// e.g. windows xp => windows
WITHOUT_CLASSIFICATION	// get the JComponent from the visualizer
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ jmeter.properties
WITHOUT_CLASSIFICATION	// Engine may be null if it has not correctly started
WITHOUT_CLASSIFICATION	// GuiPackage.getInstance().getMainFrame().showStoppingMessage(name);
WITHOUT_CLASSIFICATION	// Minimal dimensions for dialog box
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// Don't clear the plan
WITHOUT_CLASSIFICATION	// Check if the user wants to drop any changes
WITHOUT_CLASSIFICATION	// Get the string given from the choose and check // the file extension.
WITHOUT_CLASSIFICATION	// Check if the user wants to create from template
WITHOUT_CLASSIFICATION	// Bottom buttons bar
WITHOUT_CLASSIFICATION	// center position and 50% of screen size
WITHOUT_CLASSIFICATION	// Created by XStream reading templates.xml
WITHOUT_CLASSIFICATION	/*         * N.B. Must use LinkedHashMap for field type         * XStream creates a plain HashMap if one uses Map as the field type.         */
WITHOUT_CLASSIFICATION	// templates i
WITHOUT_CLASSIFICATION	// field TemplateManager#templates  // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// field Template#name  // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// for relative links
WITHOUT_CLASSIFICATION	// i.e. no disabled icon found
WITHOUT_CLASSIFICATION	// Must therefore set the enabled icon so there is at least some // icon
WITHOUT_CLASSIFICATION	//        super(new JMeterTreeNode(new WorkBenchGui().createTestElement(), null)); //        TestElement tp = new TestPlanGui().createTestElement(); //        initTree(tp);
WITHOUT_CLASSIFICATION	//      super(new JMeterTreeNode(new WorkBench(), null)); //      TestElement tp = new TestPlan(); //      initTree(tp, new WorkBench());
WITHOUT_CLASSIFICATION	// The node can be added in non GUI mode at startup
WITHOUT_CLASSIFICATION	// Remove the workbench and testplan nodes
WITHOUT_CLASSIFICATION	// Insert the test plan node
WITHOUT_CLASSIFICATION	// endWindow = window;
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// Check for file lists specifically
WITHOUT_CLASSIFICATION	// Check for file lists specifically
WITHOUT_CLASSIFICATION	// This check the state of the TestElement and if returns false it // disable the loaded node
WITHOUT_CLASSIFICATION	// Init the tree // Assumes this is only called from GUI mode
WITHOUT_CLASSIFICATION	// Let others know that the tree content has changed. // This should not be necessary, but without it, nodes are not shown when the user // uses the Close menu item
WITHOUT_CLASSIFICATION	// Container endWindow; // JPopupMenu pop;
WITHOUT_CLASSIFICATION	// Get the Main Frame.
WITHOUT_CLASSIFICATION	// Close any Main Menu that is open
WITHOUT_CLASSIFICATION	// updateMainMenu(((JMeterGUIComponent) // getCurrentNode().getUserObject()).createPopupMenu());
WITHOUT_CLASSIFICATION	// hold the nodes that should be removed on drop
WITHOUT_CLASSIFICATION	// only allow a drag&drop inside the current jvm
WITHOUT_CLASSIFICATION	// sort the selected tree path by row
WITHOUT_CLASSIFICATION	// if child and a parent are selected : only keep the parent
WITHOUT_CLASSIFICATION	// remove unneeded nodes
WITHOUT_CLASSIFICATION	// the tree accepts a jmx file 
WITHOUT_CLASSIFICATION	// the copy is disabled
WITHOUT_CLASSIFICATION	// Do not allow a drop on the drag source selections.
WITHOUT_CLASSIFICATION	// TestPlan and WorkBench are the only children of the root
WITHOUT_CLASSIFICATION	// Do not allow a non-leaf node to be moved into one of its children
WITHOUT_CLASSIFICATION	// re-use node association logic
WITHOUT_CLASSIFICATION	// deal with the jmx files
WITHOUT_CLASSIFICATION	// Get drop location and mode
WITHOUT_CLASSIFICATION	// drop mode == DropMode.ON
WITHOUT_CLASSIFICATION	// first copy the children as the call to copy.add will modify the collection we're iterating on
WITHOUT_CLASSIFICATION	// expand the destination node
WITHOUT_CLASSIFICATION	// If icon has not been defined, then use GUI_CLASS property
WITHOUT_CLASSIFICATION	// may be null during startup
WITHOUT_CLASSIFICATION	// Override in order to provide type safety
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$//$NON-NLS-2$
WITHOUT_CLASSIFICATION	// close.setPreferredSize(d);
WITHOUT_CLASSIFICATION	/*         * c.gridx = 1; c.gridy = 2; g.setConstraints(close, c);         * panel.add(close);         */
WITHOUT_CLASSIFICATION	// JFileChooser jfc = null;
WITHOUT_CLASSIFICATION	// for use by test code only
WITHOUT_CLASSIFICATION	// // Instance Variables //
WITHOUT_CLASSIFICATION	// // Constructors //
WITHOUT_CLASSIFICATION	// // Modifying //
WITHOUT_CLASSIFICATION	// // Override the implementations of the superclass, forwarding all methods // from the CellEditor interface to our delegate. //
WITHOUT_CLASSIFICATION	// // Implementing the TreeCellEditor Interface //
WITHOUT_CLASSIFICATION	// // Implementing the CellEditor Interface //
WITHOUT_CLASSIFICATION	// // Protected EditorDelegate class //
WITHOUT_CLASSIFICATION	// This won't work right if we remove components. But we don't, so I'm // not going to worry about it right now.
WITHOUT_CLASSIFICATION	// Datefields are not thread-safe // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// HELP MENU //$NON-NLS-1$
WITHOUT_CLASSIFICATION	// OPTIONS MENU //$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	// Dummy constructor to allo JUnit tests to work
WITHOUT_CLASSIFICATION	// Do nothing; the current time will be returned
WITHOUT_CLASSIFICATION	/*     * Convert position in buffer to Calendar type Assumes that pos >=0 (which     * is true for getCaretPosition())     */
WITHOUT_CLASSIFICATION	// if beyond the end // then set to the end
WITHOUT_CLASSIFICATION	/*     * Update the current field. The addend is only expected to be +1/-1, but     * other values will work. N.B. the roll() method only supports changes by a     * single unit - up or down     */
WITHOUT_CLASSIFICATION	// JMenu reportMenu; // JMenuItem analyze;
WITHOUT_CLASSIFICATION	// Restore position
WITHOUT_CLASSIFICATION	// List for recent files menu items
WITHOUT_CLASSIFICATION	// Lists for remote engines menu items
WITHOUT_CLASSIFICATION	// If the Add menu already exists, remove it.
WITHOUT_CLASSIFICATION	// Insert the Add menu as the first menu item in the Edit menu.
WITHOUT_CLASSIFICATION	// Called by MainFrame#setEditMenu() which is called by EditCommand#doAction and GuiPackage#localeChanged
WITHOUT_CLASSIFICATION	// There was a NPE being thrown without the null check here.. JKB
WITHOUT_CLASSIFICATION	// If we are enabling the Edit-->Add menu item, then we also need to // enable the Edit menu. The Edit menu may already be enabled, but // there's no harm it trying to enable it again.
WITHOUT_CLASSIFICATION	// show the classname to the user
WITHOUT_CLASSIFICATION	// This is used by the ChangeLanguage class to define the Locale
WITHOUT_CLASSIFICATION	// Also used by org.apache.jmeter.resources.PackageTest
WITHOUT_CLASSIFICATION	/*         * Note: the item name is used by ChangeLanguage to create a Locale for         * that language, so need to ensure that the language strings are valid         * If they exist, use the Locale language constants.         * Also, need to ensure that the names are valid resource entries too.         */
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	//
WITHOUT_CLASSIFICATION	//
WITHOUT_CLASSIFICATION	//
WITHOUT_CLASSIFICATION	//
WITHOUT_CLASSIFICATION	//
WITHOUT_CLASSIFICATION	//
WITHOUT_CLASSIFICATION	//
WITHOUT_CLASSIFICATION	//Overrides superclass method
WITHOUT_CLASSIFICATION	// From the Java Look and Feel Guidelines: If all items in a menu // are disabled, then disable the menu. Makes sense.
WITHOUT_CLASSIFICATION	// Listener on model changes to maintain correct focusability
WITHOUT_CLASSIFICATION	// Add the recent files, which will also add a separator that is // visible when needed
WITHOUT_CLASSIFICATION	// override action behaviour
WITHOUT_CLASSIFICATION	// This is also used by LookAndFeelCommand
WITHOUT_CLASSIFICATION	// For testing only at present
WITHOUT_CLASSIFICATION	// Mostly delegates to model
WITHOUT_CLASSIFICATION	//Set default single model
WITHOUT_CLASSIFICATION	// Next two methods implement new API by delegation to model
WITHOUT_CLASSIFICATION	// Restore state display
WITHOUT_CLASSIFICATION	//Listen for enable changes
WITHOUT_CLASSIFICATION	//Empty override of superclass method
WITHOUT_CLASSIFICATION	//Convenience cast
WITHOUT_CLASSIFICATION	// Assume that the UI has not changed since the checkbos was created
WITHOUT_CLASSIFICATION	// Iterate state
WITHOUT_CLASSIFICATION	// Overrides of superclass methods
WITHOUT_CLASSIFICATION	// Fire ActionEvent
WITHOUT_CLASSIFICATION	// force the events to fire
WITHOUT_CLASSIFICATION	// Empty overrides of superclass methods
WITHOUT_CLASSIFICATION	// Send ItemEvent
WITHOUT_CLASSIFICATION	//Set internal state
WITHOUT_CLASSIFICATION	// Send ChangeEvent
WITHOUT_CLASSIFICATION	// derived from: http://www.coderanch.com/t/342563/GUI/java/TriState-CheckBox
WITHOUT_CLASSIFICATION	// Nimbus works - after a fashion - with this
WITHOUT_CLASSIFICATION	//            drawCross(g, x, y);
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$;
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	// href="#"
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// This won't work right if we remove components. But we don't, so I'm // not going to worry about it right now.
WITHOUT_CLASSIFICATION	/*     *  Predefined strings for makeMenu().     *  These are used as menu categories in the menuMap Hashmap,     *  and also for resource lookup in messages.properties    */
WITHOUT_CLASSIFICATION	// Needed for all but Nimbus // Nimbus works - after a fashion - with this // Nimbus works - after a fashion - with this // reset
WITHOUT_CLASSIFICATION	//        private void drawCross(Graphics g, int x, int y) { //            g.drawLine(x + (iconWidth - 4), y + 2, x + 3, y + (iconHeight - 5)); //            g.drawLine(x + (iconWidth - 4), y + 3, x + 3, y + (iconHeight - 4)); //            g.drawLine(x + 3, y + 2, x + (iconWidth - 4), y + (iconHeight - 5)); //            g.drawLine(x + 3, y + 3, x + (iconWidth - 4), y + (iconHeight - 4)); //        }
WITHOUT_CLASSIFICATION	// paintIcon
WITHOUT_CLASSIFICATION	// For use by test code only
WITHOUT_CLASSIFICATION	// MENU_ADD_xxx - controls which items are in the ADD menu // MENU_PARENT_xxx - controls which items are in the Insert Parent menu
WITHOUT_CLASSIFICATION	// if type is unknown
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-1$ // Don't try to instantiate these
WITHOUT_CLASSIFICATION	// No point instantiating class
WITHOUT_CLASSIFICATION	// Allow headless testing
WITHOUT_CLASSIFICATION	// Don't add it again
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// Empty box //$NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// Can't add a Workbench anywhere
WITHOUT_CLASSIFICATION	// Can't add a TestPlan anywhere
WITHOUT_CLASSIFICATION	// Force TestFragment to only be pastable under a Test Plan
WITHOUT_CLASSIFICATION	// allow everything else
WITHOUT_CLASSIFICATION	// Samplers and Controllers need not apply ... // but AbstractThreadGroup (Controller) is OK
WITHOUT_CLASSIFICATION	// AbstractThreadGroup is only allowed under a TestPlan
WITHOUT_CLASSIFICATION	// Includes thread group; anything goes
WITHOUT_CLASSIFICATION	// Samplers and Controllers need not apply ...
WITHOUT_CLASSIFICATION	// All other
WITHOUT_CLASSIFICATION	// Is any node an instance of one of the classes?
WITHOUT_CLASSIFICATION	// Is any node an instance of one of the classes, but not an exception?
WITHOUT_CLASSIFICATION	// Methods used for Test cases
WITHOUT_CLASSIFICATION	// all table cells are editable
WITHOUT_CLASSIFICATION	// Close action dialog box when tapping Escape key
WITHOUT_CLASSIFICATION	// Prepare dialog box
WITHOUT_CLASSIFICATION	// determine location on screen
WITHOUT_CLASSIFICATION	// must be CLOSE or SAVE_CLOSE COMMANDS
WITHOUT_CLASSIFICATION	// text backup
WITHOUT_CLASSIFICATION	// double click
WITHOUT_CLASSIFICATION	// view only
WITHOUT_CLASSIFICATION	// double (pressed) click
WITHOUT_CLASSIFICATION	// in main table (evt mousePressed because cell is editable) 
WITHOUT_CLASSIFICATION	// else do nothing (cell isn't a string to edit)
WITHOUT_CLASSIFICATION	// add the button to the button group
WITHOUT_CLASSIFICATION	// add the button
WITHOUT_CLASSIFICATION	// implicit return empty toolbar if icons == null
WITHOUT_CLASSIFICATION	// Get the standard toolbar properties
WITHOUT_CLASSIFICATION	// already reported by IconToolbarBean
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// in seconds
WITHOUT_CLASSIFICATION	// in seconds
WITHOUT_CLASSIFICATION	// If a table cell is being edited, we must cancel the editing before // deleting the row
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-2$
WITHOUT_CLASSIFICATION	//this.setPreferredSize(new Dimension(400,150));
WITHOUT_CLASSIFICATION	// i.e. bypass the Functors
WITHOUT_CLASSIFICATION	// Mainly needed for unit test Serialisable tests
WITHOUT_CLASSIFICATION	/*     * N.B. NoThreadClone is used to ensure that the testStarted() methods will share the same     * instance as the sampleOccured() methods, so the testStarted() method can fetch the     * Totals accumulator object for the samples to be stored in.     */
WITHOUT_CLASSIFICATION	/*     * Ensure that a report is not skipped if we are slightly late in checking     * the time.     */
WITHOUT_CLASSIFICATION	/*     * This map allows summarisers with the same name to contribute to the same totals.     */
WITHOUT_CLASSIFICATION	//@GuardedBy("accumulators") - needed to ensure consistency between this and instanceCount
WITHOUT_CLASSIFICATION	//@GuardedBy("accumulators") // number of active tests
WITHOUT_CLASSIFICATION	/*     * Cached copy of Totals for this instance.     * The variables do not need to be synchronised,     * as they are not shared between threads     * However the contents do need to be synchronized.     */
WITHOUT_CLASSIFICATION	//@GuardedBy("myTotals")
WITHOUT_CLASSIFICATION	// Name of the accumulator. Set up by testStarted().
WITHOUT_CLASSIFICATION	/*     * Constructor is initially called once for each occurrence in the test plan.     * For GUI, several more instances are created.     * Then clear is called at start of test.     * Called several times during test startup.     * The name will not necessarily have been set at this point.     */
WITHOUT_CLASSIFICATION	/*     * Contains the items needed to collect stats for a summariser     *     */
WITHOUT_CLASSIFICATION	// copy the data to minimise the synch time
WITHOUT_CLASSIFICATION	// stop double-reporting
WITHOUT_CLASSIFICATION	// Only if we have updated them
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // for intermediate use // output line buffer
WITHOUT_CLASSIFICATION	// Rate is effectively infinite
WITHOUT_CLASSIFICATION	// e.g. NullPointerException
WITHOUT_CLASSIFICATION	// Avalon only
WITHOUT_CLASSIFICATION	// Avalon only
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// Only print final delta if there were some samples in the delta // and there has been at least one sample reported previously
WITHOUT_CLASSIFICATION	// rounded seconds // No point displaying decimals (less than 1% error) // decimal would be zero
WITHOUT_CLASSIFICATION	// fractional seconds // This will round
WITHOUT_CLASSIFICATION	/*     * The testStarted/testEnded methods are called at the start and end of a test.     *     * However, when a test is run on multiple nodes, there is no guarantee that all the     * testStarted() methods will be called before all the threadStart() or sampleOccurred()     * methods for other threads - nor that testEnded() will only be called after all     * sampleOccurred() calls. The ordering is only guaranteed within a single test.     *     */
WITHOUT_CLASSIFICATION	// We're not done yet
WITHOUT_CLASSIFICATION	// boolean autoScale = true;
WITHOUT_CLASSIFICATION	// setup drawing area
WITHOUT_CLASSIFICATION	// draw grid
WITHOUT_CLASSIFICATION	// draw axis
WITHOUT_CLASSIFICATION	// draw data lines
WITHOUT_CLASSIFICATION	/*     * Constructor is initially called once for each occurrence in the test plan     * For GUI, several more instances are created Then clear is called at start     * of test Called several times during test startup The name will not     * necessarily have been set at this point.     */
WITHOUT_CLASSIFICATION	// e.g. in non-GUI mode
WITHOUT_CLASSIFICATION	// This string is used to identify local test runs, so must not be a valid host name // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// Static variables
WITHOUT_CLASSIFICATION	// Lock used to guard static mutable variables
WITHOUT_CLASSIFICATION	//@GuardedBy("LOCK")
WITHOUT_CLASSIFICATION	//@GuardedBy("LOCK")
WITHOUT_CLASSIFICATION	/*     * Keep track of the file writer and the configuration,     * as the instance used to close them is not the same as the instance that creates     * them. This means one cannot use the saved PrintWriter or use getSaveConfig()     */
WITHOUT_CLASSIFICATION	// Instance variables (guarded by volatile)
WITHOUT_CLASSIFICATION	// Unfortunately AbstractTestElement does not call super.clone()
WITHOUT_CLASSIFICATION	// successOnly and errorOnly cannot both be set
WITHOUT_CLASSIFICATION	// No need for the hook now
WITHOUT_CLASSIFICATION	// Only add the hook once
WITHOUT_CLASSIFICATION	// No point reading the file if there's no visualiser
WITHOUT_CLASSIFICATION	// probably Avalon format
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// Only for use by CSVSaveService
WITHOUT_CLASSIFICATION	/*     * Constructor is initially called once for each occurrence in the test plan     * For GUI, several more instances are created Then clear is called at start     * of test Called several times during test startup The name will not     * necessarily have been set at this point.     */
WITHOUT_CLASSIFICATION	//@GuardedBy("LOCK")
WITHOUT_CLASSIFICATION	//@GuardedBy("LOCK")
WITHOUT_CLASSIFICATION	// We are processing XML // Assume XStream
WITHOUT_CLASSIFICATION	// Ensure that the sample save config is not shared between copied nodes // N.B. clone only seems to be used for client-server tests
WITHOUT_CLASSIFICATION	// Find the name of the directory containing the file // and create it - if there is one
WITHOUT_CLASSIFICATION	// TODO Charset ? // Get the first line, and see if it is XML
WITHOUT_CLASSIFICATION	// Can't do it as a static initialisation, because SaveService // is being constructed when this is called
WITHOUT_CLASSIFICATION	// Write the EOL separately so we generate LF line ends on Unix and Windows // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// Write the EOL separately so we generate LF line ends on Unix and Windows // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// Added in version 1.1 // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// returns false if directory already exists, so need to check again
WITHOUT_CLASSIFICATION	// else if might have been created by another process so not a problem
WITHOUT_CLASSIFICATION	// returns false if the file did not contain the terminator
WITHOUT_CLASSIFICATION	// found the string
WITHOUT_CLASSIFICATION	// reads to end of line OR end of file
WITHOUT_CLASSIFICATION	// !saveAsXml
WITHOUT_CLASSIFICATION	// Truncate the file
WITHOUT_CLASSIFICATION	// should throw exception back to caller
WITHOUT_CLASSIFICATION	// Used by: MonitorHealthVisualizer.add(SampleResult res)
WITHOUT_CLASSIFICATION	//+ JMX property names; do not change
WITHOUT_CLASSIFICATION	//- JMX property names
WITHOUT_CLASSIFICATION	/*     * Constructor for use during startup (intended for non-GUI use) @param name     * of summariser     */
WITHOUT_CLASSIFICATION	/*     * This is called once for each occurrence in the test plan, before the     * start of the test. The super.clear() method clears the name (and all     * other properties), so it is called last.     */
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// expected
WITHOUT_CLASSIFICATION	//NOTUSED private static final String DATABASE = "db"; // $NON_NLS-1$
WITHOUT_CLASSIFICATION	// Only for use by CSVSaveService
WITHOUT_CLASSIFICATION	// Associate sample with file name
WITHOUT_CLASSIFICATION	// Mutable int to keep track of sample count
WITHOUT_CLASSIFICATION	// chunk the output if necessary
WITHOUT_CLASSIFICATION	// Should we save the sample?
WITHOUT_CLASSIFICATION	// finish processing samples
WITHOUT_CLASSIFICATION	// Needed to avoid Class cast error in Clear.java
WITHOUT_CLASSIFICATION	// may be the empty string
WITHOUT_CLASSIFICATION	// client log file
WITHOUT_CLASSIFICATION	/* * N.B. to add a new field, remember the following * - static _xyz * - instance xyz=_xyz * - clone s.xyz = xyz (perhaps) * - setXyz(boolean) * - saveXyz() * - update SampleSaveConfigurationConverter to add new fields to marshall() and shouldSerialiseMember() * - update SampleResultConverter and/or HTTPSampleConverter * - update CSVSaveService: CSV_XXXX, makeResultFromDelimitedString, printableFieldNamesToString, static{} * - update messages.properties to add save_xyz entry * - update jmeter.properties to add new property * - update listeners.xml to add new property, CSV and XML names etc. * - take screenshot sample_result_config.png * - update listeners.xml and component_reference.xml with new dimensions (might not change) * */
WITHOUT_CLASSIFICATION	// Not currently needed by any Remoteable classes // Anyway, would probably be too expensive in terms of network traffic //  // void testIterationStart(LoopIterationEvent event);
WITHOUT_CLASSIFICATION	// ensure output is flushed
WITHOUT_CLASSIFICATION	// server log file
WITHOUT_CLASSIFICATION	/** * Holds details of which sample attributes to save. * * The pop-up dialogue for this is created by the class SavePropertyDialog, which assumes: * For each field XXX * - methods have the signature "boolean saveXXX()" * - a corresponding "void setXXX(boolean)" method * - messages.properties contains the key save_XXX * * */
WITHOUT_CLASSIFICATION	// $NON_NLS-1$
WITHOUT_CLASSIFICATION	// $NON_NLS-1$
WITHOUT_CLASSIFICATION	// $NON_NLS-1$
WITHOUT_CLASSIFICATION	// $NON_NLS-1$
WITHOUT_CLASSIFICATION	// $NON_NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON_NLS-1$
WITHOUT_CLASSIFICATION	// --------------------------------------------------------------------- // PROPERTY FILE CONSTANTS // ---------------------------------------------------------------------
WITHOUT_CLASSIFICATION	// $NON_NLS-1$
WITHOUT_CLASSIFICATION	// Initialise values from properties
WITHOUT_CLASSIFICATION	// Save bytes read // $NON_NLS-1$
WITHOUT_CLASSIFICATION	// Save URL // $NON_NLS-1$
WITHOUT_CLASSIFICATION	// Save fileName for ResultSaver // $NON_NLS-1$
WITHOUT_CLASSIFICATION	// Save hostname for ResultSaver // $NON_NLS-1$
WITHOUT_CLASSIFICATION	// Don't save this, as it is derived from the time format
WITHOUT_CLASSIFICATION	// $NON_NLS-1$ // $NON_NLS-1$ // $NON_NLS-1$ // $NON_NLS-1$ // $NON_NLS-1$ // $NON_NLS-1$ // $NON_NLS-1$
WITHOUT_CLASSIFICATION	// Prepare for a pretty date
WITHOUT_CLASSIFICATION	/* Make transient as we don't want to save the SimpleDataFormat class     * Also, there's currently no way to change the value via the GUI, so changing it     * later means editting the JMX, or recreating the Listener.     */
WITHOUT_CLASSIFICATION	// Defaults from properties:
WITHOUT_CLASSIFICATION	// reversed compare allows for null
WITHOUT_CLASSIFICATION	// Don't save this, as not settable via GUI
WITHOUT_CLASSIFICATION	// Don't save this - only needed for processing CSV headers currently
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// optional processing instruction for line 2; e.g. // <?xml-stylesheet type="text/xsl" href="../extras/jmeter-results-detail-report_21.xsl"?> // $NON_NLS-1$
WITHOUT_CLASSIFICATION	// $NON_NLS-1$ // N.B. Remember to update the equals and hashCode methods when adding new variables.
WITHOUT_CLASSIFICATION	// Give access to initial configuration
WITHOUT_CLASSIFICATION	//is derived from properties only
WITHOUT_CLASSIFICATION	// We know we are comparing to another SampleSaveConfiguration
WITHOUT_CLASSIFICATION	///////////////////// Start of standard save/set access methods /////////////////////
WITHOUT_CLASSIFICATION	// as per 2.0 branch
WITHOUT_CLASSIFICATION	///////////////// End of standard field accessors /////////////////////
WITHOUT_CLASSIFICATION	// maintain relationship
WITHOUT_CLASSIFICATION	// Defaults to empty;
WITHOUT_CLASSIFICATION	// Used by old Save service
WITHOUT_CLASSIFICATION	// Used by SampleSaveConfigurationConverter.unmarshall()
WITHOUT_CLASSIFICATION	// Get appropriate sender class governed by the behaviour set in the JMeter property
WITHOUT_CLASSIFICATION	// Static fields are set by the server when the class is constructed
WITHOUT_CLASSIFICATION	// @GuardedBy("sampleStore")
WITHOUT_CLASSIFICATION	// Locate the statistical sample colector
WITHOUT_CLASSIFICATION	// store the new statistical result collector
WITHOUT_CLASSIFICATION	// add a new wrapper samplevent
WITHOUT_CLASSIFICATION	// Checking for and creating initial timestamp to check against
WITHOUT_CLASSIFICATION	// synchronized(sampleStore)
WITHOUT_CLASSIFICATION	// List of variable names to be saved in JTL files
WITHOUT_CLASSIFICATION	// The values. Entries may be null, but there will be the correct number.
WITHOUT_CLASSIFICATION	// The hostname cannot change during a run, so safe to cache it just once
WITHOUT_CLASSIFICATION	/*     * Only for Unit tests     */
WITHOUT_CLASSIFICATION	// Needs to be accessible from Test code
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	//OK
WITHOUT_CLASSIFICATION	// variables maintained by server code // @GuardedBy("sampleStore") // maintain separate count of samples for speed
WITHOUT_CLASSIFICATION	/* The default used by {@link #setResponseData(String, String)} */
WITHOUT_CLASSIFICATION	/* empty arrays which can be returned instead of null */
WITHOUT_CLASSIFICATION	// Never return null
WITHOUT_CLASSIFICATION	// Never return null
WITHOUT_CLASSIFICATION	// Never return null
WITHOUT_CLASSIFICATION	// Never return null
WITHOUT_CLASSIFICATION	// e.g. text/html; charset=utf-8
WITHOUT_CLASSIFICATION	// TODO timeStamp == 0 means either not yet initialised or no stamp available (e.g. when loading a results file)
WITHOUT_CLASSIFICATION	// Allow for non-sample time
WITHOUT_CLASSIFICATION	// Don't return null if not set
WITHOUT_CLASSIFICATION	//@GuardedBy("this"")
WITHOUT_CLASSIFICATION	// (is this really the character set?) e.g. // ISO-8895-1, UTF-8
WITHOUT_CLASSIFICATION	// Allows override of sample size in case sampler does not want to store all the data
WITHOUT_CLASSIFICATION	// Allow read-only access from test code
WITHOUT_CLASSIFICATION	// How long between checks of nanotime; default 5000ms; set to <=0 to disable the thread
WITHOUT_CLASSIFICATION	// $NON-NLS-1$;
WITHOUT_CLASSIFICATION	// Make sure we start with a reasonable value
WITHOUT_CLASSIFICATION	// Allow testcode access to the settings
WITHOUT_CLASSIFICATION	// Allow test code to change the default useNanoTime setting
WITHOUT_CLASSIFICATION	// Allow test code to change the default useNanoTime and nanoThreadSleep settings
WITHOUT_CLASSIFICATION	// Helper method to get 1 ms resolution timing.
WITHOUT_CLASSIFICATION	// Helper method to maintain timestamp relationships
WITHOUT_CLASSIFICATION	/*     * For use by SaveService only.     *     * @param stamp -     *            this may be a start time or an end time     * @param elapsed     */
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	//OK // TODO ??
WITHOUT_CLASSIFICATION	// Create unique object as marker for end of queue
WITHOUT_CLASSIFICATION	//OK //OK //OK //OK // files is created automatically, and applies per instance //OK
WITHOUT_CLASSIFICATION	//OK //OK //OK
WITHOUT_CLASSIFICATION	//OK //OK // Don't copy this; it is per instance resultFileName = res.resultFileName;
WITHOUT_CLASSIFICATION	// TODO ?? //OK //OK
WITHOUT_CLASSIFICATION	// N.B. default charset is used deliberately here
WITHOUT_CLASSIFICATION	// N.B. default charset is used deliberately here
WITHOUT_CLASSIFICATION	// Extract charset and store as DataEncoding // N.B. The meta tag: // <META http-equiv="content-type" content="text/html; charset=foobar"> // is now processed by HTTPSampleResult#getDataEncodingWithDefault // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// handle: ContentType: text/plain; charset=ISO-8859-1; format=flowed
WITHOUT_CLASSIFICATION	// Check for quoted string // $NON-NLS-1$ // remove quotes
WITHOUT_CLASSIFICATION	// List of types that are known to be binary
WITHOUT_CLASSIFICATION	// List of types that are known to be ascii, although they may appear to be binary
WITHOUT_CLASSIFICATION	/*     * Determine if content-type is known to be binary, i.e. not displayable as text.     *     * @param ct content type     * @return true if content-type is of type binary.     */
WITHOUT_CLASSIFICATION	/*     * Helper methods N.B. setStartTime must be called before setEndTime     *     * setStartTime is used by HTTPSampleResult to clone the parent sampler and     * allow the original start time to be kept     */
WITHOUT_CLASSIFICATION	// how many times we had to wait to queue a sample
WITHOUT_CLASSIFICATION	// Can now afford to wait a bit longer between checks
WITHOUT_CLASSIFICATION	// created by client 
WITHOUT_CLASSIFICATION	// created by server in readResolve method
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// Note: this is an instance field (and is not transient), so is created by the JMeter client // and propagated to the server instance by RMI. // [a static field would be recreated on the server, and would pick up the server properties] // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// client        
WITHOUT_CLASSIFICATION	// client log file
WITHOUT_CLASSIFICATION	// server log file
WITHOUT_CLASSIFICATION	// Checking for and creating initial timestamp to check against
WITHOUT_CLASSIFICATION	// synchronized(sampleStore)
WITHOUT_CLASSIFICATION	// how long we had to wait (nanoSeconds)
WITHOUT_CLASSIFICATION	// for reading from CSV files // ignored currently
WITHOUT_CLASSIFICATION	// returns null if nothing on queue currently
WITHOUT_CLASSIFICATION	// Wait longer than a clock pulse (generally 10-15ms) // Catch an early clock pulse to reduce slop.
WITHOUT_CLASSIFICATION	// OK because sampleStore is of type ArrayList<SampleEvent>
WITHOUT_CLASSIFICATION	// Created by SampleSenderFactory
WITHOUT_CLASSIFICATION	//Strip the response data before writing, but only for a successful request.
WITHOUT_CLASSIFICATION	// we failed to add the element first time
WITHOUT_CLASSIFICATION	// server        
WITHOUT_CLASSIFICATION	// try to process as many as possible
WITHOUT_CLASSIFICATION	// Compute bytes before stripping
WITHOUT_CLASSIFICATION	// Configuration items, set up by readResolve
WITHOUT_CLASSIFICATION	// should be a user provided class name
WITHOUT_CLASSIFICATION	// Static fields are resolved on the server
WITHOUT_CLASSIFICATION	// instance fields are copied from the client instance
WITHOUT_CLASSIFICATION	// Set clonedSet;
WITHOUT_CLASSIFICATION	// Server-only work item
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// Extended property name // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// clonedSet = new HashSet();
WITHOUT_CLASSIFICATION	// Need to maintain our own elapsed timer to ensure more accurate aggregation
WITHOUT_CLASSIFICATION	// May be called by XStream
WITHOUT_CLASSIFICATION	// Copy data that is shared between samples (i.e. the key items):
WITHOUT_CLASSIFICATION	// Assume result is OK // because we add the sample count in later
WITHOUT_CLASSIFICATION	// Add Sample Counter
WITHOUT_CLASSIFICATION	// Add Error Counter
WITHOUT_CLASSIFICATION	// Overrides SampleResult
WITHOUT_CLASSIFICATION	// for reading CSV files
WITHOUT_CLASSIFICATION	// superclass is not typed
WITHOUT_CLASSIFICATION	// Ensure output follows version
WITHOUT_CLASSIFICATION	// Names of DataHolder entries for JTL processing // $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// Names of DataHolder entries for JMX processing // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// Override wrapMapper in order to insert the Wrapper in the chain
WITHOUT_CLASSIFICATION	// Provide our own aliasing using strings rather than classes
WITHOUT_CLASSIFICATION	// Translate alias to classname and then delegate to wrapped class
WITHOUT_CLASSIFICATION	// Translate to alias and then delegate to wrapped class
WITHOUT_CLASSIFICATION	// superclass does not use types 
WITHOUT_CLASSIFICATION	// was type, but that caused FindBugs warning
WITHOUT_CLASSIFICATION	// This is needed to stop XStream keeping copies of each class
WITHOUT_CLASSIFICATION	// The XML header, with placeholder for encoding, since that is controlled by property // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// Default file name // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// Property name used to define file name // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// Default to overall format, and then to version 2.2
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// Define file format property names // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// Define file format versions // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// Holds the mappings from the saveservice properties file // Key: alias Entry: full class name // There may be multiple aliases which map to the same class
WITHOUT_CLASSIFICATION	// Holds the reverse mappings // Key: full class name Entry: primary alias
WITHOUT_CLASSIFICATION	// This is written to JMX files by ScriptWrapperConverter // read from properties file; written to JMX files
WITHOUT_CLASSIFICATION	// Must match _version property value in saveservice.properties // used to ensure saveservice.properties and SaveService are updated simultaneously // Expected version $NON-NLS-1$
WITHOUT_CLASSIFICATION	// Internal information only // read from saveservice.properties file// $NON-NLS-1$ // Must match Revision id value in saveservice.properties,  // used to ensure saveservice.properties and SaveService are updated simultaneously // Expected value $NON-NLS-1$ // read from properties file// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// Helper method to simplify alias creation from properties
WITHOUT_CLASSIFICATION	// Can have multiple aliases for same target classname
WITHOUT_CLASSIFICATION	// Load the alias properties
WITHOUT_CLASSIFICATION	// now create the aliases
WITHOUT_CLASSIFICATION	// Remove the leading "_"
WITHOUT_CLASSIFICATION	// For converters to use
WITHOUT_CLASSIFICATION	// Called by Save function
WITHOUT_CLASSIFICATION	// Get the OutputWriter to use
WITHOUT_CLASSIFICATION	// Use deprecated method, to avoid duplicating code
WITHOUT_CLASSIFICATION	// Use deprecated method, to avoid duplicating code
WITHOUT_CLASSIFICATION	// Ensure terminated properly
WITHOUT_CLASSIFICATION	// Used by Test code
WITHOUT_CLASSIFICATION	// Used by Test code
WITHOUT_CLASSIFICATION	// Get the InputReader to use
WITHOUT_CLASSIFICATION	// Used by ResultCollector.sampleOccurred(SampleEvent event)
WITHOUT_CLASSIFICATION	// Used by ResultCollector#recordStats()
WITHOUT_CLASSIFICATION	// Routines for TestSaveService
WITHOUT_CLASSIFICATION	// Allow test code to check for spurious class references
WITHOUT_CLASSIFICATION	//boolean OK = true;
WITHOUT_CLASSIFICATION	// don't bother checking class is present if it is to be updated
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// Extract version digits from String of the form #Revision: n.mm # // (where # is actually $ above)
WITHOUT_CLASSIFICATION	// Check if we have a encoding to use from properties
WITHOUT_CLASSIFICATION	// Check if we have a encoding to use from properties
WITHOUT_CLASSIFICATION	// Check if we have a encoding to use from properties
WITHOUT_CLASSIFICATION	// We use the default character set encoding of the JRE
WITHOUT_CLASSIFICATION	// We use the default character set encoding of the JRE
WITHOUT_CLASSIFICATION	// We use the default character set encoding of the JRE
WITHOUT_CLASSIFICATION	// Used by ResultCollector when creating output files
WITHOUT_CLASSIFICATION	// Write XML header if we have the charset to use for encoding
WITHOUT_CLASSIFICATION	// We do not use getEncoding method of Writer, since that returns // the historical name
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// --------------------------------------------------------------------- // XML RESULT FILE CONSTANTS AND FIELD NAME CONSTANTS // ---------------------------------------------------------------------
WITHOUT_CLASSIFICATION	// Used by ScriptWrapperConverter
WITHOUT_CLASSIFICATION	// Shared with TestElementSaver // $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// Probably no point in converting this to return a SampleEvent
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-2$
WITHOUT_CLASSIFICATION	// Called by SaveService.loadTree(InputStream reader) if XStream loading fails
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-2$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-2$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-2$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-2$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-2$
WITHOUT_CLASSIFICATION	// OK // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// Do upgrade translation:
WITHOUT_CLASSIFICATION	// must always agree
WITHOUT_CLASSIFICATION	// Delete any properties whose name converts to the empty string
WITHOUT_CLASSIFICATION	// Create the property:
WITHOUT_CLASSIFICATION	// OK
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-2$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-2$ // $NON-NLS-1$ // $NON-NLS-2$
WITHOUT_CLASSIFICATION	// Called by ResultCollector#loadExistingFile() if XStream loading fails
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// --------------------------------------------------------------------- // ADDITIONAL CSV RESULT FILE CONSTANTS AND FIELD NAME CONSTANTS // ---------------------------------------------------------------------
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// Used to enclose variable name labels, to distinguish from any of the // above labels // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// Initial config from properties
WITHOUT_CLASSIFICATION	// Date formats to try if the time format does not parse as milliseconds
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ (for compatibility, this is the original default)
WITHOUT_CLASSIFICATION	// Enough to read the header column names // Get the first line, and see if it is the header
WITHOUT_CLASSIFICATION	// not a valid header
WITHOUT_CLASSIFICATION	// may change the format later // restart from beginning
WITHOUT_CLASSIFICATION	// may be updated
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// This assumes the header names are all single words with no spaces // word followed by 0 or more repeats of (non-word char + word) // where the non-word char (\2) is the same // e.g. abc|def|ghi but not abd|def~ghi // $NON-NLS-1$ // last entries may be quoted strings
WITHOUT_CLASSIFICATION	// Save the name for error reporting
WITHOUT_CLASSIFICATION	// method is only ever called from one thread at a time // so it's OK to use a static DateFormat
WITHOUT_CLASSIFICATION	// can this happen?
WITHOUT_CLASSIFICATION	// Strip off the trailing delimiter
WITHOUT_CLASSIFICATION	// Map header names to set() methods
WITHOUT_CLASSIFICATION	// These entries must be in the same order as columns are saved/restored.
WITHOUT_CLASSIFICATION	// Both these are needed in the list even though they set the same // variable
WITHOUT_CLASSIFICATION	// Try // default // delimiter
WITHOUT_CLASSIFICATION	// now validate the // result
WITHOUT_CLASSIFICATION	// failed to recognise the header
WITHOUT_CLASSIFICATION	// We know the column names all exist, so create the config
WITHOUT_CLASSIFICATION	// Check if the line is a header
WITHOUT_CLASSIFICATION	// Check for Quoted variable names
WITHOUT_CLASSIFICATION	// they are always last
WITHOUT_CLASSIFICATION	// unknown column name
WITHOUT_CLASSIFICATION	// out of order
WITHOUT_CLASSIFICATION	// Don't add delimiter first time round
WITHOUT_CLASSIFICATION	// These methods handle parameters that could contain delimiters or // quotes:
WITHOUT_CLASSIFICATION	// These methods handle parameters that cannot contain delimiters or // quotes
WITHOUT_CLASSIFICATION	// Find the first non-null message
WITHOUT_CLASSIFICATION	// Need both sample and error count to be any use
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// NOOP
WITHOUT_CLASSIFICATION	// did not find \n, put the character // back
WITHOUT_CLASSIFICATION	// Need to append something so delimiter is // added
WITHOUT_CLASSIFICATION	// =================================== CSV quote/unquote handling // ==============================
WITHOUT_CLASSIFICATION	/*     * Private versions of what might eventually be part of Commons-CSV or     * Commons-Lang/Io...     */
WITHOUT_CLASSIFICATION	// double the quote char
WITHOUT_CLASSIFICATION	// doubled quote => quote
WITHOUT_CLASSIFICATION	// State of the parser
WITHOUT_CLASSIFICATION	// Remove following \n if present
WITHOUT_CLASSIFICATION	// Do we have some data, or a trailing empty field? // we have some data // we've started a field // Just seen ""
WITHOUT_CLASSIFICATION	// while not EOF // EOF (or end of string) so collect any remaining data
WITHOUT_CLASSIFICATION	/* * This is not currently used by JMeter code. * As it uses Sun-specific code (the only such in JMeter), it has been commented out for now. */
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// superclass does not use types
WITHOUT_CLASSIFICATION	// superclass does not use types
WITHOUT_CLASSIFICATION	// Delete any properties whose name converts to the empty string
WITHOUT_CLASSIFICATION	// superclass does not use types
WITHOUT_CLASSIFICATION	// rethrow other errors
WITHOUT_CLASSIFICATION	// mainly for TestElementConverter
WITHOUT_CLASSIFICATION	// superclass does not use types
WITHOUT_CLASSIFICATION	// Don't save empty comments - except for the TestPlan (to maintain compatibility)
WITHOUT_CLASSIFICATION	// Skip special properties if required
WITHOUT_CLASSIFICATION	// remap the class name
WITHOUT_CLASSIFICATION	// could be null if it has been deleted via NameUpdater
WITHOUT_CLASSIFICATION	// could be null if it has been deleted via NameUpdater
WITHOUT_CLASSIFICATION	// No need to check version, just process the attributes if present
WITHOUT_CLASSIFICATION	// Only decode strings if inVersion = 1.0
WITHOUT_CLASSIFICATION	// Names of properties that are handled specially
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// Otherwise don't save anything - no point
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// If we have a file, but no data, then read the file
WITHOUT_CLASSIFICATION	// superclass does not use types
WITHOUT_CLASSIFICATION	// superclass does not use types
WITHOUT_CLASSIFICATION	// superclass does not use types
WITHOUT_CLASSIFICATION	// Skip special properties if required
WITHOUT_CLASSIFICATION	// No need to check version, just process the attributes if present
WITHOUT_CLASSIFICATION	// could be null if it has been deleted via NameUpdater
WITHOUT_CLASSIFICATION	// Don't save empty comments
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// Always decode
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// superclass does not use types
WITHOUT_CLASSIFICATION	// superclass does not use types
WITHOUT_CLASSIFICATION	// superclass does not use types
WITHOUT_CLASSIFICATION	// superclass does not use types
WITHOUT_CLASSIFICATION	// superclass does not use types
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // Must be same as Header.HNAME - but that is built // later
WITHOUT_CLASSIFICATION	// N.B. These must agree with the new member names in SampleSaveConfiguration // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// Additional member names which are currently not written out // $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// These are new fields; not saved unless true
WITHOUT_CLASSIFICATION	// These fields are not currently saved or restored
WITHOUT_CLASSIFICATION	// Save most things
WITHOUT_CLASSIFICATION	// Save the new fields - but only if they are not the default
WITHOUT_CLASSIFICATION	// Helper method to simplify marshall routine
WITHOUT_CLASSIFICATION	// Maintain backward compatibility (bytes was not in the JMX file)
WITHOUT_CLASSIFICATION	// Make sure decoding follows input file
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	//@GuardedBy("this")
WITHOUT_CLASSIFICATION	//@GuardedBy("this") NOTE this also guards against possible window in checkForOpenFiles()
WITHOUT_CLASSIFICATION	// volatile needed to ensure safe publication
WITHOUT_CLASSIFICATION	// Cannot be instantiated
WITHOUT_CLASSIFICATION	// getParentFile() may not work on relative paths
WITHOUT_CLASSIFICATION	// checks for entries in use
WITHOUT_CLASSIFICATION	// tidy up any unused entries
WITHOUT_CLASSIFICATION	// Must first convert to absolute path names to ensure parents are available
WITHOUT_CLASSIFICATION	// read first line and forget
WITHOUT_CLASSIFICATION	// need to check if we are at EOF already
WITHOUT_CLASSIFICATION	// already at EOF
WITHOUT_CLASSIFICATION	// OK, we still have some data, restore it
WITHOUT_CLASSIFICATION	// If file encoding is specified, read using that encoding, otherwise use default platform encoding
WITHOUT_CLASSIFICATION	// If file encoding is specified, write using that encoding, otherwise use default platform encoding
WITHOUT_CLASSIFICATION	// package access for test code only
WITHOUT_CLASSIFICATION	// Some known attribute names, just for convenience:
WITHOUT_CLASSIFICATION	// Store the resource bundle as an attribute of the BeanDescriptor:
WITHOUT_CLASSIFICATION	// Localize the property names and descriptions:
WITHOUT_CLASSIFICATION	// we also provide the resource bundle
WITHOUT_CLASSIFICATION	// i is used below
WITHOUT_CLASSIFICATION	// Set the bean's property to the value we just obtained:
WITHOUT_CLASSIFICATION	// We can't assign null to primitive types.
WITHOUT_CLASSIFICATION	// Can occur running headless on Jenkins
WITHOUT_CLASSIFICATION	// value was not provided, and this is allowed
WITHOUT_CLASSIFICATION	// Not an expression (isn't or can't be), not null.
WITHOUT_CLASSIFICATION	// The known tags are assumed to be valid:
WITHOUT_CLASSIFICATION	// Was not a tag, so if we can't accept other values...
WITHOUT_CLASSIFICATION	// Delegate the final check to the typeEditor:
WITHOUT_CLASSIFICATION	// setAsText failed: not valid
WITHOUT_CLASSIFICATION	// setAsText succeeded: valid
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	/// final because called from ctor
WITHOUT_CLASSIFICATION	// Localize the bean name // $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// not an expression (isn't or can't be), not null.
WITHOUT_CLASSIFICATION	// Provide an initial edit value if necessary -- this is an // heuristic that tries to provide the most convenient // initial edit value:
WITHOUT_CLASSIFICATION	//not interested in this method.
WITHOUT_CLASSIFICATION	// Not an expression (isn't or can't be), not null. // may throw IllegalArgumentExc.
WITHOUT_CLASSIFICATION	// not an expression (can't be or isn't), not null.
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ $NON-NLS-2$
WITHOUT_CLASSIFICATION	// so we can detect it
WITHOUT_CLASSIFICATION	// so we can detect it
WITHOUT_CLASSIFICATION	// Revert to the previous value:
WITHOUT_CLASSIFICATION	// ensure value is propagated to editor
WITHOUT_CLASSIFICATION	// Get and sort the property descriptors:
WITHOUT_CLASSIFICATION	// should be quicker to find the editors if they are registered.
WITHOUT_CLASSIFICATION	//  private static final Logger log = LoggingManager.getLoggerForClass();
WITHOUT_CLASSIFICATION	// $NON-NLS-$
WITHOUT_CLASSIFICATION	// Obtain the propertyEditors:
WITHOUT_CLASSIFICATION	// Index is also used for accessing editors array
WITHOUT_CLASSIFICATION	// Don't get editors for hidden or non-read-write properties:
WITHOUT_CLASSIFICATION	// we check the class type above
WITHOUT_CLASSIFICATION	// Initialize the editor with the provided default value or null:
WITHOUT_CLASSIFICATION	// In case of BSF and JSR elements i want to add textAreaEditor as a listener to scriptLanguage ComboBox.
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// Some editors do tiny transformations (e.g. "true" to // "True",...): // may throw IllegalArgumentException
WITHOUT_CLASSIFICATION	// Initialize the GUI:
WITHOUT_CLASSIFICATION	// acceptsNull // acceptsExpressions // acceptsOther
WITHOUT_CLASSIFICATION	// Uninitialized -- set it to the defaults:
WITHOUT_CLASSIFICATION	// Now set the editors to the element's values:
WITHOUT_CLASSIFICATION	// for labels
WITHOUT_CLASSIFICATION	// for editors
WITHOUT_CLASSIFICATION	// for panels
WITHOUT_CLASSIFICATION	// if the displayName is the empty string, leave it like that.
WITHOUT_CLASSIFICATION	// might be null (e.g. in testing)
WITHOUT_CLASSIFICATION	/*     * Map of translations for tags; only created if there is at least     * one tag and a ResourceBundle has been provided.     */
WITHOUT_CLASSIFICATION	// The minimum index of the tags in the combo box
WITHOUT_CLASSIFICATION	// The maximum index of the tags in the combo box
WITHOUT_CLASSIFICATION	// only for use from test code
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// called from ctor, so must not be overridable
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-2$
WITHOUT_CLASSIFICATION	// Add a 0-sized invisible component that will take all the vertical // space that nobody wants:
WITHOUT_CLASSIFICATION	// track where tags start ...
WITHOUT_CLASSIFICATION	// ... and where they end
WITHOUT_CLASSIFICATION	// Check if the entry index corresponds to a tag, if so return the tag // This also works if the tags were not translated
WITHOUT_CLASSIFICATION	// Not a tag entry, return the original value
WITHOUT_CLASSIFICATION	// will revert to last valid value if invalid
WITHOUT_CLASSIFICATION	// Replace a string with its translation, if one exists
WITHOUT_CLASSIFICATION	// not sure if null is passed in but no harm in setting it
WITHOUT_CLASSIFICATION	// not sure if null is passed in but no harm in setting it
WITHOUT_CLASSIFICATION	// A quick verification, just in case:
WITHOUT_CLASSIFICATION	// Get the beanInfo:
WITHOUT_CLASSIFICATION	// In other GUI component, clearGUI resets the value to defaults one as there is one GUI per Element // With TestBeanGUI as it's shared, its default values are only known here, we must call setValues with  // element (as it holds default values) // otherwise we will get values as computed by customizer reset and not default ones
WITHOUT_CLASSIFICATION	// Fetch data from screen fields
WITHOUT_CLASSIFICATION	// Copy all property values from the map into the element:
WITHOUT_CLASSIFICATION	// cannot be null
WITHOUT_CLASSIFICATION	// Copy all property values into the map:
WITHOUT_CLASSIFICATION	// handles hex as well
WITHOUT_CLASSIFICATION	// Some editors may need the descriptor
WITHOUT_CLASSIFICATION	// Create a button to trigger the file chooser:
WITHOUT_CLASSIFICATION	// Create a panel containing the combo and the button:
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// NOOP
WITHOUT_CLASSIFICATION	// not sure if null is passed in but no harm in setting it
WITHOUT_CLASSIFICATION	// handles hex as well
WITHOUT_CLASSIFICATION	// configure(element); // super.clear(); // set name, enabled. // put the default values back into the // new element
WITHOUT_CLASSIFICATION	// Programming error. Don't // continue.
WITHOUT_CLASSIFICATION	// Programming error. Don't // continue.
WITHOUT_CLASSIFICATION	// We don't want to show expert beans in the menus unless we're // in expert mode:
WITHOUT_CLASSIFICATION	// may be impossible, but no harm in // checking ...
WITHOUT_CLASSIFICATION	//- JMX
WITHOUT_CLASSIFICATION	// Get a WrapperEditor to provide the field or combo -- we'll delegate // most methods to it:
WITHOUT_CLASSIFICATION	// acceptsNull // acceptsExpressions // acceptsOther // default
WITHOUT_CLASSIFICATION	// assume it's string
WITHOUT_CLASSIFICATION	//+ JMX attributes - do not change
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	// There's only 1 test plan, so can cache the mode here
WITHOUT_CLASSIFICATION	//- JMX field names
WITHOUT_CLASSIFICATION	// create transient item
WITHOUT_CLASSIFICATION	// we set the classpath
WITHOUT_CLASSIFICATION	/* Action to be taken when a Sampler error occurs */
WITHOUT_CLASSIFICATION	/* Property name */
WITHOUT_CLASSIFICATION	// Thread-specific variables saved here to save recalculation
WITHOUT_CLASSIFICATION	// clone should never return null
WITHOUT_CLASSIFICATION	// clone should never return null
WITHOUT_CLASSIFICATION	/*             * Only samplers have the thread context set up by JMeterThread at             * present, so suppress the warning for now             */
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	/* (non-Javadoc)     * @see org.apache.jmeter.samplers.RemoteThreadsListener#threadFinished()     */
WITHOUT_CLASSIFICATION	// clone should never return null
WITHOUT_CLASSIFICATION	// NOOP
WITHOUT_CLASSIFICATION	// NOOP
WITHOUT_CLASSIFICATION	// this("Test Plan"); // setFunctionalMode(false); // setSerialized(false);
WITHOUT_CLASSIFICATION	// setFunctionalMode(false); // setSerialized(false);
WITHOUT_CLASSIFICATION	// log.warn("ThreadContext was not set up - should only happen in // JUnit testing..." // ,new Throwable("Debug"));
WITHOUT_CLASSIFICATION	// Default implementation
WITHOUT_CLASSIFICATION	// Moved from JMeter class
WITHOUT_CLASSIFICATION	// lifecycle methods
WITHOUT_CLASSIFICATION	// JMX property name: do not change
WITHOUT_CLASSIFICATION	// value is the correct class
WITHOUT_CLASSIFICATION	// value is of type Collection<JMeterProperty>
WITHOUT_CLASSIFICATION	// private static StringProperty defaultProperty = new StringProperty();
WITHOUT_CLASSIFICATION	// name cannot be null
WITHOUT_CLASSIFICATION	// Two null values -- return equal
WITHOUT_CLASSIFICATION	// empty collection, local var is here to allow SuppressWarnings
WITHOUT_CLASSIFICATION	// empty collection
WITHOUT_CLASSIFICATION	// empty collection
WITHOUT_CLASSIFICATION	// should not happen
WITHOUT_CLASSIFICATION	// should not happen
WITHOUT_CLASSIFICATION	// empty collection ok to cast, local var is here to allow SuppressWarnings
WITHOUT_CLASSIFICATION	// N.B. Other classes rely on this returning just the string.
WITHOUT_CLASSIFICATION	/*|| !ctx.isSamplingStarted()*/
WITHOUT_CLASSIFICATION	// synch is probably not needed as only called before run starts
WITHOUT_CLASSIFICATION	// this is only possible for 3rd party controllers by default
WITHOUT_CLASSIFICATION	// Called from multiple threads
WITHOUT_CLASSIFICATION	// Backward compatibility
WITHOUT_CLASSIFICATION	// check there is a GUI
WITHOUT_CLASSIFICATION	// check there is a GUI
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// Expensive, so // do // once
WITHOUT_CLASSIFICATION	// i.e. "true"
WITHOUT_CLASSIFICATION	// NOOP        
WITHOUT_CLASSIFICATION	// based on this scheduler is enabled or disabled
WITHOUT_CLASSIFICATION	// Gives access to parent thread threadGroup
WITHOUT_CLASSIFICATION	// For access to stop methods.
WITHOUT_CLASSIFICATION	/*     * The following variables may be set/read from multiple threads.     */
WITHOUT_CLASSIFICATION	// may be set from a different thread
WITHOUT_CLASSIFICATION	// ensure that interrupt cannot overlap with shutdown
WITHOUT_CLASSIFICATION	// TL - IS
WITHOUT_CLASSIFICATION	/*     * See below for reason for this change. Just in case this causes problems,     * allow the change to be backed out     */
WITHOUT_CLASSIFICATION	// threadContext is not thread-safe, so keep within thread
WITHOUT_CLASSIFICATION	// Might be found by contoller.next()
WITHOUT_CLASSIFICATION	// prevent any further interrupts
WITHOUT_CLASSIFICATION	// make sure current interrupt is finished, prevent another starting yet
WITHOUT_CLASSIFICATION	// Allow any pending interrupt to complete (OK because currentSampler == null)
WITHOUT_CLASSIFICATION	// Find parent controllers of current sampler
WITHOUT_CLASSIFICATION	// OK to call TestBeanHelper.prepare()
WITHOUT_CLASSIFICATION	// Check if we are running a transaction
WITHOUT_CLASSIFICATION	// Find the package for the transaction
WITHOUT_CLASSIFICATION	// Check if the transaction is done
WITHOUT_CLASSIFICATION	// Get the transaction sample result
WITHOUT_CLASSIFICATION	// Check assertions for the transaction sample
WITHOUT_CLASSIFICATION	// Notify listeners with the transaction sample result
WITHOUT_CLASSIFICATION	// Transaction is done, we do not have a sampler to sample
WITHOUT_CLASSIFICATION	// recursive call
WITHOUT_CLASSIFICATION	// Check if we have a sampler to sample
WITHOUT_CLASSIFICATION	// Get the sampler ready to sample
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// TestBeanHelper.prepare() is OK
WITHOUT_CLASSIFICATION	// check there is a GUI
WITHOUT_CLASSIFICATION	// check there is a GUI
WITHOUT_CLASSIFICATION	// OK to call TestBeanHelper.prepare()
WITHOUT_CLASSIFICATION	// Must not ignore this one // Make sure errors are output to the log file
WITHOUT_CLASSIFICATION	// Tell the monitor we are done // Remove the ThreadLocal entry
WITHOUT_CLASSIFICATION	// Perform the actual sample
WITHOUT_CLASSIFICATION	// If we got any results, then perform processing on the result
WITHOUT_CLASSIFICATION	// Do not send subsamples to listeners which receive the transaction sample
WITHOUT_CLASSIFICATION	// Do not send subsamples to listeners which receive the transaction sample
WITHOUT_CLASSIFICATION	// Add the result as subsample of transaction if we are in a transaction
WITHOUT_CLASSIFICATION	// Check if thread or test should be stopped
WITHOUT_CLASSIFICATION	// Finish up
WITHOUT_CLASSIFICATION	// checks the scheduler to stop the iteration
WITHOUT_CLASSIFICATION	// Check if this instance is present in transaction listener list
WITHOUT_CLASSIFICATION	// Check for the same instance
WITHOUT_CLASSIFICATION	// listeners = controller.getListeners();
WITHOUT_CLASSIFICATION	// set the scheduler to start
WITHOUT_CLASSIFICATION	// call ThreadListener.threadStarted()
WITHOUT_CLASSIFICATION	// call ThreadListener.threadFinished()
WITHOUT_CLASSIFICATION	// probably not possible, but check anyway
WITHOUT_CLASSIFICATION	// Called by StandardJMeterEngine, TestAction and AccessLogSampler
WITHOUT_CLASSIFICATION	// delay between checks
WITHOUT_CLASSIFICATION	// Don't bother reporting stop test interruptions
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// fetch once; must be done under lock // (also protects against null)
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// delay between checks
WITHOUT_CLASSIFICATION	// Used by DebugSampler
WITHOUT_CLASSIFICATION	// NOOP
WITHOUT_CLASSIFICATION	// Only create the map if it is required
WITHOUT_CLASSIFICATION	// all implementations extend TestElement
WITHOUT_CLASSIFICATION	// All implementations extend TestElement
WITHOUT_CLASSIFICATION	// int
WITHOUT_CLASSIFICATION	// Number of active threads in this group
WITHOUT_CLASSIFICATION	// Copy our name into that of the controller // otherwise name reverts
WITHOUT_CLASSIFICATION	// 5 seconds
WITHOUT_CLASSIFICATION	//+ JMX entries - do not change the string values
WITHOUT_CLASSIFICATION	//- JMX entries
WITHOUT_CLASSIFICATION	// if true the Scheduler is enabled
WITHOUT_CLASSIFICATION	// set the start time for the Thread // Duration is in seconds
WITHOUT_CLASSIFICATION	// Force a sensible start time
WITHOUT_CLASSIFICATION	// Enables the scheduler
WITHOUT_CLASSIFICATION	// maximum pause to use
WITHOUT_CLASSIFICATION	// Fetch once; needs to stay constant
WITHOUT_CLASSIFICATION	// needs to be same time for all threads in the group
WITHOUT_CLASSIFICATION	// set start and end time
WITHOUT_CLASSIFICATION	// N.B. Context needs to be fetched in the correct thread
WITHOUT_CLASSIFICATION	// Store context from Root Thread to pass it to created threads
WITHOUT_CLASSIFICATION	// Copy in ThreadStarter thread context from calling Thread
WITHOUT_CLASSIFICATION	// needs to be constant for all threads
WITHOUT_CLASSIFICATION	// else start immediately
WITHOUT_CLASSIFICATION	// set the endtime for the Thread
WITHOUT_CLASSIFICATION	// Duration is in seconds, starting from when the threads start
WITHOUT_CLASSIFICATION	// ramp-up delay (except first)
WITHOUT_CLASSIFICATION	// no point continuing beyond the end time
WITHOUT_CLASSIFICATION	// Already waited
WITHOUT_CLASSIFICATION	// ThreadStarter is daemon, but we don't want sampler threads to be so too
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// Ignored
WITHOUT_CLASSIFICATION	// return all the associated counts together
WITHOUT_CLASSIFICATION	// set stop flag // interrupt sampler if possible
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	//NOOP
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-2$
WITHOUT_CLASSIFICATION	// set the start time for the Thread // Duration is in seconds
WITHOUT_CLASSIFICATION	//@GuardedGy("this")
WITHOUT_CLASSIFICATION	//@GuardedGy("this")
WITHOUT_CLASSIFICATION	//@GuardedGy("this")
WITHOUT_CLASSIFICATION	//@GuardedGy("this")
WITHOUT_CLASSIFICATION	//@GuardedGy("this")
WITHOUT_CLASSIFICATION	// Currently only used by JMeterThread
WITHOUT_CLASSIFICATION	// Check if the property exists
WITHOUT_CLASSIFICATION	// Relative start-up time
WITHOUT_CLASSIFICATION	// NOT USED
WITHOUT_CLASSIFICATION	// Must be an old test plan
WITHOUT_CLASSIFICATION	// Initialise the gui field values
WITHOUT_CLASSIFICATION	// Maximum size to convert a document to text (default 10Mb)
WITHOUT_CLASSIFICATION	// -1 to disable the write limit
WITHOUT_CLASSIFICATION	// open the stream
WITHOUT_CLASSIFICATION	// close the stream
WITHOUT_CLASSIFICATION	/*     *     * The string is made private so the compiler can't propagate it into     * JMeterUtils. (Java compilers may make copies of final variables)     *     * This ensures that JMeterUtils always gets the correct     * version, even if JMeterUtils is not re-compiled during the build.     */
WITHOUT_CLASSIFICATION	// This assumes that the JMV treats a class file as a resource (not all do).
WITHOUT_CLASSIFICATION	// Convert to URL for manifest
WITHOUT_CLASSIFICATION	// default to plain version
WITHOUT_CLASSIFICATION	// Not instantiable
WITHOUT_CLASSIFICATION	// Allow reversion to original shared session context
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// If we are using a single session // Otherwise
WITHOUT_CLASSIFICATION	/*             * Also set up HttpClient defaults             */
WITHOUT_CLASSIFICATION	/* * No point doing this on a per-connection basis, as there is currently no way to configure it. * So we leave it to the defaults set up in the SSL Context * */
WITHOUT_CLASSIFICATION	//          HttpsURLConnection secureConn = (HttpsURLConnection) conn; //          secureConn.setSSLSocketFactory(this.getContext().getSocketFactory());
WITHOUT_CLASSIFICATION	/*     *     * Creates new SSL context     * @return SSL context     * @throws GeneralSecurityException     */
WITHOUT_CLASSIFICATION	// Now wrap the default managers with our key manager
WITHOUT_CLASSIFICATION	// Get the default trust managers
WITHOUT_CLASSIFICATION	// Wrap the defaults in our custom trust manager
WITHOUT_CLASSIFICATION	// implementation moved to JmeterKeystore as only that has the keyType info
WITHOUT_CLASSIFICATION	//++ For TestBean implementations only // passed to file or script
WITHOUT_CLASSIFICATION	// file to source (overrides script)
WITHOUT_CLASSIFICATION	// script (if file not provided)
WITHOUT_CLASSIFICATION	// BSF/JSR223 language to use //-- For TestBean implementations only
WITHOUT_CLASSIFICATION	// can be the empty string
WITHOUT_CLASSIFICATION	// For use by the server script
WITHOUT_CLASSIFICATION	// Characters per second to emulate
WITHOUT_CLASSIFICATION	// Save the actual socket
WITHOUT_CLASSIFICATION	// Override so we can intercept the stream
WITHOUT_CLASSIFICATION	// Forward all the SSLSocket methods to the input socket
WITHOUT_CLASSIFICATION	// Also forward all the Socket methods.
WITHOUT_CLASSIFICATION	//                ScriptRuntime.call(cx, fun, global, args, global);
WITHOUT_CLASSIFICATION	// Must wrap non-scriptable objects before presenting to Rhino
WITHOUT_CLASSIFICATION	// includes JavaScriptException, rethrows Errors
WITHOUT_CLASSIFICATION	// superclass does not support types
WITHOUT_CLASSIFICATION	// Initialize context and global scope object
WITHOUT_CLASSIFICATION	// Read-only access after class has been initialised
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// Re-throw Errors because we're supposed to let the JVM see it // Don't re-throw StackOverflows, because we know we've // corrected the situation by aborting the loop and // a long stacktrace would end up on the user's console
WITHOUT_CLASSIFICATION	// Calculate each time, as likely to be called for each add
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// Characters per second to emulate
WITHOUT_CLASSIFICATION	// likely a wrapped exception from a LiveConnect call. // Display its stack trace as a diagnostic
WITHOUT_CLASSIFICATION	// For n values in an aggregate sample the average value = (val/n) // So need to add n * (val/n) * (val/n) = val * val / n
WITHOUT_CLASSIFICATION	//load additionnal name conversion rules from plugins
WITHOUT_CLASSIFICATION	/*         * If we are creating a JSR223 element, add the cache key property.         *          * Note that this cannot be done in the JSR223BeanInfoSupport class         * because that causes problems with the group; its properties are         * not always set up before they are needed. This cause various         * issues with the GUI:         * - wrong field attributes (should not allow null)         * - sometimes GUI is completely mangled         * - field appears at start rather than at end.         * - the following warning is logged:         * jmeter.testbeans.gui.GenericTestBeanCustomizer:          * org.apache.jmeter.util.JSR223TestElement#cacheKey does not appear to have been configured         *          * Adding the group here solves these issues, and it's also         * possible to add the key just before the script panel         * to which it relates.         *          * It's not yet clear why this should be, but it looks as though         * createPropertyGroup does not work properly if it is called from         * any subclasses of this class.         *          */
WITHOUT_CLASSIFICATION	// names are Strings
WITHOUT_CLASSIFICATION	// no point dividing by 1
WITHOUT_CLASSIFICATION	// 1024=bytes per kb
WITHOUT_CLASSIFICATION	// account for multiple samples // not yet intialised
WITHOUT_CLASSIFICATION	// 1000 = millisecs/sec
WITHOUT_CLASSIFICATION	// Conversions for milli and nano seconds
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// Characters per second to emulate
WITHOUT_CLASSIFICATION	// Use actual class name for log
WITHOUT_CLASSIFICATION	// Most subclasses will need these:
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// NOOP
WITHOUT_CLASSIFICATION	// NOOP
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ $NON-NLS-2$
WITHOUT_CLASSIFICATION	//@GuardedBy("this")
WITHOUT_CLASSIFICATION	//@GuardedBy("this")
WITHOUT_CLASSIFICATION	//@GuardedBy("this")
WITHOUT_CLASSIFICATION	// we have a file, read and process it
WITHOUT_CLASSIFICATION	// we have a file, read and process it
WITHOUT_CLASSIFICATION	/*     * Wraps the socket in a slow SSL socket if necessary     */
WITHOUT_CLASSIFICATION	// What host am I running on?
WITHOUT_CLASSIFICATION	// Special flag for use in debugging resources
WITHOUT_CLASSIFICATION	// Provide Random numbers to whomever wants one
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// for java sockets // for Commons Httpclient sockets
WITHOUT_CLASSIFICATION	// $NON-NLS-1$  // $NON-NLS-2$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$  // $NON-NLS-2$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ $NON-NLS-2$
WITHOUT_CLASSIFICATION	// Done by finally block: fileReader.close();
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // For use in debugging: // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// Are we the default language?
WITHOUT_CLASSIFICATION	// JMeter.fail("Could not read internal resource. " + // "Archive is broken.");
WITHOUT_CLASSIFICATION	// Keep existing settings
WITHOUT_CLASSIFICATION	// Don't change locale from en_GB to en
WITHOUT_CLASSIFICATION	// language change worked // Check if we at least found the correct language:
WITHOUT_CLASSIFICATION	// no need to reset Locale
WITHOUT_CLASSIFICATION	/*         * Reset Locale if necessary so other locales are properly handled         */
WITHOUT_CLASSIFICATION	// Special mode for debugging resource handling
WITHOUT_CLASSIFICATION	// Special mode for debugging resource handling
WITHOUT_CLASSIFICATION	// Can be returned by headless hosts
WITHOUT_CLASSIFICATION	// Can be returned by headless hosts
WITHOUT_CLASSIFICATION	// $NON-NLS-1$                
WITHOUT_CLASSIFICATION	// Redisplay.
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// file to source (overrides script)
WITHOUT_CLASSIFICATION	// script (if file not provided)
WITHOUT_CLASSIFICATION	// Use actual class name for log
WITHOUT_CLASSIFICATION	// Most subclasses will need these:
WITHOUT_CLASSIFICATION	// End Method
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // reader = xmlFactory.newSAXParser().getXMLReader();
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// NOOP
WITHOUT_CLASSIFICATION	// NOOP
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// Done
WITHOUT_CLASSIFICATION	// TODO Charset ?
WITHOUT_CLASSIFICATION	// TODO Charset ?
WITHOUT_CLASSIFICATION	// Empty value // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// If not empty then script in ScriptText will be compiled and cached
WITHOUT_CLASSIFICATION	// LRUMap does not support generics (yet)
WITHOUT_CLASSIFICATION	// Add variables for access to context and variables
WITHOUT_CLASSIFICATION	// For use in debugging:
WITHOUT_CLASSIFICATION	// NOOP   
WITHOUT_CLASSIFICATION	// Also handles read(byte[])
WITHOUT_CLASSIFICATION	//-- For TestBean implementations only
WITHOUT_CLASSIFICATION	// ensure variables are not null
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ // Set params as a single line // $NON-NLS-1$ // and set as an array //$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	// Characters per second to emulate
WITHOUT_CLASSIFICATION	// Override so we can intercept the stream
WITHOUT_CLASSIFICATION	// Override so we can intercept the stream
WITHOUT_CLASSIFICATION	// Overridden by non-TestBean implementations to return the property value instead
WITHOUT_CLASSIFICATION	// Overridden by non-TestBean implementations to return the property value instead
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	//@GuardedBy("this")
WITHOUT_CLASSIFICATION	// now temp2 has the lowest of the three components
WITHOUT_CLASSIFICATION	// This sequence is borrowed from: // org.apache.commons.httpclient.protocol.ReflectionSocketFactory.createSocket
WITHOUT_CLASSIFICATION	// convert to telnet port
WITHOUT_CLASSIFICATION	// Prompt is unnecessary
WITHOUT_CLASSIFICATION	// Reset for other users
WITHOUT_CLASSIFICATION	// Tell server that we are done
WITHOUT_CLASSIFICATION	// TODO - charset?
WITHOUT_CLASSIFICATION	//this.setDaemon(true);
WITHOUT_CLASSIFICATION	// Have we yet tried to load the truststore?
WITHOUT_CLASSIFICATION	// Ensure not null
WITHOUT_CLASSIFICATION	/*     * The password can be defined as a property; this dialogue is provided to allow it     * to be entered at run-time.     *     * However, this does not gain much, as the dialogue does not (yet) support hidden input ...     *    */
WITHOUT_CLASSIFICATION	// we've tried ...
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// Should not happen
WITHOUT_CLASSIFICATION	// empty if not provided // use the system property to determine the type // otherwise use the name
WITHOUT_CLASSIFICATION	// Also handles write(byte[])
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	//@GuardedBy("this")
WITHOUT_CLASSIFICATION	//@GuardedBy("this")
WITHOUT_CLASSIFICATION	// Temporary copies, so can set the final ones
WITHOUT_CLASSIFICATION	// This class is not serialised // The interpreter instance for this class
WITHOUT_CLASSIFICATION	// Script file to initialize the Interpreter with
WITHOUT_CLASSIFICATION	// Logger to use during initialization and script run
WITHOUT_CLASSIFICATION	// Called from ctor, so must be private (or final, but it does not seem useful elsewhere)
WITHOUT_CLASSIFICATION	// Do this before starting the script
WITHOUT_CLASSIFICATION	// Check file so we can distinguish file error from script error
WITHOUT_CLASSIFICATION	// Cannot find the file locally, so try the bin directory
WITHOUT_CLASSIFICATION	// Programming error
WITHOUT_CLASSIFICATION	// Also programming error
WITHOUT_CLASSIFICATION	// For use by Unit Tests
WITHOUT_CLASSIFICATION	// configure the document builder factory
WITHOUT_CLASSIFICATION	// elements have empty nodeValue, but we are usually interested in their content
WITHOUT_CLASSIFICATION	// default empty array to prevent NPEs
WITHOUT_CLASSIFICATION	// No point checking an empty keystore
WITHOUT_CLASSIFICATION	/*         * Note: if is == null, the arrays will be empty         */
WITHOUT_CLASSIFICATION	// API expects null not empty array, see http://docs.oracle.com/javase/6/docs/api/javax/net/ssl/X509KeyManager.html
WITHOUT_CLASSIFICATION	// i.e. is == null
WITHOUT_CLASSIFICATION	// i.e. is == null
WITHOUT_CLASSIFICATION	// number of samples in this entry
WITHOUT_CLASSIFICATION	// The following getters may appear not to be used - however they are invoked via the Functor class
WITHOUT_CLASSIFICATION	// No samples collected ...
WITHOUT_CLASSIFICATION	// Better behaviour when howLong=0 or lastTime=0
WITHOUT_CLASSIFICATION	// Better behaviour when howLong=0 or lastTime=0
WITHOUT_CLASSIFICATION	/* Implements JMeterGUIComponent.createTestElement() */
WITHOUT_CLASSIFICATION	/* Implements JMeterGUIComponent.modifyTestElement(TestElement) */
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ $NON-NLS-2$
WITHOUT_CLASSIFICATION	// 1024=bytes per kb
WITHOUT_CLASSIFICATION	// We really should never get here // because eval will throw an exception // if xpath is invalid, but whatever, better // safe
WITHOUT_CLASSIFICATION	// No samples collected ...
WITHOUT_CLASSIFICATION	// Better behaviour when howLong=0 or lastTime=0
WITHOUT_CLASSIFICATION	// this is our first sample, set the start time to current timestamp
WITHOUT_CLASSIFICATION	// this is our first sample, set the start time to current timestamp
WITHOUT_CLASSIFICATION	// Always update the end time
WITHOUT_CLASSIFICATION	// = elapsed
WITHOUT_CLASSIFICATION	// Appears not to be used - however it is invoked via the Functor class
WITHOUT_CLASSIFICATION	// Only for use by test code
WITHOUT_CLASSIFICATION	// Code duplicated from getPageSize()
WITHOUT_CLASSIFICATION	/* A checkbox choosing whether or not only successes should be logged. */
WITHOUT_CLASSIFICATION	/* Overrides AbstractJMeterGuiComponent.configure(TestElement) */
WITHOUT_CLASSIFICATION	// keep track of classes created
WITHOUT_CLASSIFICATION	// (for instructional purposes only!)
WITHOUT_CLASSIFICATION	/*         * Perform the sampling         */
WITHOUT_CLASSIFICATION	// Start timing
WITHOUT_CLASSIFICATION	// Do something here ...
WITHOUT_CLASSIFICATION	/*             * Set up the sample result details             */
WITHOUT_CLASSIFICATION	// End timimg
WITHOUT_CLASSIFICATION	/*     * Helper method     */
WITHOUT_CLASSIFICATION	/*     * Helper method to set up the GUI screen     */
WITHOUT_CLASSIFICATION	// Standard setup
WITHOUT_CLASSIFICATION	// Add the standard title
WITHOUT_CLASSIFICATION	// Specific setup
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// The name of the property used to hold our data //$NON-NLS-1$
WITHOUT_CLASSIFICATION	// ...
WITHOUT_CLASSIFICATION	// Note: the file panel already includes the error logging checkbox, // so we don't have to add it explicitly.
WITHOUT_CLASSIFICATION	// Did sample succeed? // Sampler data
WITHOUT_CLASSIFICATION	/*     * Create a data input text field     *     * @return the panel for entering the data     */
WITHOUT_CLASSIFICATION	// Do something ...
WITHOUT_CLASSIFICATION	// Do something ...
WITHOUT_CLASSIFICATION	// A String property:
WITHOUT_CLASSIFICATION	// Number of parameters expected - used to reject invalid calls
WITHOUT_CLASSIFICATION	// We have a default
WITHOUT_CLASSIFICATION	// Throwable wanted
WITHOUT_CLASSIFICATION	// Comment wanted
WITHOUT_CLASSIFICATION	// Common output function
WITHOUT_CLASSIFICATION	// Routine to perform the output (also used by __logn() function)
WITHOUT_CLASSIFICATION	//$NON-NLS-1
WITHOUT_CLASSIFICATION	//$NON-NLS-1
WITHOUT_CLASSIFICATION	// N.B. if the string is not recognised, DEBUG is assumed
WITHOUT_CLASSIFICATION	// Thread method is potentially expensive
WITHOUT_CLASSIFICATION	// Allow variable to be omitted
WITHOUT_CLASSIFICATION	// vars can be null if run from TestPlan
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// @see TestRegexFunction for unit tests
WITHOUT_CLASSIFICATION	// Remove initial empty entry
WITHOUT_CLASSIFICATION	// $NON-NLS1$ // $NON-NLS1$
WITHOUT_CLASSIFICATION	// vars will be null on TestPlan
WITHOUT_CLASSIFICATION	// did we find BeanShell?
WITHOUT_CLASSIFICATION	// Number of parameters expected - used to reject invalid calls
WITHOUT_CLASSIFICATION	// Number of parameters expected - used to reject invalid calls
WITHOUT_CLASSIFICATION	// Relatively expensive operation, so do it once
WITHOUT_CLASSIFICATION	// Pass in some variables
WITHOUT_CLASSIFICATION	// Mainly for bsh.EvalError
WITHOUT_CLASSIFICATION	// Execute the script
WITHOUT_CLASSIFICATION	/*     * Helper method for use by scripts     *     */
WITHOUT_CLASSIFICATION	// Can happen if called during test closedown
WITHOUT_CLASSIFICATION	// Parameters are stored here
WITHOUT_CLASSIFICATION	// For unit tests, see TestJexlFunction
WITHOUT_CLASSIFICATION	// String or Integer
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	/*             * N.B. Stop reading the file if we get a blank line: This allows             * for trailing comments in the file             */
WITHOUT_CLASSIFICATION	// vars will be null on TestPlan
WITHOUT_CLASSIFICATION	// Now evaluate the script, getting the result
WITHOUT_CLASSIFICATION	// two delimiters in a row; add an empty String
WITHOUT_CLASSIFICATION	// Lines in the file, split into columns
WITHOUT_CLASSIFICATION	// 0-based
WITHOUT_CLASSIFICATION	// name of the file
WITHOUT_CLASSIFICATION	// Catch the trailing delimiter
WITHOUT_CLASSIFICATION	/*         * the beginning of the line is a "delimiter" so that ,a,b,c returns ""         * "a" "b" "c"         */
WITHOUT_CLASSIFICATION	// will be null if function is used on TestPlan
WITHOUT_CLASSIFICATION	// return JMeterContextService.getContext().getCurrentSampler().getName();
WITHOUT_CLASSIFICATION	// Added to support external testing
WITHOUT_CLASSIFICATION	// Only modified by static block so no need to synchronize subsequent read-only access
WITHOUT_CLASSIFICATION	// May be null if function is used on TestPlan
WITHOUT_CLASSIFICATION	// @GuardedBy("this")
WITHOUT_CLASSIFICATION	// @GuardedBy("this")
WITHOUT_CLASSIFICATION	// @GuardedBy("this")
WITHOUT_CLASSIFICATION	// @GuardedBy("this")
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// desc.add("Use fully qualified host name: TRUE/FALSE (Default FALSE)"); //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//
WITHOUT_CLASSIFICATION	//
WITHOUT_CLASSIFICATION	// vars will be null on TestPlan
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// Number of parameters expected - used to reject invalid calls
WITHOUT_CLASSIFICATION	// Number of parameters expected - used to reject invalid calls
WITHOUT_CLASSIFICATION	// We have a default
WITHOUT_CLASSIFICATION	// Throwable wanted
WITHOUT_CLASSIFICATION	// @GuardedBy("this") // needed for error messages
WITHOUT_CLASSIFICATION	// @GuardedBy("this") // Buffered reader
WITHOUT_CLASSIFICATION	/*             * DecimalFormat adds the number to the end of the format if there             * are no formatting characters, so we need a way to prevent this             * from messing up the file name.             *             */
WITHOUT_CLASSIFICATION	// @GuardedBy("this") // should we try to open the file?
WITHOUT_CLASSIFICATION	// Have we used myCurrent yet? // Set to 1 if start number is missing (to allow for end without start)
WITHOUT_CLASSIFICATION	// Low chances to be non numeric, we parse
WITHOUT_CLASSIFICATION	// Low chances to be non numeric, we parse
WITHOUT_CLASSIFICATION	/*         * To avoid re-opening the file repeatedly after an error, only try to         * open it in the first execute() call (It may be re=opened at EOF, but         * that will cause at most one failure.)         */
WITHOUT_CLASSIFICATION	// Don't process invalid numbers
WITHOUT_CLASSIFICATION	// Don't process invalid numbers (including "")
WITHOUT_CLASSIFICATION	// Has chances to be a var
WITHOUT_CLASSIFICATION	// for next time
WITHOUT_CLASSIFICATION	// EOF, re-open file
WITHOUT_CLASSIFICATION	// Did we open the file?
WITHOUT_CLASSIFICATION	// Can be null if called from Config item testEnded() method
WITHOUT_CLASSIFICATION	// Are we processing a file // sequence?
WITHOUT_CLASSIFICATION	// there is no variable name
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	// Number of parameters expected - used to reject invalid calls
WITHOUT_CLASSIFICATION	// Number of parameters expected - used to reject invalid calls
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ 
WITHOUT_CLASSIFICATION	/*     * This Map serves two purposes:     * - maps names to  containers     * - ensures only one container per file across all threads     * The key is the concatenation of the file name and the XPath string     */
WITHOUT_CLASSIFICATION	// File was not opened successfully // Are we processing a file sequence?
WITHOUT_CLASSIFICATION	// N.B. setParameters is called before the test proper is started, // and thus variables are not interpreted at this point // So defer the file open until later to allow variable file names to be // used.
WITHOUT_CLASSIFICATION	// varName keeps its value and sum has not taken  // into account non numeric or overflowing number
WITHOUT_CLASSIFICATION	// Split string provided
WITHOUT_CLASSIFICATION	//@GuardedBy("fileContainers")
WITHOUT_CLASSIFICATION	// We don't have a local copy
WITHOUT_CLASSIFICATION	// Prevent separate instantiation
WITHOUT_CLASSIFICATION	/* The cache of file packs - for faster local access */
WITHOUT_CLASSIFICATION	// save the global copy
WITHOUT_CLASSIFICATION	// There's no global copy either
WITHOUT_CLASSIFICATION	// save our local copy
WITHOUT_CLASSIFICATION	// Parameter list
WITHOUT_CLASSIFICATION	/*             * All done, so return             */
WITHOUT_CLASSIFICATION	/*             * All done now ,so return the empty string - this allows the caller             * to append __CSVRead(file,next) to the last instance of             * __CSVRead(file,col)             *             * N.B. It is important not to read any further lines at this point,             * otherwise the wrong line can be retrieved when using multiple             * threads.             */
WITHOUT_CLASSIFICATION	/*         * Need to reset the containers for repeated runs; about the only way         * for functions to detect that a run is starting seems to be the         * setParameters() call.         */
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// May be null if function is used on TestPlan
WITHOUT_CLASSIFICATION	// Can be null if called from Config item testEnded() method
WITHOUT_CLASSIFICATION	// Parameter list
WITHOUT_CLASSIFICATION	// what column // is wanted?
WITHOUT_CLASSIFICATION	/*         * Need to reset the containers for repeated runs; about the only way         * for functions to detect that a run is starting seems to be the         * setParameters() call.         */
WITHOUT_CLASSIFICATION	/* The cache of file packs - used to improve thread access */
WITHOUT_CLASSIFICATION	//means platform default
WITHOUT_CLASSIFICATION	// empty encoding, return to platorm default
WITHOUT_CLASSIFICATION	/*     * Only needed locally     */
WITHOUT_CLASSIFICATION	/*     * This Map serves two purposes:     * - maps file names to  containers     * - ensures only one container per file across all threads     */
WITHOUT_CLASSIFICATION	/*     * Called by CSVRead(x,next) - sets the row to nil so the next row will be     * picked up the next time round     *     */
WITHOUT_CLASSIFICATION	/*     * called by CSVRead(file,alias)     */
WITHOUT_CLASSIFICATION	// First call
WITHOUT_CLASSIFICATION	// Already logged
WITHOUT_CLASSIFICATION	// Already logged
WITHOUT_CLASSIFICATION	// Save in case needed later
WITHOUT_CLASSIFICATION	// Not yet open
WITHOUT_CLASSIFICATION	// we have a variable name
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// Number of parameters expected - used to reject invalid calls
WITHOUT_CLASSIFICATION	// vars will be null on TestPlan
WITHOUT_CLASSIFICATION	// For unit tests, see TestJexlFunction
WITHOUT_CLASSIFICATION	// Now evaluate the script, getting the result
WITHOUT_CLASSIFICATION	// name of the file
WITHOUT_CLASSIFICATION	// 0-based
WITHOUT_CLASSIFICATION	// Can be null if called from Config item testEnded() method
WITHOUT_CLASSIFICATION	// Can be null if called from Config item testEnded() method
WITHOUT_CLASSIFICATION	//means no restriction
WITHOUT_CLASSIFICATION	// Only obtain and cast the return if needed
WITHOUT_CLASSIFICATION	// empty chars, return to null
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	// should we return original value?
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// Number of parameters expected - used to reject invalid calls
WITHOUT_CLASSIFICATION	// Number of parameters expected - used to reject invalid calls
WITHOUT_CLASSIFICATION	// vars will be null on TestPlan
WITHOUT_CLASSIFICATION	// vars will be null on TestPlan
WITHOUT_CLASSIFICATION	// Has chances to be a var
WITHOUT_CLASSIFICATION	// there is no variable name
WITHOUT_CLASSIFICATION	// Default to milliseconds
WITHOUT_CLASSIFICATION	// probably does not need to be synch (always accessed through ThreadLocal?) // give access to Test code
WITHOUT_CLASSIFICATION	// vars will be null on Test Plan
WITHOUT_CLASSIFICATION	//MAXINT = 2,147,483,647
WITHOUT_CLASSIFICATION	// Not found
WITHOUT_CLASSIFICATION	// Only modified in class init
WITHOUT_CLASSIFICATION	// We have a 3rd parameter
WITHOUT_CLASSIFICATION	// Resolve any aliases
WITHOUT_CLASSIFICATION	//$NON_NLS-1$ //$NON_NLS-1$
WITHOUT_CLASSIFICATION	// Not synchronised, so can't be shared
WITHOUT_CLASSIFICATION	// Allow for empty name
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// vars will be null on TestPlan
WITHOUT_CLASSIFICATION	// varName keeps its value and sum has not taken  // into account non numeric or overflowing number
WITHOUT_CLASSIFICATION	// Values for creating tokens
WITHOUT_CLASSIFICATION	// divisor is a positive number // should never case NFE
WITHOUT_CLASSIFICATION	/*     * Convert to a shorter String for test purposes     *     * @return the string value     */
WITHOUT_CLASSIFICATION	// this may need mangling due to peeks
WITHOUT_CLASSIFICATION	// cached character == Integer.MAX_VALUE when invalid
WITHOUT_CLASSIFICATION	// Reached end of input arguments - perform final processing
WITHOUT_CLASSIFICATION	// Key is String or Integer
WITHOUT_CLASSIFICATION	// strip the null
WITHOUT_CLASSIFICATION	// variables used while parsing options.
WITHOUT_CLASSIFICATION	// Yes, so the second argument is missing
WITHOUT_CLASSIFICATION	// Keep track of token separator
WITHOUT_CLASSIFICATION	// should never get to here when stringIndex != 0
WITHOUT_CLASSIFICATION	// Long optional arg must have = as separator
WITHOUT_CLASSIFICATION	// non-null Comparators don't appear to be used at present
WITHOUT_CLASSIFICATION	// consume stray character
WITHOUT_CLASSIFICATION	// Are we about to start a new option?
WITHOUT_CLASSIFICATION	// strip the -
WITHOUT_CLASSIFICATION	// 2nd argument
WITHOUT_CLASSIFICATION	// its a long option
WITHOUT_CLASSIFICATION	// Parse the arguments that are not options
WITHOUT_CLASSIFICATION	// if it is a short option then parse it else ...
WITHOUT_CLASSIFICATION	// equivalent to new TreeMap((Comparator)null);
WITHOUT_CLASSIFICATION	//    private static final Logger log = LoggingManager.getLoggerForClass();
WITHOUT_CLASSIFICATION	// Make sure the hashCode depends on the order as well
WITHOUT_CLASSIFICATION	// super-class does not use generics
WITHOUT_CLASSIFICATION	// super-class does not use generics
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// Ignored
WITHOUT_CLASSIFICATION	// TODO - charset?
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// this occurs when id == 0 and user has not supplied a descriptor // for arguments
WITHOUT_CLASSIFICATION	// if get to an arg barrier then return to normal mode // else continue accumulating options
WITHOUT_CLASSIFICATION	// strip the - // -- sequence .. it can either mean a change of state // to STATE_NO_OPTIONS or else a long option
WITHOUT_CLASSIFICATION	// find order.indexOf(currentKey) using == rather than equals() // there may be multiple entries which compare equals (Bug 50898) // This will be slightly slower than the built-in method, // but replace() is not used frequently.
WITHOUT_CLASSIFICATION	// Used for the RuntimeException to short-circuit the traversal // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// N.B. The keys can be either JMeterTreeNode or TestElement
WITHOUT_CLASSIFICATION	// do nothing - means object is found
WITHOUT_CLASSIFICATION	// Just in case
WITHOUT_CLASSIFICATION	// short circuit traversal when found
WITHOUT_CLASSIFICATION	// saves current position in data List
WITHOUT_CLASSIFICATION	// end method
WITHOUT_CLASSIFICATION	// capture the output
WITHOUT_CLASSIFICATION	// helper method to allow input and output to be changed for chaining
WITHOUT_CLASSIFICATION	// ensure the application does not hang if it requests input
WITHOUT_CLASSIFICATION	// capture the intermediate output
WITHOUT_CLASSIFICATION	// not yet terminated
WITHOUT_CLASSIFICATION	// not yet terminated // N.B. proc.destroy() is called by the finally clause in the run() method
WITHOUT_CLASSIFICATION	// we are capturing output // Default charset is probably appropriate here.
WITHOUT_CLASSIFICATION	// The DNAME which is used if none is provided // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-1$ $NON-NLS-2$ // $NON-NLS-1$ $NON-NLS-2$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ (do not change) // $NON-NLS-1$ (Firefox and Windows) // $NON-NLS-1$ (Opera)
WITHOUT_CLASSIFICATION	// i.e. does keytool support -gencert and -ext ?
WITHOUT_CLASSIFICATION	// not instantiable
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// Create cert for CA using root (requires Java 7 for gencert)
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// import the signed CA cert into the store (root already there) - both are needed to sign the domain certificates
WITHOUT_CLASSIFICATION	// Create the self-signed keypairs (requires Java 7 for -ext flag)
WITHOUT_CLASSIFICATION	//rem generate cert for DOMAIN using CA (requires Java7 for gencert) and import it
WITHOUT_CLASSIFICATION	// generate the request
WITHOUT_CLASSIFICATION	// Export the Root CA for Firefox/Chrome/IE
WITHOUT_CLASSIFICATION	// generate the certificate and store in output file
WITHOUT_CLASSIFICATION	// generate the keypair for the host
WITHOUT_CLASSIFICATION	// create the certificate //rem ku:c=dig,keyE means KeyUsage:criticial=digitalSignature,keyEncipherment
WITHOUT_CLASSIFICATION	// Copy for Opera
WITHOUT_CLASSIFICATION	// alias // subject
WITHOUT_CLASSIFICATION	// A temporary cache for the focus listener
WITHOUT_CLASSIFICATION	// get the certificate request
WITHOUT_CLASSIFICATION	// default charset
WITHOUT_CLASSIFICATION	// inport the certificate
WITHOUT_CLASSIFICATION	// Add the sub components
WITHOUT_CLASSIFICATION	// Register the handler for focus listening. This handler will // only notify the registered when the text changes from when // the focus is gained to when it is lost.
WITHOUT_CLASSIFICATION	// Add the sub components
WITHOUT_CLASSIFICATION	// Functor count = 0 is handled specially
WITHOUT_CLASSIFICATION	// Necessary to avoid NPE when testing serialisation
WITHOUT_CLASSIFICATION	// Necessary to avoid NPE when testing serialisation
WITHOUT_CLASSIFICATION	// if provided
WITHOUT_CLASSIFICATION	// Compare if the value has changed, since we received focus.
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	//@GuardedBy("this")
WITHOUT_CLASSIFICATION	// should not happen
WITHOUT_CLASSIFICATION	// Register the handler for focus listening. This handler will // only notify the registered when the text changes from when // the focus is gained to when it is lost.
WITHOUT_CLASSIFICATION	// Register the handler for focus listening. This handler will // only notify the registered when the text changes from when // the focus is gained to when it is lost.
WITHOUT_CLASSIFICATION	// Add the sub components
WITHOUT_CLASSIFICATION	// Compare if the value has changed, since we received focus.
WITHOUT_CLASSIFICATION	// A temporary cache for the focus listener
WITHOUT_CLASSIFICATION	// used by TableEditor
WITHOUT_CLASSIFICATION	// used by TableEditor
WITHOUT_CLASSIFICATION	// We use 80% of height
WITHOUT_CLASSIFICATION	// private JMenu menu;
WITHOUT_CLASSIFICATION	// (Comment 16, Huw)
WITHOUT_CLASSIFICATION	// uninstantiable
WITHOUT_CLASSIFICATION	// treats last line specially // Last line // Allow for missing terminator
WITHOUT_CLASSIFICATION	// Constructors
WITHOUT_CLASSIFICATION	// NOTUSED Dimension dim = layoutSize(parent, false);
WITHOUT_CLASSIFICATION	// work out the total size
WITHOUT_CLASSIFICATION	// otherwise there's a vgap too many // Work out the anchor paint
WITHOUT_CLASSIFICATION	// do layout
WITHOUT_CLASSIFICATION	// closes reader as well
WITHOUT_CLASSIFICATION	// N.B time pattern is passed to java.text.SimpleDateFormat
WITHOUT_CLASSIFICATION	/*     * Predefined format patterns, selected by the property log_format_type (see     * jmeter.properties) The new-line is added later     */
WITHOUT_CLASSIFICATION	//$NON_NLS-1$ //$NON_NLS-1$
WITHOUT_CLASSIFICATION	//$NON_NLS-1$ //$NON_NLS-1$
WITHOUT_CLASSIFICATION	//$NON_NLS-1$
WITHOUT_CLASSIFICATION	//$NON_NLS-1$
WITHOUT_CLASSIFICATION	// non-instantiable - static methods only
WITHOUT_CLASSIFICATION	// now set the individual categories (if any)
WITHOUT_CLASSIFICATION	// Further configuration
WITHOUT_CLASSIFICATION	// Make sure same hierarchy is used
WITHOUT_CLASSIFICATION	// This happens if the default log-target id-ref specifies a non-existent target
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// key is the type to collect (usually long), value = count of entries
WITHOUT_CLASSIFICATION	// We use a TreeMap because we need the entries to be sorted
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// For n values in an aggregate sample the average value = (val/n) // So need to add n * (val/n) * (val/n) = val * val / n
WITHOUT_CLASSIFICATION	//$NON_NLS-1$
WITHOUT_CLASSIFICATION	//$NON_NLS-1$
WITHOUT_CLASSIFICATION	//$NON_NLS-1$
WITHOUT_CLASSIFICATION	// Running values, updated for each sample
WITHOUT_CLASSIFICATION	// Set the top-level defaults //$NON_NLS-1$
WITHOUT_CLASSIFICATION	// This can happen if a log-target id-ref specifies a non-existent target
WITHOUT_CLASSIFICATION	/*     * Helper method to ensure that format is initialised if initializeLogging()     * has not yet been called.     */
WITHOUT_CLASSIFICATION	// If the name contains at least one set of paired single-quotes, reformat using DateFormat
WITHOUT_CLASSIFICATION	// remove the package prefix
WITHOUT_CLASSIFICATION	// e.g. Long.MAX_VALUE
WITHOUT_CLASSIFICATION	// e.g. Long.MIN_VALUE
WITHOUT_CLASSIFICATION	// use Math.round () instead of simple (long) to provide correct value rounding
WITHOUT_CLASSIFICATION	// ignored. May happen occasionally, but no harm done if so.
WITHOUT_CLASSIFICATION	// For n same values in sum of square is equal to n*val^2
WITHOUT_CLASSIFICATION	// no need to divide by 1
WITHOUT_CLASSIFICATION	// insert new value
WITHOUT_CLASSIFICATION	/*     * If non-null, then any object provided to invoke() is ignored.     */
WITHOUT_CLASSIFICATION	// Methondname must always be provided.
WITHOUT_CLASSIFICATION	/*     * If non-null, then any argument list passed to invoke() will be ignored.     */
WITHOUT_CLASSIFICATION	/*     * Argument types used to create the method.     * May be provided explicitly, or derived from the constructor argument list.     */
WITHOUT_CLASSIFICATION	/*     * This depends on the class or invokee and either args or types;     * it is set once by doCreateMethod(), which must be the only method to access it.    */
WITHOUT_CLASSIFICATION	// If class not provided, default to invokee class, else null
WITHOUT_CLASSIFICATION	// If types not provided, default to argument types, else null
WITHOUT_CLASSIFICATION	//////////////////////////////////////////
WITHOUT_CLASSIFICATION	/*     * Low level invocation routine.     *     * Should only be called after any defaults have been applied.     *     */
WITHOUT_CLASSIFICATION	// If invokee was provided, then clazz has been set up
WITHOUT_CLASSIFICATION	/*     * Low-level (recursive) routine to define the method - if not already defined.     * Synchronized to protect access to methodToInvoke.     */
WITHOUT_CLASSIFICATION	// static only
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// Should never happen
WITHOUT_CLASSIFICATION	// Use constructor class if present // use invokee if provided // use argumenrs if provided
WITHOUT_CLASSIFICATION	// parent classes to check // are inner classes OK?
WITHOUT_CLASSIFICATION	// Potentially expensive; do it once
WITHOUT_CLASSIFICATION	// Potentially expensive; do it once
WITHOUT_CLASSIFICATION	// No need to check it again
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// No need to check it again
WITHOUT_CLASSIFICATION	// It does not contain a required string
WITHOUT_CLASSIFICATION	// It contains a banned string
WITHOUT_CLASSIFICATION	// are inner classes OK?
WITHOUT_CLASSIFICATION	// annotation classes to check
WITHOUT_CLASSIFICATION	// For each directory in the search path, add all the jars found there
WITHOUT_CLASSIFICATION	// Find all jars in the search path
WITHOUT_CLASSIFICATION	// Should only be called with classes that extend annotations
WITHOUT_CLASSIFICATION	// first get all the classes
WITHOUT_CLASSIFICATION	//subClassList);
WITHOUT_CLASSIFICATION	/*     * Returns the classpath entries that match the search list of jars and paths     */
WITHOUT_CLASSIFICATION	// find all jar files or paths that end with strPathOrJar
WITHOUT_CLASSIFICATION	// no need to look further
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-2$ // $NON-NLS-1$// $NON-NLS-2$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// might throw an exception, assume this is ignorable
WITHOUT_CLASSIFICATION	/*     * Converts a class file from the text stored in a Jar file to a version     * that can be used in Class.forName().     *     * @param strClassName     *            the class name from a Jar file     * @return String the Java-style dotted version of the name     */
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-2$ // $NON-NLS-1$ // $NON-NLS-2$ // remove ".class"
WITHOUT_CLASSIFICATION	// Recursive call
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// we have a single character; could be a token // it is a token
WITHOUT_CLASSIFICATION	// Remove trailing splitter
WITHOUT_CLASSIFICATION	// Found splitChar at end of line
WITHOUT_CLASSIFICATION	// This is the new length
WITHOUT_CLASSIFICATION	// we saw a delimiter last time // so add the default
WITHOUT_CLASSIFICATION	// "<?xml "
WITHOUT_CLASSIFICATION	// EOF
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ add zero padding
WITHOUT_CLASSIFICATION	// @see TestJorphanUtils for unit tests
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ add zero padding
WITHOUT_CLASSIFICATION	// NOOP
WITHOUT_CLASSIFICATION	// NOOP
WITHOUT_CLASSIFICATION	// NOOP
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// This is the name of the HotSpot Diagnostic platform MBean (Sun Java 1.6) // See: http://download.oracle.com/javase/6/docs/jre/api/management/extension/com/sun/management/HotSpotDiagnosticMXBean.html
WITHOUT_CLASSIFICATION	// SingletonHolder idiom for lazy initialisation
WITHOUT_CLASSIFICATION	// These are needed for invoking the method
WITHOUT_CLASSIFICATION	// If we could not find the method, store the exception here
WITHOUT_CLASSIFICATION	// Only invoked by IODH class
WITHOUT_CLASSIFICATION	// get the platform beans
WITHOUT_CLASSIFICATION	// should never fail // See if we can actually find the object // Should never happen
WITHOUT_CLASSIFICATION	// Prevent useless dump attempts
WITHOUT_CLASSIFICATION	// the string so far
WITHOUT_CLASSIFICATION	// opened tags
WITHOUT_CLASSIFICATION	// don't do anything
WITHOUT_CLASSIFICATION	// java.util.Date d = null;
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// Potentially expensive; do it once
WITHOUT_CLASSIFICATION	//-- JMX file attributes - do not change
WITHOUT_CLASSIFICATION	// Don't instantiate class
WITHOUT_CLASSIFICATION	//++ JMX file attributes - do not change
WITHOUT_CLASSIFICATION	// i.e. no filter
WITHOUT_CLASSIFICATION	// The test object, i.e. the instance of the class containing the test method // This is the same as testCase for JUnit3 tests // but different for JUnit4 tests which use a wrapper
WITHOUT_CLASSIFICATION	// The TestCase to run
WITHOUT_CLASSIFICATION	// the Method objects for setUp (@Before) and tearDown (@After) methods // Will be null if not provided or not required
WITHOUT_CLASSIFICATION	// The method name to be invoked
WITHOUT_CLASSIFICATION	/**     * Method should add the JUnit testXXX method to the list at     * the end, since the sequence matters.     * @param methodName     */
WITHOUT_CLASSIFICATION	// The wrapper used to invoke the method
WITHOUT_CLASSIFICATION	// Assume success
WITHOUT_CLASSIFICATION	// The name of the class containing the method
WITHOUT_CLASSIFICATION	// Do not use TestCase.run(TestResult) method, since it will // call setUp and tearDown. Doing that will result in calling // the setUp and tearDown method twice and the elapsed time // will include setup and teardown.
WITHOUT_CLASSIFICATION	// create a new TestResult
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// Convert JUnit4 failure to Junit3 style
WITHOUT_CLASSIFICATION	// copy the original stack trace
WITHOUT_CLASSIFICATION	// we should log a warning, but allow the test to keep running
WITHOUT_CLASSIFICATION	// this should be externalized to the properties
WITHOUT_CLASSIFICATION	// probably should not happen
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// copy the original stack trace
WITHOUT_CLASSIFICATION	// if the string constructor is not null, we use it. // if the string constructor is null, we use the empty // constructor to get a new instance
WITHOUT_CLASSIFICATION	// first we see if the class declares a string // constructor. if it is doesn't we look for // empty constructor.
WITHOUT_CLASSIFICATION	// we have to check and make sure the constructor is // accessible. if we didn't it would throw an exception // and cause a NPE.
WITHOUT_CLASSIFICATION	// Must be final to create instance
WITHOUT_CLASSIFICATION	// NO NEED TO INITIALIZE WHEN getCreateOneInstancePerSample  // is true cause it will be done in sample
WITHOUT_CLASSIFICATION	// Convert JUnit4 AssertionError failures to JUnit3 style so // will be treated as failure rather than error.
WITHOUT_CLASSIFICATION	/*                             * Calling a method via reflection results in wrapping any                             * Exceptions in ITE; unwrap these here so runProtected can                             * allocate them correctly.                             */
WITHOUT_CLASSIFICATION	// Dummy to ensure there is a test to run
WITHOUT_CLASSIFICATION	// Generates expected Exception
WITHOUT_CLASSIFICATION	// Dummy to ensure there is a test to run
WITHOUT_CLASSIFICATION	// Dummy to ensure there is a test to run
WITHOUT_CLASSIFICATION	// Dummy to ensure there is a test to run
WITHOUT_CLASSIFICATION	// Dummy to ensure there is a test to run
WITHOUT_CLASSIFICATION	// let bad input fail silently
WITHOUT_CLASSIFICATION	// Succeeds only if Before method - verifyTwo() - is run.
WITHOUT_CLASSIFICATION	// Fails to generate expected Exception
WITHOUT_CLASSIFICATION	//or if you have assertions enabled
WITHOUT_CLASSIFICATION	//should always fail
WITHOUT_CLASSIFICATION	//should not fail
WITHOUT_CLASSIFICATION	// Generate a test error
WITHOUT_CLASSIFICATION	// will generate Divide by zero error
WITHOUT_CLASSIFICATION	// will generate Divide by zero error
WITHOUT_CLASSIFICATION	// Normal test failure
WITHOUT_CLASSIFICATION	// Generate test error
WITHOUT_CLASSIFICATION	// equation for calculating the weight // w = (int)(33 * (used/max))
WITHOUT_CLASSIFICATION	// changed the logic for BEA Weblogic in the case a // user uses Tomcat's status servlet without any // modifications. Weblogic will return nothing for // the connector, therefore we need to check the size // of the list. Peter 12.22.04
WITHOUT_CLASSIFICATION	// int spare = cntr.getThreadInfo().getMaxSpareThreads();
WITHOUT_CLASSIFICATION	// loop to fetch desired connector
WITHOUT_CLASSIFICATION	// default : get first connector
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// CRLF blank line found
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// private MonitorModel DATA;
WITHOUT_CLASSIFICATION	// log.warn("Only for use in unit testing");
WITHOUT_CLASSIFICATION	// log.warn("Only for use in unit testing");
WITHOUT_CLASSIFICATION	// log.warn("Only for use in unit testing");
WITHOUT_CLASSIFICATION	// log.warn("Only for use in unit testing");
WITHOUT_CLASSIFICATION	// we check to see if the lastSelectedPath is null // after we clear, it would return null
WITHOUT_CLASSIFICATION	// this.DATA = null; // this.DATA = stat;
WITHOUT_CLASSIFICATION	// I18N: Contains fixed English text ...
WITHOUT_CLASSIFICATION	// DATA = model;
WITHOUT_CLASSIFICATION	// draw grid only when x is 1. If we didn't // the grid line would draw over the data // lines making it look bad.
WITHOUT_CLASSIFICATION	// optional connector name prefix
WITHOUT_CLASSIFICATION	// private List workerslist;
WITHOUT_CLASSIFICATION	// the equations
WITHOUT_CLASSIFICATION	// for now just swallow the exception
WITHOUT_CLASSIFICATION	// surl can be null if read from a file
WITHOUT_CLASSIFICATION	// let bad input fail silently
WITHOUT_CLASSIFICATION	// MAIN PANEL
WITHOUT_CLASSIFICATION	// Add the main panel and the graph
WITHOUT_CLASSIFICATION	// called from ctor, so must not be overridable
WITHOUT_CLASSIFICATION	// called from ctor, so must not be overridable
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// let bad input fail silently
WITHOUT_CLASSIFICATION	// Should never happen
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// private boolean startDoc = false; // private boolean endDoc = false;
WITHOUT_CLASSIFICATION	// this.startDoc = true; // Reset all work variables so reusing the instance starts afresh.
WITHOUT_CLASSIFICATION	// this.startDoc = false; // this.endDoc = true;
WITHOUT_CLASSIFICATION	// let bad input fail silently
WITHOUT_CLASSIFICATION	// Note: the element is a ConfigTestElement, so cannot use FTPSampler access methods
WITHOUT_CLASSIFICATION	// N.B. Originally there was only one filename, and only get(RETR) was supported // To maintain backwards compatibility, the property name needs to remain the same // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// Use binary mode file transfer? // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// used for interrupting the sampler
WITHOUT_CLASSIFICATION	// Assume failure
WITHOUT_CLASSIFICATION	// should probably come from the setup dialog
WITHOUT_CLASSIFICATION	// Could not access file or other error
WITHOUT_CLASSIFICATION	// TODO - charset?
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	// TODO
WITHOUT_CLASSIFICATION	// TODO
WITHOUT_CLASSIFICATION	// called by HttpRequestHdr
WITHOUT_CLASSIFICATION	// LF blank line found
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// MAIN PANEL
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// Are we uploading? // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// Should the file data be saved in the response? // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// No need to close this // No need to close this
WITHOUT_CLASSIFICATION	// The value is not encoded
WITHOUT_CLASSIFICATION	// Let the GUI show that it will not be encoded
WITHOUT_CLASSIFICATION	// Get the filename
WITHOUT_CLASSIFICATION	// Set the values retrieved for the file upload
WITHOUT_CLASSIFICATION	// Find the first empty line of the multipart, it signals end of headers for multipart // Agents are supposed to terminate lines in CRLF:
WITHOUT_CLASSIFICATION	// regular expression used to match against embedded resource URLs
WITHOUT_CLASSIFICATION	// need to clear because the
WITHOUT_CLASSIFICATION	// OPTIONAL TASKS
WITHOUT_CLASSIFICATION	// 2 columns size
WITHOUT_CLASSIFICATION	// used by HttpTestSampleGui
WITHOUT_CLASSIFICATION	// WEB REQUEST PANEL
WITHOUT_CLASSIFICATION	// set this false to suppress some items for use in HTTP Request defaults
WITHOUT_CLASSIFICATION	// called from ctor, so must not be overridable
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ $NON-NLS-2$ // $NON-NLS-1$ $NON-NLS-2$
WITHOUT_CLASSIFICATION	// Set false for AJP
WITHOUT_CLASSIFICATION	// Body data
WITHOUT_CLASSIFICATION	// Tabbed pane that contains parameters and raw body
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// Default changed in 2.3 and again in 2.4
WITHOUT_CLASSIFICATION	// Concurrent resources download // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// See modifyTestElement
WITHOUT_CLASSIFICATION	// Embedded URL match regex // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// WEB REQUEST PANEL
WITHOUT_CLASSIFICATION	/*             * Textfield uses \n (LF) to delimit lines; we need to send CRLF.             * Rather than change the way that arguments are processed by the             * samplers for raw data, it is easier to fix the data.             * On retrival, CRLF is converted back to LF for storage in the text field.             * See             */
WITHOUT_CLASSIFICATION	// If RAW data and Parameters match we allow switching
WITHOUT_CLASSIFICATION	// Convert CRLF to CR, see modifyTestElement
WITHOUT_CLASSIFICATION	// all sub-components with setFont(null) inherit this font
WITHOUT_CLASSIFICATION	// Only display the port number if it is meaningfully specified
WITHOUT_CLASSIFICATION	// WEB SERVER PANEL
WITHOUT_CLASSIFICATION	// autoRedirects and followRedirects cannot both be selected
WITHOUT_CLASSIFICATION	// Implementation
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// PROTOCOL
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// CONTENT_ENCODING
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// called from ctor, so must not be overridable
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// If there is no data, then switching between Parameters and Raw should be // allowed with no further user interaction.
WITHOUT_CLASSIFICATION	// If there is data in the Raw panel, then the user should be  // prevented from switching (that would be easy to track).
WITHOUT_CLASSIFICATION	// If the Parameter data can be converted (i.e. no names), we  // warn the user that the Parameter data will be lost.
WITHOUT_CLASSIFICATION	// If the Parameter data cannot be converted to Raw, then the user should be // prevented from doing so raise an error dialog
WITHOUT_CLASSIFICATION	// Cached value
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// package-protected to allow access by unit-test cases
WITHOUT_CLASSIFICATION	// helper method to save the cache entry
WITHOUT_CLASSIFICATION	// invalid dates must be treated as expired
WITHOUT_CLASSIFICATION	// if no-cache is present, ensure that expiresDate remains null, which forces revalidation
WITHOUT_CLASSIFICATION	// the max-age directive overrides the Expires header,
WITHOUT_CLASSIFICATION	// No max-age && No expires
WITHOUT_CLASSIFICATION	// date or lastModified may be null or in bad format
WITHOUT_CLASSIFICATION	// else expiresDate computed in (expires!=null) condition is used
WITHOUT_CLASSIFICATION	// Helper method to deal with missing headers - Commons HttpClient
WITHOUT_CLASSIFICATION	// Apache HttpClient
WITHOUT_CLASSIFICATION	/*     * Is the sample result OK to cache?     * i.e is it in the 2xx range?     */
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	//+ JMX attributes, do not change values // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ //-
WITHOUT_CLASSIFICATION	// i.e. not using Expires // Check that we are processing Expires/CacheControl
WITHOUT_CLASSIFICATION	// see https://developer.mozilla.org/en/HTTP_Caching_FAQ // see http://www.ietf.org/rfc/rfc2616.txt#13.2.4 
WITHOUT_CLASSIFICATION	// cache the value
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// echo back
WITHOUT_CLASSIFICATION	// Check if we have read all the headers
WITHOUT_CLASSIFICATION	// We know when to stop reading, so we can allow the read method to block
WITHOUT_CLASSIFICATION	// No divider was found
WITHOUT_CLASSIFICATION	// use null for no expiry
WITHOUT_CLASSIFICATION	// Store session cookies as well as unexpired ones
WITHOUT_CLASSIFICATION	// Store session cookies as well as unexpired ones
WITHOUT_CLASSIFICATION	// Has its own debug log; removes matching cookies
WITHOUT_CLASSIFICATION	// Has its own debug log; removes matching cookies
WITHOUT_CLASSIFICATION	// This means the cookie was wrong for the URL
WITHOUT_CLASSIFICATION	// This means the cookie was wrong for the URL
WITHOUT_CLASSIFICATION	// tweak diff HC3 vs HC4
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// The headers and body are divided by a blank line (the \r is to allow for the CR before LF) // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// If we know the content length, we can allow the reading of // the request to block until more data arrives. // If it is chunked transfer, we cannot allow the reading to // block, because we do not know when to stop reading, because // the chunked transfer is not properly supported yet
WITHOUT_CLASSIFICATION	// Check how much of the body we have already read as part of reading // the headers // We subtract two bytes for the crlf divider between header and body
WITHOUT_CLASSIFICATION	// The reqest has no body, or it has a transfer encoding we do not support. // In either case, we read any data available
WITHOUT_CLASSIFICATION	// We use multi-line mask so can prefix the line with ^ // $NON-NLS-1$ $NON-NLS-2$
WITHOUT_CLASSIFICATION	// use null for no expiry
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// Needs to be package-protected to avoid problem with serialisation tests
WITHOUT_CLASSIFICATION	// start off with a merged object as a copy of the local object
WITHOUT_CLASSIFICATION	// iterate thru each of the other headers
WITHOUT_CLASSIFICATION	// find the same property in the local headers
WITHOUT_CLASSIFICATION	// we have a match
WITHOUT_CLASSIFICATION	// prefer values from the other object
WITHOUT_CLASSIFICATION	// the other object has an empty value, so remove this value from the merged object
WITHOUT_CLASSIFICATION	// use the other object's value
WITHOUT_CLASSIFICATION	// break out of the inner loop
WITHOUT_CLASSIFICATION	// the other object has a new value to be added to the merged
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ $NON-NLS-2$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ $NON-NLS-2$
WITHOUT_CLASSIFICATION	// TODO Charset ?
WITHOUT_CLASSIFICATION	// finally, merge the names so it's clear they've been merged
WITHOUT_CLASSIFICATION	// Saves the error if one occurs
WITHOUT_CLASSIFICATION	// Listen on main socket
WITHOUT_CLASSIFICATION	// Pass request to new thread
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// TODO Charset ? // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// TODO Charset ? // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// Only used by GUI
WITHOUT_CLASSIFICATION	// Timeout occurred. Ignore, and keep looping until we're // told to stop running.
WITHOUT_CLASSIFICATION	// Ensure that there is always a collection available
WITHOUT_CLASSIFICATION	// default level // allow override by system properties
WITHOUT_CLASSIFICATION	//final int _ignored = 1;
WITHOUT_CLASSIFICATION	//++ JMX tag values // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// Can't have two matching cookies
WITHOUT_CLASSIFICATION	// ensure that the initial cookies are copied to the per-thread instances
WITHOUT_CLASSIFICATION	//long max was used to represent a non-expiring cookie, but that caused problems
WITHOUT_CLASSIFICATION	// Used by GUI
WITHOUT_CLASSIFICATION	// Used by GUI
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //-- JMX tag values
WITHOUT_CLASSIFICATION	// only save unexpired cookies
WITHOUT_CLASSIFICATION	//flag - if all machines within a given domain can access the variable. //(from http://www.cookiecentral.com/faq/ 3.5)
WITHOUT_CLASSIFICATION	// ensure data is set up OK initially
WITHOUT_CLASSIFICATION	// do nothing, the cookie manager has to accept changes.
WITHOUT_CLASSIFICATION	// do nothing, the cookie manager has to accept changes.
WITHOUT_CLASSIFICATION	// Scan for any matching cookies
WITHOUT_CLASSIFICATION	// TODO Charset ?
WITHOUT_CLASSIFICATION	/*     * Remove all the cookies.     */
WITHOUT_CLASSIFICATION	// Used by HttpMirrorServer
WITHOUT_CLASSIFICATION	// No need to call clear
WITHOUT_CLASSIFICATION	// and as a string
WITHOUT_CLASSIFICATION	// Used for saving entries to a file
WITHOUT_CLASSIFICATION	// wait for server to stop
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// regular expression used to match against embedded resource URLs
WITHOUT_CLASSIFICATION	// OPTIONAL TASKS
WITHOUT_CLASSIFICATION	// Use this instead of getLabelResource() otherwise getDocAnchor() below does not work
WITHOUT_CLASSIFICATION	// flag - if all machines within a given domain can access the variable. //(from http://www.cookiecentral.com/faq/ 3.5)
WITHOUT_CLASSIFICATION	// Column numbers - must agree with order above
WITHOUT_CLASSIFICATION	// only http and https are supported
WITHOUT_CLASSIFICATION	// Obtain another URL with an explicit port:
WITHOUT_CLASSIFICATION	// Allow for old format file without mechanism support
WITHOUT_CLASSIFICATION	// this should never happen // anyway, we'll continue with url2 set to null.
WITHOUT_CLASSIFICATION	// For use by AJP
WITHOUT_CLASSIFICATION	// Allow for old format file without the extra columnns
WITHOUT_CLASSIFICATION	// Needs to be package protected for Unit test
WITHOUT_CLASSIFICATION	// Embedded URL match regex
WITHOUT_CLASSIFICATION	// does not apply to Java implementation
WITHOUT_CLASSIFICATION	// add a listener to activate or not concurrent dwn.
WITHOUT_CLASSIFICATION	// URL CONFIG
WITHOUT_CLASSIFICATION	// includes \n
WITHOUT_CLASSIFICATION	// Bottom (embedded resources, source address and optional tasks)
WITHOUT_CLASSIFICATION	// 2 column size
WITHOUT_CLASSIFICATION	// called from ctor, so must not be overridable
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// RETRIEVE IMAGES // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// go to 1st line
WITHOUT_CLASSIFICATION	// Download concurrent resources // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// Is monitor // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// only contains HTTPFileArg elements
WITHOUT_CLASSIFICATION	// Use MD5 // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// Add a new field source ip address (for HC implementations only) //default: IP/Hostname
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ //default: IP/Hostname
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// Button for browsing webservice wsdl
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// Web Methods
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// improve xml display
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// add the proxy elements
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// MAIN PANEL
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// we only put HTTPFileArgs in it
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // Permit dynamic resize of TextArea
WITHOUT_CLASSIFICATION	// We get the AuthManager and pass it to the WSDLHelper // once the sampler is updated to Axis, all of this stuff // should not be necessary. Now I just need to find the // time and motivation to do it.
WITHOUT_CLASSIFICATION	// if use proxy is checked, we enable // the text fields for the host and port
WITHOUT_CLASSIFICATION	// required for unit tests
WITHOUT_CLASSIFICATION	// Disable DELETE and BROWSE buttons if there are no rows in // the table to delete.
WITHOUT_CLASSIFICATION	// Disable DELETE and BROWSE if there are no rows in the table to delete.
WITHOUT_CLASSIFICATION	// create the JTable that holds header per row
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// NOOP
WITHOUT_CLASSIFICATION	/* Implements JMeterGUIComponent.createTestElement() */
WITHOUT_CLASSIFICATION	/* Implements JMeterGUIComponent.modifyTestElement(TestElement) */
WITHOUT_CLASSIFICATION	// Enable DELETE (which may already be enabled, but it won't hurt)
WITHOUT_CLASSIFICATION	// Highlight (select) the appropriate row.
WITHOUT_CLASSIFICATION	// Highlight (select) the appropriate row.
WITHOUT_CLASSIFICATION	// Force a minimum table height of 70 pixels
WITHOUT_CLASSIFICATION	// called from ctor, so must not be overridable
WITHOUT_CLASSIFICATION	// Highlight (select) the appropriate rows.
WITHOUT_CLASSIFICATION	// all table cells are editable
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// Table still contains one or more rows, so highlight // (select) the appropriate one.
WITHOUT_CLASSIFICATION	// If a table cell is being edited, we must cancel the editing // before deleting the row.
WITHOUT_CLASSIFICATION	// If a table cell is being edited, we must cancel the editing // before deleting the row.
WITHOUT_CLASSIFICATION	// Disable the DELETE and SAVE buttons if no rows remaining // after delete
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ //--
WITHOUT_CLASSIFICATION	// Enable the DELETE and SAVE buttons if they are currently // disabled.
WITHOUT_CLASSIFICATION	// If a table cell is being edited, we should accept the current // value and stop the editing before adding a new row.
WITHOUT_CLASSIFICATION	// ignored
WITHOUT_CLASSIFICATION	// Non-expiring
WITHOUT_CLASSIFICATION	// Disable the DELETE and SAVE buttons if no rows remaining // after delete.
WITHOUT_CLASSIFICATION	// preset to default impl
WITHOUT_CLASSIFICATION	// create the JTable that holds one cookie per row
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	//++ Action command names //$NON-NLS-1$
WITHOUT_CLASSIFICATION	// Highlight (select) the appropriate row.
WITHOUT_CLASSIFICATION	// Table still contains one or more rows, so highlight (select) // the appropriate one.
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// drop-down list for renderer
WITHOUT_CLASSIFICATION	// if no results render in jmeter.properties, load Standard (default)
WITHOUT_CLASSIFICATION	// called from ctor, so must not be overridable
WITHOUT_CLASSIFICATION	// If a table cell is being edited, we should accept the current value // and stop the editing before adding a new row.
WITHOUT_CLASSIFICATION	// If a table cell is being edited, we must cancel the editing before // deleting the row
WITHOUT_CLASSIFICATION	// only contains Argument (or HTTPArgument)
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ // removed expiration because it's just an annoyance for static cookies
WITHOUT_CLASSIFICATION	// If a table cell is being edited, we must cancel the editing // before deleting the row.
WITHOUT_CLASSIFICATION	// Table still contains one or more rows, so highlight // (select) the appropriate one.
WITHOUT_CLASSIFICATION	// Table still contains one or more rows, so highlight // (select) the appropriate one.
WITHOUT_CLASSIFICATION	// If a table cell is being edited, we should accept the current // value and stop the editing before adding a new row.
WITHOUT_CLASSIFICATION	// Enable the DELETE and SAVE buttons if they are currently // disabled.
WITHOUT_CLASSIFICATION	// Enable the DELETE and SAVE buttons if they are currently // disabled.
WITHOUT_CLASSIFICATION	// Disable the DELETE and SAVE buttons if no rows remaining // after delete.
WITHOUT_CLASSIFICATION	// Button Panel
WITHOUT_CLASSIFICATION	// create the JTable that holds auth per row
WITHOUT_CLASSIFICATION	// Ignore non-HTTP samplers
WITHOUT_CLASSIFICATION	// && !isPathExtensionNoQuestionmark()
WITHOUT_CLASSIFICATION	// && !isPathExtensionNoEquals()
WITHOUT_CLASSIFICATION	// && !isPathExtensionNoEquals() && !isPathExtensionNoQuestionmark()
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// if ! isPathExtension()
WITHOUT_CLASSIFICATION	// Highlight (select) the appropriate row.
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-2$
WITHOUT_CLASSIFICATION	// all table cells are editable
WITHOUT_CLASSIFICATION	// Don't get tripped up by RE chars in the arg name
WITHOUT_CLASSIFICATION	// name="sessionid" value="value"
WITHOUT_CLASSIFICATION	/*     * -----------------------------------------------------------------------     * Methods     * -----------------------------------------------------------------------     */
WITHOUT_CLASSIFICATION	// return the current value (don't forget the prefix!)
WITHOUT_CLASSIFICATION	// increment the value
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// transient Perl5Compiler compiler = new Perl5Compiler(); // $NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	// PreProcessors are cloned per-thread, so this will be saved per-thread // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// ;sessionid=value // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	//  value="value" name="sessionid" // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-2$ // $NON-NLS-3$ // $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	/*     * ------------------------------------------------------------------------     * Constructors     * ------------------------------------------------------------------------     */
WITHOUT_CLASSIFICATION	/*     * ------------------------------------------------------------------------     * Methods implemented from interface org.apache.jmeter.config.Modifier     * ------------------------------------------------------------------------     */
WITHOUT_CLASSIFICATION	/*     * ------------------------------------------------------------------------     * Methods     * ------------------------------------------------------------------------     */
WITHOUT_CLASSIFICATION	// if a mask for this argument exists
WITHOUT_CLASSIFICATION	// values to be masked must be set in the WebApp to "*"
WITHOUT_CLASSIFICATION	// create instances needed for parsing
WITHOUT_CLASSIFICATION	// XMLReaderFactory.createXMLReader(vendorParseClass);
WITHOUT_CLASSIFICATION	// register content handler
WITHOUT_CLASSIFICATION	// register error handler
WITHOUT_CLASSIFICATION	// parse
WITHOUT_CLASSIFICATION	// ------------------------------------------- // Constants and Data Members // -------------------------------------------
WITHOUT_CLASSIFICATION	// ------------------------------------------- // Constructors // -------------------------------------------
WITHOUT_CLASSIFICATION	// initalise pointer to first user
WITHOUT_CLASSIFICATION	// Use round robin allocation of user details
WITHOUT_CLASSIFICATION	// no entries in all users, therefore create an empty Map object
WITHOUT_CLASSIFICATION	// if parameter name exists in http request // then change its value with value obtained with regular expression
WITHOUT_CLASSIFICATION	// verify if regex groups exists
WITHOUT_CLASSIFICATION	// Note UserParameterXML accesses this variable // to obtain the Set data via method getParsedParameters()
WITHOUT_CLASSIFICATION	// cannot be first line either
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// ------------------------------------------- // Constants and Data Members // -------------------------------------------
WITHOUT_CLASSIFICATION	// ------------------------------------------- // Methods // -------------------------------------------
WITHOUT_CLASSIFICATION	// haven't got to reset paramname & paramvalue // but did it to keep the code looking correct
WITHOUT_CLASSIFICATION	/*     * These are used as GUI item names;     * LOWERBOUND, UPPERBOUND and INCREMENT are used in the focusLost() method     */
WITHOUT_CLASSIFICATION	// must create a new object, // or else end up with a set full of the same Map object
WITHOUT_CLASSIFICATION	/*-------------------------------------------------------------------------     * Methods (used by UserParameterXML to get XML parameters from XML file)     *----------------------------------------------------------------------- */
WITHOUT_CLASSIFICATION	// this.updateUI();
WITHOUT_CLASSIFICATION	// boolean pass = true;
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// Next line
WITHOUT_CLASSIFICATION	// called from ctor, so must not be overridable
WITHOUT_CLASSIFICATION	// UTF-8 unsupported? You must be joking!
WITHOUT_CLASSIFICATION	// N.B. Since the tags are extracted from an HTML Form, any values must already have been encoded
WITHOUT_CLASSIFICATION	// The value is in the second group
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// Cache of parsers - parsers must be re-usable
WITHOUT_CLASSIFICATION	// Is there a cached parser?
WITHOUT_CLASSIFICATION	// cache the parser
WITHOUT_CLASSIFICATION	// The Set is used to ignore duplicated binary files. // Using a LinkedHashSet to avoid unnecessary overhead in iterating // the elements in the set later on. As a side-effect, this will keep // them roughly in order, which should be a better model of browser // behaviour.
WITHOUT_CLASSIFICATION	/*     * A dummy class to pass the pointer of URL.     */
WITHOUT_CLASSIFICATION	// then we need to download the binary
WITHOUT_CLASSIFICATION	// we check the input tag type for image
WITHOUT_CLASSIFICATION	// Putting the string first means it works even if the attribute is null
WITHOUT_CLASSIFICATION	// Now look for URLs in the STYLE attribute
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// we check the input tag type for image
WITHOUT_CLASSIFICATION	// then we need to download the binary
WITHOUT_CLASSIFICATION	// Putting the string first means it works even if the attribute is null
WITHOUT_CLASSIFICATION	// Now look for URLs in the STYLE attribute
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// case Node.TEXT_NODE: // break;
WITHOUT_CLASSIFICATION	/*     * Helper method to get an attribute value, if it exists @param attrs list     * of attributs @param attname attribute name @return     */
WITHOUT_CLASSIFICATION	// Note there's 3 capturing groups per value
WITHOUT_CLASSIFICATION	// Number of capturing groups possibly containing Base HREFs:
WITHOUT_CLASSIFICATION	// Check for a BASE HREF:
WITHOUT_CLASSIFICATION	// Doesn't even look like a URL? // Maybe it isn't: Ignore the exception.
WITHOUT_CLASSIFICATION	//url.replace('+',' ');
WITHOUT_CLASSIFICATION	// No WARN message to avoid performance impact
WITHOUT_CLASSIFICATION	/*     * Private iterator used to unwrap the URL from the URLString class     *     */
WITHOUT_CLASSIFICATION	/*         * Unwraps the URLString class to return the URL         */
WITHOUT_CLASSIFICATION	// Noop
WITHOUT_CLASSIFICATION	// Try to ensure that more javascript code is processed OK ...
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// Listen on main socket
WITHOUT_CLASSIFICATION	// Timeout occurred. Ignore, and keep looping until we're // told to stop running.
WITHOUT_CLASSIFICATION	/*     * A dummy class to pass the pointer of URL.     */
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// NOOP
WITHOUT_CLASSIFICATION	// we check the input tag type for image
WITHOUT_CLASSIFICATION	// then we need to download the binary
WITHOUT_CLASSIFICATION	// Putting the string first means it works even if the attribute is null
WITHOUT_CLASSIFICATION	// Now look for URLs in the STYLE attribute
WITHOUT_CLASSIFICATION	// Now parse the DOM tree
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// a url is always in a Tag.
WITHOUT_CLASSIFICATION	// first we check to see if body tag has a // background set
WITHOUT_CLASSIFICATION	// look for applets
WITHOUT_CLASSIFICATION	// look for Objects
WITHOUT_CLASSIFICATION	// second, if the tag was a composite tag, // recursively parse its children.
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-1$ proxy.binary.filetype=binary
WITHOUT_CLASSIFICATION	/*     * Optionally number the requests     */
WITHOUT_CLASSIFICATION	// running number
WITHOUT_CLASSIFICATION	// Pass request to new proxy thread
WITHOUT_CLASSIFICATION	// Use default encoding
WITHOUT_CLASSIFICATION	// Tell the sampler to do a multipart post
WITHOUT_CLASSIFICATION	// Set the form data
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// Used by GUI
WITHOUT_CLASSIFICATION	// and as a string
WITHOUT_CLASSIFICATION	// Set the file uploads
WITHOUT_CLASSIFICATION	// Remove the header for content-type and content-length, since // those values will most likely be incorrect when the sampler // performs the multipart request, because the boundary string // will change
WITHOUT_CLASSIFICATION	// used when postData is pure xml (eg. an xml-rpc call) or for PUT
WITHOUT_CLASSIFICATION	// It is the most common post request, with parameter name and values // We also assume this if no content type is present, to be most backwards compatible, // but maybe we should only parse arguments if the content type is as expected //standard name=value postData
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// Just put the whole postbody as the value of a parameter //used when postData is pure xml (ex. an xml-rpc call)
WITHOUT_CLASSIFICATION	// Although the spec says UTF-8 should be used for encoding URL parameters, // most browser use ISO-8859-1 for default if encoding is not known. // We use null for contentEncoding, then the url parameters will be added // with the value in the URL, and the "encode?" flag set to false
WITHOUT_CLASSIFICATION	// Set the content encoding
WITHOUT_CLASSIFICATION	// Check if the request itself tells us what the encoding is
WITHOUT_CLASSIFICATION	// Check if we know the encoding of the page
WITHOUT_CLASSIFICATION	// Check if we know the encoding of the form
WITHOUT_CLASSIFICATION	// Form encoding has priority over page encoding
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// wait for server to stop
WITHOUT_CLASSIFICATION	// Must agree with the order of entries in the drop-down // created in ProxyControlGui.createGroupingPanel() //private static final int GROUPING_NO_GROUPS = 0;
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ //- JMX file attributes
WITHOUT_CLASSIFICATION	// Note: Windows user preferences are stored relative to: HKEY_CURRENT_USER\Software\JavaSoft\Prefs
WITHOUT_CLASSIFICATION	// Original numeric order (we now use strings)
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // Detect if user has pressed a new link
WITHOUT_CLASSIFICATION	// for ssl connection
WITHOUT_CLASSIFICATION	// Proxy configuration SSL
WITHOUT_CLASSIFICATION	// should not happen
WITHOUT_CLASSIFICATION	// Keys for user preferences
WITHOUT_CLASSIFICATION	// NOOP
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ $NON-NLS-2$
WITHOUT_CLASSIFICATION	//NOOP
WITHOUT_CLASSIFICATION	// Should we match using regexes?
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// Whether to use dymanic key generation (if supported) // $NON-NLS-1$;
WITHOUT_CLASSIFICATION	// The alias to be used if dynamic host names are not possible // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// If this is defined, it is assumed to be the alias of a user-supplied certificate; overrides dynamic mode // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// user-provided keystore // keystore generated by JMeter; single entry
WITHOUT_CLASSIFICATION	// Whether to use the redirect disabling feature (can be switched off if it does not work)
WITHOUT_CLASSIFICATION	// Although this field is mutable, it is only accessed within the synchronized method deliverSampler()
WITHOUT_CLASSIFICATION	// When was the last sample seen?
WITHOUT_CLASSIFICATION	// maintain original behaviour
WITHOUT_CLASSIFICATION	// Convert the old numeric types - just in case someone wants to reload the workbench
WITHOUT_CLASSIFICATION	// make sure we log the error
WITHOUT_CLASSIFICATION	// the url matches the last redirect
WITHOUT_CLASSIFICATION	// Save Location so resulting sample can be disabled
WITHOUT_CLASSIFICATION	// OK, because find only returns correct element types
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// Package protected to allow test case access
WITHOUT_CLASSIFICATION	// Package protected to allow test case access
WITHOUT_CLASSIFICATION	// If no expressions are specified, we let the sample pass
WITHOUT_CLASSIFICATION	// Check that we have a content type
WITHOUT_CLASSIFICATION	// Check if the include pattern is matched
WITHOUT_CLASSIFICATION	// Check if the exclude pattern is matched
WITHOUT_CLASSIFICATION	// Not 100% sure, but I believe this can't happen, so // I'll log and throw an error:
WITHOUT_CLASSIFICATION	// Not 100% sure, but I believe this can't happen, so // I'll log and throw an error:
WITHOUT_CLASSIFICATION	// Look for elements directly within the HTTP proxy:
WITHOUT_CLASSIFICATION	// Look for arguments elements in the target controller or higher up:
WITHOUT_CLASSIFICATION	// Special case for the TestPlan's Arguments sub-element:
WITHOUT_CLASSIFICATION	// Remember this was first in its batch
WITHOUT_CLASSIFICATION	// Decent value for timers
WITHOUT_CLASSIFICATION	// Huh! don't store this one!
WITHOUT_CLASSIFICATION	// If we're not storing subsequent samplers, we'll need the // first sampler to do all the work...:
WITHOUT_CLASSIFICATION	// Find the last controller in the target to store the // sampler there:
WITHOUT_CLASSIFICATION	// There's a few properties which are excluded from this processing:
WITHOUT_CLASSIFICATION	// go on with next property.
WITHOUT_CLASSIFICATION	// Build the replacer from all the variables in the collection:
WITHOUT_CLASSIFICATION	// TL - TE
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$; // $NON-NLS-1$;
WITHOUT_CLASSIFICATION	// Assume we have already created the store
WITHOUT_CLASSIFICATION	// Assume we have already created the store
WITHOUT_CLASSIFICATION	// no CA key - probably the wrong store type. // cannot continue
WITHOUT_CLASSIFICATION	// store is faulty, we need to recreate it // if cert is not valid, flag up to recreate it
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ $NON-NLS-2$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ $NON-NLS-2$
WITHOUT_CLASSIFICATION	// store is faulty, we need to recreate it // if cert is not valid, flag up to recreate it
WITHOUT_CLASSIFICATION	// message includes the file name
WITHOUT_CLASSIFICATION	// no existing file or not valid // Alphanum to avoid issues with command-line quoting // we use same password for both
WITHOUT_CLASSIFICATION	// no existing file or not valid // Alphanum to avoid issues with command-line quoting // we use same password for both
WITHOUT_CLASSIFICATION	// This should now work
WITHOUT_CLASSIFICATION	// This should now work
WITHOUT_CLASSIFICATION	// The subject may be either a host or a domain
WITHOUT_CLASSIFICATION	// reload to pick up new aliases // reloading is very quick compared with creating an entry currently
WITHOUT_CLASSIFICATION	// not a wildcard
WITHOUT_CLASSIFICATION	// This should only be called for a specific host
WITHOUT_CLASSIFICATION	// ensure Proxy threads cannot interfere with each other
WITHOUT_CLASSIFICATION	// reload after adding alias
WITHOUT_CLASSIFICATION	// safer to start afresh
WITHOUT_CLASSIFICATION	// the keystore for use by the Proxy
WITHOUT_CLASSIFICATION	// Allow list of headers to be overridden // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// Use with SSL connection
WITHOUT_CLASSIFICATION	// For identifying log messages
WITHOUT_CLASSIFICATION	// keystore for SSL keys; fixed at config except for dynamic host key generation
WITHOUT_CLASSIFICATION	// Check which HTTPSampler class we should use
WITHOUT_CLASSIFICATION	// Now, parse initial request (in case it is a CONNECT request)
WITHOUT_CLASSIFICATION	// Should not happen, but if it does we don't want to continue 
WITHOUT_CLASSIFICATION	// Re-parse (now it's the http request over SSL)
WITHOUT_CLASSIFICATION	// most likely this is because of a certificate error
WITHOUT_CLASSIFICATION	// Now parse the DOM tree
WITHOUT_CLASSIFICATION	// we start to iterate through the elements
WITHOUT_CLASSIFICATION	// a url is always in a Tag.
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// With ssl request, url is host:port (without https:// or path) // $NON-NLS-1$
WITHOUT_CLASSIFICATION	/*             * Create a Header Manager to ensure that the browsers headers are             * captured and sent to the server             */
WITHOUT_CLASSIFICATION	// Needed for HTTPSampler2
WITHOUT_CLASSIFICATION	// Needed for HTTPSampler2
WITHOUT_CLASSIFICATION	// Find the page encoding and possibly encodings for forms in the page // in the response from the web server
WITHOUT_CLASSIFICATION	// ignored, already processed
WITHOUT_CLASSIFICATION	// Generate result (if nec.) and populate it
WITHOUT_CLASSIFICATION	// Generate result (if nec.) and populate it
WITHOUT_CLASSIFICATION	// Generate result (if nec.) and populate it
WITHOUT_CLASSIFICATION	/*             * We don't want to store any cookies in the generated test plan             */
WITHOUT_CLASSIFICATION	// Always remove cookies // Always remove authorization // Remove additional headers
WITHOUT_CLASSIFICATION	// deliverSampler allows sampler to be null, but result must not be null
WITHOUT_CLASSIFICATION	// pick up any recent changes from other threads
WITHOUT_CLASSIFICATION	// the host has a key already
WITHOUT_CLASSIFICATION	// the host matches a domain; use its key
WITHOUT_CLASSIFICATION	// add the remaining parts
WITHOUT_CLASSIFICATION	// Check if alias is suitable here, rather than waiting for connection to fail
WITHOUT_CLASSIFICATION	// drop empty trailing content
WITHOUT_CLASSIFICATION	// We don't want this passed on to browser
WITHOUT_CLASSIFICATION	// We don't want this passed on to browser
WITHOUT_CLASSIFICATION	// Fix the content length
WITHOUT_CLASSIFICATION	// Get rid of the query and the ?
WITHOUT_CLASSIFICATION	//    Remaining implementations delegate to the wrapped key manager
WITHOUT_CLASSIFICATION	// Only check form tags
WITHOUT_CLASSIFICATION	// Find the action / form url
WITHOUT_CLASSIFICATION	// Just use the first one of the possible many charsets
WITHOUT_CLASSIFICATION	// NOTREAD // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// saved copy of first line for error reports
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// second, if the tag was a composite tag, // recursively parse its children.
WITHOUT_CLASSIFICATION	// Get rid of the query and the ?
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// TODO - charset?
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// parse other header lines, looking for Content-Length
WITHOUT_CLASSIFICATION	// Save the last valid content length one
WITHOUT_CLASSIFICATION	// Keep the raw post data
WITHOUT_CLASSIFICATION	// will be host:port for CONNECT
WITHOUT_CLASSIFICATION	// SSL connection
WITHOUT_CLASSIFICATION	// Don't try to adjust the host name
WITHOUT_CLASSIFICATION	// it must be a proxied HTTPS request // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// JAVA Impl accepts URLs with unsafe characters so don't do anything
WITHOUT_CLASSIFICATION	/*     * Split line into name/value pairs and store in headers if relevant     * If name = "content-length", then return value as int, else return 0     */
WITHOUT_CLASSIFICATION	// Nothing to do
WITHOUT_CLASSIFICATION	// Get the boundary string for the multiparts from the content type
WITHOUT_CLASSIFICATION	// // Parsing Methods //
WITHOUT_CLASSIFICATION	// chop to "server.name:x/thing"
WITHOUT_CLASSIFICATION	// chop to "server.name:x/thing"
WITHOUT_CLASSIFICATION	// chop to server.name:xx // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// chop to server.name // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// Handle IPv6 urls
WITHOUT_CLASSIFICATION	// chop to server.name:xx
WITHOUT_CLASSIFICATION	// chop to server.name
WITHOUT_CLASSIFICATION	// Generate Error Body
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// Prevent both redirect types from being selected
WITHOUT_CLASSIFICATION	// 300 codes tell client to do actions
WITHOUT_CLASSIFICATION	/*     * Use regexes to match the source data     */
WITHOUT_CLASSIFICATION	// Proxy can take some while to start up; show a wating cursor
WITHOUT_CLASSIFICATION	// This is applied to fields that should cause a restart when changed // $NON-NLS-1$
WITHOUT_CLASSIFICATION	//- action names
WITHOUT_CLASSIFICATION	// Resource names for column headers // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// Used by itemListener // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// System.err.println("Enable Restart");
WITHOUT_CLASSIFICATION	/*     * Handles groupingMode. actionPerfomed is not suitable, as that seems to be     * activated whenever the Proxy is selected in the Test Plan     * Also handles samplerTypeName     */
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// Drop the last character:
WITHOUT_CLASSIFICATION	// Highlight (select) the appropriate rows.
WITHOUT_CLASSIFICATION	// Highlight (select) the appropriate rows.
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-1$  $NON-NLS-2$
WITHOUT_CLASSIFICATION	// Default value // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // maintain original default
WITHOUT_CLASSIFICATION	// Default value // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// Action listener will be added later
WITHOUT_CLASSIFICATION	// Ignore everything else
WITHOUT_CLASSIFICATION	// Note: position of these elements in the menu *must* match the // corresponding ProxyControl.GROUPING_* values. // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// Stop action notifications while we shuffle this around:
WITHOUT_CLASSIFICATION	// Include request body if it is a post or put or patch
WITHOUT_CLASSIFICATION	// Reinstate action notifications:
WITHOUT_CLASSIFICATION	// never null
WITHOUT_CLASSIFICATION	// Set the current value:
WITHOUT_CLASSIFICATION	// never null
WITHOUT_CLASSIFICATION	// can share these
WITHOUT_CLASSIFICATION	/*         * Don't redirect the following:         * 300 = Multiple choice         * 304 = Not Modified         * 305 = Use Proxy         * 306 = (Unused)         */
WITHOUT_CLASSIFICATION	// get the start of the file
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// Preserve original case
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// Update the dataEncoding
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// Extract the content-type if present // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // Maximum connection retries
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // Temporary copies, so can set the final ones
WITHOUT_CLASSIFICATION	// N.B. this needs to be done before opening the connection
WITHOUT_CLASSIFICATION	// Update follow redirects setting just for this connection
WITHOUT_CLASSIFICATION	// N.B. must be done after opening connection
WITHOUT_CLASSIFICATION	// works OK even if ContentEncoding is null
WITHOUT_CLASSIFICATION	// Normal InputStream is not available
WITHOUT_CLASSIFICATION	// N.B. this closes 'in'
WITHOUT_CLASSIFICATION	// Add all the headers from the HeaderManager
WITHOUT_CLASSIFICATION	// Get all the request properties, which are the headers set on the connection
WITHOUT_CLASSIFICATION	// Exclude the COOKIE header, since cookie is reported separately in the sample
WITHOUT_CLASSIFICATION	// value is a List of Strings
WITHOUT_CLASSIFICATION	// Count the retries as well in the time
WITHOUT_CLASSIFICATION	// Check cache for an entry with an Expires header in the future
WITHOUT_CLASSIFICATION	// Start with 0 so tries at least once, and retries at most MAX_CONN_RETRIES times
WITHOUT_CLASSIFICATION	// Attempt the connection:
WITHOUT_CLASSIFICATION	// we don't want interrupt to try disconnection again
WITHOUT_CLASSIFICATION	// try again
WITHOUT_CLASSIFICATION	// This should never happen, but...
WITHOUT_CLASSIFICATION	// Nice, we've got a connection. Finish sending the request:
WITHOUT_CLASSIFICATION	// Request sent. Now get the response:
WITHOUT_CLASSIFICATION	// Done with the sampling proper.
WITHOUT_CLASSIFICATION	// Now collect the results into the HTTPSampleResult:
WITHOUT_CLASSIFICATION	// Cannot be null here
WITHOUT_CLASSIFICATION	// e.g. text/html; charset=ISO-8859-1
WITHOUT_CLASSIFICATION	// if either a file or path location is given, // get the file object. // we have a file
WITHOUT_CLASSIFICATION	// Set details from the actual response // Needs to be done before response can be stored
WITHOUT_CLASSIFICATION	// Sampling proper - establish the connection and read the response: // Repeatedly try to connect:
WITHOUT_CLASSIFICATION	// Store any cookies received in the cookie manager:
WITHOUT_CLASSIFICATION	// If we redirected automatically, the URL may have changed
WITHOUT_CLASSIFICATION	// has been seen in a redirect // use header (if possible) if no message found
WITHOUT_CLASSIFICATION	// Don't process again
WITHOUT_CLASSIFICATION	// Save cache information
WITHOUT_CLASSIFICATION	/*     * Random class for generating random numbers.     */
WITHOUT_CLASSIFICATION	// return the absolutePath of the file
WITHOUT_CLASSIFICATION	/*     * The method will check to see if JMeter was started in NonGui mode. If it     * was, it will try to pick up the proxy host and port values if they were     * passed to JMeter.java.     */
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	//+ JMX file attribut names - do not change! //$NON-NLS-1$
WITHOUT_CLASSIFICATION	// we check to see if the proxy host and port are set
WITHOUT_CLASSIFICATION	/*     * This method uses Apache soap util to create the proper DOM elements.     *     * @return Element     */
WITHOUT_CLASSIFICATION	//get filename or ""
WITHOUT_CLASSIFICATION	/* Note that the filename is also used as a key to the pool (if used)        ** Documents provided in the testplan are not currently pooled, as they may change        *  between samples.        */
WITHOUT_CLASSIFICATION	// we created the document
WITHOUT_CLASSIFICATION	// Must be local content - or not using pool
WITHOUT_CLASSIFICATION	/*         * Consider using Apache commons pool to create a pool of document         * builders or make sure XMLParserUtils creates builders efficiently.         */
WITHOUT_CLASSIFICATION	//Suppress messages to stdout
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// we don't want interrupt to try disconnection again // We don't want to continue using this connection, even if KeepAlive is set // May not exist
WITHOUT_CLASSIFICATION	// calling disconnect doesn't close the connection immediately, // but indicates we're through with it. The JVM should close // it when necessary. // we don't want interrupt to try disconnection again // Disconnect unless using KeepAlive
WITHOUT_CLASSIFICATION	// it's not set, lets check if the user passed // proxy host and port from command line
WITHOUT_CLASSIFICATION	// it's not set, lets check if the user passed // proxy host and port from command line
WITHOUT_CLASSIFICATION	// must be a "here" document
WITHOUT_CLASSIFICATION	/*     * Required to satisfy HTTPSamplerBase Should not be called, as we override     * sample()     */
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //- JMX file attribut names - do not change!
WITHOUT_CLASSIFICATION	// Assume it will fail // ditto $NON-NLS-1$
WITHOUT_CLASSIFICATION	// set the response defaults
WITHOUT_CLASSIFICATION	// WARNING - could be large
WITHOUT_CLASSIFICATION	// if a blank HeaderManager exists, try to // get the SOAPHTTPConnection. After the first // request, there should be a connection object // stored with the cookie header info.
WITHOUT_CLASSIFICATION	// set the auth. thanks to KiYun Roe for contributing the patch // I cleaned up the patch slightly. 5-26-05
WITHOUT_CLASSIFICATION	// check the proxy
WITHOUT_CLASSIFICATION	// if use proxy is set, we try to pick up the // proxy host and port from either the text // fields or from JMeterUtil if they were passed // from command line
WITHOUT_CLASSIFICATION	// if for some reason the host is blank and the port is // zero, the sampler will fail silently
WITHOUT_CLASSIFICATION	// API uses raw types
WITHOUT_CLASSIFICATION	// It is not possible to access the actual HTTP response code, so we assume no data means failure
WITHOUT_CLASSIFICATION	// Scheme used for slow HTTP sockets. Cannot be set as a default, because must be set on an HttpClient instance.
WITHOUT_CLASSIFICATION	// We always want to override the HTTPS scheme, because we want to trust all certificates and hosts
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// Done with the sampling proper.
WITHOUT_CLASSIFICATION	// Now collect the results into the HTTPSampleResult:
WITHOUT_CLASSIFICATION	// If we redirected automatically, the URL may have changed
WITHOUT_CLASSIFICATION	// Store any cookies received in the cookie manager:
WITHOUT_CLASSIFICATION	// Save cache information
WITHOUT_CLASSIFICATION	// condensed length (without \r) // Add \r for each header // Add \r for initial header // final \r\n before data
WITHOUT_CLASSIFICATION	// by not reading the response // for real, it improves the // performance on slow clients
WITHOUT_CLASSIFICATION	// reponse code doesn't really apply, since // the soap driver doesn't provide a // response code
WITHOUT_CLASSIFICATION	/*     * Create a set of default parameters from the ones initially created.     * This allows the defaults to be overridden if necessary from the properties file.     */
WITHOUT_CLASSIFICATION	// Set up HTTP scheme override if necessary
WITHOUT_CLASSIFICATION	// We always want to override the HTTPS scheme
WITHOUT_CLASSIFICATION	// Accessed from multiple threads
WITHOUT_CLASSIFICATION	// can throw IOException
WITHOUT_CLASSIFICATION	// perform the sample
WITHOUT_CLASSIFICATION	// Needs to be done after execute to pick up all the headers
WITHOUT_CLASSIFICATION	// We've finished with the request, so we can add the LocalAddress to it for display
WITHOUT_CLASSIFICATION	// HTTP protocol violation, but avoids NPE
WITHOUT_CLASSIFICATION	// record some sizes to allow HTTPSampleResult.getBytes() with different options
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// Follow redirects and download page resources if appropriate:
WITHOUT_CLASSIFICATION	// pick up headers if failed to execute the request
WITHOUT_CLASSIFICATION	// protocol://[user:pass@]host:[port]
WITHOUT_CLASSIFICATION	// Always create hash because we will always need it
WITHOUT_CLASSIFICATION	// Allow for null strings
WITHOUT_CLASSIFICATION	// otherwise proxy String fields may be null
WITHOUT_CLASSIFICATION	// No proxy, so don't check proxy fields
WITHOUT_CLASSIFICATION	// Lookup key - must agree with all the values used to create the HttpClient.
WITHOUT_CLASSIFICATION	// One-time init for this client
WITHOUT_CLASSIFICATION	// set retry count
WITHOUT_CLASSIFICATION	// Override the defualt schemes as necessary
WITHOUT_CLASSIFICATION	// Set up proxy details
WITHOUT_CLASSIFICATION	// save the agent for next time round
WITHOUT_CLASSIFICATION	// Use special field ip source address (for pseudo 'ip spoofing')
WITHOUT_CLASSIFICATION	// reset in case was set previously
WITHOUT_CLASSIFICATION	// Allow the mimetype of the file to control the content type
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// Exclude the COOKIE header, since cookie is reported separately in the sample
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// N.B. need to separate protocol from authority otherwise http://server would match https://erver // could use separate fields, but simpler to combine them
WITHOUT_CLASSIFICATION	// Method left empty here, but allows subclasses to override
WITHOUT_CLASSIFICATION	// header[0] is not the status line... // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// remove any port specification // $NON-NLS-1$ $NON-NLS-2$
WITHOUT_CLASSIFICATION	// no need to specify the port if it is the default
WITHOUT_CLASSIFICATION	// Get all the request headers
WITHOUT_CLASSIFICATION	// Helper class so we can generate request data without dumping entire file contents
WITHOUT_CLASSIFICATION	// encoding does not really matter here
WITHOUT_CLASSIFICATION	// Buffer to hold the post body, except file content
WITHOUT_CLASSIFICATION	// Check if we should do a multipart/form-data or an // application/x-www-form-urlencoded post request
WITHOUT_CLASSIFICATION	// If a content encoding is specified, we use that as the // encoding of any parameter values
WITHOUT_CLASSIFICATION	// Write the request to our own stream
WITHOUT_CLASSIFICATION	// Create the parts // Add any parameters
WITHOUT_CLASSIFICATION	// We get the posted bytes using the encoding used to create it
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ this is the default used by HttpClient
WITHOUT_CLASSIFICATION	// not multipart // Check if the header manager had a content type header // This allows the user to specify his own content-type for a POST request
WITHOUT_CLASSIFICATION	// If there are no arguments, we can send a file as the body of the request // TODO: needs a multiple file upload scenerio
WITHOUT_CLASSIFICATION	// If getSendFileAsPostBody returned true, it's sure that file is not null
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// We get the posted bytes using the encoding used to create it
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// We just add placeholder text for file content
WITHOUT_CLASSIFICATION	// If a content encoding is specified, we set it as http parameter, so that // the post body will be encoded in the specified content encoding
WITHOUT_CLASSIFICATION	// If none of the arguments have a name specified, we // just send all the values as the post body
WITHOUT_CLASSIFICATION	// Just append all the parameter values, and use that as the post body
WITHOUT_CLASSIFICATION	// Note: if "Encoded?" is not selected, arg.getEncodedValue is equivalent to arg.getValue
WITHOUT_CLASSIFICATION	// Note: if "Encoded?" is not selected, arg.getEncodedValue is equivalent to arg.getValue
WITHOUT_CLASSIFICATION	// Let StringEntity perform the encoding
WITHOUT_CLASSIFICATION	// It is a normal post request, with parameter names and values
WITHOUT_CLASSIFICATION	// Set the content type
WITHOUT_CLASSIFICATION	// Add the parameters
WITHOUT_CLASSIFICATION	// Use the default encoding for urls
WITHOUT_CLASSIFICATION	// The HTTPClient always urlencodes both name and value, // so if the argument is already encoded, we have to decode // it before adding it to the post request
WITHOUT_CLASSIFICATION	// The value is already encoded by the user // Must decode the value now, so that when the // httpclient encodes it, we end up with the same value // as the user had entered.
WITHOUT_CLASSIFICATION	// Add the parameter, httpclient will urlencode it
WITHOUT_CLASSIFICATION	// Buffer to hold the entity body
WITHOUT_CLASSIFICATION	// we provide the MIME type here
WITHOUT_CLASSIFICATION	// Check for local contentEncoding (charset) override; fall back to default for content body // we do this here rather so we can use the same charset to retrieve the data
WITHOUT_CLASSIFICATION	// Only create this if we are overriding whatever default there may be // If there are no arguments, we can send a file as the body of the request
WITHOUT_CLASSIFICATION	// Just append all the parameter values, and use that as the entity body
WITHOUT_CLASSIFICATION	// Check if we have any content to send for body
WITHOUT_CLASSIFICATION	// We get the posted bytes using the charset that was used to create them
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// If getSendFileAsPostBody returned true, it's sure that file is not null // no need for content-type here
WITHOUT_CLASSIFICATION	// If none of the arguments have a name specified, we // just send all the values as the entity body
WITHOUT_CLASSIFICATION	// If the request entity is repeatable, we can send it first to // our own stream, so we can return it
WITHOUT_CLASSIFICATION	// this probably cannot happen
WITHOUT_CLASSIFICATION	// Does not need to be synchronised, as all access is from same thread
WITHOUT_CLASSIFICATION	// don't try twice
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// may be the empty string
WITHOUT_CLASSIFICATION	// N.B. It's not po ssible to forward threadStarted() to the implementation class. // This is because Config items are not processed until later, and HTTPDefaults may define the implementation
WITHOUT_CLASSIFICATION	// Forward to sampler
WITHOUT_CLASSIFICATION	// Forward to sampler
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-1$ $NON-NLS-2$ $NON-NLS-3$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-1$ $NON-NLS-2$ $NON-NLS-3$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// force reopen on next sample
WITHOUT_CLASSIFICATION	// Content-length
WITHOUT_CLASSIFICATION	// Marker for query string attribute
WITHOUT_CLASSIFICATION	//+ JMX names - do not change // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// More general attributes not supported
WITHOUT_CLASSIFICATION	// Authorization
WITHOUT_CLASSIFICATION	// Host always
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// content-type
WITHOUT_CLASSIFICATION	// content-type
WITHOUT_CLASSIFICATION	// we need to use up the int now
WITHOUT_CLASSIFICATION	//int mark =
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// Dummy
WITHOUT_CLASSIFICATION	// Methods needed by subclasses to get access to the implementation
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// Help convert existing JMX files which use HTTPSampler[2] nodes
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	/* (non-Javadoc)     * @see org.apache.jmeter.protocol.http.sampler.HTTPSamplerBase#testIterationStart(org.apache.jmeter.engine.event.LoopIterationEvent)     */
WITHOUT_CLASSIFICATION	// Ignored
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// KEY = TCPKEY or ERRKEY, Entry= Socket or String
WITHOUT_CLASSIFICATION	// superclass does not support types
WITHOUT_CLASSIFICATION	// TODO - charset?
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // default value: false
WITHOUT_CLASSIFICATION	// default for concurrent pool (do not change)
WITHOUT_CLASSIFICATION	/* Shown as Parameter Name on the GUI */
WITHOUT_CLASSIFICATION	//- JMX names
WITHOUT_CLASSIFICATION	// Default concurrent pool size for download embedded resources
WITHOUT_CLASSIFICATION	// The default setting to be used (i.e. historic)
WITHOUT_CLASSIFICATION	// for Thread Pool for resources but no need to use a special value?
WITHOUT_CLASSIFICATION	// Use for ComboBox Source Address Type. Preserve order (specially with localization)
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // default value: 60 secs 
WITHOUT_CLASSIFICATION	// FILE_FIELD is kept for backward compatibility with old test plans // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // Supported methods:
WITHOUT_CLASSIFICATION	// IMAGE_PARSER now really means EMBEDDED_PARSER // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// i.e. GET
WITHOUT_CLASSIFICATION	// Derive the mapping of content types to parsers
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// Store MD5 hash instead of storing response // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// Not synch, but it is not modified after creation
WITHOUT_CLASSIFICATION	// returns empty array for null
WITHOUT_CLASSIFICATION	////////////////////// Code ///////////////////////////
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// Skip parameters with a blank name (allows use of optional variables in parameter lists)
WITHOUT_CLASSIFICATION	// If there is one file with no parameter name, the file will // be sent as post body.
WITHOUT_CLASSIFICATION	// We use multipart if we have been told so, or files are present // and the files should not be send as the post body
WITHOUT_CLASSIFICATION	// We know that URL arguments should always be encoded in UTF-8 according to spec
WITHOUT_CLASSIFICATION	// Parse the arguments in querystring, assuming specified encoding for values
WITHOUT_CLASSIFICATION	// Check if there are any difference between name and value and their encoded name and value
WITHOUT_CLASSIFICATION	// If there is no difference, we mark it as not needing encoding
WITHOUT_CLASSIFICATION	// private method to allow AsyncSample to reset the value without performing checks
WITHOUT_CLASSIFICATION	// private method to allow AsyncSample to reset the value without performing checks
WITHOUT_CLASSIFICATION	// allow use of relative file URLs
WITHOUT_CLASSIFICATION	// HTTP URLs must be absolute, allow file to be relative // $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// Add the query string if it is a HTTP GET or DELETE request
WITHOUT_CLASSIFICATION	// Get the query string encoded in specified encoding // If no encoding is specified by user, we will get it // encoded in UTF-8, which is what the HTTP spec says
WITHOUT_CLASSIFICATION	// Already contains a prefix
WITHOUT_CLASSIFICATION	// If default port for protocol is used, we do not include port in URL
WITHOUT_CLASSIFICATION	// We use the encoding which should be used according to the HTTP spec, which is UTF-8
WITHOUT_CLASSIFICATION	// Check if the sampler has a specified content encoding
WITHOUT_CLASSIFICATION	// Encode the parameter value in the specified content encoding
WITHOUT_CLASSIFICATION	// records the existance of an equal sign
WITHOUT_CLASSIFICATION	// We do not know the content encoding of the query string
WITHOUT_CLASSIFICATION	// Append body if it is a post or put
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// need to handle four cases: // - string contains name=value // - string contains name= // - string contains name // - empty string
WITHOUT_CLASSIFICATION	// is there a separator? // case of name=value, name=
WITHOUT_CLASSIFICATION	// If we know the encoding, we can decode the argument value, // to make it easier to read for the user
WITHOUT_CLASSIFICATION	// If we do not know the encoding, we just use the encoded value // The browser has already done the encoding, so save the values as is
WITHOUT_CLASSIFICATION	// we have a name
WITHOUT_CLASSIFICATION	// we don't; use the default parser
WITHOUT_CLASSIFICATION	// Iterate through the URLs and download each image:
WITHOUT_CLASSIFICATION	// Get the URL matcher
WITHOUT_CLASSIFICATION	// don't fetch unless pattern compiles
WITHOUT_CLASSIFICATION	// For concurrent get resources
WITHOUT_CLASSIFICATION	// See catch clause below
WITHOUT_CLASSIFICATION	// There were some spaces in the URL
WITHOUT_CLASSIFICATION	// I don't think localMatcher can be null here, but check just in case
WITHOUT_CLASSIFICATION	// we have a pattern and the URL does not match, so skip it
WITHOUT_CLASSIFICATION	// default: serial download embedded resources
WITHOUT_CLASSIFICATION	// IF for download concurrent embedded resources
WITHOUT_CLASSIFICATION	// init with default value
WITHOUT_CLASSIFICATION	// sample all resources with threadpool
WITHOUT_CLASSIFICATION	// call normal shutdown (wait ending all tasks)
WITHOUT_CLASSIFICATION	// put a timeout if tasks couldn't terminate
WITHOUT_CLASSIFICATION	// add result to main sampleResult
WITHOUT_CLASSIFICATION	// did all the tasks finish?
WITHOUT_CLASSIFICATION	// Not intended to be instantiated
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// kill any remaining tasks
WITHOUT_CLASSIFICATION	/*     * @param res HTTPSampleResult to check     * @return parser class name (may be "") or null if entry does not exist     */
WITHOUT_CLASSIFICATION	// Browsers seem to tolerate Location headers with spaces, // replacing them automatically with %20. We want to emulate // this behaviour.
WITHOUT_CLASSIFICATION	// The redirect URL we got was not a valid URL
WITHOUT_CLASSIFICATION	// Only add sample if it is a sample of valid url redirect, i.e. that // we have actually sampled the URL
WITHOUT_CLASSIFICATION	// Now populate the any totalRes fields that need to // come from lastRes:
WITHOUT_CLASSIFICATION	/*     * Method to set files list to be uploaded.     *     * @param value     *   HTTPFileArgs object that stores file list to be uploaded.     */
WITHOUT_CLASSIFICATION	// no point saving an empty list
WITHOUT_CLASSIFICATION	/*     * Method to get files list to be uploaded.     */
WITHOUT_CLASSIFICATION	// Weed out the empty files
WITHOUT_CLASSIFICATION	// NOOP to provide based empty impl and avoid breaking existing implementations
WITHOUT_CLASSIFICATION	// may also happen if long value > int.max
WITHOUT_CLASSIFICATION	// for new test plans that don't have FILE/PARAM/MIME properties
WITHOUT_CLASSIFICATION	// Updated the property lists
WITHOUT_CLASSIFICATION	// We don't want to use CacheManager clone but the parent one, and CacheManager is Thread Safe
WITHOUT_CLASSIFICATION	// Non-instantiable
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// If we redirected automatically, the URL may have changed
WITHOUT_CLASSIFICATION	// If getSendFileAsPostBody returned true, it's sure that file is not null
WITHOUT_CLASSIFICATION	// Allow the mimetype of the file to control the content type
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// Implement these here, to avoid re-implementing for sub-classes // (previously these were implemented in all TestElements)
WITHOUT_CLASSIFICATION	// 8kB is the (max) size to have the latency ('the first packet') // Enough for MD5
WITHOUT_CLASSIFICATION	// OK, we have an old-style file definition // save it // Now deal with any additional file arguments
WITHOUT_CLASSIFICATION	// -1 means not defined
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// Control reuse of cached SSL Context in subsequent iterations
WITHOUT_CLASSIFICATION	// e.g. *.apache.org // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// e.g. www.apache.org
WITHOUT_CLASSIFICATION	// Get hostname
WITHOUT_CLASSIFICATION	// N.B. These values are used in jmeter.properties (jmeter.httpsampler) - do not change // They can alse be used as the implementation name
WITHOUT_CLASSIFICATION	//+ JMX implementation attribute values (also displayed in GUI) - do not change // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ //- JMX
WITHOUT_CLASSIFICATION	// Helper class (callback) for applying parameter definitions
WITHOUT_CLASSIFICATION	// get past separator
WITHOUT_CLASSIFICATION	// Put request does not use multipart, so no need for boundary
WITHOUT_CLASSIFICATION	// Get the encoding to use for the request
WITHOUT_CLASSIFICATION	// If there are no arguments, we can send a file as the body of the request
WITHOUT_CLASSIFICATION	// Create the content length we are going to write
WITHOUT_CLASSIFICATION	// We create the post body content now, so we know the size
WITHOUT_CLASSIFICATION	// Just append all the parameter values, and use that as the put body
WITHOUT_CLASSIFICATION	// Keep the content, will be sent later
WITHOUT_CLASSIFICATION	// Set the content length
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// Request sent. Now get the response:
WITHOUT_CLASSIFICATION	// Done with the sampling proper.
WITHOUT_CLASSIFICATION	// NOOP
WITHOUT_CLASSIFICATION	// Now collect the results into the HTTPSampleResult:
WITHOUT_CLASSIFICATION	// e.g. text/html; charset=ISO-8859-1
WITHOUT_CLASSIFICATION	// Needs to be done after execute to pick up all the headers
WITHOUT_CLASSIFICATION	// HTTP protocol violation, but avoids NPE
WITHOUT_CLASSIFICATION	// record some sizes to allow HTTPSampleResult.getBytes() with different options
WITHOUT_CLASSIFICATION	// Handle the various methods
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// Allows HTTPSamplerProxy to call threadFinished; subclasses can override if necessary
WITHOUT_CLASSIFICATION	// Allows HTTPSamplerProxy to call notifyFirstSampleAfterLoopRestart; subclasses can override if necessary
WITHOUT_CLASSIFICATION	// Provide access to HTTPSamplerBase methods
WITHOUT_CLASSIFICATION	// did not want to spoof the IP address
WITHOUT_CLASSIFICATION	// OK to set pre-emptive auth?
WITHOUT_CLASSIFICATION	// Needs to be accessible by HTTPSampler2
WITHOUT_CLASSIFICATION	// Set default parameters as needed
WITHOUT_CLASSIFICATION	// Process Commons HttpClient parameters file // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// If the pre-emptive parameter is undefined, then we can set it as needed // otherwise we should do what the user requested.
WITHOUT_CLASSIFICATION	// Handle old-style JMeter properties
WITHOUT_CLASSIFICATION	// This must be done last, as must not be overridden
WITHOUT_CLASSIFICATION	// We do our own cookie handling
WITHOUT_CLASSIFICATION	// May generate IllegalArgumentException
WITHOUT_CLASSIFICATION	// HC3.1 does not have the method
WITHOUT_CLASSIFICATION	// Set any default request headers
WITHOUT_CLASSIFICATION	// Setup connection
WITHOUT_CLASSIFICATION	// will be null for HEAD
WITHOUT_CLASSIFICATION	// tmp inputstream needs to have a good counting
WITHOUT_CLASSIFICATION	// Pick up Actual path (after redirects)
WITHOUT_CLASSIFICATION	// Can be missing, e.g. on redirect
WITHOUT_CLASSIFICATION	// Exclude the COOKIE header, since cookie is reported separately in the sample
WITHOUT_CLASSIFICATION	// Store any cookies received in the cookie manager:
WITHOUT_CLASSIFICATION	// Save cache information
WITHOUT_CLASSIFICATION	// Follow redirects and download page resources if appropriate:
WITHOUT_CLASSIFICATION	// pick up headers if failed to execute the request
WITHOUT_CLASSIFICATION	// Set up the local address if one exists
WITHOUT_CLASSIFICATION	// Use special field ip source address (for pseudo 'ip spoofing')
WITHOUT_CLASSIFICATION	// Method left empty here, but allows subclasses to override
WITHOUT_CLASSIFICATION	// remove any port specification // $NON-NLS-1$ $NON-NLS-2$
WITHOUT_CLASSIFICATION	// Get all the request headers
WITHOUT_CLASSIFICATION	// add a \r\n
WITHOUT_CLASSIFICATION	// e.g. some kinds of invalid URL
WITHOUT_CLASSIFICATION	// already include the \r\n
WITHOUT_CLASSIFICATION	// last \r\n before response data
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	/*         *  We use the HostConfiguration as the key to retrieve the HttpClient,         *  so need to ensure that any items used in its equals/hashcode methods are         *  not changed after use, i.e.:         *  host, port, protocol, localAddress, proxy         *        */
WITHOUT_CLASSIFICATION	// All needed to ensure re-usablility
WITHOUT_CLASSIFICATION	// null means use the default
WITHOUT_CLASSIFICATION	// Dynamic proxy overrules static proxy
WITHOUT_CLASSIFICATION	// N.B. HostConfiguration.equals() includes proxy settings in the compare.
WITHOUT_CLASSIFICATION	// Set up any required Proxy credentials
WITHOUT_CLASSIFICATION	// Allow HttpClient to handle the redirects:
WITHOUT_CLASSIFICATION	// Set all the headers from the HeaderManager
WITHOUT_CLASSIFICATION	// header[0] is not the status line... // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// Buffer to hold the post body, except file content
WITHOUT_CLASSIFICATION	// Set the content type
WITHOUT_CLASSIFICATION	// Check if we should do a multipart/form-data or an // application/x-www-form-urlencoded post request
WITHOUT_CLASSIFICATION	// If a content encoding is specified, we use that as the // encoding of any parameter values
WITHOUT_CLASSIFICATION	// Write the request to our own stream
WITHOUT_CLASSIFICATION	// Create the parts // Add any parameters
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ this is the default used by HttpClient
WITHOUT_CLASSIFICATION	// If getSendFileAsPostBody returned true, it's sure that file is not null
WITHOUT_CLASSIFICATION	// Allow the mimetype of the file to control the content type
WITHOUT_CLASSIFICATION	// We just add placeholder text for file content
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// NT Includes other types of Credentials
WITHOUT_CLASSIFICATION	// We have credentials - should we set pre-emptive authentication?
WITHOUT_CLASSIFICATION	// We don't know how many entries will be skipped
WITHOUT_CLASSIFICATION	// Add any files
WITHOUT_CLASSIFICATION	// We do not know the char set of the file to be uploaded, so we set it to null
WITHOUT_CLASSIFICATION	// We do not know what the char set of the file is
WITHOUT_CLASSIFICATION	// Set the multipart for the post
WITHOUT_CLASSIFICATION	// .sendMultipartWithoutFileContent(bos);
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// We get the posted bytes using the encoding used to create it
WITHOUT_CLASSIFICATION	// If there are no arguments, we can send a file as the body of the request // TODO: needs a multiple file upload scenerio
WITHOUT_CLASSIFICATION	// If getSendFileAsPostBody returned true, it's sure that file is not null
WITHOUT_CLASSIFICATION	// If a content encoding is specified, we set it as http parameter, so that // the post body will be encoded in the specified content encoding
WITHOUT_CLASSIFICATION	// If none of the arguments have a name specified, we // just send all the values as the post body
WITHOUT_CLASSIFICATION	// It is a normal post request, with parameter names and values
WITHOUT_CLASSIFICATION	// Just append all the parameter values, and use that as the post body
WITHOUT_CLASSIFICATION	// Set the content type
WITHOUT_CLASSIFICATION	// Add the parameters
WITHOUT_CLASSIFICATION	// Use the default encoding for urls
WITHOUT_CLASSIFICATION	// The HTTPClient always urlencodes both name and value, // so if the argument is already encoded, we have to decode // it before adding it to the post request
WITHOUT_CLASSIFICATION	// The value is already encoded by the user // Must decode the value now, so that when the // httpclient encodes it, we end up with the same value // as the user had entered.
WITHOUT_CLASSIFICATION	// Add the parameter, httpclient will urlencode it
WITHOUT_CLASSIFICATION	// Check if we have any content to send for body
WITHOUT_CLASSIFICATION	// We get the posted bytes using the charset that was used to create them
WITHOUT_CLASSIFICATION	// Does not need to be synchronised, as all access is from same thread
WITHOUT_CLASSIFICATION	// If there are no arguments, we can send a file as the body of the request
WITHOUT_CLASSIFICATION	// Set the content length
WITHOUT_CLASSIFICATION	// For all the file multiparts, we must tell it to not include // the actual file content
WITHOUT_CLASSIFICATION	// For all the file multiparts, we must revert the hiding of // the actual file content
WITHOUT_CLASSIFICATION	// Check if the header manager had a content type header // This allows the user to specify his own content-type for a POST request
WITHOUT_CLASSIFICATION	// Buffer to hold the put body, except file content
WITHOUT_CLASSIFICATION	// Should be true
WITHOUT_CLASSIFICATION	// Count the retries as well in the time
WITHOUT_CLASSIFICATION	// Request sent. Now get the response:
WITHOUT_CLASSIFICATION	// Buffer to hold the post body, except file content
WITHOUT_CLASSIFICATION	// We just add placeholder text for file content
WITHOUT_CLASSIFICATION	// If a content encoding is specified, we set it as http parameter, so that // the post body will be encoded in the specified content encoding
WITHOUT_CLASSIFICATION	// If the request entity is repeatable, we can send it first to // our own stream, so we can return it
WITHOUT_CLASSIFICATION	// If the request entity is repeatable, we can send it first to // our own stream, so we can return it
WITHOUT_CLASSIFICATION	// Check if the header manager had a content type header // This allows the user to specify his own content-type for a POST request
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// If none of the arguments have a name specified, we // just send all the values as the put body
WITHOUT_CLASSIFICATION	// Check if we should send only placeholder text for the // file content, or the real file content
WITHOUT_CLASSIFICATION	// Can cause NPE in HttpClient 3.1 //((SimpleHttpConnectionManager)cl.getHttpConnectionManager()).shutdown();// Closes the connection // Revert to original method: // Closes the connection
WITHOUT_CLASSIFICATION	// Implemented by parent class
WITHOUT_CLASSIFICATION	// Take length from file
WITHOUT_CLASSIFICATION	// Use this to override file length
WITHOUT_CLASSIFICATION	// All the other headers are set up by HTTPSampler2.setupConnection()
WITHOUT_CLASSIFICATION	// No header provided
WITHOUT_CLASSIFICATION	// so we don't generate chunked encoding
WITHOUT_CLASSIFICATION	// will use chunked encoding
WITHOUT_CLASSIFICATION	// Some headers are set by executeMethod()
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// Done with the sampling proper.
WITHOUT_CLASSIFICATION	// Now collect the results into the HTTPSampleResult:
WITHOUT_CLASSIFICATION	// e.g. text/html; charset=ISO-8859-1
WITHOUT_CLASSIFICATION	// If we redirected automatically, the URL may have changed
WITHOUT_CLASSIFICATION	// Store any cookies received in the cookie manager:
WITHOUT_CLASSIFICATION	// Save cache information
WITHOUT_CLASSIFICATION	// Follow redirects and download page resources if appropriate:
WITHOUT_CLASSIFICATION	// Buffer to hold the post body, except file content
WITHOUT_CLASSIFICATION	// If there are no arguments, we can send a file as the body of the request
WITHOUT_CLASSIFICATION	// will be null for HEAD
WITHOUT_CLASSIFICATION	// Pick up Actual path (after redirects)
WITHOUT_CLASSIFICATION	// Can be missing, e.g. on redirect
WITHOUT_CLASSIFICATION	// e.g. some kinds of invalid URL
WITHOUT_CLASSIFICATION	// Add any files
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// charset must agree with content-type below // $NON-NLS-1$
WITHOUT_CLASSIFICATION	//contentLength > 0 ? contentLength : DEFAULT_INITIAL_BUFFER_SIZE);
WITHOUT_CLASSIFICATION	// first response
WITHOUT_CLASSIFICATION	// save the latency
WITHOUT_CLASSIFICATION	// Set up the defaults (may be overridden below)
WITHOUT_CLASSIFICATION	// NOTUSED private Class PARSERCLASS = null;
WITHOUT_CLASSIFICATION	// Was there an error?
WITHOUT_CLASSIFICATION	// N.B. Must be in this class for the TestBean code to work
WITHOUT_CLASSIFICATION	// Retrieve the formatted data using the same encoding used to create it
WITHOUT_CLASSIFICATION	// Write end of multipart
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// Check if we should do a multipart/form-data or an // application/x-www-form-urlencoded post request
WITHOUT_CLASSIFICATION	// Set the content type
WITHOUT_CLASSIFICATION	// Get the encoding to use for the request
WITHOUT_CLASSIFICATION	// If there are no arguments, we can send a file as the body of the request
WITHOUT_CLASSIFICATION	// Keep the content, will be sent later
WITHOUT_CLASSIFICATION	// Set the content length
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// Write the form data post body, which we have constructed // in the setHeaders. This contains the multipart start divider // and any form data, i.e. arguments
WITHOUT_CLASSIFICATION	// First write the start multipart file // TODO - charset?
WITHOUT_CLASSIFICATION	// Retrieve the formatted data using the same encoding used to create it // TODO - charset? // Write the actual file content
WITHOUT_CLASSIFICATION	// We just add placeholder text for file content // $NON-NLS-1$ // Write the end of multipart file
WITHOUT_CLASSIFICATION	// we're sure that there is at least one file because of // getSendFileAsPostBody method's return value.
WITHOUT_CLASSIFICATION	// We just add placeholder text for file content // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// Write the form section
WITHOUT_CLASSIFICATION	// First the multipart start divider
WITHOUT_CLASSIFICATION	// Add any parameters
WITHOUT_CLASSIFICATION	// End the previous multipart
WITHOUT_CLASSIFICATION	// End the previous multipart
WITHOUT_CLASSIFICATION	// Write multipart for parameter
WITHOUT_CLASSIFICATION	// If there are any files, we need to end the previous multipart
WITHOUT_CLASSIFICATION	// Write multipart for file
WITHOUT_CLASSIFICATION	// Add also the length of the file content
WITHOUT_CLASSIFICATION	// And the end of the file multipart
WITHOUT_CLASSIFICATION	// Add the end of multipart
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// Check if we should do a multipart/form-data or an // application/x-www-form-urlencoded post request
WITHOUT_CLASSIFICATION	// Allow the mimetype of the file to control the content type
WITHOUT_CLASSIFICATION	// If none of the arguments have a name specified, we // just send all the values as the post body
WITHOUT_CLASSIFICATION	// If we have a file, but no data, then read the file
WITHOUT_CLASSIFICATION	// Override so we can intercept the stream
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-2$
WITHOUT_CLASSIFICATION	// Override so we can intercept the stream
WITHOUT_CLASSIFICATION	// superclass does not support types
WITHOUT_CLASSIFICATION	// TODO - charset?
WITHOUT_CLASSIFICATION	// Just append all the parameter values, and use that as the post body
WITHOUT_CLASSIFICATION	// It is a normal post request, with parameter names and values
WITHOUT_CLASSIFICATION	// Set the content type
WITHOUT_CLASSIFICATION	// Create the content length we are going to write
WITHOUT_CLASSIFICATION	// We create the post body content now, so we know the size
WITHOUT_CLASSIFICATION	// Keep the content, will be sent later
WITHOUT_CLASSIFICATION	// Set the content length
WITHOUT_CLASSIFICATION	// Check if the header manager had a content type header // This allows the user to specify his own content-type for a POST request
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// Now we just construct any multipart for the files // We only construct the file multipart start, we do not write // the actual file content
WITHOUT_CLASSIFICATION	// we're sure that there is one file because of // getSendFileAsPostBody method's return value.
WITHOUT_CLASSIFICATION	// Exception in progress
WITHOUT_CLASSIFICATION	// Write boundary end marker
WITHOUT_CLASSIFICATION	// get access to buffer
WITHOUT_CLASSIFICATION	// wrap read() methods to track output buffer
WITHOUT_CLASSIFICATION	// Preload the output so that can be read back as HTTP
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// 1k - the previous 100k made no sense (there's tons of buffers // elsewhere in the chain) and it caused OOM when many concurrent // uploads were being done. Could be fixed by increasing the evacuation // ratio in bin/jmeter[.bat], but this is better.
WITHOUT_CLASSIFICATION	// make sure buffer details // track the output
WITHOUT_CLASSIFICATION	// Characters per second to emulate
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// Override all the super-class Socket methods.
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// timeout to retrieve wsdl when server not response
WITHOUT_CLASSIFICATION	// NOTUSED String portname = pnode.getAttribute("name"); // used to check binding, but now it doesn't. it was // failing when wsdl did not using binding as expected
WITHOUT_CLASSIFICATION	// check soap12
WITHOUT_CLASSIFICATION	/* (non-Javadoc)     * @see org.apache.http.conn.ssl.SSLSocketFactory#createSocket()     */
WITHOUT_CLASSIFICATION	// Characters per second to emulate
WITHOUT_CLASSIFICATION	// in the rare case the WSDL is protected and requires // authentication, use the AuthManager to set the // authorization. Basic and Digest authorization are // pretty weak and don't provide real security.
WITHOUT_CLASSIFICATION	// get the node
WITHOUT_CLASSIFICATION	// do nothing
WITHOUT_CLASSIFICATION	// get the soap:operation
WITHOUT_CLASSIFICATION	// there should only be one soap:operation node per operation
WITHOUT_CLASSIFICATION	// first we iterate through the bindings
WITHOUT_CLASSIFICATION	// now we iterate through the operations
WITHOUT_CLASSIFICATION	// if the first child is soap:operation // we add it to the array
WITHOUT_CLASSIFICATION	// new WSDLHelper("http://services.bio.ifi.lmu.de:1046/prothesaurus/services/BiologicalNameService?wsdl");
WITHOUT_CLASSIFICATION	// Remove quotes from charset name
WITHOUT_CLASSIFICATION	// get ../ or ../../ etc.
WITHOUT_CLASSIFICATION	// find index of path start
WITHOUT_CLASSIFICATION	// absolute URL
WITHOUT_CLASSIFICATION	// find path endIndex
WITHOUT_CLASSIFICATION	// install new path
WITHOUT_CLASSIFICATION	// This ensures tha HttpClient knows about the protocol
WITHOUT_CLASSIFICATION	// Now allow the URL handling to work.
WITHOUT_CLASSIFICATION	// not needed for HttpClient
WITHOUT_CLASSIFICATION	// Check if we have it in the cache
WITHOUT_CLASSIFICATION	// Perform the encoding
WITHOUT_CLASSIFICATION	// LRUMap does not support generics currently
WITHOUT_CLASSIFICATION	// We assume the argument value is encoded according to the HTTP spec, i.e. UTF-8
WITHOUT_CLASSIFICATION	// We assume the name is always encoded according to spec
WITHOUT_CLASSIFICATION	// The value is encoded in the specified encoding
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// skip expensive processing if it cannot apply // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// Match /../[../] etc. // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// document or context-relative URL like: // '/path/to' // OR '../path/to' // OR '/path/to/../path/'
WITHOUT_CLASSIFICATION	// path is between idx='pathStartIndex' (inclusive) and // idx='pathEndIndex' (exclusive)
WITHOUT_CLASSIFICATION	// append '/' if this isn't the last token or it is but the original // path terminated w/ a '/'
WITHOUT_CLASSIFICATION	// This can't happen (how should utf8 not be supported!?!), // so just throw an Error:
WITHOUT_CLASSIFICATION	// Encode according to the HTTP spec, i.e. UTF-8
WITHOUT_CLASSIFICATION	// do nothing
WITHOUT_CLASSIFICATION	// indicate that an error occured
WITHOUT_CLASSIFICATION	// we check the count to see if we have exceeded // the number of lines to parse. There's no way // to know where to stop in the file. Therefore // we use break to escape the while loop when // we've reached the count.
WITHOUT_CLASSIFICATION	// this.READER = new BufferedReader(new // FileReader(this.SOURCE)); // parse(this.READER,el);
WITHOUT_CLASSIFICATION	// we clean the line to get // rid of extra stuff
WITHOUT_CLASSIFICATION	// now we set request method
WITHOUT_CLASSIFICATION	// increment the current count
WITHOUT_CLASSIFICATION	// increment the current count
WITHOUT_CLASSIFICATION	// we filter the line first, before we try // to separate the URL into file and // parameters.
WITHOUT_CLASSIFICATION	// in the case when the filter is not set, we // parse all the lines
WITHOUT_CLASSIFICATION	// check the URL for "?" symbol
WITHOUT_CLASSIFICATION	// now that we have stripped the file, we can parse the parameters
WITHOUT_CLASSIFICATION	// if the string contains atleast one double // quote and checkMethod is true, go ahead // and tokenize the string.
WITHOUT_CLASSIFICATION	// we return the original string
WITHOUT_CLASSIFICATION	// convert the Parameters
WITHOUT_CLASSIFICATION	// avoid possible NPE when trimming the name
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// indicate that an error occured
WITHOUT_CLASSIFICATION	// read one line at a time using // BufferedReader
WITHOUT_CLASSIFICATION	// this.READER = new BufferedReader(new // FileReader(this.SOURCE)); // parse(this.READER,el);
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// called from ctor, so must not be overridable
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// we tokenize using double quotes. this means // for tomcat we should have 3 tokens if there // isn't any additional information in the logs
WITHOUT_CLASSIFICATION	// if checkMethod on the token is true // we tokenzie it using space and escape // the while loop. Only the first matching // token will be used
WITHOUT_CLASSIFICATION	// there should only be one token // that starts with slash character
WITHOUT_CLASSIFICATION	// do nothing. it's naive, but since // the utility is meant to parse access // logs the formatting should be correct
WITHOUT_CLASSIFICATION	// First have to release the cookie we were using so other // threads stuck in wait can move on
WITHOUT_CLASSIFICATION	// let notified threads move on and get lock on managersInUse
WITHOUT_CLASSIFICATION	// here is the core routine to find appropriate cookie manager and // check it's not being used.  If used, wait until whoever's using it gives // it up
WITHOUT_CLASSIFICATION	// no implementation at this time, since // we bypass the idea of having a console // tool to generate test plans. Instead // I decided to have a sampler that uses // the generator and parser directly
WITHOUT_CLASSIFICATION	// now we create the compiled pattern and // add it to the arraylist
WITHOUT_CLASSIFICATION	// we do a quick check to see if any // filters are set. If not we just // return false to be efficient.
WITHOUT_CLASSIFICATION	// double check this logic make sure it // makes sense
WITHOUT_CLASSIFICATION	// inclusion filter assumes most of // the files are not wanted, therefore // usefile is set to false unless it // matches.
WITHOUT_CLASSIFICATION	// exclusion filter assumes most of // the files are used, therefore // usefile is set to true, unless // it matches.
WITHOUT_CLASSIFICATION	// Request headers column renderers
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// do nothing
WITHOUT_CLASSIFICATION	// Request headers column renderers
WITHOUT_CLASSIFICATION	// Request headers column renderers
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// clear results table before filling
WITHOUT_CLASSIFICATION	// Display with same order HTTP protocol
WITHOUT_CLASSIFICATION	// can be null - e.g. if URL was invalid
WITHOUT_CLASSIFICATION	// Display cookie in headers table (same location on http protocol)
WITHOUT_CLASSIFICATION	// Parsed request headers
WITHOUT_CLASSIFICATION	/* (non-Javadoc)     * @see org.apache.jmeter.visualizers.request.RequestView#init()     */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)     * @see org.apache.jmeter.visualizers.request.RequestView#clearData()     */
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // SOAP request (generally) //blank name // $NON-NLS-1$
WITHOUT_CLASSIFICATION	//blank name // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// empty init // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// Hint to background color on bottom tabs (grey, not blue)
WITHOUT_CLASSIFICATION	// The object used for each row
WITHOUT_CLASSIFICATION	// The object used for each row
WITHOUT_CLASSIFICATION	// The object used for each row
WITHOUT_CLASSIFICATION	// Key // Value
WITHOUT_CLASSIFICATION	// Key // Value
WITHOUT_CLASSIFICATION	// Key // Value
WITHOUT_CLASSIFICATION	// Set up the 1st table Result with empty headers
WITHOUT_CLASSIFICATION	// Set up the 2nd table 
WITHOUT_CLASSIFICATION	// Set up the 3rd table 
WITHOUT_CLASSIFICATION	// Create the split pane
WITHOUT_CLASSIFICATION	// called from ctor, so must not be overridable
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ // Concatenate query post if exists
WITHOUT_CLASSIFICATION	// add a message when no http sample //$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	// better ISO-8859-1 than UTF-8
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// Find all the classes which implement the JavaSamplerClient // interface.
WITHOUT_CLASSIFICATION	// Remove the JavaConfig class from the list since it only // implements the interface for error conditions.
WITHOUT_CLASSIFICATION	// If a user has set parameters in one test, and then // selects a different test which supports the same // parameters, those parameters should have the same // values that they did in the original test.
WITHOUT_CLASSIFICATION	/* Implements JMeterGuiComponent.createTestElement() */
WITHOUT_CLASSIFICATION	/* Implements JMeterGuiComponent.modifyTestElement(TestElement) */
WITHOUT_CLASSIFICATION	// Entry tends to be ignored ...
WITHOUT_CLASSIFICATION	// Default (can be overridden by the script)
WITHOUT_CLASSIFICATION	// These are not useful yet, as have not found how to get updated values back //mgr.declareBean("ResponseCode", "200", String.class); // $NON-NLS-1$ //mgr.declareBean("ResponseMessage", "OK", String.class); // $NON-NLS-1$ //mgr.declareBean("IsSuccess", Boolean.TRUE, Boolean.class); // $NON-NLS-1$
WITHOUT_CLASSIFICATION	/* (non-Javadoc)     * @see org.apache.jmeter.gui.AbstractJMeterGuiComponent#clearGui()     */
WITHOUT_CLASSIFICATION	/* Overrides AbstractJMeterGuiComponent.configure(TestElement) */
WITHOUT_CLASSIFICATION	// N.B. some engines (e.g. Javascript) cannot handle certain declareBean() calls // after the engine has been initialised, so create the engine last
WITHOUT_CLASSIFICATION	// Catch evaluation errors
WITHOUT_CLASSIFICATION	// reset the bsh.Interpreter before each execution
WITHOUT_CLASSIFICATION	// script file name (if present)
WITHOUT_CLASSIFICATION	// parameters to pass to script file (or script)
WITHOUT_CLASSIFICATION	// script area
WITHOUT_CLASSIFICATION	// Don't let the input field shrink too much
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// Entry tends to be ignored ...
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	/* Implements JavaSamplerClient.setupTest(JavaSamplerContext) */
WITHOUT_CLASSIFICATION	/* Implements JavaSamplerClient.teardownTest(JavaSamplerContext) */
WITHOUT_CLASSIFICATION	/* Implements JavaSamplerClient.getDefaultParameters() */
WITHOUT_CLASSIFICATION	/*     * Ensure that the required class variables are cloned,     * as this is not currently done by the super-implementation.     */
WITHOUT_CLASSIFICATION	// Allow Sampler access // to test element name
WITHOUT_CLASSIFICATION	// Only set the default label if it has not been set
WITHOUT_CLASSIFICATION	// failed to initialise the class
WITHOUT_CLASSIFICATION	// but we do trap this error to make tests work better
WITHOUT_CLASSIFICATION	// No point continuing // Mainly for bsh.EvalError
WITHOUT_CLASSIFICATION	/* Implements TestStateListener.testStarted() */
WITHOUT_CLASSIFICATION	/* Implements TestStateListener.testStarted(String) */
WITHOUT_CLASSIFICATION	/* Implements TestStateListener.testEnded(String) */
WITHOUT_CLASSIFICATION	/*     * Implementation notes:     *     * All of the methods in this class are currently read-only. If update     * methods are included in the future, they should be defined so that a     * single instance of JavaSamplerContext can be associated with each thread.     * Therefore, no synchronization should be needed. The same instance should     * be used for the call to setupTest, all calls to runTest, and the call to     * teardownTest.     */
WITHOUT_CLASSIFICATION	// TestStateListener implementation
WITHOUT_CLASSIFICATION	// Set default values //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	// log.info(getLabel()+" "+getFilename());
WITHOUT_CLASSIFICATION	// assume text output - script can override if necessary
WITHOUT_CLASSIFICATION	// Set response data
WITHOUT_CLASSIFICATION	// script can also use setResponseData() so long as it returns null
WITHOUT_CLASSIFICATION	// Set if we were successful or not
WITHOUT_CLASSIFICATION	// private static final String LABEL_DEFAULT = "JavaTest";
WITHOUT_CLASSIFICATION	/*     * Utility method to set up all the values     */
WITHOUT_CLASSIFICATION	// default to name of element
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// Record sample start time.
WITHOUT_CLASSIFICATION	// Record sample start time.
WITHOUT_CLASSIFICATION	// Generate a random-ish offset value using the current time.
WITHOUT_CLASSIFICATION	// Generate a random-ish offset value using the current time.
WITHOUT_CLASSIFICATION	// Execute the sample. In this case sleep for the // specified time, if any
WITHOUT_CLASSIFICATION	// Record end time and populate the results.
WITHOUT_CLASSIFICATION	// The name of the sampler
WITHOUT_CLASSIFICATION	// should not happen
WITHOUT_CLASSIFICATION	// Only do the calculation if it is needed
WITHOUT_CLASSIFICATION	// Execute the sample. In this case sleep for the // specified time.
WITHOUT_CLASSIFICATION	// String used to indicate a null value
WITHOUT_CLASSIFICATION	// key: name (lowercase) from java.sql.Types; entry: corresponding int value
WITHOUT_CLASSIFICATION	// read-only after class init
WITHOUT_CLASSIFICATION	// based on e291. Getting the Name of a JDBC Type from javaalmanac.com // http://javaalmanac.com/egs/java.sql/JdbcInt2Str.html
WITHOUT_CLASSIFICATION	//Get all fields in java.sql.Types and store the corresponding int values
WITHOUT_CLASSIFICATION	// Query types (used to communicate with GUI) // N.B. These must not be changed, as they are used in the JMX files // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// Based on query return value, get results
WITHOUT_CLASSIFICATION	// User provided incorrect query type
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// As a connection is held by only one thread, we cannot already have a  // preparedStatementMap put by another thread
WITHOUT_CLASSIFICATION	// Save the value in the variable if present
WITHOUT_CLASSIFICATION	// Save the value in the variable if present
WITHOUT_CLASSIFICATION	// in case
WITHOUT_CLASSIFICATION	// can't have an output parameter type null
WITHOUT_CLASSIFICATION	// PreparedStatementMap is associated to one connection so  //  2 threads cannot use the same PreparedStatement map at the same time
WITHOUT_CLASSIFICATION	// thrown by Derby JDBC (at least) if there are no "?" markers in statement
WITHOUT_CLASSIFICATION	// save the current count
WITHOUT_CLASSIFICATION	// LRUMap is not generic
WITHOUT_CLASSIFICATION	// i starts at 1
WITHOUT_CLASSIFICATION	/*     *  The datasource is set up by testStarted and cleared by testEnded.     *  These are called from different threads, so access must be synchronized.     *  The same instance is called in each case.    */
WITHOUT_CLASSIFICATION	// Remove any additional values from previous sample
WITHOUT_CLASSIFICATION	// call to TestBeanHelper.prepare() is intentional
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // Get the previous count
WITHOUT_CLASSIFICATION	// Keep a record of the pre-thread pools so that they can be disposed of at the end of a test
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// i.e. if we want per thread pooling // pool will be created later
WITHOUT_CLASSIFICATION	/*     * Utility routine to get the connection from the pool.     * Purpose:     * - allows JDBCSampler to be entirely independent of the pooling classes     * - allows the pool storage mechanism to be changed if necessary     */
WITHOUT_CLASSIFICATION	/*     * Set up the DataSource - maxPool is a parameter, so the same code can     * also be used for setting up the per-thread pools.    */
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ $NON-NLS-2$ // $NON-NLS-1$ $NON-NLS-2$ // $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// log is required to ensure errors are available
WITHOUT_CLASSIFICATION	// used to hold per-thread singleton connection pools
WITHOUT_CLASSIFICATION	/*     * Wrapper class to allow getConnection() to be implemented for both shared     * and per-thread pools.     *     */
WITHOUT_CLASSIFICATION	// Ignored
WITHOUT_CLASSIFICATION	// Ignored
WITHOUT_CLASSIFICATION	// i.e. shared pool
WITHOUT_CLASSIFICATION	// make sure setting the new isolation mode is done in an auto committed transaction
WITHOUT_CLASSIFICATION	// Will use default isolation
WITHOUT_CLASSIFICATION	// Assume we will be successful
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// NOOP
WITHOUT_CLASSIFICATION	// use latency to measure connection time
WITHOUT_CLASSIFICATION	// The environment is supposed to use String keys only
WITHOUT_CLASSIFICATION	// WebsphereMQ does not allow corr. id. to be set using setStringProperty() // $NON-NLS-1$
WITHOUT_CLASSIFICATION	/*     * We use a LinkedBlockingQueue (rather than a ConcurrentLinkedQueue) because it has a     * poll-with-wait method that avoids the need to use a polling loop.     */
WITHOUT_CLASSIFICATION	// Using onMessage Listener
WITHOUT_CLASSIFICATION	// Allow for short/negative times
WITHOUT_CLASSIFICATION	// Allow for short/negative times
WITHOUT_CLASSIFICATION	// called from threadFinished() thread
WITHOUT_CLASSIFICATION	//GuardedBy("this")
WITHOUT_CLASSIFICATION	//GuardedBy("this")
WITHOUT_CLASSIFICATION	// There was an object in map, destroy the temporary and return one in map (oldCtx)
WITHOUT_CLASSIFICATION	// else No object in Map, ctx is the one
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ //--
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ //$NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// renamed from clear
WITHOUT_CLASSIFICATION	// (TestElement) // el.getProperty(JMSSampler.JMS_PROPERTIES).getObjectValue());
WITHOUT_CLASSIFICATION	// (TestElement) // el.getProperty(JMSSampler.JNDI_PROPERTIES).getObjectValue());
WITHOUT_CLASSIFICATION	// Button group resources
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	// Button group resources
WITHOUT_CLASSIFICATION	// These are the names of properties used to define the labels // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// These are the names of properties used to define the labels // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// Button group resources when Bytes Message is selected
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // Button group resources
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // Button group resources
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	//--
WITHOUT_CLASSIFICATION	//++ These names are used in the JMX files, and must not be changed
WITHOUT_CLASSIFICATION	// Cache for file. Only used by sample() in a single thread
WITHOUT_CLASSIFICATION	// Cache for bytes-message, only used when parsing from a file 
WITHOUT_CLASSIFICATION	// Allow shorthand names
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// Assume it will fail // ditto $NON-NLS-1$
WITHOUT_CLASSIFICATION	// TODO - charset?
WITHOUT_CLASSIFICATION	// TODO - charset?
WITHOUT_CLASSIFICATION	// Not found
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// in the case the test uses a file, we set it locally and // prevent loading the file repeatedly
WITHOUT_CLASSIFICATION	// in the case the test uses a file, we set it locally and // prevent loading the file repeatedly
WITHOUT_CLASSIFICATION	// Allow for the old JMX file which used the local language string
WITHOUT_CLASSIFICATION	// ------------- get/set properties ----------------------//
WITHOUT_CLASSIFICATION	// These static variables are only used to convert existing files
WITHOUT_CLASSIFICATION	// will be the 3rd option, which is not checked specifically
WITHOUT_CLASSIFICATION	// Note: originally the code did use the ClientPool to "share" subscribers, however since the // key was "this" and each sampler is unique - nothing was actually shared.
WITHOUT_CLASSIFICATION	// Default wait (ms) for a message if timeouts are not enabled // This is the maximum time the sampler can be blocked.
WITHOUT_CLASSIFICATION	// No need to synch/ - only used by sampler and ClientPool (which does its own synch)
WITHOUT_CLASSIFICATION	// This will be null if initialization succeeds.
WITHOUT_CLASSIFICATION	// If true, start/stop subscriber for each sample
WITHOUT_CLASSIFICATION	// Don't change the string, as it is used in JMX files // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// run threadStarted only if Destination setup on each sample
WITHOUT_CLASSIFICATION	// If so, we need to start collection here
WITHOUT_CLASSIFICATION	// run threadFinished only if Destination setup on each sample (stop Listen queue)
WITHOUT_CLASSIFICATION	// MapNames are Strings
WITHOUT_CLASSIFICATION	// Disabled thread start if listen on sample choice
WITHOUT_CLASSIFICATION	// Don't start yet if stop between samples
WITHOUT_CLASSIFICATION	// listen on sample 
WITHOUT_CLASSIFICATION	// Can be null if init fails
WITHOUT_CLASSIFICATION	// listen on sample
WITHOUT_CLASSIFICATION	// so we break the loops in SampleWithListener and SampleWithReceive
WITHOUT_CLASSIFICATION	// Assume failure
WITHOUT_CLASSIFICATION	//--
WITHOUT_CLASSIFICATION	// ------------- get/set properties ----------------------//
WITHOUT_CLASSIFICATION	//++ These are JMX names, and must not be changed // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// Convert the old test plan entry (which is the language dependent string) to the resource name
WITHOUT_CLASSIFICATION	// This was the old value that was checked for // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// Default to be applied
WITHOUT_CLASSIFICATION	//++ These are JMX file attribute names and must not be changed // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// N.B. Cannot change value, as that is used in JMX files // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// Is Destination setup static? else dynamic // $NON-NLS-1$ // default to maintain compatibility
WITHOUT_CLASSIFICATION	//-- End of JMX file attribute names
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// ignore
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// NOOP
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// // Member variables //
WITHOUT_CLASSIFICATION	// ** These constants are used in the JMX files, and so must not be changed **
WITHOUT_CLASSIFICATION	// msgId not available until after send() is called // Note: there is only one admin object which is shared between all threads // interlock with Receiver
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// This used to be request.wait(timeout_ms), where 0 means forever // However 0 means return immediately for the latch
WITHOUT_CLASSIFICATION	//$NON-NLS$
WITHOUT_CLASSIFICATION	//$NON-NLS$
WITHOUT_CLASSIFICATION	//$NON-NLS$
WITHOUT_CLASSIFICATION	//$NON-NLS$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	/* Implements JMeterGUIComponent.createTestElement() */
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	/*     * N.B. These entry indexes MUST agree with the SearchControls SCOPE_LEVELS, i.e.     *      * javax.naming.directory.SearchControls.OBJECT_SCOPE, ONELEVEL_SCOPE, SUBTREE_SCOPE     *      * These have the values 0,1,2 so can be used as indexes in the array     * as well as the value for the search itself.     *      * N.B. Although the strings are used to set and get the options, language change     * does not currently cause a problem, because that always saves the current settings first,     * and then recreates all the GUI classes.     */
WITHOUT_CLASSIFICATION	// Names for the cards // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// e.g unbind
WITHOUT_CLASSIFICATION	// Take note of when buttong are changed so can change panel
WITHOUT_CLASSIFICATION	//private static final Logger log = LoggingManager.getLoggerForClass();
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	/* Implements JMeterGUIComponent.createTestElement() */
WITHOUT_CLASSIFICATION	//$NON-NLS$
WITHOUT_CLASSIFICATION	//$NON-NLS$
WITHOUT_CLASSIFICATION	//$NON-NLS$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// Only contains LDAPArgument entries
WITHOUT_CLASSIFICATION	//    /** //     * Resize the table columns to appropriate widths. //     * //     * @param _table //     *            the table to resize columns for //     */ //    private void sizeColumns(JTable _table) { //    }
WITHOUT_CLASSIFICATION	//sizeColumns(table);
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	/* Implements JMeterGUIComponent.createTestElement() */
WITHOUT_CLASSIFICATION	/* Implements JMeterGUIComponent.modifyTestElement(TestElement) */
WITHOUT_CLASSIFICATION	// Enable DELETE (which may already be enabled, but it won't hurt)
WITHOUT_CLASSIFICATION	// Highlight (select) the appropriate row.
WITHOUT_CLASSIFICATION	// Disable DELETE if there are no rows in the table to delete.
WITHOUT_CLASSIFICATION	// Disable DELETE if there are no rows in the table to delete.
WITHOUT_CLASSIFICATION	// Table still contains one or more rows, so highlight (select) // the appropriate one.
WITHOUT_CLASSIFICATION	// MAIN PANEL
WITHOUT_CLASSIFICATION	// MAIN PANEL
WITHOUT_CLASSIFICATION	// Force a minimum table height of 70 pixels
WITHOUT_CLASSIFICATION	// If a table cell is being edited, we should accept the current value // and stop the editing before adding a new row.
WITHOUT_CLASSIFICATION	// If a table cell is being edited, we must cancel the editing before // deleting the row
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// Set if we were successful or not
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	// count limit // time limit // attributes (null = all) // return object ? // dereference links?
WITHOUT_CLASSIFICATION	/*     * The following strings are used in the test plan, and the values must not be changed     * if test plans are to be upwardly compatible.     */
WITHOUT_CLASSIFICATION	// For In build test case using this counter // create the new entry in the server
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	// replace (update) attribute //$NON-NLS-1$ //$NON-NLS-2$ // add mobile phone number attribute //$NON-NLS-1$ //$NON-NLS-2$
WITHOUT_CLASSIFICATION	// These are values for the TEST attribute above // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // end of TEST values
WITHOUT_CLASSIFICATION	// the createTest() method creates an extra context which needs to be closed
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	//log.warn("DEBUG",ex); // e.g. javax.naming.SizeLimitExceededException: [LDAP: error code 4 - Sizelimit Exceeded]; remaining name '' //                                                123456789012345678901 // TODO: tidy this up
WITHOUT_CLASSIFICATION	/*     *   Write out search results in a stable order (including order of all subelements which might     * be reordered like attributes and their values) so that simple textual comparison can be done,     * unless the number of results exceeds {@link #MAX_SORTED_RESULTS} in which case just stream     * the results out without sorting.     */
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// ignored
WITHOUT_CLASSIFICATION	// read all sortedResults into memory so we can guarantee ordering
WITHOUT_CLASSIFICATION	// must be done prior to sorting
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// show what we did manage to retrieve
WITHOUT_CLASSIFICATION	// If there's anything left ...
WITHOUT_CLASSIFICATION	// assume it's senstive data
WITHOUT_CLASSIFICATION	// Ensure any remaining contexts are closed
WITHOUT_CLASSIFICATION	// Parent folder (or single message file)
WITHOUT_CLASSIFICATION	// == ServerName from mail sampler
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	/*         * Perform the sampling         */
WITHOUT_CLASSIFICATION	// Start timing
WITHOUT_CLASSIFICATION	//-
WITHOUT_CLASSIFICATION	// RFC 822 uses ascii per default
WITHOUT_CLASSIFICATION	// Use the actual class so the name must be correct.
WITHOUT_CLASSIFICATION	// special value
WITHOUT_CLASSIFICATION	// Did sample succeed?
WITHOUT_CLASSIFICATION	// Create empty properties
WITHOUT_CLASSIFICATION	// Requires JavaMail 1.4.2+
WITHOUT_CLASSIFICATION	// Requires JavaMail 1.4.2+
WITHOUT_CLASSIFICATION	// Get session
WITHOUT_CLASSIFICATION	// Get the store
WITHOUT_CLASSIFICATION	// Get folder
WITHOUT_CLASSIFICATION	// Get directory
WITHOUT_CLASSIFICATION	// Don't save headers - they are already in the raw message
WITHOUT_CLASSIFICATION	// Save raw message
WITHOUT_CLASSIFICATION	// Javadoc for the API says this is OK
WITHOUT_CLASSIFICATION	// Avoid double-call if addSubResult was called.
WITHOUT_CLASSIFICATION	// Close connection
WITHOUT_CLASSIFICATION	// not been set by any child samples
WITHOUT_CLASSIFICATION	// Gui Components
WITHOUT_CLASSIFICATION	// Labels - don't make these static, else language change will not work
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// TODO - charset?
WITHOUT_CLASSIFICATION	/*     * Helper method to set up the GUI screen     */
WITHOUT_CLASSIFICATION	// Store the content-type // RFC 822 uses ascii per default // Parse the content-type
WITHOUT_CLASSIFICATION	// No need to log normally, as we set the status // $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // may be null
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // may be null
WITHOUT_CLASSIFICATION	// Used to separate attachment file names in JMX fields - do not change!
WITHOUT_CLASSIFICATION	//-JMX file attribute names
WITHOUT_CLASSIFICATION	// Process address lists
WITHOUT_CLASSIFICATION	// needed for measuring sending time
WITHOUT_CLASSIFICATION	// calculate message size
WITHOUT_CLASSIFICATION	// Set up the sample result details
WITHOUT_CLASSIFICATION	// Perform the sampling
WITHOUT_CLASSIFICATION	// username / password incorrect
WITHOUT_CLASSIFICATION	// SSL not supported, startTLS not supported, other messagingException
WITHOUT_CLASSIFICATION	// general exception
WITHOUT_CLASSIFICATION	// process the sampler result
WITHOUT_CLASSIFICATION	// throws ME
WITHOUT_CLASSIFICATION	// throws IOE, ME
WITHOUT_CLASSIFICATION	// throws IOE, ME
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// part is only needed if we // don't send an .eml-file
WITHOUT_CLASSIFICATION	// getAllHeaders() is not yet genericised // throws ME
WITHOUT_CLASSIFICATION	// throws ME // throws IOE, ME
WITHOUT_CLASSIFICATION	// API not yet generic // throws ME
WITHOUT_CLASSIFICATION	// we have at least one potential address
WITHOUT_CLASSIFICATION	// local vars
WITHOUT_CLASSIFICATION	// ensure correctly set on initial display // ensure correctly set on initial display
WITHOUT_CLASSIFICATION	/*         * Server Settings         */
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	/*         * E-Mail Settings         */
WITHOUT_CLASSIFICATION	/*         * Auth Settings         */
WITHOUT_CLASSIFICATION	/*         * Security Settings         */
WITHOUT_CLASSIFICATION	/*         * (non-Javadoc) Message Settings         */
WITHOUT_CLASSIFICATION	/*         * Add the header panel         */
WITHOUT_CLASSIFICATION	/*         * Additional Settings         */
WITHOUT_CLASSIFICATION	/*tfMailFrom.setEnabled(true);            tfMailTo.setEnabled(true);            tfMailToCC.setEnabled(true);            tfMailToBCC.setEnabled(true);            tfSubject.setEnabled(true);*/
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// Use the actual class so the name must be correct.
WITHOUT_CLASSIFICATION	// Requires JavaMail 1.4.2+
WITHOUT_CLASSIFICATION	// Standard setup
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// local vars
WITHOUT_CLASSIFICATION	// Add the standard title
WITHOUT_CLASSIFICATION	// must follow the checkbox setting
WITHOUT_CLASSIFICATION	// not compatible
WITHOUT_CLASSIFICATION	// not compatible // must follow the checkbox setting
WITHOUT_CLASSIFICATION	// ensure correctly set on initial display
WITHOUT_CLASSIFICATION	// Might be NullProperty
WITHOUT_CLASSIFICATION	// case we are measuring real time of spedition
WITHOUT_CLASSIFICATION	// set properties using JAF
WITHOUT_CLASSIFICATION	// handle body and attachments
WITHOUT_CLASSIFICATION	// i.e. mailBody is empty
WITHOUT_CLASSIFICATION	// set from field and subject
WITHOUT_CLASSIFICATION	/*synchronousMode==true*/
WITHOUT_CLASSIFICATION	// listener cannot be null here
WITHOUT_CLASSIFICATION	// OK, it has been supplied
WITHOUT_CLASSIFICATION	// Empty arrays are immutable
WITHOUT_CLASSIFICATION	/* Implements JMeterGuiComponent.createTestElement() */
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	//http://api.mongodb.org/java/2.7.2/com/mongodb/Mongo.html
WITHOUT_CLASSIFICATION	//http://api.mongodb.org/java/2.7.2/com/mongodb/Mongo.html
WITHOUT_CLASSIFICATION	//http://api.mongodb.org/java/2.7.2/com/mongodb/MongoOptions.html/
WITHOUT_CLASSIFICATION	//http://api.mongodb.org/java/2.7.2/com/mongodb/MongoOptions.html/
WITHOUT_CLASSIFICATION	// Mongo is Thread Safe
WITHOUT_CLASSIFICATION	//there is no harm in trying to clear up
WITHOUT_CLASSIFICATION	/*    * Helper    */
WITHOUT_CLASSIFICATION	// + JMX names, do not change their values
WITHOUT_CLASSIFICATION	// - JMX names
WITHOUT_CLASSIFICATION	// default charset is deliberate here
WITHOUT_CLASSIFICATION	// N.B. this will be a config element, so we cannot use the getXXX() methods
WITHOUT_CLASSIFICATION	// Default to original behaviour, i.e. re-use connection
WITHOUT_CLASSIFICATION	// N.B. this will be a config element, so we cannot use the setXXX() methods
WITHOUT_CLASSIFICATION	/* Overrides AbstractJMeterGuiComponent.configure(TestElement) */
WITHOUT_CLASSIFICATION	// element.setProperty(TCPSampler.FILENAME, filename.getText());
WITHOUT_CLASSIFICATION	//        element.setProperty(TCPSampler.NODELAY, setNoDelay.isSelected());
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// Don't use default for saving tristates //        element.setProperty(TCPSampler.CLOSE_CONNECTION, closeConnection.isSelected(), TCPSampler.CLOSE_CONNECTION_DEFAULT);
WITHOUT_CLASSIFICATION	// 5 columns size
WITHOUT_CLASSIFICATION	// 3 columns size
WITHOUT_CLASSIFICATION	// mainPanel.add(createFilenamePanel());
WITHOUT_CLASSIFICATION	//-- JMX file constants - do not change
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ 
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ 
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ key for HashMap
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ key for HashMap
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	// Entry tends to be ignored ...
WITHOUT_CLASSIFICATION	// Set if we were successful or not
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	//++ JMX file constants - do not change //$NON-NLS-1$
WITHOUT_CLASSIFICATION	// If set, this is the regex that is used to extract the status from the // response // NOT implemented yet private static final String STATUS_REGEX = // JMeterUtils.getPropDefault("tcp.status.regex","");
WITHOUT_CLASSIFICATION	// Are we processing the first sample?
WITHOUT_CLASSIFICATION	// used for handling interrupt
WITHOUT_CLASSIFICATION	// Not in cache, so create new one and cache it
WITHOUT_CLASSIFICATION	// Do stuff we cannot do as part of threadStarted()
WITHOUT_CLASSIFICATION	// Use the test element name for the label
WITHOUT_CLASSIFICATION	// Calculate response time
WITHOUT_CLASSIFICATION	// Reset the status code if the message contains one
WITHOUT_CLASSIFICATION	// Cannot do this as part of threadStarted() because the Config elements have not been processed.
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// fetch in case gets nulled later
WITHOUT_CLASSIFICATION	// NOOP
WITHOUT_CLASSIFICATION	// $NON_NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	// the data implementation
WITHOUT_CLASSIFICATION	// Preserve sign on first byte
WITHOUT_CLASSIFICATION	// do we need to close byte array (or flush it?)
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// ignored
WITHOUT_CLASSIFICATION	// Process command line property definitions (can occur multiple times)
WITHOUT_CLASSIFICATION	//private ImageIcon runningIcon = JMeterUtils.getImage("thread.enabled.gif");
WITHOUT_CLASSIFICATION	//private Set hosts = new HashSet();
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	/* Implements JMeterGUIComponent.createTestElement() */
WITHOUT_CLASSIFICATION	/* Implements JMeterGUIComponent.modifyTestElement(TestElement) */
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ $NON-NLS-2$
WITHOUT_CLASSIFICATION	// called from ctor, so must not be overridable
WITHOUT_CLASSIFICATION	// called from ctor, so must not be overridable
WITHOUT_CLASSIFICATION	// Set it
WITHOUT_CLASSIFICATION	// Set it
WITHOUT_CLASSIFICATION	// Reset it
WITHOUT_CLASSIFICATION	// Reset it
WITHOUT_CLASSIFICATION	// Set category
WITHOUT_CLASSIFICATION	// Set root level
WITHOUT_CLASSIFICATION	// The default title for the Menu bar
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// Probably a missing // jar
WITHOUT_CLASSIFICATION	// Programming error: // bail out.
WITHOUT_CLASSIFICATION	// Programming error: // bail out.
WITHOUT_CLASSIFICATION	// $NON-NSL-1$
WITHOUT_CLASSIFICATION	// editMenu.setEnabled(false);
WITHOUT_CLASSIFICATION	// If we are enabling the Edit-->Remove menu item, then we also need to // enable the Edit menu. The Edit menu may already be enabled, but // there's no harm it trying to enable it again.
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$  // $NON-NLS-2$
WITHOUT_CLASSIFICATION	// called from ctor, so must not be overridable
WITHOUT_CLASSIFICATION	// file New operation may set to null, so just return app name
WITHOUT_CLASSIFICATION	// FIrst make sure we save the content of the current GUI (since we // will flush it away):
WITHOUT_CLASSIFICATION	// Forget about all GUIs we've created so far: we'll need to re-created // them all!
WITHOUT_CLASSIFICATION	// BeanInfo objects also contain locale-sensitive data -- flush them // away:
WITHOUT_CLASSIFICATION	// Now put the current GUI in place. [This code was copied from the // EditCommand action -- we can't just trigger the action because that // would populate the current node with the contents of the new GUI -- // which is empty.] // Fetch once // Probably caused by unit testing on headless system
WITHOUT_CLASSIFICATION	// JMenu reportMenu; // JMenuItem analyze;
WITHOUT_CLASSIFICATION	// If the Add menu already exists, remove it.
WITHOUT_CLASSIFICATION	// Insert the Add menu as the first menu item in the Edit menu.
WITHOUT_CLASSIFICATION	// There was a NPE being thrown without the null check here.. JKB
WITHOUT_CLASSIFICATION	// If we are enabling the Edit-->Add menu item, then we also need to // enable the Edit menu. The Edit menu may already be enabled, but // there's no harm it trying to enable it again.
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// HELP MENU // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// OPTIONS MENU // $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	/*     * Strings used to set up and process actions in this menu The strings need     * to agree with the those in the Action routines     */
WITHOUT_CLASSIFICATION	// RUN MENU // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// EDIT MENU // $NON-NLS-1$ // From the Java Look and Feel Guidelines: If all items in a menu // are disabled, then disable the menu. Makes sense.
WITHOUT_CLASSIFICATION	// FILE MENU // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// Set default SAVE menu item to disabled since the default node that // is selected is ROOT, which does not allow items to be inserted.
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // file_merge.setAccelerator( // KeyStroke.getKeyStroke(KeyEvent.VK_O, KeyEvent.CTRL_MASK));
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-2$ $NON-NLS-3$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-2$ $NON-NLS-3$ // $NON-NLS-1$ // $NON-NLS-2$ $NON-NLS-3$ // $NON-NLS-1$ // $NON-NLS-2$ $NON-NLS-3$ // $NON-NLS-1$ // $NON-NLS-2$ $NON-NLS-3$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// MENU_ADD_xxx - controls which items are in the ADD menu // MENU_PARENT_xxx - controls which items are in the Insert Parent menu
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-2$ $NON-NLS-3$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	//  private static final Logger log = LoggingManager.getLoggerForClass();
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-2$ $NON-NLS-3$ // $NON-NLS-1$ // $NON-NLS-2$ $NON-NLS-3$ // $NON-NLS-1$ // $NON-NLS-2$ $NON-NLS-3$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-2$ $NON-NLS-3$ // $NON-NLS-1$ // $NON-NLS-2$ $NON-NLS-3$
WITHOUT_CLASSIFICATION	// Don't try to instantiate these
WITHOUT_CLASSIFICATION	// called from ctor, so must not be overridable
WITHOUT_CLASSIFICATION	// called from ctor, so must not be overridable
WITHOUT_CLASSIFICATION	// JFileChooser jfc = null;
WITHOUT_CLASSIFICATION	//private static final Logger log = LoggingManager.getLoggerForClass();
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// same code as for default JMeter class
WITHOUT_CLASSIFICATION	// Avoid NPE in resetPage()
WITHOUT_CLASSIFICATION	/* (non-Javadoc)     * @see org.apache.jmeter.gui.JMeterGUIComponent#createTestElement()     */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)     * @see org.apache.jmeter.gui.JMeterGUIComponent#modifyTestElement(org.apache.jmeter.testelement.TestElement)     */
WITHOUT_CLASSIFICATION	// don't change name if merging
WITHOUT_CLASSIFICATION	// Allow for missing optional jars
WITHOUT_CLASSIFICATION	// OK
WITHOUT_CLASSIFICATION	// Clear the name of the test plan file
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-2$  // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// can't be null - this is checked by canAddTo
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// Save parent node for later
WITHOUT_CLASSIFICATION	// So elements can only be added as children
WITHOUT_CLASSIFICATION	// can't be null - this is checked by canAddTo
WITHOUT_CLASSIFICATION	// log.info("classname:: " + strClassName);
WITHOUT_CLASSIFICATION	// Match all
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// special handling
WITHOUT_CLASSIFICATION	// convertTree(tree);
WITHOUT_CLASSIFICATION	// OK
WITHOUT_CLASSIFICATION	// OK
WITHOUT_CLASSIFICATION	// OK
WITHOUT_CLASSIFICATION	// Not implemented: public static final String SAVE = "save_as"; // Not implemented: public static final String SAVE_ALL = "save_all"; // Not implemented: public static final String SAVE_TO_PREVIOUS = "save";
WITHOUT_CLASSIFICATION	// $NON-NLS-1$  // $NON-NLS-1$ 
WITHOUT_CLASSIFICATION	// get the JComponent from the visualizer
WITHOUT_CLASSIFICATION	// Get the string given from the choose and check // the file extension.
WITHOUT_CLASSIFICATION	// i.e. no disabled icon found
WITHOUT_CLASSIFICATION	// Must therefore set the enabled icon so there is at least some // icon
WITHOUT_CLASSIFICATION	// put the gui object back // to the way it was.
WITHOUT_CLASSIFICATION	// This check the state of the TestElement and if returns false it // disable the loaded node
WITHOUT_CLASSIFICATION	// Container endWindow; // JPopupMenu pop;
WITHOUT_CLASSIFICATION	// endWindow = window;
WITHOUT_CLASSIFICATION	// Get the Main Frame.
WITHOUT_CLASSIFICATION	// Close any Main Menu that is open
WITHOUT_CLASSIFICATION	//transient private static final Logger log = LoggingManager.getLoggerForClass();
WITHOUT_CLASSIFICATION	// boolean enabled = true;
WITHOUT_CLASSIFICATION	// If icon has not been defined, then use GUI_CLASS property //
WITHOUT_CLASSIFICATION	// mkdir() returns false if the directory was not created; could be because it exists
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// There's only 1 test plan, so can cache the mode here
WITHOUT_CLASSIFICATION	//    private static final Logger log = LoggingManager.getLoggerForClass();
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$  // $NON-NLS-2$
WITHOUT_CLASSIFICATION	// called from ctor, so must not be overridable
WITHOUT_CLASSIFICATION	// if the directory already exists and is a directory, // we just renamed to "archive.date"
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// return the pagesize divided by 1024 to get kilobytes
WITHOUT_CLASSIFICATION	// we add the entry
WITHOUT_CLASSIFICATION	// we should make this configurable eventually
WITHOUT_CLASSIFICATION	//private static ReportPlan plan;
WITHOUT_CLASSIFICATION	// now add the samples to the HashMap
WITHOUT_CLASSIFICATION	//Iterator itr = data.iterator();
WITHOUT_CLASSIFICATION	// duplicates
WITHOUT_CLASSIFICATION	// incompatable (blee/all)
WITHOUT_CLASSIFICATION	// Check that optional args work woth long options
WITHOUT_CLASSIFICATION	// "-T3","-a"
WITHOUT_CLASSIFICATION	// "-T3","-a"
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// result.setResponseData - not set
WITHOUT_CLASSIFICATION	// TODO - charset?
WITHOUT_CLASSIFICATION	// "-T","-a"
WITHOUT_CLASSIFICATION	// "-Dstupid=idiot","are","--all","--all","here"
WITHOUT_CLASSIFICATION	// Check // delimiters // are // allowed
WITHOUT_CLASSIFICATION	// Check // delimiters // are // allowed
WITHOUT_CLASSIFICATION	// Should // not // detect // trailing // option
WITHOUT_CLASSIFICATION	// should // detect // trailing // option
WITHOUT_CLASSIFICATION	// "-Dstupid=idiot","are","--all","here"
WITHOUT_CLASSIFICATION	// Check // "-" // is // allowed // in // arg2
WITHOUT_CLASSIFICATION	// "-Dstupid="
WITHOUT_CLASSIFICATION	// "-Dstupid=","-c"
WITHOUT_CLASSIFICATION	// "-Dstupid","-c"
WITHOUT_CLASSIFICATION	// Canonical form
WITHOUT_CLASSIFICATION	// Test optional arguments
WITHOUT_CLASSIFICATION	// OK // should treat B as separate // Should have no arg
WITHOUT_CLASSIFICATION	// Convert between eclipse jar name and build.properties name
WITHOUT_CLASSIFICATION	// remove docs-only jars
WITHOUT_CLASSIFICATION	// assume default charset is OK here //      <classpathentry kind="lib" path="lib/geronimo-jms_1.1_spec-1.1.1.jar"/> //      <classpathentry kind="lib" path="lib/activation-1.1.1.jar"/> //      <classpathentry kind="lib" path="lib/jtidy-r938.jar"/>
WITHOUT_CLASSIFICATION	// special handling
WITHOUT_CLASSIFICATION	// This would be done by the run command
WITHOUT_CLASSIFICATION	//testLog.setPriority(org.apache.log.Priority.DEBUG);
WITHOUT_CLASSIFICATION	// Not present
WITHOUT_CLASSIFICATION	// wrong
WITHOUT_CLASSIFICATION	//Wrong
WITHOUT_CLASSIFICATION	// LoggingManager.setPriority("DEBUG","jmeter");
WITHOUT_CLASSIFICATION	// Restart file
WITHOUT_CLASSIFICATION	// Check random number
WITHOUT_CLASSIFICATION	// This would be done by the run // command
WITHOUT_CLASSIFICATION	// Test CSV file with a header line
WITHOUT_CLASSIFICATION	// Test CSV file with a header line
WITHOUT_CLASSIFICATION	// Test CSV file with a header line and recycle is true
WITHOUT_CLASSIFICATION	// read 1st line // read 5 lines + restart to file begin // line 2 // line 3 // line 4 // line 5 // return to 2nd line (first line is names)
WITHOUT_CLASSIFICATION	// needs to be initialised
WITHOUT_CLASSIFICATION	// etc...
WITHOUT_CLASSIFICATION	/*             * GenericController sub_1 = new GenericController();             * sub_1.addTestElement(new IfController("3==3"));             * controller.addTestElement(sub_1); controller.addTestElement(new             * IfController("false==true"));             */
WITHOUT_CLASSIFICATION	/*             * IfController controller = new IfController("12==12");             * controller.initialize();             */
WITHOUT_CLASSIFICATION	// Should not enter the loop
WITHOUT_CLASSIFICATION	// Test with SimpleController as first item
WITHOUT_CLASSIFICATION	// Should not enter the loop next time
WITHOUT_CLASSIFICATION	// Should not enter the loop next time // But should continue to the end of the loop
WITHOUT_CLASSIFICATION	// Get next sample and its name
WITHOUT_CLASSIFICATION	// Match by name
WITHOUT_CLASSIFICATION	// should not run any children // should match the default entry
WITHOUT_CLASSIFICATION	// Selection controller with two sub-controllers, but each has only 1 // child
WITHOUT_CLASSIFICATION	/*         * Controller         * + Before         * + Switch (cond)         * + + zero         * + + Controller sub_1         * + + + one         * + + two         * + + Controller sub_2         * + + + three         * + After         */
WITHOUT_CLASSIFICATION	/*         * Test:          * Before          * Selection Controller         *  - zero (default)         *  - simple controller 1         *  - - one         *  - - two         *  - simple controller 2         *  - - three         *  - - four         *  - five         *  - six         * After         *          * cond  = Switch condition          * exp[] = expected results         */
WITHOUT_CLASSIFICATION	/*         * N.B. Requires ApacheJMeter_functions.jar to be on the classpath,         * otherwise the function cannot be resolved.        */
WITHOUT_CLASSIFICATION	// While (blank), previous sample OK - should loop until false
WITHOUT_CLASSIFICATION	//          log.info("testBlankPrevOK");
WITHOUT_CLASSIFICATION	// While (LAST), previous sample OK - should loop until false
WITHOUT_CLASSIFICATION	// While (LAST), previous sample OK - should loop until false
WITHOUT_CLASSIFICATION	//          log.info("testLASTPrevOK");
WITHOUT_CLASSIFICATION	// Dummy for testing functions
WITHOUT_CLASSIFICATION	//          log.info("testOtherPrevOK");
WITHOUT_CLASSIFICATION	// While (blank), previous sample failed - should run once
WITHOUT_CLASSIFICATION	//          log.info("testBlankPrevFailed");
WITHOUT_CLASSIFICATION	// Run entire test again
WITHOUT_CLASSIFICATION	// Should not enter the loop
WITHOUT_CLASSIFICATION	// While LAST, previous sample failed - should not run
WITHOUT_CLASSIFICATION	//          log.info("testLastPrevFailed");
WITHOUT_CLASSIFICATION	// While False, previous sample failed - should not run
WITHOUT_CLASSIFICATION	//          log.info("testFalsePrevFailed");
WITHOUT_CLASSIFICATION	// Should behave the same for blank and LAST because success on input
WITHOUT_CLASSIFICATION	// Should be OK
WITHOUT_CLASSIFICATION	// e.printStackTrace();
WITHOUT_CLASSIFICATION	// Set up the test plan
WITHOUT_CLASSIFICATION	// OnlyOnce samples
WITHOUT_CLASSIFICATION	// Outer sample
WITHOUT_CLASSIFICATION	// Inner loop
WITHOUT_CLASSIFICATION	// Sample in inner loop
WITHOUT_CLASSIFICATION	// Compute the expected sample names
WITHOUT_CLASSIFICATION	// Outer only once + ("three" + ("four" + "five" + "six" + "seven") * innerLoopCount) * outerLoopCount;  
WITHOUT_CLASSIFICATION	// The only once samples
WITHOUT_CLASSIFICATION	// The outer sample and the inner loop samples
WITHOUT_CLASSIFICATION	// Execute the test pan
WITHOUT_CLASSIFICATION	// Outer sample
WITHOUT_CLASSIFICATION	// Inner loop
WITHOUT_CLASSIFICATION	// Inner loop
WITHOUT_CLASSIFICATION	// Sample in inner loop
WITHOUT_CLASSIFICATION	// Compute the expected sample names
WITHOUT_CLASSIFICATION	// Compute the expected sample names
WITHOUT_CLASSIFICATION	// The only once samples
WITHOUT_CLASSIFICATION	// The only once samples
WITHOUT_CLASSIFICATION	// The outer sample and the inner loop samples
WITHOUT_CLASSIFICATION	// Execute the test pan
WITHOUT_CLASSIFICATION	// Execute the test pan
WITHOUT_CLASSIFICATION	// Test plan with OnlyOnceController inside inner loop // Set up the test plan
WITHOUT_CLASSIFICATION	// OnlyOnce inside inner loop
WITHOUT_CLASSIFICATION	// Outer only once + ("three" + "only once five and six" + ("four" + "seven") * innerLoopCount) * outerLoopCount;  
WITHOUT_CLASSIFICATION	// Test skipped for now as behaviour is not yet properly defined
WITHOUT_CLASSIFICATION	// InterleaveController in inner loop
WITHOUT_CLASSIFICATION	// OnlyOnce inside InterleaveController
WITHOUT_CLASSIFICATION	// Samples inside InterleaveController        
WITHOUT_CLASSIFICATION	// Sample in inner loop        
WITHOUT_CLASSIFICATION	// Outer only once + ("three" + "only once five and six" + "eight in interleave only once" + ("four" + "interleave" + "eleven") * innerLoopCount) * outerLoopCount;  
WITHOUT_CLASSIFICATION	// Escaped dollar commma and backslash with no variable reference
WITHOUT_CLASSIFICATION	// Escaped dollar commma and backslash with variable reference
WITHOUT_CLASSIFICATION	// N.B. Backslashes are removed before dollar, comma and backslash
WITHOUT_CLASSIFICATION	// N.B. Backslashes are removed before dollar, comma and backslash
WITHOUT_CLASSIFICATION	// Escaped dollar commma and backslash with missing variable reference
WITHOUT_CLASSIFICATION	// Escaped dollar commma and backslash with missing function reference
WITHOUT_CLASSIFICATION	//log.debug("domain property = " + element.getProperty("domain"));
WITHOUT_CLASSIFICATION	//log.debug("domain property = " + element.getProperty("domain"));
WITHOUT_CLASSIFICATION	// Set up the non-wild variables
WITHOUT_CLASSIFICATION	// Should not clear this?
WITHOUT_CLASSIFICATION	// Check when match fails
WITHOUT_CLASSIFICATION	//extractor.setDefaultValue("default");
WITHOUT_CLASSIFICATION	// Now rerun with match fail
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// This would be done by the run // command
WITHOUT_CLASSIFICATION	// OK
WITHOUT_CLASSIFICATION	// Has child, but child is empty
WITHOUT_CLASSIFICATION	// Has no child
WITHOUT_CLASSIFICATION	// No text
WITHOUT_CLASSIFICATION	// Test fragment
WITHOUT_CLASSIFICATION	// Now get its text
WITHOUT_CLASSIFICATION	// No text, but using fragment mode
WITHOUT_CLASSIFICATION	// There aren't any
WITHOUT_CLASSIFICATION	// Try to get data from subresult // Needed for addSubResult()
WITHOUT_CLASSIFICATION	// Get data from both
WITHOUT_CLASSIFICATION	// get data from child
WITHOUT_CLASSIFICATION	// Create the StringFromFile function and set its parameters.
WITHOUT_CLASSIFICATION	// Create the SplitFile function and set its parameters.
WITHOUT_CLASSIFICATION	// Create the BeanShell function and set its parameters.
WITHOUT_CLASSIFICATION	// Reset files
WITHOUT_CLASSIFICATION	// Check some initial variables
WITHOUT_CLASSIFICATION	// Check source works
WITHOUT_CLASSIFICATION	// Check persistence
WITHOUT_CLASSIFICATION	// Check that bsh has read the file
WITHOUT_CLASSIFICATION	// Restarts
WITHOUT_CLASSIFICATION	// Test that only loops twice
WITHOUT_CLASSIFICATION	// Function objects to be tested
WITHOUT_CLASSIFICATION	// Helper class used to implement co-routine between two threads
WITHOUT_CLASSIFICATION	// Allow other thread to start
WITHOUT_CLASSIFICATION	// open as *A
WITHOUT_CLASSIFICATION	// open as *B
WITHOUT_CLASSIFICATION	// col2 line 1
WITHOUT_CLASSIFICATION	// *A next
WITHOUT_CLASSIFICATION	// col 1, line 2, *A
WITHOUT_CLASSIFICATION	// *B next
WITHOUT_CLASSIFICATION	// col2, line 2, *B
WITHOUT_CLASSIFICATION	// XPathFileContainer tests
WITHOUT_CLASSIFICATION	// assertEquals("Expected 4 lines",4,f.size());
WITHOUT_CLASSIFICATION	/*     * The suite() method creates separate test suites for each of the types of     * test. The suitexxx() methods create a list of items to be tested, and     * create a new test instance for each.     *      * Each test type has its own constructor, which saves the item to be tested     *      * Note that the suite() method must be static, and the methods to run the     * tests must be instance methods so that they can pick up the item value     * which was saved by the constructor.     *      */
WITHOUT_CLASSIFICATION	// Use same XPath for both threads
WITHOUT_CLASSIFICATION	//String s = 
WITHOUT_CLASSIFICATION	// prevent accidental use of is below
WITHOUT_CLASSIFICATION	// wrap-round check
WITHOUT_CLASSIFICATION	// no wrap-round check
WITHOUT_CLASSIFICATION	// Perform a sum and check the results
WITHOUT_CLASSIFICATION	// trailing space
WITHOUT_CLASSIFICATION	// Test with output variable name
WITHOUT_CLASSIFICATION	// template // match number // ALL separator
WITHOUT_CLASSIFICATION	// template // match number // ALL separator
WITHOUT_CLASSIFICATION	// Test with empty output variable name
WITHOUT_CLASSIFICATION	// not full test plans
WITHOUT_CLASSIFICATION	// start in new state
WITHOUT_CLASSIFICATION	//suite.addTest(new TestLoad("checkGuiPackage"));
WITHOUT_CLASSIFICATION	// Save the method name
WITHOUT_CLASSIFICATION	// Constructor for TestElement tests
WITHOUT_CLASSIFICATION	// Save the method name
WITHOUT_CLASSIFICATION	// Save the method name
WITHOUT_CLASSIFICATION	// Save the method name
WITHOUT_CLASSIFICATION	// Constructor for Serializable tests
WITHOUT_CLASSIFICATION	// Constructor for GUI tests
WITHOUT_CLASSIFICATION	// Constructor for Function tests
WITHOUT_CLASSIFICATION	// Only show classpath once
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// used by TestAnchorModifier // used by TestAnchorModifier // used by TestSaveService
WITHOUT_CLASSIFICATION	/*     * Use a suite to allow the tests to be generated at run-time     */
WITHOUT_CLASSIFICATION	// The Locale used to instantiate the GUI objects
WITHOUT_CLASSIFICATION	// Needs to be done before any GUI classes are instantiated
WITHOUT_CLASSIFICATION	// Restore the original Locale
WITHOUT_CLASSIFICATION	/*     * Extract titles from component_reference.xml     */
WITHOUT_CLASSIFICATION	// Not a true GUI component
WITHOUT_CLASSIFICATION	// Add titles that don't need to be documented //guiTitles.put("Root", Boolean.FALSE);
WITHOUT_CLASSIFICATION	/*     * Extract titles from functions.xml     */
WITHOUT_CLASSIFICATION	// first time
WITHOUT_CLASSIFICATION	// We don't mind if this is left over // Ditto, not a sampler
WITHOUT_CLASSIFICATION	/*     * Test GUI elements - create the suite of tests     */
WITHOUT_CLASSIFICATION	/*     * Test Functions - create the suite of tests     */
WITHOUT_CLASSIFICATION	// JMeterGUIComponent item = (JMeterGUIComponent) iter.next();
WITHOUT_CLASSIFICATION	/*     * Test GUI elements - run the test     */
WITHOUT_CLASSIFICATION	// So we can detect extra entries
WITHOUT_CLASSIFICATION	// Is this a work in progress or an internal GUI component? // Will be "" for internal components
WITHOUT_CLASSIFICATION	// Skip the example samplers ...
WITHOUT_CLASSIFICATION	// Record in log as well
WITHOUT_CLASSIFICATION	// Record in log as well
WITHOUT_CLASSIFICATION	/*     * run the function test     */
WITHOUT_CLASSIFICATION	// For detecting extra entries
WITHOUT_CLASSIFICATION	/*     * Check that function descriptions are OK     */
WITHOUT_CLASSIFICATION	/*     * Test GUI elements - run for all components     */
WITHOUT_CLASSIFICATION	/*     * Test GUI elements - not run for TestBeanGui items     */
WITHOUT_CLASSIFICATION	/*     * Test serializable elements - create the suite of tests     */
WITHOUT_CLASSIFICATION	/*     * Test serializable elements - test the object     */
WITHOUT_CLASSIFICATION	/*     * Test TestElements - implement the test case     */
WITHOUT_CLASSIFICATION	// Don't try to instantiate remote server
WITHOUT_CLASSIFICATION	// Try with a parameter-less constructor first
WITHOUT_CLASSIFICATION	// OK
WITHOUT_CLASSIFICATION	// no luck. Ignore this class
WITHOUT_CLASSIFICATION	// We won't test restricted-access classes.
WITHOUT_CLASSIFICATION	// not thrown, so need to check here
WITHOUT_CLASSIFICATION	// Only dump it once
WITHOUT_CLASSIFICATION	// [sebb] assertEquals(item2, // clonedItem.getProperty(item2.getName()));
WITHOUT_CLASSIFICATION	// Used by findTestFile
WITHOUT_CLASSIFICATION	// JMeterUtils assumes Unix-style separators
WITHOUT_CLASSIFICATION	// Used to be done in initializeProperties
WITHOUT_CLASSIFICATION	// needed for scripts
WITHOUT_CLASSIFICATION	// Display actual encoding used (will differ if file.encoding is not recognised)
WITHOUT_CLASSIFICATION	// Helper method to find a file
WITHOUT_CLASSIFICATION	// Add the offset
WITHOUT_CLASSIFICATION	// Add the offset
WITHOUT_CLASSIFICATION	// Helper method to find a test path
WITHOUT_CLASSIFICATION	// number of samples taken
WITHOUT_CLASSIFICATION	// same as above
WITHOUT_CLASSIFICATION	// not same
WITHOUT_CLASSIFICATION	// This is needed in order to set up the cookie policy
WITHOUT_CLASSIFICATION	// This should be ignored, as there is no value
WITHOUT_CLASSIFICATION	// starts empty
WITHOUT_CLASSIFICATION	// should not be stored
WITHOUT_CLASSIFICATION	// Test session cookie is returned
WITHOUT_CLASSIFICATION	// Test Old cookie is not returned
WITHOUT_CLASSIFICATION	// Test multi-cookie header handling
WITHOUT_CLASSIFICATION	// Test duplicate cookie handling
WITHOUT_CLASSIFICATION	// Assumes some kind of list is used
WITHOUT_CLASSIFICATION	// Test cookie matching
WITHOUT_CLASSIFICATION	// Defaults to caller URL
WITHOUT_CLASSIFICATION	// ensure policy is picked up
WITHOUT_CLASSIFICATION	//assertEquals("/",man.get(0).getPath());
WITHOUT_CLASSIFICATION	// Cookies are ignored
WITHOUT_CLASSIFICATION	// Cookies again ignored
WITHOUT_CLASSIFICATION	// Show that maxlong now saved as 0
WITHOUT_CLASSIFICATION	// Shutdown the http server
WITHOUT_CLASSIFICATION	// Wait up to 1 second
WITHOUT_CLASSIFICATION	// Already failed
WITHOUT_CLASSIFICATION	// succeeded
WITHOUT_CLASSIFICATION	// Connect to the http server, and do a simple http get
WITHOUT_CLASSIFICATION	// Write to the socket
WITHOUT_CLASSIFICATION	// Headers
WITHOUT_CLASSIFICATION	// Check that the request and response matches
WITHOUT_CLASSIFICATION	// Close the connection
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// Write to the socket
WITHOUT_CLASSIFICATION	// Headers
WITHOUT_CLASSIFICATION	// Headers
WITHOUT_CLASSIFICATION	// Headers
WITHOUT_CLASSIFICATION	// Read the response
WITHOUT_CLASSIFICATION	// Read the response
WITHOUT_CLASSIFICATION	// Read the response
WITHOUT_CLASSIFICATION	// Check that the request and response matches
WITHOUT_CLASSIFICATION	// Check that the request and response matches
WITHOUT_CLASSIFICATION	// Check that the request and response matches
WITHOUT_CLASSIFICATION	// Close the connection
WITHOUT_CLASSIFICATION	// Close the connection
WITHOUT_CLASSIFICATION	// Close the connection
WITHOUT_CLASSIFICATION	// Connect to the http server, and do a simple http get, with // a pause in the middle of transmitting the header
WITHOUT_CLASSIFICATION	// Write the start of the headers, and then sleep, so that the mirror // thread will have to block to wait for more data to appear
WITHOUT_CLASSIFICATION	// Write the rest of the headers
WITHOUT_CLASSIFICATION	// The content sent
WITHOUT_CLASSIFICATION	// The content sent
WITHOUT_CLASSIFICATION	// Connect to the http server, and do a simple http post
WITHOUT_CLASSIFICATION	// Construct body
WITHOUT_CLASSIFICATION	// Construct body
WITHOUT_CLASSIFICATION	// Write the headers and body
WITHOUT_CLASSIFICATION	// Connect to the http server, and do a simple http post, with // a pause after transmitting the headers
WITHOUT_CLASSIFICATION	// Write the headers, and then sleep
WITHOUT_CLASSIFICATION	// Write the body
WITHOUT_CLASSIFICATION	// Write the body
WITHOUT_CLASSIFICATION	// Check that the request and response matches       
WITHOUT_CLASSIFICATION	// $sid$
WITHOUT_CLASSIFICATION	// Arguments args = sampler.getArguments();
WITHOUT_CLASSIFICATION	// No entry; check it is still present
WITHOUT_CLASSIFICATION	// Test https works too
WITHOUT_CLASSIFICATION	// These are some of the special characters
WITHOUT_CLASSIFICATION	// Can't instantiate
WITHOUT_CLASSIFICATION	// List of parsers to test. Should probably be derived automatically
WITHOUT_CLASSIFICATION	// Dummy as the file has no entries
WITHOUT_CLASSIFICATION	// Dummy as the file has no entries
WITHOUT_CLASSIFICATION	// Relative filenames
WITHOUT_CLASSIFICATION	// Identify subtests
WITHOUT_CLASSIFICATION	// This is OK
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// A HTTP GET request, with encoding not known 
WITHOUT_CLASSIFICATION	//            private TestData(String f, String b, String s) { //                this(f, b, s, null); //            }
WITHOUT_CLASSIFICATION	// Does the order matter?
WITHOUT_CLASSIFICATION	// Convert both to Sets
WITHOUT_CLASSIFICATION	// Get expected results as a List
WITHOUT_CLASSIFICATION	// A HTTP GET request
WITHOUT_CLASSIFICATION	// Check arguments
WITHOUT_CLASSIFICATION	// Check arguments
WITHOUT_CLASSIFICATION	// A HTTP POST request
WITHOUT_CLASSIFICATION	// A HTTP GET request, with encoding not known
WITHOUT_CLASSIFICATION	// A HTTP POST request, with content-type text/plain
WITHOUT_CLASSIFICATION	// A HTTP GET request, with UTF-8 encoding 
WITHOUT_CLASSIFICATION	// When the encoding is not known, the argument will get the encoded value, and the "encode?" set to false
WITHOUT_CLASSIFICATION	// When the encoding is not known, the argument will get the encoded value, and the "encode?" set to false
WITHOUT_CLASSIFICATION	// When the encoding is not known, the argument will get the encoded value, and the "encode?" set to false
WITHOUT_CLASSIFICATION	// A HTTP POST request, with UTF-8 encoding
WITHOUT_CLASSIFICATION	// A HTTP POST request, with unknown encoding
WITHOUT_CLASSIFICATION	// A HTTP POST request, with UTF-8 encoding
WITHOUT_CLASSIFICATION	// A HTTP GET request, with ISO-8859-1 encoding
WITHOUT_CLASSIFICATION	// A HTTP GET request, with UTF-8 encoding
WITHOUT_CLASSIFICATION	// A HTTP POST request, with encoding not known
WITHOUT_CLASSIFICATION	// Check arguments // We should have one argument, with the value equal to the post body
WITHOUT_CLASSIFICATION	// A HTTP POST request, with content-type text/plain; charset=UTF-8 // The encoding should be picked up from the header we send with the request
WITHOUT_CLASSIFICATION	// A HTTP POST request, with content-type text/plain; charset=UTF-8 // The encoding should be picked up from the header we send with the request
WITHOUT_CLASSIFICATION	// Use null for url to simulate that HttpRequestHdr do not // know the encoding for the page. Specify contentEncoding, so the // request is "sent" using that encoding
WITHOUT_CLASSIFICATION	// Use null for url to simulate that HttpRequestHdr do not // know the encoding for the page. Specify contentEncoding, so the // request is "sent" using that encoding
WITHOUT_CLASSIFICATION	// Use null for url and contentEncoding, to simulate that HttpRequestHdr do not // know the encoding for the page
WITHOUT_CLASSIFICATION	// Use null for url and contentEncoding, to simulate that HttpRequestHdr do not // know the encoding for the page
WITHOUT_CLASSIFICATION	// A HTTP POST request, with ISO-8859-1 encoding
WITHOUT_CLASSIFICATION	// A HTTP POST request, multipart/form-data, simple values,
WITHOUT_CLASSIFICATION	// A HTTP POST request, multipart/form-data, simple values,
WITHOUT_CLASSIFICATION	// no space after :
WITHOUT_CLASSIFICATION	// spaces after :
WITHOUT_CLASSIFICATION	// Assume there's at least one file
WITHOUT_CLASSIFICATION	// Title multipart
WITHOUT_CLASSIFICATION	// Description multipart
WITHOUT_CLASSIFICATION	// File upload multipart
WITHOUT_CLASSIFICATION	// Most browsers use ISO-8859-1 as default encoding, even if spec says UTF-8
WITHOUT_CLASSIFICATION	// Most browsers use ISO-8859-1 as default encoding, even if spec says UTF-8
WITHOUT_CLASSIFICATION	// No filters
WITHOUT_CLASSIFICATION	// Empty filters
WITHOUT_CLASSIFICATION	// Non empty filters
WITHOUT_CLASSIFICATION	// Simple inclusion and exclusion filter
WITHOUT_CLASSIFICATION	// Allow all but images
WITHOUT_CLASSIFICATION	//        throw new UnsupportedOperationException("For test purposes only");
WITHOUT_CLASSIFICATION	// This must be the original (Java) HTTP sampler
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// A HTTP POST request, multipart/form-data, with value that will change // if they are url encoded // Values are similar to __VIEWSTATE parameter that .net uses
WITHOUT_CLASSIFICATION	// Most browsers use ISO-8859-1 as default encoding, even if spec says UTF-8 // TODO - charset?
WITHOUT_CLASSIFICATION	// Create the test file content
WITHOUT_CLASSIFICATION	// create a temporary file to make sure we always have a file to give to the PostWriter  // Whereever we are or Whatever the current path is.
WITHOUT_CLASSIFICATION	// delete temporay file
WITHOUT_CLASSIFICATION	// Test sending data with default encoding
WITHOUT_CLASSIFICATION	// Test sending data with default encoding
WITHOUT_CLASSIFICATION	// Test sending data with default encoding
WITHOUT_CLASSIFICATION	// Test sending data as ISO-8859-1
WITHOUT_CLASSIFICATION	// Test sending data as ISO-8859-1
WITHOUT_CLASSIFICATION	// Test sending data as ISO-8859-1
WITHOUT_CLASSIFICATION	// Test sending data as ISO-8859-1
WITHOUT_CLASSIFICATION	// Test sending data as ISO-8859-1
WITHOUT_CLASSIFICATION	// Test sending data as UTF-8
WITHOUT_CLASSIFICATION	// Test sending data as UTF-8
WITHOUT_CLASSIFICATION	// Test sending data as UTF-8
WITHOUT_CLASSIFICATION	// Test sending data as UTF-8
WITHOUT_CLASSIFICATION	// Test sending data as UTF-8
WITHOUT_CLASSIFICATION	// Test sending UTF-8 data with ISO-8859-1 content encoding
WITHOUT_CLASSIFICATION	/*     * Test method for 'org.apache.jmeter.protocol.http.sampler.postWriter.sendPostData(URLConnection, HTTPSampler)'     * This method test sending a HTTPSampler with form parameters, and only     * the filename of a file.     */
WITHOUT_CLASSIFICATION	/*     * Test method for 'org.apache.jmeter.protocol.http.sampler.postWriter.sendPostData(URLConnection, HTTPSampler)'     * This method test sending file content as the only content of the post body     */
WITHOUT_CLASSIFICATION	// Check using default encoding
WITHOUT_CLASSIFICATION	// Check using a different encoding
WITHOUT_CLASSIFICATION	// File content is sent as binary, so the content encoding should not change the file data
WITHOUT_CLASSIFICATION	// If we have both file as body, and form data, then only form data will be sent
WITHOUT_CLASSIFICATION	/*     * Test method for 'org.apache.jmeter.protocol.http.sampler.postWriter.sendPostData(URLConnection, HTTPSampler)'     * This method test sending only a file multipart.     */
WITHOUT_CLASSIFICATION	/*     * Test method for 'org.apache.jmeter.protocol.http.sampler.postWriter.sendPostData(URLConnection, HTTPSampler)'     * This method test sending only a formdata, as a multipart/form-data request.     */
WITHOUT_CLASSIFICATION	// Tell sampler to do multipart, even if we have no files to upload
WITHOUT_CLASSIFICATION	// Test sending data as ISO-8859-1, with values that need to be urlencoded
WITHOUT_CLASSIFICATION	// Test sending data as ISO-8859-1, with values that need to be urlencoded
WITHOUT_CLASSIFICATION	/*     * Test method for 'org.apache.jmeter.protocol.http.sampler.postWriter.sendPostData(URLConnection, HTTPSampler)'     * This method test sending only a formdata, as urlencoded data     */
WITHOUT_CLASSIFICATION	// Test sending data as UTF-8, with values that needs to be urlencoded
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// delete temporay file
WITHOUT_CLASSIFICATION	// Test sending data as ISO-8859-1
WITHOUT_CLASSIFICATION	// Test sending data as ISO-8859-1
WITHOUT_CLASSIFICATION	// Test sending data as ISO-8859-1
WITHOUT_CLASSIFICATION	// Test sending data as UTF-8
WITHOUT_CLASSIFICATION	// Test sending data as UTF-8
WITHOUT_CLASSIFICATION	// Check that other encoding is not the current encoding // TODO - charset?
WITHOUT_CLASSIFICATION	// Test sending data as UTF-8, with values that would have been urlencoded // if it was not sent as multipart
WITHOUT_CLASSIFICATION	// Test sending parameters which are urlencoded beforehand // The values must be URL encoded with UTF-8 encoding, because that // is what the HTTPArgument assumes // %C3%85 in UTF-8 is the same as %C5 in ISO-8859-1, which is the same as &Aring;
WITHOUT_CLASSIFICATION	// HTTPSampler uses ISO-8859-1 as default encoding // HTTPSampler uses ISO-8859-1 as default encoding
WITHOUT_CLASSIFICATION	/*     * Test method for 'org.apache.jmeter.protocol.http.sampler.postWriter.setHeaders(URLConnection, HTTPSampler)'     */
WITHOUT_CLASSIFICATION	// Create the multiparts
WITHOUT_CLASSIFICATION	// Join the two multiparts
WITHOUT_CLASSIFICATION	// The encoding used for http headers and control information
WITHOUT_CLASSIFICATION	// replace all backslash with double backslash
WITHOUT_CLASSIFICATION	// Different from TestHTTPMirrorThread port and standard mirror server
WITHOUT_CLASSIFICATION	// additional ctor for processing tests which use int parameters
WITHOUT_CLASSIFICATION	// This is used to emulate @before class and @after class
WITHOUT_CLASSIFICATION	// Add parameterised tests. For simplicity we assune each has cases 0-10
WITHOUT_CLASSIFICATION	// Shutdown mirror server
WITHOUT_CLASSIFICATION	// Test sending data as UTF-8, with values that will change when urlencoded
WITHOUT_CLASSIFICATION	// Test sending data as UTF-8, with values that have been urlencoded
WITHOUT_CLASSIFICATION	// Test sending data as UTF-8, with values similar to __VIEWSTATE parameter that .net uses
WITHOUT_CLASSIFICATION	// Test sending data as UTF-8, with values similar to __VIEWSTATE parameter that .net uses
WITHOUT_CLASSIFICATION	// Replace the variables in the sampler
WITHOUT_CLASSIFICATION	// Replace the variables in the sampler
WITHOUT_CLASSIFICATION	// ensure only values are used
WITHOUT_CLASSIFICATION	// Test sending data with default encoding
WITHOUT_CLASSIFICATION	// Test sending data as ISO-8859-1
WITHOUT_CLASSIFICATION	// Test sending data as UTF-8, with values that would have been urlencoded // if it was not sent as multipart
WITHOUT_CLASSIFICATION	// Test sending data as UTF-8, with values that will change when urlencoded
WITHOUT_CLASSIFICATION	// Test sending data as UTF-8, with values that have been urlencoded
WITHOUT_CLASSIFICATION	// Test sending data as UTF-8, with values similar to __VIEWSTATE parameter that .net uses
WITHOUT_CLASSIFICATION	// Replace the variables in the sampler
WITHOUT_CLASSIFICATION	// Test sending data as UTF-8, where user defined variables are used // to set the value for form data
WITHOUT_CLASSIFICATION	// Test sending data as UTF-8, where user defined variables are used // to set the value for form data
WITHOUT_CLASSIFICATION	// Replace the variables in the sampler
WITHOUT_CLASSIFICATION	// ensure only values are used
WITHOUT_CLASSIFICATION	// Test sending data as UTF-8, with values that have been urlencoded, and // where we tell the sampler to urlencode the parameter values
WITHOUT_CLASSIFICATION	// Test sending data with ISO-8859-1 encoding
WITHOUT_CLASSIFICATION	// Test sending data with ISO-8859-1 encoding
WITHOUT_CLASSIFICATION	// Test sending data with UTF-8 encoding
WITHOUT_CLASSIFICATION	// Test sending data with UTF-8 encoding
WITHOUT_CLASSIFICATION	// Test sending data as UTF-8, with values that changes when urlencoded
WITHOUT_CLASSIFICATION	// Check URL
WITHOUT_CLASSIFICATION	// Check the request
WITHOUT_CLASSIFICATION	// Check request headers
WITHOUT_CLASSIFICATION	// Check post body from the result query string
WITHOUT_CLASSIFICATION	// Find the data sent to the mirror server, which the mirror server is sending back to us
WITHOUT_CLASSIFICATION	// Skip the blank line with crlf dividing headers and body
WITHOUT_CLASSIFICATION	// Check response headers
WITHOUT_CLASSIFICATION	// Check URL
WITHOUT_CLASSIFICATION	// Test sending data as UTF-8, with + as part of the value, // where the value is set in sampler as not urluencoded, but the  // isalwaysencoded flag of the argument is set to false. // This mimics the HTTPConstants.addNonEncodedArgument, which the // Proxy server calls in some cases
WITHOUT_CLASSIFICATION	// Test sending simple HTTP get // Test sending data with default encoding
WITHOUT_CLASSIFICATION	// Test sending simple HTTP get // Test sending data with default encoding
WITHOUT_CLASSIFICATION	// Check request headers
WITHOUT_CLASSIFICATION	// Check post body from the result query string
WITHOUT_CLASSIFICATION	// Find the data sent to the mirror server, which the mirror server is sending back to us
WITHOUT_CLASSIFICATION	// Find the data sent to the mirror server, which the mirror server is sending back to us
WITHOUT_CLASSIFICATION	// Skip the blank line with crlf dividing headers and body
WITHOUT_CLASSIFICATION	// Check response headers
WITHOUT_CLASSIFICATION	// Check response headers
WITHOUT_CLASSIFICATION	// Check post body which was sent to the mirror server, and // sent back by the mirror server
WITHOUT_CLASSIFICATION	// Check method, path and query sent
WITHOUT_CLASSIFICATION	// Check method, path and query sent
WITHOUT_CLASSIFICATION	// Find the data sent to the mirror server, which the mirror server is sending back to us
WITHOUT_CLASSIFICATION	// Skip the blank line with crlf dividing headers and body
WITHOUT_CLASSIFICATION	// Skip the blank line with crlf dividing headers and body
WITHOUT_CLASSIFICATION	// Check method, path and query sent
WITHOUT_CLASSIFICATION	// Check method, path and query sent
WITHOUT_CLASSIFICATION	// Check method
WITHOUT_CLASSIFICATION	// Check method
WITHOUT_CLASSIFICATION	// Check that the query string is empty
WITHOUT_CLASSIFICATION	// No body should have been sent
WITHOUT_CLASSIFICATION	// No body should have been sent
WITHOUT_CLASSIFICATION	// Check the Request URI sent to the mirror server, and // sent back by the mirror server
WITHOUT_CLASSIFICATION	// We should have a query string part
WITHOUT_CLASSIFICATION	// We should not have a query string part
WITHOUT_CLASSIFICATION	// Check path
WITHOUT_CLASSIFICATION	// Check query
WITHOUT_CLASSIFICATION	// Is it only the parameter values which are encoded in the specified // content encoding, the rest of the query is encoded in UTF-8 // Therefore we compare the whole query using UTF-8
WITHOUT_CLASSIFICATION	// Find the data sent to the mirror server, which the mirror server is sending back to us // We assume the headers are in ISO_8859_1, and the body can be in any content encoding.
WITHOUT_CLASSIFICATION	// Find the data sent to the mirror server, which the mirror server is sending back to us // We assume the headers are in ISO_8859_1, and the body can be in any content encoding. // Therefore we get the data sent in ISO_8859_1, to be able to determine the end of the // header part, and then we just construct a byte array to hold the body part, not taking // encoding of the body into consideration, because it can contain file data, which is // sent as raw byte data
WITHOUT_CLASSIFICATION	// No divider was found
WITHOUT_CLASSIFICATION	// Set the form data
WITHOUT_CLASSIFICATION	// TODO - charset?
WITHOUT_CLASSIFICATION	// TODO - charset?
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// Join the two multiparts
WITHOUT_CLASSIFICATION	// The encoding used for http headers and control information
WITHOUT_CLASSIFICATION	// replace all backslash with double backslash
WITHOUT_CLASSIFICATION	// The value is in the first group, group 0 is the whole match
WITHOUT_CLASSIFICATION	// The headers and body are divided by a blank line
WITHOUT_CLASSIFICATION	// Header may contain ;charset= , regexp extracts it so computed boundary is wrong
WITHOUT_CLASSIFICATION	// String domain = "localhost";
WITHOUT_CLASSIFICATION	// Set the file upload data
WITHOUT_CLASSIFICATION	// Parse arguments singly
WITHOUT_CLASSIFICATION	// Parse arguments all at once
WITHOUT_CLASSIFICATION	// test cases for making Url, and exercise method // addArgument(String name,String value,String metadata)
WITHOUT_CLASSIFICATION	// test cases for making Url, and exercise method // parseArguments(String queryString)
WITHOUT_CLASSIFICATION	// Ignore empty file specs
WITHOUT_CLASSIFICATION	// Ignore trailing empty spec
WITHOUT_CLASSIFICATION	// Ignore leading empty spec
WITHOUT_CLASSIFICATION	// Show that can bypass encoding:
WITHOUT_CLASSIFICATION	// The sample does not use a valid encoding
WITHOUT_CLASSIFICATION	// by default, name/value are encoded on fetch 
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// Try a real encoded argument
WITHOUT_CLASSIFICATION	// Trailing file
WITHOUT_CLASSIFICATION	// Trailing directory
WITHOUT_CLASSIFICATION	// file exclf inclf exclp inclp
WITHOUT_CLASSIFICATION	// odd chars
WITHOUT_CLASSIFICATION	// invalid
WITHOUT_CLASSIFICATION	// '12345'
WITHOUT_CLASSIFICATION	// Check illegal array lengths
WITHOUT_CLASSIFICATION	// current default language properties file
WITHOUT_CLASSIFICATION	// messages.properties
WITHOUT_CLASSIFICATION	// Read resource into ResourceBundle and store in List
WITHOUT_CLASSIFICATION	// Read resource file saving the keys
WITHOUT_CLASSIFICATION	// Only relevant for messages
WITHOUT_CLASSIFICATION	// Store the key
WITHOUT_CLASSIFICATION	// Helper method to construct resource name
WITHOUT_CLASSIFICATION	// check that there aren't any extra entries
WITHOUT_CLASSIFICATION	/*     * perform the checks on the resources     *      */
WITHOUT_CLASSIFICATION	// holds keys from file
WITHOUT_CLASSIFICATION	// Look for duplicate keys in the file
WITHOUT_CLASSIFICATION	// Must be the default resource file
WITHOUT_CLASSIFICATION	// Check all the keys are in the default props file
WITHOUT_CLASSIFICATION	// Also Check key is in default
WITHOUT_CLASSIFICATION	// Better error than NPE
WITHOUT_CLASSIFICATION	// Fix up Windows paths
WITHOUT_CLASSIFICATION	/*     * Use a suite to ensure that the default is done first    */
WITHOUT_CLASSIFICATION	// load the default resource
WITHOUT_CLASSIFICATION	// Don't try to check the default language
WITHOUT_CLASSIFICATION	// e.g. "/org/apache/jmeter/resources/messages"
WITHOUT_CLASSIFICATION	// Check that calls to getResString use a valid property key name
WITHOUT_CLASSIFICATION	// leading comment
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// \u00e7 = LATIN SMALL LETTER C WITH CEDILLA // \u00e9 = LATIN SMALL LETTER E WITH ACUTE
WITHOUT_CLASSIFICATION	// Change the original back again
WITHOUT_CLASSIFICATION	// a and b should be equal
WITHOUT_CLASSIFICATION	// a and b should not be equal
WITHOUT_CLASSIFICATION	// Needs to be greater than the minimum to allow for boundary errors
WITHOUT_CLASSIFICATION	// Needs to be greater than the minimum to allow for boundary errors
WITHOUT_CLASSIFICATION	// Re-increment
WITHOUT_CLASSIFICATION	// Re-increment
WITHOUT_CLASSIFICATION	// N.B. This needs to divert the log for SampleResult
WITHOUT_CLASSIFICATION	// temp test case for exploring settings
WITHOUT_CLASSIFICATION	// Don't use nanoThread
WITHOUT_CLASSIFICATION	// This test tries to emulate a http sample, with two // subsamples, representing images that are downloaded for the // page representing the first sample.
WITHOUT_CLASSIFICATION	// Sample that will get two sub results, simulates a web page load 
WITHOUT_CLASSIFICATION	// Sample with no sub results, simulates an image download
WITHOUT_CLASSIFICATION	// Sample with no sub results, simulates an image download 
WITHOUT_CLASSIFICATION	// Now add the subsamples to the sample
WITHOUT_CLASSIFICATION	// TimeMillis has granularity of 10-20
WITHOUT_CLASSIFICATION	// Check that calculator gets the correct statistics from the sample
WITHOUT_CLASSIFICATION	// Allow for some margin of error // Check that the throughput uses the time elapsed for the sub results
WITHOUT_CLASSIFICATION	// check default
WITHOUT_CLASSIFICATION	// check null changes nothing
WITHOUT_CLASSIFICATION	// check no charset
WITHOUT_CLASSIFICATION	// Check unquoted charset
WITHOUT_CLASSIFICATION	// Check quoted charset
WITHOUT_CLASSIFICATION	// This is what JOrphanUtils.split() does
WITHOUT_CLASSIFICATION	// These tests should agree with those for JOrphanUtils.split() as far as possible
WITHOUT_CLASSIFICATION	// \u00e7 = LATIN SMALL LETTER C WITH CEDILLA // \u00e9 = LATIN SMALL LETTER E WITH ACUTE
WITHOUT_CLASSIFICATION	// Blank line
WITHOUT_CLASSIFICATION	// Empty strings at EOF
WITHOUT_CLASSIFICATION	// testLoadAndSave test files
WITHOUT_CLASSIFICATION	// GraphAccumVisualizer obsolete, BSFSamplerGui now a TestBean // GraphAccumVisualizer obsolete, BSFSamplerGui now a TestBean // GraphAccumVisualizer now obsolete // CTT changed to use intProp for mode
WITHOUT_CLASSIFICATION	// Test files for testLoad; output will generally be different in size and line count
WITHOUT_CLASSIFICATION	// Did a test fail?
WITHOUT_CLASSIFICATION	// Make sure all the data is flushed out
WITHOUT_CLASSIFICATION	// Test non-empty parameters
WITHOUT_CLASSIFICATION	// Unrecognised files are ignored
WITHOUT_CLASSIFICATION	// Does not open file
WITHOUT_CLASSIFICATION	// Does not open file
WITHOUT_CLASSIFICATION	// Re-read 1st line
WITHOUT_CLASSIFICATION	// Re-read 1st line
WITHOUT_CLASSIFICATION	// should not be able to write to it ...
WITHOUT_CLASSIFICATION	// does not remove the entry
WITHOUT_CLASSIFICATION	// removes all entries
WITHOUT_CLASSIFICATION	// test code, intentional
WITHOUT_CLASSIFICATION	// Check "Undefined" does not become a "reserved word":
WITHOUT_CLASSIFICATION	// errorDetected()
WITHOUT_CLASSIFICATION	// errorDetected()
WITHOUT_CLASSIFICATION	// Programming error. Don't continue.
WITHOUT_CLASSIFICATION	// Check that all keys in the bundle are also in the default bundle:
WITHOUT_CLASSIFICATION	// Will throw MissingResourceException if key is not there.
WITHOUT_CLASSIFICATION	// Check that all necessary keys are there:
WITHOUT_CLASSIFICATION	// displayName is always mandatory:
WITHOUT_CLASSIFICATION	// Skip the rest of this test for alpha/experimental beans:
WITHOUT_CLASSIFICATION	// Check for property- and group-related texts:
WITHOUT_CLASSIFICATION	// Skip non-editable properties, that is: // Ignore hidden, read-only, and write-only properties
WITHOUT_CLASSIFICATION	// Ignore TestElement properties which don't have an explicit // editor:
WITHOUT_CLASSIFICATION	// Done -- we're working with an editable property.
WITHOUT_CLASSIFICATION	//throw new Error("No default bundle for class " + className);
WITHOUT_CLASSIFICATION	// String sampleLog = "C:/eclipse3/workspace/jmeter-21/bin/testfiles/sample_log1.jtl";
WITHOUT_CLASSIFICATION	// String sampleLog = "C:/eclipse3/workspace/jmeter-21/bin/testfiles/sample_log1.jtl";
WITHOUT_CLASSIFICATION	// tweak.
WITHOUT_CLASSIFICATION	// tweak.
WITHOUT_CLASSIFICATION	// Test needs to run in this package in order to give access to AbstractTestElement.addProperty() 
WITHOUT_CLASSIFICATION	// This test should work whether or not all Nulls are equal
WITHOUT_CLASSIFICATION	// do not check hashcodes; unequal objects may have equal hashcodes
WITHOUT_CLASSIFICATION	// Give access to the method for test code
WITHOUT_CLASSIFICATION	// Give access to the method for test code
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	//p.add(makeButtonPanel(), BorderLayout.SOUTH);
WITHOUT_CLASSIFICATION	// Assume this thread only // 1 per second // Should delay for 1 second // 1 per milli-second // Should delay for 1 milli-second
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// 10 per second // Should delay for 1 second // 10 per milli-second // Should delay for 1 milli-second
WITHOUT_CLASSIFICATION	// 1000 per milli-second // Should delay for 1 milli-second
WITHOUT_CLASSIFICATION	// Not sure we can test anything else here
WITHOUT_CLASSIFICATION	// Use old style
WITHOUT_CLASSIFICATION	// probably needed to avoid NPEs with GUIs
WITHOUT_CLASSIFICATION	// tree1.add("a3");
WITHOUT_CLASSIFICATION	// No duplicates when adding
WITHOUT_CLASSIFICATION	// add duplicates
WITHOUT_CLASSIFICATION	// as above, but with aggregate sample instead
WITHOUT_CLASSIFICATION	// add duplicates as per bug
WITHOUT_CLASSIFICATION	//assertEquals("t2",f2.invoke());
WITHOUT_CLASSIFICATION	//assertEquals("1a:aa.",f1a.invoke());
WITHOUT_CLASSIFICATION	// can't call invoke using super class
WITHOUT_CLASSIFICATION	// OK (currently) to invoke using sub-class 
WITHOUT_CLASSIFICATION	// Args will be provided later
WITHOUT_CLASSIFICATION	// should use original object
WITHOUT_CLASSIFICATION	// Check how Class definition behaves
WITHOUT_CLASSIFICATION	// logprop("java.class.path");
WITHOUT_CLASSIFICATION	// don't call isHeadless() here, as it has a side effect. // --
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// Send different event wether we are merging a test plan into another test plan, // or loading a testplan from scratch
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	//Ignored
WITHOUT_CLASSIFICATION	//Ignored
WITHOUT_CLASSIFICATION	// private static final String ROOTDN = "rootDn"; // private static final String TEST = "tesT"; // private static String testValue="NNNN";
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// Test ignore trailing split characters // Ignore adjacent delimiters
WITHOUT_CLASSIFICATION	// Tests for split(String,String,boolean)
WITHOUT_CLASSIFICATION	// Test leading split characters
WITHOUT_CLASSIFICATION	// Test leading split characters
WITHOUT_CLASSIFICATION	// Empty string
WITHOUT_CLASSIFICATION	// Tests for split(String,String,String)
WITHOUT_CLASSIFICATION	// Empty default
WITHOUT_CLASSIFICATION	// Empty delimiter
WITHOUT_CLASSIFICATION	// Multiple delimiters
WITHOUT_CLASSIFICATION	// Delimiter same as splitter
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// Node node = tidy.parseDOM(new // ByteArrayInputStream(response.getResponseData()), null);
WITHOUT_CLASSIFICATION	// Values for TEST_FIELD // N.B. we cannot change the text value as it is in test plans // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// In case parse fails // $NON-NLS-1$ // In case parse fails // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // Make it easier to enter a Tab // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// The Loop Controller panel can be displayed standalone or inside // another panel. For standalone, we want to display the TITLE, NAME, // etc. (everything). However, if we want to display it within another // panel, we just display the Loop Count fields (not the TITLE and // NAME).
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // don't set empty to keep regexp // regexpField.setText(""); // $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// This 'other value' regex is deliberately weak, even accepting an empty string, to be useful when reporting malformed data. // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// Condition LABEL // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// If the -j  or -l flag is set to LAST or LAST.log|LAST.jtl, then the last loaded file name is used to // generate the log file name by removing .JMX and replacing it with .log|.jtl
WITHOUT_CLASSIFICATION	// If a table cell is being edited, we should accept the current value // and stop the editing before adding a new row.
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ i.e. boolean saveXXX() // $NON-NLS-1$ i.e. void setXXX(boolean) // $NON-NLS-1$ e.g. save_XXX property
WITHOUT_CLASSIFICATION	// Keep the '\' unless it is one of the escapable chars '$' ',' or '\' // N.B. This method is used to parse function parameters, so must treat ',' as special
WITHOUT_CLASSIFICATION	// en // fr // de // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // ja // zh_CN // zh_TW
WITHOUT_CLASSIFICATION	//@GuardedBy("LOCK") // Keep track of how many instances are active
WITHOUT_CLASSIFICATION	// sampleOccurred is called from multiple threads; not safe to write from multiple threads. // also decouples the file IO from sample generation
WITHOUT_CLASSIFICATION	// File name sequence number //@GuardedBy("LOCK")
WITHOUT_CLASSIFICATION	// Instance fields are constructed by the client when the instance is create in the test plan // and the field values are then transferred to the server copy by RMI serialisation/deserialisation
WITHOUT_CLASSIFICATION	// process special keys // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// If there are some recent files, we must make the separator visisble // The separator is the last item in the list
WITHOUT_CLASSIFICATION	// put the gui object back // to the way it was.
WITHOUT_CLASSIFICATION	// Make sure decoding // follows input file
WITHOUT_CLASSIFICATION	// Save (Selection) As // Save TestPlan As // Save
WITHOUT_CLASSIFICATION	// Y // Y // Y // Y // sp // M // M // / // D // D // / // H // H // : // M // M // : // S // S // end
WITHOUT_CLASSIFICATION	//OK // TODO ??
WITHOUT_CLASSIFICATION	// Support original property name // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-2$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-2$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// allow for windows / chars in filename // $NON-NLS-1$ // $NON-NLS-2$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-2$
WITHOUT_CLASSIFICATION	// updateMainMenu(((JMeterGUIComponent) // getCurrentNode().getUserObject()).createPopupMenu());
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// A HTTP POST request, multipart/form-data, simple values, // with \r\n as end of line, which is according to spec, // and with more headers in each multipart
WITHOUT_CLASSIFICATION	// two jars same version // two jars same version
WITHOUT_CLASSIFICATION	// Test plan with OnlyOnceController inside inner loop // Set up the test plan
WITHOUT_CLASSIFICATION	// The following used to be jacks_password, but the Arguments class uses // HashMap for which the order is not defined.
WITHOUT_CLASSIFICATION	// myRow = f.nextRow(); // assertEquals(3,myRow); // assertEquals(0,f.getNextRow());
WITHOUT_CLASSIFICATION	// Is this a work in progress ? // No, // not // a // work // in // progress // ...
WITHOUT_CLASSIFICATION	// Assumes some kind of list is use // If not using a list that retains the order, then the asserts would need to change
WITHOUT_CLASSIFICATION	// Test sending data as UTF-8, with values that will change when urlencoded, and where // we tell the sampler to urlencode the parameter value
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// pick up headers if failed to execute the request // httpMethod can be null if method is unexpected
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// Resource keys cannot contain spaces, and are forced to lower case // $NON-NLS-1$ // $NON-NLS-2$
WITHOUT_CLASSIFICATION	// Nulls cannot be written using PrettyPrintWriter - they cause an NPE // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// default is 1 // default is 0
WITHOUT_CLASSIFICATION	// N.B. JVMs other than Sun may return different instances each time // so we cache the value here (and avoid having to fetch it every time)
WITHOUT_CLASSIFICATION	// Programming error. Don't // continue.
WITHOUT_CLASSIFICATION	//+ JMX attributes - do not change // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ //- JMX
WITHOUT_CLASSIFICATION	// Note: this is only used to implement TestIterationListener#testIterationStart // Since this is a frequent event, it makes sense to create the list once rather than scanning each time // The memory used will be released when the thread finishes
WITHOUT_CLASSIFICATION	// We only check the length of the result. Comparing the // actual result (out.toByteArray==original) will usually // fail, because the order of the properties within each // test element may change. Comparing the lengths should be // enough to detect most problem cases...
WITHOUT_CLASSIFICATION	// Assume this thread only // 1 per second // Initialise
WITHOUT_CLASSIFICATION	// Test ignore trailing split characters // Ignore adjacent delimiters
WITHOUT_CLASSIFICATION	// write a OK reponse to browser, to engage SSL exchange // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// We use the page encoding where the form resides, as the // default encoding for the form
WITHOUT_CLASSIFICATION	//+ action names // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// Set up list of potential targets and // enable listener
WITHOUT_CLASSIFICATION	// .equals caused // NPE
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// record headers size to allow HTTPSampleResult.getBytes() with different options // $NON-NLS-1$ $NON-NLS-2$ // add 2 for a '\r\n' at end of headers (before data) 
WITHOUT_CLASSIFICATION	// a well-bahaved browser is supposed to send 'Connection: close' // with the last request to an HTTP server. Instead, most browsers // leave it to the server to close the connection after their // timeout period. Leave it to the JMeter user to decide.
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// one space for blank header // $NON-NLS-1$  // one space for blank header  // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// a well-behaved browser is supposed to send 'Connection: close' // with the last request to an HTTP server. Instead, most browsers // leave it to the server to close the connection after their // timeout period. Leave it to the JMeter user to decide.
WITHOUT_CLASSIFICATION	// Process Apache HttpClient parameters file // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// In a post request which is not multipart, we only support // parameters, no file upload is allowed
WITHOUT_CLASSIFICATION	// Embedded URLs must match this RE (if provided) // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// Mark Walsh 2002-08-03, modified to also parse a parameter name value // string, where string contains only the parameter name and no equal sign.
WITHOUT_CLASSIFICATION	// Check if the header manager had a content type header // This allows the user to specify his own content-type for a PUT request
WITHOUT_CLASSIFICATION	// If the Multipart is repeatable, we can send it first to // our own stream, without the actual file content, so we can return it
WITHOUT_CLASSIFICATION	// headerManager was set, so let's set the connection // to use it.
WITHOUT_CLASSIFICATION	// we call parse with 1 to get only one. // this also means if we change the implementation // to use 2, it would use every other entry and // so on. Not that it is really useful, but a // person could use it that way if they have a // huge gigabyte log file and they only want to // use a quarter of the entries.
WITHOUT_CLASSIFICATION	// the document should only have one service node // if it doesn't it may not work!
WITHOUT_CLASSIFICATION	// new WSDLHelper("http://localhost/WSTest/WSTest.asmx?WSDL"); // new WSDLHelper("http://localhost/AxisWSDL.xml"); //new WSDLHelper("http://localhost:8080/WSMyUpper.wsdl"); //new WSDLHelper("http://localhost:8080/test.wsdl");
WITHOUT_CLASSIFICATION	// read one line at a time using // BufferedReader
WITHOUT_CLASSIFICATION	// There's little point saving the manager between invocations // as we need to reset most of the beans anyway
WITHOUT_CLASSIFICATION	// / Only do the calculation if // it is needed
WITHOUT_CLASSIFICATION	// A CallableStatement can return more than 1 ResultSets // plus a number of update counts.
WITHOUT_CLASSIFICATION	//++ Do not change these strings; they are used in JMX files to record the button settings // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// Timeouts not active // How much left
WITHOUT_CLASSIFICATION	// needs to be accessible from test code // Only contains LDAPArgument entries
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// The default is false, so we can remove the property to simplify JMX files // This also allows HTTPDefaults to work for this checkbox
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	//++ For TestBean implementations only // passed to file or script
WITHOUT_CLASSIFICATION	// put a warning if tika-app.jar missing (or some dependencies in only tika-core|parsers packages are using) // $NON-NLS-1$ $NON-NLS-2$ 
WITHOUT_CLASSIFICATION	// Resource keys cannot contain spaces, and are forced to lower case // $NON-NLS-1$ // $NON-NLS-2$
WITHOUT_CLASSIFICATION	// Can occur at run-time // could be caused by the bsh Exceptions: // EvalError, ParseException or TargetError
WITHOUT_CLASSIFICATION	// errorLogging and successOnlyLogging are mutually exclusive // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// A TestBean is a Java Bean. Just define some properties and they will // automagically show up in the GUI. // A String property:
WITHOUT_CLASSIFICATION	// Only try to format if there is a // number
WITHOUT_CLASSIFICATION	// Requires Java 7 // $NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON_NLS-1$ // don't match the empty category
WITHOUT_CLASSIFICATION	// If a table cell is being edited, we should accept the current // value and stop the editing before adding a new row.
WITHOUT_CLASSIFICATION	// Read the header part, we will be looking for a content-length // header, so we know how much we should read. // We assume headers are in ISO_8859_1 // If we do not find such a header, we will just have to read until // we have to block to read more, until we support chunked transfer
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	// Request validation // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // No point trying these
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	//+ JMX file attributes // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// this is not the result of a redirect // so break the chain
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-1$  // $NON-NLS-2$
WITHOUT_CLASSIFICATION	//+ JMX attributes - do not change the values // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// Did sample succeed?
WITHOUT_CLASSIFICATION	// Requires JavaMail 1.4.2+
WITHOUT_CLASSIFICATION	// Requires JavaMail 1.4.2+
WITHOUT_CLASSIFICATION	// Requires JavaMail 1.4.2+
WITHOUT_CLASSIFICATION	// ignored
WITHOUT_CLASSIFICATION	// ignored
WITHOUT_CLASSIFICATION	// ignored
WITHOUT_CLASSIFICATION	// ignored
WITHOUT_CLASSIFICATION	// ignored
WITHOUT_CLASSIFICATION	// ignored
WITHOUT_CLASSIFICATION	// ignored
WITHOUT_CLASSIFICATION	// ignored
WITHOUT_CLASSIFICATION	// ignored
WITHOUT_CLASSIFICATION	// ignored
WITHOUT_CLASSIFICATION	// ignored
WITHOUT_CLASSIFICATION	// ignored
WITHOUT_CLASSIFICATION	// ignored
WITHOUT_CLASSIFICATION	// ignored
WITHOUT_CLASSIFICATION	// ignored
WITHOUT_CLASSIFICATION	// ignored
WITHOUT_CLASSIFICATION	// ignored
WITHOUT_CLASSIFICATION	// ignored
WITHOUT_CLASSIFICATION	// No need to log normally, as we set the status // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// No need to log normally, as we set the status // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// not been set by any child samples
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// throws ME
WITHOUT_CLASSIFICATION	// throws ME
WITHOUT_CLASSIFICATION	/*tfMailFrom.setEnabled(false);            tfMailTo.setEnabled(false);            tfMailToCC.setEnabled(false);            tfMailToBCC.setEnabled(false);            tfSubject.setEnabled(false);*/
WITHOUT_CLASSIFICATION	//++JMX attribute names - do not change the values! // These were moved from SMTPSampler, which is why the prefix is still SMTSampler // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ //--JMX attribute names
WITHOUT_CLASSIFICATION	// For completeness
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-1$ // default is not in range of a byte
WITHOUT_CLASSIFICATION	// Programming error: // bail out.
WITHOUT_CLASSIFICATION	// If we are disabling the Edit-->Remove menu item and the // Edit-->Add menu item is disabled, then we also need to disable // the Edit menu. // The Java Look and Feel Guidelines say to disable a menu if all // menu items are disabled.
WITHOUT_CLASSIFICATION	// Set default SAVE menu item to disabled since the default node that // is selected is ROOT, which does not allow items to be inserted.
WITHOUT_CLASSIFICATION	// we add the entry
WITHOUT_CLASSIFICATION	// we should make this configurable eventually
WITHOUT_CLASSIFICATION	// we clean up the ResultCollector to make sure there's // no slow leaks
WITHOUT_CLASSIFICATION	// just like the aggregate listener, we use the sample label to represent // a row. in this case, we use it as a key.
WITHOUT_CLASSIFICATION	// Check that optional args work woth long options
WITHOUT_CLASSIFICATION	// Separate argument
WITHOUT_CLASSIFICATION	// assume default charset is OK here //      <apache-bsf.version>2.4.0</apache-bsf.version>
WITHOUT_CLASSIFICATION	// Used to be 'dábale', but caused trouble on Gump. Reasons // unknown.
WITHOUT_CLASSIFICATION	// This would be done by the run command
WITHOUT_CLASSIFICATION	// result.setResponseData - not set
WITHOUT_CLASSIFICATION	// Expected results established using the DDA // algorithm (see // http://www.siggraph.org/education/materials/HyperGraph/scanline/outprims/drawline.htm): // 0/1 vs. 1/1 -> 0 is // closer to 33.33 // 0/2 vs. 1/2 -> 50.0 is closer to // 33.33 // 1/3 vs. 2/3 -> 33.33 is // closer to 33.33 // 1/4 vs. 2/4 -> 25.0 is closer to // 33.33 // 1/5 vs. 2/5 -> 40.0 is closer to // 33.33 // 2/6 vs. 3/6 -> 33.33 is // closer to 33.33
WITHOUT_CLASSIFICATION	/*             * GenericController controller = new GenericController();             * GenericController sub_1 = new GenericController();             * sub_1.addTestElement(new IfController("10<100"));             * sub_1.addTestElement(new IfController("true==false"));             * controller.addTestElement(sub_1); controller.addTestElement(new             * IfController("false==false"));             *              * IfController sub_2 = new IfController(); sub_2.setCondition( "10<10000");             * GenericController sub_3 = new GenericController();             *              * sub_2.addTestElement(new IfController( " \"a\".equals(\"a\")" ) );             * sub_3.addTestElement(new IfController("2>100"));             * sub_3.addTestElement(new IfController("false==true"));             * sub_2.addTestElement(sub_3); sub_2.addTestElement(new             * IfController("2==3")); controller.addTestElement(sub_2);             */
WITHOUT_CLASSIFICATION	// Get next sample and its name
WITHOUT_CLASSIFICATION	// Match by name
WITHOUT_CLASSIFICATION	// Match by name
WITHOUT_CLASSIFICATION	/*         *  Simple test with single Selection controller         *  Generic Controller         *  + Sampler "before"         *  + Switch Controller         *  + + Sampler "zero"         *  + + Sampler "one"         *  + + Sampler "two"         *  + + Sampler "three"         *  + Sampler "after"         */
WITHOUT_CLASSIFICATION	/*         * Generic Controller         * - before         * - While Controller ${VAR}         * - - one         * - - two         * - - Simple Controller         * - - - three         * - - - four         * - after         */
WITHOUT_CLASSIFICATION	// OnlyOnce samples
WITHOUT_CLASSIFICATION	// OnlyOnce samples
WITHOUT_CLASSIFICATION	// Outer sample
WITHOUT_CLASSIFICATION	// Sample in inner loop
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	// The outer sample and the inner loop samples
WITHOUT_CLASSIFICATION	// OnlyOnce inside inner loop
WITHOUT_CLASSIFICATION	// Test to show current problem with InterleaveController // I am not sure if the expected order of the samples // below are correct, because I am not sure if it is // properly defined how the InterleaveController and // OnlyOnceController should function.
WITHOUT_CLASSIFICATION	// N.B. Backslashes are removed before dollar, comma and backslash
WITHOUT_CLASSIFICATION	//log.debug("domain property = " + element.getProperty("domain"));
WITHOUT_CLASSIFICATION	// Check old values don't hang around: // fewer matches
WITHOUT_CLASSIFICATION	// same as Parent
WITHOUT_CLASSIFICATION	// Create the CSVRead function and set its parameters.
WITHOUT_CLASSIFICATION	// Check init file functioning
WITHOUT_CLASSIFICATION	// Restarts
WITHOUT_CLASSIFICATION	// col 1, line 1, *A
WITHOUT_CLASSIFICATION	// col2, line 1, *B
WITHOUT_CLASSIFICATION	// Check blank lines are treated as EOF
WITHOUT_CLASSIFICATION	// myRow = f.nextRow(); // assertEquals(0,myRow); // assertEquals(1,f.getNextRow());
WITHOUT_CLASSIFICATION	// Use different XPath for both threads
WITHOUT_CLASSIFICATION	// wrap-round check
WITHOUT_CLASSIFICATION	// Perform a sum and check the results
WITHOUT_CLASSIFICATION	// template // match number // ALL separator
WITHOUT_CLASSIFICATION	// template // match number // ALL separator
WITHOUT_CLASSIFICATION	// template // match number // ALL separator
WITHOUT_CLASSIFICATION	// template // match number // ALL separator
WITHOUT_CLASSIFICATION	// template // match number // ALL separator
WITHOUT_CLASSIFICATION	// template // match number // ALL separator
WITHOUT_CLASSIFICATION	// template // match number // ALL separator
WITHOUT_CLASSIFICATION	// template // match number // ALL separator
WITHOUT_CLASSIFICATION	// template // match number // ALL separator
WITHOUT_CLASSIFICATION	/*     * Extract titles from component_reference.xml     */
WITHOUT_CLASSIFICATION	/*     * Test GUI elements - create the suite of tests     */
WITHOUT_CLASSIFICATION	// Skip report packages as implementation is incomplete // Skip report GUI as implementation is incomplete // No, not a work in progress ...
WITHOUT_CLASSIFICATION	/*     * Test TestElements - create the suite     */
WITHOUT_CLASSIFICATION	// Events often have this constructor
WITHOUT_CLASSIFICATION	// no luck. Ignore this class
WITHOUT_CLASSIFICATION	/*     * If not running under AllTests.java, make sure that the properties (and     * log file) are set up correctly.     *      * N.B. In order for this to work correctly, the JUnit test must be started     * in the bin directory, and all the JMeter jars (plus any others needed at     * run-time) need to be on the classpath.     *      */
WITHOUT_CLASSIFICATION	// Display actual encoding used (will differ if file.encoding is not recognised)
WITHOUT_CLASSIFICATION	// Test New cookie is returned
WITHOUT_CLASSIFICATION	// ensure policy is picked up
WITHOUT_CLASSIFICATION	// ensure policy is picked up
WITHOUT_CLASSIFICATION	// Write to the socket
WITHOUT_CLASSIFICATION	// Write to the socket
WITHOUT_CLASSIFICATION	// Write to the socket
WITHOUT_CLASSIFICATION	// Headers
WITHOUT_CLASSIFICATION	// Read the response
WITHOUT_CLASSIFICATION	// Read the response
WITHOUT_CLASSIFICATION	// Close the connection
WITHOUT_CLASSIFICATION	// The content sent
WITHOUT_CLASSIFICATION	// Write the headers, and then sleep
WITHOUT_CLASSIFICATION	// Connect to the http server, and do a simple http post with utf-8 // encoding of the body, which caused problems when reader/writer // classes were used in the HttpMirrorThread
WITHOUT_CLASSIFICATION	// The response includes the headers from the mirror server, // we want to skip those, to only keep the content mirrored. // Look for the first CRLFCRLF section
WITHOUT_CLASSIFICATION	// Can't instantiate
WITHOUT_CLASSIFICATION	// Test if can instantiate parser using property name
WITHOUT_CLASSIFICATION	// Check arguments
WITHOUT_CLASSIFICATION	// Check arguments
WITHOUT_CLASSIFICATION	// Check arguments
WITHOUT_CLASSIFICATION	// Check arguments
WITHOUT_CLASSIFICATION	// Check arguments
WITHOUT_CLASSIFICATION	// Check arguments
WITHOUT_CLASSIFICATION	// Check arguments
WITHOUT_CLASSIFICATION	// Check arguments
WITHOUT_CLASSIFICATION	// Check arguments
WITHOUT_CLASSIFICATION	// Check arguments
WITHOUT_CLASSIFICATION	// Check arguments
WITHOUT_CLASSIFICATION	// Check arguments
WITHOUT_CLASSIFICATION	// Check arguments
WITHOUT_CLASSIFICATION	// Check arguments
WITHOUT_CLASSIFICATION	// Check arguments
WITHOUT_CLASSIFICATION	// Check arguments // We should have one argument, with the value equal to the post body
WITHOUT_CLASSIFICATION	// Use null for url and contentEncoding, to simulate that HttpRequestHdr do not // know the encoding for the page
WITHOUT_CLASSIFICATION	// Use null for url and contentEncoding, to simulate that HttpRequestHdr do not // know the encoding for the page
WITHOUT_CLASSIFICATION	// When the encoding is not known, the argument will get the encoded value, and the "encode?" set to false
WITHOUT_CLASSIFICATION	// A HTTP POST request, multipart/form-data, simple values, // with \n as end of line, which should also be handled, // and with more headers in each multipart
WITHOUT_CLASSIFICATION	// Create the test file content
WITHOUT_CLASSIFICATION	// create a temporary file to make sure we always have a file to give to the PostWriter  // Whereever we are or Whatever the current path is.
WITHOUT_CLASSIFICATION	/*     * Test method for 'org.apache.jmeter.protocol.http.sampler.postWriter.sendPostData(URLConnection, HTTPSampler)'     * This method test sending a request which contains both formdata and file content     */
WITHOUT_CLASSIFICATION	// Test sending data with default encoding
WITHOUT_CLASSIFICATION	// Test sending data with default encoding
WITHOUT_CLASSIFICATION	// Test sending data with default encoding
WITHOUT_CLASSIFICATION	// Test sending data with default encoding
WITHOUT_CLASSIFICATION	// Test sending data with default encoding
WITHOUT_CLASSIFICATION	// Test sending data with default encoding
WITHOUT_CLASSIFICATION	// Test sending data as ISO-8859-1
WITHOUT_CLASSIFICATION	// Test sending data as UTF-8
WITHOUT_CLASSIFICATION	// Test sending data as UTF-8
WITHOUT_CLASSIFICATION	/*     * Test method for 'org.apache.jmeter.protocol.http.sampler.postWriter.setHeaders(URLConnection, HTTPSampler)'     */
WITHOUT_CLASSIFICATION	// Create the multiparts
WITHOUT_CLASSIFICATION	// Test sending data as UTF-8, with values that have been urlencoded
WITHOUT_CLASSIFICATION	// Test sending data as UTF-8, with values that have been urlencoded
WITHOUT_CLASSIFICATION	// Test sending data as UTF-8, with values similar to __VIEWSTATE parameter that .net uses, // with values urlencoded, but the always encode set to false for the arguments // This is how the HTTP Proxy server adds arguments to the sampler
WITHOUT_CLASSIFICATION	// Test sending data as UTF-8, where user defined variables are used // to set the value for form data
WITHOUT_CLASSIFICATION	// Test sending data as UTF-8, where user defined variables are used // to set the value for form data
WITHOUT_CLASSIFICATION	// Check URL
WITHOUT_CLASSIFICATION	// Check URL
WITHOUT_CLASSIFICATION	// Check URL
WITHOUT_CLASSIFICATION	// Check URL
WITHOUT_CLASSIFICATION	// Check request headers
WITHOUT_CLASSIFICATION	// Find the data sent to the mirror server, which the mirror server is sending back to us
WITHOUT_CLASSIFICATION	// Check post body which was sent to the mirror server, and // sent back by the mirror server
WITHOUT_CLASSIFICATION	// Check post body which was sent to the mirror server, and // sent back by the mirror server
WITHOUT_CLASSIFICATION	// Check method, path and query sent
WITHOUT_CLASSIFICATION	// Cannot check the query string of the result, because the mirror server // replies without including query string in URL
WITHOUT_CLASSIFICATION	// Show that can bypass encoding:
WITHOUT_CLASSIFICATION	// set the required variables
WITHOUT_CLASSIFICATION	// test invalid byte arrays
WITHOUT_CLASSIFICATION	// Ensure properties files don't use special characters
WITHOUT_CLASSIFICATION	/*                     * Now check for invalid message format: if string contains {0}                     * and ' there may be a problem, so do a format with dummy                     * parameters and check if there is a { in the output. A bit                     * crude, but should be enough for now.                     */
WITHOUT_CLASSIFICATION	// Original and clone should be equal
WITHOUT_CLASSIFICATION	// Change the original
WITHOUT_CLASSIFICATION	// Check sample increments OK
WITHOUT_CLASSIFICATION	// Check sample increments OK
WITHOUT_CLASSIFICATION	// Check sample increments OK
WITHOUT_CLASSIFICATION	// Check sample increments OK
WITHOUT_CLASSIFICATION	/*             * Parent elapsed total should be no smaller than the sum of the individual samples.             * It may be greater by the timer granularity.             */
WITHOUT_CLASSIFICATION	// Test files for testLoadAndSave; output will generally be different in size but same number of lines
WITHOUT_CLASSIFICATION	// Note this test will fail if a property is added or // removed to any of the components used in the test // files. The way to solve this is to appropriately change // the test file.
WITHOUT_CLASSIFICATION	// test code, intentional
WITHOUT_CLASSIFICATION	// test code, intentional
WITHOUT_CLASSIFICATION	// test code, intentional
WITHOUT_CLASSIFICATION	//        p.add(makeMainPanel(), BorderLayout.CENTER); // Force a minimum table height of 70 pixels
WITHOUT_CLASSIFICATION	// Check reflexive
WITHOUT_CLASSIFICATION	// This is not a requirement
WITHOUT_CLASSIFICATION	// This is not a requirement
WITHOUT_CLASSIFICATION	//assertEquals("t1",f1.invoke());
WITHOUT_CLASSIFICATION	//assertEquals("1a:aa.",f1.invoke());// N.B. returns different result from before
WITHOUT_CLASSIFICATION	// ++ // GUI tests throw the error // testArgumentCreation(org.apache.jmeter.config.gui.ArgumentsPanel$Test)java.lang.NoClassDefFoundError // at java.lang.Class.forName0(Native Method) // at java.lang.Class.forName(Class.java:141) // at // java.awt.GraphicsEnvironment.getLocalGraphicsEnvironment(GraphicsEnvironment.java:62) // // Try to find out why this is ...
WITHOUT_CLASSIFICATION	/*     * Externally callable suite() method for use by JUnit Allows tests to be     * run directly under JUnit, rather than using the startup code in the rest     * of the module. No parameters can be passed in, so it is less flexible.     */
WITHOUT_CLASSIFICATION	/*                     * TestSuite only finds testXXX() methods, and does not look                     * for suite() methods.                     *                      * To provide more compatibilty with stand-alone tests,                     * where JUnit does look for a suite() method, check for it                     * first here.                     *                      */
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$ // modal dialog box
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ // return unknown action names for display error msg
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	// Set up some objects for the script to play with //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ // Previously mis-spelt as theadName //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	// for omitted file names //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	// desc.add("Use fully qualified host name: TRUE/FALSE (Default FALSE)"); //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	// Names of JUnit3 methods //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	// Leave header as is // headerBuf.append(conn.getHeaderField(0).substring(0, 8)); // headerBuf.append(" "); // headerBuf.append(conn.getResponseCode()); // headerBuf.append(" "); // headerBuf.append(conn.getResponseMessage()); //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	// Otherwise, the response is scanned for these strings //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ $NON-NLS-2$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ $NON-NLS-2$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ $NON-NLS-2$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ $NON-NLS-2$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	// Allow access to context and variables directly //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$  //$NON-NLS-2$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-2$  //$NON-NLS-1$
WITHOUT_CLASSIFICATION	// can be specified in jmeter.properties //$NON-NLS-1$
WITHOUT_CLASSIFICATION	// These names must agree case-wise with the variable and property names //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	// can be specified in jmeter.properties //$NON-NLS-1$
WITHOUT_CLASSIFICATION	// Add variables for access to context and variables //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	// Identifiers //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ default: normal
WITHOUT_CLASSIFICATION	//$NON-NLS-1$  // Test can't have a duration more than 2^31 secs (cast from long to int)
WITHOUT_CLASSIFICATION	// default: sans serif //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	// default: normal //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	// default: sans serif //$NON-NLS-1$
WITHOUT_CLASSIFICATION	// default: 16 //$NON-NLS-1$
WITHOUT_CLASSIFICATION	// default: sans serif //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ $NON-NLS-2$ //$NON-NLS-1$ $NON-NLS-2$ //$NON-NLS-1$ $NON-NLS-2$ //$NON-NLS-1$ $NON-NLS-2$ //$NON-NLS-1$ $NON-NLS-2$ //$NON-NLS-1$ $NON-NLS-2$ //$NON-NLS-1$ $NON-NLS-2$ //$NON-NLS-1$ $NON-NLS-2$ //$NON-NLS-1$ $NON-NLS-2$ //$NON-NLS-1$ $NON-NLS-2$ //$NON-NLS-1$ $NON-NLS-2$
WITHOUT_CLASSIFICATION	// Change Cancel label to Close //$NON-NLS-1$
WITHOUT_CLASSIFICATION	// Default for writing//$NON-NLS-1$
WITHOUT_CLASSIFICATION	// Only encode strings if outVersion = 1.0 //$NON-NLS-1$
WITHOUT_CLASSIFICATION	// Element tags. Must be unique. Keep sorted. //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//+ JMX field names - do not change values //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	// regex //$NON-NLS-1$ // template //$NON-NLS-1$ // which match //$NON-NLS-1$ // between text //$NON-NLS-1$ // default text //$NON-NLS-1$ // output variable name //$NON-NLS-1$ // input variable //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ // Previously mis-spelt as theadName //$NON-NLS-1$ //$NON-NLS-1$ (may be null) //$NON-NLS-1$ (may be null) //$NON-NLS-1$
WITHOUT_CLASSIFICATION	// Function name //$NON-NLS-1$
WITHOUT_CLASSIFICATION	// Process __CSVRead(filename,*ALIAS) //$NON-NLS-1$
WITHOUT_CLASSIFICATION	// if argument is 'next' - go to the next line //$NON-NLS-1$ //$NON-NLS-2$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ // We have a default
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ // $NON-NLS1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ // Previously mis-spelt as theadName //$NON-NLS-1$ //$NON-NLS-1$ (may be null) //$NON-NLS-1$ (may be null) //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	// Ensure that these are set, even if no paramters are provided //$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ // change the classname drop down
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	// Don't make these static, otherwise language change does not work //$NON-NLS-1$
WITHOUT_CLASSIFICATION	// NOTUSED Font plainText = new Font("plain", Font.PLAIN, 9); // These must not be static, otherwise Language change does not work //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$ // Check if it is form data //$NON-NLS-1$ // Get the form field name //$NON-NLS-1$
WITHOUT_CLASSIFICATION	// Check if it is a file being uploaded //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ // See TestElementPropertyConverter
WITHOUT_CLASSIFICATION	// Look for special Response Length header //$NON-NLS-1$
WITHOUT_CLASSIFICATION	// Look for special Response Length header //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ $NON-NLS-2$
WITHOUT_CLASSIFICATION	// Look for special Cookie request //$NON-NLS-1$
WITHOUT_CLASSIFICATION	// Check if we have found a content-length header //$NON-NLS-1$
WITHOUT_CLASSIFICATION	// Look for special Sleep request //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ resource name
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ resource name
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-2$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-2$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$//$NON-NLS-2$
WITHOUT_CLASSIFICATION	// Cookie //$NON-NLS-1$
WITHOUT_CLASSIFICATION	// list of parsers //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$//$NON-NLS-2$ //$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	// Obtain message formats: //$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	// independent frame to // allow it to be overlaid // by the main frame //$NON-NLS-1$
WITHOUT_CLASSIFICATION	// Needed by AbstractTestElement. // Also TestElementConverter and TestElementPropertyConverter for handling empty comments //$NON-NLS-1$ // N.B. Comments originally only applied to Test Plans, hence the name - which can now not be easily changed
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$        
WITHOUT_CLASSIFICATION	// value to return at EOF //$NON-NLS-1$ //$NON-NLS-2$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-2$
WITHOUT_CLASSIFICATION	// Add variables for access to context and variables //$NON-NLS-1$
WITHOUT_CLASSIFICATION	// default: 16 //$NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	// default: 3.0f //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ default: bottom //$NON-NLS-1$
WITHOUT_CLASSIFICATION	// default: sans serif //$NON-NLS-1$
WITHOUT_CLASSIFICATION	// default: 10 //$NON-NLS-1$
WITHOUT_CLASSIFICATION	// Tabbed results: fill table //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ $NON-NLS-2$ //$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	// Set the title for the first tab //$NON-NLS-1$ // Add the other tabs if not present // $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// Fields table //$NON-NLS-1$ //not sure needs I18N? //$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ // select last tab 
WITHOUT_CLASSIFICATION	// setup bottom tabs, first Raw, second Parsed //$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	// can be specified in jmeter.properties //$NON-NLS-1$
WITHOUT_CLASSIFICATION	// should header be saved with the data? //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	// Label // count // Mean // median // 90% // Min // Max // Error %age //$NON-NLS-1$ // Throughput //$NON-NLS-1$ // pageSize   //$NON-NLS-1$
WITHOUT_CLASSIFICATION	// default: 10 //$NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // default: bottom //$NON-NLS-1$
WITHOUT_CLASSIFICATION	// default: sans serif //$NON-NLS-1$
WITHOUT_CLASSIFICATION	// default: 10 //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// Add local system properties, if the file is found //$NON-NLS-1$
WITHOUT_CLASSIFICATION	// Add local JMeter properties, if the file is found //$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1
WITHOUT_CLASSIFICATION	//$NON-NLS-1$;
WITHOUT_CLASSIFICATION	//$NON-NLS-1$;
WITHOUT_CLASSIFICATION	// Hide Window on ESC //$NON-NLS-1$
WITHOUT_CLASSIFICATION	// Do search on Enter //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ // file_merge.setAccelerator( // KeyStroke.getKeyStroke(KeyEvent.VK_O, KeyEvent.CTRL_MASK)); // Set default SAVE menu item to disabled since the default node that // is selected is ROOT, which does not allow items to be inserted.
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ // Set default SAVE menu item to disabled since the default node that // is selected is ROOT, which does not allow items to be inserted.
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	// Search MENU //$NON-NLS-1$
WITHOUT_CLASSIFICATION	// No, must be CSV //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ (Flash Media Manifest)
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	// Attributes for TestElement and TestElementProperty // Must all be unique //$NON-NLS-1$ // Also used by PropertyConverter classes // $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//NOT USED protected   static final String TAG_URL               = "requestUrl";       //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	// samplerData attributes. Must be unique. Keep sorted by string value. // Ensure the Listener documentation is updated when new attributes are added //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	// N.B. Originally the response code was saved with the code "rs" // but retrieved with the code "rc". Changed to always use "rc", but // allow for "rs" when restoring values. //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	// Needs to be visible to test cases //$NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-1$ //$NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ // Add variables for access to context and variables
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$  //$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ // $NON-NLS1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ // Ensure variable has been provided
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	// otherwise we use "text/xml" as the default //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	// Could time this // res.sampleEnd(); // if sampleEnd() is not called, elapsed time will remain zero // TODO distinguish errors better //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ - all threads // All threads
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //-- End of names used in JMX files
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	// Package access for use by Test code //$NON-NLS-1$
WITHOUT_CLASSIFICATION	// Set the title for the first tab //$NON-NLS-1$ // Remove the other tabs if present // $NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$ $NON-NLS-2$ $NON-NLS-3$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//    public final static String CONNECTION = "MongoSourceElement.connection"; //$NON-NLS-1$ //    public final static String SOURCE = "MongoSourceElement.source"; //$NON-NLS-1$ // //    public final static String AUTO_CONNECT_RETRY = "MongoSourceElement.autoConnectRetry"; //$NON-NLS-1$ //    public final static String CONNECTIONS_PER_HOST = "MongoSourceElement.connectionsPerHost"; //$NON-NLS-1$ //    public final static String CONNECT_TIMEOUT = "MongoSourceElement.connectTimeout"; //$NON-NLS-1$ //    public final static String CONTINUE_ON_INSERT_ERROR = "MongoSourceElement.continueOnInsertError"; //$NON-NLS-1$ //    public final static String MAX_AUTO_CONNECT_RETRY_TIME = "MongoSourceElement.maxAutoConnectRetryTime"; //$NON-NLS-1$ //    public final static String MAX_WAIT_TIME = "MongoSourceElement.maxWaitTime"; //$NON-NLS-1$ //    public final static String SOCKET_TIMEOUT = "MongoSourceElement.socketTimeout"; //$NON-NLS-1$ //    public final static String SOCKET_KEEP_ALIVE = "MongoSourceElement.socketKeepAlive"; //$NON-NLS-1$ //    public final static String THREADS_ALLOWED_TO_BLOCK_MULTIPLIER = "MongoSourceElement.threadsAllowedToBlockForConnectionMultiplier"; //$NON-NLS-1$ // //    public final static String FSYNC = "MongoSourceElement.fsync"; //$NON-NLS-1$ //    public final static String SAFE = "MongoSourceElement.safe"; //$NON-NLS-1$ //    public final static String WAIT_FOR_JOURNALING = "MongoSourceElement.waitForJournaling"; //$NON-NLS-1$ //    public final static String WRITE_OPERATION_NUMBER_OF_SERVERS = "MongoSourceElement.writeOperationNumberOfServers"; //$NON-NLS-1$ //    public final static String WRITE_OPERATION_TIMEOUT = "MongoSourceElement.writeOperationTimeout"; //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	/* (non-Javadoc)     * @see org.apache.http.conn.ssl.SSLSocketFactory#createLayeredSocket(java.net.Socket, java.lang.String, int, boolean)     */
WITHOUT_CLASSIFICATION	/*     * (non-Javadoc)     *     * @see org.apache.jmeter.protocol.http.util.accesslog.LogFilter#excPattern(java.lang.String)     */
WITHOUT_CLASSIFICATION	/*     * (non-Javadoc) A new instance is created for each thread group, and the     * clone() method is then called to create copies for each thread in a     * thread group. This means that the lock object is common to a thread     * group; separate thread groups have separate locks. If this is not     * intended, the lock object could be made static.     *     * @see java.lang.Object#clone()     */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)     * @see org.apache.jmeter.visualizers.request.RequestView#setSamplerResult(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)     * @see org.apache.jmeter.visualizers.request.RequestView#getPanel()     */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)     * @see org.apache.jmeter.visualizers.request.RequestView#getLabel()     */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)     * @see org.apache.jmeter.visualizers.SamplerResultTab#clearData()     */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)     * @see org.apache.log.LogTarget#processEvent(org.apache.log.LogEvent)     */
WITHOUT_CLASSIFICATION	// This is required so that // @see org.apache.jmeter.gui.tree.JMeterTreeModel.getNodesOfType() // can find the Clearable nodes - the userObject has to implement the interface.
WITHOUT_CLASSIFICATION	// N.B. originally called clear() // @see also JMeterGUIComponent
WITHOUT_CLASSIFICATION	// For unit tests, @see TestCSVSaveService
WITHOUT_CLASSIFICATION	// @see getStaticLabel
WITHOUT_CLASSIFICATION	/* (non-Javadoc)         * @see javax.swing.JTabbedPane#setSelectedIndex(int)         */
WITHOUT_CLASSIFICATION	/*         * (non-Javadoc)         *          * @see jodd.lagarto.EmptyTagVisitor#script(jodd.lagarto.Tag,         * java.lang.CharSequence)         */
WITHOUT_CLASSIFICATION	/*         * (non-Javadoc)         *          * @see jodd.lagarto.EmptyTagVisitor#tag(jodd.lagarto.Tag)         */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)     * @see org.apache.jmeter.protocol.http.parser.HTMLParser#isReusable()     */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)     * @see org.apache.jmeter.protocol.http.parser.HTMLParser#isReusable()     */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)         * @see org.xml.sax.helpers.DefaultHandler#error(org.xml.sax.SAXParseException)         */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)         * @see org.xml.sax.helpers.DefaultHandler#fatalError(org.xml.sax.SAXParseException)         */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)     * @see org.apache.jmeter.protocol.http.sampler.HTTPSamplerBase#testEnded()     */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)     * @see org.apache.jmeter.protocol.http.sampler.HTTPSamplerBase#testEnded(java.lang.String)     */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)     * @see org.apache.jmeter.protocol.http.sampler.HTTPSamplerBase#testIterationStart(org.apache.jmeter.engine.event.LoopIterationEvent)     */
WITHOUT_CLASSIFICATION	// @see mergeFileProperties // Must be private, as the file list needs special handling // $NON-NLS-1$ // MIMETYPE is kept for backward compatibility with old test plans // $NON-NLS-1$ // FILE_NAME is kept for backward compatibility with old test plans // $NON-NLS-1$
WITHOUT_CLASSIFICATION	/* (non-Javadoc)     * @see org.apache.http.conn.ssl.SSLSocketFactory#createSocket(org.apache.http.params.HttpParams)     */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)     * @see org.apache.jmeter.visualizers.request.RequestView#setSamplerResult(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)     * @see org.apache.jmeter.visualizers.request.RequestView#getLabel()     */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)     * @see org.apache.jmeter.gui.AbstractJMeterGuiComponent#clearGui()     */
WITHOUT_CLASSIFICATION	/*     * (non-Javadoc)     *     * @see org.apache.jmeter.util.LocaleChangeListener#localeChanged(org.apache.jmeter.util.LocaleChangeEvent)     */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)     * @see java.lang.Runnable#run()     */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)     * @see org.apache.jmeter.report.engine.ReportEngine#configure(org.apache.jorphan.collections.HashTree)     */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)     * @see org.apache.jmeter.report.engine.ReportEngine#runReport()     */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)     * @see org.apache.jmeter.report.engine.ReportEngine#stopReport()     */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)     * @see org.apache.jmeter.report.engine.ReportEngine#reset()     */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)     * @see org.apache.jmeter.report.engine.ReportEngine#exit()     */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)     * @see org.apache.jmeter.gui.JMeterGUIComponent#getLabelResource()     */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)     * @see org.apache.jmeter.gui.JMeterGUIComponent#createPopupMenu()     */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)     * @see org.apache.jmeter.gui.JMeterGUIComponent#getMenuCategories()     */
WITHOUT_CLASSIFICATION	/*     * @see org.apache.jmeter.report.gui.action.Command#getActionNames()     */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)     * @see org.apache.jmeter.report.writers.PageSummary#getFileName()     */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)     * @see org.apache.jmeter.report.writers.PageSummary#getPageTitle()     */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)     * @see org.apache.jmeter.report.writers.PageSummary#isSuccessful()     */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)     * @see org.apache.jmeter.report.writers.PageSummary#pageStarted()     */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)     * @see org.apache.jmeter.report.writers.PageSummary#pageEnded()     */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)     * @see org.apache.jmeter.report.writers.PageSummary#setFileName(java.lang.String)     */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)     * @see org.apache.jmeter.report.writers.PageSummary#setPageTitle(java.lang.String)     */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)     * @see org.apache.jmeter.report.writers.PageSummary#setSuccessful(boolean)     */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)     * @see org.apache.jmeter.gui.JMeterGUIComponent#createTestElement()     */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)     * @see org.apache.jmeter.gui.JMeterGUIComponent#modifyTestElement(org.apache.jmeter.testelement.TestElement)     */
WITHOUT_CLASSIFICATION	/*     * (non-Javadoc)     *     * @see org.apache.jmeter.testelement.TestStateListener#testEnded()     */
WITHOUT_CLASSIFICATION	/*     * (non-Javadoc)     *     * @see org.apache.jmeter.testelement.TestStateListener#testEnded(java.lang.String)     */
WITHOUT_CLASSIFICATION	/*     * (non-Javadoc)     *     * @see org.apache.jmeter.testelement.TestStateListener#testStarted()     */
WITHOUT_CLASSIFICATION	/*     * (non-Javadoc)     *     * @see org.apache.jmeter.testelement.TestStateListener#testStarted(java.lang.String)     */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)     * @see org.apache.jmeter.protocol.http.sampler.HTTPSamplerBase#testIterationStart(org.apache.jmeter.engine.event.LoopIterationEvent)     */
WITHOUT_CLASSIFICATION	//
WITHOUT_CLASSIFICATION	// ignore
WITHOUT_CLASSIFICATION	// 
WITHOUT_CLASSIFICATION	// expected
WITHOUT_CLASSIFICATION	// expected
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ // so we can add them again in init
WITHOUT_CLASSIFICATION	// independent frame to // allow it to be overlaid // by the main frame //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$;
WITHOUT_CLASSIFICATION	//$NON-NLS-1$//$NON-NLS-2$
WITHOUT_CLASSIFICATION	// RUN MENU //$NON-NLS-1$
WITHOUT_CLASSIFICATION	// EDIT MENU //$NON-NLS-1$
WITHOUT_CLASSIFICATION	// FILE MENU //$NON-NLS-1$
WITHOUT_CLASSIFICATION	// protected fields: JMeterToolBar class can be use to create another toolbar (plugin, etc.)     //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	// reuse documentation //$NON-NLS-1$ //$NON-NLS-2$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ resource name
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ resource name
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ resource name
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	// The following are used to set the Result details on return from // the script: //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	// Add SamplerData for consistency with BeanShell Sampler //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	// Add alias for original StringFromFile name (had only one underscore) //$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	// Functions are wrapped in ${ and } //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$$NON-NLS-2$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	// The headers are written using ISO_8859_1 encoding //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ // We only support chunked transfer encoding
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ resource name
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$//$NON-NLS-2$//$NON-NLS-3$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	// Allow Headers to override Host setting //$NON-NLS-1$ //Host
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	// revert
WITHOUT_CLASSIFICATION	// revert to previous behaviour //$NON-NLS-1$ //$NON-NLS-2$
WITHOUT_CLASSIFICATION	// Not a real sampler
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// do nothing
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// If we still can't find it, just try using all of the text
WITHOUT_CLASSIFICATION	// method called by add is synchronized //this is a different model from the one used by the result collector
WITHOUT_CLASSIFICATION	// We are displaying an AssertionResult
WITHOUT_CLASSIFICATION	// /** // * Creates one of the fields used to display the graph's current // * values. // * // * @param color the color used to draw the value. By convention // * this is the same color that is used to draw the // * graph for this value and in the choose panel. // * @param length the number of digits which the field should be // * able to display // * // * @return a text field configured to display one of the // * current graph values // */ // private JTextField createInfoField(Color color, int length) // { // JTextField field = new JTextField(length); // field.setBorder(BorderFactory.createEmptyBorder(0, 0, 0, 0)); // field.setEditable(false); // field.setForeground(color); // field.setBackground(getBackground()); // // // The text field should expand horizontally, but have // // a fixed height // field.setMaximumSize(new Dimension( // field.getMaximumSize().width, // field.getPreferredSize().height)); // return field; // }
WITHOUT_CLASSIFICATION	/*     * Allow functions etc to register for testStopped notification.     * Only used by the function parser so far.     * The list is merged with the testListeners and then cleared.     */
WITHOUT_CLASSIFICATION	// Insert the workbench node
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // Look and Feel prefix // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ enable/disable // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// we stay within the same parent node
WITHOUT_CLASSIFICATION	// we stay within the same parent node
WITHOUT_CLASSIFICATION	// Get the preference for the recent files
WITHOUT_CLASSIFICATION	// Get the preference for the recent files
WITHOUT_CLASSIFICATION	// Find and set the file for this recent file command
WITHOUT_CLASSIFICATION	// Check if LAF is a built-in one
WITHOUT_CLASSIFICATION	// Using index 0 is voluntary as child is removed in next step and added to new parent
WITHOUT_CLASSIFICATION	// or a treenode from the same tree
WITHOUT_CLASSIFICATION	// Extract transfer data.
WITHOUT_CLASSIFICATION	// Insert a clone of the node, the original one will be removed by the exportDone method // the children are not cloned but moved to the cloned node // working on the original node would be harder as  //    you'll have to deal with the insertion index offset if you re-order a node inside a parent
WITHOUT_CLASSIFICATION	/*     * The following array must agree with dateFormat     *     * It is used to translate the positions in the buffer to the values used by     * the Calendar class for the field id.     *     * Current format: MM/DD/YYYY HH:MM:SS 01234567890123456789 ^buffer     * positions     */
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON_NLS-1$
WITHOUT_CLASSIFICATION	// $NON_NLS-1$
WITHOUT_CLASSIFICATION	// $NON_NLS-1$
WITHOUT_CLASSIFICATION	// $NON_NLS-1$
WITHOUT_CLASSIFICATION	// $NON_NLS-1$
WITHOUT_CLASSIFICATION	// $NON_NLS-1$
WITHOUT_CLASSIFICATION	// $NON_NLS-1$
WITHOUT_CLASSIFICATION	// $NON_NLS-1$
WITHOUT_CLASSIFICATION	// $NON_NLS-1$
WITHOUT_CLASSIFICATION	// $NON_NLS-1$
WITHOUT_CLASSIFICATION	// $NON_NLS-1$
WITHOUT_CLASSIFICATION	// $NON_NLS-1$
WITHOUT_CLASSIFICATION	// $NON_NLS-1$
WITHOUT_CLASSIFICATION	// $NON_NLS-1$
WITHOUT_CLASSIFICATION	// $NON_NLS-1$
WITHOUT_CLASSIFICATION	// $NON_NLS-1$
WITHOUT_CLASSIFICATION	// $NON_NLS-1$
WITHOUT_CLASSIFICATION	// $NON_NLS-1$
WITHOUT_CLASSIFICATION	// $NON_NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// Used by SampleSaveConfigurationConverter.unmarshall()
WITHOUT_CLASSIFICATION	// Note that sampleStarted() and sampleStopped() is not made to appear // in synch with sampleOccured() when replaying held samples. // For now this is not critical since sampleStarted() and sampleStopped() // is not used, but it may become an issue in the future. Then these // events must also be stored so that replay of all events may occur and // in the right order. Each stored event must then be tagged with something // that lets you distinguish between occured, started and ended.
WITHOUT_CLASSIFICATION	// Allow TestResultWrapper to feed back the samples // This is effectively the same as saver.fromXML(InputStream) except we get to provide the DataHolder // Don't know why there is no method for this in the XStream class
WITHOUT_CLASSIFICATION	//OK
WITHOUT_CLASSIFICATION	// N.B. default charset is used deliberately here
WITHOUT_CLASSIFICATION	// Catch errors and rethrow as ConversionException so we get location details
WITHOUT_CLASSIFICATION	// Version information for test plan header // This is written to JMX files by ScriptWrapperConverter // Also to JTL files by ResultCollector // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// For converters to use
WITHOUT_CLASSIFICATION	// Get the OutputWriter to use
WITHOUT_CLASSIFICATION	// Use deprecated method, to avoid duplicating code
WITHOUT_CLASSIFICATION	// Get the InputReader to use
WITHOUT_CLASSIFICATION	// Get the InputReader to use
WITHOUT_CLASSIFICATION	//  Normal output //  ---- Debugging information ---- //  required-type       : org.apache.jorphan.collections.ListedHashTree //  cause-message       : WebServiceSampler : WebServiceSampler //  class               : org.apache.jmeter.save.ScriptWrapper //  message             : WebServiceSampler : WebServiceSampler //  line number         : 929 //  path                : /jmeterTestPlan/hashTree/hashTree/hashTree[4]/hashTree[5]/WebServiceSampler //  cause-exception     : com.thoughtworks.xstream.alias.CannotResolveClassException //  -------------------------------
WITHOUT_CLASSIFICATION	// --------------------------------------------------------------------- // XML RESULT FILE CONSTANTS AND FIELD NAME CONSTANTS // ---------------------------------------------------------------------
WITHOUT_CLASSIFICATION	// $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$
WITHOUT_CLASSIFICATION	// $NON-NLS-1$
WITHOUT_CLASSIFICATION	// It is the sub sampler of the transaction that will be sampled
WITHOUT_CLASSIFICATION	// N.B. This is only called at the start and end of a thread, so there is not // necessary to cache the search results, thus saving memory
WITHOUT_CLASSIFICATION	// If parent is OK, but child failed, add a message and flag the parent as failed
WITHOUT_CLASSIFICATION	//    private static Configuration getConfiguration(AssertionResult assResult) { //        DefaultConfiguration config = new DefaultConfiguration(ASSERTION_RESULT_TAG_NAME, "JMeter Save Service"); // //        config.setAttribute(FAILURE_MESSAGE, assResult.getFailureMessage()); //        config.setAttribute(ERROR, "" + assResult.isError()); //        config.setAttribute(FAILURE, "" + assResult.isFailure()); //        return config; //    }
WITHOUT_CLASSIFICATION	// see if this works // it did not, let's try some other formats
WITHOUT_CLASSIFICATION	// Both these are needed in the list even though they set the same // variable
WITHOUT_CLASSIFICATION	/*     * Class to handle generating the delimited string. - adds the delimiter     * if not the first call - quotes any strings that require it     */
WITHOUT_CLASSIFICATION	/*     * <p> Returns a <code>String</code> value for a character-delimited column     * value enclosed in the quote character, if required. </p>     *      * <p> If the value contains a special character, then the String value is     * returned enclosed in the quote character. </p>     *      * <p> Any quote characters in the value are doubled up. </p>     *      * <p> If the value does not contain any special characters, then the String     * value is returned unchanged. </p>     *      * <p> N.B. The list of special characters includes the quote character.     * </p>     *      * @param input the input column String, may be null (without enclosing     * delimiters)     *      * @param specialChars special characters; second one must be the quote     * character     *      * @return the input String, enclosed in quote characters if the value     * contains a special character, <code>null</code> for null string input     */
WITHOUT_CLASSIFICATION	// read first line and forget
WITHOUT_CLASSIFICATION	// read first line and forget
WITHOUT_CLASSIFICATION	// Obtain a value of the appropriate type for this property.
WITHOUT_CLASSIFICATION	// use negative condition so missing (null) value is treated as FALSE
WITHOUT_CLASSIFICATION	// the DEFAULT class // Convert int to Integer etc:
WITHOUT_CLASSIFICATION	// might be null (e.g. in testing)
WITHOUT_CLASSIFICATION	/*     * True iff we're currently processing an event triggered by the user     * selecting the "Edit" option. Used to prevent reverting the combo to     * non-editable during processing of secondary events.     */
WITHOUT_CLASSIFICATION	// Programming error. Don't // continue.
WITHOUT_CLASSIFICATION	// Creation of the customizer and GUI initialization is delayed until // the // first // configure call. We don't need all that just to find out the static // label, menu // categories, etc!
WITHOUT_CLASSIFICATION	/** * <p> * Super-class for TestElements that can be applied to main sample, sub-samples or both. * [Assertions use a different class because they use a different value for the {@link #getScopeName()} constant] * </p> * * <p> * Their corresponding GUI classes need to add the ScopePanel to the GUI * using the AbstractXXXGui methods: * <ul> * <li>createScopePanel()</li> * <li>saveScopeSettings()</li> * <li>showScopeSettings()</li> * </ul> * </p> */
WITHOUT_CLASSIFICATION	// TestBeanHelper.prepare() is OK
WITHOUT_CLASSIFICATION	// Trigger end of loop condition on all parent controllers of current sampler
WITHOUT_CLASSIFICATION	// OK to call TestBeanHelper.prepare()
WITHOUT_CLASSIFICATION	// OK to call TestBeanHelper.prepare()
WITHOUT_CLASSIFICATION	// OK to call TestBeanHelper.prepare()
WITHOUT_CLASSIFICATION	// Original (rather odd) behaviour // start at the end
WITHOUT_CLASSIFICATION	// Property names to preload into JMeter variables:
WITHOUT_CLASSIFICATION	// List of active threads
WITHOUT_CLASSIFICATION	// set the endtime for the Thread // Duration is in seconds
WITHOUT_CLASSIFICATION	// N.B. we don't wait for the thread to complete, as that would prevent parallel TGs
WITHOUT_CLASSIFICATION	// For example: // jar:file:/JMeter/lib/ext/ApacheJMeter_core.jar!/org/apache/jmeter/util/JMeterVersion.class // or if using an IDE         // file:/workspaces/JMeter/build/core/org/apache/jmeter/util/JMeterVersion.class
WITHOUT_CLASSIFICATION	// For use by the server script
WITHOUT_CLASSIFICATION	// Override so we can intercept the stream
WITHOUT_CLASSIFICATION	// TODO - charset?
WITHOUT_CLASSIFICATION	// TODO - charset?
WITHOUT_CLASSIFICATION	// TODO - charset?
WITHOUT_CLASSIFICATION	// TODO - charset?
WITHOUT_CLASSIFICATION	// TODO - charset?
WITHOUT_CLASSIFICATION	// API expects null not empty array, see http://docs.oracle.com/javase/6/docs/api/javax/net/ssl/X509KeyManager.html
WITHOUT_CLASSIFICATION	// the copying thread won't generally detect EOF
WITHOUT_CLASSIFICATION	// N.B. It seems that Opera needs a chain in order to accept server keys signed by the intermediate CA // Opera does not seem to like server keys signed by the root (self-signed) cert.
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	// Needs to be volatile as may be referenced from multiple threads // TODO see if this can be made final somehow
WITHOUT_CLASSIFICATION	//$NON_NLS-1$
WITHOUT_CLASSIFICATION	//$NON_NLS-1$
WITHOUT_CLASSIFICATION	//$NON_NLS-1$
WITHOUT_CLASSIFICATION	//$NON_NLS-1$
WITHOUT_CLASSIFICATION	//$NON_NLS-1$
WITHOUT_CLASSIFICATION	//$NON_NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
DESIGN	/**     * Add logTargets to root logger     * FIXME What's the clean way to add a LogTarget afterwards ?     * @param logTargets LogTarget array     */
DESIGN	// TODO: find a way to avoid the cost of creating a String here -- // probably a new PatternMatcherInput working on a byte[] would do // better.
DESIGN	/*         * Not clear what can cause this ? conflicting versions perhaps         */
DESIGN	// result.setError(true); // TODO is this the correct strategy? // throw exception; // allow assertion to pass
DESIGN	//TODO replace with proper Exception
DESIGN	//TODO replace with proper Exception // return with an error
DESIGN	/*     * Mask values for TEST_TYPE TODO: remove either MATCH or CONTAINS - they     * are mutually exckusive     */
DESIGN	// TODO ought to be a FileChooser ...
DESIGN	// TODO do we need to add a charset for the file contents? // $NON-NLS-1$
DESIGN	// This could perhaps be a variable name
DESIGN	// TODO - should we skip processing here?
DESIGN	// Should we return fragment as text, rather than text of fragment?
DESIGN	// TODO: should this be clearData()?
DESIGN	// TODO - is this used? (apart from test code)
DESIGN	/**     * Provide a description of this timer class.     *     * TODO: Is this ever used? I can't remember where. Remove if it isn't --     * TODO: or obtain text from bean's displayName or shortDescription.     *     * @return the description of this timer class.     */
DESIGN	// TODO - is this needed?
DESIGN	// N.B. Needs to implement Visualizer so that TestBeanGUI can find the correct GUI class
DESIGN	/*     * TODO should these fields be public?     * They don't appear to be used externally.     *      * Also, are they any different from HTTPConstants.GET etc. ?     * In some cases they seem to be used as the method name from the Tomcat log.     * However the RMETHOD field is used as the value for HTTPSamplerBase.METHOD,     * for which HTTPConstants is most approriate.     */
DESIGN	// in milli-seconds // TODO: properties?
DESIGN	// Allow JMeter to render frames (and relative images) // Must be done after setContentType [Why?]
DESIGN	// N.B. Needs to implement Visualizer so that TestBeanGUI can find the correct GUI class
DESIGN	// Showing large strings can be VERY costly, so we will avoid // doing so if the response // data is larger than 200K. TODO: instead, we could delay doing // the result.setText // call until the user chooses the "Response data" tab. Plus we // could warn the user // if this happens and revert the choice if he doesn't confirm // he's ready to wait.
DESIGN	// N.B. Needs to implement Visualizer so that TestBeanGUI can find the correct GUI class // TODO - remove UnsharedComponent ? Probably does not make sense for a TestBean.
DESIGN	// It might be useful also to make this available in the 'Request' tab, for // when posting JSON.
DESIGN	// should header be saved with the data? //$NON-NLS-1$
DESIGN	// should header be saved with the data? //$NON-NLS-1$
DESIGN	//NOT USED protected double[][] data = null;
DESIGN	// TODO work out how to search the XML pane
DESIGN	// NOTUSED: long[] longSample = getSamples(); // load each node
DESIGN	// Hack to allow automated tests to find when test has ended //transient boolean testEnded = false;
DESIGN	// $NON-NLS-1$ // so it agrees with above // TODO perhaps should share code with __time() function for this... // $NON-NLS-1$ $NON-NLS-2$ // $NON-NLS-1$ $NON-NLS-2$
DESIGN	// Hack to resolve ModuleControllers in non GUI mode
DESIGN	// TODO this bit of code needs to be tidied up // Unfortunately ModuleController is in components, not core // Bug 47165
DESIGN	// TODO: move this to components -- the only reason why it's in core is because // it's used as a guinea pig by a couple of tests.
DESIGN	// TODO - should this use setFirst() ?
DESIGN	// If child of TransactionController is a ThroughputController and TPC does // not sample its children, then we will have this // TODO Should this be at warn level ?
DESIGN	// Hack to allow external control
DESIGN	// TODO should level be more than debug ?
DESIGN	// TODO should this also clear isDynamic, rawParameters, permanentResults?
DESIGN	// TODO: Make the running indicator its own class instead of a JButton
DESIGN	// TODO: This method doesn't appear to be used.
DESIGN	// TODO: This method doesn't appear to be used.
DESIGN	// TODO - why lower case? OK to use the default Locale?
DESIGN	/*     * TODO consider removing this method, and providing method wrappers instead.     * This would allow the Gui package to do any additional clearups if required,     * as has been done with clearTestPlan()    */
DESIGN	/** * FIXME Why is searchTF not getting focus correctly after having been setVisible(false) once */
DESIGN	// TODO: I believe the following code (to the end of the method) is // obsolete, // since NamePanel no longer seems to be the GUI for any component:
DESIGN	/*     * NOTUSED private void initButtonMap() { }     */
DESIGN	// Allow serializable test to work // TODO: is the serializable test necessary now that JMeterTreeNode is // no longer a GUI component?
DESIGN	//avoid error in ant task tests (good way?)
DESIGN	// Does not appear to be used; called by MainFrame#setEditAddMenu() but that is not called
DESIGN	/*                 * JMeterTreeNode and TestBeanGUI are special GUI classes, and                 * aren't intended to be added to menus                 *                 * TODO: find a better way of checking this                 */
DESIGN	// Should the TestBean be hidden?
DESIGN	// not used
DESIGN	// not used
DESIGN	// TODO should class implement SampleListener?
DESIGN	// not used
DESIGN	// not used
DESIGN	// TODO - perhaps save other items such as headers?
DESIGN	// TODO should errors be thrown back through RMI?
DESIGN	// not used
DESIGN	// not used
DESIGN	//@GuardedBy("sampleStore") TODO perhaps use ConcurrentHashMap ?
DESIGN	// TODO should this throw an error?
DESIGN	// Not used
DESIGN	// Yuck: TIFFImageEncoder uses Error to report runtime problems
DESIGN	//TODO clazz is probably always the same as testclass
DESIGN	// TODO does not work yet; need to determine the sample type
DESIGN	// Programming error: bail out.
DESIGN	// TODO - use or remove
DESIGN	// a check, just in case:
DESIGN	// a check, just in case:
DESIGN	// TODO should this implement supportsCustomEditor() ?
DESIGN	// TODO is this ever used?
DESIGN	// Programming error: bail out.
DESIGN	// TODO - yet another ambiguous name - does it need changing? // See also: Clearable, JMeterGUIComponent
DESIGN	// Surely this is always null in the constructor?
DESIGN	// NOTE: Source and line arguments are nonsense in a call(). //       Any way to make these arguments *sensible?
DESIGN	// TODO probably not needed
DESIGN	// clone will produce correct type // TODO but why do we need to clone the list?
DESIGN	// All keys in messages.properties are lowercase (historical reasons?)
DESIGN	// TODO needs to be synch? Probably not changed after threads have started // JMeter Home directory (excludes trailing separator) // JMeter bin directory (excludes trailing separator)
DESIGN	// TODO Why empty block ?
DESIGN	// TODO is sync really needed?
DESIGN	// TODO is this correct?
DESIGN	// TODO should equals and hashCode depend on field other than count?
DESIGN	// TODO: Does this method need to be public? It isn't currently // called outside of this class.
DESIGN	// TODO Should this method be synchronized ? all other function execute are
DESIGN	// TODO improve the error handling
DESIGN	// TODO improve the error handling
DESIGN	// Not used
DESIGN	// Keep the unexpanded path // TODO - allow directories to end with .jar by removing this check?
DESIGN	// TODO should we allow null for non-primitive types?
DESIGN	// TODO field always true, what for ?
DESIGN	// TODO - should this be done for embedded usage? // Note: the element is a ConfigTestElement when used standalone, so we cannot use FTPSampler access methods
DESIGN	// not currently used
DESIGN	// TODO is this possible?
DESIGN	// TODO not used by GUI
DESIGN	// TODO: replace all this url2 mess with a proper method // "areEquivalent(url1, url2)" that // would also ignore case in protocol and host names, etc. -- use that // method in the CookieManager too.
DESIGN	// TODO should really return most specific (i.e. longest) match.
DESIGN	/*         * TODO improve string version to better match browser behaviour? e.g.         * do browsers regard http://host/ and http://Host:80/ as the same? If         * so, it would be better to reflect this in the string         */
DESIGN	// TODO is it the best way ? https://issues.apache.org/bugzilla/show_bug.cgi?id=55634
DESIGN	// $NON-NLS-1$ TODO should this be a variable?
DESIGN	// TODO - should this be done when the client is created? // If so, then the details need to be added as part of HttpClientKey
DESIGN	// TODO is null correct?
DESIGN	// $NON-NLS-1$ // TODO can this be obtained from the file somehow?
DESIGN	// TODO - belongs elsewhere 
DESIGN	// TODO - should we call start() and stop()?
DESIGN	// $NON-NLS-1$ // TODO - change to use URL version? Will this affect test plans?
DESIGN	// TODO - is this the correct default?
DESIGN	//$NON-NLS-1$ TODO should this be variable?
DESIGN	// May be replaced later
DESIGN	//TODO: move to utils class (JMeterUtils?)
DESIGN	// TODO: find out how to retrieve these from the script // At present the script has to use SampleResult methods to set them. // $NON-NLS-1$ // $NON-NLS-1$
DESIGN	// TODO ought to be a FileChooser ...
DESIGN	// Remember to change this when the class changes ...
DESIGN	// TODO: process warnings? Set Code and Message to success?
DESIGN	//$NON-NLS-1$ // TODO - probably wrong
DESIGN	// Should we use java.naming.security.[principal|credentials] to create the QueueConnection?
DESIGN	// DirContext dc = //TODO perhaps return this?
DESIGN	// TODO is this sensible?
DESIGN	// $NON-NLS-1$ // TODO - use a different format here?
DESIGN	// TODO - charset? // TODO this should really be request data, but there is none
DESIGN	// results.setResponseCode("???"); TODO what code should be set here?
DESIGN	// results.setResponseCode("???"); TODO what code should be set here?
DESIGN	// NOTUSED yet private JTextField filename;
DESIGN	// TODO should this be indeterminate? // TODO should this be indeterminate? //$NON-NLS-1$ //$NON-NLS-1$
DESIGN	// all the others could be private too?
DESIGN	// TODO fetch list of languages from a file? // N.B. Changes to language list need to be reflected in // resources/PackageTest.java
DESIGN	// Method is broken anyway
DESIGN	// TODO fix this when there is a real implementation
DESIGN	/*                 * JMeterTreeNode and TestBeanGUI are special GUI classes, and                 * aren't intended to be added to menus                 *                 * TODO: find a better way of checking this                 */
DESIGN	/** * FIXME BROKEN CODE */
DESIGN	// TODO: I believe the following code (to the end of the method) is // obsolete, // since NamePanel no longer seems to be the GUI for any component:
DESIGN	// Allow serializable test to work // TODO: is the serializable test necessary now that JMeterTreeNode is // no longer a GUI component?
DESIGN	// TODO can this ever happen?
DESIGN	// Method is broken anyway
DESIGN	// TODO fix this when there is a real implementation
DESIGN	// NOTUSED org.apache.jmeter.monitor.model.Status st = // TODO - charset?
DESIGN	// TODO : This is a bit fragile
DESIGN	// TODO Should this be OK ? //assertEquals(contentEncoding, s.getContentEncoding()); // Check arguments // We should have one argument, with the value equal to the post body
DESIGN	// All form parameter always have text/plain as mime type //TODO make this a parameter?
DESIGN	// Maps to contain page and form encodings // TODO - do these really need to be shared between all Proxy instances?
DESIGN	// Java 1.6.0_22+ no longer allows Content-Length to be set, so don't check it. // See: http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6996110 // TODO any point in checking the other headers?
DESIGN	/* * Find all beans out there and check their resource property files: - Check * that non-default property files don't have any extra keys. - Check all * necessary properties are defined at least in the default property file, * except for beans whose name contains "Experimental" or "Alpha".  *  * TODO: - Check property files don't have duplicate keys (is this important) *  */
DESIGN	// TODO should setBaseForScript be called here rather than above?
DESIGN	/*             * Provide dummy implementations to suppress download and display of             * related resources: - FRAMEs - IMAGEs TODO create better dummy             * displays TODO suppress LINK somehow             */
DESIGN	// Should we run a beanshell script on startup? // $NON-NLS-1$
DESIGN	// add a system property so samplers can check to see if JMeter // is running in NonGui mode // $NON-NLS-1$ // TODO - why does it create a new instance?
DESIGN	// TODO: This class looks a lot like ArgumentsPanel. What exactly is the // difference? Could they be combined? // Note: it seems that this class is not actually used ...
DESIGN	// TODO - why use space?
DESIGN	// TODO - why use space?
DESIGN	// MenuBar related methods // TODO: Do we really need to have all these menubar methods duplicated // here? Perhaps we can make the menu bar accessible through GuiPackage?
DESIGN	// Programming error: bail out.
DESIGN	// Programming error: bail out.
DESIGN	// Programming error: bail out.
DESIGN	// TODO - can this eever happen?
DESIGN	// TODO fix up for Nimbus LAF
DESIGN	//Maybe do nothing at all?
DESIGN	// Does not appear to be used (yet)
DESIGN	// Make it easier to enter a tab (can use \<tab> but that is awkward)
DESIGN	// Settings; readResolve sets these from the server/client values as appropriate // TODO would be nice to make these final; not 100% sure volatile is needed as not changed after creation
DESIGN	// TODO - should this be restored?
DESIGN	// TODO: should this be restored?
DESIGN	// Programming error: bail out.
DESIGN	// Not used, as the <testResult> element is generated by the // ResultCollector class
DESIGN	// TODO: the above works in the current situation, but it's // just a hack. How to get each editor to report whether it // wants to grow bigger? Whether the property label should // be at the left or at the top of the editor? ...?
DESIGN	// How many classes can we assign from? // TODO: there must be a nicer way...
DESIGN	// Does not appear to be used yet
DESIGN	/*         * Setting SamplingStarted before the contollers are initialised allows         * them to access the running values of functions and variables (however         * it does not seem to help with the listeners)         */
DESIGN	// Does not appear to be used
DESIGN	// TODO should equals and hashCode depend on field other than count?
DESIGN	// TODO: what is this for?
DESIGN	// TODO cpercent is the same as cmedian here - why? and why pass it to "distributionLine"?
DESIGN	// TODO: Does this method need to be public? It isn't currently // called outside of this class.
DESIGN	// TODO: Should the method signature of this method be changed to // match the super-implementation (using a TestElement parameter // instead of AbstractListenerElement)? This would require an // instanceof check before adding the listener (below), but would // also make the behavior a bit more obvious for sub-classes -- the // Java rules dealing with this situation aren't always intuitive, // and a subclass may think it is calling this version of the method // when it is really calling the superclass version instead.
DESIGN	// TODO only clear the relevant entry - if possible...
DESIGN	// TODO only clear the relevant entry - if possible...
DESIGN	// Not used
DESIGN	// TODO not used?
DESIGN	// TODO should this be getMin()?
DESIGN	// N.B. Commons IO IOUtils has equivalent methods; these were added before IO was included // TODO - perhaps deprecate these in favour of Commons IO?
DESIGN	// Remember to change this when the class changes ...
DESIGN	/*     * Wrapper to convert a JUnit4 class into a TestCase     *     *  TODO - work out how to convert JUnit4 assertions so they are treated as failures rather than errors     */
DESIGN	//very wrong.
DESIGN	// SampleEvent is not passed JMeterVariables, because they don't make sense for Proxy Recording // TODO - is this the correct threadgroup name?
DESIGN	// TODO perhaps make more specific than this? // no point parsing anything else, e.g. GIF ...
DESIGN	//            // Set the content type TODO - needed? //            String multiPartContentType = multiPart.getContentType().getValue(); //            post.setHeader(HEADER_CONTENT_TYPE, multiPartContentType);
DESIGN	// TODO merge put and post methods as far as possible. // e.g. post checks for multipart form/files, and if not, invokes sendData(HttpEntityEnclosingRequestBase)
DESIGN	// TODO needed here because currently done on sample completion in JMeterThread, // but that only catches top-level samples.
DESIGN	// TODO can this happen?
DESIGN	// TODO downcase UPPER case non-final variables
DESIGN	// NOT USED transient protected ThreadGroup THREADGROUP = null; // Anyway, was this supposed to be the class from java.lang, or // jmeter.threads?
DESIGN	// TODO - should the encoding be configurable? // $NON-NLS-1$
DESIGN	// Maybe we should consider creating a global cache for the // random files to make JMeter more efficient.
DESIGN	// Maybe we should consider creating a global cache for the // random files to make JMeter more efficient.
DESIGN	// TODO: do we need to implement any kind of connection pooling? // If so, which connections should be shared? // Should threads share connections to the same destination? // What about cross-thread sharing?
DESIGN	// MenuBar related methods // TODO: Do we really need to have all these menubar methods duplicated // here? Perhaps we can make the menu bar accessible through GuiPackage?
DESIGN	// NOTUSED private String chosenFile;
DESIGN	// TODO fix this when there is a real implementation
DESIGN	// TODO - should LF-only EOL be allowed? 
DESIGN	// Get the content length, it tells us how much data to read // TODO : Maybe support chunked encoding, then we cannot rely on content length
DESIGN	// This is effectively the same as saver.toXML(Object, Writer) except we get to provide the DataHolder // Don't know why there is no method for this in the XStream class
DESIGN	// TODO should this set the thread names for all the subsamples? // might be more efficient than fetching the name elsewehere
DESIGN	// TODO is this the right thing to do?
DESIGN	// hack to reduce the need to load every class in non-GUI mode, which only needs functions // TODO perhaps use BCEL to scan class files instead? // class name should contain this string // class name should not contain this string
DESIGN	// NOTE: the handling of simple- vs. double-quotes could be formally // more accurate, but I can't imagine a session id containing // either, so we should be OK. The whole set of expressions is a // quick hack anyway, so who cares.
DESIGN	// Don't allow override of Content-Length // This helps with SoapSampler hack too // TODO - what other headers are not allowed?
DESIGN	/** * Aggregates sample results for use by the Statistical remote batch mode. * Samples are aggregated by the key defined by getKey(). * TODO: merge error count into parent class? */
DESIGN	// TODO strings should be resources
DESIGN	// Should we add the "_" separator?
DESIGN	//TODO: validate contentType for reasonable types?
DESIGN	/*     *     * A Dom tree panel for to display response as tree view author <a     * href="mailto:d.maung@mdl.com">Dave Maung</a>      * TODO implement to find any nodes in the tree using TreePath.     *     */
DESIGN	//TODO implement other non-text types
DESIGN	// NOTUSED: GuiPackage guiPack =
DESIGN	// TODO - could this be return?
DESIGN	/*         * Does the system support UNC paths? If so, may need to fix them up         * later         */
DESIGN	// TODO could these be done earlier (or just once?)
DESIGN	/*         * A little hack - add each listener to the start of the list - this         * ensures that the thread running the show is the first listener and         * can modify certain values before other listeners are called.         */
DESIGN	/*         * Ensure that the sample variables are correctly initialised for each run.         * TODO is this the best way to do this? should it be done elsewhere ?         */
DESIGN	//A hack to make user-defined variables in the testplan element more dynamic
DESIGN	/*             * Add fix for Deadlocks, see:             *              * See https://issues.apache.org/bugzilla/show_bug.cgi?id=48350            */
DESIGN	// TODO should level be more than debug ?
DESIGN	// TODO does not appear to be used
DESIGN	// TODO does not appear to be used
DESIGN	// TODO does not appear to be used
DESIGN	// Hack to get full modifier value
DESIGN	// TODO: not used - make private?
DESIGN	// should the samples be aggregated on thread name or thread group (default) ?
DESIGN	// should the samples be aggregated on thread name or thread group (default) ?
DESIGN	// TODO do contentType and/or dataEncoding belong in HTTPSampleResult instead?
DESIGN	//TODO do this more efficiently
DESIGN	// TODO is this really necessary?
DESIGN	// houston we have a problem !!
DESIGN	// TODO turn into method?
DESIGN	// TODO appears to duplicate the threadName field in SampleResult
DESIGN	// TODO should this be JTLSAVER? Only seems to be called by MonitorHealthVisualzer
DESIGN	//TODO provide proper name?
DESIGN	// Slight hack - we need to ensure the TestClass is not reset by the previous call
DESIGN	/*     * These must be set before reading/writing the XML. Rather a hack, but     * saves changing all the method calls to include an extra variable.     *     * AFAIK the variables should only be accessed from one thread, so no need to synchronize.     */
DESIGN	/*     * TODO - convert to work more like upgrade.properties/NameUpdater.java     *     * Special processing is carried out for the Header Class The String     * property TestElement.name is converted to Header.name for example:     * <elementProp name="User-Agent"     * elementType="org.apache.jmeter.protocol.http.control.Header"> <stringProp     * name="Header.value">Mozilla%2F4.0+%28compatible%3B+MSIE+5.5%3B+Windows+98%29</stringProp>     * <stringProp name="TestElement.name">User-Agent</stringProp>     * </elementProp> becomes <elementProp name="User-Agent"     * elementType="org.apache.jmeter.protocol.http.control.Header"> <stringProp     * name="Header.value">Mozilla%2F4.0+%28compatible%3B+MSIE+5.5%3B+Windows+98%29</stringProp>     * <stringProp name="Header.name">User-Agent</stringProp> </elementProp>     */
DESIGN	// TODO should this be called if basedir == null?
DESIGN	// TODO Is this silent exception intended
DESIGN	// TODO - does not appear to be called directly
DESIGN	// TODO only called by UserParameterXMLParser.getXMLParameters which is a deprecated class
DESIGN	//TODO - move to JOrphanUtils?
DESIGN	//TODO - move to JOrphanUtils?
DESIGN	//TODO - move to JOrphanUtils?
DESIGN	// TODO - perhaps this should be a fatal error?
DESIGN	// Hack: bsh-2.0b5.jar BshScriptEngine implements Compilable but throws "java.lang.Error: unimplemented"
DESIGN	// Is it an exception wrapped in a JavaScriptException?
DESIGN	/** * Custom TrustManager ignores all certificate errors * * TODO: implement conditional checking and logging * * (Derived from AuthSSLX509TrustManager in HttpClient contrib directory) */
DESIGN	// TODO is this correct? // If this is not the first file we can't write its header now // for simplicity we always save it, even if there is only one file
DESIGN	// Temporary fix to allow default protocol to be changed
DESIGN	// TODO why not use the super class value?
DESIGN	// TODO should the engine be static?
DESIGN	// TODO - not sure this is the best method
DESIGN	// TODO - is this the correct default?
DESIGN	// TODO: is this the correct default?
DESIGN	// TODO hack, to be removed later
DESIGN	// Could we drop the Sync here?
DESIGN	// May be replaced later
DESIGN	// May be replaced later
DESIGN	// HACK: force the controller to load its tree
DESIGN	// TODO needs cleaning up
DESIGN	// TODO - should this return something else?
DESIGN	// Hack to allow entire URL to be provided in host field
DESIGN	// TODO: make static?
DESIGN	// TODO should we allow mimetype only?
DESIGN	// TODO Method with 0 reference, really useful ?
DESIGN	// TODO Method with 0 reference, really useful ?
DESIGN	// TODO set different status if not enough messages found?
DESIGN	// TODO turn into parameter?
DESIGN	// TODO improve this
DESIGN	/*             * TODO: Exact ordering is only required for some tests; change the             * comparison to do a set compare where necessary.             */
DESIGN	// TODO: does it matter that an empty line will terminate the loop? // CSV output files should never contain empty lines, so probably // not // If so, then need to check whether the reader is at EOF
DESIGN	/**     * Check if a string is a valid JMeter 'expression'.     * <p>     * The current implementation is very basic: it just accepts any string     * containing "${" as a valid expression. TODO: improve, but keep returning     * true for "${}".     */
DESIGN	// I guess this can happen as a result of a bad // file read? In this case, it would be better to replace the // incorrect value with anything valid, e.g. the default value // for the property. // But for the time being, I just prefer to be aware of any // problems occuring here, most likely programming errors, // so I'll bail out. // (MS Note) Can't bail out - newly create elements have blank // values and must get the defaults. // Also, when loading previous versions of jmeter test scripts, // some values // may not be right, and should get default values - MS // TODO: review this and possibly change to:
DESIGN	// TODO temporary hack to avoid unnecessary bug reports for subclasses
DESIGN	// Remember to change this when the class changes ...
DESIGN	// Remember to change this when the class changes ...
DESIGN	// Remember to change this when the class changes ...
DESIGN	//TODO consider using private logs for each derived class
DESIGN	/*     * The following variables are set by StandardJMeterEngine.     * This is done before start() is called, so the values will be published to the thread safely     * TODO - consider passing them to the constructor, so that they can be made final     * (to avoid adding lots of parameters, perhaps have a parameter wrapper object.     */
DESIGN	// Hack: save the package for any transaction controllers
DESIGN	// TODO: remove this useless Entry parameter
DESIGN	// TODO - how to handle thread stopped here
DESIGN	/*                 * Fix bug: -D arg1=arg2 was causing parse error; however                 * --define arg1=arg2 is OK This seems to be because the parser                 * skips the terminator for the long options, but was not doing                 * so for the short options.                 */
DESIGN	// TODO specify collection type without breaking callers
DESIGN	// TODO: should this just call super()?
DESIGN	// TODO: should this just call super()?
DESIGN	// Maybe move to vector if MT problems occur
DESIGN	// Maybe move to vector if MT problems occur
DESIGN	// Maybe move to vector if MT problems occur
DESIGN	// TODO field always true, what for ?
DESIGN	// Code also allows for LF only (not sure why - perhaps because the test code uses it?)
DESIGN	/*     * Holder for storing cache details.     * Perhaps add original response later?     */
DESIGN	// TODO correct URL?
DESIGN	// hack to skip processing
DESIGN	// hack to skip processing
DESIGN	// hack to skip processing
DESIGN	// won't work: writeErrorToClient(HttpReplyHdr.formInternalError()); // Generate result (if nec.) and populate it // hack to skip processing
DESIGN	// TODO replace repeated substr() above and below with more efficient method.
DESIGN	/*     * TODO this assumes that the redirected response will always immediately follow the original response.     * This may not always be true.     * Is there a better way to do this?     */
DESIGN	// TODO - could be converted to generic class?
DESIGN	// HACK
DESIGN	// TODO - needs more work ...
DESIGN	// TODO is this a sensible number? //$NON-NLS-1$
DESIGN	// Can be null (not sure why)
DESIGN	// TODO this is not populated currently
DESIGN	//This can lead to code smell, meh! Do we care
DESIGN	// TODO is this the best way to do this?
DESIGN	// TODO - should this be a failure?
DESIGN	// TODO - improve this check
DESIGN	//TODO add some real tests now that split() has been removed
DESIGN	// Why does this not call guiInstance.clearTestPlan() ? // Is there a reason for not clearing everything?
DESIGN	// Programming error: bail out.
