//test out the optimizer:	WITHOUT_CLASSIFICATION	0.9988190801196368	WITHOUT_CLASSIFICATION	0.0011809198803631785	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.999679076858764	WITHOUT_CLASSIFICATION	3.2092314123604855E-4	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.999679076858764	WITHOUT_CLASSIFICATION	3.2092314123604855E-4	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.999679076858764	WITHOUT_CLASSIFICATION	3.2092314123604855E-4	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.999679076858764	WITHOUT_CLASSIFICATION	3.2092314123604855E-4	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.999679076858764	WITHOUT_CLASSIFICATION	3.2092314123604855E-4	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.999679076858764	WITHOUT_CLASSIFICATION	3.2092314123604855E-4	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.999679076858764	WITHOUT_CLASSIFICATION	3.2092314123604855E-4	DESIGN
// return	WITHOUT_CLASSIFICATION	0.9997041440236378	WITHOUT_CLASSIFICATION	2.958559763621055E-4	DESIGN
// return	WITHOUT_CLASSIFICATION	0.9997041440236378	WITHOUT_CLASSIFICATION	2.958559763621055E-4	DESIGN
/* | this | bean | args | raw bean | */	WITHOUT_CLASSIFICATION	0.999369976053473	WITHOUT_CLASSIFICATION	6.300239465269491E-4	DESIGN
// invokeinterface	WITHOUT_CLASSIFICATION	0.9991367392007966	WITHOUT_CLASSIFICATION	8.632607992033527E-4	DESIGN
// astore 4 // store the raw bean	WITHOUT_CLASSIFICATION	0.9999658271310081	WITHOUT_CLASSIFICATION	3.417286899194317E-5	DESIGN
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999953460644155	WITHOUT_CLASSIFICATION	4.653935584500173E-6	DESIGN
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999953460644155	WITHOUT_CLASSIFICATION	4.653935584500173E-6	DESIGN
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.9999941961395141	WITHOUT_CLASSIFICATION	5.803860485843998E-6	DESIGN
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9998232059614207	WITHOUT_CLASSIFICATION	1.7679403857940836E-4	DESIGN
// putfield // new value of the field	WITHOUT_CLASSIFICATION	0.9998800753045157	WITHOUT_CLASSIFICATION	1.1992469548427713E-4	DESIGN
// reference type	WITHOUT_CLASSIFICATION	0.9989134889206919	WITHOUT_CLASSIFICATION	0.001086511079308133	DESIGN
// double	WITHOUT_CLASSIFICATION	0.9999708430432879	WITHOUT_CLASSIFICATION	2.9156956712108464E-5	DESIGN
// double	WITHOUT_CLASSIFICATION	0.9999708430432879	WITHOUT_CLASSIFICATION	2.9156956712108464E-5	DESIGN
// long	WITHOUT_CLASSIFICATION	0.9995476209964823	WITHOUT_CLASSIFICATION	4.523790035176654E-4	DESIGN
// just decrement the lock, don't recache // (we don't know which transaction won)	WITHOUT_CLASSIFICATION	0.9998206731584348	WITHOUT_CLASSIFICATION	1.7932684156518649E-4	DESIGN
// decode row selection...	WITHOUT_CLASSIFICATION	0.9996084349219923	WITHOUT_CLASSIFICATION	3.915650780077757E-4	DESIGN
//disassembled state gets put in a new array (we write to cache by value!)	WITHOUT_CLASSIFICATION	0.9918183143488598	WITHOUT_CLASSIFICATION	0.00818168565114023	DESIGN
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9998225167617295	WITHOUT_CLASSIFICATION	1.774832382705081E-4	DESIGN
// CHECK	WITHOUT_CLASSIFICATION	0.9996927214921896	WITHOUT_CLASSIFICATION	3.072785078103713E-4	DESIGN
// ROW ID	WITHOUT_CLASSIFICATION	0.9997027329059133	WITHOUT_CLASSIFICATION	2.97267094086795E-4	DESIGN
// COMPOSITE-ID	WITHOUT_CLASSIFICATION	0.9991367392007966	WITHOUT_CLASSIFICATION	8.632607992033527E-4	DESIGN
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9991367392007966	WITHOUT_CLASSIFICATION	8.632607992033527E-4	DESIGN
/*	WITHOUT_CLASSIFICATION	0.9442416728045828	WITHOUT_CLASSIFICATION	0.05575832719541726	DESIGN
// DYNAMIC INSERT	WITHOUT_CLASSIFICATION	0.9991603262029315	WITHOUT_CLASSIFICATION	8.396737970684152E-4	DESIGN
// PERSISTER	WITHOUT_CLASSIFICATION	0.9991367392007966	WITHOUT_CLASSIFICATION	8.632607992033527E-4	DESIGN
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9988923261275013	WITHOUT_CLASSIFICATION	0.0011076738724986898	DESIGN
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9991484519356645	WITHOUT_CLASSIFICATION	8.515480643355451E-4	DESIGN
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9991484519356645	WITHOUT_CLASSIFICATION	8.515480643355451E-4	DESIGN
// generated properties can *never* be insertable...	WITHOUT_CLASSIFICATION	0.9994128918869606	WITHOUT_CLASSIFICATION	5.871081130393596E-4	DESIGN
// TABLE	WITHOUT_CLASSIFICATION	0.9997939979814788	WITHOUT_CLASSIFICATION	2.06002018521064E-4	DESIGN
//by default, natural-ids are "immutable" (constant)	WITHOUT_CLASSIFICATION	0.9996589245923626	WITHOUT_CLASSIFICATION	3.410754076374758E-4	DESIGN
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9979192277390057	WITHOUT_CLASSIFICATION	0.002080772260994335	DESIGN
// we found some extends attributes referencing entities which were // not already processed.  here we need to locate all entity-names // and class-names contained in this document itself, making sure // that these get removed from the extendz list such that only // extends names which require us to delay processing (i.e. // external to this document and not yet processed) are contained // in the returned result	WITHOUT_CLASSIFICATION	0.6348722393750139	DESIGN	0.3651277606249861	WITHOUT_CLASSIFICATION
/**	WITHOUT_CLASSIFICATION	0.8519776918033966	DESIGN	0.1480223081966034	WITHOUT_CLASSIFICATION
//	WITHOUT_CLASSIFICATION	0.999679076858764	WITHOUT_CLASSIFICATION	3.2092314123604855E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.999679076858764	WITHOUT_CLASSIFICATION	3.2092314123604855E-4	DESIGN
/**	WITHOUT_CLASSIFICATION	0.8519776918033966	DESIGN	0.1480223081966034	WITHOUT_CLASSIFICATION
//	WITHOUT_CLASSIFICATION	0.999679076858764	WITHOUT_CLASSIFICATION	3.2092314123604855E-4	DESIGN
// If close() is called, guarantee unbind()	WITHOUT_CLASSIFICATION	0.9999627015389247	WITHOUT_CLASSIFICATION	3.7298461075183466E-5	DESIGN
// if a ThreadLocalSessionContext-bound session happens to get // serialized, to be completely correct, we need to make sure // that unbinding of that session occurs.	WITHOUT_CLASSIFICATION	0.9624436643567387	WITHOUT_CLASSIFICATION	0.03755633564326125	DESIGN
// on the inverse, it makes sense that if a ThreadLocalSessionContext- // bound session then gets deserialized to go ahead and re-bind it to // the ThreadLocalSessionContext session map.	WITHOUT_CLASSIFICATION	0.9517200960205175	WITHOUT_CLASSIFICATION	0.04827990397948241	DESIGN
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9921413664257869	WITHOUT_CLASSIFICATION	0.00785863357421315	DESIGN
// 60 second lock timeout	WITHOUT_CLASSIFICATION	0.9995665762709194	WITHOUT_CLASSIFICATION	4.33423729080618E-4	DESIGN
// OptimisticCache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995816115316317	WITHOUT_CLASSIFICATION	4.183884683683066E-4	DESIGN
// Cache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997377419583806	WITHOUT_CLASSIFICATION	2.622580416194733E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.999679076858764	WITHOUT_CLASSIFICATION	3.2092314123604855E-4	DESIGN
// do the put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9988706693150832	WITHOUT_CLASSIFICATION	0.0011293306849168082	DESIGN
//ignore!	WITHOUT_CLASSIFICATION	0.9992064434309498	WITHOUT_CLASSIFICATION	7.935565690501368E-4	DESIGN
// tree cache in optimistic mode seems to have as very difficult // time with remove calls on non-existent nodes (NPEs)...	WITHOUT_CLASSIFICATION	0.9319043569230432	WITHOUT_CLASSIFICATION	0.06809564307695685	DESIGN
//60 seconds	WITHOUT_CLASSIFICATION	0.9981514438831923	WITHOUT_CLASSIFICATION	0.0018485561168077149	DESIGN
//ignore!	WITHOUT_CLASSIFICATION	0.9992064434309498	WITHOUT_CLASSIFICATION	7.935565690501368E-4	DESIGN
//60 seconds	WITHOUT_CLASSIFICATION	0.9981514438831923	WITHOUT_CLASSIFICATION	0.0018485561168077149	DESIGN
//do the failfast put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9991610422992023	WITHOUT_CLASSIFICATION	8.389577007977653E-4	DESIGN
// NOTE : evict() operates locally only (i.e., does not propogate // to any other nodes in the potential cluster).  This is // exactly what is needed when we destroy() here; destroy() is used // as part of the process of shutting down a SessionFactory; thus // these removals should not be propogated	WITHOUT_CLASSIFICATION	0.9994695825830407	DESIGN	5.304174169592942E-4	WITHOUT_CLASSIFICATION
//    protected RegionRootListener listener;	WITHOUT_CLASSIFICATION	0.9986722000075186	WITHOUT_CLASSIFICATION	0.0013277999924814624	DESIGN
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999270304364045	WITHOUT_CLASSIFICATION	7.296956359548154E-5	DESIGN
// If we've been blocking for the mutex, perhaps another // thread has already reestablished the root. // In case the node was reestablised via replication, confirm it's  // marked "resident" (a status which doesn't replicate)	WITHOUT_CLASSIFICATION	0.9999896814694202	WITHOUT_CLASSIFICATION	1.0318530579731189E-5	DESIGN
// For pessimistic locking, we just want to toss out our ref // to any old invalid root node and get the latest (may be null)            	WITHOUT_CLASSIFICATION	0.9999372642730151	WITHOUT_CLASSIFICATION	6.273572698486094E-5	DESIGN
// The rest only matters for optimistic locking, where we // need to establish the proper data version on the region root	WITHOUT_CLASSIFICATION	0.9998457345402821	WITHOUT_CLASSIFICATION	1.5426545971796254E-4	DESIGN
// Don't hold a transactional lock for this 	WITHOUT_CLASSIFICATION	0.9881475775301896	WITHOUT_CLASSIFICATION	0.011852422469810487	DESIGN
// Make sure the root node for the region exists and  // has a DataVersion that never complains	WITHOUT_CLASSIFICATION	0.9999625245864765	WITHOUT_CLASSIFICATION	3.7475413523512744E-5	DESIGN
// Never evict this node	WITHOUT_CLASSIFICATION	0.9982924656181549	WITHOUT_CLASSIFICATION	0.0017075343818451973	DESIGN
// Fix up the resident flag	WITHOUT_CLASSIFICATION	0.9971570678805244	WITHOUT_CLASSIFICATION	0.0028429321194756944	DESIGN
// 60 seconds	WITHOUT_CLASSIFICATION	0.9992555810993667	WITHOUT_CLASSIFICATION	7.444189006333042E-4	DESIGN
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.999983619157951	WITHOUT_CLASSIFICATION	1.6380842049077942E-5	DESIGN
// no-op. We don't own the cache so we shouldn't stop it.	WITHOUT_CLASSIFICATION	0.9808811436122483	WITHOUT_CLASSIFICATION	0.019118856387751664	DESIGN
// This should only be possible if the caches are constructor injected 	WITHOUT_CLASSIFICATION	0.974680620487061	WITHOUT_CLASSIFICATION	0.02531937951293896	DESIGN
// We only build caches if *none* were passed in.  Passing in // caches counts as a clear statement of exactly what is wanted	WITHOUT_CLASSIFICATION	0.9997571104734534	WITHOUT_CLASSIFICATION	2.428895265465574E-4	DESIGN
// Set up the cache factory	WITHOUT_CLASSIFICATION	0.9978321234533637	WITHOUT_CLASSIFICATION	0.0021678765466363113	DESIGN
// See if the user configured a multiplexer stack	WITHOUT_CLASSIFICATION	0.9999859950411354	WITHOUT_CLASSIFICATION	1.4004958864729713E-5	DESIGN
// Default to collections sharing entity cache if there is one	WITHOUT_CLASSIFICATION	0.9998115232172794	WITHOUT_CLASSIFICATION	1.8847678272067875E-4	DESIGN
// Default to sharing the entity cache if there is one	WITHOUT_CLASSIFICATION	0.999868636950458	WITHOUT_CLASSIFICATION	1.3136304954206943E-4	DESIGN
// For Timestamps, we default to a separate config	WITHOUT_CLASSIFICATION	0.9984973403959818	WITHOUT_CLASSIFICATION	0.0015026596040181338	DESIGN
// We can't change the TM on a running cache; just check // if the cache has no TM and we're OK with that	WITHOUT_CLASSIFICATION	0.9999636585530248	WITHOUT_CLASSIFICATION	3.634144697519686E-5	DESIGN
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9988600501537485	WITHOUT_CLASSIFICATION	0.0011399498462514527	DESIGN
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9991479265310682	WITHOUT_CLASSIFICATION	8.520734689317519E-4	DESIGN
// This method should be implemented assuming it's valid to  // do start/stop/start -- leave state appropriate for another start	WITHOUT_CLASSIFICATION	0.6379871494348719	DESIGN	0.3620128505651283	WITHOUT_CLASSIFICATION
// Make sure we don't re-release the same cache	WITHOUT_CLASSIFICATION	0.9905482206263378	WITHOUT_CLASSIFICATION	0.009451779373662185	DESIGN
// We use a different delegate than the non-optimistic superclass default	WITHOUT_CLASSIFICATION	0.9994499189864875	WITHOUT_CLASSIFICATION	5.500810135124233E-4	DESIGN
// Following methods we don't delegate since they have so little logic // it's clearer to just implement them here	WITHOUT_CLASSIFICATION	0.9890655764710373	WITHOUT_CLASSIFICATION	0.010934423528962628	DESIGN
// If JBC is using INVALIDATION, we don't want to propagate changes. // We use the Timestamps cache to manage invalidation	WITHOUT_CLASSIFICATION	0.9978883829701821	WITHOUT_CLASSIFICATION	0.0021116170298178835	DESIGN
// We don't want to waste effort setting an option if JBC is // already in LOCAL mode. If JBC is REPL_(A)SYNC then check // if they passed an config option to disable query replication	WITHOUT_CLASSIFICATION	0.999999247910523	WITHOUT_CLASSIFICATION	7.52089476919317E-7	DESIGN
// Don't hold the JBC node lock throughout the tx, as that // prevents updates // Add a zero (or low) timeout option so we don't block // waiting for tx's that did a put to commit	WITHOUT_CLASSIFICATION	0.9999996556173227	WITHOUT_CLASSIFICATION	3.443826773638535E-7	DESIGN
// Double check the distributed cache	WITHOUT_CLASSIFICATION	0.9999788879826017	WITHOUT_CLASSIFICATION	2.111201739835915E-5	DESIGN
// Get an exclusive right to update JBC for this key from this node.	WITHOUT_CLASSIFICATION	0.9995024981569173	WITHOUT_CLASSIFICATION	4.975018430828559E-4	DESIGN
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9995496996282431	WITHOUT_CLASSIFICATION	4.5030037175687777E-4	DESIGN
// Initial load from JBC	WITHOUT_CLASSIFICATION	0.9988911727437215	WITHOUT_CLASSIFICATION	0.0011088272562784426	DESIGN
// See if we had a 2nd invalidation from the same initial // preinvalidation timestamp. If so, only increment // if the new current value is an increase	WITHOUT_CLASSIFICATION	0.9999997536406546	WITHOUT_CLASSIFICATION	2.4635934538498335E-7	DESIGN
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9995496996282431	WITHOUT_CLASSIFICATION	4.5030037175687777E-4	DESIGN
// If the workspace node has null as well, OK; if not we've // been modified in a non-comparable manner, which we have to // treat as us being newer	WITHOUT_CLASSIFICATION	0.9999975507310324	WITHOUT_CLASSIFICATION	2.4492689676097E-6	DESIGN
// The standard comparator types are not Serializable but are singletons	WITHOUT_CLASSIFICATION	0.9998288237745011	WITHOUT_CLASSIFICATION	1.7117622549892302E-4	DESIGN
// ignore!	WITHOUT_CLASSIFICATION	0.999679076858764	WITHOUT_CLASSIFICATION	3.2092314123604855E-4	DESIGN
// ignore it	WITHOUT_CLASSIFICATION	0.9996070875600416	WITHOUT_CLASSIFICATION	3.929124399583953E-4	DESIGN
// construct the cache	WITHOUT_CLASSIFICATION	0.9993484306238304	WITHOUT_CLASSIFICATION	6.515693761696226E-4	DESIGN
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9990441941963997	WITHOUT_CLASSIFICATION	9.55805803600384E-4	DESIGN
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9990441941963997	WITHOUT_CLASSIFICATION	9.55805803600384E-4	DESIGN
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9981604000972266	WITHOUT_CLASSIFICATION	0.0018395999027732925	DESIGN
//swaldman 2006-08-28: define c3p0-style configuration parameters for initialPoolSize, which //                     hibernate sensibly lets default to minPoolSize, but we'll let users //                     override it with the c3p0-style property if they want.	WITHOUT_CLASSIFICATION	0.9998221247031363	WITHOUT_CLASSIFICATION	1.7787529686372677E-4	DESIGN
/*DataSource unpooled = DataSources.unpooledDataSource(	WITHOUT_CLASSIFICATION	0.9996088335948893	WITHOUT_CLASSIFICATION	3.911664051107176E-4	DESIGN
// TRUE if the pool is borrowed from the outside, FALSE if we used to create it	WITHOUT_CLASSIFICATION	0.9673829487806369	WITHOUT_CLASSIFICATION	0.03261705121936306	DESIGN
// get a connection from the pool (thru DriverManager, cfr. Proxool doc)	WITHOUT_CLASSIFICATION	0.998954775569912	WITHOUT_CLASSIFICATION	0.0010452244300879847	DESIGN
// set the Transaction Isolation if defined	WITHOUT_CLASSIFICATION	0.9999090889101107	WITHOUT_CLASSIFICATION	9.09110898893554E-5	DESIGN
// toggle autoCommit to false if set	WITHOUT_CLASSIFICATION	0.9997974700281671	WITHOUT_CLASSIFICATION	2.0252997183296985E-4	DESIGN
// return the connection	WITHOUT_CLASSIFICATION	0.9988991291283018	WITHOUT_CLASSIFICATION	0.0011008708716982556	DESIGN
// Get the configurator files (if available)	WITHOUT_CLASSIFICATION	0.999969144269638	WITHOUT_CLASSIFICATION	3.085573036206321E-5	DESIGN
// Default the Proxool alias setting	WITHOUT_CLASSIFICATION	0.9999973748526496	WITHOUT_CLASSIFICATION	2.6251473504385383E-6	DESIGN
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999499545377227	WITHOUT_CLASSIFICATION	5.00454622772971E-5	DESIGN
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999499545377227	WITHOUT_CLASSIFICATION	5.00454622772971E-5	DESIGN
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.999983743328802	WITHOUT_CLASSIFICATION	1.6256671197947677E-5	DESIGN
// Set the existing pool flag to true	WITHOUT_CLASSIFICATION	0.9998704480306048	WITHOUT_CLASSIFICATION	1.2955196939529856E-4	DESIGN
// Configured using the JAXP Configurator	WITHOUT_CLASSIFICATION	0.9998283540382216	WITHOUT_CLASSIFICATION	1.7164596177844438E-4	DESIGN
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999499545377227	WITHOUT_CLASSIFICATION	5.00454622772971E-5	DESIGN
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.999983743328802	WITHOUT_CLASSIFICATION	1.6256671197947677E-5	DESIGN
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.999983743328802	WITHOUT_CLASSIFICATION	1.6256671197947677E-5	DESIGN
// Configured using the Properties File Configurator	WITHOUT_CLASSIFICATION	0.9999072172569571	WITHOUT_CLASSIFICATION	9.27827430428972E-5	DESIGN
// Remember Isolation level	WITHOUT_CLASSIFICATION	0.9331006678934073	WITHOUT_CLASSIFICATION	0.06689933210659268	DESIGN
// If the provider was leeching off an existing pool don't close it	WITHOUT_CLASSIFICATION	0.9999998936827098	WITHOUT_CLASSIFICATION	1.063172901753116E-7	DESIGN
// We have created the pool ourselves, so shut it down	WITHOUT_CLASSIFICATION	0.9999875858737696	WITHOUT_CLASSIFICATION	1.241412623044686E-5	DESIGN
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.9875180735252107	WITHOUT_CLASSIFICATION	0.01248192647478942	DESIGN
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.9875180735252107	WITHOUT_CLASSIFICATION	0.01248192647478942	DESIGN
//always overwrite nonversioned data	WITHOUT_CLASSIFICATION	0.9999105442551558	WITHOUT_CLASSIFICATION	8.945574484423167E-5	DESIGN
//public Currency getCurrency(int col) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9990152339050601	WITHOUT_CLASSIFICATION	9.847660949398856E-4	DESIGN
// default is POJO	WITHOUT_CLASSIFICATION	0.9993324079149667	WITHOUT_CLASSIFICATION	6.675920850332859E-4	DESIGN
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.9996742708429253	WITHOUT_CLASSIFICATION	3.2572915707469735E-4	DESIGN
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.9996742708429253	WITHOUT_CLASSIFICATION	3.2572915707469735E-4	DESIGN
//private CacheEntry cacheEntry;	WITHOUT_CLASSIFICATION	0.9989146025210405	WITHOUT_CLASSIFICATION	0.0010853974789594711	DESIGN
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9999854176328422	WITHOUT_CLASSIFICATION	1.4582367157895008E-5	DESIGN
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9953809004979383	WITHOUT_CLASSIFICATION	0.0046190995020617635	DESIGN
// get the updated snapshot of the entity state by cloning current state; // it is safe to copy in place, since by this time no-one else (should have) // has a reference  to the array	WITHOUT_CLASSIFICATION	0.9999857041409329	WITHOUT_CLASSIFICATION	1.4295859067115529E-5	DESIGN
// this entity defines proeprty generation, so process those generated // values...	WITHOUT_CLASSIFICATION	0.9992083334930456	WITHOUT_CLASSIFICATION	7.916665069544272E-4	DESIGN
// have the entity entry perform post-update processing, passing it the // update state and the new version (if one).	WITHOUT_CLASSIFICATION	0.9997273487841889	WITHOUT_CLASSIFICATION	2.7265121581104785E-4	DESIGN
/*!persister.isCacheInvalidationRequired()*/	WITHOUT_CLASSIFICATION	0.9986810053377232	WITHOUT_CLASSIFICATION	0.0013189946622768059	DESIGN
// need to look it up from the persistence-context	WITHOUT_CLASSIFICATION	0.9985174317662027	WITHOUT_CLASSIFICATION	0.001482568233797327	DESIGN
//sort first by role name	WITHOUT_CLASSIFICATION	0.9990096168287327	WITHOUT_CLASSIFICATION	9.903831712673318E-4	DESIGN
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9953809004979383	WITHOUT_CLASSIFICATION	0.0046190995020617635	DESIGN
//then by fk	WITHOUT_CLASSIFICATION	0.9992059355877954	WITHOUT_CLASSIFICATION	7.94064412204666E-4	DESIGN
// nothing to do	WITHOUT_CLASSIFICATION	0.9994354730785288	WITHOUT_CLASSIFICATION	5.645269214713163E-4	DESIGN
// nothing to do	WITHOUT_CLASSIFICATION	0.9994354730785288	WITHOUT_CLASSIFICATION	5.645269214713163E-4	DESIGN
// an existing collection that was either non-empty or uninitialized // is replaced by null or a different collection // (if the collection is uninitialized, hibernate has no way of // knowing if the collection is actually empty without querying the db)	WITHOUT_CLASSIFICATION	0.9992959463244078	WITHOUT_CLASSIFICATION	7.040536755923226E-4	DESIGN
// this method is called when a new non-null collection is persisted // or when an existing (non-null) collection is moved to a new owner	WITHOUT_CLASSIFICATION	0.9959978346434804	WITHOUT_CLASSIFICATION	0.004002165356519665	DESIGN
//	WITHOUT_CLASSIFICATION	0.999679076858764	WITHOUT_CLASSIFICATION	3.2092314123604855E-4	DESIGN
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9985577590059053	WITHOUT_CLASSIFICATION	0.001442240994094718	DESIGN
//do nothing - we only need to notify the cache...	WITHOUT_CLASSIFICATION	0.9975170780940816	WITHOUT_CLASSIFICATION	0.0024829219059183407	DESIGN
//sort first by entity name	WITHOUT_CLASSIFICATION	0.9978565026203091	WITHOUT_CLASSIFICATION	0.002143497379690931	DESIGN
//then by id	WITHOUT_CLASSIFICATION	0.9988536529723934	WITHOUT_CLASSIFICATION	0.0011463470276066106	DESIGN
// to be safe...	WITHOUT_CLASSIFICATION	0.9982650645708727	WITHOUT_CLASSIFICATION	0.0017349354291272827	DESIGN
// no transformations took place, so handle it as we would a // non-instrumented class	WITHOUT_CLASSIFICATION	0.9993498847155567	WITHOUT_CLASSIFICATION	6.501152844432775E-4	DESIGN
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999417117932098	WITHOUT_CLASSIFICATION	5.8288206790108225E-5	DESIGN
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999417117932098	WITHOUT_CLASSIFICATION	5.8288206790108225E-5	DESIGN
// intentionally empty	WITHOUT_CLASSIFICATION	0.9992846058592043	WITHOUT_CLASSIFICATION	7.153941407956005E-4	DESIGN
//test out the optimizer:	WITHOUT_CLASSIFICATION	0.9988190801196368	WITHOUT_CLASSIFICATION	0.0011809198803631785	DESIGN
// set the name of bulk accessor.	WITHOUT_CLASSIFICATION	0.9995020901037477	WITHOUT_CLASSIFICATION	4.979098962523763E-4	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.999679076858764	WITHOUT_CLASSIFICATION	3.2092314123604855E-4	DESIGN
// invokespecial	WITHOUT_CLASSIFICATION	0.9991367392007966	WITHOUT_CLASSIFICATION	8.632607992033527E-4	DESIGN
// return	WITHOUT_CLASSIFICATION	0.9997041440236378	WITHOUT_CLASSIFICATION	2.958559763621055E-4	DESIGN
// aload_1 // load bean	WITHOUT_CLASSIFICATION	0.9991391587118506	WITHOUT_CLASSIFICATION	8.608412881494535E-4	DESIGN
// checkcast // cast bean	WITHOUT_CLASSIFICATION	0.9979302096873885	WITHOUT_CLASSIFICATION	0.0020697903126114985	DESIGN
// astore_3 // store bean	WITHOUT_CLASSIFICATION	0.9998233987991408	WITHOUT_CLASSIFICATION	1.7660120085927198E-4	DESIGN
// aload_2 // args	WITHOUT_CLASSIFICATION	0.9989659834828608	WITHOUT_CLASSIFICATION	0.0010340165171391906	DESIGN
// iconst_i // continue to aastore // growing stack is 1	WITHOUT_CLASSIFICATION	0.9999335223745218	WITHOUT_CLASSIFICATION	6.647762547818839E-5	DESIGN
// new	WITHOUT_CLASSIFICATION	0.999814721319783	WITHOUT_CLASSIFICATION	1.8527868021689581E-4	DESIGN
// dup	WITHOUT_CLASSIFICATION	0.9997120717971201	WITHOUT_CLASSIFICATION	2.879282028799017E-4	DESIGN
// aload_3 // load the raw bean	WITHOUT_CLASSIFICATION	0.9998713179370624	WITHOUT_CLASSIFICATION	1.2868206293765148E-4	DESIGN
// invokeinterface	WITHOUT_CLASSIFICATION	0.9991367392007966	WITHOUT_CLASSIFICATION	8.632607992033527E-4	DESIGN
// invokevirtual	WITHOUT_CLASSIFICATION	0.9991367392007966	WITHOUT_CLASSIFICATION	8.632607992033527E-4	DESIGN
// invokevirtual	WITHOUT_CLASSIFICATION	0.9991367392007966	WITHOUT_CLASSIFICATION	8.632607992033527E-4	DESIGN
// aastore // args	WITHOUT_CLASSIFICATION	0.9989659834828608	WITHOUT_CLASSIFICATION	0.0010340165171391906	DESIGN
/* | this | bean | args | i | raw bean | exception | */	WITHOUT_CLASSIFICATION	0.9984328141704694	WITHOUT_CLASSIFICATION	0.0015671858295305686	DESIGN
// required to exception table // iconst_0 // i	WITHOUT_CLASSIFICATION	0.9997099791107986	WITHOUT_CLASSIFICATION	2.90020889201349E-4	DESIGN
// istore_3 // store i	WITHOUT_CLASSIFICATION	0.9998009381546072	WITHOUT_CLASSIFICATION	1.9906184539272457E-4	DESIGN
// aload_1 // load the bean	WITHOUT_CLASSIFICATION	0.9995178503668191	WITHOUT_CLASSIFICATION	4.8214963318085987E-4	DESIGN
// checkcast // cast the bean into a raw bean	WITHOUT_CLASSIFICATION	0.9990011384273013	WITHOUT_CLASSIFICATION	9.988615726986504E-4	DESIGN
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999953460644155	WITHOUT_CLASSIFICATION	4.653935584500173E-6	DESIGN
// start region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9973911872114358	WITHOUT_CLASSIFICATION	0.0026088127885641405	DESIGN
// iinc 3, 1	WITHOUT_CLASSIFICATION	0.9996763799429697	WITHOUT_CLASSIFICATION	3.236200570304055E-4	DESIGN
// aload 4 // load the raw bean	WITHOUT_CLASSIFICATION	0.9998333326053926	WITHOUT_CLASSIFICATION	1.666673946073037E-4	DESIGN
// aload_2 // load the args	WITHOUT_CLASSIFICATION	0.9994321950416749	WITHOUT_CLASSIFICATION	5.678049583250979E-4	DESIGN
// iconst_i	WITHOUT_CLASSIFICATION	0.9991367392007966	WITHOUT_CLASSIFICATION	8.632607992033527E-4	DESIGN
// aaload	WITHOUT_CLASSIFICATION	0.999679076858764	WITHOUT_CLASSIFICATION	3.2092314123604855E-4	DESIGN
// checkcast	WITHOUT_CLASSIFICATION	0.9991373473268566	WITHOUT_CLASSIFICATION	8.626526731434046E-4	DESIGN
// checkcast (case of primitive type) // invokevirtual (case of primitive type)	WITHOUT_CLASSIFICATION	0.9997342989260529	WITHOUT_CLASSIFICATION	2.657010739471076E-4	DESIGN
// checkcast (case of reference type)	WITHOUT_CLASSIFICATION	0.9996764623021172	WITHOUT_CLASSIFICATION	3.2353769788283343E-4	DESIGN
/* current stack len = 2 */	WITHOUT_CLASSIFICATION	0.9999940392118877	WITHOUT_CLASSIFICATION	5.960788112248613E-6	DESIGN
// end region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9953042229219589	WITHOUT_CLASSIFICATION	0.004695777078041132	DESIGN
// register in exception table	WITHOUT_CLASSIFICATION	0.9991863956282284	WITHOUT_CLASSIFICATION	8.136043717715255E-4	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.999679076858764	WITHOUT_CLASSIFICATION	3.2092314123604855E-4	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.999679076858764	WITHOUT_CLASSIFICATION	3.2092314123604855E-4	DESIGN
// return	WITHOUT_CLASSIFICATION	0.9997041440236378	WITHOUT_CLASSIFICATION	2.958559763621055E-4	DESIGN
// return	WITHOUT_CLASSIFICATION	0.9997041440236378	WITHOUT_CLASSIFICATION	2.958559763621055E-4	DESIGN
// dup	WITHOUT_CLASSIFICATION	0.9997120717971201	WITHOUT_CLASSIFICATION	2.879282028799017E-4	DESIGN
// invokevirtual	WITHOUT_CLASSIFICATION	0.9991367392007966	WITHOUT_CLASSIFICATION	8.632607992033527E-4	DESIGN
// checkcast	WITHOUT_CLASSIFICATION	0.9991373473268566	WITHOUT_CLASSIFICATION	8.626526731434046E-4	DESIGN
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.9999941961395141	WITHOUT_CLASSIFICATION	5.803860485843998E-6	DESIGN
// astore 5 // store exception	WITHOUT_CLASSIFICATION	0.9997983795259459	WITHOUT_CLASSIFICATION	2.016204740541319E-4	DESIGN
// new // BulkAccessorException	WITHOUT_CLASSIFICATION	0.9996919184533903	WITHOUT_CLASSIFICATION	3.0808154660966604E-4	DESIGN
// aload 5 // load exception	WITHOUT_CLASSIFICATION	0.9990172977209699	WITHOUT_CLASSIFICATION	9.827022790300786E-4	DESIGN
// iload_3 // i	WITHOUT_CLASSIFICATION	0.9990103165224393	WITHOUT_CLASSIFICATION	9.896834775606498E-4	DESIGN
// invokespecial // BulkAccessorException.<init>	WITHOUT_CLASSIFICATION	0.9994664167093965	WITHOUT_CLASSIFICATION	5.335832906034879E-4	DESIGN
// athrow	WITHOUT_CLASSIFICATION	0.999679076858764	WITHOUT_CLASSIFICATION	3.2092314123604855E-4	DESIGN
// WARNING: classfile only	WITHOUT_CLASSIFICATION	0.9997320304296083	WITHOUT_CLASSIFICATION	2.679695703917224E-4	DESIGN
//swallow	WITHOUT_CLASSIFICATION	0.9992064434309498	WITHOUT_CLASSIFICATION	7.935565690501368E-4	DESIGN
/* local variable | this | */	WITHOUT_CLASSIFICATION	0.9955327767035915	WITHOUT_CLASSIFICATION	0.004467223296408498	DESIGN
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.995032850028949	WITHOUT_CLASSIFICATION	0.004967149971050932	DESIGN
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.995032850028949	WITHOUT_CLASSIFICATION	0.004967149971050932	DESIGN
// getfield // get field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9995249589365701	WITHOUT_CLASSIFICATION	4.750410634299087E-4	DESIGN
// areturn // return the value of the field	WITHOUT_CLASSIFICATION	0.9998084948466208	WITHOUT_CLASSIFICATION	1.9150515337929236E-4	DESIGN
/* local variables | this | callback | */	WITHOUT_CLASSIFICATION	0.9967531903060403	WITHOUT_CLASSIFICATION	0.003246809693959658	DESIGN
// aload_1 // load callback	WITHOUT_CLASSIFICATION	0.9989682375976497	WITHOUT_CLASSIFICATION	0.0010317624023501695	DESIGN
// putfield // put field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9990829215442272	WITHOUT_CLASSIFICATION	9.170784557728387E-4	DESIGN
// case of non-static field	WITHOUT_CLASSIFICATION	0.9997741480523173	WITHOUT_CLASSIFICATION	2.2585194768265975E-4	DESIGN
// getfield // get each field	WITHOUT_CLASSIFICATION	0.9996482635465032	WITHOUT_CLASSIFICATION	3.5173645349677784E-4	DESIGN
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9998232059614207	WITHOUT_CLASSIFICATION	1.7679403857940836E-4	DESIGN
// ifnonnull	WITHOUT_CLASSIFICATION	0.9991367392007966	WITHOUT_CLASSIFICATION	8.632607992033527E-4	DESIGN
// *return // each type	WITHOUT_CLASSIFICATION	0.9994347056078188	WITHOUT_CLASSIFICATION	5.652943921812829E-4	DESIGN
// *return // each type	WITHOUT_CLASSIFICATION	0.9994347056078188	WITHOUT_CLASSIFICATION	5.652943921812829E-4	DESIGN
// *store_1 // each type	WITHOUT_CLASSIFICATION	0.9994347056078188	WITHOUT_CLASSIFICATION	5.652943921812829E-4	DESIGN
// ldc // name of the field	WITHOUT_CLASSIFICATION	0.9991444678643252	WITHOUT_CLASSIFICATION	8.555321356748441E-4	DESIGN
// *load_1 // each type	WITHOUT_CLASSIFICATION	0.9994347056078188	WITHOUT_CLASSIFICATION	5.652943921812829E-4	DESIGN
// invokeinterface // invoke Callback.read*() // each type	WITHOUT_CLASSIFICATION	0.9998950372757749	WITHOUT_CLASSIFICATION	1.0496272422514419E-4	DESIGN
// int	WITHOUT_CLASSIFICATION	0.9998776681432648	WITHOUT_CLASSIFICATION	1.2233185673519146E-4	DESIGN
// return	WITHOUT_CLASSIFICATION	0.9997041440236378	WITHOUT_CLASSIFICATION	2.958559763621055E-4	DESIGN
// dup	WITHOUT_CLASSIFICATION	0.9997120717971201	WITHOUT_CLASSIFICATION	2.879282028799017E-4	DESIGN
// invokeinterface	WITHOUT_CLASSIFICATION	0.9991367392007966	WITHOUT_CLASSIFICATION	8.632607992033527E-4	DESIGN
// checkcast	WITHOUT_CLASSIFICATION	0.9991373473268566	WITHOUT_CLASSIFICATION	8.626526731434046E-4	DESIGN
// checkcast	WITHOUT_CLASSIFICATION	0.9991373473268566	WITHOUT_CLASSIFICATION	8.626526731434046E-4	DESIGN
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9994664167093965	WITHOUT_CLASSIFICATION	5.335832906034879E-4	DESIGN
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9994664167093965	WITHOUT_CLASSIFICATION	5.335832906034879E-4	DESIGN
// ifnonnull (label1)	WITHOUT_CLASSIFICATION	0.9990481458842871	WITHOUT_CLASSIFICATION	9.518541157127762E-4	DESIGN
// *load_1	WITHOUT_CLASSIFICATION	0.999679076858764	WITHOUT_CLASSIFICATION	3.2092314123604855E-4	DESIGN
// *load_1	WITHOUT_CLASSIFICATION	0.999679076858764	WITHOUT_CLASSIFICATION	3.2092314123604855E-4	DESIGN
// putfield	WITHOUT_CLASSIFICATION	0.9991367392007966	WITHOUT_CLASSIFICATION	8.632607992033527E-4	DESIGN
// return ;	WITHOUT_CLASSIFICATION	0.999237644850129	WITHOUT_CLASSIFICATION	7.623551498709344E-4	DESIGN
// ldc // field name	WITHOUT_CLASSIFICATION	0.9983805719875251	WITHOUT_CLASSIFICATION	0.0016194280124748803	DESIGN
// getfield // old value of the field	WITHOUT_CLASSIFICATION	0.9998782631537051	WITHOUT_CLASSIFICATION	1.2173684629494329E-4	DESIGN
// invokeinterface // callback.write*(..)	WITHOUT_CLASSIFICATION	0.9994664167093965	WITHOUT_CLASSIFICATION	5.335832906034879E-4	DESIGN
// reference type	WITHOUT_CLASSIFICATION	0.9989134889206919	WITHOUT_CLASSIFICATION	0.001086511079308133	DESIGN
// reference type	WITHOUT_CLASSIFICATION	0.9989134889206919	WITHOUT_CLASSIFICATION	0.001086511079308133	DESIGN
// not array	WITHOUT_CLASSIFICATION	0.9970906996354503	WITHOUT_CLASSIFICATION	0.00290930036454979	DESIGN
// array of reference type	WITHOUT_CLASSIFICATION	0.9990836935130826	WITHOUT_CLASSIFICATION	9.163064869173938E-4	DESIGN
// boolean	WITHOUT_CLASSIFICATION	0.999884526629	WITHOUT_CLASSIFICATION	1.1547337100014251E-4	DESIGN
// byte	WITHOUT_CLASSIFICATION	0.9997748341567874	WITHOUT_CLASSIFICATION	2.2516584321267258E-4	DESIGN
// char	WITHOUT_CLASSIFICATION	0.9998711659482786	WITHOUT_CLASSIFICATION	1.2883405172130406E-4	DESIGN
// short	WITHOUT_CLASSIFICATION	0.9993807971260085	WITHOUT_CLASSIFICATION	6.192028739914676E-4	DESIGN
// double	WITHOUT_CLASSIFICATION	0.9999708430432879	WITHOUT_CLASSIFICATION	2.9156956712108464E-5	DESIGN
// float	WITHOUT_CLASSIFICATION	0.9996947951516755	WITHOUT_CLASSIFICATION	3.052048483245313E-4	DESIGN
// float	WITHOUT_CLASSIFICATION	0.9996947951516755	WITHOUT_CLASSIFICATION	3.052048483245313E-4	DESIGN
// long	WITHOUT_CLASSIFICATION	0.9995476209964823	WITHOUT_CLASSIFICATION	4.523790035176654E-4	DESIGN
// long	WITHOUT_CLASSIFICATION	0.9995476209964823	WITHOUT_CLASSIFICATION	4.523790035176654E-4	DESIGN
// bad type	WITHOUT_CLASSIFICATION	0.9958759427942082	WITHOUT_CLASSIFICATION	0.004124057205791756	DESIGN
// bad type	WITHOUT_CLASSIFICATION	0.9958759427942082	WITHOUT_CLASSIFICATION	0.004124057205791756	DESIGN
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9987934116393438	WITHOUT_CLASSIFICATION	0.0012065883606561603	DESIGN
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9987934116393438	WITHOUT_CLASSIFICATION	0.0012065883606561603	DESIGN
// reference type	WITHOUT_CLASSIFICATION	0.9989134889206919	WITHOUT_CLASSIFICATION	0.001086511079308133	DESIGN
// double	WITHOUT_CLASSIFICATION	0.9999708430432879	WITHOUT_CLASSIFICATION	2.9156956712108464E-5	DESIGN
// float	WITHOUT_CLASSIFICATION	0.9996947951516755	WITHOUT_CLASSIFICATION	3.052048483245313E-4	DESIGN
// float	WITHOUT_CLASSIFICATION	0.9996947951516755	WITHOUT_CLASSIFICATION	3.052048483245313E-4	DESIGN
// long	WITHOUT_CLASSIFICATION	0.9995476209964823	WITHOUT_CLASSIFICATION	4.523790035176654E-4	DESIGN
// bad type	WITHOUT_CLASSIFICATION	0.9958759427942082	WITHOUT_CLASSIFICATION	0.004124057205791756	DESIGN
// bad type	WITHOUT_CLASSIFICATION	0.9958759427942082	WITHOUT_CLASSIFICATION	0.004124057205791756	DESIGN
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9987934116393438	WITHOUT_CLASSIFICATION	0.0012065883606561603	DESIGN
// skip finalize methods	WITHOUT_CLASSIFICATION	0.9993827330773396	WITHOUT_CLASSIFICATION	6.172669226604635E-4	DESIGN
//Mainly for OSCache	WITHOUT_CLASSIFICATION	0.9977284505824588	WITHOUT_CLASSIFICATION	0.0022715494175411266	DESIGN
//decrement the lock	WITHOUT_CLASSIFICATION	0.9988991356886057	WITHOUT_CLASSIFICATION	0.0011008643113943827	DESIGN
// create new lock that times out immediately	WITHOUT_CLASSIFICATION	0.9998035576975343	WITHOUT_CLASSIFICATION	1.9644230246576236E-4	DESIGN
//recache the updated state	WITHOUT_CLASSIFICATION	0.9994442004938848	WITHOUT_CLASSIFICATION	5.557995061151412E-4	DESIGN
// noop	WITHOUT_CLASSIFICATION	0.9997121733978134	WITHOUT_CLASSIFICATION	2.8782660218670163E-4	DESIGN
//null clientLock is remotely possible but will never happen in practice	WITHOUT_CLASSIFICATION	0.9998357136515272	WITHOUT_CLASSIFICATION	1.642863484726327E-4	DESIGN
// we really could refresh the item if it // is not a lock, but it might be slower //return freshTimestamp < txTimestamp	WITHOUT_CLASSIFICATION	0.9196817022954895	WITHOUT_CLASSIFICATION	0.08031829770451039	DESIGN
//by requiring <, we rely on lock timeout in the case of an unsuccessful update!	WITHOUT_CLASSIFICATION	0.9997678562251243	WITHOUT_CLASSIFICATION	2.3214377487571842E-4	DESIGN
// the user provided resulttransformer, not the one used with "select new". Here to avoid mangling // transformed/non-transformed results.	WITHOUT_CLASSIFICATION	0.9996236691580203	WITHOUT_CLASSIFICATION	3.7633084197967773E-4	DESIGN
// disassemble positional parameters	WITHOUT_CLASSIFICATION	0.9999314992387012	WITHOUT_CLASSIFICATION	6.850076129883436E-5	DESIGN
// disassemble named parameters	WITHOUT_CLASSIFICATION	0.9999470569417636	WITHOUT_CLASSIFICATION	5.294305823644889E-5	DESIGN
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9981604000972266	WITHOUT_CLASSIFICATION	0.0018395999027732925	DESIGN
// noop	WITHOUT_CLASSIFICATION	0.9997121733978134	WITHOUT_CLASSIFICATION	2.8782660218670163E-4	DESIGN
//noop	WITHOUT_CLASSIFICATION	0.9997391175369804	WITHOUT_CLASSIFICATION	2.6088246301966784E-4	DESIGN
//noop	WITHOUT_CLASSIFICATION	0.9997391175369804	WITHOUT_CLASSIFICATION	2.6088246301966784E-4	DESIGN
// this is called from SettingsFactory irregardless; trivial to simply disregard	WITHOUT_CLASSIFICATION	0.9848691655835993	WITHOUT_CLASSIFICATION	0.015130834416400655	DESIGN
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9975833021675996	WITHOUT_CLASSIFICATION	0.0024166978324003845	DESIGN
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9975833021675996	WITHOUT_CLASSIFICATION	0.0024166978324003845	DESIGN
//throw new UnsupportedOperationException("Can't write to a readonly object");	WITHOUT_CLASSIFICATION	0.9990834533692102	WITHOUT_CLASSIFICATION	9.16546630789717E-4	DESIGN
//assembled state gets put in a new array (we read from cache by value!)	WITHOUT_CLASSIFICATION	0.9934117489963964	WITHOUT_CLASSIFICATION	0.006588251003603688	DESIGN
//persister.setIdentifier(result, id); //before calling interceptor, for consistency with normal load	WITHOUT_CLASSIFICATION	0.9970975699644187	WITHOUT_CLASSIFICATION	0.002902430035581346	DESIGN
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9992055504818133	WITHOUT_CLASSIFICATION	7.944495181867946E-4	DESIGN
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9992055504818133	WITHOUT_CLASSIFICATION	7.944495181867946E-4	DESIGN
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9998225167617295	WITHOUT_CLASSIFICATION	1.774832382705081E-4	DESIGN
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9998590468970289	WITHOUT_CLASSIFICATION	1.409531029710897E-4	DESIGN
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9998590468970289	WITHOUT_CLASSIFICATION	1.409531029710897E-4	DESIGN
// classes mentioned in extends not available - so put it in queue	WITHOUT_CLASSIFICATION	0.9911508641821586	WITHOUT_CLASSIFICATION	0.00884913581784137	DESIGN
// get meta's from <hibernate-mapping>	WITHOUT_CLASSIFICATION	0.9993790258711844	WITHOUT_CLASSIFICATION	6.209741288155361E-4	DESIGN
// get meta's from <class>	WITHOUT_CLASSIFICATION	0.9988923261275013	WITHOUT_CLASSIFICATION	0.0011076738724986898	DESIGN
// DB-OBJECTNAME	WITHOUT_CLASSIFICATION	0.9991367392007966	WITHOUT_CLASSIFICATION	8.632607992033527E-4	DESIGN
// MUTABLE	WITHOUT_CLASSIFICATION	0.999679076858764	WITHOUT_CLASSIFICATION	3.2092314123604855E-4	DESIGN
// WHERE	WITHOUT_CLASSIFICATION	0.9999170919010041	WITHOUT_CLASSIFICATION	8.290809899595359E-5	DESIGN
// CHECK	WITHOUT_CLASSIFICATION	0.9996927214921896	WITHOUT_CLASSIFICATION	3.072785078103713E-4	DESIGN
// POLYMORPHISM	WITHOUT_CLASSIFICATION	0.9991367392007966	WITHOUT_CLASSIFICATION	8.632607992033527E-4	DESIGN
// TODO:	WITHOUT_CLASSIFICATION	0.5494286489561353	WITHOUT_CLASSIFICATION	0.4505713510438648	DESIGN
// ID	WITHOUT_CLASSIFICATION	0.9996988063290048	WITHOUT_CLASSIFICATION	3.011936709952699E-4	DESIGN
// VERSION / TIMESTAMP	WITHOUT_CLASSIFICATION	0.9995416403512295	WITHOUT_CLASSIFICATION	4.5835964877044246E-4	DESIGN
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9991367392007966	WITHOUT_CLASSIFICATION	8.632607992033527E-4	DESIGN
// Primary key constraint	WITHOUT_CLASSIFICATION	0.9989008585407224	WITHOUT_CLASSIFICATION	0.001099141459277504	DESIGN
// this is either a <version/> tag with no type attribute, // or a <timestamp/> tag	WITHOUT_CLASSIFICATION	0.9997463926707663	WITHOUT_CLASSIFICATION	2.536073292337988E-4	DESIGN
// for version properties marked as being generated, make sure they are "always" // generated; aka, "insert" is invalid; this is dis-allowed by the DTD, // but just to make sure...	WITHOUT_CLASSIFICATION	0.9994763828085693	WITHOUT_CLASSIFICATION	5.236171914306062E-4	DESIGN
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9991367392007966	WITHOUT_CLASSIFICATION	8.632607992033527E-4	DESIGN
// ( (Column) discrim.getColumnIterator().next() ).setType(type);	WITHOUT_CLASSIFICATION	0.9979192277390057	WITHOUT_CLASSIFICATION	0.002080772260994335	DESIGN
// go ahead and set the lazy here, since pojo.proxy can override it.	WITHOUT_CLASSIFICATION	0.9999819469365846	WITHOUT_CLASSIFICATION	1.805306341535714E-5	DESIGN
// DYNAMIC UPDATE	WITHOUT_CLASSIFICATION	0.9991665462911817	WITHOUT_CLASSIFICATION	8.334537088183034E-4	DESIGN
// IMPORT	WITHOUT_CLASSIFICATION	0.9996876262706473	WITHOUT_CLASSIFICATION	3.1237372935271593E-4	DESIGN
// BATCH SIZE	WITHOUT_CLASSIFICATION	0.9991417356030453	WITHOUT_CLASSIFICATION	8.582643969546447E-4	DESIGN
// SELECT BEFORE UPDATE	WITHOUT_CLASSIFICATION	0.9991197239102316	WITHOUT_CLASSIFICATION	8.802760897683977E-4	DESIGN
// OPTIMISTIC LOCK MODE	WITHOUT_CLASSIFICATION	0.9990570624382157	WITHOUT_CLASSIFICATION	9.429375617843704E-4	DESIGN
// PERSISTER	WITHOUT_CLASSIFICATION	0.9991367392007966	WITHOUT_CLASSIFICATION	8.632607992033527E-4	DESIGN
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9991736859356127	WITHOUT_CLASSIFICATION	8.263140643872817E-4	DESIGN
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9988923261275013	WITHOUT_CLASSIFICATION	0.0011076738724986898	DESIGN
// properties	WITHOUT_CLASSIFICATION	0.9997668100550492	WITHOUT_CLASSIFICATION	2.3318994495065756E-4	DESIGN
// joined subclasses	WITHOUT_CLASSIFICATION	0.9997552017239194	WITHOUT_CLASSIFICATION	2.4479827608066284E-4	DESIGN
// KEY	WITHOUT_CLASSIFICATION	0.9997247427283911	WITHOUT_CLASSIFICATION	2.752572716089269E-4	DESIGN
// CHECK	WITHOUT_CLASSIFICATION	0.9996927214921896	WITHOUT_CLASSIFICATION	3.072785078103713E-4	DESIGN
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9991736859356127	WITHOUT_CLASSIFICATION	8.263140643872817E-4	DESIGN
// properties	WITHOUT_CLASSIFICATION	0.9997668100550492	WITHOUT_CLASSIFICATION	2.3318994495065756E-4	DESIGN
// KEY	WITHOUT_CLASSIFICATION	0.9997247427283911	WITHOUT_CLASSIFICATION	2.752572716089269E-4	DESIGN
// model.getKey().setType( new Type( model.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9991354048456665	WITHOUT_CLASSIFICATION	8.645951543334845E-4	DESIGN
// TABLENAME	WITHOUT_CLASSIFICATION	0.9991367392007966	WITHOUT_CLASSIFICATION	8.632607992033527E-4	DESIGN
// join.getKey().setType( new Type( lazz.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9991354048456665	WITHOUT_CLASSIFICATION	8.645951543334845E-4	DESIGN
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9991484519356645	WITHOUT_CLASSIFICATION	8.515480643355451E-4	DESIGN
// COLUMN(S)	WITHOUT_CLASSIFICATION	0.9991367392007966	WITHOUT_CLASSIFICATION	8.632607992033527E-4	DESIGN
// column index	WITHOUT_CLASSIFICATION	0.9999789950141865	WITHOUT_CLASSIFICATION	2.1004985813383125E-5	DESIGN
//column unique-key	WITHOUT_CLASSIFICATION	0.997875336659396	WITHOUT_CLASSIFICATION	0.002124663340603951	DESIGN
// automatically makes a column with the default name if none is specifed by XML	WITHOUT_CLASSIFICATION	0.9974970081647622	WITHOUT_CLASSIFICATION	0.0025029918352379465	DESIGN
// for an any	WITHOUT_CLASSIFICATION	0.9995588329709165	WITHOUT_CLASSIFICATION	4.411670290835011E-4	DESIGN
// insertable simply because that is the user did not specify // anything; just override it	WITHOUT_CLASSIFICATION	0.999990058278734	WITHOUT_CLASSIFICATION	9.941721266022812E-6	DESIGN
// the user specifically supplied insert="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999668064247849	WITHOUT_CLASSIFICATION	3.319357521509682E-5	DESIGN
// properties generated on update can never be updateable...	WITHOUT_CLASSIFICATION	0.9997257515641126	WITHOUT_CLASSIFICATION	2.742484358873933E-4	DESIGN
// updateable only because the user did not specify  // anything; just override it	WITHOUT_CLASSIFICATION	0.9999978678008627	WITHOUT_CLASSIFICATION	2.1321991373417852E-6	DESIGN
// the user specifically supplied update="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999668064247849	WITHOUT_CLASSIFICATION	3.319357521509682E-5	DESIGN
// ROLENAME	WITHOUT_CLASSIFICATION	0.9991367392007966	WITHOUT_CLASSIFICATION	8.632607992033527E-4	DESIGN
// FETCH STRATEGY	WITHOUT_CLASSIFICATION	0.9991367392007966	WITHOUT_CLASSIFICATION	8.632607992033527E-4	DESIGN
// TABLE	WITHOUT_CLASSIFICATION	0.9997939979814788	WITHOUT_CLASSIFICATION	2.06002018521064E-4	DESIGN
//tableName = mappings.getNamingStrategy().propertyToTableName( className, path );	WITHOUT_CLASSIFICATION	0.9999525981531578	WITHOUT_CLASSIFICATION	4.7401846842215176E-5	DESIGN
// SORT	WITHOUT_CLASSIFICATION	0.9996865054675651	WITHOUT_CLASSIFICATION	3.1349453243497257E-4	DESIGN
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9991736859356127	WITHOUT_CLASSIFICATION	8.263140643872817E-4	DESIGN
// unsorted, natural, comparator.class.name	WITHOUT_CLASSIFICATION	0.9994664167093965	WITHOUT_CLASSIFICATION	5.335832906034879E-4	DESIGN
// ORPHAN DELETE (used for programmer error detection)	WITHOUT_CLASSIFICATION	0.9990692186628263	WITHOUT_CLASSIFICATION	9.307813371735954E-4	DESIGN
// set up second pass	WITHOUT_CLASSIFICATION	0.9998732596724113	WITHOUT_CLASSIFICATION	1.267403275886994E-4	DESIGN
// an "embedded" component (composite ids and unique) // note that this does not handle nested components	WITHOUT_CLASSIFICATION	0.9981309714545926	WITHOUT_CLASSIFICATION	0.0018690285454073595	DESIGN
// a nested composite element	WITHOUT_CLASSIFICATION	0.9939327052258841	WITHOUT_CLASSIFICATION	0.00606729477411595	DESIGN
// for an any // we will have to use reflection	WITHOUT_CLASSIFICATION	0.9982216391456937	WITHOUT_CLASSIFICATION	0.0017783608543063317	DESIGN
//NOTE SPECIAL CASE: // one-to-one constrained=false cannot be proxied, // so default to join and non-lazy	WITHOUT_CLASSIFICATION	0.9999843009115016	WITHOUT_CLASSIFICATION	1.5699088498380777E-5	DESIGN
// use old (HB 2.1) defaults if outer-join is specified	WITHOUT_CLASSIFICATION	0.9998049517513459	WITHOUT_CLASSIFICATION	1.9504824865402472E-4	DESIGN
//lazy = !join;	WITHOUT_CLASSIFICATION	0.9993670934579257	WITHOUT_CLASSIFICATION	6.329065420742471E-4	DESIGN
// GENERATOR	WITHOUT_CLASSIFICATION	0.9993033956208149	WITHOUT_CLASSIFICATION	6.966043791850082E-4	DESIGN
// ID UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9991897830730773	WITHOUT_CLASSIFICATION	8.102169269227765E-4	DESIGN
// VERSION UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9990481458842871	WITHOUT_CLASSIFICATION	9.518541157127762E-4	DESIGN
// not necessarily a *unique* property reference	WITHOUT_CLASSIFICATION	0.9954000244749179	WITHOUT_CLASSIFICATION	0.004599975525082076	DESIGN
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9979192277390057	WITHOUT_CLASSIFICATION	0.002080772260994335	DESIGN
// contained elements:	WITHOUT_CLASSIFICATION	0.9990657847140253	WITHOUT_CLASSIFICATION	9.342152859746417E-4	DESIGN
// for non-inverse one-to-many, with a not-null fk, add a backref!	WITHOUT_CLASSIFICATION	0.998712742525382	WITHOUT_CLASSIFICATION	0.0012872574746180664	DESIGN
// Bind the where	WITHOUT_CLASSIFICATION	0.9996295289003763	WITHOUT_CLASSIFICATION	3.7047109962373427E-4	DESIGN
// Bind the order-by	WITHOUT_CLASSIFICATION	0.9995499571356193	WITHOUT_CLASSIFICATION	4.5004286438059504E-4	DESIGN
// Bind the filters	WITHOUT_CLASSIFICATION	0.9995108440404508	WITHOUT_CLASSIFICATION	4.891559595492532E-4	DESIGN
// overriding inherited meta attribute. HBX-621 & HBX-793	WITHOUT_CLASSIFICATION	0.9987680798556634	WITHOUT_CLASSIFICATION	0.0012319201443366152	DESIGN
// first, iterate over all elements capable of defining an extends attribute // collecting all found extends references if they cannot be resolved // against the already processed mappings.	WITHOUT_CLASSIFICATION	0.9999999709943791	WITHOUT_CLASSIFICATION	2.900562096995947E-8	DESIGN
// mappings might contain either the "raw" extends name (in the case of // an entity-name mapping) or a FQN (in the case of a POJO mapping).	WITHOUT_CLASSIFICATION	0.9998334196855656	WITHOUT_CLASSIFICATION	1.6658031443438748E-4	DESIGN
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.571372847089307	DESIGN	0.42862715291069303	WITHOUT_CLASSIFICATION
//SessionFactory name:	WITHOUT_CLASSIFICATION	0.9986148888166071	WITHOUT_CLASSIFICATION	0.001385111183392861	DESIGN
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9976369685740373	WITHOUT_CLASSIFICATION	0.002363031425962721	DESIGN
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9976369685740373	WITHOUT_CLASSIFICATION	0.002363031425962721	DESIGN
//Interrogate JDBC metadata	WITHOUT_CLASSIFICATION	0.9992152381308306	WITHOUT_CLASSIFICATION	7.847618691693403E-4	DESIGN
// user supplied JDBC connections	WITHOUT_CLASSIFICATION	0.9999795618259693	WITHOUT_CLASSIFICATION	2.0438174030726644E-5	DESIGN
//use dialect default properties	WITHOUT_CLASSIFICATION	0.9994717637930866	WITHOUT_CLASSIFICATION	5.282362069134165E-4	DESIGN
// Transaction settings:	WITHOUT_CLASSIFICATION	0.999214327914875	WITHOUT_CLASSIFICATION	7.856720851251465E-4	DESIGN
//SQL Generation settings:	WITHOUT_CLASSIFICATION	0.9976953966471883	WITHOUT_CLASSIFICATION	0.002304603352811749	DESIGN
//Query parser settings:	WITHOUT_CLASSIFICATION	0.9956562068598843	WITHOUT_CLASSIFICATION	0.004343793140115697	DESIGN
// Second-level / query cache:	WITHOUT_CLASSIFICATION	0.9996870254403349	WITHOUT_CLASSIFICATION	3.129745596649674E-4	DESIGN
// The cache provider is needed when we either have second-level cache enabled // or query cache enabled.  Note that useSecondLevelCache is enabled by default	WITHOUT_CLASSIFICATION	0.9999988567624154	WITHOUT_CLASSIFICATION	1.1432375846170826E-6	DESIGN
//SQL Exception converter:	WITHOUT_CLASSIFICATION	0.9973138492039055	WITHOUT_CLASSIFICATION	0.0026861507960943853	DESIGN
//Statistics and logging:	WITHOUT_CLASSIFICATION	0.998111406037549	WITHOUT_CLASSIFICATION	0.0018885939624509625	DESIGN
//	WITHOUT_CLASSIFICATION	0.999679076858764	WITHOUT_CLASSIFICATION	3.2092314123604855E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.999679076858764	WITHOUT_CLASSIFICATION	3.2092314123604855E-4	DESIGN
//Schema export:	WITHOUT_CLASSIFICATION	0.9978670924811555	WITHOUT_CLASSIFICATION	0.002132907518844583	DESIGN
//	WITHOUT_CLASSIFICATION	0.999679076858764	WITHOUT_CLASSIFICATION	3.2092314123604855E-4	DESIGN
// legacy behavior, apply the bridge...	WITHOUT_CLASSIFICATION	0.9989994684784996	WITHOUT_CLASSIFICATION	0.0010005315215003664	DESIGN
// maybe a concrete SQLpropertyresult type, but Map is exactly what is required at the moment	WITHOUT_CLASSIFICATION	0.9862764732845452	WITHOUT_CLASSIFICATION	0.013723526715454761	DESIGN
//if dotted and not load-collection nor return-join //regular property	WITHOUT_CLASSIFICATION	0.9990706507961421	WITHOUT_CLASSIFICATION	9.293492038578624E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.999679076858764	WITHOUT_CLASSIFICATION	3.2092314123604855E-4	DESIGN
// public getters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997801585578683	WITHOUT_CLASSIFICATION	2.1984144213178954E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.999679076858764	WITHOUT_CLASSIFICATION	3.2092314123604855E-4	DESIGN
// package protected setters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.991861331650085	WITHOUT_CLASSIFICATION	0.008138668349914955	DESIGN
//	WITHOUT_CLASSIFICATION	0.999679076858764	WITHOUT_CLASSIFICATION	3.2092314123604855E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.999679076858764	WITHOUT_CLASSIFICATION	3.2092314123604855E-4	DESIGN
// using local since the inheritedMetas at this point is not the correct map since it is always the empty map	WITHOUT_CLASSIFICATION	0.998655827034283	WITHOUT_CLASSIFICATION	0.0013441729657169385	DESIGN
//	WITHOUT_CLASSIFICATION	0.999679076858764	WITHOUT_CLASSIFICATION	3.2092314123604855E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.999679076858764	WITHOUT_CLASSIFICATION	3.2092314123604855E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.999679076858764	WITHOUT_CLASSIFICATION	3.2092314123604855E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.999679076858764	WITHOUT_CLASSIFICATION	3.2092314123604855E-4	DESIGN
// if doc is null, then for whatever reason, the cached file cannot be used...	WITHOUT_CLASSIFICATION	0.9999900074295675	WITHOUT_CLASSIFICATION	9.992570432543957E-6	DESIGN
// drop them in reverse order in case db needs it done that way...	WITHOUT_CLASSIFICATION	0.9990747721714891	WITHOUT_CLASSIFICATION	9.252278285108132E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.999679076858764	WITHOUT_CLASSIFICATION	3.2092314123604855E-4	DESIGN
// This method may be called many times!!	WITHOUT_CLASSIFICATION	0.9715365481960707	WITHOUT_CLASSIFICATION	0.028463451803929212	DESIGN
//	WITHOUT_CLASSIFICATION	0.999679076858764	WITHOUT_CLASSIFICATION	3.2092314123604855E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.999679076858764	WITHOUT_CLASSIFICATION	3.2092314123604855E-4	DESIGN
// found	WITHOUT_CLASSIFICATION	0.9998532893220883	WITHOUT_CLASSIFICATION	1.467106779117424E-4	DESIGN
// found	WITHOUT_CLASSIFICATION	0.9998532893220883	WITHOUT_CLASSIFICATION	1.467106779117424E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.999679076858764	WITHOUT_CLASSIFICATION	3.2092314123604855E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.999679076858764	WITHOUT_CLASSIFICATION	3.2092314123604855E-4	DESIGN
//<String, String>	WITHOUT_CLASSIFICATION	0.9979456976881294	WITHOUT_CLASSIFICATION	0.002054302311870696	DESIGN
//<String, String>	WITHOUT_CLASSIFICATION	0.9979456976881294	WITHOUT_CLASSIFICATION	0.002054302311870696	DESIGN
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.571372847089307	DESIGN	0.42862715291069303	WITHOUT_CLASSIFICATION
//Set USE_REFLECTION_OPTIMIZER to false to fix HHH-227	WITHOUT_CLASSIFICATION	0.9492756891321437	WITHOUT_CLASSIFICATION	0.05072431086785637	DESIGN
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9963957833203239	WITHOUT_CLASSIFICATION	0.0036042166796760736	DESIGN
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9998138119369534	WITHOUT_CLASSIFICATION	1.8618806304661608E-4	DESIGN
// intentionally empty	WITHOUT_CLASSIFICATION	0.9992846058592043	WITHOUT_CLASSIFICATION	7.153941407956005E-4	DESIGN
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9963957833203239	WITHOUT_CLASSIFICATION	0.0036042166796760736	DESIGN
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9998138119369534	WITHOUT_CLASSIFICATION	1.8618806304661608E-4	DESIGN
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9965049475141491	WITHOUT_CLASSIFICATION	0.0034950524858509482	DESIGN
//maintain correct duplication if loaded in a cartesian product	WITHOUT_CLASSIFICATION	0.991594794342679	WITHOUT_CLASSIFICATION	0.00840520565732085	DESIGN
// the element has been removed from the set	WITHOUT_CLASSIFICATION	0.9959481151896364	WITHOUT_CLASSIFICATION	0.00405188481036359	DESIGN
// the element has changed	WITHOUT_CLASSIFICATION	0.9999609747131304	WITHOUT_CLASSIFICATION	3.90252868696098E-5	DESIGN
//Careful: these methods do not initialize the collection.	WITHOUT_CLASSIFICATION	0.9852629507945277	WITHOUT_CLASSIFICATION	0.01473704920547227	DESIGN
//needed so that we remove this collection from the second-level cache	WITHOUT_CLASSIFICATION	0.9297362522044456	WITHOUT_CLASSIFICATION	0.0702637477955544	DESIGN
// override on some subclasses	WITHOUT_CLASSIFICATION	0.9998471294903712	WITHOUT_CLASSIFICATION	1.528705096286752E-4	DESIGN
//override on some subclasses	WITHOUT_CLASSIFICATION	0.9990751614616906	WITHOUT_CLASSIFICATION	9.248385383094252E-4	DESIGN
//do this bit after setting initialized to true or it will recurse	WITHOUT_CLASSIFICATION	0.9791068433727103	WITHOUT_CLASSIFICATION	0.02089315662728984	DESIGN
// short-circuit(s) // no new elements, the old list contains only Orphans // no old elements, so no Orphans neither	WITHOUT_CLASSIFICATION	0.9999989512145565	WITHOUT_CLASSIFICATION	1.0487854435094698E-6	DESIGN
// create the collection holding the Orphans	WITHOUT_CLASSIFICATION	0.9996613164048519	WITHOUT_CLASSIFICATION	3.3868359514818995E-4	DESIGN
// collect EntityIdentifier(s) of the *current* elements - add them into a HashSet for fast access	WITHOUT_CLASSIFICATION	0.9995177855562067	WITHOUT_CLASSIFICATION	4.8221444379329114E-4	DESIGN
// iterate over the *old* list	WITHOUT_CLASSIFICATION	0.999589364280196	WITHOUT_CLASSIFICATION	4.10635719804065E-4	DESIGN
/*(array==null) ? tempList.size() :*/	WITHOUT_CLASSIFICATION	0.9981410631774191	WITHOUT_CLASSIFICATION	0.0018589368225808158	DESIGN
// intentionally empty	WITHOUT_CLASSIFICATION	0.9992846058592043	WITHOUT_CLASSIFICATION	7.153941407956005E-4	DESIGN
/*(array==null) ? tempList.get(i) :*/	WITHOUT_CLASSIFICATION	0.9981410631774191	WITHOUT_CLASSIFICATION	0.0018589368225808158	DESIGN
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9940104282380398	WITHOUT_CLASSIFICATION	0.0059895717619602015	DESIGN
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9940104282380398	WITHOUT_CLASSIFICATION	0.0059895717619602015	DESIGN
// amazingly, these two will work because AbstractCollection // uses iterator() to fill the array	WITHOUT_CLASSIFICATION	0.9971937353929625	WITHOUT_CLASSIFICATION	0.0028062646070375	DESIGN
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9965049475141491	WITHOUT_CLASSIFICATION	0.0034950524858509482	DESIGN
// finally, what it's all about...	WITHOUT_CLASSIFICATION	0.9961194363199252	WITHOUT_CLASSIFICATION	0.003880563680074895	DESIGN
// note that if we load this collection from a cartesian product // the multiplicity would be broken ... so use an idbag instead	WITHOUT_CLASSIFICATION	0.7347730173111886	DESIGN	0.26522698268881145	WITHOUT_CLASSIFICATION
// Anyway, here we implement <set> semantics for a // <one-to-many> <bag>!	WITHOUT_CLASSIFICATION	0.5567050155550349	WITHOUT_CLASSIFICATION	0.44329498444496507	DESIGN
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999171521387291	WITHOUT_CLASSIFICATION	8.284786127092395E-5	DESIGN
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9844176773343636	WITHOUT_CLASSIFICATION	0.015582322665636398	DESIGN
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9965049475141491	WITHOUT_CLASSIFICATION	0.0034950524858509482	DESIGN
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999171521387291	WITHOUT_CLASSIFICATION	8.284786127092395E-5	DESIGN
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9844176773343636	WITHOUT_CLASSIFICATION	0.015582322665636398	DESIGN
/*public boolean equals(Object other) {	WITHOUT_CLASSIFICATION	0.9996682060522887	WITHOUT_CLASSIFICATION	3.3179394771133095E-4	DESIGN
// List OPERATIONS:	WITHOUT_CLASSIFICATION	0.9998165413342711	WITHOUT_CLASSIFICATION	1.8345866572888665E-4	DESIGN
//pad with nulls from the current last element up to the new index	WITHOUT_CLASSIFICATION	0.9999912920145619	WITHOUT_CLASSIFICATION	8.707985438048174E-6	DESIGN
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9965049475141491	WITHOUT_CLASSIFICATION	0.0034950524858509482	DESIGN
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9965049475141491	WITHOUT_CLASSIFICATION	0.0034950524858509482	DESIGN
// from Map	WITHOUT_CLASSIFICATION	0.9994091510438405	WITHOUT_CLASSIFICATION	5.908489561593733E-4	DESIGN
// from SortedMap	WITHOUT_CLASSIFICATION	0.9988348772848147	WITHOUT_CLASSIFICATION	0.0011651227151853194	DESIGN
//inject the data	WITHOUT_CLASSIFICATION	0.9993968611602485	WITHOUT_CLASSIFICATION	6.031388397515907E-4	DESIGN
// cannot be instantiated	WITHOUT_CLASSIFICATION	0.9998119695587686	WITHOUT_CLASSIFICATION	1.88030441231279E-4	DESIGN
//default pool size 20	WITHOUT_CLASSIFICATION	0.9993480726917559	WITHOUT_CLASSIFICATION	6.519273082441309E-4	DESIGN
// trying via forName() first to be as close to DriverManager's semantics	WITHOUT_CLASSIFICATION	0.9999954067847392	WITHOUT_CLASSIFICATION	4.59321526082784E-6	DESIGN
// if debug level is enabled, then log the password, otherwise mask it	WITHOUT_CLASSIFICATION	0.9999908177019899	WITHOUT_CLASSIFICATION	9.182298010062939E-6	DESIGN
// register a cleanup synch	WITHOUT_CLASSIFICATION	0.999765084690174	WITHOUT_CLASSIFICATION	2.3491530982591726E-4	DESIGN
// wrap the session in the transaction-protection proxy	WITHOUT_CLASSIFICATION	0.9997538118724748	WITHOUT_CLASSIFICATION	2.461881275252122E-4	DESIGN
// then bind it	WITHOUT_CLASSIFICATION	0.9992266377893111	WITHOUT_CLASSIFICATION	7.733622106889287E-4	DESIGN
// try to make sure we don't wrap and already wrapped session	WITHOUT_CLASSIFICATION	0.9714693089236672	WITHOUT_CLASSIFICATION	0.02853069107633279	DESIGN
// allow these to go through the the real session no matter what	WITHOUT_CLASSIFICATION	0.9463336462354737	WITHOUT_CLASSIFICATION	0.05366635376452634	DESIGN
// limit the methods available if no transaction is active	WITHOUT_CLASSIFICATION	0.9995357952263271	WITHOUT_CLASSIFICATION	4.642047736729227E-4	DESIGN
// allow these (deprecated) methods to pass through	WITHOUT_CLASSIFICATION	0.9971427177269255	WITHOUT_CLASSIFICATION	0.0028572822730743488	DESIGN
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994961501328029	WITHOUT_CLASSIFICATION	5.038498671970875E-4	DESIGN
// We could register the session against the transaction even though it is // not started, but we'd have no guarentee of ever getting the map // entries cleaned up (aside from spawning threads).	WITHOUT_CLASSIFICATION	0.999996990347296	WITHOUT_CLASSIFICATION	3.009652703906611E-6	DESIGN
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9921413664257869	WITHOUT_CLASSIFICATION	0.00785863357421315	DESIGN
//private String propertyName;	WITHOUT_CLASSIFICATION	0.9987099143404577	WITHOUT_CLASSIFICATION	0.0012900856595422063	DESIGN
/*public PropertyProjection project() {	WITHOUT_CLASSIFICATION	0.9990782343647908	WITHOUT_CLASSIFICATION	9.217656352091493E-4	DESIGN
//String[] fk = StringHelper.qualify( "collection_", cp.getKeyColumnNames() );	WITHOUT_CLASSIFICATION	0.9998138119369534	WITHOUT_CLASSIFICATION	1.8618806304661608E-4	DESIGN
//" collection_ where " +	WITHOUT_CLASSIFICATION	0.9994629515584319	WITHOUT_CLASSIFICATION	5.370484415681344E-4	DESIGN
//unsupported	WITHOUT_CLASSIFICATION	0.9978670924811555	WITHOUT_CLASSIFICATION	0.002132907518844583	DESIGN
//unsupported	WITHOUT_CLASSIFICATION	0.9978670924811555	WITHOUT_CLASSIFICATION	0.002132907518844583	DESIGN
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9921413664257869	WITHOUT_CLASSIFICATION	0.00785863357421315	DESIGN
//the following two lines were added to ensure that this.params is not null, which //can happen with two-deep nested subqueries	WITHOUT_CLASSIFICATION	0.9999589589393671	WITHOUT_CLASSIFICATION	4.104106063290572E-5	DESIGN
//with two-deep subqueries, the same alias would get generated for //both using the old method (criteriaQuery.generateSQLAlias()), so //that is now used as a fallback if the main criteria alias isn't set	WITHOUT_CLASSIFICATION	0.9986434751168121	WITHOUT_CLASSIFICATION	0.001356524883187906	DESIGN
//implicit polymorphism not supported (would need a union)	WITHOUT_CLASSIFICATION	0.97583689223742	WITHOUT_CLASSIFICATION	0.024163107762579954	DESIGN
//pull off the last ", "	WITHOUT_CLASSIFICATION	0.9998144289773697	WITHOUT_CLASSIFICATION	1.855710226302873E-4	DESIGN
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9980280146047894	WITHOUT_CLASSIFICATION	0.0019719853952106354	DESIGN
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces	WITHOUT_CLASSIFICATION	0.9998568285023951	WITHOUT_CLASSIFICATION	1.4317149760481013E-4	DESIGN
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource)	WITHOUT_CLASSIFICATION	0.9979476482246518	WITHOUT_CLASSIFICATION	0.0020523517753482518	DESIGN
// NOT_SUPPORTED_SHOULD_USE_JDBC3_PreparedStatement.getGeneratedKeys_method	WITHOUT_CLASSIFICATION	0.9994664167093965	WITHOUT_CLASSIFICATION	5.335832906034879E-4	DESIGN
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.99992567114306	WITHOUT_CLASSIFICATION	7.432885694007594E-5	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997109726834859	WITHOUT_CLASSIFICATION	2.8902731651416283E-4	DESIGN
// Oracle did add support for ANSI CASE statements in 9i	WITHOUT_CLASSIFICATION	0.9999683679225391	WITHOUT_CLASSIFICATION	3.163207746087583E-5	DESIGN
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999603469142176	WITHOUT_CLASSIFICATION	3.9653085782327505E-5	DESIGN
// Informix doesn't have a bit type	WITHOUT_CLASSIFICATION	0.9783342460760708	WITHOUT_CLASSIFICATION	0.021665753923929235	DESIGN
// or BYTE // or TEXT? // or MONEY	WITHOUT_CLASSIFICATION	0.9997771984380533	WITHOUT_CLASSIFICATION	2.228015619466797E-4	DESIGN
// strip table-owner because Informix always returns constraint names as "<table-owner>.<constraint-name>"	WITHOUT_CLASSIFICATION	0.9995928328786703	WITHOUT_CLASSIFICATION	4.0716712132976443E-4	DESIGN
// build the map of standard ANSI SQL aggregation functions ~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999583634790826	WITHOUT_CLASSIFICATION	4.163652091742254E-5	DESIGN
//pre H3.2 behavior: super.getReturnType(ct, m);	WITHOUT_CLASSIFICATION	0.9992933349307906	WITHOUT_CLASSIFICATION	7.066650692092738E-4	DESIGN
// finally use the sqltype if == on Hibernate types did not find a match.	WITHOUT_CLASSIFICATION	0.998487703889917	WITHOUT_CLASSIFICATION	0.001512296110083012	DESIGN
//because numeric can be anything	WITHOUT_CLASSIFICATION	0.9993830987104384	WITHOUT_CLASSIFICATION	6.169012895615962E-4	DESIGN
// constructors and factory methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9888283943339952	WITHOUT_CLASSIFICATION	0.01117160566600476	DESIGN
// standard sql92 functions (can be overridden by subclasses)	WITHOUT_CLASSIFICATION	0.9991394895619403	WITHOUT_CLASSIFICATION	8.605104380597893E-4	DESIGN
//map second/minute/hour/day/month/year to ANSI extract(), override on subclasses	WITHOUT_CLASSIFICATION	0.9998199515496452	WITHOUT_CLASSIFICATION	1.800484503547255E-4	DESIGN
// register hibernate types for default use in scalar sqlquery type auto detection	WITHOUT_CLASSIFICATION	0.9986302970352265	WITHOUT_CLASSIFICATION	0.0013697029647734055	DESIGN
// database type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994181696880403	WITHOUT_CLASSIFICATION	5.818303119597093E-4	DESIGN
// hibernate type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996254283817863	WITHOUT_CLASSIFICATION	3.745716182137785E-4	DESIGN
// keyword support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994425533282159	WITHOUT_CLASSIFICATION	5.57446671784118E-4	DESIGN
// native identifier generatiion ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996619419916851	WITHOUT_CLASSIFICATION	3.3805800831490933E-4	DESIGN
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9988324574978182	WITHOUT_CLASSIFICATION	0.001167542502181856	DESIGN
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9990300811476527	WITHOUT_CLASSIFICATION	9.699188523473784E-4	DESIGN
// GUID support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9988324574978182	WITHOUT_CLASSIFICATION	0.001167542502181856	DESIGN
// limit/offset support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9988324574978182	WITHOUT_CLASSIFICATION	0.001167542502181856	DESIGN
// by default we report no support	WITHOUT_CLASSIFICATION	0.9293651367275222	WITHOUT_CLASSIFICATION	0.07063486327247781	DESIGN
// by default we report no support for NOWAIT lock semantics	WITHOUT_CLASSIFICATION	0.532264636826175	WITHOUT_CLASSIFICATION	0.4677353631738251	DESIGN
// table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995824383519978	WITHOUT_CLASSIFICATION	4.17561648002174E-4	DESIGN
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9921347674331783	WITHOUT_CLASSIFICATION	0.007865232566821688	DESIGN
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9909871275367428	WITHOUT_CLASSIFICATION	0.009012872463257176	DESIGN
// current timestamp support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998232107839655	WITHOUT_CLASSIFICATION	1.7678921603454776E-4	DESIGN
// SQLException support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992285548786539	WITHOUT_CLASSIFICATION	7.714451213460551E-4	DESIGN
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9988324574978182	WITHOUT_CLASSIFICATION	0.001167542502181856	DESIGN
// identifier quoting support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9990191226678976	WITHOUT_CLASSIFICATION	9.80877332102443E-4	DESIGN
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9988324574978182	WITHOUT_CLASSIFICATION	0.001167542502181856	DESIGN
// grrr... for differentiation of mysql storage engines	WITHOUT_CLASSIFICATION	0.9998643721630349	WITHOUT_CLASSIFICATION	1.3562783696510736E-4	DESIGN
// Informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995213183043667	WITHOUT_CLASSIFICATION	4.786816956332093E-4	DESIGN
// return false here, as most databases do not properly support this construct...	WITHOUT_CLASSIFICATION	0.9924135827536802	WITHOUT_CLASSIFICATION	0.007586417246319884	DESIGN
// Mckoi has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9993187845393864	WITHOUT_CLASSIFICATION	6.812154606136232E-4	DESIGN
// Oracle8 and previous define only a "DATE" type which //      is used to represent all aspects of date/time	WITHOUT_CLASSIFICATION	0.9934214141340046	WITHOUT_CLASSIFICATION	0.0065785858659954625	DESIGN
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9983665237560122	WITHOUT_CLASSIFICATION	0.0016334762439877285	DESIGN
//" cascade";	WITHOUT_CLASSIFICATION	0.9978954700892585	WITHOUT_CLASSIFICATION	0.002104529910741591	DESIGN
//trim off the length/precision/scale	WITHOUT_CLASSIFICATION	0.9994584095598446	WITHOUT_CLASSIFICATION	5.415904401554143E-4	DESIGN
/*public boolean dropTemporaryTableAfterUse() {	WITHOUT_CLASSIFICATION	0.9996682060522887	WITHOUT_CLASSIFICATION	3.3179394771133095E-4	DESIGN
// CHECK VIOLATION	WITHOUT_CLASSIFICATION	0.9991734232444593	WITHOUT_CLASSIFICATION	8.265767555405843E-4	DESIGN
// UNIQUE VIOLATION	WITHOUT_CLASSIFICATION	0.9991767635323772	WITHOUT_CLASSIFICATION	8.23236467622726E-4	DESIGN
// FOREIGN KEY VIOLATION	WITHOUT_CLASSIFICATION	0.9992443263283664	WITHOUT_CLASSIFICATION	7.556736716335696E-4	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997109726834859	WITHOUT_CLASSIFICATION	2.8902731651416283E-4	DESIGN
// NOT NULL VIOLATION	WITHOUT_CLASSIFICATION	0.9947911672752361	WITHOUT_CLASSIFICATION	0.005208832724763919	DESIGN
// ALL OTHER	WITHOUT_CLASSIFICATION	0.9990652172976148	WITHOUT_CLASSIFICATION	9.347827023852248E-4	DESIGN
// Register the type of the out param - PostgreSQL uses Types.OTHER	WITHOUT_CLASSIFICATION	0.9958606108855557	WITHOUT_CLASSIFICATION	0.004139389114444366	DESIGN
// seems to not really... //	WITHOUT_CLASSIFICATION	0.9878733803754647	WITHOUT_CLASSIFICATION	0.012126619624535378	DESIGN
// seems to have spotty LOB suppport	WITHOUT_CLASSIFICATION	0.9989460288799649	WITHOUT_CLASSIFICATION	0.0010539711200351406	DESIGN
// HHH-2300	WITHOUT_CLASSIFICATION	0.9991367392007966	WITHOUT_CLASSIFICATION	8.632607992033527E-4	DESIGN
// ignore (probably H2 not in the classpath)	WITHOUT_CLASSIFICATION	0.9988601143591777	WITHOUT_CLASSIFICATION	0.00113988564082235	DESIGN
// Numeric Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994925796719807	WITHOUT_CLASSIFICATION	5.074203280194128E-4	DESIGN
// String Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994866132772425	WITHOUT_CLASSIFICATION	5.133867227574604E-4	DESIGN
// Time and Date Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997433230962495	WITHOUT_CLASSIFICATION	2.5667690375055536E-4	DESIGN
// System Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995668020366631	WITHOUT_CLASSIFICATION	4.3319796333676476E-4	DESIGN
// not null is implicit	WITHOUT_CLASSIFICATION	0.9975073986651717	WITHOUT_CLASSIFICATION	0.0024926013348283873	DESIGN
// 23000: Check constraint violation: {0} // 23001: Unique index or primary key violation: {0}	WITHOUT_CLASSIFICATION	0.9999857278721922	WITHOUT_CLASSIFICATION	1.4272127807680038E-5	DESIGN
// Display the dialect version.	WITHOUT_CLASSIFICATION	0.9996989682887325	WITHOUT_CLASSIFICATION	3.0103171126754876E-4	DESIGN
// The RDMS concat() function only supports 2 parameters	WITHOUT_CLASSIFICATION	0.9999994527160255	WITHOUT_CLASSIFICATION	5.472839745188384E-7	DESIGN
// Dialect method overrides ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994051997145882	WITHOUT_CLASSIFICATION	5.948002854118483E-4	DESIGN
// Original Dialect.java returns " for update";	WITHOUT_CLASSIFICATION	0.9993528303826851	WITHOUT_CLASSIFICATION	6.471696173150158E-4	DESIGN
// Verify the state of this new method in Hibernate 3.0 Dialect.java	WITHOUT_CLASSIFICATION	0.9989509936511264	WITHOUT_CLASSIFICATION	0.001049006348873613	DESIGN
// Origial Dialect.java returns true;	WITHOUT_CLASSIFICATION	0.9996174746355276	WITHOUT_CLASSIFICATION	3.8252536447234915E-4	DESIGN
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9360810284480224	WITHOUT_CLASSIFICATION	0.0639189715519776	DESIGN
// *** Sequence methods - start. The RDMS dialect needs these	WITHOUT_CLASSIFICATION	0.868692688891777	WITHOUT_CLASSIFICATION	0.131307311108223	DESIGN
// methods to make it possible to use the Native Id generator	WITHOUT_CLASSIFICATION	0.9906453711549377	WITHOUT_CLASSIFICATION	0.009354628845062352	DESIGN
// The where clause was added to eliminate this statement from Brute Force Searches.	WITHOUT_CLASSIFICATION	0.9962980584811183	WITHOUT_CLASSIFICATION	0.0037019415188816102	DESIGN
// *** Sequence methods - end	WITHOUT_CLASSIFICATION	0.9895990020111785	WITHOUT_CLASSIFICATION	0.010400997988821582	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997109726834859	WITHOUT_CLASSIFICATION	2.8902731651416283E-4	DESIGN
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9983665237560122	WITHOUT_CLASSIFICATION	0.0016334762439877285	DESIGN
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.9980213527255858	WITHOUT_CLASSIFICATION	0.0019786472744141768	DESIGN
// Used with DROP TABLE to delete all records in the table.	WITHOUT_CLASSIFICATION	0.9999472023175988	WITHOUT_CLASSIFICATION	5.2797682401152786E-5	DESIGN
// RDMS supports the UNION ALL clause.	WITHOUT_CLASSIFICATION	0.9997854422898002	WITHOUT_CLASSIFICATION	2.1455771019978522E-4	DESIGN
// RDMS has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9993362981561689	WITHOUT_CLASSIFICATION	6.637018438311244E-4	DESIGN
// Multi-param dialect functions...	WITHOUT_CLASSIFICATION	0.9986651291680108	WITHOUT_CLASSIFICATION	0.0013348708319893	DESIGN
// function templates	WITHOUT_CLASSIFICATION	0.9998192659225762	WITHOUT_CLASSIFICATION	1.807340774237609E-4	DESIGN
//not null is implicit	WITHOUT_CLASSIFICATION	0.998835158179482	WITHOUT_CLASSIFICATION	0.0011648418205180164	DESIGN
// this assumes schema support, which is present in 1.8.0 and later...	WITHOUT_CLASSIFICATION	0.999974483479247	WITHOUT_CLASSIFICATION	2.5516520753047093E-5	DESIGN
// HSQLDB only supports READ_UNCOMMITTED transaction isolation	WITHOUT_CLASSIFICATION	0.9996101769547995	WITHOUT_CLASSIFICATION	3.8982304520056944E-4	DESIGN
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9993491492481057	WITHOUT_CLASSIFICATION	6.508507518943417E-4	DESIGN
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9992371978977215	WITHOUT_CLASSIFICATION	7.628021022785968E-4	DESIGN
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9992655524795337	WITHOUT_CLASSIFICATION	7.34447520466253E-4	DESIGN
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.9994068275336351	WITHOUT_CLASSIFICATION	5.931724663648196E-4	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997109726834859	WITHOUT_CLASSIFICATION	2.8902731651416283E-4	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997109726834859	WITHOUT_CLASSIFICATION	2.8902731651416283E-4	DESIGN
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9927949361632322	WITHOUT_CLASSIFICATION	0.007205063836767668	DESIGN
//	WITHOUT_CLASSIFICATION	0.999679076858764	WITHOUT_CLASSIFICATION	3.2092314123604855E-4	DESIGN
// TimesTen has no BLOB/CLOB support, but these types may be suitable  // for some applications. The length is limited to 4 million bytes.	WITHOUT_CLASSIFICATION	0.998470278444063	WITHOUT_CLASSIFICATION	0.0015297215559370067	DESIGN
// new methods in dialect3	WITHOUT_CLASSIFICATION	0.9991039135309138	WITHOUT_CLASSIFICATION	8.960864690861926E-4	DESIGN
/*public boolean supportsForUpdateNowait() {	WITHOUT_CLASSIFICATION	0.9996682060522887	WITHOUT_CLASSIFICATION	3.3179394771133095E-4	DESIGN
// TimesTen has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9993573302934602	WITHOUT_CLASSIFICATION	6.426697065398391E-4	DESIGN
// iterate entries ordered by capacity to find first fit	WITHOUT_CLASSIFICATION	0.9991625454449143	WITHOUT_CLASSIFICATION	8.374545550856607E-4	DESIGN
// add new ordered map	WITHOUT_CLASSIFICATION	0.9996658061332164	WITHOUT_CLASSIFICATION	3.3419386678356635E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.999679076858764	WITHOUT_CLASSIFICATION	3.2092314123604855E-4	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997109726834859	WITHOUT_CLASSIFICATION	2.8902731651416283E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.999679076858764	WITHOUT_CLASSIFICATION	3.2092314123604855E-4	DESIGN
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.999672830973096	WITHOUT_CLASSIFICATION	3.271690269039929E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.999679076858764	WITHOUT_CLASSIFICATION	3.2092314123604855E-4	DESIGN
//registerColumnType data types	WITHOUT_CLASSIFICATION	0.9993685313779314	WITHOUT_CLASSIFICATION	6.314686220686869E-4	DESIGN
// hibernate seems to ignore this type...	WITHOUT_CLASSIFICATION	0.9950438800320323	WITHOUT_CLASSIFICATION	0.004956119967967807	DESIGN
// IBID for current_time and current_date	WITHOUT_CLASSIFICATION	0.9995437113289797	WITHOUT_CLASSIFICATION	4.56288671020326E-4	DESIGN
// Tell hibernate to use getBytes instead of getBinaryStream	WITHOUT_CLASSIFICATION	0.996209480838119	WITHOUT_CLASSIFICATION	0.003790519161881054	DESIGN
// No batch statements	WITHOUT_CLASSIFICATION	0.9998819211994743	WITHOUT_CLASSIFICATION	1.180788005258233E-4	DESIGN
/*	WITHOUT_CLASSIFICATION	0.9442416728045828	WITHOUT_CLASSIFICATION	0.05575832719541726	DESIGN
//no pointbase BIT	WITHOUT_CLASSIFICATION	0.9989667893151842	WITHOUT_CLASSIFICATION	0.0010332106848157756	DESIGN
//no pointbase TINYINT	WITHOUT_CLASSIFICATION	0.9990089818083289	WITHOUT_CLASSIFICATION	9.910181916711123E-4	DESIGN
// Pointbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9982827507416493	WITHOUT_CLASSIFICATION	0.0017172492583507495	DESIGN
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9983665237560122	WITHOUT_CLASSIFICATION	0.0016334762439877285	DESIGN
// The current_timestamp is more accurate, but only known to be supported // in SQL Server 7.0 and later (i.e., Sybase not known to support it at all)	WITHOUT_CLASSIFICATION	0.9581120127654363	WITHOUT_CLASSIFICATION	0.0418879872345637	DESIGN
// SQL Server (at least up through 2005) does not support defining // cascade delete constraints which can circel back to the mutating // table	WITHOUT_CLASSIFICATION	0.9999799261569297	WITHOUT_CLASSIFICATION	2.007384307039172E-5	DESIGN
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9788400137354106	WITHOUT_CLASSIFICATION	0.021159986264589394	DESIGN
//	WITHOUT_CLASSIFICATION	0.999679076858764	WITHOUT_CLASSIFICATION	3.2092314123604855E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.999679076858764	WITHOUT_CLASSIFICATION	3.2092314123604855E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.999679076858764	WITHOUT_CLASSIFICATION	3.2092314123604855E-4	DESIGN
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9983665237560122	WITHOUT_CLASSIFICATION	0.0016334762439877285	DESIGN
/* package-private */	WITHOUT_CLASSIFICATION	0.9996379557161902	WITHOUT_CLASSIFICATION	3.620442838098326E-4	DESIGN
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.999672830973096	WITHOUT_CLASSIFICATION	3.271690269039929E-4	DESIGN
//Sybase BIT type does not support null values	WITHOUT_CLASSIFICATION	0.9978600481611103	WITHOUT_CLASSIFICATION	0.0021399518388897764	DESIGN
//	WITHOUT_CLASSIFICATION	0.999679076858764	WITHOUT_CLASSIFICATION	3.2092314123604855E-4	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997109726834859	WITHOUT_CLASSIFICATION	2.8902731651416283E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.999679076858764	WITHOUT_CLASSIFICATION	3.2092314123604855E-4	DESIGN
//not null ... (start with 1) is implicit	WITHOUT_CLASSIFICATION	0.9957957051659414	WITHOUT_CLASSIFICATION	0.00420429483405852	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997109726834859	WITHOUT_CLASSIFICATION	2.8902731651416283E-4	DESIGN
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.9998990053912179	WITHOUT_CLASSIFICATION	1.0099460878197763E-4	DESIGN
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9993491492481057	WITHOUT_CLASSIFICATION	6.508507518943417E-4	DESIGN
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9992371978977215	WITHOUT_CLASSIFICATION	7.628021022785968E-4	DESIGN
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9992655524795337	WITHOUT_CLASSIFICATION	7.34447520466253E-4	DESIGN
// add another (inner) nested select // add the main query // close off the inner nested select	WITHOUT_CLASSIFICATION	0.9999970236971648	WITHOUT_CLASSIFICATION	2.9763028351734893E-6	DESIGN
// add the main query	WITHOUT_CLASSIFICATION	0.9997204507279482	WITHOUT_CLASSIFICATION	2.795492720517559E-4	DESIGN
//add the restriction to the outer select	WITHOUT_CLASSIFICATION	0.9999800581778977	WITHOUT_CLASSIFICATION	1.9941822102247546E-5	DESIGN
// This assumes you will want to ignore any update counts 	WITHOUT_CLASSIFICATION	0.9998539988207034	WITHOUT_CLASSIFICATION	1.46001179296704E-4	DESIGN
// You may still have other ResultSets or update counts left to process here  // but you can't do it now or the ResultSet you just got will be closed 	WITHOUT_CLASSIFICATION	0.999996253975047	WITHOUT_CLASSIFICATION	3.7460249528851173E-6	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997109726834859	WITHOUT_CLASSIFICATION	2.8902731651416283E-4	DESIGN
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9983665237560122	WITHOUT_CLASSIFICATION	0.0016334762439877285	DESIGN
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.9994068275336351	WITHOUT_CLASSIFICATION	5.931724663648196E-4	DESIGN
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9927949361632322	WITHOUT_CLASSIFICATION	0.007205063836767668	DESIGN
//	WITHOUT_CLASSIFICATION	0.999679076858764	WITHOUT_CLASSIFICATION	3.2092314123604855E-4	DESIGN
// features which change between 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998230798953408	WITHOUT_CLASSIFICATION	1.7692010465908628E-4	DESIGN
// features which remain constant across 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998728060370112	WITHOUT_CLASSIFICATION	1.2719396298880125E-4	DESIGN
// binary %Stream // character %Stream	WITHOUT_CLASSIFICATION	0.9999661764747736	WITHOUT_CLASSIFICATION	3.382352522636333E-5	DESIGN
//getDefaultProperties().setProperty(Environment.STATEMENT_BATCH_SIZE, NO_BATCH);	WITHOUT_CLASSIFICATION	0.9986810053377232	WITHOUT_CLASSIFICATION	0.0013189946622768059	DESIGN
// hibernate impelemnts cast in Dialect.java	WITHOUT_CLASSIFICATION	0.9983488889463815	WITHOUT_CLASSIFICATION	0.0016511110536183906	DESIGN
// aggregate functions shouldn't be registered, right? //registerFunction( "list", new StandardSQLFunction("list",Hibernate.STRING) ); // stopped on $list	WITHOUT_CLASSIFICATION	0.5142609625041813	DESIGN	0.4857390374958186	WITHOUT_CLASSIFICATION
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9988324574978182	WITHOUT_CLASSIFICATION	0.001167542502181856	DESIGN
// below is for Cache' that don't have str in 2007.1 there is str and we register str directly	WITHOUT_CLASSIFICATION	0.9989102354874156	WITHOUT_CLASSIFICATION	0.0010897645125843446	DESIGN
// note that %string is deprecated	WITHOUT_CLASSIFICATION	0.9794651445877307	WITHOUT_CLASSIFICATION	0.02053485541226926	DESIGN
// %upper is deprecated	WITHOUT_CLASSIFICATION	0.9629128101748946	WITHOUT_CLASSIFICATION	0.03708718982510533	DESIGN
// The syntax used to add a foreign key constraint to a table.	WITHOUT_CLASSIFICATION	0.9838487128904643	WITHOUT_CLASSIFICATION	0.01615128710953577	DESIGN
// identifier-commalist	WITHOUT_CLASSIFICATION	0.9990481458842871	WITHOUT_CLASSIFICATION	9.518541157127762E-4	DESIGN
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9988324574978182	WITHOUT_CLASSIFICATION	0.001167542502181856	DESIGN
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9990300811476527	WITHOUT_CLASSIFICATION	9.699188523473784E-4	DESIGN
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9921347674331783	WITHOUT_CLASSIFICATION	0.007865232566821688	DESIGN
// identifier-commalist	WITHOUT_CLASSIFICATION	0.9990481458842871	WITHOUT_CLASSIFICATION	9.518541157127762E-4	DESIGN
// The syntax used to add a column to a table	WITHOUT_CLASSIFICATION	0.99823588646821	WITHOUT_CLASSIFICATION	0.0017641135317899388	DESIGN
// Completely optional cascading drop clause.	WITHOUT_CLASSIFICATION	0.9989982526490212	WITHOUT_CLASSIFICATION	0.00100174735097883	DESIGN
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9989020530466964	WITHOUT_CLASSIFICATION	0.0010979469533035297	DESIGN
// LIMIT support (ala TOP) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9988324574978182	WITHOUT_CLASSIFICATION	0.001167542502181856	DESIGN
// InterSystems Cache' does not current support "SELECT ... FOR UPDATE" syntax... // Set your transaction mode to READ_COMMITTED before using	WITHOUT_CLASSIFICATION	0.994031251913087	WITHOUT_CLASSIFICATION	0.005968748086912953	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997109726834859	WITHOUT_CLASSIFICATION	2.8902731651416283E-4	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997109726834859	WITHOUT_CLASSIFICATION	2.8902731651416283E-4	DESIGN
/*<String>*/	WITHOUT_CLASSIFICATION	0.9979423406168142	WITHOUT_CLASSIFICATION	0.002057659383185867	DESIGN
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9909871275367428	WITHOUT_CLASSIFICATION	0.009012872463257176	DESIGN
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9988324574978182	WITHOUT_CLASSIFICATION	0.001167542502181856	DESIGN
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9360810284480224	WITHOUT_CLASSIFICATION	0.0639189715519776	DESIGN
// Does the LIMIT clause come at the start of the SELECT statement, rather than at the end?	WITHOUT_CLASSIFICATION	0.9761489668921858	WITHOUT_CLASSIFICATION	0.023851033107814248	DESIGN
// Does the LIMIT clause take a "maximum" row number instead of a total number of returned rows?	WITHOUT_CLASSIFICATION	0.9916388647068779	WITHOUT_CLASSIFICATION	0.008361135293122064	DESIGN
// The name of the SQL function that transforms a string to lowercase	WITHOUT_CLASSIFICATION	0.9996860766741826	WITHOUT_CLASSIFICATION	3.139233258173685E-4	DESIGN
// Create an OuterJoinGenerator for this dialect.	WITHOUT_CLASSIFICATION	0.99921578905741	WITHOUT_CLASSIFICATION	7.842109425900387E-4	DESIGN
// The keyword used to insert a row without specifying // any column values	WITHOUT_CLASSIFICATION	0.9998276205586839	WITHOUT_CLASSIFICATION	1.7237944131605698E-4	DESIGN
//registerFunction( "trim", new StandardSQLFunction( "trim", Hibernate.STRING ) );	WITHOUT_CLASSIFICATION	0.9978637998100397	WITHOUT_CLASSIFICATION	0.0021362001899603187	DESIGN
//skip the FROM keyword in params	WITHOUT_CLASSIFICATION	0.9996450017052775	WITHOUT_CLASSIFICATION	3.5499829472257076E-4	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.9980112233897486	WITHOUT_CLASSIFICATION	0.0019887766102513788	DESIGN
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.99992567114306	WITHOUT_CLASSIFICATION	7.432885694007594E-5	DESIGN
// SQLFunction implementation	WITHOUT_CLASSIFICATION	0.9996227238544102	WITHOUT_CLASSIFICATION	3.7727614558974155E-4	DESIGN
// conceivable that the dialect ctor could throw HibernateExceptions, so don't re-wrap	WITHOUT_CLASSIFICATION	0.9881486784016499	WITHOUT_CLASSIFICATION	0.011851321598350145	DESIGN
// register the standard dialect resolver	WITHOUT_CLASSIFICATION	0.9998691531081035	WITHOUT_CLASSIFICATION	1.3084689189649457E-4	DESIGN
// register resolvers set via Environment property	WITHOUT_CLASSIFICATION	0.9998652285991181	WITHOUT_CLASSIFICATION	1.3477140088191813E-4	DESIGN
// kept for backward compatibility until after the 3.1beta5 release of HA	WITHOUT_CLASSIFICATION	0.9999836963084588	WITHOUT_CLASSIFICATION	1.6303691541143624E-5	DESIGN
//cache the hashcode	WITHOUT_CLASSIFICATION	0.9990662977131858	WITHOUT_CLASSIFICATION	9.337022868141416E-4	DESIGN
// the CascadingAction contract ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997082343762064	WITHOUT_CLASSIFICATION	2.9176562379368726E-4	DESIGN
// the CascadingAction implementations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999709615830465	WITHOUT_CLASSIFICATION	2.9038416953495257E-4	DESIGN
// delete does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999335730439969	WITHOUT_CLASSIFICATION	6.642695600310446E-5	DESIGN
// orphans should be deleted during delete	WITHOUT_CLASSIFICATION	0.9982816172579906	WITHOUT_CLASSIFICATION	0.001718382742009471	DESIGN
/*(LockMode) anything*/	WITHOUT_CLASSIFICATION	0.9976485066014736	WITHOUT_CLASSIFICATION	0.002351493398526296	DESIGN
// lock doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.999706650970013	WITHOUT_CLASSIFICATION	2.933490299870444E-4	DESIGN
// refresh doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9998287769237135	WITHOUT_CLASSIFICATION	1.7122307628643788E-4	DESIGN
// evicts don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9996664814160804	WITHOUT_CLASSIFICATION	3.3351858391964114E-4	DESIGN
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9998804823784924	WITHOUT_CLASSIFICATION	1.1951762150754995E-4	DESIGN
// orphans should be deleted during save/update	WITHOUT_CLASSIFICATION	0.9981130984852834	WITHOUT_CLASSIFICATION	0.0018869015147166405	DESIGN
// for deprecated saveOrUpdateCopy()	WITHOUT_CLASSIFICATION	0.9814889514076284	WITHOUT_CLASSIFICATION	0.0185110485923716	DESIGN
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9996664814160804	WITHOUT_CLASSIFICATION	3.3351858391964114E-4	DESIGN
//a proxy cannot be transient and it breaks ForeignKeys.isTransient	WITHOUT_CLASSIFICATION	0.9998791528580915	WITHOUT_CLASSIFICATION	1.2084714190847666E-4	DESIGN
// replicate does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999270468301947	WITHOUT_CLASSIFICATION	7.295316980530201E-5	DESIGN
// static helper methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994217605942548	WITHOUT_CLASSIFICATION	5.782394057452265E-4	DESIGN
// handles arrays and newly instantiated collections	WITHOUT_CLASSIFICATION	0.9997126485663436	WITHOUT_CLASSIFICATION	2.8735143365647806E-4	DESIGN
// Actually the semantics of the next three are really "Bag" // Note that, unlike objects, collection insertions, updates, // deletions are not really remembered between flushes. We // just re-use the same Lists for convenience.	WITHOUT_CLASSIFICATION	0.9521394150473395	WITHOUT_CLASSIFICATION	0.04786058495266044	DESIGN
// Add these directly to the executions queue	WITHOUT_CLASSIFICATION	0.999332440580253	WITHOUT_CLASSIFICATION	6.675594197470982E-4	DESIGN
// continue loop	WITHOUT_CLASSIFICATION	0.9999270177025327	WITHOUT_CLASSIFICATION	7.298229746730136E-5	DESIGN
//sort the updates by fk	WITHOUT_CLASSIFICATION	0.9997527844803523	WITHOUT_CLASSIFICATION	2.4721551964776385E-4	DESIGN
//sort the updates by pk	WITHOUT_CLASSIFICATION	0.9997527844803523	WITHOUT_CLASSIFICATION	2.4721551964776385E-4	DESIGN
// the mapping of entity names to their latest batch numbers.	WITHOUT_CLASSIFICATION	0.9999825344916282	WITHOUT_CLASSIFICATION	1.7465508371772016E-5	DESIGN
// the map of batch numbers to EntityInsertAction lists	WITHOUT_CLASSIFICATION	0.9997057046760802	WITHOUT_CLASSIFICATION	2.942953239198365E-4	DESIGN
//optimize the hash size to eliminate a rehash.	WITHOUT_CLASSIFICATION	0.9957948159975683	WITHOUT_CLASSIFICATION	0.004205184002431796	DESIGN
// the list of entity names that indicate the batch number	WITHOUT_CLASSIFICATION	0.9999530831235955	WITHOUT_CLASSIFICATION	4.6916876404467196E-5	DESIGN
// remove the current element from insertions. It will be added back later.	WITHOUT_CLASSIFICATION	0.9997908201524026	WITHOUT_CLASSIFICATION	2.091798475972437E-4	DESIGN
// the entity associated with the current action.	WITHOUT_CLASSIFICATION	0.9996449602746267	WITHOUT_CLASSIFICATION	3.5503972537330783E-4	DESIGN
// There is already an existing batch for this type of entity. // Check to see if the latest batch is acceptable.	WITHOUT_CLASSIFICATION	0.999478938180693	WITHOUT_CLASSIFICATION	5.21061819307038E-4	DESIGN
// now rebuild the insertions list. There is a batch for each entry in the name list.	WITHOUT_CLASSIFICATION	0.9997215694297994	WITHOUT_CLASSIFICATION	2.7843057020057754E-4	DESIGN
// the current batch number is the latest batch for this entity type.	WITHOUT_CLASSIFICATION	0.9968699345538916	WITHOUT_CLASSIFICATION	0.003130065446108283	DESIGN
// loop through all the associations of the current entity and make sure that they are processed // before the current batch number	WITHOUT_CLASSIFICATION	0.9999671479991932	WITHOUT_CLASSIFICATION	3.285200080682107E-5	DESIGN
// find the batch number associated with the current association, if any.	WITHOUT_CLASSIFICATION	0.9999531099179834	WITHOUT_CLASSIFICATION	4.68900820166519E-5	DESIGN
// create a new batch for this type. The batch number is the number of current batches.	WITHOUT_CLASSIFICATION	0.9994686511526273	WITHOUT_CLASSIFICATION	5.31348847372666E-4	DESIGN
// loop through all the associated entities and make sure they have been // processed before the latest // batch associated with this entity type.	WITHOUT_CLASSIFICATION	0.9997209566125201	WITHOUT_CLASSIFICATION	2.7904338747988263E-4	DESIGN
// since this entity will now be processed in the latest possible batch, // we can be assured that it will come after all other associations, // there's not need to continue checking.	WITHOUT_CLASSIFICATION	0.977469698957645	WITHOUT_CLASSIFICATION	0.02253030104235502	DESIGN
//cascade to current collection elements	WITHOUT_CLASSIFICATION	0.9997059925558947	WITHOUT_CLASSIFICATION	2.9400744410527875E-4	DESIGN
//not really necessary, but good for consistency...	WITHOUT_CLASSIFICATION	0.9574861124278758	WITHOUT_CLASSIFICATION	0.04251388757212407	DESIGN
// we can't cascade to non-embedded elements	WITHOUT_CLASSIFICATION	0.999647108874435	WITHOUT_CLASSIFICATION	3.528911255650656E-4	DESIGN
//a newly instantiated collection can't have orphans	WITHOUT_CLASSIFICATION	0.9984103907102506	WITHOUT_CLASSIFICATION	0.0015896092897494925	DESIGN
// handle orphaned entities!!	WITHOUT_CLASSIFICATION	0.9975863763897472	WITHOUT_CLASSIFICATION	0.002413623610252792	DESIGN
// Loaded entity instances, by EntityUniqueKey	WITHOUT_CLASSIFICATION	0.9993492517979001	WITHOUT_CLASSIFICATION	6.507482020998155E-4	DESIGN
// Identity map of EntityEntry instances, by the entity instance	WITHOUT_CLASSIFICATION	0.999737209075513	WITHOUT_CLASSIFICATION	2.6279092448699786E-4	DESIGN
// Entity proxies, by EntityKey	WITHOUT_CLASSIFICATION	0.9997358433360147	WITHOUT_CLASSIFICATION	2.6415666398534043E-4	DESIGN
// Snapshots of current database state for entities // that have *not* been loaded	WITHOUT_CLASSIFICATION	0.9999183484515172	WITHOUT_CLASSIFICATION	8.165154848285055E-5	DESIGN
// Identity map of array holder ArrayHolder instances, by the array instance	WITHOUT_CLASSIFICATION	0.9999614115080204	WITHOUT_CLASSIFICATION	3.8588491979498845E-5	DESIGN
// Collection wrappers, by the CollectionKey //key=CollectionKey, value=PersistentCollection	WITHOUT_CLASSIFICATION	0.9997727229957837	WITHOUT_CLASSIFICATION	2.272770042163793E-4	DESIGN
// Set of EntityKeys of deleted objects	WITHOUT_CLASSIFICATION	0.999885354875012	WITHOUT_CLASSIFICATION	1.1464512498814785E-4	DESIGN
// properties that we have tried to load, and not found in the database	WITHOUT_CLASSIFICATION	0.999735537520994	WITHOUT_CLASSIFICATION	2.6446247900600443E-4	DESIGN
// A list of collection wrappers that were instantiating during result set // processing, that we will need to initialize at the end of the query	WITHOUT_CLASSIFICATION	0.9997123752889572	WITHOUT_CLASSIFICATION	2.8762471104273575E-4	DESIGN
// A container for collections we load up when the owning entity is not // yet loaded ... for now, this is purely transient!	WITHOUT_CLASSIFICATION	0.7329012005245498	WITHOUT_CLASSIFICATION	0.2670987994754502	DESIGN
// Downgrade locks	WITHOUT_CLASSIFICATION	0.9992572550215397	WITHOUT_CLASSIFICATION	7.427449784601814E-4	DESIGN
// any earlier proxy takes precedence	WITHOUT_CLASSIFICATION	0.9998736438645212	WITHOUT_CLASSIFICATION	1.263561354788479E-4	DESIGN
//unwrap the object	WITHOUT_CLASSIFICATION	0.9982651181852962	WITHOUT_CLASSIFICATION	0.00173488181470385	DESIGN
//initialize + unwrap the object	WITHOUT_CLASSIFICATION	0.9993982134795781	WITHOUT_CLASSIFICATION	6.017865204219169E-4	DESIGN
//return the proxied object	WITHOUT_CLASSIFICATION	0.9983871394359998	WITHOUT_CLASSIFICATION	0.0016128605640002747	DESIGN
//overwrite old proxy	WITHOUT_CLASSIFICATION	0.9996533659591336	WITHOUT_CLASSIFICATION	3.46634040866474E-4	DESIGN
// early exit...	WITHOUT_CLASSIFICATION	0.9994834903099703	WITHOUT_CLASSIFICATION	5.165096900295988E-4	DESIGN
// or should it actually throw an exception?	WITHOUT_CLASSIFICATION	0.9964115690395026	WITHOUT_CLASSIFICATION	0.0035884309604974247	DESIGN
//treat it just like a new collection	WITHOUT_CLASSIFICATION	0.9977539318946813	WITHOUT_CLASSIFICATION	0.002246068105318684	DESIGN
//do this work only at the very highest level of the load //don't let this method be called recursively	WITHOUT_CLASSIFICATION	0.8580438960295135	WITHOUT_CLASSIFICATION	0.14195610397048664	DESIGN
//note that each iteration of the loop may add new elements	WITHOUT_CLASSIFICATION	0.9999928282869761	WITHOUT_CLASSIFICATION	7.171713023883964E-6	DESIGN
//it might be an unwrapped collection reference! //try to find a wrapper (slowish)	WITHOUT_CLASSIFICATION	0.9789073679214502	WITHOUT_CLASSIFICATION	0.02109263207854983	DESIGN
/*public boolean isNonExistant(EntityKey key) {	WITHOUT_CLASSIFICATION	0.9996682060522887	WITHOUT_CLASSIFICATION	3.3179394771133095E-4	DESIGN
/*public boolean isNonExistant(EntityUniqueKey key) {	WITHOUT_CLASSIFICATION	0.9996682060522887	WITHOUT_CLASSIFICATION	3.3179394771133095E-4	DESIGN
// iterate all the entities currently associated with the persistence context.	WITHOUT_CLASSIFICATION	0.994759974012994	WITHOUT_CLASSIFICATION	0.005240025987005956	DESIGN
// does this entity entry pertain to the entity persister in which we are interested (owner)?	WITHOUT_CLASSIFICATION	0.997497105782659	WITHOUT_CLASSIFICATION	0.0025028942173409216	DESIGN
//check if the managed object is the parent	WITHOUT_CLASSIFICATION	0.9960822065000988	WITHOUT_CLASSIFICATION	0.003917793499901159	DESIGN
// otherwise, the proxy was pruned during the serialization process	WITHOUT_CLASSIFICATION	0.9999958730152059	WITHOUT_CLASSIFICATION	4.126984794100253E-6	DESIGN
// adds remove as a sort-of alias for delete...	WITHOUT_CLASSIFICATION	0.9998776487245035	WITHOUT_CLASSIFICATION	1.2235127549664536E-4	DESIGN
//bad cast	WITHOUT_CLASSIFICATION	0.9983020378106009	WITHOUT_CLASSIFICATION	0.0016979621893990554	DESIGN
//return lhsPersister.getSubclassPropertyColumnNames(property);	WITHOUT_CLASSIFICATION	0.9988721645163332	WITHOUT_CLASSIFICATION	0.0011278354836667466	DESIGN
//property-refs for associations defined on a //component are not supported, so no need to slice	WITHOUT_CLASSIFICATION	0.988042702952838	WITHOUT_CLASSIFICATION	0.011957297047161846	DESIGN
//if there is no property-ref, assume the join //is to the subclass table (ie. the table of the //subclass that the association belongs to)	WITHOUT_CLASSIFICATION	0.9999678846289035	WITHOUT_CLASSIFICATION	3.2115371096584173E-5	DESIGN
//handle a property-ref	WITHOUT_CLASSIFICATION	0.9958569277705892	WITHOUT_CLASSIFICATION	0.00414307222941084	DESIGN
/*NativeSQLQueryReturn*/	WITHOUT_CLASSIFICATION	0.9976485066014736	WITHOUT_CLASSIFICATION	0.002351493398526296	DESIGN
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9995313541824488	WITHOUT_CLASSIFICATION	4.686458175513474E-4	DESIGN
// why is all others non final ?	WITHOUT_CLASSIFICATION	0.9898184695941019	WITHOUT_CLASSIFICATION	0.010181530405898118	DESIGN
//this.forceCacheRefresh = forceCacheRefresh;	WITHOUT_CLASSIFICATION	0.9996088335948893	WITHOUT_CLASSIFICATION	3.911664051107176E-4	DESIGN
// HELLA IMPORTANT OPTIMIZATION!!!	WITHOUT_CLASSIFICATION	0.9994664167093965	WITHOUT_CLASSIFICATION	5.335832906034879E-4	DESIGN
/*return that.type.equals(type) && 	WITHOUT_CLASSIFICATION	0.9967690299886683	WITHOUT_CLASSIFICATION	0.003230970011331686	DESIGN
//Must occur after resolving identifiers!	WITHOUT_CLASSIFICATION	0.9994550441050608	WITHOUT_CLASSIFICATION	5.44955894939258E-4	DESIGN
//take a snapshot	WITHOUT_CLASSIFICATION	0.9964776376753985	WITHOUT_CLASSIFICATION	0.0035223623246014987	DESIGN
// do a check	WITHOUT_CLASSIFICATION	0.9993400926109953	WITHOUT_CLASSIFICATION	6.599073890046099E-4	DESIGN
// the owning entity may have been deleted and its identifier unset due to // identifier-rollback; in which case, try to look up its identifier from // the persistence context	WITHOUT_CLASSIFICATION	0.9996376016638827	WITHOUT_CLASSIFICATION	3.6239833611730385E-4	DESIGN
// do the work	WITHOUT_CLASSIFICATION	0.9989315654777984	WITHOUT_CLASSIFICATION	0.0010684345222016537	DESIGN
// We've been here before	WITHOUT_CLASSIFICATION	0.9955177411662745	WITHOUT_CLASSIFICATION	0.004482258833725576	DESIGN
// it is or was referenced _somewhere_	WITHOUT_CLASSIFICATION	0.9997468101569622	WITHOUT_CLASSIFICATION	2.531898430377724E-4	DESIGN
// do the work	WITHOUT_CLASSIFICATION	0.9989315654777984	WITHOUT_CLASSIFICATION	0.0010684345222016537	DESIGN
// if either its role changed,	WITHOUT_CLASSIFICATION	0.9999696403485423	WITHOUT_CLASSIFICATION	3.035965145762596E-5	DESIGN
// or its key changed	WITHOUT_CLASSIFICATION	0.9999909830626285	WITHOUT_CLASSIFICATION	9.016937371546879E-6	DESIGN
// we will need to create new entries	WITHOUT_CLASSIFICATION	0.9992540102069007	WITHOUT_CLASSIFICATION	7.459897930992122E-4	DESIGN
// we will need to remove ye olde entries	WITHOUT_CLASSIFICATION	0.9963590445839235	WITHOUT_CLASSIFICATION	0.0036409554160765035	DESIGN
// force initialize!	WITHOUT_CLASSIFICATION	0.998412890086721	WITHOUT_CLASSIFICATION	0.00158710991327907	DESIGN
// else if it's elements changed	WITHOUT_CLASSIFICATION	0.9999973780560992	WITHOUT_CLASSIFICATION	2.6219439008018127E-6	DESIGN
//ATTRIBUTES MAINTAINED BETWEEN FLUSH CYCLES	WITHOUT_CLASSIFICATION	0.9987123541908954	WITHOUT_CLASSIFICATION	0.0012876458091044892	DESIGN
// session-start/post-flush persistent state	WITHOUT_CLASSIFICATION	0.9996394548614476	WITHOUT_CLASSIFICATION	3.6054513855241833E-4	DESIGN
// allow the CollectionSnapshot to be serialized	WITHOUT_CLASSIFICATION	0.9978374477613184	WITHOUT_CLASSIFICATION	0.0021625522386816373	DESIGN
// ATTRIBUTES USED ONLY DURING FLUSH CYCLE	WITHOUT_CLASSIFICATION	0.9966000371956878	WITHOUT_CLASSIFICATION	0.003399962804312313	DESIGN
// "current" means the reference that was found during flush() 	WITHOUT_CLASSIFICATION	0.9999850473551115	WITHOUT_CLASSIFICATION	1.495264488851484E-5	DESIGN
// "loaded" means the reference that is consistent  // with the current database state	WITHOUT_CLASSIFICATION	0.9998768094690762	WITHOUT_CLASSIFICATION	1.2319053092379087E-4	DESIGN
// during flush, we navigate the object graph to // collections and decide what to do with them	WITHOUT_CLASSIFICATION	0.9948264872539487	WITHOUT_CLASSIFICATION	0.005173512746051232	DESIGN
// if we instantiate a collection during the flush() process, // we must ignore it for the rest of the flush()	WITHOUT_CLASSIFICATION	0.9999222951574215	WITHOUT_CLASSIFICATION	7.770484257844685E-5	DESIGN
// new collections that get found + wrapped // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9993679621931018	WITHOUT_CLASSIFICATION	6.320378068982525E-4	DESIGN
//a newly wrapped collection is NOT dirty (or we get unnecessary version updates)	WITHOUT_CLASSIFICATION	0.762485795627906	WITHOUT_CLASSIFICATION	0.2375142043720941	DESIGN
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9976485066014736	WITHOUT_CLASSIFICATION	0.002351493398526296	DESIGN
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9976485066014736	WITHOUT_CLASSIFICATION	0.002351493398526296	DESIGN
// detached collections that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999043807148854	WITHOUT_CLASSIFICATION	9.561928511459576E-5	DESIGN
//optimization	WITHOUT_CLASSIFICATION	0.9978670924811555	WITHOUT_CLASSIFICATION	0.002132907518844583	DESIGN
//optimization //optimization	WITHOUT_CLASSIFICATION	0.9976485066014736	WITHOUT_CLASSIFICATION	0.002351493398526296	DESIGN
//re-snapshot	WITHOUT_CLASSIFICATION	0.9978670924811555	WITHOUT_CLASSIFICATION	0.002132907518844583	DESIGN
// for convenience to save some lookups	WITHOUT_CLASSIFICATION	0.9996193027679056	WITHOUT_CLASSIFICATION	3.8069723209443063E-4	DESIGN
//NOTE: this is not updated when properties are fetched lazily!	WITHOUT_CLASSIFICATION	0.9960440758521677	WITHOUT_CLASSIFICATION	0.003955924147832259	DESIGN
//memory optimization	WITHOUT_CLASSIFICATION	0.9987708276662655	WITHOUT_CLASSIFICATION	0.001229172333734502	DESIGN
// use the id value of a newly instantiated instance as the unsaved-value	WITHOUT_CLASSIFICATION	0.9984419028605457	WITHOUT_CLASSIFICATION	0.0015580971394542926	DESIGN
// copied from Session:	WITHOUT_CLASSIFICATION	0.9825007073621862	WITHOUT_CLASSIFICATION	0.01749929263781387	DESIGN
// this should not happen since the DTD prevents it	WITHOUT_CLASSIFICATION	0.9993154375367747	WITHOUT_CLASSIFICATION	6.845624632254327E-4	DESIGN
// JoinProcessor needs to know if the where clause fragment came from a dynamic filter or not so it // can put the where clause fragment in the right place in the SQL AST.   'hasFilterCondition' keeps track // of that fact.	WITHOUT_CLASSIFICATION	0.9996738703825424	WITHOUT_CLASSIFICATION	3.26129617457607E-4	DESIGN
// the current join represents the join between a many-to-many association table // and its "target" table.  Here we need to apply any additional filters // defined specifically on the many-to-many	WITHOUT_CLASSIFICATION	0.9999996517553835	WITHOUT_CLASSIFICATION	3.4824461649494376E-7	DESIGN
//check basic level one nullablilty	WITHOUT_CLASSIFICATION	0.999245127787083	WITHOUT_CLASSIFICATION	7.54872212917034E-4	DESIGN
//values is not null and is checkable, we'll look deeper	WITHOUT_CLASSIFICATION	0.9815614948030346	WITHOUT_CLASSIFICATION	0.01843850519696544	DESIGN
//for non null args, check for components and elements containing components	WITHOUT_CLASSIFICATION	0.9999397203164229	WITHOUT_CLASSIFICATION	6.027968357707668E-5	DESIGN
//cache the hashcode	WITHOUT_CLASSIFICATION	0.9990662977131858	WITHOUT_CLASSIFICATION	9.337022868141416E-4	DESIGN
//persistent collections may have components	WITHOUT_CLASSIFICATION	0.9989442122561857	WITHOUT_CLASSIFICATION	0.0010557877438144047	DESIGN
//check for all components values in the collection	WITHOUT_CLASSIFICATION	0.9997556843389646	WITHOUT_CLASSIFICATION	2.4431566103542675E-4	DESIGN
/* will check current level if some of them are not null	WITHOUT_CLASSIFICATION	0.9752752755175854	WITHOUT_CLASSIFICATION	0.02472472448241455	DESIGN
//do the test	WITHOUT_CLASSIFICATION	0.9999362201033591	WITHOUT_CLASSIFICATION	6.377989664091375E-5	DESIGN
// if its an uninitialized proxy it can't be transient	WITHOUT_CLASSIFICATION	0.9999881264346713	WITHOUT_CLASSIFICATION	1.1873565328659184E-5	DESIGN
//unwrap it	WITHOUT_CLASSIFICATION	0.9978422230313901	WITHOUT_CLASSIFICATION	0.0021577769686099498	DESIGN
// See if the entity is already bound to this session, if not look at the // entity identifier and assume that the entity is persistent if the // id is not "unsaved" (that is, we rely on foreign keys to keep // database integrity)	WITHOUT_CLASSIFICATION	0.9138122400562867	WITHOUT_CLASSIFICATION	0.08618775994371336	DESIGN
// an unfetched association can only point to // an entity that already exists in the db	WITHOUT_CLASSIFICATION	0.9999628623914336	WITHOUT_CLASSIFICATION	3.713760856637835E-5	DESIGN
// let the interceptor inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9926645018662776	WITHOUT_CLASSIFICATION	0.007335498133722438	DESIGN
// let the persister inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9843038892945178	WITHOUT_CLASSIFICATION	0.01569611070548227	DESIGN
// we use the assumed value, if there is one, to avoid hitting // the database	WITHOUT_CLASSIFICATION	0.9999112667189772	WITHOUT_CLASSIFICATION	8.873328102281311E-5	DESIGN
// hit the database, after checking the session cache for a snapshot	WITHOUT_CLASSIFICATION	0.7110798181604466	WITHOUT_CLASSIFICATION	0.2889201818395533	DESIGN
// context-entity-identifier returns null explicitly if the entity // is not associated with the persistence context; so make some // deeper checks...	WITHOUT_CLASSIFICATION	0.9997118173767628	WITHOUT_CLASSIFICATION	2.881826232372085E-4	DESIGN
//int count = 0;	WITHOUT_CLASSIFICATION	0.9997569069290438	WITHOUT_CLASSIFICATION	2.4309307095607868E-4	DESIGN
//the first key found after the given key	WITHOUT_CLASSIFICATION	0.999990983306118	WITHOUT_CLASSIFICATION	9.016693881951391E-6	DESIGN
//checkForEnd = false;	WITHOUT_CLASSIFICATION	0.9991718286712716	WITHOUT_CLASSIFICATION	8.281713287283975E-4	DESIGN
//count++;	WITHOUT_CLASSIFICATION	0.9992064434309498	WITHOUT_CLASSIFICATION	7.935565690501368E-4	DESIGN
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999169644894335	WITHOUT_CLASSIFICATION	8.303551056652571E-5	DESIGN
//we ran out of keys to try	WITHOUT_CLASSIFICATION	0.9997435575544412	WITHOUT_CLASSIFICATION	2.56442445558759E-4	DESIGN
//first element of array is reserved for the actual instance we are loading!	WITHOUT_CLASSIFICATION	0.9796218065654502	WITHOUT_CLASSIFICATION	0.020378193434549764	DESIGN
//the first id found after the given id	WITHOUT_CLASSIFICATION	0.9999704241167793	WITHOUT_CLASSIFICATION	2.9575883220618502E-5	DESIGN
//we ran out of ids to try	WITHOUT_CLASSIFICATION	0.9998540283393237	WITHOUT_CLASSIFICATION	1.4597166067625578E-4	DESIGN
// look for existing collection as part of the persistence context	WITHOUT_CLASSIFICATION	0.99920486622917	WITHOUT_CLASSIFICATION	7.951337708300605E-4	DESIGN
// ignore this row of results! Note the early exit	WITHOUT_CLASSIFICATION	0.9999801564936622	WITHOUT_CLASSIFICATION	1.9843506337847406E-5	DESIGN
// initialize this collection	WITHOUT_CLASSIFICATION	0.9900948505636614	WITHOUT_CLASSIFICATION	0.009905149436338502	DESIGN
// create one	WITHOUT_CLASSIFICATION	0.9992603944436406	WITHOUT_CLASSIFICATION	7.396055563593197E-4	DESIGN
// warning: can cause a recursive calls! (proxy initialization)	WITHOUT_CLASSIFICATION	0.9940445155264488	WITHOUT_CLASSIFICATION	0.005955484473551228	DESIGN
// there were no queued additions // and the role has a cache	WITHOUT_CLASSIFICATION	0.9999734826090233	WITHOUT_CLASSIFICATION	2.651739097673133E-5	DESIGN
// and this is not a forced initialization during flush	WITHOUT_CLASSIFICATION	0.9974465750170152	WITHOUT_CLASSIFICATION	0.0025534249829847785	DESIGN
// some filters affecting the collection are enabled on the session, so do not do the put into the cache.	WITHOUT_CLASSIFICATION	0.9979456148770673	WITHOUT_CLASSIFICATION	0.002054385122932709	DESIGN
// cleanup code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997774484084991	WITHOUT_CLASSIFICATION	2.2255159150084855E-4	DESIGN
// loading collection xrefs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997257800002501	WITHOUT_CLASSIFICATION	2.7421999974981426E-4	DESIGN
// Collection load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999374682644225	WITHOUT_CLASSIFICATION	6.253173557748769E-4	DESIGN
// simple cache of param metadata based on query string.  Ideally, the // original "user-supplied query" string should be used to retreive this // metadata (i.e., not the para-list-expanded query string) to avoid // unnecessary cache entries. // Used solely for caching param metadata for native-sql queries, see // getSQLParameterMetadata() for a discussion as to why...	WITHOUT_CLASSIFICATION	0.9950030134459853	WITHOUT_CLASSIFICATION	0.004996986554014683	DESIGN
// the cache of the actual plans...	WITHOUT_CLASSIFICATION	0.9994298119332553	WITHOUT_CLASSIFICATION	5.701880667447121E-4	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.9980112233897486	WITHOUT_CLASSIFICATION	0.0019887766102513788	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.9980112233897486	WITHOUT_CLASSIFICATION	0.0019887766102513788	DESIGN
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999979387908937	WITHOUT_CLASSIFICATION	2.0612091062890403E-6	DESIGN
// for native-sql queries, the param metadata is determined outside // any relation to a query plan, because query plan creation and/or // retreival for a native-sql query depends on all of the return // types having been set, which might not be the case up-front when // param metadata would be most useful	WITHOUT_CLASSIFICATION	0.9996034724476135	WITHOUT_CLASSIFICATION	3.965275523864433E-4	DESIGN
// don't care...	WITHOUT_CLASSIFICATION	0.9981578673046543	WITHOUT_CLASSIFICATION	0.0018421326953456775	DESIGN
// Recognition code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9991352104848682	WITHOUT_CLASSIFICATION	8.64789515131795E-4	DESIGN
// don't care...	WITHOUT_CLASSIFICATION	0.9981578673046543	WITHOUT_CLASSIFICATION	0.0018421326953456775	DESIGN
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.999348270691186	WITHOUT_CLASSIFICATION	6.517293088139331E-4	DESIGN
// break the outer loop !!!	WITHOUT_CLASSIFICATION	0.9971440159642743	WITHOUT_CLASSIFICATION	0.0028559840357258465	DESIGN
// named parameter	WITHOUT_CLASSIFICATION	0.998212993698946	WITHOUT_CLASSIFICATION	0.0017870063010540307	DESIGN
// could be either an ordinal or JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9951870136518363	WITHOUT_CLASSIFICATION	0.0048129863481638085	DESIGN
// a peek ahead showed this as an JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9934004051199927	WITHOUT_CLASSIFICATION	0.0065995948800073295	DESIGN
// make sure this "name" is an integral	WITHOUT_CLASSIFICATION	0.9986487073375361	WITHOUT_CLASSIFICATION	0.0013512926624639453	DESIGN
// pre-determine and cache the hashcode	WITHOUT_CLASSIFICATION	0.999394362644398	WITHOUT_CLASSIFICATION	6.056373556020818E-4	DESIGN
// perform the actual work	WITHOUT_CLASSIFICATION	0.9990399847002716	WITHOUT_CLASSIFICATION	9.600152997283315E-4	DESIGN
// if everything went ok, commit the transaction and close the obtained // connection handle...	WITHOUT_CLASSIFICATION	0.9999892184530716	WITHOUT_CLASSIFICATION	1.0781546928410317E-5	DESIGN
// at some point the processing went bad, so we need to: //      1) make sure the connection handle gets released //      2) try to cleanup the JTA context as much as possible	WITHOUT_CLASSIFICATION	0.9979629296307707	WITHOUT_CLASSIFICATION	0.002037070369229363	DESIGN
// finally handle the exception	WITHOUT_CLASSIFICATION	0.99815301208365	WITHOUT_CLASSIFICATION	0.0018469879163499259	DESIGN
// a "detached" collection that belonged to a different entity	WITHOUT_CLASSIFICATION	0.9841799141878301	WITHOUT_CLASSIFICATION	0.015820085812169947	DESIGN
//saveOrUpdateCopy() is deprecated!	WITHOUT_CLASSIFICATION	0.999075174081982	WITHOUT_CLASSIFICATION	9.248259180179673E-4	DESIGN
// collectionPersister should not be null, but we don't want to throw // an exception if it is null	WITHOUT_CLASSIFICATION	0.7478993987679492	WITHOUT_CLASSIFICATION	0.2521006012320508	DESIGN
// otherwise a null or brand new collection // this will also (inefficiently) handle arrays, which // have no snapshot, so we can't do any better //processArrayOrNewCollection(collection, type);	WITHOUT_CLASSIFICATION	0.9750315945189905	WITHOUT_CLASSIFICATION	0.024968405481009547	DESIGN
// a "detached" collection that originally belonged to the same entity	WITHOUT_CLASSIFICATION	0.9972238555122391	WITHOUT_CLASSIFICATION	0.0027761444877608585	DESIGN
//do nothing	WITHOUT_CLASSIFICATION	0.9996625560843879	WITHOUT_CLASSIFICATION	3.3744391561202396E-4	DESIGN
//do nothing	WITHOUT_CLASSIFICATION	0.9996625560843879	WITHOUT_CLASSIFICATION	3.3744391561202396E-4	DESIGN
//Force a substitution!	WITHOUT_CLASSIFICATION	0.9955358061776017	WITHOUT_CLASSIFICATION	0.004464193822398224	DESIGN
// The user requested a "greater" (i.e. more restrictive) form of // pessimistic lock	WITHOUT_CLASSIFICATION	0.9987059629882776	WITHOUT_CLASSIFICATION	0.0012940370117224098	DESIGN
// the database now holds a lock + the object is flushed from the cache, // so release the soft lock	WITHOUT_CLASSIFICATION	0.9994808319147555	WITHOUT_CLASSIFICATION	5.191680852446042E-4	DESIGN
// now update the object .. has to be outside the main if block above (because of collections)	WITHOUT_CLASSIFICATION	0.9999715258462607	WITHOUT_CLASSIFICATION	2.8474153739274714E-5	DESIGN
// Search for collections by reachability, updating their role. // We don't want to touch collections reachable from a deleted object	WITHOUT_CLASSIFICATION	0.9996105694167455	WITHOUT_CLASSIFICATION	3.8943058325442844E-4	DESIGN
// this is a situation where the entity id is assigned by a post-insert generator // and was saved outside the transaction forcing it to be delayed	WITHOUT_CLASSIFICATION	0.9592742746726924	WITHOUT_CLASSIFICATION	0.04072572532730753	DESIGN
// NOTE: we need to do the wrap here even if its not "dirty", // because collections need wrapping but changes to _them_ // don't dirty the container. Also, for versioned data, we // need to wrap before calling searchForDirtyCollections	WITHOUT_CLASSIFICATION	0.9618675758302985	WITHOUT_CLASSIFICATION	0.038132424169701556	DESIGN
//grab its state saved at deletion	WITHOUT_CLASSIFICATION	0.9979326758245118	WITHOUT_CLASSIFICATION	0.002067324175488154	DESIGN
// grab its current state	WITHOUT_CLASSIFICATION	0.999914341384735	WITHOUT_CLASSIFICATION	8.56586152649847E-5	DESIGN
// schedule the update // note that we intentionally do _not_ pass in currentPersistentState!	WITHOUT_CLASSIFICATION	0.9997965240150947	WITHOUT_CLASSIFICATION	2.034759849052998E-4	DESIGN
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9998239395866217	WITHOUT_CLASSIFICATION	1.7606041337819815E-4	DESIGN
// give the Interceptor a chance to process property values, if the properties // were modified by the Interceptor, we need to set them back to the object	WITHOUT_CLASSIFICATION	0.9998240144320414	WITHOUT_CLASSIFICATION	1.7598556795861555E-4	DESIGN
// compare to cached state (ignoring collections unless versioned)	WITHOUT_CLASSIFICATION	0.9999086055513638	WITHOUT_CLASSIFICATION	9.139444863611842E-5	DESIGN
// if it was dirtied by a collection only	WITHOUT_CLASSIFICATION	0.9998989282459094	WITHOUT_CLASSIFICATION	1.0107175409062417E-4	DESIGN
// increment the version number (if necessary)	WITHOUT_CLASSIFICATION	0.9998933733063783	WITHOUT_CLASSIFICATION	1.0662669362179953E-4	DESIGN
// check nullability but do not perform command execute // we'll use scheduled updates for that.	WITHOUT_CLASSIFICATION	0.999641522869585	WITHOUT_CLASSIFICATION	3.584771304151266E-4	DESIGN
//give the Interceptor a chance to modify property values	WITHOUT_CLASSIFICATION	0.9858992322589725	WITHOUT_CLASSIFICATION	0.014100767741027547	DESIGN
//now we might need to recalculate the dirtyProperties array	WITHOUT_CLASSIFICATION	0.9526961883461013	WITHOUT_CLASSIFICATION	0.04730381165389876	DESIGN
//use the current version	WITHOUT_CLASSIFICATION	0.9997929740501441	WITHOUT_CLASSIFICATION	2.070259498557683E-4	DESIGN
// Interceptor returned null, so do the dirtycheck ourself, if possible	WITHOUT_CLASSIFICATION	0.99994509351769	WITHOUT_CLASSIFICATION	5.490648230998558E-5	DESIGN
// object loaded by update()	WITHOUT_CLASSIFICATION	0.999599130805399	WITHOUT_CLASSIFICATION	4.0086919460105287E-4	DESIGN
// dirty check against the usual snapshot of the entity	WITHOUT_CLASSIFICATION	0.9999941077397998	WITHOUT_CLASSIFICATION	5.892260200136611E-6	DESIGN
// dirty check against the database snapshot, if possible/necessary	WITHOUT_CLASSIFICATION	0.9999976206041672	WITHOUT_CLASSIFICATION	2.379395832829709E-6	DESIGN
// the Interceptor handled the dirty checking	WITHOUT_CLASSIFICATION	0.923404962395153	WITHOUT_CLASSIFICATION	0.07659503760484691	DESIGN
//even process null collections	WITHOUT_CLASSIFICATION	0.9997598732395886	WITHOUT_CLASSIFICATION	2.401267604113359E-4	DESIGN
// get the id from the object	WITHOUT_CLASSIFICATION	0.9986996318651025	WITHOUT_CLASSIFICATION	0.0013003681348975288	DESIGN
//always do an INSERT, and let it fail by constraint violation	WITHOUT_CLASSIFICATION	0.9985989806782377	WITHOUT_CLASSIFICATION	0.0014010193217622504	DESIGN
//what is the version on the database?	WITHOUT_CLASSIFICATION	0.9995048506608653	WITHOUT_CLASSIFICATION	4.95149339134798E-4	DESIGN
/// HHH-2378	WITHOUT_CLASSIFICATION	0.9963375512844312	WITHOUT_CLASSIFICATION	0.0036624487155687145	DESIGN
//will result in a SQL UPDATE:	WITHOUT_CLASSIFICATION	0.9985361173456347	WITHOUT_CLASSIFICATION	0.0014638826543652563	DESIGN
//else do nothing (don't even reassociate object!)	WITHOUT_CLASSIFICATION	0.9988075641084112	WITHOUT_CLASSIFICATION	0.001192435891588818	DESIGN
// no existing row - do an insert	WITHOUT_CLASSIFICATION	0.9997951405002156	WITHOUT_CLASSIFICATION	2.0485949978449116E-4	DESIGN
//refresh() does not pass an entityName	WITHOUT_CLASSIFICATION	0.9996765719836466	WITHOUT_CLASSIFICATION	3.2342801635341586E-4	DESIGN
//do not return a proxy! //(this option indicates we are initializing a proxy)	WITHOUT_CLASSIFICATION	0.987167438385622	WITHOUT_CLASSIFICATION	0.01283256161437799	DESIGN
//return a proxy if appropriate	WITHOUT_CLASSIFICATION	0.9994692236135971	WITHOUT_CLASSIFICATION	5.307763864028715E-4	DESIGN
// return existing object or initialized proxy (unless deleted)	WITHOUT_CLASSIFICATION	0.9996976707950965	WITHOUT_CLASSIFICATION	3.0232920490344463E-4	DESIGN
// return new uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999749397043262	WITHOUT_CLASSIFICATION	2.506029567376999E-5	DESIGN
// this object was already loaded	WITHOUT_CLASSIFICATION	0.997727843568742	WITHOUT_CLASSIFICATION	0.002272156431257948	DESIGN
// Entity was found in second-level cache...	WITHOUT_CLASSIFICATION	0.9998132582901229	WITHOUT_CLASSIFICATION	1.8674170987701178E-4	DESIGN
// make it circular-reference safe	WITHOUT_CLASSIFICATION	0.9999185310080906	WITHOUT_CLASSIFICATION	8.146899190941702E-5	DESIGN
// intializes result by side-effect	WITHOUT_CLASSIFICATION	0.9999129195549846	WITHOUT_CLASSIFICATION	8.708044501531925E-5	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Pre-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994996571929101	WITHOUT_CLASSIFICATION	5.003428070899232E-4	DESIGN
//some statistics	WITHOUT_CLASSIFICATION	0.9984701838664571	WITHOUT_CLASSIFICATION	0.0015298161335429402	DESIGN
//safe from concurrent modification because of how entryList() is implemented on IdentityMap	WITHOUT_CLASSIFICATION	0.9969191266844647	WITHOUT_CLASSIFICATION	0.0030808733155353544	DESIGN
// Initialize dirty flags for arrays + collections with composite elements // and reset reached, doupdate, etc.	WITHOUT_CLASSIFICATION	0.9999512126246735	WITHOUT_CLASSIFICATION	4.878737532662896E-5	DESIGN
// Among other things, updateReachables() will recursively load all // collections that are moving roles. This might cause entities to // be loaded.	WITHOUT_CLASSIFICATION	0.9644577739013275	WITHOUT_CLASSIFICATION	0.035542226098672476	DESIGN
// So this needs to be safe from concurrent modification problems. // It is safe because of how IdentityMap implements entrySet()	WITHOUT_CLASSIFICATION	0.9800851417531699	WITHOUT_CLASSIFICATION	0.019914858246830165	DESIGN
// Update the status of the object and if necessary, schedule an update	WITHOUT_CLASSIFICATION	0.999985722836621	WITHOUT_CLASSIFICATION	1.4277163378913899E-5	DESIGN
// Schedule updates to collections:	WITHOUT_CLASSIFICATION	0.9997759104555501	WITHOUT_CLASSIFICATION	2.2408954444985053E-4	DESIGN
// we need to lock the collection caches before // executing entity inserts/updates in order to // account for bidi associations	WITHOUT_CLASSIFICATION	0.9756678472077848	WITHOUT_CLASSIFICATION	0.02433215279221522	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Post-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994996571929101	WITHOUT_CLASSIFICATION	5.003428070899232E-4	DESIGN
//the database has changed now, so the subselect results need to be invalidated	WITHOUT_CLASSIFICATION	0.9994271933269938	WITHOUT_CLASSIFICATION	5.728066730061246E-4	DESIGN
//if the collection is dereferenced, remove from the session cache //iter.remove(); //does not work, since the entrySet is not backed by the set	WITHOUT_CLASSIFICATION	0.9940779357835335	WITHOUT_CLASSIFICATION	0.005922064216466464	DESIGN
//otherwise recreate the mapping between the collection and its key	WITHOUT_CLASSIFICATION	0.9999364463480701	WITHOUT_CLASSIFICATION	6.355365192985439E-5	DESIGN
//get a snapshot	WITHOUT_CLASSIFICATION	0.9977917476807083	WITHOUT_CLASSIFICATION	0.0022082523192916664	DESIGN
/* package-private */	WITHOUT_CLASSIFICATION	0.9996379557161902	WITHOUT_CLASSIFICATION	3.620442838098326E-4	DESIGN
/* package-private */	WITHOUT_CLASSIFICATION	0.9996379557161902	WITHOUT_CLASSIFICATION	3.620442838098326E-4	DESIGN
// key is an entity involved with the operation performed by the listener; // value is a flag indicating if the listener explicitly operates on the entity	WITHOUT_CLASSIFICATION	0.9999936937351598	WITHOUT_CLASSIFICATION	6.306264840154163E-6	DESIGN
// EARLY EXIT!!!	WITHOUT_CLASSIFICATION	0.9991367392007966	WITHOUT_CLASSIFICATION	8.632607992033527E-4	DESIGN
//ie. the entity came in from update()	WITHOUT_CLASSIFICATION	0.9985742674375802	WITHOUT_CLASSIFICATION	0.0014257325624197669	DESIGN
// before any callbacks, etc, so subdeletions see that this deletion happened first	WITHOUT_CLASSIFICATION	0.9999118254445043	WITHOUT_CLASSIFICATION	8.81745554956684E-5	DESIGN
// Ensures that containing deletions happen before sub-deletions	WITHOUT_CLASSIFICATION	0.9999437687228818	WITHOUT_CLASSIFICATION	5.6231277118174176E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.999679076858764	WITHOUT_CLASSIFICATION	3.2092314123604855E-4	DESIGN
// cascade-delete to collections BEFORE the collection owner is deleted	WITHOUT_CLASSIFICATION	0.9998410203060096	WITHOUT_CLASSIFICATION	1.5897969399033423E-4	DESIGN
// cascade-delete to many-to-one AFTER the parent was deleted	WITHOUT_CLASSIFICATION	0.9993641527006538	WITHOUT_CLASSIFICATION	6.358472993463073E-4	DESIGN
// if it is an initialized proxy, let cascade // handle it later on	WITHOUT_CLASSIFICATION	0.979899336737079	WITHOUT_CLASSIFICATION	0.02010066326292106	DESIGN
//assign the requested id to the proxy, *before* //reassociating the proxy	WITHOUT_CLASSIFICATION	0.9999324035564924	WITHOUT_CLASSIFICATION	6.75964435076167E-5	DESIGN
// an uninitialized proxy, noop, don't even need to // return an id, since it is never a save()	WITHOUT_CLASSIFICATION	0.9998005651603917	WITHOUT_CLASSIFICATION	1.9943483960819096E-4	DESIGN
//initialize properties of the event:	WITHOUT_CLASSIFICATION	0.9998827209435162	WITHOUT_CLASSIFICATION	1.1727905648381738E-4	DESIGN
//return the id in the event object	WITHOUT_CLASSIFICATION	0.9971359355982711	WITHOUT_CLASSIFICATION	0.0028640644017288754	DESIGN
//TRANSIENT or DELETED	WITHOUT_CLASSIFICATION	0.9990170756210273	WITHOUT_CLASSIFICATION	9.829243789727402E-4	DESIGN
// use the id assigned to the instance	WITHOUT_CLASSIFICATION	0.9940057231905162	WITHOUT_CLASSIFICATION	0.005994276809483848	DESIGN
// assume this is a newly instantiated transient object // which should be saved rather than updated	WITHOUT_CLASSIFICATION	0.8096117803864473	WITHOUT_CLASSIFICATION	0.19038821961355273	DESIGN
// this is a transient object with existing persistent state not loaded by the session	WITHOUT_CLASSIFICATION	0.9850926320101603	WITHOUT_CLASSIFICATION	0.014907367989839722	DESIGN
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9987867691142815	WITHOUT_CLASSIFICATION	0.0012132308857184134	DESIGN
//cachedState,	WITHOUT_CLASSIFICATION	0.9978670924811555	WITHOUT_CLASSIFICATION	0.002132907518844583	DESIGN
//assume true, since we don't really know, and it doesn't matter	WITHOUT_CLASSIFICATION	0.9940178803760529	WITHOUT_CLASSIFICATION	0.005982119623947121	DESIGN
//a "detached" collection!	WITHOUT_CLASSIFICATION	0.9978399704279544	WITHOUT_CLASSIFICATION	0.0021600295720456616	DESIGN
// if the collection belonged to a different entity, // clean up the existing state of the collection	WITHOUT_CLASSIFICATION	0.9925058476014236	WITHOUT_CLASSIFICATION	0.007494152398576319	DESIGN
//log.debug( "calling onLoad()" );	WITHOUT_CLASSIFICATION	0.9993718771238168	WITHOUT_CLASSIFICATION	6.28122876183113E-4	DESIGN
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9978670924811555	WITHOUT_CLASSIFICATION	0.002132907518844583	DESIGN
// note: performExecutions() clears all collectionXxxxtion  // collections (the collection actions) in the session	WITHOUT_CLASSIFICATION	0.9992076596178545	WITHOUT_CLASSIFICATION	7.923403821455427E-4	DESIGN
// if no array holder we found an unwrappered array (this can't occur, // because we now always call wrap() before getting to here) // return (ah==null) ? true : searchForDirtyCollections(ah, type);	WITHOUT_CLASSIFICATION	0.9999346543160887	WITHOUT_CLASSIFICATION	6.534568391127274E-5	DESIGN
// if not wrappered yet, its dirty (this can't occur, because // we now always call wrap() before getting to here) // return ( ! (obj instanceof PersistentCollection) ) ? //true : searchForDirtyCollections( (PersistentCollection) obj, type );	WITHOUT_CLASSIFICATION	0.9101240967469062	WITHOUT_CLASSIFICATION	0.08987590325309379	DESIGN
//we need to check even if it was not initialized, because of delayed adds!	WITHOUT_CLASSIFICATION	0.999902870351609	WITHOUT_CLASSIFICATION	9.712964839109267E-5	DESIGN
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9978670924811555	WITHOUT_CLASSIFICATION	0.002132907518844583	DESIGN
// find any entities that are still transient after retry	WITHOUT_CLASSIFICATION	0.9995120265958438	WITHOUT_CLASSIFICATION	4.87973404156167E-4	DESIGN
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9978670924811555	WITHOUT_CLASSIFICATION	0.002132907518844583	DESIGN
// Check the persistence context for an entry relating to this // entity to be merged...	WITHOUT_CLASSIFICATION	0.9838510723070655	WITHOUT_CLASSIFICATION	0.01614892769293443	DESIGN
// we have specialized case of a detached entity from the // perspective of the merge operation.  Specifically, we // have an incoming entity instance which has a corresponding // entry in the current persistence context, but registered // under a different entity instance	WITHOUT_CLASSIFICATION	0.9999701422731581	WITHOUT_CLASSIFICATION	2.9857726842029102E-5	DESIGN
//DELETED	WITHOUT_CLASSIFICATION	0.9992064434309498	WITHOUT_CLASSIFICATION	7.935565690501368E-4	DESIGN
//before cascade!	WITHOUT_CLASSIFICATION	0.9978670924811555	WITHOUT_CLASSIFICATION	0.002132907518844583	DESIGN
// cascade first, so that all unsaved objects get their // copy created before we actually copy //cascadeOnMerge(event, persister, entity, copyCache, Cascades.CASCADE_BEFORE_MERGE);	WITHOUT_CLASSIFICATION	0.9999794251084214	WITHOUT_CLASSIFICATION	2.0574891578552133E-5	DESIGN
//this bit is only *really* absolutely necessary for handling //requestedId, but is also good if we merge multiple object //graphs, since it helps ensure uniqueness	WITHOUT_CLASSIFICATION	0.9269626969984798	WITHOUT_CLASSIFICATION	0.07303730300152018	DESIGN
// continue...; we'll find out if it ends up not getting saved later	WITHOUT_CLASSIFICATION	0.9756002559919491	WITHOUT_CLASSIFICATION	0.02439974400805095	DESIGN
// cascade first, so that all unsaved objects get their // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999786398823359	WITHOUT_CLASSIFICATION	2.1360117664120867E-5	DESIGN
// check that entity id = requestedId	WITHOUT_CLASSIFICATION	0.9998900312386718	WITHOUT_CLASSIFICATION	1.0996876132819702E-4	DESIGN
//before cascade!	WITHOUT_CLASSIFICATION	0.9978670924811555	WITHOUT_CLASSIFICATION	0.002132907518844583	DESIGN
// we got here because we assumed that an instance // with an assigned id was detached, when it was // really persistent	WITHOUT_CLASSIFICATION	0.9992104760254079	WITHOUT_CLASSIFICATION	7.895239745921589E-4	DESIGN
// cascade first, so that all unsaved objects get their  // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999716589284146	WITHOUT_CLASSIFICATION	2.834107158542922E-5	DESIGN
//copyValues works by reflection, so explicitly mark the entity instance dirty	WITHOUT_CLASSIFICATION	0.9907117310015057	WITHOUT_CLASSIFICATION	0.009288268998494354	DESIGN
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.9978670924811555	WITHOUT_CLASSIFICATION	0.002132907518844583	DESIGN
//source.getBatcher().executeBatch(); //found another way to ensure that all batched joined inserts have been executed	WITHOUT_CLASSIFICATION	0.9985544903301915	WITHOUT_CLASSIFICATION	0.0014455096698085127	DESIGN
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9998239395866217	WITHOUT_CLASSIFICATION	1.7606041337819815E-4	DESIGN
//now done in EntityIdentityInsertAction //persister.setIdentifier( entity, id, source.getEntityMode() );	WITHOUT_CLASSIFICATION	0.9992709361702599	WITHOUT_CLASSIFICATION	7.290638297400972E-4	DESIGN
//source.getPersistenceContext().removeNonExist( new EntityKey( id, persister, source.getEntityMode() ) );	WITHOUT_CLASSIFICATION	0.9978637998100397	WITHOUT_CLASSIFICATION	0.0021362001899603187	DESIGN
//keep the existing version number in the case of replicate!	WITHOUT_CLASSIFICATION	0.9998939862930667	WITHOUT_CLASSIFICATION	1.0601370693330399E-4	DESIGN
// cascade-save to many-to-one BEFORE the parent is saved	WITHOUT_CLASSIFICATION	0.9966880207893765	WITHOUT_CLASSIFICATION	0.0033119792106234528	DESIGN
//pass this as an argument only to avoid double looking	WITHOUT_CLASSIFICATION	0.9999702911262887	WITHOUT_CLASSIFICATION	2.970887371125644E-5	DESIGN
// the object is persistent	WITHOUT_CLASSIFICATION	0.9993517051352331	WITHOUT_CLASSIFICATION	6.482948647669032E-4	DESIGN
//the entity is associated with the session, so check its status	WITHOUT_CLASSIFICATION	0.999953169668926	WITHOUT_CLASSIFICATION	4.683033107404889E-5	DESIGN
// do nothing for persistent instances	WITHOUT_CLASSIFICATION	0.9998760776318051	WITHOUT_CLASSIFICATION	1.2392236819484597E-4	DESIGN
//ie. e.status==DELETED	WITHOUT_CLASSIFICATION	0.9976485066014736	WITHOUT_CLASSIFICATION	0.002351493398526296	DESIGN
// the object is transient or detached	WITHOUT_CLASSIFICATION	0.9998205847777788	WITHOUT_CLASSIFICATION	1.794152222212073E-4	DESIGN
//NOTE EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9978670924811555	WITHOUT_CLASSIFICATION	0.002132907518844583	DESIGN
// Private constructor - stops checkstyle from complaining.	WITHOUT_CLASSIFICATION	0.9981156881285647	WITHOUT_CLASSIFICATION	0.0018843118714354135	DESIGN
// First, try to find a matching constructor accepting a ViolatedConstraintNameExtracter param...	WITHOUT_CLASSIFICATION	0.9981457692526439	WITHOUT_CLASSIFICATION	0.0018542307473560116	DESIGN
// eat it and try next	WITHOUT_CLASSIFICATION	0.9950829911350745	WITHOUT_CLASSIFICATION	0.004917008864925536	DESIGN
// Otherwise, try to use the no-arg constructor	WITHOUT_CLASSIFICATION	0.9997284646662137	WITHOUT_CLASSIFICATION	2.7153533378627574E-4	DESIGN
// oracle sql-state code for deadlock	WITHOUT_CLASSIFICATION	0.999399275730773	WITHOUT_CLASSIFICATION	6.007242692270473E-4	DESIGN
// CollectionPropertyMapping processes everything except 'index'.	WITHOUT_CLASSIFICATION	0.998818576633736	WITHOUT_CLASSIFICATION	0.0011814233662639404	DESIGN
// remove initial ", "	WITHOUT_CLASSIFICATION	0.9997131586917126	WITHOUT_CLASSIFICATION	2.8684130828742844E-4	DESIGN
// remove initial " and "	WITHOUT_CLASSIFICATION	0.9997385767252843	WITHOUT_CLASSIFICATION	2.614232747156835E-4	DESIGN
//beforeClassTokens.add("new"); DEFINITELY DON'T HAVE THIS!!	WITHOUT_CLASSIFICATION	0.9986961855818136	WITHOUT_CLASSIFICATION	0.0013038144181863305	DESIGN
//notAfterClassTokens.add(",");	WITHOUT_CLASSIFICATION	0.9986810053377232	WITHOUT_CLASSIFICATION	0.0013189946622768059	DESIGN
// just especially for the trivial collection filter	WITHOUT_CLASSIFICATION	0.9994872255929879	WITHOUT_CLASSIFICATION	5.127744070121189E-4	DESIGN
//update last non-whitespace token, if necessary	WITHOUT_CLASSIFICATION	0.9981654345068814	WITHOUT_CLASSIFICATION	0.0018345654931185233	DESIGN
// select-range is terminated by declaration of "from"	WITHOUT_CLASSIFICATION	0.9987701872640155	WITHOUT_CLASSIFICATION	0.0012298127359844748	DESIGN
//scan for next non-whitespace token	WITHOUT_CLASSIFICATION	0.9993303191346088	WITHOUT_CLASSIFICATION	6.696808653912188E-4	DESIGN
// Note this!!	WITHOUT_CLASSIFICATION	0.9997229465411566	WITHOUT_CLASSIFICATION	2.7705345884338335E-4	DESIGN
// Error message constants.	WITHOUT_CLASSIFICATION	0.9994110084660189	WITHOUT_CLASSIFICATION	5.889915339811144E-4	DESIGN
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9978575797975671	WITHOUT_CLASSIFICATION	0.002142420202433054	DESIGN
// semantic action handling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9982696395569902	WITHOUT_CLASSIFICATION	0.0017303604430097773	DESIGN
// Handle collection-fiter compilation. // IMPORTANT NOTE: This is modifying the INPUT (HQL) tree, not the output tree!	WITHOUT_CLASSIFICATION	0.9932738479043132	WITHOUT_CLASSIFICATION	0.006726152095686739	DESIGN
// Show the modified AST.	WITHOUT_CLASSIFICATION	0.999941879598843	WITHOUT_CLASSIFICATION	5.812040115701642E-5	DESIGN
// Create a parameter specification for the collection filter...	WITHOUT_CLASSIFICATION	0.9990586790483402	WITHOUT_CLASSIFICATION	9.413209516597635E-4	DESIGN
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9996098404594456	WITHOUT_CLASSIFICATION	3.9015954055436765E-4	DESIGN
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9996098404594456	WITHOUT_CLASSIFICATION	3.9015954055436765E-4	DESIGN
// Get the names of the columns used to link between the collection // owner and the collection elements.	WITHOUT_CLASSIFICATION	0.9944614854107039	WITHOUT_CLASSIFICATION	0.005538514589296052	DESIGN
// The path AST should be a DotNode, and it should have been evaluated already.	WITHOUT_CLASSIFICATION	0.9994754786167139	WITHOUT_CLASSIFICATION	5.245213832860477E-4	DESIGN
// Tell the dot node about the join type.	WITHOUT_CLASSIFICATION	0.9999837638280081	WITHOUT_CLASSIFICATION	1.6236171991818033E-5	DESIGN
// Re-arrange the tree so that the collection function is the root and the lhs is the path.	WITHOUT_CLASSIFICATION	0.999970511489685	WITHOUT_CLASSIFICATION	2.9488510315096952E-5	DESIGN
// Don't forget to resolve the argument! // Resolve the collection function now.	WITHOUT_CLASSIFICATION	0.99975266119584	WITHOUT_CLASSIFICATION	2.4733880415997607E-4	DESIGN
// Resolve everything up to this dot, but don't resolve the placeholders yet.	WITHOUT_CLASSIFICATION	0.9978048487224234	WITHOUT_CLASSIFICATION	0.0021951512775765336	DESIGN
// Should mean that no such property was found	WITHOUT_CLASSIFICATION	0.9988023515844143	WITHOUT_CLASSIFICATION	0.0011976484155857582	DESIGN
// Was there an explicit select expression?	WITHOUT_CLASSIFICATION	0.9999743099644525	WITHOUT_CLASSIFICATION	2.5690035547522577E-5	DESIGN
// Attach any mapping-defined "ORDER BY" fragments	WITHOUT_CLASSIFICATION	0.9997371777613027	WITHOUT_CLASSIFICATION	2.628222386973825E-4	DESIGN
// Use the explicitly declared select expression; determine the // return types indicated by each select token	WITHOUT_CLASSIFICATION	0.9998900690825393	WITHOUT_CLASSIFICATION	1.0993091746071566E-4	DESIGN
// After that, process the JOINs. // Invoke a delegate to do the work, as this is farily complex.	WITHOUT_CLASSIFICATION	0.999565307059918	WITHOUT_CLASSIFICATION	4.346929400820536E-4	DESIGN
// Make #@%$^#^&# sure no alias is applied to the table name	WITHOUT_CLASSIFICATION	0.9999887520225683	WITHOUT_CLASSIFICATION	1.1247977431643011E-5	DESIGN
// We need to generate ids as part of this bulk insert. // // Note that this is only supported for sequence-style generators and // post-insert-style generators; basically, only in-db generators	WITHOUT_CLASSIFICATION	0.9998119514771902	WITHOUT_CLASSIFICATION	1.8804852280988074E-4	DESIGN
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9996098404594456	WITHOUT_CLASSIFICATION	3.9015954055436765E-4	DESIGN
// We need to seed the version value as part of this bulk insert	WITHOUT_CLASSIFICATION	0.9990526294202143	WITHOUT_CLASSIFICATION	9.473705797857439E-4	DESIGN
// we need to wrtap the param in a cast()	WITHOUT_CLASSIFICATION	0.9952687242138665	WITHOUT_CLASSIFICATION	0.004731275786133577	DESIGN
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9469487920412919	WITHOUT_CLASSIFICATION	0.0530512079587081	DESIGN
// Generate implicit joins, only if necessary.	WITHOUT_CLASSIFICATION	0.9995590127736026	WITHOUT_CLASSIFICATION	4.4098722639738944E-4	DESIGN
// Notify the FROM element that it is being referenced by the select.	WITHOUT_CLASSIFICATION	0.9997501749818096	WITHOUT_CLASSIFICATION	2.4982501819031976E-4	DESIGN
// Turn off includeSubclasses on all FromElements.	WITHOUT_CLASSIFICATION	0.999749985232431	WITHOUT_CLASSIFICATION	2.5001476756899286E-4	DESIGN
// create the node initially with the param name so that it shows // appropriately in the "original text" attribute	WITHOUT_CLASSIFICATION	0.9998504829543906	WITHOUT_CLASSIFICATION	1.4951704560934743E-4	DESIGN
// Use the delegate, resolve identifiers as FROM element aliases.	WITHOUT_CLASSIFICATION	0.999495231198033	WITHOUT_CLASSIFICATION	5.047688019670832E-4	DESIGN
// select clauses for insert statements should alwasy be treated as shallow	WITHOUT_CLASSIFICATION	0.9995993875875896	WITHOUT_CLASSIFICATION	4.00612412410465E-4	DESIGN
// no need to even collect this information if the persister is considered multi-table	WITHOUT_CLASSIFICATION	0.9933966379249851	WITHOUT_CLASSIFICATION	0.006603362075014924	DESIGN
// Make sure that the persister is versioned	WITHOUT_CLASSIFICATION	0.9991871217718856	WITHOUT_CLASSIFICATION	8.128782281145113E-4	DESIGN
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9978575797975671	WITHOUT_CLASSIFICATION	0.002142420202433054	DESIGN
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9996098404594456	WITHOUT_CLASSIFICATION	3.9015954055436765E-4	DESIGN
// --Commented out by Inspection (12/11/04 10:56 AM): int getWarningCount();	WITHOUT_CLASSIFICATION	0.9998944068383009	WITHOUT_CLASSIFICATION	1.0559316169907053E-4	DESIGN
// Alias references and identifiers use the same node class.	WITHOUT_CLASSIFICATION	0.9995898832728529	WITHOUT_CLASSIFICATION	4.10116727147003E-4	DESIGN
// switch	WITHOUT_CLASSIFICATION	0.9998191321511504	WITHOUT_CLASSIFICATION	1.8086784884967163E-4	DESIGN
// make a new one	WITHOUT_CLASSIFICATION	0.998999068807812	WITHOUT_CLASSIFICATION	0.0010009311921879301	DESIGN
// just do the regular thing if you can't find the ctor // Your AST must have default ctor to use this.	WITHOUT_CLASSIFICATION	0.9935565423142216	WITHOUT_CLASSIFICATION	0.006443457685778336	DESIGN
// Initialize SQL nodes here.	WITHOUT_CLASSIFICATION	0.9994855342041628	WITHOUT_CLASSIFICATION	5.144657958371915E-4	DESIGN
// semantic action processing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9984256420459255	WITHOUT_CLASSIFICATION	0.0015743579540745578	DESIGN
// if template is null we just write the function out as it appears in the hql statement	WITHOUT_CLASSIFICATION	0.9999457256997027	WITHOUT_CLASSIFICATION	5.427430029728135E-5	DESIGN
// this function has a template -> redirect output and catch the arguments	WITHOUT_CLASSIFICATION	0.9999806954716163	WITHOUT_CLASSIFICATION	1.930452838375827E-5	DESIGN
// --- Inner classes (moved here from sql-gen.g) ---	WITHOUT_CLASSIFICATION	0.999352738010867	WITHOUT_CLASSIFICATION	6.47261989133132E-4	DESIGN
// check two "adjecent" nodes at the top of the from-clause tree	WITHOUT_CLASSIFICATION	0.9998905132153418	WITHOUT_CLASSIFICATION	1.094867846581791E-4	DESIGN
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9986972527727238	WITHOUT_CLASSIFICATION	0.00130274722727612	DESIGN
// these are just two unrelated table references	WITHOUT_CLASSIFICATION	0.9990856903031055	WITHOUT_CLASSIFICATION	9.143096968946418E-4	DESIGN
// again, both should be FromElements	WITHOUT_CLASSIFICATION	0.9990914691549477	WITHOUT_CLASSIFICATION	9.085308450522557E-4	DESIGN
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.999348270691186	WITHOUT_CLASSIFICATION	6.517293088139331E-4	DESIGN
// right represents a joins originating from left; or // both right and left reprersent joins originating from the same FromElement	WITHOUT_CLASSIFICATION	0.9999417092484375	WITHOUT_CLASSIFICATION	5.8290751562507384E-5	DESIGN
// check a set of parent/child nodes in the from-clause tree // to determine if a comma is required between them	WITHOUT_CLASSIFICATION	0.9998234250600984	WITHOUT_CLASSIFICATION	1.765749399016539E-4	DESIGN
// right represents a joins originating from left...	WITHOUT_CLASSIFICATION	0.9995115915581915	WITHOUT_CLASSIFICATION	4.884084418085777E-4	DESIGN
// all clear	WITHOUT_CLASSIFICATION	0.9996767541509491	WITHOUT_CLASSIFICATION	3.232458490507955E-4	DESIGN
// Ignore the token class name parameter, and use a specific token class.	WITHOUT_CLASSIFICATION	0.9999752817493546	WITHOUT_CLASSIFICATION	2.4718250645407007E-5	DESIGN
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.99914701318439	WITHOUT_CLASSIFICATION	8.529868156098761E-4	DESIGN
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.99914701318439	WITHOUT_CLASSIFICATION	8.529868156098761E-4	DESIGN
// remember that ordinal parameters numbers are 1-based!!!	WITHOUT_CLASSIFICATION	0.9999632296464371	WITHOUT_CLASSIFICATION	3.677035356282817E-5	DESIGN
// don't care about other param types here, just those explicitly user-defined...	WITHOUT_CLASSIFICATION	0.9987974355015855	WITHOUT_CLASSIFICATION	0.001202564498414419	DESIGN
// If the query is already compiled, skip the compilation.	WITHOUT_CLASSIFICATION	0.9999730408553076	WITHOUT_CLASSIFICATION	2.6959144692451977E-5	DESIGN
// Remember the parameters for the compilation.	WITHOUT_CLASSIFICATION	0.9980531550111765	WITHOUT_CLASSIFICATION	0.001946844988823484	DESIGN
// PHASE 1 : Parse the HQL into an AST.	WITHOUT_CLASSIFICATION	0.9998531155642415	WITHOUT_CLASSIFICATION	1.468844357585035E-4	DESIGN
// PHASE 2 : Analyze the HQL AST, and produce an SQL AST.	WITHOUT_CLASSIFICATION	0.9999922982048179	WITHOUT_CLASSIFICATION	7.701795181949082E-6	DESIGN
// PHASE 3 : Generate the SQL.	WITHOUT_CLASSIFICATION	0.9992238357796311	WITHOUT_CLASSIFICATION	7.761642203689555E-4	DESIGN
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9998225360574434	WITHOUT_CLASSIFICATION	1.7746394255656984E-4	DESIGN
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9998225360574434	WITHOUT_CLASSIFICATION	1.7746394255656984E-4	DESIGN
//only needed during compilation phase...	WITHOUT_CLASSIFICATION	0.9997678032280568	WITHOUT_CLASSIFICATION	2.3219677194326937E-4	DESIGN
// Transform the tree.	WITHOUT_CLASSIFICATION	0.999551318858537	WITHOUT_CLASSIFICATION	4.4868114146307697E-4	DESIGN
// Parse the query string into an HQL AST.	WITHOUT_CLASSIFICATION	0.9999076420358161	WITHOUT_CLASSIFICATION	9.23579641838539E-5	DESIGN
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9996516330583647	WITHOUT_CLASSIFICATION	3.4836694163541034E-4	DESIGN
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9996516330583647	WITHOUT_CLASSIFICATION	3.4836694163541034E-4	DESIGN
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9996516330583647	WITHOUT_CLASSIFICATION	3.4836694163541034E-4	DESIGN
// NOTE : ( max - 1 ) because first is zero-based while max is not...	WITHOUT_CLASSIFICATION	0.9988072903549386	WITHOUT_CLASSIFICATION	0.0011927096450613172	DESIGN
// -- Package local methods for the QueryLoader delegate --	WITHOUT_CLASSIFICATION	0.9996381080227393	WITHOUT_CLASSIFICATION	3.618919772605973E-4	DESIGN
// If there are no collection fetches, then no further checks are needed	WITHOUT_CLASSIFICATION	0.9999868236892997	WITHOUT_CLASSIFICATION	1.3176310700172791E-5	DESIGN
// A shallow query is ok (although technically there should be no fetching here...)	WITHOUT_CLASSIFICATION	0.9995154317334992	WITHOUT_CLASSIFICATION	4.8456826650080114E-4	DESIGN
// should be the first, but just to be safe...	WITHOUT_CLASSIFICATION	0.9987561168397071	WITHOUT_CLASSIFICATION	0.0012438831602929218	DESIGN
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9996098404594456	WITHOUT_CLASSIFICATION	3.9015954055436765E-4	DESIGN
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9996098404594456	WITHOUT_CLASSIFICATION	3.9015954055436765E-4	DESIGN
// Impl Note: allows multiple collection fetches as long as the // entire fecthed graph still "points back" to a single // root entity for return	WITHOUT_CLASSIFICATION	0.9674227186899961	WITHOUT_CLASSIFICATION	0.03257728131000392	DESIGN
// Otherwise, we have a non-scalar select with defined collection fetch(es). // Make sure that there is only a single root entity in the return (no tuples)	WITHOUT_CLASSIFICATION	0.999960029085766	WITHOUT_CLASSIFICATION	3.997091423392285E-5	DESIGN
// This is not strictly true.  We actually just need to make sure that // it is ordered by root-entity PK and that that order-by comes before // any non-root-entity ordering...	WITHOUT_CLASSIFICATION	0.9627150754003264	WITHOUT_CLASSIFICATION	0.0372849245996737	DESIGN
//	WITHOUT_CLASSIFICATION	0.999679076858764	WITHOUT_CLASSIFICATION	3.2092314123604855E-4	DESIGN
// we are already processing a dot-structure	WITHOUT_CLASSIFICATION	0.9905761806062592	WITHOUT_CLASSIFICATION	0.009423819393740806	DESIGN
// igndore it...	WITHOUT_CLASSIFICATION	0.9975386616289778	WITHOUT_CLASSIFICATION	0.0024613383710222134	DESIGN
// we are now at a new tree level	WITHOUT_CLASSIFICATION	0.9930673896481503	WITHOUT_CLASSIFICATION	0.006932610351849663	DESIGN
// [jsd] The fix for HHH-558...	WITHOUT_CLASSIFICATION	0.9772513436647822	WITHOUT_CLASSIFICATION	0.022748656335217846	DESIGN
// If the token can tell us if it could be an identifier...	WITHOUT_CLASSIFICATION	0.99965883228459	WITHOUT_CLASSIFICATION	3.411677154100221E-4	DESIGN
// ... and the expected token type was an identifier, then:	WITHOUT_CLASSIFICATION	0.9999718952174104	WITHOUT_CLASSIFICATION	2.810478258968812E-5	DESIGN
// Use the token as an identifier.	WITHOUT_CLASSIFICATION	0.9999910825860873	WITHOUT_CLASSIFICATION	8.917413912802688E-6	DESIGN
// Add the token to the AST.	WITHOUT_CLASSIFICATION	0.9999451534320483	WITHOUT_CLASSIFICATION	5.4846567951746854E-5	DESIGN
// (NOT (EQ a b) ) => (NE a b)	WITHOUT_CLASSIFICATION	0.9972589855181647	WITHOUT_CLASSIFICATION	0.002741014481835323	DESIGN
// (NOT (NE a b) ) => (EQ a b)	WITHOUT_CLASSIFICATION	0.9972589855181647	WITHOUT_CLASSIFICATION	0.002741014481835323	DESIGN
// (NOT (LT a b) ) => (GE a b)	WITHOUT_CLASSIFICATION	0.9972589855181647	WITHOUT_CLASSIFICATION	0.002741014481835323	DESIGN
// (NOT (GE a b) ) => (LT a b)	WITHOUT_CLASSIFICATION	0.9972589855181647	WITHOUT_CLASSIFICATION	0.002741014481835323	DESIGN
// (NOT (LE a b) ) => (GT a b)	WITHOUT_CLASSIFICATION	0.9972589855181647	WITHOUT_CLASSIFICATION	0.002741014481835323	DESIGN
// (NOT (LIKE a b) ) => (NOT_LIKE a b)	WITHOUT_CLASSIFICATION	0.9984622523787985	WITHOUT_CLASSIFICATION	0.0015377476212015788	DESIGN
// (NOT (NOT_LIKE a b) ) => (LIKE a b)	WITHOUT_CLASSIFICATION	0.9984622523787985	WITHOUT_CLASSIFICATION	0.0015377476212015788	DESIGN
// (NOT (IS_NOT_NULL a b) ) => (IS_NULL a b)	WITHOUT_CLASSIFICATION	0.9984622523787985	WITHOUT_CLASSIFICATION	0.0015377476212015788	DESIGN
// (NOT (BETWEEN a b) ) => (NOT_BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9984622523787985	WITHOUT_CLASSIFICATION	0.0015377476212015788	DESIGN
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9990076219428988	WITHOUT_CLASSIFICATION	9.92378057101124E-4	DESIGN
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.99914701318439	WITHOUT_CLASSIFICATION	8.529868156098761E-4	DESIGN
// if // if // Otherwise, handle the error normally.	WITHOUT_CLASSIFICATION	0.9997307217980015	WITHOUT_CLASSIFICATION	2.6927820199846626E-4	DESIGN
// (NOT (NOT_BETWEEN a b) ) => (BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9984622523787985	WITHOUT_CLASSIFICATION	0.0015377476212015788	DESIGN
/* This can never happen because this rule will always eliminate the child NOT.	WITHOUT_CLASSIFICATION	0.9977819955724182	WITHOUT_CLASSIFICATION	0.0022180044275818714	DESIGN
// Just add a 'not' parent.	WITHOUT_CLASSIFICATION	0.9991731716889154	WITHOUT_CLASSIFICATION	8.268283110846021E-4	DESIGN
// (EQ NULL b) => (IS_NULL b)	WITHOUT_CLASSIFICATION	0.9998008987736061	WITHOUT_CLASSIFICATION	1.9910122639397893E-4	DESIGN
// (EQ a NULL) => (IS_NULL a)	WITHOUT_CLASSIFICATION	0.9995151671011251	WITHOUT_CLASSIFICATION	4.848328988748455E-4	DESIGN
// NOTE: Because we're using ASTUtil.createParent(), the tree must be created from the bottom up. // IS EMPTY x => (EXISTS (QUERY (SELECT_FROM (FROM x) ) ) )	WITHOUT_CLASSIFICATION	0.9905681101711128	WITHOUT_CLASSIFICATION	0.009431889828887307	DESIGN
// Add NOT if it's negated.	WITHOUT_CLASSIFICATION	0.9971641635100463	WITHOUT_CLASSIFICATION	0.0028358364899536393	DESIGN
// Create nodes that track line and column number.	WITHOUT_CLASSIFICATION	0.9999996309367247	WITHOUT_CLASSIFICATION	3.690632752256223E-7	DESIGN
// Case 1: Multi token keywords GROUP BY and ORDER BY // The next token ( LT(2) ) should be 'by'... otherwise, this is just an ident.	WITHOUT_CLASSIFICATION	0.9747677034607617	WITHOUT_CLASSIFICATION	0.02523229653923827	DESIGN
// Case 2: The current token is after FROM and before '.'.	WITHOUT_CLASSIFICATION	0.9999966801918987	WITHOUT_CLASSIFICATION	3.319808101295496E-6	DESIGN
// This handles HHH-354, where there is a strange property name in a where clause. // If the lookahead contains a DOT then something that isn't an IDENT...	WITHOUT_CLASSIFICATION	0.999682030689431	WITHOUT_CLASSIFICATION	3.179693105690869E-4	DESIGN
// See if the second lookahed token can be an identifier.	WITHOUT_CLASSIFICATION	0.9999868469968171	WITHOUT_CLASSIFICATION	1.3153003183059767E-5	DESIGN
// Set it!	WITHOUT_CLASSIFICATION	0.9999470977123366	WITHOUT_CLASSIFICATION	5.290228766337311E-5	DESIGN
// ignore	WITHOUT_CLASSIFICATION	0.999855661645043	WITHOUT_CLASSIFICATION	1.4433835495695786E-4	DESIGN
// strip the " where "	WITHOUT_CLASSIFICATION	0.9998592173690269	WITHOUT_CLASSIFICATION	1.407826309729919E-4	DESIGN
// Don't really know all the codes required to adequately decipher returned jdbc exceptions here. // simply allow the failure to be eaten and the subsequent insert-selects/deletes should fail	WITHOUT_CLASSIFICATION	0.8985178428684537	WITHOUT_CLASSIFICATION	0.10148215713154628	DESIGN
// at the very least cleanup the data :)	WITHOUT_CLASSIFICATION	0.9978404691982015	WITHOUT_CLASSIFICATION	0.0021595308017985184	DESIGN
// First, save off the pertinent ids, as the return value	WITHOUT_CLASSIFICATION	0.9999617892242743	WITHOUT_CLASSIFICATION	3.8210775725780786E-5	DESIGN
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9990880862738382	WITHOUT_CLASSIFICATION	9.11913726161879E-4	DESIGN
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9990880862738382	WITHOUT_CLASSIFICATION	9.11913726161879E-4	DESIGN
// Start performing the updates	WITHOUT_CLASSIFICATION	0.9999414191583146	WITHOUT_CLASSIFICATION	5.858084168536753E-5	DESIGN
// First, save off the pertinent ids, saving the number of pertinent ids for return	WITHOUT_CLASSIFICATION	0.9997922350578522	WITHOUT_CLASSIFICATION	2.0776494214779916E-4	DESIGN
// Start performing the deletes	WITHOUT_CLASSIFICATION	0.9998242373604213	WITHOUT_CLASSIFICATION	1.757626395787488E-4	DESIGN
// otherwise, everything ok.	WITHOUT_CLASSIFICATION	0.9993020496130144	WITHOUT_CLASSIFICATION	6.979503869856459E-4	DESIGN
// visit width-first, then depth	WITHOUT_CLASSIFICATION	0.9997747127183337	WITHOUT_CLASSIFICATION	2.2528728166634995E-4	DESIGN
// if the types report logical equivalence, return true...	WITHOUT_CLASSIFICATION	0.9739809080631692	WITHOUT_CLASSIFICATION	0.02601909193683072	DESIGN
// otherwise, perform a "deep equivalence" check...	WITHOUT_CLASSIFICATION	0.9988171112813152	WITHOUT_CLASSIFICATION	0.0011828887186847844	DESIGN
// If there is no WHERE node, make one.	WITHOUT_CLASSIFICATION	0.9997969867443708	WITHOUT_CLASSIFICATION	2.0301325562930162E-4	DESIGN
// inject the WHERE after the parent	WITHOUT_CLASSIFICATION	0.9998691963073539	WITHOUT_CLASSIFICATION	1.308036926459823E-4	DESIGN
// Never include subclasses for implied from elements.	WITHOUT_CLASSIFICATION	0.999708404312956	WITHOUT_CLASSIFICATION	2.9159568704398433E-4	DESIGN
// Moved here from SelectClause [jsd]	WITHOUT_CLASSIFICATION	0.9985376208655908	WITHOUT_CLASSIFICATION	0.001462379134409066	DESIGN
///////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.99932725136228	WITHOUT_CLASSIFICATION	6.727486377199609E-4	DESIGN
// Use the table fromElement and the property name to get the array of column names.	WITHOUT_CLASSIFICATION	0.9999385949430694	WITHOUT_CLASSIFICATION	6.140505693062646E-5	DESIGN
// Set the attributes of the property reference expression.	WITHOUT_CLASSIFICATION	0.9997067356977662	WITHOUT_CLASSIFICATION	2.932643022337817E-4	DESIGN
// If the uresolved property path isn't set yet, just use the property name.	WITHOUT_CLASSIFICATION	0.9998726110223138	WITHOUT_CLASSIFICATION	1.2738897768609106E-4	DESIGN
// The 'from element' that the property is in.	WITHOUT_CLASSIFICATION	0.9999128164240917	WITHOUT_CLASSIFICATION	8.718357590834076E-5	DESIGN
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.999999161638295	WITHOUT_CLASSIFICATION	8.383617048637498E-7	DESIGN
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.999999161638295	WITHOUT_CLASSIFICATION	8.383617048637498E-7	DESIGN
// If this dot has already been resolved, stop now.	WITHOUT_CLASSIFICATION	0.9996721053868963	WITHOUT_CLASSIFICATION	3.278946131036056E-4	DESIGN
// If there is no data type for this node, and we're at the end of the path (top most dot node), then // this might be a Java constant.	WITHOUT_CLASSIFICATION	0.9966877592314268	WITHOUT_CLASSIFICATION	0.0033122407685730665	DESIGN
// The property is a collection...	WITHOUT_CLASSIFICATION	0.9993637483690361	WITHOUT_CLASSIFICATION	6.362516309639393E-4	DESIGN
// The property is a component...	WITHOUT_CLASSIFICATION	0.9992435567654382	WITHOUT_CLASSIFICATION	7.564432345617651E-4	DESIGN
// The property is another class..	WITHOUT_CLASSIFICATION	0.999039402468395	WITHOUT_CLASSIFICATION	9.605975316051328E-4	DESIGN
// Otherwise, this is a primitive type.	WITHOUT_CLASSIFICATION	0.9979387976622813	WITHOUT_CLASSIFICATION	0.002061202337718708	DESIGN
//foo.bars.size (also handles deprecated stuff like foo.bars.maxelement for backwardness)	WITHOUT_CLASSIFICATION	0.9755093335896173	WITHOUT_CLASSIFICATION	0.024490666410382587	DESIGN
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9997112004020587	WITHOUT_CLASSIFICATION	2.887995979413293E-4	DESIGN
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.999862454112008	WITHOUT_CLASSIFICATION	1.3754588799197074E-4	DESIGN
// in non-select queries, the only time we should need to join is if we are in a subquery from clause	WITHOUT_CLASSIFICATION	0.9982369883188642	WITHOUT_CLASSIFICATION	0.0017630116811357668	DESIGN
// this is the regression style determination which matches the logic of the classic translator	WITHOUT_CLASSIFICATION	0.999910564618531	WITHOUT_CLASSIFICATION	8.943538146904971E-5	DESIGN
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9997112004020587	WITHOUT_CLASSIFICATION	2.887995979413293E-4	DESIGN
// even though we might find a pre-existing element by join path, we may not be able to reuse it...	WITHOUT_CLASSIFICATION	0.7408856355663237	WITHOUT_CLASSIFICATION	0.25911436443367636	DESIGN
// NOTE : addDuplicateAlias() already performs nullness checks on the alias.	WITHOUT_CLASSIFICATION	0.9996192171366857	WITHOUT_CLASSIFICATION	3.80782863314326E-4	DESIGN
// if the from-clauses are the same, we can be a little more aggressive in terms of what we reuse	WITHOUT_CLASSIFICATION	0.6780303697935541	WITHOUT_CLASSIFICATION	0.321969630206446	DESIGN
// again, null != null here	WITHOUT_CLASSIFICATION	0.9999655626669472	WITHOUT_CLASSIFICATION	3.443733305279924E-5	DESIGN
// If this is an implied join in a from element, then use the impled join type which is part of the // tree parser's state (set by the gramamar actions).	WITHOUT_CLASSIFICATION	0.9963665969365977	WITHOUT_CLASSIFICATION	0.0036334030634023787	DESIGN
// otherwise (subquery case) dont reuse the fromElement if we are processing the from-clause of the subquery	WITHOUT_CLASSIFICATION	0.9917836245873979	WITHOUT_CLASSIFICATION	0.008216375412602079	DESIGN
// we know only the lhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999366082574315	WITHOUT_CLASSIFICATION	6.339174256852623E-5	DESIGN
// the referenced node text is the special 'id'	WITHOUT_CLASSIFICATION	0.9999866901219644	WITHOUT_CLASSIFICATION	1.3309878035586818E-5	DESIGN
// only the identifier property field name can be a reference to the associated entity's PK...	WITHOUT_CLASSIFICATION	0.9992392463817801	WITHOUT_CLASSIFICATION	7.607536182199797E-4	DESIGN
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9998975469858151	WITHOUT_CLASSIFICATION	1.0245301418493258E-4	DESIGN
// Append the new property name onto the unresolved path.	WITHOUT_CLASSIFICATION	0.9998899537363897	WITHOUT_CLASSIFICATION	1.1004626361039853E-4	DESIGN
// If the lhs is a collection, use CollectionPropertyMapping	WITHOUT_CLASSIFICATION	0.999771609635542	WITHOUT_CLASSIFICATION	2.2839036445793483E-4	DESIGN
// Tell the destination fromElement to 'includeSubclasses'.	WITHOUT_CLASSIFICATION	0.9997431671270894	WITHOUT_CLASSIFICATION	2.5683287291054395E-4	DESIGN
// Use theta style (for regression) // Move the node up, after the origin node.	WITHOUT_CLASSIFICATION	0.9994006143872428	WITHOUT_CLASSIFICATION	5.993856127572192E-4	DESIGN
// Don't resolve the node again.	WITHOUT_CLASSIFICATION	0.9997705053838155	WITHOUT_CLASSIFICATION	2.2949461618456698E-4	DESIGN
// for expected parameter type injection, we expect that the lhs represents // some form of property ref and that the children of the in-list represent // one-or-more params.	WITHOUT_CLASSIFICATION	0.9999372265680601	WITHOUT_CLASSIFICATION	6.277343193998705E-5	DESIGN
// we need to strip off the embedded parens so that sql-gen does not double these up	WITHOUT_CLASSIFICATION	0.9998160198089964	WITHOUT_CLASSIFICATION	1.8398019100374012E-4	DESIGN
// we have something like : "? [op] rhs"	WITHOUT_CLASSIFICATION	0.99596551673031	WITHOUT_CLASSIFICATION	0.004034483269690044	DESIGN
// we have something like : "lhs [op] ?"	WITHOUT_CLASSIFICATION	0.99596551673031	WITHOUT_CLASSIFICATION	0.004034483269690044	DESIGN
// we know only the rhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999366082574315	WITHOUT_CLASSIFICATION	6.339174256852623E-5	DESIGN
// handle the (assumed) valid cases: // #1 - the only valid datetime addition synatx is one or the other is a datetime (but not both)	WITHOUT_CLASSIFICATION	0.9976515087473341	WITHOUT_CLASSIFICATION	0.0023484912526659445	DESIGN
// one or the other needs to be a datetime for us to get into this method in the first place...	WITHOUT_CLASSIFICATION	0.9392371953860844	WITHOUT_CLASSIFICATION	0.06076280461391559	DESIGN
// #3 - note that this is also true of "datetime - :param"...	WITHOUT_CLASSIFICATION	0.9933829783650809	WITHOUT_CLASSIFICATION	0.006617021634918969	DESIGN
// #2	WITHOUT_CLASSIFICATION	0.999686457230151	WITHOUT_CLASSIFICATION	3.1354276984892694E-4	DESIGN
// Generate the inner join -- The elements need to be joined to the collection they are in.	WITHOUT_CLASSIFICATION	0.9997873599913006	WITHOUT_CLASSIFICATION	2.1264000869938482E-4	DESIGN
// nothing to do	WITHOUT_CLASSIFICATION	0.9994354730785288	WITHOUT_CLASSIFICATION	5.645269214713163E-4	DESIGN
// The 'from element' that represents the elements of the collection.	WITHOUT_CLASSIFICATION	0.9999956062408203	WITHOUT_CLASSIFICATION	4.393759179748037E-6	DESIGN
// Add the condition to the join sequence that qualifies the indexed element.	WITHOUT_CLASSIFICATION	0.9999081616559359	WITHOUT_CLASSIFICATION	9.183834406412383E-5	DESIGN
// Sometimes use the element table alias, sometimes use the... umm... collection table alias (many to many)	WITHOUT_CLASSIFICATION	0.9996383220092249	WITHOUT_CLASSIFICATION	3.61677990775164E-4	DESIGN
// Now, set the text for this node.  It should be the element columns.	WITHOUT_CLASSIFICATION	0.976449352578101	WITHOUT_CLASSIFICATION	0.023550647421899093	DESIGN
// Get the function return value type, based on the type of the first argument.	WITHOUT_CLASSIFICATION	0.9999955579053202	WITHOUT_CLASSIFICATION	4.44209467974196E-6	DESIGN
// This will call initialize(tok)!	WITHOUT_CLASSIFICATION	0.9955717017819314	WITHOUT_CLASSIFICATION	0.0044282982180685855	DESIGN
// mutation depends on the types of nodes invloved...	WITHOUT_CLASSIFICATION	0.9993440486846983	WITHOUT_CLASSIFICATION	6.559513153017952E-4	DESIGN
// "pass along" our initial embedded parameter node(s) to the first generated // sql fragment so that it can be handled later for parameter binding...	WITHOUT_CLASSIFICATION	0.9936782979192641	WITHOUT_CLASSIFICATION	0.006321702080735964	DESIGN
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9997588765934887	WITHOUT_CLASSIFICATION	2.4112340651118766E-4	DESIGN
// Generated select expressions are already resolved, nothing to do.	WITHOUT_CLASSIFICATION	0.9997727527286944	WITHOUT_CLASSIFICATION	2.2724727130560038E-4	DESIGN
// The path may be a reference to an alias defined in the parent query.	WITHOUT_CLASSIFICATION	0.9999345367947537	WITHOUT_CLASSIFICATION	6.546320524620627E-5	DESIGN
// The HQL class alias refers to the class name.	WITHOUT_CLASSIFICATION	0.9999809439766416	WITHOUT_CLASSIFICATION	1.9056023358403443E-5	DESIGN
// Associate the table alias with the element.	WITHOUT_CLASSIFICATION	0.999966825388683	WITHOUT_CLASSIFICATION	3.31746113170292E-5	DESIGN
// try the parent FromClause...	WITHOUT_CLASSIFICATION	0.9995885272616728	WITHOUT_CLASSIFICATION	4.1147273832726415E-4	DESIGN
// Add the new node to the map so that we don't create it twice.	WITHOUT_CLASSIFICATION	0.9999835177517361	WITHOUT_CLASSIFICATION	1.648224826394233E-5	DESIGN
// Make sure that all from elements registered with this FROM clause are actually in the AST.	WITHOUT_CLASSIFICATION	0.9994906882962283	WITHOUT_CLASSIFICATION	5.093117037715474E-4	DESIGN
// Invoke setScalarColumnText on each constructor argument.	WITHOUT_CLASSIFICATION	0.9996851106613263	WITHOUT_CLASSIFICATION	3.1488933867381886E-4	DESIGN
// Collect the select expressions, skip the first child because it is the class name.	WITHOUT_CLASSIFICATION	0.9999981439679906	WITHOUT_CLASSIFICATION	1.8560320094394499E-6	DESIGN
// return an empty Type array	WITHOUT_CLASSIFICATION	0.999412589965963	WITHOUT_CLASSIFICATION	5.874100340370639E-4	DESIGN
// Constructors are always considered scalar results.	WITHOUT_CLASSIFICATION	0.9997658508355575	WITHOUT_CLASSIFICATION	2.3414916444256857E-4	DESIGN
// this is the exception returned by ReflectHelper.getConstructor() if it cannot // locate an appropriate constructor	WITHOUT_CLASSIFICATION	0.9991533332780689	WITHOUT_CLASSIFICATION	8.466667219310963E-4	DESIGN
// if there is no order by, make one	WITHOUT_CLASSIFICATION	0.9999436461538836	WITHOUT_CLASSIFICATION	5.63538461164166E-5	DESIGN
// Find the WHERE; if there is no WHERE, find the FROM...	WITHOUT_CLASSIFICATION	0.9999294447593655	WITHOUT_CLASSIFICATION	7.055524063454982E-5	DESIGN
// Now, inject the newly built ORDER BY into the tree	WITHOUT_CLASSIFICATION	0.9996169664753126	WITHOUT_CLASSIFICATION	3.8303352468729835E-4	DESIGN
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995816115316317	WITHOUT_CLASSIFICATION	4.183884683683066E-4	DESIGN
// logic operators by definition resolve to boolean.	WITHOUT_CLASSIFICATION	0.99975106759175	WITHOUT_CLASSIFICATION	2.489324082498862E-4	DESIGN
// Render the identifier select fragment using the table alias.	WITHOUT_CLASSIFICATION	0.9998616671664878	WITHOUT_CLASSIFICATION	1.383328335121687E-4	DESIGN
// Class names in the FROM clause result in a JoinSequence (the old FromParser does this).	WITHOUT_CLASSIFICATION	0.9999927675987095	WITHOUT_CLASSIFICATION	7.2324012904799354E-6	DESIGN
// For many-to-many joins, use the tablename from the queryable collection for the default text.	WITHOUT_CLASSIFICATION	0.9997240599249616	WITHOUT_CLASSIFICATION	2.7594007503842395E-4	DESIGN
// Otherwise, use the property mapping.	WITHOUT_CLASSIFICATION	0.9996419815458037	WITHOUT_CLASSIFICATION	3.5801845419626414E-4	DESIGN
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9998777863177071	WITHOUT_CLASSIFICATION	1.2221368229291003E-4	DESIGN
// If the property is a special collection property name, return a CollectionPropertyMapping.	WITHOUT_CLASSIFICATION	0.9998551883446227	WITHOUT_CLASSIFICATION	1.4481165537721618E-4	DESIGN
// Collection of components.	WITHOUT_CLASSIFICATION	0.999553883494269	WITHOUT_CLASSIFICATION	4.461165057309814E-4	DESIGN
// make sure the lhs is "assignable"...	WITHOUT_CLASSIFICATION	0.9996397113342409	WITHOUT_CLASSIFICATION	3.602886657591939E-4	DESIGN
// false indicates to not generate parens around the assignment	WITHOUT_CLASSIFICATION	0.9986417287577439	WITHOUT_CLASSIFICATION	0.0013582712422561206	DESIGN
// Register the FromElement with the FROM clause, now that we have the names and aliases.	WITHOUT_CLASSIFICATION	0.9998037791891958	WITHOUT_CLASSIFICATION	1.9622081080422944E-4	DESIGN
// currently allowed...	WITHOUT_CLASSIFICATION	0.9950349210184039	WITHOUT_CLASSIFICATION	0.0049650789815962595	DESIGN
// HHH-276 : implied joins in a subselect where clause - The destination needs to be added // to the destination's from clause. // Not sure if this is will fix everything, but it works.	WITHOUT_CLASSIFICATION	0.9732894847478647	DESIGN	0.02671051525213533	WITHOUT_CLASSIFICATION
//return classAlias == null ? className : classAlias;	WITHOUT_CLASSIFICATION	0.996390784407975	WITHOUT_CLASSIFICATION	0.0036092155920250633	DESIGN
// This is an explicit FROM element.	WITHOUT_CLASSIFICATION	0.9981904527573615	WITHOUT_CLASSIFICATION	0.0018095472426385326	DESIGN
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995816115316317	WITHOUT_CLASSIFICATION	4.183884683683066E-4	DESIGN
// Fetch can't be used with scroll() or iterate().	WITHOUT_CLASSIFICATION	0.95428606864335	WITHOUT_CLASSIFICATION	0.04571393135665002	DESIGN
// If it's not implied or it is implied and it's a many to many join where the target wasn't found.	WITHOUT_CLASSIFICATION	0.9999939857125382	WITHOUT_CLASSIFICATION	6.014287461760144E-6	DESIGN
// Since this is an explicit FROM element, it can't be implied in the FROM clause.	WITHOUT_CLASSIFICATION	0.9996888653860995	WITHOUT_CLASSIFICATION	3.111346139005578E-4	DESIGN
// Do nothing, eplicit from elements are *always* in the projection list.	WITHOUT_CLASSIFICATION	0.9995118945524656	WITHOUT_CLASSIFICATION	4.8810544753445233E-4	DESIGN
// propertyName refers to something like collection.size...	WITHOUT_CLASSIFICATION	0.9981047452618393	WITHOUT_CLASSIFICATION	0.0018952547381606657	DESIGN
// property name is a sub-path of a component...	WITHOUT_CLASSIFICATION	0.9972027381129566	WITHOUT_CLASSIFICATION	0.0027972618870433646	DESIGN
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.999862454112008	WITHOUT_CLASSIFICATION	1.3754588799197074E-4	DESIGN
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9179026881268226	WITHOUT_CLASSIFICATION	0.08209731187317734	DESIGN
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9997588765934887	WITHOUT_CLASSIFICATION	2.4112340651118766E-4	DESIGN
// DotNode uses null here...	WITHOUT_CLASSIFICATION	0.9981049675860302	WITHOUT_CLASSIFICATION	0.0018950324139699376	DESIGN
// We represent a from-clause alias	WITHOUT_CLASSIFICATION	0.9999372986967943	WITHOUT_CLASSIFICATION	6.270130320573826E-5	DESIGN
// we are the LHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9993869303916775	WITHOUT_CLASSIFICATION	6.130696083225369E-4	DESIGN
// we are the RHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9989668188157405	WITHOUT_CLASSIFICATION	0.001033181184259505	DESIGN
// we represent a naked (simple) prop-ref	WITHOUT_CLASSIFICATION	0.9973042039395917	WITHOUT_CLASSIFICATION	0.002695796060408362	DESIGN
// EARLY EXIT!!!  return so the resolve call explicitly coming from DotNode can // resolve this...	WITHOUT_CLASSIFICATION	0.9768325863656554	WITHOUT_CLASSIFICATION	0.023167413634344634	DESIGN
// assume this ident's text does *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9994653043175612	WITHOUT_CLASSIFICATION	5.346956824388474E-4	DESIGN
// just ignore it for now, it'll get resolved later...	WITHOUT_CLASSIFICATION	0.9995827807237544	WITHOUT_CLASSIFICATION	4.172192762455522E-4	DESIGN
// This is not actually a constant, but a reference to FROM element.	WITHOUT_CLASSIFICATION	0.9774574865763871	WITHOUT_CLASSIFICATION	0.022542513423612937	DESIGN
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999466099455501	WITHOUT_CLASSIFICATION	5.3390054449918995E-5	DESIGN
// these pieces are needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9988294783704381	WITHOUT_CLASSIFICATION	0.0011705216295618648	DESIGN
// used to set the type of the parent dot node	WITHOUT_CLASSIFICATION	0.9199062375942555	WITHOUT_CLASSIFICATION	0.0800937624057445	DESIGN
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9966188373643019	WITHOUT_CLASSIFICATION	0.0033811626356980993	DESIGN
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9966188373643019	WITHOUT_CLASSIFICATION	0.0033811626356980993	DESIGN
// naked property-refs cannot be used with an aliased from element	WITHOUT_CLASSIFICATION	0.9747787293100486	WITHOUT_CLASSIFICATION	0.025221270689951378	DESIGN
// this piece is needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9952072661695902	WITHOUT_CLASSIFICATION	0.004792733830409815	DESIGN
// do *not* over-write the column text, as that has already been // "rendered" during resolve	WITHOUT_CLASSIFICATION	0.9998593827092126	WITHOUT_CLASSIFICATION	1.4061729078749315E-4	DESIGN
// for some reason the antlr.CommonAST initialization routines force // this method to get called twice.  The first time with an empty string	WITHOUT_CLASSIFICATION	0.9999176561849631	WITHOUT_CLASSIFICATION	8.234381503690153E-5	DESIGN
// Look up class name using the first identifier in the path.	WITHOUT_CLASSIFICATION	0.9999436513352931	WITHOUT_CLASSIFICATION	5.634866470695113E-5	DESIGN
// Add to the query spaces.	WITHOUT_CLASSIFICATION	0.9997286823487436	WITHOUT_CLASSIFICATION	2.7131765125643835E-4	DESIGN
// If the from element isn't in the same clause, create a new from element.	WITHOUT_CLASSIFICATION	0.9993727870446075	WITHOUT_CLASSIFICATION	6.272129553926031E-4	DESIGN
// This is the root level node. // Generate an explicit from clause at the root.	WITHOUT_CLASSIFICATION	0.9988669847688618	WITHOUT_CLASSIFICATION	0.0011330152311382169	DESIGN
// Correlated subqueries create 'special' implied from nodes // because correlated subselects can't use an ANSI-style join	WITHOUT_CLASSIFICATION	0.9999554531725383	WITHOUT_CLASSIFICATION	4.4546827461628815E-5	DESIGN
// super-duper-classic-parser-regression-testing-mojo-magic...	WITHOUT_CLASSIFICATION	0.9994664167093965	WITHOUT_CLASSIFICATION	5.335832906034879E-4	DESIGN
// A collection of entities...	WITHOUT_CLASSIFICATION	0.9978442385630586	WITHOUT_CLASSIFICATION	0.0021557614369413823	DESIGN
// A collection of components...	WITHOUT_CLASSIFICATION	0.9987908990501678	WITHOUT_CLASSIFICATION	0.001209100949832196	DESIGN
// A collection of scalar elements...	WITHOUT_CLASSIFICATION	0.9987908990501678	WITHOUT_CLASSIFICATION	0.001209100949832196	DESIGN
// according to both the ANSI-SQL and EJB3 specs, trim can either take // exactly one parameter or a variable number of parameters between 1 and 4. // from the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If only <trim specification> is omitted, BOTH is assumed; // if <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999995728950636	WITHOUT_CLASSIFICATION	4.2710493637540227E-7	DESIGN
// Don't include sub-classes for implied collection joins or subquery joins.	WITHOUT_CLASSIFICATION	0.9997527975397218	WITHOUT_CLASSIFICATION	2.472024602781485E-4	DESIGN
// Treat explict from elements in sub-queries properly.	WITHOUT_CLASSIFICATION	0.9994781044675559	WITHOUT_CLASSIFICATION	5.218955324442133E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.999679076858764	WITHOUT_CLASSIFICATION	3.2092314123604855E-4	DESIGN
// the "root from-element" in correlated subqueries do need this piece	WITHOUT_CLASSIFICATION	0.9379182225548011	WITHOUT_CLASSIFICATION	0.06208177744519887	DESIGN
// Create the FROM element for the target (the elements of the collection).	WITHOUT_CLASSIFICATION	0.9999989363642141	WITHOUT_CLASSIFICATION	1.0636357859517158E-6	DESIGN
// If the join is implied, then don't include sub-classes on the element.	WITHOUT_CLASSIFICATION	0.9999772690438803	WITHOUT_CLASSIFICATION	2.2730956119657854E-5	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997109726834859	WITHOUT_CLASSIFICATION	2.8902731651416283E-4	DESIGN
// The associated entity is implied, but it must be included in the FROM. // The collection alias is the role.	WITHOUT_CLASSIFICATION	0.999868760542222	WITHOUT_CLASSIFICATION	1.31239457778061E-4	DESIGN
// Tag this node as a JOIN. // Don't include subclasses in the join. // This is a clollection join.	WITHOUT_CLASSIFICATION	0.9994507938461893	WITHOUT_CLASSIFICATION	5.492061538107991E-4	DESIGN
// Get the class name of the associated entity.	WITHOUT_CLASSIFICATION	0.999890141558433	WITHOUT_CLASSIFICATION	1.0985844156694177E-4	DESIGN
//  origin, path, implied, columns, classAlias,	WITHOUT_CLASSIFICATION	0.9999640113627132	WITHOUT_CLASSIFICATION	3.598863728686195E-5	DESIGN
/*implied*/	WITHOUT_CLASSIFICATION	0.9978670924811555	WITHOUT_CLASSIFICATION	0.002132907518844583	DESIGN
// For implied many-to-many, just add the end join.	WITHOUT_CLASSIFICATION	0.9999589021667389	WITHOUT_CLASSIFICATION	4.109783326109196E-5	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997109726834859	WITHOUT_CLASSIFICATION	2.8902731651416283E-4	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997109726834859	WITHOUT_CLASSIFICATION	2.8902731651416283E-4	DESIGN
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999603469142176	WITHOUT_CLASSIFICATION	3.9653085782327505E-5	DESIGN
// This causes the factory to instantiate the desired class.	WITHOUT_CLASSIFICATION	0.9983402796375419	WITHOUT_CLASSIFICATION	0.0016597203624581483	DESIGN
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9992851099042198	WITHOUT_CLASSIFICATION	7.148900957802429E-4	DESIGN
// Frontbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9993689499852325	WITHOUT_CLASSIFICATION	6.310500147675818E-4	DESIGN
/*	WITHOUT_CLASSIFICATION	0.9442416728045828	WITHOUT_CLASSIFICATION	0.05575832719541726	DESIGN
/*public Type[] getSqlResultTypes() {	WITHOUT_CLASSIFICATION	0.9990782343647908	WITHOUT_CLASSIFICATION	9.217656352091493E-4	DESIGN
// First, collect all of the select expressions. // NOTE: This must be done *before* invoking setScalarColumnText() because setScalarColumnText() // changes the AST!!!	WITHOUT_CLASSIFICATION	0.9990935393660211	WITHOUT_CLASSIFICATION	9.064606339789878E-4	DESIGN
// First allow the actual type to control the return value. (the actual underlying sqltype could actually be different)	WITHOUT_CLASSIFICATION	0.9702310020336952	WITHOUT_CLASSIFICATION	0.029768997966304722	DESIGN
//sqlResultTypeList.addAll( constructorArgumentTypeList );	WITHOUT_CLASSIFICATION	0.9993718771238168	WITHOUT_CLASSIFICATION	6.28122876183113E-4	DESIGN
// If the data type is not an association type, it could not have been in the FROM clause.	WITHOUT_CLASSIFICATION	0.9996089675697936	WITHOUT_CLASSIFICATION	3.9103243020653335E-4	DESIGN
//sqlResultTypeList.add( type );	WITHOUT_CLASSIFICATION	0.9989087244444198	WITHOUT_CLASSIFICATION	0.0010912755555801813	DESIGN
// Always add the type to the return type list.	WITHOUT_CLASSIFICATION	0.9993072890804019	WITHOUT_CLASSIFICATION	6.927109195981729E-4	DESIGN
// add the fetched entities	WITHOUT_CLASSIFICATION	0.9994979376084228	WITHOUT_CLASSIFICATION	5.020623915771879E-4	DESIGN
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999000557086696	WITHOUT_CLASSIFICATION	9.994429133043957E-5	DESIGN
// function support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997133671484402	WITHOUT_CLASSIFICATION	2.8663285155989534E-4	DESIGN
// If there are any scalars (non-entities) selected, render the select column aliases.	WITHOUT_CLASSIFICATION	0.9999984941497478	WITHOUT_CLASSIFICATION	1.5058502521422168E-6	DESIGN
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9976485066014736	WITHOUT_CLASSIFICATION	0.002351493398526296	DESIGN
/*ArrayList sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9986810053377232	WITHOUT_CLASSIFICATION	0.0013189946622768059	DESIGN
//sqlResultTypes = ( Type[] ) sqlResultTypeList.toArray( new Type[sqlResultTypeList.size()] );	WITHOUT_CLASSIFICATION	0.997528808011134	WITHOUT_CLASSIFICATION	0.002471191988866097	DESIGN
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9989020530466964	WITHOUT_CLASSIFICATION	0.0010979469533035297	DESIGN
//TODO:	WITHOUT_CLASSIFICATION	0.8858490008155978	WITHOUT_CLASSIFICATION	0.11415099918440216	DESIGN
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.999868292063737	WITHOUT_CLASSIFICATION	1.317079362629549E-4	DESIGN
// Generate an 2d array of column names, the first dimension is parallel with the // return types array.  The second dimension is the list of column names for each // type.	WITHOUT_CLASSIFICATION	0.9999995458101207	WITHOUT_CLASSIFICATION	4.541898793433147E-7	DESIGN
// Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999060085028229	WITHOUT_CLASSIFICATION	9.399149717715866E-5	DESIGN
// union subclass support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9958181909226298	WITHOUT_CLASSIFICATION	0.004181809077370228	DESIGN
// Skip 'DISTINCT' and 'ALL', so we return the first expression node.	WITHOUT_CLASSIFICATION	0.9999742576000945	WITHOUT_CLASSIFICATION	2.574239990543816E-5	DESIGN
// Create SQL_TOKEN nodes for the columns.	WITHOUT_CLASSIFICATION	0.9999039159743257	WITHOUT_CLASSIFICATION	9.60840256743085E-5	DESIGN
// Generate the property select tokens.	WITHOUT_CLASSIFICATION	0.9997868402921906	WITHOUT_CLASSIFICATION	2.1315970780953425E-4	DESIGN
// Get the function name node.	WITHOUT_CLASSIFICATION	0.9999293460674091	WITHOUT_CLASSIFICATION	7.065393259087763E-5	DESIGN
// Method expressions in a SELECT should always be considered scalar.	WITHOUT_CLASSIFICATION	0.7157560435511536	WITHOUT_CLASSIFICATION	0.2842439564488463	DESIGN
// If this is 'elements' then create a new FROM element.	WITHOUT_CLASSIFICATION	0.9992070743774737	WITHOUT_CLASSIFICATION	7.929256225263061E-4	DESIGN
// Not elements(x)	WITHOUT_CLASSIFICATION	0.979617395810622	WITHOUT_CLASSIFICATION	0.02038260418937798	DESIGN
// Dialect function	WITHOUT_CLASSIFICATION	0.9997895471848086	WITHOUT_CLASSIFICATION	2.1045281519138675E-4	DESIGN
// Collection 'property function'	WITHOUT_CLASSIFICATION	0.9992746900474547	WITHOUT_CLASSIFICATION	7.253099525453157E-4	DESIGN
// If the constant is an IDENT, figure out what it means...	WITHOUT_CLASSIFICATION	0.9993453255683749	WITHOUT_CLASSIFICATION	6.54674431625138E-4	DESIGN
// IDENT is a class alias in the FROM.	WITHOUT_CLASSIFICATION	0.9998029404612649	WITHOUT_CLASSIFICATION	1.9705953873501723E-4	DESIGN
// Resolve to an identity column.	WITHOUT_CLASSIFICATION	0.9991162064856527	WITHOUT_CLASSIFICATION	8.837935143472652E-4	DESIGN
// Otherwise, it's a literal.	WITHOUT_CLASSIFICATION	0.9991033368938668	WITHOUT_CLASSIFICATION	8.96663106133379E-4	DESIGN
// the name of an entity class	WITHOUT_CLASSIFICATION	0.9985751941562085	WITHOUT_CLASSIFICATION	0.0014248058437914964	DESIGN
//the class discriminator value	WITHOUT_CLASSIFICATION	0.9994025288454446	WITHOUT_CLASSIFICATION	5.974711545554527E-4	DESIGN
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9998759974363418	WITHOUT_CLASSIFICATION	1.2400256365812916E-4	DESIGN
// Add a space before the display text.	WITHOUT_CLASSIFICATION	0.9999426134461687	WITHOUT_CLASSIFICATION	5.738655383125247E-5	DESIGN
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999794788535632	WITHOUT_CLASSIFICATION	2.0521146436798833E-5	DESIGN
// child == parent.getFirstChild()	WITHOUT_CLASSIFICATION	0.9997868900986513	WITHOUT_CLASSIFICATION	2.1310990134868016E-4	DESIGN
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999794788535632	WITHOUT_CLASSIFICATION	2.0521146436798833E-5	DESIGN
// Filter conditions need to be inserted before the HQL where condition and the // theta join node.  This is because org.hibernate.loader.Loader binds the filter parameters first, // then it binds all the HQL query parameters, see org.hibernate.loader.Loader.processFilterParameters().	WITHOUT_CLASSIFICATION	0.9999849936926392	WITHOUT_CLASSIFICATION	1.5006307360762943E-5	DESIGN
// Put the FILTERS node before the HQL condition and theta joins	WITHOUT_CLASSIFICATION	0.9998940551819084	WITHOUT_CLASSIFICATION	1.0594481809155027E-4	DESIGN
// add the current fragment to the FILTERS node	WITHOUT_CLASSIFICATION	0.9998193136249733	WITHOUT_CLASSIFICATION	1.8068637502677284E-4	DESIGN
// Create a new THETA_JOINS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999407298715446	WITHOUT_CLASSIFICATION	5.9270128455410954E-5	DESIGN
// Put the THETA_JOINS node before the HQL condition, after the filters.	WITHOUT_CLASSIFICATION	0.9999803269188697	WITHOUT_CLASSIFICATION	1.967308113030342E-5	DESIGN
// add the current fragment to the THETA_JOINS node	WITHOUT_CLASSIFICATION	0.9998193136249733	WITHOUT_CLASSIFICATION	1.8068637502677284E-4	DESIGN
// First, try to get the persister using the given name directly.	WITHOUT_CLASSIFICATION	0.9999701011966748	WITHOUT_CLASSIFICATION	2.9898803325111192E-5	DESIGN
// unable to locate it using this name	WITHOUT_CLASSIFICATION	0.9982379097629404	WITHOUT_CLASSIFICATION	0.0017620902370596003	DESIGN
// If that didn't work, try using the 'import' name.	WITHOUT_CLASSIFICATION	0.999958099661751	WITHOUT_CLASSIFICATION	4.190033824902968E-5	DESIGN
// Implicit joins use theta style (WHERE pk = fk), explicit joins use JOIN (after from)	WITHOUT_CLASSIFICATION	0.999735205931063	WITHOUT_CLASSIFICATION	2.6479406893701565E-4	DESIGN
// locate the registered function by the given name	WITHOUT_CLASSIFICATION	0.9999851595820956	WITHOUT_CLASSIFICATION	1.4840417904355405E-5	DESIGN
// determine the type of the first argument...	WITHOUT_CLASSIFICATION	0.9996141451952185	WITHOUT_CLASSIFICATION	3.858548047814548E-4	DESIGN
// Use the DOT node to emit the first column name. // Create the column names, folled by the column aliases.	WITHOUT_CLASSIFICATION	0.9999969307795435	WITHOUT_CLASSIFICATION	3.069220456532845E-6	DESIGN
// Note: this simply constructs a "raw" SQL_TOKEN representing the // where fragment and injects this into the tree.  This "works"; // however it is probably not the best long-term solution. // // At some point we probably want to apply an additional grammar to // properly tokenize this where fragment into constituent parts // focused on the operators embedded within the fragment.	WITHOUT_CLASSIFICATION	0.9992502919721955	DESIGN	7.497080278044802E-4	WITHOUT_CLASSIFICATION
// Append the text of the current node.	WITHOUT_CLASSIFICATION	0.999994760303799	WITHOUT_CLASSIFICATION	5.239696200997478E-6	DESIGN
// If the node has a first child, recurse into the first child.	WITHOUT_CLASSIFICATION	0.9999788496596865	WITHOUT_CLASSIFICATION	2.1150340313494533E-5	DESIGN
// If there is a second child (RHS), recurse into that child.	WITHOUT_CLASSIFICATION	0.9999849915851028	WITHOUT_CLASSIFICATION	1.5008414897149217E-5	DESIGN
// Iterate through the alias,JoinSequence pairs and generate SQL token nodes.	WITHOUT_CLASSIFICATION	0.9999894946260135	WITHOUT_CLASSIFICATION	1.0505373986529181E-5	DESIGN
// If the from element represents a JOIN_FRAGMENT and it is // a theta-style join, convert its type from JOIN_FRAGMENT // to FROM_FRAGMENT	WITHOUT_CLASSIFICATION	0.999972049425213	WITHOUT_CLASSIFICATION	2.7950574786992123E-5	DESIGN
// this is used during SqlGenerator processing	WITHOUT_CLASSIFICATION	0.7885400779910455	WITHOUT_CLASSIFICATION	0.21145992200895447	DESIGN
// If there is a FROM fragment and the FROM element is an explicit, then add the from part.	WITHOUT_CLASSIFICATION	0.9998463944232788	WITHOUT_CLASSIFICATION	1.536055767212297E-4	DESIGN
/*&& StringHelper.isNotEmpty( frag )*/	WITHOUT_CLASSIFICATION	0.9987235365885122	WITHOUT_CLASSIFICATION	0.0012764634114877992	DESIGN
// The FROM fragment will probably begin with ', '.  Remove this if it is present.	WITHOUT_CLASSIFICATION	0.535636882538584	WITHOUT_CLASSIFICATION	0.4643631174614159	DESIGN
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9908001208007045	WITHOUT_CLASSIFICATION	0.009199879199295515	DESIGN
// SELECT p FROM p IN CLASS eg.Person ORDER BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9987110334354454	WITHOUT_CLASSIFICATION	0.0012889665645545386	DESIGN
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.9977755328342752	WITHOUT_CLASSIFICATION	0.002224467165724676	DESIGN
//named query parameter	WITHOUT_CLASSIFICATION	0.9956772354849549	WITHOUT_CLASSIFICATION	0.004322764515045057	DESIGN
//default mode	WITHOUT_CLASSIFICATION	0.9951790113226777	WITHOUT_CLASSIFICATION	0.004820988677322343	DESIGN
//QueryJoinFragment join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9998403007777525	WITHOUT_CLASSIFICATION	1.5969922224743185E-4	DESIGN
//reset the dotcount (but not the path) //after reset!	WITHOUT_CLASSIFICATION	0.9975345310458935	WITHOUT_CLASSIFICATION	0.0024654689541064715	DESIGN
//after reset!	WITHOUT_CLASSIFICATION	0.9978993492578535	WITHOUT_CLASSIFICATION	0.002100650742146423	DESIGN
// we don't need to worry about any condition in the ON clause // here (toFromFragmentString), since anything in the ON condition // is already applied to the whole query	WITHOUT_CLASSIFICATION	0.999640085558087	WITHOUT_CLASSIFICATION	3.599144419130108E-4	DESIGN
// bit_length feels a bit broken to me. We have to cast to char in order to // pass when a numeric value is supplied. But of course the answers given will // be wildly different for these two datatypes. 1234.5678 will be 9 bytes as // a char string but will be 8 or 16 bytes as a true numeric. // Jay Nance 2006-09-22	WITHOUT_CLASSIFICATION	0.9989772279992818	WITHOUT_CLASSIFICATION	0.001022772000718247	DESIGN
// dotcount>=2	WITHOUT_CLASSIFICATION	0.9991367392007966	WITHOUT_CLASSIFICATION	8.632607992033527E-4	DESIGN
// Do the corresponding RHS	WITHOUT_CLASSIFICATION	0.999232336807284	WITHOUT_CLASSIFICATION	7.676631927159761E-4	DESIGN
//if its "id"	WITHOUT_CLASSIFICATION	0.9998210303735445	WITHOUT_CLASSIFICATION	1.7896962645554896E-4	DESIGN
//or its the id property name	WITHOUT_CLASSIFICATION	0.997953974536434	WITHOUT_CLASSIFICATION	0.002046025463565917	DESIGN
//join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9996088335948893	WITHOUT_CLASSIFICATION	3.911664051107176E-4	DESIGN
//important!!	WITHOUT_CLASSIFICATION	0.9978670924811555	WITHOUT_CLASSIFICATION	0.002132907518844583	DESIGN
//String[] keyCols = collPersister.getKeyColumnNames();	WITHOUT_CLASSIFICATION	0.9996088335948893	WITHOUT_CLASSIFICATION	3.911664051107176E-4	DESIGN
// an association	WITHOUT_CLASSIFICATION	0.9995530913282686	WITHOUT_CLASSIFICATION	4.469086717314146E-4	DESIGN
//allow index() function:	WITHOUT_CLASSIFICATION	0.9976791003030141	WITHOUT_CLASSIFICATION	0.002320899696985829	DESIGN
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9788400137354106	WITHOUT_CLASSIFICATION	0.021159986264589394	DESIGN
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.9977755328342752	WITHOUT_CLASSIFICATION	0.002224467165724676	DESIGN
//many-to-many	WITHOUT_CLASSIFICATION	0.9978670924811555	WITHOUT_CLASSIFICATION	0.002132907518844583	DESIGN
// collections of values	WITHOUT_CLASSIFICATION	0.9997725757564052	WITHOUT_CLASSIFICATION	2.2742424359478274E-4	DESIGN
//opening paren in new Foo ( ... )	WITHOUT_CLASSIFICATION	0.9231841387844142	WITHOUT_CLASSIFICATION	0.07681586121558583	DESIGN
//if we are inside a new Result(), but not inside a nested function	WITHOUT_CLASSIFICATION	0.9992116194174244	WITHOUT_CLASSIFICATION	7.883805825755232E-4	DESIGN
//special case	WITHOUT_CLASSIFICATION	0.9996209228070975	WITHOUT_CLASSIFICATION	3.790771929025355E-4	DESIGN
// the name of an SQL function	WITHOUT_CLASSIFICATION	0.9998942116176098	WITHOUT_CLASSIFICATION	1.0578838239016672E-4	DESIGN
//null child could occur for no from clause in a filter	WITHOUT_CLASSIFICATION	0.9970101274178879	WITHOUT_CLASSIFICATION	0.0029898725821121555	DESIGN
//this is basically a copy/paste of OrderByParser ... might be worth refactoring	WITHOUT_CLASSIFICATION	0.8748060911765992	DESIGN	0.12519390882340084	WITHOUT_CLASSIFICATION
// SELECT p FROM p IN CLASS eg.Person GROUP BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9980749194253176	WITHOUT_CLASSIFICATION	0.0019250805746824431	DESIGN
// return aliases not supported in classic translator!	WITHOUT_CLASSIFICATION	0.9980526331846468	WITHOUT_CLASSIFICATION	0.0019473668153533175	DESIGN
//register collection role	WITHOUT_CLASSIFICATION	0.9955768421048591	WITHOUT_CLASSIFICATION	0.004423157895140862	DESIGN
// The keyword used to specify an identity column, if identity column key generation is supported.	WITHOUT_CLASSIFICATION	0.9975487338222024	WITHOUT_CLASSIFICATION	0.002451266177797572	DESIGN
//.getElementPropertyMapping();	WITHOUT_CLASSIFICATION	0.9986810053377232	WITHOUT_CLASSIFICATION	0.0013189946622768059	DESIGN
//crossJoins.add(name);	WITHOUT_CLASSIFICATION	0.9976485066014736	WITHOUT_CLASSIFICATION	0.002351493398526296	DESIGN
//ie no select clause in HQL	WITHOUT_CLASSIFICATION	0.9995222534155228	WITHOUT_CLASSIFICATION	4.777465844772611E-4	DESIGN
// initialize the Set of queried identifier spaces (ie. tables)	WITHOUT_CLASSIFICATION	0.9997341603053516	WITHOUT_CLASSIFICATION	2.658396946484375E-4	DESIGN
//ie. no select clause	WITHOUT_CLASSIFICATION	0.9996360361994882	WITHOUT_CLASSIFICATION	3.6396380051180086E-4	DESIGN
//there _was_ a select clause	WITHOUT_CLASSIFICATION	0.9992921693839063	WITHOUT_CLASSIFICATION	7.078306160937189E-4	DESIGN
// return the concrete type, or the underlying type if a concrete type // was not specified	WITHOUT_CLASSIFICATION	0.9998838447225041	WITHOUT_CLASSIFICATION	1.1615527749589825E-4	DESIGN
//many-to-many	WITHOUT_CLASSIFICATION	0.9978670924811555	WITHOUT_CLASSIFICATION	0.002132907518844583	DESIGN
//q.addCollection(collectionName, collectionRole);	WITHOUT_CLASSIFICATION	0.9986810053377232	WITHOUT_CLASSIFICATION	0.0013189946622768059	DESIGN
// classic parser does not support bulk manipulation statements	WITHOUT_CLASSIFICATION	0.9979554093902444	WITHOUT_CLASSIFICATION	0.002044590609755629	DESIGN
// can't cache this stuff either (per-invocation)	WITHOUT_CLASSIFICATION	0.9974876442433673	WITHOUT_CLASSIFICATION	0.0025123557566326163	DESIGN
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9941879928333784	WITHOUT_CLASSIFICATION	0.005812007166621655	DESIGN
// This is the legacy behaviour for HQL queries...	WITHOUT_CLASSIFICATION	0.9980216875318644	WITHOUT_CLASSIFICATION	0.0019783124681355536	DESIGN
// not known!	WITHOUT_CLASSIFICATION	0.9967479667238421	WITHOUT_CLASSIFICATION	0.0032520332761578697	DESIGN
// not known!	WITHOUT_CLASSIFICATION	0.9967479667238421	WITHOUT_CLASSIFICATION	0.0032520332761578697	DESIGN
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9998568285023951	WITHOUT_CLASSIFICATION	1.4317149760481013E-4	DESIGN
// not known!	WITHOUT_CLASSIFICATION	0.9967479667238421	WITHOUT_CLASSIFICATION	0.0032520332761578697	DESIGN
// not known!	WITHOUT_CLASSIFICATION	0.9967479667238421	WITHOUT_CLASSIFICATION	0.0032520332761578697	DESIGN
//Need this, since join condition can appear inside parens!	WITHOUT_CLASSIFICATION	0.9852353628826581	WITHOUT_CLASSIFICATION	0.01476463711734176	DESIGN
//tokens that close a sub expression //tokens that open a sub expression //tokens that would indicate a sub expression is a boolean expression	WITHOUT_CLASSIFICATION	0.9999998069292748	WITHOUT_CLASSIFICATION	1.9307072511429058E-7	DESIGN
//expressionTerminators.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.999726498891054	WITHOUT_CLASSIFICATION	2.7350110894601323E-4	DESIGN
//expressionOpeners.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.999726498891054	WITHOUT_CLASSIFICATION	2.7350110894601323E-4	DESIGN
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource) // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9979476482246518	WITHOUT_CLASSIFICATION	0.0020523517753482518	DESIGN
// otherwise, a trim-specification and/or a trim-character // have been specified;  we need to decide which options // are present and "do the right thing" // should leading trim-characters be trimmed? // should trailing trim-characters be trimmed? // the trim-character (what is to be trimmed off?) // the trim-source (from where should it be trimmed?)	WITHOUT_CLASSIFICATION	0.9985762192402682	WITHOUT_CLASSIFICATION	0.0014237807597317395	DESIGN
//Inside a BETWEEN ... AND ... expression	WITHOUT_CLASSIFICATION	0.9973814927603796	WITHOUT_CLASSIFICATION	0.0026185072396204467	DESIGN
//were an odd or even number of NOTs encountered //the join string built up by compound paths inside this expression //a flag indicating if the subexpression is known to be boolean	WITHOUT_CLASSIFICATION	0.9999537242357152	WITHOUT_CLASSIFICATION	4.627576428485728E-5	DESIGN
//ie. a many-to-many	WITHOUT_CLASSIFICATION	0.9959524814774176	WITHOUT_CLASSIFICATION	0.004047518522582425	DESIGN
//Cope with [,]	WITHOUT_CLASSIFICATION	0.9962757764457284	WITHOUT_CLASSIFICATION	0.0037242235542715076	DESIGN
//Cope with a continued path expression (ie. ].baz)	WITHOUT_CLASSIFICATION	0.9996792203007179	WITHOUT_CLASSIFICATION	3.207796992820707E-4	DESIGN
//NOTE: early return	WITHOUT_CLASSIFICATION	0.9988228224764915	WITHOUT_CLASSIFICATION	0.0011771775235086138	DESIGN
//Cope with a subselect	WITHOUT_CLASSIFICATION	0.9922187310605927	WITHOUT_CLASSIFICATION	0.007781268939407402	DESIGN
//Cope with special cases of AND, NOT, ()	WITHOUT_CLASSIFICATION	0.9999942475422897	WITHOUT_CLASSIFICATION	5.75245771026093E-6	DESIGN
//Close extra brackets we opened	WITHOUT_CLASSIFICATION	0.9989991284916778	WITHOUT_CLASSIFICATION	0.0010008715083222308	DESIGN
//take note when this is a boolean expression	WITHOUT_CLASSIFICATION	0.9973246217535559	WITHOUT_CLASSIFICATION	0.00267537824644422	DESIGN
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999979387908937	WITHOUT_CLASSIFICATION	2.0612091062890403E-6	DESIGN
//process a token, mapping OO path expressions to SQL expressions	WITHOUT_CLASSIFICATION	0.9999316995093313	WITHOUT_CLASSIFICATION	6.83004906687349E-5	DESIGN
//Open any extra brackets we might need.	WITHOUT_CLASSIFICATION	0.9920179965414408	WITHOUT_CLASSIFICATION	0.007982003458559246	DESIGN
//Cope with special cases of AND, NOT, )	WITHOUT_CLASSIFICATION	0.9818223578075129	WITHOUT_CLASSIFICATION	0.018177642192487072	DESIGN
// the next one up must also be	WITHOUT_CLASSIFICATION	0.9987505203038273	WITHOUT_CLASSIFICATION	0.001249479696172626	DESIGN
// Add any joins	WITHOUT_CLASSIFICATION	0.9996275916971807	WITHOUT_CLASSIFICATION	3.7240830281928773E-4	DESIGN
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999979387908937	WITHOUT_CLASSIFICATION	2.0612091062890403E-6	DESIGN
//named query parameter	WITHOUT_CLASSIFICATION	0.9956772354849549	WITHOUT_CLASSIFICATION	0.004322764515045057	DESIGN
//path expression	WITHOUT_CLASSIFICATION	0.9993736312435203	WITHOUT_CLASSIFICATION	6.263687564796472E-4	DESIGN
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9998804823784924	WITHOUT_CLASSIFICATION	1.1951762150754995E-4	DESIGN
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9996664814160804	WITHOUT_CLASSIFICATION	3.3351858391964114E-4	DESIGN
//anything else	WITHOUT_CLASSIFICATION	0.9995933776124932	WITHOUT_CLASSIFICATION	4.0662238750681904E-4	DESIGN
// the path expression continues after a ]	WITHOUT_CLASSIFICATION	0.9999884318528516	WITHOUT_CLASSIFICATION	1.1568147148440868E-5	DESIGN
// careful with this!	WITHOUT_CLASSIFICATION	0.9974434561623687	WITHOUT_CLASSIFICATION	0.002556543837631347	DESIGN
// the path expression ends at the ]	WITHOUT_CLASSIFICATION	0.9999589491276334	WITHOUT_CLASSIFICATION	4.105087236653077E-5	DESIGN
// "finish off" the join	WITHOUT_CLASSIFICATION	0.9998741163438714	WITHOUT_CLASSIFICATION	1.258836561286391E-4	DESIGN
//NOTICE: no " or . since they are part of (compound) identifiers	WITHOUT_CLASSIFICATION	0.9998350349730578	WITHOUT_CLASSIFICATION	1.649650269421499E-4	DESIGN
//cannot instantiate	WITHOUT_CLASSIFICATION	0.9961433947107406	WITHOUT_CLASSIFICATION	0.0038566052892592285	DESIGN
// start by looking for HQL keywords...	WITHOUT_CLASSIFICATION	0.9998505804558419	WITHOUT_CLASSIFICATION	1.4941954415818005E-4	DESIGN
// inner joins can be abbreviated to 'join'	WITHOUT_CLASSIFICATION	0.998001316049672	WITHOUT_CLASSIFICATION	0.001998683950327956	DESIGN
// 'outer' is optional and is ignored	WITHOUT_CLASSIFICATION	0.9998376869279467	WITHOUT_CLASSIFICATION	1.623130720532489E-4	DESIGN
// now anything that is not a HQL keyword	WITHOUT_CLASSIFICATION	0.9997285750352813	WITHOUT_CLASSIFICATION	2.71424964718674E-4	DESIGN
// process the "old" HQL style where aliases appear _first_ // ie. using the IN or IN CLASS constructions	WITHOUT_CLASSIFICATION	0.9997866775915826	WITHOUT_CLASSIFICATION	2.133224084173561E-4	DESIGN
// treat it as a classname	WITHOUT_CLASSIFICATION	0.9984113900731358	WITHOUT_CLASSIFICATION	0.0015886099268641552	DESIGN
// treat it as a path expression	WITHOUT_CLASSIFICATION	0.9999393090066693	WITHOUT_CLASSIFICATION	6.069099333079012E-5	DESIGN
// starts with the name of a mapped class (new style)	WITHOUT_CLASSIFICATION	0.9984335967609441	WITHOUT_CLASSIFICATION	0.0015664032390558362	DESIGN
// starts with a path expression (new style)	WITHOUT_CLASSIFICATION	0.9999543796683472	WITHOUT_CLASSIFICATION	4.5620331652768684E-5	DESIGN
//allow ODMG OQL style: from Person p, p.cars c	WITHOUT_CLASSIFICATION	0.9993354315427788	WITHOUT_CLASSIFICATION	6.645684572211266E-4	DESIGN
//handle quoted strings	WITHOUT_CLASSIFICATION	0.9975883506636439	WITHOUT_CLASSIFICATION	0.002411649336356039	DESIGN
// Object insertions, updates, and deletions have list semantics because // they must happen in the right order so as to respect referential // integrity	WITHOUT_CLASSIFICATION	0.9999895284078036	WITHOUT_CLASSIFICATION	1.047159219633897E-5	DESIGN
// "finish off" the join	WITHOUT_CLASSIFICATION	0.9998741163438714	WITHOUT_CLASSIFICATION	1.258836561286391E-4	DESIGN
//ignore whitespace	WITHOUT_CLASSIFICATION	0.9993075424382526	WITHOUT_CLASSIFICATION	6.924575617474165E-4	DESIGN
//do replacements	WITHOUT_CLASSIFICATION	0.9991324217590183	WITHOUT_CLASSIFICATION	8.675782409816981E-4	DESIGN
//handle HQL2 collection syntax	WITHOUT_CLASSIFICATION	0.9977120085536666	WITHOUT_CLASSIFICATION	0.002287991446333389	DESIGN
// uuid.hex is deprecated	WITHOUT_CLASSIFICATION	0.9629128101748946	WITHOUT_CLASSIFICATION	0.03708718982510533	DESIGN
// AbstractSelectingDelegate impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995816115316317	WITHOUT_CLASSIFICATION	4.183884683683066E-4	DESIGN
//hilo params	WITHOUT_CLASSIFICATION	0.998037793875997	WITHOUT_CLASSIFICATION	0.0019622061240029466	DESIGN
//sql = query;	WITHOUT_CLASSIFICATION	0.9993731227177475	WITHOUT_CLASSIFICATION	6.268772822525075E-4	DESIGN
// performance opt	WITHOUT_CLASSIFICATION	0.9979428466747627	WITHOUT_CLASSIFICATION	0.002057153325237289	DESIGN
//sql = update;	WITHOUT_CLASSIFICATION	0.999368927960503	WITHOUT_CLASSIFICATION	6.310720394970176E-4	DESIGN
//hilo config	WITHOUT_CLASSIFICATION	0.9977568656202884	WITHOUT_CLASSIFICATION	0.002243134379711611	DESIGN
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999388088361771	WITHOUT_CLASSIFICATION	6.119116382285874E-5	DESIGN
// don't allow comments on these insert statements as comments totally // blow up the Oracle getGeneratedKeys "support" :(	WITHOUT_CLASSIFICATION	0.9961794345691395	WITHOUT_CLASSIFICATION	0.0038205654308605132	DESIGN
//abort the save (the object is already saved by a circular cascade)	WITHOUT_CLASSIFICATION	0.9978012830792757	WITHOUT_CLASSIFICATION	0.00219871692072423	DESIGN
//throw new IdentifierGenerationException("save associated object first, or disable cascade for inverse association");	WITHOUT_CLASSIFICATION	0.9999540743079862	WITHOUT_CLASSIFICATION	4.59256920138151E-5	DESIGN
// intentionally empty	WITHOUT_CLASSIFICATION	0.9992846058592043	WITHOUT_CLASSIFICATION	7.153941407956005E-4	DESIGN
//do nothing to avoid a lazy property initialization	WITHOUT_CLASSIFICATION	0.9998790592648362	WITHOUT_CLASSIFICATION	1.2094073516370616E-4	DESIGN
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9992615176656411	WITHOUT_CLASSIFICATION	7.38482334358912E-4	DESIGN
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999388088361771	WITHOUT_CLASSIFICATION	6.119116382285874E-5	DESIGN
// do nothing until we hit the rsult set containing the generated id	WITHOUT_CLASSIFICATION	0.9987084137307137	WITHOUT_CLASSIFICATION	0.0012915862692862519	DESIGN
/* COLUMN and TABLE should be renamed but it would break the public API */	WITHOUT_CLASSIFICATION	0.9664079950458603	WITHOUT_CLASSIFICATION	0.03359200495413975	DESIGN
// Loaded entity instances, by EntityKey	WITHOUT_CLASSIFICATION	0.9993492517979001	WITHOUT_CLASSIFICATION	6.507482020998155E-4	DESIGN
// if the given name is un-qualified we may neen to qualify it	WITHOUT_CLASSIFICATION	0.9987123413466775	WITHOUT_CLASSIFICATION	0.0012876586533225472	DESIGN
// the default...	WITHOUT_CLASSIFICATION	0.9995240755115264	WITHOUT_CLASSIFICATION	4.7592448847359926E-4	DESIGN
// unfortunately not really safe to normalize this // to 1 as an initial value like we do the others // because we would not be able to control this if // we are using a sequence...	WITHOUT_CLASSIFICATION	0.9998542312725205	WITHOUT_CLASSIFICATION	1.4576872747952479E-4	DESIGN
// intentionally empty	WITHOUT_CLASSIFICATION	0.9992846058592043	WITHOUT_CLASSIFICATION	7.153941407956005E-4	DESIGN
// Identity map of CollectionEntry instances, by the collection wrapper	WITHOUT_CLASSIFICATION	0.9999898248957906	WITHOUT_CLASSIFICATION	1.0175104209416258E-5	DESIGN
// general purpose parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999838443495893	WITHOUT_CLASSIFICATION	1.6155650410685105E-5	DESIGN
// table-specific parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999302140324994	WITHOUT_CLASSIFICATION	6.978596750057737E-5	DESIGN
// Configurable implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997885627839851	WITHOUT_CLASSIFICATION	2.1143721601480202E-4	DESIGN
// IdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997885627839851	WITHOUT_CLASSIFICATION	2.1143721601480202E-4	DESIGN
// PersistentIdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997885627839851	WITHOUT_CLASSIFICATION	2.1143721601480202E-4	DESIGN
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999164735799915	WITHOUT_CLASSIFICATION	8.352642000859735E-5	DESIGN
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999164735799915	WITHOUT_CLASSIFICATION	8.352642000859735E-5	DESIGN
//fetch the generated id in a separate query	WITHOUT_CLASSIFICATION	0.9940364479923067	WITHOUT_CLASSIFICATION	0.0059635520076932146	DESIGN
// we just hit the last position	WITHOUT_CLASSIFICATION	0.9995259881905996	WITHOUT_CLASSIFICATION	4.74011809400412E-4	DESIGN
// scroll ahead	WITHOUT_CLASSIFICATION	0.9977472863390445	WITHOUT_CLASSIFICATION	0.002252713660955462	DESIGN
// scroll backward	WITHOUT_CLASSIFICATION	0.9993079032959413	WITHOUT_CLASSIFICATION	6.920967040587099E-4	DESIGN
// we have not yet hit the last result...	WITHOUT_CLASSIFICATION	0.9965754502015548	WITHOUT_CLASSIFICATION	0.0034245497984452806	DESIGN
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995217100112513	WITHOUT_CLASSIFICATION	4.7828998874866645E-4	DESIGN
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997237635329325	WITHOUT_CLASSIFICATION	2.7623646706750285E-4	DESIGN
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995816115316317	WITHOUT_CLASSIFICATION	4.183884683683066E-4	DESIGN
// do this when all the properties are updateable since there is // a certain likelihood that the information will already be // snapshot-cached.	WITHOUT_CLASSIFICATION	0.9997327515413791	WITHOUT_CLASSIFICATION	2.6724845862089624E-4	DESIGN
// Inner classes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998088616989923	WITHOUT_CLASSIFICATION	1.911383010076512E-4	DESIGN
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995217100112513	WITHOUT_CLASSIFICATION	4.7828998874866645E-4	DESIGN
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997237635329325	WITHOUT_CLASSIFICATION	2.7623646706750285E-4	DESIGN
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995816115316317	WITHOUT_CLASSIFICATION	4.183884683683066E-4	DESIGN
// Caches	WITHOUT_CLASSIFICATION	0.999679076858764	WITHOUT_CLASSIFICATION	3.2092314123604855E-4	DESIGN
//Generators:	WITHOUT_CLASSIFICATION	0.9978670924811555	WITHOUT_CLASSIFICATION	0.002132907518844583	DESIGN
// cache region is defined by the root-class in the hierarchy...	WITHOUT_CLASSIFICATION	0.999533210523375	WITHOUT_CLASSIFICATION	4.6678947662505204E-4	DESIGN
//check if the detached object being merged is the parent	WITHOUT_CLASSIFICATION	0.9988115544446259	WITHOUT_CLASSIFICATION	0.0011884455553741375	DESIGN
// after *all* persisters and named queries are registered	WITHOUT_CLASSIFICATION	0.999786731133445	WITHOUT_CLASSIFICATION	2.1326886655497496E-4	DESIGN
// if we get here, it is possible that we have a proxy 'in the way' of the merge map resolution... // 	WITHOUT_CLASSIFICATION	0.9999772141458686	WITHOUT_CLASSIFICATION	2.2785854131500492E-5	DESIGN
//JNDI + Serialization:	WITHOUT_CLASSIFICATION	0.998331578764131	WITHOUT_CLASSIFICATION	0.001668421235868917	DESIGN
//checking for named queries	WITHOUT_CLASSIFICATION	0.9987820799089807	WITHOUT_CLASSIFICATION	0.0012179200910192797	DESIGN
//stats	WITHOUT_CLASSIFICATION	0.9992064434309498	WITHOUT_CLASSIFICATION	7.935565690501368E-4	DESIGN
// EntityNotFoundDelegate	WITHOUT_CLASSIFICATION	0.9990481458842871	WITHOUT_CLASSIFICATION	9.518541157127762E-4	DESIGN
// Check named HQL queries	WITHOUT_CLASSIFICATION	0.9992083908238326	WITHOUT_CLASSIFICATION	7.916091761672882E-4	DESIGN
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.8711925224918118	DESIGN	0.12880747750818813	WITHOUT_CLASSIFICATION
//prevents this session from adding things to cache	WITHOUT_CLASSIFICATION	0.9837512613399789	WITHOUT_CLASSIFICATION	0.016248738660021023	DESIGN
// from javax.naming.Referenceable	WITHOUT_CLASSIFICATION	0.999279752130762	WITHOUT_CLASSIFICATION	7.202478692379034E-4	DESIGN
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9993316020869213	WITHOUT_CLASSIFICATION	6.683979130787676E-4	DESIGN
//for a dynamic-class	WITHOUT_CLASSIFICATION	0.9968393403943524	WITHOUT_CLASSIFICATION	0.0031606596056475765	DESIGN
//test this entity to see if we must query it	WITHOUT_CLASSIFICATION	0.9796026429939182	WITHOUT_CLASSIFICATION	0.020397357006081827	DESIGN
//NOTE EARLY EXIT	WITHOUT_CLASSIFICATION	0.9978670924811555	WITHOUT_CLASSIFICATION	0.002132907518844583	DESIGN
// for backward-compatability	WITHOUT_CLASSIFICATION	0.998986196071961	WITHOUT_CLASSIFICATION	0.0010138039280390206	DESIGN
// ignore this error for now	WITHOUT_CLASSIFICATION	0.9963402859663989	WITHOUT_CLASSIFICATION	0.003659714033601117	DESIGN
//to stop the class from being unloaded	WITHOUT_CLASSIFICATION	0.9986560737151372	WITHOUT_CLASSIFICATION	0.0013439262848627914	DESIGN
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.8917029185236547	WITHOUT_CLASSIFICATION	0.10829708147634537	DESIGN
//must add to JNDI _after_ adding to HashMaps, because some JNDI servers use serialization	WITHOUT_CLASSIFICATION	0.9991635988436581	WITHOUT_CLASSIFICATION	8.364011563419415E-4	DESIGN
// Make sure this is a defined parameter and check the incoming value type	WITHOUT_CLASSIFICATION	0.9987457588500764	WITHOUT_CLASSIFICATION	0.001254241149923549	DESIGN
// for each of the defined parameters, make sure its value // has been set	WITHOUT_CLASSIFICATION	0.9999903112769595	WITHOUT_CLASSIFICATION	9.688723040579694E-6	DESIGN
//we never need to apply locks to the SQL	WITHOUT_CLASSIFICATION	0.9992734356953284	WITHOUT_CLASSIFICATION	7.265643046715909E-4	DESIGN
// inserts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994707418378648	WITHOUT_CLASSIFICATION	5.292581621351913E-4	DESIGN
// deletes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994590820734817	WITHOUT_CLASSIFICATION	5.409179265183955E-4	DESIGN
// during deserialization, we need to reconnect all proxies and // collections to this session, as well as the EntityEntry and // CollectionEntry instances; these associations are transient // because serialization is used for different things.	WITHOUT_CLASSIFICATION	0.7474656966310388	WITHOUT_CLASSIFICATION	0.2525343033689612	DESIGN
// updates ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998196707499468	WITHOUT_CLASSIFICATION	1.8032925005327373E-4	DESIGN
// loading ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998733239353647	WITHOUT_CLASSIFICATION	1.2667606463534516E-4	DESIGN
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9995313541824488	WITHOUT_CLASSIFICATION	4.686458175513474E-4	DESIGN
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9995313541824488	WITHOUT_CLASSIFICATION	4.686458175513474E-4	DESIGN
// first, try to load it from the temp PC associated to this SS	WITHOUT_CLASSIFICATION	0.9998720935507215	WITHOUT_CLASSIFICATION	1.279064492784133E-4	DESIGN
// if the metadata allowed proxy creation and caller did not request forceful eager loading, // generate a proxy	WITHOUT_CLASSIFICATION	0.9999995114864787	WITHOUT_CLASSIFICATION	4.885135213729995E-7	DESIGN
// otherwise immediately materialize it	WITHOUT_CLASSIFICATION	0.9989419636698329	WITHOUT_CLASSIFICATION	0.001058036330167102	DESIGN
/////////////////////////////////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9986810053377232	WITHOUT_CLASSIFICATION	0.0013189946622768059	DESIGN
// no auto-flushing to support in stateless session	WITHOUT_CLASSIFICATION	0.9973739322058355	WITHOUT_CLASSIFICATION	0.0026260677941644475	DESIGN
//after setting values to object, entityMode	WITHOUT_CLASSIFICATION	0.9999231093119134	WITHOUT_CLASSIFICATION	7.689068808654363E-5	DESIGN
//for EJB3	WITHOUT_CLASSIFICATION	0.9994387643437342	WITHOUT_CLASSIFICATION	5.612356562657491E-4	DESIGN
// just ignore	WITHOUT_CLASSIFICATION	0.9998082174670534	WITHOUT_CLASSIFICATION	1.917825329466469E-4	DESIGN
// do a check	WITHOUT_CLASSIFICATION	0.9993400926109953	WITHOUT_CLASSIFICATION	6.599073890046099E-4	DESIGN
// saveOrUpdate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999816751252768	WITHOUT_CLASSIFICATION	1.832487472320738E-4	DESIGN
// update() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998332783907526	WITHOUT_CLASSIFICATION	1.6672160924736967E-4	DESIGN
// lock() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999816751252768	WITHOUT_CLASSIFICATION	1.832487472320738E-4	DESIGN
// persist() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999816751252768	WITHOUT_CLASSIFICATION	1.832487472320738E-4	DESIGN
// persistOnFlush() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999816751252768	WITHOUT_CLASSIFICATION	1.832487472320738E-4	DESIGN
// merge() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998178001840573	WITHOUT_CLASSIFICATION	1.8219981594277287E-4	DESIGN
// saveOrUpdateCopy() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999816751252768	WITHOUT_CLASSIFICATION	1.832487472320738E-4	DESIGN
// delete() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997907665903539	WITHOUT_CLASSIFICATION	2.0923340964610457E-4	DESIGN
// load()/get() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999816751252768	WITHOUT_CLASSIFICATION	1.832487472320738E-4	DESIGN
// refresh() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999816751252768	WITHOUT_CLASSIFICATION	1.832487472320738E-4	DESIGN
// replicate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999816751252768	WITHOUT_CLASSIFICATION	1.832487472320738E-4	DESIGN
// do not auto-flush while outside a transaction	WITHOUT_CLASSIFICATION	0.985164304716449	WITHOUT_CLASSIFICATION	0.014835695283551026	DESIGN
// this is an internal error of some sort...	WITHOUT_CLASSIFICATION	0.992409210621131	WITHOUT_CLASSIFICATION	0.007590789378869028	DESIGN
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9858670430403599	WITHOUT_CLASSIFICATION	0.014132956959640165	DESIGN
//only collections belonging to deleted entities are allowed to be dereferenced in the case of orphan delete	WITHOUT_CLASSIFICATION	0.9999844993378444	WITHOUT_CLASSIFICATION	1.550066215557253E-5	DESIGN
// if it was previously unreferenced, we need to flush in order to // get its state into the database in order to execute query	WITHOUT_CLASSIFICATION	0.9996232237381639	WITHOUT_CLASSIFICATION	3.767762618360201E-4	DESIGN
// not for internal use:	WITHOUT_CLASSIFICATION	0.9964762293126381	WITHOUT_CLASSIFICATION	0.0035237706873617876	DESIGN
// otherwise, we only need to flush if there are in-memory changes // to the queried tables	WITHOUT_CLASSIFICATION	0.9988223732632495	WITHOUT_CLASSIFICATION	0.001177626736750527	DESIGN
// might need to run a different filter entirely after the flush // because the collection role may have changed	WITHOUT_CLASSIFICATION	0.9889222620697276	WITHOUT_CLASSIFICATION	0.011077737930272478	DESIGN
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9858670430403599	WITHOUT_CLASSIFICATION	0.014132956959640165	DESIGN
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9858670430403599	WITHOUT_CLASSIFICATION	0.014132956959640165	DESIGN
//if it is initialized, see if the underlying //instance is contained, since we need to  //account for the fact that it might have been //evicted	WITHOUT_CLASSIFICATION	0.9995034992554652	WITHOUT_CLASSIFICATION	4.965007445347357E-4	DESIGN
// basically just an adapted copy of find(CriteriaImpl)	WITHOUT_CLASSIFICATION	0.9992453007086154	WITHOUT_CLASSIFICATION	7.54699291384665E-4	DESIGN
// it is possible for this method to be called during flush processing, // so make certain that we do not accidently initialize an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9983455439212938	WITHOUT_CLASSIFICATION	0.0016544560787062025	DESIGN
// nothing to do in a stateful session	WITHOUT_CLASSIFICATION	0.9979995458623556	WITHOUT_CLASSIFICATION	0.002000454137644387	DESIGN
// ignore	WITHOUT_CLASSIFICATION	0.999855661645043	WITHOUT_CLASSIFICATION	1.4433835495695786E-4	DESIGN
// ignore this error for now	WITHOUT_CLASSIFICATION	0.9963402859663989	WITHOUT_CLASSIFICATION	0.003659714033601117	DESIGN
// we need to writeObject() on this since interceptor is user defined	WITHOUT_CLASSIFICATION	0.9989110156266826	WITHOUT_CLASSIFICATION	0.0010889843733174023	DESIGN
// the old-time stand-by...	WITHOUT_CLASSIFICATION	0.9994668535185269	WITHOUT_CLASSIFICATION	5.331464814729932E-4	DESIGN
// parameter bind values...	WITHOUT_CLASSIFICATION	0.9979092458867211	WITHOUT_CLASSIFICATION	0.0020907541132788527	DESIGN
// Parameter handling code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9975973141631209	WITHOUT_CLASSIFICATION	0.002402685836879151	DESIGN
// prepend value and type list with null for any positions before the wanted position.	WITHOUT_CLASSIFICATION	0.9998761183677486	WITHOUT_CLASSIFICATION	1.2388163225143507E-4	DESIGN
// Execution methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993502469381116	WITHOUT_CLASSIFICATION	6.497530618884704E-4	DESIGN
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9983264048272601	WITHOUT_CLASSIFICATION	0.0016735951727398191	DESIGN
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9983264048272601	WITHOUT_CLASSIFICATION	0.0016735951727398191	DESIGN
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9983264048272601	WITHOUT_CLASSIFICATION	0.0016735951727398191	DESIGN
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9983264048272601	WITHOUT_CLASSIFICATION	0.0016735951727398191	DESIGN
// FieldInterceptor impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995816115316317	WITHOUT_CLASSIFICATION	4.183884683683066E-4	DESIGN
// subclass accesses ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9987693791155299	WITHOUT_CLASSIFICATION	0.001230620884470071	DESIGN
//let's assume that there is only one lazy fetch group, for now!	WITHOUT_CLASSIFICATION	0.9998956344159883	WITHOUT_CLASSIFICATION	1.0436558401178673E-4	DESIGN
// FieldHandler impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995816115316317	WITHOUT_CLASSIFICATION	4.183884683683066E-4	DESIGN
// should *not* need to grow beyond the size of the total number of columns in the rs	WITHOUT_CLASSIFICATION	0.9860067610444818	WITHOUT_CLASSIFICATION	0.013993238955518197	DESIGN
// should probably no-op commit/rollback here, at least in JTA scenarios	WITHOUT_CLASSIFICATION	0.9486436233388108	WITHOUT_CLASSIFICATION	0.05135637666118924	DESIGN
// Base Expectation impls ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996777282116471	WITHOUT_CLASSIFICATION	3.2227178835285013E-4	DESIGN
// Various Expectation instances ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999680144370534	WITHOUT_CLASSIFICATION	3.198556294659427E-4	DESIGN
// explicitly perform no checking...	WITHOUT_CLASSIFICATION	0.5808301543482141	WITHOUT_CLASSIFICATION	0.41916984565178594	DESIGN
// used from testsuite	WITHOUT_CLASSIFICATION	0.9022210596250868	WITHOUT_CLASSIFICATION	0.0977789403749132	DESIGN
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9989452422126355	WITHOUT_CLASSIFICATION	0.0010547577873645142	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.9980112233897486	WITHOUT_CLASSIFICATION	0.0019887766102513788	DESIGN
// register synch; stats.connect()	WITHOUT_CLASSIFICATION	0.9995571119401931	WITHOUT_CLASSIFICATION	4.4288805980682627E-4	DESIGN
//noncritical, swallow and let the other propagate!	WITHOUT_CLASSIFICATION	0.9964185685137901	WITHOUT_CLASSIFICATION	0.003581431486209957	DESIGN
// calls executeBatch()	WITHOUT_CLASSIFICATION	0.997626225637653	WITHOUT_CLASSIFICATION	0.002373774362346983	DESIGN
//no big deal	WITHOUT_CLASSIFICATION	0.9995311149142821	WITHOUT_CLASSIFICATION	4.688850857177872E-4	DESIGN
// no big deal	WITHOUT_CLASSIFICATION	0.9997295504092686	WITHOUT_CLASSIFICATION	2.7044959073137107E-4	DESIGN
// no big deal	WITHOUT_CLASSIFICATION	0.9997295504092686	WITHOUT_CLASSIFICATION	2.7044959073137107E-4	DESIGN
// sybase driver (jConnect) throwing NPE here in certain // cases, but we'll just handle the general "unexpected" case	WITHOUT_CLASSIFICATION	0.9906030432664978	WITHOUT_CLASSIFICATION	0.009396956733502134	DESIGN
// see explanation above...	WITHOUT_CLASSIFICATION	0.9996260670829894	WITHOUT_CLASSIFICATION	3.739329170105632E-4	DESIGN
// If we are in the process of releasing, no sense // checking for aggressive-release possibility.	WITHOUT_CLASSIFICATION	0.9595817893981504	WITHOUT_CLASSIFICATION	0.04041821060184957	DESIGN
// EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9991367392007966	WITHOUT_CLASSIFICATION	8.632607992033527E-4	DESIGN
// ResultSet impl ("overridden") ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994416923445545	WITHOUT_CLASSIFICATION	5.583076554454295E-4	DESIGN
// ResultSet impl (delegated) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994416923445545	WITHOUT_CLASSIFICATION	5.583076554454295E-4	DESIGN
// refer to comment in StatefulPersistenceContext.addCollection()	WITHOUT_CLASSIFICATION	0.999974710488596	WITHOUT_CLASSIFICATION	2.5289511403945156E-5	DESIGN
// ConnectionManager.Callback implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997885627839851	WITHOUT_CLASSIFICATION	2.1143721601480202E-4	DESIGN
// Note : success = false, because we don't know the outcome of the transaction	WITHOUT_CLASSIFICATION	0.9999689325159751	WITHOUT_CLASSIFICATION	3.1067484024945943E-5	DESIGN
// we already have a callback registered; either a local // (org.hibernate.Transaction) transaction has accepted // callback responsibilities, or we have previously // registered a transaction synch.	WITHOUT_CLASSIFICATION	0.9997983813590137	WITHOUT_CLASSIFICATION	2.016186409864163E-4	DESIGN
// the configured transaction-factory says it only supports // local callback mode, so no sense attempting to register a // JTA Synchronization	WITHOUT_CLASSIFICATION	0.9997047077340862	WITHOUT_CLASSIFICATION	2.952922659138936E-4	DESIGN
// transactions marked for rollback-only cause some TM impls to throw exceptions	WITHOUT_CLASSIFICATION	0.9978130094232052	WITHOUT_CLASSIFICATION	0.00218699057679479	DESIGN
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994961501328029	WITHOUT_CLASSIFICATION	5.038498671970875E-4	DESIGN
//postInitialize() will be called after initialization	WITHOUT_CLASSIFICATION	0.999669799018176	WITHOUT_CLASSIFICATION	3.3020098182409046E-4	DESIGN
// cannot handle single quotes	WITHOUT_CLASSIFICATION	0.9995626707909574	WITHOUT_CLASSIFICATION	4.373292090426224E-4	DESIGN
// todo : for 4.0 //	WITHOUT_CLASSIFICATION	0.9995361332367768	WITHOUT_CLASSIFICATION	4.6386676322323527E-4	DESIGN
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9987279653079374	WITHOUT_CLASSIFICATION	0.0012720346920625488	DESIGN
// don't even bother trying to read further	WITHOUT_CLASSIFICATION	0.9979835594061154	WITHOUT_CLASSIFICATION	0.002016440593884595	DESIGN
// don't even bother trying to read any further	WITHOUT_CLASSIFICATION	0.9985299345406695	WITHOUT_CLASSIFICATION	0.0014700654593305367	DESIGN
// position cursor to the last row	WITHOUT_CLASSIFICATION	0.9999177638107754	WITHOUT_CLASSIFICATION	8.223618922470985E-5	DESIGN
// sequentially read the result set in reverse until we recognize // a change in the key value.  At that point, we are pointed at // the last physical sequential row for the logical row in which // we are interested in processing	WITHOUT_CLASSIFICATION	0.9999984853020221	WITHOUT_CLASSIFICATION	1.5146979778884732E-6	DESIGN
// Read backwards until we read past the first physical sequential // row with the key we are interested in loading	WITHOUT_CLASSIFICATION	0.9999997700991654	WITHOUT_CLASSIFICATION	2.29900834610948E-7	DESIGN
// Finally, read ahead one row to position result set cursor // at the first physical row we are interested in loading	WITHOUT_CLASSIFICATION	0.9999965357807655	WITHOUT_CLASSIFICATION	3.464219234447538E-6	DESIGN
// now get an existing proxy for each row element (if there is one)	WITHOUT_CLASSIFICATION	0.9999982520468018	WITHOUT_CLASSIFICATION	1.7479531981007983E-6	DESIGN
// force the proxy to resolve itself	WITHOUT_CLASSIFICATION	0.9986627544016184	WITHOUT_CLASSIFICATION	0.0013372455983816395	DESIGN
// this is equivalent to the old behavior...	WITHOUT_CLASSIFICATION	0.9992379373624459	WITHOUT_CLASSIFICATION	7.620626375540144E-4	DESIGN
//if null, owner will be retrieved from session	WITHOUT_CLASSIFICATION	0.999802480225215	WITHOUT_CLASSIFICATION	1.9751977478504429E-4	DESIGN
//final String queryString, 	WITHOUT_CLASSIFICATION	0.9976521776312609	WITHOUT_CLASSIFICATION	0.0023478223687391432	DESIGN
// if it was a reference to self, don't need to nullify // unless we are using native id generation, in which // case we definitely need to nullify	WITHOUT_CLASSIFICATION	0.9997986319013852	WITHOUT_CLASSIFICATION	2.0136809861480643E-4	DESIGN
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999169644894335	WITHOUT_CLASSIFICATION	8.303551056652571E-5	DESIGN
// in an effort to avoid concurrent-modification-exceptions (from // potential recursive calls back through here as a result of the // eventual call to PersistentCollection#endRead), we scan the // internal loadingCollections map for matches and store those matches // in a temp collection.  the temp collection is then used to "drive" // the #endRead processing.	WITHOUT_CLASSIFICATION	0.9994116493901471	WITHOUT_CLASSIFICATION	5.883506098527772E-4	DESIGN
//we can reuse it for each row	WITHOUT_CLASSIFICATION	0.9999054941165155	WITHOUT_CLASSIFICATION	9.450588348442213E-5	DESIGN
//can't reuse in this case	WITHOUT_CLASSIFICATION	0.9983070477572816	WITHOUT_CLASSIFICATION	0.0016929522427184779	DESIGN
// First we need to suspend any current JTA transaction and obtain // a JDBC connection	WITHOUT_CLASSIFICATION	0.9969983849717505	WITHOUT_CLASSIFICATION	0.003001615028249532	DESIGN
//getResultList(results);	WITHOUT_CLASSIFICATION	0.9976485066014736	WITHOUT_CLASSIFICATION	0.002351493398526296	DESIGN
//if we only returned one entity, query by key is more efficient	WITHOUT_CLASSIFICATION	0.9992962784108981	WITHOUT_CLASSIFICATION	7.037215891020589E-4	DESIGN
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9987867691142815	WITHOUT_CLASSIFICATION	0.0012132308857184134	DESIGN
// handle empty collection	WITHOUT_CLASSIFICATION	0.9952038554081255	WITHOUT_CLASSIFICATION	0.004796144591874394	DESIGN
// else no collection element, but also no owner	WITHOUT_CLASSIFICATION	0.9999628780656329	WITHOUT_CLASSIFICATION	3.712193436714107E-5	DESIGN
//handle empty collections	WITHOUT_CLASSIFICATION	0.9983863832000996	WITHOUT_CLASSIFICATION	0.0016136167999003487	DESIGN
// else this is not a collection initializer (and empty collections will // be detected by looking for the owner's identifier in the result set)	WITHOUT_CLASSIFICATION	0.9976864706461971	WITHOUT_CLASSIFICATION	0.002313529353803015	DESIGN
// validate() instances of Validatable	WITHOUT_CLASSIFICATION	0.9997248161807467	WITHOUT_CLASSIFICATION	2.7518381925321857E-4	DESIGN
// if we know there is exactly 1 row, we can skip. // it would be great if we could _always_ skip this; // it is a problem for <key-many-to-one>	WITHOUT_CLASSIFICATION	0.5617618618903449	WITHOUT_CLASSIFICATION	0.43823813810965506	DESIGN
// remove all collections for the entity from the session-level cache	WITHOUT_CLASSIFICATION	0.9951018074717906	WITHOUT_CLASSIFICATION	0.004898192528209375	DESIGN
//null version means the object is in the process of being loaded somewhere else in the ResultSet	WITHOUT_CLASSIFICATION	0.9998984451213702	WITHOUT_CLASSIFICATION	1.0155487862982159E-4	DESIGN
//problematic for <key-many-to-one>!	WITHOUT_CLASSIFICATION	0.9985951944044151	WITHOUT_CLASSIFICATION	0.001404805595584855	DESIGN
//use the id passed in	WITHOUT_CLASSIFICATION	0.9994407894089492	WITHOUT_CLASSIFICATION	5.592105910508809E-4	DESIGN
//do nothing	WITHOUT_CLASSIFICATION	0.9996625560843879	WITHOUT_CLASSIFICATION	3.3744391561202396E-4	DESIGN
// prefer re-generation of identity!	WITHOUT_CLASSIFICATION	0.9995984752179573	WITHOUT_CLASSIFICATION	4.015247820426566E-4	DESIGN
//no point doing this if NONE was requested	WITHOUT_CLASSIFICATION	0.9999384519528792	WITHOUT_CLASSIFICATION	6.154804712080982E-5	DESIGN
//If the object is already loaded, return the loaded one	WITHOUT_CLASSIFICATION	0.9994842881533827	WITHOUT_CLASSIFICATION	5.157118466173059E-4	DESIGN
//its already loaded so don't need to hydrate it	WITHOUT_CLASSIFICATION	0.9959157470319445	WITHOUT_CLASSIFICATION	0.004084252968055421	DESIGN
// cascade the refresh prior to refreshing this entity	WITHOUT_CLASSIFICATION	0.9986537015496333	WITHOUT_CLASSIFICATION	0.0013462984503667752	DESIGN
//the load() which takes an entity does not pass an entityName	WITHOUT_CLASSIFICATION	0.9999319561595875	WITHOUT_CLASSIFICATION	6.804384041252494E-5	DESIGN
//we only check the version when _upgrading_ lock modes	WITHOUT_CLASSIFICATION	0.9999930055272047	WITHOUT_CLASSIFICATION	6.994472795357976E-6	DESIGN
// look for a proxy	WITHOUT_CLASSIFICATION	0.9994919958796545	WITHOUT_CLASSIFICATION	5.080041203454075E-4	DESIGN
//we need to upgrade the lock mode to the mode requested	WITHOUT_CLASSIFICATION	0.9992893040288442	WITHOUT_CLASSIFICATION	7.106959711557073E-4	DESIGN
//its the given optional object	WITHOUT_CLASSIFICATION	0.9994221553953988	WITHOUT_CLASSIFICATION	5.778446046012265E-4	DESIGN
// instantiate a new instance	WITHOUT_CLASSIFICATION	0.9981782115296411	WITHOUT_CLASSIFICATION	0.0018217884703588645	DESIGN
//need to hydrate it.	WITHOUT_CLASSIFICATION	0.9978649186374818	WITHOUT_CLASSIFICATION	0.002135081362518198	DESIGN
// return a newly loaded object	WITHOUT_CLASSIFICATION	0.9986711499332428	WITHOUT_CLASSIFICATION	0.0013288500667572067	DESIGN
//will be ignored, using the existing Entry instead	WITHOUT_CLASSIFICATION	0.998281636372074	WITHOUT_CLASSIFICATION	0.0017183636279259167	DESIGN
// key is an entity involved with the operation performed by the listener; // value can be either a copy of the entity or the entity itself	WITHOUT_CLASSIFICATION	0.9999928652196253	WITHOUT_CLASSIFICATION	7.134780374726089E-6	DESIGN
//materialize associations (and initialize the object) later	WITHOUT_CLASSIFICATION	0.9541625411484523	WITHOUT_CLASSIFICATION	0.04583745885154777	DESIGN
// Get the persister for the _subclass_	WITHOUT_CLASSIFICATION	0.9997333618770956	WITHOUT_CLASSIFICATION	2.666381229044588E-4	DESIGN
// ok in normal Hibernate usage to delete a detached entity; JPA however // forbids it, thus this is a hook for HEM to affect this behavior	WITHOUT_CLASSIFICATION	0.9917786157457638	WITHOUT_CLASSIFICATION	0.008221384254236285	DESIGN
// the entry will be removed after the flush, and will no longer // override the stale snapshot // This is now handled by removeEntity() in EntityDeleteAction //persistenceContext.removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9930485833717492	WITHOUT_CLASSIFICATION	0.0069514166282508005	DESIGN
//addInitializedCollection(collection, persister, id);	WITHOUT_CLASSIFICATION	0.9986810053377232	WITHOUT_CLASSIFICATION	0.0013189946622768059	DESIGN
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9978670924811555	WITHOUT_CLASSIFICATION	0.002132907518844583	DESIGN
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9978670924811555	WITHOUT_CLASSIFICATION	0.002132907518844583	DESIGN
/*|| oj.getJoinable().consumesCollectionAlias() */	WITHOUT_CLASSIFICATION	0.9999961383426952	WITHOUT_CLASSIFICATION	3.8616573048238445E-6	DESIGN
// here we do not bother with the discriminator.	WITHOUT_CLASSIFICATION	0.9594672089796616	WITHOUT_CLASSIFICATION	0.04053279102033836	DESIGN
// Code to handle subclasses of topClass	WITHOUT_CLASSIFICATION	0.9982393069344594	WITHOUT_CLASSIFICATION	0.0017606930655406884	DESIGN
//woops we got an instance of another class hierarchy branch	WITHOUT_CLASSIFICATION	0.9989213492679895	WITHOUT_CLASSIFICATION	0.001078650732010521	DESIGN
// we can go straight to the first required row	WITHOUT_CLASSIFICATION	0.9998519437655239	WITHOUT_CLASSIFICATION	1.4805623447612616E-4	DESIGN
// we need to step through the rows one row at a time (slow)	WITHOUT_CLASSIFICATION	0.9929965313857189	WITHOUT_CLASSIFICATION	0.007003468614281093	DESIGN
// synchronized to avoid multi-thread access issues; defined as method synch to avoid // potential deadlock issues due to nature of code.	WITHOUT_CLASSIFICATION	0.9982878655399544	WITHOUT_CLASSIFICATION	0.001712134460045592	DESIGN
// Allows various loaders (ok mainly the QueryLoader :) to check // whether scrolling of their result set should be allowed. // // By default it is allowed.	WITHOUT_CLASSIFICATION	0.9998568736867689	WITHOUT_CLASSIFICATION	1.4312631323106528E-4	DESIGN
//before adding to collection!	WITHOUT_CLASSIFICATION	0.9976612925906772	WITHOUT_CLASSIFICATION	0.002338707409322907	DESIGN
// if the current depth is 0, the root thing being loaded is the // many-to-many collection itself.  Here, it is alright to use // an inner join...	WITHOUT_CLASSIFICATION	0.9994760191646782	WITHOUT_CLASSIFICATION	5.239808353217057E-4	DESIGN
//operations which cascade as far as the collection also cascade to collection elements	WITHOUT_CLASSIFICATION	0.9999776225677083	WITHOUT_CLASSIFICATION	2.237743229176262E-5	DESIGN
// simple, because we can't have a one-to-one or a collection  // (or even a property-ref) in a composite-element:	WITHOUT_CLASSIFICATION	0.998949026210028	WITHOUT_CLASSIFICATION	0.0010509737899720452	DESIGN
//a composite key	WITHOUT_CLASSIFICATION	0.9988866684931341	WITHOUT_CLASSIFICATION	0.0011133315068659042	DESIGN
// if no batch, use "foo = ? and bar = ?"	WITHOUT_CLASSIFICATION	0.9998941572855029	WITHOUT_CLASSIFICATION	1.0584271449704274E-4	DESIGN
//it must be a collection fetch	WITHOUT_CLASSIFICATION	0.9432223865211373	WITHOUT_CLASSIFICATION	0.05677761347886276	DESIGN
// needed later for many-to-many/filter application	WITHOUT_CLASSIFICATION	0.9982459751878482	WITHOUT_CLASSIFICATION	0.001754024812151847	DESIGN
/*&& etype.isReferenceToPrimaryKey()*/	WITHOUT_CLASSIFICATION	0.9987235365885122	WITHOUT_CLASSIFICATION	0.0012764634114877992	DESIGN
// it might still need to apply a collection ordering based on a // many-to-many defined order-by...	WITHOUT_CLASSIFICATION	0.7367474658323849	WITHOUT_CLASSIFICATION	0.2632525341676151	DESIGN
// if a composite key, use "( (foo = ? and bar = ?) or (foo = ? and bar = ?) )" for batching //TODO: unnecessary for databases with ANSI-style joins	WITHOUT_CLASSIFICATION	0.9334143991013498	WITHOUT_CLASSIFICATION	0.06658560089865014	DESIGN
// belong to other persister // belong to other persister	WITHOUT_CLASSIFICATION	0.9925732831423523	WITHOUT_CLASSIFICATION	0.007426716857647711	DESIGN
// we found it	WITHOUT_CLASSIFICATION	0.9991123961147101	WITHOUT_CLASSIFICATION	8.876038852898161E-4	DESIGN
//we can use an inner join for the many-to-many	WITHOUT_CLASSIFICATION	0.9997387161427405	WITHOUT_CLASSIFICATION	2.612838572595534E-4	DESIGN
//disable a join back to this same association	WITHOUT_CLASSIFICATION	0.9875219439403343	WITHOUT_CLASSIFICATION	0.01247805605966564	DESIGN
//NOTE: unlike all other Loaders, this one is NOT //      multithreaded, or cacheable!!	WITHOUT_CLASSIFICATION	0.9841971231501395	WITHOUT_CLASSIFICATION	0.01580287684986043	DESIGN
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999441679559643	WITHOUT_CLASSIFICATION	5.5832044035802724E-5	DESIGN
//root entity comes *last*	WITHOUT_CLASSIFICATION	0.9948092654896491	WITHOUT_CLASSIFICATION	0.00519073451035086	DESIGN
//deliberately ignore return value!	WITHOUT_CLASSIFICATION	0.9996112643030863	WITHOUT_CLASSIFICATION	3.887356969136473E-4	DESIGN
//alias may be null //EARLY EXIT	WITHOUT_CLASSIFICATION	0.9960920544923063	WITHOUT_CLASSIFICATION	0.003907945507693678	DESIGN
// if it is a compound path	WITHOUT_CLASSIFICATION	0.9996448252705558	WITHOUT_CLASSIFICATION	3.551747294442727E-4	DESIGN
// otherwise assume the parent is the the criteria that created us	WITHOUT_CLASSIFICATION	0.9984771156606452	WITHOUT_CLASSIFICATION	0.001522884339354845	DESIGN
// if its the root criteria, we are done	WITHOUT_CLASSIFICATION	0.9998925145844916	WITHOUT_CLASSIFICATION	1.074854155084751E-4	DESIGN
// otherwise, recurse	WITHOUT_CLASSIFICATION	0.9982559334459785	WITHOUT_CLASSIFICATION	0.001744066554021548	DESIGN
//the criteria instance	WITHOUT_CLASSIFICATION	0.9973177028252385	WITHOUT_CLASSIFICATION	0.002682297174761512	DESIGN
// the entity name	WITHOUT_CLASSIFICATION	0.9984237600523354	WITHOUT_CLASSIFICATION	0.001576239947664665	DESIGN
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9999792048306675	WITHOUT_CLASSIFICATION	2.0795169332548803E-5	DESIGN
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9999792048306675	WITHOUT_CLASSIFICATION	2.0795169332548803E-5	DESIGN
//it refers to an alias of a projection	WITHOUT_CLASSIFICATION	0.9998640824478221	WITHOUT_CLASSIFICATION	1.3591755217787555E-4	DESIGN
//should never happen, i think	WITHOUT_CLASSIFICATION	0.9949998943711812	WITHOUT_CLASSIFICATION	0.005000105628818798	DESIGN
// Detect discriminator values...	WITHOUT_CLASSIFICATION	0.9995217070916069	WITHOUT_CLASSIFICATION	4.782929083931745E-4	DESIGN
// Convert the string value into the proper type.	WITHOUT_CLASSIFICATION	0.9984841084120715	WITHOUT_CLASSIFICATION	0.001515891587928497	DESIGN
// and the qualifier is not the alias of this criteria //      -> check to see if we belong to some criteria other //          than the one that created us	WITHOUT_CLASSIFICATION	0.9998831779032685	WITHOUT_CLASSIFICATION	1.168220967315952E-4	DESIGN
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.9994139364441949	WITHOUT_CLASSIFICATION	5.860635558052671E-4	DESIGN
// Otherwise, this is an ordinary value.	WITHOUT_CLASSIFICATION	0.9997522971801136	WITHOUT_CLASSIFICATION	2.477028198863125E-4	DESIGN
// Currently *not* cachable if autodiscover types is in effect (e.g. "select * ...")	WITHOUT_CLASSIFICATION	0.9999793120120302	WITHOUT_CLASSIFICATION	2.0687987969844258E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.999679076858764	WITHOUT_CLASSIFICATION	3.2092314123604855E-4	DESIGN
// this is only needed (afaict) for ResultTransformer processing...	WITHOUT_CLASSIFICATION	0.9990641300272713	WITHOUT_CLASSIFICATION	9.358699727285821E-4	DESIGN
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9998402641739718	WITHOUT_CLASSIFICATION	1.5973582602823522E-4	DESIGN
// build an array with indices equal to the total number // of actual returns in the result Hibernate will return // for this query (scalars + non-scalars)	WITHOUT_CLASSIFICATION	0.9997853231184861	WITHOUT_CLASSIFICATION	2.1467688151387794E-4	DESIGN
// replace {....} with corresponding column aliases	WITHOUT_CLASSIFICATION	0.9997875666397309	WITHOUT_CLASSIFICATION	2.124333602690665E-4	DESIGN
// No additional open braces found in the string, append the // rest of the string in its entirty and quit this loop	WITHOUT_CLASSIFICATION	0.9999968986394966	WITHOUT_CLASSIFICATION	3.1013605034035172E-6	DESIGN
// apend everything up until the next encountered open brace	WITHOUT_CLASSIFICATION	0.9998694182956022	WITHOUT_CLASSIFICATION	1.305817043978739E-4	DESIGN
// it is a simple table alias {foo}	WITHOUT_CLASSIFICATION	0.9999809221598814	WITHOUT_CLASSIFICATION	1.907784011861114E-5	DESIGN
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9736707852559507	WITHOUT_CLASSIFICATION	0.026329214744049312	DESIGN
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9736707852559507	WITHOUT_CLASSIFICATION	0.026329214744049312	DESIGN
// The current alias is referencing the collection to be eagerly fetched	WITHOUT_CLASSIFICATION	0.9999766047244201	WITHOUT_CLASSIFICATION	2.339527557983432E-5	DESIGN
// it is a property reference {foo.bar}	WITHOUT_CLASSIFICATION	0.9983965370910799	WITHOUT_CLASSIFICATION	0.001603462908920161	DESIGN
// Possibly handle :something parameters for the query ?	WITHOUT_CLASSIFICATION	0.9999007686726944	WITHOUT_CLASSIFICATION	9.923132730563356E-5	DESIGN
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9998056459120788	WITHOUT_CLASSIFICATION	1.9435408792131044E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.999679076858764	WITHOUT_CLASSIFICATION	3.2092314123604855E-4	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.9980112233897486	WITHOUT_CLASSIFICATION	0.0019887766102513788	DESIGN
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9978670924811555	WITHOUT_CLASSIFICATION	0.002132907518844583	DESIGN
//	WITHOUT_CLASSIFICATION	0.999679076858764	WITHOUT_CLASSIFICATION	3.2092314123604855E-4	DESIGN
// Now, process the returns	WITHOUT_CLASSIFICATION	0.9995186322858267	WITHOUT_CLASSIFICATION	4.813677141732972E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.999679076858764	WITHOUT_CLASSIFICATION	3.2092314123604855E-4	DESIGN
// already been processed...	WITHOUT_CLASSIFICATION	0.998599642379988	WITHOUT_CLASSIFICATION	0.0014003576200119611	DESIGN
// already been processed...	WITHOUT_CLASSIFICATION	0.998599642379988	WITHOUT_CLASSIFICATION	0.0014003576200119611	DESIGN
// Make sure the owner alias is known...	WITHOUT_CLASSIFICATION	0.999979026050232	WITHOUT_CLASSIFICATION	2.0973949767965667E-5	DESIGN
// first, break down the returns into maps keyed by alias // so that role returns can be more easily resolved to their owners	WITHOUT_CLASSIFICATION	0.9995804985185731	WITHOUT_CLASSIFICATION	4.1950148142686123E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.999679076858764	WITHOUT_CLASSIFICATION	3.2092314123604855E-4	DESIGN
// If this return's alias has not been processed yet, do so b4 further processing of this return	WITHOUT_CLASSIFICATION	0.9999746873394278	WITHOUT_CLASSIFICATION	2.5312660572181357E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.999679076858764	WITHOUT_CLASSIFICATION	3.2092314123604855E-4	DESIGN
// for merging of versioned entities, we consider the version having // been changed only when: // 1) the two version values are different; //      *AND* // 2) The target actually represents database state! // // This second condition is a special case which allows // an entity to be merged during the same transaction // (though during a seperate operation) in which it was // originally persisted/saved	WITHOUT_CLASSIFICATION	0.9999998271808015	WITHOUT_CLASSIFICATION	1.7281919856771664E-7	DESIGN
// this is the second pass through on a merge op, so here we limit the // replacement to associations types (value types were already replaced // during the first pass)	WITHOUT_CLASSIFICATION	0.9860972210737408	WITHOUT_CLASSIFICATION	0.013902778926259152	DESIGN
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.9978670924811555	WITHOUT_CLASSIFICATION	0.002132907518844583	DESIGN
// cascade-save to collections AFTER the collection owner was saved	WITHOUT_CLASSIFICATION	0.9998148108027499	WITHOUT_CLASSIFICATION	1.8518919724996286E-4	DESIGN
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9990076219428988	WITHOUT_CLASSIFICATION	9.92378057101124E-4	DESIGN
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9996098404594456	WITHOUT_CLASSIFICATION	3.9015954055436765E-4	DESIGN
// currently only the Hibernate-supplied DbTimestampType is supported here	WITHOUT_CLASSIFICATION	0.9987557264027628	WITHOUT_CLASSIFICATION	0.0012442735972372522	DESIGN
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9469487920412919	WITHOUT_CLASSIFICATION	0.0530512079587081	DESIGN
// make a new one	WITHOUT_CLASSIFICATION	0.998999068807812	WITHOUT_CLASSIFICATION	0.0010009311921879301	DESIGN
// not so sure this is even valid subtree.  but if it was, it'd // represent two unrelated table references...	WITHOUT_CLASSIFICATION	0.9982420006508912	WITHOUT_CLASSIFICATION	0.0017579993491088548	DESIGN
// (NOT (GT a b) ) => (LE a b)	WITHOUT_CLASSIFICATION	0.9972589855181647	WITHOUT_CLASSIFICATION	0.002741014481835323	DESIGN
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9992851099042198	WITHOUT_CLASSIFICATION	7.148900957802429E-4	DESIGN
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9979744996192299	WITHOUT_CLASSIFICATION	0.0020255003807700387	DESIGN
//sqlResultTypes = selectClause.getSqlResultTypes();	WITHOUT_CLASSIFICATION	0.9996088335948893	WITHOUT_CLASSIFICATION	3.911664051107176E-4	DESIGN
//by default	WITHOUT_CLASSIFICATION	0.9986505773190982	WITHOUT_CLASSIFICATION	0.001349422680901757	DESIGN
// This is now handled earlier in this method.	WITHOUT_CLASSIFICATION	0.9391168027712254	WITHOUT_CLASSIFICATION	0.06088319722877459	DESIGN
// -- Loader implementation --	WITHOUT_CLASSIFICATION	0.9995172983173379	WITHOUT_CLASSIFICATION	4.8270168266198866E-4	DESIGN
// -- Loader overrides --	WITHOUT_CLASSIFICATION	0.9988541544401978	WITHOUT_CLASSIFICATION	0.0011458455598022757	DESIGN
// (NOT (IS_NULL a b) ) => (IS_NOT_NULL a b)	WITHOUT_CLASSIFICATION	0.9984622523787985	WITHOUT_CLASSIFICATION	0.0015377476212015788	DESIGN
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.9999376477317655	WITHOUT_CLASSIFICATION	6.235226823452341E-5	DESIGN
// meant to handle dynamic instantiation queries...	WITHOUT_CLASSIFICATION	0.9992558033593593	WITHOUT_CLASSIFICATION	7.441966406407893E-4	DESIGN
// --- Query translator methods ---	WITHOUT_CLASSIFICATION	0.9995529219482189	WITHOUT_CLASSIFICATION	4.47078051781186E-4	DESIGN
// -- Implementation private methods --	WITHOUT_CLASSIFICATION	0.9951332428465354	WITHOUT_CLASSIFICATION	0.004866757153464735	DESIGN
//deduplicate unique constraints sharing the same columns //this is needed by Hibernate Annotations since it creates automagically // unique constraints for the user	WITHOUT_CLASSIFICATION	0.9999988373157171	WITHOUT_CLASSIFICATION	1.1626842828638619E-6	DESIGN
// Try to find out the name of the primary key to create it as identity if the IdentityGenerator is used	WITHOUT_CLASSIFICATION	0.9974309892994777	WITHOUT_CLASSIFICATION	0.002569010700522288	DESIGN
// to support dialects that have their own identity data type	WITHOUT_CLASSIFICATION	0.9992684631616658	WITHOUT_CLASSIFICATION	7.315368383341156E-4	DESIGN
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.999999161638295	WITHOUT_CLASSIFICATION	8.383617048637498E-7	DESIGN
//used also for generation of FK names!	WITHOUT_CLASSIFICATION	0.993410862040164	WITHOUT_CLASSIFICATION	0.00658913795983601	DESIGN
//usually useless	WITHOUT_CLASSIFICATION	0.9950041523913652	WITHOUT_CLASSIFICATION	0.004995847608634799	DESIGN
// added this caching as I noticed that getType() is being called multiple times...	WITHOUT_CLASSIFICATION	0.993441089087198	WITHOUT_CLASSIFICATION	0.006558910912802034	DESIGN
//do not add unique constraint on DB not supporting unique and nullable columns	WITHOUT_CLASSIFICATION	0.9987973182532205	WITHOUT_CLASSIFICATION	0.001202681746779444	DESIGN
//for backward compatibility, disable this:	WITHOUT_CLASSIFICATION	0.9999592790518458	WITHOUT_CLASSIFICATION	4.072094815429016E-5	DESIGN
//may be final //may be final //may be final	WITHOUT_CLASSIFICATION	0.9993230821246144	WITHOUT_CLASSIFICATION	6.769178753855795E-4	DESIGN
//may be final	WITHOUT_CLASSIFICATION	0.9989049415477103	WITHOUT_CLASSIFICATION	0.0010950584522897687	DESIGN
// may be final	WITHOUT_CLASSIFICATION	0.9984816626500916	WITHOUT_CLASSIFICATION	0.0015183373499083716	DESIGN
// Custom SQL	WITHOUT_CLASSIFICATION	0.9991699867917279	WITHOUT_CLASSIFICATION	8.300132082720074E-4	DESIGN
//Primary key constraint	WITHOUT_CLASSIFICATION	0.9971311291279533	WITHOUT_CLASSIFICATION	0.002868870872046718	DESIGN
// the root of the incoming property path matched one // of the embedded composite identifier properties	WITHOUT_CLASSIFICATION	0.9999685037812288	WITHOUT_CLASSIFICATION	3.1496218771082546E-5	DESIGN
// ignore it...	WITHOUT_CLASSIFICATION	0.9988916830075019	WITHOUT_CLASSIFICATION	0.0011083169924981315	DESIGN
//flat recursive algorithm	WITHOUT_CLASSIFICATION	0.9829353401100085	WITHOUT_CLASSIFICATION	0.017064659889991472	DESIGN
//an identifier mapper => getKey will be included in the getNonDuplicatedPropertyIterator() //and checked later, so it needs to be excluded	WITHOUT_CLASSIFICATION	0.9993742965053881	WITHOUT_CLASSIFICATION	6.257034946119246E-4	DESIGN
//if the hibernate-mapping did not specify a schema/catalog, use the defaults //specified by properties - but note that if the schema/catalog were specified //in hibernate-mapping, or as params, they will already be initialized and //will override the values set here (they are in identifierGeneratorProperties)	WITHOUT_CLASSIFICATION	0.9999106377134878	WITHOUT_CLASSIFICATION	8.93622865122707E-5	DESIGN
//pass the entity-name, if not a collection-id	WITHOUT_CLASSIFICATION	0.9975296463939364	WITHOUT_CLASSIFICATION	0.0024703536060636444	DESIGN
// Custom SQL	WITHOUT_CLASSIFICATION	0.9991699867917279	WITHOUT_CLASSIFICATION	8.300132082720074E-4	DESIGN
//Primary key constraint	WITHOUT_CLASSIFICATION	0.9971311291279533	WITHOUT_CLASSIFICATION	0.002868870872046718	DESIGN
//pass the column name (a generated id almost always has a single column)	WITHOUT_CLASSIFICATION	0.9997654974306289	WITHOUT_CLASSIFICATION	2.3450256937097914E-4	DESIGN
//needed to satisfy KeyValue	WITHOUT_CLASSIFICATION	0.9974206788132075	WITHOUT_CLASSIFICATION	0.0025793211867925873	DESIGN
// empty means no scoping	WITHOUT_CLASSIFICATION	0.9997609423531034	WITHOUT_CLASSIFICATION	2.3905764689658677E-4	DESIGN
// index should be last column listed	WITHOUT_CLASSIFICATION	0.9999419271352235	WITHOUT_CLASSIFICATION	5.807286477652266E-5	DESIGN
//if it is a formula index, use the element columns in the PK	WITHOUT_CLASSIFICATION	0.9995479843017643	WITHOUT_CLASSIFICATION	4.520156982356936E-4	DESIGN
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns	WITHOUT_CLASSIFICATION	0.9987185849230048	WITHOUT_CLASSIFICATION	0.001281415076995118	DESIGN
/*ArrayList list = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999247798004075	WITHOUT_CLASSIFICATION	7.522019959246475E-5	DESIGN
// }	WITHOUT_CLASSIFICATION	0.9991994969000185	WITHOUT_CLASSIFICATION	8.005030999815647E-4	DESIGN
// no foreign key element of for a one-to-many	WITHOUT_CLASSIFICATION	0.9997314104010473	WITHOUT_CLASSIFICATION	2.6858959895270293E-4	DESIGN
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.7767133000760356	DESIGN	0.22328669992396444	WITHOUT_CLASSIFICATION
// the case of a foreign key to something other than the pk is handled in createPropertyRefConstraints	WITHOUT_CLASSIFICATION	0.9990460101722646	WITHOUT_CLASSIFICATION	9.539898277355705E-4	DESIGN
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.7767133000760356	DESIGN	0.22328669992396444	WITHOUT_CLASSIFICATION
// if the property mapping consists of all formulas,  // make it non-updateable	WITHOUT_CLASSIFICATION	0.999956995106668	WITHOUT_CLASSIFICATION	4.3004893331859086E-5	DESIGN
//columnUpdateability.length==0 ||	WITHOUT_CLASSIFICATION	0.999367013610909	WITHOUT_CLASSIFICATION	6.329863890910711E-4	DESIGN
// if the property mapping consists of all formulas,  // make it insertable	WITHOUT_CLASSIFICATION	0.999956995106668	WITHOUT_CLASSIFICATION	4.3004893331859086E-5	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995969488265921	WITHOUT_CLASSIFICATION	4.0305117340792824E-4	DESIGN
// expected type is intrinsic here...	WITHOUT_CLASSIFICATION	0.999748383881832	WITHOUT_CLASSIFICATION	2.5161611816799657E-4	DESIGN
//}	WITHOUT_CLASSIFICATION	0.9993330583642798	WITHOUT_CLASSIFICATION	6.669416357202982E-4	DESIGN
//}	WITHOUT_CLASSIFICATION	0.9993330583642798	WITHOUT_CLASSIFICATION	6.669416357202982E-4	DESIGN
//return memberPersister.getPropertyType(propertyName);	WITHOUT_CLASSIFICATION	0.9988721645163332	WITHOUT_CLASSIFICATION	0.0011278354836667466	DESIGN
//return memberPersister.toColumns(alias, propertyName);	WITHOUT_CLASSIFICATION	0.9988795075167246	WITHOUT_CLASSIFICATION	0.0011204924832754208	DESIGN
//return memberPersister.getType();	WITHOUT_CLASSIFICATION	0.9988721645163332	WITHOUT_CLASSIFICATION	0.0011278354836667466	DESIGN
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9977242551169848	WITHOUT_CLASSIFICATION	0.0022757448830152418	DESIGN
//	WITHOUT_CLASSIFICATION	0.999679076858764	WITHOUT_CLASSIFICATION	3.2092314123604855E-4	DESIGN
//instanceof AssociationType;	WITHOUT_CLASSIFICATION	0.9976485066014736	WITHOUT_CLASSIFICATION	0.002351493398526296	DESIGN
// we need to determine the best way to know that two joinables // represent a single many-to-many...	WITHOUT_CLASSIFICATION	0.5775549561318541	WITHOUT_CLASSIFICATION	0.42244504386814574	DESIGN
//strip leading ','	WITHOUT_CLASSIFICATION	0.9991434660378535	WITHOUT_CLASSIFICATION	8.565339621463744E-4	DESIGN
//public boolean isSubselectLoadable();	WITHOUT_CLASSIFICATION	0.9996034887694623	WITHOUT_CLASSIFICATION	3.965112305377296E-4	DESIGN
// KEY	WITHOUT_CLASSIFICATION	0.9997247427283911	WITHOUT_CLASSIFICATION	2.752572716089269E-4	DESIGN
//columns	WITHOUT_CLASSIFICATION	0.9992064434309498	WITHOUT_CLASSIFICATION	7.935565690501368E-4	DESIGN
//SQL statements	WITHOUT_CLASSIFICATION	0.9989350689598414	WITHOUT_CLASSIFICATION	0.0010649310401585896	DESIGN
//extra information about the element type	WITHOUT_CLASSIFICATION	0.9979866725065014	WITHOUT_CLASSIFICATION	0.0020133274934985763	DESIGN
//types	WITHOUT_CLASSIFICATION	0.9992064434309498	WITHOUT_CLASSIFICATION	7.935565690501368E-4	DESIGN
// custom sql	WITHOUT_CLASSIFICATION	0.9999612030730318	WITHOUT_CLASSIFICATION	3.879692696816641E-5	DESIGN
//private final String unquotedIdentifierColumnName;	WITHOUT_CLASSIFICATION	0.9997448932230999	WITHOUT_CLASSIFICATION	2.551067769000422E-4	DESIGN
// dynamic filters specifically for many-to-many inside the collection	WITHOUT_CLASSIFICATION	0.9997425039731231	WITHOUT_CLASSIFICATION	2.574960268768223E-4	DESIGN
// dynamic filters for the collection	WITHOUT_CLASSIFICATION	0.9995536779358218	WITHOUT_CLASSIFICATION	4.4632206417828245E-4	DESIGN
// NativeSQL: collect key column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999691106254209	WITHOUT_CLASSIFICATION	3.0889374579119494E-5	DESIGN
//unquotedKeyColumnNames = StringHelper.unQuote(keyColumnAliases);	WITHOUT_CLASSIFICATION	0.9996088335948893	WITHOUT_CLASSIFICATION	3.911664051107176E-4	DESIGN
//ELEMENT	WITHOUT_CLASSIFICATION	0.9992064434309498	WITHOUT_CLASSIFICATION	7.935565690501368E-4	DESIGN
// NativeSQL: collect element column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999217704261215	WITHOUT_CLASSIFICATION	7.822957387840164E-5	DESIGN
// INDEX AND ROW SELECT	WITHOUT_CLASSIFICATION	0.9992489557507417	WITHOUT_CLASSIFICATION	7.510442492582751E-4	DESIGN
// NativeSQL: collect index column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999917019712874	WITHOUT_CLASSIFICATION	8.298028712589133E-6	DESIGN
//unquotedIdentifierColumnName = identifierColumnAlias;	WITHOUT_CLASSIFICATION	0.9996088335948893	WITHOUT_CLASSIFICATION	3.911664051107176E-4	DESIGN
//unquotedIdentifierColumnName = null;	WITHOUT_CLASSIFICATION	0.9985774031244742	WITHOUT_CLASSIFICATION	0.0014225968755258295	DESIGN
//GENERATE THE SQL:	WITHOUT_CLASSIFICATION	0.9982674669683709	WITHOUT_CLASSIFICATION	0.0017325330316291276	DESIGN
// for non-arrays, we don't need to know the element class //elementType.returnedClass();	WITHOUT_CLASSIFICATION	0.9823157764761894	WITHOUT_CLASSIFICATION	0.01768422352381063	DESIGN
//not all classpersisters implement PropertyMapping!	WITHOUT_CLASSIFICATION	0.9917663656581531	WITHOUT_CLASSIFICATION	0.00823363434184686	DESIGN
// Handle any filters applied to this collection	WITHOUT_CLASSIFICATION	0.9898107015997523	WITHOUT_CLASSIFICATION	0.01018929840024775	DESIGN
// Handle any filters applied to this collection for many-to-many	WITHOUT_CLASSIFICATION	0.989160719419403	WITHOUT_CLASSIFICATION	0.010839280580596996	DESIGN
//if there is a user-specified loader, return that //TODO: filters!?	WITHOUT_CLASSIFICATION	0.9734549991684031	WITHOUT_CLASSIFICATION	0.026545000831596985	DESIGN
// Take care of any entities that might have // been evicted!	WITHOUT_CLASSIFICATION	0.9952348915611628	WITHOUT_CLASSIFICATION	0.004765108438837155	DESIGN
//strip leading ','	WITHOUT_CLASSIFICATION	0.9991434660378535	WITHOUT_CLASSIFICATION	8.565339621463744E-4	DESIGN
// Run a subquery loader	WITHOUT_CLASSIFICATION	0.9990055363052038	WITHOUT_CLASSIFICATION	9.94463694796117E-4	DESIGN
//needed by arrays	WITHOUT_CLASSIFICATION	0.9981975273111331	WITHOUT_CLASSIFICATION	0.0018024726888669481	DESIGN
//TODO: something with formulas...	WITHOUT_CLASSIFICATION	0.5484007773212162	DESIGN	0.4515992226787839	WITHOUT_CLASSIFICATION
//an assertion	WITHOUT_CLASSIFICATION	0.9973850145776203	WITHOUT_CLASSIFICATION	0.0026149854223797638	DESIGN
// Remove all the old entries	WITHOUT_CLASSIFICATION	0.9998077694496578	WITHOUT_CLASSIFICATION	1.922305503422921E-4	DESIGN
//create all the new entries	WITHOUT_CLASSIFICATION	0.9999523695004039	WITHOUT_CLASSIFICATION	4.763049959613293E-5	DESIGN
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9977242551169848	WITHOUT_CLASSIFICATION	0.0022757448830152418	DESIGN
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9977242551169848	WITHOUT_CLASSIFICATION	0.0022757448830152418	DESIGN
//delete all the deleted entries	WITHOUT_CLASSIFICATION	0.999934865787985	WITHOUT_CLASSIFICATION	6.513421201505343E-5	DESIGN
//insert all the new entries	WITHOUT_CLASSIFICATION	0.9999054518810713	WITHOUT_CLASSIFICATION	9.454811892872484E-5	DESIGN
//==elementType ??	WITHOUT_CLASSIFICATION	0.99844436706802	WITHOUT_CLASSIFICATION	0.00155563293197994	DESIGN
//update all the modified entries	WITHOUT_CLASSIFICATION	0.9999776000443921	WITHOUT_CLASSIFICATION	2.239995560794801E-5	DESIGN
//identifier collections not supported for 1-to-many	WITHOUT_CLASSIFICATION	0.9968302795651829	WITHOUT_CLASSIFICATION	0.0031697204348172347	DESIGN
// update removed rows fks to null	WITHOUT_CLASSIFICATION	0.9806612735285681	WITHOUT_CLASSIFICATION	0.019338726471431915	DESIGN
// will still be issued when it used to be null	WITHOUT_CLASSIFICATION	0.939195037859141	WITHOUT_CLASSIFICATION	0.060804962140858954	DESIGN
// now update all changed or added rows fks	WITHOUT_CLASSIFICATION	0.9999857933029185	WITHOUT_CLASSIFICATION	1.4206697081504186E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.999679076858764	WITHOUT_CLASSIFICATION	3.2092314123604855E-4	DESIGN
//use suffix for the entity columns	WITHOUT_CLASSIFICATION	0.9996222292118523	WITHOUT_CLASSIFICATION	3.77770788147628E-4	DESIGN
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9992291742689183	WITHOUT_CLASSIFICATION	7.708257310817677E-4	DESIGN
//private final String rootTableName;	WITHOUT_CLASSIFICATION	0.9997448932230999	WITHOUT_CLASSIFICATION	2.551067769000422E-4	DESIGN
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9978670924811555	WITHOUT_CLASSIFICATION	0.002132907518844583	DESIGN
//Custom SQL	WITHOUT_CLASSIFICATION	0.9979691211349762	WITHOUT_CLASSIFICATION	0.0020308788650239065	DESIGN
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9992291742689183	WITHOUT_CLASSIFICATION	7.708257310817677E-4	DESIGN
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.9995386686565636	WITHOUT_CLASSIFICATION	4.6133134343645136E-4	DESIGN
// This could also just be true all the time...	WITHOUT_CLASSIFICATION	0.9857657305964976	WITHOUT_CLASSIFICATION	0.014234269403502317	DESIGN
//chop the last union (all)	WITHOUT_CLASSIFICATION	0.9992813317353708	WITHOUT_CLASSIFICATION	7.186682646292234E-4	DESIGN
//TODO: check this....	WITHOUT_CLASSIFICATION	0.8992229589346491	WITHOUT_CLASSIFICATION	0.10077704106535097	DESIGN
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9978670924811555	WITHOUT_CLASSIFICATION	0.002132907518844583	DESIGN
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9994942515883151	WITHOUT_CLASSIFICATION	5.057484116849604E-4	DESIGN
// the closure of all properties in the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999315581845601	WITHOUT_CLASSIFICATION	6.844181543988287E-5	DESIGN
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9953463071481309	WITHOUT_CLASSIFICATION	0.004653692851869094	DESIGN
// subclass discrimination works by assigning particular // values to certain combinations of null primary key // values in the outer join using an SQL CASE	WITHOUT_CLASSIFICATION	0.9999466468429362	WITHOUT_CLASSIFICATION	5.335315706379247E-5	DESIGN
//MULTITABLES	WITHOUT_CLASSIFICATION	0.9978670924811555	WITHOUT_CLASSIFICATION	0.002132907518844583	DESIGN
// Custom sql	WITHOUT_CLASSIFICATION	0.9997375399860463	WITHOUT_CLASSIFICATION	2.624600139537756E-4	DESIGN
// subclass closure properties	WITHOUT_CLASSIFICATION	0.9988689516682984	WITHOUT_CLASSIFICATION	0.0011310483317016403	DESIGN
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9991367392007966	WITHOUT_CLASSIFICATION	8.632607992033527E-4	DESIGN
//( (Column) model.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9986810053377232	WITHOUT_CLASSIFICATION	0.0013189946622768059	DESIGN
//( (Column) sc.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9986810053377232	WITHOUT_CLASSIFICATION	0.0013189946622768059	DESIGN
// don't need subclass tables, because they can't appear in conditions	WITHOUT_CLASSIFICATION	0.9697065927171453	WITHOUT_CLASSIFICATION	0.03029340728285469	DESIGN
// special case where we need to force incloude all subclass joins	WITHOUT_CLASSIFICATION	0.9985811521024457	WITHOUT_CLASSIFICATION	0.001418847897554303	DESIGN
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9992291742689183	WITHOUT_CLASSIFICATION	7.708257310817677E-4	DESIGN
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9994942515883151	WITHOUT_CLASSIFICATION	5.057484116849604E-4	DESIGN
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9953463071481309	WITHOUT_CLASSIFICATION	0.004653692851869094	DESIGN
//get em on the second pass!	WITHOUT_CLASSIFICATION	0.9994875742758429	WITHOUT_CLASSIFICATION	5.124257241569955E-4	DESIGN
// now look up the object we are really interested in! // (this lets us correctly handle proxies and multi-row // or multi-column queries)	WITHOUT_CLASSIFICATION	0.999587611777149	WITHOUT_CLASSIFICATION	4.123882228508562E-4	DESIGN
// discriminator column	WITHOUT_CLASSIFICATION	0.9998042623713995	WITHOUT_CLASSIFICATION	1.957376286005502E-4	DESIGN
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9978670924811555	WITHOUT_CLASSIFICATION	0.002132907518844583	DESIGN
//private final Map propertyTableNumbersByName = new HashMap();	WITHOUT_CLASSIFICATION	0.9999781385064906	WITHOUT_CLASSIFICATION	2.18614935093542E-5	DESIGN
// CLASS + TABLE	WITHOUT_CLASSIFICATION	0.9995670474183818	WITHOUT_CLASSIFICATION	4.3295258161825915E-4	DESIGN
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9991367392007966	WITHOUT_CLASSIFICATION	8.632607992033527E-4	DESIGN
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9991484519356645	WITHOUT_CLASSIFICATION	8.515480643355451E-4	DESIGN
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9991367392007966	WITHOUT_CLASSIFICATION	8.632607992033527E-4	DESIGN
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.9995386686565636	WITHOUT_CLASSIFICATION	4.6133134343645136E-4	DESIGN
// JOINS	WITHOUT_CLASSIFICATION	0.999679076858764	WITHOUT_CLASSIFICATION	3.2092314123604855E-4	DESIGN
//propertyTableNumbersByName.put( prop.getName(), join );	WITHOUT_CLASSIFICATION	0.9997435239680529	WITHOUT_CLASSIFICATION	2.5647603194711363E-4	DESIGN
//Access cached SQL	WITHOUT_CLASSIFICATION	0.999275902176165	WITHOUT_CLASSIFICATION	7.240978238349082E-4	DESIGN
//figure out which tables need to be fetched	WITHOUT_CLASSIFICATION	0.9966980046004204	WITHOUT_CLASSIFICATION	0.0033019953995796813	DESIGN
//figure out which columns are needed	WITHOUT_CLASSIFICATION	0.9997209527041069	WITHOUT_CLASSIFICATION	2.790472958931475E-4	DESIGN
//figure out which formulas are needed	WITHOUT_CLASSIFICATION	0.9994626450674952	WITHOUT_CLASSIFICATION	5.373549325047397E-4	DESIGN
//render the SQL	WITHOUT_CLASSIFICATION	0.9988849274066253	WITHOUT_CLASSIFICATION	0.0011150725933746816	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995969488265921	WITHOUT_CLASSIFICATION	4.0305117340792824E-4	DESIGN
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.989877058973082	WITHOUT_CLASSIFICATION	0.010122941026917883	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994664167093965	WITHOUT_CLASSIFICATION	5.335832906034879E-4	DESIGN
// The optional SQL string defined in the where attribute	WITHOUT_CLASSIFICATION	0.9999828593134241	WITHOUT_CLASSIFICATION	1.7140686575909E-5	DESIGN
//information about lazy properties of this class	WITHOUT_CLASSIFICATION	0.9984905345475644	WITHOUT_CLASSIFICATION	0.0015094654524356644	DESIGN
//information about all properties in class hierarchy	WITHOUT_CLASSIFICATION	0.9998361651611701	WITHOUT_CLASSIFICATION	1.638348388299601E-4	DESIGN
//information about all columns/formulas in class hierarchy	WITHOUT_CLASSIFICATION	0.9993933756072797	WITHOUT_CLASSIFICATION	6.066243927202731E-4	DESIGN
// dynamic filters attached to the class-level	WITHOUT_CLASSIFICATION	0.9998260537073663	WITHOUT_CLASSIFICATION	1.7394629263372706E-4	DESIGN
// SQL strings	WITHOUT_CLASSIFICATION	0.9990079027859557	WITHOUT_CLASSIFICATION	9.920972140441647E-4	DESIGN
// for objects that came in via update()	WITHOUT_CLASSIFICATION	0.999982649913663	WITHOUT_CLASSIFICATION	1.735008633703035E-5	DESIGN
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9991484519356645	WITHOUT_CLASSIFICATION	8.515480643355451E-4	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994664167093965	WITHOUT_CLASSIFICATION	5.335832906034879E-4	DESIGN
// IDENTIFIER	WITHOUT_CLASSIFICATION	0.9991367392007966	WITHOUT_CLASSIFICATION	8.632607992033527E-4	DESIGN
// VERSION	WITHOUT_CLASSIFICATION	0.999679076858764	WITHOUT_CLASSIFICATION	3.2092314123604855E-4	DESIGN
//WHERE STRING	WITHOUT_CLASSIFICATION	0.9980960863490538	WITHOUT_CLASSIFICATION	0.0019039136509461986	DESIGN
// SUBCLASS PROPERTY CLOSURE	WITHOUT_CLASSIFICATION	0.999111717302701	WITHOUT_CLASSIFICATION	8.882826972989283E-4	DESIGN
//before add :-)	WITHOUT_CLASSIFICATION	0.9391260772820615	WITHOUT_CLASSIFICATION	0.060873922717938456	DESIGN
// Handle any filters applied to the class level	WITHOUT_CLASSIFICATION	0.9989727554222297	WITHOUT_CLASSIFICATION	0.0010272445777702133	DESIGN
// only one-to-one is lazy fetched	WITHOUT_CLASSIFICATION	0.9998556703887242	WITHOUT_CLASSIFICATION	1.443296112757538E-4	DESIGN
//note early exit here:	WITHOUT_CLASSIFICATION	0.9996805978871307	WITHOUT_CLASSIFICATION	3.194021128693695E-4	DESIGN
// object have been loaded with setReadOnly(true); HHH-2236	WITHOUT_CLASSIFICATION	0.9995651404177118	WITHOUT_CLASSIFICATION	4.348595822881644E-4	DESIGN
// NOTE: this assumes something about how propertySelectFragment is implemented by the subclass!	WITHOUT_CLASSIFICATION	0.9996509641270808	WITHOUT_CLASSIFICATION	3.49035872919237E-4	DESIGN
//strip leading ", "	WITHOUT_CLASSIFICATION	0.999657780629909	WITHOUT_CLASSIFICATION	3.422193700909751E-4	DESIGN
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999649417575175	WITHOUT_CLASSIFICATION	3.50582424825466E-5	DESIGN
//otherwise return the "hydrated" state (ie. associations are not resolved)	WITHOUT_CLASSIFICATION	0.9956089106296532	WITHOUT_CLASSIFICATION	0.004391089370346755	DESIGN
//null owner ok??	WITHOUT_CLASSIFICATION	0.9993914529754592	WITHOUT_CLASSIFICATION	6.085470245407428E-4	DESIGN
// null sql means that the only lazy properties // are shared PK one-to-one associations which are // handled differently in the Type#nullSafeGet code...	WITHOUT_CLASSIFICATION	0.9999896517030268	WITHOUT_CLASSIFICATION	1.0348296973306452E-5	DESIGN
// Create a new FROM node for the referenced class.	WITHOUT_CLASSIFICATION	0.9999261957844756	WITHOUT_CLASSIFICATION	7.380421552445709E-5	DESIGN
// the difficulty here is exactly what do we update in order to // force the version to be incremented in the db...	WITHOUT_CLASSIFICATION	0.6256989787700116	DESIGN	0.37430102122998843	WITHOUT_CLASSIFICATION
// performance op to avoid the array search	WITHOUT_CLASSIFICATION	0.9993406796190979	WITHOUT_CLASSIFICATION	6.593203809020643E-4	DESIGN
// properly handle property-ref-based associations	WITHOUT_CLASSIFICATION	0.9948071944196588	WITHOUT_CLASSIFICATION	0.005192805580341133	DESIGN
//Enable for HHH-440, which we don't like:	WITHOUT_CLASSIFICATION	0.9963687008793093	WITHOUT_CLASSIFICATION	0.0036312991206907683	DESIGN
// ALIASES	WITHOUT_CLASSIFICATION	0.999679076858764	WITHOUT_CLASSIFICATION	3.2092314123604855E-4	DESIGN
// aliases named identifier ( alias.idname )	WITHOUT_CLASSIFICATION	0.9936055787568666	WITHOUT_CLASSIFICATION	0.0063944212431333814	DESIGN
// aliases for composite-id's	WITHOUT_CLASSIFICATION	0.9992353409969787	WITHOUT_CLASSIFICATION	7.646590030213499E-4	DESIGN
// Fetch embedded identifiers propertynames from the "virtual" identifier component	WITHOUT_CLASSIFICATION	0.9997830537535807	WITHOUT_CLASSIFICATION	2.169462464193542E-4	DESIGN
// embedded composite ids ( alias.idname1, alias.idname2 )	WITHOUT_CLASSIFICATION	0.9527024648004988	WITHOUT_CLASSIFICATION	0.04729753519950118	DESIGN
// TODO: skip formulas?	WITHOUT_CLASSIFICATION	0.572123183497686	DESIGN	0.427876816502314	WITHOUT_CLASSIFICATION
//don't need filters for the static loaders	WITHOUT_CLASSIFICATION	0.9896430525627934	WITHOUT_CLASSIFICATION	0.010356947437206668	DESIGN
//do two passes, for collection property-ref!	WITHOUT_CLASSIFICATION	0.9973111452029729	WITHOUT_CLASSIFICATION	0.0026888547970271032	DESIGN
// select the correct row by either pk or rowid	WITHOUT_CLASSIFICATION	0.9999437162245267	WITHOUT_CLASSIFICATION	5.6283775473397054E-5	DESIGN
//TODO: eventually, rowIdName[j]	WITHOUT_CLASSIFICATION	0.8175421583858209	WITHOUT_CLASSIFICATION	0.18245784161417905	DESIGN
// this is a property of the table, which we are updating	WITHOUT_CLASSIFICATION	0.9786883136684414	WITHOUT_CLASSIFICATION	0.021311686331558607	DESIGN
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9998975469858151	WITHOUT_CLASSIFICATION	1.0245301418493258E-4	DESIGN
// we are using "all" or "dirty" property-based optimistic locking	WITHOUT_CLASSIFICATION	0.9997532772147738	WITHOUT_CLASSIFICATION	2.46722785226103E-4	DESIGN
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9179026881268226	WITHOUT_CLASSIFICATION	0.08209731187317734	DESIGN
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9938244745050084	WITHOUT_CLASSIFICATION	0.00617552549499158	DESIGN
// add normal properties	WITHOUT_CLASSIFICATION	0.99986078174905	WITHOUT_CLASSIFICATION	1.3921825094990144E-4	DESIGN
// add the discriminator	WITHOUT_CLASSIFICATION	0.9995961429046558	WITHOUT_CLASSIFICATION	4.038570953441398E-4	DESIGN
// more specifically : "? [op] datetime" //      1) if the operator is MINUS, the param needs to be of //          some datetime type //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.9801759038374774	WITHOUT_CLASSIFICATION	0.01982409616252257	DESIGN
// add normal properties	WITHOUT_CLASSIFICATION	0.99986078174905	WITHOUT_CLASSIFICATION	1.3921825094990144E-4	DESIGN
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9938244745050084	WITHOUT_CLASSIFICATION	0.00617552549499158	DESIGN
// add the discriminator	WITHOUT_CLASSIFICATION	0.9995961429046558	WITHOUT_CLASSIFICATION	4.038570953441398E-4	DESIGN
// add the primary key	WITHOUT_CLASSIFICATION	0.9998775913411707	WITHOUT_CLASSIFICATION	1.2240865882936404E-4	DESIGN
// delegate already handles PK columns	WITHOUT_CLASSIFICATION	0.9998271277370533	WITHOUT_CLASSIFICATION	1.7287226294672905E-4	DESIGN
// we can't batch joined inserts, *especially* not if it is an identity insert; // nor can we batch statements where the expectation is based on an output param	WITHOUT_CLASSIFICATION	0.999889187875627	WITHOUT_CLASSIFICATION	1.1081212437296118E-4	DESIGN
// Render the SQL query	WITHOUT_CLASSIFICATION	0.999654778836248	WITHOUT_CLASSIFICATION	3.452211637519786E-4	DESIGN
// Write the values of fields onto the prepared statement - we MUST use the state at the time the // insert was issued (cos of foreign key constraints). Not necessarily the object's current state	WITHOUT_CLASSIFICATION	0.9993290474248818	WITHOUT_CLASSIFICATION	6.709525751182785E-4	DESIGN
// TODO : shouldnt inserts be Expectations.NONE?	WITHOUT_CLASSIFICATION	0.5485965214280067	WITHOUT_CLASSIFICATION	0.45140347857199326	DESIGN
//don't bother trying to update, we know there is no row there yet	WITHOUT_CLASSIFICATION	0.9963831402236499	WITHOUT_CLASSIFICATION	0.0036168597763502025	DESIGN
//if all fields are null, we might need to delete existing row	WITHOUT_CLASSIFICATION	0.9977118468631062	WITHOUT_CLASSIFICATION	0.0022881531368937327	DESIGN
//there is probably a row there, so try to update //if no rows were updated, we will find out	WITHOUT_CLASSIFICATION	0.997980961012977	WITHOUT_CLASSIFICATION	0.0020190389870231224	DESIGN
//note: updates to joined tables can't be batched...	WITHOUT_CLASSIFICATION	0.9992663690180137	WITHOUT_CLASSIFICATION	7.336309819862226E-4	DESIGN
// starting index	WITHOUT_CLASSIFICATION	0.9998260286659972	WITHOUT_CLASSIFICATION	1.7397133400269037E-4	DESIGN
//Now write the values of fields onto the prepared statement	WITHOUT_CLASSIFICATION	0.9995984958181549	WITHOUT_CLASSIFICATION	4.0150418184512913E-4	DESIGN
// Write any appropriate versioning conditional parameters	WITHOUT_CLASSIFICATION	0.9996544943410106	WITHOUT_CLASSIFICATION	3.4550565898939584E-4	DESIGN
//Render the SQL query	WITHOUT_CLASSIFICATION	0.9991463915154907	WITHOUT_CLASSIFICATION	8.536084845093003E-4	DESIGN
// Do the key. The key is immutable so we can use the _current_ object state - not necessarily // the state at the time the delete was issued	WITHOUT_CLASSIFICATION	0.9966774162311733	WITHOUT_CLASSIFICATION	0.0033225837688267475	DESIGN
// We should use the _current_ object state (ie. after any updates that occurred during flush)	WITHOUT_CLASSIFICATION	0.9998515879821994	WITHOUT_CLASSIFICATION	1.4841201780069674E-4	DESIGN
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9937398800828555	WITHOUT_CLASSIFICATION	0.006260119917144534	DESIGN
//note: dirtyFields==null means we had no snapshot, and we couldn't get one using select-before-update //	WITHOUT_CLASSIFICATION	0.9997965026470227	WITHOUT_CLASSIFICATION	2.0349735297734833E-4	DESIGN
// more specifically : "datetime [op] ?" //      1) if the operator is MINUS, we really cannot determine //          the expected type as either another datetime or //          numeric would be valid //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.9992641202954712	WITHOUT_CLASSIFICATION	7.358797045287381E-4	DESIGN
// For the case of dynamic-update="true", we need to generate the UPDATE SQL	WITHOUT_CLASSIFICATION	0.9999202245596522	WITHOUT_CLASSIFICATION	7.977544034776787E-5	DESIGN
// don't need to check laziness (dirty checking algorithm handles that)	WITHOUT_CLASSIFICATION	0.6317017401484515	WITHOUT_CLASSIFICATION	0.3682982598515485	DESIGN
// For the case of dynamic-update="false", or no snapshot, we use the static SQL	WITHOUT_CLASSIFICATION	0.9999258411495037	WITHOUT_CLASSIFICATION	7.415885049631006E-5	DESIGN
// if not "get", then try "is"	WITHOUT_CLASSIFICATION	0.9994754056807744	WITHOUT_CLASSIFICATION	5.245943192255724E-4	DESIGN
// Now update only the tables with dirty properties (and the table with the version number)	WITHOUT_CLASSIFICATION	0.9999881756109776	WITHOUT_CLASSIFICATION	1.1824389022347627E-5	DESIGN
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999196287408753	WITHOUT_CLASSIFICATION	8.0371259124813E-5	DESIGN
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999196287408753	WITHOUT_CLASSIFICATION	8.0371259124813E-5	DESIGN
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9998669432015719	WITHOUT_CLASSIFICATION	1.3305679842811504E-4	DESIGN
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9998669432015719	WITHOUT_CLASSIFICATION	1.3305679842811504E-4	DESIGN
// not supported	WITHOUT_CLASSIFICATION	0.9975660387984802	WITHOUT_CLASSIFICATION	0.0024339612015198565	DESIGN
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9937398800828555	WITHOUT_CLASSIFICATION	0.006260119917144534	DESIGN
// we need to utilize dynamic delete statements	WITHOUT_CLASSIFICATION	0.9984851460343594	WITHOUT_CLASSIFICATION	0.0015148539656405563	DESIGN
// otherwise, utilize the static delete statements	WITHOUT_CLASSIFICATION	0.9996379018099014	WITHOUT_CLASSIFICATION	3.620981900985604E-4	DESIGN
//just a performance opt!	WITHOUT_CLASSIFICATION	0.9914312449581043	WITHOUT_CLASSIFICATION	0.008568755041895675	DESIGN
//just a performance opt!	WITHOUT_CLASSIFICATION	0.9914312449581043	WITHOUT_CLASSIFICATION	0.008568755041895675	DESIGN
//all joins join to the pk of the driving table	WITHOUT_CLASSIFICATION	0.9999035189920409	WITHOUT_CLASSIFICATION	9.648100795914331E-5	DESIGN
//notice that we skip the first table; it is the driving table!	WITHOUT_CLASSIFICATION	0.9995777504677847	WITHOUT_CLASSIFICATION	4.2224953221523095E-4	DESIGN
//we can inner join to superclass tables (the row MUST be there) //we can never inner join to subclass tables	WITHOUT_CLASSIFICATION	0.9998872090032916	WITHOUT_CLASSIFICATION	1.1279099670836211E-4	DESIGN
//skip the driving table	WITHOUT_CLASSIFICATION	0.9996289515036239	WITHOUT_CLASSIFICATION	3.710484963760549E-4	DESIGN
//get 'em in the right order (not that it really matters)	WITHOUT_CLASSIFICATION	0.8608738748142816	WITHOUT_CLASSIFICATION	0.13912612518571837	DESIGN
// here, we work under the following assumptions: //      ------------ valid cases -------------------------------------- //      1) datetime + {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      2) datetime - datetime : always results in a DOUBLE //      3) datetime - {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      ------------ invalid cases ------------------------------------ //      4) datetime + datetime //      5) {something other than datetime} - datetime //      6) datetime * {any type} //      7) datetime / {any type} //      8) {any type} / datetime // doing so allows us to properly handle parameters as either the left // or right side here in the majority of cases	WITHOUT_CLASSIFICATION	0.9991303214843078	WITHOUT_CLASSIFICATION	8.696785156921442E-4	DESIGN
//render the where and from parts	WITHOUT_CLASSIFICATION	0.9990149497519418	WITHOUT_CLASSIFICATION	9.850502480582073E-4	DESIGN
//we *could* regerate this inside each called method!	WITHOUT_CLASSIFICATION	0.9994337181554411	WITHOUT_CLASSIFICATION	5.662818445588409E-4	DESIGN
//now render the joins	WITHOUT_CLASSIFICATION	0.9969518317940843	WITHOUT_CLASSIFICATION	0.003048168205915562	DESIGN
// This will add the new from element to the origin.	WITHOUT_CLASSIFICATION	0.9985502907613001	WITHOUT_CLASSIFICATION	0.001449709238699937	DESIGN
//now render the select clause	WITHOUT_CLASSIFICATION	0.9991937480301291	WITHOUT_CLASSIFICATION	8.0625196987098E-4	DESIGN
//now tie it all together	WITHOUT_CLASSIFICATION	0.9992206148045121	WITHOUT_CLASSIFICATION	7.793851954879557E-4	DESIGN
//insert/update/delete SQL	WITHOUT_CLASSIFICATION	0.9977424921711777	WITHOUT_CLASSIFICATION	0.002257507828822372	DESIGN
//select SQL	WITHOUT_CLASSIFICATION	0.9987599986903994	WITHOUT_CLASSIFICATION	0.0012400013096005664	DESIGN
//no need to check laziness, dirty checking handles that	WITHOUT_CLASSIFICATION	0.9657125384720986	WITHOUT_CLASSIFICATION	0.03428746152790135	DESIGN
// Fully resolve the map reference, create implicit joins.	WITHOUT_CLASSIFICATION	0.9998378215164679	WITHOUT_CLASSIFICATION	1.6217848353213647E-4	DESIGN
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9899701364838621	WITHOUT_CLASSIFICATION	0.010029863516137943	DESIGN
// The basic implementation is to simply use the node's text	WITHOUT_CLASSIFICATION	0.9997521301093821	WITHOUT_CLASSIFICATION	2.4786989061797353E-4	DESIGN
// for dialects which are known to not support ANSI-SQL row-value-constructor syntax, // we should mutate the tree.	WITHOUT_CLASSIFICATION	0.9807828031789175	WITHOUT_CLASSIFICATION	0.019217196821082458	DESIGN
// Due to the complexity in initializing the SelectClause, do not generate one here. // If it is not found; simply return null... // // Also, do not cache since it gets generated well after we are created.	WITHOUT_CLASSIFICATION	0.9928769180818311	WITHOUT_CLASSIFICATION	0.007123081918168929	DESIGN
// check the version unsaved-value, if appropriate	WITHOUT_CLASSIFICATION	0.9999524030892564	WITHOUT_CLASSIFICATION	4.759691074362836E-5	DESIGN
// let this take precedence if defined, since it works for // assigned identifiers	WITHOUT_CLASSIFICATION	0.9964501212203467	WITHOUT_CLASSIFICATION	0.003549878779653328	DESIGN
// check the id unsaved-value	WITHOUT_CLASSIFICATION	0.9997743037734446	WITHOUT_CLASSIFICATION	2.2569622655550054E-4	DESIGN
// check to see if it is in the second-level cache	WITHOUT_CLASSIFICATION	0.9998396248671831	WITHOUT_CLASSIFICATION	1.6037513281677077E-4	DESIGN
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9986972527727238	WITHOUT_CLASSIFICATION	0.00130274722727612	DESIGN
// For property references generate <tablealias>.<columnname> as <projectionalias>	WITHOUT_CLASSIFICATION	0.9999439759081802	WITHOUT_CLASSIFICATION	5.602409181989055E-5	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994664167093965	WITHOUT_CLASSIFICATION	5.335832906034879E-4	DESIGN
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999649417575175	WITHOUT_CLASSIFICATION	3.50582424825466E-5	DESIGN
//force immediate execution of the insert	WITHOUT_CLASSIFICATION	0.9996453292809692	WITHOUT_CLASSIFICATION	3.546707190308946E-4	DESIGN
// If this from element is a collection and the path is a collection property (maxIndex, etc.) then // generate a sub-query.	WITHOUT_CLASSIFICATION	0.9997449053600531	WITHOUT_CLASSIFICATION	2.550946399469165E-4	DESIGN
// entities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9991902715967937	WITHOUT_CLASSIFICATION	8.097284032063068E-4	DESIGN
// collections ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995713020389857	WITHOUT_CLASSIFICATION	4.2869796101434684E-4	DESIGN
//cannot occur	WITHOUT_CLASSIFICATION	0.9917276485488656	WITHOUT_CLASSIFICATION	0.008272351451134287	DESIGN
//cannot occur	WITHOUT_CLASSIFICATION	0.9917276485488656	WITHOUT_CLASSIFICATION	0.008272351451134287	DESIGN
// only carry on if the method has no parameters	WITHOUT_CLASSIFICATION	0.9999988915205463	WITHOUT_CLASSIFICATION	1.1084794536674649E-6	DESIGN
// try "get"	WITHOUT_CLASSIFICATION	0.9997201158771797	WITHOUT_CLASSIFICATION	2.798841228203873E-4	DESIGN
// do nothing...	WITHOUT_CLASSIFICATION	0.9988169448926938	WITHOUT_CLASSIFICATION	0.0011830551073062398	DESIGN
// do nothing...	WITHOUT_CLASSIFICATION	0.9988169448926938	WITHOUT_CLASSIFICATION	0.0011830551073062398	DESIGN
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9998777863177071	WITHOUT_CLASSIFICATION	1.2221368229291003E-4	DESIGN
// this page intentionally left blank :)	WITHOUT_CLASSIFICATION	0.9993724183407403	WITHOUT_CLASSIFICATION	6.275816592597938E-4	DESIGN
// do not do anything	WITHOUT_CLASSIFICATION	0.9986043983367621	WITHOUT_CLASSIFICATION	0.0013956016632379878	DESIGN
//	WITHOUT_CLASSIFICATION	0.999679076858764	WITHOUT_CLASSIFICATION	3.2092314123604855E-4	DESIGN
// ignore	WITHOUT_CLASSIFICATION	0.999855661645043	WITHOUT_CLASSIFICATION	1.4433835495695786E-4	DESIGN
//cant instantiate	WITHOUT_CLASSIFICATION	0.9988903538950606	WITHOUT_CLASSIFICATION	0.0011096461049393787	DESIGN
//if it is a property of an embedded component, invoke on the "identifier"	WITHOUT_CLASSIFICATION	0.9996349208954232	WITHOUT_CLASSIFICATION	3.650791045768148E-4	DESIGN
// otherwise:	WITHOUT_CLASSIFICATION	0.9991367392007966	WITHOUT_CLASSIFICATION	8.632607992033527E-4	DESIGN
// skip finalize methods	WITHOUT_CLASSIFICATION	0.9993827330773396	WITHOUT_CLASSIFICATION	6.172669226604635E-4	DESIGN
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9995352540948033	WITHOUT_CLASSIFICATION	4.647459051966949E-4	DESIGN
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9995352540948033	WITHOUT_CLASSIFICATION	4.647459051966949E-4	DESIGN
// HHH-2481 make sure the callback gets cleared, otherwise the instance stays in a static thread local.	WITHOUT_CLASSIFICATION	0.8667618301705741	WITHOUT_CLASSIFICATION	0.13323816982942596	DESIGN
// while constructor is running	WITHOUT_CLASSIFICATION	0.9982877537674899	WITHOUT_CLASSIFICATION	0.0017122462325101018	DESIGN
// while constructor is running	WITHOUT_CLASSIFICATION	0.9982877537674899	WITHOUT_CLASSIFICATION	0.0017122462325101018	DESIGN
// note: interface is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9996718292450602	WITHOUT_CLASSIFICATION	3.281707549398987E-4	DESIGN
// interfaces // arguments	WITHOUT_CLASSIFICATION	0.9991396896194471	WITHOUT_CLASSIFICATION	8.603103805528792E-4	DESIGN
//TODO!	WITHOUT_CLASSIFICATION	0.9992064434309498	WITHOUT_CLASSIFICATION	7.935565690501368E-4	DESIGN
// Get the caller	WITHOUT_CLASSIFICATION	0.9998986368859936	WITHOUT_CLASSIFICATION	1.0136311400643447E-4	DESIGN
// Get the caller principals	WITHOUT_CLASSIFICATION	0.9998882256109388	WITHOUT_CLASSIFICATION	1.1177438906115165E-4	DESIGN
//private static final Alias DEFAULT_ALIAS = new Alias(10, null);	WITHOUT_CLASSIFICATION	0.9999101791072492	WITHOUT_CLASSIFICATION	8.982089275088005E-5	DESIGN
// Needed to bump this up to DotNode, because that is the only thing which currently // knows about the property-ref path in the correct format; it is either this, or // recurse over the DotNodes constructing the property path just like DotNode does // internally	WITHOUT_CLASSIFICATION	0.9542425778327679	WITHOUT_CLASSIFICATION	0.04575742216723206	DESIGN
//if the identifier is quoted, remove the quotes	WITHOUT_CLASSIFICATION	0.9994699811831078	WITHOUT_CLASSIFICATION	5.300188168922728E-4	DESIGN
//truncate the identifier to the max alias length, less the suffix length	WITHOUT_CLASSIFICATION	0.9999717532865309	WITHOUT_CLASSIFICATION	2.824671346917552E-5	DESIGN
//full joins are not supported.. yet!	WITHOUT_CLASSIFICATION	0.9948202491451916	WITHOUT_CLASSIFICATION	0.005179750854808342	DESIGN
// null is not considered the same type as Integer. //$NON-NLS-1 //$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9997385901612201	WITHOUT_CLASSIFICATION	2.614098387798698E-4	DESIGN
// the outerJoinsAfterWhere needs to come before where clause to properly // handle dynamic filters	WITHOUT_CLASSIFICATION	0.9942951120841639	WITHOUT_CLASSIFICATION	0.0057048879158361826	DESIGN
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9980280146047894	WITHOUT_CLASSIFICATION	0.0019719853952106354	DESIGN
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9980280146047894	WITHOUT_CLASSIFICATION	0.0019719853952106354	DESIGN
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9980280146047894	WITHOUT_CLASSIFICATION	0.0019719853952106354	DESIGN
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9980280146047894	WITHOUT_CLASSIFICATION	0.0019719853952106354	DESIGN
// strip off any leading 'and' token	WITHOUT_CLASSIFICATION	0.9999813162148554	WITHOUT_CLASSIFICATION	1.8683785144623484E-5	DESIGN
// if the condition is not already there...	WITHOUT_CLASSIFICATION	0.9972849681586796	WITHOUT_CLASSIFICATION	0.002715031841320374	DESIGN
//dontSpace.add("'");	WITHOUT_CLASSIFICATION	0.9976485066014736	WITHOUT_CLASSIFICATION	0.002351493398526296	DESIGN
//for MySQL	WITHOUT_CLASSIFICATION	0.9987426531539557	WITHOUT_CLASSIFICATION	0.0012573468460443345	DESIGN
//HashMap columnsUnique = new HashMap();	WITHOUT_CLASSIFICATION	0.9997741610420673	WITHOUT_CLASSIFICATION	2.258389579327379E-4	DESIGN
//null caused some problems	WITHOUT_CLASSIFICATION	0.995611721861396	WITHOUT_CLASSIFICATION	0.004388278138603954	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.9980112233897486	WITHOUT_CLASSIFICATION	0.0019887766102513788	DESIGN
//not sure if this would ever be null but wanted to be careful	WITHOUT_CLASSIFICATION	0.9997487912424672	WITHOUT_CLASSIFICATION	2.51208757532881E-4	DESIGN
//even on inverse="true"	WITHOUT_CLASSIFICATION	0.9977238204345732	WITHOUT_CLASSIFICATION	0.0022761795654268006	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.9980112233897486	WITHOUT_CLASSIFICATION	0.0019887766102513788	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.9980112233897486	WITHOUT_CLASSIFICATION	0.0019887766102513788	DESIGN
// If true then execute db updates, otherwise just generate and display updates	WITHOUT_CLASSIFICATION	0.9999940165408173	WITHOUT_CLASSIFICATION	5.983459182768723E-6	DESIGN
// we only release the connection	WITHOUT_CLASSIFICATION	0.9985523175956916	WITHOUT_CLASSIFICATION	0.0014476824043083974	DESIGN
// deprecated option...	WITHOUT_CLASSIFICATION	0.9693681106380286	WITHOUT_CLASSIFICATION	0.030631889361971497	DESIGN
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9993100678462565	WITHOUT_CLASSIFICATION	6.899321537434827E-4	DESIGN
//actually, this last test is probably unnecessary, since  //beforeCompletion() doesn't get called during rollback	WITHOUT_CLASSIFICATION	0.9989282232904965	WITHOUT_CLASSIFICATION	0.001071776709503541	DESIGN
// this one only really needed for badly-behaved applications! // (if the TransactionManager has a Sychronization registered, // its a noop) // (actually we do need it for downgrading locks)	WITHOUT_CLASSIFICATION	0.9960488640214722	WITHOUT_CLASSIFICATION	0.003951135978527829	DESIGN
// Create an DotNode AST for the path and resolve it.	WITHOUT_CLASSIFICATION	0.9999708190636781	WITHOUT_CLASSIFICATION	2.91809363217985E-5	DESIGN
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9993100678462565	WITHOUT_CLASSIFICATION	6.899321537434827E-4	DESIGN
//if we could not register a synchronization, //do the before/after completion callbacks //ourself (but we need to let jdbcContext //know that this is what we are going to //do, so it doesn't keep trying to register //synchronizations)	WITHOUT_CLASSIFICATION	0.9267261560910681	DESIGN	0.07327384390893191	WITHOUT_CLASSIFICATION
// swallow it, and continue to roll back JTA transaction	WITHOUT_CLASSIFICATION	0.9954881267390995	WITHOUT_CLASSIFICATION	0.0045118732609005655	DESIGN
// so the transaction is already rolled back, by JTA spec	WITHOUT_CLASSIFICATION	0.9999319380141898	WITHOUT_CLASSIFICATION	6.8061985810276E-5	DESIGN
// this method is a noop if there is a Synchronization!	WITHOUT_CLASSIFICATION	0.9985060932656935	WITHOUT_CLASSIFICATION	0.0014939067343065304	DESIGN
// two conditions where we need to transform this to a theta-join syntax: //      1) 'elem' is the "root from-element" in correlated subqueries //      2) The DotNode.useThetaStyleImplicitJoins has been set to true //          and 'elem' represents an implicit join	WITHOUT_CLASSIFICATION	0.9975931346552168	WITHOUT_CLASSIFICATION	0.0024068653447831437	DESIGN
// WebSphere, however, is not a sane JEE/JTA container...	WITHOUT_CLASSIFICATION	0.9887075451274573	WITHOUT_CLASSIFICATION	0.01129245487254271	DESIGN
// for sane JEE/JTA containers, the transaction itself functions as its identifier...	WITHOUT_CLASSIFICATION	0.9995725441083418	WITHOUT_CLASSIFICATION	4.2745589165812855E-4	DESIGN
//swallow, the transaction was finished	WITHOUT_CLASSIFICATION	0.9993949843234566	WITHOUT_CLASSIFICATION	6.05015676543338E-4	DESIGN
// all AliasToEntityMapResultTransformer are considered equal ~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999777500671735	WITHOUT_CLASSIFICATION	2.2249932826474075E-5	DESIGN
// Create the join element under the from element.	WITHOUT_CLASSIFICATION	0.9999370303175091	WITHOUT_CLASSIFICATION	6.29696824908859E-5	DESIGN
// all DistinctRootEntityResultTransformer are considered equal ~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999777500671735	WITHOUT_CLASSIFICATION	2.2249932826474075E-5	DESIGN
// map of EntityMode -> Tuplizer	WITHOUT_CLASSIFICATION	0.9999732050942824	WITHOUT_CLASSIFICATION	2.6794905717543182E-5	DESIGN
// this is a virtual id property...	WITHOUT_CLASSIFICATION	0.9946083590876675	WITHOUT_CLASSIFICATION	0.005391640912332408	DESIGN
//this one needed only for guessEntityMode()	WITHOUT_CLASSIFICATION	0.9997895917859714	WITHOUT_CLASSIFICATION	2.104082140287259E-4	DESIGN
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9996719425153034	WITHOUT_CLASSIFICATION	3.280574846965633E-4	DESIGN
// todo : move this to SF per HHH-3517; also see HHH-1907 and ComponentMetamodel	WITHOUT_CLASSIFICATION	0.9075028830964932	WITHOUT_CLASSIFICATION	0.09249711690350684	DESIGN
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999469688310769	WITHOUT_CLASSIFICATION	5.3031168923139224E-5	DESIGN
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9998030516956307	WITHOUT_CLASSIFICATION	1.9694830436932262E-4	DESIGN
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9997463514961177	WITHOUT_CLASSIFICATION	2.5364850388226565E-4	DESIGN
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9998030516956307	WITHOUT_CLASSIFICATION	1.9694830436932262E-4	DESIGN
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9998929484773402	WITHOUT_CLASSIFICATION	1.0705152265977996E-4	DESIGN
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999768177633628	WITHOUT_CLASSIFICATION	2.318223663721357E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.999679076858764	WITHOUT_CLASSIFICATION	3.2092314123604855E-4	DESIGN
// cached for efficiency...	WITHOUT_CLASSIFICATION	0.9996417330264529	WITHOUT_CLASSIFICATION	3.582669735472288E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.999679076858764	WITHOUT_CLASSIFICATION	3.2092314123604855E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.999679076858764	WITHOUT_CLASSIFICATION	3.2092314123604855E-4	DESIGN
//it was not embedded, so the argument is just an id	WITHOUT_CLASSIFICATION	0.9996567960361599	WITHOUT_CLASSIFICATION	3.4320396384013833E-4	DESIGN
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999469688310769	WITHOUT_CLASSIFICATION	5.3031168923139224E-5	DESIGN
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9997463514961177	WITHOUT_CLASSIFICATION	2.5364850388226565E-4	DESIGN
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9998929484773402	WITHOUT_CLASSIFICATION	1.0705152265977996E-4	DESIGN
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9987060667874921	WITHOUT_CLASSIFICATION	0.0012939332125079992	DESIGN
//return currentId;	WITHOUT_CLASSIFICATION	0.9981759949315403	WITHOUT_CLASSIFICATION	0.0018240050684597505	DESIGN
//reset the id	WITHOUT_CLASSIFICATION	0.9983891247727199	WITHOUT_CLASSIFICATION	0.0016108752272800545	DESIGN
//	WITHOUT_CLASSIFICATION	0.999679076858764	WITHOUT_CLASSIFICATION	3.2092314123604855E-4	DESIGN
//reset the version	WITHOUT_CLASSIFICATION	0.9993735353459573	WITHOUT_CLASSIFICATION	6.26464654042742E-4	DESIGN
// the default is to simply not lazy fetch properties for now...	WITHOUT_CLASSIFICATION	0.9871535059802709	WITHOUT_CLASSIFICATION	0.01284649401972913	DESIGN
// Add the second join, the one that ends in the destination table.	WITHOUT_CLASSIFICATION	0.999926275842124	WITHOUT_CLASSIFICATION	7.372415787590059E-5	DESIGN
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9899701364838621	WITHOUT_CLASSIFICATION	0.010029863516137943	DESIGN
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999768177633628	WITHOUT_CLASSIFICATION	2.318223663721357E-5	DESIGN
// determine the id getter and setter methods from the proxy interface (if any) // determine all interfaces needed by the resulting proxy	WITHOUT_CLASSIFICATION	0.9999617404646882	WITHOUT_CLASSIFICATION	3.825953531173472E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.999679076858764	WITHOUT_CLASSIFICATION	3.2092314123604855E-4	DESIGN
//not final because proxy factory creation can fail	WITHOUT_CLASSIFICATION	0.9999611512735734	WITHOUT_CLASSIFICATION	3.8848726426466504E-5	DESIGN
// superclass entity-name	WITHOUT_CLASSIFICATION	0.9992155603732038	WITHOUT_CLASSIFICATION	7.844396267962187E-4	DESIGN
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9899701364838621	WITHOUT_CLASSIFICATION	0.010029863516137943	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994664167093965	WITHOUT_CLASSIFICATION	5.335832906034879E-4	DESIGN
//init the aliases, after initing the constructornode	WITHOUT_CLASSIFICATION	0.9996978689802285	WITHOUT_CLASSIFICATION	3.02131019771534E-4	DESIGN
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9899701364838621	WITHOUT_CLASSIFICATION	0.010029863516137943	DESIGN
// legacy behavior (with no abstract attribute specified)	WITHOUT_CLASSIFICATION	0.9992521212100218	WITHOUT_CLASSIFICATION	7.478787899781344E-4	DESIGN
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999000557086696	WITHOUT_CLASSIFICATION	9.994429133043957E-5	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994664167093965	WITHOUT_CLASSIFICATION	5.335832906034879E-4	DESIGN
//note: this affects the return value!	WITHOUT_CLASSIFICATION	0.9972937178436841	WITHOUT_CLASSIFICATION	0.0027062821563159306	DESIGN
// Need to account for allowable '_' within the variant	WITHOUT_CLASSIFICATION	0.9997934451910075	WITHOUT_CLASSIFICATION	2.0655480899235893E-4	DESIGN
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.999868292063737	WITHOUT_CLASSIFICATION	1.317079362629549E-4	DESIGN
// Collection Types:	WITHOUT_CLASSIFICATION	0.9988266921803343	WITHOUT_CLASSIFICATION	0.001173307819665774	DESIGN
// convenience methods relating to operations across arrays of types...	WITHOUT_CLASSIFICATION	0.9999054183188592	WITHOUT_CLASSIFICATION	9.458168114090123E-5	DESIGN
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9993740195361682	WITHOUT_CLASSIFICATION	6.259804638317937E-4	DESIGN
//Blobs are ignored by merge()	WITHOUT_CLASSIFICATION	0.999502790049274	WITHOUT_CLASSIFICATION	4.972099507260364E-4	DESIGN
//value is the entity name	WITHOUT_CLASSIFICATION	0.995076563718806	WITHOUT_CLASSIFICATION	0.0049234362811938995	DESIGN
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9978670924811555	WITHOUT_CLASSIFICATION	0.002132907518844583	DESIGN
// generate id select fragment and then property select fragment for // each expression, just like generateSelectFragments().	WITHOUT_CLASSIFICATION	0.9998627238276941	WITHOUT_CLASSIFICATION	1.3727617230587224E-4	DESIGN
//TODO!	WITHOUT_CLASSIFICATION	0.9992064434309498	WITHOUT_CLASSIFICATION	7.935565690501368E-4	DESIGN
//xml is the entity name	WITHOUT_CLASSIFICATION	0.9947780269213318	WITHOUT_CLASSIFICATION	0.005221973078668315	DESIGN
//special case ... this is the leaf of the containment graph, even though not immutable	WITHOUT_CLASSIFICATION	0.7579440707722046	WITHOUT_CLASSIFICATION	0.24205592922779542	DESIGN
//tolerates nulls	WITHOUT_CLASSIFICATION	0.9989762324549872	WITHOUT_CLASSIFICATION	0.001023767545012766	DESIGN
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9976485066014736	WITHOUT_CLASSIFICATION	0.002351493398526296	DESIGN
// metaType is assumed to be single-column type	WITHOUT_CLASSIFICATION	0.9987251388504259	WITHOUT_CLASSIFICATION	0.0012748611495741224	DESIGN
// Get all the select expressions (that we just generated) and render the select.	WITHOUT_CLASSIFICATION	0.9998909639156748	WITHOUT_CLASSIFICATION	1.0903608432522564E-4	DESIGN
// Look through the FromElement's children to find any collections of values that should be fetched...	WITHOUT_CLASSIFICATION	0.9995950072857804	WITHOUT_CLASSIFICATION	4.0499271421956567E-4	DESIGN
//return AssociationType.FOREIGN_KEY_TO_PARENT; //this is better but causes a transient object exception...	WITHOUT_CLASSIFICATION	0.7804635729979401	WITHOUT_CLASSIFICATION	0.21953642700205986	DESIGN
// Use the lower case function name. // Remember whether we're in a SELECT clause or not.	WITHOUT_CLASSIFICATION	0.9993629464183846	WITHOUT_CLASSIFICATION	6.370535816153526E-4	DESIGN
// IDENT might be the name of a class.	WITHOUT_CLASSIFICATION	0.9836236618996427	WITHOUT_CLASSIFICATION	0.016376338100357355	DESIGN
//TODO!!!	WITHOUT_CLASSIFICATION	0.9992064434309498	WITHOUT_CLASSIFICATION	7.935565690501368E-4	DESIGN
//st.setTimestamp( index,  new Timestamp( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9999071705584455	WITHOUT_CLASSIFICATION	9.282944155459543E-5	DESIGN
//st.setDate( index,  new Date( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9999071705584455	WITHOUT_CLASSIFICATION	9.282944155459543E-5	DESIGN
// both are Timestamps	WITHOUT_CLASSIFICATION	0.9983451685597078	WITHOUT_CLASSIFICATION	0.0016548314402922662	DESIGN
// at least one is a plain old Date	WITHOUT_CLASSIFICATION	0.9990818599975723	WITHOUT_CLASSIFICATION	9.181400024277042E-4	DESIGN
//noop	WITHOUT_CLASSIFICATION	0.9997391175369804	WITHOUT_CLASSIFICATION	2.6088246301966784E-4	DESIGN
// if the corresponding SQL value is NULL, the reader we got is NULL as well	WITHOUT_CLASSIFICATION	0.9999880821057586	WITHOUT_CLASSIFICATION	1.1917894241498131E-5	DESIGN
// Fetch Reader content up to the end - and put characters in a StringBuffer	WITHOUT_CLASSIFICATION	0.9995771267505226	WITHOUT_CLASSIFICATION	4.2287324947734367E-4	DESIGN
// Return StringBuffer content as a large String	WITHOUT_CLASSIFICATION	0.9997945930242202	WITHOUT_CLASSIFICATION	2.054069757798536E-4	DESIGN
//or Types.LONGVARCHAR?	WITHOUT_CLASSIFICATION	0.9976824027526597	WITHOUT_CLASSIFICATION	0.002317597247340241	DESIGN
//Not called at runtime so doesn't matter if its slow :)	WITHOUT_CLASSIFICATION	0.9997870031433483	WITHOUT_CLASSIFICATION	2.1299685665159386E-4	DESIGN
//TODO	WITHOUT_CLASSIFICATION	0.5827003019761797	DESIGN	0.4172996980238203	WITHOUT_CLASSIFICATION
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9998759974363418	WITHOUT_CLASSIFICATION	1.2400256365812916E-4	DESIGN
//different nullability rules for pk/fk	WITHOUT_CLASSIFICATION	0.9995886737512477	WITHOUT_CLASSIFICATION	4.1132624875221034E-4	DESIGN
//cache this	WITHOUT_CLASSIFICATION	0.987917242037659	WITHOUT_CLASSIFICATION	0.01208275796234097	DESIGN
//only really need new array during semiresolve!	WITHOUT_CLASSIFICATION	0.9967686170814732	WITHOUT_CLASSIFICATION	0.0032313829185266632	DESIGN
// Forcefully remove leading ands from where fragments; the grammar will // handle adding them	WITHOUT_CLASSIFICATION	0.9993856744642845	WITHOUT_CLASSIFICATION	6.14325535715482E-4	DESIGN
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9978670924811555	WITHOUT_CLASSIFICATION	0.002132907518844583	DESIGN
// Create a new FILTERS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999407298715446	WITHOUT_CLASSIFICATION	5.9270128455410954E-5	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994664167093965	WITHOUT_CLASSIFICATION	5.335832906034879E-4	DESIGN
//public Object instantiate(Object parent, SessionImplementor session) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9993702107794715	WITHOUT_CLASSIFICATION	6.297892205285249E-4	DESIGN
//nothing to do	WITHOUT_CLASSIFICATION	0.9963717505507286	WITHOUT_CLASSIFICATION	0.0036282494492715207	DESIGN
//nothing to do	WITHOUT_CLASSIFICATION	0.9963717505507286	WITHOUT_CLASSIFICATION	0.0036282494492715207	DESIGN
// VersionType impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //      Note : simply returns null for seed() and next() as the only known //      application of binary types for versioning is for use with the //      TIMESTAMP datatype supported by Sybase and SQL Server, which //      are completely db-generated values...	WITHOUT_CLASSIFICATION	0.9999926878384728	WITHOUT_CLASSIFICATION	7.312161527112839E-6	DESIGN
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9993740195361682	WITHOUT_CLASSIFICATION	6.259804638317937E-4	DESIGN
//not really necessary, I guess...	WITHOUT_CLASSIFICATION	0.9789604598578175	WITHOUT_CLASSIFICATION	0.021039540142182473	DESIGN
//Clobs are ignored by merge() operation	WITHOUT_CLASSIFICATION	0.9999750941025339	WITHOUT_CLASSIFICATION	2.490589746614592E-5	DESIGN
// we do not have to worry about queued additions to uninitialized // collections, since they can only occur for inverse collections!	WITHOUT_CLASSIFICATION	0.9999642567292336	WITHOUT_CLASSIFICATION	3.574327076644896E-5	DESIGN
// collections cannot be compared	WITHOUT_CLASSIFICATION	0.9998860394173017	WITHOUT_CLASSIFICATION	1.1396058269833147E-4	DESIGN
//remember the uk value	WITHOUT_CLASSIFICATION	0.9991453624491102	WITHOUT_CLASSIFICATION	8.546375508898229E-4	DESIGN
//NOOP	WITHOUT_CLASSIFICATION	0.9992527235150742	WITHOUT_CLASSIFICATION	7.472764849257753E-4	DESIGN
//processCollectionProperty(token, q.getCollectionPersister(collectionRole), collectionName);	WITHOUT_CLASSIFICATION	0.9986810053377232	WITHOUT_CLASSIFICATION	0.0013189946622768059	DESIGN
//we must use the "remembered" uk value, since it is  //not available from the EntityEntry during assembly	WITHOUT_CLASSIFICATION	0.999918408469096	WITHOUT_CLASSIFICATION	8.159153090407283E-5	DESIGN
// collections don't dirty an unversioned parent entity	WITHOUT_CLASSIFICATION	0.993665387484423	WITHOUT_CLASSIFICATION	0.0063346125155769525	DESIGN
// return false;	WITHOUT_CLASSIFICATION	0.9990555613683149	WITHOUT_CLASSIFICATION	9.444386316851735E-4	DESIGN
// This just handles a particular case of component // projection, perhaps get rid of it and throw an exception	WITHOUT_CLASSIFICATION	0.9966724076273205	WITHOUT_CLASSIFICATION	0.0033275923726794948	DESIGN
//NOTE: we avoid joining to the next table if the named property is just the foreign key value	WITHOUT_CLASSIFICATION	0.9998898041446113	WITHOUT_CLASSIFICATION	1.1019585538870309E-4	DESIGN
// the key is the owning entity itself, so get the ID from the key	WITHOUT_CLASSIFICATION	0.9998914135242811	WITHOUT_CLASSIFICATION	1.0858647571884186E-4	DESIGN
// if the original is a PersistentCollection, and that original // was not flagged as dirty, then reset the target's dirty flag // here after the copy operation. // </p> // One thing to be careful of here is a "bare" original collection // in which case we should never ever ever reset the dirty flag // on the target because we simply do not know...	WITHOUT_CLASSIFICATION	0.999986644172859	WITHOUT_CLASSIFICATION	1.3355827141050727E-5	DESIGN
//ignore subselect keywords	WITHOUT_CLASSIFICATION	0.9985332092937914	WITHOUT_CLASSIFICATION	0.0014667907062085527	DESIGN
// copy elements into newly empty target collection	WITHOUT_CLASSIFICATION	0.9999380763270704	WITHOUT_CLASSIFICATION	6.19236729295596E-5	DESIGN
// for a null target, or a target which is the same as the original, we // need to put the merged elements in a new collection	WITHOUT_CLASSIFICATION	0.9999841059594602	WITHOUT_CLASSIFICATION	1.589404053982892E-5	DESIGN
// by default just use an unanticipated capacity since we don't // know how to extract the capacity to use from original here...	WITHOUT_CLASSIFICATION	0.9996880743879313	WITHOUT_CLASSIFICATION	3.119256120686506E-4	DESIGN
// get the elements back into the target making sure to handle dirty flag	WITHOUT_CLASSIFICATION	0.9999723694664177	WITHOUT_CLASSIFICATION	2.7630533582414884E-5	DESIGN
// check if collection is currently being loaded	WITHOUT_CLASSIFICATION	0.9994877051781206	WITHOUT_CLASSIFICATION	5.122948218794547E-4	DESIGN
// check if it is already completely loaded, but unowned	WITHOUT_CLASSIFICATION	0.9998988105065417	WITHOUT_CLASSIFICATION	1.0118949345822035E-4	DESIGN
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9065893983070904	WITHOUT_CLASSIFICATION	0.0934106016929096	DESIGN
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9978670924811555	WITHOUT_CLASSIFICATION	0.002132907518844583	DESIGN
// create a new collection wrapper, to be initialized later	WITHOUT_CLASSIFICATION	0.9244823194553441	WITHOUT_CLASSIFICATION	0.0755176805446559	DESIGN
// Some JDBC drivers erroneously return an empty array here for a null DB value :/	WITHOUT_CLASSIFICATION	0.999925128358069	WITHOUT_CLASSIFICATION	7.487164193095911E-5	DESIGN
// our column span is the number of columns in the PK	WITHOUT_CLASSIFICATION	0.9999666523176624	WITHOUT_CLASSIFICATION	3.3347682337606486E-5	DESIGN
//cannot batch fetch by unique key (property-ref associations)	WITHOUT_CLASSIFICATION	0.9958667205253703	WITHOUT_CLASSIFICATION	0.004133279474629763	DESIGN
// we already know current is not null...	WITHOUT_CLASSIFICATION	0.996320230095515	WITHOUT_CLASSIFICATION	0.003679769904485154	DESIGN
// the ids are fully resolved, so compare them with isDirty(), not isModified()	WITHOUT_CLASSIFICATION	0.9905965892804851	WITHOUT_CLASSIFICATION	0.009403410719514872	DESIGN
//the owner of the association is not the owner of the id	WITHOUT_CLASSIFICATION	0.9995486786890883	WITHOUT_CLASSIFICATION	4.513213109118126E-4	DESIGN
// ----------------------------------------------------------- Constructors	WITHOUT_CLASSIFICATION	0.999524884023457	WITHOUT_CLASSIFICATION	4.751159765431357E-4	DESIGN
// ----------------------------------------------------- Instance Variables	WITHOUT_CLASSIFICATION	0.999998926957352	WITHOUT_CLASSIFICATION	1.0730426479569087E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.999679076858764	WITHOUT_CLASSIFICATION	3.2092314123604855E-4	DESIGN
// --------------------------------------------------------- Public Methods	WITHOUT_CLASSIFICATION	0.9992530139903505	WITHOUT_CLASSIFICATION	7.469860096495629E-4	DESIGN
// Compare the two maps for equality	WITHOUT_CLASSIFICATION	0.9989217931316206	WITHOUT_CLASSIFICATION	0.001078206868379428	DESIGN
// Simple tests that require no synchronization	WITHOUT_CLASSIFICATION	0.9996134804966611	WITHOUT_CLASSIFICATION	3.865195033389132E-4	DESIGN
//Sybase fail if we don't do that, sigh...	WITHOUT_CLASSIFICATION	0.9991099257648244	WITHOUT_CLASSIFICATION	8.900742351756468E-4	DESIGN
// Handles things like: // a and b or c // a and ( b or c ) // not a and not b // not ( a and b ) // x between y and z            (overloaded "and") // x in ( a, b, c )             (overloaded brackets) // not not a // a is not null                (overloaded "not") // etc...... // and expressions like // foo = bar                    (maps to: foo.id = bar.id) // foo.Bar = 'foo'              (maps to: foo.bar = 'foo') // foo.Bar.Baz = 1.0            (maps to: foo.bar = bar.id and bar.baz = 1.0) // 1.0 = foo.Bar.Baz            (maps to: bar.baz = 1.0 and foo.Bar = bar.id) // foo.Bar.Baz = a.B.C          (maps to: bar.Baz = b.C and foo.Bar = bar.id and a.B = b.id) // foo.Bar.Baz + a.B.C          (maps to: bar.Baz + b.C and foo.Bar = bar.id and a.B = b.id) // ( foo.Bar.Baz + 1.0 ) < 2.0  (maps to: ( bar.Baz + 1.0 ) < 2.0 and foo.Bar = bar.id)	WITHOUT_CLASSIFICATION	0.9997268844271116	WITHOUT_CLASSIFICATION	2.7311557288839367E-4	DESIGN
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9988240191158909	WITHOUT_CLASSIFICATION	0.0011759808841090725	DESIGN
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9988240191158909	WITHOUT_CLASSIFICATION	0.0011759808841090725	DESIGN
// try to "pretty print" it	WITHOUT_CLASSIFICATION	0.9996072031869501	WITHOUT_CLASSIFICATION	3.927968130499524E-4	DESIGN
// otherwise, just dump it	WITHOUT_CLASSIFICATION	0.9996512422793433	WITHOUT_CLASSIFICATION	3.487577206566172E-4	DESIGN
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9977414271227254	WITHOUT_CLASSIFICATION	0.0022585728772745468	DESIGN
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9977414271227254	WITHOUT_CLASSIFICATION	0.0022585728772745468	DESIGN
// use default behavior	WITHOUT_CLASSIFICATION	0.9972305703387525	WITHOUT_CLASSIFICATION	0.0027694296612474556	DESIGN
//NOTE: early return	WITHOUT_CLASSIFICATION	0.9988228224764915	WITHOUT_CLASSIFICATION	0.0011771775235086138	DESIGN
// the MRU cache used to keep hard references to the most recently used query plans; // note : LRU here is a bit of a misnomer, it indicates that LRU entries are removed, the // actual kept entries are the MRU entries	WITHOUT_CLASSIFICATION	0.7146851498180682	WITHOUT_CLASSIFICATION	0.28531485018193187	DESIGN
// we want to be able to just use the defaults, // if JNDI environment properties are not supplied // so don't put null in anywhere	WITHOUT_CLASSIFICATION	0.9998749243035713	WITHOUT_CLASSIFICATION	1.2507569642867102E-4	DESIGN
// Clone //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.99846031500219	WITHOUT_CLASSIFICATION	0.0015396849978099886	DESIGN
// Serialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9994664167093965	WITHOUT_CLASSIFICATION	5.335832906034879E-4	DESIGN
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999706596794682	WITHOUT_CLASSIFICATION	2.9340320531922365E-5	DESIGN
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999706596794682	WITHOUT_CLASSIFICATION	2.9340320531922365E-5	DESIGN
// Deserialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9994664167093965	WITHOUT_CLASSIFICATION	5.335832906034879E-4	DESIGN
/* static methods only - hide constructor */	WITHOUT_CLASSIFICATION	0.9968781284429894	WITHOUT_CLASSIFICATION	0.003121871557010625	DESIGN
/*&& !('_'==character)*/	WITHOUT_CLASSIFICATION	0.9977242551169848	WITHOUT_CLASSIFICATION	0.0022757448830152418	DESIGN
// returnign null!	WITHOUT_CLASSIFICATION	0.9991411868893224	WITHOUT_CLASSIFICATION	8.588131106775136E-4	DESIGN
// returnign null!	WITHOUT_CLASSIFICATION	0.9991411868893224	WITHOUT_CLASSIFICATION	8.588131106775136E-4	DESIGN
// includes last '.'	WITHOUT_CLASSIFICATION	0.9999346509024158	WITHOUT_CLASSIFICATION	6.534909758416274E-5	DESIGN
// +1 to include the following '.'	WITHOUT_CLASSIFICATION	0.9998899982327709	WITHOUT_CLASSIFICATION	1.1000176722917467E-4	DESIGN
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9976065171306441	WITHOUT_CLASSIFICATION	0.002393482869355962	DESIGN
// first time we find match!	WITHOUT_CLASSIFICATION	0.9992966546902655	WITHOUT_CLASSIFICATION	7.03345309734557E-4	DESIGN
// entityNames may now include slashes for the representations //classname may be an inner class	WITHOUT_CLASSIFICATION	0.9997582473336137	WITHOUT_CLASSIFICATION	2.4175266638623908E-4	DESIGN
// wrapped iterators	WITHOUT_CLASSIFICATION	0.993402711552668	WITHOUT_CLASSIFICATION	0.006597288447332009	DESIGN
// index of current iterator in the wrapped iterators array	WITHOUT_CLASSIFICATION	0.9998637008528565	WITHOUT_CLASSIFICATION	1.3629914714346738E-4	DESIGN
// the current iterator	WITHOUT_CLASSIFICATION	0.999736317127069	WITHOUT_CLASSIFICATION	2.636828729309947E-4	DESIGN
// the last used iterator	WITHOUT_CLASSIFICATION	0.9613647160466395	WITHOUT_CLASSIFICATION	0.03863528395336039	DESIGN
//it was a boolean expression	WITHOUT_CLASSIFICATION	0.999755195522886	WITHOUT_CLASSIFICATION	2.448044771139689E-4	DESIGN
/*public static Object[] clone(Class elementClass, Object[] array) {	WITHOUT_CLASSIFICATION	0.9965348345004655	WITHOUT_CLASSIFICATION	0.0034651654995344777	DESIGN
// call this before any Iterator method to make sure that the current Iterator // is not exhausted	WITHOUT_CLASSIFICATION	0.9971060000920587	WITHOUT_CLASSIFICATION	0.0028939999079412217	DESIGN
//doable if needed	WITHOUT_CLASSIFICATION	0.9992440524884763	WITHOUT_CLASSIFICATION	7.559475115238002E-4	DESIGN
// set last used iterator here, in case the user calls remove // before calling hasNext() or next() (although they shouldn't)	WITHOUT_CLASSIFICATION	0.9750114001761898	WITHOUT_CLASSIFICATION	0.024988599823810215	DESIGN
// peek ahead	WITHOUT_CLASSIFICATION	0.9985490579529132	WITHOUT_CLASSIFICATION	0.0014509420470868728	DESIGN
// if we reach the end of the string w/o finding the // matching end, that is an exception	WITHOUT_CLASSIFICATION	0.9998294417826543	WITHOUT_CLASSIFICATION	1.7055821734573837E-4	DESIGN
// we have a placeholder, spin forward till we find the end	WITHOUT_CLASSIFICATION	0.9996024531724209	WITHOUT_CLASSIFICATION	3.9754682757905724E-4	DESIGN
// make sure spinning forward did not put us past the end of the buffer...	WITHOUT_CLASSIFICATION	0.9996789035255299	WITHOUT_CLASSIFICATION	3.210964744700514E-4	DESIGN
// First, try to locate this resource through the current // context classloader.	WITHOUT_CLASSIFICATION	0.9995341840804358	WITHOUT_CLASSIFICATION	4.658159195642239E-4	DESIGN
// Next, try to locate this resource through this class's classloader	WITHOUT_CLASSIFICATION	0.9939770992208685	WITHOUT_CLASSIFICATION	0.006022900779131527	DESIGN
// Next, try to locate this resource through the system classloader	WITHOUT_CLASSIFICATION	0.992780740371198	WITHOUT_CLASSIFICATION	0.007219259628801934	DESIGN
// Anywhere else we should look?	WITHOUT_CLASSIFICATION	0.9978029925967762	WITHOUT_CLASSIFICATION	0.0021970074032238783	DESIGN
// would need an IdentitySet for this!	WITHOUT_CLASSIFICATION	0.9963558090550186	WITHOUT_CLASSIFICATION	0.0036441909449812966	DESIGN
//Arrays.asList doesn't do primitive arrays	WITHOUT_CLASSIFICATION	0.9967614117008369	WITHOUT_CLASSIFICATION	0.003238588299163224	DESIGN
//faster?	WITHOUT_CLASSIFICATION	0.9992064434309498	WITHOUT_CLASSIFICATION	7.935565690501368E-4	DESIGN
// the name of a class	WITHOUT_CLASSIFICATION	0.9981120945025245	WITHOUT_CLASSIFICATION	0.0018879054974755137	DESIGN
// Its the listener class name	WITHOUT_CLASSIFICATION	0.9986110827504462	WITHOUT_CLASSIFICATION	0.001388917249553783	DESIGN
//allow 9,8,7,6,5,4,3,2,1	WITHOUT_CLASSIFICATION	0.9976485066014736	WITHOUT_CLASSIFICATION	0.002351493398526296	DESIGN
// default to element set if no elements() specified	WITHOUT_CLASSIFICATION	0.9998535320156713	WITHOUT_CLASSIFICATION	1.4646798432877564E-4	DESIGN
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9993316020869213	WITHOUT_CLASSIFICATION	6.683979130787676E-4	DESIGN
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.8917029185236547	WITHOUT_CLASSIFICATION	0.10829708147634537	DESIGN
// first, lets determine whether to apply cglib or javassist based instrumentation...	WITHOUT_CLASSIFICATION	0.999771292686038	WITHOUT_CLASSIFICATION	2.2870731396188584E-4	DESIGN
// Make sure we don't override previous set values	WITHOUT_CLASSIFICATION	0.9995546571992092	WITHOUT_CLASSIFICATION	4.453428007906762E-4	DESIGN
//entirely optional!!	WITHOUT_CLASSIFICATION	0.9976485066014736	WITHOUT_CLASSIFICATION	0.002351493398526296	DESIGN
// Its the listener instance (or better be)	WITHOUT_CLASSIFICATION	0.9661574994651259	WITHOUT_CLASSIFICATION	0.0338425005348742	DESIGN
//context.unbind(boundName);	WITHOUT_CLASSIFICATION	0.9976485066014736	WITHOUT_CLASSIFICATION	0.002351493398526296	DESIGN
//readResolveObject	WITHOUT_CLASSIFICATION	0.9978670924811555	WITHOUT_CLASSIFICATION	0.002132907518844583	DESIGN
//cfg.setProperty("hibernate.show_sql", "true");	WITHOUT_CLASSIFICATION	0.9986810053377232	WITHOUT_CLASSIFICATION	0.0013189946622768059	DESIGN
// Defensive, convenience methods	WITHOUT_CLASSIFICATION	0.9997417330289984	WITHOUT_CLASSIFICATION	2.582669710015566E-4	DESIGN
// Create the SessionFactory from hibernate.cfg.xml	WITHOUT_CLASSIFICATION	0.9998627505205361	WITHOUT_CLASSIFICATION	1.372494794638758E-4	DESIGN
// Make sure you log the exception, as it might be swallowed	WITHOUT_CLASSIFICATION	0.9998655547120373	WITHOUT_CLASSIFICATION	1.344452879626794E-4	DESIGN
// Begin unit of work	WITHOUT_CLASSIFICATION	0.9994903406159333	WITHOUT_CLASSIFICATION	5.096593840665383E-4	DESIGN
// Write HTML header	WITHOUT_CLASSIFICATION	0.998291149822688	WITHOUT_CLASSIFICATION	0.0017088501773121093	DESIGN
// Handle actions	WITHOUT_CLASSIFICATION	0.998885825750859	WITHOUT_CLASSIFICATION	0.0011141742491409595	DESIGN
// Print page	WITHOUT_CLASSIFICATION	0.9994098519215384	WITHOUT_CLASSIFICATION	5.901480784616623E-4	DESIGN
// Write HTML footer	WITHOUT_CLASSIFICATION	0.9994787679060567	WITHOUT_CLASSIFICATION	5.212320939432985E-4	DESIGN
// End unit of work	WITHOUT_CLASSIFICATION	0.999229184368016	WITHOUT_CLASSIFICATION	7.70815631984002E-4	DESIGN
// Start the session to be used for this request	WITHOUT_CLASSIFICATION	0.8141466967550368	WITHOUT_CLASSIFICATION	0.1858533032449632	DESIGN
// make the session available to the session factory's "current context"	WITHOUT_CLASSIFICATION	0.9971446031592516	WITHOUT_CLASSIFICATION	0.002855396840748424	DESIGN
// pass control along to the rest of the processing chain	WITHOUT_CLASSIFICATION	0.99997746364034	WITHOUT_CLASSIFICATION	2.2536359659937228E-5	DESIGN
// remove session from "current context"	WITHOUT_CLASSIFICATION	0.9947766316855368	WITHOUT_CLASSIFICATION	0.005223368314463197	DESIGN
// Eager fetch the collection so we can use it detached	WITHOUT_CLASSIFICATION	0.9945351028677635	WITHOUT_CLASSIFICATION	0.005464897132236512	DESIGN
// If we want to handle it bidirectional and detached, we also need to load this // collection with an eager outer-join fetch, this time with Criteria and not HQL:	WITHOUT_CLASSIFICATION	0.9408618982353822	WITHOUT_CLASSIFICATION	0.059138101764617826	DESIGN
/*        Event anEvent = (Event) session                .createCriteria(Event.class).setFetchMode("participants", FetchMode.JOIN)                .add( Expression.eq("id", eventId) )                .uniqueResult(); // Eager fetch the colleciton so we can use it detached        */	WITHOUT_CLASSIFICATION	0.9932408506385878	WITHOUT_CLASSIFICATION	0.006759149361412236	DESIGN
// End of first unit of work	WITHOUT_CLASSIFICATION	0.9995718986576494	WITHOUT_CLASSIFICATION	4.2810134235056116E-4	DESIGN
// or bidirectional safety method, setting both sides: aPerson.addToEvent(anEvent);	WITHOUT_CLASSIFICATION	0.999925631004043	WITHOUT_CLASSIFICATION	7.436899595698307E-5	DESIGN
// Begin second unit of work	WITHOUT_CLASSIFICATION	0.9996732012973442	WITHOUT_CLASSIFICATION	3.26798702655836E-4	DESIGN
// Reattachment of aPerson	WITHOUT_CLASSIFICATION	0.99918602366774	WITHOUT_CLASSIFICATION	8.139763322599811E-4	DESIGN
// The getEmailAddresses() might trigger a lazy load of the collection	WITHOUT_CLASSIFICATION	0.991004617303719	WITHOUT_CLASSIFICATION	0.008995382696280984	DESIGN
// We need our tm, so get it now and avoid doing other work // if there is a problem	WITHOUT_CLASSIFICATION	0.9995122683813241	WITHOUT_CLASSIFICATION	4.877316186758628E-4	DESIGN
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999694869138558	WITHOUT_CLASSIFICATION	3.0513086144278242E-5	DESIGN
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999694869138558	WITHOUT_CLASSIFICATION	3.0513086144278242E-5	DESIGN
// JBC put a version in the node when it created as part of // some internal operation. We are always newer, but if // the JBC version is > 1 something odd has happened	WITHOUT_CLASSIFICATION	0.9999899122605818	WITHOUT_CLASSIFICATION	1.0087739418185895E-5	DESIGN
//swaldman 2006-08-28: define c3p0-style configuration parameters for properties with //                     hibernate-specific overrides to detect and warn about conflicting //                     declarations	WITHOUT_CLASSIFICATION	0.9999770615439632	WITHOUT_CLASSIFICATION	2.2938456036824463E-5	DESIGN
// Not null if the Isolation level has been specified in the configuration file. // Otherwise, it is left to the Driver's default value.	WITHOUT_CLASSIFICATION	0.9999803360077947	WITHOUT_CLASSIFICATION	1.966399220526255E-5	DESIGN
// Configured outside of Hibernate (i.e. Servlet container, or Java Bean Container // already has Proxool pools running, and this provider is to just borrow one of these	WITHOUT_CLASSIFICATION	0.9971449321506951	WITHOUT_CLASSIFICATION	0.00285506784930492	DESIGN
// If you're closing down the ConnectionProvider chances are an // is not a real big deal, just warn	WITHOUT_CLASSIFICATION	0.9999691717339532	WITHOUT_CLASSIFICATION	3.0828266046787475E-5	DESIGN
// (AS is always optional, for consistency with SQL/OQL)	WITHOUT_CLASSIFICATION	0.9979763177233227	WITHOUT_CLASSIFICATION	0.0020236822766771865	DESIGN
// process the "new" HQL style where aliases are assigned // _after_ the class name or path expression ie. using // the AS construction	WITHOUT_CLASSIFICATION	0.9999993491386315	WITHOUT_CLASSIFICATION	6.508613685109438E-7	DESIGN
// the loaded owner will be set to null after the collection is removed, // so capture its value as the affected owner so it is accessible to // both pre- and post- events	WITHOUT_CLASSIFICATION	0.9999995020047046	WITHOUT_CLASSIFICATION	4.979952954251321E-7	DESIGN
// is a primitive type // invokespecial	WITHOUT_CLASSIFICATION	0.9987218468177285	WITHOUT_CLASSIFICATION	0.0012781531822715008	DESIGN
// array of primitive type // do nothing	WITHOUT_CLASSIFICATION	0.999778040264338	WITHOUT_CLASSIFICATION	2.2195973566195728E-4	DESIGN
// handle a path expression or class name that // appears at the start, in the "new" HQL // style or an alias that appears at the start // in the "old" HQL style	WITHOUT_CLASSIFICATION	0.9999817389896247	WITHOUT_CLASSIFICATION	1.8261010375292354E-5	DESIGN
//handle <=, >=, !=, is not, not between, not in	WITHOUT_CLASSIFICATION	0.9883724372515789	WITHOUT_CLASSIFICATION	0.011627562748421106	DESIGN
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999973637567814	WITHOUT_CLASSIFICATION	2.6362432186087576E-6	DESIGN
// transfer an explicitly defined entity name // handle the lazy attribute	WITHOUT_CLASSIFICATION	0.9982515741269443	WITHOUT_CLASSIFICATION	0.0017484258730556352	DESIGN
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9992615176656411	WITHOUT_CLASSIFICATION	7.38482334358912E-4	DESIGN
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9992615176656411	WITHOUT_CLASSIFICATION	7.38482334358912E-4	DESIGN
// get meta's from // <joined-subclass>	WITHOUT_CLASSIFICATION	0.9993790258711844	WITHOUT_CLASSIFICATION	6.209741288155361E-4	DESIGN
// parameters on the property mapping should // override parameters in the typedef	WITHOUT_CLASSIFICATION	0.9999422086251853	WITHOUT_CLASSIFICATION	5.7791374814775824E-5	DESIGN
//fetch="join" overrides default laziness //fetch="join" overrides default laziness	WITHOUT_CLASSIFICATION	0.9980472387224782	WITHOUT_CLASSIFICATION	0.001952761277521833	DESIGN
//NOTE SPECIAL CASE: // default to join and non-lazy for the "second join" // of the many-to-many	WITHOUT_CLASSIFICATION	0.9999315723594216	WITHOUT_CLASSIFICATION	6.842764057840723E-5	DESIGN
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999388088361771	WITHOUT_CLASSIFICATION	6.119116382285874E-5	DESIGN
// state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994753198178449	WITHOUT_CLASSIFICATION	5.246801821550169E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.999679076858764	WITHOUT_CLASSIFICATION	3.2092314123604855E-4	DESIGN
//element //index -> id	WITHOUT_CLASSIFICATION	0.9992073433890344	WITHOUT_CLASSIFICATION	7.926566109656915E-4	DESIGN
// note that it might be better to iterate the snapshot but this is safe, // assuming the user implements equals() properly, as required by the Set // contract!	WITHOUT_CLASSIFICATION	0.9236546341854918	WITHOUT_CLASSIFICATION	0.07634536581450832	DESIGN
// collections detect changes made via their public interface and mark // themselves as dirty as a performance optimization	WITHOUT_CLASSIFICATION	0.9999736734950296	WITHOUT_CLASSIFICATION	2.6326504970341338E-5	DESIGN
// essentially, if the real session is closed allow any // method call to pass through since the real session // will complain by throwing an appropriate exception; // NOTE that allowing close() above has the same basic effect, //   but we capture that there simply to perform the unbind...	WITHOUT_CLASSIFICATION	0.9999926672417233	WITHOUT_CLASSIFICATION	7.332758276652705E-6	DESIGN
// The default SQLExceptionConverter for all dialects is based on SQLState // since SQLErrorCode is extremely vendor-specific.  Specific Dialects // may override to return whatever is most appropriate for that vendor.	WITHOUT_CLASSIFICATION	0.9998597080853595	WITHOUT_CLASSIFICATION	1.4029191464056578E-4	DESIGN
//only necessary for postgre < 7.4 //http://anoncvs.postgresql.org/cvsweb.cgi/pgsql/doc/src/sgml/ref/create_sequence.sgml	WITHOUT_CLASSIFICATION	0.9955930741961027	WITHOUT_CLASSIFICATION	0.004406925803897372	DESIGN
// select topic, syntax from information_schema.help // where section like 'Function%' order by section, topic // // see also ->  http://www.h2database.com/html/functions.html	WITHOUT_CLASSIFICATION	0.9999864657870472	WITHOUT_CLASSIFICATION	1.3534212952707768E-5	DESIGN
// registerColumnType(Types.VARBINARY, "CHARACTER($l)"); // registerColumnType(Types.BLOB, "CHARACTER($l)" );  // For use prior to CP 11.0 // registerColumnType(Types.CLOB, "CHARACTER($l)" );	WITHOUT_CLASSIFICATION	0.9997867258973525	WITHOUT_CLASSIFICATION	2.132741026474437E-4	DESIGN
//the BLOB type requires a size arguement - this defaults to //bytes - no arg defaults to 1 whole byte! //other argument mods include K - kilobyte, M - megabyte, G - gigabyte. //refer to the PBdevelopers guide for more info.	WITHOUT_CLASSIFICATION	0.9700241866187835	WITHOUT_CLASSIFICATION	0.029975813381216514	DESIGN
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.9980213527255858	WITHOUT_CLASSIFICATION	0.0019786472744141768	DESIGN
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.9998990053912179	WITHOUT_CLASSIFICATION	1.0099460878197763E-4	DESIGN
// add the comment // nest the main query in an outer select // add the rownnumber bit into the outer query select list	WITHOUT_CLASSIFICATION	0.9999954540787632	WITHOUT_CLASSIFICATION	4.5459212367233165E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.999679076858764	WITHOUT_CLASSIFICATION	3.2092314123604855E-4	DESIGN
// Note: For object <-> SQL datatype mappings see: //	WITHOUT_CLASSIFICATION	0.9927683560512192	WITHOUT_CLASSIFICATION	0.007231643948780878	DESIGN
// TRIM(end_keyword string-expression-1 FROM string-expression-2) // use Hibernate implementation "From" is one of the parameters they pass in position ?3 //registerFunction( "trim", new SQLFunctionTemplate(Hibernate.STRING, "trim(?1 ?2 from ?3)") );	WITHOUT_CLASSIFICATION	0.9999927086421384	WITHOUT_CLASSIFICATION	7.291357861648056E-6	DESIGN
// Whether this dialect has an Identity clause added to the data type or a completely seperate identity // data type	WITHOUT_CLASSIFICATION	0.9998990794726842	WITHOUT_CLASSIFICATION	1.0092052731590451E-4	DESIGN
// According to both the ANSI-SQL and JPA specs, trim takes a variable number of parameters between 1 and 4. // at least one paramer (trimSource) is required.  From the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If <trim specification> is omitted, BOTH is assumed. // If <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999997594281214	WITHOUT_CLASSIFICATION	2.405718786362611E-7	DESIGN
/////////////////////////////////////////////////////////////////////// // Prepare persisters and link them up with their cache // region/access-strategy	WITHOUT_CLASSIFICATION	0.9991368041280473	WITHOUT_CLASSIFICATION	8.631958719528058E-4	DESIGN
//Named Queries:	WITHOUT_CLASSIFICATION	0.9978670924811555	WITHOUT_CLASSIFICATION	0.002132907518844583	DESIGN
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.8711925224918118	DESIGN	0.12880747750818813	WITHOUT_CLASSIFICATION
// does not handle arrays (thats ok, cos they can't be lazy) // or newly instantiated collections, so we can do the cast	WITHOUT_CLASSIFICATION	0.9909216137268445	WITHOUT_CLASSIFICATION	0.00907838627315553	DESIGN
// collection deletions are a special case since update() can add // deletions of collections not loaded by the session.	WITHOUT_CLASSIFICATION	0.9999810624477576	WITHOUT_CLASSIFICATION	1.893755224240872E-5	DESIGN
// we can do the cast since orphan-delete does not apply to: // 1. newly instantiated collections // 2. arrays (we can't track orphans for detached arrays)	WITHOUT_CLASSIFICATION	0.9999855836801546	WITHOUT_CLASSIFICATION	1.4416319845394696E-5	DESIGN
// if the natural-id is marked as non-mutable, it is not retrieved during a // normal database-snapshot operation...	WITHOUT_CLASSIFICATION	0.9999680908326013	WITHOUT_CLASSIFICATION	3.1909167398785984E-5	DESIGN
// watch out for a case where old is still referenced // somewhere in the object graph! (which is a user error)	WITHOUT_CLASSIFICATION	0.9998841649811967	WITHOUT_CLASSIFICATION	1.1583501880337004E-4	DESIGN
//slice, to get the columns for this component //property	WITHOUT_CLASSIFICATION	0.9994851120852666	WITHOUT_CLASSIFICATION	5.148879147334592E-4	DESIGN
//int result = 17; //result = 37 * result + type.hashCode(); //result = 37 * result + ( value==null ? 0 : value.hashCode() ); //return result;	WITHOUT_CLASSIFICATION	0.9999902448709344	WITHOUT_CLASSIFICATION	9.755129065685091E-6	DESIGN
// The CollectionEntry.isReached() stuff is just to detect any silly users   // who set up circular or shared references between/to collections.	WITHOUT_CLASSIFICATION	0.999760180970537	WITHOUT_CLASSIFICATION	2.3981902946298517E-4	DESIGN
// detached collection wrappers that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9997960759695309	WITHOUT_CLASSIFICATION	2.0392403046903926E-4	DESIGN
// The unique property value represented here may or may not be // serializable, so we do an explicit check here in order to generate // a better error message	WITHOUT_CLASSIFICATION	0.9807272790506586	WITHOUT_CLASSIFICATION	0.0192727209493414	DESIGN
// if the version of a newly instantiated object is not the same // as the version seed value, use that as the unsaved-value	WITHOUT_CLASSIFICATION	0.9994785816223091	WITHOUT_CLASSIFICATION	5.214183776909486E-4	DESIGN
// ie. we never have to null out a reference to // an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999734627622534	WITHOUT_CLASSIFICATION	2.653723774660983E-5	DESIGN
// ignore this row, the collection is in process of // being loaded somewhere further "up" the stack	WITHOUT_CLASSIFICATION	0.9998699522453469	WITHOUT_CLASSIFICATION	1.30047754653129E-4	DESIGN
// Entity load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // 	WITHOUT_CLASSIFICATION	0.9995399896750039	WITHOUT_CLASSIFICATION	4.600103249960357E-4	DESIGN
// should be ok performance-wise to generate new delegate instances for each // request since these are locally stack-scoped.  Besides, it makes the code // much easier to read than the old TransactionHelper stuff...	WITHOUT_CLASSIFICATION	0.9999087074558102	WITHOUT_CLASSIFICATION	9.129254418980976E-5	DESIGN
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.977884152097196	WITHOUT_CLASSIFICATION	0.022115847902804006	DESIGN
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.977884152097196	WITHOUT_CLASSIFICATION	0.022115847902804006	DESIGN
// wrap up any new collections directly referenced by the object // or its components	WITHOUT_CLASSIFICATION	0.9999869468992174	WITHOUT_CLASSIFICATION	1.3053100782696699E-5	DESIGN
// remove any snapshot, not really for memory management purposes, but // rather because it might now be stale, and there is no longer any  // EntityEntry to take precedence // This is now handled by removeEntity() //session.getPersistenceContext().removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.8291940050752227	WITHOUT_CLASSIFICATION	0.17080599492477733	DESIGN
// skip this check for composite-ids relating to dom4j entity-mode; // alternatively, we could add a check to make sure the incoming id value is // an instance of Element...	WITHOUT_CLASSIFICATION	0.9572473772839842	WITHOUT_CLASSIFICATION	0.042752622716015806	DESIGN
// upgrade the lock if necessary: //lock(result, lockMode);	WITHOUT_CLASSIFICATION	0.9998755152243765	WITHOUT_CLASSIFICATION	1.2448477562358894E-4	DESIGN
// now, any collections that are initialized // inside this block do not get updated - they // are ignored until the next flush	WITHOUT_CLASSIFICATION	0.8832209236436865	WITHOUT_CLASSIFICATION	0.11677907635631356	DESIGN
//we must clone embedded composite identifiers, or  //we will get back the same instance that we pass in	WITHOUT_CLASSIFICATION	0.9988555208594614	WITHOUT_CLASSIFICATION	0.0011444791405385841	DESIGN
// Sub-insertions should occur before containing insertion so // Try to do the callback now	WITHOUT_CLASSIFICATION	0.9990780117900911	WITHOUT_CLASSIFICATION	9.219882099088528E-4	DESIGN
//the entity is not associated with the session, so //try interceptor and unsaved-value	WITHOUT_CLASSIFICATION	0.999366897369223	WITHOUT_CLASSIFICATION	6.33102630776927E-4	DESIGN
//scan the query string for class names appearing in the from clause and replace //with all persistent implementors of the class/interface, returning multiple //query strings (make sure we don't pick up a class in the select clause!)	WITHOUT_CLASSIFICATION	0.9934218288720061	WITHOUT_CLASSIFICATION	0.0065781711279938575	DESIGN
// save() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998351913641178	WITHOUT_CLASSIFICATION	1.6480863588213364E-4	DESIGN
// evict() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999816751252768	WITHOUT_CLASSIFICATION	1.832487472320738E-4	DESIGN
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9858670430403599	WITHOUT_CLASSIFICATION	0.014132956959640165	DESIGN
//if it is an uninitialized proxy, pointing //with this session, then when it is accessed, //the underlying instance will be "contained"	WITHOUT_CLASSIFICATION	0.999611106957214	WITHOUT_CLASSIFICATION	3.88893042786104E-4	DESIGN
// Generate an explicit join for the root dot node.   The implied joins will be collected and passed up // to the root dot node.	WITHOUT_CLASSIFICATION	0.9999987674943411	WITHOUT_CLASSIFICATION	1.2325056589400751E-6	DESIGN
// A session is considered to contain an entity only if the entity has // an entry in the session's persistence context and the entry reports // that the entity has not been removed	WITHOUT_CLASSIFICATION	0.9979775217540162	WITHOUT_CLASSIFICATION	0.0020224782459837398	DESIGN
// Does the collection referenced by this FromElement // specify an order-by attribute?  If so, attach it to // the query's order-by	WITHOUT_CLASSIFICATION	0.9756505387451179	WITHOUT_CLASSIFICATION	0.024349461254882094	DESIGN
// ... and the token could be an identifer and the error is // a mismatched token error ...	WITHOUT_CLASSIFICATION	0.9782691105622559	WITHOUT_CLASSIFICATION	0.021730889437744216	DESIGN
// If a where clause was specified in the update/delete query, use it to limit the // returned ids here...	WITHOUT_CLASSIFICATION	0.9999475551192213	WITHOUT_CLASSIFICATION	5.244488077874813E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.999679076858764	WITHOUT_CLASSIFICATION	3.2092314123604855E-4	DESIGN
// Default implementation: // If this node has a data type, and that data type is not an association, then this is scalar.	WITHOUT_CLASSIFICATION	0.9999843120591475	WITHOUT_CLASSIFICATION	1.5687940852423047E-5	DESIGN
// Resolve the LHS fully, generate implicit joins.  Pass in the property name so that the resolver can // discover foreign key (id) properties.	WITHOUT_CLASSIFICATION	0.9999916381813516	WITHOUT_CLASSIFICATION	8.361818648405503E-6	DESIGN
// If the propertyType is null and there isn't a parent, just // stop now... there was a problem resolving the node anyway.	WITHOUT_CLASSIFICATION	0.9997461573897554	WITHOUT_CLASSIFICATION	2.5384261024463006E-4	DESIGN
//We do not look for an existing join on the same path, because //it makes sense to join twice on the same collection role	WITHOUT_CLASSIFICATION	0.9957985980419327	WITHOUT_CLASSIFICATION	0.004201401958067315	DESIGN
// our parent is another dot node, meaning we are being further dereferenced. // thus we need to generate a join unless the parent refers to the associated // entity's PK (because 'our' table would know the FK).	WITHOUT_CLASSIFICATION	0.9999757445421509	WITHOUT_CLASSIFICATION	2.4255457849117804E-5	DESIGN
/*public final Currency getCurrency(int col) throws HibernateException {	WITHOUT_CLASSIFICATION	0.9997093146532938	WITHOUT_CLASSIFICATION	2.90685346706165E-4	DESIGN
// here, we have two possibilities: // 	WITHOUT_CLASSIFICATION	0.9990291611373819	WITHOUT_CLASSIFICATION	9.708388626179677E-4	DESIGN
// Set the unresolved path in this node and the parent. // Set the text for the parent.	WITHOUT_CLASSIFICATION	0.9999413888086689	WITHOUT_CLASSIFICATION	5.86111913310323E-5	DESIGN
// Get the first child to be considered.  Sub-classes may do this differently in order to skip nodes that // are not select expressions (e.g. DISTINCT).	WITHOUT_CLASSIFICATION	0.9999448652876165	WITHOUT_CLASSIFICATION	5.5134712383538916E-5	DESIGN
// If this is an entity and the property is the identifier property, then use getIdentifierType(). //      Note that the propertyName.equals( propertyPath ) checks whether we have a component //      key reference, where the component class property name is the same as the //      entity id property name; if the two are not equal, this is the case and //      we'd need to "fall through" to using the property mapping.	WITHOUT_CLASSIFICATION	0.9994082951165913	WITHOUT_CLASSIFICATION	5.917048834086016E-4	DESIGN
// for a subquery, the alias to use depends on a few things (we // already know this is not an overall SELECT): //      1) if this FROM_ELEMENT represents a correlation to the //          outer-most query //              A) if the outer query represents a multi-table //                  persister, we need to use the given alias //                  in anticipation of one of the multi-table //                  executors being used (as this subquery will //                  actually be used in the "id select" phase //                  of that multi-table executor) //              B) otherwise, we need to use the persister's //                  table name as the column qualification //      2) otherwise (not correlated), use the given alias	WITHOUT_CLASSIFICATION	0.7278751940551877	DESIGN	0.27212480594481225	WITHOUT_CLASSIFICATION
// Not a collection? // Return the entity property mapping.	WITHOUT_CLASSIFICATION	0.8815516279744602	WITHOUT_CLASSIFICATION	0.1184483720255398	DESIGN
// collection of <many-to-any/> mappings... // used to circumvent the component-collection check below...	WITHOUT_CLASSIFICATION	0.9789598814151894	WITHOUT_CLASSIFICATION	0.021040118584810703	DESIGN
// Otherwise, the destination node was implied by the FROM clause and the FROM clause processor // will automatically add it in the right place.	WITHOUT_CLASSIFICATION	0.9998829662147898	WITHOUT_CLASSIFICATION	1.1703378521020807E-4	DESIGN
// If the first identifier in the path referrs to the class alias (not the class name), then this // is a correlated subselect.  If it's a correlated sub-select, use the existing table alias.  Otherwise // generate a new one.	WITHOUT_CLASSIFICATION	0.9941672371919622	WITHOUT_CLASSIFICATION	0.0058327628080377695	DESIGN
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999466099455501	WITHOUT_CLASSIFICATION	5.3390054449918995E-5	DESIGN
// An ident node can represent an index expression if the ident // represents a naked property ref //      *Note: this makes the assumption (which is currently the case //      in the hql-sql grammar) that the ident is first resolved //      itself (addrExpr -> resolve()).  The other option, if that //      changes, is to call resolve from here; but it is //      currently un-needed overhead.	WITHOUT_CLASSIFICATION	0.9999970697846688	WITHOUT_CLASSIFICATION	2.9302153311120076E-6	DESIGN
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9908001208007045	WITHOUT_CLASSIFICATION	0.009199879199295515	DESIGN
// If this is an implied join in a FROM clause, then use ANSI-style joining, and set the // flag on the FromElement that indicates that it was implied in the FROM clause itself.	WITHOUT_CLASSIFICATION	0.9998717304066455	WITHOUT_CLASSIFICATION	1.282695933546008E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.999679076858764	WITHOUT_CLASSIFICATION	3.2092314123604855E-4	DESIGN
// For an explicit many-to-many relationship, add a second join from the intermediate  // (many-to-many) table to the destination table.  Also, make sure that the from element's  // idea of the destination is the destination table.	WITHOUT_CLASSIFICATION	0.9999976335728639	WITHOUT_CLASSIFICATION	2.366427136100807E-6	DESIGN
// Reset the node type, because the rest of the system is expecting FROM_FRAGMENT, all we wanted was // for the factory to create the right sub-class.  This might get reset again later on anyway to make the // SQL generation simpler.	WITHOUT_CLASSIFICATION	0.9437604364214393	WITHOUT_CLASSIFICATION	0.05623956357856079	DESIGN
//explicit = true;	WITHOUT_CLASSIFICATION	0.9998558682280052	WITHOUT_CLASSIFICATION	1.4413177199481324E-4	DESIGN
//sqlResultTypeList.add( type ); // Generate the select expression.	WITHOUT_CLASSIFICATION	0.999922252220322	WITHOUT_CLASSIFICATION	7.774777967788573E-5	DESIGN
// If the expression list has exactly one expression, and the type of the expression is a collection // then this might be a collection function, such as index(c) or size(c).	WITHOUT_CLASSIFICATION	0.9994479774838927	WITHOUT_CLASSIFICATION	5.520225161073054E-4	DESIGN
// Need to parse off the column qualifiers; this is assuming (which is true as of now) // that this is only used from update and delete HQL statement parsing	WITHOUT_CLASSIFICATION	0.9926871348490358	WITHOUT_CLASSIFICATION	0.007312865150964186	DESIGN
// for regression testing against output from the old parser... // found it easiest to simply reorder the FromElements here into ascending order // in terms of injecting them into the resulting sql ast in orders relative to those // expected by the old parser; this is definitely another of those "only needed // for regression purposes".  The SyntheticAndFactory, then, simply injects them as it // encounters them.	WITHOUT_CLASSIFICATION	0.9999999300362276	WITHOUT_CLASSIFICATION	6.996377243300466E-8	DESIGN
// The uber-rule here is that we need to include  subclass joins if // the FromElement is in any way dereferenced by a property from // the subclass table; otherwise we end up with column references // qualified by a non-existent table reference in the resulting SQL...	WITHOUT_CLASSIFICATION	0.9983855444273441	WITHOUT_CLASSIFICATION	0.0016144555726559122	DESIGN
// classic translator does not support collection of ordinal // param metadata	WITHOUT_CLASSIFICATION	0.9971411950672163	WITHOUT_CLASSIFICATION	0.002858804932783619	DESIGN
// The following variables are stacks that keep information about each subexpression // in the list of nested subexpressions we are currently processing.	WITHOUT_CLASSIFICATION	0.9975413792508752	WITHOUT_CLASSIFICATION	0.0024586207491248493	DESIGN
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999973637567814	WITHOUT_CLASSIFICATION	2.6362432186087576E-6	DESIGN
// should not be able to reach last without maxPosition being set // unless there are no results	WITHOUT_CLASSIFICATION	0.9995775764858001	WITHOUT_CLASSIFICATION	4.224235141998186E-4	DESIGN
// we found it in the temp PC.  Should indicate we are in the midst of processing a result set // containing eager fetches via join fetch	WITHOUT_CLASSIFICATION	0.9995155883243555	WITHOUT_CLASSIFICATION	4.8441167564447637E-4	DESIGN
//do not use proxiesByKey, since not all //proxies that point to this session's //instances are in that collection!	WITHOUT_CLASSIFICATION	0.9994601463139594	WITHOUT_CLASSIFICATION	5.398536860405104E-4	DESIGN
// if there is no TM configured, we will not be able to access // the javax.transaction.Transaction object in order to // register a synch anyway.	WITHOUT_CLASSIFICATION	0.9997504241553655	WITHOUT_CLASSIFICATION	2.495758446344328E-4	DESIGN
// Since the result set cursor is always left at the first // physical row after the "last processed", we need to jump // back one position to get the key value we are interested // in skipping	WITHOUT_CLASSIFICATION	0.9999997103093506	WITHOUT_CLASSIFICATION	2.8969064933326397E-7	DESIGN
//true if this is a query and we are loading multiple instances of the same collection role //otherwise this is a CollectionInitializer and we are loading up a single collection or batch	WITHOUT_CLASSIFICATION	0.998400303896542	WITHOUT_CLASSIFICATION	0.0015996961034580794	DESIGN
// we don't need to worry about existing version being uninitialized // because this block isn't called by a re-entrant load (re-entrant // loads _always_ have lock mode NONE)	WITHOUT_CLASSIFICATION	0.9925843903086198	WITHOUT_CLASSIFICATION	0.0074156096913801615	DESIGN
// add temp entry so that the next step is circular-reference // safe - only needed because some types don't take proper // advantage of two-phase-load (esp. components)	WITHOUT_CLASSIFICATION	0.9999835477053174	WITHOUT_CLASSIFICATION	1.645229468256588E-5	DESIGN
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9989452422126355	WITHOUT_CLASSIFICATION	0.0010547577873645142	DESIGN
// log a message about potential connection leaks	WITHOUT_CLASSIFICATION	0.999884514313916	WITHOUT_CLASSIFICATION	1.1548568608400212E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.999679076858764	WITHOUT_CLASSIFICATION	3.2092314123604855E-4	DESIGN
// this has been shown to happen occasionally in rare cases // when using a transaction manager + transaction-timeout // where the timeout calls back through Hibernate's // registered transaction synchronization on a separate // "reaping" thread.  In cases where that reaping thread // executes through this block at the same time the main // application thread does we can get into situations where // these CMEs occur.  And though it is not "allowed" per-se, // the end result without handling it specifically is infinite // looping.  So here, we simply break the loop	WITHOUT_CLASSIFICATION	0.9986829142837479	WITHOUT_CLASSIFICATION	0.0013170857162520804	DESIGN
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9941879928333784	WITHOUT_CLASSIFICATION	0.005812007166621655	DESIGN
// can't cache this stuff either (per-invocation) // we are given a map of user-alias -> lock mode // create a new map of sql-alias -> lock mode	WITHOUT_CLASSIFICATION	0.9994061903302974	WITHOUT_CLASSIFICATION	5.938096697025491E-4	DESIGN
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns //getCollectionTable().createUniqueKey( getIdentifier().getConstraintColumns() );	WITHOUT_CLASSIFICATION	0.9993897850514266	WITHOUT_CLASSIFICATION	6.102149485734383E-4	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995023273583846	WITHOUT_CLASSIFICATION	4.976726416153814E-4	DESIGN
//isSet = collection.isSet(); //isSorted = collection.isSorted();	WITHOUT_CLASSIFICATION	0.9996088335948893	WITHOUT_CLASSIFICATION	3.911664051107176E-4	DESIGN
//lists, arrays //sets, maps, bags	WITHOUT_CLASSIFICATION	0.9980783723767761	WITHOUT_CLASSIFICATION	0.0019216276232237968	DESIGN
// we finish all the "removes" first to take care of possible unique // constraints and so that we can take better advantage of batching	WITHOUT_CLASSIFICATION	0.9987030461920021	WITHOUT_CLASSIFICATION	0.0012969538079978383	DESIGN
//use a combination of foreign key columns and pk columns, since //the ordering of removal and addition is not guaranteed when //a child moves from one parent to another	WITHOUT_CLASSIFICATION	0.9999758484393017	WITHOUT_CLASSIFICATION	2.4151560698368065E-5	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995023273583846	WITHOUT_CLASSIFICATION	4.976726416153814E-4	DESIGN
//information about properties of this class, //including inherited properties //(only really needed for updatable/insertable properties)	WITHOUT_CLASSIFICATION	0.9942223804944991	WITHOUT_CLASSIFICATION	0.005777619505500864	DESIGN
// all this only really needs to consider properties // of this class, not its subclasses, but since we // are reusing code used for sequential selects, we // use the subclass closure	WITHOUT_CLASSIFICATION	0.9357936964375269	DESIGN	0.0642063035624732	WITHOUT_CLASSIFICATION
// Here we render the select column list based on the properties defined as being generated. // For partial component generation, we currently just re-select the whole component // rather than trying to handle the individual generated portions.	WITHOUT_CLASSIFICATION	0.9999996987967567	WITHOUT_CLASSIFICATION	3.012032432468681E-7	DESIGN
// this is the root (versioned) table, and we are using version-based // optimistic locking;  if we are not updating the version, also don't // check it (unless this is a "generated" version column)!	WITHOUT_CLASSIFICATION	0.9936277680109209	WITHOUT_CLASSIFICATION	0.0063722319890791735	DESIGN
//optimistic-lock="all", include all updatable properties //optimistic-lock="dirty", include all properties we are updating this time	WITHOUT_CLASSIFICATION	0.9996429684084925	WITHOUT_CLASSIFICATION	3.570315915075243E-4	DESIGN
// this property belongs to the table, and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9380273351639814	WITHOUT_CLASSIFICATION	0.061972664836018605	DESIGN
// check to see if the connection is in auto-commit  // mode (no connection means aggressive connection // release outside a JTA transaction context, so MUST // be autocommit mode)	WITHOUT_CLASSIFICATION	0.9982802975519458	WITHOUT_CLASSIFICATION	0.0017197024480541641	DESIGN
// need to treat this as if it where optimistic-lock="all" (dirty does *not* make sense); // first we need to locate the "loaded" state // // Note, it potentially could be a proxy, so perform the location the safe way...	WITHOUT_CLASSIFICATION	0.998982270350264	WITHOUT_CLASSIFICATION	0.0010177296497360156	DESIGN
// we *always* assume an instance with a null // identifier or no identifier property is unsaved!	WITHOUT_CLASSIFICATION	0.9975587783258228	WITHOUT_CLASSIFICATION	0.002441221674177277	DESIGN
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.9995356650134535	WITHOUT_CLASSIFICATION	4.6433498654649137E-4	DESIGN
//allow any identifier quoted with backtick //only recognizes identifiers beginning with a letter	WITHOUT_CLASSIFICATION	0.9973311728345455	WITHOUT_CLASSIFICATION	0.0026688271654545064	DESIGN
//following doesn't handle (null, not null) but unnecessary //since this would mean all rows	WITHOUT_CLASSIFICATION	0.9368631931975256	WITHOUT_CLASSIFICATION	0.06313680680247429	DESIGN
// IMPL NOTE : due to the delayed population of setters (setters cached // 	WITHOUT_CLASSIFICATION	0.9998937841943641	WITHOUT_CLASSIFICATION	1.0621580563585596E-4	DESIGN
// we need to dirty check collections, since they can cause an owner // version number increment	WITHOUT_CLASSIFICATION	0.9998877194560248	WITHOUT_CLASSIFICATION	1.122805439750532E-4	DESIGN
//return the id, so we can use it to reset the proxy id //return result;	WITHOUT_CLASSIFICATION	0.9996576892598306	WITHOUT_CLASSIFICATION	3.423107401694509E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.999679076858764	WITHOUT_CLASSIFICATION	3.2092314123604855E-4	DESIGN
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9065893983070904	WITHOUT_CLASSIFICATION	0.0934106016929096	DESIGN
// We now have the value of the property-ref we reference.  However, // we need to dig a little deeper, as that property might also be // an entity type, in which case we need to resolve its identitifier	WITHOUT_CLASSIFICATION	0.9999424285397812	WITHOUT_CLASSIFICATION	5.7571460218768424E-5	DESIGN
// Retrieve the value of the designated column in the current row of this // ResultSet object as a java.io.Reader object	WITHOUT_CLASSIFICATION	0.9999650013022735	WITHOUT_CLASSIFICATION	3.499869772659981E-5	DESIGN
//not absolutely necessary, but helps for some //equals()/hashCode() implementations	WITHOUT_CLASSIFICATION	0.9994806580648571	WITHOUT_CLASSIFICATION	5.193419351428842E-4	DESIGN
//this should be a call to resolve(), not resolveIdentifier(),  //'cos it might be a property-ref, and we did not cache the //referenced value	WITHOUT_CLASSIFICATION	0.5881106112677115	WITHOUT_CLASSIFICATION	0.41188938873228853	DESIGN
// If we have <tt>not-found="ignore"</tt> association mapped to a // formula, we always need to dirty check it, so we can update the // second-level cache	WITHOUT_CLASSIFICATION	0.9968753792214013	WITHOUT_CLASSIFICATION	0.003124620778598649	DESIGN
// can't just return null here, since that would // cause an owning component to become null	WITHOUT_CLASSIFICATION	0.9999761959305811	WITHOUT_CLASSIFICATION	2.3804069418972653E-5	DESIGN
//for arrays, replaceElements() may return a different reference, since //the array length might not match	WITHOUT_CLASSIFICATION	0.9877492970546942	WITHOUT_CLASSIFICATION	0.012250702945305801	DESIGN
// actual cache of the entries.  soft references are used for both the keys and the // values here since the values pertaining to the MRU entries are kept in a // seperate hard reference cache (to avoid their enqueuement/garbage-collection).	WITHOUT_CLASSIFICATION	0.9997783569869385	WITHOUT_CLASSIFICATION	2.2164301306153812E-4	DESIGN
// as soon as we encounter our first letter, return the substring // from that position	WITHOUT_CLASSIFICATION	0.9999543461350849	WITHOUT_CLASSIFICATION	4.565386491503379E-5	DESIGN
// Note : expected in the syntax: //      type=listenerClass //          ({sep}type=listenerClass)* // where {sep} is any whitespace or comma	WITHOUT_CLASSIFICATION	0.9999922098118502	WITHOUT_CLASSIFICATION	7.79018814982242E-6	DESIGN
// isTransactionCallbackRegistered denotes whether any Hibernate // Transaction has registered as a callback against this // JDBCContext; only one such callback is allowed.  Directly // serializing this value causes problems with JDBCTransaction, // or really any Transaction impl where the callback is local // to the Transaction instance itself, since that Transaction // is not serialized along with the JDBCContext.  Thus we // handle that fact here explicitly...	WITHOUT_CLASSIFICATION	0.9996994034755968	WITHOUT_CLASSIFICATION	3.005965244031026E-4	DESIGN
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9987279653079374	WITHOUT_CLASSIFICATION	0.0012720346920625488	DESIGN
// We call getKeyFromResultSet() here so that we can know the // key value upon which to perform the breaking logic.  However, // it is also then called from getRowFromResultSet() which is certainly // not the most efficient.  But the call here is needed, and there // currently is no other way without refactoring of the doQuery()/getRowFromResultSet() // methods	WITHOUT_CLASSIFICATION	0.5508142901848	WITHOUT_CLASSIFICATION	0.4491857098152	DESIGN
// This check is needed since processing leaves the cursor // after the last physical row for the current logical row; // thus if we are after the last physical row, this might be // caused by either: //      1) scrolling to the last logical row //      2) scrolling past the last logical row // In the latter scenario, the previous logical row // really is the last logical row. // // In all other cases, we should process back two // logical records (the current logic row, plus the // previous logical row).	WITHOUT_CLASSIFICATION	0.9832718089614606	WITHOUT_CLASSIFICATION	0.016728191038539418	DESIGN
// and perform the load	WITHOUT_CLASSIFICATION	0.999402299245498	WITHOUT_CLASSIFICATION	5.977007545020905E-4	DESIGN
//important: reuse the same event instances for performance!	WITHOUT_CLASSIFICATION	0.9993798632590605	WITHOUT_CLASSIFICATION	6.201367409395352E-4	DESIGN
//this is a query and we are loading multiple instances of the same collection role	WITHOUT_CLASSIFICATION	0.9965189085569417	WITHOUT_CLASSIFICATION	0.003481091443058325	DESIGN
// we found a collection element in the result set	WITHOUT_CLASSIFICATION	0.9992165142858587	WITHOUT_CLASSIFICATION	7.834857141412892E-4	DESIGN
// we did not find a collection element in the result set, so we // ensure that a collection is created with the owner's identifier, // since what we have is an empty collection	WITHOUT_CLASSIFICATION	0.9999827241340755	WITHOUT_CLASSIFICATION	1.7275865924436318E-5	DESIGN
// this is a collection initializer, so we must create a collection // for each of the passed-in keys, to account for the possibility // that the collection is empty and has no rows in the result set	WITHOUT_CLASSIFICATION	0.9790845554825117	WITHOUT_CLASSIFICATION	0.020915444517488273	DESIGN
// grab its state from the ResultSet and keep it in the Session // (but don't yet initialize the object itself) // note that we acquire LockMode.READ even if it was not requested	WITHOUT_CLASSIFICATION	0.999480618182605	WITHOUT_CLASSIFICATION	5.193818173949547E-4	DESIGN
// a many-to-many; // decrement currentDepth here to allow join across the association table // without exceeding MAX_FETCH_DEPTH (i.e. the "currentDepth - 1" bit)	WITHOUT_CLASSIFICATION	0.9951281745214057	WITHOUT_CLASSIFICATION	0.004871825478594321	DESIGN
// if not a composite key, use "foo in (?, ?, ?)" for batching // if no batch, and not a composite key, use "foo = ?"	WITHOUT_CLASSIFICATION	0.999175341274608	WITHOUT_CLASSIFICATION	8.246587253919544E-4	DESIGN
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999441679559643	WITHOUT_CLASSIFICATION	5.5832044035802724E-5	DESIGN
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9996140207989498	WITHOUT_CLASSIFICATION	3.8597920105025885E-4	DESIGN
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9996140207989498	WITHOUT_CLASSIFICATION	3.8597920105025885E-4	DESIGN
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.9994139364441949	WITHOUT_CLASSIFICATION	5.860635558052671E-4	DESIGN
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9998402641739718	WITHOUT_CLASSIFICATION	1.5973582602823522E-4	DESIGN
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9998056459120788	WITHOUT_CLASSIFICATION	1.9435408792131044E-4	DESIGN
/**	WITHOUT_CLASSIFICATION	0.8519776918033966	DESIGN	0.1480223081966034	WITHOUT_CLASSIFICATION
// ignore	WITHOUT_CLASSIFICATION	0.999855661645043	WITHOUT_CLASSIFICATION	1.4433835495695786E-4	DESIGN
// ignore	WITHOUT_CLASSIFICATION	0.999855661645043	WITHOUT_CLASSIFICATION	1.4433835495695786E-4	DESIGN
//        }	WITHOUT_CLASSIFICATION	0.997147258444823	WITHOUT_CLASSIFICATION	0.0028527415551770187	DESIGN
//	WITHOUT_CLASSIFICATION	0.999679076858764	WITHOUT_CLASSIFICATION	3.2092314123604855E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.999679076858764	WITHOUT_CLASSIFICATION	3.2092314123604855E-4	DESIGN
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9979744996192299	WITHOUT_CLASSIFICATION	0.0020255003807700387	DESIGN
//	WITHOUT_CLASSIFICATION	0.999679076858764	WITHOUT_CLASSIFICATION	3.2092314123604855E-4	DESIGN
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.9999376477317655	WITHOUT_CLASSIFICATION	6.235226823452341E-5	DESIGN
// at this point we have (drivingSqlAlias) the SQL alias of the driving table // corresponding to the given user alias.  However, the driving table is not // (necessarily) the table against which we want to apply locks.  Mainly, // the exception case here is joined-subclass hierarchies where we instead // want to apply the lock against the root table (for all other strategies, // it just happens that driving and root are the same).	WITHOUT_CLASSIFICATION	0.9999986342599996	WITHOUT_CLASSIFICATION	1.3657400004158728E-6	DESIGN
// the column doesnt exist at all.	WITHOUT_CLASSIFICATION	0.9999398217868146	WITHOUT_CLASSIFICATION	6.0178213185310997E-5	DESIGN
// we have a mapped identifier property and the root of // the incoming property path matched that identifier // property	WITHOUT_CLASSIFICATION	0.9998681784239607	WITHOUT_CLASSIFICATION	1.3182157603931896E-4	DESIGN
// we have an embedded composite identifier	WITHOUT_CLASSIFICATION	0.9982274709068805	WITHOUT_CLASSIFICATION	0.0017725290931194992	DESIGN
// both many-to-one and one-to-one are represented as a // Property.  EntityPersister is relying on this value to // determine "lazy fetch groups" in terms of field-level // interception.  So we need to make sure that we return // true here for the case of many-to-one and one-to-one // with lazy="no-proxy" // // * impl note - lazy="no-proxy" currently forces both // lazy and unwrap to be set to true.  The other case we // are extremely interested in here is that of lazy="proxy" // where lazy is set to true, but unwrap is set to false. // thus we use both here under the assumption that this // return is really only ever used during persister // construction to determine the lazy property/field fetch // groupings.  If that assertion changes then this check // needs to change as well.  Partially, this is an issue with // the overloading of the term "lazy" here...	WITHOUT_CLASSIFICATION	0.5565359467839066	WITHOUT_CLASSIFICATION	0.44346405321609333	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996462839585436	WITHOUT_CLASSIFICATION	3.537160414563929E-4	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996462839585436	WITHOUT_CLASSIFICATION	3.537160414563929E-4	DESIGN
/*rootTableName = persistentClass.getRootTable().getQualifiedName( 	WITHOUT_CLASSIFICATION	0.9996088335948893	WITHOUT_CLASSIFICATION	3.911664051107176E-4	DESIGN
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9991367392007966	WITHOUT_CLASSIFICATION	8.632607992033527E-4	DESIGN
// Custom sql	WITHOUT_CLASSIFICATION	0.9997375399860463	WITHOUT_CLASSIFICATION	2.624600139537756E-4	DESIGN
/*protected void initPropertyPaths(	WITHOUT_CLASSIFICATION	0.9978647133144358	WITHOUT_CLASSIFICATION	0.002135286685564251	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994664167093965	WITHOUT_CLASSIFICATION	5.335832906034879E-4	DESIGN
//Custom SQL (would be better if these were private)	WITHOUT_CLASSIFICATION	0.9690157343234358	WITHOUT_CLASSIFICATION	0.030984265676564166	DESIGN
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.989877058973082	WITHOUT_CLASSIFICATION	0.010122941026917883	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994664167093965	WITHOUT_CLASSIFICATION	5.335832906034879E-4	DESIGN
// aliases for identifier ( alias.id ); skip if the entity defines a non-id property named 'id'	WITHOUT_CLASSIFICATION	0.9992076485715916	WITHOUT_CLASSIFICATION	7.923514284082954E-4	DESIGN
//decide which ResultSet to get the property value from:	WITHOUT_CLASSIFICATION	0.9994684296522844	WITHOUT_CLASSIFICATION	5.315703477156069E-4	DESIGN
//note: it is conceptually possible that a UserType could map null to //	WITHOUT_CLASSIFICATION	0.994145927692209	WITHOUT_CLASSIFICATION	0.005854072307790952	DESIGN
// the contract of EntityTuplizer.determineConcreteSubclassEntityName says that returning null // is an indication that the specified entity-name (this.getEntityName) should be used.	WITHOUT_CLASSIFICATION	0.9021999159836366	WITHOUT_CLASSIFICATION	0.09780008401636343	DESIGN
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.9995356650134535	WITHOUT_CLASSIFICATION	4.6433498654649137E-4	DESIGN
// cache these since they are stateless // this one could even be static...	WITHOUT_CLASSIFICATION	0.5879496394350586	WITHOUT_CLASSIFICATION	0.41205036056494143	DESIGN
//"as" is not in KEYWORDS	WITHOUT_CLASSIFICATION	0.9858090870033099	WITHOUT_CLASSIFICATION	0.014190912996690166	DESIGN
// --Commented out by Inspection (12/4/04 9:10 AM): public abstract void addCondition(String alias, String[] columns, String condition);	WITHOUT_CLASSIFICATION	0.999860159912913	WITHOUT_CLASSIFICATION	1.3984008708702495E-4	DESIGN
//use the id column alias	WITHOUT_CLASSIFICATION	0.9999461984111251	WITHOUT_CLASSIFICATION	5.380158887497223E-5	DESIGN
//private List aliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999804362880642	WITHOUT_CLASSIFICATION	1.956371193572102E-5	DESIGN
//columns.add(columnName); //aliases.add(tableAlias);	WITHOUT_CLASSIFICATION	0.9986810053377232	WITHOUT_CLASSIFICATION	0.0013189946622768059	DESIGN
//where fragment must be empty!	WITHOUT_CLASSIFICATION	0.9673155035792718	WITHOUT_CLASSIFICATION	0.03268449642072818	DESIGN
// revert to traditional hibernate behavior of setting initialPoolSize to minPoolSize // unless otherwise specified with a c3p0.*-style parameter.	WITHOUT_CLASSIFICATION	0.9997368758744317	WITHOUT_CLASSIFICATION	2.631241255683144E-4	DESIGN
//arbitrary on clause ignored!!	WITHOUT_CLASSIFICATION	0.9990314432048668	WITHOUT_CLASSIFICATION	9.685567951331184E-4	DESIGN
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9914284845263596	WITHOUT_CLASSIFICATION	0.008571515473640398	DESIGN
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9914284845263596	WITHOUT_CLASSIFICATION	0.008571515473640398	DESIGN
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9993100678462565	WITHOUT_CLASSIFICATION	6.899321537434827E-4	DESIGN
// Essentially: // 1) If we have a local (Hibernate) transaction in progress //      and it already has the UserTransaction cached, use that //      UserTransaction to determine the status. // 2) If a transaction manager has been located, use //      that transaction manager to determine the status. // 3) Finally, as the last resort, try to lookup the //      UserTransaction via JNDI and use that to determine the //      status.	WITHOUT_CLASSIFICATION	0.9999953593980021	WITHOUT_CLASSIFICATION	4.64060199795413E-6	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.9980112233897486	WITHOUT_CLASSIFICATION	0.0019887766102513788	DESIGN
//swallow it (the transaction _was_ successful or successfully rolled back)	WITHOUT_CLASSIFICATION	0.9994052816692134	WITHOUT_CLASSIFICATION	5.947183307866422E-4	DESIGN
// ignore it	WITHOUT_CLASSIFICATION	0.9996070875600416	WITHOUT_CLASSIFICATION	3.929124399583953E-4	DESIGN
// we need to dirty check many-to-ones with not-found="ignore" in order  // to update the cache (not the database), since in this case a null // entity reference can lose information	WITHOUT_CLASSIFICATION	0.7145709354415698	WITHOUT_CLASSIFICATION	0.28542906455843015	DESIGN
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9996719425153034	WITHOUT_CLASSIFICATION	3.280574846965633E-4	DESIGN
// Regions can get instantiated in the course of normal work (e.g. // a named query region will be created the first time the query is // executed), so suspend any ongoing tx	WITHOUT_CLASSIFICATION	0.9999867156021549	WITHOUT_CLASSIFICATION	1.3284397844980433E-5	DESIGN
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9987060667874921	WITHOUT_CLASSIFICATION	0.0012939332125079992	DESIGN
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999270304364045	WITHOUT_CLASSIFICATION	7.296956359548154E-5	DESIGN
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9899701364838621	WITHOUT_CLASSIFICATION	0.010029863516137943	DESIGN
// NOTE : this is being used from the process of shutting down a // SessionFactory. Specific things to consider: // (1) this clearing of the region should not propagate to // other nodes on the cluster (if any); this is the // cache-mode-local option bit... // (2) really just trying a best effort to cleanup after // ourselves; lock failures, etc are not critical here; // this is the fail-silently option bit...	WITHOUT_CLASSIFICATION	0.644460522870284	DESIGN	0.3555394771297161	WITHOUT_CLASSIFICATION
// need to extract the component values and check for subtype replacements...	WITHOUT_CLASSIFICATION	0.9999664917047439	WITHOUT_CLASSIFICATION	3.350829525603786E-5	DESIGN
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.999983619157951	WITHOUT_CLASSIFICATION	1.6380842049077942E-5	DESIGN
// for now, just "re-flatten" the metamodel since this is temporary stuff anyway (HHH-1907)	WITHOUT_CLASSIFICATION	0.5486426262734327	WITHOUT_CLASSIFICATION	0.4513573737265673	DESIGN
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9988600501537485	WITHOUT_CLASSIFICATION	0.0011399498462514527	DESIGN
//This solution would allow us to eliminate the owner arg to disassemble(), but //what if the collection was null, and then later had elements added? seems unsafe //session.getPersistenceContext().getCollectionEntry( (PersistentCollection) value ).getKey();	WITHOUT_CLASSIFICATION	0.9846206349860636	WITHOUT_CLASSIFICATION	0.015379365013936386	DESIGN
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9991479265310682	WITHOUT_CLASSIFICATION	8.520734689317519E-4	DESIGN
// some collections are not lazy:	WITHOUT_CLASSIFICATION	0.9975076721742888	WITHOUT_CLASSIFICATION	0.0024923278257111625	DESIGN
// Here we don't want to suspend the tx. If we do: // 1) We might be caching query results that reflect uncommitted // changes. No tx == no WL on cache node, so other threads // can prematurely see those query results // 2) No tx == immediate replication. More overhead, plus we // spread issue #1 above around the cluster	WITHOUT_CLASSIFICATION	0.9972605867085592	WITHOUT_CLASSIFICATION	0.002739413291440847	DESIGN
// return the (fully resolved) identifier value, but do not resolve // to the actual referenced entity instance // NOTE: the owner of the association is not really the owner of the id!	WITHOUT_CLASSIFICATION	0.9936974649378102	WITHOUT_CLASSIFICATION	0.006302535062189772	DESIGN
// Add a zero (or quite low) timeout option so we don't block. // Ignore any TimeoutException. Basically we forego caching the // query result in order to avoid blocking. // Reads are done with suspended tx, so they should not hold the // lock for long.  Not caching the query result is OK, since // any subsequent read will just see the old result with its // out-of-date timestamp; that result will be discarded and the // db query performed again.	WITHOUT_CLASSIFICATION	0.9999995952006104	WITHOUT_CLASSIFICATION	4.047993896401652E-7	DESIGN
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9976065171306441	WITHOUT_CLASSIFICATION	0.002393482869355962	DESIGN
// We have the JBCWriteMutex, so no other *local* thread will  // be trying to write this key.  // It's possible here some remote thread has come in and // changed the values again, but since we are reading the // values to write to JBC right now, we know we are writing // the latest values; i.e. we don't assume that what we cached // in entry.update() above is what we should write to JBC *now*. // Our write could be redundant, i.e. we are writing what // some remote thread just came in an wrote.  There is a chance  // that yet another remote thread will update us, and we'll then // overwrite that later data in JBC.  But, all remote nodes will // ignore that change in their localCache; the only place it  // will live will be in JBC, where it can only effect the  // initial state transfer values on newly joined nodes  // (i.e. populateLocalCache()).	WITHOUT_CLASSIFICATION	0.9994783821793803	WITHOUT_CLASSIFICATION	5.216178206196115E-4	DESIGN
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9990441941963997	WITHOUT_CLASSIFICATION	9.55805803600384E-4	DESIGN
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9990441941963997	WITHOUT_CLASSIFICATION	9.55805803600384E-4	DESIGN
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9999854176328422	WITHOUT_CLASSIFICATION	1.4582367157895008E-5	DESIGN
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9985577590059053	WITHOUT_CLASSIFICATION	0.001442240994094718	DESIGN
// we need to obtain the lock before any actions are // executed, since this may be an inverse="true" // bidirectional association and it is one of the // earlier entity actions which actually updates // the database (this action is resposible for // second-level cache invalidation only)	WITHOUT_CLASSIFICATION	0.9807344878931671	WITHOUT_CLASSIFICATION	0.01926551210683294	DESIGN
//postDelete: // After actually deleting a row, record the fact that the instance no longer  // exists on the database (needed for identity-column key generation), and // remove it from the session cache	WITHOUT_CLASSIFICATION	0.9963976169273725	WITHOUT_CLASSIFICATION	0.0036023830726274264	DESIGN
// intentionally empty	WITHOUT_CLASSIFICATION	0.9992846058592043	WITHOUT_CLASSIFICATION	7.153941407956005E-4	DESIGN
// todo : what else to do here?	DESIGN	0.9898336608478402	WITHOUT_CLASSIFICATION	0.01016633915215989	DESIGN
//put() has nowait semantics, is this really appropriate? //note that it needs to be async replication, never local or sync	DESIGN	0.848508547589366	WITHOUT_CLASSIFICATION	0.15149145241063397	DESIGN
// 'hibernate.temp.use_jdbc_metadata_defaults' is a temporary magic value. // The need for it is intended to be alleviated with future developement, thus it is // not defined as an Environment constant... // // it is used to control whether we should consult the JDBC metadata to determine // certain Settings default values; it is useful to *not* do this when the database // may not be available (mainly in tools usage).	DESIGN	0.9996940281402263	DESIGN	3.059718597736552E-4	WITHOUT_CLASSIFICATION
//TODO: get SQL rendering out of this package!	DESIGN	0.6497621403427384	WITHOUT_CLASSIFICATION	0.3502378596572617	DESIGN
//TODO: get SQL rendering out of this package!	DESIGN	0.6497621403427384	WITHOUT_CLASSIFICATION	0.3502378596572617	DESIGN
// todo : eventually merge this with TreeCache and just add optional opt-lock support there.	DESIGN	0.9978754180001033	WITHOUT_CLASSIFICATION	0.00212458199989674	DESIGN
// can happen because of the multiple ways Cache.remove() // can be invoked :(	DESIGN	0.9999653477473478	WITHOUT_CLASSIFICATION	3.46522526522169E-5	DESIGN
// work around the "feature" where tree cache is validating the // inserted node during the next transaction.  no idea...	DESIGN	0.9390195008667461	WITHOUT_CLASSIFICATION	0.060980499133253784	DESIGN
/**     * FIXME Per the RegionFactory class Javadoc, this constructor version     * should not be necessary.     *      * @param props The configuration properties     */	DESIGN	0.9990496139620104	DESIGN	9.503860379896425E-4	WITHOUT_CLASSIFICATION
/**     * FIXME Per the RegionFactory class Javadoc, this constructor version     * should not be necessary.     *      * @param props The configuration properties     */	DESIGN	0.9990496139620104	DESIGN	9.503860379896425E-4	WITHOUT_CLASSIFICATION
// FIXME Hacky workaround to JBCACHE-1202	DESIGN	0.9995563764289662	DESIGN	4.4362357103380475E-4	WITHOUT_CLASSIFICATION
// FIXME Hacky workaround to JBCACHE-1202	DESIGN	0.9995563764289662	DESIGN	4.4362357103380475E-4	WITHOUT_CLASSIFICATION
// TODO: I considered validating TS cache config here, // but decided to defer unti getTimestampsCacheInstance() in case the  // cache is never actually used	DESIGN	0.9999624589658711	DESIGN	3.7541034128896546E-5	WITHOUT_CLASSIFICATION
// TODO Is this a valid operation on a timestamps cache?	DESIGN	0.888196068403197	DESIGN	0.11180393159680307	WITHOUT_CLASSIFICATION
// TODO Is this a valid operation on a timestamps cache?	DESIGN	0.888196068403197	DESIGN	0.11180393159680307	WITHOUT_CLASSIFICATION
// TODO Why not use the timestamp in a DataVersion?	DESIGN	0.994260929692855	DESIGN	0.005739070307145014	WITHOUT_CLASSIFICATION
// can happen because of the multiple ways Cache.remove() // can be invoked :(	DESIGN	0.9999653477473478	WITHOUT_CLASSIFICATION	3.46522526522169E-5	DESIGN
// work around the "feature" where tree cache is validating the // inserted node during the next transaction. no idea...	DESIGN	0.9533396122048078	WITHOUT_CLASSIFICATION	0.04666038779519222	DESIGN
//swaldman 2004-02-07: modify to allow null values to signify fall through to c3p0 PoolConfig defaults	DESIGN	0.9993347214938386	WITHOUT_CLASSIFICATION	6.652785061612563E-4	DESIGN
// turn hibernate.c3p0.* into c3p0.*, so c3p0 // gets a chance to see all hibernate.c3p0.*	DESIGN	0.9578151036498649	WITHOUT_CLASSIFICATION	0.0421848963501351	DESIGN
//TODO: this bit actually has to be called after all cascades! //      but since identity insert is called *synchronously*, //      instead of asynchronously as other actions, it isn't	DESIGN	0.7724452812518435	DESIGN	0.22755471874815636	WITHOUT_CLASSIFICATION
//TODO: reenable if we also fix the above todo	DESIGN	0.8052561622749874	DESIGN	0.1947438377250127	WITHOUT_CLASSIFICATION
//TODO: inefficient if that cache is just going to ignore the updated state!	DESIGN	0.9859387374583769	WITHOUT_CLASSIFICATION	0.014061262541623194	DESIGN
// we may be screwed here since the collection action is about to execute // and we do not know the final owner key value	DESIGN	0.9997061071181313	WITHOUT_CLASSIFICATION	2.938928818685953E-4	DESIGN
/** Create an action that will evict collection and entity regions based on queryspaces (table names).	DESIGN	0.9349591079067671	DESIGN	0.06504089209323301	WITHOUT_CLASSIFICATION
// todo : what else to do here?	DESIGN	0.9898336608478402	WITHOUT_CLASSIFICATION	0.01016633915215989	DESIGN
// todo : modify the class definition if not already transformed...	DESIGN	0.9987759356848787	WITHOUT_CLASSIFICATION	0.0012240643151213181	DESIGN
// todo : what else to do here?	DESIGN	0.9898336608478402	WITHOUT_CLASSIFICATION	0.01016633915215989	DESIGN
// this is called by SessionFactory irregardless; we just disregard here; // could also add a check to SessionFactory to only conditionally call start	DESIGN	0.992345249787781	WITHOUT_CLASSIFICATION	0.007654750212219041	DESIGN
// this is called by SessionFactory irregardless; we just disregard here; // could also add a check to SessionFactory to only conditionally call stop	DESIGN	0.9836876620680346	WITHOUT_CLASSIFICATION	0.016312337931965345	DESIGN
//TODO: to handle concurrent writes correctly, this should return a Lock to the client	DESIGN	0.9736212232933561	DESIGN	0.026378776706643958	WITHOUT_CLASSIFICATION
//put() has nowait semantics, is this really appropriate? //note that it needs to be async replication, never local or sync	DESIGN	0.848508547589366	WITHOUT_CLASSIFICATION	0.15149145241063397	DESIGN
//TODO: to handle concurrent writes correctly, the client should pass in a Lock	DESIGN	0.6554130354956753	DESIGN	0.34458696450432474	WITHOUT_CLASSIFICATION
//TODO: assumes all collections disassemble to an array!	DESIGN	0.9972039048694267	WITHOUT_CLASSIFICATION	0.002796095130573409	DESIGN
//TODO: reuse the PreLoadEvent	DESIGN	0.9009625189174625	WITHOUT_CLASSIFICATION	0.09903748108253756	DESIGN
// todo: this was added to support initializing an entity's EntityEntry snapshot during reattach; // this should be refactored to instead expose a method to assemble a EntityEntry based on this // state for return.	DESIGN	0.6230126872314626	WITHOUT_CLASSIFICATION	0.3769873127685375	DESIGN
// todo : what is the implication of this?	DESIGN	0.9597247294988711	WITHOUT_CLASSIFICATION	0.04027527050112887	DESIGN
// use COUNT as the default.  This mimics the old behavior, although // NONE might be a better option moving forward in the case of callable	DESIGN	0.9305810797107305	WITHOUT_CLASSIFICATION	0.0694189202892695	DESIGN
/* TODO: joinKeyColumnName & foreignKeyColumnName should be called either here or at a	DESIGN	0.9998942303285221	DESIGN	1.0576967147785347E-4	WITHOUT_CLASSIFICATION
//TODO: suck this into initLaziness!	DESIGN	0.6817755453254839	DESIGN	0.3182244546745161	WITHOUT_CLASSIFICATION
// we have to set up the table later!! yuck	DESIGN	0.9998314304937642	WITHOUT_CLASSIFICATION	1.685695062358912E-4	DESIGN
//TODO: better to degrade to lazy="false" if uninstrumented	DESIGN	0.7793607783464566	DESIGN	0.2206392216535435	WITHOUT_CLASSIFICATION
// todo : again, how *should* this work for non-pojo entities?	DESIGN	0.9992970046369349	WITHOUT_CLASSIFICATION	7.029953630650456E-4	DESIGN
// TODO: this is a bit of copy/paste from IndexedCollection.createPrimaryKey()	DESIGN	0.9963077156495773	DESIGN	0.00369228435042269	WITHOUT_CLASSIFICATION
// This inner class implements a case statement....perhaps im being a bit over-clever here	DESIGN	0.8377942572760327	WITHOUT_CLASSIFICATION	0.16220574272396726	DESIGN
//TODO: bad implementation, cos it depends upon ordering of mapping doc //      fixing this requires that Collection/PersistentClass gain access //      to the Mappings reference from Configuration (or the filterDefinitions //      map directly) sometime during Configuration.buildSessionFactory //      (after all the types/filter-defs are known and before building //      persisters).	DESIGN	0.7811086621855916	WITHOUT_CLASSIFICATION	0.21889133781440845	DESIGN
//use of a stringbuffer to workaround a JDK bug	DESIGN	0.9889141887191663	DESIGN	0.011085811280833737	WITHOUT_CLASSIFICATION
// hack/workaround as sqlquery impl depend on having a key.	DESIGN	0.9997051961258258	WITHOUT_CLASSIFICATION	2.9480387417427567E-4	DESIGN
//FIXME: get the PersistentClass	DESIGN	0.9993629374921777	WITHOUT_CLASSIFICATION	6.37062507822277E-4	DESIGN
//FIXME: get the PersistentClass	DESIGN	0.9993629374921777	WITHOUT_CLASSIFICATION	6.37062507822277E-4	DESIGN
//Icky workaround for MySQL bug:	DESIGN	0.9706219464298133	DESIGN	0.029378053570186646	WITHOUT_CLASSIFICATION
//TODO: Somehow add the newly created foreign keys to the internal collection	DESIGN	0.653727644794547	WITHOUT_CLASSIFICATION	0.346272355205453	DESIGN
//TODO possibly relax that	DESIGN	0.6836193945256156	DESIGN	0.3163806054743844	WITHOUT_CLASSIFICATION
//TODO possibly relax that	DESIGN	0.6836193945256156	DESIGN	0.3163806054743844	WITHOUT_CLASSIFICATION
//TODO possibly relax that	DESIGN	0.6836193945256156	DESIGN	0.3163806054743844	WITHOUT_CLASSIFICATION
//use of a stringbuffer to workaround a JDK bug	DESIGN	0.9889141887191663	DESIGN	0.011085811280833737	WITHOUT_CLASSIFICATION
//use a degenerated strategy for backward compatibility	DESIGN	0.9995410658916761	WITHOUT_CLASSIFICATION	4.589341083238393E-4	DESIGN
// Sets can be just a view of a part of another collection. // do we need to copy it to be sure it won't be changing // underneath us? // ie. this.set.addAll(set);	DESIGN	0.903399727080356	WITHOUT_CLASSIFICATION	0.09660027291964403	DESIGN
//note that i parameter is now unused (delete it?)	DESIGN	0.8316846974381364	DESIGN	0.16831530256186364	WITHOUT_CLASSIFICATION
//just to help out during the load (ugly, i know)	DESIGN	0.9992800177335056	WITHOUT_CLASSIFICATION	7.199822664942584E-4	DESIGN
// TODO : safe to interpret "map.remove(key) == null" as non-dirty?	DESIGN	0.9389500238262776	WITHOUT_CLASSIFICATION	0.06104997617372235	DESIGN
// yick!  need this for proper serialization/deserialization handling...	DESIGN	0.9460054135934197	WITHOUT_CLASSIFICATION	0.053994586406580336	DESIGN
//TODO: get SQL rendering out of this package!	DESIGN	0.6497621403427384	WITHOUT_CLASSIFICATION	0.3502378596572617	DESIGN
//TODO: get SQL rendering out of this package!	DESIGN	0.6497621403427384	WITHOUT_CLASSIFICATION	0.3502378596572617	DESIGN
//yuck!	DESIGN	0.9992064434309498	WITHOUT_CLASSIFICATION	7.935565690501368E-4	DESIGN
//TODO: get SQL rendering out of this package!	DESIGN	0.6497621403427384	WITHOUT_CLASSIFICATION	0.3502378596572617	DESIGN
// TODO : not sure this is correct, could not find docs on how to do this.	DESIGN	0.9998197607225809	DESIGN	1.8023927741898495E-4	WITHOUT_CLASSIFICATION
//HSQL has no Blob/Clob support .... but just put these here for now!	DESIGN	0.99732326647618	WITHOUT_CLASSIFICATION	0.002676733523820108	DESIGN
// does this need holdlock also? : return tableName + " with (updlock, rowlock, holdlock)";	DESIGN	0.9970327761988927	WITHOUT_CLASSIFICATION	0.0029672238011073074	DESIGN
// sql-server, at least needed this dropped after use; strange!	DESIGN	0.999278060661543	WITHOUT_CLASSIFICATION	7.219393384570831E-4	DESIGN
// todo : is there really any reason to kkeep trying if this fails once?	DESIGN	0.9993245376036916	WITHOUT_CLASSIFICATION	6.754623963084621E-4	DESIGN
// TBD should this be varbinary($1)? //	DESIGN	0.8850976834636964	WITHOUT_CLASSIFICATION	0.11490231653630359	DESIGN
// is it necessary to register %exact since it can only appear in a where clause?	DESIGN	0.9984840049955849	WITHOUT_CLASSIFICATION	0.001515995004415065	DESIGN
// xmlforest requires a new kind of function constructor	DESIGN	0.9992127070025147	WITHOUT_CLASSIFICATION	7.872929974852243E-4	DESIGN
// Does this dialect support the ALTER TABLE syntax?	DESIGN	0.9690638995646415	WITHOUT_CLASSIFICATION	0.03093610043535854	DESIGN
// Do we need to qualify index names with the schema name?	DESIGN	0.9996145832432187	WITHOUT_CLASSIFICATION	3.8541675678126854E-4	DESIGN
// Does this dialect support the UNIQUE column syntax?	DESIGN	0.9889120974011197	WITHOUT_CLASSIFICATION	0.011087902598880284	DESIGN
// Does this dialect support check constraints?	DESIGN	0.9709324908086059	WITHOUT_CLASSIFICATION	0.029067509191394083	DESIGN
// Do we need to drop constraints before dropping tables in this dialect?	DESIGN	0.9411305949497635	WITHOUT_CLASSIFICATION	0.05886940505023642	DESIGN
// Does this dialect support the FOR UPDATE syntax?	DESIGN	0.9478152599756516	WITHOUT_CLASSIFICATION	0.0521847400243483	DESIGN
// Does this dialect support the Oracle-style FOR UPDATE NOWAIT syntax?	DESIGN	0.9478152599756516	WITHOUT_CLASSIFICATION	0.0521847400243483	DESIGN
// Does this dialect support FOR UPDATE OF, allowing particular rows to be locked?	DESIGN	0.5724275064223372	WITHOUT_CLASSIFICATION	0.4275724935776628	DESIGN
//note there is a wierd implementation in the client side	DESIGN	0.9999492736179841	WITHOUT_CLASSIFICATION	5.0726382015781105E-5	DESIGN
//TODO: never reached, since getTypeName() actually throws an exception!	DESIGN	0.9846829083587717	WITHOUT_CLASSIFICATION	0.015317091641228285	DESIGN
// todo : should we additionally check the current isolation mode explicitly?	DESIGN	0.9992492292155728	WITHOUT_CLASSIFICATION	7.507707844271261E-4	DESIGN
// todo : remove this and just have subclasses use Isolater/IsolatedWork directly...	DESIGN	0.999098192781522	WITHOUT_CLASSIFICATION	9.018072184779012E-4	DESIGN
//TODO: should orphans really be deleted during lock???	DESIGN	0.7608115354096892	DESIGN	0.2391884645903108	WITHOUT_CLASSIFICATION
// orphans should not be deleted during merge??	DESIGN	0.9929118531836023	WITHOUT_CLASSIFICATION	0.007088146816397751	DESIGN
// orphans should not be deleted during copy??	DESIGN	0.9929118531836023	WITHOUT_CLASSIFICATION	0.007088146816397751	DESIGN
//I suppose?	DESIGN	0.9944631762096814	WITHOUT_CLASSIFICATION	0.005536823790318576	DESIGN
//TODO: suck this logic into the collection!	DESIGN	0.6308099661906953	WITHOUT_CLASSIFICATION	0.3691900338093047	DESIGN
// TODO: an alternative is to check if the owner has changed; if it hasn't then // get the ID from collection.getOwner()	DESIGN	0.9263374105332471	WITHOUT_CLASSIFICATION	0.0736625894667529	DESIGN
//TODO:refactor + make this method private	DESIGN	0.951894085413956	WITHOUT_CLASSIFICATION	0.04810591458604394	DESIGN
// todo : we can actually just determine this from the incoming EntityEntry-s	DESIGN	0.9963437215190457	WITHOUT_CLASSIFICATION	0.0036562784809542823	DESIGN
//TODO: Should this be an InitializeEntityEventListener??? (watch out for performance!)	DESIGN	0.9352230438460092	DESIGN	0.06477695615399082	WITHOUT_CLASSIFICATION
//TODO: better to pass the id in as an argument?	DESIGN	0.9226189967462247	WITHOUT_CLASSIFICATION	0.07738100325377528	DESIGN
// todo : potentially look at optimizing these two arrays	DESIGN	0.9911178516868997	WITHOUT_CLASSIFICATION	0.008882148313100354	DESIGN
/* trim done to workaround stupid oracle bug that cant handle whitespaces before a { in a sp */	DESIGN	0.9997205239613697	DESIGN	2.7947603863022805E-4	WITHOUT_CLASSIFICATION
/* trim done to workaround stupid oracle bug that cant handle whitespaces before a { in a sp */	DESIGN	0.9997205239613697	DESIGN	2.7947603863022805E-4	WITHOUT_CLASSIFICATION
//TODO: temporary	DESIGN	0.8681028027514968	DESIGN	0.13189719724850327	WITHOUT_CLASSIFICATION
//TODO: not quite sure about the full implications of this!	DESIGN	0.8440460627987645	DESIGN	0.15595393720123557	WITHOUT_CLASSIFICATION
//TODO: not quite sure about the full implications of this!	DESIGN	0.8440460627987645	DESIGN	0.15595393720123557	WITHOUT_CLASSIFICATION
//TODO: ugly here:	DESIGN	0.9501277477092205	DESIGN	0.049872252290779524	WITHOUT_CLASSIFICATION
//this is kinda the best we can do...	DESIGN	0.9846522103716395	WITHOUT_CLASSIFICATION	0.015347789628360526	DESIGN
//TODO: this needn't exclude subclasses...	DESIGN	0.6061035984808772	WITHOUT_CLASSIFICATION	0.39389640151912286	DESIGN
// todo : need map? the prob is a proper key, right?	DESIGN	0.5698668201836414	WITHOUT_CLASSIFICATION	0.4301331798163587	DESIGN
// todo : i'd much rather have this done from #endLoadingCollection(CollectionPersister,LoadingCollectionEntry)...	DESIGN	0.9941550710105417	WITHOUT_CLASSIFICATION	0.005844928989458298	DESIGN
// todo : hack!!! // NOTE : here we cleanup the load context when we have no more local // LCE entries.  This "works" for the time being because really // only the collection load contexts are implemented.  Long term, // this cleanup should become part of the "close result set" // processing from the (sandbox/jdbc) jdbc-container code.	DESIGN	0.7026426913240611	DESIGN	0.29735730867593885	WITHOUT_CLASSIFICATION
// todo : should really move this log statement to CollectionType, where this is used from...	DESIGN	0.9879831491533644	DESIGN	0.012016850846635705	WITHOUT_CLASSIFICATION
// TODO : keep seperate notions of QT[] here for shallow/non-shallow queries...	DESIGN	0.5551110201802085	DESIGN	0.4448889798197914	WITHOUT_CLASSIFICATION
// TODO : add this info to the translator and aggregate it here...	DESIGN	0.6156579172184822	DESIGN	0.3843420827815179	WITHOUT_CLASSIFICATION
//TODO: move into collection type, so we can use polymorphism!	DESIGN	0.9394207246021263	DESIGN	0.06057927539787362	WITHOUT_CLASSIFICATION
// todo : should we check the current isolation mode explicitly?	DESIGN	0.9992492292155728	WITHOUT_CLASSIFICATION	7.507707844271275E-4	DESIGN
//TODO: suck into event class	DESIGN	0.6067016570142857	DESIGN	0.3932983429857142	WITHOUT_CLASSIFICATION
//do we even really need this? the update will fail anyway....	DESIGN	0.8976091256712985	WITHOUT_CLASSIFICATION	0.10239087432870157	DESIGN
//hum ... should we cascade anyway? throw an exception? fine like it is?	DESIGN	0.6932820651902836	WITHOUT_CLASSIFICATION	0.30671793480971643	DESIGN
//TODO: would it be better to do a refresh from db?	DESIGN	0.95103130951043	DESIGN	0.048968690489569956	WITHOUT_CLASSIFICATION
//TODO: we use two visitors here, inefficient!	DESIGN	0.6497053361082283	DESIGN	0.35029466389177155	WITHOUT_CLASSIFICATION
// this class has no proxies (so do a shortcut)	DESIGN	0.9960708649749858	WITHOUT_CLASSIFICATION	0.0039291350250141984	DESIGN
//PostLoad is needed for EJB3 //TODO: reuse the PostLoadEvent...	DESIGN	0.9427628351381163	WITHOUT_CLASSIFICATION	0.05723716486188359	DESIGN
//TODO: put this stuff back in to read snapshot from //      the second-level cache (needs some extra work)	DESIGN	0.6478160270641361	DESIGN	0.3521839729358638	WITHOUT_CLASSIFICATION
// null or brand new collection // this will also (inefficiently) handle arrays, which have // no snapshot, so we can't do any better	DESIGN	0.992746527618921	WITHOUT_CLASSIFICATION	0.007253472381078986	DESIGN
//TODO: is this 100% correct?	DESIGN	0.9886865604971157	DESIGN	0.011313439502884362	WITHOUT_CLASSIFICATION
// TODO: iteratively get transient entities and retry merge until one of the following conditions: //       1) transientCopyCache.size() == 0 //       2) transientCopyCache.size() is not decreasing and copyCache.size() is not increasing // TODO: find out if retrying can add entities to copyCache (don't think it can...) // For now, just retry once; throw TransientObjectException if there are still any transient entities	DESIGN	0.8921201547631004	DESIGN	0.10787984523689961	WITHOUT_CLASSIFICATION
// entity name will not be available for non-POJO entities // TODO: cache the entity name somewhere so that it is available to this exception	DESIGN	0.9995040845692081	DESIGN	4.959154307917472E-4	WITHOUT_CLASSIFICATION
//TODO: we should throw an exception if we really *know* for sure   //      that this is a detached instance, rather than just assuming //throw new StaleObjectStateException(entityName, id);	DESIGN	0.9364914120228978	DESIGN	0.06350858797710224	WITHOUT_CLASSIFICATION
// TODO : perhaps we should additionally require that the incoming entity // version be equivalent to the defined unsaved-value?	DESIGN	0.9893349657951851	DESIGN	0.01066503420481492	WITHOUT_CLASSIFICATION
// perhaps this should be an exception since it is only ever used // in the above method?	DESIGN	0.941976239850685	DESIGN	0.05802376014931503	WITHOUT_CLASSIFICATION
// Put a placeholder in entries, so we don't recurse back and try to save() the // same object again. QUESTION: should this be done before onSave() is called? // likewise, should it be done before onUpdate()?	DESIGN	0.7910346126238857	WITHOUT_CLASSIFICATION	0.20896538737611414	DESIGN
//TODO: merge into one method!	DESIGN	0.5173465874120946	DESIGN	0.48265341258790545	WITHOUT_CLASSIFICATION
//TODO: refactor to .sql package	DESIGN	0.8456829030954107	DESIGN	0.15431709690458925	WITHOUT_CLASSIFICATION
/** * Provides query splitting methods, which were originally in QueryTranslator. * <br> * TODO: This will need to be refactored at some point. * * @author josh */	DESIGN	0.998500134288621	DESIGN	0.0014998657113789323	WITHOUT_CLASSIFICATION
//TODO: this is one of the ugliest and most fragile pieces of code in Hibernate....	DESIGN	0.7530733237516486	DESIGN	0.2469266762483515	WITHOUT_CLASSIFICATION
// todo : temporary //      needed because currently persister is the one that //      creates and renders the join fragments for inheritence //      hierarchies...	DESIGN	0.9994185779034628	WITHOUT_CLASSIFICATION	5.814220965371657E-4	DESIGN
// TODO : better way?!?	DESIGN	0.9629306036615725	DESIGN	0.0370693963384275	WITHOUT_CLASSIFICATION
// Not possible to simply re-use the versionPropertyNode here as it causes // OOM errors due to circularity :(	DESIGN	0.9885853902623253	WITHOUT_CLASSIFICATION	0.011414609737674594	DESIGN
//TODO:this is only needed during compilation .. can we eliminate the instvar?	DESIGN	0.9989938418287745	WITHOUT_CLASSIFICATION	0.0010061581712254722	DESIGN
// TODO : this is a bit dodgy, come up with a better way to check this (plus see above comment)	DESIGN	0.99980328312599	DESIGN	1.967168740099544E-4	WITHOUT_CLASSIFICATION
// even here, if only properties mapped to the "base table" are referenced // in the set and where clauses, this could be handled by the BasicDelegate. // TODO : decide if it is better performance-wise to perform that check, or to simply use the MultiTableUpdateDelegate	DESIGN	0.9999981022127886	DESIGN	1.8977872113260795E-6	WITHOUT_CLASSIFICATION
//TODO: switch statements are always evil! We already had bugs because  //      of forgotten token types. Use polymorphism for this!	DESIGN	0.9950685841092397	WITHOUT_CLASSIFICATION	0.004931415890760371	DESIGN
// TODO : we really need to be able to deal with component paths here also; // this is difficult because the hql-sql grammar expects all those node types // to be FromReferenceNodes.  One potential fix here would be to convert the // IntoClause to just use a FromClause/FromElement combo (as a child of the // InsertStatement) and move all this logic into the InsertStatement.  That's // probably the easiest approach (read: least amount of changes to the grammar // and code), but just doesn't feel right as then an insert would contain // 2 from-clauses	DESIGN	0.9998273527880089	DESIGN	1.7264721199106023E-4	WITHOUT_CLASSIFICATION
// really there are two situations where it should be ok to allow the insertion // into properties defined on a superclass: //      1) union-subclass with an abstract root entity //      2) discrim-subclass // // #1 is handled already because of the fact that // UnionSubclassPersister alreay always returns 0 // for this call... // // we may want to disallow it for discrim-subclass just for // consistency-sake (currently does not work anyway)...	DESIGN	0.8123368840554043	DESIGN	0.18766311594459575	WITHOUT_CLASSIFICATION
//yuck!	DESIGN	0.9992064434309498	WITHOUT_CLASSIFICATION	7.935565690501368E-4	DESIGN
// implicit joins are always(?) ok to reuse	DESIGN	0.999786146719548	WITHOUT_CLASSIFICATION	2.1385328045202585E-4	DESIGN
// TODO : we may also want to check that the types here map to exactly one column/JDBC-type //      can't think of a situation where arithmetic expression between multi-column mappings //      makes any sense.	DESIGN	0.8466862343621845	DESIGN	0.15331376563781549	WITHOUT_CLASSIFICATION
// we do not know either type //BLIND GUESS!	DESIGN	0.9949930750422618	WITHOUT_CLASSIFICATION	0.005006924957738196	DESIGN
//TODO: used to be exprNoParens! was this needed?	DESIGN	0.9999987635442128	DESIGN	1.236455787252435E-6	WITHOUT_CLASSIFICATION
// TODO: Replace this with a more elegant solution.	DESIGN	0.9994729139081282	DESIGN	5.270860918717737E-4	WITHOUT_CLASSIFICATION
// TODO: Should this really return null?  If not, figure out something better to do here.	DESIGN	0.9994750890599803	DESIGN	5.249109400196989E-4	WITHOUT_CLASSIFICATION
//TODO: get SQL rendering out of this package!	DESIGN	0.6497621403427384	WITHOUT_CLASSIFICATION	0.3502378596572617	DESIGN
// yuck!	DESIGN	0.999679076858764	WITHOUT_CLASSIFICATION	3.2092314123604855E-4	DESIGN
// ignore it; the incoming property could not be found so we // cannot be sure what to do here.  At the very least, the // safest is to simply not apply any dereference toggling...	DESIGN	0.6716675497761442	DESIGN	0.3283324502238558	WITHOUT_CLASSIFICATION
// TODO : most of below was taken verbatim from DotNode; should either delegate this logic or super-type it	DESIGN	0.6702224714180482	DESIGN	0.3297775285819517	WITHOUT_CLASSIFICATION
// otherwise, a trim-specification and/or a trim-character // have been specified;  we need to decide which options // are present and "do the right thing" // should leading trim-characters be trimmed? // should trailing trim-characters be trimmed? // the trim-character // the trim-source	DESIGN	0.9985964916137123	WITHOUT_CLASSIFICATION	0.0014035083862876838	DESIGN
// todo: we should really just collect these from the various SelectExpressions, rather than regenerating here	DESIGN	0.6512450460970061	WITHOUT_CLASSIFICATION	0.348754953902994	DESIGN
//TODO: is this a bit ugly?	DESIGN	0.983494563228045	DESIGN	0.01650543677195511	WITHOUT_CLASSIFICATION
// Need a better way to define the suffixes here...	DESIGN	0.9038019762221067	WITHOUT_CLASSIFICATION	0.09619802377789333	DESIGN
// TODO: something much better - look at the type of the other expression! // TODO: Have comparisonExpression and/or arithmeticExpression rules complete the resolution of boolean nodes.	DESIGN	0.9935518487603284	DESIGN	0.006448151239671583	WITHOUT_CLASSIFICATION
// TODO : what amount of significant digits need to be supported here? //      - from the DecimalFormat docs: //          [significant digits] = [minimum integer digits] + [maximum fraction digits]	DESIGN	0.9737928461399461	DESIGN	0.026207153860053928	WITHOUT_CLASSIFICATION
// Needed the "clazz_" check to work around union-subclasses // TODO : is there a way to tell whether a persister is truly discrim-column based inheritence?	DESIGN	0.9947766753153813	DESIGN	0.005223324684618738	WITHOUT_CLASSIFICATION
//We should actually rework this class to not implement Parser //and just process path expressions in the most convenient way.	DESIGN	0.948153950193902	DESIGN	0.05184604980609799	WITHOUT_CLASSIFICATION
//The class is now way to complex!	DESIGN	0.9952391753764676	WITHOUT_CLASSIFICATION	0.004760824623532378	DESIGN
//TODO: get SQL rendering out of here	DESIGN	0.6499765292030348	WITHOUT_CLASSIFICATION	0.3500234707969652	DESIGN
//TODO: is there a better way?	DESIGN	0.9724314649081726	DESIGN	0.02756853509182751	WITHOUT_CLASSIFICATION
//Must be done here because of side-effect! yuck...	DESIGN	0.9984208414887007	WITHOUT_CLASSIFICATION	0.001579158511299243	DESIGN
//name from a super query (a bit inelegant that it shows up here)	DESIGN	0.9390153047293285	WITHOUT_CLASSIFICATION	0.060984695270671525	DESIGN
// We should reengineer this class so that, rather than the current ad - // hoc linear approach to processing a stream of tokens, we instead // build up a tree of expressions.	DESIGN	0.782930346274557	WITHOUT_CLASSIFICATION	0.21706965372544296	DESIGN
// this is ugly here, but needed because its a subquery	DESIGN	0.9762425786538041	WITHOUT_CLASSIFICATION	0.023757421346195896	DESIGN
// unhappy about this being public ... is there a better way?	DESIGN	0.5735042322438896	DESIGN	0.42649576775611026	WITHOUT_CLASSIFICATION
// Make sure this is a defined parameter and check the incoming value type // TODO: what should be the actual exception type here?	DESIGN	0.9998849446977999	DESIGN	1.150553022001696E-4	WITHOUT_CLASSIFICATION
// TODO : this constructor form is *only* used from constructor directly below us; can it go away?	DESIGN	0.9998087809041262	DESIGN	1.9121909587389583E-4	WITHOUT_CLASSIFICATION
//TODO: COPY/PASTE FROM SessionImpl, pull up!	DESIGN	0.8576844069375313	WITHOUT_CLASSIFICATION	0.14231559306246866	DESIGN
// TODO : should remove this exposure //  and have all references to the session's batcher use the ConnectionManager.	DESIGN	0.9825925073131493	DESIGN	0.01740749268685066	WITHOUT_CLASSIFICATION
// todo : should this get moved to PersistentContext? // logically, is PersistentContext the "thing" to which an interceptor gets attached?	DESIGN	0.5960684189477407	WITHOUT_CLASSIFICATION	0.40393158105225935	DESIGN
// TODO: what type?	DESIGN	0.9708201124166359	DESIGN	0.02917988758336406	WITHOUT_CLASSIFICATION
// todo : should seriously consider not allowing a txn to begin from a child session //      can always route the request to the root session...	DESIGN	0.9815224950225879	WITHOUT_CLASSIFICATION	0.018477504977412098	DESIGN
// short-circuit for performance...	DESIGN	0.9994323302893513	WITHOUT_CLASSIFICATION	5.676697106486088E-4	DESIGN
// not absolutely necessary, but does help with aggressive release	DESIGN	0.990376757778254	WITHOUT_CLASSIFICATION	0.009623242221746054	DESIGN
// TODO : remove these last two as batcher is no longer managing connections	DESIGN	0.6680384379083362	DESIGN	0.3319615620916639	WITHOUT_CLASSIFICATION
//work around a bug in all known connection pools....	DESIGN	0.7033126093037554	WITHOUT_CLASSIFICATION	0.2966873906962446	DESIGN
// TODO : make this the factory for "entity mode related" sessions; // also means making this the target of transaction-synch and the // thing that knows how to cascade things between related sessions // // At that point, perhaps this thing is a "SessionContext", and // ConnectionManager is a "JDBCContext"?  A "SessionContext" should // live in the impl package...	DESIGN	0.99997720543042	DESIGN	2.2794569579902014E-5	WITHOUT_CLASSIFICATION
//TODO: does this really need to be here? //      does the collection already have //      it's own up-to-date snapshot?	DESIGN	0.9990655947521521	DESIGN	9.344052478480543E-4	WITHOUT_CLASSIFICATION
//TODO: the i==entitySpan-1 bit depends upon subclass implementation (very bad)	DESIGN	0.9682304801051128	DESIGN	0.03176951989488719	WITHOUT_CLASSIFICATION
/**	DESIGN	0.8519776918033966	DESIGN	0.1480223081966034	WITHOUT_CLASSIFICATION
// todo : add the notion of enabled filters to the CacheKey to differentiate filtered collections from non-filtered; //      but CacheKey is currently used for both collections and entities; would ideally need to define two seperate ones; //      currently this works in conjuction with the check on //      DefaultInitializeCollectionEventHandler.initializeCollectionFromCache() (which makes sure to not read from //      cache with enabled filters). // EARLY EXIT!!!!!	DESIGN	0.7839801417268789	DESIGN	0.216019858273121	WITHOUT_CLASSIFICATION
//for sets, we should end the collection load after resolving //the entities, since we might call hashCode() on the elements //TODO: or we could do this polymorphically, and have two //      different operations implemented differently for arrays	DESIGN	0.9904904193243064	DESIGN	0.009509580675693555	WITHOUT_CLASSIFICATION
//This is not very nice (and quite slow):	DESIGN	0.975798497728764	DESIGN	0.024201502271235898	WITHOUT_CLASSIFICATION
//use of trim() here is ugly?	DESIGN	0.9945928990213178	WITHOUT_CLASSIFICATION	0.005407100978682263	DESIGN
//TODO: this is too conservative; if all preceding joins were  //      also inner joins, we could use an inner join here	DESIGN	0.9738003243843213	DESIGN	0.026199675615678722	WITHOUT_CLASSIFICATION
//TODO: look at the owning property and check that it  //      isn't lazy (by instrumentation)	DESIGN	0.8024745105344552	WITHOUT_CLASSIFICATION	0.1975254894655448	DESIGN
//TODO: inefficient	DESIGN	0.7459567565561519	WITHOUT_CLASSIFICATION	0.2540432434438482	DESIGN
// why does this matter?	DESIGN	0.9884537239649965	WITHOUT_CLASSIFICATION	0.011546276035003512	DESIGN
// from the collection of associations, locate OJA for the // ManyToOne corresponding to this persister to fully // define the many-to-many; we need that OJA so that we can // use its alias here // TODO : is there a better way here?	DESIGN	0.9999788624594907	DESIGN	2.1137540509321438E-5	WITHOUT_CLASSIFICATION
//TODO: this class depends directly upon CriteriaImpl,  //      in the impl package ... add a CriteriaImplementor  //      interface	DESIGN	0.9862930257697187	DESIGN	0.013706974230281197	WITHOUT_CLASSIFICATION
//TODO: add a CriteriaImplementor interface //      this class depends directly upon CriteriaImpl in the impl package...	DESIGN	0.815893450541994	DESIGN	0.184106549458006	WITHOUT_CLASSIFICATION
// TODO : not so sure this is needed...	DESIGN	0.8021291932678616	DESIGN	0.19787080673213833	WITHOUT_CLASSIFICATION
// meant to handle dynamic instantiation queries...(Copy from QueryLoader)	DESIGN	0.9989955335119676	WITHOUT_CLASSIFICATION	0.0010044664880324533	DESIGN
// TODO: The order in which entities are saved may matter (e.g., a particular transient entity //       may need to be saved before other transient entities can be saved; //       Keep retrying the batch of transient entities until either: //       1) there are no transient entities left in transientCopyCache //       or 2) no transient entities were saved in the last batch // For now, just run through the transient entities and retry the merge	DESIGN	0.6710017735937978	WITHOUT_CLASSIFICATION	0.32899822640620224	DESIGN
// todo: this might really even be moved into the cfg package and used as the basis for all things which are configurable.	DESIGN	0.9938957870741076	DESIGN	0.006104212925892255	WITHOUT_CLASSIFICATION
// todo : currently expects that the individual with expressions apply to the same sql table join. //      This may not be the case for joined-subclass where the property values //      might be coming from different tables in the joined hierarchy.  At some //      point we should expand this to support that capability.  However, that has //      some difficulties: //          1) the biggest is how to handle ORs when the individual comparisons are //              linked to different sql joins. //          2) here we would need to track each comparison individually, along with //              the join alias to which it applies and then pass that information //              back to the FromElement so it can pass it along to the JoinSequence	DESIGN	0.9754431490418541	WITHOUT_CLASSIFICATION	0.024556850958145922	DESIGN
// this function has a template -> restore output, apply the template and write the result out // TODO: Downcast to avoid using an interface?  Yuck.	DESIGN	0.969801945400572	WITHOUT_CLASSIFICATION	0.030198054599428106	DESIGN
// at some point the generate phase needs to be moved out of here, // because a single object-level DML might spawn multiple SQL DML // command executions. // // Possible to just move the sql generation for dml stuff, but for // consistency-sake probably best to just move responsiblity for // the generation phase completely into the delegates // (QueryLoader/StatementExecutor) themselves.  Also, not sure why // QueryLoader currently even has a dependency on this at all; does // it need it?  Ideally like to see the walker itself given to the delegates directly...	DESIGN	0.9999958355394751	DESIGN	4.1644605249373115E-6	WITHOUT_CLASSIFICATION
// get the right object from the list ... would it be easier to just call getEntity() ??	DESIGN	0.9972626763909186	WITHOUT_CLASSIFICATION	0.002737323609081294	DESIGN
// TODO should we just collect these like with the collections above?	DESIGN	0.9946525285838775	DESIGN	0.005347471416122507	WITHOUT_CLASSIFICATION
// todo : better to handle dynamic filters through implicit DynamicFilterParameterSpecification // see the discussion there in DynamicFilterParameterSpecification's javadocs as to why // it is currently not done that way.	DESIGN	0.7686829745559718	WITHOUT_CLASSIFICATION	0.23131702544402813	DESIGN
/////////////////////////////////////////////////////////////////////////// // USED ONLY FOR REGRESSION TESTING!!!! // // todo : obviously get rid of all this junk ;) ///////////////////////////////////////////////////////////////////////////	DESIGN	0.9983527103506304	WITHOUT_CLASSIFICATION	0.0016472896493696	DESIGN
//create an index on the key columns??	DESIGN	0.99998764380257	WITHOUT_CLASSIFICATION	1.2356197429948995E-5	DESIGN
//TODO: deprecated, remove eventually	DESIGN	0.8540185993157243	WITHOUT_CLASSIFICATION	0.14598140068427568	DESIGN
//create an index on the key columns??	DESIGN	0.99998764380257	WITHOUT_CLASSIFICATION	1.2356197429948995E-5	DESIGN
//TODO: improve this hack!	DESIGN	0.9441741947185355	DESIGN	0.05582580528146455	WITHOUT_CLASSIFICATION
// inheritance cycle detection (paranoid check)	DESIGN	0.9991188911545286	WITHOUT_CLASSIFICATION	8.811088454713101E-4	DESIGN
//TODO: remove use of instanceof!	DESIGN	0.6150869221352303	DESIGN	0.38491307786476975	WITHOUT_CLASSIFICATION
//shortcut	DESIGN	0.9992292759804875	WITHOUT_CLASSIFICATION	7.707240195124809E-4	DESIGN
//TODO: handle the case of a foreign key to something other than the pk	DESIGN	0.8028523098296823	WITHOUT_CLASSIFICATION	0.19714769017031775	DESIGN
// create an index on the key columns??	DESIGN	0.9999887635583451	WITHOUT_CLASSIFICATION	1.1236441654985569E-5	DESIGN
// todo : remove	DESIGN	0.9986067651616012	WITHOUT_CLASSIFICATION	0.0013932348383988062	DESIGN
// todo : remove	DESIGN	0.9986067651616012	WITHOUT_CLASSIFICATION	0.0013932348383988062	DESIGN
// todo : remove	DESIGN	0.9986067651616012	WITHOUT_CLASSIFICATION	0.0013932348383988062	DESIGN
// todo : throw exception?	DESIGN	0.9991976439053838	WITHOUT_CLASSIFICATION	8.023560946162093E-4	DESIGN
// todo : throw exception?  maybe warn if not the same?	DESIGN	0.9961116659493714	WITHOUT_CLASSIFICATION	0.00388833405062852	DESIGN
//TODO: make EntityPersister *not* depend on SessionFactoryImplementor //interface, if possible	DESIGN	0.6917359142398869	DESIGN	0.3082640857601131	WITHOUT_CLASSIFICATION
//TODO: is there a more elegant way than downcasting?	DESIGN	0.9433834001359321	DESIGN	0.05661659986406789	WITHOUT_CLASSIFICATION
// TODO: encapsulate the protected instance variables!	DESIGN	0.8245307032562388	DESIGN	0.17546929674376124	WITHOUT_CLASSIFICATION
// should indicate that we are processing an INSERT/UPDATE/DELETE // query with a subquery implied via a collection property // function. Here, we need to use the table name itself as the // qualification alias. // TODO : verify this works for all databases... // TODO : is this also the case in non-"indexed" scenarios?	DESIGN	0.9814107088063314	DESIGN	0.018589291193668492	WITHOUT_CLASSIFICATION
//TODO: copy/paste from insertRows()	DESIGN	0.7585667562173835	WITHOUT_CLASSIFICATION	0.2414332437826166	DESIGN
//TODO: copy/paste from recreate()	DESIGN	0.7585667562173835	WITHOUT_CLASSIFICATION	0.2414332437826166	DESIGN
//should this interface extend PropertyMapping?	DESIGN	0.9721078604646065	WITHOUT_CLASSIFICATION	0.027892139535393545	DESIGN
//ie. the subquery! yuck!	DESIGN	0.9986820842630505	WITHOUT_CLASSIFICATION	0.0013179157369495806	DESIGN
//TODO: move to .sql package!!	DESIGN	0.8975332034416916	DESIGN	0.10246679655830833	WITHOUT_CLASSIFICATION
//TODO: code duplication with SingleTableEntityPersister	DESIGN	0.5209305284335929	WITHOUT_CLASSIFICATION	0.4790694715664072	DESIGN
// TODO: It would be really, really nice to use this to also model components!	DESIGN	0.9998188364743769	DESIGN	1.8116352562313342E-4	WITHOUT_CLASSIFICATION
//TODO: *two* hashmap lookups here is one too many...	DESIGN	0.6570076055661072	DESIGN	0.34299239443389273	WITHOUT_CLASSIFICATION
//TODO: code duplication with JoinedSubclassEntityPersister	DESIGN	0.5209305284335929	WITHOUT_CLASSIFICATION	0.4790694715664072	DESIGN
//perhaps not really necessary...	DESIGN	0.9795837552267141	WITHOUT_CLASSIFICATION	0.020416244773285817	DESIGN
// NOTE: this assumes something about how propertySelectFragment is implemented by the subclass! // was toUnqotedAliasStrings( getIdentiferColumnNames() ) before - now tried // to remove that unqoting and missing aliases..	DESIGN	0.9979002380232969	WITHOUT_CLASSIFICATION	0.002099761976703214	DESIGN
// NOTE: this assumes something about how propertySelectFragment is implemented by the subclass! // was toUnqotedAliasStrings( getdiscriminatorColumnName() ) before - now tried // to remove that unqoting and missing aliases..	DESIGN	0.9979002380232969	WITHOUT_CLASSIFICATION	0.002099761976703214	DESIGN
//TODO: should we use SELECT .. FOR UPDATE?	DESIGN	0.9116131036941547	DESIGN	0.08838689630584527	WITHOUT_CLASSIFICATION
//TODO: optimize this better!	DESIGN	0.6392914883540062	WITHOUT_CLASSIFICATION	0.3607085116459938	DESIGN
//TODO: should we allow suffixes on these ?	DESIGN	0.9921673123752592	DESIGN	0.007832687624740767	WITHOUT_CLASSIFICATION
//This is really ugly, but necessary:	DESIGN	0.99312015008648	WITHOUT_CLASSIFICATION	0.0068798499135199745	DESIGN
//ugly little workaround for fact that createUniqueKeyLoaders() does not handle component properties	DESIGN	0.88731688547974	DESIGN	0.11268311452026013	WITHOUT_CLASSIFICATION
//TODO: disable batch loading if lockMode > READ?	DESIGN	0.9966968912697797	WITHOUT_CLASSIFICATION	0.003303108730220265	DESIGN
// append the SQL to return the generated identifier //TODO: suck into Insert	DESIGN	0.8652467739440742	WITHOUT_CLASSIFICATION	0.13475322605592566	DESIGN
//TODO: I am not so sure about the exception handling in this bit!	DESIGN	0.9752749124067416	DESIGN	0.024725087593258446	WITHOUT_CLASSIFICATION
//TODO: is this really necessary????	DESIGN	0.8658176851561734	DESIGN	0.13418231484382662	WITHOUT_CLASSIFICATION
//TODO: move to .sql package, and refactor with similar things!	DESIGN	0.8745308663084749	DESIGN	0.12546913369152513	WITHOUT_CLASSIFICATION
//TODO: implement functionality //  this might be painful to do here, as the "join post processing" for //  the subquery has already been performed (meaning that for //  theta-join dialects, the join conditions have already been moved //  over to the where clause).  A "simple" solution here might to //  perform "join post processing" once for the entire query (including //  any subqueries) at one fell swoop	DESIGN	0.9995320310543961	DESIGN	4.679689456038541E-4	WITHOUT_CLASSIFICATION
// todo : this eventually needs to be removed	DESIGN	0.8966470493375085	WITHOUT_CLASSIFICATION	0.10335295066249155	DESIGN
//kinda ugly, but needed for collections with a "." node mapping	DESIGN	0.9998924946312088	WITHOUT_CLASSIFICATION	1.0750536879121128E-4	DESIGN
//is this ok?	DESIGN	0.991234526640035	WITHOUT_CLASSIFICATION	0.008765473359965012	DESIGN
//TODO: perhaps this should be some other RuntimeException...	DESIGN	0.9997110196263175	DESIGN	2.8898037368250246E-4	WITHOUT_CLASSIFICATION
//TODO: make this a bit nicer	DESIGN	0.9651485921797991	DESIGN	0.03485140782020092	WITHOUT_CLASSIFICATION
//Yuck:	DESIGN	0.9992064434309498	WITHOUT_CLASSIFICATION	7.935565690501368E-4	DESIGN
//TODO: we should provide some way to get keys of collection of statistics to make it easier to retrieve from a GUI perspective	DESIGN	0.9999856815900067	DESIGN	1.4318409993394751E-5	WITHOUT_CLASSIFICATION
/**	DESIGN	0.8519776918033966	DESIGN	0.1480223081966034	WITHOUT_CLASSIFICATION
// TODO : will need reference to session factory to fully complete HHH-1907	DESIGN	0.9957865069625244	DESIGN	0.004213493037475656	WITHOUT_CLASSIFICATION
//TODO: currently keeps Getters and Setters (instead of PropertyAccessors) because of the way getGetter() and getSetter() are implemented currently; yuck!	DESIGN	0.7342026800474574	DESIGN	0.26579731995254263	WITHOUT_CLASSIFICATION
//TODO: redesign how PropertyAccessors are acquired...	DESIGN	0.5328022213959477	WITHOUT_CLASSIFICATION	0.46719777860405226	DESIGN
// todo : YUCK!!!	DESIGN	0.9995644930707226	WITHOUT_CLASSIFICATION	4.3550692927738795E-4	DESIGN
// TODO : YUCK!!!  fix after HHH-1907 is complete	DESIGN	0.9860906927225215	DESIGN	0.013909307277478454	WITHOUT_CLASSIFICATION
//TODO: need to make the majority of this functionality into a top-level support class for custom impl support	DESIGN	0.7765671092300103	DESIGN	0.2234328907699897	WITHOUT_CLASSIFICATION
//TODO: design new lifecycle for ProxyFactory	DESIGN	0.8835917052404281	WITHOUT_CLASSIFICATION	0.11640829475957193	DESIGN
//TODO: would be nice to handle proxy classes elegantly!	DESIGN	0.7685846404718921	DESIGN	0.23141535952810796	WITHOUT_CLASSIFICATION
// TODO: copy/paste from ManyToOneType	DESIGN	0.6694777863842184	DESIGN	0.3305222136157815	WITHOUT_CLASSIFICATION
//TODO: should this be Session.instantiate(Persister, ...)?	DESIGN	0.950952251446755	DESIGN	0.04904774855324505	WITHOUT_CLASSIFICATION
//TODO: this is a bit arbitrary, expose a switch to the user?	DESIGN	0.9301704476651873	DESIGN	0.06982955233481265	WITHOUT_CLASSIFICATION
//TODO: implement caching?! proxies?!	DESIGN	0.7441151367658541	DESIGN	0.255884863234146	WITHOUT_CLASSIFICATION
//TODO: is this right??	DESIGN	0.7331354517993752	DESIGN	0.26686454820062494	WITHOUT_CLASSIFICATION
// is this really necessary?	DESIGN	0.8633181774039218	WITHOUT_CLASSIFICATION	0.13668182259607822	DESIGN
//TODO: move these to a new JoinableType abstract class, //extended by EntityType and PersistentCollectionType:	DESIGN	0.9359874989133556	DESIGN	0.0640125010866443	WITHOUT_CLASSIFICATION
// TODO: this is very suboptimal for some subclasses (namely components), // since it does not take advantage of two-phase-load	DESIGN	0.8751584483737805	DESIGN	0.12484155162621939	WITHOUT_CLASSIFICATION
// worrying about proxies is perhaps a little bit of overkill here...	DESIGN	0.7820834559407057	DESIGN	0.21791654405929436	WITHOUT_CLASSIFICATION
// NOTE VERY HACKISH WORKAROUND!! // TODO: Fix this so it will work for non-POJO entity mode	DESIGN	0.9942799127098039	DESIGN	0.0057200872901961766	WITHOUT_CLASSIFICATION
// TODO: Fix this so it will work for non-POJO entity mode	DESIGN	0.9950041799297942	DESIGN	0.0049958200702057845	WITHOUT_CLASSIFICATION
// We would probably refactor to have LogicParser (builds a tree of simple // expressions connected by and, or, not), ExpressionParser (translates // from OO terms like foo, foo.Bar, foo.Bar.Baz to SQL terms like // FOOS.ID, FOOS.BAR_ID, etc) and PathExpressionParser (which does much // the same thing it does now)	DESIGN	0.9975797141264406	WITHOUT_CLASSIFICATION	0.002420285873559365	DESIGN
//TODO: this is a little inefficient, don't need to do a whole //      deep replaceElements() call	DESIGN	0.992952923025043	DESIGN	0.007047076974956995	WITHOUT_CLASSIFICATION
//workaround for WebLogic	DESIGN	0.9974956919805931	WITHOUT_CLASSIFICATION	0.0025043080194069134	DESIGN
//TODO: this dependency is kinda Bad	DESIGN	0.96772635734243	DESIGN	0.03227364265757005	WITHOUT_CLASSIFICATION
//ick!	DESIGN	0.9992064434309498	WITHOUT_CLASSIFICATION	7.935565690501368E-4	DESIGN
// short cut check...	DESIGN	0.9983075433363893	WITHOUT_CLASSIFICATION	0.0016924566636107652	DESIGN
// todo : move to StringHelper?	DESIGN	0.9938717661224675	WITHOUT_CLASSIFICATION	0.006128233877532449	DESIGN
//yukky! Don't you have subclasses for that! //TODO race conditions can happen here	DESIGN	0.9521758871649842	DESIGN	0.04782411283501579	WITHOUT_CLASSIFICATION
//TODO: We probably should have a StatisticsNotPublishedException, to make it clean	DESIGN	0.9944344425014532	DESIGN	0.005565557498546734	WITHOUT_CLASSIFICATION
// FIXME hack to work around fact that calling // Node added = root.addChild( fqn ); doesn't  // properly set the version on the node	DESIGN	0.999912896481504	DESIGN	8.710351849591077E-5	WITHOUT_CLASSIFICATION
// TODO: I considered validating the presence of the TS cache here, // but decided to defer unti getQueryCacheInstance() in case the  // cache is never actually used	DESIGN	0.9999518765550371	DESIGN	4.8123444962834475E-5	WITHOUT_CLASSIFICATION
//need to do that here rather than in the save event listener to let //the post insert events to have a id-filled entity when IDENTITY is used (EJB3)	DESIGN	0.7763458748572646	DESIGN	0.22365412514273528	WITHOUT_CLASSIFICATION
//TODO: simply remove this override //      if we fix the above todos	DESIGN	0.991037995528951	DESIGN	0.008962004471049112	WITHOUT_CLASSIFICATION
// This, is used by SessionFactoryImpl to hand to the generated SessionImpl; // was the only reason I could see that we cannot just use null as // Settings.cacheProvider	DESIGN	0.9721343731013204	WITHOUT_CLASSIFICATION	0.027865626898679517	DESIGN
// this is done here 'cos we might only know the type here (ugly!) // TODO: improve this a lot:	DESIGN	0.9998166151967149	DESIGN	1.8338480328503837E-4	WITHOUT_CLASSIFICATION
// todo : would love to have this work on a notification basis //    where the successful binding of an entity/subclass would //    emit a notification which the extendsQueue entries could //    react to...	DESIGN	0.9923572499696054	WITHOUT_CLASSIFICATION	0.007642750030394661	DESIGN
// TODO : not sure the best way to handle this. // The non-performant way :	DESIGN	0.9099098808818697	DESIGN	0.09009011911813027	WITHOUT_CLASSIFICATION
// would be better to use the element-type to determine // whether the old and the new are equal here; the problem being // we do not necessarily have access to the element type in all // cases	DESIGN	0.507439566677654	DESIGN	0.4925604333223461	WITHOUT_CLASSIFICATION
// This next bit is to allow for both unsaved-value="negative" // and for "older" behavior where version number did not get // seeded if it was already set in the object // TODO: shift it into unsaved-value strategy	DESIGN	0.9999277504356875	DESIGN	7.22495643124912E-5	WITHOUT_CLASSIFICATION
// merges don't cascade to uninitialized collections //	DESIGN	0.9996664814160804	WITHOUT_CLASSIFICATION	3.3351858391964114E-4	DESIGN
// TODO: an alternative is to check if the owner has changed; if it hasn't then // return collection.getOwner()	DESIGN	0.9371086863328123	WITHOUT_CLASSIFICATION	0.06289131366718761	DESIGN
//it is possible that the tree-walking in OuterJoinLoader can get to //an association defined by a subclass, in which case the property-ref //might refer to a property defined on a subclass of the current class //in this case, the table name is not known - this temporary solution  //assumes that the property-ref refers to a property of the subclass //table that the association belongs to (a reasonable guess) //TODO: fix this, add: OuterJoinLoadable.getSubclassPropertyTableName(String propertyName)	DESIGN	0.9999988496876604	DESIGN	1.1503123396658676E-6	WITHOUT_CLASSIFICATION
// this only works because collection entries are kept in a sequenced // map by persistence context (maybe we should do like entities and // keep a separate sequences set...) //TODO: calling entrySet on an IdentityMap is SLOW!!	DESIGN	0.9558480663851541	DESIGN	0.044151933614845915	WITHOUT_CLASSIFICATION
// important, to account for newly saved entities in query // todo : some kind of check for new status...	DESIGN	0.999821383685677	WITHOUT_CLASSIFICATION	1.786163143229473E-4	DESIGN
// brand new collection //TODO: or an array!! we can't lock objects with arrays now??	DESIGN	0.919884911985865	WITHOUT_CLASSIFICATION	0.08011508801413494	DESIGN
//TODO: if object was an uninitialized proxy, this is inefficient, //      resulting in two SQL selects	DESIGN	0.9070340565231735	WITHOUT_CLASSIFICATION	0.09296594347682653	DESIGN
//before cascade! //TODO: should this be Session.instantiate(Persister, ...)?	DESIGN	0.950952251446755	DESIGN	0.04904774855324505	WITHOUT_CLASSIFICATION
// TODO : absolutely no usages of this constructor form; can it go away?	DESIGN	0.822190680352069	DESIGN	0.177809319647931	WITHOUT_CLASSIFICATION
// todo : need to find a clean way to handle the "event source" role // a seperate classs responsible for generating/dispatching events just duplicates most of the Session methods... // passing around seperate reto interceptor, factory, actionQueue, and persistentContext is not manageable...	DESIGN	0.992300382209012	DESIGN	0.007699617790988082	WITHOUT_CLASSIFICATION
// todo : remove	DESIGN	0.9986067651616012	WITHOUT_CLASSIFICATION	0.0013932348383988062	DESIGN
//aliasRefNode.resolve( false, false, aliasRefNode.getText() ); //TODO: is it kosher to do it here? //TODO: is it kosher to do it here?	DESIGN	0.5639144692979086	DESIGN	0.43608553070209144	WITHOUT_CLASSIFICATION
// No explicit select expression; render the id and properties // projection lists for every persister in the from clause into // a single 'token node'. //TODO: the only reason we need this stuff now is collection filters, //      we should get rid of derived select clause completely!	DESIGN	0.8966929897140684	DESIGN	0.10330701028593159	WITHOUT_CLASSIFICATION
// TODO : an optimization here would be to consider cascade deletes and not gen those delete statements; //      the difficulty is the ordering of the tables here vs the cascade attributes on the persisters -> //          the table info gotten here should really be self-contained (i.e., a class representation //          defining all the needed attributes), then we could then get an array of those	DESIGN	0.9996044310013033	DESIGN	3.955689986968028E-4	WITHOUT_CLASSIFICATION
// TODO: get SQL rendering out of here, create an AST for the join expressions. // Use the SQL generator grammar to generate the SQL text for the index expression.	DESIGN	0.9941586674211166	WITHOUT_CLASSIFICATION	0.0058413325788833825	DESIGN
// TODO : this really needs to be delayed unitl after we definitively know all node types // where this is currently a problem is parameters for which where we cannot unequivocally // resolve an expected type	DESIGN	0.9630799902991367	DESIGN	0.036920009700863274	WITHOUT_CLASSIFICATION
// TODO: Figure out a better way to get the FROM elements in a proper tree structure. // If this is not the destination of a many-to-many, add it as a child of the origin.	DESIGN	0.997596704930584	DESIGN	0.0024032950694160174	WITHOUT_CLASSIFICATION
// work around that crazy issue where the tree contains // "empty" FromElements (no text); afaict, this is caused // by FromElementFactory.createCollectionJoin()	DESIGN	0.8156873593475746	WITHOUT_CLASSIFICATION	0.1843126406524253	DESIGN
//TODO: this class does too many things! we need a different //kind of path expression parser for each of the diffferent //ways in which path expressions can occur	DESIGN	0.9330117056742984	DESIGN	0.06698829432570169	WITHOUT_CLASSIFICATION
//real hacky... // used to count the nesting of parentheses	DESIGN	0.9875653258567713	WITHOUT_CLASSIFICATION	0.012434674143228713	DESIGN
// TODO : would be really nice to cache the spec on the query-def so as to not have to re-calc the hash; // currently not doable though because of the resultset-ref stuff...	DESIGN	0.9553110637154667	DESIGN	0.044688936284533284	WITHOUT_CLASSIFICATION
//for arrays, we should end the collection load before resolving //the entities, since the actual array instances are not instantiated //during loading //TODO: or we could do this polymorphically, and have two //      different operations implemented differently for arrays	DESIGN	0.9017133139245745	DESIGN	0.09828668607542548	WITHOUT_CLASSIFICATION
// polymorphism not really handled completely correctly, // perhaps...well, actually its ok, assuming that the // entity name used in the lookup is the same as the // the one used here, which it will be	DESIGN	0.7403610436220769	WITHOUT_CLASSIFICATION	0.2596389563779231	DESIGN
// TODO: should "record" how many properties we have reffered to - and if we  //       don't get'em'all we throw an exception! Way better than trial and error ;)	DESIGN	0.99973049818979	DESIGN	2.6950181020999144E-4	WITHOUT_CLASSIFICATION
// VERY IMPORTANT!!!! - This class needs to be free of any static references // to any CGLIB or Javassist classes.  Otherwise, users will always need both // on their classpaths no matter which (if either) they use. // // Another option here would be to remove the Hibernate.isPropertyInitialized() // method and have the users go through the SessionFactory to get this information.	DESIGN	0.9778626748178619	WITHOUT_CLASSIFICATION	0.022137325182138085	DESIGN
// TODO: is it really neceassry to provide Configuration to CollectionPersisters ? Should it not be enough with associated class ? // or why does EntityPersister's not get access to configuration ? // // The only reason I could see that Configuration gets passed to collection persisters // is so that they can look up the dom4j node name of the entity element in case // no explicit node name was applied at the collection element level.  Are you kidding me? // Trivial to fix then.  Just store and expose the node name on the entity persister // (which the collection persister looks up anyway via other means...).	DESIGN	0.9999999747608619	DESIGN	2.5239138086635628E-8	WITHOUT_CLASSIFICATION
//for backward compatibility, allow a set with no not-null  //element columns, using all columns in the row locater SQL //TODO: create an implicit not null constraint on all cols?	DESIGN	0.9705458948603732	WITHOUT_CLASSIFICATION	0.029454105139626777	DESIGN
//SPACES //TODO: i'm not sure, but perhaps we should exclude //      abstract denormalized tables?	DESIGN	0.9955870533598579	DESIGN	0.00441294664014205	WITHOUT_CLASSIFICATION
//workaround, for backward compatibility of sets with no //not-null columns, assume all columns are used in the //row locator SQL	DESIGN	0.9993999967943714	WITHOUT_CLASSIFICATION	6.000032056285092E-4	DESIGN
//note that this method could easily be moved up to BasicEntityPersister, //if we ever needed to reuse it from other subclasses	DESIGN	0.8575566945710521	WITHOUT_CLASSIFICATION	0.14244330542894787	DESIGN
//index += getPropertyColumnSpan( i ); //TODO:  this is kinda slow...	DESIGN	0.5109778206828833	DESIGN	0.4890221793171167	WITHOUT_CLASSIFICATION
//TODO: need some caching scheme? really comes down to decision  //      regarding amount of state (if any) kept on PropertyAccessors	DESIGN	0.7201421618375241	WITHOUT_CLASSIFICATION	0.2798578381624759	DESIGN
// TODO: here is why we need to make bytecode provider global :( // TODO : again, fix this after HHH-1907 is complete	DESIGN	0.9999995966936067	DESIGN	4.033063932989722E-7	WITHOUT_CLASSIFICATION
//TODO: Yuck! This is not quite good enough, it's a quick //hack around the problem of having a to-one association //that refers to an embedded component:	DESIGN	0.999978072294674	DESIGN	2.1927705326109576E-5	WITHOUT_CLASSIFICATION
// for DOM4J "collections" only // TODO: it would be better if this was done at the higher level by Printer	DESIGN	0.9679265839960053	DESIGN	0.032073416003994756	WITHOUT_CLASSIFICATION
// would be great to move all this below here into another method that could also be used // from the new scrolling stuff. // // Would need to change the way the max-row stuff is handled (i.e. behind an interface) so // that I could do the control breaking at the means to know when to stop	DESIGN	0.9999999822681874	DESIGN	1.773181255793446E-8	WITHOUT_CLASSIFICATION
//TODO: can we *always* use the "null property" approach for everything?	DESIGN	0.8488601591834024	DESIGN	0.15113984081659756	WITHOUT_CLASSIFICATION
//polymorphism comment above	DESIGN	0.9999216918305668	WITHOUT_CLASSIFICATION	7.830816943322496E-5	DESIGN
// some messy, complex stuff here, since createCriteria() can take an // aliased path, or a path rooted at the creating criteria instance	DESIGN	0.9999983959411015	WITHOUT_CLASSIFICATION	1.6040588984168857E-6	DESIGN
//TODO: really bad, evil hack to fix!!!	DESIGN	0.9999981904840494	DESIGN	1.8095159506936673E-6	WITHOUT_CLASSIFICATION
// ugly hack for cases like "elements(foo.bar.collection)" // (multi-part path expression ending in elements or indices)	DESIGN	0.9762158851254656	DESIGN	0.02378411487453434	WITHOUT_CLASSIFICATION
// try block is a hack around fact that currently tuplizers are not // given the opportunity to resolve a subclass entity name.  this // allows the (we assume custom) interceptor the ability to // influence this decision if we were not able to based on the // given entityName	DESIGN	0.9999840835202354	DESIGN	1.591647976469019E-5	WITHOUT_CLASSIFICATION
/////////////////////////////////////////////////////////////////////// // HACK ALERT !!!!!!!!!!!!!!!!!!!!!!!!!!!! // Attempt to work around "ghost" ImpliedFromElements that occasionally // show up between the actual things being joined.  This consistently // occurs from index nodes (at least against many-to-many).  Not sure // if there are other conditions // // Essentially, look-ahead to the next FromElement that actually // writes something to the SQL	DESIGN	0.9292111609645051	DESIGN	0.07078883903549499	WITHOUT_CLASSIFICATION
//init the table here instead of earlier, so that we can get a quoted table name //TODO: would it be better to simply pass the qualified table name, instead of //      splitting it up into schema/catalog/table names	DESIGN	0.8664290143214435	DESIGN	0.13357098567855658	WITHOUT_CLASSIFICATION
// TODO : would be great to have a Mapping#hasNonIdentifierPropertyNamedId method // I don't believe that Mapping#getReferencedPropertyType accounts for the identifier property; so // if it returns for a property named 'id', then we should have a non-id field named id	DESIGN	0.9877800960316737	DESIGN	0.012219903968326307	WITHOUT_CLASSIFICATION
//TODO: is this really necessary????	DESIGN	0.8658176851561734	DESIGN	0.13418231484382662	WITHOUT_CLASSIFICATION
//TODO: ideally we need the construction of PropertyAccessor to take the following: //      1) EntityMode //      2) EntityMode-specific data (i.e., the classname for pojo entities) //      3) Property-specific data based on the EntityMode (i.e., property-name or dom4j-node-name) // The easiest way, with the introduction of the new runtime-metamodel classes, would be the // the following predicates: //      1) PropertyAccessorFactory.getPropertyAccessor() takes references to both a //          org.hibernate.metadata.EntityModeMetadata and org.hibernate.metadata.Property //      2) What is now termed a "PropertyAccessor" stores any values needed from those two //          pieces of information //      3) Code can then simply call PropertyAccess.getGetter() with no parameters; likewise with //          PropertyAccessor.getSetter()	DESIGN	0.889802883795062	DESIGN	0.11019711620493806	WITHOUT_CLASSIFICATION
//TODO: this is temporary in that the end result will probably not take a Property reference per-se.	DESIGN	0.9918096351513108	DESIGN	0.008190364848689256	WITHOUT_CLASSIFICATION
// todo : this eventually needs to be removed	DESIGN	0.8966470493375085	WITHOUT_CLASSIFICATION	0.10335295066249155	DESIGN
//TODO: make this a bit nicer	DESIGN	0.9651485921797991	DESIGN	0.03485140782020092	WITHOUT_CLASSIFICATION
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.8667071720438543	WITHOUT_CLASSIFICATION	0.1332928279561458	DESIGN
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.8667071720438543	WITHOUT_CLASSIFICATION	0.1332928279561458	DESIGN
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.8667071720438543	WITHOUT_CLASSIFICATION	0.1332928279561458	DESIGN
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.8667071720438543	WITHOUT_CLASSIFICATION	0.1332928279561458	DESIGN
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.8667071720438543	WITHOUT_CLASSIFICATION	0.1332928279561458	DESIGN
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.8667071720438543	WITHOUT_CLASSIFICATION	0.1332928279561458	DESIGN
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.8667071720438543	WITHOUT_CLASSIFICATION	0.1332928279561458	DESIGN
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.8667071720438543	WITHOUT_CLASSIFICATION	0.1332928279561458	DESIGN
/**     * FIXME Per the RegionFactory class Javadoc, this constructor version     * should not be necessary.     *      * @param props The configuration properties     */	DESIGN	0.9990496139620104	DESIGN	9.503860379896425E-4	WITHOUT_CLASSIFICATION
/**     * FIXME Per the RegionFactory class Javadoc, this constructor version     * should not be necessary.     *      * @param props The configuration properties     */	DESIGN	0.9990496139620104	DESIGN	9.503860379896425E-4	WITHOUT_CLASSIFICATION
/**     * FIXME Per the RegionFactory class Javadoc, this constructor version     * should not be necessary.     *      * @param props The configuration properties     */	DESIGN	0.9990496139620104	DESIGN	9.503860379896425E-4	WITHOUT_CLASSIFICATION
// TODO : probably better to calculate these and pass them in, as it'll be more performant	DESIGN	0.9983593314684446	DESIGN	0.0016406685315553404	WITHOUT_CLASSIFICATION
