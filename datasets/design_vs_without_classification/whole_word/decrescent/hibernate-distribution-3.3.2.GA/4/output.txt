//test out the optimizer:	WITHOUT_CLASSIFICATION	0.9985890767269356	WITHOUT_CLASSIFICATION	0.0014109232730644137	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.9998122686237135	WITHOUT_CLASSIFICATION	1.87731376286521E-4	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.9998122686237135	WITHOUT_CLASSIFICATION	1.87731376286521E-4	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.9998122686237135	WITHOUT_CLASSIFICATION	1.87731376286521E-4	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.9998122686237135	WITHOUT_CLASSIFICATION	1.87731376286521E-4	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.9998122686237135	WITHOUT_CLASSIFICATION	1.87731376286521E-4	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.9998122686237135	WITHOUT_CLASSIFICATION	1.87731376286521E-4	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.9998122686237135	WITHOUT_CLASSIFICATION	1.87731376286521E-4	DESIGN
// return	WITHOUT_CLASSIFICATION	0.9998232189981376	WITHOUT_CLASSIFICATION	1.7678100186243597E-4	DESIGN
// return	WITHOUT_CLASSIFICATION	0.9998232189981376	WITHOUT_CLASSIFICATION	1.7678100186243597E-4	DESIGN
/* | this | bean | args | raw bean | */	WITHOUT_CLASSIFICATION	0.999238588607482	WITHOUT_CLASSIFICATION	7.614113925180263E-4	DESIGN
// invokeinterface	WITHOUT_CLASSIFICATION	0.9991103531722325	WITHOUT_CLASSIFICATION	8.896468277674399E-4	DESIGN
// astore 4 // store the raw bean	WITHOUT_CLASSIFICATION	0.9998884111980991	WITHOUT_CLASSIFICATION	1.1158880190087023E-4	DESIGN
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999973742956616	WITHOUT_CLASSIFICATION	2.6257043384068727E-6	DESIGN
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999973742956616	WITHOUT_CLASSIFICATION	2.6257043384068727E-6	DESIGN
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.9999569300951336	WITHOUT_CLASSIFICATION	4.306990486635437E-5	DESIGN
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9996145692444731	WITHOUT_CLASSIFICATION	3.85430755526805E-4	DESIGN
// putfield // new value of the field	WITHOUT_CLASSIFICATION	0.9998750081761899	WITHOUT_CLASSIFICATION	1.249918238101398E-4	DESIGN
// reference type	WITHOUT_CLASSIFICATION	0.9988814879087605	WITHOUT_CLASSIFICATION	0.0011185120912394952	DESIGN
// double	WITHOUT_CLASSIFICATION	0.9999801446479932	WITHOUT_CLASSIFICATION	1.9855352006782964E-5	DESIGN
// double	WITHOUT_CLASSIFICATION	0.9999801446479932	WITHOUT_CLASSIFICATION	1.9855352006782964E-5	DESIGN
// long	WITHOUT_CLASSIFICATION	0.9997097329964194	WITHOUT_CLASSIFICATION	2.902670035806132E-4	DESIGN
// just decrement the lock, don't recache // (we don't know which transaction won)	WITHOUT_CLASSIFICATION	0.9998606378896014	WITHOUT_CLASSIFICATION	1.3936211039845454E-4	DESIGN
// decode row selection...	WITHOUT_CLASSIFICATION	0.9997082716619872	WITHOUT_CLASSIFICATION	2.917283380128153E-4	DESIGN
//disassembled state gets put in a new array (we write to cache by value!)	WITHOUT_CLASSIFICATION	0.9932326897589475	WITHOUT_CLASSIFICATION	0.006767310241052507	DESIGN
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9953952206519836	WITHOUT_CLASSIFICATION	0.0046047793480163066	DESIGN
// CHECK	WITHOUT_CLASSIFICATION	0.9998181745561301	WITHOUT_CLASSIFICATION	1.8182544386979196E-4	DESIGN
// ROW ID	WITHOUT_CLASSIFICATION	0.999762221710334	WITHOUT_CLASSIFICATION	2.3777828966587837E-4	DESIGN
// COMPOSITE-ID	WITHOUT_CLASSIFICATION	0.9991103531722325	WITHOUT_CLASSIFICATION	8.896468277674399E-4	DESIGN
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9991103531722325	WITHOUT_CLASSIFICATION	8.896468277674399E-4	DESIGN
/*	WITHOUT_CLASSIFICATION	0.9804982199623147	WITHOUT_CLASSIFICATION	0.01950178003768536	DESIGN
// DYNAMIC INSERT	WITHOUT_CLASSIFICATION	0.9991382357289812	WITHOUT_CLASSIFICATION	8.617642710189339E-4	DESIGN
// PERSISTER	WITHOUT_CLASSIFICATION	0.9991103531722325	WITHOUT_CLASSIFICATION	8.896468277674399E-4	DESIGN
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9991597360336352	WITHOUT_CLASSIFICATION	8.402639663647748E-4	DESIGN
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9991227879551358	WITHOUT_CLASSIFICATION	8.772120448641185E-4	DESIGN
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9991227879551358	WITHOUT_CLASSIFICATION	8.772120448641185E-4	DESIGN
// generated properties can *never* be insertable...	WITHOUT_CLASSIFICATION	0.9975212283166696	WITHOUT_CLASSIFICATION	0.002478771683330396	DESIGN
// TABLE	WITHOUT_CLASSIFICATION	0.9998605571354784	WITHOUT_CLASSIFICATION	1.3944286452159083E-4	DESIGN
//by default, natural-ids are "immutable" (constant)	WITHOUT_CLASSIFICATION	0.9987868805554544	WITHOUT_CLASSIFICATION	0.0012131194445456869	DESIGN
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.999375182534861	WITHOUT_CLASSIFICATION	6.248174651390031E-4	DESIGN
// we found some extends attributes referencing entities which were // not already processed.  here we need to locate all entity-names // and class-names contained in this document itself, making sure // that these get removed from the extendz list such that only // extends names which require us to delay processing (i.e. // external to this document and not yet processed) are contained // in the returned result	WITHOUT_CLASSIFICATION	0.718298898742757	DESIGN	0.28170110125724307	WITHOUT_CLASSIFICATION
/**	WITHOUT_CLASSIFICATION	0.8138000989392026	DESIGN	0.18619990106079748	WITHOUT_CLASSIFICATION
//	WITHOUT_CLASSIFICATION	0.9998122686237135	WITHOUT_CLASSIFICATION	1.87731376286521E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998122686237135	WITHOUT_CLASSIFICATION	1.87731376286521E-4	DESIGN
/**	WITHOUT_CLASSIFICATION	0.8138000989392026	DESIGN	0.18619990106079748	WITHOUT_CLASSIFICATION
//	WITHOUT_CLASSIFICATION	0.9998122686237135	WITHOUT_CLASSIFICATION	1.87731376286521E-4	DESIGN
// If close() is called, guarantee unbind()	WITHOUT_CLASSIFICATION	0.999966114500233	WITHOUT_CLASSIFICATION	3.388549976697101E-5	DESIGN
// if a ThreadLocalSessionContext-bound session happens to get // serialized, to be completely correct, we need to make sure // that unbinding of that session occurs.	WITHOUT_CLASSIFICATION	0.9769120297055122	WITHOUT_CLASSIFICATION	0.023087970294487944	DESIGN
// on the inverse, it makes sense that if a ThreadLocalSessionContext- // bound session then gets deserialized to go ahead and re-bind it to // the ThreadLocalSessionContext session map.	WITHOUT_CLASSIFICATION	0.9820393268815126	WITHOUT_CLASSIFICATION	0.017960673118487397	DESIGN
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9981944665715593	WITHOUT_CLASSIFICATION	0.0018055334284406983	DESIGN
// 60 second lock timeout	WITHOUT_CLASSIFICATION	0.9993990484920997	WITHOUT_CLASSIFICATION	6.00951507900235E-4	DESIGN
// OptimisticCache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994710384654842	WITHOUT_CLASSIFICATION	5.28961534515837E-4	DESIGN
// Cache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996147234032992	WITHOUT_CLASSIFICATION	3.8527659670085153E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998122686237135	WITHOUT_CLASSIFICATION	1.87731376286521E-4	DESIGN
// do the put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9995892222847064	WITHOUT_CLASSIFICATION	4.1077771529372716E-4	DESIGN
//ignore!	WITHOUT_CLASSIFICATION	0.9993169148631355	WITHOUT_CLASSIFICATION	6.830851368645701E-4	DESIGN
// tree cache in optimistic mode seems to have as very difficult // time with remove calls on non-existent nodes (NPEs)...	WITHOUT_CLASSIFICATION	0.9940359082458947	WITHOUT_CLASSIFICATION	0.005964091754105232	DESIGN
//60 seconds	WITHOUT_CLASSIFICATION	0.9970349954873386	WITHOUT_CLASSIFICATION	0.002965004512661375	DESIGN
//ignore!	WITHOUT_CLASSIFICATION	0.9993169148631355	WITHOUT_CLASSIFICATION	6.830851368645701E-4	DESIGN
//60 seconds	WITHOUT_CLASSIFICATION	0.9970349954873386	WITHOUT_CLASSIFICATION	0.002965004512661375	DESIGN
//do the failfast put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9993131370036292	WITHOUT_CLASSIFICATION	6.868629963708426E-4	DESIGN
// NOTE : evict() operates locally only (i.e., does not propogate // to any other nodes in the potential cluster).  This is // exactly what is needed when we destroy() here; destroy() is used // as part of the process of shutting down a SessionFactory; thus // these removals should not be propogated	WITHOUT_CLASSIFICATION	0.9917010660088986	DESIGN	0.008298933991101433	WITHOUT_CLASSIFICATION
//    protected RegionRootListener listener;	WITHOUT_CLASSIFICATION	0.993291858604252	WITHOUT_CLASSIFICATION	0.006708141395748092	DESIGN
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.999854717241188	WITHOUT_CLASSIFICATION	1.4528275881198565E-4	DESIGN
// If we've been blocking for the mutex, perhaps another // thread has already reestablished the root. // In case the node was reestablised via replication, confirm it's  // marked "resident" (a status which doesn't replicate)	WITHOUT_CLASSIFICATION	0.999488231846223	WITHOUT_CLASSIFICATION	5.117681537768776E-4	DESIGN
// For pessimistic locking, we just want to toss out our ref // to any old invalid root node and get the latest (may be null)            	WITHOUT_CLASSIFICATION	0.9997311856105691	WITHOUT_CLASSIFICATION	2.688143894309554E-4	DESIGN
// The rest only matters for optimistic locking, where we // need to establish the proper data version on the region root	WITHOUT_CLASSIFICATION	0.9997277277346698	WITHOUT_CLASSIFICATION	2.72272265330281E-4	DESIGN
// Don't hold a transactional lock for this 	WITHOUT_CLASSIFICATION	0.9887264133019086	WITHOUT_CLASSIFICATION	0.011273586698091422	DESIGN
// Make sure the root node for the region exists and  // has a DataVersion that never complains	WITHOUT_CLASSIFICATION	0.9998400055216227	WITHOUT_CLASSIFICATION	1.599944783773128E-4	DESIGN
// Never evict this node	WITHOUT_CLASSIFICATION	0.9981596025308568	WITHOUT_CLASSIFICATION	0.001840397469143165	DESIGN
// Fix up the resident flag	WITHOUT_CLASSIFICATION	0.9996475828233782	WITHOUT_CLASSIFICATION	3.524171766218417E-4	DESIGN
// 60 seconds	WITHOUT_CLASSIFICATION	0.9991858933601094	WITHOUT_CLASSIFICATION	8.14106639890678E-4	DESIGN
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9997638884023632	WITHOUT_CLASSIFICATION	2.3611159763682062E-4	DESIGN
// no-op. We don't own the cache so we shouldn't stop it.	WITHOUT_CLASSIFICATION	0.9990929449390047	WITHOUT_CLASSIFICATION	9.070550609952296E-4	DESIGN
// This should only be possible if the caches are constructor injected 	WITHOUT_CLASSIFICATION	0.9987350041529174	WITHOUT_CLASSIFICATION	0.0012649958470826944	DESIGN
// We only build caches if *none* were passed in.  Passing in // caches counts as a clear statement of exactly what is wanted	WITHOUT_CLASSIFICATION	0.9999906478452207	WITHOUT_CLASSIFICATION	9.352154779217495E-6	DESIGN
// Set up the cache factory	WITHOUT_CLASSIFICATION	0.9972494609799203	WITHOUT_CLASSIFICATION	0.002750539020079697	DESIGN
// See if the user configured a multiplexer stack	WITHOUT_CLASSIFICATION	0.9999235291631976	WITHOUT_CLASSIFICATION	7.647083680240935E-5	DESIGN
// Default to collections sharing entity cache if there is one	WITHOUT_CLASSIFICATION	0.9998976993124153	WITHOUT_CLASSIFICATION	1.0230068758474609E-4	DESIGN
// Default to sharing the entity cache if there is one	WITHOUT_CLASSIFICATION	0.999925569607833	WITHOUT_CLASSIFICATION	7.443039216706246E-5	DESIGN
// For Timestamps, we default to a separate config	WITHOUT_CLASSIFICATION	0.9979257424826662	WITHOUT_CLASSIFICATION	0.0020742575173338653	DESIGN
// We can't change the TM on a running cache; just check // if the cache has no TM and we're OK with that	WITHOUT_CLASSIFICATION	0.9998497446595112	WITHOUT_CLASSIFICATION	1.5025534048891863E-4	DESIGN
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9993553832250082	WITHOUT_CLASSIFICATION	6.446167749917772E-4	DESIGN
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9995781294177475	WITHOUT_CLASSIFICATION	4.218705822524314E-4	DESIGN
// This method should be implemented assuming it's valid to  // do start/stop/start -- leave state appropriate for another start	WITHOUT_CLASSIFICATION	0.9846425765828193	WITHOUT_CLASSIFICATION	0.015357423417180728	DESIGN
// Make sure we don't re-release the same cache	WITHOUT_CLASSIFICATION	0.9944907334217405	WITHOUT_CLASSIFICATION	0.005509266578259365	DESIGN
// We use a different delegate than the non-optimistic superclass default	WITHOUT_CLASSIFICATION	0.9976191998171025	WITHOUT_CLASSIFICATION	0.0023808001828976287	DESIGN
// Following methods we don't delegate since they have so little logic // it's clearer to just implement them here	WITHOUT_CLASSIFICATION	0.9918845592537464	WITHOUT_CLASSIFICATION	0.008115440746253592	DESIGN
// If JBC is using INVALIDATION, we don't want to propagate changes. // We use the Timestamps cache to manage invalidation	WITHOUT_CLASSIFICATION	0.9997572530678058	WITHOUT_CLASSIFICATION	2.4274693219413445E-4	DESIGN
// We don't want to waste effort setting an option if JBC is // already in LOCAL mode. If JBC is REPL_(A)SYNC then check // if they passed an config option to disable query replication	WITHOUT_CLASSIFICATION	0.9999995747606849	WITHOUT_CLASSIFICATION	4.252393150102006E-7	DESIGN
// Don't hold the JBC node lock throughout the tx, as that // prevents updates // Add a zero (or low) timeout option so we don't block // waiting for tx's that did a put to commit	WITHOUT_CLASSIFICATION	0.9999971767848893	WITHOUT_CLASSIFICATION	2.823215110629349E-6	DESIGN
// Double check the distributed cache	WITHOUT_CLASSIFICATION	0.9999759924922679	WITHOUT_CLASSIFICATION	2.4007507732081404E-5	DESIGN
// Get an exclusive right to update JBC for this key from this node.	WITHOUT_CLASSIFICATION	0.9998697130580341	WITHOUT_CLASSIFICATION	1.302869419659374E-4	DESIGN
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9993512283068796	WITHOUT_CLASSIFICATION	6.487716931203026E-4	DESIGN
// Initial load from JBC	WITHOUT_CLASSIFICATION	0.9995675008439784	WITHOUT_CLASSIFICATION	4.3249915602172693E-4	DESIGN
// See if we had a 2nd invalidation from the same initial // preinvalidation timestamp. If so, only increment // if the new current value is an increase	WITHOUT_CLASSIFICATION	0.9999965368042194	WITHOUT_CLASSIFICATION	3.463195780615084E-6	DESIGN
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9993512283068796	WITHOUT_CLASSIFICATION	6.487716931203026E-4	DESIGN
// If the workspace node has null as well, OK; if not we've // been modified in a non-comparable manner, which we have to // treat as us being newer	WITHOUT_CLASSIFICATION	0.9999556714044981	WITHOUT_CLASSIFICATION	4.432859550186634E-5	DESIGN
// The standard comparator types are not Serializable but are singletons	WITHOUT_CLASSIFICATION	0.9998117296391859	WITHOUT_CLASSIFICATION	1.8827036081402464E-4	DESIGN
// ignore!	WITHOUT_CLASSIFICATION	0.9998122686237135	WITHOUT_CLASSIFICATION	1.87731376286521E-4	DESIGN
// ignore it	WITHOUT_CLASSIFICATION	0.9986861703899522	WITHOUT_CLASSIFICATION	0.0013138296100477557	DESIGN
// construct the cache	WITHOUT_CLASSIFICATION	0.9994830059497875	WITHOUT_CLASSIFICATION	5.1699405021253E-4	DESIGN
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9985762389650197	WITHOUT_CLASSIFICATION	0.0014237610349802764	DESIGN
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9985762389650197	WITHOUT_CLASSIFICATION	0.0014237610349802764	DESIGN
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9970426553771139	WITHOUT_CLASSIFICATION	0.002957344622886104	DESIGN
//swaldman 2006-08-28: define c3p0-style configuration parameters for initialPoolSize, which //                     hibernate sensibly lets default to minPoolSize, but we'll let users //                     override it with the c3p0-style property if they want.	WITHOUT_CLASSIFICATION	0.9996474151108531	WITHOUT_CLASSIFICATION	3.525848891469715E-4	DESIGN
/*DataSource unpooled = DataSources.unpooledDataSource(	WITHOUT_CLASSIFICATION	0.9990302159699643	WITHOUT_CLASSIFICATION	9.697840300357113E-4	DESIGN
// TRUE if the pool is borrowed from the outside, FALSE if we used to create it	WITHOUT_CLASSIFICATION	0.9211368843610318	WITHOUT_CLASSIFICATION	0.07886311563896818	DESIGN
// get a connection from the pool (thru DriverManager, cfr. Proxool doc)	WITHOUT_CLASSIFICATION	0.9987446370503099	WITHOUT_CLASSIFICATION	0.0012553629496900541	DESIGN
// set the Transaction Isolation if defined	WITHOUT_CLASSIFICATION	0.9998594224271035	WITHOUT_CLASSIFICATION	1.4057757289648396E-4	DESIGN
// toggle autoCommit to false if set	WITHOUT_CLASSIFICATION	0.9997009068844154	WITHOUT_CLASSIFICATION	2.990931155845681E-4	DESIGN
// return the connection	WITHOUT_CLASSIFICATION	0.9997530889015187	WITHOUT_CLASSIFICATION	2.469110984812911E-4	DESIGN
// Get the configurator files (if available)	WITHOUT_CLASSIFICATION	0.9999074273120561	WITHOUT_CLASSIFICATION	9.257268794390901E-5	DESIGN
// Default the Proxool alias setting	WITHOUT_CLASSIFICATION	0.9999900584032543	WITHOUT_CLASSIFICATION	9.941596745747523E-6	DESIGN
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999138518955928	WITHOUT_CLASSIFICATION	8.614810440711784E-5	DESIGN
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999138518955928	WITHOUT_CLASSIFICATION	8.614810440711784E-5	DESIGN
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9998875262350012	WITHOUT_CLASSIFICATION	1.1247376499875967E-4	DESIGN
// Set the existing pool flag to true	WITHOUT_CLASSIFICATION	0.9998328988309028	WITHOUT_CLASSIFICATION	1.6710116909717434E-4	DESIGN
// Configured using the JAXP Configurator	WITHOUT_CLASSIFICATION	0.9997214440796198	WITHOUT_CLASSIFICATION	2.7855592038014367E-4	DESIGN
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999138518955928	WITHOUT_CLASSIFICATION	8.614810440711784E-5	DESIGN
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9998875262350012	WITHOUT_CLASSIFICATION	1.1247376499875967E-4	DESIGN
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9998875262350012	WITHOUT_CLASSIFICATION	1.1247376499875967E-4	DESIGN
// Configured using the Properties File Configurator	WITHOUT_CLASSIFICATION	0.9995563626849676	WITHOUT_CLASSIFICATION	4.4363731503237175E-4	DESIGN
// Remember Isolation level	WITHOUT_CLASSIFICATION	0.9480803263351124	WITHOUT_CLASSIFICATION	0.051919673664887596	DESIGN
// If the provider was leeching off an existing pool don't close it	WITHOUT_CLASSIFICATION	0.9999998364478487	WITHOUT_CLASSIFICATION	1.6355215114884608E-7	DESIGN
// We have created the pool ourselves, so shut it down	WITHOUT_CLASSIFICATION	0.9999486489228807	WITHOUT_CLASSIFICATION	5.1351077119268474E-5	DESIGN
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.99431065891822	WITHOUT_CLASSIFICATION	0.005689341081780022	DESIGN
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.99431065891822	WITHOUT_CLASSIFICATION	0.005689341081780022	DESIGN
//always overwrite nonversioned data	WITHOUT_CLASSIFICATION	0.9998261934848247	WITHOUT_CLASSIFICATION	1.7380651517519838E-4	DESIGN
//public Currency getCurrency(int col) throws HibernateException;	WITHOUT_CLASSIFICATION	0.997867887394279	WITHOUT_CLASSIFICATION	0.0021321126057209	DESIGN
// default is POJO	WITHOUT_CLASSIFICATION	0.9993625615540819	WITHOUT_CLASSIFICATION	6.374384459180197E-4	DESIGN
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.9995180819970119	WITHOUT_CLASSIFICATION	4.819180029881366E-4	DESIGN
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.9995180819970119	WITHOUT_CLASSIFICATION	4.819180029881366E-4	DESIGN
//private CacheEntry cacheEntry;	WITHOUT_CLASSIFICATION	0.9975950585994514	WITHOUT_CLASSIFICATION	0.0024049414005485508	DESIGN
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9998685077481391	WITHOUT_CLASSIFICATION	1.3149225186089486E-4	DESIGN
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9949612781456462	WITHOUT_CLASSIFICATION	0.0050387218543538614	DESIGN
// get the updated snapshot of the entity state by cloning current state; // it is safe to copy in place, since by this time no-one else (should have) // has a reference  to the array	WITHOUT_CLASSIFICATION	0.9999998320512422	WITHOUT_CLASSIFICATION	1.6794875771981658E-7	DESIGN
// this entity defines proeprty generation, so process those generated // values...	WITHOUT_CLASSIFICATION	0.9993280830331224	WITHOUT_CLASSIFICATION	6.719169668775937E-4	DESIGN
// have the entity entry perform post-update processing, passing it the // update state and the new version (if one).	WITHOUT_CLASSIFICATION	0.9995815717927437	WITHOUT_CLASSIFICATION	4.1842820725633177E-4	DESIGN
/*!persister.isCacheInvalidationRequired()*/	WITHOUT_CLASSIFICATION	0.9978506171800194	WITHOUT_CLASSIFICATION	0.002149382819980599	DESIGN
// need to look it up from the persistence-context	WITHOUT_CLASSIFICATION	0.9983445350335857	WITHOUT_CLASSIFICATION	0.0016554649664144035	DESIGN
//sort first by role name	WITHOUT_CLASSIFICATION	0.9990908178574819	WITHOUT_CLASSIFICATION	9.091821425180772E-4	DESIGN
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9949612781456462	WITHOUT_CLASSIFICATION	0.0050387218543538614	DESIGN
//then by fk	WITHOUT_CLASSIFICATION	0.998508065288887	WITHOUT_CLASSIFICATION	0.0014919347111129494	DESIGN
// nothing to do	WITHOUT_CLASSIFICATION	0.9995564758744286	WITHOUT_CLASSIFICATION	4.435241255713848E-4	DESIGN
// nothing to do	WITHOUT_CLASSIFICATION	0.9995564758744286	WITHOUT_CLASSIFICATION	4.435241255713848E-4	DESIGN
// an existing collection that was either non-empty or uninitialized // is replaced by null or a different collection // (if the collection is uninitialized, hibernate has no way of // knowing if the collection is actually empty without querying the db)	WITHOUT_CLASSIFICATION	0.66282132906314	WITHOUT_CLASSIFICATION	0.33717867093686005	DESIGN
// this method is called when a new non-null collection is persisted // or when an existing (non-null) collection is moved to a new owner	WITHOUT_CLASSIFICATION	0.9925047586281616	WITHOUT_CLASSIFICATION	0.007495241371838408	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998122686237135	WITHOUT_CLASSIFICATION	1.87731376286521E-4	DESIGN
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9931663410246979	WITHOUT_CLASSIFICATION	0.006833658975302021	DESIGN
//do nothing - we only need to notify the cache...	WITHOUT_CLASSIFICATION	0.994027911753803	WITHOUT_CLASSIFICATION	0.005972088246197017	DESIGN
//sort first by entity name	WITHOUT_CLASSIFICATION	0.9991282522976748	WITHOUT_CLASSIFICATION	8.71747702325154E-4	DESIGN
//then by id	WITHOUT_CLASSIFICATION	0.9988840773262216	WITHOUT_CLASSIFICATION	0.001115922673778376	DESIGN
// to be safe...	WITHOUT_CLASSIFICATION	0.9983389723300725	WITHOUT_CLASSIFICATION	0.0016610276699274994	DESIGN
// no transformations took place, so handle it as we would a // non-instrumented class	WITHOUT_CLASSIFICATION	0.9988750745162435	WITHOUT_CLASSIFICATION	0.0011249254837564834	DESIGN
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9998321344708204	WITHOUT_CLASSIFICATION	1.6786552917967033E-4	DESIGN
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9998321344708204	WITHOUT_CLASSIFICATION	1.6786552917967033E-4	DESIGN
// intentionally empty	WITHOUT_CLASSIFICATION	0.9993201763465654	WITHOUT_CLASSIFICATION	6.798236534346502E-4	DESIGN
//test out the optimizer:	WITHOUT_CLASSIFICATION	0.9985890767269356	WITHOUT_CLASSIFICATION	0.0014109232730644137	DESIGN
// set the name of bulk accessor.	WITHOUT_CLASSIFICATION	0.9994926264496218	WITHOUT_CLASSIFICATION	5.073735503782418E-4	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.9998122686237135	WITHOUT_CLASSIFICATION	1.87731376286521E-4	DESIGN
// invokespecial	WITHOUT_CLASSIFICATION	0.9991103531722325	WITHOUT_CLASSIFICATION	8.896468277674399E-4	DESIGN
// return	WITHOUT_CLASSIFICATION	0.9998232189981376	WITHOUT_CLASSIFICATION	1.7678100186243597E-4	DESIGN
// aload_1 // load bean	WITHOUT_CLASSIFICATION	0.9996598251361656	WITHOUT_CLASSIFICATION	3.401748638344286E-4	DESIGN
// checkcast // cast bean	WITHOUT_CLASSIFICATION	0.9995117156442719	WITHOUT_CLASSIFICATION	4.882843557282008E-4	DESIGN
// astore_3 // store bean	WITHOUT_CLASSIFICATION	0.999838172320517	WITHOUT_CLASSIFICATION	1.6182767948302087E-4	DESIGN
// aload_2 // args	WITHOUT_CLASSIFICATION	0.9983554908241485	WITHOUT_CLASSIFICATION	0.0016445091758514464	DESIGN
// iconst_i // continue to aastore // growing stack is 1	WITHOUT_CLASSIFICATION	0.9998538389138864	WITHOUT_CLASSIFICATION	1.461610861136373E-4	DESIGN
// new	WITHOUT_CLASSIFICATION	0.9998315046485194	WITHOUT_CLASSIFICATION	1.6849535148062833E-4	DESIGN
// dup	WITHOUT_CLASSIFICATION	0.9998304086322538	WITHOUT_CLASSIFICATION	1.6959136774623724E-4	DESIGN
// aload_3 // load the raw bean	WITHOUT_CLASSIFICATION	0.9998523251215976	WITHOUT_CLASSIFICATION	1.4767487840246292E-4	DESIGN
// invokeinterface	WITHOUT_CLASSIFICATION	0.9991103531722325	WITHOUT_CLASSIFICATION	8.896468277674399E-4	DESIGN
// invokevirtual	WITHOUT_CLASSIFICATION	0.9991103531722325	WITHOUT_CLASSIFICATION	8.896468277674399E-4	DESIGN
// invokevirtual	WITHOUT_CLASSIFICATION	0.9991103531722325	WITHOUT_CLASSIFICATION	8.896468277674399E-4	DESIGN
// aastore // args	WITHOUT_CLASSIFICATION	0.9983554908241485	WITHOUT_CLASSIFICATION	0.0016445091758514464	DESIGN
/* | this | bean | args | i | raw bean | exception | */	WITHOUT_CLASSIFICATION	0.9982207069018135	WITHOUT_CLASSIFICATION	0.001779293098186444	DESIGN
// required to exception table // iconst_0 // i	WITHOUT_CLASSIFICATION	0.9993549706729422	WITHOUT_CLASSIFICATION	6.450293270577058E-4	DESIGN
// istore_3 // store i	WITHOUT_CLASSIFICATION	0.9998171841176967	WITHOUT_CLASSIFICATION	1.8281588230329473E-4	DESIGN
// aload_1 // load the bean	WITHOUT_CLASSIFICATION	0.9997745661148548	WITHOUT_CLASSIFICATION	2.2543388514515382E-4	DESIGN
// checkcast // cast the bean into a raw bean	WITHOUT_CLASSIFICATION	0.9987119126512705	WITHOUT_CLASSIFICATION	0.001288087348729464	DESIGN
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999973742956616	WITHOUT_CLASSIFICATION	2.6257043384068727E-6	DESIGN
// start region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9963261464731124	WITHOUT_CLASSIFICATION	0.0036738535268876307	DESIGN
// iinc 3, 1	WITHOUT_CLASSIFICATION	0.9993826870948351	WITHOUT_CLASSIFICATION	6.173129051649355E-4	DESIGN
// aload 4 // load the raw bean	WITHOUT_CLASSIFICATION	0.9997654183277144	WITHOUT_CLASSIFICATION	2.3458167228557672E-4	DESIGN
// aload_2 // load the args	WITHOUT_CLASSIFICATION	0.99959735605642	WITHOUT_CLASSIFICATION	4.0264394358009313E-4	DESIGN
// iconst_i	WITHOUT_CLASSIFICATION	0.9991103531722325	WITHOUT_CLASSIFICATION	8.896468277674399E-4	DESIGN
// aaload	WITHOUT_CLASSIFICATION	0.9998122686237135	WITHOUT_CLASSIFICATION	1.87731376286521E-4	DESIGN
// checkcast	WITHOUT_CLASSIFICATION	0.9991129685661667	WITHOUT_CLASSIFICATION	8.870314338333445E-4	DESIGN
// checkcast (case of primitive type) // invokevirtual (case of primitive type)	WITHOUT_CLASSIFICATION	0.9998810599868394	WITHOUT_CLASSIFICATION	1.1894001316065636E-4	DESIGN
// checkcast (case of reference type)	WITHOUT_CLASSIFICATION	0.9998420480241481	WITHOUT_CLASSIFICATION	1.579519758517735E-4	DESIGN
/* current stack len = 2 */	WITHOUT_CLASSIFICATION	0.9999936859309831	WITHOUT_CLASSIFICATION	6.314069016823743E-6	DESIGN
// end region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9930467204172791	WITHOUT_CLASSIFICATION	0.006953279582720891	DESIGN
// register in exception table	WITHOUT_CLASSIFICATION	0.999084104534362	WITHOUT_CLASSIFICATION	9.158954656380844E-4	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.9998122686237135	WITHOUT_CLASSIFICATION	1.87731376286521E-4	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.9998122686237135	WITHOUT_CLASSIFICATION	1.87731376286521E-4	DESIGN
// return	WITHOUT_CLASSIFICATION	0.9998232189981376	WITHOUT_CLASSIFICATION	1.7678100186243597E-4	DESIGN
// return	WITHOUT_CLASSIFICATION	0.9998232189981376	WITHOUT_CLASSIFICATION	1.7678100186243597E-4	DESIGN
// dup	WITHOUT_CLASSIFICATION	0.9998304086322538	WITHOUT_CLASSIFICATION	1.6959136774623724E-4	DESIGN
// invokevirtual	WITHOUT_CLASSIFICATION	0.9991103531722325	WITHOUT_CLASSIFICATION	8.896468277674399E-4	DESIGN
// checkcast	WITHOUT_CLASSIFICATION	0.9991129685661667	WITHOUT_CLASSIFICATION	8.870314338333445E-4	DESIGN
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.9999569300951336	WITHOUT_CLASSIFICATION	4.306990486635437E-5	DESIGN
// astore 5 // store exception	WITHOUT_CLASSIFICATION	0.9998905075246312	WITHOUT_CLASSIFICATION	1.0949247536883487E-4	DESIGN
// new // BulkAccessorException	WITHOUT_CLASSIFICATION	0.9994692290070253	WITHOUT_CLASSIFICATION	5.307709929746617E-4	DESIGN
// aload 5 // load exception	WITHOUT_CLASSIFICATION	0.9997698246876869	WITHOUT_CLASSIFICATION	2.3017531231306134E-4	DESIGN
// iload_3 // i	WITHOUT_CLASSIFICATION	0.9989593847323494	WITHOUT_CLASSIFICATION	0.001040615267650683	DESIGN
// invokespecial // BulkAccessorException.<init>	WITHOUT_CLASSIFICATION	0.9994086587758717	WITHOUT_CLASSIFICATION	5.913412241282598E-4	DESIGN
// athrow	WITHOUT_CLASSIFICATION	0.9998122686237135	WITHOUT_CLASSIFICATION	1.87731376286521E-4	DESIGN
// WARNING: classfile only	WITHOUT_CLASSIFICATION	0.9998408813849958	WITHOUT_CLASSIFICATION	1.5911861500422612E-4	DESIGN
//swallow	WITHOUT_CLASSIFICATION	0.9993169148631355	WITHOUT_CLASSIFICATION	6.830851368645701E-4	DESIGN
/* local variable | this | */	WITHOUT_CLASSIFICATION	0.9988487463897641	WITHOUT_CLASSIFICATION	0.0011512536102360022	DESIGN
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.998453922534754	WITHOUT_CLASSIFICATION	0.001546077465245999	DESIGN
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.998453922534754	WITHOUT_CLASSIFICATION	0.001546077465245999	DESIGN
// getfield // get field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9992895247772632	WITHOUT_CLASSIFICATION	7.104752227368983E-4	DESIGN
// areturn // return the value of the field	WITHOUT_CLASSIFICATION	0.9998688615031743	WITHOUT_CLASSIFICATION	1.3113849682556703E-4	DESIGN
/* local variables | this | callback | */	WITHOUT_CLASSIFICATION	0.9955381833473457	WITHOUT_CLASSIFICATION	0.0044618166526542965	DESIGN
// aload_1 // load callback	WITHOUT_CLASSIFICATION	0.999591946008048	WITHOUT_CLASSIFICATION	4.080539919520037E-4	DESIGN
// putfield // put field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9997121650161358	WITHOUT_CLASSIFICATION	2.878349838641873E-4	DESIGN
// case of non-static field	WITHOUT_CLASSIFICATION	0.9999409099596184	WITHOUT_CLASSIFICATION	5.9090040381699895E-5	DESIGN
// getfield // get each field	WITHOUT_CLASSIFICATION	0.9996005673566022	WITHOUT_CLASSIFICATION	3.9943264339778055E-4	DESIGN
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9996145692444731	WITHOUT_CLASSIFICATION	3.85430755526805E-4	DESIGN
// ifnonnull	WITHOUT_CLASSIFICATION	0.9991103531722325	WITHOUT_CLASSIFICATION	8.896468277674399E-4	DESIGN
// *return // each type	WITHOUT_CLASSIFICATION	0.999139852099146	WITHOUT_CLASSIFICATION	8.601479008539909E-4	DESIGN
// *return // each type	WITHOUT_CLASSIFICATION	0.999139852099146	WITHOUT_CLASSIFICATION	8.601479008539909E-4	DESIGN
// *store_1 // each type	WITHOUT_CLASSIFICATION	0.999139852099146	WITHOUT_CLASSIFICATION	8.601479008539909E-4	DESIGN
// ldc // name of the field	WITHOUT_CLASSIFICATION	0.9996917058114345	WITHOUT_CLASSIFICATION	3.082941885655456E-4	DESIGN
// *load_1 // each type	WITHOUT_CLASSIFICATION	0.999139852099146	WITHOUT_CLASSIFICATION	8.601479008539909E-4	DESIGN
// invokeinterface // invoke Callback.read*() // each type	WITHOUT_CLASSIFICATION	0.9993174792575901	WITHOUT_CLASSIFICATION	6.825207424098871E-4	DESIGN
// int	WITHOUT_CLASSIFICATION	0.9999481626624201	WITHOUT_CLASSIFICATION	5.1837337579935785E-5	DESIGN
// return	WITHOUT_CLASSIFICATION	0.9998232189981376	WITHOUT_CLASSIFICATION	1.7678100186243597E-4	DESIGN
// dup	WITHOUT_CLASSIFICATION	0.9998304086322538	WITHOUT_CLASSIFICATION	1.6959136774623724E-4	DESIGN
// invokeinterface	WITHOUT_CLASSIFICATION	0.9991103531722325	WITHOUT_CLASSIFICATION	8.896468277674399E-4	DESIGN
// checkcast	WITHOUT_CLASSIFICATION	0.9991129685661667	WITHOUT_CLASSIFICATION	8.870314338333445E-4	DESIGN
// checkcast	WITHOUT_CLASSIFICATION	0.9991129685661667	WITHOUT_CLASSIFICATION	8.870314338333445E-4	DESIGN
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9994086587758717	WITHOUT_CLASSIFICATION	5.913412241282598E-4	DESIGN
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9994086587758717	WITHOUT_CLASSIFICATION	5.913412241282598E-4	DESIGN
// ifnonnull (label1)	WITHOUT_CLASSIFICATION	0.9995142226641992	WITHOUT_CLASSIFICATION	4.8577733580084E-4	DESIGN
// *load_1	WITHOUT_CLASSIFICATION	0.9998122686237135	WITHOUT_CLASSIFICATION	1.87731376286521E-4	DESIGN
// *load_1	WITHOUT_CLASSIFICATION	0.9998122686237135	WITHOUT_CLASSIFICATION	1.87731376286521E-4	DESIGN
// putfield	WITHOUT_CLASSIFICATION	0.9991103531722325	WITHOUT_CLASSIFICATION	8.896468277674399E-4	DESIGN
// return ;	WITHOUT_CLASSIFICATION	0.9992001865985738	WITHOUT_CLASSIFICATION	7.998134014260849E-4	DESIGN
// ldc // field name	WITHOUT_CLASSIFICATION	0.998599545980395	WITHOUT_CLASSIFICATION	0.001400454019605056	DESIGN
// getfield // old value of the field	WITHOUT_CLASSIFICATION	0.9999168316896553	WITHOUT_CLASSIFICATION	8.316831034469175E-5	DESIGN
// invokeinterface // callback.write*(..)	WITHOUT_CLASSIFICATION	0.9994086587758717	WITHOUT_CLASSIFICATION	5.913412241282598E-4	DESIGN
// reference type	WITHOUT_CLASSIFICATION	0.9988814879087605	WITHOUT_CLASSIFICATION	0.0011185120912394952	DESIGN
// reference type	WITHOUT_CLASSIFICATION	0.9988814879087605	WITHOUT_CLASSIFICATION	0.0011185120912394952	DESIGN
// not array	WITHOUT_CLASSIFICATION	0.997378361533401	WITHOUT_CLASSIFICATION	0.0026216384665991334	DESIGN
// array of reference type	WITHOUT_CLASSIFICATION	0.9997587619189702	WITHOUT_CLASSIFICATION	2.412380810298999E-4	DESIGN
// boolean	WITHOUT_CLASSIFICATION	0.9998733022574708	WITHOUT_CLASSIFICATION	1.2669774252908303E-4	DESIGN
// byte	WITHOUT_CLASSIFICATION	0.9998415076659173	WITHOUT_CLASSIFICATION	1.5849233408282766E-4	DESIGN
// char	WITHOUT_CLASSIFICATION	0.99992171362171	WITHOUT_CLASSIFICATION	7.828637829002894E-5	DESIGN
// short	WITHOUT_CLASSIFICATION	0.9995522742902125	WITHOUT_CLASSIFICATION	4.4772570978745266E-4	DESIGN
// double	WITHOUT_CLASSIFICATION	0.9999801446479932	WITHOUT_CLASSIFICATION	1.9855352006782964E-5	DESIGN
// float	WITHOUT_CLASSIFICATION	0.9998147440424447	WITHOUT_CLASSIFICATION	1.852559575553771E-4	DESIGN
// float	WITHOUT_CLASSIFICATION	0.9998147440424447	WITHOUT_CLASSIFICATION	1.852559575553771E-4	DESIGN
// long	WITHOUT_CLASSIFICATION	0.9997097329964194	WITHOUT_CLASSIFICATION	2.902670035806132E-4	DESIGN
// long	WITHOUT_CLASSIFICATION	0.9997097329964194	WITHOUT_CLASSIFICATION	2.902670035806132E-4	DESIGN
// bad type	WITHOUT_CLASSIFICATION	0.9946893786263996	WITHOUT_CLASSIFICATION	0.005310621373600452	DESIGN
// bad type	WITHOUT_CLASSIFICATION	0.9946893786263996	WITHOUT_CLASSIFICATION	0.005310621373600452	DESIGN
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9981832992926793	WITHOUT_CLASSIFICATION	0.0018167007073206394	DESIGN
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9981832992926793	WITHOUT_CLASSIFICATION	0.0018167007073206394	DESIGN
// reference type	WITHOUT_CLASSIFICATION	0.9988814879087605	WITHOUT_CLASSIFICATION	0.0011185120912394952	DESIGN
// double	WITHOUT_CLASSIFICATION	0.9999801446479932	WITHOUT_CLASSIFICATION	1.9855352006782964E-5	DESIGN
// float	WITHOUT_CLASSIFICATION	0.9998147440424447	WITHOUT_CLASSIFICATION	1.852559575553771E-4	DESIGN
// float	WITHOUT_CLASSIFICATION	0.9998147440424447	WITHOUT_CLASSIFICATION	1.852559575553771E-4	DESIGN
// long	WITHOUT_CLASSIFICATION	0.9997097329964194	WITHOUT_CLASSIFICATION	2.902670035806132E-4	DESIGN
// bad type	WITHOUT_CLASSIFICATION	0.9946893786263996	WITHOUT_CLASSIFICATION	0.005310621373600452	DESIGN
// bad type	WITHOUT_CLASSIFICATION	0.9946893786263996	WITHOUT_CLASSIFICATION	0.005310621373600452	DESIGN
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9981832992926793	WITHOUT_CLASSIFICATION	0.0018167007073206394	DESIGN
// skip finalize methods	WITHOUT_CLASSIFICATION	0.9991425173780186	WITHOUT_CLASSIFICATION	8.574826219813576E-4	DESIGN
//Mainly for OSCache	WITHOUT_CLASSIFICATION	0.9966678271674319	WITHOUT_CLASSIFICATION	0.0033321728325680466	DESIGN
//decrement the lock	WITHOUT_CLASSIFICATION	0.9976505899624785	WITHOUT_CLASSIFICATION	0.0023494100375214483	DESIGN
// create new lock that times out immediately	WITHOUT_CLASSIFICATION	0.9997068516649202	WITHOUT_CLASSIFICATION	2.9314833507976924E-4	DESIGN
//recache the updated state	WITHOUT_CLASSIFICATION	0.9991190999888139	WITHOUT_CLASSIFICATION	8.809000111860289E-4	DESIGN
// noop	WITHOUT_CLASSIFICATION	0.9998293762274677	WITHOUT_CLASSIFICATION	1.7062377253229872E-4	DESIGN
//null clientLock is remotely possible but will never happen in practice	WITHOUT_CLASSIFICATION	0.9998881684035735	WITHOUT_CLASSIFICATION	1.1183159642648668E-4	DESIGN
// we really could refresh the item if it // is not a lock, but it might be slower //return freshTimestamp < txTimestamp	WITHOUT_CLASSIFICATION	0.9963834860935655	WITHOUT_CLASSIFICATION	0.003616513906434403	DESIGN
//by requiring <, we rely on lock timeout in the case of an unsuccessful update!	WITHOUT_CLASSIFICATION	0.9995814734706747	WITHOUT_CLASSIFICATION	4.1852652932535873E-4	DESIGN
// the user provided resulttransformer, not the one used with "select new". Here to avoid mangling // transformed/non-transformed results.	WITHOUT_CLASSIFICATION	0.9945677607019924	WITHOUT_CLASSIFICATION	0.005432239298007651	DESIGN
// disassemble positional parameters	WITHOUT_CLASSIFICATION	0.9999022873379915	WITHOUT_CLASSIFICATION	9.771266200851423E-5	DESIGN
// disassemble named parameters	WITHOUT_CLASSIFICATION	0.9999377256411056	WITHOUT_CLASSIFICATION	6.227435889449331E-5	DESIGN
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9970426553771139	WITHOUT_CLASSIFICATION	0.002957344622886104	DESIGN
// noop	WITHOUT_CLASSIFICATION	0.9998293762274677	WITHOUT_CLASSIFICATION	1.7062377253229872E-4	DESIGN
//noop	WITHOUT_CLASSIFICATION	0.9993169148631355	WITHOUT_CLASSIFICATION	6.830851368645701E-4	DESIGN
//noop	WITHOUT_CLASSIFICATION	0.9993169148631355	WITHOUT_CLASSIFICATION	6.830851368645701E-4	DESIGN
// this is called from SettingsFactory irregardless; trivial to simply disregard	WITHOUT_CLASSIFICATION	0.9935128339607788	WITHOUT_CLASSIFICATION	0.006487166039221215	DESIGN
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9976323961342868	WITHOUT_CLASSIFICATION	0.0023676038657133055	DESIGN
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9976323961342868	WITHOUT_CLASSIFICATION	0.0023676038657133055	DESIGN
//throw new UnsupportedOperationException("Can't write to a readonly object");	WITHOUT_CLASSIFICATION	0.9944544469509677	WITHOUT_CLASSIFICATION	0.005545553049032239	DESIGN
//assembled state gets put in a new array (we read from cache by value!)	WITHOUT_CLASSIFICATION	0.9970967731244138	WITHOUT_CLASSIFICATION	0.002903226875586246	DESIGN
//persister.setIdentifier(result, id); //before calling interceptor, for consistency with normal load	WITHOUT_CLASSIFICATION	0.9951770951882115	WITHOUT_CLASSIFICATION	0.004822904811788544	DESIGN
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9988290964685079	WITHOUT_CLASSIFICATION	0.0011709035314921238	DESIGN
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9988290964685079	WITHOUT_CLASSIFICATION	0.0011709035314921238	DESIGN
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9953952206519836	WITHOUT_CLASSIFICATION	0.0046047793480163066	DESIGN
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9994073068753868	WITHOUT_CLASSIFICATION	5.926931246131858E-4	DESIGN
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9994073068753868	WITHOUT_CLASSIFICATION	5.926931246131858E-4	DESIGN
// classes mentioned in extends not available - so put it in queue	WITHOUT_CLASSIFICATION	0.9971026853990734	WITHOUT_CLASSIFICATION	0.0028973146009267023	DESIGN
// get meta's from <hibernate-mapping>	WITHOUT_CLASSIFICATION	0.9989772177627028	WITHOUT_CLASSIFICATION	0.0010227822372972436	DESIGN
// get meta's from <class>	WITHOUT_CLASSIFICATION	0.9991597360336352	WITHOUT_CLASSIFICATION	8.402639663647748E-4	DESIGN
// DB-OBJECTNAME	WITHOUT_CLASSIFICATION	0.9991103531722325	WITHOUT_CLASSIFICATION	8.896468277674399E-4	DESIGN
// MUTABLE	WITHOUT_CLASSIFICATION	0.9998122686237135	WITHOUT_CLASSIFICATION	1.87731376286521E-4	DESIGN
// WHERE	WITHOUT_CLASSIFICATION	0.9999619344142413	WITHOUT_CLASSIFICATION	3.806558575873279E-5	DESIGN
// CHECK	WITHOUT_CLASSIFICATION	0.9998181745561301	WITHOUT_CLASSIFICATION	1.8182544386979196E-4	DESIGN
// POLYMORPHISM	WITHOUT_CLASSIFICATION	0.9991103531722325	WITHOUT_CLASSIFICATION	8.896468277674399E-4	DESIGN
// TODO:	WITHOUT_CLASSIFICATION	0.6941431119148096	WITHOUT_CLASSIFICATION	0.3058568880851904	DESIGN
// ID	WITHOUT_CLASSIFICATION	0.9997599974661989	WITHOUT_CLASSIFICATION	2.4000253380101965E-4	DESIGN
// VERSION / TIMESTAMP	WITHOUT_CLASSIFICATION	0.9997195750990133	WITHOUT_CLASSIFICATION	2.8042490098670157E-4	DESIGN
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9991103531722325	WITHOUT_CLASSIFICATION	8.896468277674399E-4	DESIGN
// Primary key constraint	WITHOUT_CLASSIFICATION	0.9999053886405206	WITHOUT_CLASSIFICATION	9.461135947937631E-5	DESIGN
// this is either a <version/> tag with no type attribute, // or a <timestamp/> tag	WITHOUT_CLASSIFICATION	0.9984082338731447	WITHOUT_CLASSIFICATION	0.001591766126855257	DESIGN
// for version properties marked as being generated, make sure they are "always" // generated; aka, "insert" is invalid; this is dis-allowed by the DTD, // but just to make sure...	WITHOUT_CLASSIFICATION	0.9982696117117387	WITHOUT_CLASSIFICATION	0.0017303882882614013	DESIGN
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9991103531722325	WITHOUT_CLASSIFICATION	8.896468277674399E-4	DESIGN
// ( (Column) discrim.getColumnIterator().next() ).setType(type);	WITHOUT_CLASSIFICATION	0.999375182534861	WITHOUT_CLASSIFICATION	6.248174651390031E-4	DESIGN
// go ahead and set the lazy here, since pojo.proxy can override it.	WITHOUT_CLASSIFICATION	0.9999881331013988	WITHOUT_CLASSIFICATION	1.1866898601130234E-5	DESIGN
// DYNAMIC UPDATE	WITHOUT_CLASSIFICATION	0.9991416124926045	WITHOUT_CLASSIFICATION	8.583875073955885E-4	DESIGN
// IMPORT	WITHOUT_CLASSIFICATION	0.999815550647118	WITHOUT_CLASSIFICATION	1.8444935288199795E-4	DESIGN
// BATCH SIZE	WITHOUT_CLASSIFICATION	0.9991161960727953	WITHOUT_CLASSIFICATION	8.838039272045981E-4	DESIGN
// SELECT BEFORE UPDATE	WITHOUT_CLASSIFICATION	0.9995514561844557	WITHOUT_CLASSIFICATION	4.485438155441929E-4	DESIGN
// OPTIMISTIC LOCK MODE	WITHOUT_CLASSIFICATION	0.9995142226641992	WITHOUT_CLASSIFICATION	4.8577733580084E-4	DESIGN
// PERSISTER	WITHOUT_CLASSIFICATION	0.9991103531722325	WITHOUT_CLASSIFICATION	8.896468277674399E-4	DESIGN
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9993729066762115	WITHOUT_CLASSIFICATION	6.270933237885044E-4	DESIGN
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9991597360336352	WITHOUT_CLASSIFICATION	8.402639663647748E-4	DESIGN
// properties	WITHOUT_CLASSIFICATION	0.999324443736738	WITHOUT_CLASSIFICATION	6.755562632619587E-4	DESIGN
// joined subclasses	WITHOUT_CLASSIFICATION	0.9995014810079962	WITHOUT_CLASSIFICATION	4.985189920037799E-4	DESIGN
// KEY	WITHOUT_CLASSIFICATION	0.9998219660811352	WITHOUT_CLASSIFICATION	1.780339188647458E-4	DESIGN
// CHECK	WITHOUT_CLASSIFICATION	0.9998181745561301	WITHOUT_CLASSIFICATION	1.8182544386979196E-4	DESIGN
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9993729066762115	WITHOUT_CLASSIFICATION	6.270933237885044E-4	DESIGN
// properties	WITHOUT_CLASSIFICATION	0.999324443736738	WITHOUT_CLASSIFICATION	6.755562632619587E-4	DESIGN
// KEY	WITHOUT_CLASSIFICATION	0.9998219660811352	WITHOUT_CLASSIFICATION	1.780339188647458E-4	DESIGN
// model.getKey().setType( new Type( model.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9991291641229745	WITHOUT_CLASSIFICATION	8.708358770254574E-4	DESIGN
// TABLENAME	WITHOUT_CLASSIFICATION	0.9991103531722325	WITHOUT_CLASSIFICATION	8.896468277674399E-4	DESIGN
// join.getKey().setType( new Type( lazz.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9991291641229745	WITHOUT_CLASSIFICATION	8.708358770254574E-4	DESIGN
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9991227879551358	WITHOUT_CLASSIFICATION	8.772120448641185E-4	DESIGN
// COLUMN(S)	WITHOUT_CLASSIFICATION	0.9991103531722325	WITHOUT_CLASSIFICATION	8.896468277674399E-4	DESIGN
// column index	WITHOUT_CLASSIFICATION	0.9998357175085999	WITHOUT_CLASSIFICATION	1.6428249140010612E-4	DESIGN
//column unique-key	WITHOUT_CLASSIFICATION	0.9967728435117175	WITHOUT_CLASSIFICATION	0.0032271564882824944	DESIGN
// automatically makes a column with the default name if none is specifed by XML	WITHOUT_CLASSIFICATION	0.9992254684580963	WITHOUT_CLASSIFICATION	7.745315419036945E-4	DESIGN
// for an any	WITHOUT_CLASSIFICATION	0.9994292440605782	WITHOUT_CLASSIFICATION	5.70755939421794E-4	DESIGN
// insertable simply because that is the user did not specify // anything; just override it	WITHOUT_CLASSIFICATION	0.9999814786830047	WITHOUT_CLASSIFICATION	1.852131699521879E-5	DESIGN
// the user specifically supplied insert="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999546806793302	WITHOUT_CLASSIFICATION	4.531932066975339E-5	DESIGN
// properties generated on update can never be updateable...	WITHOUT_CLASSIFICATION	0.9996346211157447	WITHOUT_CLASSIFICATION	3.6537888425528756E-4	DESIGN
// updateable only because the user did not specify  // anything; just override it	WITHOUT_CLASSIFICATION	0.9999957502471648	WITHOUT_CLASSIFICATION	4.249752835229887E-6	DESIGN
// the user specifically supplied update="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999546806793302	WITHOUT_CLASSIFICATION	4.531932066975339E-5	DESIGN
// ROLENAME	WITHOUT_CLASSIFICATION	0.9991103531722325	WITHOUT_CLASSIFICATION	8.896468277674399E-4	DESIGN
// FETCH STRATEGY	WITHOUT_CLASSIFICATION	0.9991103531722325	WITHOUT_CLASSIFICATION	8.896468277674399E-4	DESIGN
// TABLE	WITHOUT_CLASSIFICATION	0.9998605571354784	WITHOUT_CLASSIFICATION	1.3944286452159083E-4	DESIGN
//tableName = mappings.getNamingStrategy().propertyToTableName( className, path );	WITHOUT_CLASSIFICATION	0.9992633898335859	WITHOUT_CLASSIFICATION	7.366101664139961E-4	DESIGN
// SORT	WITHOUT_CLASSIFICATION	0.9998122686237135	WITHOUT_CLASSIFICATION	1.87731376286521E-4	DESIGN
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9993729066762115	WITHOUT_CLASSIFICATION	6.270933237885044E-4	DESIGN
// unsorted, natural, comparator.class.name	WITHOUT_CLASSIFICATION	0.9994086587758717	WITHOUT_CLASSIFICATION	5.913412241282598E-4	DESIGN
// ORPHAN DELETE (used for programmer error detection)	WITHOUT_CLASSIFICATION	0.9994880614698746	WITHOUT_CLASSIFICATION	5.119385301254622E-4	DESIGN
// set up second pass	WITHOUT_CLASSIFICATION	0.9996582131896969	WITHOUT_CLASSIFICATION	3.4178681030308804E-4	DESIGN
// an "embedded" component (composite ids and unique) // note that this does not handle nested components	WITHOUT_CLASSIFICATION	0.9500282712287789	WITHOUT_CLASSIFICATION	0.04997172877122106	DESIGN
// a nested composite element	WITHOUT_CLASSIFICATION	0.9922015620698311	WITHOUT_CLASSIFICATION	0.007798437930168908	DESIGN
// for an any // we will have to use reflection	WITHOUT_CLASSIFICATION	0.9986751340292902	WITHOUT_CLASSIFICATION	0.0013248659707098091	DESIGN
//NOTE SPECIAL CASE: // one-to-one constrained=false cannot be proxied, // so default to join and non-lazy	WITHOUT_CLASSIFICATION	0.9999465257237322	WITHOUT_CLASSIFICATION	5.347427626780958E-5	DESIGN
// use old (HB 2.1) defaults if outer-join is specified	WITHOUT_CLASSIFICATION	0.9999033002734766	WITHOUT_CLASSIFICATION	9.66997265234452E-5	DESIGN
//lazy = !join;	WITHOUT_CLASSIFICATION	0.9985412812836268	WITHOUT_CLASSIFICATION	0.001458718716373119	DESIGN
// GENERATOR	WITHOUT_CLASSIFICATION	0.9991304853055218	WITHOUT_CLASSIFICATION	8.695146944780499E-4	DESIGN
// ID UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9988628658252859	WITHOUT_CLASSIFICATION	0.0011371341747141088	DESIGN
// VERSION UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9995142226641992	WITHOUT_CLASSIFICATION	4.8577733580084E-4	DESIGN
// not necessarily a *unique* property reference	WITHOUT_CLASSIFICATION	0.9971460903152449	WITHOUT_CLASSIFICATION	0.0028539096847550872	DESIGN
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.999375182534861	WITHOUT_CLASSIFICATION	6.248174651390031E-4	DESIGN
// contained elements:	WITHOUT_CLASSIFICATION	0.9994242463063929	WITHOUT_CLASSIFICATION	5.757536936071928E-4	DESIGN
// for non-inverse one-to-many, with a not-null fk, add a backref!	WITHOUT_CLASSIFICATION	0.9980082109526657	WITHOUT_CLASSIFICATION	0.001991789047334312	DESIGN
// Bind the where	WITHOUT_CLASSIFICATION	0.9995817329380839	WITHOUT_CLASSIFICATION	4.1826706191603843E-4	DESIGN
// Bind the order-by	WITHOUT_CLASSIFICATION	0.9994326709130348	WITHOUT_CLASSIFICATION	5.673290869652645E-4	DESIGN
// Bind the filters	WITHOUT_CLASSIFICATION	0.9994569314725399	WITHOUT_CLASSIFICATION	5.4306852746006E-4	DESIGN
// overriding inherited meta attribute. HBX-621 & HBX-793	WITHOUT_CLASSIFICATION	0.9978245526210584	WITHOUT_CLASSIFICATION	0.0021754473789414993	DESIGN
// first, iterate over all elements capable of defining an extends attribute // collecting all found extends references if they cannot be resolved // against the already processed mappings.	WITHOUT_CLASSIFICATION	0.9999973064175667	WITHOUT_CLASSIFICATION	2.6935824333920725E-6	DESIGN
// mappings might contain either the "raw" extends name (in the case of // an entity-name mapping) or a FQN (in the case of a POJO mapping).	WITHOUT_CLASSIFICATION	0.9995918131675494	WITHOUT_CLASSIFICATION	4.081868324505976E-4	DESIGN
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.7788762767609767	DESIGN	0.2211237232390233	WITHOUT_CLASSIFICATION
//SessionFactory name:	WITHOUT_CLASSIFICATION	0.9991414232082344	WITHOUT_CLASSIFICATION	8.585767917655796E-4	DESIGN
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9983712742372709	WITHOUT_CLASSIFICATION	0.0016287257627290736	DESIGN
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9983712742372709	WITHOUT_CLASSIFICATION	0.0016287257627290736	DESIGN
//Interrogate JDBC metadata	WITHOUT_CLASSIFICATION	0.9994799398162731	WITHOUT_CLASSIFICATION	5.200601837268199E-4	DESIGN
// user supplied JDBC connections	WITHOUT_CLASSIFICATION	0.9999261383464105	WITHOUT_CLASSIFICATION	7.386165358953555E-5	DESIGN
//use dialect default properties	WITHOUT_CLASSIFICATION	0.9966696289702971	WITHOUT_CLASSIFICATION	0.0033303710297028573	DESIGN
// Transaction settings:	WITHOUT_CLASSIFICATION	0.9995830710478217	WITHOUT_CLASSIFICATION	4.1692895217823334E-4	DESIGN
//SQL Generation settings:	WITHOUT_CLASSIFICATION	0.9982456042947376	WITHOUT_CLASSIFICATION	0.0017543957052624031	DESIGN
//Query parser settings:	WITHOUT_CLASSIFICATION	0.9958312554348725	WITHOUT_CLASSIFICATION	0.004168744565127523	DESIGN
// Second-level / query cache:	WITHOUT_CLASSIFICATION	0.999730373639479	WITHOUT_CLASSIFICATION	2.696263605209244E-4	DESIGN
// The cache provider is needed when we either have second-level cache enabled // or query cache enabled.  Note that useSecondLevelCache is enabled by default	WITHOUT_CLASSIFICATION	0.9999922866106415	WITHOUT_CLASSIFICATION	7.713389358440975E-6	DESIGN
//SQL Exception converter:	WITHOUT_CLASSIFICATION	0.9972372449465721	WITHOUT_CLASSIFICATION	0.002762755053427945	DESIGN
//Statistics and logging:	WITHOUT_CLASSIFICATION	0.9983515972617301	WITHOUT_CLASSIFICATION	0.0016484027382698842	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998122686237135	WITHOUT_CLASSIFICATION	1.87731376286521E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998122686237135	WITHOUT_CLASSIFICATION	1.87731376286521E-4	DESIGN
//Schema export:	WITHOUT_CLASSIFICATION	0.9967688892480616	WITHOUT_CLASSIFICATION	0.003231110751938361	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998122686237135	WITHOUT_CLASSIFICATION	1.87731376286521E-4	DESIGN
// legacy behavior, apply the bridge...	WITHOUT_CLASSIFICATION	0.9961133274725827	WITHOUT_CLASSIFICATION	0.0038866725274172135	DESIGN
// maybe a concrete SQLpropertyresult type, but Map is exactly what is required at the moment	WITHOUT_CLASSIFICATION	0.9930586746321198	WITHOUT_CLASSIFICATION	0.0069413253678802765	DESIGN
//if dotted and not load-collection nor return-join //regular property	WITHOUT_CLASSIFICATION	0.995776342071157	WITHOUT_CLASSIFICATION	0.004223657928843124	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998122686237135	WITHOUT_CLASSIFICATION	1.87731376286521E-4	DESIGN
// public getters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999803257120942	WITHOUT_CLASSIFICATION	1.967428790578687E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998122686237135	WITHOUT_CLASSIFICATION	1.87731376286521E-4	DESIGN
// package protected setters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9484430961000515	WITHOUT_CLASSIFICATION	0.05155690389994848	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998122686237135	WITHOUT_CLASSIFICATION	1.87731376286521E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998122686237135	WITHOUT_CLASSIFICATION	1.87731376286521E-4	DESIGN
// using local since the inheritedMetas at this point is not the correct map since it is always the empty map	WITHOUT_CLASSIFICATION	0.9716706577612619	WITHOUT_CLASSIFICATION	0.028329342238738123	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998122686237135	WITHOUT_CLASSIFICATION	1.87731376286521E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998122686237135	WITHOUT_CLASSIFICATION	1.87731376286521E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998122686237135	WITHOUT_CLASSIFICATION	1.87731376286521E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998122686237135	WITHOUT_CLASSIFICATION	1.87731376286521E-4	DESIGN
// if doc is null, then for whatever reason, the cached file cannot be used...	WITHOUT_CLASSIFICATION	0.9999604521429601	WITHOUT_CLASSIFICATION	3.95478570398346E-5	DESIGN
// drop them in reverse order in case db needs it done that way...	WITHOUT_CLASSIFICATION	0.9886406603878282	WITHOUT_CLASSIFICATION	0.011359339612171952	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998122686237135	WITHOUT_CLASSIFICATION	1.87731376286521E-4	DESIGN
// This method may be called many times!!	WITHOUT_CLASSIFICATION	0.9974671621425055	WITHOUT_CLASSIFICATION	0.0025328378574944865	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998122686237135	WITHOUT_CLASSIFICATION	1.87731376286521E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998122686237135	WITHOUT_CLASSIFICATION	1.87731376286521E-4	DESIGN
// found	WITHOUT_CLASSIFICATION	0.9998894988077236	WITHOUT_CLASSIFICATION	1.1050119227635379E-4	DESIGN
// found	WITHOUT_CLASSIFICATION	0.9998894988077236	WITHOUT_CLASSIFICATION	1.1050119227635379E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998122686237135	WITHOUT_CLASSIFICATION	1.87731376286521E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998122686237135	WITHOUT_CLASSIFICATION	1.87731376286521E-4	DESIGN
//<String, String>	WITHOUT_CLASSIFICATION	0.9970135158170007	WITHOUT_CLASSIFICATION	0.002986484182999188	DESIGN
//<String, String>	WITHOUT_CLASSIFICATION	0.9970135158170007	WITHOUT_CLASSIFICATION	0.002986484182999188	DESIGN
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.7788762767609767	DESIGN	0.2211237232390233	WITHOUT_CLASSIFICATION
//Set USE_REFLECTION_OPTIMIZER to false to fix HHH-227	WITHOUT_CLASSIFICATION	0.8214675894460682	WITHOUT_CLASSIFICATION	0.17853241055393185	DESIGN
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9980317326180018	WITHOUT_CLASSIFICATION	0.0019682673819982534	DESIGN
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9990472985635634	WITHOUT_CLASSIFICATION	9.527014364364828E-4	DESIGN
// intentionally empty	WITHOUT_CLASSIFICATION	0.9993201763465654	WITHOUT_CLASSIFICATION	6.798236534346502E-4	DESIGN
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9980317326180018	WITHOUT_CLASSIFICATION	0.0019682673819982534	DESIGN
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9990472985635634	WITHOUT_CLASSIFICATION	9.527014364364828E-4	DESIGN
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.992702151837951	WITHOUT_CLASSIFICATION	0.007297848162049097	DESIGN
//maintain correct duplication if loaded in a cartesian product	WITHOUT_CLASSIFICATION	0.9927487290684509	WITHOUT_CLASSIFICATION	0.007251270931549067	DESIGN
// the element has been removed from the set	WITHOUT_CLASSIFICATION	0.9963939102244254	WITHOUT_CLASSIFICATION	0.0036060897755746018	DESIGN
// the element has changed	WITHOUT_CLASSIFICATION	0.999858451024947	WITHOUT_CLASSIFICATION	1.4154897505306758E-4	DESIGN
//Careful: these methods do not initialize the collection.	WITHOUT_CLASSIFICATION	0.970568408250869	WITHOUT_CLASSIFICATION	0.02943159174913108	DESIGN
//needed so that we remove this collection from the second-level cache	WITHOUT_CLASSIFICATION	0.8132156910082736	WITHOUT_CLASSIFICATION	0.18678430899172632	DESIGN
// override on some subclasses	WITHOUT_CLASSIFICATION	0.9995732407485214	WITHOUT_CLASSIFICATION	4.267592514786509E-4	DESIGN
//override on some subclasses	WITHOUT_CLASSIFICATION	0.9973545280849	WITHOUT_CLASSIFICATION	0.0026454719150999593	DESIGN
//do this bit after setting initialized to true or it will recurse	WITHOUT_CLASSIFICATION	0.9964914988991121	WITHOUT_CLASSIFICATION	0.003508501100887783	DESIGN
// short-circuit(s) // no new elements, the old list contains only Orphans // no old elements, so no Orphans neither	WITHOUT_CLASSIFICATION	0.9999934212246304	WITHOUT_CLASSIFICATION	6.578775369643191E-6	DESIGN
// create the collection holding the Orphans	WITHOUT_CLASSIFICATION	0.9978028934318786	WITHOUT_CLASSIFICATION	0.0021971065681214187	DESIGN
// collect EntityIdentifier(s) of the *current* elements - add them into a HashSet for fast access	WITHOUT_CLASSIFICATION	0.9969773546389421	WITHOUT_CLASSIFICATION	0.0030226453610579926	DESIGN
// iterate over the *old* list	WITHOUT_CLASSIFICATION	0.9995954695438183	WITHOUT_CLASSIFICATION	4.045304561817905E-4	DESIGN
/*(array==null) ? tempList.size() :*/	WITHOUT_CLASSIFICATION	0.9953791480696355	WITHOUT_CLASSIFICATION	0.004620851930364483	DESIGN
// intentionally empty	WITHOUT_CLASSIFICATION	0.9993201763465654	WITHOUT_CLASSIFICATION	6.798236534346502E-4	DESIGN
/*(array==null) ? tempList.get(i) :*/	WITHOUT_CLASSIFICATION	0.9953791480696355	WITHOUT_CLASSIFICATION	0.004620851930364483	DESIGN
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9986913479197645	WITHOUT_CLASSIFICATION	0.001308652080235526	DESIGN
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9986913479197645	WITHOUT_CLASSIFICATION	0.001308652080235526	DESIGN
// amazingly, these two will work because AbstractCollection // uses iterator() to fill the array	WITHOUT_CLASSIFICATION	0.9999343890390225	WITHOUT_CLASSIFICATION	6.561096097743824E-5	DESIGN
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.992702151837951	WITHOUT_CLASSIFICATION	0.007297848162049097	DESIGN
// finally, what it's all about...	WITHOUT_CLASSIFICATION	0.9953577409934671	WITHOUT_CLASSIFICATION	0.004642259006532982	DESIGN
// note that if we load this collection from a cartesian product // the multiplicity would be broken ... so use an idbag instead	WITHOUT_CLASSIFICATION	0.6393307847710068	DESIGN	0.36066921522899337	WITHOUT_CLASSIFICATION
// Anyway, here we implement <set> semantics for a // <one-to-many> <bag>!	WITHOUT_CLASSIFICATION	0.6488611422546795	WITHOUT_CLASSIFICATION	0.35113885774532033	DESIGN
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9997075966704818	WITHOUT_CLASSIFICATION	2.924033295181501E-4	DESIGN
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.8549965284222764	WITHOUT_CLASSIFICATION	0.14500347157772367	DESIGN
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.992702151837951	WITHOUT_CLASSIFICATION	0.007297848162049097	DESIGN
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9997075966704818	WITHOUT_CLASSIFICATION	2.924033295181501E-4	DESIGN
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.8549965284222764	WITHOUT_CLASSIFICATION	0.14500347157772367	DESIGN
/*public boolean equals(Object other) {	WITHOUT_CLASSIFICATION	0.9981919433925166	WITHOUT_CLASSIFICATION	0.0018080566074832856	DESIGN
// List OPERATIONS:	WITHOUT_CLASSIFICATION	0.9995700431801254	WITHOUT_CLASSIFICATION	4.2995681987451523E-4	DESIGN
//pad with nulls from the current last element up to the new index	WITHOUT_CLASSIFICATION	0.9994191696244751	WITHOUT_CLASSIFICATION	5.80830375524966E-4	DESIGN
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.992702151837951	WITHOUT_CLASSIFICATION	0.007297848162049097	DESIGN
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.992702151837951	WITHOUT_CLASSIFICATION	0.007297848162049097	DESIGN
// from Map	WITHOUT_CLASSIFICATION	0.9991884993642214	WITHOUT_CLASSIFICATION	8.115006357786118E-4	DESIGN
// from SortedMap	WITHOUT_CLASSIFICATION	0.9987773227737892	WITHOUT_CLASSIFICATION	0.0012226772262109282	DESIGN
//inject the data	WITHOUT_CLASSIFICATION	0.9991115155064533	WITHOUT_CLASSIFICATION	8.884844935467182E-4	DESIGN
// cannot be instantiated	WITHOUT_CLASSIFICATION	0.9998616299364903	WITHOUT_CLASSIFICATION	1.3837006350968443E-4	DESIGN
//default pool size 20	WITHOUT_CLASSIFICATION	0.9996262703474698	WITHOUT_CLASSIFICATION	3.737296525302628E-4	DESIGN
// trying via forName() first to be as close to DriverManager's semantics	WITHOUT_CLASSIFICATION	0.9999863013465853	WITHOUT_CLASSIFICATION	1.3698653414675413E-5	DESIGN
// if debug level is enabled, then log the password, otherwise mask it	WITHOUT_CLASSIFICATION	0.9999487478116436	WITHOUT_CLASSIFICATION	5.125218835650047E-5	DESIGN
// register a cleanup synch	WITHOUT_CLASSIFICATION	0.9993485444638062	WITHOUT_CLASSIFICATION	6.514555361937349E-4	DESIGN
// wrap the session in the transaction-protection proxy	WITHOUT_CLASSIFICATION	0.9996579927195215	WITHOUT_CLASSIFICATION	3.4200728047848735E-4	DESIGN
// then bind it	WITHOUT_CLASSIFICATION	0.9991423512582615	WITHOUT_CLASSIFICATION	8.576487417385352E-4	DESIGN
// try to make sure we don't wrap and already wrapped session	WITHOUT_CLASSIFICATION	0.9740797266690768	WITHOUT_CLASSIFICATION	0.025920273330923164	DESIGN
// allow these to go through the the real session no matter what	WITHOUT_CLASSIFICATION	0.9683054758327349	WITHOUT_CLASSIFICATION	0.03169452416726512	DESIGN
// limit the methods available if no transaction is active	WITHOUT_CLASSIFICATION	0.99981970236979	WITHOUT_CLASSIFICATION	1.8029763021008163E-4	DESIGN
// allow these (deprecated) methods to pass through	WITHOUT_CLASSIFICATION	0.9959272634907165	WITHOUT_CLASSIFICATION	0.00407273650928353	DESIGN
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994181238325942	WITHOUT_CLASSIFICATION	5.818761674058214E-4	DESIGN
// We could register the session against the transaction even though it is // not started, but we'd have no guarentee of ever getting the map // entries cleaned up (aside from spawning threads).	WITHOUT_CLASSIFICATION	0.9999737695691111	WITHOUT_CLASSIFICATION	2.623043088889096E-5	DESIGN
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9981944665715593	WITHOUT_CLASSIFICATION	0.0018055334284406983	DESIGN
//private String propertyName;	WITHOUT_CLASSIFICATION	0.998209639561186	WITHOUT_CLASSIFICATION	0.0017903604388140079	DESIGN
/*public PropertyProjection project() {	WITHOUT_CLASSIFICATION	0.9973231234103405	WITHOUT_CLASSIFICATION	0.002676876589659541	DESIGN
//String[] fk = StringHelper.qualify( "collection_", cp.getKeyColumnNames() );	WITHOUT_CLASSIFICATION	0.9990472985635634	WITHOUT_CLASSIFICATION	9.527014364364828E-4	DESIGN
//" collection_ where " +	WITHOUT_CLASSIFICATION	0.9997521847536659	WITHOUT_CLASSIFICATION	2.4781524633409876E-4	DESIGN
//unsupported	WITHOUT_CLASSIFICATION	0.9967688892480616	WITHOUT_CLASSIFICATION	0.003231110751938361	DESIGN
//unsupported	WITHOUT_CLASSIFICATION	0.9967688892480616	WITHOUT_CLASSIFICATION	0.003231110751938361	DESIGN
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9981944665715593	WITHOUT_CLASSIFICATION	0.0018055334284406983	DESIGN
//the following two lines were added to ensure that this.params is not null, which //can happen with two-deep nested subqueries	WITHOUT_CLASSIFICATION	0.9997586983467743	WITHOUT_CLASSIFICATION	2.4130165322563927E-4	DESIGN
//with two-deep subqueries, the same alias would get generated for //both using the old method (criteriaQuery.generateSQLAlias()), so //that is now used as a fallback if the main criteria alias isn't set	WITHOUT_CLASSIFICATION	0.9769281260958018	WITHOUT_CLASSIFICATION	0.02307187390419815	DESIGN
//implicit polymorphism not supported (would need a union)	WITHOUT_CLASSIFICATION	0.9504194563011636	WITHOUT_CLASSIFICATION	0.049580543698836466	DESIGN
//pull off the last ", "	WITHOUT_CLASSIFICATION	0.9997853421011403	WITHOUT_CLASSIFICATION	2.146578988597388E-4	DESIGN
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9971026562896226	WITHOUT_CLASSIFICATION	0.002897343710377472	DESIGN
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces	WITHOUT_CLASSIFICATION	0.9997017919245007	WITHOUT_CLASSIFICATION	2.9820807549925794E-4	DESIGN
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource)	WITHOUT_CLASSIFICATION	0.9979799378703461	WITHOUT_CLASSIFICATION	0.0020200621296539555	DESIGN
// NOT_SUPPORTED_SHOULD_USE_JDBC3_PreparedStatement.getGeneratedKeys_method	WITHOUT_CLASSIFICATION	0.9994086587758717	WITHOUT_CLASSIFICATION	5.913412241282598E-4	DESIGN
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.9985595576580333	WITHOUT_CLASSIFICATION	0.0014404423419667393	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995136403250783	WITHOUT_CLASSIFICATION	4.863596749217555E-4	DESIGN
// Oracle did add support for ANSI CASE statements in 9i	WITHOUT_CLASSIFICATION	0.9996934829861275	WITHOUT_CLASSIFICATION	3.065170138725272E-4	DESIGN
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999717595275015	WITHOUT_CLASSIFICATION	2.8240472498558458E-5	DESIGN
// Informix doesn't have a bit type	WITHOUT_CLASSIFICATION	0.9714707660415365	WITHOUT_CLASSIFICATION	0.028529233958463573	DESIGN
// or BYTE // or TEXT? // or MONEY	WITHOUT_CLASSIFICATION	0.9996336423137208	WITHOUT_CLASSIFICATION	3.6635768627916397E-4	DESIGN
// strip table-owner because Informix always returns constraint names as "<table-owner>.<constraint-name>"	WITHOUT_CLASSIFICATION	0.9998491664714271	WITHOUT_CLASSIFICATION	1.508335285728622E-4	DESIGN
// build the map of standard ANSI SQL aggregation functions ~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998359345569942	WITHOUT_CLASSIFICATION	1.6406544300576282E-4	DESIGN
//pre H3.2 behavior: super.getReturnType(ct, m);	WITHOUT_CLASSIFICATION	0.9987200167767958	WITHOUT_CLASSIFICATION	0.0012799832232042619	DESIGN
// finally use the sqltype if == on Hibernate types did not find a match.	WITHOUT_CLASSIFICATION	0.9980637361274696	WITHOUT_CLASSIFICATION	0.001936263872530472	DESIGN
//because numeric can be anything	WITHOUT_CLASSIFICATION	0.9991809766898171	WITHOUT_CLASSIFICATION	8.190233101828489E-4	DESIGN
// constructors and factory methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9955516213086563	WITHOUT_CLASSIFICATION	0.004448378691343764	DESIGN
// standard sql92 functions (can be overridden by subclasses)	WITHOUT_CLASSIFICATION	0.995234281132871	WITHOUT_CLASSIFICATION	0.0047657188671289714	DESIGN
//map second/minute/hour/day/month/year to ANSI extract(), override on subclasses	WITHOUT_CLASSIFICATION	0.9987643191547259	WITHOUT_CLASSIFICATION	0.0012356808452741927	DESIGN
// register hibernate types for default use in scalar sqlquery type auto detection	WITHOUT_CLASSIFICATION	0.9952656723747132	WITHOUT_CLASSIFICATION	0.004734327625286816	DESIGN
// database type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.996444414414066	WITHOUT_CLASSIFICATION	0.0035555855859340634	DESIGN
// hibernate type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9941243879622664	WITHOUT_CLASSIFICATION	0.005875612037733482	DESIGN
// keyword support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9990268416114757	WITHOUT_CLASSIFICATION	9.73158388524317E-4	DESIGN
// native identifier generatiion ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996844499976041	WITHOUT_CLASSIFICATION	3.155500023958764E-4	DESIGN
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9984258661169169	WITHOUT_CLASSIFICATION	0.0015741338830830543	DESIGN
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9986547900353452	WITHOUT_CLASSIFICATION	0.00134520996465473	DESIGN
// GUID support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9984258661169169	WITHOUT_CLASSIFICATION	0.0015741338830830543	DESIGN
// limit/offset support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9984258661169169	WITHOUT_CLASSIFICATION	0.0015741338830830543	DESIGN
// by default we report no support	WITHOUT_CLASSIFICATION	0.9921913919832777	WITHOUT_CLASSIFICATION	0.007808608016722364	DESIGN
// by default we report no support for NOWAIT lock semantics	WITHOUT_CLASSIFICATION	0.9349372951422662	WITHOUT_CLASSIFICATION	0.06506270485773373	DESIGN
// table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992097038285227	WITHOUT_CLASSIFICATION	7.902961714773279E-4	DESIGN
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9811039315139006	WITHOUT_CLASSIFICATION	0.018896068486099354	DESIGN
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9991905033660592	WITHOUT_CLASSIFICATION	8.094966339407041E-4	DESIGN
// current timestamp support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999539569450259	WITHOUT_CLASSIFICATION	4.604305497410409E-4	DESIGN
// SQLException support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9984423181376604	WITHOUT_CLASSIFICATION	0.0015576818623395966	DESIGN
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9984258661169169	WITHOUT_CLASSIFICATION	0.0015741338830830543	DESIGN
// identifier quoting support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9985850803178402	WITHOUT_CLASSIFICATION	0.0014149196821597906	DESIGN
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9984258661169169	WITHOUT_CLASSIFICATION	0.0015741338830830543	DESIGN
// grrr... for differentiation of mysql storage engines	WITHOUT_CLASSIFICATION	0.9999057464710087	WITHOUT_CLASSIFICATION	9.42535289912561E-5	DESIGN
// Informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994422175194553	WITHOUT_CLASSIFICATION	5.577824805446644E-4	DESIGN
// return false here, as most databases do not properly support this construct...	WITHOUT_CLASSIFICATION	0.9959474347082312	WITHOUT_CLASSIFICATION	0.004052565291768809	DESIGN
// Mckoi has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9994289167063632	WITHOUT_CLASSIFICATION	5.7108329363672E-4	DESIGN
// Oracle8 and previous define only a "DATE" type which //      is used to represent all aspects of date/time	WITHOUT_CLASSIFICATION	0.9554018018393424	WITHOUT_CLASSIFICATION	0.04459819816065751	DESIGN
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9976376868561636	WITHOUT_CLASSIFICATION	0.002362313143836475	DESIGN
//" cascade";	WITHOUT_CLASSIFICATION	0.996856578556663	WITHOUT_CLASSIFICATION	0.003143421443336999	DESIGN
//trim off the length/precision/scale	WITHOUT_CLASSIFICATION	0.9992855699511705	WITHOUT_CLASSIFICATION	7.144300488295298E-4	DESIGN
/*public boolean dropTemporaryTableAfterUse() {	WITHOUT_CLASSIFICATION	0.9981919433925166	WITHOUT_CLASSIFICATION	0.0018080566074832856	DESIGN
// CHECK VIOLATION	WITHOUT_CLASSIFICATION	0.9991383219722084	WITHOUT_CLASSIFICATION	8.6167802779161E-4	DESIGN
// UNIQUE VIOLATION	WITHOUT_CLASSIFICATION	0.9991572902876915	WITHOUT_CLASSIFICATION	8.427097123085357E-4	DESIGN
// FOREIGN KEY VIOLATION	WITHOUT_CLASSIFICATION	0.9995534816876057	WITHOUT_CLASSIFICATION	4.465183123941898E-4	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995136403250783	WITHOUT_CLASSIFICATION	4.863596749217555E-4	DESIGN
// NOT NULL VIOLATION	WITHOUT_CLASSIFICATION	0.9995306877330002	WITHOUT_CLASSIFICATION	4.693122669997828E-4	DESIGN
// ALL OTHER	WITHOUT_CLASSIFICATION	0.9990615313308716	WITHOUT_CLASSIFICATION	9.384686691283002E-4	DESIGN
// Register the type of the out param - PostgreSQL uses Types.OTHER	WITHOUT_CLASSIFICATION	0.9877538638236071	WITHOUT_CLASSIFICATION	0.01224613617639291	DESIGN
// seems to not really... //	WITHOUT_CLASSIFICATION	0.9914112857821228	WITHOUT_CLASSIFICATION	0.008588714217877094	DESIGN
// seems to have spotty LOB suppport	WITHOUT_CLASSIFICATION	0.9983545128683666	WITHOUT_CLASSIFICATION	0.0016454871316332878	DESIGN
// HHH-2300	WITHOUT_CLASSIFICATION	0.9991103531722325	WITHOUT_CLASSIFICATION	8.896468277674399E-4	DESIGN
// ignore (probably H2 not in the classpath)	WITHOUT_CLASSIFICATION	0.9951688401476755	WITHOUT_CLASSIFICATION	0.004831159852324442	DESIGN
// Numeric Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994287471947612	WITHOUT_CLASSIFICATION	5.71252805238841E-4	DESIGN
// String Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993503799973906	WITHOUT_CLASSIFICATION	6.496200026093198E-4	DESIGN
// Time and Date Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994935368979657	WITHOUT_CLASSIFICATION	5.064631020343173E-4	DESIGN
// System Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994667882525593	WITHOUT_CLASSIFICATION	5.332117474406531E-4	DESIGN
// not null is implicit	WITHOUT_CLASSIFICATION	0.9965708425311117	WITHOUT_CLASSIFICATION	0.003429157468888235	DESIGN
// 23000: Check constraint violation: {0} // 23001: Unique index or primary key violation: {0}	WITHOUT_CLASSIFICATION	0.9999870977854238	WITHOUT_CLASSIFICATION	1.2902214576284629E-5	DESIGN
// Display the dialect version.	WITHOUT_CLASSIFICATION	0.9995729763507553	WITHOUT_CLASSIFICATION	4.270236492447527E-4	DESIGN
// The RDMS concat() function only supports 2 parameters	WITHOUT_CLASSIFICATION	0.9999994377293662	WITHOUT_CLASSIFICATION	5.622706337510931E-7	DESIGN
// Dialect method overrides ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993233153947827	WITHOUT_CLASSIFICATION	6.766846052173173E-4	DESIGN
// Original Dialect.java returns " for update";	WITHOUT_CLASSIFICATION	0.9988171027536269	WITHOUT_CLASSIFICATION	0.001182897246373146	DESIGN
// Verify the state of this new method in Hibernate 3.0 Dialect.java	WITHOUT_CLASSIFICATION	0.9993564403651641	WITHOUT_CLASSIFICATION	6.435596348358278E-4	DESIGN
// Origial Dialect.java returns true;	WITHOUT_CLASSIFICATION	0.9988034163741717	WITHOUT_CLASSIFICATION	0.0011965836258283223	DESIGN
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.952328996424186	WITHOUT_CLASSIFICATION	0.047671003575813976	DESIGN
// *** Sequence methods - start. The RDMS dialect needs these	WITHOUT_CLASSIFICATION	0.9508715307149379	WITHOUT_CLASSIFICATION	0.04912846928506214	DESIGN
// methods to make it possible to use the Native Id generator	WITHOUT_CLASSIFICATION	0.9984987119954063	WITHOUT_CLASSIFICATION	0.0015012880045936806	DESIGN
// The where clause was added to eliminate this statement from Brute Force Searches.	WITHOUT_CLASSIFICATION	0.9999542444111597	WITHOUT_CLASSIFICATION	4.575558884041562E-5	DESIGN
// *** Sequence methods - end	WITHOUT_CLASSIFICATION	0.9939135246642349	WITHOUT_CLASSIFICATION	0.0060864753357651276	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995136403250783	WITHOUT_CLASSIFICATION	4.863596749217555E-4	DESIGN
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9976376868561636	WITHOUT_CLASSIFICATION	0.002362313143836475	DESIGN
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.9884776001779494	WITHOUT_CLASSIFICATION	0.011522399822050663	DESIGN
// Used with DROP TABLE to delete all records in the table.	WITHOUT_CLASSIFICATION	0.9999662424071678	WITHOUT_CLASSIFICATION	3.375759283224337E-5	DESIGN
// RDMS supports the UNION ALL clause.	WITHOUT_CLASSIFICATION	0.9996475358526263	WITHOUT_CLASSIFICATION	3.524641473737102E-4	DESIGN
// RDMS has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9994476817187207	WITHOUT_CLASSIFICATION	5.523182812792281E-4	DESIGN
// Multi-param dialect functions...	WITHOUT_CLASSIFICATION	0.9986090363645379	WITHOUT_CLASSIFICATION	0.001390963635462161	DESIGN
// function templates	WITHOUT_CLASSIFICATION	0.9999413822457501	WITHOUT_CLASSIFICATION	5.8617754249742685E-5	DESIGN
//not null is implicit	WITHOUT_CLASSIFICATION	0.9974307339269189	WITHOUT_CLASSIFICATION	0.002569266073081089	DESIGN
// this assumes schema support, which is present in 1.8.0 and later...	WITHOUT_CLASSIFICATION	0.9997976953287677	WITHOUT_CLASSIFICATION	2.023046712321988E-4	DESIGN
// HSQLDB only supports READ_UNCOMMITTED transaction isolation	WITHOUT_CLASSIFICATION	0.9995855381360246	WITHOUT_CLASSIFICATION	4.1446186397538253E-4	DESIGN
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9995258221767014	WITHOUT_CLASSIFICATION	4.7417782329859054E-4	DESIGN
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9991575746212754	WITHOUT_CLASSIFICATION	8.424253787246575E-4	DESIGN
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9990159054799138	WITHOUT_CLASSIFICATION	9.840945200861647E-4	DESIGN
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.9998065294069172	WITHOUT_CLASSIFICATION	1.9347059308277406E-4	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995136403250783	WITHOUT_CLASSIFICATION	4.863596749217555E-4	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995136403250783	WITHOUT_CLASSIFICATION	4.863596749217555E-4	DESIGN
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9950715416222095	WITHOUT_CLASSIFICATION	0.004928458377790528	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998122686237135	WITHOUT_CLASSIFICATION	1.87731376286521E-4	DESIGN
// TimesTen has no BLOB/CLOB support, but these types may be suitable  // for some applications. The length is limited to 4 million bytes.	WITHOUT_CLASSIFICATION	0.9998355666805089	WITHOUT_CLASSIFICATION	1.6443331949105697E-4	DESIGN
// new methods in dialect3	WITHOUT_CLASSIFICATION	0.9994576461695026	WITHOUT_CLASSIFICATION	5.423538304973908E-4	DESIGN
/*public boolean supportsForUpdateNowait() {	WITHOUT_CLASSIFICATION	0.9981919433925166	WITHOUT_CLASSIFICATION	0.0018080566074832856	DESIGN
// TimesTen has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.999451192024275	WITHOUT_CLASSIFICATION	5.488079757250553E-4	DESIGN
// iterate entries ordered by capacity to find first fit	WITHOUT_CLASSIFICATION	0.9936785167338705	WITHOUT_CLASSIFICATION	0.006321483266129451	DESIGN
// add new ordered map	WITHOUT_CLASSIFICATION	0.9993541740198815	WITHOUT_CLASSIFICATION	6.458259801185658E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998122686237135	WITHOUT_CLASSIFICATION	1.87731376286521E-4	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995136403250783	WITHOUT_CLASSIFICATION	4.863596749217555E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998122686237135	WITHOUT_CLASSIFICATION	1.87731376286521E-4	DESIGN
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9995556322868003	WITHOUT_CLASSIFICATION	4.443677131996857E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998122686237135	WITHOUT_CLASSIFICATION	1.87731376286521E-4	DESIGN
//registerColumnType data types	WITHOUT_CLASSIFICATION	0.9989985816057405	WITHOUT_CLASSIFICATION	0.001001418394259472	DESIGN
// hibernate seems to ignore this type...	WITHOUT_CLASSIFICATION	0.9773868606614935	WITHOUT_CLASSIFICATION	0.02261313933850643	DESIGN
// IBID for current_time and current_date	WITHOUT_CLASSIFICATION	0.9994308249645794	WITHOUT_CLASSIFICATION	5.691750354206079E-4	DESIGN
// Tell hibernate to use getBytes instead of getBinaryStream	WITHOUT_CLASSIFICATION	0.9970651205959535	WITHOUT_CLASSIFICATION	0.00293487940404647	DESIGN
// No batch statements	WITHOUT_CLASSIFICATION	0.9999167235469888	WITHOUT_CLASSIFICATION	8.327645301129329E-5	DESIGN
/*	WITHOUT_CLASSIFICATION	0.9804982199623147	WITHOUT_CLASSIFICATION	0.01950178003768536	DESIGN
//no pointbase BIT	WITHOUT_CLASSIFICATION	0.9977823965363392	WITHOUT_CLASSIFICATION	0.0022176034636609693	DESIGN
//no pointbase TINYINT	WITHOUT_CLASSIFICATION	0.9986902897731977	WITHOUT_CLASSIFICATION	0.0013097102268022028	DESIGN
// Pointbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9985959371726387	WITHOUT_CLASSIFICATION	0.0014040628273613194	DESIGN
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9976376868561636	WITHOUT_CLASSIFICATION	0.002362313143836475	DESIGN
// The current_timestamp is more accurate, but only known to be supported // in SQL Server 7.0 and later (i.e., Sybase not known to support it at all)	WITHOUT_CLASSIFICATION	0.9954436929548304	WITHOUT_CLASSIFICATION	0.00455630704516972	DESIGN
// SQL Server (at least up through 2005) does not support defining // cascade delete constraints which can circel back to the mutating // table	WITHOUT_CLASSIFICATION	0.9996321961584852	WITHOUT_CLASSIFICATION	3.67803841514761E-4	DESIGN
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9768022719198772	WITHOUT_CLASSIFICATION	0.023197728080122722	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998122686237135	WITHOUT_CLASSIFICATION	1.87731376286521E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998122686237135	WITHOUT_CLASSIFICATION	1.87731376286521E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998122686237135	WITHOUT_CLASSIFICATION	1.87731376286521E-4	DESIGN
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9976376868561636	WITHOUT_CLASSIFICATION	0.002362313143836475	DESIGN
/* package-private */	WITHOUT_CLASSIFICATION	0.9998218864478172	WITHOUT_CLASSIFICATION	1.7811355218283102E-4	DESIGN
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9995556322868003	WITHOUT_CLASSIFICATION	4.443677131996857E-4	DESIGN
//Sybase BIT type does not support null values	WITHOUT_CLASSIFICATION	0.9779274959708405	WITHOUT_CLASSIFICATION	0.02207250402915947	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998122686237135	WITHOUT_CLASSIFICATION	1.87731376286521E-4	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995136403250783	WITHOUT_CLASSIFICATION	4.863596749217555E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998122686237135	WITHOUT_CLASSIFICATION	1.87731376286521E-4	DESIGN
//not null ... (start with 1) is implicit	WITHOUT_CLASSIFICATION	0.9890700738336534	WITHOUT_CLASSIFICATION	0.010929926166346608	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995136403250783	WITHOUT_CLASSIFICATION	4.863596749217555E-4	DESIGN
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.9998390661149086	WITHOUT_CLASSIFICATION	1.6093388509136368E-4	DESIGN
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9995258221767014	WITHOUT_CLASSIFICATION	4.7417782329859054E-4	DESIGN
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9991575746212754	WITHOUT_CLASSIFICATION	8.424253787246575E-4	DESIGN
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9990159054799138	WITHOUT_CLASSIFICATION	9.840945200861647E-4	DESIGN
// add another (inner) nested select // add the main query // close off the inner nested select	WITHOUT_CLASSIFICATION	0.9999924843444471	WITHOUT_CLASSIFICATION	7.5156555528496854E-6	DESIGN
// add the main query	WITHOUT_CLASSIFICATION	0.9996185489767734	WITHOUT_CLASSIFICATION	3.8145102322665475E-4	DESIGN
//add the restriction to the outer select	WITHOUT_CLASSIFICATION	0.9997106775220593	WITHOUT_CLASSIFICATION	2.8932247794069186E-4	DESIGN
// This assumes you will want to ignore any update counts 	WITHOUT_CLASSIFICATION	0.9999056812866987	WITHOUT_CLASSIFICATION	9.43187133014057E-5	DESIGN
// You may still have other ResultSets or update counts left to process here  // but you can't do it now or the ResultSet you just got will be closed 	WITHOUT_CLASSIFICATION	0.9999636533502507	WITHOUT_CLASSIFICATION	3.634664974930271E-5	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995136403250783	WITHOUT_CLASSIFICATION	4.863596749217555E-4	DESIGN
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9976376868561636	WITHOUT_CLASSIFICATION	0.002362313143836475	DESIGN
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.9998065294069172	WITHOUT_CLASSIFICATION	1.9347059308277406E-4	DESIGN
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9950715416222095	WITHOUT_CLASSIFICATION	0.004928458377790528	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998122686237135	WITHOUT_CLASSIFICATION	1.87731376286521E-4	DESIGN
// features which change between 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9989176762888333	WITHOUT_CLASSIFICATION	0.001082323711166673	DESIGN
// features which remain constant across 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994321975470292	WITHOUT_CLASSIFICATION	5.678024529707994E-4	DESIGN
// binary %Stream // character %Stream	WITHOUT_CLASSIFICATION	0.9998976532343762	WITHOUT_CLASSIFICATION	1.0234676562374195E-4	DESIGN
//getDefaultProperties().setProperty(Environment.STATEMENT_BATCH_SIZE, NO_BATCH);	WITHOUT_CLASSIFICATION	0.9978506171800194	WITHOUT_CLASSIFICATION	0.002149382819980599	DESIGN
// hibernate impelemnts cast in Dialect.java	WITHOUT_CLASSIFICATION	0.9991828487369793	WITHOUT_CLASSIFICATION	8.171512630206594E-4	DESIGN
// aggregate functions shouldn't be registered, right? //registerFunction( "list", new StandardSQLFunction("list",Hibernate.STRING) ); // stopped on $list	WITHOUT_CLASSIFICATION	0.9910350071934918	WITHOUT_CLASSIFICATION	0.008964992806508231	DESIGN
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9984258661169169	WITHOUT_CLASSIFICATION	0.0015741338830830543	DESIGN
// below is for Cache' that don't have str in 2007.1 there is str and we register str directly	WITHOUT_CLASSIFICATION	0.9963642568445363	WITHOUT_CLASSIFICATION	0.003635743155463689	DESIGN
// note that %string is deprecated	WITHOUT_CLASSIFICATION	0.9867641164623829	WITHOUT_CLASSIFICATION	0.013235883537617125	DESIGN
// %upper is deprecated	WITHOUT_CLASSIFICATION	0.9968079064941454	WITHOUT_CLASSIFICATION	0.00319209350585464	DESIGN
// The syntax used to add a foreign key constraint to a table.	WITHOUT_CLASSIFICATION	0.9967478548676584	WITHOUT_CLASSIFICATION	0.003252145132341556	DESIGN
// identifier-commalist	WITHOUT_CLASSIFICATION	0.9995142226641992	WITHOUT_CLASSIFICATION	4.8577733580084E-4	DESIGN
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9984258661169169	WITHOUT_CLASSIFICATION	0.0015741338830830543	DESIGN
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9986547900353452	WITHOUT_CLASSIFICATION	0.00134520996465473	DESIGN
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9811039315139006	WITHOUT_CLASSIFICATION	0.018896068486099354	DESIGN
// identifier-commalist	WITHOUT_CLASSIFICATION	0.9995142226641992	WITHOUT_CLASSIFICATION	4.8577733580084E-4	DESIGN
// The syntax used to add a column to a table	WITHOUT_CLASSIFICATION	0.9959630088472279	WITHOUT_CLASSIFICATION	0.004036991152772062	DESIGN
// Completely optional cascading drop clause.	WITHOUT_CLASSIFICATION	0.9981841318522152	WITHOUT_CLASSIFICATION	0.0018158681477847792	DESIGN
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9982744337108542	WITHOUT_CLASSIFICATION	0.0017255662891457074	DESIGN
// LIMIT support (ala TOP) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9984258661169169	WITHOUT_CLASSIFICATION	0.0015741338830830543	DESIGN
// InterSystems Cache' does not current support "SELECT ... FOR UPDATE" syntax... // Set your transaction mode to READ_COMMITTED before using	WITHOUT_CLASSIFICATION	0.9848387943157688	WITHOUT_CLASSIFICATION	0.015161205684231283	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995136403250783	WITHOUT_CLASSIFICATION	4.863596749217555E-4	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995136403250783	WITHOUT_CLASSIFICATION	4.863596749217555E-4	DESIGN
/*<String>*/	WITHOUT_CLASSIFICATION	0.9967688892480616	WITHOUT_CLASSIFICATION	0.003231110751938361	DESIGN
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9991905033660592	WITHOUT_CLASSIFICATION	8.094966339407041E-4	DESIGN
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9984258661169169	WITHOUT_CLASSIFICATION	0.0015741338830830543	DESIGN
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.952328996424186	WITHOUT_CLASSIFICATION	0.047671003575813976	DESIGN
// Does the LIMIT clause come at the start of the SELECT statement, rather than at the end?	WITHOUT_CLASSIFICATION	0.9876278042899385	WITHOUT_CLASSIFICATION	0.01237219571006153	DESIGN
// Does the LIMIT clause take a "maximum" row number instead of a total number of returned rows?	WITHOUT_CLASSIFICATION	0.9944690781902277	WITHOUT_CLASSIFICATION	0.00553092180977225	DESIGN
// The name of the SQL function that transforms a string to lowercase	WITHOUT_CLASSIFICATION	0.9999535752002245	WITHOUT_CLASSIFICATION	4.6424799775512006E-5	DESIGN
// Create an OuterJoinGenerator for this dialect.	WITHOUT_CLASSIFICATION	0.9985443841537209	WITHOUT_CLASSIFICATION	0.0014556158462790815	DESIGN
// The keyword used to insert a row without specifying // any column values	WITHOUT_CLASSIFICATION	0.9994591597183314	WITHOUT_CLASSIFICATION	5.408402816686167E-4	DESIGN
//registerFunction( "trim", new StandardSQLFunction( "trim", Hibernate.STRING ) );	WITHOUT_CLASSIFICATION	0.9968370520590765	WITHOUT_CLASSIFICATION	0.003162947940923482	DESIGN
//skip the FROM keyword in params	WITHOUT_CLASSIFICATION	0.9989705990430607	WITHOUT_CLASSIFICATION	0.0010294009569392646	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.9967688892480616	WITHOUT_CLASSIFICATION	0.003231110751938361	DESIGN
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.9985595576580333	WITHOUT_CLASSIFICATION	0.0014404423419667393	DESIGN
// SQLFunction implementation	WITHOUT_CLASSIFICATION	0.9995065428564605	WITHOUT_CLASSIFICATION	4.934571435396078E-4	DESIGN
// conceivable that the dialect ctor could throw HibernateExceptions, so don't re-wrap	WITHOUT_CLASSIFICATION	0.9950214503824167	WITHOUT_CLASSIFICATION	0.004978549617583297	DESIGN
// register the standard dialect resolver	WITHOUT_CLASSIFICATION	0.9989876633961805	WITHOUT_CLASSIFICATION	0.001012336603819493	DESIGN
// register resolvers set via Environment property	WITHOUT_CLASSIFICATION	0.9996049619179477	WITHOUT_CLASSIFICATION	3.9503808205230875E-4	DESIGN
// kept for backward compatibility until after the 3.1beta5 release of HA	WITHOUT_CLASSIFICATION	0.9999173111603205	WITHOUT_CLASSIFICATION	8.268883967955145E-5	DESIGN
//cache the hashcode	WITHOUT_CLASSIFICATION	0.9980877051203293	WITHOUT_CLASSIFICATION	0.0019122948796707578	DESIGN
// the CascadingAction contract ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995959565152602	WITHOUT_CLASSIFICATION	4.0404348473984086E-4	DESIGN
// the CascadingAction implementations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994419306538376	WITHOUT_CLASSIFICATION	5.580693461624425E-4	DESIGN
// delete does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9998235448736229	WITHOUT_CLASSIFICATION	1.7645512637700796E-4	DESIGN
// orphans should be deleted during delete	WITHOUT_CLASSIFICATION	0.9983322166870767	WITHOUT_CLASSIFICATION	0.0016677833129232348	DESIGN
/*(LockMode) anything*/	WITHOUT_CLASSIFICATION	0.9982338249437797	WITHOUT_CLASSIFICATION	0.0017661750562203082	DESIGN
// lock doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.99924381600751	WITHOUT_CLASSIFICATION	7.561839924899753E-4	DESIGN
// refresh doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9996557674629671	WITHOUT_CLASSIFICATION	3.442325370329348E-4	DESIGN
// evicts don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.999350279825573	WITHOUT_CLASSIFICATION	6.497201744270536E-4	DESIGN
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9994984397224403	WITHOUT_CLASSIFICATION	5.015602775596679E-4	DESIGN
// orphans should be deleted during save/update	WITHOUT_CLASSIFICATION	0.9962664062870351	WITHOUT_CLASSIFICATION	0.003733593712964787	DESIGN
// for deprecated saveOrUpdateCopy()	WITHOUT_CLASSIFICATION	0.995151294518387	WITHOUT_CLASSIFICATION	0.0048487054816129015	DESIGN
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.999350279825573	WITHOUT_CLASSIFICATION	6.497201744270536E-4	DESIGN
//a proxy cannot be transient and it breaks ForeignKeys.isTransient	WITHOUT_CLASSIFICATION	0.9996169997627784	WITHOUT_CLASSIFICATION	3.8300023722159614E-4	DESIGN
// replicate does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9996042453335172	WITHOUT_CLASSIFICATION	3.9575466648268464E-4	DESIGN
// static helper methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998200657933394	WITHOUT_CLASSIFICATION	1.799342066607452E-4	DESIGN
// handles arrays and newly instantiated collections	WITHOUT_CLASSIFICATION	0.9996114907111759	WITHOUT_CLASSIFICATION	3.8850928882409907E-4	DESIGN
// Actually the semantics of the next three are really "Bag" // Note that, unlike objects, collection insertions, updates, // deletions are not really remembered between flushes. We // just re-use the same Lists for convenience.	WITHOUT_CLASSIFICATION	0.9284879023179818	WITHOUT_CLASSIFICATION	0.07151209768201812	DESIGN
// Add these directly to the executions queue	WITHOUT_CLASSIFICATION	0.9980783908322791	WITHOUT_CLASSIFICATION	0.0019216091677209184	DESIGN
// continue loop	WITHOUT_CLASSIFICATION	0.9996725709525368	WITHOUT_CLASSIFICATION	3.2742904746321035E-4	DESIGN
//sort the updates by fk	WITHOUT_CLASSIFICATION	0.9996976689305529	WITHOUT_CLASSIFICATION	3.023310694470689E-4	DESIGN
//sort the updates by pk	WITHOUT_CLASSIFICATION	0.9996976689305529	WITHOUT_CLASSIFICATION	3.023310694470689E-4	DESIGN
// the mapping of entity names to their latest batch numbers.	WITHOUT_CLASSIFICATION	0.9999377481354937	WITHOUT_CLASSIFICATION	6.225186450626647E-5	DESIGN
// the map of batch numbers to EntityInsertAction lists	WITHOUT_CLASSIFICATION	0.9998310501107146	WITHOUT_CLASSIFICATION	1.6894988928543384E-4	DESIGN
//optimize the hash size to eliminate a rehash.	WITHOUT_CLASSIFICATION	0.9969792763436098	WITHOUT_CLASSIFICATION	0.0030207236563900967	DESIGN
// the list of entity names that indicate the batch number	WITHOUT_CLASSIFICATION	0.9999939489998966	WITHOUT_CLASSIFICATION	6.0510001034337616E-6	DESIGN
// remove the current element from insertions. It will be added back later.	WITHOUT_CLASSIFICATION	0.9997778729065873	WITHOUT_CLASSIFICATION	2.2212709341280055E-4	DESIGN
// the entity associated with the current action.	WITHOUT_CLASSIFICATION	0.9996892948733175	WITHOUT_CLASSIFICATION	3.1070512668251445E-4	DESIGN
// There is already an existing batch for this type of entity. // Check to see if the latest batch is acceptable.	WITHOUT_CLASSIFICATION	0.9996672572224369	WITHOUT_CLASSIFICATION	3.3274277756305796E-4	DESIGN
// now rebuild the insertions list. There is a batch for each entry in the name list.	WITHOUT_CLASSIFICATION	0.9995665044889508	WITHOUT_CLASSIFICATION	4.334955110491218E-4	DESIGN
// the current batch number is the latest batch for this entity type.	WITHOUT_CLASSIFICATION	0.9997143979714095	WITHOUT_CLASSIFICATION	2.856020285905051E-4	DESIGN
// loop through all the associations of the current entity and make sure that they are processed // before the current batch number	WITHOUT_CLASSIFICATION	0.9999818828324039	WITHOUT_CLASSIFICATION	1.8117167596046934E-5	DESIGN
// find the batch number associated with the current association, if any.	WITHOUT_CLASSIFICATION	0.9999899036128801	WITHOUT_CLASSIFICATION	1.0096387119869395E-5	DESIGN
// create a new batch for this type. The batch number is the number of current batches.	WITHOUT_CLASSIFICATION	0.9999435178736	WITHOUT_CLASSIFICATION	5.648212640000663E-5	DESIGN
// loop through all the associated entities and make sure they have been // processed before the latest // batch associated with this entity type.	WITHOUT_CLASSIFICATION	0.9988330435655982	WITHOUT_CLASSIFICATION	0.001166956434401833	DESIGN
// since this entity will now be processed in the latest possible batch, // we can be assured that it will come after all other associations, // there's not need to continue checking.	WITHOUT_CLASSIFICATION	0.985875442436016	WITHOUT_CLASSIFICATION	0.01412455756398407	DESIGN
//cascade to current collection elements	WITHOUT_CLASSIFICATION	0.998360487981029	WITHOUT_CLASSIFICATION	0.0016395120189709302	DESIGN
//not really necessary, but good for consistency...	WITHOUT_CLASSIFICATION	0.9884583805241622	WITHOUT_CLASSIFICATION	0.01154161947583774	DESIGN
// we can't cascade to non-embedded elements	WITHOUT_CLASSIFICATION	0.9994877010115656	WITHOUT_CLASSIFICATION	5.122989884344178E-4	DESIGN
//a newly instantiated collection can't have orphans	WITHOUT_CLASSIFICATION	0.9916769654513652	WITHOUT_CLASSIFICATION	0.00832303454863486	DESIGN
// handle orphaned entities!!	WITHOUT_CLASSIFICATION	0.9985760435778435	WITHOUT_CLASSIFICATION	0.0014239564221566073	DESIGN
// Loaded entity instances, by EntityUniqueKey	WITHOUT_CLASSIFICATION	0.9997302589940706	WITHOUT_CLASSIFICATION	2.6974100592944E-4	DESIGN
// Identity map of EntityEntry instances, by the entity instance	WITHOUT_CLASSIFICATION	0.9998478084525616	WITHOUT_CLASSIFICATION	1.5219154743838722E-4	DESIGN
// Entity proxies, by EntityKey	WITHOUT_CLASSIFICATION	0.9997285352481959	WITHOUT_CLASSIFICATION	2.714647518039837E-4	DESIGN
// Snapshots of current database state for entities // that have *not* been loaded	WITHOUT_CLASSIFICATION	0.9999535469883529	WITHOUT_CLASSIFICATION	4.645301164712478E-5	DESIGN
// Identity map of array holder ArrayHolder instances, by the array instance	WITHOUT_CLASSIFICATION	0.9999437305286932	WITHOUT_CLASSIFICATION	5.626947130672066E-5	DESIGN
// Collection wrappers, by the CollectionKey //key=CollectionKey, value=PersistentCollection	WITHOUT_CLASSIFICATION	0.9997920819522683	WITHOUT_CLASSIFICATION	2.0791804773168346E-4	DESIGN
// Set of EntityKeys of deleted objects	WITHOUT_CLASSIFICATION	0.9996679168544101	WITHOUT_CLASSIFICATION	3.3208314558992645E-4	DESIGN
// properties that we have tried to load, and not found in the database	WITHOUT_CLASSIFICATION	0.9986659746671738	WITHOUT_CLASSIFICATION	0.0013340253328261874	DESIGN
// A list of collection wrappers that were instantiating during result set // processing, that we will need to initialize at the end of the query	WITHOUT_CLASSIFICATION	0.9990278418273875	WITHOUT_CLASSIFICATION	9.721581726125263E-4	DESIGN
// A container for collections we load up when the owning entity is not // yet loaded ... for now, this is purely transient!	WITHOUT_CLASSIFICATION	0.9762028227294474	WITHOUT_CLASSIFICATION	0.023797177270552698	DESIGN
// Downgrade locks	WITHOUT_CLASSIFICATION	0.9992502949977288	WITHOUT_CLASSIFICATION	7.497050022713253E-4	DESIGN
// any earlier proxy takes precedence	WITHOUT_CLASSIFICATION	0.999953794938122	WITHOUT_CLASSIFICATION	4.620506187800221E-5	DESIGN
//unwrap the object	WITHOUT_CLASSIFICATION	0.99720246553154	WITHOUT_CLASSIFICATION	0.0027975344684599453	DESIGN
//initialize + unwrap the object	WITHOUT_CLASSIFICATION	0.9996026950903625	WITHOUT_CLASSIFICATION	3.973049096374755E-4	DESIGN
//return the proxied object	WITHOUT_CLASSIFICATION	0.9987306779381221	WITHOUT_CLASSIFICATION	0.001269322061877915	DESIGN
//overwrite old proxy	WITHOUT_CLASSIFICATION	0.9996775039889118	WITHOUT_CLASSIFICATION	3.2249601108827496E-4	DESIGN
// early exit...	WITHOUT_CLASSIFICATION	0.99920536687505	WITHOUT_CLASSIFICATION	7.94633124949865E-4	DESIGN
// or should it actually throw an exception?	WITHOUT_CLASSIFICATION	0.9925302167917615	WITHOUT_CLASSIFICATION	0.007469783208238508	DESIGN
//treat it just like a new collection	WITHOUT_CLASSIFICATION	0.9393934283424837	WITHOUT_CLASSIFICATION	0.060606571657516345	DESIGN
//do this work only at the very highest level of the load //don't let this method be called recursively	WITHOUT_CLASSIFICATION	0.9983375205951106	WITHOUT_CLASSIFICATION	0.0016624794048894212	DESIGN
//note that each iteration of the loop may add new elements	WITHOUT_CLASSIFICATION	0.9999025083323998	WITHOUT_CLASSIFICATION	9.749166760028822E-5	DESIGN
//it might be an unwrapped collection reference! //try to find a wrapper (slowish)	WITHOUT_CLASSIFICATION	0.9625891395050526	WITHOUT_CLASSIFICATION	0.0374108604949474	DESIGN
/*public boolean isNonExistant(EntityKey key) {	WITHOUT_CLASSIFICATION	0.9981919433925166	WITHOUT_CLASSIFICATION	0.0018080566074832856	DESIGN
/*public boolean isNonExistant(EntityUniqueKey key) {	WITHOUT_CLASSIFICATION	0.9981919433925166	WITHOUT_CLASSIFICATION	0.0018080566074832856	DESIGN
// iterate all the entities currently associated with the persistence context.	WITHOUT_CLASSIFICATION	0.9983832316435839	WITHOUT_CLASSIFICATION	0.0016167683564160245	DESIGN
// does this entity entry pertain to the entity persister in which we are interested (owner)?	WITHOUT_CLASSIFICATION	0.9977195277788423	WITHOUT_CLASSIFICATION	0.0022804722211576312	DESIGN
//check if the managed object is the parent	WITHOUT_CLASSIFICATION	0.9989822704876514	WITHOUT_CLASSIFICATION	0.001017729512348645	DESIGN
// otherwise, the proxy was pruned during the serialization process	WITHOUT_CLASSIFICATION	0.9999910435313796	WITHOUT_CLASSIFICATION	8.956468620432712E-6	DESIGN
// adds remove as a sort-of alias for delete...	WITHOUT_CLASSIFICATION	0.9997103119924582	WITHOUT_CLASSIFICATION	2.8968800754181095E-4	DESIGN
//bad cast	WITHOUT_CLASSIFICATION	0.9993349854515031	WITHOUT_CLASSIFICATION	6.650145484968892E-4	DESIGN
//return lhsPersister.getSubclassPropertyColumnNames(property);	WITHOUT_CLASSIFICATION	0.998179885675677	WITHOUT_CLASSIFICATION	0.0018201143243230025	DESIGN
//property-refs for associations defined on a //component are not supported, so no need to slice	WITHOUT_CLASSIFICATION	0.965818094828031	WITHOUT_CLASSIFICATION	0.0341819051719689	DESIGN
//if there is no property-ref, assume the join //is to the subclass table (ie. the table of the //subclass that the association belongs to)	WITHOUT_CLASSIFICATION	0.9996195429643159	WITHOUT_CLASSIFICATION	3.8045703568421324E-4	DESIGN
//handle a property-ref	WITHOUT_CLASSIFICATION	0.9960999534160511	WITHOUT_CLASSIFICATION	0.003900046583948881	DESIGN
/*NativeSQLQueryReturn*/	WITHOUT_CLASSIFICATION	0.9982338249437797	WITHOUT_CLASSIFICATION	0.0017661750562203082	DESIGN
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9985848678891307	WITHOUT_CLASSIFICATION	0.0014151321108692653	DESIGN
// why is all others non final ?	WITHOUT_CLASSIFICATION	0.8937533418891273	WITHOUT_CLASSIFICATION	0.10624665811087276	DESIGN
//this.forceCacheRefresh = forceCacheRefresh;	WITHOUT_CLASSIFICATION	0.9990302159699643	WITHOUT_CLASSIFICATION	9.697840300357113E-4	DESIGN
// HELLA IMPORTANT OPTIMIZATION!!!	WITHOUT_CLASSIFICATION	0.9994086587758717	WITHOUT_CLASSIFICATION	5.913412241282598E-4	DESIGN
/*return that.type.equals(type) && 	WITHOUT_CLASSIFICATION	0.9976664308362235	WITHOUT_CLASSIFICATION	0.0023335691637765364	DESIGN
//Must occur after resolving identifiers!	WITHOUT_CLASSIFICATION	0.9942151927882102	WITHOUT_CLASSIFICATION	0.005784807211789633	DESIGN
//take a snapshot	WITHOUT_CLASSIFICATION	0.9947821592463475	WITHOUT_CLASSIFICATION	0.005217840753652527	DESIGN
// do a check	WITHOUT_CLASSIFICATION	0.9990936597904068	WITHOUT_CLASSIFICATION	9.063402095933546E-4	DESIGN
// the owning entity may have been deleted and its identifier unset due to // identifier-rollback; in which case, try to look up its identifier from // the persistence context	WITHOUT_CLASSIFICATION	0.9996761304893806	WITHOUT_CLASSIFICATION	3.2386951061941807E-4	DESIGN
// do the work	WITHOUT_CLASSIFICATION	0.9996889075092713	WITHOUT_CLASSIFICATION	3.110924907287265E-4	DESIGN
// We've been here before	WITHOUT_CLASSIFICATION	0.9963853258715533	WITHOUT_CLASSIFICATION	0.00361467412844669	DESIGN
// it is or was referenced _somewhere_	WITHOUT_CLASSIFICATION	0.999945310427782	WITHOUT_CLASSIFICATION	5.468957221801183E-5	DESIGN
// do the work	WITHOUT_CLASSIFICATION	0.9996889075092713	WITHOUT_CLASSIFICATION	3.110924907287265E-4	DESIGN
// if either its role changed,	WITHOUT_CLASSIFICATION	0.9998614032357737	WITHOUT_CLASSIFICATION	1.3859676422641707E-4	DESIGN
// or its key changed	WITHOUT_CLASSIFICATION	0.9999673257414974	WITHOUT_CLASSIFICATION	3.267425850255486E-5	DESIGN
// we will need to create new entries	WITHOUT_CLASSIFICATION	0.9972600582766233	WITHOUT_CLASSIFICATION	0.002739941723376633	DESIGN
// we will need to remove ye olde entries	WITHOUT_CLASSIFICATION	0.9909093026067847	WITHOUT_CLASSIFICATION	0.009090697393215347	DESIGN
// force initialize!	WITHOUT_CLASSIFICATION	0.9963826036345096	WITHOUT_CLASSIFICATION	0.0036173963654902936	DESIGN
// else if it's elements changed	WITHOUT_CLASSIFICATION	0.9999668225413096	WITHOUT_CLASSIFICATION	3.317745869037122E-5	DESIGN
//ATTRIBUTES MAINTAINED BETWEEN FLUSH CYCLES	WITHOUT_CLASSIFICATION	0.9978506171800194	WITHOUT_CLASSIFICATION	0.002149382819980599	DESIGN
// session-start/post-flush persistent state	WITHOUT_CLASSIFICATION	0.9994197038465726	WITHOUT_CLASSIFICATION	5.802961534274168E-4	DESIGN
// allow the CollectionSnapshot to be serialized	WITHOUT_CLASSIFICATION	0.9981555483762351	WITHOUT_CLASSIFICATION	0.001844451623764974	DESIGN
// ATTRIBUTES USED ONLY DURING FLUSH CYCLE	WITHOUT_CLASSIFICATION	0.996465561595882	WITHOUT_CLASSIFICATION	0.0035344384041179275	DESIGN
// "current" means the reference that was found during flush() 	WITHOUT_CLASSIFICATION	0.9999665081482408	WITHOUT_CLASSIFICATION	3.349185175914693E-5	DESIGN
// "loaded" means the reference that is consistent  // with the current database state	WITHOUT_CLASSIFICATION	0.9999361371279109	WITHOUT_CLASSIFICATION	6.38628720890808E-5	DESIGN
// during flush, we navigate the object graph to // collections and decide what to do with them	WITHOUT_CLASSIFICATION	0.9960900360481898	WITHOUT_CLASSIFICATION	0.003909963951810302	DESIGN
// if we instantiate a collection during the flush() process, // we must ignore it for the rest of the flush()	WITHOUT_CLASSIFICATION	0.9973396472641934	WITHOUT_CLASSIFICATION	0.0026603527358065406	DESIGN
// new collections that get found + wrapped // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9987380426717143	WITHOUT_CLASSIFICATION	0.001261957328285759	DESIGN
//a newly wrapped collection is NOT dirty (or we get unnecessary version updates)	WITHOUT_CLASSIFICATION	0.8397908288936586	WITHOUT_CLASSIFICATION	0.1602091711063413	DESIGN
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9982338249437797	WITHOUT_CLASSIFICATION	0.0017661750562203082	DESIGN
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9982338249437797	WITHOUT_CLASSIFICATION	0.0017661750562203082	DESIGN
// detached collections that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999229364899741	WITHOUT_CLASSIFICATION	7.706351002582288E-5	DESIGN
//optimization	WITHOUT_CLASSIFICATION	0.9967688892480616	WITHOUT_CLASSIFICATION	0.003231110751938361	DESIGN
//optimization //optimization	WITHOUT_CLASSIFICATION	0.9982338249437797	WITHOUT_CLASSIFICATION	0.0017661750562203082	DESIGN
//re-snapshot	WITHOUT_CLASSIFICATION	0.9967688892480616	WITHOUT_CLASSIFICATION	0.003231110751938361	DESIGN
// for convenience to save some lookups	WITHOUT_CLASSIFICATION	0.9988006868667269	WITHOUT_CLASSIFICATION	0.0011993131332731334	DESIGN
//NOTE: this is not updated when properties are fetched lazily!	WITHOUT_CLASSIFICATION	0.9818679110812298	WITHOUT_CLASSIFICATION	0.018132088918770224	DESIGN
//memory optimization	WITHOUT_CLASSIFICATION	0.9992279963128258	WITHOUT_CLASSIFICATION	7.720036871742624E-4	DESIGN
// use the id value of a newly instantiated instance as the unsaved-value	WITHOUT_CLASSIFICATION	0.999387321527971	WITHOUT_CLASSIFICATION	6.12678472028984E-4	DESIGN
// copied from Session:	WITHOUT_CLASSIFICATION	0.992378503791441	WITHOUT_CLASSIFICATION	0.007621496208558934	DESIGN
// this should not happen since the DTD prevents it	WITHOUT_CLASSIFICATION	0.9971168959033155	WITHOUT_CLASSIFICATION	0.002883104096684368	DESIGN
// JoinProcessor needs to know if the where clause fragment came from a dynamic filter or not so it // can put the where clause fragment in the right place in the SQL AST.   'hasFilterCondition' keeps track // of that fact.	WITHOUT_CLASSIFICATION	0.9996621862482689	WITHOUT_CLASSIFICATION	3.378137517311682E-4	DESIGN
// the current join represents the join between a many-to-many association table // and its "target" table.  Here we need to apply any additional filters // defined specifically on the many-to-many	WITHOUT_CLASSIFICATION	0.9999666610177003	WITHOUT_CLASSIFICATION	3.3338982299786046E-5	DESIGN
//check basic level one nullablilty	WITHOUT_CLASSIFICATION	0.9986608458283424	WITHOUT_CLASSIFICATION	0.0013391541716576555	DESIGN
//values is not null and is checkable, we'll look deeper	WITHOUT_CLASSIFICATION	0.9843702062830282	WITHOUT_CLASSIFICATION	0.015629793716971756	DESIGN
//for non null args, check for components and elements containing components	WITHOUT_CLASSIFICATION	0.9985212069825485	WITHOUT_CLASSIFICATION	0.0014787930174514233	DESIGN
//cache the hashcode	WITHOUT_CLASSIFICATION	0.9980877051203293	WITHOUT_CLASSIFICATION	0.0019122948796707578	DESIGN
//persistent collections may have components	WITHOUT_CLASSIFICATION	0.9980368779405854	WITHOUT_CLASSIFICATION	0.001963122059414614	DESIGN
//check for all components values in the collection	WITHOUT_CLASSIFICATION	0.9985434186017875	WITHOUT_CLASSIFICATION	0.0014565813982125011	DESIGN
/* will check current level if some of them are not null	WITHOUT_CLASSIFICATION	0.9697860872818038	WITHOUT_CLASSIFICATION	0.03021391271819618	DESIGN
//do the test	WITHOUT_CLASSIFICATION	0.9998407886399594	WITHOUT_CLASSIFICATION	1.5921136004061107E-4	DESIGN
// if its an uninitialized proxy it can't be transient	WITHOUT_CLASSIFICATION	0.9999256148742859	WITHOUT_CLASSIFICATION	7.438512571405467E-5	DESIGN
//unwrap it	WITHOUT_CLASSIFICATION	0.9969642572587502	WITHOUT_CLASSIFICATION	0.0030357427412497757	DESIGN
// See if the entity is already bound to this session, if not look at the // entity identifier and assume that the entity is persistent if the // id is not "unsaved" (that is, we rely on foreign keys to keep // database integrity)	WITHOUT_CLASSIFICATION	0.9728230057477222	WITHOUT_CLASSIFICATION	0.027176994252277775	DESIGN
// an unfetched association can only point to // an entity that already exists in the db	WITHOUT_CLASSIFICATION	0.9999030036625904	WITHOUT_CLASSIFICATION	9.699633740960043E-5	DESIGN
// let the interceptor inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9915681873750939	WITHOUT_CLASSIFICATION	0.008431812624906049	DESIGN
// let the persister inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9815136956618781	WITHOUT_CLASSIFICATION	0.018486304338121963	DESIGN
// we use the assumed value, if there is one, to avoid hitting // the database	WITHOUT_CLASSIFICATION	0.9999212398747495	WITHOUT_CLASSIFICATION	7.876012525057789E-5	DESIGN
// hit the database, after checking the session cache for a snapshot	WITHOUT_CLASSIFICATION	0.9914649347507326	WITHOUT_CLASSIFICATION	0.008535065249267372	DESIGN
// context-entity-identifier returns null explicitly if the entity // is not associated with the persistence context; so make some // deeper checks...	WITHOUT_CLASSIFICATION	0.9921641553324672	WITHOUT_CLASSIFICATION	0.00783584466753289	DESIGN
//int count = 0;	WITHOUT_CLASSIFICATION	0.999191465195251	WITHOUT_CLASSIFICATION	8.085348047489886E-4	DESIGN
//the first key found after the given key	WITHOUT_CLASSIFICATION	0.9999413354352777	WITHOUT_CLASSIFICATION	5.8664564722306704E-5	DESIGN
//checkForEnd = false;	WITHOUT_CLASSIFICATION	0.999037325291057	WITHOUT_CLASSIFICATION	9.62674708942924E-4	DESIGN
//count++;	WITHOUT_CLASSIFICATION	0.9993169148631355	WITHOUT_CLASSIFICATION	6.830851368645701E-4	DESIGN
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9997212334776426	WITHOUT_CLASSIFICATION	2.7876652235740446E-4	DESIGN
//we ran out of keys to try	WITHOUT_CLASSIFICATION	0.9992598438257271	WITHOUT_CLASSIFICATION	7.401561742729108E-4	DESIGN
//first element of array is reserved for the actual instance we are loading!	WITHOUT_CLASSIFICATION	0.9871796717171577	WITHOUT_CLASSIFICATION	0.012820328282842219	DESIGN
//the first id found after the given id	WITHOUT_CLASSIFICATION	0.9998545826260102	WITHOUT_CLASSIFICATION	1.4541737398979557E-4	DESIGN
//we ran out of ids to try	WITHOUT_CLASSIFICATION	0.999846206887308	WITHOUT_CLASSIFICATION	1.537931126920196E-4	DESIGN
// look for existing collection as part of the persistence context	WITHOUT_CLASSIFICATION	0.9996206724733258	WITHOUT_CLASSIFICATION	3.793275266742291E-4	DESIGN
// ignore this row of results! Note the early exit	WITHOUT_CLASSIFICATION	0.9997256952171727	WITHOUT_CLASSIFICATION	2.743047828272815E-4	DESIGN
// initialize this collection	WITHOUT_CLASSIFICATION	0.9894365383850681	WITHOUT_CLASSIFICATION	0.010563461614931876	DESIGN
// create one	WITHOUT_CLASSIFICATION	0.9993191810042635	WITHOUT_CLASSIFICATION	6.808189957363931E-4	DESIGN
// warning: can cause a recursive calls! (proxy initialization)	WITHOUT_CLASSIFICATION	0.9945529832449393	WITHOUT_CLASSIFICATION	0.005447016755060704	DESIGN
// there were no queued additions // and the role has a cache	WITHOUT_CLASSIFICATION	0.9998354254697904	WITHOUT_CLASSIFICATION	1.6457453020962714E-4	DESIGN
// and this is not a forced initialization during flush	WITHOUT_CLASSIFICATION	0.9947167413176492	WITHOUT_CLASSIFICATION	0.005283258682350716	DESIGN
// some filters affecting the collection are enabled on the session, so do not do the put into the cache.	WITHOUT_CLASSIFICATION	0.9954184168735627	WITHOUT_CLASSIFICATION	0.004581583126437222	DESIGN
// cleanup code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9988714750937329	WITHOUT_CLASSIFICATION	0.0011285249062671031	DESIGN
// loading collection xrefs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993743051343457	WITHOUT_CLASSIFICATION	6.2569486565425E-4	DESIGN
// Collection load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999358350448523	WITHOUT_CLASSIFICATION	6.41649551477062E-4	DESIGN
// simple cache of param metadata based on query string.  Ideally, the // original "user-supplied query" string should be used to retreive this // metadata (i.e., not the para-list-expanded query string) to avoid // unnecessary cache entries. // Used solely for caching param metadata for native-sql queries, see // getSQLParameterMetadata() for a discussion as to why...	WITHOUT_CLASSIFICATION	0.8923254420620771	WITHOUT_CLASSIFICATION	0.10767455793792285	DESIGN
// the cache of the actual plans...	WITHOUT_CLASSIFICATION	0.9997137463839982	WITHOUT_CLASSIFICATION	2.862536160018637E-4	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.9967688892480616	WITHOUT_CLASSIFICATION	0.003231110751938361	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.9967688892480616	WITHOUT_CLASSIFICATION	0.003231110751938361	DESIGN
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999840745290619	WITHOUT_CLASSIFICATION	1.592547093811125E-5	DESIGN
// for native-sql queries, the param metadata is determined outside // any relation to a query plan, because query plan creation and/or // retreival for a native-sql query depends on all of the return // types having been set, which might not be the case up-front when // param metadata would be most useful	WITHOUT_CLASSIFICATION	0.9074382395511699	WITHOUT_CLASSIFICATION	0.09256176044883009	DESIGN
// don't care...	WITHOUT_CLASSIFICATION	0.9987954868567143	WITHOUT_CLASSIFICATION	0.001204513143285676	DESIGN
// Recognition code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.997907605750116	WITHOUT_CLASSIFICATION	0.0020923942498841477	DESIGN
// don't care...	WITHOUT_CLASSIFICATION	0.9987954868567143	WITHOUT_CLASSIFICATION	0.001204513143285676	DESIGN
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9995428956050215	WITHOUT_CLASSIFICATION	4.5710439497852575E-4	DESIGN
// break the outer loop !!!	WITHOUT_CLASSIFICATION	0.9999340657293153	WITHOUT_CLASSIFICATION	6.59342706846296E-5	DESIGN
// named parameter	WITHOUT_CLASSIFICATION	0.9986586044654225	WITHOUT_CLASSIFICATION	0.0013413955345775266	DESIGN
// could be either an ordinal or JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9946588596372979	WITHOUT_CLASSIFICATION	0.005341140362702084	DESIGN
// a peek ahead showed this as an JPA-positional parameter	WITHOUT_CLASSIFICATION	0.996954857158203	WITHOUT_CLASSIFICATION	0.0030451428417969766	DESIGN
// make sure this "name" is an integral	WITHOUT_CLASSIFICATION	0.9987347374003614	WITHOUT_CLASSIFICATION	0.0012652625996385795	DESIGN
// pre-determine and cache the hashcode	WITHOUT_CLASSIFICATION	0.9994160850244811	WITHOUT_CLASSIFICATION	5.839149755189585E-4	DESIGN
// perform the actual work	WITHOUT_CLASSIFICATION	0.9997490263823069	WITHOUT_CLASSIFICATION	2.509736176931365E-4	DESIGN
// if everything went ok, commit the transaction and close the obtained // connection handle...	WITHOUT_CLASSIFICATION	0.9999792233247858	WITHOUT_CLASSIFICATION	2.0776675214194516E-5	DESIGN
// at some point the processing went bad, so we need to: //      1) make sure the connection handle gets released //      2) try to cleanup the JTA context as much as possible	WITHOUT_CLASSIFICATION	0.9902753137420125	WITHOUT_CLASSIFICATION	0.009724686257987494	DESIGN
// finally handle the exception	WITHOUT_CLASSIFICATION	0.9969273314889119	WITHOUT_CLASSIFICATION	0.0030726685110882175	DESIGN
// a "detached" collection that belonged to a different entity	WITHOUT_CLASSIFICATION	0.9699059456262304	WITHOUT_CLASSIFICATION	0.030094054373769545	DESIGN
//saveOrUpdateCopy() is deprecated!	WITHOUT_CLASSIFICATION	0.9982255211086172	WITHOUT_CLASSIFICATION	0.0017744788913828732	DESIGN
// collectionPersister should not be null, but we don't want to throw // an exception if it is null	WITHOUT_CLASSIFICATION	0.8038132852535513	WITHOUT_CLASSIFICATION	0.19618671474644855	DESIGN
// otherwise a null or brand new collection // this will also (inefficiently) handle arrays, which // have no snapshot, so we can't do any better //processArrayOrNewCollection(collection, type);	WITHOUT_CLASSIFICATION	0.7070250848645131	WITHOUT_CLASSIFICATION	0.2929749151354869	DESIGN
// a "detached" collection that originally belonged to the same entity	WITHOUT_CLASSIFICATION	0.9908211751541385	WITHOUT_CLASSIFICATION	0.009178824845861624	DESIGN
//do nothing	WITHOUT_CLASSIFICATION	0.9994412160764644	WITHOUT_CLASSIFICATION	5.587839235356754E-4	DESIGN
//do nothing	WITHOUT_CLASSIFICATION	0.9994412160764644	WITHOUT_CLASSIFICATION	5.587839235356754E-4	DESIGN
//Force a substitution!	WITHOUT_CLASSIFICATION	0.9960999534160511	WITHOUT_CLASSIFICATION	0.003900046583948881	DESIGN
// The user requested a "greater" (i.e. more restrictive) form of // pessimistic lock	WITHOUT_CLASSIFICATION	0.9984488374255696	WITHOUT_CLASSIFICATION	0.001551162574430384	DESIGN
// the database now holds a lock + the object is flushed from the cache, // so release the soft lock	WITHOUT_CLASSIFICATION	0.9996879553294157	WITHOUT_CLASSIFICATION	3.1204467058429955E-4	DESIGN
// now update the object .. has to be outside the main if block above (because of collections)	WITHOUT_CLASSIFICATION	0.9999791263262484	WITHOUT_CLASSIFICATION	2.0873673751626798E-5	DESIGN
// Search for collections by reachability, updating their role. // We don't want to touch collections reachable from a deleted object	WITHOUT_CLASSIFICATION	0.9991424780802832	WITHOUT_CLASSIFICATION	8.575219197168908E-4	DESIGN
// this is a situation where the entity id is assigned by a post-insert generator // and was saved outside the transaction forcing it to be delayed	WITHOUT_CLASSIFICATION	0.992749915162138	WITHOUT_CLASSIFICATION	0.0072500848378620605	DESIGN
// NOTE: we need to do the wrap here even if its not "dirty", // because collections need wrapping but changes to _them_ // don't dirty the container. Also, for versioned data, we // need to wrap before calling searchForDirtyCollections	WITHOUT_CLASSIFICATION	0.8187224881943761	WITHOUT_CLASSIFICATION	0.181277511805624	DESIGN
//grab its state saved at deletion	WITHOUT_CLASSIFICATION	0.990770144879042	WITHOUT_CLASSIFICATION	0.009229855120958056	DESIGN
// grab its current state	WITHOUT_CLASSIFICATION	0.9999041131206193	WITHOUT_CLASSIFICATION	9.58868793807531E-5	DESIGN
// schedule the update // note that we intentionally do _not_ pass in currentPersistentState!	WITHOUT_CLASSIFICATION	0.9995487726298519	WITHOUT_CLASSIFICATION	4.5122737014810494E-4	DESIGN
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9998498433550768	WITHOUT_CLASSIFICATION	1.5015664492317953E-4	DESIGN
// give the Interceptor a chance to process property values, if the properties // were modified by the Interceptor, we need to set them back to the object	WITHOUT_CLASSIFICATION	0.9999061929057363	WITHOUT_CLASSIFICATION	9.380709426365505E-5	DESIGN
// compare to cached state (ignoring collections unless versioned)	WITHOUT_CLASSIFICATION	0.9994215481352984	WITHOUT_CLASSIFICATION	5.784518647015642E-4	DESIGN
// if it was dirtied by a collection only	WITHOUT_CLASSIFICATION	0.9997371981497079	WITHOUT_CLASSIFICATION	2.628018502921471E-4	DESIGN
// increment the version number (if necessary)	WITHOUT_CLASSIFICATION	0.9999203879494515	WITHOUT_CLASSIFICATION	7.961205054856145E-5	DESIGN
// check nullability but do not perform command execute // we'll use scheduled updates for that.	WITHOUT_CLASSIFICATION	0.997402499634291	WITHOUT_CLASSIFICATION	0.0025975003657090928	DESIGN
//give the Interceptor a chance to modify property values	WITHOUT_CLASSIFICATION	0.9925844870380267	WITHOUT_CLASSIFICATION	0.007415512961973393	DESIGN
//now we might need to recalculate the dirtyProperties array	WITHOUT_CLASSIFICATION	0.9495746569112664	WITHOUT_CLASSIFICATION	0.05042534308873359	DESIGN
//use the current version	WITHOUT_CLASSIFICATION	0.9998501090387336	WITHOUT_CLASSIFICATION	1.4989096126646933E-4	DESIGN
// Interceptor returned null, so do the dirtycheck ourself, if possible	WITHOUT_CLASSIFICATION	0.9999054415381097	WITHOUT_CLASSIFICATION	9.455846189024807E-5	DESIGN
// object loaded by update()	WITHOUT_CLASSIFICATION	0.999906059027667	WITHOUT_CLASSIFICATION	9.394097233302335E-5	DESIGN
// dirty check against the usual snapshot of the entity	WITHOUT_CLASSIFICATION	0.9999767549940288	WITHOUT_CLASSIFICATION	2.3245005971211124E-5	DESIGN
// dirty check against the database snapshot, if possible/necessary	WITHOUT_CLASSIFICATION	0.9999872756965307	WITHOUT_CLASSIFICATION	1.2724303469226508E-5	DESIGN
// the Interceptor handled the dirty checking	WITHOUT_CLASSIFICATION	0.9980051670918745	WITHOUT_CLASSIFICATION	0.0019948329081254834	DESIGN
//even process null collections	WITHOUT_CLASSIFICATION	0.998844503921839	WITHOUT_CLASSIFICATION	0.0011554960781609816	DESIGN
// get the id from the object	WITHOUT_CLASSIFICATION	0.9994561238037879	WITHOUT_CLASSIFICATION	5.438761962120734E-4	DESIGN
//always do an INSERT, and let it fail by constraint violation	WITHOUT_CLASSIFICATION	0.9996385577054211	WITHOUT_CLASSIFICATION	3.6144229457901457E-4	DESIGN
//what is the version on the database?	WITHOUT_CLASSIFICATION	0.9993502277414309	WITHOUT_CLASSIFICATION	6.497722585691218E-4	DESIGN
/// HHH-2378	WITHOUT_CLASSIFICATION	0.9968723582723205	WITHOUT_CLASSIFICATION	0.0031276417276795703	DESIGN
//will result in a SQL UPDATE:	WITHOUT_CLASSIFICATION	0.9994707021105954	WITHOUT_CLASSIFICATION	5.292978894045694E-4	DESIGN
//else do nothing (don't even reassociate object!)	WITHOUT_CLASSIFICATION	0.9995071406641828	WITHOUT_CLASSIFICATION	4.928593358172254E-4	DESIGN
// no existing row - do an insert	WITHOUT_CLASSIFICATION	0.9996252468940562	WITHOUT_CLASSIFICATION	3.7475310594373655E-4	DESIGN
//refresh() does not pass an entityName	WITHOUT_CLASSIFICATION	0.9978427072589576	WITHOUT_CLASSIFICATION	0.002157292741042426	DESIGN
//do not return a proxy! //(this option indicates we are initializing a proxy)	WITHOUT_CLASSIFICATION	0.9969187832943448	WITHOUT_CLASSIFICATION	0.0030812167056552776	DESIGN
//return a proxy if appropriate	WITHOUT_CLASSIFICATION	0.9984960017437484	WITHOUT_CLASSIFICATION	0.0015039982562515836	DESIGN
// return existing object or initialized proxy (unless deleted)	WITHOUT_CLASSIFICATION	0.9999289619351704	WITHOUT_CLASSIFICATION	7.103806482959984E-5	DESIGN
// return new uninitialized proxy	WITHOUT_CLASSIFICATION	0.9998766112656692	WITHOUT_CLASSIFICATION	1.233887343307893E-4	DESIGN
// this object was already loaded	WITHOUT_CLASSIFICATION	0.9989725436843289	WITHOUT_CLASSIFICATION	0.001027456315671125	DESIGN
// Entity was found in second-level cache...	WITHOUT_CLASSIFICATION	0.999782640559026	WITHOUT_CLASSIFICATION	2.1735944097396847E-4	DESIGN
// make it circular-reference safe	WITHOUT_CLASSIFICATION	0.9995116316342899	WITHOUT_CLASSIFICATION	4.883683657100856E-4	DESIGN
// intializes result by side-effect	WITHOUT_CLASSIFICATION	0.9999440485215068	WITHOUT_CLASSIFICATION	5.5951478493350594E-5	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Pre-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992273180983543	WITHOUT_CLASSIFICATION	7.726819016456416E-4	DESIGN
//some statistics	WITHOUT_CLASSIFICATION	0.9975573561179304	WITHOUT_CLASSIFICATION	0.0024426438820695645	DESIGN
//safe from concurrent modification because of how entryList() is implemented on IdentityMap	WITHOUT_CLASSIFICATION	0.9993799887519739	WITHOUT_CLASSIFICATION	6.200112480261574E-4	DESIGN
// Initialize dirty flags for arrays + collections with composite elements // and reset reached, doupdate, etc.	WITHOUT_CLASSIFICATION	0.9999571550197683	WITHOUT_CLASSIFICATION	4.2844980231629114E-5	DESIGN
// Among other things, updateReachables() will recursively load all // collections that are moving roles. This might cause entities to // be loaded.	WITHOUT_CLASSIFICATION	0.9737765103623441	WITHOUT_CLASSIFICATION	0.026223489637655868	DESIGN
// So this needs to be safe from concurrent modification problems. // It is safe because of how IdentityMap implements entrySet()	WITHOUT_CLASSIFICATION	0.9852175551415822	WITHOUT_CLASSIFICATION	0.014782444858417862	DESIGN
// Update the status of the object and if necessary, schedule an update	WITHOUT_CLASSIFICATION	0.9999968783663563	WITHOUT_CLASSIFICATION	3.1216336436059967E-6	DESIGN
// Schedule updates to collections:	WITHOUT_CLASSIFICATION	0.9995606452685064	WITHOUT_CLASSIFICATION	4.393547314936023E-4	DESIGN
// we need to lock the collection caches before // executing entity inserts/updates in order to // account for bidi associations	WITHOUT_CLASSIFICATION	0.9489318875080014	WITHOUT_CLASSIFICATION	0.05106811249199861	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Post-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992273180983543	WITHOUT_CLASSIFICATION	7.726819016456416E-4	DESIGN
//the database has changed now, so the subselect results need to be invalidated	WITHOUT_CLASSIFICATION	0.9983160793661845	WITHOUT_CLASSIFICATION	0.0016839206338154647	DESIGN
//if the collection is dereferenced, remove from the session cache //iter.remove(); //does not work, since the entrySet is not backed by the set	WITHOUT_CLASSIFICATION	0.971042869954624	WITHOUT_CLASSIFICATION	0.028957130045376044	DESIGN
//otherwise recreate the mapping between the collection and its key	WITHOUT_CLASSIFICATION	0.9974836250705567	WITHOUT_CLASSIFICATION	0.0025163749294433474	DESIGN
//get a snapshot	WITHOUT_CLASSIFICATION	0.9952592334066136	WITHOUT_CLASSIFICATION	0.0047407665933863604	DESIGN
/* package-private */	WITHOUT_CLASSIFICATION	0.9998218864478172	WITHOUT_CLASSIFICATION	1.7811355218283102E-4	DESIGN
/* package-private */	WITHOUT_CLASSIFICATION	0.9998218864478172	WITHOUT_CLASSIFICATION	1.7811355218283102E-4	DESIGN
// key is an entity involved with the operation performed by the listener; // value is a flag indicating if the listener explicitly operates on the entity	WITHOUT_CLASSIFICATION	0.9999955608351472	WITHOUT_CLASSIFICATION	4.439164852784216E-6	DESIGN
// EARLY EXIT!!!	WITHOUT_CLASSIFICATION	0.9991103531722325	WITHOUT_CLASSIFICATION	8.896468277674399E-4	DESIGN
//ie. the entity came in from update()	WITHOUT_CLASSIFICATION	0.9982934862755918	WITHOUT_CLASSIFICATION	0.0017065137244082662	DESIGN
// before any callbacks, etc, so subdeletions see that this deletion happened first	WITHOUT_CLASSIFICATION	0.9995059339156316	WITHOUT_CLASSIFICATION	4.940660843684079E-4	DESIGN
// Ensures that containing deletions happen before sub-deletions	WITHOUT_CLASSIFICATION	0.9998737060670541	WITHOUT_CLASSIFICATION	1.2629393294599024E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998122686237135	WITHOUT_CLASSIFICATION	1.87731376286521E-4	DESIGN
// cascade-delete to collections BEFORE the collection owner is deleted	WITHOUT_CLASSIFICATION	0.9989006530567129	WITHOUT_CLASSIFICATION	0.0010993469432871612	DESIGN
// cascade-delete to many-to-one AFTER the parent was deleted	WITHOUT_CLASSIFICATION	0.9997549431607347	WITHOUT_CLASSIFICATION	2.4505683926529556E-4	DESIGN
// if it is an initialized proxy, let cascade // handle it later on	WITHOUT_CLASSIFICATION	0.9949241579995665	WITHOUT_CLASSIFICATION	0.005075842000433596	DESIGN
//assign the requested id to the proxy, *before* //reassociating the proxy	WITHOUT_CLASSIFICATION	0.9998653621977058	WITHOUT_CLASSIFICATION	1.3463780229417316E-4	DESIGN
// an uninitialized proxy, noop, don't even need to // return an id, since it is never a save()	WITHOUT_CLASSIFICATION	0.9996293819768138	WITHOUT_CLASSIFICATION	3.7061802318616904E-4	DESIGN
//initialize properties of the event:	WITHOUT_CLASSIFICATION	0.9994701990121487	WITHOUT_CLASSIFICATION	5.298009878511982E-4	DESIGN
//return the id in the event object	WITHOUT_CLASSIFICATION	0.9991200573805327	WITHOUT_CLASSIFICATION	8.799426194672928E-4	DESIGN
//TRANSIENT or DELETED	WITHOUT_CLASSIFICATION	0.9989052998485387	WITHOUT_CLASSIFICATION	0.0010947001514613414	DESIGN
// use the id assigned to the instance	WITHOUT_CLASSIFICATION	0.9963024156841087	WITHOUT_CLASSIFICATION	0.003697584315891198	DESIGN
// assume this is a newly instantiated transient object // which should be saved rather than updated	WITHOUT_CLASSIFICATION	0.5217472753948905	WITHOUT_CLASSIFICATION	0.4782527246051095	DESIGN
// this is a transient object with existing persistent state not loaded by the session	WITHOUT_CLASSIFICATION	0.991643180361079	WITHOUT_CLASSIFICATION	0.008356819638921088	DESIGN
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9950529629138727	WITHOUT_CLASSIFICATION	0.00494703708612728	DESIGN
//cachedState,	WITHOUT_CLASSIFICATION	0.9967688892480616	WITHOUT_CLASSIFICATION	0.003231110751938361	DESIGN
//assume true, since we don't really know, and it doesn't matter	WITHOUT_CLASSIFICATION	0.9939273664530583	WITHOUT_CLASSIFICATION	0.006072633546941753	DESIGN
//a "detached" collection!	WITHOUT_CLASSIFICATION	0.9982395680181445	WITHOUT_CLASSIFICATION	0.00176043198185549	DESIGN
// if the collection belonged to a different entity, // clean up the existing state of the collection	WITHOUT_CLASSIFICATION	0.9957890285842947	WITHOUT_CLASSIFICATION	0.004210971415705261	DESIGN
//log.debug( "calling onLoad()" );	WITHOUT_CLASSIFICATION	0.9978884343036607	WITHOUT_CLASSIFICATION	0.0021115656963392924	DESIGN
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9967688892480616	WITHOUT_CLASSIFICATION	0.003231110751938361	DESIGN
// note: performExecutions() clears all collectionXxxxtion  // collections (the collection actions) in the session	WITHOUT_CLASSIFICATION	0.9969326597078584	WITHOUT_CLASSIFICATION	0.0030673402921415254	DESIGN
// if no array holder we found an unwrappered array (this can't occur, // because we now always call wrap() before getting to here) // return (ah==null) ? true : searchForDirtyCollections(ah, type);	WITHOUT_CLASSIFICATION	0.9999084825256369	WITHOUT_CLASSIFICATION	9.151747436318794E-5	DESIGN
// if not wrappered yet, its dirty (this can't occur, because // we now always call wrap() before getting to here) // return ( ! (obj instanceof PersistentCollection) ) ? //true : searchForDirtyCollections( (PersistentCollection) obj, type );	WITHOUT_CLASSIFICATION	0.9632621293370155	WITHOUT_CLASSIFICATION	0.03673787066298452	DESIGN
//we need to check even if it was not initialized, because of delayed adds!	WITHOUT_CLASSIFICATION	0.9996619921259016	WITHOUT_CLASSIFICATION	3.380078740983502E-4	DESIGN
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9967688892480616	WITHOUT_CLASSIFICATION	0.003231110751938361	DESIGN
// find any entities that are still transient after retry	WITHOUT_CLASSIFICATION	0.994146556148345	WITHOUT_CLASSIFICATION	0.005853443851655041	DESIGN
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9967688892480616	WITHOUT_CLASSIFICATION	0.003231110751938361	DESIGN
// Check the persistence context for an entry relating to this // entity to be merged...	WITHOUT_CLASSIFICATION	0.9935954696503753	WITHOUT_CLASSIFICATION	0.006404530349624807	DESIGN
// we have specialized case of a detached entity from the // perspective of the merge operation.  Specifically, we // have an incoming entity instance which has a corresponding // entry in the current persistence context, but registered // under a different entity instance	WITHOUT_CLASSIFICATION	0.999972477461443	WITHOUT_CLASSIFICATION	2.7522538557071723E-5	DESIGN
//DELETED	WITHOUT_CLASSIFICATION	0.9993169148631355	WITHOUT_CLASSIFICATION	6.830851368645701E-4	DESIGN
//before cascade!	WITHOUT_CLASSIFICATION	0.9967688892480616	WITHOUT_CLASSIFICATION	0.003231110751938361	DESIGN
// cascade first, so that all unsaved objects get their // copy created before we actually copy //cascadeOnMerge(event, persister, entity, copyCache, Cascades.CASCADE_BEFORE_MERGE);	WITHOUT_CLASSIFICATION	0.9999086411366107	WITHOUT_CLASSIFICATION	9.13588633892806E-5	DESIGN
//this bit is only *really* absolutely necessary for handling //requestedId, but is also good if we merge multiple object //graphs, since it helps ensure uniqueness	WITHOUT_CLASSIFICATION	0.521228386983854	DESIGN	0.478771613016146	WITHOUT_CLASSIFICATION
// continue...; we'll find out if it ends up not getting saved later	WITHOUT_CLASSIFICATION	0.7870310629334533	WITHOUT_CLASSIFICATION	0.21296893706654674	DESIGN
// cascade first, so that all unsaved objects get their // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999086411366107	WITHOUT_CLASSIFICATION	9.13588633892806E-5	DESIGN
// check that entity id = requestedId	WITHOUT_CLASSIFICATION	0.9999243174443135	WITHOUT_CLASSIFICATION	7.568255568645697E-5	DESIGN
//before cascade!	WITHOUT_CLASSIFICATION	0.9967688892480616	WITHOUT_CLASSIFICATION	0.003231110751938361	DESIGN
// we got here because we assumed that an instance // with an assigned id was detached, when it was // really persistent	WITHOUT_CLASSIFICATION	0.9996632126037684	WITHOUT_CLASSIFICATION	3.3678739623154677E-4	DESIGN
// cascade first, so that all unsaved objects get their  // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999085859007015	WITHOUT_CLASSIFICATION	9.141409929851055E-5	DESIGN
//copyValues works by reflection, so explicitly mark the entity instance dirty	WITHOUT_CLASSIFICATION	0.9974570155909498	WITHOUT_CLASSIFICATION	0.0025429844090501734	DESIGN
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.9967688892480616	WITHOUT_CLASSIFICATION	0.003231110751938361	DESIGN
//source.getBatcher().executeBatch(); //found another way to ensure that all batched joined inserts have been executed	WITHOUT_CLASSIFICATION	0.9919930552756812	WITHOUT_CLASSIFICATION	0.008006944724318751	DESIGN
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9998498433550768	WITHOUT_CLASSIFICATION	1.5015664492317953E-4	DESIGN
//now done in EntityIdentityInsertAction //persister.setIdentifier( entity, id, source.getEntityMode() );	WITHOUT_CLASSIFICATION	0.9926316921468081	WITHOUT_CLASSIFICATION	0.007368307853191808	DESIGN
//source.getPersistenceContext().removeNonExist( new EntityKey( id, persister, source.getEntityMode() ) );	WITHOUT_CLASSIFICATION	0.9968370520590765	WITHOUT_CLASSIFICATION	0.003162947940923482	DESIGN
//keep the existing version number in the case of replicate!	WITHOUT_CLASSIFICATION	0.9999719795386347	WITHOUT_CLASSIFICATION	2.8020461365281428E-5	DESIGN
// cascade-save to many-to-one BEFORE the parent is saved	WITHOUT_CLASSIFICATION	0.9988048267148105	WITHOUT_CLASSIFICATION	0.0011951732851894518	DESIGN
//pass this as an argument only to avoid double looking	WITHOUT_CLASSIFICATION	0.9999896887748245	WITHOUT_CLASSIFICATION	1.0311225175492407E-5	DESIGN
// the object is persistent	WITHOUT_CLASSIFICATION	0.999670881429269	WITHOUT_CLASSIFICATION	3.2911857073105724E-4	DESIGN
//the entity is associated with the session, so check its status	WITHOUT_CLASSIFICATION	0.9999154572499169	WITHOUT_CLASSIFICATION	8.454275008301033E-5	DESIGN
// do nothing for persistent instances	WITHOUT_CLASSIFICATION	0.9998758639737607	WITHOUT_CLASSIFICATION	1.2413602623929557E-4	DESIGN
//ie. e.status==DELETED	WITHOUT_CLASSIFICATION	0.9982338249437797	WITHOUT_CLASSIFICATION	0.0017661750562203082	DESIGN
// the object is transient or detached	WITHOUT_CLASSIFICATION	0.9997519341397728	WITHOUT_CLASSIFICATION	2.4806586022725646E-4	DESIGN
//NOTE EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9967688892480616	WITHOUT_CLASSIFICATION	0.003231110751938361	DESIGN
// Private constructor - stops checkstyle from complaining.	WITHOUT_CLASSIFICATION	0.9993632411114828	WITHOUT_CLASSIFICATION	6.367588885171978E-4	DESIGN
// First, try to find a matching constructor accepting a ViolatedConstraintNameExtracter param...	WITHOUT_CLASSIFICATION	0.9995956209139382	WITHOUT_CLASSIFICATION	4.043790860617963E-4	DESIGN
// eat it and try next	WITHOUT_CLASSIFICATION	0.9992587248274485	WITHOUT_CLASSIFICATION	7.412751725515389E-4	DESIGN
// Otherwise, try to use the no-arg constructor	WITHOUT_CLASSIFICATION	0.9999707709196777	WITHOUT_CLASSIFICATION	2.9229080322237157E-5	DESIGN
// oracle sql-state code for deadlock	WITHOUT_CLASSIFICATION	0.998820547736427	WITHOUT_CLASSIFICATION	0.001179452263573006	DESIGN
// CollectionPropertyMapping processes everything except 'index'.	WITHOUT_CLASSIFICATION	0.9983761936068204	WITHOUT_CLASSIFICATION	0.0016238063931796208	DESIGN
// remove initial ", "	WITHOUT_CLASSIFICATION	0.9996272552980273	WITHOUT_CLASSIFICATION	3.727447019727755E-4	DESIGN
// remove initial " and "	WITHOUT_CLASSIFICATION	0.9996223857414336	WITHOUT_CLASSIFICATION	3.776142585664004E-4	DESIGN
//beforeClassTokens.add("new"); DEFINITELY DON'T HAVE THIS!!	WITHOUT_CLASSIFICATION	0.9978506171800194	WITHOUT_CLASSIFICATION	0.002149382819980599	DESIGN
//notAfterClassTokens.add(",");	WITHOUT_CLASSIFICATION	0.9978506171800194	WITHOUT_CLASSIFICATION	0.002149382819980599	DESIGN
// just especially for the trivial collection filter	WITHOUT_CLASSIFICATION	0.9987737888153931	WITHOUT_CLASSIFICATION	0.0012262111846067865	DESIGN
//update last non-whitespace token, if necessary	WITHOUT_CLASSIFICATION	0.9909857642437618	WITHOUT_CLASSIFICATION	0.009014235756238087	DESIGN
// select-range is terminated by declaration of "from"	WITHOUT_CLASSIFICATION	0.9999552639170666	WITHOUT_CLASSIFICATION	4.4736082933462506E-5	DESIGN
//scan for next non-whitespace token	WITHOUT_CLASSIFICATION	0.9972388148891871	WITHOUT_CLASSIFICATION	0.0027611851108128725	DESIGN
// Note this!!	WITHOUT_CLASSIFICATION	0.9995406174384924	WITHOUT_CLASSIFICATION	4.59382561507577E-4	DESIGN
// Error message constants.	WITHOUT_CLASSIFICATION	0.9992788478814253	WITHOUT_CLASSIFICATION	7.211521185746225E-4	DESIGN
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9986167124658597	WITHOUT_CLASSIFICATION	0.0013832875341402344	DESIGN
// semantic action handling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9978007562729764	WITHOUT_CLASSIFICATION	0.0021992437270235876	DESIGN
// Handle collection-fiter compilation. // IMPORTANT NOTE: This is modifying the INPUT (HQL) tree, not the output tree!	WITHOUT_CLASSIFICATION	0.9895935589209469	WITHOUT_CLASSIFICATION	0.010406441079053098	DESIGN
// Show the modified AST.	WITHOUT_CLASSIFICATION	0.9999664340664629	WITHOUT_CLASSIFICATION	3.3565933537156576E-5	DESIGN
// Create a parameter specification for the collection filter...	WITHOUT_CLASSIFICATION	0.9913373288488437	WITHOUT_CLASSIFICATION	0.008662671151156189	DESIGN
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9994976044505545	WITHOUT_CLASSIFICATION	5.023955494456101E-4	DESIGN
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9994976044505545	WITHOUT_CLASSIFICATION	5.023955494456101E-4	DESIGN
// Get the names of the columns used to link between the collection // owner and the collection elements.	WITHOUT_CLASSIFICATION	0.9848764259388431	WITHOUT_CLASSIFICATION	0.015123574061156818	DESIGN
// The path AST should be a DotNode, and it should have been evaluated already.	WITHOUT_CLASSIFICATION	0.9978210650603802	WITHOUT_CLASSIFICATION	0.002178934939619852	DESIGN
// Tell the dot node about the join type.	WITHOUT_CLASSIFICATION	0.9998074192511475	WITHOUT_CLASSIFICATION	1.925807488524371E-4	DESIGN
// Re-arrange the tree so that the collection function is the root and the lhs is the path.	WITHOUT_CLASSIFICATION	0.9998216175914562	WITHOUT_CLASSIFICATION	1.78382408543902E-4	DESIGN
// Don't forget to resolve the argument! // Resolve the collection function now.	WITHOUT_CLASSIFICATION	0.9996043349969032	WITHOUT_CLASSIFICATION	3.9566500309688295E-4	DESIGN
// Resolve everything up to this dot, but don't resolve the placeholders yet.	WITHOUT_CLASSIFICATION	0.9984532956815723	WITHOUT_CLASSIFICATION	0.0015467043184277203	DESIGN
// Should mean that no such property was found	WITHOUT_CLASSIFICATION	0.9985808547817994	WITHOUT_CLASSIFICATION	0.0014191452182006987	DESIGN
// Was there an explicit select expression?	WITHOUT_CLASSIFICATION	0.9998820804853714	WITHOUT_CLASSIFICATION	1.1791951462866344E-4	DESIGN
// Attach any mapping-defined "ORDER BY" fragments	WITHOUT_CLASSIFICATION	0.9993863633189403	WITHOUT_CLASSIFICATION	6.13636681059693E-4	DESIGN
// Use the explicitly declared select expression; determine the // return types indicated by each select token	WITHOUT_CLASSIFICATION	0.9999320868072195	WITHOUT_CLASSIFICATION	6.791319278054531E-5	DESIGN
// After that, process the JOINs. // Invoke a delegate to do the work, as this is farily complex.	WITHOUT_CLASSIFICATION	0.9996577168801374	WITHOUT_CLASSIFICATION	3.4228311986254E-4	DESIGN
// Make #@%$^#^&# sure no alias is applied to the table name	WITHOUT_CLASSIFICATION	0.9999344896798275	WITHOUT_CLASSIFICATION	6.551032017263291E-5	DESIGN
// We need to generate ids as part of this bulk insert. // // Note that this is only supported for sequence-style generators and // post-insert-style generators; basically, only in-db generators	WITHOUT_CLASSIFICATION	0.9999055250249425	WITHOUT_CLASSIFICATION	9.447497505748089E-5	DESIGN
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9994976044505545	WITHOUT_CLASSIFICATION	5.023955494456101E-4	DESIGN
// We need to seed the version value as part of this bulk insert	WITHOUT_CLASSIFICATION	0.9997816760122655	WITHOUT_CLASSIFICATION	2.1832398773440943E-4	DESIGN
// we need to wrtap the param in a cast()	WITHOUT_CLASSIFICATION	0.987838767467143	WITHOUT_CLASSIFICATION	0.012161232532856937	DESIGN
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9963307171824263	WITHOUT_CLASSIFICATION	0.003669282817573795	DESIGN
// Generate implicit joins, only if necessary.	WITHOUT_CLASSIFICATION	0.9998171475123562	WITHOUT_CLASSIFICATION	1.8285248764384683E-4	DESIGN
// Notify the FROM element that it is being referenced by the select.	WITHOUT_CLASSIFICATION	0.9999182177955215	WITHOUT_CLASSIFICATION	8.178220447850518E-5	DESIGN
// Turn off includeSubclasses on all FromElements.	WITHOUT_CLASSIFICATION	0.9996843156779426	WITHOUT_CLASSIFICATION	3.1568432205736704E-4	DESIGN
// create the node initially with the param name so that it shows // appropriately in the "original text" attribute	WITHOUT_CLASSIFICATION	0.9994226294168519	WITHOUT_CLASSIFICATION	5.773705831480503E-4	DESIGN
// Use the delegate, resolve identifiers as FROM element aliases.	WITHOUT_CLASSIFICATION	0.9996231188652446	WITHOUT_CLASSIFICATION	3.7688113475542787E-4	DESIGN
// select clauses for insert statements should alwasy be treated as shallow	WITHOUT_CLASSIFICATION	0.9989453496582285	WITHOUT_CLASSIFICATION	0.0010546503417716284	DESIGN
// no need to even collect this information if the persister is considered multi-table	WITHOUT_CLASSIFICATION	0.9886916618969828	WITHOUT_CLASSIFICATION	0.011308338103017242	DESIGN
// Make sure that the persister is versioned	WITHOUT_CLASSIFICATION	0.9987871700247011	WITHOUT_CLASSIFICATION	0.0012128299752989403	DESIGN
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9986167124658597	WITHOUT_CLASSIFICATION	0.0013832875341402344	DESIGN
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9994976044505545	WITHOUT_CLASSIFICATION	5.023955494456101E-4	DESIGN
// --Commented out by Inspection (12/11/04 10:56 AM): int getWarningCount();	WITHOUT_CLASSIFICATION	0.9999092615619701	WITHOUT_CLASSIFICATION	9.073843802992216E-5	DESIGN
// Alias references and identifiers use the same node class.	WITHOUT_CLASSIFICATION	0.9984616099698349	WITHOUT_CLASSIFICATION	0.0015383900301651268	DESIGN
// switch	WITHOUT_CLASSIFICATION	0.9999137090240472	WITHOUT_CLASSIFICATION	8.629097595274023E-5	DESIGN
// make a new one	WITHOUT_CLASSIFICATION	0.9964893261208062	WITHOUT_CLASSIFICATION	0.0035106738791938824	DESIGN
// just do the regular thing if you can't find the ctor // Your AST must have default ctor to use this.	WITHOUT_CLASSIFICATION	0.9983723520565388	WITHOUT_CLASSIFICATION	0.001627647943461094	DESIGN
// Initialize SQL nodes here.	WITHOUT_CLASSIFICATION	0.9998702923042553	WITHOUT_CLASSIFICATION	1.2970769574467775E-4	DESIGN
// semantic action processing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992890462718459	WITHOUT_CLASSIFICATION	7.109537281540444E-4	DESIGN
// if template is null we just write the function out as it appears in the hql statement	WITHOUT_CLASSIFICATION	0.9999790882206933	WITHOUT_CLASSIFICATION	2.091177930683024E-5	DESIGN
// this function has a template -> redirect output and catch the arguments	WITHOUT_CLASSIFICATION	0.9999775435858218	WITHOUT_CLASSIFICATION	2.245641417824431E-5	DESIGN
// --- Inner classes (moved here from sql-gen.g) ---	WITHOUT_CLASSIFICATION	0.9989206055941957	WITHOUT_CLASSIFICATION	0.0010793944058042813	DESIGN
// check two "adjecent" nodes at the top of the from-clause tree	WITHOUT_CLASSIFICATION	0.9999529261616116	WITHOUT_CLASSIFICATION	4.707383838834769E-5	DESIGN
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9978644915012125	WITHOUT_CLASSIFICATION	0.002135508498787598	DESIGN
// these are just two unrelated table references	WITHOUT_CLASSIFICATION	0.999685191384262	WITHOUT_CLASSIFICATION	3.148086157379138E-4	DESIGN
// again, both should be FromElements	WITHOUT_CLASSIFICATION	0.9923279533698839	WITHOUT_CLASSIFICATION	0.007672046630116108	DESIGN
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9995428956050215	WITHOUT_CLASSIFICATION	4.5710439497852575E-4	DESIGN
// right represents a joins originating from left; or // both right and left reprersent joins originating from the same FromElement	WITHOUT_CLASSIFICATION	0.9992762080310031	WITHOUT_CLASSIFICATION	7.237919689968118E-4	DESIGN
// check a set of parent/child nodes in the from-clause tree // to determine if a comma is required between them	WITHOUT_CLASSIFICATION	0.9996939581519568	WITHOUT_CLASSIFICATION	3.060418480431075E-4	DESIGN
// right represents a joins originating from left...	WITHOUT_CLASSIFICATION	0.9985521642527314	WITHOUT_CLASSIFICATION	0.0014478357472686074	DESIGN
// all clear	WITHOUT_CLASSIFICATION	0.9994352959263175	WITHOUT_CLASSIFICATION	5.647040736824859E-4	DESIGN
// Ignore the token class name parameter, and use a specific token class.	WITHOUT_CLASSIFICATION	0.9995214276732363	WITHOUT_CLASSIFICATION	4.7857232676381796E-4	DESIGN
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9984744561927695	WITHOUT_CLASSIFICATION	0.0015255438072304343	DESIGN
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9984744561927695	WITHOUT_CLASSIFICATION	0.0015255438072304343	DESIGN
// remember that ordinal parameters numbers are 1-based!!!	WITHOUT_CLASSIFICATION	0.9997804121982559	WITHOUT_CLASSIFICATION	2.195878017441156E-4	DESIGN
// don't care about other param types here, just those explicitly user-defined...	WITHOUT_CLASSIFICATION	0.9974561110923897	WITHOUT_CLASSIFICATION	0.002543888907610218	DESIGN
// If the query is already compiled, skip the compilation.	WITHOUT_CLASSIFICATION	0.9999016910924879	WITHOUT_CLASSIFICATION	9.830890751200515E-5	DESIGN
// Remember the parameters for the compilation.	WITHOUT_CLASSIFICATION	0.994686257836277	WITHOUT_CLASSIFICATION	0.005313742163722973	DESIGN
// PHASE 1 : Parse the HQL into an AST.	WITHOUT_CLASSIFICATION	0.999542483515588	WITHOUT_CLASSIFICATION	4.5751648441188445E-4	DESIGN
// PHASE 2 : Analyze the HQL AST, and produce an SQL AST.	WITHOUT_CLASSIFICATION	0.999985928701748	WITHOUT_CLASSIFICATION	1.4071298251972293E-5	DESIGN
// PHASE 3 : Generate the SQL.	WITHOUT_CLASSIFICATION	0.9991062742078505	WITHOUT_CLASSIFICATION	8.937257921494617E-4	DESIGN
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9970319822413571	WITHOUT_CLASSIFICATION	0.0029680177586429526	DESIGN
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9970319822413571	WITHOUT_CLASSIFICATION	0.0029680177586429526	DESIGN
//only needed during compilation phase...	WITHOUT_CLASSIFICATION	0.9988749349954156	WITHOUT_CLASSIFICATION	0.0011250650045844415	DESIGN
// Transform the tree.	WITHOUT_CLASSIFICATION	0.9996847030805804	WITHOUT_CLASSIFICATION	3.1529691941963034E-4	DESIGN
// Parse the query string into an HQL AST.	WITHOUT_CLASSIFICATION	0.9998310303332395	WITHOUT_CLASSIFICATION	1.6896966676052975E-4	DESIGN
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9994811323066523	WITHOUT_CLASSIFICATION	5.188676933478733E-4	DESIGN
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9994811323066523	WITHOUT_CLASSIFICATION	5.188676933478733E-4	DESIGN
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9994811323066523	WITHOUT_CLASSIFICATION	5.188676933478733E-4	DESIGN
// NOTE : ( max - 1 ) because first is zero-based while max is not...	WITHOUT_CLASSIFICATION	0.9999597618005369	WITHOUT_CLASSIFICATION	4.0238199463038165E-5	DESIGN
// -- Package local methods for the QueryLoader delegate --	WITHOUT_CLASSIFICATION	0.9995089814101359	WITHOUT_CLASSIFICATION	4.910185898640775E-4	DESIGN
// If there are no collection fetches, then no further checks are needed	WITHOUT_CLASSIFICATION	0.9998636667696623	WITHOUT_CLASSIFICATION	1.363332303376658E-4	DESIGN
// A shallow query is ok (although technically there should be no fetching here...)	WITHOUT_CLASSIFICATION	0.9990311718759719	WITHOUT_CLASSIFICATION	9.688281240281808E-4	DESIGN
// should be the first, but just to be safe...	WITHOUT_CLASSIFICATION	0.9981481035539647	WITHOUT_CLASSIFICATION	0.0018518964460353092	DESIGN
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9994976044505545	WITHOUT_CLASSIFICATION	5.023955494456101E-4	DESIGN
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9994976044505545	WITHOUT_CLASSIFICATION	5.023955494456101E-4	DESIGN
// Impl Note: allows multiple collection fetches as long as the // entire fecthed graph still "points back" to a single // root entity for return	WITHOUT_CLASSIFICATION	0.9828942221524736	WITHOUT_CLASSIFICATION	0.01710577784752649	DESIGN
// Otherwise, we have a non-scalar select with defined collection fetch(es). // Make sure that there is only a single root entity in the return (no tuples)	WITHOUT_CLASSIFICATION	0.9999121895272489	WITHOUT_CLASSIFICATION	8.7810472751085E-5	DESIGN
// This is not strictly true.  We actually just need to make sure that // it is ordered by root-entity PK and that that order-by comes before // any non-root-entity ordering...	WITHOUT_CLASSIFICATION	0.8727783778560377	WITHOUT_CLASSIFICATION	0.12722162214396235	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998122686237135	WITHOUT_CLASSIFICATION	1.87731376286521E-4	DESIGN
// we are already processing a dot-structure	WITHOUT_CLASSIFICATION	0.9952862110159906	WITHOUT_CLASSIFICATION	0.00471378898400939	DESIGN
// igndore it...	WITHOUT_CLASSIFICATION	0.9967152735763315	WITHOUT_CLASSIFICATION	0.003284726423668576	DESIGN
// we are now at a new tree level	WITHOUT_CLASSIFICATION	0.9879389588476214	WITHOUT_CLASSIFICATION	0.012061041152378538	DESIGN
// [jsd] The fix for HHH-558...	WITHOUT_CLASSIFICATION	0.9808541999151925	WITHOUT_CLASSIFICATION	0.019145800084807527	DESIGN
// If the token can tell us if it could be an identifier...	WITHOUT_CLASSIFICATION	0.9992225334347933	WITHOUT_CLASSIFICATION	7.77466565206824E-4	DESIGN
// ... and the expected token type was an identifier, then:	WITHOUT_CLASSIFICATION	0.9997571404505462	WITHOUT_CLASSIFICATION	2.428595494538102E-4	DESIGN
// Use the token as an identifier.	WITHOUT_CLASSIFICATION	0.9999576979347993	WITHOUT_CLASSIFICATION	4.2302065200751864E-5	DESIGN
// Add the token to the AST.	WITHOUT_CLASSIFICATION	0.9998633917537272	WITHOUT_CLASSIFICATION	1.3660824627277613E-4	DESIGN
// (NOT (EQ a b) ) => (NE a b)	WITHOUT_CLASSIFICATION	0.9994404737373025	WITHOUT_CLASSIFICATION	5.595262626974744E-4	DESIGN
// (NOT (NE a b) ) => (EQ a b)	WITHOUT_CLASSIFICATION	0.9994404737373025	WITHOUT_CLASSIFICATION	5.595262626974744E-4	DESIGN
// (NOT (LT a b) ) => (GE a b)	WITHOUT_CLASSIFICATION	0.9994404737373025	WITHOUT_CLASSIFICATION	5.595262626974744E-4	DESIGN
// (NOT (GE a b) ) => (LT a b)	WITHOUT_CLASSIFICATION	0.9994404737373025	WITHOUT_CLASSIFICATION	5.595262626974744E-4	DESIGN
// (NOT (LE a b) ) => (GT a b)	WITHOUT_CLASSIFICATION	0.9994404737373025	WITHOUT_CLASSIFICATION	5.595262626974744E-4	DESIGN
// (NOT (LIKE a b) ) => (NOT_LIKE a b)	WITHOUT_CLASSIFICATION	0.9993188944489683	WITHOUT_CLASSIFICATION	6.81105551031797E-4	DESIGN
// (NOT (NOT_LIKE a b) ) => (LIKE a b)	WITHOUT_CLASSIFICATION	0.9993188944489683	WITHOUT_CLASSIFICATION	6.81105551031797E-4	DESIGN
// (NOT (IS_NOT_NULL a b) ) => (IS_NULL a b)	WITHOUT_CLASSIFICATION	0.9993188944489683	WITHOUT_CLASSIFICATION	6.81105551031797E-4	DESIGN
// (NOT (BETWEEN a b) ) => (NOT_BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9993188944489683	WITHOUT_CLASSIFICATION	6.81105551031797E-4	DESIGN
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9985329678290967	WITHOUT_CLASSIFICATION	0.0014670321709032278	DESIGN
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9984744561927695	WITHOUT_CLASSIFICATION	0.0015255438072304343	DESIGN
// if // if // Otherwise, handle the error normally.	WITHOUT_CLASSIFICATION	0.9996240998876809	WITHOUT_CLASSIFICATION	3.759001123190884E-4	DESIGN
// (NOT (NOT_BETWEEN a b) ) => (BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9993188944489683	WITHOUT_CLASSIFICATION	6.81105551031797E-4	DESIGN
/* This can never happen because this rule will always eliminate the child NOT.	WITHOUT_CLASSIFICATION	0.9914473261198197	WITHOUT_CLASSIFICATION	0.008552673880180437	DESIGN
// Just add a 'not' parent.	WITHOUT_CLASSIFICATION	0.9991471838996852	WITHOUT_CLASSIFICATION	8.528161003147456E-4	DESIGN
// (EQ NULL b) => (IS_NULL b)	WITHOUT_CLASSIFICATION	0.9998682285349287	WITHOUT_CLASSIFICATION	1.3177146507116085E-4	DESIGN
// (EQ a NULL) => (IS_NULL a)	WITHOUT_CLASSIFICATION	0.9996560923385839	WITHOUT_CLASSIFICATION	3.43907661416066E-4	DESIGN
// NOTE: Because we're using ASTUtil.createParent(), the tree must be created from the bottom up. // IS EMPTY x => (EXISTS (QUERY (SELECT_FROM (FROM x) ) ) )	WITHOUT_CLASSIFICATION	0.9969009040228349	WITHOUT_CLASSIFICATION	0.0030990959771650785	DESIGN
// Add NOT if it's negated.	WITHOUT_CLASSIFICATION	0.999701446813432	WITHOUT_CLASSIFICATION	2.985531865680701E-4	DESIGN
// Create nodes that track line and column number.	WITHOUT_CLASSIFICATION	0.9999963831422055	WITHOUT_CLASSIFICATION	3.616857794604126E-6	DESIGN
// Case 1: Multi token keywords GROUP BY and ORDER BY // The next token ( LT(2) ) should be 'by'... otherwise, this is just an ident.	WITHOUT_CLASSIFICATION	0.9978898882269692	WITHOUT_CLASSIFICATION	0.0021101117730307852	DESIGN
// Case 2: The current token is after FROM and before '.'.	WITHOUT_CLASSIFICATION	0.9999905381406905	WITHOUT_CLASSIFICATION	9.46185930949783E-6	DESIGN
// This handles HHH-354, where there is a strange property name in a where clause. // If the lookahead contains a DOT then something that isn't an IDENT...	WITHOUT_CLASSIFICATION	0.9999536126391524	WITHOUT_CLASSIFICATION	4.6387360847701886E-5	DESIGN
// See if the second lookahed token can be an identifier.	WITHOUT_CLASSIFICATION	0.9997914784459523	WITHOUT_CLASSIFICATION	2.0852155404777462E-4	DESIGN
// Set it!	WITHOUT_CLASSIFICATION	0.9999102969266992	WITHOUT_CLASSIFICATION	8.970307330079042E-5	DESIGN
// ignore	WITHOUT_CLASSIFICATION	0.9997047648977977	WITHOUT_CLASSIFICATION	2.9523510220236406E-4	DESIGN
// strip the " where "	WITHOUT_CLASSIFICATION	0.9998830553774027	WITHOUT_CLASSIFICATION	1.1694462259728912E-4	DESIGN
// Don't really know all the codes required to adequately decipher returned jdbc exceptions here. // simply allow the failure to be eaten and the subsequent insert-selects/deletes should fail	WITHOUT_CLASSIFICATION	0.9956591383781411	WITHOUT_CLASSIFICATION	0.004340861621858843	DESIGN
// at the very least cleanup the data :)	WITHOUT_CLASSIFICATION	0.9997312423602497	WITHOUT_CLASSIFICATION	2.687576397503639E-4	DESIGN
// First, save off the pertinent ids, as the return value	WITHOUT_CLASSIFICATION	0.9999648962012231	WITHOUT_CLASSIFICATION	3.5103798776805034E-5	DESIGN
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9996327141093406	WITHOUT_CLASSIFICATION	3.672858906594171E-4	DESIGN
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9996327141093406	WITHOUT_CLASSIFICATION	3.672858906594171E-4	DESIGN
// Start performing the updates	WITHOUT_CLASSIFICATION	0.9998175344042269	WITHOUT_CLASSIFICATION	1.824655957731294E-4	DESIGN
// First, save off the pertinent ids, saving the number of pertinent ids for return	WITHOUT_CLASSIFICATION	0.9999156162636967	WITHOUT_CLASSIFICATION	8.438373630332165E-5	DESIGN
// Start performing the deletes	WITHOUT_CLASSIFICATION	0.999666440555812	WITHOUT_CLASSIFICATION	3.335594441880164E-4	DESIGN
// otherwise, everything ok.	WITHOUT_CLASSIFICATION	0.9996320466334215	WITHOUT_CLASSIFICATION	3.6795336657839185E-4	DESIGN
// visit width-first, then depth	WITHOUT_CLASSIFICATION	0.99941712742482	WITHOUT_CLASSIFICATION	5.828725751799507E-4	DESIGN
// if the types report logical equivalence, return true...	WITHOUT_CLASSIFICATION	0.9981011551183973	WITHOUT_CLASSIFICATION	0.0018988448816026503	DESIGN
// otherwise, perform a "deep equivalence" check...	WITHOUT_CLASSIFICATION	0.9967832515325579	WITHOUT_CLASSIFICATION	0.003216748467442104	DESIGN
// If there is no WHERE node, make one.	WITHOUT_CLASSIFICATION	0.9994634773795419	WITHOUT_CLASSIFICATION	5.365226204581293E-4	DESIGN
// inject the WHERE after the parent	WITHOUT_CLASSIFICATION	0.9999484583063413	WITHOUT_CLASSIFICATION	5.1541693658661055E-5	DESIGN
// Never include subclasses for implied from elements.	WITHOUT_CLASSIFICATION	0.9997651908656248	WITHOUT_CLASSIFICATION	2.3480913437509842E-4	DESIGN
// Moved here from SelectClause [jsd]	WITHOUT_CLASSIFICATION	0.9970985671318974	WITHOUT_CLASSIFICATION	0.0029014328681026763	DESIGN
///////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9985473939259759	WITHOUT_CLASSIFICATION	0.001452606074024101	DESIGN
// Use the table fromElement and the property name to get the array of column names.	WITHOUT_CLASSIFICATION	0.9998782562738369	WITHOUT_CLASSIFICATION	1.2174372616322218E-4	DESIGN
// Set the attributes of the property reference expression.	WITHOUT_CLASSIFICATION	0.9999032118502216	WITHOUT_CLASSIFICATION	9.67881497784175E-5	DESIGN
// If the uresolved property path isn't set yet, just use the property name.	WITHOUT_CLASSIFICATION	0.9996125471908496	WITHOUT_CLASSIFICATION	3.8745280915030355E-4	DESIGN
// The 'from element' that the property is in.	WITHOUT_CLASSIFICATION	0.9999507369178422	WITHOUT_CLASSIFICATION	4.926308215773273E-5	DESIGN
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.999985225391133	WITHOUT_CLASSIFICATION	1.4774608867101796E-5	DESIGN
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.999985225391133	WITHOUT_CLASSIFICATION	1.4774608867101796E-5	DESIGN
// If this dot has already been resolved, stop now.	WITHOUT_CLASSIFICATION	0.9998024800841208	WITHOUT_CLASSIFICATION	1.975199158792021E-4	DESIGN
// If there is no data type for this node, and we're at the end of the path (top most dot node), then // this might be a Java constant.	WITHOUT_CLASSIFICATION	0.9914167943218843	WITHOUT_CLASSIFICATION	0.008583205678115697	DESIGN
// The property is a collection...	WITHOUT_CLASSIFICATION	0.9997729937030025	WITHOUT_CLASSIFICATION	2.2700629699736724E-4	DESIGN
// The property is a component...	WITHOUT_CLASSIFICATION	0.9997729937030025	WITHOUT_CLASSIFICATION	2.2700629699736724E-4	DESIGN
// The property is another class..	WITHOUT_CLASSIFICATION	0.999804108710565	WITHOUT_CLASSIFICATION	1.9589128943496795E-4	DESIGN
// Otherwise, this is a primitive type.	WITHOUT_CLASSIFICATION	0.9980185990148924	WITHOUT_CLASSIFICATION	0.0019814009851076763	DESIGN
//foo.bars.size (also handles deprecated stuff like foo.bars.maxelement for backwardness)	WITHOUT_CLASSIFICATION	0.9840406509561601	WITHOUT_CLASSIFICATION	0.01595934904383992	DESIGN
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9988563855893712	WITHOUT_CLASSIFICATION	0.0011436144106287927	DESIGN
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9996124652086074	WITHOUT_CLASSIFICATION	3.875347913927028E-4	DESIGN
// in non-select queries, the only time we should need to join is if we are in a subquery from clause	WITHOUT_CLASSIFICATION	0.9990339304517575	WITHOUT_CLASSIFICATION	9.660695482424101E-4	DESIGN
// this is the regression style determination which matches the logic of the classic translator	WITHOUT_CLASSIFICATION	0.9998793355439362	WITHOUT_CLASSIFICATION	1.206644560637565E-4	DESIGN
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9988563855893712	WITHOUT_CLASSIFICATION	0.0011436144106287927	DESIGN
// even though we might find a pre-existing element by join path, we may not be able to reuse it...	WITHOUT_CLASSIFICATION	0.9819634403376621	WITHOUT_CLASSIFICATION	0.018036559662337807	DESIGN
// NOTE : addDuplicateAlias() already performs nullness checks on the alias.	WITHOUT_CLASSIFICATION	0.9992773344706853	WITHOUT_CLASSIFICATION	7.226655293145875E-4	DESIGN
// if the from-clauses are the same, we can be a little more aggressive in terms of what we reuse	WITHOUT_CLASSIFICATION	0.9849442744564795	WITHOUT_CLASSIFICATION	0.015055725543520554	DESIGN
// again, null != null here	WITHOUT_CLASSIFICATION	0.9990407160431254	WITHOUT_CLASSIFICATION	9.592839568745387E-4	DESIGN
// If this is an implied join in a from element, then use the impled join type which is part of the // tree parser's state (set by the gramamar actions).	WITHOUT_CLASSIFICATION	0.9980374802228127	WITHOUT_CLASSIFICATION	0.001962519777187236	DESIGN
// otherwise (subquery case) dont reuse the fromElement if we are processing the from-clause of the subquery	WITHOUT_CLASSIFICATION	0.9995251830720326	WITHOUT_CLASSIFICATION	4.748169279673574E-4	DESIGN
// we know only the lhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9998943063364379	WITHOUT_CLASSIFICATION	1.0569366356199213E-4	DESIGN
// the referenced node text is the special 'id'	WITHOUT_CLASSIFICATION	0.9999708168858088	WITHOUT_CLASSIFICATION	2.9183114191175787E-5	DESIGN
// only the identifier property field name can be a reference to the associated entity's PK...	WITHOUT_CLASSIFICATION	0.9996645727878215	WITHOUT_CLASSIFICATION	3.3542721217845933E-4	DESIGN
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9987493219246919	WITHOUT_CLASSIFICATION	0.001250678075308082	DESIGN
// Append the new property name onto the unresolved path.	WITHOUT_CLASSIFICATION	0.9993444198283111	WITHOUT_CLASSIFICATION	6.555801716889633E-4	DESIGN
// If the lhs is a collection, use CollectionPropertyMapping	WITHOUT_CLASSIFICATION	0.9997983951393081	WITHOUT_CLASSIFICATION	2.0160486069196613E-4	DESIGN
// Tell the destination fromElement to 'includeSubclasses'.	WITHOUT_CLASSIFICATION	0.9997881912684562	WITHOUT_CLASSIFICATION	2.1180873154382792E-4	DESIGN
// Use theta style (for regression) // Move the node up, after the origin node.	WITHOUT_CLASSIFICATION	0.9952023703163883	WITHOUT_CLASSIFICATION	0.004797629683611805	DESIGN
// Don't resolve the node again.	WITHOUT_CLASSIFICATION	0.9995085003354397	WITHOUT_CLASSIFICATION	4.914996645602351E-4	DESIGN
// for expected parameter type injection, we expect that the lhs represents // some form of property ref and that the children of the in-list represent // one-or-more params.	WITHOUT_CLASSIFICATION	0.9991864185022982	WITHOUT_CLASSIFICATION	8.135814977019731E-4	DESIGN
// we need to strip off the embedded parens so that sql-gen does not double these up	WITHOUT_CLASSIFICATION	0.998039241639122	WITHOUT_CLASSIFICATION	0.00196075836087793	DESIGN
// we have something like : "? [op] rhs"	WITHOUT_CLASSIFICATION	0.9990464902051452	WITHOUT_CLASSIFICATION	9.535097948547419E-4	DESIGN
// we have something like : "lhs [op] ?"	WITHOUT_CLASSIFICATION	0.9990464902051452	WITHOUT_CLASSIFICATION	9.535097948547419E-4	DESIGN
// we know only the rhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9998943063364379	WITHOUT_CLASSIFICATION	1.0569366356199213E-4	DESIGN
// handle the (assumed) valid cases: // #1 - the only valid datetime addition synatx is one or the other is a datetime (but not both)	WITHOUT_CLASSIFICATION	0.990879391321783	WITHOUT_CLASSIFICATION	0.009120608678216952	DESIGN
// one or the other needs to be a datetime for us to get into this method in the first place...	WITHOUT_CLASSIFICATION	0.6875012990801284	WITHOUT_CLASSIFICATION	0.31249870091987164	DESIGN
// #3 - note that this is also true of "datetime - :param"...	WITHOUT_CLASSIFICATION	0.9826229024022324	WITHOUT_CLASSIFICATION	0.017377097597767666	DESIGN
// #2	WITHOUT_CLASSIFICATION	0.9998140451722712	WITHOUT_CLASSIFICATION	1.8595482772871847E-4	DESIGN
// Generate the inner join -- The elements need to be joined to the collection they are in.	WITHOUT_CLASSIFICATION	0.9997793878235998	WITHOUT_CLASSIFICATION	2.206121764002775E-4	DESIGN
// nothing to do	WITHOUT_CLASSIFICATION	0.9995564758744286	WITHOUT_CLASSIFICATION	4.435241255713848E-4	DESIGN
// The 'from element' that represents the elements of the collection.	WITHOUT_CLASSIFICATION	0.9999943220057262	WITHOUT_CLASSIFICATION	5.677994273722898E-6	DESIGN
// Add the condition to the join sequence that qualifies the indexed element.	WITHOUT_CLASSIFICATION	0.999915148259398	WITHOUT_CLASSIFICATION	8.485174060203007E-5	DESIGN
// Sometimes use the element table alias, sometimes use the... umm... collection table alias (many to many)	WITHOUT_CLASSIFICATION	0.9985589478764011	WITHOUT_CLASSIFICATION	0.001441052123598887	DESIGN
// Now, set the text for this node.  It should be the element columns.	WITHOUT_CLASSIFICATION	0.9803055148988642	WITHOUT_CLASSIFICATION	0.019694485101135834	DESIGN
// Get the function return value type, based on the type of the first argument.	WITHOUT_CLASSIFICATION	0.9999694653774187	WITHOUT_CLASSIFICATION	3.053462258128512E-5	DESIGN
// This will call initialize(tok)!	WITHOUT_CLASSIFICATION	0.9977278607563321	WITHOUT_CLASSIFICATION	0.0022721392436678358	DESIGN
// mutation depends on the types of nodes invloved...	WITHOUT_CLASSIFICATION	0.9992212747880308	WITHOUT_CLASSIFICATION	7.787252119693126E-4	DESIGN
// "pass along" our initial embedded parameter node(s) to the first generated // sql fragment so that it can be handled later for parameter binding...	WITHOUT_CLASSIFICATION	0.8374009661161008	WITHOUT_CLASSIFICATION	0.1625990338838992	DESIGN
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999395143874334	WITHOUT_CLASSIFICATION	6.0485612566479225E-5	DESIGN
// Generated select expressions are already resolved, nothing to do.	WITHOUT_CLASSIFICATION	0.9996427151034465	WITHOUT_CLASSIFICATION	3.5728489655351934E-4	DESIGN
// The path may be a reference to an alias defined in the parent query.	WITHOUT_CLASSIFICATION	0.999994408205007	WITHOUT_CLASSIFICATION	5.591794993045492E-6	DESIGN
// The HQL class alias refers to the class name.	WITHOUT_CLASSIFICATION	0.9999545826201569	WITHOUT_CLASSIFICATION	4.54173798431204E-5	DESIGN
// Associate the table alias with the element.	WITHOUT_CLASSIFICATION	0.9999053368207652	WITHOUT_CLASSIFICATION	9.46631792347453E-5	DESIGN
// try the parent FromClause...	WITHOUT_CLASSIFICATION	0.9999633910939232	WITHOUT_CLASSIFICATION	3.66089060768854E-5	DESIGN
// Add the new node to the map so that we don't create it twice.	WITHOUT_CLASSIFICATION	0.9998652235437766	WITHOUT_CLASSIFICATION	1.3477645622329097E-4	DESIGN
// Make sure that all from elements registered with this FROM clause are actually in the AST.	WITHOUT_CLASSIFICATION	0.9962640230875318	WITHOUT_CLASSIFICATION	0.0037359769124682253	DESIGN
// Invoke setScalarColumnText on each constructor argument.	WITHOUT_CLASSIFICATION	0.9998700576854331	WITHOUT_CLASSIFICATION	1.299423145668511E-4	DESIGN
// Collect the select expressions, skip the first child because it is the class name.	WITHOUT_CLASSIFICATION	0.999976210772201	WITHOUT_CLASSIFICATION	2.378922779908467E-5	DESIGN
// return an empty Type array	WITHOUT_CLASSIFICATION	0.9996537711612277	WITHOUT_CLASSIFICATION	3.462288387723411E-4	DESIGN
// Constructors are always considered scalar results.	WITHOUT_CLASSIFICATION	0.9981116677274129	WITHOUT_CLASSIFICATION	0.0018883322725870393	DESIGN
// this is the exception returned by ReflectHelper.getConstructor() if it cannot // locate an appropriate constructor	WITHOUT_CLASSIFICATION	0.999921345582432	WITHOUT_CLASSIFICATION	7.865441756798522E-5	DESIGN
// if there is no order by, make one	WITHOUT_CLASSIFICATION	0.9997605004845884	WITHOUT_CLASSIFICATION	2.3949951541147446E-4	DESIGN
// Find the WHERE; if there is no WHERE, find the FROM...	WITHOUT_CLASSIFICATION	0.9998555332933856	WITHOUT_CLASSIFICATION	1.4446670661431236E-4	DESIGN
// Now, inject the newly built ORDER BY into the tree	WITHOUT_CLASSIFICATION	0.997735783056752	WITHOUT_CLASSIFICATION	0.0022642169432480633	DESIGN
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994710384654842	WITHOUT_CLASSIFICATION	5.28961534515837E-4	DESIGN
// logic operators by definition resolve to boolean.	WITHOUT_CLASSIFICATION	0.9999395143874334	WITHOUT_CLASSIFICATION	6.0485612566479225E-5	DESIGN
// Render the identifier select fragment using the table alias.	WITHOUT_CLASSIFICATION	0.999408707027739	WITHOUT_CLASSIFICATION	5.912929722611071E-4	DESIGN
// Class names in the FROM clause result in a JoinSequence (the old FromParser does this).	WITHOUT_CLASSIFICATION	0.9999868116643167	WITHOUT_CLASSIFICATION	1.3188335683434967E-5	DESIGN
// For many-to-many joins, use the tablename from the queryable collection for the default text.	WITHOUT_CLASSIFICATION	0.9984709280654941	WITHOUT_CLASSIFICATION	0.001529071934505845	DESIGN
// Otherwise, use the property mapping.	WITHOUT_CLASSIFICATION	0.9992353749328522	WITHOUT_CLASSIFICATION	7.646250671477575E-4	DESIGN
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9986772884409505	WITHOUT_CLASSIFICATION	0.0013227115590495582	DESIGN
// If the property is a special collection property name, return a CollectionPropertyMapping.	WITHOUT_CLASSIFICATION	0.9995981898605572	WITHOUT_CLASSIFICATION	4.018101394429674E-4	DESIGN
// Collection of components.	WITHOUT_CLASSIFICATION	0.9997702695799043	WITHOUT_CLASSIFICATION	2.29730420095672E-4	DESIGN
// make sure the lhs is "assignable"...	WITHOUT_CLASSIFICATION	0.9992570277879355	WITHOUT_CLASSIFICATION	7.429722120646102E-4	DESIGN
// false indicates to not generate parens around the assignment	WITHOUT_CLASSIFICATION	0.9995978261715901	WITHOUT_CLASSIFICATION	4.0217382840989415E-4	DESIGN
// Register the FromElement with the FROM clause, now that we have the names and aliases.	WITHOUT_CLASSIFICATION	0.9995794646562083	WITHOUT_CLASSIFICATION	4.2053534379169985E-4	DESIGN
// currently allowed...	WITHOUT_CLASSIFICATION	0.9977686754315337	WITHOUT_CLASSIFICATION	0.0022313245684662778	DESIGN
// HHH-276 : implied joins in a subselect where clause - The destination needs to be added // to the destination's from clause. // Not sure if this is will fix everything, but it works.	WITHOUT_CLASSIFICATION	0.6427043169564598	DESIGN	0.3572956830435402	WITHOUT_CLASSIFICATION
//return classAlias == null ? className : classAlias;	WITHOUT_CLASSIFICATION	0.9938958555393473	WITHOUT_CLASSIFICATION	0.006104144460652652	DESIGN
// This is an explicit FROM element.	WITHOUT_CLASSIFICATION	0.996673495862492	WITHOUT_CLASSIFICATION	0.003326504137508145	DESIGN
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994710384654842	WITHOUT_CLASSIFICATION	5.28961534515837E-4	DESIGN
// Fetch can't be used with scroll() or iterate().	WITHOUT_CLASSIFICATION	0.9096974068504721	WITHOUT_CLASSIFICATION	0.09030259314952795	DESIGN
// If it's not implied or it is implied and it's a many to many join where the target wasn't found.	WITHOUT_CLASSIFICATION	0.9999913187154289	WITHOUT_CLASSIFICATION	8.681284571116683E-6	DESIGN
// Since this is an explicit FROM element, it can't be implied in the FROM clause.	WITHOUT_CLASSIFICATION	0.9993226432014833	WITHOUT_CLASSIFICATION	6.773567985166157E-4	DESIGN
// Do nothing, eplicit from elements are *always* in the projection list.	WITHOUT_CLASSIFICATION	0.9996487811081132	WITHOUT_CLASSIFICATION	3.51218891886769E-4	DESIGN
// propertyName refers to something like collection.size...	WITHOUT_CLASSIFICATION	0.9991963644757119	WITHOUT_CLASSIFICATION	8.036355242881008E-4	DESIGN
// property name is a sub-path of a component...	WITHOUT_CLASSIFICATION	0.9985690963224287	WITHOUT_CLASSIFICATION	0.0014309036775711733	DESIGN
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9996124652086074	WITHOUT_CLASSIFICATION	3.875347913927028E-4	DESIGN
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9805111002918909	WITHOUT_CLASSIFICATION	0.019488899708109023	DESIGN
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999395143874334	WITHOUT_CLASSIFICATION	6.0485612566479225E-5	DESIGN
// DotNode uses null here...	WITHOUT_CLASSIFICATION	0.9964626458445677	WITHOUT_CLASSIFICATION	0.0035373541554324607	DESIGN
// We represent a from-clause alias	WITHOUT_CLASSIFICATION	0.9998787469708946	WITHOUT_CLASSIFICATION	1.2125302910539993E-4	DESIGN
// we are the LHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9993069731516852	WITHOUT_CLASSIFICATION	6.930268483147545E-4	DESIGN
// we are the RHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9991697253981217	WITHOUT_CLASSIFICATION	8.302746018782819E-4	DESIGN
// we represent a naked (simple) prop-ref	WITHOUT_CLASSIFICATION	0.9975275491411449	WITHOUT_CLASSIFICATION	0.002472450858855112	DESIGN
// EARLY EXIT!!!  return so the resolve call explicitly coming from DotNode can // resolve this...	WITHOUT_CLASSIFICATION	0.9996959489243586	WITHOUT_CLASSIFICATION	3.04051075641323E-4	DESIGN
// assume this ident's text does *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9980821833782175	WITHOUT_CLASSIFICATION	0.0019178166217825058	DESIGN
// just ignore it for now, it'll get resolved later...	WITHOUT_CLASSIFICATION	0.9966411956164086	WITHOUT_CLASSIFICATION	0.0033588043835915183	DESIGN
// This is not actually a constant, but a reference to FROM element.	WITHOUT_CLASSIFICATION	0.939386458797779	WITHOUT_CLASSIFICATION	0.06061354120222102	DESIGN
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9990737980150635	WITHOUT_CLASSIFICATION	9.262019849363894E-4	DESIGN
// these pieces are needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9990156911504191	WITHOUT_CLASSIFICATION	9.843088495809058E-4	DESIGN
// used to set the type of the parent dot node	WITHOUT_CLASSIFICATION	0.9067024732653355	WITHOUT_CLASSIFICATION	0.09329752673466453	DESIGN
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9968071666898682	WITHOUT_CLASSIFICATION	0.003192833310131868	DESIGN
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9968071666898682	WITHOUT_CLASSIFICATION	0.003192833310131868	DESIGN
// naked property-refs cannot be used with an aliased from element	WITHOUT_CLASSIFICATION	0.9274256589193353	WITHOUT_CLASSIFICATION	0.07257434108066474	DESIGN
// this piece is needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9963770887267657	WITHOUT_CLASSIFICATION	0.0036229112732343045	DESIGN
// do *not* over-write the column text, as that has already been // "rendered" during resolve	WITHOUT_CLASSIFICATION	0.9997586565449137	WITHOUT_CLASSIFICATION	2.4134345508630226E-4	DESIGN
// for some reason the antlr.CommonAST initialization routines force // this method to get called twice.  The first time with an empty string	WITHOUT_CLASSIFICATION	0.9999529585010796	WITHOUT_CLASSIFICATION	4.704149892051437E-5	DESIGN
// Look up class name using the first identifier in the path.	WITHOUT_CLASSIFICATION	0.999926372649615	WITHOUT_CLASSIFICATION	7.362735038498088E-5	DESIGN
// Add to the query spaces.	WITHOUT_CLASSIFICATION	0.9997487163249276	WITHOUT_CLASSIFICATION	2.512836750724877E-4	DESIGN
// If the from element isn't in the same clause, create a new from element.	WITHOUT_CLASSIFICATION	0.9985701037489654	WITHOUT_CLASSIFICATION	0.001429896251034709	DESIGN
// This is the root level node. // Generate an explicit from clause at the root.	WITHOUT_CLASSIFICATION	0.9980271362459708	WITHOUT_CLASSIFICATION	0.0019728637540292315	DESIGN
// Correlated subqueries create 'special' implied from nodes // because correlated subselects can't use an ANSI-style join	WITHOUT_CLASSIFICATION	0.9999587172660414	WITHOUT_CLASSIFICATION	4.1282733958616894E-5	DESIGN
// super-duper-classic-parser-regression-testing-mojo-magic...	WITHOUT_CLASSIFICATION	0.9994086587758717	WITHOUT_CLASSIFICATION	5.913412241282598E-4	DESIGN
// A collection of entities...	WITHOUT_CLASSIFICATION	0.9983947255865911	WITHOUT_CLASSIFICATION	0.0016052744134088244	DESIGN
// A collection of components...	WITHOUT_CLASSIFICATION	0.9980463601811341	WITHOUT_CLASSIFICATION	0.0019536398188659105	DESIGN
// A collection of scalar elements...	WITHOUT_CLASSIFICATION	0.9980463601811341	WITHOUT_CLASSIFICATION	0.0019536398188659105	DESIGN
// according to both the ANSI-SQL and EJB3 specs, trim can either take // exactly one parameter or a variable number of parameters between 1 and 4. // from the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If only <trim specification> is omitted, BOTH is assumed; // if <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999997177285324	WITHOUT_CLASSIFICATION	2.82271467636717E-7	DESIGN
// Don't include sub-classes for implied collection joins or subquery joins.	WITHOUT_CLASSIFICATION	0.9958733396105761	WITHOUT_CLASSIFICATION	0.00412666038942392	DESIGN
// Treat explict from elements in sub-queries properly.	WITHOUT_CLASSIFICATION	0.9996249054435247	WITHOUT_CLASSIFICATION	3.750945564753663E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998122686237135	WITHOUT_CLASSIFICATION	1.87731376286521E-4	DESIGN
// the "root from-element" in correlated subqueries do need this piece	WITHOUT_CLASSIFICATION	0.9444511109879848	WITHOUT_CLASSIFICATION	0.05554888901201507	DESIGN
// Create the FROM element for the target (the elements of the collection).	WITHOUT_CLASSIFICATION	0.9999790091499359	WITHOUT_CLASSIFICATION	2.0990850064110425E-5	DESIGN
// If the join is implied, then don't include sub-classes on the element.	WITHOUT_CLASSIFICATION	0.9999183006124428	WITHOUT_CLASSIFICATION	8.169938755716055E-5	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995136403250783	WITHOUT_CLASSIFICATION	4.863596749217555E-4	DESIGN
// The associated entity is implied, but it must be included in the FROM. // The collection alias is the role.	WITHOUT_CLASSIFICATION	0.9998549967419857	WITHOUT_CLASSIFICATION	1.4500325801419884E-4	DESIGN
// Tag this node as a JOIN. // Don't include subclasses in the join. // This is a clollection join.	WITHOUT_CLASSIFICATION	0.9944123934733156	WITHOUT_CLASSIFICATION	0.0055876065266844245	DESIGN
// Get the class name of the associated entity.	WITHOUT_CLASSIFICATION	0.9998918219822517	WITHOUT_CLASSIFICATION	1.0817801774831869E-4	DESIGN
//  origin, path, implied, columns, classAlias,	WITHOUT_CLASSIFICATION	0.9999486741787885	WITHOUT_CLASSIFICATION	5.132582121150642E-5	DESIGN
/*implied*/	WITHOUT_CLASSIFICATION	0.9967688892480616	WITHOUT_CLASSIFICATION	0.003231110751938361	DESIGN
// For implied many-to-many, just add the end join.	WITHOUT_CLASSIFICATION	0.9998100509696434	WITHOUT_CLASSIFICATION	1.8994903035665092E-4	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995136403250783	WITHOUT_CLASSIFICATION	4.863596749217555E-4	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995136403250783	WITHOUT_CLASSIFICATION	4.863596749217555E-4	DESIGN
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999717595275015	WITHOUT_CLASSIFICATION	2.8240472498558458E-5	DESIGN
// This causes the factory to instantiate the desired class.	WITHOUT_CLASSIFICATION	0.9936289533047524	WITHOUT_CLASSIFICATION	0.006371046695247576	DESIGN
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9980836830172244	WITHOUT_CLASSIFICATION	0.0019163169827755224	DESIGN
// Frontbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9995052694765106	WITHOUT_CLASSIFICATION	4.947305234893608E-4	DESIGN
/*	WITHOUT_CLASSIFICATION	0.9804982199623147	WITHOUT_CLASSIFICATION	0.01950178003768536	DESIGN
/*public Type[] getSqlResultTypes() {	WITHOUT_CLASSIFICATION	0.9973231234103405	WITHOUT_CLASSIFICATION	0.002676876589659541	DESIGN
// First, collect all of the select expressions. // NOTE: This must be done *before* invoking setScalarColumnText() because setScalarColumnText() // changes the AST!!!	WITHOUT_CLASSIFICATION	0.9910824482222953	WITHOUT_CLASSIFICATION	0.008917551777704712	DESIGN
// First allow the actual type to control the return value. (the actual underlying sqltype could actually be different)	WITHOUT_CLASSIFICATION	0.8295785928427003	WITHOUT_CLASSIFICATION	0.17042140715729978	DESIGN
//sqlResultTypeList.addAll( constructorArgumentTypeList );	WITHOUT_CLASSIFICATION	0.9978884343036607	WITHOUT_CLASSIFICATION	0.0021115656963392924	DESIGN
// If the data type is not an association type, it could not have been in the FROM clause.	WITHOUT_CLASSIFICATION	0.9976212392377487	WITHOUT_CLASSIFICATION	0.002378760762251336	DESIGN
//sqlResultTypeList.add( type );	WITHOUT_CLASSIFICATION	0.9940937358959427	WITHOUT_CLASSIFICATION	0.005906264104057244	DESIGN
// Always add the type to the return type list.	WITHOUT_CLASSIFICATION	0.9987138606087862	WITHOUT_CLASSIFICATION	0.0012861393912137545	DESIGN
// add the fetched entities	WITHOUT_CLASSIFICATION	0.9996720967796878	WITHOUT_CLASSIFICATION	3.279032203121306E-4	DESIGN
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9997737960851435	WITHOUT_CLASSIFICATION	2.2620391485660352E-4	DESIGN
// function support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997929649467197	WITHOUT_CLASSIFICATION	2.0703505328041773E-4	DESIGN
// If there are any scalars (non-entities) selected, render the select column aliases.	WITHOUT_CLASSIFICATION	0.9999933984123704	WITHOUT_CLASSIFICATION	6.601587629612678E-6	DESIGN
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9982338249437797	WITHOUT_CLASSIFICATION	0.0017661750562203082	DESIGN
/*ArrayList sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9978506171800194	WITHOUT_CLASSIFICATION	0.002149382819980599	DESIGN
//sqlResultTypes = ( Type[] ) sqlResultTypeList.toArray( new Type[sqlResultTypeList.size()] );	WITHOUT_CLASSIFICATION	0.9984913451618768	WITHOUT_CLASSIFICATION	0.0015086548381231545	DESIGN
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9982744337108542	WITHOUT_CLASSIFICATION	0.0017255662891457074	DESIGN
//TODO:	WITHOUT_CLASSIFICATION	0.968081597086698	WITHOUT_CLASSIFICATION	0.03191840291330192	DESIGN
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9996904073331158	WITHOUT_CLASSIFICATION	3.095926668842716E-4	DESIGN
// Generate an 2d array of column names, the first dimension is parallel with the // return types array.  The second dimension is the list of column names for each // type.	WITHOUT_CLASSIFICATION	0.9999991728584036	WITHOUT_CLASSIFICATION	8.271415964928787E-7	DESIGN
// Generate the select expression.	WITHOUT_CLASSIFICATION	0.999460425455563	WITHOUT_CLASSIFICATION	5.395745444370338E-4	DESIGN
// union subclass support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9959143242858125	WITHOUT_CLASSIFICATION	0.00408567571418747	DESIGN
// Skip 'DISTINCT' and 'ALL', so we return the first expression node.	WITHOUT_CLASSIFICATION	0.9999155102668024	WITHOUT_CLASSIFICATION	8.44897331976675E-5	DESIGN
// Create SQL_TOKEN nodes for the columns.	WITHOUT_CLASSIFICATION	0.9997408561910521	WITHOUT_CLASSIFICATION	2.5914380894789487E-4	DESIGN
// Generate the property select tokens.	WITHOUT_CLASSIFICATION	0.9995940203502076	WITHOUT_CLASSIFICATION	4.0597964979242435E-4	DESIGN
// Get the function name node.	WITHOUT_CLASSIFICATION	0.9999737017663879	WITHOUT_CLASSIFICATION	2.6298233612078044E-5	DESIGN
// Method expressions in a SELECT should always be considered scalar.	WITHOUT_CLASSIFICATION	0.837872810016077	DESIGN	0.16212718998392295	WITHOUT_CLASSIFICATION
// If this is 'elements' then create a new FROM element.	WITHOUT_CLASSIFICATION	0.9985394813655014	WITHOUT_CLASSIFICATION	0.0014605186344984905	DESIGN
// Not elements(x)	WITHOUT_CLASSIFICATION	0.9798751456298098	WITHOUT_CLASSIFICATION	0.020124854370190216	DESIGN
// Dialect function	WITHOUT_CLASSIFICATION	0.9998840746774094	WITHOUT_CLASSIFICATION	1.1592532259061961E-4	DESIGN
// Collection 'property function'	WITHOUT_CLASSIFICATION	0.9993195771504406	WITHOUT_CLASSIFICATION	6.804228495592848E-4	DESIGN
// If the constant is an IDENT, figure out what it means...	WITHOUT_CLASSIFICATION	0.9998047564479497	WITHOUT_CLASSIFICATION	1.9524355205021975E-4	DESIGN
// IDENT is a class alias in the FROM.	WITHOUT_CLASSIFICATION	0.9997212741375084	WITHOUT_CLASSIFICATION	2.7872586249147593E-4	DESIGN
// Resolve to an identity column.	WITHOUT_CLASSIFICATION	0.9983159715658734	WITHOUT_CLASSIFICATION	0.0016840284341266805	DESIGN
// Otherwise, it's a literal.	WITHOUT_CLASSIFICATION	0.9985837211473836	WITHOUT_CLASSIFICATION	0.001416278852616382	DESIGN
// the name of an entity class	WITHOUT_CLASSIFICATION	0.9997253794602378	WITHOUT_CLASSIFICATION	2.7462053976227827E-4	DESIGN
//the class discriminator value	WITHOUT_CLASSIFICATION	0.9984432709838916	WITHOUT_CLASSIFICATION	0.0015567290161083189	DESIGN
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9998884346906322	WITHOUT_CLASSIFICATION	1.1156530936790394E-4	DESIGN
// Add a space before the display text.	WITHOUT_CLASSIFICATION	0.9998942130664225	WITHOUT_CLASSIFICATION	1.0578693357750162E-4	DESIGN
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999599476357268	WITHOUT_CLASSIFICATION	4.0052364273219094E-5	DESIGN
// child == parent.getFirstChild()	WITHOUT_CLASSIFICATION	0.9998899579294577	WITHOUT_CLASSIFICATION	1.100420705422895E-4	DESIGN
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999599476357268	WITHOUT_CLASSIFICATION	4.0052364273219094E-5	DESIGN
// Filter conditions need to be inserted before the HQL where condition and the // theta join node.  This is because org.hibernate.loader.Loader binds the filter parameters first, // then it binds all the HQL query parameters, see org.hibernate.loader.Loader.processFilterParameters().	WITHOUT_CLASSIFICATION	0.9999693138987441	WITHOUT_CLASSIFICATION	3.06861012559006E-5	DESIGN
// Put the FILTERS node before the HQL condition and theta joins	WITHOUT_CLASSIFICATION	0.9994905072169286	WITHOUT_CLASSIFICATION	5.094927830713786E-4	DESIGN
// add the current fragment to the FILTERS node	WITHOUT_CLASSIFICATION	0.9988064052376981	WITHOUT_CLASSIFICATION	0.0011935947623018758	DESIGN
// Create a new THETA_JOINS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999101400761459	WITHOUT_CLASSIFICATION	8.985992385411884E-5	DESIGN
// Put the THETA_JOINS node before the HQL condition, after the filters.	WITHOUT_CLASSIFICATION	0.9992795560852691	WITHOUT_CLASSIFICATION	7.204439147309179E-4	DESIGN
// add the current fragment to the THETA_JOINS node	WITHOUT_CLASSIFICATION	0.9988064052376981	WITHOUT_CLASSIFICATION	0.0011935947623018758	DESIGN
// First, try to get the persister using the given name directly.	WITHOUT_CLASSIFICATION	0.9999633807061515	WITHOUT_CLASSIFICATION	3.6619293848377586E-5	DESIGN
// unable to locate it using this name	WITHOUT_CLASSIFICATION	0.9980215843236647	WITHOUT_CLASSIFICATION	0.001978415676335245	DESIGN
// If that didn't work, try using the 'import' name.	WITHOUT_CLASSIFICATION	0.9999890991795306	WITHOUT_CLASSIFICATION	1.0900820469338717E-5	DESIGN
// Implicit joins use theta style (WHERE pk = fk), explicit joins use JOIN (after from)	WITHOUT_CLASSIFICATION	0.9991602238970114	WITHOUT_CLASSIFICATION	8.39776102988547E-4	DESIGN
// locate the registered function by the given name	WITHOUT_CLASSIFICATION	0.9999911061658291	WITHOUT_CLASSIFICATION	8.893834170952156E-6	DESIGN
// determine the type of the first argument...	WITHOUT_CLASSIFICATION	0.9994311271111543	WITHOUT_CLASSIFICATION	5.688728888457098E-4	DESIGN
// Use the DOT node to emit the first column name. // Create the column names, folled by the column aliases.	WITHOUT_CLASSIFICATION	0.9999524252110077	WITHOUT_CLASSIFICATION	4.757478899222924E-5	DESIGN
// Note: this simply constructs a "raw" SQL_TOKEN representing the // where fragment and injects this into the tree.  This "works"; // however it is probably not the best long-term solution. // // At some point we probably want to apply an additional grammar to // properly tokenize this where fragment into constituent parts // focused on the operators embedded within the fragment.	WITHOUT_CLASSIFICATION	0.9995983767280077	DESIGN	4.0162327199243014E-4	WITHOUT_CLASSIFICATION
// Append the text of the current node.	WITHOUT_CLASSIFICATION	0.9999760852077472	WITHOUT_CLASSIFICATION	2.39147922528614E-5	DESIGN
// If the node has a first child, recurse into the first child.	WITHOUT_CLASSIFICATION	0.9999050745174923	WITHOUT_CLASSIFICATION	9.492548250762242E-5	DESIGN
// If there is a second child (RHS), recurse into that child.	WITHOUT_CLASSIFICATION	0.9999349513648804	WITHOUT_CLASSIFICATION	6.50486351195445E-5	DESIGN
// Iterate through the alias,JoinSequence pairs and generate SQL token nodes.	WITHOUT_CLASSIFICATION	0.9998846256865246	WITHOUT_CLASSIFICATION	1.1537431347542046E-4	DESIGN
// If the from element represents a JOIN_FRAGMENT and it is // a theta-style join, convert its type from JOIN_FRAGMENT // to FROM_FRAGMENT	WITHOUT_CLASSIFICATION	0.9997942455585952	WITHOUT_CLASSIFICATION	2.0575444140485475E-4	DESIGN
// this is used during SqlGenerator processing	WITHOUT_CLASSIFICATION	0.7886858389708942	WITHOUT_CLASSIFICATION	0.21131416102910577	DESIGN
// If there is a FROM fragment and the FROM element is an explicit, then add the from part.	WITHOUT_CLASSIFICATION	0.9991681032590559	WITHOUT_CLASSIFICATION	8.318967409440792E-4	DESIGN
/*&& StringHelper.isNotEmpty( frag )*/	WITHOUT_CLASSIFICATION	0.9979249567827073	WITHOUT_CLASSIFICATION	0.0020750432172926725	DESIGN
// The FROM fragment will probably begin with ', '.  Remove this if it is present.	WITHOUT_CLASSIFICATION	0.9720353691227253	WITHOUT_CLASSIFICATION	0.027964630877274656	DESIGN
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9821872986834344	WITHOUT_CLASSIFICATION	0.01781270131656561	DESIGN
// SELECT p FROM p IN CLASS eg.Person ORDER BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9965026180037467	WITHOUT_CLASSIFICATION	0.0034973819962533167	DESIGN
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.9999698163860891	WITHOUT_CLASSIFICATION	3.0183613910878512E-5	DESIGN
//named query parameter	WITHOUT_CLASSIFICATION	0.9959999270161269	WITHOUT_CLASSIFICATION	0.004000072983873103	DESIGN
//default mode	WITHOUT_CLASSIFICATION	0.9925875519332704	WITHOUT_CLASSIFICATION	0.007412448066729595	DESIGN
//QueryJoinFragment join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9994902808290794	WITHOUT_CLASSIFICATION	5.097191709205596E-4	DESIGN
//reset the dotcount (but not the path) //after reset!	WITHOUT_CLASSIFICATION	0.9945209007626368	WITHOUT_CLASSIFICATION	0.005479099237363212	DESIGN
//after reset!	WITHOUT_CLASSIFICATION	0.9967688892480616	WITHOUT_CLASSIFICATION	0.003231110751938361	DESIGN
// we don't need to worry about any condition in the ON clause // here (toFromFragmentString), since anything in the ON condition // is already applied to the whole query	WITHOUT_CLASSIFICATION	0.9986446522339189	WITHOUT_CLASSIFICATION	0.0013553477660812148	DESIGN
// bit_length feels a bit broken to me. We have to cast to char in order to // pass when a numeric value is supplied. But of course the answers given will // be wildly different for these two datatypes. 1234.5678 will be 9 bytes as // a char string but will be 8 or 16 bytes as a true numeric. // Jay Nance 2006-09-22	WITHOUT_CLASSIFICATION	0.9999710801743915	WITHOUT_CLASSIFICATION	2.8919825608454397E-5	DESIGN
// dotcount>=2	WITHOUT_CLASSIFICATION	0.9991103531722325	WITHOUT_CLASSIFICATION	8.896468277674399E-4	DESIGN
// Do the corresponding RHS	WITHOUT_CLASSIFICATION	0.9994382894744467	WITHOUT_CLASSIFICATION	5.617105255532472E-4	DESIGN
//if its "id"	WITHOUT_CLASSIFICATION	0.9988107223097928	WITHOUT_CLASSIFICATION	0.001189277690207165	DESIGN
//or its the id property name	WITHOUT_CLASSIFICATION	0.9985928153819119	WITHOUT_CLASSIFICATION	0.0014071846180880592	DESIGN
//join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9990302159699643	WITHOUT_CLASSIFICATION	9.697840300357113E-4	DESIGN
//important!!	WITHOUT_CLASSIFICATION	0.9967688892480616	WITHOUT_CLASSIFICATION	0.003231110751938361	DESIGN
//String[] keyCols = collPersister.getKeyColumnNames();	WITHOUT_CLASSIFICATION	0.9990302159699643	WITHOUT_CLASSIFICATION	9.697840300357113E-4	DESIGN
// an association	WITHOUT_CLASSIFICATION	0.9993816348351046	WITHOUT_CLASSIFICATION	6.183651648953368E-4	DESIGN
//allow index() function:	WITHOUT_CLASSIFICATION	0.9982501683676528	WITHOUT_CLASSIFICATION	0.0017498316323471983	DESIGN
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9768022719198772	WITHOUT_CLASSIFICATION	0.023197728080122722	DESIGN
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.9999698163860891	WITHOUT_CLASSIFICATION	3.0183613910878512E-5	DESIGN
//many-to-many	WITHOUT_CLASSIFICATION	0.9967688892480616	WITHOUT_CLASSIFICATION	0.003231110751938361	DESIGN
// collections of values	WITHOUT_CLASSIFICATION	0.9999460883342782	WITHOUT_CLASSIFICATION	5.3911665721761035E-5	DESIGN
//opening paren in new Foo ( ... )	WITHOUT_CLASSIFICATION	0.9907878683216792	WITHOUT_CLASSIFICATION	0.009212131678320865	DESIGN
//if we are inside a new Result(), but not inside a nested function	WITHOUT_CLASSIFICATION	0.9946222884150393	WITHOUT_CLASSIFICATION	0.005377711584960719	DESIGN
//special case	WITHOUT_CLASSIFICATION	0.9993679494015373	WITHOUT_CLASSIFICATION	6.320505984626703E-4	DESIGN
// the name of an SQL function	WITHOUT_CLASSIFICATION	0.9999836107057501	WITHOUT_CLASSIFICATION	1.6389294249747667E-5	DESIGN
//null child could occur for no from clause in a filter	WITHOUT_CLASSIFICATION	0.9838365676773136	WITHOUT_CLASSIFICATION	0.01616343232268639	DESIGN
//this is basically a copy/paste of OrderByParser ... might be worth refactoring	WITHOUT_CLASSIFICATION	0.6995813489757602	DESIGN	0.3004186510242399	WITHOUT_CLASSIFICATION
// SELECT p FROM p IN CLASS eg.Person GROUP BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9953533299859143	WITHOUT_CLASSIFICATION	0.004646670014085713	DESIGN
// return aliases not supported in classic translator!	WITHOUT_CLASSIFICATION	0.9990335533349698	WITHOUT_CLASSIFICATION	9.664466650302133E-4	DESIGN
//register collection role	WITHOUT_CLASSIFICATION	0.9909887863749991	WITHOUT_CLASSIFICATION	0.009011213625000992	DESIGN
// The keyword used to specify an identity column, if identity column key generation is supported.	WITHOUT_CLASSIFICATION	0.9993949138228932	WITHOUT_CLASSIFICATION	6.050861771067719E-4	DESIGN
//.getElementPropertyMapping();	WITHOUT_CLASSIFICATION	0.9978506171800194	WITHOUT_CLASSIFICATION	0.002149382819980599	DESIGN
//crossJoins.add(name);	WITHOUT_CLASSIFICATION	0.9982338249437797	WITHOUT_CLASSIFICATION	0.0017661750562203082	DESIGN
//ie no select clause in HQL	WITHOUT_CLASSIFICATION	0.9993974972776162	WITHOUT_CLASSIFICATION	6.02502722383937E-4	DESIGN
// initialize the Set of queried identifier spaces (ie. tables)	WITHOUT_CLASSIFICATION	0.99972178309497	WITHOUT_CLASSIFICATION	2.782169050300456E-4	DESIGN
//ie. no select clause	WITHOUT_CLASSIFICATION	0.9994247925263039	WITHOUT_CLASSIFICATION	5.752074736961793E-4	DESIGN
//there _was_ a select clause	WITHOUT_CLASSIFICATION	0.9984350503131414	WITHOUT_CLASSIFICATION	0.0015649496868586842	DESIGN
// return the concrete type, or the underlying type if a concrete type // was not specified	WITHOUT_CLASSIFICATION	0.9979586076319601	WITHOUT_CLASSIFICATION	0.002041392368040002	DESIGN
//many-to-many	WITHOUT_CLASSIFICATION	0.9967688892480616	WITHOUT_CLASSIFICATION	0.003231110751938361	DESIGN
//q.addCollection(collectionName, collectionRole);	WITHOUT_CLASSIFICATION	0.9978506171800194	WITHOUT_CLASSIFICATION	0.002149382819980599	DESIGN
// classic parser does not support bulk manipulation statements	WITHOUT_CLASSIFICATION	0.9880836158242582	WITHOUT_CLASSIFICATION	0.01191638417574173	DESIGN
// can't cache this stuff either (per-invocation)	WITHOUT_CLASSIFICATION	0.9966622711839969	WITHOUT_CLASSIFICATION	0.0033377288160030523	DESIGN
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9925568257051197	WITHOUT_CLASSIFICATION	0.007443174294880202	DESIGN
// This is the legacy behaviour for HQL queries...	WITHOUT_CLASSIFICATION	0.9979521896858992	WITHOUT_CLASSIFICATION	0.00204781031410086	DESIGN
// not known!	WITHOUT_CLASSIFICATION	0.9959682919829171	WITHOUT_CLASSIFICATION	0.004031708017082868	DESIGN
// not known!	WITHOUT_CLASSIFICATION	0.9959682919829171	WITHOUT_CLASSIFICATION	0.004031708017082868	DESIGN
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9997017919245007	WITHOUT_CLASSIFICATION	2.9820807549925794E-4	DESIGN
// not known!	WITHOUT_CLASSIFICATION	0.9959682919829171	WITHOUT_CLASSIFICATION	0.004031708017082868	DESIGN
// not known!	WITHOUT_CLASSIFICATION	0.9959682919829171	WITHOUT_CLASSIFICATION	0.004031708017082868	DESIGN
//Need this, since join condition can appear inside parens!	WITHOUT_CLASSIFICATION	0.9976574392732382	WITHOUT_CLASSIFICATION	0.002342560726761838	DESIGN
//tokens that close a sub expression //tokens that open a sub expression //tokens that would indicate a sub expression is a boolean expression	WITHOUT_CLASSIFICATION	0.9999978924628279	WITHOUT_CLASSIFICATION	2.1075371720243906E-6	DESIGN
//expressionTerminators.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.9998152164243346	WITHOUT_CLASSIFICATION	1.847835756653875E-4	DESIGN
//expressionOpeners.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.9998152164243346	WITHOUT_CLASSIFICATION	1.847835756653875E-4	DESIGN
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource) // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9979799378703461	WITHOUT_CLASSIFICATION	0.0020200621296539555	DESIGN
// otherwise, a trim-specification and/or a trim-character // have been specified;  we need to decide which options // are present and "do the right thing" // should leading trim-characters be trimmed? // should trailing trim-characters be trimmed? // the trim-character (what is to be trimmed off?) // the trim-source (from where should it be trimmed?)	WITHOUT_CLASSIFICATION	0.986150506731711	WITHOUT_CLASSIFICATION	0.01384949326828901	DESIGN
//Inside a BETWEEN ... AND ... expression	WITHOUT_CLASSIFICATION	0.996388200039541	WITHOUT_CLASSIFICATION	0.003611799960458984	DESIGN
//were an odd or even number of NOTs encountered //the join string built up by compound paths inside this expression //a flag indicating if the subexpression is known to be boolean	WITHOUT_CLASSIFICATION	0.9999674331520673	WITHOUT_CLASSIFICATION	3.256684793283817E-5	DESIGN
//ie. a many-to-many	WITHOUT_CLASSIFICATION	0.9928777281152057	WITHOUT_CLASSIFICATION	0.007122271884794228	DESIGN
//Cope with [,]	WITHOUT_CLASSIFICATION	0.9955483629522544	WITHOUT_CLASSIFICATION	0.004451637047745674	DESIGN
//Cope with a continued path expression (ie. ].baz)	WITHOUT_CLASSIFICATION	0.998581593654749	WITHOUT_CLASSIFICATION	0.0014184063452510195	DESIGN
//NOTE: early return	WITHOUT_CLASSIFICATION	0.9972812034782566	WITHOUT_CLASSIFICATION	0.0027187965217434044	DESIGN
//Cope with a subselect	WITHOUT_CLASSIFICATION	0.9946281037477958	WITHOUT_CLASSIFICATION	0.005371896252204167	DESIGN
//Cope with special cases of AND, NOT, ()	WITHOUT_CLASSIFICATION	0.999970474137677	WITHOUT_CLASSIFICATION	2.9525862322917376E-5	DESIGN
//Close extra brackets we opened	WITHOUT_CLASSIFICATION	0.9946868647956171	WITHOUT_CLASSIFICATION	0.0053131352043829135	DESIGN
//take note when this is a boolean expression	WITHOUT_CLASSIFICATION	0.9862969611418605	WITHOUT_CLASSIFICATION	0.01370303885813955	DESIGN
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999840745290619	WITHOUT_CLASSIFICATION	1.592547093811125E-5	DESIGN
//process a token, mapping OO path expressions to SQL expressions	WITHOUT_CLASSIFICATION	0.9934265082250974	WITHOUT_CLASSIFICATION	0.006573491774902631	DESIGN
//Open any extra brackets we might need.	WITHOUT_CLASSIFICATION	0.9615644530778433	WITHOUT_CLASSIFICATION	0.03843554692215669	DESIGN
//Cope with special cases of AND, NOT, )	WITHOUT_CLASSIFICATION	0.9963941654631197	WITHOUT_CLASSIFICATION	0.0036058345368803475	DESIGN
// the next one up must also be	WITHOUT_CLASSIFICATION	0.99835004817861	WITHOUT_CLASSIFICATION	0.0016499518213900818	DESIGN
// Add any joins	WITHOUT_CLASSIFICATION	0.9994337893274744	WITHOUT_CLASSIFICATION	5.662106725256017E-4	DESIGN
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999840745290619	WITHOUT_CLASSIFICATION	1.592547093811125E-5	DESIGN
//named query parameter	WITHOUT_CLASSIFICATION	0.9959999270161269	WITHOUT_CLASSIFICATION	0.004000072983873103	DESIGN
//path expression	WITHOUT_CLASSIFICATION	0.999066587677173	WITHOUT_CLASSIFICATION	9.334123228269622E-4	DESIGN
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9994984397224403	WITHOUT_CLASSIFICATION	5.015602775596679E-4	DESIGN
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.999350279825573	WITHOUT_CLASSIFICATION	6.497201744270536E-4	DESIGN
//anything else	WITHOUT_CLASSIFICATION	0.9988901150223924	WITHOUT_CLASSIFICATION	0.0011098849776075242	DESIGN
// the path expression continues after a ]	WITHOUT_CLASSIFICATION	0.9998735797090557	WITHOUT_CLASSIFICATION	1.2642029094430025E-4	DESIGN
// careful with this!	WITHOUT_CLASSIFICATION	0.9986751359642367	WITHOUT_CLASSIFICATION	0.001324864035763275	DESIGN
// the path expression ends at the ]	WITHOUT_CLASSIFICATION	0.9998616222504656	WITHOUT_CLASSIFICATION	1.3837774953443213E-4	DESIGN
// "finish off" the join	WITHOUT_CLASSIFICATION	0.9999100373988441	WITHOUT_CLASSIFICATION	8.996260115591883E-5	DESIGN
//NOTICE: no " or . since they are part of (compound) identifiers	WITHOUT_CLASSIFICATION	0.9997027086849684	WITHOUT_CLASSIFICATION	2.972913150315657E-4	DESIGN
//cannot instantiate	WITHOUT_CLASSIFICATION	0.9976951042839196	WITHOUT_CLASSIFICATION	0.0023048957160803404	DESIGN
// start by looking for HQL keywords...	WITHOUT_CLASSIFICATION	0.9998467210125831	WITHOUT_CLASSIFICATION	1.5327898741689789E-4	DESIGN
// inner joins can be abbreviated to 'join'	WITHOUT_CLASSIFICATION	0.9992425144354948	WITHOUT_CLASSIFICATION	7.574855645052212E-4	DESIGN
// 'outer' is optional and is ignored	WITHOUT_CLASSIFICATION	0.9997487326778466	WITHOUT_CLASSIFICATION	2.512673221533732E-4	DESIGN
// now anything that is not a HQL keyword	WITHOUT_CLASSIFICATION	0.9992005529642984	WITHOUT_CLASSIFICATION	7.994470357015689E-4	DESIGN
// process the "old" HQL style where aliases appear _first_ // ie. using the IN or IN CLASS constructions	WITHOUT_CLASSIFICATION	0.9992466892299932	WITHOUT_CLASSIFICATION	7.533107700068856E-4	DESIGN
// treat it as a classname	WITHOUT_CLASSIFICATION	0.9997527265687678	WITHOUT_CLASSIFICATION	2.4727343123222273E-4	DESIGN
// treat it as a path expression	WITHOUT_CLASSIFICATION	0.9999267271472332	WITHOUT_CLASSIFICATION	7.327285276684578E-5	DESIGN
// starts with the name of a mapped class (new style)	WITHOUT_CLASSIFICATION	0.9983865703267883	WITHOUT_CLASSIFICATION	0.001613429673211574	DESIGN
// starts with a path expression (new style)	WITHOUT_CLASSIFICATION	0.999623817409266	WITHOUT_CLASSIFICATION	3.7618259073396806E-4	DESIGN
//allow ODMG OQL style: from Person p, p.cars c	WITHOUT_CLASSIFICATION	0.9982543673618033	WITHOUT_CLASSIFICATION	0.0017456326381967077	DESIGN
//handle quoted strings	WITHOUT_CLASSIFICATION	0.9950447192441356	WITHOUT_CLASSIFICATION	0.0049552807558642855	DESIGN
// Object insertions, updates, and deletions have list semantics because // they must happen in the right order so as to respect referential // integrity	WITHOUT_CLASSIFICATION	0.9999004537806154	WITHOUT_CLASSIFICATION	9.954621938453673E-5	DESIGN
// "finish off" the join	WITHOUT_CLASSIFICATION	0.9999100373988441	WITHOUT_CLASSIFICATION	8.996260115591883E-5	DESIGN
//ignore whitespace	WITHOUT_CLASSIFICATION	0.9977814681817507	WITHOUT_CLASSIFICATION	0.002218531818249328	DESIGN
//do replacements	WITHOUT_CLASSIFICATION	0.9981088712773352	WITHOUT_CLASSIFICATION	0.001891128722664864	DESIGN
//handle HQL2 collection syntax	WITHOUT_CLASSIFICATION	0.9923491270225048	WITHOUT_CLASSIFICATION	0.007650872977495327	DESIGN
// uuid.hex is deprecated	WITHOUT_CLASSIFICATION	0.9968079064941454	WITHOUT_CLASSIFICATION	0.00319209350585464	DESIGN
// AbstractSelectingDelegate impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994710384654842	WITHOUT_CLASSIFICATION	5.28961534515837E-4	DESIGN
//hilo params	WITHOUT_CLASSIFICATION	0.9969323177342989	WITHOUT_CLASSIFICATION	0.0030676822657010167	DESIGN
//sql = query;	WITHOUT_CLASSIFICATION	0.9985559552189694	WITHOUT_CLASSIFICATION	0.0014440447810304675	DESIGN
// performance opt	WITHOUT_CLASSIFICATION	0.9972987454722411	WITHOUT_CLASSIFICATION	0.00270125452775889	DESIGN
//sql = update;	WITHOUT_CLASSIFICATION	0.9985412812836268	WITHOUT_CLASSIFICATION	0.001458718716373119	DESIGN
//hilo config	WITHOUT_CLASSIFICATION	0.9977793389308641	WITHOUT_CLASSIFICATION	0.002220661069135852	DESIGN
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.999615661656979	WITHOUT_CLASSIFICATION	3.8433834302100854E-4	DESIGN
// don't allow comments on these insert statements as comments totally // blow up the Oracle getGeneratedKeys "support" :(	WITHOUT_CLASSIFICATION	0.9979538692646287	WITHOUT_CLASSIFICATION	0.0020461307353712224	DESIGN
//abort the save (the object is already saved by a circular cascade)	WITHOUT_CLASSIFICATION	0.9855941028538355	WITHOUT_CLASSIFICATION	0.014405897146164475	DESIGN
//throw new IdentifierGenerationException("save associated object first, or disable cascade for inverse association");	WITHOUT_CLASSIFICATION	0.9998424328430201	WITHOUT_CLASSIFICATION	1.5756715697996514E-4	DESIGN
// intentionally empty	WITHOUT_CLASSIFICATION	0.9993201763465654	WITHOUT_CLASSIFICATION	6.798236534346502E-4	DESIGN
//do nothing to avoid a lazy property initialization	WITHOUT_CLASSIFICATION	0.9997634106005514	WITHOUT_CLASSIFICATION	2.3658939944861966E-4	DESIGN
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9976304430935327	WITHOUT_CLASSIFICATION	0.0023695569064673774	DESIGN
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.999615661656979	WITHOUT_CLASSIFICATION	3.8433834302100854E-4	DESIGN
// do nothing until we hit the rsult set containing the generated id	WITHOUT_CLASSIFICATION	0.9994263612965525	WITHOUT_CLASSIFICATION	5.736387034474796E-4	DESIGN
/* COLUMN and TABLE should be renamed but it would break the public API */	WITHOUT_CLASSIFICATION	0.9977839037194243	WITHOUT_CLASSIFICATION	0.0022160962805757322	DESIGN
// Loaded entity instances, by EntityKey	WITHOUT_CLASSIFICATION	0.9997302589940706	WITHOUT_CLASSIFICATION	2.6974100592944E-4	DESIGN
// if the given name is un-qualified we may neen to qualify it	WITHOUT_CLASSIFICATION	0.9997056145052701	WITHOUT_CLASSIFICATION	2.943854947299101E-4	DESIGN
// the default...	WITHOUT_CLASSIFICATION	0.9994103217133721	WITHOUT_CLASSIFICATION	5.89678286627969E-4	DESIGN
// unfortunately not really safe to normalize this // to 1 as an initial value like we do the others // because we would not be able to control this if // we are using a sequence...	WITHOUT_CLASSIFICATION	0.9960341503844893	WITHOUT_CLASSIFICATION	0.0039658496155106976	DESIGN
// intentionally empty	WITHOUT_CLASSIFICATION	0.9993201763465654	WITHOUT_CLASSIFICATION	6.798236534346502E-4	DESIGN
// Identity map of CollectionEntry instances, by the collection wrapper	WITHOUT_CLASSIFICATION	0.9999660124187354	WITHOUT_CLASSIFICATION	3.3987581264656137E-5	DESIGN
// general purpose parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998447817119365	WITHOUT_CLASSIFICATION	1.552182880635786E-4	DESIGN
// table-specific parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999022873379915	WITHOUT_CLASSIFICATION	9.771266200851423E-5	DESIGN
// Configurable implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993993110781648	WITHOUT_CLASSIFICATION	6.006889218350899E-4	DESIGN
// IdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993993110781648	WITHOUT_CLASSIFICATION	6.006889218350899E-4	DESIGN
// PersistentIdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993993110781648	WITHOUT_CLASSIFICATION	6.006889218350899E-4	DESIGN
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9997733221745859	WITHOUT_CLASSIFICATION	2.266778254140768E-4	DESIGN
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9997733221745859	WITHOUT_CLASSIFICATION	2.266778254140768E-4	DESIGN
//fetch the generated id in a separate query	WITHOUT_CLASSIFICATION	0.9886206319065073	WITHOUT_CLASSIFICATION	0.01137936809349272	DESIGN
// we just hit the last position	WITHOUT_CLASSIFICATION	0.9988518420075899	WITHOUT_CLASSIFICATION	0.0011481579924100226	DESIGN
// scroll ahead	WITHOUT_CLASSIFICATION	0.999225585215005	WITHOUT_CLASSIFICATION	7.744147849949346E-4	DESIGN
// scroll backward	WITHOUT_CLASSIFICATION	0.9992358839414904	WITHOUT_CLASSIFICATION	7.641160585094742E-4	DESIGN
// we have not yet hit the last result...	WITHOUT_CLASSIFICATION	0.9979870071766546	WITHOUT_CLASSIFICATION	0.002012992823345463	DESIGN
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994326559501996	WITHOUT_CLASSIFICATION	5.673440498004439E-4	DESIGN
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995882612728779	WITHOUT_CLASSIFICATION	4.117387271220677E-4	DESIGN
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994710384654842	WITHOUT_CLASSIFICATION	5.28961534515837E-4	DESIGN
// do this when all the properties are updateable since there is // a certain likelihood that the information will already be // snapshot-cached.	WITHOUT_CLASSIFICATION	0.9993253078532724	WITHOUT_CLASSIFICATION	6.746921467274906E-4	DESIGN
// Inner classes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997525703251194	WITHOUT_CLASSIFICATION	2.474296748805677E-4	DESIGN
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994326559501996	WITHOUT_CLASSIFICATION	5.673440498004439E-4	DESIGN
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995882612728779	WITHOUT_CLASSIFICATION	4.117387271220677E-4	DESIGN
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994710384654842	WITHOUT_CLASSIFICATION	5.28961534515837E-4	DESIGN
// Caches	WITHOUT_CLASSIFICATION	0.9998122686237135	WITHOUT_CLASSIFICATION	1.87731376286521E-4	DESIGN
//Generators:	WITHOUT_CLASSIFICATION	0.9967688892480616	WITHOUT_CLASSIFICATION	0.003231110751938361	DESIGN
// cache region is defined by the root-class in the hierarchy...	WITHOUT_CLASSIFICATION	0.9998120610520896	WITHOUT_CLASSIFICATION	1.8793894791030224E-4	DESIGN
//check if the detached object being merged is the parent	WITHOUT_CLASSIFICATION	0.9998071856921235	WITHOUT_CLASSIFICATION	1.9281430787650833E-4	DESIGN
// after *all* persisters and named queries are registered	WITHOUT_CLASSIFICATION	0.9993302001748343	WITHOUT_CLASSIFICATION	6.697998251657731E-4	DESIGN
// if we get here, it is possible that we have a proxy 'in the way' of the merge map resolution... // 	WITHOUT_CLASSIFICATION	0.999984820228965	WITHOUT_CLASSIFICATION	1.5179771034973308E-5	DESIGN
//JNDI + Serialization:	WITHOUT_CLASSIFICATION	0.9994279019247787	WITHOUT_CLASSIFICATION	5.720980752213498E-4	DESIGN
//checking for named queries	WITHOUT_CLASSIFICATION	0.9991463882155134	WITHOUT_CLASSIFICATION	8.536117844865265E-4	DESIGN
//stats	WITHOUT_CLASSIFICATION	0.9993169148631355	WITHOUT_CLASSIFICATION	6.830851368645701E-4	DESIGN
// EntityNotFoundDelegate	WITHOUT_CLASSIFICATION	0.9995142226641992	WITHOUT_CLASSIFICATION	4.8577733580084E-4	DESIGN
// Check named HQL queries	WITHOUT_CLASSIFICATION	0.999812474784403	WITHOUT_CLASSIFICATION	1.8752521559689439E-4	DESIGN
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9936542014153454	WITHOUT_CLASSIFICATION	0.006345798584654536	DESIGN
//prevents this session from adding things to cache	WITHOUT_CLASSIFICATION	0.9207906338192277	WITHOUT_CLASSIFICATION	0.07920936618077237	DESIGN
// from javax.naming.Referenceable	WITHOUT_CLASSIFICATION	0.999187205254994	WITHOUT_CLASSIFICATION	8.127947450059705E-4	DESIGN
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9996580185986755	WITHOUT_CLASSIFICATION	3.4198140132438035E-4	DESIGN
//for a dynamic-class	WITHOUT_CLASSIFICATION	0.9975735833213657	WITHOUT_CLASSIFICATION	0.002426416678634389	DESIGN
//test this entity to see if we must query it	WITHOUT_CLASSIFICATION	0.9740932791471903	WITHOUT_CLASSIFICATION	0.025906720852809602	DESIGN
//NOTE EARLY EXIT	WITHOUT_CLASSIFICATION	0.9967688892480616	WITHOUT_CLASSIFICATION	0.003231110751938361	DESIGN
// for backward-compatability	WITHOUT_CLASSIFICATION	0.9994989854505294	WITHOUT_CLASSIFICATION	5.010145494706165E-4	DESIGN
// ignore this error for now	WITHOUT_CLASSIFICATION	0.9968856289367748	WITHOUT_CLASSIFICATION	0.003114371063225268	DESIGN
//to stop the class from being unloaded	WITHOUT_CLASSIFICATION	0.9993752825081823	WITHOUT_CLASSIFICATION	6.247174918177309E-4	DESIGN
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9669945444459744	WITHOUT_CLASSIFICATION	0.033005455554025634	DESIGN
//must add to JNDI _after_ adding to HashMaps, because some JNDI servers use serialization	WITHOUT_CLASSIFICATION	0.9966718794132171	WITHOUT_CLASSIFICATION	0.0033281205867829572	DESIGN
// Make sure this is a defined parameter and check the incoming value type	WITHOUT_CLASSIFICATION	0.996736859029399	WITHOUT_CLASSIFICATION	0.003263140970600979	DESIGN
// for each of the defined parameters, make sure its value // has been set	WITHOUT_CLASSIFICATION	0.9998953768306804	WITHOUT_CLASSIFICATION	1.0462316931956181E-4	DESIGN
//we never need to apply locks to the SQL	WITHOUT_CLASSIFICATION	0.9933979309352969	WITHOUT_CLASSIFICATION	0.0066020690647030904	DESIGN
// inserts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994086587758717	WITHOUT_CLASSIFICATION	5.913412241282598E-4	DESIGN
// deletes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993949451886533	WITHOUT_CLASSIFICATION	6.050548113466246E-4	DESIGN
// during deserialization, we need to reconnect all proxies and // collections to this session, as well as the EntityEntry and // CollectionEntry instances; these associations are transient // because serialization is used for different things.	WITHOUT_CLASSIFICATION	0.7492268022524046	WITHOUT_CLASSIFICATION	0.25077319774759543	DESIGN
// updates ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996689787322811	WITHOUT_CLASSIFICATION	3.3102126771883405E-4	DESIGN
// loading ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998743185102811	WITHOUT_CLASSIFICATION	1.256814897190167E-4	DESIGN
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9985848678891307	WITHOUT_CLASSIFICATION	0.0014151321108692653	DESIGN
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9985848678891307	WITHOUT_CLASSIFICATION	0.0014151321108692653	DESIGN
// first, try to load it from the temp PC associated to this SS	WITHOUT_CLASSIFICATION	0.9999609697745685	WITHOUT_CLASSIFICATION	3.903022543149168E-5	DESIGN
// if the metadata allowed proxy creation and caller did not request forceful eager loading, // generate a proxy	WITHOUT_CLASSIFICATION	0.999986553841801	WITHOUT_CLASSIFICATION	1.3446158199012924E-5	DESIGN
// otherwise immediately materialize it	WITHOUT_CLASSIFICATION	0.9996115069866598	WITHOUT_CLASSIFICATION	3.884930133401471E-4	DESIGN
/////////////////////////////////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9978506171800194	WITHOUT_CLASSIFICATION	0.002149382819980599	DESIGN
// no auto-flushing to support in stateless session	WITHOUT_CLASSIFICATION	0.9962978291650515	WITHOUT_CLASSIFICATION	0.0037021708349485815	DESIGN
//after setting values to object, entityMode	WITHOUT_CLASSIFICATION	0.9999289787765219	WITHOUT_CLASSIFICATION	7.102122347814468E-5	DESIGN
//for EJB3	WITHOUT_CLASSIFICATION	0.999575536077136	WITHOUT_CLASSIFICATION	4.2446392286405864E-4	DESIGN
// just ignore	WITHOUT_CLASSIFICATION	0.9987714606038002	WITHOUT_CLASSIFICATION	0.0012285393961997358	DESIGN
// do a check	WITHOUT_CLASSIFICATION	0.9990936597904068	WITHOUT_CLASSIFICATION	9.063402095933546E-4	DESIGN
// saveOrUpdate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995905122545683	WITHOUT_CLASSIFICATION	4.0948774543172453E-4	DESIGN
// update() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995905122545683	WITHOUT_CLASSIFICATION	4.0948774543172453E-4	DESIGN
// lock() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995905122545683	WITHOUT_CLASSIFICATION	4.0948774543172453E-4	DESIGN
// persist() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995905122545683	WITHOUT_CLASSIFICATION	4.0948774543172453E-4	DESIGN
// persistOnFlush() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995905122545683	WITHOUT_CLASSIFICATION	4.0948774543172453E-4	DESIGN
// merge() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995905122545683	WITHOUT_CLASSIFICATION	4.0948774543172453E-4	DESIGN
// saveOrUpdateCopy() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995905122545683	WITHOUT_CLASSIFICATION	4.0948774543172453E-4	DESIGN
// delete() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995221357802915	WITHOUT_CLASSIFICATION	4.7786421970852903E-4	DESIGN
// load()/get() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995905122545683	WITHOUT_CLASSIFICATION	4.0948774543172453E-4	DESIGN
// refresh() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995905122545683	WITHOUT_CLASSIFICATION	4.0948774543172453E-4	DESIGN
// replicate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995905122545683	WITHOUT_CLASSIFICATION	4.0948774543172453E-4	DESIGN
// do not auto-flush while outside a transaction	WITHOUT_CLASSIFICATION	0.9931882117449918	WITHOUT_CLASSIFICATION	0.006811788255008111	DESIGN
// this is an internal error of some sort...	WITHOUT_CLASSIFICATION	0.9970637593121824	WITHOUT_CLASSIFICATION	0.0029362406878175313	DESIGN
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9865802700340215	WITHOUT_CLASSIFICATION	0.01341972996597858	DESIGN
//only collections belonging to deleted entities are allowed to be dereferenced in the case of orphan delete	WITHOUT_CLASSIFICATION	0.999968965764132	WITHOUT_CLASSIFICATION	3.103423586808596E-5	DESIGN
// if it was previously unreferenced, we need to flush in order to // get its state into the database in order to execute query	WITHOUT_CLASSIFICATION	0.9935655622786664	WITHOUT_CLASSIFICATION	0.006434437721333534	DESIGN
// not for internal use:	WITHOUT_CLASSIFICATION	0.9959675499985581	WITHOUT_CLASSIFICATION	0.004032450001441911	DESIGN
// otherwise, we only need to flush if there are in-memory changes // to the queried tables	WITHOUT_CLASSIFICATION	0.9971782943123109	WITHOUT_CLASSIFICATION	0.002821705687689213	DESIGN
// might need to run a different filter entirely after the flush // because the collection role may have changed	WITHOUT_CLASSIFICATION	0.9222272557738167	WITHOUT_CLASSIFICATION	0.07777274422618335	DESIGN
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9865802700340215	WITHOUT_CLASSIFICATION	0.01341972996597858	DESIGN
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9865802700340215	WITHOUT_CLASSIFICATION	0.01341972996597858	DESIGN
//if it is initialized, see if the underlying //instance is contained, since we need to  //account for the fact that it might have been //evicted	WITHOUT_CLASSIFICATION	0.9789961750905366	WITHOUT_CLASSIFICATION	0.021003824909463408	DESIGN
// basically just an adapted copy of find(CriteriaImpl)	WITHOUT_CLASSIFICATION	0.9998328923817462	WITHOUT_CLASSIFICATION	1.6710761825384729E-4	DESIGN
// it is possible for this method to be called during flush processing, // so make certain that we do not accidently initialize an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9930019085385834	WITHOUT_CLASSIFICATION	0.006998091461416683	DESIGN
// nothing to do in a stateful session	WITHOUT_CLASSIFICATION	0.9985400662555691	WITHOUT_CLASSIFICATION	0.0014599337444307799	DESIGN
// ignore	WITHOUT_CLASSIFICATION	0.9997047648977977	WITHOUT_CLASSIFICATION	2.9523510220236406E-4	DESIGN
// ignore this error for now	WITHOUT_CLASSIFICATION	0.9968856289367748	WITHOUT_CLASSIFICATION	0.003114371063225268	DESIGN
// we need to writeObject() on this since interceptor is user defined	WITHOUT_CLASSIFICATION	0.9959863660578367	WITHOUT_CLASSIFICATION	0.004013633942163195	DESIGN
// the old-time stand-by...	WITHOUT_CLASSIFICATION	0.9996780595390214	WITHOUT_CLASSIFICATION	3.2194046097862143E-4	DESIGN
// parameter bind values...	WITHOUT_CLASSIFICATION	0.9991104789427335	WITHOUT_CLASSIFICATION	8.895210572665963E-4	DESIGN
// Parameter handling code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9898025906453122	WITHOUT_CLASSIFICATION	0.010197409354687922	DESIGN
// prepend value and type list with null for any positions before the wanted position.	WITHOUT_CLASSIFICATION	0.9983529129905944	WITHOUT_CLASSIFICATION	0.0016470870094056633	DESIGN
// Execution methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993094370563101	WITHOUT_CLASSIFICATION	6.90562943689907E-4	DESIGN
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9988570893809504	WITHOUT_CLASSIFICATION	0.0011429106190496063	DESIGN
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9988570893809504	WITHOUT_CLASSIFICATION	0.0011429106190496063	DESIGN
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9988570893809504	WITHOUT_CLASSIFICATION	0.0011429106190496063	DESIGN
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9988570893809504	WITHOUT_CLASSIFICATION	0.0011429106190496063	DESIGN
// FieldInterceptor impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994710384654842	WITHOUT_CLASSIFICATION	5.28961534515837E-4	DESIGN
// subclass accesses ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9990325873106692	WITHOUT_CLASSIFICATION	9.67412689330851E-4	DESIGN
//let's assume that there is only one lazy fetch group, for now!	WITHOUT_CLASSIFICATION	0.9999024557215658	WITHOUT_CLASSIFICATION	9.754427843427245E-5	DESIGN
// FieldHandler impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994710384654842	WITHOUT_CLASSIFICATION	5.28961534515837E-4	DESIGN
// should *not* need to grow beyond the size of the total number of columns in the rs	WITHOUT_CLASSIFICATION	0.9984851112760159	WITHOUT_CLASSIFICATION	0.0015148887239840485	DESIGN
// should probably no-op commit/rollback here, at least in JTA scenarios	WITHOUT_CLASSIFICATION	0.9925366840942101	WITHOUT_CLASSIFICATION	0.0074633159057898866	DESIGN
// Base Expectation impls ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995673064432421	WITHOUT_CLASSIFICATION	4.32693556757893E-4	DESIGN
// Various Expectation instances ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996620382366905	WITHOUT_CLASSIFICATION	3.379617633094447E-4	DESIGN
// explicitly perform no checking...	WITHOUT_CLASSIFICATION	0.9979626535562255	WITHOUT_CLASSIFICATION	0.0020373464437744506	DESIGN
// used from testsuite	WITHOUT_CLASSIFICATION	0.9082063174109107	WITHOUT_CLASSIFICATION	0.09179368258908928	DESIGN
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9995748280766598	WITHOUT_CLASSIFICATION	4.2517192334029155E-4	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.9967688892480616	WITHOUT_CLASSIFICATION	0.003231110751938361	DESIGN
// register synch; stats.connect()	WITHOUT_CLASSIFICATION	0.9989466016533777	WITHOUT_CLASSIFICATION	0.0010533983466223574	DESIGN
//noncritical, swallow and let the other propagate!	WITHOUT_CLASSIFICATION	0.9875601650259928	WITHOUT_CLASSIFICATION	0.012439834974007262	DESIGN
// calls executeBatch()	WITHOUT_CLASSIFICATION	0.9990659021494488	WITHOUT_CLASSIFICATION	9.340978505513279E-4	DESIGN
//no big deal	WITHOUT_CLASSIFICATION	0.9980865455320905	WITHOUT_CLASSIFICATION	0.0019134544679095431	DESIGN
// no big deal	WITHOUT_CLASSIFICATION	0.9994373441015051	WITHOUT_CLASSIFICATION	5.626558984948111E-4	DESIGN
// no big deal	WITHOUT_CLASSIFICATION	0.9994373441015051	WITHOUT_CLASSIFICATION	5.626558984948111E-4	DESIGN
// sybase driver (jConnect) throwing NPE here in certain // cases, but we'll just handle the general "unexpected" case	WITHOUT_CLASSIFICATION	0.9992697847976116	WITHOUT_CLASSIFICATION	7.302152023884639E-4	DESIGN
// see explanation above...	WITHOUT_CLASSIFICATION	0.9997512777545078	WITHOUT_CLASSIFICATION	2.4872224549229706E-4	DESIGN
// If we are in the process of releasing, no sense // checking for aggressive-release possibility.	WITHOUT_CLASSIFICATION	0.999904120760762	WITHOUT_CLASSIFICATION	9.587923923808339E-5	DESIGN
// EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9991103531722325	WITHOUT_CLASSIFICATION	8.896468277674399E-4	DESIGN
// ResultSet impl ("overridden") ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994106537069799	WITHOUT_CLASSIFICATION	5.893462930202015E-4	DESIGN
// ResultSet impl (delegated) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994106537069799	WITHOUT_CLASSIFICATION	5.893462930202015E-4	DESIGN
// refer to comment in StatefulPersistenceContext.addCollection()	WITHOUT_CLASSIFICATION	0.9998916481303098	WITHOUT_CLASSIFICATION	1.083518696901134E-4	DESIGN
// ConnectionManager.Callback implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993993110781648	WITHOUT_CLASSIFICATION	6.006889218350899E-4	DESIGN
// Note : success = false, because we don't know the outcome of the transaction	WITHOUT_CLASSIFICATION	0.9999827290731416	WITHOUT_CLASSIFICATION	1.7270926858362886E-5	DESIGN
// we already have a callback registered; either a local // (org.hibernate.Transaction) transaction has accepted // callback responsibilities, or we have previously // registered a transaction synch.	WITHOUT_CLASSIFICATION	0.9990858307551144	WITHOUT_CLASSIFICATION	9.141692448854975E-4	DESIGN
// the configured transaction-factory says it only supports // local callback mode, so no sense attempting to register a // JTA Synchronization	WITHOUT_CLASSIFICATION	0.9992602991968377	WITHOUT_CLASSIFICATION	7.397008031623368E-4	DESIGN
// transactions marked for rollback-only cause some TM impls to throw exceptions	WITHOUT_CLASSIFICATION	0.9945723542163611	WITHOUT_CLASSIFICATION	0.005427645783638815	DESIGN
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994181238325942	WITHOUT_CLASSIFICATION	5.818761674058214E-4	DESIGN
//postInitialize() will be called after initialization	WITHOUT_CLASSIFICATION	0.9993276926504663	WITHOUT_CLASSIFICATION	6.723073495337185E-4	DESIGN
// cannot handle single quotes	WITHOUT_CLASSIFICATION	0.9998887944847625	WITHOUT_CLASSIFICATION	1.1120551523746222E-4	DESIGN
// todo : for 4.0 //	WITHOUT_CLASSIFICATION	0.9996459973414904	WITHOUT_CLASSIFICATION	3.5400265850966386E-4	DESIGN
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9735174069437407	WITHOUT_CLASSIFICATION	0.02648259305625923	DESIGN
// don't even bother trying to read further	WITHOUT_CLASSIFICATION	0.9971238928360504	WITHOUT_CLASSIFICATION	0.0028761071639496864	DESIGN
// don't even bother trying to read any further	WITHOUT_CLASSIFICATION	0.9969732361673463	WITHOUT_CLASSIFICATION	0.003026763832653649	DESIGN
// position cursor to the last row	WITHOUT_CLASSIFICATION	0.9997368338791701	WITHOUT_CLASSIFICATION	2.631661208298012E-4	DESIGN
// sequentially read the result set in reverse until we recognize // a change in the key value.  At that point, we are pointed at // the last physical sequential row for the logical row in which // we are interested in processing	WITHOUT_CLASSIFICATION	0.9999984295561203	WITHOUT_CLASSIFICATION	1.5704438797411878E-6	DESIGN
// Read backwards until we read past the first physical sequential // row with the key we are interested in loading	WITHOUT_CLASSIFICATION	0.9999988954495335	WITHOUT_CLASSIFICATION	1.1045504665041397E-6	DESIGN
// Finally, read ahead one row to position result set cursor // at the first physical row we are interested in loading	WITHOUT_CLASSIFICATION	0.9999966365288175	WITHOUT_CLASSIFICATION	3.3634711825194094E-6	DESIGN
// now get an existing proxy for each row element (if there is one)	WITHOUT_CLASSIFICATION	0.9999787762864841	WITHOUT_CLASSIFICATION	2.1223713515821557E-5	DESIGN
// force the proxy to resolve itself	WITHOUT_CLASSIFICATION	0.9989123921130949	WITHOUT_CLASSIFICATION	0.001087607886905035	DESIGN
// this is equivalent to the old behavior...	WITHOUT_CLASSIFICATION	0.9991659045740454	WITHOUT_CLASSIFICATION	8.340954259545719E-4	DESIGN
//if null, owner will be retrieved from session	WITHOUT_CLASSIFICATION	0.9988028988909954	WITHOUT_CLASSIFICATION	0.0011971011090046262	DESIGN
//final String queryString, 	WITHOUT_CLASSIFICATION	0.9980421756851704	WITHOUT_CLASSIFICATION	0.001957824314829641	DESIGN
// if it was a reference to self, don't need to nullify // unless we are using native id generation, in which // case we definitely need to nullify	WITHOUT_CLASSIFICATION	0.9999337426123014	WITHOUT_CLASSIFICATION	6.625738769872076E-5	DESIGN
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9997212334776426	WITHOUT_CLASSIFICATION	2.7876652235740446E-4	DESIGN
// in an effort to avoid concurrent-modification-exceptions (from // potential recursive calls back through here as a result of the // eventual call to PersistentCollection#endRead), we scan the // internal loadingCollections map for matches and store those matches // in a temp collection.  the temp collection is then used to "drive" // the #endRead processing.	WITHOUT_CLASSIFICATION	0.8504440642836123	WITHOUT_CLASSIFICATION	0.14955593571638762	DESIGN
//we can reuse it for each row	WITHOUT_CLASSIFICATION	0.9996077491164647	WITHOUT_CLASSIFICATION	3.922508835353268E-4	DESIGN
//can't reuse in this case	WITHOUT_CLASSIFICATION	0.998989572800674	WITHOUT_CLASSIFICATION	0.0010104271993259773	DESIGN
// First we need to suspend any current JTA transaction and obtain // a JDBC connection	WITHOUT_CLASSIFICATION	0.9969846305394715	WITHOUT_CLASSIFICATION	0.003015369460528488	DESIGN
//getResultList(results);	WITHOUT_CLASSIFICATION	0.9982338249437797	WITHOUT_CLASSIFICATION	0.0017661750562203082	DESIGN
//if we only returned one entity, query by key is more efficient	WITHOUT_CLASSIFICATION	0.9971008964388873	WITHOUT_CLASSIFICATION	0.002899103561112695	DESIGN
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9950529629138727	WITHOUT_CLASSIFICATION	0.00494703708612728	DESIGN
// handle empty collection	WITHOUT_CLASSIFICATION	0.9897579931575747	WITHOUT_CLASSIFICATION	0.010242006842425223	DESIGN
// else no collection element, but also no owner	WITHOUT_CLASSIFICATION	0.9995215007304652	WITHOUT_CLASSIFICATION	4.784992695347809E-4	DESIGN
//handle empty collections	WITHOUT_CLASSIFICATION	0.9976578077801732	WITHOUT_CLASSIFICATION	0.0023421922198267626	DESIGN
// else this is not a collection initializer (and empty collections will // be detected by looking for the owner's identifier in the result set)	WITHOUT_CLASSIFICATION	0.9699848679247843	WITHOUT_CLASSIFICATION	0.03001513207521558	DESIGN
// validate() instances of Validatable	WITHOUT_CLASSIFICATION	0.9997944887320006	WITHOUT_CLASSIFICATION	2.0551126799940597E-4	DESIGN
// if we know there is exactly 1 row, we can skip. // it would be great if we could _always_ skip this; // it is a problem for <key-many-to-one>	WITHOUT_CLASSIFICATION	0.9779509248258165	WITHOUT_CLASSIFICATION	0.022049075174183492	DESIGN
// remove all collections for the entity from the session-level cache	WITHOUT_CLASSIFICATION	0.9976049507908454	WITHOUT_CLASSIFICATION	0.002395049209154677	DESIGN
//null version means the object is in the process of being loaded somewhere else in the ResultSet	WITHOUT_CLASSIFICATION	0.9999330220900595	WITHOUT_CLASSIFICATION	6.697790994045776E-5	DESIGN
//problematic for <key-many-to-one>!	WITHOUT_CLASSIFICATION	0.9977833139416208	WITHOUT_CLASSIFICATION	0.0022166860583792054	DESIGN
//use the id passed in	WITHOUT_CLASSIFICATION	0.9996291483981343	WITHOUT_CLASSIFICATION	3.7085160186570805E-4	DESIGN
//do nothing	WITHOUT_CLASSIFICATION	0.9994412160764644	WITHOUT_CLASSIFICATION	5.587839235356754E-4	DESIGN
// prefer re-generation of identity!	WITHOUT_CLASSIFICATION	0.9996405220644157	WITHOUT_CLASSIFICATION	3.5947793558422725E-4	DESIGN
//no point doing this if NONE was requested	WITHOUT_CLASSIFICATION	0.9999173174655231	WITHOUT_CLASSIFICATION	8.268253447679975E-5	DESIGN
//If the object is already loaded, return the loaded one	WITHOUT_CLASSIFICATION	0.9995575816881732	WITHOUT_CLASSIFICATION	4.4241831182681473E-4	DESIGN
//its already loaded so don't need to hydrate it	WITHOUT_CLASSIFICATION	0.996128122686517	WITHOUT_CLASSIFICATION	0.0038718773134830036	DESIGN
// cascade the refresh prior to refreshing this entity	WITHOUT_CLASSIFICATION	0.9992680829673559	WITHOUT_CLASSIFICATION	7.319170326440133E-4	DESIGN
//the load() which takes an entity does not pass an entityName	WITHOUT_CLASSIFICATION	0.9996196980719058	WITHOUT_CLASSIFICATION	3.8030192809426864E-4	DESIGN
//we only check the version when _upgrading_ lock modes	WITHOUT_CLASSIFICATION	0.9999461303605296	WITHOUT_CLASSIFICATION	5.386963947026124E-5	DESIGN
// look for a proxy	WITHOUT_CLASSIFICATION	0.9996882975052556	WITHOUT_CLASSIFICATION	3.117024947444215E-4	DESIGN
//we need to upgrade the lock mode to the mode requested	WITHOUT_CLASSIFICATION	0.9933626572402364	WITHOUT_CLASSIFICATION	0.0066373427597635325	DESIGN
//its the given optional object	WITHOUT_CLASSIFICATION	0.9991365207952383	WITHOUT_CLASSIFICATION	8.634792047615897E-4	DESIGN
// instantiate a new instance	WITHOUT_CLASSIFICATION	0.9974935065139926	WITHOUT_CLASSIFICATION	0.0025064934860072733	DESIGN
//need to hydrate it.	WITHOUT_CLASSIFICATION	0.997838938119006	WITHOUT_CLASSIFICATION	0.0021610618809939953	DESIGN
// return a newly loaded object	WITHOUT_CLASSIFICATION	0.9992757751876055	WITHOUT_CLASSIFICATION	7.242248123946108E-4	DESIGN
//will be ignored, using the existing Entry instead	WITHOUT_CLASSIFICATION	0.9976291162994009	WITHOUT_CLASSIFICATION	0.0023708837005992104	DESIGN
// key is an entity involved with the operation performed by the listener; // value can be either a copy of the entity or the entity itself	WITHOUT_CLASSIFICATION	0.9999985552762063	WITHOUT_CLASSIFICATION	1.444723793727029E-6	DESIGN
//materialize associations (and initialize the object) later	WITHOUT_CLASSIFICATION	0.9359311204949317	WITHOUT_CLASSIFICATION	0.06406887950506844	DESIGN
// Get the persister for the _subclass_	WITHOUT_CLASSIFICATION	0.9996132407759609	WITHOUT_CLASSIFICATION	3.867592240391632E-4	DESIGN
// ok in normal Hibernate usage to delete a detached entity; JPA however // forbids it, thus this is a hook for HEM to affect this behavior	WITHOUT_CLASSIFICATION	0.9957983861894905	WITHOUT_CLASSIFICATION	0.004201613810509525	DESIGN
// the entry will be removed after the flush, and will no longer // override the stale snapshot // This is now handled by removeEntity() in EntityDeleteAction //persistenceContext.removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9922022473126797	WITHOUT_CLASSIFICATION	0.007797752687320281	DESIGN
//addInitializedCollection(collection, persister, id);	WITHOUT_CLASSIFICATION	0.9978506171800194	WITHOUT_CLASSIFICATION	0.002149382819980599	DESIGN
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9967688892480616	WITHOUT_CLASSIFICATION	0.003231110751938361	DESIGN
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9967688892480616	WITHOUT_CLASSIFICATION	0.003231110751938361	DESIGN
/*|| oj.getJoinable().consumesCollectionAlias() */	WITHOUT_CLASSIFICATION	0.9999930316327985	WITHOUT_CLASSIFICATION	6.968367201555585E-6	DESIGN
// here we do not bother with the discriminator.	WITHOUT_CLASSIFICATION	0.8386995360154769	WITHOUT_CLASSIFICATION	0.16130046398452316	DESIGN
// Code to handle subclasses of topClass	WITHOUT_CLASSIFICATION	0.9979038020710989	WITHOUT_CLASSIFICATION	0.002096197928901175	DESIGN
//woops we got an instance of another class hierarchy branch	WITHOUT_CLASSIFICATION	0.9984489371023896	WITHOUT_CLASSIFICATION	0.0015510628976104731	DESIGN
// we can go straight to the first required row	WITHOUT_CLASSIFICATION	0.9997582254105013	WITHOUT_CLASSIFICATION	2.4177458949862108E-4	DESIGN
// we need to step through the rows one row at a time (slow)	WITHOUT_CLASSIFICATION	0.9873614227029507	WITHOUT_CLASSIFICATION	0.012638577297049293	DESIGN
// synchronized to avoid multi-thread access issues; defined as method synch to avoid // potential deadlock issues due to nature of code.	WITHOUT_CLASSIFICATION	0.9999880491619261	WITHOUT_CLASSIFICATION	1.195083807402663E-5	DESIGN
// Allows various loaders (ok mainly the QueryLoader :) to check // whether scrolling of their result set should be allowed. // // By default it is allowed.	WITHOUT_CLASSIFICATION	0.9997530993483155	WITHOUT_CLASSIFICATION	2.469006516845737E-4	DESIGN
//before adding to collection!	WITHOUT_CLASSIFICATION	0.9963433519070681	WITHOUT_CLASSIFICATION	0.0036566480929318894	DESIGN
// if the current depth is 0, the root thing being loaded is the // many-to-many collection itself.  Here, it is alright to use // an inner join...	WITHOUT_CLASSIFICATION	0.9998837126249136	WITHOUT_CLASSIFICATION	1.162873750863682E-4	DESIGN
//operations which cascade as far as the collection also cascade to collection elements	WITHOUT_CLASSIFICATION	0.9998024145416312	WITHOUT_CLASSIFICATION	1.9758545836879858E-4	DESIGN
// simple, because we can't have a one-to-one or a collection  // (or even a property-ref) in a composite-element:	WITHOUT_CLASSIFICATION	0.9988437757797372	WITHOUT_CLASSIFICATION	0.0011562242202628197	DESIGN
//a composite key	WITHOUT_CLASSIFICATION	0.9984820192201301	WITHOUT_CLASSIFICATION	0.0015179807798698733	DESIGN
// if no batch, use "foo = ? and bar = ?"	WITHOUT_CLASSIFICATION	0.999688249809657	WITHOUT_CLASSIFICATION	3.117501903429558E-4	DESIGN
//it must be a collection fetch	WITHOUT_CLASSIFICATION	0.8707089929962785	WITHOUT_CLASSIFICATION	0.1292910070037215	DESIGN
// needed later for many-to-many/filter application	WITHOUT_CLASSIFICATION	0.9962048182293842	WITHOUT_CLASSIFICATION	0.0037951817706157742	DESIGN
/*&& etype.isReferenceToPrimaryKey()*/	WITHOUT_CLASSIFICATION	0.9979249567827073	WITHOUT_CLASSIFICATION	0.0020750432172926725	DESIGN
// it might still need to apply a collection ordering based on a // many-to-many defined order-by...	WITHOUT_CLASSIFICATION	0.819086769561746	DESIGN	0.18091323043825394	WITHOUT_CLASSIFICATION
// if a composite key, use "( (foo = ? and bar = ?) or (foo = ? and bar = ?) )" for batching //TODO: unnecessary for databases with ANSI-style joins	WITHOUT_CLASSIFICATION	0.9463626472950528	WITHOUT_CLASSIFICATION	0.05363735270494724	DESIGN
// belong to other persister // belong to other persister	WITHOUT_CLASSIFICATION	0.9955124606591116	WITHOUT_CLASSIFICATION	0.004487539340888439	DESIGN
// we found it	WITHOUT_CLASSIFICATION	0.9990432665370359	WITHOUT_CLASSIFICATION	9.56733462964164E-4	DESIGN
//we can use an inner join for the many-to-many	WITHOUT_CLASSIFICATION	0.9995966839466813	WITHOUT_CLASSIFICATION	4.0331605331865263E-4	DESIGN
//disable a join back to this same association	WITHOUT_CLASSIFICATION	0.9214353159684527	WITHOUT_CLASSIFICATION	0.07856468403154719	DESIGN
//NOTE: unlike all other Loaders, this one is NOT //      multithreaded, or cacheable!!	WITHOUT_CLASSIFICATION	0.996903919873699	WITHOUT_CLASSIFICATION	0.003096080126300896	DESIGN
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9998665739366318	WITHOUT_CLASSIFICATION	1.3342606336816525E-4	DESIGN
//root entity comes *last*	WITHOUT_CLASSIFICATION	0.9981818815709839	WITHOUT_CLASSIFICATION	0.0018181184290161452	DESIGN
//deliberately ignore return value!	WITHOUT_CLASSIFICATION	0.9968628481333903	WITHOUT_CLASSIFICATION	0.0031371518666096754	DESIGN
//alias may be null //EARLY EXIT	WITHOUT_CLASSIFICATION	0.9926772683400046	WITHOUT_CLASSIFICATION	0.007322731659995441	DESIGN
// if it is a compound path	WITHOUT_CLASSIFICATION	0.9996636782313024	WITHOUT_CLASSIFICATION	3.3632176869747746E-4	DESIGN
// otherwise assume the parent is the the criteria that created us	WITHOUT_CLASSIFICATION	0.998996131745415	WITHOUT_CLASSIFICATION	0.001003868254584931	DESIGN
// if its the root criteria, we are done	WITHOUT_CLASSIFICATION	0.9994805697496337	WITHOUT_CLASSIFICATION	5.194302503662803E-4	DESIGN
// otherwise, recurse	WITHOUT_CLASSIFICATION	0.999574017052273	WITHOUT_CLASSIFICATION	4.259829477270054E-4	DESIGN
//the criteria instance	WITHOUT_CLASSIFICATION	0.9951111137122655	WITHOUT_CLASSIFICATION	0.0048888862877345075	DESIGN
// the entity name	WITHOUT_CLASSIFICATION	0.999112950469861	WITHOUT_CLASSIFICATION	8.87049530138894E-4	DESIGN
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9999845024517707	WITHOUT_CLASSIFICATION	1.5497548229265134E-5	DESIGN
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9999845024517707	WITHOUT_CLASSIFICATION	1.5497548229265134E-5	DESIGN
//it refers to an alias of a projection	WITHOUT_CLASSIFICATION	0.9995618833930338	WITHOUT_CLASSIFICATION	4.3811660696629694E-4	DESIGN
//should never happen, i think	WITHOUT_CLASSIFICATION	0.9972386177817618	WITHOUT_CLASSIFICATION	0.0027613822182381885	DESIGN
// Detect discriminator values...	WITHOUT_CLASSIFICATION	0.9994761433535118	WITHOUT_CLASSIFICATION	5.238566464882749E-4	DESIGN
// Convert the string value into the proper type.	WITHOUT_CLASSIFICATION	0.99565280602314	WITHOUT_CLASSIFICATION	0.004347193976859991	DESIGN
// and the qualifier is not the alias of this criteria //      -> check to see if we belong to some criteria other //          than the one that created us	WITHOUT_CLASSIFICATION	0.9982490773992824	WITHOUT_CLASSIFICATION	0.0017509226007176634	DESIGN
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.9969853765368203	WITHOUT_CLASSIFICATION	0.0030146234631798093	DESIGN
// Otherwise, this is an ordinary value.	WITHOUT_CLASSIFICATION	0.9996707305416139	WITHOUT_CLASSIFICATION	3.2926945838611355E-4	DESIGN
// Currently *not* cachable if autodiscover types is in effect (e.g. "select * ...")	WITHOUT_CLASSIFICATION	0.9999198612409027	WITHOUT_CLASSIFICATION	8.013875909730734E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998122686237135	WITHOUT_CLASSIFICATION	1.87731376286521E-4	DESIGN
// this is only needed (afaict) for ResultTransformer processing...	WITHOUT_CLASSIFICATION	0.9990685015580593	WITHOUT_CLASSIFICATION	9.314984419408672E-4	DESIGN
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9996626734820193	WITHOUT_CLASSIFICATION	3.3732651798062697E-4	DESIGN
// build an array with indices equal to the total number // of actual returns in the result Hibernate will return // for this query (scalars + non-scalars)	WITHOUT_CLASSIFICATION	0.9999623049715993	WITHOUT_CLASSIFICATION	3.76950284006989E-5	DESIGN
// replace {....} with corresponding column aliases	WITHOUT_CLASSIFICATION	0.9997740964012741	WITHOUT_CLASSIFICATION	2.2590359872586788E-4	DESIGN
// No additional open braces found in the string, append the // rest of the string in its entirty and quit this loop	WITHOUT_CLASSIFICATION	0.9999932945799532	WITHOUT_CLASSIFICATION	6.705420046760471E-6	DESIGN
// apend everything up until the next encountered open brace	WITHOUT_CLASSIFICATION	0.9998187422265703	WITHOUT_CLASSIFICATION	1.8125777342978505E-4	DESIGN
// it is a simple table alias {foo}	WITHOUT_CLASSIFICATION	0.9999523287934399	WITHOUT_CLASSIFICATION	4.7671206560137076E-5	DESIGN
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9707576311882739	WITHOUT_CLASSIFICATION	0.029242368811726163	DESIGN
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9707576311882739	WITHOUT_CLASSIFICATION	0.029242368811726163	DESIGN
// The current alias is referencing the collection to be eagerly fetched	WITHOUT_CLASSIFICATION	0.999942444571373	WITHOUT_CLASSIFICATION	5.755542862689514E-5	DESIGN
// it is a property reference {foo.bar}	WITHOUT_CLASSIFICATION	0.9993485327351004	WITHOUT_CLASSIFICATION	6.514672648996697E-4	DESIGN
// Possibly handle :something parameters for the query ?	WITHOUT_CLASSIFICATION	0.999595171230368	WITHOUT_CLASSIFICATION	4.048287696319851E-4	DESIGN
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9997730628398153	WITHOUT_CLASSIFICATION	2.2693716018472844E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998122686237135	WITHOUT_CLASSIFICATION	1.87731376286521E-4	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.9967688892480616	WITHOUT_CLASSIFICATION	0.003231110751938361	DESIGN
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9967688892480616	WITHOUT_CLASSIFICATION	0.003231110751938361	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998122686237135	WITHOUT_CLASSIFICATION	1.87731376286521E-4	DESIGN
// Now, process the returns	WITHOUT_CLASSIFICATION	0.9997800588411049	WITHOUT_CLASSIFICATION	2.199411588952635E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998122686237135	WITHOUT_CLASSIFICATION	1.87731376286521E-4	DESIGN
// already been processed...	WITHOUT_CLASSIFICATION	0.9983770291473023	WITHOUT_CLASSIFICATION	0.0016229708526977792	DESIGN
// already been processed...	WITHOUT_CLASSIFICATION	0.9983770291473023	WITHOUT_CLASSIFICATION	0.0016229708526977792	DESIGN
// Make sure the owner alias is known...	WITHOUT_CLASSIFICATION	0.9999447367433175	WITHOUT_CLASSIFICATION	5.526325668239796E-5	DESIGN
// first, break down the returns into maps keyed by alias // so that role returns can be more easily resolved to their owners	WITHOUT_CLASSIFICATION	0.9979732128524671	WITHOUT_CLASSIFICATION	0.002026787147532893	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998122686237135	WITHOUT_CLASSIFICATION	1.87731376286521E-4	DESIGN
// If this return's alias has not been processed yet, do so b4 further processing of this return	WITHOUT_CLASSIFICATION	0.999934449467067	WITHOUT_CLASSIFICATION	6.555053293305853E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998122686237135	WITHOUT_CLASSIFICATION	1.87731376286521E-4	DESIGN
// for merging of versioned entities, we consider the version having // been changed only when: // 1) the two version values are different; //      *AND* // 2) The target actually represents database state! // // This second condition is a special case which allows // an entity to be merged during the same transaction // (though during a seperate operation) in which it was // originally persisted/saved	WITHOUT_CLASSIFICATION	0.9999999418815531	WITHOUT_CLASSIFICATION	5.81184469814048E-8	DESIGN
// this is the second pass through on a merge op, so here we limit the // replacement to associations types (value types were already replaced // during the first pass)	WITHOUT_CLASSIFICATION	0.7366261764134887	WITHOUT_CLASSIFICATION	0.26337382358651124	DESIGN
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.9967688892480616	WITHOUT_CLASSIFICATION	0.003231110751938361	DESIGN
// cascade-save to collections AFTER the collection owner was saved	WITHOUT_CLASSIFICATION	0.9971768482984553	WITHOUT_CLASSIFICATION	0.002823151701544542	DESIGN
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9985329678290967	WITHOUT_CLASSIFICATION	0.0014670321709032278	DESIGN
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9994976044505545	WITHOUT_CLASSIFICATION	5.023955494456101E-4	DESIGN
// currently only the Hibernate-supplied DbTimestampType is supported here	WITHOUT_CLASSIFICATION	0.9993095200641301	WITHOUT_CLASSIFICATION	6.904799358698518E-4	DESIGN
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9963307171824263	WITHOUT_CLASSIFICATION	0.003669282817573795	DESIGN
// make a new one	WITHOUT_CLASSIFICATION	0.9964893261208062	WITHOUT_CLASSIFICATION	0.0035106738791938824	DESIGN
// not so sure this is even valid subtree.  but if it was, it'd // represent two unrelated table references...	WITHOUT_CLASSIFICATION	0.9999085158050938	WITHOUT_CLASSIFICATION	9.148419490628162E-5	DESIGN
// (NOT (GT a b) ) => (LE a b)	WITHOUT_CLASSIFICATION	0.9994404737373025	WITHOUT_CLASSIFICATION	5.595262626974744E-4	DESIGN
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9980836830172244	WITHOUT_CLASSIFICATION	0.0019163169827755224	DESIGN
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9950002391481361	WITHOUT_CLASSIFICATION	0.004999760851863928	DESIGN
//sqlResultTypes = selectClause.getSqlResultTypes();	WITHOUT_CLASSIFICATION	0.9990302159699643	WITHOUT_CLASSIFICATION	9.697840300357113E-4	DESIGN
//by default	WITHOUT_CLASSIFICATION	0.9971942162341818	WITHOUT_CLASSIFICATION	0.0028057837658181273	DESIGN
// This is now handled earlier in this method.	WITHOUT_CLASSIFICATION	0.9837394659741806	WITHOUT_CLASSIFICATION	0.016260534025819423	DESIGN
// -- Loader implementation --	WITHOUT_CLASSIFICATION	0.9997457725245125	WITHOUT_CLASSIFICATION	2.542274754875795E-4	DESIGN
// -- Loader overrides --	WITHOUT_CLASSIFICATION	0.999754034311579	WITHOUT_CLASSIFICATION	2.459656884208911E-4	DESIGN
// (NOT (IS_NULL a b) ) => (IS_NOT_NULL a b)	WITHOUT_CLASSIFICATION	0.9993188944489683	WITHOUT_CLASSIFICATION	6.81105551031797E-4	DESIGN
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.9996742350416384	WITHOUT_CLASSIFICATION	3.257649583615551E-4	DESIGN
// meant to handle dynamic instantiation queries...	WITHOUT_CLASSIFICATION	0.9989608854352706	WITHOUT_CLASSIFICATION	0.0010391145647293857	DESIGN
// --- Query translator methods ---	WITHOUT_CLASSIFICATION	0.9993712426859657	WITHOUT_CLASSIFICATION	6.287573140343189E-4	DESIGN
// -- Implementation private methods --	WITHOUT_CLASSIFICATION	0.9972397389029095	WITHOUT_CLASSIFICATION	0.002760261097090514	DESIGN
//deduplicate unique constraints sharing the same columns //this is needed by Hibernate Annotations since it creates automagically // unique constraints for the user	WITHOUT_CLASSIFICATION	0.9999957134101936	WITHOUT_CLASSIFICATION	4.286589806379271E-6	DESIGN
// Try to find out the name of the primary key to create it as identity if the IdentityGenerator is used	WITHOUT_CLASSIFICATION	0.993761764692665	WITHOUT_CLASSIFICATION	0.00623823530733507	DESIGN
// to support dialects that have their own identity data type	WITHOUT_CLASSIFICATION	0.9958063058971091	WITHOUT_CLASSIFICATION	0.004193694102890972	DESIGN
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.999985225391133	WITHOUT_CLASSIFICATION	1.4774608867101796E-5	DESIGN
//used also for generation of FK names!	WITHOUT_CLASSIFICATION	0.9936724461887336	WITHOUT_CLASSIFICATION	0.006327553811266371	DESIGN
//usually useless	WITHOUT_CLASSIFICATION	0.9909418852216466	WITHOUT_CLASSIFICATION	0.009058114778353398	DESIGN
// added this caching as I noticed that getType() is being called multiple times...	WITHOUT_CLASSIFICATION	0.9990166845386841	WITHOUT_CLASSIFICATION	9.833154613158683E-4	DESIGN
//do not add unique constraint on DB not supporting unique and nullable columns	WITHOUT_CLASSIFICATION	0.9969998124588262	WITHOUT_CLASSIFICATION	0.0030001875411737734	DESIGN
//for backward compatibility, disable this:	WITHOUT_CLASSIFICATION	0.999851578489286	WITHOUT_CLASSIFICATION	1.484215107139676E-4	DESIGN
//may be final //may be final //may be final	WITHOUT_CLASSIFICATION	0.9982417744088244	WITHOUT_CLASSIFICATION	0.0017582255911755657	DESIGN
//may be final	WITHOUT_CLASSIFICATION	0.9973563840975984	WITHOUT_CLASSIFICATION	0.00264361590240167	DESIGN
// may be final	WITHOUT_CLASSIFICATION	0.9990882007119796	WITHOUT_CLASSIFICATION	9.117992880204335E-4	DESIGN
// Custom SQL	WITHOUT_CLASSIFICATION	0.99936256886159	WITHOUT_CLASSIFICATION	6.374311384099857E-4	DESIGN
//Primary key constraint	WITHOUT_CLASSIFICATION	0.9996365212746241	WITHOUT_CLASSIFICATION	3.6347872537595486E-4	DESIGN
// the root of the incoming property path matched one // of the embedded composite identifier properties	WITHOUT_CLASSIFICATION	0.9996183553837521	WITHOUT_CLASSIFICATION	3.816446162478399E-4	DESIGN
// ignore it...	WITHOUT_CLASSIFICATION	0.9948434331090231	WITHOUT_CLASSIFICATION	0.00515656689097685	DESIGN
//flat recursive algorithm	WITHOUT_CLASSIFICATION	0.9893384293392323	WITHOUT_CLASSIFICATION	0.01066157066076763	DESIGN
//an identifier mapper => getKey will be included in the getNonDuplicatedPropertyIterator() //and checked later, so it needs to be excluded	WITHOUT_CLASSIFICATION	0.9984022524308941	WITHOUT_CLASSIFICATION	0.0015977475691058023	DESIGN
//if the hibernate-mapping did not specify a schema/catalog, use the defaults //specified by properties - but note that if the schema/catalog were specified //in hibernate-mapping, or as params, they will already be initialized and //will override the values set here (they are in identifierGeneratorProperties)	WITHOUT_CLASSIFICATION	0.9995798673250369	WITHOUT_CLASSIFICATION	4.201326749631249E-4	DESIGN
//pass the entity-name, if not a collection-id	WITHOUT_CLASSIFICATION	0.9932158962987094	WITHOUT_CLASSIFICATION	0.006784103701290507	DESIGN
// Custom SQL	WITHOUT_CLASSIFICATION	0.99936256886159	WITHOUT_CLASSIFICATION	6.374311384099857E-4	DESIGN
//Primary key constraint	WITHOUT_CLASSIFICATION	0.9996365212746241	WITHOUT_CLASSIFICATION	3.6347872537595486E-4	DESIGN
//pass the column name (a generated id almost always has a single column)	WITHOUT_CLASSIFICATION	0.9991754249335351	WITHOUT_CLASSIFICATION	8.245750664650185E-4	DESIGN
//needed to satisfy KeyValue	WITHOUT_CLASSIFICATION	0.9981439071186724	WITHOUT_CLASSIFICATION	0.0018560928813276501	DESIGN
// empty means no scoping	WITHOUT_CLASSIFICATION	0.9995954923973365	WITHOUT_CLASSIFICATION	4.0450760266360367E-4	DESIGN
// index should be last column listed	WITHOUT_CLASSIFICATION	0.9994295892699466	WITHOUT_CLASSIFICATION	5.704107300533763E-4	DESIGN
//if it is a formula index, use the element columns in the PK	WITHOUT_CLASSIFICATION	0.9986961101976393	WITHOUT_CLASSIFICATION	0.001303889802360728	DESIGN
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns	WITHOUT_CLASSIFICATION	0.9900877175379421	WITHOUT_CLASSIFICATION	0.009912282462057968	DESIGN
/*ArrayList list = new ArrayList();	WITHOUT_CLASSIFICATION	0.999612222961694	WITHOUT_CLASSIFICATION	3.877770383060239E-4	DESIGN
// }	WITHOUT_CLASSIFICATION	0.9995147689221845	WITHOUT_CLASSIFICATION	4.8523107781546173E-4	DESIGN
// no foreign key element of for a one-to-many	WITHOUT_CLASSIFICATION	0.9996192161477844	WITHOUT_CLASSIFICATION	3.807838522155697E-4	DESIGN
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.5443673264814717	DESIGN	0.4556326735185283	WITHOUT_CLASSIFICATION
// the case of a foreign key to something other than the pk is handled in createPropertyRefConstraints	WITHOUT_CLASSIFICATION	0.9998291329847191	WITHOUT_CLASSIFICATION	1.708670152809666E-4	DESIGN
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.5443673264814717	DESIGN	0.4556326735185283	WITHOUT_CLASSIFICATION
// if the property mapping consists of all formulas,  // make it non-updateable	WITHOUT_CLASSIFICATION	0.9996486543943587	WITHOUT_CLASSIFICATION	3.513456056413652E-4	DESIGN
//columnUpdateability.length==0 ||	WITHOUT_CLASSIFICATION	0.9985682840875734	WITHOUT_CLASSIFICATION	0.0014317159124266339	DESIGN
// if the property mapping consists of all formulas,  // make it insertable	WITHOUT_CLASSIFICATION	0.9996486543943587	WITHOUT_CLASSIFICATION	3.513456056413652E-4	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996329752382063	WITHOUT_CLASSIFICATION	3.670247617937264E-4	DESIGN
// expected type is intrinsic here...	WITHOUT_CLASSIFICATION	0.9994401330919156	WITHOUT_CLASSIFICATION	5.598669080843617E-4	DESIGN
//}	WITHOUT_CLASSIFICATION	0.9993775714337793	WITHOUT_CLASSIFICATION	6.224285662206949E-4	DESIGN
//}	WITHOUT_CLASSIFICATION	0.9993775714337793	WITHOUT_CLASSIFICATION	6.224285662206949E-4	DESIGN
//return memberPersister.getPropertyType(propertyName);	WITHOUT_CLASSIFICATION	0.998179885675677	WITHOUT_CLASSIFICATION	0.0018201143243230025	DESIGN
//return memberPersister.toColumns(alias, propertyName);	WITHOUT_CLASSIFICATION	0.9982089640824744	WITHOUT_CLASSIFICATION	0.0017910359175255677	DESIGN
//return memberPersister.getType();	WITHOUT_CLASSIFICATION	0.998179885675677	WITHOUT_CLASSIFICATION	0.0018201143243230025	DESIGN
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9982949333831279	WITHOUT_CLASSIFICATION	0.0017050666168719987	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998122686237135	WITHOUT_CLASSIFICATION	1.87731376286521E-4	DESIGN
//instanceof AssociationType;	WITHOUT_CLASSIFICATION	0.9982338249437797	WITHOUT_CLASSIFICATION	0.0017661750562203082	DESIGN
// we need to determine the best way to know that two joinables // represent a single many-to-many...	WITHOUT_CLASSIFICATION	0.9783919996397615	WITHOUT_CLASSIFICATION	0.021608000360238445	DESIGN
//strip leading ','	WITHOUT_CLASSIFICATION	0.9985159153969387	WITHOUT_CLASSIFICATION	0.0014840846030612304	DESIGN
//public boolean isSubselectLoadable();	WITHOUT_CLASSIFICATION	0.9986282426481411	WITHOUT_CLASSIFICATION	0.0013717573518588684	DESIGN
// KEY	WITHOUT_CLASSIFICATION	0.9998219660811352	WITHOUT_CLASSIFICATION	1.780339188647458E-4	DESIGN
//columns	WITHOUT_CLASSIFICATION	0.9993169148631355	WITHOUT_CLASSIFICATION	6.830851368645701E-4	DESIGN
//SQL statements	WITHOUT_CLASSIFICATION	0.9971997642045608	WITHOUT_CLASSIFICATION	0.002800235795439195	DESIGN
//extra information about the element type	WITHOUT_CLASSIFICATION	0.9895167967523114	WITHOUT_CLASSIFICATION	0.010483203247688685	DESIGN
//types	WITHOUT_CLASSIFICATION	0.9993169148631355	WITHOUT_CLASSIFICATION	6.830851368645701E-4	DESIGN
// custom sql	WITHOUT_CLASSIFICATION	0.9998485398620252	WITHOUT_CLASSIFICATION	1.5146013797476593E-4	DESIGN
//private final String unquotedIdentifierColumnName;	WITHOUT_CLASSIFICATION	0.9986843994829783	WITHOUT_CLASSIFICATION	0.0013156005170217578	DESIGN
// dynamic filters specifically for many-to-many inside the collection	WITHOUT_CLASSIFICATION	0.9982418432817624	WITHOUT_CLASSIFICATION	0.0017581567182376751	DESIGN
// dynamic filters for the collection	WITHOUT_CLASSIFICATION	0.9987889148674687	WITHOUT_CLASSIFICATION	0.0012110851325313511	DESIGN
// NativeSQL: collect key column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999563882451015	WITHOUT_CLASSIFICATION	4.3611754898467765E-5	DESIGN
//unquotedKeyColumnNames = StringHelper.unQuote(keyColumnAliases);	WITHOUT_CLASSIFICATION	0.9990302159699643	WITHOUT_CLASSIFICATION	9.697840300357113E-4	DESIGN
//ELEMENT	WITHOUT_CLASSIFICATION	0.9993169148631355	WITHOUT_CLASSIFICATION	6.830851368645701E-4	DESIGN
// NativeSQL: collect element column and auto-aliases	WITHOUT_CLASSIFICATION	0.9997128175962023	WITHOUT_CLASSIFICATION	2.8718240379760573E-4	DESIGN
// INDEX AND ROW SELECT	WITHOUT_CLASSIFICATION	0.9995853304007559	WITHOUT_CLASSIFICATION	4.146695992440049E-4	DESIGN
// NativeSQL: collect index column and auto-aliases	WITHOUT_CLASSIFICATION	0.9998976826095088	WITHOUT_CLASSIFICATION	1.0231739049110344E-4	DESIGN
//unquotedIdentifierColumnName = identifierColumnAlias;	WITHOUT_CLASSIFICATION	0.9990302159699643	WITHOUT_CLASSIFICATION	9.697840300357113E-4	DESIGN
//unquotedIdentifierColumnName = null;	WITHOUT_CLASSIFICATION	0.995904403711698	WITHOUT_CLASSIFICATION	0.0040955962883020445	DESIGN
//GENERATE THE SQL:	WITHOUT_CLASSIFICATION	0.9962628269134716	WITHOUT_CLASSIFICATION	0.0037371730865283764	DESIGN
// for non-arrays, we don't need to know the element class //elementType.returnedClass();	WITHOUT_CLASSIFICATION	0.9884338423390694	WITHOUT_CLASSIFICATION	0.011566157660930533	DESIGN
//not all classpersisters implement PropertyMapping!	WITHOUT_CLASSIFICATION	0.9896002299374655	WITHOUT_CLASSIFICATION	0.01039977006253443	DESIGN
// Handle any filters applied to this collection	WITHOUT_CLASSIFICATION	0.9645068471317282	WITHOUT_CLASSIFICATION	0.035493152868271864	DESIGN
// Handle any filters applied to this collection for many-to-many	WITHOUT_CLASSIFICATION	0.9634337170426597	WITHOUT_CLASSIFICATION	0.036566282957340254	DESIGN
//if there is a user-specified loader, return that //TODO: filters!?	WITHOUT_CLASSIFICATION	0.9567670466508212	WITHOUT_CLASSIFICATION	0.04323295334917873	DESIGN
// Take care of any entities that might have // been evicted!	WITHOUT_CLASSIFICATION	0.9925326794039618	WITHOUT_CLASSIFICATION	0.007467320596038234	DESIGN
//strip leading ','	WITHOUT_CLASSIFICATION	0.9985159153969387	WITHOUT_CLASSIFICATION	0.0014840846030612304	DESIGN
// Run a subquery loader	WITHOUT_CLASSIFICATION	0.9990986848185929	WITHOUT_CLASSIFICATION	9.013151814070023E-4	DESIGN
//needed by arrays	WITHOUT_CLASSIFICATION	0.9976618661883727	WITHOUT_CLASSIFICATION	0.002338133811627232	DESIGN
//TODO: something with formulas...	WITHOUT_CLASSIFICATION	0.9586592633348163	WITHOUT_CLASSIFICATION	0.041340736665183744	DESIGN
//an assertion	WITHOUT_CLASSIFICATION	0.9960420464663893	WITHOUT_CLASSIFICATION	0.003957953533610694	DESIGN
// Remove all the old entries	WITHOUT_CLASSIFICATION	0.9997912488360107	WITHOUT_CLASSIFICATION	2.0875116398939156E-4	DESIGN
//create all the new entries	WITHOUT_CLASSIFICATION	0.999651646545895	WITHOUT_CLASSIFICATION	3.4835345410502954E-4	DESIGN
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9982949333831279	WITHOUT_CLASSIFICATION	0.0017050666168719987	DESIGN
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9982949333831279	WITHOUT_CLASSIFICATION	0.0017050666168719987	DESIGN
//delete all the deleted entries	WITHOUT_CLASSIFICATION	0.9993813448765771	WITHOUT_CLASSIFICATION	6.186551234228337E-4	DESIGN
//insert all the new entries	WITHOUT_CLASSIFICATION	0.999635056354895	WITHOUT_CLASSIFICATION	3.649436451050085E-4	DESIGN
//==elementType ??	WITHOUT_CLASSIFICATION	0.997714910240279	WITHOUT_CLASSIFICATION	0.0022850897597209716	DESIGN
//update all the modified entries	WITHOUT_CLASSIFICATION	0.9999260301873192	WITHOUT_CLASSIFICATION	7.396981268083418E-5	DESIGN
//identifier collections not supported for 1-to-many	WITHOUT_CLASSIFICATION	0.995986827261377	WITHOUT_CLASSIFICATION	0.0040131727386229984	DESIGN
// update removed rows fks to null	WITHOUT_CLASSIFICATION	0.9946373025792877	WITHOUT_CLASSIFICATION	0.005362697420712373	DESIGN
// will still be issued when it used to be null	WITHOUT_CLASSIFICATION	0.5362270955781243	WITHOUT_CLASSIFICATION	0.4637729044218757	DESIGN
// now update all changed or added rows fks	WITHOUT_CLASSIFICATION	0.9999728464296663	WITHOUT_CLASSIFICATION	2.7153570333743255E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998122686237135	WITHOUT_CLASSIFICATION	1.87731376286521E-4	DESIGN
//use suffix for the entity columns	WITHOUT_CLASSIFICATION	0.999455731224815	WITHOUT_CLASSIFICATION	5.442687751849568E-4	DESIGN
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9996627290234315	WITHOUT_CLASSIFICATION	3.3727097656853776E-4	DESIGN
//private final String rootTableName;	WITHOUT_CLASSIFICATION	0.9986843994829783	WITHOUT_CLASSIFICATION	0.0013156005170217578	DESIGN
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9967688892480616	WITHOUT_CLASSIFICATION	0.003231110751938361	DESIGN
//Custom SQL	WITHOUT_CLASSIFICATION	0.9977410736177512	WITHOUT_CLASSIFICATION	0.0022589263822488143	DESIGN
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9996627290234315	WITHOUT_CLASSIFICATION	3.3727097656853776E-4	DESIGN
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.9994481783057511	WITHOUT_CLASSIFICATION	5.518216942490032E-4	DESIGN
// This could also just be true all the time...	WITHOUT_CLASSIFICATION	0.9874015069279947	WITHOUT_CLASSIFICATION	0.012598493072005256	DESIGN
//chop the last union (all)	WITHOUT_CLASSIFICATION	0.999209687785167	WITHOUT_CLASSIFICATION	7.90312214833055E-4	DESIGN
//TODO: check this....	WITHOUT_CLASSIFICATION	0.9700680553518639	WITHOUT_CLASSIFICATION	0.029931944648136134	DESIGN
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9967688892480616	WITHOUT_CLASSIFICATION	0.003231110751938361	DESIGN
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9982557263545523	WITHOUT_CLASSIFICATION	0.0017442736454476892	DESIGN
// the closure of all properties in the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9983453175236894	WITHOUT_CLASSIFICATION	0.001654682476310658	DESIGN
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9348985000011699	WITHOUT_CLASSIFICATION	0.06510149999883015	DESIGN
// subclass discrimination works by assigning particular // values to certain combinations of null primary key // values in the outer join using an SQL CASE	WITHOUT_CLASSIFICATION	0.9999847003380058	WITHOUT_CLASSIFICATION	1.5299661994193997E-5	DESIGN
//MULTITABLES	WITHOUT_CLASSIFICATION	0.9967688892480616	WITHOUT_CLASSIFICATION	0.003231110751938361	DESIGN
// Custom sql	WITHOUT_CLASSIFICATION	0.9993796760187434	WITHOUT_CLASSIFICATION	6.203239812566822E-4	DESIGN
// subclass closure properties	WITHOUT_CLASSIFICATION	0.998873480439401	WITHOUT_CLASSIFICATION	0.0011265195605989525	DESIGN
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9991103531722325	WITHOUT_CLASSIFICATION	8.896468277674399E-4	DESIGN
//( (Column) model.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9978506171800194	WITHOUT_CLASSIFICATION	0.002149382819980599	DESIGN
//( (Column) sc.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9978506171800194	WITHOUT_CLASSIFICATION	0.002149382819980599	DESIGN
// don't need subclass tables, because they can't appear in conditions	WITHOUT_CLASSIFICATION	0.9850458224186291	WITHOUT_CLASSIFICATION	0.014954177581370713	DESIGN
// special case where we need to force incloude all subclass joins	WITHOUT_CLASSIFICATION	0.9919929371355722	WITHOUT_CLASSIFICATION	0.008007062864427745	DESIGN
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9996627290234315	WITHOUT_CLASSIFICATION	3.3727097656853776E-4	DESIGN
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9982557263545523	WITHOUT_CLASSIFICATION	0.0017442736454476892	DESIGN
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9348985000011699	WITHOUT_CLASSIFICATION	0.06510149999883015	DESIGN
//get em on the second pass!	WITHOUT_CLASSIFICATION	0.998274831068458	WITHOUT_CLASSIFICATION	0.0017251689315420501	DESIGN
// now look up the object we are really interested in! // (this lets us correctly handle proxies and multi-row // or multi-column queries)	WITHOUT_CLASSIFICATION	0.9991383926725724	WITHOUT_CLASSIFICATION	8.616073274276353E-4	DESIGN
// discriminator column	WITHOUT_CLASSIFICATION	0.9998733718976818	WITHOUT_CLASSIFICATION	1.2662810231832086E-4	DESIGN
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9967688892480616	WITHOUT_CLASSIFICATION	0.003231110751938361	DESIGN
//private final Map propertyTableNumbersByName = new HashMap();	WITHOUT_CLASSIFICATION	0.999689268805229	WITHOUT_CLASSIFICATION	3.107311947710768E-4	DESIGN
// CLASS + TABLE	WITHOUT_CLASSIFICATION	0.9997683492485313	WITHOUT_CLASSIFICATION	2.3165075146865439E-4	DESIGN
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9991103531722325	WITHOUT_CLASSIFICATION	8.896468277674399E-4	DESIGN
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9991227879551358	WITHOUT_CLASSIFICATION	8.772120448641185E-4	DESIGN
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9991103531722325	WITHOUT_CLASSIFICATION	8.896468277674399E-4	DESIGN
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.9994481783057511	WITHOUT_CLASSIFICATION	5.518216942490032E-4	DESIGN
// JOINS	WITHOUT_CLASSIFICATION	0.9998122686237135	WITHOUT_CLASSIFICATION	1.87731376286521E-4	DESIGN
//propertyTableNumbersByName.put( prop.getName(), join );	WITHOUT_CLASSIFICATION	0.9988895575124797	WITHOUT_CLASSIFICATION	0.00111044248752027	DESIGN
//Access cached SQL	WITHOUT_CLASSIFICATION	0.9981627112133452	WITHOUT_CLASSIFICATION	0.0018372887866548707	DESIGN
//figure out which tables need to be fetched	WITHOUT_CLASSIFICATION	0.987939542400676	WITHOUT_CLASSIFICATION	0.012060457599324	DESIGN
//figure out which columns are needed	WITHOUT_CLASSIFICATION	0.9992629348083819	WITHOUT_CLASSIFICATION	7.370651916180495E-4	DESIGN
//figure out which formulas are needed	WITHOUT_CLASSIFICATION	0.9984741879192349	WITHOUT_CLASSIFICATION	0.0015258120807651017	DESIGN
//render the SQL	WITHOUT_CLASSIFICATION	0.9984790051428238	WITHOUT_CLASSIFICATION	0.0015209948571762747	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996329752382063	WITHOUT_CLASSIFICATION	3.670247617937264E-4	DESIGN
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9947223395663312	WITHOUT_CLASSIFICATION	0.0052776604336688135	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994086587758717	WITHOUT_CLASSIFICATION	5.913412241282598E-4	DESIGN
// The optional SQL string defined in the where attribute	WITHOUT_CLASSIFICATION	0.9999953142697592	WITHOUT_CLASSIFICATION	4.685730240825374E-6	DESIGN
//information about lazy properties of this class	WITHOUT_CLASSIFICATION	0.992339568929588	WITHOUT_CLASSIFICATION	0.0076604310704120335	DESIGN
//information about all properties in class hierarchy	WITHOUT_CLASSIFICATION	0.998828153929353	WITHOUT_CLASSIFICATION	0.0011718460706470226	DESIGN
//information about all columns/formulas in class hierarchy	WITHOUT_CLASSIFICATION	0.9984570269822525	WITHOUT_CLASSIFICATION	0.0015429730177475448	DESIGN
// dynamic filters attached to the class-level	WITHOUT_CLASSIFICATION	0.9997458347330769	WITHOUT_CLASSIFICATION	2.5416526692315257E-4	DESIGN
// SQL strings	WITHOUT_CLASSIFICATION	0.9981485785454101	WITHOUT_CLASSIFICATION	0.0018514214545899009	DESIGN
// for objects that came in via update()	WITHOUT_CLASSIFICATION	0.9998976382440614	WITHOUT_CLASSIFICATION	1.0236175593859959E-4	DESIGN
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9991227879551358	WITHOUT_CLASSIFICATION	8.772120448641185E-4	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994086587758717	WITHOUT_CLASSIFICATION	5.913412241282598E-4	DESIGN
// IDENTIFIER	WITHOUT_CLASSIFICATION	0.9991103531722325	WITHOUT_CLASSIFICATION	8.896468277674399E-4	DESIGN
// VERSION	WITHOUT_CLASSIFICATION	0.9998122686237135	WITHOUT_CLASSIFICATION	1.87731376286521E-4	DESIGN
//WHERE STRING	WITHOUT_CLASSIFICATION	0.9971245475715913	WITHOUT_CLASSIFICATION	0.002875452428408726	DESIGN
// SUBCLASS PROPERTY CLOSURE	WITHOUT_CLASSIFICATION	0.9995183829435321	WITHOUT_CLASSIFICATION	4.8161705646792777E-4	DESIGN
//before add :-)	WITHOUT_CLASSIFICATION	0.9963850597880076	WITHOUT_CLASSIFICATION	0.0036149402119922233	DESIGN
// Handle any filters applied to the class level	WITHOUT_CLASSIFICATION	0.9977428573689422	WITHOUT_CLASSIFICATION	0.002257142631057918	DESIGN
// only one-to-one is lazy fetched	WITHOUT_CLASSIFICATION	0.99985779317848	WITHOUT_CLASSIFICATION	1.422068215199489E-4	DESIGN
//note early exit here:	WITHOUT_CLASSIFICATION	0.999165245417842	WITHOUT_CLASSIFICATION	8.347545821579313E-4	DESIGN
// object have been loaded with setReadOnly(true); HHH-2236	WITHOUT_CLASSIFICATION	0.9994498712227814	WITHOUT_CLASSIFICATION	5.501287772186478E-4	DESIGN
// NOTE: this assumes something about how propertySelectFragment is implemented by the subclass!	WITHOUT_CLASSIFICATION	0.9999608909986631	WITHOUT_CLASSIFICATION	3.910900133686053E-5	DESIGN
//strip leading ", "	WITHOUT_CLASSIFICATION	0.9988142905306998	WITHOUT_CLASSIFICATION	0.0011857094693001678	DESIGN
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9993875703954347	WITHOUT_CLASSIFICATION	6.124296045653947E-4	DESIGN
//otherwise return the "hydrated" state (ie. associations are not resolved)	WITHOUT_CLASSIFICATION	0.9949528853133185	WITHOUT_CLASSIFICATION	0.00504711468668154	DESIGN
//null owner ok??	WITHOUT_CLASSIFICATION	0.9985191266477556	WITHOUT_CLASSIFICATION	0.001480873352244462	DESIGN
// null sql means that the only lazy properties // are shared PK one-to-one associations which are // handled differently in the Type#nullSafeGet code...	WITHOUT_CLASSIFICATION	0.9997167356240797	WITHOUT_CLASSIFICATION	2.8326437592035835E-4	DESIGN
// Create a new FROM node for the referenced class.	WITHOUT_CLASSIFICATION	0.9998019356846854	WITHOUT_CLASSIFICATION	1.9806431531463277E-4	DESIGN
// the difficulty here is exactly what do we update in order to // force the version to be incremented in the db...	WITHOUT_CLASSIFICATION	0.9859419336597867	WITHOUT_CLASSIFICATION	0.014058066340213424	DESIGN
// performance op to avoid the array search	WITHOUT_CLASSIFICATION	0.998385045779104	WITHOUT_CLASSIFICATION	0.001614954220895915	DESIGN
// properly handle property-ref-based associations	WITHOUT_CLASSIFICATION	0.99874516983117	WITHOUT_CLASSIFICATION	0.0012548301688299528	DESIGN
//Enable for HHH-440, which we don't like:	WITHOUT_CLASSIFICATION	0.9962339270565052	WITHOUT_CLASSIFICATION	0.003766072943494823	DESIGN
// ALIASES	WITHOUT_CLASSIFICATION	0.9998122686237135	WITHOUT_CLASSIFICATION	1.87731376286521E-4	DESIGN
// aliases named identifier ( alias.idname )	WITHOUT_CLASSIFICATION	0.999488670583247	WITHOUT_CLASSIFICATION	5.113294167529924E-4	DESIGN
// aliases for composite-id's	WITHOUT_CLASSIFICATION	0.9995859643132853	WITHOUT_CLASSIFICATION	4.1403568671472365E-4	DESIGN
// Fetch embedded identifiers propertynames from the "virtual" identifier component	WITHOUT_CLASSIFICATION	0.999481334048735	WITHOUT_CLASSIFICATION	5.186659512651028E-4	DESIGN
// embedded composite ids ( alias.idname1, alias.idname2 )	WITHOUT_CLASSIFICATION	0.9935203000506563	WITHOUT_CLASSIFICATION	0.006479699949343716	DESIGN
// TODO: skip formulas?	WITHOUT_CLASSIFICATION	0.6389504112346069	DESIGN	0.361049588765393	WITHOUT_CLASSIFICATION
//don't need filters for the static loaders	WITHOUT_CLASSIFICATION	0.9970969667638452	WITHOUT_CLASSIFICATION	0.0029030332361548597	DESIGN
//do two passes, for collection property-ref!	WITHOUT_CLASSIFICATION	0.9976077166473688	WITHOUT_CLASSIFICATION	0.002392283352631172	DESIGN
// select the correct row by either pk or rowid	WITHOUT_CLASSIFICATION	0.9993388231426227	WITHOUT_CLASSIFICATION	6.611768573773051E-4	DESIGN
//TODO: eventually, rowIdName[j]	WITHOUT_CLASSIFICATION	0.9058810626981666	WITHOUT_CLASSIFICATION	0.09411893730183343	DESIGN
// this is a property of the table, which we are updating	WITHOUT_CLASSIFICATION	0.9915166408530476	WITHOUT_CLASSIFICATION	0.008483359146952345	DESIGN
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9987493219246919	WITHOUT_CLASSIFICATION	0.001250678075308082	DESIGN
// we are using "all" or "dirty" property-based optimistic locking	WITHOUT_CLASSIFICATION	0.9996510974917245	WITHOUT_CLASSIFICATION	3.4890250827544604E-4	DESIGN
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9805111002918909	WITHOUT_CLASSIFICATION	0.019488899708109023	DESIGN
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9839111293650351	WITHOUT_CLASSIFICATION	0.016088870634964902	DESIGN
// add normal properties	WITHOUT_CLASSIFICATION	0.999482517749753	WITHOUT_CLASSIFICATION	5.174822502469517E-4	DESIGN
// add the discriminator	WITHOUT_CLASSIFICATION	0.9996399457447535	WITHOUT_CLASSIFICATION	3.6005425524655946E-4	DESIGN
// more specifically : "? [op] datetime" //      1) if the operator is MINUS, the param needs to be of //          some datetime type //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.9813467338024487	WITHOUT_CLASSIFICATION	0.018653266197551227	DESIGN
// add normal properties	WITHOUT_CLASSIFICATION	0.999482517749753	WITHOUT_CLASSIFICATION	5.174822502469517E-4	DESIGN
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9839111293650351	WITHOUT_CLASSIFICATION	0.016088870634964902	DESIGN
// add the discriminator	WITHOUT_CLASSIFICATION	0.9996399457447535	WITHOUT_CLASSIFICATION	3.6005425524655946E-4	DESIGN
// add the primary key	WITHOUT_CLASSIFICATION	0.9999216048956373	WITHOUT_CLASSIFICATION	7.839510436270536E-5	DESIGN
// delegate already handles PK columns	WITHOUT_CLASSIFICATION	0.9998484886104628	WITHOUT_CLASSIFICATION	1.5151138953716222E-4	DESIGN
// we can't batch joined inserts, *especially* not if it is an identity insert; // nor can we batch statements where the expectation is based on an output param	WITHOUT_CLASSIFICATION	0.9997860081566037	WITHOUT_CLASSIFICATION	2.1399184339624538E-4	DESIGN
// Render the SQL query	WITHOUT_CLASSIFICATION	0.9997810226798228	WITHOUT_CLASSIFICATION	2.189773201771977E-4	DESIGN
// Write the values of fields onto the prepared statement - we MUST use the state at the time the // insert was issued (cos of foreign key constraints). Not necessarily the object's current state	WITHOUT_CLASSIFICATION	0.999996581368834	WITHOUT_CLASSIFICATION	3.4186311660617935E-6	DESIGN
// TODO : shouldnt inserts be Expectations.NONE?	WITHOUT_CLASSIFICATION	0.5270859957932326	WITHOUT_CLASSIFICATION	0.4729140042067676	DESIGN
//don't bother trying to update, we know there is no row there yet	WITHOUT_CLASSIFICATION	0.9960929987254936	WITHOUT_CLASSIFICATION	0.003907001274506424	DESIGN
//if all fields are null, we might need to delete existing row	WITHOUT_CLASSIFICATION	0.9971251235419338	WITHOUT_CLASSIFICATION	0.0028748764580661334	DESIGN
//there is probably a row there, so try to update //if no rows were updated, we will find out	WITHOUT_CLASSIFICATION	0.9980103682747467	WITHOUT_CLASSIFICATION	0.0019896317252533356	DESIGN
//note: updates to joined tables can't be batched...	WITHOUT_CLASSIFICATION	0.9979958951615953	WITHOUT_CLASSIFICATION	0.0020041048384046825	DESIGN
// starting index	WITHOUT_CLASSIFICATION	0.9995514950493011	WITHOUT_CLASSIFICATION	4.485049506988825E-4	DESIGN
//Now write the values of fields onto the prepared statement	WITHOUT_CLASSIFICATION	0.9999726063456269	WITHOUT_CLASSIFICATION	2.7393654373144375E-5	DESIGN
// Write any appropriate versioning conditional parameters	WITHOUT_CLASSIFICATION	0.9993816445828331	WITHOUT_CLASSIFICATION	6.183554171668772E-4	DESIGN
//Render the SQL query	WITHOUT_CLASSIFICATION	0.9992032881129264	WITHOUT_CLASSIFICATION	7.967118870735887E-4	DESIGN
// Do the key. The key is immutable so we can use the _current_ object state - not necessarily // the state at the time the delete was issued	WITHOUT_CLASSIFICATION	0.9998909136438928	WITHOUT_CLASSIFICATION	1.0908635610727924E-4	DESIGN
// We should use the _current_ object state (ie. after any updates that occurred during flush)	WITHOUT_CLASSIFICATION	0.9990887720495633	WITHOUT_CLASSIFICATION	9.112279504366945E-4	DESIGN
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9888152653262342	WITHOUT_CLASSIFICATION	0.011184734673765835	DESIGN
//note: dirtyFields==null means we had no snapshot, and we couldn't get one using select-before-update //	WITHOUT_CLASSIFICATION	0.999458743271504	WITHOUT_CLASSIFICATION	5.412567284959549E-4	DESIGN
// more specifically : "datetime [op] ?" //      1) if the operator is MINUS, we really cannot determine //          the expected type as either another datetime or //          numeric would be valid //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.9992621786096282	WITHOUT_CLASSIFICATION	7.378213903719422E-4	DESIGN
// For the case of dynamic-update="true", we need to generate the UPDATE SQL	WITHOUT_CLASSIFICATION	0.9998418710254959	WITHOUT_CLASSIFICATION	1.5812897450399855E-4	DESIGN
// don't need to check laziness (dirty checking algorithm handles that)	WITHOUT_CLASSIFICATION	0.9917198181412499	WITHOUT_CLASSIFICATION	0.008280181858750164	DESIGN
// For the case of dynamic-update="false", or no snapshot, we use the static SQL	WITHOUT_CLASSIFICATION	0.9999871724772104	WITHOUT_CLASSIFICATION	1.2827522789613643E-5	DESIGN
// if not "get", then try "is"	WITHOUT_CLASSIFICATION	0.9998183925431752	WITHOUT_CLASSIFICATION	1.8160745682474096E-4	DESIGN
// Now update only the tables with dirty properties (and the table with the version number)	WITHOUT_CLASSIFICATION	0.9999849615124368	WITHOUT_CLASSIFICATION	1.5038487563277216E-5	DESIGN
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9998412485328901	WITHOUT_CLASSIFICATION	1.5875146710986367E-4	DESIGN
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9998412485328901	WITHOUT_CLASSIFICATION	1.5875146710986367E-4	DESIGN
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999865642562875	WITHOUT_CLASSIFICATION	1.343574371249072E-5	DESIGN
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999865642562875	WITHOUT_CLASSIFICATION	1.343574371249072E-5	DESIGN
// not supported	WITHOUT_CLASSIFICATION	0.9982299172015241	WITHOUT_CLASSIFICATION	0.0017700827984759105	DESIGN
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9888152653262342	WITHOUT_CLASSIFICATION	0.011184734673765835	DESIGN
// we need to utilize dynamic delete statements	WITHOUT_CLASSIFICATION	0.9979648905859954	WITHOUT_CLASSIFICATION	0.002035109414004745	DESIGN
// otherwise, utilize the static delete statements	WITHOUT_CLASSIFICATION	0.9999499847101452	WITHOUT_CLASSIFICATION	5.0015289854857165E-5	DESIGN
//just a performance opt!	WITHOUT_CLASSIFICATION	0.9880294849771598	WITHOUT_CLASSIFICATION	0.011970515022840245	DESIGN
//just a performance opt!	WITHOUT_CLASSIFICATION	0.9880294849771598	WITHOUT_CLASSIFICATION	0.011970515022840245	DESIGN
//all joins join to the pk of the driving table	WITHOUT_CLASSIFICATION	0.9997253969677657	WITHOUT_CLASSIFICATION	2.7460303223429526E-4	DESIGN
//notice that we skip the first table; it is the driving table!	WITHOUT_CLASSIFICATION	0.9974874382677476	WITHOUT_CLASSIFICATION	0.002512561732252348	DESIGN
//we can inner join to superclass tables (the row MUST be there) //we can never inner join to subclass tables	WITHOUT_CLASSIFICATION	0.9997770727677013	WITHOUT_CLASSIFICATION	2.2292723229865716E-4	DESIGN
//skip the driving table	WITHOUT_CLASSIFICATION	0.9994122121031329	WITHOUT_CLASSIFICATION	5.877878968670844E-4	DESIGN
//get 'em in the right order (not that it really matters)	WITHOUT_CLASSIFICATION	0.7426983189183977	WITHOUT_CLASSIFICATION	0.25730168108160234	DESIGN
// here, we work under the following assumptions: //      ------------ valid cases -------------------------------------- //      1) datetime + {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      2) datetime - datetime : always results in a DOUBLE //      3) datetime - {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      ------------ invalid cases ------------------------------------ //      4) datetime + datetime //      5) {something other than datetime} - datetime //      6) datetime * {any type} //      7) datetime / {any type} //      8) {any type} / datetime // doing so allows us to properly handle parameters as either the left // or right side here in the majority of cases	WITHOUT_CLASSIFICATION	0.9999812445564623	WITHOUT_CLASSIFICATION	1.8755443537621066E-5	DESIGN
//render the where and from parts	WITHOUT_CLASSIFICATION	0.9980168057010098	WITHOUT_CLASSIFICATION	0.0019831942989901154	DESIGN
//we *could* regerate this inside each called method!	WITHOUT_CLASSIFICATION	0.9920751975549534	WITHOUT_CLASSIFICATION	0.00792480244504667	DESIGN
//now render the joins	WITHOUT_CLASSIFICATION	0.9973384087617547	WITHOUT_CLASSIFICATION	0.00266159123824519	DESIGN
// This will add the new from element to the origin.	WITHOUT_CLASSIFICATION	0.9946461166983722	WITHOUT_CLASSIFICATION	0.005353883301627715	DESIGN
//now render the select clause	WITHOUT_CLASSIFICATION	0.9988900275889686	WITHOUT_CLASSIFICATION	0.0011099724110314364	DESIGN
//now tie it all together	WITHOUT_CLASSIFICATION	0.9989190422967034	WITHOUT_CLASSIFICATION	0.0010809577032966787	DESIGN
//insert/update/delete SQL	WITHOUT_CLASSIFICATION	0.9987467977310566	WITHOUT_CLASSIFICATION	0.0012532022689434234	DESIGN
//select SQL	WITHOUT_CLASSIFICATION	0.9979963278002444	WITHOUT_CLASSIFICATION	0.0020036721997556575	DESIGN
//no need to check laziness, dirty checking handles that	WITHOUT_CLASSIFICATION	0.9961769346497064	WITHOUT_CLASSIFICATION	0.003823065350293696	DESIGN
// Fully resolve the map reference, create implicit joins.	WITHOUT_CLASSIFICATION	0.9998457169951608	WITHOUT_CLASSIFICATION	1.5428300483910634E-4	DESIGN
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9857961728306096	WITHOUT_CLASSIFICATION	0.014203827169390344	DESIGN
// The basic implementation is to simply use the node's text	WITHOUT_CLASSIFICATION	0.9999533262212783	WITHOUT_CLASSIFICATION	4.667377872172505E-5	DESIGN
// for dialects which are known to not support ANSI-SQL row-value-constructor syntax, // we should mutate the tree.	WITHOUT_CLASSIFICATION	0.9613665700177516	WITHOUT_CLASSIFICATION	0.03863342998224838	DESIGN
// Due to the complexity in initializing the SelectClause, do not generate one here. // If it is not found; simply return null... // // Also, do not cache since it gets generated well after we are created.	WITHOUT_CLASSIFICATION	0.9994679927889023	WITHOUT_CLASSIFICATION	5.320072110977371E-4	DESIGN
// check the version unsaved-value, if appropriate	WITHOUT_CLASSIFICATION	0.9999281565602655	WITHOUT_CLASSIFICATION	7.184343973453162E-5	DESIGN
// let this take precedence if defined, since it works for // assigned identifiers	WITHOUT_CLASSIFICATION	0.9948004938337196	WITHOUT_CLASSIFICATION	0.005199506166280465	DESIGN
// check the id unsaved-value	WITHOUT_CLASSIFICATION	0.9999129493460456	WITHOUT_CLASSIFICATION	8.705065395434993E-5	DESIGN
// check to see if it is in the second-level cache	WITHOUT_CLASSIFICATION	0.999875224933372	WITHOUT_CLASSIFICATION	1.2477506662799304E-4	DESIGN
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9978644915012125	WITHOUT_CLASSIFICATION	0.002135508498787598	DESIGN
// For property references generate <tablealias>.<columnname> as <projectionalias>	WITHOUT_CLASSIFICATION	0.9998736446426343	WITHOUT_CLASSIFICATION	1.2635535736558158E-4	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994086587758717	WITHOUT_CLASSIFICATION	5.913412241282598E-4	DESIGN
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9993875703954347	WITHOUT_CLASSIFICATION	6.124296045653947E-4	DESIGN
//force immediate execution of the insert	WITHOUT_CLASSIFICATION	0.9998195413458911	WITHOUT_CLASSIFICATION	1.8045865410891386E-4	DESIGN
// If this from element is a collection and the path is a collection property (maxIndex, etc.) then // generate a sub-query.	WITHOUT_CLASSIFICATION	0.9956657196575223	WITHOUT_CLASSIFICATION	0.004334280342477704	DESIGN
// entities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994086587758717	WITHOUT_CLASSIFICATION	5.913412241282598E-4	DESIGN
// collections ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994613972653997	WITHOUT_CLASSIFICATION	5.386027346002714E-4	DESIGN
//cannot occur	WITHOUT_CLASSIFICATION	0.9915113861232613	WITHOUT_CLASSIFICATION	0.008488613876738781	DESIGN
//cannot occur	WITHOUT_CLASSIFICATION	0.9915113861232613	WITHOUT_CLASSIFICATION	0.008488613876738781	DESIGN
// only carry on if the method has no parameters	WITHOUT_CLASSIFICATION	0.9999942852431769	WITHOUT_CLASSIFICATION	5.714756822985398E-6	DESIGN
// try "get"	WITHOUT_CLASSIFICATION	0.999869445064825	WITHOUT_CLASSIFICATION	1.3055493517504513E-4	DESIGN
// do nothing...	WITHOUT_CLASSIFICATION	0.9988674592781793	WITHOUT_CLASSIFICATION	0.001132540721820602	DESIGN
// do nothing...	WITHOUT_CLASSIFICATION	0.9988674592781793	WITHOUT_CLASSIFICATION	0.001132540721820602	DESIGN
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9986772884409505	WITHOUT_CLASSIFICATION	0.0013227115590495582	DESIGN
// this page intentionally left blank :)	WITHOUT_CLASSIFICATION	0.9973079771059657	WITHOUT_CLASSIFICATION	0.0026920228940341693	DESIGN
// do not do anything	WITHOUT_CLASSIFICATION	0.9991739028534241	WITHOUT_CLASSIFICATION	8.260971465759558E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998122686237135	WITHOUT_CLASSIFICATION	1.87731376286521E-4	DESIGN
// ignore	WITHOUT_CLASSIFICATION	0.9997047648977977	WITHOUT_CLASSIFICATION	2.9523510220236406E-4	DESIGN
//cant instantiate	WITHOUT_CLASSIFICATION	0.9976951042839196	WITHOUT_CLASSIFICATION	0.0023048957160803404	DESIGN
//if it is a property of an embedded component, invoke on the "identifier"	WITHOUT_CLASSIFICATION	0.99781758283768	WITHOUT_CLASSIFICATION	0.0021824171623200353	DESIGN
// otherwise:	WITHOUT_CLASSIFICATION	0.9991103531722325	WITHOUT_CLASSIFICATION	8.896468277674399E-4	DESIGN
// skip finalize methods	WITHOUT_CLASSIFICATION	0.9991425173780186	WITHOUT_CLASSIFICATION	8.574826219813576E-4	DESIGN
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9997689392496256	WITHOUT_CLASSIFICATION	2.3106075037441828E-4	DESIGN
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9997689392496256	WITHOUT_CLASSIFICATION	2.3106075037441828E-4	DESIGN
// HHH-2481 make sure the callback gets cleared, otherwise the instance stays in a static thread local.	WITHOUT_CLASSIFICATION	0.960514795402906	WITHOUT_CLASSIFICATION	0.0394852045970941	DESIGN
// while constructor is running	WITHOUT_CLASSIFICATION	0.9999780760530573	WITHOUT_CLASSIFICATION	2.1923946942663656E-5	DESIGN
// while constructor is running	WITHOUT_CLASSIFICATION	0.9999780760530573	WITHOUT_CLASSIFICATION	2.1923946942663656E-5	DESIGN
// note: interface is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9997136206240058	WITHOUT_CLASSIFICATION	2.8637937599413146E-4	DESIGN
// interfaces // arguments	WITHOUT_CLASSIFICATION	0.999714999739271	WITHOUT_CLASSIFICATION	2.8500026072892233E-4	DESIGN
//TODO!	WITHOUT_CLASSIFICATION	0.9993169148631355	WITHOUT_CLASSIFICATION	6.830851368645701E-4	DESIGN
// Get the caller	WITHOUT_CLASSIFICATION	0.9998241045597841	WITHOUT_CLASSIFICATION	1.7589544021588878E-4	DESIGN
// Get the caller principals	WITHOUT_CLASSIFICATION	0.9999039862630142	WITHOUT_CLASSIFICATION	9.601373698581965E-5	DESIGN
//private static final Alias DEFAULT_ALIAS = new Alias(10, null);	WITHOUT_CLASSIFICATION	0.9998742946130478	WITHOUT_CLASSIFICATION	1.2570538695221153E-4	DESIGN
// Needed to bump this up to DotNode, because that is the only thing which currently // knows about the property-ref path in the correct format; it is either this, or // recurse over the DotNodes constructing the property path just like DotNode does // internally	WITHOUT_CLASSIFICATION	0.9125862041375981	WITHOUT_CLASSIFICATION	0.08741379586240199	DESIGN
//if the identifier is quoted, remove the quotes	WITHOUT_CLASSIFICATION	0.9979884418732812	WITHOUT_CLASSIFICATION	0.0020115581267188777	DESIGN
//truncate the identifier to the max alias length, less the suffix length	WITHOUT_CLASSIFICATION	0.999715984805347	WITHOUT_CLASSIFICATION	2.840151946530899E-4	DESIGN
//full joins are not supported.. yet!	WITHOUT_CLASSIFICATION	0.9922181328506844	WITHOUT_CLASSIFICATION	0.007781867149315608	DESIGN
// null is not considered the same type as Integer. //$NON-NLS-1 //$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9924467086093974	WITHOUT_CLASSIFICATION	0.007553291390602663	DESIGN
// the outerJoinsAfterWhere needs to come before where clause to properly // handle dynamic filters	WITHOUT_CLASSIFICATION	0.9987347774601235	WITHOUT_CLASSIFICATION	0.0012652225398764108	DESIGN
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9971026562896226	WITHOUT_CLASSIFICATION	0.002897343710377472	DESIGN
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9971026562896226	WITHOUT_CLASSIFICATION	0.002897343710377472	DESIGN
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9971026562896226	WITHOUT_CLASSIFICATION	0.002897343710377472	DESIGN
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9971026562896226	WITHOUT_CLASSIFICATION	0.002897343710377472	DESIGN
// strip off any leading 'and' token	WITHOUT_CLASSIFICATION	0.99989979398704	WITHOUT_CLASSIFICATION	1.0020601295996136E-4	DESIGN
// if the condition is not already there...	WITHOUT_CLASSIFICATION	0.9991679331066371	WITHOUT_CLASSIFICATION	8.320668933629405E-4	DESIGN
//dontSpace.add("'");	WITHOUT_CLASSIFICATION	0.9982338249437797	WITHOUT_CLASSIFICATION	0.0017661750562203082	DESIGN
//for MySQL	WITHOUT_CLASSIFICATION	0.9987132693247908	WITHOUT_CLASSIFICATION	0.0012867306752092737	DESIGN
//HashMap columnsUnique = new HashMap();	WITHOUT_CLASSIFICATION	0.9991295157906203	WITHOUT_CLASSIFICATION	8.704842093797736E-4	DESIGN
//null caused some problems	WITHOUT_CLASSIFICATION	0.9917602646162827	WITHOUT_CLASSIFICATION	0.008239735383717204	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.9967688892480616	WITHOUT_CLASSIFICATION	0.003231110751938361	DESIGN
//not sure if this would ever be null but wanted to be careful	WITHOUT_CLASSIFICATION	0.9979678536960321	WITHOUT_CLASSIFICATION	0.002032146303967925	DESIGN
//even on inverse="true"	WITHOUT_CLASSIFICATION	0.9976728938378161	WITHOUT_CLASSIFICATION	0.0023271061621838183	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.9967688892480616	WITHOUT_CLASSIFICATION	0.003231110751938361	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.9967688892480616	WITHOUT_CLASSIFICATION	0.003231110751938361	DESIGN
// If true then execute db updates, otherwise just generate and display updates	WITHOUT_CLASSIFICATION	0.999897731807686	WITHOUT_CLASSIFICATION	1.0226819231398898E-4	DESIGN
// we only release the connection	WITHOUT_CLASSIFICATION	0.999486199440379	WITHOUT_CLASSIFICATION	5.13800559620978E-4	DESIGN
// deprecated option...	WITHOUT_CLASSIFICATION	0.9961346550750002	WITHOUT_CLASSIFICATION	0.003865344924999823	DESIGN
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9988733982646656	WITHOUT_CLASSIFICATION	0.001126601735334459	DESIGN
//actually, this last test is probably unnecessary, since  //beforeCompletion() doesn't get called during rollback	WITHOUT_CLASSIFICATION	0.999051021175198	WITHOUT_CLASSIFICATION	9.48978824802001E-4	DESIGN
// this one only really needed for badly-behaved applications! // (if the TransactionManager has a Sychronization registered, // its a noop) // (actually we do need it for downgrading locks)	WITHOUT_CLASSIFICATION	0.9959726157178932	WITHOUT_CLASSIFICATION	0.0040273842821067565	DESIGN
// Create an DotNode AST for the path and resolve it.	WITHOUT_CLASSIFICATION	0.9998796428538396	WITHOUT_CLASSIFICATION	1.2035714616037425E-4	DESIGN
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9988733982646656	WITHOUT_CLASSIFICATION	0.001126601735334459	DESIGN
//if we could not register a synchronization, //do the before/after completion callbacks //ourself (but we need to let jdbcContext //know that this is what we are going to //do, so it doesn't keep trying to register //synchronizations)	WITHOUT_CLASSIFICATION	0.9419291517748193	DESIGN	0.05807084822518077	WITHOUT_CLASSIFICATION
// swallow it, and continue to roll back JTA transaction	WITHOUT_CLASSIFICATION	0.9970591461670538	WITHOUT_CLASSIFICATION	0.0029408538329461077	DESIGN
// so the transaction is already rolled back, by JTA spec	WITHOUT_CLASSIFICATION	0.9999446895878404	WITHOUT_CLASSIFICATION	5.531041215946479E-5	DESIGN
// this method is a noop if there is a Synchronization!	WITHOUT_CLASSIFICATION	0.9987528345798091	WITHOUT_CLASSIFICATION	0.0012471654201909738	DESIGN
// two conditions where we need to transform this to a theta-join syntax: //      1) 'elem' is the "root from-element" in correlated subqueries //      2) The DotNode.useThetaStyleImplicitJoins has been set to true //          and 'elem' represents an implicit join	WITHOUT_CLASSIFICATION	0.9995843978435264	WITHOUT_CLASSIFICATION	4.156021564737096E-4	DESIGN
// WebSphere, however, is not a sane JEE/JTA container...	WITHOUT_CLASSIFICATION	0.995111613201668	WITHOUT_CLASSIFICATION	0.004888386798332046	DESIGN
// for sane JEE/JTA containers, the transaction itself functions as its identifier...	WITHOUT_CLASSIFICATION	0.9976086054798249	WITHOUT_CLASSIFICATION	0.002391394520175132	DESIGN
//swallow, the transaction was finished	WITHOUT_CLASSIFICATION	0.9989020260732172	WITHOUT_CLASSIFICATION	0.0010979739267827655	DESIGN
// all AliasToEntityMapResultTransformer are considered equal ~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997187361864067	WITHOUT_CLASSIFICATION	2.8126381359319685E-4	DESIGN
// Create the join element under the from element.	WITHOUT_CLASSIFICATION	0.9991891754492477	WITHOUT_CLASSIFICATION	8.108245507522097E-4	DESIGN
// all DistinctRootEntityResultTransformer are considered equal ~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997187361864067	WITHOUT_CLASSIFICATION	2.8126381359319685E-4	DESIGN
// map of EntityMode -> Tuplizer	WITHOUT_CLASSIFICATION	0.9999650984962203	WITHOUT_CLASSIFICATION	3.490150377968521E-5	DESIGN
// this is a virtual id property...	WITHOUT_CLASSIFICATION	0.9962763463459593	WITHOUT_CLASSIFICATION	0.0037236536540408236	DESIGN
//this one needed only for guessEntityMode()	WITHOUT_CLASSIFICATION	0.9995115575691449	WITHOUT_CLASSIFICATION	4.884424308549957E-4	DESIGN
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999600429853481	WITHOUT_CLASSIFICATION	3.995701465197572E-5	DESIGN
// todo : move this to SF per HHH-3517; also see HHH-1907 and ComponentMetamodel	WITHOUT_CLASSIFICATION	0.9940181046356344	WITHOUT_CLASSIFICATION	0.005981895364365629	DESIGN
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9998784956499839	WITHOUT_CLASSIFICATION	1.2150435001601027E-4	DESIGN
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9996975593727498	WITHOUT_CLASSIFICATION	3.0244062725010565E-4	DESIGN
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.999674439763017	WITHOUT_CLASSIFICATION	3.2556023698303017E-4	DESIGN
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9996975593727498	WITHOUT_CLASSIFICATION	3.0244062725010565E-4	DESIGN
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9998503034647934	WITHOUT_CLASSIFICATION	1.49696535206611E-4	DESIGN
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.99995127863796	WITHOUT_CLASSIFICATION	4.872136204012478E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998122686237135	WITHOUT_CLASSIFICATION	1.87731376286521E-4	DESIGN
// cached for efficiency...	WITHOUT_CLASSIFICATION	0.9995988118313517	WITHOUT_CLASSIFICATION	4.0118816864834883E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998122686237135	WITHOUT_CLASSIFICATION	1.87731376286521E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998122686237135	WITHOUT_CLASSIFICATION	1.87731376286521E-4	DESIGN
//it was not embedded, so the argument is just an id	WITHOUT_CLASSIFICATION	0.9999296708927654	WITHOUT_CLASSIFICATION	7.032910723451343E-5	DESIGN
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9998784956499839	WITHOUT_CLASSIFICATION	1.2150435001601027E-4	DESIGN
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.999674439763017	WITHOUT_CLASSIFICATION	3.2556023698303017E-4	DESIGN
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9998503034647934	WITHOUT_CLASSIFICATION	1.49696535206611E-4	DESIGN
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9984958492494591	WITHOUT_CLASSIFICATION	0.0015041507505407935	DESIGN
//return currentId;	WITHOUT_CLASSIFICATION	0.9972634154689937	WITHOUT_CLASSIFICATION	0.002736584531006389	DESIGN
//reset the id	WITHOUT_CLASSIFICATION	0.9984606724481301	WITHOUT_CLASSIFICATION	0.00153932755186989	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998122686237135	WITHOUT_CLASSIFICATION	1.87731376286521E-4	DESIGN
//reset the version	WITHOUT_CLASSIFICATION	0.9991459031911255	WITHOUT_CLASSIFICATION	8.540968088744824E-4	DESIGN
// the default is to simply not lazy fetch properties for now...	WITHOUT_CLASSIFICATION	0.9960195727340919	WITHOUT_CLASSIFICATION	0.003980427265908049	DESIGN
// Add the second join, the one that ends in the destination table.	WITHOUT_CLASSIFICATION	0.9998659928729721	WITHOUT_CLASSIFICATION	1.3400712702787222E-4	DESIGN
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9857961728306096	WITHOUT_CLASSIFICATION	0.014203827169390344	DESIGN
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.99995127863796	WITHOUT_CLASSIFICATION	4.872136204012478E-5	DESIGN
// determine the id getter and setter methods from the proxy interface (if any) // determine all interfaces needed by the resulting proxy	WITHOUT_CLASSIFICATION	0.9999613088922742	WITHOUT_CLASSIFICATION	3.869110772575299E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998122686237135	WITHOUT_CLASSIFICATION	1.87731376286521E-4	DESIGN
//not final because proxy factory creation can fail	WITHOUT_CLASSIFICATION	0.9996111155482241	WITHOUT_CLASSIFICATION	3.8888445177590926E-4	DESIGN
// superclass entity-name	WITHOUT_CLASSIFICATION	0.999657908800455	WITHOUT_CLASSIFICATION	3.4209119954494436E-4	DESIGN
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9857961728306096	WITHOUT_CLASSIFICATION	0.014203827169390344	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994086587758717	WITHOUT_CLASSIFICATION	5.913412241282598E-4	DESIGN
//init the aliases, after initing the constructornode	WITHOUT_CLASSIFICATION	0.9985294397961675	WITHOUT_CLASSIFICATION	0.0014705602038325568	DESIGN
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9857961728306096	WITHOUT_CLASSIFICATION	0.014203827169390344	DESIGN
// legacy behavior (with no abstract attribute specified)	WITHOUT_CLASSIFICATION	0.9957456170475103	WITHOUT_CLASSIFICATION	0.0042543829524897435	DESIGN
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9997737960851435	WITHOUT_CLASSIFICATION	2.2620391485660352E-4	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994086587758717	WITHOUT_CLASSIFICATION	5.913412241282598E-4	DESIGN
//note: this affects the return value!	WITHOUT_CLASSIFICATION	0.9938889732440385	WITHOUT_CLASSIFICATION	0.006111026755961597	DESIGN
// Need to account for allowable '_' within the variant	WITHOUT_CLASSIFICATION	0.9994849670554817	WITHOUT_CLASSIFICATION	5.15032944518383E-4	DESIGN
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9996904073331158	WITHOUT_CLASSIFICATION	3.095926668842716E-4	DESIGN
// Collection Types:	WITHOUT_CLASSIFICATION	0.9989763798165292	WITHOUT_CLASSIFICATION	0.0010236201834708594	DESIGN
// convenience methods relating to operations across arrays of types...	WITHOUT_CLASSIFICATION	0.9993404061558036	WITHOUT_CLASSIFICATION	6.59593844196384E-4	DESIGN
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9993281826598469	WITHOUT_CLASSIFICATION	6.718173401529666E-4	DESIGN
//Blobs are ignored by merge()	WITHOUT_CLASSIFICATION	0.9996942795892595	WITHOUT_CLASSIFICATION	3.0572041074058086E-4	DESIGN
//value is the entity name	WITHOUT_CLASSIFICATION	0.9985462401241642	WITHOUT_CLASSIFICATION	0.0014537598758358726	DESIGN
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9967688892480616	WITHOUT_CLASSIFICATION	0.003231110751938361	DESIGN
// generate id select fragment and then property select fragment for // each expression, just like generateSelectFragments().	WITHOUT_CLASSIFICATION	0.9963438778629694	WITHOUT_CLASSIFICATION	0.0036561221370307374	DESIGN
//TODO!	WITHOUT_CLASSIFICATION	0.9993169148631355	WITHOUT_CLASSIFICATION	6.830851368645701E-4	DESIGN
//xml is the entity name	WITHOUT_CLASSIFICATION	0.9985462401241642	WITHOUT_CLASSIFICATION	0.0014537598758358726	DESIGN
//special case ... this is the leaf of the containment graph, even though not immutable	WITHOUT_CLASSIFICATION	0.9949169624011371	WITHOUT_CLASSIFICATION	0.005083037598862821	DESIGN
//tolerates nulls	WITHOUT_CLASSIFICATION	0.9977107833775417	WITHOUT_CLASSIFICATION	0.002289216622458269	DESIGN
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9982338249437797	WITHOUT_CLASSIFICATION	0.0017661750562203082	DESIGN
// metaType is assumed to be single-column type	WITHOUT_CLASSIFICATION	0.9976662163884835	WITHOUT_CLASSIFICATION	0.002333783611516469	DESIGN
// Get all the select expressions (that we just generated) and render the select.	WITHOUT_CLASSIFICATION	0.9994170546151228	WITHOUT_CLASSIFICATION	5.829453848771913E-4	DESIGN
// Look through the FromElement's children to find any collections of values that should be fetched...	WITHOUT_CLASSIFICATION	0.9999068849683727	WITHOUT_CLASSIFICATION	9.311503162734386E-5	DESIGN
//return AssociationType.FOREIGN_KEY_TO_PARENT; //this is better but causes a transient object exception...	WITHOUT_CLASSIFICATION	0.9409995482497782	WITHOUT_CLASSIFICATION	0.05900045175022189	DESIGN
// Use the lower case function name. // Remember whether we're in a SELECT clause or not.	WITHOUT_CLASSIFICATION	0.9979436153114897	WITHOUT_CLASSIFICATION	0.0020563846885104063	DESIGN
// IDENT might be the name of a class.	WITHOUT_CLASSIFICATION	0.9949472020048039	WITHOUT_CLASSIFICATION	0.005052797995196185	DESIGN
//TODO!!!	WITHOUT_CLASSIFICATION	0.9993169148631355	WITHOUT_CLASSIFICATION	6.830851368645701E-4	DESIGN
//st.setTimestamp( index,  new Timestamp( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9994405463291113	WITHOUT_CLASSIFICATION	5.594536708887022E-4	DESIGN
//st.setDate( index,  new Date( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9994405463291113	WITHOUT_CLASSIFICATION	5.594536708887022E-4	DESIGN
// both are Timestamps	WITHOUT_CLASSIFICATION	0.9993425264381048	WITHOUT_CLASSIFICATION	6.574735618950737E-4	DESIGN
// at least one is a plain old Date	WITHOUT_CLASSIFICATION	0.9993781619177946	WITHOUT_CLASSIFICATION	6.21838082205321E-4	DESIGN
//noop	WITHOUT_CLASSIFICATION	0.9993169148631355	WITHOUT_CLASSIFICATION	6.830851368645701E-4	DESIGN
// if the corresponding SQL value is NULL, the reader we got is NULL as well	WITHOUT_CLASSIFICATION	0.9999963041273395	WITHOUT_CLASSIFICATION	3.695872660386861E-6	DESIGN
// Fetch Reader content up to the end - and put characters in a StringBuffer	WITHOUT_CLASSIFICATION	0.9994760496167112	WITHOUT_CLASSIFICATION	5.239503832887868E-4	DESIGN
// Return StringBuffer content as a large String	WITHOUT_CLASSIFICATION	0.999936846570715	WITHOUT_CLASSIFICATION	6.315342928496432E-5	DESIGN
//or Types.LONGVARCHAR?	WITHOUT_CLASSIFICATION	0.9982468352708787	WITHOUT_CLASSIFICATION	0.0017531647291212922	DESIGN
//Not called at runtime so doesn't matter if its slow :)	WITHOUT_CLASSIFICATION	0.9965100111682594	WITHOUT_CLASSIFICATION	0.003489988831740539	DESIGN
//TODO	WITHOUT_CLASSIFICATION	0.6985828522190608	WITHOUT_CLASSIFICATION	0.3014171477809392	DESIGN
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9998884346906322	WITHOUT_CLASSIFICATION	1.1156530936790394E-4	DESIGN
//different nullability rules for pk/fk	WITHOUT_CLASSIFICATION	0.9974043719003527	WITHOUT_CLASSIFICATION	0.0025956280996474223	DESIGN
//cache this	WITHOUT_CLASSIFICATION	0.9849549057154877	WITHOUT_CLASSIFICATION	0.015045094284512417	DESIGN
//only really need new array during semiresolve!	WITHOUT_CLASSIFICATION	0.9971889543059774	WITHOUT_CLASSIFICATION	0.0028110456940225177	DESIGN
// Forcefully remove leading ands from where fragments; the grammar will // handle adding them	WITHOUT_CLASSIFICATION	0.9979162236671714	WITHOUT_CLASSIFICATION	0.0020837763328286464	DESIGN
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9967688892480616	WITHOUT_CLASSIFICATION	0.003231110751938361	DESIGN
// Create a new FILTERS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999101400761459	WITHOUT_CLASSIFICATION	8.985992385411884E-5	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994086587758717	WITHOUT_CLASSIFICATION	5.913412241282598E-4	DESIGN
//public Object instantiate(Object parent, SessionImplementor session) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9985813582302933	WITHOUT_CLASSIFICATION	0.0014186417697067796	DESIGN
//nothing to do	WITHOUT_CLASSIFICATION	0.9945508017933579	WITHOUT_CLASSIFICATION	0.005449198206642152	DESIGN
//nothing to do	WITHOUT_CLASSIFICATION	0.9945508017933579	WITHOUT_CLASSIFICATION	0.005449198206642152	DESIGN
// VersionType impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //      Note : simply returns null for seed() and next() as the only known //      application of binary types for versioning is for use with the //      TIMESTAMP datatype supported by Sybase and SQL Server, which //      are completely db-generated values...	WITHOUT_CLASSIFICATION	0.999995785437537	WITHOUT_CLASSIFICATION	4.214562463091989E-6	DESIGN
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9993281826598469	WITHOUT_CLASSIFICATION	6.718173401529666E-4	DESIGN
//not really necessary, I guess...	WITHOUT_CLASSIFICATION	0.9961963056106479	WITHOUT_CLASSIFICATION	0.0038036943893521545	DESIGN
//Clobs are ignored by merge() operation	WITHOUT_CLASSIFICATION	0.9999031561916178	WITHOUT_CLASSIFICATION	9.684380838219901E-5	DESIGN
// we do not have to worry about queued additions to uninitialized // collections, since they can only occur for inverse collections!	WITHOUT_CLASSIFICATION	0.9970932225685945	WITHOUT_CLASSIFICATION	0.002906777431405445	DESIGN
// collections cannot be compared	WITHOUT_CLASSIFICATION	0.9997952823813345	WITHOUT_CLASSIFICATION	2.047176186654461E-4	DESIGN
//remember the uk value	WITHOUT_CLASSIFICATION	0.9993389073752984	WITHOUT_CLASSIFICATION	6.610926247016593E-4	DESIGN
//NOOP	WITHOUT_CLASSIFICATION	0.9993505779219848	WITHOUT_CLASSIFICATION	6.494220780151091E-4	DESIGN
//processCollectionProperty(token, q.getCollectionPersister(collectionRole), collectionName);	WITHOUT_CLASSIFICATION	0.9978506171800194	WITHOUT_CLASSIFICATION	0.002149382819980599	DESIGN
//we must use the "remembered" uk value, since it is  //not available from the EntityEntry during assembly	WITHOUT_CLASSIFICATION	0.9994673213127823	WITHOUT_CLASSIFICATION	5.326786872177313E-4	DESIGN
// collections don't dirty an unversioned parent entity	WITHOUT_CLASSIFICATION	0.9997276933033858	WITHOUT_CLASSIFICATION	2.723066966141473E-4	DESIGN
// return false;	WITHOUT_CLASSIFICATION	0.99898770635425	WITHOUT_CLASSIFICATION	0.0010122936457499418	DESIGN
// This just handles a particular case of component // projection, perhaps get rid of it and throw an exception	WITHOUT_CLASSIFICATION	0.969549243767117	WITHOUT_CLASSIFICATION	0.030450756232883014	DESIGN
//NOTE: we avoid joining to the next table if the named property is just the foreign key value	WITHOUT_CLASSIFICATION	0.9998940068537696	WITHOUT_CLASSIFICATION	1.0599314623035172E-4	DESIGN
// the key is the owning entity itself, so get the ID from the key	WITHOUT_CLASSIFICATION	0.9998917808897447	WITHOUT_CLASSIFICATION	1.082191102552525E-4	DESIGN
// if the original is a PersistentCollection, and that original // was not flagged as dirty, then reset the target's dirty flag // here after the copy operation. // </p> // One thing to be careful of here is a "bare" original collection // in which case we should never ever ever reset the dirty flag // on the target because we simply do not know...	WITHOUT_CLASSIFICATION	0.9999981631803938	WITHOUT_CLASSIFICATION	1.8368196061655705E-6	DESIGN
//ignore subselect keywords	WITHOUT_CLASSIFICATION	0.9984166541261242	WITHOUT_CLASSIFICATION	0.0015833458738757186	DESIGN
// copy elements into newly empty target collection	WITHOUT_CLASSIFICATION	0.9998948049154988	WITHOUT_CLASSIFICATION	1.051950845012837E-4	DESIGN
// for a null target, or a target which is the same as the original, we // need to put the merged elements in a new collection	WITHOUT_CLASSIFICATION	0.9995892993528634	WITHOUT_CLASSIFICATION	4.1070064713649175E-4	DESIGN
// by default just use an unanticipated capacity since we don't // know how to extract the capacity to use from original here...	WITHOUT_CLASSIFICATION	0.9997858611511063	WITHOUT_CLASSIFICATION	2.141388488935723E-4	DESIGN
// get the elements back into the target making sure to handle dirty flag	WITHOUT_CLASSIFICATION	0.99934929909669	WITHOUT_CLASSIFICATION	6.507009033100121E-4	DESIGN
// check if collection is currently being loaded	WITHOUT_CLASSIFICATION	0.9995351594894502	WITHOUT_CLASSIFICATION	4.648405105498677E-4	DESIGN
// check if it is already completely loaded, but unowned	WITHOUT_CLASSIFICATION	0.9999008809996222	WITHOUT_CLASSIFICATION	9.911900037788926E-5	DESIGN
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9983833712703966	WITHOUT_CLASSIFICATION	0.001616628729603407	DESIGN
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9967688892480616	WITHOUT_CLASSIFICATION	0.003231110751938361	DESIGN
// create a new collection wrapper, to be initialized later	WITHOUT_CLASSIFICATION	0.9352277402308743	WITHOUT_CLASSIFICATION	0.06477225976912575	DESIGN
// Some JDBC drivers erroneously return an empty array here for a null DB value :/	WITHOUT_CLASSIFICATION	0.998831791060412	WITHOUT_CLASSIFICATION	0.0011682089395880768	DESIGN
// our column span is the number of columns in the PK	WITHOUT_CLASSIFICATION	0.999992405842352	WITHOUT_CLASSIFICATION	7.594157647949206E-6	DESIGN
//cannot batch fetch by unique key (property-ref associations)	WITHOUT_CLASSIFICATION	0.9994813958055463	WITHOUT_CLASSIFICATION	5.186041944537655E-4	DESIGN
// we already know current is not null...	WITHOUT_CLASSIFICATION	0.9990499167705089	WITHOUT_CLASSIFICATION	9.500832294910926E-4	DESIGN
// the ids are fully resolved, so compare them with isDirty(), not isModified()	WITHOUT_CLASSIFICATION	0.9989663119073291	WITHOUT_CLASSIFICATION	0.0010336880926708949	DESIGN
//the owner of the association is not the owner of the id	WITHOUT_CLASSIFICATION	0.9989355267440109	WITHOUT_CLASSIFICATION	0.0010644732559891856	DESIGN
// ----------------------------------------------------------- Constructors	WITHOUT_CLASSIFICATION	0.9994326559501996	WITHOUT_CLASSIFICATION	5.673440498004439E-4	DESIGN
// ----------------------------------------------------- Instance Variables	WITHOUT_CLASSIFICATION	0.9996499215064558	WITHOUT_CLASSIFICATION	3.500784935442312E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998122686237135	WITHOUT_CLASSIFICATION	1.87731376286521E-4	DESIGN
// --------------------------------------------------------- Public Methods	WITHOUT_CLASSIFICATION	0.9997933787646085	WITHOUT_CLASSIFICATION	2.0662123539162252E-4	DESIGN
// Compare the two maps for equality	WITHOUT_CLASSIFICATION	0.9995722784937594	WITHOUT_CLASSIFICATION	4.2772150624050025E-4	DESIGN
// Simple tests that require no synchronization	WITHOUT_CLASSIFICATION	0.999345144983591	WITHOUT_CLASSIFICATION	6.548550164090393E-4	DESIGN
//Sybase fail if we don't do that, sigh...	WITHOUT_CLASSIFICATION	0.9991500389086307	WITHOUT_CLASSIFICATION	8.499610913692635E-4	DESIGN
// Handles things like: // a and b or c // a and ( b or c ) // not a and not b // not ( a and b ) // x between y and z            (overloaded "and") // x in ( a, b, c )             (overloaded brackets) // not not a // a is not null                (overloaded "not") // etc...... // and expressions like // foo = bar                    (maps to: foo.id = bar.id) // foo.Bar = 'foo'              (maps to: foo.bar = 'foo') // foo.Bar.Baz = 1.0            (maps to: foo.bar = bar.id and bar.baz = 1.0) // 1.0 = foo.Bar.Baz            (maps to: bar.baz = 1.0 and foo.Bar = bar.id) // foo.Bar.Baz = a.B.C          (maps to: bar.Baz = b.C and foo.Bar = bar.id and a.B = b.id) // foo.Bar.Baz + a.B.C          (maps to: bar.Baz + b.C and foo.Bar = bar.id and a.B = b.id) // ( foo.Bar.Baz + 1.0 ) < 2.0  (maps to: ( bar.Baz + 1.0 ) < 2.0 and foo.Bar = bar.id)	WITHOUT_CLASSIFICATION	0.9985303753695713	WITHOUT_CLASSIFICATION	0.001469624630428649	DESIGN
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9951585515032199	WITHOUT_CLASSIFICATION	0.004841448496780158	DESIGN
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9951585515032199	WITHOUT_CLASSIFICATION	0.004841448496780158	DESIGN
// try to "pretty print" it	WITHOUT_CLASSIFICATION	0.999911143340192	WITHOUT_CLASSIFICATION	8.885665980799321E-5	DESIGN
// otherwise, just dump it	WITHOUT_CLASSIFICATION	0.9996796804990368	WITHOUT_CLASSIFICATION	3.2031950096322295E-4	DESIGN
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9985199949610222	WITHOUT_CLASSIFICATION	0.0014800050389778036	DESIGN
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9985199949610222	WITHOUT_CLASSIFICATION	0.0014800050389778036	DESIGN
// use default behavior	WITHOUT_CLASSIFICATION	0.9972426337475195	WITHOUT_CLASSIFICATION	0.0027573662524803776	DESIGN
//NOTE: early return	WITHOUT_CLASSIFICATION	0.9972812034782566	WITHOUT_CLASSIFICATION	0.0027187965217434044	DESIGN
// the MRU cache used to keep hard references to the most recently used query plans; // note : LRU here is a bit of a misnomer, it indicates that LRU entries are removed, the // actual kept entries are the MRU entries	WITHOUT_CLASSIFICATION	0.8564938610645876	DESIGN	0.14350613893541242	WITHOUT_CLASSIFICATION
// we want to be able to just use the defaults, // if JNDI environment properties are not supplied // so don't put null in anywhere	WITHOUT_CLASSIFICATION	0.9996606543671145	WITHOUT_CLASSIFICATION	3.393456328855353E-4	DESIGN
// Clone //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9996199437330184	WITHOUT_CLASSIFICATION	3.8005626698164554E-4	DESIGN
// Serialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9994086587758717	WITHOUT_CLASSIFICATION	5.913412241282598E-4	DESIGN
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.9997878043935353	WITHOUT_CLASSIFICATION	2.121956064646162E-4	DESIGN
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.9997878043935353	WITHOUT_CLASSIFICATION	2.121956064646162E-4	DESIGN
// Deserialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9994086587758717	WITHOUT_CLASSIFICATION	5.913412241282598E-4	DESIGN
/* static methods only - hide constructor */	WITHOUT_CLASSIFICATION	0.9999234723611453	WITHOUT_CLASSIFICATION	7.652763885473233E-5	DESIGN
/*&& !('_'==character)*/	WITHOUT_CLASSIFICATION	0.9982949333831279	WITHOUT_CLASSIFICATION	0.0017050666168719987	DESIGN
// returnign null!	WITHOUT_CLASSIFICATION	0.9991132939432384	WITHOUT_CLASSIFICATION	8.867060567615728E-4	DESIGN
// returnign null!	WITHOUT_CLASSIFICATION	0.9991132939432384	WITHOUT_CLASSIFICATION	8.867060567615728E-4	DESIGN
// includes last '.'	WITHOUT_CLASSIFICATION	0.999769678733652	WITHOUT_CLASSIFICATION	2.303212663480397E-4	DESIGN
// +1 to include the following '.'	WITHOUT_CLASSIFICATION	0.9994173091991798	WITHOUT_CLASSIFICATION	5.8269080082018E-4	DESIGN
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9999526070827762	WITHOUT_CLASSIFICATION	4.739291722381952E-5	DESIGN
// first time we find match!	WITHOUT_CLASSIFICATION	0.9996954133033552	WITHOUT_CLASSIFICATION	3.0458669664473477E-4	DESIGN
// entityNames may now include slashes for the representations //classname may be an inner class	WITHOUT_CLASSIFICATION	0.9997936447521636	WITHOUT_CLASSIFICATION	2.0635524783635918E-4	DESIGN
// wrapped iterators	WITHOUT_CLASSIFICATION	0.9911404825781278	WITHOUT_CLASSIFICATION	0.008859517421872267	DESIGN
// index of current iterator in the wrapped iterators array	WITHOUT_CLASSIFICATION	0.9997265736990535	WITHOUT_CLASSIFICATION	2.734263009465102E-4	DESIGN
// the current iterator	WITHOUT_CLASSIFICATION	0.9999240873011888	WITHOUT_CLASSIFICATION	7.59126988112448E-5	DESIGN
// the last used iterator	WITHOUT_CLASSIFICATION	0.9761140158945137	WITHOUT_CLASSIFICATION	0.023885984105486157	DESIGN
//it was a boolean expression	WITHOUT_CLASSIFICATION	0.9995844301260344	WITHOUT_CLASSIFICATION	4.155698739655588E-4	DESIGN
/*public static Object[] clone(Class elementClass, Object[] array) {	WITHOUT_CLASSIFICATION	0.9986860489914902	WITHOUT_CLASSIFICATION	0.001313951008509815	DESIGN
// call this before any Iterator method to make sure that the current Iterator // is not exhausted	WITHOUT_CLASSIFICATION	0.9925401973187602	WITHOUT_CLASSIFICATION	0.007459802681239845	DESIGN
//doable if needed	WITHOUT_CLASSIFICATION	0.9981716760184328	WITHOUT_CLASSIFICATION	0.001828323981567225	DESIGN
// set last used iterator here, in case the user calls remove // before calling hasNext() or next() (although they shouldn't)	WITHOUT_CLASSIFICATION	0.9825806901412771	WITHOUT_CLASSIFICATION	0.017419309858722875	DESIGN
// peek ahead	WITHOUT_CLASSIFICATION	0.9991698183094349	WITHOUT_CLASSIFICATION	8.30181690565086E-4	DESIGN
// if we reach the end of the string w/o finding the // matching end, that is an exception	WITHOUT_CLASSIFICATION	0.999910184169748	WITHOUT_CLASSIFICATION	8.981583025204677E-5	DESIGN
// we have a placeholder, spin forward till we find the end	WITHOUT_CLASSIFICATION	0.9989778373814918	WITHOUT_CLASSIFICATION	0.0010221626185081794	DESIGN
// make sure spinning forward did not put us past the end of the buffer...	WITHOUT_CLASSIFICATION	0.9992643537132336	WITHOUT_CLASSIFICATION	7.35646286766398E-4	DESIGN
// First, try to locate this resource through the current // context classloader.	WITHOUT_CLASSIFICATION	0.9999102740072267	WITHOUT_CLASSIFICATION	8.972599277329544E-5	DESIGN
// Next, try to locate this resource through this class's classloader	WITHOUT_CLASSIFICATION	0.9998755351717861	WITHOUT_CLASSIFICATION	1.2446482821399093E-4	DESIGN
// Next, try to locate this resource through the system classloader	WITHOUT_CLASSIFICATION	0.9998958731650975	WITHOUT_CLASSIFICATION	1.0412683490256326E-4	DESIGN
// Anywhere else we should look?	WITHOUT_CLASSIFICATION	0.9971731193372557	WITHOUT_CLASSIFICATION	0.0028268806627443706	DESIGN
// would need an IdentitySet for this!	WITHOUT_CLASSIFICATION	0.9947362050639897	WITHOUT_CLASSIFICATION	0.0052637949360102776	DESIGN
//Arrays.asList doesn't do primitive arrays	WITHOUT_CLASSIFICATION	0.9979181920794121	WITHOUT_CLASSIFICATION	0.0020818079205878704	DESIGN
//faster?	WITHOUT_CLASSIFICATION	0.9993169148631355	WITHOUT_CLASSIFICATION	6.830851368645701E-4	DESIGN
// the name of a class	WITHOUT_CLASSIFICATION	0.9989610308964184	WITHOUT_CLASSIFICATION	0.0010389691035815444	DESIGN
// Its the listener class name	WITHOUT_CLASSIFICATION	0.99945239757297	WITHOUT_CLASSIFICATION	5.476024270300362E-4	DESIGN
//allow 9,8,7,6,5,4,3,2,1	WITHOUT_CLASSIFICATION	0.9982338249437797	WITHOUT_CLASSIFICATION	0.0017661750562203082	DESIGN
// default to element set if no elements() specified	WITHOUT_CLASSIFICATION	0.9995589334064771	WITHOUT_CLASSIFICATION	4.4106659352285434E-4	DESIGN
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9996580185986755	WITHOUT_CLASSIFICATION	3.4198140132438035E-4	DESIGN
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9669945444459744	WITHOUT_CLASSIFICATION	0.033005455554025634	DESIGN
// first, lets determine whether to apply cglib or javassist based instrumentation...	WITHOUT_CLASSIFICATION	0.9985803518987438	WITHOUT_CLASSIFICATION	0.0014196481012561878	DESIGN
// Make sure we don't override previous set values	WITHOUT_CLASSIFICATION	0.9993543927714885	WITHOUT_CLASSIFICATION	6.456072285114345E-4	DESIGN
//entirely optional!!	WITHOUT_CLASSIFICATION	0.9982338249437797	WITHOUT_CLASSIFICATION	0.0017661750562203082	DESIGN
// Its the listener instance (or better be)	WITHOUT_CLASSIFICATION	0.9905599620295324	WITHOUT_CLASSIFICATION	0.009440037970467443	DESIGN
//context.unbind(boundName);	WITHOUT_CLASSIFICATION	0.9982338249437797	WITHOUT_CLASSIFICATION	0.0017661750562203082	DESIGN
//readResolveObject	WITHOUT_CLASSIFICATION	0.9967688892480616	WITHOUT_CLASSIFICATION	0.003231110751938361	DESIGN
//cfg.setProperty("hibernate.show_sql", "true");	WITHOUT_CLASSIFICATION	0.9978506171800194	WITHOUT_CLASSIFICATION	0.002149382819980599	DESIGN
// Defensive, convenience methods	WITHOUT_CLASSIFICATION	0.999577901098339	WITHOUT_CLASSIFICATION	4.220989016609556E-4	DESIGN
// Create the SessionFactory from hibernate.cfg.xml	WITHOUT_CLASSIFICATION	0.9995941380915704	WITHOUT_CLASSIFICATION	4.058619084296156E-4	DESIGN
// Make sure you log the exception, as it might be swallowed	WITHOUT_CLASSIFICATION	0.999907622805361	WITHOUT_CLASSIFICATION	9.237719463886157E-5	DESIGN
// Begin unit of work	WITHOUT_CLASSIFICATION	0.9998985790064083	WITHOUT_CLASSIFICATION	1.0142099359157966E-4	DESIGN
// Write HTML header	WITHOUT_CLASSIFICATION	0.9940304707522044	WITHOUT_CLASSIFICATION	0.0059695292477956055	DESIGN
// Handle actions	WITHOUT_CLASSIFICATION	0.9976639286971689	WITHOUT_CLASSIFICATION	0.002336071302831039	DESIGN
// Print page	WITHOUT_CLASSIFICATION	0.9985774796793137	WITHOUT_CLASSIFICATION	0.0014225203206863599	DESIGN
// Write HTML footer	WITHOUT_CLASSIFICATION	0.9994359478751177	WITHOUT_CLASSIFICATION	5.64052124882197E-4	DESIGN
// End unit of work	WITHOUT_CLASSIFICATION	0.9998098160004664	WITHOUT_CLASSIFICATION	1.901839995337361E-4	DESIGN
// Start the session to be used for this request	WITHOUT_CLASSIFICATION	0.5517249029974731	WITHOUT_CLASSIFICATION	0.4482750970025269	DESIGN
// make the session available to the session factory's "current context"	WITHOUT_CLASSIFICATION	0.9946855347609823	WITHOUT_CLASSIFICATION	0.0053144652390176355	DESIGN
// pass control along to the rest of the processing chain	WITHOUT_CLASSIFICATION	0.999842888730238	WITHOUT_CLASSIFICATION	1.5711126976202216E-4	DESIGN
// remove session from "current context"	WITHOUT_CLASSIFICATION	0.9943096212583296	WITHOUT_CLASSIFICATION	0.005690378741670354	DESIGN
// Eager fetch the collection so we can use it detached	WITHOUT_CLASSIFICATION	0.9954365632888469	WITHOUT_CLASSIFICATION	0.0045634367111531664	DESIGN
// If we want to handle it bidirectional and detached, we also need to load this // collection with an eager outer-join fetch, this time with Criteria and not HQL:	WITHOUT_CLASSIFICATION	0.926703953057465	WITHOUT_CLASSIFICATION	0.073296046942535	DESIGN
/*        Event anEvent = (Event) session                .createCriteria(Event.class).setFetchMode("participants", FetchMode.JOIN)                .add( Expression.eq("id", eventId) )                .uniqueResult(); // Eager fetch the colleciton so we can use it detached        */	WITHOUT_CLASSIFICATION	0.9997092711615132	WITHOUT_CLASSIFICATION	2.907288384868337E-4	DESIGN
// End of first unit of work	WITHOUT_CLASSIFICATION	0.9999261868266531	WITHOUT_CLASSIFICATION	7.381317334686602E-5	DESIGN
// or bidirectional safety method, setting both sides: aPerson.addToEvent(anEvent);	WITHOUT_CLASSIFICATION	0.9998799949414656	WITHOUT_CLASSIFICATION	1.2000505853444297E-4	DESIGN
// Begin second unit of work	WITHOUT_CLASSIFICATION	0.9998751310374954	WITHOUT_CLASSIFICATION	1.2486896250451447E-4	DESIGN
// Reattachment of aPerson	WITHOUT_CLASSIFICATION	0.9997045863978706	WITHOUT_CLASSIFICATION	2.9541360212937973E-4	DESIGN
// The getEmailAddresses() might trigger a lazy load of the collection	WITHOUT_CLASSIFICATION	0.9991113623006705	WITHOUT_CLASSIFICATION	8.886376993294673E-4	DESIGN
// We need our tm, so get it now and avoid doing other work // if there is a problem	WITHOUT_CLASSIFICATION	0.9999228132125941	WITHOUT_CLASSIFICATION	7.718678740588171E-5	DESIGN
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9996051038263616	WITHOUT_CLASSIFICATION	3.9489617363841137E-4	DESIGN
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9996051038263616	WITHOUT_CLASSIFICATION	3.9489617363841137E-4	DESIGN
// JBC put a version in the node when it created as part of // some internal operation. We are always newer, but if // the JBC version is > 1 something odd has happened	WITHOUT_CLASSIFICATION	0.9999972659746503	WITHOUT_CLASSIFICATION	2.7340253496448995E-6	DESIGN
//swaldman 2006-08-28: define c3p0-style configuration parameters for properties with //                     hibernate-specific overrides to detect and warn about conflicting //                     declarations	WITHOUT_CLASSIFICATION	0.9998872250249502	WITHOUT_CLASSIFICATION	1.1277497504975978E-4	DESIGN
// Not null if the Isolation level has been specified in the configuration file. // Otherwise, it is left to the Driver's default value.	WITHOUT_CLASSIFICATION	0.9995533775568197	WITHOUT_CLASSIFICATION	4.4662244318030114E-4	DESIGN
// Configured outside of Hibernate (i.e. Servlet container, or Java Bean Container // already has Proxool pools running, and this provider is to just borrow one of these	WITHOUT_CLASSIFICATION	0.9859067932920632	WITHOUT_CLASSIFICATION	0.01409320670793686	DESIGN
// If you're closing down the ConnectionProvider chances are an // is not a real big deal, just warn	WITHOUT_CLASSIFICATION	0.9999742267048694	WITHOUT_CLASSIFICATION	2.577329513060959E-5	DESIGN
// (AS is always optional, for consistency with SQL/OQL)	WITHOUT_CLASSIFICATION	0.9984144222195587	WITHOUT_CLASSIFICATION	0.0015855777804413057	DESIGN
// process the "new" HQL style where aliases are assigned // _after_ the class name or path expression ie. using // the AS construction	WITHOUT_CLASSIFICATION	0.9999938010091679	WITHOUT_CLASSIFICATION	6.19899083206635E-6	DESIGN
// the loaded owner will be set to null after the collection is removed, // so capture its value as the affected owner so it is accessible to // both pre- and post- events	WITHOUT_CLASSIFICATION	0.9999241856687008	WITHOUT_CLASSIFICATION	7.581433129929494E-5	DESIGN
// is a primitive type // invokespecial	WITHOUT_CLASSIFICATION	0.9989778402969515	WITHOUT_CLASSIFICATION	0.0010221597030484705	DESIGN
// array of primitive type // do nothing	WITHOUT_CLASSIFICATION	0.9999169677903937	WITHOUT_CLASSIFICATION	8.303220960621178E-5	DESIGN
// handle a path expression or class name that // appears at the start, in the "new" HQL // style or an alias that appears at the start // in the "old" HQL style	WITHOUT_CLASSIFICATION	0.999842098973939	WITHOUT_CLASSIFICATION	1.579010260609791E-4	DESIGN
//handle <=, >=, !=, is not, not between, not in	WITHOUT_CLASSIFICATION	0.9848902156774026	WITHOUT_CLASSIFICATION	0.01510978432259734	DESIGN
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999996299757757	WITHOUT_CLASSIFICATION	3.7002422423420085E-7	DESIGN
// transfer an explicitly defined entity name // handle the lazy attribute	WITHOUT_CLASSIFICATION	0.9994575794100384	WITHOUT_CLASSIFICATION	5.424205899616066E-4	DESIGN
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9976304430935327	WITHOUT_CLASSIFICATION	0.0023695569064673774	DESIGN
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9976304430935327	WITHOUT_CLASSIFICATION	0.0023695569064673774	DESIGN
// get meta's from // <joined-subclass>	WITHOUT_CLASSIFICATION	0.9989772177627028	WITHOUT_CLASSIFICATION	0.0010227822372972436	DESIGN
// parameters on the property mapping should // override parameters in the typedef	WITHOUT_CLASSIFICATION	0.9994607060226953	WITHOUT_CLASSIFICATION	5.392939773046063E-4	DESIGN
//fetch="join" overrides default laziness //fetch="join" overrides default laziness	WITHOUT_CLASSIFICATION	0.9965715566631494	WITHOUT_CLASSIFICATION	0.003428443336850595	DESIGN
//NOTE SPECIAL CASE: // default to join and non-lazy for the "second join" // of the many-to-many	WITHOUT_CLASSIFICATION	0.9998611358955647	WITHOUT_CLASSIFICATION	1.3886410443527013E-4	DESIGN
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.999615661656979	WITHOUT_CLASSIFICATION	3.8433834302100854E-4	DESIGN
// state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999388188580382	WITHOUT_CLASSIFICATION	6.118114196179373E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998122686237135	WITHOUT_CLASSIFICATION	1.87731376286521E-4	DESIGN
//element //index -> id	WITHOUT_CLASSIFICATION	0.999665327678871	WITHOUT_CLASSIFICATION	3.3467232112912844E-4	DESIGN
// note that it might be better to iterate the snapshot but this is safe, // assuming the user implements equals() properly, as required by the Set // contract!	WITHOUT_CLASSIFICATION	0.98312072670326	WITHOUT_CLASSIFICATION	0.016879273296739928	DESIGN
// collections detect changes made via their public interface and mark // themselves as dirty as a performance optimization	WITHOUT_CLASSIFICATION	0.99989990014208	WITHOUT_CLASSIFICATION	1.0009985792003393E-4	DESIGN
// essentially, if the real session is closed allow any // method call to pass through since the real session // will complain by throwing an appropriate exception; // NOTE that allowing close() above has the same basic effect, //   but we capture that there simply to perform the unbind...	WITHOUT_CLASSIFICATION	0.9999864710353642	WITHOUT_CLASSIFICATION	1.3528964635669743E-5	DESIGN
// The default SQLExceptionConverter for all dialects is based on SQLState // since SQLErrorCode is extremely vendor-specific.  Specific Dialects // may override to return whatever is most appropriate for that vendor.	WITHOUT_CLASSIFICATION	0.9995562670369855	WITHOUT_CLASSIFICATION	4.4373296301450127E-4	DESIGN
//only necessary for postgre < 7.4 //http://anoncvs.postgresql.org/cvsweb.cgi/pgsql/doc/src/sgml/ref/create_sequence.sgml	WITHOUT_CLASSIFICATION	0.9703993066306378	WITHOUT_CLASSIFICATION	0.029600693369362312	DESIGN
// select topic, syntax from information_schema.help // where section like 'Function%' order by section, topic // // see also ->  http://www.h2database.com/html/functions.html	WITHOUT_CLASSIFICATION	0.9998249709907278	WITHOUT_CLASSIFICATION	1.7502900927227313E-4	DESIGN
// registerColumnType(Types.VARBINARY, "CHARACTER($l)"); // registerColumnType(Types.BLOB, "CHARACTER($l)" );  // For use prior to CP 11.0 // registerColumnType(Types.CLOB, "CHARACTER($l)" );	WITHOUT_CLASSIFICATION	0.9994423093235721	WITHOUT_CLASSIFICATION	5.576906764278602E-4	DESIGN
//the BLOB type requires a size arguement - this defaults to //bytes - no arg defaults to 1 whole byte! //other argument mods include K - kilobyte, M - megabyte, G - gigabyte. //refer to the PBdevelopers guide for more info.	WITHOUT_CLASSIFICATION	0.9658458626887186	WITHOUT_CLASSIFICATION	0.03415413731128128	DESIGN
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.9884776001779494	WITHOUT_CLASSIFICATION	0.011522399822050663	DESIGN
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.9998390661149086	WITHOUT_CLASSIFICATION	1.6093388509136368E-4	DESIGN
// add the comment // nest the main query in an outer select // add the rownnumber bit into the outer query select list	WITHOUT_CLASSIFICATION	0.9999148227004195	WITHOUT_CLASSIFICATION	8.517729958050353E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998122686237135	WITHOUT_CLASSIFICATION	1.87731376286521E-4	DESIGN
// Note: For object <-> SQL datatype mappings see: //	WITHOUT_CLASSIFICATION	0.9972133478113853	WITHOUT_CLASSIFICATION	0.0027866521886147706	DESIGN
// TRIM(end_keyword string-expression-1 FROM string-expression-2) // use Hibernate implementation "From" is one of the parameters they pass in position ?3 //registerFunction( "trim", new SQLFunctionTemplate(Hibernate.STRING, "trim(?1 ?2 from ?3)") );	WITHOUT_CLASSIFICATION	0.9999097165107241	WITHOUT_CLASSIFICATION	9.028348927580398E-5	DESIGN
// Whether this dialect has an Identity clause added to the data type or a completely seperate identity // data type	WITHOUT_CLASSIFICATION	0.9999316305929844	WITHOUT_CLASSIFICATION	6.836940701553783E-5	DESIGN
// According to both the ANSI-SQL and JPA specs, trim takes a variable number of parameters between 1 and 4. // at least one paramer (trimSource) is required.  From the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If <trim specification> is omitted, BOTH is assumed. // If <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999993560642653	WITHOUT_CLASSIFICATION	6.439357347789057E-7	DESIGN
/////////////////////////////////////////////////////////////////////// // Prepare persisters and link them up with their cache // region/access-strategy	WITHOUT_CLASSIFICATION	0.9978077542425028	WITHOUT_CLASSIFICATION	0.0021922457574973016	DESIGN
//Named Queries:	WITHOUT_CLASSIFICATION	0.9967688892480616	WITHOUT_CLASSIFICATION	0.003231110751938361	DESIGN
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9936542014153454	WITHOUT_CLASSIFICATION	0.006345798584654536	DESIGN
// does not handle arrays (thats ok, cos they can't be lazy) // or newly instantiated collections, so we can do the cast	WITHOUT_CLASSIFICATION	0.9807023332988446	WITHOUT_CLASSIFICATION	0.019297666701155413	DESIGN
// collection deletions are a special case since update() can add // deletions of collections not loaded by the session.	WITHOUT_CLASSIFICATION	0.9999099027863775	WITHOUT_CLASSIFICATION	9.009721362246068E-5	DESIGN
// we can do the cast since orphan-delete does not apply to: // 1. newly instantiated collections // 2. arrays (we can't track orphans for detached arrays)	WITHOUT_CLASSIFICATION	0.9998815735351505	WITHOUT_CLASSIFICATION	1.1842646484959959E-4	DESIGN
// if the natural-id is marked as non-mutable, it is not retrieved during a // normal database-snapshot operation...	WITHOUT_CLASSIFICATION	0.9997430358163094	WITHOUT_CLASSIFICATION	2.569641836906074E-4	DESIGN
// watch out for a case where old is still referenced // somewhere in the object graph! (which is a user error)	WITHOUT_CLASSIFICATION	0.9998155647586113	WITHOUT_CLASSIFICATION	1.8443524138867895E-4	DESIGN
//slice, to get the columns for this component //property	WITHOUT_CLASSIFICATION	0.9981159216550018	WITHOUT_CLASSIFICATION	0.0018840783449980893	DESIGN
//int result = 17; //result = 37 * result + type.hashCode(); //result = 37 * result + ( value==null ? 0 : value.hashCode() ); //return result;	WITHOUT_CLASSIFICATION	0.9999764214201047	WITHOUT_CLASSIFICATION	2.3578579895307832E-5	DESIGN
// The CollectionEntry.isReached() stuff is just to detect any silly users   // who set up circular or shared references between/to collections.	WITHOUT_CLASSIFICATION	0.9999589585646712	WITHOUT_CLASSIFICATION	4.1041435328771026E-5	DESIGN
// detached collection wrappers that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9995614713354714	WITHOUT_CLASSIFICATION	4.385286645286458E-4	DESIGN
// The unique property value represented here may or may not be // serializable, so we do an explicit check here in order to generate // a better error message	WITHOUT_CLASSIFICATION	0.9950378785932911	WITHOUT_CLASSIFICATION	0.004962121406708937	DESIGN
// if the version of a newly instantiated object is not the same // as the version seed value, use that as the unsaved-value	WITHOUT_CLASSIFICATION	0.9995498254919603	WITHOUT_CLASSIFICATION	4.501745080397608E-4	DESIGN
// ie. we never have to null out a reference to // an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9997576717273012	WITHOUT_CLASSIFICATION	2.4232827269872963E-4	DESIGN
// ignore this row, the collection is in process of // being loaded somewhere further "up" the stack	WITHOUT_CLASSIFICATION	0.9993825994318023	WITHOUT_CLASSIFICATION	6.174005681977213E-4	DESIGN
// Entity load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // 	WITHOUT_CLASSIFICATION	0.9994423586684671	WITHOUT_CLASSIFICATION	5.576413315328989E-4	DESIGN
// should be ok performance-wise to generate new delegate instances for each // request since these are locally stack-scoped.  Besides, it makes the code // much easier to read than the old TransactionHelper stuff...	WITHOUT_CLASSIFICATION	0.9979447128300252	WITHOUT_CLASSIFICATION	0.0020552871699748305	DESIGN
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9966609433260348	WITHOUT_CLASSIFICATION	0.0033390566739651428	DESIGN
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9966609433260348	WITHOUT_CLASSIFICATION	0.0033390566739651428	DESIGN
// wrap up any new collections directly referenced by the object // or its components	WITHOUT_CLASSIFICATION	0.9998872653293817	WITHOUT_CLASSIFICATION	1.1273467061837269E-4	DESIGN
// remove any snapshot, not really for memory management purposes, but // rather because it might now be stale, and there is no longer any  // EntityEntry to take precedence // This is now handled by removeEntity() //session.getPersistenceContext().removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9200828603224397	WITHOUT_CLASSIFICATION	0.07991713967756038	DESIGN
// skip this check for composite-ids relating to dom4j entity-mode; // alternatively, we could add a check to make sure the incoming id value is // an instance of Element...	WITHOUT_CLASSIFICATION	0.9531424523835665	WITHOUT_CLASSIFICATION	0.04685754761643358	DESIGN
// upgrade the lock if necessary: //lock(result, lockMode);	WITHOUT_CLASSIFICATION	0.9998023693162402	WITHOUT_CLASSIFICATION	1.9763068375971269E-4	DESIGN
// now, any collections that are initialized // inside this block do not get updated - they // are ignored until the next flush	WITHOUT_CLASSIFICATION	0.8998481548890086	WITHOUT_CLASSIFICATION	0.10015184511099148	DESIGN
//we must clone embedded composite identifiers, or  //we will get back the same instance that we pass in	WITHOUT_CLASSIFICATION	0.9846063386233253	WITHOUT_CLASSIFICATION	0.015393661376674785	DESIGN
// Sub-insertions should occur before containing insertion so // Try to do the callback now	WITHOUT_CLASSIFICATION	0.9945310819490634	WITHOUT_CLASSIFICATION	0.00546891805093668	DESIGN
//the entity is not associated with the session, so //try interceptor and unsaved-value	WITHOUT_CLASSIFICATION	0.999427992855229	WITHOUT_CLASSIFICATION	5.720071447711491E-4	DESIGN
//scan the query string for class names appearing in the from clause and replace //with all persistent implementors of the class/interface, returning multiple //query strings (make sure we don't pick up a class in the select clause!)	WITHOUT_CLASSIFICATION	0.9824390895601642	WITHOUT_CLASSIFICATION	0.017560910439835768	DESIGN
// save() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995905122545683	WITHOUT_CLASSIFICATION	4.0948774543172453E-4	DESIGN
// evict() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995905122545683	WITHOUT_CLASSIFICATION	4.0948774543172453E-4	DESIGN
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9865802700340215	WITHOUT_CLASSIFICATION	0.01341972996597858	DESIGN
//if it is an uninitialized proxy, pointing //with this session, then when it is accessed, //the underlying instance will be "contained"	WITHOUT_CLASSIFICATION	0.9955685499582866	WITHOUT_CLASSIFICATION	0.0044314500417134755	DESIGN
// Generate an explicit join for the root dot node.   The implied joins will be collected and passed up // to the root dot node.	WITHOUT_CLASSIFICATION	0.9999916487534366	WITHOUT_CLASSIFICATION	8.351246563420719E-6	DESIGN
// A session is considered to contain an entity only if the entity has // an entry in the session's persistence context and the entry reports // that the entity has not been removed	WITHOUT_CLASSIFICATION	0.997420234513857	WITHOUT_CLASSIFICATION	0.002579765486142991	DESIGN
// Does the collection referenced by this FromElement // specify an order-by attribute?  If so, attach it to // the query's order-by	WITHOUT_CLASSIFICATION	0.9968424116601843	WITHOUT_CLASSIFICATION	0.003157588339815692	DESIGN
// ... and the token could be an identifer and the error is // a mismatched token error ...	WITHOUT_CLASSIFICATION	0.9924323929096514	WITHOUT_CLASSIFICATION	0.0075676070903486605	DESIGN
// If a where clause was specified in the update/delete query, use it to limit the // returned ids here...	WITHOUT_CLASSIFICATION	0.9999605262945761	WITHOUT_CLASSIFICATION	3.947370542397289E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998122686237135	WITHOUT_CLASSIFICATION	1.87731376286521E-4	DESIGN
// Default implementation: // If this node has a data type, and that data type is not an association, then this is scalar.	WITHOUT_CLASSIFICATION	0.9995963956036986	WITHOUT_CLASSIFICATION	4.0360439630136597E-4	DESIGN
// Resolve the LHS fully, generate implicit joins.  Pass in the property name so that the resolver can // discover foreign key (id) properties.	WITHOUT_CLASSIFICATION	0.9999675555408295	WITHOUT_CLASSIFICATION	3.24444591704931E-5	DESIGN
// If the propertyType is null and there isn't a parent, just // stop now... there was a problem resolving the node anyway.	WITHOUT_CLASSIFICATION	0.9999119899200368	WITHOUT_CLASSIFICATION	8.80100799631637E-5	DESIGN
//We do not look for an existing join on the same path, because //it makes sense to join twice on the same collection role	WITHOUT_CLASSIFICATION	0.9981154718142699	WITHOUT_CLASSIFICATION	0.001884528185730188	DESIGN
// our parent is another dot node, meaning we are being further dereferenced. // thus we need to generate a join unless the parent refers to the associated // entity's PK (because 'our' table would know the FK).	WITHOUT_CLASSIFICATION	0.9999679854900925	WITHOUT_CLASSIFICATION	3.201450990748112E-5	DESIGN
/*public final Currency getCurrency(int col) throws HibernateException {	WITHOUT_CLASSIFICATION	0.9983031076028928	WITHOUT_CLASSIFICATION	0.0016968923971072017	DESIGN
// here, we have two possibilities: // 	WITHOUT_CLASSIFICATION	0.9999247448521374	WITHOUT_CLASSIFICATION	7.525514786251575E-5	DESIGN
// Set the unresolved path in this node and the parent. // Set the text for the parent.	WITHOUT_CLASSIFICATION	0.9994094034510053	WITHOUT_CLASSIFICATION	5.905965489947061E-4	DESIGN
// Get the first child to be considered.  Sub-classes may do this differently in order to skip nodes that // are not select expressions (e.g. DISTINCT).	WITHOUT_CLASSIFICATION	0.9985483447443452	WITHOUT_CLASSIFICATION	0.0014516552556548701	DESIGN
// If this is an entity and the property is the identifier property, then use getIdentifierType(). //      Note that the propertyName.equals( propertyPath ) checks whether we have a component //      key reference, where the component class property name is the same as the //      entity id property name; if the two are not equal, this is the case and //      we'd need to "fall through" to using the property mapping.	WITHOUT_CLASSIFICATION	0.9999410012117131	WITHOUT_CLASSIFICATION	5.8998788286873304E-5	DESIGN
// for a subquery, the alias to use depends on a few things (we // already know this is not an overall SELECT): //      1) if this FROM_ELEMENT represents a correlation to the //          outer-most query //              A) if the outer query represents a multi-table //                  persister, we need to use the given alias //                  in anticipation of one of the multi-table //                  executors being used (as this subquery will //                  actually be used in the "id select" phase //                  of that multi-table executor) //              B) otherwise, we need to use the persister's //                  table name as the column qualification //      2) otherwise (not correlated), use the given alias	WITHOUT_CLASSIFICATION	0.9322540890165346	DESIGN	0.06774591098346538	WITHOUT_CLASSIFICATION
// Not a collection? // Return the entity property mapping.	WITHOUT_CLASSIFICATION	0.9743413582484256	WITHOUT_CLASSIFICATION	0.0256586417515743	DESIGN
// collection of <many-to-any/> mappings... // used to circumvent the component-collection check below...	WITHOUT_CLASSIFICATION	0.9224981762720768	WITHOUT_CLASSIFICATION	0.07750182372792327	DESIGN
// Otherwise, the destination node was implied by the FROM clause and the FROM clause processor // will automatically add it in the right place.	WITHOUT_CLASSIFICATION	0.9999312805041215	WITHOUT_CLASSIFICATION	6.871949587851206E-5	DESIGN
// If the first identifier in the path referrs to the class alias (not the class name), then this // is a correlated subselect.  If it's a correlated sub-select, use the existing table alias.  Otherwise // generate a new one.	WITHOUT_CLASSIFICATION	0.9016240035527651	WITHOUT_CLASSIFICATION	0.09837599644723499	DESIGN
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9990737980150635	WITHOUT_CLASSIFICATION	9.262019849363894E-4	DESIGN
// An ident node can represent an index expression if the ident // represents a naked property ref //      *Note: this makes the assumption (which is currently the case //      in the hql-sql grammar) that the ident is first resolved //      itself (addrExpr -> resolve()).  The other option, if that //      changes, is to call resolve from here; but it is //      currently un-needed overhead.	WITHOUT_CLASSIFICATION	0.9999919870909166	WITHOUT_CLASSIFICATION	8.012909083461572E-6	DESIGN
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9821872986834344	WITHOUT_CLASSIFICATION	0.01781270131656561	DESIGN
// If this is an implied join in a FROM clause, then use ANSI-style joining, and set the // flag on the FromElement that indicates that it was implied in the FROM clause itself.	WITHOUT_CLASSIFICATION	0.9997586214357117	WITHOUT_CLASSIFICATION	2.4137856428831298E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998122686237135	WITHOUT_CLASSIFICATION	1.87731376286521E-4	DESIGN
// For an explicit many-to-many relationship, add a second join from the intermediate  // (many-to-many) table to the destination table.  Also, make sure that the from element's  // idea of the destination is the destination table.	WITHOUT_CLASSIFICATION	0.9999738111912029	WITHOUT_CLASSIFICATION	2.618880879714056E-5	DESIGN
// Reset the node type, because the rest of the system is expecting FROM_FRAGMENT, all we wanted was // for the factory to create the right sub-class.  This might get reset again later on anyway to make the // SQL generation simpler.	WITHOUT_CLASSIFICATION	0.5529495046383915	WITHOUT_CLASSIFICATION	0.4470504953616084	DESIGN
//explicit = true;	WITHOUT_CLASSIFICATION	0.9991064550923416	WITHOUT_CLASSIFICATION	8.935449076584317E-4	DESIGN
//sqlResultTypeList.add( type ); // Generate the select expression.	WITHOUT_CLASSIFICATION	0.9985131166194088	WITHOUT_CLASSIFICATION	0.0014868833805912235	DESIGN
// If the expression list has exactly one expression, and the type of the expression is a collection // then this might be a collection function, such as index(c) or size(c).	WITHOUT_CLASSIFICATION	0.9997761126716613	WITHOUT_CLASSIFICATION	2.2388732833859278E-4	DESIGN
// Need to parse off the column qualifiers; this is assuming (which is true as of now) // that this is only used from update and delete HQL statement parsing	WITHOUT_CLASSIFICATION	0.9999082029072116	WITHOUT_CLASSIFICATION	9.179709278839257E-5	DESIGN
// for regression testing against output from the old parser... // found it easiest to simply reorder the FromElements here into ascending order // in terms of injecting them into the resulting sql ast in orders relative to those // expected by the old parser; this is definitely another of those "only needed // for regression purposes".  The SyntheticAndFactory, then, simply injects them as it // encounters them.	WITHOUT_CLASSIFICATION	0.9999953446247813	WITHOUT_CLASSIFICATION	4.6553752185865915E-6	DESIGN
// The uber-rule here is that we need to include  subclass joins if // the FromElement is in any way dereferenced by a property from // the subclass table; otherwise we end up with column references // qualified by a non-existent table reference in the resulting SQL...	WITHOUT_CLASSIFICATION	0.9986282408412728	WITHOUT_CLASSIFICATION	0.0013717591587272297	DESIGN
// classic translator does not support collection of ordinal // param metadata	WITHOUT_CLASSIFICATION	0.9848916490643526	WITHOUT_CLASSIFICATION	0.015108350935647538	DESIGN
// The following variables are stacks that keep information about each subexpression // in the list of nested subexpressions we are currently processing.	WITHOUT_CLASSIFICATION	0.998861245331022	WITHOUT_CLASSIFICATION	0.0011387546689779736	DESIGN
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999996299757757	WITHOUT_CLASSIFICATION	3.7002422423420085E-7	DESIGN
// should not be able to reach last without maxPosition being set // unless there are no results	WITHOUT_CLASSIFICATION	0.9986324074115455	WITHOUT_CLASSIFICATION	0.0013675925884545008	DESIGN
// we found it in the temp PC.  Should indicate we are in the midst of processing a result set // containing eager fetches via join fetch	WITHOUT_CLASSIFICATION	0.9999043703923038	WITHOUT_CLASSIFICATION	9.562960769609715E-5	DESIGN
//do not use proxiesByKey, since not all //proxies that point to this session's //instances are in that collection!	WITHOUT_CLASSIFICATION	0.9941152361150861	WITHOUT_CLASSIFICATION	0.00588476388491396	DESIGN
// if there is no TM configured, we will not be able to access // the javax.transaction.Transaction object in order to // register a synch anyway.	WITHOUT_CLASSIFICATION	0.9988515015126537	WITHOUT_CLASSIFICATION	0.0011484984873463165	DESIGN
// Since the result set cursor is always left at the first // physical row after the "last processed", we need to jump // back one position to get the key value we are interested // in skipping	WITHOUT_CLASSIFICATION	0.9999839361958677	WITHOUT_CLASSIFICATION	1.6063804132241878E-5	DESIGN
//true if this is a query and we are loading multiple instances of the same collection role //otherwise this is a CollectionInitializer and we are loading up a single collection or batch	WITHOUT_CLASSIFICATION	0.9991831199550084	WITHOUT_CLASSIFICATION	8.168800449915466E-4	DESIGN
// we don't need to worry about existing version being uninitialized // because this block isn't called by a re-entrant load (re-entrant // loads _always_ have lock mode NONE)	WITHOUT_CLASSIFICATION	0.9982563795070228	WITHOUT_CLASSIFICATION	0.0017436204929772356	DESIGN
// add temp entry so that the next step is circular-reference // safe - only needed because some types don't take proper // advantage of two-phase-load (esp. components)	WITHOUT_CLASSIFICATION	0.9994984280074282	WITHOUT_CLASSIFICATION	5.015719925718447E-4	DESIGN
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9995748280766598	WITHOUT_CLASSIFICATION	4.2517192334029155E-4	DESIGN
// log a message about potential connection leaks	WITHOUT_CLASSIFICATION	0.999767130747481	WITHOUT_CLASSIFICATION	2.3286925251901635E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998122686237135	WITHOUT_CLASSIFICATION	1.87731376286521E-4	DESIGN
// this has been shown to happen occasionally in rare cases // when using a transaction manager + transaction-timeout // where the timeout calls back through Hibernate's // registered transaction synchronization on a separate // "reaping" thread.  In cases where that reaping thread // executes through this block at the same time the main // application thread does we can get into situations where // these CMEs occur.  And though it is not "allowed" per-se, // the end result without handling it specifically is infinite // looping.  So here, we simply break the loop	WITHOUT_CLASSIFICATION	0.9976985834669714	WITHOUT_CLASSIFICATION	0.0023014165330286717	DESIGN
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9925568257051197	WITHOUT_CLASSIFICATION	0.007443174294880202	DESIGN
// can't cache this stuff either (per-invocation) // we are given a map of user-alias -> lock mode // create a new map of sql-alias -> lock mode	WITHOUT_CLASSIFICATION	0.99931163873896	WITHOUT_CLASSIFICATION	6.883612610400289E-4	DESIGN
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns //getCollectionTable().createUniqueKey( getIdentifier().getConstraintColumns() );	WITHOUT_CLASSIFICATION	0.9902607852217631	WITHOUT_CLASSIFICATION	0.009739214778236817	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99942267908357	WITHOUT_CLASSIFICATION	5.773209164300647E-4	DESIGN
//isSet = collection.isSet(); //isSorted = collection.isSorted();	WITHOUT_CLASSIFICATION	0.9990302159699643	WITHOUT_CLASSIFICATION	9.697840300357113E-4	DESIGN
//lists, arrays //sets, maps, bags	WITHOUT_CLASSIFICATION	0.9967494406761069	WITHOUT_CLASSIFICATION	0.0032505593238931385	DESIGN
// we finish all the "removes" first to take care of possible unique // constraints and so that we can take better advantage of batching	WITHOUT_CLASSIFICATION	0.9988668028569868	WITHOUT_CLASSIFICATION	0.001133197143013207	DESIGN
//use a combination of foreign key columns and pk columns, since //the ordering of removal and addition is not guaranteed when //a child moves from one parent to another	WITHOUT_CLASSIFICATION	0.9999703698057867	WITHOUT_CLASSIFICATION	2.9630194213230177E-5	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99942267908357	WITHOUT_CLASSIFICATION	5.773209164300647E-4	DESIGN
//information about properties of this class, //including inherited properties //(only really needed for updatable/insertable properties)	WITHOUT_CLASSIFICATION	0.9947318250392239	WITHOUT_CLASSIFICATION	0.005268174960776076	DESIGN
// all this only really needs to consider properties // of this class, not its subclasses, but since we // are reusing code used for sequential selects, we // use the subclass closure	WITHOUT_CLASSIFICATION	0.9455886585628156	DESIGN	0.05441134143718436	WITHOUT_CLASSIFICATION
// Here we render the select column list based on the properties defined as being generated. // For partial component generation, we currently just re-select the whole component // rather than trying to handle the individual generated portions.	WITHOUT_CLASSIFICATION	0.9997583785174475	WITHOUT_CLASSIFICATION	2.4162148255250888E-4	DESIGN
// this is the root (versioned) table, and we are using version-based // optimistic locking;  if we are not updating the version, also don't // check it (unless this is a "generated" version column)!	WITHOUT_CLASSIFICATION	0.9967874197607575	WITHOUT_CLASSIFICATION	0.003212580239242427	DESIGN
//optimistic-lock="all", include all updatable properties //optimistic-lock="dirty", include all properties we are updating this time	WITHOUT_CLASSIFICATION	0.9986813971181525	WITHOUT_CLASSIFICATION	0.0013186028818474253	DESIGN
// this property belongs to the table, and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9201619854870108	WITHOUT_CLASSIFICATION	0.07983801451298923	DESIGN
// check to see if the connection is in auto-commit  // mode (no connection means aggressive connection // release outside a JTA transaction context, so MUST // be autocommit mode)	WITHOUT_CLASSIFICATION	0.9992843758088406	WITHOUT_CLASSIFICATION	7.156241911593357E-4	DESIGN
// need to treat this as if it where optimistic-lock="all" (dirty does *not* make sense); // first we need to locate the "loaded" state // // Note, it potentially could be a proxy, so perform the location the safe way...	WITHOUT_CLASSIFICATION	0.9901707227138058	WITHOUT_CLASSIFICATION	0.009829277286194165	DESIGN
// we *always* assume an instance with a null // identifier or no identifier property is unsaved!	WITHOUT_CLASSIFICATION	0.9943723948292207	WITHOUT_CLASSIFICATION	0.005627605170779384	DESIGN
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.9836118002862664	WITHOUT_CLASSIFICATION	0.016388199713733648	DESIGN
//allow any identifier quoted with backtick //only recognizes identifiers beginning with a letter	WITHOUT_CLASSIFICATION	0.9931972547944253	WITHOUT_CLASSIFICATION	0.006802745205574645	DESIGN
//following doesn't handle (null, not null) but unnecessary //since this would mean all rows	WITHOUT_CLASSIFICATION	0.6984141374886217	WITHOUT_CLASSIFICATION	0.3015858625113783	DESIGN
// IMPL NOTE : due to the delayed population of setters (setters cached // 	WITHOUT_CLASSIFICATION	0.9997450905354118	WITHOUT_CLASSIFICATION	2.54909464588186E-4	DESIGN
// we need to dirty check collections, since they can cause an owner // version number increment	WITHOUT_CLASSIFICATION	0.9998443344519041	WITHOUT_CLASSIFICATION	1.5566554809586422E-4	DESIGN
//return the id, so we can use it to reset the proxy id //return result;	WITHOUT_CLASSIFICATION	0.9997868900597885	WITHOUT_CLASSIFICATION	2.1310994021159172E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998122686237135	WITHOUT_CLASSIFICATION	1.87731376286521E-4	DESIGN
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9983833712703966	WITHOUT_CLASSIFICATION	0.001616628729603407	DESIGN
// We now have the value of the property-ref we reference.  However, // we need to dig a little deeper, as that property might also be // an entity type, in which case we need to resolve its identitifier	WITHOUT_CLASSIFICATION	0.9998855306179066	WITHOUT_CLASSIFICATION	1.1446938209325873E-4	DESIGN
// Retrieve the value of the designated column in the current row of this // ResultSet object as a java.io.Reader object	WITHOUT_CLASSIFICATION	0.9999711592180254	WITHOUT_CLASSIFICATION	2.8840781974628843E-5	DESIGN
//not absolutely necessary, but helps for some //equals()/hashCode() implementations	WITHOUT_CLASSIFICATION	0.9975550204083417	WITHOUT_CLASSIFICATION	0.002444979591658396	DESIGN
//this should be a call to resolve(), not resolveIdentifier(),  //'cos it might be a property-ref, and we did not cache the //referenced value	WITHOUT_CLASSIFICATION	0.837390209517557	WITHOUT_CLASSIFICATION	0.16260979048244295	DESIGN
// If we have <tt>not-found="ignore"</tt> association mapped to a // formula, we always need to dirty check it, so we can update the // second-level cache	WITHOUT_CLASSIFICATION	0.9996914980490523	WITHOUT_CLASSIFICATION	3.085019509477419E-4	DESIGN
// can't just return null here, since that would // cause an owning component to become null	WITHOUT_CLASSIFICATION	0.9999566222183603	WITHOUT_CLASSIFICATION	4.337778163976377E-5	DESIGN
//for arrays, replaceElements() may return a different reference, since //the array length might not match	WITHOUT_CLASSIFICATION	0.9859715675339574	WITHOUT_CLASSIFICATION	0.014028432466042564	DESIGN
// actual cache of the entries.  soft references are used for both the keys and the // values here since the values pertaining to the MRU entries are kept in a // seperate hard reference cache (to avoid their enqueuement/garbage-collection).	WITHOUT_CLASSIFICATION	0.9963377662846328	WITHOUT_CLASSIFICATION	0.0036622337153672997	DESIGN
// as soon as we encounter our first letter, return the substring // from that position	WITHOUT_CLASSIFICATION	0.9996115183541991	WITHOUT_CLASSIFICATION	3.884816458008594E-4	DESIGN
// Note : expected in the syntax: //      type=listenerClass //          ({sep}type=listenerClass)* // where {sep} is any whitespace or comma	WITHOUT_CLASSIFICATION	0.9999727949514675	WITHOUT_CLASSIFICATION	2.7205048532460617E-5	DESIGN
// isTransactionCallbackRegistered denotes whether any Hibernate // Transaction has registered as a callback against this // JDBCContext; only one such callback is allowed.  Directly // serializing this value causes problems with JDBCTransaction, // or really any Transaction impl where the callback is local // to the Transaction instance itself, since that Transaction // is not serialized along with the JDBCContext.  Thus we // handle that fact here explicitly...	WITHOUT_CLASSIFICATION	0.9473204209965544	WITHOUT_CLASSIFICATION	0.052679579003445526	DESIGN
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9735174069437407	WITHOUT_CLASSIFICATION	0.02648259305625923	DESIGN
// We call getKeyFromResultSet() here so that we can know the // key value upon which to perform the breaking logic.  However, // it is also then called from getRowFromResultSet() which is certainly // not the most efficient.  But the call here is needed, and there // currently is no other way without refactoring of the doQuery()/getRowFromResultSet() // methods	WITHOUT_CLASSIFICATION	0.5738505725677944	WITHOUT_CLASSIFICATION	0.4261494274322056	DESIGN
// This check is needed since processing leaves the cursor // after the last physical row for the current logical row; // thus if we are after the last physical row, this might be // caused by either: //      1) scrolling to the last logical row //      2) scrolling past the last logical row // In the latter scenario, the previous logical row // really is the last logical row. // // In all other cases, we should process back two // logical records (the current logic row, plus the // previous logical row).	WITHOUT_CLASSIFICATION	0.9977526012171906	WITHOUT_CLASSIFICATION	0.002247398782809486	DESIGN
// and perform the load	WITHOUT_CLASSIFICATION	0.9994303755031843	WITHOUT_CLASSIFICATION	5.696244968158648E-4	DESIGN
//important: reuse the same event instances for performance!	WITHOUT_CLASSIFICATION	0.9993423723590392	WITHOUT_CLASSIFICATION	6.57627640960674E-4	DESIGN
//this is a query and we are loading multiple instances of the same collection role	WITHOUT_CLASSIFICATION	0.9957472775048887	WITHOUT_CLASSIFICATION	0.00425272249511129	DESIGN
// we found a collection element in the result set	WITHOUT_CLASSIFICATION	0.997005875048201	WITHOUT_CLASSIFICATION	0.0029941249517990006	DESIGN
// we did not find a collection element in the result set, so we // ensure that a collection is created with the owner's identifier, // since what we have is an empty collection	WITHOUT_CLASSIFICATION	0.9989128518451407	WITHOUT_CLASSIFICATION	0.0010871481548593387	DESIGN
// this is a collection initializer, so we must create a collection // for each of the passed-in keys, to account for the possibility // that the collection is empty and has no rows in the result set	WITHOUT_CLASSIFICATION	0.964393988306903	WITHOUT_CLASSIFICATION	0.03560601169309704	DESIGN
// grab its state from the ResultSet and keep it in the Session // (but don't yet initialize the object itself) // note that we acquire LockMode.READ even if it was not requested	WITHOUT_CLASSIFICATION	0.9998367601614988	WITHOUT_CLASSIFICATION	1.6323983850122833E-4	DESIGN
// a many-to-many; // decrement currentDepth here to allow join across the association table // without exceeding MAX_FETCH_DEPTH (i.e. the "currentDepth - 1" bit)	WITHOUT_CLASSIFICATION	0.8567502144889905	WITHOUT_CLASSIFICATION	0.14324978551100956	DESIGN
// if not a composite key, use "foo in (?, ?, ?)" for batching // if no batch, and not a composite key, use "foo = ?"	WITHOUT_CLASSIFICATION	0.9968836710743785	WITHOUT_CLASSIFICATION	0.0031163289256214838	DESIGN
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9998665739366318	WITHOUT_CLASSIFICATION	1.3342606336816525E-4	DESIGN
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.999656661848442	WITHOUT_CLASSIFICATION	3.4333815155800144E-4	DESIGN
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.999656661848442	WITHOUT_CLASSIFICATION	3.4333815155800144E-4	DESIGN
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.9969853765368203	WITHOUT_CLASSIFICATION	0.0030146234631798093	DESIGN
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9996626734820193	WITHOUT_CLASSIFICATION	3.3732651798062697E-4	DESIGN
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9997730628398153	WITHOUT_CLASSIFICATION	2.2693716018472844E-4	DESIGN
/**	WITHOUT_CLASSIFICATION	0.8138000989392026	DESIGN	0.18619990106079748	WITHOUT_CLASSIFICATION
// ignore	WITHOUT_CLASSIFICATION	0.9997047648977977	WITHOUT_CLASSIFICATION	2.9523510220236406E-4	DESIGN
// ignore	WITHOUT_CLASSIFICATION	0.9997047648977977	WITHOUT_CLASSIFICATION	2.9523510220236406E-4	DESIGN
//        }	WITHOUT_CLASSIFICATION	0.9977016911217084	WITHOUT_CLASSIFICATION	0.002298308878291597	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998122686237135	WITHOUT_CLASSIFICATION	1.87731376286521E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998122686237135	WITHOUT_CLASSIFICATION	1.87731376286521E-4	DESIGN
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9950002391481361	WITHOUT_CLASSIFICATION	0.004999760851863928	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998122686237135	WITHOUT_CLASSIFICATION	1.87731376286521E-4	DESIGN
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.9996742350416384	WITHOUT_CLASSIFICATION	3.257649583615551E-4	DESIGN
// at this point we have (drivingSqlAlias) the SQL alias of the driving table // corresponding to the given user alias.  However, the driving table is not // (necessarily) the table against which we want to apply locks.  Mainly, // the exception case here is joined-subclass hierarchies where we instead // want to apply the lock against the root table (for all other strategies, // it just happens that driving and root are the same).	WITHOUT_CLASSIFICATION	0.9999281496769341	WITHOUT_CLASSIFICATION	7.185032306582673E-5	DESIGN
// the column doesnt exist at all.	WITHOUT_CLASSIFICATION	0.9998524577270458	WITHOUT_CLASSIFICATION	1.4754227295414886E-4	DESIGN
// we have a mapped identifier property and the root of // the incoming property path matched that identifier // property	WITHOUT_CLASSIFICATION	0.999657840871696	WITHOUT_CLASSIFICATION	3.421591283040038E-4	DESIGN
// we have an embedded composite identifier	WITHOUT_CLASSIFICATION	0.9971155474132687	WITHOUT_CLASSIFICATION	0.0028844525867312235	DESIGN
// both many-to-one and one-to-one are represented as a // Property.  EntityPersister is relying on this value to // determine "lazy fetch groups" in terms of field-level // interception.  So we need to make sure that we return // true here for the case of many-to-one and one-to-one // with lazy="no-proxy" // // * impl note - lazy="no-proxy" currently forces both // lazy and unwrap to be set to true.  The other case we // are extremely interested in here is that of lazy="proxy" // where lazy is set to true, but unwrap is set to false. // thus we use both here under the assumption that this // return is really only ever used during persister // construction to determine the lazy property/field fetch // groupings.  If that assertion changes then this check // needs to change as well.  Partially, this is an issue with // the overloading of the term "lazy" here...	WITHOUT_CLASSIFICATION	0.8576484904130106	DESIGN	0.14235150958698944	WITHOUT_CLASSIFICATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993998999207009	WITHOUT_CLASSIFICATION	6.001000792991729E-4	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993998999207009	WITHOUT_CLASSIFICATION	6.001000792991729E-4	DESIGN
/*rootTableName = persistentClass.getRootTable().getQualifiedName( 	WITHOUT_CLASSIFICATION	0.9990302159699643	WITHOUT_CLASSIFICATION	9.697840300357113E-4	DESIGN
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9991103531722325	WITHOUT_CLASSIFICATION	8.896468277674399E-4	DESIGN
// Custom sql	WITHOUT_CLASSIFICATION	0.9993796760187434	WITHOUT_CLASSIFICATION	6.203239812566822E-4	DESIGN
/*protected void initPropertyPaths(	WITHOUT_CLASSIFICATION	0.9966831544422189	WITHOUT_CLASSIFICATION	0.003316845557781229	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994086587758717	WITHOUT_CLASSIFICATION	5.913412241282598E-4	DESIGN
//Custom SQL (would be better if these were private)	WITHOUT_CLASSIFICATION	0.9841648557783692	WITHOUT_CLASSIFICATION	0.01583514422163074	DESIGN
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9947223395663312	WITHOUT_CLASSIFICATION	0.0052776604336688135	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994086587758717	WITHOUT_CLASSIFICATION	5.913412241282598E-4	DESIGN
// aliases for identifier ( alias.id ); skip if the entity defines a non-id property named 'id'	WITHOUT_CLASSIFICATION	0.9995499915788242	WITHOUT_CLASSIFICATION	4.5000842117582165E-4	DESIGN
//decide which ResultSet to get the property value from:	WITHOUT_CLASSIFICATION	0.9987259017856636	WITHOUT_CLASSIFICATION	0.0012740982143363815	DESIGN
//note: it is conceptually possible that a UserType could map null to //	WITHOUT_CLASSIFICATION	0.9919475939620447	WITHOUT_CLASSIFICATION	0.008052406037955342	DESIGN
// the contract of EntityTuplizer.determineConcreteSubclassEntityName says that returning null // is an indication that the specified entity-name (this.getEntityName) should be used.	WITHOUT_CLASSIFICATION	0.9965916010129412	WITHOUT_CLASSIFICATION	0.0034083989870587915	DESIGN
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.9836118002862664	WITHOUT_CLASSIFICATION	0.016388199713733648	DESIGN
// cache these since they are stateless // this one could even be static...	WITHOUT_CLASSIFICATION	0.9551002387569255	WITHOUT_CLASSIFICATION	0.044899761243074474	DESIGN
//"as" is not in KEYWORDS	WITHOUT_CLASSIFICATION	0.9930448902969639	WITHOUT_CLASSIFICATION	0.006955109703036041	DESIGN
// --Commented out by Inspection (12/4/04 9:10 AM): public abstract void addCondition(String alias, String[] columns, String condition);	WITHOUT_CLASSIFICATION	0.9998057818972493	WITHOUT_CLASSIFICATION	1.94218102750647E-4	DESIGN
//use the id column alias	WITHOUT_CLASSIFICATION	0.999946548723099	WITHOUT_CLASSIFICATION	5.345127690113175E-5	DESIGN
//private List aliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9996901055968106	WITHOUT_CLASSIFICATION	3.098944031893669E-4	DESIGN
//columns.add(columnName); //aliases.add(tableAlias);	WITHOUT_CLASSIFICATION	0.9978506171800194	WITHOUT_CLASSIFICATION	0.002149382819980599	DESIGN
//where fragment must be empty!	WITHOUT_CLASSIFICATION	0.9461958551824958	WITHOUT_CLASSIFICATION	0.053804144817504146	DESIGN
// revert to traditional hibernate behavior of setting initialPoolSize to minPoolSize // unless otherwise specified with a c3p0.*-style parameter.	WITHOUT_CLASSIFICATION	0.9990914619478972	WITHOUT_CLASSIFICATION	9.085380521029059E-4	DESIGN
//arbitrary on clause ignored!!	WITHOUT_CLASSIFICATION	0.9980964655617907	WITHOUT_CLASSIFICATION	0.001903534438209394	DESIGN
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9972037574528545	WITHOUT_CLASSIFICATION	0.00279624254714544	DESIGN
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9972037574528545	WITHOUT_CLASSIFICATION	0.00279624254714544	DESIGN
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9988733982646656	WITHOUT_CLASSIFICATION	0.001126601735334459	DESIGN
// Essentially: // 1) If we have a local (Hibernate) transaction in progress //      and it already has the UserTransaction cached, use that //      UserTransaction to determine the status. // 2) If a transaction manager has been located, use //      that transaction manager to determine the status. // 3) Finally, as the last resort, try to lookup the //      UserTransaction via JNDI and use that to determine the //      status.	WITHOUT_CLASSIFICATION	0.9999887854552607	WITHOUT_CLASSIFICATION	1.1214544739224728E-5	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.9967688892480616	WITHOUT_CLASSIFICATION	0.003231110751938361	DESIGN
//swallow it (the transaction _was_ successful or successfully rolled back)	WITHOUT_CLASSIFICATION	0.9980341209369327	WITHOUT_CLASSIFICATION	0.001965879063067358	DESIGN
// ignore it	WITHOUT_CLASSIFICATION	0.9986861703899522	WITHOUT_CLASSIFICATION	0.0013138296100477557	DESIGN
// we need to dirty check many-to-ones with not-found="ignore" in order  // to update the cache (not the database), since in this case a null // entity reference can lose information	WITHOUT_CLASSIFICATION	0.8942553144761863	WITHOUT_CLASSIFICATION	0.10574468552381366	DESIGN
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999600429853481	WITHOUT_CLASSIFICATION	3.995701465197572E-5	DESIGN
// Regions can get instantiated in the course of normal work (e.g. // a named query region will be created the first time the query is // executed), so suspend any ongoing tx	WITHOUT_CLASSIFICATION	0.9999869882229638	WITHOUT_CLASSIFICATION	1.3011777036178917E-5	DESIGN
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9984958492494591	WITHOUT_CLASSIFICATION	0.0015041507505407935	DESIGN
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.999854717241188	WITHOUT_CLASSIFICATION	1.4528275881198565E-4	DESIGN
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9857961728306096	WITHOUT_CLASSIFICATION	0.014203827169390344	DESIGN
// NOTE : this is being used from the process of shutting down a // SessionFactory. Specific things to consider: // (1) this clearing of the region should not propagate to // other nodes on the cluster (if any); this is the // cache-mode-local option bit... // (2) really just trying a best effort to cleanup after // ourselves; lock failures, etc are not critical here; // this is the fail-silently option bit...	WITHOUT_CLASSIFICATION	0.9785089713277599	DESIGN	0.021491028672240082	WITHOUT_CLASSIFICATION
// need to extract the component values and check for subtype replacements...	WITHOUT_CLASSIFICATION	0.9999462319243113	WITHOUT_CLASSIFICATION	5.376807568877484E-5	DESIGN
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9997638884023632	WITHOUT_CLASSIFICATION	2.3611159763682062E-4	DESIGN
// for now, just "re-flatten" the metamodel since this is temporary stuff anyway (HHH-1907)	WITHOUT_CLASSIFICATION	0.5782878821979912	WITHOUT_CLASSIFICATION	0.42171211780200896	DESIGN
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9993553832250082	WITHOUT_CLASSIFICATION	6.446167749917772E-4	DESIGN
//This solution would allow us to eliminate the owner arg to disassemble(), but //what if the collection was null, and then later had elements added? seems unsafe //session.getPersistenceContext().getCollectionEntry( (PersistentCollection) value ).getKey();	WITHOUT_CLASSIFICATION	0.6733121156529515	WITHOUT_CLASSIFICATION	0.3266878843470486	DESIGN
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9995781294177475	WITHOUT_CLASSIFICATION	4.218705822524314E-4	DESIGN
// some collections are not lazy:	WITHOUT_CLASSIFICATION	0.9959759117047442	WITHOUT_CLASSIFICATION	0.004024088295255804	DESIGN
// Here we don't want to suspend the tx. If we do: // 1) We might be caching query results that reflect uncommitted // changes. No tx == no WL on cache node, so other threads // can prematurely see those query results // 2) No tx == immediate replication. More overhead, plus we // spread issue #1 above around the cluster	WITHOUT_CLASSIFICATION	0.99938289914266	WITHOUT_CLASSIFICATION	6.171008573399775E-4	DESIGN
// return the (fully resolved) identifier value, but do not resolve // to the actual referenced entity instance // NOTE: the owner of the association is not really the owner of the id!	WITHOUT_CLASSIFICATION	0.9997739405839393	WITHOUT_CLASSIFICATION	2.2605941606068934E-4	DESIGN
// Add a zero (or quite low) timeout option so we don't block. // Ignore any TimeoutException. Basically we forego caching the // query result in order to avoid blocking. // Reads are done with suspended tx, so they should not hold the // lock for long.  Not caching the query result is OK, since // any subsequent read will just see the old result with its // out-of-date timestamp; that result will be discarded and the // db query performed again.	WITHOUT_CLASSIFICATION	0.9998851394949866	WITHOUT_CLASSIFICATION	1.1486050501339911E-4	DESIGN
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9999526070827762	WITHOUT_CLASSIFICATION	4.739291722381952E-5	DESIGN
// We have the JBCWriteMutex, so no other *local* thread will  // be trying to write this key.  // It's possible here some remote thread has come in and // changed the values again, but since we are reading the // values to write to JBC right now, we know we are writing // the latest values; i.e. we don't assume that what we cached // in entry.update() above is what we should write to JBC *now*. // Our write could be redundant, i.e. we are writing what // some remote thread just came in an wrote.  There is a chance  // that yet another remote thread will update us, and we'll then // overwrite that later data in JBC.  But, all remote nodes will // ignore that change in their localCache; the only place it  // will live will be in JBC, where it can only effect the  // initial state transfer values on newly joined nodes  // (i.e. populateLocalCache()).	WITHOUT_CLASSIFICATION	0.9923303960128924	WITHOUT_CLASSIFICATION	0.007669603987107527	DESIGN
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9985762389650197	WITHOUT_CLASSIFICATION	0.0014237610349802764	DESIGN
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9985762389650197	WITHOUT_CLASSIFICATION	0.0014237610349802764	DESIGN
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9998685077481391	WITHOUT_CLASSIFICATION	1.3149225186089486E-4	DESIGN
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9931663410246979	WITHOUT_CLASSIFICATION	0.006833658975302021	DESIGN
// we need to obtain the lock before any actions are // executed, since this may be an inverse="true" // bidirectional association and it is one of the // earlier entity actions which actually updates // the database (this action is resposible for // second-level cache invalidation only)	WITHOUT_CLASSIFICATION	0.9964111393221233	WITHOUT_CLASSIFICATION	0.003588860677876628	DESIGN
//postDelete: // After actually deleting a row, record the fact that the instance no longer  // exists on the database (needed for identity-column key generation), and // remove it from the session cache	WITHOUT_CLASSIFICATION	0.8653575734972165	WITHOUT_CLASSIFICATION	0.1346424265027835	DESIGN
// intentionally empty	WITHOUT_CLASSIFICATION	0.9993201763465654	WITHOUT_CLASSIFICATION	6.798236534346502E-4	DESIGN
// todo : what else to do here?	DESIGN	0.9943365742511951	WITHOUT_CLASSIFICATION	0.005663425748804866	DESIGN
//put() has nowait semantics, is this really appropriate? //note that it needs to be async replication, never local or sync	DESIGN	0.9553180012410974	WITHOUT_CLASSIFICATION	0.044681998758902546	DESIGN
// 'hibernate.temp.use_jdbc_metadata_defaults' is a temporary magic value. // The need for it is intended to be alleviated with future developement, thus it is // not defined as an Environment constant... // // it is used to control whether we should consult the JDBC metadata to determine // certain Settings default values; it is useful to *not* do this when the database // may not be available (mainly in tools usage).	DESIGN	0.9976702743481356	DESIGN	0.0023297256518643584	WITHOUT_CLASSIFICATION
//TODO: get SQL rendering out of this package!	DESIGN	0.8456450402035214	WITHOUT_CLASSIFICATION	0.15435495979647862	DESIGN
//TODO: get SQL rendering out of this package!	DESIGN	0.8456450402035214	WITHOUT_CLASSIFICATION	0.15435495979647862	DESIGN
// todo : eventually merge this with TreeCache and just add optional opt-lock support there.	DESIGN	0.9936300136802642	WITHOUT_CLASSIFICATION	0.0063699863197358994	DESIGN
// can happen because of the multiple ways Cache.remove() // can be invoked :(	DESIGN	0.9999888837880798	WITHOUT_CLASSIFICATION	1.1116211920201795E-5	DESIGN
// work around the "feature" where tree cache is validating the // inserted node during the next transaction.  no idea...	DESIGN	0.9961492545047492	WITHOUT_CLASSIFICATION	0.003850745495250725	DESIGN
/**     * FIXME Per the RegionFactory class Javadoc, this constructor version     * should not be necessary.     *      * @param props The configuration properties     */	DESIGN	0.8607109359767886	DESIGN	0.13928906402321128	WITHOUT_CLASSIFICATION
/**     * FIXME Per the RegionFactory class Javadoc, this constructor version     * should not be necessary.     *      * @param props The configuration properties     */	DESIGN	0.8607109359767886	DESIGN	0.13928906402321128	WITHOUT_CLASSIFICATION
// FIXME Hacky workaround to JBCACHE-1202	DESIGN	0.7048428914228463	DESIGN	0.2951571085771537	WITHOUT_CLASSIFICATION
// FIXME Hacky workaround to JBCACHE-1202	DESIGN	0.7048428914228463	DESIGN	0.2951571085771537	WITHOUT_CLASSIFICATION
// TODO: I considered validating TS cache config here, // but decided to defer unti getTimestampsCacheInstance() in case the  // cache is never actually used	DESIGN	0.9918947982584108	DESIGN	0.00810520174158931	WITHOUT_CLASSIFICATION
// TODO Is this a valid operation on a timestamps cache?	DESIGN	0.994812385940249	DESIGN	0.005187614059750974	WITHOUT_CLASSIFICATION
// TODO Is this a valid operation on a timestamps cache?	DESIGN	0.994812385940249	DESIGN	0.005187614059750974	WITHOUT_CLASSIFICATION
// TODO Why not use the timestamp in a DataVersion?	DESIGN	0.98796444405315	DESIGN	0.01203555594684998	WITHOUT_CLASSIFICATION
// can happen because of the multiple ways Cache.remove() // can be invoked :(	DESIGN	0.9999888837880798	WITHOUT_CLASSIFICATION	1.1116211920201795E-5	DESIGN
// work around the "feature" where tree cache is validating the // inserted node during the next transaction. no idea...	DESIGN	0.9961515725304249	WITHOUT_CLASSIFICATION	0.003848427469575149	DESIGN
//swaldman 2004-02-07: modify to allow null values to signify fall through to c3p0 PoolConfig defaults	DESIGN	0.9930789924594653	WITHOUT_CLASSIFICATION	0.006921007540534799	DESIGN
// turn hibernate.c3p0.* into c3p0.*, so c3p0 // gets a chance to see all hibernate.c3p0.*	DESIGN	0.9510572140072137	WITHOUT_CLASSIFICATION	0.04894278599278627	DESIGN
//TODO: this bit actually has to be called after all cascades! //      but since identity insert is called *synchronously*, //      instead of asynchronously as other actions, it isn't	DESIGN	0.5978184577150164	DESIGN	0.4021815422849837	WITHOUT_CLASSIFICATION
//TODO: reenable if we also fix the above todo	DESIGN	0.7795734735101376	DESIGN	0.2204265264898623	WITHOUT_CLASSIFICATION
//TODO: inefficient if that cache is just going to ignore the updated state!	DESIGN	0.9363441987916636	WITHOUT_CLASSIFICATION	0.06365580120833635	DESIGN
// we may be screwed here since the collection action is about to execute // and we do not know the final owner key value	DESIGN	0.9993166845525355	WITHOUT_CLASSIFICATION	6.833154474644384E-4	DESIGN
/** Create an action that will evict collection and entity regions based on queryspaces (table names).	DESIGN	0.97786228987905	DESIGN	0.02213771012095	WITHOUT_CLASSIFICATION
// todo : what else to do here?	DESIGN	0.9943365742511951	WITHOUT_CLASSIFICATION	0.005663425748804866	DESIGN
// todo : modify the class definition if not already transformed...	DESIGN	0.9979053274529877	WITHOUT_CLASSIFICATION	0.0020946725470124316	DESIGN
// todo : what else to do here?	DESIGN	0.9943365742511951	WITHOUT_CLASSIFICATION	0.005663425748804866	DESIGN
// this is called by SessionFactory irregardless; we just disregard here; // could also add a check to SessionFactory to only conditionally call start	DESIGN	0.9973249186301476	WITHOUT_CLASSIFICATION	0.002675081369852361	DESIGN
// this is called by SessionFactory irregardless; we just disregard here; // could also add a check to SessionFactory to only conditionally call stop	DESIGN	0.9970817362273477	WITHOUT_CLASSIFICATION	0.002918263772652244	DESIGN
//TODO: to handle concurrent writes correctly, this should return a Lock to the client	DESIGN	0.9656911336746193	DESIGN	0.034308866325380674	WITHOUT_CLASSIFICATION
//put() has nowait semantics, is this really appropriate? //note that it needs to be async replication, never local or sync	DESIGN	0.9553180012410974	WITHOUT_CLASSIFICATION	0.044681998758902546	DESIGN
//TODO: to handle concurrent writes correctly, the client should pass in a Lock	DESIGN	0.7520234900100794	DESIGN	0.24797650998992066	WITHOUT_CLASSIFICATION
//TODO: assumes all collections disassemble to an array!	DESIGN	0.99495447011914	WITHOUT_CLASSIFICATION	0.0050455298808601565	DESIGN
//TODO: reuse the PreLoadEvent	DESIGN	0.9677491612032993	WITHOUT_CLASSIFICATION	0.03225083879670066	DESIGN
// todo: this was added to support initializing an entity's EntityEntry snapshot during reattach; // this should be refactored to instead expose a method to assemble a EntityEntry based on this // state for return.	DESIGN	0.9438880763756384	WITHOUT_CLASSIFICATION	0.05611192362436147	DESIGN
// todo : what is the implication of this?	DESIGN	0.9976618283823655	WITHOUT_CLASSIFICATION	0.0023381716176344245	DESIGN
// use COUNT as the default.  This mimics the old behavior, although // NONE might be a better option moving forward in the case of callable	DESIGN	0.9875222846533274	WITHOUT_CLASSIFICATION	0.01247771534667264	DESIGN
/* TODO: joinKeyColumnName & foreignKeyColumnName should be called either here or at a	DESIGN	0.9998712946419773	DESIGN	1.2870535802262932E-4	WITHOUT_CLASSIFICATION
//TODO: suck this into initLaziness!	DESIGN	0.5736952058089052	DESIGN	0.42630479419109485	WITHOUT_CLASSIFICATION
// we have to set up the table later!! yuck	DESIGN	0.999542480455634	WITHOUT_CLASSIFICATION	4.575195443659981E-4	DESIGN
//TODO: better to degrade to lazy="false" if uninstrumented	DESIGN	0.7002573705909252	WITHOUT_CLASSIFICATION	0.29974262940907476	DESIGN
// todo : again, how *should* this work for non-pojo entities?	DESIGN	0.9982770428614927	WITHOUT_CLASSIFICATION	0.001722957138507456	DESIGN
// TODO: this is a bit of copy/paste from IndexedCollection.createPrimaryKey()	DESIGN	0.9892268840177613	DESIGN	0.010773115982238771	WITHOUT_CLASSIFICATION
// This inner class implements a case statement....perhaps im being a bit over-clever here	DESIGN	0.9364476957236508	WITHOUT_CLASSIFICATION	0.06355230427634909	DESIGN
//TODO: bad implementation, cos it depends upon ordering of mapping doc //      fixing this requires that Collection/PersistentClass gain access //      to the Mappings reference from Configuration (or the filterDefinitions //      map directly) sometime during Configuration.buildSessionFactory //      (after all the types/filter-defs are known and before building //      persisters).	DESIGN	0.8925084727801522	WITHOUT_CLASSIFICATION	0.1074915272198478	DESIGN
//use of a stringbuffer to workaround a JDK bug	DESIGN	0.7929320193467705	DESIGN	0.20706798065322948	WITHOUT_CLASSIFICATION
// hack/workaround as sqlquery impl depend on having a key.	DESIGN	0.9997593780215053	WITHOUT_CLASSIFICATION	2.4062197849475457E-4	DESIGN
//FIXME: get the PersistentClass	DESIGN	0.9982067969599228	WITHOUT_CLASSIFICATION	0.0017932030400772557	DESIGN
//FIXME: get the PersistentClass	DESIGN	0.9982067969599228	WITHOUT_CLASSIFICATION	0.0017932030400772557	DESIGN
//Icky workaround for MySQL bug:	DESIGN	0.8726452653718224	WITHOUT_CLASSIFICATION	0.12735473462817765	DESIGN
//TODO: Somehow add the newly created foreign keys to the internal collection	DESIGN	0.8896540845638113	DESIGN	0.11034591543618864	WITHOUT_CLASSIFICATION
//TODO possibly relax that	DESIGN	0.5453397710624971	DESIGN	0.45466022893750296	WITHOUT_CLASSIFICATION
//TODO possibly relax that	DESIGN	0.5453397710624971	DESIGN	0.45466022893750296	WITHOUT_CLASSIFICATION
//TODO possibly relax that	DESIGN	0.5453397710624971	DESIGN	0.45466022893750296	WITHOUT_CLASSIFICATION
//use of a stringbuffer to workaround a JDK bug	DESIGN	0.7929320193467705	DESIGN	0.20706798065322948	WITHOUT_CLASSIFICATION
//use a degenerated strategy for backward compatibility	DESIGN	0.9977837415388532	WITHOUT_CLASSIFICATION	0.0022162584611468733	DESIGN
// Sets can be just a view of a part of another collection. // do we need to copy it to be sure it won't be changing // underneath us? // ie. this.set.addAll(set);	DESIGN	0.9914806972566855	WITHOUT_CLASSIFICATION	0.008519302743314498	DESIGN
//note that i parameter is now unused (delete it?)	DESIGN	0.9908999153085809	WITHOUT_CLASSIFICATION	0.00910008469141901	DESIGN
//just to help out during the load (ugly, i know)	DESIGN	0.9971693714719605	WITHOUT_CLASSIFICATION	0.0028306285280394767	DESIGN
// TODO : safe to interpret "map.remove(key) == null" as non-dirty?	DESIGN	0.9356306781545676	WITHOUT_CLASSIFICATION	0.06436932184543254	DESIGN
// yick!  need this for proper serialization/deserialization handling...	DESIGN	0.8782920644809106	WITHOUT_CLASSIFICATION	0.12170793551908941	DESIGN
//TODO: get SQL rendering out of this package!	DESIGN	0.8456450402035214	WITHOUT_CLASSIFICATION	0.15435495979647862	DESIGN
//TODO: get SQL rendering out of this package!	DESIGN	0.8456450402035214	WITHOUT_CLASSIFICATION	0.15435495979647862	DESIGN
//yuck!	DESIGN	0.9993169148631355	WITHOUT_CLASSIFICATION	6.830851368645701E-4	DESIGN
//TODO: get SQL rendering out of this package!	DESIGN	0.8456450402035214	WITHOUT_CLASSIFICATION	0.15435495979647862	DESIGN
// TODO : not sure this is correct, could not find docs on how to do this.	DESIGN	0.9982607260979095	DESIGN	0.0017392739020904349	WITHOUT_CLASSIFICATION
//HSQL has no Blob/Clob support .... but just put these here for now!	DESIGN	0.9969202505242876	WITHOUT_CLASSIFICATION	0.0030797494757124626	DESIGN
// does this need holdlock also? : return tableName + " with (updlock, rowlock, holdlock)";	DESIGN	0.99688694236494	WITHOUT_CLASSIFICATION	0.0031130576350600486	DESIGN
// sql-server, at least needed this dropped after use; strange!	DESIGN	0.9918286725568131	WITHOUT_CLASSIFICATION	0.008171327443186943	DESIGN
// todo : is there really any reason to kkeep trying if this fails once?	DESIGN	0.9998833876003024	WITHOUT_CLASSIFICATION	1.1661239969765315E-4	DESIGN
// TBD should this be varbinary($1)? //	DESIGN	0.9725209317896194	WITHOUT_CLASSIFICATION	0.02747906821038065	DESIGN
// is it necessary to register %exact since it can only appear in a where clause?	DESIGN	0.9912976003742924	WITHOUT_CLASSIFICATION	0.008702399625707595	DESIGN
// xmlforest requires a new kind of function constructor	DESIGN	0.9999338148257555	WITHOUT_CLASSIFICATION	6.618517424454736E-5	DESIGN
// Does this dialect support the ALTER TABLE syntax?	DESIGN	0.9451550889400404	WITHOUT_CLASSIFICATION	0.05484491105995971	DESIGN
// Do we need to qualify index names with the schema name?	DESIGN	0.9012259667240664	WITHOUT_CLASSIFICATION	0.09877403327593359	DESIGN
// Does this dialect support the UNIQUE column syntax?	DESIGN	0.9802912664750265	WITHOUT_CLASSIFICATION	0.01970873352497344	DESIGN
// Does this dialect support check constraints?	DESIGN	0.9574741690618723	WITHOUT_CLASSIFICATION	0.04252583093812772	DESIGN
// Do we need to drop constraints before dropping tables in this dialect?	DESIGN	0.9324015277871722	WITHOUT_CLASSIFICATION	0.06759847221282778	DESIGN
// Does this dialect support the FOR UPDATE syntax?	DESIGN	0.92737152598381	WITHOUT_CLASSIFICATION	0.07262847401619	DESIGN
// Does this dialect support the Oracle-style FOR UPDATE NOWAIT syntax?	DESIGN	0.92737152598381	WITHOUT_CLASSIFICATION	0.07262847401619	DESIGN
// Does this dialect support FOR UPDATE OF, allowing particular rows to be locked?	DESIGN	0.5346151522300943	DESIGN	0.46538484776990585	WITHOUT_CLASSIFICATION
//note there is a wierd implementation in the client side	DESIGN	0.9997005284599518	WITHOUT_CLASSIFICATION	2.994715400481425E-4	DESIGN
//TODO: never reached, since getTypeName() actually throws an exception!	DESIGN	0.9569839477141645	WITHOUT_CLASSIFICATION	0.04301605228583541	DESIGN
// todo : should we additionally check the current isolation mode explicitly?	DESIGN	0.99945671529363	WITHOUT_CLASSIFICATION	5.43284706370085E-4	DESIGN
// todo : remove this and just have subclasses use Isolater/IsolatedWork directly...	DESIGN	0.9977187642549982	WITHOUT_CLASSIFICATION	0.002281235745001947	DESIGN
//TODO: should orphans really be deleted during lock???	DESIGN	0.6502756816688515	WITHOUT_CLASSIFICATION	0.3497243183311485	DESIGN
// orphans should not be deleted during merge??	DESIGN	0.9832484792969255	WITHOUT_CLASSIFICATION	0.016751520703074504	DESIGN
// orphans should not be deleted during copy??	DESIGN	0.9832484792969255	WITHOUT_CLASSIFICATION	0.016751520703074504	DESIGN
//I suppose?	DESIGN	0.9967688892480616	WITHOUT_CLASSIFICATION	0.003231110751938361	DESIGN
//TODO: suck this logic into the collection!	DESIGN	0.7150488870889371	WITHOUT_CLASSIFICATION	0.28495111291106295	DESIGN
// TODO: an alternative is to check if the owner has changed; if it hasn't then // get the ID from collection.getOwner()	DESIGN	0.95288966778259	WITHOUT_CLASSIFICATION	0.04711033221740996	DESIGN
//TODO:refactor + make this method private	DESIGN	0.9230711445706501	WITHOUT_CLASSIFICATION	0.07692885542934988	DESIGN
// todo : we can actually just determine this from the incoming EntityEntry-s	DESIGN	0.9892667687932472	WITHOUT_CLASSIFICATION	0.010733231206752762	DESIGN
//TODO: Should this be an InitializeEntityEventListener??? (watch out for performance!)	DESIGN	0.8437664241428546	DESIGN	0.15623357585714528	WITHOUT_CLASSIFICATION
//TODO: better to pass the id in as an argument?	DESIGN	0.9878272057754236	WITHOUT_CLASSIFICATION	0.012172794224576476	DESIGN
// todo : potentially look at optimizing these two arrays	DESIGN	0.9997368359687433	WITHOUT_CLASSIFICATION	2.631640312566857E-4	DESIGN
/* trim done to workaround stupid oracle bug that cant handle whitespaces before a { in a sp */	DESIGN	0.5423801759165309	DESIGN	0.45761982408346924	WITHOUT_CLASSIFICATION
/* trim done to workaround stupid oracle bug that cant handle whitespaces before a { in a sp */	DESIGN	0.5423801759165309	DESIGN	0.45761982408346924	WITHOUT_CLASSIFICATION
//TODO: temporary	DESIGN	0.7919910167049156	DESIGN	0.20800898329508444	WITHOUT_CLASSIFICATION
//TODO: not quite sure about the full implications of this!	DESIGN	0.5221371845201433	DESIGN	0.47786281547985665	WITHOUT_CLASSIFICATION
//TODO: not quite sure about the full implications of this!	DESIGN	0.5221371845201433	DESIGN	0.47786281547985665	WITHOUT_CLASSIFICATION
//TODO: ugly here:	DESIGN	0.9158572194468652	DESIGN	0.0841427805531349	WITHOUT_CLASSIFICATION
//this is kinda the best we can do...	DESIGN	0.9508467096426035	WITHOUT_CLASSIFICATION	0.04915329035739653	DESIGN
//TODO: this needn't exclude subclasses...	DESIGN	0.8000360030332813	WITHOUT_CLASSIFICATION	0.1999639969667188	DESIGN
// todo : need map? the prob is a proper key, right?	DESIGN	0.9837305311895832	WITHOUT_CLASSIFICATION	0.01626946881041682	DESIGN
// todo : i'd much rather have this done from #endLoadingCollection(CollectionPersister,LoadingCollectionEntry)...	DESIGN	0.9831769199775202	WITHOUT_CLASSIFICATION	0.016823080022479814	DESIGN
// todo : hack!!! // NOTE : here we cleanup the load context when we have no more local // LCE entries.  This "works" for the time being because really // only the collection load contexts are implemented.  Long term, // this cleanup should become part of the "close result set" // processing from the (sandbox/jdbc) jdbc-container code.	DESIGN	0.9996174622614322	WITHOUT_CLASSIFICATION	3.825377385677778E-4	DESIGN
// todo : should really move this log statement to CollectionType, where this is used from...	DESIGN	0.7660751790413217	WITHOUT_CLASSIFICATION	0.23392482095867836	DESIGN
// TODO : keep seperate notions of QT[] here for shallow/non-shallow queries...	DESIGN	0.7679878484599113	WITHOUT_CLASSIFICATION	0.23201215154008875	DESIGN
// TODO : add this info to the translator and aggregate it here...	DESIGN	0.6778988760449549	DESIGN	0.322101123955045	WITHOUT_CLASSIFICATION
//TODO: move into collection type, so we can use polymorphism!	DESIGN	0.9547423147535571	DESIGN	0.04525768524644295	WITHOUT_CLASSIFICATION
// todo : should we check the current isolation mode explicitly?	DESIGN	0.99945671529363	WITHOUT_CLASSIFICATION	5.432847063700846E-4	DESIGN
//TODO: suck into event class	DESIGN	0.7924643394742656	WITHOUT_CLASSIFICATION	0.20753566052573433	DESIGN
//do we even really need this? the update will fail anyway....	DESIGN	0.9990598611052623	WITHOUT_CLASSIFICATION	9.401388947377614E-4	DESIGN
//hum ... should we cascade anyway? throw an exception? fine like it is?	DESIGN	0.749032785494362	WITHOUT_CLASSIFICATION	0.25096721450563797	DESIGN
//TODO: would it be better to do a refresh from db?	DESIGN	0.6637444063117598	DESIGN	0.3362555936882402	WITHOUT_CLASSIFICATION
//TODO: we use two visitors here, inefficient!	DESIGN	0.963041365022133	WITHOUT_CLASSIFICATION	0.03695863497786696	DESIGN
// this class has no proxies (so do a shortcut)	DESIGN	0.9949162988066372	WITHOUT_CLASSIFICATION	0.005083701193362733	DESIGN
//PostLoad is needed for EJB3 //TODO: reuse the PostLoadEvent...	DESIGN	0.9605959143195423	WITHOUT_CLASSIFICATION	0.039404085680457675	DESIGN
//TODO: put this stuff back in to read snapshot from //      the second-level cache (needs some extra work)	DESIGN	0.7283014670291316	WITHOUT_CLASSIFICATION	0.2716985329708685	DESIGN
// null or brand new collection // this will also (inefficiently) handle arrays, which have // no snapshot, so we can't do any better	DESIGN	0.923144947150578	WITHOUT_CLASSIFICATION	0.07685505284942203	DESIGN
//TODO: is this 100% correct?	DESIGN	0.8403171461610939	DESIGN	0.15968285383890612	WITHOUT_CLASSIFICATION
// TODO: iteratively get transient entities and retry merge until one of the following conditions: //       1) transientCopyCache.size() == 0 //       2) transientCopyCache.size() is not decreasing and copyCache.size() is not increasing // TODO: find out if retrying can add entities to copyCache (don't think it can...) // For now, just retry once; throw TransientObjectException if there are still any transient entities	DESIGN	0.9050379858475444	DESIGN	0.09496201415245566	WITHOUT_CLASSIFICATION
// entity name will not be available for non-POJO entities // TODO: cache the entity name somewhere so that it is available to this exception	DESIGN	0.9977149775275155	DESIGN	0.0022850224724845123	WITHOUT_CLASSIFICATION
//TODO: we should throw an exception if we really *know* for sure   //      that this is a detached instance, rather than just assuming //throw new StaleObjectStateException(entityName, id);	DESIGN	0.5755701088657785	DESIGN	0.4244298911342215	WITHOUT_CLASSIFICATION
// TODO : perhaps we should additionally require that the incoming entity // version be equivalent to the defined unsaved-value?	DESIGN	0.9937117929561766	DESIGN	0.0062882070438234	WITHOUT_CLASSIFICATION
// perhaps this should be an exception since it is only ever used // in the above method?	DESIGN	0.9114780403848903	DESIGN	0.08852195961510968	WITHOUT_CLASSIFICATION
// Put a placeholder in entries, so we don't recurse back and try to save() the // same object again. QUESTION: should this be done before onSave() is called? // likewise, should it be done before onUpdate()?	DESIGN	0.7991873107968984	WITHOUT_CLASSIFICATION	0.20081268920310147	DESIGN
//TODO: merge into one method!	DESIGN	0.6941904921111456	WITHOUT_CLASSIFICATION	0.30580950788885447	DESIGN
//TODO: refactor to .sql package	DESIGN	0.60510274198666	WITHOUT_CLASSIFICATION	0.39489725801334	DESIGN
/** * Provides query splitting methods, which were originally in QueryTranslator. * <br> * TODO: This will need to be refactored at some point. * * @author josh */	DESIGN	0.9993822189806882	DESIGN	6.177810193118522E-4	WITHOUT_CLASSIFICATION
//TODO: this is one of the ugliest and most fragile pieces of code in Hibernate....	DESIGN	0.7367450748081285	DESIGN	0.26325492519187155	WITHOUT_CLASSIFICATION
// todo : temporary //      needed because currently persister is the one that //      creates and renders the join fragments for inheritence //      hierarchies...	DESIGN	0.9986608474031341	WITHOUT_CLASSIFICATION	0.001339152596865884	DESIGN
// TODO : better way?!?	DESIGN	0.7732118041488683	DESIGN	0.22678819585113175	WITHOUT_CLASSIFICATION
// Not possible to simply re-use the versionPropertyNode here as it causes // OOM errors due to circularity :(	DESIGN	0.987553425985479	WITHOUT_CLASSIFICATION	0.012446574014520987	DESIGN
//TODO:this is only needed during compilation .. can we eliminate the instvar?	DESIGN	0.9974248991465167	WITHOUT_CLASSIFICATION	0.0025751008534834244	DESIGN
// TODO : this is a bit dodgy, come up with a better way to check this (plus see above comment)	DESIGN	0.997704948344942	DESIGN	0.002295051655057982	WITHOUT_CLASSIFICATION
// even here, if only properties mapped to the "base table" are referenced // in the set and where clauses, this could be handled by the BasicDelegate. // TODO : decide if it is better performance-wise to perform that check, or to simply use the MultiTableUpdateDelegate	DESIGN	0.9990426307018713	DESIGN	9.573692981286246E-4	WITHOUT_CLASSIFICATION
//TODO: switch statements are always evil! We already had bugs because  //      of forgotten token types. Use polymorphism for this!	DESIGN	0.9983010921452774	WITHOUT_CLASSIFICATION	0.0016989078547225136	DESIGN
// TODO : we really need to be able to deal with component paths here also; // this is difficult because the hql-sql grammar expects all those node types // to be FromReferenceNodes.  One potential fix here would be to convert the // IntoClause to just use a FromClause/FromElement combo (as a child of the // InsertStatement) and move all this logic into the InsertStatement.  That's // probably the easiest approach (read: least amount of changes to the grammar // and code), but just doesn't feel right as then an insert would contain // 2 from-clauses	DESIGN	0.9999316495636629	DESIGN	6.835043633717342E-5	WITHOUT_CLASSIFICATION
// really there are two situations where it should be ok to allow the insertion // into properties defined on a superclass: //      1) union-subclass with an abstract root entity //      2) discrim-subclass // // #1 is handled already because of the fact that // UnionSubclassPersister alreay always returns 0 // for this call... // // we may want to disallow it for discrim-subclass just for // consistency-sake (currently does not work anyway)...	DESIGN	0.8453424959900134	WITHOUT_CLASSIFICATION	0.1546575040099866	DESIGN
//yuck!	DESIGN	0.9993169148631355	WITHOUT_CLASSIFICATION	6.830851368645701E-4	DESIGN
// implicit joins are always(?) ok to reuse	DESIGN	0.9997081385431288	WITHOUT_CLASSIFICATION	2.91861456871226E-4	DESIGN
// TODO : we may also want to check that the types here map to exactly one column/JDBC-type //      can't think of a situation where arithmetic expression between multi-column mappings //      makes any sense.	DESIGN	0.7018223175152782	WITHOUT_CLASSIFICATION	0.2981776824847219	DESIGN
// we do not know either type //BLIND GUESS!	DESIGN	0.9921883817961014	WITHOUT_CLASSIFICATION	0.0078116182038986594	DESIGN
//TODO: used to be exprNoParens! was this needed?	DESIGN	0.9999985830369116	DESIGN	1.416963088502679E-6	WITHOUT_CLASSIFICATION
// TODO: Replace this with a more elegant solution.	DESIGN	0.9986388265772055	DESIGN	0.0013611734227945622	WITHOUT_CLASSIFICATION
// TODO: Should this really return null?  If not, figure out something better to do here.	DESIGN	0.646287991681273	DESIGN	0.353712008318727	WITHOUT_CLASSIFICATION
//TODO: get SQL rendering out of this package!	DESIGN	0.8456450402035214	WITHOUT_CLASSIFICATION	0.15435495979647862	DESIGN
// yuck!	DESIGN	0.9998122686237135	WITHOUT_CLASSIFICATION	1.87731376286521E-4	DESIGN
// ignore it; the incoming property could not be found so we // cannot be sure what to do here.  At the very least, the // safest is to simply not apply any dereference toggling...	DESIGN	0.8745305296175838	WITHOUT_CLASSIFICATION	0.1254694703824161	DESIGN
// TODO : most of below was taken verbatim from DotNode; should either delegate this logic or super-type it	DESIGN	0.9362691356613342	DESIGN	0.06373086433866577	WITHOUT_CLASSIFICATION
// otherwise, a trim-specification and/or a trim-character // have been specified;  we need to decide which options // are present and "do the right thing" // should leading trim-characters be trimmed? // should trailing trim-characters be trimmed? // the trim-character // the trim-source	DESIGN	0.9760017026616657	WITHOUT_CLASSIFICATION	0.02399829733833429	DESIGN
// todo: we should really just collect these from the various SelectExpressions, rather than regenerating here	DESIGN	0.7115877219358802	WITHOUT_CLASSIFICATION	0.28841227806411984	DESIGN
//TODO: is this a bit ugly?	DESIGN	0.8539750319737492	DESIGN	0.14602496802625084	WITHOUT_CLASSIFICATION
// Need a better way to define the suffixes here...	DESIGN	0.9662542155707333	WITHOUT_CLASSIFICATION	0.03374578442926673	DESIGN
// TODO: something much better - look at the type of the other expression! // TODO: Have comparisonExpression and/or arithmeticExpression rules complete the resolution of boolean nodes.	DESIGN	0.9642799025588856	DESIGN	0.03572009744111438	WITHOUT_CLASSIFICATION
// TODO : what amount of significant digits need to be supported here? //      - from the DecimalFormat docs: //          [significant digits] = [minimum integer digits] + [maximum fraction digits]	DESIGN	0.952611137666381	DESIGN	0.047388862333619025	WITHOUT_CLASSIFICATION
// Needed the "clazz_" check to work around union-subclasses // TODO : is there a way to tell whether a persister is truly discrim-column based inheritence?	DESIGN	0.8548271289114341	DESIGN	0.14517287108856577	WITHOUT_CLASSIFICATION
//We should actually rework this class to not implement Parser //and just process path expressions in the most convenient way.	DESIGN	0.9369959047564228	DESIGN	0.06300409524357728	WITHOUT_CLASSIFICATION
//The class is now way to complex!	DESIGN	0.9937331785377441	WITHOUT_CLASSIFICATION	0.006266821462255939	DESIGN
//TODO: get SQL rendering out of here	DESIGN	0.8048857657352807	WITHOUT_CLASSIFICATION	0.19511423426471936	DESIGN
//TODO: is there a better way?	DESIGN	0.5670699187184782	DESIGN	0.43293008128152194	WITHOUT_CLASSIFICATION
//Must be done here because of side-effect! yuck...	DESIGN	0.99645574144063	WITHOUT_CLASSIFICATION	0.003544258559370084	DESIGN
//name from a super query (a bit inelegant that it shows up here)	DESIGN	0.9208624402870513	WITHOUT_CLASSIFICATION	0.07913755971294867	DESIGN
// We should reengineer this class so that, rather than the current ad - // hoc linear approach to processing a stream of tokens, we instead // build up a tree of expressions.	DESIGN	0.7491556760864382	DESIGN	0.25084432391356176	WITHOUT_CLASSIFICATION
// this is ugly here, but needed because its a subquery	DESIGN	0.9880450667142294	WITHOUT_CLASSIFICATION	0.011954933285770622	DESIGN
// unhappy about this being public ... is there a better way?	DESIGN	0.9221989647363711	WITHOUT_CLASSIFICATION	0.07780103526362896	DESIGN
// Make sure this is a defined parameter and check the incoming value type // TODO: what should be the actual exception type here?	DESIGN	0.9997778668887216	DESIGN	2.221331112783986E-4	WITHOUT_CLASSIFICATION
// TODO : this constructor form is *only* used from constructor directly below us; can it go away?	DESIGN	0.998930851834426	DESIGN	0.0010691481655740358	WITHOUT_CLASSIFICATION
//TODO: COPY/PASTE FROM SessionImpl, pull up!	DESIGN	0.9147066606710017	WITHOUT_CLASSIFICATION	0.08529333932899835	DESIGN
// TODO : should remove this exposure //  and have all references to the session's batcher use the ConnectionManager.	DESIGN	0.9838367776160585	DESIGN	0.0161632223839415	WITHOUT_CLASSIFICATION
// todo : should this get moved to PersistentContext? // logically, is PersistentContext the "thing" to which an interceptor gets attached?	DESIGN	0.8901936313486185	WITHOUT_CLASSIFICATION	0.10980636865138149	DESIGN
// TODO: what type?	DESIGN	0.9449837167830365	DESIGN	0.055016283216963446	WITHOUT_CLASSIFICATION
// todo : should seriously consider not allowing a txn to begin from a child session //      can always route the request to the root session...	DESIGN	0.9277506624917428	WITHOUT_CLASSIFICATION	0.07224933750825714	DESIGN
// short-circuit for performance...	DESIGN	0.9993910872472447	WITHOUT_CLASSIFICATION	6.089127527553367E-4	DESIGN
// not absolutely necessary, but does help with aggressive release	DESIGN	0.989862406596136	WITHOUT_CLASSIFICATION	0.010137593403864014	DESIGN
// TODO : remove these last two as batcher is no longer managing connections	DESIGN	0.6844554172213491	DESIGN	0.31554458277865083	WITHOUT_CLASSIFICATION
//work around a bug in all known connection pools....	DESIGN	0.9144983533776049	WITHOUT_CLASSIFICATION	0.08550164662239522	DESIGN
// TODO : make this the factory for "entity mode related" sessions; // also means making this the target of transaction-synch and the // thing that knows how to cascade things between related sessions // // At that point, perhaps this thing is a "SessionContext", and // ConnectionManager is a "JDBCContext"?  A "SessionContext" should // live in the impl package...	DESIGN	0.9999985302861689	DESIGN	1.4697138310330527E-6	WITHOUT_CLASSIFICATION
//TODO: does this really need to be here? //      does the collection already have //      it's own up-to-date snapshot?	DESIGN	0.9937524165089306	DESIGN	0.006247583491069321	WITHOUT_CLASSIFICATION
//TODO: the i==entitySpan-1 bit depends upon subclass implementation (very bad)	DESIGN	0.9234354912604888	DESIGN	0.07656450873951114	WITHOUT_CLASSIFICATION
/**	DESIGN	0.8138000989392026	DESIGN	0.18619990106079748	WITHOUT_CLASSIFICATION
// todo : add the notion of enabled filters to the CacheKey to differentiate filtered collections from non-filtered; //      but CacheKey is currently used for both collections and entities; would ideally need to define two seperate ones; //      currently this works in conjuction with the check on //      DefaultInitializeCollectionEventHandler.initializeCollectionFromCache() (which makes sure to not read from //      cache with enabled filters). // EARLY EXIT!!!!!	DESIGN	0.8410009905117987	WITHOUT_CLASSIFICATION	0.15899900948820134	DESIGN
//for sets, we should end the collection load after resolving //the entities, since we might call hashCode() on the elements //TODO: or we could do this polymorphically, and have two //      different operations implemented differently for arrays	DESIGN	0.8468318148879685	DESIGN	0.15316818511203145	WITHOUT_CLASSIFICATION
//This is not very nice (and quite slow):	DESIGN	0.7567317753565573	WITHOUT_CLASSIFICATION	0.2432682246434426	DESIGN
//use of trim() here is ugly?	DESIGN	0.9971642469087854	WITHOUT_CLASSIFICATION	0.002835753091214607	DESIGN
//TODO: this is too conservative; if all preceding joins were  //      also inner joins, we could use an inner join here	DESIGN	0.5078864550009984	DESIGN	0.4921135449990017	WITHOUT_CLASSIFICATION
//TODO: look at the owning property and check that it  //      isn't lazy (by instrumentation)	DESIGN	0.9815385557109562	WITHOUT_CLASSIFICATION	0.018461444289043775	DESIGN
//TODO: inefficient	DESIGN	0.8662306884129517	WITHOUT_CLASSIFICATION	0.1337693115870483	DESIGN
// why does this matter?	DESIGN	0.9917872866768742	WITHOUT_CLASSIFICATION	0.0082127133231258	DESIGN
// from the collection of associations, locate OJA for the // ManyToOne corresponding to this persister to fully // define the many-to-many; we need that OJA so that we can // use its alias here // TODO : is there a better way here?	DESIGN	0.9996836174612362	DESIGN	3.1638253876376465E-4	WITHOUT_CLASSIFICATION
//TODO: this class depends directly upon CriteriaImpl,  //      in the impl package ... add a CriteriaImplementor  //      interface	DESIGN	0.972127963105407	DESIGN	0.027872036894593163	WITHOUT_CLASSIFICATION
//TODO: add a CriteriaImplementor interface //      this class depends directly upon CriteriaImpl in the impl package...	DESIGN	0.7382929811840913	DESIGN	0.2617070188159087	WITHOUT_CLASSIFICATION
// TODO : not so sure this is needed...	DESIGN	0.7642665449930156	DESIGN	0.23573345500698434	WITHOUT_CLASSIFICATION
// meant to handle dynamic instantiation queries...(Copy from QueryLoader)	DESIGN	0.9985719832545303	WITHOUT_CLASSIFICATION	0.0014280167454696433	DESIGN
// TODO: The order in which entities are saved may matter (e.g., a particular transient entity //       may need to be saved before other transient entities can be saved; //       Keep retrying the batch of transient entities until either: //       1) there are no transient entities left in transientCopyCache //       or 2) no transient entities were saved in the last batch // For now, just run through the transient entities and retry the merge	DESIGN	0.6514125426212614	DESIGN	0.34858745737873864	WITHOUT_CLASSIFICATION
// todo: this might really even be moved into the cfg package and used as the basis for all things which are configurable.	DESIGN	0.9499577197059472	DESIGN	0.0500422802940528	WITHOUT_CLASSIFICATION
// todo : currently expects that the individual with expressions apply to the same sql table join. //      This may not be the case for joined-subclass where the property values //      might be coming from different tables in the joined hierarchy.  At some //      point we should expand this to support that capability.  However, that has //      some difficulties: //          1) the biggest is how to handle ORs when the individual comparisons are //              linked to different sql joins. //          2) here we would need to track each comparison individually, along with //              the join alias to which it applies and then pass that information //              back to the FromElement so it can pass it along to the JoinSequence	DESIGN	0.6354393461562996	DESIGN	0.36456065384370034	WITHOUT_CLASSIFICATION
// this function has a template -> restore output, apply the template and write the result out // TODO: Downcast to avoid using an interface?  Yuck.	DESIGN	0.988150214103181	WITHOUT_CLASSIFICATION	0.011849785896819004	DESIGN
// at some point the generate phase needs to be moved out of here, // because a single object-level DML might spawn multiple SQL DML // command executions. // // Possible to just move the sql generation for dml stuff, but for // consistency-sake probably best to just move responsiblity for // the generation phase completely into the delegates // (QueryLoader/StatementExecutor) themselves.  Also, not sure why // QueryLoader currently even has a dependency on this at all; does // it need it?  Ideally like to see the walker itself given to the delegates directly...	DESIGN	0.9999696808318396	DESIGN	3.031916816042255E-5	WITHOUT_CLASSIFICATION
// get the right object from the list ... would it be easier to just call getEntity() ??	DESIGN	0.991477041071865	WITHOUT_CLASSIFICATION	0.00852295892813498	DESIGN
// TODO should we just collect these like with the collections above?	DESIGN	0.9882708503553821	DESIGN	0.011729149644617966	WITHOUT_CLASSIFICATION
// todo : better to handle dynamic filters through implicit DynamicFilterParameterSpecification // see the discussion there in DynamicFilterParameterSpecification's javadocs as to why // it is currently not done that way.	DESIGN	0.9030236204825295	WITHOUT_CLASSIFICATION	0.09697637951747055	DESIGN
/////////////////////////////////////////////////////////////////////////// // USED ONLY FOR REGRESSION TESTING!!!! // // todo : obviously get rid of all this junk ;) ///////////////////////////////////////////////////////////////////////////	DESIGN	0.9948313191774177	WITHOUT_CLASSIFICATION	0.005168680822582337	DESIGN
//create an index on the key columns??	DESIGN	0.9997735758319344	WITHOUT_CLASSIFICATION	2.2642416806566455E-4	DESIGN
//TODO: deprecated, remove eventually	DESIGN	0.8805392761471309	WITHOUT_CLASSIFICATION	0.11946072385286911	DESIGN
//create an index on the key columns??	DESIGN	0.9997735758319344	WITHOUT_CLASSIFICATION	2.2642416806566455E-4	DESIGN
//TODO: improve this hack!	DESIGN	0.7847794174453694	DESIGN	0.21522058255463067	WITHOUT_CLASSIFICATION
// inheritance cycle detection (paranoid check)	DESIGN	0.998904789013558	WITHOUT_CLASSIFICATION	0.0010952109864421431	DESIGN
//TODO: remove use of instanceof!	DESIGN	0.7095099511418054	WITHOUT_CLASSIFICATION	0.29049004885819457	DESIGN
//shortcut	DESIGN	0.9993169148631355	WITHOUT_CLASSIFICATION	6.830851368645701E-4	DESIGN
//TODO: handle the case of a foreign key to something other than the pk	DESIGN	0.9660748602168341	WITHOUT_CLASSIFICATION	0.03392513978316582	DESIGN
// create an index on the key columns??	DESIGN	0.9999279621377624	WITHOUT_CLASSIFICATION	7.20378622376666E-5	DESIGN
// todo : remove	DESIGN	0.9988638615391181	WITHOUT_CLASSIFICATION	0.0011361384608818172	DESIGN
// todo : remove	DESIGN	0.9988638615391181	WITHOUT_CLASSIFICATION	0.0011361384608818172	DESIGN
// todo : remove	DESIGN	0.9988638615391181	WITHOUT_CLASSIFICATION	0.0011361384608818172	DESIGN
// todo : throw exception?	DESIGN	0.9997908877383174	WITHOUT_CLASSIFICATION	2.0911226168261133E-4	DESIGN
// todo : throw exception?  maybe warn if not the same?	DESIGN	0.9981342133599959	WITHOUT_CLASSIFICATION	0.001865786640004098	DESIGN
//TODO: make EntityPersister *not* depend on SessionFactoryImplementor //interface, if possible	DESIGN	0.6911068761968405	WITHOUT_CLASSIFICATION	0.3088931238031595	DESIGN
//TODO: is there a more elegant way than downcasting?	DESIGN	0.9162531937817405	DESIGN	0.08374680621825943	WITHOUT_CLASSIFICATION
// TODO: encapsulate the protected instance variables!	DESIGN	0.9745767418991623	DESIGN	0.025423258100837648	WITHOUT_CLASSIFICATION
// should indicate that we are processing an INSERT/UPDATE/DELETE // query with a subquery implied via a collection property // function. Here, we need to use the table name itself as the // qualification alias. // TODO : verify this works for all databases... // TODO : is this also the case in non-"indexed" scenarios?	DESIGN	0.9854708168112389	DESIGN	0.014529183188761056	WITHOUT_CLASSIFICATION
//TODO: copy/paste from insertRows()	DESIGN	0.8584359769067645	WITHOUT_CLASSIFICATION	0.1415640230932354	DESIGN
//TODO: copy/paste from recreate()	DESIGN	0.8584359769067645	WITHOUT_CLASSIFICATION	0.1415640230932354	DESIGN
//should this interface extend PropertyMapping?	DESIGN	0.9486971144019919	WITHOUT_CLASSIFICATION	0.051302885598008	DESIGN
//ie. the subquery! yuck!	DESIGN	0.9988289923408114	WITHOUT_CLASSIFICATION	0.0011710076591887155	DESIGN
//TODO: move to .sql package!!	DESIGN	0.590805562112331	WITHOUT_CLASSIFICATION	0.4091944378876689	DESIGN
//TODO: code duplication with SingleTableEntityPersister	DESIGN	0.6213739673545999	WITHOUT_CLASSIFICATION	0.37862603264540007	DESIGN
// TODO: It would be really, really nice to use this to also model components!	DESIGN	0.9888272494208548	DESIGN	0.011172750579145121	WITHOUT_CLASSIFICATION
//TODO: *two* hashmap lookups here is one too many...	DESIGN	0.6557944271641747	WITHOUT_CLASSIFICATION	0.3442055728358253	DESIGN
//TODO: code duplication with JoinedSubclassEntityPersister	DESIGN	0.6213739673545999	WITHOUT_CLASSIFICATION	0.37862603264540007	DESIGN
//perhaps not really necessary...	DESIGN	0.9920605254631351	WITHOUT_CLASSIFICATION	0.007939474536864893	DESIGN
// NOTE: this assumes something about how propertySelectFragment is implemented by the subclass! // was toUnqotedAliasStrings( getIdentiferColumnNames() ) before - now tried // to remove that unqoting and missing aliases..	DESIGN	0.9983106903136544	WITHOUT_CLASSIFICATION	0.0016893096863456348	DESIGN
// NOTE: this assumes something about how propertySelectFragment is implemented by the subclass! // was toUnqotedAliasStrings( getdiscriminatorColumnName() ) before - now tried // to remove that unqoting and missing aliases..	DESIGN	0.9983106903136544	WITHOUT_CLASSIFICATION	0.0016893096863456348	DESIGN
//TODO: should we use SELECT .. FOR UPDATE?	DESIGN	0.7353696269786809	DESIGN	0.2646303730213191	WITHOUT_CLASSIFICATION
//TODO: optimize this better!	DESIGN	0.7937207830388109	WITHOUT_CLASSIFICATION	0.20627921696118917	DESIGN
//TODO: should we allow suffixes on these ?	DESIGN	0.9716823220261233	DESIGN	0.028317677973876763	WITHOUT_CLASSIFICATION
//This is really ugly, but necessary:	DESIGN	0.9978839935739567	WITHOUT_CLASSIFICATION	0.0021160064260432616	DESIGN
//ugly little workaround for fact that createUniqueKeyLoaders() does not handle component properties	DESIGN	0.7125929592663086	WITHOUT_CLASSIFICATION	0.2874070407336912	DESIGN
//TODO: disable batch loading if lockMode > READ?	DESIGN	0.9968927521560647	WITHOUT_CLASSIFICATION	0.003107247843935378	DESIGN
// append the SQL to return the generated identifier //TODO: suck into Insert	DESIGN	0.9450352692938843	WITHOUT_CLASSIFICATION	0.05496473070611564	DESIGN
//TODO: I am not so sure about the exception handling in this bit!	DESIGN	0.9847403284841636	DESIGN	0.015259671515836376	WITHOUT_CLASSIFICATION
//TODO: is this really necessary????	DESIGN	0.7517624191444241	WITHOUT_CLASSIFICATION	0.24823758085557582	DESIGN
//TODO: move to .sql package, and refactor with similar things!	DESIGN	0.5081152200048256	DESIGN	0.49188477999517455	WITHOUT_CLASSIFICATION
//TODO: implement functionality //  this might be painful to do here, as the "join post processing" for //  the subquery has already been performed (meaning that for //  theta-join dialects, the join conditions have already been moved //  over to the where clause).  A "simple" solution here might to //  perform "join post processing" once for the entire query (including //  any subqueries) at one fell swoop	DESIGN	0.9966702792409924	DESIGN	0.003329720759007505	WITHOUT_CLASSIFICATION
// todo : this eventually needs to be removed	DESIGN	0.9904413738293202	WITHOUT_CLASSIFICATION	0.00955862617067992	DESIGN
//kinda ugly, but needed for collections with a "." node mapping	DESIGN	0.9956210289643896	WITHOUT_CLASSIFICATION	0.00437897103561037	DESIGN
//is this ok?	DESIGN	0.9919138227718125	WITHOUT_CLASSIFICATION	0.008086177228187554	DESIGN
//TODO: perhaps this should be some other RuntimeException...	DESIGN	0.9996247252869225	DESIGN	3.7527471307752036E-4	WITHOUT_CLASSIFICATION
//TODO: make this a bit nicer	DESIGN	0.9126274899663869	DESIGN	0.08737251003361311	WITHOUT_CLASSIFICATION
//Yuck:	DESIGN	0.9993169148631355	WITHOUT_CLASSIFICATION	6.830851368645701E-4	DESIGN
//TODO: we should provide some way to get keys of collection of statistics to make it easier to retrieve from a GUI perspective	DESIGN	0.9999355676098768	DESIGN	6.443239012316513E-5	WITHOUT_CLASSIFICATION
/**	DESIGN	0.8138000989392026	DESIGN	0.18619990106079748	WITHOUT_CLASSIFICATION
// TODO : will need reference to session factory to fully complete HHH-1907	DESIGN	0.9493040269115801	DESIGN	0.05069597308841996	WITHOUT_CLASSIFICATION
//TODO: currently keeps Getters and Setters (instead of PropertyAccessors) because of the way getGetter() and getSetter() are implemented currently; yuck!	DESIGN	0.9782841064287683	WITHOUT_CLASSIFICATION	0.021715893571231736	DESIGN
//TODO: redesign how PropertyAccessors are acquired...	DESIGN	0.7078743400768609	WITHOUT_CLASSIFICATION	0.292125659923139	DESIGN
// todo : YUCK!!!	DESIGN	0.9996567650595186	WITHOUT_CLASSIFICATION	3.4323494048139154E-4	DESIGN
// TODO : YUCK!!!  fix after HHH-1907 is complete	DESIGN	0.9900424363116895	DESIGN	0.009957563688310475	WITHOUT_CLASSIFICATION
//TODO: need to make the majority of this functionality into a top-level support class for custom impl support	DESIGN	0.9017534677307782	DESIGN	0.09824653226922171	WITHOUT_CLASSIFICATION
//TODO: design new lifecycle for ProxyFactory	DESIGN	0.9089288108527123	WITHOUT_CLASSIFICATION	0.09107118914728776	DESIGN
//TODO: would be nice to handle proxy classes elegantly!	DESIGN	0.7639665185461878	WITHOUT_CLASSIFICATION	0.23603348145381214	DESIGN
// TODO: copy/paste from ManyToOneType	DESIGN	0.6878770141458349	DESIGN	0.31212298585416515	WITHOUT_CLASSIFICATION
//TODO: should this be Session.instantiate(Persister, ...)?	DESIGN	0.8322572506297977	DESIGN	0.16774274937020223	WITHOUT_CLASSIFICATION
//TODO: this is a bit arbitrary, expose a switch to the user?	DESIGN	0.7457039752980598	DESIGN	0.25429602470194024	WITHOUT_CLASSIFICATION
//TODO: implement caching?! proxies?!	DESIGN	0.5984706381068867	WITHOUT_CLASSIFICATION	0.4015293618931132	DESIGN
//TODO: is this right??	DESIGN	0.7508213660441098	WITHOUT_CLASSIFICATION	0.24917863395589027	DESIGN
// is this really necessary?	DESIGN	0.9917447717151103	WITHOUT_CLASSIFICATION	0.008255228284889688	DESIGN
//TODO: move these to a new JoinableType abstract class, //extended by EntityType and PersistentCollectionType:	DESIGN	0.7922067059253414	DESIGN	0.20779329407465855	WITHOUT_CLASSIFICATION
// TODO: this is very suboptimal for some subclasses (namely components), // since it does not take advantage of two-phase-load	DESIGN	0.6780859830909947	DESIGN	0.32191401690900545	WITHOUT_CLASSIFICATION
// worrying about proxies is perhaps a little bit of overkill here...	DESIGN	0.5864747471918219	WITHOUT_CLASSIFICATION	0.4135252528081782	DESIGN
// NOTE VERY HACKISH WORKAROUND!! // TODO: Fix this so it will work for non-POJO entity mode	DESIGN	0.7441405292731977	DESIGN	0.25585947072680226	WITHOUT_CLASSIFICATION
// TODO: Fix this so it will work for non-POJO entity mode	DESIGN	0.7301180797798098	DESIGN	0.2698819202201902	WITHOUT_CLASSIFICATION
// We would probably refactor to have LogicParser (builds a tree of simple // expressions connected by and, or, not), ExpressionParser (translates // from OO terms like foo, foo.Bar, foo.Bar.Baz to SQL terms like // FOOS.ID, FOOS.BAR_ID, etc) and PathExpressionParser (which does much // the same thing it does now)	DESIGN	0.9926002048374342	WITHOUT_CLASSIFICATION	0.007399795162565846	DESIGN
//TODO: this is a little inefficient, don't need to do a whole //      deep replaceElements() call	DESIGN	0.8823497238881839	DESIGN	0.11765027611181617	WITHOUT_CLASSIFICATION
//workaround for WebLogic	DESIGN	0.9981784991174525	WITHOUT_CLASSIFICATION	0.0018215008825475702	DESIGN
//TODO: this dependency is kinda Bad	DESIGN	0.9191111202256842	DESIGN	0.08088887977431578	WITHOUT_CLASSIFICATION
//ick!	DESIGN	0.9993169148631355	WITHOUT_CLASSIFICATION	6.830851368645701E-4	DESIGN
// short cut check...	DESIGN	0.9981137644796337	WITHOUT_CLASSIFICATION	0.0018862355203661636	DESIGN
// todo : move to StringHelper?	DESIGN	0.9981517780226407	WITHOUT_CLASSIFICATION	0.001848221977359343	DESIGN
//yukky! Don't you have subclasses for that! //TODO race conditions can happen here	DESIGN	0.5867197273442885	WITHOUT_CLASSIFICATION	0.4132802726557116	DESIGN
//TODO: We probably should have a StatisticsNotPublishedException, to make it clean	DESIGN	0.9410137372008908	DESIGN	0.05898626279910916	WITHOUT_CLASSIFICATION
// FIXME hack to work around fact that calling // Node added = root.addChild( fqn ); doesn't  // properly set the version on the node	DESIGN	0.9940743650829051	DESIGN	0.0059256349170948176	WITHOUT_CLASSIFICATION
// TODO: I considered validating the presence of the TS cache here, // but decided to defer unti getQueryCacheInstance() in case the  // cache is never actually used	DESIGN	0.9908279478195365	DESIGN	0.009172052180463455	WITHOUT_CLASSIFICATION
//need to do that here rather than in the save event listener to let //the post insert events to have a id-filled entity when IDENTITY is used (EJB3)	DESIGN	0.9261934743933218	DESIGN	0.07380652560667822	WITHOUT_CLASSIFICATION
//TODO: simply remove this override //      if we fix the above todos	DESIGN	0.9771638710218559	DESIGN	0.02283612897814413	WITHOUT_CLASSIFICATION
// This, is used by SessionFactoryImpl to hand to the generated SessionImpl; // was the only reason I could see that we cannot just use null as // Settings.cacheProvider	DESIGN	0.7668610370577653	WITHOUT_CLASSIFICATION	0.23313896294223477	DESIGN
// this is done here 'cos we might only know the type here (ugly!) // TODO: improve this a lot:	DESIGN	0.9996723087726	DESIGN	3.276912273999693E-4	WITHOUT_CLASSIFICATION
// todo : would love to have this work on a notification basis //    where the successful binding of an entity/subclass would //    emit a notification which the extendsQueue entries could //    react to...	DESIGN	0.9998110584004344	WITHOUT_CLASSIFICATION	1.8894159956563364E-4	DESIGN
// TODO : not sure the best way to handle this. // The non-performant way :	DESIGN	0.8965373098245629	DESIGN	0.10346269017543716	WITHOUT_CLASSIFICATION
// would be better to use the element-type to determine // whether the old and the new are equal here; the problem being // we do not necessarily have access to the element type in all // cases	DESIGN	0.7826414981355492	WITHOUT_CLASSIFICATION	0.2173585018644508	DESIGN
// This next bit is to allow for both unsaved-value="negative" // and for "older" behavior where version number did not get // seeded if it was already set in the object // TODO: shift it into unsaved-value strategy	DESIGN	0.9969608798565529	DESIGN	0.0030391201434471953	WITHOUT_CLASSIFICATION
// merges don't cascade to uninitialized collections //	DESIGN	0.999350279825573	WITHOUT_CLASSIFICATION	6.497201744270536E-4	DESIGN
// TODO: an alternative is to check if the owner has changed; if it hasn't then // return collection.getOwner()	DESIGN	0.9793894896950632	WITHOUT_CLASSIFICATION	0.02061051030493676	DESIGN
//it is possible that the tree-walking in OuterJoinLoader can get to //an association defined by a subclass, in which case the property-ref //might refer to a property defined on a subclass of the current class //in this case, the table name is not known - this temporary solution  //assumes that the property-ref refers to a property of the subclass //table that the association belongs to (a reasonable guess) //TODO: fix this, add: OuterJoinLoadable.getSubclassPropertyTableName(String propertyName)	DESIGN	0.9999985943142543	DESIGN	1.405685745738773E-6	WITHOUT_CLASSIFICATION
// this only works because collection entries are kept in a sequenced // map by persistence context (maybe we should do like entities and // keep a separate sequences set...) //TODO: calling entrySet on an IdentityMap is SLOW!!	DESIGN	0.7621175486119538	DESIGN	0.23788245138804617	WITHOUT_CLASSIFICATION
// important, to account for newly saved entities in query // todo : some kind of check for new status...	DESIGN	0.9990751531555114	WITHOUT_CLASSIFICATION	9.248468444884784E-4	DESIGN
// brand new collection //TODO: or an array!! we can't lock objects with arrays now??	DESIGN	0.8159581411352647	WITHOUT_CLASSIFICATION	0.18404185886473537	DESIGN
//TODO: if object was an uninitialized proxy, this is inefficient, //      resulting in two SQL selects	DESIGN	0.995430745354993	WITHOUT_CLASSIFICATION	0.004569254645007001	DESIGN
//before cascade! //TODO: should this be Session.instantiate(Persister, ...)?	DESIGN	0.8322572506297977	DESIGN	0.16774274937020223	WITHOUT_CLASSIFICATION
// TODO : absolutely no usages of this constructor form; can it go away?	DESIGN	0.7673963908126483	WITHOUT_CLASSIFICATION	0.2326036091873516	DESIGN
// todo : need to find a clean way to handle the "event source" role // a seperate classs responsible for generating/dispatching events just duplicates most of the Session methods... // passing around seperate reto interceptor, factory, actionQueue, and persistentContext is not manageable...	DESIGN	0.8561629916730609	DESIGN	0.14383700832693916	WITHOUT_CLASSIFICATION
// todo : remove	DESIGN	0.9988638615391181	WITHOUT_CLASSIFICATION	0.0011361384608818172	DESIGN
//aliasRefNode.resolve( false, false, aliasRefNode.getText() ); //TODO: is it kosher to do it here? //TODO: is it kosher to do it here?	DESIGN	0.5427528234401149	WITHOUT_CLASSIFICATION	0.4572471765598852	DESIGN
// No explicit select expression; render the id and properties // projection lists for every persister in the from clause into // a single 'token node'. //TODO: the only reason we need this stuff now is collection filters, //      we should get rid of derived select clause completely!	DESIGN	0.8626308395847815	DESIGN	0.13736916041521846	WITHOUT_CLASSIFICATION
// TODO : an optimization here would be to consider cascade deletes and not gen those delete statements; //      the difficulty is the ordering of the tables here vs the cascade attributes on the persisters -> //          the table info gotten here should really be self-contained (i.e., a class representation //          defining all the needed attributes), then we could then get an array of those	DESIGN	0.9955042861288809	DESIGN	0.004495713871119174	WITHOUT_CLASSIFICATION
// TODO: get SQL rendering out of here, create an AST for the join expressions. // Use the SQL generator grammar to generate the SQL text for the index expression.	DESIGN	0.9883451046818558	WITHOUT_CLASSIFICATION	0.011654895318144174	DESIGN
// TODO : this really needs to be delayed unitl after we definitively know all node types // where this is currently a problem is parameters for which where we cannot unequivocally // resolve an expected type	DESIGN	0.9011330176415437	DESIGN	0.09886698235845634	WITHOUT_CLASSIFICATION
// TODO: Figure out a better way to get the FROM elements in a proper tree structure. // If this is not the destination of a many-to-many, add it as a child of the origin.	DESIGN	0.9974333634794215	DESIGN	0.002566636520578578	WITHOUT_CLASSIFICATION
// work around that crazy issue where the tree contains // "empty" FromElements (no text); afaict, this is caused // by FromElementFactory.createCollectionJoin()	DESIGN	0.98937508604511	WITHOUT_CLASSIFICATION	0.010624913954890007	DESIGN
//TODO: this class does too many things! we need a different //kind of path expression parser for each of the diffferent //ways in which path expressions can occur	DESIGN	0.9770298938657982	DESIGN	0.022970106134201834	WITHOUT_CLASSIFICATION
//real hacky... // used to count the nesting of parentheses	DESIGN	0.9787032768899013	WITHOUT_CLASSIFICATION	0.021296723110098663	DESIGN
// TODO : would be really nice to cache the spec on the query-def so as to not have to re-calc the hash; // currently not doable though because of the resultset-ref stuff...	DESIGN	0.8622085545586995	WITHOUT_CLASSIFICATION	0.13779144544130045	DESIGN
//for arrays, we should end the collection load before resolving //the entities, since the actual array instances are not instantiated //during loading //TODO: or we could do this polymorphically, and have two //      different operations implemented differently for arrays	DESIGN	0.8197447272208652	WITHOUT_CLASSIFICATION	0.1802552727791348	DESIGN
// polymorphism not really handled completely correctly, // perhaps...well, actually its ok, assuming that the // entity name used in the lookup is the same as the // the one used here, which it will be	DESIGN	0.8370855390260519	WITHOUT_CLASSIFICATION	0.16291446097394804	DESIGN
// TODO: should "record" how many properties we have reffered to - and if we  //       don't get'em'all we throw an exception! Way better than trial and error ;)	DESIGN	0.9985106397718035	DESIGN	0.001489360228196513	WITHOUT_CLASSIFICATION
// VERY IMPORTANT!!!! - This class needs to be free of any static references // to any CGLIB or Javassist classes.  Otherwise, users will always need both // on their classpaths no matter which (if either) they use. // // Another option here would be to remove the Hibernate.isPropertyInitialized() // method and have the users go through the SessionFactory to get this information.	DESIGN	0.839309654754615	DESIGN	0.16069034524538503	WITHOUT_CLASSIFICATION
// TODO: is it really neceassry to provide Configuration to CollectionPersisters ? Should it not be enough with associated class ? // or why does EntityPersister's not get access to configuration ? // // The only reason I could see that Configuration gets passed to collection persisters // is so that they can look up the dom4j node name of the entity element in case // no explicit node name was applied at the collection element level.  Are you kidding me? // Trivial to fix then.  Just store and expose the node name on the entity persister // (which the collection persister looks up anyway via other means...).	DESIGN	0.9999998398449399	DESIGN	1.601550601642662E-7	WITHOUT_CLASSIFICATION
//for backward compatibility, allow a set with no not-null  //element columns, using all columns in the row locater SQL //TODO: create an implicit not null constraint on all cols?	DESIGN	0.975920814279172	WITHOUT_CLASSIFICATION	0.024079185720827966	DESIGN
//SPACES //TODO: i'm not sure, but perhaps we should exclude //      abstract denormalized tables?	DESIGN	0.9918829747007799	DESIGN	0.008117025299220015	WITHOUT_CLASSIFICATION
//workaround, for backward compatibility of sets with no //not-null columns, assume all columns are used in the //row locator SQL	DESIGN	0.9990236773965381	WITHOUT_CLASSIFICATION	9.763226034619003E-4	DESIGN
//note that this method could easily be moved up to BasicEntityPersister, //if we ever needed to reuse it from other subclasses	DESIGN	0.5051556250651652	DESIGN	0.49484437493483496	WITHOUT_CLASSIFICATION
//index += getPropertyColumnSpan( i ); //TODO:  this is kinda slow...	DESIGN	0.6481539085158287	WITHOUT_CLASSIFICATION	0.35184609148417123	DESIGN
//TODO: need some caching scheme? really comes down to decision  //      regarding amount of state (if any) kept on PropertyAccessors	DESIGN	0.8162254977198024	WITHOUT_CLASSIFICATION	0.18377450228019773	DESIGN
// TODO: here is why we need to make bytecode provider global :( // TODO : again, fix this after HHH-1907 is complete	DESIGN	0.9999999956723195	DESIGN	4.327680579346803E-9	WITHOUT_CLASSIFICATION
//TODO: Yuck! This is not quite good enough, it's a quick //hack around the problem of having a to-one association //that refers to an embedded component:	DESIGN	0.9988227659205682	DESIGN	0.0011772340794319054	WITHOUT_CLASSIFICATION
// for DOM4J "collections" only // TODO: it would be better if this was done at the higher level by Printer	DESIGN	0.8815233406961241	DESIGN	0.11847665930387581	WITHOUT_CLASSIFICATION
// would be great to move all this below here into another method that could also be used // from the new scrolling stuff. // // Would need to change the way the max-row stuff is handled (i.e. behind an interface) so // that I could do the control breaking at the means to know when to stop	DESIGN	0.9999994163639889	DESIGN	5.83636011012142E-7	WITHOUT_CLASSIFICATION
//TODO: can we *always* use the "null property" approach for everything?	DESIGN	0.5211150342259565	DESIGN	0.4788849657740435	WITHOUT_CLASSIFICATION
//polymorphism comment above	DESIGN	0.9998435699622645	WITHOUT_CLASSIFICATION	1.5643003773546836E-4	DESIGN
// some messy, complex stuff here, since createCriteria() can take an // aliased path, or a path rooted at the creating criteria instance	DESIGN	0.9999821304997211	WITHOUT_CLASSIFICATION	1.7869500278944394E-5	DESIGN
//TODO: really bad, evil hack to fix!!!	DESIGN	0.9999737331088597	DESIGN	2.6266891140363476E-5	WITHOUT_CLASSIFICATION
// ugly hack for cases like "elements(foo.bar.collection)" // (multi-part path expression ending in elements or indices)	DESIGN	0.9924256919473812	DESIGN	0.007574308052618903	WITHOUT_CLASSIFICATION
// try block is a hack around fact that currently tuplizers are not // given the opportunity to resolve a subclass entity name.  this // allows the (we assume custom) interceptor the ability to // influence this decision if we were not able to based on the // given entityName	DESIGN	0.9997226633235216	DESIGN	2.773366764784977E-4	WITHOUT_CLASSIFICATION
/////////////////////////////////////////////////////////////////////// // HACK ALERT !!!!!!!!!!!!!!!!!!!!!!!!!!!! // Attempt to work around "ghost" ImpliedFromElements that occasionally // show up between the actual things being joined.  This consistently // occurs from index nodes (at least against many-to-many).  Not sure // if there are other conditions // // Essentially, look-ahead to the next FromElement that actually // writes something to the SQL	DESIGN	0.9288276227742215	DESIGN	0.0711723772257786	WITHOUT_CLASSIFICATION
//init the table here instead of earlier, so that we can get a quoted table name //TODO: would it be better to simply pass the qualified table name, instead of //      splitting it up into schema/catalog/table names	DESIGN	0.6517378698633421	DESIGN	0.34826213013665785	WITHOUT_CLASSIFICATION
// TODO : would be great to have a Mapping#hasNonIdentifierPropertyNamedId method // I don't believe that Mapping#getReferencedPropertyType accounts for the identifier property; so // if it returns for a property named 'id', then we should have a non-id field named id	DESIGN	0.9657847634481164	DESIGN	0.03421523655188367	WITHOUT_CLASSIFICATION
//TODO: is this really necessary????	DESIGN	0.7517624191444241	WITHOUT_CLASSIFICATION	0.24823758085557582	DESIGN
//TODO: ideally we need the construction of PropertyAccessor to take the following: //      1) EntityMode //      2) EntityMode-specific data (i.e., the classname for pojo entities) //      3) Property-specific data based on the EntityMode (i.e., property-name or dom4j-node-name) // The easiest way, with the introduction of the new runtime-metamodel classes, would be the // the following predicates: //      1) PropertyAccessorFactory.getPropertyAccessor() takes references to both a //          org.hibernate.metadata.EntityModeMetadata and org.hibernate.metadata.Property //      2) What is now termed a "PropertyAccessor" stores any values needed from those two //          pieces of information //      3) Code can then simply call PropertyAccess.getGetter() with no parameters; likewise with //          PropertyAccessor.getSetter()	DESIGN	0.6299932277712398	WITHOUT_CLASSIFICATION	0.3700067722287603	DESIGN
//TODO: this is temporary in that the end result will probably not take a Property reference per-se.	DESIGN	0.9522328457252743	DESIGN	0.04776715427472569	WITHOUT_CLASSIFICATION
// todo : this eventually needs to be removed	DESIGN	0.9904413738293202	WITHOUT_CLASSIFICATION	0.00955862617067992	DESIGN
//TODO: make this a bit nicer	DESIGN	0.9126274899663869	DESIGN	0.08737251003361311	WITHOUT_CLASSIFICATION
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.9411648835773666	WITHOUT_CLASSIFICATION	0.05883511642263347	DESIGN
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.9411648835773666	WITHOUT_CLASSIFICATION	0.05883511642263347	DESIGN
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.9411648835773666	WITHOUT_CLASSIFICATION	0.05883511642263347	DESIGN
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.9411648835773666	WITHOUT_CLASSIFICATION	0.05883511642263347	DESIGN
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.9411648835773666	WITHOUT_CLASSIFICATION	0.05883511642263347	DESIGN
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.9411648835773666	WITHOUT_CLASSIFICATION	0.05883511642263347	DESIGN
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.9411648835773666	WITHOUT_CLASSIFICATION	0.05883511642263347	DESIGN
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.9411648835773666	WITHOUT_CLASSIFICATION	0.05883511642263347	DESIGN
/**     * FIXME Per the RegionFactory class Javadoc, this constructor version     * should not be necessary.     *      * @param props The configuration properties     */	DESIGN	0.8607109359767886	DESIGN	0.13928906402321128	WITHOUT_CLASSIFICATION
/**     * FIXME Per the RegionFactory class Javadoc, this constructor version     * should not be necessary.     *      * @param props The configuration properties     */	DESIGN	0.8607109359767886	DESIGN	0.13928906402321128	WITHOUT_CLASSIFICATION
/**     * FIXME Per the RegionFactory class Javadoc, this constructor version     * should not be necessary.     *      * @param props The configuration properties     */	DESIGN	0.8607109359767886	DESIGN	0.13928906402321128	WITHOUT_CLASSIFICATION
// TODO : probably better to calculate these and pass them in, as it'll be more performant	DESIGN	0.9966800534845904	DESIGN	0.003319946515409514	WITHOUT_CLASSIFICATION
