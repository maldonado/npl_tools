//test out the optimizer:	WITHOUT_CLASSIFICATION	0.9995988892120188	WITHOUT_CLASSIFICATION	4.0111078798128026E-4	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.9997612566512477	WITHOUT_CLASSIFICATION	2.3874334875219311E-4	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.9997612566512477	WITHOUT_CLASSIFICATION	2.3874334875219311E-4	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.9997612566512477	WITHOUT_CLASSIFICATION	2.3874334875219311E-4	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.9997612566512477	WITHOUT_CLASSIFICATION	2.3874334875219311E-4	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.9997612566512477	WITHOUT_CLASSIFICATION	2.3874334875219311E-4	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.9997612566512477	WITHOUT_CLASSIFICATION	2.3874334875219311E-4	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.9997612566512477	WITHOUT_CLASSIFICATION	2.3874334875219311E-4	DESIGN
// return	WITHOUT_CLASSIFICATION	0.9997888611204329	WITHOUT_CLASSIFICATION	2.111388795672247E-4	DESIGN
// return	WITHOUT_CLASSIFICATION	0.9997888611204329	WITHOUT_CLASSIFICATION	2.111388795672247E-4	DESIGN
/* | this | bean | args | raw bean | */	WITHOUT_CLASSIFICATION	0.9991385209803219	WITHOUT_CLASSIFICATION	8.614790196781861E-4	DESIGN
// invokeinterface	WITHOUT_CLASSIFICATION	0.9997037504389661	WITHOUT_CLASSIFICATION	2.962495610339991E-4	DESIGN
// astore 4 // store the raw bean	WITHOUT_CLASSIFICATION	0.9995182806504462	WITHOUT_CLASSIFICATION	4.817193495538582E-4	DESIGN
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999984974309734	WITHOUT_CLASSIFICATION	1.5025690265742482E-6	DESIGN
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999984974309734	WITHOUT_CLASSIFICATION	1.5025690265742482E-6	DESIGN
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.9999824529088547	WITHOUT_CLASSIFICATION	1.754709114534855E-5	DESIGN
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.999321546054058	WITHOUT_CLASSIFICATION	6.784539459421401E-4	DESIGN
// putfield // new value of the field	WITHOUT_CLASSIFICATION	0.9997796264973761	WITHOUT_CLASSIFICATION	2.20373502623833E-4	DESIGN
// reference type	WITHOUT_CLASSIFICATION	0.9992479000829798	WITHOUT_CLASSIFICATION	7.520999170202138E-4	DESIGN
// double	WITHOUT_CLASSIFICATION	0.9999582939454551	WITHOUT_CLASSIFICATION	4.170605454496036E-5	DESIGN
// double	WITHOUT_CLASSIFICATION	0.9999582939454551	WITHOUT_CLASSIFICATION	4.170605454496036E-5	DESIGN
// long	WITHOUT_CLASSIFICATION	0.9996893725133198	WITHOUT_CLASSIFICATION	3.10627486680254E-4	DESIGN
// just decrement the lock, don't recache // (we don't know which transaction won)	WITHOUT_CLASSIFICATION	0.9999681446012197	WITHOUT_CLASSIFICATION	3.1855398780265285E-5	DESIGN
// decode row selection...	WITHOUT_CLASSIFICATION	0.9999023010765057	WITHOUT_CLASSIFICATION	9.76989234942743E-5	DESIGN
//disassembled state gets put in a new array (we write to cache by value!)	WITHOUT_CLASSIFICATION	0.9971770931985132	WITHOUT_CLASSIFICATION	0.0028229068014867967	DESIGN
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9998926662380412	WITHOUT_CLASSIFICATION	1.0733376195878431E-4	DESIGN
// CHECK	WITHOUT_CLASSIFICATION	0.9997612566512477	WITHOUT_CLASSIFICATION	2.3874334875219311E-4	DESIGN
// ROW ID	WITHOUT_CLASSIFICATION	0.9996471060814281	WITHOUT_CLASSIFICATION	3.5289391857183666E-4	DESIGN
// COMPOSITE-ID	WITHOUT_CLASSIFICATION	0.9997037504389661	WITHOUT_CLASSIFICATION	2.962495610339991E-4	DESIGN
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9997037504389661	WITHOUT_CLASSIFICATION	2.962495610339991E-4	DESIGN
/*	WITHOUT_CLASSIFICATION	0.9973303510783034	WITHOUT_CLASSIFICATION	0.0026696489216966697	DESIGN
// DYNAMIC INSERT	WITHOUT_CLASSIFICATION	0.9997037504389661	WITHOUT_CLASSIFICATION	2.962495610339991E-4	DESIGN
// PERSISTER	WITHOUT_CLASSIFICATION	0.9997037504389661	WITHOUT_CLASSIFICATION	2.962495610339991E-4	DESIGN
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9996276743758655	WITHOUT_CLASSIFICATION	3.723256241345656E-4	DESIGN
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9997037504389661	WITHOUT_CLASSIFICATION	2.962495610339991E-4	DESIGN
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9997037504389661	WITHOUT_CLASSIFICATION	2.962495610339991E-4	DESIGN
// generated properties can *never* be insertable...	WITHOUT_CLASSIFICATION	0.9993773305102055	WITHOUT_CLASSIFICATION	6.226694897945562E-4	DESIGN
// TABLE	WITHOUT_CLASSIFICATION	0.9997680170147999	WITHOUT_CLASSIFICATION	2.319829852002352E-4	DESIGN
//by default, natural-ids are "immutable" (constant)	WITHOUT_CLASSIFICATION	0.9963389756648569	WITHOUT_CLASSIFICATION	0.003661024335143189	DESIGN
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9988432922125127	WITHOUT_CLASSIFICATION	0.001156707787487336	DESIGN
// we found some extends attributes referencing entities which were // not already processed.  here we need to locate all entity-names // and class-names contained in this document itself, making sure // that these get removed from the extendz list such that only // extends names which require us to delay processing (i.e. // external to this document and not yet processed) are contained // in the returned result	WITHOUT_CLASSIFICATION	0.7376515123601657	WITHOUT_CLASSIFICATION	0.2623484876398343	DESIGN
/**	WITHOUT_CLASSIFICATION	0.5935609611320364	DESIGN	0.4064390388679638	WITHOUT_CLASSIFICATION
//	WITHOUT_CLASSIFICATION	0.9997612566512477	WITHOUT_CLASSIFICATION	2.3874334875219311E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9997612566512477	WITHOUT_CLASSIFICATION	2.3874334875219311E-4	DESIGN
/**	WITHOUT_CLASSIFICATION	0.5935609611320364	DESIGN	0.4064390388679638	WITHOUT_CLASSIFICATION
//	WITHOUT_CLASSIFICATION	0.9997612566512477	WITHOUT_CLASSIFICATION	2.3874334875219311E-4	DESIGN
// If close() is called, guarantee unbind()	WITHOUT_CLASSIFICATION	0.9996500865705561	WITHOUT_CLASSIFICATION	3.499134294439042E-4	DESIGN
// if a ThreadLocalSessionContext-bound session happens to get // serialized, to be completely correct, we need to make sure // that unbinding of that session occurs.	WITHOUT_CLASSIFICATION	0.9213815480813241	WITHOUT_CLASSIFICATION	0.07861845191867585	DESIGN
// on the inverse, it makes sense that if a ThreadLocalSessionContext- // bound session then gets deserialized to go ahead and re-bind it to // the ThreadLocalSessionContext session map.	WITHOUT_CLASSIFICATION	0.9983221459433416	WITHOUT_CLASSIFICATION	0.0016778540566584176	DESIGN
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.999023153937095	WITHOUT_CLASSIFICATION	9.768460629050988E-4	DESIGN
// 60 second lock timeout	WITHOUT_CLASSIFICATION	0.9999091371477538	WITHOUT_CLASSIFICATION	9.086285224633245E-5	DESIGN
// OptimisticCache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993445683858901	WITHOUT_CLASSIFICATION	6.554316141098484E-4	DESIGN
// Cache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993445683858901	WITHOUT_CLASSIFICATION	6.554316141098484E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9997612566512477	WITHOUT_CLASSIFICATION	2.3874334875219311E-4	DESIGN
// do the put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9993923590336133	WITHOUT_CLASSIFICATION	6.07640966386576E-4	DESIGN
//ignore!	WITHOUT_CLASSIFICATION	0.9990619244547406	WITHOUT_CLASSIFICATION	9.380755452593856E-4	DESIGN
// tree cache in optimistic mode seems to have as very difficult // time with remove calls on non-existent nodes (NPEs)...	WITHOUT_CLASSIFICATION	0.9867876170256301	WITHOUT_CLASSIFICATION	0.013212382974369892	DESIGN
//60 seconds	WITHOUT_CLASSIFICATION	0.9988384658910368	WITHOUT_CLASSIFICATION	0.001161534108963241	DESIGN
//ignore!	WITHOUT_CLASSIFICATION	0.9990619244547406	WITHOUT_CLASSIFICATION	9.380755452593856E-4	DESIGN
//60 seconds	WITHOUT_CLASSIFICATION	0.9988384658910368	WITHOUT_CLASSIFICATION	0.001161534108963241	DESIGN
//do the failfast put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9992086773851072	WITHOUT_CLASSIFICATION	7.913226148928079E-4	DESIGN
// NOTE : evict() operates locally only (i.e., does not propogate // to any other nodes in the potential cluster).  This is // exactly what is needed when we destroy() here; destroy() is used // as part of the process of shutting down a SessionFactory; thus // these removals should not be propogated	WITHOUT_CLASSIFICATION	0.7718785311175522	WITHOUT_CLASSIFICATION	0.22812146888244766	DESIGN
//    protected RegionRootListener listener;	WITHOUT_CLASSIFICATION	0.9973120100646948	WITHOUT_CLASSIFICATION	0.00268798993530508	DESIGN
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9996795503776574	WITHOUT_CLASSIFICATION	3.204496223425334E-4	DESIGN
// If we've been blocking for the mutex, perhaps another // thread has already reestablished the root. // In case the node was reestablised via replication, confirm it's  // marked "resident" (a status which doesn't replicate)	WITHOUT_CLASSIFICATION	0.9999880696835226	WITHOUT_CLASSIFICATION	1.1930316477447111E-5	DESIGN
// For pessimistic locking, we just want to toss out our ref // to any old invalid root node and get the latest (may be null)            	WITHOUT_CLASSIFICATION	0.9990973195616104	WITHOUT_CLASSIFICATION	9.02680438389648E-4	DESIGN
// The rest only matters for optimistic locking, where we // need to establish the proper data version on the region root	WITHOUT_CLASSIFICATION	0.996726878230975	WITHOUT_CLASSIFICATION	0.0032731217690249114	DESIGN
// Don't hold a transactional lock for this 	WITHOUT_CLASSIFICATION	0.9613907711519588	WITHOUT_CLASSIFICATION	0.03860922884804126	DESIGN
// Make sure the root node for the region exists and  // has a DataVersion that never complains	WITHOUT_CLASSIFICATION	0.9998117000104532	WITHOUT_CLASSIFICATION	1.8829998954696329E-4	DESIGN
// Never evict this node	WITHOUT_CLASSIFICATION	0.9996411652758953	WITHOUT_CLASSIFICATION	3.5883472410468673E-4	DESIGN
// Fix up the resident flag	WITHOUT_CLASSIFICATION	0.9999655469515393	WITHOUT_CLASSIFICATION	3.4453048460716556E-5	DESIGN
// 60 seconds	WITHOUT_CLASSIFICATION	0.9997043364028388	WITHOUT_CLASSIFICATION	2.956635971611692E-4	DESIGN
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9981864212454352	WITHOUT_CLASSIFICATION	0.0018135787545647867	DESIGN
// no-op. We don't own the cache so we shouldn't stop it.	WITHOUT_CLASSIFICATION	0.9986023543765233	WITHOUT_CLASSIFICATION	0.0013976456234767092	DESIGN
// This should only be possible if the caches are constructor injected 	WITHOUT_CLASSIFICATION	0.9980268593162575	WITHOUT_CLASSIFICATION	0.001973140683742562	DESIGN
// We only build caches if *none* were passed in.  Passing in // caches counts as a clear statement of exactly what is wanted	WITHOUT_CLASSIFICATION	0.9998308674099117	WITHOUT_CLASSIFICATION	1.6913259008834272E-4	DESIGN
// Set up the cache factory	WITHOUT_CLASSIFICATION	0.9998090530356579	WITHOUT_CLASSIFICATION	1.9094696434208763E-4	DESIGN
// See if the user configured a multiplexer stack	WITHOUT_CLASSIFICATION	0.9996902866571921	WITHOUT_CLASSIFICATION	3.0971334280791534E-4	DESIGN
// Default to collections sharing entity cache if there is one	WITHOUT_CLASSIFICATION	0.9996914623131593	WITHOUT_CLASSIFICATION	3.0853768684078943E-4	DESIGN
// Default to sharing the entity cache if there is one	WITHOUT_CLASSIFICATION	0.9998845046040604	WITHOUT_CLASSIFICATION	1.1549539593952823E-4	DESIGN
// For Timestamps, we default to a separate config	WITHOUT_CLASSIFICATION	0.9889487650681922	WITHOUT_CLASSIFICATION	0.011051234931807858	DESIGN
// We can't change the TM on a running cache; just check // if the cache has no TM and we're OK with that	WITHOUT_CLASSIFICATION	0.999983410227098	WITHOUT_CLASSIFICATION	1.6589772902010686E-5	DESIGN
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9994866579764846	WITHOUT_CLASSIFICATION	5.133420235153667E-4	DESIGN
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9998593701478642	WITHOUT_CLASSIFICATION	1.4062985213577307E-4	DESIGN
// This method should be implemented assuming it's valid to  // do start/stop/start -- leave state appropriate for another start	WITHOUT_CLASSIFICATION	0.9411602884657766	WITHOUT_CLASSIFICATION	0.058839711534223425	DESIGN
// Make sure we don't re-release the same cache	WITHOUT_CLASSIFICATION	0.9988907071190073	WITHOUT_CLASSIFICATION	0.001109292880992691	DESIGN
// We use a different delegate than the non-optimistic superclass default	WITHOUT_CLASSIFICATION	0.9988492651717651	WITHOUT_CLASSIFICATION	0.0011507348282348523	DESIGN
// Following methods we don't delegate since they have so little logic // it's clearer to just implement them here	WITHOUT_CLASSIFICATION	0.9759374454218998	WITHOUT_CLASSIFICATION	0.024062554578100193	DESIGN
// If JBC is using INVALIDATION, we don't want to propagate changes. // We use the Timestamps cache to manage invalidation	WITHOUT_CLASSIFICATION	0.998953746944737	WITHOUT_CLASSIFICATION	0.0010462530552629837	DESIGN
// We don't want to waste effort setting an option if JBC is // already in LOCAL mode. If JBC is REPL_(A)SYNC then check // if they passed an config option to disable query replication	WITHOUT_CLASSIFICATION	0.9997735179759017	WITHOUT_CLASSIFICATION	2.2648202409827838E-4	DESIGN
// Don't hold the JBC node lock throughout the tx, as that // prevents updates // Add a zero (or low) timeout option so we don't block // waiting for tx's that did a put to commit	WITHOUT_CLASSIFICATION	0.9999725009434146	WITHOUT_CLASSIFICATION	2.7499056585317743E-5	DESIGN
// Double check the distributed cache	WITHOUT_CLASSIFICATION	0.9999785990097769	WITHOUT_CLASSIFICATION	2.1400990223075715E-5	DESIGN
// Get an exclusive right to update JBC for this key from this node.	WITHOUT_CLASSIFICATION	0.9966882033934108	WITHOUT_CLASSIFICATION	0.0033117966065892325	DESIGN
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9979285266275052	WITHOUT_CLASSIFICATION	0.002071473372494851	DESIGN
// Initial load from JBC	WITHOUT_CLASSIFICATION	0.9998696785694705	WITHOUT_CLASSIFICATION	1.3032143052950934E-4	DESIGN
// See if we had a 2nd invalidation from the same initial // preinvalidation timestamp. If so, only increment // if the new current value is an increase	WITHOUT_CLASSIFICATION	0.9998795120867578	WITHOUT_CLASSIFICATION	1.2048791324215245E-4	DESIGN
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9979285266275052	WITHOUT_CLASSIFICATION	0.002071473372494851	DESIGN
// If the workspace node has null as well, OK; if not we've // been modified in a non-comparable manner, which we have to // treat as us being newer	WITHOUT_CLASSIFICATION	0.9999633053786864	WITHOUT_CLASSIFICATION	3.6694621313525475E-5	DESIGN
// The standard comparator types are not Serializable but are singletons	WITHOUT_CLASSIFICATION	0.9967202348625189	WITHOUT_CLASSIFICATION	0.003279765137481081	DESIGN
// ignore!	WITHOUT_CLASSIFICATION	0.9997612566512477	WITHOUT_CLASSIFICATION	2.3874334875219311E-4	DESIGN
// ignore it	WITHOUT_CLASSIFICATION	0.9995323051965225	WITHOUT_CLASSIFICATION	4.6769480347750013E-4	DESIGN
// construct the cache	WITHOUT_CLASSIFICATION	0.9999502649959492	WITHOUT_CLASSIFICATION	4.9735004050861335E-5	DESIGN
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9970787435526673	WITHOUT_CLASSIFICATION	0.0029212564473327335	DESIGN
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9970787435526673	WITHOUT_CLASSIFICATION	0.0029212564473327335	DESIGN
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9988384658910368	WITHOUT_CLASSIFICATION	0.001161534108963241	DESIGN
//swaldman 2006-08-28: define c3p0-style configuration parameters for initialPoolSize, which //                     hibernate sensibly lets default to minPoolSize, but we'll let users //                     override it with the c3p0-style property if they want.	WITHOUT_CLASSIFICATION	0.9868578081867955	WITHOUT_CLASSIFICATION	0.013142191813204682	DESIGN
/*DataSource unpooled = DataSources.unpooledDataSource(	WITHOUT_CLASSIFICATION	0.9995619846384487	WITHOUT_CLASSIFICATION	4.380153615512357E-4	DESIGN
// TRUE if the pool is borrowed from the outside, FALSE if we used to create it	WITHOUT_CLASSIFICATION	0.9976312863807264	WITHOUT_CLASSIFICATION	0.002368713619273598	DESIGN
// get a connection from the pool (thru DriverManager, cfr. Proxool doc)	WITHOUT_CLASSIFICATION	0.9986323724653936	WITHOUT_CLASSIFICATION	0.001367627534606445	DESIGN
// set the Transaction Isolation if defined	WITHOUT_CLASSIFICATION	0.9997747218889292	WITHOUT_CLASSIFICATION	2.2527811107070144E-4	DESIGN
// toggle autoCommit to false if set	WITHOUT_CLASSIFICATION	0.9980068339546255	WITHOUT_CLASSIFICATION	0.0019931660453745086	DESIGN
// return the connection	WITHOUT_CLASSIFICATION	0.9999481052952851	WITHOUT_CLASSIFICATION	5.189470471497938E-5	DESIGN
// Get the configurator files (if available)	WITHOUT_CLASSIFICATION	0.9999294089239646	WITHOUT_CLASSIFICATION	7.059107603535887E-5	DESIGN
// Default the Proxool alias setting	WITHOUT_CLASSIFICATION	0.9999229415946493	WITHOUT_CLASSIFICATION	7.705840535072482E-5	DESIGN
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9989531786806695	WITHOUT_CLASSIFICATION	0.001046821319330541	DESIGN
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9989531786806695	WITHOUT_CLASSIFICATION	0.001046821319330541	DESIGN
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9991366915724279	WITHOUT_CLASSIFICATION	8.633084275720451E-4	DESIGN
// Set the existing pool flag to true	WITHOUT_CLASSIFICATION	0.9985879351008297	WITHOUT_CLASSIFICATION	0.0014120648991703896	DESIGN
// Configured using the JAXP Configurator	WITHOUT_CLASSIFICATION	0.9996972487693038	WITHOUT_CLASSIFICATION	3.0275123069623043E-4	DESIGN
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9989531786806695	WITHOUT_CLASSIFICATION	0.001046821319330541	DESIGN
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9991366915724279	WITHOUT_CLASSIFICATION	8.633084275720451E-4	DESIGN
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9991366915724279	WITHOUT_CLASSIFICATION	8.633084275720451E-4	DESIGN
// Configured using the Properties File Configurator	WITHOUT_CLASSIFICATION	0.9991715161683338	WITHOUT_CLASSIFICATION	8.284838316662725E-4	DESIGN
// Remember Isolation level	WITHOUT_CLASSIFICATION	0.9998240259698841	WITHOUT_CLASSIFICATION	1.7597403011586197E-4	DESIGN
// If the provider was leeching off an existing pool don't close it	WITHOUT_CLASSIFICATION	0.9999896218446934	WITHOUT_CLASSIFICATION	1.037815530653417E-5	DESIGN
// We have created the pool ourselves, so shut it down	WITHOUT_CLASSIFICATION	0.9999348001596869	WITHOUT_CLASSIFICATION	6.519984031310181E-5	DESIGN
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.9991479468876305	WITHOUT_CLASSIFICATION	8.520531123693712E-4	DESIGN
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.9991479468876305	WITHOUT_CLASSIFICATION	8.520531123693712E-4	DESIGN
//always overwrite nonversioned data	WITHOUT_CLASSIFICATION	0.999071391465373	WITHOUT_CLASSIFICATION	9.286085346269419E-4	DESIGN
//public Currency getCurrency(int col) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9977825165351903	WITHOUT_CLASSIFICATION	0.002217483464809637	DESIGN
// default is POJO	WITHOUT_CLASSIFICATION	0.9995987956117104	WITHOUT_CLASSIFICATION	4.0120438828955676E-4	DESIGN
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.999562842277559	WITHOUT_CLASSIFICATION	4.3715772244102424E-4	DESIGN
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.999562842277559	WITHOUT_CLASSIFICATION	4.3715772244102424E-4	DESIGN
//private CacheEntry cacheEntry;	WITHOUT_CLASSIFICATION	0.9964373767057814	WITHOUT_CLASSIFICATION	0.0035626232942187375	DESIGN
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9926080961331839	WITHOUT_CLASSIFICATION	0.007391903866816104	DESIGN
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9972727496030966	WITHOUT_CLASSIFICATION	0.0027272503969034026	DESIGN
// get the updated snapshot of the entity state by cloning current state; // it is safe to copy in place, since by this time no-one else (should have) // has a reference  to the array	WITHOUT_CLASSIFICATION	0.9995423209010333	WITHOUT_CLASSIFICATION	4.576790989667086E-4	DESIGN
// this entity defines proeprty generation, so process those generated // values...	WITHOUT_CLASSIFICATION	0.9997147468476051	WITHOUT_CLASSIFICATION	2.8525315239486264E-4	DESIGN
// have the entity entry perform post-update processing, passing it the // update state and the new version (if one).	WITHOUT_CLASSIFICATION	0.9996888397076408	WITHOUT_CLASSIFICATION	3.1116029235922846E-4	DESIGN
/*!persister.isCacheInvalidationRequired()*/	WITHOUT_CLASSIFICATION	0.9968940233176451	WITHOUT_CLASSIFICATION	0.0031059766823548695	DESIGN
// need to look it up from the persistence-context	WITHOUT_CLASSIFICATION	0.9974243987003641	WITHOUT_CLASSIFICATION	0.002575601299635904	DESIGN
//sort first by role name	WITHOUT_CLASSIFICATION	0.9985034663236536	WITHOUT_CLASSIFICATION	0.0014965336763464302	DESIGN
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9972727496030966	WITHOUT_CLASSIFICATION	0.0027272503969034026	DESIGN
//then by fk	WITHOUT_CLASSIFICATION	0.9982050452760639	WITHOUT_CLASSIFICATION	0.0017949547239361657	DESIGN
// nothing to do	WITHOUT_CLASSIFICATION	0.9999336451319041	WITHOUT_CLASSIFICATION	6.635486809588671E-5	DESIGN
// nothing to do	WITHOUT_CLASSIFICATION	0.9999336451319041	WITHOUT_CLASSIFICATION	6.635486809588671E-5	DESIGN
// an existing collection that was either non-empty or uninitialized // is replaced by null or a different collection // (if the collection is uninitialized, hibernate has no way of // knowing if the collection is actually empty without querying the db)	WITHOUT_CLASSIFICATION	0.9540542051287442	WITHOUT_CLASSIFICATION	0.04594579487125586	DESIGN
// this method is called when a new non-null collection is persisted // or when an existing (non-null) collection is moved to a new owner	WITHOUT_CLASSIFICATION	0.9091958145011843	WITHOUT_CLASSIFICATION	0.09080418549881572	DESIGN
//	WITHOUT_CLASSIFICATION	0.9997612566512477	WITHOUT_CLASSIFICATION	2.3874334875219311E-4	DESIGN
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9304838152312327	WITHOUT_CLASSIFICATION	0.06951618476876732	DESIGN
//do nothing - we only need to notify the cache...	WITHOUT_CLASSIFICATION	0.998559998727935	WITHOUT_CLASSIFICATION	0.0014400012720650552	DESIGN
//sort first by entity name	WITHOUT_CLASSIFICATION	0.9987416615181857	WITHOUT_CLASSIFICATION	0.001258338481814252	DESIGN
//then by id	WITHOUT_CLASSIFICATION	0.9983095636747196	WITHOUT_CLASSIFICATION	0.0016904363252804129	DESIGN
// to be safe...	WITHOUT_CLASSIFICATION	0.9992842898763722	WITHOUT_CLASSIFICATION	7.15710123627851E-4	DESIGN
// no transformations took place, so handle it as we would a // non-instrumented class	WITHOUT_CLASSIFICATION	0.9995468321428191	WITHOUT_CLASSIFICATION	4.531678571808339E-4	DESIGN
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.999865561710151	WITHOUT_CLASSIFICATION	1.3443828984908407E-4	DESIGN
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.999865561710151	WITHOUT_CLASSIFICATION	1.3443828984908407E-4	DESIGN
// intentionally empty	WITHOUT_CLASSIFICATION	0.9997253054825898	WITHOUT_CLASSIFICATION	2.746945174101682E-4	DESIGN
//test out the optimizer:	WITHOUT_CLASSIFICATION	0.9995988892120188	WITHOUT_CLASSIFICATION	4.0111078798128026E-4	DESIGN
// set the name of bulk accessor.	WITHOUT_CLASSIFICATION	0.9996295487063728	WITHOUT_CLASSIFICATION	3.7045129362725467E-4	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.9997612566512477	WITHOUT_CLASSIFICATION	2.3874334875219311E-4	DESIGN
// invokespecial	WITHOUT_CLASSIFICATION	0.9997037504389661	WITHOUT_CLASSIFICATION	2.962495610339991E-4	DESIGN
// return	WITHOUT_CLASSIFICATION	0.9997888611204329	WITHOUT_CLASSIFICATION	2.111388795672247E-4	DESIGN
// aload_1 // load bean	WITHOUT_CLASSIFICATION	0.9999296667506721	WITHOUT_CLASSIFICATION	7.033324932788588E-5	DESIGN
// checkcast // cast bean	WITHOUT_CLASSIFICATION	0.9996663979869598	WITHOUT_CLASSIFICATION	3.336020130401732E-4	DESIGN
// astore_3 // store bean	WITHOUT_CLASSIFICATION	0.9998622913275313	WITHOUT_CLASSIFICATION	1.3770867246855938E-4	DESIGN
// aload_2 // args	WITHOUT_CLASSIFICATION	0.9994617001704789	WITHOUT_CLASSIFICATION	5.382998295212049E-4	DESIGN
// iconst_i // continue to aastore // growing stack is 1	WITHOUT_CLASSIFICATION	0.9987281437604367	WITHOUT_CLASSIFICATION	0.0012718562395632694	DESIGN
// new	WITHOUT_CLASSIFICATION	0.9997795999183807	WITHOUT_CLASSIFICATION	2.2040008161926884E-4	DESIGN
// dup	WITHOUT_CLASSIFICATION	0.9998248171660238	WITHOUT_CLASSIFICATION	1.7518283397625493E-4	DESIGN
// aload_3 // load the raw bean	WITHOUT_CLASSIFICATION	0.9998780874261232	WITHOUT_CLASSIFICATION	1.2191257387691517E-4	DESIGN
// invokeinterface	WITHOUT_CLASSIFICATION	0.9997037504389661	WITHOUT_CLASSIFICATION	2.962495610339991E-4	DESIGN
// invokevirtual	WITHOUT_CLASSIFICATION	0.9997037504389661	WITHOUT_CLASSIFICATION	2.962495610339991E-4	DESIGN
// invokevirtual	WITHOUT_CLASSIFICATION	0.9997037504389661	WITHOUT_CLASSIFICATION	2.962495610339991E-4	DESIGN
// aastore // args	WITHOUT_CLASSIFICATION	0.9994617001704789	WITHOUT_CLASSIFICATION	5.382998295212049E-4	DESIGN
/* | this | bean | args | i | raw bean | exception | */	WITHOUT_CLASSIFICATION	0.9991825031243289	WITHOUT_CLASSIFICATION	8.174968756710383E-4	DESIGN
// required to exception table // iconst_0 // i	WITHOUT_CLASSIFICATION	0.9997448460608142	WITHOUT_CLASSIFICATION	2.551539391858527E-4	DESIGN
// istore_3 // store i	WITHOUT_CLASSIFICATION	0.9998624853447898	WITHOUT_CLASSIFICATION	1.3751465521016305E-4	DESIGN
// aload_1 // load the bean	WITHOUT_CLASSIFICATION	0.9999736924327494	WITHOUT_CLASSIFICATION	2.6307567250606178E-5	DESIGN
// checkcast // cast the bean into a raw bean	WITHOUT_CLASSIFICATION	0.9969585573914529	WITHOUT_CLASSIFICATION	0.0030414426085470883	DESIGN
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999984974309734	WITHOUT_CLASSIFICATION	1.5025690265742482E-6	DESIGN
// start region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9958525554501194	WITHOUT_CLASSIFICATION	0.0041474445498806385	DESIGN
// iinc 3, 1	WITHOUT_CLASSIFICATION	0.9996897847594353	WITHOUT_CLASSIFICATION	3.102152405647297E-4	DESIGN
// aload 4 // load the raw bean	WITHOUT_CLASSIFICATION	0.9997539255097183	WITHOUT_CLASSIFICATION	2.460744902816607E-4	DESIGN
// aload_2 // load the args	WITHOUT_CLASSIFICATION	0.9999521873251043	WITHOUT_CLASSIFICATION	4.7812674895653675E-5	DESIGN
// iconst_i	WITHOUT_CLASSIFICATION	0.9997037504389661	WITHOUT_CLASSIFICATION	2.962495610339991E-4	DESIGN
// aaload	WITHOUT_CLASSIFICATION	0.9997612566512477	WITHOUT_CLASSIFICATION	2.3874334875219311E-4	DESIGN
// checkcast	WITHOUT_CLASSIFICATION	0.9997051273759845	WITHOUT_CLASSIFICATION	2.948726240156209E-4	DESIGN
// checkcast (case of primitive type) // invokevirtual (case of primitive type)	WITHOUT_CLASSIFICATION	0.9998450291232605	WITHOUT_CLASSIFICATION	1.5497087673950344E-4	DESIGN
// checkcast (case of reference type)	WITHOUT_CLASSIFICATION	0.9993671145404323	WITHOUT_CLASSIFICATION	6.328854595676577E-4	DESIGN
/* current stack len = 2 */	WITHOUT_CLASSIFICATION	0.999998085982807	WITHOUT_CLASSIFICATION	1.9140171929469235E-6	DESIGN
// end region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9718244001544025	WITHOUT_CLASSIFICATION	0.02817559984559742	DESIGN
// register in exception table	WITHOUT_CLASSIFICATION	0.9998550756820458	WITHOUT_CLASSIFICATION	1.449243179541947E-4	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.9997612566512477	WITHOUT_CLASSIFICATION	2.3874334875219311E-4	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.9997612566512477	WITHOUT_CLASSIFICATION	2.3874334875219311E-4	DESIGN
// return	WITHOUT_CLASSIFICATION	0.9997888611204329	WITHOUT_CLASSIFICATION	2.111388795672247E-4	DESIGN
// return	WITHOUT_CLASSIFICATION	0.9997888611204329	WITHOUT_CLASSIFICATION	2.111388795672247E-4	DESIGN
// dup	WITHOUT_CLASSIFICATION	0.9998248171660238	WITHOUT_CLASSIFICATION	1.7518283397625493E-4	DESIGN
// invokevirtual	WITHOUT_CLASSIFICATION	0.9997037504389661	WITHOUT_CLASSIFICATION	2.962495610339991E-4	DESIGN
// checkcast	WITHOUT_CLASSIFICATION	0.9997051273759845	WITHOUT_CLASSIFICATION	2.948726240156209E-4	DESIGN
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.9999824529088547	WITHOUT_CLASSIFICATION	1.754709114534855E-5	DESIGN
// astore 5 // store exception	WITHOUT_CLASSIFICATION	0.9999125591151438	WITHOUT_CLASSIFICATION	8.74408848562668E-5	DESIGN
// new // BulkAccessorException	WITHOUT_CLASSIFICATION	0.9992690398448578	WITHOUT_CLASSIFICATION	7.309601551421201E-4	DESIGN
// aload 5 // load exception	WITHOUT_CLASSIFICATION	0.9999553415905093	WITHOUT_CLASSIFICATION	4.4658409490638275E-5	DESIGN
// iload_3 // i	WITHOUT_CLASSIFICATION	0.9997041677578293	WITHOUT_CLASSIFICATION	2.958322421705769E-4	DESIGN
// invokespecial // BulkAccessorException.<init>	WITHOUT_CLASSIFICATION	0.9992082377773907	WITHOUT_CLASSIFICATION	7.917622226092409E-4	DESIGN
// athrow	WITHOUT_CLASSIFICATION	0.9997612566512477	WITHOUT_CLASSIFICATION	2.3874334875219311E-4	DESIGN
// WARNING: classfile only	WITHOUT_CLASSIFICATION	0.9999315733428921	WITHOUT_CLASSIFICATION	6.84266571079933E-5	DESIGN
//swallow	WITHOUT_CLASSIFICATION	0.9990619244547406	WITHOUT_CLASSIFICATION	9.380755452593856E-4	DESIGN
/* local variable | this | */	WITHOUT_CLASSIFICATION	0.9998627354282067	WITHOUT_CLASSIFICATION	1.3726457179323503E-4	DESIGN
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.9997508721137381	WITHOUT_CLASSIFICATION	2.49127886261821E-4	DESIGN
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.9997508721137381	WITHOUT_CLASSIFICATION	2.49127886261821E-4	DESIGN
// getfield // get field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9994863579463243	WITHOUT_CLASSIFICATION	5.136420536755971E-4	DESIGN
// areturn // return the value of the field	WITHOUT_CLASSIFICATION	0.9997888865828158	WITHOUT_CLASSIFICATION	2.111134171842126E-4	DESIGN
/* local variables | this | callback | */	WITHOUT_CLASSIFICATION	0.9965513459579356	WITHOUT_CLASSIFICATION	0.0034486540420644355	DESIGN
// aload_1 // load callback	WITHOUT_CLASSIFICATION	0.9999276701450399	WITHOUT_CLASSIFICATION	7.23298549600867E-5	DESIGN
// putfield // put field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9997780582801987	WITHOUT_CLASSIFICATION	2.219417198012117E-4	DESIGN
// case of non-static field	WITHOUT_CLASSIFICATION	0.9999773429122355	WITHOUT_CLASSIFICATION	2.2657087764440548E-5	DESIGN
// getfield // get each field	WITHOUT_CLASSIFICATION	0.9999504593846067	WITHOUT_CLASSIFICATION	4.954061539333702E-5	DESIGN
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.999321546054058	WITHOUT_CLASSIFICATION	6.784539459421401E-4	DESIGN
// ifnonnull	WITHOUT_CLASSIFICATION	0.9997037504389661	WITHOUT_CLASSIFICATION	2.962495610339991E-4	DESIGN
// *return // each type	WITHOUT_CLASSIFICATION	0.9998836538660579	WITHOUT_CLASSIFICATION	1.1634613394211445E-4	DESIGN
// *return // each type	WITHOUT_CLASSIFICATION	0.9998836538660579	WITHOUT_CLASSIFICATION	1.1634613394211445E-4	DESIGN
// *store_1 // each type	WITHOUT_CLASSIFICATION	0.9998836538660579	WITHOUT_CLASSIFICATION	1.1634613394211445E-4	DESIGN
// ldc // name of the field	WITHOUT_CLASSIFICATION	0.9999476301936043	WITHOUT_CLASSIFICATION	5.2369806395546285E-5	DESIGN
// *load_1 // each type	WITHOUT_CLASSIFICATION	0.9998836538660579	WITHOUT_CLASSIFICATION	1.1634613394211445E-4	DESIGN
// invokeinterface // invoke Callback.read*() // each type	WITHOUT_CLASSIFICATION	0.9995345615838128	WITHOUT_CLASSIFICATION	4.6543841618710977E-4	DESIGN
// int	WITHOUT_CLASSIFICATION	0.9998241626511098	WITHOUT_CLASSIFICATION	1.75837348890185E-4	DESIGN
// return	WITHOUT_CLASSIFICATION	0.9997888611204329	WITHOUT_CLASSIFICATION	2.111388795672247E-4	DESIGN
// dup	WITHOUT_CLASSIFICATION	0.9998248171660238	WITHOUT_CLASSIFICATION	1.7518283397625493E-4	DESIGN
// invokeinterface	WITHOUT_CLASSIFICATION	0.9997037504389661	WITHOUT_CLASSIFICATION	2.962495610339991E-4	DESIGN
// checkcast	WITHOUT_CLASSIFICATION	0.9997051273759845	WITHOUT_CLASSIFICATION	2.948726240156209E-4	DESIGN
// checkcast	WITHOUT_CLASSIFICATION	0.9997051273759845	WITHOUT_CLASSIFICATION	2.948726240156209E-4	DESIGN
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9992082377773907	WITHOUT_CLASSIFICATION	7.917622226092409E-4	DESIGN
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9992082377773907	WITHOUT_CLASSIFICATION	7.917622226092409E-4	DESIGN
// ifnonnull (label1)	WITHOUT_CLASSIFICATION	0.999830379035844	WITHOUT_CLASSIFICATION	1.6962096415598253E-4	DESIGN
// *load_1	WITHOUT_CLASSIFICATION	0.9997612566512477	WITHOUT_CLASSIFICATION	2.3874334875219311E-4	DESIGN
// *load_1	WITHOUT_CLASSIFICATION	0.9997612566512477	WITHOUT_CLASSIFICATION	2.3874334875219311E-4	DESIGN
// putfield	WITHOUT_CLASSIFICATION	0.9997037504389661	WITHOUT_CLASSIFICATION	2.962495610339991E-4	DESIGN
// return ;	WITHOUT_CLASSIFICATION	0.9997380022659568	WITHOUT_CLASSIFICATION	2.619977340432798E-4	DESIGN
// ldc // field name	WITHOUT_CLASSIFICATION	0.9997003099657944	WITHOUT_CLASSIFICATION	2.9969003420563347E-4	DESIGN
// getfield // old value of the field	WITHOUT_CLASSIFICATION	0.9998050999343955	WITHOUT_CLASSIFICATION	1.9490006560448692E-4	DESIGN
// invokeinterface // callback.write*(..)	WITHOUT_CLASSIFICATION	0.9992082377773907	WITHOUT_CLASSIFICATION	7.917622226092409E-4	DESIGN
// reference type	WITHOUT_CLASSIFICATION	0.9992479000829798	WITHOUT_CLASSIFICATION	7.520999170202138E-4	DESIGN
// reference type	WITHOUT_CLASSIFICATION	0.9992479000829798	WITHOUT_CLASSIFICATION	7.520999170202138E-4	DESIGN
// not array	WITHOUT_CLASSIFICATION	0.999836486894052	WITHOUT_CLASSIFICATION	1.635131059479188E-4	DESIGN
// array of reference type	WITHOUT_CLASSIFICATION	0.9998020910269009	WITHOUT_CLASSIFICATION	1.979089730990768E-4	DESIGN
// boolean	WITHOUT_CLASSIFICATION	0.9999170761482321	WITHOUT_CLASSIFICATION	8.292385176792367E-5	DESIGN
// byte	WITHOUT_CLASSIFICATION	0.9998434388140703	WITHOUT_CLASSIFICATION	1.5656118592966798E-4	DESIGN
// char	WITHOUT_CLASSIFICATION	0.9998533768050434	WITHOUT_CLASSIFICATION	1.4662319495656459E-4	DESIGN
// short	WITHOUT_CLASSIFICATION	0.9997598270155181	WITHOUT_CLASSIFICATION	2.4017298448195736E-4	DESIGN
// double	WITHOUT_CLASSIFICATION	0.9999582939454551	WITHOUT_CLASSIFICATION	4.170605454496036E-5	DESIGN
// float	WITHOUT_CLASSIFICATION	0.9997678802238197	WITHOUT_CLASSIFICATION	2.3211977618038546E-4	DESIGN
// float	WITHOUT_CLASSIFICATION	0.9997678802238197	WITHOUT_CLASSIFICATION	2.3211977618038546E-4	DESIGN
// long	WITHOUT_CLASSIFICATION	0.9996893725133198	WITHOUT_CLASSIFICATION	3.10627486680254E-4	DESIGN
// long	WITHOUT_CLASSIFICATION	0.9996893725133198	WITHOUT_CLASSIFICATION	3.10627486680254E-4	DESIGN
// bad type	WITHOUT_CLASSIFICATION	0.9992304546928523	WITHOUT_CLASSIFICATION	7.695453071477114E-4	DESIGN
// bad type	WITHOUT_CLASSIFICATION	0.9992304546928523	WITHOUT_CLASSIFICATION	7.695453071477114E-4	DESIGN
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9992490750570249	WITHOUT_CLASSIFICATION	7.509249429750802E-4	DESIGN
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9992490750570249	WITHOUT_CLASSIFICATION	7.509249429750802E-4	DESIGN
// reference type	WITHOUT_CLASSIFICATION	0.9992479000829798	WITHOUT_CLASSIFICATION	7.520999170202138E-4	DESIGN
// double	WITHOUT_CLASSIFICATION	0.9999582939454551	WITHOUT_CLASSIFICATION	4.170605454496036E-5	DESIGN
// float	WITHOUT_CLASSIFICATION	0.9997678802238197	WITHOUT_CLASSIFICATION	2.3211977618038546E-4	DESIGN
// float	WITHOUT_CLASSIFICATION	0.9997678802238197	WITHOUT_CLASSIFICATION	2.3211977618038546E-4	DESIGN
// long	WITHOUT_CLASSIFICATION	0.9996893725133198	WITHOUT_CLASSIFICATION	3.10627486680254E-4	DESIGN
// bad type	WITHOUT_CLASSIFICATION	0.9992304546928523	WITHOUT_CLASSIFICATION	7.695453071477114E-4	DESIGN
// bad type	WITHOUT_CLASSIFICATION	0.9992304546928523	WITHOUT_CLASSIFICATION	7.695453071477114E-4	DESIGN
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9992490750570249	WITHOUT_CLASSIFICATION	7.509249429750802E-4	DESIGN
// skip finalize methods	WITHOUT_CLASSIFICATION	0.9998640652772214	WITHOUT_CLASSIFICATION	1.359347227785404E-4	DESIGN
//Mainly for OSCache	WITHOUT_CLASSIFICATION	0.997778097582387	WITHOUT_CLASSIFICATION	0.0022219024176129932	DESIGN
//decrement the lock	WITHOUT_CLASSIFICATION	0.9994381121456336	WITHOUT_CLASSIFICATION	5.61887854366427E-4	DESIGN
// create new lock that times out immediately	WITHOUT_CLASSIFICATION	0.9993106440867627	WITHOUT_CLASSIFICATION	6.893559132373296E-4	DESIGN
//recache the updated state	WITHOUT_CLASSIFICATION	0.9997845858424662	WITHOUT_CLASSIFICATION	2.1541415753380318E-4	DESIGN
// noop	WITHOUT_CLASSIFICATION	0.9997676584831576	WITHOUT_CLASSIFICATION	2.3234151684245211E-4	DESIGN
//null clientLock is remotely possible but will never happen in practice	WITHOUT_CLASSIFICATION	0.9977607808739931	WITHOUT_CLASSIFICATION	0.002239219126006818	DESIGN
// we really could refresh the item if it // is not a lock, but it might be slower //return freshTimestamp < txTimestamp	WITHOUT_CLASSIFICATION	0.9973911417518513	WITHOUT_CLASSIFICATION	0.0026088582481486222	DESIGN
//by requiring <, we rely on lock timeout in the case of an unsuccessful update!	WITHOUT_CLASSIFICATION	0.9995743661202197	WITHOUT_CLASSIFICATION	4.2563387978031335E-4	DESIGN
// the user provided resulttransformer, not the one used with "select new". Here to avoid mangling // transformed/non-transformed results.	WITHOUT_CLASSIFICATION	0.9997623851918688	WITHOUT_CLASSIFICATION	2.3761480813121E-4	DESIGN
// disassemble positional parameters	WITHOUT_CLASSIFICATION	0.999429962425572	WITHOUT_CLASSIFICATION	5.700375744280446E-4	DESIGN
// disassemble named parameters	WITHOUT_CLASSIFICATION	0.9996132807204812	WITHOUT_CLASSIFICATION	3.867192795188382E-4	DESIGN
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9988384658910368	WITHOUT_CLASSIFICATION	0.001161534108963241	DESIGN
// noop	WITHOUT_CLASSIFICATION	0.9997676584831576	WITHOUT_CLASSIFICATION	2.3234151684245211E-4	DESIGN
//noop	WITHOUT_CLASSIFICATION	0.9990619244547406	WITHOUT_CLASSIFICATION	9.380755452593856E-4	DESIGN
//noop	WITHOUT_CLASSIFICATION	0.9990619244547406	WITHOUT_CLASSIFICATION	9.380755452593856E-4	DESIGN
// this is called from SettingsFactory irregardless; trivial to simply disregard	WITHOUT_CLASSIFICATION	0.9943464280386266	WITHOUT_CLASSIFICATION	0.005653571961373306	DESIGN
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9963807533736918	WITHOUT_CLASSIFICATION	0.0036192466263083004	DESIGN
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9963807533736918	WITHOUT_CLASSIFICATION	0.0036192466263083004	DESIGN
//throw new UnsupportedOperationException("Can't write to a readonly object");	WITHOUT_CLASSIFICATION	0.9929765316857176	WITHOUT_CLASSIFICATION	0.007023468314282336	DESIGN
//assembled state gets put in a new array (we read from cache by value!)	WITHOUT_CLASSIFICATION	0.9979277541159209	WITHOUT_CLASSIFICATION	0.002072245884079116	DESIGN
//persister.setIdentifier(result, id); //before calling interceptor, for consistency with normal load	WITHOUT_CLASSIFICATION	0.9864899354728534	WITHOUT_CLASSIFICATION	0.013510064527146724	DESIGN
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.99923815947607	WITHOUT_CLASSIFICATION	7.618405239300109E-4	DESIGN
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.99923815947607	WITHOUT_CLASSIFICATION	7.618405239300109E-4	DESIGN
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9998926662380412	WITHOUT_CLASSIFICATION	1.0733376195878431E-4	DESIGN
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.997473773272283	WITHOUT_CLASSIFICATION	0.0025262267277168806	DESIGN
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.997473773272283	WITHOUT_CLASSIFICATION	0.0025262267277168806	DESIGN
// classes mentioned in extends not available - so put it in queue	WITHOUT_CLASSIFICATION	0.9987362645690336	WITHOUT_CLASSIFICATION	0.0012637354309663691	DESIGN
// get meta's from <hibernate-mapping>	WITHOUT_CLASSIFICATION	0.998263337813682	WITHOUT_CLASSIFICATION	0.0017366621863179484	DESIGN
// get meta's from <class>	WITHOUT_CLASSIFICATION	0.9996276743758655	WITHOUT_CLASSIFICATION	3.723256241345656E-4	DESIGN
// DB-OBJECTNAME	WITHOUT_CLASSIFICATION	0.9997037504389661	WITHOUT_CLASSIFICATION	2.962495610339991E-4	DESIGN
// MUTABLE	WITHOUT_CLASSIFICATION	0.9997612566512477	WITHOUT_CLASSIFICATION	2.3874334875219311E-4	DESIGN
// WHERE	WITHOUT_CLASSIFICATION	0.9997612566512477	WITHOUT_CLASSIFICATION	2.3874334875219311E-4	DESIGN
// CHECK	WITHOUT_CLASSIFICATION	0.9997612566512477	WITHOUT_CLASSIFICATION	2.3874334875219311E-4	DESIGN
// POLYMORPHISM	WITHOUT_CLASSIFICATION	0.9997037504389661	WITHOUT_CLASSIFICATION	2.962495610339991E-4	DESIGN
// TODO:	WITHOUT_CLASSIFICATION	0.6828034158543377	WITHOUT_CLASSIFICATION	0.31719658414566243	DESIGN
// ID	WITHOUT_CLASSIFICATION	0.9996471060814281	WITHOUT_CLASSIFICATION	3.5289391857183666E-4	DESIGN
// VERSION / TIMESTAMP	WITHOUT_CLASSIFICATION	0.9999095173560665	WITHOUT_CLASSIFICATION	9.048264393354885E-5	DESIGN
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9997037504389661	WITHOUT_CLASSIFICATION	2.962495610339991E-4	DESIGN
// Primary key constraint	WITHOUT_CLASSIFICATION	0.9999195582473165	WITHOUT_CLASSIFICATION	8.044175268357444E-5	DESIGN
// this is either a <version/> tag with no type attribute, // or a <timestamp/> tag	WITHOUT_CLASSIFICATION	0.9982175244739366	WITHOUT_CLASSIFICATION	0.00178247552606341	DESIGN
// for version properties marked as being generated, make sure they are "always" // generated; aka, "insert" is invalid; this is dis-allowed by the DTD, // but just to make sure...	WITHOUT_CLASSIFICATION	0.8162423340008732	WITHOUT_CLASSIFICATION	0.1837576659991268	DESIGN
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9997037504389661	WITHOUT_CLASSIFICATION	2.962495610339991E-4	DESIGN
// ( (Column) discrim.getColumnIterator().next() ).setType(type);	WITHOUT_CLASSIFICATION	0.9988432922125127	WITHOUT_CLASSIFICATION	0.001156707787487336	DESIGN
// go ahead and set the lazy here, since pojo.proxy can override it.	WITHOUT_CLASSIFICATION	0.9998830289152468	WITHOUT_CLASSIFICATION	1.169710847531922E-4	DESIGN
// DYNAMIC UPDATE	WITHOUT_CLASSIFICATION	0.9997037504389661	WITHOUT_CLASSIFICATION	2.962495610339991E-4	DESIGN
// IMPORT	WITHOUT_CLASSIFICATION	0.9997612566512477	WITHOUT_CLASSIFICATION	2.3874334875219311E-4	DESIGN
// BATCH SIZE	WITHOUT_CLASSIFICATION	0.9997037504389661	WITHOUT_CLASSIFICATION	2.962495610339991E-4	DESIGN
// SELECT BEFORE UPDATE	WITHOUT_CLASSIFICATION	0.999830379035844	WITHOUT_CLASSIFICATION	1.6962096415598253E-4	DESIGN
// OPTIMISTIC LOCK MODE	WITHOUT_CLASSIFICATION	0.999830379035844	WITHOUT_CLASSIFICATION	1.6962096415598253E-4	DESIGN
// PERSISTER	WITHOUT_CLASSIFICATION	0.9997037504389661	WITHOUT_CLASSIFICATION	2.962495610339991E-4	DESIGN
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9997063408944304	WITHOUT_CLASSIFICATION	2.936591055695472E-4	DESIGN
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9996276743758655	WITHOUT_CLASSIFICATION	3.723256241345656E-4	DESIGN
// properties	WITHOUT_CLASSIFICATION	0.9997467161714391	WITHOUT_CLASSIFICATION	2.532838285609794E-4	DESIGN
// joined subclasses	WITHOUT_CLASSIFICATION	0.999746723357313	WITHOUT_CLASSIFICATION	2.532766426871331E-4	DESIGN
// KEY	WITHOUT_CLASSIFICATION	0.9997616450900008	WITHOUT_CLASSIFICATION	2.3835490999925642E-4	DESIGN
// CHECK	WITHOUT_CLASSIFICATION	0.9997612566512477	WITHOUT_CLASSIFICATION	2.3874334875219311E-4	DESIGN
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9997063408944304	WITHOUT_CLASSIFICATION	2.936591055695472E-4	DESIGN
// properties	WITHOUT_CLASSIFICATION	0.9997467161714391	WITHOUT_CLASSIFICATION	2.532838285609794E-4	DESIGN
// KEY	WITHOUT_CLASSIFICATION	0.9997616450900008	WITHOUT_CLASSIFICATION	2.3835490999925642E-4	DESIGN
// model.getKey().setType( new Type( model.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9989227624125508	WITHOUT_CLASSIFICATION	0.0010772375874491824	DESIGN
// TABLENAME	WITHOUT_CLASSIFICATION	0.9997037504389661	WITHOUT_CLASSIFICATION	2.962495610339991E-4	DESIGN
// join.getKey().setType( new Type( lazz.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9989227624125508	WITHOUT_CLASSIFICATION	0.0010772375874491824	DESIGN
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9997037504389661	WITHOUT_CLASSIFICATION	2.962495610339991E-4	DESIGN
// COLUMN(S)	WITHOUT_CLASSIFICATION	0.9997037504389661	WITHOUT_CLASSIFICATION	2.962495610339991E-4	DESIGN
// column index	WITHOUT_CLASSIFICATION	0.9996344755866654	WITHOUT_CLASSIFICATION	3.655244133346498E-4	DESIGN
//column unique-key	WITHOUT_CLASSIFICATION	0.9988361658907539	WITHOUT_CLASSIFICATION	0.0011638341092461385	DESIGN
// automatically makes a column with the default name if none is specifed by XML	WITHOUT_CLASSIFICATION	0.9994976681713709	WITHOUT_CLASSIFICATION	5.023318286291464E-4	DESIGN
// for an any	WITHOUT_CLASSIFICATION	0.9997134536933898	WITHOUT_CLASSIFICATION	2.8654630661023285E-4	DESIGN
// insertable simply because that is the user did not specify // anything; just override it	WITHOUT_CLASSIFICATION	0.9999793935977758	WITHOUT_CLASSIFICATION	2.0606402224219184E-5	DESIGN
// the user specifically supplied insert="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999002868251327	WITHOUT_CLASSIFICATION	9.971317486731687E-5	DESIGN
// properties generated on update can never be updateable...	WITHOUT_CLASSIFICATION	0.9999225467828816	WITHOUT_CLASSIFICATION	7.745321711838526E-5	DESIGN
// updateable only because the user did not specify  // anything; just override it	WITHOUT_CLASSIFICATION	0.9999946297227182	WITHOUT_CLASSIFICATION	5.370277281784295E-6	DESIGN
// the user specifically supplied update="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999002868251327	WITHOUT_CLASSIFICATION	9.971317486731687E-5	DESIGN
// ROLENAME	WITHOUT_CLASSIFICATION	0.9997037504389661	WITHOUT_CLASSIFICATION	2.962495610339991E-4	DESIGN
// FETCH STRATEGY	WITHOUT_CLASSIFICATION	0.9997037504389661	WITHOUT_CLASSIFICATION	2.962495610339991E-4	DESIGN
// TABLE	WITHOUT_CLASSIFICATION	0.9997680170147999	WITHOUT_CLASSIFICATION	2.319829852002352E-4	DESIGN
//tableName = mappings.getNamingStrategy().propertyToTableName( className, path );	WITHOUT_CLASSIFICATION	0.9997612121036512	WITHOUT_CLASSIFICATION	2.387878963487688E-4	DESIGN
// SORT	WITHOUT_CLASSIFICATION	0.9997612566512477	WITHOUT_CLASSIFICATION	2.3874334875219311E-4	DESIGN
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9997063408944304	WITHOUT_CLASSIFICATION	2.936591055695472E-4	DESIGN
// unsorted, natural, comparator.class.name	WITHOUT_CLASSIFICATION	0.9992082377773907	WITHOUT_CLASSIFICATION	7.917622226092409E-4	DESIGN
// ORPHAN DELETE (used for programmer error detection)	WITHOUT_CLASSIFICATION	0.9981309589667217	WITHOUT_CLASSIFICATION	0.0018690410332783654	DESIGN
// set up second pass	WITHOUT_CLASSIFICATION	0.9999774747757028	WITHOUT_CLASSIFICATION	2.2525224297176134E-5	DESIGN
// an "embedded" component (composite ids and unique) // note that this does not handle nested components	WITHOUT_CLASSIFICATION	0.9550390377657194	WITHOUT_CLASSIFICATION	0.04496096223428066	DESIGN
// a nested composite element	WITHOUT_CLASSIFICATION	0.9994936143290782	WITHOUT_CLASSIFICATION	5.063856709217888E-4	DESIGN
// for an any // we will have to use reflection	WITHOUT_CLASSIFICATION	0.9975070924526384	WITHOUT_CLASSIFICATION	0.0024929075473616156	DESIGN
//NOTE SPECIAL CASE: // one-to-one constrained=false cannot be proxied, // so default to join and non-lazy	WITHOUT_CLASSIFICATION	0.9994253639522369	WITHOUT_CLASSIFICATION	5.746360477630161E-4	DESIGN
// use old (HB 2.1) defaults if outer-join is specified	WITHOUT_CLASSIFICATION	0.9988505357032377	WITHOUT_CLASSIFICATION	0.0011494642967623946	DESIGN
//lazy = !join;	WITHOUT_CLASSIFICATION	0.9998361463696205	WITHOUT_CLASSIFICATION	1.6385363037948233E-4	DESIGN
// GENERATOR	WITHOUT_CLASSIFICATION	0.9997037504389661	WITHOUT_CLASSIFICATION	2.962495610339991E-4	DESIGN
// ID UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9995621164153894	WITHOUT_CLASSIFICATION	4.378835846106082E-4	DESIGN
// VERSION UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.999830379035844	WITHOUT_CLASSIFICATION	1.6962096415598253E-4	DESIGN
// not necessarily a *unique* property reference	WITHOUT_CLASSIFICATION	0.9996093937929706	WITHOUT_CLASSIFICATION	3.9060620702932814E-4	DESIGN
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9988432922125127	WITHOUT_CLASSIFICATION	0.001156707787487336	DESIGN
// contained elements:	WITHOUT_CLASSIFICATION	0.9997330191259959	WITHOUT_CLASSIFICATION	2.669808740040945E-4	DESIGN
// for non-inverse one-to-many, with a not-null fk, add a backref!	WITHOUT_CLASSIFICATION	0.9989557638017509	WITHOUT_CLASSIFICATION	0.0010442361982491504	DESIGN
// Bind the where	WITHOUT_CLASSIFICATION	0.9998975796314431	WITHOUT_CLASSIFICATION	1.0242036855684491E-4	DESIGN
// Bind the order-by	WITHOUT_CLASSIFICATION	0.999896560197007	WITHOUT_CLASSIFICATION	1.0343980299293228E-4	DESIGN
// Bind the filters	WITHOUT_CLASSIFICATION	0.999896560197007	WITHOUT_CLASSIFICATION	1.0343980299293228E-4	DESIGN
// overriding inherited meta attribute. HBX-621 & HBX-793	WITHOUT_CLASSIFICATION	0.998846814288557	WITHOUT_CLASSIFICATION	0.0011531857114430186	DESIGN
// first, iterate over all elements capable of defining an extends attribute // collecting all found extends references if they cannot be resolved // against the already processed mappings.	WITHOUT_CLASSIFICATION	0.9999627103487195	WITHOUT_CLASSIFICATION	3.728965128047155E-5	DESIGN
// mappings might contain either the "raw" extends name (in the case of // an entity-name mapping) or a FQN (in the case of a POJO mapping).	WITHOUT_CLASSIFICATION	0.9998292459544386	WITHOUT_CLASSIFICATION	1.707540455613989E-4	DESIGN
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9990752986111404	WITHOUT_CLASSIFICATION	9.247013888594336E-4	DESIGN
//SessionFactory name:	WITHOUT_CLASSIFICATION	0.9995629762011263	WITHOUT_CLASSIFICATION	4.3702379887367243E-4	DESIGN
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9965175482188849	WITHOUT_CLASSIFICATION	0.003482451781114991	DESIGN
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9965175482188849	WITHOUT_CLASSIFICATION	0.003482451781114991	DESIGN
//Interrogate JDBC metadata	WITHOUT_CLASSIFICATION	0.9993333866232158	WITHOUT_CLASSIFICATION	6.666133767841301E-4	DESIGN
// user supplied JDBC connections	WITHOUT_CLASSIFICATION	0.9997099180606502	WITHOUT_CLASSIFICATION	2.900819393498203E-4	DESIGN
//use dialect default properties	WITHOUT_CLASSIFICATION	0.9976241200199093	WITHOUT_CLASSIFICATION	0.00237587998009065	DESIGN
// Transaction settings:	WITHOUT_CLASSIFICATION	0.999830676791389	WITHOUT_CLASSIFICATION	1.6932320861101201E-4	DESIGN
//SQL Generation settings:	WITHOUT_CLASSIFICATION	0.99933505348796	WITHOUT_CLASSIFICATION	6.649465120399156E-4	DESIGN
//Query parser settings:	WITHOUT_CLASSIFICATION	0.9982798660508011	WITHOUT_CLASSIFICATION	0.0017201339491988846	DESIGN
// Second-level / query cache:	WITHOUT_CLASSIFICATION	0.9999025031357375	WITHOUT_CLASSIFICATION	9.749686426255588E-5	DESIGN
// The cache provider is needed when we either have second-level cache enabled // or query cache enabled.  Note that useSecondLevelCache is enabled by default	WITHOUT_CLASSIFICATION	0.9999281737610228	WITHOUT_CLASSIFICATION	7.182623897713685E-5	DESIGN
//SQL Exception converter:	WITHOUT_CLASSIFICATION	0.9995741304734557	WITHOUT_CLASSIFICATION	4.2586952654431276E-4	DESIGN
//Statistics and logging:	WITHOUT_CLASSIFICATION	0.9991902342943798	WITHOUT_CLASSIFICATION	8.097657056201078E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9997612566512477	WITHOUT_CLASSIFICATION	2.3874334875219311E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9997612566512477	WITHOUT_CLASSIFICATION	2.3874334875219311E-4	DESIGN
//Schema export:	WITHOUT_CLASSIFICATION	0.9988361658907539	WITHOUT_CLASSIFICATION	0.0011638341092461385	DESIGN
//	WITHOUT_CLASSIFICATION	0.9997612566512477	WITHOUT_CLASSIFICATION	2.3874334875219311E-4	DESIGN
// legacy behavior, apply the bridge...	WITHOUT_CLASSIFICATION	0.9966818160071718	WITHOUT_CLASSIFICATION	0.0033181839928282	DESIGN
// maybe a concrete SQLpropertyresult type, but Map is exactly what is required at the moment	WITHOUT_CLASSIFICATION	0.9839805897584317	WITHOUT_CLASSIFICATION	0.01601941024156833	DESIGN
//if dotted and not load-collection nor return-join //regular property	WITHOUT_CLASSIFICATION	0.9992179702464884	WITHOUT_CLASSIFICATION	7.820297535114661E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9997612566512477	WITHOUT_CLASSIFICATION	2.3874334875219311E-4	DESIGN
// public getters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9990267960489854	WITHOUT_CLASSIFICATION	9.732039510145279E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9997612566512477	WITHOUT_CLASSIFICATION	2.3874334875219311E-4	DESIGN
// package protected setters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9916226007100368	WITHOUT_CLASSIFICATION	0.008377399289963127	DESIGN
//	WITHOUT_CLASSIFICATION	0.9997612566512477	WITHOUT_CLASSIFICATION	2.3874334875219311E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9997612566512477	WITHOUT_CLASSIFICATION	2.3874334875219311E-4	DESIGN
// using local since the inheritedMetas at this point is not the correct map since it is always the empty map	WITHOUT_CLASSIFICATION	0.9970643278315654	WITHOUT_CLASSIFICATION	0.002935672168434587	DESIGN
//	WITHOUT_CLASSIFICATION	0.9997612566512477	WITHOUT_CLASSIFICATION	2.3874334875219311E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9997612566512477	WITHOUT_CLASSIFICATION	2.3874334875219311E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9997612566512477	WITHOUT_CLASSIFICATION	2.3874334875219311E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9997612566512477	WITHOUT_CLASSIFICATION	2.3874334875219311E-4	DESIGN
// if doc is null, then for whatever reason, the cached file cannot be used...	WITHOUT_CLASSIFICATION	0.9989264295542152	WITHOUT_CLASSIFICATION	0.0010735704457848915	DESIGN
// drop them in reverse order in case db needs it done that way...	WITHOUT_CLASSIFICATION	0.9985713945186476	WITHOUT_CLASSIFICATION	0.0014286054813523422	DESIGN
//	WITHOUT_CLASSIFICATION	0.9997612566512477	WITHOUT_CLASSIFICATION	2.3874334875219311E-4	DESIGN
// This method may be called many times!!	WITHOUT_CLASSIFICATION	0.9926149836930264	WITHOUT_CLASSIFICATION	0.007385016306973702	DESIGN
//	WITHOUT_CLASSIFICATION	0.9997612566512477	WITHOUT_CLASSIFICATION	2.3874334875219311E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9997612566512477	WITHOUT_CLASSIFICATION	2.3874334875219311E-4	DESIGN
// found	WITHOUT_CLASSIFICATION	0.9997368755400267	WITHOUT_CLASSIFICATION	2.631244599733508E-4	DESIGN
// found	WITHOUT_CLASSIFICATION	0.9997368755400267	WITHOUT_CLASSIFICATION	2.631244599733508E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9997612566512477	WITHOUT_CLASSIFICATION	2.3874334875219311E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9997612566512477	WITHOUT_CLASSIFICATION	2.3874334875219311E-4	DESIGN
//<String, String>	WITHOUT_CLASSIFICATION	0.9988399835710647	WITHOUT_CLASSIFICATION	0.0011600164289352563	DESIGN
//<String, String>	WITHOUT_CLASSIFICATION	0.9988399835710647	WITHOUT_CLASSIFICATION	0.0011600164289352563	DESIGN
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9990752986111404	WITHOUT_CLASSIFICATION	9.247013888594336E-4	DESIGN
//Set USE_REFLECTION_OPTIMIZER to false to fix HHH-227	WITHOUT_CLASSIFICATION	0.9579944785677021	WITHOUT_CLASSIFICATION	0.04200552143229777	DESIGN
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9969596882610284	WITHOUT_CLASSIFICATION	0.003040311738971572	DESIGN
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9995619846384487	WITHOUT_CLASSIFICATION	4.380153615512357E-4	DESIGN
// intentionally empty	WITHOUT_CLASSIFICATION	0.9997253054825898	WITHOUT_CLASSIFICATION	2.746945174101682E-4	DESIGN
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9969596882610284	WITHOUT_CLASSIFICATION	0.003040311738971572	DESIGN
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9995619846384487	WITHOUT_CLASSIFICATION	4.380153615512357E-4	DESIGN
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9864021900313713	WITHOUT_CLASSIFICATION	0.013597809968628723	DESIGN
//maintain correct duplication if loaded in a cartesian product	WITHOUT_CLASSIFICATION	0.9926563131111156	WITHOUT_CLASSIFICATION	0.00734368688888448	DESIGN
// the element has been removed from the set	WITHOUT_CLASSIFICATION	0.9987566091936338	WITHOUT_CLASSIFICATION	0.0012433908063661464	DESIGN
// the element has changed	WITHOUT_CLASSIFICATION	0.9999901928793594	WITHOUT_CLASSIFICATION	9.807120640563087E-6	DESIGN
//Careful: these methods do not initialize the collection.	WITHOUT_CLASSIFICATION	0.9949245129594855	WITHOUT_CLASSIFICATION	0.005075487040514457	DESIGN
//needed so that we remove this collection from the second-level cache	WITHOUT_CLASSIFICATION	0.8535116471621345	WITHOUT_CLASSIFICATION	0.14648835283786554	DESIGN
// override on some subclasses	WITHOUT_CLASSIFICATION	0.9998281516848927	WITHOUT_CLASSIFICATION	1.718483151073633E-4	DESIGN
//override on some subclasses	WITHOUT_CLASSIFICATION	0.9992227764994813	WITHOUT_CLASSIFICATION	7.77223500518597E-4	DESIGN
//do this bit after setting initialized to true or it will recurse	WITHOUT_CLASSIFICATION	0.9982575686905693	WITHOUT_CLASSIFICATION	0.0017424313094307152	DESIGN
// short-circuit(s) // no new elements, the old list contains only Orphans // no old elements, so no Orphans neither	WITHOUT_CLASSIFICATION	0.9999916475235553	WITHOUT_CLASSIFICATION	8.352476444639466E-6	DESIGN
// create the collection holding the Orphans	WITHOUT_CLASSIFICATION	0.998745526432265	WITHOUT_CLASSIFICATION	0.00125447356773491	DESIGN
// collect EntityIdentifier(s) of the *current* elements - add them into a HashSet for fast access	WITHOUT_CLASSIFICATION	0.9990630724564376	WITHOUT_CLASSIFICATION	9.369275435623923E-4	DESIGN
// iterate over the *old* list	WITHOUT_CLASSIFICATION	0.9999437754648026	WITHOUT_CLASSIFICATION	5.622453519742993E-5	DESIGN
/*(array==null) ? tempList.size() :*/	WITHOUT_CLASSIFICATION	0.9869425904775909	WITHOUT_CLASSIFICATION	0.013057409522409053	DESIGN
// intentionally empty	WITHOUT_CLASSIFICATION	0.9997253054825898	WITHOUT_CLASSIFICATION	2.746945174101682E-4	DESIGN
/*(array==null) ? tempList.get(i) :*/	WITHOUT_CLASSIFICATION	0.9869425904775909	WITHOUT_CLASSIFICATION	0.013057409522409053	DESIGN
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9998378957309243	WITHOUT_CLASSIFICATION	1.6210426907575855E-4	DESIGN
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9998378957309243	WITHOUT_CLASSIFICATION	1.6210426907575855E-4	DESIGN
// amazingly, these two will work because AbstractCollection // uses iterator() to fill the array	WITHOUT_CLASSIFICATION	0.9992750109683827	WITHOUT_CLASSIFICATION	7.249890316174216E-4	DESIGN
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9864021900313713	WITHOUT_CLASSIFICATION	0.013597809968628723	DESIGN
// finally, what it's all about...	WITHOUT_CLASSIFICATION	0.9979176942235038	WITHOUT_CLASSIFICATION	0.002082305776496115	DESIGN
// note that if we load this collection from a cartesian product // the multiplicity would be broken ... so use an idbag instead	WITHOUT_CLASSIFICATION	0.948571191947343	WITHOUT_CLASSIFICATION	0.05142880805265707	DESIGN
// Anyway, here we implement <set> semantics for a // <one-to-many> <bag>!	WITHOUT_CLASSIFICATION	0.6835735813532124	WITHOUT_CLASSIFICATION	0.3164264186467875	DESIGN
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9983213221079406	WITHOUT_CLASSIFICATION	0.001678677892059435	DESIGN
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.7011787796392605	WITHOUT_CLASSIFICATION	0.2988212203607396	DESIGN
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9864021900313713	WITHOUT_CLASSIFICATION	0.013597809968628723	DESIGN
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9983213221079406	WITHOUT_CLASSIFICATION	0.001678677892059435	DESIGN
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.7011787796392605	WITHOUT_CLASSIFICATION	0.2988212203607396	DESIGN
/*public boolean equals(Object other) {	WITHOUT_CLASSIFICATION	0.9991714650385102	WITHOUT_CLASSIFICATION	8.285349614898115E-4	DESIGN
// List OPERATIONS:	WITHOUT_CLASSIFICATION	0.999735293513806	WITHOUT_CLASSIFICATION	2.647064861940015E-4	DESIGN
//pad with nulls from the current last element up to the new index	WITHOUT_CLASSIFICATION	0.9951958860614157	WITHOUT_CLASSIFICATION	0.004804113938584195	DESIGN
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9864021900313713	WITHOUT_CLASSIFICATION	0.013597809968628723	DESIGN
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9864021900313713	WITHOUT_CLASSIFICATION	0.013597809968628723	DESIGN
// from Map	WITHOUT_CLASSIFICATION	0.9994484305971953	WITHOUT_CLASSIFICATION	5.515694028047177E-4	DESIGN
// from SortedMap	WITHOUT_CLASSIFICATION	0.9994221469566971	WITHOUT_CLASSIFICATION	5.778530433028381E-4	DESIGN
//inject the data	WITHOUT_CLASSIFICATION	0.9995457286442335	WITHOUT_CLASSIFICATION	4.5427135576650026E-4	DESIGN
// cannot be instantiated	WITHOUT_CLASSIFICATION	0.9998235015383026	WITHOUT_CLASSIFICATION	1.764984616974665E-4	DESIGN
//default pool size 20	WITHOUT_CLASSIFICATION	0.9997847392650988	WITHOUT_CLASSIFICATION	2.1526073490113972E-4	DESIGN
// trying via forName() first to be as close to DriverManager's semantics	WITHOUT_CLASSIFICATION	0.9991942040491222	WITHOUT_CLASSIFICATION	8.057959508777274E-4	DESIGN
// if debug level is enabled, then log the password, otherwise mask it	WITHOUT_CLASSIFICATION	0.9997165264727267	WITHOUT_CLASSIFICATION	2.8347352727325236E-4	DESIGN
// register a cleanup synch	WITHOUT_CLASSIFICATION	0.9995500401089168	WITHOUT_CLASSIFICATION	4.4995989108315355E-4	DESIGN
// wrap the session in the transaction-protection proxy	WITHOUT_CLASSIFICATION	0.9998550128232314	WITHOUT_CLASSIFICATION	1.4498717676869293E-4	DESIGN
// then bind it	WITHOUT_CLASSIFICATION	0.9998198722054521	WITHOUT_CLASSIFICATION	1.8012779454797869E-4	DESIGN
// try to make sure we don't wrap and already wrapped session	WITHOUT_CLASSIFICATION	0.9944368684888244	WITHOUT_CLASSIFICATION	0.0055631315111755435	DESIGN
// allow these to go through the the real session no matter what	WITHOUT_CLASSIFICATION	0.9986061382878999	WITHOUT_CLASSIFICATION	0.0013938617121001214	DESIGN
// limit the methods available if no transaction is active	WITHOUT_CLASSIFICATION	0.9997049646668262	WITHOUT_CLASSIFICATION	2.9503533317377505E-4	DESIGN
// allow these (deprecated) methods to pass through	WITHOUT_CLASSIFICATION	0.9984045154350996	WITHOUT_CLASSIFICATION	0.0015954845649003714	DESIGN
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992144860891844	WITHOUT_CLASSIFICATION	7.855139108156425E-4	DESIGN
// We could register the session against the transaction even though it is // not started, but we'd have no guarentee of ever getting the map // entries cleaned up (aside from spawning threads).	WITHOUT_CLASSIFICATION	0.9999974937075619	WITHOUT_CLASSIFICATION	2.5062924381639664E-6	DESIGN
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.999023153937095	WITHOUT_CLASSIFICATION	9.768460629050988E-4	DESIGN
//private String propertyName;	WITHOUT_CLASSIFICATION	0.9991641584441461	WITHOUT_CLASSIFICATION	8.35841555853872E-4	DESIGN
/*public PropertyProjection project() {	WITHOUT_CLASSIFICATION	0.9976179297825403	WITHOUT_CLASSIFICATION	0.002382070217459621	DESIGN
//String[] fk = StringHelper.qualify( "collection_", cp.getKeyColumnNames() );	WITHOUT_CLASSIFICATION	0.9995619846384487	WITHOUT_CLASSIFICATION	4.380153615512357E-4	DESIGN
//" collection_ where " +	WITHOUT_CLASSIFICATION	0.9998132396782422	WITHOUT_CLASSIFICATION	1.8676032175790787E-4	DESIGN
//unsupported	WITHOUT_CLASSIFICATION	0.9988361658907539	WITHOUT_CLASSIFICATION	0.0011638341092461385	DESIGN
//unsupported	WITHOUT_CLASSIFICATION	0.9988361658907539	WITHOUT_CLASSIFICATION	0.0011638341092461385	DESIGN
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.999023153937095	WITHOUT_CLASSIFICATION	9.768460629050988E-4	DESIGN
//the following two lines were added to ensure that this.params is not null, which //can happen with two-deep nested subqueries	WITHOUT_CLASSIFICATION	0.9992460667197268	WITHOUT_CLASSIFICATION	7.539332802731228E-4	DESIGN
//with two-deep subqueries, the same alias would get generated for //both using the old method (criteriaQuery.generateSQLAlias()), so //that is now used as a fallback if the main criteria alias isn't set	WITHOUT_CLASSIFICATION	0.9960511487344074	WITHOUT_CLASSIFICATION	0.003948851265592564	DESIGN
//implicit polymorphism not supported (would need a union)	WITHOUT_CLASSIFICATION	0.9867484202056582	WITHOUT_CLASSIFICATION	0.013251579794341717	DESIGN
//pull off the last ", "	WITHOUT_CLASSIFICATION	0.9999245469547519	WITHOUT_CLASSIFICATION	7.545304524811213E-5	DESIGN
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9988361658907539	WITHOUT_CLASSIFICATION	0.0011638341092461385	DESIGN
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces	WITHOUT_CLASSIFICATION	0.9998259625459757	WITHOUT_CLASSIFICATION	1.7403745402437223E-4	DESIGN
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource)	WITHOUT_CLASSIFICATION	0.9969998202994746	WITHOUT_CLASSIFICATION	0.003000179700525293	DESIGN
// NOT_SUPPORTED_SHOULD_USE_JDBC3_PreparedStatement.getGeneratedKeys_method	WITHOUT_CLASSIFICATION	0.9992082377773907	WITHOUT_CLASSIFICATION	7.917622226092409E-4	DESIGN
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.9998925924530214	WITHOUT_CLASSIFICATION	1.0740754697865835E-4	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992443954877838	WITHOUT_CLASSIFICATION	7.556045122162274E-4	DESIGN
// Oracle did add support for ANSI CASE statements in 9i	WITHOUT_CLASSIFICATION	0.9991314046433476	WITHOUT_CLASSIFICATION	8.685953566523293E-4	DESIGN
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9996647075467683	WITHOUT_CLASSIFICATION	3.3529245323177205E-4	DESIGN
// Informix doesn't have a bit type	WITHOUT_CLASSIFICATION	0.9982040335550316	WITHOUT_CLASSIFICATION	0.00179596644496842	DESIGN
// or BYTE // or TEXT? // or MONEY	WITHOUT_CLASSIFICATION	0.9994419532902445	WITHOUT_CLASSIFICATION	5.580467097555008E-4	DESIGN
// strip table-owner because Informix always returns constraint names as "<table-owner>.<constraint-name>"	WITHOUT_CLASSIFICATION	0.9998614426053645	WITHOUT_CLASSIFICATION	1.3855739463548562E-4	DESIGN
// build the map of standard ANSI SQL aggregation functions ~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995154576305041	WITHOUT_CLASSIFICATION	4.845423694959034E-4	DESIGN
//pre H3.2 behavior: super.getReturnType(ct, m);	WITHOUT_CLASSIFICATION	0.9982513466877845	WITHOUT_CLASSIFICATION	0.0017486533122154754	DESIGN
// finally use the sqltype if == on Hibernate types did not find a match.	WITHOUT_CLASSIFICATION	0.9997499759730443	WITHOUT_CLASSIFICATION	2.500240269556458E-4	DESIGN
//because numeric can be anything	WITHOUT_CLASSIFICATION	0.9976093812937519	WITHOUT_CLASSIFICATION	0.002390618706248139	DESIGN
// constructors and factory methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9949139853868315	WITHOUT_CLASSIFICATION	0.005086014613168468	DESIGN
// standard sql92 functions (can be overridden by subclasses)	WITHOUT_CLASSIFICATION	0.9960622155125302	WITHOUT_CLASSIFICATION	0.0039377844874698776	DESIGN
//map second/minute/hour/day/month/year to ANSI extract(), override on subclasses	WITHOUT_CLASSIFICATION	0.9951283479796734	WITHOUT_CLASSIFICATION	0.004871652020326555	DESIGN
// register hibernate types for default use in scalar sqlquery type auto detection	WITHOUT_CLASSIFICATION	0.9867528613375395	WITHOUT_CLASSIFICATION	0.013247138662460547	DESIGN
// database type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9923598886962335	WITHOUT_CLASSIFICATION	0.00764011130376658	DESIGN
// hibernate type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9923598886962335	WITHOUT_CLASSIFICATION	0.00764011130376658	DESIGN
// keyword support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9977946958436706	WITHOUT_CLASSIFICATION	0.0022053041563292316	DESIGN
// native identifier generatiion ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995021993895545	WITHOUT_CLASSIFICATION	4.978006104454863E-4	DESIGN
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9970257835159346	WITHOUT_CLASSIFICATION	0.002974216484065393	DESIGN
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9970257835159346	WITHOUT_CLASSIFICATION	0.002974216484065393	DESIGN
// GUID support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9970257835159346	WITHOUT_CLASSIFICATION	0.002974216484065393	DESIGN
// limit/offset support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9970257835159346	WITHOUT_CLASSIFICATION	0.002974216484065393	DESIGN
// by default we report no support	WITHOUT_CLASSIFICATION	0.9865282223856531	WITHOUT_CLASSIFICATION	0.013471777614346859	DESIGN
// by default we report no support for NOWAIT lock semantics	WITHOUT_CLASSIFICATION	0.807445988698756	WITHOUT_CLASSIFICATION	0.19255401130124408	DESIGN
// table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9988320586995361	WITHOUT_CLASSIFICATION	0.001167941300463953	DESIGN
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.973222194380163	WITHOUT_CLASSIFICATION	0.02677780561983696	DESIGN
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9974173729264518	WITHOUT_CLASSIFICATION	0.0025826270735481507	DESIGN
// current timestamp support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9969119526660489	WITHOUT_CLASSIFICATION	0.003088047333951043	DESIGN
// SQLException support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9970257835159346	WITHOUT_CLASSIFICATION	0.002974216484065393	DESIGN
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9970257835159346	WITHOUT_CLASSIFICATION	0.002974216484065393	DESIGN
// identifier quoting support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9970633046820931	WITHOUT_CLASSIFICATION	0.0029366953179068385	DESIGN
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9970257835159346	WITHOUT_CLASSIFICATION	0.002974216484065393	DESIGN
// grrr... for differentiation of mysql storage engines	WITHOUT_CLASSIFICATION	0.9993324812842209	WITHOUT_CLASSIFICATION	6.675187157790177E-4	DESIGN
// Informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992082377773907	WITHOUT_CLASSIFICATION	7.917622226092409E-4	DESIGN
// return false here, as most databases do not properly support this construct...	WITHOUT_CLASSIFICATION	0.9963932025353203	WITHOUT_CLASSIFICATION	0.0036067974646797397	DESIGN
// Mckoi has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.998525788614448	WITHOUT_CLASSIFICATION	0.0014742113855520983	DESIGN
// Oracle8 and previous define only a "DATE" type which //      is used to represent all aspects of date/time	WITHOUT_CLASSIFICATION	0.9889652835016403	WITHOUT_CLASSIFICATION	0.011034716498359708	DESIGN
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9991473825237043	WITHOUT_CLASSIFICATION	8.526174762957887E-4	DESIGN
//" cascade";	WITHOUT_CLASSIFICATION	0.9988361658907539	WITHOUT_CLASSIFICATION	0.0011638341092461385	DESIGN
//trim off the length/precision/scale	WITHOUT_CLASSIFICATION	0.9994417275567511	WITHOUT_CLASSIFICATION	5.582724432488152E-4	DESIGN
/*public boolean dropTemporaryTableAfterUse() {	WITHOUT_CLASSIFICATION	0.9991714650385102	WITHOUT_CLASSIFICATION	8.285349614898115E-4	DESIGN
// CHECK VIOLATION	WITHOUT_CLASSIFICATION	0.9997037504389661	WITHOUT_CLASSIFICATION	2.962495610339991E-4	DESIGN
// UNIQUE VIOLATION	WITHOUT_CLASSIFICATION	0.9997037504389661	WITHOUT_CLASSIFICATION	2.962495610339991E-4	DESIGN
// FOREIGN KEY VIOLATION	WITHOUT_CLASSIFICATION	0.9998306550305643	WITHOUT_CLASSIFICATION	1.693449694357124E-4	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992443954877838	WITHOUT_CLASSIFICATION	7.556045122162274E-4	DESIGN
// NOT NULL VIOLATION	WITHOUT_CLASSIFICATION	0.9997003569820715	WITHOUT_CLASSIFICATION	2.996430179285453E-4	DESIGN
// ALL OTHER	WITHOUT_CLASSIFICATION	0.9997033282383876	WITHOUT_CLASSIFICATION	2.966717616123508E-4	DESIGN
// Register the type of the out param - PostgreSQL uses Types.OTHER	WITHOUT_CLASSIFICATION	0.976374399532674	WITHOUT_CLASSIFICATION	0.02362560046732591	DESIGN
// seems to not really... //	WITHOUT_CLASSIFICATION	0.9997384545695789	WITHOUT_CLASSIFICATION	2.615454304211111E-4	DESIGN
// seems to have spotty LOB suppport	WITHOUT_CLASSIFICATION	0.9992035085953551	WITHOUT_CLASSIFICATION	7.964914046448468E-4	DESIGN
// HHH-2300	WITHOUT_CLASSIFICATION	0.9997037504389661	WITHOUT_CLASSIFICATION	2.962495610339991E-4	DESIGN
// ignore (probably H2 not in the classpath)	WITHOUT_CLASSIFICATION	0.9990294544414505	WITHOUT_CLASSIFICATION	9.705455585495332E-4	DESIGN
// Numeric Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992082377773907	WITHOUT_CLASSIFICATION	7.917622226092409E-4	DESIGN
// String Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9989062913173739	WITHOUT_CLASSIFICATION	0.0010937086826261033	DESIGN
// Time and Date Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9990834344668966	WITHOUT_CLASSIFICATION	9.16565533103426E-4	DESIGN
// System Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992205980828063	WITHOUT_CLASSIFICATION	7.794019171937512E-4	DESIGN
// not null is implicit	WITHOUT_CLASSIFICATION	0.9995093539817472	WITHOUT_CLASSIFICATION	4.906460182528009E-4	DESIGN
// 23000: Check constraint violation: {0} // 23001: Unique index or primary key violation: {0}	WITHOUT_CLASSIFICATION	0.999359216668682	WITHOUT_CLASSIFICATION	6.407833313179995E-4	DESIGN
// Display the dialect version.	WITHOUT_CLASSIFICATION	0.9997369894333661	WITHOUT_CLASSIFICATION	2.6301056663396305E-4	DESIGN
// The RDMS concat() function only supports 2 parameters	WITHOUT_CLASSIFICATION	0.9999699415094329	WITHOUT_CLASSIFICATION	3.0058490567132065E-5	DESIGN
// Dialect method overrides ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9989157909489141	WITHOUT_CLASSIFICATION	0.0010842090510859291	DESIGN
// Original Dialect.java returns " for update";	WITHOUT_CLASSIFICATION	0.9981369571801006	WITHOUT_CLASSIFICATION	0.0018630428198994505	DESIGN
// Verify the state of this new method in Hibernate 3.0 Dialect.java	WITHOUT_CLASSIFICATION	0.9976713268598352	WITHOUT_CLASSIFICATION	0.002328673140164837	DESIGN
// Origial Dialect.java returns true;	WITHOUT_CLASSIFICATION	0.999115323544754	WITHOUT_CLASSIFICATION	8.846764552461001E-4	DESIGN
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9986581243116908	WITHOUT_CLASSIFICATION	0.0013418756883093374	DESIGN
// *** Sequence methods - start. The RDMS dialect needs these	WITHOUT_CLASSIFICATION	0.9846001694735866	WITHOUT_CLASSIFICATION	0.015399830526413402	DESIGN
// methods to make it possible to use the Native Id generator	WITHOUT_CLASSIFICATION	0.9986974538380216	WITHOUT_CLASSIFICATION	0.0013025461619785024	DESIGN
// The where clause was added to eliminate this statement from Brute Force Searches.	WITHOUT_CLASSIFICATION	0.9974352588710265	WITHOUT_CLASSIFICATION	0.002564741128973552	DESIGN
// *** Sequence methods - end	WITHOUT_CLASSIFICATION	0.994500909541342	WITHOUT_CLASSIFICATION	0.005499090458658002	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992443954877838	WITHOUT_CLASSIFICATION	7.556045122162274E-4	DESIGN
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9991473825237043	WITHOUT_CLASSIFICATION	8.526174762957887E-4	DESIGN
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.9601177660287623	WITHOUT_CLASSIFICATION	0.039882233971237684	DESIGN
// Used with DROP TABLE to delete all records in the table.	WITHOUT_CLASSIFICATION	0.9998299491709153	WITHOUT_CLASSIFICATION	1.7005082908462353E-4	DESIGN
// RDMS supports the UNION ALL clause.	WITHOUT_CLASSIFICATION	0.9996349399736658	WITHOUT_CLASSIFICATION	3.6506002633418863E-4	DESIGN
// RDMS has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.998525788614448	WITHOUT_CLASSIFICATION	0.0014742113855520983	DESIGN
// Multi-param dialect functions...	WITHOUT_CLASSIFICATION	0.9992082377773907	WITHOUT_CLASSIFICATION	7.917622226092409E-4	DESIGN
// function templates	WITHOUT_CLASSIFICATION	0.9999510983488684	WITHOUT_CLASSIFICATION	4.890165113150516E-5	DESIGN
//not null is implicit	WITHOUT_CLASSIFICATION	0.9980945627493477	WITHOUT_CLASSIFICATION	0.0019054372506523475	DESIGN
// this assumes schema support, which is present in 1.8.0 and later...	WITHOUT_CLASSIFICATION	0.9993556183858318	WITHOUT_CLASSIFICATION	6.443816141682262E-4	DESIGN
// HSQLDB only supports READ_UNCOMMITTED transaction isolation	WITHOUT_CLASSIFICATION	0.9997136186684045	WITHOUT_CLASSIFICATION	2.863813315954875E-4	DESIGN
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9993194173583605	WITHOUT_CLASSIFICATION	6.805826416394576E-4	DESIGN
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9992251155789361	WITHOUT_CLASSIFICATION	7.748844210638698E-4	DESIGN
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9992082377773907	WITHOUT_CLASSIFICATION	7.917622226092409E-4	DESIGN
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.9996081338127151	WITHOUT_CLASSIFICATION	3.9186618728491554E-4	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992443954877838	WITHOUT_CLASSIFICATION	7.556045122162274E-4	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992443954877838	WITHOUT_CLASSIFICATION	7.556045122162274E-4	DESIGN
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9978659851648554	WITHOUT_CLASSIFICATION	0.0021340148351447524	DESIGN
//	WITHOUT_CLASSIFICATION	0.9997612566512477	WITHOUT_CLASSIFICATION	2.3874334875219311E-4	DESIGN
// TimesTen has no BLOB/CLOB support, but these types may be suitable  // for some applications. The length is limited to 4 million bytes.	WITHOUT_CLASSIFICATION	0.9688573717626028	WITHOUT_CLASSIFICATION	0.031142628237397194	DESIGN
// new methods in dialect3	WITHOUT_CLASSIFICATION	0.9996916602873869	WITHOUT_CLASSIFICATION	3.083397126131691E-4	DESIGN
/*public boolean supportsForUpdateNowait() {	WITHOUT_CLASSIFICATION	0.9991714650385102	WITHOUT_CLASSIFICATION	8.285349614898115E-4	DESIGN
// TimesTen has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.998525788614448	WITHOUT_CLASSIFICATION	0.0014742113855520983	DESIGN
// iterate entries ordered by capacity to find first fit	WITHOUT_CLASSIFICATION	0.9455972670856425	WITHOUT_CLASSIFICATION	0.05440273291435754	DESIGN
// add new ordered map	WITHOUT_CLASSIFICATION	0.9998950647700252	WITHOUT_CLASSIFICATION	1.0493522997478712E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9997612566512477	WITHOUT_CLASSIFICATION	2.3874334875219311E-4	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992443954877838	WITHOUT_CLASSIFICATION	7.556045122162274E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9997612566512477	WITHOUT_CLASSIFICATION	2.3874334875219311E-4	DESIGN
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9990886037685556	WITHOUT_CLASSIFICATION	9.113962314444546E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9997612566512477	WITHOUT_CLASSIFICATION	2.3874334875219311E-4	DESIGN
//registerColumnType data types	WITHOUT_CLASSIFICATION	0.9957629081450122	WITHOUT_CLASSIFICATION	0.004237091854987842	DESIGN
// hibernate seems to ignore this type...	WITHOUT_CLASSIFICATION	0.98957715359794	WITHOUT_CLASSIFICATION	0.010422846402060022	DESIGN
// IBID for current_time and current_date	WITHOUT_CLASSIFICATION	0.9981635367745345	WITHOUT_CLASSIFICATION	0.0018364632254655557	DESIGN
// Tell hibernate to use getBytes instead of getBinaryStream	WITHOUT_CLASSIFICATION	0.9975534354024124	WITHOUT_CLASSIFICATION	0.0024465645975875415	DESIGN
// No batch statements	WITHOUT_CLASSIFICATION	0.9999286537413041	WITHOUT_CLASSIFICATION	7.134625869587995E-5	DESIGN
/*	WITHOUT_CLASSIFICATION	0.9973303510783034	WITHOUT_CLASSIFICATION	0.0026696489216966697	DESIGN
//no pointbase BIT	WITHOUT_CLASSIFICATION	0.9991593101912597	WITHOUT_CLASSIFICATION	8.406898087402787E-4	DESIGN
//no pointbase TINYINT	WITHOUT_CLASSIFICATION	0.9995185416720591	WITHOUT_CLASSIFICATION	4.814583279409714E-4	DESIGN
// Pointbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.998525788614448	WITHOUT_CLASSIFICATION	0.0014742113855520983	DESIGN
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9991473825237043	WITHOUT_CLASSIFICATION	8.526174762957887E-4	DESIGN
// The current_timestamp is more accurate, but only known to be supported // in SQL Server 7.0 and later (i.e., Sybase not known to support it at all)	WITHOUT_CLASSIFICATION	0.9906853673729495	WITHOUT_CLASSIFICATION	0.009314632627050429	DESIGN
// SQL Server (at least up through 2005) does not support defining // cascade delete constraints which can circel back to the mutating // table	WITHOUT_CLASSIFICATION	0.9998923957033589	WITHOUT_CLASSIFICATION	1.0760429664110644E-4	DESIGN
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9865923441576472	WITHOUT_CLASSIFICATION	0.013407655842352779	DESIGN
//	WITHOUT_CLASSIFICATION	0.9997612566512477	WITHOUT_CLASSIFICATION	2.3874334875219311E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9997612566512477	WITHOUT_CLASSIFICATION	2.3874334875219311E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9997612566512477	WITHOUT_CLASSIFICATION	2.3874334875219311E-4	DESIGN
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9991473825237043	WITHOUT_CLASSIFICATION	8.526174762957887E-4	DESIGN
/* package-private */	WITHOUT_CLASSIFICATION	0.9999675078611377	WITHOUT_CLASSIFICATION	3.24921388622432E-5	DESIGN
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9990886037685556	WITHOUT_CLASSIFICATION	9.113962314444546E-4	DESIGN
//Sybase BIT type does not support null values	WITHOUT_CLASSIFICATION	0.9834673693465548	WITHOUT_CLASSIFICATION	0.016532630653445145	DESIGN
//	WITHOUT_CLASSIFICATION	0.9997612566512477	WITHOUT_CLASSIFICATION	2.3874334875219311E-4	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992443954877838	WITHOUT_CLASSIFICATION	7.556045122162274E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9997612566512477	WITHOUT_CLASSIFICATION	2.3874334875219311E-4	DESIGN
//not null ... (start with 1) is implicit	WITHOUT_CLASSIFICATION	0.9675015391114944	WITHOUT_CLASSIFICATION	0.032498460888505686	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992443954877838	WITHOUT_CLASSIFICATION	7.556045122162274E-4	DESIGN
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.9965217630900248	WITHOUT_CLASSIFICATION	0.0034782369099751933	DESIGN
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9993194173583605	WITHOUT_CLASSIFICATION	6.805826416394576E-4	DESIGN
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9992251155789361	WITHOUT_CLASSIFICATION	7.748844210638698E-4	DESIGN
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9992082377773907	WITHOUT_CLASSIFICATION	7.917622226092409E-4	DESIGN
// add another (inner) nested select // add the main query // close off the inner nested select	WITHOUT_CLASSIFICATION	0.9999928200880983	WITHOUT_CLASSIFICATION	7.179911901637291E-6	DESIGN
// add the main query	WITHOUT_CLASSIFICATION	0.9999625782169779	WITHOUT_CLASSIFICATION	3.7421783022168304E-5	DESIGN
//add the restriction to the outer select	WITHOUT_CLASSIFICATION	0.9990831410231956	WITHOUT_CLASSIFICATION	9.16858976804308E-4	DESIGN
// This assumes you will want to ignore any update counts 	WITHOUT_CLASSIFICATION	0.9986409441067794	WITHOUT_CLASSIFICATION	0.0013590558932205874	DESIGN
// You may still have other ResultSets or update counts left to process here  // but you can't do it now or the ResultSet you just got will be closed 	WITHOUT_CLASSIFICATION	0.9994863374740582	WITHOUT_CLASSIFICATION	5.13662525941695E-4	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992443954877838	WITHOUT_CLASSIFICATION	7.556045122162274E-4	DESIGN
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9991473825237043	WITHOUT_CLASSIFICATION	8.526174762957887E-4	DESIGN
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.9996081338127151	WITHOUT_CLASSIFICATION	3.9186618728491554E-4	DESIGN
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9978659851648554	WITHOUT_CLASSIFICATION	0.0021340148351447524	DESIGN
//	WITHOUT_CLASSIFICATION	0.9997612566512477	WITHOUT_CLASSIFICATION	2.3874334875219311E-4	DESIGN
// features which change between 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992348715874092	WITHOUT_CLASSIFICATION	7.65128412590749E-4	DESIGN
// features which remain constant across 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9985636367193329	WITHOUT_CLASSIFICATION	0.001436363280667045	DESIGN
// binary %Stream // character %Stream	WITHOUT_CLASSIFICATION	0.9996772290006067	WITHOUT_CLASSIFICATION	3.2277099939318794E-4	DESIGN
//getDefaultProperties().setProperty(Environment.STATEMENT_BATCH_SIZE, NO_BATCH);	WITHOUT_CLASSIFICATION	0.9968940233176451	WITHOUT_CLASSIFICATION	0.0031059766823548695	DESIGN
// hibernate impelemnts cast in Dialect.java	WITHOUT_CLASSIFICATION	0.9978087071155529	WITHOUT_CLASSIFICATION	0.002191292884447081	DESIGN
// aggregate functions shouldn't be registered, right? //registerFunction( "list", new StandardSQLFunction("list",Hibernate.STRING) ); // stopped on $list	WITHOUT_CLASSIFICATION	0.9986048399872555	WITHOUT_CLASSIFICATION	0.001395160012744525	DESIGN
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9970257835159346	WITHOUT_CLASSIFICATION	0.002974216484065393	DESIGN
// below is for Cache' that don't have str in 2007.1 there is str and we register str directly	WITHOUT_CLASSIFICATION	0.9494092649837774	WITHOUT_CLASSIFICATION	0.05059073501622256	DESIGN
// note that %string is deprecated	WITHOUT_CLASSIFICATION	0.9809888417405577	WITHOUT_CLASSIFICATION	0.019011158259442325	DESIGN
// %upper is deprecated	WITHOUT_CLASSIFICATION	0.9988509138650418	WITHOUT_CLASSIFICATION	0.0011490861349582738	DESIGN
// The syntax used to add a foreign key constraint to a table.	WITHOUT_CLASSIFICATION	0.9998773755266437	WITHOUT_CLASSIFICATION	1.226244733562716E-4	DESIGN
// identifier-commalist	WITHOUT_CLASSIFICATION	0.999830379035844	WITHOUT_CLASSIFICATION	1.6962096415598253E-4	DESIGN
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9970257835159346	WITHOUT_CLASSIFICATION	0.002974216484065393	DESIGN
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9970257835159346	WITHOUT_CLASSIFICATION	0.002974216484065393	DESIGN
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.973222194380163	WITHOUT_CLASSIFICATION	0.02677780561983696	DESIGN
// identifier-commalist	WITHOUT_CLASSIFICATION	0.999830379035844	WITHOUT_CLASSIFICATION	1.6962096415598253E-4	DESIGN
// The syntax used to add a column to a table	WITHOUT_CLASSIFICATION	0.9998227408905308	WITHOUT_CLASSIFICATION	1.772591094691788E-4	DESIGN
// Completely optional cascading drop clause.	WITHOUT_CLASSIFICATION	0.9989466515771436	WITHOUT_CLASSIFICATION	0.0010533484228564887	DESIGN
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9961665115954329	WITHOUT_CLASSIFICATION	0.0038334884045670946	DESIGN
// LIMIT support (ala TOP) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9970257835159346	WITHOUT_CLASSIFICATION	0.002974216484065393	DESIGN
// InterSystems Cache' does not current support "SELECT ... FOR UPDATE" syntax... // Set your transaction mode to READ_COMMITTED before using	WITHOUT_CLASSIFICATION	0.8958099455186431	WITHOUT_CLASSIFICATION	0.10419005448135692	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992443954877838	WITHOUT_CLASSIFICATION	7.556045122162274E-4	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992443954877838	WITHOUT_CLASSIFICATION	7.556045122162274E-4	DESIGN
/*<String>*/	WITHOUT_CLASSIFICATION	0.9988361658907539	WITHOUT_CLASSIFICATION	0.0011638341092461385	DESIGN
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9974173729264518	WITHOUT_CLASSIFICATION	0.0025826270735481507	DESIGN
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9970257835159346	WITHOUT_CLASSIFICATION	0.002974216484065393	DESIGN
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9986581243116908	WITHOUT_CLASSIFICATION	0.0013418756883093374	DESIGN
// Does the LIMIT clause come at the start of the SELECT statement, rather than at the end?	WITHOUT_CLASSIFICATION	0.9958372581964448	WITHOUT_CLASSIFICATION	0.004162741803555301	DESIGN
// Does the LIMIT clause take a "maximum" row number instead of a total number of returned rows?	WITHOUT_CLASSIFICATION	0.9991074527748544	WITHOUT_CLASSIFICATION	8.92547225145498E-4	DESIGN
// The name of the SQL function that transforms a string to lowercase	WITHOUT_CLASSIFICATION	0.9998847522419555	WITHOUT_CLASSIFICATION	1.1524775804460754E-4	DESIGN
// Create an OuterJoinGenerator for this dialect.	WITHOUT_CLASSIFICATION	0.9965592164554258	WITHOUT_CLASSIFICATION	0.003440783544574291	DESIGN
// The keyword used to insert a row without specifying // any column values	WITHOUT_CLASSIFICATION	0.9999768930221719	WITHOUT_CLASSIFICATION	2.3106977828156467E-5	DESIGN
//registerFunction( "trim", new StandardSQLFunction( "trim", Hibernate.STRING ) );	WITHOUT_CLASSIFICATION	0.9957776677981861	WITHOUT_CLASSIFICATION	0.004222332201813903	DESIGN
//skip the FROM keyword in params	WITHOUT_CLASSIFICATION	0.9988704497419687	WITHOUT_CLASSIFICATION	0.0011295502580312602	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.9988361658907539	WITHOUT_CLASSIFICATION	0.0011638341092461385	DESIGN
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.9998925924530214	WITHOUT_CLASSIFICATION	1.0740754697865835E-4	DESIGN
// SQLFunction implementation	WITHOUT_CLASSIFICATION	0.9996974102007942	WITHOUT_CLASSIFICATION	3.0258979920580996E-4	DESIGN
// conceivable that the dialect ctor could throw HibernateExceptions, so don't re-wrap	WITHOUT_CLASSIFICATION	0.997869388205888	WITHOUT_CLASSIFICATION	0.002130611794112039	DESIGN
// register the standard dialect resolver	WITHOUT_CLASSIFICATION	0.9987887374678872	WITHOUT_CLASSIFICATION	0.0012112625321127625	DESIGN
// register resolvers set via Environment property	WITHOUT_CLASSIFICATION	0.9995866642011809	WITHOUT_CLASSIFICATION	4.1333579881904826E-4	DESIGN
// kept for backward compatibility until after the 3.1beta5 release of HA	WITHOUT_CLASSIFICATION	0.999911006723325	WITHOUT_CLASSIFICATION	8.899327667502892E-5	DESIGN
//cache the hashcode	WITHOUT_CLASSIFICATION	0.9996403068776375	WITHOUT_CLASSIFICATION	3.596931223624937E-4	DESIGN
// the CascadingAction contract ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997082525393627	WITHOUT_CLASSIFICATION	2.9174746063730653E-4	DESIGN
// the CascadingAction implementations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997048624849747	WITHOUT_CLASSIFICATION	2.951375150253615E-4	DESIGN
// delete does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9971353776846741	WITHOUT_CLASSIFICATION	0.0028646223153258716	DESIGN
// orphans should be deleted during delete	WITHOUT_CLASSIFICATION	0.9955269738319728	WITHOUT_CLASSIFICATION	0.004473026168027232	DESIGN
/*(LockMode) anything*/	WITHOUT_CLASSIFICATION	0.9993333866232158	WITHOUT_CLASSIFICATION	6.666133767841301E-4	DESIGN
// lock doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9994284905941551	WITHOUT_CLASSIFICATION	5.715094058449721E-4	DESIGN
// refresh doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9995822921932134	WITHOUT_CLASSIFICATION	4.177078067867367E-4	DESIGN
// evicts don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9980214905697924	WITHOUT_CLASSIFICATION	0.001978509430207618	DESIGN
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9989726415214999	WITHOUT_CLASSIFICATION	0.001027358478500064	DESIGN
// orphans should be deleted during save/update	WITHOUT_CLASSIFICATION	0.9959178283493937	WITHOUT_CLASSIFICATION	0.00408217165060622	DESIGN
// for deprecated saveOrUpdateCopy()	WITHOUT_CLASSIFICATION	0.9932668030425764	WITHOUT_CLASSIFICATION	0.006733196957423623	DESIGN
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9980214905697924	WITHOUT_CLASSIFICATION	0.001978509430207618	DESIGN
//a proxy cannot be transient and it breaks ForeignKeys.isTransient	WITHOUT_CLASSIFICATION	0.9991747479725509	WITHOUT_CLASSIFICATION	8.25252027449149E-4	DESIGN
// replicate does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9973860583588546	WITHOUT_CLASSIFICATION	0.0026139416411453498	DESIGN
// static helper methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.998322354993033	WITHOUT_CLASSIFICATION	0.0016776450069669407	DESIGN
// handles arrays and newly instantiated collections	WITHOUT_CLASSIFICATION	0.9994350023014564	WITHOUT_CLASSIFICATION	5.649976985434618E-4	DESIGN
// Actually the semantics of the next three are really "Bag" // Note that, unlike objects, collection insertions, updates, // deletions are not really remembered between flushes. We // just re-use the same Lists for convenience.	WITHOUT_CLASSIFICATION	0.7938783677630106	WITHOUT_CLASSIFICATION	0.2061216322369894	DESIGN
// Add these directly to the executions queue	WITHOUT_CLASSIFICATION	0.9994655352045192	WITHOUT_CLASSIFICATION	5.344647954808097E-4	DESIGN
// continue loop	WITHOUT_CLASSIFICATION	0.9998685398624718	WITHOUT_CLASSIFICATION	1.314601375282964E-4	DESIGN
//sort the updates by fk	WITHOUT_CLASSIFICATION	0.99961830093643	WITHOUT_CLASSIFICATION	3.8169906357006246E-4	DESIGN
//sort the updates by pk	WITHOUT_CLASSIFICATION	0.99961830093643	WITHOUT_CLASSIFICATION	3.8169906357006246E-4	DESIGN
// the mapping of entity names to their latest batch numbers.	WITHOUT_CLASSIFICATION	0.9997570468431396	WITHOUT_CLASSIFICATION	2.429531568603849E-4	DESIGN
// the map of batch numbers to EntityInsertAction lists	WITHOUT_CLASSIFICATION	0.9995792909461103	WITHOUT_CLASSIFICATION	4.2070905388980317E-4	DESIGN
//optimize the hash size to eliminate a rehash.	WITHOUT_CLASSIFICATION	0.9958159387592626	WITHOUT_CLASSIFICATION	0.0041840612407374085	DESIGN
// the list of entity names that indicate the batch number	WITHOUT_CLASSIFICATION	0.9999441977726959	WITHOUT_CLASSIFICATION	5.580222730403365E-5	DESIGN
// remove the current element from insertions. It will be added back later.	WITHOUT_CLASSIFICATION	0.9998902444973664	WITHOUT_CLASSIFICATION	1.0975550263358607E-4	DESIGN
// the entity associated with the current action.	WITHOUT_CLASSIFICATION	0.9984670739229158	WITHOUT_CLASSIFICATION	0.0015329260770842207	DESIGN
// There is already an existing batch for this type of entity. // Check to see if the latest batch is acceptable.	WITHOUT_CLASSIFICATION	0.9472904523180704	WITHOUT_CLASSIFICATION	0.05270954768192955	DESIGN
// now rebuild the insertions list. There is a batch for each entry in the name list.	WITHOUT_CLASSIFICATION	0.9997812936809392	WITHOUT_CLASSIFICATION	2.1870631906083002E-4	DESIGN
// the current batch number is the latest batch for this entity type.	WITHOUT_CLASSIFICATION	0.9979387445187871	WITHOUT_CLASSIFICATION	0.002061255481212971	DESIGN
// loop through all the associations of the current entity and make sure that they are processed // before the current batch number	WITHOUT_CLASSIFICATION	0.9989295730648078	WITHOUT_CLASSIFICATION	0.001070426935192247	DESIGN
// find the batch number associated with the current association, if any.	WITHOUT_CLASSIFICATION	0.9996607758347792	WITHOUT_CLASSIFICATION	3.3922416522082585E-4	DESIGN
// create a new batch for this type. The batch number is the number of current batches.	WITHOUT_CLASSIFICATION	0.9989418005178067	WITHOUT_CLASSIFICATION	0.0010581994821932806	DESIGN
// loop through all the associated entities and make sure they have been // processed before the latest // batch associated with this entity type.	WITHOUT_CLASSIFICATION	0.9976232831345101	WITHOUT_CLASSIFICATION	0.002376716865489841	DESIGN
// since this entity will now be processed in the latest possible batch, // we can be assured that it will come after all other associations, // there's not need to continue checking.	WITHOUT_CLASSIFICATION	0.9995056101807478	WITHOUT_CLASSIFICATION	4.943898192522291E-4	DESIGN
//cascade to current collection elements	WITHOUT_CLASSIFICATION	0.992913701138647	WITHOUT_CLASSIFICATION	0.00708629886135294	DESIGN
//not really necessary, but good for consistency...	WITHOUT_CLASSIFICATION	0.9878133689776181	WITHOUT_CLASSIFICATION	0.012186631022381851	DESIGN
// we can't cascade to non-embedded elements	WITHOUT_CLASSIFICATION	0.9990465885276019	WITHOUT_CLASSIFICATION	9.53411472398067E-4	DESIGN
//a newly instantiated collection can't have orphans	WITHOUT_CLASSIFICATION	0.9738942301532003	WITHOUT_CLASSIFICATION	0.02610576984679963	DESIGN
// handle orphaned entities!!	WITHOUT_CLASSIFICATION	0.9996729188198681	WITHOUT_CLASSIFICATION	3.270811801318355E-4	DESIGN
// Loaded entity instances, by EntityUniqueKey	WITHOUT_CLASSIFICATION	0.9987786365188132	WITHOUT_CLASSIFICATION	0.001221363481186866	DESIGN
// Identity map of EntityEntry instances, by the entity instance	WITHOUT_CLASSIFICATION	0.9996595774440833	WITHOUT_CLASSIFICATION	3.404225559166974E-4	DESIGN
// Entity proxies, by EntityKey	WITHOUT_CLASSIFICATION	0.998781022257865	WITHOUT_CLASSIFICATION	0.001218977742134939	DESIGN
// Snapshots of current database state for entities // that have *not* been loaded	WITHOUT_CLASSIFICATION	0.9990061540371943	WITHOUT_CLASSIFICATION	9.93845962805716E-4	DESIGN
// Identity map of array holder ArrayHolder instances, by the array instance	WITHOUT_CLASSIFICATION	0.9998807506920312	WITHOUT_CLASSIFICATION	1.1924930796882906E-4	DESIGN
// Collection wrappers, by the CollectionKey //key=CollectionKey, value=PersistentCollection	WITHOUT_CLASSIFICATION	0.9994524052963183	WITHOUT_CLASSIFICATION	5.475947036817583E-4	DESIGN
// Set of EntityKeys of deleted objects	WITHOUT_CLASSIFICATION	0.9994110697062124	WITHOUT_CLASSIFICATION	5.889302937874727E-4	DESIGN
// properties that we have tried to load, and not found in the database	WITHOUT_CLASSIFICATION	0.9990286564413956	WITHOUT_CLASSIFICATION	9.713435586043893E-4	DESIGN
// A list of collection wrappers that were instantiating during result set // processing, that we will need to initialize at the end of the query	WITHOUT_CLASSIFICATION	0.9754387566004614	WITHOUT_CLASSIFICATION	0.024561243399538545	DESIGN
// A container for collections we load up when the owning entity is not // yet loaded ... for now, this is purely transient!	WITHOUT_CLASSIFICATION	0.9983181928672876	WITHOUT_CLASSIFICATION	0.0016818071327124283	DESIGN
// Downgrade locks	WITHOUT_CLASSIFICATION	0.9997132112162772	WITHOUT_CLASSIFICATION	2.86788783722838E-4	DESIGN
// any earlier proxy takes precedence	WITHOUT_CLASSIFICATION	0.9998282410646859	WITHOUT_CLASSIFICATION	1.7175893531401755E-4	DESIGN
//unwrap the object	WITHOUT_CLASSIFICATION	0.9991867685496626	WITHOUT_CLASSIFICATION	8.132314503373955E-4	DESIGN
//initialize + unwrap the object	WITHOUT_CLASSIFICATION	0.9994363083875138	WITHOUT_CLASSIFICATION	5.636916124861913E-4	DESIGN
//return the proxied object	WITHOUT_CLASSIFICATION	0.9995249139882338	WITHOUT_CLASSIFICATION	4.7508601176624986E-4	DESIGN
//overwrite old proxy	WITHOUT_CLASSIFICATION	0.9997913426911449	WITHOUT_CLASSIFICATION	2.086573088551686E-4	DESIGN
// early exit...	WITHOUT_CLASSIFICATION	0.9997733097211992	WITHOUT_CLASSIFICATION	2.2669027880090623E-4	DESIGN
// or should it actually throw an exception?	WITHOUT_CLASSIFICATION	0.9917830800991804	WITHOUT_CLASSIFICATION	0.008216919900819554	DESIGN
//treat it just like a new collection	WITHOUT_CLASSIFICATION	0.9835999229785116	WITHOUT_CLASSIFICATION	0.01640007702148832	DESIGN
//do this work only at the very highest level of the load //don't let this method be called recursively	WITHOUT_CLASSIFICATION	0.9938424481244492	WITHOUT_CLASSIFICATION	0.0061575518755508495	DESIGN
//note that each iteration of the loop may add new elements	WITHOUT_CLASSIFICATION	0.9999775429322594	WITHOUT_CLASSIFICATION	2.2457067740686316E-5	DESIGN
//it might be an unwrapped collection reference! //try to find a wrapper (slowish)	WITHOUT_CLASSIFICATION	0.9213050366100407	WITHOUT_CLASSIFICATION	0.07869496338995925	DESIGN
/*public boolean isNonExistant(EntityKey key) {	WITHOUT_CLASSIFICATION	0.9991714650385102	WITHOUT_CLASSIFICATION	8.285349614898115E-4	DESIGN
/*public boolean isNonExistant(EntityUniqueKey key) {	WITHOUT_CLASSIFICATION	0.9991714650385102	WITHOUT_CLASSIFICATION	8.285349614898115E-4	DESIGN
// iterate all the entities currently associated with the persistence context.	WITHOUT_CLASSIFICATION	0.9995650274532341	WITHOUT_CLASSIFICATION	4.349725467659126E-4	DESIGN
// does this entity entry pertain to the entity persister in which we are interested (owner)?	WITHOUT_CLASSIFICATION	0.9971061123332312	WITHOUT_CLASSIFICATION	0.0028938876667687612	DESIGN
//check if the managed object is the parent	WITHOUT_CLASSIFICATION	0.994828244991387	WITHOUT_CLASSIFICATION	0.005171755008612984	DESIGN
// otherwise, the proxy was pruned during the serialization process	WITHOUT_CLASSIFICATION	0.9999797482189563	WITHOUT_CLASSIFICATION	2.0251781043748506E-5	DESIGN
// adds remove as a sort-of alias for delete...	WITHOUT_CLASSIFICATION	0.9952438623278026	WITHOUT_CLASSIFICATION	0.0047561376721974805	DESIGN
//bad cast	WITHOUT_CLASSIFICATION	0.9981478144352156	WITHOUT_CLASSIFICATION	0.0018521855647844526	DESIGN
//return lhsPersister.getSubclassPropertyColumnNames(property);	WITHOUT_CLASSIFICATION	0.9968317795207357	WITHOUT_CLASSIFICATION	0.003168220479264371	DESIGN
//property-refs for associations defined on a //component are not supported, so no need to slice	WITHOUT_CLASSIFICATION	0.9732030149374716	WITHOUT_CLASSIFICATION	0.026796985062528304	DESIGN
//if there is no property-ref, assume the join //is to the subclass table (ie. the table of the //subclass that the association belongs to)	WITHOUT_CLASSIFICATION	0.9997976700176967	WITHOUT_CLASSIFICATION	2.023299823032197E-4	DESIGN
//handle a property-ref	WITHOUT_CLASSIFICATION	0.9989186263259853	WITHOUT_CLASSIFICATION	0.0010813736740146332	DESIGN
/*NativeSQLQueryReturn*/	WITHOUT_CLASSIFICATION	0.9993333866232158	WITHOUT_CLASSIFICATION	6.666133767841301E-4	DESIGN
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9989191633904723	WITHOUT_CLASSIFICATION	0.001080836609527827	DESIGN
// why is all others non final ?	WITHOUT_CLASSIFICATION	0.9620526891084598	WITHOUT_CLASSIFICATION	0.037947310891540284	DESIGN
//this.forceCacheRefresh = forceCacheRefresh;	WITHOUT_CLASSIFICATION	0.9995619846384487	WITHOUT_CLASSIFICATION	4.380153615512357E-4	DESIGN
// HELLA IMPORTANT OPTIMIZATION!!!	WITHOUT_CLASSIFICATION	0.9992082377773907	WITHOUT_CLASSIFICATION	7.917622226092409E-4	DESIGN
/*return that.type.equals(type) && 	WITHOUT_CLASSIFICATION	0.9967486984836242	WITHOUT_CLASSIFICATION	0.003251301516375794	DESIGN
//Must occur after resolving identifiers!	WITHOUT_CLASSIFICATION	0.997991664656334	WITHOUT_CLASSIFICATION	0.002008335343666044	DESIGN
//take a snapshot	WITHOUT_CLASSIFICATION	0.9982086277564712	WITHOUT_CLASSIFICATION	0.0017913722435286838	DESIGN
// do a check	WITHOUT_CLASSIFICATION	0.9996124866787846	WITHOUT_CLASSIFICATION	3.8751332121553467E-4	DESIGN
// the owning entity may have been deleted and its identifier unset due to // identifier-rollback; in which case, try to look up its identifier from // the persistence context	WITHOUT_CLASSIFICATION	0.9988561190978317	WITHOUT_CLASSIFICATION	0.0011438809021683484	DESIGN
// do the work	WITHOUT_CLASSIFICATION	0.9997092986586718	WITHOUT_CLASSIFICATION	2.907013413283147E-4	DESIGN
// We've been here before	WITHOUT_CLASSIFICATION	0.9986074584838321	WITHOUT_CLASSIFICATION	0.0013925415161677678	DESIGN
// it is or was referenced _somewhere_	WITHOUT_CLASSIFICATION	0.9995454435106051	WITHOUT_CLASSIFICATION	4.545564893948473E-4	DESIGN
// do the work	WITHOUT_CLASSIFICATION	0.9997092986586718	WITHOUT_CLASSIFICATION	2.907013413283147E-4	DESIGN
// if either its role changed,	WITHOUT_CLASSIFICATION	0.999909644401438	WITHOUT_CLASSIFICATION	9.035559856196915E-5	DESIGN
// or its key changed	WITHOUT_CLASSIFICATION	0.9999914575186115	WITHOUT_CLASSIFICATION	8.542481388431098E-6	DESIGN
// we will need to create new entries	WITHOUT_CLASSIFICATION	0.9944648085266354	WITHOUT_CLASSIFICATION	0.005535191473364489	DESIGN
// we will need to remove ye olde entries	WITHOUT_CLASSIFICATION	0.964554627191504	WITHOUT_CLASSIFICATION	0.03544537280849593	DESIGN
// force initialize!	WITHOUT_CLASSIFICATION	0.9991716895540741	WITHOUT_CLASSIFICATION	8.283104459259982E-4	DESIGN
// else if it's elements changed	WITHOUT_CLASSIFICATION	0.9999687406342114	WITHOUT_CLASSIFICATION	3.1259365788696E-5	DESIGN
//ATTRIBUTES MAINTAINED BETWEEN FLUSH CYCLES	WITHOUT_CLASSIFICATION	0.9968940233176451	WITHOUT_CLASSIFICATION	0.0031059766823548695	DESIGN
// session-start/post-flush persistent state	WITHOUT_CLASSIFICATION	0.9990628511762227	WITHOUT_CLASSIFICATION	9.371488237772056E-4	DESIGN
// allow the CollectionSnapshot to be serialized	WITHOUT_CLASSIFICATION	0.9983237290168224	WITHOUT_CLASSIFICATION	0.0016762709831775414	DESIGN
// ATTRIBUTES USED ONLY DURING FLUSH CYCLE	WITHOUT_CLASSIFICATION	0.9992093134926727	WITHOUT_CLASSIFICATION	7.90686507327179E-4	DESIGN
// "current" means the reference that was found during flush() 	WITHOUT_CLASSIFICATION	0.9992988422512272	WITHOUT_CLASSIFICATION	7.011577487727861E-4	DESIGN
// "loaded" means the reference that is consistent  // with the current database state	WITHOUT_CLASSIFICATION	0.997582808765312	WITHOUT_CLASSIFICATION	0.002417191234687956	DESIGN
// during flush, we navigate the object graph to // collections and decide what to do with them	WITHOUT_CLASSIFICATION	0.995855570567508	WITHOUT_CLASSIFICATION	0.004144429432492043	DESIGN
// if we instantiate a collection during the flush() process, // we must ignore it for the rest of the flush()	WITHOUT_CLASSIFICATION	0.9817792198492662	WITHOUT_CLASSIFICATION	0.018220780150733834	DESIGN
// new collections that get found + wrapped // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9995459349864831	WITHOUT_CLASSIFICATION	4.5406501351678694E-4	DESIGN
//a newly wrapped collection is NOT dirty (or we get unnecessary version updates)	WITHOUT_CLASSIFICATION	0.9372919592598657	WITHOUT_CLASSIFICATION	0.06270804074013421	DESIGN
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9993333866232158	WITHOUT_CLASSIFICATION	6.666133767841301E-4	DESIGN
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9993333866232158	WITHOUT_CLASSIFICATION	6.666133767841301E-4	DESIGN
// detached collections that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9995594761124191	WITHOUT_CLASSIFICATION	4.405238875808484E-4	DESIGN
//optimization	WITHOUT_CLASSIFICATION	0.9988361658907539	WITHOUT_CLASSIFICATION	0.0011638341092461385	DESIGN
//optimization //optimization	WITHOUT_CLASSIFICATION	0.9993333866232158	WITHOUT_CLASSIFICATION	6.666133767841301E-4	DESIGN
//re-snapshot	WITHOUT_CLASSIFICATION	0.9988361658907539	WITHOUT_CLASSIFICATION	0.0011638341092461385	DESIGN
// for convenience to save some lookups	WITHOUT_CLASSIFICATION	0.9969301677374531	WITHOUT_CLASSIFICATION	0.003069832262546782	DESIGN
//NOTE: this is not updated when properties are fetched lazily!	WITHOUT_CLASSIFICATION	0.9833582861067328	WITHOUT_CLASSIFICATION	0.01664171389326724	DESIGN
//memory optimization	WITHOUT_CLASSIFICATION	0.999601780570513	WITHOUT_CLASSIFICATION	3.9821942948701025E-4	DESIGN
// use the id value of a newly instantiated instance as the unsaved-value	WITHOUT_CLASSIFICATION	0.9996394597054572	WITHOUT_CLASSIFICATION	3.605402945428401E-4	DESIGN
// copied from Session:	WITHOUT_CLASSIFICATION	0.9955383838711009	WITHOUT_CLASSIFICATION	0.004461616128899003	DESIGN
// this should not happen since the DTD prevents it	WITHOUT_CLASSIFICATION	0.9983330478206863	WITHOUT_CLASSIFICATION	0.0016669521793136433	DESIGN
// JoinProcessor needs to know if the where clause fragment came from a dynamic filter or not so it // can put the where clause fragment in the right place in the SQL AST.   'hasFilterCondition' keeps track // of that fact.	WITHOUT_CLASSIFICATION	0.9997410207120311	WITHOUT_CLASSIFICATION	2.5897928796896194E-4	DESIGN
// the current join represents the join between a many-to-many association table // and its "target" table.  Here we need to apply any additional filters // defined specifically on the many-to-many	WITHOUT_CLASSIFICATION	0.9983782219699517	WITHOUT_CLASSIFICATION	0.0016217780300482423	DESIGN
//check basic level one nullablilty	WITHOUT_CLASSIFICATION	0.9974492786952078	WITHOUT_CLASSIFICATION	0.0025507213047920867	DESIGN
//values is not null and is checkable, we'll look deeper	WITHOUT_CLASSIFICATION	0.9726164887327517	WITHOUT_CLASSIFICATION	0.027383511267248247	DESIGN
//for non null args, check for components and elements containing components	WITHOUT_CLASSIFICATION	0.9960876282565813	WITHOUT_CLASSIFICATION	0.00391237174341874	DESIGN
//cache the hashcode	WITHOUT_CLASSIFICATION	0.9996403068776375	WITHOUT_CLASSIFICATION	3.596931223624937E-4	DESIGN
//persistent collections may have components	WITHOUT_CLASSIFICATION	0.994509371137403	WITHOUT_CLASSIFICATION	0.005490628862596934	DESIGN
//check for all components values in the collection	WITHOUT_CLASSIFICATION	0.9987423781834477	WITHOUT_CLASSIFICATION	0.0012576218165523346	DESIGN
/* will check current level if some of them are not null	WITHOUT_CLASSIFICATION	0.9936785156741681	WITHOUT_CLASSIFICATION	0.0063214843258319765	DESIGN
//do the test	WITHOUT_CLASSIFICATION	0.9999362796813522	WITHOUT_CLASSIFICATION	6.372031864776866E-5	DESIGN
// if its an uninitialized proxy it can't be transient	WITHOUT_CLASSIFICATION	0.999816824231907	WITHOUT_CLASSIFICATION	1.8317576809299204E-4	DESIGN
//unwrap it	WITHOUT_CLASSIFICATION	0.9992290933930044	WITHOUT_CLASSIFICATION	7.709066069954991E-4	DESIGN
// See if the entity is already bound to this session, if not look at the // entity identifier and assume that the entity is persistent if the // id is not "unsaved" (that is, we rely on foreign keys to keep // database integrity)	WITHOUT_CLASSIFICATION	0.9815127741774518	WITHOUT_CLASSIFICATION	0.018487225822548286	DESIGN
// an unfetched association can only point to // an entity that already exists in the db	WITHOUT_CLASSIFICATION	0.9999075522749539	WITHOUT_CLASSIFICATION	9.244772504611678E-5	DESIGN
// let the interceptor inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9965582715567689	WITHOUT_CLASSIFICATION	0.0034417284432311924	DESIGN
// let the persister inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9953252820800664	WITHOUT_CLASSIFICATION	0.004674717919933499	DESIGN
// we use the assumed value, if there is one, to avoid hitting // the database	WITHOUT_CLASSIFICATION	0.9997922409758604	WITHOUT_CLASSIFICATION	2.0775902413973946E-4	DESIGN
// hit the database, after checking the session cache for a snapshot	WITHOUT_CLASSIFICATION	0.9989129998543728	WITHOUT_CLASSIFICATION	0.0010870001456271903	DESIGN
// context-entity-identifier returns null explicitly if the entity // is not associated with the persistence context; so make some // deeper checks...	WITHOUT_CLASSIFICATION	0.9932961389201277	WITHOUT_CLASSIFICATION	0.006703861079872324	DESIGN
//int count = 0;	WITHOUT_CLASSIFICATION	0.9998345833787337	WITHOUT_CLASSIFICATION	1.6541662126638644E-4	DESIGN
//the first key found after the given key	WITHOUT_CLASSIFICATION	0.9998569814101069	WITHOUT_CLASSIFICATION	1.4301858989317025E-4	DESIGN
//checkForEnd = false;	WITHOUT_CLASSIFICATION	0.9999126074852067	WITHOUT_CLASSIFICATION	8.739251479331642E-5	DESIGN
//count++;	WITHOUT_CLASSIFICATION	0.9990619244547406	WITHOUT_CLASSIFICATION	9.380755452593856E-4	DESIGN
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9981845391677382	WITHOUT_CLASSIFICATION	0.0018154608322617158	DESIGN
//we ran out of keys to try	WITHOUT_CLASSIFICATION	0.9993727916147025	WITHOUT_CLASSIFICATION	6.27208385297504E-4	DESIGN
//first element of array is reserved for the actual instance we are loading!	WITHOUT_CLASSIFICATION	0.9915799456394668	WITHOUT_CLASSIFICATION	0.008420054360533185	DESIGN
//the first id found after the given id	WITHOUT_CLASSIFICATION	0.9997722829380664	WITHOUT_CLASSIFICATION	2.2771706193368241E-4	DESIGN
//we ran out of ids to try	WITHOUT_CLASSIFICATION	0.9995695549171728	WITHOUT_CLASSIFICATION	4.3044508282718023E-4	DESIGN
// look for existing collection as part of the persistence context	WITHOUT_CLASSIFICATION	0.9975004892404336	WITHOUT_CLASSIFICATION	0.0024995107595663876	DESIGN
// ignore this row of results! Note the early exit	WITHOUT_CLASSIFICATION	0.9994546633280861	WITHOUT_CLASSIFICATION	5.453366719139259E-4	DESIGN
// initialize this collection	WITHOUT_CLASSIFICATION	0.9970949889006068	WITHOUT_CLASSIFICATION	0.0029050110993932014	DESIGN
// create one	WITHOUT_CLASSIFICATION	0.9997719561564574	WITHOUT_CLASSIFICATION	2.2804384354261682E-4	DESIGN
// warning: can cause a recursive calls! (proxy initialization)	WITHOUT_CLASSIFICATION	0.9975192711052603	WITHOUT_CLASSIFICATION	0.002480728894739729	DESIGN
// there were no queued additions // and the role has a cache	WITHOUT_CLASSIFICATION	0.9999460221708688	WITHOUT_CLASSIFICATION	5.397782913115501E-5	DESIGN
// and this is not a forced initialization during flush	WITHOUT_CLASSIFICATION	0.9960527321648519	WITHOUT_CLASSIFICATION	0.003947267835148127	DESIGN
// some filters affecting the collection are enabled on the session, so do not do the put into the cache.	WITHOUT_CLASSIFICATION	0.9980415339885071	WITHOUT_CLASSIFICATION	0.001958466011492883	DESIGN
// cleanup code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9960893001709802	WITHOUT_CLASSIFICATION	0.003910699829019837	DESIGN
// loading collection xrefs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9963228754591711	WITHOUT_CLASSIFICATION	0.0036771245408289384	DESIGN
// Collection load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995075009563908	WITHOUT_CLASSIFICATION	4.924990436092451E-4	DESIGN
// simple cache of param metadata based on query string.  Ideally, the // original "user-supplied query" string should be used to retreive this // metadata (i.e., not the para-list-expanded query string) to avoid // unnecessary cache entries. // Used solely for caching param metadata for native-sql queries, see // getSQLParameterMetadata() for a discussion as to why...	WITHOUT_CLASSIFICATION	0.9958956970162453	WITHOUT_CLASSIFICATION	0.004104302983754762	DESIGN
// the cache of the actual plans...	WITHOUT_CLASSIFICATION	0.9998514343814985	WITHOUT_CLASSIFICATION	1.4856561850155374E-4	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.9988361658907539	WITHOUT_CLASSIFICATION	0.0011638341092461385	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.9988361658907539	WITHOUT_CLASSIFICATION	0.0011638341092461385	DESIGN
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.999894043322483	WITHOUT_CLASSIFICATION	1.0595667751703737E-4	DESIGN
// for native-sql queries, the param metadata is determined outside // any relation to a query plan, because query plan creation and/or // retreival for a native-sql query depends on all of the return // types having been set, which might not be the case up-front when // param metadata would be most useful	WITHOUT_CLASSIFICATION	0.9974324688754016	WITHOUT_CLASSIFICATION	0.0025675311245984427	DESIGN
// don't care...	WITHOUT_CLASSIFICATION	0.9994349092983621	WITHOUT_CLASSIFICATION	5.650907016377922E-4	DESIGN
// Recognition code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9960879560034378	WITHOUT_CLASSIFICATION	0.003912043996562206	DESIGN
// don't care...	WITHOUT_CLASSIFICATION	0.9994349092983621	WITHOUT_CLASSIFICATION	5.650907016377922E-4	DESIGN
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9986319228573629	WITHOUT_CLASSIFICATION	0.0013680771426370715	DESIGN
// break the outer loop !!!	WITHOUT_CLASSIFICATION	0.9999814987301958	WITHOUT_CLASSIFICATION	1.850126980427759E-5	DESIGN
// named parameter	WITHOUT_CLASSIFICATION	0.9994186355088269	WITHOUT_CLASSIFICATION	5.813644911730195E-4	DESIGN
// could be either an ordinal or JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9978217898816855	WITHOUT_CLASSIFICATION	0.0021782101183146305	DESIGN
// a peek ahead showed this as an JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9959302273916457	WITHOUT_CLASSIFICATION	0.004069772608354224	DESIGN
// make sure this "name" is an integral	WITHOUT_CLASSIFICATION	0.9974424967281577	WITHOUT_CLASSIFICATION	0.0025575032718423013	DESIGN
// pre-determine and cache the hashcode	WITHOUT_CLASSIFICATION	0.9997529201241013	WITHOUT_CLASSIFICATION	2.4707987589873184E-4	DESIGN
// perform the actual work	WITHOUT_CLASSIFICATION	0.9997080595968528	WITHOUT_CLASSIFICATION	2.9194040314716715E-4	DESIGN
// if everything went ok, commit the transaction and close the obtained // connection handle...	WITHOUT_CLASSIFICATION	0.9999665638187298	WITHOUT_CLASSIFICATION	3.343618127011102E-5	DESIGN
// at some point the processing went bad, so we need to: //      1) make sure the connection handle gets released //      2) try to cleanup the JTA context as much as possible	WITHOUT_CLASSIFICATION	0.9866363121950283	WITHOUT_CLASSIFICATION	0.013363687804971621	DESIGN
// finally handle the exception	WITHOUT_CLASSIFICATION	0.9994846153853705	WITHOUT_CLASSIFICATION	5.153846146295835E-4	DESIGN
// a "detached" collection that belonged to a different entity	WITHOUT_CLASSIFICATION	0.9799791512906055	WITHOUT_CLASSIFICATION	0.02002084870939449	DESIGN
//saveOrUpdateCopy() is deprecated!	WITHOUT_CLASSIFICATION	0.9953023516004829	WITHOUT_CLASSIFICATION	0.004697648399517167	DESIGN
// collectionPersister should not be null, but we don't want to throw // an exception if it is null	WITHOUT_CLASSIFICATION	0.5395935897694846	WITHOUT_CLASSIFICATION	0.46040641023051554	DESIGN
// otherwise a null or brand new collection // this will also (inefficiently) handle arrays, which // have no snapshot, so we can't do any better //processArrayOrNewCollection(collection, type);	WITHOUT_CLASSIFICATION	0.6528481017230406	WITHOUT_CLASSIFICATION	0.34715189827695936	DESIGN
// a "detached" collection that originally belonged to the same entity	WITHOUT_CLASSIFICATION	0.9872295553246146	WITHOUT_CLASSIFICATION	0.012770444675385477	DESIGN
//do nothing	WITHOUT_CLASSIFICATION	0.9999516506621735	WITHOUT_CLASSIFICATION	4.834933782657641E-5	DESIGN
//do nothing	WITHOUT_CLASSIFICATION	0.9999516506621735	WITHOUT_CLASSIFICATION	4.834933782657641E-5	DESIGN
//Force a substitution!	WITHOUT_CLASSIFICATION	0.9989186263259853	WITHOUT_CLASSIFICATION	0.0010813736740146332	DESIGN
// The user requested a "greater" (i.e. more restrictive) form of // pessimistic lock	WITHOUT_CLASSIFICATION	0.9916659760499381	WITHOUT_CLASSIFICATION	0.008334023950061928	DESIGN
// the database now holds a lock + the object is flushed from the cache, // so release the soft lock	WITHOUT_CLASSIFICATION	0.9996946006661022	WITHOUT_CLASSIFICATION	3.0539933389783005E-4	DESIGN
// now update the object .. has to be outside the main if block above (because of collections)	WITHOUT_CLASSIFICATION	0.9999337450831851	WITHOUT_CLASSIFICATION	6.62549168149137E-5	DESIGN
// Search for collections by reachability, updating their role. // We don't want to touch collections reachable from a deleted object	WITHOUT_CLASSIFICATION	0.9494945504269462	WITHOUT_CLASSIFICATION	0.05050544957305388	DESIGN
// this is a situation where the entity id is assigned by a post-insert generator // and was saved outside the transaction forcing it to be delayed	WITHOUT_CLASSIFICATION	0.9918227748499292	WITHOUT_CLASSIFICATION	0.008177225150070768	DESIGN
// NOTE: we need to do the wrap here even if its not "dirty", // because collections need wrapping but changes to _them_ // don't dirty the container. Also, for versioned data, we // need to wrap before calling searchForDirtyCollections	WITHOUT_CLASSIFICATION	0.929938828927898	WITHOUT_CLASSIFICATION	0.07006117107210204	DESIGN
//grab its state saved at deletion	WITHOUT_CLASSIFICATION	0.9975770243666062	WITHOUT_CLASSIFICATION	0.0024229756333938157	DESIGN
// grab its current state	WITHOUT_CLASSIFICATION	0.9998924037575582	WITHOUT_CLASSIFICATION	1.0759624244193505E-4	DESIGN
// schedule the update // note that we intentionally do _not_ pass in currentPersistentState!	WITHOUT_CLASSIFICATION	0.999699560828094	WITHOUT_CLASSIFICATION	3.004391719060651E-4	DESIGN
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9995421839279093	WITHOUT_CLASSIFICATION	4.578160720907304E-4	DESIGN
// give the Interceptor a chance to process property values, if the properties // were modified by the Interceptor, we need to set them back to the object	WITHOUT_CLASSIFICATION	0.9998789465601198	WITHOUT_CLASSIFICATION	1.210534398802474E-4	DESIGN
// compare to cached state (ignoring collections unless versioned)	WITHOUT_CLASSIFICATION	0.9983962449988135	WITHOUT_CLASSIFICATION	0.0016037550011865167	DESIGN
// if it was dirtied by a collection only	WITHOUT_CLASSIFICATION	0.9977728931839018	WITHOUT_CLASSIFICATION	0.0022271068160982063	DESIGN
// increment the version number (if necessary)	WITHOUT_CLASSIFICATION	0.9998362078060974	WITHOUT_CLASSIFICATION	1.637921939027003E-4	DESIGN
// check nullability but do not perform command execute // we'll use scheduled updates for that.	WITHOUT_CLASSIFICATION	0.989524272481707	WITHOUT_CLASSIFICATION	0.01047572751829295	DESIGN
//give the Interceptor a chance to modify property values	WITHOUT_CLASSIFICATION	0.9997307077201685	WITHOUT_CLASSIFICATION	2.6929227983154674E-4	DESIGN
//now we might need to recalculate the dirtyProperties array	WITHOUT_CLASSIFICATION	0.9568220473642618	WITHOUT_CLASSIFICATION	0.04317795263573827	DESIGN
//use the current version	WITHOUT_CLASSIFICATION	0.9998237054426276	WITHOUT_CLASSIFICATION	1.7629455737232515E-4	DESIGN
// Interceptor returned null, so do the dirtycheck ourself, if possible	WITHOUT_CLASSIFICATION	0.9997331603306693	WITHOUT_CLASSIFICATION	2.6683966933082226E-4	DESIGN
// object loaded by update()	WITHOUT_CLASSIFICATION	0.9996469121053616	WITHOUT_CLASSIFICATION	3.530878946382875E-4	DESIGN
// dirty check against the usual snapshot of the entity	WITHOUT_CLASSIFICATION	0.9996298795813378	WITHOUT_CLASSIFICATION	3.701204186622425E-4	DESIGN
// dirty check against the database snapshot, if possible/necessary	WITHOUT_CLASSIFICATION	0.9999531522352476	WITHOUT_CLASSIFICATION	4.6847764752434163E-5	DESIGN
// the Interceptor handled the dirty checking	WITHOUT_CLASSIFICATION	0.9995503963208778	WITHOUT_CLASSIFICATION	4.4960367912219806E-4	DESIGN
//even process null collections	WITHOUT_CLASSIFICATION	0.9980993557654327	WITHOUT_CLASSIFICATION	0.0019006442345671397	DESIGN
// get the id from the object	WITHOUT_CLASSIFICATION	0.9997550661634175	WITHOUT_CLASSIFICATION	2.449338365824765E-4	DESIGN
//always do an INSERT, and let it fail by constraint violation	WITHOUT_CLASSIFICATION	0.991731675842253	WITHOUT_CLASSIFICATION	0.008268324157747016	DESIGN
//what is the version on the database?	WITHOUT_CLASSIFICATION	0.9985802712793781	WITHOUT_CLASSIFICATION	0.0014197287206218685	DESIGN
/// HHH-2378	WITHOUT_CLASSIFICATION	0.9988361658907539	WITHOUT_CLASSIFICATION	0.0011638341092461385	DESIGN
//will result in a SQL UPDATE:	WITHOUT_CLASSIFICATION	0.9993464969937973	WITHOUT_CLASSIFICATION	6.535030062026295E-4	DESIGN
//else do nothing (don't even reassociate object!)	WITHOUT_CLASSIFICATION	0.9996138610527617	WITHOUT_CLASSIFICATION	3.8613894723824044E-4	DESIGN
// no existing row - do an insert	WITHOUT_CLASSIFICATION	0.9979255305688218	WITHOUT_CLASSIFICATION	0.0020744694311781663	DESIGN
//refresh() does not pass an entityName	WITHOUT_CLASSIFICATION	0.9986075478257089	WITHOUT_CLASSIFICATION	0.0013924521742911089	DESIGN
//do not return a proxy! //(this option indicates we are initializing a proxy)	WITHOUT_CLASSIFICATION	0.9973005376568058	WITHOUT_CLASSIFICATION	0.0026994623431942817	DESIGN
//return a proxy if appropriate	WITHOUT_CLASSIFICATION	0.9956775112144038	WITHOUT_CLASSIFICATION	0.004322488785596163	DESIGN
// return existing object or initialized proxy (unless deleted)	WITHOUT_CLASSIFICATION	0.9996181119596439	WITHOUT_CLASSIFICATION	3.818880403561046E-4	DESIGN
// return new uninitialized proxy	WITHOUT_CLASSIFICATION	0.9998042689121124	WITHOUT_CLASSIFICATION	1.9573108788764038E-4	DESIGN
// this object was already loaded	WITHOUT_CLASSIFICATION	0.9964172807181004	WITHOUT_CLASSIFICATION	0.0035827192818996614	DESIGN
// Entity was found in second-level cache...	WITHOUT_CLASSIFICATION	0.9988879763394728	WITHOUT_CLASSIFICATION	0.0011120236605271323	DESIGN
// make it circular-reference safe	WITHOUT_CLASSIFICATION	0.998072332658949	WITHOUT_CLASSIFICATION	0.0019276673410509905	DESIGN
// intializes result by side-effect	WITHOUT_CLASSIFICATION	0.9994735432936765	WITHOUT_CLASSIFICATION	5.264567063235084E-4	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Pre-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9991240314170688	WITHOUT_CLASSIFICATION	8.759685829310483E-4	DESIGN
//some statistics	WITHOUT_CLASSIFICATION	0.9988361658907539	WITHOUT_CLASSIFICATION	0.0011638341092461385	DESIGN
//safe from concurrent modification because of how entryList() is implemented on IdentityMap	WITHOUT_CLASSIFICATION	0.9977746074775263	WITHOUT_CLASSIFICATION	0.002225392522473737	DESIGN
// Initialize dirty flags for arrays + collections with composite elements // and reset reached, doupdate, etc.	WITHOUT_CLASSIFICATION	0.9996046641097354	WITHOUT_CLASSIFICATION	3.95335890264578E-4	DESIGN
// Among other things, updateReachables() will recursively load all // collections that are moving roles. This might cause entities to // be loaded.	WITHOUT_CLASSIFICATION	0.9667936153129864	WITHOUT_CLASSIFICATION	0.03320638468701362	DESIGN
// So this needs to be safe from concurrent modification problems. // It is safe because of how IdentityMap implements entrySet()	WITHOUT_CLASSIFICATION	0.9888583549427754	WITHOUT_CLASSIFICATION	0.011141645057224557	DESIGN
// Update the status of the object and if necessary, schedule an update	WITHOUT_CLASSIFICATION	0.9999776472926319	WITHOUT_CLASSIFICATION	2.2352707368023686E-5	DESIGN
// Schedule updates to collections:	WITHOUT_CLASSIFICATION	0.9985972152782959	WITHOUT_CLASSIFICATION	0.0014027847217040826	DESIGN
// we need to lock the collection caches before // executing entity inserts/updates in order to // account for bidi associations	WITHOUT_CLASSIFICATION	0.9023115355297933	WITHOUT_CLASSIFICATION	0.09768846447020678	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Post-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9991240314170688	WITHOUT_CLASSIFICATION	8.759685829310483E-4	DESIGN
//the database has changed now, so the subselect results need to be invalidated	WITHOUT_CLASSIFICATION	0.9992917222220673	WITHOUT_CLASSIFICATION	7.082777779327977E-4	DESIGN
//if the collection is dereferenced, remove from the session cache //iter.remove(); //does not work, since the entrySet is not backed by the set	WITHOUT_CLASSIFICATION	0.9646927527620929	WITHOUT_CLASSIFICATION	0.035307247237907013	DESIGN
//otherwise recreate the mapping between the collection and its key	WITHOUT_CLASSIFICATION	0.9908123836924176	WITHOUT_CLASSIFICATION	0.009187616307582256	DESIGN
//get a snapshot	WITHOUT_CLASSIFICATION	0.9983547658394173	WITHOUT_CLASSIFICATION	0.001645234160582697	DESIGN
/* package-private */	WITHOUT_CLASSIFICATION	0.9999675078611377	WITHOUT_CLASSIFICATION	3.24921388622432E-5	DESIGN
/* package-private */	WITHOUT_CLASSIFICATION	0.9999675078611377	WITHOUT_CLASSIFICATION	3.24921388622432E-5	DESIGN
// key is an entity involved with the operation performed by the listener; // value is a flag indicating if the listener explicitly operates on the entity	WITHOUT_CLASSIFICATION	0.9992213720506956	WITHOUT_CLASSIFICATION	7.786279493044146E-4	DESIGN
// EARLY EXIT!!!	WITHOUT_CLASSIFICATION	0.9997037504389661	WITHOUT_CLASSIFICATION	2.962495610339991E-4	DESIGN
//ie. the entity came in from update()	WITHOUT_CLASSIFICATION	0.9976482646899417	WITHOUT_CLASSIFICATION	0.0023517353100583126	DESIGN
// before any callbacks, etc, so subdeletions see that this deletion happened first	WITHOUT_CLASSIFICATION	0.9986541159668787	WITHOUT_CLASSIFICATION	0.0013458840331212845	DESIGN
// Ensures that containing deletions happen before sub-deletions	WITHOUT_CLASSIFICATION	0.9991626590711178	WITHOUT_CLASSIFICATION	8.373409288821029E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9997612566512477	WITHOUT_CLASSIFICATION	2.3874334875219311E-4	DESIGN
// cascade-delete to collections BEFORE the collection owner is deleted	WITHOUT_CLASSIFICATION	0.9978907669304422	WITHOUT_CLASSIFICATION	0.0021092330695578563	DESIGN
// cascade-delete to many-to-one AFTER the parent was deleted	WITHOUT_CLASSIFICATION	0.9996072999104717	WITHOUT_CLASSIFICATION	3.927000895283146E-4	DESIGN
// if it is an initialized proxy, let cascade // handle it later on	WITHOUT_CLASSIFICATION	0.9975640661181806	WITHOUT_CLASSIFICATION	0.0024359338818193987	DESIGN
//assign the requested id to the proxy, *before* //reassociating the proxy	WITHOUT_CLASSIFICATION	0.9996894384016711	WITHOUT_CLASSIFICATION	3.1056159832895387E-4	DESIGN
// an uninitialized proxy, noop, don't even need to // return an id, since it is never a save()	WITHOUT_CLASSIFICATION	0.9978844501156888	WITHOUT_CLASSIFICATION	0.0021155498843111104	DESIGN
//initialize properties of the event:	WITHOUT_CLASSIFICATION	0.9992184670205551	WITHOUT_CLASSIFICATION	7.815329794449622E-4	DESIGN
//return the id in the event object	WITHOUT_CLASSIFICATION	0.9965033841144114	WITHOUT_CLASSIFICATION	0.0034966158855886166	DESIGN
//TRANSIENT or DELETED	WITHOUT_CLASSIFICATION	0.9995301775733427	WITHOUT_CLASSIFICATION	4.6982242665718024E-4	DESIGN
// use the id assigned to the instance	WITHOUT_CLASSIFICATION	0.9988938640743735	WITHOUT_CLASSIFICATION	0.0011061359256265614	DESIGN
// assume this is a newly instantiated transient object // which should be saved rather than updated	WITHOUT_CLASSIFICATION	0.8742501396410007	WITHOUT_CLASSIFICATION	0.12574986035899924	DESIGN
// this is a transient object with existing persistent state not loaded by the session	WITHOUT_CLASSIFICATION	0.9903520323599495	WITHOUT_CLASSIFICATION	0.00964796764005051	DESIGN
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9973036832179407	WITHOUT_CLASSIFICATION	0.002696316782059173	DESIGN
//cachedState,	WITHOUT_CLASSIFICATION	0.9988361658907539	WITHOUT_CLASSIFICATION	0.0011638341092461385	DESIGN
//assume true, since we don't really know, and it doesn't matter	WITHOUT_CLASSIFICATION	0.9988801230493474	WITHOUT_CLASSIFICATION	0.0011198769506526739	DESIGN
//a "detached" collection!	WITHOUT_CLASSIFICATION	0.9993350822916495	WITHOUT_CLASSIFICATION	6.649177083505892E-4	DESIGN
// if the collection belonged to a different entity, // clean up the existing state of the collection	WITHOUT_CLASSIFICATION	0.9925099447798981	WITHOUT_CLASSIFICATION	0.007490055220101917	DESIGN
//log.debug( "calling onLoad()" );	WITHOUT_CLASSIFICATION	0.9968940233176451	WITHOUT_CLASSIFICATION	0.0031059766823548695	DESIGN
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9988361658907539	WITHOUT_CLASSIFICATION	0.0011638341092461385	DESIGN
// note: performExecutions() clears all collectionXxxxtion  // collections (the collection actions) in the session	WITHOUT_CLASSIFICATION	0.9965072267658891	WITHOUT_CLASSIFICATION	0.003492773234110969	DESIGN
// if no array holder we found an unwrappered array (this can't occur, // because we now always call wrap() before getting to here) // return (ah==null) ? true : searchForDirtyCollections(ah, type);	WITHOUT_CLASSIFICATION	0.9997447963268019	WITHOUT_CLASSIFICATION	2.5520367319814547E-4	DESIGN
// if not wrappered yet, its dirty (this can't occur, because // we now always call wrap() before getting to here) // return ( ! (obj instanceof PersistentCollection) ) ? //true : searchForDirtyCollections( (PersistentCollection) obj, type );	WITHOUT_CLASSIFICATION	0.9921058147798678	WITHOUT_CLASSIFICATION	0.007894185220132256	DESIGN
//we need to check even if it was not initialized, because of delayed adds!	WITHOUT_CLASSIFICATION	0.998085364563485	WITHOUT_CLASSIFICATION	0.0019146354365150151	DESIGN
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9988361658907539	WITHOUT_CLASSIFICATION	0.0011638341092461385	DESIGN
// find any entities that are still transient after retry	WITHOUT_CLASSIFICATION	0.9921763247440379	WITHOUT_CLASSIFICATION	0.007823675255962068	DESIGN
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9988361658907539	WITHOUT_CLASSIFICATION	0.0011638341092461385	DESIGN
// Check the persistence context for an entry relating to this // entity to be merged...	WITHOUT_CLASSIFICATION	0.9883539521952069	WITHOUT_CLASSIFICATION	0.011646047804793018	DESIGN
// we have specialized case of a detached entity from the // perspective of the merge operation.  Specifically, we // have an incoming entity instance which has a corresponding // entry in the current persistence context, but registered // under a different entity instance	WITHOUT_CLASSIFICATION	0.9999100900833304	WITHOUT_CLASSIFICATION	8.990991666957604E-5	DESIGN
//DELETED	WITHOUT_CLASSIFICATION	0.9990619244547406	WITHOUT_CLASSIFICATION	9.380755452593856E-4	DESIGN
//before cascade!	WITHOUT_CLASSIFICATION	0.9988361658907539	WITHOUT_CLASSIFICATION	0.0011638341092461385	DESIGN
// cascade first, so that all unsaved objects get their // copy created before we actually copy //cascadeOnMerge(event, persister, entity, copyCache, Cascades.CASCADE_BEFORE_MERGE);	WITHOUT_CLASSIFICATION	0.9998729457622546	WITHOUT_CLASSIFICATION	1.2705423774542584E-4	DESIGN
//this bit is only *really* absolutely necessary for handling //requestedId, but is also good if we merge multiple object //graphs, since it helps ensure uniqueness	WITHOUT_CLASSIFICATION	0.5442928878657071	DESIGN	0.455707112134293	WITHOUT_CLASSIFICATION
// continue...; we'll find out if it ends up not getting saved later	WITHOUT_CLASSIFICATION	0.9971538055939805	WITHOUT_CLASSIFICATION	0.0028461944060195225	DESIGN
// cascade first, so that all unsaved objects get their // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9998729457622546	WITHOUT_CLASSIFICATION	1.2705423774542584E-4	DESIGN
// check that entity id = requestedId	WITHOUT_CLASSIFICATION	0.9999335847995291	WITHOUT_CLASSIFICATION	6.641520047096037E-5	DESIGN
//before cascade!	WITHOUT_CLASSIFICATION	0.9988361658907539	WITHOUT_CLASSIFICATION	0.0011638341092461385	DESIGN
// we got here because we assumed that an instance // with an assigned id was detached, when it was // really persistent	WITHOUT_CLASSIFICATION	0.9992900656144813	WITHOUT_CLASSIFICATION	7.099343855186808E-4	DESIGN
// cascade first, so that all unsaved objects get their  // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9998341575937607	WITHOUT_CLASSIFICATION	1.6584240623938195E-4	DESIGN
//copyValues works by reflection, so explicitly mark the entity instance dirty	WITHOUT_CLASSIFICATION	0.9968382733909649	WITHOUT_CLASSIFICATION	0.003161726609035154	DESIGN
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.9988361658907539	WITHOUT_CLASSIFICATION	0.0011638341092461385	DESIGN
//source.getBatcher().executeBatch(); //found another way to ensure that all batched joined inserts have been executed	WITHOUT_CLASSIFICATION	0.9983197170269659	WITHOUT_CLASSIFICATION	0.0016802829730341935	DESIGN
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9995421839279093	WITHOUT_CLASSIFICATION	4.578160720907304E-4	DESIGN
//now done in EntityIdentityInsertAction //persister.setIdentifier( entity, id, source.getEntityMode() );	WITHOUT_CLASSIFICATION	0.9789962753930089	WITHOUT_CLASSIFICATION	0.021003724606991108	DESIGN
//source.getPersistenceContext().removeNonExist( new EntityKey( id, persister, source.getEntityMode() ) );	WITHOUT_CLASSIFICATION	0.9957776677981861	WITHOUT_CLASSIFICATION	0.004222332201813903	DESIGN
//keep the existing version number in the case of replicate!	WITHOUT_CLASSIFICATION	0.9998337363872404	WITHOUT_CLASSIFICATION	1.662636127596489E-4	DESIGN
// cascade-save to many-to-one BEFORE the parent is saved	WITHOUT_CLASSIFICATION	0.9994716764418005	WITHOUT_CLASSIFICATION	5.283235581994894E-4	DESIGN
//pass this as an argument only to avoid double looking	WITHOUT_CLASSIFICATION	0.9998032134529694	WITHOUT_CLASSIFICATION	1.9678654703060642E-4	DESIGN
// the object is persistent	WITHOUT_CLASSIFICATION	0.9998238271669105	WITHOUT_CLASSIFICATION	1.7617283308956635E-4	DESIGN
//the entity is associated with the session, so check its status	WITHOUT_CLASSIFICATION	0.9997133565645094	WITHOUT_CLASSIFICATION	2.866434354906368E-4	DESIGN
// do nothing for persistent instances	WITHOUT_CLASSIFICATION	0.9998980561397096	WITHOUT_CLASSIFICATION	1.0194386029029717E-4	DESIGN
//ie. e.status==DELETED	WITHOUT_CLASSIFICATION	0.9993333866232158	WITHOUT_CLASSIFICATION	6.666133767841301E-4	DESIGN
// the object is transient or detached	WITHOUT_CLASSIFICATION	0.999541704068951	WITHOUT_CLASSIFICATION	4.5829593104894335E-4	DESIGN
//NOTE EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9988361658907539	WITHOUT_CLASSIFICATION	0.0011638341092461385	DESIGN
// Private constructor - stops checkstyle from complaining.	WITHOUT_CLASSIFICATION	0.9978391647798449	WITHOUT_CLASSIFICATION	0.0021608352201551518	DESIGN
// First, try to find a matching constructor accepting a ViolatedConstraintNameExtracter param...	WITHOUT_CLASSIFICATION	0.9989317381514289	WITHOUT_CLASSIFICATION	0.0010682618485710477	DESIGN
// eat it and try next	WITHOUT_CLASSIFICATION	0.9987182806997592	WITHOUT_CLASSIFICATION	0.001281719300240786	DESIGN
// Otherwise, try to use the no-arg constructor	WITHOUT_CLASSIFICATION	0.9998882649819241	WITHOUT_CLASSIFICATION	1.1173501807597675E-4	DESIGN
// oracle sql-state code for deadlock	WITHOUT_CLASSIFICATION	0.9931487326360127	WITHOUT_CLASSIFICATION	0.006851267363987357	DESIGN
// CollectionPropertyMapping processes everything except 'index'.	WITHOUT_CLASSIFICATION	0.9990568786184303	WITHOUT_CLASSIFICATION	9.431213815697167E-4	DESIGN
// remove initial ", "	WITHOUT_CLASSIFICATION	0.9995050345052474	WITHOUT_CLASSIFICATION	4.949654947526751E-4	DESIGN
// remove initial " and "	WITHOUT_CLASSIFICATION	0.9993629713814176	WITHOUT_CLASSIFICATION	6.370286185824091E-4	DESIGN
//beforeClassTokens.add("new"); DEFINITELY DON'T HAVE THIS!!	WITHOUT_CLASSIFICATION	0.9968940233176451	WITHOUT_CLASSIFICATION	0.0031059766823548695	DESIGN
//notAfterClassTokens.add(",");	WITHOUT_CLASSIFICATION	0.9968940233176451	WITHOUT_CLASSIFICATION	0.0031059766823548695	DESIGN
// just especially for the trivial collection filter	WITHOUT_CLASSIFICATION	0.9983025935916406	WITHOUT_CLASSIFICATION	0.0016974064083593067	DESIGN
//update last non-whitespace token, if necessary	WITHOUT_CLASSIFICATION	0.9826433326484476	WITHOUT_CLASSIFICATION	0.017356667351552398	DESIGN
// select-range is terminated by declaration of "from"	WITHOUT_CLASSIFICATION	0.9995383342446006	WITHOUT_CLASSIFICATION	4.616657553994672E-4	DESIGN
//scan for next non-whitespace token	WITHOUT_CLASSIFICATION	0.9786439700302562	WITHOUT_CLASSIFICATION	0.0213560299697438	DESIGN
// Note this!!	WITHOUT_CLASSIFICATION	0.9998211868939275	WITHOUT_CLASSIFICATION	1.7881310607248163E-4	DESIGN
// Error message constants.	WITHOUT_CLASSIFICATION	0.9996762184020677	WITHOUT_CLASSIFICATION	3.237815979324105E-4	DESIGN
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9987541140947305	WITHOUT_CLASSIFICATION	0.0012458859052695331	DESIGN
// semantic action handling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9972796583882317	WITHOUT_CLASSIFICATION	0.002720341611768277	DESIGN
// Handle collection-fiter compilation. // IMPORTANT NOTE: This is modifying the INPUT (HQL) tree, not the output tree!	WITHOUT_CLASSIFICATION	0.9981697997878135	WITHOUT_CLASSIFICATION	0.0018302002121865254	DESIGN
// Show the modified AST.	WITHOUT_CLASSIFICATION	0.9999853231772498	WITHOUT_CLASSIFICATION	1.4676822750261808E-5	DESIGN
// Create a parameter specification for the collection filter...	WITHOUT_CLASSIFICATION	0.988394691612503	WITHOUT_CLASSIFICATION	0.01160530838749693	DESIGN
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9998979996490734	WITHOUT_CLASSIFICATION	1.0200035092657014E-4	DESIGN
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9998979996490734	WITHOUT_CLASSIFICATION	1.0200035092657014E-4	DESIGN
// Get the names of the columns used to link between the collection // owner and the collection elements.	WITHOUT_CLASSIFICATION	0.9987645328948419	WITHOUT_CLASSIFICATION	0.001235467105158114	DESIGN
// The path AST should be a DotNode, and it should have been evaluated already.	WITHOUT_CLASSIFICATION	0.9989668309933509	WITHOUT_CLASSIFICATION	0.0010331690066490888	DESIGN
// Tell the dot node about the join type.	WITHOUT_CLASSIFICATION	0.9997207385076665	WITHOUT_CLASSIFICATION	2.792614923335193E-4	DESIGN
// Re-arrange the tree so that the collection function is the root and the lhs is the path.	WITHOUT_CLASSIFICATION	0.9996262359027551	WITHOUT_CLASSIFICATION	3.7376409724480244E-4	DESIGN
// Don't forget to resolve the argument! // Resolve the collection function now.	WITHOUT_CLASSIFICATION	0.9979756880236096	WITHOUT_CLASSIFICATION	0.0020243119763904203	DESIGN
// Resolve everything up to this dot, but don't resolve the placeholders yet.	WITHOUT_CLASSIFICATION	0.9970198610996179	WITHOUT_CLASSIFICATION	0.0029801389003821176	DESIGN
// Should mean that no such property was found	WITHOUT_CLASSIFICATION	0.9997088689558317	WITHOUT_CLASSIFICATION	2.911310441684233E-4	DESIGN
// Was there an explicit select expression?	WITHOUT_CLASSIFICATION	0.9997600833086849	WITHOUT_CLASSIFICATION	2.399166913150646E-4	DESIGN
// Attach any mapping-defined "ORDER BY" fragments	WITHOUT_CLASSIFICATION	0.9994398833842331	WITHOUT_CLASSIFICATION	5.60116615766873E-4	DESIGN
// Use the explicitly declared select expression; determine the // return types indicated by each select token	WITHOUT_CLASSIFICATION	0.999850913876172	WITHOUT_CLASSIFICATION	1.4908612382789907E-4	DESIGN
// After that, process the JOINs. // Invoke a delegate to do the work, as this is farily complex.	WITHOUT_CLASSIFICATION	0.999411940350461	WITHOUT_CLASSIFICATION	5.880596495389275E-4	DESIGN
// Make #@%$^#^&# sure no alias is applied to the table name	WITHOUT_CLASSIFICATION	0.9998880676580238	WITHOUT_CLASSIFICATION	1.1193234197607182E-4	DESIGN
// We need to generate ids as part of this bulk insert. // // Note that this is only supported for sequence-style generators and // post-insert-style generators; basically, only in-db generators	WITHOUT_CLASSIFICATION	0.9988338050562569	WITHOUT_CLASSIFICATION	0.0011661949437431441	DESIGN
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9998979996490734	WITHOUT_CLASSIFICATION	1.0200035092657014E-4	DESIGN
// We need to seed the version value as part of this bulk insert	WITHOUT_CLASSIFICATION	0.9989794292565792	WITHOUT_CLASSIFICATION	0.0010205707434207804	DESIGN
// we need to wrtap the param in a cast()	WITHOUT_CLASSIFICATION	0.9900395094478228	WITHOUT_CLASSIFICATION	0.009960490552177275	DESIGN
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9964949762909218	WITHOUT_CLASSIFICATION	0.0035050237090782613	DESIGN
// Generate implicit joins, only if necessary.	WITHOUT_CLASSIFICATION	0.9996850557749256	WITHOUT_CLASSIFICATION	3.1494422507434534E-4	DESIGN
// Notify the FROM element that it is being referenced by the select.	WITHOUT_CLASSIFICATION	0.9994956329411727	WITHOUT_CLASSIFICATION	5.043670588272333E-4	DESIGN
// Turn off includeSubclasses on all FromElements.	WITHOUT_CLASSIFICATION	0.9997101010103722	WITHOUT_CLASSIFICATION	2.8989898962781353E-4	DESIGN
// create the node initially with the param name so that it shows // appropriately in the "original text" attribute	WITHOUT_CLASSIFICATION	0.9997384396356607	WITHOUT_CLASSIFICATION	2.6156036433930144E-4	DESIGN
// Use the delegate, resolve identifiers as FROM element aliases.	WITHOUT_CLASSIFICATION	0.9999422540817903	WITHOUT_CLASSIFICATION	5.77459182096905E-5	DESIGN
// select clauses for insert statements should alwasy be treated as shallow	WITHOUT_CLASSIFICATION	0.9909489032980456	WITHOUT_CLASSIFICATION	0.009051096701954468	DESIGN
// no need to even collect this information if the persister is considered multi-table	WITHOUT_CLASSIFICATION	0.9774598423022854	WITHOUT_CLASSIFICATION	0.022540157697714527	DESIGN
// Make sure that the persister is versioned	WITHOUT_CLASSIFICATION	0.9994695220868313	WITHOUT_CLASSIFICATION	5.304779131687491E-4	DESIGN
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9987541140947305	WITHOUT_CLASSIFICATION	0.0012458859052695331	DESIGN
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9998979996490734	WITHOUT_CLASSIFICATION	1.0200035092657014E-4	DESIGN
// --Commented out by Inspection (12/11/04 10:56 AM): int getWarningCount();	WITHOUT_CLASSIFICATION	0.9985536490880121	WITHOUT_CLASSIFICATION	0.0014463509119878755	DESIGN
// Alias references and identifiers use the same node class.	WITHOUT_CLASSIFICATION	0.9992342669647123	WITHOUT_CLASSIFICATION	7.657330352876243E-4	DESIGN
// switch	WITHOUT_CLASSIFICATION	0.9998597539891049	WITHOUT_CLASSIFICATION	1.4024601089518396E-4	DESIGN
// make a new one	WITHOUT_CLASSIFICATION	0.9981165213422456	WITHOUT_CLASSIFICATION	0.0018834786577543584	DESIGN
// just do the regular thing if you can't find the ctor // Your AST must have default ctor to use this.	WITHOUT_CLASSIFICATION	0.9930180708604044	WITHOUT_CLASSIFICATION	0.006981929139595617	DESIGN
// Initialize SQL nodes here.	WITHOUT_CLASSIFICATION	0.9997975739835302	WITHOUT_CLASSIFICATION	2.024260164698111E-4	DESIGN
// semantic action processing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999455184842135	WITHOUT_CLASSIFICATION	5.448151578650659E-4	DESIGN
// if template is null we just write the function out as it appears in the hql statement	WITHOUT_CLASSIFICATION	0.9999056492605826	WITHOUT_CLASSIFICATION	9.435073941738247E-5	DESIGN
// this function has a template -> redirect output and catch the arguments	WITHOUT_CLASSIFICATION	0.9998826538131428	WITHOUT_CLASSIFICATION	1.1734618685723259E-4	DESIGN
// --- Inner classes (moved here from sql-gen.g) ---	WITHOUT_CLASSIFICATION	0.9947397415926408	WITHOUT_CLASSIFICATION	0.005260258407359134	DESIGN
// check two "adjecent" nodes at the top of the from-clause tree	WITHOUT_CLASSIFICATION	0.9999681391491397	WITHOUT_CLASSIFICATION	3.186085086019593E-5	DESIGN
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9969483917978961	WITHOUT_CLASSIFICATION	0.0030516082021039524	DESIGN
// these are just two unrelated table references	WITHOUT_CLASSIFICATION	0.9996716630398441	WITHOUT_CLASSIFICATION	3.2833696015590984E-4	DESIGN
// again, both should be FromElements	WITHOUT_CLASSIFICATION	0.9964049969577842	WITHOUT_CLASSIFICATION	0.0035950030422157667	DESIGN
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9986319228573629	WITHOUT_CLASSIFICATION	0.0013680771426370715	DESIGN
// right represents a joins originating from left; or // both right and left reprersent joins originating from the same FromElement	WITHOUT_CLASSIFICATION	0.996575109257255	WITHOUT_CLASSIFICATION	0.0034248907427451057	DESIGN
// check a set of parent/child nodes in the from-clause tree // to determine if a comma is required between them	WITHOUT_CLASSIFICATION	0.9997026084403703	WITHOUT_CLASSIFICATION	2.973915596297562E-4	DESIGN
// right represents a joins originating from left...	WITHOUT_CLASSIFICATION	0.9933912554454751	WITHOUT_CLASSIFICATION	0.0066087445545249405	DESIGN
// all clear	WITHOUT_CLASSIFICATION	0.9998824079131646	WITHOUT_CLASSIFICATION	1.1759208683532865E-4	DESIGN
// Ignore the token class name parameter, and use a specific token class.	WITHOUT_CLASSIFICATION	0.9995428630862344	WITHOUT_CLASSIFICATION	4.571369137655015E-4	DESIGN
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9953605580305032	WITHOUT_CLASSIFICATION	0.004639441969496767	DESIGN
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9953605580305032	WITHOUT_CLASSIFICATION	0.004639441969496767	DESIGN
// remember that ordinal parameters numbers are 1-based!!!	WITHOUT_CLASSIFICATION	0.9982576527741602	WITHOUT_CLASSIFICATION	0.0017423472258397675	DESIGN
// don't care about other param types here, just those explicitly user-defined...	WITHOUT_CLASSIFICATION	0.9953949984556095	WITHOUT_CLASSIFICATION	0.004605001544390461	DESIGN
// If the query is already compiled, skip the compilation.	WITHOUT_CLASSIFICATION	0.9999174617526438	WITHOUT_CLASSIFICATION	8.253824735614707E-5	DESIGN
// Remember the parameters for the compilation.	WITHOUT_CLASSIFICATION	0.9996806441288096	WITHOUT_CLASSIFICATION	3.19355871190334E-4	DESIGN
// PHASE 1 : Parse the HQL into an AST.	WITHOUT_CLASSIFICATION	0.999033850045127	WITHOUT_CLASSIFICATION	9.661499548729428E-4	DESIGN
// PHASE 2 : Analyze the HQL AST, and produce an SQL AST.	WITHOUT_CLASSIFICATION	0.9999723630162268	WITHOUT_CLASSIFICATION	2.7636983773169062E-5	DESIGN
// PHASE 3 : Generate the SQL.	WITHOUT_CLASSIFICATION	0.9998466974569974	WITHOUT_CLASSIFICATION	1.5330254300260606E-4	DESIGN
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9919664860903673	WITHOUT_CLASSIFICATION	0.008033513909632684	DESIGN
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9919664860903673	WITHOUT_CLASSIFICATION	0.008033513909632684	DESIGN
//only needed during compilation phase...	WITHOUT_CLASSIFICATION	0.9981905975811668	WITHOUT_CLASSIFICATION	0.0018094024188331445	DESIGN
// Transform the tree.	WITHOUT_CLASSIFICATION	0.9999387581034729	WITHOUT_CLASSIFICATION	6.124189652712803E-5	DESIGN
// Parse the query string into an HQL AST.	WITHOUT_CLASSIFICATION	0.9994045712451561	WITHOUT_CLASSIFICATION	5.954287548438629E-4	DESIGN
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9994704754916068	WITHOUT_CLASSIFICATION	5.295245083931727E-4	DESIGN
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9994704754916068	WITHOUT_CLASSIFICATION	5.295245083931727E-4	DESIGN
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9994704754916068	WITHOUT_CLASSIFICATION	5.295245083931727E-4	DESIGN
// NOTE : ( max - 1 ) because first is zero-based while max is not...	WITHOUT_CLASSIFICATION	0.9969121656832786	WITHOUT_CLASSIFICATION	0.003087834316721569	DESIGN
// -- Package local methods for the QueryLoader delegate --	WITHOUT_CLASSIFICATION	0.9981913829161173	WITHOUT_CLASSIFICATION	0.0018086170838826905	DESIGN
// If there are no collection fetches, then no further checks are needed	WITHOUT_CLASSIFICATION	0.9997866621042932	WITHOUT_CLASSIFICATION	2.133378957066771E-4	DESIGN
// A shallow query is ok (although technically there should be no fetching here...)	WITHOUT_CLASSIFICATION	0.9982507831692456	WITHOUT_CLASSIFICATION	0.0017492168307543458	DESIGN
// should be the first, but just to be safe...	WITHOUT_CLASSIFICATION	0.9978184702982059	WITHOUT_CLASSIFICATION	0.002181529701794092	DESIGN
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9998979996490734	WITHOUT_CLASSIFICATION	1.0200035092657014E-4	DESIGN
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9998979996490734	WITHOUT_CLASSIFICATION	1.0200035092657014E-4	DESIGN
// Impl Note: allows multiple collection fetches as long as the // entire fecthed graph still "points back" to a single // root entity for return	WITHOUT_CLASSIFICATION	0.9674910550760969	WITHOUT_CLASSIFICATION	0.03250894492390313	DESIGN
// Otherwise, we have a non-scalar select with defined collection fetch(es). // Make sure that there is only a single root entity in the return (no tuples)	WITHOUT_CLASSIFICATION	0.9995709947866904	WITHOUT_CLASSIFICATION	4.2900521330947305E-4	DESIGN
// This is not strictly true.  We actually just need to make sure that // it is ordered by root-entity PK and that that order-by comes before // any non-root-entity ordering...	WITHOUT_CLASSIFICATION	0.685633553509277	WITHOUT_CLASSIFICATION	0.31436644649072304	DESIGN
//	WITHOUT_CLASSIFICATION	0.9997612566512477	WITHOUT_CLASSIFICATION	2.3874334875219311E-4	DESIGN
// we are already processing a dot-structure	WITHOUT_CLASSIFICATION	0.9974742312217234	WITHOUT_CLASSIFICATION	0.0025257687782765867	DESIGN
// igndore it...	WITHOUT_CLASSIFICATION	0.9988466623389317	WITHOUT_CLASSIFICATION	0.0011533376610682613	DESIGN
// we are now at a new tree level	WITHOUT_CLASSIFICATION	0.9991974077875586	WITHOUT_CLASSIFICATION	8.025922124413189E-4	DESIGN
// [jsd] The fix for HHH-558...	WITHOUT_CLASSIFICATION	0.9916567780742245	WITHOUT_CLASSIFICATION	0.00834322192577558	DESIGN
// If the token can tell us if it could be an identifier...	WITHOUT_CLASSIFICATION	0.9998663758142498	WITHOUT_CLASSIFICATION	1.3362418575014302E-4	DESIGN
// ... and the expected token type was an identifier, then:	WITHOUT_CLASSIFICATION	0.9973086195815555	WITHOUT_CLASSIFICATION	0.0026913804184445704	DESIGN
// Use the token as an identifier.	WITHOUT_CLASSIFICATION	0.9999283643668292	WITHOUT_CLASSIFICATION	7.163563317081346E-5	DESIGN
// Add the token to the AST.	WITHOUT_CLASSIFICATION	0.9999705804173368	WITHOUT_CLASSIFICATION	2.941958266314958E-5	DESIGN
// (NOT (EQ a b) ) => (NE a b)	WITHOUT_CLASSIFICATION	0.9997933233341496	WITHOUT_CLASSIFICATION	2.0667666585038878E-4	DESIGN
// (NOT (NE a b) ) => (EQ a b)	WITHOUT_CLASSIFICATION	0.9997933233341496	WITHOUT_CLASSIFICATION	2.0667666585038878E-4	DESIGN
// (NOT (LT a b) ) => (GE a b)	WITHOUT_CLASSIFICATION	0.9997933233341496	WITHOUT_CLASSIFICATION	2.0667666585038878E-4	DESIGN
// (NOT (GE a b) ) => (LT a b)	WITHOUT_CLASSIFICATION	0.9997933233341496	WITHOUT_CLASSIFICATION	2.0667666585038878E-4	DESIGN
// (NOT (LE a b) ) => (GT a b)	WITHOUT_CLASSIFICATION	0.9997933233341496	WITHOUT_CLASSIFICATION	2.0667666585038878E-4	DESIGN
// (NOT (LIKE a b) ) => (NOT_LIKE a b)	WITHOUT_CLASSIFICATION	0.9990353990996195	WITHOUT_CLASSIFICATION	9.6460090038054E-4	DESIGN
// (NOT (NOT_LIKE a b) ) => (LIKE a b)	WITHOUT_CLASSIFICATION	0.9990353990996195	WITHOUT_CLASSIFICATION	9.6460090038054E-4	DESIGN
// (NOT (IS_NOT_NULL a b) ) => (IS_NULL a b)	WITHOUT_CLASSIFICATION	0.9990353990996195	WITHOUT_CLASSIFICATION	9.6460090038054E-4	DESIGN
// (NOT (BETWEEN a b) ) => (NOT_BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9990353990996195	WITHOUT_CLASSIFICATION	9.6460090038054E-4	DESIGN
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.99784088195797	WITHOUT_CLASSIFICATION	0.0021591180420300255	DESIGN
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9953605580305032	WITHOUT_CLASSIFICATION	0.004639441969496767	DESIGN
// if // if // Otherwise, handle the error normally.	WITHOUT_CLASSIFICATION	0.999301850182616	WITHOUT_CLASSIFICATION	6.981498173839192E-4	DESIGN
// (NOT (NOT_BETWEEN a b) ) => (BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9990353990996195	WITHOUT_CLASSIFICATION	9.6460090038054E-4	DESIGN
/* This can never happen because this rule will always eliminate the child NOT.	WITHOUT_CLASSIFICATION	0.9939173549099355	WITHOUT_CLASSIFICATION	0.006082645090064484	DESIGN
// Just add a 'not' parent.	WITHOUT_CLASSIFICATION	0.9999350946778613	WITHOUT_CLASSIFICATION	6.490532213866141E-5	DESIGN
// (EQ NULL b) => (IS_NULL b)	WITHOUT_CLASSIFICATION	0.9999136040626491	WITHOUT_CLASSIFICATION	8.639593735099378E-5	DESIGN
// (EQ a NULL) => (IS_NULL a)	WITHOUT_CLASSIFICATION	0.9998475358162254	WITHOUT_CLASSIFICATION	1.5246418377465822E-4	DESIGN
// NOTE: Because we're using ASTUtil.createParent(), the tree must be created from the bottom up. // IS EMPTY x => (EXISTS (QUERY (SELECT_FROM (FROM x) ) ) )	WITHOUT_CLASSIFICATION	0.9987060068804519	WITHOUT_CLASSIFICATION	0.0012939931195481737	DESIGN
// Add NOT if it's negated.	WITHOUT_CLASSIFICATION	0.999813425376525	WITHOUT_CLASSIFICATION	1.8657462347502872E-4	DESIGN
// Create nodes that track line and column number.	WITHOUT_CLASSIFICATION	0.9999481220240513	WITHOUT_CLASSIFICATION	5.1877975948623835E-5	DESIGN
// Case 1: Multi token keywords GROUP BY and ORDER BY // The next token ( LT(2) ) should be 'by'... otherwise, this is just an ident.	WITHOUT_CLASSIFICATION	0.967179390850208	WITHOUT_CLASSIFICATION	0.032820609149792	DESIGN
// Case 2: The current token is after FROM and before '.'.	WITHOUT_CLASSIFICATION	0.9996907035022595	WITHOUT_CLASSIFICATION	3.092964977405083E-4	DESIGN
// This handles HHH-354, where there is a strange property name in a where clause. // If the lookahead contains a DOT then something that isn't an IDENT...	WITHOUT_CLASSIFICATION	0.9999796462068974	WITHOUT_CLASSIFICATION	2.0353793102623153E-5	DESIGN
// See if the second lookahed token can be an identifier.	WITHOUT_CLASSIFICATION	0.9998078168470128	WITHOUT_CLASSIFICATION	1.9218315298723078E-4	DESIGN
// Set it!	WITHOUT_CLASSIFICATION	0.99978821896197	WITHOUT_CLASSIFICATION	2.1178103803007984E-4	DESIGN
// ignore	WITHOUT_CLASSIFICATION	0.9994308494376155	WITHOUT_CLASSIFICATION	5.691505623845223E-4	DESIGN
// strip the " where "	WITHOUT_CLASSIFICATION	0.9999557778973927	WITHOUT_CLASSIFICATION	4.422210260726587E-5	DESIGN
// Don't really know all the codes required to adequately decipher returned jdbc exceptions here. // simply allow the failure to be eaten and the subsequent insert-selects/deletes should fail	WITHOUT_CLASSIFICATION	0.9959384666708961	WITHOUT_CLASSIFICATION	0.0040615333291038665	DESIGN
// at the very least cleanup the data :)	WITHOUT_CLASSIFICATION	0.9991193987168229	WITHOUT_CLASSIFICATION	8.806012831772152E-4	DESIGN
// First, save off the pertinent ids, as the return value	WITHOUT_CLASSIFICATION	0.9999557605982509	WITHOUT_CLASSIFICATION	4.4239401749169876E-5	DESIGN
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9997651398579833	WITHOUT_CLASSIFICATION	2.3486014201673207E-4	DESIGN
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9997651398579833	WITHOUT_CLASSIFICATION	2.3486014201673207E-4	DESIGN
// Start performing the updates	WITHOUT_CLASSIFICATION	0.9997462490988068	WITHOUT_CLASSIFICATION	2.537509011931838E-4	DESIGN
// First, save off the pertinent ids, saving the number of pertinent ids for return	WITHOUT_CLASSIFICATION	0.9999276301267738	WITHOUT_CLASSIFICATION	7.23698732262906E-5	DESIGN
// Start performing the deletes	WITHOUT_CLASSIFICATION	0.9997316730058744	WITHOUT_CLASSIFICATION	2.6832699412556626E-4	DESIGN
// otherwise, everything ok.	WITHOUT_CLASSIFICATION	0.9998509707618155	WITHOUT_CLASSIFICATION	1.4902923818458988E-4	DESIGN
// visit width-first, then depth	WITHOUT_CLASSIFICATION	0.9995450580876044	WITHOUT_CLASSIFICATION	4.549419123955454E-4	DESIGN
// if the types report logical equivalence, return true...	WITHOUT_CLASSIFICATION	0.9988145256239689	WITHOUT_CLASSIFICATION	0.0011854743760311252	DESIGN
// otherwise, perform a "deep equivalence" check...	WITHOUT_CLASSIFICATION	0.996474218180671	WITHOUT_CLASSIFICATION	0.003525781819329054	DESIGN
// If there is no WHERE node, make one.	WITHOUT_CLASSIFICATION	0.9993132232565644	WITHOUT_CLASSIFICATION	6.867767434355721E-4	DESIGN
// inject the WHERE after the parent	WITHOUT_CLASSIFICATION	0.9998226190208295	WITHOUT_CLASSIFICATION	1.7738097917048245E-4	DESIGN
// Never include subclasses for implied from elements.	WITHOUT_CLASSIFICATION	0.9990075720584982	WITHOUT_CLASSIFICATION	9.924279415017335E-4	DESIGN
// Moved here from SelectClause [jsd]	WITHOUT_CLASSIFICATION	0.9887601337202278	WITHOUT_CLASSIFICATION	0.011239866279772186	DESIGN
///////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9971445822131259	WITHOUT_CLASSIFICATION	0.002855417786874105	DESIGN
// Use the table fromElement and the property name to get the array of column names.	WITHOUT_CLASSIFICATION	0.9999213243366175	WITHOUT_CLASSIFICATION	7.86756633824714E-5	DESIGN
// Set the attributes of the property reference expression.	WITHOUT_CLASSIFICATION	0.9999102613430443	WITHOUT_CLASSIFICATION	8.973865695570293E-5	DESIGN
// If the uresolved property path isn't set yet, just use the property name.	WITHOUT_CLASSIFICATION	0.9999505944930529	WITHOUT_CLASSIFICATION	4.9405506946985264E-5	DESIGN
// The 'from element' that the property is in.	WITHOUT_CLASSIFICATION	0.9999207011118663	WITHOUT_CLASSIFICATION	7.929888813381521E-5	DESIGN
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999407906455237	WITHOUT_CLASSIFICATION	5.920935447633816E-5	DESIGN
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999407906455237	WITHOUT_CLASSIFICATION	5.920935447633816E-5	DESIGN
// If this dot has already been resolved, stop now.	WITHOUT_CLASSIFICATION	0.9983475647225888	WITHOUT_CLASSIFICATION	0.0016524352774111618	DESIGN
// If there is no data type for this node, and we're at the end of the path (top most dot node), then // this might be a Java constant.	WITHOUT_CLASSIFICATION	0.9329279861874702	WITHOUT_CLASSIFICATION	0.06707201381252983	DESIGN
// The property is a collection...	WITHOUT_CLASSIFICATION	0.9996624056794781	WITHOUT_CLASSIFICATION	3.3759432052192045E-4	DESIGN
// The property is a component...	WITHOUT_CLASSIFICATION	0.9996624056794781	WITHOUT_CLASSIFICATION	3.3759432052192045E-4	DESIGN
// The property is another class..	WITHOUT_CLASSIFICATION	0.9998550764536112	WITHOUT_CLASSIFICATION	1.449235463888528E-4	DESIGN
// Otherwise, this is a primitive type.	WITHOUT_CLASSIFICATION	0.9985589426237782	WITHOUT_CLASSIFICATION	0.0014410573762218258	DESIGN
//foo.bars.size (also handles deprecated stuff like foo.bars.maxelement for backwardness)	WITHOUT_CLASSIFICATION	0.9935063695619106	WITHOUT_CLASSIFICATION	0.006493630438089373	DESIGN
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9984469713381202	WITHOUT_CLASSIFICATION	0.0015530286618796862	DESIGN
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999026209732769	WITHOUT_CLASSIFICATION	9.737902672309149E-5	DESIGN
// in non-select queries, the only time we should need to join is if we are in a subquery from clause	WITHOUT_CLASSIFICATION	0.962112412149892	WITHOUT_CLASSIFICATION	0.03788758785010808	DESIGN
// this is the regression style determination which matches the logic of the classic translator	WITHOUT_CLASSIFICATION	0.9998371660070361	WITHOUT_CLASSIFICATION	1.6283399296401042E-4	DESIGN
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9984469713381202	WITHOUT_CLASSIFICATION	0.0015530286618796862	DESIGN
// even though we might find a pre-existing element by join path, we may not be able to reuse it...	WITHOUT_CLASSIFICATION	0.9112302501845081	WITHOUT_CLASSIFICATION	0.0887697498154919	DESIGN
// NOTE : addDuplicateAlias() already performs nullness checks on the alias.	WITHOUT_CLASSIFICATION	0.9997963475115457	WITHOUT_CLASSIFICATION	2.0365248845426206E-4	DESIGN
// if the from-clauses are the same, we can be a little more aggressive in terms of what we reuse	WITHOUT_CLASSIFICATION	0.9831261302135508	WITHOUT_CLASSIFICATION	0.016873869786449194	DESIGN
// again, null != null here	WITHOUT_CLASSIFICATION	0.9993915022027899	WITHOUT_CLASSIFICATION	6.084977972101953E-4	DESIGN
// If this is an implied join in a from element, then use the impled join type which is part of the // tree parser's state (set by the gramamar actions).	WITHOUT_CLASSIFICATION	0.9948809557741021	WITHOUT_CLASSIFICATION	0.005119044225897862	DESIGN
// otherwise (subquery case) dont reuse the fromElement if we are processing the from-clause of the subquery	WITHOUT_CLASSIFICATION	0.9996029461525497	WITHOUT_CLASSIFICATION	3.9705384745036945E-4	DESIGN
// we know only the lhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999375809772845	WITHOUT_CLASSIFICATION	6.241902271558934E-5	DESIGN
// the referenced node text is the special 'id'	WITHOUT_CLASSIFICATION	0.9999600788809996	WITHOUT_CLASSIFICATION	3.992111900033652E-5	DESIGN
// only the identifier property field name can be a reference to the associated entity's PK...	WITHOUT_CLASSIFICATION	0.9998330948541246	WITHOUT_CLASSIFICATION	1.6690514587531225E-4	DESIGN
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.999661108733356	WITHOUT_CLASSIFICATION	3.388912666439109E-4	DESIGN
// Append the new property name onto the unresolved path.	WITHOUT_CLASSIFICATION	0.9999362231746892	WITHOUT_CLASSIFICATION	6.377682531080642E-5	DESIGN
// If the lhs is a collection, use CollectionPropertyMapping	WITHOUT_CLASSIFICATION	0.9996983700927075	WITHOUT_CLASSIFICATION	3.0162990729254506E-4	DESIGN
// Tell the destination fromElement to 'includeSubclasses'.	WITHOUT_CLASSIFICATION	0.9995084107957042	WITHOUT_CLASSIFICATION	4.915892042957659E-4	DESIGN
// Use theta style (for regression) // Move the node up, after the origin node.	WITHOUT_CLASSIFICATION	0.998401500413008	WITHOUT_CLASSIFICATION	0.0015984995869919806	DESIGN
// Don't resolve the node again.	WITHOUT_CLASSIFICATION	0.9998498904984514	WITHOUT_CLASSIFICATION	1.5010950154864956E-4	DESIGN
// for expected parameter type injection, we expect that the lhs represents // some form of property ref and that the children of the in-list represent // one-or-more params.	WITHOUT_CLASSIFICATION	0.954675811832883	WITHOUT_CLASSIFICATION	0.04532418816711693	DESIGN
// we need to strip off the embedded parens so that sql-gen does not double these up	WITHOUT_CLASSIFICATION	0.999337493477256	WITHOUT_CLASSIFICATION	6.62506522744031E-4	DESIGN
// we have something like : "? [op] rhs"	WITHOUT_CLASSIFICATION	0.99979610374689	WITHOUT_CLASSIFICATION	2.0389625311011876E-4	DESIGN
// we have something like : "lhs [op] ?"	WITHOUT_CLASSIFICATION	0.99979610374689	WITHOUT_CLASSIFICATION	2.0389625311011876E-4	DESIGN
// we know only the rhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999375809772845	WITHOUT_CLASSIFICATION	6.241902271558934E-5	DESIGN
// handle the (assumed) valid cases: // #1 - the only valid datetime addition synatx is one or the other is a datetime (but not both)	WITHOUT_CLASSIFICATION	0.9982915699433693	WITHOUT_CLASSIFICATION	0.001708430056630699	DESIGN
// one or the other needs to be a datetime for us to get into this method in the first place...	WITHOUT_CLASSIFICATION	0.7563633453712866	WITHOUT_CLASSIFICATION	0.24363665462871348	DESIGN
// #3 - note that this is also true of "datetime - :param"...	WITHOUT_CLASSIFICATION	0.9025808629008794	WITHOUT_CLASSIFICATION	0.0974191370991207	DESIGN
// #2	WITHOUT_CLASSIFICATION	0.9997738827497609	WITHOUT_CLASSIFICATION	2.2611725023921153E-4	DESIGN
// Generate the inner join -- The elements need to be joined to the collection they are in.	WITHOUT_CLASSIFICATION	0.9965359170713475	WITHOUT_CLASSIFICATION	0.0034640829286525575	DESIGN
// nothing to do	WITHOUT_CLASSIFICATION	0.9999336451319041	WITHOUT_CLASSIFICATION	6.635486809588671E-5	DESIGN
// The 'from element' that represents the elements of the collection.	WITHOUT_CLASSIFICATION	0.999975505347394	WITHOUT_CLASSIFICATION	2.4494652606033998E-5	DESIGN
// Add the condition to the join sequence that qualifies the indexed element.	WITHOUT_CLASSIFICATION	0.9998329195691058	WITHOUT_CLASSIFICATION	1.6708043089427993E-4	DESIGN
// Sometimes use the element table alias, sometimes use the... umm... collection table alias (many to many)	WITHOUT_CLASSIFICATION	0.9969170466318272	WITHOUT_CLASSIFICATION	0.0030829533681728484	DESIGN
// Now, set the text for this node.  It should be the element columns.	WITHOUT_CLASSIFICATION	0.9963455308117372	WITHOUT_CLASSIFICATION	0.003654469188262932	DESIGN
// Get the function return value type, based on the type of the first argument.	WITHOUT_CLASSIFICATION	0.9998738106531612	WITHOUT_CLASSIFICATION	1.2618934683882689E-4	DESIGN
// This will call initialize(tok)!	WITHOUT_CLASSIFICATION	0.9951786987389923	WITHOUT_CLASSIFICATION	0.004821301261007606	DESIGN
// mutation depends on the types of nodes invloved...	WITHOUT_CLASSIFICATION	0.9998650074709342	WITHOUT_CLASSIFICATION	1.349925290658714E-4	DESIGN
// "pass along" our initial embedded parameter node(s) to the first generated // sql fragment so that it can be handled later for parameter binding...	WITHOUT_CLASSIFICATION	0.998846763702658	WITHOUT_CLASSIFICATION	0.0011532362973419802	DESIGN
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.999777122871916	WITHOUT_CLASSIFICATION	2.2287712808408402E-4	DESIGN
// Generated select expressions are already resolved, nothing to do.	WITHOUT_CLASSIFICATION	0.9997896842757154	WITHOUT_CLASSIFICATION	2.1031572428467348E-4	DESIGN
// The path may be a reference to an alias defined in the parent query.	WITHOUT_CLASSIFICATION	0.9995272832332159	WITHOUT_CLASSIFICATION	4.727167667841022E-4	DESIGN
// The HQL class alias refers to the class name.	WITHOUT_CLASSIFICATION	0.9997094494644251	WITHOUT_CLASSIFICATION	2.9055053557491936E-4	DESIGN
// Associate the table alias with the element.	WITHOUT_CLASSIFICATION	0.9997323083591322	WITHOUT_CLASSIFICATION	2.6769164086781224E-4	DESIGN
// try the parent FromClause...	WITHOUT_CLASSIFICATION	0.9998964965273658	WITHOUT_CLASSIFICATION	1.035034726341595E-4	DESIGN
// Add the new node to the map so that we don't create it twice.	WITHOUT_CLASSIFICATION	0.9999193222243845	WITHOUT_CLASSIFICATION	8.067777561546999E-5	DESIGN
// Make sure that all from elements registered with this FROM clause are actually in the AST.	WITHOUT_CLASSIFICATION	0.9984287528547885	WITHOUT_CLASSIFICATION	0.0015712471452114496	DESIGN
// Invoke setScalarColumnText on each constructor argument.	WITHOUT_CLASSIFICATION	0.9999160302068892	WITHOUT_CLASSIFICATION	8.396979311077078E-5	DESIGN
// Collect the select expressions, skip the first child because it is the class name.	WITHOUT_CLASSIFICATION	0.999991614695575	WITHOUT_CLASSIFICATION	8.385304425119426E-6	DESIGN
// return an empty Type array	WITHOUT_CLASSIFICATION	0.9999120579032622	WITHOUT_CLASSIFICATION	8.794209673785181E-5	DESIGN
// Constructors are always considered scalar results.	WITHOUT_CLASSIFICATION	0.9980987054275743	WITHOUT_CLASSIFICATION	0.00190129457242568	DESIGN
// this is the exception returned by ReflectHelper.getConstructor() if it cannot // locate an appropriate constructor	WITHOUT_CLASSIFICATION	0.9992212448664749	WITHOUT_CLASSIFICATION	7.787551335251325E-4	DESIGN
// if there is no order by, make one	WITHOUT_CLASSIFICATION	0.9981796159951759	WITHOUT_CLASSIFICATION	0.001820384004824133	DESIGN
// Find the WHERE; if there is no WHERE, find the FROM...	WITHOUT_CLASSIFICATION	0.9997471497877195	WITHOUT_CLASSIFICATION	2.528502122805893E-4	DESIGN
// Now, inject the newly built ORDER BY into the tree	WITHOUT_CLASSIFICATION	0.9992400585260084	WITHOUT_CLASSIFICATION	7.599414739916931E-4	DESIGN
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993445683858901	WITHOUT_CLASSIFICATION	6.554316141098484E-4	DESIGN
// logic operators by definition resolve to boolean.	WITHOUT_CLASSIFICATION	0.999777122871916	WITHOUT_CLASSIFICATION	2.2287712808408402E-4	DESIGN
// Render the identifier select fragment using the table alias.	WITHOUT_CLASSIFICATION	0.99991416815034	WITHOUT_CLASSIFICATION	8.583184965994436E-5	DESIGN
// Class names in the FROM clause result in a JoinSequence (the old FromParser does this).	WITHOUT_CLASSIFICATION	0.9993354308691614	WITHOUT_CLASSIFICATION	6.645691308386231E-4	DESIGN
// For many-to-many joins, use the tablename from the queryable collection for the default text.	WITHOUT_CLASSIFICATION	0.9963941724242468	WITHOUT_CLASSIFICATION	0.003605827575753118	DESIGN
// Otherwise, use the property mapping.	WITHOUT_CLASSIFICATION	0.9998700569497304	WITHOUT_CLASSIFICATION	1.2994305026957178E-4	DESIGN
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9963804615766945	WITHOUT_CLASSIFICATION	0.003619538423305553	DESIGN
// If the property is a special collection property name, return a CollectionPropertyMapping.	WITHOUT_CLASSIFICATION	0.9998134119831273	WITHOUT_CLASSIFICATION	1.8658801687266116E-4	DESIGN
// Collection of components.	WITHOUT_CLASSIFICATION	0.9998417147911313	WITHOUT_CLASSIFICATION	1.5828520886872685E-4	DESIGN
// make sure the lhs is "assignable"...	WITHOUT_CLASSIFICATION	0.9985974511915288	WITHOUT_CLASSIFICATION	0.0014025488084712212	DESIGN
// false indicates to not generate parens around the assignment	WITHOUT_CLASSIFICATION	0.9997995148429022	WITHOUT_CLASSIFICATION	2.0048515709789877E-4	DESIGN
// Register the FromElement with the FROM clause, now that we have the names and aliases.	WITHOUT_CLASSIFICATION	0.9999028641562269	WITHOUT_CLASSIFICATION	9.713584377314399E-5	DESIGN
// currently allowed...	WITHOUT_CLASSIFICATION	0.9997909081984618	WITHOUT_CLASSIFICATION	2.0909180153811486E-4	DESIGN
// HHH-276 : implied joins in a subselect where clause - The destination needs to be added // to the destination's from clause. // Not sure if this is will fix everything, but it works.	WITHOUT_CLASSIFICATION	0.9472598188566196	WITHOUT_CLASSIFICATION	0.052740181143380326	DESIGN
//return classAlias == null ? className : classAlias;	WITHOUT_CLASSIFICATION	0.9873563273813694	WITHOUT_CLASSIFICATION	0.012643672618630614	DESIGN
// This is an explicit FROM element.	WITHOUT_CLASSIFICATION	0.9867343536915303	WITHOUT_CLASSIFICATION	0.013265646308469662	DESIGN
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993445683858901	WITHOUT_CLASSIFICATION	6.554316141098484E-4	DESIGN
// Fetch can't be used with scroll() or iterate().	WITHOUT_CLASSIFICATION	0.9970880947439299	WITHOUT_CLASSIFICATION	0.0029119052560701276	DESIGN
// If it's not implied or it is implied and it's a many to many join where the target wasn't found.	WITHOUT_CLASSIFICATION	0.9999813710773672	WITHOUT_CLASSIFICATION	1.862892263271445E-5	DESIGN
// Since this is an explicit FROM element, it can't be implied in the FROM clause.	WITHOUT_CLASSIFICATION	0.9963386078370174	WITHOUT_CLASSIFICATION	0.0036613921629824586	DESIGN
// Do nothing, eplicit from elements are *always* in the projection list.	WITHOUT_CLASSIFICATION	0.9997265585372966	WITHOUT_CLASSIFICATION	2.7344146270338345E-4	DESIGN
// propertyName refers to something like collection.size...	WITHOUT_CLASSIFICATION	0.9996722883139416	WITHOUT_CLASSIFICATION	3.2771168605837944E-4	DESIGN
// property name is a sub-path of a component...	WITHOUT_CLASSIFICATION	0.9994387925069487	WITHOUT_CLASSIFICATION	5.61207493051322E-4	DESIGN
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999026209732769	WITHOUT_CLASSIFICATION	9.737902672309149E-5	DESIGN
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9906457466266295	WITHOUT_CLASSIFICATION	0.009354253373370458	DESIGN
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.999777122871916	WITHOUT_CLASSIFICATION	2.2287712808408402E-4	DESIGN
// DotNode uses null here...	WITHOUT_CLASSIFICATION	0.9986142283722074	WITHOUT_CLASSIFICATION	0.001385771627792677	DESIGN
// We represent a from-clause alias	WITHOUT_CLASSIFICATION	0.9978386864220521	WITHOUT_CLASSIFICATION	0.0021613135779479918	DESIGN
// we are the LHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9993399620224847	WITHOUT_CLASSIFICATION	6.600379775154435E-4	DESIGN
// we are the RHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9991073953959697	WITHOUT_CLASSIFICATION	8.926046040303064E-4	DESIGN
// we represent a naked (simple) prop-ref	WITHOUT_CLASSIFICATION	0.9951992101860229	WITHOUT_CLASSIFICATION	0.004800789813977175	DESIGN
// EARLY EXIT!!!  return so the resolve call explicitly coming from DotNode can // resolve this...	WITHOUT_CLASSIFICATION	0.9998509345244614	WITHOUT_CLASSIFICATION	1.490654755385196E-4	DESIGN
// assume this ident's text does *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9994449358858027	WITHOUT_CLASSIFICATION	5.550641141972174E-4	DESIGN
// just ignore it for now, it'll get resolved later...	WITHOUT_CLASSIFICATION	0.9976820487350304	WITHOUT_CLASSIFICATION	0.002317951264969638	DESIGN
// This is not actually a constant, but a reference to FROM element.	WITHOUT_CLASSIFICATION	0.8719837770095302	WITHOUT_CLASSIFICATION	0.12801622299046972	DESIGN
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9996736561861218	WITHOUT_CLASSIFICATION	3.263438138782277E-4	DESIGN
// these pieces are needed for usage in select clause	WITHOUT_CLASSIFICATION	0.997298194628557	WITHOUT_CLASSIFICATION	0.0027018053714430146	DESIGN
// used to set the type of the parent dot node	WITHOUT_CLASSIFICATION	0.998794208943744	WITHOUT_CLASSIFICATION	0.0012057910562559605	DESIGN
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9994979953201731	WITHOUT_CLASSIFICATION	5.020046798268406E-4	DESIGN
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9994979953201731	WITHOUT_CLASSIFICATION	5.020046798268406E-4	DESIGN
// naked property-refs cannot be used with an aliased from element	WITHOUT_CLASSIFICATION	0.9978231177708197	WITHOUT_CLASSIFICATION	0.0021768822291802973	DESIGN
// this piece is needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9793917311569553	WITHOUT_CLASSIFICATION	0.020608268843044668	DESIGN
// do *not* over-write the column text, as that has already been // "rendered" during resolve	WITHOUT_CLASSIFICATION	0.999906681156374	WITHOUT_CLASSIFICATION	9.331884362602976E-5	DESIGN
// for some reason the antlr.CommonAST initialization routines force // this method to get called twice.  The first time with an empty string	WITHOUT_CLASSIFICATION	0.9992609495313863	WITHOUT_CLASSIFICATION	7.390504686137694E-4	DESIGN
// Look up class name using the first identifier in the path.	WITHOUT_CLASSIFICATION	0.9999309628725985	WITHOUT_CLASSIFICATION	6.903712740142064E-5	DESIGN
// Add to the query spaces.	WITHOUT_CLASSIFICATION	0.9999586084693468	WITHOUT_CLASSIFICATION	4.139153065319256E-5	DESIGN
// If the from element isn't in the same clause, create a new from element.	WITHOUT_CLASSIFICATION	0.99778104959196	WITHOUT_CLASSIFICATION	0.0022189504080399047	DESIGN
// This is the root level node. // Generate an explicit from clause at the root.	WITHOUT_CLASSIFICATION	0.9910037019638318	WITHOUT_CLASSIFICATION	0.008996298036168122	DESIGN
// Correlated subqueries create 'special' implied from nodes // because correlated subselects can't use an ANSI-style join	WITHOUT_CLASSIFICATION	0.9997447587313862	WITHOUT_CLASSIFICATION	2.5524126861377924E-4	DESIGN
// super-duper-classic-parser-regression-testing-mojo-magic...	WITHOUT_CLASSIFICATION	0.9992082377773907	WITHOUT_CLASSIFICATION	7.917622226092409E-4	DESIGN
// A collection of entities...	WITHOUT_CLASSIFICATION	0.9991043739086625	WITHOUT_CLASSIFICATION	8.956260913375273E-4	DESIGN
// A collection of components...	WITHOUT_CLASSIFICATION	0.9958304723364912	WITHOUT_CLASSIFICATION	0.004169527663508777	DESIGN
// A collection of scalar elements...	WITHOUT_CLASSIFICATION	0.9958304723364912	WITHOUT_CLASSIFICATION	0.004169527663508777	DESIGN
// according to both the ANSI-SQL and EJB3 specs, trim can either take // exactly one parameter or a variable number of parameters between 1 and 4. // from the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If only <trim specification> is omitted, BOTH is assumed; // if <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9996750911646648	WITHOUT_CLASSIFICATION	3.249088353352815E-4	DESIGN
// Don't include sub-classes for implied collection joins or subquery joins.	WITHOUT_CLASSIFICATION	0.9921786809152481	WITHOUT_CLASSIFICATION	0.007821319084751855	DESIGN
// Treat explict from elements in sub-queries properly.	WITHOUT_CLASSIFICATION	0.9994273644434923	WITHOUT_CLASSIFICATION	5.726355565076822E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9997612566512477	WITHOUT_CLASSIFICATION	2.3874334875219311E-4	DESIGN
// the "root from-element" in correlated subqueries do need this piece	WITHOUT_CLASSIFICATION	0.920773283667954	WITHOUT_CLASSIFICATION	0.07922671633204607	DESIGN
// Create the FROM element for the target (the elements of the collection).	WITHOUT_CLASSIFICATION	0.9999817097363947	WITHOUT_CLASSIFICATION	1.829026360538513E-5	DESIGN
// If the join is implied, then don't include sub-classes on the element.	WITHOUT_CLASSIFICATION	0.9997528346429362	WITHOUT_CLASSIFICATION	2.471653570637709E-4	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992443954877838	WITHOUT_CLASSIFICATION	7.556045122162274E-4	DESIGN
// The associated entity is implied, but it must be included in the FROM. // The collection alias is the role.	WITHOUT_CLASSIFICATION	0.978588773007794	WITHOUT_CLASSIFICATION	0.021411226992206045	DESIGN
// Tag this node as a JOIN. // Don't include subclasses in the join. // This is a clollection join.	WITHOUT_CLASSIFICATION	0.9923843559401533	WITHOUT_CLASSIFICATION	0.007615644059846728	DESIGN
// Get the class name of the associated entity.	WITHOUT_CLASSIFICATION	0.9999354049955373	WITHOUT_CLASSIFICATION	6.459500446269835E-5	DESIGN
//  origin, path, implied, columns, classAlias,	WITHOUT_CLASSIFICATION	0.9991552478623984	WITHOUT_CLASSIFICATION	8.44752137601667E-4	DESIGN
/*implied*/	WITHOUT_CLASSIFICATION	0.9988361658907539	WITHOUT_CLASSIFICATION	0.0011638341092461385	DESIGN
// For implied many-to-many, just add the end join.	WITHOUT_CLASSIFICATION	0.999838423519825	WITHOUT_CLASSIFICATION	1.615764801750354E-4	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992443954877838	WITHOUT_CLASSIFICATION	7.556045122162274E-4	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992443954877838	WITHOUT_CLASSIFICATION	7.556045122162274E-4	DESIGN
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9996647075467683	WITHOUT_CLASSIFICATION	3.3529245323177205E-4	DESIGN
// This causes the factory to instantiate the desired class.	WITHOUT_CLASSIFICATION	0.9919039106631339	WITHOUT_CLASSIFICATION	0.008096089336866057	DESIGN
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9971802654997046	WITHOUT_CLASSIFICATION	0.002819734500295267	DESIGN
// Frontbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.998525788614448	WITHOUT_CLASSIFICATION	0.0014742113855520983	DESIGN
/*	WITHOUT_CLASSIFICATION	0.9973303510783034	WITHOUT_CLASSIFICATION	0.0026696489216966697	DESIGN
/*public Type[] getSqlResultTypes() {	WITHOUT_CLASSIFICATION	0.9976179297825403	WITHOUT_CLASSIFICATION	0.002382070217459621	DESIGN
// First, collect all of the select expressions. // NOTE: This must be done *before* invoking setScalarColumnText() because setScalarColumnText() // changes the AST!!!	WITHOUT_CLASSIFICATION	0.9960691341847374	WITHOUT_CLASSIFICATION	0.0039308658152626495	DESIGN
// First allow the actual type to control the return value. (the actual underlying sqltype could actually be different)	WITHOUT_CLASSIFICATION	0.9722075136735201	WITHOUT_CLASSIFICATION	0.02779248632647989	DESIGN
//sqlResultTypeList.addAll( constructorArgumentTypeList );	WITHOUT_CLASSIFICATION	0.9968940233176451	WITHOUT_CLASSIFICATION	0.0031059766823548695	DESIGN
// If the data type is not an association type, it could not have been in the FROM clause.	WITHOUT_CLASSIFICATION	0.9997371564275077	WITHOUT_CLASSIFICATION	2.6284357249228314E-4	DESIGN
//sqlResultTypeList.add( type );	WITHOUT_CLASSIFICATION	0.9920230793511857	WITHOUT_CLASSIFICATION	0.007976920648814327	DESIGN
// Always add the type to the return type list.	WITHOUT_CLASSIFICATION	0.9996451668863129	WITHOUT_CLASSIFICATION	3.548331136871323E-4	DESIGN
// add the fetched entities	WITHOUT_CLASSIFICATION	0.9999801333465878	WITHOUT_CLASSIFICATION	1.9866653412266943E-5	DESIGN
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9994216191214904	WITHOUT_CLASSIFICATION	5.783808785095766E-4	DESIGN
// function support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9991408194220348	WITHOUT_CLASSIFICATION	8.591805779650666E-4	DESIGN
// If there are any scalars (non-entities) selected, render the select column aliases.	WITHOUT_CLASSIFICATION	0.9999740525177231	WITHOUT_CLASSIFICATION	2.5947482276940684E-5	DESIGN
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9993333866232158	WITHOUT_CLASSIFICATION	6.666133767841301E-4	DESIGN
/*ArrayList sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9968940233176451	WITHOUT_CLASSIFICATION	0.0031059766823548695	DESIGN
//sqlResultTypes = ( Type[] ) sqlResultTypeList.toArray( new Type[sqlResultTypeList.size()] );	WITHOUT_CLASSIFICATION	0.9991291775774412	WITHOUT_CLASSIFICATION	8.708224225588374E-4	DESIGN
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9961665115954329	WITHOUT_CLASSIFICATION	0.0038334884045670946	DESIGN
//TODO:	WITHOUT_CLASSIFICATION	0.978016306183063	WITHOUT_CLASSIFICATION	0.021983693816936968	DESIGN
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9998270520340868	WITHOUT_CLASSIFICATION	1.7294796591325168E-4	DESIGN
// Generate an 2d array of column names, the first dimension is parallel with the // return types array.  The second dimension is the list of column names for each // type.	WITHOUT_CLASSIFICATION	0.9999952205162649	WITHOUT_CLASSIFICATION	4.779483735166344E-6	DESIGN
// Generate the select expression.	WITHOUT_CLASSIFICATION	0.999794981069851	WITHOUT_CLASSIFICATION	2.0501893014897684E-4	DESIGN
// union subclass support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9981963793270253	WITHOUT_CLASSIFICATION	0.0018036206729746802	DESIGN
// Skip 'DISTINCT' and 'ALL', so we return the first expression node.	WITHOUT_CLASSIFICATION	0.9998515615310901	WITHOUT_CLASSIFICATION	1.4843846890987835E-4	DESIGN
// Create SQL_TOKEN nodes for the columns.	WITHOUT_CLASSIFICATION	0.9997869553995885	WITHOUT_CLASSIFICATION	2.1304460041144684E-4	DESIGN
// Generate the property select tokens.	WITHOUT_CLASSIFICATION	0.9999309220613894	WITHOUT_CLASSIFICATION	6.907793861050876E-5	DESIGN
// Get the function name node.	WITHOUT_CLASSIFICATION	0.999992407980276	WITHOUT_CLASSIFICATION	7.592019723934383E-6	DESIGN
// Method expressions in a SELECT should always be considered scalar.	WITHOUT_CLASSIFICATION	0.9720088598198824	WITHOUT_CLASSIFICATION	0.027991140180117564	DESIGN
// If this is 'elements' then create a new FROM element.	WITHOUT_CLASSIFICATION	0.997397189705386	WITHOUT_CLASSIFICATION	0.0026028102946138933	DESIGN
// Not elements(x)	WITHOUT_CLASSIFICATION	0.9997402222649807	WITHOUT_CLASSIFICATION	2.5977773501924674E-4	DESIGN
// Dialect function	WITHOUT_CLASSIFICATION	0.9999145836795987	WITHOUT_CLASSIFICATION	8.541632040123587E-5	DESIGN
// Collection 'property function'	WITHOUT_CLASSIFICATION	0.9990516966574894	WITHOUT_CLASSIFICATION	9.483033425106775E-4	DESIGN
// If the constant is an IDENT, figure out what it means...	WITHOUT_CLASSIFICATION	0.9997717990267048	WITHOUT_CLASSIFICATION	2.282009732952021E-4	DESIGN
// IDENT is a class alias in the FROM.	WITHOUT_CLASSIFICATION	0.9991025476235252	WITHOUT_CLASSIFICATION	8.97452376474789E-4	DESIGN
// Resolve to an identity column.	WITHOUT_CLASSIFICATION	0.9991223916805266	WITHOUT_CLASSIFICATION	8.776083194732336E-4	DESIGN
// Otherwise, it's a literal.	WITHOUT_CLASSIFICATION	0.9994426079022347	WITHOUT_CLASSIFICATION	5.573920977653676E-4	DESIGN
// the name of an entity class	WITHOUT_CLASSIFICATION	0.9999709930410935	WITHOUT_CLASSIFICATION	2.9006958906576535E-5	DESIGN
//the class discriminator value	WITHOUT_CLASSIFICATION	0.9977722216742743	WITHOUT_CLASSIFICATION	0.002227778325725732	DESIGN
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9998892764559828	WITHOUT_CLASSIFICATION	1.1072354401718716E-4	DESIGN
// Add a space before the display text.	WITHOUT_CLASSIFICATION	0.9999809874918941	WITHOUT_CLASSIFICATION	1.9012508105806938E-5	DESIGN
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9997735174027802	WITHOUT_CLASSIFICATION	2.264825972197757E-4	DESIGN
// child == parent.getFirstChild()	WITHOUT_CLASSIFICATION	0.9999276233894427	WITHOUT_CLASSIFICATION	7.23766105572978E-5	DESIGN
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9997735174027802	WITHOUT_CLASSIFICATION	2.264825972197757E-4	DESIGN
// Filter conditions need to be inserted before the HQL where condition and the // theta join node.  This is because org.hibernate.loader.Loader binds the filter parameters first, // then it binds all the HQL query parameters, see org.hibernate.loader.Loader.processFilterParameters().	WITHOUT_CLASSIFICATION	0.994478868696373	WITHOUT_CLASSIFICATION	0.005521131303626916	DESIGN
// Put the FILTERS node before the HQL condition and theta joins	WITHOUT_CLASSIFICATION	0.999818398689276	WITHOUT_CLASSIFICATION	1.816013107240552E-4	DESIGN
// add the current fragment to the FILTERS node	WITHOUT_CLASSIFICATION	0.9999020834537309	WITHOUT_CLASSIFICATION	9.79165462691799E-5	DESIGN
// Create a new THETA_JOINS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9998642814449976	WITHOUT_CLASSIFICATION	1.3571855500241233E-4	DESIGN
// Put the THETA_JOINS node before the HQL condition, after the filters.	WITHOUT_CLASSIFICATION	0.9999050577112776	WITHOUT_CLASSIFICATION	9.494228872247129E-5	DESIGN
// add the current fragment to the THETA_JOINS node	WITHOUT_CLASSIFICATION	0.9999020834537309	WITHOUT_CLASSIFICATION	9.79165462691799E-5	DESIGN
// First, try to get the persister using the given name directly.	WITHOUT_CLASSIFICATION	0.9999459961172863	WITHOUT_CLASSIFICATION	5.4003882713757785E-5	DESIGN
// unable to locate it using this name	WITHOUT_CLASSIFICATION	0.9974839086974159	WITHOUT_CLASSIFICATION	0.0025160913025841333	DESIGN
// If that didn't work, try using the 'import' name.	WITHOUT_CLASSIFICATION	0.9999325202059042	WITHOUT_CLASSIFICATION	6.747979409577359E-5	DESIGN
// Implicit joins use theta style (WHERE pk = fk), explicit joins use JOIN (after from)	WITHOUT_CLASSIFICATION	0.9997990613049461	WITHOUT_CLASSIFICATION	2.0093869505395122E-4	DESIGN
// locate the registered function by the given name	WITHOUT_CLASSIFICATION	0.9999724088871615	WITHOUT_CLASSIFICATION	2.7591112838438772E-5	DESIGN
// determine the type of the first argument...	WITHOUT_CLASSIFICATION	0.9993348827440842	WITHOUT_CLASSIFICATION	6.651172559158188E-4	DESIGN
// Use the DOT node to emit the first column name. // Create the column names, folled by the column aliases.	WITHOUT_CLASSIFICATION	0.9995369504248132	WITHOUT_CLASSIFICATION	4.6304957518685885E-4	DESIGN
// Note: this simply constructs a "raw" SQL_TOKEN representing the // where fragment and injects this into the tree.  This "works"; // however it is probably not the best long-term solution. // // At some point we probably want to apply an additional grammar to // properly tokenize this where fragment into constituent parts // focused on the operators embedded within the fragment.	WITHOUT_CLASSIFICATION	0.8748577571699068	DESIGN	0.12514224283009315	WITHOUT_CLASSIFICATION
// Append the text of the current node.	WITHOUT_CLASSIFICATION	0.9999244079790638	WITHOUT_CLASSIFICATION	7.559202093619027E-5	DESIGN
// If the node has a first child, recurse into the first child.	WITHOUT_CLASSIFICATION	0.9996745497840235	WITHOUT_CLASSIFICATION	3.25450215976631E-4	DESIGN
// If there is a second child (RHS), recurse into that child.	WITHOUT_CLASSIFICATION	0.9998851851368756	WITHOUT_CLASSIFICATION	1.1481486312431055E-4	DESIGN
// Iterate through the alias,JoinSequence pairs and generate SQL token nodes.	WITHOUT_CLASSIFICATION	0.9998813673270143	WITHOUT_CLASSIFICATION	1.1863267298577357E-4	DESIGN
// If the from element represents a JOIN_FRAGMENT and it is // a theta-style join, convert its type from JOIN_FRAGMENT // to FROM_FRAGMENT	WITHOUT_CLASSIFICATION	0.9988300517382477	WITHOUT_CLASSIFICATION	0.0011699482617523638	DESIGN
// this is used during SqlGenerator processing	WITHOUT_CLASSIFICATION	0.9953295789281872	WITHOUT_CLASSIFICATION	0.004670421071812764	DESIGN
// If there is a FROM fragment and the FROM element is an explicit, then add the from part.	WITHOUT_CLASSIFICATION	0.9999458024022669	WITHOUT_CLASSIFICATION	5.419759773305543E-5	DESIGN
/*&& StringHelper.isNotEmpty( frag )*/	WITHOUT_CLASSIFICATION	0.9970402453282324	WITHOUT_CLASSIFICATION	0.002959754671767628	DESIGN
// The FROM fragment will probably begin with ', '.  Remove this if it is present.	WITHOUT_CLASSIFICATION	0.9655332923715474	WITHOUT_CLASSIFICATION	0.034466707628452595	DESIGN
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.906984876924434	WITHOUT_CLASSIFICATION	0.09301512307556602	DESIGN
// SELECT p FROM p IN CLASS eg.Person ORDER BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9978472631769663	WITHOUT_CLASSIFICATION	0.0021527368230337507	DESIGN
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.9988789325887254	WITHOUT_CLASSIFICATION	0.0011210674112746273	DESIGN
//named query parameter	WITHOUT_CLASSIFICATION	0.9979241710803178	WITHOUT_CLASSIFICATION	0.0020758289196821733	DESIGN
//default mode	WITHOUT_CLASSIFICATION	0.9970619813329668	WITHOUT_CLASSIFICATION	0.0029380186670332252	DESIGN
//QueryJoinFragment join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9996741715255963	WITHOUT_CLASSIFICATION	3.258284744036092E-4	DESIGN
//reset the dotcount (but not the path) //after reset!	WITHOUT_CLASSIFICATION	0.9989263889109884	WITHOUT_CLASSIFICATION	0.0010736110890115635	DESIGN
//after reset!	WITHOUT_CLASSIFICATION	0.9988361658907539	WITHOUT_CLASSIFICATION	0.0011638341092461385	DESIGN
// we don't need to worry about any condition in the ON clause // here (toFromFragmentString), since anything in the ON condition // is already applied to the whole query	WITHOUT_CLASSIFICATION	0.899441228548055	WITHOUT_CLASSIFICATION	0.10055877145194506	DESIGN
// bit_length feels a bit broken to me. We have to cast to char in order to // pass when a numeric value is supplied. But of course the answers given will // be wildly different for these two datatypes. 1234.5678 will be 9 bytes as // a char string but will be 8 or 16 bytes as a true numeric. // Jay Nance 2006-09-22	WITHOUT_CLASSIFICATION	0.9999227635317874	WITHOUT_CLASSIFICATION	7.723646821253754E-5	DESIGN
// dotcount>=2	WITHOUT_CLASSIFICATION	0.9997037504389661	WITHOUT_CLASSIFICATION	2.962495610339991E-4	DESIGN
// Do the corresponding RHS	WITHOUT_CLASSIFICATION	0.9998917848265574	WITHOUT_CLASSIFICATION	1.082151734426892E-4	DESIGN
//if its "id"	WITHOUT_CLASSIFICATION	0.9994337670933674	WITHOUT_CLASSIFICATION	5.662329066326147E-4	DESIGN
//or its the id property name	WITHOUT_CLASSIFICATION	0.9999376964837904	WITHOUT_CLASSIFICATION	6.230351620966799E-5	DESIGN
//join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9995619846384487	WITHOUT_CLASSIFICATION	4.380153615512357E-4	DESIGN
//important!!	WITHOUT_CLASSIFICATION	0.9988361658907539	WITHOUT_CLASSIFICATION	0.0011638341092461385	DESIGN
//String[] keyCols = collPersister.getKeyColumnNames();	WITHOUT_CLASSIFICATION	0.9995619846384487	WITHOUT_CLASSIFICATION	4.380153615512357E-4	DESIGN
// an association	WITHOUT_CLASSIFICATION	0.999831092486816	WITHOUT_CLASSIFICATION	1.6890751318411314E-4	DESIGN
//allow index() function:	WITHOUT_CLASSIFICATION	0.9993333866232158	WITHOUT_CLASSIFICATION	6.666133767841301E-4	DESIGN
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9865923441576472	WITHOUT_CLASSIFICATION	0.013407655842352779	DESIGN
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.9988789325887254	WITHOUT_CLASSIFICATION	0.0011210674112746273	DESIGN
//many-to-many	WITHOUT_CLASSIFICATION	0.9988361658907539	WITHOUT_CLASSIFICATION	0.0011638341092461385	DESIGN
// collections of values	WITHOUT_CLASSIFICATION	0.9999840564269874	WITHOUT_CLASSIFICATION	1.59435730126028E-5	DESIGN
//opening paren in new Foo ( ... )	WITHOUT_CLASSIFICATION	0.9762773194752027	WITHOUT_CLASSIFICATION	0.023722680524797334	DESIGN
//if we are inside a new Result(), but not inside a nested function	WITHOUT_CLASSIFICATION	0.992021642622814	WITHOUT_CLASSIFICATION	0.007978357377186026	DESIGN
//special case	WITHOUT_CLASSIFICATION	0.9998017189694522	WITHOUT_CLASSIFICATION	1.9828103054774266E-4	DESIGN
// the name of an SQL function	WITHOUT_CLASSIFICATION	0.9999889375621082	WITHOUT_CLASSIFICATION	1.1062437891732005E-5	DESIGN
//null child could occur for no from clause in a filter	WITHOUT_CLASSIFICATION	0.9932784600546696	WITHOUT_CLASSIFICATION	0.00672153994533039	DESIGN
//this is basically a copy/paste of OrderByParser ... might be worth refactoring	WITHOUT_CLASSIFICATION	0.5650604935786486	WITHOUT_CLASSIFICATION	0.4349395064213513	DESIGN
// SELECT p FROM p IN CLASS eg.Person GROUP BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9975626986567523	WITHOUT_CLASSIFICATION	0.0024373013432477187	DESIGN
// return aliases not supported in classic translator!	WITHOUT_CLASSIFICATION	0.9996107154065349	WITHOUT_CLASSIFICATION	3.892845934650794E-4	DESIGN
//register collection role	WITHOUT_CLASSIFICATION	0.996046806850895	WITHOUT_CLASSIFICATION	0.0039531931491050875	DESIGN
// The keyword used to specify an identity column, if identity column key generation is supported.	WITHOUT_CLASSIFICATION	0.9970068584931809	WITHOUT_CLASSIFICATION	0.0029931415068190784	DESIGN
//.getElementPropertyMapping();	WITHOUT_CLASSIFICATION	0.9968940233176451	WITHOUT_CLASSIFICATION	0.0031059766823548695	DESIGN
//crossJoins.add(name);	WITHOUT_CLASSIFICATION	0.9993333866232158	WITHOUT_CLASSIFICATION	6.666133767841301E-4	DESIGN
//ie no select clause in HQL	WITHOUT_CLASSIFICATION	0.9995765058335666	WITHOUT_CLASSIFICATION	4.234941664334036E-4	DESIGN
// initialize the Set of queried identifier spaces (ie. tables)	WITHOUT_CLASSIFICATION	0.9997047991009479	WITHOUT_CLASSIFICATION	2.952008990521275E-4	DESIGN
//ie. no select clause	WITHOUT_CLASSIFICATION	0.9996979839185135	WITHOUT_CLASSIFICATION	3.020160814864413E-4	DESIGN
//there _was_ a select clause	WITHOUT_CLASSIFICATION	0.9991729531609431	WITHOUT_CLASSIFICATION	8.270468390568239E-4	DESIGN
// return the concrete type, or the underlying type if a concrete type // was not specified	WITHOUT_CLASSIFICATION	0.9993308113661787	WITHOUT_CLASSIFICATION	6.691886338212956E-4	DESIGN
//many-to-many	WITHOUT_CLASSIFICATION	0.9988361658907539	WITHOUT_CLASSIFICATION	0.0011638341092461385	DESIGN
//q.addCollection(collectionName, collectionRole);	WITHOUT_CLASSIFICATION	0.9968940233176451	WITHOUT_CLASSIFICATION	0.0031059766823548695	DESIGN
// classic parser does not support bulk manipulation statements	WITHOUT_CLASSIFICATION	0.9813613875804577	WITHOUT_CLASSIFICATION	0.018638612419542327	DESIGN
// can't cache this stuff either (per-invocation)	WITHOUT_CLASSIFICATION	0.9979568866333479	WITHOUT_CLASSIFICATION	0.0020431133666520464	DESIGN
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9981271315562171	WITHOUT_CLASSIFICATION	0.001872868443782857	DESIGN
// This is the legacy behaviour for HQL queries...	WITHOUT_CLASSIFICATION	0.9871379212162477	WITHOUT_CLASSIFICATION	0.012862078783752251	DESIGN
// not known!	WITHOUT_CLASSIFICATION	0.9997096320576264	WITHOUT_CLASSIFICATION	2.9036794237356247E-4	DESIGN
// not known!	WITHOUT_CLASSIFICATION	0.9997096320576264	WITHOUT_CLASSIFICATION	2.9036794237356247E-4	DESIGN
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9998259625459757	WITHOUT_CLASSIFICATION	1.7403745402437223E-4	DESIGN
// not known!	WITHOUT_CLASSIFICATION	0.9997096320576264	WITHOUT_CLASSIFICATION	2.9036794237356247E-4	DESIGN
// not known!	WITHOUT_CLASSIFICATION	0.9997096320576264	WITHOUT_CLASSIFICATION	2.9036794237356247E-4	DESIGN
//Need this, since join condition can appear inside parens!	WITHOUT_CLASSIFICATION	0.9985792117039984	WITHOUT_CLASSIFICATION	0.001420788296001581	DESIGN
//tokens that close a sub expression //tokens that open a sub expression //tokens that would indicate a sub expression is a boolean expression	WITHOUT_CLASSIFICATION	0.9997770264902635	WITHOUT_CLASSIFICATION	2.229735097366054E-4	DESIGN
//expressionTerminators.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.9992238077359954	WITHOUT_CLASSIFICATION	7.761922640045942E-4	DESIGN
//expressionOpeners.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.9992238077359954	WITHOUT_CLASSIFICATION	7.761922640045942E-4	DESIGN
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource) // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9969998202994746	WITHOUT_CLASSIFICATION	0.003000179700525293	DESIGN
// otherwise, a trim-specification and/or a trim-character // have been specified;  we need to decide which options // are present and "do the right thing" // should leading trim-characters be trimmed? // should trailing trim-characters be trimmed? // the trim-character (what is to be trimmed off?) // the trim-source (from where should it be trimmed?)	WITHOUT_CLASSIFICATION	0.9419657278757779	WITHOUT_CLASSIFICATION	0.05803427212422212	DESIGN
//Inside a BETWEEN ... AND ... expression	WITHOUT_CLASSIFICATION	0.9908250902929497	WITHOUT_CLASSIFICATION	0.009174909707050254	DESIGN
//were an odd or even number of NOTs encountered //the join string built up by compound paths inside this expression //a flag indicating if the subexpression is known to be boolean	WITHOUT_CLASSIFICATION	0.9963427266034197	WITHOUT_CLASSIFICATION	0.0036572733965803124	DESIGN
//ie. a many-to-many	WITHOUT_CLASSIFICATION	0.9981126240154182	WITHOUT_CLASSIFICATION	0.0018873759845818006	DESIGN
//Cope with [,]	WITHOUT_CLASSIFICATION	0.9984195959628008	WITHOUT_CLASSIFICATION	0.0015804040371992106	DESIGN
//Cope with a continued path expression (ie. ].baz)	WITHOUT_CLASSIFICATION	0.9975409623449076	WITHOUT_CLASSIFICATION	0.0024590376550924593	DESIGN
//NOTE: early return	WITHOUT_CLASSIFICATION	0.9992121846331691	WITHOUT_CLASSIFICATION	7.878153668309677E-4	DESIGN
//Cope with a subselect	WITHOUT_CLASSIFICATION	0.9985315279831253	WITHOUT_CLASSIFICATION	0.00146847201687475	DESIGN
//Cope with special cases of AND, NOT, ()	WITHOUT_CLASSIFICATION	0.9995870494564923	WITHOUT_CLASSIFICATION	4.129505435075937E-4	DESIGN
//Close extra brackets we opened	WITHOUT_CLASSIFICATION	0.9972014239353104	WITHOUT_CLASSIFICATION	0.002798576064689641	DESIGN
//take note when this is a boolean expression	WITHOUT_CLASSIFICATION	0.9809213901172621	WITHOUT_CLASSIFICATION	0.019078609882737897	DESIGN
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.999894043322483	WITHOUT_CLASSIFICATION	1.0595667751703737E-4	DESIGN
//process a token, mapping OO path expressions to SQL expressions	WITHOUT_CLASSIFICATION	0.9923314030500268	WITHOUT_CLASSIFICATION	0.007668596949973253	DESIGN
//Open any extra brackets we might need.	WITHOUT_CLASSIFICATION	0.9826267294978314	WITHOUT_CLASSIFICATION	0.017373270502168643	DESIGN
//Cope with special cases of AND, NOT, )	WITHOUT_CLASSIFICATION	0.9950811825559998	WITHOUT_CLASSIFICATION	0.004918817444000276	DESIGN
// the next one up must also be	WITHOUT_CLASSIFICATION	0.9920255945307737	WITHOUT_CLASSIFICATION	0.007974405469226342	DESIGN
// Add any joins	WITHOUT_CLASSIFICATION	0.9999290243948011	WITHOUT_CLASSIFICATION	7.097560519893733E-5	DESIGN
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.999894043322483	WITHOUT_CLASSIFICATION	1.0595667751703737E-4	DESIGN
//named query parameter	WITHOUT_CLASSIFICATION	0.9979241710803178	WITHOUT_CLASSIFICATION	0.0020758289196821733	DESIGN
//path expression	WITHOUT_CLASSIFICATION	0.9992333938074549	WITHOUT_CLASSIFICATION	7.666061925452115E-4	DESIGN
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9989726415214999	WITHOUT_CLASSIFICATION	0.001027358478500064	DESIGN
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9980214905697924	WITHOUT_CLASSIFICATION	0.001978509430207618	DESIGN
//anything else	WITHOUT_CLASSIFICATION	0.9993708145785408	WITHOUT_CLASSIFICATION	6.291854214591945E-4	DESIGN
// the path expression continues after a ]	WITHOUT_CLASSIFICATION	0.9998841046982894	WITHOUT_CLASSIFICATION	1.1589530171069155E-4	DESIGN
// careful with this!	WITHOUT_CLASSIFICATION	0.9995572262055271	WITHOUT_CLASSIFICATION	4.427737944729589E-4	DESIGN
// the path expression ends at the ]	WITHOUT_CLASSIFICATION	0.999779747573491	WITHOUT_CLASSIFICATION	2.202524265090462E-4	DESIGN
// "finish off" the join	WITHOUT_CLASSIFICATION	0.9999682026815058	WITHOUT_CLASSIFICATION	3.179731849428331E-5	DESIGN
//NOTICE: no " or . since they are part of (compound) identifiers	WITHOUT_CLASSIFICATION	0.9978922046390993	WITHOUT_CLASSIFICATION	0.0021077953609007333	DESIGN
//cannot instantiate	WITHOUT_CLASSIFICATION	0.9990398170989513	WITHOUT_CLASSIFICATION	9.601829010486166E-4	DESIGN
// start by looking for HQL keywords...	WITHOUT_CLASSIFICATION	0.995646976172935	WITHOUT_CLASSIFICATION	0.004353023827065049	DESIGN
// inner joins can be abbreviated to 'join'	WITHOUT_CLASSIFICATION	0.9985170055772727	WITHOUT_CLASSIFICATION	0.0014829944227272727	DESIGN
// 'outer' is optional and is ignored	WITHOUT_CLASSIFICATION	0.9986757026935245	WITHOUT_CLASSIFICATION	0.0013242973064755243	DESIGN
// now anything that is not a HQL keyword	WITHOUT_CLASSIFICATION	0.9998267273548653	WITHOUT_CLASSIFICATION	1.7327264513463373E-4	DESIGN
// process the "old" HQL style where aliases appear _first_ // ie. using the IN or IN CLASS constructions	WITHOUT_CLASSIFICATION	0.9999145983313126	WITHOUT_CLASSIFICATION	8.540166868744732E-5	DESIGN
// treat it as a classname	WITHOUT_CLASSIFICATION	0.9999247525429297	WITHOUT_CLASSIFICATION	7.524745707025376E-5	DESIGN
// treat it as a path expression	WITHOUT_CLASSIFICATION	0.9998696086361888	WITHOUT_CLASSIFICATION	1.3039136381108758E-4	DESIGN
// starts with the name of a mapped class (new style)	WITHOUT_CLASSIFICATION	0.9996259893054423	WITHOUT_CLASSIFICATION	3.7401069455769676E-4	DESIGN
// starts with a path expression (new style)	WITHOUT_CLASSIFICATION	0.9994307048270759	WITHOUT_CLASSIFICATION	5.69295172924226E-4	DESIGN
//allow ODMG OQL style: from Person p, p.cars c	WITHOUT_CLASSIFICATION	0.9964309206007873	WITHOUT_CLASSIFICATION	0.0035690793992126093	DESIGN
//handle quoted strings	WITHOUT_CLASSIFICATION	0.9986904175450433	WITHOUT_CLASSIFICATION	0.0013095824549566996	DESIGN
// Object insertions, updates, and deletions have list semantics because // they must happen in the right order so as to respect referential // integrity	WITHOUT_CLASSIFICATION	0.9882401802943822	WITHOUT_CLASSIFICATION	0.011759819705617845	DESIGN
// "finish off" the join	WITHOUT_CLASSIFICATION	0.9999682026815058	WITHOUT_CLASSIFICATION	3.179731849428331E-5	DESIGN
//ignore whitespace	WITHOUT_CLASSIFICATION	0.9990652213724208	WITHOUT_CLASSIFICATION	9.347786275791626E-4	DESIGN
//do replacements	WITHOUT_CLASSIFICATION	0.9993683211392123	WITHOUT_CLASSIFICATION	6.316788607878066E-4	DESIGN
//handle HQL2 collection syntax	WITHOUT_CLASSIFICATION	0.9845752890028263	WITHOUT_CLASSIFICATION	0.015424710997173605	DESIGN
// uuid.hex is deprecated	WITHOUT_CLASSIFICATION	0.9988509138650418	WITHOUT_CLASSIFICATION	0.0011490861349582738	DESIGN
// AbstractSelectingDelegate impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993445683858901	WITHOUT_CLASSIFICATION	6.554316141098484E-4	DESIGN
//hilo params	WITHOUT_CLASSIFICATION	0.9989129750139399	WITHOUT_CLASSIFICATION	0.0010870249860600119	DESIGN
//sql = query;	WITHOUT_CLASSIFICATION	0.9998361463696205	WITHOUT_CLASSIFICATION	1.6385363037948233E-4	DESIGN
// performance opt	WITHOUT_CLASSIFICATION	0.9979898803825684	WITHOUT_CLASSIFICATION	0.0020101196174316534	DESIGN
//sql = update;	WITHOUT_CLASSIFICATION	0.9998361463696205	WITHOUT_CLASSIFICATION	1.6385363037948233E-4	DESIGN
//hilo config	WITHOUT_CLASSIFICATION	0.9988671966141685	WITHOUT_CLASSIFICATION	0.0011328033858316144	DESIGN
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9996140557462874	WITHOUT_CLASSIFICATION	3.859442537126482E-4	DESIGN
// don't allow comments on these insert statements as comments totally // blow up the Oracle getGeneratedKeys "support" :(	WITHOUT_CLASSIFICATION	0.9995568014892937	WITHOUT_CLASSIFICATION	4.43198510706281E-4	DESIGN
//abort the save (the object is already saved by a circular cascade)	WITHOUT_CLASSIFICATION	0.9868082202807816	WITHOUT_CLASSIFICATION	0.013191779719218392	DESIGN
//throw new IdentifierGenerationException("save associated object first, or disable cascade for inverse association");	WITHOUT_CLASSIFICATION	0.9978969431310639	WITHOUT_CLASSIFICATION	0.0021030568689360987	DESIGN
// intentionally empty	WITHOUT_CLASSIFICATION	0.9997253054825898	WITHOUT_CLASSIFICATION	2.746945174101682E-4	DESIGN
//do nothing to avoid a lazy property initialization	WITHOUT_CLASSIFICATION	0.9999699319996812	WITHOUT_CLASSIFICATION	3.006800031887458E-5	DESIGN
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9969864294960188	WITHOUT_CLASSIFICATION	0.003013570503981104	DESIGN
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9996140557462874	WITHOUT_CLASSIFICATION	3.859442537126482E-4	DESIGN
// do nothing until we hit the rsult set containing the generated id	WITHOUT_CLASSIFICATION	0.9999572201024167	WITHOUT_CLASSIFICATION	4.2779897583362486E-5	DESIGN
/* COLUMN and TABLE should be renamed but it would break the public API */	WITHOUT_CLASSIFICATION	0.9984136806404583	WITHOUT_CLASSIFICATION	0.0015863193595416524	DESIGN
// Loaded entity instances, by EntityKey	WITHOUT_CLASSIFICATION	0.9987786365188132	WITHOUT_CLASSIFICATION	0.001221363481186866	DESIGN
// if the given name is un-qualified we may neen to qualify it	WITHOUT_CLASSIFICATION	0.9995187707683265	WITHOUT_CLASSIFICATION	4.812292316734266E-4	DESIGN
// the default...	WITHOUT_CLASSIFICATION	0.9998891746409534	WITHOUT_CLASSIFICATION	1.1082535904672251E-4	DESIGN
// unfortunately not really safe to normalize this // to 1 as an initial value like we do the others // because we would not be able to control this if // we are using a sequence...	WITHOUT_CLASSIFICATION	0.9930425095782408	WITHOUT_CLASSIFICATION	0.006957490421759207	DESIGN
// intentionally empty	WITHOUT_CLASSIFICATION	0.9997253054825898	WITHOUT_CLASSIFICATION	2.746945174101682E-4	DESIGN
// Identity map of CollectionEntry instances, by the collection wrapper	WITHOUT_CLASSIFICATION	0.9996681564218672	WITHOUT_CLASSIFICATION	3.318435781327714E-4	DESIGN
// general purpose parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993488000521826	WITHOUT_CLASSIFICATION	6.511999478173526E-4	DESIGN
// table-specific parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999429962425572	WITHOUT_CLASSIFICATION	5.700375744280446E-4	DESIGN
// Configurable implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9985882501861083	WITHOUT_CLASSIFICATION	0.001411749813891698	DESIGN
// IdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9985882501861083	WITHOUT_CLASSIFICATION	0.001411749813891698	DESIGN
// PersistentIdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9985882501861083	WITHOUT_CLASSIFICATION	0.001411749813891698	DESIGN
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9998215296190663	WITHOUT_CLASSIFICATION	1.7847038093366928E-4	DESIGN
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9998215296190663	WITHOUT_CLASSIFICATION	1.7847038093366928E-4	DESIGN
//fetch the generated id in a separate query	WITHOUT_CLASSIFICATION	0.991431749978692	WITHOUT_CLASSIFICATION	0.008568250021308092	DESIGN
// we just hit the last position	WITHOUT_CLASSIFICATION	0.9991220836998248	WITHOUT_CLASSIFICATION	8.779163001753138E-4	DESIGN
// scroll ahead	WITHOUT_CLASSIFICATION	0.9997227270787274	WITHOUT_CLASSIFICATION	2.772729212725358E-4	DESIGN
// scroll backward	WITHOUT_CLASSIFICATION	0.9998010016191149	WITHOUT_CLASSIFICATION	1.9899838088522674E-4	DESIGN
// we have not yet hit the last result...	WITHOUT_CLASSIFICATION	0.9998067225977706	WITHOUT_CLASSIFICATION	1.9327740222939327E-4	DESIGN
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992180537423052	WITHOUT_CLASSIFICATION	7.819462576947891E-4	DESIGN
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994607386154626	WITHOUT_CLASSIFICATION	5.392613845373788E-4	DESIGN
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993445683858901	WITHOUT_CLASSIFICATION	6.554316141098484E-4	DESIGN
// do this when all the properties are updateable since there is // a certain likelihood that the information will already be // snapshot-cached.	WITHOUT_CLASSIFICATION	0.9984270941888249	WITHOUT_CLASSIFICATION	0.0015729058111751118	DESIGN
// Inner classes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999523854614893	WITHOUT_CLASSIFICATION	4.7614538510698106E-4	DESIGN
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992180537423052	WITHOUT_CLASSIFICATION	7.819462576947891E-4	DESIGN
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994607386154626	WITHOUT_CLASSIFICATION	5.392613845373788E-4	DESIGN
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993445683858901	WITHOUT_CLASSIFICATION	6.554316141098484E-4	DESIGN
// Caches	WITHOUT_CLASSIFICATION	0.9997612566512477	WITHOUT_CLASSIFICATION	2.3874334875219311E-4	DESIGN
//Generators:	WITHOUT_CLASSIFICATION	0.9988361658907539	WITHOUT_CLASSIFICATION	0.0011638341092461385	DESIGN
// cache region is defined by the root-class in the hierarchy...	WITHOUT_CLASSIFICATION	0.9994726432004566	WITHOUT_CLASSIFICATION	5.273567995434625E-4	DESIGN
//check if the detached object being merged is the parent	WITHOUT_CLASSIFICATION	0.997395070231844	WITHOUT_CLASSIFICATION	0.002604929768155909	DESIGN
// after *all* persisters and named queries are registered	WITHOUT_CLASSIFICATION	0.9982296805627856	WITHOUT_CLASSIFICATION	0.0017703194372143778	DESIGN
// if we get here, it is possible that we have a proxy 'in the way' of the merge map resolution... // 	WITHOUT_CLASSIFICATION	0.9999716871162012	WITHOUT_CLASSIFICATION	2.8312883798853735E-5	DESIGN
//JNDI + Serialization:	WITHOUT_CLASSIFICATION	0.999767633582239	WITHOUT_CLASSIFICATION	2.323664177610381E-4	DESIGN
//checking for named queries	WITHOUT_CLASSIFICATION	0.9991360370237281	WITHOUT_CLASSIFICATION	8.639629762718738E-4	DESIGN
//stats	WITHOUT_CLASSIFICATION	0.9990619244547406	WITHOUT_CLASSIFICATION	9.380755452593856E-4	DESIGN
// EntityNotFoundDelegate	WITHOUT_CLASSIFICATION	0.999830379035844	WITHOUT_CLASSIFICATION	1.6962096415598253E-4	DESIGN
// Check named HQL queries	WITHOUT_CLASSIFICATION	0.9998048838120367	WITHOUT_CLASSIFICATION	1.9511618796316923E-4	DESIGN
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9989512803228041	WITHOUT_CLASSIFICATION	0.0010487196771958322	DESIGN
//prevents this session from adding things to cache	WITHOUT_CLASSIFICATION	0.965844093931606	WITHOUT_CLASSIFICATION	0.03415590606839403	DESIGN
// from javax.naming.Referenceable	WITHOUT_CLASSIFICATION	0.9984563462440859	WITHOUT_CLASSIFICATION	0.0015436537559142185	DESIGN
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9990560284864539	WITHOUT_CLASSIFICATION	9.439715135460773E-4	DESIGN
//for a dynamic-class	WITHOUT_CLASSIFICATION	0.9990723347401667	WITHOUT_CLASSIFICATION	9.27665259833353E-4	DESIGN
//test this entity to see if we must query it	WITHOUT_CLASSIFICATION	0.9341030121684545	WITHOUT_CLASSIFICATION	0.06589698783154553	DESIGN
//NOTE EARLY EXIT	WITHOUT_CLASSIFICATION	0.9988361658907539	WITHOUT_CLASSIFICATION	0.0011638341092461385	DESIGN
// for backward-compatability	WITHOUT_CLASSIFICATION	0.9996758794214937	WITHOUT_CLASSIFICATION	3.2412057850631426E-4	DESIGN
// ignore this error for now	WITHOUT_CLASSIFICATION	0.9992521768196863	WITHOUT_CLASSIFICATION	7.478231803137841E-4	DESIGN
//to stop the class from being unloaded	WITHOUT_CLASSIFICATION	0.9991628011107415	WITHOUT_CLASSIFICATION	8.371988892584773E-4	DESIGN
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9975286280058056	WITHOUT_CLASSIFICATION	0.0024713719941943787	DESIGN
//must add to JNDI _after_ adding to HashMaps, because some JNDI servers use serialization	WITHOUT_CLASSIFICATION	0.9986696452088425	WITHOUT_CLASSIFICATION	0.0013303547911574633	DESIGN
// Make sure this is a defined parameter and check the incoming value type	WITHOUT_CLASSIFICATION	0.9959114871788364	WITHOUT_CLASSIFICATION	0.004088512821163657	DESIGN
// for each of the defined parameters, make sure its value // has been set	WITHOUT_CLASSIFICATION	0.999781352789717	WITHOUT_CLASSIFICATION	2.1864721028292482E-4	DESIGN
//we never need to apply locks to the SQL	WITHOUT_CLASSIFICATION	0.9839075264961081	WITHOUT_CLASSIFICATION	0.01609247350389188	DESIGN
// inserts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992082377773907	WITHOUT_CLASSIFICATION	7.917622226092409E-4	DESIGN
// deletes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9991697161240464	WITHOUT_CLASSIFICATION	8.302838759536778E-4	DESIGN
// during deserialization, we need to reconnect all proxies and // collections to this session, as well as the EntityEntry and // CollectionEntry instances; these associations are transient // because serialization is used for different things.	WITHOUT_CLASSIFICATION	0.9838848401872754	WITHOUT_CLASSIFICATION	0.016115159812724583	DESIGN
// updates ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992147949336831	WITHOUT_CLASSIFICATION	7.85205066316827E-4	DESIGN
// loading ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992626463453671	WITHOUT_CLASSIFICATION	7.373536546328221E-4	DESIGN
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9989191633904723	WITHOUT_CLASSIFICATION	0.001080836609527827	DESIGN
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9989191633904723	WITHOUT_CLASSIFICATION	0.001080836609527827	DESIGN
// first, try to load it from the temp PC associated to this SS	WITHOUT_CLASSIFICATION	0.9998884287101204	WITHOUT_CLASSIFICATION	1.1157128987961993E-4	DESIGN
// if the metadata allowed proxy creation and caller did not request forceful eager loading, // generate a proxy	WITHOUT_CLASSIFICATION	0.999980760065776	WITHOUT_CLASSIFICATION	1.92399342239548E-5	DESIGN
// otherwise immediately materialize it	WITHOUT_CLASSIFICATION	0.9997560281088157	WITHOUT_CLASSIFICATION	2.4397189118435494E-4	DESIGN
/////////////////////////////////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9968940233176451	WITHOUT_CLASSIFICATION	0.0031059766823548695	DESIGN
// no auto-flushing to support in stateless session	WITHOUT_CLASSIFICATION	0.9960492728074206	WITHOUT_CLASSIFICATION	0.003950727192579332	DESIGN
//after setting values to object, entityMode	WITHOUT_CLASSIFICATION	0.9997979985242316	WITHOUT_CLASSIFICATION	2.0200147576840364E-4	DESIGN
//for EJB3	WITHOUT_CLASSIFICATION	0.9991952806219466	WITHOUT_CLASSIFICATION	8.047193780533276E-4	DESIGN
// just ignore	WITHOUT_CLASSIFICATION	0.9995647294939339	WITHOUT_CLASSIFICATION	4.352705060660716E-4	DESIGN
// do a check	WITHOUT_CLASSIFICATION	0.9996124866787846	WITHOUT_CLASSIFICATION	3.8751332121553467E-4	DESIGN
// saveOrUpdate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993509517885787	WITHOUT_CLASSIFICATION	6.490482114211934E-4	DESIGN
// update() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993509517885787	WITHOUT_CLASSIFICATION	6.490482114211934E-4	DESIGN
// lock() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993509517885787	WITHOUT_CLASSIFICATION	6.490482114211934E-4	DESIGN
// persist() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993509517885787	WITHOUT_CLASSIFICATION	6.490482114211934E-4	DESIGN
// persistOnFlush() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993509517885787	WITHOUT_CLASSIFICATION	6.490482114211934E-4	DESIGN
// merge() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993509517885787	WITHOUT_CLASSIFICATION	6.490482114211934E-4	DESIGN
// saveOrUpdateCopy() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993509517885787	WITHOUT_CLASSIFICATION	6.490482114211934E-4	DESIGN
// delete() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993193688786104	WITHOUT_CLASSIFICATION	6.806311213895195E-4	DESIGN
// load()/get() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993509517885787	WITHOUT_CLASSIFICATION	6.490482114211934E-4	DESIGN
// refresh() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993509517885787	WITHOUT_CLASSIFICATION	6.490482114211934E-4	DESIGN
// replicate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993509517885787	WITHOUT_CLASSIFICATION	6.490482114211934E-4	DESIGN
// do not auto-flush while outside a transaction	WITHOUT_CLASSIFICATION	0.9981348493998629	WITHOUT_CLASSIFICATION	0.00186515060013716	DESIGN
// this is an internal error of some sort...	WITHOUT_CLASSIFICATION	0.9915755537689623	WITHOUT_CLASSIFICATION	0.008424446231037575	DESIGN
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9678221542791647	WITHOUT_CLASSIFICATION	0.032177845720835194	DESIGN
//only collections belonging to deleted entities are allowed to be dereferenced in the case of orphan delete	WITHOUT_CLASSIFICATION	0.9996107480295915	WITHOUT_CLASSIFICATION	3.8925197040849376E-4	DESIGN
// if it was previously unreferenced, we need to flush in order to // get its state into the database in order to execute query	WITHOUT_CLASSIFICATION	0.9652354981218738	WITHOUT_CLASSIFICATION	0.03476450187812624	DESIGN
// not for internal use:	WITHOUT_CLASSIFICATION	0.9993018820738956	WITHOUT_CLASSIFICATION	6.981179261043287E-4	DESIGN
// otherwise, we only need to flush if there are in-memory changes // to the queried tables	WITHOUT_CLASSIFICATION	0.9979387021320942	WITHOUT_CLASSIFICATION	0.002061297867905776	DESIGN
// might need to run a different filter entirely after the flush // because the collection role may have changed	WITHOUT_CLASSIFICATION	0.9856501915226992	WITHOUT_CLASSIFICATION	0.014349808477300876	DESIGN
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9678221542791647	WITHOUT_CLASSIFICATION	0.032177845720835194	DESIGN
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9678221542791647	WITHOUT_CLASSIFICATION	0.032177845720835194	DESIGN
//if it is initialized, see if the underlying //instance is contained, since we need to  //account for the fact that it might have been //evicted	WITHOUT_CLASSIFICATION	0.948996891710653	WITHOUT_CLASSIFICATION	0.05100310828934683	DESIGN
// basically just an adapted copy of find(CriteriaImpl)	WITHOUT_CLASSIFICATION	0.9998544480745741	WITHOUT_CLASSIFICATION	1.4555192542591258E-4	DESIGN
// it is possible for this method to be called during flush processing, // so make certain that we do not accidently initialize an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9942869188515028	WITHOUT_CLASSIFICATION	0.005713081148497285	DESIGN
// nothing to do in a stateful session	WITHOUT_CLASSIFICATION	0.999638524599801	WITHOUT_CLASSIFICATION	3.6147540019914747E-4	DESIGN
// ignore	WITHOUT_CLASSIFICATION	0.9994308494376155	WITHOUT_CLASSIFICATION	5.691505623845223E-4	DESIGN
// ignore this error for now	WITHOUT_CLASSIFICATION	0.9992521768196863	WITHOUT_CLASSIFICATION	7.478231803137841E-4	DESIGN
// we need to writeObject() on this since interceptor is user defined	WITHOUT_CLASSIFICATION	0.9865978486017921	WITHOUT_CLASSIFICATION	0.013402151398207914	DESIGN
// the old-time stand-by...	WITHOUT_CLASSIFICATION	0.999936550744722	WITHOUT_CLASSIFICATION	6.344925527796058E-5	DESIGN
// parameter bind values...	WITHOUT_CLASSIFICATION	0.9995788453667053	WITHOUT_CLASSIFICATION	4.2115463329466175E-4	DESIGN
// Parameter handling code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9841362807836964	WITHOUT_CLASSIFICATION	0.0158637192163037	DESIGN
// prepend value and type list with null for any positions before the wanted position.	WITHOUT_CLASSIFICATION	0.9968466142144007	WITHOUT_CLASSIFICATION	0.003153385785599195	DESIGN
// Execution methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.998888464541358	WITHOUT_CLASSIFICATION	0.001111535458641911	DESIGN
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9992418771251623	WITHOUT_CLASSIFICATION	7.581228748375971E-4	DESIGN
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9992418771251623	WITHOUT_CLASSIFICATION	7.581228748375971E-4	DESIGN
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9992418771251623	WITHOUT_CLASSIFICATION	7.581228748375971E-4	DESIGN
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9992418771251623	WITHOUT_CLASSIFICATION	7.581228748375971E-4	DESIGN
// FieldInterceptor impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993445683858901	WITHOUT_CLASSIFICATION	6.554316141098484E-4	DESIGN
// subclass accesses ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996819474119923	WITHOUT_CLASSIFICATION	3.180525880075958E-4	DESIGN
//let's assume that there is only one lazy fetch group, for now!	WITHOUT_CLASSIFICATION	0.999100267460712	WITHOUT_CLASSIFICATION	8.997325392880315E-4	DESIGN
// FieldHandler impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993445683858901	WITHOUT_CLASSIFICATION	6.554316141098484E-4	DESIGN
// should *not* need to grow beyond the size of the total number of columns in the rs	WITHOUT_CLASSIFICATION	0.9968599728713338	WITHOUT_CLASSIFICATION	0.0031400271286661473	DESIGN
// should probably no-op commit/rollback here, at least in JTA scenarios	WITHOUT_CLASSIFICATION	0.9947155302544365	WITHOUT_CLASSIFICATION	0.005284469745563509	DESIGN
// Base Expectation impls ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992757455495977	WITHOUT_CLASSIFICATION	7.24254450402319E-4	DESIGN
// Various Expectation instances ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995663207040779	WITHOUT_CLASSIFICATION	4.336792959221301E-4	DESIGN
// explicitly perform no checking...	WITHOUT_CLASSIFICATION	0.9965481258950836	WITHOUT_CLASSIFICATION	0.003451874104916519	DESIGN
// used from testsuite	WITHOUT_CLASSIFICATION	0.9995113304925727	WITHOUT_CLASSIFICATION	4.886695074273069E-4	DESIGN
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.997090264448884	WITHOUT_CLASSIFICATION	0.002909735551115977	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.9988361658907539	WITHOUT_CLASSIFICATION	0.0011638341092461385	DESIGN
// register synch; stats.connect()	WITHOUT_CLASSIFICATION	0.9987056250197414	WITHOUT_CLASSIFICATION	0.0012943749802586267	DESIGN
//noncritical, swallow and let the other propagate!	WITHOUT_CLASSIFICATION	0.990756679381005	WITHOUT_CLASSIFICATION	0.009243320618995016	DESIGN
// calls executeBatch()	WITHOUT_CLASSIFICATION	0.9996477228030937	WITHOUT_CLASSIFICATION	3.522771969062915E-4	DESIGN
//no big deal	WITHOUT_CLASSIFICATION	0.9996060050742096	WITHOUT_CLASSIFICATION	3.939949257903197E-4	DESIGN
// no big deal	WITHOUT_CLASSIFICATION	0.9999177823073905	WITHOUT_CLASSIFICATION	8.221769260952209E-5	DESIGN
// no big deal	WITHOUT_CLASSIFICATION	0.9999177823073905	WITHOUT_CLASSIFICATION	8.221769260952209E-5	DESIGN
// sybase driver (jConnect) throwing NPE here in certain // cases, but we'll just handle the general "unexpected" case	WITHOUT_CLASSIFICATION	0.9982448245020507	WITHOUT_CLASSIFICATION	0.0017551754979494188	DESIGN
// see explanation above...	WITHOUT_CLASSIFICATION	0.9998514498127133	WITHOUT_CLASSIFICATION	1.485501872865714E-4	DESIGN
// If we are in the process of releasing, no sense // checking for aggressive-release possibility.	WITHOUT_CLASSIFICATION	0.9995514334860994	WITHOUT_CLASSIFICATION	4.485665139005623E-4	DESIGN
// EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9997037504389661	WITHOUT_CLASSIFICATION	2.962495610339991E-4	DESIGN
// ResultSet impl ("overridden") ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993445683858901	WITHOUT_CLASSIFICATION	6.554316141098484E-4	DESIGN
// ResultSet impl (delegated) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993445683858901	WITHOUT_CLASSIFICATION	6.554316141098484E-4	DESIGN
// refer to comment in StatefulPersistenceContext.addCollection()	WITHOUT_CLASSIFICATION	0.9997300605459358	WITHOUT_CLASSIFICATION	2.69939454064244E-4	DESIGN
// ConnectionManager.Callback implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9985882501861083	WITHOUT_CLASSIFICATION	0.001411749813891698	DESIGN
// Note : success = false, because we don't know the outcome of the transaction	WITHOUT_CLASSIFICATION	0.999994828852053	WITHOUT_CLASSIFICATION	5.171147946976307E-6	DESIGN
// we already have a callback registered; either a local // (org.hibernate.Transaction) transaction has accepted // callback responsibilities, or we have previously // registered a transaction synch.	WITHOUT_CLASSIFICATION	0.9980465113603773	WITHOUT_CLASSIFICATION	0.001953488639622687	DESIGN
// the configured transaction-factory says it only supports // local callback mode, so no sense attempting to register a // JTA Synchronization	WITHOUT_CLASSIFICATION	0.9981366462825666	WITHOUT_CLASSIFICATION	0.001863353717433476	DESIGN
// transactions marked for rollback-only cause some TM impls to throw exceptions	WITHOUT_CLASSIFICATION	0.987877673072597	WITHOUT_CLASSIFICATION	0.012122326927403022	DESIGN
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992144860891844	WITHOUT_CLASSIFICATION	7.855139108156425E-4	DESIGN
//postInitialize() will be called after initialization	WITHOUT_CLASSIFICATION	0.9996921817878931	WITHOUT_CLASSIFICATION	3.0781821210688914E-4	DESIGN
// cannot handle single quotes	WITHOUT_CLASSIFICATION	0.9997448487741676	WITHOUT_CLASSIFICATION	2.551512258324841E-4	DESIGN
// todo : for 4.0 //	WITHOUT_CLASSIFICATION	0.999753567542932	WITHOUT_CLASSIFICATION	2.4643245706796414E-4	DESIGN
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9591218026507837	WITHOUT_CLASSIFICATION	0.040878197349216244	DESIGN
// don't even bother trying to read further	WITHOUT_CLASSIFICATION	0.9782298946093777	WITHOUT_CLASSIFICATION	0.021770105390622324	DESIGN
// don't even bother trying to read any further	WITHOUT_CLASSIFICATION	0.9845039828793004	WITHOUT_CLASSIFICATION	0.015496017120699491	DESIGN
// position cursor to the last row	WITHOUT_CLASSIFICATION	0.9995932973494073	WITHOUT_CLASSIFICATION	4.06702650592665E-4	DESIGN
// sequentially read the result set in reverse until we recognize // a change in the key value.  At that point, we are pointed at // the last physical sequential row for the logical row in which // we are interested in processing	WITHOUT_CLASSIFICATION	0.9999817788366216	WITHOUT_CLASSIFICATION	1.8221163378357227E-5	DESIGN
// Read backwards until we read past the first physical sequential // row with the key we are interested in loading	WITHOUT_CLASSIFICATION	0.9999376781819509	WITHOUT_CLASSIFICATION	6.232181804911239E-5	DESIGN
// Finally, read ahead one row to position result set cursor // at the first physical row we are interested in loading	WITHOUT_CLASSIFICATION	0.9997514078154272	WITHOUT_CLASSIFICATION	2.4859218457281093E-4	DESIGN
// now get an existing proxy for each row element (if there is one)	WITHOUT_CLASSIFICATION	0.9999826521499234	WITHOUT_CLASSIFICATION	1.7347850076464426E-5	DESIGN
// force the proxy to resolve itself	WITHOUT_CLASSIFICATION	0.9998747518022645	WITHOUT_CLASSIFICATION	1.2524819773540726E-4	DESIGN
// this is equivalent to the old behavior...	WITHOUT_CLASSIFICATION	0.9991152718581164	WITHOUT_CLASSIFICATION	8.84728141883714E-4	DESIGN
//if null, owner will be retrieved from session	WITHOUT_CLASSIFICATION	0.9952464369834614	WITHOUT_CLASSIFICATION	0.004753563016538587	DESIGN
//final String queryString, 	WITHOUT_CLASSIFICATION	0.9990791229447045	WITHOUT_CLASSIFICATION	9.20877055295511E-4	DESIGN
// if it was a reference to self, don't need to nullify // unless we are using native id generation, in which // case we definitely need to nullify	WITHOUT_CLASSIFICATION	0.9975545836812475	WITHOUT_CLASSIFICATION	0.002445416318752448	DESIGN
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9981845391677382	WITHOUT_CLASSIFICATION	0.0018154608322617158	DESIGN
// in an effort to avoid concurrent-modification-exceptions (from // potential recursive calls back through here as a result of the // eventual call to PersistentCollection#endRead), we scan the // internal loadingCollections map for matches and store those matches // in a temp collection.  the temp collection is then used to "drive" // the #endRead processing.	WITHOUT_CLASSIFICATION	0.9414396869050164	WITHOUT_CLASSIFICATION	0.058560313094983545	DESIGN
//we can reuse it for each row	WITHOUT_CLASSIFICATION	0.9998948189822151	WITHOUT_CLASSIFICATION	1.0518101778483877E-4	DESIGN
//can't reuse in this case	WITHOUT_CLASSIFICATION	0.9995619560842615	WITHOUT_CLASSIFICATION	4.380439157385999E-4	DESIGN
// First we need to suspend any current JTA transaction and obtain // a JDBC connection	WITHOUT_CLASSIFICATION	0.9857264371501995	WITHOUT_CLASSIFICATION	0.0142735628498006	DESIGN
//getResultList(results);	WITHOUT_CLASSIFICATION	0.9993333866232158	WITHOUT_CLASSIFICATION	6.666133767841301E-4	DESIGN
//if we only returned one entity, query by key is more efficient	WITHOUT_CLASSIFICATION	0.8771073402016473	WITHOUT_CLASSIFICATION	0.12289265979835273	DESIGN
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9973036832179407	WITHOUT_CLASSIFICATION	0.002696316782059173	DESIGN
// handle empty collection	WITHOUT_CLASSIFICATION	0.9976246410729194	WITHOUT_CLASSIFICATION	0.0023753589270807257	DESIGN
// else no collection element, but also no owner	WITHOUT_CLASSIFICATION	0.9950029517026071	WITHOUT_CLASSIFICATION	0.0049970482973928955	DESIGN
//handle empty collections	WITHOUT_CLASSIFICATION	0.9990310011230932	WITHOUT_CLASSIFICATION	9.689988769067911E-4	DESIGN
// else this is not a collection initializer (and empty collections will // be detected by looking for the owner's identifier in the result set)	WITHOUT_CLASSIFICATION	0.8701208580998593	WITHOUT_CLASSIFICATION	0.12987914190014072	DESIGN
// validate() instances of Validatable	WITHOUT_CLASSIFICATION	0.9996461355677086	WITHOUT_CLASSIFICATION	3.538644322913641E-4	DESIGN
// if we know there is exactly 1 row, we can skip. // it would be great if we could _always_ skip this; // it is a problem for <key-many-to-one>	WITHOUT_CLASSIFICATION	0.9971678783056418	WITHOUT_CLASSIFICATION	0.002832121694358175	DESIGN
// remove all collections for the entity from the session-level cache	WITHOUT_CLASSIFICATION	0.997028660340162	WITHOUT_CLASSIFICATION	0.0029713396598379646	DESIGN
//null version means the object is in the process of being loaded somewhere else in the ResultSet	WITHOUT_CLASSIFICATION	0.9979227525538618	WITHOUT_CLASSIFICATION	0.0020772474461382747	DESIGN
//problematic for <key-many-to-one>!	WITHOUT_CLASSIFICATION	0.9940807720490168	WITHOUT_CLASSIFICATION	0.005919227950983162	DESIGN
//use the id passed in	WITHOUT_CLASSIFICATION	0.9998775589186111	WITHOUT_CLASSIFICATION	1.224410813889222E-4	DESIGN
//do nothing	WITHOUT_CLASSIFICATION	0.9999516506621735	WITHOUT_CLASSIFICATION	4.834933782657641E-5	DESIGN
// prefer re-generation of identity!	WITHOUT_CLASSIFICATION	0.9993539120601962	WITHOUT_CLASSIFICATION	6.460879398037606E-4	DESIGN
//no point doing this if NONE was requested	WITHOUT_CLASSIFICATION	0.9997160877038082	WITHOUT_CLASSIFICATION	2.8391229619188096E-4	DESIGN
//If the object is already loaded, return the loaded one	WITHOUT_CLASSIFICATION	0.9979563287417614	WITHOUT_CLASSIFICATION	0.002043671258238617	DESIGN
//its already loaded so don't need to hydrate it	WITHOUT_CLASSIFICATION	0.9844470330714304	WITHOUT_CLASSIFICATION	0.015552966928569474	DESIGN
// cascade the refresh prior to refreshing this entity	WITHOUT_CLASSIFICATION	0.9983652306466477	WITHOUT_CLASSIFICATION	0.0016347693533523542	DESIGN
//the load() which takes an entity does not pass an entityName	WITHOUT_CLASSIFICATION	0.9994838331693369	WITHOUT_CLASSIFICATION	5.161668306631278E-4	DESIGN
//we only check the version when _upgrading_ lock modes	WITHOUT_CLASSIFICATION	0.9998474926038847	WITHOUT_CLASSIFICATION	1.525073961153852E-4	DESIGN
// look for a proxy	WITHOUT_CLASSIFICATION	0.9996797524329619	WITHOUT_CLASSIFICATION	3.202475670380879E-4	DESIGN
//we need to upgrade the lock mode to the mode requested	WITHOUT_CLASSIFICATION	0.9850843883247304	WITHOUT_CLASSIFICATION	0.014915611675269506	DESIGN
//its the given optional object	WITHOUT_CLASSIFICATION	0.9989259341703973	WITHOUT_CLASSIFICATION	0.0010740658296025825	DESIGN
// instantiate a new instance	WITHOUT_CLASSIFICATION	0.9997509099140452	WITHOUT_CLASSIFICATION	2.490900859547453E-4	DESIGN
//need to hydrate it.	WITHOUT_CLASSIFICATION	0.9978824216423294	WITHOUT_CLASSIFICATION	0.0021175783576705695	DESIGN
// return a newly loaded object	WITHOUT_CLASSIFICATION	0.9980488860471375	WITHOUT_CLASSIFICATION	0.0019511139528625332	DESIGN
//will be ignored, using the existing Entry instead	WITHOUT_CLASSIFICATION	0.996568338862551	WITHOUT_CLASSIFICATION	0.003431661137449004	DESIGN
// key is an entity involved with the operation performed by the listener; // value can be either a copy of the entity or the entity itself	WITHOUT_CLASSIFICATION	0.9999818022340167	WITHOUT_CLASSIFICATION	1.8197765983273912E-5	DESIGN
//materialize associations (and initialize the object) later	WITHOUT_CLASSIFICATION	0.9981661449966837	WITHOUT_CLASSIFICATION	0.001833855003316401	DESIGN
// Get the persister for the _subclass_	WITHOUT_CLASSIFICATION	0.9996857247448585	WITHOUT_CLASSIFICATION	3.1427525514153386E-4	DESIGN
// ok in normal Hibernate usage to delete a detached entity; JPA however // forbids it, thus this is a hook for HEM to affect this behavior	WITHOUT_CLASSIFICATION	0.9408356175130085	WITHOUT_CLASSIFICATION	0.05916438248699151	DESIGN
// the entry will be removed after the flush, and will no longer // override the stale snapshot // This is now handled by removeEntity() in EntityDeleteAction //persistenceContext.removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9986063286907869	WITHOUT_CLASSIFICATION	0.001393671309213084	DESIGN
//addInitializedCollection(collection, persister, id);	WITHOUT_CLASSIFICATION	0.9968940233176451	WITHOUT_CLASSIFICATION	0.0031059766823548695	DESIGN
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9988361658907539	WITHOUT_CLASSIFICATION	0.0011638341092461385	DESIGN
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9988361658907539	WITHOUT_CLASSIFICATION	0.0011638341092461385	DESIGN
/*|| oj.getJoinable().consumesCollectionAlias() */	WITHOUT_CLASSIFICATION	0.9999493385916637	WITHOUT_CLASSIFICATION	5.0661408336250414E-5	DESIGN
// here we do not bother with the discriminator.	WITHOUT_CLASSIFICATION	0.9495968910569619	WITHOUT_CLASSIFICATION	0.0504031089430382	DESIGN
// Code to handle subclasses of topClass	WITHOUT_CLASSIFICATION	0.9982654954829477	WITHOUT_CLASSIFICATION	0.0017345045170521524	DESIGN
//woops we got an instance of another class hierarchy branch	WITHOUT_CLASSIFICATION	0.9993259480159554	WITHOUT_CLASSIFICATION	6.740519840444864E-4	DESIGN
// we can go straight to the first required row	WITHOUT_CLASSIFICATION	0.9997260538122978	WITHOUT_CLASSIFICATION	2.7394618770217076E-4	DESIGN
// we need to step through the rows one row at a time (slow)	WITHOUT_CLASSIFICATION	0.9976100530048784	WITHOUT_CLASSIFICATION	0.002389946995121617	DESIGN
// synchronized to avoid multi-thread access issues; defined as method synch to avoid // potential deadlock issues due to nature of code.	WITHOUT_CLASSIFICATION	0.9995297803339975	WITHOUT_CLASSIFICATION	4.702196660025074E-4	DESIGN
// Allows various loaders (ok mainly the QueryLoader :) to check // whether scrolling of their result set should be allowed. // // By default it is allowed.	WITHOUT_CLASSIFICATION	0.998846027770497	WITHOUT_CLASSIFICATION	0.0011539722295030082	DESIGN
//before adding to collection!	WITHOUT_CLASSIFICATION	0.9982722147883604	WITHOUT_CLASSIFICATION	0.0017277852116396161	DESIGN
// if the current depth is 0, the root thing being loaded is the // many-to-many collection itself.  Here, it is alright to use // an inner join...	WITHOUT_CLASSIFICATION	0.9940843592574929	WITHOUT_CLASSIFICATION	0.005915640742507091	DESIGN
//operations which cascade as far as the collection also cascade to collection elements	WITHOUT_CLASSIFICATION	0.9996512297885595	WITHOUT_CLASSIFICATION	3.4877021144055336E-4	DESIGN
// simple, because we can't have a one-to-one or a collection  // (or even a property-ref) in a composite-element:	WITHOUT_CLASSIFICATION	0.9942965741886017	WITHOUT_CLASSIFICATION	0.005703425811398297	DESIGN
//a composite key	WITHOUT_CLASSIFICATION	0.9992967510903386	WITHOUT_CLASSIFICATION	7.032489096613903E-4	DESIGN
// if no batch, use "foo = ? and bar = ?"	WITHOUT_CLASSIFICATION	0.9996214699128353	WITHOUT_CLASSIFICATION	3.7853008716473194E-4	DESIGN
//it must be a collection fetch	WITHOUT_CLASSIFICATION	0.8837850062410936	WITHOUT_CLASSIFICATION	0.11621499375890645	DESIGN
// needed later for many-to-many/filter application	WITHOUT_CLASSIFICATION	0.9989435085382431	WITHOUT_CLASSIFICATION	0.001056491461756975	DESIGN
/*&& etype.isReferenceToPrimaryKey()*/	WITHOUT_CLASSIFICATION	0.9970402453282324	WITHOUT_CLASSIFICATION	0.002959754671767628	DESIGN
// it might still need to apply a collection ordering based on a // many-to-many defined order-by...	WITHOUT_CLASSIFICATION	0.8899244319922612	DESIGN	0.11007556800773877	WITHOUT_CLASSIFICATION
// if a composite key, use "( (foo = ? and bar = ?) or (foo = ? and bar = ?) )" for batching //TODO: unnecessary for databases with ANSI-style joins	WITHOUT_CLASSIFICATION	0.9472494957006736	WITHOUT_CLASSIFICATION	0.05275050429932627	DESIGN
// belong to other persister // belong to other persister	WITHOUT_CLASSIFICATION	0.9975150033343309	WITHOUT_CLASSIFICATION	0.0024849966656690114	DESIGN
// we found it	WITHOUT_CLASSIFICATION	0.9996746732779098	WITHOUT_CLASSIFICATION	3.253267220902309E-4	DESIGN
//we can use an inner join for the many-to-many	WITHOUT_CLASSIFICATION	0.9990529127925797	WITHOUT_CLASSIFICATION	9.470872074203286E-4	DESIGN
//disable a join back to this same association	WITHOUT_CLASSIFICATION	0.9642093376063008	WITHOUT_CLASSIFICATION	0.03579066239369918	DESIGN
//NOTE: unlike all other Loaders, this one is NOT //      multithreaded, or cacheable!!	WITHOUT_CLASSIFICATION	0.9927083102505979	WITHOUT_CLASSIFICATION	0.007291689749402047	DESIGN
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999170870309892	WITHOUT_CLASSIFICATION	8.291296901077092E-5	DESIGN
//root entity comes *last*	WITHOUT_CLASSIFICATION	0.9994324233192965	WITHOUT_CLASSIFICATION	5.675766807035727E-4	DESIGN
//deliberately ignore return value!	WITHOUT_CLASSIFICATION	0.9937535493555805	WITHOUT_CLASSIFICATION	0.006246450644419434	DESIGN
//alias may be null //EARLY EXIT	WITHOUT_CLASSIFICATION	0.97942998862665	WITHOUT_CLASSIFICATION	0.020570011373350006	DESIGN
// if it is a compound path	WITHOUT_CLASSIFICATION	0.9998595814339387	WITHOUT_CLASSIFICATION	1.4041856606130816E-4	DESIGN
// otherwise assume the parent is the the criteria that created us	WITHOUT_CLASSIFICATION	0.9979145724485103	WITHOUT_CLASSIFICATION	0.002085427551489698	DESIGN
// if its the root criteria, we are done	WITHOUT_CLASSIFICATION	0.9977875911085434	WITHOUT_CLASSIFICATION	0.0022124088914565027	DESIGN
// otherwise, recurse	WITHOUT_CLASSIFICATION	0.9998814281638316	WITHOUT_CLASSIFICATION	1.1857183616844828E-4	DESIGN
//the criteria instance	WITHOUT_CLASSIFICATION	0.9992658658552362	WITHOUT_CLASSIFICATION	7.341341447637184E-4	DESIGN
// the entity name	WITHOUT_CLASSIFICATION	0.9998851956902338	WITHOUT_CLASSIFICATION	1.1480430976624962E-4	DESIGN
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9997072235207846	WITHOUT_CLASSIFICATION	2.927764792154497E-4	DESIGN
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9997072235207846	WITHOUT_CLASSIFICATION	2.927764792154497E-4	DESIGN
//it refers to an alias of a projection	WITHOUT_CLASSIFICATION	0.9939331266099931	WITHOUT_CLASSIFICATION	0.0060668733900067825	DESIGN
//should never happen, i think	WITHOUT_CLASSIFICATION	0.9980582827699207	WITHOUT_CLASSIFICATION	0.0019417172300792986	DESIGN
// Detect discriminator values...	WITHOUT_CLASSIFICATION	0.9991453706683635	WITHOUT_CLASSIFICATION	8.546293316365236E-4	DESIGN
// Convert the string value into the proper type.	WITHOUT_CLASSIFICATION	0.9980016497291017	WITHOUT_CLASSIFICATION	0.0019983502708983	DESIGN
// and the qualifier is not the alias of this criteria //      -> check to see if we belong to some criteria other //          than the one that created us	WITHOUT_CLASSIFICATION	0.9917653279553057	WITHOUT_CLASSIFICATION	0.008234672044694354	DESIGN
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.9875729390979099	WITHOUT_CLASSIFICATION	0.012427060902090127	DESIGN
// Otherwise, this is an ordinary value.	WITHOUT_CLASSIFICATION	0.9978373039632987	WITHOUT_CLASSIFICATION	0.0021626960367012917	DESIGN
// Currently *not* cachable if autodiscover types is in effect (e.g. "select * ...")	WITHOUT_CLASSIFICATION	0.9997551671715248	WITHOUT_CLASSIFICATION	2.448328284752183E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9997612566512477	WITHOUT_CLASSIFICATION	2.3874334875219311E-4	DESIGN
// this is only needed (afaict) for ResultTransformer processing...	WITHOUT_CLASSIFICATION	0.9975685378508452	WITHOUT_CLASSIFICATION	0.0024314621491548297	DESIGN
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9995517138562019	WITHOUT_CLASSIFICATION	4.4828614379812445E-4	DESIGN
// build an array with indices equal to the total number // of actual returns in the result Hibernate will return // for this query (scalars + non-scalars)	WITHOUT_CLASSIFICATION	0.9996474237977067	WITHOUT_CLASSIFICATION	3.525762022933888E-4	DESIGN
// replace {....} with corresponding column aliases	WITHOUT_CLASSIFICATION	0.996703750654214	WITHOUT_CLASSIFICATION	0.003296249345785976	DESIGN
// No additional open braces found in the string, append the // rest of the string in its entirty and quit this loop	WITHOUT_CLASSIFICATION	0.9999369700652119	WITHOUT_CLASSIFICATION	6.302993478815524E-5	DESIGN
// apend everything up until the next encountered open brace	WITHOUT_CLASSIFICATION	0.9996010368872925	WITHOUT_CLASSIFICATION	3.9896311270746604E-4	DESIGN
// it is a simple table alias {foo}	WITHOUT_CLASSIFICATION	0.9996373478406788	WITHOUT_CLASSIFICATION	3.6265215932110214E-4	DESIGN
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9947085079636022	WITHOUT_CLASSIFICATION	0.005291492036397778	DESIGN
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9947085079636022	WITHOUT_CLASSIFICATION	0.005291492036397778	DESIGN
// The current alias is referencing the collection to be eagerly fetched	WITHOUT_CLASSIFICATION	0.9940156100750069	WITHOUT_CLASSIFICATION	0.005984389924993135	DESIGN
// it is a property reference {foo.bar}	WITHOUT_CLASSIFICATION	0.9995672705562694	WITHOUT_CLASSIFICATION	4.327294437307468E-4	DESIGN
// Possibly handle :something parameters for the query ?	WITHOUT_CLASSIFICATION	0.996415114562525	WITHOUT_CLASSIFICATION	0.003584885437475034	DESIGN
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9994036898588091	WITHOUT_CLASSIFICATION	5.963101411908303E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9997612566512477	WITHOUT_CLASSIFICATION	2.3874334875219311E-4	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.9988361658907539	WITHOUT_CLASSIFICATION	0.0011638341092461385	DESIGN
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9988361658907539	WITHOUT_CLASSIFICATION	0.0011638341092461385	DESIGN
//	WITHOUT_CLASSIFICATION	0.9997612566512477	WITHOUT_CLASSIFICATION	2.3874334875219311E-4	DESIGN
// Now, process the returns	WITHOUT_CLASSIFICATION	0.999970792779074	WITHOUT_CLASSIFICATION	2.9207220926051474E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9997612566512477	WITHOUT_CLASSIFICATION	2.3874334875219311E-4	DESIGN
// already been processed...	WITHOUT_CLASSIFICATION	0.9998089501458249	WITHOUT_CLASSIFICATION	1.9104985417503807E-4	DESIGN
// already been processed...	WITHOUT_CLASSIFICATION	0.9998089501458249	WITHOUT_CLASSIFICATION	1.9104985417503807E-4	DESIGN
// Make sure the owner alias is known...	WITHOUT_CLASSIFICATION	0.9997995361738751	WITHOUT_CLASSIFICATION	2.0046382612485964E-4	DESIGN
// first, break down the returns into maps keyed by alias // so that role returns can be more easily resolved to their owners	WITHOUT_CLASSIFICATION	0.9881242101627928	WITHOUT_CLASSIFICATION	0.011875789837207221	DESIGN
//	WITHOUT_CLASSIFICATION	0.9997612566512477	WITHOUT_CLASSIFICATION	2.3874334875219311E-4	DESIGN
// If this return's alias has not been processed yet, do so b4 further processing of this return	WITHOUT_CLASSIFICATION	0.9994704766061457	WITHOUT_CLASSIFICATION	5.295233938542803E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9997612566512477	WITHOUT_CLASSIFICATION	2.3874334875219311E-4	DESIGN
// for merging of versioned entities, we consider the version having // been changed only when: // 1) the two version values are different; //      *AND* // 2) The target actually represents database state! // // This second condition is a special case which allows // an entity to be merged during the same transaction // (though during a seperate operation) in which it was // originally persisted/saved	WITHOUT_CLASSIFICATION	0.9999998112705913	WITHOUT_CLASSIFICATION	1.8872940874196644E-7	DESIGN
// this is the second pass through on a merge op, so here we limit the // replacement to associations types (value types were already replaced // during the first pass)	WITHOUT_CLASSIFICATION	0.9964475898065368	WITHOUT_CLASSIFICATION	0.0035524101934632482	DESIGN
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.9988361658907539	WITHOUT_CLASSIFICATION	0.0011638341092461385	DESIGN
// cascade-save to collections AFTER the collection owner was saved	WITHOUT_CLASSIFICATION	0.9989770885512668	WITHOUT_CLASSIFICATION	0.0010229114487331746	DESIGN
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.99784088195797	WITHOUT_CLASSIFICATION	0.0021591180420300255	DESIGN
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9998979996490734	WITHOUT_CLASSIFICATION	1.0200035092657014E-4	DESIGN
// currently only the Hibernate-supplied DbTimestampType is supported here	WITHOUT_CLASSIFICATION	0.999380725433864	WITHOUT_CLASSIFICATION	6.192745661359888E-4	DESIGN
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9964949762909218	WITHOUT_CLASSIFICATION	0.0035050237090782613	DESIGN
// make a new one	WITHOUT_CLASSIFICATION	0.9981165213422456	WITHOUT_CLASSIFICATION	0.0018834786577543584	DESIGN
// not so sure this is even valid subtree.  but if it was, it'd // represent two unrelated table references...	WITHOUT_CLASSIFICATION	0.9993395546634605	WITHOUT_CLASSIFICATION	6.604453365395485E-4	DESIGN
// (NOT (GT a b) ) => (LE a b)	WITHOUT_CLASSIFICATION	0.9997933233341496	WITHOUT_CLASSIFICATION	2.0667666585038878E-4	DESIGN
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9971802654997046	WITHOUT_CLASSIFICATION	0.002819734500295267	DESIGN
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9976199414092857	WITHOUT_CLASSIFICATION	0.0023800585907142262	DESIGN
//sqlResultTypes = selectClause.getSqlResultTypes();	WITHOUT_CLASSIFICATION	0.9995619846384487	WITHOUT_CLASSIFICATION	4.380153615512357E-4	DESIGN
//by default	WITHOUT_CLASSIFICATION	0.9989593087639728	WITHOUT_CLASSIFICATION	0.001040691236027219	DESIGN
// This is now handled earlier in this method.	WITHOUT_CLASSIFICATION	0.9878237698056037	WITHOUT_CLASSIFICATION	0.012176230194396342	DESIGN
// -- Loader implementation --	WITHOUT_CLASSIFICATION	0.9998275919986362	WITHOUT_CLASSIFICATION	1.724080013637314E-4	DESIGN
// -- Loader overrides --	WITHOUT_CLASSIFICATION	0.9999033598021602	WITHOUT_CLASSIFICATION	9.664019783983472E-5	DESIGN
// (NOT (IS_NULL a b) ) => (IS_NOT_NULL a b)	WITHOUT_CLASSIFICATION	0.9990353990996195	WITHOUT_CLASSIFICATION	9.6460090038054E-4	DESIGN
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.9998418531953848	WITHOUT_CLASSIFICATION	1.5814680461519295E-4	DESIGN
// meant to handle dynamic instantiation queries...	WITHOUT_CLASSIFICATION	0.9982199839302498	WITHOUT_CLASSIFICATION	0.0017800160697502758	DESIGN
// --- Query translator methods ---	WITHOUT_CLASSIFICATION	0.9988896963316444	WITHOUT_CLASSIFICATION	0.0011103036683556035	DESIGN
// -- Implementation private methods --	WITHOUT_CLASSIFICATION	0.9996384126604333	WITHOUT_CLASSIFICATION	3.6158733956675196E-4	DESIGN
//deduplicate unique constraints sharing the same columns //this is needed by Hibernate Annotations since it creates automagically // unique constraints for the user	WITHOUT_CLASSIFICATION	0.9997962507324268	WITHOUT_CLASSIFICATION	2.0374926757326972E-4	DESIGN
// Try to find out the name of the primary key to create it as identity if the IdentityGenerator is used	WITHOUT_CLASSIFICATION	0.9994676611868614	WITHOUT_CLASSIFICATION	5.323388131385705E-4	DESIGN
// to support dialects that have their own identity data type	WITHOUT_CLASSIFICATION	0.9731261367940831	WITHOUT_CLASSIFICATION	0.02687386320591684	DESIGN
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999407906455237	WITHOUT_CLASSIFICATION	5.920935447633816E-5	DESIGN
//used also for generation of FK names!	WITHOUT_CLASSIFICATION	0.9930203303612106	WITHOUT_CLASSIFICATION	0.00697966963878942	DESIGN
//usually useless	WITHOUT_CLASSIFICATION	0.9988361658907539	WITHOUT_CLASSIFICATION	0.0011638341092461385	DESIGN
// added this caching as I noticed that getType() is being called multiple times...	WITHOUT_CLASSIFICATION	0.9992002920778124	WITHOUT_CLASSIFICATION	7.997079221876386E-4	DESIGN
//do not add unique constraint on DB not supporting unique and nullable columns	WITHOUT_CLASSIFICATION	0.9986623624209283	WITHOUT_CLASSIFICATION	0.0013376375790716967	DESIGN
//for backward compatibility, disable this:	WITHOUT_CLASSIFICATION	0.9996385931443565	WITHOUT_CLASSIFICATION	3.614068556433925E-4	DESIGN
//may be final //may be final //may be final	WITHOUT_CLASSIFICATION	0.986821977204905	WITHOUT_CLASSIFICATION	0.013178022795094923	DESIGN
//may be final	WITHOUT_CLASSIFICATION	0.9950306962515709	WITHOUT_CLASSIFICATION	0.004969303748429113	DESIGN
// may be final	WITHOUT_CLASSIFICATION	0.9967610605572765	WITHOUT_CLASSIFICATION	0.003238939442723513	DESIGN
// Custom SQL	WITHOUT_CLASSIFICATION	0.9997037504389661	WITHOUT_CLASSIFICATION	2.962495610339991E-4	DESIGN
//Primary key constraint	WITHOUT_CLASSIFICATION	0.9996837798537915	WITHOUT_CLASSIFICATION	3.162201462084073E-4	DESIGN
// the root of the incoming property path matched one // of the embedded composite identifier properties	WITHOUT_CLASSIFICATION	0.9999595473398257	WITHOUT_CLASSIFICATION	4.0452660174288464E-5	DESIGN
// ignore it...	WITHOUT_CLASSIFICATION	0.9972539852128527	WITHOUT_CLASSIFICATION	0.0027460147871473974	DESIGN
//flat recursive algorithm	WITHOUT_CLASSIFICATION	0.9966049036646845	WITHOUT_CLASSIFICATION	0.0033950963353156643	DESIGN
//an identifier mapper => getKey will be included in the getNonDuplicatedPropertyIterator() //and checked later, so it needs to be excluded	WITHOUT_CLASSIFICATION	0.9954029333012996	WITHOUT_CLASSIFICATION	0.00459706669870035	DESIGN
//if the hibernate-mapping did not specify a schema/catalog, use the defaults //specified by properties - but note that if the schema/catalog were specified //in hibernate-mapping, or as params, they will already be initialized and //will override the values set here (they are in identifierGeneratorProperties)	WITHOUT_CLASSIFICATION	0.9534061544699381	WITHOUT_CLASSIFICATION	0.046593845530061885	DESIGN
//pass the entity-name, if not a collection-id	WITHOUT_CLASSIFICATION	0.9983251345123151	WITHOUT_CLASSIFICATION	0.001674865487684932	DESIGN
// Custom SQL	WITHOUT_CLASSIFICATION	0.9997037504389661	WITHOUT_CLASSIFICATION	2.962495610339991E-4	DESIGN
//Primary key constraint	WITHOUT_CLASSIFICATION	0.9996837798537915	WITHOUT_CLASSIFICATION	3.162201462084073E-4	DESIGN
//pass the column name (a generated id almost always has a single column)	WITHOUT_CLASSIFICATION	0.9991244751899567	WITHOUT_CLASSIFICATION	8.755248100432775E-4	DESIGN
//needed to satisfy KeyValue	WITHOUT_CLASSIFICATION	0.9988105726851338	WITHOUT_CLASSIFICATION	0.0011894273148661475	DESIGN
// empty means no scoping	WITHOUT_CLASSIFICATION	0.9998197186772311	WITHOUT_CLASSIFICATION	1.8028132276887238E-4	DESIGN
// index should be last column listed	WITHOUT_CLASSIFICATION	0.9956311629483406	WITHOUT_CLASSIFICATION	0.004368837051659356	DESIGN
//if it is a formula index, use the element columns in the PK	WITHOUT_CLASSIFICATION	0.998064786951546	WITHOUT_CLASSIFICATION	0.0019352130484539818	DESIGN
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns	WITHOUT_CLASSIFICATION	0.9893841365181935	WITHOUT_CLASSIFICATION	0.010615863481806475	DESIGN
/*ArrayList list = new ArrayList();	WITHOUT_CLASSIFICATION	0.9998298371179846	WITHOUT_CLASSIFICATION	1.7016288201538552E-4	DESIGN
// }	WITHOUT_CLASSIFICATION	0.9997258519235995	WITHOUT_CLASSIFICATION	2.741480764004103E-4	DESIGN
// no foreign key element of for a one-to-many	WITHOUT_CLASSIFICATION	0.9992813095722225	WITHOUT_CLASSIFICATION	7.186904277774983E-4	DESIGN
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9242984620542449	WITHOUT_CLASSIFICATION	0.07570153794575515	DESIGN
// the case of a foreign key to something other than the pk is handled in createPropertyRefConstraints	WITHOUT_CLASSIFICATION	0.9999163372342482	WITHOUT_CLASSIFICATION	8.366276575180693E-5	DESIGN
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9242984620542449	WITHOUT_CLASSIFICATION	0.07570153794575515	DESIGN
// if the property mapping consists of all formulas,  // make it non-updateable	WITHOUT_CLASSIFICATION	0.9998103135140101	WITHOUT_CLASSIFICATION	1.8968648598988047E-4	DESIGN
//columnUpdateability.length==0 ||	WITHOUT_CLASSIFICATION	0.9966897570311322	WITHOUT_CLASSIFICATION	0.0033102429688678927	DESIGN
// if the property mapping consists of all formulas,  // make it insertable	WITHOUT_CLASSIFICATION	0.9998103135140101	WITHOUT_CLASSIFICATION	1.8968648598988047E-4	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9989644558406996	WITHOUT_CLASSIFICATION	0.0010355441593003837	DESIGN
// expected type is intrinsic here...	WITHOUT_CLASSIFICATION	0.9941954295797633	WITHOUT_CLASSIFICATION	0.005804570420236733	DESIGN
//}	WITHOUT_CLASSIFICATION	0.9991364277284417	WITHOUT_CLASSIFICATION	8.63572271558323E-4	DESIGN
//}	WITHOUT_CLASSIFICATION	0.9991364277284417	WITHOUT_CLASSIFICATION	8.63572271558323E-4	DESIGN
//return memberPersister.getPropertyType(propertyName);	WITHOUT_CLASSIFICATION	0.9968317795207357	WITHOUT_CLASSIFICATION	0.003168220479264371	DESIGN
//return memberPersister.toColumns(alias, propertyName);	WITHOUT_CLASSIFICATION	0.9968626659372841	WITHOUT_CLASSIFICATION	0.0031373340627158424	DESIGN
//return memberPersister.getType();	WITHOUT_CLASSIFICATION	0.9968317795207357	WITHOUT_CLASSIFICATION	0.003168220479264371	DESIGN
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9993648423672806	WITHOUT_CLASSIFICATION	6.351576327193664E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9997612566512477	WITHOUT_CLASSIFICATION	2.3874334875219311E-4	DESIGN
//instanceof AssociationType;	WITHOUT_CLASSIFICATION	0.9993333866232158	WITHOUT_CLASSIFICATION	6.666133767841301E-4	DESIGN
// we need to determine the best way to know that two joinables // represent a single many-to-many...	WITHOUT_CLASSIFICATION	0.9882215453251838	WITHOUT_CLASSIFICATION	0.011778454674816224	DESIGN
//strip leading ','	WITHOUT_CLASSIFICATION	0.9989735060511244	WITHOUT_CLASSIFICATION	0.0010264939488756068	DESIGN
//public boolean isSubselectLoadable();	WITHOUT_CLASSIFICATION	0.998987475350317	WITHOUT_CLASSIFICATION	0.001012524649683031	DESIGN
// KEY	WITHOUT_CLASSIFICATION	0.9997616450900008	WITHOUT_CLASSIFICATION	2.3835490999925642E-4	DESIGN
//columns	WITHOUT_CLASSIFICATION	0.9990619244547406	WITHOUT_CLASSIFICATION	9.380755452593856E-4	DESIGN
//SQL statements	WITHOUT_CLASSIFICATION	0.9988361658907539	WITHOUT_CLASSIFICATION	0.0011638341092461385	DESIGN
//extra information about the element type	WITHOUT_CLASSIFICATION	0.9843183553689173	WITHOUT_CLASSIFICATION	0.01568164463108274	DESIGN
//types	WITHOUT_CLASSIFICATION	0.9990619244547406	WITHOUT_CLASSIFICATION	9.380755452593856E-4	DESIGN
// custom sql	WITHOUT_CLASSIFICATION	0.9997475156636337	WITHOUT_CLASSIFICATION	2.524843363663353E-4	DESIGN
//private final String unquotedIdentifierColumnName;	WITHOUT_CLASSIFICATION	0.9877650189428653	WITHOUT_CLASSIFICATION	0.012234981057134647	DESIGN
// dynamic filters specifically for many-to-many inside the collection	WITHOUT_CLASSIFICATION	0.9968375472122872	WITHOUT_CLASSIFICATION	0.0031624527877127163	DESIGN
// dynamic filters for the collection	WITHOUT_CLASSIFICATION	0.9980964631878635	WITHOUT_CLASSIFICATION	0.0019035368121364828	DESIGN
// NativeSQL: collect key column and auto-aliases	WITHOUT_CLASSIFICATION	0.9995933392914149	WITHOUT_CLASSIFICATION	4.0666070858496136E-4	DESIGN
//unquotedKeyColumnNames = StringHelper.unQuote(keyColumnAliases);	WITHOUT_CLASSIFICATION	0.9995619846384487	WITHOUT_CLASSIFICATION	4.380153615512357E-4	DESIGN
//ELEMENT	WITHOUT_CLASSIFICATION	0.9990619244547406	WITHOUT_CLASSIFICATION	9.380755452593856E-4	DESIGN
// NativeSQL: collect element column and auto-aliases	WITHOUT_CLASSIFICATION	0.9992960614566996	WITHOUT_CLASSIFICATION	7.039385433003911E-4	DESIGN
// INDEX AND ROW SELECT	WITHOUT_CLASSIFICATION	0.9998335346569264	WITHOUT_CLASSIFICATION	1.6646534307369052E-4	DESIGN
// NativeSQL: collect index column and auto-aliases	WITHOUT_CLASSIFICATION	0.9989814640324531	WITHOUT_CLASSIFICATION	0.0010185359675468927	DESIGN
//unquotedIdentifierColumnName = identifierColumnAlias;	WITHOUT_CLASSIFICATION	0.9995619846384487	WITHOUT_CLASSIFICATION	4.380153615512357E-4	DESIGN
//unquotedIdentifierColumnName = null;	WITHOUT_CLASSIFICATION	0.9995698028829355	WITHOUT_CLASSIFICATION	4.301971170645666E-4	DESIGN
//GENERATE THE SQL:	WITHOUT_CLASSIFICATION	0.9988378642878976	WITHOUT_CLASSIFICATION	0.0011621357121024982	DESIGN
// for non-arrays, we don't need to know the element class //elementType.returnedClass();	WITHOUT_CLASSIFICATION	0.9946227303710731	WITHOUT_CLASSIFICATION	0.005377269628926913	DESIGN
//not all classpersisters implement PropertyMapping!	WITHOUT_CLASSIFICATION	0.9939839303841486	WITHOUT_CLASSIFICATION	0.006016069615851385	DESIGN
// Handle any filters applied to this collection	WITHOUT_CLASSIFICATION	0.9660149353597983	WITHOUT_CLASSIFICATION	0.0339850646402017	DESIGN
// Handle any filters applied to this collection for many-to-many	WITHOUT_CLASSIFICATION	0.9370003406896583	WITHOUT_CLASSIFICATION	0.0629996593103417	DESIGN
//if there is a user-specified loader, return that //TODO: filters!?	WITHOUT_CLASSIFICATION	0.9456396316675578	WITHOUT_CLASSIFICATION	0.05436036833244206	DESIGN
// Take care of any entities that might have // been evicted!	WITHOUT_CLASSIFICATION	0.9979936956013946	WITHOUT_CLASSIFICATION	0.002006304398605351	DESIGN
//strip leading ','	WITHOUT_CLASSIFICATION	0.9989735060511244	WITHOUT_CLASSIFICATION	0.0010264939488756068	DESIGN
// Run a subquery loader	WITHOUT_CLASSIFICATION	0.9997182842518151	WITHOUT_CLASSIFICATION	2.817157481849562E-4	DESIGN
//needed by arrays	WITHOUT_CLASSIFICATION	0.9965425268241607	WITHOUT_CLASSIFICATION	0.003457473175839373	DESIGN
//TODO: something with formulas...	WITHOUT_CLASSIFICATION	0.986825438827787	WITHOUT_CLASSIFICATION	0.013174561172213021	DESIGN
//an assertion	WITHOUT_CLASSIFICATION	0.9988500694465406	WITHOUT_CLASSIFICATION	0.0011499305534593501	DESIGN
// Remove all the old entries	WITHOUT_CLASSIFICATION	0.9999281926851751	WITHOUT_CLASSIFICATION	7.180731482488559E-5	DESIGN
//create all the new entries	WITHOUT_CLASSIFICATION	0.9999002022251782	WITHOUT_CLASSIFICATION	9.979777482182928E-5	DESIGN
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9993648423672806	WITHOUT_CLASSIFICATION	6.351576327193664E-4	DESIGN
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9993648423672806	WITHOUT_CLASSIFICATION	6.351576327193664E-4	DESIGN
//delete all the deleted entries	WITHOUT_CLASSIFICATION	0.9995344045408546	WITHOUT_CLASSIFICATION	4.655954591454088E-4	DESIGN
//insert all the new entries	WITHOUT_CLASSIFICATION	0.9999002022251782	WITHOUT_CLASSIFICATION	9.979777482182928E-5	DESIGN
//==elementType ??	WITHOUT_CLASSIFICATION	0.9982360165378648	WITHOUT_CLASSIFICATION	0.0017639834621352205	DESIGN
//update all the modified entries	WITHOUT_CLASSIFICATION	0.9998429095869495	WITHOUT_CLASSIFICATION	1.570904130504696E-4	DESIGN
//identifier collections not supported for 1-to-many	WITHOUT_CLASSIFICATION	0.9972274309476999	WITHOUT_CLASSIFICATION	0.0027725690523000513	DESIGN
// update removed rows fks to null	WITHOUT_CLASSIFICATION	0.9990620216950489	WITHOUT_CLASSIFICATION	9.37978304951089E-4	DESIGN
// will still be issued when it used to be null	WITHOUT_CLASSIFICATION	0.9755986104908335	WITHOUT_CLASSIFICATION	0.024401389509166427	DESIGN
// now update all changed or added rows fks	WITHOUT_CLASSIFICATION	0.9999997847209025	WITHOUT_CLASSIFICATION	2.1527909748573182E-7	DESIGN
//	WITHOUT_CLASSIFICATION	0.9997612566512477	WITHOUT_CLASSIFICATION	2.3874334875219311E-4	DESIGN
//use suffix for the entity columns	WITHOUT_CLASSIFICATION	0.9979911784710206	WITHOUT_CLASSIFICATION	0.0020088215289794397	DESIGN
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9995623309460074	WITHOUT_CLASSIFICATION	4.376690539925646E-4	DESIGN
//private final String rootTableName;	WITHOUT_CLASSIFICATION	0.9877650189428653	WITHOUT_CLASSIFICATION	0.012234981057134647	DESIGN
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9988361658907539	WITHOUT_CLASSIFICATION	0.0011638341092461385	DESIGN
//Custom SQL	WITHOUT_CLASSIFICATION	0.9988516581418612	WITHOUT_CLASSIFICATION	0.001148341858138876	DESIGN
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9995623309460074	WITHOUT_CLASSIFICATION	4.376690539925646E-4	DESIGN
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.9998784295823477	WITHOUT_CLASSIFICATION	1.2157041765226914E-4	DESIGN
// This could also just be true all the time...	WITHOUT_CLASSIFICATION	0.9956208692472361	WITHOUT_CLASSIFICATION	0.004379130752763848	DESIGN
//chop the last union (all)	WITHOUT_CLASSIFICATION	0.9997696010392506	WITHOUT_CLASSIFICATION	2.303989607493196E-4	DESIGN
//TODO: check this....	WITHOUT_CLASSIFICATION	0.9922446212159373	WITHOUT_CLASSIFICATION	0.007755378784062757	DESIGN
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9988361658907539	WITHOUT_CLASSIFICATION	0.0011638341092461385	DESIGN
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9973926576264468	WITHOUT_CLASSIFICATION	0.0026073423735531584	DESIGN
// the closure of all properties in the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9984117457093695	WITHOUT_CLASSIFICATION	0.0015882542906304248	DESIGN
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9969847256622983	WITHOUT_CLASSIFICATION	0.0030152743377017555	DESIGN
// subclass discrimination works by assigning particular // values to certain combinations of null primary key // values in the outer join using an SQL CASE	WITHOUT_CLASSIFICATION	0.9999267108317298	WITHOUT_CLASSIFICATION	7.32891682702752E-5	DESIGN
//MULTITABLES	WITHOUT_CLASSIFICATION	0.9988361658907539	WITHOUT_CLASSIFICATION	0.0011638341092461385	DESIGN
// Custom sql	WITHOUT_CLASSIFICATION	0.9997037504389661	WITHOUT_CLASSIFICATION	2.962495610339991E-4	DESIGN
// subclass closure properties	WITHOUT_CLASSIFICATION	0.9999201424076964	WITHOUT_CLASSIFICATION	7.985759230359939E-5	DESIGN
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9997037504389661	WITHOUT_CLASSIFICATION	2.962495610339991E-4	DESIGN
//( (Column) model.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9968940233176451	WITHOUT_CLASSIFICATION	0.0031059766823548695	DESIGN
//( (Column) sc.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9968940233176451	WITHOUT_CLASSIFICATION	0.0031059766823548695	DESIGN
// don't need subclass tables, because they can't appear in conditions	WITHOUT_CLASSIFICATION	0.9918858586850025	WITHOUT_CLASSIFICATION	0.008114141314997601	DESIGN
// special case where we need to force incloude all subclass joins	WITHOUT_CLASSIFICATION	0.9989193196043668	WITHOUT_CLASSIFICATION	0.0010806803956332793	DESIGN
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9995623309460074	WITHOUT_CLASSIFICATION	4.376690539925646E-4	DESIGN
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9973926576264468	WITHOUT_CLASSIFICATION	0.0026073423735531584	DESIGN
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9969847256622983	WITHOUT_CLASSIFICATION	0.0030152743377017555	DESIGN
//get em on the second pass!	WITHOUT_CLASSIFICATION	0.99986883544571	WITHOUT_CLASSIFICATION	1.311645542899506E-4	DESIGN
// now look up the object we are really interested in! // (this lets us correctly handle proxies and multi-row // or multi-column queries)	WITHOUT_CLASSIFICATION	0.999803047496433	WITHOUT_CLASSIFICATION	1.969525035669594E-4	DESIGN
// discriminator column	WITHOUT_CLASSIFICATION	0.9998588665716218	WITHOUT_CLASSIFICATION	1.4113342837816933E-4	DESIGN
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9988361658907539	WITHOUT_CLASSIFICATION	0.0011638341092461385	DESIGN
//private final Map propertyTableNumbersByName = new HashMap();	WITHOUT_CLASSIFICATION	0.9988903051487176	WITHOUT_CLASSIFICATION	0.001109694851282315	DESIGN
// CLASS + TABLE	WITHOUT_CLASSIFICATION	0.9999058938498183	WITHOUT_CLASSIFICATION	9.410615018167536E-5	DESIGN
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9997037504389661	WITHOUT_CLASSIFICATION	2.962495610339991E-4	DESIGN
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9997037504389661	WITHOUT_CLASSIFICATION	2.962495610339991E-4	DESIGN
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9997037504389661	WITHOUT_CLASSIFICATION	2.962495610339991E-4	DESIGN
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.9998784295823477	WITHOUT_CLASSIFICATION	1.2157041765226914E-4	DESIGN
// JOINS	WITHOUT_CLASSIFICATION	0.9997612566512477	WITHOUT_CLASSIFICATION	2.3874334875219311E-4	DESIGN
//propertyTableNumbersByName.put( prop.getName(), join );	WITHOUT_CLASSIFICATION	0.9976879624490756	WITHOUT_CLASSIFICATION	0.002312037550924407	DESIGN
//Access cached SQL	WITHOUT_CLASSIFICATION	0.999018409212869	WITHOUT_CLASSIFICATION	9.815907871309794E-4	DESIGN
//figure out which tables need to be fetched	WITHOUT_CLASSIFICATION	0.9651112777413088	WITHOUT_CLASSIFICATION	0.03488872225869116	DESIGN
//figure out which columns are needed	WITHOUT_CLASSIFICATION	0.9971392824211223	WITHOUT_CLASSIFICATION	0.0028607175788776854	DESIGN
//figure out which formulas are needed	WITHOUT_CLASSIFICATION	0.9971392824211223	WITHOUT_CLASSIFICATION	0.0028607175788776854	DESIGN
//render the SQL	WITHOUT_CLASSIFICATION	0.999564379328858	WITHOUT_CLASSIFICATION	4.3562067114191923E-4	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9989644558406996	WITHOUT_CLASSIFICATION	0.0010355441593003837	DESIGN
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.988261651488865	WITHOUT_CLASSIFICATION	0.01173834851113493	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992082377773907	WITHOUT_CLASSIFICATION	7.917622226092409E-4	DESIGN
// The optional SQL string defined in the where attribute	WITHOUT_CLASSIFICATION	0.9998318890416985	WITHOUT_CLASSIFICATION	1.6811095830141908E-4	DESIGN
//information about lazy properties of this class	WITHOUT_CLASSIFICATION	0.9869284146575488	WITHOUT_CLASSIFICATION	0.013071585342451298	DESIGN
//information about all properties in class hierarchy	WITHOUT_CLASSIFICATION	0.9932432251103084	WITHOUT_CLASSIFICATION	0.006756774889691654	DESIGN
//information about all columns/formulas in class hierarchy	WITHOUT_CLASSIFICATION	0.992105752744945	WITHOUT_CLASSIFICATION	0.007894247255055102	DESIGN
// dynamic filters attached to the class-level	WITHOUT_CLASSIFICATION	0.9996816241480648	WITHOUT_CLASSIFICATION	3.183758519352091E-4	DESIGN
// SQL strings	WITHOUT_CLASSIFICATION	0.9994178005212275	WITHOUT_CLASSIFICATION	5.821994787725285E-4	DESIGN
// for objects that came in via update()	WITHOUT_CLASSIFICATION	0.999032332486362	WITHOUT_CLASSIFICATION	9.676675136379877E-4	DESIGN
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9997037504389661	WITHOUT_CLASSIFICATION	2.962495610339991E-4	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992082377773907	WITHOUT_CLASSIFICATION	7.917622226092409E-4	DESIGN
// IDENTIFIER	WITHOUT_CLASSIFICATION	0.9997037504389661	WITHOUT_CLASSIFICATION	2.962495610339991E-4	DESIGN
// VERSION	WITHOUT_CLASSIFICATION	0.9997612566512477	WITHOUT_CLASSIFICATION	2.3874334875219311E-4	DESIGN
//WHERE STRING	WITHOUT_CLASSIFICATION	0.9988361658907539	WITHOUT_CLASSIFICATION	0.0011638341092461385	DESIGN
// SUBCLASS PROPERTY CLOSURE	WITHOUT_CLASSIFICATION	0.999830379035844	WITHOUT_CLASSIFICATION	1.6962096415598253E-4	DESIGN
//before add :-)	WITHOUT_CLASSIFICATION	0.9996353151931097	WITHOUT_CLASSIFICATION	3.64684806890415E-4	DESIGN
// Handle any filters applied to the class level	WITHOUT_CLASSIFICATION	0.9993348162029545	WITHOUT_CLASSIFICATION	6.65183797045474E-4	DESIGN
// only one-to-one is lazy fetched	WITHOUT_CLASSIFICATION	0.9995801195218398	WITHOUT_CLASSIFICATION	4.1988047816017413E-4	DESIGN
//note early exit here:	WITHOUT_CLASSIFICATION	0.9995219485024391	WITHOUT_CLASSIFICATION	4.7805149756088936E-4	DESIGN
// object have been loaded with setReadOnly(true); HHH-2236	WITHOUT_CLASSIFICATION	0.9989996440284339	WITHOUT_CLASSIFICATION	0.0010003559715661657	DESIGN
// NOTE: this assumes something about how propertySelectFragment is implemented by the subclass!	WITHOUT_CLASSIFICATION	0.9999850200768219	WITHOUT_CLASSIFICATION	1.4979923178127676E-5	DESIGN
//strip leading ", "	WITHOUT_CLASSIFICATION	0.9992133967705862	WITHOUT_CLASSIFICATION	7.866032294139093E-4	DESIGN
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9986905962929192	WITHOUT_CLASSIFICATION	0.0013094037070807672	DESIGN
//otherwise return the "hydrated" state (ie. associations are not resolved)	WITHOUT_CLASSIFICATION	0.998634615789029	WITHOUT_CLASSIFICATION	0.0013653842109709242	DESIGN
//null owner ok??	WITHOUT_CLASSIFICATION	0.9993349060273995	WITHOUT_CLASSIFICATION	6.650939726004732E-4	DESIGN
// null sql means that the only lazy properties // are shared PK one-to-one associations which are // handled differently in the Type#nullSafeGet code...	WITHOUT_CLASSIFICATION	0.9986251698885982	WITHOUT_CLASSIFICATION	0.0013748301114017872	DESIGN
// Create a new FROM node for the referenced class.	WITHOUT_CLASSIFICATION	0.9993712938223593	WITHOUT_CLASSIFICATION	6.287061776407209E-4	DESIGN
// the difficulty here is exactly what do we update in order to // force the version to be incremented in the db...	WITHOUT_CLASSIFICATION	0.9367278132037767	WITHOUT_CLASSIFICATION	0.06327218679622312	DESIGN
// performance op to avoid the array search	WITHOUT_CLASSIFICATION	0.9983213149938885	WITHOUT_CLASSIFICATION	0.0016786850061114372	DESIGN
// properly handle property-ref-based associations	WITHOUT_CLASSIFICATION	0.9987394549434686	WITHOUT_CLASSIFICATION	0.0012605450565313897	DESIGN
//Enable for HHH-440, which we don't like:	WITHOUT_CLASSIFICATION	0.9916256426822472	WITHOUT_CLASSIFICATION	0.008374357317752873	DESIGN
// ALIASES	WITHOUT_CLASSIFICATION	0.9997612566512477	WITHOUT_CLASSIFICATION	2.3874334875219311E-4	DESIGN
// aliases named identifier ( alias.idname )	WITHOUT_CLASSIFICATION	0.9990311817545582	WITHOUT_CLASSIFICATION	9.688182454418039E-4	DESIGN
// aliases for composite-id's	WITHOUT_CLASSIFICATION	0.9997250751704556	WITHOUT_CLASSIFICATION	2.7492482954440464E-4	DESIGN
// Fetch embedded identifiers propertynames from the "virtual" identifier component	WITHOUT_CLASSIFICATION	0.9996347888153395	WITHOUT_CLASSIFICATION	3.65211184660406E-4	DESIGN
// embedded composite ids ( alias.idname1, alias.idname2 )	WITHOUT_CLASSIFICATION	0.9981862274311912	WITHOUT_CLASSIFICATION	0.001813772568808792	DESIGN
// TODO: skip formulas?	WITHOUT_CLASSIFICATION	0.8407954304655755	WITHOUT_CLASSIFICATION	0.15920456953442455	DESIGN
//don't need filters for the static loaders	WITHOUT_CLASSIFICATION	0.9849473181941469	WITHOUT_CLASSIFICATION	0.015052681805852938	DESIGN
//do two passes, for collection property-ref!	WITHOUT_CLASSIFICATION	0.9895569646464192	WITHOUT_CLASSIFICATION	0.010443035353580932	DESIGN
// select the correct row by either pk or rowid	WITHOUT_CLASSIFICATION	0.9998511299735132	WITHOUT_CLASSIFICATION	1.4887002648685763E-4	DESIGN
//TODO: eventually, rowIdName[j]	WITHOUT_CLASSIFICATION	0.9305907882694144	WITHOUT_CLASSIFICATION	0.06940921173058565	DESIGN
// this is a property of the table, which we are updating	WITHOUT_CLASSIFICATION	0.9992849591501725	WITHOUT_CLASSIFICATION	7.150408498275905E-4	DESIGN
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.999661108733356	WITHOUT_CLASSIFICATION	3.388912666439109E-4	DESIGN
// we are using "all" or "dirty" property-based optimistic locking	WITHOUT_CLASSIFICATION	0.9989178099360596	WITHOUT_CLASSIFICATION	0.0010821900639403073	DESIGN
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9906457466266295	WITHOUT_CLASSIFICATION	0.009354253373370458	DESIGN
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9975191080761845	WITHOUT_CLASSIFICATION	0.0024808919238155825	DESIGN
// add normal properties	WITHOUT_CLASSIFICATION	0.9999296182123205	WITHOUT_CLASSIFICATION	7.038178767941661E-5	DESIGN
// add the discriminator	WITHOUT_CLASSIFICATION	0.9999801461837271	WITHOUT_CLASSIFICATION	1.985381627291459E-5	DESIGN
// more specifically : "? [op] datetime" //      1) if the operator is MINUS, the param needs to be of //          some datetime type //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.9516019627435519	WITHOUT_CLASSIFICATION	0.04839803725644797	DESIGN
// add normal properties	WITHOUT_CLASSIFICATION	0.9999296182123205	WITHOUT_CLASSIFICATION	7.038178767941661E-5	DESIGN
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9975191080761845	WITHOUT_CLASSIFICATION	0.0024808919238155825	DESIGN
// add the discriminator	WITHOUT_CLASSIFICATION	0.9999801461837271	WITHOUT_CLASSIFICATION	1.985381627291459E-5	DESIGN
// add the primary key	WITHOUT_CLASSIFICATION	0.9999878649424112	WITHOUT_CLASSIFICATION	1.2135057588660066E-5	DESIGN
// delegate already handles PK columns	WITHOUT_CLASSIFICATION	0.999785768787063	WITHOUT_CLASSIFICATION	2.1423121293695632E-4	DESIGN
// we can't batch joined inserts, *especially* not if it is an identity insert; // nor can we batch statements where the expectation is based on an output param	WITHOUT_CLASSIFICATION	0.9993830527874692	WITHOUT_CLASSIFICATION	6.169472125307816E-4	DESIGN
// Render the SQL query	WITHOUT_CLASSIFICATION	0.9999316320111189	WITHOUT_CLASSIFICATION	6.836798888108304E-5	DESIGN
// Write the values of fields onto the prepared statement - we MUST use the state at the time the // insert was issued (cos of foreign key constraints). Not necessarily the object's current state	WITHOUT_CLASSIFICATION	0.9999840295863681	WITHOUT_CLASSIFICATION	1.597041363180226E-5	DESIGN
// TODO : shouldnt inserts be Expectations.NONE?	WITHOUT_CLASSIFICATION	0.5284209240701366	DESIGN	0.47157907592986337	WITHOUT_CLASSIFICATION
//don't bother trying to update, we know there is no row there yet	WITHOUT_CLASSIFICATION	0.9964370752763128	WITHOUT_CLASSIFICATION	0.003562924723687251	DESIGN
//if all fields are null, we might need to delete existing row	WITHOUT_CLASSIFICATION	0.8339775951118956	WITHOUT_CLASSIFICATION	0.1660224048881044	DESIGN
//there is probably a row there, so try to update //if no rows were updated, we will find out	WITHOUT_CLASSIFICATION	0.9984339989555403	WITHOUT_CLASSIFICATION	0.0015660010444597562	DESIGN
//note: updates to joined tables can't be batched...	WITHOUT_CLASSIFICATION	0.9856295448158615	WITHOUT_CLASSIFICATION	0.014370455184138452	DESIGN
// starting index	WITHOUT_CLASSIFICATION	0.999555550690805	WITHOUT_CLASSIFICATION	4.444493091949434E-4	DESIGN
//Now write the values of fields onto the prepared statement	WITHOUT_CLASSIFICATION	0.99994878004285	WITHOUT_CLASSIFICATION	5.121995714990576E-5	DESIGN
// Write any appropriate versioning conditional parameters	WITHOUT_CLASSIFICATION	0.996933494950409	WITHOUT_CLASSIFICATION	0.003066505049590978	DESIGN
//Render the SQL query	WITHOUT_CLASSIFICATION	0.9997312328500007	WITHOUT_CLASSIFICATION	2.6876714999937723E-4	DESIGN
// Do the key. The key is immutable so we can use the _current_ object state - not necessarily // the state at the time the delete was issued	WITHOUT_CLASSIFICATION	0.9982006924313371	WITHOUT_CLASSIFICATION	0.0017993075686628902	DESIGN
// We should use the _current_ object state (ie. after any updates that occurred during flush)	WITHOUT_CLASSIFICATION	0.9987683921637726	WITHOUT_CLASSIFICATION	0.0012316078362274046	DESIGN
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9980189449304734	WITHOUT_CLASSIFICATION	0.0019810550695266655	DESIGN
//note: dirtyFields==null means we had no snapshot, and we couldn't get one using select-before-update //	WITHOUT_CLASSIFICATION	0.998849515862223	WITHOUT_CLASSIFICATION	0.0011504841377769416	DESIGN
// more specifically : "datetime [op] ?" //      1) if the operator is MINUS, we really cannot determine //          the expected type as either another datetime or //          numeric would be valid //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.9913157767795756	WITHOUT_CLASSIFICATION	0.008684223220424349	DESIGN
// For the case of dynamic-update="true", we need to generate the UPDATE SQL	WITHOUT_CLASSIFICATION	0.9997923724511516	WITHOUT_CLASSIFICATION	2.0762754884841623E-4	DESIGN
// don't need to check laziness (dirty checking algorithm handles that)	WITHOUT_CLASSIFICATION	0.9921729889715181	WITHOUT_CLASSIFICATION	0.007827011028481996	DESIGN
// For the case of dynamic-update="false", or no snapshot, we use the static SQL	WITHOUT_CLASSIFICATION	0.9999745850278275	WITHOUT_CLASSIFICATION	2.5414972172508332E-5	DESIGN
// if not "get", then try "is"	WITHOUT_CLASSIFICATION	0.9999364096863739	WITHOUT_CLASSIFICATION	6.359031362605448E-5	DESIGN
// Now update only the tables with dirty properties (and the table with the version number)	WITHOUT_CLASSIFICATION	0.9999826563335921	WITHOUT_CLASSIFICATION	1.7343666407852197E-5	DESIGN
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9997923724511516	WITHOUT_CLASSIFICATION	2.0762754884841623E-4	DESIGN
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9997923724511516	WITHOUT_CLASSIFICATION	2.0762754884841623E-4	DESIGN
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999595367482584	WITHOUT_CLASSIFICATION	4.0463251741654664E-5	DESIGN
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999595367482584	WITHOUT_CLASSIFICATION	4.0463251741654664E-5	DESIGN
// not supported	WITHOUT_CLASSIFICATION	0.9998615660076559	WITHOUT_CLASSIFICATION	1.384339923440688E-4	DESIGN
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9980189449304734	WITHOUT_CLASSIFICATION	0.0019810550695266655	DESIGN
// we need to utilize dynamic delete statements	WITHOUT_CLASSIFICATION	0.9911370122011333	WITHOUT_CLASSIFICATION	0.008862987798866677	DESIGN
// otherwise, utilize the static delete statements	WITHOUT_CLASSIFICATION	0.9997240064220233	WITHOUT_CLASSIFICATION	2.7599357797671877E-4	DESIGN
//just a performance opt!	WITHOUT_CLASSIFICATION	0.9909701463835979	WITHOUT_CLASSIFICATION	0.009029853616402087	DESIGN
//just a performance opt!	WITHOUT_CLASSIFICATION	0.9909701463835979	WITHOUT_CLASSIFICATION	0.009029853616402087	DESIGN
//all joins join to the pk of the driving table	WITHOUT_CLASSIFICATION	0.9995047115214216	WITHOUT_CLASSIFICATION	4.952884785784814E-4	DESIGN
//notice that we skip the first table; it is the driving table!	WITHOUT_CLASSIFICATION	0.9984606250780245	WITHOUT_CLASSIFICATION	0.001539374921975644	DESIGN
//we can inner join to superclass tables (the row MUST be there) //we can never inner join to subclass tables	WITHOUT_CLASSIFICATION	0.9995209096839214	WITHOUT_CLASSIFICATION	4.790903160785501E-4	DESIGN
//skip the driving table	WITHOUT_CLASSIFICATION	0.9999022122622373	WITHOUT_CLASSIFICATION	9.778773776272673E-5	DESIGN
//get 'em in the right order (not that it really matters)	WITHOUT_CLASSIFICATION	0.9675890937262899	WITHOUT_CLASSIFICATION	0.03241090627371023	DESIGN
// here, we work under the following assumptions: //      ------------ valid cases -------------------------------------- //      1) datetime + {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      2) datetime - datetime : always results in a DOUBLE //      3) datetime - {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      ------------ invalid cases ------------------------------------ //      4) datetime + datetime //      5) {something other than datetime} - datetime //      6) datetime * {any type} //      7) datetime / {any type} //      8) {any type} / datetime // doing so allows us to properly handle parameters as either the left // or right side here in the majority of cases	WITHOUT_CLASSIFICATION	0.9998074847315325	WITHOUT_CLASSIFICATION	1.925152684674266E-4	DESIGN
//render the where and from parts	WITHOUT_CLASSIFICATION	0.9954146600269465	WITHOUT_CLASSIFICATION	0.004585339973053539	DESIGN
//we *could* regerate this inside each called method!	WITHOUT_CLASSIFICATION	0.998409239026894	WITHOUT_CLASSIFICATION	0.00159076097310594	DESIGN
//now render the joins	WITHOUT_CLASSIFICATION	0.999756851749539	WITHOUT_CLASSIFICATION	2.4314825046097411E-4	DESIGN
// This will add the new from element to the origin.	WITHOUT_CLASSIFICATION	0.9978547157651507	WITHOUT_CLASSIFICATION	0.0021452842348492858	DESIGN
//now render the select clause	WITHOUT_CLASSIFICATION	0.9998140741562149	WITHOUT_CLASSIFICATION	1.859258437850057E-4	DESIGN
//now tie it all together	WITHOUT_CLASSIFICATION	0.9997387987577523	WITHOUT_CLASSIFICATION	2.612012422476409E-4	DESIGN
//insert/update/delete SQL	WITHOUT_CLASSIFICATION	0.9993333866232158	WITHOUT_CLASSIFICATION	6.666133767841301E-4	DESIGN
//select SQL	WITHOUT_CLASSIFICATION	0.9988361658907539	WITHOUT_CLASSIFICATION	0.0011638341092461385	DESIGN
//no need to check laziness, dirty checking handles that	WITHOUT_CLASSIFICATION	0.9964011438296643	WITHOUT_CLASSIFICATION	0.003598856170335823	DESIGN
// Fully resolve the map reference, create implicit joins.	WITHOUT_CLASSIFICATION	0.999916725763334	WITHOUT_CLASSIFICATION	8.327423666596713E-5	DESIGN
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.981695825311179	WITHOUT_CLASSIFICATION	0.018304174688820955	DESIGN
// The basic implementation is to simply use the node's text	WITHOUT_CLASSIFICATION	0.9997776259769522	WITHOUT_CLASSIFICATION	2.223740230478147E-4	DESIGN
// for dialects which are known to not support ANSI-SQL row-value-constructor syntax, // we should mutate the tree.	WITHOUT_CLASSIFICATION	0.9824865631464106	WITHOUT_CLASSIFICATION	0.017513436853589356	DESIGN
// Due to the complexity in initializing the SelectClause, do not generate one here. // If it is not found; simply return null... // // Also, do not cache since it gets generated well after we are created.	WITHOUT_CLASSIFICATION	0.9999392816202042	WITHOUT_CLASSIFICATION	6.07183797957527E-5	DESIGN
// check the version unsaved-value, if appropriate	WITHOUT_CLASSIFICATION	0.9997832096163362	WITHOUT_CLASSIFICATION	2.1679038366394395E-4	DESIGN
// let this take precedence if defined, since it works for // assigned identifiers	WITHOUT_CLASSIFICATION	0.9689495064106245	WITHOUT_CLASSIFICATION	0.031050493589375505	DESIGN
// check the id unsaved-value	WITHOUT_CLASSIFICATION	0.9999707549275995	WITHOUT_CLASSIFICATION	2.924507240049269E-5	DESIGN
// check to see if it is in the second-level cache	WITHOUT_CLASSIFICATION	0.9996878131836053	WITHOUT_CLASSIFICATION	3.1218681639466974E-4	DESIGN
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9969483917978961	WITHOUT_CLASSIFICATION	0.0030516082021039524	DESIGN
// For property references generate <tablealias>.<columnname> as <projectionalias>	WITHOUT_CLASSIFICATION	0.9999686799377143	WITHOUT_CLASSIFICATION	3.132006228562803E-5	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992082377773907	WITHOUT_CLASSIFICATION	7.917622226092409E-4	DESIGN
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9986905962929192	WITHOUT_CLASSIFICATION	0.0013094037070807672	DESIGN
//force immediate execution of the insert	WITHOUT_CLASSIFICATION	0.9993801045554234	WITHOUT_CLASSIFICATION	6.198954445766509E-4	DESIGN
// If this from element is a collection and the path is a collection property (maxIndex, etc.) then // generate a sub-query.	WITHOUT_CLASSIFICATION	0.9989689985340678	WITHOUT_CLASSIFICATION	0.0010310014659322005	DESIGN
// entities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992082377773907	WITHOUT_CLASSIFICATION	7.917622226092409E-4	DESIGN
// collections ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999208732587771	WITHOUT_CLASSIFICATION	7.912674122289746E-4	DESIGN
//cannot occur	WITHOUT_CLASSIFICATION	0.9988893841341948	WITHOUT_CLASSIFICATION	0.001110615865805097	DESIGN
//cannot occur	WITHOUT_CLASSIFICATION	0.9988893841341948	WITHOUT_CLASSIFICATION	0.001110615865805097	DESIGN
// only carry on if the method has no parameters	WITHOUT_CLASSIFICATION	0.9999281985931072	WITHOUT_CLASSIFICATION	7.180140689276759E-5	DESIGN
// try "get"	WITHOUT_CLASSIFICATION	0.9998829795351846	WITHOUT_CLASSIFICATION	1.1702046481540778E-4	DESIGN
// do nothing...	WITHOUT_CLASSIFICATION	0.9995121913057301	WITHOUT_CLASSIFICATION	4.8780869426985027E-4	DESIGN
// do nothing...	WITHOUT_CLASSIFICATION	0.9995121913057301	WITHOUT_CLASSIFICATION	4.8780869426985027E-4	DESIGN
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9963804615766945	WITHOUT_CLASSIFICATION	0.003619538423305553	DESIGN
// this page intentionally left blank :)	WITHOUT_CLASSIFICATION	0.9967721323606374	WITHOUT_CLASSIFICATION	0.003227867639362433	DESIGN
// do not do anything	WITHOUT_CLASSIFICATION	0.9998717709117323	WITHOUT_CLASSIFICATION	1.2822908826765422E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9997612566512477	WITHOUT_CLASSIFICATION	2.3874334875219311E-4	DESIGN
// ignore	WITHOUT_CLASSIFICATION	0.9994308494376155	WITHOUT_CLASSIFICATION	5.691505623845223E-4	DESIGN
//cant instantiate	WITHOUT_CLASSIFICATION	0.9990398170989513	WITHOUT_CLASSIFICATION	9.601829010486166E-4	DESIGN
//if it is a property of an embedded component, invoke on the "identifier"	WITHOUT_CLASSIFICATION	0.9997099281764257	WITHOUT_CLASSIFICATION	2.9007182357435214E-4	DESIGN
// otherwise:	WITHOUT_CLASSIFICATION	0.9997037504389661	WITHOUT_CLASSIFICATION	2.962495610339991E-4	DESIGN
// skip finalize methods	WITHOUT_CLASSIFICATION	0.9998640652772214	WITHOUT_CLASSIFICATION	1.359347227785404E-4	DESIGN
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9993093062431396	WITHOUT_CLASSIFICATION	6.906937568605027E-4	DESIGN
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9993093062431396	WITHOUT_CLASSIFICATION	6.906937568605027E-4	DESIGN
// HHH-2481 make sure the callback gets cleared, otherwise the instance stays in a static thread local.	WITHOUT_CLASSIFICATION	0.9978010491355448	WITHOUT_CLASSIFICATION	0.002198950864455268	DESIGN
// while constructor is running	WITHOUT_CLASSIFICATION	0.9999514818331007	WITHOUT_CLASSIFICATION	4.851816689940695E-5	DESIGN
// while constructor is running	WITHOUT_CLASSIFICATION	0.9999514818331007	WITHOUT_CLASSIFICATION	4.851816689940695E-5	DESIGN
// note: interface is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9991666667023591	WITHOUT_CLASSIFICATION	8.333332976408875E-4	DESIGN
// interfaces // arguments	WITHOUT_CLASSIFICATION	0.9999287422785754	WITHOUT_CLASSIFICATION	7.125772142462758E-5	DESIGN
//TODO!	WITHOUT_CLASSIFICATION	0.9990619244547406	WITHOUT_CLASSIFICATION	9.380755452593856E-4	DESIGN
// Get the caller	WITHOUT_CLASSIFICATION	0.9999596798747304	WITHOUT_CLASSIFICATION	4.032012526952993E-5	DESIGN
// Get the caller principals	WITHOUT_CLASSIFICATION	0.9999769167920544	WITHOUT_CLASSIFICATION	2.3083207945660978E-5	DESIGN
//private static final Alias DEFAULT_ALIAS = new Alias(10, null);	WITHOUT_CLASSIFICATION	0.9986887692063531	WITHOUT_CLASSIFICATION	0.0013112307936469043	DESIGN
// Needed to bump this up to DotNode, because that is the only thing which currently // knows about the property-ref path in the correct format; it is either this, or // recurse over the DotNodes constructing the property path just like DotNode does // internally	WITHOUT_CLASSIFICATION	0.9974465168857488	WITHOUT_CLASSIFICATION	0.0025534831142513146	DESIGN
//if the identifier is quoted, remove the quotes	WITHOUT_CLASSIFICATION	0.9943521048632052	WITHOUT_CLASSIFICATION	0.005647895136794799	DESIGN
//truncate the identifier to the max alias length, less the suffix length	WITHOUT_CLASSIFICATION	0.9972865424916544	WITHOUT_CLASSIFICATION	0.0027134575083455625	DESIGN
//full joins are not supported.. yet!	WITHOUT_CLASSIFICATION	0.9954372523911353	WITHOUT_CLASSIFICATION	0.004562747608864579	DESIGN
// null is not considered the same type as Integer. //$NON-NLS-1 //$NON-NLS-1	WITHOUT_CLASSIFICATION	0.997182785303901	WITHOUT_CLASSIFICATION	0.002817214696098932	DESIGN
// the outerJoinsAfterWhere needs to come before where clause to properly // handle dynamic filters	WITHOUT_CLASSIFICATION	0.9981979741689944	WITHOUT_CLASSIFICATION	0.0018020258310056476	DESIGN
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9988361658907539	WITHOUT_CLASSIFICATION	0.0011638341092461385	DESIGN
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9988361658907539	WITHOUT_CLASSIFICATION	0.0011638341092461385	DESIGN
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9988361658907539	WITHOUT_CLASSIFICATION	0.0011638341092461385	DESIGN
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9988361658907539	WITHOUT_CLASSIFICATION	0.0011638341092461385	DESIGN
// strip off any leading 'and' token	WITHOUT_CLASSIFICATION	0.9998382637798089	WITHOUT_CLASSIFICATION	1.6173622019115554E-4	DESIGN
// if the condition is not already there...	WITHOUT_CLASSIFICATION	0.9995531079048184	WITHOUT_CLASSIFICATION	4.468920951814653E-4	DESIGN
//dontSpace.add("'");	WITHOUT_CLASSIFICATION	0.9993333866232158	WITHOUT_CLASSIFICATION	6.666133767841301E-4	DESIGN
//for MySQL	WITHOUT_CLASSIFICATION	0.9990015836654893	WITHOUT_CLASSIFICATION	9.984163345107364E-4	DESIGN
//HashMap columnsUnique = new HashMap();	WITHOUT_CLASSIFICATION	0.9995956322956049	WITHOUT_CLASSIFICATION	4.043677043951168E-4	DESIGN
//null caused some problems	WITHOUT_CLASSIFICATION	0.9990742502869624	WITHOUT_CLASSIFICATION	9.257497130377401E-4	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.9988361658907539	WITHOUT_CLASSIFICATION	0.0011638341092461385	DESIGN
//not sure if this would ever be null but wanted to be careful	WITHOUT_CLASSIFICATION	0.992677691380268	WITHOUT_CLASSIFICATION	0.00732230861973204	DESIGN
//even on inverse="true"	WITHOUT_CLASSIFICATION	0.9992112725219445	WITHOUT_CLASSIFICATION	7.887274780555132E-4	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.9988361658907539	WITHOUT_CLASSIFICATION	0.0011638341092461385	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.9988361658907539	WITHOUT_CLASSIFICATION	0.0011638341092461385	DESIGN
// If true then execute db updates, otherwise just generate and display updates	WITHOUT_CLASSIFICATION	0.9999689407744845	WITHOUT_CLASSIFICATION	3.105922551550483E-5	DESIGN
// we only release the connection	WITHOUT_CLASSIFICATION	0.9996302210802899	WITHOUT_CLASSIFICATION	3.6977891971011267E-4	DESIGN
// deprecated option...	WITHOUT_CLASSIFICATION	0.9992411674498143	WITHOUT_CLASSIFICATION	7.588325501856164E-4	DESIGN
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9971018633965416	WITHOUT_CLASSIFICATION	0.0028981366034584962	DESIGN
//actually, this last test is probably unnecessary, since  //beforeCompletion() doesn't get called during rollback	WITHOUT_CLASSIFICATION	0.9983764775523368	WITHOUT_CLASSIFICATION	0.0016235224476631753	DESIGN
// this one only really needed for badly-behaved applications! // (if the TransactionManager has a Sychronization registered, // its a noop) // (actually we do need it for downgrading locks)	WITHOUT_CLASSIFICATION	0.9938701001061025	WITHOUT_CLASSIFICATION	0.006129899893897426	DESIGN
// Create an DotNode AST for the path and resolve it.	WITHOUT_CLASSIFICATION	0.9998133030227541	WITHOUT_CLASSIFICATION	1.8669697724587374E-4	DESIGN
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9971018633965416	WITHOUT_CLASSIFICATION	0.0028981366034584962	DESIGN
//if we could not register a synchronization, //do the before/after completion callbacks //ourself (but we need to let jdbcContext //know that this is what we are going to //do, so it doesn't keep trying to register //synchronizations)	WITHOUT_CLASSIFICATION	0.7435742279655511	WITHOUT_CLASSIFICATION	0.2564257720344489	DESIGN
// swallow it, and continue to roll back JTA transaction	WITHOUT_CLASSIFICATION	0.9994678871422259	WITHOUT_CLASSIFICATION	5.321128577742022E-4	DESIGN
// so the transaction is already rolled back, by JTA spec	WITHOUT_CLASSIFICATION	0.9998613475220676	WITHOUT_CLASSIFICATION	1.3865247793246418E-4	DESIGN
// this method is a noop if there is a Synchronization!	WITHOUT_CLASSIFICATION	0.9964882162521517	WITHOUT_CLASSIFICATION	0.0035117837478483354	DESIGN
// two conditions where we need to transform this to a theta-join syntax: //      1) 'elem' is the "root from-element" in correlated subqueries //      2) The DotNode.useThetaStyleImplicitJoins has been set to true //          and 'elem' represents an implicit join	WITHOUT_CLASSIFICATION	0.9841774671190071	WITHOUT_CLASSIFICATION	0.015822532880992855	DESIGN
// WebSphere, however, is not a sane JEE/JTA container...	WITHOUT_CLASSIFICATION	0.9980942888676412	WITHOUT_CLASSIFICATION	0.001905711132358846	DESIGN
// for sane JEE/JTA containers, the transaction itself functions as its identifier...	WITHOUT_CLASSIFICATION	0.9999312056661577	WITHOUT_CLASSIFICATION	6.879433384238773E-5	DESIGN
//swallow, the transaction was finished	WITHOUT_CLASSIFICATION	0.9993891011641111	WITHOUT_CLASSIFICATION	6.108988358890082E-4	DESIGN
// all AliasToEntityMapResultTransformer are considered equal ~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993416356130888	WITHOUT_CLASSIFICATION	6.583643869113236E-4	DESIGN
// Create the join element under the from element.	WITHOUT_CLASSIFICATION	0.9991543740153235	WITHOUT_CLASSIFICATION	8.456259846764875E-4	DESIGN
// all DistinctRootEntityResultTransformer are considered equal ~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993416356130888	WITHOUT_CLASSIFICATION	6.583643869113236E-4	DESIGN
// map of EntityMode -> Tuplizer	WITHOUT_CLASSIFICATION	0.9998443548757388	WITHOUT_CLASSIFICATION	1.5564512426124156E-4	DESIGN
// this is a virtual id property...	WITHOUT_CLASSIFICATION	0.9936171097348725	WITHOUT_CLASSIFICATION	0.006382890265127403	DESIGN
//this one needed only for guessEntityMode()	WITHOUT_CLASSIFICATION	0.9984930456641025	WITHOUT_CLASSIFICATION	0.0015069543358975396	DESIGN
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999058381147014	WITHOUT_CLASSIFICATION	9.41618852985978E-5	DESIGN
// todo : move this to SF per HHH-3517; also see HHH-1907 and ComponentMetamodel	WITHOUT_CLASSIFICATION	0.9628937722185028	WITHOUT_CLASSIFICATION	0.03710622778149722	DESIGN
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9994014512936257	WITHOUT_CLASSIFICATION	5.985487063742774E-4	DESIGN
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9998057614069081	WITHOUT_CLASSIFICATION	1.9423859309193917E-4	DESIGN
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9973613636455683	WITHOUT_CLASSIFICATION	0.002638636354431731	DESIGN
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9998057614069081	WITHOUT_CLASSIFICATION	1.9423859309193917E-4	DESIGN
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9995754884309442	WITHOUT_CLASSIFICATION	4.2451156905582614E-4	DESIGN
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9994656787735944	WITHOUT_CLASSIFICATION	5.343212264055962E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9997612566512477	WITHOUT_CLASSIFICATION	2.3874334875219311E-4	DESIGN
// cached for efficiency...	WITHOUT_CLASSIFICATION	0.9997266690380681	WITHOUT_CLASSIFICATION	2.733309619318689E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9997612566512477	WITHOUT_CLASSIFICATION	2.3874334875219311E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9997612566512477	WITHOUT_CLASSIFICATION	2.3874334875219311E-4	DESIGN
//it was not embedded, so the argument is just an id	WITHOUT_CLASSIFICATION	0.9999408374089619	WITHOUT_CLASSIFICATION	5.9162591038013785E-5	DESIGN
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9994014512936257	WITHOUT_CLASSIFICATION	5.985487063742774E-4	DESIGN
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9973613636455683	WITHOUT_CLASSIFICATION	0.002638636354431731	DESIGN
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9995754884309442	WITHOUT_CLASSIFICATION	4.2451156905582614E-4	DESIGN
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9988789583438549	WITHOUT_CLASSIFICATION	0.0011210416561451121	DESIGN
//return currentId;	WITHOUT_CLASSIFICATION	0.9988127962955508	WITHOUT_CLASSIFICATION	0.001187203704449238	DESIGN
//reset the id	WITHOUT_CLASSIFICATION	0.9995936446373872	WITHOUT_CLASSIFICATION	4.06355362612857E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9997612566512477	WITHOUT_CLASSIFICATION	2.3874334875219311E-4	DESIGN
//reset the version	WITHOUT_CLASSIFICATION	0.9997062721801906	WITHOUT_CLASSIFICATION	2.937278198093447E-4	DESIGN
// the default is to simply not lazy fetch properties for now...	WITHOUT_CLASSIFICATION	0.9987784761828804	WITHOUT_CLASSIFICATION	0.0012215238171195424	DESIGN
// Add the second join, the one that ends in the destination table.	WITHOUT_CLASSIFICATION	0.9999407484972744	WITHOUT_CLASSIFICATION	5.9251502725583804E-5	DESIGN
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.981695825311179	WITHOUT_CLASSIFICATION	0.018304174688820955	DESIGN
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9994656787735944	WITHOUT_CLASSIFICATION	5.343212264055962E-4	DESIGN
// determine the id getter and setter methods from the proxy interface (if any) // determine all interfaces needed by the resulting proxy	WITHOUT_CLASSIFICATION	0.9997701692007198	WITHOUT_CLASSIFICATION	2.2983079928031244E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9997612566512477	WITHOUT_CLASSIFICATION	2.3874334875219311E-4	DESIGN
//not final because proxy factory creation can fail	WITHOUT_CLASSIFICATION	0.9948107782391955	WITHOUT_CLASSIFICATION	0.005189221760804391	DESIGN
// superclass entity-name	WITHOUT_CLASSIFICATION	0.9997883614479695	WITHOUT_CLASSIFICATION	2.1163855203059923E-4	DESIGN
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.981695825311179	WITHOUT_CLASSIFICATION	0.018304174688820955	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992082377773907	WITHOUT_CLASSIFICATION	7.917622226092409E-4	DESIGN
//init the aliases, after initing the constructornode	WITHOUT_CLASSIFICATION	0.9992118332333481	WITHOUT_CLASSIFICATION	7.881667666520364E-4	DESIGN
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.981695825311179	WITHOUT_CLASSIFICATION	0.018304174688820955	DESIGN
// legacy behavior (with no abstract attribute specified)	WITHOUT_CLASSIFICATION	0.9948513894699369	WITHOUT_CLASSIFICATION	0.005148610530063177	DESIGN
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9994216191214904	WITHOUT_CLASSIFICATION	5.783808785095766E-4	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992082377773907	WITHOUT_CLASSIFICATION	7.917622226092409E-4	DESIGN
//note: this affects the return value!	WITHOUT_CLASSIFICATION	0.9968085258596117	WITHOUT_CLASSIFICATION	0.0031914741403883387	DESIGN
// Need to account for allowable '_' within the variant	WITHOUT_CLASSIFICATION	0.9996699351458207	WITHOUT_CLASSIFICATION	3.3006485417933916E-4	DESIGN
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9998270520340868	WITHOUT_CLASSIFICATION	1.7294796591325168E-4	DESIGN
// Collection Types:	WITHOUT_CLASSIFICATION	0.9996451434682241	WITHOUT_CLASSIFICATION	3.5485653177582863E-4	DESIGN
// convenience methods relating to operations across arrays of types...	WITHOUT_CLASSIFICATION	0.9957076212089376	WITHOUT_CLASSIFICATION	0.004292378791062379	DESIGN
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9993601938998358	WITHOUT_CLASSIFICATION	6.398061001641906E-4	DESIGN
//Blobs are ignored by merge()	WITHOUT_CLASSIFICATION	0.9992867372753137	WITHOUT_CLASSIFICATION	7.13262724686371E-4	DESIGN
//value is the entity name	WITHOUT_CLASSIFICATION	0.9996086263688588	WITHOUT_CLASSIFICATION	3.913736311412028E-4	DESIGN
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9988361658907539	WITHOUT_CLASSIFICATION	0.0011638341092461385	DESIGN
// generate id select fragment and then property select fragment for // each expression, just like generateSelectFragments().	WITHOUT_CLASSIFICATION	0.9999344076438718	WITHOUT_CLASSIFICATION	6.559235612814805E-5	DESIGN
//TODO!	WITHOUT_CLASSIFICATION	0.9990619244547406	WITHOUT_CLASSIFICATION	9.380755452593856E-4	DESIGN
//xml is the entity name	WITHOUT_CLASSIFICATION	0.9996086263688588	WITHOUT_CLASSIFICATION	3.913736311412028E-4	DESIGN
//special case ... this is the leaf of the containment graph, even though not immutable	WITHOUT_CLASSIFICATION	0.9972633415070813	WITHOUT_CLASSIFICATION	0.0027366584929187005	DESIGN
//tolerates nulls	WITHOUT_CLASSIFICATION	0.9988361658907539	WITHOUT_CLASSIFICATION	0.0011638341092461385	DESIGN
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9993333866232158	WITHOUT_CLASSIFICATION	6.666133767841301E-4	DESIGN
// metaType is assumed to be single-column type	WITHOUT_CLASSIFICATION	0.9948578052684109	WITHOUT_CLASSIFICATION	0.005142194731589085	DESIGN
// Get all the select expressions (that we just generated) and render the select.	WITHOUT_CLASSIFICATION	0.9998968911989775	WITHOUT_CLASSIFICATION	1.0310880102247295E-4	DESIGN
// Look through the FromElement's children to find any collections of values that should be fetched...	WITHOUT_CLASSIFICATION	0.9998957927332149	WITHOUT_CLASSIFICATION	1.0420726678506119E-4	DESIGN
//return AssociationType.FOREIGN_KEY_TO_PARENT; //this is better but causes a transient object exception...	WITHOUT_CLASSIFICATION	0.7806057371832336	WITHOUT_CLASSIFICATION	0.21939426281676644	DESIGN
// Use the lower case function name. // Remember whether we're in a SELECT clause or not.	WITHOUT_CLASSIFICATION	0.9999780480041484	WITHOUT_CLASSIFICATION	2.1951995851632664E-5	DESIGN
// IDENT might be the name of a class.	WITHOUT_CLASSIFICATION	0.9960166412907567	WITHOUT_CLASSIFICATION	0.0039833587092432815	DESIGN
//TODO!!!	WITHOUT_CLASSIFICATION	0.9990619244547406	WITHOUT_CLASSIFICATION	9.380755452593856E-4	DESIGN
//st.setTimestamp( index,  new Timestamp( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9987335559710404	WITHOUT_CLASSIFICATION	0.0012664440289595924	DESIGN
//st.setDate( index,  new Date( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9987335559710404	WITHOUT_CLASSIFICATION	0.0012664440289595924	DESIGN
// both are Timestamps	WITHOUT_CLASSIFICATION	0.9997159068799606	WITHOUT_CLASSIFICATION	2.840931200394527E-4	DESIGN
// at least one is a plain old Date	WITHOUT_CLASSIFICATION	0.9986447843718552	WITHOUT_CLASSIFICATION	0.0013552156281447618	DESIGN
//noop	WITHOUT_CLASSIFICATION	0.9990619244547406	WITHOUT_CLASSIFICATION	9.380755452593856E-4	DESIGN
// if the corresponding SQL value is NULL, the reader we got is NULL as well	WITHOUT_CLASSIFICATION	0.9999391635505696	WITHOUT_CLASSIFICATION	6.083644943037179E-5	DESIGN
// Fetch Reader content up to the end - and put characters in a StringBuffer	WITHOUT_CLASSIFICATION	0.9901244563361339	WITHOUT_CLASSIFICATION	0.009875543663866138	DESIGN
// Return StringBuffer content as a large String	WITHOUT_CLASSIFICATION	0.9995863852265596	WITHOUT_CLASSIFICATION	4.1361477344031063E-4	DESIGN
//or Types.LONGVARCHAR?	WITHOUT_CLASSIFICATION	0.9993333866232158	WITHOUT_CLASSIFICATION	6.666133767841301E-4	DESIGN
//Not called at runtime so doesn't matter if its slow :)	WITHOUT_CLASSIFICATION	0.9997201650049363	WITHOUT_CLASSIFICATION	2.7983499506374155E-4	DESIGN
//TODO	WITHOUT_CLASSIFICATION	0.9990619244547406	WITHOUT_CLASSIFICATION	9.380755452593856E-4	DESIGN
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9998892764559828	WITHOUT_CLASSIFICATION	1.1072354401718716E-4	DESIGN
//different nullability rules for pk/fk	WITHOUT_CLASSIFICATION	0.9946578542524828	WITHOUT_CLASSIFICATION	0.005342145747517278	DESIGN
//cache this	WITHOUT_CLASSIFICATION	0.9958890037307359	WITHOUT_CLASSIFICATION	0.004110996269264178	DESIGN
//only really need new array during semiresolve!	WITHOUT_CLASSIFICATION	0.993050669907408	WITHOUT_CLASSIFICATION	0.006949330092592032	DESIGN
// Forcefully remove leading ands from where fragments; the grammar will // handle adding them	WITHOUT_CLASSIFICATION	0.9969673094863795	WITHOUT_CLASSIFICATION	0.0030326905136206133	DESIGN
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9988361658907539	WITHOUT_CLASSIFICATION	0.0011638341092461385	DESIGN
// Create a new FILTERS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9998642814449976	WITHOUT_CLASSIFICATION	1.3571855500241233E-4	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992082377773907	WITHOUT_CLASSIFICATION	7.917622226092409E-4	DESIGN
//public Object instantiate(Object parent, SessionImplementor session) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9983708887360023	WITHOUT_CLASSIFICATION	0.0016291112639976203	DESIGN
//nothing to do	WITHOUT_CLASSIFICATION	0.9965812996075775	WITHOUT_CLASSIFICATION	0.003418700392422588	DESIGN
//nothing to do	WITHOUT_CLASSIFICATION	0.9965812996075775	WITHOUT_CLASSIFICATION	0.003418700392422588	DESIGN
// VersionType impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //      Note : simply returns null for seed() and next() as the only known //      application of binary types for versioning is for use with the //      TIMESTAMP datatype supported by Sybase and SQL Server, which //      are completely db-generated values...	WITHOUT_CLASSIFICATION	0.9993595671709938	WITHOUT_CLASSIFICATION	6.404328290061041E-4	DESIGN
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9993601938998358	WITHOUT_CLASSIFICATION	6.398061001641906E-4	DESIGN
//not really necessary, I guess...	WITHOUT_CLASSIFICATION	0.9890132790419641	WITHOUT_CLASSIFICATION	0.010986720958035857	DESIGN
//Clobs are ignored by merge() operation	WITHOUT_CLASSIFICATION	0.9978484765348316	WITHOUT_CLASSIFICATION	0.0021515234651684535	DESIGN
// we do not have to worry about queued additions to uninitialized // collections, since they can only occur for inverse collections!	WITHOUT_CLASSIFICATION	0.9926603321167197	WITHOUT_CLASSIFICATION	0.007339667883280337	DESIGN
// collections cannot be compared	WITHOUT_CLASSIFICATION	0.999240548908351	WITHOUT_CLASSIFICATION	7.594510916491068E-4	DESIGN
//remember the uk value	WITHOUT_CLASSIFICATION	0.9997477860847294	WITHOUT_CLASSIFICATION	2.5221391527061656E-4	DESIGN
//NOOP	WITHOUT_CLASSIFICATION	0.9990619244547406	WITHOUT_CLASSIFICATION	9.380755452593856E-4	DESIGN
//processCollectionProperty(token, q.getCollectionPersister(collectionRole), collectionName);	WITHOUT_CLASSIFICATION	0.9968940233176451	WITHOUT_CLASSIFICATION	0.0031059766823548695	DESIGN
//we must use the "remembered" uk value, since it is  //not available from the EntityEntry during assembly	WITHOUT_CLASSIFICATION	0.9949245437436871	WITHOUT_CLASSIFICATION	0.005075456256312936	DESIGN
// collections don't dirty an unversioned parent entity	WITHOUT_CLASSIFICATION	0.9990427468456088	WITHOUT_CLASSIFICATION	9.572531543912936E-4	DESIGN
// return false;	WITHOUT_CLASSIFICATION	0.9997559249013153	WITHOUT_CLASSIFICATION	2.440750986847111E-4	DESIGN
// This just handles a particular case of component // projection, perhaps get rid of it and throw an exception	WITHOUT_CLASSIFICATION	0.995439350978671	WITHOUT_CLASSIFICATION	0.004560649021329006	DESIGN
//NOTE: we avoid joining to the next table if the named property is just the foreign key value	WITHOUT_CLASSIFICATION	0.9994434853440521	WITHOUT_CLASSIFICATION	5.565146559478943E-4	DESIGN
// the key is the owning entity itself, so get the ID from the key	WITHOUT_CLASSIFICATION	0.9995015246165764	WITHOUT_CLASSIFICATION	4.984753834236534E-4	DESIGN
// if the original is a PersistentCollection, and that original // was not flagged as dirty, then reset the target's dirty flag // here after the copy operation. // </p> // One thing to be careful of here is a "bare" original collection // in which case we should never ever ever reset the dirty flag // on the target because we simply do not know...	WITHOUT_CLASSIFICATION	0.9999986394798218	WITHOUT_CLASSIFICATION	1.3605201781951956E-6	DESIGN
//ignore subselect keywords	WITHOUT_CLASSIFICATION	0.9993362698361491	WITHOUT_CLASSIFICATION	6.637301638508716E-4	DESIGN
// copy elements into newly empty target collection	WITHOUT_CLASSIFICATION	0.9999198061969811	WITHOUT_CLASSIFICATION	8.019380301895886E-5	DESIGN
// for a null target, or a target which is the same as the original, we // need to put the merged elements in a new collection	WITHOUT_CLASSIFICATION	0.9990899737300531	WITHOUT_CLASSIFICATION	9.100262699468144E-4	DESIGN
// by default just use an unanticipated capacity since we don't // know how to extract the capacity to use from original here...	WITHOUT_CLASSIFICATION	0.9997426839665484	WITHOUT_CLASSIFICATION	2.573160334516013E-4	DESIGN
// get the elements back into the target making sure to handle dirty flag	WITHOUT_CLASSIFICATION	0.999905513700169	WITHOUT_CLASSIFICATION	9.448629983099257E-5	DESIGN
// check if collection is currently being loaded	WITHOUT_CLASSIFICATION	0.9974899943376587	WITHOUT_CLASSIFICATION	0.002510005662341197	DESIGN
// check if it is already completely loaded, but unowned	WITHOUT_CLASSIFICATION	0.9991555634926954	WITHOUT_CLASSIFICATION	8.444365073044768E-4	DESIGN
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9996722547552489	WITHOUT_CLASSIFICATION	3.2774524475112876E-4	DESIGN
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9988361658907539	WITHOUT_CLASSIFICATION	0.0011638341092461385	DESIGN
// create a new collection wrapper, to be initialized later	WITHOUT_CLASSIFICATION	0.9921415697650788	WITHOUT_CLASSIFICATION	0.007858430234921157	DESIGN
// Some JDBC drivers erroneously return an empty array here for a null DB value :/	WITHOUT_CLASSIFICATION	0.9850665987585276	WITHOUT_CLASSIFICATION	0.014933401241472417	DESIGN
// our column span is the number of columns in the PK	WITHOUT_CLASSIFICATION	0.9997077061865502	WITHOUT_CLASSIFICATION	2.922938134497372E-4	DESIGN
//cannot batch fetch by unique key (property-ref associations)	WITHOUT_CLASSIFICATION	0.992523554855547	WITHOUT_CLASSIFICATION	0.007476445144453042	DESIGN
// we already know current is not null...	WITHOUT_CLASSIFICATION	0.999189091880167	WITHOUT_CLASSIFICATION	8.109081198330415E-4	DESIGN
// the ids are fully resolved, so compare them with isDirty(), not isModified()	WITHOUT_CLASSIFICATION	0.9998203477262807	WITHOUT_CLASSIFICATION	1.7965227371933011E-4	DESIGN
//the owner of the association is not the owner of the id	WITHOUT_CLASSIFICATION	0.9994327631672402	WITHOUT_CLASSIFICATION	5.672368327598358E-4	DESIGN
// ----------------------------------------------------------- Constructors	WITHOUT_CLASSIFICATION	0.9992180537423052	WITHOUT_CLASSIFICATION	7.819462576947891E-4	DESIGN
// ----------------------------------------------------- Instance Variables	WITHOUT_CLASSIFICATION	0.9992954883070062	WITHOUT_CLASSIFICATION	7.045116929939305E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9997612566512477	WITHOUT_CLASSIFICATION	2.3874334875219311E-4	DESIGN
// --------------------------------------------------------- Public Methods	WITHOUT_CLASSIFICATION	0.9991897188599389	WITHOUT_CLASSIFICATION	8.10281140061119E-4	DESIGN
// Compare the two maps for equality	WITHOUT_CLASSIFICATION	0.9994644038600153	WITHOUT_CLASSIFICATION	5.355961399846369E-4	DESIGN
// Simple tests that require no synchronization	WITHOUT_CLASSIFICATION	0.9997200375803602	WITHOUT_CLASSIFICATION	2.799624196397168E-4	DESIGN
//Sybase fail if we don't do that, sigh...	WITHOUT_CLASSIFICATION	0.9919385021952789	WITHOUT_CLASSIFICATION	0.008061497804721192	DESIGN
// Handles things like: // a and b or c // a and ( b or c ) // not a and not b // not ( a and b ) // x between y and z            (overloaded "and") // x in ( a, b, c )             (overloaded brackets) // not not a // a is not null                (overloaded "not") // etc...... // and expressions like // foo = bar                    (maps to: foo.id = bar.id) // foo.Bar = 'foo'              (maps to: foo.bar = 'foo') // foo.Bar.Baz = 1.0            (maps to: foo.bar = bar.id and bar.baz = 1.0) // 1.0 = foo.Bar.Baz            (maps to: bar.baz = 1.0 and foo.Bar = bar.id) // foo.Bar.Baz = a.B.C          (maps to: bar.Baz = b.C and foo.Bar = bar.id and a.B = b.id) // foo.Bar.Baz + a.B.C          (maps to: bar.Baz + b.C and foo.Bar = bar.id and a.B = b.id) // ( foo.Bar.Baz + 1.0 ) < 2.0  (maps to: ( bar.Baz + 1.0 ) < 2.0 and foo.Bar = bar.id)	WITHOUT_CLASSIFICATION	0.9988898177336453	WITHOUT_CLASSIFICATION	0.0011101822663547515	DESIGN
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9923680097987442	WITHOUT_CLASSIFICATION	0.007631990201255758	DESIGN
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9923680097987442	WITHOUT_CLASSIFICATION	0.007631990201255758	DESIGN
// try to "pretty print" it	WITHOUT_CLASSIFICATION	0.9999207021664124	WITHOUT_CLASSIFICATION	7.929783358759557E-5	DESIGN
// otherwise, just dump it	WITHOUT_CLASSIFICATION	0.9999561129545504	WITHOUT_CLASSIFICATION	4.388704544952377E-5	DESIGN
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9978951837424938	WITHOUT_CLASSIFICATION	0.0021048162575061985	DESIGN
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9978951837424938	WITHOUT_CLASSIFICATION	0.0021048162575061985	DESIGN
// use default behavior	WITHOUT_CLASSIFICATION	0.9996112017980697	WITHOUT_CLASSIFICATION	3.8879820193029257E-4	DESIGN
//NOTE: early return	WITHOUT_CLASSIFICATION	0.9992121846331691	WITHOUT_CLASSIFICATION	7.878153668309677E-4	DESIGN
// the MRU cache used to keep hard references to the most recently used query plans; // note : LRU here is a bit of a misnomer, it indicates that LRU entries are removed, the // actual kept entries are the MRU entries	WITHOUT_CLASSIFICATION	0.9699592562121695	WITHOUT_CLASSIFICATION	0.030040743787830487	DESIGN
// we want to be able to just use the defaults, // if JNDI environment properties are not supplied // so don't put null in anywhere	WITHOUT_CLASSIFICATION	0.9993208561140117	WITHOUT_CLASSIFICATION	6.791438859882869E-4	DESIGN
// Clone //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9995694047247026	WITHOUT_CLASSIFICATION	4.3059527529739966E-4	DESIGN
// Serialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9992082377773907	WITHOUT_CLASSIFICATION	7.917622226092409E-4	DESIGN
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.9998138713473425	WITHOUT_CLASSIFICATION	1.861286526575207E-4	DESIGN
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.9998138713473425	WITHOUT_CLASSIFICATION	1.861286526575207E-4	DESIGN
// Deserialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9992082377773907	WITHOUT_CLASSIFICATION	7.917622226092409E-4	DESIGN
/* static methods only - hide constructor */	WITHOUT_CLASSIFICATION	0.9996066065972631	WITHOUT_CLASSIFICATION	3.933934027369947E-4	DESIGN
/*&& !('_'==character)*/	WITHOUT_CLASSIFICATION	0.9993648423672806	WITHOUT_CLASSIFICATION	6.351576327193664E-4	DESIGN
// returnign null!	WITHOUT_CLASSIFICATION	0.9997046450427136	WITHOUT_CLASSIFICATION	2.953549572864476E-4	DESIGN
// returnign null!	WITHOUT_CLASSIFICATION	0.9997046450427136	WITHOUT_CLASSIFICATION	2.953549572864476E-4	DESIGN
// includes last '.'	WITHOUT_CLASSIFICATION	0.9998820063150609	WITHOUT_CLASSIFICATION	1.1799368493922468E-4	DESIGN
// +1 to include the following '.'	WITHOUT_CLASSIFICATION	0.9998852232706535	WITHOUT_CLASSIFICATION	1.1477672934648754E-4	DESIGN
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9996173058897685	WITHOUT_CLASSIFICATION	3.82694110231552E-4	DESIGN
// first time we find match!	WITHOUT_CLASSIFICATION	0.999619390419817	WITHOUT_CLASSIFICATION	3.8060958018301726E-4	DESIGN
// entityNames may now include slashes for the representations //classname may be an inner class	WITHOUT_CLASSIFICATION	0.9999348137157735	WITHOUT_CLASSIFICATION	6.518628422642637E-5	DESIGN
// wrapped iterators	WITHOUT_CLASSIFICATION	0.9997145062471223	WITHOUT_CLASSIFICATION	2.854937528776347E-4	DESIGN
// index of current iterator in the wrapped iterators array	WITHOUT_CLASSIFICATION	0.999716078076925	WITHOUT_CLASSIFICATION	2.839219230749885E-4	DESIGN
// the current iterator	WITHOUT_CLASSIFICATION	0.9999339228625516	WITHOUT_CLASSIFICATION	6.60771374483354E-5	DESIGN
// the last used iterator	WITHOUT_CLASSIFICATION	0.9999225914442982	WITHOUT_CLASSIFICATION	7.740855570180962E-5	DESIGN
//it was a boolean expression	WITHOUT_CLASSIFICATION	0.9997750505996208	WITHOUT_CLASSIFICATION	2.249494003792451E-4	DESIGN
/*public static Object[] clone(Class elementClass, Object[] array) {	WITHOUT_CLASSIFICATION	0.9965301975734928	WITHOUT_CLASSIFICATION	0.0034698024265072654	DESIGN
// call this before any Iterator method to make sure that the current Iterator // is not exhausted	WITHOUT_CLASSIFICATION	0.989774497246198	WITHOUT_CLASSIFICATION	0.010225502753801907	DESIGN
//doable if needed	WITHOUT_CLASSIFICATION	0.9992344680163567	WITHOUT_CLASSIFICATION	7.655319836432273E-4	DESIGN
// set last used iterator here, in case the user calls remove // before calling hasNext() or next() (although they shouldn't)	WITHOUT_CLASSIFICATION	0.9974871036108056	WITHOUT_CLASSIFICATION	0.0025128963891942993	DESIGN
// peek ahead	WITHOUT_CLASSIFICATION	0.9997193766004497	WITHOUT_CLASSIFICATION	2.806233995502255E-4	DESIGN
// if we reach the end of the string w/o finding the // matching end, that is an exception	WITHOUT_CLASSIFICATION	0.9974087372420292	WITHOUT_CLASSIFICATION	0.0025912627579708844	DESIGN
// we have a placeholder, spin forward till we find the end	WITHOUT_CLASSIFICATION	0.9968815352187819	WITHOUT_CLASSIFICATION	0.003118464781218159	DESIGN
// make sure spinning forward did not put us past the end of the buffer...	WITHOUT_CLASSIFICATION	0.9983969616446161	WITHOUT_CLASSIFICATION	0.0016030383553839068	DESIGN
// First, try to locate this resource through the current // context classloader.	WITHOUT_CLASSIFICATION	0.99896403290354	WITHOUT_CLASSIFICATION	0.0010359670964600705	DESIGN
// Next, try to locate this resource through this class's classloader	WITHOUT_CLASSIFICATION	0.9991008625462652	WITHOUT_CLASSIFICATION	8.991374537347707E-4	DESIGN
// Next, try to locate this resource through the system classloader	WITHOUT_CLASSIFICATION	0.9996945850019162	WITHOUT_CLASSIFICATION	3.054149980838142E-4	DESIGN
// Anywhere else we should look?	WITHOUT_CLASSIFICATION	0.9970231068029493	WITHOUT_CLASSIFICATION	0.002976893197050797	DESIGN
// would need an IdentitySet for this!	WITHOUT_CLASSIFICATION	0.9739919924155407	WITHOUT_CLASSIFICATION	0.02600800758445924	DESIGN
//Arrays.asList doesn't do primitive arrays	WITHOUT_CLASSIFICATION	0.9989836683114302	WITHOUT_CLASSIFICATION	0.0010163316885698293	DESIGN
//faster?	WITHOUT_CLASSIFICATION	0.9990619244547406	WITHOUT_CLASSIFICATION	9.380755452593856E-4	DESIGN
// the name of a class	WITHOUT_CLASSIFICATION	0.9999342171630297	WITHOUT_CLASSIFICATION	6.578283697032692E-5	DESIGN
// Its the listener class name	WITHOUT_CLASSIFICATION	0.9999519600043437	WITHOUT_CLASSIFICATION	4.8039995656276046E-5	DESIGN
//allow 9,8,7,6,5,4,3,2,1	WITHOUT_CLASSIFICATION	0.9993333866232158	WITHOUT_CLASSIFICATION	6.666133767841301E-4	DESIGN
// default to element set if no elements() specified	WITHOUT_CLASSIFICATION	0.9989079464988708	WITHOUT_CLASSIFICATION	0.0010920535011291056	DESIGN
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9990560284864539	WITHOUT_CLASSIFICATION	9.439715135460773E-4	DESIGN
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9975286280058056	WITHOUT_CLASSIFICATION	0.0024713719941943787	DESIGN
// first, lets determine whether to apply cglib or javassist based instrumentation...	WITHOUT_CLASSIFICATION	0.9936379756921581	WITHOUT_CLASSIFICATION	0.006362024307841876	DESIGN
// Make sure we don't override previous set values	WITHOUT_CLASSIFICATION	0.9994990642686867	WITHOUT_CLASSIFICATION	5.009357313132491E-4	DESIGN
//entirely optional!!	WITHOUT_CLASSIFICATION	0.9993333866232158	WITHOUT_CLASSIFICATION	6.666133767841301E-4	DESIGN
// Its the listener instance (or better be)	WITHOUT_CLASSIFICATION	0.9953394972625994	WITHOUT_CLASSIFICATION	0.004660502737400691	DESIGN
//context.unbind(boundName);	WITHOUT_CLASSIFICATION	0.9993333866232158	WITHOUT_CLASSIFICATION	6.666133767841301E-4	DESIGN
//readResolveObject	WITHOUT_CLASSIFICATION	0.9988361658907539	WITHOUT_CLASSIFICATION	0.0011638341092461385	DESIGN
//cfg.setProperty("hibernate.show_sql", "true");	WITHOUT_CLASSIFICATION	0.9968940233176451	WITHOUT_CLASSIFICATION	0.0031059766823548695	DESIGN
// Defensive, convenience methods	WITHOUT_CLASSIFICATION	0.9989872539363396	WITHOUT_CLASSIFICATION	0.0010127460636603796	DESIGN
// Create the SessionFactory from hibernate.cfg.xml	WITHOUT_CLASSIFICATION	0.9994802168763446	WITHOUT_CLASSIFICATION	5.197831236554649E-4	DESIGN
// Make sure you log the exception, as it might be swallowed	WITHOUT_CLASSIFICATION	0.999748764863127	WITHOUT_CLASSIFICATION	2.512351368730176E-4	DESIGN
// Begin unit of work	WITHOUT_CLASSIFICATION	0.9998055705288021	WITHOUT_CLASSIFICATION	1.9442947119782363E-4	DESIGN
// Write HTML header	WITHOUT_CLASSIFICATION	0.9997879124903452	WITHOUT_CLASSIFICATION	2.1208750965471187E-4	DESIGN
// Handle actions	WITHOUT_CLASSIFICATION	0.9992216711789399	WITHOUT_CLASSIFICATION	7.783288210600892E-4	DESIGN
// Print page	WITHOUT_CLASSIFICATION	0.9995038259333437	WITHOUT_CLASSIFICATION	4.961740666562379E-4	DESIGN
// Write HTML footer	WITHOUT_CLASSIFICATION	0.9997140587851044	WITHOUT_CLASSIFICATION	2.8594121489558435E-4	DESIGN
// End unit of work	WITHOUT_CLASSIFICATION	0.9995705868221831	WITHOUT_CLASSIFICATION	4.294131778168628E-4	DESIGN
// Start the session to be used for this request	WITHOUT_CLASSIFICATION	0.9954955418628997	WITHOUT_CLASSIFICATION	0.004504458137100392	DESIGN
// make the session available to the session factory's "current context"	WITHOUT_CLASSIFICATION	0.9960675652294643	WITHOUT_CLASSIFICATION	0.0039324347705357275	DESIGN
// pass control along to the rest of the processing chain	WITHOUT_CLASSIFICATION	0.9999326538948095	WITHOUT_CLASSIFICATION	6.73461051905409E-5	DESIGN
// remove session from "current context"	WITHOUT_CLASSIFICATION	0.9930835908506388	WITHOUT_CLASSIFICATION	0.0069164091493612275	DESIGN
// Eager fetch the collection so we can use it detached	WITHOUT_CLASSIFICATION	0.9987349747003748	WITHOUT_CLASSIFICATION	0.0012650252996251972	DESIGN
// If we want to handle it bidirectional and detached, we also need to load this // collection with an eager outer-join fetch, this time with Criteria and not HQL:	WITHOUT_CLASSIFICATION	0.8463863800106062	WITHOUT_CLASSIFICATION	0.15361361998939393	DESIGN
/*        Event anEvent = (Event) session                .createCriteria(Event.class).setFetchMode("participants", FetchMode.JOIN)                .add( Expression.eq("id", eventId) )                .uniqueResult(); // Eager fetch the colleciton so we can use it detached        */	WITHOUT_CLASSIFICATION	0.9999949663833597	WITHOUT_CLASSIFICATION	5.033616640321065E-6	DESIGN
// End of first unit of work	WITHOUT_CLASSIFICATION	0.9997095137863722	WITHOUT_CLASSIFICATION	2.9048621362771015E-4	DESIGN
// or bidirectional safety method, setting both sides: aPerson.addToEvent(anEvent);	WITHOUT_CLASSIFICATION	0.998519077059541	WITHOUT_CLASSIFICATION	0.0014809229404590348	DESIGN
// Begin second unit of work	WITHOUT_CLASSIFICATION	0.9999059128527414	WITHOUT_CLASSIFICATION	9.408714725853761E-5	DESIGN
// Reattachment of aPerson	WITHOUT_CLASSIFICATION	0.9998616030125022	WITHOUT_CLASSIFICATION	1.3839698749789316E-4	DESIGN
// The getEmailAddresses() might trigger a lazy load of the collection	WITHOUT_CLASSIFICATION	0.9985391877551274	WITHOUT_CLASSIFICATION	0.0014608122448725668	DESIGN
// We need our tm, so get it now and avoid doing other work // if there is a problem	WITHOUT_CLASSIFICATION	0.999935416009901	WITHOUT_CLASSIFICATION	6.458399009900214E-5	DESIGN
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.999007148848412	WITHOUT_CLASSIFICATION	9.928511515879491E-4	DESIGN
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.999007148848412	WITHOUT_CLASSIFICATION	9.928511515879491E-4	DESIGN
// JBC put a version in the node when it created as part of // some internal operation. We are always newer, but if // the JBC version is > 1 something odd has happened	WITHOUT_CLASSIFICATION	0.9999823495082991	WITHOUT_CLASSIFICATION	1.765049170089168E-5	DESIGN
//swaldman 2006-08-28: define c3p0-style configuration parameters for properties with //                     hibernate-specific overrides to detect and warn about conflicting //                     declarations	WITHOUT_CLASSIFICATION	0.9912390187243779	WITHOUT_CLASSIFICATION	0.008760981275622151	DESIGN
// Not null if the Isolation level has been specified in the configuration file. // Otherwise, it is left to the Driver's default value.	WITHOUT_CLASSIFICATION	0.9995440598477103	WITHOUT_CLASSIFICATION	4.559401522895943E-4	DESIGN
// Configured outside of Hibernate (i.e. Servlet container, or Java Bean Container // already has Proxool pools running, and this provider is to just borrow one of these	WITHOUT_CLASSIFICATION	0.9427311030084479	WITHOUT_CLASSIFICATION	0.05726889699155209	DESIGN
// If you're closing down the ConnectionProvider chances are an // is not a real big deal, just warn	WITHOUT_CLASSIFICATION	0.9999673210529592	WITHOUT_CLASSIFICATION	3.2678947040843724E-5	DESIGN
// (AS is always optional, for consistency with SQL/OQL)	WITHOUT_CLASSIFICATION	0.9959620687775993	WITHOUT_CLASSIFICATION	0.004037931222400718	DESIGN
// process the "new" HQL style where aliases are assigned // _after_ the class name or path expression ie. using // the AS construction	WITHOUT_CLASSIFICATION	0.9999777634769957	WITHOUT_CLASSIFICATION	2.223652300426099E-5	DESIGN
// the loaded owner will be set to null after the collection is removed, // so capture its value as the affected owner so it is accessible to // both pre- and post- events	WITHOUT_CLASSIFICATION	0.9991443999588109	WITHOUT_CLASSIFICATION	8.556000411891061E-4	DESIGN
// is a primitive type // invokespecial	WITHOUT_CLASSIFICATION	0.9987905031399702	WITHOUT_CLASSIFICATION	0.0012094968600297915	DESIGN
// array of primitive type // do nothing	WITHOUT_CLASSIFICATION	0.9999716547158086	WITHOUT_CLASSIFICATION	2.834528419140559E-5	DESIGN
// handle a path expression or class name that // appears at the start, in the "new" HQL // style or an alias that appears at the start // in the "old" HQL style	WITHOUT_CLASSIFICATION	0.9997928683877046	WITHOUT_CLASSIFICATION	2.0713161229527394E-4	DESIGN
//handle <=, >=, !=, is not, not between, not in	WITHOUT_CLASSIFICATION	0.9947864240246992	WITHOUT_CLASSIFICATION	0.00521357597530071	DESIGN
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999981021651931	WITHOUT_CLASSIFICATION	1.8978348067683854E-6	DESIGN
// transfer an explicitly defined entity name // handle the lazy attribute	WITHOUT_CLASSIFICATION	0.9995324361738507	WITHOUT_CLASSIFICATION	4.675638261492332E-4	DESIGN
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9969864294960188	WITHOUT_CLASSIFICATION	0.003013570503981104	DESIGN
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9969864294960188	WITHOUT_CLASSIFICATION	0.003013570503981104	DESIGN
// get meta's from // <joined-subclass>	WITHOUT_CLASSIFICATION	0.998263337813682	WITHOUT_CLASSIFICATION	0.0017366621863179484	DESIGN
// parameters on the property mapping should // override parameters in the typedef	WITHOUT_CLASSIFICATION	0.9995140970729085	WITHOUT_CLASSIFICATION	4.8590292709140524E-4	DESIGN
//fetch="join" overrides default laziness //fetch="join" overrides default laziness	WITHOUT_CLASSIFICATION	0.99565680427846	WITHOUT_CLASSIFICATION	0.004343195721539956	DESIGN
//NOTE SPECIAL CASE: // default to join and non-lazy for the "second join" // of the many-to-many	WITHOUT_CLASSIFICATION	0.9993329938117239	WITHOUT_CLASSIFICATION	6.6700618827602E-4	DESIGN
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9996140557462874	WITHOUT_CLASSIFICATION	3.859442537126482E-4	DESIGN
// state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9990452589214387	WITHOUT_CLASSIFICATION	9.5474107856129E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9997612566512477	WITHOUT_CLASSIFICATION	2.3874334875219311E-4	DESIGN
//element //index -> id	WITHOUT_CLASSIFICATION	0.999803059428293	WITHOUT_CLASSIFICATION	1.969405717071798E-4	DESIGN
// note that it might be better to iterate the snapshot but this is safe, // assuming the user implements equals() properly, as required by the Set // contract!	WITHOUT_CLASSIFICATION	0.7549068034700476	WITHOUT_CLASSIFICATION	0.24509319652995237	DESIGN
// collections detect changes made via their public interface and mark // themselves as dirty as a performance optimization	WITHOUT_CLASSIFICATION	0.98920286704924	WITHOUT_CLASSIFICATION	0.010797132950760088	DESIGN
// essentially, if the real session is closed allow any // method call to pass through since the real session // will complain by throwing an appropriate exception; // NOTE that allowing close() above has the same basic effect, //   but we capture that there simply to perform the unbind...	WITHOUT_CLASSIFICATION	0.9993998965731711	WITHOUT_CLASSIFICATION	6.001034268288301E-4	DESIGN
// The default SQLExceptionConverter for all dialects is based on SQLState // since SQLErrorCode is extremely vendor-specific.  Specific Dialects // may override to return whatever is most appropriate for that vendor.	WITHOUT_CLASSIFICATION	0.975220304647496	WITHOUT_CLASSIFICATION	0.024779695352504037	DESIGN
//only necessary for postgre < 7.4 //http://anoncvs.postgresql.org/cvsweb.cgi/pgsql/doc/src/sgml/ref/create_sequence.sgml	WITHOUT_CLASSIFICATION	0.9582389986807428	WITHOUT_CLASSIFICATION	0.04176100131925723	DESIGN
// select topic, syntax from information_schema.help // where section like 'Function%' order by section, topic // // see also ->  http://www.h2database.com/html/functions.html	WITHOUT_CLASSIFICATION	0.9949387059920873	WITHOUT_CLASSIFICATION	0.005061294007912701	DESIGN
// registerColumnType(Types.VARBINARY, "CHARACTER($l)"); // registerColumnType(Types.BLOB, "CHARACTER($l)" );  // For use prior to CP 11.0 // registerColumnType(Types.CLOB, "CHARACTER($l)" );	WITHOUT_CLASSIFICATION	0.998501304114198	WITHOUT_CLASSIFICATION	0.0014986958858019038	DESIGN
//the BLOB type requires a size arguement - this defaults to //bytes - no arg defaults to 1 whole byte! //other argument mods include K - kilobyte, M - megabyte, G - gigabyte. //refer to the PBdevelopers guide for more info.	WITHOUT_CLASSIFICATION	0.9716623718359654	WITHOUT_CLASSIFICATION	0.028337628164034654	DESIGN
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.9601177660287623	WITHOUT_CLASSIFICATION	0.039882233971237684	DESIGN
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.9965217630900248	WITHOUT_CLASSIFICATION	0.0034782369099751933	DESIGN
// add the comment // nest the main query in an outer select // add the rownnumber bit into the outer query select list	WITHOUT_CLASSIFICATION	0.9999749786694104	WITHOUT_CLASSIFICATION	2.50213305895812E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9997612566512477	WITHOUT_CLASSIFICATION	2.3874334875219311E-4	DESIGN
// Note: For object <-> SQL datatype mappings see: //	WITHOUT_CLASSIFICATION	0.9993937890554072	WITHOUT_CLASSIFICATION	6.062109445927809E-4	DESIGN
// TRIM(end_keyword string-expression-1 FROM string-expression-2) // use Hibernate implementation "From" is one of the parameters they pass in position ?3 //registerFunction( "trim", new SQLFunctionTemplate(Hibernate.STRING, "trim(?1 ?2 from ?3)") );	WITHOUT_CLASSIFICATION	0.9968853768852507	WITHOUT_CLASSIFICATION	0.0031146231147493077	DESIGN
// Whether this dialect has an Identity clause added to the data type or a completely seperate identity // data type	WITHOUT_CLASSIFICATION	0.9997855435604461	WITHOUT_CLASSIFICATION	2.1445643955395567E-4	DESIGN
// According to both the ANSI-SQL and JPA specs, trim takes a variable number of parameters between 1 and 4. // at least one paramer (trimSource) is required.  From the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If <trim specification> is omitted, BOTH is assumed. // If <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9998940973361792	WITHOUT_CLASSIFICATION	1.0590266382076644E-4	DESIGN
/////////////////////////////////////////////////////////////////////// // Prepare persisters and link them up with their cache // region/access-strategy	WITHOUT_CLASSIFICATION	0.9993024682381596	WITHOUT_CLASSIFICATION	6.975317618403751E-4	DESIGN
//Named Queries:	WITHOUT_CLASSIFICATION	0.9988361658907539	WITHOUT_CLASSIFICATION	0.0011638341092461385	DESIGN
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9989512803228041	WITHOUT_CLASSIFICATION	0.0010487196771958322	DESIGN
// does not handle arrays (thats ok, cos they can't be lazy) // or newly instantiated collections, so we can do the cast	WITHOUT_CLASSIFICATION	0.9127431812823426	WITHOUT_CLASSIFICATION	0.08725681871765739	DESIGN
// collection deletions are a special case since update() can add // deletions of collections not loaded by the session.	WITHOUT_CLASSIFICATION	0.9999474420359131	WITHOUT_CLASSIFICATION	5.2557964086816055E-5	DESIGN
// we can do the cast since orphan-delete does not apply to: // 1. newly instantiated collections // 2. arrays (we can't track orphans for detached arrays)	WITHOUT_CLASSIFICATION	0.9892448422993539	WITHOUT_CLASSIFICATION	0.010755157700646065	DESIGN
// if the natural-id is marked as non-mutable, it is not retrieved during a // normal database-snapshot operation...	WITHOUT_CLASSIFICATION	0.999787656570173	WITHOUT_CLASSIFICATION	2.123434298269035E-4	DESIGN
// watch out for a case where old is still referenced // somewhere in the object graph! (which is a user error)	WITHOUT_CLASSIFICATION	0.9922533154253448	WITHOUT_CLASSIFICATION	0.007746684574655311	DESIGN
//slice, to get the columns for this component //property	WITHOUT_CLASSIFICATION	0.9893436781747756	WITHOUT_CLASSIFICATION	0.01065632182522442	DESIGN
//int result = 17; //result = 37 * result + type.hashCode(); //result = 37 * result + ( value==null ? 0 : value.hashCode() ); //return result;	WITHOUT_CLASSIFICATION	0.9999304642491701	WITHOUT_CLASSIFICATION	6.95357508298855E-5	DESIGN
// The CollectionEntry.isReached() stuff is just to detect any silly users   // who set up circular or shared references between/to collections.	WITHOUT_CLASSIFICATION	0.9996895625337067	WITHOUT_CLASSIFICATION	3.1043746629334155E-4	DESIGN
// detached collection wrappers that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9977991637883735	WITHOUT_CLASSIFICATION	0.0022008362116264957	DESIGN
// The unique property value represented here may or may not be // serializable, so we do an explicit check here in order to generate // a better error message	WITHOUT_CLASSIFICATION	0.8800178007303646	WITHOUT_CLASSIFICATION	0.1199821992696354	DESIGN
// if the version of a newly instantiated object is not the same // as the version seed value, use that as the unsaved-value	WITHOUT_CLASSIFICATION	0.9988281133397584	WITHOUT_CLASSIFICATION	0.0011718866602415572	DESIGN
// ie. we never have to null out a reference to // an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9993785653292174	WITHOUT_CLASSIFICATION	6.21434670782545E-4	DESIGN
// ignore this row, the collection is in process of // being loaded somewhere further "up" the stack	WITHOUT_CLASSIFICATION	0.9896060158400699	WITHOUT_CLASSIFICATION	0.010393984159930076	DESIGN
// Entity load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // 	WITHOUT_CLASSIFICATION	0.9995888311742573	WITHOUT_CLASSIFICATION	4.1116882574267286E-4	DESIGN
// should be ok performance-wise to generate new delegate instances for each // request since these are locally stack-scoped.  Besides, it makes the code // much easier to read than the old TransactionHelper stuff...	WITHOUT_CLASSIFICATION	0.9927056606029998	WITHOUT_CLASSIFICATION	0.0072943393970001345	DESIGN
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9901268115030722	WITHOUT_CLASSIFICATION	0.009873188496927808	DESIGN
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9901268115030722	WITHOUT_CLASSIFICATION	0.009873188496927808	DESIGN
// wrap up any new collections directly referenced by the object // or its components	WITHOUT_CLASSIFICATION	0.9996156508499519	WITHOUT_CLASSIFICATION	3.8434915004813893E-4	DESIGN
// remove any snapshot, not really for memory management purposes, but // rather because it might now be stale, and there is no longer any  // EntityEntry to take precedence // This is now handled by removeEntity() //session.getPersistenceContext().removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9008627939927557	WITHOUT_CLASSIFICATION	0.09913720600724428	DESIGN
// skip this check for composite-ids relating to dom4j entity-mode; // alternatively, we could add a check to make sure the incoming id value is // an instance of Element...	WITHOUT_CLASSIFICATION	0.9953558769705652	WITHOUT_CLASSIFICATION	0.0046441230294348235	DESIGN
// upgrade the lock if necessary: //lock(result, lockMode);	WITHOUT_CLASSIFICATION	0.9996561630901201	WITHOUT_CLASSIFICATION	3.438369098798784E-4	DESIGN
// now, any collections that are initialized // inside this block do not get updated - they // are ignored until the next flush	WITHOUT_CLASSIFICATION	0.9603707882786193	WITHOUT_CLASSIFICATION	0.039629211721380765	DESIGN
//we must clone embedded composite identifiers, or  //we will get back the same instance that we pass in	WITHOUT_CLASSIFICATION	0.9991141344471832	WITHOUT_CLASSIFICATION	8.858655528168208E-4	DESIGN
// Sub-insertions should occur before containing insertion so // Try to do the callback now	WITHOUT_CLASSIFICATION	0.9993738162924403	WITHOUT_CLASSIFICATION	6.261837075596631E-4	DESIGN
//the entity is not associated with the session, so //try interceptor and unsaved-value	WITHOUT_CLASSIFICATION	0.998883242176979	WITHOUT_CLASSIFICATION	0.0011167578230209458	DESIGN
//scan the query string for class names appearing in the from clause and replace //with all persistent implementors of the class/interface, returning multiple //query strings (make sure we don't pick up a class in the select clause!)	WITHOUT_CLASSIFICATION	0.9073885504818159	WITHOUT_CLASSIFICATION	0.09261144951818406	DESIGN
// save() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993509517885787	WITHOUT_CLASSIFICATION	6.490482114211934E-4	DESIGN
// evict() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993509517885787	WITHOUT_CLASSIFICATION	6.490482114211934E-4	DESIGN
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9678221542791647	WITHOUT_CLASSIFICATION	0.032177845720835194	DESIGN
//if it is an uninitialized proxy, pointing //with this session, then when it is accessed, //the underlying instance will be "contained"	WITHOUT_CLASSIFICATION	0.9967101716632824	WITHOUT_CLASSIFICATION	0.0032898283367176024	DESIGN
// Generate an explicit join for the root dot node.   The implied joins will be collected and passed up // to the root dot node.	WITHOUT_CLASSIFICATION	0.99986537036637	WITHOUT_CLASSIFICATION	1.3462963363001663E-4	DESIGN
// A session is considered to contain an entity only if the entity has // an entry in the session's persistence context and the entry reports // that the entity has not been removed	WITHOUT_CLASSIFICATION	0.9989129415065638	WITHOUT_CLASSIFICATION	0.0010870584934361488	DESIGN
// Does the collection referenced by this FromElement // specify an order-by attribute?  If so, attach it to // the query's order-by	WITHOUT_CLASSIFICATION	0.9963614833045218	WITHOUT_CLASSIFICATION	0.0036385166954781877	DESIGN
// ... and the token could be an identifer and the error is // a mismatched token error ...	WITHOUT_CLASSIFICATION	0.9948958356761441	WITHOUT_CLASSIFICATION	0.00510416432385588	DESIGN
// If a where clause was specified in the update/delete query, use it to limit the // returned ids here...	WITHOUT_CLASSIFICATION	0.9997332252315556	WITHOUT_CLASSIFICATION	2.667747684444511E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9997612566512477	WITHOUT_CLASSIFICATION	2.3874334875219311E-4	DESIGN
// Default implementation: // If this node has a data type, and that data type is not an association, then this is scalar.	WITHOUT_CLASSIFICATION	0.9982642517103482	WITHOUT_CLASSIFICATION	0.0017357482896518982	DESIGN
// Resolve the LHS fully, generate implicit joins.  Pass in the property name so that the resolver can // discover foreign key (id) properties.	WITHOUT_CLASSIFICATION	0.9999746549302908	WITHOUT_CLASSIFICATION	2.5345069709158875E-5	DESIGN
// If the propertyType is null and there isn't a parent, just // stop now... there was a problem resolving the node anyway.	WITHOUT_CLASSIFICATION	0.9999284467243285	WITHOUT_CLASSIFICATION	7.155327567159483E-5	DESIGN
//We do not look for an existing join on the same path, because //it makes sense to join twice on the same collection role	WITHOUT_CLASSIFICATION	0.9632751742085247	WITHOUT_CLASSIFICATION	0.03672482579147538	DESIGN
// our parent is another dot node, meaning we are being further dereferenced. // thus we need to generate a join unless the parent refers to the associated // entity's PK (because 'our' table would know the FK).	WITHOUT_CLASSIFICATION	0.9984136104072038	WITHOUT_CLASSIFICATION	0.0015863895927961983	DESIGN
/*public final Currency getCurrency(int col) throws HibernateException {	WITHOUT_CLASSIFICATION	0.9942689970989759	WITHOUT_CLASSIFICATION	0.0057310029010241926	DESIGN
// here, we have two possibilities: // 	WITHOUT_CLASSIFICATION	0.9998027757299588	WITHOUT_CLASSIFICATION	1.972242700412612E-4	DESIGN
// Set the unresolved path in this node and the parent. // Set the text for the parent.	WITHOUT_CLASSIFICATION	0.9994777666270088	WITHOUT_CLASSIFICATION	5.222333729912311E-4	DESIGN
// Get the first child to be considered.  Sub-classes may do this differently in order to skip nodes that // are not select expressions (e.g. DISTINCT).	WITHOUT_CLASSIFICATION	0.9973166311554734	WITHOUT_CLASSIFICATION	0.002683368844526524	DESIGN
// If this is an entity and the property is the identifier property, then use getIdentifierType(). //      Note that the propertyName.equals( propertyPath ) checks whether we have a component //      key reference, where the component class property name is the same as the //      entity id property name; if the two are not equal, this is the case and //      we'd need to "fall through" to using the property mapping.	WITHOUT_CLASSIFICATION	0.9998626160253444	WITHOUT_CLASSIFICATION	1.3738397465558062E-4	DESIGN
// for a subquery, the alias to use depends on a few things (we // already know this is not an overall SELECT): //      1) if this FROM_ELEMENT represents a correlation to the //          outer-most query //              A) if the outer query represents a multi-table //                  persister, we need to use the given alias //                  in anticipation of one of the multi-table //                  executors being used (as this subquery will //                  actually be used in the "id select" phase //                  of that multi-table executor) //              B) otherwise, we need to use the persister's //                  table name as the column qualification //      2) otherwise (not correlated), use the given alias	WITHOUT_CLASSIFICATION	0.9923279126073972	WITHOUT_CLASSIFICATION	0.007672087392602729	DESIGN
// Not a collection? // Return the entity property mapping.	WITHOUT_CLASSIFICATION	0.9998969988190222	WITHOUT_CLASSIFICATION	1.0300118097782681E-4	DESIGN
// collection of <many-to-any/> mappings... // used to circumvent the component-collection check below...	WITHOUT_CLASSIFICATION	0.9984537650677273	WITHOUT_CLASSIFICATION	0.0015462349322727148	DESIGN
// Otherwise, the destination node was implied by the FROM clause and the FROM clause processor // will automatically add it in the right place.	WITHOUT_CLASSIFICATION	0.9992524012794788	WITHOUT_CLASSIFICATION	7.475987205212039E-4	DESIGN
// If the first identifier in the path referrs to the class alias (not the class name), then this // is a correlated subselect.  If it's a correlated sub-select, use the existing table alias.  Otherwise // generate a new one.	WITHOUT_CLASSIFICATION	0.9927549148781984	WITHOUT_CLASSIFICATION	0.007245085121801505	DESIGN
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9996736561861218	WITHOUT_CLASSIFICATION	3.263438138782277E-4	DESIGN
// An ident node can represent an index expression if the ident // represents a naked property ref //      *Note: this makes the assumption (which is currently the case //      in the hql-sql grammar) that the ident is first resolved //      itself (addrExpr -> resolve()).  The other option, if that //      changes, is to call resolve from here; but it is //      currently un-needed overhead.	WITHOUT_CLASSIFICATION	0.999974902685482	WITHOUT_CLASSIFICATION	2.509731451813838E-5	DESIGN
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.906984876924434	WITHOUT_CLASSIFICATION	0.09301512307556602	DESIGN
// If this is an implied join in a FROM clause, then use ANSI-style joining, and set the // flag on the FromElement that indicates that it was implied in the FROM clause itself.	WITHOUT_CLASSIFICATION	0.9943189855813749	WITHOUT_CLASSIFICATION	0.00568101441862501	DESIGN
//	WITHOUT_CLASSIFICATION	0.9997612566512477	WITHOUT_CLASSIFICATION	2.3874334875219311E-4	DESIGN
// For an explicit many-to-many relationship, add a second join from the intermediate  // (many-to-many) table to the destination table.  Also, make sure that the from element's  // idea of the destination is the destination table.	WITHOUT_CLASSIFICATION	0.9999220133285096	WITHOUT_CLASSIFICATION	7.798667149034676E-5	DESIGN
// Reset the node type, because the rest of the system is expecting FROM_FRAGMENT, all we wanted was // for the factory to create the right sub-class.  This might get reset again later on anyway to make the // SQL generation simpler.	WITHOUT_CLASSIFICATION	0.6527183688309739	WITHOUT_CLASSIFICATION	0.3472816311690261	DESIGN
//explicit = true;	WITHOUT_CLASSIFICATION	0.9998794135704671	WITHOUT_CLASSIFICATION	1.2058642953284721E-4	DESIGN
//sqlResultTypeList.add( type ); // Generate the select expression.	WITHOUT_CLASSIFICATION	0.9994710464632548	WITHOUT_CLASSIFICATION	5.289535367452033E-4	DESIGN
// If the expression list has exactly one expression, and the type of the expression is a collection // then this might be a collection function, such as index(c) or size(c).	WITHOUT_CLASSIFICATION	0.9898091930462395	WITHOUT_CLASSIFICATION	0.010190806953760503	DESIGN
// Need to parse off the column qualifiers; this is assuming (which is true as of now) // that this is only used from update and delete HQL statement parsing	WITHOUT_CLASSIFICATION	0.9998346756544483	WITHOUT_CLASSIFICATION	1.6532434555177714E-4	DESIGN
// for regression testing against output from the old parser... // found it easiest to simply reorder the FromElements here into ascending order // in terms of injecting them into the resulting sql ast in orders relative to those // expected by the old parser; this is definitely another of those "only needed // for regression purposes".  The SyntheticAndFactory, then, simply injects them as it // encounters them.	WITHOUT_CLASSIFICATION	0.9976431780789546	WITHOUT_CLASSIFICATION	0.0023568219210453748	DESIGN
// The uber-rule here is that we need to include  subclass joins if // the FromElement is in any way dereferenced by a property from // the subclass table; otherwise we end up with column references // qualified by a non-existent table reference in the resulting SQL...	WITHOUT_CLASSIFICATION	0.9779820835760678	WITHOUT_CLASSIFICATION	0.02201791642393221	DESIGN
// classic translator does not support collection of ordinal // param metadata	WITHOUT_CLASSIFICATION	0.971483297013637	WITHOUT_CLASSIFICATION	0.028516702986362958	DESIGN
// The following variables are stacks that keep information about each subexpression // in the list of nested subexpressions we are currently processing.	WITHOUT_CLASSIFICATION	0.9994640131504924	WITHOUT_CLASSIFICATION	5.359868495075944E-4	DESIGN
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999981021651931	WITHOUT_CLASSIFICATION	1.8978348067683854E-6	DESIGN
// should not be able to reach last without maxPosition being set // unless there are no results	WITHOUT_CLASSIFICATION	0.9989612653344396	WITHOUT_CLASSIFICATION	0.00103873466556037	DESIGN
// we found it in the temp PC.  Should indicate we are in the midst of processing a result set // containing eager fetches via join fetch	WITHOUT_CLASSIFICATION	0.9997924062511562	WITHOUT_CLASSIFICATION	2.075937488438285E-4	DESIGN
//do not use proxiesByKey, since not all //proxies that point to this session's //instances are in that collection!	WITHOUT_CLASSIFICATION	0.9937709585213894	WITHOUT_CLASSIFICATION	0.006229041478610611	DESIGN
// if there is no TM configured, we will not be able to access // the javax.transaction.Transaction object in order to // register a synch anyway.	WITHOUT_CLASSIFICATION	0.9954520369633189	WITHOUT_CLASSIFICATION	0.004547963036681142	DESIGN
// Since the result set cursor is always left at the first // physical row after the "last processed", we need to jump // back one position to get the key value we are interested // in skipping	WITHOUT_CLASSIFICATION	0.9996841301774108	WITHOUT_CLASSIFICATION	3.1586982258925814E-4	DESIGN
//true if this is a query and we are loading multiple instances of the same collection role //otherwise this is a CollectionInitializer and we are loading up a single collection or batch	WITHOUT_CLASSIFICATION	0.8525533423498981	WITHOUT_CLASSIFICATION	0.14744665765010198	DESIGN
// we don't need to worry about existing version being uninitialized // because this block isn't called by a re-entrant load (re-entrant // loads _always_ have lock mode NONE)	WITHOUT_CLASSIFICATION	0.9492342779474339	WITHOUT_CLASSIFICATION	0.05076572205256621	DESIGN
// add temp entry so that the next step is circular-reference // safe - only needed because some types don't take proper // advantage of two-phase-load (esp. components)	WITHOUT_CLASSIFICATION	0.9993279204939974	WITHOUT_CLASSIFICATION	6.720795060024933E-4	DESIGN
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.997090264448884	WITHOUT_CLASSIFICATION	0.002909735551115977	DESIGN
// log a message about potential connection leaks	WITHOUT_CLASSIFICATION	0.9935344384776754	WITHOUT_CLASSIFICATION	0.006465561522324606	DESIGN
//	WITHOUT_CLASSIFICATION	0.9997612566512477	WITHOUT_CLASSIFICATION	2.3874334875219311E-4	DESIGN
// this has been shown to happen occasionally in rare cases // when using a transaction manager + transaction-timeout // where the timeout calls back through Hibernate's // registered transaction synchronization on a separate // "reaping" thread.  In cases where that reaping thread // executes through this block at the same time the main // application thread does we can get into situations where // these CMEs occur.  And though it is not "allowed" per-se, // the end result without handling it specifically is infinite // looping.  So here, we simply break the loop	WITHOUT_CLASSIFICATION	0.6605294824562995	WITHOUT_CLASSIFICATION	0.3394705175437006	DESIGN
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9981271315562171	WITHOUT_CLASSIFICATION	0.001872868443782857	DESIGN
// can't cache this stuff either (per-invocation) // we are given a map of user-alias -> lock mode // create a new map of sql-alias -> lock mode	WITHOUT_CLASSIFICATION	0.999020480173727	WITHOUT_CLASSIFICATION	9.795198262730633E-4	DESIGN
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns //getCollectionTable().createUniqueKey( getIdentifier().getConstraintColumns() );	WITHOUT_CLASSIFICATION	0.9893841365181935	WITHOUT_CLASSIFICATION	0.010615863481806475	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9989741977616803	WITHOUT_CLASSIFICATION	0.0010258022383196343	DESIGN
//isSet = collection.isSet(); //isSorted = collection.isSorted();	WITHOUT_CLASSIFICATION	0.9995619846384487	WITHOUT_CLASSIFICATION	4.380153615512357E-4	DESIGN
//lists, arrays //sets, maps, bags	WITHOUT_CLASSIFICATION	0.9941966385720307	WITHOUT_CLASSIFICATION	0.00580336142796934	DESIGN
// we finish all the "removes" first to take care of possible unique // constraints and so that we can take better advantage of batching	WITHOUT_CLASSIFICATION	0.9956475512896994	WITHOUT_CLASSIFICATION	0.004352448710300602	DESIGN
//use a combination of foreign key columns and pk columns, since //the ordering of removal and addition is not guaranteed when //a child moves from one parent to another	WITHOUT_CLASSIFICATION	0.9983987705696303	WITHOUT_CLASSIFICATION	0.0016012294303696024	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9989741977616803	WITHOUT_CLASSIFICATION	0.0010258022383196343	DESIGN
//information about properties of this class, //including inherited properties //(only really needed for updatable/insertable properties)	WITHOUT_CLASSIFICATION	0.978022313507788	WITHOUT_CLASSIFICATION	0.021977686492212028	DESIGN
// all this only really needs to consider properties // of this class, not its subclasses, but since we // are reusing code used for sequential selects, we // use the subclass closure	WITHOUT_CLASSIFICATION	0.9748188372308637	WITHOUT_CLASSIFICATION	0.0251811627691362	DESIGN
// Here we render the select column list based on the properties defined as being generated. // For partial component generation, we currently just re-select the whole component // rather than trying to handle the individual generated portions.	WITHOUT_CLASSIFICATION	0.9998085578894776	WITHOUT_CLASSIFICATION	1.914421105224193E-4	DESIGN
// this is the root (versioned) table, and we are using version-based // optimistic locking;  if we are not updating the version, also don't // check it (unless this is a "generated" version column)!	WITHOUT_CLASSIFICATION	0.9934189357397888	WITHOUT_CLASSIFICATION	0.006581064260211214	DESIGN
//optimistic-lock="all", include all updatable properties //optimistic-lock="dirty", include all properties we are updating this time	WITHOUT_CLASSIFICATION	0.9956542271380224	WITHOUT_CLASSIFICATION	0.004345772861977555	DESIGN
// this property belongs to the table, and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9953464596434912	WITHOUT_CLASSIFICATION	0.004653540356508835	DESIGN
// check to see if the connection is in auto-commit  // mode (no connection means aggressive connection // release outside a JTA transaction context, so MUST // be autocommit mode)	WITHOUT_CLASSIFICATION	0.9942080361251625	WITHOUT_CLASSIFICATION	0.0057919638748374505	DESIGN
// need to treat this as if it where optimistic-lock="all" (dirty does *not* make sense); // first we need to locate the "loaded" state // // Note, it potentially could be a proxy, so perform the location the safe way...	WITHOUT_CLASSIFICATION	0.689190922989158	WITHOUT_CLASSIFICATION	0.31080907701084215	DESIGN
// we *always* assume an instance with a null // identifier or no identifier property is unsaved!	WITHOUT_CLASSIFICATION	0.9988662155835363	WITHOUT_CLASSIFICATION	0.0011337844164636427	DESIGN
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.9942955181664398	WITHOUT_CLASSIFICATION	0.00570448183356021	DESIGN
//allow any identifier quoted with backtick //only recognizes identifiers beginning with a letter	WITHOUT_CLASSIFICATION	0.9961372764112844	WITHOUT_CLASSIFICATION	0.0038627235887157135	DESIGN
//following doesn't handle (null, not null) but unnecessary //since this would mean all rows	WITHOUT_CLASSIFICATION	0.9839725040533386	WITHOUT_CLASSIFICATION	0.016027495946661426	DESIGN
// IMPL NOTE : due to the delayed population of setters (setters cached // 	WITHOUT_CLASSIFICATION	0.9997092167522129	WITHOUT_CLASSIFICATION	2.9078324778715394E-4	DESIGN
// we need to dirty check collections, since they can cause an owner // version number increment	WITHOUT_CLASSIFICATION	0.9977039815520165	WITHOUT_CLASSIFICATION	0.002296018447983585	DESIGN
//return the id, so we can use it to reset the proxy id //return result;	WITHOUT_CLASSIFICATION	0.9995322709727368	WITHOUT_CLASSIFICATION	4.677290272631355E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9997612566512477	WITHOUT_CLASSIFICATION	2.3874334875219311E-4	DESIGN
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9996722547552489	WITHOUT_CLASSIFICATION	3.2774524475112876E-4	DESIGN
// We now have the value of the property-ref we reference.  However, // we need to dig a little deeper, as that property might also be // an entity type, in which case we need to resolve its identitifier	WITHOUT_CLASSIFICATION	0.9999599940749098	WITHOUT_CLASSIFICATION	4.000592509017882E-5	DESIGN
// Retrieve the value of the designated column in the current row of this // ResultSet object as a java.io.Reader object	WITHOUT_CLASSIFICATION	0.9991442232306139	WITHOUT_CLASSIFICATION	8.55776769386092E-4	DESIGN
//not absolutely necessary, but helps for some //equals()/hashCode() implementations	WITHOUT_CLASSIFICATION	0.989790780294855	WITHOUT_CLASSIFICATION	0.010209219705145081	DESIGN
//this should be a call to resolve(), not resolveIdentifier(),  //'cos it might be a property-ref, and we did not cache the //referenced value	WITHOUT_CLASSIFICATION	0.964689685986057	WITHOUT_CLASSIFICATION	0.03531031401394298	DESIGN
// If we have <tt>not-found="ignore"</tt> association mapped to a // formula, we always need to dirty check it, so we can update the // second-level cache	WITHOUT_CLASSIFICATION	0.9999310121655921	WITHOUT_CLASSIFICATION	6.898783440785517E-5	DESIGN
// can't just return null here, since that would // cause an owning component to become null	WITHOUT_CLASSIFICATION	0.9989883432494615	WITHOUT_CLASSIFICATION	0.0010116567505385034	DESIGN
//for arrays, replaceElements() may return a different reference, since //the array length might not match	WITHOUT_CLASSIFICATION	0.9933394143303726	WITHOUT_CLASSIFICATION	0.006660585669627358	DESIGN
// actual cache of the entries.  soft references are used for both the keys and the // values here since the values pertaining to the MRU entries are kept in a // seperate hard reference cache (to avoid their enqueuement/garbage-collection).	WITHOUT_CLASSIFICATION	0.9996513086800936	WITHOUT_CLASSIFICATION	3.486913199063711E-4	DESIGN
// as soon as we encounter our first letter, return the substring // from that position	WITHOUT_CLASSIFICATION	0.9987125609665882	WITHOUT_CLASSIFICATION	0.0012874390334118439	DESIGN
// Note : expected in the syntax: //      type=listenerClass //          ({sep}type=listenerClass)* // where {sep} is any whitespace or comma	WITHOUT_CLASSIFICATION	0.999545155124817	WITHOUT_CLASSIFICATION	4.548448751831004E-4	DESIGN
// isTransactionCallbackRegistered denotes whether any Hibernate // Transaction has registered as a callback against this // JDBCContext; only one such callback is allowed.  Directly // serializing this value causes problems with JDBCTransaction, // or really any Transaction impl where the callback is local // to the Transaction instance itself, since that Transaction // is not serialized along with the JDBCContext.  Thus we // handle that fact here explicitly...	WITHOUT_CLASSIFICATION	0.988633775917827	WITHOUT_CLASSIFICATION	0.011366224082172995	DESIGN
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9591218026507837	WITHOUT_CLASSIFICATION	0.040878197349216244	DESIGN
// We call getKeyFromResultSet() here so that we can know the // key value upon which to perform the breaking logic.  However, // it is also then called from getRowFromResultSet() which is certainly // not the most efficient.  But the call here is needed, and there // currently is no other way without refactoring of the doQuery()/getRowFromResultSet() // methods	WITHOUT_CLASSIFICATION	0.9957875689533509	WITHOUT_CLASSIFICATION	0.004212431046649135	DESIGN
// This check is needed since processing leaves the cursor // after the last physical row for the current logical row; // thus if we are after the last physical row, this might be // caused by either: //      1) scrolling to the last logical row //      2) scrolling past the last logical row // In the latter scenario, the previous logical row // really is the last logical row. // // In all other cases, we should process back two // logical records (the current logic row, plus the // previous logical row).	WITHOUT_CLASSIFICATION	0.610959709592324	WITHOUT_CLASSIFICATION	0.38904029040767596	DESIGN
// and perform the load	WITHOUT_CLASSIFICATION	0.9998750896158954	WITHOUT_CLASSIFICATION	1.249103841044953E-4	DESIGN
//important: reuse the same event instances for performance!	WITHOUT_CLASSIFICATION	0.9973593285397125	WITHOUT_CLASSIFICATION	0.002640671460287536	DESIGN
//this is a query and we are loading multiple instances of the same collection role	WITHOUT_CLASSIFICATION	0.9081486037588559	WITHOUT_CLASSIFICATION	0.09185139624114405	DESIGN
// we found a collection element in the result set	WITHOUT_CLASSIFICATION	0.9963445174568573	WITHOUT_CLASSIFICATION	0.0036554825431426743	DESIGN
// we did not find a collection element in the result set, so we // ensure that a collection is created with the owner's identifier, // since what we have is an empty collection	WITHOUT_CLASSIFICATION	0.9985081573909838	WITHOUT_CLASSIFICATION	0.0014918426090162606	DESIGN
// this is a collection initializer, so we must create a collection // for each of the passed-in keys, to account for the possibility // that the collection is empty and has no rows in the result set	WITHOUT_CLASSIFICATION	0.976138719095823	WITHOUT_CLASSIFICATION	0.02386128090417696	DESIGN
// grab its state from the ResultSet and keep it in the Session // (but don't yet initialize the object itself) // note that we acquire LockMode.READ even if it was not requested	WITHOUT_CLASSIFICATION	0.9994544172543095	WITHOUT_CLASSIFICATION	5.455827456905508E-4	DESIGN
// a many-to-many; // decrement currentDepth here to allow join across the association table // without exceeding MAX_FETCH_DEPTH (i.e. the "currentDepth - 1" bit)	WITHOUT_CLASSIFICATION	0.9416787683503564	WITHOUT_CLASSIFICATION	0.05832123164964367	DESIGN
// if not a composite key, use "foo in (?, ?, ?)" for batching // if no batch, and not a composite key, use "foo = ?"	WITHOUT_CLASSIFICATION	0.9995943051142822	WITHOUT_CLASSIFICATION	4.056948857178518E-4	DESIGN
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999170870309892	WITHOUT_CLASSIFICATION	8.291296901077092E-5	DESIGN
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9823350911709045	WITHOUT_CLASSIFICATION	0.01766490882909552	DESIGN
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9823350911709045	WITHOUT_CLASSIFICATION	0.01766490882909552	DESIGN
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.9875729390979099	WITHOUT_CLASSIFICATION	0.012427060902090127	DESIGN
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9995517138562019	WITHOUT_CLASSIFICATION	4.4828614379812445E-4	DESIGN
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9994036898588091	WITHOUT_CLASSIFICATION	5.963101411908303E-4	DESIGN
/**	WITHOUT_CLASSIFICATION	0.5935609611320364	DESIGN	0.4064390388679638	WITHOUT_CLASSIFICATION
// ignore	WITHOUT_CLASSIFICATION	0.9994308494376155	WITHOUT_CLASSIFICATION	5.691505623845223E-4	DESIGN
// ignore	WITHOUT_CLASSIFICATION	0.9994308494376155	WITHOUT_CLASSIFICATION	5.691505623845223E-4	DESIGN
//        }	WITHOUT_CLASSIFICATION	0.9995559967917608	WITHOUT_CLASSIFICATION	4.4400320823928725E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9997612566512477	WITHOUT_CLASSIFICATION	2.3874334875219311E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9997612566512477	WITHOUT_CLASSIFICATION	2.3874334875219311E-4	DESIGN
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9976199414092857	WITHOUT_CLASSIFICATION	0.0023800585907142262	DESIGN
//	WITHOUT_CLASSIFICATION	0.9997612566512477	WITHOUT_CLASSIFICATION	2.3874334875219311E-4	DESIGN
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.9998418531953848	WITHOUT_CLASSIFICATION	1.5814680461519295E-4	DESIGN
// at this point we have (drivingSqlAlias) the SQL alias of the driving table // corresponding to the given user alias.  However, the driving table is not // (necessarily) the table against which we want to apply locks.  Mainly, // the exception case here is joined-subclass hierarchies where we instead // want to apply the lock against the root table (for all other strategies, // it just happens that driving and root are the same).	WITHOUT_CLASSIFICATION	0.9993636687470765	WITHOUT_CLASSIFICATION	6.363312529235292E-4	DESIGN
// the column doesnt exist at all.	WITHOUT_CLASSIFICATION	0.999547549448383	WITHOUT_CLASSIFICATION	4.524505516169498E-4	DESIGN
// we have a mapped identifier property and the root of // the incoming property path matched that identifier // property	WITHOUT_CLASSIFICATION	0.9998997712396347	WITHOUT_CLASSIFICATION	1.0022876036528758E-4	DESIGN
// we have an embedded composite identifier	WITHOUT_CLASSIFICATION	0.9993405221402517	WITHOUT_CLASSIFICATION	6.594778597482119E-4	DESIGN
// both many-to-one and one-to-one are represented as a // Property.  EntityPersister is relying on this value to // determine "lazy fetch groups" in terms of field-level // interception.  So we need to make sure that we return // true here for the case of many-to-one and one-to-one // with lazy="no-proxy" // // * impl note - lazy="no-proxy" currently forces both // lazy and unwrap to be set to true.  The other case we // are extremely interested in here is that of lazy="proxy" // where lazy is set to true, but unwrap is set to false. // thus we use both here under the assumption that this // return is really only ever used during persister // construction to determine the lazy property/field fetch // groupings.  If that assertion changes then this check // needs to change as well.  Partially, this is an issue with // the overloading of the term "lazy" here...	WITHOUT_CLASSIFICATION	0.9812467807210423	WITHOUT_CLASSIFICATION	0.018753219278957647	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9990377782588706	WITHOUT_CLASSIFICATION	9.622217411293672E-4	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9990377782588706	WITHOUT_CLASSIFICATION	9.622217411293672E-4	DESIGN
/*rootTableName = persistentClass.getRootTable().getQualifiedName( 	WITHOUT_CLASSIFICATION	0.9995619846384487	WITHOUT_CLASSIFICATION	4.380153615512357E-4	DESIGN
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9997037504389661	WITHOUT_CLASSIFICATION	2.962495610339991E-4	DESIGN
// Custom sql	WITHOUT_CLASSIFICATION	0.9997037504389661	WITHOUT_CLASSIFICATION	2.962495610339991E-4	DESIGN
/*protected void initPropertyPaths(	WITHOUT_CLASSIFICATION	0.9978786537437264	WITHOUT_CLASSIFICATION	0.0021213462562734704	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992082377773907	WITHOUT_CLASSIFICATION	7.917622226092409E-4	DESIGN
//Custom SQL (would be better if these were private)	WITHOUT_CLASSIFICATION	0.9509565379643775	WITHOUT_CLASSIFICATION	0.04904346203562239	DESIGN
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.988261651488865	WITHOUT_CLASSIFICATION	0.01173834851113493	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992082377773907	WITHOUT_CLASSIFICATION	7.917622226092409E-4	DESIGN
// aliases for identifier ( alias.id ); skip if the entity defines a non-id property named 'id'	WITHOUT_CLASSIFICATION	0.9998628520686967	WITHOUT_CLASSIFICATION	1.3714793130318106E-4	DESIGN
//decide which ResultSet to get the property value from:	WITHOUT_CLASSIFICATION	0.9995757412809146	WITHOUT_CLASSIFICATION	4.242587190853834E-4	DESIGN
//note: it is conceptually possible that a UserType could map null to //	WITHOUT_CLASSIFICATION	0.9946748990807706	WITHOUT_CLASSIFICATION	0.005325100919229441	DESIGN
// the contract of EntityTuplizer.determineConcreteSubclassEntityName says that returning null // is an indication that the specified entity-name (this.getEntityName) should be used.	WITHOUT_CLASSIFICATION	0.9933855713483026	WITHOUT_CLASSIFICATION	0.0066144286516974255	DESIGN
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.9942955181664398	WITHOUT_CLASSIFICATION	0.00570448183356021	DESIGN
// cache these since they are stateless // this one could even be static...	WITHOUT_CLASSIFICATION	0.9621258859935637	WITHOUT_CLASSIFICATION	0.037874114006436324	DESIGN
//"as" is not in KEYWORDS	WITHOUT_CLASSIFICATION	0.9986129387714768	WITHOUT_CLASSIFICATION	0.0013870612285232602	DESIGN
// --Commented out by Inspection (12/4/04 9:10 AM): public abstract void addCondition(String alias, String[] columns, String condition);	WITHOUT_CLASSIFICATION	0.9884036830320257	WITHOUT_CLASSIFICATION	0.011596316967974255	DESIGN
//use the id column alias	WITHOUT_CLASSIFICATION	0.9997725600290178	WITHOUT_CLASSIFICATION	2.2743997098213824E-4	DESIGN
//private List aliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.999721839288529	WITHOUT_CLASSIFICATION	2.7816071147098587E-4	DESIGN
//columns.add(columnName); //aliases.add(tableAlias);	WITHOUT_CLASSIFICATION	0.9968940233176451	WITHOUT_CLASSIFICATION	0.0031059766823548695	DESIGN
//where fragment must be empty!	WITHOUT_CLASSIFICATION	0.987200351228314	WITHOUT_CLASSIFICATION	0.012799648771686089	DESIGN
// revert to traditional hibernate behavior of setting initialPoolSize to minPoolSize // unless otherwise specified with a c3p0.*-style parameter.	WITHOUT_CLASSIFICATION	0.9982849227714343	WITHOUT_CLASSIFICATION	0.0017150772285655803	DESIGN
//arbitrary on clause ignored!!	WITHOUT_CLASSIFICATION	0.9963494428986293	WITHOUT_CLASSIFICATION	0.0036505571013706996	DESIGN
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9866535468935004	WITHOUT_CLASSIFICATION	0.013346453106499546	DESIGN
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9866535468935004	WITHOUT_CLASSIFICATION	0.013346453106499546	DESIGN
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9971018633965416	WITHOUT_CLASSIFICATION	0.0028981366034584962	DESIGN
// Essentially: // 1) If we have a local (Hibernate) transaction in progress //      and it already has the UserTransaction cached, use that //      UserTransaction to determine the status. // 2) If a transaction manager has been located, use //      that transaction manager to determine the status. // 3) Finally, as the last resort, try to lookup the //      UserTransaction via JNDI and use that to determine the //      status.	WITHOUT_CLASSIFICATION	0.997710078311599	WITHOUT_CLASSIFICATION	0.0022899216884010557	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.9988361658907539	WITHOUT_CLASSIFICATION	0.0011638341092461385	DESIGN
//swallow it (the transaction _was_ successful or successfully rolled back)	WITHOUT_CLASSIFICATION	0.9972936929508849	WITHOUT_CLASSIFICATION	0.0027063070491149814	DESIGN
// ignore it	WITHOUT_CLASSIFICATION	0.9995323051965225	WITHOUT_CLASSIFICATION	4.6769480347750013E-4	DESIGN
// we need to dirty check many-to-ones with not-found="ignore" in order  // to update the cache (not the database), since in this case a null // entity reference can lose information	WITHOUT_CLASSIFICATION	0.982958278351168	WITHOUT_CLASSIFICATION	0.01704172164883196	DESIGN
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999058381147014	WITHOUT_CLASSIFICATION	9.41618852985978E-5	DESIGN
// Regions can get instantiated in the course of normal work (e.g. // a named query region will be created the first time the query is // executed), so suspend any ongoing tx	WITHOUT_CLASSIFICATION	0.9986287768184703	WITHOUT_CLASSIFICATION	0.0013712231815296671	DESIGN
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9988789583438549	WITHOUT_CLASSIFICATION	0.0011210416561451121	DESIGN
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9996795503776574	WITHOUT_CLASSIFICATION	3.204496223425334E-4	DESIGN
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.981695825311179	WITHOUT_CLASSIFICATION	0.018304174688820955	DESIGN
// NOTE : this is being used from the process of shutting down a // SessionFactory. Specific things to consider: // (1) this clearing of the region should not propagate to // other nodes on the cluster (if any); this is the // cache-mode-local option bit... // (2) really just trying a best effort to cleanup after // ourselves; lock failures, etc are not critical here; // this is the fail-silently option bit...	WITHOUT_CLASSIFICATION	0.9698241017813324	WITHOUT_CLASSIFICATION	0.03017589821866762	DESIGN
// need to extract the component values and check for subtype replacements...	WITHOUT_CLASSIFICATION	0.9997193963102076	WITHOUT_CLASSIFICATION	2.806036897924264E-4	DESIGN
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9981864212454352	WITHOUT_CLASSIFICATION	0.0018135787545647867	DESIGN
// for now, just "re-flatten" the metamodel since this is temporary stuff anyway (HHH-1907)	WITHOUT_CLASSIFICATION	0.9451535789717151	WITHOUT_CLASSIFICATION	0.05484642102828478	DESIGN
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9994866579764846	WITHOUT_CLASSIFICATION	5.133420235153667E-4	DESIGN
//This solution would allow us to eliminate the owner arg to disassemble(), but //what if the collection was null, and then later had elements added? seems unsafe //session.getPersistenceContext().getCollectionEntry( (PersistentCollection) value ).getKey();	WITHOUT_CLASSIFICATION	0.7617122136453629	WITHOUT_CLASSIFICATION	0.23828778635463704	DESIGN
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9998593701478642	WITHOUT_CLASSIFICATION	1.4062985213577307E-4	DESIGN
// some collections are not lazy:	WITHOUT_CLASSIFICATION	0.998658956659708	WITHOUT_CLASSIFICATION	0.0013410433402919176	DESIGN
// Here we don't want to suspend the tx. If we do: // 1) We might be caching query results that reflect uncommitted // changes. No tx == no WL on cache node, so other threads // can prematurely see those query results // 2) No tx == immediate replication. More overhead, plus we // spread issue #1 above around the cluster	WITHOUT_CLASSIFICATION	0.9944774998326521	WITHOUT_CLASSIFICATION	0.005522500167347956	DESIGN
// return the (fully resolved) identifier value, but do not resolve // to the actual referenced entity instance // NOTE: the owner of the association is not really the owner of the id!	WITHOUT_CLASSIFICATION	0.9999384214235423	WITHOUT_CLASSIFICATION	6.157857645773545E-5	DESIGN
// Add a zero (or quite low) timeout option so we don't block. // Ignore any TimeoutException. Basically we forego caching the // query result in order to avoid blocking. // Reads are done with suspended tx, so they should not hold the // lock for long.  Not caching the query result is OK, since // any subsequent read will just see the old result with its // out-of-date timestamp; that result will be discarded and the // db query performed again.	WITHOUT_CLASSIFICATION	0.9950515779976922	WITHOUT_CLASSIFICATION	0.004948422002307807	DESIGN
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9996173058897685	WITHOUT_CLASSIFICATION	3.82694110231552E-4	DESIGN
// We have the JBCWriteMutex, so no other *local* thread will  // be trying to write this key.  // It's possible here some remote thread has come in and // changed the values again, but since we are reading the // values to write to JBC right now, we know we are writing // the latest values; i.e. we don't assume that what we cached // in entry.update() above is what we should write to JBC *now*. // Our write could be redundant, i.e. we are writing what // some remote thread just came in an wrote.  There is a chance  // that yet another remote thread will update us, and we'll then // overwrite that later data in JBC.  But, all remote nodes will // ignore that change in their localCache; the only place it  // will live will be in JBC, where it can only effect the  // initial state transfer values on newly joined nodes  // (i.e. populateLocalCache()).	WITHOUT_CLASSIFICATION	0.9991442252479175	WITHOUT_CLASSIFICATION	8.557747520824725E-4	DESIGN
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9970787435526673	WITHOUT_CLASSIFICATION	0.0029212564473327335	DESIGN
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9970787435526673	WITHOUT_CLASSIFICATION	0.0029212564473327335	DESIGN
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9926080961331839	WITHOUT_CLASSIFICATION	0.007391903866816104	DESIGN
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9304838152312327	WITHOUT_CLASSIFICATION	0.06951618476876732	DESIGN
// we need to obtain the lock before any actions are // executed, since this may be an inverse="true" // bidirectional association and it is one of the // earlier entity actions which actually updates // the database (this action is resposible for // second-level cache invalidation only)	WITHOUT_CLASSIFICATION	0.9590706498251508	WITHOUT_CLASSIFICATION	0.04092935017484924	DESIGN
//postDelete: // After actually deleting a row, record the fact that the instance no longer  // exists on the database (needed for identity-column key generation), and // remove it from the session cache	WITHOUT_CLASSIFICATION	0.9914897845704858	WITHOUT_CLASSIFICATION	0.008510215429514308	DESIGN
// intentionally empty	WITHOUT_CLASSIFICATION	0.9997253054825898	WITHOUT_CLASSIFICATION	2.746945174101682E-4	DESIGN
// todo : what else to do here?	DESIGN	0.9924776483018812	WITHOUT_CLASSIFICATION	0.007522351698118763	DESIGN
//put() has nowait semantics, is this really appropriate? //note that it needs to be async replication, never local or sync	DESIGN	0.7405331084306371	WITHOUT_CLASSIFICATION	0.25946689156936287	DESIGN
// 'hibernate.temp.use_jdbc_metadata_defaults' is a temporary magic value. // The need for it is intended to be alleviated with future developement, thus it is // not defined as an Environment constant... // // it is used to control whether we should consult the JDBC metadata to determine // certain Settings default values; it is useful to *not* do this when the database // may not be available (mainly in tools usage).	DESIGN	0.9817933770633057	DESIGN	0.018206622936694297	WITHOUT_CLASSIFICATION
//TODO: get SQL rendering out of this package!	DESIGN	0.744680059489087	WITHOUT_CLASSIFICATION	0.25531994051091295	DESIGN
//TODO: get SQL rendering out of this package!	DESIGN	0.744680059489087	WITHOUT_CLASSIFICATION	0.25531994051091295	DESIGN
// todo : eventually merge this with TreeCache and just add optional opt-lock support there.	DESIGN	0.9971864252993926	WITHOUT_CLASSIFICATION	0.002813574700607288	DESIGN
// can happen because of the multiple ways Cache.remove() // can be invoked :(	DESIGN	0.9996606056844778	WITHOUT_CLASSIFICATION	3.3939431552211296E-4	DESIGN
// work around the "feature" where tree cache is validating the // inserted node during the next transaction.  no idea...	DESIGN	0.9962912981761409	WITHOUT_CLASSIFICATION	0.003708701823859122	DESIGN
/**     * FIXME Per the RegionFactory class Javadoc, this constructor version     * should not be necessary.     *      * @param props The configuration properties     */	DESIGN	0.7281761413272855	WITHOUT_CLASSIFICATION	0.2718238586727146	DESIGN
/**     * FIXME Per the RegionFactory class Javadoc, this constructor version     * should not be necessary.     *      * @param props The configuration properties     */	DESIGN	0.7281761413272855	WITHOUT_CLASSIFICATION	0.2718238586727146	DESIGN
// FIXME Hacky workaround to JBCACHE-1202	DESIGN	0.5652462305180473	DESIGN	0.4347537694819526	WITHOUT_CLASSIFICATION
// FIXME Hacky workaround to JBCACHE-1202	DESIGN	0.5652462305180473	DESIGN	0.4347537694819526	WITHOUT_CLASSIFICATION
// TODO: I considered validating TS cache config here, // but decided to defer unti getTimestampsCacheInstance() in case the  // cache is never actually used	DESIGN	0.582019731059048	DESIGN	0.41798026894095197	WITHOUT_CLASSIFICATION
// TODO Is this a valid operation on a timestamps cache?	DESIGN	0.9991742767860325	DESIGN	8.257232139673193E-4	WITHOUT_CLASSIFICATION
// TODO Is this a valid operation on a timestamps cache?	DESIGN	0.9991742767860325	DESIGN	8.257232139673193E-4	WITHOUT_CLASSIFICATION
// TODO Why not use the timestamp in a DataVersion?	DESIGN	0.7910644829444266	DESIGN	0.20893551705557345	WITHOUT_CLASSIFICATION
// can happen because of the multiple ways Cache.remove() // can be invoked :(	DESIGN	0.9996606056844778	WITHOUT_CLASSIFICATION	3.3939431552211296E-4	DESIGN
// work around the "feature" where tree cache is validating the // inserted node during the next transaction. no idea...	DESIGN	0.997156353820782	WITHOUT_CLASSIFICATION	0.0028436461792179873	DESIGN
//swaldman 2004-02-07: modify to allow null values to signify fall through to c3p0 PoolConfig defaults	DESIGN	0.995971488056519	WITHOUT_CLASSIFICATION	0.004028511943480882	DESIGN
// turn hibernate.c3p0.* into c3p0.*, so c3p0 // gets a chance to see all hibernate.c3p0.*	DESIGN	0.9943773941228267	WITHOUT_CLASSIFICATION	0.005622605877173308	DESIGN
//TODO: this bit actually has to be called after all cascades! //      but since identity insert is called *synchronously*, //      instead of asynchronously as other actions, it isn't	DESIGN	0.8355580255499622	WITHOUT_CLASSIFICATION	0.16444197445003783	DESIGN
//TODO: reenable if we also fix the above todo	DESIGN	0.8147967559179244	WITHOUT_CLASSIFICATION	0.18520324408207553	DESIGN
//TODO: inefficient if that cache is just going to ignore the updated state!	DESIGN	0.9119139189731846	WITHOUT_CLASSIFICATION	0.08808608102681532	DESIGN
// we may be screwed here since the collection action is about to execute // and we do not know the final owner key value	DESIGN	0.9237030622868574	WITHOUT_CLASSIFICATION	0.07629693771314264	DESIGN
/** Create an action that will evict collection and entity regions based on queryspaces (table names).	DESIGN	0.9770479197385191	DESIGN	0.022952080261480955	WITHOUT_CLASSIFICATION
// todo : what else to do here?	DESIGN	0.9924776483018812	WITHOUT_CLASSIFICATION	0.007522351698118763	DESIGN
// todo : modify the class definition if not already transformed...	DESIGN	0.9998870382454107	WITHOUT_CLASSIFICATION	1.1296175458924926E-4	DESIGN
// todo : what else to do here?	DESIGN	0.9924776483018812	WITHOUT_CLASSIFICATION	0.007522351698118763	DESIGN
// this is called by SessionFactory irregardless; we just disregard here; // could also add a check to SessionFactory to only conditionally call start	DESIGN	0.9989767840309306	WITHOUT_CLASSIFICATION	0.0010232159690694899	DESIGN
// this is called by SessionFactory irregardless; we just disregard here; // could also add a check to SessionFactory to only conditionally call stop	DESIGN	0.9988576782303525	WITHOUT_CLASSIFICATION	0.0011423217696474694	DESIGN
//TODO: to handle concurrent writes correctly, this should return a Lock to the client	DESIGN	0.847455406610672	DESIGN	0.15254459338932794	WITHOUT_CLASSIFICATION
//put() has nowait semantics, is this really appropriate? //note that it needs to be async replication, never local or sync	DESIGN	0.7405331084306371	WITHOUT_CLASSIFICATION	0.25946689156936287	DESIGN
//TODO: to handle concurrent writes correctly, the client should pass in a Lock	DESIGN	0.6138430769639461	WITHOUT_CLASSIFICATION	0.3861569230360538	DESIGN
//TODO: assumes all collections disassemble to an array!	DESIGN	0.994969531378645	WITHOUT_CLASSIFICATION	0.005030468621355026	DESIGN
//TODO: reuse the PreLoadEvent	DESIGN	0.9953812176576863	WITHOUT_CLASSIFICATION	0.004618782342313778	DESIGN
// todo: this was added to support initializing an entity's EntityEntry snapshot during reattach; // this should be refactored to instead expose a method to assemble a EntityEntry based on this // state for return.	DESIGN	0.872005372630737	WITHOUT_CLASSIFICATION	0.127994627369263	DESIGN
// todo : what is the implication of this?	DESIGN	0.9983339617749925	WITHOUT_CLASSIFICATION	0.0016660382250076053	DESIGN
// use COUNT as the default.  This mimics the old behavior, although // NONE might be a better option moving forward in the case of callable	DESIGN	0.9825329276990552	WITHOUT_CLASSIFICATION	0.017467072300944842	DESIGN
/* TODO: joinKeyColumnName & foreignKeyColumnName should be called either here or at a	DESIGN	0.9925784704791929	DESIGN	0.007421529520807094	WITHOUT_CLASSIFICATION
//TODO: suck this into initLaziness!	DESIGN	0.5380145007189214	WITHOUT_CLASSIFICATION	0.4619854992810785	DESIGN
// we have to set up the table later!! yuck	DESIGN	0.9997832952956139	WITHOUT_CLASSIFICATION	2.1670470438602473E-4	DESIGN
//TODO: better to degrade to lazy="false" if uninstrumented	DESIGN	0.6149516246091955	DESIGN	0.38504837539080444	WITHOUT_CLASSIFICATION
// todo : again, how *should* this work for non-pojo entities?	DESIGN	0.997590056905331	WITHOUT_CLASSIFICATION	0.002409943094668931	DESIGN
// TODO: this is a bit of copy/paste from IndexedCollection.createPrimaryKey()	DESIGN	0.9774876547353911	DESIGN	0.022512345264608786	WITHOUT_CLASSIFICATION
// This inner class implements a case statement....perhaps im being a bit over-clever here	DESIGN	0.9793111630651332	WITHOUT_CLASSIFICATION	0.020688836934866783	DESIGN
//TODO: bad implementation, cos it depends upon ordering of mapping doc //      fixing this requires that Collection/PersistentClass gain access //      to the Mappings reference from Configuration (or the filterDefinitions //      map directly) sometime during Configuration.buildSessionFactory //      (after all the types/filter-defs are known and before building //      persisters).	DESIGN	0.947429950567084	WITHOUT_CLASSIFICATION	0.0525700494329159	DESIGN
//use of a stringbuffer to workaround a JDK bug	DESIGN	0.6001329738710166	WITHOUT_CLASSIFICATION	0.39986702612898334	DESIGN
// hack/workaround as sqlquery impl depend on having a key.	DESIGN	0.9997128536340931	WITHOUT_CLASSIFICATION	2.8714636590686433E-4	DESIGN
//FIXME: get the PersistentClass	DESIGN	0.9986904249703228	WITHOUT_CLASSIFICATION	0.0013095750296772404	DESIGN
//FIXME: get the PersistentClass	DESIGN	0.9986904249703228	WITHOUT_CLASSIFICATION	0.0013095750296772404	DESIGN
//Icky workaround for MySQL bug:	DESIGN	0.8470248228341667	WITHOUT_CLASSIFICATION	0.15297517716583336	DESIGN
//TODO: Somehow add the newly created foreign keys to the internal collection	DESIGN	0.686930736373888	WITHOUT_CLASSIFICATION	0.3130692636261119	DESIGN
//TODO possibly relax that	DESIGN	0.9990592102137883	WITHOUT_CLASSIFICATION	9.407897862116948E-4	DESIGN
//TODO possibly relax that	DESIGN	0.9990592102137883	WITHOUT_CLASSIFICATION	9.407897862116948E-4	DESIGN
//TODO possibly relax that	DESIGN	0.9990592102137883	WITHOUT_CLASSIFICATION	9.407897862116948E-4	DESIGN
//use of a stringbuffer to workaround a JDK bug	DESIGN	0.6001329738710166	WITHOUT_CLASSIFICATION	0.39986702612898334	DESIGN
//use a degenerated strategy for backward compatibility	DESIGN	0.9967402971247888	WITHOUT_CLASSIFICATION	0.0032597028752110956	DESIGN
// Sets can be just a view of a part of another collection. // do we need to copy it to be sure it won't be changing // underneath us? // ie. this.set.addAll(set);	DESIGN	0.9989701091996213	WITHOUT_CLASSIFICATION	0.0010298908003786873	DESIGN
//note that i parameter is now unused (delete it?)	DESIGN	0.9966749217955161	WITHOUT_CLASSIFICATION	0.003325078204483979	DESIGN
//just to help out during the load (ugly, i know)	DESIGN	0.9990715872130462	WITHOUT_CLASSIFICATION	9.284127869538093E-4	DESIGN
// TODO : safe to interpret "map.remove(key) == null" as non-dirty?	DESIGN	0.8050867825039512	WITHOUT_CLASSIFICATION	0.19491321749604876	DESIGN
// yick!  need this for proper serialization/deserialization handling...	DESIGN	0.9268235496219057	WITHOUT_CLASSIFICATION	0.07317645037809431	DESIGN
//TODO: get SQL rendering out of this package!	DESIGN	0.744680059489087	WITHOUT_CLASSIFICATION	0.25531994051091295	DESIGN
//TODO: get SQL rendering out of this package!	DESIGN	0.744680059489087	WITHOUT_CLASSIFICATION	0.25531994051091295	DESIGN
//yuck!	DESIGN	0.9990619244547406	WITHOUT_CLASSIFICATION	9.380755452593856E-4	DESIGN
//TODO: get SQL rendering out of this package!	DESIGN	0.744680059489087	WITHOUT_CLASSIFICATION	0.25531994051091295	DESIGN
// TODO : not sure this is correct, could not find docs on how to do this.	DESIGN	0.950409579392483	DESIGN	0.049590420607516957	WITHOUT_CLASSIFICATION
//HSQL has no Blob/Clob support .... but just put these here for now!	DESIGN	0.9769402976374072	WITHOUT_CLASSIFICATION	0.023059702362592777	DESIGN
// does this need holdlock also? : return tableName + " with (updlock, rowlock, holdlock)";	DESIGN	0.9843856965374631	WITHOUT_CLASSIFICATION	0.01561430346253681	DESIGN
// sql-server, at least needed this dropped after use; strange!	DESIGN	0.9987187288299959	WITHOUT_CLASSIFICATION	0.0012812711700041616	DESIGN
// todo : is there really any reason to kkeep trying if this fails once?	DESIGN	0.9997561688093077	WITHOUT_CLASSIFICATION	2.4383119069226568E-4	DESIGN
// TBD should this be varbinary($1)? //	DESIGN	0.9827153360431004	WITHOUT_CLASSIFICATION	0.017284663956899617	DESIGN
// is it necessary to register %exact since it can only appear in a where clause?	DESIGN	0.9963089612134677	WITHOUT_CLASSIFICATION	0.003691038786532363	DESIGN
// xmlforest requires a new kind of function constructor	DESIGN	0.9998086968472993	WITHOUT_CLASSIFICATION	1.9130315270064673E-4	DESIGN
// Does this dialect support the ALTER TABLE syntax?	DESIGN	0.99449299331224	WITHOUT_CLASSIFICATION	0.005507006687760049	DESIGN
// Do we need to qualify index names with the schema name?	DESIGN	0.9877161469394102	WITHOUT_CLASSIFICATION	0.012283853060589808	DESIGN
// Does this dialect support the UNIQUE column syntax?	DESIGN	0.9952776851351928	WITHOUT_CLASSIFICATION	0.00472231486480726	DESIGN
// Does this dialect support check constraints?	DESIGN	0.9925975455904992	WITHOUT_CLASSIFICATION	0.0074024544095009255	DESIGN
// Do we need to drop constraints before dropping tables in this dialect?	DESIGN	0.982506267970238	WITHOUT_CLASSIFICATION	0.01749373202976209	DESIGN
// Does this dialect support the FOR UPDATE syntax?	DESIGN	0.9943333814224113	WITHOUT_CLASSIFICATION	0.005666618577588705	DESIGN
// Does this dialect support the Oracle-style FOR UPDATE NOWAIT syntax?	DESIGN	0.9943333814224113	WITHOUT_CLASSIFICATION	0.005666618577588705	DESIGN
// Does this dialect support FOR UPDATE OF, allowing particular rows to be locked?	DESIGN	0.9697649673194709	WITHOUT_CLASSIFICATION	0.0302350326805291	DESIGN
//note there is a wierd implementation in the client side	DESIGN	0.9981182825588362	WITHOUT_CLASSIFICATION	0.0018817174411638617	DESIGN
//TODO: never reached, since getTypeName() actually throws an exception!	DESIGN	0.9809918100054165	WITHOUT_CLASSIFICATION	0.01900818999458359	DESIGN
// todo : should we additionally check the current isolation mode explicitly?	DESIGN	0.9987691817121742	WITHOUT_CLASSIFICATION	0.0012308182878257993	DESIGN
// todo : remove this and just have subclasses use Isolater/IsolatedWork directly...	DESIGN	0.9967762847969515	WITHOUT_CLASSIFICATION	0.003223715203048574	DESIGN
//TODO: should orphans really be deleted during lock???	DESIGN	0.7532000443200213	WITHOUT_CLASSIFICATION	0.24679995567997873	DESIGN
// orphans should not be deleted during merge??	DESIGN	0.9959985732770772	WITHOUT_CLASSIFICATION	0.00400142672292281	DESIGN
// orphans should not be deleted during copy??	DESIGN	0.9959985732770772	WITHOUT_CLASSIFICATION	0.00400142672292281	DESIGN
//I suppose?	DESIGN	0.9988361658907539	WITHOUT_CLASSIFICATION	0.0011638341092461385	DESIGN
//TODO: suck this logic into the collection!	DESIGN	0.8871150235433508	WITHOUT_CLASSIFICATION	0.11288497645664926	DESIGN
// TODO: an alternative is to check if the owner has changed; if it hasn't then // get the ID from collection.getOwner()	DESIGN	0.6456718453712911	WITHOUT_CLASSIFICATION	0.3543281546287088	DESIGN
//TODO:refactor + make this method private	DESIGN	0.9877709388965226	WITHOUT_CLASSIFICATION	0.012229061103477394	DESIGN
// todo : we can actually just determine this from the incoming EntityEntry-s	DESIGN	0.9978686175519272	WITHOUT_CLASSIFICATION	0.0021313824480727827	DESIGN
//TODO: Should this be an InitializeEntityEventListener??? (watch out for performance!)	DESIGN	0.5071229463035654	DESIGN	0.4928770536964347	WITHOUT_CLASSIFICATION
//TODO: better to pass the id in as an argument?	DESIGN	0.9745832143322328	WITHOUT_CLASSIFICATION	0.025416785667767165	DESIGN
// todo : potentially look at optimizing these two arrays	DESIGN	0.9986380208283862	WITHOUT_CLASSIFICATION	0.0013619791716138697	DESIGN
/* trim done to workaround stupid oracle bug that cant handle whitespaces before a { in a sp */	DESIGN	0.8179405342043925	WITHOUT_CLASSIFICATION	0.1820594657956075	DESIGN
/* trim done to workaround stupid oracle bug that cant handle whitespaces before a { in a sp */	DESIGN	0.8179405342043925	WITHOUT_CLASSIFICATION	0.1820594657956075	DESIGN
//TODO: temporary	DESIGN	0.6037344147856308	WITHOUT_CLASSIFICATION	0.3962655852143693	DESIGN
//TODO: not quite sure about the full implications of this!	DESIGN	0.8878506110761278	WITHOUT_CLASSIFICATION	0.11214938892387223	DESIGN
//TODO: not quite sure about the full implications of this!	DESIGN	0.8878506110761278	WITHOUT_CLASSIFICATION	0.11214938892387223	DESIGN
//TODO: ugly here:	DESIGN	0.6105262562676312	DESIGN	0.3894737437323687	WITHOUT_CLASSIFICATION
//this is kinda the best we can do...	DESIGN	0.988574648431652	WITHOUT_CLASSIFICATION	0.011425351568347994	DESIGN
//TODO: this needn't exclude subclasses...	DESIGN	0.7675549523899428	WITHOUT_CLASSIFICATION	0.23244504761005721	DESIGN
// todo : need map? the prob is a proper key, right?	DESIGN	0.9951842027853087	WITHOUT_CLASSIFICATION	0.0048157972146913655	DESIGN
// todo : i'd much rather have this done from #endLoadingCollection(CollectionPersister,LoadingCollectionEntry)...	DESIGN	0.9153097111698459	WITHOUT_CLASSIFICATION	0.08469028883015406	DESIGN
// todo : hack!!! // NOTE : here we cleanup the load context when we have no more local // LCE entries.  This "works" for the time being because really // only the collection load contexts are implemented.  Long term, // this cleanup should become part of the "close result set" // processing from the (sandbox/jdbc) jdbc-container code.	DESIGN	0.6475965716294506	WITHOUT_CLASSIFICATION	0.35240342837054944	DESIGN
// todo : should really move this log statement to CollectionType, where this is used from...	DESIGN	0.9671576781698447	WITHOUT_CLASSIFICATION	0.032842321830155306	DESIGN
// TODO : keep seperate notions of QT[] here for shallow/non-shallow queries...	DESIGN	0.753315520638182	DESIGN	0.24668447936181798	WITHOUT_CLASSIFICATION
// TODO : add this info to the translator and aggregate it here...	DESIGN	0.7953992609285447	WITHOUT_CLASSIFICATION	0.2046007390714553	DESIGN
//TODO: move into collection type, so we can use polymorphism!	DESIGN	0.8031309546500732	DESIGN	0.1968690453499267	WITHOUT_CLASSIFICATION
// todo : should we check the current isolation mode explicitly?	DESIGN	0.9987691817121742	WITHOUT_CLASSIFICATION	0.0012308182878257988	DESIGN
//TODO: suck into event class	DESIGN	0.955159440731012	WITHOUT_CLASSIFICATION	0.044840559268988105	DESIGN
//do we even really need this? the update will fail anyway....	DESIGN	0.9973454845393985	WITHOUT_CLASSIFICATION	0.002654515460601484	DESIGN
//hum ... should we cascade anyway? throw an exception? fine like it is?	DESIGN	0.8767775137594345	WITHOUT_CLASSIFICATION	0.12322248624056548	DESIGN
//TODO: would it be better to do a refresh from db?	DESIGN	0.9240135875424036	DESIGN	0.07598641245759646	WITHOUT_CLASSIFICATION
//TODO: we use two visitors here, inefficient!	DESIGN	0.9612466097322898	WITHOUT_CLASSIFICATION	0.038753390267710214	DESIGN
// this class has no proxies (so do a shortcut)	DESIGN	0.9964061982333864	WITHOUT_CLASSIFICATION	0.003593801766613592	DESIGN
//PostLoad is needed for EJB3 //TODO: reuse the PostLoadEvent...	DESIGN	0.9564039464790568	WITHOUT_CLASSIFICATION	0.04359605352094307	DESIGN
//TODO: put this stuff back in to read snapshot from //      the second-level cache (needs some extra work)	DESIGN	0.9717978695319173	WITHOUT_CLASSIFICATION	0.02820213046808273	DESIGN
// null or brand new collection // this will also (inefficiently) handle arrays, which have // no snapshot, so we can't do any better	DESIGN	0.7800408622084576	WITHOUT_CLASSIFICATION	0.2199591377915425	DESIGN
//TODO: is this 100% correct?	DESIGN	0.8995880319581879	WITHOUT_CLASSIFICATION	0.10041196804181203	DESIGN
// TODO: iteratively get transient entities and retry merge until one of the following conditions: //       1) transientCopyCache.size() == 0 //       2) transientCopyCache.size() is not decreasing and copyCache.size() is not increasing // TODO: find out if retrying can add entities to copyCache (don't think it can...) // For now, just retry once; throw TransientObjectException if there are still any transient entities	DESIGN	0.5312186089506091	DESIGN	0.4687813910493908	WITHOUT_CLASSIFICATION
// entity name will not be available for non-POJO entities // TODO: cache the entity name somewhere so that it is available to this exception	DESIGN	0.9607903733554367	DESIGN	0.039209626644563324	WITHOUT_CLASSIFICATION
//TODO: we should throw an exception if we really *know* for sure   //      that this is a detached instance, rather than just assuming //throw new StaleObjectStateException(entityName, id);	DESIGN	0.6920402022873705	DESIGN	0.3079597977126296	WITHOUT_CLASSIFICATION
// TODO : perhaps we should additionally require that the incoming entity // version be equivalent to the defined unsaved-value?	DESIGN	0.8682182663743507	DESIGN	0.13178173362564927	WITHOUT_CLASSIFICATION
// perhaps this should be an exception since it is only ever used // in the above method?	DESIGN	0.9987606262186802	WITHOUT_CLASSIFICATION	0.0012393737813197097	DESIGN
// Put a placeholder in entries, so we don't recurse back and try to save() the // same object again. QUESTION: should this be done before onSave() is called? // likewise, should it be done before onUpdate()?	DESIGN	0.8082957631260038	WITHOUT_CLASSIFICATION	0.19170423687399613	DESIGN
//TODO: merge into one method!	DESIGN	0.9437985649690542	WITHOUT_CLASSIFICATION	0.05620143503094573	DESIGN
//TODO: refactor to .sql package	DESIGN	0.6346041759390868	WITHOUT_CLASSIFICATION	0.36539582406091325	DESIGN
/** * Provides query splitting methods, which were originally in QueryTranslator. * <br> * TODO: This will need to be refactored at some point. * * @author josh */	DESIGN	0.9992194737635023	DESIGN	7.805262364977488E-4	WITHOUT_CLASSIFICATION
//TODO: this is one of the ugliest and most fragile pieces of code in Hibernate....	DESIGN	0.7488007894131304	DESIGN	0.2511992105868696	WITHOUT_CLASSIFICATION
// todo : temporary //      needed because currently persister is the one that //      creates and renders the join fragments for inheritence //      hierarchies...	DESIGN	0.9960790393063212	WITHOUT_CLASSIFICATION	0.003920960693678761	DESIGN
// TODO : better way?!?	DESIGN	0.7013431615310983	DESIGN	0.29865683846890173	WITHOUT_CLASSIFICATION
// Not possible to simply re-use the versionPropertyNode here as it causes // OOM errors due to circularity :(	DESIGN	0.999726830311036	WITHOUT_CLASSIFICATION	2.731696889640058E-4	DESIGN
//TODO:this is only needed during compilation .. can we eliminate the instvar?	DESIGN	0.9931060137547264	WITHOUT_CLASSIFICATION	0.006893986245273613	DESIGN
// TODO : this is a bit dodgy, come up with a better way to check this (plus see above comment)	DESIGN	0.9954362397165998	DESIGN	0.004563760283400292	WITHOUT_CLASSIFICATION
// even here, if only properties mapped to the "base table" are referenced // in the set and where clauses, this could be handled by the BasicDelegate. // TODO : decide if it is better performance-wise to perform that check, or to simply use the MultiTableUpdateDelegate	DESIGN	0.9957174334651482	DESIGN	0.004282566534851815	WITHOUT_CLASSIFICATION
//TODO: switch statements are always evil! We already had bugs because  //      of forgotten token types. Use polymorphism for this!	DESIGN	0.9932958570251759	WITHOUT_CLASSIFICATION	0.006704142974824193	DESIGN
// TODO : we really need to be able to deal with component paths here also; // this is difficult because the hql-sql grammar expects all those node types // to be FromReferenceNodes.  One potential fix here would be to convert the // IntoClause to just use a FromClause/FromElement combo (as a child of the // InsertStatement) and move all this logic into the InsertStatement.  That's // probably the easiest approach (read: least amount of changes to the grammar // and code), but just doesn't feel right as then an insert would contain // 2 from-clauses	DESIGN	0.9997754077803469	DESIGN	2.2459221965300634E-4	WITHOUT_CLASSIFICATION
// really there are two situations where it should be ok to allow the insertion // into properties defined on a superclass: //      1) union-subclass with an abstract root entity //      2) discrim-subclass // // #1 is handled already because of the fact that // UnionSubclassPersister alreay always returns 0 // for this call... // // we may want to disallow it for discrim-subclass just for // consistency-sake (currently does not work anyway)...	DESIGN	0.6473230165297088	DESIGN	0.3526769834702912	WITHOUT_CLASSIFICATION
//yuck!	DESIGN	0.9990619244547406	WITHOUT_CLASSIFICATION	9.380755452593856E-4	DESIGN
// implicit joins are always(?) ok to reuse	DESIGN	0.9985528124278648	WITHOUT_CLASSIFICATION	0.0014471875721352647	DESIGN
// TODO : we may also want to check that the types here map to exactly one column/JDBC-type //      can't think of a situation where arithmetic expression between multi-column mappings //      makes any sense.	DESIGN	0.9975462148519512	DESIGN	0.002453785148048755	WITHOUT_CLASSIFICATION
// we do not know either type //BLIND GUESS!	DESIGN	0.998589408951089	WITHOUT_CLASSIFICATION	0.0014105910489109015	DESIGN
//TODO: used to be exprNoParens! was this needed?	DESIGN	0.9998925369047725	DESIGN	1.0746309522742631E-4	WITHOUT_CLASSIFICATION
// TODO: Replace this with a more elegant solution.	DESIGN	0.9972792193100933	DESIGN	0.0027207806899067037	WITHOUT_CLASSIFICATION
// TODO: Should this really return null?  If not, figure out something better to do here.	DESIGN	0.573038802984085	WITHOUT_CLASSIFICATION	0.4269611970159148	DESIGN
//TODO: get SQL rendering out of this package!	DESIGN	0.744680059489087	WITHOUT_CLASSIFICATION	0.25531994051091295	DESIGN
// yuck!	DESIGN	0.9997612566512477	WITHOUT_CLASSIFICATION	2.3874334875219311E-4	DESIGN
// ignore it; the incoming property could not be found so we // cannot be sure what to do here.  At the very least, the // safest is to simply not apply any dereference toggling...	DESIGN	0.9227341938707438	WITHOUT_CLASSIFICATION	0.07726580612925617	DESIGN
// TODO : most of below was taken verbatim from DotNode; should either delegate this logic or super-type it	DESIGN	0.9643337138567493	DESIGN	0.0356662861432507	WITHOUT_CLASSIFICATION
// otherwise, a trim-specification and/or a trim-character // have been specified;  we need to decide which options // are present and "do the right thing" // should leading trim-characters be trimmed? // should trailing trim-characters be trimmed? // the trim-character // the trim-source	DESIGN	0.9415887703548079	WITHOUT_CLASSIFICATION	0.05841122964519201	DESIGN
// todo: we should really just collect these from the various SelectExpressions, rather than regenerating here	DESIGN	0.8671713951977962	WITHOUT_CLASSIFICATION	0.1328286048022038	DESIGN
//TODO: is this a bit ugly?	DESIGN	0.7834525609190163	WITHOUT_CLASSIFICATION	0.21654743908098378	DESIGN
// Need a better way to define the suffixes here...	DESIGN	0.9934440403298447	WITHOUT_CLASSIFICATION	0.006555959670155333	DESIGN
// TODO: something much better - look at the type of the other expression! // TODO: Have comparisonExpression and/or arithmeticExpression rules complete the resolution of boolean nodes.	DESIGN	0.980457610678368	DESIGN	0.019542389321632013	WITHOUT_CLASSIFICATION
// TODO : what amount of significant digits need to be supported here? //      - from the DecimalFormat docs: //          [significant digits] = [minimum integer digits] + [maximum fraction digits]	DESIGN	0.8990114661198806	DESIGN	0.10098853388011937	WITHOUT_CLASSIFICATION
// Needed the "clazz_" check to work around union-subclasses // TODO : is there a way to tell whether a persister is truly discrim-column based inheritence?	DESIGN	0.7162425080912268	DESIGN	0.2837574919087731	WITHOUT_CLASSIFICATION
//We should actually rework this class to not implement Parser //and just process path expressions in the most convenient way.	DESIGN	0.9060321636845557	WITHOUT_CLASSIFICATION	0.09396783631544432	DESIGN
//The class is now way to complex!	DESIGN	0.9985783168041154	WITHOUT_CLASSIFICATION	0.0014216831958846553	DESIGN
//TODO: get SQL rendering out of here	DESIGN	0.5860888949587819	WITHOUT_CLASSIFICATION	0.41391110504121814	DESIGN
//TODO: is there a better way?	DESIGN	0.5741230393314172	WITHOUT_CLASSIFICATION	0.42587696066858277	DESIGN
//Must be done here because of side-effect! yuck...	DESIGN	0.9667729313908234	WITHOUT_CLASSIFICATION	0.03322706860917662	DESIGN
//name from a super query (a bit inelegant that it shows up here)	DESIGN	0.9832736396645566	WITHOUT_CLASSIFICATION	0.01672636033544338	DESIGN
// We should reengineer this class so that, rather than the current ad - // hoc linear approach to processing a stream of tokens, we instead // build up a tree of expressions.	DESIGN	0.9511217986921623	WITHOUT_CLASSIFICATION	0.04887820130783783	DESIGN
// this is ugly here, but needed because its a subquery	DESIGN	0.9536795017840888	WITHOUT_CLASSIFICATION	0.04632049821591118	DESIGN
// unhappy about this being public ... is there a better way?	DESIGN	0.6911721625467345	DESIGN	0.30882783745326553	WITHOUT_CLASSIFICATION
// Make sure this is a defined parameter and check the incoming value type // TODO: what should be the actual exception type here?	DESIGN	0.997944732815404	DESIGN	0.0020552671845960806	WITHOUT_CLASSIFICATION
// TODO : this constructor form is *only* used from constructor directly below us; can it go away?	DESIGN	0.9889307969135135	DESIGN	0.011069203086486472	WITHOUT_CLASSIFICATION
//TODO: COPY/PASTE FROM SessionImpl, pull up!	DESIGN	0.9355241906248288	WITHOUT_CLASSIFICATION	0.06447580937517118	DESIGN
// TODO : should remove this exposure //  and have all references to the session's batcher use the ConnectionManager.	DESIGN	0.9672935385578858	DESIGN	0.03270646144211427	WITHOUT_CLASSIFICATION
// todo : should this get moved to PersistentContext? // logically, is PersistentContext the "thing" to which an interceptor gets attached?	DESIGN	0.9775649306482047	WITHOUT_CLASSIFICATION	0.022435069351795258	DESIGN
// TODO: what type?	DESIGN	0.6296021613487249	DESIGN	0.37039783865127507	WITHOUT_CLASSIFICATION
// todo : should seriously consider not allowing a txn to begin from a child session //      can always route the request to the root session...	DESIGN	0.995627624405719	WITHOUT_CLASSIFICATION	0.004372375594281049	DESIGN
// short-circuit for performance...	DESIGN	0.9984879164913381	WITHOUT_CLASSIFICATION	0.0015120835086618915	DESIGN
// not absolutely necessary, but does help with aggressive release	DESIGN	0.9933107692360603	WITHOUT_CLASSIFICATION	0.006689230763939693	DESIGN
// TODO : remove these last two as batcher is no longer managing connections	DESIGN	0.7782244834240912	DESIGN	0.22177551657590885	WITHOUT_CLASSIFICATION
//work around a bug in all known connection pools....	DESIGN	0.9872219502420692	WITHOUT_CLASSIFICATION	0.012778049757930806	DESIGN
// TODO : make this the factory for "entity mode related" sessions; // also means making this the target of transaction-synch and the // thing that knows how to cascade things between related sessions // // At that point, perhaps this thing is a "SessionContext", and // ConnectionManager is a "JDBCContext"?  A "SessionContext" should // live in the impl package...	DESIGN	0.9999958135684532	DESIGN	4.186431546785954E-6	WITHOUT_CLASSIFICATION
//TODO: does this really need to be here? //      does the collection already have //      it's own up-to-date snapshot?	DESIGN	0.9932233895181423	DESIGN	0.006776610481857751	WITHOUT_CLASSIFICATION
//TODO: the i==entitySpan-1 bit depends upon subclass implementation (very bad)	DESIGN	0.9262605193563395	WITHOUT_CLASSIFICATION	0.07373948064366057	DESIGN
/**	DESIGN	0.5935609611320364	DESIGN	0.4064390388679638	WITHOUT_CLASSIFICATION
// todo : add the notion of enabled filters to the CacheKey to differentiate filtered collections from non-filtered; //      but CacheKey is currently used for both collections and entities; would ideally need to define two seperate ones; //      currently this works in conjuction with the check on //      DefaultInitializeCollectionEventHandler.initializeCollectionFromCache() (which makes sure to not read from //      cache with enabled filters). // EARLY EXIT!!!!!	DESIGN	0.996739875173499	WITHOUT_CLASSIFICATION	0.003260124826500914	DESIGN
//for sets, we should end the collection load after resolving //the entities, since we might call hashCode() on the elements //TODO: or we could do this polymorphically, and have two //      different operations implemented differently for arrays	DESIGN	0.8118136722183191	DESIGN	0.18818632778168082	WITHOUT_CLASSIFICATION
//This is not very nice (and quite slow):	DESIGN	0.9043639874370389	WITHOUT_CLASSIFICATION	0.095636012562961	DESIGN
//use of trim() here is ugly?	DESIGN	0.9953311469934488	WITHOUT_CLASSIFICATION	0.004668853006551291	DESIGN
//TODO: this is too conservative; if all preceding joins were  //      also inner joins, we could use an inner join here	DESIGN	0.7687265000231659	WITHOUT_CLASSIFICATION	0.2312734999768342	DESIGN
//TODO: look at the owning property and check that it  //      isn't lazy (by instrumentation)	DESIGN	0.9959016899814594	WITHOUT_CLASSIFICATION	0.004098310018540531	DESIGN
//TODO: inefficient	DESIGN	0.9742675229706173	WITHOUT_CLASSIFICATION	0.02573247702938275	DESIGN
// why does this matter?	DESIGN	0.9977561358709033	WITHOUT_CLASSIFICATION	0.002243864129096758	DESIGN
// from the collection of associations, locate OJA for the // ManyToOne corresponding to this persister to fully // define the many-to-many; we need that OJA so that we can // use its alias here // TODO : is there a better way here?	DESIGN	0.9999868969670839	DESIGN	1.3103032916177003E-5	WITHOUT_CLASSIFICATION
//TODO: this class depends directly upon CriteriaImpl,  //      in the impl package ... add a CriteriaImplementor  //      interface	DESIGN	0.8275550854002708	WITHOUT_CLASSIFICATION	0.17244491459972913	DESIGN
//TODO: add a CriteriaImplementor interface //      this class depends directly upon CriteriaImpl in the impl package...	DESIGN	0.9823474659367665	WITHOUT_CLASSIFICATION	0.017652534063233517	DESIGN
// TODO : not so sure this is needed...	DESIGN	0.610322804078641	DESIGN	0.38967719592135885	WITHOUT_CLASSIFICATION
// meant to handle dynamic instantiation queries...(Copy from QueryLoader)	DESIGN	0.9965328603965604	WITHOUT_CLASSIFICATION	0.0034671396034395862	DESIGN
// TODO: The order in which entities are saved may matter (e.g., a particular transient entity //       may need to be saved before other transient entities can be saved; //       Keep retrying the batch of transient entities until either: //       1) there are no transient entities left in transientCopyCache //       or 2) no transient entities were saved in the last batch // For now, just run through the transient entities and retry the merge	DESIGN	0.8356716727139586	WITHOUT_CLASSIFICATION	0.16432832728604146	DESIGN
// todo: this might really even be moved into the cfg package and used as the basis for all things which are configurable.	DESIGN	0.5528194496132597	WITHOUT_CLASSIFICATION	0.4471805503867403	DESIGN
// todo : currently expects that the individual with expressions apply to the same sql table join. //      This may not be the case for joined-subclass where the property values //      might be coming from different tables in the joined hierarchy.  At some //      point we should expand this to support that capability.  However, that has //      some difficulties: //          1) the biggest is how to handle ORs when the individual comparisons are //              linked to different sql joins. //          2) here we would need to track each comparison individually, along with //              the join alias to which it applies and then pass that information //              back to the FromElement so it can pass it along to the JoinSequence	DESIGN	0.642948048426695	DESIGN	0.35705195157330505	WITHOUT_CLASSIFICATION
// this function has a template -> restore output, apply the template and write the result out // TODO: Downcast to avoid using an interface?  Yuck.	DESIGN	0.52617122649662	DESIGN	0.4738287735033801	WITHOUT_CLASSIFICATION
// at some point the generate phase needs to be moved out of here, // because a single object-level DML might spawn multiple SQL DML // command executions. // // Possible to just move the sql generation for dml stuff, but for // consistency-sake probably best to just move responsiblity for // the generation phase completely into the delegates // (QueryLoader/StatementExecutor) themselves.  Also, not sure why // QueryLoader currently even has a dependency on this at all; does // it need it?  Ideally like to see the walker itself given to the delegates directly...	DESIGN	0.9987048722097309	DESIGN	0.001295127790269049	WITHOUT_CLASSIFICATION
// get the right object from the list ... would it be easier to just call getEntity() ??	DESIGN	0.9873671224205665	WITHOUT_CLASSIFICATION	0.012632877579433682	DESIGN
// TODO should we just collect these like with the collections above?	DESIGN	0.8205309566649635	DESIGN	0.17946904333503658	WITHOUT_CLASSIFICATION
// todo : better to handle dynamic filters through implicit DynamicFilterParameterSpecification // see the discussion there in DynamicFilterParameterSpecification's javadocs as to why // it is currently not done that way.	DESIGN	0.991818476427353	WITHOUT_CLASSIFICATION	0.008181523572646981	DESIGN
/////////////////////////////////////////////////////////////////////////// // USED ONLY FOR REGRESSION TESTING!!!! // // todo : obviously get rid of all this junk ;) ///////////////////////////////////////////////////////////////////////////	DESIGN	0.9978207591515871	WITHOUT_CLASSIFICATION	0.0021792408484129187	DESIGN
//create an index on the key columns??	DESIGN	0.999135895272788	WITHOUT_CLASSIFICATION	8.641047272120221E-4	DESIGN
//TODO: deprecated, remove eventually	DESIGN	0.7344336559749228	WITHOUT_CLASSIFICATION	0.2655663440250772	DESIGN
//create an index on the key columns??	DESIGN	0.999135895272788	WITHOUT_CLASSIFICATION	8.641047272120221E-4	DESIGN
//TODO: improve this hack!	DESIGN	0.9639604316733731	WITHOUT_CLASSIFICATION	0.03603956832662689	DESIGN
// inheritance cycle detection (paranoid check)	DESIGN	0.9986201463954698	WITHOUT_CLASSIFICATION	0.0013798536045302402	DESIGN
//TODO: remove use of instanceof!	DESIGN	0.717549543742806	WITHOUT_CLASSIFICATION	0.2824504562571939	DESIGN
//shortcut	DESIGN	0.9990619244547406	WITHOUT_CLASSIFICATION	9.380755452593856E-4	DESIGN
//TODO: handle the case of a foreign key to something other than the pk	DESIGN	0.9946943046248864	WITHOUT_CLASSIFICATION	0.0053056953751136485	DESIGN
// create an index on the key columns??	DESIGN	0.9998184755906737	WITHOUT_CLASSIFICATION	1.815244093263389E-4	DESIGN
// todo : remove	DESIGN	0.9993515544419826	WITHOUT_CLASSIFICATION	6.48445558017223E-4	DESIGN
// todo : remove	DESIGN	0.9993515544419826	WITHOUT_CLASSIFICATION	6.48445558017223E-4	DESIGN
// todo : remove	DESIGN	0.9993515544419826	WITHOUT_CLASSIFICATION	6.48445558017223E-4	DESIGN
// todo : throw exception?	DESIGN	0.9997982946884035	WITHOUT_CLASSIFICATION	2.0170531159641335E-4	DESIGN
// todo : throw exception?  maybe warn if not the same?	DESIGN	0.9986189940948789	WITHOUT_CLASSIFICATION	0.0013810059051211883	DESIGN
//TODO: make EntityPersister *not* depend on SessionFactoryImplementor //interface, if possible	DESIGN	0.6587719486072504	WITHOUT_CLASSIFICATION	0.34122805139274964	DESIGN
//TODO: is there a more elegant way than downcasting?	DESIGN	0.7215496390413055	DESIGN	0.2784503609586946	WITHOUT_CLASSIFICATION
// TODO: encapsulate the protected instance variables!	DESIGN	0.6409952212840265	DESIGN	0.3590047787159735	WITHOUT_CLASSIFICATION
// should indicate that we are processing an INSERT/UPDATE/DELETE // query with a subquery implied via a collection property // function. Here, we need to use the table name itself as the // qualification alias. // TODO : verify this works for all databases... // TODO : is this also the case in non-"indexed" scenarios?	DESIGN	0.9429108964192928	DESIGN	0.05708910358070729	WITHOUT_CLASSIFICATION
//TODO: copy/paste from insertRows()	DESIGN	0.870497352678064	WITHOUT_CLASSIFICATION	0.12950264732193598	DESIGN
//TODO: copy/paste from recreate()	DESIGN	0.870497352678064	WITHOUT_CLASSIFICATION	0.12950264732193598	DESIGN
//should this interface extend PropertyMapping?	DESIGN	0.9172040116057955	WITHOUT_CLASSIFICATION	0.08279598839420457	DESIGN
//ie. the subquery! yuck!	DESIGN	0.9997505657007548	WITHOUT_CLASSIFICATION	2.494342992451947E-4	DESIGN
//TODO: move to .sql package!!	DESIGN	0.9234490202953871	WITHOUT_CLASSIFICATION	0.07655097970461289	DESIGN
//TODO: code duplication with SingleTableEntityPersister	DESIGN	0.6474996001108597	WITHOUT_CLASSIFICATION	0.3525003998891403	DESIGN
// TODO: It would be really, really nice to use this to also model components!	DESIGN	0.996171079702238	DESIGN	0.00382892029776211	WITHOUT_CLASSIFICATION
//TODO: *two* hashmap lookups here is one too many...	DESIGN	0.7002594349939044	WITHOUT_CLASSIFICATION	0.2997405650060956	DESIGN
//TODO: code duplication with JoinedSubclassEntityPersister	DESIGN	0.6474996001108597	WITHOUT_CLASSIFICATION	0.3525003998891403	DESIGN
//perhaps not really necessary...	DESIGN	0.9974132163552903	WITHOUT_CLASSIFICATION	0.00258678364470963	DESIGN
// NOTE: this assumes something about how propertySelectFragment is implemented by the subclass! // was toUnqotedAliasStrings( getIdentiferColumnNames() ) before - now tried // to remove that unqoting and missing aliases..	DESIGN	0.999152779007532	WITHOUT_CLASSIFICATION	8.472209924681162E-4	DESIGN
// NOTE: this assumes something about how propertySelectFragment is implemented by the subclass! // was toUnqotedAliasStrings( getdiscriminatorColumnName() ) before - now tried // to remove that unqoting and missing aliases..	DESIGN	0.999152779007532	WITHOUT_CLASSIFICATION	8.472209924681162E-4	DESIGN
//TODO: should we use SELECT .. FOR UPDATE?	DESIGN	0.595251589413486	WITHOUT_CLASSIFICATION	0.404748410586514	DESIGN
//TODO: optimize this better!	DESIGN	0.9663110484482259	WITHOUT_CLASSIFICATION	0.033688951551774086	DESIGN
//TODO: should we allow suffixes on these ?	DESIGN	0.922814902180021	DESIGN	0.07718509781997897	WITHOUT_CLASSIFICATION
//This is really ugly, but necessary:	DESIGN	0.9936691958070698	WITHOUT_CLASSIFICATION	0.006330804192930189	DESIGN
//ugly little workaround for fact that createUniqueKeyLoaders() does not handle component properties	DESIGN	0.6382023169933344	WITHOUT_CLASSIFICATION	0.3617976830066656	DESIGN
//TODO: disable batch loading if lockMode > READ?	DESIGN	0.9683350005156085	WITHOUT_CLASSIFICATION	0.031664999484391505	DESIGN
// append the SQL to return the generated identifier //TODO: suck into Insert	DESIGN	0.9866110145373028	WITHOUT_CLASSIFICATION	0.013388985462697055	DESIGN
//TODO: I am not so sure about the exception handling in this bit!	DESIGN	0.7274799691854803	DESIGN	0.2725200308145197	WITHOUT_CLASSIFICATION
//TODO: is this really necessary????	DESIGN	0.7462937513593417	WITHOUT_CLASSIFICATION	0.25370624864065827	DESIGN
//TODO: move to .sql package, and refactor with similar things!	DESIGN	0.565431842016023	WITHOUT_CLASSIFICATION	0.4345681579839771	DESIGN
//TODO: implement functionality //  this might be painful to do here, as the "join post processing" for //  the subquery has already been performed (meaning that for //  theta-join dialects, the join conditions have already been moved //  over to the where clause).  A "simple" solution here might to //  perform "join post processing" once for the entire query (including //  any subqueries) at one fell swoop	DESIGN	0.9986588271587002	DESIGN	0.001341172841299845	WITHOUT_CLASSIFICATION
// todo : this eventually needs to be removed	DESIGN	0.9899815237195482	WITHOUT_CLASSIFICATION	0.010018476280451823	DESIGN
//kinda ugly, but needed for collections with a "." node mapping	DESIGN	0.9904425188434458	WITHOUT_CLASSIFICATION	0.009557481156554113	DESIGN
//is this ok?	DESIGN	0.998401376124716	WITHOUT_CLASSIFICATION	0.0015986238752840455	DESIGN
//TODO: perhaps this should be some other RuntimeException...	DESIGN	0.9625192813777678	DESIGN	0.03748071862223225	WITHOUT_CLASSIFICATION
//TODO: make this a bit nicer	DESIGN	0.6043052419156004	WITHOUT_CLASSIFICATION	0.39569475808439963	DESIGN
//Yuck:	DESIGN	0.9990619244547406	WITHOUT_CLASSIFICATION	9.380755452593856E-4	DESIGN
//TODO: we should provide some way to get keys of collection of statistics to make it easier to retrieve from a GUI perspective	DESIGN	0.9724424904525144	DESIGN	0.027557509547485516	WITHOUT_CLASSIFICATION
/**	DESIGN	0.5935609611320364	DESIGN	0.4064390388679638	WITHOUT_CLASSIFICATION
// TODO : will need reference to session factory to fully complete HHH-1907	DESIGN	0.9705763588199046	DESIGN	0.029423641180095463	WITHOUT_CLASSIFICATION
//TODO: currently keeps Getters and Setters (instead of PropertyAccessors) because of the way getGetter() and getSetter() are implemented currently; yuck!	DESIGN	0.9928049884933045	WITHOUT_CLASSIFICATION	0.007195011506695464	DESIGN
//TODO: redesign how PropertyAccessors are acquired...	DESIGN	0.899562021617489	WITHOUT_CLASSIFICATION	0.10043797838251096	DESIGN
// todo : YUCK!!!	DESIGN	0.9998710400839718	WITHOUT_CLASSIFICATION	1.289599160282866E-4	DESIGN
// TODO : YUCK!!!  fix after HHH-1907 is complete	DESIGN	0.9434239499938989	DESIGN	0.056576050006101254	WITHOUT_CLASSIFICATION
//TODO: need to make the majority of this functionality into a top-level support class for custom impl support	DESIGN	0.958383092992123	DESIGN	0.04161690700787706	WITHOUT_CLASSIFICATION
//TODO: design new lifecycle for ProxyFactory	DESIGN	0.9092255211384501	WITHOUT_CLASSIFICATION	0.09077447886154982	DESIGN
//TODO: would be nice to handle proxy classes elegantly!	DESIGN	0.7055639252533559	WITHOUT_CLASSIFICATION	0.294436074746644	DESIGN
// TODO: copy/paste from ManyToOneType	DESIGN	0.7545774837884726	DESIGN	0.2454225162115273	WITHOUT_CLASSIFICATION
//TODO: should this be Session.instantiate(Persister, ...)?	DESIGN	0.6234358492574654	DESIGN	0.37656415074253446	WITHOUT_CLASSIFICATION
//TODO: this is a bit arbitrary, expose a switch to the user?	DESIGN	0.6642240910086908	WITHOUT_CLASSIFICATION	0.3357759089913091	DESIGN
//TODO: implement caching?! proxies?!	DESIGN	0.8119183965558373	WITHOUT_CLASSIFICATION	0.18808160344416272	DESIGN
//TODO: is this right??	DESIGN	0.9210634831395393	WITHOUT_CLASSIFICATION	0.07893651686046067	DESIGN
// is this really necessary?	DESIGN	0.9992252393453805	WITHOUT_CLASSIFICATION	7.747606546195209E-4	DESIGN
//TODO: move these to a new JoinableType abstract class, //extended by EntityType and PersistentCollectionType:	DESIGN	0.7779883508980342	DESIGN	0.22201164910196577	WITHOUT_CLASSIFICATION
// TODO: this is very suboptimal for some subclasses (namely components), // since it does not take advantage of two-phase-load	DESIGN	0.9765686895213799	DESIGN	0.02343131047862011	WITHOUT_CLASSIFICATION
// worrying about proxies is perhaps a little bit of overkill here...	DESIGN	0.904843169062778	WITHOUT_CLASSIFICATION	0.0951568309372221	DESIGN
// NOTE VERY HACKISH WORKAROUND!! // TODO: Fix this so it will work for non-POJO entity mode	DESIGN	0.8964739239363329	DESIGN	0.1035260760636672	WITHOUT_CLASSIFICATION
// TODO: Fix this so it will work for non-POJO entity mode	DESIGN	0.8979554323239887	DESIGN	0.10204456767601135	WITHOUT_CLASSIFICATION
// We would probably refactor to have LogicParser (builds a tree of simple // expressions connected by and, or, not), ExpressionParser (translates // from OO terms like foo, foo.Bar, foo.Bar.Baz to SQL terms like // FOOS.ID, FOOS.BAR_ID, etc) and PathExpressionParser (which does much // the same thing it does now)	DESIGN	0.8663617590981901	WITHOUT_CLASSIFICATION	0.13363824090180984	DESIGN
//TODO: this is a little inefficient, don't need to do a whole //      deep replaceElements() call	DESIGN	0.938711054889502	DESIGN	0.061288945110498046	WITHOUT_CLASSIFICATION
//workaround for WebLogic	DESIGN	0.9987267768863234	WITHOUT_CLASSIFICATION	0.0012732231136767193	DESIGN
//TODO: this dependency is kinda Bad	DESIGN	0.9318013785570286	DESIGN	0.06819862144297137	WITHOUT_CLASSIFICATION
//ick!	DESIGN	0.9990619244547406	WITHOUT_CLASSIFICATION	9.380755452593856E-4	DESIGN
// short cut check...	DESIGN	0.9997640023303515	WITHOUT_CLASSIFICATION	2.359976696485107E-4	DESIGN
// todo : move to StringHelper?	DESIGN	0.9982128897795166	WITHOUT_CLASSIFICATION	0.0017871102204834479	DESIGN
//yukky! Don't you have subclasses for that! //TODO race conditions can happen here	DESIGN	0.9472907595375967	WITHOUT_CLASSIFICATION	0.05270924046240331	DESIGN
//TODO: We probably should have a StatisticsNotPublishedException, to make it clean	DESIGN	0.8804059047326771	DESIGN	0.11959409526732283	WITHOUT_CLASSIFICATION
// FIXME hack to work around fact that calling // Node added = root.addChild( fqn ); doesn't  // properly set the version on the node	DESIGN	0.7411546053992982	DESIGN	0.2588453946007017	WITHOUT_CLASSIFICATION
// TODO: I considered validating the presence of the TS cache here, // but decided to defer unti getQueryCacheInstance() in case the  // cache is never actually used	DESIGN	0.5439318113441217	DESIGN	0.4560681886558784	WITHOUT_CLASSIFICATION
//need to do that here rather than in the save event listener to let //the post insert events to have a id-filled entity when IDENTITY is used (EJB3)	DESIGN	0.5060423295467097	DESIGN	0.4939576704532904	WITHOUT_CLASSIFICATION
//TODO: simply remove this override //      if we fix the above todos	DESIGN	0.6265645643126334	DESIGN	0.37343543568736665	WITHOUT_CLASSIFICATION
// This, is used by SessionFactoryImpl to hand to the generated SessionImpl; // was the only reason I could see that we cannot just use null as // Settings.cacheProvider	DESIGN	0.9977471819291311	WITHOUT_CLASSIFICATION	0.00225281807086874	DESIGN
// this is done here 'cos we might only know the type here (ugly!) // TODO: improve this a lot:	DESIGN	0.9964568700795157	DESIGN	0.003543129920484351	WITHOUT_CLASSIFICATION
// todo : would love to have this work on a notification basis //    where the successful binding of an entity/subclass would //    emit a notification which the extendsQueue entries could //    react to...	DESIGN	0.998486206120555	WITHOUT_CLASSIFICATION	0.0015137938794449394	DESIGN
// TODO : not sure the best way to handle this. // The non-performant way :	DESIGN	0.7818114511791945	WITHOUT_CLASSIFICATION	0.21818854882080546	DESIGN
// would be better to use the element-type to determine // whether the old and the new are equal here; the problem being // we do not necessarily have access to the element type in all // cases	DESIGN	0.8340326172126591	WITHOUT_CLASSIFICATION	0.16596738278734083	DESIGN
// This next bit is to allow for both unsaved-value="negative" // and for "older" behavior where version number did not get // seeded if it was already set in the object // TODO: shift it into unsaved-value strategy	DESIGN	0.9995154094846751	DESIGN	4.845905153248044E-4	WITHOUT_CLASSIFICATION
// merges don't cascade to uninitialized collections //	DESIGN	0.9980214905697924	WITHOUT_CLASSIFICATION	0.001978509430207618	DESIGN
// TODO: an alternative is to check if the owner has changed; if it hasn't then // return collection.getOwner()	DESIGN	0.8699216670561624	WITHOUT_CLASSIFICATION	0.13007833294383764	DESIGN
//it is possible that the tree-walking in OuterJoinLoader can get to //an association defined by a subclass, in which case the property-ref //might refer to a property defined on a subclass of the current class //in this case, the table name is not known - this temporary solution  //assumes that the property-ref refers to a property of the subclass //table that the association belongs to (a reasonable guess) //TODO: fix this, add: OuterJoinLoadable.getSubclassPropertyTableName(String propertyName)	DESIGN	0.9859080939463589	DESIGN	0.014091906053641183	WITHOUT_CLASSIFICATION
// this only works because collection entries are kept in a sequenced // map by persistence context (maybe we should do like entities and // keep a separate sequences set...) //TODO: calling entrySet on an IdentityMap is SLOW!!	DESIGN	0.993506670226806	DESIGN	0.00649332977319396	WITHOUT_CLASSIFICATION
// important, to account for newly saved entities in query // todo : some kind of check for new status...	DESIGN	0.9985886713603397	WITHOUT_CLASSIFICATION	0.0014113286396603038	DESIGN
// brand new collection //TODO: or an array!! we can't lock objects with arrays now??	DESIGN	0.7503944925000547	WITHOUT_CLASSIFICATION	0.24960550749994526	DESIGN
//TODO: if object was an uninitialized proxy, this is inefficient, //      resulting in two SQL selects	DESIGN	0.9012622281932752	WITHOUT_CLASSIFICATION	0.09873777180672477	DESIGN
//before cascade! //TODO: should this be Session.instantiate(Persister, ...)?	DESIGN	0.6234358492574654	DESIGN	0.37656415074253446	WITHOUT_CLASSIFICATION
// TODO : absolutely no usages of this constructor form; can it go away?	DESIGN	0.7126536728143121	WITHOUT_CLASSIFICATION	0.2873463271856879	DESIGN
// todo : need to find a clean way to handle the "event source" role // a seperate classs responsible for generating/dispatching events just duplicates most of the Session methods... // passing around seperate reto interceptor, factory, actionQueue, and persistentContext is not manageable...	DESIGN	0.5233845222350436	DESIGN	0.4766154777649564	WITHOUT_CLASSIFICATION
// todo : remove	DESIGN	0.9993515544419826	WITHOUT_CLASSIFICATION	6.48445558017223E-4	DESIGN
//aliasRefNode.resolve( false, false, aliasRefNode.getText() ); //TODO: is it kosher to do it here? //TODO: is it kosher to do it here?	DESIGN	0.5055366457908683	DESIGN	0.4944633542091318	WITHOUT_CLASSIFICATION
// No explicit select expression; render the id and properties // projection lists for every persister in the from clause into // a single 'token node'. //TODO: the only reason we need this stuff now is collection filters, //      we should get rid of derived select clause completely!	DESIGN	0.9574701756238313	DESIGN	0.04252982437616869	WITHOUT_CLASSIFICATION
// TODO : an optimization here would be to consider cascade deletes and not gen those delete statements; //      the difficulty is the ordering of the tables here vs the cascade attributes on the persisters -> //          the table info gotten here should really be self-contained (i.e., a class representation //          defining all the needed attributes), then we could then get an array of those	DESIGN	0.9721893912317698	DESIGN	0.027810608768230136	WITHOUT_CLASSIFICATION
// TODO: get SQL rendering out of here, create an AST for the join expressions. // Use the SQL generator grammar to generate the SQL text for the index expression.	DESIGN	0.9281370750331656	WITHOUT_CLASSIFICATION	0.07186292496683444	DESIGN
// TODO : this really needs to be delayed unitl after we definitively know all node types // where this is currently a problem is parameters for which where we cannot unequivocally // resolve an expected type	DESIGN	0.867298705969842	DESIGN	0.13270129403015793	WITHOUT_CLASSIFICATION
// TODO: Figure out a better way to get the FROM elements in a proper tree structure. // If this is not the destination of a many-to-many, add it as a child of the origin.	DESIGN	0.6082132080162039	DESIGN	0.39178679198379596	WITHOUT_CLASSIFICATION
// work around that crazy issue where the tree contains // "empty" FromElements (no text); afaict, this is caused // by FromElementFactory.createCollectionJoin()	DESIGN	0.9098423688917812	WITHOUT_CLASSIFICATION	0.09015763110821881	DESIGN
//TODO: this class does too many things! we need a different //kind of path expression parser for each of the diffferent //ways in which path expressions can occur	DESIGN	0.592159665877758	WITHOUT_CLASSIFICATION	0.4078403341222419	DESIGN
//real hacky... // used to count the nesting of parentheses	DESIGN	0.9994278389060316	WITHOUT_CLASSIFICATION	5.721610939684767E-4	DESIGN
// TODO : would be really nice to cache the spec on the query-def so as to not have to re-calc the hash; // currently not doable though because of the resultset-ref stuff...	DESIGN	0.9658278846137509	WITHOUT_CLASSIFICATION	0.034172115386249154	DESIGN
//for arrays, we should end the collection load before resolving //the entities, since the actual array instances are not instantiated //during loading //TODO: or we could do this polymorphically, and have two //      different operations implemented differently for arrays	DESIGN	0.595344586534499	DESIGN	0.404655413465501	WITHOUT_CLASSIFICATION
// polymorphism not really handled completely correctly, // perhaps...well, actually its ok, assuming that the // entity name used in the lookup is the same as the // the one used here, which it will be	DESIGN	0.9996942311111484	WITHOUT_CLASSIFICATION	3.0576888885157024E-4	DESIGN
// TODO: should "record" how many properties we have reffered to - and if we  //       don't get'em'all we throw an exception! Way better than trial and error ;)	DESIGN	0.9997241101273556	DESIGN	2.758898726444006E-4	WITHOUT_CLASSIFICATION
// VERY IMPORTANT!!!! - This class needs to be free of any static references // to any CGLIB or Javassist classes.  Otherwise, users will always need both // on their classpaths no matter which (if either) they use. // // Another option here would be to remove the Hibernate.isPropertyInitialized() // method and have the users go through the SessionFactory to get this information.	DESIGN	0.9510418187805093	DESIGN	0.048958181219490575	WITHOUT_CLASSIFICATION
// TODO: is it really neceassry to provide Configuration to CollectionPersisters ? Should it not be enough with associated class ? // or why does EntityPersister's not get access to configuration ? // // The only reason I could see that Configuration gets passed to collection persisters // is so that they can look up the dom4j node name of the entity element in case // no explicit node name was applied at the collection element level.  Are you kidding me? // Trivial to fix then.  Just store and expose the node name on the entity persister // (which the collection persister looks up anyway via other means...).	DESIGN	0.9996621362146857	DESIGN	3.378637853143642E-4	WITHOUT_CLASSIFICATION
//for backward compatibility, allow a set with no not-null  //element columns, using all columns in the row locater SQL //TODO: create an implicit not null constraint on all cols?	DESIGN	0.9453132550527308	WITHOUT_CLASSIFICATION	0.054686744947269154	DESIGN
//SPACES //TODO: i'm not sure, but perhaps we should exclude //      abstract denormalized tables?	DESIGN	0.8916684475127541	DESIGN	0.10833155248724587	WITHOUT_CLASSIFICATION
//workaround, for backward compatibility of sets with no //not-null columns, assume all columns are used in the //row locator SQL	DESIGN	0.9991158976398165	WITHOUT_CLASSIFICATION	8.841023601835228E-4	DESIGN
//note that this method could easily be moved up to BasicEntityPersister, //if we ever needed to reuse it from other subclasses	DESIGN	0.8844042837968005	WITHOUT_CLASSIFICATION	0.11559571620319954	DESIGN
//index += getPropertyColumnSpan( i ); //TODO:  this is kinda slow...	DESIGN	0.5033347942542158	WITHOUT_CLASSIFICATION	0.49666520574578416	DESIGN
//TODO: need some caching scheme? really comes down to decision  //      regarding amount of state (if any) kept on PropertyAccessors	DESIGN	0.831581991766924	WITHOUT_CLASSIFICATION	0.16841800823307593	DESIGN
// TODO: here is why we need to make bytecode provider global :( // TODO : again, fix this after HHH-1907 is complete	DESIGN	0.9999999390857854	DESIGN	6.091421459022524E-8	WITHOUT_CLASSIFICATION
//TODO: Yuck! This is not quite good enough, it's a quick //hack around the problem of having a to-one association //that refers to an embedded component:	DESIGN	0.5261310565502194	WITHOUT_CLASSIFICATION	0.4738689434497807	DESIGN
// for DOM4J "collections" only // TODO: it would be better if this was done at the higher level by Printer	DESIGN	0.9964992575100524	DESIGN	0.003500742489947661	WITHOUT_CLASSIFICATION
// would be great to move all this below here into another method that could also be used // from the new scrolling stuff. // // Would need to change the way the max-row stuff is handled (i.e. behind an interface) so // that I could do the control breaking at the means to know when to stop	DESIGN	0.999134988104686	DESIGN	8.650118953139345E-4	WITHOUT_CLASSIFICATION
//TODO: can we *always* use the "null property" approach for everything?	DESIGN	0.8700449430871247	WITHOUT_CLASSIFICATION	0.12995505691287532	DESIGN
//polymorphism comment above	DESIGN	0.9999469510570262	WITHOUT_CLASSIFICATION	5.3048942973724534E-5	DESIGN
// some messy, complex stuff here, since createCriteria() can take an // aliased path, or a path rooted at the creating criteria instance	DESIGN	0.9999915483368964	WITHOUT_CLASSIFICATION	8.45166310365746E-6	DESIGN
//TODO: really bad, evil hack to fix!!!	DESIGN	0.9976876983306536	DESIGN	0.00231230166934624	WITHOUT_CLASSIFICATION
// ugly hack for cases like "elements(foo.bar.collection)" // (multi-part path expression ending in elements or indices)	DESIGN	0.9846179476191101	DESIGN	0.015382052380889917	WITHOUT_CLASSIFICATION
// try block is a hack around fact that currently tuplizers are not // given the opportunity to resolve a subclass entity name.  this // allows the (we assume custom) interceptor the ability to // influence this decision if we were not able to based on the // given entityName	DESIGN	0.7588672557346063	DESIGN	0.24113274426539377	WITHOUT_CLASSIFICATION
/////////////////////////////////////////////////////////////////////// // HACK ALERT !!!!!!!!!!!!!!!!!!!!!!!!!!!! // Attempt to work around "ghost" ImpliedFromElements that occasionally // show up between the actual things being joined.  This consistently // occurs from index nodes (at least against many-to-many).  Not sure // if there are other conditions // // Essentially, look-ahead to the next FromElement that actually // writes something to the SQL	DESIGN	0.9916569956963536	WITHOUT_CLASSIFICATION	0.008343004303646397	DESIGN
//init the table here instead of earlier, so that we can get a quoted table name //TODO: would it be better to simply pass the qualified table name, instead of //      splitting it up into schema/catalog/table names	DESIGN	0.5696854707457041	DESIGN	0.4303145292542958	WITHOUT_CLASSIFICATION
// TODO : would be great to have a Mapping#hasNonIdentifierPropertyNamedId method // I don't believe that Mapping#getReferencedPropertyType accounts for the identifier property; so // if it returns for a property named 'id', then we should have a non-id field named id	DESIGN	0.9592526416671059	DESIGN	0.04074735833289412	WITHOUT_CLASSIFICATION
//TODO: is this really necessary????	DESIGN	0.7462937513593417	WITHOUT_CLASSIFICATION	0.25370624864065827	DESIGN
//TODO: ideally we need the construction of PropertyAccessor to take the following: //      1) EntityMode //      2) EntityMode-specific data (i.e., the classname for pojo entities) //      3) Property-specific data based on the EntityMode (i.e., property-name or dom4j-node-name) // The easiest way, with the introduction of the new runtime-metamodel classes, would be the // the following predicates: //      1) PropertyAccessorFactory.getPropertyAccessor() takes references to both a //          org.hibernate.metadata.EntityModeMetadata and org.hibernate.metadata.Property //      2) What is now termed a "PropertyAccessor" stores any values needed from those two //          pieces of information //      3) Code can then simply call PropertyAccess.getGetter() with no parameters; likewise with //          PropertyAccessor.getSetter()	DESIGN	0.6291006288855359	DESIGN	0.37089937111446397	WITHOUT_CLASSIFICATION
//TODO: this is temporary in that the end result will probably not take a Property reference per-se.	DESIGN	0.9903830739340975	DESIGN	0.0096169260659025	WITHOUT_CLASSIFICATION
// todo : this eventually needs to be removed	DESIGN	0.9899815237195482	WITHOUT_CLASSIFICATION	0.010018476280451823	DESIGN
//TODO: make this a bit nicer	DESIGN	0.6043052419156004	WITHOUT_CLASSIFICATION	0.39569475808439963	DESIGN
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.8777851709701393	WITHOUT_CLASSIFICATION	0.12221482902986075	DESIGN
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.8777851709701393	WITHOUT_CLASSIFICATION	0.12221482902986075	DESIGN
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.8777851709701393	WITHOUT_CLASSIFICATION	0.12221482902986075	DESIGN
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.8777851709701393	WITHOUT_CLASSIFICATION	0.12221482902986075	DESIGN
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.8777851709701393	WITHOUT_CLASSIFICATION	0.12221482902986075	DESIGN
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.8777851709701393	WITHOUT_CLASSIFICATION	0.12221482902986075	DESIGN
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.8777851709701393	WITHOUT_CLASSIFICATION	0.12221482902986075	DESIGN
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.8777851709701393	WITHOUT_CLASSIFICATION	0.12221482902986075	DESIGN
/**     * FIXME Per the RegionFactory class Javadoc, this constructor version     * should not be necessary.     *      * @param props The configuration properties     */	DESIGN	0.7281761413272855	WITHOUT_CLASSIFICATION	0.2718238586727146	DESIGN
/**     * FIXME Per the RegionFactory class Javadoc, this constructor version     * should not be necessary.     *      * @param props The configuration properties     */	DESIGN	0.7281761413272855	WITHOUT_CLASSIFICATION	0.2718238586727146	DESIGN
/**     * FIXME Per the RegionFactory class Javadoc, this constructor version     * should not be necessary.     *      * @param props The configuration properties     */	DESIGN	0.7281761413272855	WITHOUT_CLASSIFICATION	0.2718238586727146	DESIGN
// TODO : probably better to calculate these and pass them in, as it'll be more performant	DESIGN	0.995563658726167	DESIGN	0.004436341273832989	WITHOUT_CLASSIFICATION
