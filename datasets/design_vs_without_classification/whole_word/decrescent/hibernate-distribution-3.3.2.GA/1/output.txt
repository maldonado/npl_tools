//test out the optimizer:	WITHOUT_CLASSIFICATION	0.9999831518868253	WITHOUT_CLASSIFICATION	1.684811317464966E-5	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.999758407950086	WITHOUT_CLASSIFICATION	2.4159204991409242E-4	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.999758407950086	WITHOUT_CLASSIFICATION	2.4159204991409242E-4	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.999758407950086	WITHOUT_CLASSIFICATION	2.4159204991409242E-4	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.999758407950086	WITHOUT_CLASSIFICATION	2.4159204991409242E-4	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.999758407950086	WITHOUT_CLASSIFICATION	2.4159204991409242E-4	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.999758407950086	WITHOUT_CLASSIFICATION	2.4159204991409242E-4	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.999758407950086	WITHOUT_CLASSIFICATION	2.4159204991409242E-4	DESIGN
// return	WITHOUT_CLASSIFICATION	0.9998525879282664	WITHOUT_CLASSIFICATION	1.4741207173370836E-4	DESIGN
// return	WITHOUT_CLASSIFICATION	0.9998525879282664	WITHOUT_CLASSIFICATION	1.4741207173370836E-4	DESIGN
/* | this | bean | args | raw bean | */	WITHOUT_CLASSIFICATION	0.9995808649394265	WITHOUT_CLASSIFICATION	4.1913506057349154E-4	DESIGN
// invokeinterface	WITHOUT_CLASSIFICATION	0.9997952314504504	WITHOUT_CLASSIFICATION	2.047685495496311E-4	DESIGN
// astore 4 // store the raw bean	WITHOUT_CLASSIFICATION	0.9994131792699475	WITHOUT_CLASSIFICATION	5.868207300524088E-4	DESIGN
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.999999728860374	WITHOUT_CLASSIFICATION	2.7113962593154555E-7	DESIGN
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.999999728860374	WITHOUT_CLASSIFICATION	2.7113962593154555E-7	DESIGN
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.9998716114485654	WITHOUT_CLASSIFICATION	1.2838855143463063E-4	DESIGN
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9993476892062977	WITHOUT_CLASSIFICATION	6.523107937022425E-4	DESIGN
// putfield // new value of the field	WITHOUT_CLASSIFICATION	0.9997268526258369	WITHOUT_CLASSIFICATION	2.731473741630411E-4	DESIGN
// reference type	WITHOUT_CLASSIFICATION	0.9997611061391857	WITHOUT_CLASSIFICATION	2.3889386081437915E-4	DESIGN
// double	WITHOUT_CLASSIFICATION	0.9999081876257431	WITHOUT_CLASSIFICATION	9.181237425693283E-5	DESIGN
// double	WITHOUT_CLASSIFICATION	0.9999081876257431	WITHOUT_CLASSIFICATION	9.181237425693283E-5	DESIGN
// long	WITHOUT_CLASSIFICATION	0.9996952367257305	WITHOUT_CLASSIFICATION	3.0476327426955075E-4	DESIGN
// just decrement the lock, don't recache // (we don't know which transaction won)	WITHOUT_CLASSIFICATION	0.9999332693348643	WITHOUT_CLASSIFICATION	6.67306651357472E-5	DESIGN
// decode row selection...	WITHOUT_CLASSIFICATION	0.9999832495167713	WITHOUT_CLASSIFICATION	1.6750483228635858E-5	DESIGN
//disassembled state gets put in a new array (we write to cache by value!)	WITHOUT_CLASSIFICATION	0.9827772875052996	WITHOUT_CLASSIFICATION	0.017222712494700355	DESIGN
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.999846554573016	WITHOUT_CLASSIFICATION	1.534454269840362E-4	DESIGN
// CHECK	WITHOUT_CLASSIFICATION	0.999758407950086	WITHOUT_CLASSIFICATION	2.4159204991409242E-4	DESIGN
// ROW ID	WITHOUT_CLASSIFICATION	0.9996865328872707	WITHOUT_CLASSIFICATION	3.134671127292606E-4	DESIGN
// COMPOSITE-ID	WITHOUT_CLASSIFICATION	0.9997952314504504	WITHOUT_CLASSIFICATION	2.047685495496311E-4	DESIGN
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9997952314504504	WITHOUT_CLASSIFICATION	2.047685495496311E-4	DESIGN
/*	WITHOUT_CLASSIFICATION	0.9966403525745083	WITHOUT_CLASSIFICATION	0.003359647425491574	DESIGN
// DYNAMIC INSERT	WITHOUT_CLASSIFICATION	0.9997952314504504	WITHOUT_CLASSIFICATION	2.047685495496311E-4	DESIGN
// PERSISTER	WITHOUT_CLASSIFICATION	0.9997952314504504	WITHOUT_CLASSIFICATION	2.047685495496311E-4	DESIGN
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999796437103509	WITHOUT_CLASSIFICATION	2.035628964912929E-5	DESIGN
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9997952314504504	WITHOUT_CLASSIFICATION	2.047685495496311E-4	DESIGN
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9997952314504504	WITHOUT_CLASSIFICATION	2.047685495496311E-4	DESIGN
// generated properties can *never* be insertable...	WITHOUT_CLASSIFICATION	0.9994580665444092	WITHOUT_CLASSIFICATION	5.419334555908165E-4	DESIGN
// TABLE	WITHOUT_CLASSIFICATION	0.999758407950086	WITHOUT_CLASSIFICATION	2.4159204991409242E-4	DESIGN
//by default, natural-ids are "immutable" (constant)	WITHOUT_CLASSIFICATION	0.9934060771777572	WITHOUT_CLASSIFICATION	0.006593922822242805	DESIGN
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9991008237057385	WITHOUT_CLASSIFICATION	8.991762942616445E-4	DESIGN
// we found some extends attributes referencing entities which were // not already processed.  here we need to locate all entity-names // and class-names contained in this document itself, making sure // that these get removed from the extendz list such that only // extends names which require us to delay processing (i.e. // external to this document and not yet processed) are contained // in the returned result	WITHOUT_CLASSIFICATION	0.9610162082863994	WITHOUT_CLASSIFICATION	0.038983791713600544	DESIGN
/**	WITHOUT_CLASSIFICATION	0.6232293811851914	DESIGN	0.3767706188148086	WITHOUT_CLASSIFICATION
//	WITHOUT_CLASSIFICATION	0.999758407950086	WITHOUT_CLASSIFICATION	2.4159204991409242E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.999758407950086	WITHOUT_CLASSIFICATION	2.4159204991409242E-4	DESIGN
/**	WITHOUT_CLASSIFICATION	0.6232293811851914	DESIGN	0.3767706188148086	WITHOUT_CLASSIFICATION
//	WITHOUT_CLASSIFICATION	0.999758407950086	WITHOUT_CLASSIFICATION	2.4159204991409242E-4	DESIGN
// If close() is called, guarantee unbind()	WITHOUT_CLASSIFICATION	0.9996442545166608	WITHOUT_CLASSIFICATION	3.557454833391973E-4	DESIGN
// if a ThreadLocalSessionContext-bound session happens to get // serialized, to be completely correct, we need to make sure // that unbinding of that session occurs.	WITHOUT_CLASSIFICATION	0.8955439592778003	WITHOUT_CLASSIFICATION	0.10445604072219969	DESIGN
// on the inverse, it makes sense that if a ThreadLocalSessionContext- // bound session then gets deserialized to go ahead and re-bind it to // the ThreadLocalSessionContext session map.	WITHOUT_CLASSIFICATION	0.9972416319384411	WITHOUT_CLASSIFICATION	0.002758368061558953	DESIGN
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9997386979862298	WITHOUT_CLASSIFICATION	2.6130201377019645E-4	DESIGN
// 60 second lock timeout	WITHOUT_CLASSIFICATION	0.9999818852518566	WITHOUT_CLASSIFICATION	1.811474814341869E-5	DESIGN
// OptimisticCache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993232207011862	WITHOUT_CLASSIFICATION	6.767792988138589E-4	DESIGN
// Cache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993232207011862	WITHOUT_CLASSIFICATION	6.767792988138589E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.999758407950086	WITHOUT_CLASSIFICATION	2.4159204991409242E-4	DESIGN
// do the put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9980501754572156	WITHOUT_CLASSIFICATION	0.0019498245427844454	DESIGN
//ignore!	WITHOUT_CLASSIFICATION	0.997954794544069	WITHOUT_CLASSIFICATION	0.002045205455931084	DESIGN
// tree cache in optimistic mode seems to have as very difficult // time with remove calls on non-existent nodes (NPEs)...	WITHOUT_CLASSIFICATION	0.9999048702432631	WITHOUT_CLASSIFICATION	9.512975673685516E-5	DESIGN
//60 seconds	WITHOUT_CLASSIFICATION	0.9982660483085283	WITHOUT_CLASSIFICATION	0.0017339516914716315	DESIGN
//ignore!	WITHOUT_CLASSIFICATION	0.997954794544069	WITHOUT_CLASSIFICATION	0.002045205455931084	DESIGN
//60 seconds	WITHOUT_CLASSIFICATION	0.9982660483085283	WITHOUT_CLASSIFICATION	0.0017339516914716315	DESIGN
//do the failfast put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9931122478783113	WITHOUT_CLASSIFICATION	0.006887752121688684	DESIGN
// NOTE : evict() operates locally only (i.e., does not propogate // to any other nodes in the potential cluster).  This is // exactly what is needed when we destroy() here; destroy() is used // as part of the process of shutting down a SessionFactory; thus // these removals should not be propogated	WITHOUT_CLASSIFICATION	0.6544760590645747	WITHOUT_CLASSIFICATION	0.34552394093542527	DESIGN
//    protected RegionRootListener listener;	WITHOUT_CLASSIFICATION	0.9987022441917204	WITHOUT_CLASSIFICATION	0.0012977558082796505	DESIGN
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9989929822793889	WITHOUT_CLASSIFICATION	0.001007017720611159	DESIGN
// If we've been blocking for the mutex, perhaps another // thread has already reestablished the root. // In case the node was reestablised via replication, confirm it's  // marked "resident" (a status which doesn't replicate)	WITHOUT_CLASSIFICATION	0.999966039263219	WITHOUT_CLASSIFICATION	3.396073678094804E-5	DESIGN
// For pessimistic locking, we just want to toss out our ref // to any old invalid root node and get the latest (may be null)            	WITHOUT_CLASSIFICATION	0.9996458532872678	WITHOUT_CLASSIFICATION	3.5414671273214344E-4	DESIGN
// The rest only matters for optimistic locking, where we // need to establish the proper data version on the region root	WITHOUT_CLASSIFICATION	0.9824818343691184	WITHOUT_CLASSIFICATION	0.017518165630881665	DESIGN
// Don't hold a transactional lock for this 	WITHOUT_CLASSIFICATION	0.9687295634512391	WITHOUT_CLASSIFICATION	0.03127043654876096	DESIGN
// Make sure the root node for the region exists and  // has a DataVersion that never complains	WITHOUT_CLASSIFICATION	0.9989442504079156	WITHOUT_CLASSIFICATION	0.0010557495920843541	DESIGN
// Never evict this node	WITHOUT_CLASSIFICATION	0.9999572508764222	WITHOUT_CLASSIFICATION	4.2749123577892684E-5	DESIGN
// Fix up the resident flag	WITHOUT_CLASSIFICATION	0.9999949601689307	WITHOUT_CLASSIFICATION	5.039831069265484E-6	DESIGN
// 60 seconds	WITHOUT_CLASSIFICATION	0.9997952314504504	WITHOUT_CLASSIFICATION	2.047685495496311E-4	DESIGN
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9980033076767629	WITHOUT_CLASSIFICATION	0.001996692323237125	DESIGN
// no-op. We don't own the cache so we shouldn't stop it.	WITHOUT_CLASSIFICATION	0.9951000169759068	WITHOUT_CLASSIFICATION	0.004899983024093181	DESIGN
// This should only be possible if the caches are constructor injected 	WITHOUT_CLASSIFICATION	0.9987747604586308	WITHOUT_CLASSIFICATION	0.0012252395413692367	DESIGN
// We only build caches if *none* were passed in.  Passing in // caches counts as a clear statement of exactly what is wanted	WITHOUT_CLASSIFICATION	0.9985175983447624	WITHOUT_CLASSIFICATION	0.0014824016552376696	DESIGN
// Set up the cache factory	WITHOUT_CLASSIFICATION	0.9999816203633862	WITHOUT_CLASSIFICATION	1.8379636613775833E-5	DESIGN
// See if the user configured a multiplexer stack	WITHOUT_CLASSIFICATION	0.999760382033603	WITHOUT_CLASSIFICATION	2.3961796639712676E-4	DESIGN
// Default to collections sharing entity cache if there is one	WITHOUT_CLASSIFICATION	0.9993900705745233	WITHOUT_CLASSIFICATION	6.099294254765758E-4	DESIGN
// Default to sharing the entity cache if there is one	WITHOUT_CLASSIFICATION	0.999771575351229	WITHOUT_CLASSIFICATION	2.284246487710331E-4	DESIGN
// For Timestamps, we default to a separate config	WITHOUT_CLASSIFICATION	0.9808530476374678	WITHOUT_CLASSIFICATION	0.01914695236253217	DESIGN
// We can't change the TM on a running cache; just check // if the cache has no TM and we're OK with that	WITHOUT_CLASSIFICATION	0.999874977502889	WITHOUT_CLASSIFICATION	1.2502249711097342E-4	DESIGN
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9993242171722266	WITHOUT_CLASSIFICATION	6.757828277734176E-4	DESIGN
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9998792678036909	WITHOUT_CLASSIFICATION	1.2073219630917883E-4	DESIGN
// This method should be implemented assuming it's valid to  // do start/stop/start -- leave state appropriate for another start	WITHOUT_CLASSIFICATION	0.5758772769159892	DESIGN	0.42412272308401083	WITHOUT_CLASSIFICATION
// Make sure we don't re-release the same cache	WITHOUT_CLASSIFICATION	0.9986873597454674	WITHOUT_CLASSIFICATION	0.0013126402545326247	DESIGN
// We use a different delegate than the non-optimistic superclass default	WITHOUT_CLASSIFICATION	0.9971413212808423	WITHOUT_CLASSIFICATION	0.002858678719157729	DESIGN
// Following methods we don't delegate since they have so little logic // it's clearer to just implement them here	WITHOUT_CLASSIFICATION	0.9716005630512599	WITHOUT_CLASSIFICATION	0.02839943694874012	DESIGN
// If JBC is using INVALIDATION, we don't want to propagate changes. // We use the Timestamps cache to manage invalidation	WITHOUT_CLASSIFICATION	0.9985765353231366	WITHOUT_CLASSIFICATION	0.001423464676863327	DESIGN
// We don't want to waste effort setting an option if JBC is // already in LOCAL mode. If JBC is REPL_(A)SYNC then check // if they passed an config option to disable query replication	WITHOUT_CLASSIFICATION	0.998077432773054	WITHOUT_CLASSIFICATION	0.0019225672269458907	DESIGN
// Don't hold the JBC node lock throughout the tx, as that // prevents updates // Add a zero (or low) timeout option so we don't block // waiting for tx's that did a put to commit	WITHOUT_CLASSIFICATION	0.9995152055968983	WITHOUT_CLASSIFICATION	4.847944031017215E-4	DESIGN
// Double check the distributed cache	WITHOUT_CLASSIFICATION	0.9999400651551653	WITHOUT_CLASSIFICATION	5.993484483457344E-5	DESIGN
// Get an exclusive right to update JBC for this key from this node.	WITHOUT_CLASSIFICATION	0.9935795333914124	WITHOUT_CLASSIFICATION	0.006420466608587619	DESIGN
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9978558188489942	WITHOUT_CLASSIFICATION	0.0021441811510057307	DESIGN
// Initial load from JBC	WITHOUT_CLASSIFICATION	0.9999660381089974	WITHOUT_CLASSIFICATION	3.3961891002553675E-5	DESIGN
// See if we had a 2nd invalidation from the same initial // preinvalidation timestamp. If so, only increment // if the new current value is an increase	WITHOUT_CLASSIFICATION	0.9997580477250692	WITHOUT_CLASSIFICATION	2.4195227493090983E-4	DESIGN
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9978558188489942	WITHOUT_CLASSIFICATION	0.0021441811510057307	DESIGN
// If the workspace node has null as well, OK; if not we've // been modified in a non-comparable manner, which we have to // treat as us being newer	WITHOUT_CLASSIFICATION	0.9996732934658391	WITHOUT_CLASSIFICATION	3.2670653416086464E-4	DESIGN
// The standard comparator types are not Serializable but are singletons	WITHOUT_CLASSIFICATION	0.9991124279165086	WITHOUT_CLASSIFICATION	8.875720834914333E-4	DESIGN
// ignore!	WITHOUT_CLASSIFICATION	0.999758407950086	WITHOUT_CLASSIFICATION	2.4159204991409242E-4	DESIGN
// ignore it	WITHOUT_CLASSIFICATION	0.9997213649063703	WITHOUT_CLASSIFICATION	2.786350936296675E-4	DESIGN
// construct the cache	WITHOUT_CLASSIFICATION	0.9999918966409378	WITHOUT_CLASSIFICATION	8.103359062191706E-6	DESIGN
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9814881829504696	WITHOUT_CLASSIFICATION	0.018511817049530317	DESIGN
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9814881829504696	WITHOUT_CLASSIFICATION	0.018511817049530317	DESIGN
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9982660483085283	WITHOUT_CLASSIFICATION	0.0017339516914716315	DESIGN
//swaldman 2006-08-28: define c3p0-style configuration parameters for initialPoolSize, which //                     hibernate sensibly lets default to minPoolSize, but we'll let users //                     override it with the c3p0-style property if they want.	WITHOUT_CLASSIFICATION	0.992537036667773	WITHOUT_CLASSIFICATION	0.007462963332226982	DESIGN
/*DataSource unpooled = DataSources.unpooledDataSource(	WITHOUT_CLASSIFICATION	0.9993152066625991	WITHOUT_CLASSIFICATION	6.847933374010019E-4	DESIGN
// TRUE if the pool is borrowed from the outside, FALSE if we used to create it	WITHOUT_CLASSIFICATION	0.9963185463974447	WITHOUT_CLASSIFICATION	0.003681453602555435	DESIGN
// get a connection from the pool (thru DriverManager, cfr. Proxool doc)	WITHOUT_CLASSIFICATION	0.9993179187341128	WITHOUT_CLASSIFICATION	6.820812658872047E-4	DESIGN
// set the Transaction Isolation if defined	WITHOUT_CLASSIFICATION	0.9998769281221805	WITHOUT_CLASSIFICATION	1.2307187781945681E-4	DESIGN
// toggle autoCommit to false if set	WITHOUT_CLASSIFICATION	0.9973583551987573	WITHOUT_CLASSIFICATION	0.0026416448012427955	DESIGN
// return the connection	WITHOUT_CLASSIFICATION	0.999995868449991	WITHOUT_CLASSIFICATION	4.1315500090009425E-6	DESIGN
// Get the configurator files (if available)	WITHOUT_CLASSIFICATION	0.9999007385555141	WITHOUT_CLASSIFICATION	9.926144448584717E-5	DESIGN
// Default the Proxool alias setting	WITHOUT_CLASSIFICATION	0.999806282774646	WITHOUT_CLASSIFICATION	1.9371722535406436E-4	DESIGN
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.993269654198164	WITHOUT_CLASSIFICATION	0.006730345801835917	DESIGN
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.993269654198164	WITHOUT_CLASSIFICATION	0.006730345801835917	DESIGN
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.999305243580441	WITHOUT_CLASSIFICATION	6.947564195589951E-4	DESIGN
// Set the existing pool flag to true	WITHOUT_CLASSIFICATION	0.999121537365865	WITHOUT_CLASSIFICATION	8.784626341350765E-4	DESIGN
// Configured using the JAXP Configurator	WITHOUT_CLASSIFICATION	0.9999086234146917	WITHOUT_CLASSIFICATION	9.137658530836165E-5	DESIGN
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.993269654198164	WITHOUT_CLASSIFICATION	0.006730345801835917	DESIGN
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.999305243580441	WITHOUT_CLASSIFICATION	6.947564195589951E-4	DESIGN
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.999305243580441	WITHOUT_CLASSIFICATION	6.947564195589951E-4	DESIGN
// Configured using the Properties File Configurator	WITHOUT_CLASSIFICATION	0.9997155072519736	WITHOUT_CLASSIFICATION	2.844927480263638E-4	DESIGN
// Remember Isolation level	WITHOUT_CLASSIFICATION	0.9999824091469485	WITHOUT_CLASSIFICATION	1.759085305147014E-5	DESIGN
// If the provider was leeching off an existing pool don't close it	WITHOUT_CLASSIFICATION	0.9999802727933292	WITHOUT_CLASSIFICATION	1.972720667070766E-5	DESIGN
// We have created the pool ourselves, so shut it down	WITHOUT_CLASSIFICATION	0.9999176355393297	WITHOUT_CLASSIFICATION	8.236446067041849E-5	DESIGN
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.9992767392688503	WITHOUT_CLASSIFICATION	7.232607311496969E-4	DESIGN
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.9992767392688503	WITHOUT_CLASSIFICATION	7.232607311496969E-4	DESIGN
//always overwrite nonversioned data	WITHOUT_CLASSIFICATION	0.9980991750044268	WITHOUT_CLASSIFICATION	0.0019008249955732716	DESIGN
//public Currency getCurrency(int col) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9939261798090678	WITHOUT_CLASSIFICATION	0.00607382019093215	DESIGN
// default is POJO	WITHOUT_CLASSIFICATION	0.9996908498080541	WITHOUT_CLASSIFICATION	3.09150191945934E-4	DESIGN
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.9992772558383313	WITHOUT_CLASSIFICATION	7.227441616688127E-4	DESIGN
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.9992772558383313	WITHOUT_CLASSIFICATION	7.227441616688127E-4	DESIGN
//private CacheEntry cacheEntry;	WITHOUT_CLASSIFICATION	0.9943483618309333	WITHOUT_CLASSIFICATION	0.005651638169066694	DESIGN
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9993131881638091	WITHOUT_CLASSIFICATION	6.868118361908672E-4	DESIGN
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9873193416582555	WITHOUT_CLASSIFICATION	0.012680658341744457	DESIGN
// get the updated snapshot of the entity state by cloning current state; // it is safe to copy in place, since by this time no-one else (should have) // has a reference  to the array	WITHOUT_CLASSIFICATION	0.9997470371669351	WITHOUT_CLASSIFICATION	2.5296283306482954E-4	DESIGN
// this entity defines proeprty generation, so process those generated // values...	WITHOUT_CLASSIFICATION	0.9989918035017619	WITHOUT_CLASSIFICATION	0.0010081964982381034	DESIGN
// have the entity entry perform post-update processing, passing it the // update state and the new version (if one).	WITHOUT_CLASSIFICATION	0.9998873514668043	WITHOUT_CLASSIFICATION	1.1264853319568611E-4	DESIGN
/*!persister.isCacheInvalidationRequired()*/	WITHOUT_CLASSIFICATION	0.9942892606861524	WITHOUT_CLASSIFICATION	0.005710739313847541	DESIGN
// need to look it up from the persistence-context	WITHOUT_CLASSIFICATION	0.9988383514340926	WITHOUT_CLASSIFICATION	0.0011616485659073279	DESIGN
//sort first by role name	WITHOUT_CLASSIFICATION	0.9994241661711845	WITHOUT_CLASSIFICATION	5.758338288154566E-4	DESIGN
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9873193416582555	WITHOUT_CLASSIFICATION	0.012680658341744457	DESIGN
//then by fk	WITHOUT_CLASSIFICATION	0.9972866347183346	WITHOUT_CLASSIFICATION	0.0027133652816654415	DESIGN
// nothing to do	WITHOUT_CLASSIFICATION	0.9999459480760299	WITHOUT_CLASSIFICATION	5.405192396998377E-5	DESIGN
// nothing to do	WITHOUT_CLASSIFICATION	0.9999459480760299	WITHOUT_CLASSIFICATION	5.405192396998377E-5	DESIGN
// an existing collection that was either non-empty or uninitialized // is replaced by null or a different collection // (if the collection is uninitialized, hibernate has no way of // knowing if the collection is actually empty without querying the db)	WITHOUT_CLASSIFICATION	0.7619399654206072	WITHOUT_CLASSIFICATION	0.23806003457939276	DESIGN
// this method is called when a new non-null collection is persisted // or when an existing (non-null) collection is moved to a new owner	WITHOUT_CLASSIFICATION	0.8882411039120874	WITHOUT_CLASSIFICATION	0.1117588960879126	DESIGN
//	WITHOUT_CLASSIFICATION	0.999758407950086	WITHOUT_CLASSIFICATION	2.4159204991409242E-4	DESIGN
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9024674767958573	WITHOUT_CLASSIFICATION	0.09753252320414268	DESIGN
//do nothing - we only need to notify the cache...	WITHOUT_CLASSIFICATION	0.9957995062988994	WITHOUT_CLASSIFICATION	0.004200493701100709	DESIGN
//sort first by entity name	WITHOUT_CLASSIFICATION	0.9994471996379298	WITHOUT_CLASSIFICATION	5.528003620701387E-4	DESIGN
//then by id	WITHOUT_CLASSIFICATION	0.9974015432663711	WITHOUT_CLASSIFICATION	0.002598456733628943	DESIGN
// to be safe...	WITHOUT_CLASSIFICATION	0.9995758194685694	WITHOUT_CLASSIFICATION	4.24180531430576E-4	DESIGN
// no transformations took place, so handle it as we would a // non-instrumented class	WITHOUT_CLASSIFICATION	0.9985958990502437	WITHOUT_CLASSIFICATION	0.0014041009497563306	DESIGN
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9997576435483604	WITHOUT_CLASSIFICATION	2.423564516396456E-4	DESIGN
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9997576435483604	WITHOUT_CLASSIFICATION	2.423564516396456E-4	DESIGN
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999681029284155	WITHOUT_CLASSIFICATION	3.189707158448681E-5	DESIGN
//test out the optimizer:	WITHOUT_CLASSIFICATION	0.9999831518868253	WITHOUT_CLASSIFICATION	1.684811317464966E-5	DESIGN
// set the name of bulk accessor.	WITHOUT_CLASSIFICATION	0.999331878510525	WITHOUT_CLASSIFICATION	6.68121489474915E-4	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.999758407950086	WITHOUT_CLASSIFICATION	2.4159204991409242E-4	DESIGN
// invokespecial	WITHOUT_CLASSIFICATION	0.9997952314504504	WITHOUT_CLASSIFICATION	2.047685495496311E-4	DESIGN
// return	WITHOUT_CLASSIFICATION	0.9998525879282664	WITHOUT_CLASSIFICATION	1.4741207173370836E-4	DESIGN
// aload_1 // load bean	WITHOUT_CLASSIFICATION	0.9999763377987513	WITHOUT_CLASSIFICATION	2.366220124873801E-5	DESIGN
// checkcast // cast bean	WITHOUT_CLASSIFICATION	0.9999812123591613	WITHOUT_CLASSIFICATION	1.878764083880921E-5	DESIGN
// astore_3 // store bean	WITHOUT_CLASSIFICATION	0.9999837086368955	WITHOUT_CLASSIFICATION	1.6291363104472563E-5	DESIGN
// aload_2 // args	WITHOUT_CLASSIFICATION	0.9997579616179063	WITHOUT_CLASSIFICATION	2.4203838209358917E-4	DESIGN
// iconst_i // continue to aastore // growing stack is 1	WITHOUT_CLASSIFICATION	0.998281412949635	WITHOUT_CLASSIFICATION	0.0017185870503649346	DESIGN
// new	WITHOUT_CLASSIFICATION	0.9998059102727069	WITHOUT_CLASSIFICATION	1.9408972729308642E-4	DESIGN
// dup	WITHOUT_CLASSIFICATION	0.999758407950086	WITHOUT_CLASSIFICATION	2.4159204991409242E-4	DESIGN
// aload_3 // load the raw bean	WITHOUT_CLASSIFICATION	0.9996813584098851	WITHOUT_CLASSIFICATION	3.1864159011486636E-4	DESIGN
// invokeinterface	WITHOUT_CLASSIFICATION	0.9997952314504504	WITHOUT_CLASSIFICATION	2.047685495496311E-4	DESIGN
// invokevirtual	WITHOUT_CLASSIFICATION	0.9997952314504504	WITHOUT_CLASSIFICATION	2.047685495496311E-4	DESIGN
// invokevirtual	WITHOUT_CLASSIFICATION	0.9997952314504504	WITHOUT_CLASSIFICATION	2.047685495496311E-4	DESIGN
// aastore // args	WITHOUT_CLASSIFICATION	0.9997579616179063	WITHOUT_CLASSIFICATION	2.4203838209358917E-4	DESIGN
/* | this | bean | args | i | raw bean | exception | */	WITHOUT_CLASSIFICATION	0.9997536429596435	WITHOUT_CLASSIFICATION	2.463570403564974E-4	DESIGN
// required to exception table // iconst_0 // i	WITHOUT_CLASSIFICATION	0.9998711890830076	WITHOUT_CLASSIFICATION	1.2881091699238736E-4	DESIGN
// istore_3 // store i	WITHOUT_CLASSIFICATION	0.9999837593674985	WITHOUT_CLASSIFICATION	1.6240632501510182E-5	DESIGN
// aload_1 // load the bean	WITHOUT_CLASSIFICATION	0.9999911445905297	WITHOUT_CLASSIFICATION	8.855409470247542E-6	DESIGN
// checkcast // cast the bean into a raw bean	WITHOUT_CLASSIFICATION	0.9965000205999298	WITHOUT_CLASSIFICATION	0.003499979400070114	DESIGN
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.999999728860374	WITHOUT_CLASSIFICATION	2.7113962593154555E-7	DESIGN
// start region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.998632353181106	WITHOUT_CLASSIFICATION	0.0013676468188939307	DESIGN
// iinc 3, 1	WITHOUT_CLASSIFICATION	0.9997195387565667	WITHOUT_CLASSIFICATION	2.804612434332908E-4	DESIGN
// aload 4 // load the raw bean	WITHOUT_CLASSIFICATION	0.999147898997705	WITHOUT_CLASSIFICATION	8.521010022950634E-4	DESIGN
// aload_2 // load the args	WITHOUT_CLASSIFICATION	0.9999895324480653	WITHOUT_CLASSIFICATION	1.0467551934722191E-5	DESIGN
// iconst_i	WITHOUT_CLASSIFICATION	0.9997952314504504	WITHOUT_CLASSIFICATION	2.047685495496311E-4	DESIGN
// aaload	WITHOUT_CLASSIFICATION	0.999758407950086	WITHOUT_CLASSIFICATION	2.4159204991409242E-4	DESIGN
// checkcast	WITHOUT_CLASSIFICATION	0.9997952314504504	WITHOUT_CLASSIFICATION	2.047685495496311E-4	DESIGN
// checkcast (case of primitive type) // invokevirtual (case of primitive type)	WITHOUT_CLASSIFICATION	0.9994304951765801	WITHOUT_CLASSIFICATION	5.69504823419943E-4	DESIGN
// checkcast (case of reference type)	WITHOUT_CLASSIFICATION	0.999778776203692	WITHOUT_CLASSIFICATION	2.2122379630790966E-4	DESIGN
/* current stack len = 2 */	WITHOUT_CLASSIFICATION	0.9999993890206611	WITHOUT_CLASSIFICATION	6.109793389531493E-7	DESIGN
// end region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9991197632935487	WITHOUT_CLASSIFICATION	8.802367064513675E-4	DESIGN
// register in exception table	WITHOUT_CLASSIFICATION	0.9999876056306773	WITHOUT_CLASSIFICATION	1.2394369322743908E-5	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.999758407950086	WITHOUT_CLASSIFICATION	2.4159204991409242E-4	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.999758407950086	WITHOUT_CLASSIFICATION	2.4159204991409242E-4	DESIGN
// return	WITHOUT_CLASSIFICATION	0.9998525879282664	WITHOUT_CLASSIFICATION	1.4741207173370836E-4	DESIGN
// return	WITHOUT_CLASSIFICATION	0.9998525879282664	WITHOUT_CLASSIFICATION	1.4741207173370836E-4	DESIGN
// dup	WITHOUT_CLASSIFICATION	0.999758407950086	WITHOUT_CLASSIFICATION	2.4159204991409242E-4	DESIGN
// invokevirtual	WITHOUT_CLASSIFICATION	0.9997952314504504	WITHOUT_CLASSIFICATION	2.047685495496311E-4	DESIGN
// checkcast	WITHOUT_CLASSIFICATION	0.9997952314504504	WITHOUT_CLASSIFICATION	2.047685495496311E-4	DESIGN
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.9998716114485654	WITHOUT_CLASSIFICATION	1.2838855143463063E-4	DESIGN
// astore 5 // store exception	WITHOUT_CLASSIFICATION	0.9999932837591843	WITHOUT_CLASSIFICATION	6.716240815740945E-6	DESIGN
// new // BulkAccessorException	WITHOUT_CLASSIFICATION	0.9994562438910801	WITHOUT_CLASSIFICATION	5.43756108919934E-4	DESIGN
// aload 5 // load exception	WITHOUT_CLASSIFICATION	0.9999902450317213	WITHOUT_CLASSIFICATION	9.75496827873652E-6	DESIGN
// iload_3 // i	WITHOUT_CLASSIFICATION	0.9997958689710849	WITHOUT_CLASSIFICATION	2.0413102891513073E-4	DESIGN
// invokespecial // BulkAccessorException.<init>	WITHOUT_CLASSIFICATION	0.9993232207011862	WITHOUT_CLASSIFICATION	6.767792988138589E-4	DESIGN
// athrow	WITHOUT_CLASSIFICATION	0.999758407950086	WITHOUT_CLASSIFICATION	2.4159204991409242E-4	DESIGN
// WARNING: classfile only	WITHOUT_CLASSIFICATION	0.9999910705627076	WITHOUT_CLASSIFICATION	8.92943729229026E-6	DESIGN
//swallow	WITHOUT_CLASSIFICATION	0.997954794544069	WITHOUT_CLASSIFICATION	0.002045205455931084	DESIGN
/* local variable | this | */	WITHOUT_CLASSIFICATION	0.9998973261193002	WITHOUT_CLASSIFICATION	1.0267388069988591E-4	DESIGN
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.999937802840535	WITHOUT_CLASSIFICATION	6.219715946500812E-5	DESIGN
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.999937802840535	WITHOUT_CLASSIFICATION	6.219715946500812E-5	DESIGN
// getfield // get field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9998837570753986	WITHOUT_CLASSIFICATION	1.1624292460136429E-4	DESIGN
// areturn // return the value of the field	WITHOUT_CLASSIFICATION	0.9997925393239462	WITHOUT_CLASSIFICATION	2.074606760537697E-4	DESIGN
/* local variables | this | callback | */	WITHOUT_CLASSIFICATION	0.9904092430402845	WITHOUT_CLASSIFICATION	0.009590756959715398	DESIGN
// aload_1 // load callback	WITHOUT_CLASSIFICATION	0.9999763377987513	WITHOUT_CLASSIFICATION	2.366220124873801E-5	DESIGN
// putfield // put field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9998900955620819	WITHOUT_CLASSIFICATION	1.0990443791822497E-4	DESIGN
// case of non-static field	WITHOUT_CLASSIFICATION	0.9999944569036628	WITHOUT_CLASSIFICATION	5.543096337154649E-6	DESIGN
// getfield // get each field	WITHOUT_CLASSIFICATION	0.9999954022169217	WITHOUT_CLASSIFICATION	4.597783078264416E-6	DESIGN
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9993476892062977	WITHOUT_CLASSIFICATION	6.523107937022425E-4	DESIGN
// ifnonnull	WITHOUT_CLASSIFICATION	0.9997952314504504	WITHOUT_CLASSIFICATION	2.047685495496311E-4	DESIGN
// *return // each type	WITHOUT_CLASSIFICATION	0.9999769882865437	WITHOUT_CLASSIFICATION	2.3011713456414045E-5	DESIGN
// *return // each type	WITHOUT_CLASSIFICATION	0.9999769882865437	WITHOUT_CLASSIFICATION	2.3011713456414045E-5	DESIGN
// *store_1 // each type	WITHOUT_CLASSIFICATION	0.9999769882865437	WITHOUT_CLASSIFICATION	2.3011713456414045E-5	DESIGN
// ldc // name of the field	WITHOUT_CLASSIFICATION	0.9999879506878308	WITHOUT_CLASSIFICATION	1.2049312169230614E-5	DESIGN
// *load_1 // each type	WITHOUT_CLASSIFICATION	0.9999769882865437	WITHOUT_CLASSIFICATION	2.3011713456414045E-5	DESIGN
// invokeinterface // invoke Callback.read*() // each type	WITHOUT_CLASSIFICATION	0.9992023036281996	WITHOUT_CLASSIFICATION	7.976963718004111E-4	DESIGN
// int	WITHOUT_CLASSIFICATION	0.9997598640228204	WITHOUT_CLASSIFICATION	2.401359771795974E-4	DESIGN
// return	WITHOUT_CLASSIFICATION	0.9998525879282664	WITHOUT_CLASSIFICATION	1.4741207173370836E-4	DESIGN
// dup	WITHOUT_CLASSIFICATION	0.999758407950086	WITHOUT_CLASSIFICATION	2.4159204991409242E-4	DESIGN
// invokeinterface	WITHOUT_CLASSIFICATION	0.9997952314504504	WITHOUT_CLASSIFICATION	2.047685495496311E-4	DESIGN
// checkcast	WITHOUT_CLASSIFICATION	0.9997952314504504	WITHOUT_CLASSIFICATION	2.047685495496311E-4	DESIGN
// checkcast	WITHOUT_CLASSIFICATION	0.9997952314504504	WITHOUT_CLASSIFICATION	2.047685495496311E-4	DESIGN
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9993232207011862	WITHOUT_CLASSIFICATION	6.767792988138589E-4	DESIGN
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9993232207011862	WITHOUT_CLASSIFICATION	6.767792988138589E-4	DESIGN
// ifnonnull (label1)	WITHOUT_CLASSIFICATION	0.9999811849861537	WITHOUT_CLASSIFICATION	1.8815013846229537E-5	DESIGN
// *load_1	WITHOUT_CLASSIFICATION	0.999758407950086	WITHOUT_CLASSIFICATION	2.4159204991409242E-4	DESIGN
// *load_1	WITHOUT_CLASSIFICATION	0.999758407950086	WITHOUT_CLASSIFICATION	2.4159204991409242E-4	DESIGN
// putfield	WITHOUT_CLASSIFICATION	0.9997952314504504	WITHOUT_CLASSIFICATION	2.047685495496311E-4	DESIGN
// return ;	WITHOUT_CLASSIFICATION	0.9998750582946804	WITHOUT_CLASSIFICATION	1.249417053195826E-4	DESIGN
// ldc // field name	WITHOUT_CLASSIFICATION	0.9996185733791364	WITHOUT_CLASSIFICATION	3.8142662086361185E-4	DESIGN
// getfield // old value of the field	WITHOUT_CLASSIFICATION	0.9996505090726244	WITHOUT_CLASSIFICATION	3.4949092737565933E-4	DESIGN
// invokeinterface // callback.write*(..)	WITHOUT_CLASSIFICATION	0.9993232207011862	WITHOUT_CLASSIFICATION	6.767792988138589E-4	DESIGN
// reference type	WITHOUT_CLASSIFICATION	0.9997611061391857	WITHOUT_CLASSIFICATION	2.3889386081437915E-4	DESIGN
// reference type	WITHOUT_CLASSIFICATION	0.9997611061391857	WITHOUT_CLASSIFICATION	2.3889386081437915E-4	DESIGN
// not array	WITHOUT_CLASSIFICATION	0.9998706496994254	WITHOUT_CLASSIFICATION	1.2935030057458342E-4	DESIGN
// array of reference type	WITHOUT_CLASSIFICATION	0.9999834319404928	WITHOUT_CLASSIFICATION	1.6568059507286527E-5	DESIGN
// boolean	WITHOUT_CLASSIFICATION	0.9998868066515981	WITHOUT_CLASSIFICATION	1.1319334840181576E-4	DESIGN
// byte	WITHOUT_CLASSIFICATION	0.9997411420864544	WITHOUT_CLASSIFICATION	2.5885791354560324E-4	DESIGN
// char	WITHOUT_CLASSIFICATION	0.9997635912613214	WITHOUT_CLASSIFICATION	2.364087386785607E-4	DESIGN
// short	WITHOUT_CLASSIFICATION	0.9997589500004428	WITHOUT_CLASSIFICATION	2.41049999557179E-4	DESIGN
// double	WITHOUT_CLASSIFICATION	0.9999081876257431	WITHOUT_CLASSIFICATION	9.181237425693283E-5	DESIGN
// float	WITHOUT_CLASSIFICATION	0.999758407950086	WITHOUT_CLASSIFICATION	2.4159204991409242E-4	DESIGN
// float	WITHOUT_CLASSIFICATION	0.999758407950086	WITHOUT_CLASSIFICATION	2.4159204991409242E-4	DESIGN
// long	WITHOUT_CLASSIFICATION	0.9996952367257305	WITHOUT_CLASSIFICATION	3.0476327426955075E-4	DESIGN
// long	WITHOUT_CLASSIFICATION	0.9996952367257305	WITHOUT_CLASSIFICATION	3.0476327426955075E-4	DESIGN
// bad type	WITHOUT_CLASSIFICATION	0.9992795157576637	WITHOUT_CLASSIFICATION	7.204842423363371E-4	DESIGN
// bad type	WITHOUT_CLASSIFICATION	0.9992795157576637	WITHOUT_CLASSIFICATION	7.204842423363371E-4	DESIGN
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9993560202870219	WITHOUT_CLASSIFICATION	6.439797129781876E-4	DESIGN
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9993560202870219	WITHOUT_CLASSIFICATION	6.439797129781876E-4	DESIGN
// reference type	WITHOUT_CLASSIFICATION	0.9997611061391857	WITHOUT_CLASSIFICATION	2.3889386081437915E-4	DESIGN
// double	WITHOUT_CLASSIFICATION	0.9999081876257431	WITHOUT_CLASSIFICATION	9.181237425693283E-5	DESIGN
// float	WITHOUT_CLASSIFICATION	0.999758407950086	WITHOUT_CLASSIFICATION	2.4159204991409242E-4	DESIGN
// float	WITHOUT_CLASSIFICATION	0.999758407950086	WITHOUT_CLASSIFICATION	2.4159204991409242E-4	DESIGN
// long	WITHOUT_CLASSIFICATION	0.9996952367257305	WITHOUT_CLASSIFICATION	3.0476327426955075E-4	DESIGN
// bad type	WITHOUT_CLASSIFICATION	0.9992795157576637	WITHOUT_CLASSIFICATION	7.204842423363371E-4	DESIGN
// bad type	WITHOUT_CLASSIFICATION	0.9992795157576637	WITHOUT_CLASSIFICATION	7.204842423363371E-4	DESIGN
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9993560202870219	WITHOUT_CLASSIFICATION	6.439797129781876E-4	DESIGN
// skip finalize methods	WITHOUT_CLASSIFICATION	0.9999790827803794	WITHOUT_CLASSIFICATION	2.0917219620550756E-5	DESIGN
//Mainly for OSCache	WITHOUT_CLASSIFICATION	0.9964989613420095	WITHOUT_CLASSIFICATION	0.0035010386579904535	DESIGN
//decrement the lock	WITHOUT_CLASSIFICATION	0.9989778664433495	WITHOUT_CLASSIFICATION	0.0010221335566504878	DESIGN
// create new lock that times out immediately	WITHOUT_CLASSIFICATION	0.9998354783528922	WITHOUT_CLASSIFICATION	1.6452164710780944E-4	DESIGN
//recache the updated state	WITHOUT_CLASSIFICATION	0.9999451188337494	WITHOUT_CLASSIFICATION	5.488116625053349E-5	DESIGN
// noop	WITHOUT_CLASSIFICATION	0.9997593370235994	WITHOUT_CLASSIFICATION	2.4066297640051892E-4	DESIGN
//null clientLock is remotely possible but will never happen in practice	WITHOUT_CLASSIFICATION	0.9989988398124701	WITHOUT_CLASSIFICATION	0.0010011601875299695	DESIGN
// we really could refresh the item if it // is not a lock, but it might be slower //return freshTimestamp < txTimestamp	WITHOUT_CLASSIFICATION	0.9998636822928935	WITHOUT_CLASSIFICATION	1.3631770710646426E-4	DESIGN
//by requiring <, we rely on lock timeout in the case of an unsuccessful update!	WITHOUT_CLASSIFICATION	0.9946764625151749	WITHOUT_CLASSIFICATION	0.005323537484825078	DESIGN
// the user provided resulttransformer, not the one used with "select new". Here to avoid mangling // transformed/non-transformed results.	WITHOUT_CLASSIFICATION	0.9995179209740218	WITHOUT_CLASSIFICATION	4.8207902597816114E-4	DESIGN
// disassemble positional parameters	WITHOUT_CLASSIFICATION	0.9995328983347447	WITHOUT_CLASSIFICATION	4.671016652553755E-4	DESIGN
// disassemble named parameters	WITHOUT_CLASSIFICATION	0.9997007663033745	WITHOUT_CLASSIFICATION	2.99233696625471E-4	DESIGN
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9982660483085283	WITHOUT_CLASSIFICATION	0.0017339516914716315	DESIGN
// noop	WITHOUT_CLASSIFICATION	0.9997593370235994	WITHOUT_CLASSIFICATION	2.4066297640051892E-4	DESIGN
//noop	WITHOUT_CLASSIFICATION	0.997954794544069	WITHOUT_CLASSIFICATION	0.002045205455931084	DESIGN
//noop	WITHOUT_CLASSIFICATION	0.997954794544069	WITHOUT_CLASSIFICATION	0.002045205455931084	DESIGN
// this is called from SettingsFactory irregardless; trivial to simply disregard	WITHOUT_CLASSIFICATION	0.9963871949551272	WITHOUT_CLASSIFICATION	0.0036128050448727056	DESIGN
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9996455055157357	WITHOUT_CLASSIFICATION	3.5449448426437427E-4	DESIGN
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9996455055157357	WITHOUT_CLASSIFICATION	3.5449448426437427E-4	DESIGN
//throw new UnsupportedOperationException("Can't write to a readonly object");	WITHOUT_CLASSIFICATION	0.9894318028939332	WITHOUT_CLASSIFICATION	0.01056819710606685	DESIGN
//assembled state gets put in a new array (we read from cache by value!)	WITHOUT_CLASSIFICATION	0.9833405472682005	WITHOUT_CLASSIFICATION	0.016659452731799508	DESIGN
//persister.setIdentifier(result, id); //before calling interceptor, for consistency with normal load	WITHOUT_CLASSIFICATION	0.9829855390525335	WITHOUT_CLASSIFICATION	0.01701446094746652	DESIGN
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9990471731897953	WITHOUT_CLASSIFICATION	9.528268102046276E-4	DESIGN
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9990471731897953	WITHOUT_CLASSIFICATION	9.528268102046276E-4	DESIGN
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.999846554573016	WITHOUT_CLASSIFICATION	1.534454269840362E-4	DESIGN
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9996890276283769	WITHOUT_CLASSIFICATION	3.1097237162317425E-4	DESIGN
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9996890276283769	WITHOUT_CLASSIFICATION	3.1097237162317425E-4	DESIGN
// classes mentioned in extends not available - so put it in queue	WITHOUT_CLASSIFICATION	0.9975375423484119	WITHOUT_CLASSIFICATION	0.002462457651588078	DESIGN
// get meta's from <hibernate-mapping>	WITHOUT_CLASSIFICATION	0.9992678202085294	WITHOUT_CLASSIFICATION	7.321797914705446E-4	DESIGN
// get meta's from <class>	WITHOUT_CLASSIFICATION	0.9999796437103509	WITHOUT_CLASSIFICATION	2.035628964912929E-5	DESIGN
// DB-OBJECTNAME	WITHOUT_CLASSIFICATION	0.9997952314504504	WITHOUT_CLASSIFICATION	2.047685495496311E-4	DESIGN
// MUTABLE	WITHOUT_CLASSIFICATION	0.999758407950086	WITHOUT_CLASSIFICATION	2.4159204991409242E-4	DESIGN
// WHERE	WITHOUT_CLASSIFICATION	0.999758407950086	WITHOUT_CLASSIFICATION	2.4159204991409242E-4	DESIGN
// CHECK	WITHOUT_CLASSIFICATION	0.999758407950086	WITHOUT_CLASSIFICATION	2.4159204991409242E-4	DESIGN
// POLYMORPHISM	WITHOUT_CLASSIFICATION	0.9997952314504504	WITHOUT_CLASSIFICATION	2.047685495496311E-4	DESIGN
// TODO:	WITHOUT_CLASSIFICATION	0.7102526536862085	WITHOUT_CLASSIFICATION	0.2897473463137915	DESIGN
// ID	WITHOUT_CLASSIFICATION	0.9996865328872707	WITHOUT_CLASSIFICATION	3.134671127292606E-4	DESIGN
// VERSION / TIMESTAMP	WITHOUT_CLASSIFICATION	0.9999881068332652	WITHOUT_CLASSIFICATION	1.1893166734838345E-5	DESIGN
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9997952314504504	WITHOUT_CLASSIFICATION	2.047685495496311E-4	DESIGN
// Primary key constraint	WITHOUT_CLASSIFICATION	0.9999840911494713	WITHOUT_CLASSIFICATION	1.5908850528727933E-5	DESIGN
// this is either a <version/> tag with no type attribute, // or a <timestamp/> tag	WITHOUT_CLASSIFICATION	0.9988363254470254	WITHOUT_CLASSIFICATION	0.0011636745529747	DESIGN
// for version properties marked as being generated, make sure they are "always" // generated; aka, "insert" is invalid; this is dis-allowed by the DTD, // but just to make sure...	WITHOUT_CLASSIFICATION	0.9805209914254626	WITHOUT_CLASSIFICATION	0.019479008574537483	DESIGN
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9997952314504504	WITHOUT_CLASSIFICATION	2.047685495496311E-4	DESIGN
// ( (Column) discrim.getColumnIterator().next() ).setType(type);	WITHOUT_CLASSIFICATION	0.9991008237057385	WITHOUT_CLASSIFICATION	8.991762942616445E-4	DESIGN
// go ahead and set the lazy here, since pojo.proxy can override it.	WITHOUT_CLASSIFICATION	0.9999273092993088	WITHOUT_CLASSIFICATION	7.269070069117289E-5	DESIGN
// DYNAMIC UPDATE	WITHOUT_CLASSIFICATION	0.9997952314504504	WITHOUT_CLASSIFICATION	2.047685495496311E-4	DESIGN
// IMPORT	WITHOUT_CLASSIFICATION	0.999758407950086	WITHOUT_CLASSIFICATION	2.4159204991409242E-4	DESIGN
// BATCH SIZE	WITHOUT_CLASSIFICATION	0.9997952314504504	WITHOUT_CLASSIFICATION	2.047685495496311E-4	DESIGN
// SELECT BEFORE UPDATE	WITHOUT_CLASSIFICATION	0.9999811849861537	WITHOUT_CLASSIFICATION	1.8815013846229537E-5	DESIGN
// OPTIMISTIC LOCK MODE	WITHOUT_CLASSIFICATION	0.9999811849861537	WITHOUT_CLASSIFICATION	1.8815013846229537E-5	DESIGN
// PERSISTER	WITHOUT_CLASSIFICATION	0.9997952314504504	WITHOUT_CLASSIFICATION	2.047685495496311E-4	DESIGN
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9997970330945055	WITHOUT_CLASSIFICATION	2.0296690549448284E-4	DESIGN
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999796437103509	WITHOUT_CLASSIFICATION	2.035628964912929E-5	DESIGN
// properties	WITHOUT_CLASSIFICATION	0.9998335324318793	WITHOUT_CLASSIFICATION	1.6646756812072817E-4	DESIGN
// joined subclasses	WITHOUT_CLASSIFICATION	0.999812407115923	WITHOUT_CLASSIFICATION	1.8759288407702043E-4	DESIGN
// KEY	WITHOUT_CLASSIFICATION	0.999758407950086	WITHOUT_CLASSIFICATION	2.4159204991409242E-4	DESIGN
// CHECK	WITHOUT_CLASSIFICATION	0.999758407950086	WITHOUT_CLASSIFICATION	2.4159204991409242E-4	DESIGN
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9997970330945055	WITHOUT_CLASSIFICATION	2.0296690549448284E-4	DESIGN
// properties	WITHOUT_CLASSIFICATION	0.9998335324318793	WITHOUT_CLASSIFICATION	1.6646756812072817E-4	DESIGN
// KEY	WITHOUT_CLASSIFICATION	0.999758407950086	WITHOUT_CLASSIFICATION	2.4159204991409242E-4	DESIGN
// model.getKey().setType( new Type( model.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9992650837704967	WITHOUT_CLASSIFICATION	7.349162295032764E-4	DESIGN
// TABLENAME	WITHOUT_CLASSIFICATION	0.9997952314504504	WITHOUT_CLASSIFICATION	2.047685495496311E-4	DESIGN
// join.getKey().setType( new Type( lazz.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9992650837704967	WITHOUT_CLASSIFICATION	7.349162295032764E-4	DESIGN
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9997952314504504	WITHOUT_CLASSIFICATION	2.047685495496311E-4	DESIGN
// COLUMN(S)	WITHOUT_CLASSIFICATION	0.9997952314504504	WITHOUT_CLASSIFICATION	2.047685495496311E-4	DESIGN
// column index	WITHOUT_CLASSIFICATION	0.9998477052031431	WITHOUT_CLASSIFICATION	1.5229479685678537E-4	DESIGN
//column unique-key	WITHOUT_CLASSIFICATION	0.9982660483085283	WITHOUT_CLASSIFICATION	0.0017339516914716315	DESIGN
// automatically makes a column with the default name if none is specifed by XML	WITHOUT_CLASSIFICATION	0.9986069446926461	WITHOUT_CLASSIFICATION	0.0013930553073539132	DESIGN
// for an any	WITHOUT_CLASSIFICATION	0.9997366494893539	WITHOUT_CLASSIFICATION	2.633505106460908E-4	DESIGN
// insertable simply because that is the user did not specify // anything; just override it	WITHOUT_CLASSIFICATION	0.999891882874177	WITHOUT_CLASSIFICATION	1.0811712582291328E-4	DESIGN
// the user specifically supplied insert="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9997197305145915	WITHOUT_CLASSIFICATION	2.8026948540851485E-4	DESIGN
// properties generated on update can never be updateable...	WITHOUT_CLASSIFICATION	0.9998790459197409	WITHOUT_CLASSIFICATION	1.2095408025909693E-4	DESIGN
// updateable only because the user did not specify  // anything; just override it	WITHOUT_CLASSIFICATION	0.999961064996835	WITHOUT_CLASSIFICATION	3.8935003164892806E-5	DESIGN
// the user specifically supplied update="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9997197305145915	WITHOUT_CLASSIFICATION	2.8026948540851485E-4	DESIGN
// ROLENAME	WITHOUT_CLASSIFICATION	0.9997952314504504	WITHOUT_CLASSIFICATION	2.047685495496311E-4	DESIGN
// FETCH STRATEGY	WITHOUT_CLASSIFICATION	0.9997952314504504	WITHOUT_CLASSIFICATION	2.047685495496311E-4	DESIGN
// TABLE	WITHOUT_CLASSIFICATION	0.999758407950086	WITHOUT_CLASSIFICATION	2.4159204991409242E-4	DESIGN
//tableName = mappings.getNamingStrategy().propertyToTableName( className, path );	WITHOUT_CLASSIFICATION	0.9996155889121894	WITHOUT_CLASSIFICATION	3.8441108781065065E-4	DESIGN
// SORT	WITHOUT_CLASSIFICATION	0.999758407950086	WITHOUT_CLASSIFICATION	2.4159204991409242E-4	DESIGN
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9997970330945055	WITHOUT_CLASSIFICATION	2.0296690549448284E-4	DESIGN
// unsorted, natural, comparator.class.name	WITHOUT_CLASSIFICATION	0.9993232207011862	WITHOUT_CLASSIFICATION	6.767792988138589E-4	DESIGN
// ORPHAN DELETE (used for programmer error detection)	WITHOUT_CLASSIFICATION	0.9979457438328247	WITHOUT_CLASSIFICATION	0.0020542561671752957	DESIGN
// set up second pass	WITHOUT_CLASSIFICATION	0.9999940208070592	WITHOUT_CLASSIFICATION	5.979192940777531E-6	DESIGN
// an "embedded" component (composite ids and unique) // note that this does not handle nested components	WITHOUT_CLASSIFICATION	0.9944739745052152	WITHOUT_CLASSIFICATION	0.005526025494784658	DESIGN
// a nested composite element	WITHOUT_CLASSIFICATION	0.9999020820955494	WITHOUT_CLASSIFICATION	9.791790445062234E-5	DESIGN
// for an any // we will have to use reflection	WITHOUT_CLASSIFICATION	0.9974608917344017	WITHOUT_CLASSIFICATION	0.0025391082655983207	DESIGN
//NOTE SPECIAL CASE: // one-to-one constrained=false cannot be proxied, // so default to join and non-lazy	WITHOUT_CLASSIFICATION	0.9990614271770973	WITHOUT_CLASSIFICATION	9.385728229025457E-4	DESIGN
// use old (HB 2.1) defaults if outer-join is specified	WITHOUT_CLASSIFICATION	0.9989067648338651	WITHOUT_CLASSIFICATION	0.0010932351661348753	DESIGN
//lazy = !join;	WITHOUT_CLASSIFICATION	0.999792805537973	WITHOUT_CLASSIFICATION	2.0719446202692367E-4	DESIGN
// GENERATOR	WITHOUT_CLASSIFICATION	0.9997952314504504	WITHOUT_CLASSIFICATION	2.047685495496311E-4	DESIGN
// ID UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9997343086852372	WITHOUT_CLASSIFICATION	2.6569131476285703E-4	DESIGN
// VERSION UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999811849861537	WITHOUT_CLASSIFICATION	1.8815013846229537E-5	DESIGN
// not necessarily a *unique* property reference	WITHOUT_CLASSIFICATION	0.9998023121342865	WITHOUT_CLASSIFICATION	1.976878657135404E-4	DESIGN
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9991008237057385	WITHOUT_CLASSIFICATION	8.991762942616445E-4	DESIGN
// contained elements:	WITHOUT_CLASSIFICATION	0.9999743543101494	WITHOUT_CLASSIFICATION	2.5645689850653794E-5	DESIGN
// for non-inverse one-to-many, with a not-null fk, add a backref!	WITHOUT_CLASSIFICATION	0.9989012739734758	WITHOUT_CLASSIFICATION	0.001098726026524129	DESIGN
// Bind the where	WITHOUT_CLASSIFICATION	0.9997950801027183	WITHOUT_CLASSIFICATION	2.0491989728160242E-4	DESIGN
// Bind the order-by	WITHOUT_CLASSIFICATION	0.9999233581499125	WITHOUT_CLASSIFICATION	7.664185008744881E-5	DESIGN
// Bind the filters	WITHOUT_CLASSIFICATION	0.9999233581499125	WITHOUT_CLASSIFICATION	7.664185008744881E-5	DESIGN
// overriding inherited meta attribute. HBX-621 & HBX-793	WITHOUT_CLASSIFICATION	0.9993338489362757	WITHOUT_CLASSIFICATION	6.661510637242458E-4	DESIGN
// first, iterate over all elements capable of defining an extends attribute // collecting all found extends references if they cannot be resolved // against the already processed mappings.	WITHOUT_CLASSIFICATION	0.9999513679633104	WITHOUT_CLASSIFICATION	4.86320366895399E-5	DESIGN
// mappings might contain either the "raw" extends name (in the case of // an entity-name mapping) or a FQN (in the case of a POJO mapping).	WITHOUT_CLASSIFICATION	0.9996248208859174	WITHOUT_CLASSIFICATION	3.751791140824827E-4	DESIGN
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9971356283378814	WITHOUT_CLASSIFICATION	0.002864371662118551	DESIGN
//SessionFactory name:	WITHOUT_CLASSIFICATION	0.9998420580992776	WITHOUT_CLASSIFICATION	1.5794190072238184E-4	DESIGN
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9931393709974283	WITHOUT_CLASSIFICATION	0.00686062900257167	DESIGN
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9931393709974283	WITHOUT_CLASSIFICATION	0.00686062900257167	DESIGN
//Interrogate JDBC metadata	WITHOUT_CLASSIFICATION	0.9998404554700752	WITHOUT_CLASSIFICATION	1.595445299249041E-4	DESIGN
// user supplied JDBC connections	WITHOUT_CLASSIFICATION	0.999716367046213	WITHOUT_CLASSIFICATION	2.836329537869375E-4	DESIGN
//use dialect default properties	WITHOUT_CLASSIFICATION	0.9953601376729201	WITHOUT_CLASSIFICATION	0.004639862327079919	DESIGN
// Transaction settings:	WITHOUT_CLASSIFICATION	0.9999812123867148	WITHOUT_CLASSIFICATION	1.878761328521188E-5	DESIGN
//SQL Generation settings:	WITHOUT_CLASSIFICATION	0.9998407295807904	WITHOUT_CLASSIFICATION	1.5927041920968133E-4	DESIGN
//Query parser settings:	WITHOUT_CLASSIFICATION	0.9998452221525187	WITHOUT_CLASSIFICATION	1.5477784748127408E-4	DESIGN
// Second-level / query cache:	WITHOUT_CLASSIFICATION	0.9999888134538897	WITHOUT_CLASSIFICATION	1.1186546110194283E-5	DESIGN
// The cache provider is needed when we either have second-level cache enabled // or query cache enabled.  Note that useSecondLevelCache is enabled by default	WITHOUT_CLASSIFICATION	0.9996145580021765	WITHOUT_CLASSIFICATION	3.8544199782358644E-4	DESIGN
//SQL Exception converter:	WITHOUT_CLASSIFICATION	0.9998833977446379	WITHOUT_CLASSIFICATION	1.1660225536219604E-4	DESIGN
//Statistics and logging:	WITHOUT_CLASSIFICATION	0.999800185961633	WITHOUT_CLASSIFICATION	1.998140383671269E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.999758407950086	WITHOUT_CLASSIFICATION	2.4159204991409242E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.999758407950086	WITHOUT_CLASSIFICATION	2.4159204991409242E-4	DESIGN
//Schema export:	WITHOUT_CLASSIFICATION	0.9982660483085283	WITHOUT_CLASSIFICATION	0.0017339516914716315	DESIGN
//	WITHOUT_CLASSIFICATION	0.999758407950086	WITHOUT_CLASSIFICATION	2.4159204991409242E-4	DESIGN
// legacy behavior, apply the bridge...	WITHOUT_CLASSIFICATION	0.9981135320318493	WITHOUT_CLASSIFICATION	0.0018864679681507403	DESIGN
// maybe a concrete SQLpropertyresult type, but Map is exactly what is required at the moment	WITHOUT_CLASSIFICATION	0.994349202688486	WITHOUT_CLASSIFICATION	0.005650797311513914	DESIGN
//if dotted and not load-collection nor return-join //regular property	WITHOUT_CLASSIFICATION	0.9963079594642463	WITHOUT_CLASSIFICATION	0.0036920405357537185	DESIGN
//	WITHOUT_CLASSIFICATION	0.999758407950086	WITHOUT_CLASSIFICATION	2.4159204991409242E-4	DESIGN
// public getters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9991421978435948	WITHOUT_CLASSIFICATION	8.578021564051952E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.999758407950086	WITHOUT_CLASSIFICATION	2.4159204991409242E-4	DESIGN
// package protected setters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9983805967693311	WITHOUT_CLASSIFICATION	0.0016194032306689067	DESIGN
//	WITHOUT_CLASSIFICATION	0.999758407950086	WITHOUT_CLASSIFICATION	2.4159204991409242E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.999758407950086	WITHOUT_CLASSIFICATION	2.4159204991409242E-4	DESIGN
// using local since the inheritedMetas at this point is not the correct map since it is always the empty map	WITHOUT_CLASSIFICATION	0.9985369061579258	WITHOUT_CLASSIFICATION	0.0014630938420741987	DESIGN
//	WITHOUT_CLASSIFICATION	0.999758407950086	WITHOUT_CLASSIFICATION	2.4159204991409242E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.999758407950086	WITHOUT_CLASSIFICATION	2.4159204991409242E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.999758407950086	WITHOUT_CLASSIFICATION	2.4159204991409242E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.999758407950086	WITHOUT_CLASSIFICATION	2.4159204991409242E-4	DESIGN
// if doc is null, then for whatever reason, the cached file cannot be used...	WITHOUT_CLASSIFICATION	0.9996660175486604	WITHOUT_CLASSIFICATION	3.3398245133957945E-4	DESIGN
// drop them in reverse order in case db needs it done that way...	WITHOUT_CLASSIFICATION	0.9881628386792393	WITHOUT_CLASSIFICATION	0.011837161320760724	DESIGN
//	WITHOUT_CLASSIFICATION	0.999758407950086	WITHOUT_CLASSIFICATION	2.4159204991409242E-4	DESIGN
// This method may be called many times!!	WITHOUT_CLASSIFICATION	0.9952204973970692	WITHOUT_CLASSIFICATION	0.004779502602930805	DESIGN
//	WITHOUT_CLASSIFICATION	0.999758407950086	WITHOUT_CLASSIFICATION	2.4159204991409242E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.999758407950086	WITHOUT_CLASSIFICATION	2.4159204991409242E-4	DESIGN
// found	WITHOUT_CLASSIFICATION	0.9998133218964147	WITHOUT_CLASSIFICATION	1.8667810358538714E-4	DESIGN
// found	WITHOUT_CLASSIFICATION	0.9998133218964147	WITHOUT_CLASSIFICATION	1.8667810358538714E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.999758407950086	WITHOUT_CLASSIFICATION	2.4159204991409242E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.999758407950086	WITHOUT_CLASSIFICATION	2.4159204991409242E-4	DESIGN
//<String, String>	WITHOUT_CLASSIFICATION	0.9982719608909579	WITHOUT_CLASSIFICATION	0.001728039109042038	DESIGN
//<String, String>	WITHOUT_CLASSIFICATION	0.9982719608909579	WITHOUT_CLASSIFICATION	0.001728039109042038	DESIGN
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9971356283378814	WITHOUT_CLASSIFICATION	0.002864371662118551	DESIGN
//Set USE_REFLECTION_OPTIMIZER to false to fix HHH-227	WITHOUT_CLASSIFICATION	0.8769149579968633	WITHOUT_CLASSIFICATION	0.12308504200313665	DESIGN
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9971345208256721	WITHOUT_CLASSIFICATION	0.0028654791743278913	DESIGN
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9993152066625991	WITHOUT_CLASSIFICATION	6.847933374010019E-4	DESIGN
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999681029284155	WITHOUT_CLASSIFICATION	3.189707158448681E-5	DESIGN
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9971345208256721	WITHOUT_CLASSIFICATION	0.0028654791743278913	DESIGN
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9993152066625991	WITHOUT_CLASSIFICATION	6.847933374010019E-4	DESIGN
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.973629146293423	WITHOUT_CLASSIFICATION	0.026370853706576998	DESIGN
//maintain correct duplication if loaded in a cartesian product	WITHOUT_CLASSIFICATION	0.9812847743293177	WITHOUT_CLASSIFICATION	0.018715225670682244	DESIGN
// the element has been removed from the set	WITHOUT_CLASSIFICATION	0.9987617177409216	WITHOUT_CLASSIFICATION	0.0012382822590784413	DESIGN
// the element has changed	WITHOUT_CLASSIFICATION	0.9999983735867132	WITHOUT_CLASSIFICATION	1.6264132868012893E-6	DESIGN
//Careful: these methods do not initialize the collection.	WITHOUT_CLASSIFICATION	0.9932624007060475	WITHOUT_CLASSIFICATION	0.006737599293952438	DESIGN
//needed so that we remove this collection from the second-level cache	WITHOUT_CLASSIFICATION	0.9176814108713973	WITHOUT_CLASSIFICATION	0.08231858912860268	DESIGN
// override on some subclasses	WITHOUT_CLASSIFICATION	0.9999805517715435	WITHOUT_CLASSIFICATION	1.94482284564864E-5	DESIGN
//override on some subclasses	WITHOUT_CLASSIFICATION	0.9998456207459023	WITHOUT_CLASSIFICATION	1.543792540976078E-4	DESIGN
//do this bit after setting initialized to true or it will recurse	WITHOUT_CLASSIFICATION	0.9960782639122158	WITHOUT_CLASSIFICATION	0.003921736087784259	DESIGN
// short-circuit(s) // no new elements, the old list contains only Orphans // no old elements, so no Orphans neither	WITHOUT_CLASSIFICATION	0.99999154801983	WITHOUT_CLASSIFICATION	8.451980170013753E-6	DESIGN
// create the collection holding the Orphans	WITHOUT_CLASSIFICATION	0.9988103016554182	WITHOUT_CLASSIFICATION	0.0011896983445818174	DESIGN
// collect EntityIdentifier(s) of the *current* elements - add them into a HashSet for fast access	WITHOUT_CLASSIFICATION	0.995991734713773	WITHOUT_CLASSIFICATION	0.004008265286226984	DESIGN
// iterate over the *old* list	WITHOUT_CLASSIFICATION	0.9999917784406127	WITHOUT_CLASSIFICATION	8.2215593873711E-6	DESIGN
/*(array==null) ? tempList.size() :*/	WITHOUT_CLASSIFICATION	0.9774137905605838	WITHOUT_CLASSIFICATION	0.022586209439416256	DESIGN
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999681029284155	WITHOUT_CLASSIFICATION	3.189707158448681E-5	DESIGN
/*(array==null) ? tempList.get(i) :*/	WITHOUT_CLASSIFICATION	0.9774137905605838	WITHOUT_CLASSIFICATION	0.022586209439416256	DESIGN
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9999458319949113	WITHOUT_CLASSIFICATION	5.4168005088603035E-5	DESIGN
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9999458319949113	WITHOUT_CLASSIFICATION	5.4168005088603035E-5	DESIGN
// amazingly, these two will work because AbstractCollection // uses iterator() to fill the array	WITHOUT_CLASSIFICATION	0.9995722006663162	WITHOUT_CLASSIFICATION	4.277993336838013E-4	DESIGN
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.973629146293423	WITHOUT_CLASSIFICATION	0.026370853706576998	DESIGN
// finally, what it's all about...	WITHOUT_CLASSIFICATION	0.9984324720727344	WITHOUT_CLASSIFICATION	0.0015675279272655133	DESIGN
// note that if we load this collection from a cartesian product // the multiplicity would be broken ... so use an idbag instead	WITHOUT_CLASSIFICATION	0.791078814803763	WITHOUT_CLASSIFICATION	0.208921185196237	DESIGN
// Anyway, here we implement <set> semantics for a // <one-to-many> <bag>!	WITHOUT_CLASSIFICATION	0.7173655254974594	WITHOUT_CLASSIFICATION	0.2826344745025406	DESIGN
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9950875768492784	WITHOUT_CLASSIFICATION	0.0049124231507216565	DESIGN
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.6738907773523123	DESIGN	0.3261092226476878	WITHOUT_CLASSIFICATION
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.973629146293423	WITHOUT_CLASSIFICATION	0.026370853706576998	DESIGN
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9950875768492784	WITHOUT_CLASSIFICATION	0.0049124231507216565	DESIGN
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.6738907773523123	DESIGN	0.3261092226476878	WITHOUT_CLASSIFICATION
/*public boolean equals(Object other) {	WITHOUT_CLASSIFICATION	0.9973530944671939	WITHOUT_CLASSIFICATION	0.0026469055328061587	DESIGN
// List OPERATIONS:	WITHOUT_CLASSIFICATION	0.9997973231457412	WITHOUT_CLASSIFICATION	2.0267685425877287E-4	DESIGN
//pad with nulls from the current last element up to the new index	WITHOUT_CLASSIFICATION	0.9964294950621781	WITHOUT_CLASSIFICATION	0.0035705049378217985	DESIGN
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.973629146293423	WITHOUT_CLASSIFICATION	0.026370853706576998	DESIGN
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.973629146293423	WITHOUT_CLASSIFICATION	0.026370853706576998	DESIGN
// from Map	WITHOUT_CLASSIFICATION	0.9996157901340512	WITHOUT_CLASSIFICATION	3.8420986594878235E-4	DESIGN
// from SortedMap	WITHOUT_CLASSIFICATION	0.9996997306900683	WITHOUT_CLASSIFICATION	3.0026930993167026E-4	DESIGN
//inject the data	WITHOUT_CLASSIFICATION	0.9991049719784112	WITHOUT_CLASSIFICATION	8.950280215888074E-4	DESIGN
// cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999803377497404	WITHOUT_CLASSIFICATION	1.9662250259661223E-5	DESIGN
//default pool size 20	WITHOUT_CLASSIFICATION	0.9999320053219375	WITHOUT_CLASSIFICATION	6.799467806246281E-5	DESIGN
// trying via forName() first to be as close to DriverManager's semantics	WITHOUT_CLASSIFICATION	0.9990090080605823	WITHOUT_CLASSIFICATION	9.909919394177518E-4	DESIGN
// if debug level is enabled, then log the password, otherwise mask it	WITHOUT_CLASSIFICATION	0.9995110380433742	WITHOUT_CLASSIFICATION	4.889619566257308E-4	DESIGN
// register a cleanup synch	WITHOUT_CLASSIFICATION	0.9999402912459218	WITHOUT_CLASSIFICATION	5.970875407822965E-5	DESIGN
// wrap the session in the transaction-protection proxy	WITHOUT_CLASSIFICATION	0.9998476320508826	WITHOUT_CLASSIFICATION	1.52367949117437E-4	DESIGN
// then bind it	WITHOUT_CLASSIFICATION	0.9998431276057668	WITHOUT_CLASSIFICATION	1.5687239423332574E-4	DESIGN
// try to make sure we don't wrap and already wrapped session	WITHOUT_CLASSIFICATION	0.9880578102971582	WITHOUT_CLASSIFICATION	0.011942189702841758	DESIGN
// allow these to go through the the real session no matter what	WITHOUT_CLASSIFICATION	0.9985997765577879	WITHOUT_CLASSIFICATION	0.001400223442212114	DESIGN
// limit the methods available if no transaction is active	WITHOUT_CLASSIFICATION	0.999618374752743	WITHOUT_CLASSIFICATION	3.8162524725710825E-4	DESIGN
// allow these (deprecated) methods to pass through	WITHOUT_CLASSIFICATION	0.9949658757095159	WITHOUT_CLASSIFICATION	0.005034124290484166	DESIGN
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993229183650829	WITHOUT_CLASSIFICATION	6.770816349171864E-4	DESIGN
// We could register the session against the transaction even though it is // not started, but we'd have no guarentee of ever getting the map // entries cleaned up (aside from spawning threads).	WITHOUT_CLASSIFICATION	0.9999984084748983	WITHOUT_CLASSIFICATION	1.5915251017641542E-6	DESIGN
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9997386979862298	WITHOUT_CLASSIFICATION	2.6130201377019645E-4	DESIGN
//private String propertyName;	WITHOUT_CLASSIFICATION	0.9996901238160961	WITHOUT_CLASSIFICATION	3.098761839038091E-4	DESIGN
/*public PropertyProjection project() {	WITHOUT_CLASSIFICATION	0.9943668199691185	WITHOUT_CLASSIFICATION	0.00563318003088149	DESIGN
//String[] fk = StringHelper.qualify( "collection_", cp.getKeyColumnNames() );	WITHOUT_CLASSIFICATION	0.9993152066625991	WITHOUT_CLASSIFICATION	6.847933374010019E-4	DESIGN
//" collection_ where " +	WITHOUT_CLASSIFICATION	0.9998559069024358	WITHOUT_CLASSIFICATION	1.440930975642374E-4	DESIGN
//unsupported	WITHOUT_CLASSIFICATION	0.9982660483085283	WITHOUT_CLASSIFICATION	0.0017339516914716315	DESIGN
//unsupported	WITHOUT_CLASSIFICATION	0.9982660483085283	WITHOUT_CLASSIFICATION	0.0017339516914716315	DESIGN
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9997386979862298	WITHOUT_CLASSIFICATION	2.6130201377019645E-4	DESIGN
//the following two lines were added to ensure that this.params is not null, which //can happen with two-deep nested subqueries	WITHOUT_CLASSIFICATION	0.9993838887920495	WITHOUT_CLASSIFICATION	6.161112079505597E-4	DESIGN
//with two-deep subqueries, the same alias would get generated for //both using the old method (criteriaQuery.generateSQLAlias()), so //that is now used as a fallback if the main criteria alias isn't set	WITHOUT_CLASSIFICATION	0.943020507570432	WITHOUT_CLASSIFICATION	0.05697949242956797	DESIGN
//implicit polymorphism not supported (would need a union)	WITHOUT_CLASSIFICATION	0.9890071641936466	WITHOUT_CLASSIFICATION	0.010992835806353423	DESIGN
//pull off the last ", "	WITHOUT_CLASSIFICATION	0.9999760983033639	WITHOUT_CLASSIFICATION	2.3901696636120887E-5	DESIGN
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9982660483085283	WITHOUT_CLASSIFICATION	0.0017339516914716315	DESIGN
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces	WITHOUT_CLASSIFICATION	0.9994896265591662	WITHOUT_CLASSIFICATION	5.103734408338175E-4	DESIGN
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource)	WITHOUT_CLASSIFICATION	0.9930402106612627	WITHOUT_CLASSIFICATION	0.006959789338737294	DESIGN
// NOT_SUPPORTED_SHOULD_USE_JDBC3_PreparedStatement.getGeneratedKeys_method	WITHOUT_CLASSIFICATION	0.9993232207011862	WITHOUT_CLASSIFICATION	6.767792988138589E-4	DESIGN
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.9995403784862542	WITHOUT_CLASSIFICATION	4.5962151374569823E-4	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993822791780347	WITHOUT_CLASSIFICATION	6.177208219653838E-4	DESIGN
// Oracle did add support for ANSI CASE statements in 9i	WITHOUT_CLASSIFICATION	0.9946475397741645	WITHOUT_CLASSIFICATION	0.0053524602258354925	DESIGN
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9992153886883256	WITHOUT_CLASSIFICATION	7.846113116744889E-4	DESIGN
// Informix doesn't have a bit type	WITHOUT_CLASSIFICATION	0.9994687430884782	WITHOUT_CLASSIFICATION	5.312569115217898E-4	DESIGN
// or BYTE // or TEXT? // or MONEY	WITHOUT_CLASSIFICATION	0.9994624398774581	WITHOUT_CLASSIFICATION	5.375601225419539E-4	DESIGN
// strip table-owner because Informix always returns constraint names as "<table-owner>.<constraint-name>"	WITHOUT_CLASSIFICATION	0.9995368611234569	WITHOUT_CLASSIFICATION	4.6313887654315895E-4	DESIGN
// build the map of standard ANSI SQL aggregation functions ~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993975867473738	WITHOUT_CLASSIFICATION	6.024132526261807E-4	DESIGN
//pre H3.2 behavior: super.getReturnType(ct, m);	WITHOUT_CLASSIFICATION	0.9942892606861524	WITHOUT_CLASSIFICATION	0.005710739313847541	DESIGN
// finally use the sqltype if == on Hibernate types did not find a match.	WITHOUT_CLASSIFICATION	0.9997216100845158	WITHOUT_CLASSIFICATION	2.7838991548419684E-4	DESIGN
//because numeric can be anything	WITHOUT_CLASSIFICATION	0.9977165275114018	WITHOUT_CLASSIFICATION	0.002283472488598173	DESIGN
// constructors and factory methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9926238973151151	WITHOUT_CLASSIFICATION	0.007376102684884798	DESIGN
// standard sql92 functions (can be overridden by subclasses)	WITHOUT_CLASSIFICATION	0.9936623103851382	WITHOUT_CLASSIFICATION	0.0063376896148617775	DESIGN
//map second/minute/hour/day/month/year to ANSI extract(), override on subclasses	WITHOUT_CLASSIFICATION	0.9889917888603995	WITHOUT_CLASSIFICATION	0.011008211139600483	DESIGN
// register hibernate types for default use in scalar sqlquery type auto detection	WITHOUT_CLASSIFICATION	0.9695684543743012	WITHOUT_CLASSIFICATION	0.030431545625698823	DESIGN
// database type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9879507960307263	WITHOUT_CLASSIFICATION	0.012049203969273696	DESIGN
// hibernate type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9879507960307263	WITHOUT_CLASSIFICATION	0.012049203969273696	DESIGN
// keyword support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9971948916650091	WITHOUT_CLASSIFICATION	0.002805108334990845	DESIGN
// native identifier generatiion ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999384398131468	WITHOUT_CLASSIFICATION	6.156018685320126E-4	DESIGN
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9962952562583895	WITHOUT_CLASSIFICATION	0.003704743741610476	DESIGN
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9962952562583895	WITHOUT_CLASSIFICATION	0.003704743741610476	DESIGN
// GUID support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9962952562583895	WITHOUT_CLASSIFICATION	0.003704743741610476	DESIGN
// limit/offset support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9962952562583895	WITHOUT_CLASSIFICATION	0.003704743741610476	DESIGN
// by default we report no support	WITHOUT_CLASSIFICATION	0.9945722654440559	WITHOUT_CLASSIFICATION	0.00542773455594421	DESIGN
// by default we report no support for NOWAIT lock semantics	WITHOUT_CLASSIFICATION	0.9314758295889934	WITHOUT_CLASSIFICATION	0.06852417041100659	DESIGN
// table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.998563258616682	WITHOUT_CLASSIFICATION	0.001436741383317992	DESIGN
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9634733170569275	WITHOUT_CLASSIFICATION	0.03652668294307254	DESIGN
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9964096014872692	WITHOUT_CLASSIFICATION	0.0035903985127309058	DESIGN
// current timestamp support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9962491610100928	WITHOUT_CLASSIFICATION	0.0037508389899072784	DESIGN
// SQLException support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9962952562583895	WITHOUT_CLASSIFICATION	0.003704743741610476	DESIGN
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9962952562583895	WITHOUT_CLASSIFICATION	0.003704743741610476	DESIGN
// identifier quoting support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9962952562583895	WITHOUT_CLASSIFICATION	0.003704743741610476	DESIGN
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9962952562583895	WITHOUT_CLASSIFICATION	0.003704743741610476	DESIGN
// grrr... for differentiation of mysql storage engines	WITHOUT_CLASSIFICATION	0.9992830214743872	WITHOUT_CLASSIFICATION	7.16978525612932E-4	DESIGN
// Informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993232207011862	WITHOUT_CLASSIFICATION	6.767792988138589E-4	DESIGN
// return false here, as most databases do not properly support this construct...	WITHOUT_CLASSIFICATION	0.9990595731624307	WITHOUT_CLASSIFICATION	9.404268375693177E-4	DESIGN
// Mckoi has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9979245299625767	WITHOUT_CLASSIFICATION	0.0020754700374232314	DESIGN
// Oracle8 and previous define only a "DATE" type which //      is used to represent all aspects of date/time	WITHOUT_CLASSIFICATION	0.9563832068214602	WITHOUT_CLASSIFICATION	0.0436167931785398	DESIGN
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9998077033537841	WITHOUT_CLASSIFICATION	1.9229664621587565E-4	DESIGN
//" cascade";	WITHOUT_CLASSIFICATION	0.9982660483085283	WITHOUT_CLASSIFICATION	0.0017339516914716315	DESIGN
//trim off the length/precision/scale	WITHOUT_CLASSIFICATION	0.9990546074213423	WITHOUT_CLASSIFICATION	9.453925786577211E-4	DESIGN
/*public boolean dropTemporaryTableAfterUse() {	WITHOUT_CLASSIFICATION	0.9973530944671939	WITHOUT_CLASSIFICATION	0.0026469055328061587	DESIGN
// CHECK VIOLATION	WITHOUT_CLASSIFICATION	0.9997952314504504	WITHOUT_CLASSIFICATION	2.047685495496311E-4	DESIGN
// UNIQUE VIOLATION	WITHOUT_CLASSIFICATION	0.9997952314504504	WITHOUT_CLASSIFICATION	2.047685495496311E-4	DESIGN
// FOREIGN KEY VIOLATION	WITHOUT_CLASSIFICATION	0.9999811849861537	WITHOUT_CLASSIFICATION	1.8815013846229537E-5	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993822791780347	WITHOUT_CLASSIFICATION	6.177208219653838E-4	DESIGN
// NOT NULL VIOLATION	WITHOUT_CLASSIFICATION	0.9999660759442547	WITHOUT_CLASSIFICATION	3.392405574532868E-5	DESIGN
// ALL OTHER	WITHOUT_CLASSIFICATION	0.999795024224625	WITHOUT_CLASSIFICATION	2.0497577537497376E-4	DESIGN
// Register the type of the out param - PostgreSQL uses Types.OTHER	WITHOUT_CLASSIFICATION	0.9949191033573564	WITHOUT_CLASSIFICATION	0.005080896642643555	DESIGN
// seems to not really... //	WITHOUT_CLASSIFICATION	0.9999823308367034	WITHOUT_CLASSIFICATION	1.76691632965896E-5	DESIGN
// seems to have spotty LOB suppport	WITHOUT_CLASSIFICATION	0.9995949524239693	WITHOUT_CLASSIFICATION	4.050475760306174E-4	DESIGN
// HHH-2300	WITHOUT_CLASSIFICATION	0.9997952314504504	WITHOUT_CLASSIFICATION	2.047685495496311E-4	DESIGN
// ignore (probably H2 not in the classpath)	WITHOUT_CLASSIFICATION	0.9994930532897682	WITHOUT_CLASSIFICATION	5.069467102316626E-4	DESIGN
// Numeric Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993232207011862	WITHOUT_CLASSIFICATION	6.767792988138589E-4	DESIGN
// String Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9986723625257132	WITHOUT_CLASSIFICATION	0.0013276374742867709	DESIGN
// Time and Date Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9991525102750891	WITHOUT_CLASSIFICATION	8.474897249108912E-4	DESIGN
// System Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993327055418333	WITHOUT_CLASSIFICATION	6.672944581668202E-4	DESIGN
// not null is implicit	WITHOUT_CLASSIFICATION	0.9999401404786191	WITHOUT_CLASSIFICATION	5.9859521380974226E-5	DESIGN
// 23000: Check constraint violation: {0} // 23001: Unique index or primary key violation: {0}	WITHOUT_CLASSIFICATION	0.9985891545459866	WITHOUT_CLASSIFICATION	0.0014108454540133141	DESIGN
// Display the dialect version.	WITHOUT_CLASSIFICATION	0.9997620648341333	WITHOUT_CLASSIFICATION	2.3793516586667252E-4	DESIGN
// The RDMS concat() function only supports 2 parameters	WITHOUT_CLASSIFICATION	0.9998908326415312	WITHOUT_CLASSIFICATION	1.091673584688741E-4	DESIGN
// Dialect method overrides ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9980929698963953	WITHOUT_CLASSIFICATION	0.001907030103604668	DESIGN
// Original Dialect.java returns " for update";	WITHOUT_CLASSIFICATION	0.9982796719461117	WITHOUT_CLASSIFICATION	0.0017203280538883074	DESIGN
// Verify the state of this new method in Hibernate 3.0 Dialect.java	WITHOUT_CLASSIFICATION	0.9980504831733217	WITHOUT_CLASSIFICATION	0.0019495168266784337	DESIGN
// Origial Dialect.java returns true;	WITHOUT_CLASSIFICATION	0.999334451156115	WITHOUT_CLASSIFICATION	6.655488438851044E-4	DESIGN
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9980260013979576	WITHOUT_CLASSIFICATION	0.001973998602042394	DESIGN
// *** Sequence methods - start. The RDMS dialect needs these	WITHOUT_CLASSIFICATION	0.9826740270159934	WITHOUT_CLASSIFICATION	0.0173259729840066	DESIGN
// methods to make it possible to use the Native Id generator	WITHOUT_CLASSIFICATION	0.9971609023951096	WITHOUT_CLASSIFICATION	0.002839097604890401	DESIGN
// The where clause was added to eliminate this statement from Brute Force Searches.	WITHOUT_CLASSIFICATION	0.9972295691611209	WITHOUT_CLASSIFICATION	0.002770430838878972	DESIGN
// *** Sequence methods - end	WITHOUT_CLASSIFICATION	0.9998805440935502	WITHOUT_CLASSIFICATION	1.1945590644975976E-4	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993822791780347	WITHOUT_CLASSIFICATION	6.177208219653838E-4	DESIGN
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9998077033537841	WITHOUT_CLASSIFICATION	1.9229664621587565E-4	DESIGN
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.9767654031051514	WITHOUT_CLASSIFICATION	0.023234596894848646	DESIGN
// Used with DROP TABLE to delete all records in the table.	WITHOUT_CLASSIFICATION	0.999828419310195	WITHOUT_CLASSIFICATION	1.7158068980503734E-4	DESIGN
// RDMS supports the UNION ALL clause.	WITHOUT_CLASSIFICATION	0.9997509950094469	WITHOUT_CLASSIFICATION	2.490049905532198E-4	DESIGN
// RDMS has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9979245299625767	WITHOUT_CLASSIFICATION	0.0020754700374232314	DESIGN
// Multi-param dialect functions...	WITHOUT_CLASSIFICATION	0.9993232207011862	WITHOUT_CLASSIFICATION	6.767792988138589E-4	DESIGN
// function templates	WITHOUT_CLASSIFICATION	0.9999906410929075	WITHOUT_CLASSIFICATION	9.3589070924678E-6	DESIGN
//not null is implicit	WITHOUT_CLASSIFICATION	0.9993692445633958	WITHOUT_CLASSIFICATION	6.307554366041686E-4	DESIGN
// this assumes schema support, which is present in 1.8.0 and later...	WITHOUT_CLASSIFICATION	0.9972143042108543	WITHOUT_CLASSIFICATION	0.0027856957891456494	DESIGN
// HSQLDB only supports READ_UNCOMMITTED transaction isolation	WITHOUT_CLASSIFICATION	0.9997580441622129	WITHOUT_CLASSIFICATION	2.4195583778711664E-4	DESIGN
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9993961964959307	WITHOUT_CLASSIFICATION	6.03803504069298E-4	DESIGN
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9993232207011862	WITHOUT_CLASSIFICATION	6.767792988138589E-4	DESIGN
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9993232207011862	WITHOUT_CLASSIFICATION	6.767792988138589E-4	DESIGN
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.9993855201628664	WITHOUT_CLASSIFICATION	6.144798371335304E-4	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993822791780347	WITHOUT_CLASSIFICATION	6.177208219653838E-4	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993822791780347	WITHOUT_CLASSIFICATION	6.177208219653838E-4	DESIGN
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9998305805861509	WITHOUT_CLASSIFICATION	1.6941941384901671E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.999758407950086	WITHOUT_CLASSIFICATION	2.4159204991409242E-4	DESIGN
// TimesTen has no BLOB/CLOB support, but these types may be suitable  // for some applications. The length is limited to 4 million bytes.	WITHOUT_CLASSIFICATION	0.9968929921045255	WITHOUT_CLASSIFICATION	0.0031070078954744374	DESIGN
// new methods in dialect3	WITHOUT_CLASSIFICATION	0.9999515521657462	WITHOUT_CLASSIFICATION	4.844783425388256E-5	DESIGN
/*public boolean supportsForUpdateNowait() {	WITHOUT_CLASSIFICATION	0.9973530944671939	WITHOUT_CLASSIFICATION	0.0026469055328061587	DESIGN
// TimesTen has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9979245299625767	WITHOUT_CLASSIFICATION	0.0020754700374232314	DESIGN
// iterate entries ordered by capacity to find first fit	WITHOUT_CLASSIFICATION	0.9893464473768604	WITHOUT_CLASSIFICATION	0.010653552623139582	DESIGN
// add new ordered map	WITHOUT_CLASSIFICATION	0.9999892182013184	WITHOUT_CLASSIFICATION	1.0781798681596737E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.999758407950086	WITHOUT_CLASSIFICATION	2.4159204991409242E-4	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993822791780347	WITHOUT_CLASSIFICATION	6.177208219653838E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.999758407950086	WITHOUT_CLASSIFICATION	2.4159204991409242E-4	DESIGN
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9993191453377471	WITHOUT_CLASSIFICATION	6.808546622529232E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.999758407950086	WITHOUT_CLASSIFICATION	2.4159204991409242E-4	DESIGN
//registerColumnType data types	WITHOUT_CLASSIFICATION	0.98628415329026	WITHOUT_CLASSIFICATION	0.013715846709739916	DESIGN
// hibernate seems to ignore this type...	WITHOUT_CLASSIFICATION	0.9966033160954467	WITHOUT_CLASSIFICATION	0.00339668390455341	DESIGN
// IBID for current_time and current_date	WITHOUT_CLASSIFICATION	0.9982872753199048	WITHOUT_CLASSIFICATION	0.0017127246800951695	DESIGN
// Tell hibernate to use getBytes instead of getBinaryStream	WITHOUT_CLASSIFICATION	0.9977246962941206	WITHOUT_CLASSIFICATION	0.0022753037058794432	DESIGN
// No batch statements	WITHOUT_CLASSIFICATION	0.9999914733880502	WITHOUT_CLASSIFICATION	8.526611949900908E-6	DESIGN
/*	WITHOUT_CLASSIFICATION	0.9966403525745083	WITHOUT_CLASSIFICATION	0.003359647425491574	DESIGN
//no pointbase BIT	WITHOUT_CLASSIFICATION	0.9985295306196245	WITHOUT_CLASSIFICATION	0.0014704693803754602	DESIGN
//no pointbase TINYINT	WITHOUT_CLASSIFICATION	0.9998647314475336	WITHOUT_CLASSIFICATION	1.3526855246640796E-4	DESIGN
// Pointbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9979245299625767	WITHOUT_CLASSIFICATION	0.0020754700374232314	DESIGN
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9998077033537841	WITHOUT_CLASSIFICATION	1.9229664621587565E-4	DESIGN
// The current_timestamp is more accurate, but only known to be supported // in SQL Server 7.0 and later (i.e., Sybase not known to support it at all)	WITHOUT_CLASSIFICATION	0.993366220057231	WITHOUT_CLASSIFICATION	0.006633779942768942	DESIGN
// SQL Server (at least up through 2005) does not support defining // cascade delete constraints which can circel back to the mutating // table	WITHOUT_CLASSIFICATION	0.9998681798180441	WITHOUT_CLASSIFICATION	1.3182018195590113E-4	DESIGN
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9988066633827085	WITHOUT_CLASSIFICATION	0.0011933366172915568	DESIGN
//	WITHOUT_CLASSIFICATION	0.999758407950086	WITHOUT_CLASSIFICATION	2.4159204991409242E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.999758407950086	WITHOUT_CLASSIFICATION	2.4159204991409242E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.999758407950086	WITHOUT_CLASSIFICATION	2.4159204991409242E-4	DESIGN
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9998077033537841	WITHOUT_CLASSIFICATION	1.9229664621587565E-4	DESIGN
/* package-private */	WITHOUT_CLASSIFICATION	0.9999960241746976	WITHOUT_CLASSIFICATION	3.975825302506309E-6	DESIGN
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9993191453377471	WITHOUT_CLASSIFICATION	6.808546622529232E-4	DESIGN
//Sybase BIT type does not support null values	WITHOUT_CLASSIFICATION	0.9672474575151402	WITHOUT_CLASSIFICATION	0.032752542484859905	DESIGN
//	WITHOUT_CLASSIFICATION	0.999758407950086	WITHOUT_CLASSIFICATION	2.4159204991409242E-4	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993822791780347	WITHOUT_CLASSIFICATION	6.177208219653838E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.999758407950086	WITHOUT_CLASSIFICATION	2.4159204991409242E-4	DESIGN
//not null ... (start with 1) is implicit	WITHOUT_CLASSIFICATION	0.8980037343260404	WITHOUT_CLASSIFICATION	0.10199626567395963	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993822791780347	WITHOUT_CLASSIFICATION	6.177208219653838E-4	DESIGN
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.9963238828139411	WITHOUT_CLASSIFICATION	0.003676117186058924	DESIGN
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9993961964959307	WITHOUT_CLASSIFICATION	6.03803504069298E-4	DESIGN
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9993232207011862	WITHOUT_CLASSIFICATION	6.767792988138589E-4	DESIGN
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9993232207011862	WITHOUT_CLASSIFICATION	6.767792988138589E-4	DESIGN
// add another (inner) nested select // add the main query // close off the inner nested select	WITHOUT_CLASSIFICATION	0.999975695823075	WITHOUT_CLASSIFICATION	2.4304176924937533E-5	DESIGN
// add the main query	WITHOUT_CLASSIFICATION	0.9999977244723404	WITHOUT_CLASSIFICATION	2.275527659620993E-6	DESIGN
//add the restriction to the outer select	WITHOUT_CLASSIFICATION	0.9974270267233789	WITHOUT_CLASSIFICATION	0.0025729732766210543	DESIGN
// This assumes you will want to ignore any update counts 	WITHOUT_CLASSIFICATION	0.9955936248258426	WITHOUT_CLASSIFICATION	0.004406375174157489	DESIGN
// You may still have other ResultSets or update counts left to process here  // but you can't do it now or the ResultSet you just got will be closed 	WITHOUT_CLASSIFICATION	0.9999852344510602	WITHOUT_CLASSIFICATION	1.4765548939841945E-5	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993822791780347	WITHOUT_CLASSIFICATION	6.177208219653838E-4	DESIGN
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9998077033537841	WITHOUT_CLASSIFICATION	1.9229664621587565E-4	DESIGN
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.9993855201628664	WITHOUT_CLASSIFICATION	6.144798371335304E-4	DESIGN
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9998305805861509	WITHOUT_CLASSIFICATION	1.6941941384901671E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.999758407950086	WITHOUT_CLASSIFICATION	2.4159204991409242E-4	DESIGN
// features which change between 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9983431079474795	WITHOUT_CLASSIFICATION	0.001656892052520509	DESIGN
// features which remain constant across 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9989890598445791	WITHOUT_CLASSIFICATION	0.001010940155420925	DESIGN
// binary %Stream // character %Stream	WITHOUT_CLASSIFICATION	0.9997326993318494	WITHOUT_CLASSIFICATION	2.6730066815069606E-4	DESIGN
//getDefaultProperties().setProperty(Environment.STATEMENT_BATCH_SIZE, NO_BATCH);	WITHOUT_CLASSIFICATION	0.9942892606861524	WITHOUT_CLASSIFICATION	0.005710739313847541	DESIGN
// hibernate impelemnts cast in Dialect.java	WITHOUT_CLASSIFICATION	0.9988777832916417	WITHOUT_CLASSIFICATION	0.0011222167083583066	DESIGN
// aggregate functions shouldn't be registered, right? //registerFunction( "list", new StandardSQLFunction("list",Hibernate.STRING) ); // stopped on $list	WITHOUT_CLASSIFICATION	0.9990650889058033	WITHOUT_CLASSIFICATION	9.349110941967121E-4	DESIGN
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9962952562583895	WITHOUT_CLASSIFICATION	0.003704743741610476	DESIGN
// below is for Cache' that don't have str in 2007.1 there is str and we register str directly	WITHOUT_CLASSIFICATION	0.9807811265803292	WITHOUT_CLASSIFICATION	0.01921887341967073	DESIGN
// note that %string is deprecated	WITHOUT_CLASSIFICATION	0.9948940619784128	WITHOUT_CLASSIFICATION	0.005105938021587248	DESIGN
// %upper is deprecated	WITHOUT_CLASSIFICATION	0.9998970139934317	WITHOUT_CLASSIFICATION	1.0298600656832932E-4	DESIGN
// The syntax used to add a foreign key constraint to a table.	WITHOUT_CLASSIFICATION	0.9995202452957372	WITHOUT_CLASSIFICATION	4.7975470426283516E-4	DESIGN
// identifier-commalist	WITHOUT_CLASSIFICATION	0.9999811849861537	WITHOUT_CLASSIFICATION	1.8815013846229537E-5	DESIGN
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9962952562583895	WITHOUT_CLASSIFICATION	0.003704743741610476	DESIGN
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9962952562583895	WITHOUT_CLASSIFICATION	0.003704743741610476	DESIGN
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9634733170569275	WITHOUT_CLASSIFICATION	0.03652668294307254	DESIGN
// identifier-commalist	WITHOUT_CLASSIFICATION	0.9999811849861537	WITHOUT_CLASSIFICATION	1.8815013846229537E-5	DESIGN
// The syntax used to add a column to a table	WITHOUT_CLASSIFICATION	0.9996863114055221	WITHOUT_CLASSIFICATION	3.1368859447790154E-4	DESIGN
// Completely optional cascading drop clause.	WITHOUT_CLASSIFICATION	0.999541746667859	WITHOUT_CLASSIFICATION	4.58253332141018E-4	DESIGN
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9941809836611897	WITHOUT_CLASSIFICATION	0.005819016338810293	DESIGN
// LIMIT support (ala TOP) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9962952562583895	WITHOUT_CLASSIFICATION	0.003704743741610476	DESIGN
// InterSystems Cache' does not current support "SELECT ... FOR UPDATE" syntax... // Set your transaction mode to READ_COMMITTED before using	WITHOUT_CLASSIFICATION	0.9885012460659433	WITHOUT_CLASSIFICATION	0.01149875393405679	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993822791780347	WITHOUT_CLASSIFICATION	6.177208219653838E-4	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993822791780347	WITHOUT_CLASSIFICATION	6.177208219653838E-4	DESIGN
/*<String>*/	WITHOUT_CLASSIFICATION	0.9982660483085283	WITHOUT_CLASSIFICATION	0.0017339516914716315	DESIGN
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9964096014872692	WITHOUT_CLASSIFICATION	0.0035903985127309058	DESIGN
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9962952562583895	WITHOUT_CLASSIFICATION	0.003704743741610476	DESIGN
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9980260013979576	WITHOUT_CLASSIFICATION	0.001973998602042394	DESIGN
// Does the LIMIT clause come at the start of the SELECT statement, rather than at the end?	WITHOUT_CLASSIFICATION	0.9973319498813062	WITHOUT_CLASSIFICATION	0.002668050118693689	DESIGN
// Does the LIMIT clause take a "maximum" row number instead of a total number of returned rows?	WITHOUT_CLASSIFICATION	0.9969387571734366	WITHOUT_CLASSIFICATION	0.0030612428265632536	DESIGN
// The name of the SQL function that transforms a string to lowercase	WITHOUT_CLASSIFICATION	0.999438054856505	WITHOUT_CLASSIFICATION	5.619451434949447E-4	DESIGN
// Create an OuterJoinGenerator for this dialect.	WITHOUT_CLASSIFICATION	0.9984397911497389	WITHOUT_CLASSIFICATION	0.0015602088502611109	DESIGN
// The keyword used to insert a row without specifying // any column values	WITHOUT_CLASSIFICATION	0.9998866090548487	WITHOUT_CLASSIFICATION	1.1339094515123218E-4	DESIGN
//registerFunction( "trim", new StandardSQLFunction( "trim", Hibernate.STRING ) );	WITHOUT_CLASSIFICATION	0.9938013770511319	WITHOUT_CLASSIFICATION	0.006198622948868096	DESIGN
//skip the FROM keyword in params	WITHOUT_CLASSIFICATION	0.9975168796349975	WITHOUT_CLASSIFICATION	0.002483120365002557	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.9982660483085283	WITHOUT_CLASSIFICATION	0.0017339516914716315	DESIGN
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.9995403784862542	WITHOUT_CLASSIFICATION	4.5962151374569823E-4	DESIGN
// SQLFunction implementation	WITHOUT_CLASSIFICATION	0.9999649685529723	WITHOUT_CLASSIFICATION	3.503144702762152E-5	DESIGN
// conceivable that the dialect ctor could throw HibernateExceptions, so don't re-wrap	WITHOUT_CLASSIFICATION	0.9990966555686281	WITHOUT_CLASSIFICATION	9.033444313719048E-4	DESIGN
// register the standard dialect resolver	WITHOUT_CLASSIFICATION	0.9991356296155659	WITHOUT_CLASSIFICATION	8.643703844341532E-4	DESIGN
// register resolvers set via Environment property	WITHOUT_CLASSIFICATION	0.9989029310627575	WITHOUT_CLASSIFICATION	0.0010970689372425029	DESIGN
// kept for backward compatibility until after the 3.1beta5 release of HA	WITHOUT_CLASSIFICATION	0.9998789329326866	WITHOUT_CLASSIFICATION	1.2106706731330083E-4	DESIGN
//cache the hashcode	WITHOUT_CLASSIFICATION	0.9993503857386671	WITHOUT_CLASSIFICATION	6.496142613328578E-4	DESIGN
// the CascadingAction contract ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999737003155708	WITHOUT_CLASSIFICATION	2.629968442920236E-4	DESIGN
// the CascadingAction implementations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997484307709797	WITHOUT_CLASSIFICATION	2.515692290202794E-4	DESIGN
// delete does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.999098553196783	WITHOUT_CLASSIFICATION	9.014468032169908E-4	DESIGN
// orphans should be deleted during delete	WITHOUT_CLASSIFICATION	0.9955633590342311	WITHOUT_CLASSIFICATION	0.004436640965768937	DESIGN
/*(LockMode) anything*/	WITHOUT_CLASSIFICATION	0.9998404554700752	WITHOUT_CLASSIFICATION	1.595445299249041E-4	DESIGN
// lock doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9994423525801182	WITHOUT_CLASSIFICATION	5.576474198818051E-4	DESIGN
// refresh doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9996644384396404	WITHOUT_CLASSIFICATION	3.355615603595802E-4	DESIGN
// evicts don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9985731040197476	WITHOUT_CLASSIFICATION	0.0014268959802524448	DESIGN
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9990604066564898	WITHOUT_CLASSIFICATION	9.395933435103143E-4	DESIGN
// orphans should be deleted during save/update	WITHOUT_CLASSIFICATION	0.9944061332077058	WITHOUT_CLASSIFICATION	0.005593866792294159	DESIGN
// for deprecated saveOrUpdateCopy()	WITHOUT_CLASSIFICATION	0.9950662562317275	WITHOUT_CLASSIFICATION	0.0049337437682724795	DESIGN
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9985731040197476	WITHOUT_CLASSIFICATION	0.0014268959802524448	DESIGN
//a proxy cannot be transient and it breaks ForeignKeys.isTransient	WITHOUT_CLASSIFICATION	0.9972556020524759	WITHOUT_CLASSIFICATION	0.0027443979475240015	DESIGN
// replicate does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9988623717414715	WITHOUT_CLASSIFICATION	0.0011376282585284453	DESIGN
// static helper methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9973182182266688	WITHOUT_CLASSIFICATION	0.002681781773331137	DESIGN
// handles arrays and newly instantiated collections	WITHOUT_CLASSIFICATION	0.9997524675193901	WITHOUT_CLASSIFICATION	2.475324806099555E-4	DESIGN
// Actually the semantics of the next three are really "Bag" // Note that, unlike objects, collection insertions, updates, // deletions are not really remembered between flushes. We // just re-use the same Lists for convenience.	WITHOUT_CLASSIFICATION	0.945964477190677	WITHOUT_CLASSIFICATION	0.05403552280932296	DESIGN
// Add these directly to the executions queue	WITHOUT_CLASSIFICATION	0.9992980133477384	WITHOUT_CLASSIFICATION	7.019866522616141E-4	DESIGN
// continue loop	WITHOUT_CLASSIFICATION	0.999757129910004	WITHOUT_CLASSIFICATION	2.4287008999603876E-4	DESIGN
//sort the updates by fk	WITHOUT_CLASSIFICATION	0.9998993931112315	WITHOUT_CLASSIFICATION	1.0060688876845082E-4	DESIGN
//sort the updates by pk	WITHOUT_CLASSIFICATION	0.9998993931112315	WITHOUT_CLASSIFICATION	1.0060688876845082E-4	DESIGN
// the mapping of entity names to their latest batch numbers.	WITHOUT_CLASSIFICATION	0.9996622658127314	WITHOUT_CLASSIFICATION	3.377341872685409E-4	DESIGN
// the map of batch numbers to EntityInsertAction lists	WITHOUT_CLASSIFICATION	0.9995836350771887	WITHOUT_CLASSIFICATION	4.163649228112435E-4	DESIGN
//optimize the hash size to eliminate a rehash.	WITHOUT_CLASSIFICATION	0.9973642628497943	WITHOUT_CLASSIFICATION	0.0026357371502056717	DESIGN
// the list of entity names that indicate the batch number	WITHOUT_CLASSIFICATION	0.9999039370942041	WITHOUT_CLASSIFICATION	9.606290579586017E-5	DESIGN
// remove the current element from insertions. It will be added back later.	WITHOUT_CLASSIFICATION	0.999962426962189	WITHOUT_CLASSIFICATION	3.757303781102271E-5	DESIGN
// the entity associated with the current action.	WITHOUT_CLASSIFICATION	0.9984875520248945	WITHOUT_CLASSIFICATION	0.001512447975105507	DESIGN
// There is already an existing batch for this type of entity. // Check to see if the latest batch is acceptable.	WITHOUT_CLASSIFICATION	0.9480911141393316	WITHOUT_CLASSIFICATION	0.0519088858606684	DESIGN
// now rebuild the insertions list. There is a batch for each entry in the name list.	WITHOUT_CLASSIFICATION	0.9984166951856939	WITHOUT_CLASSIFICATION	0.0015833048143062008	DESIGN
// the current batch number is the latest batch for this entity type.	WITHOUT_CLASSIFICATION	0.9983580019732854	WITHOUT_CLASSIFICATION	0.0016419980267146136	DESIGN
// loop through all the associations of the current entity and make sure that they are processed // before the current batch number	WITHOUT_CLASSIFICATION	0.9815501940184367	WITHOUT_CLASSIFICATION	0.01844980598156324	DESIGN
// find the batch number associated with the current association, if any.	WITHOUT_CLASSIFICATION	0.999870272501345	WITHOUT_CLASSIFICATION	1.2972749865490288E-4	DESIGN
// create a new batch for this type. The batch number is the number of current batches.	WITHOUT_CLASSIFICATION	0.9987516368557718	WITHOUT_CLASSIFICATION	0.00124836314422812	DESIGN
// loop through all the associated entities and make sure they have been // processed before the latest // batch associated with this entity type.	WITHOUT_CLASSIFICATION	0.9776640000517964	WITHOUT_CLASSIFICATION	0.02233599994820353	DESIGN
// since this entity will now be processed in the latest possible batch, // we can be assured that it will come after all other associations, // there's not need to continue checking.	WITHOUT_CLASSIFICATION	0.9997044228938897	WITHOUT_CLASSIFICATION	2.955771061103036E-4	DESIGN
//cascade to current collection elements	WITHOUT_CLASSIFICATION	0.987439585363886	WITHOUT_CLASSIFICATION	0.012560414636114112	DESIGN
//not really necessary, but good for consistency...	WITHOUT_CLASSIFICATION	0.9905262318836321	WITHOUT_CLASSIFICATION	0.00947376811636782	DESIGN
// we can't cascade to non-embedded elements	WITHOUT_CLASSIFICATION	0.9991337381936188	WITHOUT_CLASSIFICATION	8.662618063810287E-4	DESIGN
//a newly instantiated collection can't have orphans	WITHOUT_CLASSIFICATION	0.9700214700581197	WITHOUT_CLASSIFICATION	0.029978529941880373	DESIGN
// handle orphaned entities!!	WITHOUT_CLASSIFICATION	0.9999702990101338	WITHOUT_CLASSIFICATION	2.9700989866146465E-5	DESIGN
// Loaded entity instances, by EntityUniqueKey	WITHOUT_CLASSIFICATION	0.9989403115562187	WITHOUT_CLASSIFICATION	0.0010596884437814253	DESIGN
// Identity map of EntityEntry instances, by the entity instance	WITHOUT_CLASSIFICATION	0.9996535164115995	WITHOUT_CLASSIFICATION	3.4648358840052554E-4	DESIGN
// Entity proxies, by EntityKey	WITHOUT_CLASSIFICATION	0.9989415831802332	WITHOUT_CLASSIFICATION	0.0010584168197668564	DESIGN
// Snapshots of current database state for entities // that have *not* been loaded	WITHOUT_CLASSIFICATION	0.9987887257008198	WITHOUT_CLASSIFICATION	0.0012112742991801173	DESIGN
// Identity map of array holder ArrayHolder instances, by the array instance	WITHOUT_CLASSIFICATION	0.9998265552227005	WITHOUT_CLASSIFICATION	1.7344477729952295E-4	DESIGN
// Collection wrappers, by the CollectionKey //key=CollectionKey, value=PersistentCollection	WITHOUT_CLASSIFICATION	0.9995726259827478	WITHOUT_CLASSIFICATION	4.2737401725233444E-4	DESIGN
// Set of EntityKeys of deleted objects	WITHOUT_CLASSIFICATION	0.999485667885684	WITHOUT_CLASSIFICATION	5.14332114315939E-4	DESIGN
// properties that we have tried to load, and not found in the database	WITHOUT_CLASSIFICATION	0.999411384443258	WITHOUT_CLASSIFICATION	5.886155567419416E-4	DESIGN
// A list of collection wrappers that were instantiating during result set // processing, that we will need to initialize at the end of the query	WITHOUT_CLASSIFICATION	0.9946639641589923	WITHOUT_CLASSIFICATION	0.005336035841007686	DESIGN
// A container for collections we load up when the owning entity is not // yet loaded ... for now, this is purely transient!	WITHOUT_CLASSIFICATION	0.9886814337025436	WITHOUT_CLASSIFICATION	0.011318566297456301	DESIGN
// Downgrade locks	WITHOUT_CLASSIFICATION	0.9997952314504504	WITHOUT_CLASSIFICATION	2.047685495496311E-4	DESIGN
// any earlier proxy takes precedence	WITHOUT_CLASSIFICATION	0.9996975576683379	WITHOUT_CLASSIFICATION	3.02442331662032E-4	DESIGN
//unwrap the object	WITHOUT_CLASSIFICATION	0.99792370981524	WITHOUT_CLASSIFICATION	0.0020762901847599085	DESIGN
//initialize + unwrap the object	WITHOUT_CLASSIFICATION	0.9971435594088645	WITHOUT_CLASSIFICATION	0.0028564405911355555	DESIGN
//return the proxied object	WITHOUT_CLASSIFICATION	0.9998273797011167	WITHOUT_CLASSIFICATION	1.726202988833382E-4	DESIGN
//overwrite old proxy	WITHOUT_CLASSIFICATION	0.9999113587242482	WITHOUT_CLASSIFICATION	8.864127575182472E-5	DESIGN
// early exit...	WITHOUT_CLASSIFICATION	0.9997982153941651	WITHOUT_CLASSIFICATION	2.0178460583481056E-4	DESIGN
// or should it actually throw an exception?	WITHOUT_CLASSIFICATION	0.9733467651563921	WITHOUT_CLASSIFICATION	0.02665323484360783	DESIGN
//treat it just like a new collection	WITHOUT_CLASSIFICATION	0.9743599141459627	WITHOUT_CLASSIFICATION	0.025640085854037237	DESIGN
//do this work only at the very highest level of the load //don't let this method be called recursively	WITHOUT_CLASSIFICATION	0.9932080911341016	WITHOUT_CLASSIFICATION	0.006791908865898401	DESIGN
//note that each iteration of the loop may add new elements	WITHOUT_CLASSIFICATION	0.9999460233494742	WITHOUT_CLASSIFICATION	5.397665052580756E-5	DESIGN
//it might be an unwrapped collection reference! //try to find a wrapper (slowish)	WITHOUT_CLASSIFICATION	0.9400853207623266	WITHOUT_CLASSIFICATION	0.05991467923767341	DESIGN
/*public boolean isNonExistant(EntityKey key) {	WITHOUT_CLASSIFICATION	0.9973530944671939	WITHOUT_CLASSIFICATION	0.0026469055328061587	DESIGN
/*public boolean isNonExistant(EntityUniqueKey key) {	WITHOUT_CLASSIFICATION	0.9973530944671939	WITHOUT_CLASSIFICATION	0.0026469055328061587	DESIGN
// iterate all the entities currently associated with the persistence context.	WITHOUT_CLASSIFICATION	0.9991465524764495	WITHOUT_CLASSIFICATION	8.534475235505925E-4	DESIGN
// does this entity entry pertain to the entity persister in which we are interested (owner)?	WITHOUT_CLASSIFICATION	0.9976592530339331	WITHOUT_CLASSIFICATION	0.002340746966066864	DESIGN
//check if the managed object is the parent	WITHOUT_CLASSIFICATION	0.9792075410187459	WITHOUT_CLASSIFICATION	0.020792458981254175	DESIGN
// otherwise, the proxy was pruned during the serialization process	WITHOUT_CLASSIFICATION	0.9997877947843012	WITHOUT_CLASSIFICATION	2.1220521569863463E-4	DESIGN
// adds remove as a sort-of alias for delete...	WITHOUT_CLASSIFICATION	0.9988758802164966	WITHOUT_CLASSIFICATION	0.0011241197835032924	DESIGN
//bad cast	WITHOUT_CLASSIFICATION	0.9979577639887305	WITHOUT_CLASSIFICATION	0.0020422360112694275	DESIGN
//return lhsPersister.getSubclassPropertyColumnNames(property);	WITHOUT_CLASSIFICATION	0.9948388328441874	WITHOUT_CLASSIFICATION	0.005161167155812615	DESIGN
//property-refs for associations defined on a //component are not supported, so no need to slice	WITHOUT_CLASSIFICATION	0.9843769985499808	WITHOUT_CLASSIFICATION	0.015623001450019136	DESIGN
//if there is no property-ref, assume the join //is to the subclass table (ie. the table of the //subclass that the association belongs to)	WITHOUT_CLASSIFICATION	0.9993703996049719	WITHOUT_CLASSIFICATION	6.296003950280752E-4	DESIGN
//handle a property-ref	WITHOUT_CLASSIFICATION	0.9997089565988455	WITHOUT_CLASSIFICATION	2.910434011545001E-4	DESIGN
/*NativeSQLQueryReturn*/	WITHOUT_CLASSIFICATION	0.9998404554700752	WITHOUT_CLASSIFICATION	1.595445299249041E-4	DESIGN
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9973165401337463	WITHOUT_CLASSIFICATION	0.002683459866253676	DESIGN
// why is all others non final ?	WITHOUT_CLASSIFICATION	0.9519481178921846	WITHOUT_CLASSIFICATION	0.04805188210781542	DESIGN
//this.forceCacheRefresh = forceCacheRefresh;	WITHOUT_CLASSIFICATION	0.9993152066625991	WITHOUT_CLASSIFICATION	6.847933374010019E-4	DESIGN
// HELLA IMPORTANT OPTIMIZATION!!!	WITHOUT_CLASSIFICATION	0.9993232207011862	WITHOUT_CLASSIFICATION	6.767792988138589E-4	DESIGN
/*return that.type.equals(type) && 	WITHOUT_CLASSIFICATION	0.9945107841848921	WITHOUT_CLASSIFICATION	0.005489215815107828	DESIGN
//Must occur after resolving identifiers!	WITHOUT_CLASSIFICATION	0.9949995137138632	WITHOUT_CLASSIFICATION	0.005000486286136733	DESIGN
//take a snapshot	WITHOUT_CLASSIFICATION	0.9968410005832433	WITHOUT_CLASSIFICATION	0.0031589994167567207	DESIGN
// do a check	WITHOUT_CLASSIFICATION	0.9997159122041583	WITHOUT_CLASSIFICATION	2.8408779584165287E-4	DESIGN
// the owning entity may have been deleted and its identifier unset due to // identifier-rollback; in which case, try to look up its identifier from // the persistence context	WITHOUT_CLASSIFICATION	0.9997661894416293	WITHOUT_CLASSIFICATION	2.33810558370792E-4	DESIGN
// do the work	WITHOUT_CLASSIFICATION	0.9998579204981423	WITHOUT_CLASSIFICATION	1.4207950185767996E-4	DESIGN
// We've been here before	WITHOUT_CLASSIFICATION	0.9998701274403268	WITHOUT_CLASSIFICATION	1.298725596731293E-4	DESIGN
// it is or was referenced _somewhere_	WITHOUT_CLASSIFICATION	0.9992853216313633	WITHOUT_CLASSIFICATION	7.14678368636659E-4	DESIGN
// do the work	WITHOUT_CLASSIFICATION	0.9998579204981423	WITHOUT_CLASSIFICATION	1.4207950185767996E-4	DESIGN
// if either its role changed,	WITHOUT_CLASSIFICATION	0.9999915940585643	WITHOUT_CLASSIFICATION	8.405941435705041E-6	DESIGN
// or its key changed	WITHOUT_CLASSIFICATION	0.9999977386169173	WITHOUT_CLASSIFICATION	2.2613830826914032E-6	DESIGN
// we will need to create new entries	WITHOUT_CLASSIFICATION	0.9973363483130147	WITHOUT_CLASSIFICATION	0.0026636516869852477	DESIGN
// we will need to remove ye olde entries	WITHOUT_CLASSIFICATION	0.9969240467622398	WITHOUT_CLASSIFICATION	0.003075953237760171	DESIGN
// force initialize!	WITHOUT_CLASSIFICATION	0.9998864740883956	WITHOUT_CLASSIFICATION	1.1352591160435633E-4	DESIGN
// else if it's elements changed	WITHOUT_CLASSIFICATION	0.9999491189080422	WITHOUT_CLASSIFICATION	5.088109195776177E-5	DESIGN
//ATTRIBUTES MAINTAINED BETWEEN FLUSH CYCLES	WITHOUT_CLASSIFICATION	0.9942892606861524	WITHOUT_CLASSIFICATION	0.005710739313847541	DESIGN
// session-start/post-flush persistent state	WITHOUT_CLASSIFICATION	0.9992139195572963	WITHOUT_CLASSIFICATION	7.86080442703599E-4	DESIGN
// allow the CollectionSnapshot to be serialized	WITHOUT_CLASSIFICATION	0.9980131387191036	WITHOUT_CLASSIFICATION	0.00198686128089644	DESIGN
// ATTRIBUTES USED ONLY DURING FLUSH CYCLE	WITHOUT_CLASSIFICATION	0.9993230546941648	WITHOUT_CLASSIFICATION	6.769453058352121E-4	DESIGN
// "current" means the reference that was found during flush() 	WITHOUT_CLASSIFICATION	0.9997549245296302	WITHOUT_CLASSIFICATION	2.450754703697133E-4	DESIGN
// "loaded" means the reference that is consistent  // with the current database state	WITHOUT_CLASSIFICATION	0.9992251102463704	WITHOUT_CLASSIFICATION	7.748897536296311E-4	DESIGN
// during flush, we navigate the object graph to // collections and decide what to do with them	WITHOUT_CLASSIFICATION	0.9894073742732304	WITHOUT_CLASSIFICATION	0.010592625726769432	DESIGN
// if we instantiate a collection during the flush() process, // we must ignore it for the rest of the flush()	WITHOUT_CLASSIFICATION	0.9729486696125542	WITHOUT_CLASSIFICATION	0.027051330387445824	DESIGN
// new collections that get found + wrapped // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9998116507150641	WITHOUT_CLASSIFICATION	1.8834928493586506E-4	DESIGN
//a newly wrapped collection is NOT dirty (or we get unnecessary version updates)	WITHOUT_CLASSIFICATION	0.9138579707043615	WITHOUT_CLASSIFICATION	0.08614202929563851	DESIGN
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9998404554700752	WITHOUT_CLASSIFICATION	1.595445299249041E-4	DESIGN
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9998404554700752	WITHOUT_CLASSIFICATION	1.595445299249041E-4	DESIGN
// detached collections that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9997559346149367	WITHOUT_CLASSIFICATION	2.4406538506326007E-4	DESIGN
//optimization	WITHOUT_CLASSIFICATION	0.9982660483085283	WITHOUT_CLASSIFICATION	0.0017339516914716315	DESIGN
//optimization //optimization	WITHOUT_CLASSIFICATION	0.9998404554700752	WITHOUT_CLASSIFICATION	1.595445299249041E-4	DESIGN
//re-snapshot	WITHOUT_CLASSIFICATION	0.9982660483085283	WITHOUT_CLASSIFICATION	0.0017339516914716315	DESIGN
// for convenience to save some lookups	WITHOUT_CLASSIFICATION	0.9986864078210653	WITHOUT_CLASSIFICATION	0.0013135921789346684	DESIGN
//NOTE: this is not updated when properties are fetched lazily!	WITHOUT_CLASSIFICATION	0.9852718732633413	WITHOUT_CLASSIFICATION	0.014728126736658603	DESIGN
//memory optimization	WITHOUT_CLASSIFICATION	0.9998404554700752	WITHOUT_CLASSIFICATION	1.595445299249041E-4	DESIGN
// use the id value of a newly instantiated instance as the unsaved-value	WITHOUT_CLASSIFICATION	0.9989268196278424	WITHOUT_CLASSIFICATION	0.0010731803721575695	DESIGN
// copied from Session:	WITHOUT_CLASSIFICATION	0.9997150400335262	WITHOUT_CLASSIFICATION	2.849599664738517E-4	DESIGN
// this should not happen since the DTD prevents it	WITHOUT_CLASSIFICATION	0.9996740995188732	WITHOUT_CLASSIFICATION	3.2590048112674224E-4	DESIGN
// JoinProcessor needs to know if the where clause fragment came from a dynamic filter or not so it // can put the where clause fragment in the right place in the SQL AST.   'hasFilterCondition' keeps track // of that fact.	WITHOUT_CLASSIFICATION	0.9667127677236247	WITHOUT_CLASSIFICATION	0.03328723227637523	DESIGN
// the current join represents the join between a many-to-many association table // and its "target" table.  Here we need to apply any additional filters // defined specifically on the many-to-many	WITHOUT_CLASSIFICATION	0.9957400540900848	WITHOUT_CLASSIFICATION	0.004259945909915202	DESIGN
//check basic level one nullablilty	WITHOUT_CLASSIFICATION	0.9922473343316408	WITHOUT_CLASSIFICATION	0.0077526656683591585	DESIGN
//values is not null and is checkable, we'll look deeper	WITHOUT_CLASSIFICATION	0.9558644631895235	WITHOUT_CLASSIFICATION	0.044135536810476675	DESIGN
//for non null args, check for components and elements containing components	WITHOUT_CLASSIFICATION	0.993281575617728	WITHOUT_CLASSIFICATION	0.006718424382272101	DESIGN
//cache the hashcode	WITHOUT_CLASSIFICATION	0.9993503857386671	WITHOUT_CLASSIFICATION	6.496142613328578E-4	DESIGN
//persistent collections may have components	WITHOUT_CLASSIFICATION	0.9985723785617693	WITHOUT_CLASSIFICATION	0.0014276214382306987	DESIGN
//check for all components values in the collection	WITHOUT_CLASSIFICATION	0.9939264592240917	WITHOUT_CLASSIFICATION	0.006073540775908226	DESIGN
/* will check current level if some of them are not null	WITHOUT_CLASSIFICATION	0.9960338487590079	WITHOUT_CLASSIFICATION	0.003966151240992088	DESIGN
//do the test	WITHOUT_CLASSIFICATION	0.9997889805738573	WITHOUT_CLASSIFICATION	2.110194261427043E-4	DESIGN
// if its an uninitialized proxy it can't be transient	WITHOUT_CLASSIFICATION	0.9996955635055698	WITHOUT_CLASSIFICATION	3.0443649443024295E-4	DESIGN
//unwrap it	WITHOUT_CLASSIFICATION	0.9984939233868549	WITHOUT_CLASSIFICATION	0.0015060766131450832	DESIGN
// See if the entity is already bound to this session, if not look at the // entity identifier and assume that the entity is persistent if the // id is not "unsaved" (that is, we rely on foreign keys to keep // database integrity)	WITHOUT_CLASSIFICATION	0.993184462417934	WITHOUT_CLASSIFICATION	0.0068155375820659735	DESIGN
// an unfetched association can only point to // an entity that already exists in the db	WITHOUT_CLASSIFICATION	0.9998928849487706	WITHOUT_CLASSIFICATION	1.071150512294013E-4	DESIGN
// let the interceptor inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9991481791070687	WITHOUT_CLASSIFICATION	8.518208929314013E-4	DESIGN
// let the persister inspect the instance to decide	WITHOUT_CLASSIFICATION	0.999009994172215	WITHOUT_CLASSIFICATION	9.900058277849586E-4	DESIGN
// we use the assumed value, if there is one, to avoid hitting // the database	WITHOUT_CLASSIFICATION	0.9995064776596015	WITHOUT_CLASSIFICATION	4.935223403984737E-4	DESIGN
// hit the database, after checking the session cache for a snapshot	WITHOUT_CLASSIFICATION	0.9989361058683423	WITHOUT_CLASSIFICATION	0.001063894131657755	DESIGN
// context-entity-identifier returns null explicitly if the entity // is not associated with the persistence context; so make some // deeper checks...	WITHOUT_CLASSIFICATION	0.9880118332411192	WITHOUT_CLASSIFICATION	0.011988166758880845	DESIGN
//int count = 0;	WITHOUT_CLASSIFICATION	0.9997439710472383	WITHOUT_CLASSIFICATION	2.5602895276164117E-4	DESIGN
//the first key found after the given key	WITHOUT_CLASSIFICATION	0.9993353753691023	WITHOUT_CLASSIFICATION	6.646246308976834E-4	DESIGN
//checkForEnd = false;	WITHOUT_CLASSIFICATION	0.9999760012652082	WITHOUT_CLASSIFICATION	2.3998734791725542E-5	DESIGN
//count++;	WITHOUT_CLASSIFICATION	0.997954794544069	WITHOUT_CLASSIFICATION	0.002045205455931084	DESIGN
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9954228745900296	WITHOUT_CLASSIFICATION	0.004577125409970271	DESIGN
//we ran out of keys to try	WITHOUT_CLASSIFICATION	0.9999542695336449	WITHOUT_CLASSIFICATION	4.573046635503868E-5	DESIGN
//first element of array is reserved for the actual instance we are loading!	WITHOUT_CLASSIFICATION	0.9840210246592863	WITHOUT_CLASSIFICATION	0.015978975340713717	DESIGN
//the first id found after the given id	WITHOUT_CLASSIFICATION	0.9993476169805247	WITHOUT_CLASSIFICATION	6.523830194753232E-4	DESIGN
//we ran out of ids to try	WITHOUT_CLASSIFICATION	0.9999524577351184	WITHOUT_CLASSIFICATION	4.7542264881589264E-5	DESIGN
// look for existing collection as part of the persistence context	WITHOUT_CLASSIFICATION	0.9989525566324059	WITHOUT_CLASSIFICATION	0.001047443367594135	DESIGN
// ignore this row of results! Note the early exit	WITHOUT_CLASSIFICATION	0.9994016926494265	WITHOUT_CLASSIFICATION	5.983073505734771E-4	DESIGN
// initialize this collection	WITHOUT_CLASSIFICATION	0.9997248757115379	WITHOUT_CLASSIFICATION	2.751242884621863E-4	DESIGN
// create one	WITHOUT_CLASSIFICATION	0.999767158233047	WITHOUT_CLASSIFICATION	2.3284176695309144E-4	DESIGN
// warning: can cause a recursive calls! (proxy initialization)	WITHOUT_CLASSIFICATION	0.9973854914924368	WITHOUT_CLASSIFICATION	0.0026145085075631467	DESIGN
// there were no queued additions // and the role has a cache	WITHOUT_CLASSIFICATION	0.9999720168256976	WITHOUT_CLASSIFICATION	2.79831743024473E-5	DESIGN
// and this is not a forced initialization during flush	WITHOUT_CLASSIFICATION	0.9973512934815786	WITHOUT_CLASSIFICATION	0.002648706518421445	DESIGN
// some filters affecting the collection are enabled on the session, so do not do the put into the cache.	WITHOUT_CLASSIFICATION	0.992148023297514	WITHOUT_CLASSIFICATION	0.007851976702486005	DESIGN
// cleanup code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9908986097934624	WITHOUT_CLASSIFICATION	0.00910139020653749	DESIGN
// loading collection xrefs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9958812403120904	WITHOUT_CLASSIFICATION	0.004118759687909619	DESIGN
// Collection load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9989866880350374	WITHOUT_CLASSIFICATION	0.0010133119649625916	DESIGN
// simple cache of param metadata based on query string.  Ideally, the // original "user-supplied query" string should be used to retreive this // metadata (i.e., not the para-list-expanded query string) to avoid // unnecessary cache entries. // Used solely for caching param metadata for native-sql queries, see // getSQLParameterMetadata() for a discussion as to why...	WITHOUT_CLASSIFICATION	0.9509150651851068	WITHOUT_CLASSIFICATION	0.049084934814893184	DESIGN
// the cache of the actual plans...	WITHOUT_CLASSIFICATION	0.9997990642562764	WITHOUT_CLASSIFICATION	2.0093574372358577E-4	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.9982660483085283	WITHOUT_CLASSIFICATION	0.0017339516914716315	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.9982660483085283	WITHOUT_CLASSIFICATION	0.0017339516914716315	DESIGN
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9992561778547133	WITHOUT_CLASSIFICATION	7.438221452867483E-4	DESIGN
// for native-sql queries, the param metadata is determined outside // any relation to a query plan, because query plan creation and/or // retreival for a native-sql query depends on all of the return // types having been set, which might not be the case up-front when // param metadata would be most useful	WITHOUT_CLASSIFICATION	0.984230748822487	WITHOUT_CLASSIFICATION	0.01576925117751311	DESIGN
// don't care...	WITHOUT_CLASSIFICATION	0.999713226904363	WITHOUT_CLASSIFICATION	2.8677309563698367E-4	DESIGN
// Recognition code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9909044244912791	WITHOUT_CLASSIFICATION	0.009095575508720977	DESIGN
// don't care...	WITHOUT_CLASSIFICATION	0.999713226904363	WITHOUT_CLASSIFICATION	2.8677309563698367E-4	DESIGN
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9978879887277119	WITHOUT_CLASSIFICATION	0.0021120112722881773	DESIGN
// break the outer loop !!!	WITHOUT_CLASSIFICATION	0.999992350213057	WITHOUT_CLASSIFICATION	7.649786943021652E-6	DESIGN
// named parameter	WITHOUT_CLASSIFICATION	0.999547136471471	WITHOUT_CLASSIFICATION	4.52863528529056E-4	DESIGN
// could be either an ordinal or JPA-positional parameter	WITHOUT_CLASSIFICATION	0.99956045032869	WITHOUT_CLASSIFICATION	4.3954967131003503E-4	DESIGN
// a peek ahead showed this as an JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9951146232293361	WITHOUT_CLASSIFICATION	0.004885376770663905	DESIGN
// make sure this "name" is an integral	WITHOUT_CLASSIFICATION	0.9831081744423172	WITHOUT_CLASSIFICATION	0.01689182555768279	DESIGN
// pre-determine and cache the hashcode	WITHOUT_CLASSIFICATION	0.9996826694429779	WITHOUT_CLASSIFICATION	3.1733055702202486E-4	DESIGN
// perform the actual work	WITHOUT_CLASSIFICATION	0.9999934544332318	WITHOUT_CLASSIFICATION	6.545566768232334E-6	DESIGN
// if everything went ok, commit the transaction and close the obtained // connection handle...	WITHOUT_CLASSIFICATION	0.9999178970869347	WITHOUT_CLASSIFICATION	8.210291306532853E-5	DESIGN
// at some point the processing went bad, so we need to: //      1) make sure the connection handle gets released //      2) try to cleanup the JTA context as much as possible	WITHOUT_CLASSIFICATION	0.9614548568746073	WITHOUT_CLASSIFICATION	0.038545143125392686	DESIGN
// finally handle the exception	WITHOUT_CLASSIFICATION	0.9997677160824788	WITHOUT_CLASSIFICATION	2.3228391752122817E-4	DESIGN
// a "detached" collection that belonged to a different entity	WITHOUT_CLASSIFICATION	0.9786929379608913	WITHOUT_CLASSIFICATION	0.021307062039108808	DESIGN
//saveOrUpdateCopy() is deprecated!	WITHOUT_CLASSIFICATION	0.991388485269767	WITHOUT_CLASSIFICATION	0.008611514730233047	DESIGN
// collectionPersister should not be null, but we don't want to throw // an exception if it is null	WITHOUT_CLASSIFICATION	0.8287196430164606	WITHOUT_CLASSIFICATION	0.17128035698353936	DESIGN
// otherwise a null or brand new collection // this will also (inefficiently) handle arrays, which // have no snapshot, so we can't do any better //processArrayOrNewCollection(collection, type);	WITHOUT_CLASSIFICATION	0.9252073633911788	WITHOUT_CLASSIFICATION	0.07479263660882116	DESIGN
// a "detached" collection that originally belonged to the same entity	WITHOUT_CLASSIFICATION	0.9845127970516332	WITHOUT_CLASSIFICATION	0.015487202948366944	DESIGN
//do nothing	WITHOUT_CLASSIFICATION	0.9998779145635518	WITHOUT_CLASSIFICATION	1.2208543644811972E-4	DESIGN
//do nothing	WITHOUT_CLASSIFICATION	0.9998779145635518	WITHOUT_CLASSIFICATION	1.2208543644811972E-4	DESIGN
//Force a substitution!	WITHOUT_CLASSIFICATION	0.9997089565988455	WITHOUT_CLASSIFICATION	2.910434011545001E-4	DESIGN
// The user requested a "greater" (i.e. more restrictive) form of // pessimistic lock	WITHOUT_CLASSIFICATION	0.994683633972234	WITHOUT_CLASSIFICATION	0.00531636602776595	DESIGN
// the database now holds a lock + the object is flushed from the cache, // so release the soft lock	WITHOUT_CLASSIFICATION	0.998793282508965	WITHOUT_CLASSIFICATION	0.001206717491034953	DESIGN
// now update the object .. has to be outside the main if block above (because of collections)	WITHOUT_CLASSIFICATION	0.9997631811514825	WITHOUT_CLASSIFICATION	2.3681884851751924E-4	DESIGN
// Search for collections by reachability, updating their role. // We don't want to touch collections reachable from a deleted object	WITHOUT_CLASSIFICATION	0.8652895639303788	WITHOUT_CLASSIFICATION	0.1347104360696211	DESIGN
// this is a situation where the entity id is assigned by a post-insert generator // and was saved outside the transaction forcing it to be delayed	WITHOUT_CLASSIFICATION	0.9662133625474977	WITHOUT_CLASSIFICATION	0.03378663745250223	DESIGN
// NOTE: we need to do the wrap here even if its not "dirty", // because collections need wrapping but changes to _them_ // don't dirty the container. Also, for versioned data, we // need to wrap before calling searchForDirtyCollections	WITHOUT_CLASSIFICATION	0.9978309654874026	WITHOUT_CLASSIFICATION	0.0021690345125974816	DESIGN
//grab its state saved at deletion	WITHOUT_CLASSIFICATION	0.9957330082892127	WITHOUT_CLASSIFICATION	0.004266991710787311	DESIGN
// grab its current state	WITHOUT_CLASSIFICATION	0.9999837375762509	WITHOUT_CLASSIFICATION	1.6262423749075886E-5	DESIGN
// schedule the update // note that we intentionally do _not_ pass in currentPersistentState!	WITHOUT_CLASSIFICATION	0.9996057915254546	WITHOUT_CLASSIFICATION	3.9420847454535625E-4	DESIGN
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9988763988409232	WITHOUT_CLASSIFICATION	0.0011236011590768378	DESIGN
// give the Interceptor a chance to process property values, if the properties // were modified by the Interceptor, we need to set them back to the object	WITHOUT_CLASSIFICATION	0.9985160653287559	WITHOUT_CLASSIFICATION	0.0014839346712440392	DESIGN
// compare to cached state (ignoring collections unless versioned)	WITHOUT_CLASSIFICATION	0.9990953999712057	WITHOUT_CLASSIFICATION	9.046000287943534E-4	DESIGN
// if it was dirtied by a collection only	WITHOUT_CLASSIFICATION	0.9954503418071597	WITHOUT_CLASSIFICATION	0.00454965819284031	DESIGN
// increment the version number (if necessary)	WITHOUT_CLASSIFICATION	0.999685340250782	WITHOUT_CLASSIFICATION	3.146597492179567E-4	DESIGN
// check nullability but do not perform command execute // we'll use scheduled updates for that.	WITHOUT_CLASSIFICATION	0.9981971736394984	WITHOUT_CLASSIFICATION	0.001802826360501635	DESIGN
//give the Interceptor a chance to modify property values	WITHOUT_CLASSIFICATION	0.9994999177432656	WITHOUT_CLASSIFICATION	5.000822567342943E-4	DESIGN
//now we might need to recalculate the dirtyProperties array	WITHOUT_CLASSIFICATION	0.940337484906139	WITHOUT_CLASSIFICATION	0.05966251509386099	DESIGN
//use the current version	WITHOUT_CLASSIFICATION	0.9999398069261456	WITHOUT_CLASSIFICATION	6.0193073854478134E-5	DESIGN
// Interceptor returned null, so do the dirtycheck ourself, if possible	WITHOUT_CLASSIFICATION	0.9999182975496981	WITHOUT_CLASSIFICATION	8.170245030187883E-5	DESIGN
// object loaded by update()	WITHOUT_CLASSIFICATION	0.9999284667554187	WITHOUT_CLASSIFICATION	7.153324458131932E-5	DESIGN
// dirty check against the usual snapshot of the entity	WITHOUT_CLASSIFICATION	0.9999668688937958	WITHOUT_CLASSIFICATION	3.313110620418066E-5	DESIGN
// dirty check against the database snapshot, if possible/necessary	WITHOUT_CLASSIFICATION	0.9999648953582285	WITHOUT_CLASSIFICATION	3.510464177143287E-5	DESIGN
// the Interceptor handled the dirty checking	WITHOUT_CLASSIFICATION	0.9995632517857377	WITHOUT_CLASSIFICATION	4.367482142623112E-4	DESIGN
//even process null collections	WITHOUT_CLASSIFICATION	0.9845714589922951	WITHOUT_CLASSIFICATION	0.015428541007704884	DESIGN
// get the id from the object	WITHOUT_CLASSIFICATION	0.9999766517396066	WITHOUT_CLASSIFICATION	2.334826039341623E-5	DESIGN
//always do an INSERT, and let it fail by constraint violation	WITHOUT_CLASSIFICATION	0.9887596487682461	WITHOUT_CLASSIFICATION	0.011240351231753968	DESIGN
//what is the version on the database?	WITHOUT_CLASSIFICATION	0.995938621861119	WITHOUT_CLASSIFICATION	0.004061378138880939	DESIGN
/// HHH-2378	WITHOUT_CLASSIFICATION	0.9982660483085283	WITHOUT_CLASSIFICATION	0.0017339516914716315	DESIGN
//will result in a SQL UPDATE:	WITHOUT_CLASSIFICATION	0.9996681097317006	WITHOUT_CLASSIFICATION	3.318902682993916E-4	DESIGN
//else do nothing (don't even reassociate object!)	WITHOUT_CLASSIFICATION	0.9994021008934687	WITHOUT_CLASSIFICATION	5.978991065312015E-4	DESIGN
// no existing row - do an insert	WITHOUT_CLASSIFICATION	0.9979099070682467	WITHOUT_CLASSIFICATION	0.002090092931753311	DESIGN
//refresh() does not pass an entityName	WITHOUT_CLASSIFICATION	0.9978973451651929	WITHOUT_CLASSIFICATION	0.002102654834807087	DESIGN
//do not return a proxy! //(this option indicates we are initializing a proxy)	WITHOUT_CLASSIFICATION	0.9964754981657453	WITHOUT_CLASSIFICATION	0.0035245018342547297	DESIGN
//return a proxy if appropriate	WITHOUT_CLASSIFICATION	0.9865751792996346	WITHOUT_CLASSIFICATION	0.013424820700365452	DESIGN
// return existing object or initialized proxy (unless deleted)	WITHOUT_CLASSIFICATION	0.9993196977078581	WITHOUT_CLASSIFICATION	6.803022921419361E-4	DESIGN
// return new uninitialized proxy	WITHOUT_CLASSIFICATION	0.999820640689019	WITHOUT_CLASSIFICATION	1.7935931098109634E-4	DESIGN
// this object was already loaded	WITHOUT_CLASSIFICATION	0.9965813714826713	WITHOUT_CLASSIFICATION	0.0034186285173286052	DESIGN
// Entity was found in second-level cache...	WITHOUT_CLASSIFICATION	0.9990408307093965	WITHOUT_CLASSIFICATION	9.591692906034831E-4	DESIGN
// make it circular-reference safe	WITHOUT_CLASSIFICATION	0.9918157833505544	WITHOUT_CLASSIFICATION	0.008184216649445604	DESIGN
// intializes result by side-effect	WITHOUT_CLASSIFICATION	0.9992723518284646	WITHOUT_CLASSIFICATION	7.276481715353218E-4	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Pre-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992598194087549	WITHOUT_CLASSIFICATION	7.401805912449991E-4	DESIGN
//some statistics	WITHOUT_CLASSIFICATION	0.9982660483085283	WITHOUT_CLASSIFICATION	0.0017339516914716315	DESIGN
//safe from concurrent modification because of how entryList() is implemented on IdentityMap	WITHOUT_CLASSIFICATION	0.9965537034783982	WITHOUT_CLASSIFICATION	0.0034462965216018123	DESIGN
// Initialize dirty flags for arrays + collections with composite elements // and reset reached, doupdate, etc.	WITHOUT_CLASSIFICATION	0.9998381618172917	WITHOUT_CLASSIFICATION	1.618381827084301E-4	DESIGN
// Among other things, updateReachables() will recursively load all // collections that are moving roles. This might cause entities to // be loaded.	WITHOUT_CLASSIFICATION	0.9139048592277568	WITHOUT_CLASSIFICATION	0.08609514077224323	DESIGN
// So this needs to be safe from concurrent modification problems. // It is safe because of how IdentityMap implements entrySet()	WITHOUT_CLASSIFICATION	0.9582723664767826	WITHOUT_CLASSIFICATION	0.04172763352321733	DESIGN
// Update the status of the object and if necessary, schedule an update	WITHOUT_CLASSIFICATION	0.9999094452015239	WITHOUT_CLASSIFICATION	9.055479847606695E-5	DESIGN
// Schedule updates to collections:	WITHOUT_CLASSIFICATION	0.9988564018039029	WITHOUT_CLASSIFICATION	0.0011435981960971158	DESIGN
// we need to lock the collection caches before // executing entity inserts/updates in order to // account for bidi associations	WITHOUT_CLASSIFICATION	0.8225274092587459	WITHOUT_CLASSIFICATION	0.17747259074125407	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Post-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992598194087549	WITHOUT_CLASSIFICATION	7.401805912449991E-4	DESIGN
//the database has changed now, so the subselect results need to be invalidated	WITHOUT_CLASSIFICATION	0.9987451145007022	WITHOUT_CLASSIFICATION	0.0012548854992977712	DESIGN
//if the collection is dereferenced, remove from the session cache //iter.remove(); //does not work, since the entrySet is not backed by the set	WITHOUT_CLASSIFICATION	0.994101477963172	WITHOUT_CLASSIFICATION	0.005898522036827986	DESIGN
//otherwise recreate the mapping between the collection and its key	WITHOUT_CLASSIFICATION	0.9739506432897352	WITHOUT_CLASSIFICATION	0.026049356710264763	DESIGN
//get a snapshot	WITHOUT_CLASSIFICATION	0.9972133356920728	WITHOUT_CLASSIFICATION	0.002786664307927199	DESIGN
/* package-private */	WITHOUT_CLASSIFICATION	0.9999960241746976	WITHOUT_CLASSIFICATION	3.975825302506309E-6	DESIGN
/* package-private */	WITHOUT_CLASSIFICATION	0.9999960241746976	WITHOUT_CLASSIFICATION	3.975825302506309E-6	DESIGN
// key is an entity involved with the operation performed by the listener; // value is a flag indicating if the listener explicitly operates on the entity	WITHOUT_CLASSIFICATION	0.9981866059030525	WITHOUT_CLASSIFICATION	0.0018133940969474298	DESIGN
// EARLY EXIT!!!	WITHOUT_CLASSIFICATION	0.9997952314504504	WITHOUT_CLASSIFICATION	2.047685495496311E-4	DESIGN
//ie. the entity came in from update()	WITHOUT_CLASSIFICATION	0.9947904162373136	WITHOUT_CLASSIFICATION	0.0052095837626864065	DESIGN
// before any callbacks, etc, so subdeletions see that this deletion happened first	WITHOUT_CLASSIFICATION	0.9979251894022887	WITHOUT_CLASSIFICATION	0.002074810597711342	DESIGN
// Ensures that containing deletions happen before sub-deletions	WITHOUT_CLASSIFICATION	0.9988825146198353	WITHOUT_CLASSIFICATION	0.0011174853801646785	DESIGN
//	WITHOUT_CLASSIFICATION	0.999758407950086	WITHOUT_CLASSIFICATION	2.4159204991409242E-4	DESIGN
// cascade-delete to collections BEFORE the collection owner is deleted	WITHOUT_CLASSIFICATION	0.9981597084521683	WITHOUT_CLASSIFICATION	0.0018402915478317862	DESIGN
// cascade-delete to many-to-one AFTER the parent was deleted	WITHOUT_CLASSIFICATION	0.9995019650139776	WITHOUT_CLASSIFICATION	4.980349860224721E-4	DESIGN
// if it is an initialized proxy, let cascade // handle it later on	WITHOUT_CLASSIFICATION	0.9987119620848797	WITHOUT_CLASSIFICATION	0.0012880379151202523	DESIGN
//assign the requested id to the proxy, *before* //reassociating the proxy	WITHOUT_CLASSIFICATION	0.9989276620017352	WITHOUT_CLASSIFICATION	0.0010723379982648035	DESIGN
// an uninitialized proxy, noop, don't even need to // return an id, since it is never a save()	WITHOUT_CLASSIFICATION	0.9995565886541449	WITHOUT_CLASSIFICATION	4.434113458551329E-4	DESIGN
//initialize properties of the event:	WITHOUT_CLASSIFICATION	0.9984321300254599	WITHOUT_CLASSIFICATION	0.0015678699745399654	DESIGN
//return the id in the event object	WITHOUT_CLASSIFICATION	0.9873863838521862	WITHOUT_CLASSIFICATION	0.012613616147813736	DESIGN
//TRANSIENT or DELETED	WITHOUT_CLASSIFICATION	0.9998732886087563	WITHOUT_CLASSIFICATION	1.267113912436296E-4	DESIGN
// use the id assigned to the instance	WITHOUT_CLASSIFICATION	0.9993510889367886	WITHOUT_CLASSIFICATION	6.489110632114972E-4	DESIGN
// assume this is a newly instantiated transient object // which should be saved rather than updated	WITHOUT_CLASSIFICATION	0.796957933845103	WITHOUT_CLASSIFICATION	0.20304206615489698	DESIGN
// this is a transient object with existing persistent state not loaded by the session	WITHOUT_CLASSIFICATION	0.9930066936822508	WITHOUT_CLASSIFICATION	0.006993306317749167	DESIGN
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9958002718169713	WITHOUT_CLASSIFICATION	0.004199728183028701	DESIGN
//cachedState,	WITHOUT_CLASSIFICATION	0.9982660483085283	WITHOUT_CLASSIFICATION	0.0017339516914716315	DESIGN
//assume true, since we don't really know, and it doesn't matter	WITHOUT_CLASSIFICATION	0.9983113304185264	WITHOUT_CLASSIFICATION	0.0016886695814735614	DESIGN
//a "detached" collection!	WITHOUT_CLASSIFICATION	0.9998404554700752	WITHOUT_CLASSIFICATION	1.595445299249041E-4	DESIGN
// if the collection belonged to a different entity, // clean up the existing state of the collection	WITHOUT_CLASSIFICATION	0.9928405197125302	WITHOUT_CLASSIFICATION	0.0071594802874698025	DESIGN
//log.debug( "calling onLoad()" );	WITHOUT_CLASSIFICATION	0.9942892606861524	WITHOUT_CLASSIFICATION	0.005710739313847541	DESIGN
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9982660483085283	WITHOUT_CLASSIFICATION	0.0017339516914716315	DESIGN
// note: performExecutions() clears all collectionXxxxtion  // collections (the collection actions) in the session	WITHOUT_CLASSIFICATION	0.9919115848976443	WITHOUT_CLASSIFICATION	0.00808841510235567	DESIGN
// if no array holder we found an unwrappered array (this can't occur, // because we now always call wrap() before getting to here) // return (ah==null) ? true : searchForDirtyCollections(ah, type);	WITHOUT_CLASSIFICATION	0.9992571545721932	WITHOUT_CLASSIFICATION	7.428454278067461E-4	DESIGN
// if not wrappered yet, its dirty (this can't occur, because // we now always call wrap() before getting to here) // return ( ! (obj instanceof PersistentCollection) ) ? //true : searchForDirtyCollections( (PersistentCollection) obj, type );	WITHOUT_CLASSIFICATION	0.9768108817324892	WITHOUT_CLASSIFICATION	0.02318911826751073	DESIGN
//we need to check even if it was not initialized, because of delayed adds!	WITHOUT_CLASSIFICATION	0.995962126707518	WITHOUT_CLASSIFICATION	0.004037873292481931	DESIGN
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9982660483085283	WITHOUT_CLASSIFICATION	0.0017339516914716315	DESIGN
// find any entities that are still transient after retry	WITHOUT_CLASSIFICATION	0.9993936668014273	WITHOUT_CLASSIFICATION	6.063331985727444E-4	DESIGN
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9982660483085283	WITHOUT_CLASSIFICATION	0.0017339516914716315	DESIGN
// Check the persistence context for an entry relating to this // entity to be merged...	WITHOUT_CLASSIFICATION	0.9961349404624544	WITHOUT_CLASSIFICATION	0.0038650595375455815	DESIGN
// we have specialized case of a detached entity from the // perspective of the merge operation.  Specifically, we // have an incoming entity instance which has a corresponding // entry in the current persistence context, but registered // under a different entity instance	WITHOUT_CLASSIFICATION	0.9997208908595563	WITHOUT_CLASSIFICATION	2.7910914044375834E-4	DESIGN
//DELETED	WITHOUT_CLASSIFICATION	0.997954794544069	WITHOUT_CLASSIFICATION	0.002045205455931084	DESIGN
//before cascade!	WITHOUT_CLASSIFICATION	0.9982660483085283	WITHOUT_CLASSIFICATION	0.0017339516914716315	DESIGN
// cascade first, so that all unsaved objects get their // copy created before we actually copy //cascadeOnMerge(event, persister, entity, copyCache, Cascades.CASCADE_BEFORE_MERGE);	WITHOUT_CLASSIFICATION	0.9997566532896265	WITHOUT_CLASSIFICATION	2.4334671037363448E-4	DESIGN
//this bit is only *really* absolutely necessary for handling //requestedId, but is also good if we merge multiple object //graphs, since it helps ensure uniqueness	WITHOUT_CLASSIFICATION	0.8800795249231718	WITHOUT_CLASSIFICATION	0.11992047507682832	DESIGN
// continue...; we'll find out if it ends up not getting saved later	WITHOUT_CLASSIFICATION	0.9999329243526995	WITHOUT_CLASSIFICATION	6.707564730042605E-5	DESIGN
// cascade first, so that all unsaved objects get their // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9997566532896265	WITHOUT_CLASSIFICATION	2.4334671037363448E-4	DESIGN
// check that entity id = requestedId	WITHOUT_CLASSIFICATION	0.9999525686920674	WITHOUT_CLASSIFICATION	4.743130793266496E-5	DESIGN
//before cascade!	WITHOUT_CLASSIFICATION	0.9982660483085283	WITHOUT_CLASSIFICATION	0.0017339516914716315	DESIGN
// we got here because we assumed that an instance // with an assigned id was detached, when it was // really persistent	WITHOUT_CLASSIFICATION	0.9982226237344887	WITHOUT_CLASSIFICATION	0.001777376265511294	DESIGN
// cascade first, so that all unsaved objects get their  // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9995486781851367	WITHOUT_CLASSIFICATION	4.513218148633753E-4	DESIGN
//copyValues works by reflection, so explicitly mark the entity instance dirty	WITHOUT_CLASSIFICATION	0.9945233715631202	WITHOUT_CLASSIFICATION	0.005476628436879778	DESIGN
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.9982660483085283	WITHOUT_CLASSIFICATION	0.0017339516914716315	DESIGN
//source.getBatcher().executeBatch(); //found another way to ensure that all batched joined inserts have been executed	WITHOUT_CLASSIFICATION	0.9868891884394674	WITHOUT_CLASSIFICATION	0.01311081156053251	DESIGN
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9988763988409232	WITHOUT_CLASSIFICATION	0.0011236011590768378	DESIGN
//now done in EntityIdentityInsertAction //persister.setIdentifier( entity, id, source.getEntityMode() );	WITHOUT_CLASSIFICATION	0.9685950064417165	WITHOUT_CLASSIFICATION	0.03140499355828364	DESIGN
//source.getPersistenceContext().removeNonExist( new EntityKey( id, persister, source.getEntityMode() ) );	WITHOUT_CLASSIFICATION	0.9938013770511319	WITHOUT_CLASSIFICATION	0.006198622948868096	DESIGN
//keep the existing version number in the case of replicate!	WITHOUT_CLASSIFICATION	0.9985140318998608	WITHOUT_CLASSIFICATION	0.001485968100139143	DESIGN
// cascade-save to many-to-one BEFORE the parent is saved	WITHOUT_CLASSIFICATION	0.9995088423527029	WITHOUT_CLASSIFICATION	4.911576472972465E-4	DESIGN
//pass this as an argument only to avoid double looking	WITHOUT_CLASSIFICATION	0.9993216038966743	WITHOUT_CLASSIFICATION	6.783961033256319E-4	DESIGN
// the object is persistent	WITHOUT_CLASSIFICATION	0.9999669191389151	WITHOUT_CLASSIFICATION	3.308086108498134E-5	DESIGN
//the entity is associated with the session, so check its status	WITHOUT_CLASSIFICATION	0.999367571417035	WITHOUT_CLASSIFICATION	6.324285829649826E-4	DESIGN
// do nothing for persistent instances	WITHOUT_CLASSIFICATION	0.999890493147522	WITHOUT_CLASSIFICATION	1.0950685247810107E-4	DESIGN
//ie. e.status==DELETED	WITHOUT_CLASSIFICATION	0.9998404554700752	WITHOUT_CLASSIFICATION	1.595445299249041E-4	DESIGN
// the object is transient or detached	WITHOUT_CLASSIFICATION	0.9990545496372363	WITHOUT_CLASSIFICATION	9.454503627636017E-4	DESIGN
//NOTE EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9982660483085283	WITHOUT_CLASSIFICATION	0.0017339516914716315	DESIGN
// Private constructor - stops checkstyle from complaining.	WITHOUT_CLASSIFICATION	0.9987852434204089	WITHOUT_CLASSIFICATION	0.0012147565795911472	DESIGN
// First, try to find a matching constructor accepting a ViolatedConstraintNameExtracter param...	WITHOUT_CLASSIFICATION	0.9994849632229897	WITHOUT_CLASSIFICATION	5.150367770102808E-4	DESIGN
// eat it and try next	WITHOUT_CLASSIFICATION	0.9999732139687785	WITHOUT_CLASSIFICATION	2.6786031221499853E-5	DESIGN
// Otherwise, try to use the no-arg constructor	WITHOUT_CLASSIFICATION	0.9998518045294392	WITHOUT_CLASSIFICATION	1.4819547056066587E-4	DESIGN
// oracle sql-state code for deadlock	WITHOUT_CLASSIFICATION	0.9830456434368848	WITHOUT_CLASSIFICATION	0.016954356563115093	DESIGN
// CollectionPropertyMapping processes everything except 'index'.	WITHOUT_CLASSIFICATION	0.9986823177256806	WITHOUT_CLASSIFICATION	0.0013176822743193278	DESIGN
// remove initial ", "	WITHOUT_CLASSIFICATION	0.9999896288871863	WITHOUT_CLASSIFICATION	1.0371112813577039E-5	DESIGN
// remove initial " and "	WITHOUT_CLASSIFICATION	0.9999860982145864	WITHOUT_CLASSIFICATION	1.3901785413730263E-5	DESIGN
//beforeClassTokens.add("new"); DEFINITELY DON'T HAVE THIS!!	WITHOUT_CLASSIFICATION	0.9942892606861524	WITHOUT_CLASSIFICATION	0.005710739313847541	DESIGN
//notAfterClassTokens.add(",");	WITHOUT_CLASSIFICATION	0.9942892606861524	WITHOUT_CLASSIFICATION	0.005710739313847541	DESIGN
// just especially for the trivial collection filter	WITHOUT_CLASSIFICATION	0.9981728968312082	WITHOUT_CLASSIFICATION	0.001827103168791744	DESIGN
//update last non-whitespace token, if necessary	WITHOUT_CLASSIFICATION	0.9646778947382509	WITHOUT_CLASSIFICATION	0.035322105261749066	DESIGN
// select-range is terminated by declaration of "from"	WITHOUT_CLASSIFICATION	0.9994923607510294	WITHOUT_CLASSIFICATION	5.076392489705744E-4	DESIGN
//scan for next non-whitespace token	WITHOUT_CLASSIFICATION	0.9806226803393081	WITHOUT_CLASSIFICATION	0.01937731966069197	DESIGN
// Note this!!	WITHOUT_CLASSIFICATION	0.9998474524129058	WITHOUT_CLASSIFICATION	1.525475870942367E-4	DESIGN
// Error message constants.	WITHOUT_CLASSIFICATION	0.9999700398237854	WITHOUT_CLASSIFICATION	2.996017621463165E-5	DESIGN
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9991161232296256	WITHOUT_CLASSIFICATION	8.838767703744405E-4	DESIGN
// semantic action handling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9989810665631427	WITHOUT_CLASSIFICATION	0.0010189334368573854	DESIGN
// Handle collection-fiter compilation. // IMPORTANT NOTE: This is modifying the INPUT (HQL) tree, not the output tree!	WITHOUT_CLASSIFICATION	0.9977490669532156	WITHOUT_CLASSIFICATION	0.002250933046784473	DESIGN
// Show the modified AST.	WITHOUT_CLASSIFICATION	0.9999981790288223	WITHOUT_CLASSIFICATION	1.8209711776880023E-6	DESIGN
// Create a parameter specification for the collection filter...	WITHOUT_CLASSIFICATION	0.9903947173774507	WITHOUT_CLASSIFICATION	0.009605282622549451	DESIGN
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999300946752182	WITHOUT_CLASSIFICATION	6.990532478181727E-5	DESIGN
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999300946752182	WITHOUT_CLASSIFICATION	6.990532478181727E-5	DESIGN
// Get the names of the columns used to link between the collection // owner and the collection elements.	WITHOUT_CLASSIFICATION	0.9981541985301845	WITHOUT_CLASSIFICATION	0.0018458014698155346	DESIGN
// The path AST should be a DotNode, and it should have been evaluated already.	WITHOUT_CLASSIFICATION	0.9978098448072721	WITHOUT_CLASSIFICATION	0.0021901551927278845	DESIGN
// Tell the dot node about the join type.	WITHOUT_CLASSIFICATION	0.9996758675871386	WITHOUT_CLASSIFICATION	3.2413241286140493E-4	DESIGN
// Re-arrange the tree so that the collection function is the root and the lhs is the path.	WITHOUT_CLASSIFICATION	0.9982756699502674	WITHOUT_CLASSIFICATION	0.001724330049732681	DESIGN
// Don't forget to resolve the argument! // Resolve the collection function now.	WITHOUT_CLASSIFICATION	0.9973190294770031	WITHOUT_CLASSIFICATION	0.0026809705229969283	DESIGN
// Resolve everything up to this dot, but don't resolve the placeholders yet.	WITHOUT_CLASSIFICATION	0.9996041099428913	WITHOUT_CLASSIFICATION	3.958900571088239E-4	DESIGN
// Should mean that no such property was found	WITHOUT_CLASSIFICATION	0.9998323060017313	WITHOUT_CLASSIFICATION	1.6769399826870848E-4	DESIGN
// Was there an explicit select expression?	WITHOUT_CLASSIFICATION	0.9997964030718794	WITHOUT_CLASSIFICATION	2.0359692812058964E-4	DESIGN
// Attach any mapping-defined "ORDER BY" fragments	WITHOUT_CLASSIFICATION	0.999411178237904	WITHOUT_CLASSIFICATION	5.888217620960175E-4	DESIGN
// Use the explicitly declared select expression; determine the // return types indicated by each select token	WITHOUT_CLASSIFICATION	0.9996815752997299	WITHOUT_CLASSIFICATION	3.184247002701246E-4	DESIGN
// After that, process the JOINs. // Invoke a delegate to do the work, as this is farily complex.	WITHOUT_CLASSIFICATION	0.9978447642926883	WITHOUT_CLASSIFICATION	0.002155235707311711	DESIGN
// Make #@%$^#^&# sure no alias is applied to the table name	WITHOUT_CLASSIFICATION	0.9997920247764288	WITHOUT_CLASSIFICATION	2.0797522357116505E-4	DESIGN
// We need to generate ids as part of this bulk insert. // // Note that this is only supported for sequence-style generators and // post-insert-style generators; basically, only in-db generators	WITHOUT_CLASSIFICATION	0.9977104953248352	WITHOUT_CLASSIFICATION	0.002289504675164842	DESIGN
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999300946752182	WITHOUT_CLASSIFICATION	6.990532478181727E-5	DESIGN
// We need to seed the version value as part of this bulk insert	WITHOUT_CLASSIFICATION	0.9977521611449416	WITHOUT_CLASSIFICATION	0.002247838855058413	DESIGN
// we need to wrtap the param in a cast()	WITHOUT_CLASSIFICATION	0.9910974905526758	WITHOUT_CLASSIFICATION	0.008902509447324153	DESIGN
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9939105760115536	WITHOUT_CLASSIFICATION	0.00608942398844645	DESIGN
// Generate implicit joins, only if necessary.	WITHOUT_CLASSIFICATION	0.999687402225953	WITHOUT_CLASSIFICATION	3.125977740470452E-4	DESIGN
// Notify the FROM element that it is being referenced by the select.	WITHOUT_CLASSIFICATION	0.9994375376774961	WITHOUT_CLASSIFICATION	5.624623225039426E-4	DESIGN
// Turn off includeSubclasses on all FromElements.	WITHOUT_CLASSIFICATION	0.9995928952849659	WITHOUT_CLASSIFICATION	4.0710471503402004E-4	DESIGN
// create the node initially with the param name so that it shows // appropriately in the "original text" attribute	WITHOUT_CLASSIFICATION	0.9995301239830049	WITHOUT_CLASSIFICATION	4.698760169951451E-4	DESIGN
// Use the delegate, resolve identifiers as FROM element aliases.	WITHOUT_CLASSIFICATION	0.9999194824897149	WITHOUT_CLASSIFICATION	8.051751028515293E-5	DESIGN
// select clauses for insert statements should alwasy be treated as shallow	WITHOUT_CLASSIFICATION	0.9920583464419537	WITHOUT_CLASSIFICATION	0.007941653558046392	DESIGN
// no need to even collect this information if the persister is considered multi-table	WITHOUT_CLASSIFICATION	0.9975919159260327	WITHOUT_CLASSIFICATION	0.0024080840739673435	DESIGN
// Make sure that the persister is versioned	WITHOUT_CLASSIFICATION	0.9996477111205363	WITHOUT_CLASSIFICATION	3.5228887946360424E-4	DESIGN
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9991161232296256	WITHOUT_CLASSIFICATION	8.838767703744405E-4	DESIGN
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999300946752182	WITHOUT_CLASSIFICATION	6.990532478181727E-5	DESIGN
// --Commented out by Inspection (12/11/04 10:56 AM): int getWarningCount();	WITHOUT_CLASSIFICATION	0.9997025980984952	WITHOUT_CLASSIFICATION	2.9740190150480167E-4	DESIGN
// Alias references and identifiers use the same node class.	WITHOUT_CLASSIFICATION	0.9987467461366916	WITHOUT_CLASSIFICATION	0.00125325386330842	DESIGN
// switch	WITHOUT_CLASSIFICATION	0.9997692793174165	WITHOUT_CLASSIFICATION	2.307206825834326E-4	DESIGN
// make a new one	WITHOUT_CLASSIFICATION	0.9966607509756666	WITHOUT_CLASSIFICATION	0.003339249024333381	DESIGN
// just do the regular thing if you can't find the ctor // Your AST must have default ctor to use this.	WITHOUT_CLASSIFICATION	0.9986501800740081	WITHOUT_CLASSIFICATION	0.0013498199259919662	DESIGN
// Initialize SQL nodes here.	WITHOUT_CLASSIFICATION	0.9999749063484101	WITHOUT_CLASSIFICATION	2.509365158989346E-5	DESIGN
// semantic action processing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9990420830938677	WITHOUT_CLASSIFICATION	9.579169061322138E-4	DESIGN
// if template is null we just write the function out as it appears in the hql statement	WITHOUT_CLASSIFICATION	0.999892751181115	WITHOUT_CLASSIFICATION	1.0724881888500725E-4	DESIGN
// this function has a template -> redirect output and catch the arguments	WITHOUT_CLASSIFICATION	0.9999440414037847	WITHOUT_CLASSIFICATION	5.595859621537418E-5	DESIGN
// --- Inner classes (moved here from sql-gen.g) ---	WITHOUT_CLASSIFICATION	0.9982352408418089	WITHOUT_CLASSIFICATION	0.0017647591581911413	DESIGN
// check two "adjecent" nodes at the top of the from-clause tree	WITHOUT_CLASSIFICATION	0.9999508929876141	WITHOUT_CLASSIFICATION	4.910701238581877E-5	DESIGN
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9944455023118174	WITHOUT_CLASSIFICATION	0.005554497688182537	DESIGN
// these are just two unrelated table references	WITHOUT_CLASSIFICATION	0.99990099168504	WITHOUT_CLASSIFICATION	9.900831495995263E-5	DESIGN
// again, both should be FromElements	WITHOUT_CLASSIFICATION	0.9946985552575528	WITHOUT_CLASSIFICATION	0.0053014447424472875	DESIGN
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9978879887277119	WITHOUT_CLASSIFICATION	0.0021120112722881773	DESIGN
// right represents a joins originating from left; or // both right and left reprersent joins originating from the same FromElement	WITHOUT_CLASSIFICATION	0.9840549063267451	WITHOUT_CLASSIFICATION	0.015945093673255004	DESIGN
// check a set of parent/child nodes in the from-clause tree // to determine if a comma is required between them	WITHOUT_CLASSIFICATION	0.9992829369290209	WITHOUT_CLASSIFICATION	7.170630709790522E-4	DESIGN
// right represents a joins originating from left...	WITHOUT_CLASSIFICATION	0.9902849890550358	WITHOUT_CLASSIFICATION	0.009715010944964245	DESIGN
// all clear	WITHOUT_CLASSIFICATION	0.9998315756674127	WITHOUT_CLASSIFICATION	1.6842433258733492E-4	DESIGN
// Ignore the token class name parameter, and use a specific token class.	WITHOUT_CLASSIFICATION	0.9986355134951191	WITHOUT_CLASSIFICATION	0.00136448650488088	DESIGN
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9915490086586176	WITHOUT_CLASSIFICATION	0.008450991341382354	DESIGN
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9915490086586176	WITHOUT_CLASSIFICATION	0.008450991341382354	DESIGN
// remember that ordinal parameters numbers are 1-based!!!	WITHOUT_CLASSIFICATION	0.9986146656965806	WITHOUT_CLASSIFICATION	0.001385334303419329	DESIGN
// don't care about other param types here, just those explicitly user-defined...	WITHOUT_CLASSIFICATION	0.998519737330585	WITHOUT_CLASSIFICATION	0.001480262669415061	DESIGN
// If the query is already compiled, skip the compilation.	WITHOUT_CLASSIFICATION	0.9999481202447158	WITHOUT_CLASSIFICATION	5.1879755284274063E-5	DESIGN
// Remember the parameters for the compilation.	WITHOUT_CLASSIFICATION	0.9996943052375699	WITHOUT_CLASSIFICATION	3.0569476243017956E-4	DESIGN
// PHASE 1 : Parse the HQL into an AST.	WITHOUT_CLASSIFICATION	0.9962108001765166	WITHOUT_CLASSIFICATION	0.003789199823483289	DESIGN
// PHASE 2 : Analyze the HQL AST, and produce an SQL AST.	WITHOUT_CLASSIFICATION	0.9997266903705894	WITHOUT_CLASSIFICATION	2.733096294106811E-4	DESIGN
// PHASE 3 : Generate the SQL.	WITHOUT_CLASSIFICATION	0.9999676547607766	WITHOUT_CLASSIFICATION	3.234523922339233E-5	DESIGN
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9732328377087468	WITHOUT_CLASSIFICATION	0.026767162291253203	DESIGN
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9732328377087468	WITHOUT_CLASSIFICATION	0.026767162291253203	DESIGN
//only needed during compilation phase...	WITHOUT_CLASSIFICATION	0.994113371346877	WITHOUT_CLASSIFICATION	0.0058866286531229295	DESIGN
// Transform the tree.	WITHOUT_CLASSIFICATION	0.9999933089308972	WITHOUT_CLASSIFICATION	6.691069102874027E-6	DESIGN
// Parse the query string into an HQL AST.	WITHOUT_CLASSIFICATION	0.9989000051699491	WITHOUT_CLASSIFICATION	0.00109999483005084	DESIGN
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9996018296063011	WITHOUT_CLASSIFICATION	3.981703936988931E-4	DESIGN
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9996018296063011	WITHOUT_CLASSIFICATION	3.981703936988931E-4	DESIGN
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9996018296063011	WITHOUT_CLASSIFICATION	3.981703936988931E-4	DESIGN
// NOTE : ( max - 1 ) because first is zero-based while max is not...	WITHOUT_CLASSIFICATION	0.985466989490158	WITHOUT_CLASSIFICATION	0.014533010509841997	DESIGN
// -- Package local methods for the QueryLoader delegate --	WITHOUT_CLASSIFICATION	0.989337153915543	WITHOUT_CLASSIFICATION	0.010662846084457082	DESIGN
// If there are no collection fetches, then no further checks are needed	WITHOUT_CLASSIFICATION	0.9998196466533402	WITHOUT_CLASSIFICATION	1.8035334665970763E-4	DESIGN
// A shallow query is ok (although technically there should be no fetching here...)	WITHOUT_CLASSIFICATION	0.9990396962890259	WITHOUT_CLASSIFICATION	9.603037109740366E-4	DESIGN
// should be the first, but just to be safe...	WITHOUT_CLASSIFICATION	0.9995135269635751	WITHOUT_CLASSIFICATION	4.864730364248956E-4	DESIGN
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999300946752182	WITHOUT_CLASSIFICATION	6.990532478181727E-5	DESIGN
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999300946752182	WITHOUT_CLASSIFICATION	6.990532478181727E-5	DESIGN
// Impl Note: allows multiple collection fetches as long as the // entire fecthed graph still "points back" to a single // root entity for return	WITHOUT_CLASSIFICATION	0.9661691792241729	WITHOUT_CLASSIFICATION	0.03383082077582704	DESIGN
// Otherwise, we have a non-scalar select with defined collection fetch(es). // Make sure that there is only a single root entity in the return (no tuples)	WITHOUT_CLASSIFICATION	0.9995155145992812	WITHOUT_CLASSIFICATION	4.844854007187488E-4	DESIGN
// This is not strictly true.  We actually just need to make sure that // it is ordered by root-entity PK and that that order-by comes before // any non-root-entity ordering...	WITHOUT_CLASSIFICATION	0.7700589211121583	DESIGN	0.22994107888784168	WITHOUT_CLASSIFICATION
//	WITHOUT_CLASSIFICATION	0.999758407950086	WITHOUT_CLASSIFICATION	2.4159204991409242E-4	DESIGN
// we are already processing a dot-structure	WITHOUT_CLASSIFICATION	0.9958779395737132	WITHOUT_CLASSIFICATION	0.004122060426286816	DESIGN
// igndore it...	WITHOUT_CLASSIFICATION	0.9997952314504504	WITHOUT_CLASSIFICATION	2.047685495496311E-4	DESIGN
// we are now at a new tree level	WITHOUT_CLASSIFICATION	0.9989560297486842	WITHOUT_CLASSIFICATION	0.0010439702513156501	DESIGN
// [jsd] The fix for HHH-558...	WITHOUT_CLASSIFICATION	0.9888301111919847	WITHOUT_CLASSIFICATION	0.011169888808015319	DESIGN
// If the token can tell us if it could be an identifier...	WITHOUT_CLASSIFICATION	0.9999581861554607	WITHOUT_CLASSIFICATION	4.1813844539201696E-5	DESIGN
// ... and the expected token type was an identifier, then:	WITHOUT_CLASSIFICATION	0.996615883847468	WITHOUT_CLASSIFICATION	0.0033841161525318903	DESIGN
// Use the token as an identifier.	WITHOUT_CLASSIFICATION	0.9998962645421153	WITHOUT_CLASSIFICATION	1.037354578845564E-4	DESIGN
// Add the token to the AST.	WITHOUT_CLASSIFICATION	0.9999946898076663	WITHOUT_CLASSIFICATION	5.310192333741979E-6	DESIGN
// (NOT (EQ a b) ) => (NE a b)	WITHOUT_CLASSIFICATION	0.9999637173762665	WITHOUT_CLASSIFICATION	3.628262373349378E-5	DESIGN
// (NOT (NE a b) ) => (EQ a b)	WITHOUT_CLASSIFICATION	0.9999637173762665	WITHOUT_CLASSIFICATION	3.628262373349378E-5	DESIGN
// (NOT (LT a b) ) => (GE a b)	WITHOUT_CLASSIFICATION	0.9999637173762665	WITHOUT_CLASSIFICATION	3.628262373349378E-5	DESIGN
// (NOT (GE a b) ) => (LT a b)	WITHOUT_CLASSIFICATION	0.9999637173762665	WITHOUT_CLASSIFICATION	3.628262373349378E-5	DESIGN
// (NOT (LE a b) ) => (GT a b)	WITHOUT_CLASSIFICATION	0.9999637173762665	WITHOUT_CLASSIFICATION	3.628262373349378E-5	DESIGN
// (NOT (LIKE a b) ) => (NOT_LIKE a b)	WITHOUT_CLASSIFICATION	0.9986957044933913	WITHOUT_CLASSIFICATION	0.001304295506608697	DESIGN
// (NOT (NOT_LIKE a b) ) => (LIKE a b)	WITHOUT_CLASSIFICATION	0.9986957044933913	WITHOUT_CLASSIFICATION	0.001304295506608697	DESIGN
// (NOT (IS_NOT_NULL a b) ) => (IS_NULL a b)	WITHOUT_CLASSIFICATION	0.9986957044933913	WITHOUT_CLASSIFICATION	0.001304295506608697	DESIGN
// (NOT (BETWEEN a b) ) => (NOT_BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9986957044933913	WITHOUT_CLASSIFICATION	0.001304295506608697	DESIGN
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.999027933877939	WITHOUT_CLASSIFICATION	9.720661220609058E-4	DESIGN
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9915490086586176	WITHOUT_CLASSIFICATION	0.008450991341382354	DESIGN
// if // if // Otherwise, handle the error normally.	WITHOUT_CLASSIFICATION	0.9994152164815203	WITHOUT_CLASSIFICATION	5.847835184795828E-4	DESIGN
// (NOT (NOT_BETWEEN a b) ) => (BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9986957044933913	WITHOUT_CLASSIFICATION	0.001304295506608697	DESIGN
/* This can never happen because this rule will always eliminate the child NOT.	WITHOUT_CLASSIFICATION	0.9965921600340726	WITHOUT_CLASSIFICATION	0.00340783996592751	DESIGN
// Just add a 'not' parent.	WITHOUT_CLASSIFICATION	0.9999895221737789	WITHOUT_CLASSIFICATION	1.0477826221183636E-5	DESIGN
// (EQ NULL b) => (IS_NULL b)	WITHOUT_CLASSIFICATION	0.9999852884534205	WITHOUT_CLASSIFICATION	1.4711546579567433E-5	DESIGN
// (EQ a NULL) => (IS_NULL a)	WITHOUT_CLASSIFICATION	0.9999731597829251	WITHOUT_CLASSIFICATION	2.6840217074899597E-5	DESIGN
// NOTE: Because we're using ASTUtil.createParent(), the tree must be created from the bottom up. // IS EMPTY x => (EXISTS (QUERY (SELECT_FROM (FROM x) ) ) )	WITHOUT_CLASSIFICATION	0.9998609125319933	WITHOUT_CLASSIFICATION	1.3908746800674746E-4	DESIGN
// Add NOT if it's negated.	WITHOUT_CLASSIFICATION	0.9999743017592854	WITHOUT_CLASSIFICATION	2.5698240714654793E-5	DESIGN
// Create nodes that track line and column number.	WITHOUT_CLASSIFICATION	0.9998838288996564	WITHOUT_CLASSIFICATION	1.1617110034354743E-4	DESIGN
// Case 1: Multi token keywords GROUP BY and ORDER BY // The next token ( LT(2) ) should be 'by'... otherwise, this is just an ident.	WITHOUT_CLASSIFICATION	0.9873913944503909	WITHOUT_CLASSIFICATION	0.012608605549609018	DESIGN
// Case 2: The current token is after FROM and before '.'.	WITHOUT_CLASSIFICATION	0.9993256123417616	WITHOUT_CLASSIFICATION	6.743876582383048E-4	DESIGN
// This handles HHH-354, where there is a strange property name in a where clause. // If the lookahead contains a DOT then something that isn't an IDENT...	WITHOUT_CLASSIFICATION	0.9986901596998993	WITHOUT_CLASSIFICATION	0.001309840300100697	DESIGN
// See if the second lookahed token can be an identifier.	WITHOUT_CLASSIFICATION	0.9998844868543384	WITHOUT_CLASSIFICATION	1.1551314566158086E-4	DESIGN
// Set it!	WITHOUT_CLASSIFICATION	0.9998195982727544	WITHOUT_CLASSIFICATION	1.8040172724562568E-4	DESIGN
// ignore	WITHOUT_CLASSIFICATION	0.9996214555833285	WITHOUT_CLASSIFICATION	3.7854441667148255E-4	DESIGN
// strip the " where "	WITHOUT_CLASSIFICATION	0.9999852767529926	WITHOUT_CLASSIFICATION	1.4723247007308217E-5	DESIGN
// Don't really know all the codes required to adequately decipher returned jdbc exceptions here. // simply allow the failure to be eaten and the subsequent insert-selects/deletes should fail	WITHOUT_CLASSIFICATION	0.9958146678359433	WITHOUT_CLASSIFICATION	0.004185332164056677	DESIGN
// at the very least cleanup the data :)	WITHOUT_CLASSIFICATION	0.9997377570724718	WITHOUT_CLASSIFICATION	2.6224292752821996E-4	DESIGN
// First, save off the pertinent ids, as the return value	WITHOUT_CLASSIFICATION	0.9999535289934078	WITHOUT_CLASSIFICATION	4.6471006592169996E-5	DESIGN
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.999979407037249	WITHOUT_CLASSIFICATION	2.059296275107541E-5	DESIGN
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.999979407037249	WITHOUT_CLASSIFICATION	2.059296275107541E-5	DESIGN
// Start performing the updates	WITHOUT_CLASSIFICATION	0.9997442420295842	WITHOUT_CLASSIFICATION	2.55757970415767E-4	DESIGN
// First, save off the pertinent ids, saving the number of pertinent ids for return	WITHOUT_CLASSIFICATION	0.9999421724739428	WITHOUT_CLASSIFICATION	5.78275260572637E-5	DESIGN
// Start performing the deletes	WITHOUT_CLASSIFICATION	0.9997583867332462	WITHOUT_CLASSIFICATION	2.416132667536831E-4	DESIGN
// otherwise, everything ok.	WITHOUT_CLASSIFICATION	0.9999737418049613	WITHOUT_CLASSIFICATION	2.625819503863041E-5	DESIGN
// visit width-first, then depth	WITHOUT_CLASSIFICATION	0.9993915304491184	WITHOUT_CLASSIFICATION	6.08469550881531E-4	DESIGN
// if the types report logical equivalence, return true...	WITHOUT_CLASSIFICATION	0.999734601179129	WITHOUT_CLASSIFICATION	2.653988208709883E-4	DESIGN
// otherwise, perform a "deep equivalence" check...	WITHOUT_CLASSIFICATION	0.9987663752289289	WITHOUT_CLASSIFICATION	0.0012336247710710718	DESIGN
// If there is no WHERE node, make one.	WITHOUT_CLASSIFICATION	0.9995042626967583	WITHOUT_CLASSIFICATION	4.957373032416435E-4	DESIGN
// inject the WHERE after the parent	WITHOUT_CLASSIFICATION	0.999735000950128	WITHOUT_CLASSIFICATION	2.649990498720622E-4	DESIGN
// Never include subclasses for implied from elements.	WITHOUT_CLASSIFICATION	0.998197498197388	WITHOUT_CLASSIFICATION	0.0018025018026119396	DESIGN
// Moved here from SelectClause [jsd]	WITHOUT_CLASSIFICATION	0.994601723277239	WITHOUT_CLASSIFICATION	0.00539827672276106	DESIGN
///////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9948267567545811	WITHOUT_CLASSIFICATION	0.005173243245418878	DESIGN
// Use the table fromElement and the property name to get the array of column names.	WITHOUT_CLASSIFICATION	0.9998774987104232	WITHOUT_CLASSIFICATION	1.2250128957689226E-4	DESIGN
// Set the attributes of the property reference expression.	WITHOUT_CLASSIFICATION	0.999942788073574	WITHOUT_CLASSIFICATION	5.7211926426053105E-5	DESIGN
// If the uresolved property path isn't set yet, just use the property name.	WITHOUT_CLASSIFICATION	0.9998931313896403	WITHOUT_CLASSIFICATION	1.0686861035970526E-4	DESIGN
// The 'from element' that the property is in.	WITHOUT_CLASSIFICATION	0.9998140726559103	WITHOUT_CLASSIFICATION	1.8592734408964893E-4	DESIGN
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999269631093948	WITHOUT_CLASSIFICATION	7.30368906052254E-5	DESIGN
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999269631093948	WITHOUT_CLASSIFICATION	7.30368906052254E-5	DESIGN
// If this dot has already been resolved, stop now.	WITHOUT_CLASSIFICATION	0.9984664802778475	WITHOUT_CLASSIFICATION	0.0015335197221525102	DESIGN
// If there is no data type for this node, and we're at the end of the path (top most dot node), then // this might be a Java constant.	WITHOUT_CLASSIFICATION	0.9994585377326559	WITHOUT_CLASSIFICATION	5.414622673440613E-4	DESIGN
// The property is a collection...	WITHOUT_CLASSIFICATION	0.9991567854606012	WITHOUT_CLASSIFICATION	8.432145393987857E-4	DESIGN
// The property is a component...	WITHOUT_CLASSIFICATION	0.9991567854606012	WITHOUT_CLASSIFICATION	8.432145393987857E-4	DESIGN
// The property is another class..	WITHOUT_CLASSIFICATION	0.9995766974958742	WITHOUT_CLASSIFICATION	4.233025041258249E-4	DESIGN
// Otherwise, this is a primitive type.	WITHOUT_CLASSIFICATION	0.9962825208109046	WITHOUT_CLASSIFICATION	0.003717479189095478	DESIGN
//foo.bars.size (also handles deprecated stuff like foo.bars.maxelement for backwardness)	WITHOUT_CLASSIFICATION	0.957292220335007	WITHOUT_CLASSIFICATION	0.042707779664992895	DESIGN
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9986018427136036	WITHOUT_CLASSIFICATION	0.0013981572863963297	DESIGN
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999052762073171	WITHOUT_CLASSIFICATION	9.472379268286841E-5	DESIGN
// in non-select queries, the only time we should need to join is if we are in a subquery from clause	WITHOUT_CLASSIFICATION	0.9551600446834769	WITHOUT_CLASSIFICATION	0.044839955316522975	DESIGN
// this is the regression style determination which matches the logic of the classic translator	WITHOUT_CLASSIFICATION	0.9993262261044392	WITHOUT_CLASSIFICATION	6.737738955607612E-4	DESIGN
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9986018427136036	WITHOUT_CLASSIFICATION	0.0013981572863963297	DESIGN
// even though we might find a pre-existing element by join path, we may not be able to reuse it...	WITHOUT_CLASSIFICATION	0.9958291322965391	WITHOUT_CLASSIFICATION	0.0041708677034607965	DESIGN
// NOTE : addDuplicateAlias() already performs nullness checks on the alias.	WITHOUT_CLASSIFICATION	0.9994998311822424	WITHOUT_CLASSIFICATION	5.001688177576347E-4	DESIGN
// if the from-clauses are the same, we can be a little more aggressive in terms of what we reuse	WITHOUT_CLASSIFICATION	0.9856188465596617	WITHOUT_CLASSIFICATION	0.014381153440338272	DESIGN
// again, null != null here	WITHOUT_CLASSIFICATION	0.9999369025589461	WITHOUT_CLASSIFICATION	6.309744105393957E-5	DESIGN
// If this is an implied join in a from element, then use the impled join type which is part of the // tree parser's state (set by the gramamar actions).	WITHOUT_CLASSIFICATION	0.9900647001198611	WITHOUT_CLASSIFICATION	0.009935299880138897	DESIGN
// otherwise (subquery case) dont reuse the fromElement if we are processing the from-clause of the subquery	WITHOUT_CLASSIFICATION	0.9987038342992095	WITHOUT_CLASSIFICATION	0.0012961657007905057	DESIGN
// we know only the lhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9998369597369517	WITHOUT_CLASSIFICATION	1.63040263048295E-4	DESIGN
// the referenced node text is the special 'id'	WITHOUT_CLASSIFICATION	0.9999206151419283	WITHOUT_CLASSIFICATION	7.938485807171236E-5	DESIGN
// only the identifier property field name can be a reference to the associated entity's PK...	WITHOUT_CLASSIFICATION	0.9998148895459826	WITHOUT_CLASSIFICATION	1.8511045401740721E-4	DESIGN
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.999731111235949	WITHOUT_CLASSIFICATION	2.688887640509238E-4	DESIGN
// Append the new property name onto the unresolved path.	WITHOUT_CLASSIFICATION	0.9997697421387308	WITHOUT_CLASSIFICATION	2.3025786126907354E-4	DESIGN
// If the lhs is a collection, use CollectionPropertyMapping	WITHOUT_CLASSIFICATION	0.9996590654646881	WITHOUT_CLASSIFICATION	3.409345353119031E-4	DESIGN
// Tell the destination fromElement to 'includeSubclasses'.	WITHOUT_CLASSIFICATION	0.9996052241928505	WITHOUT_CLASSIFICATION	3.947758071495337E-4	DESIGN
// Use theta style (for regression) // Move the node up, after the origin node.	WITHOUT_CLASSIFICATION	0.9976147026617331	WITHOUT_CLASSIFICATION	0.0023852973382668657	DESIGN
// Don't resolve the node again.	WITHOUT_CLASSIFICATION	0.9998286658257062	WITHOUT_CLASSIFICATION	1.7133417429390823E-4	DESIGN
// for expected parameter type injection, we expect that the lhs represents // some form of property ref and that the children of the in-list represent // one-or-more params.	WITHOUT_CLASSIFICATION	0.9846985904994104	WITHOUT_CLASSIFICATION	0.015301409500589658	DESIGN
// we need to strip off the embedded parens so that sql-gen does not double these up	WITHOUT_CLASSIFICATION	0.9995906876652241	WITHOUT_CLASSIFICATION	4.0931233477590215E-4	DESIGN
// we have something like : "? [op] rhs"	WITHOUT_CLASSIFICATION	0.9992443223956311	WITHOUT_CLASSIFICATION	7.55677604368945E-4	DESIGN
// we have something like : "lhs [op] ?"	WITHOUT_CLASSIFICATION	0.9992443223956311	WITHOUT_CLASSIFICATION	7.55677604368945E-4	DESIGN
// we know only the rhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9998369597369517	WITHOUT_CLASSIFICATION	1.63040263048295E-4	DESIGN
// handle the (assumed) valid cases: // #1 - the only valid datetime addition synatx is one or the other is a datetime (but not both)	WITHOUT_CLASSIFICATION	0.9988075600402122	WITHOUT_CLASSIFICATION	0.0011924399597878447	DESIGN
// one or the other needs to be a datetime for us to get into this method in the first place...	WITHOUT_CLASSIFICATION	0.6167169934285339	DESIGN	0.38328300657146613	WITHOUT_CLASSIFICATION
// #3 - note that this is also true of "datetime - :param"...	WITHOUT_CLASSIFICATION	0.9913966424095018	WITHOUT_CLASSIFICATION	0.008603357590498253	DESIGN
// #2	WITHOUT_CLASSIFICATION	0.9997722564629529	WITHOUT_CLASSIFICATION	2.2774353704706007E-4	DESIGN
// Generate the inner join -- The elements need to be joined to the collection they are in.	WITHOUT_CLASSIFICATION	0.9941072165328532	WITHOUT_CLASSIFICATION	0.005892783467146867	DESIGN
// nothing to do	WITHOUT_CLASSIFICATION	0.9999459480760299	WITHOUT_CLASSIFICATION	5.405192396998377E-5	DESIGN
// The 'from element' that represents the elements of the collection.	WITHOUT_CLASSIFICATION	0.9999660548378605	WITHOUT_CLASSIFICATION	3.394516213950755E-5	DESIGN
// Add the condition to the join sequence that qualifies the indexed element.	WITHOUT_CLASSIFICATION	0.9997289469050635	WITHOUT_CLASSIFICATION	2.7105309493652413E-4	DESIGN
// Sometimes use the element table alias, sometimes use the... umm... collection table alias (many to many)	WITHOUT_CLASSIFICATION	0.9976328370042211	WITHOUT_CLASSIFICATION	0.002367162995778938	DESIGN
// Now, set the text for this node.  It should be the element columns.	WITHOUT_CLASSIFICATION	0.9920432228533572	WITHOUT_CLASSIFICATION	0.007956777146642722	DESIGN
// Get the function return value type, based on the type of the first argument.	WITHOUT_CLASSIFICATION	0.9995821941753665	WITHOUT_CLASSIFICATION	4.1780582463344615E-4	DESIGN
// This will call initialize(tok)!	WITHOUT_CLASSIFICATION	0.9961162378409314	WITHOUT_CLASSIFICATION	0.0038837621590685654	DESIGN
// mutation depends on the types of nodes invloved...	WITHOUT_CLASSIFICATION	0.9997413902311897	WITHOUT_CLASSIFICATION	2.586097688102543E-4	DESIGN
// "pass along" our initial embedded parameter node(s) to the first generated // sql fragment so that it can be handled later for parameter binding...	WITHOUT_CLASSIFICATION	0.9945437487642863	WITHOUT_CLASSIFICATION	0.00545625123571371	DESIGN
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9991430210765246	WITHOUT_CLASSIFICATION	8.56978923475465E-4	DESIGN
// Generated select expressions are already resolved, nothing to do.	WITHOUT_CLASSIFICATION	0.9998355590001141	WITHOUT_CLASSIFICATION	1.644409998858823E-4	DESIGN
// The path may be a reference to an alias defined in the parent query.	WITHOUT_CLASSIFICATION	0.9999619715222586	WITHOUT_CLASSIFICATION	3.802847774130231E-5	DESIGN
// The HQL class alias refers to the class name.	WITHOUT_CLASSIFICATION	0.9998170150992884	WITHOUT_CLASSIFICATION	1.8298490071161632E-4	DESIGN
// Associate the table alias with the element.	WITHOUT_CLASSIFICATION	0.9998309287207796	WITHOUT_CLASSIFICATION	1.690712792204992E-4	DESIGN
// try the parent FromClause...	WITHOUT_CLASSIFICATION	0.9997888362800469	WITHOUT_CLASSIFICATION	2.1116371995314698E-4	DESIGN
// Add the new node to the map so that we don't create it twice.	WITHOUT_CLASSIFICATION	0.9997253005986774	WITHOUT_CLASSIFICATION	2.746994013225822E-4	DESIGN
// Make sure that all from elements registered with this FROM clause are actually in the AST.	WITHOUT_CLASSIFICATION	0.9990476280335262	WITHOUT_CLASSIFICATION	9.523719664738867E-4	DESIGN
// Invoke setScalarColumnText on each constructor argument.	WITHOUT_CLASSIFICATION	0.9998958374976891	WITHOUT_CLASSIFICATION	1.0416250231095386E-4	DESIGN
// Collect the select expressions, skip the first child because it is the class name.	WITHOUT_CLASSIFICATION	0.9999840920249161	WITHOUT_CLASSIFICATION	1.5907975083882746E-5	DESIGN
// return an empty Type array	WITHOUT_CLASSIFICATION	0.9999883113627513	WITHOUT_CLASSIFICATION	1.1688637248764378E-5	DESIGN
// Constructors are always considered scalar results.	WITHOUT_CLASSIFICATION	0.9989874741212376	WITHOUT_CLASSIFICATION	0.0010125258787624487	DESIGN
// this is the exception returned by ReflectHelper.getConstructor() if it cannot // locate an appropriate constructor	WITHOUT_CLASSIFICATION	0.9996758327574917	WITHOUT_CLASSIFICATION	3.241672425082563E-4	DESIGN
// if there is no order by, make one	WITHOUT_CLASSIFICATION	0.9954937559083473	WITHOUT_CLASSIFICATION	0.004506244091652662	DESIGN
// Find the WHERE; if there is no WHERE, find the FROM...	WITHOUT_CLASSIFICATION	0.9999215609217961	WITHOUT_CLASSIFICATION	7.84390782039431E-5	DESIGN
// Now, inject the newly built ORDER BY into the tree	WITHOUT_CLASSIFICATION	0.9978581344337555	WITHOUT_CLASSIFICATION	0.0021418655662444807	DESIGN
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993232207011862	WITHOUT_CLASSIFICATION	6.767792988138589E-4	DESIGN
// logic operators by definition resolve to boolean.	WITHOUT_CLASSIFICATION	0.9991430210765246	WITHOUT_CLASSIFICATION	8.56978923475465E-4	DESIGN
// Render the identifier select fragment using the table alias.	WITHOUT_CLASSIFICATION	0.9999614776915744	WITHOUT_CLASSIFICATION	3.852230842564278E-5	DESIGN
// Class names in the FROM clause result in a JoinSequence (the old FromParser does this).	WITHOUT_CLASSIFICATION	0.9992000702713529	WITHOUT_CLASSIFICATION	7.99929728647117E-4	DESIGN
// For many-to-many joins, use the tablename from the queryable collection for the default text.	WITHOUT_CLASSIFICATION	0.9978900970667672	WITHOUT_CLASSIFICATION	0.002109902933232702	DESIGN
// Otherwise, use the property mapping.	WITHOUT_CLASSIFICATION	0.9997608263039579	WITHOUT_CLASSIFICATION	2.3917369604215436E-4	DESIGN
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9800893412636299	WITHOUT_CLASSIFICATION	0.01991065873637011	DESIGN
// If the property is a special collection property name, return a CollectionPropertyMapping.	WITHOUT_CLASSIFICATION	0.999558355798282	WITHOUT_CLASSIFICATION	4.416442017179046E-4	DESIGN
// Collection of components.	WITHOUT_CLASSIFICATION	0.9999820232937335	WITHOUT_CLASSIFICATION	1.797670626652965E-5	DESIGN
// make sure the lhs is "assignable"...	WITHOUT_CLASSIFICATION	0.9966864614102637	WITHOUT_CLASSIFICATION	0.003313538589736296	DESIGN
// false indicates to not generate parens around the assignment	WITHOUT_CLASSIFICATION	0.9998415144435412	WITHOUT_CLASSIFICATION	1.584855564588055E-4	DESIGN
// Register the FromElement with the FROM clause, now that we have the names and aliases.	WITHOUT_CLASSIFICATION	0.999858793834463	WITHOUT_CLASSIFICATION	1.4120616553707765E-4	DESIGN
// currently allowed...	WITHOUT_CLASSIFICATION	0.9999650540946904	WITHOUT_CLASSIFICATION	3.4945905309648094E-5	DESIGN
// HHH-276 : implied joins in a subselect where clause - The destination needs to be added // to the destination's from clause. // Not sure if this is will fix everything, but it works.	WITHOUT_CLASSIFICATION	0.7459275656935078	WITHOUT_CLASSIFICATION	0.2540724343064923	DESIGN
//return classAlias == null ? className : classAlias;	WITHOUT_CLASSIFICATION	0.9615101286598583	WITHOUT_CLASSIFICATION	0.03848987134014171	DESIGN
// This is an explicit FROM element.	WITHOUT_CLASSIFICATION	0.9910891114321283	WITHOUT_CLASSIFICATION	0.008910888567871757	DESIGN
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993232207011862	WITHOUT_CLASSIFICATION	6.767792988138589E-4	DESIGN
// Fetch can't be used with scroll() or iterate().	WITHOUT_CLASSIFICATION	0.997844161590622	WITHOUT_CLASSIFICATION	0.0021558384093780902	DESIGN
// If it's not implied or it is implied and it's a many to many join where the target wasn't found.	WITHOUT_CLASSIFICATION	0.9998919231350268	WITHOUT_CLASSIFICATION	1.0807686497315824E-4	DESIGN
// Since this is an explicit FROM element, it can't be implied in the FROM clause.	WITHOUT_CLASSIFICATION	0.9982237271353739	WITHOUT_CLASSIFICATION	0.001776272864626103	DESIGN
// Do nothing, eplicit from elements are *always* in the projection list.	WITHOUT_CLASSIFICATION	0.9997875566513126	WITHOUT_CLASSIFICATION	2.1244334868737128E-4	DESIGN
// propertyName refers to something like collection.size...	WITHOUT_CLASSIFICATION	0.999482127248612	WITHOUT_CLASSIFICATION	5.178727513881178E-4	DESIGN
// property name is a sub-path of a component...	WITHOUT_CLASSIFICATION	0.9975506959415547	WITHOUT_CLASSIFICATION	0.0024493040584453543	DESIGN
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999052762073171	WITHOUT_CLASSIFICATION	9.472379268286841E-5	DESIGN
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9990288743327916	WITHOUT_CLASSIFICATION	9.711256672083848E-4	DESIGN
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9991430210765246	WITHOUT_CLASSIFICATION	8.56978923475465E-4	DESIGN
// DotNode uses null here...	WITHOUT_CLASSIFICATION	0.9997727510510518	WITHOUT_CLASSIFICATION	2.2724894894819364E-4	DESIGN
// We represent a from-clause alias	WITHOUT_CLASSIFICATION	0.997844783739268	WITHOUT_CLASSIFICATION	0.002155216260731999	DESIGN
// we are the LHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9987893023665048	WITHOUT_CLASSIFICATION	0.0012106976334952803	DESIGN
// we are the RHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9987893023665048	WITHOUT_CLASSIFICATION	0.0012106976334952803	DESIGN
// we represent a naked (simple) prop-ref	WITHOUT_CLASSIFICATION	0.9963997097773084	WITHOUT_CLASSIFICATION	0.003600290222691656	DESIGN
// EARLY EXIT!!!  return so the resolve call explicitly coming from DotNode can // resolve this...	WITHOUT_CLASSIFICATION	0.9998187706857993	WITHOUT_CLASSIFICATION	1.8122931420065015E-4	DESIGN
// assume this ident's text does *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9994581221252876	WITHOUT_CLASSIFICATION	5.418778747123799E-4	DESIGN
// just ignore it for now, it'll get resolved later...	WITHOUT_CLASSIFICATION	0.9991721351869884	WITHOUT_CLASSIFICATION	8.27864813011589E-4	DESIGN
// This is not actually a constant, but a reference to FROM element.	WITHOUT_CLASSIFICATION	0.9814398180474437	WITHOUT_CLASSIFICATION	0.018560181952556182	DESIGN
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9990392993328076	WITHOUT_CLASSIFICATION	9.607006671923005E-4	DESIGN
// these pieces are needed for usage in select clause	WITHOUT_CLASSIFICATION	0.998357812017673	WITHOUT_CLASSIFICATION	0.0016421879823269446	DESIGN
// used to set the type of the parent dot node	WITHOUT_CLASSIFICATION	0.9969099725023433	WITHOUT_CLASSIFICATION	0.003090027497656795	DESIGN
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9981960741794907	WITHOUT_CLASSIFICATION	0.001803925820509272	DESIGN
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9981960741794907	WITHOUT_CLASSIFICATION	0.001803925820509272	DESIGN
// naked property-refs cannot be used with an aliased from element	WITHOUT_CLASSIFICATION	0.9985797112154291	WITHOUT_CLASSIFICATION	0.0014202887845708766	DESIGN
// this piece is needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9737375322633037	WITHOUT_CLASSIFICATION	0.026262467736696358	DESIGN
// do *not* over-write the column text, as that has already been // "rendered" during resolve	WITHOUT_CLASSIFICATION	0.9998061668107548	WITHOUT_CLASSIFICATION	1.938331892450843E-4	DESIGN
// for some reason the antlr.CommonAST initialization routines force // this method to get called twice.  The first time with an empty string	WITHOUT_CLASSIFICATION	0.9997116508943134	WITHOUT_CLASSIFICATION	2.883491056866619E-4	DESIGN
// Look up class name using the first identifier in the path.	WITHOUT_CLASSIFICATION	0.9999553030296626	WITHOUT_CLASSIFICATION	4.469697033737156E-5	DESIGN
// Add to the query spaces.	WITHOUT_CLASSIFICATION	0.9999947457781514	WITHOUT_CLASSIFICATION	5.254221848583125E-6	DESIGN
// If the from element isn't in the same clause, create a new from element.	WITHOUT_CLASSIFICATION	0.9952779312391884	WITHOUT_CLASSIFICATION	0.004722068760811645	DESIGN
// This is the root level node. // Generate an explicit from clause at the root.	WITHOUT_CLASSIFICATION	0.9923700462750933	WITHOUT_CLASSIFICATION	0.007629953724906628	DESIGN
// Correlated subqueries create 'special' implied from nodes // because correlated subselects can't use an ANSI-style join	WITHOUT_CLASSIFICATION	0.9995010748799135	WITHOUT_CLASSIFICATION	4.98925120086553E-4	DESIGN
// super-duper-classic-parser-regression-testing-mojo-magic...	WITHOUT_CLASSIFICATION	0.9993232207011862	WITHOUT_CLASSIFICATION	6.767792988138589E-4	DESIGN
// A collection of entities...	WITHOUT_CLASSIFICATION	0.9998294126788491	WITHOUT_CLASSIFICATION	1.7058732115101435E-4	DESIGN
// A collection of components...	WITHOUT_CLASSIFICATION	0.993896340391115	WITHOUT_CLASSIFICATION	0.006103659608885121	DESIGN
// A collection of scalar elements...	WITHOUT_CLASSIFICATION	0.993896340391115	WITHOUT_CLASSIFICATION	0.006103659608885121	DESIGN
// according to both the ANSI-SQL and EJB3 specs, trim can either take // exactly one parameter or a variable number of parameters between 1 and 4. // from the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If only <trim specification> is omitted, BOTH is assumed; // if <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9945962887595505	WITHOUT_CLASSIFICATION	0.005403711240449535	DESIGN
// Don't include sub-classes for implied collection joins or subquery joins.	WITHOUT_CLASSIFICATION	0.9860886458193865	WITHOUT_CLASSIFICATION	0.013911354180613457	DESIGN
// Treat explict from elements in sub-queries properly.	WITHOUT_CLASSIFICATION	0.9995473417684229	WITHOUT_CLASSIFICATION	4.526582315771271E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.999758407950086	WITHOUT_CLASSIFICATION	2.4159204991409242E-4	DESIGN
// the "root from-element" in correlated subqueries do need this piece	WITHOUT_CLASSIFICATION	0.9642198005164093	WITHOUT_CLASSIFICATION	0.03578019948359067	DESIGN
// Create the FROM element for the target (the elements of the collection).	WITHOUT_CLASSIFICATION	0.9999838772947388	WITHOUT_CLASSIFICATION	1.6122705261284173E-5	DESIGN
// If the join is implied, then don't include sub-classes on the element.	WITHOUT_CLASSIFICATION	0.9996182238407604	WITHOUT_CLASSIFICATION	3.817761592396152E-4	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993822791780347	WITHOUT_CLASSIFICATION	6.177208219653838E-4	DESIGN
// The associated entity is implied, but it must be included in the FROM. // The collection alias is the role.	WITHOUT_CLASSIFICATION	0.9978650041819631	WITHOUT_CLASSIFICATION	0.0021349958180368845	DESIGN
// Tag this node as a JOIN. // Don't include subclasses in the join. // This is a clollection join.	WITHOUT_CLASSIFICATION	0.9657907499758611	WITHOUT_CLASSIFICATION	0.03420925002413889	DESIGN
// Get the class name of the associated entity.	WITHOUT_CLASSIFICATION	0.9998888654230573	WITHOUT_CLASSIFICATION	1.111345769426756E-4	DESIGN
//  origin, path, implied, columns, classAlias,	WITHOUT_CLASSIFICATION	0.9990133254559206	WITHOUT_CLASSIFICATION	9.866745440794127E-4	DESIGN
/*implied*/	WITHOUT_CLASSIFICATION	0.9982660483085283	WITHOUT_CLASSIFICATION	0.0017339516914716315	DESIGN
// For implied many-to-many, just add the end join.	WITHOUT_CLASSIFICATION	0.9999852513167133	WITHOUT_CLASSIFICATION	1.4748683286683622E-5	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993822791780347	WITHOUT_CLASSIFICATION	6.177208219653838E-4	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993822791780347	WITHOUT_CLASSIFICATION	6.177208219653838E-4	DESIGN
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9992153886883256	WITHOUT_CLASSIFICATION	7.846113116744889E-4	DESIGN
// This causes the factory to instantiate the desired class.	WITHOUT_CLASSIFICATION	0.9791265472720247	WITHOUT_CLASSIFICATION	0.020873452727975205	DESIGN
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9943483618309333	WITHOUT_CLASSIFICATION	0.005651638169066694	DESIGN
// Frontbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9979245299625767	WITHOUT_CLASSIFICATION	0.0020754700374232314	DESIGN
/*	WITHOUT_CLASSIFICATION	0.9966403525745083	WITHOUT_CLASSIFICATION	0.003359647425491574	DESIGN
/*public Type[] getSqlResultTypes() {	WITHOUT_CLASSIFICATION	0.9943668199691185	WITHOUT_CLASSIFICATION	0.00563318003088149	DESIGN
// First, collect all of the select expressions. // NOTE: This must be done *before* invoking setScalarColumnText() because setScalarColumnText() // changes the AST!!!	WITHOUT_CLASSIFICATION	0.9969953258326173	WITHOUT_CLASSIFICATION	0.003004674167382716	DESIGN
// First allow the actual type to control the return value. (the actual underlying sqltype could actually be different)	WITHOUT_CLASSIFICATION	0.9903664365643337	WITHOUT_CLASSIFICATION	0.009633563435666305	DESIGN
//sqlResultTypeList.addAll( constructorArgumentTypeList );	WITHOUT_CLASSIFICATION	0.9942892606861524	WITHOUT_CLASSIFICATION	0.005710739313847541	DESIGN
// If the data type is not an association type, it could not have been in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999260570867212	WITHOUT_CLASSIFICATION	7.394291327881995E-5	DESIGN
//sqlResultTypeList.add( type );	WITHOUT_CLASSIFICATION	0.9815104038803131	WITHOUT_CLASSIFICATION	0.01848959611968683	DESIGN
// Always add the type to the return type list.	WITHOUT_CLASSIFICATION	0.9996582682151166	WITHOUT_CLASSIFICATION	3.41731784883424E-4	DESIGN
// add the fetched entities	WITHOUT_CLASSIFICATION	0.9999971009184945	WITHOUT_CLASSIFICATION	2.89908150545811E-6	DESIGN
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9994353418842545	WITHOUT_CLASSIFICATION	5.646581157455145E-4	DESIGN
// function support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9981537774458523	WITHOUT_CLASSIFICATION	0.0018462225541477004	DESIGN
// If there are any scalars (non-entities) selected, render the select column aliases.	WITHOUT_CLASSIFICATION	0.9999721464494541	WITHOUT_CLASSIFICATION	2.7853550545857776E-5	DESIGN
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9998404554700752	WITHOUT_CLASSIFICATION	1.595445299249041E-4	DESIGN
/*ArrayList sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9942892606861524	WITHOUT_CLASSIFICATION	0.005710739313847541	DESIGN
//sqlResultTypes = ( Type[] ) sqlResultTypeList.toArray( new Type[sqlResultTypeList.size()] );	WITHOUT_CLASSIFICATION	0.9990120425589251	WITHOUT_CLASSIFICATION	9.879574410749385E-4	DESIGN
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9941809836611897	WITHOUT_CLASSIFICATION	0.005819016338810293	DESIGN
//TODO:	WITHOUT_CLASSIFICATION	0.9827816292911246	WITHOUT_CLASSIFICATION	0.017218370708875465	DESIGN
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9997481188807651	WITHOUT_CLASSIFICATION	2.518811192348253E-4	DESIGN
// Generate an 2d array of column names, the first dimension is parallel with the // return types array.  The second dimension is the list of column names for each // type.	WITHOUT_CLASSIFICATION	0.9999801023444573	WITHOUT_CLASSIFICATION	1.989765554255931E-5	DESIGN
// Generate the select expression.	WITHOUT_CLASSIFICATION	0.9997540473307022	WITHOUT_CLASSIFICATION	2.4595266929779494E-4	DESIGN
// union subclass support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9966467443467557	WITHOUT_CLASSIFICATION	0.003353255653244345	DESIGN
// Skip 'DISTINCT' and 'ALL', so we return the first expression node.	WITHOUT_CLASSIFICATION	0.9997952281904403	WITHOUT_CLASSIFICATION	2.047718095598043E-4	DESIGN
// Create SQL_TOKEN nodes for the columns.	WITHOUT_CLASSIFICATION	0.9998358992632376	WITHOUT_CLASSIFICATION	1.641007367624038E-4	DESIGN
// Generate the property select tokens.	WITHOUT_CLASSIFICATION	0.9998340472019547	WITHOUT_CLASSIFICATION	1.659527980453028E-4	DESIGN
// Get the function name node.	WITHOUT_CLASSIFICATION	0.9999970805271704	WITHOUT_CLASSIFICATION	2.919472829612856E-6	DESIGN
// Method expressions in a SELECT should always be considered scalar.	WITHOUT_CLASSIFICATION	0.9741854921396904	WITHOUT_CLASSIFICATION	0.025814507860309616	DESIGN
// If this is 'elements' then create a new FROM element.	WITHOUT_CLASSIFICATION	0.9985718067306767	WITHOUT_CLASSIFICATION	0.0014281932693233027	DESIGN
// Not elements(x)	WITHOUT_CLASSIFICATION	0.9997967867301556	WITHOUT_CLASSIFICATION	2.0321326984440718E-4	DESIGN
// Dialect function	WITHOUT_CLASSIFICATION	0.9998981351292877	WITHOUT_CLASSIFICATION	1.0186487071223927E-4	DESIGN
// Collection 'property function'	WITHOUT_CLASSIFICATION	0.9992711595476107	WITHOUT_CLASSIFICATION	7.288404523892458E-4	DESIGN
// If the constant is an IDENT, figure out what it means...	WITHOUT_CLASSIFICATION	0.999983416508418	WITHOUT_CLASSIFICATION	1.6583491581983033E-5	DESIGN
// IDENT is a class alias in the FROM.	WITHOUT_CLASSIFICATION	0.9991160122010985	WITHOUT_CLASSIFICATION	8.839877989015635E-4	DESIGN
// Resolve to an identity column.	WITHOUT_CLASSIFICATION	0.9993672083055015	WITHOUT_CLASSIFICATION	6.327916944983541E-4	DESIGN
// Otherwise, it's a literal.	WITHOUT_CLASSIFICATION	0.9999470885440068	WITHOUT_CLASSIFICATION	5.291145599321776E-5	DESIGN
// the name of an entity class	WITHOUT_CLASSIFICATION	0.999993862796886	WITHOUT_CLASSIFICATION	6.137203113980328E-6	DESIGN
//the class discriminator value	WITHOUT_CLASSIFICATION	0.9948437341489873	WITHOUT_CLASSIFICATION	0.005156265851012731	DESIGN
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9998915393611281	WITHOUT_CLASSIFICATION	1.0846063887196683E-4	DESIGN
// Add a space before the display text.	WITHOUT_CLASSIFICATION	0.9999668426814866	WITHOUT_CLASSIFICATION	3.31573185134315E-5	DESIGN
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9997335619568036	WITHOUT_CLASSIFICATION	2.664380431964023E-4	DESIGN
// child == parent.getFirstChild()	WITHOUT_CLASSIFICATION	0.999942222911503	WITHOUT_CLASSIFICATION	5.777708849703721E-5	DESIGN
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9997335619568036	WITHOUT_CLASSIFICATION	2.664380431964023E-4	DESIGN
// Filter conditions need to be inserted before the HQL where condition and the // theta join node.  This is because org.hibernate.loader.Loader binds the filter parameters first, // then it binds all the HQL query parameters, see org.hibernate.loader.Loader.processFilterParameters().	WITHOUT_CLASSIFICATION	0.914058748882366	WITHOUT_CLASSIFICATION	0.08594125111763397	DESIGN
// Put the FILTERS node before the HQL condition and theta joins	WITHOUT_CLASSIFICATION	0.9997576347862611	WITHOUT_CLASSIFICATION	2.4236521373887927E-4	DESIGN
// add the current fragment to the FILTERS node	WITHOUT_CLASSIFICATION	0.9998564931082013	WITHOUT_CLASSIFICATION	1.4350689179870314E-4	DESIGN
// Create a new THETA_JOINS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9996263950812927	WITHOUT_CLASSIFICATION	3.7360491870729935E-4	DESIGN
// Put the THETA_JOINS node before the HQL condition, after the filters.	WITHOUT_CLASSIFICATION	0.999815638215687	WITHOUT_CLASSIFICATION	1.84361784312895E-4	DESIGN
// add the current fragment to the THETA_JOINS node	WITHOUT_CLASSIFICATION	0.9998564931082013	WITHOUT_CLASSIFICATION	1.4350689179870314E-4	DESIGN
// First, try to get the persister using the given name directly.	WITHOUT_CLASSIFICATION	0.9999285640522437	WITHOUT_CLASSIFICATION	7.143594775622037E-5	DESIGN
// unable to locate it using this name	WITHOUT_CLASSIFICATION	0.9986274131140388	WITHOUT_CLASSIFICATION	0.001372586885961165	DESIGN
// If that didn't work, try using the 'import' name.	WITHOUT_CLASSIFICATION	0.9999619614738693	WITHOUT_CLASSIFICATION	3.803852613073992E-5	DESIGN
// Implicit joins use theta style (WHERE pk = fk), explicit joins use JOIN (after from)	WITHOUT_CLASSIFICATION	0.9999059812791999	WITHOUT_CLASSIFICATION	9.401872080014561E-5	DESIGN
// locate the registered function by the given name	WITHOUT_CLASSIFICATION	0.999863938069067	WITHOUT_CLASSIFICATION	1.360619309330002E-4	DESIGN
// determine the type of the first argument...	WITHOUT_CLASSIFICATION	0.9991015320740061	WITHOUT_CLASSIFICATION	8.984679259937788E-4	DESIGN
// Use the DOT node to emit the first column name. // Create the column names, folled by the column aliases.	WITHOUT_CLASSIFICATION	0.9997973116308855	WITHOUT_CLASSIFICATION	2.0268836911442893E-4	DESIGN
// Note: this simply constructs a "raw" SQL_TOKEN representing the // where fragment and injects this into the tree.  This "works"; // however it is probably not the best long-term solution. // // At some point we probably want to apply an additional grammar to // properly tokenize this where fragment into constituent parts // focused on the operators embedded within the fragment.	WITHOUT_CLASSIFICATION	0.9804656235111533	DESIGN	0.019534376488846657	WITHOUT_CLASSIFICATION
// Append the text of the current node.	WITHOUT_CLASSIFICATION	0.9999117151351006	WITHOUT_CLASSIFICATION	8.828486489945511E-5	DESIGN
// If the node has a first child, recurse into the first child.	WITHOUT_CLASSIFICATION	0.9989476057060035	WITHOUT_CLASSIFICATION	0.0010523942939965466	DESIGN
// If there is a second child (RHS), recurse into that child.	WITHOUT_CLASSIFICATION	0.9995870423157738	WITHOUT_CLASSIFICATION	4.129576842261426E-4	DESIGN
// Iterate through the alias,JoinSequence pairs and generate SQL token nodes.	WITHOUT_CLASSIFICATION	0.99975022304085	WITHOUT_CLASSIFICATION	2.497769591499747E-4	DESIGN
// If the from element represents a JOIN_FRAGMENT and it is // a theta-style join, convert its type from JOIN_FRAGMENT // to FROM_FRAGMENT	WITHOUT_CLASSIFICATION	0.9990411725827467	WITHOUT_CLASSIFICATION	9.588274172533407E-4	DESIGN
// this is used during SqlGenerator processing	WITHOUT_CLASSIFICATION	0.9870562488587661	WITHOUT_CLASSIFICATION	0.012943751141233847	DESIGN
// If there is a FROM fragment and the FROM element is an explicit, then add the from part.	WITHOUT_CLASSIFICATION	0.9999462069745666	WITHOUT_CLASSIFICATION	5.3793025433514844E-5	DESIGN
/*&& StringHelper.isNotEmpty( frag )*/	WITHOUT_CLASSIFICATION	0.9947451246857346	WITHOUT_CLASSIFICATION	0.005254875314265346	DESIGN
// The FROM fragment will probably begin with ', '.  Remove this if it is present.	WITHOUT_CLASSIFICATION	0.9905604722675254	WITHOUT_CLASSIFICATION	0.009439527732474652	DESIGN
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9707659583522416	WITHOUT_CLASSIFICATION	0.02923404164775844	DESIGN
// SELECT p FROM p IN CLASS eg.Person ORDER BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9993382820232044	WITHOUT_CLASSIFICATION	6.617179767956479E-4	DESIGN
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.9991041800945197	WITHOUT_CLASSIFICATION	8.958199054802074E-4	DESIGN
//named query parameter	WITHOUT_CLASSIFICATION	0.9994819041952923	WITHOUT_CLASSIFICATION	5.180958047077899E-4	DESIGN
//default mode	WITHOUT_CLASSIFICATION	0.9979941463542041	WITHOUT_CLASSIFICATION	0.0020058536457958098	DESIGN
//QueryJoinFragment join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9993152066625991	WITHOUT_CLASSIFICATION	6.847933374010019E-4	DESIGN
//reset the dotcount (but not the path) //after reset!	WITHOUT_CLASSIFICATION	0.9986540864696108	WITHOUT_CLASSIFICATION	0.0013459135303891142	DESIGN
//after reset!	WITHOUT_CLASSIFICATION	0.9982660483085283	WITHOUT_CLASSIFICATION	0.0017339516914716315	DESIGN
// we don't need to worry about any condition in the ON clause // here (toFromFragmentString), since anything in the ON condition // is already applied to the whole query	WITHOUT_CLASSIFICATION	0.9824669026733747	WITHOUT_CLASSIFICATION	0.017533097326625335	DESIGN
// bit_length feels a bit broken to me. We have to cast to char in order to // pass when a numeric value is supplied. But of course the answers given will // be wildly different for these two datatypes. 1234.5678 will be 9 bytes as // a char string but will be 8 or 16 bytes as a true numeric. // Jay Nance 2006-09-22	WITHOUT_CLASSIFICATION	0.9994546402161836	WITHOUT_CLASSIFICATION	5.453597838164447E-4	DESIGN
// dotcount>=2	WITHOUT_CLASSIFICATION	0.9997952314504504	WITHOUT_CLASSIFICATION	2.047685495496311E-4	DESIGN
// Do the corresponding RHS	WITHOUT_CLASSIFICATION	0.9999920414572284	WITHOUT_CLASSIFICATION	7.958542771532001E-6	DESIGN
//if its "id"	WITHOUT_CLASSIFICATION	0.9987626368382977	WITHOUT_CLASSIFICATION	0.001237363161702309	DESIGN
//or its the id property name	WITHOUT_CLASSIFICATION	0.99994165969222	WITHOUT_CLASSIFICATION	5.834030777990824E-5	DESIGN
//join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9993152066625991	WITHOUT_CLASSIFICATION	6.847933374010019E-4	DESIGN
//important!!	WITHOUT_CLASSIFICATION	0.9982660483085283	WITHOUT_CLASSIFICATION	0.0017339516914716315	DESIGN
//String[] keyCols = collPersister.getKeyColumnNames();	WITHOUT_CLASSIFICATION	0.9993152066625991	WITHOUT_CLASSIFICATION	6.847933374010019E-4	DESIGN
// an association	WITHOUT_CLASSIFICATION	0.9998795877201341	WITHOUT_CLASSIFICATION	1.2041227986590379E-4	DESIGN
//allow index() function:	WITHOUT_CLASSIFICATION	0.9998404554700752	WITHOUT_CLASSIFICATION	1.595445299249041E-4	DESIGN
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9988066633827085	WITHOUT_CLASSIFICATION	0.0011933366172915568	DESIGN
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.9991041800945197	WITHOUT_CLASSIFICATION	8.958199054802074E-4	DESIGN
//many-to-many	WITHOUT_CLASSIFICATION	0.9982660483085283	WITHOUT_CLASSIFICATION	0.0017339516914716315	DESIGN
// collections of values	WITHOUT_CLASSIFICATION	0.9999975917213542	WITHOUT_CLASSIFICATION	2.4082786459168473E-6	DESIGN
//opening paren in new Foo ( ... )	WITHOUT_CLASSIFICATION	0.9419422756628406	WITHOUT_CLASSIFICATION	0.05805772433715939	DESIGN
//if we are inside a new Result(), but not inside a nested function	WITHOUT_CLASSIFICATION	0.9817327941700725	WITHOUT_CLASSIFICATION	0.018267205829927375	DESIGN
//special case	WITHOUT_CLASSIFICATION	0.999362258223127	WITHOUT_CLASSIFICATION	6.377417768730301E-4	DESIGN
// the name of an SQL function	WITHOUT_CLASSIFICATION	0.999995068132672	WITHOUT_CLASSIFICATION	4.9318673279821516E-6	DESIGN
//null child could occur for no from clause in a filter	WITHOUT_CLASSIFICATION	0.9969898059446146	WITHOUT_CLASSIFICATION	0.0030101940553854947	DESIGN
//this is basically a copy/paste of OrderByParser ... might be worth refactoring	WITHOUT_CLASSIFICATION	0.7551564642571383	WITHOUT_CLASSIFICATION	0.24484353574286163	DESIGN
// SELECT p FROM p IN CLASS eg.Person GROUP BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9993358667282451	WITHOUT_CLASSIFICATION	6.641332717547758E-4	DESIGN
// return aliases not supported in classic translator!	WITHOUT_CLASSIFICATION	0.9997857057066064	WITHOUT_CLASSIFICATION	2.1429429339369426E-4	DESIGN
//register collection role	WITHOUT_CLASSIFICATION	0.9991146283545638	WITHOUT_CLASSIFICATION	8.853716454363018E-4	DESIGN
// The keyword used to specify an identity column, if identity column key generation is supported.	WITHOUT_CLASSIFICATION	0.9942755061728428	WITHOUT_CLASSIFICATION	0.005724493827157315	DESIGN
//.getElementPropertyMapping();	WITHOUT_CLASSIFICATION	0.9942892606861524	WITHOUT_CLASSIFICATION	0.005710739313847541	DESIGN
//crossJoins.add(name);	WITHOUT_CLASSIFICATION	0.9998404554700752	WITHOUT_CLASSIFICATION	1.595445299249041E-4	DESIGN
//ie no select clause in HQL	WITHOUT_CLASSIFICATION	0.9998754749423555	WITHOUT_CLASSIFICATION	1.2452505764444654E-4	DESIGN
// initialize the Set of queried identifier spaces (ie. tables)	WITHOUT_CLASSIFICATION	0.9997428333157871	WITHOUT_CLASSIFICATION	2.5716668421297954E-4	DESIGN
//ie. no select clause	WITHOUT_CLASSIFICATION	0.9999250411896324	WITHOUT_CLASSIFICATION	7.495881036756818E-5	DESIGN
//there _was_ a select clause	WITHOUT_CLASSIFICATION	0.9996834046659937	WITHOUT_CLASSIFICATION	3.1659533400625156E-4	DESIGN
// return the concrete type, or the underlying type if a concrete type // was not specified	WITHOUT_CLASSIFICATION	0.9995467922960465	WITHOUT_CLASSIFICATION	4.5320770395356256E-4	DESIGN
//many-to-many	WITHOUT_CLASSIFICATION	0.9982660483085283	WITHOUT_CLASSIFICATION	0.0017339516914716315	DESIGN
//q.addCollection(collectionName, collectionRole);	WITHOUT_CLASSIFICATION	0.9942892606861524	WITHOUT_CLASSIFICATION	0.005710739313847541	DESIGN
// classic parser does not support bulk manipulation statements	WITHOUT_CLASSIFICATION	0.9969095499003384	WITHOUT_CLASSIFICATION	0.003090450099661663	DESIGN
// can't cache this stuff either (per-invocation)	WITHOUT_CLASSIFICATION	0.9955901763347128	WITHOUT_CLASSIFICATION	0.0044098236652872	DESIGN
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9919605878604326	WITHOUT_CLASSIFICATION	0.008039412139567327	DESIGN
// This is the legacy behaviour for HQL queries...	WITHOUT_CLASSIFICATION	0.9891874024957005	WITHOUT_CLASSIFICATION	0.010812597504299458	DESIGN
// not known!	WITHOUT_CLASSIFICATION	0.9998425912399533	WITHOUT_CLASSIFICATION	1.5740876004665712E-4	DESIGN
// not known!	WITHOUT_CLASSIFICATION	0.9998425912399533	WITHOUT_CLASSIFICATION	1.5740876004665712E-4	DESIGN
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9994896265591662	WITHOUT_CLASSIFICATION	5.103734408338175E-4	DESIGN
// not known!	WITHOUT_CLASSIFICATION	0.9998425912399533	WITHOUT_CLASSIFICATION	1.5740876004665712E-4	DESIGN
// not known!	WITHOUT_CLASSIFICATION	0.9998425912399533	WITHOUT_CLASSIFICATION	1.5740876004665712E-4	DESIGN
//Need this, since join condition can appear inside parens!	WITHOUT_CLASSIFICATION	0.9983907249897214	WITHOUT_CLASSIFICATION	0.0016092750102785684	DESIGN
//tokens that close a sub expression //tokens that open a sub expression //tokens that would indicate a sub expression is a boolean expression	WITHOUT_CLASSIFICATION	0.9970413392767563	WITHOUT_CLASSIFICATION	0.0029586607232436027	DESIGN
//expressionTerminators.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.9993232207011862	WITHOUT_CLASSIFICATION	6.767792988138589E-4	DESIGN
//expressionOpeners.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.9993232207011862	WITHOUT_CLASSIFICATION	6.767792988138589E-4	DESIGN
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource) // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9930402106612627	WITHOUT_CLASSIFICATION	0.006959789338737294	DESIGN
// otherwise, a trim-specification and/or a trim-character // have been specified;  we need to decide which options // are present and "do the right thing" // should leading trim-characters be trimmed? // should trailing trim-characters be trimmed? // the trim-character (what is to be trimmed off?) // the trim-source (from where should it be trimmed?)	WITHOUT_CLASSIFICATION	0.7805583852125245	DESIGN	0.2194416147874755	WITHOUT_CLASSIFICATION
//Inside a BETWEEN ... AND ... expression	WITHOUT_CLASSIFICATION	0.9662349350031817	WITHOUT_CLASSIFICATION	0.03376506499681835	DESIGN
//were an odd or even number of NOTs encountered //the join string built up by compound paths inside this expression //a flag indicating if the subexpression is known to be boolean	WITHOUT_CLASSIFICATION	0.9967166722641742	WITHOUT_CLASSIFICATION	0.003283327735825854	DESIGN
//ie. a many-to-many	WITHOUT_CLASSIFICATION	0.9968410005832433	WITHOUT_CLASSIFICATION	0.0031589994167567207	DESIGN
//Cope with [,]	WITHOUT_CLASSIFICATION	0.9981466962527754	WITHOUT_CLASSIFICATION	0.0018533037472245055	DESIGN
//Cope with a continued path expression (ie. ].baz)	WITHOUT_CLASSIFICATION	0.9954941808249153	WITHOUT_CLASSIFICATION	0.004505819175084827	DESIGN
//NOTE: early return	WITHOUT_CLASSIFICATION	0.9989567932718663	WITHOUT_CLASSIFICATION	0.0010432067281337563	DESIGN
//Cope with a subselect	WITHOUT_CLASSIFICATION	0.9996888924306367	WITHOUT_CLASSIFICATION	3.1110756936323996E-4	DESIGN
//Cope with special cases of AND, NOT, ()	WITHOUT_CLASSIFICATION	0.9966995509438396	WITHOUT_CLASSIFICATION	0.003300449056160535	DESIGN
//Close extra brackets we opened	WITHOUT_CLASSIFICATION	0.988863464013273	WITHOUT_CLASSIFICATION	0.01113653598672705	DESIGN
//take note when this is a boolean expression	WITHOUT_CLASSIFICATION	0.9841506268871378	WITHOUT_CLASSIFICATION	0.015849373112862136	DESIGN
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9992561778547133	WITHOUT_CLASSIFICATION	7.438221452867483E-4	DESIGN
//process a token, mapping OO path expressions to SQL expressions	WITHOUT_CLASSIFICATION	0.9844908669581544	WITHOUT_CLASSIFICATION	0.015509133041845606	DESIGN
//Open any extra brackets we might need.	WITHOUT_CLASSIFICATION	0.9657082614102703	WITHOUT_CLASSIFICATION	0.03429173858972961	DESIGN
//Cope with special cases of AND, NOT, )	WITHOUT_CLASSIFICATION	0.9868411313291314	WITHOUT_CLASSIFICATION	0.013158868670868563	DESIGN
// the next one up must also be	WITHOUT_CLASSIFICATION	0.9995806228610746	WITHOUT_CLASSIFICATION	4.1937713892535475E-4	DESIGN
// Add any joins	WITHOUT_CLASSIFICATION	0.9999100687491789	WITHOUT_CLASSIFICATION	8.993125082116346E-5	DESIGN
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9992561778547133	WITHOUT_CLASSIFICATION	7.438221452867483E-4	DESIGN
//named query parameter	WITHOUT_CLASSIFICATION	0.9994819041952923	WITHOUT_CLASSIFICATION	5.180958047077899E-4	DESIGN
//path expression	WITHOUT_CLASSIFICATION	0.9987508834497586	WITHOUT_CLASSIFICATION	0.0012491165502413616	DESIGN
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9990604066564898	WITHOUT_CLASSIFICATION	9.395933435103143E-4	DESIGN
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9985731040197476	WITHOUT_CLASSIFICATION	0.0014268959802524448	DESIGN
//anything else	WITHOUT_CLASSIFICATION	0.9984708206763293	WITHOUT_CLASSIFICATION	0.001529179323670701	DESIGN
// the path expression continues after a ]	WITHOUT_CLASSIFICATION	0.9998286338006894	WITHOUT_CLASSIFICATION	1.7136619931065096E-4	DESIGN
// careful with this!	WITHOUT_CLASSIFICATION	0.9999606416173922	WITHOUT_CLASSIFICATION	3.9358382607740315E-5	DESIGN
// the path expression ends at the ]	WITHOUT_CLASSIFICATION	0.9998863668870275	WITHOUT_CLASSIFICATION	1.1363311297251223E-4	DESIGN
// "finish off" the join	WITHOUT_CLASSIFICATION	0.9999950047609611	WITHOUT_CLASSIFICATION	4.9952390388332555E-6	DESIGN
//NOTICE: no " or . since they are part of (compound) identifiers	WITHOUT_CLASSIFICATION	0.9988941626071636	WITHOUT_CLASSIFICATION	0.0011058373928363797	DESIGN
//cannot instantiate	WITHOUT_CLASSIFICATION	0.9984098615579036	WITHOUT_CLASSIFICATION	0.0015901384420964435	DESIGN
// start by looking for HQL keywords...	WITHOUT_CLASSIFICATION	0.9945828794420312	WITHOUT_CLASSIFICATION	0.005417120557968802	DESIGN
// inner joins can be abbreviated to 'join'	WITHOUT_CLASSIFICATION	0.998598796892557	WITHOUT_CLASSIFICATION	0.0014012031074428892	DESIGN
// 'outer' is optional and is ignored	WITHOUT_CLASSIFICATION	0.999384956154265	WITHOUT_CLASSIFICATION	6.150438457349048E-4	DESIGN
// now anything that is not a HQL keyword	WITHOUT_CLASSIFICATION	0.9998739924602333	WITHOUT_CLASSIFICATION	1.2600753976664336E-4	DESIGN
// process the "old" HQL style where aliases appear _first_ // ie. using the IN or IN CLASS constructions	WITHOUT_CLASSIFICATION	0.9999223629947339	WITHOUT_CLASSIFICATION	7.76370052659988E-5	DESIGN
// treat it as a classname	WITHOUT_CLASSIFICATION	0.9999810598881438	WITHOUT_CLASSIFICATION	1.8940111856122707E-5	DESIGN
// treat it as a path expression	WITHOUT_CLASSIFICATION	0.9997196442960482	WITHOUT_CLASSIFICATION	2.803557039518092E-4	DESIGN
// starts with the name of a mapped class (new style)	WITHOUT_CLASSIFICATION	0.99942143378021	WITHOUT_CLASSIFICATION	5.785662197900506E-4	DESIGN
// starts with a path expression (new style)	WITHOUT_CLASSIFICATION	0.9994700608216192	WITHOUT_CLASSIFICATION	5.299391783808597E-4	DESIGN
//allow ODMG OQL style: from Person p, p.cars c	WITHOUT_CLASSIFICATION	0.9935148388452345	WITHOUT_CLASSIFICATION	0.006485161154765447	DESIGN
//handle quoted strings	WITHOUT_CLASSIFICATION	0.999865251627389	WITHOUT_CLASSIFICATION	1.347483726109009E-4	DESIGN
// Object insertions, updates, and deletions have list semantics because // they must happen in the right order so as to respect referential // integrity	WITHOUT_CLASSIFICATION	0.9556335382767595	WITHOUT_CLASSIFICATION	0.04436646172324047	DESIGN
// "finish off" the join	WITHOUT_CLASSIFICATION	0.9999950047609611	WITHOUT_CLASSIFICATION	4.9952390388332555E-6	DESIGN
//ignore whitespace	WITHOUT_CLASSIFICATION	0.998593593769898	WITHOUT_CLASSIFICATION	0.0014064062301019646	DESIGN
//do replacements	WITHOUT_CLASSIFICATION	0.9987549874479221	WITHOUT_CLASSIFICATION	0.0012450125520778819	DESIGN
//handle HQL2 collection syntax	WITHOUT_CLASSIFICATION	0.9699887066090904	WITHOUT_CLASSIFICATION	0.030011293390909573	DESIGN
// uuid.hex is deprecated	WITHOUT_CLASSIFICATION	0.9998970139934317	WITHOUT_CLASSIFICATION	1.0298600656832932E-4	DESIGN
// AbstractSelectingDelegate impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993232207011862	WITHOUT_CLASSIFICATION	6.767792988138589E-4	DESIGN
//hilo params	WITHOUT_CLASSIFICATION	0.9984019443767963	WITHOUT_CLASSIFICATION	0.0015980556232037247	DESIGN
//sql = query;	WITHOUT_CLASSIFICATION	0.999792805537973	WITHOUT_CLASSIFICATION	2.0719446202692367E-4	DESIGN
// performance opt	WITHOUT_CLASSIFICATION	0.9997111319336931	WITHOUT_CLASSIFICATION	2.888680663069324E-4	DESIGN
//sql = update;	WITHOUT_CLASSIFICATION	0.999792805537973	WITHOUT_CLASSIFICATION	2.0719446202692367E-4	DESIGN
//hilo config	WITHOUT_CLASSIFICATION	0.9982758570634742	WITHOUT_CLASSIFICATION	0.0017241429365259027	DESIGN
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9991940416968923	WITHOUT_CLASSIFICATION	8.059583031076313E-4	DESIGN
// don't allow comments on these insert statements as comments totally // blow up the Oracle getGeneratedKeys "support" :(	WITHOUT_CLASSIFICATION	0.9993997281571018	WITHOUT_CLASSIFICATION	6.002718428983539E-4	DESIGN
//abort the save (the object is already saved by a circular cascade)	WITHOUT_CLASSIFICATION	0.979377599793094	WITHOUT_CLASSIFICATION	0.020622400206906033	DESIGN
//throw new IdentifierGenerationException("save associated object first, or disable cascade for inverse association");	WITHOUT_CLASSIFICATION	0.9891181203405157	WITHOUT_CLASSIFICATION	0.010881879659484266	DESIGN
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999681029284155	WITHOUT_CLASSIFICATION	3.189707158448681E-5	DESIGN
//do nothing to avoid a lazy property initialization	WITHOUT_CLASSIFICATION	0.9997177502327955	WITHOUT_CLASSIFICATION	2.8224976720445734E-4	DESIGN
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9967081607847762	WITHOUT_CLASSIFICATION	0.003291839215223774	DESIGN
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9991940416968923	WITHOUT_CLASSIFICATION	8.059583031076313E-4	DESIGN
// do nothing until we hit the rsult set containing the generated id	WITHOUT_CLASSIFICATION	0.999910569390899	WITHOUT_CLASSIFICATION	8.943060910096522E-5	DESIGN
/* COLUMN and TABLE should be renamed but it would break the public API */	WITHOUT_CLASSIFICATION	0.9989902367724491	WITHOUT_CLASSIFICATION	0.0010097632275508262	DESIGN
// Loaded entity instances, by EntityKey	WITHOUT_CLASSIFICATION	0.9989403115562187	WITHOUT_CLASSIFICATION	0.0010596884437814253	DESIGN
// if the given name is un-qualified we may neen to qualify it	WITHOUT_CLASSIFICATION	0.9994558873758345	WITHOUT_CLASSIFICATION	5.441126241655202E-4	DESIGN
// the default...	WITHOUT_CLASSIFICATION	0.9999233581499125	WITHOUT_CLASSIFICATION	7.664185008744881E-5	DESIGN
// unfortunately not really safe to normalize this // to 1 as an initial value like we do the others // because we would not be able to control this if // we are using a sequence...	WITHOUT_CLASSIFICATION	0.9311976270118982	WITHOUT_CLASSIFICATION	0.06880237298810181	DESIGN
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999681029284155	WITHOUT_CLASSIFICATION	3.189707158448681E-5	DESIGN
// Identity map of CollectionEntry instances, by the collection wrapper	WITHOUT_CLASSIFICATION	0.999557773447531	WITHOUT_CLASSIFICATION	4.4222655246895447E-4	DESIGN
// general purpose parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994221446265887	WITHOUT_CLASSIFICATION	5.778553734113667E-4	DESIGN
// table-specific parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995328983347447	WITHOUT_CLASSIFICATION	4.671016652553755E-4	DESIGN
// Configurable implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9987406269909851	WITHOUT_CLASSIFICATION	0.0012593730090149032	DESIGN
// IdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9987406269909851	WITHOUT_CLASSIFICATION	0.0012593730090149032	DESIGN
// PersistentIdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9987406269909851	WITHOUT_CLASSIFICATION	0.0012593730090149032	DESIGN
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9996844670765124	WITHOUT_CLASSIFICATION	3.1553292348767195E-4	DESIGN
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9996844670765124	WITHOUT_CLASSIFICATION	3.1553292348767195E-4	DESIGN
//fetch the generated id in a separate query	WITHOUT_CLASSIFICATION	0.9594826039483699	WITHOUT_CLASSIFICATION	0.040517396051630176	DESIGN
// we just hit the last position	WITHOUT_CLASSIFICATION	0.9995750895388192	WITHOUT_CLASSIFICATION	4.249104611806919E-4	DESIGN
// scroll ahead	WITHOUT_CLASSIFICATION	0.999812384385554	WITHOUT_CLASSIFICATION	1.876156144460728E-4	DESIGN
// scroll backward	WITHOUT_CLASSIFICATION	0.9998590492443798	WITHOUT_CLASSIFICATION	1.4095075562012573E-4	DESIGN
// we have not yet hit the last result...	WITHOUT_CLASSIFICATION	0.9997806412270015	WITHOUT_CLASSIFICATION	2.1935877299846576E-4	DESIGN
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999330362807991	WITHOUT_CLASSIFICATION	6.696371920089058E-4	DESIGN
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995103487040079	WITHOUT_CLASSIFICATION	4.896512959920017E-4	DESIGN
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993232207011862	WITHOUT_CLASSIFICATION	6.767792988138589E-4	DESIGN
// do this when all the properties are updateable since there is // a certain likelihood that the information will already be // snapshot-cached.	WITHOUT_CLASSIFICATION	0.9996082169842593	WITHOUT_CLASSIFICATION	3.917830157407168E-4	DESIGN
// Inner classes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996591369497005	WITHOUT_CLASSIFICATION	3.408630502993533E-4	DESIGN
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999330362807991	WITHOUT_CLASSIFICATION	6.696371920089058E-4	DESIGN
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995103487040079	WITHOUT_CLASSIFICATION	4.896512959920017E-4	DESIGN
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993232207011862	WITHOUT_CLASSIFICATION	6.767792988138589E-4	DESIGN
// Caches	WITHOUT_CLASSIFICATION	0.999758407950086	WITHOUT_CLASSIFICATION	2.4159204991409242E-4	DESIGN
//Generators:	WITHOUT_CLASSIFICATION	0.9982660483085283	WITHOUT_CLASSIFICATION	0.0017339516914716315	DESIGN
// cache region is defined by the root-class in the hierarchy...	WITHOUT_CLASSIFICATION	0.9995959280488248	WITHOUT_CLASSIFICATION	4.040719511752449E-4	DESIGN
//check if the detached object being merged is the parent	WITHOUT_CLASSIFICATION	0.9908940986281704	WITHOUT_CLASSIFICATION	0.009105901371829676	DESIGN
// after *all* persisters and named queries are registered	WITHOUT_CLASSIFICATION	0.9987906021566266	WITHOUT_CLASSIFICATION	0.001209397843373433	DESIGN
// if we get here, it is possible that we have a proxy 'in the way' of the merge map resolution... // 	WITHOUT_CLASSIFICATION	0.9999591780265157	WITHOUT_CLASSIFICATION	4.0821973484353174E-5	DESIGN
//JNDI + Serialization:	WITHOUT_CLASSIFICATION	0.9999335629618198	WITHOUT_CLASSIFICATION	6.64370381802228E-5	DESIGN
//checking for named queries	WITHOUT_CLASSIFICATION	0.9997933111954306	WITHOUT_CLASSIFICATION	2.0668880456949359E-4	DESIGN
//stats	WITHOUT_CLASSIFICATION	0.997954794544069	WITHOUT_CLASSIFICATION	0.002045205455931084	DESIGN
// EntityNotFoundDelegate	WITHOUT_CLASSIFICATION	0.9999811849861537	WITHOUT_CLASSIFICATION	1.8815013846229537E-5	DESIGN
// Check named HQL queries	WITHOUT_CLASSIFICATION	0.9999733173655403	WITHOUT_CLASSIFICATION	2.6682634459652513E-5	DESIGN
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9964388341708266	WITHOUT_CLASSIFICATION	0.0035611658291735486	DESIGN
//prevents this session from adding things to cache	WITHOUT_CLASSIFICATION	0.9589263222634212	WITHOUT_CLASSIFICATION	0.0410736777365788	DESIGN
// from javax.naming.Referenceable	WITHOUT_CLASSIFICATION	0.9990078001795507	WITHOUT_CLASSIFICATION	9.921998204492962E-4	DESIGN
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9989273487130548	WITHOUT_CLASSIFICATION	0.001072651286945222	DESIGN
//for a dynamic-class	WITHOUT_CLASSIFICATION	0.9997732738585212	WITHOUT_CLASSIFICATION	2.2672614147865075E-4	DESIGN
//test this entity to see if we must query it	WITHOUT_CLASSIFICATION	0.9161824245399629	WITHOUT_CLASSIFICATION	0.08381757546003711	DESIGN
//NOTE EARLY EXIT	WITHOUT_CLASSIFICATION	0.9982660483085283	WITHOUT_CLASSIFICATION	0.0017339516914716315	DESIGN
// for backward-compatability	WITHOUT_CLASSIFICATION	0.9999619437888072	WITHOUT_CLASSIFICATION	3.8056211192791794E-5	DESIGN
// ignore this error for now	WITHOUT_CLASSIFICATION	0.9999343396056406	WITHOUT_CLASSIFICATION	6.566039435936135E-5	DESIGN
//to stop the class from being unloaded	WITHOUT_CLASSIFICATION	0.999081978143006	WITHOUT_CLASSIFICATION	9.180218569939193E-4	DESIGN
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9975464772937235	WITHOUT_CLASSIFICATION	0.0024535227062765157	DESIGN
//must add to JNDI _after_ adding to HashMaps, because some JNDI servers use serialization	WITHOUT_CLASSIFICATION	0.9962536221300211	WITHOUT_CLASSIFICATION	0.0037463778699789578	DESIGN
// Make sure this is a defined parameter and check the incoming value type	WITHOUT_CLASSIFICATION	0.9953817983689888	WITHOUT_CLASSIFICATION	0.004618201631011262	DESIGN
// for each of the defined parameters, make sure its value // has been set	WITHOUT_CLASSIFICATION	0.9988758300436	WITHOUT_CLASSIFICATION	0.0011241699563999618	DESIGN
//we never need to apply locks to the SQL	WITHOUT_CLASSIFICATION	0.968260805775122	WITHOUT_CLASSIFICATION	0.03173919422487798	DESIGN
// inserts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993232207011862	WITHOUT_CLASSIFICATION	6.767792988138589E-4	DESIGN
// deletes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993122931847436	WITHOUT_CLASSIFICATION	6.877068152563884E-4	DESIGN
// during deserialization, we need to reconnect all proxies and // collections to this session, as well as the EntityEntry and // CollectionEntry instances; these associations are transient // because serialization is used for different things.	WITHOUT_CLASSIFICATION	0.9773568526807733	WITHOUT_CLASSIFICATION	0.02264314731922672	DESIGN
// updates ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992720519559495	WITHOUT_CLASSIFICATION	7.279480440505076E-4	DESIGN
// loading ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992248211719869	WITHOUT_CLASSIFICATION	7.751788280131721E-4	DESIGN
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9973165401337463	WITHOUT_CLASSIFICATION	0.002683459866253676	DESIGN
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9973165401337463	WITHOUT_CLASSIFICATION	0.002683459866253676	DESIGN
// first, try to load it from the temp PC associated to this SS	WITHOUT_CLASSIFICATION	0.9995290306097878	WITHOUT_CLASSIFICATION	4.709693902121328E-4	DESIGN
// if the metadata allowed proxy creation and caller did not request forceful eager loading, // generate a proxy	WITHOUT_CLASSIFICATION	0.9997840222255148	WITHOUT_CLASSIFICATION	2.1597777448521487E-4	DESIGN
// otherwise immediately materialize it	WITHOUT_CLASSIFICATION	0.9996187940169421	WITHOUT_CLASSIFICATION	3.8120598305781356E-4	DESIGN
/////////////////////////////////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9942892606861524	WITHOUT_CLASSIFICATION	0.005710739313847541	DESIGN
// no auto-flushing to support in stateless session	WITHOUT_CLASSIFICATION	0.9964773412946928	WITHOUT_CLASSIFICATION	0.0035226587053071834	DESIGN
//after setting values to object, entityMode	WITHOUT_CLASSIFICATION	0.9990118121405642	WITHOUT_CLASSIFICATION	9.88187859435799E-4	DESIGN
//for EJB3	WITHOUT_CLASSIFICATION	0.9984061434975919	WITHOUT_CLASSIFICATION	0.001593856502408048	DESIGN
// just ignore	WITHOUT_CLASSIFICATION	0.9998562246948773	WITHOUT_CLASSIFICATION	1.4377530512270294E-4	DESIGN
// do a check	WITHOUT_CLASSIFICATION	0.9997159122041583	WITHOUT_CLASSIFICATION	2.8408779584165287E-4	DESIGN
// saveOrUpdate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999394288665246	WITHOUT_CLASSIFICATION	6.057113347538544E-4	DESIGN
// update() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999394288665246	WITHOUT_CLASSIFICATION	6.057113347538544E-4	DESIGN
// lock() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999394288665246	WITHOUT_CLASSIFICATION	6.057113347538544E-4	DESIGN
// persist() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999394288665246	WITHOUT_CLASSIFICATION	6.057113347538544E-4	DESIGN
// persistOnFlush() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999394288665246	WITHOUT_CLASSIFICATION	6.057113347538544E-4	DESIGN
// merge() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999394288665246	WITHOUT_CLASSIFICATION	6.057113347538544E-4	DESIGN
// saveOrUpdateCopy() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999394288665246	WITHOUT_CLASSIFICATION	6.057113347538544E-4	DESIGN
// delete() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993845079303831	WITHOUT_CLASSIFICATION	6.154920696169846E-4	DESIGN
// load()/get() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999394288665246	WITHOUT_CLASSIFICATION	6.057113347538544E-4	DESIGN
// refresh() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999394288665246	WITHOUT_CLASSIFICATION	6.057113347538544E-4	DESIGN
// replicate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999394288665246	WITHOUT_CLASSIFICATION	6.057113347538544E-4	DESIGN
// do not auto-flush while outside a transaction	WITHOUT_CLASSIFICATION	0.9951258717784037	WITHOUT_CLASSIFICATION	0.0048741282215962545	DESIGN
// this is an internal error of some sort...	WITHOUT_CLASSIFICATION	0.9953357695640772	WITHOUT_CLASSIFICATION	0.00466423043592284	DESIGN
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.8706296994469962	WITHOUT_CLASSIFICATION	0.12937030055300378	DESIGN
//only collections belonging to deleted entities are allowed to be dereferenced in the case of orphan delete	WITHOUT_CLASSIFICATION	0.9983080050860956	WITHOUT_CLASSIFICATION	0.0016919949139044196	DESIGN
// if it was previously unreferenced, we need to flush in order to // get its state into the database in order to execute query	WITHOUT_CLASSIFICATION	0.9518891089318662	WITHOUT_CLASSIFICATION	0.04811089106813389	DESIGN
// not for internal use:	WITHOUT_CLASSIFICATION	0.999939795613079	WITHOUT_CLASSIFICATION	6.020438692095181E-5	DESIGN
// otherwise, we only need to flush if there are in-memory changes // to the queried tables	WITHOUT_CLASSIFICATION	0.9996931622936447	WITHOUT_CLASSIFICATION	3.0683770635527783E-4	DESIGN
// might need to run a different filter entirely after the flush // because the collection role may have changed	WITHOUT_CLASSIFICATION	0.9954991559950169	WITHOUT_CLASSIFICATION	0.004500844004983063	DESIGN
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.8706296994469962	WITHOUT_CLASSIFICATION	0.12937030055300378	DESIGN
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.8706296994469962	WITHOUT_CLASSIFICATION	0.12937030055300378	DESIGN
//if it is initialized, see if the underlying //instance is contained, since we need to  //account for the fact that it might have been //evicted	WITHOUT_CLASSIFICATION	0.879826105542116	WITHOUT_CLASSIFICATION	0.12017389445788394	DESIGN
// basically just an adapted copy of find(CriteriaImpl)	WITHOUT_CLASSIFICATION	0.9999555262488783	WITHOUT_CLASSIFICATION	4.44737511216695E-5	DESIGN
// it is possible for this method to be called during flush processing, // so make certain that we do not accidently initialize an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9079984500899093	WITHOUT_CLASSIFICATION	0.09200154991009071	DESIGN
// nothing to do in a stateful session	WITHOUT_CLASSIFICATION	0.9995434469407171	WITHOUT_CLASSIFICATION	4.565530592829143E-4	DESIGN
// ignore	WITHOUT_CLASSIFICATION	0.9996214555833285	WITHOUT_CLASSIFICATION	3.7854441667148255E-4	DESIGN
// ignore this error for now	WITHOUT_CLASSIFICATION	0.9999343396056406	WITHOUT_CLASSIFICATION	6.566039435936135E-5	DESIGN
// we need to writeObject() on this since interceptor is user defined	WITHOUT_CLASSIFICATION	0.9977451189844994	WITHOUT_CLASSIFICATION	0.002254881015500637	DESIGN
// the old-time stand-by...	WITHOUT_CLASSIFICATION	0.9999929586370826	WITHOUT_CLASSIFICATION	7.041362917405463E-6	DESIGN
// parameter bind values...	WITHOUT_CLASSIFICATION	0.9999385772491287	WITHOUT_CLASSIFICATION	6.14227508712605E-5	DESIGN
// Parameter handling code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9828817040283372	WITHOUT_CLASSIFICATION	0.017118295971662825	DESIGN
// prepend value and type list with null for any positions before the wanted position.	WITHOUT_CLASSIFICATION	0.9936629001787554	WITHOUT_CLASSIFICATION	0.00633709982124458	DESIGN
// Execution methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9986950261820836	WITHOUT_CLASSIFICATION	0.001304973817916399	DESIGN
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9991051575764616	WITHOUT_CLASSIFICATION	8.948424235385615E-4	DESIGN
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9991051575764616	WITHOUT_CLASSIFICATION	8.948424235385615E-4	DESIGN
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9991051575764616	WITHOUT_CLASSIFICATION	8.948424235385615E-4	DESIGN
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9991051575764616	WITHOUT_CLASSIFICATION	8.948424235385615E-4	DESIGN
// FieldInterceptor impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993232207011862	WITHOUT_CLASSIFICATION	6.767792988138589E-4	DESIGN
// subclass accesses ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994885653735927	WITHOUT_CLASSIFICATION	5.114346264073344E-4	DESIGN
//let's assume that there is only one lazy fetch group, for now!	WITHOUT_CLASSIFICATION	0.9963975829310859	WITHOUT_CLASSIFICATION	0.0036024170689140946	DESIGN
// FieldHandler impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993232207011862	WITHOUT_CLASSIFICATION	6.767792988138589E-4	DESIGN
// should *not* need to grow beyond the size of the total number of columns in the rs	WITHOUT_CLASSIFICATION	0.9977870434651669	WITHOUT_CLASSIFICATION	0.002212956534833202	DESIGN
// should probably no-op commit/rollback here, at least in JTA scenarios	WITHOUT_CLASSIFICATION	0.9955958348492973	WITHOUT_CLASSIFICATION	0.004404165150702787	DESIGN
// Base Expectation impls ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993420539207805	WITHOUT_CLASSIFICATION	6.579460792196026E-4	DESIGN
// Various Expectation instances ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996679035645132	WITHOUT_CLASSIFICATION	3.320964354868514E-4	DESIGN
// explicitly perform no checking...	WITHOUT_CLASSIFICATION	0.9994751072723569	WITHOUT_CLASSIFICATION	5.24892727643147E-4	DESIGN
// used from testsuite	WITHOUT_CLASSIFICATION	0.999946320580847	WITHOUT_CLASSIFICATION	5.367941915295695E-5	DESIGN
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9967662427837747	WITHOUT_CLASSIFICATION	0.0032337572162251665	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.9982660483085283	WITHOUT_CLASSIFICATION	0.0017339516914716315	DESIGN
// register synch; stats.connect()	WITHOUT_CLASSIFICATION	0.9988241057409807	WITHOUT_CLASSIFICATION	0.0011758942590192909	DESIGN
//noncritical, swallow and let the other propagate!	WITHOUT_CLASSIFICATION	0.9924912152711995	WITHOUT_CLASSIFICATION	0.007508784728800364	DESIGN
// calls executeBatch()	WITHOUT_CLASSIFICATION	0.9999878722469425	WITHOUT_CLASSIFICATION	1.2127753057491573E-5	DESIGN
//no big deal	WITHOUT_CLASSIFICATION	0.9988111216970426	WITHOUT_CLASSIFICATION	0.0011888783029573842	DESIGN
// no big deal	WITHOUT_CLASSIFICATION	0.9999285131305674	WITHOUT_CLASSIFICATION	7.148686943256633E-5	DESIGN
// no big deal	WITHOUT_CLASSIFICATION	0.9999285131305674	WITHOUT_CLASSIFICATION	7.148686943256633E-5	DESIGN
// sybase driver (jConnect) throwing NPE here in certain // cases, but we'll just handle the general "unexpected" case	WITHOUT_CLASSIFICATION	0.9991181937137292	WITHOUT_CLASSIFICATION	8.818062862707741E-4	DESIGN
// see explanation above...	WITHOUT_CLASSIFICATION	0.9999753045899428	WITHOUT_CLASSIFICATION	2.4695410057251406E-5	DESIGN
// If we are in the process of releasing, no sense // checking for aggressive-release possibility.	WITHOUT_CLASSIFICATION	0.9990734245024199	WITHOUT_CLASSIFICATION	9.265754975800523E-4	DESIGN
// EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9997952314504504	WITHOUT_CLASSIFICATION	2.047685495496311E-4	DESIGN
// ResultSet impl ("overridden") ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993232207011862	WITHOUT_CLASSIFICATION	6.767792988138589E-4	DESIGN
// ResultSet impl (delegated) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993232207011862	WITHOUT_CLASSIFICATION	6.767792988138589E-4	DESIGN
// refer to comment in StatefulPersistenceContext.addCollection()	WITHOUT_CLASSIFICATION	0.9996686690816399	WITHOUT_CLASSIFICATION	3.313309183601504E-4	DESIGN
// ConnectionManager.Callback implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9987406269909851	WITHOUT_CLASSIFICATION	0.0012593730090149032	DESIGN
// Note : success = false, because we don't know the outcome of the transaction	WITHOUT_CLASSIFICATION	0.9999619286468544	WITHOUT_CLASSIFICATION	3.807135314564443E-5	DESIGN
// we already have a callback registered; either a local // (org.hibernate.Transaction) transaction has accepted // callback responsibilities, or we have previously // registered a transaction synch.	WITHOUT_CLASSIFICATION	0.9973900123104892	WITHOUT_CLASSIFICATION	0.0026099876895108354	DESIGN
// the configured transaction-factory says it only supports // local callback mode, so no sense attempting to register a // JTA Synchronization	WITHOUT_CLASSIFICATION	0.9903781548564612	WITHOUT_CLASSIFICATION	0.00962184514353879	DESIGN
// transactions marked for rollback-only cause some TM impls to throw exceptions	WITHOUT_CLASSIFICATION	0.9932496649880038	WITHOUT_CLASSIFICATION	0.006750335011996176	DESIGN
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993229183650829	WITHOUT_CLASSIFICATION	6.770816349171864E-4	DESIGN
//postInitialize() will be called after initialization	WITHOUT_CLASSIFICATION	0.9991816143962639	WITHOUT_CLASSIFICATION	8.183856037361358E-4	DESIGN
// cannot handle single quotes	WITHOUT_CLASSIFICATION	0.9999761827144378	WITHOUT_CLASSIFICATION	2.3817285562265612E-5	DESIGN
// todo : for 4.0 //	WITHOUT_CLASSIFICATION	0.9996551235229603	WITHOUT_CLASSIFICATION	3.448764770397675E-4	DESIGN
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9706585803701202	WITHOUT_CLASSIFICATION	0.0293414196298798	DESIGN
// don't even bother trying to read further	WITHOUT_CLASSIFICATION	0.9992727386554534	WITHOUT_CLASSIFICATION	7.272613445465267E-4	DESIGN
// don't even bother trying to read any further	WITHOUT_CLASSIFICATION	0.9993672529307185	WITHOUT_CLASSIFICATION	6.327470692814529E-4	DESIGN
// position cursor to the last row	WITHOUT_CLASSIFICATION	0.9997150668991099	WITHOUT_CLASSIFICATION	2.849331008900049E-4	DESIGN
// sequentially read the result set in reverse until we recognize // a change in the key value.  At that point, we are pointed at // the last physical sequential row for the logical row in which // we are interested in processing	WITHOUT_CLASSIFICATION	0.9972306374306089	WITHOUT_CLASSIFICATION	0.002769362569391159	DESIGN
// Read backwards until we read past the first physical sequential // row with the key we are interested in loading	WITHOUT_CLASSIFICATION	0.9999300104641511	WITHOUT_CLASSIFICATION	6.99895358488742E-5	DESIGN
// Finally, read ahead one row to position result set cursor // at the first physical row we are interested in loading	WITHOUT_CLASSIFICATION	0.9993421312704234	WITHOUT_CLASSIFICATION	6.578687295767507E-4	DESIGN
// now get an existing proxy for each row element (if there is one)	WITHOUT_CLASSIFICATION	0.9999579228554389	WITHOUT_CLASSIFICATION	4.207714456100962E-5	DESIGN
// force the proxy to resolve itself	WITHOUT_CLASSIFICATION	0.9999726897306881	WITHOUT_CLASSIFICATION	2.7310269311941804E-5	DESIGN
// this is equivalent to the old behavior...	WITHOUT_CLASSIFICATION	0.9989840526630319	WITHOUT_CLASSIFICATION	0.0010159473369680946	DESIGN
//if null, owner will be retrieved from session	WITHOUT_CLASSIFICATION	0.9978587250909767	WITHOUT_CLASSIFICATION	0.0021412749090233096	DESIGN
//final String queryString, 	WITHOUT_CLASSIFICATION	0.999686865741825	WITHOUT_CLASSIFICATION	3.131342581750244E-4	DESIGN
// if it was a reference to self, don't need to nullify // unless we are using native id generation, in which // case we definitely need to nullify	WITHOUT_CLASSIFICATION	0.9991551550902297	WITHOUT_CLASSIFICATION	8.448449097703336E-4	DESIGN
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9954228745900296	WITHOUT_CLASSIFICATION	0.004577125409970271	DESIGN
// in an effort to avoid concurrent-modification-exceptions (from // potential recursive calls back through here as a result of the // eventual call to PersistentCollection#endRead), we scan the // internal loadingCollections map for matches and store those matches // in a temp collection.  the temp collection is then used to "drive" // the #endRead processing.	WITHOUT_CLASSIFICATION	0.7556830072759021	WITHOUT_CLASSIFICATION	0.244316992724098	DESIGN
//we can reuse it for each row	WITHOUT_CLASSIFICATION	0.9999233022881837	WITHOUT_CLASSIFICATION	7.669771181638273E-5	DESIGN
//can't reuse in this case	WITHOUT_CLASSIFICATION	0.9997909953584728	WITHOUT_CLASSIFICATION	2.0900464152722077E-4	DESIGN
// First we need to suspend any current JTA transaction and obtain // a JDBC connection	WITHOUT_CLASSIFICATION	0.9902221248650376	WITHOUT_CLASSIFICATION	0.00977787513496249	DESIGN
//getResultList(results);	WITHOUT_CLASSIFICATION	0.9998404554700752	WITHOUT_CLASSIFICATION	1.595445299249041E-4	DESIGN
//if we only returned one entity, query by key is more efficient	WITHOUT_CLASSIFICATION	0.9086690264804084	WITHOUT_CLASSIFICATION	0.09133097351959167	DESIGN
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9958002718169713	WITHOUT_CLASSIFICATION	0.004199728183028701	DESIGN
// handle empty collection	WITHOUT_CLASSIFICATION	0.9997316266302083	WITHOUT_CLASSIFICATION	2.683733697917781E-4	DESIGN
// else no collection element, but also no owner	WITHOUT_CLASSIFICATION	0.9994423101483444	WITHOUT_CLASSIFICATION	5.576898516556739E-4	DESIGN
//handle empty collections	WITHOUT_CLASSIFICATION	0.9997296445152988	WITHOUT_CLASSIFICATION	2.7035548470124324E-4	DESIGN
// else this is not a collection initializer (and empty collections will // be detected by looking for the owner's identifier in the result set)	WITHOUT_CLASSIFICATION	0.9002483747704778	WITHOUT_CLASSIFICATION	0.09975162522952215	DESIGN
// validate() instances of Validatable	WITHOUT_CLASSIFICATION	0.9996949583233333	WITHOUT_CLASSIFICATION	3.0504167666671803E-4	DESIGN
// if we know there is exactly 1 row, we can skip. // it would be great if we could _always_ skip this; // it is a problem for <key-many-to-one>	WITHOUT_CLASSIFICATION	0.9982661201596872	WITHOUT_CLASSIFICATION	0.0017338798403127842	DESIGN
// remove all collections for the entity from the session-level cache	WITHOUT_CLASSIFICATION	0.9993557639030314	WITHOUT_CLASSIFICATION	6.442360969685272E-4	DESIGN
//null version means the object is in the process of being loaded somewhere else in the ResultSet	WITHOUT_CLASSIFICATION	0.986303431799583	WITHOUT_CLASSIFICATION	0.013696568200417026	DESIGN
//problematic for <key-many-to-one>!	WITHOUT_CLASSIFICATION	0.9885160138716376	WITHOUT_CLASSIFICATION	0.01148398612836252	DESIGN
//use the id passed in	WITHOUT_CLASSIFICATION	0.9999057527119258	WITHOUT_CLASSIFICATION	9.424728807415369E-5	DESIGN
//do nothing	WITHOUT_CLASSIFICATION	0.9998779145635518	WITHOUT_CLASSIFICATION	1.2208543644811972E-4	DESIGN
// prefer re-generation of identity!	WITHOUT_CLASSIFICATION	0.9993783381298343	WITHOUT_CLASSIFICATION	6.216618701656599E-4	DESIGN
//no point doing this if NONE was requested	WITHOUT_CLASSIFICATION	0.998106684928033	WITHOUT_CLASSIFICATION	0.0018933150719670278	DESIGN
//If the object is already loaded, return the loaded one	WITHOUT_CLASSIFICATION	0.9954118298191182	WITHOUT_CLASSIFICATION	0.004588170180881832	DESIGN
//its already loaded so don't need to hydrate it	WITHOUT_CLASSIFICATION	0.9832249610565151	WITHOUT_CLASSIFICATION	0.016775038943484824	DESIGN
// cascade the refresh prior to refreshing this entity	WITHOUT_CLASSIFICATION	0.9990513083372848	WITHOUT_CLASSIFICATION	9.486916627151683E-4	DESIGN
//the load() which takes an entity does not pass an entityName	WITHOUT_CLASSIFICATION	0.9982160898600764	WITHOUT_CLASSIFICATION	0.0017839101399236873	DESIGN
//we only check the version when _upgrading_ lock modes	WITHOUT_CLASSIFICATION	0.9992502124940419	WITHOUT_CLASSIFICATION	7.497875059580156E-4	DESIGN
// look for a proxy	WITHOUT_CLASSIFICATION	0.9995751996220231	WITHOUT_CLASSIFICATION	4.24800377976792E-4	DESIGN
//we need to upgrade the lock mode to the mode requested	WITHOUT_CLASSIFICATION	0.9858647289115365	WITHOUT_CLASSIFICATION	0.01413527108846348	DESIGN
//its the given optional object	WITHOUT_CLASSIFICATION	0.9967876178903167	WITHOUT_CLASSIFICATION	0.0032123821096833277	DESIGN
// instantiate a new instance	WITHOUT_CLASSIFICATION	0.9999675007876787	WITHOUT_CLASSIFICATION	3.249921232127585E-5	DESIGN
//need to hydrate it.	WITHOUT_CLASSIFICATION	0.9996673882842202	WITHOUT_CLASSIFICATION	3.32611715779718E-4	DESIGN
// return a newly loaded object	WITHOUT_CLASSIFICATION	0.9979483490275505	WITHOUT_CLASSIFICATION	0.002051650972449544	DESIGN
//will be ignored, using the existing Entry instead	WITHOUT_CLASSIFICATION	0.9977369362969757	WITHOUT_CLASSIFICATION	0.0022630637030243424	DESIGN
// key is an entity involved with the operation performed by the listener; // value can be either a copy of the entity or the entity itself	WITHOUT_CLASSIFICATION	0.9999385439643922	WITHOUT_CLASSIFICATION	6.14560356078723E-5	DESIGN
//materialize associations (and initialize the object) later	WITHOUT_CLASSIFICATION	0.9982074181937117	WITHOUT_CLASSIFICATION	0.001792581806288332	DESIGN
// Get the persister for the _subclass_	WITHOUT_CLASSIFICATION	0.9997548675017454	WITHOUT_CLASSIFICATION	2.4513249825467456E-4	DESIGN
// ok in normal Hibernate usage to delete a detached entity; JPA however // forbids it, thus this is a hook for HEM to affect this behavior	WITHOUT_CLASSIFICATION	0.989763475671053	WITHOUT_CLASSIFICATION	0.010236524328947004	DESIGN
// the entry will be removed after the flush, and will no longer // override the stale snapshot // This is now handled by removeEntity() in EntityDeleteAction //persistenceContext.removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9953922826251894	WITHOUT_CLASSIFICATION	0.004607717374810642	DESIGN
//addInitializedCollection(collection, persister, id);	WITHOUT_CLASSIFICATION	0.9942892606861524	WITHOUT_CLASSIFICATION	0.005710739313847541	DESIGN
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9982660483085283	WITHOUT_CLASSIFICATION	0.0017339516914716315	DESIGN
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9982660483085283	WITHOUT_CLASSIFICATION	0.0017339516914716315	DESIGN
/*|| oj.getJoinable().consumesCollectionAlias() */	WITHOUT_CLASSIFICATION	0.9999204249980735	WITHOUT_CLASSIFICATION	7.957500192651858E-5	DESIGN
// here we do not bother with the discriminator.	WITHOUT_CLASSIFICATION	0.9972154867853555	WITHOUT_CLASSIFICATION	0.0027845132146443142	DESIGN
// Code to handle subclasses of topClass	WITHOUT_CLASSIFICATION	0.9987992924356465	WITHOUT_CLASSIFICATION	0.0012007075643535418	DESIGN
//woops we got an instance of another class hierarchy branch	WITHOUT_CLASSIFICATION	0.9978285946949343	WITHOUT_CLASSIFICATION	0.002171405305065701	DESIGN
// we can go straight to the first required row	WITHOUT_CLASSIFICATION	0.9993985935307166	WITHOUT_CLASSIFICATION	6.014064692833328E-4	DESIGN
// we need to step through the rows one row at a time (slow)	WITHOUT_CLASSIFICATION	0.9927355601182521	WITHOUT_CLASSIFICATION	0.0072644398817478285	DESIGN
// synchronized to avoid multi-thread access issues; defined as method synch to avoid // potential deadlock issues due to nature of code.	WITHOUT_CLASSIFICATION	0.9991472898875771	WITHOUT_CLASSIFICATION	8.52710112422994E-4	DESIGN
// Allows various loaders (ok mainly the QueryLoader :) to check // whether scrolling of their result set should be allowed. // // By default it is allowed.	WITHOUT_CLASSIFICATION	0.9987052320991859	WITHOUT_CLASSIFICATION	0.0012947679008141386	DESIGN
//before adding to collection!	WITHOUT_CLASSIFICATION	0.9997014378786446	WITHOUT_CLASSIFICATION	2.985621213554438E-4	DESIGN
// if the current depth is 0, the root thing being loaded is the // many-to-many collection itself.  Here, it is alright to use // an inner join...	WITHOUT_CLASSIFICATION	0.9912387251639362	WITHOUT_CLASSIFICATION	0.008761274836063761	DESIGN
//operations which cascade as far as the collection also cascade to collection elements	WITHOUT_CLASSIFICATION	0.9994807004958791	WITHOUT_CLASSIFICATION	5.192995041209469E-4	DESIGN
// simple, because we can't have a one-to-one or a collection  // (or even a property-ref) in a composite-element:	WITHOUT_CLASSIFICATION	0.993016003058049	WITHOUT_CLASSIFICATION	0.006983996941950918	DESIGN
//a composite key	WITHOUT_CLASSIFICATION	0.998236192264418	WITHOUT_CLASSIFICATION	0.001763807735582003	DESIGN
// if no batch, use "foo = ? and bar = ?"	WITHOUT_CLASSIFICATION	0.9997721545518521	WITHOUT_CLASSIFICATION	2.2784544814800223E-4	DESIGN
//it must be a collection fetch	WITHOUT_CLASSIFICATION	0.8618446952761879	WITHOUT_CLASSIFICATION	0.13815530472381216	DESIGN
// needed later for many-to-many/filter application	WITHOUT_CLASSIFICATION	0.9991225793492883	WITHOUT_CLASSIFICATION	8.774206507117574E-4	DESIGN
/*&& etype.isReferenceToPrimaryKey()*/	WITHOUT_CLASSIFICATION	0.9947451246857346	WITHOUT_CLASSIFICATION	0.005254875314265346	DESIGN
// it might still need to apply a collection ordering based on a // many-to-many defined order-by...	WITHOUT_CLASSIFICATION	0.6131319923855314	WITHOUT_CLASSIFICATION	0.38686800761446866	DESIGN
// if a composite key, use "( (foo = ? and bar = ?) or (foo = ? and bar = ?) )" for batching //TODO: unnecessary for databases with ANSI-style joins	WITHOUT_CLASSIFICATION	0.9841731291514653	WITHOUT_CLASSIFICATION	0.015826870848534708	DESIGN
// belong to other persister // belong to other persister	WITHOUT_CLASSIFICATION	0.9978666448463944	WITHOUT_CLASSIFICATION	0.002133355153605507	DESIGN
// we found it	WITHOUT_CLASSIFICATION	0.9996972059867101	WITHOUT_CLASSIFICATION	3.0279401328990976E-4	DESIGN
//we can use an inner join for the many-to-many	WITHOUT_CLASSIFICATION	0.995621500911921	WITHOUT_CLASSIFICATION	0.0043784990880789436	DESIGN
//disable a join back to this same association	WITHOUT_CLASSIFICATION	0.8948838247108435	WITHOUT_CLASSIFICATION	0.10511617528915654	DESIGN
//NOTE: unlike all other Loaders, this one is NOT //      multithreaded, or cacheable!!	WITHOUT_CLASSIFICATION	0.9829402750342225	WITHOUT_CLASSIFICATION	0.017059724965777477	DESIGN
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9997103028726907	WITHOUT_CLASSIFICATION	2.896971273092738E-4	DESIGN
//root entity comes *last*	WITHOUT_CLASSIFICATION	0.9998393774775837	WITHOUT_CLASSIFICATION	1.6062252241641473E-4	DESIGN
//deliberately ignore return value!	WITHOUT_CLASSIFICATION	0.9945385943946546	WITHOUT_CLASSIFICATION	0.005461405605345301	DESIGN
//alias may be null //EARLY EXIT	WITHOUT_CLASSIFICATION	0.9900659664242122	WITHOUT_CLASSIFICATION	0.009934033575787862	DESIGN
// if it is a compound path	WITHOUT_CLASSIFICATION	0.9999753781574028	WITHOUT_CLASSIFICATION	2.4621842597273858E-5	DESIGN
// otherwise assume the parent is the the criteria that created us	WITHOUT_CLASSIFICATION	0.9988839528947049	WITHOUT_CLASSIFICATION	0.001116047105295099	DESIGN
// if its the root criteria, we are done	WITHOUT_CLASSIFICATION	0.9976089420152799	WITHOUT_CLASSIFICATION	0.0023910579847201217	DESIGN
// otherwise, recurse	WITHOUT_CLASSIFICATION	0.9999811849861537	WITHOUT_CLASSIFICATION	1.8815013846229537E-5	DESIGN
//the criteria instance	WITHOUT_CLASSIFICATION	0.9998212318311446	WITHOUT_CLASSIFICATION	1.7876816885547845E-4	DESIGN
// the entity name	WITHOUT_CLASSIFICATION	0.9998392632946709	WITHOUT_CLASSIFICATION	1.6073670532920468E-4	DESIGN
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9987711512840403	WITHOUT_CLASSIFICATION	0.001228848715959782	DESIGN
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9987711512840403	WITHOUT_CLASSIFICATION	0.001228848715959782	DESIGN
//it refers to an alias of a projection	WITHOUT_CLASSIFICATION	0.986812654740084	WITHOUT_CLASSIFICATION	0.013187345259915976	DESIGN
//should never happen, i think	WITHOUT_CLASSIFICATION	0.9995285310256651	WITHOUT_CLASSIFICATION	4.7146897433494617E-4	DESIGN
// Detect discriminator values...	WITHOUT_CLASSIFICATION	0.9992636859479284	WITHOUT_CLASSIFICATION	7.363140520716044E-4	DESIGN
// Convert the string value into the proper type.	WITHOUT_CLASSIFICATION	0.9964324172149022	WITHOUT_CLASSIFICATION	0.003567582785097767	DESIGN
// and the qualifier is not the alias of this criteria //      -> check to see if we belong to some criteria other //          than the one that created us	WITHOUT_CLASSIFICATION	0.9923452278610233	WITHOUT_CLASSIFICATION	0.007654772138976663	DESIGN
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.9826934221195818	WITHOUT_CLASSIFICATION	0.017306577880418332	DESIGN
// Otherwise, this is an ordinary value.	WITHOUT_CLASSIFICATION	0.9976727005564163	WITHOUT_CLASSIFICATION	0.0023272994435837	DESIGN
// Currently *not* cachable if autodiscover types is in effect (e.g. "select * ...")	WITHOUT_CLASSIFICATION	0.9992485107956178	WITHOUT_CLASSIFICATION	7.514892043822001E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.999758407950086	WITHOUT_CLASSIFICATION	2.4159204991409242E-4	DESIGN
// this is only needed (afaict) for ResultTransformer processing...	WITHOUT_CLASSIFICATION	0.9981088730903077	WITHOUT_CLASSIFICATION	0.0018911269096922982	DESIGN
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9995450257512539	WITHOUT_CLASSIFICATION	4.549742487460667E-4	DESIGN
// build an array with indices equal to the total number // of actual returns in the result Hibernate will return // for this query (scalars + non-scalars)	WITHOUT_CLASSIFICATION	0.9995303616532585	WITHOUT_CLASSIFICATION	4.696383467415015E-4	DESIGN
// replace {....} with corresponding column aliases	WITHOUT_CLASSIFICATION	0.9990884206130983	WITHOUT_CLASSIFICATION	9.115793869017544E-4	DESIGN
// No additional open braces found in the string, append the // rest of the string in its entirty and quit this loop	WITHOUT_CLASSIFICATION	0.9998293036602923	WITHOUT_CLASSIFICATION	1.7069633970775026E-4	DESIGN
// apend everything up until the next encountered open brace	WITHOUT_CLASSIFICATION	0.9999070567126851	WITHOUT_CLASSIFICATION	9.294328731495379E-5	DESIGN
// it is a simple table alias {foo}	WITHOUT_CLASSIFICATION	0.9991914982981283	WITHOUT_CLASSIFICATION	8.085017018716473E-4	DESIGN
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9888060436576882	WITHOUT_CLASSIFICATION	0.011193956342311913	DESIGN
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9888060436576882	WITHOUT_CLASSIFICATION	0.011193956342311913	DESIGN
// The current alias is referencing the collection to be eagerly fetched	WITHOUT_CLASSIFICATION	0.9963825100621485	WITHOUT_CLASSIFICATION	0.0036174899378515033	DESIGN
// it is a property reference {foo.bar}	WITHOUT_CLASSIFICATION	0.999606465749164	WITHOUT_CLASSIFICATION	3.935342508359255E-4	DESIGN
// Possibly handle :something parameters for the query ?	WITHOUT_CLASSIFICATION	0.9978912330841222	WITHOUT_CLASSIFICATION	0.0021087669158778564	DESIGN
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.999404854339682	WITHOUT_CLASSIFICATION	5.951456603180652E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.999758407950086	WITHOUT_CLASSIFICATION	2.4159204991409242E-4	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.9982660483085283	WITHOUT_CLASSIFICATION	0.0017339516914716315	DESIGN
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9982660483085283	WITHOUT_CLASSIFICATION	0.0017339516914716315	DESIGN
//	WITHOUT_CLASSIFICATION	0.999758407950086	WITHOUT_CLASSIFICATION	2.4159204991409242E-4	DESIGN
// Now, process the returns	WITHOUT_CLASSIFICATION	0.9999891093425963	WITHOUT_CLASSIFICATION	1.0890657403725196E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.999758407950086	WITHOUT_CLASSIFICATION	2.4159204991409242E-4	DESIGN
// already been processed...	WITHOUT_CLASSIFICATION	0.9999790747608134	WITHOUT_CLASSIFICATION	2.0925239186650595E-5	DESIGN
// already been processed...	WITHOUT_CLASSIFICATION	0.9999790747608134	WITHOUT_CLASSIFICATION	2.0925239186650595E-5	DESIGN
// Make sure the owner alias is known...	WITHOUT_CLASSIFICATION	0.9998447615052427	WITHOUT_CLASSIFICATION	1.5523849475732412E-4	DESIGN
// first, break down the returns into maps keyed by alias // so that role returns can be more easily resolved to their owners	WITHOUT_CLASSIFICATION	0.9261273187173994	WITHOUT_CLASSIFICATION	0.0738726812826006	DESIGN
//	WITHOUT_CLASSIFICATION	0.999758407950086	WITHOUT_CLASSIFICATION	2.4159204991409242E-4	DESIGN
// If this return's alias has not been processed yet, do so b4 further processing of this return	WITHOUT_CLASSIFICATION	0.9988302601171777	WITHOUT_CLASSIFICATION	0.0011697398828223236	DESIGN
//	WITHOUT_CLASSIFICATION	0.999758407950086	WITHOUT_CLASSIFICATION	2.4159204991409242E-4	DESIGN
// for merging of versioned entities, we consider the version having // been changed only when: // 1) the two version values are different; //      *AND* // 2) The target actually represents database state! // // This second condition is a special case which allows // an entity to be merged during the same transaction // (though during a seperate operation) in which it was // originally persisted/saved	WITHOUT_CLASSIFICATION	0.9999139311602174	WITHOUT_CLASSIFICATION	8.606883978256773E-5	DESIGN
// this is the second pass through on a merge op, so here we limit the // replacement to associations types (value types were already replaced // during the first pass)	WITHOUT_CLASSIFICATION	0.9879035153998468	WITHOUT_CLASSIFICATION	0.012096484600153177	DESIGN
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.9982660483085283	WITHOUT_CLASSIFICATION	0.0017339516914716315	DESIGN
// cascade-save to collections AFTER the collection owner was saved	WITHOUT_CLASSIFICATION	0.9990313463587475	WITHOUT_CLASSIFICATION	9.686536412525881E-4	DESIGN
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.999027933877939	WITHOUT_CLASSIFICATION	9.720661220609058E-4	DESIGN
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999300946752182	WITHOUT_CLASSIFICATION	6.990532478181727E-5	DESIGN
// currently only the Hibernate-supplied DbTimestampType is supported here	WITHOUT_CLASSIFICATION	0.9995150070821543	WITHOUT_CLASSIFICATION	4.849929178456357E-4	DESIGN
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9939105760115536	WITHOUT_CLASSIFICATION	0.00608942398844645	DESIGN
// make a new one	WITHOUT_CLASSIFICATION	0.9966607509756666	WITHOUT_CLASSIFICATION	0.003339249024333381	DESIGN
// not so sure this is even valid subtree.  but if it was, it'd // represent two unrelated table references...	WITHOUT_CLASSIFICATION	0.9998039433673082	WITHOUT_CLASSIFICATION	1.96056632691935E-4	DESIGN
// (NOT (GT a b) ) => (LE a b)	WITHOUT_CLASSIFICATION	0.9999637173762665	WITHOUT_CLASSIFICATION	3.628262373349378E-5	DESIGN
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9943483618309333	WITHOUT_CLASSIFICATION	0.005651638169066694	DESIGN
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9986484166638245	WITHOUT_CLASSIFICATION	0.001351583336175472	DESIGN
//sqlResultTypes = selectClause.getSqlResultTypes();	WITHOUT_CLASSIFICATION	0.9993152066625991	WITHOUT_CLASSIFICATION	6.847933374010019E-4	DESIGN
//by default	WITHOUT_CLASSIFICATION	0.998268853853139	WITHOUT_CLASSIFICATION	0.0017311461468610184	DESIGN
// This is now handled earlier in this method.	WITHOUT_CLASSIFICATION	0.9751978528092056	WITHOUT_CLASSIFICATION	0.0248021471907944	DESIGN
// -- Loader implementation --	WITHOUT_CLASSIFICATION	0.9999657715429681	WITHOUT_CLASSIFICATION	3.4228457031965324E-5	DESIGN
// -- Loader overrides --	WITHOUT_CLASSIFICATION	0.9999816162702874	WITHOUT_CLASSIFICATION	1.8383729712596066E-5	DESIGN
// (NOT (IS_NULL a b) ) => (IS_NOT_NULL a b)	WITHOUT_CLASSIFICATION	0.9986957044933913	WITHOUT_CLASSIFICATION	0.001304295506608697	DESIGN
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.9991671381424048	WITHOUT_CLASSIFICATION	8.328618575951792E-4	DESIGN
// meant to handle dynamic instantiation queries...	WITHOUT_CLASSIFICATION	0.9983466360108373	WITHOUT_CLASSIFICATION	0.0016533639891626489	DESIGN
// --- Query translator methods ---	WITHOUT_CLASSIFICATION	0.9986962357578208	WITHOUT_CLASSIFICATION	0.0013037642421791084	DESIGN
// -- Implementation private methods --	WITHOUT_CLASSIFICATION	0.9989948687336248	WITHOUT_CLASSIFICATION	0.0010051312663752138	DESIGN
//deduplicate unique constraints sharing the same columns //this is needed by Hibernate Annotations since it creates automagically // unique constraints for the user	WITHOUT_CLASSIFICATION	0.9998579347055367	WITHOUT_CLASSIFICATION	1.4206529446329904E-4	DESIGN
// Try to find out the name of the primary key to create it as identity if the IdentityGenerator is used	WITHOUT_CLASSIFICATION	0.9995082605185455	WITHOUT_CLASSIFICATION	4.917394814545275E-4	DESIGN
// to support dialects that have their own identity data type	WITHOUT_CLASSIFICATION	0.9261792011527074	WITHOUT_CLASSIFICATION	0.07382079884729266	DESIGN
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999269631093948	WITHOUT_CLASSIFICATION	7.30368906052254E-5	DESIGN
//used also for generation of FK names!	WITHOUT_CLASSIFICATION	0.9948401110955755	WITHOUT_CLASSIFICATION	0.005159888904424557	DESIGN
//usually useless	WITHOUT_CLASSIFICATION	0.9982660483085283	WITHOUT_CLASSIFICATION	0.0017339516914716315	DESIGN
// added this caching as I noticed that getType() is being called multiple times...	WITHOUT_CLASSIFICATION	0.9981287287617037	WITHOUT_CLASSIFICATION	0.0018712712382962207	DESIGN
//do not add unique constraint on DB not supporting unique and nullable columns	WITHOUT_CLASSIFICATION	0.9967115128987897	WITHOUT_CLASSIFICATION	0.0032884871012102265	DESIGN
//for backward compatibility, disable this:	WITHOUT_CLASSIFICATION	0.9962001566363022	WITHOUT_CLASSIFICATION	0.00379984336369779	DESIGN
//may be final //may be final //may be final	WITHOUT_CLASSIFICATION	0.9914919963791049	WITHOUT_CLASSIFICATION	0.008508003620895157	DESIGN
//may be final	WITHOUT_CLASSIFICATION	0.9974116440920435	WITHOUT_CLASSIFICATION	0.0025883559079564688	DESIGN
// may be final	WITHOUT_CLASSIFICATION	0.9998518661776654	WITHOUT_CLASSIFICATION	1.4813382233453797E-4	DESIGN
// Custom SQL	WITHOUT_CLASSIFICATION	0.9997952314504504	WITHOUT_CLASSIFICATION	2.047685495496311E-4	DESIGN
//Primary key constraint	WITHOUT_CLASSIFICATION	0.9998650957541371	WITHOUT_CLASSIFICATION	1.349042458629734E-4	DESIGN
// the root of the incoming property path matched one // of the embedded composite identifier properties	WITHOUT_CLASSIFICATION	0.9997940517976498	WITHOUT_CLASSIFICATION	2.0594820235014645E-4	DESIGN
// ignore it...	WITHOUT_CLASSIFICATION	0.9996791466869676	WITHOUT_CLASSIFICATION	3.208533130323926E-4	DESIGN
//flat recursive algorithm	WITHOUT_CLASSIFICATION	0.9996495996499883	WITHOUT_CLASSIFICATION	3.504003500117243E-4	DESIGN
//an identifier mapper => getKey will be included in the getNonDuplicatedPropertyIterator() //and checked later, so it needs to be excluded	WITHOUT_CLASSIFICATION	0.9933907992381732	WITHOUT_CLASSIFICATION	0.006609200761826831	DESIGN
//if the hibernate-mapping did not specify a schema/catalog, use the defaults //specified by properties - but note that if the schema/catalog were specified //in hibernate-mapping, or as params, they will already be initialized and //will override the values set here (they are in identifierGeneratorProperties)	WITHOUT_CLASSIFICATION	0.9871757970728857	WITHOUT_CLASSIFICATION	0.012824202927114425	DESIGN
//pass the entity-name, if not a collection-id	WITHOUT_CLASSIFICATION	0.9970748702078037	WITHOUT_CLASSIFICATION	0.0029251297921961683	DESIGN
// Custom SQL	WITHOUT_CLASSIFICATION	0.9997952314504504	WITHOUT_CLASSIFICATION	2.047685495496311E-4	DESIGN
//Primary key constraint	WITHOUT_CLASSIFICATION	0.9998650957541371	WITHOUT_CLASSIFICATION	1.349042458629734E-4	DESIGN
//pass the column name (a generated id almost always has a single column)	WITHOUT_CLASSIFICATION	0.9952175832937495	WITHOUT_CLASSIFICATION	0.004782416706250534	DESIGN
//needed to satisfy KeyValue	WITHOUT_CLASSIFICATION	0.9997492759042529	WITHOUT_CLASSIFICATION	2.507240957470467E-4	DESIGN
// empty means no scoping	WITHOUT_CLASSIFICATION	0.9999757314532108	WITHOUT_CLASSIFICATION	2.4268546789138465E-5	DESIGN
// index should be last column listed	WITHOUT_CLASSIFICATION	0.9969296492747409	WITHOUT_CLASSIFICATION	0.003070350725259101	DESIGN
//if it is a formula index, use the element columns in the PK	WITHOUT_CLASSIFICATION	0.9872460828184743	WITHOUT_CLASSIFICATION	0.012753917181525786	DESIGN
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns	WITHOUT_CLASSIFICATION	0.9957221707350924	WITHOUT_CLASSIFICATION	0.00427782926490761	DESIGN
/*ArrayList list = new ArrayList();	WITHOUT_CLASSIFICATION	0.9997409481263071	WITHOUT_CLASSIFICATION	2.5905187369287645E-4	DESIGN
// }	WITHOUT_CLASSIFICATION	0.9996577766352732	WITHOUT_CLASSIFICATION	3.422233647268053E-4	DESIGN
// no foreign key element of for a one-to-many	WITHOUT_CLASSIFICATION	0.9989179425566702	WITHOUT_CLASSIFICATION	0.0010820574433297642	DESIGN
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9882860528792913	WITHOUT_CLASSIFICATION	0.011713947120708675	DESIGN
// the case of a foreign key to something other than the pk is handled in createPropertyRefConstraints	WITHOUT_CLASSIFICATION	0.998838077620978	WITHOUT_CLASSIFICATION	0.0011619223790220988	DESIGN
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9882860528792913	WITHOUT_CLASSIFICATION	0.011713947120708675	DESIGN
// if the property mapping consists of all formulas,  // make it non-updateable	WITHOUT_CLASSIFICATION	0.9977469532440105	WITHOUT_CLASSIFICATION	0.0022530467559894285	DESIGN
//columnUpdateability.length==0 ||	WITHOUT_CLASSIFICATION	0.9935807239701623	WITHOUT_CLASSIFICATION	0.006419276029837806	DESIGN
// if the property mapping consists of all formulas,  // make it insertable	WITHOUT_CLASSIFICATION	0.9977469532440105	WITHOUT_CLASSIFICATION	0.0022530467559894285	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9964098318673172	WITHOUT_CLASSIFICATION	0.00359016813268268	DESIGN
// expected type is intrinsic here...	WITHOUT_CLASSIFICATION	0.9969266365199096	WITHOUT_CLASSIFICATION	0.003073363480090289	DESIGN
//}	WITHOUT_CLASSIFICATION	0.9981766262741515	WITHOUT_CLASSIFICATION	0.0018233737258484155	DESIGN
//}	WITHOUT_CLASSIFICATION	0.9981766262741515	WITHOUT_CLASSIFICATION	0.0018233737258484155	DESIGN
//return memberPersister.getPropertyType(propertyName);	WITHOUT_CLASSIFICATION	0.9948388328441874	WITHOUT_CLASSIFICATION	0.005161167155812615	DESIGN
//return memberPersister.toColumns(alias, propertyName);	WITHOUT_CLASSIFICATION	0.9949291620884966	WITHOUT_CLASSIFICATION	0.005070837911503412	DESIGN
//return memberPersister.getType();	WITHOUT_CLASSIFICATION	0.9948388328441874	WITHOUT_CLASSIFICATION	0.005161167155812615	DESIGN
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9998532566300714	WITHOUT_CLASSIFICATION	1.4674336992852598E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.999758407950086	WITHOUT_CLASSIFICATION	2.4159204991409242E-4	DESIGN
//instanceof AssociationType;	WITHOUT_CLASSIFICATION	0.9998404554700752	WITHOUT_CLASSIFICATION	1.595445299249041E-4	DESIGN
// we need to determine the best way to know that two joinables // represent a single many-to-many...	WITHOUT_CLASSIFICATION	0.9916599103809692	WITHOUT_CLASSIFICATION	0.008340089619030717	DESIGN
//strip leading ','	WITHOUT_CLASSIFICATION	0.9982695571649138	WITHOUT_CLASSIFICATION	0.0017304428350861116	DESIGN
//public boolean isSubselectLoadable();	WITHOUT_CLASSIFICATION	0.9975198529677964	WITHOUT_CLASSIFICATION	0.0024801470322034966	DESIGN
// KEY	WITHOUT_CLASSIFICATION	0.999758407950086	WITHOUT_CLASSIFICATION	2.4159204991409242E-4	DESIGN
//columns	WITHOUT_CLASSIFICATION	0.997954794544069	WITHOUT_CLASSIFICATION	0.002045205455931084	DESIGN
//SQL statements	WITHOUT_CLASSIFICATION	0.9982660483085283	WITHOUT_CLASSIFICATION	0.0017339516914716315	DESIGN
//extra information about the element type	WITHOUT_CLASSIFICATION	0.978667912080829	WITHOUT_CLASSIFICATION	0.021332087919170892	DESIGN
//types	WITHOUT_CLASSIFICATION	0.997954794544069	WITHOUT_CLASSIFICATION	0.002045205455931084	DESIGN
// custom sql	WITHOUT_CLASSIFICATION	0.999819364874919	WITHOUT_CLASSIFICATION	1.80635125081071E-4	DESIGN
//private final String unquotedIdentifierColumnName;	WITHOUT_CLASSIFICATION	0.9875139735273053	WITHOUT_CLASSIFICATION	0.012486026472694672	DESIGN
// dynamic filters specifically for many-to-many inside the collection	WITHOUT_CLASSIFICATION	0.9944926658612373	WITHOUT_CLASSIFICATION	0.005507334138762676	DESIGN
// dynamic filters for the collection	WITHOUT_CLASSIFICATION	0.9972744607947887	WITHOUT_CLASSIFICATION	0.00272553920521131	DESIGN
// NativeSQL: collect key column and auto-aliases	WITHOUT_CLASSIFICATION	0.9993875609889351	WITHOUT_CLASSIFICATION	6.124390110649623E-4	DESIGN
//unquotedKeyColumnNames = StringHelper.unQuote(keyColumnAliases);	WITHOUT_CLASSIFICATION	0.9993152066625991	WITHOUT_CLASSIFICATION	6.847933374010019E-4	DESIGN
//ELEMENT	WITHOUT_CLASSIFICATION	0.997954794544069	WITHOUT_CLASSIFICATION	0.002045205455931084	DESIGN
// NativeSQL: collect element column and auto-aliases	WITHOUT_CLASSIFICATION	0.9992968652635899	WITHOUT_CLASSIFICATION	7.031347364101164E-4	DESIGN
// INDEX AND ROW SELECT	WITHOUT_CLASSIFICATION	0.9999811849861537	WITHOUT_CLASSIFICATION	1.8815013846229537E-5	DESIGN
// NativeSQL: collect index column and auto-aliases	WITHOUT_CLASSIFICATION	0.999400799784768	WITHOUT_CLASSIFICATION	5.992002152320261E-4	DESIGN
//unquotedIdentifierColumnName = identifierColumnAlias;	WITHOUT_CLASSIFICATION	0.9993152066625991	WITHOUT_CLASSIFICATION	6.847933374010019E-4	DESIGN
//unquotedIdentifierColumnName = null;	WITHOUT_CLASSIFICATION	0.9993224391721063	WITHOUT_CLASSIFICATION	6.775608278936322E-4	DESIGN
//GENERATE THE SQL:	WITHOUT_CLASSIFICATION	0.9982669484127596	WITHOUT_CLASSIFICATION	0.0017330515872404154	DESIGN
// for non-arrays, we don't need to know the element class //elementType.returnedClass();	WITHOUT_CLASSIFICATION	0.9966872483180765	WITHOUT_CLASSIFICATION	0.003312751681923492	DESIGN
//not all classpersisters implement PropertyMapping!	WITHOUT_CLASSIFICATION	0.9723542439501077	WITHOUT_CLASSIFICATION	0.02764575604989232	DESIGN
// Handle any filters applied to this collection	WITHOUT_CLASSIFICATION	0.9529399203233503	WITHOUT_CLASSIFICATION	0.04706007967664974	DESIGN
// Handle any filters applied to this collection for many-to-many	WITHOUT_CLASSIFICATION	0.909182875392881	WITHOUT_CLASSIFICATION	0.09081712460711895	DESIGN
//if there is a user-specified loader, return that //TODO: filters!?	WITHOUT_CLASSIFICATION	0.9578431601079754	WITHOUT_CLASSIFICATION	0.04215683989202463	DESIGN
// Take care of any entities that might have // been evicted!	WITHOUT_CLASSIFICATION	0.998326273776903	WITHOUT_CLASSIFICATION	0.0016737262230969582	DESIGN
//strip leading ','	WITHOUT_CLASSIFICATION	0.9982695571649138	WITHOUT_CLASSIFICATION	0.0017304428350861116	DESIGN
// Run a subquery loader	WITHOUT_CLASSIFICATION	0.9999648429097144	WITHOUT_CLASSIFICATION	3.515709028560295E-5	DESIGN
//needed by arrays	WITHOUT_CLASSIFICATION	0.9979543895892409	WITHOUT_CLASSIFICATION	0.002045610410759171	DESIGN
//TODO: something with formulas...	WITHOUT_CLASSIFICATION	0.983258994697155	WITHOUT_CLASSIFICATION	0.01674100530284499	DESIGN
//an assertion	WITHOUT_CLASSIFICATION	0.998348658718662	WITHOUT_CLASSIFICATION	0.001651341281338106	DESIGN
// Remove all the old entries	WITHOUT_CLASSIFICATION	0.9999780070873733	WITHOUT_CLASSIFICATION	2.1992912626822474E-5	DESIGN
//create all the new entries	WITHOUT_CLASSIFICATION	0.9999567419323586	WITHOUT_CLASSIFICATION	4.3258067641296276E-5	DESIGN
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9998532566300714	WITHOUT_CLASSIFICATION	1.4674336992852598E-4	DESIGN
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9998532566300714	WITHOUT_CLASSIFICATION	1.4674336992852598E-4	DESIGN
//delete all the deleted entries	WITHOUT_CLASSIFICATION	0.9980764044066784	WITHOUT_CLASSIFICATION	0.0019235955933215641	DESIGN
//insert all the new entries	WITHOUT_CLASSIFICATION	0.9999567419323586	WITHOUT_CLASSIFICATION	4.3258067641296276E-5	DESIGN
//==elementType ??	WITHOUT_CLASSIFICATION	0.9975859780443175	WITHOUT_CLASSIFICATION	0.0024140219556826195	DESIGN
//update all the modified entries	WITHOUT_CLASSIFICATION	0.9994016070000027	WITHOUT_CLASSIFICATION	5.983929999972427E-4	DESIGN
//identifier collections not supported for 1-to-many	WITHOUT_CLASSIFICATION	0.9963868674587691	WITHOUT_CLASSIFICATION	0.0036131325412308932	DESIGN
// update removed rows fks to null	WITHOUT_CLASSIFICATION	0.9987250247097408	WITHOUT_CLASSIFICATION	0.0012749752902592973	DESIGN
// will still be issued when it used to be null	WITHOUT_CLASSIFICATION	0.9962442771591833	WITHOUT_CLASSIFICATION	0.0037557228408167686	DESIGN
// now update all changed or added rows fks	WITHOUT_CLASSIFICATION	0.9999985269624626	WITHOUT_CLASSIFICATION	1.4730375373768812E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.999758407950086	WITHOUT_CLASSIFICATION	2.4159204991409242E-4	DESIGN
//use suffix for the entity columns	WITHOUT_CLASSIFICATION	0.996026150732617	WITHOUT_CLASSIFICATION	0.003973849267382946	DESIGN
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9997717570701363	WITHOUT_CLASSIFICATION	2.2824292986364588E-4	DESIGN
//private final String rootTableName;	WITHOUT_CLASSIFICATION	0.9875139735273053	WITHOUT_CLASSIFICATION	0.012486026472694672	DESIGN
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9982660483085283	WITHOUT_CLASSIFICATION	0.0017339516914716315	DESIGN
//Custom SQL	WITHOUT_CLASSIFICATION	0.9982718192243832	WITHOUT_CLASSIFICATION	0.0017281807756167906	DESIGN
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9997717570701363	WITHOUT_CLASSIFICATION	2.2824292986364588E-4	DESIGN
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999150610446392	WITHOUT_CLASSIFICATION	8.49389553608308E-5	DESIGN
// This could also just be true all the time...	WITHOUT_CLASSIFICATION	0.9996988368711328	WITHOUT_CLASSIFICATION	3.011631288671964E-4	DESIGN
//chop the last union (all)	WITHOUT_CLASSIFICATION	0.9999190138740705	WITHOUT_CLASSIFICATION	8.098612592959824E-5	DESIGN
//TODO: check this....	WITHOUT_CLASSIFICATION	0.9993976241958328	WITHOUT_CLASSIFICATION	6.023758041671869E-4	DESIGN
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9982660483085283	WITHOUT_CLASSIFICATION	0.0017339516914716315	DESIGN
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9981388281057776	WITHOUT_CLASSIFICATION	0.001861171894222378	DESIGN
// the closure of all properties in the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9988453644612648	WITHOUT_CLASSIFICATION	0.0011546355387351147	DESIGN
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9973984222941744	WITHOUT_CLASSIFICATION	0.0026015777058255333	DESIGN
// subclass discrimination works by assigning particular // values to certain combinations of null primary key // values in the outer join using an SQL CASE	WITHOUT_CLASSIFICATION	0.9999300586562626	WITHOUT_CLASSIFICATION	6.994134373740535E-5	DESIGN
//MULTITABLES	WITHOUT_CLASSIFICATION	0.9982660483085283	WITHOUT_CLASSIFICATION	0.0017339516914716315	DESIGN
// Custom sql	WITHOUT_CLASSIFICATION	0.9997952314504504	WITHOUT_CLASSIFICATION	2.047685495496311E-4	DESIGN
// subclass closure properties	WITHOUT_CLASSIFICATION	0.9999877594237161	WITHOUT_CLASSIFICATION	1.2240576283908072E-5	DESIGN
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9997952314504504	WITHOUT_CLASSIFICATION	2.047685495496311E-4	DESIGN
//( (Column) model.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9942892606861524	WITHOUT_CLASSIFICATION	0.005710739313847541	DESIGN
//( (Column) sc.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9942892606861524	WITHOUT_CLASSIFICATION	0.005710739313847541	DESIGN
// don't need subclass tables, because they can't appear in conditions	WITHOUT_CLASSIFICATION	0.990575262784477	WITHOUT_CLASSIFICATION	0.009424737215523022	DESIGN
// special case where we need to force incloude all subclass joins	WITHOUT_CLASSIFICATION	0.9974687260002768	WITHOUT_CLASSIFICATION	0.0025312739997232513	DESIGN
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9997717570701363	WITHOUT_CLASSIFICATION	2.2824292986364588E-4	DESIGN
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9981388281057776	WITHOUT_CLASSIFICATION	0.001861171894222378	DESIGN
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9973984222941744	WITHOUT_CLASSIFICATION	0.0026015777058255333	DESIGN
//get em on the second pass!	WITHOUT_CLASSIFICATION	0.999959417285619	WITHOUT_CLASSIFICATION	4.058271438102017E-5	DESIGN
// now look up the object we are really interested in! // (this lets us correctly handle proxies and multi-row // or multi-column queries)	WITHOUT_CLASSIFICATION	0.9997365182881722	WITHOUT_CLASSIFICATION	2.634817118277229E-4	DESIGN
// discriminator column	WITHOUT_CLASSIFICATION	0.9999853504225188	WITHOUT_CLASSIFICATION	1.4649577481219172E-5	DESIGN
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9982660483085283	WITHOUT_CLASSIFICATION	0.0017339516914716315	DESIGN
//private final Map propertyTableNumbersByName = new HashMap();	WITHOUT_CLASSIFICATION	0.9992106067529025	WITHOUT_CLASSIFICATION	7.893932470975553E-4	DESIGN
// CLASS + TABLE	WITHOUT_CLASSIFICATION	0.9999147286650327	WITHOUT_CLASSIFICATION	8.52713349672454E-5	DESIGN
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9997952314504504	WITHOUT_CLASSIFICATION	2.047685495496311E-4	DESIGN
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9997952314504504	WITHOUT_CLASSIFICATION	2.047685495496311E-4	DESIGN
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9997952314504504	WITHOUT_CLASSIFICATION	2.047685495496311E-4	DESIGN
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999150610446392	WITHOUT_CLASSIFICATION	8.49389553608308E-5	DESIGN
// JOINS	WITHOUT_CLASSIFICATION	0.999758407950086	WITHOUT_CLASSIFICATION	2.4159204991409242E-4	DESIGN
//propertyTableNumbersByName.put( prop.getName(), join );	WITHOUT_CLASSIFICATION	0.9942892606861524	WITHOUT_CLASSIFICATION	0.005710739313847541	DESIGN
//Access cached SQL	WITHOUT_CLASSIFICATION	0.9982769116354275	WITHOUT_CLASSIFICATION	0.0017230883645724606	DESIGN
//figure out which tables need to be fetched	WITHOUT_CLASSIFICATION	0.9884432772619097	WITHOUT_CLASSIFICATION	0.011556722738090266	DESIGN
//figure out which columns are needed	WITHOUT_CLASSIFICATION	0.99855569045959	WITHOUT_CLASSIFICATION	0.0014443095404099249	DESIGN
//figure out which formulas are needed	WITHOUT_CLASSIFICATION	0.99855569045959	WITHOUT_CLASSIFICATION	0.0014443095404099249	DESIGN
//render the SQL	WITHOUT_CLASSIFICATION	0.9993503857386671	WITHOUT_CLASSIFICATION	6.496142613328578E-4	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9964098318673172	WITHOUT_CLASSIFICATION	0.00359016813268268	DESIGN
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9953419840417179	WITHOUT_CLASSIFICATION	0.00465801595828207	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993232207011862	WITHOUT_CLASSIFICATION	6.767792988138589E-4	DESIGN
// The optional SQL string defined in the where attribute	WITHOUT_CLASSIFICATION	0.999812832416117	WITHOUT_CLASSIFICATION	1.8716758388310074E-4	DESIGN
//information about lazy properties of this class	WITHOUT_CLASSIFICATION	0.9879082037829877	WITHOUT_CLASSIFICATION	0.012091796217012373	DESIGN
//information about all properties in class hierarchy	WITHOUT_CLASSIFICATION	0.990510439517694	WITHOUT_CLASSIFICATION	0.009489560482306012	DESIGN
//information about all columns/formulas in class hierarchy	WITHOUT_CLASSIFICATION	0.9883520641393169	WITHOUT_CLASSIFICATION	0.011647935860683205	DESIGN
// dynamic filters attached to the class-level	WITHOUT_CLASSIFICATION	0.999613207802682	WITHOUT_CLASSIFICATION	3.8679219731792345E-4	DESIGN
// SQL strings	WITHOUT_CLASSIFICATION	0.9998270550372678	WITHOUT_CLASSIFICATION	1.7294496273230568E-4	DESIGN
// for objects that came in via update()	WITHOUT_CLASSIFICATION	0.9975323633305996	WITHOUT_CLASSIFICATION	0.0024676366694004167	DESIGN
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9997952314504504	WITHOUT_CLASSIFICATION	2.047685495496311E-4	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993232207011862	WITHOUT_CLASSIFICATION	6.767792988138589E-4	DESIGN
// IDENTIFIER	WITHOUT_CLASSIFICATION	0.9997952314504504	WITHOUT_CLASSIFICATION	2.047685495496311E-4	DESIGN
// VERSION	WITHOUT_CLASSIFICATION	0.999758407950086	WITHOUT_CLASSIFICATION	2.4159204991409242E-4	DESIGN
//WHERE STRING	WITHOUT_CLASSIFICATION	0.9982660483085283	WITHOUT_CLASSIFICATION	0.0017339516914716315	DESIGN
// SUBCLASS PROPERTY CLOSURE	WITHOUT_CLASSIFICATION	0.9999811849861537	WITHOUT_CLASSIFICATION	1.8815013846229537E-5	DESIGN
//before add :-)	WITHOUT_CLASSIFICATION	0.9992853685596234	WITHOUT_CLASSIFICATION	7.146314403765765E-4	DESIGN
// Handle any filters applied to the class level	WITHOUT_CLASSIFICATION	0.9991178823453106	WITHOUT_CLASSIFICATION	8.821176546894463E-4	DESIGN
// only one-to-one is lazy fetched	WITHOUT_CLASSIFICATION	0.9995392422567784	WITHOUT_CLASSIFICATION	4.6075774322161306E-4	DESIGN
//note early exit here:	WITHOUT_CLASSIFICATION	0.9998524312076029	WITHOUT_CLASSIFICATION	1.475687923970465E-4	DESIGN
// object have been loaded with setReadOnly(true); HHH-2236	WITHOUT_CLASSIFICATION	0.9986701994798576	WITHOUT_CLASSIFICATION	0.001329800520142417	DESIGN
// NOTE: this assumes something about how propertySelectFragment is implemented by the subclass!	WITHOUT_CLASSIFICATION	0.9999627357053796	WITHOUT_CLASSIFICATION	3.7264294620356866E-5	DESIGN
//strip leading ", "	WITHOUT_CLASSIFICATION	0.9986879607270978	WITHOUT_CLASSIFICATION	0.0013120392729023128	DESIGN
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9976199710098695	WITHOUT_CLASSIFICATION	0.0023800289901303763	DESIGN
//otherwise return the "hydrated" state (ie. associations are not resolved)	WITHOUT_CLASSIFICATION	0.9989293670821975	WITHOUT_CLASSIFICATION	0.0010706329178024924	DESIGN
//null owner ok??	WITHOUT_CLASSIFICATION	0.9989978351268249	WITHOUT_CLASSIFICATION	0.0010021648731749963	DESIGN
// null sql means that the only lazy properties // are shared PK one-to-one associations which are // handled differently in the Type#nullSafeGet code...	WITHOUT_CLASSIFICATION	0.9952050522529349	WITHOUT_CLASSIFICATION	0.004794947747065182	DESIGN
// Create a new FROM node for the referenced class.	WITHOUT_CLASSIFICATION	0.9995306087328993	WITHOUT_CLASSIFICATION	4.6939126710057093E-4	DESIGN
// the difficulty here is exactly what do we update in order to // force the version to be incremented in the db...	WITHOUT_CLASSIFICATION	0.9867679683949363	WITHOUT_CLASSIFICATION	0.013232031605063737	DESIGN
// performance op to avoid the array search	WITHOUT_CLASSIFICATION	0.9996838215000221	WITHOUT_CLASSIFICATION	3.161784999778788E-4	DESIGN
// properly handle property-ref-based associations	WITHOUT_CLASSIFICATION	0.9991256938154586	WITHOUT_CLASSIFICATION	8.743061845415183E-4	DESIGN
//Enable for HHH-440, which we don't like:	WITHOUT_CLASSIFICATION	0.9646480371551621	WITHOUT_CLASSIFICATION	0.03535196284483787	DESIGN
// ALIASES	WITHOUT_CLASSIFICATION	0.999758407950086	WITHOUT_CLASSIFICATION	2.4159204991409242E-4	DESIGN
// aliases named identifier ( alias.idname )	WITHOUT_CLASSIFICATION	0.9992213538326421	WITHOUT_CLASSIFICATION	7.786461673578956E-4	DESIGN
// aliases for composite-id's	WITHOUT_CLASSIFICATION	0.9999619437888072	WITHOUT_CLASSIFICATION	3.8056211192791794E-5	DESIGN
// Fetch embedded identifiers propertynames from the "virtual" identifier component	WITHOUT_CLASSIFICATION	0.9997066321793507	WITHOUT_CLASSIFICATION	2.933678206492457E-4	DESIGN
// embedded composite ids ( alias.idname1, alias.idname2 )	WITHOUT_CLASSIFICATION	0.9985783628716611	WITHOUT_CLASSIFICATION	0.0014216371283388312	DESIGN
// TODO: skip formulas?	WITHOUT_CLASSIFICATION	0.9820267114886726	WITHOUT_CLASSIFICATION	0.01797328851132738	DESIGN
//don't need filters for the static loaders	WITHOUT_CLASSIFICATION	0.9789376101848261	WITHOUT_CLASSIFICATION	0.02106238981517387	DESIGN
//do two passes, for collection property-ref!	WITHOUT_CLASSIFICATION	0.9689278316010175	WITHOUT_CLASSIFICATION	0.03107216839898242	DESIGN
// select the correct row by either pk or rowid	WITHOUT_CLASSIFICATION	0.9996978686590106	WITHOUT_CLASSIFICATION	3.021313409894108E-4	DESIGN
//TODO: eventually, rowIdName[j]	WITHOUT_CLASSIFICATION	0.9531972554878818	WITHOUT_CLASSIFICATION	0.04680274451211819	DESIGN
// this is a property of the table, which we are updating	WITHOUT_CLASSIFICATION	0.9972126223545528	WITHOUT_CLASSIFICATION	0.002787377645447277	DESIGN
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.999731111235949	WITHOUT_CLASSIFICATION	2.688887640509238E-4	DESIGN
// we are using "all" or "dirty" property-based optimistic locking	WITHOUT_CLASSIFICATION	0.999504585533281	WITHOUT_CLASSIFICATION	4.954144667189033E-4	DESIGN
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9990288743327916	WITHOUT_CLASSIFICATION	9.711256672083848E-4	DESIGN
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9977347556783971	WITHOUT_CLASSIFICATION	0.002265244321602974	DESIGN
// add normal properties	WITHOUT_CLASSIFICATION	0.9999949721002918	WITHOUT_CLASSIFICATION	5.027899708194302E-6	DESIGN
// add the discriminator	WITHOUT_CLASSIFICATION	0.9999971031913466	WITHOUT_CLASSIFICATION	2.8968086533711363E-6	DESIGN
// more specifically : "? [op] datetime" //      1) if the operator is MINUS, the param needs to be of //          some datetime type //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.829143287772425	WITHOUT_CLASSIFICATION	0.17085671222757506	DESIGN
// add normal properties	WITHOUT_CLASSIFICATION	0.9999949721002918	WITHOUT_CLASSIFICATION	5.027899708194302E-6	DESIGN
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9977347556783971	WITHOUT_CLASSIFICATION	0.002265244321602974	DESIGN
// add the discriminator	WITHOUT_CLASSIFICATION	0.9999971031913466	WITHOUT_CLASSIFICATION	2.8968086533711363E-6	DESIGN
// add the primary key	WITHOUT_CLASSIFICATION	0.9999958422906983	WITHOUT_CLASSIFICATION	4.157709301776813E-6	DESIGN
// delegate already handles PK columns	WITHOUT_CLASSIFICATION	0.9998535114733889	WITHOUT_CLASSIFICATION	1.4648852661122927E-4	DESIGN
// we can't batch joined inserts, *especially* not if it is an identity insert; // nor can we batch statements where the expectation is based on an output param	WITHOUT_CLASSIFICATION	0.996589362309898	WITHOUT_CLASSIFICATION	0.003410637690101851	DESIGN
// Render the SQL query	WITHOUT_CLASSIFICATION	0.9999933769945378	WITHOUT_CLASSIFICATION	6.623005462199864E-6	DESIGN
// Write the values of fields onto the prepared statement - we MUST use the state at the time the // insert was issued (cos of foreign key constraints). Not necessarily the object's current state	WITHOUT_CLASSIFICATION	0.9995234884770163	WITHOUT_CLASSIFICATION	4.76511522983616E-4	DESIGN
// TODO : shouldnt inserts be Expectations.NONE?	WITHOUT_CLASSIFICATION	0.6520805426927704	DESIGN	0.3479194573072297	WITHOUT_CLASSIFICATION
//don't bother trying to update, we know there is no row there yet	WITHOUT_CLASSIFICATION	0.998963186379014	WITHOUT_CLASSIFICATION	0.0010368136209860108	DESIGN
//if all fields are null, we might need to delete existing row	WITHOUT_CLASSIFICATION	0.8686705414206745	WITHOUT_CLASSIFICATION	0.13132945857932546	DESIGN
//there is probably a row there, so try to update //if no rows were updated, we will find out	WITHOUT_CLASSIFICATION	0.999736697088059	WITHOUT_CLASSIFICATION	2.633029119410193E-4	DESIGN
//note: updates to joined tables can't be batched...	WITHOUT_CLASSIFICATION	0.9814517940748877	WITHOUT_CLASSIFICATION	0.018548205925112377	DESIGN
// starting index	WITHOUT_CLASSIFICATION	0.9998152689431592	WITHOUT_CLASSIFICATION	1.847310568409125E-4	DESIGN
//Now write the values of fields onto the prepared statement	WITHOUT_CLASSIFICATION	0.9998205351592844	WITHOUT_CLASSIFICATION	1.7946484071565E-4	DESIGN
// Write any appropriate versioning conditional parameters	WITHOUT_CLASSIFICATION	0.9982221728184234	WITHOUT_CLASSIFICATION	0.0017778271815766002	DESIGN
//Render the SQL query	WITHOUT_CLASSIFICATION	0.9999438341809611	WITHOUT_CLASSIFICATION	5.6165819038957995E-5	DESIGN
// Do the key. The key is immutable so we can use the _current_ object state - not necessarily // the state at the time the delete was issued	WITHOUT_CLASSIFICATION	0.9888258399297793	WITHOUT_CLASSIFICATION	0.011174160070220526	DESIGN
// We should use the _current_ object state (ie. after any updates that occurred during flush)	WITHOUT_CLASSIFICATION	0.9893303047612798	WITHOUT_CLASSIFICATION	0.010669695238720205	DESIGN
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9978650594036483	WITHOUT_CLASSIFICATION	0.002134940596351631	DESIGN
//note: dirtyFields==null means we had no snapshot, and we couldn't get one using select-before-update //	WITHOUT_CLASSIFICATION	0.9996715894581611	WITHOUT_CLASSIFICATION	3.2841054183877996E-4	DESIGN
// more specifically : "datetime [op] ?" //      1) if the operator is MINUS, we really cannot determine //          the expected type as either another datetime or //          numeric would be valid //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.9033407942837528	WITHOUT_CLASSIFICATION	0.09665920571624723	DESIGN
// For the case of dynamic-update="true", we need to generate the UPDATE SQL	WITHOUT_CLASSIFICATION	0.9996107925880816	WITHOUT_CLASSIFICATION	3.892074119183421E-4	DESIGN
// don't need to check laziness (dirty checking algorithm handles that)	WITHOUT_CLASSIFICATION	0.9995057020309702	WITHOUT_CLASSIFICATION	4.942979690298039E-4	DESIGN
// For the case of dynamic-update="false", or no snapshot, we use the static SQL	WITHOUT_CLASSIFICATION	0.9999383270040655	WITHOUT_CLASSIFICATION	6.167299593454687E-5	DESIGN
// if not "get", then try "is"	WITHOUT_CLASSIFICATION	0.9999903902445634	WITHOUT_CLASSIFICATION	9.60975543656796E-6	DESIGN
// Now update only the tables with dirty properties (and the table with the version number)	WITHOUT_CLASSIFICATION	0.9999872548805706	WITHOUT_CLASSIFICATION	1.2745119429314319E-5	DESIGN
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9996107925880816	WITHOUT_CLASSIFICATION	3.892074119183421E-4	DESIGN
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9996107925880816	WITHOUT_CLASSIFICATION	3.892074119183421E-4	DESIGN
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999184184474057	WITHOUT_CLASSIFICATION	8.158155259431388E-5	DESIGN
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999184184474057	WITHOUT_CLASSIFICATION	8.158155259431388E-5	DESIGN
// not supported	WITHOUT_CLASSIFICATION	0.9999360527430117	WITHOUT_CLASSIFICATION	6.394725698834299E-5	DESIGN
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9978650594036483	WITHOUT_CLASSIFICATION	0.002134940596351631	DESIGN
// we need to utilize dynamic delete statements	WITHOUT_CLASSIFICATION	0.993726242921932	WITHOUT_CLASSIFICATION	0.006273757078067955	DESIGN
// otherwise, utilize the static delete statements	WITHOUT_CLASSIFICATION	0.9997075884274317	WITHOUT_CLASSIFICATION	2.924115725683081E-4	DESIGN
//just a performance opt!	WITHOUT_CLASSIFICATION	0.9995894380988943	WITHOUT_CLASSIFICATION	4.1056190110567054E-4	DESIGN
//just a performance opt!	WITHOUT_CLASSIFICATION	0.9995894380988943	WITHOUT_CLASSIFICATION	4.1056190110567054E-4	DESIGN
//all joins join to the pk of the driving table	WITHOUT_CLASSIFICATION	0.9988008446676315	WITHOUT_CLASSIFICATION	0.0011991553323684873	DESIGN
//notice that we skip the first table; it is the driving table!	WITHOUT_CLASSIFICATION	0.9947792044593251	WITHOUT_CLASSIFICATION	0.005220795540674871	DESIGN
//we can inner join to superclass tables (the row MUST be there) //we can never inner join to subclass tables	WITHOUT_CLASSIFICATION	0.9857225702180157	WITHOUT_CLASSIFICATION	0.014277429781984331	DESIGN
//skip the driving table	WITHOUT_CLASSIFICATION	0.9999768941920057	WITHOUT_CLASSIFICATION	2.3105807994288196E-5	DESIGN
//get 'em in the right order (not that it really matters)	WITHOUT_CLASSIFICATION	0.9466854825253037	WITHOUT_CLASSIFICATION	0.05331451747469631	DESIGN
// here, we work under the following assumptions: //      ------------ valid cases -------------------------------------- //      1) datetime + {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      2) datetime - datetime : always results in a DOUBLE //      3) datetime - {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      ------------ invalid cases ------------------------------------ //      4) datetime + datetime //      5) {something other than datetime} - datetime //      6) datetime * {any type} //      7) datetime / {any type} //      8) {any type} / datetime // doing so allows us to properly handle parameters as either the left // or right side here in the majority of cases	WITHOUT_CLASSIFICATION	0.9995513123799639	WITHOUT_CLASSIFICATION	4.486876200361383E-4	DESIGN
//render the where and from parts	WITHOUT_CLASSIFICATION	0.9851821180335814	WITHOUT_CLASSIFICATION	0.014817881966418667	DESIGN
//we *could* regerate this inside each called method!	WITHOUT_CLASSIFICATION	0.9947869087485532	WITHOUT_CLASSIFICATION	0.005213091251446846	DESIGN
//now render the joins	WITHOUT_CLASSIFICATION	0.9999407660467217	WITHOUT_CLASSIFICATION	5.923395327842964E-5	DESIGN
// This will add the new from element to the origin.	WITHOUT_CLASSIFICATION	0.9988162243157651	WITHOUT_CLASSIFICATION	0.0011837756842348103	DESIGN
//now render the select clause	WITHOUT_CLASSIFICATION	0.9999355643353417	WITHOUT_CLASSIFICATION	6.443566465833549E-5	DESIGN
//now tie it all together	WITHOUT_CLASSIFICATION	0.9998635794494662	WITHOUT_CLASSIFICATION	1.364205505338272E-4	DESIGN
//insert/update/delete SQL	WITHOUT_CLASSIFICATION	0.9998404554700752	WITHOUT_CLASSIFICATION	1.595445299249041E-4	DESIGN
//select SQL	WITHOUT_CLASSIFICATION	0.9982660483085283	WITHOUT_CLASSIFICATION	0.0017339516914716315	DESIGN
//no need to check laziness, dirty checking handles that	WITHOUT_CLASSIFICATION	0.9964948372198279	WITHOUT_CLASSIFICATION	0.0035051627801722034	DESIGN
// Fully resolve the map reference, create implicit joins.	WITHOUT_CLASSIFICATION	0.9999232050240396	WITHOUT_CLASSIFICATION	7.679497596036853E-5	DESIGN
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9824681759505894	WITHOUT_CLASSIFICATION	0.017531824049410658	DESIGN
// The basic implementation is to simply use the node's text	WITHOUT_CLASSIFICATION	0.9995689228758636	WITHOUT_CLASSIFICATION	4.3107712413638995E-4	DESIGN
// for dialects which are known to not support ANSI-SQL row-value-constructor syntax, // we should mutate the tree.	WITHOUT_CLASSIFICATION	0.9632569895342545	WITHOUT_CLASSIFICATION	0.036743010465745546	DESIGN
// Due to the complexity in initializing the SelectClause, do not generate one here. // If it is not found; simply return null... // // Also, do not cache since it gets generated well after we are created.	WITHOUT_CLASSIFICATION	0.9999321254067858	WITHOUT_CLASSIFICATION	6.787459321426593E-5	DESIGN
// check the version unsaved-value, if appropriate	WITHOUT_CLASSIFICATION	0.9997035095948923	WITHOUT_CLASSIFICATION	2.964904051076767E-4	DESIGN
// let this take precedence if defined, since it works for // assigned identifiers	WITHOUT_CLASSIFICATION	0.9974138340821029	WITHOUT_CLASSIFICATION	0.0025861659178970245	DESIGN
// check the id unsaved-value	WITHOUT_CLASSIFICATION	0.9999970209024496	WITHOUT_CLASSIFICATION	2.979097550398563E-6	DESIGN
// check to see if it is in the second-level cache	WITHOUT_CLASSIFICATION	0.9994791867630306	WITHOUT_CLASSIFICATION	5.208132369694576E-4	DESIGN
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9944455023118174	WITHOUT_CLASSIFICATION	0.005554497688182537	DESIGN
// For property references generate <tablealias>.<columnname> as <projectionalias>	WITHOUT_CLASSIFICATION	0.999902441394451	WITHOUT_CLASSIFICATION	9.755860554907814E-5	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993232207011862	WITHOUT_CLASSIFICATION	6.767792988138589E-4	DESIGN
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9976199710098695	WITHOUT_CLASSIFICATION	0.0023800289901303763	DESIGN
//force immediate execution of the insert	WITHOUT_CLASSIFICATION	0.9977422370414697	WITHOUT_CLASSIFICATION	0.002257762958530317	DESIGN
// If this from element is a collection and the path is a collection property (maxIndex, etc.) then // generate a sub-query.	WITHOUT_CLASSIFICATION	0.9979582330299004	WITHOUT_CLASSIFICATION	0.002041766970099695	DESIGN
// entities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993232207011862	WITHOUT_CLASSIFICATION	6.767792988138589E-4	DESIGN
// collections ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993234551128402	WITHOUT_CLASSIFICATION	6.765448871598262E-4	DESIGN
//cannot occur	WITHOUT_CLASSIFICATION	0.9983473468309227	WITHOUT_CLASSIFICATION	0.0016526531690772362	DESIGN
//cannot occur	WITHOUT_CLASSIFICATION	0.9983473468309227	WITHOUT_CLASSIFICATION	0.0016526531690772362	DESIGN
// only carry on if the method has no parameters	WITHOUT_CLASSIFICATION	0.9998823778835951	WITHOUT_CLASSIFICATION	1.1762211640475783E-4	DESIGN
// try "get"	WITHOUT_CLASSIFICATION	0.9998501905694049	WITHOUT_CLASSIFICATION	1.498094305951543E-4	DESIGN
// do nothing...	WITHOUT_CLASSIFICATION	0.9996476121687605	WITHOUT_CLASSIFICATION	3.523878312394086E-4	DESIGN
// do nothing...	WITHOUT_CLASSIFICATION	0.9996476121687605	WITHOUT_CLASSIFICATION	3.523878312394086E-4	DESIGN
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9800893412636299	WITHOUT_CLASSIFICATION	0.01991065873637011	DESIGN
// this page intentionally left blank :)	WITHOUT_CLASSIFICATION	0.9975381293729312	WITHOUT_CLASSIFICATION	0.0024618706270689277	DESIGN
// do not do anything	WITHOUT_CLASSIFICATION	0.999992535081238	WITHOUT_CLASSIFICATION	7.464918761992716E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.999758407950086	WITHOUT_CLASSIFICATION	2.4159204991409242E-4	DESIGN
// ignore	WITHOUT_CLASSIFICATION	0.9996214555833285	WITHOUT_CLASSIFICATION	3.7854441667148255E-4	DESIGN
//cant instantiate	WITHOUT_CLASSIFICATION	0.9984098615579036	WITHOUT_CLASSIFICATION	0.0015901384420964435	DESIGN
//if it is a property of an embedded component, invoke on the "identifier"	WITHOUT_CLASSIFICATION	0.9968645054526531	WITHOUT_CLASSIFICATION	0.0031354945473468137	DESIGN
// otherwise:	WITHOUT_CLASSIFICATION	0.9997952314504504	WITHOUT_CLASSIFICATION	2.047685495496311E-4	DESIGN
// skip finalize methods	WITHOUT_CLASSIFICATION	0.9999790827803794	WITHOUT_CLASSIFICATION	2.0917219620550756E-5	DESIGN
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.999255448677504	WITHOUT_CLASSIFICATION	7.445513224958719E-4	DESIGN
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.999255448677504	WITHOUT_CLASSIFICATION	7.445513224958719E-4	DESIGN
// HHH-2481 make sure the callback gets cleared, otherwise the instance stays in a static thread local.	WITHOUT_CLASSIFICATION	0.9898204098230241	WITHOUT_CLASSIFICATION	0.01017959017697594	DESIGN
// while constructor is running	WITHOUT_CLASSIFICATION	0.9997315569424263	WITHOUT_CLASSIFICATION	2.684430575737029E-4	DESIGN
// while constructor is running	WITHOUT_CLASSIFICATION	0.9997315569424263	WITHOUT_CLASSIFICATION	2.684430575737029E-4	DESIGN
// note: interface is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9992308889930042	WITHOUT_CLASSIFICATION	7.691110069957239E-4	DESIGN
// interfaces // arguments	WITHOUT_CLASSIFICATION	0.99998273067504	WITHOUT_CLASSIFICATION	1.726932496008002E-5	DESIGN
//TODO!	WITHOUT_CLASSIFICATION	0.997954794544069	WITHOUT_CLASSIFICATION	0.002045205455931084	DESIGN
// Get the caller	WITHOUT_CLASSIFICATION	0.9999699474283348	WITHOUT_CLASSIFICATION	3.005257166524186E-5	DESIGN
// Get the caller principals	WITHOUT_CLASSIFICATION	0.9999972390787787	WITHOUT_CLASSIFICATION	2.7609212213015026E-6	DESIGN
//private static final Alias DEFAULT_ALIAS = new Alias(10, null);	WITHOUT_CLASSIFICATION	0.9991931851584608	WITHOUT_CLASSIFICATION	8.06814841539262E-4	DESIGN
// Needed to bump this up to DotNode, because that is the only thing which currently // knows about the property-ref path in the correct format; it is either this, or // recurse over the DotNodes constructing the property path just like DotNode does // internally	WITHOUT_CLASSIFICATION	0.9942417247123955	WITHOUT_CLASSIFICATION	0.005758275287604532	DESIGN
//if the identifier is quoted, remove the quotes	WITHOUT_CLASSIFICATION	0.9974345448656029	WITHOUT_CLASSIFICATION	0.0025654551343972094	DESIGN
//truncate the identifier to the max alias length, less the suffix length	WITHOUT_CLASSIFICATION	0.9896879984786332	WITHOUT_CLASSIFICATION	0.010312001521366828	DESIGN
//full joins are not supported.. yet!	WITHOUT_CLASSIFICATION	0.9947835800087491	WITHOUT_CLASSIFICATION	0.005216419991250893	DESIGN
// null is not considered the same type as Integer. //$NON-NLS-1 //$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9947644738877898	WITHOUT_CLASSIFICATION	0.005235526112210256	DESIGN
// the outerJoinsAfterWhere needs to come before where clause to properly // handle dynamic filters	WITHOUT_CLASSIFICATION	0.9947101156979411	WITHOUT_CLASSIFICATION	0.005289884302058969	DESIGN
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9982660483085283	WITHOUT_CLASSIFICATION	0.0017339516914716315	DESIGN
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9982660483085283	WITHOUT_CLASSIFICATION	0.0017339516914716315	DESIGN
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9982660483085283	WITHOUT_CLASSIFICATION	0.0017339516914716315	DESIGN
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9982660483085283	WITHOUT_CLASSIFICATION	0.0017339516914716315	DESIGN
// strip off any leading 'and' token	WITHOUT_CLASSIFICATION	0.9997628433458923	WITHOUT_CLASSIFICATION	2.3715665410783043E-4	DESIGN
// if the condition is not already there...	WITHOUT_CLASSIFICATION	0.9997934858491643	WITHOUT_CLASSIFICATION	2.065141508356726E-4	DESIGN
//dontSpace.add("'");	WITHOUT_CLASSIFICATION	0.9998404554700752	WITHOUT_CLASSIFICATION	1.595445299249041E-4	DESIGN
//for MySQL	WITHOUT_CLASSIFICATION	0.998648800804179	WITHOUT_CLASSIFICATION	0.0013511991958210512	DESIGN
//HashMap columnsUnique = new HashMap();	WITHOUT_CLASSIFICATION	0.9994498041708025	WITHOUT_CLASSIFICATION	5.501958291974965E-4	DESIGN
//null caused some problems	WITHOUT_CLASSIFICATION	0.9998907122112608	WITHOUT_CLASSIFICATION	1.0928778873919077E-4	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.9982660483085283	WITHOUT_CLASSIFICATION	0.0017339516914716315	DESIGN
//not sure if this would ever be null but wanted to be careful	WITHOUT_CLASSIFICATION	0.879606827129593	WITHOUT_CLASSIFICATION	0.1203931728704069	DESIGN
//even on inverse="true"	WITHOUT_CLASSIFICATION	0.9997989806014274	WITHOUT_CLASSIFICATION	2.010193985727144E-4	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.9982660483085283	WITHOUT_CLASSIFICATION	0.0017339516914716315	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.9982660483085283	WITHOUT_CLASSIFICATION	0.0017339516914716315	DESIGN
// If true then execute db updates, otherwise just generate and display updates	WITHOUT_CLASSIFICATION	0.999929884406324	WITHOUT_CLASSIFICATION	7.011559367602711E-5	DESIGN
// we only release the connection	WITHOUT_CLASSIFICATION	0.999385877040424	WITHOUT_CLASSIFICATION	6.141229595760002E-4	DESIGN
// deprecated option...	WITHOUT_CLASSIFICATION	0.9999319015417552	WITHOUT_CLASSIFICATION	6.80984582448095E-5	DESIGN
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9954194647301574	WITHOUT_CLASSIFICATION	0.004580535269842531	DESIGN
//actually, this last test is probably unnecessary, since  //beforeCompletion() doesn't get called during rollback	WITHOUT_CLASSIFICATION	0.9984861487430721	WITHOUT_CLASSIFICATION	0.001513851256927902	DESIGN
// this one only really needed for badly-behaved applications! // (if the TransactionManager has a Sychronization registered, // its a noop) // (actually we do need it for downgrading locks)	WITHOUT_CLASSIFICATION	0.9890335263342904	WITHOUT_CLASSIFICATION	0.010966473665709584	DESIGN
// Create an DotNode AST for the path and resolve it.	WITHOUT_CLASSIFICATION	0.999900267641239	WITHOUT_CLASSIFICATION	9.973235876103996E-5	DESIGN
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9954194647301574	WITHOUT_CLASSIFICATION	0.004580535269842531	DESIGN
//if we could not register a synchronization, //do the before/after completion callbacks //ourself (but we need to let jdbcContext //know that this is what we are going to //do, so it doesn't keep trying to register //synchronizations)	WITHOUT_CLASSIFICATION	0.9632707044439867	WITHOUT_CLASSIFICATION	0.03672929555601328	DESIGN
// swallow it, and continue to roll back JTA transaction	WITHOUT_CLASSIFICATION	0.9990493086489791	WITHOUT_CLASSIFICATION	9.506913510207845E-4	DESIGN
// so the transaction is already rolled back, by JTA spec	WITHOUT_CLASSIFICATION	0.9998523485475316	WITHOUT_CLASSIFICATION	1.476514524684729E-4	DESIGN
// this method is a noop if there is a Synchronization!	WITHOUT_CLASSIFICATION	0.994870690329868	WITHOUT_CLASSIFICATION	0.0051293096701319485	DESIGN
// two conditions where we need to transform this to a theta-join syntax: //      1) 'elem' is the "root from-element" in correlated subqueries //      2) The DotNode.useThetaStyleImplicitJoins has been set to true //          and 'elem' represents an implicit join	WITHOUT_CLASSIFICATION	0.8728212921716656	WITHOUT_CLASSIFICATION	0.12717870782833443	DESIGN
// WebSphere, however, is not a sane JEE/JTA container...	WITHOUT_CLASSIFICATION	0.9985656608980364	WITHOUT_CLASSIFICATION	0.001434339101963575	DESIGN
// for sane JEE/JTA containers, the transaction itself functions as its identifier...	WITHOUT_CLASSIFICATION	0.9999136627256328	WITHOUT_CLASSIFICATION	8.633727436727078E-5	DESIGN
//swallow, the transaction was finished	WITHOUT_CLASSIFICATION	0.9982562274532348	WITHOUT_CLASSIFICATION	0.0017437725467651778	DESIGN
// all AliasToEntityMapResultTransformer are considered equal ~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994388448545571	WITHOUT_CLASSIFICATION	5.611551454429558E-4	DESIGN
// Create the join element under the from element.	WITHOUT_CLASSIFICATION	0.9996972918768134	WITHOUT_CLASSIFICATION	3.0270812318654967E-4	DESIGN
// all DistinctRootEntityResultTransformer are considered equal ~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994388448545571	WITHOUT_CLASSIFICATION	5.611551454429558E-4	DESIGN
// map of EntityMode -> Tuplizer	WITHOUT_CLASSIFICATION	0.9998029481978647	WITHOUT_CLASSIFICATION	1.9705180213531177E-4	DESIGN
// this is a virtual id property...	WITHOUT_CLASSIFICATION	0.9953185373379794	WITHOUT_CLASSIFICATION	0.004681462662020616	DESIGN
//this one needed only for guessEntityMode()	WITHOUT_CLASSIFICATION	0.99465147078877	WITHOUT_CLASSIFICATION	0.005348529211229998	DESIGN
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9997855296489335	WITHOUT_CLASSIFICATION	2.1447035106635768E-4	DESIGN
// todo : move this to SF per HHH-3517; also see HHH-1907 and ComponentMetamodel	WITHOUT_CLASSIFICATION	0.9941250117094471	WITHOUT_CLASSIFICATION	0.0058749882905528815	DESIGN
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9998524820377647	WITHOUT_CLASSIFICATION	1.4751796223524304E-4	DESIGN
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9997625884086604	WITHOUT_CLASSIFICATION	2.3741159133961064E-4	DESIGN
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9974745945054808	WITHOUT_CLASSIFICATION	0.002525405494519113	DESIGN
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9997625884086604	WITHOUT_CLASSIFICATION	2.3741159133961064E-4	DESIGN
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9989518696837586	WITHOUT_CLASSIFICATION	0.0010481303162413848	DESIGN
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9995825509181737	WITHOUT_CLASSIFICATION	4.174490818262903E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.999758407950086	WITHOUT_CLASSIFICATION	2.4159204991409242E-4	DESIGN
// cached for efficiency...	WITHOUT_CLASSIFICATION	0.9999621826160981	WITHOUT_CLASSIFICATION	3.7817383901853646E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.999758407950086	WITHOUT_CLASSIFICATION	2.4159204991409242E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.999758407950086	WITHOUT_CLASSIFICATION	2.4159204991409242E-4	DESIGN
//it was not embedded, so the argument is just an id	WITHOUT_CLASSIFICATION	0.9998946279604731	WITHOUT_CLASSIFICATION	1.0537203952695218E-4	DESIGN
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9998524820377647	WITHOUT_CLASSIFICATION	1.4751796223524304E-4	DESIGN
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9974745945054808	WITHOUT_CLASSIFICATION	0.002525405494519113	DESIGN
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9989518696837586	WITHOUT_CLASSIFICATION	0.0010481303162413848	DESIGN
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9991327825927296	WITHOUT_CLASSIFICATION	8.672174072702844E-4	DESIGN
//return currentId;	WITHOUT_CLASSIFICATION	0.99843351783927	WITHOUT_CLASSIFICATION	0.0015664821607299733	DESIGN
//reset the id	WITHOUT_CLASSIFICATION	0.9993789639736583	WITHOUT_CLASSIFICATION	6.210360263416421E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.999758407950086	WITHOUT_CLASSIFICATION	2.4159204991409242E-4	DESIGN
//reset the version	WITHOUT_CLASSIFICATION	0.9993542968271732	WITHOUT_CLASSIFICATION	6.457031728267969E-4	DESIGN
// the default is to simply not lazy fetch properties for now...	WITHOUT_CLASSIFICATION	0.9988430069312443	WITHOUT_CLASSIFICATION	0.0011569930687556679	DESIGN
// Add the second join, the one that ends in the destination table.	WITHOUT_CLASSIFICATION	0.9998973161425183	WITHOUT_CLASSIFICATION	1.026838574816669E-4	DESIGN
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9824681759505894	WITHOUT_CLASSIFICATION	0.017531824049410658	DESIGN
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9995825509181737	WITHOUT_CLASSIFICATION	4.174490818262903E-4	DESIGN
// determine the id getter and setter methods from the proxy interface (if any) // determine all interfaces needed by the resulting proxy	WITHOUT_CLASSIFICATION	0.9991603810798675	WITHOUT_CLASSIFICATION	8.396189201325774E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.999758407950086	WITHOUT_CLASSIFICATION	2.4159204991409242E-4	DESIGN
//not final because proxy factory creation can fail	WITHOUT_CLASSIFICATION	0.9900976775720526	WITHOUT_CLASSIFICATION	0.009902322427947391	DESIGN
// superclass entity-name	WITHOUT_CLASSIFICATION	0.9999706368422542	WITHOUT_CLASSIFICATION	2.936315774583169E-5	DESIGN
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9824681759505894	WITHOUT_CLASSIFICATION	0.017531824049410658	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993232207011862	WITHOUT_CLASSIFICATION	6.767792988138589E-4	DESIGN
//init the aliases, after initing the constructornode	WITHOUT_CLASSIFICATION	0.9980304324974925	WITHOUT_CLASSIFICATION	0.001969567502507596	DESIGN
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9824681759505894	WITHOUT_CLASSIFICATION	0.017531824049410658	DESIGN
// legacy behavior (with no abstract attribute specified)	WITHOUT_CLASSIFICATION	0.9987687983873794	WITHOUT_CLASSIFICATION	0.0012312016126204875	DESIGN
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9994353418842545	WITHOUT_CLASSIFICATION	5.646581157455145E-4	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993232207011862	WITHOUT_CLASSIFICATION	6.767792988138589E-4	DESIGN
//note: this affects the return value!	WITHOUT_CLASSIFICATION	0.9968695857722901	WITHOUT_CLASSIFICATION	0.0031304142277099084	DESIGN
// Need to account for allowable '_' within the variant	WITHOUT_CLASSIFICATION	0.9993143056144717	WITHOUT_CLASSIFICATION	6.856943855283093E-4	DESIGN
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9997481188807651	WITHOUT_CLASSIFICATION	2.518811192348253E-4	DESIGN
// Collection Types:	WITHOUT_CLASSIFICATION	0.9997794716455465	WITHOUT_CLASSIFICATION	2.2052835445357971E-4	DESIGN
// convenience methods relating to operations across arrays of types...	WITHOUT_CLASSIFICATION	0.9989189965718276	WITHOUT_CLASSIFICATION	0.001081003428172341	DESIGN
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9998658020230552	WITHOUT_CLASSIFICATION	1.3419797694483394E-4	DESIGN
//Blobs are ignored by merge()	WITHOUT_CLASSIFICATION	0.9998547700492706	WITHOUT_CLASSIFICATION	1.452299507293078E-4	DESIGN
//value is the entity name	WITHOUT_CLASSIFICATION	0.9998106097018172	WITHOUT_CLASSIFICATION	1.8939029818269945E-4	DESIGN
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9982660483085283	WITHOUT_CLASSIFICATION	0.0017339516914716315	DESIGN
// generate id select fragment and then property select fragment for // each expression, just like generateSelectFragments().	WITHOUT_CLASSIFICATION	0.999765670778376	WITHOUT_CLASSIFICATION	2.3432922162405334E-4	DESIGN
//TODO!	WITHOUT_CLASSIFICATION	0.997954794544069	WITHOUT_CLASSIFICATION	0.002045205455931084	DESIGN
//xml is the entity name	WITHOUT_CLASSIFICATION	0.9998106097018172	WITHOUT_CLASSIFICATION	1.8939029818269945E-4	DESIGN
//special case ... this is the leaf of the containment graph, even though not immutable	WITHOUT_CLASSIFICATION	0.9932669318989074	WITHOUT_CLASSIFICATION	0.006733068101092631	DESIGN
//tolerates nulls	WITHOUT_CLASSIFICATION	0.9982660483085283	WITHOUT_CLASSIFICATION	0.0017339516914716315	DESIGN
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9998404554700752	WITHOUT_CLASSIFICATION	1.595445299249041E-4	DESIGN
// metaType is assumed to be single-column type	WITHOUT_CLASSIFICATION	0.99334586871663	WITHOUT_CLASSIFICATION	0.006654131283370046	DESIGN
// Get all the select expressions (that we just generated) and render the select.	WITHOUT_CLASSIFICATION	0.999742809273492	WITHOUT_CLASSIFICATION	2.571907265079438E-4	DESIGN
// Look through the FromElement's children to find any collections of values that should be fetched...	WITHOUT_CLASSIFICATION	0.9999009246638472	WITHOUT_CLASSIFICATION	9.907533615274649E-5	DESIGN
//return AssociationType.FOREIGN_KEY_TO_PARENT; //this is better but causes a transient object exception...	WITHOUT_CLASSIFICATION	0.876318337706832	WITHOUT_CLASSIFICATION	0.12368166229316795	DESIGN
// Use the lower case function name. // Remember whether we're in a SELECT clause or not.	WITHOUT_CLASSIFICATION	0.9998983414765498	WITHOUT_CLASSIFICATION	1.0165852345021073E-4	DESIGN
// IDENT might be the name of a class.	WITHOUT_CLASSIFICATION	0.9950303942420916	WITHOUT_CLASSIFICATION	0.004969605757908457	DESIGN
//TODO!!!	WITHOUT_CLASSIFICATION	0.997954794544069	WITHOUT_CLASSIFICATION	0.002045205455931084	DESIGN
//st.setTimestamp( index,  new Timestamp( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9960015484673675	WITHOUT_CLASSIFICATION	0.00399845153263243	DESIGN
//st.setDate( index,  new Date( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9960015484673675	WITHOUT_CLASSIFICATION	0.00399845153263243	DESIGN
// both are Timestamps	WITHOUT_CLASSIFICATION	0.9999593248608037	WITHOUT_CLASSIFICATION	4.067513919615051E-5	DESIGN
// at least one is a plain old Date	WITHOUT_CLASSIFICATION	0.9967343495807285	WITHOUT_CLASSIFICATION	0.003265650419271478	DESIGN
//noop	WITHOUT_CLASSIFICATION	0.997954794544069	WITHOUT_CLASSIFICATION	0.002045205455931084	DESIGN
// if the corresponding SQL value is NULL, the reader we got is NULL as well	WITHOUT_CLASSIFICATION	0.999911517123174	WITHOUT_CLASSIFICATION	8.848287682587436E-5	DESIGN
// Fetch Reader content up to the end - and put characters in a StringBuffer	WITHOUT_CLASSIFICATION	0.9979629989333221	WITHOUT_CLASSIFICATION	0.0020370010666779007	DESIGN
// Return StringBuffer content as a large String	WITHOUT_CLASSIFICATION	0.9995699034856421	WITHOUT_CLASSIFICATION	4.300965143578956E-4	DESIGN
//or Types.LONGVARCHAR?	WITHOUT_CLASSIFICATION	0.9998404554700752	WITHOUT_CLASSIFICATION	1.595445299249041E-4	DESIGN
//Not called at runtime so doesn't matter if its slow :)	WITHOUT_CLASSIFICATION	0.9986358086571278	WITHOUT_CLASSIFICATION	0.0013641913428722344	DESIGN
//TODO	WITHOUT_CLASSIFICATION	0.997954794544069	WITHOUT_CLASSIFICATION	0.002045205455931084	DESIGN
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9998915393611281	WITHOUT_CLASSIFICATION	1.0846063887196683E-4	DESIGN
//different nullability rules for pk/fk	WITHOUT_CLASSIFICATION	0.9885735268330637	WITHOUT_CLASSIFICATION	0.01142647316693642	DESIGN
//cache this	WITHOUT_CLASSIFICATION	0.9954548897668007	WITHOUT_CLASSIFICATION	0.00454511023319921	DESIGN
//only really need new array during semiresolve!	WITHOUT_CLASSIFICATION	0.9831310997848481	WITHOUT_CLASSIFICATION	0.016868900215151875	DESIGN
// Forcefully remove leading ands from where fragments; the grammar will // handle adding them	WITHOUT_CLASSIFICATION	0.9993140628930192	WITHOUT_CLASSIFICATION	6.859371069808455E-4	DESIGN
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9982660483085283	WITHOUT_CLASSIFICATION	0.0017339516914716315	DESIGN
// Create a new FILTERS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9996263950812927	WITHOUT_CLASSIFICATION	3.7360491870729935E-4	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993232207011862	WITHOUT_CLASSIFICATION	6.767792988138589E-4	DESIGN
//public Object instantiate(Object parent, SessionImplementor session) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9927785963195495	WITHOUT_CLASSIFICATION	0.0072214036804505895	DESIGN
//nothing to do	WITHOUT_CLASSIFICATION	0.9953233976334048	WITHOUT_CLASSIFICATION	0.004676602366595184	DESIGN
//nothing to do	WITHOUT_CLASSIFICATION	0.9953233976334048	WITHOUT_CLASSIFICATION	0.004676602366595184	DESIGN
// VersionType impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //      Note : simply returns null for seed() and next() as the only known //      application of binary types for versioning is for use with the //      TIMESTAMP datatype supported by Sybase and SQL Server, which //      are completely db-generated values...	WITHOUT_CLASSIFICATION	0.9897296484169121	WITHOUT_CLASSIFICATION	0.010270351583087855	DESIGN
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9998658020230552	WITHOUT_CLASSIFICATION	1.3419797694483394E-4	DESIGN
//not really necessary, I guess...	WITHOUT_CLASSIFICATION	0.9842734949018851	WITHOUT_CLASSIFICATION	0.015726505098114775	DESIGN
//Clobs are ignored by merge() operation	WITHOUT_CLASSIFICATION	0.9965600479405199	WITHOUT_CLASSIFICATION	0.0034399520594801353	DESIGN
// we do not have to worry about queued additions to uninitialized // collections, since they can only occur for inverse collections!	WITHOUT_CLASSIFICATION	0.997227068607156	WITHOUT_CLASSIFICATION	0.0027729313928440418	DESIGN
// collections cannot be compared	WITHOUT_CLASSIFICATION	0.9994308898329368	WITHOUT_CLASSIFICATION	5.691101670631796E-4	DESIGN
//remember the uk value	WITHOUT_CLASSIFICATION	0.9999017886289068	WITHOUT_CLASSIFICATION	9.821137109321665E-5	DESIGN
//NOOP	WITHOUT_CLASSIFICATION	0.997954794544069	WITHOUT_CLASSIFICATION	0.002045205455931084	DESIGN
//processCollectionProperty(token, q.getCollectionPersister(collectionRole), collectionName);	WITHOUT_CLASSIFICATION	0.9942892606861524	WITHOUT_CLASSIFICATION	0.005710739313847541	DESIGN
//we must use the "remembered" uk value, since it is  //not available from the EntityEntry during assembly	WITHOUT_CLASSIFICATION	0.9915038057829413	WITHOUT_CLASSIFICATION	0.0084961942170588	DESIGN
// collections don't dirty an unversioned parent entity	WITHOUT_CLASSIFICATION	0.9992088040112872	WITHOUT_CLASSIFICATION	7.911959887128275E-4	DESIGN
// return false;	WITHOUT_CLASSIFICATION	0.9998425062214558	WITHOUT_CLASSIFICATION	1.574937785441446E-4	DESIGN
// This just handles a particular case of component // projection, perhaps get rid of it and throw an exception	WITHOUT_CLASSIFICATION	0.9972652632911467	WITHOUT_CLASSIFICATION	0.0027347367088533226	DESIGN
//NOTE: we avoid joining to the next table if the named property is just the foreign key value	WITHOUT_CLASSIFICATION	0.9977553119298035	WITHOUT_CLASSIFICATION	0.0022446880701965004	DESIGN
// the key is the owning entity itself, so get the ID from the key	WITHOUT_CLASSIFICATION	0.9994820351196341	WITHOUT_CLASSIFICATION	5.179648803658897E-4	DESIGN
// if the original is a PersistentCollection, and that original // was not flagged as dirty, then reset the target's dirty flag // here after the copy operation. // </p> // One thing to be careful of here is a "bare" original collection // in which case we should never ever ever reset the dirty flag // on the target because we simply do not know...	WITHOUT_CLASSIFICATION	0.999218116626188	WITHOUT_CLASSIFICATION	7.818833738119969E-4	DESIGN
//ignore subselect keywords	WITHOUT_CLASSIFICATION	0.9998414079448571	WITHOUT_CLASSIFICATION	1.585920551429958E-4	DESIGN
// copy elements into newly empty target collection	WITHOUT_CLASSIFICATION	0.999722412558681	WITHOUT_CLASSIFICATION	2.775874413190355E-4	DESIGN
// for a null target, or a target which is the same as the original, we // need to put the merged elements in a new collection	WITHOUT_CLASSIFICATION	0.9915480195152795	WITHOUT_CLASSIFICATION	0.008451980484720602	DESIGN
// by default just use an unanticipated capacity since we don't // know how to extract the capacity to use from original here...	WITHOUT_CLASSIFICATION	0.9999017170300094	WITHOUT_CLASSIFICATION	9.828296999058566E-5	DESIGN
// get the elements back into the target making sure to handle dirty flag	WITHOUT_CLASSIFICATION	0.9998947130570922	WITHOUT_CLASSIFICATION	1.052869429078168E-4	DESIGN
// check if collection is currently being loaded	WITHOUT_CLASSIFICATION	0.9974052931710695	WITHOUT_CLASSIFICATION	0.002594706828930501	DESIGN
// check if it is already completely loaded, but unowned	WITHOUT_CLASSIFICATION	0.9997719946018698	WITHOUT_CLASSIFICATION	2.2800539813021403E-4	DESIGN
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9990516684179442	WITHOUT_CLASSIFICATION	9.483315820556381E-4	DESIGN
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9982660483085283	WITHOUT_CLASSIFICATION	0.0017339516914716315	DESIGN
// create a new collection wrapper, to be initialized later	WITHOUT_CLASSIFICATION	0.9940524736534977	WITHOUT_CLASSIFICATION	0.005947526346502331	DESIGN
// Some JDBC drivers erroneously return an empty array here for a null DB value :/	WITHOUT_CLASSIFICATION	0.9720914766935193	WITHOUT_CLASSIFICATION	0.027908523306480845	DESIGN
// our column span is the number of columns in the PK	WITHOUT_CLASSIFICATION	0.9994629007671315	WITHOUT_CLASSIFICATION	5.3709923286849E-4	DESIGN
//cannot batch fetch by unique key (property-ref associations)	WITHOUT_CLASSIFICATION	0.9781933801365668	WITHOUT_CLASSIFICATION	0.021806619863433303	DESIGN
// we already know current is not null...	WITHOUT_CLASSIFICATION	0.9992839384047923	WITHOUT_CLASSIFICATION	7.1606159520771E-4	DESIGN
// the ids are fully resolved, so compare them with isDirty(), not isModified()	WITHOUT_CLASSIFICATION	0.9997944296300827	WITHOUT_CLASSIFICATION	2.0557036991736293E-4	DESIGN
//the owner of the association is not the owner of the id	WITHOUT_CLASSIFICATION	0.9990950582595525	WITHOUT_CLASSIFICATION	9.049417404474302E-4	DESIGN
// ----------------------------------------------------------- Constructors	WITHOUT_CLASSIFICATION	0.999330362807991	WITHOUT_CLASSIFICATION	6.696371920089058E-4	DESIGN
// ----------------------------------------------------- Instance Variables	WITHOUT_CLASSIFICATION	0.9993363188460507	WITHOUT_CLASSIFICATION	6.63681153949342E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.999758407950086	WITHOUT_CLASSIFICATION	2.4159204991409242E-4	DESIGN
// --------------------------------------------------------- Public Methods	WITHOUT_CLASSIFICATION	0.9993159063278444	WITHOUT_CLASSIFICATION	6.840936721555633E-4	DESIGN
// Compare the two maps for equality	WITHOUT_CLASSIFICATION	0.9996467187948507	WITHOUT_CLASSIFICATION	3.53281205149234E-4	DESIGN
// Simple tests that require no synchronization	WITHOUT_CLASSIFICATION	0.9994139788609844	WITHOUT_CLASSIFICATION	5.860211390155834E-4	DESIGN
//Sybase fail if we don't do that, sigh...	WITHOUT_CLASSIFICATION	0.981434009067379	WITHOUT_CLASSIFICATION	0.01856599093262096	DESIGN
// Handles things like: // a and b or c // a and ( b or c ) // not a and not b // not ( a and b ) // x between y and z            (overloaded "and") // x in ( a, b, c )             (overloaded brackets) // not not a // a is not null                (overloaded "not") // etc...... // and expressions like // foo = bar                    (maps to: foo.id = bar.id) // foo.Bar = 'foo'              (maps to: foo.bar = 'foo') // foo.Bar.Baz = 1.0            (maps to: foo.bar = bar.id and bar.baz = 1.0) // 1.0 = foo.Bar.Baz            (maps to: bar.baz = 1.0 and foo.Bar = bar.id) // foo.Bar.Baz = a.B.C          (maps to: bar.Baz = b.C and foo.Bar = bar.id and a.B = b.id) // foo.Bar.Baz + a.B.C          (maps to: bar.Baz + b.C and foo.Bar = bar.id and a.B = b.id) // ( foo.Bar.Baz + 1.0 ) < 2.0  (maps to: ( bar.Baz + 1.0 ) < 2.0 and foo.Bar = bar.id)	WITHOUT_CLASSIFICATION	0.9968962501972639	WITHOUT_CLASSIFICATION	0.0031037498027361413	DESIGN
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9961474716338687	WITHOUT_CLASSIFICATION	0.003852528366131303	DESIGN
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9961474716338687	WITHOUT_CLASSIFICATION	0.003852528366131303	DESIGN
// try to "pretty print" it	WITHOUT_CLASSIFICATION	0.9999812145635751	WITHOUT_CLASSIFICATION	1.8785436424851126E-5	DESIGN
// otherwise, just dump it	WITHOUT_CLASSIFICATION	0.9999926798272861	WITHOUT_CLASSIFICATION	7.320172713834919E-6	DESIGN
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9904083401762048	WITHOUT_CLASSIFICATION	0.00959165982379509	DESIGN
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9904083401762048	WITHOUT_CLASSIFICATION	0.00959165982379509	DESIGN
// use default behavior	WITHOUT_CLASSIFICATION	0.9999648441845002	WITHOUT_CLASSIFICATION	3.515581549986083E-5	DESIGN
//NOTE: early return	WITHOUT_CLASSIFICATION	0.9989567932718663	WITHOUT_CLASSIFICATION	0.0010432067281337563	DESIGN
// the MRU cache used to keep hard references to the most recently used query plans; // note : LRU here is a bit of a misnomer, it indicates that LRU entries are removed, the // actual kept entries are the MRU entries	WITHOUT_CLASSIFICATION	0.997103505813951	WITHOUT_CLASSIFICATION	0.0028964941860489058	DESIGN
// we want to be able to just use the defaults, // if JNDI environment properties are not supplied // so don't put null in anywhere	WITHOUT_CLASSIFICATION	0.995450039778971	WITHOUT_CLASSIFICATION	0.0045499602210290644	DESIGN
// Clone //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9995391022020718	WITHOUT_CLASSIFICATION	4.6089779792815485E-4	DESIGN
// Serialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9993232207011862	WITHOUT_CLASSIFICATION	6.767792988138589E-4	DESIGN
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.999571461233373	WITHOUT_CLASSIFICATION	4.2853876662691734E-4	DESIGN
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.999571461233373	WITHOUT_CLASSIFICATION	4.2853876662691734E-4	DESIGN
// Deserialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9993232207011862	WITHOUT_CLASSIFICATION	6.767792988138589E-4	DESIGN
/* static methods only - hide constructor */	WITHOUT_CLASSIFICATION	0.9993935258579573	WITHOUT_CLASSIFICATION	6.064741420427402E-4	DESIGN
/*&& !('_'==character)*/	WITHOUT_CLASSIFICATION	0.9998532566300714	WITHOUT_CLASSIFICATION	1.4674336992852598E-4	DESIGN
// returnign null!	WITHOUT_CLASSIFICATION	0.9997952314504504	WITHOUT_CLASSIFICATION	2.047685495496311E-4	DESIGN
// returnign null!	WITHOUT_CLASSIFICATION	0.9997952314504504	WITHOUT_CLASSIFICATION	2.047685495496311E-4	DESIGN
// includes last '.'	WITHOUT_CLASSIFICATION	0.9997023032509796	WITHOUT_CLASSIFICATION	2.976967490203282E-4	DESIGN
// +1 to include the following '.'	WITHOUT_CLASSIFICATION	0.9997416871162673	WITHOUT_CLASSIFICATION	2.58312883732713E-4	DESIGN
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9980323416277154	WITHOUT_CLASSIFICATION	0.0019676583722846833	DESIGN
// first time we find match!	WITHOUT_CLASSIFICATION	0.9999661384676628	WITHOUT_CLASSIFICATION	3.3861532337309806E-5	DESIGN
// entityNames may now include slashes for the representations //classname may be an inner class	WITHOUT_CLASSIFICATION	0.9999444866399844	WITHOUT_CLASSIFICATION	5.551336001568395E-5	DESIGN
// wrapped iterators	WITHOUT_CLASSIFICATION	0.999803094328041	WITHOUT_CLASSIFICATION	1.9690567195898082E-4	DESIGN
// index of current iterator in the wrapped iterators array	WITHOUT_CLASSIFICATION	0.999706607533234	WITHOUT_CLASSIFICATION	2.933924667659023E-4	DESIGN
// the current iterator	WITHOUT_CLASSIFICATION	0.9999929148577908	WITHOUT_CLASSIFICATION	7.085142209085699E-6	DESIGN
// the last used iterator	WITHOUT_CLASSIFICATION	0.999983668714362	WITHOUT_CLASSIFICATION	1.633128563810377E-5	DESIGN
//it was a boolean expression	WITHOUT_CLASSIFICATION	0.9998915566008847	WITHOUT_CLASSIFICATION	1.084433991152959E-4	DESIGN
/*public static Object[] clone(Class elementClass, Object[] array) {	WITHOUT_CLASSIFICATION	0.9900390795763981	WITHOUT_CLASSIFICATION	0.00996092042360195	DESIGN
// call this before any Iterator method to make sure that the current Iterator // is not exhausted	WITHOUT_CLASSIFICATION	0.9481966041337071	WITHOUT_CLASSIFICATION	0.05180339586629283	DESIGN
//doable if needed	WITHOUT_CLASSIFICATION	0.9987622460948841	WITHOUT_CLASSIFICATION	0.0012377539051158751	DESIGN
// set last used iterator here, in case the user calls remove // before calling hasNext() or next() (although they shouldn't)	WITHOUT_CLASSIFICATION	0.9996477701293498	WITHOUT_CLASSIFICATION	3.5222987065025585E-4	DESIGN
// peek ahead	WITHOUT_CLASSIFICATION	0.999810438892133	WITHOUT_CLASSIFICATION	1.8956110786698063E-4	DESIGN
// if we reach the end of the string w/o finding the // matching end, that is an exception	WITHOUT_CLASSIFICATION	0.9996769175478174	WITHOUT_CLASSIFICATION	3.2308245218261783E-4	DESIGN
// we have a placeholder, spin forward till we find the end	WITHOUT_CLASSIFICATION	0.9997283743736604	WITHOUT_CLASSIFICATION	2.716256263397474E-4	DESIGN
// make sure spinning forward did not put us past the end of the buffer...	WITHOUT_CLASSIFICATION	0.998600787057633	WITHOUT_CLASSIFICATION	0.0013992129423670838	DESIGN
// First, try to locate this resource through the current // context classloader.	WITHOUT_CLASSIFICATION	0.9994551275750028	WITHOUT_CLASSIFICATION	5.448724249972299E-4	DESIGN
// Next, try to locate this resource through this class's classloader	WITHOUT_CLASSIFICATION	0.9982191260598289	WITHOUT_CLASSIFICATION	0.0017808739401711541	DESIGN
// Next, try to locate this resource through the system classloader	WITHOUT_CLASSIFICATION	0.9994352894830246	WITHOUT_CLASSIFICATION	5.647105169753755E-4	DESIGN
// Anywhere else we should look?	WITHOUT_CLASSIFICATION	0.9941048440119649	WITHOUT_CLASSIFICATION	0.005895155988035145	DESIGN
// would need an IdentitySet for this!	WITHOUT_CLASSIFICATION	0.9766322024763372	WITHOUT_CLASSIFICATION	0.0233677975236628	DESIGN
//Arrays.asList doesn't do primitive arrays	WITHOUT_CLASSIFICATION	0.9976351486808013	WITHOUT_CLASSIFICATION	0.00236485131919874	DESIGN
//faster?	WITHOUT_CLASSIFICATION	0.997954794544069	WITHOUT_CLASSIFICATION	0.002045205455931084	DESIGN
// the name of a class	WITHOUT_CLASSIFICATION	0.9999846809781193	WITHOUT_CLASSIFICATION	1.5319021880578285E-5	DESIGN
// Its the listener class name	WITHOUT_CLASSIFICATION	0.9999932140442104	WITHOUT_CLASSIFICATION	6.785955789589309E-6	DESIGN
//allow 9,8,7,6,5,4,3,2,1	WITHOUT_CLASSIFICATION	0.9998404554700752	WITHOUT_CLASSIFICATION	1.595445299249041E-4	DESIGN
// default to element set if no elements() specified	WITHOUT_CLASSIFICATION	0.9993210297301303	WITHOUT_CLASSIFICATION	6.789702698698163E-4	DESIGN
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9989273487130548	WITHOUT_CLASSIFICATION	0.001072651286945222	DESIGN
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9975464772937235	WITHOUT_CLASSIFICATION	0.0024535227062765157	DESIGN
// first, lets determine whether to apply cglib or javassist based instrumentation...	WITHOUT_CLASSIFICATION	0.9900671121568675	WITHOUT_CLASSIFICATION	0.009932887843132494	DESIGN
// Make sure we don't override previous set values	WITHOUT_CLASSIFICATION	0.999724632861695	WITHOUT_CLASSIFICATION	2.753671383049261E-4	DESIGN
//entirely optional!!	WITHOUT_CLASSIFICATION	0.9998404554700752	WITHOUT_CLASSIFICATION	1.595445299249041E-4	DESIGN
// Its the listener instance (or better be)	WITHOUT_CLASSIFICATION	0.9993883770505353	WITHOUT_CLASSIFICATION	6.116229494646302E-4	DESIGN
//context.unbind(boundName);	WITHOUT_CLASSIFICATION	0.9998404554700752	WITHOUT_CLASSIFICATION	1.595445299249041E-4	DESIGN
//readResolveObject	WITHOUT_CLASSIFICATION	0.9982660483085283	WITHOUT_CLASSIFICATION	0.0017339516914716315	DESIGN
//cfg.setProperty("hibernate.show_sql", "true");	WITHOUT_CLASSIFICATION	0.9942892606861524	WITHOUT_CLASSIFICATION	0.005710739313847541	DESIGN
// Defensive, convenience methods	WITHOUT_CLASSIFICATION	0.9988893799659099	WITHOUT_CLASSIFICATION	0.0011106200340901394	DESIGN
// Create the SessionFactory from hibernate.cfg.xml	WITHOUT_CLASSIFICATION	0.9997793665593212	WITHOUT_CLASSIFICATION	2.206334406788288E-4	DESIGN
// Make sure you log the exception, as it might be swallowed	WITHOUT_CLASSIFICATION	0.9996804691379514	WITHOUT_CLASSIFICATION	3.195308620486409E-4	DESIGN
// Begin unit of work	WITHOUT_CLASSIFICATION	0.999983685776589	WITHOUT_CLASSIFICATION	1.6314223410954155E-5	DESIGN
// Write HTML header	WITHOUT_CLASSIFICATION	0.9998211869080069	WITHOUT_CLASSIFICATION	1.7881309199299178E-4	DESIGN
// Handle actions	WITHOUT_CLASSIFICATION	0.9990850503462755	WITHOUT_CLASSIFICATION	9.149496537244454E-4	DESIGN
// Print page	WITHOUT_CLASSIFICATION	0.999657138812921	WITHOUT_CLASSIFICATION	3.4286118707903604E-4	DESIGN
// Write HTML footer	WITHOUT_CLASSIFICATION	0.9998030113210313	WITHOUT_CLASSIFICATION	1.969886789687546E-4	DESIGN
// End unit of work	WITHOUT_CLASSIFICATION	0.9997752822999081	WITHOUT_CLASSIFICATION	2.2471770009185684E-4	DESIGN
// Start the session to be used for this request	WITHOUT_CLASSIFICATION	0.9963699122462457	WITHOUT_CLASSIFICATION	0.0036300877537543278	DESIGN
// make the session available to the session factory's "current context"	WITHOUT_CLASSIFICATION	0.9950398022144549	WITHOUT_CLASSIFICATION	0.004960197785545137	DESIGN
// pass control along to the rest of the processing chain	WITHOUT_CLASSIFICATION	0.9995856737844575	WITHOUT_CLASSIFICATION	4.143262155424979E-4	DESIGN
// remove session from "current context"	WITHOUT_CLASSIFICATION	0.9993379094425183	WITHOUT_CLASSIFICATION	6.620905574817296E-4	DESIGN
// Eager fetch the collection so we can use it detached	WITHOUT_CLASSIFICATION	0.9958378465981035	WITHOUT_CLASSIFICATION	0.004162153401896509	DESIGN
// If we want to handle it bidirectional and detached, we also need to load this // collection with an eager outer-join fetch, this time with Criteria and not HQL:	WITHOUT_CLASSIFICATION	0.9119916809811377	WITHOUT_CLASSIFICATION	0.08800831901886229	DESIGN
/*        Event anEvent = (Event) session                .createCriteria(Event.class).setFetchMode("participants", FetchMode.JOIN)                .add( Expression.eq("id", eventId) )                .uniqueResult(); // Eager fetch the colleciton so we can use it detached        */	WITHOUT_CLASSIFICATION	0.9999914732002538	WITHOUT_CLASSIFICATION	8.526799746117903E-6	DESIGN
// End of first unit of work	WITHOUT_CLASSIFICATION	0.9999782148770947	WITHOUT_CLASSIFICATION	2.1785122905308275E-5	DESIGN
// or bidirectional safety method, setting both sides: aPerson.addToEvent(anEvent);	WITHOUT_CLASSIFICATION	0.9982072177484305	WITHOUT_CLASSIFICATION	0.0017927822515694674	DESIGN
// Begin second unit of work	WITHOUT_CLASSIFICATION	0.999990021101702	WITHOUT_CLASSIFICATION	9.978898297923563E-6	DESIGN
// Reattachment of aPerson	WITHOUT_CLASSIFICATION	0.9999827182220821	WITHOUT_CLASSIFICATION	1.7281777917914296E-5	DESIGN
// The getEmailAddresses() might trigger a lazy load of the collection	WITHOUT_CLASSIFICATION	0.9959224059719519	WITHOUT_CLASSIFICATION	0.004077594028048055	DESIGN
// We need our tm, so get it now and avoid doing other work // if there is a problem	WITHOUT_CLASSIFICATION	0.9997160464776329	WITHOUT_CLASSIFICATION	2.839535223671084E-4	DESIGN
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9976591660502507	WITHOUT_CLASSIFICATION	0.0023408339497492433	DESIGN
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9976591660502507	WITHOUT_CLASSIFICATION	0.0023408339497492433	DESIGN
// JBC put a version in the node when it created as part of // some internal operation. We are always newer, but if // the JBC version is > 1 something odd has happened	WITHOUT_CLASSIFICATION	0.9999607980371	WITHOUT_CLASSIFICATION	3.920196290006755E-5	DESIGN
//swaldman 2006-08-28: define c3p0-style configuration parameters for properties with //                     hibernate-specific overrides to detect and warn about conflicting //                     declarations	WITHOUT_CLASSIFICATION	0.9933199826847552	WITHOUT_CLASSIFICATION	0.006680017315244845	DESIGN
// Not null if the Isolation level has been specified in the configuration file. // Otherwise, it is left to the Driver's default value.	WITHOUT_CLASSIFICATION	0.997937554833687	WITHOUT_CLASSIFICATION	0.0020624451663130102	DESIGN
// Configured outside of Hibernate (i.e. Servlet container, or Java Bean Container // already has Proxool pools running, and this provider is to just borrow one of these	WITHOUT_CLASSIFICATION	0.9966290380083724	WITHOUT_CLASSIFICATION	0.003370961991627641	DESIGN
// If you're closing down the ConnectionProvider chances are an // is not a real big deal, just warn	WITHOUT_CLASSIFICATION	0.9999554045430935	WITHOUT_CLASSIFICATION	4.4595456906476754E-5	DESIGN
// (AS is always optional, for consistency with SQL/OQL)	WITHOUT_CLASSIFICATION	0.997424484190528	WITHOUT_CLASSIFICATION	0.0025755158094720254	DESIGN
// process the "new" HQL style where aliases are assigned // _after_ the class name or path expression ie. using // the AS construction	WITHOUT_CLASSIFICATION	0.9999214514081449	WITHOUT_CLASSIFICATION	7.854859185507951E-5	DESIGN
// the loaded owner will be set to null after the collection is removed, // so capture its value as the affected owner so it is accessible to // both pre- and post- events	WITHOUT_CLASSIFICATION	0.9944415003866446	WITHOUT_CLASSIFICATION	0.00555849961335535	DESIGN
// is a primitive type // invokespecial	WITHOUT_CLASSIFICATION	0.9944169425730216	WITHOUT_CLASSIFICATION	0.005583057426978371	DESIGN
// array of primitive type // do nothing	WITHOUT_CLASSIFICATION	0.9997421656450944	WITHOUT_CLASSIFICATION	2.5783435490552904E-4	DESIGN
// handle a path expression or class name that // appears at the start, in the "new" HQL // style or an alias that appears at the start // in the "old" HQL style	WITHOUT_CLASSIFICATION	0.9990806526122913	WITHOUT_CLASSIFICATION	9.193473877087312E-4	DESIGN
//handle <=, >=, !=, is not, not between, not in	WITHOUT_CLASSIFICATION	0.9910475144650067	WITHOUT_CLASSIFICATION	0.00895248553499326	DESIGN
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999914234310767	WITHOUT_CLASSIFICATION	8.576568923318374E-6	DESIGN
// transfer an explicitly defined entity name // handle the lazy attribute	WITHOUT_CLASSIFICATION	0.9997001816385755	WITHOUT_CLASSIFICATION	2.9981836142446087E-4	DESIGN
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9967081607847762	WITHOUT_CLASSIFICATION	0.003291839215223774	DESIGN
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9967081607847762	WITHOUT_CLASSIFICATION	0.003291839215223774	DESIGN
// get meta's from // <joined-subclass>	WITHOUT_CLASSIFICATION	0.9992678202085294	WITHOUT_CLASSIFICATION	7.321797914705446E-4	DESIGN
// parameters on the property mapping should // override parameters in the typedef	WITHOUT_CLASSIFICATION	0.9987996438988853	WITHOUT_CLASSIFICATION	0.0012003561011146315	DESIGN
//fetch="join" overrides default laziness //fetch="join" overrides default laziness	WITHOUT_CLASSIFICATION	0.9942984639477768	WITHOUT_CLASSIFICATION	0.005701536052223268	DESIGN
//NOTE SPECIAL CASE: // default to join and non-lazy for the "second join" // of the many-to-many	WITHOUT_CLASSIFICATION	0.9990754936622299	WITHOUT_CLASSIFICATION	9.24506337770055E-4	DESIGN
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9991940416968923	WITHOUT_CLASSIFICATION	8.059583031076313E-4	DESIGN
// state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9991900946178901	WITHOUT_CLASSIFICATION	8.099053821098667E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.999758407950086	WITHOUT_CLASSIFICATION	2.4159204991409242E-4	DESIGN
//element //index -> id	WITHOUT_CLASSIFICATION	0.9999345417992749	WITHOUT_CLASSIFICATION	6.545820072518294E-5	DESIGN
// note that it might be better to iterate the snapshot but this is safe, // assuming the user implements equals() properly, as required by the Set // contract!	WITHOUT_CLASSIFICATION	0.9749203245576745	WITHOUT_CLASSIFICATION	0.025079675442325575	DESIGN
// collections detect changes made via their public interface and mark // themselves as dirty as a performance optimization	WITHOUT_CLASSIFICATION	0.9968755027001096	WITHOUT_CLASSIFICATION	0.003124497299890489	DESIGN
// essentially, if the real session is closed allow any // method call to pass through since the real session // will complain by throwing an appropriate exception; // NOTE that allowing close() above has the same basic effect, //   but we capture that there simply to perform the unbind...	WITHOUT_CLASSIFICATION	0.9949064101631868	WITHOUT_CLASSIFICATION	0.00509358983681315	DESIGN
// The default SQLExceptionConverter for all dialects is based on SQLState // since SQLErrorCode is extremely vendor-specific.  Specific Dialects // may override to return whatever is most appropriate for that vendor.	WITHOUT_CLASSIFICATION	0.9981887901111921	WITHOUT_CLASSIFICATION	0.0018112098888078687	DESIGN
//only necessary for postgre < 7.4 //http://anoncvs.postgresql.org/cvsweb.cgi/pgsql/doc/src/sgml/ref/create_sequence.sgml	WITHOUT_CLASSIFICATION	0.9354919452567833	WITHOUT_CLASSIFICATION	0.06450805474321672	DESIGN
// select topic, syntax from information_schema.help // where section like 'Function%' order by section, topic // // see also ->  http://www.h2database.com/html/functions.html	WITHOUT_CLASSIFICATION	0.9895553318675221	WITHOUT_CLASSIFICATION	0.010444668132477864	DESIGN
// registerColumnType(Types.VARBINARY, "CHARACTER($l)"); // registerColumnType(Types.BLOB, "CHARACTER($l)" );  // For use prior to CP 11.0 // registerColumnType(Types.CLOB, "CHARACTER($l)" );	WITHOUT_CLASSIFICATION	0.9987087410562082	WITHOUT_CLASSIFICATION	0.0012912589437918318	DESIGN
//the BLOB type requires a size arguement - this defaults to //bytes - no arg defaults to 1 whole byte! //other argument mods include K - kilobyte, M - megabyte, G - gigabyte. //refer to the PBdevelopers guide for more info.	WITHOUT_CLASSIFICATION	0.8372197615634113	WITHOUT_CLASSIFICATION	0.16278023843658876	DESIGN
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.9767654031051514	WITHOUT_CLASSIFICATION	0.023234596894848646	DESIGN
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.9963238828139411	WITHOUT_CLASSIFICATION	0.003676117186058924	DESIGN
// add the comment // nest the main query in an outer select // add the rownnumber bit into the outer query select list	WITHOUT_CLASSIFICATION	0.9999640779621382	WITHOUT_CLASSIFICATION	3.5922037861909916E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.999758407950086	WITHOUT_CLASSIFICATION	2.4159204991409242E-4	DESIGN
// Note: For object <-> SQL datatype mappings see: //	WITHOUT_CLASSIFICATION	0.9990223307302619	WITHOUT_CLASSIFICATION	9.7766926973808E-4	DESIGN
// TRIM(end_keyword string-expression-1 FROM string-expression-2) // use Hibernate implementation "From" is one of the parameters they pass in position ?3 //registerFunction( "trim", new SQLFunctionTemplate(Hibernate.STRING, "trim(?1 ?2 from ?3)") );	WITHOUT_CLASSIFICATION	0.9966647543719785	WITHOUT_CLASSIFICATION	0.0033352456280213317	DESIGN
// Whether this dialect has an Identity clause added to the data type or a completely seperate identity // data type	WITHOUT_CLASSIFICATION	0.9995982383326396	WITHOUT_CLASSIFICATION	4.017616673603154E-4	DESIGN
// According to both the ANSI-SQL and JPA specs, trim takes a variable number of parameters between 1 and 4. // at least one paramer (trimSource) is required.  From the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If <trim specification> is omitted, BOTH is assumed. // If <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9968143985382387	WITHOUT_CLASSIFICATION	0.003185601461761329	DESIGN
/////////////////////////////////////////////////////////////////////// // Prepare persisters and link them up with their cache // region/access-strategy	WITHOUT_CLASSIFICATION	0.9989438582535759	WITHOUT_CLASSIFICATION	0.001056141746424149	DESIGN
//Named Queries:	WITHOUT_CLASSIFICATION	0.9982660483085283	WITHOUT_CLASSIFICATION	0.0017339516914716315	DESIGN
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9964388341708266	WITHOUT_CLASSIFICATION	0.0035611658291735486	DESIGN
// does not handle arrays (thats ok, cos they can't be lazy) // or newly instantiated collections, so we can do the cast	WITHOUT_CLASSIFICATION	0.9930375491230258	WITHOUT_CLASSIFICATION	0.006962450876974185	DESIGN
// collection deletions are a special case since update() can add // deletions of collections not loaded by the session.	WITHOUT_CLASSIFICATION	0.9999425973713957	WITHOUT_CLASSIFICATION	5.7402628604398016E-5	DESIGN
// we can do the cast since orphan-delete does not apply to: // 1. newly instantiated collections // 2. arrays (we can't track orphans for detached arrays)	WITHOUT_CLASSIFICATION	0.9988378850791373	WITHOUT_CLASSIFICATION	0.0011621149208627612	DESIGN
// if the natural-id is marked as non-mutable, it is not retrieved during a // normal database-snapshot operation...	WITHOUT_CLASSIFICATION	0.9997418394239304	WITHOUT_CLASSIFICATION	2.5816057606966843E-4	DESIGN
// watch out for a case where old is still referenced // somewhere in the object graph! (which is a user error)	WITHOUT_CLASSIFICATION	0.9989415532035765	WITHOUT_CLASSIFICATION	0.001058446796423588	DESIGN
//slice, to get the columns for this component //property	WITHOUT_CLASSIFICATION	0.9906930433728048	WITHOUT_CLASSIFICATION	0.009306956627195193	DESIGN
//int result = 17; //result = 37 * result + type.hashCode(); //result = 37 * result + ( value==null ? 0 : value.hashCode() ); //return result;	WITHOUT_CLASSIFICATION	0.9996522776027492	WITHOUT_CLASSIFICATION	3.4772239725081104E-4	DESIGN
// The CollectionEntry.isReached() stuff is just to detect any silly users   // who set up circular or shared references between/to collections.	WITHOUT_CLASSIFICATION	0.9986139529374404	WITHOUT_CLASSIFICATION	0.0013860470625596392	DESIGN
// detached collection wrappers that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9986997767850421	WITHOUT_CLASSIFICATION	0.001300223214957865	DESIGN
// The unique property value represented here may or may not be // serializable, so we do an explicit check here in order to generate // a better error message	WITHOUT_CLASSIFICATION	0.948116436651241	WITHOUT_CLASSIFICATION	0.05188356334875893	DESIGN
// if the version of a newly instantiated object is not the same // as the version seed value, use that as the unsaved-value	WITHOUT_CLASSIFICATION	0.9926871544076701	WITHOUT_CLASSIFICATION	0.007312845592329882	DESIGN
// ie. we never have to null out a reference to // an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9998679428154809	WITHOUT_CLASSIFICATION	1.3205718451906348E-4	DESIGN
// ignore this row, the collection is in process of // being loaded somewhere further "up" the stack	WITHOUT_CLASSIFICATION	0.993928948471061	WITHOUT_CLASSIFICATION	0.006071051528939096	DESIGN
// Entity load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // 	WITHOUT_CLASSIFICATION	0.9990590498861112	WITHOUT_CLASSIFICATION	9.409501138888544E-4	DESIGN
// should be ok performance-wise to generate new delegate instances for each // request since these are locally stack-scoped.  Besides, it makes the code // much easier to read than the old TransactionHelper stuff...	WITHOUT_CLASSIFICATION	0.9936388709040566	WITHOUT_CLASSIFICATION	0.006361129095943495	DESIGN
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9927925639200992	WITHOUT_CLASSIFICATION	0.0072074360799007494	DESIGN
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9927925639200992	WITHOUT_CLASSIFICATION	0.0072074360799007494	DESIGN
// wrap up any new collections directly referenced by the object // or its components	WITHOUT_CLASSIFICATION	0.9991998188085164	WITHOUT_CLASSIFICATION	8.001811914835049E-4	DESIGN
// remove any snapshot, not really for memory management purposes, but // rather because it might now be stale, and there is no longer any  // EntityEntry to take precedence // This is now handled by removeEntity() //session.getPersistenceContext().removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9640947013923966	WITHOUT_CLASSIFICATION	0.03590529860760337	DESIGN
// skip this check for composite-ids relating to dom4j entity-mode; // alternatively, we could add a check to make sure the incoming id value is // an instance of Element...	WITHOUT_CLASSIFICATION	0.9931173455563383	WITHOUT_CLASSIFICATION	0.006882654443661683	DESIGN
// upgrade the lock if necessary: //lock(result, lockMode);	WITHOUT_CLASSIFICATION	0.9996153989440872	WITHOUT_CLASSIFICATION	3.8460105591279326E-4	DESIGN
// now, any collections that are initialized // inside this block do not get updated - they // are ignored until the next flush	WITHOUT_CLASSIFICATION	0.9978647910450317	WITHOUT_CLASSIFICATION	0.0021352089549682707	DESIGN
//we must clone embedded composite identifiers, or  //we will get back the same instance that we pass in	WITHOUT_CLASSIFICATION	0.9918882320572181	WITHOUT_CLASSIFICATION	0.008111767942781966	DESIGN
// Sub-insertions should occur before containing insertion so // Try to do the callback now	WITHOUT_CLASSIFICATION	0.9980095229915039	WITHOUT_CLASSIFICATION	0.0019904770084959787	DESIGN
//the entity is not associated with the session, so //try interceptor and unsaved-value	WITHOUT_CLASSIFICATION	0.9979179440321893	WITHOUT_CLASSIFICATION	0.00208205596781074	DESIGN
//scan the query string for class names appearing in the from clause and replace //with all persistent implementors of the class/interface, returning multiple //query strings (make sure we don't pick up a class in the select clause!)	WITHOUT_CLASSIFICATION	0.82240542498543	WITHOUT_CLASSIFICATION	0.1775945750145701	DESIGN
// save() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999394288665246	WITHOUT_CLASSIFICATION	6.057113347538544E-4	DESIGN
// evict() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999394288665246	WITHOUT_CLASSIFICATION	6.057113347538544E-4	DESIGN
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.8706296994469962	WITHOUT_CLASSIFICATION	0.12937030055300378	DESIGN
//if it is an uninitialized proxy, pointing //with this session, then when it is accessed, //the underlying instance will be "contained"	WITHOUT_CLASSIFICATION	0.9903795350488216	WITHOUT_CLASSIFICATION	0.009620464951178472	DESIGN
// Generate an explicit join for the root dot node.   The implied joins will be collected and passed up // to the root dot node.	WITHOUT_CLASSIFICATION	0.9994716007486864	WITHOUT_CLASSIFICATION	5.283992513137039E-4	DESIGN
// A session is considered to contain an entity only if the entity has // an entry in the session's persistence context and the entry reports // that the entity has not been removed	WITHOUT_CLASSIFICATION	0.9990926100089628	WITHOUT_CLASSIFICATION	9.073899910371884E-4	DESIGN
// Does the collection referenced by this FromElement // specify an order-by attribute?  If so, attach it to // the query's order-by	WITHOUT_CLASSIFICATION	0.9891699638942175	WITHOUT_CLASSIFICATION	0.010830036105782481	DESIGN
// ... and the token could be an identifer and the error is // a mismatched token error ...	WITHOUT_CLASSIFICATION	0.9979405235810889	WITHOUT_CLASSIFICATION	0.0020594764189111174	DESIGN
// If a where clause was specified in the update/delete query, use it to limit the // returned ids here...	WITHOUT_CLASSIFICATION	0.9985519733095751	WITHOUT_CLASSIFICATION	0.0014480266904249172	DESIGN
//	WITHOUT_CLASSIFICATION	0.999758407950086	WITHOUT_CLASSIFICATION	2.4159204991409242E-4	DESIGN
// Default implementation: // If this node has a data type, and that data type is not an association, then this is scalar.	WITHOUT_CLASSIFICATION	0.9974967407477419	WITHOUT_CLASSIFICATION	0.002503259252258153	DESIGN
// Resolve the LHS fully, generate implicit joins.  Pass in the property name so that the resolver can // discover foreign key (id) properties.	WITHOUT_CLASSIFICATION	0.9994280351103286	WITHOUT_CLASSIFICATION	5.71964889671268E-4	DESIGN
// If the propertyType is null and there isn't a parent, just // stop now... there was a problem resolving the node anyway.	WITHOUT_CLASSIFICATION	0.999579669744617	WITHOUT_CLASSIFICATION	4.203302553829285E-4	DESIGN
//We do not look for an existing join on the same path, because //it makes sense to join twice on the same collection role	WITHOUT_CLASSIFICATION	0.8213141108104375	WITHOUT_CLASSIFICATION	0.17868588918956244	DESIGN
// our parent is another dot node, meaning we are being further dereferenced. // thus we need to generate a join unless the parent refers to the associated // entity's PK (because 'our' table would know the FK).	WITHOUT_CLASSIFICATION	0.9978270402999706	WITHOUT_CLASSIFICATION	0.0021729597000294584	DESIGN
/*public final Currency getCurrency(int col) throws HibernateException {	WITHOUT_CLASSIFICATION	0.9926620848123614	WITHOUT_CLASSIFICATION	0.007337915187638595	DESIGN
// here, we have two possibilities: // 	WITHOUT_CLASSIFICATION	0.999799582352875	WITHOUT_CLASSIFICATION	2.004176471249609E-4	DESIGN
// Set the unresolved path in this node and the parent. // Set the text for the parent.	WITHOUT_CLASSIFICATION	0.9993619951544208	WITHOUT_CLASSIFICATION	6.380048455792267E-4	DESIGN
// Get the first child to be considered.  Sub-classes may do this differently in order to skip nodes that // are not select expressions (e.g. DISTINCT).	WITHOUT_CLASSIFICATION	0.9988096947886054	WITHOUT_CLASSIFICATION	0.0011903052113946878	DESIGN
// If this is an entity and the property is the identifier property, then use getIdentifierType(). //      Note that the propertyName.equals( propertyPath ) checks whether we have a component //      key reference, where the component class property name is the same as the //      entity id property name; if the two are not equal, this is the case and //      we'd need to "fall through" to using the property mapping.	WITHOUT_CLASSIFICATION	0.9970496017669999	WITHOUT_CLASSIFICATION	0.0029503982330000523	DESIGN
// for a subquery, the alias to use depends on a few things (we // already know this is not an overall SELECT): //      1) if this FROM_ELEMENT represents a correlation to the //          outer-most query //              A) if the outer query represents a multi-table //                  persister, we need to use the given alias //                  in anticipation of one of the multi-table //                  executors being used (as this subquery will //                  actually be used in the "id select" phase //                  of that multi-table executor) //              B) otherwise, we need to use the persister's //                  table name as the column qualification //      2) otherwise (not correlated), use the given alias	WITHOUT_CLASSIFICATION	0.9451975496238527	WITHOUT_CLASSIFICATION	0.05480245037614734	DESIGN
// Not a collection? // Return the entity property mapping.	WITHOUT_CLASSIFICATION	0.9998399378286428	WITHOUT_CLASSIFICATION	1.6006217135731786E-4	DESIGN
// collection of <many-to-any/> mappings... // used to circumvent the component-collection check below...	WITHOUT_CLASSIFICATION	0.9983482445983138	WITHOUT_CLASSIFICATION	0.0016517554016862472	DESIGN
// Otherwise, the destination node was implied by the FROM clause and the FROM clause processor // will automatically add it in the right place.	WITHOUT_CLASSIFICATION	0.9947625887923004	WITHOUT_CLASSIFICATION	0.005237411207699528	DESIGN
// If the first identifier in the path referrs to the class alias (not the class name), then this // is a correlated subselect.  If it's a correlated sub-select, use the existing table alias.  Otherwise // generate a new one.	WITHOUT_CLASSIFICATION	0.999339103511269	WITHOUT_CLASSIFICATION	6.608964887310318E-4	DESIGN
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9990392993328076	WITHOUT_CLASSIFICATION	9.607006671923005E-4	DESIGN
// An ident node can represent an index expression if the ident // represents a naked property ref //      *Note: this makes the assumption (which is currently the case //      in the hql-sql grammar) that the ident is first resolved //      itself (addrExpr -> resolve()).  The other option, if that //      changes, is to call resolve from here; but it is //      currently un-needed overhead.	WITHOUT_CLASSIFICATION	0.9998285086169858	WITHOUT_CLASSIFICATION	1.71491383014158E-4	DESIGN
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9707659583522416	WITHOUT_CLASSIFICATION	0.02923404164775844	DESIGN
// If this is an implied join in a FROM clause, then use ANSI-style joining, and set the // flag on the FromElement that indicates that it was implied in the FROM clause itself.	WITHOUT_CLASSIFICATION	0.9975260787612774	WITHOUT_CLASSIFICATION	0.002473921238722578	DESIGN
//	WITHOUT_CLASSIFICATION	0.999758407950086	WITHOUT_CLASSIFICATION	2.4159204991409242E-4	DESIGN
// For an explicit many-to-many relationship, add a second join from the intermediate  // (many-to-many) table to the destination table.  Also, make sure that the from element's  // idea of the destination is the destination table.	WITHOUT_CLASSIFICATION	0.9996697298024251	WITHOUT_CLASSIFICATION	3.3027019757490443E-4	DESIGN
// Reset the node type, because the rest of the system is expecting FROM_FRAGMENT, all we wanted was // for the factory to create the right sub-class.  This might get reset again later on anyway to make the // SQL generation simpler.	WITHOUT_CLASSIFICATION	0.9250270697266464	DESIGN	0.07497293027335358	WITHOUT_CLASSIFICATION
//explicit = true;	WITHOUT_CLASSIFICATION	0.9998686157697076	WITHOUT_CLASSIFICATION	1.3138423029228344E-4	DESIGN
//sqlResultTypeList.add( type ); // Generate the select expression.	WITHOUT_CLASSIFICATION	0.9991937661739613	WITHOUT_CLASSIFICATION	8.062338260388315E-4	DESIGN
// If the expression list has exactly one expression, and the type of the expression is a collection // then this might be a collection function, such as index(c) or size(c).	WITHOUT_CLASSIFICATION	0.9870127605483376	WITHOUT_CLASSIFICATION	0.012987239451662348	DESIGN
// Need to parse off the column qualifiers; this is assuming (which is true as of now) // that this is only used from update and delete HQL statement parsing	WITHOUT_CLASSIFICATION	0.9994638435745063	WITHOUT_CLASSIFICATION	5.361564254936048E-4	DESIGN
// for regression testing against output from the old parser... // found it easiest to simply reorder the FromElements here into ascending order // in terms of injecting them into the resulting sql ast in orders relative to those // expected by the old parser; this is definitely another of those "only needed // for regression purposes".  The SyntheticAndFactory, then, simply injects them as it // encounters them.	WITHOUT_CLASSIFICATION	0.9877156406882197	WITHOUT_CLASSIFICATION	0.012284359311780346	DESIGN
// The uber-rule here is that we need to include  subclass joins if // the FromElement is in any way dereferenced by a property from // the subclass table; otherwise we end up with column references // qualified by a non-existent table reference in the resulting SQL...	WITHOUT_CLASSIFICATION	0.9837150165941119	WITHOUT_CLASSIFICATION	0.016284983405888177	DESIGN
// classic translator does not support collection of ordinal // param metadata	WITHOUT_CLASSIFICATION	0.984711765713138	WITHOUT_CLASSIFICATION	0.015288234286861895	DESIGN
// The following variables are stacks that keep information about each subexpression // in the list of nested subexpressions we are currently processing.	WITHOUT_CLASSIFICATION	0.9966949374054757	WITHOUT_CLASSIFICATION	0.0033050625945242485	DESIGN
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999914234310767	WITHOUT_CLASSIFICATION	8.576568923318374E-6	DESIGN
// should not be able to reach last without maxPosition being set // unless there are no results	WITHOUT_CLASSIFICATION	0.9993274827213191	WITHOUT_CLASSIFICATION	6.725172786808556E-4	DESIGN
// we found it in the temp PC.  Should indicate we are in the midst of processing a result set // containing eager fetches via join fetch	WITHOUT_CLASSIFICATION	0.9970114975861089	WITHOUT_CLASSIFICATION	0.002988502413891125	DESIGN
//do not use proxiesByKey, since not all //proxies that point to this session's //instances are in that collection!	WITHOUT_CLASSIFICATION	0.9906522424834605	WITHOUT_CLASSIFICATION	0.009347757516539565	DESIGN
// if there is no TM configured, we will not be able to access // the javax.transaction.Transaction object in order to // register a synch anyway.	WITHOUT_CLASSIFICATION	0.9868087270173777	WITHOUT_CLASSIFICATION	0.013191272982622432	DESIGN
// Since the result set cursor is always left at the first // physical row after the "last processed", we need to jump // back one position to get the key value we are interested // in skipping	WITHOUT_CLASSIFICATION	0.9980722675909863	WITHOUT_CLASSIFICATION	0.0019277324090136295	DESIGN
//true if this is a query and we are loading multiple instances of the same collection role //otherwise this is a CollectionInitializer and we are loading up a single collection or batch	WITHOUT_CLASSIFICATION	0.5064738264948658	WITHOUT_CLASSIFICATION	0.49352617350513417	DESIGN
// we don't need to worry about existing version being uninitialized // because this block isn't called by a re-entrant load (re-entrant // loads _always_ have lock mode NONE)	WITHOUT_CLASSIFICATION	0.8979063932642013	WITHOUT_CLASSIFICATION	0.1020936067357987	DESIGN
// add temp entry so that the next step is circular-reference // safe - only needed because some types don't take proper // advantage of two-phase-load (esp. components)	WITHOUT_CLASSIFICATION	0.9983642335739783	WITHOUT_CLASSIFICATION	0.0016357664260216898	DESIGN
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9967662427837747	WITHOUT_CLASSIFICATION	0.0032337572162251665	DESIGN
// log a message about potential connection leaks	WITHOUT_CLASSIFICATION	0.9962568942352323	WITHOUT_CLASSIFICATION	0.0037431057647675883	DESIGN
//	WITHOUT_CLASSIFICATION	0.999758407950086	WITHOUT_CLASSIFICATION	2.4159204991409242E-4	DESIGN
// this has been shown to happen occasionally in rare cases // when using a transaction manager + transaction-timeout // where the timeout calls back through Hibernate's // registered transaction synchronization on a separate // "reaping" thread.  In cases where that reaping thread // executes through this block at the same time the main // application thread does we can get into situations where // these CMEs occur.  And though it is not "allowed" per-se, // the end result without handling it specifically is infinite // looping.  So here, we simply break the loop	WITHOUT_CLASSIFICATION	0.6294558192764825	WITHOUT_CLASSIFICATION	0.37054418072351736	DESIGN
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9919605878604326	WITHOUT_CLASSIFICATION	0.008039412139567327	DESIGN
// can't cache this stuff either (per-invocation) // we are given a map of user-alias -> lock mode // create a new map of sql-alias -> lock mode	WITHOUT_CLASSIFICATION	0.9958810508587432	WITHOUT_CLASSIFICATION	0.004118949141256722	DESIGN
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns //getCollectionTable().createUniqueKey( getIdentifier().getConstraintColumns() );	WITHOUT_CLASSIFICATION	0.9957221707350924	WITHOUT_CLASSIFICATION	0.00427782926490761	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9964476466243511	WITHOUT_CLASSIFICATION	0.0035523533756489207	DESIGN
//isSet = collection.isSet(); //isSorted = collection.isSorted();	WITHOUT_CLASSIFICATION	0.9993152066625991	WITHOUT_CLASSIFICATION	6.847933374010019E-4	DESIGN
//lists, arrays //sets, maps, bags	WITHOUT_CLASSIFICATION	0.9957629988263899	WITHOUT_CLASSIFICATION	0.00423700117361005	DESIGN
// we finish all the "removes" first to take care of possible unique // constraints and so that we can take better advantage of batching	WITHOUT_CLASSIFICATION	0.9976119843311685	WITHOUT_CLASSIFICATION	0.0023880156688315646	DESIGN
//use a combination of foreign key columns and pk columns, since //the ordering of removal and addition is not guaranteed when //a child moves from one parent to another	WITHOUT_CLASSIFICATION	0.9975035271741454	WITHOUT_CLASSIFICATION	0.002496472825854545	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9964476466243511	WITHOUT_CLASSIFICATION	0.0035523533756489207	DESIGN
//information about properties of this class, //including inherited properties //(only really needed for updatable/insertable properties)	WITHOUT_CLASSIFICATION	0.9695424346529149	WITHOUT_CLASSIFICATION	0.030457565347085006	DESIGN
// all this only really needs to consider properties // of this class, not its subclasses, but since we // are reusing code used for sequential selects, we // use the subclass closure	WITHOUT_CLASSIFICATION	0.9646691761822839	WITHOUT_CLASSIFICATION	0.035330823817716135	DESIGN
// Here we render the select column list based on the properties defined as being generated. // For partial component generation, we currently just re-select the whole component // rather than trying to handle the individual generated portions.	WITHOUT_CLASSIFICATION	0.9994172354868027	WITHOUT_CLASSIFICATION	5.827645131973091E-4	DESIGN
// this is the root (versioned) table, and we are using version-based // optimistic locking;  if we are not updating the version, also don't // check it (unless this is a "generated" version column)!	WITHOUT_CLASSIFICATION	0.9984118817371314	WITHOUT_CLASSIFICATION	0.0015881182628685623	DESIGN
//optimistic-lock="all", include all updatable properties //optimistic-lock="dirty", include all properties we are updating this time	WITHOUT_CLASSIFICATION	0.959459366390996	WITHOUT_CLASSIFICATION	0.04054063360900385	DESIGN
// this property belongs to the table, and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9948322438040621	WITHOUT_CLASSIFICATION	0.0051677561959378605	DESIGN
// check to see if the connection is in auto-commit  // mode (no connection means aggressive connection // release outside a JTA transaction context, so MUST // be autocommit mode)	WITHOUT_CLASSIFICATION	0.9627104653721336	WITHOUT_CLASSIFICATION	0.037289534627866425	DESIGN
// need to treat this as if it where optimistic-lock="all" (dirty does *not* make sense); // first we need to locate the "loaded" state // // Note, it potentially could be a proxy, so perform the location the safe way...	WITHOUT_CLASSIFICATION	0.8764518872840448	WITHOUT_CLASSIFICATION	0.12354811271595524	DESIGN
// we *always* assume an instance with a null // identifier or no identifier property is unsaved!	WITHOUT_CLASSIFICATION	0.9969268078816874	WITHOUT_CLASSIFICATION	0.0030731921183125726	DESIGN
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.9923298173878656	WITHOUT_CLASSIFICATION	0.007670182612134382	DESIGN
//allow any identifier quoted with backtick //only recognizes identifiers beginning with a letter	WITHOUT_CLASSIFICATION	0.990349250902361	WITHOUT_CLASSIFICATION	0.009650749097638928	DESIGN
//following doesn't handle (null, not null) but unnecessary //since this would mean all rows	WITHOUT_CLASSIFICATION	0.9877674559467267	WITHOUT_CLASSIFICATION	0.012232544053273302	DESIGN
// IMPL NOTE : due to the delayed population of setters (setters cached // 	WITHOUT_CLASSIFICATION	0.9993899430037337	WITHOUT_CLASSIFICATION	6.100569962661397E-4	DESIGN
// we need to dirty check collections, since they can cause an owner // version number increment	WITHOUT_CLASSIFICATION	0.9988184485915851	WITHOUT_CLASSIFICATION	0.001181551408414879	DESIGN
//return the id, so we can use it to reset the proxy id //return result;	WITHOUT_CLASSIFICATION	0.9968552577618116	WITHOUT_CLASSIFICATION	0.003144742238188387	DESIGN
//	WITHOUT_CLASSIFICATION	0.999758407950086	WITHOUT_CLASSIFICATION	2.4159204991409242E-4	DESIGN
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9990516684179442	WITHOUT_CLASSIFICATION	9.483315820556381E-4	DESIGN
// We now have the value of the property-ref we reference.  However, // we need to dig a little deeper, as that property might also be // an entity type, in which case we need to resolve its identitifier	WITHOUT_CLASSIFICATION	0.9997258636601142	WITHOUT_CLASSIFICATION	2.7413633988587234E-4	DESIGN
// Retrieve the value of the designated column in the current row of this // ResultSet object as a java.io.Reader object	WITHOUT_CLASSIFICATION	0.9958023385553064	WITHOUT_CLASSIFICATION	0.004197661444693571	DESIGN
//not absolutely necessary, but helps for some //equals()/hashCode() implementations	WITHOUT_CLASSIFICATION	0.9942276496925015	WITHOUT_CLASSIFICATION	0.005772350307498534	DESIGN
//this should be a call to resolve(), not resolveIdentifier(),  //'cos it might be a property-ref, and we did not cache the //referenced value	WITHOUT_CLASSIFICATION	0.5804910640126951	WITHOUT_CLASSIFICATION	0.41950893598730493	DESIGN
// If we have <tt>not-found="ignore"</tt> association mapped to a // formula, we always need to dirty check it, so we can update the // second-level cache	WITHOUT_CLASSIFICATION	0.9999121639614178	WITHOUT_CLASSIFICATION	8.783603858225269E-5	DESIGN
// can't just return null here, since that would // cause an owning component to become null	WITHOUT_CLASSIFICATION	0.9994089379602085	WITHOUT_CLASSIFICATION	5.910620397915872E-4	DESIGN
//for arrays, replaceElements() may return a different reference, since //the array length might not match	WITHOUT_CLASSIFICATION	0.9988777400099087	WITHOUT_CLASSIFICATION	0.0011222599900913577	DESIGN
// actual cache of the entries.  soft references are used for both the keys and the // values here since the values pertaining to the MRU entries are kept in a // seperate hard reference cache (to avoid their enqueuement/garbage-collection).	WITHOUT_CLASSIFICATION	0.9997557590999402	WITHOUT_CLASSIFICATION	2.4424090005980745E-4	DESIGN
// as soon as we encounter our first letter, return the substring // from that position	WITHOUT_CLASSIFICATION	0.999279429358043	WITHOUT_CLASSIFICATION	7.205706419570203E-4	DESIGN
// Note : expected in the syntax: //      type=listenerClass //          ({sep}type=listenerClass)* // where {sep} is any whitespace or comma	WITHOUT_CLASSIFICATION	0.9974610159631702	WITHOUT_CLASSIFICATION	0.0025389840368298332	DESIGN
// isTransactionCallbackRegistered denotes whether any Hibernate // Transaction has registered as a callback against this // JDBCContext; only one such callback is allowed.  Directly // serializing this value causes problems with JDBCTransaction, // or really any Transaction impl where the callback is local // to the Transaction instance itself, since that Transaction // is not serialized along with the JDBCContext.  Thus we // handle that fact here explicitly...	WITHOUT_CLASSIFICATION	0.9242126433033081	WITHOUT_CLASSIFICATION	0.07578735669669187	DESIGN
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9706585803701202	WITHOUT_CLASSIFICATION	0.0293414196298798	DESIGN
// We call getKeyFromResultSet() here so that we can know the // key value upon which to perform the breaking logic.  However, // it is also then called from getRowFromResultSet() which is certainly // not the most efficient.  But the call here is needed, and there // currently is no other way without refactoring of the doQuery()/getRowFromResultSet() // methods	WITHOUT_CLASSIFICATION	0.99700003596104	WITHOUT_CLASSIFICATION	0.002999964038959877	DESIGN
// This check is needed since processing leaves the cursor // after the last physical row for the current logical row; // thus if we are after the last physical row, this might be // caused by either: //      1) scrolling to the last logical row //      2) scrolling past the last logical row // In the latter scenario, the previous logical row // really is the last logical row. // // In all other cases, we should process back two // logical records (the current logic row, plus the // previous logical row).	WITHOUT_CLASSIFICATION	0.8388305078929839	DESIGN	0.16116949210701603	WITHOUT_CLASSIFICATION
// and perform the load	WITHOUT_CLASSIFICATION	0.9999889129917682	WITHOUT_CLASSIFICATION	1.1087008231830178E-5	DESIGN
//important: reuse the same event instances for performance!	WITHOUT_CLASSIFICATION	0.9934121290336392	WITHOUT_CLASSIFICATION	0.006587870966360777	DESIGN
//this is a query and we are loading multiple instances of the same collection role	WITHOUT_CLASSIFICATION	0.5912241306734588	WITHOUT_CLASSIFICATION	0.40877586932654136	DESIGN
// we found a collection element in the result set	WITHOUT_CLASSIFICATION	0.992710891303047	WITHOUT_CLASSIFICATION	0.007289108696952958	DESIGN
// we did not find a collection element in the result set, so we // ensure that a collection is created with the owner's identifier, // since what we have is an empty collection	WITHOUT_CLASSIFICATION	0.9993007373906911	WITHOUT_CLASSIFICATION	6.992626093088671E-4	DESIGN
// this is a collection initializer, so we must create a collection // for each of the passed-in keys, to account for the possibility // that the collection is empty and has no rows in the result set	WITHOUT_CLASSIFICATION	0.94815191776701	WITHOUT_CLASSIFICATION	0.051848082232989895	DESIGN
// grab its state from the ResultSet and keep it in the Session // (but don't yet initialize the object itself) // note that we acquire LockMode.READ even if it was not requested	WITHOUT_CLASSIFICATION	0.9991376215564808	WITHOUT_CLASSIFICATION	8.623784435193145E-4	DESIGN
// a many-to-many; // decrement currentDepth here to allow join across the association table // without exceeding MAX_FETCH_DEPTH (i.e. the "currentDepth - 1" bit)	WITHOUT_CLASSIFICATION	0.9829225288595764	WITHOUT_CLASSIFICATION	0.017077471140423545	DESIGN
// if not a composite key, use "foo in (?, ?, ?)" for batching // if no batch, and not a composite key, use "foo = ?"	WITHOUT_CLASSIFICATION	0.9997127837625034	WITHOUT_CLASSIFICATION	2.8721623749656E-4	DESIGN
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9997103028726907	WITHOUT_CLASSIFICATION	2.896971273092738E-4	DESIGN
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9850587884004526	WITHOUT_CLASSIFICATION	0.014941211599547364	DESIGN
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9850587884004526	WITHOUT_CLASSIFICATION	0.014941211599547364	DESIGN
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.9826934221195818	WITHOUT_CLASSIFICATION	0.017306577880418332	DESIGN
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9995450257512539	WITHOUT_CLASSIFICATION	4.549742487460667E-4	DESIGN
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.999404854339682	WITHOUT_CLASSIFICATION	5.951456603180652E-4	DESIGN
/**	WITHOUT_CLASSIFICATION	0.6232293811851914	DESIGN	0.3767706188148086	WITHOUT_CLASSIFICATION
// ignore	WITHOUT_CLASSIFICATION	0.9996214555833285	WITHOUT_CLASSIFICATION	3.7854441667148255E-4	DESIGN
// ignore	WITHOUT_CLASSIFICATION	0.9996214555833285	WITHOUT_CLASSIFICATION	3.7854441667148255E-4	DESIGN
//        }	WITHOUT_CLASSIFICATION	0.9994620518272417	WITHOUT_CLASSIFICATION	5.379481727583334E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.999758407950086	WITHOUT_CLASSIFICATION	2.4159204991409242E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.999758407950086	WITHOUT_CLASSIFICATION	2.4159204991409242E-4	DESIGN
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9986484166638245	WITHOUT_CLASSIFICATION	0.001351583336175472	DESIGN
//	WITHOUT_CLASSIFICATION	0.999758407950086	WITHOUT_CLASSIFICATION	2.4159204991409242E-4	DESIGN
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.9991671381424048	WITHOUT_CLASSIFICATION	8.328618575951792E-4	DESIGN
// at this point we have (drivingSqlAlias) the SQL alias of the driving table // corresponding to the given user alias.  However, the driving table is not // (necessarily) the table against which we want to apply locks.  Mainly, // the exception case here is joined-subclass hierarchies where we instead // want to apply the lock against the root table (for all other strategies, // it just happens that driving and root are the same).	WITHOUT_CLASSIFICATION	0.9802631163862146	WITHOUT_CLASSIFICATION	0.019736883613785502	DESIGN
// the column doesnt exist at all.	WITHOUT_CLASSIFICATION	0.9995781325557994	WITHOUT_CLASSIFICATION	4.2186744420054313E-4	DESIGN
// we have a mapped identifier property and the root of // the incoming property path matched that identifier // property	WITHOUT_CLASSIFICATION	0.9994510060179135	WITHOUT_CLASSIFICATION	5.489939820864961E-4	DESIGN
// we have an embedded composite identifier	WITHOUT_CLASSIFICATION	0.9993751206561164	WITHOUT_CLASSIFICATION	6.248793438835871E-4	DESIGN
// both many-to-one and one-to-one are represented as a // Property.  EntityPersister is relying on this value to // determine "lazy fetch groups" in terms of field-level // interception.  So we need to make sure that we return // true here for the case of many-to-one and one-to-one // with lazy="no-proxy" // // * impl note - lazy="no-proxy" currently forces both // lazy and unwrap to be set to true.  The other case we // are extremely interested in here is that of lazy="proxy" // where lazy is set to true, but unwrap is set to false. // thus we use both here under the assumption that this // return is really only ever used during persister // construction to determine the lazy property/field fetch // groupings.  If that assertion changes then this check // needs to change as well.  Partially, this is an issue with // the overloading of the term "lazy" here...	WITHOUT_CLASSIFICATION	0.9405539132488383	DESIGN	0.05944608675116158	WITHOUT_CLASSIFICATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9964135636744231	WITHOUT_CLASSIFICATION	0.0035864363255769457	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9964135636744231	WITHOUT_CLASSIFICATION	0.0035864363255769457	DESIGN
/*rootTableName = persistentClass.getRootTable().getQualifiedName( 	WITHOUT_CLASSIFICATION	0.9993152066625991	WITHOUT_CLASSIFICATION	6.847933374010019E-4	DESIGN
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9997952314504504	WITHOUT_CLASSIFICATION	2.047685495496311E-4	DESIGN
// Custom sql	WITHOUT_CLASSIFICATION	0.9997952314504504	WITHOUT_CLASSIFICATION	2.047685495496311E-4	DESIGN
/*protected void initPropertyPaths(	WITHOUT_CLASSIFICATION	0.9937970112403633	WITHOUT_CLASSIFICATION	0.0062029887596366795	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993232207011862	WITHOUT_CLASSIFICATION	6.767792988138589E-4	DESIGN
//Custom SQL (would be better if these were private)	WITHOUT_CLASSIFICATION	0.9886561553092706	WITHOUT_CLASSIFICATION	0.011343844690729233	DESIGN
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9953419840417179	WITHOUT_CLASSIFICATION	0.00465801595828207	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993232207011862	WITHOUT_CLASSIFICATION	6.767792988138589E-4	DESIGN
// aliases for identifier ( alias.id ); skip if the entity defines a non-id property named 'id'	WITHOUT_CLASSIFICATION	0.9996937344615702	WITHOUT_CLASSIFICATION	3.062655384298786E-4	DESIGN
//decide which ResultSet to get the property value from:	WITHOUT_CLASSIFICATION	0.9971422907638771	WITHOUT_CLASSIFICATION	0.0028577092361228473	DESIGN
//note: it is conceptually possible that a UserType could map null to //	WITHOUT_CLASSIFICATION	0.9988521528031772	WITHOUT_CLASSIFICATION	0.0011478471968228187	DESIGN
// the contract of EntityTuplizer.determineConcreteSubclassEntityName says that returning null // is an indication that the specified entity-name (this.getEntityName) should be used.	WITHOUT_CLASSIFICATION	0.9869046882966503	WITHOUT_CLASSIFICATION	0.013095311703349528	DESIGN
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.9923298173878656	WITHOUT_CLASSIFICATION	0.007670182612134382	DESIGN
// cache these since they are stateless // this one could even be static...	WITHOUT_CLASSIFICATION	0.9989588880029171	WITHOUT_CLASSIFICATION	0.0010411119970828958	DESIGN
//"as" is not in KEYWORDS	WITHOUT_CLASSIFICATION	0.9996919124489766	WITHOUT_CLASSIFICATION	3.080875510234194E-4	DESIGN
// --Commented out by Inspection (12/4/04 9:10 AM): public abstract void addCondition(String alias, String[] columns, String condition);	WITHOUT_CLASSIFICATION	0.9972163753873156	WITHOUT_CLASSIFICATION	0.0027836246126845374	DESIGN
//use the id column alias	WITHOUT_CLASSIFICATION	0.9999451833543208	WITHOUT_CLASSIFICATION	5.481664567927282E-5	DESIGN
//private List aliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9994610873364302	WITHOUT_CLASSIFICATION	5.389126635697807E-4	DESIGN
//columns.add(columnName); //aliases.add(tableAlias);	WITHOUT_CLASSIFICATION	0.9942892606861524	WITHOUT_CLASSIFICATION	0.005710739313847541	DESIGN
//where fragment must be empty!	WITHOUT_CLASSIFICATION	0.9881906923791665	WITHOUT_CLASSIFICATION	0.011809307620833447	DESIGN
// revert to traditional hibernate behavior of setting initialPoolSize to minPoolSize // unless otherwise specified with a c3p0.*-style parameter.	WITHOUT_CLASSIFICATION	0.9984372749349457	WITHOUT_CLASSIFICATION	0.0015627250650543235	DESIGN
//arbitrary on clause ignored!!	WITHOUT_CLASSIFICATION	0.9928259711229529	WITHOUT_CLASSIFICATION	0.007174028877047111	DESIGN
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9946733265313615	WITHOUT_CLASSIFICATION	0.005326673468638423	DESIGN
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9946733265313615	WITHOUT_CLASSIFICATION	0.005326673468638423	DESIGN
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9954194647301574	WITHOUT_CLASSIFICATION	0.004580535269842531	DESIGN
// Essentially: // 1) If we have a local (Hibernate) transaction in progress //      and it already has the UserTransaction cached, use that //      UserTransaction to determine the status. // 2) If a transaction manager has been located, use //      that transaction manager to determine the status. // 3) Finally, as the last resort, try to lookup the //      UserTransaction via JNDI and use that to determine the //      status.	WITHOUT_CLASSIFICATION	0.8991892646531143	WITHOUT_CLASSIFICATION	0.10081073534688569	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.9982660483085283	WITHOUT_CLASSIFICATION	0.0017339516914716315	DESIGN
//swallow it (the transaction _was_ successful or successfully rolled back)	WITHOUT_CLASSIFICATION	0.9933635666671414	WITHOUT_CLASSIFICATION	0.0066364333328586865	DESIGN
// ignore it	WITHOUT_CLASSIFICATION	0.9997213649063703	WITHOUT_CLASSIFICATION	2.786350936296675E-4	DESIGN
// we need to dirty check many-to-ones with not-found="ignore" in order  // to update the cache (not the database), since in this case a null // entity reference can lose information	WITHOUT_CLASSIFICATION	0.9986462756836876	WITHOUT_CLASSIFICATION	0.0013537243163123545	DESIGN
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9997855296489335	WITHOUT_CLASSIFICATION	2.1447035106635768E-4	DESIGN
// Regions can get instantiated in the course of normal work (e.g. // a named query region will be created the first time the query is // executed), so suspend any ongoing tx	WITHOUT_CLASSIFICATION	0.9998271955271789	WITHOUT_CLASSIFICATION	1.7280447282110712E-4	DESIGN
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9991327825927296	WITHOUT_CLASSIFICATION	8.672174072702844E-4	DESIGN
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9989929822793889	WITHOUT_CLASSIFICATION	0.001007017720611159	DESIGN
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9824681759505894	WITHOUT_CLASSIFICATION	0.017531824049410658	DESIGN
// NOTE : this is being used from the process of shutting down a // SessionFactory. Specific things to consider: // (1) this clearing of the region should not propagate to // other nodes on the cluster (if any); this is the // cache-mode-local option bit... // (2) really just trying a best effort to cleanup after // ourselves; lock failures, etc are not critical here; // this is the fail-silently option bit...	WITHOUT_CLASSIFICATION	0.9115182436098427	WITHOUT_CLASSIFICATION	0.08848175639015729	DESIGN
// need to extract the component values and check for subtype replacements...	WITHOUT_CLASSIFICATION	0.9998438203347205	WITHOUT_CLASSIFICATION	1.5617966527948135E-4	DESIGN
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9980033076767629	WITHOUT_CLASSIFICATION	0.001996692323237125	DESIGN
// for now, just "re-flatten" the metamodel since this is temporary stuff anyway (HHH-1907)	WITHOUT_CLASSIFICATION	0.9549601769077231	WITHOUT_CLASSIFICATION	0.04503982309227707	DESIGN
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9993242171722266	WITHOUT_CLASSIFICATION	6.757828277734176E-4	DESIGN
//This solution would allow us to eliminate the owner arg to disassemble(), but //what if the collection was null, and then later had elements added? seems unsafe //session.getPersistenceContext().getCollectionEntry( (PersistentCollection) value ).getKey();	WITHOUT_CLASSIFICATION	0.9180222067182138	WITHOUT_CLASSIFICATION	0.08197779328178621	DESIGN
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9998792678036909	WITHOUT_CLASSIFICATION	1.2073219630917883E-4	DESIGN
// some collections are not lazy:	WITHOUT_CLASSIFICATION	0.9994821368702834	WITHOUT_CLASSIFICATION	5.178631297166448E-4	DESIGN
// Here we don't want to suspend the tx. If we do: // 1) We might be caching query results that reflect uncommitted // changes. No tx == no WL on cache node, so other threads // can prematurely see those query results // 2) No tx == immediate replication. More overhead, plus we // spread issue #1 above around the cluster	WITHOUT_CLASSIFICATION	0.9894408963876021	WITHOUT_CLASSIFICATION	0.010559103612397749	DESIGN
// return the (fully resolved) identifier value, but do not resolve // to the actual referenced entity instance // NOTE: the owner of the association is not really the owner of the id!	WITHOUT_CLASSIFICATION	0.9999709905143475	WITHOUT_CLASSIFICATION	2.9009485652643575E-5	DESIGN
// Add a zero (or quite low) timeout option so we don't block. // Ignore any TimeoutException. Basically we forego caching the // query result in order to avoid blocking. // Reads are done with suspended tx, so they should not hold the // lock for long.  Not caching the query result is OK, since // any subsequent read will just see the old result with its // out-of-date timestamp; that result will be discarded and the // db query performed again.	WITHOUT_CLASSIFICATION	0.9711109450854021	WITHOUT_CLASSIFICATION	0.02888905491459787	DESIGN
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9980323416277154	WITHOUT_CLASSIFICATION	0.0019676583722846833	DESIGN
// We have the JBCWriteMutex, so no other *local* thread will  // be trying to write this key.  // It's possible here some remote thread has come in and // changed the values again, but since we are reading the // values to write to JBC right now, we know we are writing // the latest values; i.e. we don't assume that what we cached // in entry.update() above is what we should write to JBC *now*. // Our write could be redundant, i.e. we are writing what // some remote thread just came in an wrote.  There is a chance  // that yet another remote thread will update us, and we'll then // overwrite that later data in JBC.  But, all remote nodes will // ignore that change in their localCache; the only place it  // will live will be in JBC, where it can only effect the  // initial state transfer values on newly joined nodes  // (i.e. populateLocalCache()).	WITHOUT_CLASSIFICATION	0.9995756736128283	WITHOUT_CLASSIFICATION	4.243263871716509E-4	DESIGN
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9814881829504696	WITHOUT_CLASSIFICATION	0.018511817049530317	DESIGN
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9814881829504696	WITHOUT_CLASSIFICATION	0.018511817049530317	DESIGN
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9993131881638091	WITHOUT_CLASSIFICATION	6.868118361908672E-4	DESIGN
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9024674767958573	WITHOUT_CLASSIFICATION	0.09753252320414268	DESIGN
// we need to obtain the lock before any actions are // executed, since this may be an inverse="true" // bidirectional association and it is one of the // earlier entity actions which actually updates // the database (this action is resposible for // second-level cache invalidation only)	WITHOUT_CLASSIFICATION	0.982249295341668	WITHOUT_CLASSIFICATION	0.017750704658332023	DESIGN
//postDelete: // After actually deleting a row, record the fact that the instance no longer  // exists on the database (needed for identity-column key generation), and // remove it from the session cache	WITHOUT_CLASSIFICATION	0.9935149278703395	WITHOUT_CLASSIFICATION	0.006485072129660574	DESIGN
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999681029284155	WITHOUT_CLASSIFICATION	3.189707158448681E-5	DESIGN
// todo : what else to do here?	DESIGN	0.9949358658375332	WITHOUT_CLASSIFICATION	0.005064134162466761	DESIGN
//put() has nowait semantics, is this really appropriate? //note that it needs to be async replication, never local or sync	DESIGN	0.535890882490128	WITHOUT_CLASSIFICATION	0.4641091175098719	DESIGN
// 'hibernate.temp.use_jdbc_metadata_defaults' is a temporary magic value. // The need for it is intended to be alleviated with future developement, thus it is // not defined as an Environment constant... // // it is used to control whether we should consult the JDBC metadata to determine // certain Settings default values; it is useful to *not* do this when the database // may not be available (mainly in tools usage).	DESIGN	0.9225915657215331	DESIGN	0.07740843427846684	WITHOUT_CLASSIFICATION
//TODO: get SQL rendering out of this package!	DESIGN	0.9767419255073603	WITHOUT_CLASSIFICATION	0.02325807449263976	DESIGN
//TODO: get SQL rendering out of this package!	DESIGN	0.9767419255073603	WITHOUT_CLASSIFICATION	0.02325807449263976	DESIGN
// todo : eventually merge this with TreeCache and just add optional opt-lock support there.	DESIGN	0.9980671954370524	WITHOUT_CLASSIFICATION	0.001932804562947559	DESIGN
// can happen because of the multiple ways Cache.remove() // can be invoked :(	DESIGN	0.9994531813478087	WITHOUT_CLASSIFICATION	5.468186521912859E-4	DESIGN
// work around the "feature" where tree cache is validating the // inserted node during the next transaction.  no idea...	DESIGN	0.9979666888530684	WITHOUT_CLASSIFICATION	0.002033311146931653	DESIGN
/**     * FIXME Per the RegionFactory class Javadoc, this constructor version     * should not be necessary.     *      * @param props The configuration properties     */	DESIGN	0.9926189299091088	WITHOUT_CLASSIFICATION	0.007381070090891282	DESIGN
/**     * FIXME Per the RegionFactory class Javadoc, this constructor version     * should not be necessary.     *      * @param props The configuration properties     */	DESIGN	0.9926189299091088	WITHOUT_CLASSIFICATION	0.007381070090891282	DESIGN
// FIXME Hacky workaround to JBCACHE-1202	DESIGN	0.9768197194956985	WITHOUT_CLASSIFICATION	0.0231802805043015	DESIGN
// FIXME Hacky workaround to JBCACHE-1202	DESIGN	0.9768197194956985	WITHOUT_CLASSIFICATION	0.0231802805043015	DESIGN
// TODO: I considered validating TS cache config here, // but decided to defer unti getTimestampsCacheInstance() in case the  // cache is never actually used	DESIGN	0.7810049583977536	DESIGN	0.21899504160224645	WITHOUT_CLASSIFICATION
// TODO Is this a valid operation on a timestamps cache?	DESIGN	0.9841485050445063	DESIGN	0.015851494955493706	WITHOUT_CLASSIFICATION
// TODO Is this a valid operation on a timestamps cache?	DESIGN	0.9841485050445063	DESIGN	0.015851494955493706	WITHOUT_CLASSIFICATION
// TODO Why not use the timestamp in a DataVersion?	DESIGN	0.7564400314415805	DESIGN	0.2435599685584197	WITHOUT_CLASSIFICATION
// can happen because of the multiple ways Cache.remove() // can be invoked :(	DESIGN	0.9994531813478087	WITHOUT_CLASSIFICATION	5.468186521912859E-4	DESIGN
// work around the "feature" where tree cache is validating the // inserted node during the next transaction. no idea...	DESIGN	0.9989028655418705	WITHOUT_CLASSIFICATION	0.0010971344581295996	DESIGN
//swaldman 2004-02-07: modify to allow null values to signify fall through to c3p0 PoolConfig defaults	DESIGN	0.9887461825090029	WITHOUT_CLASSIFICATION	0.011253817490997154	DESIGN
// turn hibernate.c3p0.* into c3p0.*, so c3p0 // gets a chance to see all hibernate.c3p0.*	DESIGN	0.9843334087369207	WITHOUT_CLASSIFICATION	0.015666591263079385	DESIGN
//TODO: this bit actually has to be called after all cascades! //      but since identity insert is called *synchronously*, //      instead of asynchronously as other actions, it isn't	DESIGN	0.9276815176889233	WITHOUT_CLASSIFICATION	0.0723184823110768	DESIGN
//TODO: reenable if we also fix the above todo	DESIGN	0.8602256861452229	WITHOUT_CLASSIFICATION	0.13977431385477715	DESIGN
//TODO: inefficient if that cache is just going to ignore the updated state!	DESIGN	0.9740449608325868	WITHOUT_CLASSIFICATION	0.025955039167413162	DESIGN
// we may be screwed here since the collection action is about to execute // and we do not know the final owner key value	DESIGN	0.9947470369973339	WITHOUT_CLASSIFICATION	0.005252963002666075	DESIGN
/** Create an action that will evict collection and entity regions based on queryspaces (table names).	DESIGN	0.9714369030852934	DESIGN	0.02856309691470651	WITHOUT_CLASSIFICATION
// todo : what else to do here?	DESIGN	0.9949358658375332	WITHOUT_CLASSIFICATION	0.005064134162466761	DESIGN
// todo : modify the class definition if not already transformed...	DESIGN	0.9999415213089257	WITHOUT_CLASSIFICATION	5.847869107439423E-5	DESIGN
// todo : what else to do here?	DESIGN	0.9949358658375332	WITHOUT_CLASSIFICATION	0.005064134162466761	DESIGN
// this is called by SessionFactory irregardless; we just disregard here; // could also add a check to SessionFactory to only conditionally call start	DESIGN	0.9998930139552812	WITHOUT_CLASSIFICATION	1.0698604471874972E-4	DESIGN
// this is called by SessionFactory irregardless; we just disregard here; // could also add a check to SessionFactory to only conditionally call stop	DESIGN	0.9999161685363537	WITHOUT_CLASSIFICATION	8.383146364635504E-5	DESIGN
//TODO: to handle concurrent writes correctly, this should return a Lock to the client	DESIGN	0.5002680498169384	WITHOUT_CLASSIFICATION	0.4997319501830617	DESIGN
//put() has nowait semantics, is this really appropriate? //note that it needs to be async replication, never local or sync	DESIGN	0.535890882490128	WITHOUT_CLASSIFICATION	0.4641091175098719	DESIGN
//TODO: to handle concurrent writes correctly, the client should pass in a Lock	DESIGN	0.6229507950432023	WITHOUT_CLASSIFICATION	0.3770492049567977	DESIGN
//TODO: assumes all collections disassemble to an array!	DESIGN	0.9832719296277831	WITHOUT_CLASSIFICATION	0.016728070372217005	DESIGN
//TODO: reuse the PreLoadEvent	DESIGN	0.9995833198943732	WITHOUT_CLASSIFICATION	4.166801056267436E-4	DESIGN
// todo: this was added to support initializing an entity's EntityEntry snapshot during reattach; // this should be refactored to instead expose a method to assemble a EntityEntry based on this // state for return.	DESIGN	0.704918408219857	DESIGN	0.29508159178014304	WITHOUT_CLASSIFICATION
// todo : what is the implication of this?	DESIGN	0.9970147463816005	WITHOUT_CLASSIFICATION	0.0029852536183994837	DESIGN
// use COUNT as the default.  This mimics the old behavior, although // NONE might be a better option moving forward in the case of callable	DESIGN	0.952703498748355	WITHOUT_CLASSIFICATION	0.047296501251645015	DESIGN
/* TODO: joinKeyColumnName & foreignKeyColumnName should be called either here or at a	DESIGN	0.9919781617243486	DESIGN	0.008021838275651422	WITHOUT_CLASSIFICATION
//TODO: suck this into initLaziness!	DESIGN	0.5045935041054194	WITHOUT_CLASSIFICATION	0.49540649589458063	DESIGN
// we have to set up the table later!! yuck	DESIGN	0.9998522465990516	WITHOUT_CLASSIFICATION	1.4775340094840271E-4	DESIGN
//TODO: better to degrade to lazy="false" if uninstrumented	DESIGN	0.7602863326248096	WITHOUT_CLASSIFICATION	0.23971366737519048	DESIGN
// todo : again, how *should* this work for non-pojo entities?	DESIGN	0.9984649170353704	WITHOUT_CLASSIFICATION	0.0015350829646296456	DESIGN
// TODO: this is a bit of copy/paste from IndexedCollection.createPrimaryKey()	DESIGN	0.8972758436755314	DESIGN	0.1027241563244686	WITHOUT_CLASSIFICATION
// This inner class implements a case statement....perhaps im being a bit over-clever here	DESIGN	0.990094642729779	WITHOUT_CLASSIFICATION	0.009905357270221059	DESIGN
//TODO: bad implementation, cos it depends upon ordering of mapping doc //      fixing this requires that Collection/PersistentClass gain access //      to the Mappings reference from Configuration (or the filterDefinitions //      map directly) sometime during Configuration.buildSessionFactory //      (after all the types/filter-defs are known and before building //      persisters).	DESIGN	0.9938101576098789	WITHOUT_CLASSIFICATION	0.006189842390121102	DESIGN
//use of a stringbuffer to workaround a JDK bug	DESIGN	0.8187194087199878	WITHOUT_CLASSIFICATION	0.1812805912800121	DESIGN
// hack/workaround as sqlquery impl depend on having a key.	DESIGN	0.9983178212728849	WITHOUT_CLASSIFICATION	0.001682178727115014	DESIGN
//FIXME: get the PersistentClass	DESIGN	0.9984167696796354	WITHOUT_CLASSIFICATION	0.0015832303203645811	DESIGN
//FIXME: get the PersistentClass	DESIGN	0.9984167696796354	WITHOUT_CLASSIFICATION	0.0015832303203645811	DESIGN
//Icky workaround for MySQL bug:	DESIGN	0.7942741752661281	WITHOUT_CLASSIFICATION	0.20572582473387183	DESIGN
//TODO: Somehow add the newly created foreign keys to the internal collection	DESIGN	0.929559145000659	WITHOUT_CLASSIFICATION	0.07044085499934097	DESIGN
//TODO possibly relax that	DESIGN	0.9997789213957415	WITHOUT_CLASSIFICATION	2.2107860425852133E-4	DESIGN
//TODO possibly relax that	DESIGN	0.9997789213957415	WITHOUT_CLASSIFICATION	2.2107860425852133E-4	DESIGN
//TODO possibly relax that	DESIGN	0.9997789213957415	WITHOUT_CLASSIFICATION	2.2107860425852133E-4	DESIGN
//use of a stringbuffer to workaround a JDK bug	DESIGN	0.8187194087199878	WITHOUT_CLASSIFICATION	0.1812805912800121	DESIGN
//use a degenerated strategy for backward compatibility	DESIGN	0.9906078555608119	WITHOUT_CLASSIFICATION	0.009392144439188151	DESIGN
// Sets can be just a view of a part of another collection. // do we need to copy it to be sure it won't be changing // underneath us? // ie. this.set.addAll(set);	DESIGN	0.9994799996596175	WITHOUT_CLASSIFICATION	5.200003403824533E-4	DESIGN
//note that i parameter is now unused (delete it?)	DESIGN	0.9888079634110314	WITHOUT_CLASSIFICATION	0.011192036588968498	DESIGN
//just to help out during the load (ugly, i know)	DESIGN	0.9988178690126188	WITHOUT_CLASSIFICATION	0.0011821309873811389	DESIGN
// TODO : safe to interpret "map.remove(key) == null" as non-dirty?	DESIGN	0.5415363116453749	WITHOUT_CLASSIFICATION	0.4584636883546251	DESIGN
// yick!  need this for proper serialization/deserialization handling...	DESIGN	0.9762274634379428	WITHOUT_CLASSIFICATION	0.023772536562057224	DESIGN
//TODO: get SQL rendering out of this package!	DESIGN	0.9767419255073603	WITHOUT_CLASSIFICATION	0.02325807449263976	DESIGN
//TODO: get SQL rendering out of this package!	DESIGN	0.9767419255073603	WITHOUT_CLASSIFICATION	0.02325807449263976	DESIGN
//yuck!	DESIGN	0.997954794544069	WITHOUT_CLASSIFICATION	0.002045205455931084	DESIGN
//TODO: get SQL rendering out of this package!	DESIGN	0.9767419255073603	WITHOUT_CLASSIFICATION	0.02325807449263976	DESIGN
// TODO : not sure this is correct, could not find docs on how to do this.	DESIGN	0.7626469454474812	DESIGN	0.23735305455251884	WITHOUT_CLASSIFICATION
//HSQL has no Blob/Clob support .... but just put these here for now!	DESIGN	0.9921902024787512	WITHOUT_CLASSIFICATION	0.007809797521248756	DESIGN
// does this need holdlock also? : return tableName + " with (updlock, rowlock, holdlock)";	DESIGN	0.9968634362621357	WITHOUT_CLASSIFICATION	0.0031365637378642044	DESIGN
// sql-server, at least needed this dropped after use; strange!	DESIGN	0.9984447683931603	WITHOUT_CLASSIFICATION	0.001555231606839677	DESIGN
// todo : is there really any reason to kkeep trying if this fails once?	DESIGN	0.9997548111538307	WITHOUT_CLASSIFICATION	2.4518884616929584E-4	DESIGN
// TBD should this be varbinary($1)? //	DESIGN	0.9895360707785439	WITHOUT_CLASSIFICATION	0.010463929221456097	DESIGN
// is it necessary to register %exact since it can only appear in a where clause?	DESIGN	0.9943905897724875	WITHOUT_CLASSIFICATION	0.005609410227512489	DESIGN
// xmlforest requires a new kind of function constructor	DESIGN	0.9997791324167788	WITHOUT_CLASSIFICATION	2.2086758322108097E-4	DESIGN
// Does this dialect support the ALTER TABLE syntax?	DESIGN	0.9905756597440397	WITHOUT_CLASSIFICATION	0.009424340255960366	DESIGN
// Do we need to qualify index names with the schema name?	DESIGN	0.9973287916588583	WITHOUT_CLASSIFICATION	0.0026712083411416314	DESIGN
// Does this dialect support the UNIQUE column syntax?	DESIGN	0.992641065993308	WITHOUT_CLASSIFICATION	0.007358934006691952	DESIGN
// Does this dialect support check constraints?	DESIGN	0.9888920438410421	WITHOUT_CLASSIFICATION	0.01110795615895798	DESIGN
// Do we need to drop constraints before dropping tables in this dialect?	DESIGN	0.9920317914100393	WITHOUT_CLASSIFICATION	0.007968208589960796	DESIGN
// Does this dialect support the FOR UPDATE syntax?	DESIGN	0.9905756597440397	WITHOUT_CLASSIFICATION	0.009424340255960366	DESIGN
// Does this dialect support the Oracle-style FOR UPDATE NOWAIT syntax?	DESIGN	0.9905756597440397	WITHOUT_CLASSIFICATION	0.009424340255960366	DESIGN
// Does this dialect support FOR UPDATE OF, allowing particular rows to be locked?	DESIGN	0.9496434293287661	WITHOUT_CLASSIFICATION	0.050356570671233926	DESIGN
//note there is a wierd implementation in the client side	DESIGN	0.9964551031099764	WITHOUT_CLASSIFICATION	0.0035448968900236807	DESIGN
//TODO: never reached, since getTypeName() actually throws an exception!	DESIGN	0.9838905393396058	WITHOUT_CLASSIFICATION	0.016109460660394263	DESIGN
// todo : should we additionally check the current isolation mode explicitly?	DESIGN	0.998778314257564	WITHOUT_CLASSIFICATION	0.0012216857424360073	DESIGN
// todo : remove this and just have subclasses use Isolater/IsolatedWork directly...	DESIGN	0.9995914658950713	WITHOUT_CLASSIFICATION	4.0853410492866114E-4	DESIGN
//TODO: should orphans really be deleted during lock???	DESIGN	0.7213174607323372	WITHOUT_CLASSIFICATION	0.27868253926766295	DESIGN
// orphans should not be deleted during merge??	DESIGN	0.9956945403467015	WITHOUT_CLASSIFICATION	0.004305459653298551	DESIGN
// orphans should not be deleted during copy??	DESIGN	0.9956945403467015	WITHOUT_CLASSIFICATION	0.004305459653298551	DESIGN
//I suppose?	DESIGN	0.9982660483085283	WITHOUT_CLASSIFICATION	0.0017339516914716315	DESIGN
//TODO: suck this logic into the collection!	DESIGN	0.7080215905021361	WITHOUT_CLASSIFICATION	0.29197840949786397	DESIGN
// TODO: an alternative is to check if the owner has changed; if it hasn't then // get the ID from collection.getOwner()	DESIGN	0.8347990419432447	WITHOUT_CLASSIFICATION	0.1652009580567553	DESIGN
//TODO:refactor + make this method private	DESIGN	0.89809117310985	WITHOUT_CLASSIFICATION	0.10190882689015	DESIGN
// todo : we can actually just determine this from the incoming EntityEntry-s	DESIGN	0.9968167032535774	WITHOUT_CLASSIFICATION	0.0031832967464227096	DESIGN
//TODO: Should this be an InitializeEntityEventListener??? (watch out for performance!)	DESIGN	0.9520844610068011	WITHOUT_CLASSIFICATION	0.047915538993198954	DESIGN
//TODO: better to pass the id in as an argument?	DESIGN	0.949365570999487	WITHOUT_CLASSIFICATION	0.05063442900051304	DESIGN
// todo : potentially look at optimizing these two arrays	DESIGN	0.9996185656685009	WITHOUT_CLASSIFICATION	3.8143433149902186E-4	DESIGN
/* trim done to workaround stupid oracle bug that cant handle whitespaces before a { in a sp */	DESIGN	0.936801266372245	WITHOUT_CLASSIFICATION	0.06319873362775488	DESIGN
/* trim done to workaround stupid oracle bug that cant handle whitespaces before a { in a sp */	DESIGN	0.936801266372245	WITHOUT_CLASSIFICATION	0.06319873362775488	DESIGN
//TODO: temporary	DESIGN	0.7187721114966936	WITHOUT_CLASSIFICATION	0.28122788850330627	DESIGN
//TODO: not quite sure about the full implications of this!	DESIGN	0.9382211692680335	WITHOUT_CLASSIFICATION	0.06177883073196658	DESIGN
//TODO: not quite sure about the full implications of this!	DESIGN	0.9382211692680335	WITHOUT_CLASSIFICATION	0.06177883073196658	DESIGN
//TODO: ugly here:	DESIGN	0.985596707289136	WITHOUT_CLASSIFICATION	0.014403292710864142	DESIGN
//this is kinda the best we can do...	DESIGN	0.9949446408161402	WITHOUT_CLASSIFICATION	0.005055359183859758	DESIGN
//TODO: this needn't exclude subclasses...	DESIGN	0.8859124919738784	WITHOUT_CLASSIFICATION	0.11408750802612161	DESIGN
// todo : need map? the prob is a proper key, right?	DESIGN	0.9978958077117114	WITHOUT_CLASSIFICATION	0.0021041922882886195	DESIGN
// todo : i'd much rather have this done from #endLoadingCollection(CollectionPersister,LoadingCollectionEntry)...	DESIGN	0.9805555367070613	WITHOUT_CLASSIFICATION	0.01944446329293862	DESIGN
// todo : hack!!! // NOTE : here we cleanup the load context when we have no more local // LCE entries.  This "works" for the time being because really // only the collection load contexts are implemented.  Long term, // this cleanup should become part of the "close result set" // processing from the (sandbox/jdbc) jdbc-container code.	DESIGN	0.9353716478514659	DESIGN	0.06462835214853412	WITHOUT_CLASSIFICATION
// todo : should really move this log statement to CollectionType, where this is used from...	DESIGN	0.8932373092256437	WITHOUT_CLASSIFICATION	0.10676269077435625	DESIGN
// TODO : keep seperate notions of QT[] here for shallow/non-shallow queries...	DESIGN	0.8262380289262033	DESIGN	0.17376197107379673	WITHOUT_CLASSIFICATION
// TODO : add this info to the translator and aggregate it here...	DESIGN	0.5838772924289912	WITHOUT_CLASSIFICATION	0.4161227075710087	DESIGN
//TODO: move into collection type, so we can use polymorphism!	DESIGN	0.8782239317328202	DESIGN	0.1217760682671798	WITHOUT_CLASSIFICATION
// todo : should we check the current isolation mode explicitly?	DESIGN	0.998778314257564	WITHOUT_CLASSIFICATION	0.0012216857424360078	DESIGN
//TODO: suck into event class	DESIGN	0.99176828466662	WITHOUT_CLASSIFICATION	0.008231715333379915	DESIGN
//do we even really need this? the update will fail anyway....	DESIGN	0.9950248642830798	WITHOUT_CLASSIFICATION	0.004975135716920216	DESIGN
//hum ... should we cascade anyway? throw an exception? fine like it is?	DESIGN	0.6421037495213	DESIGN	0.3578962504786999	WITHOUT_CLASSIFICATION
//TODO: would it be better to do a refresh from db?	DESIGN	0.8093041879283066	DESIGN	0.19069581207169345	WITHOUT_CLASSIFICATION
//TODO: we use two visitors here, inefficient!	DESIGN	0.956345740630557	WITHOUT_CLASSIFICATION	0.043654259369442984	DESIGN
// this class has no proxies (so do a shortcut)	DESIGN	0.9985852054555132	WITHOUT_CLASSIFICATION	0.0014147945444868014	DESIGN
//PostLoad is needed for EJB3 //TODO: reuse the PostLoadEvent...	DESIGN	0.9674468133466643	WITHOUT_CLASSIFICATION	0.0325531866533358	DESIGN
//TODO: put this stuff back in to read snapshot from //      the second-level cache (needs some extra work)	DESIGN	0.9410451753851372	WITHOUT_CLASSIFICATION	0.05895482461486285	DESIGN
// null or brand new collection // this will also (inefficiently) handle arrays, which have // no snapshot, so we can't do any better	DESIGN	0.9714076062736572	WITHOUT_CLASSIFICATION	0.028592393726342844	DESIGN
//TODO: is this 100% correct?	DESIGN	0.9946061416701788	WITHOUT_CLASSIFICATION	0.005393858329821157	DESIGN
// TODO: iteratively get transient entities and retry merge until one of the following conditions: //       1) transientCopyCache.size() == 0 //       2) transientCopyCache.size() is not decreasing and copyCache.size() is not increasing // TODO: find out if retrying can add entities to copyCache (don't think it can...) // For now, just retry once; throw TransientObjectException if there are still any transient entities	DESIGN	0.9942351711099496	WITHOUT_CLASSIFICATION	0.0057648288900503004	DESIGN
// entity name will not be available for non-POJO entities // TODO: cache the entity name somewhere so that it is available to this exception	DESIGN	0.8717389760696103	DESIGN	0.12826102393038977	WITHOUT_CLASSIFICATION
//TODO: we should throw an exception if we really *know* for sure   //      that this is a detached instance, rather than just assuming //throw new StaleObjectStateException(entityName, id);	DESIGN	0.8311598212829879	DESIGN	0.16884017871701193	WITHOUT_CLASSIFICATION
// TODO : perhaps we should additionally require that the incoming entity // version be equivalent to the defined unsaved-value?	DESIGN	0.9550107988759048	DESIGN	0.04498920112409526	WITHOUT_CLASSIFICATION
// perhaps this should be an exception since it is only ever used // in the above method?	DESIGN	0.9957914890356958	WITHOUT_CLASSIFICATION	0.004208510964304175	DESIGN
// Put a placeholder in entries, so we don't recurse back and try to save() the // same object again. QUESTION: should this be done before onSave() is called? // likewise, should it be done before onUpdate()?	DESIGN	0.6412606919641937	DESIGN	0.3587393080358064	WITHOUT_CLASSIFICATION
//TODO: merge into one method!	DESIGN	0.98309106167581	WITHOUT_CLASSIFICATION	0.016908938324190007	DESIGN
//TODO: refactor to .sql package	DESIGN	0.8482149231116388	WITHOUT_CLASSIFICATION	0.15178507688836113	DESIGN
/** * Provides query splitting methods, which were originally in QueryTranslator. * <br> * TODO: This will need to be refactored at some point. * * @author josh */	DESIGN	0.9963841872978751	DESIGN	0.0036158127021247784	WITHOUT_CLASSIFICATION
//TODO: this is one of the ugliest and most fragile pieces of code in Hibernate....	DESIGN	0.5136940582196602	WITHOUT_CLASSIFICATION	0.48630594178033987	DESIGN
// todo : temporary //      needed because currently persister is the one that //      creates and renders the join fragments for inheritence //      hierarchies...	DESIGN	0.9513010479310985	WITHOUT_CLASSIFICATION	0.04869895206890148	DESIGN
// TODO : better way?!?	DESIGN	0.8577684847576313	WITHOUT_CLASSIFICATION	0.14223151524236866	DESIGN
// Not possible to simply re-use the versionPropertyNode here as it causes // OOM errors due to circularity :(	DESIGN	0.9995497114438072	WITHOUT_CLASSIFICATION	4.5028855619274233E-4	DESIGN
//TODO:this is only needed during compilation .. can we eliminate the instvar?	DESIGN	0.9933498925382558	WITHOUT_CLASSIFICATION	0.006650107461744183	DESIGN
// TODO : this is a bit dodgy, come up with a better way to check this (plus see above comment)	DESIGN	0.9874209321510578	DESIGN	0.012579067848942244	WITHOUT_CLASSIFICATION
// even here, if only properties mapped to the "base table" are referenced // in the set and where clauses, this could be handled by the BasicDelegate. // TODO : decide if it is better performance-wise to perform that check, or to simply use the MultiTableUpdateDelegate	DESIGN	0.9664227681530988	DESIGN	0.03357723184690123	WITHOUT_CLASSIFICATION
//TODO: switch statements are always evil! We already had bugs because  //      of forgotten token types. Use polymorphism for this!	DESIGN	0.9879570932760168	WITHOUT_CLASSIFICATION	0.012042906723983268	DESIGN
// TODO : we really need to be able to deal with component paths here also; // this is difficult because the hql-sql grammar expects all those node types // to be FromReferenceNodes.  One potential fix here would be to convert the // IntoClause to just use a FromClause/FromElement combo (as a child of the // InsertStatement) and move all this logic into the InsertStatement.  That's // probably the easiest approach (read: least amount of changes to the grammar // and code), but just doesn't feel right as then an insert would contain // 2 from-clauses	DESIGN	0.999968207603353	DESIGN	3.1792396647088475E-5	WITHOUT_CLASSIFICATION
// really there are two situations where it should be ok to allow the insertion // into properties defined on a superclass: //      1) union-subclass with an abstract root entity //      2) discrim-subclass // // #1 is handled already because of the fact that // UnionSubclassPersister alreay always returns 0 // for this call... // // we may want to disallow it for discrim-subclass just for // consistency-sake (currently does not work anyway)...	DESIGN	0.6124579295702481	DESIGN	0.38754207042975186	WITHOUT_CLASSIFICATION
//yuck!	DESIGN	0.997954794544069	WITHOUT_CLASSIFICATION	0.002045205455931084	DESIGN
// implicit joins are always(?) ok to reuse	DESIGN	0.999420653130984	WITHOUT_CLASSIFICATION	5.793468690159236E-4	DESIGN
// TODO : we may also want to check that the types here map to exactly one column/JDBC-type //      can't think of a situation where arithmetic expression between multi-column mappings //      makes any sense.	DESIGN	0.9959281238453997	DESIGN	0.004071876154600239	WITHOUT_CLASSIFICATION
// we do not know either type //BLIND GUESS!	DESIGN	0.9975630026410508	WITHOUT_CLASSIFICATION	0.0024369973589491423	DESIGN
//TODO: used to be exprNoParens! was this needed?	DESIGN	0.9998608723083952	DESIGN	1.391276916047884E-4	WITHOUT_CLASSIFICATION
// TODO: Replace this with a more elegant solution.	DESIGN	0.9931993367948545	DESIGN	0.006800663205145492	WITHOUT_CLASSIFICATION
// TODO: Should this really return null?  If not, figure out something better to do here.	DESIGN	0.8599356555846027	WITHOUT_CLASSIFICATION	0.14006434441539728	DESIGN
//TODO: get SQL rendering out of this package!	DESIGN	0.9767419255073603	WITHOUT_CLASSIFICATION	0.02325807449263976	DESIGN
// yuck!	DESIGN	0.999758407950086	WITHOUT_CLASSIFICATION	2.4159204991409242E-4	DESIGN
// ignore it; the incoming property could not be found so we // cannot be sure what to do here.  At the very least, the // safest is to simply not apply any dereference toggling...	DESIGN	0.992729424115602	WITHOUT_CLASSIFICATION	0.007270575884397906	DESIGN
// TODO : most of below was taken verbatim from DotNode; should either delegate this logic or super-type it	DESIGN	0.8327681308229917	DESIGN	0.1672318691770082	WITHOUT_CLASSIFICATION
// otherwise, a trim-specification and/or a trim-character // have been specified;  we need to decide which options // are present and "do the right thing" // should leading trim-characters be trimmed? // should trailing trim-characters be trimmed? // the trim-character // the trim-source	DESIGN	0.5031922020601922	DESIGN	0.4968077979398077	WITHOUT_CLASSIFICATION
// todo: we should really just collect these from the various SelectExpressions, rather than regenerating here	DESIGN	0.9850799990764781	WITHOUT_CLASSIFICATION	0.014920000923521831	DESIGN
//TODO: is this a bit ugly?	DESIGN	0.9924311678757592	WITHOUT_CLASSIFICATION	0.007568832124240717	DESIGN
// Need a better way to define the suffixes here...	DESIGN	0.9946228979178182	WITHOUT_CLASSIFICATION	0.005377102082181816	DESIGN
// TODO: something much better - look at the type of the other expression! // TODO: Have comparisonExpression and/or arithmeticExpression rules complete the resolution of boolean nodes.	DESIGN	0.9793710042042737	DESIGN	0.02062899579572636	WITHOUT_CLASSIFICATION
// TODO : what amount of significant digits need to be supported here? //      - from the DecimalFormat docs: //          [significant digits] = [minimum integer digits] + [maximum fraction digits]	DESIGN	0.7787401060822531	DESIGN	0.2212598939177469	WITHOUT_CLASSIFICATION
// Needed the "clazz_" check to work around union-subclasses // TODO : is there a way to tell whether a persister is truly discrim-column based inheritence?	DESIGN	0.7176302526061591	DESIGN	0.2823697473938409	WITHOUT_CLASSIFICATION
//We should actually rework this class to not implement Parser //and just process path expressions in the most convenient way.	DESIGN	0.936033615012817	WITHOUT_CLASSIFICATION	0.06396638498718306	DESIGN
//The class is now way to complex!	DESIGN	0.9956664551139152	WITHOUT_CLASSIFICATION	0.004333544886084847	DESIGN
//TODO: get SQL rendering out of here	DESIGN	0.9623844604358515	WITHOUT_CLASSIFICATION	0.03761553956414866	DESIGN
//TODO: is there a better way?	DESIGN	0.9752997651750622	WITHOUT_CLASSIFICATION	0.024700234824937797	DESIGN
//Must be done here because of side-effect! yuck...	DESIGN	0.9423613935554377	WITHOUT_CLASSIFICATION	0.057638606444562285	DESIGN
//name from a super query (a bit inelegant that it shows up here)	DESIGN	0.98940917459242	WITHOUT_CLASSIFICATION	0.010590825407580095	DESIGN
// We should reengineer this class so that, rather than the current ad - // hoc linear approach to processing a stream of tokens, we instead // build up a tree of expressions.	DESIGN	0.7034063666516034	WITHOUT_CLASSIFICATION	0.2965936333483966	DESIGN
// this is ugly here, but needed because its a subquery	DESIGN	0.9994783538366068	WITHOUT_CLASSIFICATION	5.216461633932167E-4	DESIGN
// unhappy about this being public ... is there a better way?	DESIGN	0.6893561547820448	WITHOUT_CLASSIFICATION	0.3106438452179552	DESIGN
// Make sure this is a defined parameter and check the incoming value type // TODO: what should be the actual exception type here?	DESIGN	0.9889618943442625	DESIGN	0.011038105655737589	WITHOUT_CLASSIFICATION
// TODO : this constructor form is *only* used from constructor directly below us; can it go away?	DESIGN	0.9797210787779483	DESIGN	0.020278921222051695	WITHOUT_CLASSIFICATION
//TODO: COPY/PASTE FROM SessionImpl, pull up!	DESIGN	0.9537877860196438	WITHOUT_CLASSIFICATION	0.046212213980356326	DESIGN
// TODO : should remove this exposure //  and have all references to the session's batcher use the ConnectionManager.	DESIGN	0.9186465410888207	DESIGN	0.08135345891117926	WITHOUT_CLASSIFICATION
// todo : should this get moved to PersistentContext? // logically, is PersistentContext the "thing" to which an interceptor gets attached?	DESIGN	0.979055588792669	WITHOUT_CLASSIFICATION	0.020944411207331082	DESIGN
// TODO: what type?	DESIGN	0.6212715375586145	WITHOUT_CLASSIFICATION	0.3787284624413855	DESIGN
// todo : should seriously consider not allowing a txn to begin from a child session //      can always route the request to the root session...	DESIGN	0.9954052793989215	WITHOUT_CLASSIFICATION	0.004594720601078419	DESIGN
// short-circuit for performance...	DESIGN	0.9986320319874449	WITHOUT_CLASSIFICATION	0.0013679680125550703	DESIGN
// not absolutely necessary, but does help with aggressive release	DESIGN	0.9993378332415951	WITHOUT_CLASSIFICATION	6.621667584048819E-4	DESIGN
// TODO : remove these last two as batcher is no longer managing connections	DESIGN	0.5566169358227294	WITHOUT_CLASSIFICATION	0.4433830641772706	DESIGN
//work around a bug in all known connection pools....	DESIGN	0.9911220818150668	WITHOUT_CLASSIFICATION	0.0088779181849332	DESIGN
// TODO : make this the factory for "entity mode related" sessions; // also means making this the target of transaction-synch and the // thing that knows how to cascade things between related sessions // // At that point, perhaps this thing is a "SessionContext", and // ConnectionManager is a "JDBCContext"?  A "SessionContext" should // live in the impl package...	DESIGN	0.9999788391356038	DESIGN	2.1160864396116646E-5	WITHOUT_CLASSIFICATION
//TODO: does this really need to be here? //      does the collection already have //      it's own up-to-date snapshot?	DESIGN	0.7445378771034677	DESIGN	0.25546212289653225	WITHOUT_CLASSIFICATION
//TODO: the i==entitySpan-1 bit depends upon subclass implementation (very bad)	DESIGN	0.9702885910127476	WITHOUT_CLASSIFICATION	0.029711408987252472	DESIGN
/**	DESIGN	0.6232293811851914	DESIGN	0.3767706188148086	WITHOUT_CLASSIFICATION
// todo : add the notion of enabled filters to the CacheKey to differentiate filtered collections from non-filtered; //      but CacheKey is currently used for both collections and entities; would ideally need to define two seperate ones; //      currently this works in conjuction with the check on //      DefaultInitializeCollectionEventHandler.initializeCollectionFromCache() (which makes sure to not read from //      cache with enabled filters). // EARLY EXIT!!!!!	DESIGN	0.9774820030535043	WITHOUT_CLASSIFICATION	0.022517996946495793	DESIGN
//for sets, we should end the collection load after resolving //the entities, since we might call hashCode() on the elements //TODO: or we could do this polymorphically, and have two //      different operations implemented differently for arrays	DESIGN	0.975140763024645	WITHOUT_CLASSIFICATION	0.02485923697535502	DESIGN
//This is not very nice (and quite slow):	DESIGN	0.9931415916687143	WITHOUT_CLASSIFICATION	0.006858408331285651	DESIGN
//use of trim() here is ugly?	DESIGN	0.9992169568502582	WITHOUT_CLASSIFICATION	7.830431497417768E-4	DESIGN
//TODO: this is too conservative; if all preceding joins were  //      also inner joins, we could use an inner join here	DESIGN	0.9811902839010572	WITHOUT_CLASSIFICATION	0.018809716098942688	DESIGN
//TODO: look at the owning property and check that it  //      isn't lazy (by instrumentation)	DESIGN	0.9869256255640422	WITHOUT_CLASSIFICATION	0.013074374435957855	DESIGN
//TODO: inefficient	DESIGN	0.9853681857318148	WITHOUT_CLASSIFICATION	0.014631814268185077	DESIGN
// why does this matter?	DESIGN	0.9997827542582259	WITHOUT_CLASSIFICATION	2.1724574177407448E-4	DESIGN
// from the collection of associations, locate OJA for the // ManyToOne corresponding to this persister to fully // define the many-to-many; we need that OJA so that we can // use its alias here // TODO : is there a better way here?	DESIGN	0.9999677110503932	DESIGN	3.228894960681336E-5	WITHOUT_CLASSIFICATION
//TODO: this class depends directly upon CriteriaImpl,  //      in the impl package ... add a CriteriaImplementor  //      interface	DESIGN	0.8416472088419766	WITHOUT_CLASSIFICATION	0.15835279115802336	DESIGN
//TODO: add a CriteriaImplementor interface //      this class depends directly upon CriteriaImpl in the impl package...	DESIGN	0.9827586143168766	WITHOUT_CLASSIFICATION	0.01724138568312342	DESIGN
// TODO : not so sure this is needed...	DESIGN	0.790746103578955	DESIGN	0.20925389642104497	WITHOUT_CLASSIFICATION
// meant to handle dynamic instantiation queries...(Copy from QueryLoader)	DESIGN	0.9975771708224573	WITHOUT_CLASSIFICATION	0.002422829177542726	DESIGN
// TODO: The order in which entities are saved may matter (e.g., a particular transient entity //       may need to be saved before other transient entities can be saved; //       Keep retrying the batch of transient entities until either: //       1) there are no transient entities left in transientCopyCache //       or 2) no transient entities were saved in the last batch // For now, just run through the transient entities and retry the merge	DESIGN	0.9079001013922197	WITHOUT_CLASSIFICATION	0.0920998986077803	DESIGN
// todo: this might really even be moved into the cfg package and used as the basis for all things which are configurable.	DESIGN	0.6217619284519876	DESIGN	0.3782380715480124	WITHOUT_CLASSIFICATION
// todo : currently expects that the individual with expressions apply to the same sql table join. //      This may not be the case for joined-subclass where the property values //      might be coming from different tables in the joined hierarchy.  At some //      point we should expand this to support that capability.  However, that has //      some difficulties: //          1) the biggest is how to handle ORs when the individual comparisons are //              linked to different sql joins. //          2) here we would need to track each comparison individually, along with //              the join alias to which it applies and then pass that information //              back to the FromElement so it can pass it along to the JoinSequence	DESIGN	0.9874935777246314	DESIGN	0.012506422275368596	WITHOUT_CLASSIFICATION
// this function has a template -> restore output, apply the template and write the result out // TODO: Downcast to avoid using an interface?  Yuck.	DESIGN	0.7845919534444786	WITHOUT_CLASSIFICATION	0.21540804655552132	DESIGN
// at some point the generate phase needs to be moved out of here, // because a single object-level DML might spawn multiple SQL DML // command executions. // // Possible to just move the sql generation for dml stuff, but for // consistency-sake probably best to just move responsiblity for // the generation phase completely into the delegates // (QueryLoader/StatementExecutor) themselves.  Also, not sure why // QueryLoader currently even has a dependency on this at all; does // it need it?  Ideally like to see the walker itself given to the delegates directly...	DESIGN	0.9961227032135158	DESIGN	0.003877296786484162	WITHOUT_CLASSIFICATION
// get the right object from the list ... would it be easier to just call getEntity() ??	DESIGN	0.9492942561445687	WITHOUT_CLASSIFICATION	0.05070574385543131	DESIGN
// TODO should we just collect these like with the collections above?	DESIGN	0.6671676536714957	DESIGN	0.33283234632850434	WITHOUT_CLASSIFICATION
// todo : better to handle dynamic filters through implicit DynamicFilterParameterSpecification // see the discussion there in DynamicFilterParameterSpecification's javadocs as to why // it is currently not done that way.	DESIGN	0.9621744182224881	WITHOUT_CLASSIFICATION	0.037825581777511844	DESIGN
/////////////////////////////////////////////////////////////////////////// // USED ONLY FOR REGRESSION TESTING!!!! // // todo : obviously get rid of all this junk ;) ///////////////////////////////////////////////////////////////////////////	DESIGN	0.9984539919149201	WITHOUT_CLASSIFICATION	0.0015460080850799249	DESIGN
//create an index on the key columns??	DESIGN	0.9981603068073356	WITHOUT_CLASSIFICATION	0.0018396931926643715	DESIGN
//TODO: deprecated, remove eventually	DESIGN	0.9610962138276422	WITHOUT_CLASSIFICATION	0.03890378617235781	DESIGN
//create an index on the key columns??	DESIGN	0.9981603068073356	WITHOUT_CLASSIFICATION	0.0018396931926643715	DESIGN
//TODO: improve this hack!	DESIGN	0.9969688256349203	WITHOUT_CLASSIFICATION	0.003031174365079692	DESIGN
// inheritance cycle detection (paranoid check)	DESIGN	0.9984326311641036	WITHOUT_CLASSIFICATION	0.0015673688358964339	DESIGN
//TODO: remove use of instanceof!	DESIGN	0.9529396879286294	WITHOUT_CLASSIFICATION	0.04706031207137054	DESIGN
//shortcut	DESIGN	0.997954794544069	WITHOUT_CLASSIFICATION	0.002045205455931084	DESIGN
//TODO: handle the case of a foreign key to something other than the pk	DESIGN	0.9761518717588836	WITHOUT_CLASSIFICATION	0.023848128241116387	DESIGN
// create an index on the key columns??	DESIGN	0.9998147568029064	WITHOUT_CLASSIFICATION	1.852431970935218E-4	DESIGN
// todo : remove	DESIGN	0.9998650656018989	WITHOUT_CLASSIFICATION	1.3493439810100533E-4	DESIGN
// todo : remove	DESIGN	0.9998650656018989	WITHOUT_CLASSIFICATION	1.3493439810100533E-4	DESIGN
// todo : remove	DESIGN	0.9998650656018989	WITHOUT_CLASSIFICATION	1.3493439810100533E-4	DESIGN
// todo : throw exception?	DESIGN	0.9999069580050319	WITHOUT_CLASSIFICATION	9.304199496802823E-5	DESIGN
// todo : throw exception?  maybe warn if not the same?	DESIGN	0.9884541057761358	WITHOUT_CLASSIFICATION	0.011545894223864163	DESIGN
//TODO: make EntityPersister *not* depend on SessionFactoryImplementor //interface, if possible	DESIGN	0.6556617513121048	WITHOUT_CLASSIFICATION	0.3443382486878951	DESIGN
//TODO: is there a more elegant way than downcasting?	DESIGN	0.6989889798589496	DESIGN	0.3010110201410504	WITHOUT_CLASSIFICATION
// TODO: encapsulate the protected instance variables!	DESIGN	0.6374198318899837	WITHOUT_CLASSIFICATION	0.3625801681100163	DESIGN
// should indicate that we are processing an INSERT/UPDATE/DELETE // query with a subquery implied via a collection property // function. Here, we need to use the table name itself as the // qualification alias. // TODO : verify this works for all databases... // TODO : is this also the case in non-"indexed" scenarios?	DESIGN	0.9939846049568145	DESIGN	0.006015395043185517	WITHOUT_CLASSIFICATION
//TODO: copy/paste from insertRows()	DESIGN	0.9319215522143561	WITHOUT_CLASSIFICATION	0.06807844778564395	DESIGN
//TODO: copy/paste from recreate()	DESIGN	0.9319215522143561	WITHOUT_CLASSIFICATION	0.06807844778564395	DESIGN
//should this interface extend PropertyMapping?	DESIGN	0.9156838542222399	WITHOUT_CLASSIFICATION	0.08431614577776017	DESIGN
//ie. the subquery! yuck!	DESIGN	0.999940286523996	WITHOUT_CLASSIFICATION	5.9713476003900354E-5	DESIGN
//TODO: move to .sql package!!	DESIGN	0.995546009704393	WITHOUT_CLASSIFICATION	0.004453990295607014	DESIGN
//TODO: code duplication with SingleTableEntityPersister	DESIGN	0.5843205448319576	WITHOUT_CLASSIFICATION	0.41567945516804233	DESIGN
// TODO: It would be really, really nice to use this to also model components!	DESIGN	0.984443011610622	DESIGN	0.015556988389377958	WITHOUT_CLASSIFICATION
//TODO: *two* hashmap lookups here is one too many...	DESIGN	0.7029304646702987	WITHOUT_CLASSIFICATION	0.29706953532970115	DESIGN
//TODO: code duplication with JoinedSubclassEntityPersister	DESIGN	0.5843205448319576	WITHOUT_CLASSIFICATION	0.41567945516804233	DESIGN
//perhaps not really necessary...	DESIGN	0.9958351472928587	WITHOUT_CLASSIFICATION	0.004164852707141202	DESIGN
// NOTE: this assumes something about how propertySelectFragment is implemented by the subclass! // was toUnqotedAliasStrings( getIdentiferColumnNames() ) before - now tried // to remove that unqoting and missing aliases..	DESIGN	0.9991645552029131	WITHOUT_CLASSIFICATION	8.35444797086861E-4	DESIGN
// NOTE: this assumes something about how propertySelectFragment is implemented by the subclass! // was toUnqotedAliasStrings( getdiscriminatorColumnName() ) before - now tried // to remove that unqoting and missing aliases..	DESIGN	0.9991645552029131	WITHOUT_CLASSIFICATION	8.35444797086861E-4	DESIGN
//TODO: should we use SELECT .. FOR UPDATE?	DESIGN	0.5978356510067357	WITHOUT_CLASSIFICATION	0.4021643489932643	DESIGN
//TODO: optimize this better!	DESIGN	0.9964223746406814	WITHOUT_CLASSIFICATION	0.0035776253593184965	DESIGN
//TODO: should we allow suffixes on these ?	DESIGN	0.9164528826944653	DESIGN	0.08354711730553471	WITHOUT_CLASSIFICATION
//This is really ugly, but necessary:	DESIGN	0.9955609762445728	WITHOUT_CLASSIFICATION	0.004439023755427094	DESIGN
//ugly little workaround for fact that createUniqueKeyLoaders() does not handle component properties	DESIGN	0.7993487899514135	WITHOUT_CLASSIFICATION	0.20065121004858658	DESIGN
//TODO: disable batch loading if lockMode > READ?	DESIGN	0.9598666976954283	WITHOUT_CLASSIFICATION	0.040133302304571704	DESIGN
// append the SQL to return the generated identifier //TODO: suck into Insert	DESIGN	0.9884220294735808	WITHOUT_CLASSIFICATION	0.011577970526419077	DESIGN
//TODO: I am not so sure about the exception handling in this bit!	DESIGN	0.7723493302486567	WITHOUT_CLASSIFICATION	0.2276506697513432	DESIGN
//TODO: is this really necessary????	DESIGN	0.8439447676180881	WITHOUT_CLASSIFICATION	0.156055232381912	DESIGN
//TODO: move to .sql package, and refactor with similar things!	DESIGN	0.8414730772852796	WITHOUT_CLASSIFICATION	0.1585269227147203	DESIGN
//TODO: implement functionality //  this might be painful to do here, as the "join post processing" for //  the subquery has already been performed (meaning that for //  theta-join dialects, the join conditions have already been moved //  over to the where clause).  A "simple" solution here might to //  perform "join post processing" once for the entire query (including //  any subqueries) at one fell swoop	DESIGN	0.9956624770270207	DESIGN	0.004337522972979291	WITHOUT_CLASSIFICATION
// todo : this eventually needs to be removed	DESIGN	0.9837149582533757	WITHOUT_CLASSIFICATION	0.01628504174662428	DESIGN
//kinda ugly, but needed for collections with a "." node mapping	DESIGN	0.9906932220040773	WITHOUT_CLASSIFICATION	0.009306777995922758	DESIGN
//is this ok?	DESIGN	0.9954548897668007	WITHOUT_CLASSIFICATION	0.00454511023319921	DESIGN
//TODO: perhaps this should be some other RuntimeException...	DESIGN	0.7297770922228239	DESIGN	0.27022290777717606	WITHOUT_CLASSIFICATION
//TODO: make this a bit nicer	DESIGN	0.9595102299389331	WITHOUT_CLASSIFICATION	0.04048977006106687	DESIGN
//Yuck:	DESIGN	0.997954794544069	WITHOUT_CLASSIFICATION	0.002045205455931084	DESIGN
//TODO: we should provide some way to get keys of collection of statistics to make it easier to retrieve from a GUI perspective	DESIGN	0.9607806369367784	DESIGN	0.03921936306322165	WITHOUT_CLASSIFICATION
/**	DESIGN	0.6232293811851914	DESIGN	0.3767706188148086	WITHOUT_CLASSIFICATION
// TODO : will need reference to session factory to fully complete HHH-1907	DESIGN	0.8927852174745046	DESIGN	0.10721478252549543	WITHOUT_CLASSIFICATION
//TODO: currently keeps Getters and Setters (instead of PropertyAccessors) because of the way getGetter() and getSetter() are implemented currently; yuck!	DESIGN	0.9787561527818162	WITHOUT_CLASSIFICATION	0.021243847218183898	DESIGN
//TODO: redesign how PropertyAccessors are acquired...	DESIGN	0.9632642603349971	WITHOUT_CLASSIFICATION	0.036735739665002966	DESIGN
// todo : YUCK!!!	DESIGN	0.999829466405458	WITHOUT_CLASSIFICATION	1.7053359454205884E-4	DESIGN
// TODO : YUCK!!!  fix after HHH-1907 is complete	DESIGN	0.9871285800304999	DESIGN	0.01287141996950019	WITHOUT_CLASSIFICATION
//TODO: need to make the majority of this functionality into a top-level support class for custom impl support	DESIGN	0.9887764495086803	DESIGN	0.011223550491319711	WITHOUT_CLASSIFICATION
//TODO: design new lifecycle for ProxyFactory	DESIGN	0.9459487716111965	WITHOUT_CLASSIFICATION	0.05405122838880337	DESIGN
//TODO: would be nice to handle proxy classes elegantly!	DESIGN	0.8442747744094704	WITHOUT_CLASSIFICATION	0.15572522559052962	DESIGN
// TODO: copy/paste from ManyToOneType	DESIGN	0.6297654398044341	DESIGN	0.37023456019556594	WITHOUT_CLASSIFICATION
//TODO: should this be Session.instantiate(Persister, ...)?	DESIGN	0.5660354549052118	WITHOUT_CLASSIFICATION	0.4339645450947882	DESIGN
//TODO: this is a bit arbitrary, expose a switch to the user?	DESIGN	0.867923854391001	WITHOUT_CLASSIFICATION	0.13207614560899905	DESIGN
//TODO: implement caching?! proxies?!	DESIGN	0.8099679447764833	WITHOUT_CLASSIFICATION	0.1900320552235168	DESIGN
//TODO: is this right??	DESIGN	0.9946061416701788	WITHOUT_CLASSIFICATION	0.005393858329821157	DESIGN
// is this really necessary?	DESIGN	0.999928907614097	WITHOUT_CLASSIFICATION	7.109238590293392E-5	DESIGN
//TODO: move these to a new JoinableType abstract class, //extended by EntityType and PersistentCollectionType:	DESIGN	0.5503077869072466	WITHOUT_CLASSIFICATION	0.4496922130927535	DESIGN
// TODO: this is very suboptimal for some subclasses (namely components), // since it does not take advantage of two-phase-load	DESIGN	0.5552947194573986	DESIGN	0.44470528054260144	WITHOUT_CLASSIFICATION
// worrying about proxies is perhaps a little bit of overkill here...	DESIGN	0.9919768650018393	WITHOUT_CLASSIFICATION	0.008023134998160633	DESIGN
// NOTE VERY HACKISH WORKAROUND!! // TODO: Fix this so it will work for non-POJO entity mode	DESIGN	0.7847020727852185	DESIGN	0.2152979272147815	WITHOUT_CLASSIFICATION
// TODO: Fix this so it will work for non-POJO entity mode	DESIGN	0.7886752688539388	DESIGN	0.2113247311460613	WITHOUT_CLASSIFICATION
// We would probably refactor to have LogicParser (builds a tree of simple // expressions connected by and, or, not), ExpressionParser (translates // from OO terms like foo, foo.Bar, foo.Bar.Baz to SQL terms like // FOOS.ID, FOOS.BAR_ID, etc) and PathExpressionParser (which does much // the same thing it does now)	DESIGN	0.9123557112959033	WITHOUT_CLASSIFICATION	0.08764428870409674	DESIGN
//TODO: this is a little inefficient, don't need to do a whole //      deep replaceElements() call	DESIGN	0.7822969587143204	DESIGN	0.2177030412856796	WITHOUT_CLASSIFICATION
//workaround for WebLogic	DESIGN	0.9996773434945119	WITHOUT_CLASSIFICATION	3.2265650548814976E-4	DESIGN
//TODO: this dependency is kinda Bad	DESIGN	0.714976317946315	DESIGN	0.2850236820536851	WITHOUT_CLASSIFICATION
//ick!	DESIGN	0.997954794544069	WITHOUT_CLASSIFICATION	0.002045205455931084	DESIGN
// short cut check...	DESIGN	0.9999756444907921	WITHOUT_CLASSIFICATION	2.4355509207888088E-5	DESIGN
// todo : move to StringHelper?	DESIGN	0.9981537177108489	WITHOUT_CLASSIFICATION	0.001846282289151097	DESIGN
//yukky! Don't you have subclasses for that! //TODO race conditions can happen here	DESIGN	0.961191446476777	WITHOUT_CLASSIFICATION	0.03880855352322291	DESIGN
//TODO: We probably should have a StatisticsNotPublishedException, to make it clean	DESIGN	0.8421173286870769	DESIGN	0.15788267131292308	WITHOUT_CLASSIFICATION
// FIXME hack to work around fact that calling // Node added = root.addChild( fqn ); doesn't  // properly set the version on the node	DESIGN	0.9994567772052652	WITHOUT_CLASSIFICATION	5.432227947347695E-4	DESIGN
// TODO: I considered validating the presence of the TS cache here, // but decided to defer unti getQueryCacheInstance() in case the  // cache is never actually used	DESIGN	0.7682667513654132	DESIGN	0.23173324863458666	WITHOUT_CLASSIFICATION
//need to do that here rather than in the save event listener to let //the post insert events to have a id-filled entity when IDENTITY is used (EJB3)	DESIGN	0.6963795259652207	WITHOUT_CLASSIFICATION	0.3036204740347794	DESIGN
//TODO: simply remove this override //      if we fix the above todos	DESIGN	0.687357024325325	WITHOUT_CLASSIFICATION	0.31264297567467514	DESIGN
// This, is used by SessionFactoryImpl to hand to the generated SessionImpl; // was the only reason I could see that we cannot just use null as // Settings.cacheProvider	DESIGN	0.9987822749721215	WITHOUT_CLASSIFICATION	0.001217725027878577	DESIGN
// this is done here 'cos we might only know the type here (ugly!) // TODO: improve this a lot:	DESIGN	0.9942384474947088	DESIGN	0.005761552505291258	WITHOUT_CLASSIFICATION
// todo : would love to have this work on a notification basis //    where the successful binding of an entity/subclass would //    emit a notification which the extendsQueue entries could //    react to...	DESIGN	0.9964044582731346	WITHOUT_CLASSIFICATION	0.0035955417268653893	DESIGN
// TODO : not sure the best way to handle this. // The non-performant way :	DESIGN	0.5272977546562813	DESIGN	0.47270224534371874	WITHOUT_CLASSIFICATION
// would be better to use the element-type to determine // whether the old and the new are equal here; the problem being // we do not necessarily have access to the element type in all // cases	DESIGN	0.8693309700016717	WITHOUT_CLASSIFICATION	0.13066902999832833	DESIGN
// This next bit is to allow for both unsaved-value="negative" // and for "older" behavior where version number did not get // seeded if it was already set in the object // TODO: shift it into unsaved-value strategy	DESIGN	0.9999490148952243	DESIGN	5.098510477567774E-5	WITHOUT_CLASSIFICATION
// merges don't cascade to uninitialized collections //	DESIGN	0.9985731040197476	WITHOUT_CLASSIFICATION	0.0014268959802524448	DESIGN
// TODO: an alternative is to check if the owner has changed; if it hasn't then // return collection.getOwner()	DESIGN	0.9208092465349705	WITHOUT_CLASSIFICATION	0.07919075346502945	DESIGN
//it is possible that the tree-walking in OuterJoinLoader can get to //an association defined by a subclass, in which case the property-ref //might refer to a property defined on a subclass of the current class //in this case, the table name is not known - this temporary solution  //assumes that the property-ref refers to a property of the subclass //table that the association belongs to (a reasonable guess) //TODO: fix this, add: OuterJoinLoadable.getSubclassPropertyTableName(String propertyName)	DESIGN	0.9981641922790898	DESIGN	0.0018358077209101563	WITHOUT_CLASSIFICATION
// this only works because collection entries are kept in a sequenced // map by persistence context (maybe we should do like entities and // keep a separate sequences set...) //TODO: calling entrySet on an IdentityMap is SLOW!!	DESIGN	0.9751269736123745	DESIGN	0.024873026387625435	WITHOUT_CLASSIFICATION
// important, to account for newly saved entities in query // todo : some kind of check for new status...	DESIGN	0.998869464397575	WITHOUT_CLASSIFICATION	0.0011305356024249966	DESIGN
// brand new collection //TODO: or an array!! we can't lock objects with arrays now??	DESIGN	0.9555093234556105	WITHOUT_CLASSIFICATION	0.04449067654438955	DESIGN
//TODO: if object was an uninitialized proxy, this is inefficient, //      resulting in two SQL selects	DESIGN	0.8869172741098256	WITHOUT_CLASSIFICATION	0.1130827258901744	DESIGN
//before cascade! //TODO: should this be Session.instantiate(Persister, ...)?	DESIGN	0.5660354549052118	WITHOUT_CLASSIFICATION	0.4339645450947882	DESIGN
// TODO : absolutely no usages of this constructor form; can it go away?	DESIGN	0.6028117593590483	WITHOUT_CLASSIFICATION	0.39718824064095176	DESIGN
// todo : need to find a clean way to handle the "event source" role // a seperate classs responsible for generating/dispatching events just duplicates most of the Session methods... // passing around seperate reto interceptor, factory, actionQueue, and persistentContext is not manageable...	DESIGN	0.9866233735543715	WITHOUT_CLASSIFICATION	0.013376626445628568	DESIGN
// todo : remove	DESIGN	0.9998650656018989	WITHOUT_CLASSIFICATION	1.3493439810100533E-4	DESIGN
//aliasRefNode.resolve( false, false, aliasRefNode.getText() ); //TODO: is it kosher to do it here? //TODO: is it kosher to do it here?	DESIGN	0.7284074333362575	WITHOUT_CLASSIFICATION	0.2715925666637425	DESIGN
// No explicit select expression; render the id and properties // projection lists for every persister in the from clause into // a single 'token node'. //TODO: the only reason we need this stuff now is collection filters, //      we should get rid of derived select clause completely!	DESIGN	0.9710846677150117	DESIGN	0.02891533228498832	WITHOUT_CLASSIFICATION
// TODO : an optimization here would be to consider cascade deletes and not gen those delete statements; //      the difficulty is the ordering of the tables here vs the cascade attributes on the persisters -> //          the table info gotten here should really be self-contained (i.e., a class representation //          defining all the needed attributes), then we could then get an array of those	DESIGN	0.9805324682580567	DESIGN	0.019467531741943246	WITHOUT_CLASSIFICATION
// TODO: get SQL rendering out of here, create an AST for the join expressions. // Use the SQL generator grammar to generate the SQL text for the index expression.	DESIGN	0.9811962954537388	WITHOUT_CLASSIFICATION	0.018803704546261294	DESIGN
// TODO : this really needs to be delayed unitl after we definitively know all node types // where this is currently a problem is parameters for which where we cannot unequivocally // resolve an expected type	DESIGN	0.9983824448371177	DESIGN	0.0016175551628823449	WITHOUT_CLASSIFICATION
// TODO: Figure out a better way to get the FROM elements in a proper tree structure. // If this is not the destination of a many-to-many, add it as a child of the origin.	DESIGN	0.8967529109085403	WITHOUT_CLASSIFICATION	0.10324708909145972	DESIGN
// work around that crazy issue where the tree contains // "empty" FromElements (no text); afaict, this is caused // by FromElementFactory.createCollectionJoin()	DESIGN	0.9586340539826013	WITHOUT_CLASSIFICATION	0.04136594601739874	DESIGN
//TODO: this class does too many things! we need a different //kind of path expression parser for each of the diffferent //ways in which path expressions can occur	DESIGN	0.7144797530433817	WITHOUT_CLASSIFICATION	0.2855202469566183	DESIGN
//real hacky... // used to count the nesting of parentheses	DESIGN	0.9991444181182867	WITHOUT_CLASSIFICATION	8.555818817133254E-4	DESIGN
// TODO : would be really nice to cache the spec on the query-def so as to not have to re-calc the hash; // currently not doable though because of the resultset-ref stuff...	DESIGN	0.7122109914041038	WITHOUT_CLASSIFICATION	0.28778900859589607	DESIGN
//for arrays, we should end the collection load before resolving //the entities, since the actual array instances are not instantiated //during loading //TODO: or we could do this polymorphically, and have two //      different operations implemented differently for arrays	DESIGN	0.9896631619344258	WITHOUT_CLASSIFICATION	0.010336838065574153	DESIGN
// polymorphism not really handled completely correctly, // perhaps...well, actually its ok, assuming that the // entity name used in the lookup is the same as the // the one used here, which it will be	DESIGN	0.9870645444882854	WITHOUT_CLASSIFICATION	0.01293545551171449	DESIGN
// TODO: should "record" how many properties we have reffered to - and if we  //       don't get'em'all we throw an exception! Way better than trial and error ;)	DESIGN	0.9993953469904828	DESIGN	6.046530095171333E-4	WITHOUT_CLASSIFICATION
// VERY IMPORTANT!!!! - This class needs to be free of any static references // to any CGLIB or Javassist classes.  Otherwise, users will always need both // on their classpaths no matter which (if either) they use. // // Another option here would be to remove the Hibernate.isPropertyInitialized() // method and have the users go through the SessionFactory to get this information.	DESIGN	0.936815919433116	DESIGN	0.063184080566884	WITHOUT_CLASSIFICATION
// TODO: is it really neceassry to provide Configuration to CollectionPersisters ? Should it not be enough with associated class ? // or why does EntityPersister's not get access to configuration ? // // The only reason I could see that Configuration gets passed to collection persisters // is so that they can look up the dom4j node name of the entity element in case // no explicit node name was applied at the collection element level.  Are you kidding me? // Trivial to fix then.  Just store and expose the node name on the entity persister // (which the collection persister looks up anyway via other means...).	DESIGN	0.9998077590885501	DESIGN	1.9224091144985725E-4	WITHOUT_CLASSIFICATION
//for backward compatibility, allow a set with no not-null  //element columns, using all columns in the row locater SQL //TODO: create an implicit not null constraint on all cols?	DESIGN	0.937267042435841	WITHOUT_CLASSIFICATION	0.06273295756415899	DESIGN
//SPACES //TODO: i'm not sure, but perhaps we should exclude //      abstract denormalized tables?	DESIGN	0.75026198582481	WITHOUT_CLASSIFICATION	0.24973801417519004	DESIGN
//workaround, for backward compatibility of sets with no //not-null columns, assume all columns are used in the //row locator SQL	DESIGN	0.9972203102667043	WITHOUT_CLASSIFICATION	0.0027796897332956357	DESIGN
//note that this method could easily be moved up to BasicEntityPersister, //if we ever needed to reuse it from other subclasses	DESIGN	0.5599259550546596	WITHOUT_CLASSIFICATION	0.44007404494534047	DESIGN
//index += getPropertyColumnSpan( i ); //TODO:  this is kinda slow...	DESIGN	0.8138481825026833	WITHOUT_CLASSIFICATION	0.18615181749731677	DESIGN
//TODO: need some caching scheme? really comes down to decision  //      regarding amount of state (if any) kept on PropertyAccessors	DESIGN	0.9245312005146533	WITHOUT_CLASSIFICATION	0.07546879948534659	DESIGN
// TODO: here is why we need to make bytecode provider global :( // TODO : again, fix this after HHH-1907 is complete	DESIGN	0.9999999936156053	DESIGN	6.384394681633117E-9	WITHOUT_CLASSIFICATION
//TODO: Yuck! This is not quite good enough, it's a quick //hack around the problem of having a to-one association //that refers to an embedded component:	DESIGN	0.8050399924151619	WITHOUT_CLASSIFICATION	0.1949600075848381	DESIGN
// for DOM4J "collections" only // TODO: it would be better if this was done at the higher level by Printer	DESIGN	0.9919463211531909	DESIGN	0.008053678846809045	WITHOUT_CLASSIFICATION
// would be great to move all this below here into another method that could also be used // from the new scrolling stuff. // // Would need to change the way the max-row stuff is handled (i.e. behind an interface) so // that I could do the control breaking at the means to know when to stop	DESIGN	0.9965079791063014	DESIGN	0.0034920208936985333	WITHOUT_CLASSIFICATION
//TODO: can we *always* use the "null property" approach for everything?	DESIGN	0.8974036807538497	WITHOUT_CLASSIFICATION	0.10259631924615022	DESIGN
//polymorphism comment above	DESIGN	0.99995524507107	WITHOUT_CLASSIFICATION	4.4754928929874535E-5	DESIGN
// some messy, complex stuff here, since createCriteria() can take an // aliased path, or a path rooted at the creating criteria instance	DESIGN	0.9999689196147624	WITHOUT_CLASSIFICATION	3.10803852375616E-5	DESIGN
//TODO: really bad, evil hack to fix!!!	DESIGN	0.7970991634058413	DESIGN	0.2029008365941588	WITHOUT_CLASSIFICATION
// ugly hack for cases like "elements(foo.bar.collection)" // (multi-part path expression ending in elements or indices)	DESIGN	0.9595318490162453	WITHOUT_CLASSIFICATION	0.04046815098375462	DESIGN
// try block is a hack around fact that currently tuplizers are not // given the opportunity to resolve a subclass entity name.  this // allows the (we assume custom) interceptor the ability to // influence this decision if we were not able to based on the // given entityName	DESIGN	0.6018752125467903	WITHOUT_CLASSIFICATION	0.3981247874532097	DESIGN
/////////////////////////////////////////////////////////////////////// // HACK ALERT !!!!!!!!!!!!!!!!!!!!!!!!!!!! // Attempt to work around "ghost" ImpliedFromElements that occasionally // show up between the actual things being joined.  This consistently // occurs from index nodes (at least against many-to-many).  Not sure // if there are other conditions // // Essentially, look-ahead to the next FromElement that actually // writes something to the SQL	DESIGN	0.996672991826869	WITHOUT_CLASSIFICATION	0.0033270081731310284	DESIGN
//init the table here instead of earlier, so that we can get a quoted table name //TODO: would it be better to simply pass the qualified table name, instead of //      splitting it up into schema/catalog/table names	DESIGN	0.8467477485414332	DESIGN	0.15325225145856672	WITHOUT_CLASSIFICATION
// TODO : would be great to have a Mapping#hasNonIdentifierPropertyNamedId method // I don't believe that Mapping#getReferencedPropertyType accounts for the identifier property; so // if it returns for a property named 'id', then we should have a non-id field named id	DESIGN	0.9968787153969672	DESIGN	0.00312128460303295	WITHOUT_CLASSIFICATION
//TODO: is this really necessary????	DESIGN	0.8439447676180881	WITHOUT_CLASSIFICATION	0.156055232381912	DESIGN
//TODO: ideally we need the construction of PropertyAccessor to take the following: //      1) EntityMode //      2) EntityMode-specific data (i.e., the classname for pojo entities) //      3) Property-specific data based on the EntityMode (i.e., property-name or dom4j-node-name) // The easiest way, with the introduction of the new runtime-metamodel classes, would be the // the following predicates: //      1) PropertyAccessorFactory.getPropertyAccessor() takes references to both a //          org.hibernate.metadata.EntityModeMetadata and org.hibernate.metadata.Property //      2) What is now termed a "PropertyAccessor" stores any values needed from those two //          pieces of information //      3) Code can then simply call PropertyAccess.getGetter() with no parameters; likewise with //          PropertyAccessor.getSetter()	DESIGN	0.6977436489940643	WITHOUT_CLASSIFICATION	0.3022563510059357	DESIGN
//TODO: this is temporary in that the end result will probably not take a Property reference per-se.	DESIGN	0.6437241061720963	DESIGN	0.35627589382790364	WITHOUT_CLASSIFICATION
// todo : this eventually needs to be removed	DESIGN	0.9837149582533757	WITHOUT_CLASSIFICATION	0.01628504174662428	DESIGN
//TODO: make this a bit nicer	DESIGN	0.9595102299389331	WITHOUT_CLASSIFICATION	0.04048977006106687	DESIGN
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.9915846175957129	WITHOUT_CLASSIFICATION	0.008415382404287124	DESIGN
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.9915846175957129	WITHOUT_CLASSIFICATION	0.008415382404287124	DESIGN
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.9915846175957129	WITHOUT_CLASSIFICATION	0.008415382404287124	DESIGN
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.9915846175957129	WITHOUT_CLASSIFICATION	0.008415382404287124	DESIGN
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.9915846175957129	WITHOUT_CLASSIFICATION	0.008415382404287124	DESIGN
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.9915846175957129	WITHOUT_CLASSIFICATION	0.008415382404287124	DESIGN
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.9915846175957129	WITHOUT_CLASSIFICATION	0.008415382404287124	DESIGN
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.9915846175957129	WITHOUT_CLASSIFICATION	0.008415382404287124	DESIGN
/**     * FIXME Per the RegionFactory class Javadoc, this constructor version     * should not be necessary.     *      * @param props The configuration properties     */	DESIGN	0.9926189299091088	WITHOUT_CLASSIFICATION	0.007381070090891282	DESIGN
/**     * FIXME Per the RegionFactory class Javadoc, this constructor version     * should not be necessary.     *      * @param props The configuration properties     */	DESIGN	0.9926189299091088	WITHOUT_CLASSIFICATION	0.007381070090891282	DESIGN
/**     * FIXME Per the RegionFactory class Javadoc, this constructor version     * should not be necessary.     *      * @param props The configuration properties     */	DESIGN	0.9926189299091088	WITHOUT_CLASSIFICATION	0.007381070090891282	DESIGN
// TODO : probably better to calculate these and pass them in, as it'll be more performant	DESIGN	0.9782526001865138	DESIGN	0.021747399813486185	WITHOUT_CLASSIFICATION
